[[reko::register("D0")]]    BYTE AbortIO([[reko::register("A1")]] struct IORequest * iORequest);
                            void AddDevice([[reko::register("A1")]] struct Device * device);
                            void AddHead([[reko::register("A0")]] struct List * list,[[reko::register("A1")]] struct Node * node);
                            void AddIntServer([[reko::register("D0",0,4)]] ULONG intNum,[[reko::register("A1")]] struct Interrupt * interrupt);
                            void AddLibrary([[reko::register("A1")]] struct Library * library);
                            void AddMemList([[reko::register("D0")]] ULONG size,[[reko::register("D1")]] ULONG attributes,[[reko::register("D2")]] LONG pri,[[reko::register("A0")]] APTR base,[[reko::register("A1")]] char * name);
                            void AddPort([[reko::register("A1")]] struct MsgPort * port);
                            void AddResource([[reko::register("A1")]] APTR resource);
                            void AddSemaphore([[reko::register("A1")]] struct SignalSemaphore * signalSemaphore);
                            void AddTail([[reko::register("A0")]] struct List * list,[[reko::register("A1")]] struct Node * node);
                            void AddTask([[reko::register("A1")]] struct Task * task,[[reko::register("A2")]] APTR initialPC,[[reko::register("A3")]] APTR finalPC);
                            void Alert([[reko::register("D7")]] ULONG alertNum,[[reko::register("A5")]] APTR parameters);
[[reko::register("D0")]]    void * AllocAbs([[reko::register("D0")]] ULONG byteSize,[[reko::register("A1")]] APTR location);
[[reko::register("D0")]]    void * Allocate([[reko::register("A0")]] struct MemHeader * MemHeader,[[reko::register("D0")]] ULONG byteSize);
[[reko::register("D0")]]    struct MemList * AllocEntry([[reko::register("A0")]] struct MemList * memList);
[[reko::register("D0")]]    void * AllocMem([[reko::register("D0")]] ULONG byteSize,[[reko::register("D1")]] ULONG attributes);
[[reko::register("D0")]]    BYTE AllocSignal([[reko::register("D0")]] LONG signalNum);
[[reko::register("D0")]]    LONG AllocTrap([[reko::register("D0")]] LONG trapNum);
[[reko::register("D0")]]    LONG AttemptSemaphore([[reko::register("A0")]] struct SignalSemaphore * signalSemaphore);
[[reko::register("D0")]]    ULONG AvailMem([[reko::register("D1")]] ULONG attributes);
                            void Cause([[reko::register("A1")]] struct Interrupt * interrupt);
[[reko::register("D0")]]    BOOL CheckIO([[reko::register("A1")]] struct IORequest * iORequest);
                            void CloseDevice([[reko::register("A1")]] struct IORequest * iORequest);
                            void CloseLibrary([[reko::register("A1")]] struct Library * library);
                            void CopyMem([[reko::register("A0")]] APTR source,[[reko::register("A1")]] APTR dest,[[reko::register("D0")]] ULONG size);
                            void CopyMem([[reko::register("A0")]] ULONG * uick(source,[[reko::register("A1")]] ULONG * dest,[[reko::register("D0")]] ULONG size);
                            void Deallocate([[reko::register("A0")]] struct MemHeader * MemHeader,[[reko::register("A1")]] APTR memoryBlock,[[reko::register("D0")]] ULONG byteSize);
                            void Debug([[reko::register("D0")]] ULONG unused);
                            void Disable(void);
[[reko::register("D0")]]    BYTE DoIO([[reko::register("A1")]] struct IORequest * iORequest);
                            void Enable(void);
                            void Enqueue([[reko::register("A0")]] struct List * list,[[reko::register("A1")]] struct Node * node);
[[reko::register("D0")]]    struct Node * FindName([[reko::register("A0")]] struct List * start,[[reko::register("A1")]] char * name);
[[reko::register("D0")]]    struct MsgPort * FindPort([[reko::register("A1")]] char * name);
[[reko::register("D0")]]    struct Resident * FindResident([[reko::register("A1")]] char * name);
[[reko::register("D0")]]    struct SignalSemaphore * FindSemaphore([[reko::register("A1")]] char * name);
[[reko::register("D0")]]    struct Task * FindTask([[reko::register("A1")]] char * name);
                            void Forbid(void);
                            void FreeEntry([[reko::register("A0")]] struct MemList * memList);
                            void FreeMem([[reko::register("A1")]] void * memoryBlock,[[reko::register("D0")]] ULONG byteSize);
                            void FreeSignal([[reko::register("D0")]] ULONG signalNum signalNum);
                            void FreeTrap([[reko::register("D0")]] ULONG trapNum);
[[reko::register("D0")]]    UWORD GetCC(void);
[[reko::register("D0")]]    struct Message * GetMsg([[reko::register("A0")]] struct MsgPort * port);
                            void InitCode([[reko::register("D0")]] ULONG startClass,[[reko::register("D1")]] ULONG version);
                            void InitResident([[reko::register("A1")]] struct Resident * resident,[[reko::register("D1")]] BPTR segList);
                            void InitSemaphore([[reko::register("A0")]] struct SignalSemaphore * signalSemaphore);
                            void InitStruct([[reko::register("A1")]] struct InitStruct * initTable,[[reko::register("A2")]] APTR memory,[[reko::register("D0")]] ULONG size);
                            void Insert([[reko::register("A0")]] struct List * list,[[reko::register("A1")]] struct Node * node,[[reko::register("A2")]] struct Node * listNode);
[[reko::register("D0")]]    ULONG MakeFunctions([[reko::register("A0")]] APTR target,[[reko::register("A1")]] APTR functionArray,[[reko::register("A2")]] APTR funcDispBase);
[[reko::register("D0")]]    struct Library * MakeLibrary([[reko::register("A0")]] APTR vectors,[[reko::register("A1")]] struct InitStruct * structure,[[reko::register("A2")]] APTR init,[[reko::register("D0")]] ULONG dSize,[[reko::register("D1")]] BPTR segList);
                            void ObtainSemaphore([[reko::register("A0")]] struct SignalSemaphore * signalSemaphore);
                            void ObtainSemaphoreList([[reko::register("A0")]] struct List * list);
[[reko::register("D0")]]    struct Library * OldOpenLibrary([[reko::register("A1")]] APTR libName);
[[reko::register("D0")]]    BYTE OpenDevice([[reko::register("A0")]] char * devName,[[reko::register("D0")]] ULONG unitNumber,[[reko::register("A1")]] struct IORequest * iORequest,[[reko::register("D1")]] ULONG flags);
[[reko::register("D0")]]    struct Library * OpenLibrary([[reko::register("A1")]] char * libName,[[reko::register("D0")]] ULONG version);
[[reko::register("D0")]]    APTR OpenResource([[reko::register("A1")]] char * resName);
                            void Permit(void);
[[reko::register("D0")]]    BYTE Procure([[reko::register("A0")]] struct Semaphore * semaphore,[[reko::register("A1")]] struct Message * bidMessage);
                            void PutMsg([[reko::register("A0")]] struct MsgPort * port,[[reko::register("A1")]] struct Message * message);
                            void RawDoFmt([[reko::register("A0")]] char * FormatString,[[reko::register("A1")]] APTR DataStream,void [[reko::register("A2")]] (*PutChProc)(),[[reko::register("A3")]] APTR PutChData);
                            void ReleaseSemaphore([[reko::register("A0")]] struct SignalSemaphore * signalSemaphore);
                            void ReleaseSemaphoreList([[reko::register("A0")]] struct List * list);
                            void RemDevice([[reko::register("A1")]] struct Device * device);
[[reko::register("D0")]]    struct Node * RemHead([[reko::register("A0")]] struct List * list);
                            void RemIntServer([[reko::register("D0")]] ULONG intNum,[[reko::register("A1")]] struct Interrupt * interrupt);
                            void RemLibrary([[reko::register("A1")]] struct Library * library);
                            void Remove([[reko::register("A1")]] struct Node * node);
                            void RemPort([[reko::register("A1")]] struct MsgPort * port);
                            void RemResource([[reko::register("A1")]] APTR resource);
                            void RemSemaphore([[reko::register("A1")]] struct SignalSemaphore * signalSemaphore);
[[reko::register("D0")]]    struct Node * RemTail([[reko::register("A0")]] struct List * list);
                            void RemTask([[reko::register("A1")]] struct Task * task);
                            void ReplyMsg([[reko::register("A1")]] struct Message * message);
                            void SendIO([[reko::register("A1")]] struct IORequest * iORequest);
[[reko::register("D0")]]    ULONG SetExcept([[reko::register("D0")]] ULONG newSignals,[[reko::register("D1")]] ULONG signalMask);
[[reko::register("D0")]]    APTR SetFunction([[reko::register("A1")]] struct Library * library,[[reko::register("A0.W")]] LONG funcOffset,[[reko::register("D0")]] APTR funcEntry);
[[reko::register("D0")]]    struct Interrupt * SetIntVector([[reko::register("D0",0,4)]] ULONG intNumber,[[reko::register("A1")]] struct Interrupt * interrupt);
[[reko::register("D0")]]    ULONG SetSignal([[reko::register("D0")]] ULONG newSignals,[[reko::register("D1")]] ULONG signalMask);
[[reko::register("D0")]]    ULONG SetSR([[reko::register("D0")]] ULONG newSR,[[reko::register("D1")]] ULONG mask);
[[reko::register("D0",0,8)]] BYTE SetTaskPri([[reko::register("A1")]] struct Task * task,[[reko::register("D0",0,8)]] LONG priority);
                            void Signal([[reko::register("A1")]] struct Task * task,[[reko::register("D0")]] ULONG signals);
                            void SumKickData(void);
                            void SumLibrary([[reko::register("A1")]] struct Library * library);
[[reko::register("D0")]]    APTR SuperState(void);
[[reko::register("D0")]]    ULONG TypeOfMem([[reko::register("A1")]] void * address);
                            void UserState([[reko::register("D0")]] APTR sysStack);
                            void Vacate([[reko::register("A0")]] struct Semaphore * semaphore);
[[reko::register("D0")]]    ULONG Wait([[reko::register("D0")]] ULONG signalSet);
[[reko::register("D0")]]    BYTE WaitIO([[reko::register("A1")]] struct IORequest * iORequest);
[[reko::register("D0")]]    struct Message * WaitPort([[reko::register("A0")]] struct MsgPort * port);
