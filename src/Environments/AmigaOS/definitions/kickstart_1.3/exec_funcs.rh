[[reko::reg("D0")]] BYTE AbortIO([[reko::reg("A1")]] struct IORequest * iORequest);
                    void AddDevice([[reko::reg("A1")]] struct Device * device);
                    void AddHead([[reko::reg("A0")]] struct List * list,[[reko::reg("A1")]] struct Node * node);
                    void AddIntServer([[reko::reg("D0",0,4)]] ULONG intNum,[[reko::reg("A1")]] struct Interrupt * interrupt);
                    void AddLibrary([[reko::reg("A1")]] struct Library * library);
                    void AddMemList([[reko::reg("D0")]] ULONG size,[[reko::reg("D1")]] ULONG attributes,[[reko::reg("D2")]] LONG pri,[[reko::reg("A0")]] APTR base,[[reko::reg("A1")]] char * name);
                    void AddPort([[reko::reg("A1")]] struct MsgPort * port);
                    void AddResource([[reko::reg("A1")]] APTR resource);
                    void AddSemaphore([[reko::reg("A1")]] struct SignalSemaphore * signalSemaphore);
                    void AddTail([[reko::reg("A0")]] struct List * list,[[reko::reg("A1")]] struct Node * node);
                    void AddTask([[reko::reg("A1")]] struct Task * task,[[reko::reg("A2")]] APTR initialPC,[[reko::reg("A3")]] APTR finalPC);
                    void Alert([[reko::reg("D7")]] ULONG alertNum,[[reko::reg("A5")]] APTR parameters);
[[reko::reg("D0")]] void * AllocAbs([[reko::reg("D0")]] ULONG byteSize,[[reko::reg("A1")]] APTR location);
[[reko::reg("D0")]] void * Allocate([[reko::reg("A0")]] struct MemHeader * MemHeader,[[reko::reg("D0")]] ULONG byteSize);
[[reko::reg("D0")]] struct MemList * AllocEntry([[reko::reg("A0")]] struct MemList * memList);
[[reko::reg("D0")]] void * AllocMem([[reko::reg("D0")]] ULONG byteSize,[[reko::reg("D1")]] ULONG attributes);
[[reko::reg("D0")]] BYTE AllocSignal([[reko::reg("D0")]] LONG signalNum);
[[reko::reg("D0")]] LONG AllocTrap([[reko::reg("D0")]] LONG trapNum);
[[reko::reg("D0")]] LONG AttemptSemaphore([[reko::reg("A0")]] struct SignalSemaphore * signalSemaphore);
[[reko::reg("D0")]] ULONG AvailMem([[reko::reg("D1")]] ULONG attributes);
                    void Cause([[reko::reg("A1")]] struct Interrupt * interrupt);
[[reko::reg("D0")]] BOOL CheckIO([[reko::reg("A1")]] struct IORequest * iORequest);
                    void CloseDevice([[reko::reg("A1")]] struct IORequest * iORequest);
                    void CloseLibrary([[reko::reg("A1")]] struct Library * library);
                    void CopyMem([[reko::reg("A0")]] APTR source,[[reko::reg("A1")]] APTR dest,[[reko::reg("D0")]] ULONG size);
                    void CopyMemQuick([[reko::reg("A0")]] ULONG * source,[[reko::reg("A1")]] ULONG * dest,[[reko::reg("D0")]] ULONG size);
                    void Deallocate([[reko::reg("A0")]] struct MemHeader * MemHeader,[[reko::reg("A1")]] APTR memoryBlock,[[reko::reg("D0")]] ULONG byteSize);
                    void Debug([[reko::reg("D0")]] ULONG unused);
                    void Disable(void);
[[reko::reg("D0")]] BYTE DoIO([[reko::reg("A1")]] struct IORequest * iORequest);
                    void Enable(void);
                    void Enqueue([[reko::reg("A0")]] struct List * list,[[reko::reg("A1")]] struct Node * node);
[[reko::reg("D0")]] struct Node * FindName([[reko::reg("A0")]] struct List * start,[[reko::reg("A1")]] char * name);
[[reko::reg("D0")]] struct MsgPort * FindPort([[reko::reg("A1")]] char * name);
[[reko::reg("D0")]] struct Resident * FindResident([[reko::reg("A1")]] char * name);
[[reko::reg("D0")]] struct SignalSemaphore * FindSemaphore([[reko::reg("A1")]] char * name);
[[reko::reg("D0")]] struct Task * FindTask([[reko::reg("A1")]] char * name);
                    void Forbid(void);
                    void FreeEntry([[reko::reg("A0")]] struct MemList * memList);
                    void FreeMem([[reko::reg("A1")]] void * memoryBlock,[[reko::reg("D0")]] ULONG byteSize);
                    void FreeSignal([[reko::reg("D0")]] ULONG signalNum);
                    void FreeTrap([[reko::reg("D0")]] ULONG trapNum);
[[reko::reg("D0")]] UWORD GetCC(void);
[[reko::reg("D0")]] struct Message * GetMsg([[reko::reg("A0")]] struct MsgPort * port);
                    void InitCode([[reko::reg("D0")]] ULONG startClass,[[reko::reg("D1")]] ULONG version);
                    void InitResident([[reko::reg("A1")]] struct Resident * resident,[[reko::reg("D1")]] BPTR segList);
                    void InitSemaphore([[reko::reg("A0")]] struct SignalSemaphore * signalSemaphore);
                    void InitStruct([[reko::reg("A1")]] struct InitStruct * initTable,[[reko::reg("A2")]] APTR memory,[[reko::reg("D0")]] ULONG size);
                    void Insert([[reko::reg("A0")]] struct List * list,[[reko::reg("A1")]] struct Node * node,[[reko::reg("A2")]] struct Node * listNode);
[[reko::reg("D0")]] ULONG MakeFunctions([[reko::reg("A0")]] APTR target,[[reko::reg("A1")]] APTR functionArray,[[reko::reg("A2")]] APTR funcDispBase);
[[reko::reg("D0")]] struct Library * MakeLibrary([[reko::reg("A0")]] APTR vectors,[[reko::reg("A1")]] struct InitStruct * structure,[[reko::reg("A2")]] APTR init,[[reko::reg("D0")]] ULONG dSize,[[reko::reg("D1")]] BPTR segList);
                    void ObtainSemaphore([[reko::reg("A0")]] struct SignalSemaphore * signalSemaphore);
                    void ObtainSemaphoreList([[reko::reg("A0")]] struct List * list);
[[reko::reg("D0")]] struct Library * OldOpenLibrary([[reko::reg("A1")]] APTR libName);
[[reko::reg("D0")]] BYTE OpenDevice([[reko::reg("A0")]] char * devName,[[reko::reg("D0")]] ULONG unitNumber,[[reko::reg("A1")]] struct IORequest * iORequest,[[reko::reg("D1")]] ULONG flags);
[[reko::reg("D0")]] struct Library * OpenLibrary([[reko::reg("A1")]] char * libName,[[reko::reg("D0")]] ULONG version);
[[reko::reg("D0")]] APTR OpenResource([[reko::reg("A1")]] char * resName);
                    void Permit(void);
[[reko::reg("D0")]] BYTE Procure([[reko::reg("A0")]] struct Semaphore * semaphore,[[reko::reg("A1")]] struct Message * bidMessage);
                    void PutMsg([[reko::reg("A0")]] struct MsgPort * port,[[reko::reg("A1")]] struct Message * message);
                    void RawDoFmt([[reko::reg("A0")]] char * FormatString,[[reko::reg("A1")]] APTR DataStream,[[reko::reg("A2")]] void (*PutChProc)(),[[reko::reg("A3")]] APTR PutChData);
                    void ReleaseSemaphore([[reko::reg("A0")]] struct SignalSemaphore * signalSemaphore);
                    void ReleaseSemaphoreList([[reko::reg("A0")]] struct List * list);
                    void RemDevice([[reko::reg("A1")]] struct Device * device);
[[reko::reg("D0")]] struct Node * RemHead([[reko::reg("A0")]] struct List * list);
                    void RemIntServer([[reko::reg("D0")]] ULONG intNum,[[reko::reg("A1")]] struct Interrupt * interrupt);
                    void RemLibrary([[reko::reg("A1")]] struct Library * library);
                    void Remove([[reko::reg("A1")]] struct Node * node);
                    void RemPort([[reko::reg("A1")]] struct MsgPort * port);
                    void RemResource([[reko::reg("A1")]] APTR resource);
                    void RemSemaphore([[reko::reg("A1")]] struct SignalSemaphore * signalSemaphore);
[[reko::reg("D0")]] struct Node * RemTail([[reko::reg("A0")]] struct List * list);
                    void RemTask([[reko::reg("A1")]] struct Task * task);
                    void ReplyMsg([[reko::reg("A1")]] struct Message * message);
                    void SendIO([[reko::reg("A1")]] struct IORequest * iORequest);
[[reko::reg("D0")]] ULONG SetExcept([[reko::reg("D0")]] ULONG newSignals,[[reko::reg("D1")]] ULONG signalMask);
[[reko::reg("D0")]] APTR SetFunction([[reko::reg("A1")]] struct Library * library,[[reko::reg("A0.W")]] LONG funcOffset,[[reko::reg("D0")]] APTR funcEntry);
[[reko::reg("D0")]] struct Interrupt * SetIntVector([[reko::reg("D0",0,4)]] ULONG intNumber,[[reko::reg("A1")]] struct Interrupt * interrupt);
[[reko::reg("D0")]] ULONG SetSignal([[reko::reg("D0")]] ULONG newSignals,[[reko::reg("D1")]] ULONG signalMask);
[[reko::reg("D0")]] ULONG SetSR([[reko::reg("D0")]] ULONG newSR,[[reko::reg("D1")]] ULONG mask);
[[reko::reg("D0")]] BYTE SetTaskPri([[reko::reg("A1")]] struct Task * task,[[reko::reg("D0",0,8)]] LONG priority);
                    void Signal([[reko::reg("A1")]] struct Task * task,[[reko::reg("D0")]] ULONG signals);
                    void SumKickData(void);
                    void SumLibrary([[reko::reg("A1")]] struct Library * library);
[[reko::reg("D0")]] APTR SuperState(void);
[[reko::reg("D0")]] ULONG TypeOfMem([[reko::reg("A1")]] void * address);
                    void UserState([[reko::reg("D0")]] APTR sysStack);
                    void Vacate([[reko::reg("A0")]] struct Semaphore * semaphore);
[[reko::reg("D0")]] ULONG Wait([[reko::reg("D0")]] ULONG signalSet);
[[reko::reg("D0")]] BYTE WaitIO([[reko::reg("A1")]] struct IORequest * iORequest);
[[reko::reg("D0")]] struct Message * WaitPort([[reko::reg("A0")]] struct MsgPort * port);
