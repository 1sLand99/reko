typedef long BPTR;
 [[reko::amiga_function_vector(DosLibrary,-36)]]  void  Close( [[reko::arg(register,"D1")]] struct FileHandle *file );
 [[reko::amiga_function_vector(DosLibrary,-120)]]  struct FileLock * [[reko::arg(register,"D0")]]  CreateDir( [[reko::arg(register,"D1")]] char *name );
 [[reko::amiga_function_vector(DosLibrary,-138)]]  struct Process * [[reko::arg(register,"D0")]]  CreateProc( [[reko::arg(register,"D1")]] char *name,[[reko::arg(register,"D2")]] LONG pri,[[reko::arg(register,"D3")]] BPTR *segment,[[reko::arg(register,"D4")]] LONG stackSize );
 [[reko::amiga_function_vector(DosLibrary,-126)]]  struct FileLock * [[reko::arg(register,"D0")]]  CurrentDir( [[reko::arg(register,"D1")]] struct FileLock *lock );
 [[reko::amiga_function_vector(DosLibrary,-192)]]  void  DateStamp( [[reko::arg(register,"D1")]] LONG *v );
 [[reko::amiga_function_vector(DosLibrary,-198)]]  void  Delay( [[reko::arg(register,"D1")]] LONG ticks );
 [[reko::amiga_function_vector(DosLibrary,-72)]]  BOOL  [[reko::arg(register,"D0")]]  DeleteFile( [[reko::arg(register,"D1")]] char *name );
 [[reko::amiga_function_vector(DosLibrary,-174)]]  struct Process * [[reko::arg(register,"D0")]]  DeviceProc( [[reko::arg(register,"D1")]] char *name );
 [[reko::amiga_function_vector(DosLibrary,-96)]]  struct FileLock * [[reko::arg(register,"D0")]]  DupLock( [[reko::arg(register,"D1")]] struct FileLock *lock );
 [[reko::amiga_function_vector(DosLibrary,-102)]]  BOOL  [[reko::arg(register,"D0")]]  Examine( [[reko::arg(register,"D1")]] struct FileLock *lock,[[reko::arg(register,"D2")]] struct FileInfoBlock *infoBlock );
 [[reko::amiga_function_vector(DosLibrary,-222)]]  BOOL  [[reko::arg(register,"D0")]]  Execute( [[reko::arg(register,"D1")]] char *commandString,[[reko::arg(register,"D2")]] struct FileHandle *input,[[reko::arg(register,"D3")]] struct FileHandle *output );
 [[reko::amiga_function_vector(DosLibrary,-144)]]  void  Exit( [[reko::arg(register,"D1")]] LONG returnCode );
 [[reko::amiga_function_vector(DosLibrary,-108)]]  BOOL  [[reko::arg(register,"D0")]]  ExNext( [[reko::arg(register,"D1")]] struct FileLock *lock,[[reko::arg(register,"D2")]] struct FileInfoBlock *infoBlock );
 [[reko::amiga_function_vector(DosLibrary,-114)]]  BOOL  [[reko::arg(register,"D0")]]  Info( [[reko::arg(register,"D1")]] struct FileLock *lock,[[reko::arg(register,"D2")]] struct InfoData *parameterBlock );
 [[reko::amiga_function_vector(DosLibrary,-132)]]  LONG  [[reko::arg(register,"D0")]]  IoErr(  );
 [[reko::amiga_function_vector(DosLibrary,-54)]]  struct FileHandle * [[reko::arg(register,"D0")]]  Input(  );
 [[reko::amiga_function_vector(DosLibrary,-216)]]  BOOL  [[reko::arg(register,"D0")]]  IsInteractive( [[reko::arg(register,"D1")]] struct FileHandle *file );
 [[reko::amiga_function_vector(DosLibrary,-150)]]  BPTR  [[reko::arg(register,"D0")]]  LoadSeg( [[reko::arg(register,"D1")]] char *name );
 [[reko::amiga_function_vector(DosLibrary,-84)]]  struct FileLock * [[reko::arg(register,"D0")]]  Lock( [[reko::arg(register,"D1")]] char *name,[[reko::arg(register,"D2")]] LONG accessMode );
 [[reko::amiga_function_vector(DosLibrary,-30)]]  struct FileHandle * [[reko::arg(register,"D0")]]  Open( [[reko::arg(register,"D1")]] char *name,[[reko::arg(register,"D2")]] LONG accessMode );
 [[reko::amiga_function_vector(DosLibrary,-60)]]  struct FileHandle * [[reko::arg(register,"D0")]]  Output(  );
 [[reko::amiga_function_vector(DosLibrary,-210)]]  struct FileLock * [[reko::arg(register,"D0")]]  ParentDir( [[reko::arg(register,"D1")]] struct FileLock *lock );
 [[reko::amiga_function_vector(DosLibrary,-42)]]  LONG  [[reko::arg(register,"D0")]]  Read( [[reko::arg(register,"D1")]] struct FileHandle *file,[[reko::arg(register,"D2")]] char *buffer,[[reko::arg(register,"D3")]] LONG length );
 [[reko::amiga_function_vector(DosLibrary,-78)]]  BOOL  [[reko::arg(register,"D0")]]  Rename( [[reko::arg(register,"D1")]] char *oldName,[[reko::arg(register,"D2")]] char *newName );
 [[reko::amiga_function_vector(DosLibrary,-66)]]  LONG  [[reko::arg(register,"D0")]]  Seek( [[reko::arg(register,"D1")]] struct FileHandle *file,[[reko::arg(register,"D2")]] LONG position,[[reko::arg(register,"D3")]] LONG mode );
 [[reko::amiga_function_vector(DosLibrary,-180)]]  BOOL  [[reko::arg(register,"D0")]]  SetComment( [[reko::arg(register,"D1")]] char *name,[[reko::arg(register,"D2")]] char *comment );
 [[reko::amiga_function_vector(DosLibrary,-186)]]  BOOL  [[reko::arg(register,"D0")]]  SetProtection( [[reko::arg(register,"D1")]] char *name,[[reko::arg(register,"D2:4")]] LONG mask );
 [[reko::amiga_function_vector(DosLibrary,-156)]]  BOOL  [[reko::arg(register,"D0")]]  UnLoadSeg( [[reko::arg(register,"D1")]] BPTR segment );
 [[reko::amiga_function_vector(DosLibrary,-90)]]  void  UnLock( [[reko::arg(register,"D1")]] struct FileLock *lock );
 [[reko::amiga_function_vector(DosLibrary,-204)]]  BOOL  [[reko::arg(register,"D0")]]  WaitForChar( [[reko::arg(register,"D1")]] struct FileHandle *file,[[reko::arg(register,"D2")]] LONG timeout );
 [[reko::amiga_function_vector(DosLibrary,-48)]]  LONG  [[reko::arg(register,"D0")]]  Write( [[reko::arg(register,"D1")]] struct FileHandle *file,[[reko::arg(register,"D2")]] char *buffer,[[reko::arg(register,"D3")]] LONG length );
