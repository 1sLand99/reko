typedef long BPTR;
void Close( [[reko::reg("D1")]] struct FileHandle *file );
[[reko::reg("D0")]] struct FileLock * CreateDir( [[reko::reg("D1")]] char *name );
[[reko::reg("D0")]] struct Process * CreateProc( [[reko::reg("D1")]] char *name,[[reko::reg("D2")]] LONG pri,[[reko::reg("D3")]] BPTR *segment,[[reko::reg("D4")]] LONG stackSize );
[[reko::reg("D0")]] struct FileLock * CurrentDir( [[reko::reg("D1")]] struct FileLock *lock );
void DateStamp( [[reko::reg("D1")]] LONG *v );
void Delay( [[reko::reg("D1")]] LONG ticks );
[[reko::reg("D0")]] BOOL  DeleteFile( [[reko::reg("D1")]] char *name );
[[reko::reg("D0")]] struct Process * DeviceProc( [[reko::reg("D1")]] char *name );
[[reko::reg("D0")]] struct FileLock * DupLock( [[reko::reg("D1")]] struct FileLock *lock );
[[reko::reg("D0")]] BOOL  Examine( [[reko::reg("D1")]] struct FileLock *lock,[[reko::reg("D2")]] struct FileInfoBlock *infoBlock );
[[reko::reg("D0")]] BOOL  Execute( [[reko::reg("D1")]] char *commandString,[[reko::reg("D2")]] struct FileHandle *input,[[reko::reg("D3")]] struct FileHandle *output );
void Exit( [[reko::reg("D1")]] LONG returnCode );
[[reko::reg("D0")]] BOOL  ExNext( [[reko::reg("D1")]] struct FileLock *lock,[[reko::reg("D2")]] struct FileInfoBlock *infoBlock );
[[reko::reg("D0")]] BOOL  Info( [[reko::reg("D1")]] struct FileLock *lock,[[reko::reg("D2")]] struct InfoData *parameterBlock );
[[reko::reg("D0")]] LONG  IoErr(  );
[[reko::reg("D0")]] struct FileHandle * Input(  );
[[reko::reg("D0")]] BOOL  IsInteractive( [[reko::reg("D1")]] struct FileHandle *file );
[[reko::reg("D0")]] BPTR  LoadSeg( [[reko::reg("D1")]] char *name );
[[reko::reg("D0")]] struct FileLock * Lock( [[reko::reg("D1")]] char *name,[[reko::reg("D2")]] LONG accessMode );
[[reko::reg("D0")]] struct FileHandle * Open( [[reko::reg("D1")]] char *name,[[reko::reg("D2")]] LONG accessMode );
[[reko::reg("D0")]] struct FileHandle * Output(  );
[[reko::reg("D0")]] struct FileLock * ParentDir( [[reko::reg("D1")]] struct FileLock *lock );
[[reko::reg("D0")]] LONG  Read( [[reko::reg("D1")]] struct FileHandle *file,[[reko::reg("D2")]] char *buffer,[[reko::reg("D3")]] LONG length );
[[reko::reg("D0")]] BOOL  Rename( [[reko::reg("D1")]] char *oldName,[[reko::reg("D2")]] char *newName );
[[reko::reg("D0")]] LONG  Seek( [[reko::reg("D1")]] struct FileHandle *file,[[reko::reg("D2")]] LONG position,[[reko::reg("D3")]] LONG mode );
[[reko::reg("D0")]] BOOL  SetComment( [[reko::reg("D1")]] char *name,[[reko::reg("D2")]] char *comment );
[[reko::reg("D0")]] BOOL  SetProtection( [[reko::reg("D1")]] char *name,[[reko::reg("D2:4")]] LONG mask );
[[reko::reg("D0")]] BOOL  UnLoadSeg( [[reko::reg("D1")]] BPTR segment );
void UnLock( [[reko::reg("D1")]] struct FileLock *lock );
[[reko::reg("D0")]] BOOL  WaitForChar( [[reko::reg("D1")]] struct FileHandle *file,[[reko::reg("D2")]] LONG timeout );
[[reko::reg("D0")]] LONG  Write( [[reko::reg("D1")]] struct FileHandle *file,[[reko::reg("D2")]] char *buffer,[[reko::reg("D3")]] LONG length );
