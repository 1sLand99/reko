 [[reko::amiga_function_vector(LayersLibrary,-78)]]  BOOLEAN  [[reko::arg(register,"d0")]]  BeginUpdate( [[reko::arg(register,"a0")]] struct Layer *l );
 [[reko::amiga_function_vector(LayersLibrary,-54)]]  BOOLEAN  [[reko::arg(register,"d0")]]  BehindLayer( [[reko::arg(register,"a0")]] LONG dummy,[[reko::arg(register,"a1")]] struct Layer *l );
 [[reko::amiga_function_vector(LayersLibrary,-42)]]  struct Layer * [[reko::arg(register,"d0")]]  CreateBehindLayer( [[reko::arg(register,"a0")]] struct Layer_Info *li,[[reko::arg(register,"a1")]] struct BitMap *bm,[[reko::arg(register,"d0")]] LONG x0,[[reko::arg(register,"d1")]] LONG y0,[[reko::arg(register,"d2")]] LONG x1,[[reko::arg(register,"d3")]] LONG y1,[[reko::arg(register,"d4")]] LONG flags,[[reko::arg(register,"a2")]] struct BitMap *bm2 );
 [[reko::amiga_function_vector(LayersLibrary,-36)]]  struct Layer * [[reko::arg(register,"d0")]]  CreateUpfrontLayer( [[reko::arg(register,"a0")]] struct Layer_Info *li,[[reko::arg(register,"a1")]] struct BitMap *bm,[[reko::arg(register,"d0")]] LONG x0,[[reko::arg(register,"d1")]] LONG y0,[[reko::arg(register,"d2")]] LONG x1,[[reko::arg(register,"d3")]] LONG y1,[[reko::arg(register,"d4")]] LONG flags,[[reko::arg(register,"a2")]] struct BitMap *bm2 );
 [[reko::amiga_function_vector(LayersLibrary,-90)]]  BOOLEAN  [[reko::arg(register,"d0")]]  DeleteLayer( [[reko::arg(register,"a0")]] LONG dummy,[[reko::arg(register,"a1")]] struct Layer *l );
 [[reko::amiga_function_vector(LayersLibrary,-150)]]  void  DisposeLayerInfo( [[reko::arg(register,"a0")]] struct Layer_Info *li );
 [[reko::amiga_function_vector(LayersLibrary,-84)]]  void  EndUpdate( [[reko::arg(register,"a0")]] struct Layer *l,[[reko::arg(register,"d0")]] USHORT flag );
 [[reko::amiga_function_vector(LayersLibrary,-156)]]  void  FattenLayerInfo( [[reko::arg(register,"a0")]] struct Layer_Info *li );
 [[reko::amiga_function_vector(LayersLibrary,-30)]]  void  InitLayers( [[reko::arg(register,"a0")]] struct Layer_Info *li );
 [[reko::amiga_function_vector(LayersLibrary,-174)]]  struct Region * [[reko::arg(register,"d0")]]  InstallClipRegion( [[reko::arg(register,"a0")]] struct Layer *l,[[reko::arg(register,"a1")]] struct Region *region );
 [[reko::amiga_function_vector(LayersLibrary,-96)]]  void  LockLayer( [[reko::arg(register,"a0")]] LONG dummy,[[reko::arg(register,"a1")]] struct Layer *l );
 [[reko::amiga_function_vector(LayersLibrary,-120)]]  void  LockLayerInfo( [[reko::arg(register,"a0")]] struct Layer_Info *li );
 [[reko::amiga_function_vector(LayersLibrary,-108)]]  void  LockLayers( [[reko::arg(register,"a0")]] struct Layer_Info *li );
 [[reko::amiga_function_vector(LayersLibrary,-60)]]  BOOLEAN  [[reko::arg(register,"d0")]]  MoveLayer( [[reko::arg(register,"a0")]] LONG dummy,[[reko::arg(register,"a1")]] struct Layer *l,[[reko::arg(register,"d0")]] LONG dx,[[reko::arg(register,"d1")]] LONG dy );
 [[reko::amiga_function_vector(LayersLibrary,-168)]]  BOOLEAN  [[reko::arg(register,"d0")]]  MoveLayerInFrontOf( [[reko::arg(register,"a0")]] struct Layer *layertomove,[[reko::arg(register,"a1")]] struct Layer *targetlayer );
 [[reko::amiga_function_vector(LayersLibrary,-144)]]  struct Layer_Info * [[reko::arg(register,"d0")]]  NewLayerInfo(  );
 [[reko::amiga_function_vector(LayersLibrary,-72)]]  void  ScrollLayer( [[reko::arg(register,"a0")]] LONG dummy,[[reko::arg(register,"a1")]] struct Layer *l,[[reko::arg(register,"d0")]] LONG dx,[[reko::arg(register,"d1")]] LONG dy );
 [[reko::amiga_function_vector(LayersLibrary,-66)]]  BOOLEAN  [[reko::arg(register,"d0")]]  SizeLayer( [[reko::arg(register,"a0")]] LONG dummy,[[reko::arg(register,"a1")]] struct Layer *l,[[reko::arg(register,"d0")]] LONG dx,[[reko::arg(register,"d1")]] LONG dy );
 [[reko::amiga_function_vector(LayersLibrary,-126)]]  void  SwapBitsRastPortClipRect( [[reko::arg(register,"a0")]] struct RastPort *rp,[[reko::arg(register,"a1")]] struct ClipRect *cr );
 [[reko::amiga_function_vector(LayersLibrary,-162)]]  void  ThinLayerInfo( [[reko::arg(register,"a0")]] struct Layer_Info *li );
 [[reko::amiga_function_vector(LayersLibrary,-102)]]  void  UnlockLayer( [[reko::arg(register,"a0")]] struct Layer *l );
 [[reko::amiga_function_vector(LayersLibrary,-138)]]  void  UnlockLayerInfo( [[reko::arg(register,"a0")]] struct Layer_Info *li );
 [[reko::amiga_function_vector(LayersLibrary,-114)]]  void  UnlockLayers( [[reko::arg(register,"a0")]] struct Layer_Info *li );
 [[reko::amiga_function_vector(LayersLibrary,-48)]]  BOOLEAN  [[reko::arg(register,"do")]]  UpfrontLayer( [[reko::arg(register,"a0")]] LONG dummy,[[reko::arg(register,"a1")]] struct Layer *l );
 [[reko::amiga_function_vector(LayersLibrary,-132)]]  struct Layer_Info *  [[reko::arg(register,"d0")]]  WhichLayer( [[reko::arg(register,"a0")]] struct Layer_Info *li,[[reko::arg(register,"d0")]] LONG x,[[reko::arg(register,"d1")]] LONG y );
