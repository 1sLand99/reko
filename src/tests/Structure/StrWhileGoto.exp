// fn0C00_0000
// Return size: 0
void fn0C00_0000(word16 si, word16 di, selector ds)
fn0C00_0000_entry:
	si_13 = si
	goto l0C00_001A
	// succ:  l0C00_001A
l0C00_0000:
l0C00_0005:
	Mem25[ds:di:word16] = ax_12
	branch ax_12 != 0x0000 l0C00_0011
	// succ:  l0C00_000B l0C00_0011
l0C00_000B:
	ax_19 = 0xFFFF
	goto l0C00_0024
	// succ:  l0C00_0024
l0C00_0011:
	branch ax_12 != 0x000D l0C00_001A
	// succ:  l0C00_0016 l0C00_001A
l0C00_0016:
	Mem35[ds:0x0302:word16] = Mem25[ds:0x0302:word16] + 0x0001
	// succ:  l0C00_001A
l0C00_001A:
	word16 ax_19
	word16 si_13
	word16 ax_12 = Mem0[ds:si_13:word16]
	si_13 = si_13 + 0x0002
	branch ax_12 != 0x0020 l0C00_0005
	// succ:  l0C00_0020 l0C00_0005
l0C00_0020:
	ax_19 = si_13 - si
	// succ:  l0C00_0024
l0C00_0024:
	Mem21[ds:0x0300:word16] = ax_19
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

void fn0C00_0000(word16 si, word16 di, selector ds)
{
	si_13 = si;
	while (true)
	{
		word16 ax_19;
		word16 si_13;
		word16 ax_12 = Mem0[ds:si_13:word16];
		si_13 = si_13 + 0x0002;
		if (ax_12 == 0x0020)
			break;
		Mem25[ds:di:word16] = ax_12;
		if (ax_12 == 0x0000)
		{
			ax_19 = 0xFFFF;
			goto l0C00_0024;
		}
		if (ax_12 == 0x000D)
			Mem35[ds:0x0302:word16] = Mem25[ds:0x0302:word16] + 0x0001;
	}
	ax_19 = si_13 - si;
l0C00_0024:
	Mem21[ds:0x0300:word16] = ax_19;
	return;
}
===========================
