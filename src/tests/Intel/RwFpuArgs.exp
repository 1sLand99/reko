// fn0C00_0000
// Return size: 2
// Mem0:Global
// fp:fp
// sp:sp
// Top:Top
// ds:ds
// ss:ss
// ax:ax
// SCZO:SCZO
// return address size: 2
define fn0C00_0000
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = fp
	Top = 0x00
	Top = Top - 0x01
	ST[Top:real64] = (real64) Mem0[ds:0x0300:real32]
	Top = Top - 0x01
	ST[Top:real64] = (real64) Mem0[ds:0x0304:real32]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = 0x0308
	call fn0C00_0024 (retsize: 2;)
	Top = Top - 0x01
	ST[Top:real64] = 0.0
	Mem0[ds:0x030C:real32] = (real32) ST[Top:real64]
	Top = Top + 0x01
	ax = Mem0[ds:0x0308:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0C00_0031 (retsize: 2;)
	Mem0[ds:0x030C:real32] = (real32) ST[Top:real64]
	Top = Top + 0x01
	sp = sp + 0x0004
	SCZO = cond(sp)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

// fn0C00_0024
// Return size: 2
// Mem0:Global
// fp:fp
// sp:sp
// bp:bp
// ss:ss
// bx:bx
// Top:Top
// ds:ds
// return address size: 2
define fn0C00_0024
fn0C00_0024_entry:
	// succ:  l0C00_0024
l0C00_0024:
	sp = fp
	Top = 0x00
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	bx = Mem0[ss:bp + 0x0004:word16]
	Mem0[ds:bx:real32] = (real32) ST[Top:real64]
	Top = Top + 0x01
	Mem0[ds:bx + 0x0004:real32] = (real32) ST[Top:real64]
	Top = Top + 0x01
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0C00_0024_exit
fn0C00_0024_exit:

// fn0C00_0031
// Return size: 2
// Mem0:Global
// fp:fp
// sp:sp
// bp:bp
// ss:ss
// bx:bx
// Top:Top
// ds:ds
// return address size: 2
define fn0C00_0031
fn0C00_0031_entry:
	// succ:  l0C00_0031
l0C00_0031:
	sp = fp
	Top = 0x00
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	bx = Mem0[ss:bp + 0x0004:word16]
	Top = Top - 0x01
	ST[Top:real64] = (real64) Mem0[ds:bx:real32]
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0C00_0031_exit
fn0C00_0031_exit:

