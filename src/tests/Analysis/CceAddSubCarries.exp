fp:fp
sp_1: orig: sp
ds:ds
    def:  def ds
    uses: ax_4 = Mem0[ds:0x0200:word16]
          dx_5 = Mem0[ds:0x0202:word16]
          cx_6 = Mem0[ds:0x0204:word16]
          bx_7 = Mem0[ds:0x0206:word16]
          Mem15[ds:0x0208:word16] = ax_13
          Mem16[ds:0x020A:word16] = dx_14
          ax_17 = Mem16[ds:0x0210:word16]
          dx_18 = Mem16[ds:0x0212:word16]
          es_cx_19 = Mem16[ds:0x0214:segptr32]
          Mem27[ds:0x0218:word16] = ax_24
          Mem30[ds:0x021A:word16] = dx_29
          cl_32 = Mem30[ds:0x0220:byte]
          cl_36 = Mem30[ds:0x0221:byte]
          Mem42[ds:0x0222:word16] = ax_40
Mem0:Global memory
    def:  def Mem0
    uses: ax_4 = Mem0[ds:0x0200:word16]
          dx_5 = Mem0[ds:0x0202:word16]
          cx_6 = Mem0[ds:0x0204:word16]
          bx_7 = Mem0[ds:0x0206:word16]
ax_4: orig: ax
    def:  ax_4 = Mem0[ds:0x0200:word16]
    uses: ax_9 = ax_4 + cx_6
dx_5: orig: dx
    def:  dx_5 = Mem0[ds:0x0202:word16]
    uses: dx_ax_10 = SEQ(dx_5, ax_9) (alias)
cx_6: orig: cx
    def:  cx_6 = Mem0[ds:0x0204:word16]
    uses: bx_cx_8 = SEQ(bx_7, cx_6) (alias)
          ax_9 = ax_4 + cx_6
bx_7: orig: bx
    def:  bx_7 = Mem0[ds:0x0206:word16]
    uses: bx_cx_8 = SEQ(bx_7, cx_6) (alias)
bx_cx_8: orig: bx_cx
    def:  bx_cx_8 = SEQ(bx_7, cx_6) (alias)
    uses: dx_ax_12 = dx_ax_10 + bx_cx_8
ax_9: orig: ax
    def:  ax_9 = ax_4 + cx_6
    uses: dx_ax_10 = SEQ(dx_5, ax_9) (alias)
dx_ax_10: orig: dx_ax
    def:  dx_ax_10 = SEQ(dx_5, ax_9) (alias)
    uses: dx_ax_12 = dx_ax_10 + bx_cx_8
SCZO_11: orig: SCZO
dx_ax_12: orig: dx_ax
    def:  dx_ax_12 = dx_ax_10 + bx_cx_8
    uses: ax_13 = (word16) dx_ax_12 (alias)
          dx_14 = SLICE(dx_ax_12, word16, 16) (alias)
ax_13: orig: ax
    def:  ax_13 = (word16) dx_ax_12 (alias)
    uses: Mem15[ds:0x0208:word16] = ax_13
dx_14: orig: dx
    def:  dx_14 = SLICE(dx_ax_12, word16, 16) (alias)
    uses: Mem16[ds:0x020A:word16] = dx_14
Mem15: orig: Mem0
    def:  Mem15[ds:0x0208:word16] = ax_13
Mem16: orig: Mem0
    def:  Mem16[ds:0x020A:word16] = dx_14
    uses: ax_17 = Mem16[ds:0x0210:word16]
          dx_18 = Mem16[ds:0x0212:word16]
          es_cx_19 = Mem16[ds:0x0214:segptr32]
ax_17: orig: ax
    def:  ax_17 = Mem16[ds:0x0210:word16]
    uses: ax_24 = ax_17 - cx_20
dx_18: orig: dx
    def:  dx_18 = Mem16[ds:0x0212:word16]
    uses: dx_ax_25 = SEQ(dx_18, ax_24) (alias)
es_cx_19: orig: es_cx
    def:  es_cx_19 = Mem16[ds:0x0214:segptr32]
    uses: cx_20 = (word16) es_cx_19 (alias)
          es_21 = SLICE(es_cx_19, selector, 16) (alias)
cx_20: orig: cx
    def:  cx_20 = (word16) es_cx_19 (alias)
    uses: bx_cx_23 = SEQ(es_21, cx_20) (alias)
          ax_24 = ax_17 - cx_20
es_21: orig: es
    def:  es_21 = SLICE(es_cx_19, selector, 16) (alias)
    uses: bx_cx_23 = SEQ(es_21, cx_20) (alias)
bx_22: orig: bx
bx_cx_23: orig: bx_cx
    def:  bx_cx_23 = SEQ(es_21, cx_20) (alias)
    uses: dx_ax_28 = dx_ax_25 - bx_cx_23
ax_24: orig: ax
    def:  ax_24 = ax_17 - cx_20
    uses: dx_ax_25 = SEQ(dx_18, ax_24) (alias)
          Mem27[ds:0x0218:word16] = ax_24
dx_ax_25: orig: dx_ax
    def:  dx_ax_25 = SEQ(dx_18, ax_24) (alias)
    uses: dx_ax_28 = dx_ax_25 - bx_cx_23
SCZO_26: orig: SCZO
Mem27: orig: Mem0
    def:  Mem27[ds:0x0218:word16] = ax_24
dx_ax_28: orig: dx_ax
    def:  dx_ax_28 = dx_ax_25 - bx_cx_23
    uses: dx_29 = SLICE(dx_ax_28, word16, 16) (alias)
dx_29: orig: dx
    def:  dx_29 = SLICE(dx_ax_28, word16, 16) (alias)
    uses: Mem30[ds:0x021A:word16] = dx_29
Mem30: orig: Mem0
    def:  Mem30[ds:0x021A:word16] = dx_29
    uses: cl_32 = Mem30[ds:0x0220:byte]
          cl_36 = Mem30[ds:0x0221:byte]
ax_31: orig: ax
cl_32: orig: cl
    def:  cl_32 = Mem30[ds:0x0220:byte]
    uses: SCZO_33 = cond(cl_32 - 0x30)
SCZO_33: orig: SCZO
    def:  SCZO_33 = cond(cl_32 - 0x30)
    uses: ax_40 = SCZO_33 * 0x0002 + (cl_36 >=u 0x3A)
C_34: orig: C
ax_35: orig: ax
cl_36: orig: cl
    def:  cl_36 = Mem30[ds:0x0221:byte]
    uses: ax_40 = SCZO_33 * 0x0002 + (cl_36 >=u 0x3A)
SCZO_37: orig: SCZO
C_38: orig: C
C_39: orig: C
ax_40: orig: ax
    def:  ax_40 = SCZO_33 * 0x0002 + (cl_36 >=u 0x3A)
    uses: Mem42[ds:0x0222:word16] = ax_40
SCZO_41: orig: SCZO
Mem42: orig: Mem0
    def:  Mem42[ds:0x0222:word16] = ax_40
// fn0C00_0000
// Return size: 0
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	def ds
	def Mem0
	// succ:  l0C00_0000
l0C00_0000:
	ax_4 = Mem0[ds:0x0200:word16]
	dx_5 = Mem0[ds:0x0202:word16]
	cx_6 = Mem0[ds:0x0204:word16]
	bx_7 = Mem0[ds:0x0206:word16]
	bx_cx_8 = SEQ(bx_7, cx_6) (alias)
	ax_9 = ax_4 + cx_6
	dx_ax_10 = SEQ(dx_5, ax_9) (alias)
	dx_ax_12 = dx_ax_10 + bx_cx_8
	ax_13 = (word16) dx_ax_12 (alias)
	dx_14 = SLICE(dx_ax_12, word16, 16) (alias)
	Mem15[ds:0x0208:word16] = ax_13
	Mem16[ds:0x020A:word16] = dx_14
	ax_17 = Mem16[ds:0x0210:word16]
	dx_18 = Mem16[ds:0x0212:word16]
	es_cx_19 = Mem16[ds:0x0214:segptr32]
	cx_20 = (word16) es_cx_19 (alias)
	es_21 = SLICE(es_cx_19, selector, 16) (alias)
	bx_cx_23 = SEQ(es_21, cx_20) (alias)
	ax_24 = ax_17 - cx_20
	dx_ax_25 = SEQ(dx_18, ax_24) (alias)
	Mem27[ds:0x0218:word16] = ax_24
	dx_ax_28 = dx_ax_25 - bx_cx_23
	dx_29 = SLICE(dx_ax_28, word16, 16) (alias)
	Mem30[ds:0x021A:word16] = dx_29
	cl_32 = Mem30[ds:0x0220:byte]
	SCZO_33 = cond(cl_32 - 0x30)
	cl_36 = Mem30[ds:0x0221:byte]
	ax_40 = SCZO_33 * 0x0002 + (cl_36 >=u 0x3A)
	Mem42[ds:0x0222:word16] = ax_40
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

