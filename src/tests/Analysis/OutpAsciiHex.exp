// fn0C00_0000
// Return size: 0
void fn0C00_0000(byte al, selector ds)
fn0C00_0000_entry:
	def fp
	def al
	def ds
	// succ:  l0C00_0000
l0C00_0000:
	sp_2 = fp
	C_5 = fn0C00_000A(al, out al_4)
	branch Test(ULT,C_5) l0C00_0009
	// succ:  l0C00_0005 l0C00_0009
l0C00_0005:
	Mem6[ds:0x0300:byte] = al_4
	// succ:  l0C00_0009
l0C00_0009:
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

// fn0C00_0000
// Return size: 0
void fn0C00_0000(byte al, selector ds)
fn0C00_0000_entry:
	def al
	def ds
	// succ:  l0C00_0000
l0C00_0000:
	C_5 = fn0C00_000A(al, out al_4)
	branch Test(ULT,C_5) l0C00_0009
	// succ:  l0C00_0005 l0C00_0009
l0C00_0005:
	Mem6[ds:0x0300:byte] = al_4
	// succ:  l0C00_0009
l0C00_0009:
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
====================
// fn0C00_000A
// Return size: 0
byte fn0C00_000A(byte al, ptr16 alOut)
fn0C00_000A_entry:
	def fp
	def al
	def alOut
	// succ:  l0C00_000A
l0C00_000A:
	sp_2 = fp
	SCZO_4 = cond(al - 0x30)
	C_5 = SCZO_4 (alias)
	CZ_6 = SCZO_4 (alias)
	branch Test(ULT,C_5) l0C00_0032
	// succ:  l0C00_000E l0C00_0032
l0C00_000E:
	SCZO_15 = cond(al - 0x39)
	C_16 = SCZO_15 (alias)
	CZ_17 = SCZO_15 (alias)
	branch Test(ULE,CZ_17) l0C00_0022
	// succ:  l0C00_0012 l0C00_0022
l0C00_0012:
	SCZO_34 = cond(al - 0x41)
	C_35 = SCZO_34 (alias)
	CZ_36 = SCZO_34 (alias)
	branch Test(ULT,C_35) l0C00_0032
	// succ:  l0C00_0016 l0C00_0032
l0C00_0016:
	SCZO_37 = cond(al - 0x46)
	C_38 = SCZO_37 (alias)
	CZ_39 = SCZO_37 (alias)
	branch Test(ULE,CZ_39) l0C00_0022
	// succ:  l0C00_001A l0C00_0022
l0C00_001A:
	SCZO_40 = cond(al - 0x61)
	C_41 = SCZO_40 (alias)
	CZ_42 = SCZO_40 (alias)
	branch Test(ULT,C_41) l0C00_0032
	// succ:  l0C00_001E l0C00_0032
l0C00_001E:
	SCZO_43 = cond(al - 0x66)
	C_44 = SCZO_43 (alias)
	CZ_45 = SCZO_43 (alias)
	branch Test(UGT,CZ_45) l0C00_0032
	// succ:  l0C00_0022 l0C00_0032
l0C00_0022:
	al_18 = al - 0x30
	SCZO_19 = cond(al_18 - 0x0A)
	C_20 = SCZO_19 (alias)
	CZ_21 = SCZO_19 (alias)
	branch Test(ULT,C_20) l0C00_0030
	// succ:  l0C00_0028 l0C00_0030
l0C00_0028:
	al_26 = al_18 - 0x07
	SCZO_27 = cond(al_26 - 0x10)
	C_28 = SCZO_27 (alias)
	CZ_29 = SCZO_27 (alias)
	branch Test(ULT,C_28) l0C00_0030
	// succ:  l0C00_002E l0C00_0030
l0C00_002E:
	al_30 = al_26 - 0x20
	SCZO_31 = cond(al_30)
	C_32 = SCZO_31 (alias)
	CZ_33 = SCZO_31 (alias)
	// succ:  l0C00_0030
l0C00_0030:
	al_22 = PHI(al_18, al_26, al_30)
	C_23 = false
	SCZO_24 = C_23 (alias)
	CZ_25 = C_23 (alias)
	return C_23
	// succ:  fn0C00_000A_exit
l0C00_0032:
	C_12 = true
	SCZO_13 = C_12 (alias)
	CZ_14 = C_12 (alias)
	return C_12
	// succ:  fn0C00_000A_exit
fn0C00_000A_exit:
	al_7 = PHI(al, al_22)
	C_8 = PHI(C_12, C_23)
	SCZO_9 = PHI(SCZO_13, SCZO_24)
	CZ_10 = PHI(CZ_14, CZ_25)
	use al_7 (=> alOut)

// fn0C00_000A
// Return size: 0
byte fn0C00_000A(byte al, ptr16 alOut)
fn0C00_000A_entry:
	def al
	*alOut = al
	def alOut
	// succ:  l0C00_000A
l0C00_000A:
	SCZO_4 = cond(al - 0x30)
	C_5 = SCZO_4 (alias)
	branch Test(ULT,C_5) l0C00_0032
	// succ:  l0C00_000E l0C00_0032
l0C00_000E:
	SCZO_15 = cond(al - 0x39)
	CZ_17 = SCZO_15 (alias)
	branch Test(ULE,CZ_17) l0C00_0022
	// succ:  l0C00_0012 l0C00_0022
l0C00_0012:
	SCZO_34 = cond(al - 0x41)
	C_35 = SCZO_34 (alias)
	branch Test(ULT,C_35) l0C00_0032
	// succ:  l0C00_0016 l0C00_0032
l0C00_0016:
	SCZO_37 = cond(al - 0x46)
	CZ_39 = SCZO_37 (alias)
	branch Test(ULE,CZ_39) l0C00_0022
	// succ:  l0C00_001A l0C00_0022
l0C00_001A:
	SCZO_40 = cond(al - 0x61)
	C_41 = SCZO_40 (alias)
	branch Test(ULT,C_41) l0C00_0032
	// succ:  l0C00_001E l0C00_0032
l0C00_001E:
	SCZO_43 = cond(al - 0x66)
	CZ_45 = SCZO_43 (alias)
	branch Test(UGT,CZ_45) l0C00_0032
	// succ:  l0C00_0022 l0C00_0032
l0C00_0022:
	al_18 = al - 0x30
	*alOut = al_18
	SCZO_19 = cond(al_18 - 0x0A)
	C_20 = SCZO_19 (alias)
	branch Test(ULT,C_20) l0C00_0030
	// succ:  l0C00_0028 l0C00_0030
l0C00_0028:
	al_26 = al_18 - 0x07
	*alOut = al_26
	SCZO_27 = cond(al_26 - 0x10)
	C_28 = SCZO_27 (alias)
	branch Test(ULT,C_28) l0C00_0030
	// succ:  l0C00_002E l0C00_0030
l0C00_002E:
	al_30 = al_26 - 0x20
	*alOut = al_30
	// succ:  l0C00_0030
l0C00_0030:
	C_23 = false
	return C_23
	// succ:  fn0C00_000A_exit
l0C00_0032:
	C_12 = true
	return C_12
	// succ:  fn0C00_000A_exit
fn0C00_000A_exit:
====================
