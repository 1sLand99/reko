fp:fp
    def:  def fp
    uses: sp_2 = fp
sp_2: orig: sp
    def:  sp_2 = fp
    uses: use sp_2
Top_3: orig: Top
    def:  Top_3 = 0x00
    uses: use Top_3
ax:ax
    def:  def ax
    uses: ax_5 = ax ^ ax
          ax_5 = ax ^ ax
ax_5: orig: ax
    def:  ax_5 = ax ^ ax
    uses: SZO_6 = cond(ax_5)
          ax_8 = PHI(ax_5, ax_22, ax_20)
SZO_6: orig: SZO
    def:  SZO_6 = cond(ax_5)
C_7: orig: C
    def:  C_7 = false
ax_8: orig: ax
    def:  ax_8 = PHI(ax_5, ax_22, ax_20)
    uses: SCZO_10 = cond(ax_8 - bx)
          ax_20 = ax_8 + Mem0[ds:si_19 + 0x0004:word16]
          ax_22 = ax_8 + Mem0[ds:si_15:word16]
          use ax_8
SCZO_10: orig: SCZO
    def:  SCZO_10 = cond(ax_8 - bx)
    uses: SO_11 = SLICE(SCZO_10, bool, 4) (alias)
          C_27 = SLICE(SCZO_10, bool, 1) (alias)
          O_28 = SLICE(SCZO_10, bool, 4) (alias)
          S_29 = SLICE(SCZO_10, bool, 0) (alias)
          Z_34 = SLICE(SCZO_10, bool, 2) (alias)
SO_11: orig: SO
    def:  SO_11 = SLICE(SCZO_10, bool, 4) (alias)
    uses: branch Test(LT,SO_11) l0C00_0005
si_14: orig: si
    def:  si_14 = Mem0[ds:0x0300:word16]
    uses: si_15 = si_14 | si_14
          si_15 = si_14 | si_14
si_15: orig: si
    def:  si_15 = si_14 | si_14
    uses: SZO_16 = cond(si_15)
          ax_22 = ax_8 + Mem0[ds:si_15:word16]
          si_30 = PHI(si, si_15, si_19)
SZO_16: orig: SZO
    def:  SZO_16 = cond(si_15)
    uses: Z_18 = SLICE(SZO_16, bool, 2) (alias)
C_17: orig: C
    def:  C_17 = false
Z_18: orig: Z
    def:  Z_18 = SLICE(SZO_16, bool, 2) (alias)
    uses: branch Test(EQ,Z_18) l0C00_0012
si_19: orig: si
    def:  si_19 = Mem0[ds:0x0302:word16]
    uses: ax_20 = ax_8 + Mem0[ds:si_19 + 0x0004:word16]
          si_30 = PHI(si, si_15, si_19)
ax_20: orig: ax
    def:  ax_20 = ax_8 + Mem0[ds:si_19 + 0x0004:word16]
    uses: SCZO_21 = cond(ax_20)
          ax_8 = PHI(ax_5, ax_22, ax_20)
SCZO_21: orig: SCZO
    def:  SCZO_21 = cond(ax_20)
ax_22: orig: ax
    def:  ax_22 = ax_8 + Mem0[ds:si_15:word16]
    uses: SCZO_23 = cond(ax_22)
          ax_8 = PHI(ax_5, ax_22, ax_20)
SCZO_23: orig: SCZO
    def:  SCZO_23 = cond(ax_22)
bx:bx
    def:  def bx
    uses: SCZO_10 = cond(ax_8 - bx)
          use bx
ds:ds
    def:  def ds
    uses: si_14 = Mem0[ds:0x0300:word16]
          si_19 = Mem0[ds:0x0302:word16]
          ax_20 = ax_8 + Mem0[ds:si_19 + 0x0004:word16]
          ax_22 = ax_8 + Mem0[ds:si_15:word16]
          use ds
Mem0:Global memory
    def:  def Mem0
    uses: si_14 = Mem0[ds:0x0300:word16]
          si_19 = Mem0[ds:0x0302:word16]
          ax_20 = ax_8 + Mem0[ds:si_19 + 0x0004:word16]
          ax_22 = ax_8 + Mem0[ds:si_15:word16]
C_27: orig: C
    def:  C_27 = SLICE(SCZO_10, bool, 1) (alias)
    uses: use C_27
O_28: orig: O
    def:  O_28 = SLICE(SCZO_10, bool, 4) (alias)
    uses: use O_28
S_29: orig: S
    def:  S_29 = SLICE(SCZO_10, bool, 0) (alias)
    uses: use S_29
si_30: orig: si
    def:  si_30 = PHI(si, si_15, si_19)
    uses: use si_30
si:si
    def:  def si
    uses: si_30 = PHI(si, si_15, si_19)
Z_34: orig: Z
    def:  Z_34 = SLICE(SCZO_10, bool, 2) (alias)
    uses: use Z_34
// fn0C00_0000
// Return size: 2
define fn0C00_0000
fn0C00_0000_entry:
	def fp
	def ax
	def bx
	def ds
	def Mem0
	def si
	// succ:  l0C00_0000
l0C00_0000:
	sp_2 = fp
	Top_3 = 0x00
	ax_5 = ax ^ ax
	SZO_6 = cond(ax_5)
	C_7 = false
	goto l0C00_0019
	// succ:  l0C00_0019
l0C00_0005:
	si_14 = Mem0[ds:0x0300:word16]
	si_15 = si_14 | si_14
	SZO_16 = cond(si_15)
	Z_18 = SLICE(SZO_16, bool, 2) (alias)
	C_17 = false
	branch Test(EQ,Z_18) l0C00_0012
	// succ:  l0C00_000D l0C00_0012
l0C00_000D:
	ax_22 = ax_8 + Mem0[ds:si_15:word16]
	SCZO_23 = cond(ax_22)
	goto l0C00_0019
	// succ:  l0C00_0019
l0C00_0012:
	si_19 = Mem0[ds:0x0302:word16]
	ax_20 = ax_8 + Mem0[ds:si_19 + 0x0004:word16]
	SCZO_21 = cond(ax_20)
	// succ:  l0C00_0019
l0C00_0019:
	si_30 = PHI(si, si_15, si_19)
	ax_8 = PHI(ax_5, ax_22, ax_20)
	SCZO_10 = cond(ax_8 - bx)
	SO_11 = SLICE(SCZO_10, bool, 4) (alias)
	C_27 = SLICE(SCZO_10, bool, 1) (alias)
	O_28 = SLICE(SCZO_10, bool, 4) (alias)
	S_29 = SLICE(SCZO_10, bool, 0) (alias)
	Z_34 = SLICE(SCZO_10, bool, 2) (alias)
	branch Test(LT,SO_11) l0C00_0005
	// succ:  l0C00_001D l0C00_0005
l0C00_001D:
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
	use ax_8
	use bx
	use C_27
	use ds
	use O_28
	use S_29
	use si_30
	use sp_2
	use Top_3
	use Z_34

