void fn0C00_0000(Register selector ds)
// MayUse:  ds:0
// LiveOut:
// Trashed: SCZO bx
// Preserved: sp
// fn0C00_0000
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// ss:ss
// SCZO:Flags
// ds:ds
// bx:bx
// wLoc02:Local -0002
// wLoc04:Local -0004
// S:Flags
// C:Flags
// Z:Flags
// O:Flags
// return address size: 2
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	def ds
	// succ:  l0C00_0000
l0C00_0000:
	fn0C00_0010(ds, 0x0300, 0x0320)
	fn0C00_0037(ds)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
void fn0C00_0010(Register selector ds, Stack word16 wArg02, Stack word16 wArg04)
// MayUse:  ds:16 Stack +0002:16 Stack +0004:16
// LiveOut:
// Trashed: bx
// Preserved: bp sp
// fn0C00_0010
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// bp:bp
// ss:ss
// bx:bx
// rLoc1:FPU stack
// ds:ds
// rLoc2:FPU stack
// wLoc02:Local -0002
// wArg02:Stack +0002
// wArg04:Stack +0004
// return address size: 2
void fn0C00_0010(selector ds, word16 wArg02, word16 wArg04)
fn0C00_0010_entry:
	def ds
	def wArg02
	def wArg04
	// succ:  l0C00_0010
l0C00_0010:
	rLoc1_10 = Mem6[ds:wArg02:real64]
	rLoc1_11 = rLoc1_10 * rLoc1_10
	rLoc2_12 = Mem6[ds:wArg02 + 0x0008:real64]
	rLoc2_13 = rLoc2_12 * rLoc2_12
	rLoc1_14 = rLoc1_11 + rLoc2_13
	rLoc2_15 = Mem6[ds:wArg02 + 0x0010:real64]
	rLoc2_16 = rLoc2_15 * rLoc2_15
	rLoc1_17 = rLoc1_14 + rLoc2_16
	Mem19[ds:wArg04:real64] = rLoc1_17
	rLoc1_20 = (real64) Mem19[ds:wArg04 + 0x0020:int16]
	Mem21[ds:wArg04 + 0x0028:real64] = rLoc1_20
	return
	// succ:  fn0C00_0010_exit
fn0C00_0010_exit:
void fn0C00_0037(Register selector ds)
// MayUse:  ds:16
// LiveOut:
// Trashed:
// Preserved: sp
// fn0C00_0037
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// rLoc1:FPU stack
// ds:ds
// return address size: 2
void fn0C00_0037(selector ds)
fn0C00_0037_entry:
	def ds
	// succ:  l0C00_0037
l0C00_0037:
	Mem5[ds:0x0400:real64] = 0.0
	Mem7[ds:0x0408:int32] = (int32) 1.0
	return
	// succ:  fn0C00_0037_exit
fn0C00_0037_exit:
