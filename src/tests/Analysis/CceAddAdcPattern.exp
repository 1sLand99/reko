r1:r1
    def:  def r1
    uses: SZC_2 = cond(r1)
          r3_r1_4 = SEQ(r3, r1) (alias)
SZC_2: orig: SZC
    def:  SZC_2 = cond(r1)
    uses: use SZC_2
r3:r3
    def:  def r3
    uses: r3_r1_4 = SEQ(r3, r1) (alias)
r3_r1_4: orig: r3_r1
    def:  r3_r1_4 = SEQ(r3, r1) (alias)
    uses: r3_r1_8 = r3_r1_4 + r4_r2_7
r4:r4
    def:  def r4
    uses: r4_r2_7 = SEQ(r4, r2) (alias)
          use r4
r2:r2
    def:  def r2
    uses: r4_r2_7 = SEQ(r4, r2) (alias)
          use r2
r4_r2_7: orig: r4_r2
    def:  r4_r2_7 = SEQ(r4, r2) (alias)
    uses: r3_r1_8 = r3_r1_4 + r4_r2_7
r3_r1_8: orig: r3_r1
    def:  r3_r1_8 = r3_r1_4 + r4_r2_7
    uses: r1_9 = (word32) r3_r1_8 (alias)
          r3_11 = SLICE(r3_r1_8, word32, 32) (alias)
r1_9: orig: r1
    def:  r1_9 = (word32) r3_r1_8 (alias)
    uses: Mem10[0x00444400:word32] = r1_9
          use r1_9
Mem10: orig: Mem0
    def:  Mem10[0x00444400:word32] = r1_9
r3_11: orig: r3
    def:  r3_11 = SLICE(r3_r1_8, word32, 32) (alias)
    uses: Mem12[0x00444404:word32] = r3_11
          use r3_11
Mem12: orig: Mem0
    def:  Mem12[0x00444404:word32] = r3_11
// main
// Return size: 0
void main(word32 r1, word32 r2, word32 r3, word32 r4)
main_entry:
	def r1
	def r3
	r3_r1_4 = SEQ(r3, r1) (alias)
	def r4
	def r2
	r4_r2_7 = SEQ(r4, r2) (alias)
	// succ:  l1
l1:
	SZC_2 = cond(r1)
	r3_r1_8 = r3_r1_4 + r4_r2_7
	r1_9 = (word32) r3_r1_8 (alias)
	r3_11 = SLICE(r3_r1_8, word32, 32) (alias)
	Mem10[0x00444400:word32] = r1_9
	Mem12[0x00444404:word32] = r3_11
	return
	// succ:  main_exit
main_exit:
	use r1_9
	use r2
	use r3_11
	use r4
	use SZC_2

