fp:fp
sp_2: orig: sp
ax:ax
ax_4: orig: ax
    def:  ax_4 = 0x0000
    uses: ax_11 = PHI(ax_4, ax_15)
SZO_5: orig: SZO
C_6: orig: C
ds:ds
    def:  def ds
    uses: cx_10 = Mem0[ds:bx:word16]
          Mem19[ds:0x0300:word16] = ax_15
bx:bx
    def:  def bx
    uses: cx_10 = Mem0[ds:bx:word16]
Mem0:Global memory
    def:  def Mem0
    uses: cx_10 = Mem0[ds:bx:word16]
cx_10: orig: cx
    def:  cx_10 = Mem0[ds:bx:word16]
    uses: cx_12 = PHI(cx_10, cx_17)
ax_11: orig: ax
    def:  ax_11 = PHI(ax_4, ax_15)
    uses: ax_15 = ax_11 + cx_12 + cx_12
cx_12: orig: cx
    def:  cx_12 = PHI(cx_10, cx_17)
    uses: ax_15 = ax_11 + cx_12 + cx_12
          ax_15 = ax_11 + cx_12 + cx_12
          cx_17 = cx_12 - 0x0001
ax_13: orig: ax
SCZO_14: orig: SCZO
ax_15: orig: ax
    def:  ax_15 = ax_11 + cx_12 + cx_12
    uses: Mem19[ds:0x0300:word16] = ax_15
          ax_11 = PHI(ax_4, ax_15)
SCZO_16: orig: SCZO
cx_17: orig: cx
    def:  cx_17 = cx_12 - 0x0001
    uses: branch cx_17 != 0x0000 l0C00_0004
          cx_12 = PHI(cx_10, cx_17)
ds_18: orig: ds
    def:  ds_18 = PHI(ds, ds_18)
Mem19: orig: Mem0
    def:  Mem19[ds:0x0300:word16] = ax_15
// fn0C00_0000
// Return size: 0
void fn0C00_0000(word16 bx, selector ds)
fn0C00_0000_entry:
	def ds
	def bx
	def Mem0
	// succ:  l0C00_0000
l0C00_0000:
	ax_4 = 0x0000
	cx_10 = Mem0[ds:bx:word16]
	// succ:  l0C00_0004
l0C00_0004:
	cx_12 = PHI(cx_10, cx_17)
	ax_11 = PHI(ax_4, ax_15)
	ax_15 = ax_11 + cx_12 + cx_12
	cx_17 = cx_12 - 0x0001
	branch cx_17 != 0x0000 l0C00_0004
	// succ:  l0C00_000A l0C00_0004
l0C00_000A:
	Mem19[ds:0x0300:word16] = ax_15
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

