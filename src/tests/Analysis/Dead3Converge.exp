fp:fp
sp_2: orig: sp
Top_3: orig: Top
bx:bx
    def:  def bx
    uses: branch bx == 0x0000 l0C00_0013
          branch bx > 0x0000 l0C00_000D
SCZO_5: orig: SCZO
Z_6: orig: Z
ax:ax
ax_8: orig: ax
    def:  ax_8 = 0x0000
    uses: ax_14 = PHI(ax_13, ax_8, ax_12)
SZO_9: orig: SZO
C_10: orig: C
SZO_11: orig: SZO
ax_12: orig: ax
    def:  ax_12 = 0x0001
    uses: ax_14 = PHI(ax_13, ax_8, ax_12)
ax_13: orig: ax
    def:  ax_13 = 0xFFFF
    uses: ax_14 = PHI(ax_13, ax_8, ax_12)
ax_14: orig: ax
    def:  ax_14 = PHI(ax_13, ax_8, ax_12)
    uses: Mem17[ds:0x0100:word16] = ax_14
ds_15: orig: ds
    def:  ds_15 = PHI(ds, ds, ds)
ds:ds
    def:  def ds
    uses: Mem17[ds:0x0100:word16] = ax_14
Mem17: orig: Mem0
    def:  Mem17[ds:0x0100:word16] = ax_14
C_18: orig: C
C_19: orig: C
O_20: orig: O
O_21: orig: O
O_22: orig: O
S_23: orig: S
S_24: orig: S
S_25: orig: S
Z_28: orig: Z
Z_29: orig: Z
// fn0C00_0000
// Return size: 0
void fn0C00_0000(word16 bx, selector ds)
fn0C00_0000_entry:
	def bx
	def ds
	// succ:  l0C00_0000
l0C00_0000:
	branch bx == 0x0000 l0C00_0013
	// succ:  l0C00_0005 l0C00_0013
l0C00_0005:
	branch bx > 0x0000 l0C00_000D
	// succ:  l0C00_0007 l0C00_000D
l0C00_0007:
	ax_13 = 0xFFFF
	goto l0C00_0015
	// succ:  l0C00_0015
l0C00_000D:
	ax_12 = 0x0001
	goto l0C00_0015
	// succ:  l0C00_0015
l0C00_0013:
	ax_8 = 0x0000
	// succ:  l0C00_0015
l0C00_0015:
	ax_14 = PHI(ax_13, ax_8, ax_12)
	Mem17[ds:0x0100:word16] = ax_14
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
