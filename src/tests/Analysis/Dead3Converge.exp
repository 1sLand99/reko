fp:fp
sp_2: orig: sp
bx:bx
    def:  def bx
    uses: branch bx == 0x0000 l0C00_0013
          branch bx > 0x0000 l0C00_000D
SCZO_4: orig: SCZO
ax_5: orig: ax
    def:  ax_5 = 0x0000
    uses: ax_10 = PHI(ax_9, ax_5, ax_8)
SZO_6: orig: SZO
C_7: orig: C
ax_8: orig: ax
    def:  ax_8 = 0x0001
    uses: ax_10 = PHI(ax_9, ax_5, ax_8)
ax_9: orig: ax
    def:  ax_9 = 0xFFFF
    uses: ax_10 = PHI(ax_9, ax_5, ax_8)
ax_10: orig: ax
    def:  ax_10 = PHI(ax_9, ax_5, ax_8)
    uses: Mem13[ds:0x0100:word16] = ax_10
ds_11: orig: ds
    def:  ds_11 = PHI(ds, ds, ds)
ds:ds
    def:  def ds
    uses: Mem13[ds:0x0100:word16] = ax_10
Mem13: orig: Mem0
    def:  Mem13[ds:0x0100:word16] = ax_10
// fn0C00_0000
// Return size: 0
void fn0C00_0000(word16 bx, selector ds)
fn0C00_0000_entry:
	def bx
	def ds
	// succ:  l0C00_0000
l0C00_0000:
	branch bx == 0x0000 l0C00_0013
	// succ:  l0C00_0005 l0C00_0013
l0C00_0005:
	branch bx > 0x0000 l0C00_000D
	// succ:  l0C00_0007 l0C00_000D
l0C00_0007:
	ax_9 = 0xFFFF
	goto l0C00_0015
	// succ:  l0C00_0015
l0C00_000D:
	ax_8 = 0x0001
	goto l0C00_0015
	// succ:  l0C00_0015
l0C00_0013:
	ax_5 = 0x0000
	// succ:  l0C00_0015
l0C00_0015:
	ax_10 = PHI(ax_9, ax_5, ax_8)
	Mem13[ds:0x0100:word16] = ax_10
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
