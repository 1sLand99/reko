void fn0C00_0000(Register byte al, Register selector ds)
// MayUse:  al ds
// LiveOut:
// Trashed: SCZO al ax eax rax
// Preserved: sp
// fn0C00_0000
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// C:Flags
// ds:ds
// al:al
// return address size: 2
void fn0C00_0000(byte al, selector ds)
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	C_5 = fn0C00_000A(al, out al_4)
	branch C_5 l0C00_0009
	// succ:  l0C00_0005 l0C00_0009
l0C00_0005:
	Mem10[ds:0x0300:byte] = al_4
	// succ:  l0C00_0009
l0C00_0009:
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
FlagGroup byte fn0C00_000A(Register byte al, Register out ptr16 alOut)
// MayUse:  al:8
// LiveOut: al C
// Trashed: al C O S Z
// Preserved: sp
// fn0C00_000A
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// al:al
// SCZO:Flags
// C:Flags
// CZ:Flags
// Z:Flags
// S:Flags
// O:Flags
// alOut:Out:al
// return address size: 2
byte fn0C00_000A(byte al, ptr16 & alOut)
fn0C00_000A_entry:
	def al
	// succ:  l0C00_000A
l0C00_000A:
	branch al <u 0x30 l0C00_0032
	// succ:  l0C00_000E l0C00_0032
l0C00_000E:
	SCZO = cond(al - 0x39)
	branch Test(ULE,CZ) l0C00_0022
	// succ:  l0C00_0012 l0C00_0022
l0C00_0012:
	SCZO = cond(al - 0x41)
	branch Test(ULT,C) l0C00_0032
	// succ:  l0C00_0016 l0C00_0032
l0C00_0016:
	branch al <=u 0x46 l0C00_0022
	// succ:  l0C00_001A l0C00_0022
l0C00_001A:
	branch al <u 0x61 l0C00_0032
	// succ:  l0C00_001E l0C00_0032
l0C00_001E:
	branch al >u 0x66 l0C00_0032
	// succ:  l0C00_0022 l0C00_0032
l0C00_0022:
	al_12 = al - 0x30
	branch al <u 0x3A l0C00_0030
	// succ:  l0C00_0028 l0C00_0030
l0C00_0028:
	al_15 = al - 0x37
	branch al <u 0x47 l0C00_0030
	// succ:  l0C00_002E l0C00_0030
l0C00_002E:
	al = al - 0x20
	SCZO = cond(al)
	// succ:  l0C00_0030
l0C00_0030:
	C_20 = false
	return C_20
	// succ:  fn0C00_000A_exit
l0C00_0032:
	C_10 = true
	return C_10
	// succ:  fn0C00_000A_exit
fn0C00_000A_exit:
	use al (=> alOut)
