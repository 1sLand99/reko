fp:fp
    def:  def fp
    uses: sp_2 = fp
sp_2: orig: sp
    def:  sp_2 = fp
    uses: bp_3 = sp_2
bp_3: orig: bp
    def:  bp_3 = sp_2
    uses: ax_6 = Mem0[ss:bp_3 + 0x0006:word16]
          sp_12 = bp_3
          use bp_3
ss:ss
    def:  def ss
    uses: ax_6 = Mem0[ss:bp_3 + 0x0006:word16]
Mem0:Global memory
    def:  def Mem0
    uses: ax_6 = Mem0[ss:bp_3 + 0x0006:word16]
ax_6: orig: ax
    def:  ax_6 = Mem0[ss:bp_3 + 0x0006:word16]
    uses: ax_7 = ax_6 | ax_6
          ax_7 = ax_6 | ax_6
ax_7: orig: ax
    def:  ax_7 = ax_6 | ax_6
    uses: SZO_8 = cond(ax_7)
          ax_13 = PHI(ax_7, ax_10)
SZO_8: orig: SZO
    def:  SZO_8 = cond(ax_7)
    uses: branch Test(NE,SZO_8) l0C00_000C
          use C_9 | SZO_8
C_9: orig: C
    def:  C_9 = false
    uses: use C_9 | SZO_8
ax_10: orig: ax
    def:  ax_10 = 0xFFFF
    uses: ax_13 = PHI(ax_7, ax_10)
sp_12: orig: sp
    def:  sp_12 = bp_3
    uses: use sp_12
ax_13: orig: ax
    def:  ax_13 = PHI(ax_7, ax_10)
    uses: use ax_13
// fn0C00_0000
// Return size: 2
void fn0C00_0000()
fn0C00_0000_entry:
	def fp
	def ss
	def Mem0
	// succ:  l0C00_0000
l0C00_0000:
	sp_2 = fp
	bp_3 = sp_2
	ax_6 = Mem0[ss:bp_3 + 0x0006:word16]
	ax_7 = ax_6 | ax_6
	SZO_8 = cond(ax_7)
	C_9 = false
	branch Test(NE,SZO_8) l0C00_000C
	// succ:  l0C00_0009 l0C00_000C
l0C00_0009:
	ax_10 = 0xFFFF
	// succ:  l0C00_000C
l0C00_000C:
	ax_13 = PHI(ax_7, ax_10)
	sp_12 = bp_3
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
	use ax_13
	use bp_3
	use C_9 | SZO_8
	use sp_12

