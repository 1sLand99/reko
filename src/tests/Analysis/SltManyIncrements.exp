r0_1: orig: r0
    def:  r0_1 = PHI(r0, r0_12, r0_6)
    uses: r1_3 = Mem2[r0_1:byte]
          r0_4 = r0_1 + 0x00000001
Mem2: orig: Mem0
    def:  Mem2 = PHI(Mem0, Mem13, Mem7)
    uses: r1_3 = Mem2[r0_1:byte]
          Mem7[0x33333330:word32] = Mem2[r0_4:byte]
          Mem10[0x33333330:word32] = Mem2[r0_4:byte]
r1_3: orig: r1
    def:  r1_3 = Mem2[r0_1:byte]
    uses: branch r1_3 != 1 not1
          branch r1_3 != 2 done
r0_4: orig: r0
    def:  r0_4 = r0_1 + 0x00000001
    uses: Mem7[0x33333330:word32] = Mem2[r0_4:byte]
          r0_6 = r0_4 + 0x00000001
          Mem10[0x33333330:word32] = Mem2[r0_4:byte]
          Mem13[0x33333331:word32] = Mem10[r0_4 + 0x00000001:byte]
          r0_12 = r0_4 + 0x00000002
r1_5: orig: r1
r0_6: orig: r0
    def:  r0_6 = r0_4 + 0x00000001
    uses: r0_1 = PHI(r0, r0_12, r0_6)
Mem7: orig: Mem0
    def:  Mem7[0x33333330:word32] = Mem2[r0_4:byte]
    uses: Mem2 = PHI(Mem0, Mem13, Mem7)
r1_8: orig: r1
r0_9: orig: r0
Mem10: orig: Mem0
    def:  Mem10[0x33333330:word32] = Mem2[r0_4:byte]
    uses: Mem13[0x33333331:word32] = Mem10[r0_4 + 0x00000001:byte]
r1_11: orig: r1
r0_12: orig: r0
    def:  r0_12 = r0_4 + 0x00000002
    uses: r0_1 = PHI(r0, r0_12, r0_6)
Mem13: orig: Mem0
    def:  Mem13[0x33333331:word32] = Mem10[r0_4 + 0x00000001:byte]
    uses: Mem2 = PHI(Mem0, Mem13, Mem7)
r0:r0
    def:  def r0
    uses: r0_1 = PHI(r0, r0_12, r0_6)
Mem0:Global memory
    def:  def Mem0
    uses: Mem2 = PHI(Mem0, Mem13, Mem7)
// ManyIncrements
// Return size: 0
void ManyIncrements()
ManyIncrements_entry:
	def r0
	def Mem0
	goto loopTop
	// succ:  loopTop
done:
	return
	// succ:  ManyIncrements_exit
l1:
	Mem10[0x33333330:word32] = Mem2[r0_4:byte]
	Mem13[0x33333331:word32] = Mem10[r0_4 + 0x00000001:byte]
	r0_12 = r0_4 + 0x00000002
	goto loopTop
	// succ:  loopTop
l2:
	Mem7[0x33333330:word32] = Mem2[r0_4:byte]
	r0_6 = r0_4 + 0x00000001
	// succ:  loopTop
loopTop:
	Mem2 = PHI(Mem0, Mem13, Mem7)
	r0_1 = PHI(r0, r0_12, r0_6)
	r1_3 = Mem2[r0_1:byte]
	r0_4 = r0_1 + 0x00000001
	branch r1_3 != 1 not1
	goto l1
	// succ:  l1 not1
not1:
	branch r1_3 != 2 done
	goto l2
	// succ:  l2 done
ManyIncrements_exit:
- Interference graph -------------------
Mem0 interferes with r0
Mem10 interferes with r0_4
Mem13 interferes with r0_4
Mem2 interferes with r0_1
Mem2 interferes with r0_4
Mem2 interferes with r1_3
Mem7 interferes with r0_4
r0_1 interferes with r1_3
r0_4 interferes with r1_3
