fp:fp
    def:  def fp
    uses: sp_2 = fp
sp_2: orig: sp
    def:  sp_2 = fp
    uses: use sp_2
dx:dx
    def:  def dx
    uses: dx_4 = dx ^ dx
          dx_4 = dx ^ dx
dx_4: orig: dx
    def:  dx_4 = dx ^ dx
    uses: SZO_5 = cond(dx_4)
          dx_15 = PHI(dx_4, dx_16, dx_16)
SZO_5: orig: SZO
    def:  SZO_5 = cond(dx_4)
C_6: orig: C
    def:  C_6 = false
cx_7: orig: cx
    def:  cx_7 = 0x0004
    uses: cx_18 = PHI(cx_7, cx_19, cx_20)
di_8: orig: di
    def:  di_8 = 0x0004
    uses: di_21 = PHI(di_8, di_21, di_22)
si_10: orig: si
    def:  si_10 = PHI(si, si_14, si_14)
    uses: ax_12 = Mem0[ds:si_10:word16]
          si_14 = si_10 + 0x0002
ax_12: orig: ax
    def:  ax_12 = Mem0[ds:si_10:word16]
    uses: dx_16 = dx_15 + ax_12
          ax_13 = PHI(ax, ax_12, ax_12)
          ax_13 = PHI(ax, ax_12, ax_12)
          use ax_12
ax_13: orig: ax
    def:  ax_13 = PHI(ax, ax_12, ax_12)
si_14: orig: si
    def:  si_14 = si_10 + 0x0002
    uses: si_10 = PHI(si, si_14, si_14)
          si_10 = PHI(si, si_14, si_14)
          use si_14
dx_15: orig: dx
    def:  dx_15 = PHI(dx_4, dx_16, dx_16)
    uses: dx_16 = dx_15 + ax_12
dx_16: orig: dx
    def:  dx_16 = dx_15 + ax_12
    uses: SCZO_17 = cond(dx_16)
          Mem24[ds:0x0300:word16] = dx_16
          dx_15 = PHI(dx_4, dx_16, dx_16)
          dx_15 = PHI(dx_4, dx_16, dx_16)
          use dx_16
SCZO_17: orig: SCZO
    def:  SCZO_17 = cond(dx_16)
    uses: use SCZO_17 | SZO_23
cx_18: orig: cx
    def:  cx_18 = PHI(cx_7, cx_19, cx_20)
    uses: cx_19 = cx_18 - 0x0001
cx_19: orig: cx
    def:  cx_19 = cx_18 - 0x0001
    uses: branch cx_19 != 0x0000 l0C00_0008
          cx_18 = PHI(cx_7, cx_19, cx_20)
cx_20: orig: cx
    def:  cx_20 = 0x0004
    uses: cx_18 = PHI(cx_7, cx_19, cx_20)
          use cx_20
di_21: orig: di
    def:  di_21 = PHI(di_8, di_21, di_22)
    uses: di_22 = di_21 - 0x0001
          di_21 = PHI(di_8, di_21, di_22)
di_22: orig: di
    def:  di_22 = di_21 - 0x0001
    uses: SZO_23 = cond(di_22)
          di_21 = PHI(di_8, di_21, di_22)
          use di_22
SZO_23: orig: SZO
    def:  SZO_23 = cond(di_22)
    uses: branch Test(NE,SZO_23) l0C00_0008
          use SCZO_17 | SZO_23
Mem24: orig: Mem0
    def:  Mem24[ds:0x0300:word16] = dx_16
ds:ds
    def:  def ds
si:si
    def:  def si
    uses: si_10 = PHI(si, si_14, si_14)
Mem0:Global memory
    def:  def Mem0
ax:ax
    def:  def ax
    uses: ax_13 = PHI(ax, ax_12, ax_12)
// fn0C00_0000
// Return size: 2
void fn0C00_0000()
fn0C00_0000_entry:
	def fp
	def dx
	def ds
	def si
	def Mem0
	def ax
	// succ:  l0C00_0000
l0C00_0000:
	sp_2 = fp
	dx_4 = dx ^ dx
	SZO_5 = cond(dx_4)
	C_6 = false
	cx_7 = 0x0004
	di_8 = 0x0004
	// succ:  l0C00_0008
l0C00_0008:
	di_21 = PHI(di_8, di_21, di_22)
	cx_18 = PHI(cx_7, cx_19, cx_20)
	dx_15 = PHI(dx_4, dx_16, dx_16)
	ax_13 = PHI(ax, ax_12, ax_12)
	si_10 = PHI(si, si_14, si_14)
	ax_12 = Mem0[ds:si_10:word16]
	si_14 = si_10 + 0x0002
	dx_16 = dx_15 + ax_12
	SCZO_17 = cond(dx_16)
	cx_19 = cx_18 - 0x0001
	branch cx_19 != 0x0000 l0C00_0008
	// succ:  l0C00_000D l0C00_0008
l0C00_000D:
	cx_20 = 0x0004
	di_22 = di_21 - 0x0001
	SZO_23 = cond(di_22)
	branch Test(NE,SZO_23) l0C00_0008
	// succ:  l0C00_0013 l0C00_0008
l0C00_0013:
	Mem24[ds:0x0300:word16] = dx_16
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
	use ax_12
	use cx_20
	use di_22
	use ds_9
	use dx_16
	use SCZO_17 | SZO_23
	use si_14
	use sp_2

