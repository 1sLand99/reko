fp:fp
    def:  def fp
    uses: sp_1 = fp
sp_1: orig: sp
    def:  sp_1 = fp
    uses: use sp_1
dx:dx
    def:  def dx
    uses: dx_3 = dx ^ dx
          dx_3 = dx ^ dx
dx_3: orig: dx
    def:  dx_3 = dx ^ dx
    uses: SZO_4 = cond(dx_3)
          dx_14 = PHI(dx_3, dx_15, dx_15)
SZO_4: orig: SZO
    def:  SZO_4 = cond(dx_3)
C_5: orig: C
    def:  C_5 = false
cx_6: orig: cx
    def:  cx_6 = 0x0004
    uses: cx_17 = PHI(cx_6, cx_18, cx_19)
di_7: orig: di
    def:  di_7 = 0x0004
    uses: di_20 = PHI(di_7, di_20, di_21)
si:si
    def:  def si
    uses: si_9 = PHI(si, si_13, si_13)
si_9: orig: si
    def:  si_9 = PHI(si, si_13, si_13)
    uses: ax_11 = Mem0[ds:si_9:word16]
          si_13 = si_9 + 0x0002
ax:ax
    def:  def ax
    uses: ax_12 = PHI(ax, ax_11, ax_11)
ax_11: orig: ax
    def:  ax_11 = Mem0[ds:si_9:word16]
    uses: dx_15 = dx_14 + ax_11
          ax_12 = PHI(ax, ax_11, ax_11)
          ax_12 = PHI(ax, ax_11, ax_11)
          use ax_11
ax_12: orig: ax
    def:  ax_12 = PHI(ax, ax_11, ax_11)
si_13: orig: si
    def:  si_13 = si_9 + 0x0002
    uses: si_9 = PHI(si, si_13, si_13)
          si_9 = PHI(si, si_13, si_13)
          use si_13
dx_14: orig: dx
    def:  dx_14 = PHI(dx_3, dx_15, dx_15)
    uses: dx_15 = dx_14 + ax_11
dx_15: orig: dx
    def:  dx_15 = dx_14 + ax_11
    uses: SCZO_16 = cond(dx_15)
          Mem23[ds:0x0300:word16] = dx_15
          dx_14 = PHI(dx_3, dx_15, dx_15)
          dx_14 = PHI(dx_3, dx_15, dx_15)
          use dx_15
SCZO_16: orig: SCZO
    def:  SCZO_16 = cond(dx_15)
    uses: use SCZO_16 | SZO_22
cx_17: orig: cx
    def:  cx_17 = PHI(cx_6, cx_18, cx_19)
    uses: cx_18 = cx_17 - 0x0001
cx_18: orig: cx
    def:  cx_18 = cx_17 - 0x0001
    uses: branch cx_18 != 0x0000 l0C00_0008
          cx_17 = PHI(cx_6, cx_18, cx_19)
cx_19: orig: cx
    def:  cx_19 = 0x0004
    uses: cx_17 = PHI(cx_6, cx_18, cx_19)
          use cx_19
di_20: orig: di
    def:  di_20 = PHI(di_7, di_20, di_21)
    uses: di_21 = di_20 - 0x0001
          di_20 = PHI(di_7, di_20, di_21)
di_21: orig: di
    def:  di_21 = di_20 - 0x0001
    uses: SZO_22 = cond(di_21)
          di_20 = PHI(di_7, di_20, di_21)
          use di_21
SZO_22: orig: SZO
    def:  SZO_22 = cond(di_21)
    uses: branch Test(NE,SZO_22) l0C00_0008
          use SCZO_16 | SZO_22
Mem23: orig: Mem0
    def:  Mem23[ds:0x0300:word16] = dx_15
ds:ds
    def:  def ds
Mem0:Global memory
    def:  def Mem0
// fn0C00_0000
// Return size: 2
void fn0C00_0000()
fn0C00_0000_entry:
	def fp
	def dx
	def ds
	def si
	def Mem0
	def ax
	// succ:  l0C00_0000
l0C00_0000:
	sp_1 = fp
	dx_3 = dx ^ dx
	SZO_4 = cond(dx_3)
	C_5 = false
	cx_6 = 0x0004
	di_7 = 0x0004
	// succ:  l0C00_0008
l0C00_0008:
	di_20 = PHI(di_7, di_20, di_21)
	cx_17 = PHI(cx_6, cx_18, cx_19)
	dx_14 = PHI(dx_3, dx_15, dx_15)
	ax_12 = PHI(ax, ax_11, ax_11)
	si_9 = PHI(si, si_13, si_13)
	ax_11 = Mem0[ds:si_9:word16]
	si_13 = si_9 + 0x0002
	dx_15 = dx_14 + ax_11
	SCZO_16 = cond(dx_15)
	cx_18 = cx_17 - 0x0001
	branch cx_18 != 0x0000 l0C00_0008
	// succ:  l0C00_000D l0C00_0008
l0C00_000D:
	cx_19 = 0x0004
	di_21 = di_20 - 0x0001
	SZO_22 = cond(di_21)
	branch Test(NE,SZO_22) l0C00_0008
	// succ:  l0C00_0013 l0C00_0008
l0C00_0013:
	Mem23[ds:0x0300:word16] = dx_15
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
	use ax_11
	use cx_19
	use di_21
	use dx_15
	use SCZO_16 | SZO_22
	use si_13
	use sp_1

