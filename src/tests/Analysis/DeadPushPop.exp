fp:fp
sp_2: orig: sp
cx_3: orig: cx
    def:  cx_3 = 0x0014
    uses: ax_6 = fn0C00_0008(cx_3, di, ds)
          fn0C00_0008(cx_3, di, ds)
di:di
    def:  def di
    uses: ax_6 = fn0C00_0008(cx_3, di, ds)
          fn0C00_0008(cx_3, di, ds)
ds:ds
    def:  def ds
    uses: ax_6 = fn0C00_0008(cx_3, di, ds)
          Mem7[ds:si:word16] = ax_6
          fn0C00_0008(cx_3, di, ds)
ax_6: orig: ax
    def:  ax_6 = fn0C00_0008(cx_3, di, ds)
    uses: Mem7[ds:si:word16] = ax_6
Mem7: orig: Mem0
    def:  Mem7[ds:si:word16] = ax_6
si:si
    def:  def si
    uses: Mem7[ds:si:word16] = ax_6
ax_9: orig: ax
// fn0C00_0000
// Return size: 0
void fn0C00_0000(word16 si, word16 di, selector ds)
fn0C00_0000_entry:
	def di
	def ds
	def si
	// succ:  l0C00_0000
l0C00_0000:
	cx_3 = 0x0014
	ax_6 = fn0C00_0008(cx_3, di, ds)
	Mem7[ds:si:word16] = ax_6
	// succ:  l0C00_0006_thunk_fn0C00_0008
l0C00_0006_thunk_fn0C00_0008:
	fn0C00_0008(cx_3, di, ds)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
fp:fp
sp_2: orig: sp
sp_3: orig: sp
si:si
wLoc02_5: orig: wLoc02
sp_6: orig: sp
di:di
    def:  def di
    uses: di_11 = PHI(di, di_18)
wLoc04_8: orig: wLoc04
si_9: orig: si
    def:  si_9 = 0x0000
    uses: si_10 = PHI(si_9, si_17)
si_10: orig: si
    def:  si_10 = PHI(si_9, si_17)
    uses: si_17 = si_10 + Mem0[ds:di_11:word16]
          ax_21 = si_10
di_11: orig: di
    def:  di_11 = PHI(di, di_18)
    uses: si_17 = si_10 + Mem0[ds:di_11:word16]
          di_18 = di_11 + 0x0002
cx:cx
    def:  def cx
    uses: branch cx == 0x0000 l0C00_001A
SCZO_13: orig: SCZO
Z_14: orig: Z
ds:ds
    def:  def ds
    uses: si_17 = si_10 + Mem0[ds:di_11:word16]
Mem0:Global memory
    def:  def Mem0
    uses: si_17 = si_10 + Mem0[ds:di_11:word16]
si_17: orig: si
    def:  si_17 = si_10 + Mem0[ds:di_11:word16]
    uses: si_10 = PHI(si_9, si_17)
di_18: orig: di
    def:  di_18 = di_11 + 0x0002
    uses: di_11 = PHI(di, di_18)
SCZO_19: orig: SCZO
Z_20: orig: Z
ax_21: orig: ax
    def:  ax_21 = si_10
    uses: return ax_21
di_22: orig: di
sp_23: orig: sp
si_24: orig: si
sp_25: orig: sp
// fn0C00_0008
// Return size: 0
word16 fn0C00_0008(word16 cx, word16 di, selector ds)
fn0C00_0008_entry:
	def di
	def cx
	def ds
	def Mem0
	// succ:  l0C00_0008
l0C00_0008:
	si_9 = 0x0000
	// succ:  l0C00_000D
l0C00_000D:
	si_10 = PHI(si_9, si_17)
	di_11 = PHI(di, di_18)
	branch cx == 0x0000 l0C00_001A
	// succ:  l0C00_0012 l0C00_001A
l0C00_0012:
	si_17 = si_10 + Mem0[ds:di_11:word16]
	di_18 = di_11 + 0x0002
	goto l0C00_000D
	// succ:  l0C00_000D
l0C00_001A:
	ax_21 = si_10
	return ax_21
	// succ:  fn0C00_0008_exit
fn0C00_0008_exit:
