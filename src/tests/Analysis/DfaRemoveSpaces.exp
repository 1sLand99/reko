// void fn0C00_0000(Register selector ds)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse:  cs:[0..15] ds:[0..15]
// LiveOut:
// Trashed: SCZO ax cx di es si sp Top
// Preserved:
// fn0C00_0000
// Return size: 0
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	fn0C00_0015(SEQ(cs, 0x46<16>))
	Mem32[ds:0x63<16>:word16] = fn0C00_002F(SEQ(cs, 0x46<16>))
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

// void fn0C00_0015(Stack segptr32 ptrArg02)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse:  Stack +0002:[0..31]
// LiveOut:
// Trashed: SCZO al di es si Top
// Preserved: bp ds sp
// fn0C00_0015
// Return size: 0
void fn0C00_0015(segptr32 ptrArg02)
fn0C00_0015_entry:
	// succ:  l0C00_0015
l0C00_0015:
	ds_36 = SLICE(ptrArg02, selector, 16) (alias)
	si_15 = SLICE(ptrArg02, word16, 0) (alias)
	es_38 = SLICE(ptrArg02, selector, 16) (alias)
	di_33 = SLICE(ptrArg02, word16, 0) (alias)
	// succ:  l0C00_001F
l0C00_001F:
	al_17 = Mem16[ds_36:si_15:byte]
	si_15 = si_15 + 1<i16>
	branch al_17 == 0<8> l0C00_002C
	// succ:  l0C00_0024 l0C00_002C
l0C00_0024:
	branch al_17 == 0x20<8> l0C00_001F
	// succ:  l0C00_0028 l0C00_001F
l0C00_0028:
	Mem34[es_38:di_33:byte] = al_17
	di_33 = di_33 + 1<i16>
	goto l0C00_001F
	// succ:  l0C00_001F
l0C00_002C:
	return
	// succ:  fn0C00_0015_exit
fn0C00_0015_exit:

// Register word16 fn0C00_002F(Stack segptr32 ptrArg02)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse:  Stack +0002:[0..31]
// LiveOut: ax:[0..15]-fn0C00_0000
// Trashed: SCZO ax cx si Top
// Preserved: bp ds sp
// fn0C00_002F
// Return size: 0
word16 fn0C00_002F(segptr32 ptrArg02)
fn0C00_002F_entry:
	// succ:  l0C00_002F
l0C00_002F:
	ds_37 = SLICE(ptrArg02, selector, 16) (alias)
	si_18 = SLICE(ptrArg02, word16, 0) (alias)
	cx_13 = 0<16>
	// succ:  l0C00_0038
l0C00_0038:
	si_18 = si_18 + 1<i16>
	branch Mem11[ds_37:si_18:byte] == 0<8> l0C00_0041
	// succ:  l0C00_003D l0C00_0041
l0C00_003D:
	cx_13 = cx_13 + 1<16>
	goto l0C00_0038
	// succ:  l0C00_0038
l0C00_0041:
	return cx_13
	// succ:  fn0C00_002F_exit
fn0C00_002F_exit:

