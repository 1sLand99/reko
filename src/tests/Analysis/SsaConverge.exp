fp:fp
    def:  def fp
    uses: sp_1 = fp
sp_1: orig: sp
    def:  sp_1 = fp
    uses: use sp_1
bx:bx
    def:  def bx
    uses: SCZO_3 = cond(bx - 0x0000)
SCZO_3: orig: SCZO
    def:  SCZO_3 = cond(bx - 0x0000)
    uses: branch Test(EQ,SCZO_3) l0C00_0013
          branch Test(GT,SCZO_3) l0C00_000D
          S_14 = PHI(SCZO_3, SZO_6, SCZO_3)
          S_14 = PHI(SCZO_3, SZO_6, SCZO_3)
          C_15 = PHI(SCZO_3, C_7, SCZO_3)
          C_15 = PHI(SCZO_3, C_7, SCZO_3)
          Z_16 = PHI(SCZO_3, SZO_6, SCZO_3)
          Z_16 = PHI(SCZO_3, SZO_6, SCZO_3)
          O_17 = PHI(SCZO_3, SZO_6, SCZO_3)
          O_17 = PHI(SCZO_3, SZO_6, SCZO_3)
ax:ax
    def:  def ax
    uses: ax_5 = ax ^ ax
          ax_5 = ax ^ ax
ax_5: orig: ax
    def:  ax_5 = ax ^ ax
    uses: SZO_6 = cond(ax_5)
          ax_10 = PHI(ax_9, ax_5, ax_8)
SZO_6: orig: SZO
    def:  SZO_6 = cond(ax_5)
    uses: S_14 = PHI(SCZO_3, SZO_6, SCZO_3)
          Z_16 = PHI(SCZO_3, SZO_6, SCZO_3)
          O_17 = PHI(SCZO_3, SZO_6, SCZO_3)
C_7: orig: C
    def:  C_7 = false
    uses: C_15 = PHI(SCZO_3, C_7, SCZO_3)
ax_8: orig: ax
    def:  ax_8 = 0x0001
    uses: ax_10 = PHI(ax_9, ax_5, ax_8)
ax_9: orig: ax
    def:  ax_9 = 0xFFFF
    uses: ax_10 = PHI(ax_9, ax_5, ax_8)
ax_10: orig: ax
    def:  ax_10 = PHI(ax_9, ax_5, ax_8)
    uses: Mem13[ds:0x0100:word16] = ax_10
          use ax_10
Mem13: orig: Mem0
    def:  Mem13[ds:0x0100:word16] = ax_10
ds:ds
    def:  def ds
    uses: Mem13[ds:0x0100:word16] = ax_10
S_14: orig: S
    def:  S_14 = PHI(SCZO_3, SZO_6, SCZO_3)
    uses: use C_15 | O_17 | S_14 | Z_16
C_15: orig: C
    def:  C_15 = PHI(SCZO_3, C_7, SCZO_3)
    uses: use C_15 | O_17 | S_14 | Z_16
Z_16: orig: Z
    def:  Z_16 = PHI(SCZO_3, SZO_6, SCZO_3)
    uses: use C_15 | O_17 | S_14 | Z_16
O_17: orig: O
    def:  O_17 = PHI(SCZO_3, SZO_6, SCZO_3)
    uses: use C_15 | O_17 | S_14 | Z_16
// fn0C00_0000
// Return size: 2
void fn0C00_0000()
fn0C00_0000_entry:
	def fp
	def bx
	def ax
	def ds
	// succ:  l0C00_0000
l0C00_0000:
	sp_1 = fp
	SCZO_3 = cond(bx - 0x0000)
	branch Test(EQ,SCZO_3) l0C00_0013
	// succ:  l0C00_0005 l0C00_0013
l0C00_0005:
	branch Test(GT,SCZO_3) l0C00_000D
	// succ:  l0C00_0007 l0C00_000D
l0C00_0007:
	ax_9 = 0xFFFF
	goto l0C00_0015
	// succ:  l0C00_0015
l0C00_000D:
	ax_8 = 0x0001
	goto l0C00_0015
	// succ:  l0C00_0015
l0C00_0013:
	ax_5 = ax ^ ax
	SZO_6 = cond(ax_5)
	C_7 = false
	// succ:  l0C00_0015
l0C00_0015:
	O_17 = PHI(SCZO_3, SZO_6, SCZO_3)
	Z_16 = PHI(SCZO_3, SZO_6, SCZO_3)
	C_15 = PHI(SCZO_3, C_7, SCZO_3)
	S_14 = PHI(SCZO_3, SZO_6, SCZO_3)
	ax_10 = PHI(ax_9, ax_5, ax_8)
	Mem13[ds:0x0100:word16] = ax_10
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
	use ax_10
	use C_15 | O_17 | S_14 | Z_16
	use sp_1

