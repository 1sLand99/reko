fp:fp
    def:  def fp
    uses: sp_2 = fp
sp_2: orig: sp
    def:  sp_2 = fp
    uses: use sp_2
bx:bx
    def:  def bx
    uses: SCZO_4 = cond(bx - 0x0000)
SCZO_4: orig: SCZO
    def:  SCZO_4 = cond(bx - 0x0000)
    uses: branch Test(EQ,SCZO_4) l0C00_0013
          branch Test(GT,SCZO_4) l0C00_000D
          S_15 = PHI(SCZO_4, SZO_7, SCZO_4)
          S_15 = PHI(SCZO_4, SZO_7, SCZO_4)
          C_16 = PHI(SCZO_4, C_8, SCZO_4)
          C_16 = PHI(SCZO_4, C_8, SCZO_4)
          Z_17 = PHI(SCZO_4, SZO_7, SCZO_4)
          Z_17 = PHI(SCZO_4, SZO_7, SCZO_4)
          O_18 = PHI(SCZO_4, SZO_7, SCZO_4)
          O_18 = PHI(SCZO_4, SZO_7, SCZO_4)
ax:ax
    def:  def ax
    uses: ax_6 = ax ^ ax
          ax_6 = ax ^ ax
ax_6: orig: ax
    def:  ax_6 = ax ^ ax
    uses: SZO_7 = cond(ax_6)
          ax_11 = PHI(ax_10, ax_6, ax_9)
SZO_7: orig: SZO
    def:  SZO_7 = cond(ax_6)
    uses: S_15 = PHI(SCZO_4, SZO_7, SCZO_4)
          Z_17 = PHI(SCZO_4, SZO_7, SCZO_4)
          O_18 = PHI(SCZO_4, SZO_7, SCZO_4)
C_8: orig: C
    def:  C_8 = false
    uses: C_16 = PHI(SCZO_4, C_8, SCZO_4)
ax_9: orig: ax
    def:  ax_9 = 0x0001
    uses: ax_11 = PHI(ax_10, ax_6, ax_9)
ax_10: orig: ax
    def:  ax_10 = 0xFFFF
    uses: ax_11 = PHI(ax_10, ax_6, ax_9)
ax_11: orig: ax
    def:  ax_11 = PHI(ax_10, ax_6, ax_9)
    uses: Mem14[ds:0x0100:word16] = ax_11
          use ax_11
ds:ds
    def:  def ds
    uses: Mem14[ds:0x0100:word16] = ax_11
          use ds
Mem14: orig: Mem0
    def:  Mem14[ds:0x0100:word16] = ax_11
S_15: orig: S
    def:  S_15 = PHI(SCZO_4, SZO_7, SCZO_4)
    uses: use C_16 | O_18 | S_15 | Z_17
C_16: orig: C
    def:  C_16 = PHI(SCZO_4, C_8, SCZO_4)
    uses: use C_16 | O_18 | S_15 | Z_17
Z_17: orig: Z
    def:  Z_17 = PHI(SCZO_4, SZO_7, SCZO_4)
    uses: use C_16 | O_18 | S_15 | Z_17
O_18: orig: O
    def:  O_18 = PHI(SCZO_4, SZO_7, SCZO_4)
    uses: use C_16 | O_18 | S_15 | Z_17
// fn0C00_0000
// Return size: 2
define fn0C00_0000
fn0C00_0000_entry:
	def fp
	def bx
	def ax
	def ds
	// succ:  l0C00_0000
l0C00_0000:
	sp_2 = fp
	SCZO_4 = cond(bx - 0x0000)
	branch Test(EQ,SCZO_4) l0C00_0013
	// succ:  l0C00_0005 l0C00_0013
l0C00_0005:
	branch Test(GT,SCZO_4) l0C00_000D
	// succ:  l0C00_0007 l0C00_000D
l0C00_0007:
	ax_10 = 0xFFFF
	goto l0C00_0015
	// succ:  l0C00_0015
l0C00_000D:
	ax_9 = 0x0001
	goto l0C00_0015
	// succ:  l0C00_0015
l0C00_0013:
	ax_6 = ax ^ ax
	SZO_7 = cond(ax_6)
	C_8 = false
	// succ:  l0C00_0015
l0C00_0015:
	O_18 = PHI(SCZO_4, SZO_7, SCZO_4)
	Z_17 = PHI(SCZO_4, SZO_7, SCZO_4)
	C_16 = PHI(SCZO_4, C_8, SCZO_4)
	S_15 = PHI(SCZO_4, SZO_7, SCZO_4)
	ax_11 = PHI(ax_10, ax_6, ax_9)
	Mem14[ds:0x0100:word16] = ax_11
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
	use ax_11
	use ds
	use C_16 | O_18 | S_15 | Z_17
	use sp_2

