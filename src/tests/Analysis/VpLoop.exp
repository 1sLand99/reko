= main ========================
r0:r0
    def:  def r0
    uses: r0_2 = PHI(r0, r0_4)
r0_2: orig: r0
    def:  r0_2 = PHI(r0, r0_4)
    uses: Mem3[r0_2:word32] = 0x00000000
          r0_4 = r0_2 - 0x00000004
Mem3: orig: Mem0
    def:  Mem3[r0_2:word32] = 0x00000000
r0_4: orig: r0
    def:  r0_4 = r0_2 - 0x00000004
    uses: Z_5 = cond(r0_4)
          r0_2 = PHI(r0, r0_4)
          branch r0_4 != 0x00000000 l0000
Z_5: orig: Z
    def:  Z_5 = cond(r0_4)
r0_6: orig: r0
    def:  r0_6 = 0x0000002A
    uses: r0_7 = PHI(r0_6, r0_9)
r0_7: orig: r0
    def:  r0_7 = PHI(r0_6, r0_9)
    uses: Mem8[r0_7:word32] = 0x0000000C
          r0_9 = r0_7 - 0x00000004
Mem8: orig: Mem0
    def:  Mem8[r0_7:word32] = 0x0000000C
r0_9: orig: r0
    def:  r0_9 = r0_7 - 0x00000004
    uses: branch r0_9 == 0x00000000 l0002
          r0_7 = PHI(r0_6, r0_9)
// main
// Return size: 0
void main(word32 r0)
main_entry:
	def r0
	// succ:  l0000
l0000:
	r0_2 = PHI(r0, r0_4)
	Mem3[r0_2:word32] = 0x00000000
	r0_4 = r0_2 - 0x00000004
	Z_5 = cond(r0_4)
	branch r0_4 != 0x00000000 l0000
	// succ:  l0001 l0000
l0001:
	r0_6 = 0x0000002A
	// succ:  l0002
l0002:
	r0_7 = PHI(r0_6, r0_9)
	Mem8[r0_7:word32] = 0x0000000C
	r0_9 = r0_7 - 0x00000004
	branch r0_9 == 0x00000000 l0002
	// succ:  l1 l0002
l1:
	return
	// succ:  main_exit
main_exit:

r0:r0
    def:  def r0
    uses: r0_2 = PHI(r0, r0_4)
r0_2: orig: r0
    def:  r0_2 = PHI(r0, r0_4)
    uses: Mem3[r0_2:word32] = 0x00000000
          r0_4 = r0_2 - 0x00000004
Mem3: orig: Mem0
    def:  Mem3[r0_2:word32] = 0x00000000
r0_4: orig: r0
    def:  r0_4 = r0_2 - 0x00000004
    uses: Z_5 = cond(r0_4)
          r0_2 = PHI(r0, r0_4)
          branch r0_4 != 0x00000000 l0000
Z_5: orig: Z
    def:  Z_5 = cond(r0_4)
r0_6: orig: r0
    def:  r0_6 = 0x0000002A
    uses: r0_7 = PHI(r0_6, r0_9)
r0_7: orig: r0
    def:  r0_7 = PHI(r0_6, r0_9)
    uses: Mem8[r0_7:word32] = 0x0000000C
          r0_9 = r0_7 - 0x00000004
Mem8: orig: Mem0
    def:  Mem8[r0_7:word32] = 0x0000000C
r0_9: orig: r0
    def:  r0_9 = r0_7 - 0x00000004
    uses: branch r0_9 == 0x00000000 l0002
          r0_7 = PHI(r0_6, r0_9)
// main
// Return size: 0
void main(word32 r0)
main_entry:
	def r0
	// succ:  l0000
l0000:
	r0_2 = PHI(r0, r0_4)
	Mem3[r0_2:word32] = 0x00000000
	r0_4 = r0_2 - 0x00000004
	Z_5 = cond(r0_4)
	branch r0_4 != 0x00000000 l0000
	// succ:  l0001 l0000
l0001:
	r0_6 = 0x0000002A
	// succ:  l0002
l0002:
	r0_7 = PHI(r0_6, r0_9)
	Mem8[r0_7:word32] = 0x0000000C
	r0_9 = r0_7 - 0x00000004
	branch r0_9 == 0x00000000 l0002
	// succ:  l1 l0002
l1:
	return
	// succ:  main_exit
main_exit:
