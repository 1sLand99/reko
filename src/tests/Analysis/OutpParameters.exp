// fn0C00_0000
// Return size: 0
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	def fp
	def ds
	def Mem0
	// succ:  l0C00_0000
l0C00_0000:
	sp_2 = fp
	si_5 = Mem0[ds:0x0200:word16]
	ax_7 = fn0C00_0025(si_5, ds, out si_6)
	Mem8[ds:0x0310:word16] = ax_7
	ax_10 = fn0C00_0027(si_6, ds, out si_9)
	Mem11[ds:0x0320:word16] = ax_10
	ax_13 = fn0C00_002F(si_9, ds, out si_12)
	Mem14[ds:0x0330:word16] = ax_13
	ax_16 = fn0C00_0036(si_12, ds, out si_15)
	Mem17[ds:0x0340:word16] = ax_16
	Mem18[ds:0x0400:word16] = si_15
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

// fn0C00_0000
// Return size: 0
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	def ds
	def Mem0
	// succ:  l0C00_0000
l0C00_0000:
	si_5 = Mem0[ds:0x0200:word16]
	ax_7 = fn0C00_0025(si_5, ds, out si_6)
	Mem8[ds:0x0310:word16] = ax_7
	ax_10 = fn0C00_0027(si_6, ds, out si_9)
	Mem11[ds:0x0320:word16] = ax_10
	ax_13 = fn0C00_002F(si_9, ds, out si_12)
	Mem14[ds:0x0330:word16] = ax_13
	ax_16 = fn0C00_0036(si_12, ds, out si_15)
	Mem17[ds:0x0340:word16] = ax_16
	Mem18[ds:0x0400:word16] = si_15
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
====================
// fn0C00_0025
// Return size: 0
word16 fn0C00_0025(word16 si, selector ds, ptr16 & siOut)
fn0C00_0025_entry:
	def fp
	def ds
	def si
	def Mem0
	def siOut
	// succ:  l0C00_0025
l0C00_0025:
	sp_2 = fp
	ax_6 = Mem0[ds:si:word16]
	si_7 = si + 0x0002
	return ax_6
	// succ:  fn0C00_0025_exit
fn0C00_0025_exit:
	use si_7 (=> siOut)

// fn0C00_0025
// Return size: 0
word16 fn0C00_0025(word16 si, selector ds, ptr16 & siOut)
fn0C00_0025_entry:
	def ds
	def si
	def Mem0
	def siOut
	// succ:  l0C00_0025
l0C00_0025:
	ax_6 = Mem0[ds:si:word16]
	*siOut = si + 0x0002
	return ax_6
	// succ:  fn0C00_0025_exit
fn0C00_0025_exit:
====================
// fn0C00_0027
// Return size: 0
word16 fn0C00_0027(word16 si, selector ds, ptr16 & siOut)
fn0C00_0027_entry:
	def fp
	def si
	def siOut
	def ds
	def Mem0
	// succ:  l0C00_0027
l0C00_0027:
	sp_2 = fp
	ax_3 = 0x0000
	si_5 = si | si
	SZO_6 = cond(si_5)
	Z_7 = SZO_6 (alias)
	C_8 = false
	branch Test(EQ,Z_7) l0C00_002E
	// succ:  l0C00_002D l0C00_002E
l0C00_002D:
	ax_14 = Mem0[ds:si_5:word16]
	si_15 = si_5 + 0x0002
	// succ:  l0C00_002E
l0C00_002E:
	ax_9 = PHI(ax_3, ax_14)
	si_10 = PHI(si_5, si_15)
	return ax_9
	// succ:  fn0C00_0027_exit
fn0C00_0027_exit:
	use si_10 (=> siOut)

// fn0C00_0027
// Return size: 0
word16 fn0C00_0027(word16 si, selector ds, ptr16 & siOut)
fn0C00_0027_entry:
	def si
	def siOut
	def ds
	def Mem0
	// succ:  l0C00_0027
l0C00_0027:
	ax_3 = 0x0000
	si_5 = si | si
	*siOut = si_5
	SZO_6 = cond(si_5)
	Z_7 = SZO_6 (alias)
	branch Test(EQ,Z_7) l0C00_002E
	// succ:  l0C00_002D l0C00_002E
l0C00_002D:
	ax_14 = Mem0[ds:si_5:word16]
	*siOut = si_5 + 0x0002
	// succ:  l0C00_002E
l0C00_002E:
	ax_9 = PHI(ax_3, ax_14)
	return ax_9
	// succ:  fn0C00_0027_exit
fn0C00_0027_exit:
====================
// fn0C00_002F
// Return size: 0
word16 fn0C00_002F(word16 si, selector ds, ptr16 & siOut)
fn0C00_002F_entry:
	def fp
	def ds
	def si
	def Mem0
	def siOut
	// succ:  l0C00_002F
l0C00_002F:
	sp_2 = fp
	ax_6 = Mem0[ds:si:word16]
	si_7 = si + 0x0002
	Mem8[ds:si_7 + 0x0002:word16] = 0x0000
	return ax_6
	// succ:  fn0C00_002F_exit
fn0C00_002F_exit:
	use si_7 (=> siOut)

// fn0C00_002F
// Return size: 0
word16 fn0C00_002F(word16 si, selector ds, ptr16 & siOut)
fn0C00_002F_entry:
	def ds
	def si
	def Mem0
	def siOut
	// succ:  l0C00_002F
l0C00_002F:
	ax_6 = Mem0[ds:si:word16]
	si_7 = si + 0x0002
	*siOut = si_7
	Mem8[ds:si_7 + 0x0002:word16] = 0x0000
	return ax_6
	// succ:  fn0C00_002F_exit
fn0C00_002F_exit:
====================
// fn0C00_0036
// Return size: 0
word16 fn0C00_0036(word16 si, selector ds, ptr16 & siOut)
fn0C00_0036_entry:
	def fp
	def ds
	def si
	def Mem0
	def siOut
	// succ:  l0C00_0036
l0C00_0036:
	sp_2 = fp
	ax_6 = Mem0[ds:si:word16]
	si_7 = si + 0x0002
	ax_9 = fn0C00_0025(si_7, ds, out si_8)
	return ax_9
	// succ:  fn0C00_0036_exit
fn0C00_0036_exit:
	use si_8 (=> siOut)

// fn0C00_0036
// Return size: 0
word16 fn0C00_0036(word16 si, selector ds, ptr16 & siOut)
fn0C00_0036_entry:
	def ds
	def si
	// succ:  l0C00_0036
l0C00_0036:
	si_7 = si + 0x0002
	ax_9 = fn0C00_0025(si_7, ds, out si_8)
	return ax_9
	// succ:  fn0C00_0036_exit
fn0C00_0036_exit:
====================
