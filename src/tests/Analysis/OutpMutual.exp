// fn0C00_0000
// Return size: 0
void fn0C00_0000(word16 dx)
fn0C00_0000_entry:
	def fp
	def dx
	// succ:  l0C00_0000
l0C00_0000:
	sp_2 = fp
	ax_5 = fn0C00_0004(dx, out dx_4)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

// fn0C00_0000
// Return size: 0
void fn0C00_0000(word16 dx)
fn0C00_0000_entry:
	def dx
	// succ:  l0C00_0000
l0C00_0000:
	fn0C00_0004(dx, out dx_4)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
====================
// fn0C00_0004
// Return size: 0
word16 fn0C00_0004(word16 dx, ptr16 dxOut)
fn0C00_0004_entry:
	def fp
	def dx
	def dxOut
	// succ:  l0C00_0004
l0C00_0004:
	sp_2 = fp
	SCZO_4 = cond(dx - 0x001E)
	Z_5 = SCZO_4 (alias)
	SZO_6 = SCZO_4 (alias)
	branch Test(NE,Z_5) l0C00_000F
	// succ:  l0C00_0009 l0C00_000F
l0C00_0009:
	dx_13 = fn0C00_0013(dx)
	goto l0C00_0010
	// succ:  l0C00_0010
l0C00_000F:
	dx_14 = dx - 0x0001
	SZO_15 = cond(dx_14)
	SCZO_16 = SZO_15 (alias)
	Z_17 = SZO_15 (alias)
	// succ:  l0C00_0010
l0C00_0010:
	SZO_7 = PHI(SZO_6, SZO_15)
	SCZO_8 = PHI(SCZO_4, SCZO_16)
	Z_9 = PHI(Z_5, Z_17)
	dx_10 = PHI(dx_13, dx_14)
	ax_11 = dx_10
	return ax_11
	// succ:  fn0C00_0004_exit
fn0C00_0004_exit:
	use dx_10 (=> dxOut)

// fn0C00_0004
// Return size: 0
word16 fn0C00_0004(word16 dx, ptr16 dxOut)
fn0C00_0004_entry:
	def dx
	def dxOut
	// succ:  l0C00_0004
l0C00_0004:
	SCZO_4 = cond(dx - 0x001E)
	Z_5 = SCZO_4 (alias)
	branch Test(NE,Z_5) l0C00_000F
	// succ:  l0C00_0009 l0C00_000F
l0C00_0009:
	*dxOut = fn0C00_0013(dx)
	goto l0C00_0010
	// succ:  l0C00_0010
l0C00_000F:
	dx_14 = dx - 0x0001
	*dxOut = dx_14
	// succ:  l0C00_0010
l0C00_0010:
	dx_10 = PHI(dx_13, dx_14)
	ax_11 = dx_10
	return ax_11
	// succ:  fn0C00_0004_exit
fn0C00_0004_exit:
====================
// fn0C00_0013
// Return size: 0
word16 fn0C00_0013(word16 dx)
fn0C00_0013_entry:
	def fp
	def dx
	// succ:  l0C00_0013
l0C00_0013:
	sp_2 = fp
	SCZO_4 = cond(dx - 0x0014)
	SO_5 = SCZO_4 (alias)
	SZO_6 = SCZO_4 (alias)
	branch Test(LT,SO_5) l0C00_001F
	// succ:  l0C00_0018 l0C00_001F
l0C00_0018:
	dx_13 = dx - 0x0001
	SZO_14 = cond(dx_13)
	SCZO_15 = SZO_14 (alias)
	SO_16 = SZO_14 (alias)
	ax_18 = fn0C00_0004(dx_13, out dx_17)
	goto l0C00_0025
	// succ:  l0C00_0025
l0C00_001F:
	dx_19 = dx - 0x000A
	SCZO_20 = cond(dx_19)
	SO_21 = SCZO_20 (alias)
	SZO_22 = SCZO_20 (alias)
	ax_24 = fn0C00_0004(dx_19, out dx_23)
	// succ:  l0C00_0025
l0C00_0025:
	dx_7 = PHI(dx_17, dx_23)
	ax_8 = PHI(ax_18, ax_24)
	ax_9 = ax_8 + 0x0001
	SZO_10 = cond(ax_9)
	SCZO_11 = SZO_10 (alias)
	SO_12 = SZO_10 (alias)
	return dx_7
	// succ:  fn0C00_0013_exit
fn0C00_0013_exit:

// fn0C00_0013
// Return size: 0
word16 fn0C00_0013(word16 dx)
fn0C00_0013_entry:
	def dx
	// succ:  l0C00_0013
l0C00_0013:
	SCZO_4 = cond(dx - 0x0014)
	SO_5 = SCZO_4 (alias)
	branch Test(LT,SO_5) l0C00_001F
	// succ:  l0C00_0018 l0C00_001F
l0C00_0018:
	dx_13 = dx - 0x0001
	fn0C00_0004(dx_13, out dx_17)
	goto l0C00_0025
	// succ:  l0C00_0025
l0C00_001F:
	dx_19 = dx - 0x000A
	fn0C00_0004(dx_19, out dx_23)
	// succ:  l0C00_0025
l0C00_0025:
	dx_7 = PHI(dx_17, dx_23)
	return dx_7
	// succ:  fn0C00_0013_exit
fn0C00_0013_exit:
====================
