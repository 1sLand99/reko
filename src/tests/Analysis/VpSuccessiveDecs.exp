= fn0C00_0000 ========================
fp:fp
    def:  def fp
    uses: sp_2 = fp
sp_2: orig: sp
    def:  sp_2 = fp
    uses: call fn0C00_000C (retsize: 2;)	uses: ax:ax_5,ds:ds,sp:sp_2	defs: ax:ax_7,ds:ds_8,sp:sp_6
ds:ds
    def:  def ds
    uses: ax_5 = Mem0[ds:0x0300:word16]
          call fn0C00_000C (retsize: 2;)	uses: ax:ax_5,ds:ds,sp:sp_2	defs: ax:ax_7,ds:ds_8,sp:sp_6
Mem0:Global memory
    def:  def Mem0
    uses: ax_5 = Mem0[ds:0x0300:word16]
ax_5: orig: ax
    def:  ax_5 = Mem0[ds:0x0300:word16]
    uses: call fn0C00_000C (retsize: 2;)	uses: ax:ax_5,ds:ds,sp:sp_2	defs: ax:ax_7,ds:ds_8,sp:sp_6
sp_6: orig: sp
    def:  call fn0C00_000C (retsize: 2;)	uses: ax:ax_5,ds:ds,sp:sp_2	defs: ax:ax_7,ds:ds_8,sp:sp_6
ax_7: orig: ax
    def:  call fn0C00_000C (retsize: 2;)	uses: ax:ax_5,ds:ds,sp:sp_2	defs: ax:ax_7,ds:ds_8,sp:sp_6
    uses: Mem9[ds_8:0x0302:word16] = ax_7
ds_8: orig: ds
    def:  call fn0C00_000C (retsize: 2;)	uses: ax:ax_5,ds:ds,sp:sp_2	defs: ax:ax_7,ds:ds_8,sp:sp_6
    uses: Mem9[ds_8:0x0302:word16] = ax_7
Mem9: orig: Mem0
    def:  Mem9[ds_8:0x0302:word16] = ax_7
// fn0C00_0000
// Return size: 2
define fn0C00_0000
fn0C00_0000_entry:
	def fp
	def ds
	def Mem0
	// succ:  l0C00_0000
l0C00_0000:
	sp_2 = fp
	ax_5 = Mem0[ds:0x0300:word16]
	call fn0C00_000C (retsize: 2;)
		uses: ax:ax_5,ds:ds,sp:sp_2
		defs: ax:ax_7,ds:ds_8,sp:sp_6
	Mem9[ds_8:0x0302:word16] = ax_7
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

fp:fp
    def:  def fp
    uses: sp_2 = fp
          call fn0C00_000C (retsize: 2;)	uses: ax:ax_5,ds:ds,sp:fp	defs: ax:ax_7,ds:ds_8,sp:sp_6
sp_2: orig: sp
    def:  sp_2 = fp
ds:ds
    def:  def ds
    uses: ax_5 = Mem0[ds:0x0300:word16]
          call fn0C00_000C (retsize: 2;)	uses: ax:ax_5,ds:ds,sp:fp	defs: ax:ax_7,ds:ds_8,sp:sp_6
Mem0:Global memory
    def:  def Mem0
    uses: ax_5 = Mem0[ds:0x0300:word16]
ax_5: orig: ax
    def:  ax_5 = Mem0[ds:0x0300:word16]
    uses: call fn0C00_000C (retsize: 2;)	uses: ax:ax_5,ds:ds,sp:fp	defs: ax:ax_7,ds:ds_8,sp:sp_6
sp_6: orig: sp
    def:  call fn0C00_000C (retsize: 2;)	uses: ax:ax_5,ds:ds,sp:fp	defs: ax:ax_7,ds:ds_8,sp:sp_6
ax_7: orig: ax
    def:  call fn0C00_000C (retsize: 2;)	uses: ax:ax_5,ds:ds,sp:fp	defs: ax:ax_7,ds:ds_8,sp:sp_6
    uses: Mem9[ds_8:0x0302:word16] = ax_7
ds_8: orig: ds
    def:  call fn0C00_000C (retsize: 2;)	uses: ax:ax_5,ds:ds,sp:fp	defs: ax:ax_7,ds:ds_8,sp:sp_6
    uses: Mem9[ds_8:0x0302:word16] = ax_7
Mem9: orig: Mem0
    def:  Mem9[ds_8:0x0302:word16] = ax_7
// fn0C00_0000
// Return size: 2
define fn0C00_0000
fn0C00_0000_entry:
	def fp
	def ds
	def Mem0
	// succ:  l0C00_0000
l0C00_0000:
	sp_2 = fp
	ax_5 = Mem0[ds:0x0300:word16]
	call fn0C00_000C (retsize: 2;)
		uses: ax:ax_5,ds:ds,sp:fp
		defs: ax:ax_7,ds:ds_8,sp:sp_6
	Mem9[ds_8:0x0302:word16] = ax_7
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
= fn0C00_000C ========================
fp:fp
    def:  def fp
    uses: sp_2 = fp
sp_2: orig: sp
    def:  sp_2 = fp
ax:ax
    def:  def ax
    uses: ax_4 = ax | ax
          ax_4 = ax | ax
ax_4: orig: ax
    def:  ax_4 = ax | ax
    uses: SZO_5 = cond(ax_4)
          ax_7 = ax_4 - 0x0001
          branch ax_4 != 0x0000 l0C00_0014
SZO_5: orig: SZO
    def:  SZO_5 = cond(ax_4)
C_6: orig: C
    def:  C_6 = false
ax_7: orig: ax
    def:  ax_7 = ax_4 - 0x0001
    uses: SZO_8 = cond(ax_7)
          ax_9 = ax_7 - 0x0001
          branch ax_7 != 0x0000 l0C00_001B
SZO_8: orig: SZO
    def:  SZO_8 = cond(ax_7)
ax_9: orig: ax
    def:  ax_9 = ax_7 - 0x0001
    uses: SZO_10 = cond(ax_9)
          ax_11 = ax_9 ^ ax_9
          ax_11 = ax_9 ^ ax_9
          branch ax_9 != 0x0000 l0C00_0022
SZO_10: orig: SZO
    def:  SZO_10 = cond(ax_9)
ax_11: orig: ax
    def:  ax_11 = ax_9 ^ ax_9
    uses: SZO_12 = cond(ax_11)
SZO_12: orig: SZO
    def:  SZO_12 = cond(ax_11)
C_13: orig: C
    def:  C_13 = false
ax_14: orig: ax
    def:  ax_14 = 0x0127
ax_15: orig: ax
    def:  ax_15 = 0x0125
ax_16: orig: ax
    def:  ax_16 = 0x0123
// fn0C00_000C
// Return size: 2
define fn0C00_000C
fn0C00_000C_entry:
	def fp
	def ax
	// succ:  l0C00_000C
l0C00_000C:
	sp_2 = fp
	ax_4 = ax | ax
	SZO_5 = cond(ax_4)
	C_6 = false
	branch ax_4 != 0x0000 l0C00_0014
	// succ:  l0C00_0010 l0C00_0014
l0C00_0010:
	ax_16 = 0x0123
	return
	// succ:  fn0C00_000C_exit
l0C00_0014:
	ax_7 = ax_4 - 0x0001
	SZO_8 = cond(ax_7)
	branch ax_7 != 0x0000 l0C00_001B
	// succ:  l0C00_0017 l0C00_001B
l0C00_0017:
	ax_15 = 0x0125
	return
	// succ:  fn0C00_000C_exit
l0C00_001B:
	ax_9 = ax_7 - 0x0001
	SZO_10 = cond(ax_9)
	branch ax_9 != 0x0000 l0C00_0022
	// succ:  l0C00_001E l0C00_0022
l0C00_001E:
	ax_14 = 0x0127
	return
	// succ:  fn0C00_000C_exit
l0C00_0022:
	ax_11 = ax_9 ^ ax_9
	SZO_12 = cond(ax_11)
	C_13 = false
	return
	// succ:  fn0C00_000C_exit
fn0C00_000C_exit:

fp:fp
    def:  def fp
    uses: sp_2 = fp
sp_2: orig: sp
    def:  sp_2 = fp
ax:ax
    def:  def ax
    uses: ax_4 = ax
          SZO_5 = cond(ax)
          branch ax != 0x0000 l0C00_0014
          ax_7 = ax - 0x0001
          SZO_8 = cond(ax - 0x0001)
          branch ax != 0x0001 l0C00_001B
          ax_9 = ax - 0x0002
          SZO_10 = cond(ax - 0x0002)
          branch ax != 0x0002 l0C00_0022
ax_4: orig: ax
    def:  ax_4 = ax
SZO_5: orig: SZO
    def:  SZO_5 = cond(ax)
C_6: orig: C
    def:  C_6 = false
ax_7: orig: ax
    def:  ax_7 = ax - 0x0001
SZO_8: orig: SZO
    def:  SZO_8 = cond(ax - 0x0001)
ax_9: orig: ax
    def:  ax_9 = ax - 0x0002
SZO_10: orig: SZO
    def:  SZO_10 = cond(ax - 0x0002)
ax_11: orig: ax
    def:  ax_11 = 0x0000
SZO_12: orig: SZO
    def:  SZO_12 = cond(0x0000)
C_13: orig: C
    def:  C_13 = false
ax_14: orig: ax
    def:  ax_14 = 0x0127
ax_15: orig: ax
    def:  ax_15 = 0x0125
ax_16: orig: ax
    def:  ax_16 = 0x0123
// fn0C00_000C
// Return size: 2
define fn0C00_000C
fn0C00_000C_entry:
	def fp
	def ax
	// succ:  l0C00_000C
l0C00_000C:
	sp_2 = fp
	ax_4 = ax
	SZO_5 = cond(ax)
	C_6 = false
	branch ax != 0x0000 l0C00_0014
	// succ:  l0C00_0010 l0C00_0014
l0C00_0010:
	ax_16 = 0x0123
	return
	// succ:  fn0C00_000C_exit
l0C00_0014:
	ax_7 = ax - 0x0001
	SZO_8 = cond(ax - 0x0001)
	branch ax != 0x0001 l0C00_001B
	// succ:  l0C00_0017 l0C00_001B
l0C00_0017:
	ax_15 = 0x0125
	return
	// succ:  fn0C00_000C_exit
l0C00_001B:
	ax_9 = ax - 0x0002
	SZO_10 = cond(ax - 0x0002)
	branch ax != 0x0002 l0C00_0022
	// succ:  l0C00_001E l0C00_0022
l0C00_001E:
	ax_14 = 0x0127
	return
	// succ:  fn0C00_000C_exit
l0C00_0022:
	ax_11 = 0x0000
	SZO_12 = cond(0x0000)
	C_13 = false
	return
	// succ:  fn0C00_000C_exit
fn0C00_000C_exit:
