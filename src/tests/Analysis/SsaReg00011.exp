fp:fp
    def:  def fp
    uses: sp_2 = fp
sp_2: orig: sp
    def:  sp_2 = fp
    uses: call fn0C00_0004 (retsize: 2;)	uses: sp:sp_2,Top:Top_3	defs: sp:sp_4,Top:Top_5
Top_3: orig: Top
    def:  Top_3 = 0
    uses: call fn0C00_0004 (retsize: 2;)	uses: sp:sp_2,Top:Top_3	defs: sp:sp_4,Top:Top_5
sp_4: orig: sp
    def:  call fn0C00_0004 (retsize: 2;)	uses: sp:sp_2,Top:Top_3	defs: sp:sp_4,Top:Top_5
    uses: use sp_4
Top_5: orig: Top
    def:  call fn0C00_0004 (retsize: 2;)	uses: sp:sp_2,Top:Top_3	defs: sp:sp_4,Top:Top_5
    uses: use Top_5
// fn0C00_0000
// Return size: 2
define fn0C00_0000
fn0C00_0000_entry:
	def fp
	sp_2 = fp
	Top_3 = 0
	// succ:  l0C00_0000
l0C00_0000:
	call fn0C00_0004 (retsize: 2;)
		uses: sp:sp_2,Top:Top_3
		defs: sp:sp_4,Top:Top_5
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
	use sp_4
	use Top_5

fp:fp
    def:  def fp
    uses: sp_2 = fp
sp_2: orig: sp
    def:  sp_2 = fp
    uses: use sp_2
Top_3: orig: Top
    def:  Top_3 = 0
    uses: use Top_3
ax_4: orig: ax
    def:  ax_4 = 0x4DE1
    uses: es_5 = ax_4
es_5: orig: es
    def:  es_5 = ax_4
    uses: Mem33[es_5:bx_32:byte] = al_28
          use es_5
bx_6: orig: bx
    def:  bx_6 = 0x0FFF
    uses: bh_37 = SLICE(bx_6, byte, 8) (alias)
          bl_39 = SLICE(bx_6, byte, 0) (alias)
bh_7: orig: bh
    def:  bh_7 = PHI((bh_37, l0C00_0004), (bh_38, l0C00_000C))
    uses: al_8 = bh_7
          bx_32 = SEQ(bh_7, bl_11) (alias)
al_8: orig: al
    def:  al_8 = bh_7
    uses: al_9 = al_8 + 0x01
al_9: orig: al
    def:  al_9 = al_8 + 0x01
    uses: SZO_10 = cond(al_9)
          ax_16 = ah_13 *u al_9
SZO_10: orig: SZO
    def:  SZO_10 = cond(al_9)
bl_11: orig: bl
    def:  bl_11 = PHI((bl_39, l0C00_0004), (bl_40, l0C00_000C))
    uses: ah_12 = bl_11
          al_20 = bl_11
          bx_32 = SEQ(bh_7, bl_11) (alias)
ah_12: orig: ah
    def:  ah_12 = bl_11
    uses: ah_13 = ah_12 & 0x0F
ah_13: orig: ah
    def:  ah_13 = ah_12 & 0x0F
    uses: SZO_14 = cond(ah_13)
          ax_16 = ah_13 *u al_9
SZO_14: orig: SZO
    def:  SZO_14 = cond(ah_13)
C_15: orig: C
    def:  C_15 = false
ax_16: orig: ax
    def:  ax_16 = ah_13 *u al_9
    uses: SCZO_17 = cond(ax_16)
          ax_18 = ax_16 << 0x0004
SCZO_17: orig: SCZO
    def:  SCZO_17 = cond(ax_16)
ax_18: orig: ax
    def:  ax_18 = ax_16 << 0x0004
    uses: SCZO_19 = cond(ax_18)
          ah_24 = SLICE(ax_18, byte, 8) (alias)
SCZO_19: orig: SCZO
    def:  SCZO_19 = cond(ax_18)
al_20: orig: al
    def:  al_20 = bl_11
    uses: al_21 = al_20 & 0xF0
al_21: orig: al
    def:  al_21 = al_20 & 0xF0
    uses: SZO_22 = cond(al_21)
          al_28 = al_21 | ah_25
SZO_22: orig: SZO
    def:  SZO_22 = cond(al_21)
C_23: orig: C
    def:  C_23 = false
ah_24: orig: ah
    def:  ah_24 = SLICE(ax_18, byte, 8) (alias)
    uses: ah_25 = ah_24 & 0x0F
ah_25: orig: ah
    def:  ah_25 = ah_24 & 0x0F
    uses: SZO_26 = cond(ah_25)
          al_28 = al_21 | ah_25
          ax_41 = SEQ(ah_25, al_28) (alias)
SZO_26: orig: SZO
    def:  SZO_26 = cond(ah_25)
C_27: orig: C
    def:  C_27 = false
al_28: orig: al
    def:  al_28 = al_21 | ah_25
    uses: SZO_29 = cond(al_28)
          Mem33[es_5:bx_32:byte] = al_28
          ax_41 = SEQ(ah_25, al_28) (alias)
SZO_29: orig: SZO
    def:  SZO_29 = cond(al_28)
C_30: orig: C
    def:  C_30 = false
    uses: use C_30
ax_41: orig: ax
    def:  ax_41 = SEQ(ah_25, al_28) (alias)
    uses: use ax_41
bx_32: orig: bx
    def:  bx_32 = SEQ(bh_7, bl_11) (alias)
    uses: Mem33[es_5:bx_32:byte] = al_28
          bx_34 = bx_32 - 0x0001
Mem33: orig: Mem0
    def:  Mem33[es_5:bx_32:byte] = al_28
bx_34: orig: bx
    def:  bx_34 = bx_32 - 0x0001
    uses: SZO_35 = cond(bx_34)
          bh_38 = SLICE(bx_34, byte, 8) (alias)
          bl_40 = SLICE(bx_34, byte, 0) (alias)
          use bx_34
SZO_35: orig: SZO
    def:  SZO_35 = cond(bx_34)
    uses: S_36 = SLICE(SZO_35, bool, 0) (alias)
          O_42 = SLICE(SZO_35, bool, 4) (alias)
          Z_45 = SLICE(SZO_35, bool, 2) (alias)
S_36: orig: S
    def:  S_36 = SLICE(SZO_35, bool, 0) (alias)
    uses: branch Test(NS,S_36) l0C00_000C
          use S_36
bh_37: orig: bh
    def:  bh_37 = SLICE(bx_6, byte, 8) (alias)
    uses: bh_7 = PHI((bh_37, l0C00_0004), (bh_38, l0C00_000C))
bh_38: orig: bh
    def:  bh_38 = SLICE(bx_34, byte, 8) (alias)
    uses: bh_7 = PHI((bh_37, l0C00_0004), (bh_38, l0C00_000C))
bl_39: orig: bl
    def:  bl_39 = SLICE(bx_6, byte, 0) (alias)
    uses: bl_11 = PHI((bl_39, l0C00_0004), (bl_40, l0C00_000C))
bl_40: orig: bl
    def:  bl_40 = SLICE(bx_34, byte, 0) (alias)
    uses: bl_11 = PHI((bl_39, l0C00_0004), (bl_40, l0C00_000C))
O_42: orig: O
    def:  O_42 = SLICE(SZO_35, bool, 4) (alias)
    uses: use O_42
Z_45: orig: Z
    def:  Z_45 = SLICE(SZO_35, bool, 2) (alias)
    uses: use Z_45
// fn0C00_0004
// Return size: 2
define fn0C00_0004
fn0C00_0004_entry:
	def fp
	sp_2 = fp
	Top_3 = 0
	// succ:  l0C00_0004
l0C00_0004:
	ax_4 = 0x4DE1
	es_5 = ax_4
	bx_6 = 0x0FFF
	bh_37 = SLICE(bx_6, byte, 8) (alias)
	bl_39 = SLICE(bx_6, byte, 0) (alias)
	// succ:  l0C00_000C
l0C00_000C:
	bl_11 = PHI((bl_39, l0C00_0004), (bl_40, l0C00_000C))
	bh_7 = PHI((bh_37, l0C00_0004), (bh_38, l0C00_000C))
	al_8 = bh_7
	al_9 = al_8 + 0x01
	SZO_10 = cond(al_9)
	ah_12 = bl_11
	ah_13 = ah_12 & 0x0F
	SZO_14 = cond(ah_13)
	C_15 = false
	ax_16 = ah_13 *u al_9
	SCZO_17 = cond(ax_16)
	ax_18 = ax_16 << 0x0004
	ah_24 = SLICE(ax_18, byte, 8) (alias)
	SCZO_19 = cond(ax_18)
	al_20 = bl_11
	al_21 = al_20 & 0xF0
	SZO_22 = cond(al_21)
	C_23 = false
	ah_25 = ah_24 & 0x0F
	SZO_26 = cond(ah_25)
	C_27 = false
	al_28 = al_21 | ah_25
	SZO_29 = cond(al_28)
	C_30 = false
	bx_32 = SEQ(bh_7, bl_11) (alias)
	Mem33[es_5:bx_32:byte] = al_28
	bx_34 = bx_32 - 0x0001
	bh_38 = SLICE(bx_34, byte, 8) (alias)
	bl_40 = SLICE(bx_34, byte, 0) (alias)
	SZO_35 = cond(bx_34)
	S_36 = SLICE(SZO_35, bool, 0) (alias)
	ax_41 = SEQ(ah_25, al_28) (alias)
	O_42 = SLICE(SZO_35, bool, 4) (alias)
	Z_45 = SLICE(SZO_35, bool, 2) (alias)
	branch Test(NS,S_36) l0C00_000C
	// succ:  l0C00_0029 l0C00_000C
l0C00_0029:
	return
	// succ:  fn0C00_0004_exit
fn0C00_0004_exit:
	use ax_41
	use bx_34
	use C_30
	use es_5
	use O_42
	use S_36
	use sp_2
	use Top_3
	use Z_45

