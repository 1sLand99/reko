// fn0C00_0000 /////////////////////
	LiveOut:  
	BitsUsed:  ds:[0..15]
	BypassIn: 
	Trashed:   ax si Top
	Preserved: sp
// fn0C00_0000
define fn0C00_0000
fn0C00_0000_entry:
	def ds
l0C00_0000:
	call fn0C00_000D (retsize: 2;)
		uses: ds:ds
		defs: ax:ax_5
	call fn0C00_001A (retsize: 2;)
		uses: ds:ds,si:ax_5
		defs: ax:ax_7
	Mem8[ds:0x0400:word16] = ax_7
	return
fn0C00_0000_exit:
// fn0C00_000D /////////////////////
	LiveOut:   ax
	BitsUsed:  ds:[0..15]
	BypassIn: 
	Trashed:   ax Top
	Preserved: si sp
// fn0C00_000D
define fn0C00_000D
fn0C00_000D_entry:
	def ds
l0C00_000D:
	si_9 = Mem7[ds:0x007A:word16]
	si_10 = Mem7[ds:si_9 + 0x0004:word16]
	ax_11 = si_10 + 0x0008
	return
fn0C00_000D_exit:
	use ax_11
// fn0C00_001A /////////////////////
	LiveOut:   ax
	BitsUsed:  ds:[0..15] si:[0..15]
	BypassIn: 
	Trashed:   ax Top
	Preserved: si sp
// fn0C00_001A
define fn0C00_001A
fn0C00_001A_entry:
	def si
	def ds
l0C00_001A:
	ax_9 = Mem7[ds:si:word16]
	return
fn0C00_001A_exit:
	use ax_9
