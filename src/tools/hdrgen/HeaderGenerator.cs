#region License
/* 
 * Copyright (C) 1999-2018 John Källén.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.  If not, write to
 * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 */
#endregion

using Reko.Core.NativeInterface;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace Reko.Tools.HdrGen
{
    public class HeaderGenerator
    {
        private static Dictionary<Type, string> blittable = new Dictionary<Type, string>
        {
            { typeof(int), "int32_t" },
        };

        private Assembly asm;
        private TextWriter w;

        public static void Main(string[] args)
        {
            var assemblyName = args[0];
            var asm = Assembly.LoadFrom(assemblyName);
            var hdrgen = new HeaderGenerator(asm, System.Console.Out);
            hdrgen.Execute();
        }

        public HeaderGenerator(Assembly asm, TextWriter w)
        {
            this.asm = asm;
            this.w = w;
        }

        public void Execute()
        { 
            var types = CollectInteropTypes(asm);
            GenerateOutput(types, w);
        }


        private IEnumerable<Type> CollectInteropTypes(Assembly asm)
        {
            return asm.GetTypes()
                .Where(TypeHasInteropAttribute)
                .OrderBy(t => t.Name)
                .ToList();
        }

        private bool TypeHasInteropAttribute(Type type)
        {
            var attrs = type.GetCustomAttributes(typeof(NativeInteropAttribute), true);
            return attrs.Length > 0;
        }

        public void WriteInterfaceDefinition(Type type)
        {
            var guid = type.GetCustomAttribute<GuidAttribute>();
            if (guid != null)
            {
                WriteGuidDefinition(type.Name, guid.Value);
            }

            w.WriteLine("class {0} : public IUnknown", type.Name);
            w.WriteLine("{");
            w.WriteLine("public:");
            foreach (var method in type.GetMethods())
            {
                WriteInterfaceMethod(method);
            }
            w.WriteLine("};");
        }

        private void WriteInterfaceMethod(MethodInfo method)
        {
            w.Write("    virtual ");
            if (method.ReturnType == null)
            {
                w.Write("STDMETHODCALLIMP");
            }
            else if (blittable.TryGetValue(method.ReturnType, out string cppEquivalent))
            {
                w.Write("{0} STDAPICALLTYPE", cppEquivalent);
            }
            w.Write(" {0}(", method.Name);
            var sep = "";
            foreach (var parameter in method.GetParameters())
            {
                w.Write(sep);
                sep = ", ";
                WriteParameter(parameter);
            }
            w.WriteLine(") = 0;");
        }

        private void WriteParameter(ParameterInfo parameter)
        {
            throw new NotImplementedException();
        }

        public void WriteGuidDefinition(string name, string value)
        {
            var guid = new Guid(value);
            var ab = guid.ToByteArray();
            w.WriteLine($"// {guid:B}".ToUpper());
            w.WriteLine("const IID IID_{0} =", name);
            w.WriteLine("    {0:X};", guid);
        }

        private void GenerateOutput(IEnumerable<Type> types, TextWriter w)
        {
            WriteHeader(w);
            WriteForwardDeclarations(types);
            WriteDefinitions(types);
            WriteFooter(w);
        }

        private void WriteHeader(TextWriter w)
        {
            w.WriteLine("#ifndef _reko_h_");
            w.WriteLine("#define _reko_h_");
            w.WriteLine();
            w.WriteLine("// reko.h");
            w.WriteLine("// Note: this file is automatically generated by the hdrgen tool.");
            w.WriteLine("// Do not make changes in this file as they will be discarded.");
            w.WriteLine();
        }

        private void WriteForwardDeclarations(IEnumerable<Type> types)
        {
            throw new NotImplementedException();
        }

        private void WriteDefinitions(IEnumerable<Type> types)
        {
            foreach (var type in types)
            {
                if (type.IsEnum)
                {
                    WriteEnumDefinition(type);
                }
                else
                    throw new NotImplementedException();
                w.WriteLine();
            }
        }

        public void WriteEnumDefinition(Type type)
        {
            w.WriteLine("enum class {0}", type.Name);
            w.WriteLine("{");

            var names = Enum.GetNames(type);
            foreach (var name in names)
            {
                var value = Convert.ToInt32(Enum.Parse(type, name));
                w.WriteLine("    {0} = {1},", name, value);
            }
            w.WriteLine("}");
        }

        private void WriteFooter(TextWriter w)
        {
            w.WriteLine("#endif /*_reko_h_*/");
        }
    }
}
