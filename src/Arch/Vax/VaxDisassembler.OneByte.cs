#region License
/* 
 * Copyright (C) 1999-2019 John Källén.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.  If not, write to
 * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 */
#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Reko.Core;
using Reko.Core.Machine;

namespace Reko.Arch.Vax
{
    using Decoder = Decoder<VaxDisassembler, Opcode, VaxInstruction>;

    public partial class VaxDisassembler
    {
        // http://www2.hmc.edu/www_common/OVMS072-OLD/72final/4515/4515pro_038.html#mnemonics

        private static Decoder[] oneByteInstructions = new[]
        {
 /* 00 */ Instr(Opcode.halt, InstrClass.System|InstrClass.Terminates|InstrClass.Zero), 
 /* 01 */ Instr(Opcode.nop, InstrClass.Padding|InstrClass.Linear), 
 /* 02 */ Instr(Opcode.rei, InstrClass.Transfer), 
 /* 03 */ Instr(Opcode.bpt), 
 /* 04 */ Instr(Opcode.ret, InstrClass.Transfer), 
 /* 05 */ Instr(Opcode.rsb, InstrClass.Transfer), 
 /* 06 */ Instr(Opcode.ldpctx), 
 /* 07 */ Instr(Opcode.svpctx), 
 /* 08 */ Instr(Opcode.cvtps, rw,ab,rw,ab), 
 /* 09 */ Instr(Opcode.cvtsp, rw,ab,rw,ab),
 /* 0A */ Instr(Opcode.index, rl,rl,rl,rl,rl,wl),
 /* 0B */ Instr(Opcode.crc, ab,rl,rw,ab), 
 /* 0C */ Instr(Opcode.prober, rb,rw,ab), 
 /* 0D */ Instr(Opcode.probew, rb,rw,ab), 
 /* 0E */ Instr(Opcode.insque, ab,ab), 
 /* 0F */ Instr(Opcode.remque, ab,wl), 

 /* 10 */ Instr(Opcode.bsbb, InstrClass.Transfer, bb), 
 /* 11 */ Instr(Opcode.brb, InstrClass.Transfer, bb), 
 /* 12 */ Instr(Opcode.bneq, InstrClass.ConditionalTransfer, bb),    // bnequ
 /* 13 */ Instr(Opcode.beql, InstrClass.ConditionalTransfer, bb),  // beqlu
 /* 14 */ Instr(Opcode.bgtr, InstrClass.ConditionalTransfer, bb), 
 /* 15 */ Instr(Opcode.bleq, InstrClass.ConditionalTransfer, bb), 
 /* 16 */ Instr(Opcode.jsb, InstrClass.Transfer|InstrClass.Call, ab), 
 /* 17 */ Instr(Opcode.jmp, InstrClass.Transfer, ab), 
 /* 18 */ Instr(Opcode.bgeq, InstrClass.ConditionalTransfer, bb), 
 /* 19 */ Instr(Opcode.blss, InstrClass.ConditionalTransfer, bb), 
 /* 1A */ Instr(Opcode.bgtru, InstrClass.ConditionalTransfer, bb), 
 /* 1B */ Instr(Opcode.blequ, InstrClass.ConditionalTransfer, bb), 
 /* 1C */ Instr(Opcode.bvc, InstrClass.ConditionalTransfer, bb), 
 /* 1D */ Instr(Opcode.bvs, InstrClass.ConditionalTransfer, bb), 
 /* 1E */ Instr(Opcode.bgequ, InstrClass.ConditionalTransfer, bb), // bcc, 
 /* 1F */ Instr(Opcode.blssu, InstrClass.ConditionalTransfer, bb), //  bcs, 

 /* 20 */ Instr(Opcode.addp4, rw,ab,rw,ab),
 /* 21 */ Instr(Opcode.addp6, rw,ab,rw,ab,rw,ab),
 /* 22 */ Instr(Opcode.subp4, rw,ab,rw,ab),
 /* 23 */ Instr(Opcode.subp6, rw,ab,rw,ab,rw,ab),
 /* 24 */ Instr(Opcode.cvtpt, rw,ab,ab,rw),
 /* 25 */ Instr(Opcode.mulp,  rw,ab,rw,ab,rw,ab),
 /* 26 */ Instr(Opcode.cvttp, rw,ab,ab,rw),
 /* 27 */ Instr(Opcode.divp,  rw,ab,rw,ab,rw,ab),
 /* 28 */ Instr(Opcode.movc3, rw,ab,ab),
 /* 29 */ Instr(Opcode.cmpc3, rw,ab,ab),
 /* 2A */ Instr(Opcode.scanc, rw,ab,ab,rb),
 /* 2B */ Instr(Opcode.spanc, rw,ab,ab,rb),
 /* 2C */ Instr(Opcode.movc5,  -1), 
 /* 2D */ Instr(Opcode.cmpc5, rw,ab,rb,rw,ab), 
 /* 2E */ Instr(Opcode.movtc,  -1), 
 /* 2F */ Instr(Opcode.movtuc,  -1), 

 /* 30 */ Instr(Opcode.bsbw,  InstrClass.Transfer, bw), 
 /* 31 */ Instr(Opcode.brw,   InstrClass.Transfer, bw), 
 /* 32 */ Instr(Opcode.cvtwl, rw,wl),
 /* 33 */ Instr(Opcode.cvtwb, rw,wb), 
 /* 34 */ Instr(Opcode.movp,  rw,ab,ab), 
 /* 35 */ Instr(Opcode.cmpp3,  rw,ab,ab), 
 /* 36 */ Instr(Opcode.cvtpl,  -1), 
 /* 37 */ Instr(Opcode.cmpp4,  rw,ab,rw,ab), 
 /* 38 */ Instr(Opcode.editpc,  -1), 
 /* 39 */ Instr(Opcode.matchc, rw,ab,rw,ab), 
 /* 3A */ Instr(Opcode.locc,  -1), 
 /* 3B */ Instr(Opcode.skpc,  -1), 
 /* 3C */ Instr(Opcode.movzwl, rw,wl),
 /* 3D */ Instr(Opcode.acbw,  InstrClass.ConditionalTransfer, rw,rw,mw,bw),
 /* 3E */ Instr(Opcode.movaw,  aw,wl), 
 /* 3F */ Instr(Opcode.pushaw, aw), 
 
 /* 40 */ Instr(Opcode.addf2, rf,wf), 
 /* 41 */ Instr(Opcode.addf3, rf,rf,wf), 
 /* 42 */ Instr(Opcode.subf2, rf,wf), 
 /* 43 */ Instr(Opcode.subf3, rf,rf,wf), 
 /* 44 */ Instr(Opcode.mulf2, rf,wf), 
 /* 45 */ Instr(Opcode.mulf3, rf,rf,wf), 
 /* 46 */ Instr(Opcode.divf2, rf,wf), 
 /* 47 */ Instr(Opcode.divf3, rf,rf,wf), 
 /* 48 */ Instr(Opcode.cvtfb, rf,wb),
 /* 49 */ Instr(Opcode.cvtfw, rf,ww),
 /* 4A */ Instr(Opcode.cvtfl, rf,wl), 
 /* 4B */ Instr(Opcode.cvtrfl, rf,wl),
 /* 4C */ Instr(Opcode.cvtbf, rb,wf),
 /* 4D */ Instr(Opcode.cvtwf, rw,wf),
 /* 4E */ Instr(Opcode.cvtlf, rl,wf), 
 /* 4F */ Instr(Opcode.acbf,  InstrClass.ConditionalTransfer, rf,rf,mf,bw),

 /* 50 */ Instr(Opcode.movf,  rf,wf),
 /* 51 */ Instr(Opcode.cmpf,  rf,rf), 
 /* 52 */ Instr(Opcode.mnegf, rf,wf), 
 /* 53 */ Instr(Opcode.tstf,  rf), 
 /* 54 */ Instr(Opcode.emodf, rf,rb,rd,wl,wf), 
 /* 55 */ Instr(Opcode.polyf, rf,rw,ab), 
 /* 56 */ Instr(Opcode.cvtfd, rf,wd),
 /* 57 */ Instr(Opcode.Reserved ,  -1), 
 /* 58 */ Instr(Opcode.adawi, rw,aw), 
 /* 59 */ Instr(Opcode.Reserved,  -1), 
 /* 5A */ Instr(Opcode.Reserved,  -1), 
 /* 5B */ Instr(Opcode.Reserved,  -1), 
 /* 5C */ Instr(Opcode.insqhi,  -1), 
 /* 5D */ Instr(Opcode.insqti,  -1), 
 /* 5E */ Instr(Opcode.remqhi,  -1), 
 /* 5F */ Instr(Opcode.remqti,  -1), 

 /* 60 */ Instr(Opcode.addd2,  rd,rw), 
 /* 61 */ Instr(Opcode.addd3,  rd,rd,wd), 
 /* 62 */ Instr(Opcode.subd2,  rd,rw), 
 /* 63 */ Instr(Opcode.subd3,  rd,rd,wd),  
 /* 64 */ Instr(Opcode.muld2,  rd,rw), 
 /* 65 */ Instr(Opcode.muld3,  rd,rd,wd),
 /* 66 */ Instr(Opcode.divd2,  rd,rw), 
 /* 67 */ Instr(Opcode.divd3,  rd,rd,wd),
 /* 68 */ Instr(Opcode.cvtdb,  rd,rb),  
 /* 69 */ Instr(Opcode.cvtdw,  rd,rw),  
 /* 6A */ Instr(Opcode.cvtdl,  rd,rl),  
 /* 6B */ Instr(Opcode.cvtrdl, rd,rl), 
 /* 6C */ Instr(Opcode.cvtbd,  rb,rd),
 /* 6D */ Instr(Opcode.cvtwd,  rw,rd),
 /* 6E */ Instr(Opcode.cvtld,  rl,rd),
 /* 6F */ Instr(Opcode.acbd,   InstrClass.ConditionalTransfer, rd,rd,md,bw),

 /* 70 */ Instr(Opcode.movd,  rd,wd), 
 /* 71 */ Instr(Opcode.cmpd,  rd,rd), 
 /* 72 */ Instr(Opcode.mnegd, rd,wd), 
 /* 73 */ Instr(Opcode.tstd,  rd), 
 /* 74 */ Instr(Opcode.emodd, rd,rb,rd,wl,wd), 
 /* 75 */ Instr(Opcode.polyd, rd,rw,ab), 
 /* 76 */ Instr(Opcode.cvtdf, rd,wf), 
 /* 77 */ Instr(Opcode.Reserved,  -1), 
 /* 78 */ Instr(Opcode.ashl, rb,rl,wl), 
 /* 79 */ Instr(Opcode.ashq, rb,rq,wq), 
 /* 7A */ Instr(Opcode.emul, rl,rl,rl,wq), 
 /* 7B */ Instr(Opcode.ediv, rl,rq,wl,wl), 
 /* 7C */ Instr(Opcode.clrq, wq), //  clrd,  clrg,  -1), 
 /* 7D */ Instr(Opcode.movq, rq,wq), 
 /* 7E */ Instr(Opcode.movaq, aq,wl), //  movad,  movag,  -1), 
 /* 7F */ Instr(Opcode.pushaq, aq), //  pushad,  pushag,  -1), 

 /* 80 */ Instr(Opcode.addb2, rb,wb), 
 /* 81 */ Instr(Opcode.addb3, rb,rb,wb), 
 /* 82 */ Instr(Opcode.subb2, rb,wb), 
 /* 83 */ Instr(Opcode.subb3, rb,rb,wb), 
 /* 84 */ Instr(Opcode.mulb2, rb,rb), 
 /* 85 */ Instr(Opcode.mulb3, rb,rb,wb), 
 /* 86 */ Instr(Opcode.divb2, rb,rb), 
 /* 87 */ Instr(Opcode.divb3, rb,rb,wb), 
 /* 88 */ Instr(Opcode.bisb2, rb,rb), 
 /* 89 */ Instr(Opcode.bisb3, rb,rb,wb), 
 /* 8A */ Instr(Opcode.bicb2, rb,rb), 
 /* 8B */ Instr(Opcode.bicb3, rb,rb,wb), 
 /* 8C */ Instr(Opcode.xorb2, rb,wb),  
 /* 8D */ Instr(Opcode.xorb3, rb,rb,wb),  
 /* 8E */ Instr(Opcode.mnegb, rb,wb), 
 /* 8F */ Instr(Opcode.caseb, InstrClass.Transfer, rb,rb,rb),

 /* 90 */ Instr(Opcode.movb,  rb,wb), 
 /* 91 */ Instr(Opcode.cmpb,  rb,rb), 
 /* 92 */ Instr(Opcode.mcomb,  rb,wb), 
 /* 93 */ Instr(Opcode.bitb,  rb,rb), 
 /* 94 */ Instr(Opcode.clrb,  wb), 
 /* 95 */ Instr(Opcode.tstb,  rb), 
 /* 96 */ Instr(Opcode.incb,  wb), 
 /* 97 */ Instr(Opcode.decb,  wb), 
 /* 98 */ Instr(Opcode.cvtbl, rb,wl), 
 /* 99 */ Instr(Opcode.cvtbw, rb,ww), 
 /* 9A */ Instr(Opcode.movzbl, rb,wl), 
 /* 9B */ Instr(Opcode.movzbw, rb,ww),
 /* 9C */ Instr(Opcode.rotl,  rb,rl,wl),
 /* 9D */ Instr(Opcode.acbb,  InstrClass.ConditionalTransfer, rb,rb,mb,bw), 
 /* 9E */ Instr(Opcode.movab,  ab,wl), 
 /* 9F */ Instr(Opcode.pushab, ab), 

 /* A0 */ Instr(Opcode.addw2, rw,ww), 
 /* A1 */ Instr(Opcode.addw3, rw,rw,ww), 
 /* A2 */ Instr(Opcode.subw2, rw,ww), 
 /* A3 */ Instr(Opcode.subw3, rw,rw,ww), 
 /* A4 */ Instr(Opcode.mulw2, rw,ww), 
 /* A5 */ Instr(Opcode.mulw3, rw,rw,ww), 
 /* A6 */ Instr(Opcode.divw2, rw,ww), 
 /* A7 */ Instr(Opcode.divw3, rw,rw,ww), 
 /* A8 */ Instr(Opcode.bisw2, rw,ww), 
 /* A9 */ Instr(Opcode.bisw3, rw,rw,ww), 
 /* AA */ Instr(Opcode.bicw2, rw,ww), 
 /* AB */ Instr(Opcode.bicw3, rw,rw,ww), 
 /* AC */ Instr(Opcode.xorw2, rw,ww), 
 /* AD */ Instr(Opcode.xorw3, rw,rw,ww), 
 /* AE */ Instr(Opcode.mnegw, rw,ww),
 /* AF */ Instr(Opcode.casew, InstrClass.Transfer, rw,rw,rw), 

 /* B0 */ Instr(Opcode.movw, rw,ww), 
 /* B1 */ Instr(Opcode.cmpw, rw,rw),
 /* B2 */ Instr(Opcode.mcomw, rw,ww), 
 /* B3 */ Instr(Opcode.bitw, rw,rw),
 /* B4 */ Instr(Opcode.clrw,  ww), 
 /* B5 */ Instr(Opcode.tstw,  rw), 
 /* B6 */ Instr(Opcode.incw,  ww), 
 /* B7 */ Instr(Opcode.decw,  ww), 
 /* B8 */ Instr(Opcode.bispsw, rw), 
 /* B9 */ Instr(Opcode.bicpsw, rw), 
 /* BA */ Instr(Opcode.popr,  -1), 
 /* BB */ Instr(Opcode.pushr,  -1), 
 /* BC */ Instr(Opcode.chmk,  rw), 
 /* BD */ Instr(Opcode.chme,  rw), 
 /* BE */ Instr(Opcode.chms,  rw), 
 /* BF */ Instr(Opcode.chmu,  rw),
        
 /* C0 */ Instr(Opcode.addl2, rl,wl), 
 /* C1 */ Instr(Opcode.addl3, rl,rl,wl), 
 /* C2 */ Instr(Opcode.subl2, rl,wl),
 /* C3 */ Instr(Opcode.subl3, rl,rl,wl),
 /* C4 */ Instr(Opcode.mull2, rl,wl), 
 /* C5 */ Instr(Opcode.mull3, rl,rl,wl), 
 /* C6 */ Instr(Opcode.divl2, rl,wl),
 /* C7 */ Instr(Opcode.divl3, rl,rl,wl),
 /* C8 */ Instr(Opcode.bisl2, rl,wl),
 /* C9 */ Instr(Opcode.bisl3, rl,rl,wl),
 /* CA */ Instr(Opcode.bicl2, rl,wl),
 /* CB */ Instr(Opcode.bicl3, rl,rl,wl),
 /* CC */ Instr(Opcode.xorl2, rl,wl), 
 /* CD */ Instr(Opcode.xorl3, rl,rl,wl),
 /* CE */ Instr(Opcode.mnegl, rl,wl),
 /* CF */ Instr(Opcode.casel, InstrClass.Transfer, rl,rl,rl),
              
 /* D0 */ Instr(Opcode.movl, rl,wl), 
 /* D1 */ Instr(Opcode.cmpl, rl,rl), 
 /* D2 */ Instr(Opcode.mcoml, rl,wl),
 /* D3 */ Instr(Opcode.bitl, rl,rl),
 /* D4 */ Instr(Opcode.clrl, wl), //  clrf,  -1), 
 /* D5 */ Instr(Opcode.tstl, rl), 
 /* D6 */ Instr(Opcode.incl, wl), 
 /* D7 */ Instr(Opcode.decl, wl), 
 /* D8 */ Instr(Opcode.adwc, rl,wl),
 /* D9 */ Instr(Opcode.sbwc, rl,ml), 
 /* DA */ Instr(Opcode.mtpr,  -1), 
 /* DB */ Instr(Opcode.mfpr, rl,wl), 
 /* DC */ Instr(Opcode.movpsl,  -1), 
 /* DD */ Instr(Opcode.pushl, rl), 
 /* DE */ Instr(Opcode.moval, al,wl), // mova,  -1), 
 /* DF */ Instr(Opcode.pushal, al), // pushaf,  -1), 

 /* E0 */ Instr(Opcode.bbs, InstrClass.ConditionalTransfer, rl,vb,bb), 
 /* E1 */ Instr(Opcode.bbc, InstrClass.ConditionalTransfer, rl,vb,bb), 
 /* E2 */ Instr(Opcode.bbss, InstrClass.ConditionalTransfer, rl,vb,bb), 
 /* E3 */ Instr(Opcode.bbcs, InstrClass.ConditionalTransfer, rl,vb,bb), 
 /* E4 */ Instr(Opcode.bbsc, InstrClass.ConditionalTransfer, rl,vb,bb),
 /* E5 */ Instr(Opcode.bbcc, InstrClass.ConditionalTransfer, rl,vb,bb),
 /* E6 */ Instr(Opcode.bbssi, InstrClass.ConditionalTransfer, rl,vb,bb), 
 /* E7 */ Instr(Opcode.bbcci, InstrClass.ConditionalTransfer, rl,vb,bb),
 /* E8 */ Instr(Opcode.blbs,  InstrClass.ConditionalTransfer, rl,bb), 
 /* E9 */ Instr(Opcode.blbc,  InstrClass.ConditionalTransfer, rl,bb), 
 /* EA */ Instr(Opcode.ffs,  rl,rb,vb,wl), 
 /* EB */ Instr(Opcode.ffc,  rl,rb,vb,wl), 
 /* EC */ Instr(Opcode.cmpv,  -1), 
 /* ED */ Instr(Opcode.cmpzv,  -1), 
 /* EE */ Instr(Opcode.extv,  rl,rb,vb,wl),
 /* EF */ Instr(Opcode.extzv, rl,rb,vb,wl),

 /* F0 */ Instr(Opcode.insv,  rl,rl,rb,vb), 
 /* F1 */ Instr(Opcode.acbl,   InstrClass.ConditionalTransfer, rl,rl,ml,bw),
 /* F2 */ Instr(Opcode.aoblss, InstrClass.ConditionalTransfer, rl,ml,bb), 
 /* F3 */ Instr(Opcode.aobleq, InstrClass.ConditionalTransfer, rl,ml,bb), 
 /* F4 */ Instr(Opcode.sobgeq, InstrClass.ConditionalTransfer, ml,bb), 
 /* F5 */ Instr(Opcode.sobgtr, InstrClass.ConditionalTransfer, ml,bb), 
 /* F6 */ Instr(Opcode.cvtlb, rl,wb), 
 /* F7 */ Instr(Opcode.cvtlw, rl,ww), 
 /* F8 */ Instr(Opcode.ashp,  rb,rw,ab,rb,rw,ab),
 /* F9 */ Instr(Opcode.cvtlp, rl,rw,ab), 
 /* FA */ Instr(Opcode.callg, InstrClass.Transfer|InstrClass.Call, ab,ab), 
 /* FB */ Instr(Opcode.calls, InstrClass.Transfer|InstrClass.Call, ab,ab), 
 /* FC */ Instr(Opcode.xfc,  -1), 
 /* FD */ Instr(Opcode.Invalid), // escd to Digital,  -1), 
 /* FE */ Instr(Opcode.Invalid), // esce to Digital,  -1), 
 /* FF */ Instr(Opcode.Invalid), // escf to Digital,  -1), 

            };
    }
}