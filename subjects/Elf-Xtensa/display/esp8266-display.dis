// DebugExceptionVector
// Return size: 0
void DebugExceptionVector()
DebugExceptionVector_entry:
	// succ:  l40100010
l40100010:
	a1 = fp
	EXCSAVE2 = a0
	a2 = a1
	a3 = 0
	a1 = a1 | a1
	a0 = 0x4010001D
	call fatal_exception_handler (retsize: 0;)
	return
	// succ:  DebugExceptionVector_exit
DebugExceptionVector_exit:


// NMIExceptionVector
// Return size: 0
void NMIExceptionVector()
NMIExceptionVector_entry:
	// succ:  l40100020
l40100020:
	a1 = fp
	// succ:  l40100020_thunk_NMIExceptionHandler
l40100020_thunk_NMIExceptionHandler:
	call NMIExceptionHandler (retsize: 0;)
	return
	// succ:  NMIExceptionVector_exit
NMIExceptionVector_exit:


// KernelExceptionVector
// Return size: 0
void KernelExceptionVector()
KernelExceptionVector_entry:
	// succ:  l40100030
l40100030:
	a1 = fp
	__break(0x01, 0x00)
	a2 = a1
	a3 = 0
	a1 = a1 | a1
	a0 = 0x4010003D
	call fatal_exception_handler (retsize: 0;)
	return
	// succ:  KernelExceptionVector_exit
KernelExceptionVector_exit:


// UserExceptionVector
// Return size: 0
void UserExceptionVector()
UserExceptionVector_entry:
UserExceptionVector_exit:


// DoubleExceptionVector
// Return size: 0
void DoubleExceptionVector()
DoubleExceptionVector_entry:
	// succ:  l40100070
l40100070:
	a1 = fp
	__break(0x01, 0x04)
	a2 = a1
	a3 = 0
	a1 = a1 | a1
	a0 = 0x4010007D
	call fatal_exception_handler (retsize: 0;)
	__ill()
DoubleExceptionVector_exit:


// LoadStoreErrorHandler
// Return size: 0
void LoadStoreErrorHandler()
LoadStoreErrorHandler_entry:
	// succ:  l40100098
l40100098:
	a1 = fp
	a1 = 0x40100080
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a2
	Mem0[a1 + 0x0000000C:word32] = a3
	Mem0[a1 + 0x00000010:word32] = a4
LoadStoreErrorHandler_exit:


// call_user_start
// Return size: 0
void call_user_start()
call_user_start_entry:
	// succ:  l40100214
l40100214:
	a1 = fp
	a2 = 0x4010020C
	VECBASE = a2
	a1 = a1 | a1
	a0 = 0x40100220
	call sdk_user_start (retsize: 0;)
	__reserved()
	__reserved()
	__reserved()
	a11 = a10 + a11
	a0 = a0 + 10
	__ill()
call_user_start_exit:


// NMIExceptionHandler
// Return size: 0
void NMIExceptionHandler()
NMIExceptionHandler_entry:
	// succ:  l40100250
l40100250:
	a1 = fp
	EXCSAVE3 = a1
	a1 = 0x40100220
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a2
	Mem0[a1 + 0x00000008:word32] = a3
	Mem0[a1 + 0x0000000C:word32] = a4
	Mem0[a1 + 0x00000010:word32] = a5
	Mem0[a1 + 0x00000014:word32] = a6
	Mem0[a1 + 0x00000018:word32] = a7
	Mem0[a1 + 0x0000001C:word32] = a8
	Mem0[a1 + 0x00000020:word32] = a9
	Mem0[a1 + 0x00000024:word32] = a10
	Mem0[a1 + 0x00000028:word32] = a11
	a0 = EPC1
	Mem0[a1 + 0x0000002C:word32] = a0
	a0 = EXCCAUSE
	Mem0[a1 + 0x00000030:word32] = a0
NMIExceptionHandler_exit:


// UserExceptionHandler
// Return size: 0
void UserExceptionHandler()
UserExceptionHandler_entry:
UserExceptionHandler_exit:


// _xt_user_exit
// Return size: 0
void _xt_user_exit()
_xt_user_exit_entry:
	// succ:  l40100376
l40100376:
	a1 = fp
	a0 = Mem0[a1 + 0x00000008:word32]
_xt_user_exit_exit:


// prvAddCurrentTaskToDelayedList
// Return size: 0
void prvAddCurrentTaskToDelayedList()
prvAddCurrentTaskToDelayedList_entry:
	// succ:  l401003A0
l401003A0:
	a1 = fp
	a1 = a1 - 16
	a3 = 0x4010038C
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2
	a2 = 0x40100390
	a4 = Mem0[a3 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a4 + 0x00000004:word32] = a12
	branch a12 >=u a2 l401003D4
	// succ:  l401003BE l401003D4
l401003BE:
	a2 = 0x40100394
	a2 = Mem0[a2 + 0x00000000:word32]
	a3 = Mem0[a3 + 0x00000000:word32]
	a3 = a3 + 4
	a0 = 0x401003D0
	call vListInsert (retsize: 0;)
	goto l401003F9
	// succ:  l401003F9
l401003D4:
	a2 = 0x40100398
	a2 = Mem0[a2 + 0x00000000:word32]
	a3 = Mem0[a3 + 0x00000000:word32]
	a3 = a3 + 4
	a0 = 0x401003E9
	call vListInsert (retsize: 0;)
	a2 = 0x4010039C
	a3 = Mem0[a2 + 0x00000000:word32]
	branch a12 >=u a3 l401003F9
	// succ:  l401003F4 l401003F9
l401003F4:
	Mem0[a2:word32] = a12
	// succ:  l401003F9
l401003F9:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  prvAddCurrentTaskToDelayedList_exit
prvAddCurrentTaskToDelayedList_exit:


// vTaskSuspendAll
// Return size: 0
void vTaskSuspendAll()
vTaskSuspendAll_entry:
	// succ:  l40100408
l40100408:
	a1 = fp
	a2 = 0x40100404
	a3 = Mem0[a2 + 0x00000000:word32]
	a3 = a3 + 1
	Mem0[a2:word32] = a3
	return
	// succ:  vTaskSuspendAll_exit
vTaskSuspendAll_exit:


// xTaskIncrementTick
// Return size: 0
void xTaskIncrementTick()
xTaskIncrementTick_entry:
	// succ:  l4010042C
l4010042C:
	a1 = fp
	a2 = 0x40100404
	a1 = a1 - 48
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	branch a2 != 0x00000000 l40100541
	// succ:  l40100444 l40100541
l40100444:
	a2 = 0x40100390
	a3 = Mem0[a2 + 0x00000000:word32]
	a3 = a3 + 1
	Mem0[a2:word32] = a3
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1:word32] = a2
	branch a2 != 0x00000000 l40100494
	// succ:  l4010045C l40100494
l4010045C:
	a2 = 0x40100398
	a4 = 0x40100394
	a5 = Mem0[a2 + 0x00000000:word32]
	a6 = Mem0[a4 + 0x00000000:word32]
	a3 = 0x4010041C
	Mem0[a2:word32] = a6
	Mem0[a4:word32] = a5
	a4 = Mem0[a3 + 0x00000000:word32]
	a4 = a4 + 1
	Mem0[a3:word32] = a4
	a3 = Mem0[a2 + 0x00000000:word32]
	a3 = Mem0[a3 + 0x00000000:word32]
	branch a3 == 0x00000000 l4010055C
	// succ:  l4010048F l4010055C
l4010048F:
	goto l40100569
	// succ:  l40100569
l40100494:
	a3 = 0x4010039C
	a4 = Mem0[a1 + 0x00000000:word32]
	a2 = Mem0[a3 + 0x00000000:word32]
	branch a4 <u a2 l4010051C
	// succ:  l401004A1 l4010051C
l401004A1:
	a4 = 0x40100424
	a13 = 0
	Mem0[a1 + 0x00000004:word32] = a4
	a4 = 0x4010038C
	a12 = 0x40100398
	Mem0[a1 + 0x00000008:word32] = a4
	// succ:  l401004B6
l401004B6:
	a2 = Mem0[a12 + 0x00000000:word32]
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 != 0x00000000 l4010058C
	// succ:  l401004C0 l4010058C
l401004C0:
	goto l4010057F
	// succ:  l4010057F
l4010051C:
	a4 = 0x40100424
	a13 = 0
	Mem0[a1 + 0x00000004:word32] = a4
	a4 = 0x4010038C
	Mem0[a1 + 0x00000008:word32] = a4
	a4 = Mem0[a1 + 0x00000008:word32]
	a2 = Mem0[a4 + 0x00000000:word32]
	a4 = Mem0[a1 + 0x00000004:word32]
	a2 = Mem0[a2 + 0x0000002C:word32]
	a2 = a2 + a2 * 0x00000004
	a2 = a4 + a2 * 0x00000004
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 >=u 0x00000002 l40100555
	// succ:  l4010053E l40100555
l4010053E:
	goto l401005A6
	// succ:  l401005A6
l40100541:
	a2 = 0x40100428
	a13 = 0
	a3 = Mem0[a2 + 0x00000000:word32]
	a3 = a3 + 1
	Mem0[a2:word32] = a3
	goto l401005A6
	// succ:  l401005A6
l40100555:
	a13 = 1
	goto l401005A6
	// succ:  l401005A6
l4010055C:
	a3 = 0x4010039C
	a2 = -1
	Mem0[a3:word32] = a2
	goto l40140494
	// succ:  l40140494
l40100569:
	a2 = Mem0[a2 + 0x00000000:word32]
	a4 = 0x4010039C
	a2 = Mem0[a2 + 0x0000000C:word32]
	a2 = Mem0[a2 + 0x0000000C:word32]
	a2 = Mem0[a2 + 0x00000004:word32]
	Mem0[a4:word32] = a2
l4010057F:
	a3 = 0x4010039C
	a2 = -1
	Mem0[a3:word32] = a2
	goto l40140528
	// succ:  l40140528
l4010058C:
	a2 = Mem0[a12 + 0x00000000:word32]
	a4 = Mem0[a1 + 0x00000000:word32]
	a2 = Mem0[a2 + 0x0000000C:word32]
	a14 = Mem0[a2 + 0x0000000C:word32]
	a5 = Mem0[a14 + 0x00000004:word32]
	a15 = a14 + 4
	a2 = a15
	branch a4 <u a5 l401005A3
	// succ:  l401005A0 l401005A3
l401005A0:
	goto l401404D1
	// succ:  l401404D1
l401005A3:
	goto l401404C6
	// succ:  l401404C6
l401005A6:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  xTaskIncrementTick_exit
l40140494:
l401404C6:
l401404D1:
l40140528:
xTaskIncrementTick_exit:


// xTaskResumeAll
// Return size: 0
void xTaskResumeAll()
xTaskResumeAll_entry:
	// succ:  l401005C4
l401005C4:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	a0 = 0x401005D4
	call vPortEnterCritical (retsize: 0;)
	a2 = 0x40100404
	a3 = Mem0[a2 + 0x00000000:word32]
	a3 = a3 - 1
	Mem0[a2:word32] = a3
	a13 = Mem0[a2 + 0x00000000:word32]
	branch a13 == 0x00000000 l401005F0
	// succ:  l401005EA l401005F0
l401005EA:
	a12 = 0
	goto l4010069B
	// succ:  l4010069B
l401005F0:
	a2 = 0x401005B8
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 == 0x00000000 l401005EA
	// succ:  l401005FB l401005EA
l401005FB:
	a15 = 0x401005BC
	a14 = 0x40100420
	goto l40100649
	// succ:  l40100649
l40100605:
	a2 = Mem0[a15 + 0x0000000C:word32]
	a12 = Mem0[a2 + 0x0000000C:word32]
	a2 = a12 + 24
	a0 = 0x40100611
	call uxListRemove (retsize: 0;)
	a3 = a12 + 4
	a2 = a3
	Mem0[a1:word32] = a3
	a0 = 0x4010061A
	call uxListRemove (retsize: 0;)
	a4 = Mem0[a12 + 0x0000002C:word32]
	a5 = 0x40100424
	a6 = Mem0[a14 + 0x00000000:word32]
	a2 = a4 + a4 * 0x00000004
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = a5 + a2 * 0x00000004
	branch a6 >=u a4 l40100635
	// succ:  l4010062F l40100635
l4010062F:
	Mem0[a14:word32] = a4
	// succ:  l40100635
l40100635:
	a0 = 0x40100638
	call vListInsertEnd (retsize: 0;)
	a2 = 0x4010038C
	a3 = Mem0[a12 + 0x0000002C:word32]
	a2 = Mem0[a2 + 0x00000000:word32]
	a2 = Mem0[a2 + 0x0000002C:word32]
	branch a3 <u a2 l40100649
	// succ:  l40100647 l40100649
l40100647:
	a13 = 1
	// succ:  l40100649
l40100649:
	a2 = Mem0[a15 + 0x00000000:word32]
	branch a2 != 0x00000000 l40100605
	// succ:  l4010064E l40100605
l4010064E:
	a12 = 0x40100428
	a2 = Mem0[a12 + 0x00000000:word32]
	branch a2 == 0x00000000 l4010067C
	// succ:  l40100658 l4010067C
l40100658:
	a2 = Mem0[a12 + 0x00000000:word32]
	branch a2 == 0x00000000 l4010067C
	// succ:  l4010065F l4010067C
l4010065F:
	a14 = 1
	// succ:  l40100661
l40100661:
	a0 = 0x40100664
	call fn4020042C (retsize: 0;)
	a3 = Mem0[a12 + 0x00000000:word32]
	branch a2 == 0x00000000 l4010066C
	// succ:  l40100669_1 l4010066C
l40100669_1:
	a13 = a14
	// succ:  l4010066C
l4010066C:
	a3 = a3 - 1
	Mem0[a12:word32] = a3
	a2 = Mem0[a12 + 0x00000000:word32]
	branch a2 != 0x00000000 l40100661
	// succ:  l4010067C l40100661
l4010067C:
	a3 = 0x401005C0
	branch a13 == 1 l4010068D
	// succ:  l40100682 l4010068D
l40100682:
	a2 = Mem0[a3 + 0x00000000:word32]
	branch a2 == 1 l4010068D
	// succ:  l4010068A l4010068D
l4010068A:
	goto l401405EA
	// succ:  l401405EA
l4010068D:
	a2 = 1
	a4 = 0
	Mem0[a3:word32] = a4
	a12 = a2
	a0 = 0x4010069B
	call PendSV (retsize: 0;)
	// succ:  l4010069B
l4010069B:
	a0 = 0x4010069E
	call _lock_release_recursive (retsize: 0;)
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a12
	a13 = Mem0[a1 + 0x00000024:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  xTaskResumeAll_exit
l401405EA:
xTaskResumeAll_exit:


// vTaskPlaceOnEventList
// Return size: 0
void vTaskPlaceOnEventList()
vTaskPlaceOnEventList_entry:
	// succ:  l401006B4
l401006B4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = 0x4010038C
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = a3
	a3 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	a3 = a3 + 24
	a0 = 0x401006CE
	call vListInsert (retsize: 0;)
	a2 = Mem0[a12 + 0x00000000:word32]
	a2 = a2 + 4
	a0 = 0x401006D8
	call uxListRemove (retsize: 0;)
	branch a13 != -1 l401006EC
	// succ:  l401006DB l401006EC
l401006DB:
	a3 = Mem0[a12 + 0x00000000:word32]
	a2 = 0x401006B0
	a3 = a3 + 4
	a0 = 0x401006E8
	call vListInsertEnd (retsize: 0;)
	goto l401006F9
	// succ:  l401006F9
l401006EC:
	a2 = 0x40100390
	a2 = Mem0[a2 + 0x00000000:word32]
	a2 = a13 + a2
	a0 = 0x401006F9
	call fn402003A0 (retsize: 0;)
	// succ:  l401006F9
l401006F9:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  vTaskPlaceOnEventList_exit
vTaskPlaceOnEventList_exit:


// xTaskRemoveFromEventList
// Return size: 0
void xTaskRemoveFromEventList()
xTaskRemoveFromEventList_entry:
	// succ:  l40100704
l40100704:
	a1 = fp
	a2 = Mem0[a2 + 0x0000000C:word32]
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = Mem0[a2 + 0x0000000C:word32]
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = a12 + 24
	a2 = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40100719
	call uxListRemove (retsize: 0;)
	a2 = 0x40100404
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 != 0x00000000 l4010074D
	// succ:  l40100723 l4010074D
l40100723:
	a13 = a12 + 4
	a2 = a13
	a0 = 0x4010072A
	call uxListRemove (retsize: 0;)
	a2 = 0x40100420
	a4 = Mem0[a12 + 0x0000002C:word32]
	a3 = Mem0[a2 + 0x00000000:word32]
	branch a3 >=u a4 l4010073C
	// succ:  l40100737 l4010073C
l40100737:
	Mem0[a2:word32] = a4
	// succ:  l4010073C
l4010073C:
	a2 = 0x40100424
	a4 = a4 + a4 * 0x00000004
	a2 = a2 + a4 * 0x00000004
	a3 = a13
	a0 = 0x4010074A
	call vListInsertEnd (retsize: 0;)
	goto l40100755
	// succ:  l40100755
l4010074D:
	a2 = 0x401005BC
	a3 = a13
	a0 = 0x40100755
	call vListInsertEnd (retsize: 0;)
	// succ:  l40100755
l40100755:
	a2 = 0x4010038C
	a4 = Mem0[a12 + 0x0000002C:word32]
	a3 = Mem0[a2 + 0x00000000:word32]
	a2 = 1
	a3 = Mem0[a3 + 0x0000002C:word32]
	branch a4 >=u a3 l40100768
	// succ:  l40100766 l40100768
l40100766:
	a2 = 0
	// succ:  l40100768
l40100768:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  xTaskRemoveFromEventList_exit
xTaskRemoveFromEventList_exit:


// vTaskSetTimeOutState
// Return size: 0
void vTaskSetTimeOutState()
vTaskSetTimeOutState_entry:
	// succ:  l40100774
l40100774:
	a1 = fp
	a3 = 0x4010041C
	a4 = Mem0[a3 + 0x00000000:word32]
	a3 = 0x40100390
	Mem0[a2:word32] = a4
	a3 = Mem0[a3 + 0x00000000:word32]
	Mem0[a2 + 0x00000004:word32] = a3
	return
	// succ:  vTaskSetTimeOutState_exit
vTaskSetTimeOutState_exit:


// xTaskCheckForTimeOut
// Return size: 0
void xTaskCheckForTimeOut()
xTaskCheckForTimeOut_entry:
	// succ:  l4010078C
l4010078C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1:word32] = a14
	a12 = a2 | a2
	a14 = a3
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a13
	a0 = 0x401007A1
	call vPortEnterCritical (retsize: 0;)
	a3 = 0x40100390
	a4 = Mem0[a14 + 0x00000000:word32]
	a2 = Mem0[a3 + 0x00000000:word32]
	branch a4 == -1 l401007EA
	// succ:  l401007AE l401007EA
l401007AE:
	a5 = 0x4010041C
	a7 = Mem0[a12 + 0x00000000:word32]
	a6 = Mem0[a5 + 0x00000000:word32]
	branch a7 != a6 l401007C0
	// succ:  l401007BB l401007C0
l401007BB:
	a6 = Mem0[a12 + 0x00000004:word32]
	goto l401007C7
	// succ:  l401007C7
l401007C0:
	a6 = Mem0[a12 + 0x00000004:word32]
	a13 = 1
	branch a2 >=u a6 l401007ED
	// succ:  l401007C7 l401007ED
l401007C7:
	a7 = a2 - a6
	a13 = 1
	branch a7 >=u a4 l401007ED
	a7 = a2 - a6
	a13 = 1
	branch a7 >=u a4 l401007ED
	// succ:  l401007CF l401007ED
l401007CF:
	a4 = a4 - a2
	a5 = Mem0[a5 + 0x00000000:word32]
	a6 = a4 + a6
	a3 = Mem0[a3 + 0x00000000:word32]
	Mem0[a14:word32] = a6
	Mem0[a12:word32] = a5
	Mem0[a12 + 0x00000004:word32] = a3
	a13 = 0
	a4 = a4 - a2
	a5 = Mem0[a5 + 0x00000000:word32]
	a6 = a4 + a6
	a3 = Mem0[a3 + 0x00000000:word32]
	Mem0[a14:word32] = a6
	Mem0[a12:word32] = a5
	Mem0[a12 + 0x00000004:word32] = a3
	a13 = 0
	goto l401007ED
	// succ:  l401007ED
l401007EA:
	a13 = 0x00000000
	// succ:  l401007ED
l401007ED:
	a0 = 0x401007F0
	call _lock_release_recursive (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a13 | a13
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  xTaskCheckForTimeOut_exit
xTaskCheckForTimeOut_exit:


// vTaskMissedYield
// Return size: 0
void vTaskMissedYield()
vTaskMissedYield_entry:
	// succ:  l40100804
l40100804:
	a1 = fp
	a2 = 0x401005C0
	a3 = 1
	Mem0[a2:word32] = a3
	return
	// succ:  vTaskMissedYield_exit
vTaskMissedYield_exit:


// vTaskPriorityDisinherit
// Return size: 0
void vTaskPriorityDisinherit()
vTaskPriorityDisinherit_entry:
	// succ:  l40100810
l40100810:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a13
	a12 = a2
	branch a2 == 0x00000000 l40100856
	// succ:  l4010081D l40100856
l4010081D:
	a3 = Mem0[a2 + 0x0000002C:word32]
	a2 = Mem0[a2 + 0x00000044:word32]
	branch a3 == a2 l40100856
	// succ:  l40100825 l40100856
l40100825:
	a13 = a12 + 4
	a2 = a13
	a0 = 0x4010082C
	call uxListRemove (retsize: 0;)
	a4 = Mem0[a12 + 0x00000044:word32]
	a2 = 0x40100420
	a5 = 15
	a5 = a5 - a4
	a3 = Mem0[a2 + 0x00000000:word32]
	Mem0[a12 + 0x0000002C:word32] = a4
	Mem0[a12 + 0x00000018:word32] = a5
	branch a3 >=u a4 l40100848
	// succ:  l40100843 l40100848
l40100843:
	Mem0[a2:word32] = a4
	// succ:  l40100848
l40100848:
	a2 = 0x40100424
	a4 = a4 + a4 * 0x00000004
	a2 = a2 + a4 * 0x00000004
	a3 = a13
	a0 = 0x40100856
	call vListInsertEnd (retsize: 0;)
	// succ:  l40100856
l40100856:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  vTaskPriorityDisinherit_exit
vTaskPriorityDisinherit_exit:


// SV_ISR
// Return size: 0
void SV_ISR()
SV_ISR_entry:
	// succ:  l4010086C
l4010086C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = 0x40100864
	Mem0[a1 + 0x0000000C:word32] = a0
	a2 = Mem0[a12 + 0x00000000:word32]
	branch a2 != 0x00000000 l40100888
	// succ:  l4010087C l40100888
l4010087C:
	a12 = 0x40100868
	a2 = Mem0[a12 + 0x00000000:word32]
	branch a2 != 0x00000000 l40100895
	// succ:  l40100883 l40100895
l40100883:
	goto l4010089D
	// succ:  l4010089D
l40100888:
	a0 = 0x4010088B
	call sdk_MacIsrSigPostDefHdl (retsize: 0;)
	a3 = 0
	Mem0[a12:word32] = a3
	branch a2 == a3 l4010087C
	// succ:  l40100892 l4010087C
l40100892:
	a12 = 0x40100868
	// succ:  l40100895
l40100895:
	a0 = 0x40100898
	call sdk__xt_timer_int1 (retsize: 0;)
	a2 = 0
	Mem0[a12:word32] = a2
	// succ:  l4010089D
l4010089D:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  SV_ISR_exit
SV_ISR_exit:


// vPortEnterCritical
// Return size: 0
void vPortEnterCritical()
vPortEnterCritical_entry:
	// succ:  l401008B8
l401008B8:
	a1 = fp
	a2 = 0x401008A8
	v4 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v4
	branch a2 != 0x00000000 l401008D5
	// succ:  l401008C0 l401008D5
l401008C0:
	a2 = 0x401008AC
	v6 = Mem0[a2 + 0x00000000:byte]
	a3 = (uint32) v6
	branch a3 != 0x00000000 l401008D5
	// succ:  l401008C8 l401008D5
l401008C8:
l401008D5:
	a2 = 0x401008B4
	a3 = Mem0[a2 + 0x00000000:word32]
	a3 = a3 + 1
	Mem0[a2:word32] = a3
	return
	// succ:  vPortEnterCritical_exit
vPortEnterCritical_exit:


// _lock_release_recursive
// Return size: 0
void _lock_release_recursive()
_lock_release_recursive_entry:
	// succ:  l401008E0
l401008E0:
	a1 = fp
	a3 = 0x401008B4
	a2 = Mem0[a3 + 0x00000000:word32]
	a2 = a2 - 1
	Mem0[a3:word32] = a2
	branch a2 != 0x00000000 l40100909
	// succ:  l401008EB l40100909
l401008EB:
	a2 = 0x401008A8
	v5 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v5
	branch a2 != 0x00000000 l40100909
	// succ:  l401008F3 l40100909
l401008F3:
	a3 = 0x401008AC
	v7 = Mem0[a3 + 0x00000000:byte]
	a4 = (uint32) v7
	branch a4 == 0x00000000 l40100909
	// succ:  l401008FB l40100909
l401008FB:
	Mem0[a3:byte] = a2
	a2 = 0x401008B0
	a2 = Mem0[a2 + 0x00000000:word32]
l40100909:
	return
	// succ:  _lock_release_recursive_exit
_lock_release_recursive_exit:


// PendSV
// Return size: 0
void PendSV()
PendSV_entry:
	// succ:  l4010090C
l4010090C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40100918
	call fn402008B8 (retsize: 0;)
	branch a12 != 1 l40100923
	// succ:  l4010091B l40100923
l4010091B:
	a2 = 0x40100868
	Mem0[a2:word32] = a12
	goto l4010092D
	// succ:  l4010092D
l40100923:
	branch a12 != 2 l4010092D
	// succ:  l40100926 l4010092D
l40100926:
	a2 = 0x40100864
	a3 = 1
	Mem0[a2:word32] = a3
	// succ:  l4010092D
l4010092D:
	a2 = 0x00000080
	a0 = 0x40100933
PendSV_exit:


// prvCopyDataToQueue
// Return size: 0
void prvCopyDataToQueue()
prvCopyDataToQueue_entry:
	// succ:  l40100944
l40100944:
	a1 = fp
	a1 = a1 - 16
	a5 = Mem0[a2 + 0x00000040:word32]
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a2
	a13 = a4
	branch a5 != 0x00000000 l40100965
	// succ:  l40100956 l40100965
l40100956:
	a13 = Mem0[a2 + 0x00000000:word32]
	branch a13 != 0x00000000 l401009BC
	// succ:  l4010095B l401009BC
l4010095B:
	a2 = Mem0[a2 + 0x00000004:word32]
	a0 = 0x40100960
	call fn40200810 (retsize: 0;)
	Mem0[a12 + 0x00000004:word32] = a13
	goto l401009BC
	// succ:  l401009BC
l40100965:
	branch a4 != 0x00000000 l40100986
	// succ:  l40100968 l40100986
l40100968:
	a2 = Mem0[a2 + 0x00000008:word32]
	a4 = a5 | a5
	a0 = 0x40100971
	call memcpy (retsize: 0;)
	a4 = Mem0[a12 + 0x00000008:word32]
	a2 = Mem0[a12 + 0x00000040:word32]
	a3 = Mem0[a12 + 0x00000004:word32]
	a2 = a4 + a2
	Mem0[a12 + 0x00000008:word32] = a2
	branch a2 <u a3 l401009BC
	// succ:  l4010097F l401009BC
l4010097F:
	a2 = Mem0[a12 + 0x00000000:word32]
	Mem0[a12 + 0x00000008:word32] = a2
	goto l401009BC
	// succ:  l401009BC
l40100986:
	a2 = Mem0[a2 + 0x0000000C:word32]
	a4 = a5
	a0 = 0x4010098D
	call memcpy (retsize: 0;)
	a3 = Mem0[a12 + 0x00000040:word32]
	a2 = Mem0[a12 + 0x0000000C:word32]
	a3 = -a3
	a2 = a2 + a3
	a4 = Mem0[a12 + 0x00000000:word32]
	Mem0[a12 + 0x0000000C:word32] = a2
	branch a2 >=u a4 l401009A4
	// succ:  l4010099E l401009A4
l4010099E:
	a2 = Mem0[a12 + 0x00000004:word32]
	a3 = a2 + a3
	Mem0[a12 + 0x0000000C:word32] = a3
	// succ:  l401009A4
l401009A4:
	branch a13 != 2 l401009BC
	// succ:  l401009A7 l401009BC
l401009A7:
	a2 = Mem0[a12 + 0x00000038:word32]
	branch a2 == 0x00000000 l401009BC
	// succ:  l401009AE l401009BC
l401009AE:
	a2 = Mem0[a12 + 0x00000038:word32]
	a2 = a2 - 1
	Mem0[a12 + 0x00000038:word32] = a2
	// succ:  l401009BC
l401009BC:
	a2 = Mem0[a12 + 0x00000038:word32]
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a2 + 1
	Mem0[a12 + 0x00000038:word32] = a2
	a13 = Mem0[a1 + 0x00000004:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  prvCopyDataToQueue_exit
prvCopyDataToQueue_exit:


// prvUnlockQueue
// Return size: 0
void prvUnlockQueue()
prvUnlockQueue_entry:
	// succ:  l401009D4
l401009D4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a2 | a2
	Mem0[a1 + 0x00000004:word32] = a13
	a0 = 0x401009E5
	call fn402008B8 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000048:word32]
	branch a2 >= 1 l40100A0A
	// succ:  l401009EE l40100A0A
l401009EE:
	a2 = -1
	Mem0[a12 + 0x00000048:word32] = a2
	a0 = 0x401009F9
	call fn402008E0 (retsize: 0;)
	a0 = 0x401009FC
	call fn402008B8 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000044:word32]
	branch a2 >= 1 l40100A59
	// succ:  l40100A05 l40100A59
l40100A05:
	goto l40100A40
	// succ:  l40100A40
l40100A0A:
	a2 = Mem0[a12 + 0x00000024:word32]
	branch a2 == 0x00000000 l401009EE
	// succ:  l40100A0F l401009EE
l40100A0F:
	a13 = a12 + 36
	goto l40100A1B
	// succ:  l40100A1B
l40100A15:
	a2 = Mem0[a12 + 0x00000024:word32]
	branch a2 == 0x00000000 l401009EE
	// succ:  l40100A1B l401009EE
l40100A1B:
	a2 = a13 | a13
	a0 = 0x40100A21
	call fn40200704 (retsize: 0;)
	branch a2 == 0x00000000 l40100A26
	a2 = a13 | a13
	a0 = 0x40100A21
	call fn40200704 (retsize: 0;)
	branch a2 == 0x00000000 l40100A26
	// succ:  l40100A23 l40100A26
l40100A23:
	a0 = 0x40100A26
	call fn40200804 (retsize: 0;)
	a0 = 0x40100A26
	call fn40200804 (retsize: 0;)
	// succ:  l40100A26
l40100A26:
	a3 = Mem0[a12 + 0x00000048:word32]
	a3 = a3 - 1
	Mem0[a12 + 0x00000048:word32] = a3
	a3 = Mem0[a12 + 0x00000048:word32]
	branch a3 >= 1 l40100A15
	// succ:  l40100A3D l40100A15
l40100A3D:
	goto l401409EE
	// succ:  l401409EE
l40100A40:
	a2 = 0xFFFFFFFF
	Mem0[a12 + 0x00000044:word32] = a2
	a0 = 0x40100A4C
	call fn402008E0 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  prvUnlockQueue_exit
l40100A59:
	a2 = Mem0[a12 + 0x00000010:word32]
	branch a2 == 0x00000000 l40100A40
	// succ:  l40100A5E l40100A40
l40100A5E:
	a13 = a12 + 16
	goto l40100A6A
	// succ:  l40100A6A
l40100A64:
	a2 = Mem0[a12 + 0x00000010:word32]
	branch a2 == 0x00000000 l40100A40
	// succ:  l40100A6A l40100A40
l40100A6A:
	a2 = a13 | a13
	a0 = 0x40100A70
	call fn40200704 (retsize: 0;)
	branch a2 == 0x00000000 l40100A75
	a2 = a13 | a13
	a0 = 0x40100A70
	call fn40200704 (retsize: 0;)
	branch a2 == 0x00000000 l40100A75
	// succ:  l40100A72 l40100A75
l40100A72:
	a0 = 0x40100A75
	call fn40200804 (retsize: 0;)
	a0 = 0x40100A75
	call fn40200804 (retsize: 0;)
	// succ:  l40100A75
l40100A75:
	a3 = Mem0[a12 + 0x00000044:word32]
	a3 = a3 - 1
	Mem0[a12 + 0x00000044:word32] = a3
	a3 = Mem0[a12 + 0x00000044:word32]
	branch a3 >= 1 l40100A64
	// succ:  l40100A8C l40100A64
l40100A8C:
	goto l40140A40
	// succ:  l40140A40
l401409EE:
l40140A40:
prvUnlockQueue_exit:


// xQueueGenericSend
// Return size: 0
void xQueueGenericSend()
xQueueGenericSend_entry:
	// succ:  l40100A90
l40100A90:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x0000002C:word32] = a15
	a15 = 0
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000003C:word32] = a0
	a12 = a2
	Mem0[a1 + 0x00000014:word32] = a3
	Mem0[a1 + 0x00000010:word32] = a4
	a13 = a5
	a14 = a15
	goto l40100AAF
	// succ:  l40100AAF
l40100AAC:
	a15 = 0x00000001
	// succ:  l40100AAF
l40100AAF:
	a0 = 0x40100AB2
	call fn402008B8 (retsize: 0;)
	a3 = Mem0[a12 + 0x00000038:word32]
	a2 = Mem0[a12 + 0x0000003C:word32]
	branch a3 <u a2 l40100AC1
	// succ:  l40100ABE l40100AC1
l40100ABE:
	branch a13 != 2 l40100AE8
	// succ:  l40100AC1 l40100AE8
l40100AC1:
	a3 = Mem0[a1 + 0x00000014:word32]
	a2 = a12 | a12
	a4 = a13
	a0 = 0x40100ACC
	call fn40200944 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000024:word32]
	branch a2 == 0x00000000 l40100ADD
	// succ:  l40100AD1 l40100ADD
l40100AD1:
	a2 = a12 + 36
	a0 = 0x40100AD7
	call fn40200704 (retsize: 0;)
	branch a2 != 1 l40100ADD
	// succ:  l40100ADA l40100ADD
l40100ADA:
	a0 = 0x40100ADD
	call fn4020090C (retsize: 0;)
	// succ:  l40100ADD
l40100ADD:
	a0 = 0x40100AE0
	call fn402008E0 (retsize: 0;)
	a2 = 1
	goto l40100B96
	// succ:  l40100B96
l40100AE8:
	a2 = Mem0[a1 + 0x00000010:word32]
	branch a2 != 0x00000000 l40100AFA
	// succ:  l40100AEE l40100AFA
l40100AEE:
	Mem0[a1 + 0x00000018:word32] = a2
	a0 = 0x40100AF4
	call fn402008E0 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000018:word32]
	goto l40100B96
	// succ:  l40100B96
l40100AFA:
	branch a15 != 0x00000000 l40100B04
	// succ:  l40100AFC l40100B04
l40100AFC:
	a2 = a1
	a1 = a1 | a1
	a0 = 0x40100B04
	call fn40200774 (retsize: 0;)
	// succ:  l40100B04
l40100B04:
	a1 = a1 | a1
	a0 = 0x40100B0A
	call fn402008E0 (retsize: 0;)
	a1 = a1 | a1
	a0 = 0x40100B10
	call fn40200408 (retsize: 0;)
	a1 = a1 | a1
	a0 = 0x40100B16
	call fn402008B8 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000044:word32]
	branch a2 != -1 l40100B25
	// succ:  l40100B1F l40100B25
l40100B1F:
	Mem0[a12 + 0x00000044:word32] = a14
	// succ:  l40100B25
l40100B25:
	a2 = Mem0[a12 + 0x00000048:word32]
	branch a2 != -1 l40100B34
	// succ:  l40100B2E l40100B34
l40100B2E:
	Mem0[a12 + 0x00000048:word32] = a14
	// succ:  l40100B34
l40100B34:
	a0 = 0x40100B37
	call fn402008E0 (retsize: 0;)
	a2 = a1 | a1
	a3 = a1 + 16
	a0 = 0x40100B40
	call fn4020078C (retsize: 0;)
	branch a2 != 0x00000000 l40100B5C
	// succ:  l40100B42 l40100B5C
l40100B42:
	a0 = 0x40100B45
	call fn402008B8 (retsize: 0;)
	a3 = Mem0[a12 + 0x00000038:word32]
	a2 = Mem0[a12 + 0x0000003C:word32]
	branch a3 != a2 l40100B86
	// succ:  l40100B4F l40100B86
l40100B4F:
	goto l40100B6C
	// succ:  l40100B6C
l40100B5C:
	a2 = a12
	a0 = 0x40100B61
	call fn402009D4 (retsize: 0;)
	a0 = 0x40100B64
	call fn402005C4 (retsize: 0;)
	a2 = 0
	goto l40100B96
	// succ:  l40100B96
l40100B6C:
	a0 = 0x40100B6F
	call fn402008E0 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000010:word32]
	a2 = a12 + 16
	a0 = 0x40100B78
	call fn402006B4 (retsize: 0;)
	a2 = a12
	a0 = 0x40100B7D
	call fn402009D4 (retsize: 0;)
	a0 = 0x40100B80
	call fn402005C4 (retsize: 0;)
	branch a2 != 0x00000000 l40100AAC
	// succ:  l40100B83 l40100AAC
l40100B83:
	goto l40140B54
	// succ:  l40140B54
l40100B86:
	a0 = 0x40100B89
	call fn402008E0 (retsize: 0;)
	a2 = a12
	a0 = 0x40100B8E
	call fn402009D4 (retsize: 0;)
	a0 = 0x40100B91
	call fn402005C4 (retsize: 0;)
l40100B96:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  xQueueGenericSend_exit
l40140B54:
xQueueGenericSend_exit:


// uxQueueMessagesWaitingFromISR
// Return size: 0
void uxQueueMessagesWaitingFromISR()
uxQueueMessagesWaitingFromISR_entry:
	// succ:  l40100BA8
l40100BA8:
	a1 = fp
	a2 = Mem0[a2 + 0x00000038:word32]
	return
	// succ:  uxQueueMessagesWaitingFromISR_exit
uxQueueMessagesWaitingFromISR_exit:


// _xt_isr_attach
// Return size: 0
void _xt_isr_attach()
_xt_isr_attach_entry:
	// succ:  l40100BB4
l40100BB4:
	a1 = fp
	a4 = 0x40100BB0
	a2 = a2 & 0x000000FF
	a2 = a4 + a2 * 0x00000004
	Mem0[a2:word32] = a3
	return
	// succ:  _xt_isr_attach_exit
_xt_isr_attach_exit:


// _xt_isr_handler
// Return size: 0
void _xt_isr_handler()
_xt_isr_handler_entry:
	// succ:  l40100BC8
l40100BC8:
	a1 = fp
	a1 = a1 - 32
	a3 = 0x40100BC4
	Mem0[a1 + 0x0000000C:word32] = a15
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	a15 = a2 & 0x0000FFFF
	a2 = 0x00000001
	Mem0[a3:byte] = a2
	branch (a15 & 0x00000100) == 0x00000000 l40100BFD
	// succ:  l40100BE5 l40100BFD
l40100BE5:
	a2 = 0x00000100
l40100BFD:
	a12 = 0x40100BB0
	a13 = 1
	branch a15 == 0x00000000 l40100C38
	// succ:  l40100C05 l40100C38
l40100C05:
	a3 = -a15
	a3 = a3 & a15
	a3 = __nsau(a3)
	a3 = -a3
	a3 = a3 + 31
	a3 = a3 & 0x000000FF
	SAR = 0x00000020 - a3
	a14 = a13 << SAR
	a4 = a14 & 0x0000FFFF
l40100C38:
	a3 = 0x40100BC4
	a0 = Mem0[a1 + 0x0000001C:word32]
	a2 = 0
	Mem0[a3:byte] = a2
	a12 = Mem0[a1 + 0x00000018:word32]
	a2 = 0
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  _xt_isr_handler_exit
_xt_isr_handler_exit:


// default_putc
// Return size: 0
void default_putc()
default_putc_entry:
	// succ:  l40100C58
l40100C58:
	a1 = fp
	a4 = 0x40100C54
	a2 = a2 & 0x000000FF
	a5 = 0x0000007F
	// succ:  l40100C61
l40100C61:
	a3 = Mem0[a4 + 0x0000001C:word32]
	a3 = a3 >>u 0x00000010 & 0x000000FF
	a3 = a5 - a3
	branch a3 < 1 l40100C61
	// succ:  l40100C6F l40100C61
l40100C6F:
	Mem0[a4:word32] = a2
	return
	// succ:  default_putc_exit
default_putc_exit:


// vApplicationStackOverflowHook
// Return size: 0
void vApplicationStackOverflowHook()
vApplicationStackOverflowHook_entry:
	// succ:  l40100C80
l40100C80:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a3
	a0 = 0x40100C7C
	v6 = a0
	a0 = 0x40100C8F
	call v6 (retsize: 0;)
	a3 = a2
	a2 = 0x40100C78
	a4 = a12
	a0 = 0x40100C99
	call ets_printf (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  vApplicationStackOverflowHook_exit
vApplicationStackOverflowHook_exit:


// vApplicationIdleHook
// Return size: 0
void vApplicationIdleHook()
vApplicationIdleHook_entry:
	// succ:  l40100CAC
l40100CAC:
	a1 = fp
	a3 = 0x40100CA4
	a2 = 0x40100CA8
	a3 = a3 + 0x00000C00
	a3 = Mem0[a3 + 0x00000000:word32]
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40100CC4
	call ets_printf (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  vApplicationIdleHook_exit
vApplicationIdleHook_exit:


// vApplicationTickHook
// Return size: 0
void vApplicationTickHook()
vApplicationTickHook_entry:
	// succ:  l40100CD0
l40100CD0:
	a1 = fp
	a3 = 0x40100CA4
	a2 = 0x40100CCC
	a3 = a3 + 0x00000C00
	a3 = Mem0[a3 + 0x00000000:word32]
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40100CE8
	call ets_printf (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  vApplicationTickHook_exit
vApplicationTickHook_exit:


// sdk_user_start
// Return size: 0
void sdk_user_start()
sdk_user_start_entry:
	// succ:  l40100D40
l40100D40:
	a1 = fp
	a9 = 0x000003A0
	a1 = a1 - a9
	Mem0[a1 + 0x00000394:word32] = a13
	a13 = 0x40100CFC
	a3 = 32
	a4 = Mem0[a13 + 0x0000001C:word32]
	Mem0[a1 + 0x0000039C:word32] = a0
	a3 = a4 | a3
	Mem0[a1 + 0x00000398:word32] = a12
	Mem0[a1 + 0x00000390:word32] = a14
	Mem0[a1 + 0x0000038C:word32] = a15
	Mem0[a13 + 0x0000001C:word32] = a3
	a4 = 4
	a3 = a1
	a2 = 0
	a0 = 0x40100D70
	call sdk_SPIRead (retsize: 0;)
	v12 = Mem0[a1 + 0x00000003:byte]
	a2 = (uint32) v12
	a3 = 0x40100D00
	a4 = a2 >>u 4
	a4 = a4 - 1
	a2 = a2 & 0x0000000F
	a2 = a3 + a2 * 0x00000004
	a4 = a4 & 0x000000FF
	a3 = Mem0[a2 + 0x00000000:word32]
	branch a4 >=u 0x00000004 l40100D9C
	// succ:  l40100D89 l40100D9C
l40100D89:
	a2 = 0x40100D04
	a4 = a2 + a4 * 0x00000004
	a12 = Mem0[a4 + 0x00000000:word32]
	a4 = a12 << 20
	a2 = a4 + 0xFFFFF000
	goto l40100DA5
	// succ:  l40100DA5
l40100D9C:
	a2 = 0x40100CF0
	a4 = 0x40100CF4
	a12 = 0x00000080
	// succ:  l40100DA5
l40100DA5:
	a14 = 0x40100D08
	Mem0[a14 + 0x00000004:word32] = a4
	branch a3 >=u 0x00000002 l40100DD5
	// succ:  l40100DAD l40100DD5
l40100DAD:
	a5 = Mem0[a13 + 0x00000008:word32]
	a4 = 0x40100D0C
	a3 = 0x40100D10
	a4 = a5 | a4
	Mem0[a13 + 0x00000008:word32] = a4
	a5 = Mem0[a3 + 0x00000000:word32]
	a4 = 0x00000100
	a4 = a5 | a4
	Mem0[a3:word32] = a4
	a5 = 0
	goto l40100E0B
	// succ:  l40100E0B
l40100DD5:
	a6 = Mem0[a13 + 0x00000008:word32]
	a5 = 0x40100D14
	a4 = 0x40100D10
	a5 = a6 & a5
	Mem0[a13 + 0x00000008:word32] = a5
	a8 = Mem0[a4 + 0x00000000:word32]
	a5 = a3 - 1
	a3 = a3 >>u 1
	a7 = a5 << 24
	a3 = a3 - 1
	a6 = 0xFFFFFEFF
	a6 = a8 & a6
	a5 = a7 | a5
	a3 = a3 << 28
	Mem0[a4:word32] = a6
	a5 = a5 | a3
	// succ:  l40100E0B
l40100E0B:
	a6 = Mem0[a13 + 0x00000008:word32]
	a4 = 0x40100D18
	a3 = a1
	a4 = a6 & a4
	a5 = a5 | a4
	Mem0[a13 + 0x00000008:word32] = a5
	a4 = 28
	a0 = 0x40100E25
	call sdk_SPIRead (retsize: 0;)
	v17 = Mem0[a1 + 0x00000000:byte]
	a3 = (uint32) v17
	a15 = 0
	a5 = 1
	a2 = a15
	branch a3 == 0x00000000 l40100E31
	// succ:  l40100E2E_1 l40100E31
l40100E2E_1:
	a2 = a5
	// succ:  l40100E31
l40100E31:
	a3 = a2 & 0x000000FF
	a4 = a3 - 3
	a2 = Mem0[a14 + 0x0000000C:word32]
	a8 = a3 + 3
	a4 = a4 + a12
	a8 = a1 + a8 * 0x00000004
	a8 = Mem0[a8 + 0x00000000:word32]
	a3 = a3 + 5
	a2 = a4 * a2
	a7 = a1 + a3 * 0x00000004
	a4 = 0x00000370
	a3 = a1
	a14 = Mem0[a7 + 0x00000000:word32]
	Mem0[a1 + 0x00000370:word32] = a8
	Mem0[a1 + 0x00000374:word32] = a5
	a13 = Mem0[a1 + 0x00000004:word32]
	a0 = 0x40100E5C
	call sdk_SPIRead (retsize: 0;)
	a5 = Mem0[a1 + 0x00000374:word32]
	a2 = a15
	a4 = a5
	a3 = a15
	a0 = 0x40100E68
	call Cache_Read_Enable (retsize: 0;)
	a4 = 0x40100CF8
	a2 = 0x40100D1C
	branch a4 <u a2 l40100E80
	// succ:  l40100E71 l40100E80
l40100E71:
	a2 = 0x40100D20
	a0 = 0x40100D30
	v18 = a0
	a0 = 0x40100E7A
	call v18 (retsize: 0;)
	branch a13 != -1 l40100E9D
	// succ:  l40100E7D l40100E9D
l40100E7D:
	goto l40100EBF
	// succ:  l40100EBF
l40100E80:
	a3 = 0x40100D24
	a5 = a2 + 3
	a5 = a5 - a3
	a5 = a5 >>u 2
	a5 = a5 + 1
	a5 = a4 + a5 * 0x00000004
	a2 = a15
	// succ:  l40100E92
l40100E92:
	Mem0[a4:word32] = a2
	a4 = a4 + 4
	branch a4 != a5 l40100E92
	// succ:  l40100E99 l40100E92
l40100E99:
	goto l40140E71
	// succ:  l40140E71
l40100E9D:
	a2 = 0x40100D28
	branch a13 == a2 l40100EB1
	// succ:  l40100EA3 l40100EB1
l40100EA3:
	a2 = a12 - 4
	a0 = 0x40100D34
	v19 = a0
	a0 = 0x40100EAC
	call v19 (retsize: 0;)
	goto l40100EBF
	// succ:  l40100EBF
l40100EB1:
	a3 = Mem0[a1 + 0x00000370:word32]
	a2 = a1
	a0 = 0x40100D38
	v21 = a0
	a0 = 0x40100EBC
	call v21 (retsize: 0;)
	branch a2 != a14 l40100EA3
	// succ:  l40100EBF l40100EA3
l40100EBF:
	a5 = 0x40100D2C
	a2 = 0x000001D8
	a3 = a1
	a4 = 0x00000370
	a2 = a5 + a2
	a0 = 0x40100ED0
	call memcpy (retsize: 0;)
	a0 = 0x40100D3C
	v20 = a0
	a0 = 0x40100ED6
	call v20 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000039C:word32]
	a9 = 0x000003A0
	a12 = Mem0[a1 + 0x00000398:word32]
	a13 = Mem0[a1 + 0x00000394:word32]
	a14 = Mem0[a1 + 0x00000390:word32]
	a15 = Mem0[a1 + 0x0000038C:word32]
	a1 = a1 + a9
	return
	a5 = 0x40100D2C
	a2 = 0x000001D8
	a3 = a1
	a4 = 0x00000370
	a2 = a5 + a2
	a0 = 0x40100ED0
	call memcpy (retsize: 0;)
	a0 = 0x40100D3C
	v22 = a0
	a0 = 0x40100ED6
	call v22 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000039C:word32]
	a9 = 0x000003A0
	a12 = Mem0[a1 + 0x00000398:word32]
	a13 = Mem0[a1 + 0x00000394:word32]
	a14 = Mem0[a1 + 0x00000390:word32]
	a15 = Mem0[a1 + 0x0000038C:word32]
	a1 = a1 + a9
	return
	// succ:  sdk_user_start_exit sdk_user_start_exit
l40140E71:
sdk_user_start_exit:


// gpio_to_iomux
// Return size: 0
void gpio_to_iomux()
gpio_to_iomux_entry:
	// succ:  l40100EF0
l40100EF0:
	a1 = fp
	a3 = 0x40100EEC
	a2 = a2 & 0x000000FF
	a2 = a3 + a2 * 0x00000004
	v5 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v5
	return
	// succ:  gpio_to_iomux_exit
gpio_to_iomux_exit:


// iomux_to_gpio
// Return size: 0
void iomux_to_gpio()
iomux_to_gpio_entry:
	// succ:  l40100F04
l40100F04:
	a1 = fp
	a3 = 0x40100F00
	a2 = a2 & 0x000000FF
	a2 = a3 + a2 * 0x00000004
	v5 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v5
	return
	// succ:  iomux_to_gpio_exit
iomux_to_gpio_exit:


// fatal_handler_prelude
// Return size: 0
void fatal_handler_prelude()
fatal_handler_prelude_entry:
	// succ:  l40100F18
l40100F18:
	a1 = fp
	a1 = a1 - 16
	a2 = 0x401008A8
	Mem0[a1 + 0x0000000C:word32] = a0
	v5 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v5
	branch a2 == 0x00000000 l40100F41
	// succ:  l40100F27 l40100F41
l40100F27:
	a0 = 0x40100F14
	v6 = a0
	a0 = 0x40100F2D
	call v6 (retsize: 0;)
	a2 = 0x00000000
	a3 = a2 | a2
	a4 = 1
	a0 = 0x40100F38
	call Cache_Read_Enable (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  fatal_handler_prelude_exit
l40100F41:
	a0 = 0x40100F44
	call fn402008B8 (retsize: 0;)
	a2 = 0x40100238
	a4 = -32
	// succ:  l40100F49
l40100F49:
	a3 = Mem0[a2 + 0x00000000:word32]
	a3 = a3 & a4
	Mem0[a2:word32] = a3
	a3 = Mem0[a2 + 0x00000000:word32]
	branch (a3 & 0x00000001) != 0x00000000 l40100F49
	// succ:  l40100F5E l40100F49
l40100F5E:
	// succ:  l40140F27
l40140F27:
fatal_handler_prelude_exit:


// fatal_exception_handler
// Return size: 0
void fatal_exception_handler()
fatal_exception_handler_entry:
	// succ:  l40100F68
l40100F68:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1:word32] = a2
	a12 = a3 & 0x000000FF
	Mem0[a1 + 0x0000001C:word32] = a0
	a0 = 0x40100F78
	call fn40200F18 (retsize: 0;)
	a3 = 0x40100F64
	a2 = Mem0[a1 + 0x00000000:word32]
	a4 = Mem0[a3 + 0x00000000:word32]
	a3 = a12
	a0 = 0x40100F84
	call a4 (retsize: 0;)
	a15 = Mem0[a14 + 0x0000000C:word32]
	b4 = b0 & !b2
	a12 = 0x400C374C
	a3 = 0x400C96B0
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = a0 | a0
	a13 = a13 - 3
	a12 = a1 | a1
	a0 = 0x40100F9E
	call fn40200F18 (retsize: 0;)
	a2 = a13
	a3 = a12
	a0 = 0x40100F84
	v14 = a0
	a0 = 0x40100FA8
	call v14 (retsize: 0;)
	__reserved()
	__reserved()
	__reserved()
	// succ:  l40100FAE_thunk_fn40110FB6
l40100FAE_thunk_fn40110FB6:
	call fn40110FB6 (retsize: 0;)
	return
	// succ:  fatal_exception_handler_exit
fatal_exception_handler_exit:


// abort
// Return size: 0
void abort()
abort_entry:
	// succ:  l40100F88
l40100F88:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = a0 | a0
	a13 = a13 - 3
	a12 = a1 | a1
	a0 = 0x40100F9E
	call fn40200F18 (retsize: 0;)
	a2 = a13
	a3 = a12
	a0 = 0x40100F84
	v8 = a0
	a0 = 0x40100FA8
	call v8 (retsize: 0;)
	__reserved()
	__reserved()
	__reserved()
	// succ:  l40100FB1_thunk_fn40110FB6
l40100FB1_thunk_fn40110FB6:
	call fn40110FB6 (retsize: 0;)
	return
	// succ:  abort_exit
abort_exit:


// Cache_Read_Enable
// Return size: 0
void Cache_Read_Enable()
Cache_Read_Enable_entry:
	// succ:  l40100FB8
l40100FB8:
	a1 = fp
	a2 = 0x40100FA8
	Mem0[a2:word32] = a0
	a2 = 0x40100FAC
	v5 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v5
	branch a2 != 128 l40100FF5
	// succ:  l40100FC6 l40100FF5
l40100FC6:
	a2 = 0
	a3 = 0x00000000
	a4 = 0x00000001
	a0 = 0x40100FB0
	v8 = a0
	a0 = 0x40100FD4
	call v8 (retsize: 0;)
	a3 = 0x40100FB4
	a2 = Mem0[a3 + 0x00000000:word32]
	a2 = a2 >>u 0x00000018 & 0x000000FF
	a2 = a2 << 30
	a4 = a2 + a3
	a4 = Mem0[a4 + 0x00000008:word32]
	a4 = a4 >>u 0x00000014 & 0x000000FF
	a3 = 0x40100FAC
	Mem0[a3:byte] = a4
	a0 = 0x40100F14
	v9 = a0
	a0 = 0x40100FF5
	call v9 (retsize: 0;)
	// succ:  l40100FF5
l40100FF5:
	a4 = 0x40100FAC
	a4 = Mem0[a4 + 0x00000000:word32]
	a2 = a4 & 0x00000001
	a3 = a4 >>u 1
	a4 = 1
	a0 = 0x40100FB0
	v10 = a0
	a0 = 0x40101008
	call v10 (retsize: 0;)
	a0 = 0x40100FA8
	a0 = Mem0[a0 + 0x00000000:word32]
	return
	// succ:  Cache_Read_Enable_exit
Cache_Read_Enable_exit:


// sdk_SPIReadModeCnfig
// Return size: 0
void sdk_SPIReadModeCnfig()
sdk_SPIReadModeCnfig_entry:
	// succ:  l40101030
l40101030:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = 0x40100CFC
	a4 = 0x40101024
	a3 = Mem0[a12 + 0x00000008:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a13
	a3 = a3 & a4
	Mem0[a12 + 0x00000008:word32] = a3
	branch a2 == 0x00000000 l4010106C
	// succ:  l4010104E l4010106C
l4010104E:
	branch a2 == 1 l40101074
	// succ:  l40101051 l40101074
l40101051:
	a13 = 0x40101020
	branch a2 == 2 l40101084
	// succ:  l40101057 l40101084
l40101057:
	a13 = 0x4010101C
	branch a2 == 3 l40101084
	// succ:  l4010105D l40101084
l4010105D:
	a3 = 0x40101018
	a13 = 0
	a2 = a2 - 4
	branch a2 != 0x00000000 l40101068
	// succ:  l40101065_1 l40101068
l40101065_1:
	a13 = a3
	// succ:  l40101068
l40101068:
	goto l40101084
	// succ:  l40101084
l4010106C:
	a13 = 0x40101014
	goto l40101077
	// succ:  l40101077
l40101074:
	a13 = 0x40101010
	// succ:  l40101077
l40101077:
	a2 = 0x40100D08
	a0 = 0x40101028
	v9 = a0
	a0 = 0x40101080
	call v9 (retsize: 0;)
	goto l4010108D
	// succ:  l4010108D
l40101084:
	a2 = 0x40100D08
	a0 = 0x4010102C
	v10 = a0
	a0 = 0x4010108D
	call v10 (retsize: 0;)
	// succ:  l4010108D
l4010108D:
	a3 = Mem0[a12 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x0000000C:word32]
	a13 = a13 | a3
	Mem0[a12 + 0x00000008:word32] = a13
	a2 = 0
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_SPIReadModeCnfig_exit
sdk_SPIReadModeCnfig_exit:


// sdk_SPIWrite
// Return size: 0
void sdk_SPIWrite()
sdk_SPIWrite_entry:
	// succ:  l401010AC
l401010AC:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000030:word32] = a14
	a14 = 0x40100D08
	Mem0[a1 + 0x00000034:word32] = a13
	a13 = a4
	a4 = Mem0[a14 + 0x00000004:word32]
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x0000003C:word32] = a0
	a12 = a2
	Mem0[a1 + 0x0000002C:word32] = a15
	a2 = a2 + a13
	Mem0[a1:word32] = a3
	branch a4 >=u a2 l401010CE
	// succ:  l401010C9 l401010CE
l401010C9:
	a2 = 1
	goto l40101153
	// succ:  l40101153
l401010CE:
	a15 = Mem0[a14 + 0x00000010:word32]
	a2 = a12
	a3 = a15
	a0 = 0x401010D7
	call __umodsi3 (retsize: 0;)
	a15 = a15 - a2
	a3 = a12
	a2 = a14
	a4 = Mem0[a1 + 0x00000000:word32]
	a5 = a13
	branch a13 <u a15 l40101144
	// succ:  l401010E5 l40101144
l401010E5:
	a5 = a15
	a0 = 0x401010A8
	v12 = a0
	a0 = 0x401010ED
	call v12 (retsize: 0;)
	a8 = a2
	branch a2 != 0x00000000 l401010C9
	// succ:  l401010F2 l401010C9
l401010F2:
	a4 = Mem0[a14 + 0x00000010:word32]
	a5 = a13 - a15
	a2 = a5
	a3 = a4
	Mem0[a1 + 0x0000000C:word32] = a4
	Mem0[a1 + 0x00000008:word32] = a5
	Mem0[a1 + 0x00000010:word32] = a8
	a0 = 0x40101105
	call __udivsi3 (retsize: 0;)
	Mem0[a1 + 0x00000004:word32] = a2
	a4 = Mem0[a1 + 0x0000000C:word32]
	a5 = Mem0[a1 + 0x00000008:word32]
	a8 = Mem0[a1 + 0x00000010:word32]
	branch a2 == 0x00000000 l40101138
	// succ:  l4010110F l40101138
l4010110F:
	a5 = a4
	// succ:  l40101111
l40101111:
	a6 = Mem0[a1 + 0x00000000:word32]
	a4 = a15 >>u 2
	a3 = a15 + a12
	a2 = a14
	a4 = a6 + a4 * 0x00000004
	Mem0[a1 + 0x00000010:word32] = a8
	a0 = 0x401010A8
	v15 = a0
	a0 = 0x40101125
	call v15 (retsize: 0;)
	a8 = Mem0[a1 + 0x00000010:word32]
	a8 = a8 + 1
	branch a2 != 0x00000000 l401010C9
	// succ:  l4010112C l401010C9
l4010112C:
	a5 = Mem0[a14 + 0x00000010:word32]
	a6 = Mem0[a1 + 0x00000004:word32]
	a15 = a15 + a5
	branch a8 != a6 l40101111
	// succ:  l40101135 l40101111
l40101135:
	a5 = a13 - a15
	// succ:  l40101138
l40101138:
	a6 = Mem0[a1 + 0x00000000:word32]
	a4 = a15 >>u 2
	a2 = a14
	a3 = a15 + a12
	a4 = a6 + a4 * 0x00000004
	// succ:  l40101144
l40101144:
	a0 = 0x401010A8
	v16 = a0
	a0 = 0x4010114A
	call v16 (retsize: 0;)
	a4 = a2
	a3 = 1
	a2 = 0
	branch a4 == 0x00000000 l40101153
	// succ:  l40101150_1 l40101153
l40101150_1:
	a2 = a3
	// succ:  l40101153
l40101153:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_SPIWrite_exit sdk_SPIWrite_exit
sdk_SPIWrite_exit:


// sdk_SPIRead
// Return size: 0
void sdk_SPIRead()
sdk_SPIRead_entry:
	// succ:  l40101168
l40101168:
	a1 = fp
	a7 = a2
	a6 = a3
	a2 = 0x40100D08
	a1 = a1 - 16
	a5 = a4
	a3 = a7
	a4 = a6
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40101164
	v10 = a0
	a0 = 0x40101180
	call v10 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a4 = a2
	a3 = 1
	a2 = 0
	branch a4 == 0x00000000 l4010118B
	// succ:  l40101188_1 l4010118B
l40101188_1:
	a2 = a3
	// succ:  l4010118B
l4010118B:
	a1 = a1 + 16
	return
	// succ:  sdk_SPIRead_exit
sdk_SPIRead_exit:


// sdk_SPIEraseSector
// Return size: 0
void sdk_SPIEraseSector()
sdk_SPIEraseSector_entry:
	// succ:  l40101198
l40101198:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = 0x40100D08
	Mem0[a1 + 0x00000004:word32] = a13
	a3 = Mem0[a12 + 0x0000000C:word32]
	a13 = a2 & 0x0000FFFF
	a2 = Mem0[a12 + 0x00000004:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1:word32] = a14
	a0 = 0x401011B1
	call __udivsi3 (retsize: 0;)
	branch a13 <u a2 l401011BA
	// succ:  l401011B4 l401011BA
l401011B4:
	a2 = 1
	goto l401011DB
	// succ:  l401011DB
l401011BA:
	a2 = a12
	a0 = 0x40101190
	v9 = a0
	a0 = 0x401011C2
	call v9 (retsize: 0;)
	a14 = a2
	branch a2 != 0x00000000 l401011B4
	// succ:  l401011C7 l401011B4
l401011C7:
	a3 = Mem0[a12 + 0x0000000C:word32]
	a2 = a12
	a3 = a13 * a3
	a0 = 0x40101194
	v10 = a0
	a0 = 0x401011D4
	call v10 (retsize: 0;)
	a3 = 1
	branch a2 == 0x00000000 l401011D9
	// succ:  l401011D6_1 l401011D9
l401011D6_1:
	a14 = a3
	// succ:  l401011D9
l401011D9:
	a2 = a14
	// succ:  l401011DB
l401011DB:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_SPIEraseSector_exit
sdk_SPIEraseSector_exit:


// sdk_spi_flash_get_id
// Return size: 0
void sdk_spi_flash_get_id()
sdk_spi_flash_get_id_entry:
	// succ:  l401011F4
l401011F4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	a0 = 0x401011FE
	call fn402008B8 (retsize: 0;)
	a0 = 0x40100F14
	v5 = a0
	a0 = 0x40101204
	call v5 (retsize: 0;)
	a2 = 0x40100D08
	a0 = 0x401011F0
	v7 = a0
	a0 = 0x4010120D
	call v7 (retsize: 0;)
	a5 = 0x40100CFC
	a2 = 0
	Mem0[a5 + 0x00000040:word32] = a2
	a2 = 0x401011E8
	Mem0[a5:word32] = a2
	// succ:  l40101220
l40101220:
	a3 = Mem0[a5 + 0x00000000:word32]
	branch a3 != 0x00000000 l40101220
	// succ:  l40101229 l40101220
l40101229:
	a2 = a3 | a3
	a4 = 1
	a12 = Mem0[a5 + 0x00000040:word32]
	a0 = 0x40101237
	call fn40200FB8 (retsize: 0;)
	a0 = 0x4010123A
	call fn402008E0 (retsize: 0;)
	a2 = 0x401011EC
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12 & a2
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_spi_flash_get_id_exit
sdk_spi_flash_get_id_exit:


// sdk_spi_flash_read_status
// Return size: 0
void sdk_spi_flash_read_status()
sdk_spi_flash_read_status_entry:
	// succ:  l40101250
l40101250:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2 | a2
	a0 = 0x4010125F
	call fn402008B8 (retsize: 0;)
	a0 = 0x40100F14
	v6 = a0
	a0 = 0x40101265
	call v6 (retsize: 0;)
	a2 = 0x40100D08
	a3 = a12
	a0 = 0x4010124C
	v8 = a0
	a0 = 0x40101270
	call v8 (retsize: 0;)
	a3 = 0
	a12 = a2
	a4 = 1
	a2 = a3
	a0 = 0x4010127B
	call fn40200FB8 (retsize: 0;)
	a0 = 0x4010127E
	call fn402008E0 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_spi_flash_read_status_exit
sdk_spi_flash_read_status_exit:


// sdk_spi_flash_write_status
// Return size: 0
void sdk_spi_flash_write_status()
sdk_spi_flash_write_status_entry:
	// succ:  l40101290
l40101290:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2 | a2
	a0 = 0x4010129F
	call fn402008B8 (retsize: 0;)
	a0 = 0x40100F14
	v6 = a0
	a0 = 0x401012A5
	call v6 (retsize: 0;)
	a2 = 0x40100D08
	a3 = a12
	a0 = 0x4010128C
	v8 = a0
	a0 = 0x401012B0
	call v8 (retsize: 0;)
	a3 = 0
	a12 = a2
	a4 = 1
	a2 = a3
	a0 = 0x401012BB
	call fn40200FB8 (retsize: 0;)
	a0 = 0x401012BE
	call fn402008E0 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_spi_flash_write_status_exit
sdk_spi_flash_write_status_exit:


// sdk_spi_flash_erase_sector
// Return size: 0
void sdk_spi_flash_erase_sector()
sdk_spi_flash_erase_sector_entry:
	// succ:  l401012CC
l401012CC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2 & 0x0000FFFF
	a0 = 0x401012D9
	call fn402008B8 (retsize: 0;)
	a0 = 0x40100F14
	v6 = a0
	a0 = 0x401012DF
	call v6 (retsize: 0;)
	a2 = a12
	a0 = 0x401012E4
	call fn40201198 (retsize: 0;)
	a3 = 0
	a12 = a2
	a4 = 1
	a2 = a3
	a0 = 0x401012EF
	call fn40200FB8 (retsize: 0;)
	a0 = 0x401012F2
	call fn402008E0 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_spi_flash_erase_sector_exit
sdk_spi_flash_erase_sector_exit:


// sdk_spi_flash_write
// Return size: 0
void sdk_spi_flash_write()
sdk_spi_flash_write_entry:
	// succ:  l40101300
l40101300:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a12
	branch a3 == 0x00000000 l40101344
	// succ:  l4010130A l40101344
l4010130A:
	a5 = a4 & 0x00000003
	branch a5 == 0x00000000 l40101316
	// succ:  l4010130F l40101316
l4010130F:
	a5 = -4
	a4 = a4 & a5
	a4 = a4 + 4
	// succ:  l40101316
l40101316:
	Mem0[a1:word32] = a2
	Mem0[a1 + 0x00000004:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a4
	a0 = 0x4010131F
	call fn402008B8 (retsize: 0;)
	a0 = 0x40100F14
	v9 = a0
	a0 = 0x40101325
	call v9 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000004:word32]
	a4 = Mem0[a1 + 0x00000008:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x40101330
	call fn402010AC (retsize: 0;)
	a3 = 0
	a12 = a2
	a4 = 1
	a2 = a3
	a0 = 0x4010133B
	call fn40200FB8 (retsize: 0;)
	a0 = 0x4010133E
	call fn402008E0 (retsize: 0;)
	a2 = a12
	goto l40101346
	// succ:  l40101346
l40101344:
	a2 = 1
	// succ:  l40101346
l40101346:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_spi_flash_write_exit
sdk_spi_flash_write_exit:


// sdk_spi_flash_read
// Return size: 0
void sdk_spi_flash_read()
sdk_spi_flash_read_entry:
	// succ:  l40101350
l40101350:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a15
	Mem0[a1 + 0x0000001C:word32] = a0
	a13 = a3
	a15 = a2
	a14 = a4
	a12 = 1
	branch a3 == 0x00000000 l40101393
	// succ:  l40101368 l40101393
l40101368:
	a0 = 0x4010136B
	call fn402008B8 (retsize: 0;)
	a0 = 0x40100F14
	v11 = a0
	a0 = 0x40101371
	call v11 (retsize: 0;)
	a2 = 0x40100D08
	a3 = a15
	a4 = a13
	a5 = a14
	a0 = 0x40101164
	v13 = a0
	a0 = 0x40101380
	call v13 (retsize: 0;)
	a5 = 0
	a6 = a2
	a4 = a12
	a2 = a5
	a3 = a5
	branch a6 != 0x00000000 l4010138D
	// succ:  l4010138A_1 l4010138D
l4010138A_1:
	a12 = a5
	// succ:  l4010138D
l4010138D:
	a0 = 0x40101390
	call fn40200FB8 (retsize: 0;)
	a0 = 0x40101393
	call fn402008E0 (retsize: 0;)
	// succ:  l40101393
l40101393:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a2 = a12
	a13 = Mem0[a1 + 0x00000014:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_spi_flash_read_exit
sdk_spi_flash_read_exit:


// vPortYield
// Return size: 0
void vPortYield()
vPortYield_entry:
vPortYield_exit:


// sdk__xt_int_enter
// Return size: 0
void sdk__xt_int_enter()
sdk__xt_int_enter_entry:
	// succ:  l401013DC
l401013DC:
	a1 = fp
	Mem0[a1 + 0x0000003C:word32] = a12
	Mem0[a1 + 0x00000040:word32] = a13
	a12 = a0 | a0
	a0 = 0x401013E8
	call sdk__xt_context_save (retsize: 0;)
	a0 = 0x4010038C
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a0:word32] = a1
	a0 = a12
	return
	// succ:  sdk__xt_int_enter_exit
sdk__xt_int_enter_exit:


// sdk__xt_int_exit
// Return size: 0
void sdk__xt_int_exit()
sdk__xt_int_exit_entry:
	// succ:  l401013F4
l401013F4:
	a1 = fp
	Mem0[a1 + 0x00000044:word32] = a14
	Mem0[a1 + 0x00000048:word32] = a15
	a1 = 0x4010038C
	a1 = Mem0[a1 + 0x00000000:word32]
	a1 = Mem0[a1 + 0x00000000:word32]
	a14 = 0x4010038C
	a14 = Mem0[a14 + 0x00000000:word32]
	a15 = a1 + 80
	Mem0[a14:word32] = a15
	a0 = 0x40101411
	call sdk__xt_context_restore (retsize: 0;)
	a14 = Mem0[a1 + 0x00000044:word32]
	a15 = Mem0[a1 + 0x00000048:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	return
	// succ:  sdk__xt_int_exit_exit
sdk__xt_int_exit_exit:


// sdk__xt_timer_int
// Return size: 0
void sdk__xt_timer_int()
sdk__xt_timer_int_entry:
	// succ:  l40101424
l40101424:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	a0 = 0x40101431
	call sdk_os_get_cpu_frequency (retsize: 0;)
	a13 = 0x4010141C
	a13 = a2 * a13
	a12 = CCOMPARE0
	a2 = a12 + a13
	CCOMPARE0 = a2
sdk__xt_timer_int_exit:


// sdk__xt_timer_int1
// Return size: 0
void sdk__xt_timer_int1()
sdk__xt_timer_int1_entry:
	// succ:  l40101460
l40101460:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x401013A4
	v4 = a0
	a0 = 0x4010146C
	call v4 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sdk__xt_timer_int1_exit
sdk__xt_timer_int1_exit:


// sdk__xt_tick_timer_init
// Return size: 0
void sdk__xt_tick_timer_init()
sdk__xt_tick_timer_init_entry:
	// succ:  l40101474
l40101474:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4010147C
	call sdk_os_get_cpu_frequency (retsize: 0;)
sdk__xt_tick_timer_init_exit:


// sdk__xt_isr_unmask
// Return size: 0
void sdk__xt_isr_unmask()
sdk__xt_isr_unmask_entry:
	// succ:  l401014A0
l401014A0:
	a1 = fp
	a3 = 0
sdk__xt_isr_unmask_exit:


// sdk__xt_isr_mask
// Return size: 0
void sdk__xt_isr_mask()
sdk__xt_isr_mask_entry:
	// succ:  l401014B0
l401014B0:
	a1 = fp
	a3 = 0
sdk__xt_isr_mask_exit:


// sdk__xt_read_ints
// Return size: 0
void sdk__xt_read_ints()
sdk__xt_read_ints_entry:
sdk__xt_read_ints_exit:


// sdk__xt_clear_ints
// Return size: 0
void sdk__xt_clear_ints()
sdk__xt_clear_ints_entry:
sdk__xt_clear_ints_exit:


// sdk_os_get_cpu_frequency
// Return size: 0
void sdk_os_get_cpu_frequency()
sdk_os_get_cpu_frequency_entry:
	// succ:  l401014D4
l401014D4:
	a1 = fp
	a2 = 0x401014D0
	a2 = Mem0[a2 + 0x00000000:word32]
	return
	// succ:  sdk_os_get_cpu_frequency_exit
sdk_os_get_cpu_frequency_exit:


// sdk_system_rtc_mem_write
// Return size: 0
void sdk_system_rtc_mem_write()
sdk_system_rtc_mem_write_entry:
	// succ:  l401014E0
l401014E0:
	a1 = fp
	a6 = 0x000000BF
	a4 = a4 & 0x0000FFFF
	a5 = 0
	branch a6 <u a2 l4010153C
	// succ:  l401014EB l4010153C
l401014EB:
	a6 = a3 & 0x00000003
	branch a6 != a5 l4010153C
	// succ:  l401014F1 l4010153C
l401014F1:
	a2 = a2 << 30
	a2 = -a2
	a2 = a2 + 0x00000300
	a5 = a6
	branch a2 <u a4 l4010153C
	// succ:  l401014FF l4010153C
l401014FF:
	a2 = a4 & 0x00000003
	branch a2 == 0x00000000 l40101510
	// succ:  l40101504 l40101510
l40101504:
	a2 = 0xFFFFFFFC
	a4 = a4 & a2
	a4 = a4 + 4
	a4 = a4 & 0x0000FFFF
	// succ:  l40101510
l40101510:
	a6 = a4 >>u 2
	a2 = 0
	a7 = 0x401014DC
	branch a6 != a2 l40101520
	// succ:  l4010151B l40101520
l4010151B:
	a5 = 1
	goto l4010153C
	// succ:  l4010153C
l40101520:
	a4 = a2 << 30
	a5 = a3 + a4
	a5 = Mem0[a5 + 0x00000000:word32]
	a4 = a7 + a4
	a2 = a2 + 1
	Mem0[a4:word32] = a5
	a2 = a2 & 0x000000FF
	branch a2 <u a6 l40101520
	// succ:  l40101539 l40101520
l40101539:
	goto l4014151B
	// succ:  l4014151B
l4010153C:
	a2 = a5
	return
	// succ:  sdk_system_rtc_mem_write_exit
l4014151B:
sdk_system_rtc_mem_write_exit:


// sdk_system_rtc_mem_read
// Return size: 0
void sdk_system_rtc_mem_read()
sdk_system_rtc_mem_read_entry:
	// succ:  l40101540
l40101540:
	a1 = fp
	a6 = 0x000000BF
	a4 = a4 & 0x0000FFFF
	a5 = 0
	branch a6 <u a2 l40101599
	// succ:  l4010154B l40101599
l4010154B:
	a6 = a3 & 0x00000003
	branch a6 != a5 l40101599
	// succ:  l40101551 l40101599
l40101551:
	a2 = a2 << 30
	a2 = -a2
	a2 = a2 + 0x00000300
	a5 = a6
	branch a2 <u a4 l40101599
	// succ:  l4010155F l40101599
l4010155F:
	a2 = a4 & 0x00000003
	branch a2 == 0x00000000 l40101570
	// succ:  l40101564 l40101570
l40101564:
	a2 = 0xFFFFFFFC
	a4 = a4 & a2
	a4 = a4 + 4
	a4 = a4 & 0x0000FFFF
	// succ:  l40101570
l40101570:
	a6 = a4 >>u 2
	a2 = 0
	a7 = 0x401014DC
	branch a6 != a2 l40101580
	// succ:  l4010157B l40101580
l4010157B:
	a5 = 1
	goto l40101599
	// succ:  l40101599
l40101580:
	a4 = a2 << 30
	a5 = a7 + a4
	a5 = Mem0[a5 + 0x00000000:word32]
	a4 = a3 + a4
	a2 = a2 + 1
	Mem0[a4:word32] = a5
	a2 = a2 & 0x000000FF
	branch a2 <u a6 l40101580
	// succ:  l40101596 l40101580
l40101596:
	goto l4014157B
	// succ:  l4014157B
l40101599:
	a2 = a5
	return
	// succ:  sdk_system_rtc_mem_read_exit
l4014157B:
sdk_system_rtc_mem_read_exit:


// sdk_system_restart_in_nmi
// Return size: 0
void sdk_system_restart_in_nmi()
sdk_system_restart_in_nmi_entry:
	// succ:  l401015A8
l401015A8:
	a1 = fp
	a1 = a1 - 48
	a2 = 0
	a3 = a1
	a4 = 32
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a12
	a0 = 0x401015BA
	call fn40201540 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000000:word32]
	branch a2 == 2 l401015DD
	// succ:  l401015BF l401015DD
l401015BF:
	a5 = 0
	a2 = a5
	Mem0[a1 + 0x00000004:word32] = a5
	Mem0[a1 + 0x00000008:word32] = a5
	Mem0[a1 + 0x0000000C:word32] = a5
	Mem0[a1 + 0x00000010:word32] = a5
	Mem0[a1 + 0x00000014:word32] = a5
	Mem0[a1 + 0x00000018:word32] = a5
	Mem0[a1 + 0x0000001C:word32] = a5
	a3 = a1
	a5 = 3
	a4 = 32
	Mem0[a1:word32] = a5
	a0 = 0x401015DD
	call fn402014E0 (retsize: 0;)
	// succ:  l401015DD
l401015DD:
	a2 = 0x401008A8
	v9 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v9
	branch a2 == 0x00000000 l40101652
	// succ:  l401015E6 l40101652
l401015E6:
	a12 = 0x40100238
	a2 = 0x401015A0
	a3 = 3
	a4 = Mem0[a2 + 0x00000048:word32]
	a3 = a4 | a3
	Mem0[a2 + 0x00000048:word32] = a3
	a4 = Mem0[a12 + 0x00000018:word32]
	a3 = 0x00000100
	a3 = a4 | a3
	Mem0[a12 + 0x00000018:word32] = a3
	a4 = Mem0[a2 + 0x00000048:word32]
	a3 = -4
	a3 = a4 & a3
	Mem0[a2 + 0x00000048:word32] = a3
	a3 = Mem0[a12 + 0x00000018:word32]
	a2 = 0xFFFFFEFF
	a2 = a3 & a2
	Mem0[a12 + 0x00000018:word32] = a2
	a0 = 0x40100F14
	v10 = a0
	a0 = 0x40101634
	call v10 (retsize: 0;)
	a3 = Mem0[a12 + 0x00000024:word32]
	a2 = -25
	a2 = a3 & a2
	Mem0[a12 + 0x00000024:word32] = a2
	a0 = 0x401015A4
	v11 = a0
	a0 = 0x40101649
	call v11 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_system_restart_in_nmi_exit
l40101652:
	a1 = a1 | a1
	a0 = 0x40101658
	call fn402008B8 (retsize: 0;)
	a12 = 0x40100238
	a3 = -32
	// succ:  l4010165D
l4010165D:
	a2 = Mem0[a12 + 0x00000000:word32]
	a2 = a2 & a3
	Mem0[a12:word32] = a2
	a2 = Mem0[a12 + 0x00000000:word32]
	branch (a2 & 0x00000001) != 0x00000000 l4010165D
	// succ:  l40101672 l4010165D
l40101672:
	// succ:  l401415E9
l401415E9:
sdk_system_restart_in_nmi_exit:


// zalloc
// Return size: 0
void zalloc()
zalloc_entry:
	// succ:  l4010167C
l4010167C:
	a1 = fp
	a1 = a1 - 16
	a3 = a2
	a2 = 1
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40101678
	v6 = a0
	a0 = 0x4010168C
	call v6 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  zalloc_exit
zalloc_exit:


// _sbrk_r
// Return size: 0
void _sbrk_r()
_sbrk_r_entry:
	// succ:  l401016A0
l401016A0:
	a1 = fp
	a6 = 0x40101698
	a4 = Mem0[a6 + 0x00000000:word32]
	branch a4 != 0x00000000 l401016AC
	// succ:  l401016A7 l401016AC
l401016A7:
	a4 = 0x40101694
	Mem0[a6:word32] = a4
	// succ:  l401016AC
l401016AC:
	a5 = 0x4010169C
	a5 = Mem0[a5 + 0x00000000:word32]
	branch a5 != 0x00000000 l401016B5
	// succ:  l401016B3 l401016B5
l401016B3:
	a5 = a1
	// succ:  l401016B5
l401016B5:
	a3 = a4 + a3
	branch a3 < a5 l401016C2
	// succ:  l401016BA l401016C2
l401016BA:
	a3 = 12
	Mem0[a2:word32] = a3
	a2 = -1
	return
	// succ:  _sbrk_r_exit
l401016C2:
	Mem0[a6:word32] = a3
	a2 = a4
	return
	// succ:  _sbrk_r_exit
_sbrk_r_exit:


// vListInsertEnd
// Return size: 0
void vListInsertEnd()
vListInsertEnd_entry:
	// succ:  l401016C8
l401016C8:
	a1 = fp
	a4 = Mem0[a2 + 0x00000004:word32]
	a5 = Mem0[a4 + 0x00000008:word32]
	Mem0[a3 + 0x00000004:word32] = a4
	Mem0[a3 + 0x00000008:word32] = a5
	a6 = Mem0[a4 + 0x00000008:word32]
	a5 = Mem0[a2 + 0x00000000:word32]
	Mem0[a6 + 0x00000004:word32] = a3
	Mem0[a4 + 0x00000008:word32] = a3
	Mem0[a3 + 0x00000010:word32] = a2
	a3 = a5 + 1
	Mem0[a2:word32] = a3
	return
	// succ:  vListInsertEnd_exit
vListInsertEnd_exit:


// vListInsert
// Return size: 0
void vListInsert()
vListInsert_entry:
	// succ:  l401016E0
l401016E0:
	a1 = fp
	a7 = Mem0[a3 + 0x00000000:word32]
	a5 = a2 + 8
	branch a7 != -1 l401016EE
	// succ:  l401016E7 l401016EE
l401016E7:
	a5 = Mem0[a2 + 0x00000010:word32]
	a4 = Mem0[a5 + 0x00000004:word32]
	goto l401016FA
	// succ:  l401016FA
l401016EE:
	a4 = Mem0[a5 + 0x00000004:word32]
	a6 = Mem0[a4 + 0x00000000:word32]
	branch a7 <u a6 l401016FA
	// succ:  l401016F5 l401016FA
l401016F5:
	a5 = a4
l401016FA:
	Mem0[a3 + 0x00000004:word32] = a4
	Mem0[a4 + 0x00000008:word32] = a3
	Mem0[a3 + 0x00000008:word32] = a5
	a4 = Mem0[a2 + 0x00000000:word32]
	Mem0[a5 + 0x00000004:word32] = a3
	Mem0[a3 + 0x00000010:word32] = a2
	a3 = a4 + 1
	Mem0[a2:word32] = a3
	return
	// succ:  vListInsert_exit
vListInsert_exit:


// uxListRemove
// Return size: 0
void uxListRemove()
uxListRemove_entry:
	// succ:  l4010170C
l4010170C:
	a1 = fp
	a3 = a2
	a5 = Mem0[a3 + 0x00000008:word32]
	a2 = Mem0[a2 + 0x00000004:word32]
	a4 = Mem0[a3 + 0x00000010:word32]
	Mem0[a2 + 0x00000008:word32] = a5
	a5 = Mem0[a3 + 0x00000008:word32]
	a6 = Mem0[a4 + 0x00000004:word32]
	Mem0[a5 + 0x00000004:word32] = a2
	branch a6 != a3 l40101721
	// succ:  l4010171F l40101721
l4010171F:
	Mem0[a4 + 0x00000004:word32] = a5
	// succ:  l40101721
l40101721:
	a2 = Mem0[a4 + 0x00000000:word32]
	a5 = 0
	a2 = a2 - 1
	Mem0[a3 + 0x00000010:word32] = a5
	Mem0[a4:word32] = a2
	return
	// succ:  uxListRemove_exit
uxListRemove_exit:


// sdk__xt_context_save
// Return size: 0
void sdk__xt_context_save()
sdk__xt_context_save_entry:
	// succ:  l401017B4
l401017B4:
	a1 = fp
	Mem0[a1 + 0x00000014:word32] = a2
	Mem0[a1 + 0x00000018:word32] = a3
	Mem0[a1 + 0x0000001C:word32] = a4
	Mem0[a1 + 0x00000020:word32] = a5
	Mem0[a1 + 0x00000024:word32] = a6
	Mem0[a1 + 0x00000028:word32] = a7
	Mem0[a1 + 0x0000002C:word32] = a8
	Mem0[a1 + 0x00000030:word32] = a9
	Mem0[a1 + 0x00000034:word32] = a10
	Mem0[a1 + 0x00000038:word32] = a11
sdk__xt_context_save_exit:


// sdk__xt_context_restore
// Return size: 0
void sdk__xt_context_restore()
sdk__xt_context_restore_entry:
	// succ:  l401017D0
l401017D0:
	a1 = fp
	a3 = Mem0[a1 + 0x0000004C:word32]
	a2 = Mem0[a1 + 0x00000014:word32]
sdk__xt_context_restore_exit:


// sdk_chm_get_current_channel
// Return size: 0
void sdk_chm_get_current_channel()
sdk_chm_get_current_channel_entry:
	// succ:  l40101888
l40101888:
	a1 = fp
	a2 = 0x40101884
	a2 = Mem0[a2 + 0x0000003C:word32]
	return
	// succ:  sdk_chm_get_current_channel_exit
sdk_chm_get_current_channel_exit:


// sdk_register_phy_ops
// Return size: 0
void sdk_register_phy_ops()
sdk_register_phy_ops_entry:
	// succ:  l40101898
l40101898:
	a1 = fp
	a3 = 0
	a1 = a1 - 16
	a5 = a2
	Mem0[a1:word32] = a0
	a0 = 0x40101890
	a2 = 1
	Mem0[a0:word32] = a5
	a0 = 0x40101894
	v7 = a0
	a0 = 0x401018AE
	call v7 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_register_phy_ops_exit
sdk_register_phy_ops_exit:


// sdk_phy_change_channel
// Return size: 0
void sdk_phy_change_channel()
sdk_phy_change_channel_entry:
	// succ:  l401018B8
l401018B8:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40101890
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000004:word32]
	v4 = a0
	a0 = 0x401018C7
	call v4 (retsize: 0;)
	a2 = 0
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_phy_change_channel_exit
sdk_phy_change_channel_exit:


// sdk_phy_get_mactime
// Return size: 0
void sdk_phy_get_mactime()
sdk_phy_get_mactime_entry:
	// succ:  l401018D4
l401018D4:
	a1 = fp
	a2 = 0x401018D0
	a2 = Mem0[a2 + 0x00000200:word32]
	return
	// succ:  sdk_phy_get_mactime_exit
sdk_phy_get_mactime_exit:


// sdk_pm_rtc_clock_cali
// Return size: 0
void sdk_pm_rtc_clock_cali()
sdk_pm_rtc_clock_cali_entry:
	// succ:  l401018F4
l401018F4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	a5 = 0x401018E0
	a12 = a2
	a13 = 0x40100CFC
	a4 = Mem0[a13 + 0x00000170:word32]
	a4 = a4 & a5
	Mem0[a13 + 0x00000170:word32] = a4
	a3 = 0x00000101
	Mem0[a13 + 0x0000016C:word32] = a3
	a2 = 0x401018E4
	a0 = Mem0[a13 + 0x0000016C:word32]
	a0 = a0 | a2
	a2 = 0x00000064
	Mem0[a13 + 0x0000016C:word32] = a0
	a0 = 0x401018F0
	v10 = a0
	a0 = 0x40101938
	call v10 (retsize: 0;)
	a6 = Mem0[a13 + 0x00000170:word32]
	branch a6 < 0x00000000 l4010194A
	// succ:  l40101941 l4010194A
l40101941:
	a7 = Mem0[a13 + 0x00000170:word32]
	branch a7 >= 0x00000000 l40101941
	// succ:  l4010194A l40101941
l4010194A:
	a3 = 0x401018E8
	a0 = 0x401018EC
	a2 = Mem0[a13 + 0x00000170:word32]
	v13 = Mem0[a0 + 0x00000001:byte]
	a0 = (uint32) v13
	a2 = a2 & a3
	branch a0 == 0x00000000 l40101964
	// succ:  l4010195E l40101964
l4010195E:
	branch a0 == 1 l40101969
	// succ:  l40101961 l40101969
l40101961:
	branch a0 == 2 l401019A4
	// succ:  l40101964 l401019A4
l40101964:
	a3 = 40
	goto l4010196C
	// succ:  l4010196C
l40101969:
	a3 = 0x0000001A
	// succ:  l4010196C
l4010196C:
	a2 = a2 << 28
	a0 = 0x40101972
	call __udivsi3 (retsize: 0;)
	a13 = Mem0[a1 + 0x00000008:word32]
	branch a2 == 0x00000000 l4010199B
	// succ:  l40101978 l4010199B
l40101978:
	a0 = Mem0[a12 + 0x00000004:word32]
	branch a0 == 0x00000000 l40101999
	// succ:  l4010197C l40101999
l4010197C:
	a4 = 0x000001FF
	branch a0 >=u a2 l40101988
	// succ:  l40101982 l40101988
l40101982:
	a3 = a2 - a0
	goto l4010198B
	// succ:  l4010198B
l40101988:
	a3 = a0 - a2
	// succ:  l4010198B
l4010198B:
	branch a4 <u a3 l4010199B
	// succ:  l4010198E l4010199B
l4010198E:
	a3 = a2 + a2 * 0x00000004
	a2 = a0 + a0 * 0x00000002
	a2 = a2 + a3
	a2 = a2 >>u 3
	// succ:  l40101999
l40101999:
	Mem0[a12 + 0x00000004:word32] = a2
	// succ:  l4010199B
l4010199B:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_rtc_clock_cali_exit
l401019A4:
	a3 = 24
sdk_pm_rtc_clock_cali_exit:


// sdk_clockgate_watchdog
// Return size: 0
void sdk_clockgate_watchdog()
sdk_clockgate_watchdog_entry:
	// succ:  l401019B0
l401019B0:
	a1 = fp
	a4 = 0x401019AC
	branch a2 == 0x00000000 l401019C8
	// succ:  l401019B5 l401019C8
l401019B5:
	a6 = -9
	a5 = Mem0[a4 + 0x00000218:word32]
	a5 = a5 & a6
	Mem0[a4 + 0x00000218:word32] = a5
	return
	// succ:  sdk_clockgate_watchdog_exit
l401019C8:
	a3 = 8
	a2 = Mem0[a4 + 0x00000218:word32]
	a2 = a2 | a3
	Mem0[a4 + 0x00000218:word32] = a2
	return
	// succ:  sdk_clockgate_watchdog_exit
sdk_clockgate_watchdog_exit:


// sdk_esf_rx_buf_alloc
// Return size: 0
void sdk_esf_rx_buf_alloc()
sdk_esf_rx_buf_alloc_entry:
	// succ:  l401019E0
l401019E0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a2 != 7 l401019FA
	// succ:  l401019E8 l401019FA
l401019E8:
	a5 = 0x401019DC
	a0 = 0x401008A8
	a2 = Mem0[a5 + 0x00000010:word32]
	v7 = Mem0[a0 + 0x00000000:byte]
	a3 = (uint32) v7
	branch a2 != 0x00000000 l40101A05
	// succ:  l401019F5 l40101A05
l401019F5:
	a2 = 0
	goto l401019FE
	// succ:  l401019FE
l401019FA:
	a0 = 0
	a2 = a0
	// succ:  l401019FE
l401019FE:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_esf_rx_buf_alloc_exit
l40101A05:
	branch a3 != 0x00000000 l40101A32
	// succ:  l40101A07 l40101A32
l40101A07:
	a1 = a1 | a1
	a0 = 0x40101A0D
	call fn402008B8 (retsize: 0;)
	a4 = 0x401019AC
	a5 = 0x401019DC
	a6 = -32
	// succ:  l40101A15
l40101A15:
	a8 = Mem0[a4 + 0x00000200:word32]
	a8 = a8 & a6
	Mem0[a4 + 0x00000200:word32] = a8
	a7 = Mem0[a4 + 0x00000200:word32]
	branch (a7 & 0x00000001) != 0x00000000 l40101A15
	// succ:  l40101A2D l40101A15
l40101A2D:
	a0 = 0x401008A8
	a2 = Mem0[a5 + 0x00000010:word32]
	// succ:  l40101A32
l40101A32:
	Mem0[a1 + 0x00000004:word32] = a2
	a10 = 0x00000000
	a11 = Mem0[a2 + 0x0000001C:word32]
	Mem0[a5 + 0x00000010:word32] = a11
	Mem0[a2 + 0x0000001C:word32] = a10
	v15 = Mem0[a0 + 0x00000000:byte]
	a9 = (uint32) v15
	a0 = a2
	branch a9 != 0x00000000 l40101A67
	// succ:  l40101A46 l40101A67
l40101A46:
	a2 = 0x401019AC
	a0 = Mem0[a2 + 0x00000200:word32]
	a3 = -32
	a0 = a0 & a3
	a3 = 1
	a0 = a0 | a3
	Mem0[a2 + 0x00000200:word32] = a0
	a0 = 0x40101A62
	call fn402008E0 (retsize: 0;)
	a5 = 0x401019DC
	a0 = Mem0[a1 + 0x00000004:word32]
	// succ:  l40101A67
l40101A67:
	a4 = Mem0[a5 + 0x00000014:word32]
	a4 = a4 - 1
	Mem0[a5 + 0x00000014:word32] = a4
sdk_esf_rx_buf_alloc_exit:


// sdk_lmacIsActive
// Return size: 0
void sdk_lmacIsActive()
sdk_lmacIsActive_entry:
	// succ:  l40101A74
l40101A74:
	a1 = fp
	a3 = 0x40101A70
	v4 = Mem0[a3 + 0x00000000:byte]
	a3 = (uint32) v4
	a2 = 1
	branch a3 <u 0x00000008 l40101A81
	// succ:  l40101A7F l40101A81
l40101A7F:
	a2 = 0
	// succ:  l40101A81
l40101A81:
	return
	// succ:  sdk_lmacIsActive_exit
sdk_lmacIsActive_exit:


// sdk_lmacIsIdle
// Return size: 0
void sdk_lmacIsIdle()
sdk_lmacIsIdle_entry:
	// succ:  l40101A88
l40101A88:
	a1 = fp
	a3 = 1
	a5 = 0x40101A84
	a4 = a2 + a2 * 0x00000008
	a4 = a5 + a4 * 0x00000004
	v7 = Mem0[a4 + 0x00000011:byte]
	a4 = (uint32) v7
	a2 = 0
	branch a4 != 0x00000000 l40101A9B
	// succ:  l40101A98_1 l40101A9B
l40101A98_1:
	a2 = a3
	// succ:  l40101A9B
l40101A9B:
	return
	// succ:  sdk_lmacIsIdle_exit
sdk_lmacIsIdle_exit:


// sdk_lmacSetAcParam
// Return size: 0
void sdk_lmacSetAcParam()
sdk_lmacSetAcParam_entry:
	// succ:  l40101ED4
l40101ED4:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a2
	Mem0[a1 + 0x00000014:word32] = a3
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a14
	a0 = -32
	a14 = 0x401019AC
	a13 = a4
	a12 = a5
	a5 = 0x401008A8
	a4 = a6
	v12 = Mem0[a5 + 0x00000000:byte]
	a5 = (uint32) v12
	Mem0[a1 + 0x00000018:word32] = a4
	branch a5 != 0x00000000 l40101F24
	// succ:  l40101EFB l40101F24
l40101EFB:
	a0 = 0x40101EFE
	call fn402008B8 (retsize: 0;)
	a0 = -32
	// succ:  l40101F00
l40101F00:
	a8 = Mem0[a14 + 0x00000200:word32]
	a8 = a8 & a0
	Mem0[a14 + 0x00000200:word32] = a8
	a7 = Mem0[a14 + 0x00000200:word32]
	branch (a7 & 0x00000001) != 0x00000000 l40101F00
	// succ:  l40101F18 l40101F00
l40101F18:
	a4 = Mem0[a1 + 0x00000018:word32]
	a3 = Mem0[a1 + 0x00000014:word32]
	a5 = 0x401008A8
	a2 = Mem0[a1 + 0x00000010:word32]
	v15 = Mem0[a5 + 0x00000000:byte]
	a5 = (uint32) v15
	// succ:  l40101F24
l40101F24:
	a6 = 0x40101A84
	a2 = a2 + a2 * 0x00000008
	a2 = a6 + a2 * 0x00000004
	Mem0[a2 + 0x00000007:byte] = a13
	Mem0[a2 + 0x00000005:byte] = a3
	v16 = Mem0[a2 + 0x00000006:byte]
	a3 = (uint32) v16
	Mem0[a2 + 0x00000008:byte] = a12
	branch a12 <u a3 l40101F41
	// succ:  l40101F3C l40101F41
l40101F3C:
	branch a3 >=u a13 l40101F44
	// succ:  l40101F3F l40101F44
l40101F3F:
	a12 = a13
	// succ:  l40101F41
l40101F41:
	Mem0[a2 + 0x00000006:byte] = a12
	// succ:  l40101F44
l40101F44:
	Mem0[a2 + 0x00000018:word16] = a4
	branch a5 != 0x00000000 l40101F62
	// succ:  l40101F4A l40101F62
l40101F4A:
	a7 = Mem0[a14 + 0x00000200:word32]
	a8 = 0x00000001
	a7 = a7 & a0
	a7 = a7 | a8
	Mem0[a14 + 0x00000200:word32] = a7
	a0 = 0x40101F62
	call fn402008E0 (retsize: 0;)
	// succ:  l40101F62
l40101F62:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_lmacSetAcParam_exit
sdk_lmacSetAcParam_exit:


// sdk_lmacProcessTXStartData
// Return size: 0
void sdk_lmacProcessTXStartData()
sdk_lmacProcessTXStartData_entry:
	// succ:  l40101F70
l40101F70:
	a1 = fp
	a3 = a2 - 10
	a1 = a1 - 16
	a4 = 0x40101A70
	Mem0[a1 + 0x00000004:word32] = a0
	v7 = Mem0[a4 + 0x00000000:byte]
	a0 = (uint32) v7
	a5 = a2
	branch a3 != 0x00000000 l40101F83
	// succ:  l40101F80_1 l40101F83
l40101F80_1:
	a5 = a0
	// succ:  l40101F83
l40101F83:
	a0 = a5 & 0x000000FF
	branch a0 <u 0x00000008 l40101F9B
	// succ:  l40101F89 l40101F9B
l40101F89:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x00000238
	a0 = 0x40101F95
	call ets_printf (retsize: 0;)
l40101F9B:
	a3 = a4 + 48
	a0 = a0 + a0 * 0x00000008
	a0 = a3 + a0 * 0x00000004
	v10 = Mem0[a0 + 0x00000011:byte]
	a6 = (uint32) v10
	branch a6 == 1 l40101FBC
	// succ:  l40101FAA l40101FBC
l40101FAA:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x00000240
	a0 = 0x40101FB6
	call ets_printf (retsize: 0;)
	goto l40141FB6
	// succ:  l40141FB6
l40101FBC:
	Mem0[a4:byte] = a5
	Mem0[a1:word32] = a0
	branch a2 != 10 l40101FDA
	// succ:  l40101FC5 l40101FDA
l40101FC5:
	a2 = a0 | a0
	a3 = a4 | a4
	v11 = Mem0[a3 + 0x0000002C:byte]
	a3 = (uint32) v11
	a0 = 0x40101FD1
	call fn40201AE4 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a5 = 0x40101A70
	a4 = 0
	Mem0[a5 + 0x00000024:word32] = a4
	// succ:  l40101FDA
l40101FDA:
	a6 = Mem0[a0 + 0x00000000:word32]
	branch a6 != 0x00000000 l40101FED
	// succ:  l40101FDE l40101FED
l40101FDE:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x00000248
	a0 = 0x40101FEA
	call ets_printf (retsize: 0;)
	goto l40141FEA
	// succ:  l40141FEA
l40101FED:
	a2 = a0 | a0
	a7 = 0x00000002
	Mem0[a0 + 0x00000011:byte] = a7
	a0 = 0x40101FF9
	call fn40102004 (retsize: 0;)
	a0 = 0x40101FFC
	call sdk_lmacProcessCollisions (retsize: 0;)
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_lmacProcessTXStartData_exit
l40141FB6:
l40141FEA:
sdk_lmacProcessTXStartData_exit:


// fn40102004
// Return size: 0
void fn40102004()
fn40102004_entry:
	// succ:  l40102004
l40102004:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2 | a2
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000004:word32] = a0
	branch a2 != 0x00000000 l40102023
	// succ:  l40102014 l40102023
l40102014:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x0000025F
	a0 = 0x40102020
	call ets_printf (retsize: 0;)
l40102023:
	a4 = 0x40101A70
	a0 = Mem0[a4 + 0x00000028:word32]
	a3 = Mem0[a4 + 0x00000024:word32]
	branch a0 == 0x00000000 l4010203E
	// succ:  l4010202F l4010203E
l4010202F:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x00000260
	a0 = 0x4010203B
	call ets_printf (retsize: 0;)
	goto l4014203B
	// succ:  l4014203B
l4010203E:
	branch a3 == 0x00000000 l40102052
	// succ:  l40102040 l40102052
l40102040:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x00000261
	a0 = 0x4010204C
	call ets_printf (retsize: 0;)
	goto l4014204C
	// succ:  l4014204C
l40102052:
	Mem0[a4 + 0x00000028:word32] = a2
	a0 = Mem0[a2 + 0x00000020:word32]
	a6 = 0
	a5 = Mem0[a0 + 0x00000000:word32]
	Mem0[a12:word32] = a6
	branch (a5 & 0x10000000) != 0x00000000 l401020C7
	// succ:  l4010205F l401020C7
l4010205F:
	Mem0[a1:word32] = a2
	v11 = Mem0[a12 + 0x0000000B:byte]
	a7 = (uint32) v11
	v13 = Mem0[a12 + 0x00000018:uint16]
	a10 = (uint32) v13
	branch a7 != 0x00000000 l40102074
	// succ:  l40102069 l40102074
l40102069:
	v15 = Mem0[a12 + 0x00000014:int16]
	a8 = (int32) v15
	branch a8 < 1 l40102074
	// succ:  l4010206F l40102074
l4010206F:
	a9 = 1
	Mem0[a12 + 0x0000000D:byte] = a9
	// succ:  l40102074
l40102074:
	branch a10 == 0x00000000 l401020D0
	// succ:  l40102077 l401020D0
l40102077:
	v18 = Mem0[a12 + 0x0000000B:byte]
	a11 = (uint32) v18
	v19 = Mem0[a12 + 0x0000000C:byte]
	a2 = (uint32) v19
	branch a11 == 0x00000000 l40102081
	// succ:  l4010207F l40102081
l4010207F:
	branch a2 != 0x00000000 l40102087
	// succ:  l40102081 l40102087
l40102081:
	v20 = Mem0[a12 + 0x0000000D:byte]
	a3 = (uint32) v20
	branch a3 == 0x00000000 l401020D0
	// succ:  l40102087 l401020D0
l40102087:
	v21 = Mem0[a0 + 0x00000000:byte]
	a2 = (uint32) v21
	a2 = a2 >>u 0x00000002 & 0x0000000F
	a0 = 0x40102090
	call sdk_ppFetchTxQFirstAvail (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000020:word32]
	branch a2 == 0x00000000 l401020D0
	// succ:  l40102099 l401020D0
l40102099:
	a4 = Mem0[a0 + 0x00000000:word32]
	a5 = a4 >>u 6
	branch (a4 & 0x00010000) != 0x00000000 l401020BB
	// succ:  l401020A1 l401020BB
l401020A1:
	branch (a4 & 0x00000080) != 0x00000000 l401020BB
	// succ:  l401020A4 l401020BB
l401020A4:
	a3 = 0x40101A70
	Mem0[a3 + 0x00000024:word32] = a2
	a2 = a12
	a3 = 1
	a0 = 0x401020B0
	call fn40201B1C (retsize: 0;)
	a2 = a12
	a3 = 0x000000D4
	a0 = 0x401020B8
	call fn40201AA8 (retsize: 0;)
	goto l401020C7
	// succ:  l401020C7
l401020BB:
	branch (a5 & 0x00000020) == 0x00000000 l401020FE
	// succ:  l401020BE l401020FE
l401020BE:
	v23 = Mem0[a0 + 0x00000004:byte]
	a4 = (uint32) v23
	a4 = a4 >>u 4
	branch a4 >= 2 l401020FE
	// succ:  l401020C7 l401020FE
l401020C7:
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  fn40102004_exit fn40102004_exit
l401020D0:
	a4 = Mem0[a0 + 0x00000000:word32]
	branch (a4 & 0x00002000) == 0x00000000 l401020C7
	// succ:  l401020D6 l401020C7
l401020D6:
	branch (a4 & 0x00001000) != 0x00000000 l401020C7
	// succ:  l401020D9 l401020C7
l401020D9:
	v22 = Mem0[a0 + 0x00000000:byte]
	a2 = (uint32) v22
	a2 = a2 >>u 0x00000002 & 0x0000000F
	a0 = 0x401020E2
	call sdk_ppFetchTxQFirstAvail (retsize: 0;)
	branch a2 == 0x00000000 l401020C7
	// succ:  l401020E5 l401020C7
l401020E5:
	a3 = 0x40101A70
	Mem0[a3 + 0x00000024:word32] = a2
	a2 = a12 | a12
	a3 = 1
	a0 = 0x401020F3
	call fn40201B1C (retsize: 0;)
	a2 = a12
	a3 = 0x000000D4
	a0 = 0x401020FB
	call fn40201AA8 (retsize: 0;)
	goto l401420C7
	// succ:  l401420C7
l401020FE:
	Mem0[a12:word32] = a2
	a3 = 0x00000000
	a2 = a12 | a12
	a0 = 0x4010210A
	call fn40201B1C (retsize: 0;)
	v24 = Mem0[a12 + 0x00000004:byte]
	a2 = (uint32) v24
	a3 = 0
	a4 = 0
	a0 = 0x40102114
	call sdk_wDev_EnableTransmit (retsize: 0;)
	goto l401420C7
	// succ:  l401420C7
l4014203B:
l4014204C:
l401420C7:
fn40102004_exit:


// sdk_lmacProcessTxSuccess
// Return size: 0
void sdk_lmacProcessTxSuccess()
sdk_lmacProcessTxSuccess_entry:
	// succ:  l40102118
l40102118:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a3 | a3
	a0 = 0x40102127
	call fn40201A74 (retsize: 0;)
	branch a2 != 0x00000000 l40102138
	// succ:  l40102129 l40102138
l40102129:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x0000029C
	a0 = 0x40102135
	call ets_printf (retsize: 0;)
l40102138:
	a2 = 0x40101A70
	a0 = Mem0[a2 + 0x00000028:word32]
	v8 = Mem0[a2 + 0x00000000:byte]
	a4 = (uint32) v8
	branch a0 != 0x00000000 l40102154
	// succ:  l40102142 l40102154
l40102142:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x0000029F
	a0 = 0x4010214E
	call ets_printf (retsize: 0;)
	goto l4014214E
	// succ:  l4014214E
l40102154:
	v10 = Mem0[a2 + 0x00000000:byte]
	a5 = (uint32) v10
	a3 = a2 + 48
	a2 = a5 + a4 * 0x00000008
	a2 = a3 + a2 * 0x00000004
	v11 = Mem0[a2 + 0x00000011:byte]
	a3 = (uint32) v11
	branch a3 == 2 l40102178
	// succ:  l40102166 l40102178
l40102166:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x000002A0
	a0 = 0x40102172
	call ets_printf (retsize: 0;)
	goto l40142172
	// succ:  l40142172
l40102178:
	a0 = Mem0[a0 + 0x00000020:word32]
	a6 = 0
	a3 = Mem0[a0 + 0x00000000:word32]
	a8 = 0x00000402
	a7 = a3 >>u 6
	branch (a7 & a8) != 0x00000000 l4010218D
	// succ:  l40102187 l4010218D
l40102187:
	branch (a3 & 0x10000000) == 0x00000000 l401021DC
	// succ:  l4010218A l401021DC
l4010218A:
	branch (a3 & 0x02000000) != 0x00000000 l401021DC
	// succ:  l4010218D l401021DC
l4010218D:
	Mem0[a2 + 0x00000009:byte] = a6
	Mem0[a2 + 0x0000000A:byte] = a6
	a12 = 0x0000007F
	v16 = Mem0[a2 + 0x00000007:byte]
	a9 = (uint32) v16
	Mem0[a2 + 0x00000006:byte] = a9
	a10 = Mem0[a0 + 0x00000000:word32]
	Mem0[a0 + 0x00000009:byte] = a12
	branch (a10 & 0x00000800) == 0x00000000 l401021CF
	// succ:  l401021A5 l401021CF
l401021A5:
	v18 = Mem0[a0 + 0x00000004:byte]
	a5 = (uint32) v18
	a3 = a5 >>u 4
	branch a3 >= 2 l401021CF
	// succ:  l401021AE l401021CF
l401021AE:
	a12 = a3 + 1
	a11 = a5 & 0x0000000F
	a3 = 0x00000001
	a12 = a12 & 0x0000000F
	a12 = a12 << 28
	a11 = a11 | a12
	Mem0[a0 + 0x00000004:byte] = a11
	a0 = 0x401021C6
	call fn401023EC (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_lmacProcessTxSuccess_exit
l401021CF:
	a3 = 0
	a0 = 5
	Mem0[a2 + 0x00000011:byte] = a0
	a0 = 0x401021D9
	call fn401023EC (retsize: 0;)
	goto l401421C6
	// succ:  l401421C6
l401021DC:
	v20 = Mem0[a2 + 0x00000007:byte]
	a3 = (uint32) v20
	branch (a7 & 0x00000100) != 0x00000000 l401021EB
	// succ:  l401021E2 l401021EB
l401021E2:
	Mem0[a2 + 0x00000006:byte] = a3
	Mem0[a2 + 0x00000009:byte] = a6
	goto l4014219C
	// succ:  l4014219C
l401021EB:
	Mem0[a2 + 0x00000006:byte] = a3
	Mem0[a2 + 0x00000009:byte] = a6
	Mem0[a2 + 0x0000000A:byte] = a6
	goto l4014219C
	// succ:  l4014219C
l4014214E:
l40142172:
l4014219C:
l401421C6:
sdk_lmacProcessTxSuccess_exit:


// sdk_GetAccess
// Return size: 0
void sdk_GetAccess()
sdk_GetAccess_entry:
	// succ:  l40102260
l40102260:
	a1 = fp
	a3 = 0x40101A84
	a2 = a2 + a2 * 0x00000008
	a2 = a3 + a2 * 0x00000004
	return
	// succ:  sdk_GetAccess_exit
sdk_GetAccess_exit:


// sdk_lmacDiscardAgedMSDU
// Return size: 0
void sdk_lmacDiscardAgedMSDU()
sdk_lmacDiscardAgedMSDU_entry:
	// succ:  l4010226C
l4010226C:
	a1 = fp
	a5 = a4
	a1 = a1 - 16
	a4 = 4
	Mem0[a1:word32] = a0
	a0 = 0x40102278
	call fn402021F8 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_lmacDiscardAgedMSDU_exit
sdk_lmacDiscardAgedMSDU_exit:


// sdk_lmacRecycleMPDU
// Return size: 0
void sdk_lmacRecycleMPDU()
sdk_lmacRecycleMPDU_entry:
	// succ:  l40102280
l40102280:
	a1 = fp
	a6 = a2
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a2 = a3
	a0 = 1
	a3 = a4
	a5 = Mem0[a6 + 0x0000001C:word32]
	a4 = Mem0[a2 + 0x00000020:word32]
	a5 = a5 + 1
	Mem0[a6 + 0x0000001C:word32] = a5
	Mem0[a4 + 0x0000000F:byte] = a0
	a0 = 0x4010229B
	call fn40102EF0 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_lmacRecycleMPDU_exit
sdk_lmacRecycleMPDU_exit:


// fn401023EC
// Return size: 0
void fn401023EC()
fn401023EC_entry:
	// succ:  l401023EC
l401023EC:
	a1 = fp
	a4 = 3
	a5 = 0x00000094
	a1 = a1 - 48
	Mem0[a1 + 0x0000001C:word32] = a14
	Mem0[a1 + 0x00000010:word32] = a0
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x00000020:word32] = a15
	Mem0[a1 + 0x00000018:word32] = a13
	a15 = 0
	a13 = 0x40101A70
	a12 = a2
	v11 = Mem0[a12 + 0x00000011:byte]
	a0 = (uint32) v11
	a2 = a3
	a3 = 0x000000D4
	branch a2 != 0x00000000 l4010243A
	// succ:  l4010240F l4010243A
l4010240F:
	a14 = 1
	a2 = a0 - 6
	branch a2 != 0x00000000 l401024AA
	// succ:  l40102417 l401024AA
l40102417:
	Mem0[a12 + 0x00000011:byte] = a15
	a0 = Mem0[a13 + 0x00000028:word32]
	a2 = Mem0[a12 + 0x00000000:word32]
	branch a0 != 0x00000000 l401025A0
	// succ:  l40102421 l401025A0
l40102421:
	branch a2 == 0x00000000 l40102428
	// succ:  l40102423 l40102428
l40102423:
	a3 = Mem0[a13 + 0x00000024:word32]
	branch a3 == 0x00000000 l40102747
	// succ:  l40102428 l40102747
l40102428:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x0000034D
	a0 = 0x40102434
	call ets_printf (retsize: 0;)
l4010243A:
	branch a0 == 2 l40102452
	// succ:  l4010243D l40102452
l4010243D:
	branch a0 == 1 l40102452
	// succ:  l40102440 l40102452
l40102440:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x000003C0
	a0 = 0x4010244C
	call ets_printf (retsize: 0;)
	goto l4014244C
	// succ:  l4014244C
l40102452:
	a0 = Mem0[a13 + 0x00000028:word32]
	a6 = Mem0[a13 + 0x00000024:word32]
	branch a0 != 0x00000000 l40102471
	// succ:  l4010245B l40102471
l4010245B:
	a2 = a12
	a3 = 0
	a4 = 3
	Mem0[a12 + 0x00000011:byte] = a4
	a0 = 0x40102467
	call fn401029A4 (retsize: 0;)
	a14 = a2
	a0 = 5
	Mem0[a12 + 0x00000012:byte] = a0
	goto l401024DC
	// succ:  l401024DC
l40102471:
	branch a6 == 0x00000000 l40102493
	// succ:  l40102474 l40102493
l40102474:
	a7 = Mem0[a0 + 0x00000020:word32]
	a7 = Mem0[a7 + 0x00000000:word32]
	a2 = a12
	a7 = a7 >>u 0x00000019 & 0x00000001
	branch a7 == 0x00000000 l40102482
	// succ:  l4010247F_1 l40102482
l4010247F_1:
	a3 = a5
	// succ:  l40102482
l40102482:
	a0 = 0x40102485
	call fn40201AE4 (retsize: 0;)
	v20 = Mem0[a12 + 0x0000000E:byte]
	a8 = (uint32) v20
	a2 = Mem0[a13 + 0x00000024:word32]
	branch a8 != 0x00000000 l40102509
	// succ:  l4010248D l40102509
l4010248D:
	a0 = 0x40102490
	call sdk_ppRollBackTxQ (retsize: 0;)
	goto l4010250C
	// succ:  l4010250C
l40102493:
	a9 = Mem0[a12 + 0x00000000:word32]
	branch a9 == 0x00000000 l40102525
	// succ:  l40102498 l40102525
l40102498:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x000003D3
	a0 = 0x401024A4
	call ets_printf (retsize: 0;)
	goto l401424A4
	// succ:  l401424A4
l401024AA:
	branch a0 != 5 l401024C7
	// succ:  l401024AD l401024C7
l401024AD:
	a0 = Mem0[a13 + 0x00000028:word32]
	Mem0[a12 + 0x00000011:byte] = a15
	branch a0 != 0x00000000 l40102564
	// succ:  l401024B5 l40102564
l401024B5:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x0000037E
	a0 = 0x401024C1
	call ets_printf (retsize: 0;)
	goto l401424C1
	// succ:  l401424C1
l401024C7:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x000003BA
	a0 = 0x401024D3
	call ets_printf (retsize: 0;)
	goto l401424D3
	// succ:  l401424D3
l401024D9:
	a14 = 0x00000000
	// succ:  l401024DC
l401024DC:
	a0 = 0x00000000
	Mem0[a13 + 0x00000028:word32] = a15
	v15 = Mem0[a12 + 0x0000000D:byte]
	a10 = (uint32) v15
	a3 = Mem0[a13 + 0x00000024:word32]
	v17 = Mem0[a13 + 0x00000000:byte]
	a11 = (uint32) v17
	a2 = 8
	branch a14 != 0x00000000 l401024EF
	// succ:  l401024EC_1 l401024EF
l401024EC_1:
	a11 = a2
	// succ:  l401024EF
l401024EF:
	branch a0 != 0x00000000 l401024F2
	// succ:  l401024EF_2 l401024F2
l401024EF_2:
	a3 = a15
	// succ:  l401024F2
l401024F2:
	Mem0[a13 + 0x00000024:word32] = a3
	Mem0[a13:byte] = a11
	branch a10 == 0x00000000 l401025FB
	// succ:  l401024FA l401025FB
l401024FA:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x000003EB
	a0 = 0x40102506
	call ets_printf (retsize: 0;)
	goto l40142506
	// succ:  l40142506
l40102509:
	a0 = 0x4010250C
	call sdk_ppDiscardMPDU (retsize: 0;)
	// succ:  l4010250C
l4010250C:
	a2 = a12 | a12
	a3 = 0x00000000
	a4 = Mem0[a13 + 0x00000028:word32]
	a5 = 3
	Mem0[a12 + 0x00000011:byte] = a5
	Mem0[a12:word32] = a4
	a0 = 0x4010251E
	call fn401029A4 (retsize: 0;)
	a14 = a2
	a0 = 6
	goto l4014246B
	// succ:  l4014246B
l40102525:
	a2 = Mem0[a0 + 0x00000020:word32]
	a6 = Mem0[a2 + 0x00000000:word32]
	branch (a6 & 0x10000000) == 0x00000000 l40102549
	// succ:  l4010252E l40102549
l4010252E:
	v22 = Mem0[a2 + 0x00000004:byte]
	a2 = (uint32) v22
	a2 = a2 >>u 4
	branch a2 < 1 l40102549
	// succ:  l40102537 l40102549
l40102537:
	v23 = Mem0[a0 + 0x00000016:uint16]
	a6 = (uint32) v23
	v24 = Mem0[a0 + 0x00000014:uint16]
	a5 = (uint32) v24
	v25 = Mem0[a13 + 0x0000000E:uint16]
	a3 = (uint32) v25
	a5 = a5 + a6
	branch a3 < a5 l401024D9
	// succ:  l40102546 l401024D9
l40102546:
	branch a2 >= 3 l401024D9
	// succ:  l40102549 l401024D9
l40102549:
	Mem0[a12:word32] = a0
	v26 = Mem0[a12 + 0x0000000B:byte]
	a7 = (uint32) v26
	Mem0[a12 + 0x00000011:byte] = a4
	branch a7 == 0x00000000 l40102556
	// succ:  l40102553 l40102556
l40102553:
	Mem0[a12 + 0x0000000B:byte] = a15
	// succ:  l40102556
l40102556:
	a2 = a12
	a3 = 0
	a0 = 0x4010255D
	call fn401029A4 (retsize: 0;)
	a14 = a2
	a0 = 7
	goto l4014246B
	// succ:  l4014246B
l40102564:
	a8 = Mem0[a13 + 0x00000024:word32]
	branch a8 == 0x00000000 l401025BE
	// succ:  l4010256A l401025BE
l4010256A:
	a9 = Mem0[a0 + 0x00000020:word32]
	a9 = Mem0[a9 + 0x00000000:word32]
	a2 = a12
	a9 = a9 >>u 0x00000019 & 0x00000001
	branch a9 == 0x00000000 l40102578
	// succ:  l40102575_1 l40102578
l40102575_1:
	a3 = a5
	// succ:  l40102578
l40102578:
	Mem0[a13 + 0x0000002C:byte] = a3
	a3 = a14
	a0 = 0x40102580
	call fn40202328 (retsize: 0;)
	v36 = Mem0[a12 + 0x00000004:byte]
	a2 = (uint32) v36
	a10 = Mem0[a13 + 0x00000024:word32]
	Mem0[a12:word32] = a10
	a0 = 0x4010258A
	call sdk_Tx_Copy2Queue (retsize: 0;)
	Mem0[a12 + 0x00000011:byte] = a14
	Mem0[a12 + 0x00000012:byte] = a15
	a2 = a12
	a3 = Mem0[a13 + 0x00000028:word32]
	a4 = 0
	a0 = 0x40102599
	call fn40202280 (retsize: 0;)
	a0 = 1
	a14 = 1
	goto l401424DF
	// succ:  l401424DF
l401025A0:
	a11 = Mem0[a13 + 0x00000024:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a11 == 0x00000000 l40102629
	// succ:  l401025A9 l40102629
l401025A9:
	Mem0[a1 + 0x00000024:word32] = a0
	branch a2 == 0x00000000 l40102722
	// succ:  l401025AF l40102722
l401025AF:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x00000352
	a0 = 0x401025BB
	call ets_printf (retsize: 0;)
	goto l401425BB
	// succ:  l401425BB
l401025BE:
	a2 = Mem0[a12 + 0x00000000:word32]
	branch a2 != 0x00000000 l4010260A
	// succ:  l401025C4 l4010260A
l401025C4:
	a3 = Mem0[a0 + 0x00000020:word32]
	a3 = Mem0[a3 + 0x00000000:word32]
	a3 = a3 >>u 0x00000019 & 0x00000001
	branch a3 == 0x00000000 l401026F4
	// succ:  l401025CF l401026F4
l401025CF:
	a2 = a1
	a3 = a1 + 2
	a4 = a1 + 4
	a5 = a1 + 8
	a0 = 0x401025DA
	call sdk_wDev_GetBAInfo (retsize: 0;)
	a5 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a13 + 0x00000028:word32]
	a4 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a0 + 0x00000020:word32]
	v37 = Mem0[a1 + 0x00000002:uint16]
	a3 = (uint32) v37
	v38 = Mem0[a0 + 0x00000000:byte]
	a2 = (uint32) v38
	a6 = Mem0[a0 + 0x00000000:word32]
	a2 = a2 >>u 0x00000002 & 0x0000000F
	a6 = a6 >>u 0x0000001B & 0x00000001
	branch a6 != 0x00000000 l401026C8
	// succ:  l401025F3 l401026C8
l401025F3:
	a6 = 0
	a0 = 0x401025F8
	call sdk_ppTxqUpdateBitmap (retsize: 0;)
	goto l401026D7
	// succ:  l401026D7
l401025FB:
	a12 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x00000018:word32]
	a14 = Mem0[a1 + 0x0000001C:word32]
	a15 = Mem0[a1 + 0x00000020:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 48
	return
	// succ:  fn401023EC_exit
l4010260A:
	a2 = a12
	a3 = a14
	a0 = 0x40102611
	call fn40202328 (retsize: 0;)
	Mem0[a12 + 0x00000011:byte] = a14
	a3 = Mem0[a13 + 0x00000028:word32]
	a2 = 4
	a4 = 0
	Mem0[a12 + 0x00000012:byte] = a2
	a2 = a12
	a0 = 0x40102622
	call fn40202280 (retsize: 0;)
	a14 = 1
	a0 = 0
	goto l401424DF
	// succ:  l401424DF
l40102629:
	branch a2 != 0x00000000 l40102644
	// succ:  l4010262B l40102644
l4010262B:
	a2 = a12
	a3 = a15
	a0 = 0x40102632
	call fn40202328 (retsize: 0;)
	v27 = Mem0[a12 + 0x0000000B:byte]
	a3 = (uint32) v27
	branch a3 == 0x00000000 l4010263A
	// succ:  l40102637 l4010263A
l40102637:
	Mem0[a12 + 0x0000000B:byte] = a15
	// succ:  l4010263A
l4010263A:
	a14 = 0
	a4 = 10
	Mem0[a12 + 0x00000012:byte] = a4
	goto l40102659
	// succ:  l40102659
l40102644:
	a3 = a14 | a14
	a2 = a12 | a12
	a0 = 0x4010264D
	call fn40202328 (retsize: 0;)
	a14 = 1
	a5 = 13
	a6 = 1
	Mem0[a12 + 0x00000011:byte] = a6
	Mem0[a12 + 0x00000012:byte] = a5
	// succ:  l40102659
l40102659:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a0 + 0x00000020:word32]
	a7 = Mem0[a0 + 0x00000000:word32]
	branch (a7 & 0x08000000) == 0x00000000 l40102688
	// succ:  l40102662 l40102688
l40102662:
	v28 = Mem0[a0 + 0x00000000:byte]
	a2 = (uint32) v28
	v29 = Mem0[a0 + 0x00000004:byte]
	a3 = (uint32) v29
	a2 = a2 >>u 0x00000002 & 0x0000000F
	a3 = a3 >>u 4
	a3 = a3 + 2
	a3 = a3 & 0x000000FF
	a0 = 0x40102676
	call sdk_ppRecordBarRRC (retsize: 0;)
	a3 = Mem0[a1 + 0x0000000C:word32]
	a3 = Mem0[a3 + 0x00000020:word32]
	v30 = Mem0[a3 + 0x00000000:byte]
	a3 = (uint32) v30
	a2 = 6
	a3 = a3 >>u 0x00000002 & 0x0000000F
	a0 = 0x40102685
	call sdk_pp_post (retsize: 0;)
	goto l40142624
	// succ:  l40142624
l40102688:
	v31 = Mem0[a13 + 0x0000000D:byte]
	a6 = (uint32) v31
	v32 = Mem0[a12 + 0x00000011:byte]
	a8 = (uint32) v32
	a7 = 1
	v33 = Mem0[a0 + 0x00000005:byte]
	a2 = (uint32) v33
	a5 = 0
	a4 = a2 & 0x0000003F
	branch a8 != 0x00000000 l4010269B
	// succ:  l40102698_1 l4010269B
l40102698_1:
	a5 = a7
	// succ:  l4010269B
l4010269B:
	branch a4 <u a6 l401026AA
	// succ:  l4010269E l401026AA
l4010269E:
	a3 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12
	a4 = 2
	a0 = 0x401026A7
	call fn402021F8 (retsize: 0;)
	goto l40142624
	// succ:  l40142624
l401026AA:
	v34 = Mem0[a0 + 0x00000006:byte]
	a9 = (uint32) v34
	v35 = Mem0[a13 + 0x0000000C:byte]
	a10 = (uint32) v35
	a9 = a9 << 24
	a9 = a9 | a2
	a9 = a9 >>u 0x00000006 & 0x0000003F
	branch a9 <u a10 l40102716
	// succ:  l401026BC l40102716
l401026BC:
	a3 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12
	a4 = 3
	a0 = 0x401026C5
	call fn402021F8 (retsize: 0;)
	goto l40142624
	// succ:  l40142624
l401026C8:
	v40 = Mem0[a0 + 0x00000004:byte]
	a6 = (uint32) v40
	a6 = a6 >>u 4
	a6 = a6 + 1
	a6 = a6 & 0x000000FF
	a0 = 0x401026D7
	call sdk_ppTxqUpdateBitmap (retsize: 0;)
	// succ:  l401026D7
l401026D7:
	a3 = Mem0[a13 + 0x00000028:word32]
	a3 = Mem0[a3 + 0x00000020:word32]
	v39 = Mem0[a3 + 0x00000000:byte]
	a3 = (uint32) v39
	a2 = 6
	a3 = a3 >>u 0x00000002 & 0x0000000F
	a0 = 0x401026E7
	call sdk_pp_post (retsize: 0;)
	a2 = a12
	a3 = 0
	a0 = 0x401026EE
	call fn40202328 (retsize: 0;)
	Mem0[a12 + 0x00000012:byte] = a14
	goto l40102711
	// succ:  l40102711
l401026F4:
	a2 = a12
	a3 = a15
	a0 = 0x401026FB
	call fn40202328 (retsize: 0;)
	v41 = Mem0[a12 + 0x0000000B:byte]
	a4 = (uint32) v41
	branch a4 == 0x00000000 l40102703
	// succ:  l40102700 l40102703
l40102700:
	Mem0[a12 + 0x0000000B:byte] = a15
	// succ:  l40102703
l40102703:
	a2 = a12
	a3 = Mem0[a13 + 0x00000028:word32]
	a4 = 1
	a5 = 3
	Mem0[a12 + 0x00000012:byte] = a5
	a0 = 0x40102711
	call fn40202280 (retsize: 0;)
	// succ:  l40102711
l40102711:
	a14 = 0
	goto l40142624
	// succ:  l40142624
l40102716:
	a3 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12
	a4 = 4
	a0 = 0x4010271F
	call fn402021F8 (retsize: 0;)
	goto l40142624
	// succ:  l40142624
l40102722:
	a6 = Mem0[a0 + 0x00000020:word32]
	a2 = a12
	a6 = Mem0[a6 + 0x00000000:word32]
	a14 = a0
	a6 = a6 >>u 0x00000019 & 0x00000001
	branch a6 == 0x00000000 l40102730
	// succ:  l4010272D_1 l40102730
l4010272D_1:
	a3 = a5
	// succ:  l40102730
l40102730:
	a0 = 0x40102733
	call fn40201AE4 (retsize: 0;)
	a0 = Mem0[a14 + 0x00000020:word32]
	a0 = Mem0[a0 + 0x00000000:word32]
	branch (a0 & 0x00002000) == 0x00000000 l40102753
	// succ:  l4010273A l40102753
l4010273A:
	branch (a0 & 0x00001000) != 0x00000000 l40102753
	// succ:  l4010273D l40102753
l4010273D:
	a2 = a12
	a0 = 0x40102742
	call fn40202394 (retsize: 0;)
	a14 = 0
	goto l40142659
	// succ:  l40142659
l40102747:
	Mem0[a1 + 0x0000000C:word32] = a2
	a2 = a12
	a0 = 0x4010274E
	call fn40202338 (retsize: 0;)
	a14 = a2
	goto l40142659
	// succ:  l40142659
l40102753:
	a2 = a12
	a0 = 0x40102758
	call fn402023C8 (retsize: 0;)
	a14 = a2
	goto l40142659
	// succ:  l40142659
l4014244C:
l4014246B:
l401424A4:
l401424C1:
l401424D3:
l401424DF:
l40142506:
l401425BB:
l40142624:
l40142659:
fn401023EC_exit:


// sdk_lmacProcessCollisions
// Return size: 0
void sdk_lmacProcessCollisions()
sdk_lmacProcessCollisions_entry:
	// succ:  l40102760
l40102760:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1:word32] = a0
	a0 = 0x40102773
	call sdk_wDev_GetTxqCollisions (retsize: 0;)
	a12 = a2
	branch a2 == 0x00000000 l401027AD
	// succ:  l40102777 l401027AD
l40102777:
	a15 = 1
	goto l40102798
	// succ:  l40102798
l4010277C:
	a14 = a13 & 0x000000FF
	a2 = a14 | a14
	a0 = 0x40102785
	call sdk_wDev_ProcessCollision (retsize: 0;)
	a2 = a14
	a0 = 0x4010278A
	call sdk_lmacProcessCollision (retsize: 0;)
	a0 = -1
	SAR = 0x00000020 - a13
	a2 = a15 << SAR
	a2 = a2 ^ a0
	a12 = a12 & a2
	// succ:  l40102798
l40102798:
	a13 = -a12
	a13 = a13 & a12
	a13 = __nsau(a13)
	a13 = -a13
	a13 = a13 + 31
	branch a13 >= 0x00000000 l4010277C
	// succ:  l401027AA l4010277C
l401027AA:
	a0 = 0x401027AD
	call sdk_wDev_ClearTxqCollisions (retsize: 0;)
	// succ:  l401027AD
l401027AD:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_lmacProcessCollisions_exit
sdk_lmacProcessCollisions_exit:


// sdk_lmacProcessCollision
// Return size: 0
void sdk_lmacProcessCollision()
sdk_lmacProcessCollision_entry:
	// succ:  l401027BC
l401027BC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a2 <u 0x00000008 l401027D6
	// succ:  l401027C4 l401027D6
l401027C4:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x0000040B
	a0 = 0x401027D0
	call ets_printf (retsize: 0;)
l401027D6:
	a6 = 0x40101A84
	a2 = a2 + a2 * 0x00000008
	a2 = a6 + a2 * 0x00000004
	a3 = Mem0[a2 + 0x00000000:word32]
	branch a3 != 0x00000000 l401027F5
	// succ:  l401027E3 l401027F5
l401027E3:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x0000040D
	a0 = 0x401027EF
	call ets_printf (retsize: 0;)
	goto l401427EF
	// succ:  l401427EF
l401027F5:
	v8 = Mem0[a2 + 0x00000011:byte]
	a4 = (uint32) v8
	branch a4 == 1 l4010280D
	// succ:  l401027FB l4010280D
l401027FB:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x0000040E
	a0 = 0x40102807
	call ets_printf (retsize: 0;)
	goto l40142807
	// succ:  l40142807
l4010280D:
	a5 = Mem0[a3 + 0x00000020:word32]
	v11 = Mem0[a3 + 0x00000016:uint16]
	a9 = (uint32) v11
	a5 = Mem0[a5 + 0x00000000:word32]
	a7 = 0x00000300
	a5 = a5 >>u 6
	branch (a5 & a7) != 0x00000000 l40102838
	// succ:  l4010281F l40102838
l4010281F:
	v14 = Mem0[a3 + 0x00000014:uint16]
	a8 = (uint32) v14
	a7 = a6 - 48
	v15 = Mem0[a7 + 0x0000000E:uint16]
	a7 = (uint32) v15
	a8 = a8 + a9
	branch a7 >= a8 l40102838
	// succ:  l4010282E l40102838
l4010282E:
	a0 = 0x40102831
	call fn40102A7C (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_lmacProcessCollision_exit
l40102838:
	a4 = 1
	a0 = 0x4010283D
	call fn40102844 (retsize: 0;)
	goto l40142831
	// succ:  l40142831
l401427EF:
l40142807:
l40142831:
sdk_lmacProcessCollision_exit:


// sdk_lmacMSDUAged
// Return size: 0
void sdk_lmacMSDUAged()
sdk_lmacMSDUAged_entry:
	// succ:  l40102840
l40102840:
	a1 = fp
	a2 = 0
	return
	// succ:  sdk_lmacMSDUAged_exit
sdk_lmacMSDUAged_exit:


// fn40102844
// Return size: 0
void fn40102844()
fn40102844_entry:
	// succ:  l40102844
l40102844:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	a12 = a2
	a13 = a3
	branch a3 != 0x00000000 l40102865
	// succ:  l40102856 l40102865
l40102856:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x0000042B
	a0 = 0x40102862
	call ets_printf (retsize: 0;)
l40102865:
	a0 = 0x40101A70
	v10 = Mem0[a2 + 0x00000009:byte]
	a7 = (uint32) v10
	v11 = Mem0[a0 + 0x0000000D:byte]
	a2 = (uint32) v11
	a3 = a7
	branch a7 >=u a2 l4010287E
	// succ:  l40102873 l4010287E
l40102873:
	a3 = a7 + 1
	Mem0[a12 + 0x00000009:byte] = a3
	v12 = Mem0[a0 + 0x0000000D:byte]
	a2 = (uint32) v12
	a3 = a3 & 0x000000FF
	// succ:  l4010287E
l4010287E:
	branch a3 >=u a2 l40102892
	// succ:  l40102881 l40102892
l40102881:
	v13 = Mem0[a12 + 0x00000006:byte]
	a2 = (uint32) v13
	v15 = Mem0[a12 + 0x00000008:byte]
	a5 = (uint32) v15
	a6 = a2 + 1
	branch a2 >=u a5 l40102898
	// succ:  l4010288C l40102898
l4010288C:
	Mem0[a12 + 0x00000006:byte] = a6
	goto l40102898
	// succ:  l40102898
l40102892:
	v17 = Mem0[a12 + 0x00000007:byte]
	a7 = (uint32) v17
	Mem0[a12 + 0x00000006:byte] = a7
	// succ:  l40102898
l40102898:
	a11 = Mem0[a13 + 0x00000020:word32]
	v20 = Mem0[a0 + 0x00000000:byte]
	a8 = (uint32) v20
	v21 = Mem0[a11 + 0x00000005:byte]
	a2 = (uint32) v21
	a10 = 0x000000C0
	a10 = a2 & a10
	a2 = a2 & 0x0000003F
	a2 = a2 + 1
	a2 = a2 & 0x0000003F
	a10 = a10 | a2
	Mem0[a11 + 0x00000005:byte] = a10
	v24 = Mem0[a12 + 0x00000004:byte]
	a9 = (uint32) v24
	branch a8 != a9 l401028E6
	// succ:  l401028BC l401028E6
l401028BC:
	a2 = Mem0[a13 + 0x00000020:word32]
	v25 = Mem0[a2 + 0x00000004:byte]
	a7 = (uint32) v25
	v26 = Mem0[a2 + 0x00000005:byte]
	a11 = (uint32) v26
	a3 = a7 >>u 4
	branch a4 == 0x00000000 l401028D5
	// succ:  l401028CA l401028D5
l401028CA:
	a11 = a11 & 0x0000003F
	branch a3 >= a11 l401028E8
	// succ:  l401028D0 l401028E8
l401028D0:
	a4 = Mem0[a2 + 0x00000000:word32]
	branch (a4 & 0x10000000) != 0x00000000 l401028E8
	// succ:  l401028D5 l401028E8
l401028D5:
	a5 = a7 & 0x0000000F
	a6 = a3 + 1
	a6 = a6 & 0x0000000F
	a6 = a6 << 28
	a5 = a5 | a6
	Mem0[a2 + 0x00000004:byte] = a5
	// succ:  l401028E6
l401028E6:
	a2 = Mem0[a13 + 0x00000020:word32]
	// succ:  l401028E8
l401028E8:
	v27 = Mem0[a12 + 0x00000011:byte]
	a3 = (uint32) v27
	branch a3 == 2 l40102900
	// succ:  l401028EE l40102900
l401028EE:
	branch a3 == 1 l40102900
	// succ:  l401028F1 l40102900
l401028F1:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x0000043C
	a0 = 0x401028FD
	call ets_printf (retsize: 0;)
	goto l401428FD
	// succ:  l401428FD
l40102900:
	a0 = 0x40102903
	call sdk_rcReachRetryLimit (retsize: 0;)
	a0 = 0x40101A70
	branch a2 != 0x00000000 l40102923
	// succ:  l40102909 l40102923
l40102909:
	a7 = Mem0[a13 + 0x00000020:word32]
	v28 = Mem0[a7 + 0x00000005:byte]
	a7 = (uint32) v28
	v29 = Mem0[a0 + 0x0000000D:byte]
	a8 = (uint32) v29
	a7 = a7 & 0x0000003F
	branch a7 >=u a8 l40102923
	// succ:  l40102918 l40102923
l40102918:
	a2 = a13 | a13
	a0 = 0x4010291E
	call fn40202840 (retsize: 0;)
	a0 = 0x40101A70
	branch a2 == 0x00000000 l4010294B
	// succ:  l40102923 l4010294B
l40102923:
	v30 = Mem0[a12 + 0x00000004:byte]
	a9 = (uint32) v30
	a10 = 6
	v31 = Mem0[a0 + 0x00000000:byte]
	a8 = (uint32) v31
	Mem0[a12 + 0x00000011:byte] = a10
	branch a8 != a9 l4010293B
	// succ:  l40102931 l4010293B
l40102931:
	a2 = a12
	a3 = 0
	a0 = 0x40102938
	call fn402023EC (retsize: 0;)
	goto l40102940
	// succ:  l40102940
l4010293B:
	a2 = a12
	a0 = 0x40102940
	call fn402022A4 (retsize: 0;)
	// succ:  l40102940
l40102940:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn40102844_exit
l4010294B:
	v32 = Mem0[a12 + 0x00000004:byte]
	a2 = (uint32) v32
	v33 = Mem0[a0 + 0x00000000:byte]
	a11 = (uint32) v33
	branch a11 != a2 l4010297A
	// succ:  l40102954 l4010297A
l40102954:
	a3 = Mem0[a0 + 0x00000028:word32]
	branch a3 != a13 l40102970
	// succ:  l40102959 l40102970
l40102959:
	a0 = Mem0[a13 + 0x00000020:word32]
	a0 = Mem0[a0 + 0x00000000:word32]
	branch (a0 & 0x10000000) != 0x00000000 l40102970
	// succ:  l40102960 l40102970
l40102960:
	branch (a0 & 0x08000000) != 0x00000000 l40102970
	// succ:  l40102963 l40102970
l40102963:
	a3 = Mem0[a13 + 0x00000010:word32]
	v34 = Mem0[a3 + 0x00000001:byte]
	a2 = (uint32) v34
	a4 = 8
	a2 = a2 | a4
	Mem0[a3 + 0x00000001:byte] = a2
	// succ:  l40102970
l40102970:
	a2 = a12
	a3 = 1
	a0 = 0x40102977
	call fn402023EC (retsize: 0;)
	goto l40142940
	// succ:  l40142940
l4010297A:
	v35 = Mem0[a12 + 0x00000011:byte]
	a5 = (uint32) v35
	branch a5 == 1 l40102992
	// succ:  l40102980 l40102992
l40102980:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x0000045F
	a0 = 0x4010298C
	call ets_printf (retsize: 0;)
	goto l4014298C
	// succ:  l4014298C
l40102992:
	a2 = a12
	a3 = 0
	a6 = 4
	Mem0[a12 + 0x00000011:byte] = a6
	a0 = 0x4010299E
	call fn401029A4 (retsize: 0;)
	goto l40142940
	// succ:  l40142940
l401428FD:
l40142940:
l4014298C:
fn40102844_exit:


// fn401029A4
// Return size: 0
void fn401029A4()
fn401029A4_entry:
	// succ:  l401029A4
l401029A4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a0
	v5 = Mem0[a2 + 0x0000000E:byte]
	a0 = (uint32) v5
	a12 = a2
	branch a0 != 0x00000000 l401029DD
	// succ:  l401029B4 l401029DD
l401029B4:
	v7 = Mem0[a2 + 0x0000000B:byte]
	a0 = (uint32) v7
	branch a3 == 0x00000000 l401029F6
	// succ:  l401029BA l401029F6
l401029BA:
	branch a0 == 0x00000000 l40102A46
	// succ:  l401029BD l40102A46
l401029BD:
	v9 = Mem0[a2 + 0x00000004:byte]
	a2 = (uint32) v9
	a0 = 0x401029C3
	call sdk_Tx_Copy2Queue (retsize: 0;)
	a3 = 0
	a2 = 1
	a4 = 0
	Mem0[a12 + 0x00000011:byte] = a2
	v11 = Mem0[a12 + 0x00000004:byte]
	a2 = (uint32) v11
	a0 = 0x401029D2
	call sdk_wDev_EnableTransmit (retsize: 0;)
	a2 = 1
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  fn401029A4_exit
l401029DD:
	a3 = 0x00000000
	Mem0[a2 + 0x0000000E:byte] = a3
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x401029E9
	call sdk_ppDiscardMPDU (retsize: 0;)
	a2 = 0x00000000
	a4 = 0
	Mem0[a12:word32] = a4
	Mem0[a12 + 0x00000011:byte] = a4
l401029F6:
	branch a0 == 0x00000000 l40102A5B
	// succ:  l401029F9 l40102A5B
l401029F9:
	a2 = Mem0[a2 + 0x00000000:word32]
	a3 = Mem0[a2 + 0x00000020:word32]
	a2 = Mem0[a2 + 0x00000018:word32]
	v13 = Mem0[a3 + 0x00000006:uint16]
	a4 = (uint32) v13
	v15 = Mem0[a3 + 0x00000008:byte]
	a5 = (uint32) v15
	Mem0[a1:word32] = a5
	a4 = a4 >>u 7
	Mem0[a12 + 0x00000016:word16] = a4
	a0 = 0x40102A12
	call sdk_rcGetRate (retsize: 0;)
	a2 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a2 + 0x00000020:word32]
	a7 = Mem0[a1 + 0x00000000:word32]
	v18 = Mem0[a0 + 0x00000008:byte]
	a6 = (uint32) v18
	branch a6 == a7 l40102A25
	// succ:  l40102A1E l40102A25
l40102A1E:
	a0 = 0x40102A21
	call sdk_ppCalFrameTimes (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000020:word32]
	// succ:  l40102A25
l40102A25:
	v20 = Mem0[a12 + 0x00000016:int16]
	a2 = (int32) v20
	v21 = Mem0[a0 + 0x00000006:uint16]
	a4 = (uint32) v21
	v22 = Mem0[a0 + 0x0000000A:uint16]
	a3 = (uint32) v22
	a4 = a4 >>u 7
	a3 = a3 - a4
	a2 = a2 + a3
	Mem0[a12 + 0x00000016:word16] = a2
	a2 = a12 | a12
	a0 = 0x40102A40
	call fn40102EC4 (retsize: 0;)
	a2 = 0x00000001
	goto l401429D4
	// succ:  l401429D4
l40102A46:
	a3 = 0x00000000
	a0 = 0x40102A4C
	call fn40202328 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000000:word32]
	v12 = Mem0[a12 + 0x00000004:byte]
	a3 = (uint32) v12
	a0 = 0x40102A55
	call sdk_lmacTxFrame (retsize: 0;)
	a2 = 0x00000000
	goto l401429D4
	// succ:  l401429D4
l40102A5B:
	a3 = 0x00000000
	a0 = 0x40102A61
	call fn40202328 (retsize: 0;)
	a3 = Mem0[a12 + 0x00000000:word32]
	a2 = Mem0[a3 + 0x00000018:word32]
	a3 = Mem0[a3 + 0x00000020:word32]
	a0 = 0x40102A6B
	call sdk_rcGetRate (retsize: 0;)
	a2 = Mem0[a12 + 0x00000000:word32]
	v19 = Mem0[a12 + 0x00000004:byte]
	a3 = (uint32) v19
	a0 = 0x40102A73
	call sdk_lmacTxFrame (retsize: 0;)
	a2 = 0
	// succ:  l401429D4
l401429D4:
fn401029A4_exit:


// fn40102A7C
// Return size: 0
void fn40102A7C()
fn40102A7C_entry:
	// succ:  l40102A7C
l40102A7C:
	a1 = fp
	a1 = a1 - 16
	v4 = Mem0[a2 + 0x0000000A:byte]
	a5 = (uint32) v4
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	a13 = 0x40101A70
	a12 = a2
	v9 = Mem0[a13 + 0x0000000C:byte]
	a0 = (uint32) v9
	a2 = a5
	branch a5 >=u a0 l40102AA0
	// succ:  l40102A95 l40102AA0
l40102A95:
	a2 = a5 + 1
	Mem0[a12 + 0x0000000A:byte] = a2
	v10 = Mem0[a13 + 0x0000000C:byte]
	a0 = (uint32) v10
	a2 = a2 & 0x000000FF
	// succ:  l40102AA0
l40102AA0:
	branch a2 >=u a0 l40102AB4
	// succ:  l40102AA3 l40102AB4
l40102AA3:
	v11 = Mem0[a12 + 0x00000006:byte]
	a0 = (uint32) v11
	v13 = Mem0[a12 + 0x00000008:byte]
	a3 = (uint32) v13
	a4 = a0 + 1
	branch a0 >=u a3 l40102ABA
	// succ:  l40102AAE l40102ABA
l40102AAE:
	Mem0[a12 + 0x00000006:byte] = a4
	goto l40102ABA
	// succ:  l40102ABA
l40102AB4:
	v15 = Mem0[a12 + 0x00000007:byte]
	a5 = (uint32) v15
	Mem0[a12 + 0x00000006:byte] = a5
	// succ:  l40102ABA
l40102ABA:
	a2 = Mem0[a13 + 0x00000028:word32]
	v17 = Mem0[a13 + 0x00000000:byte]
	a6 = (uint32) v17
	a9 = Mem0[a2 + 0x00000020:word32]
	a8 = 0x40102A78
	v21 = Mem0[a9 + 0x00000006:byte]
	a10 = (uint32) v21
	v23 = Mem0[a9 + 0x00000005:byte]
	a11 = (uint32) v23
	a10 = a10 << 24
	a10 = a10 | a11
	a8 = a10 & a8
	a10 = a10 >>u 0x00000006 & 0x0000003F
	a10 = a10 + 1
	a10 = a10 & 0x0000003F
	a10 = a10 << 26
	a8 = a8 | a10
	Mem0[a9 + 0x00000005:byte] = a8
	a8 = a8 >>u 8
	Mem0[a9 + 0x00000006:byte] = a8
	v25 = Mem0[a12 + 0x00000004:byte]
	a7 = (uint32) v25
	branch a6 != a7 l40102B09
	// succ:  l40102AF0 l40102B09
l40102AF0:
	a0 = Mem0[a2 + 0x00000020:word32]
	v26 = Mem0[a0 + 0x00000004:byte]
	a3 = (uint32) v26
	a11 = a3 & 0x0000000F
	a3 = a3 >>u 4
	a3 = a3 + 1
	a3 = a3 & 0x0000000F
	a3 = a3 << 28
	a11 = a11 | a3
	Mem0[a0 + 0x00000004:byte] = a11
	// succ:  l40102B09
l40102B09:
	v27 = Mem0[a12 + 0x00000011:byte]
	a0 = (uint32) v27
	branch a0 == 2 l40102B24
	// succ:  l40102B0F l40102B24
l40102B0F:
	branch a0 == 1 l40102B24
	// succ:  l40102B12 l40102B24
l40102B12:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x000004B1
	a0 = 0x40102B1E
	call ets_printf (retsize: 0;)
l40102B24:
	a2 = Mem0[a2 + 0x00000020:word32]
	a0 = 0x40102B2A
	call sdk_rcReachRetryLimit (retsize: 0;)
	branch a2 != 0x00000000 l40102B4C
	// succ:  l40102B2D l40102B4C
l40102B2D:
	a2 = Mem0[a13 + 0x00000028:word32]
	a6 = Mem0[a2 + 0x00000020:word32]
	v28 = Mem0[a13 + 0x0000000C:byte]
	a5 = (uint32) v28
	v29 = Mem0[a6 + 0x00000006:byte]
	a4 = (uint32) v29
	v30 = Mem0[a6 + 0x00000005:byte]
	a6 = (uint32) v30
	a4 = a4 << 24
	a4 = a4 | a6
	a4 = a4 >>u 0x00000006 & 0x0000003F
	branch a4 >=u a5 l40102B4C
	// succ:  l40102B47 l40102B4C
l40102B47:
	a0 = 0x40102B4A
	call fn40202840 (retsize: 0;)
	branch a2 == 0x00000000 l40102B74
	// succ:  l40102B4C l40102B74
l40102B4C:
	v31 = Mem0[a12 + 0x00000004:byte]
	a8 = (uint32) v31
	a9 = 6
	v32 = Mem0[a13 + 0x00000000:byte]
	a7 = (uint32) v32
	Mem0[a12 + 0x00000011:byte] = a9
	branch a7 != a8 l40102B64
	// succ:  l40102B5A l40102B64
l40102B5A:
	a2 = a12
	a3 = 0
	a0 = 0x40102B61
	call fn402023EC (retsize: 0;)
	goto l40102B69
	// succ:  l40102B69
l40102B64:
	a2 = a12
	a0 = 0x40102B69
	call fn402022A4 (retsize: 0;)
	// succ:  l40102B69
l40102B69:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn40102A7C_exit
l40102B74:
	v33 = Mem0[a12 + 0x00000004:byte]
	a11 = (uint32) v33
	v34 = Mem0[a13 + 0x00000000:byte]
	a10 = (uint32) v34
	branch a10 != a11 l40102B9D
	// succ:  l40102B7D l40102B9D
l40102B7D:
	a2 = Mem0[a13 + 0x00000028:word32]
	a0 = Mem0[a2 + 0x00000020:word32]
	a0 = Mem0[a0 + 0x00000000:word32]
	branch (a0 & 0x10000000) != 0x00000000 l40102B93
	// succ:  l40102B86 l40102B93
l40102B86:
	a4 = Mem0[a2 + 0x00000010:word32]
	v35 = Mem0[a4 + 0x00000001:byte]
	a3 = (uint32) v35
	a5 = 8
	a3 = a3 | a5
	Mem0[a4 + 0x00000001:byte] = a3
	// succ:  l40102B93
l40102B93:
	a2 = a12
	a3 = 1
	a0 = 0x40102B9A
	call fn402023EC (retsize: 0;)
	goto l40142B69
	// succ:  l40142B69
l40102B9D:
	v36 = Mem0[a12 + 0x00000011:byte]
	a6 = (uint32) v36
	branch a6 == 1 l40102BB5
	// succ:  l40102BA3 l40102BB5
l40102BA3:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x000004C7
	a0 = 0x40102BAF
	call ets_printf (retsize: 0;)
	goto l40142BAF
	// succ:  l40142BAF
l40102BB5:
	a2 = a12
	a3 = 0
	a7 = 4
	Mem0[a12 + 0x00000011:byte] = a7
	a0 = 0x40102BC1
	call fn402029A4 (retsize: 0;)
	// succ:  l40142B69
l40142B69:
l40142BAF:
fn40102A7C_exit:


// sdk_lmacProcessCtsTimeout
// Return size: 0
void sdk_lmacProcessCtsTimeout()
sdk_lmacProcessCtsTimeout_entry:
	// succ:  l40102BC4
l40102BC4:
	a1 = fp
	a3 = 0x40101A84
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = a2 + a2 * 0x00000008
	a2 = a3 + a0 * 0x00000004
	a3 = Mem0[a2 + 0x00000000:word32]
	branch a3 != 0x00000000 l40102BE8
	// succ:  l40102BD9 l40102BE8
l40102BD9:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x000004DD
	a0 = 0x40102BE5
	call ets_printf (retsize: 0;)
l40102BE8:
	v7 = Mem0[a2 + 0x00000011:byte]
	a4 = (uint32) v7
	branch a4 == 1 l40102C00
	// succ:  l40102BEE l40102C00
l40102BEE:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x000004DE
	a0 = 0x40102BFA
	call ets_printf (retsize: 0;)
	goto l40142BFA
	// succ:  l40142BFA
l40102C00:
	a4 = 1
	a0 = 0x40102C05
	call fn40202844 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_lmacProcessCtsTimeout_exit
l40142BFA:
sdk_lmacProcessCtsTimeout_exit:


// sdk_lmacProcessAckTimeout
// Return size: 0
void sdk_lmacProcessAckTimeout()
sdk_lmacProcessAckTimeout_entry:
	// succ:  l40102C0C
l40102C0C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40102C14
	call fn40201A74 (retsize: 0;)
	branch a2 != 0x00000000 l40102C28
	// succ:  l40102C16 l40102C28
l40102C16:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x000004EF
	a0 = 0x40102C22
	call ets_printf (retsize: 0;)
l40102C28:
	a4 = 0x40101A70
	a3 = Mem0[a4 + 0x00000028:word32]
	v7 = Mem0[a4 + 0x00000000:byte]
	a2 = (uint32) v7
	v9 = Mem0[a4 + 0x00000000:byte]
	a5 = (uint32) v9
	a0 = Mem0[a3 + 0x00000020:word32]
	a4 = a4 + 48
	a2 = a5 + a2 * 0x00000008
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a4 + a2 * 0x00000004
	branch (a0 & 0x00004000) == 0x00000000 l40102C54
	// succ:  l40102C43 l40102C54
l40102C43:
	a6 = 0
	v12 = Mem0[a2 + 0x00000007:byte]
	a7 = (uint32) v12
	Mem0[a2 + 0x00000006:byte] = a7
	Mem0[a2 + 0x00000009:byte] = a6
	a0 = 0x40102C51
	call fn40202A7C (retsize: 0;)
	goto l40102C59
	// succ:  l40102C59
l40102C54:
	a4 = 0
	a0 = 0x40102C59
	call fn40202844 (retsize: 0;)
	// succ:  l40102C59
l40102C59:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_lmacProcessAckTimeout_exit
sdk_lmacProcessAckTimeout_exit:


// sdk_lmacProcessRtsStart
// Return size: 0
void sdk_lmacProcessRtsStart()
sdk_lmacProcessRtsStart_entry:
	// succ:  l40102C60
l40102C60:
	a1 = fp
	a3 = 0x40101A70
	Mem0[a3:byte] = a2
	return
	// succ:  sdk_lmacProcessRtsStart_exit
sdk_lmacProcessRtsStart_exit:


// sdk_lmacProcessTxRtsError
// Return size: 0
void sdk_lmacProcessTxRtsError()
sdk_lmacProcessTxRtsError_entry:
	// succ:  l40102C6C
l40102C6C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	a12 = a2
	a13 = a3
	a0 = 0x40102C7F
	call fn40201A74 (retsize: 0;)
	branch a2 != 0x00000000 l40102C90
	// succ:  l40102C81 l40102C90
l40102C81:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x0000050C
	a0 = 0x40102C8D
	call ets_printf (retsize: 0;)
l40102C90:
	a0 = 0x40101A70
	v9 = Mem0[a0 + 0x00000000:byte]
	a0 = (uint32) v9
	branch a13 == a0 l40102CAB
	// succ:  l40102C99 l40102CAB
l40102C99:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x0000050D
	a0 = 0x40102CA5
	call ets_printf (retsize: 0;)
	goto l40142CA5
	// succ:  l40142CA5
l40102CAB:
	branch a12 == 1 l40102CEE
	// succ:  l40102CAE l40102CEE
l40102CAE:
	branch a12 == 3 l40102CEE
	// succ:  l40102CB1 l40102CEE
l40102CB1:
	a2 = 17
	branch a2 < a12 l40102CB9
	// succ:  l40102CB6 l40102CB9
l40102CB6:
	branch a12 >= 16 l40102CD8
	// succ:  l40102CB9 l40102CD8
l40102CB9:
	a3 = 0x000000C0
	branch a12 == a3 l40102CD8
	// succ:  l40102CBF l40102CD8
l40102CBF:
	a2 = 0x40102C68
	a3 = a12
	a0 = 0x40102CC7
	call ets_printf (retsize: 0;)
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x00000520
	a0 = 0x40102CD3
	call ets_printf (retsize: 0;)
	goto l40142CD3
	// succ:  l40142CD3
l40102CD8:
	a4 = 6
	a3 = 0x40101A84
	a2 = a0 + a0 * 0x00000008
	a2 = a3 + a2 * 0x00000004
	Mem0[a2 + 0x00000011:byte] = a4
	a3 = 0
	a0 = 0x40102CEB
	call fn402023EC (retsize: 0;)
	goto l40102CF3
	// succ:  l40102CF3
l40102CEE:
	a2 = a13
	a0 = 0x40102CF3
	call fn40202BC4 (retsize: 0;)
	// succ:  l40102CF3
l40102CF3:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_lmacProcessTxRtsError_exit
l40142CA5:
l40142CD3:
sdk_lmacProcessTxRtsError_exit:


// sdk_lmacProcessTxError
// Return size: 0
void sdk_lmacProcessTxError()
sdk_lmacProcessTxError_entry:
	// succ:  l40102D04
l40102D04:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2 | a2
	a0 = 0x40102D13
	call fn40201A74 (retsize: 0;)
	branch a2 != 0x00000000 l40102D24
	// succ:  l40102D15 l40102D24
l40102D15:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x00000533
	a0 = 0x40102D21
	call ets_printf (retsize: 0;)
l40102D24:
	branch a12 == 1 l40102D76
	// succ:  l40102D27 l40102D76
l40102D27:
	branch a12 == 3 l40102D76
	// succ:  l40102D2A l40102D76
l40102D2A:
	a0 = 0x00000011
	branch a0 < a12 l40102D33
	// succ:  l40102D30 l40102D33
l40102D30:
	branch a12 >= 16 l40102D57
	// succ:  l40102D33 l40102D57
l40102D33:
	a2 = 0x000000C1
	branch a2 < a12 l40102D3F
	// succ:  l40102D39 l40102D3F
l40102D39:
	a3 = 0x000000C0
	branch a12 >= a3 l40102D57
	// succ:  l40102D3F l40102D57
l40102D3F:
	a2 = 0x40102D00
	a3 = a12 | a12
	a0 = 0x40102D48
	call ets_printf (retsize: 0;)
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x00000548
	a0 = 0x40102D54
	call ets_printf (retsize: 0;)
	goto l40142D54
	// succ:  l40142D54
l40102D57:
	a3 = 0
	a5 = 0x40101A70
	a4 = 6
	v9 = Mem0[a5 + 0x00000000:byte]
	a2 = (uint32) v9
	v11 = Mem0[a5 + 0x00000000:byte]
	a6 = (uint32) v11
	a5 = a5 + 48
	a2 = a6 + a2 * 0x00000008
	a2 = a5 + a2 * 0x00000004
	Mem0[a2 + 0x00000011:byte] = a4
	a0 = 0x40102D73
	call fn402023EC (retsize: 0;)
	goto l40102D79
	// succ:  l40102D79
l40102D76:
	a0 = 0x40102D79
	call fn40202C0C (retsize: 0;)
	// succ:  l40102D79
l40102D79:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_lmacProcessTxError_exit
l40142D54:
sdk_lmacProcessTxError_exit:


// sdk_lmacTxFrame
// Return size: 0
void sdk_lmacTxFrame()
sdk_lmacTxFrame_entry:
	// succ:  l40102D88
l40102D88:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = 0x40101A84
	a12 = a3 + a3 * 0x00000008
	a12 = a0 + a12 * 0x00000004
	v6 = Mem0[a12 + 0x00000011:byte]
	a0 = (uint32) v6
	branch a0 == 0x00000000 l40102DB5
	// succ:  l40102DA0 l40102DB5
l40102DA0:
	branch a0 == 3 l40102DB5
	// succ:  l40102DA3 l40102DB5
l40102DA3:
	branch a0 == 4 l40102DCE
	// succ:  l40102DA6 l40102DCE
l40102DA6:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x000005E7
	a0 = 0x40102DB2
	call ets_printf (retsize: 0;)
l40102DB5:
	branch a0 == 4 l40102DCE
	// succ:  l40102DB8 l40102DCE
l40102DB8:
	Mem0[a12:word32] = a2
	branch a2 != 0x00000000 l40102DE8
	// succ:  l40102DBC l40102DE8
l40102DBC:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x000005EF
	a0 = 0x40102DC8
	call ets_printf (retsize: 0;)
	goto l40142DC8
	// succ:  l40142DC8
l40102DCE:
	a3 = Mem0[a12 + 0x00000000:word32]
	a3 = a3 - a2
	branch a3 == 0x00000000 l40102E91
	// succ:  l40102DD6 l40102E91
l40102DD6:
	a2 = 0x40101AA0
	a3 = 0x40101AA4
	a4 = 0x000005EA
	a0 = 0x40102DE2
	call ets_printf (retsize: 0;)
	goto l40142DE2
	// succ:  l40142DE2
l40102DE8:
	a8 = 0x00000100
	v18 = Mem0[a2 + 0x00000016:uint16]
	a6 = (uint32) v18
	v19 = Mem0[a2 + 0x00000014:uint16]
	a5 = (uint32) v19
	a7 = 0x40102D84
	a5 = a5 + a6
	a6 = Mem0[a2 + 0x00000020:word32]
	a4 = 0x40101A70
	a3 = Mem0[a6 + 0x00000000:word32]
	v20 = Mem0[a4 + 0x0000000E:uint16]
	a4 = (uint32) v20
	a0 = a3 >>u 6
	branch a4 >= a5 l40102E29
	// succ:  l40102E06 l40102E29
l40102E06:
	branch (a3 & 0x00000080) != 0x00000000 l40102E29
	// succ:  l40102E09 l40102E29
l40102E09:
	a5 = a0 | a8
	a4 = a3 & 0x0000003F
	a5 = a5 << 26
	a4 = a4 | a5
	a3 = a4 & 0x0000003F
	a4 = a4 >>u 6
	a4 = a4 & a7
	a4 = a4 << 26
	a3 = a3 | a4
	Mem0[a6:word32] = a3
	a0 = a3 >>u 6
	// succ:  l40102E29
l40102E29:
	branch (a0 & 0x00001000) == 0x00000000 l40102E8A
	// succ:  l40102E2C l40102E8A
l40102E2C:
	v22 = Mem0[a12 + 0x00000011:byte]
	a9 = (uint32) v22
	branch a9 != 3 l40102E8A
	// succ:  l40102E32 l40102E8A
l40102E32:
	v24 = Mem0[a6 + 0x00000004:byte]
	a10 = (uint32) v24
	a10 = a10 >>u 4
	branch a10 < 3 l40102E8A
	// succ:  l40102E3B l40102E8A
l40102E3B:
	a4 = 0x40102A78
	a9 = a3 & 0x0000003F
	v25 = Mem0[a6 + 0x00000005:byte]
	a5 = (uint32) v25
	a10 = a0 | a8
	a10 = a10 << 26
	a11 = a5 & 0x0000003F
	a9 = a9 | a10
	a10 = a9 >>u 6
	a10 = a10 & a7
	a9 = a9 & 0x0000003F
	a10 = a10 << 26
	a9 = a9 | a10
	v26 = Mem0[a6 + 0x00000006:byte]
	a10 = (uint32) v26
	a11 = a11 << 26
	a10 = a10 << 24
	a10 = a10 | a5
	a10 = a10 & a4
	a10 = a10 | a11
	Mem0[a6 + 0x00000005:byte] = a10
	a10 = a10 >>u 8
	Mem0[a6 + 0x00000006:byte] = a10
	a4 = Mem0[a2 + 0x00000020:word32]
	Mem0[a6:word32] = a9
	v27 = Mem0[a4 + 0x00000005:byte]
	a11 = (uint32) v27
	a5 = 0x000000C0
	a11 = a11 & a5
	Mem0[a4 + 0x00000005:byte] = a11
	// succ:  l40102E8A
l40102E8A:
	a2 = a12
	a3 = 0
	a0 = 0x40102E91
	call fn40201B40 (retsize: 0;)
	// succ:  l40102E91
l40102E91:
	v10 = Mem0[a12 + 0x00000006:byte]
	a11 = (uint32) v10
	Mem0[a1:word32] = a11
	a0 = 0x40102E9A
	call rand (retsize: 0;)
	v11 = Mem0[a12 + 0x00000005:byte]
	a3 = (uint32) v11
	a7 = Mem0[a1 + 0x00000000:word32]
	a6 = 31
	a5 = 1
	Mem0[a12 + 0x00000011:byte] = a5
	a6 = a6 - a7
	SAR = a6
	a4 = a0 >> SAR
	v16 = Mem0[a12 + 0x00000004:byte]
	a2 = (uint32) v16
	a4 = a4 & 0x0000FFFF
	a0 = 0x40102EB9
	call sdk_wDev_EnableTransmit (retsize: 0;)
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_lmacTxFrame_exit
l40142DC8:
l40142DE2:
sdk_lmacTxFrame_exit:


// fn40102EC4
// Return size: 0
void fn40102EC4()
fn40102EC4_entry:
	// succ:  l40102EC4
l40102EC4:
	a1 = fp
	a3 = 0x00000000
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	a0 = 0x40102ED5
	call fn40201B40 (retsize: 0;)
	v7 = Mem0[a12 + 0x00000004:byte]
	a2 = (uint32) v7
	a3 = 0
	a4 = 0
	a0 = 1
	Mem0[a12 + 0x00000011:byte] = a0
	a0 = 0x40102EE4
	call sdk_wDev_EnableTransmit (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn40102EC4_exit
fn40102EC4_exit:


// fn40102EF0
// Return size: 0
void fn40102EF0()
fn40102EF0_entry:
	// succ:  l40102EF0
l40102EF0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a0
	a12 = a2
	a0 = 0x40102EFE
	call sdk_ppEnqueueTxDone (retsize: 0;)
	a3 = Mem0[a12 + 0x00000020:word32]
	a0 = Mem0[a3 + 0x00000000:word32]
	branch (a0 & 0x00000200) == 0x00000000 l40102F0D
	// succ:  l40102F05 l40102F0D
l40102F05:
	branch (a0 & 0x10000000) != 0x00000000 l40102F0D
	// succ:  l40102F08 l40102F0D
l40102F08:
	a2 = Mem0[a12 + 0x00000018:word32]
	a0 = 0x40102F0D
	call sdk_rcUpdateTxDone (retsize: 0;)
	// succ:  l40102F0D
l40102F0D:
	a2 = 4
	a3 = 0
	a0 = 0x40102F14
	call sdk_pp_post (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	branch a0 == 0x00000000 l40102F30
	// succ:  l40102F18 l40102F30
l40102F18:
	a2 = Mem0[a12 + 0x00000020:word32]
	v7 = Mem0[a2 + 0x00000006:byte]
	a2 = (uint32) v7
	a2 = a2 >>u 0x00000004 & 0x00000007
	a0 = 0x40102F23
	call fn40201A88 (retsize: 0;)
	branch a2 == 0x00000000 l40102F30
	// succ:  l40102F25 l40102F30
l40102F25:
	a2 = Mem0[a12 + 0x00000020:word32]
	v8 = Mem0[a2 + 0x00000006:byte]
	a2 = (uint32) v8
	a2 = a2 >>u 0x00000004 & 0x00000007
	a0 = 0x40102F30
	call sdk_ppProcessTxQ (retsize: 0;)
	// succ:  l40102F30
l40102F30:
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  fn40102EF0_exit
fn40102EF0_exit:


// sdk_lmacRxDone
// Return size: 0
void sdk_lmacRxDone()
sdk_lmacRxDone_entry:
	// succ:  l40102F3C
l40102F3C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40102F45
	call sdk_ppEnqueueRxq (retsize: 0;)
	a2 = 0x00000005
	a3 = 0
	a0 = 0x40102F4D
	call sdk_pp_post (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_lmacRxDone_exit
sdk_lmacRxDone_exit:


// sdk_pp_soft_wdt_feed
// Return size: 0
void sdk_pp_soft_wdt_feed()
sdk_pp_soft_wdt_feed_entry:
	// succ:  l40102F84
l40102F84:
	a1 = fp
	a8 = EXCCAUSE
	a7 = EPC1
	a1 = a1 - 48
	Mem0[a1 + 0x00000020:word32] = a0
	a6 = EPC2
	a0 = 1
	a5 = EPC3
	a4 = EXCVADDR
	a3 = DEPC
sdk_pp_soft_wdt_feed_exit:


// sdk_ppProcessTxQ
// Return size: 0
void sdk_ppProcessTxQ()
sdk_ppProcessTxQ_entry:
	// succ:  l40103098
l40103098:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = 0x401008A8
	a12 = a2
	v7 = Mem0[a0 + 0x00000000:byte]
	a0 = (uint32) v7
	a13 = 0x401019AC
	branch a0 != 0x00000000 l401030CE
	// succ:  l401030B1 l401030CE
l401030B1:
	a0 = 0x401030B4
	call fn402008B8 (retsize: 0;)
	// succ:  l401030B4
l401030B4:
	a5 = Mem0[a13 + 0x00000200:word32]
	a6 = -32
	a5 = a5 & a6
	Mem0[a13 + 0x00000200:word32] = a5
	a4 = Mem0[a13 + 0x00000200:word32]
	branch (a4 & 0x00000001) != 0x00000000 l401030B4
	// succ:  l401030CE l401030B4
l401030CE:
	a2 = a12 | a12
	a0 = 0x401030D4
	call fn40201A88 (retsize: 0;)
	branch a2 != 0x00000000 l401030FD
	// succ:  l401030D7 l401030FD
l401030D7:
	a7 = 0x401008A8
	v12 = Mem0[a7 + 0x00000000:byte]
	a7 = (uint32) v12
	branch a7 != 0x00000000 l401030F8
	// succ:  l401030DF l401030F8
l401030DF:
	a8 = Mem0[a13 + 0x00000200:word32]
	a9 = -32
	a8 = a8 & a9
	a9 = 1
	a8 = a8 | a9
	Mem0[a13 + 0x00000200:word32] = a8
	a0 = 0x401030F8
	call fn402008E0 (retsize: 0;)
	// succ:  l401030F8
l401030F8:
	a2 = -1
	goto l4010317A
	// succ:  l4010317A
l401030FD:
	a2 = a12 | a12
	a0 = 0x40103103
	call fn40103324 (retsize: 0;)
	branch a2 != 0x00000000 l4010312C
	// succ:  l40103106 l4010312C
l40103106:
	a10 = 0x401008A8
	v16 = Mem0[a10 + 0x00000000:byte]
	a10 = (uint32) v16
	branch a10 != 0x00000000 l40103127
	// succ:  l4010310E l40103127
l4010310E:
	a11 = Mem0[a13 + 0x00000200:word32]
	a12 = -32
	a11 = a11 & a12
	a12 = 1
	a11 = a11 | a12
	Mem0[a13 + 0x00000200:word32] = a11
	a0 = 0x40103127
	call fn402008E0 (retsize: 0;)
	// succ:  l40103127
l40103127:
	a2 = -2
	goto l4010317A
	// succ:  l4010317A
l4010312C:
	Mem0[a1:word32] = a2
	a2 = Mem0[a2 + 0x00000020:word32]
	a4 = 0x40103094
	a2 = Mem0[a2 + 0x00000000:word32]
	a4 = Mem0[a4 + 0x0000000C:word32]
	branch (a2 & 0x20000000) == 0x00000000 l4010314D
	// succ:  l4010313D l4010314D
l4010313D:
	a3 = Mem0[a4 + 0x00000158:word32]
	a5 = Mem0[a4 + 0x0000015C:word32]
	a3 = a3 + 1
	a5 = a5 - 1
	Mem0[a4 + 0x0000015C:word32] = a5
	Mem0[a4 + 0x00000158:word32] = a3
	// succ:  l4010314D
l4010314D:
	a5 = 0x401008A8
	v19 = Mem0[a5 + 0x00000000:byte]
	a5 = (uint32) v19
	branch a5 != 0x00000000 l4010316E
	// succ:  l40103155 l4010316E
l40103155:
	a6 = Mem0[a13 + 0x00000200:word32]
	a7 = -32
	a6 = a6 & a7
	a7 = 1
	a6 = a6 | a7
	Mem0[a13 + 0x00000200:word32] = a6
	a0 = 0x4010316E
	call fn402008E0 (retsize: 0;)
	// succ:  l4010316E
l4010316E:
	a3 = a12 | a12
	a2 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x40103177
	call fn40202D88 (retsize: 0;)
	a2 = 0x00000000
	// succ:  l4010317A
l4010317A:
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ppProcessTxQ_exit
sdk_ppProcessTxQ_exit:


// sdk_ppFetchTxQFirstAvail
// Return size: 0
void sdk_ppFetchTxQFirstAvail()
sdk_ppFetchTxQFirstAvail_entry:
	// succ:  l40103188
l40103188:
	a1 = fp
	branch a2 >=u 0x00000008 l401031B7
	// succ:  l4010318B l401031B7
l4010318B:
	a4 = 0x40103094
	a4 = Mem0[a4 + 0x0000000C:word32]
	a5 = a2 << 27
	a4 = a4 + a5
	v7 = Mem0[a4 + 0x00000027:byte]
	a3 = (uint32) v7
	a2 = Mem0[a4 + 0x00000018:word32]
	branch a3 != 0x00000000 l401031B7
	// succ:  l4010319C l401031B7
l4010319C:
	branch a2 == 0x00000000 l401031B9
	// succ:  l4010319E l401031B9
l4010319E:
	a5 = Mem0[a2 + 0x00000020:word32]
	a5 = Mem0[a5 + 0x00000000:word32]
	a6 = Mem0[a2 + 0x0000001C:word32]
	branch (a5 & 0x01000000) != 0x00000000 l401031B9
	// succ:  l401031A7 l401031B9
l401031A7:
	Mem0[a4 + 0x00000018:word32] = a6
	a8 = 0
	branch a6 != 0x00000000 l401031B2
	// succ:  l401031AD l401031B2
l401031AD:
	a7 = a4 + 24
	Mem0[a4 + 0x0000001C:word32] = a7
	// succ:  l401031B2
l401031B2:
	Mem0[a2 + 0x0000001C:word32] = a8
	goto l401031B9
	// succ:  l401031B9
l401031B7:
	a2 = 0
	// succ:  l401031B9
l401031B9:
	branch a2 == 0x00000000 l401031C4
	// succ:  l401031BB l401031C4
l401031BB:
	a9 = Mem0[a2 + 0x00000020:word32]
	a9 = Mem0[a9 + 0x00000000:word32]
	branch (a9 & 0x01000000) == 0x00000000 l401031C4
	// succ:  l401031C2 l401031C4
l401031C2:
	a2 = 0
	// succ:  l401031C4
l401031C4:
	return
	// succ:  sdk_ppFetchTxQFirstAvail_exit
sdk_ppFetchTxQFirstAvail_exit:


// sdk_ppDequeueTxQ
// Return size: 0
void sdk_ppDequeueTxQ()
sdk_ppDequeueTxQ_entry:
	// succ:  l401031C8
l401031C8:
	a1 = fp
	branch a2 >=u 0x00000008 l401031EA
	// succ:  l401031CB l401031EA
l401031CB:
	a4 = 0x40103094
	a4 = Mem0[a4 + 0x0000000C:word32]
	a5 = a2 << 27
	a4 = a4 + a5
	a2 = Mem0[a4 + 0x00000018:word32]
	branch a2 == 0x00000000 l401031EC
	// succ:  l401031D9 l401031EC
l401031D9:
	a7 = 0
	a5 = Mem0[a2 + 0x0000001C:word32]
	Mem0[a4 + 0x00000018:word32] = a5
	branch a5 != 0x00000000 l401031E6
	// succ:  l401031E1 l401031E6
l401031E1:
	a6 = a4 + 24
	Mem0[a4 + 0x0000001C:word32] = a6
	// succ:  l401031E6
l401031E6:
	Mem0[a2 + 0x0000001C:word32] = a7
	return
	// succ:  sdk_ppDequeueTxQ_exit
l401031EA:
	a2 = 0
	// succ:  l401031EC
l401031EC:
	return
	// succ:  sdk_ppDequeueTxQ_exit
sdk_ppDequeueTxQ_exit:


// sdk_ppRollBackTxQ
// Return size: 0
void sdk_ppRollBackTxQ()
sdk_ppRollBackTxQ_entry:
	// succ:  l401031F0
l401031F0:
	a1 = fp
	a4 = Mem0[a2 + 0x00000020:word32]
	a6 = 0x40103094
	v6 = Mem0[a4 + 0x00000000:byte]
	a4 = (uint32) v6
	a6 = Mem0[a6 + 0x0000000C:word32]
	a4 = a4 >>u 0x00000002 & 0x0000000F
	branch a4 >=u 0x00000008 l40103212
	// succ:  l40103200 l40103212
l40103200:
	a4 = a4 << 27
	a4 = a6 + a4
	a5 = Mem0[a4 + 0x00000018:word32]
	Mem0[a2 + 0x0000001C:word32] = a5
	branch a5 != 0x00000000 l40103210
	// succ:  l4010320B l40103210
l4010320B:
	a7 = a2 + 28
	Mem0[a4 + 0x0000001C:word32] = a7
	// succ:  l40103210
l40103210:
	Mem0[a4 + 0x00000018:word32] = a2
	// succ:  l40103212
l40103212:
	return
	// succ:  sdk_ppRollBackTxQ_exit
sdk_ppRollBackTxQ_exit:


// sdk_ppRecordBarRRC
// Return size: 0
void sdk_ppRecordBarRRC()
sdk_ppRecordBarRRC_entry:
	// succ:  l40103214
l40103214:
	a1 = fp
	a4 = 0x40103094
	a4 = Mem0[a4 + 0x0000000C:word32]
	a5 = a2 << 27
	a4 = a4 + a5
	Mem0[a4 + 0x00000020:byte] = a3
	return
	// succ:  sdk_ppRecordBarRRC_exit
sdk_ppRecordBarRRC_exit:


// sdk_ppTxqUpdateBitmap
// Return size: 0
void sdk_ppTxqUpdateBitmap()
sdk_ppTxqUpdateBitmap_entry:
	// succ:  l40103224
l40103224:
	a1 = fp
	a8 = 0x40103094
	a8 = Mem0[a8 + 0x0000000C:word32]
	a9 = a2 << 27
	a8 = a8 + a9
	Mem0[a8 + 0x00000022:word16] = a3
	Mem0[a8 + 0x00000030:word32] = a5
	v9 = Mem0[a8 + 0x00000020:byte]
	a7 = (uint32) v9
	Mem0[a8 + 0x00000034:word32] = a4
	a7 = a7 + a6
	Mem0[a8 + 0x00000020:byte] = a7
	return
	// succ:  sdk_ppTxqUpdateBitmap_exit
sdk_ppTxqUpdateBitmap_exit:


// sdk_ppEnqueueTxDone
// Return size: 0
void sdk_ppEnqueueTxDone()
sdk_ppEnqueueTxDone_entry:
	// succ:  l40103248
l40103248:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a2 != 0x00000000 l40103261
	// succ:  l4010324F l40103261
l4010324F:
	a2 = 0x40103240
	a3 = 0x40103244
	a4 = 0x00000784
	a0 = 0x4010325B
	call ets_printf (retsize: 0;)
l40103261:
	a3 = 0x40103094
	a0 = a2 + 28
	a3 = Mem0[a3 + 0x0000000C:word32]
	a5 = 0
	a4 = Mem0[a3 + 0x0000012C:word32]
	Mem0[a2 + 0x0000001C:word32] = a5
	Mem0[a4:word32] = a2
	Mem0[a3 + 0x0000012C:word32] = a0
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ppEnqueueTxDone_exit
sdk_ppEnqueueTxDone_exit:


// sdk_ppEnqueueRxq
// Return size: 0
void sdk_ppEnqueueRxq()
sdk_ppEnqueueRxq_entry:
	// succ:  l4010327C
l4010327C:
	a1 = fp
	a4 = 0x40103094
	a3 = a2 + 28
	a4 = Mem0[a4 + 0x0000000C:word32]
	a6 = 0
	a5 = Mem0[a4 + 0x00000134:word32]
	Mem0[a2 + 0x0000001C:word32] = a6
	Mem0[a5:word32] = a2
	Mem0[a4 + 0x00000134:word32] = a3
	return
	// succ:  sdk_ppEnqueueRxq_exit
sdk_ppEnqueueRxq_exit:


// fn40103324
// Return size: 0
void fn40103324()
fn40103324_entry:
	// succ:  l40103324
l40103324:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000014:word32] = a15
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a0
	a13 = a2
	a0 = 0x40103336
	call fn4010341C (retsize: 0;)
	a0 = 0x40103094
	a15 = 1
	a0 = Mem0[a0 + 0x0000000C:word32]
	a14 = a13 << 30
	a2 = a13 + a0
	a4 = a0 + a13 * 0x00000004
	a4 = Mem0[a4 + 0x00000004:word32]
	v10 = Mem0[a2 + 0x00000014:byte]
	a2 = (uint32) v10
	branch a13 != 0x00000000 l4010337D
	// succ:  l4010334C l4010337D
l4010334C:
	SAR = a2
	a3 = a4 >> SAR
	branch (a3 & 0x00000001) == 0x00000000 l40103360
	// succ:  l40103355 l40103360
l40103355:
	a5 = a2 << 27
	a5 = a0 + a5
	v14 = Mem0[a5 + 0x00000028:byte]
	a5 = (uint32) v14
	branch a5 == 1 l4010337D
	// succ:  l40103360 l4010337D
l40103360:
	a12 = 0
	Mem0[a1 + 0x00000018:word32] = a2
	a2 = a12 & 0x000000FF
	a0 = 0x4010336A
l4010337D:
	Mem0[a1:word32] = a13
	SAR = 0x00000020 - a2
	a12 = a15 << SAR
	a12 = a12 - 1
	a12 = a4 & a12
	a14 = a4 ^ a12
	a13 = -a14
	a13 = a13 & a14
	a13 = __nsau(a13)
	a13 = -a13
	a13 = a13 + 31
	branch a13 < 0x00000000 l401033E0
	// succ:  l4010339F l401033E0
l4010339F:
	a2 = a13 & 0x000000FF
	a0 = 0x401033A5
l401033CF:
	a2 = 0
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 32
	return
	// succ:  fn40103324_exit
l401033E0:
	a13 = -a12
	a13 = a13 & a12
	a13 = __nsau(a13)
	a13 = -a13
	a13 = a13 + 31
	branch a13 < 0x00000000 l401033CF
	// succ:  l401033F2 l401033CF
l401033F2:
	a2 = a13 & 0x000000FF
	a0 = 0x401033F8
fn40103324_exit:


// fn4010341C
// Return size: 0
void fn4010341C()
fn4010341C_entry:
	// succ:  l4010341C
l4010341C:
	a1 = fp
	a9 = 1
	a1 = a1 - 16
	a3 = 0x40103094
	Mem0[a1 + 0x00000008:word32] = a0
	a0 = Mem0[a3 + 0x0000000C:word32]
	a7 = a2 << 30
	a6 = a0 + a2 * 0x00000004
	a5 = a2 + a0
	v10 = Mem0[a5 + 0x00000014:byte]
	a5 = (uint32) v10
	a4 = Mem0[a6 + 0x00000004:word32]
	SAR = a5
	a4 = a4 >> SAR
	branch (a4 & 0x00000001) != 0x00000000 l40103441
	// succ:  l4010343E l40103441
l4010343E:
	goto l401034C3
	// succ:  l401034C3
l40103441:
	a10 = a5 << 27
	a10 = a0 + a10
	v15 = Mem0[a10 + 0x00000028:byte]
	a8 = (uint32) v15
	a3 = 0
	branch a8 == 0x00000000 l401034C3
	// succ:  l4010344E l401034C3
l4010344E:
	a8 = -1
	a11 = Mem0[a10 + 0x00000018:word32]
	Mem0[a10 + 0x00000028:byte] = a3
	branch a11 != 0x00000000 l40103494
	// succ:  l40103457 l40103494
l40103457:
	Mem0[a1 + 0x00000004:word32] = a7
	Mem0[a1:word32] = a5
	a4 = Mem0[a10 + 0x0000002C:word32]
	Mem0[a1 + 0x0000000C:word32] = a2
	branch a4 != 0x00000000 l40103494
	// succ:  l40103461 l40103494
l40103461:
	a9 = -1
	a8 = Mem0[a1 + 0x00000000:word32]
	a7 = 1
	SAR = 0x00000020 - a8
	a8 = Mem0[a6 + 0x00000004:word32]
	a7 = a7 << SAR
	a7 = a7 ^ a9
	a8 = a8 & a7
	Mem0[a6 + 0x00000004:word32] = a8
	a5 = Mem0[a0 + 0x00000000:word32]
	a2 = 8
	a5 = a5 & a7
	Mem0[a0:word32] = a5
	a0 = 0x40103483
	call sdk_pp_post (retsize: 0;)
	a2 = Mem0[a1 + 0x0000000C:word32]
	a5 = Mem0[a1 + 0x00000000:word32]
	a8 = -1
	a0 = 0x40103094
	a6 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a0 + 0x0000000C:word32]
	a9 = 1
	a6 = a6 + a0
	// succ:  l40103494
l40103494:
	a3 = Mem0[a6 + 0x00000004:word32]
	branch a3 == 0x00000000 l401034C3
	// succ:  l40103498 l401034C3
l40103498:
	SAR = 0x00000020 - a5
	a5 = a9 << SAR
	a4 = a5 ^ a8
	a5 = a5 - 1
	a5 = a3 & a5
	a6 = a3 ^ a5
	a4 = a4 & a6
	a3 = -a4
	a3 = a3 & a4
	a3 = __nsau(a3)
	a3 = -a3
	a3 = a3 + 31
	branch a3 < 0x00000000 l401034CA
	// succ:  l401034BE l401034CA
l401034BE:
	a6 = a2 + a0
	Mem0[a6 + 0x00000014:byte] = a3
	// succ:  l401034C3
l401034C3:
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  fn4010341C_exit
l401034CA:
	a3 = -a5
	a3 = a3 & a5
	a3 = __nsau(a3)
	a3 = -a3
	a3 = a3 + 31
	branch a3 >= 0x00000000 l401034BE
	// succ:  l401034DC l401034BE
l401034DC:
	// succ:  l401434C3
l401434C3:
fn4010341C_exit:


// sdk_ppDiscardMPDU
// Return size: 0
void sdk_ppDiscardMPDU()
sdk_ppDiscardMPDU_entry:
	// succ:  l40103A44
l40103A44:
	a1 = fp
	a4 = 0
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a3 = Mem0[a2 + 0x00000020:word32]
	a0 = 4
	Mem0[a3 + 0x0000000E:byte] = a4
	Mem0[a3 + 0x0000000F:byte] = a0
	a0 = 0x40103A58
	call fn40203248 (retsize: 0;)
	a2 = 4
	a3 = 0
	a0 = 0x40103A5F
	call sdk_pp_post (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ppDiscardMPDU_exit
sdk_ppDiscardMPDU_exit:


// sdk_MacIsrSigPostDefHdl
// Return size: 0
void sdk_MacIsrSigPostDefHdl()
sdk_MacIsrSigPostDefHdl_entry:
	// succ:  l40103A74
l40103A74:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a13
	Mem0[a1 + 0x00000014:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a12
	a12 = 0x40102F7C
	Mem0[a1 + 0x00000008:word32] = a0
	v7 = Mem0[a12 + 0x00000006:uint16]
	a0 = (uint32) v7
	Mem0[a1 + 0x00000018:word32] = a15
	branch a0 == 0x00000000 l40103B40
	// succ:  l40103A8D l40103B40
l40103A8D:
	a13 = 0
	a14 = 0x401019AC
	a15 = 0x401008A8
	// succ:  l40103A95
l40103A95:
	a0 = 0x40103A98
	call fn40202FFC (retsize: 0;)
	Mem0[a1:word32] = a2
	branch a2 != 0x00000000 l40103AA4
	// succ:  l40103A9C l40103AA4
l40103A9C:
	a2 = 0x40103A68
	a0 = 0x40103AA2
	call ets_printf (retsize: 0;)
	a2 = Mem0[a1 + 0x00000000:word32]
	// succ:  l40103AA4
l40103AA4:
	a4 = 0x40103A6C
	v12 = Mem0[a12 + 0x00000056:uint16]
	a3 = (uint32) v12
	a4 = a4 + a3 * 0x00000008
	a5 = Mem0[a4 + 0x00000000:word32]
	Mem0[a2:word32] = a5
	a4 = Mem0[a4 + 0x00000004:word32]
	Mem0[a2 + 0x00000004:word32] = a4
	v15 = Mem0[a15 + 0x00000000:byte]
	a6 = (uint32) v15
	a2 = a3 + 1
	a2 = a2 & 0x0000FFFF
	branch a2 <u 0x00000008 l40103AC8
	// succ:  l40103AC0 l40103AC8
l40103AC0:
	a5 = 0
	Mem0[a12 + 0x00000056:word16] = a5
	goto l40103ACB
	// succ:  l40103ACB
l40103AC8:
	Mem0[a12 + 0x00000056:word16] = a2
	// succ:  l40103ACB
l40103ACB:
	branch a6 != 0x00000000 l40103AED
	// succ:  l40103ACD l40103AED
l40103ACD:
	a1 = a1 | a1
	a0 = 0x40103AD3
	call fn402008B8 (retsize: 0;)
	a0 = -32
	// succ:  l40103AD5
l40103AD5:
	a8 = Mem0[a14 + 0x00000200:word32]
	a8 = a8 & a0
	Mem0[a14 + 0x00000200:word32] = a8
	a7 = Mem0[a14 + 0x00000200:word32]
	branch (a7 & 0x00000001) != 0x00000000 l40103AD5
	// succ:  l40103AED l40103AD5
l40103AED:
	a0 = 0x40103AF0
	call fn40203084 (retsize: 0;)
	v19 = Mem0[a15 + 0x00000000:byte]
	a9 = (uint32) v19
	branch a9 != 0x00000000 l40103B11
	// succ:  l40103AF6 l40103B11
l40103AF6:
	a10 = Mem0[a14 + 0x00000200:word32]
	a11 = 0xFFFFFFE0
	a10 = a10 & a11
	a11 = 0x00000001
	a10 = a10 | a11
	Mem0[a14 + 0x00000200:word32] = a10
	a0 = 0x40103B11
	call fn402008E0 (retsize: 0;)
	// succ:  l40103B11
l40103B11:
	a3 = a1 | a1
	a4 = a1 + 4
	a5 = 0x00000000
	a2 = Mem0[a12 + 0x00000050:word32]
	a0 = 0x40101834
	v22 = a0
	a0 = 0x40103B23
	call v22 (retsize: 0;)
	a3 = a2
	branch a2 == 1 l40103B2E
	// succ:  l40103B28 l40103B2E
l40103B28:
	a2 = 0x40103A70
	a0 = 0x40103B2E
	call ets_printf (retsize: 0;)
	// succ:  l40103B2E
l40103B2E:
	v23 = Mem0[a12 + 0x00000006:uint16]
	a0 = (uint32) v23
	a4 = Mem0[a1 + 0x00000004:word32]
	a3 = 1
	a4 = a4 - 1
	branch a4 != 0x00000000 l40103B3A
	// succ:  l40103B37_1 l40103B3A
l40103B37_1:
	a13 = a3
	// succ:  l40103B3A
l40103B3A:
	branch a0 != 0x00000000 l40103A95
	// succ:  l40103B3D l40103A95
l40103B3D:
	goto l40103B42
	// succ:  l40103B42
l40103B40:
	a13 = 0
	// succ:  l40103B42
l40103B42:
	a0 = Mem0[a1 + 0x00000008:word32]
	a12 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000014:word32]
	a2 = a13
	a15 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_MacIsrSigPostDefHdl_exit
sdk_MacIsrSigPostDefHdl_exit:


// sdk_pp_post
// Return size: 0
void sdk_pp_post()
sdk_pp_post_entry:
	// succ:  l40103B60
l40103B60:
	a1 = fp
	a6 = 0x00000001
	a7 = 0x401008A8
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a3
	Mem0[a1 + 0x00000010:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a0
	a12 = a2
	a0 = -32
	v10 = Mem0[a7 + 0x00000000:byte]
	a7 = (uint32) v10
	a13 = 0x401019AC
	branch a7 != 0x00000000 l40103BA4
	// succ:  l40103B7F l40103BA4
l40103B7F:
	a0 = 0x40103B82
	call fn402008B8 (retsize: 0;)
	a0 = -32
	a6 = 1
	// succ:  l40103B86
l40103B86:
	a9 = Mem0[a13 + 0x00000200:word32]
	a9 = a9 & a0
	Mem0[a13 + 0x00000200:word32] = a9
	a8 = Mem0[a13 + 0x00000200:word32]
	branch (a8 & 0x00000001) != 0x00000000 l40103B86
	// succ:  l40103B9E l40103B86
l40103B9E:
	a7 = 0x401008A8
	v13 = Mem0[a7 + 0x00000000:byte]
	a7 = (uint32) v13
	// succ:  l40103BA4
l40103BA4:
	a8 = 0x40103B54
	a8 = a12 + a8
	v14 = Mem0[a8 + 0x00000000:byte]
	a2 = (uint32) v14
	a9 = 0x00000009
	branch a2 == 0x00000000 l40103BD7
	// succ:  l40103BB3 l40103BD7
l40103BB3:
	branch a7 != 0x00000000 l40103BCA
	// succ:  l40103BB5 l40103BCA
l40103BB5:
	a9 = Mem0[a13 + 0x00000200:word32]
	a9 = a9 & a0
	a9 = a9 | a6
	Mem0[a13 + 0x00000200:word32] = a9
	a0 = 0x40103BCA
	call fn402008E0 (retsize: 0;)
	// succ:  l40103BCA
l40103BCA:
	a2 = 0
	a12 = Mem0[a1 + 0x0000000C:word32]
	a13 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_pp_post_exit
l40103BD7:
	branch a12 == a9 l40103BE0
	// succ:  l40103BDA l40103BE0
l40103BDA:
	a10 = a2 + 1
	Mem0[a8:byte] = a10
	// succ:  l40103BE0
l40103BE0:
	branch a7 != 0x00000000 l40103BFA
	// succ:  l40103BE3 l40103BFA
l40103BE3:
	a11 = Mem0[a13 + 0x00000200:word32]
	a11 = a11 & a0
	a11 = a11 | a6
	Mem0[a13 + 0x00000200:word32] = a11
	a0 = 0x40103BF8
	call fn402008E0 (retsize: 0;)
	a9 = 9
	// succ:  l40103BFA
l40103BFA:
	a13 = 0x40102F7C
	branch a12 >=u 0x00000004 l40103C12
	// succ:  l40103C00 l40103C12
l40103C00:
	a0 = 0x40103C03
	call fn40202FFC (retsize: 0;)
	Mem0[a1:word32] = a2
	branch a2 != 0x00000000 l40103C34
	// succ:  l40103C07 l40103C34
l40103C07:
	a2 = 0x40103B58
	a0 = 0x40103C0D
	call ets_printf (retsize: 0;)
	// succ:  l40103C0D
l40103C0D:
	a2 = 1
l40103C12:
	branch a12 != a9 l40103C1E
	// succ:  l40103C15 l40103C1E
l40103C15:
	a2 = Mem0[a13 + 0x00000050:word32]
	a0 = 0x40103C1B
	call fn40200BA8 (retsize: 0;)
	branch a2 >=u 0x00000020 l40103C0D
	// succ:  l40103C1E l40103C0D
l40103C1E:
	a0 = 0x40103C21
	call fn40203050 (retsize: 0;)
	branch a2 == 0x00000000 l40103C0D
	// succ:  l40103C24 l40103C0D
l40103C24:
	a0 = Mem0[a1 + 0x00000004:word32]
	Mem0[a2:word32] = a12
	Mem0[a2 + 0x00000004:word32] = a0
	a2 = 2
	a0 = 0x40103C31
	call fn4020090C (retsize: 0;)
l40103C34:
	a4 = 0x00000001
	a5 = 0x00000000
	a3 = Mem0[a1 + 0x00000004:word32]
	Mem0[a2:word32] = a12
	Mem0[a2 + 0x00000004:word32] = a3
	a2 = Mem0[a13 + 0x00000050:word32]
	a3 = a1
	a0 = 0x40103C48
	call fn40200A90 (retsize: 0;)
	a4 = a2 - 1
	branch a4 == 0x00000000 l40103BCA
	// succ:  l40103C4D l40103BCA
l40103C4D:
	a2 = 0x40103B5C
	a0 = 0x40103C53
	call ets_printf (retsize: 0;)
	// succ:  l40143C0D
l40143C0D:
sdk_pp_post_exit:


// sdk_ppCalTxop
// Return size: 0
void sdk_ppCalTxop()
sdk_ppCalTxop_entry:
	// succ:  l40103C5C
l40103C5C:
	a1 = fp
	a7 = a3 | a3
	a2 = a2 << 27
	a3 = a4 | a4
	a4 = 0x40103094
	a1 = a1 - 16
	a6 = Mem0[a4 + 0x0000000C:word32]
	Mem0[a1 + 0x00000004:word32] = a0
	a6 = a6 + a2
	v9 = Mem0[a6 + 0x00000027:byte]
	a0 = (uint32) v9
	branch a0 != 0x00000000 l40103D0F
	// succ:  l40103C78 l40103D0F
l40103C78:
	a10 = 1
	Mem0[a1 + 0x00000008:word32] = a2
	a8 = 0x401008A8
	Mem0[a1:word32] = a3
	v12 = Mem0[a8 + 0x00000000:byte]
	a8 = (uint32) v12
	Mem0[a1 + 0x0000000C:word32] = a7
	branch a8 != 0x00000000 l40103CBD
	// succ:  l40103C88 l40103CBD
l40103C88:
	a0 = 0x40103C8B
	call fn402008B8 (retsize: 0;)
	a7 = Mem0[a1 + 0x0000000C:word32]
	a0 = 0x401019AC
	a9 = -32
	a10 = 1
	a11 = 0x40103094
	a2 = Mem0[a1 + 0x00000008:word32]
	// succ:  l40103C99
l40103C99:
	a4 = Mem0[a0 + 0x00000200:word32]
	a4 = a4 & a9
	Mem0[a0 + 0x00000200:word32] = a4
	a3 = Mem0[a0 + 0x00000200:word32]
	branch (a3 & 0x00000001) != 0x00000000 l40103C99
	// succ:  l40103CB1 l40103C99
l40103CB1:
	a8 = 0x401008A8
	a6 = Mem0[a11 + 0x0000000C:word32]
	v15 = Mem0[a8 + 0x00000000:byte]
	a8 = (uint32) v15
	a6 = a6 + a2
	// succ:  l40103CBD
l40103CBD:
	a11 = Mem0[a6 + 0x00000018:word32]
	branch a11 == 0x00000000 l40103CED
	// succ:  l40103CC2 l40103CED
l40103CC2:
	a6 = Mem0[a11 + 0x00000020:word32]
	a2 = Mem0[a6 + 0x00000000:word32]
	branch (a2 & 0x01000000) != 0x00000000 l40103CED
	// succ:  l40103CC9 l40103CED
l40103CC9:
	v16 = Mem0[a6 + 0x0000000A:uint16]
	a2 = (uint32) v16
	a3 = Mem0[a1 + 0x00000000:word32]
	a7 = a2 + a7
	a7 = a7 & 0x0000FFFF
	branch a11 != 0x00000000 l40103CE4
	// succ:  l40103CD5 l40103CE4
l40103CD5:
	a2 = 0x40103240
	a3 = 0x40103244
	a4 = 0x40103C58
	a0 = 0x40103CE1
	call ets_printf (retsize: 0;)
l40103CE4:
	branch a7 >=u a3 l40103D1A
	// succ:  l40103CE7 l40103D1A
l40103CE7:
	a11 = Mem0[a11 + 0x0000001C:word32]
	branch a11 != 0x00000000 l40103CC2
	// succ:  l40103CED l40103CC2
l40103CED:
	Mem0[a1 + 0x0000000C:word32] = a7
	branch a8 != 0x00000000 l40103D0F
	Mem0[a1 + 0x0000000C:word32] = a7
	branch a8 != 0x00000000 l40103D0F
	// succ:  l40103CF3 l40103D0F
l40103CF3:
	a5 = 0x401019AC
	a4 = Mem0[a5 + 0x00000200:word32]
	a6 = -32
	a4 = a4 & a6
	a4 = a4 | a10
	Mem0[a5 + 0x00000200:word32] = a4
	a0 = 0x40103D0D
	call fn402008E0 (retsize: 0;)
	a7 = Mem0[a1 + 0x0000000C:word32]
	a5 = 0x401019AC
	a4 = Mem0[a5 + 0x00000200:word32]
	a6 = -32
	a4 = a4 & a6
	a4 = a4 | a10
	Mem0[a5 + 0x00000200:word32] = a4
	a0 = 0x40103D0D
	call fn402008E0 (retsize: 0;)
	a7 = Mem0[a1 + 0x0000000C:word32]
	// succ:  l40103D0F
l40103D0F:
	a4 = a7
	a2 = a4
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ppCalTxop_exit
l40103D1A:
	branch a8 != 0x00000000 l40103D36
	// succ:  l40103D1C l40103D36
l40103D1C:
	a8 = 0x401019AC
	a7 = Mem0[a8 + 0x00000200:word32]
	a9 = -32
	a7 = a7 & a9
	a7 = a7 | a10
	Mem0[a8 + 0x00000200:word32] = a7
	a0 = 0x40103D36
	call fn402008E0 (retsize: 0;)
	// succ:  l40103D36
l40103D36:
	a4 = Mem0[a1 + 0x00000000:word32]
	// succ:  l40143D11
l40143D11:
sdk_ppCalTxop_exit:


// sdk_ppCalFrameTimes
// Return size: 0
void sdk_ppCalFrameTimes()
sdk_ppCalFrameTimes_entry:
	// succ:  l40103D40
l40103D40:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a0 = Mem0[a2 + 0x00000020:word32]
	a12 = a2
	a2 = Mem0[a0 + 0x00000000:word32]
	branch (a2 & 0x02000000) == 0x00000000 l40103D5E
	// succ:  l40103D53 l40103D5E
l40103D53:
	v6 = Mem0[a0 + 0x00000008:byte]
	a2 = (uint32) v6
	a0 = 0x40103D59
	call sdk_RC_GetBlockAckTime (retsize: 0;)
	a0 = Mem0[a12 + 0x00000020:word32]
	goto l40103D75
	// succ:  l40103D75
l40103D5E:
	branch (a2 & 0x00010000) != 0x00000000 l40103D72
	// succ:  l40103D61 l40103D72
l40103D61:
	branch (a2 & 0x00000080) != 0x00000000 l40103D72
	// succ:  l40103D64 l40103D72
l40103D64:
	v7 = Mem0[a0 + 0x00000008:byte]
	a2 = (uint32) v7
	a0 = 0x40103D6A
	call sdk_RC_GetAckTime (retsize: 0;)
	a0 = Mem0[a12 + 0x00000020:word32]
	goto l40103D75
	// succ:  l40103D75
l40103D72:
	a2 = 0x00000000
	// succ:  l40103D75
l40103D75:
	a4 = Mem0[a12 + 0x00000020:word32]
	v10 = Mem0[a0 + 0x00000006:uint16]
	a5 = (uint32) v10
	a6 = a2 & 0x000001FF
	a6 = a6 << 25
	a5 = a5 & 0x0000007F
	a5 = a5 | a6
	Mem0[a0 + 0x00000006:word16] = a5
	v12 = Mem0[a4 + 0x00000008:byte]
	a2 = (uint32) v12
	v13 = Mem0[a12 + 0x00000016:uint16]
	a5 = (uint32) v13
	v14 = Mem0[a4 + 0x00000006:uint16]
	a4 = (uint32) v14
	v16 = Mem0[a12 + 0x00000014:uint16]
	a3 = (uint32) v16
	a4 = a4 >>u 7
	a3 = a3 + a5
	a3 = a3 & 0x0000FFFF
	a0 = 0x40103DA2
	call sdk_RC_GetCtsTime (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a7 = Mem0[a12 + 0x00000020:word32]
	a12 = Mem0[a1 + 0x00000004:word32]
	Mem0[a7 + 0x0000000A:word16] = a2
	a1 = a1 + 16
	return
	// succ:  sdk_ppCalFrameTimes_exit
sdk_ppCalFrameTimes_exit:


// sdk_RC_GetAckRate
// Return size: 0
void sdk_RC_GetAckRate()
sdk_RC_GetAckRate_entry:
	// succ:  l40103DD0
l40103DD0:
	a1 = fp
	a3 = 0x40103DCC
	a2 = a3 + a2 * 0x00000008
	v5 = Mem0[a2 + 0x00000005:byte]
	a2 = (uint32) v5
	return
	// succ:  sdk_RC_GetAckRate_exit
sdk_RC_GetAckRate_exit:


// sdk_RC_GetRtsRate
// Return size: 0
void sdk_RC_GetRtsRate()
sdk_RC_GetRtsRate_entry:
	// succ:  l40103DDC
l40103DDC:
	a1 = fp
	a3 = 0x40103DCC
	a2 = a3 + a2 * 0x00000008
	v5 = Mem0[a2 + 0x00000004:byte]
	a2 = (uint32) v5
	return
	// succ:  sdk_RC_GetRtsRate_exit
sdk_RC_GetRtsRate_exit:


// sdk_RC_GetAckTime
// Return size: 0
void sdk_RC_GetAckTime()
sdk_RC_GetAckTime_entry:
	// succ:  l40103DEC
l40103DEC:
	a1 = fp
	a3 = 0x40103DCC
	a2 = a3 + a2 * 0x00000008
	a3 = 0x40103DE8
	v5 = Mem0[a2 + 0x00000005:byte]
	a2 = (uint32) v5
	a2 = a3 + a2 * 0x00000002
	v6 = Mem0[a2 + 0x00000000:uint16]
	a2 = (uint32) v6
	return
	// succ:  sdk_RC_GetAckTime_exit
sdk_RC_GetAckTime_exit:


// sdk_RC_GetCtsTime
// Return size: 0
void sdk_RC_GetCtsTime()
sdk_RC_GetCtsTime_entry:
	// succ:  l40103E00
l40103E00:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000004:word32] = a4
	Mem0[a1 + 0x0000000C:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a0
	a12 = a2
	a0 = 0x40103E10
	call fn40203DB0 (retsize: 0;)
	Mem0[a1 + 0x00000010:word32] = a2
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = a12
	a0 = 0x40103E19
	call fn40103E74 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000010:word32]
	a3 = Mem0[a1 + 0x00000004:word32]
	a4 = 10
	a2 = a3 + a2
	branch a12 <u 0x00000008 l40103E26
	// succ:  l40103E24 l40103E26
l40103E24:
	a4 = 16
	// succ:  l40103E26
l40103E26:
	a12 = Mem0[a1 + 0x0000000C:word32]
	a5 = a0 + a4
	a2 = a2 + a5
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	a2 = a2 & 0x0000FFFF
	return
	// succ:  sdk_RC_GetCtsTime_exit
sdk_RC_GetCtsTime_exit:


// sdk_RC_GetBlockAckTime
// Return size: 0
void sdk_RC_GetBlockAckTime()
sdk_RC_GetBlockAckTime_entry:
	// succ:  l40103E38
l40103E38:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a0
	a0 = 0x40103DCC
	a12 = 10
	a0 = a0 + a2 * 0x00000008
	v6 = Mem0[a0 + 0x00000005:byte]
	a2 = (uint32) v6
	Mem0[a1:word32] = a0
	branch a2 <u 0x00000008 l40103E51
	// succ:  l40103E4F l40103E51
l40103E4F:
	a12 = 16
	// succ:  l40103E51
l40103E51:
	a0 = 0x40103E54
	call fn40203DB0 (retsize: 0;)
	Mem0[a1 + 0x00000004:word32] = a2
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = 32
	v8 = Mem0[a2 + 0x00000005:byte]
	a2 = (uint32) v8
	a0 = 0x40103E60
	call fn40103E74 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a3 = a12 + a3
	a12 = Mem0[a1 + 0x0000000C:word32]
	a2 = a2 + a3
	a2 = a2 & 0x0000FFFF
	a1 = a1 + 16
	return
	// succ:  sdk_RC_GetBlockAckTime_exit
sdk_RC_GetBlockAckTime_exit:


// fn40103E74
// Return size: 0
void fn40103E74()
fn40103E74_entry:
	// succ:  l40103E74
l40103E74:
	a1 = fp
	a4 = a3 << 29
	a5 = 0x40103DCC
	a3 = a4 & 0x0000FFFF
	a4 = 0x40101B2C
	a5 = a5 + a2 * 0x00000008
	a5 = Mem0[a5 + 0x00000000:word32]
	branch a2 <u 0x00000008 l40103E8E
	// succ:  l40103E88 l40103E8E
l40103E88:
	a3 = a3 + 22
	a3 = a3 & 0x0000FFFF
	// succ:  l40103E8E
l40103E8E:
	a3 = a5 * a3
	a3 = a3 + a4
	a3 = a3 >>u 0x00000012 & 0x00003FFF
	branch a2 <u 0x00000008 l40103EA0
	// succ:  l40103E99 l40103EA0
l40103E99:
	a4 = -4
	a3 = a3 + 3
	a3 = a3 & a4
	// succ:  l40103EA0
l40103EA0:
	a2 = a3 & 0x0000FFFF
	return
	// succ:  fn40103E74_exit
fn40103E74_exit:


// sdk_rcUpdateTxDone
// Return size: 0
void sdk_rcUpdateTxDone()
sdk_rcUpdateTxDone_entry:
	// succ:  l40104020
l40104020:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a2 == 0x00000000 l401040A4
	// succ:  l40104028 l401040A4
l40104028:
	a0 = Mem0[a2 + 0x00000060:word32]
	branch a0 == 0x00000000 l401040A4
	// succ:  l4010402E l401040A4
l4010402E:
	a4 = Mem0[a3 + 0x00000014:word32]
	branch a4 != a0 l401040A4
	// succ:  l40104033 l401040A4
l40104033:
	a5 = Mem0[a2 + 0x00000038:word32]
	a5 = a5 + 1
	Mem0[a2 + 0x00000038:word32] = a5
	v8 = Mem0[a3 + 0x0000000F:byte]
	a5 = (uint32) v8
	branch a5 != 1 l4010409E
	// succ:  l4010403F l4010409E
l4010403F:
	v10 = Mem0[a2 + 0x00000014:byte]
	a6 = (uint32) v10
	a8 = 0x0000007F
	branch (a6 & 0x00000004) != 0x00000000 l40104092
	// succ:  l40104048 l40104092
l40104048:
	v12 = Mem0[a3 + 0x00000009:byte]
	a0 = (uint32) v12
	a7 = 0
	a6 = a0 << 8
	a6 = a6 >> 24
	branch a6 == a8 l40104092
	// succ:  l40104056 l40104092
l40104056:
	v15 = Mem0[a2 + 0x00000000:byte]
	a9 = (uint32) v15
	Mem0[a2:byte] = a0
	a0 = a9 << 8
	a9 = a9 - 127
	a0 = a0 >> 24
	a0 = a6 + a0
	a0 = a0 >> 1
	branch a9 != 0x00000000 l4010406D
	// succ:  l4010406A_1 l4010406D
l4010406A_1:
	a0 = a7
	// succ:  l4010406D
l4010406D:
	a6 = a0 << 8
	v16 = Mem0[a2 + 0x00000001:byte]
	a7 = (uint32) v16
	a6 = a6 >> 24
	branch a7 == a8 l4010408F
	// succ:  l40104079 l4010408F
l40104079:
	a4 = a7 << 8
	a4 = a4 >> 24
	a4 = a4 + a4 * 0x00000002
	a4 = a6 + a4
	a4 = a4 << 30
	a0 = a4 + 15
	branch a4 < 0x00000000 l4010408C
	// succ:  l40104089_2 l4010408C
l40104089_2:
	a0 = a4
	// succ:  l4010408C
l4010408C:
	a0 = a0 >> 4
	// succ:  l4010408F
l4010408F:
	Mem0[a2 + 0x00000001:byte] = a0
	// succ:  l40104092
l40104092:
	v17 = Mem0[a3 + 0x00000004:byte]
	a3 = (uint32) v17
	a3 = a3 >>u 4
	a0 = 0x4010409B
l4010409E:
	branch a5 == 2 l401040AB
	// succ:  l401040A1 l401040AB
l401040A1:
	branch a5 == 3 l401040AB
	// succ:  l401040A4 l401040AB
l401040A4:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rcUpdateTxDone_exit sdk_rcUpdateTxDone_exit
l401040AB:
	v18 = Mem0[a0 + 0x00000008:byte]
	a3 = (uint32) v18
	a0 = 0x401040B1
sdk_rcUpdateTxDone_exit:


// sdk_rcUpdateRxDone
// Return size: 0
void sdk_rcUpdateRxDone()
sdk_rcUpdateRxDone_entry:
	// succ:  l401040B4
l401040B4:
	a1 = fp
	v4 = Mem0[a3 + 0x00000000:byte]
	a6 = (uint32) v4
	a4 = a6 << 8
	a3 = a4 >> 24
	branch a2 == 0x00000000 l4010410C
	// succ:  l401040C0 l4010410C
l401040C0:
	v9 = Mem0[a2 + 0x00000014:byte]
	a5 = (uint32) v9
	a8 = 0x0000007F
	branch (a5 & 0x00000001) != 0x00000000 l4010410C
	// succ:  l401040C9 l4010410C
l401040C9:
	v12 = Mem0[a2 + 0x00000002:byte]
	a7 = (uint32) v12
	branch a7 != a8 l401040D7
	// succ:  l401040CF l401040D7
l401040CF:
	Mem0[a2 + 0x00000002:byte] = a6
	a6 = 0
	goto l401040ED
	// succ:  l401040ED
l401040D7:
	Mem0[a2 + 0x00000002:byte] = a6
	a6 = a7 << 8
	a6 = a6 >> 24
	a6 = a3 + a6
	a6 = a6 >> 1
	a6 = a6 << 8
	a6 = a6 >> 24
	a3 = a6
	// succ:  l401040ED
l401040ED:
	v13 = Mem0[a2 + 0x00000003:byte]
	a7 = (uint32) v13
	branch a7 == a8 l40104109
	// succ:  l401040F3 l40104109
l401040F3:
	a4 = a7 << 8
	a4 = a4 >> 24
	a4 = a4 + a4 * 0x00000002
	a4 = a6 + a4
	a4 = a4 << 30
	a3 = a4 + 15
	branch a4 < 0x00000000 l40104106
	// succ:  l40104103_1 l40104106
l40104103_1:
	a3 = a4
	// succ:  l40104106
l40104106:
	a3 = a3 >> 4
	// succ:  l40104109
l40104109:
	Mem0[a2 + 0x00000003:byte] = a3
	// succ:  l4010410C
l4010410C:
	return
	// succ:  sdk_rcUpdateRxDone_exit
sdk_rcUpdateRxDone_exit:


// sdk_rcUpdateDataRxDone
// Return size: 0
void sdk_rcUpdateDataRxDone()
sdk_rcUpdateDataRxDone_entry:
	// succ:  l40104110
l40104110:
	a1 = fp
	return
	// succ:  sdk_rcUpdateDataRxDone_exit
sdk_rcUpdateDataRxDone_exit:


// sdk_rcGetSched
// Return size: 0
void sdk_rcGetSched()
sdk_rcGetSched_entry:
	// succ:  l40104128
l40104128:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	a2 = a3
	branch a12 == 0x00000000 l40104148
	// succ:  l40104135 l40104148
l40104135:
	a0 = Mem0[a12 + 0x00000060:word32]
	branch a0 == 0x00000000 l40104148
	// succ:  l4010413A l40104148
l4010413A:
	a0 = Mem0[a3 + 0x00000000:word32]
	a3 = a0 >>u 6
	branch (a0 & 0x00000080) == 0x00000000 l40104186
	// succ:  l40104142 l40104186
l40104142:
	a0 = Mem0[a12 + 0x00000064:word32]
	goto l40104151
	// succ:  l40104151
l40104148:
	v7 = Mem0[a2 + 0x00000000:byte]
	a3 = (uint32) v7
	a0 = 0x40104114
	branch (a3 & 0x00000001) == 0x00000000 l401041B1
	// succ:  l40104151 l401041B1
l40104151:
	Mem0[a1 + 0x00000008:word32] = a2
	Mem0[a2 + 0x00000014:word32] = a0
	branch a0 != 0x00000000 l40104162
	// succ:  l4010415A l40104162
l4010415A:
	a2 = 0x40104118
	a0 = 0x40104160
	call ets_printf (retsize: 0;)
	a2 = Mem0[a1 + 0x00000008:word32]
	// succ:  l40104162
l40104162:
	branch a12 == 0x00000000 l40104175
	// succ:  l40104164 l40104175
l40104164:
	v10 = Mem0[a12 + 0x00000014:byte]
	a4 = (uint32) v10
	v11 = Mem0[a12 + 0x00000007:byte]
	a0 = (uint32) v11
	branch (a4 & 0x00000040) == 0x00000000 l40104175
	// succ:  l4010416D l40104175
l4010416D:
	a5 = Mem0[a2 + 0x00000000:word32]
	branch (a5 & 0x00000200) == 0x00000000 l40104175
	// succ:  l40104172 l40104175
l40104172:
	goto l4010417A
	// succ:  l4010417A
l40104175:
	a0 = Mem0[a2 + 0x00000014:word32]
	v13 = Mem0[a0 + 0x00000000:byte]
	a0 = (uint32) v13
	// succ:  l4010417A
l4010417A:
	a12 = Mem0[a1 + 0x00000004:word32]
	Mem0[a2 + 0x00000008:byte] = a0
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rcGetSched_exit
l40104186:
	Mem0[a1 + 0x00000008:word32] = a2
	branch (a0 & 0x00000200) == 0x00000000 l401041B7
	// succ:  l4010418C l401041B7
l4010418C:
	a2 = a12 | a12
	a0 = 0x40104192
	call fn40104418 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a12 + 0x00000060:word32]
	a4 = Mem0[a2 + 0x00000000:word32]
	a5 = 0x40100D0C
	a3 = a4 & 0x0000003F
	a4 = a4 >>u 6
	a4 = a4 | a5
	a4 = a4 << 26
	a3 = a3 | a4
	Mem0[a2:word32] = a3
l401041B1:
	a0 = 0x4010411C
	goto l40144151
	// succ:  l40144151
l401041B7:
	a5 = 0x40104120
	branch (a5 & a3) == 0x00000000 l401041C8
	// succ:  l401041BD l401041C8
l401041BD:
	a6 = Mem0[a12 + 0x0000005C:word32]
	a0 = 0x40104124
	branch a6 == 0x00000000 l401041C8
	// succ:  l401041C5 l401041C8
l401041C5:
	goto l40144151
	// succ:  l40144151
l401041C8:
	a0 = Mem0[a12 + 0x00000064:word32]
	// succ:  l40144151
l40144151:
sdk_rcGetSched_exit:


// sdk_rcGetRate
// Return size: 0
void sdk_rcGetRate()
sdk_rcGetRate_entry:
	// succ:  l401041D0
l401041D0:
	a1 = fp
	a4 = Mem0[a3 + 0x00000000:word32]
	a6 = 0
	a11 = a4 >>u 6
	branch (a4 & 0x10000000) != 0x00000000 l40104205
	// succ:  l401041DA l40104205
l401041DA:
	a7 = 0
	v9 = Mem0[a3 + 0x00000004:byte]
	a8 = (uint32) v9
	a9 = Mem0[a3 + 0x00000014:word32]
	a8 = a8 >>u 4
	// succ:  l401041E4
l401041E4:
	a10 = a9 + a6 * 0x00000002
	v12 = Mem0[a10 + 0x00000001:byte]
	a4 = (uint32) v12
	a6 = a6 + 1
	a7 = a4 + a7
	a7 = a7 & 0x000000FF
	branch a8 >= a7 l40104207
	// succ:  l401041F4 l40104207
l401041F4:
	branch a2 == 0x00000000 l401041FF
	// succ:  l401041F6 l401041FF
l401041F6:
	v15 = Mem0[a2 + 0x00000014:byte]
	a5 = (uint32) v15
	branch (a5 & 0x00000040) == 0x00000000 l401041FF
	// succ:  l401041FC l401041FF
l401041FC:
	branch (a11 & 0x00000008) != 0x00000000 l40104210
	// succ:  l401041FF l40104210
l401041FF:
	v16 = Mem0[a10 + 0x00000000:byte]
	a2 = (uint32) v16
	Mem0[a3 + 0x00000008:byte] = a2
	// succ:  l40104205
l40104205:
	return
	// succ:  sdk_rcGetRate_exit
l40104207:
	a6 = a6 & 0x000000FF
	branch a6 != 4 l401041E4
	// succ:  l4010420D l401041E4
l4010420D:
	goto l40144205
	// succ:  l40144205
l40104210:
	v17 = Mem0[a2 + 0x00000007:byte]
	a2 = (uint32) v17
l40144205:
sdk_rcGetRate_exit:


// fn40104418
// Return size: 0
void fn40104418()
fn40104418_entry:
	// succ:  l40104418
l40104418:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2
	a14 = 0x401018D0
	a13 = Mem0[a14 + 0x00000200:word32]
	a3 = Mem0[a2 + 0x00000034:word32]
	a2 = a13
	a0 = 0x40104438
	call fn40203EA8 (retsize: 0;)
	a3 = Mem0[a12 + 0x00000024:word32]
	a0 = 0x00000063
	branch a3 == 0x00000000 l4010451A
	// succ:  l40104440 l4010451A
l40104440:
	a4 = Mem0[a12 + 0x00000038:word32]
	a5 = 0x40104408
	branch a0 <u a4 l4010444E
	// succ:  l40104448 l4010444E
l40104448:
	branch a5 <u a2 l4010444E
	// succ:  l4010444B l4010444E
l4010444B:
	goto l4010451A
	// succ:  l4010451A
l4010444E:
	Mem0[a12 + 0x00000034:word32] = a13
	a14 = 0x4010440C
	a2 = Mem0[a12 + 0x00000028:word32]
	a4 = Mem0[a14 + 0x00000000:word32]
	a2 = a2 << 25
	a4 = a4 + 1
	Mem0[a14:word32] = a4
	a0 = 0x40104461
	call __udivsi3 (retsize: 0;)
	a2 = a2 & 0x000000FF
	v11 = Mem0[a12 + 0x00000017:byte]
	a0 = (uint32) v11
	Mem0[a12 + 0x00000016:byte] = a2
	branch a0 == 0x00000000 l401044E6
	// succ:  l4010446D l401044E6
l4010446D:
	a5 = a2 + a0
	a3 = Mem0[a12 + 0x00000030:word32]
	a2 = a13
	a5 = a5 >> 1
	Mem0[a12 + 0x00000017:byte] = a5
	a0 = 0x4010447C
	call fn40203EA8 (retsize: 0;)
	v12 = Mem0[a12 + 0x00000017:byte]
	a14 = (uint32) v12
	Mem0[a1:word32] = a2
	a3 = Mem0[a12 + 0x00000060:word32]
	v13 = Mem0[a12 + 0x00000001:byte]
	a2 = (uint32) v13
	v14 = Mem0[a3 + 0x00000000:byte]
	a3 = (uint32) v14
	a0 = 0x4010448D
	call fn4020421C (retsize: 0;)
	a0 = Mem0[a12 + 0x00000060:word32]
	a2 = a2 >>u 0x00000001 & 0x000000FF
	v15 = Mem0[a0 + 0x00000009:byte]
	a3 = (uint32) v15
	a5 = 64
	branch a3 != 0x00000000 l401044A9
	// succ:  l4010449A l401044A9
l4010449A:
	a4 = 90
	a4 = a4 - a2
	a2 = 1
	branch a4 <u a14 l401044D4
	// succ:  l401044A4 l401044D4
l401044A4:
	a2 = 0
	goto l401044D4
	// succ:  l401044D4
l401044A9:
	branch a5 <u a3 l401044BC
	// succ:  l401044AC l401044BC
l401044AC:
	a6 = 0x00000064
	a6 = a6 - a2
	a2 = 1
	branch a6 <u a14 l401044D4
	// succ:  l401044B7 l401044D4
l401044B7:
	a2 = 0
	goto l401044D4
	// succ:  l401044D4
l401044BC:
	a6 = 0
	a7 = 0x0000006E
	a7 = a7 - a2
	branch a7 >=u a14 l401044D1
	// succ:  l401044C7 l401044D1
l401044C7:
	a8 = a3 - a2
	a8 = a8 + 2
	branch a8 >=u a14 l401044D1
	// succ:  l401044CF l401044D1
l401044CF:
	a6 = 1
	// succ:  l401044D1
l401044D1:
	a2 = a6 & 0x000000FF
	// succ:  l401044D4
l401044D4:
	a14 = 1
	branch a2 == 0x00000000 l40104525
	// succ:  l401044D9 l40104525
l401044D9:
	a10 = Mem0[a1 + 0x00000000:word32]
	a9 = Mem0[a12 + 0x00000058:word32]
	branch a9 >=u a10 l40104525
	// succ:  l401044E1 l40104525
l401044E1:
	a0 = a14
	goto l4010457F
	// succ:  l4010457F
l401044E6:
	a0 = Mem0[a12 + 0x00000060:word32]
	v16 = Mem0[a0 + 0x00000009:byte]
	a0 = (uint32) v16
	a3 = 0x00000080
	a0 = a0 + a0 * 0x00000002
	a0 = a0 + a3
	a0 = a0 >>u 0x00000002 & 0x000000FF
	Mem0[a12 + 0x00000017:byte] = a0
	branch a0 >=u a2 l40104505
	// succ:  l401044FD l40104505
l401044FD:
	a3 = a2 + a0
	a3 = a3 >> 1
	Mem0[a12 + 0x00000017:byte] = a3
	// succ:  l40104505
l40104505:
	a4 = 0
	Mem0[a12 + 0x00000028:word32] = a4
	Mem0[a12 + 0x00000024:word32] = a4
	Mem0[a12 + 0x00000038:word32] = a4
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 32
	return
	// succ:  fn40104418_exit
l4010451A:
	a2 = Mem0[a12 + 0x00000048:word32]
	a3 = Mem0[a12 + 0x00000034:word32]
	a0 = 0x40104522
	call fn40203EA8 (retsize: 0;)
l40104525:
	v20 = Mem0[a0 + 0x0000000B:byte]
	a5 = (uint32) v20
	a6 = 0x4010440C
	branch (a5 & 0x00000001) != 0x00000000 l40104536
	// succ:  l4010452E l40104536
l4010452E:
	a6 = Mem0[a6 + 0x00000000:word32]
	a6 = a6 & 0x00000003
	branch a6 != 0x00000000 l40104505
	// succ:  l40104536 l40104505
l40104536:
	v21 = Mem0[a12 + 0x00000001:byte]
	a2 = (uint32) v21
	v22 = Mem0[a0 + 0x00000000:byte]
	a3 = (uint32) v22
	a0 = 0x4010453F
	call fn4020421C (retsize: 0;)
	v24 = Mem0[a12 + 0x00000017:byte]
	a7 = (uint32) v24
	a0 = Mem0[a12 + 0x00000060:word32]
	a9 = a2 >>u 0x00000001 & 0x000000FF
	v26 = Mem0[a0 + 0x00000009:byte]
	a8 = (uint32) v26
	v27 = Mem0[a0 + 0x0000000B:byte]
	a2 = (uint32) v27
	a8 = a8 - a9
	branch a7 >= a8 l4010456B
	// succ:  l40104554 l4010456B
l40104554:
	branch (a2 & 0x00000001) == 0x00000000 l40104566
	// succ:  l40104557 l40104566
l40104557:
	a0 = Mem0[a12 + 0x00000058:word32]
	a10 = 0x40104410
	branch a10 <u a0 l40104566
	// succ:  l40104560 l40104566
l40104560:
	a11 = a0 << 31
	Mem0[a12 + 0x00000058:word32] = a11
	// succ:  l40104566
l40104566:
	a0 = 2
	goto l4010457F
	// succ:  l4010457F
l4010456B:
	branch (a2 & 0x00000001) == 0x00000000 l4010457D
	// succ:  l4010456E l4010457D
l4010456E:
	a3 = 0x40103F58
	a4 = 0x000000FE
	a4 = a2 & a4
	Mem0[a0 + 0x0000000B:byte] = a4
	Mem0[a12 + 0x00000058:word32] = a3
	// succ:  l4010457D
l4010457D:
	a0 = 0
	// succ:  l4010457F
l4010457F:
	branch a0 != 1 l401045B3
	// succ:  l40104582 l401045B3
l40104582:
	a2 = a12
	a0 = 0x40104587
	call fn40203F5C (retsize: 0;)
	a0 = Mem0[a12 + 0x00000060:word32]
	v29 = Mem0[a12 + 0x00000004:byte]
	a5 = (uint32) v29
	v30 = Mem0[a0 + 0x0000000A:byte]
	a6 = (uint32) v30
	branch a5 <u a6 l40104596
	// succ:  l40104593 l40104596
l40104593:
	goto l40144505
	// succ:  l40144505
l40104596:
	a9 = a0 - 12
	Mem0[a12 + 0x00000060:word32] = a9
	v31 = Mem0[a9 + 0x0000000B:byte]
	a8 = (uint32) v31
	a8 = a8 | a14
	Mem0[a9 + 0x0000000B:byte] = a8
	a7 = 0x401018D0
	a7 = Mem0[a7 + 0x00000200:word32]
	Mem0[a12 + 0x00000030:word32] = a7
	goto l40144505
	// succ:  l40144505
l401045B3:
	a9 = a0 - 2
	branch a9 != 0x00000000 l40104505
	// succ:  l401045B9 l40104505
l401045B9:
	a2 = a13
	a3 = Mem0[a12 + 0x0000002C:word32]
	a0 = 0x401045C0
	call fn40203EA8 (retsize: 0;)
	a10 = 0x40104414
	branch a10 <u a2 l401045C9
	// succ:  l401045C6 l401045C9
l401045C6:
	goto l40144505
	// succ:  l40144505
l401045C9:
	a2 = a12
	a3 = 1
	a0 = 0x401045D0
l40144505:
fn40104418_exit:


// sdk_rcReachRetryLimit
// Return size: 0
void sdk_rcReachRetryLimit()
sdk_rcReachRetryLimit_entry:
	// succ:  l401045D4
l401045D4:
	a1 = fp
	v4 = Mem0[a2 + 0x00000004:byte]
	a3 = (uint32) v4
	a4 = Mem0[a2 + 0x00000014:word32]
	a2 = 1
	v7 = Mem0[a4 + 0x00000008:byte]
	a4 = (uint32) v7
	a3 = a3 >>u 4
	branch a3 >= a4 l401045E6
	// succ:  l401045E4 l401045E6
l401045E4:
	a2 = 0
	// succ:  l401045E6
l401045E6:
	return
	// succ:  sdk_rcReachRetryLimit_exit
sdk_rcReachRetryLimit_exit:


// sdk_trc_NeedRTS
// Return size: 0
void sdk_trc_NeedRTS()
sdk_trc_NeedRTS_entry:
	// succ:  l401045EC
l401045EC:
	a1 = fp
	a5 = Mem0[a2 + 0x00000020:word32]
	v5 = Mem0[a5 + 0x00000008:byte]
	a5 = (uint32) v5
	branch a5 == 0x00000000 l40104633
	// succ:  l401045F3 l40104633
l401045F3:
	branch a5 == 1 l40104649
	// succ:  l401045F6 l40104649
l401045F6:
	branch a5 == 5 l40104649
	// succ:  l401045F9 l40104649
l401045F9:
	a6 = a5 - 10
	branch a6 == 0x00000000 l40104675
	// succ:  l401045FF l40104675
l401045FF:
	a7 = 11
	branch a5 == a7 l4010465F
	// succ:  l40104604 l4010465F
l40104604:
	a8 = a5 - 15
	branch a8 == 0x00000000 l4010468B
	// succ:  l4010460A l4010468B
l4010460A:
	branch a5 == 16 l4010465F
	// succ:  l4010460D l4010465F
l4010460D:
	a9 = 17
	branch a5 == a9 l40104675
	// succ:  l40104612 l40104675
l40104612:
	a10 = 24
	branch a5 == a10 l4010465F
	// succ:  l40104617 l4010465F
l40104617:
	a11 = 25
	branch a5 == a11 l40104675
	// succ:  l4010461C l40104675
l4010461C:
	v12 = Mem0[a2 + 0x00000016:uint16]
	a5 = (uint32) v12
	v14 = Mem0[a2 + 0x00000014:uint16]
	a4 = (uint32) v14
	a3 = 0x401045E8
	a2 = 1
	v16 = Mem0[a3 + 0x0000000A:uint16]
	a3 = (uint32) v16
	a4 = a4 + a5
	branch a3 < a4 l40104647
	// succ:  l4010462F l40104647
l4010462F:
	a2 = 0
	return
	// succ:  sdk_trc_NeedRTS_exit
l40104633:
	a5 = 1
	v17 = Mem0[a2 + 0x00000016:uint16]
	a8 = (uint32) v17
	v18 = Mem0[a2 + 0x00000014:uint16]
	a7 = (uint32) v18
	a6 = 0x00000271
	a7 = a7 + a8
	branch a6 < a7 l40104645
	// succ:  l40104643 l40104645
l40104643:
	a5 = 0
	// succ:  l40104645
l40104645:
	a2 = a5
	// succ:  l40104647
l40104647:
	return
	// succ:  sdk_trc_NeedRTS_exit
l40104649:
	a5 = 1
	v25 = Mem0[a2 + 0x00000016:uint16]
	a11 = (uint32) v25
	v26 = Mem0[a2 + 0x00000014:uint16]
	a10 = (uint32) v26
	a9 = 0x000003E8
	a10 = a10 + a11
	branch a9 < a10 l4010465B
	// succ:  l40104659 l4010465B
l40104659:
	a5 = 0
	// succ:  l4010465B
l4010465B:
	a2 = a5
	return
	// succ:  sdk_trc_NeedRTS_exit
l4010465F:
	a5 = 1
	v19 = Mem0[a2 + 0x00000016:uint16]
	a6 = (uint32) v19
	v20 = Mem0[a2 + 0x00000014:uint16]
	a4 = (uint32) v20
	a3 = 0x000002BC
	a4 = a4 + a6
	branch a3 < a4 l40104671
	// succ:  l4010466F l40104671
l4010466F:
	a5 = 0
	// succ:  l40104671
l40104671:
	a2 = a5
	return
	// succ:  sdk_trc_NeedRTS_exit
l40104675:
	a5 = 1
	v23 = Mem0[a2 + 0x00000016:uint16]
	a9 = (uint32) v23
	v24 = Mem0[a2 + 0x00000014:uint16]
	a8 = (uint32) v24
	a7 = 0x00000460
	a8 = a8 + a9
	branch a7 < a8 l40104687
	// succ:  l40104685 l40104687
l40104685:
	a5 = 0
	// succ:  l40104687
l40104687:
	a2 = a5
	return
	// succ:  sdk_trc_NeedRTS_exit
l4010468B:
	a5 = 1
	v21 = Mem0[a2 + 0x00000016:uint16]
	a3 = (uint32) v21
	v22 = Mem0[a2 + 0x00000014:uint16]
	a11 = (uint32) v22
	a10 = 0x0000041A
	a11 = a11 + a3
	branch a10 < a11 l4010469D
	// succ:  l4010469B l4010469D
l4010469B:
	a5 = 0
	// succ:  l4010469D
l4010469D:
	a2 = a5
	return
	// succ:  sdk_trc_NeedRTS_exit
sdk_trc_NeedRTS_exit:


// sdk_wDev_MacTimSetFunc
// Return size: 0
void sdk_wDev_MacTimSetFunc()
sdk_wDev_MacTimSetFunc_entry:
	// succ:  l401049F8
l401049F8:
	a1 = fp
	a6 = 0x401018E4
	a5 = 0x401049F4
	a4 = Mem0[a5 + 0x00000214:word32]
	a4 = a4 | a6
	a3 = 0x401046A4
	Mem0[a5 + 0x00000214:word32] = a4
	Mem0[a3 + 0x00000008:word32] = a2
	return
	// succ:  sdk_wDev_MacTimSetFunc_exit
sdk_wDev_MacTimSetFunc_exit:


// sdk_wDev_MacTimArm
// Return size: 0
void sdk_wDev_MacTimArm()
sdk_wDev_MacTimArm_entry:
	// succ:  l40104A18
l40104A18:
	a1 = fp
	a5 = 0x40104A14
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a2
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	a0 = -32
	v8 = Mem0[a5 + 0x00000080:byte]
	a3 = (uint32) v8
	a12 = 0x401019AC
	branch a3 != 0x00000000 l40104A52
	// succ:  l40104A30 l40104A52
l40104A30:
	a0 = 0x40104A33
	call fn402008B8 (retsize: 0;)
	a0 = -32
	// succ:  l40104A35
l40104A35:
	a6 = Mem0[a12 + 0x00000200:word32]
	a6 = a6 & a0
	Mem0[a12 + 0x00000200:word32] = a6
	a5 = Mem0[a12 + 0x00000200:word32]
	branch (a5 & 0x00000001) != 0x00000000 l40104A35
	// succ:  l40104A4D l40104A35
l40104A4D:
	a2 = Mem0[a1 + 0x00000008:word32]
	a5 = 0x40104A14
	// succ:  l40104A52
l40104A52:
	a8 = 0x401049F4
	a6 = Mem0[a8 + 0x00000208:word32]
	a7 = Mem0[a8 + 0x00000204:word32]
	a9 = Mem0[a8 + 0x00000208:word32]
	branch a6 == a9 l40104A72
	// succ:  l40104A6A l40104A72
l40104A6A:
	a6 = a9
	a7 = Mem0[a8 + 0x00000204:word32]
	// succ:  l40104A72
l40104A72:
	a2 = a2 + a7
	branch a7 <u a2 l40104A79
	// succ:  l40104A77 l40104A79
l40104A77:
	a6 = a6 + 1
	// succ:  l40104A79
l40104A79:
	Mem0[a8 + 0x0000029C:word32] = a2
	Mem0[a8 + 0x000002A0:word32] = a6
	a10 = 0x401018E4
	a9 = Mem0[a8 + 0x00000298:word32]
	a9 = a9 | a10
	Mem0[a8 + 0x00000298:word32] = a9
	v14 = Mem0[a5 + 0x00000080:byte]
	a7 = (uint32) v14
	branch a7 != 0x00000000 l40104AB3
	// succ:  l40104A9C l40104AB3
l40104A9C:
	a11 = Mem0[a12 + 0x00000200:word32]
	a11 = a11 & a0
	a0 = 1
	a11 = a11 | a0
	Mem0[a12 + 0x00000200:word32] = a11
	a0 = 0x40104AB3
	call fn402008E0 (retsize: 0;)
	// succ:  l40104AB3
l40104AB3:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wDev_MacTimArm_exit
sdk_wDev_MacTimArm_exit:


// sdk_wDev_MacTim1Arm
// Return size: 0
void sdk_wDev_MacTim1Arm()
sdk_wDev_MacTim1Arm_entry:
	// succ:  l40104ABC
l40104ABC:
	a1 = fp
	a5 = 0x40104A14
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a2
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	a0 = -32
	v8 = Mem0[a5 + 0x00000080:byte]
	a3 = (uint32) v8
	a12 = 0x401019AC
	branch a3 != 0x00000000 l40104AF6
	// succ:  l40104AD4 l40104AF6
l40104AD4:
	a0 = 0x40104AD7
	call fn402008B8 (retsize: 0;)
	a0 = -32
	// succ:  l40104AD9
l40104AD9:
	a6 = Mem0[a12 + 0x00000200:word32]
	a6 = a6 & a0
	Mem0[a12 + 0x00000200:word32] = a6
	a5 = Mem0[a12 + 0x00000200:word32]
	branch (a5 & 0x00000001) != 0x00000000 l40104AD9
	// succ:  l40104AF1 l40104AD9
l40104AF1:
	a2 = Mem0[a1 + 0x00000008:word32]
	a5 = 0x40104A14
	// succ:  l40104AF6
l40104AF6:
	a8 = 0x401049F4
	a6 = Mem0[a8 + 0x0000024C:word32]
	a7 = Mem0[a8 + 0x00000248:word32]
	a9 = Mem0[a8 + 0x0000024C:word32]
	branch a6 == a9 l40104B16
	// succ:  l40104B0E l40104B16
l40104B0E:
	a6 = a9
	a7 = Mem0[a8 + 0x00000248:word32]
	// succ:  l40104B16
l40104B16:
	a2 = a2 + a7
	branch a7 <u a2 l40104B1D
	// succ:  l40104B1B l40104B1D
l40104B1B:
	a6 = a6 + 1
	// succ:  l40104B1D
l40104B1D:
	Mem0[a8 + 0x000002CC:word32] = a2
	Mem0[a8 + 0x000002D0:word32] = a6
	a10 = 0x401018E4
	a9 = Mem0[a8 + 0x000002C8:word32]
	a9 = a9 | a10
	Mem0[a8 + 0x000002C8:word32] = a9
	v14 = Mem0[a5 + 0x00000080:byte]
	a7 = (uint32) v14
	branch a7 != 0x00000000 l40104B57
	// succ:  l40104B40 l40104B57
l40104B40:
	a11 = Mem0[a12 + 0x00000200:word32]
	a11 = a11 & a0
	a0 = 1
	a11 = a11 | a0
	Mem0[a12 + 0x00000200:word32] = a11
	a0 = 0x40104B57
	call fn402008E0 (retsize: 0;)
	// succ:  l40104B57
l40104B57:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wDev_MacTim1Arm_exit
sdk_wDev_MacTim1Arm_exit:


// sdk_wDev_ProcessFiq
// Return size: 0
void sdk_wDev_ProcessFiq()
sdk_wDev_ProcessFiq_entry:
	// succ:  l40104B98
l40104B98:
	a1 = fp
	a3 = -32
	a2 = 1
	a1 = a1 - 48
	Mem0[a1 + 0x00000010:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000018:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x401019AC
	// succ:  l40104BAC
l40104BAC:
	a5 = Mem0[a0 + 0x00000200:word32]
	a5 = a5 & a3
	Mem0[a0 + 0x00000200:word32] = a5
	a4 = Mem0[a0 + 0x00000200:word32]
	branch (a4 & 0x00000001) != 0x00000000 l40104BAC
	// succ:  l40104BC4 l40104BAC
l40104BC4:
	a15 = 0x401018D0
	a7 = 0x40104B80
	a9 = 0x40104A14
	v15 = Mem0[a7 + 0x00000000:byte]
	a6 = (uint32) v15
	Mem0[a9 + 0x00000080:byte] = a2
	a6 = a6 + 1
	Mem0[a7:byte] = a6
	// succ:  l40104BD8
l40104BD8:
	a12 = Mem0[a15 + 0x00000220:word32]
	branch a12 != 0x00000000 l40104BF7
	// succ:  l40104BE0 l40104BF7
l40104BE0:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000018:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a5 = 0x40104A14
	a4 = 0
	Mem0[a5 + 0x00000080:byte] = a4
	a1 = a1 + 48
	return
	// succ:  sdk_wDev_ProcessFiq_exit
l40104BF7:
	a0 = Mem0[a15 + 0x00000284:word32]
	Mem0[a15 + 0x00000224:word32] = a12
	branch (a12 & 0x10000000) == 0x00000000 l40104C18
	// succ:  l40104C06 l40104C18
l40104C06:
	a2 = 0x40104814
	a3 = 0x40104818
	a4 = 0x00000459
	a0 = 0x40104C12
	call ets_printf (retsize: 0;)
l40104C18:
	Mem0[a1 + 0x00000004:word32] = a0
	branch (a12 & 0x08000000) == 0x00000000 l40104C22
	// succ:  l40104C1D l40104C22
l40104C1D:
	a2 = 0
	a0 = 0x40104C22
	call fn40204B64 (retsize: 0;)
	// succ:  l40104C22
l40104C22:
	branch (a12 & 0x04000000) == 0x00000000 l40104C2A
	// succ:  l40104C25 l40104C2A
l40104C25:
	a2 = 1
	a0 = 0x40104C2A
	call fn40204B64 (retsize: 0;)
	// succ:  l40104C2A
l40104C2A:
	a0 = 4
	a0 = a12 & a0
	branch (a12 & 0x00000008) == 0x00000000 l40104C46
	// succ:  l40104C32 l40104C46
l40104C32:
	a3 = 4
	branch (a12 & a3) != 0x00000000 l40104C46
	// succ:  l40104C37 l40104C46
l40104C37:
	a0 = 0x40104C3A
	call fn401054F4 (retsize: 0;)
	a13 = 0x00000100
	a13 = a12 & a13
	goto l40104C58
	// succ:  l40104C58
l40104C46:
	a13 = 0x00000100
	a13 = a12 & a13
	branch a0 == 0x00000000 l40104C58
	// succ:  l40104C4F l40104C58
l40104C4F:
	a14 = 0x00000100
	branch (a12 & a14) != 0x00000000 l40104C58
	// succ:  l40104C55 l40104C58
l40104C55:
	a0 = 0x40104C58
	call fn40105434 (retsize: 0;)
	// succ:  l40104C58
l40104C58:
	branch a13 == 0x00000000 l40104D2A
	// succ:  l40104C5B l40104D2A
l40104C5B:
	a0 = 0x401047B0
	a2 = 0x401046A8
	v16 = Mem0[a0 + 0x00000005:byte]
	a0 = (uint32) v16
	a2 = Mem0[a2 + 0x0000021C:word32]
	branch a0 == 0x00000000 l40104DA6
	// succ:  l40104C6D l40104DA6
l40104C6D:
	a3 = 0x401046A8
	a14 = Mem0[a3 + 0x00000214:word32]
	a4 = 0x401049F4
	a4 = Mem0[a4 + 0x000002FC:word32]
	a3 = Mem0[a3 + 0x00000218:word32]
	branch a14 != 0x00000000 l40104C97
	// succ:  l40104C88 l40104C97
l40104C88:
	a2 = 0x40104814
	a3 = 0x40104818
	a4 = 0x0000047B
	a0 = 0x40104C94
	call ets_printf (retsize: 0;)
	goto l40144C94
	// succ:  l40144C94
l40104C97:
	a5 = Mem0[a14 + 0x00000008:word32]
	branch a5 != 0x00000000 l40104CAD
	// succ:  l40104C9B l40104CAD
l40104C9B:
	a2 = 0x40104814
	a3 = 0x40104818
	a4 = 0x0000047C
	a0 = 0x40104CA7
	call ets_printf (retsize: 0;)
	goto l40144CA7
	// succ:  l40144CA7
l40104CAD:
	v18 = Mem0[a14 + 0x00000003:byte]
	a6 = (uint32) v18
	a6 = a6 & 0x0000007F
	a6 = a6 >>u 6
	branch a6 == 1 l40104CCE
	// succ:  l40104CBC l40104CCE
l40104CBC:
	a2 = 0x40104814
	a3 = 0x40104818
	a4 = 0x0000047D
	a0 = 0x40104CC8
	call ets_printf (retsize: 0;)
	goto l40144CC8
	// succ:  l40144CC8
l40104CCE:
	a2 = 0x401047B0
	a2 = Mem0[a2 + 0x00000008:word32]
	branch a2 == 0x00000000 l40104D2A
	// succ:  l40104CD6 l40104D2A
l40104CD6:
	a13 = a2
	v21 = Mem0[a2 + 0x00000003:byte]
	a3 = (uint32) v21
	a3 = a3 & 0x0000007F
	a3 = a3 >>u 6
	branch a3 != 0x00000000 l40104CF8
	// succ:  l40104CE6 l40104CF8
l40104CE6:
	a13 = Mem0[a13 + 0x00000008:word32]
	v22 = Mem0[a13 + 0x00000003:byte]
	a4 = (uint32) v22
	a4 = a4 & 0x0000007F
	a4 = a4 >>u 6
	branch a4 == 0x00000000 l40104CE6
	// succ:  l40104CF8 l40104CE6
l40104CF8:
	a0 = 0x40104CFB
	call fn4010561C (retsize: 0;)
	a6 = 0x401047B0
	a5 = Mem0[a6 + 0x00000164:word32]
	a5 = a5 + 1
	Mem0[a6 + 0x00000164:word32] = a5
	branch a14 == a13 l40104D2A
	// succ:  l40104D0A l40104D2A
l40104D0A:
	a2 = Mem0[a13 + 0x00000008:word32]
	branch a2 != 0x00000000 l40104CD6
	// succ:  l40104D10 l40104CD6
l40104D10:
	// succ:  l40104D2A
l40104D2A:
	a7 = 0x40104B84
	branch (a7 & a12) == 0x00000000 l40104D47
	// succ:  l40104D30 l40104D47
l40104D30:
	a2 = Mem0[a1 + 0x00000004:word32]
	a9 = -24
	a2 = a2 >>u 0x0000000C & 0x0000000F
	a9 = a2 * a9
	a9 = a9 + a15
	a8 = 0
	Mem0[a9 + 0x000003C0:word32] = a8
	a0 = 0x40104D47
	call fn40202C60 (retsize: 0;)
	// succ:  l40104D47
l40104D47:
	branch (a12 & 0x00080000) == 0x00000000 l40104D81
	// succ:  l40104D4A l40104D81
l40104D4A:
	a14 = 0x401049F4
	a14 = Mem0[a14 + 0x00000004:word32]
	branch (a14 & 0x01000000) == 0x00000000 l40104D5B
	// succ:  l40104D55 l40104D5B
l40104D55:
	a14 = a14 >>u 0x00000010 & 0x000000FF
	goto l40104D5E
	// succ:  l40104D5E
l40104D5B:
	a14 = 0x0000007F
	// succ:  l40104D5E
l40104D5E:
	a13 = Mem0[a1 + 0x00000004:word32]
	a13 = a13 >>u 0x0000000C & 0x0000000F
	branch a13 >=u 0x00000008 l40104D69
	// succ:  l40104D66 l40104D69
l40104D66:
	goto l40104DF4
	// succ:  l40104DF4
l40104D69:
	branch a13 != 10 l40104D6F
	// succ:  l40104D6C l40104D6F
l40104D6C:
	goto l40104DF4
	// succ:  l40104DF4
l40104D6F:
	a2 = 0x40104814
	a3 = 0x40104818
	a4 = 0x000004BE
	a0 = 0x40104D7B
	call ets_printf (retsize: 0;)
	goto l40144D7B
	// succ:  l40144D7B
l40104D81:
	a0 = 0x40104B88
	a0 = a12 & a0
	branch a0 == 0x00000000 l40104DC9
	// succ:  l40104D89 l40104DC9
l40104D89:
	a2 = Mem0[a1 + 0x00000004:word32]
	a2 = a2 >>u 0x0000000C & 0x0000000F
	branch a2 <u 0x00000008 l40104DC3
	// succ:  l40104D91 l40104DC3
l40104D91:
	branch a2 == 10 l40104DC3
	// succ:  l40104D94 l40104DC3
l40104D94:
	a2 = 0x40104814
	a3 = 0x40104818
	a4 = 0x000004E5
	a0 = 0x40104DA0
	call ets_printf (retsize: 0;)
	goto l40144DA0
	// succ:  l40144DA0
l40104DA6:
	a3 = 0x401047B0
	a3 = Mem0[a3 + 0x00000008:word32]
	branch a3 != a2 l40104DB1
	// succ:  l40104DAE l40104DB1
l40104DAE:
	goto l40104E49
	// succ:  l40104E49
l40104DB1:
	a2 = 0x40104814
	a3 = 0x40104818
	a4 = 0x0000048E
	a0 = 0x40104DBD
	call ets_printf (retsize: 0;)
	goto l40144DBD
	// succ:  l40144DBD
l40104DC3:
	a1 = a1 | a1
	a0 = 0x40104DC9
	call fn40201F70 (retsize: 0;)
	// succ:  l40104DC9
l40104DC9:
	branch (a12 & 0x00100000) == 0x00000000 l40104DCF
	// succ:  l40104DCC l40104DCF
l40104DCC:
	a0 = 0x40104DCF
	call fn40202760 (retsize: 0;)
	// succ:  l40104DCF
l40104DCF:
	branch (a12 & 0x00000200) == 0x00000000 l40104DDD
	// succ:  l40104DD2 l40104DDD
l40104DD2:
	a5 = 0x401047B0
	a4 = Mem0[a5 + 0x00000194:word32]
	a4 = a4 + 1
	Mem0[a5 + 0x00000194:word32] = a4
	// succ:  l40104DDD
l40104DDD:
	a5 = a12 >>u 0x00000017 & 0x00000001
	branch a5 == 0x00000000 l40104BD8
	// succ:  l40104DE3 l40104BD8
l40104DE3:
	a7 = 0x401047B0
	a6 = Mem0[a7 + 0x00000198:word32]
	a6 = a6 + 1
	Mem0[a7 + 0x00000198:word32] = a6
l40104DF4:
	a0 = 0x40104DF7
	call fn40201A74 (retsize: 0;)
	a8 = 0x40104B88
	a8 = a12 & a8
	Mem0[a1:word32] = a8
	branch a2 != 0x00000000 l40104E1B
	// succ:  l40104E02 l40104E1B
l40104E02:
	a9 = 0x40104B88
	branch (a12 & a9) == 0x00000000 l40104E1B
	// succ:  l40104E08 l40104E1B
l40104E08:
	a2 = a13
	a0 = 0x40104E0D
	call fn40201F70 (retsize: 0;)
	a11 = 0x40104B8C
	a10 = 0x40104B88
	a12 = a12 & a11
	a10 = a12 & a10
	Mem0[a1:word32] = a10
	// succ:  l40104E1B
l40104E1B:
	a0 = Mem0[a1 + 0x00000004:word32]
	a0 = a0 >>u 0x0000001C & 0x0000000F
	branch a0 == 0x00000000 l40104EF9
	// succ:  l40104E23 l40104EF9
l40104E23:
	a3 = a0 - 1
	branch a3 == 0x00000000 l40104F09
	// succ:  l40104E28 l40104F09
l40104E28:
	a4 = a0 - 2
	branch a4 == 0x00000000 l40104F1B
	// succ:  l40104E2E l40104F1B
l40104E2E:
	a5 = a0 - 4
	branch a5 == 0x00000000 l40104F28
	// succ:  l40104E34 l40104F28
l40104E34:
	a6 = a0 - 5
	branch a6 == 0x00000000 l40104EDE
	// succ:  l40104E3A l40104EDE
l40104E3A:
	a2 = 0x40104814
	a3 = 0x40104818
	a4 = 0x000004D9
	a0 = 0x40104E46
	call ets_printf (retsize: 0;)
	goto l40144E46
	// succ:  l40144E46
l40104E49:
	a13 = 0x401046A8
	a14 = Mem0[a13 + 0x00000214:word32]
	a0 = 0x401049F4
	a0 = Mem0[a0 + 0x000002FC:word32]
	Mem0[a1 + 0x00000008:word32] = a0
	a13 = Mem0[a13 + 0x00000218:word32]
	a13 = a13 & 0x000000FF
	a3 = a13
	a0 = 0x40104B94
	v23 = a0
	a0 = 0x40104E6E
	call v23 (retsize: 0;)
	branch a2 == a14 l40104E83
	// succ:  l40104E71 l40104E83
l40104E71:
	a2 = 0x40104814
	a3 = 0x40104818
	a4 = 0x00000493
	a0 = 0x40104E7D
	call ets_printf (retsize: 0;)
	goto l40144E7D
	// succ:  l40144E7D
l40104E83:
	branch a14 != 0x00000000 l40104E97
	// succ:  l40104E85 l40104E97
l40104E85:
	a2 = 0x40104814
	a3 = 0x40104818
	a4 = 0x0000049B
	a0 = 0x40104E91
	call ets_printf (retsize: 0;)
	goto l40144E91
	// succ:  l40144E91
l40104E97:
	a2 = Mem0[a14 + 0x00000008:word32]
	branch a2 != 0x00000000 l40104EAD
	// succ:  l40104E9B l40104EAD
l40104E9B:
	a2 = 0x40104814
	a3 = 0x40104818
	a4 = 0x0000049C
	a0 = 0x40104EA7
	call ets_printf (retsize: 0;)
	goto l40144EA7
	// succ:  l40144EA7
l40104EAD:
	v24 = Mem0[a14 + 0x00000003:byte]
	a3 = (uint32) v24
	a3 = a3 & 0x0000007F
	a3 = a3 >>u 6
	branch a3 == 1 l40104ECE
	// succ:  l40104EBC l40104ECE
l40104EBC:
	a2 = 0x40104814
	a3 = 0x40104818
	a4 = 0x0000049D
	a0 = 0x40104EC8
	call ets_printf (retsize: 0;)
	goto l40144EC8
	// succ:  l40144EC8
l40104ECE:
	branch a13 >=u 0x00000002 l40104ED4
	// succ:  l40104ED1 l40104ED4
l40104ED1:
	goto l40144D13
	// succ:  l40144D13
l40104ED4:
	a3 = a13
	a2 = a14
	a0 = 0x40104EDB
	call fn402047B4 (retsize: 0;)
	goto l40144D1F
	// succ:  l40144D1F
l40104EDE:
	Mem0[a1 + 0x00000020:word32] = a13
	a0 = 0x40104EE4
	call fn40202C0C (retsize: 0;)
	a6 = 0x40104B90
	a5 = Mem0[a1 + 0x00000020:word32]
	a5 = a6 + a5 * 0x00000004
	a4 = Mem0[a5 + 0x00000030:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a4 = a4 + 1
	Mem0[a5 + 0x00000030:word32] = a4
	goto l40144D87
	// succ:  l40144D87
l40104EF9:
	a3 = a14 & 0x000000FF
	a2 = a13
	a0 = 0x40104F01
	call fn40202118 (retsize: 0;)
	Mem0[a1 + 0x00000020:word32] = a13
	goto l40144EE4
	// succ:  l40144EE4
l40104F09:
	a2 = Mem0[a1 + 0x00000004:word32]
	a3 = a13 | a13
	a2 = a2 >>u 0x00000010 & 0x000000FF
	a0 = 0x40104F15
	call fn40202C6C (retsize: 0;)
	Mem0[a1 + 0x00000020:word32] = a13
	goto l40144EE4
	// succ:  l40144EE4
l40104F1B:
	a2 = a13
	a0 = 0x40104F20
	call fn40202BC4 (retsize: 0;)
	Mem0[a1 + 0x00000020:word32] = a13
	goto l40144EE4
	// succ:  l40144EE4
l40104F28:
	a2 = Mem0[a1 + 0x00000004:word32]
	a2 = a2 >>u 0x00000010 & 0x000000FF
	a0 = 0x40104F30
	call fn40202D04 (retsize: 0;)
	Mem0[a1 + 0x00000020:word32] = a13
	goto l40144EE4
	// succ:  l40144EE4
l40144C94:
l40144CA7:
l40144CC8:
l40144D13:
l40144D1F:
l40144D7B:
l40144D87:
l40144DA0:
l40144DBD:
l40144E46:
l40144E7D:
l40144E91:
l40144EA7:
l40144EC8:
l40144EE4:
sdk_wDev_ProcessFiq_exit:


// sdk_wDev_EnableTransmit
// Return size: 0
void sdk_wDev_EnableTransmit()
sdk_wDev_EnableTransmit_entry:
	// succ:  l40104F3C
l40104F3C:
	a1 = fp
	a9 = 0x401018D0
	a8 = -24
	a10 = a3 & 0x0000000F
	a11 = a4 & 0x000003FF
	a11 = a11 << 20
	a10 = a10 << 8
	v10 = (int16) a8
	v11 = (int16) a2
	a8 = v10 *s v11
	a8 = a8 + a9
	a10 = a10 | a11
	Mem0[a8 + 0x000003C0:word32] = a10
	a9 = 0x40104F38
	a7 = Mem0[a8 + 0x000003C4:word32]
	a7 = a7 | a9
	a6 = 0x40104B90
	a6 = a6 + a2 * 0x00000004
	a5 = Mem0[a6 + 0x00000000:word32]
	Mem0[a8 + 0x000003C4:word32] = a7
	a5 = a5 + 1
	Mem0[a6:word32] = a5
	return
	// succ:  sdk_wDev_EnableTransmit_exit
sdk_wDev_EnableTransmit_exit:


// sdk_wDev_DisableTransmit
// Return size: 0
void sdk_wDev_DisableTransmit()
sdk_wDev_DisableTransmit_entry:
	// succ:  l40104F80
l40104F80:
	a1 = fp
	a4 = -24
	a5 = 0x401018D0
	v6 = (int16) a4
	v7 = (int16) a2
	a4 = v6 *s v7
	a4 = a4 + a5
	a5 = 0x40104F7C
	a3 = Mem0[a4 + 0x000003C4:word32]
	a3 = a3 & a5
	Mem0[a4 + 0x000003C4:word32] = a3
	return
	// succ:  sdk_wDev_DisableTransmit_exit
sdk_wDev_DisableTransmit_exit:


// sdk_Tx_Copy2Queue
// Return size: 0
void sdk_Tx_Copy2Queue()
sdk_Tx_Copy2Queue_entry:
	// succ:  l40104FA0
l40104FA0:
	a1 = fp
	a7 = 0x40104F7C
	a4 = -24
	a3 = 0x401018D0
	v7 = (int16) a4
	v8 = (int16) a2
	a4 = v7 *s v8
	a4 = a4 + a3
	a8 = Mem0[a3 + 0x000002DC:word32]
	a8 = a8 & a7
	Mem0[a4 + 0x000003C4:word32] = a8
	a6 = Mem0[a3 + 0x000002E0:word32]
	a6 = a6 & a7
	Mem0[a4 + 0x000003C8:word32] = a6
	a5 = Mem0[a3 + 0x000002E4:word32]
	Mem0[a4 + 0x000003CC:word32] = a5
	a3 = Mem0[a3 + 0x000002E8:word32]
	Mem0[a4 + 0x000003D0:word32] = a3
	return
	// succ:  sdk_Tx_Copy2Queue_exit
sdk_Tx_Copy2Queue_exit:


// sdk_wDev_ProcessCollision
// Return size: 0
void sdk_wDev_ProcessCollision()
sdk_wDev_ProcessCollision_entry:
	// succ:  l40104FE8
l40104FE8:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	a0 = 0x40104FF4
	call fn40204F80 (retsize: 0;)
	a2 = 0x40104B90
	a2 = a2 + a12 * 0x00000004
	a0 = Mem0[a2 + 0x00000060:word32]
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = a0 + 1
	Mem0[a2 + 0x00000060:word32] = a0
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wDev_ProcessCollision_exit
sdk_wDev_ProcessCollision_exit:


// sdk_wDev_GetTxqCollisions
// Return size: 0
void sdk_wDev_GetTxqCollisions()
sdk_wDev_GetTxqCollisions_entry:
	// succ:  l4010500C
l4010500C:
	a1 = fp
	a2 = 0x401018D0
	a2 = Mem0[a2 + 0x000002C0:word32]
	a2 = a2 & 0x00000FFF
	return
	// succ:  sdk_wDev_GetTxqCollisions_exit
sdk_wDev_GetTxqCollisions_exit:


// sdk_wDev_ClearTxqCollisions
// Return size: 0
void sdk_wDev_ClearTxqCollisions()
sdk_wDev_ClearTxqCollisions_entry:
	// succ:  l4010501C
l4010501C:
	a1 = fp
	a4 = 0x40100D18
	a3 = 0x401018D0
	a2 = Mem0[a3 + 0x000002C0:word32]
	a2 = a2 & a4
	Mem0[a3 + 0x000002C0:word32] = a2
	return
	// succ:  sdk_wDev_ClearTxqCollisions_exit
sdk_wDev_ClearTxqCollisions_exit:


// sdk_wDev_SetWaitingQueue
// Return size: 0
void sdk_wDev_SetWaitingQueue()
sdk_wDev_SetWaitingQueue_entry:
	// succ:  l40105038
l40105038:
	a1 = fp
	a8 = -16
	a7 = a2 & 0x0000000F
	a5 = 0x401018D0
	a6 = Mem0[a5 + 0x000002B0:word32]
	a6 = a6 & a8
	a6 = a6 | a7
	Mem0[a5 + 0x000002B0:word32] = a6
	a4 = -20
	v9 = (int16) a4
	v10 = (int16) a2
	a4 = v9 *s v10
	a7 = 0x401018E0
	a4 = a4 + a5
	a6 = Mem0[a4 + 0x000003A4:word32]
	a6 = a6 & a7
	Mem0[a4 + 0x000003A4:word32] = a6
	a5 = 0x40105034
	a3 = Mem0[a4 + 0x000003A4:word32]
	a3 = a3 | a5
	Mem0[a4 + 0x000003A4:word32] = a3
	return
	// succ:  sdk_wDev_SetWaitingQueue_exit
sdk_wDev_SetWaitingQueue_exit:


// sdk_wDev_ClearWaitingQueue
// Return size: 0
void sdk_wDev_ClearWaitingQueue()
sdk_wDev_ClearWaitingQueue_entry:
	// succ:  l40105084
l40105084:
	a1 = fp
	a4 = -20
	a5 = 0x401018D0
	v6 = (int16) a4
	v7 = (int16) a2
	a4 = v6 *s v7
	a4 = a4 + a5
	a5 = 0x40105080
	a3 = Mem0[a4 + 0x000003A4:word32]
	a3 = a3 & a5
	Mem0[a4 + 0x000003A4:word32] = a3
	return
	// succ:  sdk_wDev_ClearWaitingQueue_exit
sdk_wDev_ClearWaitingQueue_exit:


// sdk_wDev_SetFrameAckType
// Return size: 0
void sdk_wDev_SetFrameAckType()
sdk_wDev_SetFrameAckType_entry:
	// succ:  l401050A4
l401050A4:
	a1 = fp
	a8 = a2 >>u 0x00000004 & 0x0000000F
	a7 = a2 >>u 0x00000002 & 0x00000003
	a8 = a8 >>u 3
	a7 = a8 + a7 * 0x00000002
	a8 = 0x40100CA4
	a7 = a7 & 0x000000FF
	a7 = a7 << 30
	a7 = a7 + a8
	a4 = a7 + 0x00000C00
	a8 = 15
	a7 = a7 + 0x00000C00
	a4 = Mem0[a4 + 0x00000098:word32]
	a9 = -1
	a6 = a2 >>u 0x00000004 & 0x00000007
	a5 = 28
	a6 = a6 << 30
	a5 = a5 - a6
	a5 = a5 & 0x000000FF
	SAR = 0x00000020 - a5
	a8 = a8 << SAR
	SAR = 0x00000020 - a5
	a8 = a8 ^ a9
	a8 = a4 & a8
	a6 = a3 << SAR
	a6 = a6 | a8
	Mem0[a7 + 0x00000098:word32] = a6
	SAR = a5
	a2 = a4 >> SAR
	a2 = a2 & 0x0000000F
	return
	// succ:  sdk_wDev_SetFrameAckType_exit
sdk_wDev_SetFrameAckType_exit:


// sdk_wDev_AppendRxBlocks
// Return size: 0
void sdk_wDev_AppendRxBlocks()
sdk_wDev_AppendRxBlocks_entry:
	// succ:  l40105108
l40105108:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	a13 = a2
	a12 = a4
	a2 = a3
	a3 = a13
	branch a13 == 0x00000000 l401051A2
	// succ:  l4010511C l401051A2
l4010511C:
	a8 = 0
	a9 = 0x000000DF
	a10 = 0x000000BF
	a11 = 0x00000080
	a6 = 0x40105100
	a0 = 0
	// succ:  l4010512C
l4010512C:
	v15 = Mem0[a3 + 0x00000003:byte]
	a5 = (uint32) v15
	a5 = a5 & 0x0000007F
	a5 = a5 | a11
	Mem0[a3 + 0x00000003:byte] = a5
	v16 = Mem0[a3 + 0x00000003:byte]
	a4 = (uint32) v16
	a4 = a4 & a10
	a4 = a4 | a8
	Mem0[a3 + 0x00000003:byte] = a4
	v18 = Mem0[a3 + 0x00000003:byte]
	a7 = (uint32) v18
	a7 = a7 & a9
	a7 = a7 | a8
	Mem0[a3 + 0x00000003:byte] = a7
	v19 = Mem0[a3 + 0x00000000:uint16]
	a5 = (uint32) v19
	a5 = a5 & 0x00000FFF
	a5 = a5 << 20
	v20 = Mem0[a3 + 0x00000002:uint16]
	a4 = (uint32) v20
	a4 = a4 << 16
	v21 = Mem0[a3 + 0x00000000:uint16]
	a7 = (uint32) v21
	a4 = a4 | a7
	a4 = a4 & a6
	a4 = a4 | a5
	Mem0[a3:word16] = a4
	a4 = a4 >>u 0x00000010 & 0x0000FFFF
	a0 = a0 + 1
	Mem0[a3 + 0x00000002:word16] = a4
	a3 = Mem0[a3 + 0x00000008:word32]
	a0 = a0 & 0x0000FFFF
	branch a3 != 0x00000000 l4010512C
	// succ:  l4010519F l4010512C
l4010519F:
	goto l401051A4
	// succ:  l401051A4
l401051A2:
	a0 = 0
	// succ:  l401051A4
l401051A4:
	branch a12 == a0 l401051B9
	// succ:  l401051A7 l401051B9
l401051A7:
	a2 = 0x40104814
	a3 = 0x40104818
	a4 = 0x000005D6
	a0 = 0x401051B3
	call ets_printf (retsize: 0;)
l401051B9:
	a8 = 0x40104A14
	v22 = Mem0[a8 + 0x00000080:byte]
	a6 = (uint32) v22
	Mem0[a1 + 0x0000000C:word32] = a2
	branch a6 != 0x00000000 l401051EB
	// succ:  l401051C5 l401051EB
l401051C5:
	a0 = 0x401051C8
	call fn402008B8 (retsize: 0;)
	a2 = Mem0[a1 + 0x0000000C:word32]
	a4 = 0x401019AC
	a7 = -32
	a8 = 0x40104A14
	// succ:  l401051D3
l401051D3:
	a10 = Mem0[a4 + 0x00000200:word32]
	a10 = a10 & a7
	Mem0[a4 + 0x00000200:word32] = a10
	a9 = Mem0[a4 + 0x00000200:word32]
	branch (a9 & 0x00000001) != 0x00000000 l401051D3
	// succ:  l401051EB l401051D3
l401051EB:
	a0 = 0x401046A4
	a0 = Mem0[a0 + 0x00000000:word32]
	v23 = Mem0[a0 + 0x00000000:uint16]
	a3 = (uint32) v23
	a6 = Mem0[a0 + 0x0000000C:word32]
	branch a3 != 0x00000000 l4010521C
	// succ:  l401051F7 l4010521C
l401051F7:
	Mem0[a0 + 0x00000008:word32] = a13
	a6 = 0x401046A8
	v24 = Mem0[a0 + 0x00000000:uint16]
	a5 = (uint32) v24
	Mem0[a6 + 0x00000208:word32] = a13
	a5 = a5 + a12
	Mem0[a0:word16] = a5
	v25 = Mem0[a0 + 0x00000000:uint16]
	a3 = (uint32) v25
	Mem0[a0 + 0x0000000C:word32] = a2
	branch a3 != 1 l40105239
	// succ:  l40105212 l40105239
l40105212:
	a10 = Mem0[a0 + 0x0000000C:word32]
	a9 = a0 + 24
	Mem0[a10 + 0x00000008:word32] = a9
	goto l40105239
	// succ:  l40105239
l4010521C:
	branch a3 != 1 l40105230
	// succ:  l4010521F l40105230
l4010521F:
	a11 = Mem0[a0 + 0x00000010:word32]
	a10 = Mem0[a0 + 0x00000014:word32]
	branch a11 != 0x00000000 l401052A3
	// succ:  l40105226 l401052A3
l40105226:
	Mem0[a0 + 0x00000010:word32] = a13
	Mem0[a0 + 0x00000014:word32] = a2
	Mem0[a0 + 0x00000002:word16] = a12
	goto l40105239
	// succ:  l40105239
l40105230:
	a5 = a3 + a12
	Mem0[a6 + 0x00000008:word32] = a13
	Mem0[a0 + 0x0000000C:word32] = a2
	Mem0[a0:word16] = a5
	// succ:  l40105239
l40105239:
	v26 = Mem0[a0 + 0x00000002:uint16]
	a10 = (uint32) v26
	v27 = Mem0[a0 + 0x00000000:uint16]
	a9 = (uint32) v27
	a0 = 0x401018E8
	a9 = a9 + a10
	branch a9 < 2 l40105274
	// succ:  l40105247 l40105274
l40105247:
	a3 = 0x401011E8
	a12 = 0x401018D0
	a2 = Mem0[a12 + 0x000002A8:word32]
	a2 = a2 & a0
	a2 = a2 | a3
	Mem0[a12 + 0x000002A8:word32] = a2
	a13 = 0x40105104
	a11 = Mem0[a12 + 0x000002AC:word32]
	a11 = a11 & a0
	a11 = a11 | a13
	Mem0[a12 + 0x000002AC:word32] = a11
	// succ:  l40105274
l40105274:
	v28 = Mem0[a8 + 0x00000080:byte]
	a3 = (uint32) v28
	branch a3 != 0x00000000 l40105298
	// succ:  l4010527A l40105298
l4010527A:
	a5 = 0x401019AC
	a4 = Mem0[a5 + 0x00000200:word32]
	a6 = 0xFFFFFFE0
	a4 = a4 & a6
	a6 = 0x00000001
	a4 = a4 | a6
	Mem0[a5 + 0x00000200:word32] = a4
	a0 = 0x40105298
	call fn402008E0 (retsize: 0;)
	// succ:  l40105298
l40105298:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wDev_AppendRxBlocks_exit
l401052A3:
	v29 = Mem0[a0 + 0x00000002:uint16]
	a9 = (uint32) v29
	Mem0[a10 + 0x00000008:word32] = a13
	a12 = a9 + a12
	// succ:  l40145228
l40145228:
sdk_wDev_AppendRxBlocks_exit:


// sdk_wDev_AppendRxAmpduLensBlocks
// Return size: 0
void sdk_wDev_AppendRxAmpduLensBlocks()
sdk_wDev_AppendRxAmpduLensBlocks_entry:
	// succ:  l401052B0
l401052B0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1:word32] = a3
	a12 = a2
	a2 = a4
	a4 = a12
	branch a12 == 0x00000000 l40105348
	// succ:  l401052C2 l40105348
l401052C2:
	a9 = 0
	a10 = 0x000000DF
	a11 = 0x000000BF
	a3 = 0x00000080
	a7 = 0x40105100
	a0 = 0
	// succ:  l401052D2
l401052D2:
	v13 = Mem0[a4 + 0x00000003:byte]
	a6 = (uint32) v13
	a6 = a6 & 0x0000007F
	a6 = a6 | a3
	Mem0[a4 + 0x00000003:byte] = a6
	v15 = Mem0[a4 + 0x00000003:byte]
	a5 = (uint32) v15
	a5 = a5 & a11
	a5 = a5 | a9
	Mem0[a4 + 0x00000003:byte] = a5
	v17 = Mem0[a4 + 0x00000003:byte]
	a8 = (uint32) v17
	a8 = a8 & a10
	a8 = a8 | a9
	Mem0[a4 + 0x00000003:byte] = a8
	v18 = Mem0[a4 + 0x00000000:uint16]
	a6 = (uint32) v18
	a6 = a6 & 0x00000FFF
	a6 = a6 << 20
	v19 = Mem0[a4 + 0x00000002:uint16]
	a5 = (uint32) v19
	a5 = a5 << 16
	v20 = Mem0[a4 + 0x00000000:uint16]
	a8 = (uint32) v20
	a5 = a5 | a8
	a5 = a5 & a7
	a5 = a5 | a6
	Mem0[a4:word16] = a5
	a5 = a5 >>u 0x00000010 & 0x0000FFFF
	a0 = a0 + 1
	Mem0[a4 + 0x00000002:word16] = a5
	a4 = Mem0[a4 + 0x00000008:word32]
	a0 = a0 & 0x0000FFFF
	branch a4 != 0x00000000 l401052D2
	// succ:  l40105345 l401052D2
l40105345:
	goto l4010534A
	// succ:  l4010534A
l40105348:
	a0 = 0
	// succ:  l4010534A
l4010534A:
	branch a2 == a0 l4010535F
	// succ:  l4010534D l4010535F
l4010534D:
	a2 = 0x40104814
	a3 = 0x40104818
	a4 = 0x00000620
	a0 = 0x40105359
	call ets_printf (retsize: 0;)
l4010535F:
	a4 = 0x40104A14
	v21 = Mem0[a4 + 0x00000080:byte]
	a8 = (uint32) v21
	Mem0[a1 + 0x0000000C:word32] = a2
	branch a8 != 0x00000000 l40105391
	// succ:  l4010536B l40105391
l4010536B:
	a0 = 0x4010536E
	call fn402008B8 (retsize: 0;)
	a6 = 0x401019AC
	a7 = 0xFFFFFFE0
	// succ:  l40105374
l40105374:
	a11 = Mem0[a6 + 0x00000200:word32]
	a11 = a11 & a7
	Mem0[a6 + 0x00000200:word32] = a11
	a10 = Mem0[a6 + 0x00000200:word32]
	branch (a10 & 0x00000001) != 0x00000000 l40105374
	// succ:  l4010538C l40105374
l4010538C:
	a2 = Mem0[a1 + 0x0000000C:word32]
	a4 = 0x40104A14
	// succ:  l40105391
l40105391:
	a0 = 0x401046A4
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = Mem0[a0 + 0x00000030:word32]
	a5 = Mem0[a0 + 0x00000034:word32]
	branch a3 != 0x00000000 l401053AA
	// succ:  l4010539C l401053AA
l4010539C:
	Mem0[a0 + 0x00000030:word32] = a12
	a3 = 0x401046A8
	Mem0[a3 + 0x0000020C:word32] = a12
	goto l401053AD
	// succ:  l401053AD
l401053AA:
	Mem0[a5 + 0x00000008:word32] = a12
	// succ:  l401053AD
l401053AD:
	a10 = Mem0[a1 + 0x00000000:word32]
	v22 = Mem0[a0 + 0x00000004:byte]
	a9 = (uint32) v22
	Mem0[a0 + 0x00000034:word32] = a10
	a9 = a9 + a2
	Mem0[a0 + 0x00000004:byte] = a9
	v23 = Mem0[a4 + 0x00000080:byte]
	a8 = (uint32) v23
	branch a8 != 0x00000000 l401053DC
	// succ:  l401053C0 l401053DC
l401053C0:
	a12 = 0x401019AC
	a11 = Mem0[a12 + 0x00000200:word32]
	a0 = -32
	a11 = a11 & a0
	a0 = 1
	a11 = a11 | a0
	Mem0[a12 + 0x00000200:word32] = a11
	a0 = 0x401053DC
	call fn402008E0 (retsize: 0;)
	// succ:  l401053DC
l401053DC:
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wDev_AppendRxAmpduLensBlocks_exit
sdk_wDev_AppendRxAmpduLensBlocks_exit:


// sdk_wDev_GetBAInfo
// Return size: 0
void sdk_wDev_GetBAInfo()
sdk_wDev_GetBAInfo_entry:
	// succ:  l401053E8
l401053E8:
	a1 = fp
	a6 = 0x401046A8
	a9 = Mem0[a6 + 0x00000374:word32]
	a9 = a9 >>u 0x0000000C & 0x0000000F
	Mem0[a2:byte] = a9
	a8 = Mem0[a6 + 0x00000374:word32]
	a8 = a8 & 0x00000FFF
	Mem0[a3:word16] = a8
	a7 = Mem0[a6 + 0x00000368:word32]
	Mem0[a4:word32] = a7
	a6 = Mem0[a6 + 0x00000364:word32]
	Mem0[a5:word32] = a6
	return
	// succ:  sdk_wDev_GetBAInfo_exit
sdk_wDev_GetBAInfo_exit:


// fn40105434
// Return size: 0
void fn40105434()
fn40105434_entry:
	// succ:  l40105434
l40105434:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a0 = 0x401046A8
	a0 = Mem0[a0 + 0x00000238:word32]
	a2 = 65
	a0 = a0 & 0x000000FF
	branch a2 >=u a0 l40105452
	// succ:  l4010544C l40105452
l4010544C:
	a2 = a0 >>u 0x00000007 & 0x00000001
	branch a2 == 0x00000000 l401054DF
	// succ:  l40105452 l401054DF
l40105452:
	a12 = 0x401046A4
	a12 = Mem0[a12 + 0x00000000:word32]
	a12 = Mem0[a12 + 0x00000008:word32]
	a12 = Mem0[a12 + 0x00000004:word32]
	v7 = Mem0[a12 + 0x00000001:byte]
	a3 = (uint32) v7
	v8 = Mem0[a12 + 0x00000004:byte]
	a0 = (uint32) v8
	a3 = a3 >>u 6
	branch a3 == 0x00000000 l401054DF
	// succ:  l40105467 l401054DF
l40105467:
	a2 = a0 >>u 7
	branch a2 != 0x00000000 l40105478
	// succ:  l4010546C l40105478
l4010546C:
	a3 = a0 & 0x0000007F
	branch a3 >= 8 l40105478
	// succ:  l40105472 l40105478
l40105472:
	v10 = Mem0[a12 + 0x00000007:byte]
	a4 = (uint32) v10
	branch (a4 & 0x00000040) == 0x00000000 l401054DF
	// succ:  l40105478 l401054DF
l40105478:
	a2 = 12
	a0 = 0x4010547D
	call pvPortMalloc (retsize: 0;)
	a3 = a12
	a4 = 12
	a12 = a2
	a0 = 0x40105486
	call memcpy (retsize: 0;)
	a0 = 0x40105489
	call fn40201888 (retsize: 0;)
	branch a2 != 0x00000000 l4010549A
	// succ:  l4010548B l4010549A
l4010548B:
	a2 = 0x40104814
	a3 = 0x40104818
	a4 = 0x0000076C
	a0 = 0x40105497
	call ets_printf (retsize: 0;)
	goto l40145497
	// succ:  l40145497
l4010549A:
	v12 = Mem0[a2 + 0x00000006:byte]
	a6 = (uint32) v12
	a8 = 0x000000F0
	v15 = Mem0[a12 + 0x00000001:byte]
	a5 = (uint32) v15
	v17 = Mem0[a12 + 0x0000000A:byte]
	a7 = (uint32) v17
	a5 = a5 >>u 6
	a7 = a7 & a8
	a6 = a6 & 0x0000000F
	a6 = a6 | a7
	Mem0[a12 + 0x0000000A:byte] = a6
	branch a5 == 0x00000000 l401054E8
	// succ:  l401054B8 l401054E8
l401054B8:
	v18 = Mem0[a12 + 0x00000004:byte]
	a6 = (uint32) v18
	a0 = a6 & 0x0000007F
	a6 = a6 >>u 7
	branch a6 != 0x00000000 l401054CD
	// succ:  l401054C4 l401054CD
l401054C4:
	branch a0 >= 8 l401054CD
	// succ:  l401054C7 l401054CD
l401054C7:
	v19 = Mem0[a12 + 0x00000007:byte]
	a7 = (uint32) v19
	branch (a7 & 0x00000040) == 0x00000000 l401054E8
	// succ:  l401054CD l401054E8
l401054CD:
	branch a0 >= 32 l401054E8
	// succ:  l401054D0 l401054E8
l401054D0:
	a2 = 9
	a3 = a12
	a0 = 0x401054D7
	call fn40203B60 (retsize: 0;)
	branch a2 != 1 l401054DF
	// succ:  l401054DA l401054DF
l401054DA:
	a2 = a12
	a0 = 0x401054DF
	call free (retsize: 0;)
	// succ:  l401054DF
l401054DF:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn40105434_exit
l401054E8:
	a2 = a12
	a0 = 0x401054ED
	call free (retsize: 0;)
	goto l401454DF
	// succ:  l401454DF
l40145497:
l401454DF:
fn40105434_exit:


// fn401054F4
// Return size: 0
void fn401054F4()
fn401054F4_entry:
	// succ:  l401054F4
l401054F4:
	a1 = fp
	a3 = 29
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	a2 = 4
	a12 = 0x401018D0
	a0 = 0x401049F4
	a0 = Mem0[a0 + 0x000002FC:word32]
	a4 = Mem0[a12 + 0x00000200:word32]
	a4 = a4 - a0
	branch a3 <u a4 l40105531
	// succ:  l40105519 l40105531
l40105519:
	a4 = Mem0[a12 + 0x0000021C:word32]
	a4 = a4 >>u 0x00000002 & 0x00000001
	branch a4 != 0x00000000 l401055FF
	// succ:  l40105525 l401055FF
l40105525:
	a5 = Mem0[a12 + 0x00000200:word32]
	a5 = a5 - a0
	branch a3 >=u a5 l40105519
	// succ:  l40105531 l40105519
l40105531:
	a7 = 0xFFFFFF00
	a3 = 0x401046A8
	a6 = Mem0[a3 + 0x000003D4:word32]
	a10 = -3
	a6 = a6 & a7
	a6 = a6 >>u 0x00000008 & 0x000000FF
	branch a6 >=u 0x00000008 l4010554B
	// succ:  l40105548 l4010554B
l40105548:
	goto l401055FF
	// succ:  l401055FF
l4010554B:
	a9 = Mem0[a12 + 0x00000270:word32]
	a9 = a9 & a10
	Mem0[a12 + 0x00000270:word32] = a9
	a8 = Mem0[a12 + 0x0000021C:word32]
	branch (a8 & 0x00000004) != 0x00000000 l4010556C
	// succ:  l40105563 l4010556C
l40105563:
	a11 = Mem0[a12 + 0x0000021C:word32]
	branch (a11 & a2) == 0x00000000 l40105563
	// succ:  l4010556C l40105563
l4010556C:
	Mem0[a12 + 0x00000224:word32] = a2
	a0 = Mem0[a3 + 0x00000238:word32]
	a13 = 65
	a0 = a0 & 0x000000FF
	branch a13 >=u a0 l40105583
	// succ:  l40105580 l40105583
l40105580:
	branch (a0 & 0x00000080) == 0x00000000 l401055EE
	// succ:  l40105583 l401055EE
l40105583:
	a13 = 0x401046A4
	a13 = Mem0[a13 + 0x00000000:word32]
	a13 = Mem0[a13 + 0x00000008:word32]
	a2 = 12
	a13 = Mem0[a13 + 0x00000004:word32]
	a0 = 0x40105591
	call pvPortMalloc (retsize: 0;)
	a3 = a13
	a4 = 12
	a13 = a2
	a0 = 0x4010559A
	call memcpy (retsize: 0;)
	a0 = 0x4010559D
	call fn40201888 (retsize: 0;)
	branch a2 != 0x00000000 l401055AE
	// succ:  l4010559F l401055AE
l4010559F:
	a2 = 0x40104814
	a3 = 0x40104818
	a4 = 0x000007A6
	a0 = 0x401055AB
	call ets_printf (retsize: 0;)
	goto l401455AB
	// succ:  l401455AB
l401055AE:
	v16 = Mem0[a2 + 0x00000006:byte]
	a3 = (uint32) v16
	a5 = 0x000000F0
	v17 = Mem0[a13 + 0x00000001:byte]
	a0 = (uint32) v17
	v18 = Mem0[a13 + 0x0000000A:byte]
	a4 = (uint32) v18
	a0 = a0 >>u 6
	a4 = a4 & a5
	a3 = a3 & 0x0000000F
	a3 = a3 | a4
	Mem0[a13 + 0x0000000A:byte] = a3
	branch a0 == 0x00000000 l4010560A
	// succ:  l401055CC l4010560A
l401055CC:
	v19 = Mem0[a13 + 0x00000004:byte]
	a2 = (uint32) v19
	a0 = a2 & 0x0000007F
	a2 = a2 >>u 7
	branch a2 != 0x00000000 l401055DB
	// succ:  l401055D8 l401055DB
l401055D8:
	branch a0 < 8 l4010560A
	// succ:  l401055DB l4010560A
l401055DB:
	branch a0 >= 32 l4010560A
	// succ:  l401055DE l4010560A
l401055DE:
	a2 = 0x00000009
	a3 = a13
	a0 = 0x401055E6
	call fn40203B60 (retsize: 0;)
	branch a2 != 1 l401055EE
	// succ:  l401055E9 l401055EE
l401055E9:
	a2 = a13
	a0 = 0x401055EE
	call free (retsize: 0;)
	// succ:  l401055EE
l401055EE:
	a4 = 2
	a3 = Mem0[a12 + 0x00000270:word32]
	a3 = a3 | a4
	Mem0[a12 + 0x00000270:word32] = a3
	// succ:  l401055FF
l401055FF:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn401054F4_exit
l4010560A:
	a2 = a13
	a0 = 0x4010560F
	call free (retsize: 0;)
	goto l401455EE
	// succ:  l401455EE
l401455AB:
l401455EE:
fn401054F4_exit:


// fn4010561C
// Return size: 0
void fn4010561C()
fn4010561C_entry:
	// succ:  l4010561C
l4010561C:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000018:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a0
	a0 = 0x401046A4
	Mem0[a1 + 0x00000020:word32] = a15
	a2 = Mem0[a0 + 0x00000000:word32]
	Mem0[a1 + 0x0000001C:word32] = a14
	a2 = Mem0[a2 + 0x00000008:word32]
	Mem0[a1 + 0x00000014:word32] = a12
	a12 = Mem0[a2 + 0x00000004:word32]
	a14 = 1
	v10 = Mem0[a12 + 0x00000007:byte]
	a3 = (uint32) v10
	a15 = a12 + 12
	a3 = a3 >>u 0x00000003 & 0x00000001
	branch a3 == 0x00000000 l401057CB
	// succ:  l4010563F l401057CB
l4010563F:
	a14 = a2
	v11 = Mem0[a2 + 0x00000003:byte]
	a3 = (uint32) v11
	a13 = 1
	a3 = a3 & 0x0000007F
	a3 = a3 >>u 6
	branch a3 != 0x00000000 l4010566C
	// succ:  l40105651 l4010566C
l40105651:
	a13 = 1
	// succ:  l40105653
l40105653:
	a14 = Mem0[a14 + 0x00000008:word32]
	a13 = a13 + 1
	a13 = a13 & 0x0000FFFF
	v13 = Mem0[a14 + 0x00000003:byte]
	a4 = (uint32) v13
	a4 = a4 & 0x0000007F
	a4 = a4 >>u 6
	branch a4 == 0x00000000 l40105653
	// succ:  l40105669 l40105653
l40105669:
	goto l4014566C
	// succ:  l4014566C
l4010566C:
	v19 = Mem0[a12 + 0x00000009:byte]
	a2 = (uint32) v19
	a3 = 0x401047B0
	a2 = a2 + a2 * 0x00000004
	a3 = Mem0[a3 + 0x00000030:word32]
	Mem0[a1:word32] = a3
	a2 = a2 << 31
	a2 = a2 + 50
	a0 = 0x40105683
	call pvPortMalloc (retsize: 0;)
	Mem0[a1 + 0x00000024:word32] = a2
	a3 = a12
	a4 = 60
	Mem0[a1 + 0x0000000C:word32] = a2
	Mem0[a1 + 0x00000008:word32] = a15
	a0 = 0x40105690
	call memcpy (retsize: 0;)
	a9 = Mem0[a1 + 0x00000008:word32]
	a11 = 0x000000E0
	a6 = 0x401011EC
	a8 = 0
	a10 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a7 = a10 + 50
	a15 = Mem0[a0 + 0x00000004:word32]
	Mem0[a10 + 0x00000030:word16] = a8
	v27 = Mem0[a0 + 0x00000002:uint16]
	a5 = (uint32) v27
	a5 = a5 << 16
	v28 = Mem0[a0 + 0x00000000:uint16]
	a8 = (uint32) v28
	a4 = Mem0[a0 + 0x00000004:word32]
	a5 = a5 | a8
	a5 = a5 & a6
	a5 = a5 >>u 12
	a4 = a4 + a5
	branch a15 <u a4 l401056C8
	// succ:  l401056C5 l401056C8
l401056C5:
	goto l40105768
	// succ:  l40105768
l401056C8:
	a10 = Mem0[a1 + 0x00000024:word32]
	v29 = Mem0[a12 + 0x00000009:byte]
	a8 = (uint32) v29
	v30 = Mem0[a10 + 0x00000030:uint16]
	a10 = (uint32) v30
	branch a10 <u a8 l401056D6
	// succ:  l401056D3 l401056D6
l401056D3:
	goto l40105768
	// succ:  l40105768
l401056D6:
	v31 = Mem0[a15 + 0x00000000:byte]
	a8 = (uint32) v31
	a3 = 0x401046A4
	branch a8 == 0x00000000 l401056EA
	// succ:  l401056DE l401056EA
l401056DE:
	branch a11 <u a8 l401056E4
	// succ:  l401056E1 l401056E4
l401056E1:
	goto l40105763
	// succ:  l40105763
l401056E4:
	a2 = 0x000000FC
	branch a2 <u a8 l40105763
	// succ:  l401056EA l40105763
l401056EA:
	Mem0[a1 + 0x00000008:word32] = a9
	a3 = Mem0[a3 + 0x00000000:word32]
	a4 = a9 + 24
	a5 = Mem0[a3 + 0x00000008:word32]
	Mem0[a1 + 0x00000004:word32] = a7
	a3 = Mem0[a3 + 0x00000008:word32]
	v32 = Mem0[a5 + 0x00000000:uint16]
	a5 = (uint32) v32
	a3 = Mem0[a3 + 0x00000004:word32]
	a5 = a5 & 0x00000FFF
	a3 = a3 + a5
	branch a3 <u a4 l40105768
	Mem0[a1 + 0x00000008:word32] = a9
	a3 = Mem0[a3 + 0x00000000:word32]
	a4 = a9 + 24
	a5 = Mem0[a3 + 0x00000008:word32]
	Mem0[a1 + 0x00000004:word32] = a7
	a3 = Mem0[a3 + 0x00000008:word32]
	v37 = Mem0[a5 + 0x00000000:uint16]
	a5 = (uint32) v37
	a3 = Mem0[a3 + 0x00000004:word32]
	a5 = a5 & 0x00000FFF
	a3 = a3 + a5
	branch a3 <u a4 l40105768
	// succ:  l40105707 l40105768
l40105707:
	a3 = Mem0[a1 + 0x00000008:word32]
	a2 = Mem0[a1 + 0x00000004:word32]
	a7 = Mem0[a1 + 0x00000024:word32]
	a6 = a10 + 1
	Mem0[a7 + 0x00000030:word16] = a6
	v33 = Mem0[a15 + 0x00000002:uint16]
	a5 = (uint32) v33
	v34 = Mem0[a15 + 0x00000000:uint16]
	a6 = (uint32) v34
	a5 = a5 << 16
	a5 = a5 | a6
	a5 = a5 >>u 0x00000008 & 0x00000FFF
	Mem0[a2:word16] = a5
	v35 = Mem0[a3 + 0x00000016:uint16]
	a4 = (uint32) v35
	Mem0[a2 + 0x00000002:word16] = a4
	a3 = a3 + 16
	a2 = a2 + 4
	a4 = 6
	a0 = 0x40105734
	call memcpy (retsize: 0;)
	a6 = 0x401011EC
	a10 = 28
	a0 = 34
	a9 = Mem0[a1 + 0x00000008:word32]
	a7 = Mem0[a1 + 0x00000004:word32]
	v36 = Mem0[a9 + 0x00000001:byte]
	a8 = (uint32) v36
	a7 = a7 + 10
	a11 = a8 & 0x00000003
	a11 = a11 - 3
	branch a11 == 0x00000000 l4010574D
	a3 = Mem0[a1 + 0x00000008:word32]
	a2 = Mem0[a1 + 0x00000004:word32]
	a7 = Mem0[a1 + 0x00000024:word32]
	a6 = a10 + 1
	Mem0[a7 + 0x00000030:word16] = a6
	v38 = Mem0[a15 + 0x00000002:uint16]
	a5 = (uint32) v38
	v39 = Mem0[a15 + 0x00000000:uint16]
	a6 = (uint32) v39
	a5 = a5 << 16
	a5 = a5 | a6
	a5 = a5 >>u 0x00000008 & 0x00000FFF
	Mem0[a2:word16] = a5
	v40 = Mem0[a3 + 0x00000016:uint16]
	a4 = (uint32) v40
	Mem0[a2 + 0x00000002:word16] = a4
	a3 = a3 + 16
	a2 = a2 + 4
	a4 = 6
	a0 = 0x40105734
	call memcpy (retsize: 0;)
	a6 = 0x401011EC
	a10 = 28
	a0 = 34
	a9 = Mem0[a1 + 0x00000008:word32]
	a7 = Mem0[a1 + 0x00000004:word32]
	v41 = Mem0[a9 + 0x00000001:byte]
	a8 = (uint32) v41
	a7 = a7 + 10
	a11 = a8 & 0x00000003
	a11 = a11 - 3
	branch a11 == 0x00000000 l4010574D
	// succ:  l4010574A_1 l4010574D l4010574A_1
l4010574A_1:
	a0 = a10
	goto l4010574D
	// succ:  l4010574D
l4010574A_1:
	a0 = a10
	// succ:  l4010574D
l4010574D:
	a5 = a0 + 2
	a11 = 0x000000E0
	branch (a8 & 0x00000080) == 0x00000000 l40105757
	a5 = a0 + 2
	a11 = 0x000000E0
	branch (a8 & 0x00000080) == 0x00000000 l40105757
	// succ:  l40105755 l40105757
l40105755:
	a5 = a0 + 6
	a5 = a0 + 6
	// succ:  l40105757
l40105757:
	a0 = Mem0[a1 + 0x00000000:word32]
	a3 = 0x40105618
	a2 = a5 + 3
	a2 = a2 & a3
	a9 = a9 + a2
	// succ:  l40105763
l40105763:
	a15 = a15 + 4
	goto l401456A6
	// succ:  l401456A6
l40105768:
	a3 = a13
	a2 = a14
	a0 = 0x4010576F
	call fn402047B4 (retsize: 0;)
	a2 = 0x401046A4
	a13 = Mem0[a1 + 0x0000000C:word32]
	a2 = Mem0[a2 + 0x00000000:word32]
	a3 = 1
	a2 = Mem0[a2 + 0x00000030:word32]
	a0 = 0x4010577D
	call fn402047E4 (retsize: 0;)
	goto l401057AD
	// succ:  l401057AD
l40105780:
	v17 = Mem0[a12 + 0x00000004:uint16]
	a2 = (uint32) v17
	a0 = a0 << 16
	a0 = a0 | a2
	a0 = a0 >>u 8
	a3 = a12 + 28
	Mem0[a13 + 0x00000032:word16] = a0
	a4 = 0x00000006
	v18 = Mem0[a12 + 0x00000022:uint16]
	a2 = (uint32) v18
	Mem0[a13 + 0x00000034:word16] = a2
	a2 = a13 + 54
	a0 = 0x401057A1
	call memcpy (retsize: 0;)
	a2 = 0x401046A4
	a2 = Mem0[a2 + 0x00000000:word32]
	a3 = 1
	a2 = Mem0[a2 + 0x00000008:word32]
	a0 = 0x401057AD
	call fn402047B4 (retsize: 0;)
	// succ:  l401057AD
l401057AD:
	a2 = 9
	a3 = a13
	a0 = 0x401057B4
	call fn40203B60 (retsize: 0;)
	branch a2 != 1 l401057BC
	// succ:  l401057B7 l401057BC
l401057B7:
	a2 = a13
	a0 = 0x401057BC
	call free (retsize: 0;)
	// succ:  l401057BC
l401057BC:
	a12 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x00000018:word32]
	a14 = Mem0[a1 + 0x0000001C:word32]
	a15 = Mem0[a1 + 0x00000020:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 48
	return
	// succ:  fn4010561C_exit
l401057CB:
	a2 = 0x0000003C
	a0 = 0x401057D1
	call pvPortMalloc (retsize: 0;)
	a13 = a2 | a2
	a3 = a12
	a4 = 60
	a0 = 0x401057DB
	call memcpy (retsize: 0;)
	Mem0[a13 + 0x00000030:word16] = a14
	v14 = Mem0[a12 + 0x00000001:byte]
	a3 = (uint32) v14
	v15 = Mem0[a12 + 0x00000006:uint16]
	a0 = (uint32) v15
	a3 = a3 >>u 6
	branch a3 != 0x00000000 l40105780
	// succ:  l401057EA l40105780
l401057EA:
	v16 = Mem0[a12 + 0x00000002:uint16]
	a0 = (uint32) v16
	a0 = a0 & 0x00000FFF
	goto l4014578C
	// succ:  l4014578C
l4014566C:
l401456A6:
l4014578C:
fn4010561C_exit:


// sdk_ram_tx_mac_disable
// Return size: 0
void sdk_ram_tx_mac_disable()
sdk_ram_tx_mac_disable_entry:
	// succ:  l4010581C
l4010581C:
	a1 = fp
	return
	// succ:  sdk_ram_tx_mac_disable_exit
sdk_ram_tx_mac_disable_exit:


// __muldi3
// Return size: 0
void __muldi3()
__muldi3_entry:
	// succ:  l401058EC
l401058EC:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a15
	a14 = a3
	a15 = a5
	a12 = a4
	a13 = a2
	a3 = a4
	Mem0[a1 + 0x0000001C:word32] = a0
	a13 = a15 * a13
	a0 = 0x4010590C
	call __umulsidi3 (retsize: 0;)
	a12 = a12 * a14
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = a13 + a12
	a3 = a12 + a3
	a13 = Mem0[a1 + 0x00000014:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  __muldi3_exit
__muldi3_exit:


// __divdi3
// Return size: 0
void __divdi3()
__divdi3_entry:
	// succ:  l40105924
l40105924:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a15
	branch a3 >= 0x00000000 l4010594A
	// succ:  l40105934 l4010594A
l40105934:
	a7 = -a2
	a6 = 0
	a2 = 1
	branch a7 == 0x00000000 l4010593E
	// succ:  l4010593B_1 l4010593E
l4010593B_1:
	a6 = a2
	// succ:  l4010593E
l4010593E:
	a15 = -a3
	a15 = a15 - a6
	a12 = -1
	goto l40105950
	// succ:  l40105950
l4010594A:
	a7 = a2
	a15 = a3
	a12 = 0
	// succ:  l40105950
l40105950:
	branch a5 >= 0x00000000 l40105968
	// succ:  l40105953 l40105968
l40105953:
	a3 = 1
	a4 = -a4
	a2 = 0
	branch a4 == 0x00000000 l4010595D
	// succ:  l4010595A_1 l4010595D
l4010595A_1:
	a2 = a3
	// succ:  l4010595D
l4010595D:
	a5 = -a5
	a3 = -1
	a12 = a3 ^ a12
	a5 = a5 - a2
	// succ:  l40105968
l40105968:
	a6 = a4
	a13 = a7
	a8 = a15
	branch a5 != 0x00000000 l40105BBD
	// succ:  l40105971 l40105BBD
l40105971:
	branch a15 <u a4 l40105977
	// succ:  l40105974 l40105977
l40105974:
	goto l40105A36
	// succ:  l40105A36
l40105977:
	a2 = __nsau(a4)
	branch a2 == 0x00000000 l4010599A
	// succ:  l4010597C l4010599A
l4010597C:
	a3 = -a2
	SAR = a3
	a3 = a7 >> SAR
	SAR = 0x00000020 - a2
	a8 = a15 << SAR
	SAR = 0x00000020 - a2
	a6 = a4 << SAR
	a8 = a3 | a8
	SAR = 0x00000020 - a2
	a13 = a7 << SAR
	// succ:  l4010599A
l4010599A:
	a14 = a6 >>u 0x00000010 & 0x0000FFFF
	a2 = a8
	a3 = a14
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1 + 0x00000008:word32] = a8
	a0 = 0x401059A8
	call __umodsi3 (retsize: 0;)
	a8 = Mem0[a1 + 0x00000008:word32]
	a5 = a2
	a3 = a14
	a2 = a8
	Mem0[a1 + 0x00000014:word32] = a5
	a0 = 0x401059B5
	call __udivsi3 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000004:word32]
	a5 = Mem0[a1 + 0x00000014:word32]
	a4 = a6 & 0x0000FFFF
	a15 = a2
	a5 = a5 << 16
	a3 = a13 >>u 0x00000010 & 0x0000FFFF
	a2 = a2 * a4
	a3 = a5 | a3
	branch a3 >=u a2 l401059E4
	// succ:  l401059CD l401059E4
l401059CD:
	a3 = a3 + a6
	a5 = a15 - 1
	branch a3 <u a6 l401059E2
	// succ:  l401059D4 l401059E2
l401059D4:
	branch a3 >=u a2 l401059E2
	// succ:  l401059D7 l401059E2
l401059D7:
	a15 = a15 - 2
	a3 = a3 + a6
	goto l401059E4
	// succ:  l401059E4
l401059E2:
	a15 = a5
	// succ:  l401059E4
l401059E4:
	a5 = a3 - a2
	a2 = a5
	a3 = a14
	Mem0[a1 + 0x00000010:word32] = a4
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1 + 0x00000014:word32] = a5
	a0 = 0x401059F4
	call __umodsi3 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000014:word32]
	a7 = a2
	a3 = a14
	a2 = a5
	Mem0[a1 + 0x0000000C:word32] = a7
	a0 = 0x40105A01
	call __udivsi3 (retsize: 0;)
	a7 = Mem0[a1 + 0x0000000C:word32]
	a4 = Mem0[a1 + 0x00000010:word32]
	a7 = a7 << 16
	a13 = a13 & 0x0000FFFF
	a4 = a2 * a4
	a13 = a7 | a13
	a3 = a2
	a6 = Mem0[a1 + 0x00000004:word32]
	branch a13 >=u a4 l40105A28
	// succ:  l40105A18 l40105A28
l40105A18:
	a13 = a13 + a6
	a2 = a2 - 1
	branch a13 <u a6 l40105A26
	// succ:  l40105A20 l40105A26
l40105A20:
	a3 = a3 - 2
	branch a13 <u a4 l40105A28
	// succ:  l40105A26 l40105A28
l40105A26:
	a3 = a2
	// succ:  l40105A28
l40105A28:
	a2 = a15 << 16
	a2 = a3 | a2
	a4 = 0
	goto l40105CEC
	// succ:  l40105CEC
l40105A36:
	branch a4 != 0x00000000 l40105A48
	// succ:  l40105A39 l40105A48
l40105A39:
	a2 = 0x00000001
	a3 = a5 | a5
	Mem0[a1 + 0x0000000C:word32] = a7
	a0 = 0x40105A44
	call __udivsi3 (retsize: 0;)
	a7 = Mem0[a1 + 0x0000000C:word32]
	a6 = a2
	// succ:  l40105A48
l40105A48:
	a4 = __nsau(a6)
	branch a4 != 0x00000000 l40105A5D
	// succ:  l40105A4D l40105A5D
l40105A4D:
	a5 = a15 - a6
	a14 = a6 >>u 0x00000010 & 0x0000FFFF
	a15 = a6 & 0x0000FFFF
	a4 = 1
	goto l40105B24
	// succ:  l40105B24
l40105A5D:
	a2 = 0x00000020
	SAR = 0x00000020 - a4
	a6 = a6 << SAR
	a2 = a2 - a4
	SAR = a2
	a8 = a15 >> SAR
	a14 = a6 >>u 0x00000010 & 0x0000FFFF
	SAR = a2
	a5 = a7 >> SAR
	SAR = 0x00000020 - a4
	a15 = a15 << SAR
	a2 = a8 | a8
	a3 = a14
	a15 = a5 | a15
	SAR = 0x00000020 - a4
	a13 = a7 << SAR
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1 + 0x00000008:word32] = a8
	a0 = 0x40105A93
	call __umodsi3 (retsize: 0;)
	a8 = Mem0[a1 + 0x00000008:word32]
	a5 = a2
	a3 = a14
	a2 = a8
	Mem0[a1 + 0x00000014:word32] = a5
	a0 = 0x40105AA0
	call __udivsi3 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000004:word32]
	a5 = Mem0[a1 + 0x00000014:word32]
	a8 = a6 & 0x0000FFFF
	a7 = a2
	a5 = a5 << 16
	a3 = a15 >>u 0x00000010 & 0x0000FFFF
	a2 = a2 * a8
	a5 = a3 | a5
	branch a5 >=u a2 l40105ACC
	// succ:  l40105AB8 l40105ACC
l40105AB8:
	a5 = a5 + a6
	a3 = a7 - 1
	branch a5 <u a6 l40105ACA
	// succ:  l40105ABF l40105ACA
l40105ABF:
	branch a5 >=u a2 l40105ACA
	// succ:  l40105AC2 l40105ACA
l40105AC2:
	a7 = a7 - 2
	a5 = a5 + a6
	goto l40105ACC
	// succ:  l40105ACC
l40105ACA:
	a7 = a3
	// succ:  l40105ACC
l40105ACC:
	a5 = a5 - a2
	a2 = a5 | a5
	a3 = a14 | a14
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1 + 0x0000000C:word32] = a7
	Mem0[a1 + 0x00000008:word32] = a8
	Mem0[a1 + 0x00000014:word32] = a5
	a0 = 0x40105AE0
	call __umodsi3 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000014:word32]
	a4 = a2
	a3 = a14
	a2 = a5
	Mem0[a1 + 0x00000010:word32] = a4
	a0 = 0x40105AED
	call __udivsi3 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000010:word32]
	a8 = Mem0[a1 + 0x00000008:word32]
	a5 = a4 << 16
	a15 = a15 & 0x0000FFFF
	a9 = a2 * a8
	a5 = a5 | a15
	a6 = Mem0[a1 + 0x00000004:word32]
	a7 = Mem0[a1 + 0x0000000C:word32]
	branch a5 >=u a9 l40105B18
	// succ:  l40105B04 l40105B18
l40105B04:
	a5 = a5 + a6
	a3 = a2 - 1
	branch a5 <u a6 l40105B16
	// succ:  l40105B0B l40105B16
l40105B0B:
	branch a5 >=u a9 l40105B16
	// succ:  l40105B0E l40105B16
l40105B0E:
	a2 = a2 - 2
	a5 = a5 + a6
	goto l40105B18
	// succ:  l40105B18
l40105B16:
	a2 = a3
	// succ:  l40105B18
l40105B18:
	a4 = a7 << 16
	a5 = a5 - a9
	a4 = a2 | a4
	a15 = a8 | a8
	// succ:  l40105B24
l40105B24:
	a2 = a5 | a5
	a3 = a14
	Mem0[a1 + 0x00000010:word32] = a4
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1 + 0x00000014:word32] = a5
	a0 = 0x40105B33
	call __umodsi3 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000014:word32]
	a7 = a2
	a3 = a14
	a2 = a5
	Mem0[a1 + 0x0000000C:word32] = a7
	a0 = 0x40105B40
	call __udivsi3 (retsize: 0;)
	a7 = Mem0[a1 + 0x0000000C:word32]
	a5 = a2
	a7 = a7 << 16
	a3 = a13 >>u 0x00000010 & 0x0000FFFF
	a2 = a2 * a15
	a3 = a7 | a3
	a4 = Mem0[a1 + 0x00000010:word32]
	a6 = Mem0[a1 + 0x00000004:word32]
	branch a3 >=u a2 l40105B6C
	// succ:  l40105B57 l40105B6C
l40105B57:
	a3 = a3 + a6
	a7 = a5 - 1
	branch a3 <u a6 l40105B6A
	// succ:  l40105B5E l40105B6A
l40105B5E:
	branch a3 >=u a2 l40105B6A
	// succ:  l40105B61 l40105B6A
l40105B61:
	a5 = a5 - 2
	a3 = a3 + a6
	goto l40105B6C
	// succ:  l40105B6C
l40105B6A:
	a5 = a7
	// succ:  l40105B6C
l40105B6C:
	a7 = a3 - a2
	a2 = a7
	a3 = a14
	Mem0[a1 + 0x00000010:word32] = a4
	Mem0[a1 + 0x00000014:word32] = a5
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1 + 0x0000000C:word32] = a7
	a0 = 0x40105B7E
	call __umodsi3 (retsize: 0;)
	a7 = Mem0[a1 + 0x0000000C:word32]
	a8 = a2
	a3 = a14
	a2 = a7
	Mem0[a1 + 0x00000008:word32] = a8
	a0 = 0x40105B8B
	call __udivsi3 (retsize: 0;)
	a8 = Mem0[a1 + 0x00000008:word32]
	a13 = a13 & 0x0000FFFF
	a8 = a8 << 16
	a15 = a2 * a15
	a13 = a8 | a13
	a3 = a2
	a4 = Mem0[a1 + 0x00000010:word32]
	a5 = Mem0[a1 + 0x00000014:word32]
	a6 = Mem0[a1 + 0x00000004:word32]
	branch a13 >=u a15 l40105BB4
	// succ:  l40105BA4 l40105BB4
l40105BA4:
	a13 = a13 + a6
	a2 = a2 - 1
	branch a13 <u a6 l40105BB2
	// succ:  l40105BAC l40105BB2
l40105BAC:
	a3 = a3 - 2
	branch a13 <u a15 l40105BB4
	// succ:  l40105BB2 l40105BB4
l40105BB2:
	a3 = a2
	// succ:  l40105BB4
l40105BB4:
	a2 = a5 << 16
	a2 = a3 | a2
	goto l40105CEC
	// succ:  l40105CEC
l40105BBD:
	branch a15 >=u a5 l40105BC3
	// succ:  l40105BC0 l40105BC3
l40105BC0:
	goto l40105CE8
	// succ:  l40105CE8
l40105BC3:
	a14 = __nsau(a5)
	branch a14 != 0x00000000 l40105BE4
	// succ:  l40105BC8 l40105BE4
l40105BC8:
	a3 = 0x00000001
	branch a7 >=u a4 l40105BD1
	// succ:  l40105BCE l40105BD1
l40105BCE:
	a3 = a14 | a14
	// succ:  l40105BD1
l40105BD1:
	a2 = 1
	branch a5 <u a15 l40105BD8
	// succ:  l40105BD6 l40105BD8
l40105BD6:
	a2 = 0
	// succ:  l40105BD8
l40105BD8:
	a2 = a3 | a2
	a2 = a2 & 0x000000FF
	a4 = 0
	goto l40105CEC
	// succ:  l40105CEC
l40105BE4:
	a3 = 0x00000020
	a3 = a3 - a14
	SAR = a3
	a2 = a4 >> SAR
	SAR = 0x00000020 - a14
	a5 = a5 << SAR
	a5 = a2 | a5
	SAR = a3
	a8 = a15 >> SAR
	a13 = a5 >>u 0x00000010 & 0x0000FFFF
	SAR = a3
	a9 = a7 >> SAR
	SAR = 0x00000020 - a14
	a4 = a4 << SAR
	a2 = a8 | a8
	a3 = a13
	SAR = 0x00000020 - a14
	a15 = a15 << SAR
	a15 = a9 | a15
	Mem0[a1:word32] = a4
	Mem0[a1 + 0x00000014:word32] = a5
	Mem0[a1 + 0x0000000C:word32] = a7
	Mem0[a1 + 0x00000008:word32] = a8
	a0 = 0x40105C27
	call __umodsi3 (retsize: 0;)
	a8 = Mem0[a1 + 0x00000008:word32]
	a9 = a2
	a3 = a13
	a2 = a8
	Mem0[a1 + 0x00000004:word32] = a9
	a0 = 0x40105C34
	call __udivsi3 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000014:word32]
	a9 = Mem0[a1 + 0x00000004:word32]
	a8 = a5 & 0x0000FFFF
	a4 = a2
	a3 = a9 << 16
	a10 = a15 >>u 0x00000010 & 0x0000FFFF
	a2 = a2 * a8
	a3 = a3 | a10
	a7 = Mem0[a1 + 0x0000000C:word32]
	branch a3 >=u a2 l40105C64
	// succ:  l40105C4E l40105C64
l40105C4E:
	a3 = a3 + a5
	a9 = a4 - 1
	branch a3 <u a5 l40105C62
	// succ:  l40105C55 l40105C62
l40105C55:
	branch a3 >=u a2 l40105C62
	// succ:  l40105C58 l40105C62
l40105C58:
	a4 = a4 - 2
	a3 = a3 + a5
	goto l40105C64
	// succ:  l40105C64
l40105C62:
	a4 = a9
	// succ:  l40105C64
l40105C64:
	a9 = a3 - a2
	a2 = a9 | a9
	a3 = a13 | a13
	Mem0[a1 + 0x00000010:word32] = a4
	Mem0[a1 + 0x00000014:word32] = a5
	Mem0[a1 + 0x0000000C:word32] = a7
	Mem0[a1 + 0x00000008:word32] = a8
	Mem0[a1 + 0x00000004:word32] = a9
	a0 = 0x40105C7B
	call __umodsi3 (retsize: 0;)
	a9 = Mem0[a1 + 0x00000004:word32]
	a10 = a2
	a3 = a13
	a2 = a9
	Mem0[a1 + 0x00000004:word32] = a10
	a0 = 0x40105C88
	call __udivsi3 (retsize: 0;)
	a10 = Mem0[a1 + 0x00000004:word32]
	a8 = Mem0[a1 + 0x00000008:word32]
	a10 = a10 << 16
	a15 = a15 & 0x0000FFFF
	a8 = a2 * a8
	a15 = a10 | a15
	a4 = Mem0[a1 + 0x00000010:word32]
	a5 = Mem0[a1 + 0x00000014:word32]
	a7 = Mem0[a1 + 0x0000000C:word32]
	branch a15 >=u a8 l40105CB5
	// succ:  l40105CA1 l40105CB5
l40105CA1:
	a15 = a15 + a5
	a3 = a2 - 1
	branch a15 <u a5 l40105CB3
	// succ:  l40105CA8 l40105CB3
l40105CA8:
	branch a15 >=u a8 l40105CB3
	// succ:  l40105CAB l40105CB3
l40105CAB:
	a2 = a2 - 2
	a15 = a15 + a5
	goto l40105CB5
	// succ:  l40105CB5
l40105CB3:
	a2 = a3
	// succ:  l40105CB5
l40105CB5:
	a4 = a4 << 16
	a13 = a2 | a4
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = a13
	Mem0[a1 + 0x0000000C:word32] = a7
	a15 = a15 - a8
	a0 = 0x40105CC8
	call __umulsidi3 (retsize: 0;)
	a7 = Mem0[a1 + 0x0000000C:word32]
	branch a15 <u a3 l40105CE0
	// succ:  l40105CCD l40105CE0
l40105CCD:
	branch a15 != a3 l40105CD9
	// succ:  l40105CD0 l40105CD9
l40105CD0:
	SAR = 0x00000020 - a14
	a6 = a7 << SAR
	branch a6 <u a2 l40105CE0
	// succ:  l40105CD9 l40105CE0
l40105CD9:
	a2 = a13
	a4 = 0
	goto l40105CEC
	// succ:  l40105CEC
l40105CE0:
	a2 = a13 - 1
	a4 = 0
	goto l40105CEC
	// succ:  l40105CEC
l40105CE8:
	a4 = 0
	a2 = a4
	// succ:  l40105CEC
l40105CEC:
	a3 = a4
	branch a12 == 0x00000000 l40105D00
	// succ:  l40105CF0 l40105D00
l40105CF0:
	a2 = -a2
	a4 = 0
	a5 = 1
	branch a2 == 0x00000000 l40105CFA
	// succ:  l40105CF7_1 l40105CFA
l40105CF7_1:
	a4 = a5
	// succ:  l40105CFA
l40105CFA:
	a3 = -a3
	a3 = a3 - a4
	// succ:  l40105D00
l40105D00:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  __divdi3_exit
__divdi3_exit:


// __umoddi3
// Return size: 0
void __umoddi3()
__umoddi3_entry:
	// succ:  l40105D10
l40105D10:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a15
	a14 = a2
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000038:word32] = a12
	a15 = a3
	a13 = a4
	a6 = a14
	a9 = a3
	branch a5 != 0x00000000 l40105EDC
	// succ:  l40105D2A l40105EDC
l40105D2A:
	branch a3 >=u a4 l40105D92
	// succ:  l40105D2D l40105D92
l40105D2D:
	a7 = __nsau(a4)
	branch a7 == 0x00000000 l40105D51
	// succ:  l40105D33 l40105D51
l40105D33:
	a9 = -a7
	SAR = 0x00000020 - a7
	a15 = a3 << SAR
	SAR = a9
	a9 = a14 >> SAR
	SAR = 0x00000020 - a7
	a13 = a4 << SAR
	a9 = a9 | a15
	SAR = 0x00000020 - a7
	a6 = a14 << SAR
	// succ:  l40105D51
l40105D51:
	a12 = a13 >>u 0x00000010 & 0x0000FFFF
	a2 = a9
	a3 = a12
	Mem0[a1 + 0x00000018:word32] = a6
	Mem0[a1 + 0x00000014:word32] = a7
	Mem0[a1 + 0x00000008:word32] = a9
	a0 = 0x40105D61
	call __umodsi3 (retsize: 0;)
	a9 = Mem0[a1 + 0x00000008:word32]
	a14 = a2
	a3 = a12
	a2 = a9
	a0 = 0x40105D6C
	call __udivsi3 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000018:word32]
	a15 = a13 & 0x0000FFFF
	a14 = a14 << 16
	a3 = a6 >>u 0x00000010 & 0x0000FFFF
	a2 = a2 * a15
	a3 = a14 | a3
	a7 = Mem0[a1 + 0x00000014:word32]
	branch a3 >=u a2 l40105D8C
	// succ:  l40105D82 l40105D8C
l40105D82:
	a3 = a3 + a13
	branch a3 <u a13 l40105D8C
	// succ:  l40105D87 l40105D8C
l40105D87:
	branch a3 >=u a2 l40105D8C
	// succ:  l40105D8A l40105D8C
l40105D8A:
	a3 = a3 + a13
	// succ:  l40105D8C
l40105D8C:
	a14 = a3 - a2
	goto l40105E94
	// succ:  l40105E94
l40105D92:
	branch a4 != 0x00000000 l40105DA4
	// succ:  l40105D95 l40105DA4
l40105D95:
	a2 = 0x00000001
	a3 = a4 | a4
	Mem0[a1 + 0x00000018:word32] = a14
	a0 = 0x40105DA0
	call __udivsi3 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000018:word32]
	a13 = a2
	// succ:  l40105DA4
l40105DA4:
	a7 = __nsau(a13)
	branch a7 != 0x00000000 l40105DB5
	// succ:  l40105DA9 l40105DB5
l40105DA9:
	a14 = a15 - a13
	a12 = a13 >>u 0x00000010 & 0x0000FFFF
	a15 = a13 & 0x0000FFFF
	goto l40105E5A
	// succ:  l40105E5A
l40105DB5:
	a2 = 0x00000020
	a2 = a2 - a7
	SAR = 0x00000020 - a7
	a13 = a13 << SAR
	SAR = a2
	a4 = a15 >> SAR
	a12 = a13 >>u 0x00000010 & 0x0000FFFF
	SAR = a2
	a5 = a14 >> SAR
	SAR = 0x00000020 - a7
	a15 = a15 << SAR
	a2 = a4 | a4
	a3 = a12
	a15 = a5 | a15
	Mem0[a1 + 0x00000014:word32] = a7
	Mem0[a1 + 0x00000010:word32] = a4
	a0 = 0x40105DE5
	call __umodsi3 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000010:word32]
	a5 = a2
	a3 = a12
	a2 = a4
	Mem0[a1 + 0x00000008:word32] = a5
	a0 = 0x40105DF2
	call __udivsi3 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000008:word32]
	a4 = a13 & 0x0000FFFF
	a5 = a5 << 16
	a3 = a15 >>u 0x00000010 & 0x0000FFFF
	a7 = Mem0[a1 + 0x00000014:word32]
	a2 = a2 * a4
	a3 = a3 | a5
	SAR = 0x00000020 - a7
	a6 = a14 << SAR
	branch a3 >=u a2 l40105E19
	// succ:  l40105E0E l40105E19
l40105E0E:
	a3 = a3 + a13
	branch a3 <u a13 l40105E19
	// succ:  l40105E13 l40105E19
l40105E13:
	branch a3 >=u a2 l40105E19
	// succ:  l40105E16 l40105E19
l40105E16:
	a3 = a3 + a13
	// succ:  l40105E19
l40105E19:
	a14 = a3 - a2
	a2 = a14
	a3 = a12
	Mem0[a1 + 0x00000010:word32] = a4
	Mem0[a1 + 0x00000018:word32] = a6
	Mem0[a1 + 0x00000014:word32] = a7
	a0 = 0x40105E29
	call __umodsi3 (retsize: 0;)
	a5 = a2
	a3 = a12
	a2 = a14
	Mem0[a1 + 0x00000008:word32] = a5
	a0 = 0x40105E34
	call __udivsi3 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000010:word32]
	a5 = Mem0[a1 + 0x00000008:word32]
	a15 = a15 & 0x0000FFFF
	a14 = a5 << 16
	a2 = a2 * a4
	a14 = a14 | a15
	a6 = Mem0[a1 + 0x00000018:word32]
	a7 = Mem0[a1 + 0x00000014:word32]
	branch a14 >=u a2 l40105E55
	// succ:  l40105E4B l40105E55
l40105E4B:
	a14 = a14 + a13
	branch a14 <u a13 l40105E55
	// succ:  l40105E50 l40105E55
l40105E50:
	branch a14 >=u a2 l40105E55
	// succ:  l40105E53 l40105E55
l40105E53:
	a14 = a14 + a13
	// succ:  l40105E55
l40105E55:
	a14 = a14 - a2
	a15 = a4
	// succ:  l40105E5A
l40105E5A:
	a3 = a12
	a2 = a14
	Mem0[a1 + 0x00000018:word32] = a6
	Mem0[a1 + 0x00000014:word32] = a7
	a0 = 0x40105E65
	call __umodsi3 (retsize: 0;)
	a5 = a2
	a3 = a12
	a2 = a14 | a14
	Mem0[a1 + 0x00000008:word32] = a5
	a0 = 0x40105E72
	call __udivsi3 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000008:word32]
	a6 = Mem0[a1 + 0x00000018:word32]
	a4 = a2 * a15
	a3 = a5 << 16
	a2 = a6 >>u 0x00000010 & 0x0000FFFF
	a3 = a3 | a2
	a7 = Mem0[a1 + 0x00000014:word32]
	branch a3 >=u a4 l40105E91
	// succ:  l40105E87 l40105E91
l40105E87:
	a3 = a3 + a13
	branch a3 <u a13 l40105E91
	// succ:  l40105E8C l40105E91
l40105E8C:
	branch a3 >=u a4 l40105E91
	// succ:  l40105E8F l40105E91
l40105E8F:
	a3 = a3 + a13
	// succ:  l40105E91
l40105E91:
	a14 = a3 - a4
	// succ:  l40105E94
l40105E94:
	a3 = a12 | a12
	a2 = a14 | a14
	Mem0[a1 + 0x00000018:word32] = a6
	Mem0[a1 + 0x00000014:word32] = a7
	a0 = 0x40105EA1
	call __umodsi3 (retsize: 0;)
	a4 = a2
	a3 = a12
	a2 = a14
	Mem0[a1 + 0x00000010:word32] = a4
	a0 = 0x40105EAD
	call __udivsi3 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000010:word32]
	a6 = Mem0[a1 + 0x00000018:word32]
	a4 = a4 << 16
	a6 = a6 & 0x0000FFFF
	a2 = a2 * a15
	a6 = a4 | a6
	a7 = Mem0[a1 + 0x00000014:word32]
	branch a6 >=u a2 l40105ECC
	// succ:  l40105EC2 l40105ECC
l40105EC2:
	a6 = a6 + a13
	branch a6 <u a13 l40105ECC
	// succ:  l40105EC7 l40105ECC
l40105EC7:
	branch a6 >=u a2 l40105ECC
	// succ:  l40105ECA l40105ECC
l40105ECA:
	a6 = a6 + a13
	// succ:  l40105ECC
l40105ECC:
	a6 = a6 - a2
	SAR = a7
	a2 = a6 >> SAR
	a3 = 0
	goto l4010603B
	// succ:  l4010603B
l40105EDC:
	branch a3 >=u a5 l40105EE5
	// succ:  l40105EDF l40105EE5
l40105EDF:
	a2 = a14
	goto l4010603B
	// succ:  l4010603B
l40105EE5:
	a8 = __nsau(a5)
	branch a8 != 0x00000000 l40105F0A
	// succ:  l40105EEA l40105F0A
l40105EEA:
	branch a14 >=u a4 l40105EF0
	// succ:  l40105EED l40105EF0
l40105EED:
	branch a5 >=u a3 l40105F02
	// succ:  l40105EF0 l40105F02
l40105EF0:
	a14 = a14 - a4
	a15 = a15 - a5
	a2 = 1
	branch a6 <u a14 l40105EFD
	// succ:  l40105EFB l40105EFD
l40105EFB:
	a2 = 0
	// succ:  l40105EFD
l40105EFD:
	a9 = a15 - a2
	a6 = a14
	// succ:  l40105F02
l40105F02:
	a2 = a6
	a3 = a9
	goto l4010603B
	// succ:  l4010603B
l40105F0A:
	a12 = 0x00000020
	a12 = a12 - a8
	SAR = 0x00000020 - a8
	a5 = a5 << SAR
	Mem0[a1:word32] = a12
	SAR = a12
	a2 = a4 >> SAR
	a12 = a2 | a5
	a2 = Mem0[a1 + 0x00000000:word32]
	a13 = a12 >>u 0x00000010 & 0x0000FFFF
	SAR = a2
	a6 = a3 >> SAR
	SAR = 0x00000020 - a8
	a15 = a3 << SAR
	SAR = a2
	a7 = a14 >> SAR
	SAR = 0x00000020 - a8
	a4 = a4 << SAR
	a2 = a6
	a3 = a13
	a15 = a7 | a15
	Mem0[a1 + 0x00000004:word32] = a4
	Mem0[a1 + 0x0000000C:word32] = a8
	Mem0[a1 + 0x00000018:word32] = a6
	a0 = 0x40105F4F
	call __umodsi3 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000018:word32]
	a7 = a2
	a3 = a13
	a2 = a6
	Mem0[a1 + 0x00000014:word32] = a7
	a0 = 0x40105F5C
	call __udivsi3 (retsize: 0;)
	a7 = Mem0[a1 + 0x00000014:word32]
	a6 = a12 & 0x0000FFFF
	a4 = a2
	a3 = a7 << 16
	a9 = a15 >>u 0x00000010 & 0x0000FFFF
	a8 = Mem0[a1 + 0x0000000C:word32]
	a2 = a2 * a6
	a3 = a3 | a9
	SAR = 0x00000020 - a8
	a14 = a14 << SAR
	branch a3 >=u a2 l40105F90
	// succ:  l40105F7A l40105F90
l40105F7A:
	a3 = a3 + a12
	a7 = a4 - 1
	branch a3 <u a12 l40105F8E
	// succ:  l40105F81 l40105F8E
l40105F81:
	branch a3 >=u a2 l40105F8E
	// succ:  l40105F84 l40105F8E
l40105F84:
	a4 = a4 - 2
	a3 = a3 + a12
	goto l40105F90
	// succ:  l40105F90
l40105F8E:
	a4 = a7
	// succ:  l40105F90
l40105F90:
	a7 = a3 - a2
	a2 = a7 | a7
	a3 = a13 | a13
	Mem0[a1 + 0x00000010:word32] = a4
	Mem0[a1 + 0x00000018:word32] = a6
	Mem0[a1 + 0x0000000C:word32] = a8
	Mem0[a1 + 0x00000014:word32] = a7
	a0 = 0x40105FA4
	call __umodsi3 (retsize: 0;)
	a7 = Mem0[a1 + 0x00000014:word32]
	a9 = a2
	a3 = a13
	a2 = a7
	Mem0[a1 + 0x00000008:word32] = a9
	a0 = 0x40105FB1
	call __udivsi3 (retsize: 0;)
	a9 = Mem0[a1 + 0x00000008:word32]
	a6 = Mem0[a1 + 0x00000018:word32]
	a9 = a9 << 16
	a15 = a15 & 0x0000FFFF
	a6 = a2 * a6
	a15 = a9 | a15
	a3 = a2
	a4 = Mem0[a1 + 0x00000010:word32]
	a8 = Mem0[a1 + 0x0000000C:word32]
	branch a15 >=u a6 l40105FE0
	// succ:  l40105FCA l40105FE0
l40105FCA:
	a15 = a15 + a12
	a2 = a2 - 1
	branch a15 <u a12 l40105FDE
	// succ:  l40105FD1 l40105FDE
l40105FD1:
	branch a15 >=u a6 l40105FDE
	// succ:  l40105FD4 l40105FDE
l40105FD4:
	a3 = a3 - 2
	a15 = a15 + a12
	goto l40105FE0
	// succ:  l40105FE0
l40105FDE:
	a3 = a2
	// succ:  l40105FE0
l40105FE0:
	a2 = a4 << 16
	a2 = a3 | a2
	a3 = Mem0[a1 + 0x00000004:word32]
	a15 = a15 - a6
	Mem0[a1 + 0x0000000C:word32] = a8
	a0 = 0x40105FF0
	call __umulsidi3 (retsize: 0;)
	a4 = a3
	a6 = a2 | a2
	a8 = Mem0[a1 + 0x0000000C:word32]
	branch a15 <u a3 l40106001
	// succ:  l40105FFB l40106001
l40105FFB:
	branch a15 != a3 l40106014
	// succ:  l40105FFE l40106014
l40105FFE:
	branch a14 >=u a2 l40106014
	// succ:  l40106001 l40106014
l40106001:
	a4 = Mem0[a1 + 0x00000004:word32]
	a5 = a3 - a12
	a2 = a2 - a4
	a7 = 1
	branch a6 <u a2 l40106011
	// succ:  l4010600E l40106011
l4010600E:
	a7 = 0x00000000
	// succ:  l40106011
l40106011:
	a4 = a5 - a7
	// succ:  l40106014
l40106014:
	a10 = a14 - a2
	a15 = a15 - a4
	a2 = 1
	branch a14 <u a10 l40106021
	// succ:  l4010601F l40106021
l4010601F:
	a2 = 0
	// succ:  l40106021
l40106021:
	a4 = Mem0[a1 + 0x00000000:word32]
	a3 = a15 - a2
	SAR = 0x00000020 - a4
	a12 = a3 << SAR
	SAR = a8
	a10 = a10 >> SAR
	a2 = a12 | a10
	SAR = a8
	a3 = a3 >> SAR
	// succ:  l4010603B
l4010603B:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  __umoddi3_exit
__umoddi3_exit:


// __divsi3
// Return size: 0
void __divsi3()
__divsi3_entry:
	// succ:  l4010604C
l4010604C:
	a1 = fp
	a7 = a2 ^ a3
	a6 = abs(a2)
	a3 = abs(a3)
	branch a3 <u 0x00000002 l4010608C
	// succ:  l40106058 l4010608C
l40106058:
	a5 = __nsau(a6)
	a4 = __nsau(a3)
	branch a5 >=u a4 l40106098
	// succ:  l40106061 l40106098
l40106061:
	a4 = a4 - a5
	SAR = 0x00000020 - a4
	a3 = a3 << SAR
	a2 = 0
	// succ:  l4010606C
l4010606C:
	branch a6 <u a3 l40106074
	// succ:  l4010606F l40106074
l4010606F:
	a6 = a6 - a3
	a2 = a2 + 1
	// succ:  l40106074
l40106074:
	a2 = a2 << 31
	a3 = a3 >>u 1
	a4 = a4 - 1
	branch a4 != 0x00000000 l4010606C
	// succ:  l4010607F l4010606C
l4010607F:
	branch a6 <u a3 l40106084
	// succ:  l40106082 l40106084
l40106082:
	a2 = a2 + 1
	// succ:  l40106084
l40106084:
	a5 = -a2
	branch a7 >= 0x00000000 l4010608A
	// succ:  l40106087_1 l4010608A
l40106087_1:
	a2 = a5
	// succ:  l4010608A
l4010608A:
	return
	// succ:  __divsi3_exit
l4010608C:
	branch a3 == 0x00000000 l401060A5
	// succ:  l4010608E l401060A5
l4010608E:
	a2 = -a6
	branch a7 < 0x00000000 l40106094
	// succ:  l40106091_1 l40106094
l40106091_1:
	a2 = a6
	// succ:  l40106094
l40106094:
	return
	// succ:  __divsi3_exit
l40106098:
	branch a6 <u a3 l401060AC
	// succ:  l4010609B l401060AC
l4010609B:
	a2 = 1
	a4 = -1
	branch a7 >= 0x00000000 l401060A2
	// succ:  l4010609F_1 l401060A2
l4010609F_1:
	a2 = a4
	// succ:  l401060A2
l401060A2:
	return
	// succ:  __divsi3_exit
l401060A5:
	__ill()
l401060AC:
	a2 = 0
	return
	// succ:  __divsi3_exit
__divsi3_exit:


// __udivsi3
// Return size: 0
void __udivsi3()
__udivsi3_entry:
	// succ:  l401060B0
l401060B0:
	a1 = fp
	branch a3 <u 0x00000002 l401060E4
	// succ:  l401060B3 l401060E4
l401060B3:
	a6 = a2
	a5 = __nsau(a6)
	a4 = __nsau(a3)
	branch a5 >=u a4 l401060E8
	// succ:  l401060BE l401060E8
l401060BE:
	a4 = a4 - a5
	SAR = 0x00000020 - a4
	a3 = a3 << SAR
	a2 = 0
	// succ:  l401060C9
l401060C9:
	branch a6 <u a3 l401060D1
	// succ:  l401060CC l401060D1
l401060CC:
	a6 = a6 - a3
	a2 = a2 + 1
	// succ:  l401060D1
l401060D1:
	a2 = a2 << 31
	a3 = a3 >>u 1
	a4 = a4 - 1
	branch a4 != 0x00000000 l401060C9
	// succ:  l401060DC l401060C9
l401060DC:
	branch a6 <u a3 l401060E1
	// succ:  l401060DF l401060E1
l401060DF:
	a2 = a2 + 1
	// succ:  l401060E1
l401060E1:
	return
	// succ:  __udivsi3_exit
l401060E4:
	branch a3 == 0x00000000 l401060F1
	// succ:  l401060E6 l401060F1
l401060E6:
	return
	// succ:  __udivsi3_exit
l401060E8:
	branch a6 <u a3 l401060F8
	// succ:  l401060EB l401060F8
l401060EB:
	a2 = 1
	return
	// succ:  __udivsi3_exit
l401060F1:
	__ill()
l401060F8:
	a2 = 0
	return
	// succ:  __udivsi3_exit
__udivsi3_exit:


// __umodsi3
// Return size: 0
void __umodsi3()
__umodsi3_entry:
	// succ:  l401060FC
l401060FC:
	a1 = fp
	branch a3 <u 0x00000002 l40106128
	// succ:  l401060FF l40106128
l401060FF:
	a5 = __nsau(a2)
	a4 = __nsau(a3)
	branch a5 >=u a4 l40106120
	// succ:  l40106108 l40106120
l40106108:
	a4 = a4 - a5
	SAR = 0x00000020 - a4
	a3 = a3 << SAR
	// succ:  l40106111
l40106111:
	branch a2 <u a3 l40106117
	// succ:  l40106114 l40106117
l40106114:
	a2 = a2 - a3
	// succ:  l40106117
l40106117:
	a3 = a3 >>u 1
	a4 = a4 - 1
	branch a4 != 0x00000000 l40106111
	// succ:  l40106120 l40106111
l40106120:
	branch a2 <u a3 l40106126
	// succ:  l40106123 l40106126
l40106123:
	a2 = a2 - a3
	// succ:  l40106126
l40106126:
	return
	// succ:  __umodsi3_exit
l40106128:
	branch a3 != 0x00000000 l40106131
	// succ:  l4010612A l40106131
l4010612A:
	__ill()
l40106131:
	a2 = 0
	return
	// succ:  __umodsi3_exit
__umodsi3_exit:


// __modsi3
// Return size: 0
void __modsi3()
__modsi3_entry:
	// succ:  l40106138
l40106138:
	a1 = fp
	a7 = a2
	a2 = abs(a2)
	a3 = abs(a3)
	branch a3 <u 0x00000002 l40106174
	// succ:  l40106143 l40106174
l40106143:
	a5 = __nsau(a2)
	a4 = __nsau(a3)
	branch a5 >=u a4 l40106164
	// succ:  l4010614C l40106164
l4010614C:
	a4 = a4 - a5
	SAR = 0x00000020 - a4
	a3 = a3 << SAR
	// succ:  l40106155
l40106155:
	branch a2 <u a3 l4010615B
	// succ:  l40106158 l4010615B
l40106158:
	a2 = a2 - a3
	// succ:  l4010615B
l4010615B:
	a3 = a3 >>u 1
	a4 = a4 - 1
	branch a4 != 0x00000000 l40106155
	// succ:  l40106164 l40106155
l40106164:
	branch a2 <u a3 l4010616A
	// succ:  l40106167 l4010616A
l40106167:
	a2 = a2 - a3
	// succ:  l4010616A
l4010616A:
	branch a7 >= 0x00000000 l40106170
	// succ:  l4010616D l40106170
l4010616D:
	a2 = -a2
	// succ:  l40106170
l40106170:
	return
	// succ:  __modsi3_exit
l40106174:
	branch a3 != 0x00000000 l4010617D
	// succ:  l40106176 l4010617D
l40106176:
	__ill()
l4010617D:
	a2 = 0
	return
	// succ:  __modsi3_exit
__modsi3_exit:


// __ashrdi3
// Return size: 0
void __ashrdi3()
__ashrdi3_entry:
	// succ:  l40106184
l40106184:
	a1 = fp
	SAR = a4
	branch a4 >= 32 l40106194
	// succ:  l4010618A l40106194
l4010618A:
	a2 = (word32) (a3_a2 >>u SAR)
	a3 = a0 >> SAR
	return
	// succ:  __ashrdi3_exit
l40106194:
	a2 = a0 >> SAR
	a3 = a3 >> 31
	return
	// succ:  __ashrdi3_exit
__ashrdi3_exit:


// __umulsidi3
// Return size: 0
void __umulsidi3()
__umulsidi3_entry:
	// succ:  l4010619C
l4010619C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000018:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	a4 = a2 >>u 0x00000010 & 0x0000FFFF
	a5 = a3 >>u 0x00000010 & 0x0000FFFF
	v12 = (uint16) a2
	v13 = (uint16) a5
	a6 = v12 *u v13
	v15 = (uint16) a4
	v16 = (uint16) a3
	a11 = v15 *u v16
	a9 = 0
	a6 = a6 + a11
	branch a6 >=u a11 l401061BD
	// succ:  l401061BA l401061BD
l401061BA:
	a9 = a9 + 1
	// succ:  l401061BD
l401061BD:
	SAR = 0x00
	a9 = (word32) (a9_a6 >>u SAR)
	v20 = (uint16) a2
	v21 = (uint16) a3
	a11 = v20 *u v21
	a6 = a6 << SAR
	a6 = a6 + a11
	branch a6 >=u a11 l401061D0
	// succ:  l401061CE l401061D0
l401061CE:
	a9 = a9 + 1
	// succ:  l401061D0
l401061D0:
	v22 = (uint16) a4
	v23 = (uint16) a5
	a3 = v22 *u v23
	a3 = a3 + a9
	a2 = a6
	a12 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000018:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  __umulsidi3_exit
__umulsidi3_exit:


// pvPortMalloc
// Return size: 0
void pvPortMalloc()
pvPortMalloc_entry:
	// succ:  l401061E4
l401061E4:
	a1 = fp
	a3 = a2 | a2
	a2 = 0x40105834
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x401061F6
	call _malloc_r (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  pvPortMalloc_exit
pvPortMalloc_exit:


// free
// Return size: 0
void free()
free_entry:
	// succ:  l40106200
l40106200:
	a1 = fp
	a3 = a2 | a2
	a2 = 0x40105834
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40106212
	call _free_r (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  free_exit
free_exit:


// _malloc_r
// Return size: 0
void _malloc_r()
_malloc_r_entry:
	// succ:  l4010621C
l4010621C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1:word32] = a14
	a13 = a2
	a14 = a3 + 3
	a2 = -4
	a14 = a14 & a2
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	a14 = a14 + 8
	branch a14 >=u 0x0000000C l40106238
	// succ:  l40106236 l40106238
l40106236:
	a14 = 12
	// succ:  l40106238
l40106238:
	branch a14 < 0x00000000 l40106252
	// succ:  l4010623B l40106252
l4010623B:
	branch a14 <u a3 l40106252
	// succ:  l4010623E l40106252
l4010623E:
	a2 = a13 | a13
	a0 = 0x40106244
	call __malloc_lock (retsize: 0;)
	a2 = 0x40105838
	a12 = Mem0[a2 + 0x00000000:word32]
	a4 = a2 | a2
	a3 = a12
	goto l40106285
	// succ:  l40106285
l40106252:
	a2 = 12
	Mem0[a13:word32] = a2
	goto l401062FA
	// succ:  l401062FA
l40106259:
	a2 = Mem0[a3 + 0x00000000:word32]
	a2 = a2 - a14
	branch a2 < 0x00000000 l40106281
	// succ:  l40106261 l40106281
l40106261:
	a5 = 11
	branch a5 >=u a2 l4010626D
	// succ:  l40106266 l4010626D
l40106266:
	Mem0[a3:word32] = a2
	a12 = a3 + a2
	goto l401062AC
	// succ:  l401062AC
l4010626D:
	branch a12 != a3 l40106278
	// succ:  l40106270 l40106278
l40106270:
	a2 = Mem0[a12 + 0x00000004:word32]
	Mem0[a4:word32] = a2
	goto l401062C2
	// succ:  l401062C2
l40106278:
	a2 = Mem0[a3 + 0x00000004:word32]
	Mem0[a12 + 0x00000004:word32] = a2
	a12 = a3
	goto l401062C2
	// succ:  l401062C2
l40106281:
	a12 = a3
	a3 = Mem0[a3 + 0x00000004:word32]
	// succ:  l40106285
l40106285:
	branch a3 != 0x00000000 l40106259
	// succ:  l40106288 l40106259
l40106288:
	goto l401062E3
	// succ:  l401062E3
l40106296:
	a3 = a14
	a2 = a13
	a0 = 0x4010629D
	call fn402016A0 (retsize: 0;)
	a3 = a2
	branch a2 == -1 l401062EE
	// succ:  l401062A2 l401062EE
l401062A2:
	a12 = a2 + 3
	a2 = -4
	a12 = a12 & a2
	branch a12 != a3 l401062B1
	// succ:  l401062AC l401062B1
l401062AC:
	Mem0[a12:word32] = a14
	goto l401062C2
	// succ:  l401062C2
l401062B1:
	a2 = a13
	a3 = a12 - a3
	a0 = 0x401062B9
	call fn402016A0 (retsize: 0;)
	branch a2 != -1 l401062AC
	// succ:  l401062BC l401062AC
l401062BC:
	goto l401062EE
	// succ:  l401062EE
l401062C2:
	a2 = a13 | a13
	a0 = 0x401062C8
	call __malloc_unlock (retsize: 0;)
	a4 = a12 + 11
	a2 = 0xFFFFFFF8
	a3 = a12 + 4
	a2 = a4 & a2
	a3 = a2 - a3
	branch a3 == 0x00000000 l401062FC
	// succ:  l401062D8 l401062FC
l401062D8:
	a12 = a12 + a3
	a3 = -a3
	Mem0[a12:word32] = a3
	goto l401062FC
	// succ:  l401062FC
l401062E3:
	a12 = 0x4010583C
	a2 = Mem0[a12 + 0x00000000:word32]
	branch a2 != 0x00000000 l40106296
	// succ:  l401062EB l40106296
l401062EB:
	goto l4014628C
	// succ:  l4014628C
l401062EE:
	a2 = 0x0000000C
	Mem0[a13:word32] = a2
	a2 = a13 | a13
	a0 = 0x401062FA
	call __malloc_unlock (retsize: 0;)
	// succ:  l401062FA
l401062FA:
	a2 = 0
	// succ:  l401062FC
l401062FC:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  _malloc_r_exit
l4014628C:
_malloc_r_exit:


// _free_r
// Return size: 0
void _free_r()
_free_r_entry:
	// succ:  l4010630C
l4010630C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	a13 = a2
	branch a3 == 0x00000000 l401063B2
	// succ:  l4010631D l401063B2
l4010631D:
	a12 = a3 - 4
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = a12 + a2
	branch a2 >= 0x00000000 l40106327
	// succ:  l40106324_1 l40106327
l40106324_1:
	a12 = a3
	// succ:  l40106327
l40106327:
	a2 = a13
	a0 = 0x4010632C
	call __malloc_lock (retsize: 0;)
	a2 = 0x40105838
	a3 = Mem0[a2 + 0x00000000:word32]
	a5 = a2
	branch a3 != 0x00000000 l4010633C
	// succ:  l40106335 l4010633C
l40106335:
	Mem0[a12 + 0x00000004:word32] = a3
	Mem0[a2:word32] = a12
	goto l401063AA
	// succ:  l401063AA
l4010633C:
	branch a12 >=u a3 l4010635C
	// succ:  l4010633F l4010635C
l4010633F:
	a4 = Mem0[a12 + 0x00000000:word32]
	a2 = a12 + a4
	branch a2 != a3 l40106354
	// succ:  l40106346 l40106354
l40106346:
	a3 = Mem0[a2 + 0x00000000:word32]
	a2 = Mem0[a2 + 0x00000004:word32]
	a4 = a4 + a3
	Mem0[a12:word32] = a4
	Mem0[a12 + 0x00000004:word32] = a2
	goto l40106356
	// succ:  l40106356
l40106354:
	Mem0[a12 + 0x00000004:word32] = a3
	// succ:  l40106356
l40106356:
	Mem0[a5:word32] = a12
	goto l401063AA
	// succ:  l401063AA
l4010635C:
	a4 = Mem0[a3 + 0x00000004:word32]
	branch a12 <u a4 l40106368
	// succ:  l40106361 l40106368
l40106361:
	branch a4 == 0x00000000 l40106368
	// succ:  l40106363 l40106368
l40106363:
	a3 = a4
l40106368:
	a2 = Mem0[a3 + 0x00000000:word32]
	a5 = a3 + a2
	branch a5 != a12 l40106388
	// succ:  l4010636F l40106388
l4010636F:
	a5 = Mem0[a12 + 0x00000000:word32]
	a2 = a2 + a5
	Mem0[a3:word32] = a2
	a5 = a3 + a2
	branch a5 != a4 l401063AA
	// succ:  l4010637A l401063AA
l4010637A:
	a5 = Mem0[a4 + 0x00000000:word32]
	a2 = a2 + a5
	Mem0[a3:word32] = a2
	a2 = Mem0[a4 + 0x00000004:word32]
	Mem0[a3 + 0x00000004:word32] = a2
	goto l401063AA
	// succ:  l401063AA
l40106388:
	branch a12 >=u a5 l40106392
	// succ:  l4010638B l40106392
l4010638B:
	a2 = 12
	Mem0[a13:word32] = a2
	goto l401063AA
	// succ:  l401063AA
l40106392:
	a2 = Mem0[a12 + 0x00000000:word32]
	a5 = a12 + a2
	branch a5 != a4 l401063A6
	// succ:  l40106399 l401063A6
l40106399:
	a5 = Mem0[a4 + 0x00000000:word32]
	a2 = a2 + a5
	Mem0[a12:word32] = a2
	a2 = Mem0[a4 + 0x00000004:word32]
	Mem0[a12 + 0x00000004:word32] = a2
	goto l401063A8
	// succ:  l401063A8
l401063A6:
	Mem0[a12 + 0x00000004:word32] = a4
	// succ:  l401063A8
l401063A8:
	Mem0[a3 + 0x00000004:word32] = a12
	// succ:  l401063AA
l401063AA:
	a2 = a13
	a1 = a1 | a1
	a0 = 0x401063B2
	call __malloc_unlock (retsize: 0;)
	// succ:  l401063B2
l401063B2:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  _free_r_exit
_free_r_exit:


// memcpy
// Return size: 0
void memcpy()
memcpy_entry:
	goto l40106404
	// succ:  l40106404
l401063C1:
	branch a4 == 0x00000000 l401063D2
	// succ:  l401063C3 l401063D2
l401063C3:
	a7 = a3 + a4
	// succ:  l401063C5
l401063C5:
	v13 = Mem0[a3 + 0x00000000:byte]
	a6 = (uint32) v13
	a3 = a3 + 1
	Mem0[a5:byte] = a6
	a5 = a5 + 1
	branch a3 <u a7 l401063C5
	// succ:  l401063D2 l401063C5
l401063D2:
	return
	// succ:  memcpy_exit
l401063D4:
	branch a4 <u 0x00000007 l401063C1
	// succ:  l401063D7 l401063C1
l401063D7:
	v10 = Mem0[a3 + 0x00000000:byte]
	a6 = (uint32) v10
	a3 = a3 + 1
	a4 = a4 - 1
	Mem0[a5:byte] = a6
	a5 = a5 + 1
	branch (a5 & 0x00000002) == 0x00000000 l4010640C
	// succ:  l401063E8 l4010640C
l401063E8:
	branch a4 <u 0x00000006 l401063C1
	// succ:  l401063EB l401063C1
l401063EB:
	v11 = Mem0[a3 + 0x00000000:byte]
	a6 = (uint32) v11
	v12 = Mem0[a3 + 0x00000001:byte]
	a7 = (uint32) v12
	a3 = a3 + 2
	a4 = a4 - 2
	Mem0[a5:byte] = a6
	Mem0[a5 + 0x00000001:byte] = a7
	a5 = a5 + 2
	goto l4010640C
	// succ:  l4010640C
l40106404:
	a1 = fp
	a5 = a2
	branch (a2 & 0x00000001) != 0x00000000 l401063D4
	// succ:  l40106409 l401063D4
l40106409:
	branch (a2 & 0x00000002) != 0x00000000 l401063E8
	// succ:  l4010640C l401063E8
l4010640C:
	a7 = a4 >>u 4
	a8 = a3 << 2
	branch a8 != 0x00000000 l40106478
	// succ:  l40106415 l40106478
l40106415:
	branch a7 == 0x00000000 l40106435
	// succ:  l40106417 l40106435
l40106417:
	a8 = a7 << 28
	a8 = a8 + a3
	// succ:  l4010641C
l4010641C:
	a6 = Mem0[a3 + 0x00000000:word32]
	a7 = Mem0[a3 + 0x00000004:word32]
	Mem0[a5:word32] = a6
	a6 = Mem0[a3 + 0x00000008:word32]
	Mem0[a5 + 0x00000004:word32] = a7
	a7 = Mem0[a3 + 0x0000000C:word32]
	Mem0[a5 + 0x00000008:word32] = a6
	a3 = a3 + 16
	Mem0[a5 + 0x0000000C:word32] = a7
	a5 = a5 + 16
	branch a3 <u a8 l4010641C
	// succ:  l40106435 l4010641C
l40106435:
	branch (a4 & 0x00000008) == 0x00000000 l40106444
	// succ:  l40106438 l40106444
l40106438:
	a6 = Mem0[a3 + 0x00000000:word32]
	a7 = Mem0[a3 + 0x00000004:word32]
	a3 = a3 + 8
	Mem0[a5:word32] = a6
	Mem0[a5 + 0x00000004:word32] = a7
	a5 = a5 + 8
	// succ:  l40106444
l40106444:
	branch (a4 & 0x00000004) != 0x00000000 l40106450
	// succ:  l40106447 l40106450
l40106447:
	branch (a4 & 0x00000002) != 0x00000000 l40106460
	// succ:  l4010644A l40106460
l4010644A:
	branch (a4 & 0x00000001) != 0x00000000 l40106470
	// succ:  l4010644D l40106470
l4010644D:
	return
	// succ:  memcpy_exit
l40106450:
	a6 = Mem0[a3 + 0x00000000:word32]
	a3 = a3 + 4
	Mem0[a5:word32] = a6
	a5 = a5 + 4
	branch (a4 & 0x00000002) != 0x00000000 l40106460
	// succ:  l4010645B l40106460
l4010645B:
	branch (a4 & 0x00000001) != 0x00000000 l40106470
	// succ:  l4010645E l40106470
l4010645E:
	return
	// succ:  memcpy_exit
l40106460:
	v15 = Mem0[a3 + 0x00000000:uint16]
	a6 = (uint32) v15
	a3 = a3 + 2
	Mem0[a5:word16] = a6
	a5 = a5 + 2
	branch (a4 & 0x00000001) != 0x00000000 l40106470
	// succ:  l4010646D l40106470
l4010646D:
	return
	// succ:  memcpy_exit
l40106470:
	v14 = Mem0[a3 + 0x00000000:byte]
	a6 = (uint32) v14
	Mem0[a5:byte] = a6
	// succ:  l40106476
l40106476:
	return
	// succ:  memcpy_exit
l40106478:
	branch a4 == 0x00000000 l40106476
	// succ:  l4010647B l40106476
l4010647B:
	SAR = a3 * 0x00000008
	a11 = a8 >>u 0x0000001E & 0x00000003
	a3 = a3 - a11
	a6 = Mem0[a3 + 0x00000000:word32]
	branch a7 == 0x00000000 l401064B4
	// succ:  l40106488 l401064B4
l40106488:
	a10 = a7 << 28
	a10 = a10 + a3
	// succ:  l4010648E
l4010648E:
	a7 = Mem0[a3 + 0x00000004:word32]
	a8 = Mem0[a3 + 0x00000008:word32]
	a6 = (word32) (a7_a6 >>u SAR)
	Mem0[a5:word32] = a6
	a9 = Mem0[a3 + 0x0000000C:word32]
	a7 = (word32) (a8_a7 >>u SAR)
	Mem0[a5 + 0x00000004:word32] = a7
	a6 = Mem0[a3 + 0x00000010:word32]
	a8 = (word32) (a9_a8 >>u SAR)
	Mem0[a5 + 0x00000008:word32] = a8
	a3 = a3 + 16
	a9 = (word32) (a6_a9 >>u SAR)
	Mem0[a5 + 0x0000000C:word32] = a9
	a5 = a5 + 16
	branch a3 <u a10 l4010648E
	// succ:  l401064B4 l4010648E
l401064B4:
	branch (a4 & 0x00000008) == 0x00000000 l401064CC
	// succ:  l401064B7 l401064CC
l401064B7:
	a7 = Mem0[a3 + 0x00000004:word32]
	a8 = Mem0[a3 + 0x00000008:word32]
	a6 = (word32) (a7_a6 >>u SAR)
	Mem0[a5:word32] = a6
	a3 = a3 + 8
	a7 = (word32) (a8_a7 >>u SAR)
	Mem0[a5 + 0x00000004:word32] = a7
	a5 = a5 + 8
	a6 = a8 | a8
	// succ:  l401064CC
l401064CC:
	branch (a4 & 0x00000004) == 0x00000000 l401064DC
	// succ:  l401064CF l401064DC
l401064CF:
	a7 = Mem0[a3 + 0x00000004:word32]
	a3 = a3 + 4
	a6 = (word32) (a7_a6 >>u SAR)
	Mem0[a5:word32] = a6
	a5 = a5 + 4
	a6 = a7
	// succ:  l401064DC
l401064DC:
	a3 = a3 + a11
	branch (a4 & 0x00000002) != 0x00000000 l401064E8
	// succ:  l401064E1 l401064E8
l401064E1:
	branch (a4 & 0x00000001) != 0x00000000 l401064FD
	// succ:  l401064E4 l401064FD
l401064E4:
	return
	// succ:  memcpy_exit
l401064E8:
	v25 = Mem0[a3 + 0x00000000:byte]
	a6 = (uint32) v25
	v26 = Mem0[a3 + 0x00000001:byte]
	a7 = (uint32) v26
	a3 = a3 + 2
	Mem0[a5:byte] = a6
	Mem0[a5 + 0x00000001:byte] = a7
	a5 = a5 + 2
	branch (a4 & 0x00000001) != 0x00000000 l401064FD
	// succ:  l401064FB l401064FD
l401064FB:
	return
	// succ:  memcpy_exit
l401064FD:
	v24 = Mem0[a3 + 0x00000000:byte]
	a6 = (uint32) v24
	Mem0[a5:byte] = a6
	return
	// succ:  memcpy_exit
memcpy_exit:


// memset
// Return size: 0
void memset()
memset_entry:
	goto l40106534
	// succ:  l40106534
l40106509:
	branch a4 == 0x00000000 l40106515
	// succ:  l4010650B l40106515
l4010650B:
	a6 = a5 + a4
	// succ:  l4010650D
l4010650D:
	Mem0[a5:byte] = a3
	a5 = a5 + 1
	branch a5 <u a6 l4010650D
	// succ:  l40106515 l4010650D
l40106515:
	return
	// succ:  memset_exit
l40106518:
	branch a4 <u 0x00000008 l40106509
	// succ:  l4010651B l40106509
l4010651B:
	Mem0[a5:byte] = a3
	a5 = a5 + 1
	a4 = a4 - 1
	branch (a5 & 0x00000002) == 0x00000000 l4010654C
	// succ:  l40106525 l4010654C
l40106525:
	branch a4 <u 0x00000008 l40106509
	// succ:  l40106528 l40106509
l40106528:
	Mem0[a5:word16] = a3
	a5 = a5 + 2
	a4 = a4 - 2
	goto l4010654C
	// succ:  l4010654C
l40106534:
	a1 = fp
	a3 = a3 & 0x000000FF
	a7 = a3 << 24
	a3 = a3 | a7
	a7 = a3 << 16
	a3 = a3 | a7
	a5 = a2 | a2
	branch (a2 & 0x00000001) != 0x00000000 l40106518
	// succ:  l40106549 l40106518
l40106549:
	branch (a2 & 0x00000002) != 0x00000000 l40106525
	// succ:  l4010654C l40106525
l4010654C:
	a7 = a4 >>u 4
	branch a7 == 0x00000000 l40106564
	// succ:  l40106551 l40106564
l40106551:
	a6 = a7 << 28
	a6 = a6 + a5
	// succ:  l40106556
l40106556:
	Mem0[a5:word32] = a3
	Mem0[a5 + 0x00000004:word32] = a3
	Mem0[a5 + 0x00000008:word32] = a3
	Mem0[a5 + 0x0000000C:word32] = a3
	a5 = a5 + 16
	branch a5 <u a6 l40106556
	// succ:  l40106564 l40106556
l40106564:
	branch (a4 & 0x00000008) == 0x00000000 l4010656D
	// succ:  l40106567 l4010656D
l40106567:
	Mem0[a5:word32] = a3
	Mem0[a5 + 0x00000004:word32] = a3
	a5 = a5 + 8
	// succ:  l4010656D
l4010656D:
	branch (a4 & 0x00000004) == 0x00000000 l40106574
	// succ:  l40106570 l40106574
l40106570:
	Mem0[a5:word32] = a3
	a5 = a5 + 4
	// succ:  l40106574
l40106574:
	branch (a4 & 0x00000002) == 0x00000000 l4010657C
	// succ:  l40106577 l4010657C
l40106577:
	Mem0[a5:word16] = a3
	a5 = a5 + 2
	// succ:  l4010657C
l4010657C:
	branch (a4 & 0x00000001) == 0x00000000 l40106582
	// succ:  l4010657F l40106582
l4010657F:
	Mem0[a5:byte] = a3
	// succ:  l40106582
l40106582:
	return
	// succ:  memset_exit
memset_exit:


// memcmp
// Return size: 0
void memcmp()
memcmp_entry:
	// succ:  l40106584
l40106584:
	a1 = fp
	a5 = 0
	goto l401065A0
	// succ:  l401065A0
l40106589:
	a6 = a2 + a5
	a5 = a5 + 1
	v8 = Mem0[a6 + 0x00000000:byte]
	a7 = (uint32) v8
	a6 = a3 + a5
	a6 = a6 - 1
	v10 = Mem0[a6 + 0x00000000:byte]
	a6 = (uint32) v10
	branch a7 == a6 l401065A0
	// succ:  l4010659A l401065A0
l4010659A:
	a2 = a7 - a6
	return
	// succ:  memcmp_exit
l401065A0:
	branch a5 != a4 l40106589
	// succ:  l401065A3 l40106589
l401065A3:
	a2 = 0
	return
	// succ:  memcmp_exit
memcmp_exit:


// memmove
// Return size: 0
void memmove()
memmove_entry:
	// succ:  l401065A8
l401065A8:
	a1 = fp
	branch a3 <u a2 l401065B0
	// succ:  l401065AB l401065B0
l401065AB:
	a5 = 0
	goto l401065DE
	// succ:  l401065DE
l401065B0:
	a5 = a3 + a4
	branch a2 >=u a5 l401065AB
	// succ:  l401065B5 l401065AB
l401065B5:
	a3 = -a4
	a6 = a2 + a4
	a5 = a5 + a3
	a3 = a6 + a3
	goto l401065CB
	// succ:  l401065CB
l401065C1:
	a6 = a5 + a4
	v9 = Mem0[a6 + 0x00000000:byte]
	a7 = (uint32) v9
	a6 = a3 + a4
	Mem0[a6:byte] = a7
	// succ:  l401065CB
l401065CB:
	a4 = a4 - 1
	branch a4 != -1 l401065C1
	// succ:  l401065D0 l401065C1
l401065D0:
	return
	// succ:  memmove_exit
l401065D2:
	a6 = a3 + a5
	v10 = Mem0[a6 + 0x00000000:byte]
	a7 = (uint32) v10
	a6 = a2 + a5
	Mem0[a6:byte] = a7
	a5 = a5 + 1
	// succ:  l401065DE
l401065DE:
	branch a5 != a4 l401065D2
	// succ:  l401065E1 l401065D2
l401065E1:
	return
	// succ:  memmove_exit
memmove_exit:


// srand
// Return size: 0
void srand()
srand_entry:
	// succ:  l401065E4
l401065E4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = a2 | a2
	a2 = 0x40105834
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	a2 = Mem0[a12 + 0x00000038:word32]
	branch a2 != 0x00000000 l40106634
	// succ:  l401065FB l40106634
l401065FB:
	a2 = 24
	a0 = 0x40106600
	call fn402061E4 (retsize: 0;)
	a3 = 0x40105840
	Mem0[a12 + 0x00000038:word32] = a2
	Mem0[a2:word16] = a3
	a3 = 0x40105844
	a4 = 0x40105854
	Mem0[a2 + 0x00000002:word16] = a3
	a3 = 0x40105848
	a5 = 0x40105858
	Mem0[a2 + 0x00000004:word16] = a3
	a3 = 0x4010584C
	Mem0[a2 + 0x00000010:word32] = a4
	Mem0[a2 + 0x00000006:word16] = a3
	a3 = 0x40105850
	Mem0[a2 + 0x00000014:word32] = a5
	Mem0[a2 + 0x00000008:word16] = a3
	a3 = 5
	Mem0[a2 + 0x0000000A:word16] = a3
	a3 = 11
	Mem0[a2 + 0x0000000C:word16] = a3
	// succ:  l40106634
l40106634:
	a3 = Mem0[a12 + 0x00000038:word32]
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = 0
	Mem0[a3 + 0x00000010:word32] = a13
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	Mem0[a3 + 0x00000014:word32] = a2
	a1 = a1 + 16
	return
	// succ:  srand_exit
srand_exit:


// rand
// Return size: 0
void rand()
rand_entry:
	// succ:  l40106648
l40106648:
	a1 = fp
	a2 = 0x40105834
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	a2 = Mem0[a12 + 0x00000038:word32]
	branch a2 != 0x00000000 l40106693
	// succ:  l4010665A l40106693
l4010665A:
	a2 = 24
	a0 = 0x4010665F
	call fn402061E4 (retsize: 0;)
	a3 = 0x40105840
	Mem0[a12 + 0x00000038:word32] = a2
	Mem0[a2:word16] = a3
	a3 = 0x40105844
	a4 = 0x40105854
	Mem0[a2 + 0x00000002:word16] = a3
	a3 = 0x40105848
	a5 = 0x40105858
	Mem0[a2 + 0x00000004:word16] = a3
	a3 = 0x4010584C
	Mem0[a2 + 0x00000010:word32] = a4
	Mem0[a2 + 0x00000006:word16] = a3
	a3 = 0x40105850
	Mem0[a2 + 0x00000014:word32] = a5
	Mem0[a2 + 0x00000008:word16] = a3
	a3 = 5
	Mem0[a2 + 0x0000000A:word16] = a3
	a3 = 11
	Mem0[a2 + 0x0000000C:word16] = a3
	// succ:  l40106693
l40106693:
	a12 = Mem0[a12 + 0x00000038:word32]
	a4 = 0x4010585C
	a5 = 0x40105860
	a2 = Mem0[a12 + 0x00000010:word32]
	a3 = Mem0[a12 + 0x00000014:word32]
	a0 = 0x401066A2
	call fn402058EC (retsize: 0;)
	a4 = a2 + 1
	a5 = 1
	branch a4 <u a2 l401066AC
	// succ:  l401066A9 l401066AC
l401066A9:
	a5 = 0x00000000
	// succ:  l401066AC
l401066AC:
	a2 = 0x401018E0
	a0 = Mem0[a1 + 0x0000000C:word32]
	a3 = a5 + a3
	Mem0[a12 + 0x00000010:word32] = a4
	Mem0[a12 + 0x00000014:word32] = a3
	a2 = a3 & a2
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  rand_exit
rand_exit:


// bzero
// Return size: 0
void bzero()
bzero_entry:
	// succ:  l401066C4
l401066C4:
	a1 = fp
	a3 = a2 + a3
	a4 = 0
	goto l401066D1
	// succ:  l401066D1
l401066CC:
	Mem0[a2:byte] = a4
	a2 = a2 + 1
	// succ:  l401066D1
l401066D1:
	branch a2 != a3 l401066CC
	// succ:  l401066D4 l401066CC
l401066D4:
	return
	// succ:  bzero_exit
bzero_exit:


// __malloc_lock
// Return size: 0
void __malloc_lock()
__malloc_lock_entry:
	// succ:  l401066D8
l401066D8:
	a1 = fp
	a2 = 0x40105864
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x401066E4
	call fn402008B8 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  __malloc_lock_exit
__malloc_lock_exit:


// __malloc_unlock
// Return size: 0
void __malloc_unlock()
__malloc_unlock_entry:
	// succ:  l401066F0
l401066F0:
	a1 = fp
	a2 = 0x40105864
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x401066FC
	call fn402008E0 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  __malloc_unlock_exit
__malloc_unlock_exit:


// _lock_init
// Return size: 0
void _lock_init()
_lock_init_entry:
	// succ:  l40106708
l40106708:
	a1 = fp
	return
	// succ:  _lock_init_exit
_lock_init_exit:


// __dummy_lock_try
// Return size: 0
void __dummy_lock_try()
__dummy_lock_try_entry:
	// succ:  l4010670C
l4010670C:
	a1 = fp
	a2 = 0
	return
	// succ:  __dummy_lock_try_exit
__dummy_lock_try_exit:


// _iprintf_r
// Return size: 0
void _iprintf_r()
_iprintf_r_entry:
	// succ:  l40106710
l40106710:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a4
	Mem0[a1 + 0x0000001C:word32] = a5
	Mem0[a1 + 0x00000020:word32] = a6
	Mem0[a1 + 0x00000024:word32] = a7
	a12 = a2
	a13 = a3
	branch a2 == 0x00000000 l40106734
	// succ:  l4010672A l40106734
l4010672A:
	a2 = Mem0[a2 + 0x00000018:word32]
	branch a2 != 0x00000000 l40106734
	// succ:  l4010672F l40106734
l4010672F:
	a2 = a12
	a0 = 0x40106734
	call __sinit (retsize: 0;)
	// succ:  l40106734
l40106734:
	a3 = Mem0[a12 + 0x00000008:word32]
	a6 = a1 + 16
	a5 = a1 + 32
	a7 = 0x00000008
	a2 = a12 | a12
	a4 = a13
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1:word32] = a5
	Mem0[a1 + 0x00000008:word32] = a7
	a0 = 0x4010674E
	call _vfprintf_r (retsize: 0;)
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a1 = a1 + 64
	return
	// succ:  _iprintf_r_exit
_iprintf_r_exit:


// ets_printf
// Return size: 0
void ets_printf()
ets_printf_entry:
	// succ:  l4010675C
l4010675C:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000034:word32] = a13
	a13 = a2 | a2
	a2 = 0x40105834
	Mem0[a1 + 0x00000014:word32] = a3
	Mem0[a1 + 0x00000018:word32] = a4
	Mem0[a1 + 0x0000001C:word32] = a5
	Mem0[a1 + 0x00000020:word32] = a6
	Mem0[a1 + 0x00000024:word32] = a7
	Mem0[a1 + 0x00000038:word32] = a12
	a12 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000003C:word32] = a0
	branch a12 == 0x00000000 l40106784
	// succ:  l4010677B l40106784
l4010677B:
	a2 = Mem0[a12 + 0x00000018:word32]
	branch a2 != 0x00000000 l40106784
	// succ:  l4010677F l40106784
l4010677F:
	a2 = a12
	a0 = 0x40106784
	call __sinit (retsize: 0;)
	// succ:  l40106784
l40106784:
	a3 = Mem0[a12 + 0x00000008:word32]
	a6 = a1 + 16
	a5 = a1 + 32
	a7 = 0x00000004
	a2 = a12 | a12
	a4 = a13
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1:word32] = a5
	Mem0[a1 + 0x00000008:word32] = a7
	a0 = 0x4010679E
	call _vfprintf_r (retsize: 0;)
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a1 = a1 + 64
	return
	// succ:  ets_printf_exit
ets_printf_exit:


// _sprintf_r
// Return size: 0
void _sprintf_r()
_sprintf_r_entry:
	// succ:  l401067AC
l401067AC:
	a1 = fp
	a9 = 0x000000B0
	a1 = a1 - a9
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000010:word32] = a3
	a3 = 0x401018E0
	Mem0[a1 + 0x0000008C:word32] = a5
	Mem0[a1 + 0x00000008:word32] = a3
	Mem0[a1 + 0x00000014:word32] = a3
	a3 = -1
	Mem0[a1 + 0x00000090:word32] = a6
	Mem0[a1 + 0x0000000E:word16] = a3
	a5 = 0x00000208
	a3 = 0x00000090
	a6 = 0x00000080
	Mem0[a1 + 0x00000094:word32] = a7
	Mem0[a1 + 0x0000000C:word16] = a5
	a6 = a1 + a6
	a5 = a1 + a3
	a7 = 12
	a3 = a1
	Mem0[a1 + 0x000000AC:word32] = a0
	Mem0[a1 + 0x0000006C:word32] = a6
	Mem0[a1 + 0x00000068:word32] = a5
	Mem0[a1 + 0x00000070:word32] = a7
	a0 = 0x401067F1
	call _svfiprintf_r (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a4 = 0
	Mem0[a3:byte] = a4
	a0 = Mem0[a1 + 0x000000AC:word32]
	a9 = 0x000000B0
	a1 = a1 + a9
	return
	// succ:  _sprintf_r_exit
_sprintf_r_exit:


// siprintf
// Return size: 0
void siprintf()
siprintf_entry:
	// succ:  l40106804
l40106804:
	a1 = fp
	a9 = 0x000000B0
	a1 = a1 - a9
	Mem0[a1:word32] = a2
	Mem0[a1 + 0x00000010:word32] = a2
	a2 = 0x401018E0
	Mem0[a1 + 0x0000008C:word32] = a5
	Mem0[a1 + 0x00000008:word32] = a2
	Mem0[a1 + 0x00000014:word32] = a2
	a2 = -1
	Mem0[a1 + 0x0000000E:word16] = a2
	a2 = 0x00000090
	a5 = a1 + a2
	a2 = 0x40105834
	Mem0[a1 + 0x00000088:word32] = a4
	Mem0[a1 + 0x00000090:word32] = a6
	Mem0[a1 + 0x00000094:word32] = a7
	a4 = a3
	a6 = 0x00000080
	a3 = 0x00000208
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word16] = a3
	a6 = a1 + a6
	a3 = a1
	a7 = 8
	Mem0[a1 + 0x000000AC:word32] = a0
	Mem0[a1 + 0x0000006C:word32] = a6
	Mem0[a1 + 0x00000068:word32] = a5
	Mem0[a1 + 0x00000070:word32] = a7
	a0 = 0x40106850
	call _svfiprintf_r (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a4 = 0
	Mem0[a3:byte] = a4
	a0 = Mem0[a1 + 0x000000AC:word32]
	a9 = 0x000000B0
	a1 = a1 + a9
	return
	// succ:  siprintf_exit
siprintf_exit:


// _fiprintf_r
// Return size: 0
void _fiprintf_r()
_fiprintf_r_entry:
	// succ:  l40106864
l40106864:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x0000001C:word32] = a5
	Mem0[a1 + 0x00000020:word32] = a6
	Mem0[a1 + 0x00000024:word32] = a7
	a6 = a1 + 16
	a5 = a1 + 32
	a7 = 12
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1:word32] = a5
	Mem0[a1 + 0x00000008:word32] = a7
	a0 = 0x40106880
	call _vfprintf_r (retsize: 0;)
	a0 = Mem0[a1 + 0x0000003C:word32]
	a1 = a1 + 64
	return
	// succ:  _fiprintf_r_exit
_fiprintf_r_exit:


// fiprintf
// Return size: 0
void fiprintf()
fiprintf_entry:
	// succ:  l40106888
l40106888:
	a1 = fp
	a1 = a1 - 64
	a8 = a2 | a2
	a2 = 0x40105834
	Mem0[a1 + 0x00000018:word32] = a4
	Mem0[a1 + 0x0000001C:word32] = a5
	Mem0[a1 + 0x00000020:word32] = a6
	Mem0[a1 + 0x00000024:word32] = a7
	a2 = Mem0[a2 + 0x00000000:word32]
	a6 = a1 + 16
	a5 = a1 + 32
	a4 = a3
	a7 = 8
	a3 = a8
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1:word32] = a5
	Mem0[a1 + 0x00000008:word32] = a7
	a0 = 0x401068B4
	call _vfprintf_r (retsize: 0;)
	a0 = Mem0[a1 + 0x0000003C:word32]
	a1 = a1 + 64
	return
	// succ:  fiprintf_exit
fiprintf_exit:


// __ssputs_r
// Return size: 0
void __ssputs_r()
__ssputs_r_entry:
	// succ:  l401068BC
l401068BC:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000024:word32] = a13
	a13 = Mem0[a3 + 0x00000008:word32]
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x00000004:word32] = a4
	a7 = a2
	a12 = a3
	a15 = a5
	branch a5 >=u a13 l401068D9
	// succ:  l401068D6 l401068D9
l401068D6:
	goto l40106978
	// succ:  l40106978
l401068D9:
	v13 = Mem0[a3 + 0x0000000C:uint16]
	a2 = (uint32) v13
	a3 = 0x00000480
	branch (a2 & a3) != 0x00000000 l401068E5
	// succ:  l401068E2 l401068E5
l401068E2:
	goto l40106975
	// succ:  l40106975
l401068E5:
	a3 = Mem0[a12 + 0x00000010:word32]
	a14 = Mem0[a12 + 0x00000000:word32]
	a6 = Mem0[a12 + 0x00000014:word32]
	a14 = a14 - a3
	Mem0[a1:word32] = a14
	a6 = a6 + a6 * 0x00000002
	a5 = Mem0[a1 + 0x00000000:word32]
	a4 = a6 >>u 0x0000001F & 0x00000001
	a6 = a4 + a6
	a4 = a5 + 1
	a14 = a6 >> 1
	a4 = a4 + a15
	branch a14 >=u a4 l40106909
	// succ:  l40106906 l40106909
l40106906:
	a14 = a4 | a4
	// succ:  l40106909
l40106909:
	branch (a2 & 0x00000400) == 0x00000000 l4010693D
	// succ:  l4010690C l4010693D
l4010690C:
	a2 = a7 | a7
	a3 = a14 | a14
	Mem0[a1 + 0x00000008:word32] = a7
	a0 = 0x40106917
	call fn4020621C (retsize: 0;)
	a13 = a2
	a7 = Mem0[a1 + 0x00000008:word32]
	a2 = 12
	branch a13 == 0x00000000 l4010695D
	// succ:  l4010691F l4010695D
l4010691F:
	a3 = Mem0[a12 + 0x00000010:word32]
	a4 = Mem0[a1 + 0x00000000:word32]
	a2 = a13
	a0 = 0x40106928
	call fn40206404 (retsize: 0;)
	v15 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v15
	a2 = 0xFFFFFB7F
	a2 = a3 & a2
	a3 = 0x00000080
	a2 = a2 | a3
	Mem0[a12 + 0x0000000C:word16] = a2
	goto l40106962
	// succ:  l40106962
l4010693D:
	a2 = a7 | a7
	a4 = a14 | a14
	Mem0[a1 + 0x00000008:word32] = a7
	a0 = 0x40105868
	v16 = a0
	a0 = 0x4010694C
	call v16 (retsize: 0;)
	a13 = a2
	a7 = Mem0[a1 + 0x00000008:word32]
	branch a2 != 0x00000000 l40106962
	// succ:  l40106952 l40106962
l40106952:
	a3 = Mem0[a12 + 0x00000010:word32]
	a2 = a7
	a0 = 0x40106959
	call fn4020630C (retsize: 0;)
	a7 = Mem0[a1 + 0x00000008:word32]
	a2 = 12
	// succ:  l4010695D
l4010695D:
	Mem0[a7:word32] = a2
	goto l40106998
	// succ:  l40106998
l40106962:
	a5 = Mem0[a1 + 0x00000000:word32]
	Mem0[a12 + 0x00000010:word32] = a13
	Mem0[a12 + 0x00000014:word32] = a14
	a13 = a13 + a5
	a14 = a14 - a5
	Mem0[a12:word32] = a13
	Mem0[a12 + 0x00000008:word32] = a14
	a13 = a15 | a15
	// succ:  l40106975
l40106975:
	branch a15 >=u a13 l4010697A
	// succ:  l40106978 l4010697A
l40106978:
	a13 = a15
	a13 = a15
	// succ:  l4010697A
l4010697A:
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = Mem0[a1 + 0x00000004:word32]
	a4 = a13 | a13
	a0 = 0x40106986
	call fn402065A8 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000008:word32]
	a2 = a2 - a13
	Mem0[a12 + 0x00000008:word32] = a2
	a2 = Mem0[a12 + 0x00000000:word32]
	a13 = a2 + a13
	Mem0[a12:word32] = a13
	a2 = 0
l40106998:
	v17 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v17
	a2 = 64
	a2 = a3 | a2
	Mem0[a12 + 0x0000000C:word16] = a2
	a2 = -1
	// succ:  l401069A5
l401069A5:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  __ssputs_r_exit
__ssputs_r_exit:


// __ssprint_r
// Return size: 0
void __ssprint_r()
__ssprint_r_entry:
	// succ:  l401069B4
l401069B4:
	a1 = fp
	a1 = a1 - 64
	a5 = Mem0[a4 + 0x00000000:word32]
	Mem0[a1:word32] = a2
	a2 = Mem0[a4 + 0x00000008:word32]
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x00000004:word32] = a5
	a13 = a3
	a15 = a4
	branch a2 == 0x00000000 l401069D8
	// succ:  l401069CF l401069D8
l401069CF:
	a5 = 0
	Mem0[a1 + 0x0000000C:word32] = a5
	a12 = a5
	goto l401069EC
	// succ:  l401069EC
l401069D8:
	Mem0[a4 + 0x00000004:word32] = a2
	goto l40106AD7
	// succ:  l40106AD7
l401069DE:
	a5 = Mem0[a1 + 0x00000004:word32]
	a5 = Mem0[a5 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a5
	a5 = Mem0[a1 + 0x00000004:word32]
	a12 = Mem0[a5 + 0x00000004:word32]
	a5 = a5 + 8
	Mem0[a1 + 0x00000004:word32] = a5
	// succ:  l401069EC
l401069EC:
	branch a12 == 0x00000000 l401069DE
	// succ:  l401069EF l401069DE
l401069EF:
	a8 = Mem0[a13 + 0x00000008:word32]
	branch a12 >=u a8 l401069F7
	// succ:  l401069F4 l401069F7
l401069F4:
	goto l40106A94
	// succ:  l40106A94
l401069F7:
	v13 = Mem0[a13 + 0x0000000C:uint16]
	a2 = (uint32) v13
	a3 = 0x00000480
	branch (a2 & a3) != 0x00000000 l40106A03
	// succ:  l40106A00 l40106A03
l40106A00:
	goto l40106A91
	// succ:  l40106A91
l40106A03:
	a3 = Mem0[a13 + 0x00000010:word32]
	a14 = Mem0[a13 + 0x00000000:word32]
	a9 = Mem0[a13 + 0x00000014:word32]
	a14 = a14 - a3
	Mem0[a1 + 0x00000008:word32] = a14
	a9 = a9 + a9 * 0x00000002
	a5 = Mem0[a1 + 0x00000008:word32]
	a4 = a9 >>u 0x0000001F & 0x00000001
	a9 = a4 + a9
	a4 = a5 + 1
	a14 = a9 >> 1
	a4 = a4 + a12
	branch a14 >=u a4 l40106A24
	// succ:  l40106A22 l40106A24
l40106A22:
	a14 = a4
	// succ:  l40106A24
l40106A24:
	branch (a2 & 0x00000400) == 0x00000000 l40106A5C
	// succ:  l40106A27 l40106A5C
l40106A27:
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = a14 | a14
	a0 = 0x40106A30
	call fn4020621C (retsize: 0;)
	a8 = a2 | a2
	branch a2 != 0x00000000 l40106A38
	// succ:  l40106A35 l40106A38
l40106A35:
	goto l40106A74
	// succ:  l40106A74
l40106A38:
	a3 = Mem0[a13 + 0x00000010:word32]
	a4 = Mem0[a1 + 0x00000008:word32]
	Mem0[a1 + 0x00000010:word32] = a8
	a0 = 0x40106A44
	call fn40206404 (retsize: 0;)
	v17 = Mem0[a13 + 0x0000000C:uint16]
	a3 = (uint32) v17
	a2 = 0xFFFFFB7F
	a2 = a3 & a2
	a3 = 0x00000080
	a2 = a2 | a3
	Mem0[a13 + 0x0000000C:word16] = a2
	a8 = Mem0[a1 + 0x00000010:word32]
	goto l40106A7D
	// succ:  l40106A7D
l40106A5C:
	a2 = Mem0[a1 + 0x00000000:word32]
	a4 = a14 | a14
	a0 = 0x40105868
	v16 = a0
	a0 = 0x40106A68
	call v16 (retsize: 0;)
	a8 = a2 | a2
	branch a2 != 0x00000000 l40106A7D
	// succ:  l40106A6D l40106A7D
l40106A6D:
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = Mem0[a13 + 0x00000010:word32]
	a0 = 0x40106A74
	call fn4020630C (retsize: 0;)
	// succ:  l40106A74
l40106A74:
	a5 = Mem0[a1 + 0x00000000:word32]
	a2 = 12
	Mem0[a5:word32] = a2
	goto l40106AC4
	// succ:  l40106AC4
l40106A7D:
	a5 = Mem0[a1 + 0x00000008:word32]
	Mem0[a13 + 0x00000010:word32] = a8
	Mem0[a13 + 0x00000014:word32] = a14
	a8 = a8 + a5
	a14 = a14 - a5
	Mem0[a13:word32] = a8
	Mem0[a13 + 0x00000008:word32] = a14
	a8 = a12 | a12
	// succ:  l40106A91
l40106A91:
	branch a12 >=u a8 l40106A96
	// succ:  l40106A94 l40106A96
l40106A94:
	a8 = a12
	a8 = a12
	// succ:  l40106A96
l40106A96:
	a2 = Mem0[a13 + 0x00000000:word32]
	a3 = Mem0[a1 + 0x0000000C:word32]
	a4 = a8 | a8
	Mem0[a1 + 0x00000010:word32] = a8
	a0 = 0x40106AA4
	call fn402065A8 (retsize: 0;)
	a2 = Mem0[a13 + 0x00000008:word32]
	a8 = Mem0[a1 + 0x00000010:word32]
	a2 = a2 - a8
	Mem0[a13 + 0x00000008:word32] = a2
	a2 = Mem0[a13 + 0x00000000:word32]
	a8 = a2 + a8
	a2 = Mem0[a15 + 0x00000008:word32]
	Mem0[a13:word32] = a8
	a7 = a2 - a12
	Mem0[a15 + 0x00000008:word32] = a7
	branch a7 != 0x00000000 l401069DE
	// succ:  l40106ABD l401069DE
l40106ABD:
	Mem0[a15 + 0x00000004:word32] = a7
	a2 = a7
	goto l40106AD7
	// succ:  l40106AD7
l40106AC4:
	v18 = Mem0[a13 + 0x0000000C:uint16]
	a3 = (uint32) v18
	a2 = 64
	a2 = a3 | a2
	Mem0[a13 + 0x0000000C:word16] = a2
	a2 = 0
	Mem0[a15 + 0x00000008:word32] = a2
	Mem0[a15 + 0x00000004:word32] = a2
	a2 = -1
	// succ:  l40106AD7
l40106AD7:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  __ssprint_r_exit
__ssprint_r_exit:


// _svfiprintf_r
// Return size: 0
void _svfiprintf_r()
_svfiprintf_r_entry:
	// succ:  l40106AE8
l40106AE8:
	a1 = fp
	a9 = 0x000000A0
	a1 = a1 - a9
	Mem0[a1 + 0x00000094:word32] = a13
	a13 = a2 | a2
	v6 = Mem0[a3 + 0x0000000C:uint16]
	a2 = (uint32) v6
	Mem0[a1 + 0x00000098:word32] = a12
	Mem0[a1 + 0x0000008C:word32] = a15
	Mem0[a1 + 0x0000009C:word32] = a0
	Mem0[a1 + 0x00000090:word32] = a14
	Mem0[a1 + 0x00000060:word32] = a5
	Mem0[a1 + 0x00000064:word32] = a6
	Mem0[a1 + 0x00000068:word32] = a7
	a12 = a3 | a3
	a15 = a4 | a4
	branch (a2 & 0x00000080) == 0x00000000 l40106B34
	// succ:  l40106B15 l40106B34
l40106B15:
	a2 = Mem0[a3 + 0x00000010:word32]
	branch a2 != 0x00000000 l40106B34
	// succ:  l40106B19 l40106B34
l40106B19:
	a2 = a13
	a3 = 64
	a0 = 0x40106B20
	call fn4020621C (retsize: 0;)
	Mem0[a12:word32] = a2
	Mem0[a12 + 0x00000010:word32] = a2
	branch a2 != 0x00000000 l40106B30
	// succ:  l40106B26 l40106B30
l40106B26:
	a2 = 12
	Mem0[a13:word32] = a2
	a2 = -1
	goto l40106D57
	// succ:  l40106D57
l40106B30:
	a2 = 64
	Mem0[a12 + 0x00000014:word32] = a2
	// succ:  l40106B34
l40106B34:
	a2 = 32
	a14 = 0
	Mem0[a1 + 0x00000019:byte] = a2
	a2 = 48
	Mem0[a1 + 0x00000014:word32] = a14
	Mem0[a1 + 0x0000001A:byte] = a2
	a6 = a15
	goto l40106B4A
	// succ:  l40106B4A
l40106B48:
	a6 = a6 + 1
	// succ:  l40106B4A
l40106B4A:
	v16 = Mem0[a6 + 0x00000000:byte]
	a2 = (uint32) v16
	a3 = a2 - 37
	branch a3 == 0x00000000 l40106B55
	// succ:  l40106B52 l40106B55
l40106B52:
	branch a2 != 0x00000000 l40106B48
	// succ:  l40106B55 l40106B48
l40106B55:
	a7 = a6 - a15
	branch a7 == 0x00000000 l40106B80
	// succ:  l40106B5A l40106B80
l40106B5A:
	a5 = a7
	a2 = a13
	a3 = a12 | a12
	a4 = a15
	Mem0[a1 + 0x00000070:word32] = a6
	Mem0[a1 + 0x00000074:word32] = a7
	a0 = 0x40106B6C
	call fn402068BC (retsize: 0;)
	a6 = Mem0[a1 + 0x00000070:word32]
	a7 = Mem0[a1 + 0x00000074:word32]
	branch a2 != -1 l40106B78
	// succ:  l40106B75 l40106B78
l40106B75:
	goto l40106D41
	// succ:  l40106D41
l40106B78:
	a2 = Mem0[a1 + 0x00000014:word32]
	a7 = a2 + a7
	Mem0[a1 + 0x00000014:word32] = a7
	// succ:  l40106B80
l40106B80:
	v18 = Mem0[a6 + 0x00000000:byte]
	a2 = (uint32) v18
	branch a2 == 0x00000000 l40106D41
	// succ:  l40106B86 l40106D41
l40106B86:
	a2 = -1
	a5 = a6 + 1
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000004:word32] = a2
	Mem0[a1 + 0x00000008:word32] = a14
	Mem0[a1 + 0x00000043:byte] = a14
	Mem0[a1 + 0x00000058:word32] = a14
	a15 = 0x4010586C
	goto l40106BB0
	// succ:  l40106BB0
l40106B9E:
	a4 = 1
	a2 = a2 - a15
	SAR = 0x00000020 - a2
	a2 = a4 << SAR
	a3 = a3 | a2
	Mem0[a1:word32] = a3
	a5 = a5 + a4
	// succ:  l40106BB0
l40106BB0:
	v19 = Mem0[a5 + 0x00000000:byte]
	a3 = (uint32) v19
	a2 = a15
	a4 = 5
	Mem0[a1 + 0x00000070:word32] = a5
	a0 = 0x40105880
	v20 = a0
	a0 = 0x40106BC0
	call v20 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a5 = Mem0[a1 + 0x00000070:word32]
	branch a2 != 0x00000000 l40106B9E
	// succ:  l40106BC8 l40106B9E
l40106BC8:
	branch (a3 & 0x00000010) == 0x00000000 l40106BD0
	// succ:  l40106BCB l40106BD0
l40106BCB:
	a2 = 32
	Mem0[a1 + 0x00000043:byte] = a2
	// succ:  l40106BD0
l40106BD0:
	branch (a3 & 0x00000008) == 0x00000000 l40106BD8
	// succ:  l40106BD3 l40106BD8
l40106BD3:
	a2 = 43
	Mem0[a1 + 0x00000043:byte] = a2
	// succ:  l40106BD8
l40106BD8:
	v22 = Mem0[a5 + 0x00000000:byte]
	a4 = (uint32) v22
	a2 = 42
	branch a4 == a2 l40106BE8
	// succ:  l40106BE0 l40106BE8
l40106BE0:
	a2 = Mem0[a1 + 0x0000000C:word32]
	a4 = 9
	goto l40106C34
	// succ:  l40106C34
l40106BE8:
	a2 = Mem0[a1 + 0x00000068:word32]
	a4 = 24
	a6 = a2 + 4
	Mem0[a1 + 0x00000068:word32] = a6
	branch a4 < a6 l40106BFC
	// succ:  l40106BF5 l40106BFC
l40106BF5:
	a2 = Mem0[a1 + 0x00000064:word32]
	goto l40106C07
	// succ:  l40106C07
l40106BFC:
	branch a4 < a2 l40106C04
	// succ:  l40106BFF l40106C04
l40106BFF:
	a2 = 36
	Mem0[a1 + 0x00000068:word32] = a2
	// succ:  l40106C04
l40106C04:
	a2 = Mem0[a1 + 0x00000060:word32]
	// succ:  l40106C07
l40106C07:
	a4 = Mem0[a1 + 0x00000068:word32]
	a2 = a2 + a4
	a2 = a2 - 4
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 < 0x00000000 l40106C19
	// succ:  l40106C14 l40106C19
l40106C14:
	Mem0[a1 + 0x0000000C:word32] = a2
	goto l40106C25
	// succ:  l40106C25
l40106C19:
	a2 = -a2
	Mem0[a1 + 0x0000000C:word32] = a2
	a2 = 2
	a3 = a3 | a2
	Mem0[a1:word32] = a3
	// succ:  l40106C25
l40106C25:
	a5 = a5 + 1
	goto l40106C3F
	// succ:  l40106C3F
l40106C2C:
	a2 = a2 + a2 * 0x00000004
	a5 = a5 + 1
	a2 = a3 + a2 * 0x00000002
	// succ:  l40106C34
l40106C34:
	v23 = Mem0[a5 + 0x00000000:byte]
	a3 = (uint32) v23
	a3 = a3 - 48
	branch a4 >=u a3 l40106C2C
	// succ:  l40106C3D l40106C2C
l40106C3D:
	Mem0[a1 + 0x0000000C:word32] = a2
	// succ:  l40106C3F
l40106C3F:
	v24 = Mem0[a5 + 0x00000000:byte]
	a3 = (uint32) v24
	a2 = 46
	branch a3 != a2 l40106CA1
	// succ:  l40106C47 l40106CA1
l40106C47:
	v25 = Mem0[a5 + 0x00000001:byte]
	a3 = (uint32) v25
	a2 = 42
	branch a3 != a2 l40106C85
	// succ:  l40106C4F l40106C85
l40106C4F:
	a2 = Mem0[a1 + 0x00000068:word32]
	a3 = 24
	a4 = a2 + 4
	Mem0[a1 + 0x00000068:word32] = a4
	a5 = a5 + 2
	branch a3 < a4 l40106C64
	// succ:  l40106C5E l40106C64
l40106C5E:
	a2 = Mem0[a1 + 0x00000064:word32]
	goto l40106C6F
	// succ:  l40106C6F
l40106C64:
	branch a3 < a2 l40106C6C
	// succ:  l40106C67 l40106C6C
l40106C67:
	a2 = 36
	Mem0[a1 + 0x00000068:word32] = a2
	// succ:  l40106C6C
l40106C6C:
	a2 = Mem0[a1 + 0x00000060:word32]
	// succ:  l40106C6F
l40106C6F:
	a3 = Mem0[a1 + 0x00000068:word32]
	a2 = a2 + a3
	a2 = a2 - 4
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 < 0x00000000 l40106C80
	// succ:  l40106C7C l40106C80
l40106C7C:
	goto l40106C9F
	// succ:  l40106C9F
l40106C80:
	a2 = -1
	goto l40106C9F
	// succ:  l40106C9F
l40106C85:
	a5 = a5 + 1
	a2 = 0
	a4 = 9
	goto l40106C96
	// succ:  l40106C96
l40106C8E:
	a2 = a2 + a2 * 0x00000004
	a5 = a5 + 1
	a2 = a3 + a2 * 0x00000002
	// succ:  l40106C96
l40106C96:
	v26 = Mem0[a5 + 0x00000000:byte]
	a3 = (uint32) v26
	a3 = a3 - 48
	branch a4 >=u a3 l40106C8E
	// succ:  l40106C9F l40106C8E
l40106C9F:
	Mem0[a1 + 0x00000004:word32] = a2
	// succ:  l40106CA1
l40106CA1:
	a15 = 0x40105870
	v27 = Mem0[a5 + 0x00000000:byte]
	a3 = (uint32) v27
	a2 = a15
	a4 = 3
	Mem0[a1 + 0x00000070:word32] = a5
	a0 = 0x40105880
	v28 = a0
	a0 = 0x40106CB4
	call v28 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l40106CCD
	// succ:  l40106CB9 l40106CCD
l40106CB9:
	a15 = a2 - a15
	a2 = 64
	SAR = 0x00000020 - a15
	a2 = a2 << SAR
	a15 = Mem0[a1 + 0x00000000:word32]
	a5 = a5 + 1
	a2 = a15 | a2
	Mem0[a1:word32] = a2
	// succ:  l40106CCD
l40106CCD:
	v29 = Mem0[a5 + 0x00000000:byte]
	a3 = (uint32) v29
	a2 = 0x40105874
	a4 = 6
	a15 = a5 + 1
	Mem0[a1 + 0x00000018:byte] = a3
	a0 = 0x40105880
	v30 = a0
	a0 = 0x40106CE0
	call v30 (retsize: 0;)
	branch a2 == 0x00000000 l40106D18
	// succ:  l40106CE2 l40106D18
l40106CE2:
	a2 = 0x40105878
	branch a2 != 0x00000000 l40106D00
	// succ:  l40106CE7 l40106D00
l40106CE7:
	a2 = Mem0[a1 + 0x00000068:word32]
	a3 = -8
	a2 = a2 + 7
	a2 = a2 & a3
	a3 = a2 - 17
	a2 = a2 + 8
	branch a3 >=u 0x00000008 l40106D51
	// succ:  l40106CF9 l40106D51
l40106CF9:
	a2 = 40
	goto l40106D51
	// succ:  l40106D51
l40106D00:
	a5 = 0x4010587C
	a2 = a13
	a3 = a1 | a1
	a4 = a12 | a12
	a6 = a1 + 96
	a0 = 0x40105878
	v32 = a0
	a0 = 0x40106D14
	call v32 (retsize: 0;)
	goto l40106D2C
	// succ:  l40106D2C
l40106D18:
	a5 = 0x4010587C
	a2 = a13
	a3 = a1 | a1
	a4 = a12 | a12
	a6 = a1 + 96
	a0 = 0x40105884
	v31 = a0
	a0 = 0x40106D2C
	call v31 (retsize: 0;)
	// succ:  l40106D2C
l40106D2C:
	Mem0[a1 + 0x0000006C:word32] = a2
	a2 = Mem0[a1 + 0x0000006C:word32]
	branch a2 == -1 l40106D41
	// succ:  l40106D35 l40106D41
l40106D35:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = Mem0[a1 + 0x0000006C:word32]
	a2 = a2 + a3
	Mem0[a1 + 0x00000014:word32] = a2
	goto l40146B42
	// succ:  l40146B42
l40106D41:
	v17 = Mem0[a12 + 0x0000000C:uint16]
	a4 = (uint32) v17
	a3 = Mem0[a1 + 0x00000014:word32]
	a4 = a4 >>u 0x00000006 & 0x00000001
	a2 = -1
	branch a4 != 0x00000000 l40106D4E
	// succ:  l40106D4B_1 l40106D4E
l40106D4B_1:
	a2 = a3
	// succ:  l40106D4E
l40106D4E:
	goto l40106D57
	// succ:  l40106D57
l40106D51:
	Mem0[a1 + 0x00000068:word32] = a2
	goto l40146D35
	// succ:  l40146D35
l40106D57:
	a0 = Mem0[a1 + 0x0000009C:word32]
	a9 = 0x000000A0
	a12 = Mem0[a1 + 0x00000098:word32]
	a13 = Mem0[a1 + 0x00000094:word32]
	a14 = Mem0[a1 + 0x00000090:word32]
	a15 = Mem0[a1 + 0x0000008C:word32]
	a1 = a1 + a9
	return
	// succ:  _svfiprintf_r_exit
l40146B42:
l40146D35:
_svfiprintf_r_exit:


// __sfputc_r
// Return size: 0
void __sfputc_r()
__sfputc_r_entry:
	// succ:  l40106D70
l40106D70:
	a1 = fp
	a5 = Mem0[a4 + 0x00000008:word32]
	a1 = a1 - 16
	a5 = a5 - 1
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a4 + 0x00000008:word32] = a5
	branch a5 >= 0x00000000 l40106D89
	// succ:  l40106D7E l40106D89
l40106D7E:
	a6 = Mem0[a4 + 0x00000018:word32]
	branch a5 < a6 l40106D98
	// succ:  l40106D83 l40106D98
l40106D83:
	a5 = a3 & 0x000000FF
	branch a5 == 10 l40106D98
	// succ:  l40106D89 l40106D98
l40106D89:
	a2 = Mem0[a4 + 0x00000000:word32]
	a5 = a2 + 1
	Mem0[a4:word32] = a5
	Mem0[a2:byte] = a3
	a2 = a3 & 0x000000FF
	goto l40106D9E
	// succ:  l40106D9E
l40106D98:
	a0 = 0x40105888
	v9 = a0
	a0 = 0x40106D9E
	call v9 (retsize: 0;)
	// succ:  l40106D9E
l40106D9E:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  __sfputc_r_exit
__sfputc_r_exit:


// __sfputs_r
// Return size: 0
void __sfputs_r()
__sfputs_r_entry:
	// succ:  l40106DA8
l40106DA8:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1:word32] = a2
	a12 = Mem0[a3 + 0x00000064:word32]
	a2 = 0x40101018
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x0000002C:word32] = a0
	a12 = a12 & a2
	a15 = a3
	a13 = a4
	a14 = a4 + a5
	branch a12 == 0x00000000 l40106DFD
	// succ:  l40106DC8 l40106DFD
l40106DC8:
	a12 = a5 >>u 1
	a14 = 0
	goto l40106DE5
	// succ:  l40106DE5
l40106DD0:
	a3 = a13 + a14 * 0x00000002
	a2 = Mem0[a1 + 0x00000000:word32]
	v12 = Mem0[a3 + 0x00000000:uint16]
	a3 = (uint32) v12
	a4 = a15 | a15
	a0 = 0x40106DDF
	call _fputwc_r (retsize: 0;)
	branch a2 == -1 l40106E04
	// succ:  l40106DE2 l40106E04
l40106DE2:
	a14 = a14 + 1
	// succ:  l40106DE5
l40106DE5:
	branch a14 != a12 l40106DD0
	// succ:  l40106DE8 l40106DD0
l40106DE8:
	a12 = 0
	goto l40106E06
	// succ:  l40106E06
l40106DED:
	v13 = Mem0[a13 + 0x00000000:byte]
	a3 = (uint32) v13
	a2 = Mem0[a1 + 0x00000000:word32]
	a4 = a15 | a15
	a0 = 0x40106DF8
	call fn40206D70 (retsize: 0;)
	a13 = a13 + 1
	branch a2 == -1 l40106E04
	// succ:  l40106DFD l40106E04
l40106DFD:
	branch a13 != a14 l40106DED
	branch a13 != a14 l40106DED
	// succ:  l40106E00 l40106DED
l40106E00:
	goto l40106E06
	// succ:  l40106E06
l40106E04:
	a12 = a2
	// succ:  l40106E06
l40106E06:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a12
	a13 = Mem0[a1 + 0x00000024:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  __sfputs_r_exit
__sfputs_r_exit:


// __sprint_r
// Return size: 0
void __sprint_r()
__sprint_r_entry:
	// succ:  l40106E18
l40106E18:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x0000001C:word32] = a15
	a15 = a3
	a3 = Mem0[a4 + 0x00000008:word32]
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	a5 = a2
	a12 = a4
	branch a3 != 0x00000000 l40106E38
	// succ:  l40106E2F l40106E38
l40106E2F:
	Mem0[a4 + 0x00000004:word32] = a3
	a2 = a3
	goto l40106E98
	// succ:  l40106E98
l40106E38:
	a2 = Mem0[a15 + 0x00000064:word32]
	branch (a2 & 0x00002000) == 0x00000000 l40106E88
	// succ:  l40106E3E l40106E88
l40106E3E:
	a13 = Mem0[a4 + 0x00000000:word32]
	goto l40106E80
	// succ:  l40106E80
l40106E44:
	a6 = Mem0[a13 + 0x00000004:word32]
	a7 = Mem0[a13 + 0x00000000:word32]
	a6 = a6 >>u 1
	a14 = 0
	goto l40106E71
	// succ:  l40106E71
l40106E50:
	a3 = a7 + a14 * 0x00000002
	v15 = Mem0[a3 + 0x00000000:uint16]
	a3 = (uint32) v15
	a2 = a5 | a5
	a4 = a15 | a15
	Mem0[a1 + 0x00000008:word32] = a5
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1:word32] = a7
	a0 = 0x40106E66
	call _fputwc_r (retsize: 0;)
	a5 = Mem0[a1 + 0x00000008:word32]
	a6 = Mem0[a1 + 0x00000004:word32]
	a7 = Mem0[a1 + 0x00000000:word32]
	branch a2 == -1 l40106E92
	// succ:  l40106E6F l40106E92
l40106E6F:
	a14 = a14 + 1
	// succ:  l40106E71
l40106E71:
	branch a14 < a6 l40106E50
	// succ:  l40106E74 l40106E50
l40106E74:
	a2 = Mem0[a12 + 0x00000008:word32]
	a6 = a6 << 31
	a6 = a2 - a6
	Mem0[a12 + 0x00000008:word32] = a6
	a13 = a13 + 8
	// succ:  l40106E80
l40106E80:
	a2 = Mem0[a12 + 0x00000008:word32]
	branch a2 != 0x00000000 l40106E44
	// succ:  l40106E85 l40106E44
l40106E85:
	goto l40106E92
	// succ:  l40106E92
l40106E88:
	a2 = a5
	a3 = a15
	a0 = 0x4010588C
	v12 = a0
	a0 = 0x40106E92
	call v12 (retsize: 0;)
	// succ:  l40106E92
l40106E92:
	a3 = 0
	Mem0[a12 + 0x00000008:word32] = a3
	Mem0[a12 + 0x00000004:word32] = a3
	// succ:  l40106E98
l40106E98:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  __sprint_r_exit
__sprint_r_exit:


// _vfprintf_r
// Return size: 0
void _vfprintf_r()
_vfprintf_r_entry:
	// succ:  l40106EA8
l40106EA8:
	a1 = fp
	a9 = 0x000000A0
	a1 = a1 - a9
	Mem0[a1 + 0x00000098:word32] = a12
	Mem0[a1 + 0x00000090:word32] = a14
	Mem0[a1 + 0x0000008C:word32] = a15
	Mem0[a1 + 0x0000009C:word32] = a0
	Mem0[a1 + 0x00000094:word32] = a13
	Mem0[a1 + 0x00000060:word32] = a5
	Mem0[a1 + 0x00000064:word32] = a6
	Mem0[a1 + 0x00000068:word32] = a7
	a12 = a2
	a15 = a3
	a14 = a4
	branch a2 == 0x00000000 l40106ED8
	// succ:  l40106ECE l40106ED8
l40106ECE:
	a2 = Mem0[a2 + 0x00000018:word32]
	branch a2 != 0x00000000 l40106ED8
	// succ:  l40106ED3 l40106ED8
l40106ED3:
	a2 = a12
	a0 = 0x40106ED8
	call __sinit (retsize: 0;)
	// succ:  l40106ED8
l40106ED8:
	a2 = 0x40105890
	branch a15 != a2 l40106EE4
	// succ:  l40106EDE l40106EE4
l40106EDE:
	a15 = Mem0[a12 + 0x00000004:word32]
	goto l40106EF8
	// succ:  l40106EF8
l40106EE4:
	a2 = 0x40105894
	branch a15 != a2 l40106EF0
	// succ:  l40106EEA l40106EF0
l40106EEA:
	a15 = Mem0[a12 + 0x00000008:word32]
	goto l40106EF8
	// succ:  l40106EF8
l40106EF0:
	a2 = 0x40105898
	branch a15 != a2 l40106EF8
	// succ:  l40106EF6 l40106EF8
l40106EF6:
	a15 = Mem0[a12 + 0x0000000C:word32]
	// succ:  l40106EF8
l40106EF8:
	a2 = Mem0[a15 + 0x00000064:word32]
	branch (a2 & 0x00000001) != 0x00000000 l40106F0D
	// succ:  l40106EFE l40106F0D
l40106EFE:
	v15 = Mem0[a15 + 0x0000000C:uint16]
	a2 = (uint32) v15
	branch (a2 & 0x00000200) != 0x00000000 l40106F0D
	// succ:  l40106F04 l40106F0D
l40106F04:
	a2 = a15 + 88
	a1 = a1 | a1
	a0 = 0x40106F0D
	call fn402008B8 (retsize: 0;)
	// succ:  l40106F0D
l40106F0D:
	v16 = Mem0[a15 + 0x0000000C:uint16]
	a2 = (uint32) v16
	branch (a2 & 0x00000008) == 0x00000000 l40106F18
	// succ:  l40106F13 l40106F18
l40106F13:
	a2 = Mem0[a15 + 0x00000010:word32]
	branch a2 != 0x00000000 l40106F41
	// succ:  l40106F18 l40106F41
l40106F18:
	a2 = a12
	a3 = a15
	a0 = 0x401058AC
	v17 = a0
	a0 = 0x40106F22
	call v17 (retsize: 0;)
	branch a2 == 0x00000000 l40106F41
	// succ:  l40106F24 l40106F41
l40106F24:
	a2 = Mem0[a15 + 0x00000064:word32]
	branch (a2 & 0x00000001) == 0x00000000 l40106F2D
	// succ:  l40106F2A l40106F2D
l40106F2A:
	goto l40106F39
	// succ:  l40106F39
l40106F2D:
	v18 = Mem0[a15 + 0x0000000C:uint16]
	a2 = (uint32) v18
	branch (a2 & 0x00000200) != 0x00000000 l40106F39
	// succ:  l40106F33 l40106F39
l40106F33:
	a2 = a15 + 88
	a0 = 0x40106F39
	call fn402008E0 (retsize: 0;)
	// succ:  l40106F39
l40106F39:
	a2 = -1
	goto l4010717A
	// succ:  l4010717A
l40106F41:
	a2 = 32
	a13 = 0
	Mem0[a1 + 0x00000019:byte] = a2
	a2 = 48
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x0000001A:byte] = a2
	a6 = a14
	goto l40106F56
	// succ:  l40106F56
l40106F54:
	a6 = a6 + 1
	// succ:  l40106F56
l40106F56:
	v19 = Mem0[a6 + 0x00000000:byte]
	a2 = (uint32) v19
	a3 = a2 - 37
	branch a3 == 0x00000000 l40106F61
	// succ:  l40106F5E l40106F61
l40106F5E:
	branch a2 != 0x00000000 l40106F54
	// succ:  l40106F61 l40106F54
l40106F61:
	a7 = a6 - a14
	branch a7 == 0x00000000 l40106F8C
	// succ:  l40106F66 l40106F8C
l40106F66:
	a5 = a7
	a2 = a12
	a3 = a15 | a15
	a4 = a14
	Mem0[a1 + 0x00000070:word32] = a6
	Mem0[a1 + 0x00000074:word32] = a7
	a0 = 0x40106F78
	call fn40206DA8 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000070:word32]
	a7 = Mem0[a1 + 0x00000074:word32]
	branch a2 != -1 l40106F84
	// succ:  l40106F81 l40106F84
l40106F81:
	goto l40107151
	// succ:  l40107151
l40106F84:
	a2 = Mem0[a1 + 0x00000014:word32]
	a7 = a2 + a7
	Mem0[a1 + 0x00000014:word32] = a7
	// succ:  l40106F8C
l40106F8C:
	v21 = Mem0[a6 + 0x00000000:byte]
	a2 = (uint32) v21
	branch a2 == 0x00000000 l40107151
	// succ:  l40106F92 l40107151
l40106F92:
	a2 = -1
	a5 = a6 + 1
	Mem0[a1:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a2
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000043:byte] = a13
	Mem0[a1 + 0x00000058:word32] = a13
	a14 = 0x4010589C
	goto l40106FBC
	// succ:  l40106FBC
l40106FAA:
	a4 = 1
	a2 = a2 - a14
	SAR = 0x00000020 - a2
	a2 = a4 << SAR
	a3 = a3 | a2
	Mem0[a1:word32] = a3
	a5 = a5 + a4
	// succ:  l40106FBC
l40106FBC:
	v23 = Mem0[a5 + 0x00000000:byte]
	a3 = (uint32) v23
	a2 = a14
	a4 = 5
	Mem0[a1 + 0x00000070:word32] = a5
	a0 = 0x40105880
	v24 = a0
	a0 = 0x40106FCC
	call v24 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a5 = Mem0[a1 + 0x00000070:word32]
	branch a2 != 0x00000000 l40106FAA
	// succ:  l40106FD4 l40106FAA
l40106FD4:
	branch (a3 & 0x00000010) == 0x00000000 l40106FDC
	// succ:  l40106FD7 l40106FDC
l40106FD7:
	a2 = 32
	Mem0[a1 + 0x00000043:byte] = a2
	// succ:  l40106FDC
l40106FDC:
	branch (a3 & 0x00000008) == 0x00000000 l40106FE4
	// succ:  l40106FDF l40106FE4
l40106FDF:
	a2 = 43
	Mem0[a1 + 0x00000043:byte] = a2
	// succ:  l40106FE4
l40106FE4:
	v26 = Mem0[a5 + 0x00000000:byte]
	a4 = (uint32) v26
	a2 = 42
	branch a4 == a2 l40106FF4
	// succ:  l40106FEC l40106FF4
l40106FEC:
	a2 = Mem0[a1 + 0x0000000C:word32]
	a4 = 9
	goto l40107040
	// succ:  l40107040
l40106FF4:
	a2 = Mem0[a1 + 0x00000068:word32]
	a4 = 24
	a6 = a2 + 4
	Mem0[a1 + 0x00000068:word32] = a6
	branch a4 < a6 l40107008
	// succ:  l40107001 l40107008
l40107001:
	a2 = Mem0[a1 + 0x00000064:word32]
	goto l40107013
	// succ:  l40107013
l40107008:
	branch a4 < a2 l40107010
	// succ:  l4010700B l40107010
l4010700B:
	a2 = 36
	Mem0[a1 + 0x00000068:word32] = a2
	// succ:  l40107010
l40107010:
	a2 = Mem0[a1 + 0x00000060:word32]
	// succ:  l40107013
l40107013:
	a4 = Mem0[a1 + 0x00000068:word32]
	a2 = a2 + a4
	a2 = a2 - 4
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 < 0x00000000 l40107025
	// succ:  l40107020 l40107025
l40107020:
	Mem0[a1 + 0x0000000C:word32] = a2
	goto l40107031
	// succ:  l40107031
l40107025:
	a2 = -a2
	Mem0[a1 + 0x0000000C:word32] = a2
	a2 = 2
	a3 = a3 | a2
	Mem0[a1:word32] = a3
	// succ:  l40107031
l40107031:
	a5 = a5 + 1
	goto l4010704B
	// succ:  l4010704B
l40107038:
	a2 = a2 + a2 * 0x00000004
	a5 = a5 + 1
	a2 = a3 + a2 * 0x00000002
	// succ:  l40107040
l40107040:
	v27 = Mem0[a5 + 0x00000000:byte]
	a3 = (uint32) v27
	a3 = a3 - 48
	branch a4 >=u a3 l40107038
	// succ:  l40107049 l40107038
l40107049:
	Mem0[a1 + 0x0000000C:word32] = a2
	// succ:  l4010704B
l4010704B:
	v28 = Mem0[a5 + 0x00000000:byte]
	a3 = (uint32) v28
	a2 = 46
	branch a3 != a2 l401070B1
	// succ:  l40107053 l401070B1
l40107053:
	v29 = Mem0[a5 + 0x00000001:byte]
	a3 = (uint32) v29
	a2 = 42
	branch a3 != a2 l40107091
	// succ:  l4010705B l40107091
l4010705B:
	a2 = Mem0[a1 + 0x00000068:word32]
	a3 = 24
	a4 = a2 + 4
	Mem0[a1 + 0x00000068:word32] = a4
	a5 = a5 + 2
	branch a3 < a4 l40107070
	// succ:  l4010706A l40107070
l4010706A:
	a2 = Mem0[a1 + 0x00000064:word32]
	goto l4010707B
	// succ:  l4010707B
l40107070:
	branch a3 < a2 l40107078
	// succ:  l40107073 l40107078
l40107073:
	a2 = 36
	Mem0[a1 + 0x00000068:word32] = a2
	// succ:  l40107078
l40107078:
	a2 = Mem0[a1 + 0x00000060:word32]
	// succ:  l4010707B
l4010707B:
	a3 = Mem0[a1 + 0x00000068:word32]
	a2 = a2 + a3
	a2 = a2 - 4
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 < 0x00000000 l4010708C
	// succ:  l40107088 l4010708C
l40107088:
	goto l401070AE
	// succ:  l401070AE
l4010708C:
	a2 = -1
	goto l401070AE
	// succ:  l401070AE
l40107091:
	a5 = a5 + 1
	a2 = 0
	a4 = 9
	goto l401070A5
	// succ:  l401070A5
l4010709D:
	a2 = a2 + a2 * 0x00000004
	a5 = a5 + 1
	a2 = a3 + a2 * 0x00000002
	// succ:  l401070A5
l401070A5:
	v32 = Mem0[a5 + 0x00000000:byte]
	a3 = (uint32) v32
	a3 = a3 - 48
	branch a4 >=u a3 l4010709D
	// succ:  l401070AE l4010709D
l401070AE:
	Mem0[a1 + 0x00000004:word32] = a2
	Mem0[a1 + 0x00000004:word32] = a2
	// succ:  l401070B1
l401070B1:
	a14 = 0x401058A0
	v30 = Mem0[a5 + 0x00000000:byte]
	a3 = (uint32) v30
	a2 = a14
	a4 = 3
	Mem0[a1 + 0x00000070:word32] = a5
	a0 = 0x40105880
	v31 = a0
	a0 = 0x401070C4
	call v31 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l401070DD
	// succ:  l401070C9 l401070DD
l401070C9:
	a14 = a2 - a14
	a2 = 64
	SAR = 0x00000020 - a14
	a2 = a2 << SAR
	a14 = Mem0[a1 + 0x00000000:word32]
	a5 = a5 + 1
	a2 = a14 | a2
	Mem0[a1:word32] = a2
	// succ:  l401070DD
l401070DD:
	v33 = Mem0[a5 + 0x00000000:byte]
	a3 = (uint32) v33
	a2 = 0x401058A4
	a4 = 6
	a14 = a5 + 1
	Mem0[a1 + 0x00000018:byte] = a3
	a0 = 0x40105880
	v34 = a0
	a0 = 0x401070F0
	call v34 (retsize: 0;)
	branch a2 == 0x00000000 l40107128
	// succ:  l401070F2 l40107128
l401070F2:
	a2 = 0x40105878
	branch a2 != 0x00000000 l40107110
	// succ:  l401070F7 l40107110
l401070F7:
	a2 = Mem0[a1 + 0x00000068:word32]
	a3 = -8
	a2 = a2 + 7
	a2 = a2 & a3
	a3 = a2 - 17
	a2 = a2 + 8
	branch a3 >=u 0x00000008 l40107174
	// succ:  l40107109 l40107174
l40107109:
	a2 = 40
	goto l40107174
	// succ:  l40107174
l40107110:
	a5 = 0x401058A8
	a2 = a12
	a3 = a1 | a1
	a4 = a15 | a15
	a6 = a1 + 96
	a0 = 0x40105878
	v35 = a0
	a0 = 0x40107124
	call v35 (retsize: 0;)
	goto l4010713C
	// succ:  l4010713C
l40107128:
	a5 = 0x401058A8
	a2 = a12
	a3 = a1 | a1
	a4 = a15 | a15
	a6 = a1 + 96
	a0 = 0x40105884
	v36 = a0
	a0 = 0x4010713C
	call v36 (retsize: 0;)
	// succ:  l4010713C
l4010713C:
	Mem0[a1 + 0x0000006C:word32] = a2
	a2 = Mem0[a1 + 0x0000006C:word32]
	branch a2 == -1 l40107151
	// succ:  l40107145 l40107151
l40107145:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = Mem0[a1 + 0x0000006C:word32]
	a2 = a2 + a3
	Mem0[a1 + 0x00000014:word32] = a2
	goto l40146F4F
	// succ:  l40146F4F
l40107151:
	a2 = Mem0[a15 + 0x00000064:word32]
	branch (a2 & 0x00000001) != 0x00000000 l40107163
	// succ:  l40107157 l40107163
l40107157:
	v20 = Mem0[a15 + 0x0000000C:uint16]
	a2 = (uint32) v20
	branch (a2 & 0x00000200) != 0x00000000 l40107163
	// succ:  l4010715D l40107163
l4010715D:
	a2 = a15 + 88
	a0 = 0x40107163
	call fn402008E0 (retsize: 0;)
	// succ:  l40107163
l40107163:
	v22 = Mem0[a15 + 0x0000000C:uint16]
	a2 = (uint32) v22
	branch (a2 & 0x00000040) == 0x00000000 l4010716C
	// succ:  l40107169 l4010716C
l40107169:
	goto l40146F39
	// succ:  l40146F39
l4010716C:
	a2 = Mem0[a1 + 0x00000014:word32]
	goto l4010717A
	// succ:  l4010717A
l40107174:
	Mem0[a1 + 0x00000068:word32] = a2
	goto l40147145
	// succ:  l40147145
l4010717A:
	a0 = Mem0[a1 + 0x0000009C:word32]
	a9 = 0x000000A0
	a12 = Mem0[a1 + 0x00000098:word32]
	a13 = Mem0[a1 + 0x00000094:word32]
	a14 = Mem0[a1 + 0x00000090:word32]
	a15 = Mem0[a1 + 0x0000008C:word32]
	a1 = a1 + a9
	return
	// succ:  _vfprintf_r_exit
l40146F39:
l40146F4F:
l40147145:
_vfprintf_r_exit:


// vfprintf
// Return size: 0
void vfprintf()
vfprintf_entry:
	// succ:  l40107190
l40107190:
	a1 = fp
	a11 = a2
	a2 = 0x40105834
	a10 = a3
	a9 = a4
	a8 = a5
	a2 = Mem0[a2 + 0x00000000:word32]
	a1 = a1 - 32
	a7 = a6
	a3 = a11
	a4 = a10
	a5 = a9
	a6 = a8
	Mem0[a1 + 0x0000001C:word32] = a0
	a0 = 0x401071B0
	call fn40206EA8 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  vfprintf_exit
vfprintf_exit:


// _cleanup_r
// Return size: 0
void _cleanup_r()
_cleanup_r_entry:
	// succ:  l401071B8
l401071B8:
	a1 = fp
	a3 = 0x401058B0
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x401058B4
	v5 = a0
	a0 = 0x401071C6
	call v5 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  _cleanup_r_exit
_cleanup_r_exit:


// __fp_lock
// Return size: 0
void __fp_lock()
__fp_lock_entry:
	// succ:  l401071D0
l401071D0:
	a1 = fp
	a1 = a1 - 16
	v4 = Mem0[a2 + 0x0000000C:uint16]
	a3 = (uint32) v4
	Mem0[a1 + 0x0000000C:word32] = a0
	branch (a3 & 0x00000200) != 0x00000000 l401071E1
	// succ:  l401071DB l401071E1
l401071DB:
	a2 = a2 + 88
	a0 = 0x401071E1
	call fn402008B8 (retsize: 0;)
	// succ:  l401071E1
l401071E1:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = 0
	a1 = a1 + 16
	return
	// succ:  __fp_lock_exit
__fp_lock_exit:


// __fp_unlock
// Return size: 0
void __fp_unlock()
__fp_unlock_entry:
	// succ:  l401071EC
l401071EC:
	a1 = fp
	a1 = a1 - 16
	v4 = Mem0[a2 + 0x0000000C:uint16]
	a3 = (uint32) v4
	Mem0[a1 + 0x0000000C:word32] = a0
	branch (a3 & 0x00000200) != 0x00000000 l401071FD
	// succ:  l401071F7 l401071FD
l401071F7:
	a2 = a2 + 88
	a0 = 0x401071FD
	call fn402008E0 (retsize: 0;)
	// succ:  l401071FD
l401071FD:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = 0
	a1 = a1 + 16
	return
	// succ:  __fp_unlock_exit
__fp_unlock_exit:


// std$isra$0
// Return size: 0
void std$isra$0()
std$isra$0_entry:
	// succ:  l40107208
l40107208:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	a5 = 0x00000000
	a12 = a2
	Mem0[a2 + 0x0000000C:word16] = a3
	Mem0[a2 + 0x0000000E:word16] = a4
	Mem0[a2:word32] = a5
	Mem0[a2 + 0x00000004:word32] = a5
	Mem0[a2 + 0x00000008:word32] = a5
	Mem0[a2 + 0x00000064:word32] = a5
	Mem0[a2 + 0x00000010:word32] = a5
	Mem0[a2 + 0x00000014:word32] = a5
	Mem0[a2 + 0x00000018:word32] = a5
	a3 = a5
	a2 = a2 + 92
	a4 = 8
	a0 = 0x40107235
	call fn40206534 (retsize: 0;)
	a2 = 0x401058B8
	a0 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a12 + 0x00000024:word32] = a2
	a2 = 0x401058BC
	Mem0[a12 + 0x00000020:word32] = a12
	Mem0[a12 + 0x00000028:word32] = a2
	a2 = 0x401058C0
	Mem0[a12 + 0x0000002C:word32] = a2
	a2 = 0x401058C4
	Mem0[a12 + 0x00000030:word32] = a2
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  std$isra$0_exit
std$isra$0_exit:


// __sfmoreglue
// Return size: 0
void __sfmoreglue()
__sfmoreglue_entry:
	// succ:  l40107254
l40107254:
	a1 = fp
	a1 = a1 - 16
	a4 = a3 - 1
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = a4 + a4 * 0x00000002
	a4 = a4 + a13 * 0x00000004
	a13 = a4 << 29
	Mem0[a1:word32] = a14
	a14 = a3
	a3 = a13 + 116
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40107274
	call fn4020621C (retsize: 0;)
	a12 = a2
	branch a2 == 0x00000000 l40107288
	// succ:  l40107278 l40107288
l40107278:
	a3 = 0
	Mem0[a2:word32] = a3
	Mem0[a2 + 0x00000004:word32] = a14
	a2 = a2 + 12
	Mem0[a12 + 0x00000008:word32] = a2
	a4 = a13 + 104
	a0 = 0x40107288
	call fn40206534 (retsize: 0;)
	// succ:  l40107288
l40107288:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12
	a13 = Mem0[a1 + 0x00000004:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  __sfmoreglue_exit
__sfmoreglue_exit:


// _cleanup
// Return size: 0
void _cleanup()
_cleanup_entry:
	// succ:  l40107298
l40107298:
	a1 = fp
	a2 = 0x401058C8
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x401072A5
	call fn402071B8 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  _cleanup_exit
_cleanup_exit:


// __sfp_lock_acquire
// Return size: 0
void __sfp_lock_acquire()
__sfp_lock_acquire_entry:
	// succ:  l401072AC
l401072AC:
	a1 = fp
	a2 = 0x401058CC
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x401072B8
	call fn402008B8 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  __sfp_lock_acquire_exit
__sfp_lock_acquire_exit:


// __sfp_lock_release
// Return size: 0
void __sfp_lock_release()
__sfp_lock_release_entry:
	// succ:  l401072C4
l401072C4:
	a1 = fp
	a2 = 0x401058CC
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x401072D0
	call fn402008E0 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  __sfp_lock_release_exit
__sfp_lock_release_exit:


// __sinit_lock_acquire
// Return size: 0
void __sinit_lock_acquire()
__sinit_lock_acquire_entry:
	// succ:  l401072DC
l401072DC:
	a1 = fp
	a2 = 0x401058D0
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x401072E8
	call fn402008B8 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  __sinit_lock_acquire_exit
__sinit_lock_acquire_exit:


// __sinit_lock_release
// Return size: 0
void __sinit_lock_release()
__sinit_lock_release_entry:
	// succ:  l401072F4
l401072F4:
	a1 = fp
	a2 = 0x401058D0
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40107300
	call fn402008E0 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  __sinit_lock_release_exit
__sinit_lock_release_exit:


// __sinit
// Return size: 0
void __sinit()
__sinit_entry:
	// succ:  l4010730C
l4010730C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1:word32] = a14
	a0 = 0x4010731C
	call fn402072DC (retsize: 0;)
	a13 = Mem0[a12 + 0x00000018:word32]
	branch a13 == 0x00000000 l40107323
	// succ:  l40107320 l40107323
l40107320:
	goto l4010736A
	// succ:  l4010736A
l40107323:
	a2 = 0x401058D4
	a14 = 1
	Mem0[a12 + 0x00000028:word32] = a2
	Mem0[a12 + 0x00000018:word32] = a14
	Mem0[a12 + 0x000000D8:word32] = a13
	Mem0[a12 + 0x000000DC:word32] = a13
	Mem0[a12 + 0x000000E0:word32] = a13
	a2 = a12
	a0 = 0x4010733A
	call __sfp (retsize: 0;)
	Mem0[a12 + 0x00000004:word32] = a2
	a2 = a12
	a0 = 0x40107341
	call __sfp (retsize: 0;)
	Mem0[a12 + 0x00000008:word32] = a2
	a2 = a12
	a0 = 0x40107348
	call __sfp (retsize: 0;)
	Mem0[a12 + 0x0000000C:word32] = a2
	a2 = Mem0[a12 + 0x00000004:word32]
	a3 = 4
	a4 = a13 | a13
	a0 = 0x40107354
	call fn40207208 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000008:word32]
	a3 = 9
	a4 = a14 | a14
	a0 = 0x4010735E
	call fn40207208 (retsize: 0;)
	a2 = Mem0[a12 + 0x0000000C:word32]
	a3 = 10
	a4 = 0x00000002
	a0 = 0x40107368
	call fn40207208 (retsize: 0;)
	Mem0[a12 + 0x00000018:word32] = a14
	// succ:  l4010736A
l4010736A:
	a0 = 0x4010736D
	call _dtoa_r (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  __sinit_exit
__sinit_exit:


// __sfp
// Return size: 0
void __sfp()
__sfp_entry:
	// succ:  l4010737C
l4010737C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a15
	Mem0[a1 + 0x0000001C:word32] = a0
	a15 = a2
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	a0 = 0x40107390
	call fn402072AC (retsize: 0;)
	a2 = 0x401058C8
	a12 = Mem0[a2 + 0x00000000:word32]
	a2 = Mem0[a12 + 0x00000018:word32]
	branch a2 != 0x00000000 l401073A0
	// succ:  l4010739A l401073A0
l4010739A:
	a2 = a12 | a12
	a0 = 0x401073A0
	call fn4020730C (retsize: 0;)
	// succ:  l401073A0
l401073A0:
	a14 = 0x000000D8
	a14 = a12 + a14
	a12 = Mem0[a14 + 0x00000008:word32]
	a2 = Mem0[a14 + 0x00000004:word32]
	goto l401073B4
	// succ:  l401073B4
l401073AC:
	v10 = Mem0[a12 + 0x0000000C:int16]
	a13 = (int32) v10
	branch a13 == 0x00000000 l401073DE
	// succ:  l401073B1 l401073DE
l401073B1:
	a12 = a12 + 104
	// succ:  l401073B4
l401073B4:
	a2 = a2 - 1
	branch a2 >= 0x00000000 l401073AC
	// succ:  l401073B9 l401073AC
l401073B9:
	a2 = Mem0[a14 + 0x00000000:word32]
	branch a2 != 0x00000000 l401073CA
	// succ:  l401073BD l401073CA
l401073BD:
	a2 = a15
	a3 = 4
	a0 = 0x401073C4
	call fn40207254 (retsize: 0;)
	Mem0[a14:word32] = a2
	a12 = a2
	branch a2 == 0x00000000 l401073D1
	// succ:  l401073CA l401073D1
l401073CA:
	a14 = Mem0[a14 + 0x00000000:word32]
l401073D1:
	a0 = 0x401073D4
	call fn402072C4 (retsize: 0;)
	a2 = 12
	Mem0[a15:word32] = a2
	goto l40107417
	// succ:  l40107417
l401073DE:
	a2 = 0xFFFFFFFF
	Mem0[a12 + 0x0000000E:word16] = a2
	a2 = 0x00000001
	Mem0[a12 + 0x0000000C:word16] = a2
	Mem0[a12 + 0x00000064:word32] = a13
	a2 = a12 + 88
	a0 = 0x401073F3
	call fn40206708 (retsize: 0;)
	a0 = 0x401073F6
	call fn402072C4 (retsize: 0;)
	a2 = a12 + 92
	Mem0[a12:word32] = a13
	Mem0[a12 + 0x00000008:word32] = a13
	Mem0[a12 + 0x00000004:word32] = a13
	Mem0[a12 + 0x00000010:word32] = a13
	Mem0[a12 + 0x00000014:word32] = a13
	Mem0[a12 + 0x00000018:word32] = a13
	a3 = a13
	a4 = 8
	a0 = 0x4010740D
	call fn40206534 (retsize: 0;)
	Mem0[a12 + 0x00000034:word32] = a13
	Mem0[a12 + 0x00000038:word32] = a13
	Mem0[a12 + 0x00000048:word32] = a13
	Mem0[a12 + 0x0000004C:word32] = a13
	// succ:  l40107417
l40107417:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a2 = a12
	a13 = Mem0[a1 + 0x00000014:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  __sfp_exit
__sfp_exit:


// __fp_lock_all
// Return size: 0
void __fp_lock_all()
__fp_lock_all_entry:
	// succ:  l40107428
l40107428:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40107430
	call fn402072AC (retsize: 0;)
	a2 = 0x40105834
	a3 = 0x401058D8
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x401058DC
	v6 = a0
	a0 = 0x4010743E
	call v6 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  __fp_lock_all_exit
__fp_lock_all_exit:


// __fp_unlock_all
// Return size: 0
void __fp_unlock_all()
__fp_unlock_all_entry:
	// succ:  l40107448
l40107448:
	a1 = fp
	a2 = 0x40105834
	a3 = 0x401058E0
	a2 = Mem0[a2 + 0x00000000:word32]
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x401058DC
	v6 = a0
	a0 = 0x4010745C
	call v6 (retsize: 0;)
	a0 = 0x4010745F
	call fn402072C4 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  __fp_unlock_all_exit
__fp_unlock_all_exit:


// __fputwc
// Return size: 0
void __fputwc()
__fputwc_entry:
	// succ:  l40107468
l40107468:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000030:word32] = a14
	a13 = a2 | a2
	a15 = a4 | a4
	a12 = a3 & 0x0000FFFF
	a0 = 0x401058E4
	v11 = a0
	a0 = 0x40107484
	call v11 (retsize: 0;)
	branch a2 != 1 l40107499
	// succ:  l40107487 l40107499
l40107487:
	a3 = a12 - 1
	a3 = a3 & 0x0000FFFF
	a4 = 0x000000FE
	branch a4 <u a3 l40107499
	// succ:  l40107492 l40107499
l40107492:
	Mem0[a1:byte] = a12
	goto l401074B9
	// succ:  l401074B9
l40107499:
	a2 = a13
	a3 = a1
	a4 = a12
	a5 = a15 + 92
	a0 = 0x401058E8
	v13 = a0
	a0 = 0x401074A8
	call v13 (retsize: 0;)
	branch a2 != -1 l401074B9
	// succ:  l401074AB l401074B9
l401074AB:
	v14 = Mem0[a15 + 0x0000000C:uint16]
	a4 = (uint32) v14
	a3 = 64
	a3 = a4 | a3
	Mem0[a15 + 0x0000000C:word16] = a3
	goto l40107526
	// succ:  l40107526
l401074B9:
	a2 = a1 + a2
	a14 = a1
	Mem0[a1 + 0x00000010:word32] = a2
	goto l4010751A
	// succ:  l4010751A
l401074C2:
	a2 = Mem0[a15 + 0x00000008:word32]
	a2 = a2 - 1
	Mem0[a15 + 0x00000008:word32] = a2
	branch a2 >= 0x00000000 l40107505
	// succ:  l401074CB l40107505
l401074CB:
	a3 = Mem0[a15 + 0x00000018:word32]
	branch a2 < a3 l401074E9
	// succ:  l401074D0 l401074E9
l401074D0:
	a2 = Mem0[a15 + 0x00000000:word32]
	v15 = Mem0[a14 + 0x00000000:byte]
	a3 = (uint32) v15
	Mem0[a2:byte] = a3
	a2 = Mem0[a15 + 0x00000000:word32]
	v16 = Mem0[a2 + 0x00000000:byte]
	a3 = (uint32) v16
	branch a3 == 10 l401074E4
	// succ:  l401074E0 l401074E4
l401074E0:
	goto l4010750F
	// succ:  l4010750F
l401074E4:
	a2 = a13
	goto l401074EE
	// succ:  l401074EE
l401074E9:
	v18 = Mem0[a14 + 0x00000000:byte]
	a3 = (uint32) v18
	a2 = a13
	// succ:  l401074EE
l401074EE:
	a4 = a15
	a0 = 0x40105888
	v19 = a0
	a0 = 0x401074F6
	call v19 (retsize: 0;)
	a2 = a2 + 1
	a3 = 0
	a4 = 1
	branch a2 != 0x00000000 l401074FF
	// succ:  l401074FC_1 l401074FF
l401074FC_1:
	a3 = a4
	// succ:  l401074FF
l401074FF:
	a2 = a3 & 0x000000FF
	goto l40107516
	// succ:  l40107516
l40107505:
	a2 = Mem0[a15 + 0x00000000:word32]
	v17 = Mem0[a14 + 0x00000000:byte]
	a3 = (uint32) v17
	Mem0[a2:byte] = a3
	a2 = Mem0[a15 + 0x00000000:word32]
	// succ:  l4010750F
l4010750F:
	a2 = a2 + 1
	Mem0[a15:word32] = a2
	goto l40107518
	// succ:  l40107518
l40107516:
	branch a2 != 0x00000000 l40107524
	// succ:  l40107518 l40107524
l40107518:
	a14 = a14 + 1
	// succ:  l4010751A
l4010751A:
	a2 = Mem0[a1 + 0x00000010:word32]
	branch a14 != a2 l401074C2
	// succ:  l4010751F l401074C2
l4010751F:
	a2 = a12
	goto l40107526
	// succ:  l40107526
l40107524:
	a2 = -1
	// succ:  l40107526
l40107526:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  __fputwc_exit
__fputwc_exit:


// _fputwc_r
// Return size: 0
void _fputwc_r()
_fputwc_r_entry:
	// succ:  l40107538
l40107538:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = a2
	a2 = Mem0[a4 + 0x00000064:word32]
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a4
	a14 = a3 & 0x0000FFFF
	branch (a2 & 0x00000001) != 0x00000000 l4010755C
	// succ:  l40107550 l4010755C
l40107550:
	v10 = Mem0[a4 + 0x0000000C:uint16]
	a2 = (uint32) v10
	branch (a2 & 0x00000200) != 0x00000000 l4010755C
	// succ:  l40107556 l4010755C
l40107556:
	a2 = a4 + 88
	a0 = 0x4010755C
	call fn402008B8 (retsize: 0;)
	// succ:  l4010755C
l4010755C:
	v12 = Mem0[a12 + 0x0000000C:int16]
	a5 = (int32) v12
	a4 = 0x40101018
	a2 = a5 & a4
	a2 = a2 & 0x0000FFFF
	branch a2 != 0x00000000 l40107579
	// succ:  l4010756A l40107579
l4010756A:
	a2 = Mem0[a12 + 0x00000064:word32]
	a5 = a5 | a4
	a4 = a2 | a4
	Mem0[a12 + 0x0000000C:word16] = a5
	Mem0[a12 + 0x00000064:word32] = a4
	// succ:  l40107579
l40107579:
	a2 = a13 | a13
	a3 = a14 | a14
	a4 = a12 | a12
	a0 = 0x40107585
	call fn40207468 (retsize: 0;)
	a13 = a2
	a2 = Mem0[a12 + 0x00000064:word32]
	branch (a2 & 0x00000001) != 0x00000000 l40107599
	// succ:  l4010758D l40107599
l4010758D:
	v13 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v13
	branch (a2 & 0x00000200) != 0x00000000 l40107599
	// succ:  l40107593 l40107599
l40107593:
	a2 = a12 + 88
	a0 = 0x40107599
	call fn402008E0 (retsize: 0;)
	// succ:  l40107599
l40107599:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  _fputwc_r_exit
_fputwc_r_exit:


// fputwc
// Return size: 0
void fputwc()
fputwc_entry:
	// succ:  l401075A8
l401075A8:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a14
	a14 = a2 & 0x0000FFFF
	a2 = 0x40105834
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a3
	branch a13 == 0x00000000 l401075C8
	// succ:  l401075BF l401075C8
l401075BF:
	a2 = Mem0[a13 + 0x00000018:word32]
	branch a2 != 0x00000000 l401075C8
	// succ:  l401075C3 l401075C8
l401075C3:
	a2 = a13
	a0 = 0x401075C8
	call fn4020730C (retsize: 0;)
	// succ:  l401075C8
l401075C8:
	a2 = 0x40105890
	branch a12 != a2 l401075D3
	// succ:  l401075CE l401075D3
l401075CE:
	a12 = Mem0[a13 + 0x00000004:word32]
	goto l401075E8
	// succ:  l401075E8
l401075D3:
	a2 = 0x40105894
	branch a12 != a2 l401075E0
	// succ:  l401075D9 l401075E0
l401075D9:
	a12 = Mem0[a13 + 0x00000008:word32]
	goto l401075E8
	// succ:  l401075E8
l401075E0:
	a2 = 0x40105898
	branch a12 != a2 l401075E8
	// succ:  l401075E6 l401075E8
l401075E6:
	a12 = Mem0[a13 + 0x0000000C:word32]
	// succ:  l401075E8
l401075E8:
	a2 = a13
	a3 = a14
	a4 = a12
	a0 = 0x401075F1
	call fn40207538 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fputwc_exit
fputwc_exit:


// xthal_set_intset
// Return size: 0
void xthal_set_intset()
xthal_set_intset_entry:
xthal_set_intset_exit:


// fn40110FB6
// Return size: 0
void fn40110FB6()
fn40110FB6_entry:
	// succ:  l40110FB6
l40110FB6:
	a1 = v3
fn40110FB6_exit:


// iomux_set_function
// Return size: 0
void iomux_set_function()
iomux_set_function_entry:
	// succ:  l40202014
l40202014:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x0000002C:word32] = a15
	a15 = a1
	Mem0[a15 + 0x00000014:word32] = a3
	Mem0[a15 + 0x00000010:byte] = a2
	a3 = 0x40202010
	v6 = Mem0[a15 + 0x00000010:byte]
	a2 = (uint32) v6
	a2 = a2 << 30
	a2 = a3 + a2
	a2 = a2 + 4
	a3 = Mem0[a2 + 0x00000000:word32]
	a2 = 0xFFFFFECF
	a2 = a3 & a2
	Mem0[a15:word32] = a2
	a4 = 0x40202010
	v8 = Mem0[a15 + 0x00000010:byte]
	a2 = (uint32) v8
	a3 = Mem0[a15 + 0x00000014:word32]
	a3 = a3 & 0x00000003
	a5 = a3 << 28
	a6 = Mem0[a15 + 0x00000014:word32]
	a3 = 4
	a3 = a6 & a3
	a3 = a3 << 26
	a5 = a5 | a3
	a3 = Mem0[a15 + 0x00000000:word32]
	a3 = a5 | a3
	a2 = a2 << 30
	a2 = a4 + a2
	a2 = a2 + 4
	Mem0[a2:word32] = a3
	a1 = a15
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 48
	return
	// succ:  iomux_set_function_exit
iomux_set_function_exit:


// iomux_set_direction_flags
// Return size: 0
void iomux_set_direction_flags()
iomux_set_direction_flags_entry:
	// succ:  l40202070
l40202070:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x0000002C:word32] = a15
	a15 = a1
	Mem0[a15 + 0x00000014:word32] = a3
	Mem0[a15 + 0x00000010:byte] = a2
	a2 = 3
	Mem0[a15:word32] = a2
	a3 = 0x40202010
	v6 = Mem0[a15 + 0x00000010:byte]
	a2 = (uint32) v6
	a2 = a2 << 30
	a2 = a3 + a2
	a2 = a2 + 4
	a3 = Mem0[a2 + 0x00000000:word32]
	a2 = Mem0[a15 + 0x00000000:word32]
	a4 = -1
	a2 = a4 ^ a2
	a2 = a3 & a2
	Mem0[a15 + 0x00000004:word32] = a2
	a4 = 0x40202010
	v8 = Mem0[a15 + 0x00000010:byte]
	a2 = (uint32) v8
	a5 = Mem0[a15 + 0x00000014:word32]
	a3 = Mem0[a15 + 0x00000004:word32]
	a3 = a5 | a3
	a2 = a2 << 30
	a2 = a4 + a2
	a2 = a2 + 4
	Mem0[a2:word32] = a3
	a1 = a15
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 48
	return
	// succ:  iomux_set_direction_flags_exit
iomux_set_direction_flags_exit:


// iomux_set_gpio_function
// Return size: 0
void iomux_set_gpio_function()
iomux_set_gpio_function_entry:
	// succ:  l402020C4
l402020C4:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a15
	a15 = a1
	a4 = a2
	a2 = a3
	Mem0[a15 + 0x00000010:byte] = a4
	Mem0[a15 + 0x00000014:byte] = a2
	v8 = Mem0[a15 + 0x00000010:byte]
	a2 = (uint32) v8
	a0 = 0x402020C0
	v9 = a0
	a0 = 0x402020E0
	call v9 (retsize: 0;)
	Mem0[a15:byte] = a2
	v10 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v10
	branch a2 <u 0x0000000C l402020EE
	// succ:  l402020E9 l402020EE
l402020E9:
	a2 = 0
	goto l402020F1
	// succ:  l402020F1
l402020EE:
	a2 = 0x00000003
	// succ:  l402020F1
l402020F1:
	Mem0[a15 + 0x00000004:word32] = a2
	v11 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v11
	a3 = Mem0[a15 + 0x00000004:word32]
	a0 = 0x402020FC
	call fn40302014 (retsize: 0;)
	v12 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v12
	v13 = Mem0[a15 + 0x00000014:byte]
	a3 = (uint32) v13
	a0 = 0x40202105
	call fn40302070 (retsize: 0;)
	a1 = a15
	a0 = Mem0[a1 + 0x0000002C:word32]
	a15 = Mem0[a1 + 0x00000028:word32]
	a1 = a1 + 48
	return
	// succ:  iomux_set_gpio_function_exit
iomux_set_gpio_function_exit:


// gpio_write
// Return size: 0
void gpio_write()
gpio_write_entry:
	// succ:  l40202114
l40202114:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000001C:word32] = a15
	// succ:  l40202117_thunk_fn40202119
l40202117_thunk_fn40202119:
	call fn40202119 (retsize: 0;)
	return
	// succ:  gpio_write_exit
gpio_write_exit:


// fn40202118
// Return size: 0
void fn40202118()
fn40202118_entry:
	// succ:  l40202118
l40202118:
	a1 = fp
	a7 = 0x401C290C
	// succ:  l40202118_thunk_fn40202119
l40202118_thunk_fn40202119:
	call fn40202119 (retsize: 0;)
	return
	// succ:  fn40202118_exit
fn40202118_exit:


// fn40202119
// Return size: 0
void fn40202119()
fn40202119_entry:
	// succ:  l40202119
l40202119:
	a1 = fp
	a15 = a1
	a4 = a2
	a2 = a3
	Mem0[a15:byte] = a4
	Mem0[a15 + 0x00000004:byte] = a2
	v7 = Mem0[a15 + 0x00000004:byte]
	a2 = (uint32) v7
	branch a2 == 0x00000000 l40202128_thunk_fn40202144
	goto l40202128_thunk_fn4020212A
	// succ:  l40202128_thunk_fn4020212A l40202128_thunk_fn40202144
l40202119:
	a4 = a2
	a2 = a3
	Mem0[a15:byte] = a4
	Mem0[a15 + 0x00000004:byte] = a2
	v8 = Mem0[a15 + 0x00000004:byte]
	a2 = (uint32) v8
	branch a2 == 0x00000000 l40202144
	// succ:  l40202126_thunk_fn4020212A l40202126_thunk_fn40202144
l40202126_thunk_fn4020212A:
	call fn4020212A (retsize: 0;)
	return
	// succ:  fn40202119_exit
l40202126_thunk_fn40202144:
	call fn40202144 (retsize: 0;)
	return
	// succ:  fn40202119_exit
l40202128_thunk_fn4020212A:
	call fn4020212A (retsize: 0;)
	return
	// succ:  fn40202119_exit l40202128_thunk_fn4020212A
l40202128_thunk_fn4020212A:
	call fn4020212A (retsize: 0;)
	return
	// succ:  fn40202119_exit
l40202128_thunk_fn40202144:
	call fn40202144 (retsize: 0;)
	return
	// succ:  fn40202119_exit
fn40202119_exit:


// fn4020212A
// Return size: 0
void fn4020212A()
fn4020212A_entry:
	// succ:  l4020212A
l4020212A:
	a1 = v3
	a2 = 0x40202110
	v6 = Mem0[a15 + 0x00000000:byte]
	a3 = (uint32) v6
	a4 = 1
	SAR = 0x00000020 - a3
	a3 = a4 << SAR
	a3 = a3 & 0x0000FFFF
	Mem0[a2 + 0x00000004:word32] = a3
	// succ:  l4020213E_thunk_fn40202144
l4020213E_thunk_fn40202144:
	call fn40202144 (retsize: 0;)
	return
	// succ:  fn4020212A_exit
fn4020212A_exit:


// fn40202144
// Return size: 0
void fn40202144()
fn40202144_entry:
	// succ:  l40202144
l40202144:
	a1 = v3
	a2 = 0x40202110
	v6 = Mem0[a15 + 0x00000000:byte]
	a3 = (uint32) v6
	a4 = 1
	SAR = 0x00000020 - a3
	a3 = a4 << SAR
	a3 = a3 & 0x0000FFFF
	Mem0[a2 + 0x00000008:word32] = a3
	// succ:  l4020215A
l4020215A:
	a1 = a15
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  fn40202144_exit
fn40202144_exit:


// gpio16_output_conf
// Return size: 0
void gpio16_output_conf()
gpio16_output_conf_entry:
	// succ:  l40202168
l40202168:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a15
	a15 = a1
	a2 = 0x40202164
	a3 = 0x40202164
	a4 = Mem0[a3 + 0x000000A0:word32]
	a3 = 1
	a3 = a4 | a3
	Mem0[a2 + 0x000000A0:word32] = a3
	a2 = 0x40202164
	a3 = 0x40202164
	a4 = Mem0[a3 + 0x00000090:word32]
	a3 = -2
	a3 = a4 & a3
	Mem0[a2 + 0x00000090:word32] = a3
	a2 = 0x40202164
	a3 = 0x40202164
	a4 = Mem0[a3 + 0x00000074:word32]
	a3 = 1
	a3 = a4 | a3
	Mem0[a2 + 0x00000074:word32] = a3
	a1 = a15
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  gpio16_output_conf_exit
gpio16_output_conf_exit:


// gpio16_output_set
// Return size: 0
void gpio16_output_set()
gpio16_output_set_entry:
	// succ:  l402021C0
l402021C0:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000001C:word32] = a15
	a15 = a1
	Mem0[a15:byte] = a2
	v5 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v5
	branch a2 == 0x00000000 l402021E9
	// succ:  l402021CF l402021E9
l402021CF:
	a2 = 0x40202164
	a3 = 0x40202164
	a4 = Mem0[a3 + 0x00000068:word32]
	a3 = 1
	a3 = a4 | a3
	Mem0[a2 + 0x00000068:word32] = a3
	goto l40202200
	// succ:  l40202200
l402021E9:
	a2 = 0x40202164
	a3 = 0x40202164
	a4 = Mem0[a3 + 0x00000068:word32]
	a3 = -2
	a3 = a4 & a3
	Mem0[a2 + 0x00000068:word32] = a3
	// succ:  l40202200
l40202200:
	a1 = a15
	// succ:  l40202201
l40202201:
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  gpio16_output_set_exit
gpio16_output_set_exit:


// fn402021F8
// Return size: 0
void fn402021F8()
fn402021F8_entry:
	// succ:  l402021F8
l402021F8:
	a1 = fp
	__reserved()
	b0 = b0 | !b2
	v6 = Mem0[a10 + 0x0000003A:uint16]
	a6 = (uint32) v6
	// succ:  l40202201_in_fn402021F8
l40202201_in_fn402021F8:
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  fn402021F8_exit
fn402021F8_exit:


// pulse_lcm
// Return size: 0
void pulse_lcm()
pulse_lcm_entry:
	// succ:  l4020220C
l4020220C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a15
	a15 = a1
	a2 = 0x00000005
	a3 = 0
	a0 = 0x4020221F
	call fn40302114 (retsize: 0;)
	a2 = 1
	a0 = 0x40202224
	call sdk_ets_delay_us (retsize: 0;)
	a2 = 5
	a3 = 1
	a0 = 0x4020222B
	call fn40302114 (retsize: 0;)
	a2 = 1
	a0 = 0x40202230
	call sdk_ets_delay_us (retsize: 0;)
	a2 = 5
	a3 = 0
	a0 = 0x40202237
	call fn40302114 (retsize: 0;)
	a2 = 1
	a0 = 0x4020223C
	call sdk_ets_delay_us (retsize: 0;)
	a1 = a15
	a0 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  pulse_lcm_exit
pulse_lcm_exit:


// write_nibble_data
// Return size: 0
void write_nibble_data()
write_nibble_data_entry:
	goto l40202248
	// succ:  l40202248
l00000000_thunk_fn40202299:
	call fn40202299 (retsize: 0;)
	return
	// succ:  write_nibble_data_exit
l40202248:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a15
	a15 = a1
	Mem0[a15:byte] = a2
	v6 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v6
	a4 = a2 & 0x00000001
	a3 = 1
	a2 = 0
	branch a4 == 0x00000000 l40202261
	// succ:  l4020225E_1 l40202261
l4020225E_1:
	a2 = a3
	// succ:  l40202261
l40202261:
	a2 = a2 & 0x000000FF
	a3 = a2
	a2 = 1
	a0 = 0x4020226B
	call fn40302114 (retsize: 0;)
	v9 = Mem0[a15 + 0x00000000:byte]
	a3 = (uint32) v9
	a2 = 2
	a2 = a3 & a2
	a4 = a2 >> 1
	a3 = 1
	a2 = 0
	branch a4 == 0x00000000 l4020227D
	// succ:  l4020227A_2 l4020227D
l4020227A_2:
	a2 = a3
	// succ:  l4020227D
l4020227D:
	a2 = a2 & 0x000000FF
	a3 = a2
	a2 = 3
	a0 = 0x40202287
	call fn40302114 (retsize: 0;)
	v10 = Mem0[a15 + 0x00000000:byte]
	a3 = (uint32) v10
	a2 = 4
	a2 = a3 & a2
	a4 = a2 >> 2
	a3 = 1
	a2 = 0
	branch a4 == 0x00000000 l40202299
	// succ:  l40202296_3 l40202296_thunk_fn40202299
l40202296_3:
	a2 = a3
	goto l00000000_thunk_fn40202299
	// succ:  l00000000_thunk_fn40202299
l40202296_thunk_fn40202299:
	call fn40202299 (retsize: 0;)
	return
	// succ:  write_nibble_data_exit
write_nibble_data_exit:


// fn40202280
// Return size: 0
void fn40202280()
fn40202280_entry:
	// succ:  l40202280
l40202280:
	a1 = fp
	a3 = a2
	a2 = 3
	a0 = 0x40202287
	call fn40302114 (retsize: 0;)
	v6 = Mem0[a15 + 0x00000000:byte]
	a3 = (uint32) v6
	a2 = 4
	a2 = a3 & a2
	a4 = a2 >> 2
	a3 = 1
	a2 = 0
	branch a4 == 0x00000000 l40202296_thunk_fn40202299
	// succ:  l40202296_1 l40202296_thunk_fn40202299
l40202296_1:
	a2 = a3
	// succ:  l40202296_thunk_fn40202299
l40202296_thunk_fn40202299:
	call fn40202299 (retsize: 0;)
	return
	// succ:  fn40202280_exit l40202296_thunk_fn40202299
l40202296_thunk_fn40202299:
	call fn40202299 (retsize: 0;)
	return
	// succ:  fn40202280_exit
fn40202280_exit:


// fn40202299
// Return size: 0
void fn40202299()
fn40202299_entry:
	// succ:  l40202299
l40202299:
	a1 = v3
	a2 = a2 & 0x000000FF
	a3 = a2
	a2 = 0
	a0 = 0x402022A3
	call fn40302114 (retsize: 0;)
	v8 = Mem0[a15 + 0x00000000:byte]
	a3 = (uint32) v8
	a2 = 8
	a2 = a3 & a2
	a4 = a2 >> 3
	a3 = 1
	a2 = 0
	branch a4 == 0x00000000 l402022B5
	// succ:  l402022B2_4 l402022B5
l402022B2_4:
	a2 = a3
	// succ:  l402022B5
l402022B5:
	a2 = a2 & 0x000000FF
	a3 = a2
	a2 = 0x00000002
	a0 = 0x402022C0
	call fn40302114 (retsize: 0;)
	a1 = a15
	a0 = Mem0[a1 + 0x0000001C:word32]
	a15 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 32
	return
	// succ:  fn40202299_exit
fn40202299_exit:


// fn402022A4
// Return size: 0
void fn402022A4()
fn402022A4_entry:
	// succ:  l402022A4
l402022A4:
	a1 = fp
	__reserved()
	a8 = Mem0[a0 + 0x0000008C:word32]
fn402022A4_exit:


// write_nibble
// Return size: 0
void write_nibble()
write_nibble_entry:
	// succ:  l402022CC
l402022CC:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a15
	a15 = a1
	a4 = a2
	a2 = a3
	Mem0[a15:byte] = a4
	Mem0[a15 + 0x00000004:byte] = a2
	v8 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v8
	a0 = 0x402022E7
	call fn40302248 (retsize: 0;)
	v9 = Mem0[a15 + 0x00000004:byte]
	a2 = (uint32) v9
	branch a2 == 0x00000000 l402022F4
	// succ:  l402022EC l402022F4
l402022EC:
	a2 = 1
	a0 = 0x402022F1
	call fn403021C0 (retsize: 0;)
	goto l402022FA
	// succ:  l402022FA
l402022F4:
	a2 = 0x00000000
	a0 = 0x402022FA
	call fn403021C0 (retsize: 0;)
	// succ:  l402022FA
l402022FA:
	a0 = 0x402022FD
	call fn4030220C (retsize: 0;)
	a1 = a15 | a15
	a0 = Mem0[a1 + 0x0000001C:word32]
	a15 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 32
	return
	// succ:  write_nibble_exit
write_nibble_exit:


// write_byte
// Return size: 0
void write_byte()
write_byte_entry:
	// succ:  l4020230C
l4020230C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a15
	a15 = a1
	a4 = a2
	a2 = a3
	Mem0[a15:byte] = a4
	Mem0[a15 + 0x00000004:byte] = a2
	v8 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v8
	a2 = a2 >>u 4
	a2 = a2 & 0x000000FF
	v9 = Mem0[a15 + 0x00000004:byte]
	a3 = (uint32) v9
	a0 = 0x40202330
	call fn403022CC (retsize: 0;)
	v10 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v10
	a2 = a2 & 0x0000000F
	v11 = Mem0[a15 + 0x00000004:byte]
	a3 = (uint32) v11
	a0 = 0x4020233C
	call fn403022CC (retsize: 0;)
	a1 = a15
	a0 = Mem0[a1 + 0x0000001C:word32]
	a15 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 32
	return
	// succ:  write_byte_exit
write_byte_exit:


// fn40202328
// Return size: 0
void fn40202328()
fn40202328_entry:
	// succ:  l40202328
l40202328:
	a1 = fp
	b7 = b4 | !b2
	__reserved()
	Mem0[a15 + 0x0000003C:word32] = a15
	v8 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v8
	a2 = a2 & 0x0000000F
	v10 = Mem0[a15 + 0x00000004:byte]
	a3 = (uint32) v10
	a0 = 0x4020233C
	call fn403022CC (retsize: 0;)
	a1 = a15
	a0 = Mem0[a1 + 0x0000001C:word32]
	a15 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 32
	return
	// succ:  fn40202328_exit
fn40202328_exit:


// fn40202338
// Return size: 0
void fn40202338()
fn40202338_entry:
	// succ:  l40202338
l40202338:
	a1 = fp
	__reserved()
	__reserved()
	a0 = Mem0[a1 + 0x0000001C:word32]
	a15 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 32
	return
	// succ:  fn40202338_exit
fn40202338_exit:


// hd44780_init_priv
// Return size: 0
void hd44780_init_priv()
hd44780_init_priv_entry:
	// succ:  l40202350
l40202350:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a15
	a15 = a1
	a2 = 3
	a0 = 0x4020235E
	call fn40302248 (retsize: 0;)
	a0 = 0x40202361
	call fn4030220C (retsize: 0;)
	a2 = 0x40202348
	a0 = 0x40202367
	call sdk_ets_delay_us (retsize: 0;)
	a2 = 3
	a0 = 0x4020236C
	call fn40302248 (retsize: 0;)
	a0 = 0x4020236F
	call fn4030220C (retsize: 0;)
	a2 = 0x00000064
	a0 = 0x40202375
	call sdk_ets_delay_us (retsize: 0;)
	a2 = 3
	a0 = 0x4020237A
	call fn40302248 (retsize: 0;)
	a0 = 0x4020237D
	call fn4030220C (retsize: 0;)
	a2 = 0x00000064
	a0 = 0x40202383
	call sdk_ets_delay_us (retsize: 0;)
	a2 = 2
	a0 = 0x40202388
	call fn40302248 (retsize: 0;)
	a0 = 0x4020238B
	call fn4030220C (retsize: 0;)
	a2 = 0x00000064
	a0 = 0x40202391
	call sdk_ets_delay_us (retsize: 0;)
	a2 = 40
	a3 = 0
	a0 = 0x40202398
	call fn4030230C (retsize: 0;)
	a2 = 0x00000064
	a0 = 0x4020239E
	call sdk_ets_delay_us (retsize: 0;)
	a2 = 8
	a3 = 0x00000000
	a0 = 0x402023A6
	call fn4030230C (retsize: 0;)
	a2 = 0x00000035
	a0 = 0x402023AC
	call sdk_ets_delay_us (retsize: 0;)
	a2 = 1
	a3 = 0
	a0 = 0x402023B3
	call fn4030230C (retsize: 0;)
	a2 = 0x4020234C
	a0 = 0x402023B9
	call sdk_ets_delay_us (retsize: 0;)
	a2 = 0x00000006
	a3 = 0
	a0 = 0x402023C1
	call fn4030230C (retsize: 0;)
	a2 = 53
	a0 = 0x402023C6
	call sdk_ets_delay_us (retsize: 0;)
	a2 = 12
	a3 = 0
	a0 = 0x402023CD
	call fn4030230C (retsize: 0;)
	a2 = 53
	a0 = 0x402023D2
	call sdk_ets_delay_us (retsize: 0;)
	a1 = a15
	a0 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  hd44780_init_priv_exit
hd44780_init_priv_exit:


// fn40202394
// Return size: 0
void fn40202394()
fn40202394_entry:
	// succ:  l40202394
l40202394:
	a1 = fp
	Mem0[a5 + 0x000003DC:real32] = f0
	__reserved()
	__reserved()
	a0 = 0x401E2BD0
	a3 = 0x00000000
	a0 = 0x402023A6
	call fn4030230C (retsize: 0;)
	a2 = 0x00000035
	a0 = 0x402023AC
	call sdk_ets_delay_us (retsize: 0;)
	a2 = 1
	a3 = 0
	a0 = 0x402023B3
	call fn4030230C (retsize: 0;)
	a2 = 0x4020234C
	a0 = 0x402023B9
	call sdk_ets_delay_us (retsize: 0;)
	a2 = 0x00000006
	a3 = 0
	a0 = 0x402023C1
	call fn4030230C (retsize: 0;)
	a2 = 53
	a0 = 0x402023C6
	call sdk_ets_delay_us (retsize: 0;)
	a2 = 12
	a3 = 0
	a0 = 0x402023CD
	call fn4030230C (retsize: 0;)
	a2 = 53
	a0 = 0x402023D2
	call sdk_ets_delay_us (retsize: 0;)
	a1 = a15
	a0 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  fn40202394_exit
fn40202394_exit:


// fn402023C8
// Return size: 0
void fn402023C8()
fn402023C8_entry:
	// succ:  l402023C8
l402023C8:
	a1 = fp
	a3 = 0
	a0 = 0x402023CD
	call fn4030230C (retsize: 0;)
	a2 = 53
	a0 = 0x402023D2
	call sdk_ets_delay_us (retsize: 0;)
	a1 = a15
	a0 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  fn402023C8_exit
fn402023C8_exit:


// hd44780_set_cursor_pos
// Return size: 0
void hd44780_set_cursor_pos()
hd44780_set_cursor_pos_entry:
	// succ:  l402023E0
l402023E0:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a15
	a15 = a1
	a4 = a2
	a2 = a3
	Mem0[a15 + 0x00000010:byte] = a4
	Mem0[a15 + 0x00000014:byte] = a2
	a2 = 0
	Mem0[a15:byte] = a2
	v8 = Mem0[a15 + 0x00000010:byte]
	a2 = (uint32) v8
	branch a2 == 1 l4020240C
	// succ:  l402023FE l4020240C
l402023FE:
	branch a2 < 2 l4020243A
	// succ:  l40202401 l4020243A
l40202401:
	branch a2 == 2 l4020241C
	// succ:  l40202404 l4020241C
l40202404:
	branch a2 == 3 l4020242C
	// succ:  l40202407 l4020242C
l40202407:
	goto l4020243C
	// succ:  l4020243C
l4020240C:
	v9 = Mem0[a15 + 0x00000000:byte]
	a3 = (uint32) v9
	a2 = 64
	a2 = a3 | a2
	Mem0[a15:byte] = a2
	goto l4020243C
	// succ:  l4020243C
l4020241C:
	v14 = Mem0[a15 + 0x00000000:byte]
	a3 = (uint32) v14
	a2 = 20
	a2 = a3 | a2
	Mem0[a15:byte] = a2
	goto l4020243C
	// succ:  l4020243C
l4020242C:
	v13 = Mem0[a15 + 0x00000000:byte]
	a3 = (uint32) v13
	a2 = 84
	a2 = a3 | a2
	Mem0[a15:byte] = a2
	goto l4020243C
	// succ:  l4020243C
l4020243A:
	__reserved()
	goto l4020243D
	// succ:  l4020243D
l4020243C:
	v10 = Mem0[a15 + 0x00000000:byte]
	a3 = (uint32) v10
	// succ:  l4020243D
l4020243D:
	v11 = Mem0[a15 + 0x00000014:byte]
	a2 = (uint32) v11
	a2 = a3 | a2
	Mem0[a15:byte] = a2
	v12 = Mem0[a15 + 0x00000000:byte]
	a3 = (uint32) v12
	a2 = 0xFFFFFF80
	a2 = a3 | a2
	a2 = a2 & 0x000000FF
	a3 = 0x00000000
	a0 = 0x4020245A
	call fn4030230C (retsize: 0;)
	a2 = 0x00000035
	a0 = 0x40202460
	call sdk_ets_delay_us (retsize: 0;)
	a1 = a15
	a0 = Mem0[a1 + 0x0000002C:word32]
	a15 = Mem0[a1 + 0x00000028:word32]
	a1 = a1 + 48
	return
	// succ:  hd44780_set_cursor_pos_exit
hd44780_set_cursor_pos_exit:


// fn402023EC
// Return size: 0
void fn402023EC()
fn402023EC_entry:
	// succ:  l402023EC
l402023EC:
	a1 = fp
	Mem0[a2 + 0x0000013C:real32] = f0
	__reserved()
fn402023EC_exit:


// hd44780_clear_screen
// Return size: 0
void hd44780_clear_screen()
hd44780_clear_screen_entry:
	// succ:  l4020246C
l4020246C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a15
	a15 = a1
	a2 = 1
	a3 = 0x00000000
	a0 = 0x4020247F
	call fn4030230C (retsize: 0;)
	a2 = 0x4020234C
	a0 = 0x40202485
	call sdk_ets_delay_us (retsize: 0;)
	a1 = a15
	a0 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  hd44780_clear_screen_exit
hd44780_clear_screen_exit:


// hd44780_init
// Return size: 0
void hd44780_init()
hd44780_init_entry:
	// succ:  l40202490
l40202490:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a15
	a15 = a1
	a2 = 0
	a0 = 0x4020249E
	call fn403021C0 (retsize: 0;)
	a0 = 0x402024A1
	call fn40302168 (retsize: 0;)
	a2 = 1
	a3 = 1
	a0 = 0x402024A8
	call fn403020C4 (retsize: 0;)
	a2 = 3
	a3 = 1
	a0 = 0x402024AF
	call fn403020C4 (retsize: 0;)
	a2 = 0x40202110
	a3 = 0x40202110
	a4 = Mem0[a3 + 0x00000000:word32]
	a3 = 0xFFFFFFD0
	a3 = a4 & a3
	Mem0[a2:word32] = a3
	a2 = 0x40202110
	a3 = 0x40202110
	a4 = Mem0[a3 + 0x0000000C:word32]
	a3 = 47
	a3 = a4 | a3
	Mem0[a2 + 0x0000000C:word32] = a3
	a2 = 53
	a0 = 0x402024DF
	call sdk_ets_delay_us (retsize: 0;)
	a0 = 0x402024E2
	call fn40302350 (retsize: 0;)
	a1 = a15
	a0 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  hd44780_init_exit
hd44780_init_exit:


// gpio_write
// Return size: 0
void gpio_write()
gpio_write_entry:
	// succ:  l402024F0
l402024F0:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000001C:word32] = a15
	a15 = a1
	a4 = a2
	a2 = a3
	Mem0[a15:byte] = a4
	Mem0[a15 + 0x00000004:byte] = a2
	v7 = Mem0[a15 + 0x00000004:byte]
	a2 = (uint32) v7
	branch a2 == 0x00000000 l40202520
	// succ:  l40202506 l40202520
l40202506:
	a2 = 0x40202110
	v8 = Mem0[a15 + 0x00000000:byte]
	a3 = (uint32) v8
	a4 = 1
	SAR = 0x00000020 - a3
	a3 = a4 << SAR
	a3 = a3 & 0x0000FFFF
	Mem0[a2 + 0x00000004:word32] = a3
	goto l40202536
	// succ:  l40202536
l40202520:
	a2 = 0x40202110
	v10 = Mem0[a15 + 0x00000000:byte]
	a3 = (uint32) v10
	a4 = 1
	SAR = 0x00000020 - a3
	a3 = a4 << SAR
	a3 = a3 & 0x0000FFFF
	Mem0[a2 + 0x00000008:word32] = a3
	// succ:  l40202536
l40202536:
	a1 = a15
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  gpio_write_exit
gpio_write_exit:


// uart_set_baud
// Return size: 0
void uart_set_baud()
uart_set_baud_entry:
	// succ:  l4020254C
l4020254C:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a15
	a15 = a1
	Mem0[a15 + 0x00000010:word32] = a2
	Mem0[a15 + 0x00000014:word32] = a3
	a2 = 0x40202540
	a3 = Mem0[a15 + 0x00000014:word32]
	a0 = 0x40202548
	v7 = a0
	a0 = 0x40202564
	call v7 (retsize: 0;)
	Mem0[a15:word32] = a2
	a3 = Mem0[a15 + 0x00000010:word32]
	a2 = a3
	a2 = a2 << 28
	a2 = a2 - a3
	a2 = a2 << 24
	a3 = a2
	a2 = 0x40202544
	a2 = a3 + a2
	a3 = Mem0[a15 + 0x00000000:word32]
	Mem0[a2 + 0x00000014:word32] = a3
	a1 = a15
	a0 = Mem0[a1 + 0x0000002C:word32]
	a15 = Mem0[a1 + 0x00000028:word32]
	a1 = a1 + 48
	return
	// succ:  uart_set_baud_exit
uart_set_baud_exit:


// task_main
// Return size: 0
void task_main()
task_main_entry:
	// succ:  l4020258C
l4020258C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a15
	a15 = a1 | a1
	a0 = 0x40202599
	call fn40302490 (retsize: 0;)
	a2 = 0x00000064
	a0 = 0x4020259F
	call vTaskDelay (retsize: 0;)
	a0 = 0x402025A2
	call fn4030246C (retsize: 0;)
	a2 = 0
	a3 = 0
	a0 = 0x402025A9
	call fn403023E0 (retsize: 0;)
	// succ:  l40242599
l40242599:
task_main_exit:


// uart_init
// Return size: 0
void uart_init()
uart_init_entry:
	// succ:  l402025B0
l402025B0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a15
	a15 = a1 | a1
	a3 = 0x402025AC
	a2 = 0
	a0 = 0x402025C4
	call fn4030254C (retsize: 0;)
	a1 = a15
	a0 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  uart_init_exit
uart_init_exit:


// backlight_init
// Return size: 0
void backlight_init()
backlight_init_entry:
	// succ:  l402025D0
l402025D0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a15
	a15 = a1
	a2 = 0x00000004
	a3 = 1
	a0 = 0x402025E3
	call gpio_enable (retsize: 0;)
	a2 = 4
	a3 = 1
	a0 = 0x402025EA
	call fn403024F0 (retsize: 0;)
	a1 = a15
	a0 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  backlight_init_exit
backlight_init_exit:


// user_init
// Return size: 0
void user_init()
user_init_entry:
	// succ:  l40202600
l40202600:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a15
	a15 = a1 | a1
	a0 = 0x4020260F
	call fn403025B0 (retsize: 0;)
	a0 = 0x40202612
	call fn403025D0 (retsize: 0;)
	a2 = 0x402025F8
	a3 = 0x402025FC
	a4 = 0
	Mem0[a1:word32] = a4
	a4 = 0
	Mem0[a1 + 0x00000004:word32] = a4
	a4 = 0x00000100
	a5 = 0
	a6 = 0
	a7 = 0
	a0 = 0x4020262C
	call xTaskGenericCreate (retsize: 0;)
	a1 = a15
	a0 = Mem0[a1 + 0x0000001C:word32]
	a15 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 32
	return
	// succ:  user_init_exit
user_init_exit:


// xTaskGenericCreate
// Return size: 0
void xTaskGenericCreate()
xTaskGenericCreate_entry:
	// succ:  l40202690
l40202690:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000004:word32] = a2
	a2 = 72
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a5
	a12 = a6
	a15 = a7
	a13 = a4 & 0x0000FFFF
	a0 = 0x40202674
	v14 = a0
	a0 = 0x402026B2
	call v14 (retsize: 0;)
	a14 = a2
	branch a2 == 0x00000000 l4020285A
	// succ:  l402026B7 l4020285A
l402026B7:
	a3 = Mem0[a1 + 0x00000040:word32]
	branch a3 != 0x00000000 l4020284C
	// succ:  l402026BD l4020284C
l402026BD:
	a4 = a13 << 30
	a2 = a4
	Mem0[a1 + 0x00000010:word32] = a4
	a0 = 0x40202674
	v15 = a0
	a0 = 0x402026CA
	call v15 (retsize: 0;)
	Mem0[a14 + 0x00000030:word32] = a2
	a4 = Mem0[a1 + 0x00000010:word32]
	branch a2 != 0x00000000 l402026DC
	// succ:  l402026D0 l402026DC
l402026D0:
	a2 = a14
	a0 = 0x40202678
	v16 = a0
	a0 = 0x402026D8
	call v16 (retsize: 0;)
	goto l4020285A
	// succ:  l4020285A
l402026DC:
	a3 = 0x000000A5
	a0 = 0x4020267C
	v17 = a0
	a0 = 0x402026E5
	call v17 (retsize: 0;)
	a3 = 0x40202638
	a2 = Mem0[a14 + 0x00000030:word32]
	a3 = a13 + a3
	a3 = a2 + a3 * 0x00000004
	a2 = -8
	a2 = a3 & a2
	a3 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a1:word32] = a2
	a4 = a14
	a5 = 0
	// succ:  l402026FC
l402026FC:
	v18 = Mem0[a3 + 0x00000000:byte]
	a6 = (uint32) v18
	a5 = a5 + 1
	Mem0[a4 + 0x00000034:byte] = a6
	v19 = Mem0[a3 + 0x00000000:byte]
	a6 = (uint32) v19
	a4 = a4 + 1
	branch a6 == 0x00000000 l40202710
	// succ:  l4020270B l40202710
l4020270B:
	a3 = a3 + 1
	branch a5 != 16 l402026FC
	// succ:  l40202710 l402026FC
l40202710:
	a2 = 0
	Mem0[a14 + 0x00000043:byte] = a2
	a2 = 14
	a3 = a12
	branch a2 >=u a12 l4020271E
	// succ:  l4020271C l4020271E
l4020271C:
	a3 = a2
	// succ:  l4020271E
l4020271E:
	a13 = a14 + 4
	Mem0[a14 + 0x0000002C:word32] = a3
	Mem0[a14 + 0x00000044:word32] = a3
	a2 = a13
	Mem0[a1 + 0x00000010:word32] = a3
	a0 = 0x4020272E
	call vListInitialiseItem (retsize: 0;)
	a2 = a14 + 24
	a0 = 0x40202734
	call vListInitialiseItem (retsize: 0;)
	a3 = Mem0[a1 + 0x00000010:word32]
	a2 = 15
	a3 = a2 - a3
	Mem0[a14 + 0x00000018:word32] = a3
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = Mem0[a1 + 0x00000004:word32]
	a4 = Mem0[a1 + 0x00000008:word32]
	Mem0[a14 + 0x00000010:word32] = a14
	Mem0[a14 + 0x00000024:word32] = a14
	a0 = 0x4020274A
	call pxPortInitialiseStack (retsize: 0;)
	Mem0[a14:word32] = a2
	branch a15 == 0x00000000 l40202750
	// succ:  l4020274E l40202750
l4020274E:
	Mem0[a15:word32] = a14
	// succ:  l40202750
l40202750:
	a0 = 0x40202680
	v20 = a0
	a0 = 0x40202756
	call v20 (retsize: 0;)
	a2 = 0x4020263C
	a4 = 0x40202640
	a3 = Mem0[a2 + 0x00000000:word32]
	// succ:  l4020275F_thunk_fn40202761
l4020275F_thunk_fn40202761:
	call fn40202761 (retsize: 0;)
	return
	// succ:  xTaskGenericCreate_exit
l4020284C:
	a3 = Mem0[a1 + 0x00000040:word32]
	// succ:  l4020284C_thunk_fn4020284D
l4020284C_thunk_fn4020284D:
	call fn4020284D (retsize: 0;)
	return
	// succ:  xTaskGenericCreate_exit
l4020285A:
	a13 = -1
	// succ:  l4020285C_in_xTaskGenericCreate
l4020285C_in_xTaskGenericCreate:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  xTaskGenericCreate_exit
xTaskGenericCreate_exit:


// fn40202760
// Return size: 0
void fn40202760()
fn40202760_entry:
	// succ:  l40202760
l40202760:
	a1 = fp
	v4 = Mem0[a11 + 0x00000066:uint16]
	a0 = (uint32) v4
	// succ:  l40202760_thunk_fn40202761
l40202760_thunk_fn40202761:
	call fn40202761 (retsize: 0;)
	return
	// succ:  fn40202760_exit
fn40202760_exit:


// fn40202761
// Return size: 0
void fn40202761()
fn40202761_entry:
	// succ:  l40202761
l40202761:
	a1 = fp
	a3 = a3 + 1
	Mem0[a2:word32] = a3
	a3 = Mem0[a4 + 0x00000000:word32]
	branch a3 != 0x00000000 l4020276D_thunk_fn402027D9
	goto l4020276D_thunk_fn40202770
	// succ:  l4020276D_thunk_fn40202770 l4020276D_thunk_fn402027D9
l40202761:
	Mem0[a2:word32] = a3
	a3 = Mem0[a4 + 0x00000000:word32]
	branch a3 != 0x00000000 l402027D9
	// succ:  l40202768_thunk_fn40202770 l40202768_thunk_fn402027D9
l40202768_thunk_fn40202770:
	call fn40202770 (retsize: 0;)
	return
	// succ:  fn40202761_exit
l40202768_thunk_fn402027D9:
	call fn402027D9 (retsize: 0;)
	return
	// succ:  fn40202761_exit
l4020276D_thunk_fn40202770:
	call fn40202770 (retsize: 0;)
	return
	// succ:  fn40202761_exit l4020276D_thunk_fn40202770
l4020276D_thunk_fn40202770:
	call fn40202770 (retsize: 0;)
	return
	// succ:  fn40202761_exit
l4020276D_thunk_fn402027D9:
	call fn402027D9 (retsize: 0;)
	return
	// succ:  fn40202761_exit
fn40202761_exit:


// fn40202770
// Return size: 0
void fn40202770()
fn40202770_entry:
	// succ:  l40202770
l40202770:
	a1 = v3
	Mem0[a4:word32] = a14
	a2 = Mem0[a2 + 0x00000000:word32]
	a6 = 0x40202644
	branch a2 == 1 l40202786
	// succ:  l40202780 l40202786
l40202780:
	a15 = 0x40202664
	// succ:  l40202780_thunk_fn402027D9
l40202780_thunk_fn402027D9:
	call fn402027D9 (retsize: 0;)
	return
	// succ:  fn40202770_exit
l40202786:
	a15 = a6
	// succ:  l40202788
l40202788:
	a2 = a15 | a15
	Mem0[a1 + 0x00000010:word32] = a6
	a0 = 0x40202791
	call vListInitialise (retsize: 0;)
	a2 = 0x40202670
	a15 = a15 + 20
	a6 = Mem0[a1 + 0x00000010:word32]
	branch a15 != a2 l40202788
	// succ:  l4020279C l40202788
l4020279C:
	a15 = 0x40202648
	a2 = a15
	a0 = 0x402027A4
	call vListInitialise (retsize: 0;)
	a2 = 0x4020264C
	a0 = 0x402027AA
	call vListInitialise (retsize: 0;)
	a2 = 0x40202650
	a0 = 0x402027B0
	call vListInitialise (retsize: 0;)
	a2 = 0x40202654
	a0 = 0x402027B6
	call vListInitialise (retsize: 0;)
	a2 = 0x40202658
	a0 = 0x402027BC
	call vListInitialise (retsize: 0;)
	a2 = 0x4020265C
	a3 = 0x4020264C
	Mem0[a2:word32] = a15
	a2 = 0x40202660
	a15 = 0x40202664
	Mem0[a2:word32] = a3
	a6 = Mem0[a1 + 0x00000010:word32]
	// succ:  l402027D2_thunk_fn402027D9
l402027D2_thunk_fn402027D9:
	call fn402027D9 (retsize: 0;)
	return
	// succ:  fn40202770_exit
fn40202770_exit:


// fn402027D9
// Return size: 0
void fn402027D9()
fn402027D9_entry:
	// succ:  l402027D9
l402027D9:
	a1 = v3
	a15 = 0x40202664
	a6 = 0x40202644
	a2 = Mem0[a15 + 0x00000000:word32]
	branch a2 != 0x00000000 l402027F9
	// succ:  l402027E6 l402027F9
l402027E6:
	a4 = 0x40202640
	a2 = Mem0[a4 + 0x00000000:word32]
	a2 = Mem0[a2 + 0x0000002C:word32]
	branch a12 <u a2 l402027F9
	// succ:  l402027F3 l402027F9
l402027F3:
	Mem0[a4:word32] = a14
	// succ:  l402027F9
l402027F9:
	a4 = 0x40202668
	a5 = 0x4020266C
	a2 = Mem0[a4 + 0x00000000:word32]
	a3 = Mem0[a14 + 0x0000002C:word32]
	a7 = a2 + 1
	a2 = Mem0[a5 + 0x00000000:word32]
	Mem0[a4:word32] = a7
	branch a2 >=u a3 l40202814
	// succ:  l4020280F l40202814
l4020280F:
	Mem0[a5:word32] = a3
	// succ:  l40202814
l40202814:
	a2 = a3 + a3 * 0x00000004
	a2 = a6 + a2 * 0x00000004
	a3 = a13
	a0 = 0x40202684
	v15 = a0
	a0 = 0x40202822
	call v15 (retsize: 0;)
	a0 = 0x40202688
	v16 = a0
	a0 = 0x40202828
	call v16 (retsize: 0;)
	a2 = Mem0[a15 + 0x00000000:word32]
	a13 = 1
	branch a2 == 0x00000000 l4020285C
	// succ:  l40202831 l4020285C
l40202831:
	a3 = 0x40202640
	a2 = Mem0[a3 + 0x00000000:word32]
	a2 = Mem0[a2 + 0x0000002C:word32]
	branch a2 >=u a12 l4020285C
	// succ:  l4020283F l4020285C
l4020283F:
	a2 = a13 | a13
	a0 = 0x4020268C
	v17 = a0
	a0 = 0x40202848
	call v17 (retsize: 0;)
	// succ:  l4020285C
l4020285C:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  fn402027D9_exit
fn402027D9_exit:


// fn40202840
// Return size: 0
void fn40202840()
fn40202840_entry:
	// succ:  l40202840
l40202840:
	a1 = fp
	__reserved()
	Mem0[a15 + 0x00000300:word32] = a9
fn40202840_exit:


// fn40202844
// Return size: 0
void fn40202844()
fn40202844_entry:
	// succ:  l40202844
l40202844:
	a1 = fp
	__reserved()
	goto l40202846
	// succ:  l40202846
l4020284A_thunk_fn4020284D:
	call fn4020284D (retsize: 0;)
	return
	// succ:  fn40202844_exit
fn40202844_exit:


// fn4020284D
// Return size: 0
void fn4020284D()
fn4020284D_entry:
	// succ:  l4020284D
l4020284D:
	a1 = fp
	a2 = 0x401FA890
	__reserved()
	a12 = Mem0[a13 + 0x0000000C:word32]
	goto l40202856_thunk_fn402426DC
	// succ:  l40202856_thunk_fn402426DC
l4020284D:
	a4 = a13 << 30
	Mem0[a2 + 0x00000030:word32] = a3
	a2 = a3
	// succ:  l40202852_thunk_fn402426DC
l40202852_thunk_fn402426DC:
	call fn402426DC (retsize: 0;)
	return
	// succ:  fn4020284D_exit
l40202856_thunk_fn402426DC:
	call fn402426DC (retsize: 0;)
	return
	// succ:  fn4020284D_exit
fn4020284D_exit:


// vTaskDelete
// Return size: 0
void vTaskDelete()
vTaskDelete_entry:
	// succ:  l40202878
l40202878:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a13
	a0 = 0x40202680
	v7 = a0
	a0 = 0x4020288A
	call v7 (retsize: 0;)
	branch a12 != 0x00000000 l40202896
	// succ:  l4020288D l40202896
l4020288D:
	a2 = 0x40202640
	a12 = Mem0[a2 + 0x00000000:word32]
	// succ:  l40202896
l40202896:
	a13 = a12 + 4
	a2 = a13
	a0 = 0x40202874
	v8 = a0
	a0 = 0x402028A0
	call v8 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000028:word32]
	branch a2 == 0x00000000 l402028AD
	// succ:  l402028A4 l402028AD
l402028A4:
	a2 = a12 + 24
	a0 = 0x40202874
	v9 = a0
	a0 = 0x402028AD
	call v9 (retsize: 0;)
	// succ:  l402028AD
l402028AD:
	a2 = 0x40202654
	a3 = a13
	a0 = 0x40202684
	v11 = a0
	a0 = 0x402028B8
	call v11 (retsize: 0;)
	a2 = 0x40202668
	a3 = 0x40202870
	a4 = Mem0[a2 + 0x00000000:word32]
	a5 = Mem0[a3 + 0x00000000:word32]
	a4 = a4 + 1
	a5 = a5 + 1
	Mem0[a2:word32] = a4
	Mem0[a3:word32] = a5
	a0 = 0x40202688
	v14 = a0
	a0 = 0x402028D8
	call v14 (retsize: 0;)
	a2 = 0x40202664
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 == 0x00000000 l402028F5
	// succ:  l402028E2 l402028F5
l402028E2:
	a2 = 0x40202640
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a12 != a2 l402028F5
	// succ:  l402028ED l402028F5
l402028ED:
	a2 = 1
	a0 = 0x4020268C
	v15 = a0
	a0 = 0x402028F5
	call v15 (retsize: 0;)
	// succ:  l402028F5
l402028F5:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  vTaskDelete_exit
vTaskDelete_exit:


// vTaskStartScheduler
// Return size: 0
void vTaskStartScheduler()
vTaskStartScheduler_entry:
	// succ:  l4020291C
l4020291C:
	a1 = fp
	a1 = a1 - 32
	a6 = 0x00000000
	a2 = 0x40202900
	a3 = 0x40202904
	a7 = 0x40202908
	Mem0[a1:word32] = a6
	Mem0[a1 + 0x00000004:word32] = a6
	a4 = 0x00000100
	a5 = a6 | a6
	Mem0[a1 + 0x0000001C:word32] = a0
	a0 = 0x4020293A
	call fn40302690 (retsize: 0;)
	branch a2 != 1 l40202976
	// succ:  l4020293D l40202976
l4020293D:
	a0 = 0x40202940
	call xTimerCreateTimerTask (retsize: 0;)
	branch a2 != 1 l40202976
	// succ:  l40202943 l40202976
l40202943:
	a3 = 0x4020290C
	v10 = Mem0[a3 + 0x00000000:byte]
	a3 = (uint32) v10
	branch a3 != 0x00000000 l4020295F
	// succ:  l4020294B l4020295F
l4020294B:
	a3 = 0x40202910
	v11 = Mem0[a3 + 0x00000000:byte]
	a4 = (uint32) v11
	branch a4 != 0x00000000 l4020295F
	// succ:  l40202954 l4020295F
l40202954:
l4020295F:
	a2 = 0x40202664
	a3 = 1
	Mem0[a2:word32] = a3
	a2 = 0x40202918
	a3 = 0
	Mem0[a2:word32] = a3
	a0 = 0x40202976
	call xPortStartScheduler (retsize: 0;)
	// succ:  l40202976
l40202976:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  vTaskStartScheduler_exit
vTaskStartScheduler_exit:


// xTaskGetTickCount
// Return size: 0
void xTaskGetTickCount()
xTaskGetTickCount_entry:
	// succ:  l40202980
l40202980:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	a0 = 0x40202680
	v5 = a0
	a0 = 0x4020298D
	call v5 (retsize: 0;)
	a2 = 0x40202918
	a12 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x40202688
	v7 = a0
	a0 = 0x4020299C
	call v7 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  xTaskGetTickCount_exit
xTaskGetTickCount_exit:


// fn402029A4
// Return size: 0
void fn402029A4()
fn402029A4_entry:
	// succ:  l402029A4
l402029A4:
	a1 = fp
	a0 = a13 * 0x00000008 - a1
fn402029A4_exit:


// vTaskDelay
// Return size: 0
void vTaskDelay()
vTaskDelay_entry:
	// succ:  l402029B4
l402029B4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	branch a2 != 0x00000000 l402029C8
	// succ:  l402029BD l402029C8
l402029BD:
	a2 = 1
	a0 = 0x4020268C
	v6 = a0
	a0 = 0x402029C5
	call v6 (retsize: 0;)
	goto l40202A02
	// succ:  l40202A02
l402029C8:
	a3 = 0x402029A8
	a4 = Mem0[a3 + 0x00000000:word32]
	a4 = a4 + 1
	Mem0[a3:word32] = a4
	a3 = 0x40202918
	a12 = Mem0[a3 + 0x00000000:word32]
	a3 = 0x40202640
	a12 = a2 + a12
	a3 = Mem0[a3 + 0x00000000:word32]
	a2 = a3 + 4
	a0 = 0x40202874
	v9 = a0
	a0 = 0x402029F1
	call v9 (retsize: 0;)
	a2 = a12
	a0 = 0x402029AC
	v10 = a0
	a0 = 0x402029F9
	call v10 (retsize: 0;)
	a0 = 0x402029B0
	v11 = a0
	a0 = 0x402029FF
	call v11 (retsize: 0;)
	branch a2 == 0x00000000 l402029BD
	// succ:  l40202A02 l402029BD
l40202A02:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  vTaskDelay_exit
vTaskDelay_exit:


// prvIdleTask
// Return size: 0
void prvIdleTask()
prvIdleTask_entry:
	// succ:  l40202A0C
l40202A0C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	a13 = 0x40202870
	a12 = 0x402029A8
	a14 = 0x40202654
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a15
	// succ:  l40202A24
l40202A24:
	a2 = Mem0[a13 + 0x00000000:word32]
	branch a2 == 0x00000000 l40202A89
	// succ:  l40202A2C l40202A89
l40202A2C:
	a2 = Mem0[a12 + 0x00000000:word32]
	a15 = Mem0[a14 + 0x00000000:word32]
	a2 = a2 + 1
	Mem0[a12:word32] = a2
	a0 = 0x402029B0
	v9 = a0
	a0 = 0x40202A40
	call v9 (retsize: 0;)
	branch a15 == 0x00000000 l40202A24
	// succ:  l40202A43 l40202A24
l40202A43:
	a0 = 0x40202680
	v10 = a0
	a0 = 0x40202A49
	call v10 (retsize: 0;)
	a2 = Mem0[a14 + 0x0000000C:word32]
	a15 = Mem0[a2 + 0x0000000C:word32]
	a2 = a15 + 4
	a0 = 0x40202874
	v11 = a0
	a0 = 0x40202A55
	call v11 (retsize: 0;)
	a3 = 0x4020263C
	a2 = Mem0[a3 + 0x00000000:word32]
	a2 = a2 - 1
	Mem0[a3:word32] = a2
	a2 = Mem0[a13 + 0x00000000:word32]
	a2 = a2 - 1
	Mem0[a13:word32] = a2
	a0 = 0x40202688
	v13 = a0
	a0 = 0x40202A76
	call v13 (retsize: 0;)
	a2 = Mem0[a15 + 0x00000030:word32]
	a0 = 0x40202678
	v14 = a0
	a0 = 0x40202A7E
	call v14 (retsize: 0;)
	a2 = a15
	a0 = 0x40202678
	v15 = a0
	a0 = 0x40202A86
	call v15 (retsize: 0;)
	goto l40242A24
	// succ:  l40242A24
l40202A89:
	a3 = 0x40202644
	a2 = Mem0[a3 + 0x00000000:word32]
	branch a2 <u 0x00000002 l40202A24
	// succ:  l40202A91 l40202A24
l40202A91:
	a2 = 1
	a0 = 0x4020268C
	v16 = a0
	a0 = 0x40202A99
	call v16 (retsize: 0;)
	// succ:  l40242A24
l40242A24:
prvIdleTask_exit:


// fn40202A7C
// Return size: 0
void fn40202A7C()
fn40202A7C_entry:
	// succ:  l40202A7C
l40202A7C:
	a1 = fp
	__reserved()
	__reserved()
	__reserved()
fn40202A7C_exit:


// vTaskSwitchContext
// Return size: 0
void vTaskSwitchContext()
vTaskSwitchContext_entry:
	// succ:  l40202AAC
l40202AAC:
	a1 = fp
	a2 = 0x402029A8
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	branch a2 == 0x00000000 l40202ACD
	// succ:  l40202ABD l40202ACD
l40202ABD:
	a2 = 0x40202A9C
	a3 = 1
	Mem0[a2:word32] = a3
	goto l40202B67
	// succ:  l40202B67
l40202ACD:
	a12 = 0x40202640
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = Mem0[a12 + 0x00000000:word32]
	a2 = Mem0[a2 + 0x00000000:word32]
	a3 = Mem0[a3 + 0x00000030:word32]
	branch a3 <u a2 l40202AF4
	// succ:  l40202AE1 l40202AF4
l40202AE1:
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = Mem0[a12 + 0x00000000:word32]
	a3 = a3 + 52
	a0 = 0x40202AA4
	v7 = a0
	a0 = 0x40202AF4
	call v7 (retsize: 0;)
	// succ:  l40202AF4
l40202AF4:
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = 0x40202AA0
	a2 = Mem0[a2 + 0x00000030:word32]
	a4 = 20
	a0 = 0x40202AA8
	v9 = a0
	a0 = 0x40202B06
	call v9 (retsize: 0;)
	branch a2 == 0x00000000 l40202B1C
	// succ:  l40202B08 l40202B1C
l40202B08:
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = Mem0[a12 + 0x00000000:word32]
	a3 = a3 + 52
	a0 = 0x40202AA4
	v10 = a0
	a0 = 0x40202B1C
	call v10 (retsize: 0;)
	// succ:  l40202B1C
l40202B1C:
	a2 = 0x4020266C
	a4 = 0x40202644
	a3 = Mem0[a2 + 0x00000000:word32]
	a3 = a3 + a3 * 0x00000004
	a3 = a4 + a3 * 0x00000004
	a3 = Mem0[a3 + 0x00000000:word32]
	branch a3 == 0x00000000 l40202B4C
	// succ:  l40202B31 l40202B4C
l40202B31:
	a2 = Mem0[a2 + 0x00000000:word32]
	a2 = a2 + a2 * 0x00000004
	a4 = a4 + a2 * 0x00000004
	a2 = Mem0[a4 + 0x00000004:word32]
	a3 = a4 + 8
	a2 = Mem0[a2 + 0x00000004:word32]
	Mem0[a4 + 0x00000004:word32] = a2
	branch a2 != a3 l40202B60
	// succ:  l40202B47 l40202B60
l40202B47:
	goto l40202B5C
	// succ:  l40202B5C
l40202B4C:
	a3 = Mem0[a2 + 0x00000000:word32]
	a3 = a3 - 1
	Mem0[a2:word32] = a3
	goto l40242B22
	// succ:  l40242B22
l40202B5C:
	a2 = Mem0[a2 + 0x00000004:word32]
	Mem0[a4 + 0x00000004:word32] = a2
	// succ:  l40202B60
l40202B60:
	a2 = Mem0[a2 + 0x0000000C:word32]
	Mem0[a12:word32] = a2
	// succ:  l40202B67
l40202B67:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  vTaskSwitchContext_exit
l40242B22:
vTaskSwitchContext_exit:


// vTaskPlaceOnEventListRestricted
// Return size: 0
void vTaskPlaceOnEventListRestricted()
vTaskPlaceOnEventListRestricted_entry:
	// succ:  l40202B70
l40202B70:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = 0x40202640
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = a3
	a3 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	a3 = a3 + 24
	a0 = 0x40202684
	v7 = a0
	a0 = 0x40202B8C
	call v7 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000000:word32]
	a2 = a2 + 4
	a0 = 0x40202874
	v9 = a0
	a0 = 0x40202B99
	call v9 (retsize: 0;)
	a2 = 0x40202918
	a2 = Mem0[a2 + 0x00000000:word32]
	a2 = a13 + a2
	a0 = 0x402029AC
	v10 = a0
	a0 = 0x40202BA9
	call v10 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  vTaskPlaceOnEventListRestricted_exit
vTaskPlaceOnEventListRestricted_exit:


// uxTaskGetStackHighWaterMark
// Return size: 0
void uxTaskGetStackHighWaterMark()
uxTaskGetStackHighWaterMark_entry:
	// succ:  l40202BB4
l40202BB4:
	a1 = fp
	branch a2 != 0x00000000 l40202BBE
	// succ:  l40202BB6 l40202BBE
l40202BB6:
	a2 = 0x40202640
	a2 = Mem0[a2 + 0x00000000:word32]
	// succ:  l40202BBE
l40202BBE:
	a5 = Mem0[a2 + 0x00000030:word32]
	a2 = 0x000000A5
	v6 = Mem0[a5 + 0x00000000:byte]
	a6 = (uint32) v6
	// succ:  l40202BC3_thunk_fn40202BC6
l40202BC3_thunk_fn40202BC6:
	call fn40202BC6 (retsize: 0;)
	return
	// succ:  uxTaskGetStackHighWaterMark_exit
uxTaskGetStackHighWaterMark_exit:


// fn40202BC4
// Return size: 0
void fn40202BC4()
fn40202BC4_entry:
	// succ:  l40202BC4
l40202BC4:
	a1 = fp
	a0 = 0x40202BC7
	call fn40229BC8 (retsize: 0;)
	// succ:  l40202BC4_thunk_fn40202BC6
l40202BC4_thunk_fn40202BC6:
	call fn40202BC6 (retsize: 0;)
	return
	// succ:  fn40202BC4_exit
fn40202BC4_exit:


// fn40202BC6
// Return size: 0
void fn40202BC6()
fn40202BC6_entry:
	// succ:  l40202BC6
l40202BC6:
	a1 = fp
	branch a6 != a2 l40202BC6_thunk_fn40202BE0
	goto l40202BC9
	// succ:  l40202BC9 l40202BC6_thunk_fn40202BE0
l40202BC6:
	branch a6 < 0x00000000 l402030CC
	goto l40202BCA
	// succ:  l40202BCA l402030CC
l40202BC6_thunk_fn40202BE0:
	call fn40202BE0 (retsize: 0;)
	return
	// succ:  fn40202BC6_exit
l40202BC9:
	a3 = a5 | a5
	// succ:  l40202BC9_thunk_fn40202BCC
l40202BC9_thunk_fn40202BCC:
	call fn40202BCC (retsize: 0;)
	return
	// succ:  fn40202BC6_exit
l40202BCA:
l402030CC:
	a3 = a1 % a0
	__reserved()
	// succ:  l4023FCDA
l4023FCDA:
fn40202BC6_exit:


// fn40202BCC
// Return size: 0
void fn40202BCC()
fn40202BCC_entry:
	// succ:  l40202BCC
l40202BCC:
	a1 = fp
	a3 = a3 + 1
	v5 = Mem0[a3 + 0x00000000:byte]
	a4 = (uint32) v5
	a2 = a3 - a5
	a2 = a2 & 0x0000FFFF
	branch a4 == a6 l40202BCC
	goto l40202BDA
	// succ:  l40202BDA l40202BCC
l40202BCC:
l40202BDA:
	a2 = a2 >>u 2
	return
	// succ:  fn40202BCC_exit
fn40202BCC_exit:


// fn40202BE0
// Return size: 0
void fn40202BE0()
fn40202BE0_entry:
	// succ:  l40202BE0
l40202BE0:
	a1 = fp
	a2 = 0
	return
	// succ:  fn40202BE0_exit
l40202BE0:
fn40202BE0_exit:


// xTaskGetCurrentTaskHandle
// Return size: 0
void xTaskGetCurrentTaskHandle()
xTaskGetCurrentTaskHandle_entry:
	// succ:  l40202BE4
l40202BE4:
	a1 = fp
	a2 = 0x40202640
	a2 = Mem0[a2 + 0x00000000:word32]
	return
	// succ:  xTaskGetCurrentTaskHandle_exit
xTaskGetCurrentTaskHandle_exit:


// xTaskGetSchedulerState
// Return size: 0
void xTaskGetSchedulerState()
xTaskGetSchedulerState_entry:
	// succ:  l40202BF0
l40202BF0:
	a1 = fp
	a3 = 0x40202664
	a2 = 0
	a3 = Mem0[a3 + 0x00000000:word32]
	branch a3 == a2 l40202BFA_thunk_fn40202C0C
	goto l40202BFD
	// succ:  l40202BFD l40202BFA_thunk_fn40202C0C
l40202BFA_thunk_fn40202C0C:
	call fn40202C0C (retsize: 0;)
	return
	// succ:  xTaskGetSchedulerState_exit
l40202BFD:
	a2 = 0x402029A8
	a3 = 2
	a4 = Mem0[a2 + 0x00000000:word32]
	a2 = 1
	branch a4 == 0x00000000 l40202C09_thunk_fn40202C0C
	// succ:  l40202C09_1 l40202C09_thunk_fn40202C0C
l40202C09_1:
	a2 = a3
	// succ:  l40202C09_thunk_fn40202C0C
l40202C09_thunk_fn40202C0C:
	call fn40202C0C (retsize: 0;)
	return
	// succ:  xTaskGetSchedulerState_exit l40202C09_thunk_fn40202C0C
l40202C09_thunk_fn40202C0C:
	call fn40202C0C (retsize: 0;)
	return
	// succ:  xTaskGetSchedulerState_exit
xTaskGetSchedulerState_exit:


// fn40202C0C
// Return size: 0
void fn40202C0C()
fn40202C0C_entry:
	// succ:  l40202C0C
l40202C0C:
	a1 = fp
	return
	// succ:  fn40202C0C_exit
fn40202C0C_exit:


// vTaskPriorityInherit
// Return size: 0
void vTaskPriorityInherit()
vTaskPriorityInherit_entry:
	// succ:  l40202C10
l40202C10:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a15
	a12 = a2
	branch a2 == 0x00000000 l40202C91_in_vTaskPriorityInherit
	// succ:  l40202C22 l40202C91_in_vTaskPriorityInherit
l40202C22:
	a13 = 0x40202640
	a3 = Mem0[a2 + 0x0000002C:word32]
	a2 = Mem0[a13 + 0x00000000:word32]
	a2 = Mem0[a2 + 0x0000002C:word32]
	branch a3 >=u a2 l40202C91_in_vTaskPriorityInherit
	// succ:  l40202C31 l40202C91_in_vTaskPriorityInherit
l40202C31:
	a2 = Mem0[a13 + 0x00000000:word32]
	a14 = 0x40202644
	a2 = Mem0[a2 + 0x0000002C:word32]
	a4 = 15
	a4 = a4 - a2
	a3 = a3 + a3 * 0x00000004
	a2 = Mem0[a12 + 0x00000014:word32]
	Mem0[a12 + 0x00000018:word32] = a4
	a3 = a14 + a3 * 0x00000004
	branch a2 != a3 l40202C88
	// succ:  l40202C4D l40202C88
l40202C4D:
	// succ:  l40202C67
l40202C67:
	a15 = a12 + 4
	a2 = a15
	a0 = 0x40202874
	// succ:  l40202C6B_thunk_fn40202C6E
l40202C6B_thunk_fn40202C6E:
	call fn40202C6E (retsize: 0;)
	return
	// succ:  vTaskPriorityInherit_exit
l40202C88:
	a2 = Mem0[a13 + 0x00000000:word32]
	a2 = Mem0[a2 + 0x0000002C:word32]
	Mem0[a12 + 0x0000002C:word32] = a2
	goto l40202C91_in_vTaskPriorityInherit
	// succ:  l40202C91_in_vTaskPriorityInherit
l40202C91_in_vTaskPriorityInherit:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  vTaskPriorityInherit_exit
l40202C91_in_vTaskPriorityInherit:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  vTaskPriorityInherit_exit
l40202C91_in_vTaskPriorityInherit:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  vTaskPriorityInherit_exit
vTaskPriorityInherit_exit:


// fn40202C51
// Return size: 0
void fn40202C51()
fn40202C51_entry:
	// succ:  l40202C51
l40202C51:
	a1 = fp
	Mem0[a2:word32] = a4
	a2 = a4 + a4 * 0x00000004
	a2 = a14 + a2 * 0x00000004
	a3 = a15
	a0 = 0x40202684
	goto l40202C5E_thunk_fn40202C61
	// succ:  l40202C5E_thunk_fn40202C61
l40202C51:
l40202C5E_thunk_fn40202C61:
	call fn40202C61 (retsize: 0;)
	return
	// succ:  fn40202C51_exit
fn40202C51_exit:


// fn40202C60
// Return size: 0
void fn40202C60()
fn40202C60_entry:
	// succ:  l40202C60
l40202C60:
	a1 = fp
	__reserved()
	// succ:  l40202C60_thunk_fn40202C61
l40202C60_thunk_fn40202C61:
	call fn40202C61 (retsize: 0;)
	return
	// succ:  fn40202C60_exit
l40202C82_thunk_fn40202C51:
	call fn40202C51 (retsize: 0;)
	return
	// succ:  fn40202C60_exit
fn40202C60_exit:


// fn40202C61
// Return size: 0
void fn40202C61()
fn40202C61_entry:
	// succ:  l40202C61
l40202C61:
	a1 = fp
	v4 = a0
	a0 = 0x40202C64
	call v4 (retsize: 0;)
	goto l40202C91
	// succ:  l40202C91
l40202C61:
	f4 = f6 + f0
	__reserved()
	a2 = a15
	a0 = 0x40202874
	v13 = a0
	a0 = 0x40202C71
	call v13 (retsize: 0;)
	a3 = Mem0[a13 + 0x00000000:word32]
	a2 = 0x4020266C
	a4 = Mem0[a3 + 0x0000002C:word32]
	a3 = Mem0[a2 + 0x00000000:word32]
	Mem0[a12 + 0x0000002C:word32] = a4
	branch a3 <u a4 l40202C82_thunk_fn40202C51
l40202C91:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  fn40202C61_exit
fn40202C61_exit:


// fn40202C6C
// Return size: 0
void fn40202C6C()
fn40202C6C_entry:
	// succ:  l40202C6C
l40202C6C:
	a1 = fp
	Mem0[a15 + 0x00000300:word32] = a0
	// succ:  l40202C6C_thunk_fn40202C6E
l40202C6C_thunk_fn40202C6E:
	call fn40202C6E (retsize: 0;)
	return
	// succ:  fn40202C6C_exit
fn40202C6C_exit:


// fn40202C6E
// Return size: 0
void fn40202C6E()
fn40202C6E_entry:
	// succ:  l40202C6E
l40202C6E:
	a1 = fp
	v4 = a0
	a0 = 0x40202C71
	call v4 (retsize: 0;)
	a3 = Mem0[a13 + 0x00000000:word32]
	a2 = 0x4020266C
	a4 = Mem0[a3 + 0x0000002C:word32]
	a3 = Mem0[a2 + 0x00000000:word32]
	Mem0[a12 + 0x0000002C:word32] = a4
	branch a3 <u a4 l40202C82_thunk_fn40202C51
	goto l40202C82_thunk_fn40202C85
	// succ:  l40202C82_thunk_fn40202C85 l40202C82_thunk_fn40202C51
l40202C6E:
	a0 = a0 - a0
	__reserved()
	__reserved()
	__reserved()
	a3 = Mem0[a2 + 0x00000000:word32]
	Mem0[a12 + 0x0000002C:word32] = a4
	branch a3 <u a4 l40202C82_thunk_fn40202C51
	goto l40202C82_thunk_fn40202C85
	// succ:  l40202C82_thunk_fn40202C85 l40202C82_thunk_fn40202C51
l40202C82_thunk_fn40202C51:
	call fn40202C51 (retsize: 0;)
	return
	// succ:  fn40202C6E_exit
l40202C82_thunk_fn40202C51:
	call fn40202C51 (retsize: 0;)
	return
	// succ:  fn40202C6E_exit
l40202C82_thunk_fn40202C85:
	call fn40202C85 (retsize: 0;)
	return
	// succ:  fn40202C6E_exit l40202C82_thunk_fn40202C85
l40202C82_thunk_fn40202C85:
	call fn40202C85 (retsize: 0;)
	return
	// succ:  fn40202C6E_exit
l40202C82_thunk_fn40202C85:
	call fn40202C85 (retsize: 0;)
	return
	// succ:  fn40202C6E_exit l40202C82_thunk_fn40202C85
l40202C82_thunk_fn40202C85:
	call fn40202C85 (retsize: 0;)
	return
	// succ:  fn40202C6E_exit
fn40202C6E_exit:


// fn40202C85
// Return size: 0
void fn40202C85()
fn40202C85_entry:
	// succ:  l40202C85
l40202C85:
	a1 = v3
	// succ:  l40242C56
l40242C56:
fn40202C85_exit:


// prvCheckForValidListAndQueue
// Return size: 0
void prvCheckForValidListAndQueue()
prvCheckForValidListAndQueue_entry:
	// succ:  l40202CB4
l40202CB4:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a15
	a0 = 0x40202680
	v8 = a0
	a0 = 0x40202CC7
	call v8 (retsize: 0;)
	a12 = 0x40202CA0
	a13 = Mem0[a12 + 0x00000000:word32]
	branch a13 != 0x00000000 l40202CF4
	// succ:  l40202CCE l40202CF4
l40202CCE:
	a15 = 0x40202CA4
	a2 = a15 | a15
	a0 = 0x40202CD7
	call vListInitialise (retsize: 0;)
	a14 = 0x40202CA8
	a2 = a14
	a0 = 0x40202CDF
	call vListInitialise (retsize: 0;)
	a5 = 0x40202CAC
	a2 = 10
	Mem0[a5:word32] = a15
	a5 = 0x40202CB0
	a3 = 12
	a4 = a13
	Mem0[a5:word32] = a14
	a0 = 0x40202CF2
	call xQueueGenericCreate (retsize: 0;)
	Mem0[a12:word32] = a2
	// succ:  l40202CF4
l40202CF4:
	a0 = 0x40202688
	v13 = a0
	a0 = 0x40202CFA
	call v13 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	// succ:  l40202D02_thunk_fn40202D04
l40202D02_thunk_fn40202D04:
	call fn40202D04 (retsize: 0;)
	return
	// succ:  prvCheckForValidListAndQueue_exit
prvCheckForValidListAndQueue_exit:


// fn40202D04
// Return size: 0
void fn40202D04()
fn40202D04_entry:
	// succ:  l40202D04
l40202D04:
	a1 = fp
	a1 = a1 + 32
	return
	// succ:  fn40202D04_exit
fn40202D04_exit:


// prvInsertTimerInActiveList
// Return size: 0
void prvInsertTimerInActiveList()
prvInsertTimerInActiveList_entry:
	// succ:  l40202D10
l40202D10:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a2 + 0x00000004:word32] = a3
	Mem0[a2 + 0x00000010:word32] = a2
	branch a4 <u a3 l40202D39
	// succ:  l40202D1C l40202D39
l40202D1C:
	a6 = Mem0[a2 + 0x00000018:word32]
	a4 = a4 - a5
	a3 = 1
	branch a4 >=u a6 l40202D50
	// succ:  l40202D26 l40202D50
l40202D26:
	a3 = a2 + 4
	a2 = 0x40202CB0
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x40202D0C
	v9 = a0
	a0 = 0x40202D34
	call v9 (retsize: 0;)
	a3 = 0
	goto l40202D50
	// succ:  l40202D50
l40202D39:
	branch a3 <u a5 l40202D41
	// succ:  l40202D3C l40202D41
l40202D3C:
	a3 = 1
	branch a4 <u a5 l40202D50
	// succ:  l40202D41 l40202D50
l40202D41:
	a3 = a2 + 4
	a2 = 0x40202CAC
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x40202D0C
	v10 = a0
	a0 = 0x40202D4E
	call v10 (retsize: 0;)
	a3 = 0
	// succ:  l40202D50
l40202D50:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a3
	a1 = a1 + 16
	return
	// succ:  prvInsertTimerInActiveList_exit
prvInsertTimerInActiveList_exit:


// xTimerCreateTimerTask
// Return size: 0
void xTimerCreateTimerTask()
xTimerCreateTimerTask_entry:
	// succ:  l40202D68
l40202D68:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000001C:word32] = a0
	a0 = 0x40202D71
	call fn40302CB4 (retsize: 0;)
	a2 = 0x40202CA0
	a5 = 0x00000000
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 == a5 l40202D94
	// succ:  l40202D7D l40202D94
l40202D7D:
	a2 = 0x40202D5C
	a3 = 0x40202D60
	a7 = 0x40202D64
	Mem0[a1:word32] = a5
	Mem0[a1 + 0x00000004:word32] = a5
	a4 = 0x00000200
	a6 = 2
	a0 = 0x40202D92
	call fn40302690 (retsize: 0;)
	a5 = a2
	// succ:  l40202D94
l40202D94:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a2 = a5
	a1 = a1 + 32
	return
	// succ:  xTimerCreateTimerTask_exit
xTimerCreateTimerTask_exit:


// fn40202D88
// Return size: 0
void fn40202D88()
fn40202D88_entry:
	// succ:  l40202D88
l40202D88:
	a1 = fp
	Mem0[a1 + 0x00000004:word32] = a5
	a4 = 0x00000200
	a6 = 2
	a0 = 0x40202D92
	call fn40302690 (retsize: 0;)
	a5 = a2
	// succ:  l40202D94_in_fn40202D88
l40202D94_in_fn40202D88:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a2 = a5
	a1 = a1 + 32
	return
	// succ:  fn40202D88_exit
fn40202D88_exit:


// xTimerCreate
// Return size: 0
void xTimerCreate()
xTimerCreate_entry:
	// succ:  l40202DA0
l40202DA0:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1:word32] = a5
	Mem0[a1 + 0x00000004:word32] = a6
	a12 = 0
	a13 = a3
	a15 = a2
	a14 = a4
	branch a3 == a12 l40202DE0
	// succ:  l40202DBE l40202DE0
l40202DBE:
	a2 = 40
	a0 = 0x40202674
	v13 = a0
	a0 = 0x40202DC6
	call v13 (retsize: 0;)
	a12 = a2
	branch a2 == 0x00000000 l40202DE0
	// succ:  l40202DCA l40202DE0
l40202DCA:
	a0 = 0x40202DCD
	call fn40302CB4 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = a12 + 4
	Mem0[a12 + 0x00000020:word32] = a3
	a3 = Mem0[a1 + 0x00000004:word32]
	Mem0[a12:word32] = a15
	Mem0[a12 + 0x00000018:word32] = a13
	Mem0[a12 + 0x0000001C:word32] = a14
	Mem0[a12 + 0x00000024:word32] = a3
	a0 = 0x40202DE0
	call vListInitialiseItem (retsize: 0;)
	// succ:  l40202DE0
l40202DE0:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a12
	a13 = Mem0[a1 + 0x00000024:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  xTimerCreate_exit
xTimerCreate_exit:


// xTimerGenericCommand
// Return size: 0
void xTimerGenericCommand()
xTimerGenericCommand_entry:
	// succ:  l40202DF8
l40202DF8:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = 0x40202CA0
	Mem0[a1 + 0x0000002C:word32] = a0
	a7 = Mem0[a12 + 0x00000000:word32]
	branch a7 == 0x00000000 l40202E54
	// succ:  l40202E0A l40202E54
l40202E0A:
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000004:word32] = a4
	Mem0[a1 + 0x00000008:word32] = a2
	branch a5 != 0x00000000 l40202E42
	// succ:  l40202E12 l40202E42
l40202E12:
	Mem0[a1 + 0x00000010:word32] = a5
	Mem0[a1 + 0x00000014:word32] = a6
	a0 = 0x40202E19
	call fn40302BF0 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000010:word32]
	a6 = Mem0[a1 + 0x00000014:word32]
	branch a2 != 1 l40202E30
	// succ:  l40202E20 l40202E30
l40202E20:
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = a1
	a4 = a6
	a0 = 0x40202DF4
	v11 = a0
	a0 = 0x40202E2C
	call v11 (retsize: 0;)
	goto l40202E56
	// succ:  l40202E56
l40202E30:
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = a1
	a4 = a5
	a0 = 0x40202DF4
	v12 = a0
	a0 = 0x40202E3C
	call v12 (retsize: 0;)
	goto l40202E56
	// succ:  l40202E56
l40202E42:
	a4 = a5 | a5
	a2 = a7 | a7
	a3 = a1 | a1
	a5 = 0
	a0 = 0x40202E50
	call xQueueGenericSendFromISR (retsize: 0;)
	goto l40202E56
	// succ:  l40202E56
l40202E54:
	a2 = a7
	// succ:  l40202E56
l40202E56:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a1 = a1 + 48
	return
	// succ:  xTimerGenericCommand_exit
xTimerGenericCommand_exit:


// prvSwitchTimerLists$isra$1
// Return size: 0
void prvSwitchTimerLists$isra$1()
prvSwitchTimerLists$isra$1_entry:
	// succ:  l40202E60
l40202E60:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a15
	a13 = 0x40202CAC
	goto l40202EB9
	// succ:  l40202EB9
l40202E76:
	a2 = Mem0[a2 + 0x0000000C:word32]
	a12 = Mem0[a2 + 0x0000000C:word32]
	a15 = Mem0[a2 + 0x00000000:word32]
	a14 = a12 + 4
	a2 = a14
	a0 = 0x40202874
	v11 = a0
	a0 = 0x40202E86
	call v11 (retsize: 0;)
	a3 = Mem0[a12 + 0x00000024:word32]
	a2 = a12 | a12
	a0 = 0x40202E8E
	call a3 (retsize: 0;)
	a2 = Mem0[a12 + 0x0000001C:word32]
	branch a2 != 1 l40202EB9
	// succ:  l40202E93 l40202EB9
l40202E93:
	a7 = Mem0[a12 + 0x00000018:word32]
	a5 = 0
	a7 = a15 + a7
	a3 = a14
	a2 = a12
	a4 = a15
	a6 = a5
	branch a15 >=u a7 l40202EB3
	// succ:  l40202EA4 l40202EB3
l40202EA4:
	a2 = Mem0[a13 + 0x00000000:word32]
	Mem0[a12 + 0x00000004:word32] = a7
	Mem0[a12 + 0x00000010:word32] = a12
	a0 = 0x40202D0C
	v15 = a0
	a0 = 0x40202EB0
	call v15 (retsize: 0;)
	goto l40202EB9
	// succ:  l40202EB9
l40202EB3:
	a3 = 0x00000000
	a0 = 0x40202EB9
	call fn40302DF8 (retsize: 0;)
	// succ:  l40202EB9
l40202EB9:
	a2 = Mem0[a13 + 0x00000000:word32]
	a3 = Mem0[a2 + 0x00000000:word32]
	branch a3 != 0x00000000 l40202E76
	// succ:  l40202EC2 l40202E76
l40202EC2:
	a3 = 0x40202CB0
	a0 = Mem0[a1 + 0x0000001C:word32]
	a4 = Mem0[a3 + 0x00000000:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	Mem0[a13:word32] = a4
	a14 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a3:word32] = a2
	a1 = a1 + 32
	return
	// succ:  prvSwitchTimerLists$isra$1_exit
prvSwitchTimerLists$isra$1_exit:


// prvTimerTask
// Return size: 0
void prvTimerTask()
prvTimerTask_entry:
	// succ:  l40202EE4
l40202EE4:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000034:word32] = a13
	a12 = 0x40202EDC
	a13 = 0x40202CA0
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a15
	a3 = 0x40202CAC
	a15 = 0
	a2 = Mem0[a3 + 0x00000000:word32]
	a4 = a15
	a3 = Mem0[a2 + 0x00000000:word32]
	a5 = 1
	branch a3 != 0x00000000 l40202F07
	// succ:  l40202F04_1 l40202F07
l40202F04_1:
	a4 = a5
	// succ:  l40202F07
l40202F07:
	a14 = a4 & 0x000000FF
	branch a14 != a15 l40202F11
	// succ:  l40202F0D l40202F11
l40202F0D:
	a2 = Mem0[a2 + 0x0000000C:word32]
	a15 = Mem0[a2 + 0x00000000:word32]
	// succ:  l40202F11
l40202F11:
	a0 = 0x40202EE0
	v12 = a0
	a0 = 0x40202F17
	call v12 (retsize: 0;)
	a0 = 0x40202F1A
	call fn40302980 (retsize: 0;)
	a4 = a2
	a2 = Mem0[a12 + 0x00000000:word32]
	branch a4 <u a2 l40202F24
	// succ:  l40202F21 l40202F24
l40202F21:
	goto l4020302E
	// succ:  l4020302E
l40202F24:
	Mem0[a1 + 0x00000010:word32] = a4
	a0 = 0x40202F2A
	call fn40302E60 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000010:word32]
	Mem0[a12:word32] = a4
	a0 = 0x402029B0
	v13 = a0
	a0 = 0x40202F34
	call v13 (retsize: 0;)
	goto l4020301A
	// succ:  l4020301A
l40202F9E:
	a14 = Mem0[a1 + 0x00000008:word32]
	a2 = Mem0[a14 + 0x00000014:word32]
	branch a2 == 0x00000000 l40202FAC
	// succ:  l40202FA4 l40202FAC
l40202FA4:
	a2 = a14 + 4
	a0 = 0x40202874
	v14 = a0
	a0 = 0x40202FAC
	call v14 (retsize: 0;)
	// succ:  l40202FAC
l40202FAC:
	a0 = 0x40202FAF
	call fn40302980 (retsize: 0;)
	a15 = a2
	a2 = Mem0[a12 + 0x00000000:word32]
	branch a15 >=u a2 l40202FB9
	// succ:  l40202FB6 l40202FB9
l40202FB6:
	a0 = 0x40202FB9
	call fn40302E60 (retsize: 0;)
	// succ:  l40202FB9
l40202FB9:
	a6 = Mem0[a1 + 0x00000000:word32]
	Mem0[a12:word32] = a15
	branch a6 == 2 l40202FFA
	// succ:  l40202FC0 l40202FFA
l40202FC0:
	branch a6 == 3 l40203012
	// succ:  l40202FC3 l40203012
l40202FC3:
	branch a6 != 0x00000000 l4020301A
	// succ:  l40202FC6 l4020301A
l40202FC6:
	a3 = Mem0[a14 + 0x00000018:word32]
	a5 = Mem0[a1 + 0x00000004:word32]
	a2 = a14
	a3 = a5 + a3
	a4 = a15
	Mem0[a1 + 0x00000010:word32] = a6
	a0 = 0x40202FD5
	call fn40302D10 (retsize: 0;)
	branch a2 != 1 l4020301A
	// succ:  l40202FD8 l4020301A
l40202FD8:
	a3 = Mem0[a14 + 0x00000024:word32]
	a2 = a14
	a0 = 0x40202FDF
	call a3 (retsize: 0;)
	a2 = Mem0[a14 + 0x0000001C:word32]
	a6 = Mem0[a1 + 0x00000010:word32]
	branch a2 != 1 l4020301A
	// succ:  l40202FE6 l4020301A
l40202FE6:
	a5 = Mem0[a14 + 0x00000018:word32]
	a4 = Mem0[a1 + 0x00000004:word32]
	a2 = a14
	a4 = a5 + a4
	a3 = a6
	a5 = a6
	a0 = 0x40202FF5
	call fn40302DF8 (retsize: 0;)
	goto l4020301A
	// succ:  l4020301A
l40202FFA:
	a3 = Mem0[a1 + 0x00000004:word32]
	a2 = a14 | a14
	Mem0[a14 + 0x00000018:word32] = a3
	a4 = a15
	a3 = a15 + a3
	a5 = a15
	a0 = 0x4020300C
	call fn40302D10 (retsize: 0;)
	goto l4020301A
	// succ:  l4020301A
l40203012:
	a2 = a14
	a0 = 0x40202678
	v16 = a0
	a0 = 0x4020301A
	call v16 (retsize: 0;)
	// succ:  l4020301A
l4020301A:
	a4 = 0x00000000
	a2 = Mem0[a13 + 0x00000000:word32]
	a3 = a1 | a1
	a5 = a4
	a0 = 0x40203028
	call xQueueGenericReceive (retsize: 0;)
	branch a2 != 0x00000000 l40202F9E
	// succ:  l4020302B l40202F9E
l4020302B:
	goto l40242EF7
	// succ:  l40242EF7
l4020302E:
	Mem0[a12:word32] = a4
	branch a4 >=u a15 l40203036
	// succ:  l40203033 l40203036
l40203033:
	goto l40242F81
	// succ:  l40242F81
l40203036:
	branch a14 != 1 l4020303C
	// succ:  l40203039 l4020303C
l40203039:
	goto l40242F81
	// succ:  l40242F81
l4020303C:
	goto l40242F39
	// succ:  l40242F39
l40242EF7:
l40242F39:
l40242F81:
prvTimerTask_exit:


// fn40202FFC
// Return size: 0
void fn40202FFC()
fn40202FFC_entry:
	// succ:  l40202FFC
l40202FFC:
	a1 = fp
	a0 = 0x401CEB7C
	__reserved()
	// succ:  l40203002_thunk_fn40206D3A
l40203002_thunk_fn40206D3A:
	call fn40206D3A (retsize: 0;)
	return
	// succ:  fn40202FFC_exit
fn40202FFC_exit:


// pxPortInitialiseStack
// Return size: 0
void pxPortInitialiseStack()
pxPortInitialiseStack_entry:
	// succ:  l40203044
l40203044:
	a1 = fp
	a5 = a2 - 76
	a6 = a2
	a2 = -16
	a2 = a5 & a2
	a5 = a2
	a7 = 0
	branch a6 >=u a2 l4020306D
	goto l40203055
	// succ:  l40203055 l40203052_thunk_fn4020306D
l40203052_thunk_fn4020306D:
	call fn4020306D (retsize: 0;)
	return
	// succ:  pxPortInitialiseStack_exit
l40203055:
	Mem0[a2 + 0x00000004:word32] = a3
	a3 = 0
	Mem0[a2 + 0x0000000C:word32] = a3
	a3 = 0x40203040
	a5 = a2 + 80
	Mem0[a2:word32] = a3
	a3 = 48
	Mem0[a2 + 0x00000010:word32] = a5
	Mem0[a2 + 0x00000014:word32] = a4
	Mem0[a2 + 0x00000008:word32] = a3
	return
	// succ:  pxPortInitialiseStack_exit
pxPortInitialiseStack_exit:


// fn40203050
// Return size: 0
void fn40203050()
fn40203050_entry:
	// succ:  l40203050
l40203050:
	a1 = fp
	a7 = 0
	branch a6 >=u a2 l40203052_thunk_fn4020306D
	goto l40203055_in_fn40203050
	// succ:  l40203055_in_fn40203050 l40203052_thunk_fn4020306D
l40203052_thunk_fn4020306D:
	call fn4020306D (retsize: 0;)
	return
	// succ:  fn40203050_exit
l40203055_in_fn40203050:
	Mem0[a2 + 0x00000004:word32] = a3
	a3 = 0
	Mem0[a2 + 0x0000000C:word32] = a3
	a3 = 0x40203040
	a5 = a2 + 80
	Mem0[a2:word32] = a3
	a3 = 48
	Mem0[a2 + 0x00000010:word32] = a5
	Mem0[a2 + 0x00000014:word32] = a4
	Mem0[a2 + 0x00000008:word32] = a3
	return
	// succ:  fn40203050_exit l40203055_in_fn40203050
l40203055_in_fn40203050:
	Mem0[a2 + 0x00000004:word32] = a3
	a3 = 0
	Mem0[a2 + 0x0000000C:word32] = a3
	a3 = 0x40203040
	a5 = a2 + 80
	Mem0[a2:word32] = a3
	a3 = 48
	Mem0[a2 + 0x00000010:word32] = a5
	Mem0[a2 + 0x00000014:word32] = a4
	Mem0[a2 + 0x00000008:word32] = a3
	return
	// succ:  fn40203050_exit
fn40203050_exit:


// fn4020306D
// Return size: 0
void fn4020306D()
fn4020306D_entry:
	// succ:  l4020306D
l4020306D:
	a1 = v3
	Mem0[a5:word32] = a7
	a5 = a5 + 4
	branch a6 >=u a5 l4020306D
	// succ:  l40203074 l4020306D
l40203074:
	// succ:  l40243055
l40243055:
fn4020306D_exit:


// xPortSysTickHandle
// Return size: 0
void xPortSysTickHandle()
xPortSysTickHandle_entry:
	// succ:  l4020307C
l4020307C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40203078
	v4 = a0
	a0 = 0x40203087
	call v4 (retsize: 0;)
	branch a2 == 0x00000000 l4020308C
	// succ:  l40203087_thunk_fn40203089 l40203087_thunk_fn40203089
l40203087_thunk_fn40203089:
	call fn40203089 (retsize: 0;)
	return
	// succ:  xPortSysTickHandle_exit
l40203087_thunk_fn40203089:
	call fn40203089 (retsize: 0;)
	return
	// succ:  xPortSysTickHandle_exit
xPortSysTickHandle_exit:


// fn40203084
// Return size: 0
void fn40203084()
fn40203084_entry:
	// succ:  l40203084
l40203084:
	a1 = fp
	v4 = a0
	a0 = 0x40203087
	call v4 (retsize: 0;)
	branch a2 == 0x00000000 l4020308C_in_fn40203084
	// succ:  l40203087_thunk_fn40203089 l4020308C_in_fn40203084
l40203087_thunk_fn40203089:
	call fn40203089 (retsize: 0;)
	return
	// succ:  fn40203084_exit l40203087_thunk_fn40203089
l40203087_thunk_fn40203089:
	call fn40203089 (retsize: 0;)
	return
	// succ:  fn40203084_exit
l4020308C_in_fn40203084:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  fn40203084_exit
fn40203084_exit:


// fn40203089
// Return size: 0
void fn40203089()
fn40203089_entry:
	// succ:  l40203089
l40203089:
	a1 = v3
	a0 = 0x4020308C
	call fn40302AAC (retsize: 0;)
	// succ:  l4020308C
l4020308C:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  fn40203089_exit
fn40203089_exit:


// xPortStartScheduler
// Return size: 0
void xPortStartScheduler()
xPortStartScheduler_entry:
	// succ:  l402030AC
l402030AC:
	a1 = fp
	a3 = 0x40203094
	a1 = a1 - 16
	a2 = 0x00000007
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x402030A0
	v6 = a0
	a0 = 0x402030BE
	call v6 (retsize: 0;)
xPortStartScheduler_exit:


// xPortGetFreeHeapSize
// Return size: 0
void xPortGetFreeHeapSize()
xPortGetFreeHeapSize_entry:
	// succ:  l40203108
l40203108:
	a1 = fp
	a1 = a1 - 64
	a2 = a1 | a1
	Mem0[a1 + 0x0000003C:word32] = a0
	a0 = 0x40203114
	call mallinfo (retsize: 0;)
	a2 = 0
	a0 = 0x40203119
	call sbrk (retsize: 0;)
	a3 = 0x4020309C
	a3 = Mem0[a3 + 0x00000000:word32]
	branch a3 != 0x00000000 l40203122
	// succ:  l40203120 l40203122
l40203120:
	a3 = a1
	// succ:  l40203122
l40203122:
	a4 = Mem0[a1 + 0x00000020:word32]
	a0 = Mem0[a1 + 0x0000003C:word32]
	a2 = a4 - a2
	a2 = a2 + a3
	a1 = a1 + 64
	return
	// succ:  xPortGetFreeHeapSize_exit
xPortGetFreeHeapSize_exit:


// prvCopyDataFromQueue
// Return size: 0
void prvCopyDataFromQueue()
prvCopyDataFromQueue_entry:
	// succ:  l40203134
l40203134:
	a1 = fp
	a1 = a1 - 16
	a6 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a6 == 0x00000000 l4020315A
	// succ:  l4020313D l4020315A
l4020313D:
	a5 = Mem0[a2 + 0x0000000C:word32]
	a4 = Mem0[a2 + 0x00000040:word32]
	a7 = Mem0[a2 + 0x00000004:word32]
	a5 = a5 + a4
	Mem0[a2 + 0x0000000C:word32] = a5
	branch a5 <u a7 l40203150
	// succ:  l4020314B l40203150
l4020314B:
	Mem0[a2 + 0x0000000C:word32] = a6
	a5 = a6
	// succ:  l40203150
l40203150:
	a2 = a3
	a3 = a5
	a0 = 0x40203130
	v10 = a0
	a0 = 0x4020315A
	call v10 (retsize: 0;)
	// succ:  l4020315A
l4020315A:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  prvCopyDataFromQueue_exit
prvCopyDataFromQueue_exit:


// xQueueGenericReset
// Return size: 0
void xQueueGenericReset()
xQueueGenericReset_entry:
	// succ:  l40203168
l40203168:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	a12 = a2
	a13 = a3 | a3
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40202680
	v8 = a0
	a0 = 0x4020317C
	call v8 (retsize: 0;)
	a6 = Mem0[a12 + 0x00000040:word32]
	a5 = Mem0[a12 + 0x0000003C:word32]
	a2 = Mem0[a12 + 0x00000000:word32]
	a5 = a6 * a5
	a3 = 0
	Mem0[a12 + 0x00000038:word32] = a3
	a4 = -1
	a6 = a5 - a6
	a6 = a2 + a6
	a5 = a2 + a5
	Mem0[a12 + 0x00000044:word32] = a4
	Mem0[a12 + 0x00000004:word32] = a5
	Mem0[a12 + 0x00000008:word32] = a2
	Mem0[a12 + 0x0000000C:word32] = a6
	Mem0[a12 + 0x00000048:word32] = a4
	branch a13 != a3 l402031C5
	// succ:  l402031AB l402031C5
l402031AB:
	a2 = Mem0[a12 + 0x00000010:word32]
	branch a2 == a3 l402031D1
	// succ:  l402031B0 l402031D1
l402031B0:
	a2 = a12 + 16
	a0 = 0x40203164
	v12 = a0
	a0 = 0x402031B9
	call v12 (retsize: 0;)
	branch a2 != 1 l402031D1
	// succ:  l402031BC l402031D1
l402031BC:
	a0 = 0x4020268C
	v13 = a0
	a0 = 0x402031C2
	call v13 (retsize: 0;)
	goto l402031D1
	// succ:  l402031D1
l402031C5:
	a2 = a12 + 16
	a0 = 0x402031CB
	call vListInitialise (retsize: 0;)
	a2 = a12 + 36
	a0 = 0x402031D1
	call vListInitialise (retsize: 0;)
	// succ:  l402031D1
l402031D1:
	a0 = 0x40202688
	v14 = a0
	a0 = 0x402031D7
	call v14 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = 0x00000001
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  xQueueGenericReset_exit
xQueueGenericReset_exit:


// xQueueGenericCreate
// Return size: 0
void xQueueGenericCreate()
xQueueGenericCreate_entry:
	// succ:  l402031E8
l402031E8:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a15
	a13 = a2
	a14 = a3
	branch a2 != 0x00000000 l40203201
	// succ:  l402031FC l40203201
l402031FC:
	a12 = 0
	goto l4020323A
	// succ:  l4020323A
l40203201:
	a2 = 76
	a0 = 0x40202674
	v10 = a0
	a0 = 0x40203209
	call v10 (retsize: 0;)
	a12 = a2
	branch a2 == 0x00000000 l402031FC
	// succ:  l4020320E l402031FC
l4020320E:
	a2 = a13 * a14
	a2 = a2 + 1
	a0 = 0x40202674
	v11 = a0
	a0 = 0x40203219
	call v11 (retsize: 0;)
	Mem0[a12:word32] = a2
	a15 = a2
	branch a2 == 0x00000000 l40203230
	// succ:  l4020321F l40203230
l4020321F:
	Mem0[a12 + 0x0000003C:word32] = a13
	Mem0[a12 + 0x00000040:word32] = a14
	a2 = a12
	a3 = 0x00000001
	a0 = 0x4020322C
	call fn40303168 (retsize: 0;)
	goto l4020323A
	// succ:  l4020323A
l40203230:
	a2 = a12
	a0 = 0x40202678
	v12 = a0
	a0 = 0x40203238
	call v12 (retsize: 0;)
	a12 = a15
	// succ:  l4020323A
l4020323A:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a2 = a12
	a13 = Mem0[a1 + 0x00000014:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  xQueueGenericCreate_exit
xQueueGenericCreate_exit:


// fn40203248
// Return size: 0
void fn40203248()
fn40203248_entry:
	// succ:  l40203248
l40203248:
	a1 = fp
	a0 = a13 * 0x00000008 - a2
fn40203248_exit:


// xQueueGenericSendFromISR
// Return size: 0
void xQueueGenericSendFromISR()
xQueueGenericSendFromISR_entry:
	// succ:  l40203250
l40203250:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a6 = Mem0[a2 + 0x00000038:word32]
	a12 = a2
	a2 = Mem0[a2 + 0x0000003C:word32]
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	a13 = a4 | a4
	branch a6 <u a2 l4020326E
	// succ:  l40203268 l4020326E
l40203268:
	a2 = 0x00000000
	branch a5 != 2 l402032B4
	// succ:  l4020326E l402032B4
l4020326E:
	a2 = a12
	a4 = a5
	a0 = 0x4020324C
	v10 = a0
	a0 = 0x40203278
	call v10 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000048:word32]
	branch a2 != -1 l402032A4
	// succ:  l40203281 l402032A4
l40203281:
	a2 = Mem0[a12 + 0x00000024:word32]
	branch a2 != 0x00000000 l4020328C
	// succ:  l40203285 l4020328C
l40203285:
	a2 = 1
	goto l402032B4
	// succ:  l402032B4
l4020328C:
	a2 = a12 + 36
	a0 = 0x40203164
	v12 = a0
	a0 = 0x40203295
	call v12 (retsize: 0;)
	branch a2 == 0x00000000 l40203285
	// succ:  l40203298 l40203285
l40203298:
	branch a13 == 0x00000000 l40203285
	// succ:  l4020329B l40203285
l4020329B:
	a2 = 1
	Mem0[a13:word32] = a2
	goto l402032B4
	// succ:  l402032B4
l402032A4:
	a3 = Mem0[a12 + 0x00000048:word32]
	a2 = 1
	a3 = a3 + a2
	Mem0[a12 + 0x00000048:word32] = a3
	// succ:  l402032B4
l402032B4:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  xQueueGenericSendFromISR_exit
xQueueGenericSendFromISR_exit:


// xQueueGenericReceive
// Return size: 0
void xQueueGenericReceive()
xQueueGenericReceive_entry:
	// succ:  l402032D0
l402032D0:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000030:word32] = a14
	a14 = 0
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x0000003C:word32] = a0
	a12 = a2
	a15 = a3
	Mem0[a1 + 0x00000010:word32] = a4
	Mem0[a1 + 0x00000014:word32] = a5
	a13 = a14
	goto l402032EF
	// succ:  l402032EF
l402032EC:
	a14 = 0x00000001
	// succ:  l402032EF
l402032EF:
	a0 = 0x40202680
	v12 = a0
	a0 = 0x402032F5
	call v12 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000038:word32]
	branch a2 == 0x00000000 l4020335C
	// succ:  l402032FE l4020335C
l402032FE:
	a2 = a12
	a3 = a15
	a13 = Mem0[a12 + 0x0000000C:word32]
	a0 = 0x40203307
	call fn40303134 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000014:word32]
	branch a2 != 0x00000000 l4020333E
	// succ:  l4020330B l4020333E
l4020330B:
	a3 = Mem0[a12 + 0x00000038:word32]
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = a3 - 1
	Mem0[a12 + 0x00000038:word32] = a3
	branch a2 != 0x00000000 l40203320
	// succ:  l4020331B l40203320
l4020331B:
	a0 = 0x4020331E
	call fn40302BE4 (retsize: 0;)
	Mem0[a12 + 0x00000004:word32] = a2
	// succ:  l40203320
l40203320:
	a2 = Mem0[a12 + 0x00000010:word32]
	branch a2 == 0x00000000 l40203350
	// succ:  l40203324 l40203350
l40203324:
	a2 = a12 + 16
	a0 = 0x40203164
	v15 = a0
	a0 = 0x4020332D
	call v15 (retsize: 0;)
	branch a2 != 1 l40203350
	// succ:  l40203330 l40203350
l40203330:
	a2 = 1
	a0 = 0x4020268C
	v16 = a0
	a0 = 0x40203338
	call v16 (retsize: 0;)
	goto l40203350
	// succ:  l40203350
l4020333E:
	a2 = Mem0[a12 + 0x00000024:word32]
	Mem0[a12 + 0x0000000C:word32] = a13
	branch a2 == 0x00000000 l40203350
	// succ:  l40203344 l40203350
l40203344:
	a2 = a12 + 36
	a0 = 0x40203164
	v17 = a0
	a0 = 0x4020334D
	call v17 (retsize: 0;)
	branch a2 != 0x00000000 l40203330
	// succ:  l40203350 l40203330
l40203350:
	a0 = 0x40202688
	v18 = a0
	a0 = 0x40203356
	call v18 (retsize: 0;)
	a2 = 1
	goto l4020343E
	// succ:  l4020343E
l4020335C:
	a2 = Mem0[a1 + 0x00000010:word32]
	branch a2 != 0x00000000 l4020336E
	// succ:  l40203360 l4020336E
l40203360:
	Mem0[a1 + 0x00000018:word32] = a2
	a0 = 0x40202688
	v13 = a0
	a0 = 0x40203368
	call v13 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000018:word32]
	goto l4020343E
	// succ:  l4020343E
l4020336E:
	branch a14 != 0x00000000 l40203378
	// succ:  l40203370 l40203378
l40203370:
	a2 = a1
	a0 = 0x402032C0
	v14 = a0
	a0 = 0x40203378
	call v14 (retsize: 0;)
	// succ:  l40203378
l40203378:
	a0 = 0x40202688
	v19 = a0
	a0 = 0x4020337E
	call v19 (retsize: 0;)
	a0 = 0x40202EE0
	v20 = a0
	a0 = 0x40203384
	call v20 (retsize: 0;)
	a0 = 0x40202680
	v21 = a0
	a0 = 0x4020338A
	call v21 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000044:word32]
	branch a2 != -1 l40203399
	// succ:  l40203393 l40203399
l40203393:
	Mem0[a12 + 0x00000044:word32] = a13
	// succ:  l40203399
l40203399:
	a2 = Mem0[a12 + 0x00000048:word32]
	branch a2 != -1 l402033A8
	// succ:  l402033A2 l402033A8
l402033A2:
	Mem0[a12 + 0x00000048:word32] = a13
	// succ:  l402033A8
l402033A8:
	a0 = 0x40202688
	v22 = a0
	a0 = 0x402033AE
	call v22 (retsize: 0;)
	a2 = a1
	a3 = a1 + 16
	a0 = 0x402032C4
	v23 = a0
	a0 = 0x402033B9
	call v23 (retsize: 0;)
	branch a2 != 0x00000000 l40203405
	// succ:  l402033BC l40203405
l402033BC:
	a0 = 0x40202680
	v24 = a0
	a0 = 0x402033C2
	call v24 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000038:word32]
	branch a2 == 0x00000000 l40203430
	// succ:  l402033CA l40203430
l402033CA:
	goto l40203418
	// succ:  l40203418
l402033DE:
	a3 = Mem0[a1 + 0x00000010:word32]
	a2 = a12 + 36
	a0 = 0x402032C8
	v31 = a0
	a0 = 0x402033E9
	call v31 (retsize: 0;)
	a2 = a12
	a0 = 0x402032CC
	v32 = a0
	a0 = 0x402033F1
	call v32 (retsize: 0;)
	a0 = 0x402029B0
	v33 = a0
	a0 = 0x402033F7
	call v33 (retsize: 0;)
	branch a2 != 0x00000000 l402032EC
	// succ:  l402033FA l402032EC
l402033FA:
	a2 = 1
	a0 = 0x4020268C
	v34 = a0
	a0 = 0x40203402
	call v34 (retsize: 0;)
	goto l402432EC
	// succ:  l402432EC
l40203405:
	a2 = a12
	a0 = 0x402032CC
	v25 = a0
	a0 = 0x4020340D
	call v25 (retsize: 0;)
	a0 = 0x402029B0
	v26 = a0
	a0 = 0x40203413
	call v26 (retsize: 0;)
	a2 = 0
	goto l4020343E
	// succ:  l4020343E
l40203418:
	a0 = 0x40202688
	v28 = a0
	a0 = 0x4020341E
	call v28 (retsize: 0;)
	a2 = a12
	a0 = 0x402032CC
	v29 = a0
	a0 = 0x40203426
	call v29 (retsize: 0;)
	a0 = 0x402029B0
	v30 = a0
	a0 = 0x4020342C
	call v30 (retsize: 0;)
	goto l402432EC
	// succ:  l402432EC
l40203430:
	a0 = 0x40202688
	v27 = a0
	a0 = 0x40203436
	call v27 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000000:word32]
	branch a2 != 0x00000000 l402033DE
	// succ:  l4020343B l402033DE
l4020343B:
	goto l402433CD
	// succ:  l402433CD
l4020343E:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  xQueueGenericReceive_exit
l402432EC:
l402433CD:
xQueueGenericReceive_exit:


// vQueueWaitForMessageRestricted
// Return size: 0
void vQueueWaitForMessageRestricted()
vQueueWaitForMessageRestricted_entry:
	// succ:  l40203450
l40203450:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	a12 = a2
	Mem0[a1 + 0x0000000C:word32] = a0
	a13 = a3
	a0 = 0x40202680
	v8 = a0
	a0 = 0x40203464
	call v8 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000044:word32]
	branch a2 != -1 l40203475
	// succ:  l4020346D l40203475
l4020346D:
	a2 = 0
	Mem0[a12 + 0x00000044:word32] = a2
	// succ:  l40203475
l40203475:
	a2 = Mem0[a12 + 0x00000048:word32]
	branch a2 != -1 l40203487
	// succ:  l4020347E l40203487
l4020347E:
	a2 = 0x00000000
	Mem0[a12 + 0x00000048:word32] = a2
	// succ:  l40203487
l40203487:
	a0 = 0x40202688
	v9 = a0
	a0 = 0x4020348D
	call v9 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000038:word32]
	branch a2 != 0x00000000 l4020349E
	// succ:  l40203496 l4020349E
l40203496:
	a2 = a12 + 36
	a3 = a13
	a0 = 0x4020349E
	call fn40302B70 (retsize: 0;)
	// succ:  l4020349E
l4020349E:
	a2 = a12
	a0 = 0x402032CC
	v10 = a0
	a0 = 0x402034A6
	call v10 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  vQueueWaitForMessageRestricted_exit
vQueueWaitForMessageRestricted_exit:


// dump_flash_sector
// Return size: 0
void dump_flash_sector()
dump_flash_sector_entry:
	// succ:  l402034D4
l402034D4:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	a13 = a3 | a3
	a14 = a3 + 3
	a3 = 0x402034B4
	Mem0[a1 + 0x0000000C:word32] = a15
	a14 = a14 & a3
	a15 = a2
	a2 = a14
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a12
	a0 = 0x402034C4
	v10 = a0
	a0 = 0x402034F8
	call v10 (retsize: 0;)
	a3 = a2
	a12 = a2
	a2 = 0x402034B8
	a4 = a14
	a2 = Mem0[a2 + 0x0000000C:word32]
	a14 = 0
	a2 = a15 * a2
	a15 = a14
	a0 = 0x402034C8
	v12 = a0
	a0 = 0x40203510
	call v12 (retsize: 0;)
	branch a13 != a14 l40203531
	// succ:  l40203513 l40203531
l40203513:
	a2 = 10
	a0 = 0x40203518
	call putchar (retsize: 0;)
	a2 = a12
	a0 = 0x402034CC
	v13 = a0
	a0 = 0x40203520
	call v13 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  dump_flash_sector_exit
l40203531:
	a3 = a15 & 0x0000000F
	a2 = 10
	branch a3 != 0x00000000 l4020354C
	// succ:  l40203538 l4020354C
l40203538:
	branch a15 == 0x00000000 l40203541
	// succ:  l4020353B l40203541
l4020353B:
	a1 = a1 | a1
	a0 = 0x40203541
	call putchar (retsize: 0;)
	// succ:  l40203541
l40203541:
	a2 = 0x402034BC
	a3 = a15
	a0 = 0x402034D0
	v17 = a0
	a0 = 0x4020354C
	call v17 (retsize: 0;)
	// succ:  l4020354C
l4020354C:
	a5 = a12 + a14
	v15 = Mem0[a5 + 0x00000000:byte]
	a3 = (uint32) v15
	a2 = 0x402034C0
	a15 = a15 + 1
	a0 = 0x402034D0
	v16 = a0
	a0 = 0x4020355C
	call v16 (retsize: 0;)
	a14 = a15
	branch a15 != a13 l40203531
	// succ:  l40203561 l40203531
l40203561:
	// succ:  l40243513
l40243513:
dump_flash_sector_exit:


// dump_flash_config_sectors
// Return size: 0
void dump_flash_config_sectors()
dump_flash_config_sectors_entry:
	// succ:  l40203578
l40203578:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2
	a2 = 0x40203564
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40203588
	call puts (retsize: 0;)
	a2 = 0x40203568
	a0 = 0x4020358E
	call puts (retsize: 0;)
	a2 = a12
	a3 = 0x00000080
	a0 = 0x40203596
	call fn403034D4 (retsize: 0;)
	a2 = 0x4020356C
	a0 = 0x4020359C
	call puts (retsize: 0;)
	a3 = 0x00000370
	a2 = a12 + 1
	a0 = 0x402035A4
	call fn403034D4 (retsize: 0;)
	a2 = 0x40203570
	a0 = 0x402035AA
	call puts (retsize: 0;)
	a3 = 0x00000370
	a2 = a12 + 2
	a0 = 0x402035B3
	call fn403034D4 (retsize: 0;)
	a2 = 0x40203574
	a0 = 0x402035B9
	call puts (retsize: 0;)
	a2 = a12 + 3
	a3 = 28
	a0 = 0x402035C0
	call fn403034D4 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  dump_flash_config_sectors_exit
dump_flash_config_sectors_exit:


// sdk_user_init_task
// Return size: 0
void sdk_user_init_task()
sdk_user_init_task_entry:
	// succ:  l402035F4
l402035F4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	a0 = 0x40203601
	call sdk_ets_timer_init (retsize: 0;)
	a5 = 0x402035D8
	a4 = 0x402035D4
	a3 = 0x402035D0
	a2 = 0x402035CC
	a0 = 0x402034D0
	v10 = a0
	a0 = 0x40203613
	call v10 (retsize: 0;)
	a3 = 0x402035DC
	a2 = 0x402035E0
	a3 = Mem0[a3 + 0x0000007C:word32]
	a3 = a3 >>u 0x00000010 & 0x0000FFFF
	a0 = 0x402034D0
	v11 = a0
	a0 = 0x40203628
	call v11 (retsize: 0;)
	a3 = 0x402035E4
	a2 = 0x402035E8
	a4 = Mem0[a3 + 0x000000F8:word32]
	a3 = a4 >>u 0x00000008 & 0x000000FF
	a4 = a4 & 0x000000FF
	a0 = 0x402034D0
	v12 = a0
	a0 = 0x40203640
	call v12 (retsize: 0;)
	a0 = 0x40203643
	call fn40302600 (retsize: 0;)
	a13 = 0x402035F0
	a3 = 0x402035EC
	a12 = a13 + 0x00000100
	v13 = Mem0[a12 + 0x000000E0:byte]
	a2 = (uint32) v13
	a4 = 1
	Mem0[a3:byte] = a4
	a0 = 0x40203657
	call sdk_wifi_mode_set (retsize: 0;)
	v14 = Mem0[a12 + 0x000000E0:byte]
	a2 = (uint32) v14
	branch a2 != 1 l4020366C
	// succ:  l4020365D l4020366C
l4020365D:
	a0 = 0x40203660
	call sdk_wifi_station_start (retsize: 0;)
	a2 = Mem0[a13 + 0x00000010:word32]
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x40203669
	call netif_set_default (retsize: 0;)
	v15 = Mem0[a12 + 0x000000E0:byte]
	a2 = (uint32) v15
	// succ:  l4020366C
l4020366C:
	branch a2 != 2 l4020367C
	// succ:  l4020366F l4020367C
l4020366F:
	a0 = 0x40203672
	call sdk_wifi_softap_start (retsize: 0;)
	a2 = Mem0[a13 + 0x00000014:word32]
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x40203679
	call netif_set_default (retsize: 0;)
	v16 = Mem0[a12 + 0x000000E0:byte]
	a2 = (uint32) v16
	// succ:  l4020367C
l4020367C:
	branch a2 != 3 l4020368D
	// succ:  l4020367F l4020368D
l4020367F:
	a0 = 0x40203682
	call sdk_wifi_station_start (retsize: 0;)
	a0 = 0x40203685
	call sdk_wifi_softap_start (retsize: 0;)
	a2 = Mem0[a13 + 0x00000014:word32]
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x4020368D
	call netif_set_default (retsize: 0;)
	// succ:  l4020368D
l4020368D:
	a0 = 0x40203690
	call sdk_wifi_station_get_auto_connect (retsize: 0;)
	branch a2 == 0x00000000 l40203696
	// succ:  l40203693 l40203696
l40203693:
	a0 = 0x40203696
	call sdk_wifi_station_connect (retsize: 0;)
	// succ:  l40203696
l40203696:
	a2 = 0
	a0 = 0x4020369B
	call fn40302878 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_user_init_task_exit
sdk_user_init_task_exit:


// sdk_wdt_init
// Return size: 0
void sdk_wdt_init()
sdk_wdt_init_entry:
	// succ:  l402036B0
l402036B0:
	a1 = fp
	a2 = 0x402036A8
	a1 = a1 - 16
	a5 = Mem0[a2 + 0x00000000:word32]
	a3 = 0xFFFFFFFE
	Mem0[a1 + 0x0000000C:word32] = a0
	a4 = 0x402036AC
	a3 = a5 & a3
	Mem0[a2:word32] = a3
	a5 = Mem0[a4 + 0x00000004:word32]
	a3 = 1
	a5 = a5 | a3
	Mem0[a4 + 0x00000004:word32] = a5
	a4 = 11
	Mem0[a2 + 0x00000004:word32] = a4
	a4 = 12
	Mem0[a2 + 0x00000008:word32] = a4
	a5 = Mem0[a2 + 0x00000000:word32]
	a4 = 56
	a4 = a5 | a4
	Mem0[a2:word32] = a4
	a5 = Mem0[a2 + 0x00000000:word32]
	a4 = -7
	a4 = a5 & a4
	Mem0[a2:word32] = a4
	a4 = Mem0[a2 + 0x00000000:word32]
	a3 = a4 | a3
	Mem0[a2:word32] = a3
	a0 = 0x40203718
	call sdk_pp_soft_wdt_init (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wdt_init_exit
sdk_wdt_init_exit:


// user_start_phase2
// Return size: 0
void user_start_phase2()
user_start_phase2_entry:
	// succ:  l40203784
l40203784:
	a1 = fp
	a9 = 0x00000140
	a1 = a1 - a9
	Mem0[a1 + 0x00000138:word32] = a12
	a12 = 0x40203724
	a2 = 0
	a3 = a12
	a4 = 0x00000020
	Mem0[a1 + 0x0000013C:word32] = a0
	Mem0[a1 + 0x00000134:word32] = a13
	Mem0[a1 + 0x00000130:word32] = a14
	Mem0[a1 + 0x0000012C:word32] = a15
	a0 = 0x40203774
	v12 = a0
	a0 = 0x402037A9
	call v12 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000000:word32]
	branch a2 <u 0x00000004 l402037C0
	// succ:  l402037AE l402037C0
l402037AE:
	a2 = 0
	Mem0[a12:word32] = a2
	Mem0[a12 + 0x00000004:word32] = a2
	Mem0[a12 + 0x00000008:word32] = a2
	Mem0[a12 + 0x0000000C:word32] = a2
	Mem0[a12 + 0x00000010:word32] = a2
	Mem0[a12 + 0x00000014:word32] = a2
	Mem0[a12 + 0x00000018:word32] = a2
	Mem0[a12 + 0x0000001C:word32] = a2
	// succ:  l402037C0
l402037C0:
	a2 = 0x00000020
	a0 = 0x402034C4
	v13 = a0
	a0 = 0x402037C9
	call v13 (retsize: 0;)
	a5 = 0
	a12 = a2
	a3 = a2
	a4 = 32
	a2 = a5
	Mem0[a12:word32] = a5
	Mem0[a12 + 0x00000004:word32] = a5
	Mem0[a12 + 0x00000008:word32] = a5
	Mem0[a12 + 0x0000000C:word32] = a5
	Mem0[a12 + 0x00000010:word32] = a5
	Mem0[a12 + 0x00000014:word32] = a5
	Mem0[a12 + 0x00000018:word32] = a5
	Mem0[a12 + 0x0000001C:word32] = a5
	a0 = 0x40203778
	v15 = a0
	a0 = 0x402037EA
	call v15 (retsize: 0;)
	a2 = a12
	a0 = 0x402034CC
	v16 = a0
	a0 = 0x402037F2
	call v16 (retsize: 0;)
	a0 = 0x402037F5
	call sdk_sleep_reset_analog_rtcreg_8266 (retsize: 0;)
	a13 = 0x402036AC
	a4 = Mem0[a13 + 0x00000058:word32]
	a3 = Mem0[a13 + 0x00000054:word32]
	a2 = Mem0[a13 + 0x00000050:word32]
	branch (a4 & 0x00008000) != 0x00000000 l40203819
	// succ:  l4020380D l40203819
l4020380D:
	a2 = 0x40203728
	a0 = 0x40203813
	call puts (retsize: 0;)
	a0 = 0x4020377C
	v17 = a0
	a0 = 0x40203819
	call v17 (retsize: 0;)
	// succ:  l40203819
l40203819:
	a5 = a2 | a3
	branch a5 != 0x00000000 l4020382A
	// succ:  l4020381E l4020382A
l4020381E:
	a2 = 0x4020372C
	a0 = 0x40203824
	call puts (retsize: 0;)
	a0 = 0x4020377C
	v18 = a0
	a0 = 0x4020382A
	call v18 (retsize: 0;)
	// succ:  l4020382A
l4020382A:
	branch (a4 & 0x00001000) == 0x00000000 l40203848
	// succ:  l4020382D l40203848
l4020382D:
	a4 = Mem0[a13 + 0x0000005C:word32]
	a14 = 0x40203730
	a6 = a4 >>u 0x00000010 & 0x0000FFFF
	a5 = a4 >>u 8
	Mem0[a14 + 0x0000001E:byte] = a6
	Mem0[a14 + 0x0000001F:byte] = a5
	Mem0[a14 + 0x00000020:byte] = a4
	goto l4020385A
	// succ:  l4020385A
l40203848:
	a14 = 0x40203730
	a4 = -2
	Mem0[a14 + 0x0000001F:byte] = a4
	a4 = 24
	Mem0[a14 + 0x0000001E:byte] = a4
	a4 = 52
	Mem0[a14 + 0x00000020:byte] = a4
	// succ:  l4020385A
l4020385A:
	a4 = a2 >>u 0x00000018 & 0x000000FF
	a5 = a3 >>u 8
	a2 = 0x40203734
	Mem0[a14 + 0x00000022:byte] = a3
	a3 = 0x40203738
	Mem0[a14 + 0x00000023:byte] = a4
	Mem0[a14 + 0x00000021:byte] = a5
	a0 = 0x40203872
	call sdk_wifi_softap_cacl_mac (retsize: 0;)
	a4 = 0x40203770
	a2 = 0x4020373C
	v20 = Mem0[a4 + 0x000000E0:byte]
	a3 = (uint32) v20
	a4 = 0x40203740
	Mem0[a14:word32] = a2
	Mem0[a14 + 0x00000008:word32] = a2
	Mem0[a14 + 0x00000004:word32] = a4
	a2 = 0x000000FF
	a12 = 0x402035F0
	branch a3 != a2 l40203895
	// succ:  l4020388D l40203895
l4020388D:
	a5 = 0x40203770
	a2 = 2
	Mem0[a5 + 0x000000E0:byte] = a2
	// succ:  l40203895
l40203895:
	a0 = 0x40203898
	call sdk_wifi_softap_set_default_ssid (retsize: 0;)
	a15 = a12 + 0x00000300
	v21 = Mem0[a15 + 0x0000000D:byte]
	a2 = (uint32) v21
	a3 = 13
	a2 = a2 - 1
	a2 = a2 & 0x000000FF
	branch a3 >=u a2 l402038AD
	// succ:  l402038A8 l402038AD
l402038A8:
	a2 = 1
	Mem0[a15 + 0x0000000D:byte] = a2
	// succ:  l402038AD
l402038AD:
	a14 = a12 + 0x00000500
	v22 = Mem0[a14 + 0x00000044:uint16]
	a2 = (uint32) v22
	a3 = 0x40203744
	a2 = a2 - 100
	a2 = a2 & 0x0000FFFF
	a3 = a3 & 0x0000FFFF
	branch a3 >=u a2 l402038C8
	// succ:  l402038C2 l402038C8
l402038C2:
	a2 = 0x00000064
	Mem0[a14 + 0x00000044:word16] = a2
	// succ:  l402038C8
l402038C8:
	v23 = Mem0[a15 + 0x0000000E:byte]
	a2 = (uint32) v23
	branch a2 >=u 0x00000005 l402038D1
	// succ:  l402038CE l402038D1
l402038CE:
	branch a2 != 1 l402038D6
	// succ:  l402038D1 l402038D6
l402038D1:
	a2 = 0
	Mem0[a15 + 0x0000000E:byte] = a2
	// succ:  l402038D6
l402038D6:
	a2 = 0x40203748
	a3 = 0x00000000
	a4 = 0x00000040
	a0 = 0x4020267C
	v24 = a0
	a0 = 0x402038E5
	call v24 (retsize: 0;)
	v25 = Mem0[a15 + 0x0000000F:byte]
	a2 = (uint32) v25
	branch a2 <u 0x00000002 l402038F1
	// succ:  l402038EB l402038F1
l402038EB:
	a2 = 0x00000000
	Mem0[a15 + 0x0000000F:byte] = a2
	// succ:  l402038F1
l402038F1:
	v26 = Mem0[a15 + 0x00000010:byte]
	a2 = (uint32) v26
	branch a2 <u 0x00000005 l402038FC
	// succ:  l402038F7 l402038FC
l402038F7:
	a2 = 4
	Mem0[a15 + 0x00000010:byte] = a2
	// succ:  l402038FC
l402038FC:
	a2 = Mem0[a12 + 0x000001E4:word32]
	branch a2 != -1 l40203929
	// succ:  l40203902 l40203929
l40203902:
	a7 = 0x4020374C
	a6 = 0
	a2 = 0x40203750
	a3 = a6
	a4 = 64
	Mem0[a7:word32] = a6
	Mem0[a7 + 0x00000004:word32] = a6
	Mem0[a7 + 0x00000008:word32] = a6
	Mem0[a7 + 0x0000000C:word32] = a6
	Mem0[a7 + 0x00000010:word32] = a6
	Mem0[a7 + 0x00000014:word32] = a6
	Mem0[a7 + 0x00000018:word32] = a6
	Mem0[a7 + 0x0000001C:word32] = a6
	Mem0[a7 + 0x00000020:word32] = a6
	a0 = 0x4020267C
	v28 = a0
	a0 = 0x40203929
	call v28 (retsize: 0;)
	// succ:  l40203929
l40203929:
	a2 = a12 + 0x00000200
	a5 = 0x40203770
	a3 = 0
	v29 = Mem0[a2 + 0x00000081:byte]
	a4 = (uint32) v29
	Mem0[a5 + 0x000000E1:byte] = a3
	branch a4 <u 0x00000002 l4020393D
	// succ:  l4020393A l4020393D
l4020393A:
	Mem0[a2 + 0x00000081:byte] = a3
	// succ:  l4020393D
l4020393D:
	v30 = Mem0[a15 + 0x00000014:byte]
	a2 = (uint32) v30
	branch a2 <u 0x00000006 l40203949
	// succ:  l40203943 l40203949
l40203943:
	a2 = 0x00000001
	Mem0[a15 + 0x00000014:byte] = a2
	// succ:  l40203949
l40203949:
	a2 = Mem0[a14 + 0x0000001C:word32]
	a2 = a2 - 1
	branch a2 <u 0x00000003 l40203957
	// succ:  l40203952 l40203957
l40203952:
	a2 = 3
	Mem0[a14 + 0x0000001C:word32] = a2
	// succ:  l40203957
l40203957:
	a2 = 0x00000090
	a2 = a2 + a1
	a0 = 0x4020395F
	call read_saved_phy_info (retsize: 0;)
	a2 = a1 + 16
	a0 = 0x40203965
	call get_sdk_default_phy_info (retsize: 0;)
	v31 = Mem0[a1 + 0x00000095:byte]
	a3 = (uint32) v31
	v32 = Mem0[a1 + 0x00000015:byte]
	a2 = (uint32) v32
	a15 = 0x00000080
	branch a3 == a2 l40203981
	// succ:  l40203971 l40203981
l40203971:
	a2 = 0x00000090
	a2 = a2 + a1
	a3 = a1 + 16
	a4 = a15
	a0 = 0x40203130
	v33 = a0
	a0 = 0x40203981
	call v33 (retsize: 0;)
	// succ:  l40203981
l40203981:
	a2 = 0x40203754
	a3 = 0
	a2 = Mem0[a2 + 0x00000000:word32]
	a2 = Mem0[a2 + 0x00000008:word32]
	a0 = 0x4020398D
	call setbuf (retsize: 0;)
	a3 = 0x40202544
	// succ:  l40203990
l40203990:
	a2 = Mem0[a3 + 0x0000001C:word32]
	a2 = a2 >>u 0x00000010 & 0x000000FF
	branch a2 != 0x00000000 l40203990
	// succ:  l4020399B l40203990
l4020399B:
	a15 = 0x40203758
	// succ:  l4020399E
l4020399E:
	a2 = Mem0[a15 + 0x0000001C:word32]
	a2 = a2 >>u 0x00000010 & 0x000000FF
	branch a2 != 0x00000000 l4020399E
	// succ:  l402039A9 l4020399E
l402039A9:
	a4 = a1 + 16
	a2 = 0x00000080
	a2 = a4 + a2
	Mem0[a1 + 0x00000110:word32] = a3
	a0 = 0x402039B8
	call sdk_register_chipv6_phy (retsize: 0;)
	a3 = Mem0[a1 + 0x00000110:word32]
	branch a2 == 0x00000000 l402039CC
	// succ:  l402039BD l402039CC
l402039BD:
	a2 = 0x4020375C
	a0 = 0x402034D0
	v34 = a0
	a0 = 0x402039C6
	call v34 (retsize: 0;)
	a0 = 0x4020377C
	v35 = a0
	a0 = 0x402039CC
	call v35 (retsize: 0;)
	// succ:  l402039CC
l402039CC:
	a2 = 0x0000042C
	Mem0[a3 + 0x00000014:word32] = a2
	Mem0[a15 + 0x00000014:word32] = a2
	a0 = 0x402039DD
	call sdk_phy_disable_agc (retsize: 0;)
	a2 = Mem0[a14 + 0x0000001C:word32]
	a0 = 0x402039E2
	call sdk_ieee80211_phy_init (retsize: 0;)
	a0 = 0x402039E5
	call sdk_lmacInit (retsize: 0;)
	a0 = 0x402039E8
	call sdk_wDev_Initialize (retsize: 0;)
	a0 = 0x402039EB
	call sdk_pp_attach (retsize: 0;)
	a3 = 0x40203738
	a2 = a12
	a0 = 0x402039F3
	call sdk_ieee80211_ifattach (retsize: 0;)
user_start_phase2_exit:


// gpio_enable
// Return size: 0
void gpio_enable()
gpio_enable_entry:
	// succ:  l40203A88
l40203A88:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000001C:word32] = a0
	a2 = a2 & 0x000000FF
	branch a3 == 1 l40203AEC
	// succ:  l40203A93 l40203AEC
l40203A93:
	a4 = 1
	branch a3 == 0x00000000 l40203AA0
	// succ:  l40203A97 l40203AA0
l40203A97:
	branch a3 != 2 l40203A9D
	// succ:  l40203A9A l40203A9D
l40203A9A:
	goto l40203B1C
	// succ:  l40203B1C
l40203A9D:
	goto l40203B79_in_gpio_enable
	// succ:  l40203B79_in_gpio_enable
l40203AA0:
	a5 = 0x40202110
	SAR = 0x00000020 - a2
	a4 = a4 << SAR
	Mem0[a5 + 0x00000014:word32] = a4
	Mem0[a1:word32] = a3
	a0 = 0x402020C0
	v13 = a0
	a0 = 0x40203AB6
	call v13 (retsize: 0;)
	a5 = 11
	a4 = 48
	a3 = Mem0[a1 + 0x00000000:word32]
	branch a5 >=u a2 l40203AC1
	// succ:  l40203ABF l40203AC1
l40203ABF:
	a4 = a3
	// succ:  l40203AC1
l40203AC1:
	a3 = 0x40202010
	a2 = a3 + a2 * 0x00000004
	a5 = Mem0[a2 + 0x00000004:word32]
	a3 = 0xFFFFFECF
	a3 = a5 & a3
	a4 = a4 | a3
	Mem0[a2 + 0x00000004:word32] = a4
	a4 = Mem0[a2 + 0x00000004:word32]
	a3 = -4
	a3 = a4 & a3
	Mem0[a2 + 0x00000004:word32] = a3
	goto l40203B79_in_gpio_enable
	// succ:  l40203B79_in_gpio_enable
l40203AEC:
	a4 = 0x40202110
	a6 = -5
	a5 = a4 + a2 * 0x00000004
	a7 = Mem0[a5 + 0x00000028:word32]
	SAR = 0x00000020 - a2
	a3 = a3 << SAR
	a6 = a7 & a6
	Mem0[a5 + 0x00000028:word32] = a6
	Mem0[a4 + 0x00000010:word32] = a3
	a0 = 0x402020C0
	v11 = a0
	a0 = 0x40203B12
	call v11 (retsize: 0;)
	a4 = 11
	a3 = 48
	branch a4 >=u a2 l40203B4C
	// succ:  l40203B19 l40203B4C
l40203B19:
	goto l40203B49
	// succ:  l40203B49
l40203B1C:
	a3 = 0x40202110
	a6 = 4
	a5 = a3 + a2 * 0x00000004
	a7 = Mem0[a5 + 0x00000028:word32]
	SAR = 0x00000020 - a2
	a4 = a4 << SAR
	a6 = a7 | a6
	Mem0[a5 + 0x00000028:word32] = a6
	Mem0[a3 + 0x00000010:word32] = a4
	a0 = 0x402020C0
	v12 = a0
	a0 = 0x40203B42
	call v12 (retsize: 0;)
	a4 = 11
	a3 = 48
	branch a4 >=u a2 l40203B4C
	// succ:  l40203B49 l40203B4C
l40203B49:
	a3 = 0x00000000
	// succ:  l40203B4C
l40203B4C:
	a4 = 0x40202010
	a2 = a4 + a2 * 0x00000004
	a5 = Mem0[a2 + 0x00000004:word32]
	a4 = 0xFFFFFECF
	a4 = a5 & a4
	a3 = a3 | a4
	// succ:  l40203B5D_thunk_fn40203B60
l40203B5D_thunk_fn40203B60:
	call fn40203B60 (retsize: 0;)
	return
	// succ:  gpio_enable_exit
l40203B79_in_gpio_enable:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  gpio_enable_exit
l40203B79_in_gpio_enable:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  gpio_enable_exit
gpio_enable_exit:


// fn40203B60
// Return size: 0
void fn40203B60()
fn40203B60_entry:
	// succ:  l40203B60
l40203B60:
	a1 = fp
	Mem0[a2 + 0x00000004:word32] = a3
	a4 = Mem0[a2 + 0x00000004:word32]
	a3 = -4
	a3 = a4 & a3
	a4 = 1
	a3 = a3 | a4
	Mem0[a2 + 0x00000004:word32] = a3
	// succ:  l40203B79
l40203B79:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  fn40203B60_exit
fn40203B60_exit:


// get_sdk_default_phy_info
// Return size: 0
void get_sdk_default_phy_info()
get_sdk_default_phy_info_entry:
	// succ:  l40203B84
l40203B84:
	a1 = fp
	a3 = 0x40203B80
	a1 = a1 - 16
	a4 = 0x00000080
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40203130
	v6 = a0
	a0 = 0x40203B95
	call v6 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  get_sdk_default_phy_info_exit
get_sdk_default_phy_info_exit:


// read_saved_phy_info
// Return size: 0
void read_saved_phy_info()
read_saved_phy_info_entry:
	// succ:  l40203B9C
l40203B9C:
	a1 = fp
	a4 = 0x402034B8
	a3 = a2
	a2 = Mem0[a4 + 0x0000000C:word32]
	a4 = Mem0[a4 + 0x00000004:word32]
	a2 = a2 << 30
	a1 = a1 - 16
	a2 = a4 - a2
	a4 = 0x00000080
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x402034C8
	v7 = a0
	a0 = 0x40203BB9
	call v7 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  read_saved_phy_info_exit
read_saved_phy_info_exit:


// hwrand
// Return size: 0
void hwrand()
hwrand_entry:
	// succ:  l40203BC4
l40203BC4:
	a1 = fp
	a2 = 0x40203BC0
	a2 = a2 + 0x00000E00
	a2 = Mem0[a2 + 0x00000044:word32]
	return
	// succ:  hwrand_exit
hwrand_exit:


// dump_excinfo
// Return size: 0
void dump_excinfo()
dump_excinfo_entry:
	// succ:  l40203BF4
l40203BF4:
	a1 = fp
	a1 = a1 - 80
	Mem0[a1 + 0x0000004C:word32] = a0
	Mem0[a1 + 0x00000048:word32] = a12
	Mem0[a1 + 0x00000044:word32] = a13
	Mem0[a1 + 0x00000040:word32] = a14
	Mem0[a1 + 0x0000003C:word32] = a15
	a7 = EXCCAUSE
	a2 = 0x40203BD4
	a3 = a7
	Mem0[a1 + 0x0000002C:word32] = a7
	a0 = 0x402034D0
	v12 = a0
	a0 = 0x40203C15
	call v12 (retsize: 0;)
	a6 = EPC1
	a5 = EPC2
	a15 = EPC3
	a14 = EXCVADDR
	a13 = DEPC
dump_excinfo_exit:


// post_crash_reset
// Return size: 0
void post_crash_reset()
post_crash_reset_entry:
	// succ:  l40203CD0
l40203CD0:
	a1 = fp
	a1 = a1 - 16
	a2 = 0x40202544
	Mem0[a1 + 0x0000000C:word32] = a0
	// succ:  l40203CD9
l40203CD9:
	a3 = Mem0[a2 + 0x0000001C:word32]
	a3 = a3 >>u 0x00000010 & 0x000000FF
	branch a3 != 0x00000000 l40203CD9
	// succ:  l40203CE5 l40203CD9
l40203CE5:
	a2 = 0x40203758
	// succ:  l40203CE8
l40203CE8:
	a3 = Mem0[a2 + 0x0000001C:word32]
	a3 = a3 >>u 0x00000010 & 0x000000FF
	branch a3 != 0x00000000 l40203CE8
	// succ:  l40203CF3 l40203CE8
l40203CF3:
	a0 = 0x40203CCC
	v6 = a0
	a0 = 0x40203CF9
	call v6 (retsize: 0;)
	// succ:  l40243CF9
l40243CF9:
post_crash_reset_exit:


// second_fatal_exception_handler_inner
// Return size: 0
void second_fatal_exception_handler_inner()
second_fatal_exception_handler_inner_entry:
	// succ:  l40203D00
l40203D00:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40203D08
	call fn40303BF4 (retsize: 0;)
	a2 = 0x40203CFC
	a0 = 0x40203D0E
	call puts (retsize: 0;)
	a0 = 0x40203D11
	call fn40303CD0 (retsize: 0;)
	__ill()
second_fatal_exception_handler_inner_exit:


// dump_stack
// Return size: 0
void dump_stack()
dump_stack_entry:
	// succ:  l40203D24
l40203D24:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000000C:word32] = a15
	a15 = a2
	a2 = 0x40203D14
	a3 = a15
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a12
	a0 = 0x402034D0
	v10 = a0
	a0 = 0x40203D40
	call v10 (retsize: 0;)
	a13 = 0x40203D18
	a14 = 0x00000080
	a14 = a15 + a14
	branch a13 < a15 l40203D82
	// succ:  l40203D4B l40203D82
l40203D4B:
	a12 = 0x40203D20
	goto l40203D54
	// succ:  l40203D54
l40203D51:
	branch a13 < a15 l40203D82
	// succ:  l40203D54 l40203D82
l40203D54:
	a4 = Mem0[a15 + 0x00000000:word32]
	a5 = Mem0[a15 + 0x00000004:word32]
	a6 = Mem0[a15 + 0x00000008:word32]
	a7 = Mem0[a15 + 0x0000000C:word32]
	a2 = 0x40203D1C
	a3 = a15 | a15
	a0 = 0x402034D0
	v15 = a0
	a0 = 0x40203D68
	call v15 (retsize: 0;)
	a2 = Mem0[a15 + 0x00000000:word32]
	branch a2 != a12 l40203D7C
	a4 = Mem0[a15 + 0x00000000:word32]
	a5 = Mem0[a15 + 0x00000004:word32]
	a6 = Mem0[a15 + 0x00000008:word32]
	a7 = Mem0[a15 + 0x0000000C:word32]
	a2 = 0x40203D1C
	a3 = a15 | a15
	a0 = 0x402034D0
	v16 = a0
	a0 = 0x40203D68
	call v16 (retsize: 0;)
	a2 = Mem0[a15 + 0x00000000:word32]
	branch a2 != a12 l40203D7C
	// succ:  l40203D6D l40203D7C
l40203D6D:
	a2 = Mem0[a15 + 0x00000004:word32]
	branch a2 != a12 l40203D7C
	a2 = Mem0[a15 + 0x00000004:word32]
	branch a2 != a12 l40203D7C
	// succ:  l40203D72 l40203D7C
l40203D72:
	a2 = Mem0[a15 + 0x00000008:word32]
	branch a2 != a12 l40203D7C
	a2 = Mem0[a15 + 0x00000008:word32]
	branch a2 != a12 l40203D7C
	// succ:  l40203D77 l40203D7C
l40203D77:
	a2 = Mem0[a15 + 0x0000000C:word32]
	branch a2 == a12 l40203D82
	a2 = Mem0[a15 + 0x0000000C:word32]
	branch a2 == a12 l40203D82
	// succ:  l40203D7C l40203D82
l40203D7C:
	a15 = a15 + 16
	branch a15 != a14 l40203D51
	a15 = a15 + 16
	branch a15 != a14 l40203D51
	// succ:  l40203D82 l40203D51
l40203D82:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  dump_stack_exit dump_stack_exit dump_stack_exit
dump_stack_exit:


// dump_registers_in_exception_handler
// Return size: 0
void dump_registers_in_exception_handler()
dump_registers_in_exception_handler_entry:
	// succ:  l40203DA8
l40203DA8:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1:word32] = a2
	a2 = 0x40203D94
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	a0 = 0x40203DBD
	call puts (retsize: 0;)
dump_registers_in_exception_handler_exit:


// fn40203DB0
// Return size: 0
void fn40203DB0()
fn40203DB0_entry:
	// succ:  l40203DB0
l40203DB0:
	a1 = fp
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	a0 = 0x40203DBD
	call puts (retsize: 0;)
fn40203DB0_exit:


// dump_heapinfo
// Return size: 0
void dump_heapinfo()
dump_heapinfo_entry:
	// succ:  l40203E50
l40203E50:
	a1 = fp
	a1 = a1 - 80
	a2 = a1
	Mem0[a1 + 0x0000004C:word32] = a0
	Mem0[a1 + 0x00000048:word32] = a12
	Mem0[a1 + 0x00000044:word32] = a13
	Mem0[a1 + 0x0000003C:word32] = a15
	Mem0[a1 + 0x00000040:word32] = a14
	a0 = 0x40203E66
	call mallinfo (retsize: 0;)
	a2 = 0
	a13 = Mem0[a1 + 0x00000020:word32]
	a0 = 0x40203E6E
	call sbrk (retsize: 0;)
	a15 = a2
	a2 = 0x4020309C
	a12 = Mem0[a2 + 0x00000000:word32]
	branch a12 != 0x00000000 l40203E79
	// succ:  l40203E77 l40203E79
l40203E77:
	a12 = a1
	// succ:  l40203E79
l40203E79:
	a14 = a12 - a15
	a2 = 0x40203E40
	a3 = a14 + a13
	a0 = 0x402034D0
	v10 = a0
	a0 = 0x40203E88
	call v10 (retsize: 0;)
	a3 = 0x40203E48
	a2 = 0x40203E44
	a4 = a15
	a5 = a12
	a6 = a14
	a0 = 0x402034D0
	v14 = a0
	a0 = 0x40203E9A
	call v14 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a5 = Mem0[a1 + 0x0000001C:word32]
	a2 = 0x40203E4C
	a4 = a13
	a0 = 0x402034D0
	v15 = a0
	a0 = 0x40203EA9
	call v15 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000004C:word32]
	a12 = Mem0[a1 + 0x00000048:word32]
	a13 = Mem0[a1 + 0x00000044:word32]
	a14 = Mem0[a1 + 0x00000040:word32]
	a15 = Mem0[a1 + 0x0000003C:word32]
	a1 = a1 + 80
	return
	// succ:  dump_heapinfo_exit
dump_heapinfo_exit:


// fn40203EA8
// Return size: 0
void fn40203EA8()
fn40203EA8_entry:
	// succ:  l40203EA8
l40203EA8:
	a1 = fp
	a0 = a0 >> 2
	__reserved()
	a1 = a2 + 0x00002100
	a1 = 0x401CC63C
fn40203EA8_exit:


// standard_fatal_exception_handler_inner
// Return size: 0
void standard_fatal_exception_handler_inner()
standard_fatal_exception_handler_inner_entry:
	// succ:  l40203EC4
l40203EC4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a4 = 0x40203EC0
	a12 = a2 | a2
	a2 = 0x40203EBC
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	a13 = a3 & 0x000000FF
	Mem0[a2:word32] = a4
	a0 = 0x40203EDF
	call fn40303BF4 (retsize: 0;)
	branch a12 == 0x00000000 l40203EED
	// succ:  l40203EE1 l40203EED
l40203EE1:
	branch a13 == 0x00000000 l40203EE8
	// succ:  l40203EE3 l40203EE8
l40203EE3:
	a2 = a12
	a0 = 0x40203EE8
	call fn40303DA8 (retsize: 0;)
	// succ:  l40203EE8
l40203EE8:
	a2 = a12
	a0 = 0x40203EED
	call fn40303D24 (retsize: 0;)
	// succ:  l40203EED
l40203EED:
	a0 = 0x40203EF0
	call fn40303E50 (retsize: 0;)
	a0 = 0x40203EF3
	call fn40303CD0 (retsize: 0;)
standard_fatal_exception_handler_inner_exit:


// abort_handler_inner
// Return size: 0
void abort_handler_inner()
abort_handler_inner_entry:
	// succ:  l40203EF8
l40203EF8:
	a1 = fp
	a1 = a1 - 16
	a4 = a2 | a2
	a2 = 0x40203EF4
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a3
	a3 = a4
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x402034D0
	v8 = a0
	a0 = 0x40203F0F
	call v8 (retsize: 0;)
	a2 = a12
	a0 = 0x40203F14
	call fn40303D24 (retsize: 0;)
	a0 = 0x40203F17
	call fn40303E50 (retsize: 0;)
	a0 = 0x40203F1A
	call fn40303CD0 (retsize: 0;)
	a0 = a0 & 0x000000FF
	a8 = Mem0[a14 + 0x0000003C:word32]
	__reserved()
	// succ:  l40203F22_in_abort_handler_inner
l40203F22_in_abort_handler_inner:
	Mem0[a3:word32] = a2
	return
	// succ:  abort_handler_inner_exit
abort_handler_inner_exit:


// sdk_ets_update_cpu_frequency
// Return size: 0
void sdk_ets_update_cpu_frequency()
sdk_ets_update_cpu_frequency_entry:
	// succ:  l40203F20
l40203F20:
	a1 = fp
	a3 = 0x40203F1C
	// succ:  l40203F22
l40203F22:
	Mem0[a3:word32] = a2
	return
	// succ:  sdk_ets_update_cpu_frequency_exit
sdk_ets_update_cpu_frequency_exit:


// sdk_ets_delay_us
// Return size: 0
void sdk_ets_delay_us()
sdk_ets_delay_us_entry:
	// succ:  l40203F28
l40203F28:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	a12 = a2 & 0x0000FFFF
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40203F3A
sdk_ets_delay_us_exit:


// fn40203F5C
// Return size: 0
void fn40203F5C()
fn40203F5C_entry:
	// succ:  l40203F5C
l40203F5C:
	a1 = fp
	__reserved()
	__reserved()
	// succ:  l40203F62_in_fn40203F5C
l40203F62_in_fn40203F5C:
	Mem0[a3:word32] = a2
	return
	// succ:  fn40203F5C_exit
fn40203F5C_exit:


// sdk_os_install_putc1
// Return size: 0
void sdk_os_install_putc1()
sdk_os_install_putc1_entry:
	// succ:  l40203F60
l40203F60:
	a1 = fp
	a3 = 0x40203F5C
	// succ:  l40203F62
l40203F62:
	Mem0[a3:word32] = a2
	return
	// succ:  sdk_os_install_putc1_exit
sdk_os_install_putc1_exit:


// sdk_gpio_output_set
// Return size: 0
void sdk_gpio_output_set()
sdk_gpio_output_set_entry:
	// succ:  l40203F68
l40203F68:
	a1 = fp
	a6 = 0x40202110
	Mem0[a6 + 0x00000004:word32] = a2
	Mem0[a6 + 0x00000008:word32] = a3
	Mem0[a6 + 0x00000010:word32] = a4
	Mem0[a6 + 0x00000014:word32] = a5
	return
	// succ:  sdk_gpio_output_set_exit
sdk_gpio_output_set_exit:


// sdk_rtc_get_reset_reason
// Return size: 0
void sdk_rtc_get_reset_reason()
sdk_rtc_get_reset_reason_entry:
	// succ:  l40203F88
l40203F88:
	a1 = fp
	a3 = 0x40202164
	a2 = Mem0[a3 + 0x00000014:word32]
	a2 = a2 & 0x0000000F
	branch a2 != 5 l40203FB8
	// succ:  l40203F96 l40203FB8
l40203F96:
	a4 = Mem0[a3 + 0x00000018:word32]
	a4 = a4 >>u 0x00000008 & 0x0000003F
	branch a4 == 1 l40203FB6
	// succ:  l40203FA1 l40203FB6
l40203FA1:
	a5 = Mem0[a3 + 0x00000018:word32]
	a4 = 0
	a5 = a5 >>u 0x00000008 & 0x0000003F
	a5 = a5 - 8
	branch a5 == 0x00000000 l40203FB1
	// succ:  l40203FAE_1 l40203FB1
l40203FAE_1:
	a2 = a4
	// succ:  l40203FB1
l40203FB1:
	goto l40203FB8
	// succ:  l40203FB8
l40203FB6:
	a2 = 6
	// succ:  l40203FB8
l40203FB8:
	a5 = Mem0[a3 + 0x00000008:word32]
	a4 = 0x40203F84
	a4 = a5 & a4
	Mem0[a3 + 0x00000008:word32] = a4
	return
	// succ:  sdk_rtc_get_reset_reason_exit
sdk_rtc_get_reset_reason_exit:


// _check_boot_version
// Return size: 0
void _check_boot_version()
_check_boot_version_entry:
	// succ:  l40203FD0
l40203FD0:
	a1 = fp
	a2 = 0x402035F0
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a2 = a2 + 0x00000100
	v5 = Mem0[a2 + 0x000000D9:byte]
	a2 = (uint32) v5
	a2 = a2 & 0x0000001F
	a3 = a2 - 31
	branch a3 == 0x00000000 l40203FF0
	// succ:  l40203FE6 l40203FF0
l40203FE6:
	branch a2 <u 0x00000003 l40203FF0
	// succ:  l40203FE9 l40203FF0
l40203FE9:
	a2 = 1
	goto l40203FF9
	// succ:  l40203FF9
l40203FF0:
	a2 = 0x40203FCC
	a0 = 0x40203FF6
	call puts (retsize: 0;)
	a2 = 0x00000000
	// succ:  l40203FF9
l40203FF9:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  _check_boot_version_exit
_check_boot_version_exit:


// sdk_system_pp_recycle_rx_pkt
// Return size: 0
void sdk_system_pp_recycle_rx_pkt()
sdk_system_pp_recycle_rx_pkt_entry:
	// succ:  l40204004
l40204004:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4020400C
	call sdk_ppRecycleRxPkt (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_system_pp_recycle_rx_pkt_exit
sdk_system_pp_recycle_rx_pkt_exit:


// sdk_system_restart
// Return size: 0
void sdk_system_restart()
sdk_system_restart_entry:
	// succ:  l40204018
l40204018:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40204020
	call sdk_wifi_get_opmode (retsize: 0;)
	branch a2 == 2 l40204029
	// succ:  l40204023 l40204029
l40204023:
	a1 = a1 | a1
	a0 = 0x40204029
	call sdk_wifi_station_stop (retsize: 0;)
	// succ:  l40204029
l40204029:
	a0 = 0x4020402C
	call sdk_wifi_get_opmode (retsize: 0;)
	branch a2 == 1 l40204032
	// succ:  l4020402F l40204032
l4020402F:
	a0 = 0x40204032
	call sdk_wifi_softap_stop (retsize: 0;)
	// succ:  l40204032
l40204032:
	a2 = 6
	a0 = 0x40204037
	call fn403029B4 (retsize: 0;)
	a3 = 0x40202010
	a4 = 0x00000080
	a5 = Mem0[a3 + 0x00000004:word32]
	a2 = 0x40203CCC
	a4 = a5 | a4
	Mem0[a3 + 0x00000004:word32] = a4
	a0 = 0x40204050
	call sdk_wDev_MacTim1SetFunc (retsize: 0;)
	a2 = 3
	a0 = 0x40204014
	v8 = a0
	a0 = 0x40204058
	call v8 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_system_restart_exit
sdk_system_restart_exit:


// sdk_system_get_boot_version
// Return size: 0
void sdk_system_get_boot_version()
sdk_system_get_boot_version_entry:
	// succ:  l40204060
l40204060:
	a1 = fp
	a2 = 0x402035F0
	a2 = a2 + 0x00000100
	v4 = Mem0[a2 + 0x000000D9:byte]
	a2 = (uint32) v4
	a2 = a2 & 0x0000001F
	return
	// succ:  sdk_system_get_boot_version_exit
sdk_system_get_boot_version_exit:


// sdk_system_get_test_result
// Return size: 0
void sdk_system_get_test_result()
sdk_system_get_test_result_entry:
	// succ:  l40204070
l40204070:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40204078
	call fn40303FD0 (retsize: 0;)
	branch a2 == 0x00000000 l40204089
	// succ:  l4020407A l40204089
l4020407A:
	a2 = 0x402035F0
	a2 = a2 + 0x00000100
	v5 = Mem0[a2 + 0x000000D9:byte]
	a2 = (uint32) v5
	a2 = a2 >>u 0x00000005 & 0x00000001
	goto l4020408B
	// succ:  l4020408B
l40204089:
	a2 = -1
	// succ:  l4020408B
l4020408B:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_system_get_test_result_exit
sdk_system_get_test_result_exit:


// sdk_system_upgrade_userbin_check
// Return size: 0
void sdk_system_upgrade_userbin_check()
sdk_system_upgrade_userbin_check_entry:
	// succ:  l40204094
l40204094:
	a1 = fp
	a2 = 0x402035F0
	a2 = a2 + 0x00000100
	v5 = Mem0[a2 + 0x000000D9:byte]
	a3 = (uint32) v5
	a3 = a3 & 0x0000001F
	branch a3 == 2 l402040C0
	// succ:  l402040A3 l402040C0
l402040A3:
	a3 = a3 - 31
	branch a3 == 0x00000000 l402040C0
	// succ:  l402040A8 l402040C0
l402040A8:
	v6 = Mem0[a2 + 0x000000D8:byte]
	a2 = (uint32) v6
	a3 = 1
	a5 = a2 >>u 0x00000002 & 0x00000001
	a4 = a2 & 0x00000003
	a3 = a5 ^ a3
	a2 = a5
	a4 = a4 - 1
	branch a4 == 0x00000000 l402040BD
	// succ:  l402040BA_1 l402040BD
l402040BA_1:
	a2 = a3
	// succ:  l402040BD
l402040BD:
	return
	// succ:  sdk_system_upgrade_userbin_check_exit
l402040C0:
	v9 = Mem0[a2 + 0x000000D8:byte]
	a4 = (uint32) v9
	a3 = 1
	a4 = a4 & 0x0000000F
	a4 = a4 - 1
	a2 = 0
	branch a4 != 0x00000000 l402040CF
	// succ:  l402040CC_1 l402040CF
l402040CC_1:
	a2 = a3
	// succ:  l402040CF
l402040CF:
	a2 = a2 & 0x000000FF
	return
	// succ:  sdk_system_upgrade_userbin_check_exit
sdk_system_upgrade_userbin_check_exit:


// sdk_system_get_userbin_addr
// Return size: 0
void sdk_system_get_userbin_addr()
sdk_system_get_userbin_addr_entry:
	// succ:  l402040E0
l402040E0:
	a1 = fp
	a3 = 0x402035F0
	a1 = a1 - 32
	Mem0[a1 + 0x0000001C:word32] = a0
	a3 = a3 + 0x00000100
	v6 = Mem0[a3 + 0x000000D9:byte]
	a2 = (uint32) v6
	a2 = a2 << 8
	branch a2 < 0x00000000 l4020412D
	// succ:  l402040F4 l4020412D
l402040F4:
	v7 = Mem0[a3 + 0x000000D8:byte]
	a2 = (uint32) v7
	branch (a2 & 0x00000004) == 0x00000000 l40204114
	// succ:  l402040FA l40204114
l402040FA:
	v9 = Mem0[a3 + 0x000000DE:byte]
	a5 = (uint32) v9
	v11 = Mem0[a3 + 0x000000DF:byte]
	a4 = (uint32) v11
	v12 = Mem0[a3 + 0x000000DD:byte]
	a2 = (uint32) v12
	a5 = a5 << 24
	a4 = a4 << 16
	a3 = a5 | a4
	a3 = a3 | a2
	goto l4020415D
	// succ:  l4020415D
l40204114:
	v15 = Mem0[a3 + 0x000000DB:byte]
	a5 = (uint32) v15
	v16 = Mem0[a3 + 0x000000DC:byte]
	a4 = (uint32) v16
	v17 = Mem0[a3 + 0x000000DA:byte]
	a2 = (uint32) v17
	a5 = a5 << 24
	a4 = a4 << 16
	a3 = a5 | a4
	a3 = a3 | a2
	goto l4020415D
	// succ:  l4020415D
l4020412D:
	a0 = 0x40204130
	call fn40304094 (retsize: 0;)
	a3 = 0x402040DC
	branch a2 == 0x00000000 l4020415D
	// succ:  l40204136 l4020415D
l40204136:
	a3 = a1 | a1
	a4 = 0x00000008
	a2 = 0
	a0 = 0x402034C8
	v13 = a0
	a0 = 0x40204144
	call v13 (retsize: 0;)
	v14 = Mem0[a1 + 0x00000003:byte]
	a2 = (uint32) v14
	a3 = 0x402040D4
	a2 = a2 >>u 4
	a4 = a2 - 2
	branch a4 <u 0x00000003 l4020415D
	// succ:  l40204153 l4020415D
l40204153:
	a4 = 0x402040D8
	a3 = 0
	a2 = a2 - 1
	branch a2 != 0x00000000 l4020415D
	// succ:  l4020415A_1 l4020415D
l4020415A_1:
	a3 = a4
	// succ:  l4020415D
l4020415D:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a2 = a3
	a1 = a1 + 32
	return
	// succ:  sdk_system_get_userbin_addr_exit
sdk_system_get_userbin_addr_exit:


// sdk_system_update_cpu_freq
// Return size: 0
void sdk_system_update_cpu_freq()
sdk_system_update_cpu_freq_entry:
	// succ:  l40204168
l40204168:
	a1 = fp
	a1 = a1 - 16
	a3 = a2 & 0x000000FF
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	a2 = 0x00000050
	branch a3 != a2 l40204198
	// succ:  l4020417A l40204198
l4020417A:
	a4 = 0x402036AC
	a2 = a3
	a5 = Mem0[a4 + 0x00000014:word32]
	a3 = -2
	a3 = a5 & a3
	Mem0[a4 + 0x00000014:word32] = a3
	a0 = 0x40204191
	call fn40303F20 (retsize: 0;)
	a2 = 1
	goto l402041BC
	// succ:  l402041BC
l40204198:
	a4 = 0x000000A0
	a2 = 0x00000000
	branch a3 != a4 l402041BC
	// succ:  l402041A1 l402041BC
l402041A1:
	a4 = 0x402036AC
	a12 = 0x00000001
	a5 = Mem0[a4 + 0x00000014:word32]
	a2 = a3
	a3 = a5 | a12
	Mem0[a4 + 0x00000014:word32] = a3
	a0 = 0x402041BA
	call fn40303F20 (retsize: 0;)
	a2 = a12
	// succ:  l402041BC
l402041BC:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_system_update_cpu_freq_exit
sdk_system_update_cpu_freq_exit:


// sdk_system_get_cpu_freq
// Return size: 0
void sdk_system_get_cpu_freq()
sdk_system_get_cpu_freq_entry:
	// succ:  l402041CC
l402041CC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x402041C8
	v4 = a0
	a0 = 0x402041D8
	call v4 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a2 & 0x000000FF
	a1 = a1 + 16
	return
	// succ:  sdk_system_get_cpu_freq_exit
sdk_system_get_cpu_freq_exit:


// sdk_system_overclock
// Return size: 0
void sdk_system_overclock()
sdk_system_overclock_entry:
	// succ:  l402041E8
l402041E8:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x402041C8
	v4 = a0
	a0 = 0x402041F3
	call v4 (retsize: 0;)
	a4 = a2 & 0x000000FF
	a3 = 80
	a2 = 0x00000000
	branch a4 != a3 l4020420E
	// succ:  l402041FE l4020420E
l402041FE:
	a3 = 0x402041E4
	a4 = 1
	a2 = 0x000000A0
	Mem0[a3:byte] = a4
	a0 = 0x4020420C
	call fn40304168 (retsize: 0;)
	a2 = 1
	// succ:  l4020420E
l4020420E:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_system_overclock_exit
sdk_system_overclock_exit:


// sdk_system_restoreclock
// Return size: 0
void sdk_system_restoreclock()
sdk_system_restoreclock_entry:
	// succ:  l40204218
l40204218:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x402041C8
	v4 = a0
	a0 = 0x40204223
	call v4 (retsize: 0;)
	a2 = a2 & 0x000000FF
	a4 = 0x000000A0
	a3 = 0x00000000
	branch a2 != a4 l40204242
	goto l4020422F
	// succ:  l4020422F l4020422C_thunk_fn40204239
l4020422C_thunk_fn40204239:
	call fn40204239 (retsize: 0;)
	return
	// succ:  sdk_system_restoreclock_exit
l4020422F:
	a4 = 0x402041E4
	// succ:  l4020422F_thunk_fn40204231
l4020422F_thunk_fn40204231:
	call fn40204231 (retsize: 0;)
	return
	// succ:  sdk_system_restoreclock_exit
sdk_system_restoreclock_exit:


// fn4020421C
// Return size: 0
void fn4020421C()
fn4020421C_entry:
	// succ:  l4020421C
l4020421C:
	a1 = fp
	a3 = 0x401FEA20
	__reserved()
	a2 = a0 | a0
	__reserved()
	a3 = a10 + a2 * 0x00000004
	__reserved()
	Mem0[a1 + 0x000000ED:byte] = a1
	// succ:  l4020422E_thunk_fn40204231
l4020422E_thunk_fn40204231:
	call fn40204231 (retsize: 0;)
	return
	// succ:  fn4020421C_exit
fn4020421C_exit:


// fn40204231
// Return size: 0
void fn40204231()
fn40204231_entry:
	// succ:  l40204231
l40204231:
	a1 = fp
	__reserved()
	b3 = b7 & !b0
	Mem0[a12 + 0x00000014:word32] = a0
	goto l40204237_thunk_fn40204239
	// succ:  l40204237_thunk_fn40204239
l40204231:
	v9 = Mem0[a4 + 0x00000000:byte]
	a2 = (uint32) v9
	branch a2 == a3 l40204242
	goto l40204238
	// succ:  l40204238 l40204234_thunk_fn40204239
l40204234_thunk_fn40204239:
	call fn40204239 (retsize: 0;)
	return
	// succ:  fn40204231_exit
l40204237_thunk_fn40204239:
	call fn40204239 (retsize: 0;)
	return
	// succ:  fn40204231_exit
l40204238:
	a2 = 80
	// succ:  l40204238_thunk_fn40204239
l40204238_thunk_fn40204239:
	call fn40204239 (retsize: 0;)
	return
	// succ:  fn40204231_exit
fn40204231_exit:


// fn40204239
// Return size: 0
void fn40204239()
fn40204239_entry:
	// succ:  l40204239
l40204239:
	a1 = fp
	__reserved()
	a8 = a5 % a0
	__reserved()
	goto l40204242_in_fn40204239
	// succ:  l40204242_in_fn40204239
l40204239:
	Mem0[a4:byte] = a3
	a0 = 0x40204240
	call fn40304168 (retsize: 0;)
	a3 = 1
	// succ:  l40204242
l40204242:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a3
	a1 = a1 + 16
	return
	// succ:  fn40204239_exit
l40204242_in_fn40204239:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a3
	a1 = a1 + 16
	return
	// succ:  fn40204239_exit
fn40204239_exit:


// sdk_system_station_got_ip_set
// Return size: 0
void sdk_system_station_got_ip_set()
sdk_system_station_got_ip_set_entry:
	// succ:  l40204254
l40204254:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = 0x402035F0
	Mem0[a1 + 0x0000002C:word32] = a0
	a5 = Mem0[a12 + 0x00000010:word32]
	a6 = 5
	Mem0[a5 + 0x000000BA:byte] = a6
	v8 = Mem0[a3 + 0x00000001:byte]
	a7 = (uint32) v8
	v11 = Mem0[a2 + 0x00000001:byte]
	a8 = (uint32) v11
	v13 = Mem0[a2 + 0x00000002:byte]
	a5 = (uint32) v13
	v14 = Mem0[a2 + 0x00000003:byte]
	a6 = (uint32) v14
	Mem0[a1:word32] = a7
	v15 = Mem0[a3 + 0x00000002:byte]
	a7 = (uint32) v15
	Mem0[a1 + 0x00000004:word32] = a7
	v17 = Mem0[a3 + 0x00000003:byte]
	a9 = (uint32) v17
	v18 = Mem0[a4 + 0x00000000:byte]
	a7 = (uint32) v18
	Mem0[a1 + 0x00000008:word32] = a9
	Mem0[a1 + 0x0000000C:word32] = a7
	v20 = Mem0[a4 + 0x00000001:byte]
	a7 = (uint32) v20
	Mem0[a1 + 0x00000010:word32] = a7
	v21 = Mem0[a4 + 0x00000002:byte]
	a7 = (uint32) v21
	v22 = Mem0[a2 + 0x00000000:byte]
	a9 = (uint32) v22
	Mem0[a1 + 0x00000014:word32] = a7
	v23 = Mem0[a4 + 0x00000003:byte]
	a2 = (uint32) v23
	v24 = Mem0[a3 + 0x00000000:byte]
	a7 = (uint32) v24
	Mem0[a1 + 0x00000018:word32] = a2
	a2 = 0x4020424C
	a3 = a9
	a4 = a8
	a0 = 0x402034D0
	v25 = a0
	a0 = 0x402042A5
	call v25 (retsize: 0;)
	a2 = 10
	a0 = 0x402042AA
	call putchar (retsize: 0;)
	v26 = Mem0[a12 + 0x000001E0:uint16]
	a3 = (uint32) v26
	a2 = 0x00000101
	branch a3 != a2 l402042D0
	// succ:  l402042B3 l402042D0
l402042B3:
	a2 = 0x40204250
	a12 = a12 + 0x00000100
	a0 = 0x402042BC
	call sdk_os_timer_disarm (retsize: 0;)
	v27 = Mem0[a12 + 0x000000E2:byte]
	a2 = (uint32) v27
	a4 = 1
	SAR = 0x00000020 - a2
	a4 = a4 << SAR
	a2 = 0
	a3 = a4
	a5 = a2
	a0 = 0x402042D0
	call fn40303F68 (retsize: 0;)
	// succ:  l402042D0
l402042D0:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_system_station_got_ip_set_exit
sdk_system_station_got_ip_set_exit:


// sdk_os_timer_setfn
// Return size: 0
void sdk_os_timer_setfn()
sdk_os_timer_setfn_entry:
	// succ:  l402042E8
l402042E8:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000020:word32] = a14
	a14 = 0x402042DC
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = Mem0[a14 + 0x00000000:word32]
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x0000002C:word32] = a0
	a13 = a2
	a7 = a3
	a15 = a4
	branch a12 == 0x00000000 l40204354
	// succ:  l40204303 l40204354
l40204303:
	a5 = Mem0[a12 + 0x00000004:word32]
	branch a5 != a13 l4020434A
	// succ:  l40204308 l4020434A
l40204308:
	a2 = Mem0[a13 + 0x00000018:word32]
	branch a2 != a15 l40204312
	// succ:  l4020430D l40204312
l4020430D:
	a2 = Mem0[a13 + 0x00000010:word32]
	branch a2 == a7 l40204375
	// succ:  l40204312 l40204375
l40204312:
	a2 = Mem0[a13 + 0x00000004:word32]
	branch a2 == 0x00000000 l4020433D
	// succ:  l40204318 l4020433D
l40204318:
	a4 = 0
	a3 = 3
	a5 = a4
	a6 = 50
	Mem0[a1:word32] = a7
	a0 = 0x40204325
	call fn40302DF8 (retsize: 0;)
	a7 = Mem0[a1 + 0x00000000:word32]
	branch a2 != 0x00000000 l40204332
	// succ:  l4020432A l40204332
l4020432A:
	a2 = 0x402042E0
	a0 = 0x40204330
	call puts (retsize: 0;)
	a7 = Mem0[a1 + 0x00000000:word32]
	// succ:  l40204332
l40204332:
	a2 = 0x402042E4
	v15 = Mem0[a2 + 0x00000000:byte]
	a3 = (uint32) v15
	a3 = a3 - 1
	Mem0[a2:byte] = a3
	// succ:  l4020433D
l4020433D:
	a2 = 0
	Mem0[a13 + 0x00000010:word32] = a7
	Mem0[a13 + 0x00000018:word32] = a15
	Mem0[a13 + 0x00000004:word32] = a2
	Mem0[a13 + 0x0000000C:word32] = a2
	goto l40204375
	// succ:  l40204375
l4020434A:
	a5 = Mem0[a12 + 0x00000000:word32]
	branch a5 == 0x00000000 l40204354
	// succ:  l4020434E l40204354
l4020434E:
	a12 = a5
	goto l40244303
	// succ:  l40244303
l40204354:
	a4 = 0
	Mem0[a13 + 0x00000004:word32] = a4
	Mem0[a13 + 0x0000000C:word32] = a4
	Mem0[a13 + 0x00000010:word32] = a7
	Mem0[a13 + 0x00000018:word32] = a15
	a2 = 8
	Mem0[a1:word32] = a4
	a0 = 0x40202674
	v14 = a0
	a0 = 0x40204368
	call v14 (retsize: 0;)
	a3 = Mem0[a14 + 0x00000000:word32]
	a4 = Mem0[a1 + 0x00000000:word32]
	Mem0[a2 + 0x00000004:word32] = a13
	Mem0[a2:word32] = a4
	branch a3 == 0x00000000 l40204373
	// succ:  l40204370_1 l40204373
l40204370_1:
	a14 = a12
	// succ:  l40204373
l40204373:
	Mem0[a14:word32] = a2
	// succ:  l40204375
l40204375:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_os_timer_setfn_exit
l40244303:
sdk_os_timer_setfn_exit:


// sdk_os_timer_arm
// Return size: 0
void sdk_os_timer_arm()
sdk_os_timer_arm_entry:
	// succ:  l4020438C
l4020438C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a13
	a13 = Mem0[a2 + 0x00000004:word32]
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a15
	Mem0[a1 + 0x0000001C:word32] = a0
	a12 = a2
	a15 = a3
	a14 = a4 & 0x000000FF
	branch a13 != 0x00000000 l402043D5
	// succ:  l402043A4 l402043D5
l402043A4:
	Mem0[a2 + 0x00000014:byte] = a14
	Mem0[a12 + 0x0000000C:word32] = a3
	a2 = a3
	a3 = 10
	a0 = 0x40204388
	v11 = a0
	a0 = 0x402043B3
	call v11 (retsize: 0;)
	a5 = Mem0[a12 + 0x00000018:word32]
	a6 = Mem0[a12 + 0x00000010:word32]
	a3 = a2
	a4 = a14
	a2 = a13
	a0 = 0x402043C0
	call fn40302DA0 (retsize: 0;)
	a3 = 0x402042E4
	Mem0[a12 + 0x00000004:word32] = a2
	v14 = Mem0[a3 + 0x00000000:byte]
	a4 = (uint32) v14
	a13 = a2 | a2
	a2 = a4 + 1
	Mem0[a3:byte] = a2
	branch a13 == 0x00000000 l4020441D
	// succ:  l402043D5 l4020441D
l402043D5:
	v15 = Mem0[a12 + 0x00000014:byte]
	a2 = (uint32) v15
	branch a2 == a14 l402043E1
	// succ:  l402043DB l402043E1
l402043DB:
	Mem0[a12 + 0x00000014:byte] = a14
	Mem0[a13 + 0x0000001C:word32] = a14
	// succ:  l402043E1
l402043E1:
	a2 = Mem0[a12 + 0x0000000C:word32]
	branch a2 == a15 l40204404
	// succ:  l402043E7 l40204404
l402043E7:
	a3 = 0x0000000A
	Mem0[a12 + 0x0000000C:word32] = a15
	a2 = a15
	a0 = 0x40204388
	v16 = a0
	a0 = 0x402043F5
	call v16 (retsize: 0;)
	a4 = a2
	a3 = 2
	a2 = a13
	a5 = 0
	a6 = 10
	a0 = 0x40204402
	call fn40302DF8 (retsize: 0;)
	a13 = Mem0[a12 + 0x00000004:word32]
	// succ:  l40204404
l40204404:
	a0 = 0x40204407
	call fn40302980 (retsize: 0;)
	a3 = 0x00000000
	a4 = a2
	a5 = a3
	a2 = a13
	a6 = 50
	a0 = 0x40204415
	call fn40302DF8 (retsize: 0;)
	branch a2 != 0x00000000 l4020441D
	// succ:  l40204417 l4020441D
l40204417:
	a2 = 0x40204384
	a0 = 0x4020441D
	call puts (retsize: 0;)
	// succ:  l4020441D
l4020441D:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_os_timer_arm_exit
sdk_os_timer_arm_exit:


// sdk_os_timer_disarm
// Return size: 0
void sdk_os_timer_disarm()
sdk_os_timer_disarm_entry:
	// succ:  l40204430
l40204430:
	a1 = fp
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000004:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a2 == 0x00000000 l4020444C
	// succ:  l40204439 l4020444C
l40204439:
	a4 = 0
	a3 = 1
	a5 = a4
	a6 = 50
	a0 = 0x40204444
	call fn40302DF8 (retsize: 0;)
	branch a2 != 0x00000000 l4020444C
	// succ:  l40204446 l4020444C
l40204446:
	a2 = 0x4020442C
	a0 = 0x4020444C
	call puts (retsize: 0;)
	// succ:  l4020444C
l4020444C:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_os_timer_disarm_exit
sdk_os_timer_disarm_exit:


// fn40204664
// Return size: 0
void fn40204664()
fn40204664_entry:
	// succ:  l40204664
l40204664:
	a1 = fp
	a3 = a3 << 31
	a3 = a3 >>u 1
	branch a3 == 0x00000000 l40204681
	goto l4020466C
	// succ:  l4020466C l40204681
l40204664:
l4020466C:
	a10 = __nsau(a3)
	a10 = a10 - 8
	SAR = 0x00000020 - a10
	a3 = a3 << SAR
	a9 = 1
	a9 = a9 - a10
	// succ:  l4020467D_thunk_fn402046F5
l4020467D_thunk_fn402046F5:
	call fn402046F5 (retsize: 0;)
	return
	// succ:  fn40204664_exit
l40204681:
	a4 = a2 << 31
	a4 = a4 >>u 1
	a2 = a7 >>u 0x0000001F & 0x00000001
	a2 = a2 << 1
	a2 = a2 | a6
	branch a4 != 0x00000000 l40204698
	// succ:  l40204692 l40204698
l40204692:
	a4 = 0x40204454
	a2 = a2 | a4
	// succ:  l40204698
l40204698:
	return
	// succ:  fn40204664_exit
fn40204664_exit:


// fn4020469C
// Return size: 0
void fn4020469C()
fn4020469C_entry:
	// succ:  l4020469C
l4020469C:
	a1 = fp
	a2 = a2 << 31
	a2 = a2 >>u 1
	branch a2 == 0x00000000 l402046B8
	goto l402046A4
	// succ:  l402046A4 l402046B8
l4020469C:
l402046A4:
	a10 = __nsau(a2)
	a10 = a10 - 8
	SAR = 0x00000020 - a10
	a2 = a2 << SAR
	a8 = 1
	a8 = a8 - a10
	// succ:  l402046B5_thunk_fn402046F8
l402046B5_thunk_fn402046F8:
	call fn402046F8 (retsize: 0;)
	return
	// succ:  fn4020469C_exit
l402046B8:
	a2 = a7 >>u 0x0000001F & 0x00000001
	a2 = a2 << 1
	return
	// succ:  fn4020469C_exit
fn4020469C_exit:


// fn402046C0
// Return size: 0
void fn402046C0()
fn402046C0_entry:
	// succ:  l402046C0
l402046C0:
	a1 = fp
	a7 = a3 >>u 0x0000001F & 0x00000001
	a7 = a7 << 1
	a2 = a2 ^ a7
	branch (~a3 & a6) != 0x00000000 l402046D2
	goto l402046CC
	// succ:  l402046CC l402046D2
l402046C0:
l402046CC:
	a4 = 0x40204454
	a2 = a2 | a4
	// succ:  l402046D2
l402046D2:
	return
	// succ:  fn402046C0_exit
fn402046C0_exit:


// __divsf3
// Return size: 0
void __divsf3()
__divsf3_entry:
	goto l402046E0
	// succ:  l402046E0
l402046B8_in___divsf3:
	a2 = a7 >>u 0x0000001F & 0x00000001
	a2 = a2 << 1
	return
	// succ:  __divsf3_exit
l402046D4:
	a8 = a3 << 23
	branch a8 == 0x00000000 l402046B8_in___divsf3
	// succ:  l402046DA l402046B8_in___divsf3
l402046DA:
	a2 = a3
	return
	// succ:  __divsf3_exit
l402046E0:
	a1 = fp
	a6 = 0x40204458
	a7 = a2 ^ a3
	branch (~a2 & a6) == 0x00000000 l402046E6_thunk_fn402046C0
	goto l402046E9
	// succ:  l402046E9 l402046E6_thunk_fn402046C0
l402046E6_thunk_fn402046C0:
	call fn402046C0 (retsize: 0;)
	return
	// succ:  __divsf3_exit
l402046E9:
	branch (~a3 & a6) == 0x00000000 l402046D4
	// succ:  l402046EC l402046D4
l402046EC:
	a8 = a2 >>u 0x00000017 & 0x000000FF
	a9 = a3 >>u 0x00000017 & 0x000000FF
	branch a9 == 0x00000000 l402046F2_thunk_fn40204664
	goto l402046F2_thunk_fn402046F5
	// succ:  l402046F2_thunk_fn402046F5 l402046F2_thunk_fn40204664
l402046F2_thunk_fn40204664:
	call fn40204664 (retsize: 0;)
	return
	// succ:  __divsf3_exit
l402046F2_thunk_fn402046F5:
	call fn402046F5 (retsize: 0;)
	return
	// succ:  __divsf3_exit l402046F2_thunk_fn402046F5
l402046F2_thunk_fn402046F5:
	call fn402046F5 (retsize: 0;)
	return
	// succ:  __divsf3_exit
__divsf3_exit:


// fn402046F5
// Return size: 0
void fn402046F5()
fn402046F5_entry:
	// succ:  l402046F5
l402046F5:
	a1 = fp
	branch a8 == 0x00000000 l402046F5_thunk_fn4020469C
	goto l402046F5_thunk_fn402046F8
	// succ:  l402046F5_thunk_fn402046F8 l402046F5_thunk_fn4020469C
l402046F5:
l402046F5_thunk_fn4020469C:
	call fn4020469C (retsize: 0;)
	return
	// succ:  fn402046F5_exit
l402046F5_thunk_fn402046F8:
	call fn402046F8 (retsize: 0;)
	return
	// succ:  fn402046F5_exit l402046F5_thunk_fn402046F8
l402046F5_thunk_fn402046F8:
	call fn402046F8 (retsize: 0;)
	return
	// succ:  fn402046F5_exit
fn402046F5_exit:


// fn402046F8
// Return size: 0
void fn402046F8()
fn402046F8_entry:
	// succ:  l402046F8
l402046F8:
	a1 = fp
	a8 = a8 - a9
	a10 = 0x40203740
	a2 = a2 | a6
	a2 = a2 & a10
	a3 = a3 | a6
	a3 = a3 & a10
	branch a3 <u a2 l40204712
	goto l4020470D
	// succ:  l4020470D l40204712
l402046F8:
l4020470D:
	a2 = a2 << 31
	a8 = a8 - 1
	// succ:  l40204712
l40204712:
	a2 = a2 - a3
	a2 = a2 << 31
	a10 = 1
	a9 = 0x00000017
	// succ:  l4020471D
l4020471D:
	a10 = a10 << 31
	branch a2 <u a3 l40204728
	// succ:  l40204723 l40204728
l40204723:
	a10 = a10 + 1
	a2 = a2 - a3
	// succ:  l40204728
l40204728:
	a2 = a2 << 31
	a9 = a9 - 1
	branch a9 != 0x00000000 l4020471D
	// succ:  l40204730 l4020471D
l40204730:
	a8 = a8 + 126
	a4 = 0x000000FE
	branch a8 >=u a4 l40204751
	// succ:  l40204739 l40204751
l40204739:
	branch a2 <u a3 l40204741
	// succ:  l4020473C l40204741
l4020473C:
	a10 = a10 + 1
	branch a2 == a3 l4020475C
	// succ:  l40204741 l4020475C
l40204741:
	a8 = a8 << 9
	a2 = a10 + a8
	a7 = a7 >>u 0x0000001F & 0x00000001
	a7 = a7 << 1
	a2 = a2 | a7
	return
	// succ:  fn402046F8_exit
l40204751:
	branch a8 < 0x00000000 l40204765
	// succ:  l40204754 l40204765
l40204754:
	a8 = a4 + 1
	a2 = a8 << 9
	goto l40244746
	// succ:  l40244746
l4020475C:
	a10 = a10 >>u 1
	a10 = a10 << 31
	goto l40244741
	// succ:  l40244741
l40204765:
	a8 = -a8
	SAR = a8
	branch a8 >=u 0x00000020 l40204791
	// succ:  l4020476E l40204791
l4020476E:
	a6 = a10 << SAR
	a10 = a10 >> SAR
	a8 = 0
	branch a2 == 0x00000000 l4020477D
	// succ:  l40204778 l4020477D
l40204778:
	a9 = 1
	a6 = a6 | a9
	// succ:  l4020477D
l4020477D:
	branch a6 >= 0x00000000 l40204741
	// succ:  l40204780 l40204741
l40204780:
	a10 = a10 + 1
	a6 = a6 << 31
	branch a6 != 0x00000000 l40204741
	// succ:  l40204788 l40204741
l40204788:
	a10 = a10 >>u 1
	a10 = a10 << 31
	goto l40244741
	// succ:  l40244741
l40204791:
	a2 = a7 >>u 0x0000001F & 0x00000001
	a2 = a2 << 1
	return
	// succ:  fn402046F8_exit
l40244741:
l40244746:
fn402046F8_exit:


// fn4020479C
// Return size: 0
void fn4020479C()
fn4020479C_entry:
	// succ:  l4020479C
l4020479C:
	a1 = fp
	a3 = a3 << 31
	a3 = a3 >>u 1
	a10 = a3 | a2
	branch a10 == 0x00000000 l402047A5_thunk_fn4020482D
	goto l402047A8
	// succ:  l402047A8 l402047A5_thunk_fn4020482D
l4020479C:
l402047A5_thunk_fn4020482D:
	call fn4020482D (retsize: 0;)
	return
	// succ:  fn4020479C_exit
l402047A8:
	branch a3 == 0x00000000 l402047C1
	// succ:  l402047AA l402047C1
l402047AA:
	a10 = __nsau(a3)
	a10 = a10 - 11
	SAR = 0x00000020 - a10
	a3 = (word32) (a3_a2 >>u SAR)
	// succ:  l402047B3_thunk_fn402047B6
l402047B3_thunk_fn402047B6:
	call fn402047B6 (retsize: 0;)
	return
	// succ:  fn4020479C_exit
l402047C1:
	a10 = __nsau(a2)
	a10 = a10 - 11
	a8 = -31
	a8 = a8 - a10
	SAR = 0x00000020 - a10
	branch a10 < 0x00000000 l402047DC
	// succ:  l402047D2 l402047DC
l402047D2:
	a3 = a2 << SAR
	a2 = 0
	// succ:  l402047D7_thunk_fn4020489C
l402047D7_thunk_fn4020489C:
	call fn4020489C (retsize: 0;)
	return
	// succ:  fn4020479C_exit
l402047DC:
	a3 = a2 >> SAR
	a2 = a2 << SAR
	// succ:  l402047E2_thunk_fn4020489C
l402047E2_thunk_fn4020489C:
	call fn4020489C (retsize: 0;)
	return
	// succ:  fn4020479C_exit
fn4020479C_exit:


// fn402047B4
// Return size: 0
void fn402047B4()
fn402047B4_entry:
	// succ:  l402047B4
l402047B4:
	a1 = fp
	f3 = Mem0[a1:real32]
	// succ:  l402047B4_thunk_fn402047B6
l402047B4_thunk_fn402047B6:
	call fn402047B6 (retsize: 0;)
	return
	// succ:  fn402047B4_exit
fn402047B4_exit:


// fn402047B6
// Return size: 0
void fn402047B6()
fn402047B6_entry:
	// succ:  l402047B6
l402047B6:
	a1 = fp
	a2 = a2 << SAR
	a8 = 1
	a8 = a8 - a10
	goto l402047BE_thunk_fn4020489C
	// succ:  l402047BE_thunk_fn4020489C
l402047B6:
	a2 = 0x0000010C
	a1 = Mem0[a0 + 0x00000028:word32]
	a8 = Mem0[a0 + 0x00000030:word32]
	// succ:  l402047BB_thunk_fn4020489C
l402047BB_thunk_fn4020489C:
	call fn4020489C (retsize: 0;)
	return
	// succ:  fn402047B6_exit
l402047BE_thunk_fn4020489C:
	call fn4020489C (retsize: 0;)
	return
	// succ:  fn402047B6_exit
fn402047B6_exit:


// fn402047E4
// Return size: 0
void fn402047E4()
fn402047E4_entry:
	// succ:  l402047E4
l402047E4:
	a1 = fp
	a15 = a0 >>u 0x00000010 & 0x0000003F
	// succ:  l402047E4_thunk_fn402047E7
l402047E4_thunk_fn402047E7:
	call fn402047E7 (retsize: 0;)
	return
	// succ:  fn402047E4_exit
fn402047E4_exit:


// fn402047E7
// Return size: 0
void fn402047E7()
fn402047E7_entry:
	// succ:  l402047E7
l402047E7:
	a1 = fp
	a1 = 0x401D8D28
	a4 = 0x401EDCEC
	a11 = __floor(f12, 0x02)
	goto l402047ED_thunk_fn402047F0
	// succ:  l402047ED_thunk_fn402047F0
l402047E7:
	a5 = a5 >>u 1
	a10 = a5 | a4
	branch a10 == 0x00000000 l4020482D
	goto l402047ED_thunk_fn402047F0
	// succ:  l402047ED_thunk_fn402047F0 l402047ED_thunk_fn4020482D
l402047ED_thunk_fn402047F0:
	call fn402047F0 (retsize: 0;)
	return
	// succ:  fn402047E7_exit
l402047ED_thunk_fn402047F0:
	call fn402047F0 (retsize: 0;)
	return
	// succ:  fn402047E7_exit
l402047ED_thunk_fn4020482D:
	call fn4020482D (retsize: 0;)
	return
	// succ:  fn402047E7_exit
fn402047E7_exit:


// fn402047F0
// Return size: 0
void fn402047F0()
fn402047F0_entry:
	// succ:  l402047F0
l402047F0:
	a1 = v3
	branch a5 == 0x00000000 l40204809
	// succ:  l402047F2 l40204809
l402047F2:
	a10 = __nsau(a5)
	a10 = a10 - 11
	SAR = 0x00000020 - a10
	a5 = (word32) (a5_a4 >>u SAR)
	a4 = a4 << SAR
	a9 = 1
	a9 = a9 - a10
	goto l4020489F
	// succ:  l4020489F
l40204809:
	a10 = __nsau(a4)
	a10 = a10 - 11
	a9 = -31
	a9 = a9 - a10
	SAR = 0x00000020 - a10
	branch a10 < 0x00000000 l40204824
	// succ:  l4020481A l40204824
l4020481A:
	a5 = a4 << SAR
	a4 = 0
	goto l4020489F
	// succ:  l4020489F
l40204824:
	a5 = a4 >> SAR
	a4 = a4 << SAR
	// succ:  l4020489F
l4020489F:
	a8 = a8 + a9
	a10 = 0x40204464
	a3 = a3 | a6
	a3 = a3 & a10
	a5 = a5 | a6
	a5 = a5 & a10
	Mem0[a1 + 0x00000004:word32] = a7
	a12 = a2 >>u 0x00000010 & 0x0000FFFF
	a13 = a4 >>u 0x00000010 & 0x0000FFFF
	a14 = a3 >>u 0x00000010 & 0x0000FFFF
	a15 = a5 >>u 0x00000010 & 0x0000FFFF
	v19 = (uint16) a2
	v20 = (uint16) a13
	a10 = v19 *u v20
	v21 = (uint16) a12
	v22 = (uint16) a4
	a11 = v21 *u v22
	a9 = 0
	a10 = a10 + a11
	branch a10 >=u a11 l402048CD
	// succ:  l402048CB l402048CD
l402048CB:
	a9 = a9 + 1
	// succ:  l402048CD
l402048CD:
	SAR = 0x00
	a6 = (word32) (a9_a10 >>u SAR)
	v25 = (uint16) a2
	v26 = (uint16) a4
	a11 = v25 *u v26
	a10 = a10 << SAR
	a10 = a10 + a11
	branch a10 >=u a11 l402048E1
	// succ:  l402048DE l402048E1
l402048DE:
	a6 = a6 + 1
	// succ:  l402048E1
l402048E1:
	a9 = 0
	v27 = (uint16) a2
	v28 = (uint16) a5
	a11 = v27 *u v28
	a6 = a6 + a11
	branch a6 >=u a11 l402048ED
	// succ:  l402048EB l402048ED
l402048EB:
	a9 = a9 + 1
	// succ:  l402048ED
l402048ED:
	v29 = (uint16) a12
	v30 = (uint16) a13
	a11 = v29 *u v30
	a6 = a6 + a11
	branch a6 >=u a11 l402048F8
	// succ:  l402048F6 l402048F8
l402048F6:
	a9 = a9 + 1
	// succ:  l402048F8
l402048F8:
	v31 = (uint16) a3
	v32 = (uint16) a4
	a11 = v31 *u v32
	a6 = a6 + a11
	branch a6 >=u a11 l40204902
	// succ:  l40204900 l40204902
l40204900:
	a9 = a9 + 1
	// succ:  l40204902
l40204902:
	branch a10 == 0x00000000 l40204909
	// succ:  l40204904 l40204909
l40204904:
	a11 = 1
	a6 = a6 | a11
	// succ:  l40204909
l40204909:
	v33 = (uint16) a2
	v34 = (uint16) a15
	a7 = v33 *u v34
	v35 = (uint16) a14
	v36 = (uint16) a4
	a11 = v35 *u v36
	a10 = 0
	a11 = a11 + a7
	branch a11 >=u a7 l40204919
	// succ:  l40204916 l40204919
l40204916:
	a10 = a10 + 1
	// succ:  l40204919
l40204919:
	v37 = (uint16) a12
	v38 = (uint16) a5
	a7 = v37 *u v38
	a11 = a11 + a7
	branch a11 >=u a7 l40204925
	// succ:  l40204922 l40204925
l40204922:
	a10 = a10 + 1
	// succ:  l40204925
l40204925:
	v39 = (uint16) a3
	v40 = (uint16) a13
	a7 = v39 *u v40
	a11 = a11 + a7
	branch a11 >=u a7 l40204931
	// succ:  l4020492E l40204931
l4020492E:
	a10 = a10 + 1
	// succ:  l40204931
l40204931:
	a10 = (word32) (a10_a11 >>u SAR)
	a10 = a10 + a9
	a11 = a11 << SAR
	a6 = a6 + a11
	branch a6 >=u a11 l40204941
	// succ:  l4020493E l40204941
l4020493E:
	a10 = a10 + 1
	// succ:  l40204941
l40204941:
	a9 = 0
	v42 = (uint16) a12
	v43 = (uint16) a15
	a2 = v42 *u v43
	a2 = a2 + a10
	branch a2 >=u a10 l4020494D
	// succ:  l4020494B l4020494D
l4020494B:
	a9 = a9 + 1
	// succ:  l4020494D
l4020494D:
	v44 = (uint16) a3
	v45 = (uint16) a5
	a10 = v44 *u v45
	a2 = a2 + a10
	branch a2 >=u a10 l40204959
	// succ:  l40204956 l40204959
l40204956:
	a9 = a9 + 1
	// succ:  l40204959
l40204959:
	v46 = (uint16) a14
	v47 = (uint16) a13
	a10 = v46 *u v47
	a2 = a2 + a10
	branch a2 >=u a10 l40204964
	// succ:  l40204961 l40204964
l40204961:
	a9 = a9 + 1
	// succ:  l40204964
l40204964:
	v48 = (uint16) a3
	v49 = (uint16) a15
	a11 = v48 *u v49
	v50 = (uint16) a14
	v51 = (uint16) a5
	a7 = v50 *u v51
	a10 = 0
	a11 = a11 + a7
	branch a11 >=u a7 l40204975
	// succ:  l40204972 l40204975
l40204972:
	a10 = a10 + 1
	// succ:  l40204975
l40204975:
	a10 = (word32) (a10_a11 >>u SAR)
	a10 = a10 + a9
	a11 = a11 << SAR
	a2 = a2 + a11
	branch a2 >=u a11 l40204984
	// succ:  l40204982 l40204984
l40204982:
	a10 = a10 + 1
	// succ:  l40204984
l40204984:
	v52 = (uint16) a14
	v53 = (uint16) a15
	a3 = v52 *u v53
	a3 = a3 + a10
	a7 = Mem0[a1 + 0x00000004:word32]
	a4 = 11
	a5 = a3 >>u 9
	branch a5 != 0x00000000 l40204998
	// succ:  l40204992 l40204998
l40204992:
	a4 = a4 + 1
	a8 = a8 - 1
	// succ:  l40204998
l40204998:
	SAR = 0x00000020 - a4
	a3 = (word32) (a3_a2 >>u SAR)
	a2 = (word32) (a2_a6 >>u SAR)
	a6 = a6 << SAR
	a4 = 0x000003FF
	a8 = a8 - a4
	a4 = a4 << 31
	branch a8 >=u a4 l402049E5
	// succ:  l402049B0 l402049E5
l402049B0:
	branch a6 >= 0x00000000 l402049BC
	// succ:  l402049B3 l402049BC
l402049B3:
	a2 = a2 + 1
	branch a2 == 0x00000000 l402049E0
	// succ:  l402049B7 l402049E0
l402049B7:
	a6 = a6 << 31
	branch a6 == 0x00000000 l402049D7
	// succ:  l402049BC l402049D7
l402049BC:
	a8 = a8 << 12
	a3 = a3 + a8
	a7 = a7 >>u 0x0000001F & 0x00000001
	a7 = a7 << 1
	a3 = a3 | a7
	// succ:  l402049CA
l402049CA:
	a12 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000018:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  fn402047F0_exit
l402049D7:
	a2 = a2 >>u 1
	a2 = a2 << 31
	goto l402449BC
	// succ:  l402449BC
l402049E0:
	a3 = a3 + 1
	goto l402449BC
	// succ:  l402449BC
l402049E5:
	branch a8 < 0x00000000 l402049F4
	// succ:  l402049E8 l402049F4
l402049E8:
	a8 = a4 + 1
	a3 = a8 << 12
	a2 = 0
	goto l402449C1
	// succ:  l402449C1
l402049F4:
	a8 = -a8
	a9 = a6
	SAR = a8
	branch a8 >=u 0x00000020 l40204A0C
	// succ:  l402049FF l40204A0C
l402049FF:
	a6 = a2 << SAR
	a2 = (word32) (a3_a2 >>u SAR)
	a3 = a3 >> SAR
	goto l40204A1D
	// succ:  l40204A1D
l40204A0C:
	branch a8 >=u 0x00000040 l40204A2C
	// succ:  l40204A0F l40204A2C
l40204A0F:
	a10 = a2 << SAR
	a6 = (word32) (a3_a2 >>u SAR)
	a2 = a3 >> SAR
	a3 = 0
	a9 = a9 | a10
	// succ:  l40204A1D
l40204A1D:
	a8 = 0
	branch a9 == 0x00000000 l402049B0
	// succ:  l40204A22 l402049B0
l40204A22:
	a9 = 1
	a6 = a6 | a9
	goto l402449B0
	// succ:  l402449B0
l40204A2C:
	a3 = a7 >>u 0x0000001F & 0x00000001
	a3 = a3 << 1
	a2 = 0
	goto l402449CA
	// succ:  l402449CA
l402449B0:
l402449BC:
l402449C1:
l402449CA:
fn402047F0_exit:


// fn4020482D
// Return size: 0
void fn4020482D()
fn4020482D_entry:
	// succ:  l4020482D
l4020482D:
	a1 = v3
	a3 = a7 >>u 0x0000001F & 0x00000001
	a3 = a3 << 1
	a2 = 0
	// succ:  l40204833_thunk_fn402047F0
l40204833_thunk_fn402047F0:
	call fn402047F0 (retsize: 0;)
	return
	// succ:  fn4020482D_exit
fn4020482D_exit:


// __muldf3
// Return size: 0
void __muldf3()
__muldf3_entry:
	goto l4020487C
	// succ:  l4020487C
l40204838:
	branch a4 != 0x00000000 l40204849
	// succ:  l4020483A l40204849
l4020483A:
	a8 = a5 << 31
	branch a8 != 0x00000000 l40204849
	// succ:  l4020483F l40204849
l4020483F:
	a4 = 0x4020445C
	a3 = a3 | a4
	goto l402049CA_in___muldf3
	// succ:  l402049CA_in___muldf3
l40204849:
	branch (~a5 & a6) != 0x00000000 l40204858
	// succ:  l4020484C l40204858
l4020484C:
	a8 = a5 << 20
	a8 = a8 | a4
	branch a8 == 0x00000000 l40204858
	// succ:  l40204854 l40204858
l40204854:
	a3 = a5
	a2 = a4
	// succ:  l40204858
l40204858:
	a7 = a7 >>u 0x0000001F & 0x00000001
	a3 = a3 << 31
	SAR = 0x01
	a3 = (word32) (a7_a3 >>u SAR)
	goto l402049CA_in___muldf3
	// succ:  l402049CA_in___muldf3
l40204868:
	branch a2 != 0x00000000 l40204854
	// succ:  l4020486B l40204854
l4020486B:
	a8 = a3 << 31
	branch a8 != 0x00000000 l40204854
	// succ:  l40204871 l40204854
l40204871:
	a7 = 0x4020445C
	a3 = a5 | a7
	goto l402049CA_in___muldf3
	// succ:  l402049CA_in___muldf3
l4020487C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000018:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	a6 = 0x40204460
	a7 = a3 ^ a5
	branch (~a3 & a6) == 0x00000000 l40204838
	// succ:  l40204890 l40204838
l40204890:
	branch (~a5 & a6) == 0x00000000 l40204868
	// succ:  l40204893 l40204868
l40204893:
	a8 = a3 >>u 0x00000014 & 0x000007FF
	a9 = a5 >>u 0x00000014 & 0x000007FF
	branch a8 == 0x00000000 l40204899_thunk_fn4020479C
	goto l40204899_thunk_fn4020489C
	// succ:  l40204899_thunk_fn4020489C l40204899_thunk_fn4020479C
l40204899_thunk_fn4020479C:
	call fn4020479C (retsize: 0;)
	return
	// succ:  __muldf3_exit
l40204899_thunk_fn4020489C:
	call fn4020489C (retsize: 0;)
	return
	// succ:  __muldf3_exit l40204899_thunk_fn4020489C
l40204899_thunk_fn4020489C:
	call fn4020489C (retsize: 0;)
	return
	// succ:  __muldf3_exit
l402049CA_in___muldf3:
	a12 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000018:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  __muldf3_exit
l402049CA_in___muldf3:
	a12 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000018:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  __muldf3_exit
l402049CA_in___muldf3:
	a12 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000018:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  __muldf3_exit
__muldf3_exit:


// fn4020489C
// Return size: 0
void fn4020489C()
fn4020489C_entry:
	goto l4020489C
	// succ:  l4020489C
l402047E5:
	a5 = a5 << 31
	// succ:  l402047E5_thunk_fn402047E7
l402047E5_thunk_fn402047E7:
	call fn402047E7 (retsize: 0;)
	return
	// succ:  fn4020489C_exit
l4020489C:
	a1 = v3
	branch a9 == 0x00000000 l402047E5
	// succ:  l4020489C_thunk_fn402047F0 l402047E5
l4020489C_thunk_fn402047F0:
	call fn402047F0 (retsize: 0;)
	return
	// succ:  fn4020489C_exit
fn4020489C_exit:


// __extendsfdf2
// Return size: 0
void __extendsfdf2()
__extendsfdf2_entry:
	// succ:  l40204A38
l40204A38:
	a1 = fp
	a5 = a2 >>u 0x0000001F & 0x00000001
	a5 = a5 << 1
	a4 = a2 << 31
	a6 = a2 >>u 0x00000017 & 0x000000FF
	branch a6 == 0x00000000 l40204A71
	// succ:  l40204A46 l40204A71
l40204A46:
	a6 = a6 + 1
	branch a6 == 256 l40204A5C
	// succ:  l40204A4B l40204A5C
l40204A4B:
	a4 = a4 >>u 4
	a2 = a2 << 3
	a6 = 0x40204468
	a4 = a4 + a6
	a3 = a4 | a5
	return
	// succ:  __extendsfdf2_exit
l40204A5C:
	a4 = 0x40204460
	a7 = a2 << 23
	branch a7 == 0x00000000 l40204A6A
	// succ:  l40204A64 l40204A6A
l40204A64:
	a6 = a6 << 21
	a4 = a4 | a6
	// succ:  l40204A6A
l40204A6A:
	a3 = a4 | a5
	a2 = 0
	return
	// succ:  __extendsfdf2_exit
l40204A71:
	branch a4 == 0x00000000 l40204A6A
	// succ:  l40204A74 l40204A6A
l40204A74:
	a7 = __nsau(a4)
	a7 = a7 - 8
	SAR = 0x00000020 - a7
	a4 = a4 << SAR
	a2 = a4 << 3
	a4 = a4 >>u 3
	a6 = 0x0000037F
	a6 = a6 - a7
	a6 = a6 << 12
	a4 = a4 + a6
	a3 = a4 | a5
	return
	// succ:  __extendsfdf2_exit
__extendsfdf2_exit:


// mallinfo
// Return size: 0
void mallinfo()
mallinfo_entry:
	// succ:  l40204A98
l40204A98:
	a1 = fp
	a3 = 0x40203754
	a1 = a1 - 16
	a3 = Mem0[a3 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2
	a0 = 0x40204AAC
	call _mallinfo_r (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  mallinfo_exit
mallinfo_exit:


// malloc_stats
// Return size: 0
void malloc_stats()
malloc_stats_entry:
	// succ:  l40204AB8
l40204AB8:
	a1 = fp
	a2 = 0x40203754
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40204AC7
	call _malloc_stats_r (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  malloc_stats_exit
malloc_stats_exit:


// mallopt
// Return size: 0
void mallopt()
mallopt_entry:
	// succ:  l40204AD0
l40204AD0:
	a1 = fp
	a5 = a2 | a2
	a2 = 0x40203754
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	a4 = a3 | a3
	a3 = a5
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40204AE6
	call _mallopt_r (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  mallopt_exit
mallopt_exit:


// _mstats_r
// Return size: 0
void _mstats_r()
_mstats_r_entry:
	// succ:  l40204AF0
l40204AF0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a2
	a13 = a3
	branch a2 == 0x00000000 l40204B0C
	// succ:  l40204AFF l40204B0C
l40204AFF:
	a2 = Mem0[a2 + 0x00000018:word32]
	branch a2 != 0x00000000 l40204B0C
	// succ:  l40204B03 l40204B0C
l40204B03:
	a2 = a12 | a12
	a0 = 0x40204470
	v8 = a0
	a0 = 0x40204B0C
	call v8 (retsize: 0;)
	// succ:  l40204B0C
l40204B0C:
	a2 = Mem0[a12 + 0x0000000C:word32]
	a3 = 0x4020446C
	a4 = a13 | a13
	a0 = 0x40204474
	v10 = a0
	a0 = 0x40204B1B
	call v10 (retsize: 0;)
	a2 = a12 | a12
	a0 = 0x40204B21
	call _malloc_stats_r (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  _mstats_r_exit
_mstats_r_exit:


// mstats
// Return size: 0
void mstats()
mstats_entry:
	// succ:  l40204B2C
l40204B2C:
	a1 = fp
	a3 = a2
	a2 = 0x40203754
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40204B3C
	call fn40304AF0 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  mstats_exit
mstats_exit:


// _mallinfo_r
// Return size: 0
void _mallinfo_r()
_mallinfo_r_entry:
	// succ:  l40204B44
l40204B44:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = a2
	a2 = a3
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	a14 = a3
	a0 = 0x40204484
	v9 = a0
	a0 = 0x40204B5C
	call v9 (retsize: 0;)
	a12 = 0x40204478
	a3 = 0
	a2 = Mem0[a12 + 0x00000000:word32]
	// succ:  l40204B61_thunk_fn40204B64
l40204B61_thunk_fn40204B64:
	call fn40204B64 (retsize: 0;)
	return
	// succ:  _mallinfo_r_exit
_mallinfo_r_exit:


// fn40204B64
// Return size: 0
void fn40204B64()
fn40204B64_entry:
	// succ:  l40204B64
l40204B64:
	a1 = fp
	branch a2 == a3 l40204B80
	// succ:  l40204B67 l40204B80
l40204B67:
	a2 = a14 | a14
	a0 = 0x40204488
	v7 = a0
	a0 = 0x40204B70
	call v7 (retsize: 0;)
	branch a2 == -1 l40204B7E
	// succ:  l40204B73 l40204B7E
l40204B73:
	a4 = Mem0[a12 + 0x00000000:word32]
	a3 = a2 - a4
	goto l40204B80
	// succ:  l40204B80
l40204B7E:
	a3 = a2
	// succ:  l40204B80
l40204B80:
	a2 = 0x4020447C
	a5 = 0
	a6 = Mem0[a2 + 0x00000000:word32]
	goto l40204B90
	// succ:  l40204B90
l40204B8A:
	a2 = Mem0[a6 + 0x00000000:word32]
	a6 = Mem0[a6 + 0x00000004:word32]
	a5 = a5 + a2
	// succ:  l40204B90
l40204B90:
	branch a6 != 0x00000000 l40204B8A
	// succ:  l40204B93 l40204B8A
l40204B93:
	a12 = 0x40204480
	a4 = a3 - a5
	a2 = a14
	Mem0[a12:word32] = a3
	Mem0[a12 + 0x00000020:word32] = a5
	Mem0[a12 + 0x0000001C:word32] = a4
	a0 = 0x4020448C
	v12 = a0
	a0 = 0x40204BA8
	call v12 (retsize: 0;)
	a2 = a13
	a3 = a12
	a4 = 40
	a0 = 0x40203130
	v14 = a0
	a0 = 0x40204BB4
	call v14 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn40204B64_exit
fn40204B64_exit:


// _malloc_stats_r
// Return size: 0
void _malloc_stats_r()
_malloc_stats_r_entry:
	// succ:  l40204BC4
l40204BC4:
	a1 = fp
	a1 = a1 - 64
	a3 = a2
	a2 = a1
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000034:word32] = a13
	a0 = 0x40204BD5
	call fn40304B44 (retsize: 0;)
	a13 = 0x40203754
	a12 = 0x40204480
	a2 = Mem0[a13 + 0x00000000:word32]
	a4 = Mem0[a12 + 0x00000000:word32]
	a3 = 0x40204490
	a2 = Mem0[a2 + 0x0000000C:word32]
	a0 = 0x40204474
	v9 = a0
	a0 = 0x40204BEA
	call v9 (retsize: 0;)
	a2 = Mem0[a13 + 0x00000000:word32]
	a4 = Mem0[a12 + 0x00000000:word32]
	a3 = 0x40204494
	a2 = Mem0[a2 + 0x0000000C:word32]
	a0 = 0x40204474
	v10 = a0
	a0 = 0x40204BF9
	call v10 (retsize: 0;)
	a2 = Mem0[a13 + 0x00000000:word32]
	a4 = Mem0[a12 + 0x0000001C:word32]
	a2 = Mem0[a2 + 0x0000000C:word32]
	a3 = 0x40204498
	a0 = 0x40204474
	v11 = a0
	a0 = 0x40204C08
	call v11 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a1 = a1 + 64
	return
	// succ:  _malloc_stats_r_exit
_malloc_stats_r_exit:


// __cvt
// Return size: 0
void __cvt()
__cvt_entry:
	// succ:  l40204C14
l40204C14:
	a1 = fp
	a1 = a1 - 80
	Mem0[a1 + 0x00000044:word32] = a13
	Mem0[a1 + 0x0000003C:word32] = a15
	Mem0[a1 + 0x0000004C:word32] = a0
	Mem0[a1 + 0x00000048:word32] = a12
	Mem0[a1 + 0x00000040:word32] = a14
	a15 = a4
	a13 = a5
	a10 = a6
	a8 = a7
	a3 = Mem0[a1 + 0x00000050:word32]
	branch a5 >= 0x00000000 l40204C3E
	// succ:  l40204C33 l40204C3E
l40204C33:
	a4 = 0x4020449C
	a13 = a5 ^ a4
	a4 = 45
	goto l40204C40
	// succ:  l40204C40
l40204C3E:
	a4 = 0
	// succ:  l40204C40
l40204C40:
	a14 = Mem0[a1 + 0x00000058:word32]
	Mem0[a3:byte] = a4
	a3 = 0xFFFFFFDF
	a14 = a14 & a3
	a5 = a14 - 70
	a3 = 0
	a4 = 1
	branch a5 != 0x00000000 l40204C56
	// succ:  l40204C53_1 l40204C56
l40204C53_1:
	a3 = a4
	// succ:  l40204C56
l40204C56:
	a3 = a3 & 0x000000FF
	a6 = 3
	branch a3 != 0x00000000 l40204C6C
	// succ:  l40204C5D l40204C6C
l40204C5D:
	a7 = a14 - 69
	a4 = 0
	a5 = 1
	branch a7 != 0x00000000 l40204C67
	// succ:  l40204C64_2 l40204C67
l40204C64_2:
	a4 = a5
	// succ:  l40204C67
l40204C67:
	a6 = 2
	a10 = a10 + a4
	// succ:  l40204C6C
l40204C6C:
	a4 = Mem0[a1 + 0x00000054:word32]
	a7 = a10
	Mem0[a1:word32] = a4
	a4 = a1 + 20
	Mem0[a1 + 0x00000004:word32] = a4
	a4 = a1 + 16
	Mem0[a1 + 0x00000008:word32] = a4
	a5 = a13
	a4 = a15
	Mem0[a1 + 0x00000020:word32] = a3
	Mem0[a1 + 0x00000024:word32] = a8
	Mem0[a1 + 0x00000028:word32] = a10
	a0 = 0x40204C8A
	call _dtoa_r (retsize: 0;)
	a12 = a2
	a2 = 71
	a3 = Mem0[a1 + 0x00000020:word32]
	a8 = Mem0[a1 + 0x00000024:word32]
	a10 = Mem0[a1 + 0x00000028:word32]
	branch a14 != a2 l40204C9A
	// succ:  l40204C97 l40204C9A
l40204C97:
	branch (a8 & 0x00000001) == 0x00000000 l40204CF1
	// succ:  l40204C9A l40204CF1
l40204C9A:
	a14 = a12 + a10
	branch a3 == 0x00000000 l40204CCC
	// succ:  l40204C9E l40204CCC
l40204C9E:
	v16 = Mem0[a12 + 0x00000000:byte]
	a3 = (uint32) v16
	a2 = 48
	branch a3 != a2 l40204CC5
	// succ:  l40204CA6 l40204CC5
l40204CA6:
	a4 = 0x402044A0
	a5 = 0x402044A0
	a2 = a15
	a3 = a13
	Mem0[a1 + 0x00000028:word32] = a10
	a0 = 0x40204CB6
	call __nedf2 (retsize: 0;)
	a10 = Mem0[a1 + 0x00000028:word32]
	branch a2 == 0x00000000 l40204CC5
	// succ:  l40204CBA l40204CC5
l40204CBA:
	a2 = 1
	a10 = a2 - a10
	a2 = Mem0[a1 + 0x00000054:word32]
	Mem0[a2:word32] = a10
	// succ:  l40204CC5
l40204CC5:
	a3 = Mem0[a1 + 0x00000054:word32]
	a2 = Mem0[a3 + 0x00000000:word32]
	a14 = a14 + a2
	// succ:  l40204CCC
l40204CCC:
	a4 = 0x402044A0
	a5 = 0x402044A0
	a2 = a15 | a15
	a3 = a13 | a13
	a0 = 0x40204CDB
	call __nedf2 (retsize: 0;)
	branch a2 != 0x00000000 l40204CE0
	// succ:  l40204CDE l40204CE0
l40204CDE:
	Mem0[a1 + 0x00000010:word32] = a14
	// succ:  l40204CE0
l40204CE0:
	a3 = 48
	goto l40204CEC
	// succ:  l40204CEC
l40204CE5:
	a4 = a2 + 1
	Mem0[a1 + 0x00000010:word32] = a4
	Mem0[a2:byte] = a3
	// succ:  l40204CEC
l40204CEC:
	a2 = Mem0[a1 + 0x00000010:word32]
	branch a2 <u a14 l40204CE5
	// succ:  l40204CF1 l40204CE5
l40204CF1:
	a3 = Mem0[a1 + 0x00000010:word32]
	a2 = Mem0[a1 + 0x0000005C:word32]
	a0 = Mem0[a1 + 0x0000004C:word32]
	a3 = a3 - a12
	Mem0[a2:word32] = a3
	a13 = Mem0[a1 + 0x00000044:word32]
	a2 = a12
	a14 = Mem0[a1 + 0x00000040:word32]
	a12 = Mem0[a1 + 0x00000048:word32]
	a15 = Mem0[a1 + 0x0000003C:word32]
	a1 = a1 + 80
	return
	a3 = Mem0[a1 + 0x00000010:word32]
	a2 = Mem0[a1 + 0x0000005C:word32]
	a0 = Mem0[a1 + 0x0000004C:word32]
	a3 = a3 - a12
	Mem0[a2:word32] = a3
	a13 = Mem0[a1 + 0x00000044:word32]
	a2 = a12
	a14 = Mem0[a1 + 0x00000040:word32]
	a12 = Mem0[a1 + 0x00000048:word32]
	a15 = Mem0[a1 + 0x0000003C:word32]
	a1 = a1 + 80
	return
	// succ:  __cvt_exit __cvt_exit
__cvt_exit:


// __exponent
// Return size: 0
void __exponent()
__exponent_entry:
	// succ:  l40204D10
l40204D10:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a2:byte] = a4
	a13 = a2
	a14 = a2 + 2
	a12 = a3
	a2 = 43
	branch a3 >= 0x00000000 l40204D34
	// succ:  l40204D2B l40204D34
l40204D2B:
	a12 = -a3
	a2 = 45
	// succ:  l40204D34
l40204D34:
	Mem0[a13 + 0x00000001:byte] = a2
	a2 = 9
	branch a2 >= a12 l40204D8A
	// succ:  l40204D3C l40204D8A
l40204D3C:
	a15 = a1 + 6
	a5 = a2 | a2
	// succ:  l40204D42
l40204D42:
	a2 = a12
	a3 = 10
	Mem0[a1 + 0x00000014:word32] = a5
	Mem0[a1 + 0x00000010:word32] = a15
	a0 = 0x402044A4
	v12 = a0
	a0 = 0x40204D50
	call v12 (retsize: 0;)
	a2 = a2 + 48
	Mem0[a15:byte] = a2
	a3 = 10
	a2 = a12
	a0 = 0x40202548
	v13 = a0
	a0 = 0x40204D60
	call v13 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000014:word32]
	a12 = a2
	a15 = a15 - 1
	a4 = Mem0[a1 + 0x00000010:word32]
	branch a5 < a2 l40204D42
	// succ:  l40204D6B l40204D42
l40204D6B:
	a3 = a4 - 1
	a12 = a2 + 48
	Mem0[a3:byte] = a12
	a4 = a1 + 7
	goto l40204D82
	// succ:  l40204D82
l40204D78:
	v14 = Mem0[a3 + 0x00000000:byte]
	a2 = (uint32) v14
	a3 = a3 + 1
	Mem0[a14:byte] = a2
	a14 = a14 + 1
	// succ:  l40204D82
l40204D82:
	a2 = a14
	branch a3 <u a4 l40204D78
	// succ:  l40204D87 l40204D78
l40204D87:
	goto l40204D97
	// succ:  l40204D97
l40204D8A:
	a2 = 48
	a12 = a12 + 48
	Mem0[a14:byte] = a2
	Mem0[a14 + 0x00000001:byte] = a12
	a2 = a14 + 2
	// succ:  l40204D97
l40204D97:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a2 = a2 - a13
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  __exponent_exit
__exponent_exit:


// _printf_float
// Return size: 0
void _printf_float()
_printf_float_entry:
	// succ:  l40204DAC
l40204DAC:
	a1 = fp
	a1 = a1 - 112
	Mem0[a1 + 0x00000030:word32] = a4
	Mem0[a1 + 0x0000006C:word32] = a0
	Mem0[a1 + 0x00000068:word32] = a12
	Mem0[a1 + 0x00000064:word32] = a13
	Mem0[a1 + 0x00000060:word32] = a14
	a13 = a3 | a3
	Mem0[a1 + 0x0000005C:word32] = a15
	a14 = a5
	a15 = a6
	a12 = a2
	a0 = 0x40204DCD
	call _localeconv_r (retsize: 0;)
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000038:word32] = a2
	a0 = 0x40204DD4
	call strlen (retsize: 0;)
	Mem0[a1 + 0x0000003C:word32] = a2
	a2 = 0
	Mem0[a1 + 0x00000024:word32] = a2
	a4 = Mem0[a13 + 0x00000000:word32]
	a2 = Mem0[a15 + 0x00000008:word32]
	v14 = Mem0[a13 + 0x00000018:byte]
	a9 = (uint32) v14
	a3 = -8
	a2 = a2 + 7
	branch (a4 & 0x00000100) == 0x00000000 l40204E00
	// succ:  l40204DE8 l40204E00
l40204DE8:
	a3 = a2 & a3
	a4 = a3 + 8
	Mem0[a15 + 0x00000008:word32] = a4
	a2 = 24
	branch a2 < a4 l40204DF8
	// succ:  l40204DF4 l40204DF8
l40204DF4:
	goto l40204E0C
	// succ:  l40204E0C
l40204DF8:
	branch a2 < a3 l40204E1A
	// succ:  l40204DFB l40204E1A
l40204DFB:
	goto l40204E14
	// succ:  l40204E14
l40204E00:
	a2 = a2 & a3
	a4 = a2 + 8
	Mem0[a15 + 0x00000008:word32] = a4
	a3 = 24
	branch a3 < a4 l40204E11
	// succ:  l40204E0C l40204E11
l40204E0C:
	a2 = Mem0[a15 + 0x00000004:word32]
	goto l40204E1C
	// succ:  l40204E1C
l40204E11:
	branch a3 < a2 l40204E1A
	// succ:  l40204E14 l40204E1A
l40204E14:
	a2 = 0x00000028
	Mem0[a15 + 0x00000008:word32] = a2
	// succ:  l40204E1A
l40204E1A:
	a2 = Mem0[a15 + 0x00000000:word32]
	// succ:  l40204E1C
l40204E1C:
	a3 = Mem0[a15 + 0x00000008:word32]
	a2 = a2 + a3
	a2 = a2 - 8
	a3 = Mem0[a2 + 0x00000004:word32]
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a13 + 0x0000004C:word32] = a3
	Mem0[a13 + 0x00000048:word32] = a2
	a2 = Mem0[a13 + 0x00000048:word32]
	a3 = Mem0[a13 + 0x0000004C:word32]
	Mem0[a1 + 0x00000044:word32] = a9
	a0 = 0x40204E39
	call __fpclassifyd (retsize: 0;)
	a9 = Mem0[a1 + 0x00000044:word32]
	branch a2 != 1 l40204E78
	// succ:  l40204E3F l40204E78
l40204E3F:
	a2 = Mem0[a13 + 0x00000048:word32]
	a3 = Mem0[a13 + 0x0000004C:word32]
	a4 = 0x402044A0
	a5 = 0x402044A0
	a0 = 0x40204E4E
	call __ltdf2 (retsize: 0;)
	a9 = Mem0[a1 + 0x00000044:word32]
	branch a2 >= 0x00000000 l40204E59
	// succ:  l40204E54 l40204E59
l40204E54:
	a2 = 45
	Mem0[a13 + 0x00000043:byte] = a2
	// succ:  l40204E59
l40204E59:
	a2 = 71
	a15 = 0x402044AC
	branch a2 <u a9 l40204E64
	// succ:  l40204E61 l40204E64
l40204E61:
	a15 = 0x402044A8
	// succ:  l40204E64
l40204E64:
	a2 = 3
	a3 = Mem0[a13 + 0x00000000:word32]
	Mem0[a13 + 0x00000010:word32] = a2
	a2 = -5
	a2 = a3 & a2
	Mem0[a13:word32] = a2
	a2 = 0
	Mem0[a1 + 0x00000034:word32] = a2
	// succ:  l40204E73_thunk_fn40204F9D
l40204E73_thunk_fn40204F9D:
	call fn40204F9D (retsize: 0;)
	return
	// succ:  _printf_float_exit
l40204E78:
	a3 = Mem0[a13 + 0x0000004C:word32]
	a2 = Mem0[a13 + 0x00000048:word32]
	Mem0[a1 + 0x00000044:word32] = a9
	a0 = 0x40204E84
	call __fpclassifyd (retsize: 0;)
	a3 = Mem0[a13 + 0x00000000:word32]
	a9 = Mem0[a1 + 0x00000044:word32]
	branch a2 != 0x00000000 l40204EAC
	// succ:  l40204E8D l40204EAC
l40204E8D:
	a2 = 0x00000047
	a15 = 0x402044B4
	branch a2 <u a9 l40204E99
	// succ:  l40204E96 l40204E99
l40204E96:
	a15 = 0x402044B0
	// succ:  l40204E99
l40204E99:
	a7 = -5
	a2 = 3
	a3 = a3 & a7
	a4 = 0
	Mem0[a13 + 0x00000010:word32] = a2
	Mem0[a13:word32] = a3
	Mem0[a1 + 0x00000034:word32] = a4
	// succ:  l40204EA6_thunk_fn40204F9D
l40204EA6_thunk_fn40204F9D:
	call fn40204F9D (retsize: 0;)
	return
	// succ:  _printf_float_exit
l40204EAC:
	a2 = Mem0[a13 + 0x00000004:word32]
	branch a2 != -1 l40204EB8
	// succ:  l40204EB1 l40204EB8
l40204EB1:
	a2 = 6
	goto l40204EC7
	// succ:  l40204EC7
l40204EB8:
	a5 = 0xFFFFFFDF
	a5 = a9 & a5
	a4 = 71
	branch a5 != a4 l40204EC9
	// succ:  l40204EC3 l40204EC9
l40204EC3:
	branch a2 != 0x00000000 l40204EC9
	// succ:  l40204EC5 l40204EC9
l40204EC5:
	a2 = 1
	// succ:  l40204EC7
l40204EC7:
	Mem0[a13 + 0x00000004:word32] = a2
	// succ:  l40204EC9
l40204EC9:
	a2 = a1 + 44
	Mem0[a1:word32] = a2
	a2 = a1 + 40
	Mem0[a1 + 0x00000004:word32] = a2
	a7 = 0x00000400
	a2 = a1 + 36
	a7 = a7 | a3
	a4 = Mem0[a13 + 0x00000048:word32]
	Mem0[a1 + 0x0000000C:word32] = a2
	a5 = Mem0[a13 + 0x0000004C:word32]
	a2 = 0
	a6 = Mem0[a13 + 0x00000004:word32]
	Mem0[a1 + 0x00000008:word32] = a9
	Mem0[a1 + 0x00000010:word32] = a2
	Mem0[a13:word32] = a7
	a2 = a12 | a12
	Mem0[a1 + 0x00000044:word32] = a9
	a0 = 0x40204EF8
	call fn40304C14 (retsize: 0;)
	a9 = Mem0[a1 + 0x00000044:word32]
	a4 = 0xFFFFFFDF
	a15 = a2
	a4 = a9 & a4
	a2 = 71
	a3 = Mem0[a1 + 0x00000028:word32]
	branch a4 != a2 l40204F1D
	// succ:  l40204F0A l40204F1D
l40204F0A:
	a2 = -3
	branch a3 < a2 l40204F14
	// succ:  l40204F0F l40204F14
l40204F0F:
	a2 = Mem0[a13 + 0x00000004:word32]
	branch a2 >= a3 l40204F79
	// succ:  l40204F14 l40204F79
l40204F14:
	a9 = a9 - 2
	a9 = a9 & 0x000000FF
	goto l40204F23
	// succ:  l40204F23
l40204F1D:
	a2 = 0x00000065
	branch a2 <u a9 l40204F4C
	// succ:  l40204F23 l40204F4C
l40204F23:
	a3 = a3 - 1
	a4 = a9
	a2 = a13 + 80
	Mem0[a1 + 0x00000028:word32] = a3
	Mem0[a1 + 0x00000044:word32] = a9
	a0 = 0x40204F32
	call fn40304D10 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000024:word32]
	Mem0[a1 + 0x00000034:word32] = a2
	a2 = a2 + a3
	Mem0[a13 + 0x00000010:word32] = a2
	a9 = Mem0[a1 + 0x00000044:word32]
	branch a3 >= 2 l40204F45
	// succ:  l40204F40 l40204F45
l40204F40:
	a3 = Mem0[a13 + 0x00000000:word32]
	branch (a3 & 0x00000001) == 0x00000000 l40204FA4
	goto l40204F45
	// succ:  l40204F45 l40204F42_thunk_fn40204F9D
l40204F42_thunk_fn40204F9D:
	call fn40204F9D (retsize: 0;)
	return
	// succ:  _printf_float_exit
l40204F45:
	a2 = a2 + 1
	Mem0[a13 + 0x00000010:word32] = a2
	// succ:  l40204F47_thunk_fn40204F9D
l40204F47_thunk_fn40204F9D:
	call fn40204F9D (retsize: 0;)
	return
	// succ:  _printf_float_exit
l40204F4C:
	a2 = 0x00000066
	branch a9 != a2 l40204F7C
	// succ:  l40204F52 l40204F7C
l40204F52:
	a2 = Mem0[a13 + 0x00000004:word32]
	branch a3 < 1 l40204F69
	// succ:  l40204F57 l40204F69
l40204F57:
	Mem0[a13 + 0x00000010:word32] = a3
	branch a2 != 0x00000000 l40204F60
	// succ:  l40204F5B l40204F60
l40204F5B:
	a4 = Mem0[a13 + 0x00000000:word32]
	branch (a4 & 0x00000001) == 0x00000000 l40204F9D
	goto l40204F60
	// succ:  l40204F60 l40204F5D_thunk_fn40204F9D
l40204F5D_thunk_fn40204F9D:
	call fn40204F9D (retsize: 0;)
	return
	// succ:  _printf_float_exit
l40204F60:
	a2 = a2 + 1
	a2 = a3 + a2
	// succ:  l40204F62_thunk_fn40204F88
l40204F62_thunk_fn40204F88:
	call fn40204F88 (retsize: 0;)
	return
	// succ:  _printf_float_exit
l40204F69:
	branch a2 != 0x00000000 l40204F72
	// succ:  l40204F6B l40204F72
l40204F6B:
	a5 = Mem0[a13 + 0x00000000:word32]
	a4 = 1
	branch (a5 & 0x00000001) == 0x00000000 l40204F74
	// succ:  l40204F72 l40204F74
l40204F72:
	a4 = a2 + 2
	// succ:  l40204F74
l40204F74:
	Mem0[a13 + 0x00000010:word32] = a4
	// succ:  l40204F74_thunk_fn40204F9D
l40204F74_thunk_fn40204F9D:
	call fn40204F9D (retsize: 0;)
	return
	// succ:  _printf_float_exit
l40204F79:
	a9 = 0x00000067
	// succ:  l40204F7C
l40204F7C:
	a4 = Mem0[a1 + 0x00000024:word32]
	branch a3 < a4 l40204F8E
	// succ:  l40204F81 l40204F8E
l40204F81:
	a2 = Mem0[a13 + 0x00000000:word32]
	// succ:  l40204F81_thunk_fn40204F82
l40204F81_thunk_fn40204F82:
	call fn40204F82 (retsize: 0;)
	return
	// succ:  _printf_float_exit
l40204F8E:
	a2 = 1
	branch a3 >= a2 l40204F99
	// succ:  l40204F93 l40204F99
l40204F93:
	a2 = 0x00000002
	a2 = a2 - a3
	// succ:  l40204F99
l40204F99:
	a2 = a4 + a2
	// succ:  l40204F99_thunk_fn40204F88
l40204F99_thunk_fn40204F88:
	call fn40204F88 (retsize: 0;)
	return
	// succ:  _printf_float_exit
_printf_float_exit:


// fn40204F80
// Return size: 0
void fn40204F80()
fn40204F80_entry:
	// succ:  l40204F80
l40204F80:
	a1 = fp
	a8 = 2
	// succ:  l40204F80_thunk_fn40204F82
l40204F80_thunk_fn40204F82:
	call fn40204F82 (retsize: 0;)
	return
	// succ:  fn40204F80_exit
fn40204F80_exit:


// fn40204F82
// Return size: 0
void fn40204F82()
fn40204F82_entry:
	// succ:  l40204F82
l40204F82:
	a1 = fp
	__reserved()
	branch (a2 & 0x00000001) == 0x00000000 l40204F85_thunk_fn40204F9D
	goto l40204F85_thunk_fn40204F88
	// succ:  l40204F85_thunk_fn40204F88 l40204F85_thunk_fn40204F9D
l40204F82:
	Mem0[a13 + 0x00000010:word32] = a3
	branch (a2 & 0x00000001) == 0x00000000 l40204F9D
	// succ:  l40204F84_thunk_fn40204F88 l40204F84_thunk_fn40204F9D
l40204F84_thunk_fn40204F88:
	call fn40204F88 (retsize: 0;)
	return
	// succ:  fn40204F82_exit
l40204F84_thunk_fn40204F9D:
	call fn40204F9D (retsize: 0;)
	return
	// succ:  fn40204F82_exit
l40204F85_thunk_fn40204F88:
	call fn40204F88 (retsize: 0;)
	return
	// succ:  fn40204F82_exit l40204F85_thunk_fn40204F88
l40204F85_thunk_fn40204F88:
	call fn40204F88 (retsize: 0;)
	return
	// succ:  fn40204F82_exit
l40204F85_thunk_fn40204F9D:
	call fn40204F9D (retsize: 0;)
	return
	// succ:  fn40204F82_exit
fn40204F82_exit:


// fn40204F88
// Return size: 0
void fn40204F88()
fn40204F88_entry:
	// succ:  l40204F88
l40204F88:
	a1 = v3
	a2 = a3 + 1
	// succ:  l40204F9B
l40204F9B:
	Mem0[a13 + 0x00000010:word32] = a2
	// succ:  l40204F9B_thunk_fn40204F9D
l40204F9B_thunk_fn40204F9D:
	call fn40204F9D (retsize: 0;)
	return
	// succ:  fn40204F88_exit
fn40204F88_exit:


// fn40204F9D
// Return size: 0
void fn40204F9D()
fn40204F9D_entry:
	// succ:  l40204F9D
l40204F9D:
	a1 = v3
	a2 = 0
	Mem0[a13 + 0x00000058:word32] = a3
	Mem0[a1 + 0x00000034:word32] = a2
	// succ:  l40204FA4
l40204FA4:
	v7 = Mem0[a1 + 0x0000002C:byte]
	a2 = (uint32) v7
	branch a2 == 0x00000000 l40204FAE
	// succ:  l40204FA9 l40204FAE
l40204FA9:
	a2 = 45
	Mem0[a13 + 0x00000043:byte] = a2
	// succ:  l40204FAE
l40204FAE:
	a5 = Mem0[a1 + 0x00000030:word32]
	a2 = a12
	a3 = a13
	a4 = a1 + 32
	a6 = a14 | a14
	Mem0[a1 + 0x00000044:word32] = a9
	a0 = 0x40204FC0
	call _printf_common (retsize: 0;)
	a9 = Mem0[a1 + 0x00000044:word32]
	branch a2 != -1 l40204FCC
	// succ:  l40204FC6 l40204FCC
l40204FC6:
	a2 = -1
	goto l40205294
	// succ:  l40205294
l40204FCC:
	a2 = Mem0[a13 + 0x00000000:word32]
	branch (a2 & 0x00000400) != 0x00000000 l40204FE9
	// succ:  l40204FD1 l40204FE9
l40204FD1:
	a2 = a12
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = a15
	a5 = Mem0[a13 + 0x00000010:word32]
	goto l40205219
	// succ:  l40205219
l40204FDC:
	a2 = Mem0[a13 + 0x00000000:word32]
	branch (a2 & 0x00000002) == 0x00000000 l40204FE4
	// succ:  l40204FE1 l40204FE4
l40204FE1:
	goto l40205266
	// succ:  l40205266
l40204FE4:
	goto l4020525A
	// succ:  l4020525A
l40204FE9:
	a3 = 0x00000065
	branch a3 <u a9 l40204FF2
	// succ:  l40204FEF l40204FF2
l40204FEF:
	goto l402051BA
	// succ:  l402051BA
l40204FF2:
	a2 = Mem0[a13 + 0x00000048:word32]
	a3 = Mem0[a13 + 0x0000004C:word32]
	a4 = 0x402044A0
	a5 = 0x402044A0
	a0 = 0x40205001
	call __nedf2 (retsize: 0;)
	branch a2 != 0x00000000 l4020505A
	// succ:  l40205004 l4020505A
l40205004:
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = 0x402044B8
	a2 = a12
	a5 = 0x00000001
	a0 = 0x40205011
	call a14 (retsize: 0;)
	branch a2 == -1 l40204FC6
	// succ:  l40205014 l40204FC6
l40205014:
	a2 = Mem0[a1 + 0x00000024:word32]
	a3 = Mem0[a1 + 0x00000028:word32]
	branch a3 < a2 l40205021
	// succ:  l4020501B l40205021
l4020501B:
	a2 = Mem0[a13 + 0x00000000:word32]
	branch (a2 & 0x00000001) == 0x00000000 l40204FDC
	// succ:  l40205021 l40204FDC
l40205021:
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = Mem0[a1 + 0x00000038:word32]
	a5 = Mem0[a1 + 0x0000003C:word32]
	a2 = a12
	a0 = 0x4020502C
	call a14 (retsize: 0;)
	branch a2 == -1 l40204FC6
	// succ:  l4020502F l40204FC6
l4020502F:
	a15 = 0
	a6 = a13 + 26
	goto l40205050
	// succ:  l40205050
l40205037:
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = a6
	a2 = a12
	a5 = 1
	Mem0[a1 + 0x00000048:word32] = a6
	a0 = 0x40205045
	call a14 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000048:word32]
	branch a2 != -1 l4020504E
	// succ:  l4020504B l4020504E
l4020504B:
	goto l40244FC6
	// succ:  l40244FC6
l4020504E:
	a15 = a15 + 1
	// succ:  l40205050
l40205050:
	a2 = Mem0[a1 + 0x00000024:word32]
	a2 = a2 - 1
	branch a15 < a2 l40205037
	// succ:  l40205057 l40205037
l40205057:
	goto l40244FDC
	// succ:  l40244FDC
l4020505A:
	a2 = Mem0[a1 + 0x00000028:word32]
	branch a2 >= 1 l402050D1
	// succ:  l4020505F l402050D1
l4020505F:
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = 0x402044B8
	a2 = a12 | a12
	a5 = 1
	a0 = 0x4020506C
	call a14 (retsize: 0;)
	branch a2 != -1 l40205072
	// succ:  l4020506F l40205072
l4020506F:
	goto l40244FC6
	// succ:  l40244FC6
l40205072:
	a2 = Mem0[a1 + 0x00000028:word32]
	branch a2 != 0x00000000 l40205082
	// succ:  l40205076 l40205082
l40205076:
	a2 = Mem0[a1 + 0x00000024:word32]
	branch a2 != 0x00000000 l40205082
	// succ:  l4020507A l40205082
l4020507A:
	a2 = Mem0[a13 + 0x00000000:word32]
	branch (a2 & 0x00000001) != 0x00000000 l40205082
	// succ:  l4020507F l40205082
l4020507F:
	goto l40244FDC
	// succ:  l40244FDC
l40205082:
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = Mem0[a1 + 0x00000038:word32]
	a5 = Mem0[a1 + 0x0000003C:word32]
	a2 = a12
	a0 = 0x4020508D
	call a14 (retsize: 0;)
	branch a2 != -1 l40205093
	// succ:  l40205090 l40205093
l40205090:
	goto l40244FC6
	// succ:  l40244FC6
l40205093:
	a6 = 0
	a7 = a13 + 26
	goto l402050BB
	// succ:  l402050BB
l4020509C:
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = a7
	a2 = a12
	a5 = 1
	Mem0[a1 + 0x00000048:word32] = a6
	Mem0[a1 + 0x00000040:word32] = a7
	a0 = 0x402050AD
	call a14 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000048:word32]
	a7 = Mem0[a1 + 0x00000040:word32]
	branch a2 != -1 l402050B9
	// succ:  l402050B6 l402050B9
l402050B6:
	goto l40244FC6
	// succ:  l40244FC6
l402050B9:
	a6 = a6 + 1
	// succ:  l402050BB
l402050BB:
	a2 = Mem0[a1 + 0x00000028:word32]
	a2 = -a2
	branch a6 < a2 l4020509C
	// succ:  l402050C3 l4020509C
l402050C3:
	a2 = a12
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = a15
	a5 = Mem0[a1 + 0x00000024:word32]
	goto l40205219
	// succ:  l40205219
l402050D1:
	a2 = Mem0[a13 + 0x00000058:word32]
	a6 = Mem0[a1 + 0x00000024:word32]
	branch a2 >= a6 l402050DC
	// succ:  l402050D9 l402050DC
l402050D9:
	a6 = a2 | a2
	// succ:  l402050DC
l402050DC:
	branch a6 >= 1 l402050EA
	// succ:  l402050DF l402050EA
l402050DF:
	a7 = 0
	branch a6 >= 0x00000000 l402050E4
	// succ:  l402050E1_1 l402050E4
l402050E1_1:
	a6 = a7
	// succ:  l402050E4
l402050E4:
	a9 = a13 + 26
	goto l40205126
	// succ:  l40205126
l402050EA:
	a3 = Mem0[a1 + 0x00000030:word32]
	a5 = a6
	a2 = a12
	a4 = a15
	Mem0[a1 + 0x00000048:word32] = a6
	a0 = 0x402050F8
	call a14 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000048:word32]
	branch a2 != -1 l402050DF
	// succ:  l402050FE l402050DF
l402050FE:
	goto l40244FC6
	// succ:  l40244FC6
l40205101:
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = a9
	a2 = a12
	a5 = 1
	Mem0[a1 + 0x00000048:word32] = a6
	Mem0[a1 + 0x00000040:word32] = a7
	Mem0[a1 + 0x00000044:word32] = a9
	a0 = 0x40205115
	call a14 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000048:word32]
	a7 = Mem0[a1 + 0x00000040:word32]
	a9 = Mem0[a1 + 0x00000044:word32]
	branch a2 != -1 l40205124
	// succ:  l40205121 l40205124
l40205121:
	goto l40244FC6
	// succ:  l40244FC6
l40205124:
	a7 = a7 + 1
	// succ:  l40205126
l40205126:
	a2 = Mem0[a13 + 0x00000058:word32]
	a3 = a2 - a6
	branch a7 < a3 l40205101
	// succ:  l4020512F l40205101
l4020512F:
	a6 = a15 + a2
	a3 = Mem0[a1 + 0x00000028:word32]
	a2 = Mem0[a1 + 0x00000024:word32]
	branch a3 < a2 l40205156
	// succ:  l40205138 l40205156
l40205138:
	a2 = Mem0[a13 + 0x00000000:word32]
	branch (a2 & 0x00000001) != 0x00000000 l40205156
	// succ:  l4020513D l40205156
l4020513D:
	a2 = Mem0[a1 + 0x00000024:word32]
	a3 = Mem0[a1 + 0x00000028:word32]
	a15 = a15 + a2
	a15 = a15 - a6
	a2 = a2 - a3
	branch a2 >= a15 l40205150
	// succ:  l4020514D l40205150
l4020514D:
	a15 = a2 | a2
	// succ:  l40205150
l40205150:
	branch a15 >= 1 l40205179
	// succ:  l40205153 l40205179
l40205153:
	goto l4020516D
	// succ:  l4020516D
l40205156:
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = Mem0[a1 + 0x00000038:word32]
	a5 = Mem0[a1 + 0x0000003C:word32]
	a2 = a12
	Mem0[a1 + 0x00000048:word32] = a6
	a0 = 0x40205164
	call a14 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000048:word32]
	branch a2 != -1 l4020513D
	// succ:  l4020516A l4020513D
l4020516A:
	goto l40244FC6
	// succ:  l40244FC6
l4020516D:
	a6 = 0
	branch a15 >= 0x00000000 l40205172
	// succ:  l4020516F_1 l40205172
l4020516F_1:
	a15 = a6
	// succ:  l40205172
l40205172:
	a7 = a13 + 26
	goto l402051AA
	// succ:  l402051AA
l40205179:
	a3 = Mem0[a1 + 0x00000030:word32]
	a2 = a12
	a4 = a6
	a5 = a15
	a0 = 0x40205184
	call a14 (retsize: 0;)
	branch a2 != -1 l4020516D
	// succ:  l40205187 l4020516D
l40205187:
	goto l40244FC6
	// succ:  l40244FC6
l4020518A:
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = a7
	a2 = a12
	a5 = 0x00000001
	Mem0[a1 + 0x00000048:word32] = a6
	Mem0[a1 + 0x00000040:word32] = a7
	a0 = 0x4020519C
	call a14 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000048:word32]
	a7 = Mem0[a1 + 0x00000040:word32]
	branch a2 != -1 l402051A8
	// succ:  l402051A5 l402051A8
l402051A5:
	goto l40244FC6
	// succ:  l40244FC6
l402051A8:
	a6 = a6 + 1
	// succ:  l402051AA
l402051AA:
	a2 = Mem0[a1 + 0x00000028:word32]
	a3 = Mem0[a1 + 0x00000024:word32]
	a2 = a3 - a2
	a2 = a2 - a15
	branch a6 < a2 l4020518A
	// succ:  l402051B7 l4020518A
l402051B7:
	goto l40244FDC
	// succ:  l40244FDC
l402051BA:
	a3 = Mem0[a1 + 0x00000024:word32]
	branch a3 >= 2 l402051C5
	// succ:  l402051BF l402051C5
l402051BF:
	branch (a2 & 0x00000001) != 0x00000000 l402051C5
	// succ:  l402051C2 l402051C5
l402051C2:
	goto l40205249
	// succ:  l40205249
l402051C5:
	a3 = Mem0[a1 + 0x00000030:word32]
	a2 = a12 | a12
	a4 = a15 | a15
	a5 = 1
	a0 = 0x402051D3
	call a14 (retsize: 0;)
	branch a2 != -1 l402051D9
	// succ:  l402051D6 l402051D9
l402051D6:
	goto l40244FC6
	// succ:  l40244FC6
l402051D9:
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = Mem0[a1 + 0x00000038:word32]
	a5 = Mem0[a1 + 0x0000003C:word32]
	a2 = a12
	a0 = 0x402051E4
	call a14 (retsize: 0;)
	branch a2 != -1 l402051EA
	// succ:  l402051E7 l402051EA
l402051E7:
	goto l40244FC6
	// succ:  l40244FC6
l402051EA:
	a2 = Mem0[a13 + 0x00000048:word32]
	a3 = Mem0[a13 + 0x0000004C:word32]
	a4 = 0x402044A0
	a5 = 0x402044A0
	a0 = 0x402051F9
	call __nedf2 (retsize: 0;)
	branch a2 != 0x00000000 l40205203
	// succ:  l402051FB l40205203
l402051FB:
	a15 = a2
	a6 = a13 + 26
	goto l4020523F
	// succ:  l4020523F
l40205203:
	a5 = Mem0[a1 + 0x00000024:word32]
	a2 = a12
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = a15 + 1
	a5 = a5 - 1
	goto l40205251
	// succ:  l40205251
l40205210:
	a3 = Mem0[a1 + 0x00000030:word32]
	a5 = Mem0[a1 + 0x00000034:word32]
	a2 = a12
	a4 = a13 + 80
	// succ:  l40205219
l40205219:
	a0 = 0x4020521C
	call a14 (retsize: 0;)
	branch a2 == -1 l40205222
	// succ:  l4020521F l40205222
l4020521F:
	goto l40244FDC
	// succ:  l40244FDC
l40205222:
	goto l40244FC6
	// succ:  l40244FC6
l40205226:
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = a6
	a2 = a12
	a5 = 1
	Mem0[a1 + 0x00000048:word32] = a6
	a0 = 0x40205234
	call a14 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000048:word32]
	branch a2 != -1 l4020523D
	// succ:  l4020523A l4020523D
l4020523A:
	goto l40244FC6
	// succ:  l40244FC6
l4020523D:
	a15 = a15 + 1
	// succ:  l4020523F
l4020523F:
	a2 = Mem0[a1 + 0x00000024:word32]
	a2 = a2 - 1
	branch a15 < a2 l40205226
	// succ:  l40205246 l40205226
l40205246:
	goto l40245210
	// succ:  l40245210
l40205249:
	a3 = Mem0[a1 + 0x00000030:word32]
	a2 = a12
	a4 = a15
	a5 = 1
	// succ:  l40205251
l40205251:
	a0 = 0x40205254
	call a14 (retsize: 0;)
	branch a2 != -1 l40205210
	// succ:  l40205257 l40205210
l40205257:
	goto l40244FC6
	// succ:  l40244FC6
l4020525A:
	a3 = Mem0[a1 + 0x00000020:word32]
	a2 = Mem0[a13 + 0x0000000C:word32]
	branch a2 >= a3 l40205294
	// succ:  l40205261 l40205294
l40205261:
	a2 = a3
	goto l40205294
	// succ:  l40205294
l40205266:
	a15 = 0
	a6 = a13 + 25
	goto l40205287
	// succ:  l40205287
l4020526E:
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = a6
	a2 = a12
	a5 = 1
	Mem0[a1 + 0x00000048:word32] = a6
	a0 = 0x4020527C
	call a14 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000048:word32]
	branch a2 != -1 l40205285
	// succ:  l40205282 l40205285
l40205282:
	goto l40244FC6
	// succ:  l40244FC6
l40205285:
	a15 = a15 + 1
	// succ:  l40205287
l40205287:
	a3 = Mem0[a13 + 0x0000000C:word32]
	a2 = Mem0[a1 + 0x00000020:word32]
	a2 = a3 - a2
	branch a15 < a2 l4020526E
	// succ:  l40205291 l4020526E
l40205291:
	goto l4024525A
	// succ:  l4024525A
l40205294:
	a0 = Mem0[a1 + 0x0000006C:word32]
	a12 = Mem0[a1 + 0x00000068:word32]
	a13 = Mem0[a1 + 0x00000064:word32]
	a14 = Mem0[a1 + 0x00000060:word32]
	a15 = Mem0[a1 + 0x0000005C:word32]
	a1 = a1 + 112
	return
	// succ:  fn40204F9D_exit
l40244FC6:
l40244FDC:
l40245210:
l4024525A:
fn40204F9D_exit:


// _printf_common
// Return size: 0
void _printf_common()
_printf_common_entry:
	// succ:  l402052A8
l402052A8:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = a3
	Mem0[a1 + 0x00000024:word32] = a13
	a3 = Mem0[a3 + 0x00000010:word32]
	a13 = a2
	a2 = Mem0[a12 + 0x00000008:word32]
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x0000002C:word32] = a0
	a7 = a4
	a14 = a5
	a15 = a6 | a6
	branch a2 >= a3 l402052CA
	// succ:  l402052C7 l402052CA
l402052C7:
	a2 = a3 | a3
	// succ:  l402052CA
l402052CA:
	Mem0[a7:word32] = a2
	v14 = Mem0[a12 + 0x00000043:byte]
	a3 = (uint32) v14
	branch a3 == 0x00000000 l402052D5
	// succ:  l402052D1 l402052D5
l402052D1:
	a2 = a2 + 1
	Mem0[a7:word32] = a2
	// succ:  l402052D5
l402052D5:
	a2 = Mem0[a12 + 0x00000000:word32]
	branch (a2 & 0x00000020) == 0x00000000 l402052E0
	// succ:  l402052DA l402052E0
l402052DA:
	a2 = Mem0[a7 + 0x00000000:word32]
	a2 = a2 + 2
	Mem0[a7:word32] = a2
	// succ:  l402052E0
l402052E0:
	a2 = Mem0[a12 + 0x00000000:word32]
	a6 = 6
	a6 = a6 & a2
	branch a6 == 0x00000000 l402052FC
	// succ:  l402052E9 l402052FC
l402052E9:
	v15 = Mem0[a12 + 0x00000043:byte]
	a3 = (uint32) v15
	a2 = 1
	a5 = 0
	branch a3 == 0x00000000 l402052F3
	// succ:  l402052F0_1 l402052F3
l402052F0_1:
	a5 = a2
	// succ:  l402052F3
l402052F3:
	a2 = Mem0[a12 + 0x00000000:word32]
	branch (a2 & 0x00000020) != 0x00000000 l40205332
	// succ:  l402052F8 l40205332
l402052F8:
	goto l40205345
	// succ:  l40205345
l402052FC:
	a8 = a12 + 25
	goto l40205324
	// succ:  l40205324
l40205302:
	a4 = a8
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1 + 0x00000008:word32] = a7
	Mem0[a1:word32] = a8
	a2 = a13
	a3 = a14
	a5 = 0x00000001
	a0 = 0x40205314
	call a15 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000004:word32]
	a7 = Mem0[a1 + 0x00000008:word32]
	a8 = Mem0[a1 + 0x00000000:word32]
	branch a2 != -1 l40205322
	// succ:  l4020531D l40205322
l4020531D:
	a2 = -1
	goto l4020539E
	// succ:  l4020539E
l40205322:
	a6 = a6 + 1
	// succ:  l40205324
l40205324:
	a3 = Mem0[a12 + 0x0000000C:word32]
	a2 = Mem0[a7 + 0x00000000:word32]
	a2 = a3 - a2
	branch a6 < a2 l40205302
	// succ:  l4020532E l40205302
l4020532E:
	goto l402452E9
	// succ:  l402452E9
l40205332:
	a3 = a12 + a5
	a4 = 48
	Mem0[a3 + 0x00000043:byte] = a4
	a2 = a5 + 1
	v17 = Mem0[a12 + 0x00000045:byte]
	a3 = (uint32) v17
	a2 = a12 + a2
	a5 = a5 + 2
	Mem0[a2 + 0x00000043:byte] = a3
	// succ:  l40205345
l40205345:
	Mem0[a1 + 0x00000008:word32] = a7
	a2 = a13
	a3 = a14
	a4 = a12 + 67
	a0 = 0x40205351
	call a15 (retsize: 0;)
	a7 = Mem0[a1 + 0x00000008:word32]
	branch a2 == -1 l4020531D
	// succ:  l40205356 l4020531D
l40205356:
	a4 = Mem0[a12 + 0x00000000:word32]
	a5 = 6
	a4 = a5 & a4
	a3 = Mem0[a12 + 0x0000000C:word32]
	a2 = Mem0[a7 + 0x00000000:word32]
	a6 = 0
	branch a4 != 4 l4020536C
	// succ:  l40205366 l4020536C
l40205366:
	a2 = a3 - a2
	branch a2 < 0x00000000 l4020536C
	// succ:  l40205369_1 l4020536C
l40205369_1:
	a6 = a2
	// succ:  l4020536C
l4020536C:
	a3 = Mem0[a12 + 0x00000008:word32]
	a2 = Mem0[a12 + 0x00000010:word32]
	branch a2 >= a3 l40205378
	// succ:  l40205373 l40205378
l40205373:
	a2 = a3 - a2
	a6 = a6 + a2
	// succ:  l40205378
l40205378:
	a7 = 0
	a12 = a12 + 26
	goto l40205399
	// succ:  l40205399
l40205381:
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1 + 0x00000008:word32] = a7
	a2 = a13
	a3 = a14
	a4 = a12
	a5 = 1
	a0 = 0x40205390
	call a15 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000004:word32]
	a7 = Mem0[a1 + 0x00000008:word32]
	branch a2 == -1 l4020531D
	// succ:  l40205397 l4020531D
l40205397:
	a7 = a7 + 1
	// succ:  l40205399
l40205399:
	branch a7 < a6 l40205381
	// succ:  l4020539C l40205381
l4020539C:
	a2 = 0
	// succ:  l4020539E
l4020539E:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  _printf_common_exit
l402452E9:
_printf_common_exit:


// _printf_i
// Return size: 0
void _printf_i()
_printf_i_entry:
	// succ:  l402053B0
l402053B0:
	a1 = fp
	a1 = a1 - 80
	Mem0[a1 + 0x00000044:word32] = a13
	Mem0[a1 + 0x00000040:word32] = a14
	Mem0[a1 + 0x0000003C:word32] = a15
	Mem0[a1 + 0x0000004C:word32] = a0
	Mem0[a1 + 0x00000048:word32] = a12
	a15 = a3
	a8 = a3 + 67
	v10 = Mem0[a3 + 0x00000018:byte]
	a3 = (uint32) v10
	Mem0[a1 + 0x00000010:word32] = a2
	a2 = 0x0000006E
	a13 = a4
	a14 = a5
	branch a3 != a2 l402053D8
	// succ:  l402053D5 l402053D8
l402053D5:
	goto l4020563C
	// succ:  l4020563C
l402053D8:
	branch a2 <u a3 l40205404
	// succ:  l402053DB l40205404
l402053DB:
	a2 = 0x00000063
	branch a3 == a2 l4020543A
	// succ:  l402053E1 l4020543A
l402053E1:
	branch a2 <u a3 l402053F4
	// succ:  l402053E4 l402053F4
l402053E4:
	branch a3 == 0x00000000 l40205699
	// succ:  l402053E7 l40205699
l402053E7:
	a2 = 88
	branch a3 != a2 l402053EF
	// succ:  l402053EC l402053EF
l402053EC:
	goto l4020553A
	// succ:  l4020553A
l402053EF:
	goto l402056DD
	// succ:  l402056DD
l402053F4:
	a2 = 0x00000064
	branch a3 == a2 l40205465
	// succ:  l402053FA l40205465
l402053FA:
	a2 = 0x00000069
	branch a3 == a2 l40205465
	// succ:  l40205400 l40205465
l40205400:
	goto l402056DD
	// succ:  l402056DD
l40205404:
	a2 = 0x00000073
	branch a3 != a2 l4020540D
	// succ:  l4020540A l4020540D
l4020540A:
	goto l402056A2
	// succ:  l402056A2
l4020540D:
	branch a2 <u a3 l40205425
	// succ:  l40205410 l40205425
l40205410:
	a2 = 0x0000006F
	branch a3 != a2 l40205419
	// succ:  l40205416 l40205419
l40205416:
	goto l402054D0
	// succ:  l402054D0
l40205419:
	a2 = 0x00000070
	branch a3 != a2 l40205422
	// succ:  l4020541F l40205422
l4020541F:
	goto l40205544
	// succ:  l40205544
l40205422:
	goto l402056DD
	// succ:  l402056DD
l40205425:
	a2 = 0x00000075
	branch a3 != a2 l4020542E
	// succ:  l4020542B l4020542E
l4020542B:
	goto l402054D0
	// succ:  l402054D0
l4020542E:
	a2 = 0x00000078
	branch a3 != a2 l40205437
	// succ:  l40205434 l40205437
l40205434:
	goto l4020554D
	// succ:  l4020554D
l40205437:
	goto l402056DD
	// succ:  l402056DD
l4020543A:
	a2 = Mem0[a6 + 0x00000008:word32]
	a3 = 24
	a4 = a2 + 4
	Mem0[a6 + 0x00000008:word32] = a4
	a12 = a15 + 66
	branch a3 < a4 l4020544D
	// succ:  l40205448 l4020544D
l40205448:
	a2 = Mem0[a6 + 0x00000004:word32]
	goto l40205456
	// succ:  l40205456
l4020544D:
	branch a3 < a2 l40205454
	// succ:  l40205450 l40205454
l40205450:
	a2 = 36
	Mem0[a6 + 0x00000008:word32] = a2
	// succ:  l40205454
l40205454:
	a2 = Mem0[a6 + 0x00000000:word32]
	// succ:  l40205456
l40205456:
	a3 = Mem0[a6 + 0x00000008:word32]
	a2 = a2 + a3
	a2 = a2 - 4
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a15 + 0x00000042:byte] = a2
	goto l402056E3
	// succ:  l402056E3
l40205465:
	a4 = Mem0[a15 + 0x00000000:word32]
	a2 = Mem0[a6 + 0x00000008:word32]
	branch (a4 & 0x00000080) == 0x00000000 l40205475
	// succ:  l4020546C l40205475
l4020546C:
	a4 = a2 + 4
	Mem0[a6 + 0x00000008:word32] = a4
	a3 = 24
	goto l402054A4
	// succ:  l402054A4
l40205475:
	a3 = 24
	branch (a4 & 0x00000040) == 0x00000000 l402054A0
	// succ:  l4020547A l402054A0
l4020547A:
	a4 = a2 + 4
	Mem0[a6 + 0x00000008:word32] = a4
	branch a3 < a4 l40205489
	// succ:  l40205481 l40205489
l40205481:
	a2 = Mem0[a6 + 0x00000004:word32]
	goto l40205492
	// succ:  l40205492
l40205489:
	branch a3 < a2 l40205490
	// succ:  l4020548C l40205490
l4020548C:
	a2 = 36
	Mem0[a6 + 0x00000008:word32] = a2
	// succ:  l40205490
l40205490:
	a2 = Mem0[a6 + 0x00000000:word32]
	// succ:  l40205492
l40205492:
	a3 = Mem0[a6 + 0x00000008:word32]
	a2 = a2 + a3
	a2 = a2 - 4
	v23 = Mem0[a2 + 0x00000000:int16]
	a5 = (int32) v23
	goto l402054BF
	// succ:  l402054BF
l402054A0:
	a4 = a2 + 4
	Mem0[a6 + 0x00000008:word32] = a4
	// succ:  l402054A4
l402054A4:
	branch a3 < a4 l402054AD
	// succ:  l402054A7 l402054AD
l402054A7:
	a2 = Mem0[a6 + 0x00000004:word32]
	goto l402054B6
	// succ:  l402054B6
l402054AD:
	branch a3 < a2 l402054B4
	// succ:  l402054B0 l402054B4
l402054B0:
	a2 = 36
	Mem0[a6 + 0x00000008:word32] = a2
	// succ:  l402054B4
l402054B4:
	a2 = Mem0[a6 + 0x00000000:word32]
	// succ:  l402054B6
l402054B6:
	a3 = Mem0[a6 + 0x00000008:word32]
	a2 = a2 + a3
	a2 = a2 - 4
	a5 = Mem0[a2 + 0x00000000:word32]
	// succ:  l402054BF
l402054BF:
	a9 = 0x402044BC
	a4 = 10
	branch a5 >= 0x00000000 l402055C9
	// succ:  l402054C7 l402055C9
l402054C7:
	a5 = -a5
	a2 = 45
	goto l402055C6
	// succ:  l402055C6
l402054D0:
	a4 = Mem0[a15 + 0x00000000:word32]
	a2 = Mem0[a6 + 0x00000008:word32]
	branch (a4 & 0x00000080) == 0x00000000 l402054E0
	// succ:  l402054D7 l402054E0
l402054D7:
	a4 = a2 + 4
	Mem0[a6 + 0x00000008:word32] = a4
	a3 = 24
	goto l4020550C
	// succ:  l4020550C
l402054E0:
	a3 = 24
	branch (a4 & 0x00000040) == 0x00000000 l40205508
	// succ:  l402054E5 l40205508
l402054E5:
	a4 = a2 + 4
	Mem0[a6 + 0x00000008:word32] = a4
	branch a3 < a4 l402054F1
	// succ:  l402054EC l402054F1
l402054EC:
	a2 = Mem0[a6 + 0x00000004:word32]
	goto l402054FA
	// succ:  l402054FA
l402054F1:
	branch a3 < a2 l402054F8
	// succ:  l402054F4 l402054F8
l402054F4:
	a2 = 36
	Mem0[a6 + 0x00000008:word32] = a2
	// succ:  l402054F8
l402054F8:
	a2 = Mem0[a6 + 0x00000000:word32]
	// succ:  l402054FA
l402054FA:
	a3 = Mem0[a6 + 0x00000008:word32]
	a2 = a2 + a3
	a2 = a2 - 4
	v22 = Mem0[a2 + 0x00000000:uint16]
	a5 = (uint32) v22
	goto l40205527
	// succ:  l40205527
l40205508:
	a4 = a2 + 4
	Mem0[a6 + 0x00000008:word32] = a4
	// succ:  l4020550C
l4020550C:
	branch a3 < a4 l40205515
	// succ:  l4020550F l40205515
l4020550F:
	a2 = Mem0[a6 + 0x00000004:word32]
	goto l4020551E
	// succ:  l4020551E
l40205515:
	branch a3 < a2 l4020551C
	// succ:  l40205518 l4020551C
l40205518:
	a2 = 36
	Mem0[a6 + 0x00000008:word32] = a2
	// succ:  l4020551C
l4020551C:
	a2 = Mem0[a6 + 0x00000000:word32]
	// succ:  l4020551E
l4020551E:
	a3 = Mem0[a6 + 0x00000008:word32]
	a2 = a2 + a3
	a2 = a2 - 4
	a5 = Mem0[a2 + 0x00000000:word32]
	// succ:  l40205527
l40205527:
	v21 = Mem0[a15 + 0x00000018:byte]
	a3 = (uint32) v21
	a4 = 8
	a3 = a3 - 111
	a2 = 10
	a9 = 0x402044BC
	branch a3 == 0x00000000 l40205537
	// succ:  l40205534_1 l40205537
l40205534_1:
	a4 = a2
	// succ:  l40205537
l40205537:
	goto l402055C4
	// succ:  l402055C4
l4020553A:
	Mem0[a15 + 0x00000045:byte] = a3
	a9 = 0x402044BC
	goto l40205556
	// succ:  l40205556
l40205544:
	a3 = Mem0[a15 + 0x00000000:word32]
	a2 = 32
	a2 = a3 | a2
	Mem0[a15:word32] = a2
	// succ:  l4020554D
l4020554D:
	a2 = 0x00000078
	a9 = 0x402044C0
	Mem0[a15 + 0x00000045:byte] = a2
	// succ:  l40205556
l40205556:
	a3 = Mem0[a15 + 0x00000000:word32]
	a2 = Mem0[a6 + 0x00000008:word32]
	branch (a3 & 0x00000080) == 0x00000000 l40205566
	// succ:  l4020555D l40205566
l4020555D:
	a5 = a2 + 4
	Mem0[a6 + 0x00000008:word32] = a5
	a4 = 24
	goto l40205590
	// succ:  l40205590
l40205566:
	a5 = a2 + 4
	Mem0[a6 + 0x00000008:word32] = a5
	a4 = 24
	branch (a3 & 0x00000040) == 0x00000000 l40205590
	// succ:  l4020556F l40205590
l4020556F:
	branch a4 < a5 l40205579
	// succ:  l40205572 l40205579
l40205572:
	a2 = Mem0[a6 + 0x00000004:word32]
	goto l40205582
	// succ:  l40205582
l40205579:
	branch a4 < a2 l40205580
	// succ:  l4020557C l40205580
l4020557C:
	a2 = 36
	Mem0[a6 + 0x00000008:word32] = a2
	// succ:  l40205580
l40205580:
	a2 = Mem0[a6 + 0x00000000:word32]
	// succ:  l40205582
l40205582:
	a4 = Mem0[a6 + 0x00000008:word32]
	a2 = a2 + a4
	a2 = a2 - 4
	v16 = Mem0[a2 + 0x00000000:uint16]
	a5 = (uint32) v16
	goto l402055AB
	// succ:  l402055AB
l40205590:
	branch a4 < a5 l40205599
	// succ:  l40205593 l40205599
l40205593:
	a2 = Mem0[a6 + 0x00000004:word32]
	goto l402055A2
	// succ:  l402055A2
l40205599:
	branch a4 < a2 l402055A0
	// succ:  l4020559C l402055A0
l4020559C:
	a2 = 36
	Mem0[a6 + 0x00000008:word32] = a2
	// succ:  l402055A0
l402055A0:
	a2 = Mem0[a6 + 0x00000000:word32]
	// succ:  l402055A2
l402055A2:
	a4 = Mem0[a6 + 0x00000008:word32]
	a2 = a2 + a4
	a2 = a2 - 4
	a5 = Mem0[a2 + 0x00000000:word32]
	// succ:  l402055AB
l402055AB:
	branch (a3 & 0x00000001) == 0x00000000 l402055B6
	// succ:  l402055AE l402055B6
l402055AE:
	a2 = 32
	a3 = a3 | a2
	Mem0[a15:word32] = a3
	// succ:  l402055B6
l402055B6:
	a4 = 16
	branch a5 != 0x00000000 l402055C4
	// succ:  l402055BA l402055C4
l402055BA:
	a3 = Mem0[a15 + 0x00000000:word32]
	a2 = 0xFFFFFFDF
	a2 = a3 & a2
	Mem0[a15:word32] = a2
	// succ:  l402055C4
l402055C4:
	a2 = 0
	// succ:  l402055C6
l402055C6:
	Mem0[a15 + 0x00000043:byte] = a2
	// succ:  l402055C9
l402055C9:
	a2 = Mem0[a15 + 0x00000004:word32]
	Mem0[a15 + 0x00000008:word32] = a2
	branch a2 < 0x00000000 l402055DA
	// succ:  l402055D0 l402055DA
l402055D0:
	a6 = Mem0[a15 + 0x00000000:word32]
	a3 = -5
	a3 = a6 & a3
	Mem0[a15:word32] = a3
	// succ:  l402055DA
l402055DA:
	branch a5 != 0x00000000 l402055E0
	// succ:  l402055DC l402055E0
l402055DC:
	a12 = a8
	branch a2 == 0x00000000 l4020561C
	// succ:  l402055E0 l4020561C
l402055E0:
	a12 = a8
	// succ:  l402055E2
l402055E2:
	a3 = a4
	a2 = a5
	Mem0[a1 + 0x00000020:word32] = a8
	Mem0[a1 + 0x00000018:word32] = a4
	Mem0[a1 + 0x00000014:word32] = a5
	Mem0[a1 + 0x0000001C:word32] = a9
	a0 = 0x402044C4
	v18 = a0
	a0 = 0x402055F5
	call v18 (retsize: 0;)
	a9 = Mem0[a1 + 0x0000001C:word32]
	a12 = a12 - 1
	a2 = a9 + a2
	v19 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v19
	Mem0[a12:byte] = a2
	a5 = Mem0[a1 + 0x00000014:word32]
	a4 = Mem0[a1 + 0x00000018:word32]
	a2 = a5
	a3 = a4
	Mem0[a1 + 0x0000001C:word32] = a9
	a0 = 0x40204388
	v20 = a0
	a0 = 0x40205611
	call v20 (retsize: 0;)
	a5 = a2
	a4 = Mem0[a1 + 0x00000018:word32]
	a8 = Mem0[a1 + 0x00000020:word32]
	a9 = Mem0[a1 + 0x0000001C:word32]
	branch a2 != 0x00000000 l402055E2
	// succ:  l4020561C l402055E2
l4020561C:
	branch a4 != 8 l40205634
	// succ:  l4020561F l40205634
l4020561F:
	a2 = Mem0[a15 + 0x00000000:word32]
	branch (a2 & 0x00000001) == 0x00000000 l40205634
	// succ:  l40205624 l40205634
l40205624:
	a2 = Mem0[a15 + 0x00000004:word32]
	a3 = Mem0[a15 + 0x00000010:word32]
	branch a3 < a2 l40205634
	// succ:  l4020562B l40205634
l4020562B:
	a7 = a12 - 1
	a2 = 48
	Mem0[a7:byte] = a2
	a12 = a7
	// succ:  l40205634
l40205634:
	a8 = a8 - a12
	Mem0[a15 + 0x00000010:word32] = a8
	goto l402056EC
	// succ:  l402056EC
l4020563C:
	a5 = Mem0[a15 + 0x00000000:word32]
	a2 = Mem0[a6 + 0x00000008:word32]
	a4 = Mem0[a15 + 0x00000014:word32]
	branch (a5 & 0x00000080) == 0x00000000 l4020564E
	// succ:  l40205645 l4020564E
l40205645:
	a5 = a2 + 4
	Mem0[a6 + 0x00000008:word32] = a5
	a3 = 24
	goto l4020567D
	// succ:  l4020567D
l4020564E:
	a3 = 24
	branch (a5 & 0x00000040) == 0x00000000 l40205679
	// succ:  l40205653 l40205679
l40205653:
	a5 = a2 + 4
	Mem0[a6 + 0x00000008:word32] = a5
	branch a3 < a5 l40205661
	// succ:  l4020565A l40205661
l4020565A:
	a2 = Mem0[a6 + 0x00000004:word32]
	goto l4020566A
	// succ:  l4020566A
l40205661:
	branch a3 < a2 l40205668
	// succ:  l40205664 l40205668
l40205664:
	a2 = 36
	Mem0[a6 + 0x00000008:word32] = a2
	// succ:  l40205668
l40205668:
	a2 = Mem0[a6 + 0x00000000:word32]
	// succ:  l4020566A
l4020566A:
	a3 = Mem0[a6 + 0x00000008:word32]
	a2 = a2 + a3
	a2 = a2 - 4
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a2:word16] = a4
	goto l40205699
	// succ:  l40205699
l40205679:
	a5 = a2 + 4
	Mem0[a6 + 0x00000008:word32] = a5
	// succ:  l4020567D
l4020567D:
	branch a3 < a5 l40205685
	// succ:  l40205680 l40205685
l40205680:
	a2 = Mem0[a6 + 0x00000004:word32]
	goto l4020568E
	// succ:  l4020568E
l40205685:
	branch a3 < a2 l4020568C
	// succ:  l40205688 l4020568C
l40205688:
	a2 = 36
	Mem0[a6 + 0x00000008:word32] = a2
	// succ:  l4020568C
l4020568C:
	a2 = Mem0[a6 + 0x00000000:word32]
	// succ:  l4020568E
l4020568E:
	a3 = Mem0[a6 + 0x00000008:word32]
	a2 = a2 + a3
	a2 = a2 - 4
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a2:word32] = a4
	// succ:  l40205699
l40205699:
	a2 = 0
	Mem0[a15 + 0x00000010:word32] = a2
	a12 = a8
	goto l402056EC
	// succ:  l402056EC
l402056A2:
	a2 = Mem0[a6 + 0x00000008:word32]
	a3 = 24
	a4 = a2 + 4
	Mem0[a6 + 0x00000008:word32] = a4
	branch a3 < a4 l402056B5
	// succ:  l402056AD l402056B5
l402056AD:
	a2 = Mem0[a6 + 0x00000004:word32]
	goto l402056BF
	// succ:  l402056BF
l402056B5:
	branch a3 < a2 l402056BD
	// succ:  l402056B8 l402056BD
l402056B8:
	a2 = 36
	Mem0[a6 + 0x00000008:word32] = a2
	// succ:  l402056BD
l402056BD:
	a2 = Mem0[a6 + 0x00000000:word32]
	// succ:  l402056BF
l402056BF:
	a3 = Mem0[a6 + 0x00000008:word32]
	a4 = Mem0[a15 + 0x00000004:word32]
	a2 = a2 + a3
	a2 = a2 - 4
	a12 = Mem0[a2 + 0x00000000:word32]
	a3 = 0
	a2 = a12
	a0 = 0x402056D1
	call memchr (retsize: 0;)
	branch a2 == 0x00000000 l402056D8
	// succ:  l402056D3 l402056D8
l402056D3:
	a2 = a2 - a12
	Mem0[a15 + 0x00000004:word32] = a2
	// succ:  l402056D8
l402056D8:
	a2 = Mem0[a15 + 0x00000004:word32]
	goto l402056E5
	// succ:  l402056E5
l402056DD:
	a12 = a15 + 66
	Mem0[a15 + 0x00000042:byte] = a3
	// succ:  l402056E3
l402056E3:
	a2 = 1
	// succ:  l402056E5
l402056E5:
	Mem0[a15 + 0x00000010:word32] = a2
	a2 = 0
	Mem0[a15 + 0x00000043:byte] = a2
	// succ:  l402056EC
l402056EC:
	a2 = Mem0[a1 + 0x00000010:word32]
	a3 = a15
	a4 = a1
	a5 = a13
	a6 = a14
	a0 = 0x402056F9
	call fn403052A8 (retsize: 0;)
	branch a2 != -1 l40205701
	// succ:  l402056FC l40205701
l402056FC:
	a2 = -1
	goto l40205750
	// succ:  l40205750
l40205701:
	a2 = Mem0[a1 + 0x00000010:word32]
	a5 = Mem0[a15 + 0x00000010:word32]
	a3 = a13
	a4 = a12
	a0 = 0x4020570C
	call a14 (retsize: 0;)
	branch a2 == -1 l402056FC
	// succ:  l4020570F l402056FC
l4020570F:
	a2 = Mem0[a15 + 0x00000000:word32]
	branch (a2 & 0x00000002) != 0x00000000 l40205720
	// succ:  l40205714 l40205720
l40205714:
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = Mem0[a15 + 0x0000000C:word32]
	branch a2 >= a3 l40205750
	// succ:  l4020571B l40205750
l4020571B:
	a2 = a3
	goto l40205750
	// succ:  l40205750
l40205720:
	a6 = 0
	a7 = a15 + 25
	goto l40205741
	// succ:  l40205741
l40205729:
	a2 = Mem0[a1 + 0x00000010:word32]
	a4 = a7
	a3 = a13
	a5 = 1
	Mem0[a1 + 0x00000014:word32] = a6
	Mem0[a1 + 0x00000018:word32] = a7
	a0 = 0x40205738
	call a14 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000014:word32]
	a7 = Mem0[a1 + 0x00000018:word32]
	branch a2 == -1 l402056FC
	// succ:  l4020573F l402056FC
l4020573F:
	a6 = a6 + 1
	// succ:  l40205741
l40205741:
	a3 = Mem0[a15 + 0x0000000C:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	a2 = a3 - a2
	branch a6 < a2 l40205729
	// succ:  l4020574B l40205729
l4020574B:
	goto l40245714
	// succ:  l40245714
l40205750:
	a0 = Mem0[a1 + 0x0000004C:word32]
	a12 = Mem0[a1 + 0x00000048:word32]
	a13 = Mem0[a1 + 0x00000044:word32]
	a14 = Mem0[a1 + 0x00000040:word32]
	a15 = Mem0[a1 + 0x0000003C:word32]
	a1 = a1 + 80
	return
	// succ:  _printf_i_exit
l40245714:
_printf_i_exit:


// _scanf_float
// Return size: 0
void _scanf_float()
_scanf_float_entry:
	// succ:  l40205764
l40205764:
	a1 = fp
	a1 = a1 - 80
	Mem0[a1:word32] = a2
	a2 = Mem0[a3 + 0x00000008:word32]
	Mem0[a1 + 0x00000048:word32] = a12
	Mem0[a1 + 0x0000003C:word32] = a15
	a12 = a3
	a8 = a4
	Mem0[a1 + 0x0000004C:word32] = a0
	Mem0[a1 + 0x00000044:word32] = a13
	Mem0[a1 + 0x00000040:word32] = a14
	a3 = a2 - 1
	a4 = 0x0000015C
	a15 = a5
	a6 = 0
	branch a4 >=u a3 l40205794
	// succ:  l40205789 l40205794
l40205789:
	a3 = 0xFFFFFEA3
	a6 = a2 + a3
	a2 = 0x0000015D
	Mem0[a12 + 0x00000008:word32] = a2
	// succ:  l40205794
l40205794:
	a3 = Mem0[a12 + 0x00000000:word32]
	a2 = 0x00000780
	a14 = 0
	a10 = a12 + 28
	a2 = a3 | a2
	Mem0[a12:word32] = a2
	Mem0[a1 + 0x00000004:word32] = a10
	a13 = a10
	a4 = a14
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a14
	a5 = a14
	Mem0[a1 + 0x00000008:word32] = a14
	a7 = 73
	a9 = 1
	// succ:  l402057B3_thunk_fn402058EC
l402057B3_thunk_fn402058EC:
	call fn402058EC (retsize: 0;)
	return
	// succ:  _scanf_float_exit
_scanf_float_exit:


// fn402058EC
// Return size: 0
void fn402058EC()
fn402058EC_entry:
	goto l402058EC
	// succ:  l402058EC
l402057B8:
	a2 = Mem0[a8 + 0x00000000:word32]
	v24 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v24
	branch a2 != a7 l402057C3
	// succ:  l402057C0 l402057C3
l402057C0:
	goto l402058F5
	// succ:  l402058F5
l402057C3:
	branch a7 <u a2 l40205811
	// succ:  l402057C6 l40205811
l402057C6:
	a10 = 57
	branch a10 <u a2 l402057FC
	// succ:  l402057CB l402057FC
l402057CB:
	a10 = 49
	branch a2 <u a10 l402057D3
	// succ:  l402057D0 l402057D3
l402057D0:
	goto l40205898
	// succ:  l40205898
l402057D3:
	a10 = 45
	branch a2 != a10 l402057DB
	// succ:  l402057D8 l402057DB
l402057D8:
	goto l402058A5
	// succ:  l402058A5
l402057DB:
	branch a10 <u a2 l402057E9
	// succ:  l402057DE l402057E9
l402057DE:
	a3 = 43
	branch a2 != a3 l402057E6
	// succ:  l402057E3 l402057E6
l402057E3:
	goto l402058A5
	// succ:  l402058A5
l402057E6:
	goto l402059F9
	// succ:  l402059F9
l402057E9:
	a10 = 46
	branch a2 != a10 l402057F1
	// succ:  l402057EE l402057F1
l402057EE:
	goto l40205946
	// succ:  l40205946
l402057F1:
	a10 = 48
	branch a2 != a10 l402057F9
	// succ:  l402057F6 l402057F9
l402057F6:
	goto l4020587D
	// succ:  l4020587D
l402057F9:
	goto l402059F9
	// succ:  l402059F9
l402057FC:
	a3 = 69
	branch a2 != a3 l40205804
	// succ:  l40205801 l40205804
l40205801:
	goto l4020595D
	// succ:  l4020595D
l40205804:
	a3 = 70
	branch a2 != a3 l4020580C
	// succ:  l40205809 l4020580C
l40205809:
	goto l40205930
	// succ:  l40205930
l4020580C:
	a3 = 65
	goto l4020583F
	// succ:  l4020583F
l40205811:
	a3 = 0x00000065
	branch a2 != a3 l4020581A
	// succ:  l40205817 l4020581A
l40205817:
	goto l4020595D
	// succ:  l4020595D
l4020581A:
	branch a3 <u a2 l40205848
	// succ:  l4020581D l40205848
l4020581D:
	a3 = 84
	branch a2 != a3 l40205825
	// succ:  l40205822 l40205825
l40205822:
	goto l40205938
	// succ:  l40205938
l40205825:
	branch a3 <u a2 l40205834
	// succ:  l40205828 l40205834
l40205828:
	a3 = 78
	branch a2 != a3 l40205830
	// succ:  l4020582D l40205830
l4020582D:
	goto l402058B8
	// succ:  l402058B8
l40205830:
	goto l402059F9
	// succ:  l402059F9
l40205834:
	a3 = 89
	branch a2 != a3 l4020583C
	// succ:  l40205839 l4020583C
l40205839:
	goto l40205940
	// succ:  l40205940
l4020583C:
	a3 = 0x00000061
	// succ:  l4020583F
l4020583F:
	branch a2 != a3 l40205845
	// succ:  l40205842 l40205845
l40205842:
	goto l402058EC
	// succ:  l402058EC
l40205845:
	goto l402059F9
	// succ:  l402059F9
l40205848:
	a3 = 0x0000006E
	branch a2 == a3 l402058B8
	// succ:  l4020584E l402058B8
l4020584E:
	branch a3 <u a2 l40205868
	// succ:  l40205851 l40205868
l40205851:
	a3 = 0x00000066
	branch a2 != a3 l4020585A
	// succ:  l40205857 l4020585A
l40205857:
	goto l40205930
	// succ:  l40205930
l4020585A:
	a3 = 0x00000069
	branch a2 != a3 l40205863
	// succ:  l40205860 l40205863
l40205860:
	goto l402058F5
	// succ:  l402058F5
l40205863:
	goto l402059F9
	// succ:  l402059F9
l40205868:
	a3 = 0x00000074
	branch a2 != a3 l40205871
	// succ:  l4020586E l40205871
l4020586E:
	goto l40205938
	// succ:  l40205938
l40205871:
	a3 = 0x00000079
	branch a2 != a3 l4020587A
	// succ:  l40205877 l4020587A
l40205877:
	goto l40205940
	// succ:  l40205940
l4020587A:
	goto l402059F9
	// succ:  l402059F9
l4020587D:
	a10 = Mem0[a12 + 0x00000000:word32]
	branch (a10 & 0x00000100) == 0x00000000 l40205898
	// succ:  l40205882 l40205898
l40205882:
	a2 = 0xFFFFFF7F
	a10 = a10 & a2
	Mem0[a12:word32] = a10
	a5 = a5 + 1
	branch a6 == 0x00000000 l402059B0
	// succ:  l4020588F l402059B0
l4020588F:
	a3 = a3 + 1
	a6 = a6 - 1
	Mem0[a12 + 0x00000008:word32] = a3
	goto l402059B0
	// succ:  l402059B0
l40205898:
	a3 = a4 + a14
	branch a3 != 0x00000000 l402059F9
	// succ:  l4020589D l402059F9
l4020589D:
	a10 = Mem0[a12 + 0x00000000:word32]
	a3 = 0xFFFFFE7F
	goto l402058B0
	// succ:  l402058B0
l402058A5:
	a3 = Mem0[a12 + 0x00000000:word32]
	branch (a3 & 0x00000080) != 0x00000000 l402058AD
	// succ:  l402058AA l402058AD
l402058AA:
	goto l402059F9
	// succ:  l402059F9
l402058AD:
	a10 = 0xFFFFFF7F
	// succ:  l402058B0
l402058B0:
	a3 = a3 & a10
	Mem0[a12:word32] = a3
	goto l402059AB
	// succ:  l402059AB
l402058B8:
	branch a5 != 0x00000000 l402058D4
	// succ:  l402058BA l402058D4
l402058BA:
	branch a4 != 0x00000000 l402058D4
	// succ:  l402058BC l402058D4
l402058BC:
	a3 = Mem0[a12 + 0x00000000:word32]
	a10 = 0x00000700
	a11 = a3 & a10
	branch a11 != a10 l402058DA
	// succ:  l402058C7 l402058DA
l402058C7:
	a4 = 0xFFFFF87F
	a3 = a3 & a4
	Mem0[a12:word32] = a3
	a4 = 1
	goto l402059AB
	// succ:  l402059AB
l402058D4:
	branch a4 != 2 l402058DA
	// succ:  l402058D7 l402058DA
l402058D7:
	goto l40205994
	// succ:  l40205994
l402058DA:
	a10 = a14 - 4
	a3 = 0
	branch a10 != 0x00000000 l402058E2
	// succ:  l402058DF_1 l402058E2
l402058DF_1:
	a3 = a9
	// succ:  l402058E2
l402058E2:
	a3 = a3 & 0x000000FF
	a10 = a14 - 1
	branch a3 == 0x00000000 l40205921
	// succ:  l402058E9 l40205921
l402058E9:
	goto l40205927
	// succ:  l40205927
l402058EC:
	a1 = fp
	branch a4 != 1 l402058F2
	// succ:  l402058EF l402058F2
l402058EF:
	goto l40205999
	// succ:  l40205999
l402058F2:
	goto l402059F9
	// succ:  l402059F9
l402058F5:
	branch a5 != 0x00000000 l40205911
	// succ:  l402058F7 l40205911
l402058F7:
	branch a14 != 0x00000000 l40205911
	// succ:  l402058F9 l40205911
l402058F9:
	a3 = Mem0[a12 + 0x00000000:word32]
	a10 = 0x00000700
	a11 = a3 & a10
	branch a11 != a10 l40205911
	// succ:  l40205904 l40205911
l40205904:
	a5 = 0xFFFFF87F
	a3 = a3 & a5
	Mem0[a12:word32] = a3
	a14 = 1
	goto l4020598E
	// succ:  l4020598E
l40205911:
	a10 = a14 - 5
	a3 = 0
	branch a10 != 0x00000000 l40205919
	// succ:  l40205916_1 l40205919
l40205916_1:
	a3 = a9
	// succ:  l40205919
l40205919:
	a3 = a3 & 0x000000FF
	branch a3 != 0x00000000 l40205927
	// succ:  l4020591E l40205927
l4020591E:
	a10 = a14 - 3
	// succ:  l40205921
l40205921:
	branch a10 != 0x00000000 l40205924
	// succ:  l40205921_1 l40205924
l40205921_1:
	a3 = a9
	// succ:  l40205924
l40205924:
	branch a3 == 0x00000000 l402059F9
	// succ:  l40205927 l402059F9
l40205927:
	a14 = a14 + 1
	a14 = a14 & 0x000000FF
	a14 = a14 + 1
	a14 = a14 & 0x000000FF
	goto l402059AB
	// succ:  l402059AB
l40205930:
	branch a14 == 2 l4020599E
	// succ:  l40205933 l4020599E
l40205933:
	goto l402059F9
	// succ:  l402059F9
l40205938:
	branch a14 == 6 l402059A4
	// succ:  l4020593B l402059A4
l4020593B:
	goto l402059F9
	// succ:  l402059F9
l40205940:
	branch a14 == 7 l402059A9
	// succ:  l40205943 l402059A9
l40205943:
	goto l402059F9
	// succ:  l402059F9
l40205946:
	a3 = Mem0[a12 + 0x00000000:word32]
	branch (a3 & 0x00000200) != 0x00000000 l4020594E
	// succ:  l4020594B l4020594E
l4020594B:
	goto l402059F9
	// succ:  l402059F9
l4020594E:
	a10 = 0xFFFFFD7F
	a3 = a3 & a10
	Mem0[a12:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a5
	goto l402059AB
	// succ:  l402059AB
l4020595D:
	a3 = Mem0[a12 + 0x00000000:word32]
	a11 = 0x00000500
	a11 = a3 & a11
	a10 = 0x00000400
	branch a11 == a10 l40205974
	// succ:  l4020596B l40205974
l4020596B:
	branch (a3 & a10) != 0x00000000 l40205971
	// succ:  l4020596E l40205971
l4020596E:
	goto l402059F9
	// succ:  l402059F9
l40205971:
	branch a5 == 0x00000000 l40205A05
	// succ:  l40205974 l40205A05
l40205974:
	branch (a3 & 0x00000200) != 0x00000000 l40205980
	// succ:  l40205977 l40205980
l40205977:
	a10 = Mem0[a1 + 0x00000008:word32]
	Mem0[a1 + 0x00000010:word32] = a13
	a5 = a5 - a10
	Mem0[a1 + 0x0000000C:word32] = a5
	// succ:  l40205980
l40205980:
	a5 = 0xFFFFF87F
	a3 = a3 & a5
	a5 = 0x00000180
	a3 = a3 | a5
	Mem0[a12:word32] = a3
	// succ:  l4020598E
l4020598E:
	a5 = 0
	goto l402059AB
	// succ:  l402059AB
l40205994:
	a4 = 3
	goto l402059AB
	// succ:  l402059AB
l40205999:
	a4 = 2
	goto l402059AB
	// succ:  l402059AB
l4020599E:
	a14 = 3
	goto l402059AB
	// succ:  l402059AB
l402059A4:
	a14 = 7
	goto l402059AB
	// succ:  l402059AB
l402059A9:
	a14 = 8
	// succ:  l402059AB
l402059AB:
	Mem0[a13:byte] = a2
	a13 = a13 + 1
	// succ:  l402059B0
l402059B0:
	a2 = Mem0[a12 + 0x00000008:word32]
	a2 = a2 - 1
	Mem0[a12 + 0x00000008:word32] = a2
	a2 = Mem0[a12 + 0x00000010:word32]
	a2 = a2 + 1
	Mem0[a12 + 0x00000010:word32] = a2
	a2 = Mem0[a8 + 0x00000004:word32]
	a2 = a2 - 1
	Mem0[a8 + 0x00000004:word32] = a2
	branch a2 < 1 l402059D0
	// succ:  l402059C5 l402059D0
l402059C5:
	a2 = Mem0[a8 + 0x00000000:word32]
	a2 = a2 + 1
	Mem0[a8:word32] = a2
	goto l402059F4
	// succ:  l402059F4
l402059D0:
	a10 = Mem0[a12 + 0x00000180:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = a8
	Mem0[a1 + 0x0000001C:word32] = a4
	Mem0[a1 + 0x00000024:word32] = a5
	Mem0[a1 + 0x00000014:word32] = a6
	Mem0[a1 + 0x00000018:word32] = a7
	Mem0[a1 + 0x00000028:word32] = a8
	Mem0[a1 + 0x00000020:word32] = a9
	a0 = 0x402059E6
	call a10 (retsize: 0;)
	a4 = Mem0[a1 + 0x0000001C:word32]
	a5 = Mem0[a1 + 0x00000024:word32]
	a6 = Mem0[a1 + 0x00000014:word32]
	a7 = Mem0[a1 + 0x00000018:word32]
	a8 = Mem0[a1 + 0x00000028:word32]
	a9 = Mem0[a1 + 0x00000020:word32]
	branch a2 != 0x00000000 l402059F9
	// succ:  l402059F4 l402059F9
l402059F4:
	a3 = Mem0[a12 + 0x00000008:word32]
	branch a3 != 0x00000000 l402057B8
	a3 = Mem0[a12 + 0x00000008:word32]
	branch a3 != 0x00000000 l402057B8
	// succ:  l402059F9 l402057B8
l402059F9:
	branch a5 == 0x00000000 l40205A05
	branch a5 == 0x00000000 l40205A05
	// succ:  l402059FB l40205A05
l402059FB:
	a3 = Mem0[a12 + 0x00000000:word32]
	a2 = 0xFFFFFEFF
	a2 = a3 & a2
	Mem0[a12:word32] = a2
	a3 = Mem0[a12 + 0x00000000:word32]
	a2 = 0xFFFFFEFF
	a2 = a3 & a2
	Mem0[a12:word32] = a2
	// succ:  l40205A05
l40205A05:
	a4 = a4 - 1
	branch a4 >=u 0x00000002 l40205A30
	// succ:  l40205A0A l40205A30
l40205A0A:
	goto l40205A26
	// succ:  l40205A26
l40205A0D:
	a13 = a13 - 1
	v14 = Mem0[a13 + 0x00000000:byte]
	a3 = (uint32) v14
	a5 = Mem0[a12 + 0x0000017C:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	a4 = a8
	Mem0[a1 + 0x00000028:word32] = a8
	a0 = 0x40205A1E
	call a5 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000010:word32]
	a8 = Mem0[a1 + 0x00000028:word32]
	a2 = a2 - 1
	Mem0[a12 + 0x00000010:word32] = a2
	// succ:  l40205A26
l40205A26:
	a10 = Mem0[a1 + 0x00000004:word32]
	branch a10 <u a13 l40205A0D
	// succ:  l40205A2B l40205A0D
l40205A2B:
	a14 = 1
	goto l40205C0F
	// succ:  l40205C0F
l40205A30:
	a2 = a14 - 1
	branch a2 >=u 0x00000007 l40205AA0
	// succ:  l40205A35 l40205AA0
l40205A35:
	branch a14 <u 0x00000003 l40205A98
	// succ:  l40205A38 l40205A98
l40205A38:
	a10 = a14 - a13
	a9 = a13
	a10 = a10 & 0x000000FF
	goto l40205A6A
	// succ:  l40205A6A
l40205A45:
	a9 = a9 - 1
	v21 = Mem0[a9 + 0x00000000:byte]
	a3 = (uint32) v21
	a11 = Mem0[a12 + 0x0000017C:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	a4 = a8
	Mem0[a1 + 0x00000024:word32] = a5
	Mem0[a1 + 0x00000028:word32] = a8
	Mem0[a1 + 0x00000020:word32] = a9
	Mem0[a1 + 0x00000014:word32] = a10
	a0 = 0x40205A5C
	call a11 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000010:word32]
	a10 = Mem0[a1 + 0x00000014:word32]
	a2 = a2 - 1
	a9 = Mem0[a1 + 0x00000020:word32]
	a8 = Mem0[a1 + 0x00000028:word32]
	a5 = Mem0[a1 + 0x00000024:word32]
	Mem0[a12 + 0x00000010:word32] = a2
	// succ:  l40205A6A
l40205A6A:
	a2 = a9 + a10
	a2 = a2 & 0x000000FF
	branch a2 >=u 0x00000004 l40205A45
	// succ:  l40205A72 l40205A45
l40205A72:
	a14 = a14 - 3
	a14 = a14 & 0x000000FF
	a13 = a13 - a14
	goto l40205AA0
	// succ:  l40205AA0
l40205A7E:
	a13 = a13 - 1
	v23 = Mem0[a13 + 0x00000000:byte]
	a3 = (uint32) v23
	a5 = Mem0[a12 + 0x0000017C:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	a4 = a8
	Mem0[a1 + 0x00000028:word32] = a8
	a0 = 0x40205A90
	call a5 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000010:word32]
	a8 = Mem0[a1 + 0x00000028:word32]
	a2 = a2 - 1
	Mem0[a12 + 0x00000010:word32] = a2
	// succ:  l40205A98
l40205A98:
	a10 = Mem0[a1 + 0x00000004:word32]
	branch a10 <u a13 l40205A7E
	// succ:  l40205A9D l40205A7E
l40205A9D:
	goto l40245A2B
	// succ:  l40245A2B
l40205AA0:
	a2 = Mem0[a12 + 0x00000000:word32]
	branch (a2 & 0x00000100) == 0x00000000 l40205B16
	// succ:  l40205AA5 l40205B16
l40205AA5:
	branch (a2 & 0x00000400) == 0x00000000 l40205ACD
	// succ:  l40205AA8 l40205ACD
l40205AA8:
	goto l40205AC5
	// succ:  l40205AC5
l40205AAC:
	a13 = a13 - 1
	v16 = Mem0[a13 + 0x00000000:byte]
	a3 = (uint32) v16
	a5 = Mem0[a12 + 0x0000017C:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	a4 = a8
	Mem0[a1 + 0x00000028:word32] = a8
	a0 = 0x40205ABD
	call a5 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000010:word32]
	a8 = Mem0[a1 + 0x00000028:word32]
	a2 = a2 - 1
	Mem0[a12 + 0x00000010:word32] = a2
	// succ:  l40205AC5
l40205AC5:
	a10 = Mem0[a1 + 0x00000004:word32]
	branch a10 <u a13 l40205AAC
	// succ:  l40205ACA l40205AAC
l40205ACA:
	goto l40245A2B
	// succ:  l40245A2B
l40205ACD:
	a4 = Mem0[a12 + 0x00000010:word32]
	a2 = a13 - 1
	v17 = Mem0[a2 + 0x00000000:byte]
	a3 = (uint32) v17
	a4 = a4 - 1
	a9 = 0xFFFFFFDF
	Mem0[a12 + 0x00000010:word32] = a4
	a9 = a3 & a9
	a4 = 69
	branch a9 != a4 l40205AE8
	// succ:  l40205AE3 l40205AE8
l40205AE3:
	a13 = a2
	goto l40205B08
	// succ:  l40205B08
l40205AE8:
	a9 = Mem0[a12 + 0x0000017C:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	a4 = a8
	Mem0[a1 + 0x00000024:word32] = a5
	Mem0[a1 + 0x00000028:word32] = a8
	a0 = 0x40205AF6
	call a9 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000010:word32]
	a6 = a13 - 2
	a2 = a2 - 1
	a8 = Mem0[a1 + 0x00000028:word32]
	a5 = Mem0[a1 + 0x00000024:word32]
	v20 = Mem0[a6 + 0x00000000:byte]
	a3 = (uint32) v20
	a13 = a6
	Mem0[a12 + 0x00000010:word32] = a2
	// succ:  l40205B08
l40205B08:
	a9 = Mem0[a12 + 0x0000017C:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	Mem0[a1 + 0x00000024:word32] = a5
	a4 = a8
	a0 = 0x40205B14
	call a9 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000024:word32]
	// succ:  l40205B16
l40205B16:
	a2 = Mem0[a12 + 0x00000000:word32]
	a14 = 16
	a14 = a14 & a2
	branch a14 != 0x00000000 l40205C0D
	// succ:  l40205B20 l40205C0D
l40205B20:
	Mem0[a13:byte] = a14
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = 0x00000600
	a3 = a3 & a2
	a2 = 0x00000400
	branch a3 != a2 l40205B3E
	// succ:  l40205B31 l40205B3E
l40205B31:
	a10 = Mem0[a1 + 0x00000008:word32]
	a5 = a5 - a10
	a4 = -a5
	branch a5 != 0x00000000 l40205B59
	// succ:  l40205B3B l40205B59
l40205B3B:
	goto l40205B74
	// succ:  l40205B74
l40205B3E:
	a10 = Mem0[a1 + 0x0000000C:word32]
	branch a10 == 0x00000000 l40205B74
	// succ:  l40205B44 l40205B74
l40205B44:
	a10 = Mem0[a1 + 0x00000010:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = a10 + 1
	a4 = a14
	a5 = 10
	a0 = 0x40205B52
	call _strtol_r (retsize: 0;)
	a10 = Mem0[a1 + 0x0000000C:word32]
	a13 = Mem0[a1 + 0x00000010:word32]
	a4 = a2 - a10
	// succ:  l40205B59
l40205B59:
	a2 = 0x0000016F
	a2 = a12 + a2
	branch a13 <u a2 l40205B68
	// succ:  l40205B62 l40205B68
l40205B62:
	a6 = 0x0000016E
	a13 = a12 + a6
	// succ:  l40205B68
l40205B68:
	a3 = 0x402044C8
	a2 = a13 | a13
	a0 = 0x402044CC
	v19 = a0
	a0 = 0x40205B74
	call v19 (retsize: 0;)
	// succ:  l40205B74
l40205B74:
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = Mem0[a1 + 0x00000004:word32]
	a4 = 0x00000000
	a0 = 0x40205B80
	call _strtod_r (retsize: 0;)
	a6 = Mem0[a12 + 0x00000000:word32]
	a4 = a2
	a5 = a3
	a2 = Mem0[a15 + 0x00000008:word32]
	branch (a6 & 0x00000002) == 0x00000000 l40205B94
	// succ:  l40205B8B l40205B94
l40205B8B:
	a6 = a2 + 4
	Mem0[a15 + 0x00000008:word32] = a6
	a3 = 24
	goto l40205B9D
	// succ:  l40205B9D
l40205B94:
	a3 = 24
	branch (a6 & 0x00000004) == 0x00000000 l40205BBE
	// succ:  l40205B99 l40205BBE
l40205B99:
	a6 = a2 + 4
	Mem0[a15 + 0x00000008:word32] = a6
	// succ:  l40205B9D
l40205B9D:
	branch a3 < a6 l40205BA5
	// succ:  l40205BA0 l40205BA5
l40205BA0:
	a2 = Mem0[a15 + 0x00000004:word32]
	goto l40205BAE
	// succ:  l40205BAE
l40205BA5:
	branch a3 < a2 l40205BAC
	// succ:  l40205BA8 l40205BAC
l40205BA8:
	a2 = 36
	Mem0[a15 + 0x00000008:word32] = a2
	// succ:  l40205BAC
l40205BAC:
	a2 = Mem0[a15 + 0x00000000:word32]
	// succ:  l40205BAE
l40205BAE:
	a3 = Mem0[a15 + 0x00000008:word32]
	a2 = a2 + a3
	a2 = a2 - 4
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a2:word32] = a4
	Mem0[a2 + 0x00000004:word32] = a5
	goto l40205C04
	// succ:  l40205C04
l40205BBE:
	a6 = a2 + 4
	Mem0[a15 + 0x00000008:word32] = a6
	branch a3 < a6 l40205BCD
	// succ:  l40205BC5 l40205BCD
l40205BC5:
	a2 = Mem0[a15 + 0x00000004:word32]
	goto l40205BD7
	// succ:  l40205BD7
l40205BCD:
	branch a3 < a2 l40205BD4
	// succ:  l40205BD0 l40205BD4
l40205BD0:
	a2 = 36
	Mem0[a15 + 0x00000008:word32] = a2
	// succ:  l40205BD4
l40205BD4:
	a2 = Mem0[a15 + 0x00000000:word32]
	// succ:  l40205BD7
l40205BD7:
	a3 = Mem0[a15 + 0x00000008:word32]
	a2 = a2 + a3
	a2 = a2 - 4
	a13 = Mem0[a2 + 0x00000000:word32]
	a3 = a5
	a2 = a4
	Mem0[a1 + 0x0000001C:word32] = a4
	Mem0[a1 + 0x00000024:word32] = a5
	a0 = 0x40205BEC
	call __fpclassifyd (retsize: 0;)
	a4 = Mem0[a1 + 0x0000001C:word32]
	a5 = Mem0[a1 + 0x00000024:word32]
	branch a2 != 0x00000000 l40205BF8
	// succ:  l40205BF2 l40205BF8
l40205BF2:
	a0 = 0x40205BF5
	call nanf (retsize: 0;)
	goto l40205C01
	// succ:  l40205C01
l40205BF8:
	a2 = a4 | a4
	a3 = a5 | a5
	a0 = 0x40205C01
	call __truncdfsf2 (retsize: 0;)
	// succ:  l40205C01
l40205C01:
	Mem0[a13:word32] = a2
	// succ:  l40205C04
l40205C04:
	a2 = Mem0[a12 + 0x0000000C:word32]
	a2 = a2 + 1
	Mem0[a12 + 0x0000000C:word32] = a2
	goto l40205C0F
	// succ:  l40205C0F
l40205C0D:
	a14 = 0
	// succ:  l40205C0F
l40205C0F:
	a0 = Mem0[a1 + 0x0000004C:word32]
	a2 = a14
	a12 = Mem0[a1 + 0x00000048:word32]
	a13 = Mem0[a1 + 0x00000044:word32]
	a14 = Mem0[a1 + 0x00000040:word32]
	a15 = Mem0[a1 + 0x0000003C:word32]
	a1 = a1 + 80
	return
	// succ:  fn402058EC_exit
l40245A2B:
fn402058EC_exit:


// _putchar_r
// Return size: 0
void _putchar_r()
_putchar_r_entry:
	// succ:  l40205C24
l40205C24:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x0000001C:word32] = a0
	a12 = a2
	branch a2 == 0x00000000 l40205C40
	// succ:  l40205C2F l40205C40
l40205C2F:
	a2 = Mem0[a2 + 0x00000018:word32]
	branch a2 != 0x00000000 l40205C40
	// succ:  l40205C33 l40205C40
l40205C33:
	a2 = a12
	Mem0[a1:word32] = a3
	a0 = 0x40204470
	v7 = a0
	a0 = 0x40205C3E
	call v7 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	// succ:  l40205C40
l40205C40:
	a4 = Mem0[a12 + 0x00000008:word32]
	a2 = a12 | a12
	a0 = 0x40205C49
	call _putc_r (retsize: 0;)
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 32
	return
	// succ:  _putchar_r_exit
_putchar_r_exit:


// putchar
// Return size: 0
void putchar()
putchar_entry:
	// succ:  l40205C54
l40205C54:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = a2
	a2 = 0x40203754
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a12 == 0x00000000 l40205C72
	// succ:  l40205C66 l40205C72
l40205C66:
	a2 = Mem0[a12 + 0x00000018:word32]
	branch a2 != 0x00000000 l40205C72
	// succ:  l40205C6A l40205C72
l40205C6A:
	a2 = a12
	a0 = 0x40204470
	v7 = a0
	a0 = 0x40205C72
	call v7 (retsize: 0;)
	// succ:  l40205C72
l40205C72:
	a4 = Mem0[a12 + 0x00000008:word32]
	a2 = a12 | a12
	a3 = a13 | a13
	a0 = 0x40205C7E
	call _putc_r (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  putchar_exit
putchar_exit:


// _putc_r
// Return size: 0
void _putc_r()
_putc_r_entry:
	// succ:  l40205C8C
l40205C8C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	a13 = a2
	a14 = a3
	a12 = a4
	branch a2 == 0x00000000 l40205CAC
	// succ:  l40205C9F l40205CAC
l40205C9F:
	a2 = Mem0[a2 + 0x00000018:word32]
	branch a2 != 0x00000000 l40205CAC
	// succ:  l40205CA3 l40205CAC
l40205CA3:
	a2 = a13 | a13
	a0 = 0x40204470
	v10 = a0
	a0 = 0x40205CAC
	call v10 (retsize: 0;)
	// succ:  l40205CAC
l40205CAC:
	a2 = 0x402044D0
	branch a12 != a2 l40205CB8
	// succ:  l40205CB2 l40205CB8
l40205CB2:
	a12 = Mem0[a13 + 0x00000004:word32]
	goto l40205CCC
	// succ:  l40205CCC
l40205CB8:
	a2 = 0x402044D4
	branch a12 != a2 l40205CC4
	// succ:  l40205CBE l40205CC4
l40205CBE:
	a12 = Mem0[a13 + 0x00000008:word32]
	goto l40205CCC
	// succ:  l40205CCC
l40205CC4:
	a2 = 0x402044D8
	branch a12 != a2 l40205CCC
	// succ:  l40205CCA l40205CCC
l40205CCA:
	a12 = Mem0[a13 + 0x0000000C:word32]
	// succ:  l40205CCC
l40205CCC:
	a2 = Mem0[a12 + 0x00000064:word32]
	branch (a2 & 0x00000001) != 0x00000000 l40205CE1
	// succ:  l40205CD2 l40205CE1
l40205CD2:
	v11 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v11
	branch (a2 & 0x00000200) != 0x00000000 l40205CE1
	// succ:  l40205CD8 l40205CE1
l40205CD8:
	a2 = a12 + 88
	a0 = 0x402044DC
	v12 = a0
	a0 = 0x40205CE1
	call v12 (retsize: 0;)
	// succ:  l40205CE1
l40205CE1:
	a2 = Mem0[a12 + 0x00000008:word32]
	a2 = a2 - 1
	Mem0[a12 + 0x00000008:word32] = a2
	branch a2 >= 0x00000000 l40205D16
	// succ:  l40205CEA l40205D16
l40205CEA:
	a3 = Mem0[a12 + 0x00000018:word32]
	branch a2 < a3 l40205D05
	// succ:  l40205CEF l40205D05
l40205CEF:
	a2 = Mem0[a12 + 0x00000000:word32]
	Mem0[a2:byte] = a14
	a2 = Mem0[a12 + 0x00000000:word32]
	v13 = Mem0[a2 + 0x00000000:byte]
	a3 = (uint32) v13
	branch a3 == 10 l40205D00
	// succ:  l40205CFC l40205D00
l40205CFC:
	goto l40205D1D
	// succ:  l40205D1D
l40205D00:
	a2 = a13
	goto l40205D0B
	// succ:  l40205D0B
l40205D05:
	a2 = a13 | a13
	a3 = a14 | a14
	// succ:  l40205D0B
l40205D0B:
	a4 = a12 | a12
	a0 = 0x40205D11
	call __swbuf_r (retsize: 0;)
	a13 = a2
	goto l40205D24
	// succ:  l40205D24
l40205D16:
	a2 = Mem0[a12 + 0x00000000:word32]
	Mem0[a2:byte] = a14
	a2 = Mem0[a12 + 0x00000000:word32]
	// succ:  l40205D1D
l40205D1D:
	a3 = a2 + 1
	Mem0[a12:word32] = a3
	v14 = Mem0[a2 + 0x00000000:byte]
	a13 = (uint32) v14
	// succ:  l40205D24
l40205D24:
	a2 = Mem0[a12 + 0x00000064:word32]
	branch (a2 & 0x00000001) != 0x00000000 l40205D39
	// succ:  l40205D2A l40205D39
l40205D2A:
	v15 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v15
	branch (a2 & 0x00000200) != 0x00000000 l40205D39
	// succ:  l40205D30 l40205D39
l40205D30:
	a2 = a12 + 88
	a0 = 0x402044E0
	v16 = a0
	a0 = 0x40205D39
	call v16 (retsize: 0;)
	// succ:  l40205D39
l40205D39:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  _putc_r_exit
_putc_r_exit:


// putc
// Return size: 0
void putc()
putc_entry:
	// succ:  l40205D48
l40205D48:
	a1 = fp
	a5 = a2
	a2 = 0x40203754
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	a4 = a3
	a3 = a5
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40205D5C
	call fn40305C8C (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  putc_exit
putc_exit:


// _puts_r
// Return size: 0
void _puts_r()
_puts_r_entry:
	// succ:  l40205D64
l40205D64:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000024:word32] = a13
	a13 = a2 | a2
	a2 = a3 | a3
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x0000002C:word32] = a0
	a12 = a3
	a0 = 0x40205D79
	call strlen (retsize: 0;)
	a3 = 0x402044E4
	Mem0[a1 + 0x00000004:word32] = a2
	Mem0[a1 + 0x00000008:word32] = a3
	a3 = 1
	a2 = a2 + a3
	Mem0[a1 + 0x00000018:word32] = a2
	a2 = 2
	Mem0[a1:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a3
	Mem0[a1 + 0x00000010:word32] = a1
	Mem0[a1 + 0x00000014:word32] = a2
	branch a13 == 0x00000000 l40205D9E
	// succ:  l40205D92 l40205D9E
l40205D92:
	a2 = Mem0[a13 + 0x00000018:word32]
	branch a2 != 0x00000000 l40205D9E
	// succ:  l40205D96 l40205D9E
l40205D96:
	a2 = a13
	a0 = 0x40204470
	v8 = a0
	a0 = 0x40205D9E
	call v8 (retsize: 0;)
	// succ:  l40205D9E
l40205D9E:
	a12 = Mem0[a13 + 0x00000008:word32]
	a2 = Mem0[a12 + 0x00000064:word32]
	branch (a2 & 0x00000001) != 0x00000000 l40205DB5
	// succ:  l40205DA6 l40205DB5
l40205DA6:
	v9 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v9
	branch (a2 & 0x00000200) != 0x00000000 l40205DB5
	// succ:  l40205DAC l40205DB5
l40205DAC:
	a2 = a12 + 88
	a0 = 0x402044DC
	v10 = a0
	a0 = 0x40205DB5
	call v10 (retsize: 0;)
	// succ:  l40205DB5
l40205DB5:
	v11 = Mem0[a12 + 0x0000000C:int16]
	a3 = (int32) v11
	a2 = 0x402044E8
	a4 = a3 & a2
	a4 = a4 & 0x0000FFFF
	branch a4 != 0x00000000 l40205DD5
	// succ:  l40205DC3 l40205DD5
l40205DC3:
	a2 = a3 | a2
	Mem0[a12 + 0x0000000C:word16] = a2
	a3 = Mem0[a12 + 0x00000064:word32]
	a2 = 0x402044EC
	a2 = a3 & a2
	Mem0[a12 + 0x00000064:word32] = a2
	// succ:  l40205DD5
l40205DD5:
	a2 = a13 | a13
	a3 = a12 | a12
	a4 = a1 + 16
	a0 = 0x40205DE1
	call __sfvwrite_r (retsize: 0;)
	a13 = 0xFFFFFFFF
	a3 = 10
	branch a2 != 0x00000000 l40205DE9
	// succ:  l40205DE6_1 l40205DE9
l40205DE6_1:
	a13 = a3
	// succ:  l40205DE9
l40205DE9:
	a2 = Mem0[a12 + 0x00000064:word32]
	branch (a2 & 0x00000001) != 0x00000000 l40205DFE
	// succ:  l40205DEF l40205DFE
l40205DEF:
	v13 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v13
	branch (a2 & 0x00000200) != 0x00000000 l40205DFE
	// succ:  l40205DF5 l40205DFE
l40205DF5:
	a2 = a12 + 88
	a0 = 0x402044E0
	v14 = a0
	a0 = 0x40205DFE
	call v14 (retsize: 0;)
	// succ:  l40205DFE
l40205DFE:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a1 = a1 + 48
	return
	// succ:  _puts_r_exit
_puts_r_exit:


// puts
// Return size: 0
void puts()
puts_entry:
	// succ:  l40205E0C
l40205E0C:
	a1 = fp
	a3 = a2
	a2 = 0x40203754
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40205E1C
	call fn40305D64 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  puts_exit
puts_exit:


// setbuf
// Return size: 0
void setbuf()
setbuf_entry:
	// succ:  l40205E24
l40205E24:
	a1 = fp
	a5 = 0x00000002
	a4 = 0x00000000
	a1 = a1 - 16
	branch a3 != 0x00000000 l40205E30
	// succ:  l40205E2D_1 l40205E30
l40205E2D_1:
	a4 = a5
	// succ:  l40205E30
l40205E30:
	a5 = 0x00000080
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40205E39
	call setvbuf (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  setbuf_exit
setbuf_exit:


// setvbuf
// Return size: 0
void setvbuf()
setvbuf_entry:
	// succ:  l40205E40
l40205E40:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = a2
	a2 = 0x40203754
	Mem0[a1 + 0x00000024:word32] = a13
	a13 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1:word32] = a4
	a15 = a3
	a14 = a5
	branch a13 == 0x00000000 l40205E68
	// succ:  l40205E5C l40205E68
l40205E5C:
	a2 = Mem0[a13 + 0x00000018:word32]
	branch a2 != 0x00000000 l40205E68
	// succ:  l40205E60 l40205E68
l40205E60:
	a2 = a13
	a0 = 0x40204470
	v12 = a0
	a0 = 0x40205E68
	call v12 (retsize: 0;)
	// succ:  l40205E68
l40205E68:
	a2 = 0x402044D0
	branch a12 != a2 l40205E74
	// succ:  l40205E6E l40205E74
l40205E6E:
	a12 = Mem0[a13 + 0x00000004:word32]
	goto l40205E89
	// succ:  l40205E89
l40205E74:
	a2 = 0x402044D4
	branch a12 != a2 l40205E81
	// succ:  l40205E7A l40205E81
l40205E7A:
	a12 = Mem0[a13 + 0x00000008:word32]
	goto l40205E89
	// succ:  l40205E89
l40205E81:
	a2 = 0x402044D8
	branch a12 != a2 l40205E89
	// succ:  l40205E87 l40205E89
l40205E87:
	a12 = Mem0[a13 + 0x0000000C:word32]
	// succ:  l40205E89
l40205E89:
	a2 = Mem0[a12 + 0x00000064:word32]
	branch (a2 & 0x00000001) != 0x00000000 l40205E9E
	// succ:  l40205E8F l40205E9E
l40205E8F:
	v13 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v13
	branch (a2 & 0x00000200) != 0x00000000 l40205E9E
	// succ:  l40205E95 l40205E9E
l40205E95:
	a2 = a12 + 88
	a0 = 0x402044DC
	v14 = a0
	a0 = 0x40205E9E
	call v14 (retsize: 0;)
	// succ:  l40205E9E
l40205E9E:
	a2 = Mem0[a1 + 0x00000000:word32]
	branch a2 >=u 0x00000003 l40205EA8
	// succ:  l40205EA3 l40205EA8
l40205EA3:
	a4 = a14 >>u 0x0000001F & 0x00000001
	branch a4 == 0x00000000 l40205EBA
	// succ:  l40205EA8 l40205EBA
l40205EA8:
	a2 = Mem0[a12 + 0x00000064:word32]
	branch (a2 & 0x00000001) == 0x00000000 l40205EB1
	// succ:  l40205EAE l40205EB1
l40205EAE:
	goto l40205F9C
	// succ:  l40205F9C
l40205EB1:
	v15 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v15
	a13 = -1
	goto l40205F8C
	// succ:  l40205F8C
l40205EBA:
	a2 = a13
	a3 = a12
	Mem0[a1 + 0x00000004:word32] = a4
	a0 = 0x40205EC3
	call _fflush_r (retsize: 0;)
	a4 = Mem0[a1 + 0x00000004:word32]
	v17 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v17
	Mem0[a12 + 0x00000004:word32] = a4
	Mem0[a12 + 0x00000018:word32] = a4
	branch (a2 & 0x00000080) == 0x00000000 l40205ED9
	// succ:  l40205ECF l40205ED9
l40205ECF:
	a3 = Mem0[a12 + 0x00000010:word32]
	a2 = a13
	a0 = 0x402044F4
	v18 = a0
	a0 = 0x40205ED9
	call v18 (retsize: 0;)
	// succ:  l40205ED9
l40205ED9:
	v19 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v19
	a2 = 0xFFFFFF7C
	a2 = a3 & a2
	a3 = Mem0[a1 + 0x00000000:word32]
	Mem0[a12 + 0x0000000C:word16] = a2
	branch a3 == 2 l40205F18
	// succ:  l40205EEA l40205F18
l40205EEA:
	branch a15 != 0x00000000 l40205F54
	// succ:  l40205EED l40205F54
l40205EED:
	a3 = 0x00000080
	branch a14 != 0x00000000 l40205EF3
	// succ:  l40205EF0_1 l40205EF3
l40205EF0_1:
	a14 = a3
	// succ:  l40205EF3
l40205EF3:
	a2 = a14
	Mem0[a1 + 0x00000004:word32] = a3
	a0 = 0x402034C4
	v20 = a0
	a0 = 0x40205EFD
	call v20 (retsize: 0;)
	a15 = a2
	a3 = Mem0[a1 + 0x00000004:word32]
	branch a2 != 0x00000000 l40205F48
	// succ:  l40205F04 l40205F48
l40205F04:
	a2 = a3
	a0 = 0x402034C4
	v21 = a0
	a0 = 0x40205F0C
	call v21 (retsize: 0;)
	a15 = a2
	a3 = Mem0[a1 + 0x00000004:word32]
	branch a2 != 0x00000000 l40205F46
	// succ:  l40205F12 l40205F46
l40205F12:
	a13 = -1
	goto l40205F1A
	// succ:  l40205F1A
l40205F18:
	a13 = 0
	// succ:  l40205F1A
l40205F1A:
	v23 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v23
	a2 = 2
	a2 = a3 | a2
	a3 = 0
	Mem0[a12 + 0x00000008:word32] = a3
	a3 = a12 + 71
	a2 = a2 << 16
	Mem0[a12:word32] = a3
	Mem0[a12 + 0x00000010:word32] = a3
	a3 = 1
	a2 = a2 >> 16
	Mem0[a12 + 0x00000014:word32] = a3
	a3 = Mem0[a12 + 0x00000064:word32]
	Mem0[a12 + 0x0000000C:word16] = a2
	branch (a3 & 0x00000001) != 0x00000000 l40205FA4
	// succ:  l40205F40 l40205FA4
l40205F40:
	goto l40205F8C
	// succ:  l40205F8C
l40205F46:
	a14 = a3
	// succ:  l40205F48
l40205F48:
	v25 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v25
	a2 = 0x00000080
	a2 = a3 | a2
	Mem0[a12 + 0x0000000C:word16] = a2
	// succ:  l40205F54
l40205F54:
	a2 = Mem0[a1 + 0x00000000:word32]
	branch a2 != 1 l40205F69
	// succ:  l40205F59 l40205F69
l40205F59:
	v22 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v22
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = a3 | a2
	Mem0[a12 + 0x0000000C:word16] = a2
	a2 = -a14
	Mem0[a12 + 0x00000018:word32] = a2
	// succ:  l40205F69
l40205F69:
	a2 = 0x402044F0
	Mem0[a13 + 0x00000028:word32] = a2
	v24 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v24
	Mem0[a12:word32] = a15
	Mem0[a12 + 0x00000010:word32] = a15
	Mem0[a12 + 0x00000014:word32] = a14
	branch (a2 & 0x00000008) == 0x00000000 l40205F84
	// succ:  l40205F7A l40205F84
l40205F7A:
	a4 = a2 & 0x00000003
	a3 = 0
	branch a4 != 0x00000000 l40205F82
	// succ:  l40205F7F_1 l40205F82
l40205F7F_1:
	a3 = a14
	// succ:  l40205F82
l40205F82:
	Mem0[a12 + 0x00000008:word32] = a3
	// succ:  l40205F84
l40205F84:
	a13 = Mem0[a12 + 0x00000064:word32]
	a13 = a13 & 0x00000001
	branch a13 != 0x00000000 l40205FA2
	// succ:  l40205F8C l40205FA2
l40205F8C:
	branch (a2 & 0x00000200) != 0x00000000 l40205FA4
	branch (a2 & 0x00000200) != 0x00000000 l40205FA4
	// succ:  l40205F8F l40205FA4
l40205F8F:
	a2 = a12 + 88
	a0 = 0x402044E0
	v16 = a0
	a0 = 0x40205F98
	call v16 (retsize: 0;)
	a2 = a12 + 88
	a0 = 0x402044E0
	v26 = a0
	a0 = 0x40205F98
	call v26 (retsize: 0;)
	goto l40205FA4
	// succ:  l40205FA4
l40205F9C:
	a13 = -1
	goto l40205FA4
	// succ:  l40205FA4
l40205FA2:
	a13 = 0
	// succ:  l40205FA4
l40205FA4:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  setvbuf_exit
setvbuf_exit:


// nanf
// Return size: 0
void nanf()
nanf_entry:
	// succ:  l40205FB8
l40205FB8:
	a1 = fp
	a2 = 0x402044F8
	return
	// succ:  nanf_exit
nanf_exit:


// __fpclassifyd
// Return size: 0
void __fpclassifyd()
__fpclassifyd_entry:
	// succ:  l40205FC0
l40205FC0:
	a1 = fp
	a5 = a3
	a3 = a2 | a3
	a4 = a2
	a2 = 2
	branch a3 == 0x00000000 l4020600A
	// succ:  l40205FCB l4020600A
l40205FCB:
	a6 = 1
	a3 = 0
	branch a4 != 0x00000000 l40205FD2
	// succ:  l40205FCF_1 l40205FD2
l40205FCF_1:
	a3 = a6
	// succ:  l40205FD2
l40205FD2:
	a6 = a3 & 0x000000FF
	branch a6 == 0x00000000 l40205FE0
	// succ:  l40205FD8 l40205FE0
l40205FD8:
	a3 = 0x4020449C
	a3 = a3 + a5
	branch a3 == 0x00000000 l4020600A
	// succ:  l40205FE0 l4020600A
l40205FE0:
	a3 = 0x402044FC
	a4 = 0x40204500
	a3 = a3 & a5
	a5 = 0x40204504
	a4 = a3 + a4
	a2 = 4
	branch a5 >=u a4 l4020600A
	// succ:  l40205FF3 l4020600A
l40205FF3:
	a4 = 0x40204508
	a2 = 3
	branch a4 >=u a3 l4020600A
	// succ:  l40205FFB l4020600A
l40205FFB:
	a2 = 0x4020450C
	a4 = 1
	a3 = a3 + a2
	a2 = 0
	branch a3 != 0x00000000 l40206007
	// succ:  l40206004_2 l40206007
l40206004_2:
	a2 = a4
	// succ:  l40206007
l40206007:
	a2 = a6 & a2
	// succ:  l4020600A
l4020600A:
	return
	// succ:  __fpclassifyd_exit
__fpclassifyd_exit:


// strlen
// Return size: 0
void strlen()
strlen_entry:
	// succ:  l4020600C
l4020600C:
	a1 = fp
	a3 = a2 - 4
	a4 = 0x000000FF
	a5 = 0x40204510
	a6 = 0x40204514
	a7 = 0x40204518
	branch (a2 & 0x00000001) != 0x00000000 l40206024
	// succ:  l4020601E l40206024
l4020601E:
	branch (a2 & 0x00000002) != 0x00000000 l4020602E
	// succ:  l40206021 l4020602E
l40206021:
	goto l40206040
	// succ:  l40206040
l40206024:
	v10 = Mem0[a3 + 0x00000004:byte]
	a8 = (uint32) v10
	a3 = a3 + 1
	branch a8 == 0x00000000 l40206050
	// succ:  l4020602B l40206050
l4020602B:
	branch (a3 & 0x00000002) == 0x00000000 l40206040
	// succ:  l4020602E l40206040
l4020602E:
	a3 = a3 + 2
	a8 = Mem0[a3 + 0x00000000:word32]
	branch (a8 & a6) == 0x00000000 l40206060
	// succ:  l40206035 l40206060
l40206035:
	branch (a8 & a7) != 0x00000000 l40206040
	// succ:  l40206038 l40206040
l40206038:
	a3 = a3 + 3
	a2 = a3 - a2
	return
	// succ:  strlen_exit
l40206040:
	a8 = Mem0[a3 + 0x00000004:word32]
	a3 = a3 + 4
	branch (a8 & a4) == 0x00000000 l40206052
	// succ:  l40206047 l40206052
l40206047:
	branch (a8 & a5) == 0x00000000 l40206058
	// succ:  l4020604A l40206058
l4020604A:
	branch (a8 & a6) == 0x00000000 l40206060
	// succ:  l4020604D l40206060
l4020604D:
	branch (a8 & a7) != 0x00000000 l40206040
	// succ:  l40206050 l40206040
l40206050:
	a3 = a3 + 3
	// succ:  l40206052
l40206052:
	a2 = a3 - a2
	return
	// succ:  strlen_exit
l40206058:
	a3 = a3 + 1
	a2 = a3 - a2
	return
	// succ:  strlen_exit
l40206060:
	a3 = a3 + 2
	a2 = a3 - a2
	return
	// succ:  strlen_exit
strlen_exit:


// match
// Return size: 0
void match()
match_entry:
	// succ:  l40206068
l40206068:
	a1 = fp
	a5 = Mem0[a2 + 0x00000000:word32]
	a7 = 25
	goto l40206085
	// succ:  l40206085
l40206071:
	v10 = Mem0[a5 + 0x00000000:byte]
	a4 = (uint32) v10
	a8 = a4 - 65
	a8 = a8 & 0x000000FF
	branch a7 <u a8 l40206080
	// succ:  l4020607D l40206080
l4020607D:
	a4 = a4 + 32
	// succ:  l40206080
l40206080:
	a3 = a3 + 1
	branch a4 != a6 l40206094
	// succ:  l40206085 l40206094
l40206085:
	v7 = Mem0[a3 + 0x00000000:byte]
	a6 = (uint32) v7
	a5 = a5 + 1
	branch a6 != 0x00000000 l40206071
	v12 = Mem0[a3 + 0x00000000:byte]
	a6 = (uint32) v12
	a5 = a5 + 1
	branch a6 != 0x00000000 l40206071
	// succ:  l4020608D l40206071
l4020608D:
	Mem0[a2:word32] = a5
	a2 = 1
	return
	Mem0[a2:word32] = a5
	a2 = 1
	return
	// succ:  match_exit match_exit
l40206094:
	a2 = 0
	return
	// succ:  match_exit
match_exit:


// _strtod_r
// Return size: 0
void _strtod_r()
_strtod_r_entry:
	// succ:  l40206098
l40206098:
	a1 = fp
	a9 = 0x000000A0
	a1 = a1 - a9
	Mem0[a1 + 0x00000020:word32] = a2
	a10 = 0x402044A0
	a2 = 0
	a11 = 0x402044A0
	Mem0[a1 + 0x00000098:word32] = a12
	Mem0[a1 + 0x00000058:word32] = a4
	Mem0[a1 + 0x0000009C:word32] = a0
	Mem0[a1 + 0x00000094:word32] = a13
	Mem0[a1 + 0x00000090:word32] = a14
	Mem0[a1 + 0x0000008C:word32] = a15
	a12 = a3
	Mem0[a1 + 0x0000000C:word32] = a2
	Mem0[a1 + 0x00000010:word32] = a3
	a4 = 13
	a5 = 43
	a6 = 45
	a7 = 9
	a3 = Mem0[a1 + 0x00000010:word32]
	v17 = Mem0[a3 + 0x00000000:byte]
	a2 = (uint32) v17
	branch a4 <u a2 l402060D9
	// succ:  l402060D0 l402060D9
l402060D0:
	branch a2 >=u a7 l402060FA
	// succ:  l402060D3 l402060FA
l402060D3:
	branch a2 == 0x00000000 l40206498
	goto l402060D6
	// succ:  l402060D6 l402060D3_thunk_fn40206261
l402060D3_thunk_fn40206261:
	call fn40206261 (retsize: 0;)
	return
	// succ:  _strtod_r_exit
l402060D6:
	goto l40206102
	// succ:  l40206102
l402060D9:
	branch a2 == a5 l402060EA
	// succ:  l402060DC l402060EA
l402060DC:
	branch a2 == a6 l402060E5
	// succ:  l402060DF l402060E5
l402060DF:
	branch a2 != 32 l40206102
	// succ:  l402060E2 l40206102
l402060E2:
	goto l402060FA
	// succ:  l402060FA
l402060E5:
	a9 = 1
	goto l402060EC
	// succ:  l402060EC
l402060EA:
	a9 = 0
	// succ:  l402060EC
l402060EC:
	a2 = a3 + 1
	Mem0[a1 + 0x00000010:word32] = a2
	v20 = Mem0[a3 + 0x00000001:byte]
	a2 = (uint32) v20
	Mem0[a1 + 0x0000003C:word32] = a9
	branch a2 != 0x00000000 l40206106
	// succ:  l402060F7 l40206106
l402060F7:
	call fn40206261 (retsize: 0;)
	return
	// succ:  l40206498 _strtod_r_exit
l402060FA:
	a3 = a3 + 1
	Mem0[a1 + 0x00000010:word32] = a3
	goto l402460C8
	// succ:  l402460C8
l40206102:
	a9 = 0
	Mem0[a1 + 0x0000003C:word32] = a9
	// succ:  l40206106
l40206106:
	a13 = Mem0[a1 + 0x00000010:word32]
	a5 = 0
	v18 = Mem0[a13 + 0x00000000:byte]
	a2 = (uint32) v18
	Mem0[a1 + 0x00000030:word32] = a5
	a3 = 48
	branch a2 == a3 l40206117
	// succ:  l40206114 l40206117
l40206114:
	call fn402061E4 (retsize: 0;)
	return
	// succ:  l402061E4 _strtod_r_exit
l40206117:
	v19 = Mem0[a13 + 0x00000001:byte]
	a3 = (uint32) v19
	a4 = 0x00000058
	branch a3 == a4 l40206129
	// succ:  l40206120 l40206129
l40206120:
	a4 = 0x00000078
	branch a3 == a4 l40206129
	// succ:  l40206126 l40206129
l40206126:
	goto l402061CC
	// succ:  l402061CC
l40206129:
	a2 = Mem0[a1 + 0x00000020:word32]
	a4 = 0x40204524
	a7 = Mem0[a1 + 0x0000003C:word32]
	a3 = a1 + 16
	a5 = a1 + 8
	a6 = a1 + 12
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206140
	call __gethex (retsize: 0;)
	a12 = a2 & 0x00000007
	a14 = a2
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a12 != 0x00000000 l40206150
	// succ:  l4020614D l40206150
l4020614D:
	// succ:  l4020614D_thunk_fn40206D81 l4020614D_thunk_fn40206D81
l4020614D_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  _strtod_r_exit
l4020614D_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  _strtod_r_exit
l40206150:
	branch a12 != 6 l4020615A
	// succ:  l40206153 l4020615A
l40206153:
	a13 = a13 + 1
	Mem0[a1 + 0x00000010:word32] = a13
	// succ:  l40206155_thunk_fn40206261
l40206155_thunk_fn40206261:
	call fn40206261 (retsize: 0;)
	return
	// succ:  _strtod_r_exit
l4020615A:
	a4 = Mem0[a1 + 0x0000000C:word32]
	branch a4 == 0x00000000 l4020617A
	// succ:  l40206160 l4020617A
l40206160:
	a2 = a1
	a3 = 53
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x4020616D
	call __copybits (retsize: 0;)
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x0000000C:word32]
	a0 = 0x40206174
	call _Bfree (retsize: 0;)
	a11 = Mem0[a1 + 0x00000070:word32]
	a10 = Mem0[a1 + 0x0000006C:word32]
	// succ:  l4020617A
l4020617A:
	a3 = Mem0[a1 + 0x00000008:word32]
	branch a12 >=u 0x00000007 l402061BD
	// succ:  l4020617F l402061BD
l4020617F:
	a2 = 0x40204528
	a12 = a2 + a12 * 0x00000004
	a2 = Mem0[a12 + 0x00000000:word32]
	call a2 (retsize: 4;)
	return
	// succ:  _strtod_r_exit
l402061BD:
	branch (a14 & 0x00000008) != 0x00000000 l402061C3
	// succ:  l402061C0 l402061C3
l402061C0:
	// succ:  l402061C0_thunk_fn40206D81 l402061C0_thunk_fn40206D81
l402061C0_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  _strtod_r_exit
l402061C0_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  _strtod_r_exit
l402061C3:
	a2 = 0x4020449C
	a11 = a2 | a11
	// succ:  l402061C9_thunk_fn40206D81
l402061C9_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  _strtod_r_exit
l402061CC:
	a3 = a2
	// succ:  l402061CE
l402061CE:
	a2 = Mem0[a1 + 0x00000010:word32]
	a4 = a2 + 1
	Mem0[a1 + 0x00000010:word32] = a4
	v22 = Mem0[a2 + 0x00000001:byte]
	a2 = (uint32) v22
	branch a2 == a3 l402061CE
	// succ:  l402061DA l402061CE
l402061DA:
	branch a2 != 0x00000000 l402061DF
	// succ:  l402061DC l402061DF
l402061DC:
	// succ:  l402061DC_thunk_fn40206D81 l402061DC_thunk_fn40206D81
l402061DC_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  _strtod_r_exit
l402061DC_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  _strtod_r_exit
l402061DF:
	a5 = 1
	Mem0[a1 + 0x00000030:word32] = a5
	// succ:  l402061E1_thunk_fn402061E4
l402061E1_thunk_fn402061E4:
	call fn402061E4 (retsize: 0;)
	return
	// succ:  _strtod_r_exit
l402460C8:
_strtod_r_exit:


// fn402061E4
// Return size: 0
void fn402061E4()
fn402061E4_entry:
	// succ:  l402061E4
l402061E4:
	a1 = fp
	a9 = Mem0[a1 + 0x00000010:word32]
	a15 = 0
	Mem0[a1 + 0x00000034:word32] = a9
	Mem0[a1 + 0x00000028:word32] = a15
	Mem0[a1 + 0x00000024:word32] = a15
	a4 = 9
	a5 = 8
	goto l40206218
	// succ:  l40206218
l402061F5:
	a9 = Mem0[a1 + 0x00000024:word32]
	branch a5 < a9 l40206208
	// succ:  l402061FA l40206208
l402061FA:
	a9 = Mem0[a1 + 0x00000028:word32]
	a6 = a9 + a9 * 0x00000004
	a2 = a2 + a6 * 0x00000002
	Mem0[a1 + 0x00000028:word32] = a2
	goto l4020620E
	// succ:  l4020620E
l40206208:
	a15 = a15 + a15 * 0x00000004
	a15 = a2 + a15 * 0x00000002
	// succ:  l4020620E
l4020620E:
	a9 = Mem0[a1 + 0x00000024:word32]
	a13 = a13 + 1
	a9 = a9 + 1
	Mem0[a1 + 0x00000024:word32] = a9
	Mem0[a1 + 0x00000010:word32] = a13
	// succ:  l40206218
l40206218:
	a13 = Mem0[a1 + 0x00000010:word32]
	v8 = Mem0[a13 + 0x00000000:byte]
	a14 = (uint32) v8
	a2 = a14 - 48
	a3 = a2 & 0x000000FF
	branch a4 >=u a3 l402061F5
	// succ:  l40206226 l402061F5
l40206226:
	a2 = Mem0[a1 + 0x00000020:word32]
	// succ:  l40206226_thunk_fn40206228
l40206226_thunk_fn40206228:
	call fn40206228 (retsize: 0;)
	return
	// succ:  fn402061E4_exit
fn402061E4_exit:


// fn4020621C
// Return size: 0
void fn4020621C()
fn4020621C_entry:
	// succ:  l4020621C
l4020621C:
	a1 = fp
	__reserved()
	a2 = a0 ^ a13
	__reserved()
	__reserved()
	// succ:  l40206225_thunk_fn40206228
l40206225_thunk_fn40206228:
	call fn40206228 (retsize: 0;)
	return
	// succ:  fn4020621C_exit
fn4020621C_exit:


// fn40206228
// Return size: 0
void fn40206228()
fn40206228_entry:
	// succ:  l40206228
l40206228:
	a1 = fp
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206231
	call _localeconv_r (retsize: 0;)
	a3 = Mem0[a2 + 0x00000000:word32]
	a2 = Mem0[a1 + 0x00000020:word32]
	Mem0[a1 + 0x0000005C:word32] = a3
	a0 = 0x4020623B
	call _localeconv_r (retsize: 0;)
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x40206240
	call fn4030600C (retsize: 0;)
	a3 = Mem0[a1 + 0x0000005C:word32]
	a4 = a2
	a2 = a13
	a0 = 0x4020624A
	call strncmp (retsize: 0;)
	a13 = a2
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l40206252_thunk_fn40206261
	goto l40206252_thunk_fn40206254
	// succ:  l40206252_thunk_fn40206254 l40206252_thunk_fn40206261
l40206228:
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206231
	call _localeconv_r (retsize: 0;)
	a3 = Mem0[a2 + 0x00000000:word32]
	a2 = Mem0[a1 + 0x00000020:word32]
	Mem0[a1 + 0x0000005C:word32] = a3
	a0 = 0x4020623B
	call _localeconv_r (retsize: 0;)
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x40206240
	call fn4030600C (retsize: 0;)
	a3 = Mem0[a1 + 0x0000005C:word32]
	a4 = a2
	a2 = a13
	a0 = 0x4020624A
	call strncmp (retsize: 0;)
	a13 = a2
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l40206261
	goto l40206252_thunk_fn40206254
	// succ:  l40206252_thunk_fn40206254 l40206252_thunk_fn40206261
l40206252_thunk_fn40206254:
	call fn40206254 (retsize: 0;)
	return
	// succ:  fn40206228_exit l40206252_thunk_fn40206254
l40206252_thunk_fn40206254:
	call fn40206254 (retsize: 0;)
	return
	// succ:  fn40206228_exit
l40206252_thunk_fn40206254:
	call fn40206254 (retsize: 0;)
	return
	// succ:  fn40206228_exit
l40206252_thunk_fn40206261:
	call fn40206261 (retsize: 0;)
	return
	// succ:  fn40206228_exit
l40206252_thunk_fn40206261:
	call fn40206261 (retsize: 0;)
	return
	// succ:  fn40206228_exit
fn40206228_exit:


// fn40206254
// Return size: 0
void fn40206254()
fn40206254_entry:
	// succ:  l40206254
l40206254:
	a1 = v3
	a5 = 0
	a4 = a14
	a13 = a5
	a14 = Mem0[a1 + 0x00000024:word32]
	Mem0[a1 + 0x0000002C:word32] = a5
	// succ:  l4020625C_thunk_fn40206261
l4020625C_thunk_fn40206261:
	call fn40206261 (retsize: 0;)
	return
	// succ:  fn40206254_exit
fn40206254_exit:


// fn40206261
// Return size: 0
void fn40206261()
fn40206261_entry:
	// succ:  l40206261
l40206261:
	a1 = v3
	a2 = Mem0[a1 + 0x00000020:word32]
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a14 = Mem0[a1 + 0x00000010:word32]
	a0 = 0x40206270
	call _localeconv_r (retsize: 0;)
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x40206275
	call fn4030600C (retsize: 0;)
	a2 = a14 + a2
	a9 = Mem0[a1 + 0x00000024:word32]
	Mem0[a1 + 0x00000010:word32] = a2
	v10 = Mem0[a2 + 0x00000000:byte]
	a4 = (uint32) v10
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a9 != 0x00000000 l4020631C
	// succ:  l40206287 l4020631C
l40206287:
	a5 = a9
	a3 = 48
	goto l40206299
	// succ:  l40206299
l4020628E:
	a2 = Mem0[a1 + 0x00000010:word32]
	a5 = a5 + 1
	a4 = a2 + 1
	Mem0[a1 + 0x00000010:word32] = a4
	v27 = Mem0[a2 + 0x00000001:byte]
	a4 = (uint32) v27
	// succ:  l40206299
l40206299:
	branch a4 == a3 l4020628E
	// succ:  l4020629C l4020628E
l4020629C:
	a2 = a4 - 49
	a3 = 8
	branch a3 >=u a2 l402062A7
	// succ:  l402062A4 l402062A7
l402062A4:
	goto l40206330
	// succ:  l40206330
l402062A7:
	a9 = Mem0[a1 + 0x00000010:word32]
	a13 = a5
	a5 = 0
	Mem0[a1 + 0x00000034:word32] = a9
	a14 = a5
	// succ:  l402062AF_thunk_fn40206320
l402062AF_thunk_fn40206320:
	call fn40206320 (retsize: 0;)
	return
	// succ:  fn40206261_exit
l4020631C:
	a14 = Mem0[a1 + 0x00000024:word32]
	a5 = a13
	// succ:  l4020631E_thunk_fn40206320
l4020631E_thunk_fn40206320:
	call fn40206320 (retsize: 0;)
	return
	// succ:  fn40206261_exit
l40206330:
	a14 = 0
	a3 = 1
	a13 = a14
	Mem0[a1 + 0x0000002C:word32] = a3
	// succ:  l40206336_thunk_fn40206320
l40206336_thunk_fn40206320:
	call fn40206320 (retsize: 0;)
	return
	// succ:  fn40206261_exit
fn40206261_exit:


// fn4020630C
// Return size: 0
void fn4020630C()
fn4020630C_entry:
	// succ:  l4020630C
l4020630C:
	a1 = fp
	a3 = a9 >>u 8
	// succ:  l4020630C_thunk_fn4020630F
l4020630C_thunk_fn4020630F:
	call fn4020630F (retsize: 0;)
	return
	// succ:  fn4020630C_exit
fn4020630C_exit:


// fn4020630F
// Return size: 0
void fn4020630F()
fn4020630F_entry:
	// succ:  l4020630F
l4020630F:
	a1 = fp
	a5 = a2
	a4 = a3 + 1
	Mem0[a1 + 0x00000010:word32] = a4
	v7 = Mem0[a3 + 0x00000001:byte]
	a4 = (uint32) v7
	goto l40206318_thunk_fn40206320
	// succ:  l40206318_thunk_fn40206320
l4020630F:
	a5 = a2
	a4 = a3 + 1
	Mem0[a1 + 0x00000010:word32] = a4
	v8 = Mem0[a3 + 0x00000001:byte]
	a4 = (uint32) v8
	// succ:  l40206315_thunk_fn40206320
l40206315_thunk_fn40206320:
	call fn40206320 (retsize: 0;)
	return
	// succ:  fn4020630F_exit
l40206318_thunk_fn40206320:
	call fn40206320 (retsize: 0;)
	return
	// succ:  fn4020630F_exit
fn4020630F_exit:


// fn40206320
// Return size: 0
void fn40206320()
fn40206320_entry:
	goto l40206320
	// succ:  l40206320
l402062B1:
	a4 = a4 - 48
	a2 = a5 + 1
	branch a4 == 0x00000000 l4020630D
	// succ:  l402062B9 l4020630D
l402062B9:
	a13 = a13 + a2
	a3 = a14 + 1
	a7 = 8
	a8 = 16
	goto l402062E1
	// succ:  l402062E1
l402062C4:
	a6 = a3 - 1
	branch a7 < a6 l402062D6
	// succ:  l402062C9 l402062D6
l402062C9:
	a9 = Mem0[a1 + 0x00000028:word32]
	a6 = a9 + a9 * 0x00000004
	a6 = a6 << 31
	Mem0[a1 + 0x00000028:word32] = a6
	goto l402062DF
	// succ:  l402062DF
l402062D6:
	branch a8 < a3 l402062DF
	// succ:  l402062D9 l402062DF
l402062D9:
	a15 = a15 + a15 * 0x00000004
	a15 = a15 << 31
	// succ:  l402062DF
l402062DF:
	a3 = a3 + 1
	// succ:  l402062E1
l402062E1:
	a6 = a3 - a14
	branch a6 < a2 l402062C4
	// succ:  l402062E7 l402062C4
l402062E7:
	a2 = 0
	branch a5 >= 0x00000000 l402062EC
	// succ:  l402062E9_1 l402062EC
l402062E9_1:
	a5 = a2
	// succ:  l402062EC
l402062EC:
	a5 = a14 + a5
	a3 = 8
	a14 = a5 + 1
	branch a3 < a5 l40206302
	// succ:  l402062F5 l40206302
l402062F5:
	a9 = Mem0[a1 + 0x00000028:word32]
	a6 = a9 + a9 * 0x00000004
	a6 = a4 + a6 * 0x00000002
	Mem0[a1 + 0x00000028:word32] = a6
	goto l4020630D
	// succ:  l4020630D
l40206302:
	a3 = 16
	branch a3 < a14 l4020630D
	// succ:  l40206307 l4020630D
l40206307:
	a15 = a15 + a15 * 0x00000004
	a15 = a4 + a15 * 0x00000002
	// succ:  l4020630D
l4020630D:
	a3 = Mem0[a1 + 0x00000010:word32]
	// succ:  l4020630D_thunk_fn4020630F
l4020630D_thunk_fn4020630F:
	call fn4020630F (retsize: 0;)
	return
	// succ:  fn40206320_exit
l40206320:
	a1 = v3
	a2 = a4 - 48
	a3 = 9
	branch a3 >=u a2 l402062B1
	// succ:  l40206328 l402062B1
l40206328:
	a2 = 1
	Mem0[a1 + 0x0000002C:word32] = a2
	// succ:  l40206338
l40206338:
	a3 = 0xFFFFFFDF
	a3 = a4 & a3
	a2 = 69
	branch a3 == a2 l40206346
	// succ:  l40206343 l40206346
l40206343:
	goto l402063E4
	// succ:  l402063E4
l40206346:
	a9 = Mem0[a1 + 0x00000030:word32]
	a2 = a14 | a5
	a2 = a2 | a9
	branch a2 == 0x00000000 l40206498
	goto l40206351
	// succ:  l40206351 l4020634E_thunk_fn4020640A
l4020634E_thunk_fn4020640A:
	call fn4020640A (retsize: 0;)
	return
	// succ:  fn40206320_exit
l40206351:
	a12 = Mem0[a1 + 0x00000010:word32]
	a2 = a12 + 1
	Mem0[a1 + 0x00000010:word32] = a2
	v20 = Mem0[a12 + 0x00000001:byte]
	a4 = (uint32) v20
	a2 = 43
	branch a4 == a2 l40206368
	// succ:  l4020635F l40206368
l4020635F:
	a2 = 45
	branch a4 == a2 l40206372
	// succ:  l40206364 l40206372
l40206364:
	goto l4020636D
	// succ:  l4020636D
l40206368:
	a6 = 0
	goto l40206374
	// succ:  l40206374
l4020636D:
	a6 = 0
	goto l4020637B
	// succ:  l4020637B
l40206372:
	a6 = 1
	// succ:  l40206374
l40206374:
	a2 = a12 + 2
	Mem0[a1 + 0x00000010:word32] = a2
	v24 = Mem0[a12 + 0x00000002:byte]
	a4 = (uint32) v24
	// succ:  l4020637B
l4020637B:
	a2 = a4 - 48
	a3 = 9
	branch a3 <u a2 l402063E2
	// succ:  l40206383 l402063E2
l40206383:
	a3 = 48
	goto l40206391
	// succ:  l40206391
l40206388:
	a2 = Mem0[a1 + 0x00000010:word32]
	a4 = a2 + 1
	Mem0[a1 + 0x00000010:word32] = a4
	v23 = Mem0[a2 + 0x00000001:byte]
	a4 = (uint32) v23
	// succ:  l40206391
l40206391:
	branch a4 == a3 l40206388
	// succ:  l40206394 l40206388
l40206394:
	a3 = a4 - 49
	a7 = 8
	a2 = 0
	branch a7 <u a3 l402063E6
	// succ:  l4020639E l402063E6
l4020639E:
	a3 = a4 - 48
	a8 = Mem0[a1 + 0x00000010:word32]
	a9 = 9
	goto l402063B2
	// succ:  l402063B2
l402063A9:
	a3 = a3 + a3 * 0x00000004
	a3 = a4 + a3 * 0x00000002
	a3 = a3 - 48
	// succ:  l402063B2
l402063B2:
	a4 = Mem0[a1 + 0x00000010:word32]
	a2 = a4 + 1
	Mem0[a1 + 0x00000010:word32] = a2
	v22 = Mem0[a4 + 0x00000001:byte]
	a4 = (uint32) v22
	a7 = a4 - 48
	a7 = a7 & 0x000000FF
	branch a9 >=u a7 l402063A9
	// succ:  l402063C4 l402063A9
l402063C4:
	a8 = a2 - a8
	a2 = 0x4020451C
	a9 = 8
	a7 = a2
	branch a9 < a8 l402063D8
	// succ:  l402063D1 l402063D8
l402063D1:
	a2 = a3
	branch a7 >= a3 l402063D8
	// succ:  l402063D6 l402063D8
l402063D6:
	a2 = a7
	// succ:  l402063D8
l402063D8:
	a3 = -a2
	branch a6 == 0x00000000 l402063DE
	// succ:  l402063DB_1 l402063DE
l402063DB_1:
	a2 = a3
	// succ:  l402063DE
l402063DE:
	goto l402063E6
	// succ:  l402063E6
l402063E2:
	Mem0[a1 + 0x00000010:word32] = a12
	// succ:  l402063E4
l402063E4:
	a2 = 0
	// succ:  l402063E6
l402063E6:
	branch a14 != 0x00000000 l402064A1
	// succ:  l402063E9 l402064A1
l402063E9:
	a9 = Mem0[a1 + 0x00000030:word32]
	a5 = a5 | a9
	branch a5 == 0x00000000 l402063F3
	// succ:  l402063F0 l402063F3
l402063F0:
	// succ:  l402063F0_thunk_fn40206D81 l402063F0_thunk_fn40206D81
l402063F0_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  fn40206320_exit
l402063F0_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  fn40206320_exit
l402063F3:
	a2 = Mem0[a1 + 0x0000002C:word32]
	branch a2 != 0x00000000 l40206498
	goto l402063F8
	// succ:  l402063F8 l402063F5_thunk_fn4020640A
l402063F5_thunk_fn4020640A:
	call fn4020640A (retsize: 0;)
	return
	// succ:  fn40206320_exit
l402063F8:
	a2 = 78
	branch a4 == a2 l40206451
	goto l402063FD
	// succ:  l402063FD l402063FA_thunk_fn4020640A
l402063FA_thunk_fn4020640A:
	call fn4020640A (retsize: 0;)
	return
	// succ:  fn40206320_exit
l402063FD:
	branch a2 < a4 l40206408
	// succ:  l40206400 l40206408
l40206400:
	a2 = 73
	branch a4 == a2 l40206417
	goto l40206405
	// succ:  l40206405 l40206402_thunk_fn4020640A
l40206402_thunk_fn4020640A:
	call fn4020640A (retsize: 0;)
	return
	// succ:  fn40206320_exit
l40206405:
l40206408:
	a2 = 0x00000069
	// succ:  l40206408_thunk_fn4020640A
l40206408_thunk_fn4020640A:
	call fn4020640A (retsize: 0;)
	return
	// succ:  fn40206320_exit
l402064A1:
	a9 = Mem0[a1 + 0x00000024:word32]
	a13 = a2 - a13
	branch a9 != 0x00000000 l402064A9
	// succ:  l402064A6_1 l402064A9
l402064A6_1:
	a9 = a14
	// succ:  l402064A9
l402064A9:
	Mem0[a1 + 0x00000030:word32] = a13
	Mem0[a1 + 0x00000024:word32] = a9
	a2 = 16
	a12 = a14
	branch a2 >= a14 l402064B6
	// succ:  l402064B4 l402064B6
l402064B4:
	a12 = a2
	// succ:  l402064B6
l402064B6:
	a2 = Mem0[a1 + 0x00000028:word32]
	a0 = 0x402064BB
	call __floatunsidf (retsize: 0;)
	a4 = 9
	a10 = a2
	a11 = a3
	branch a4 >= a12 l402064F8
	// succ:  l402064C4 l402064F8
l402064C4:
	a5 = 0x40204544
	a4 = a12 - 9
	a4 = a5 + a4 * 0x00000008
	a5 = Mem0[a4 + 0x00000004:word32]
	a4 = Mem0[a4 + 0x00000000:word32]
	a0 = 0x402064D6
	call fn4030487C (retsize: 0;)
	a6 = a2
	a2 = a15
	Mem0[a1 + 0x00000060:word32] = a6
	Mem0[a1 + 0x0000005C:word32] = a3
	a0 = 0x402064E3
	call __floatunsidf (retsize: 0;)
	a6 = Mem0[a1 + 0x00000060:word32]
	a7 = Mem0[a1 + 0x0000005C:word32]
	a4 = a2
	a5 = a3
	a2 = a6
	a3 = a7
	a0 = 0x402064F4
	call __adddf3 (retsize: 0;)
	a10 = a2
	a11 = a3
	// succ:  l402064F8
l402064F8:
	a2 = 15
	branch a2 < a14 l40206578
	// succ:  l402064FD l40206578
l402064FD:
	a9 = Mem0[a1 + 0x00000030:word32]
	branch a9 != 0x00000000 l40206504
	// succ:  l40206501 l40206504
l40206501:
	// succ:  l40206501_thunk_fn40206D81 l40206501_thunk_fn40206D81
l40206501_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  fn40206320_exit
l40206501_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  fn40206320_exit
l40206504:
	branch a9 < 1 l40206556
	// succ:  l40206507 l40206556
l40206507:
	a3 = 22
	branch a3 < a9 l4020651D
	// succ:  l4020650C l4020651D
l4020650C:
	a2 = 0x40204544
	a4 = a10
	a2 = a2 + a9 * 0x00000008
	a3 = Mem0[a2 + 0x00000004:word32]
	a5 = a11
	a2 = Mem0[a2 + 0x00000000:word32]
	// succ:  l4020651A_thunk_fn40206549
l4020651A_thunk_fn40206549:
	call fn40206549 (retsize: 0;)
	return
	// succ:  fn40206320_exit
l4020651D:
	a3 = 0x00000025
	a9 = Mem0[a1 + 0x00000030:word32]
	a3 = a3 - a14
	branch a3 < a9 l40206578
	// succ:  l40206529 l40206578
l40206529:
	a12 = 0x40204544
	a14 = a2 - a14
	a2 = a12 + a14 * 0x00000008
	a3 = Mem0[a2 + 0x00000004:word32]
	// succ:  l40206532_thunk_fn40206534
l40206532_thunk_fn40206534:
	call fn40206534 (retsize: 0;)
	return
	// succ:  fn40206320_exit
l40206556:
	a9 = Mem0[a1 + 0x00000030:word32]
	a2 = 0xFFFFFFEA
	branch a9 < a2 l40206578
	// succ:  l4020655F l40206578
l4020655F:
	a3 = 0x40204544
	a13 = -a9
	a13 = a3 + a13 * 0x00000008
	a4 = Mem0[a13 + 0x00000000:word32]
	a5 = Mem0[a13 + 0x00000004:word32]
	a2 = a10
	a3 = a11
	a0 = 0x40206574
	call __divdf3 (retsize: 0;)
	goto l4024654C
	// succ:  l4024654C
l40206578:
	a9 = Mem0[a1 + 0x00000030:word32]
	a15 = a14 - a12
	a15 = a9 + a15
	branch a15 >= 1 l40206587
	// succ:  l40206584 l40206587
l40206584:
	goto l40206638
	// succ:  l40206638
l40206587:
	a2 = a15 & 0x0000000F
	branch a2 == 0x00000000 l402065A2
	// succ:  l4020658D l402065A2
l4020658D:
	a3 = 0x40204544
	a4 = a10
	a2 = a3 + a2 * 0x00000008
	a3 = Mem0[a2 + 0x00000004:word32]
	a2 = Mem0[a2 + 0x00000000:word32]
	a5 = a11
	a0 = 0x4020659E
	call fn4030487C (retsize: 0;)
	a10 = a2
	a11 = a3
	// succ:  l402065A2
l402065A2:
	a6 = -16
	a15 = a15 & a6
	branch a15 == 0x00000000 l4020670C
	goto l402065AA
	// succ:  l402065AA l402065A7_thunk_fn402065AB
l402065A7_thunk_fn402065AB:
	call fn402065AB (retsize: 0;)
	return
	// succ:  fn40206320_exit
l402065AA:
	a2 = 0x00000134
	// succ:  l402065AA_thunk_fn402065AB
l402065AA_thunk_fn402065AB:
	call fn402065AB (retsize: 0;)
	return
	// succ:  fn40206320_exit
l40206638:
	branch a15 == 0x00000000 l4020670C
	goto l4020663B
	// succ:  l4020663B l40206638_thunk_fn402065AB
l40206638_thunk_fn402065AB:
	call fn402065AB (retsize: 0;)
	return
	// succ:  fn40206320_exit
l4020663B:
	a15 = -a15
	a2 = a15 & 0x0000000F
	branch a2 == 0x00000000 l40206659
	// succ:  l40206643 l40206659
l40206643:
	a4 = 0x40204544
	a3 = a11
	a4 = a4 + a2 * 0x00000008
	a5 = Mem0[a4 + 0x00000004:word32]
	a4 = Mem0[a4 + 0x00000000:word32]
	a2 = a10 | a10
	a0 = 0x40206655
	call __divdf3 (retsize: 0;)
	a10 = a2
	a11 = a3
	// succ:  l40206659
l40206659:
	a15 = a15 >> 4
	branch a15 == 0x00000000 l4020670C
	goto l4020665F
	// succ:  l4020665F l4020665C_thunk_fn402065AB
l4020665C_thunk_fn402065AB:
	call fn402065AB (retsize: 0;)
	return
	// succ:  fn40206320_exit
l4020665F:
	a2 = 31
	branch a2 >= a15 l40206670
	// succ:  l40206664 l40206670
l40206664:
	a12 = 0
	a13 = a12
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a12
	// succ:  l4020666C_thunk_fn402066F8
l4020666C_thunk_fn402066F8:
	call fn402066F8 (retsize: 0;)
	return
	// succ:  fn40206320_exit
l40206670:
	a3 = 16
	a3 = a15 & a3
	a2 = 0x0000006A
	a9 = 0
	branch a3 == 0x00000000 l4020667D
	// succ:  l4020667A_1 l4020667D
l4020667A_1:
	a9 = a2
	// succ:  l4020667D
l4020667D:
	Mem0[a1 + 0x0000002C:word32] = a9
	a2 = a10
	a3 = a11
	a12 = 0x40204560
	goto l40206699
	// succ:  l40206699
l40206689:
	branch (a15 & 0x00000001) == 0x00000000 l40206694
	// succ:  l4020668C l40206694
l4020668C:
	a4 = Mem0[a12 + 0x00000000:word32]
	a5 = Mem0[a12 + 0x00000004:word32]
	a0 = 0x40206694
	call fn4030487C (retsize: 0;)
	// succ:  l40206694
l40206694:
	a15 = a15 >> 1
	a12 = a12 + 8
	// succ:  l40206699
l40206699:
	branch a15 >= 1 l40206689
	// succ:  l4020669C l40206689
l4020669C:
	a9 = Mem0[a1 + 0x0000002C:word32]
	a10 = a2
	a11 = a3
	branch a9 == 0x00000000 l402066D8
	// succ:  l402066A4 l402066D8
l402066A4:
	a2 = a11 >>u 0x00000014 & 0x000007FF
	a4 = 0x0000006B
	a2 = a4 - a2
	branch a2 < 1 l402066D8
	// succ:  l402066B0 l402066D8
l402066B0:
	a4 = 31
	branch a4 >= a2 l402066CD
	// succ:  l402066B5 l402066CD
l402066B5:
	a4 = 52
	a10 = 0
	a11 = 0x40204564
	branch a4 < a2 l402066D8
	// succ:  l402066BF l402066D8
l402066BF:
	a4 = -1
	SAR = 0x00000020 - a2
	a2 = a4 << SAR
	a11 = a2 & a3
	goto l402066D8
	// succ:  l402066D8
l402066CD:
	a3 = -1
	SAR = 0x00000020 - a2
	a2 = a3 << SAR
	a10 = a2 & a10
	// succ:  l402066D8
l402066D8:
	a4 = 0x402044A0
	a5 = 0x402044A0
	a2 = a10
	a3 = a11 | a11
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x402066EC
	call __nedf2 (retsize: 0;)
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l40206664
	// succ:  l402066F5 l40206664
l402066F5:
	call fn402065AB (retsize: 0;)
	return
	// succ:  l40206710 fn40206320_exit
l40206710:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x00000034:word32]
	a4 = Mem0[a1 + 0x00000024:word32]
	a6 = Mem0[a1 + 0x00000028:word32]
	a5 = a14
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206723
	call __s2b (retsize: 0;)
	Mem0[a1 + 0x00000028:word32] = a2
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l4020672B_thunk_fn402065B0
	goto l4020672B_thunk_fn4020672E
	// succ:  l4020672B_thunk_fn4020672E l4020672B_thunk_fn402065B0
l4020672B_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn40206320_exit
l4020672B_thunk_fn4020672E:
	call fn4020672E (retsize: 0;)
	return
	// succ:  fn40206320_exit l4020672B_thunk_fn4020672E
l4020672B_thunk_fn4020672E:
	call fn4020672E (retsize: 0;)
	return
	// succ:  fn40206320_exit
l4024654C:
fn40206320_exit:


// fn40206404
// Return size: 0
void fn40206404()
fn40206404_entry:
	// succ:  l40206404
l40206404:
	a1 = fp
	a1 = 0x401CF31C
	// succ:  l40206404_thunk_fn40206407
l40206404_thunk_fn40206407:
	call fn40206407 (retsize: 0;)
	return
	// succ:  fn40206404_exit
fn40206404_exit:


// fn40206407
// Return size: 0
void fn40206407()
fn40206407_entry:
	// succ:  l40206407
l40206407:
	a1 = fp
	a2 = a0 + a2 * 0x00000004
	goto l40206407_thunk_fn4020640A
	// succ:  l40206407_thunk_fn4020640A
l40206407:
	call fn4020640A (retsize: 0;)
	return
	// succ:  l40206498 fn40206407_exit
l40206407_thunk_fn4020640A:
	call fn4020640A (retsize: 0;)
	return
	// succ:  fn40206407_exit
l40206498:
	Mem0[a1 + 0x00000010:word32] = a12
	// succ:  l4020649A
l4020649A:
	a9 = 0
	Mem0[a1 + 0x0000003C:word32] = a9
	// succ:  l4020649E_thunk_fn40206D81
l4020649E_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  fn40206407_exit
fn40206407_exit:


// fn4020640A
// Return size: 0
void fn4020640A()
fn4020640A_entry:
	// succ:  l4020640A
l4020640A:
	a1 = fp
	Mem0[a7 + 0x00000008:word32] = a6
l4020640A:
	branch a4 == a2 l40206417
	// succ:  l4020640E l40206417
l4020640E:
	a2 = 0x0000006E
	branch a4 == a2 l40206451
	// succ:  l40206414 l40206451
l40206414:
	call fn40206407 (retsize: 0;)
	return
	// succ:  l40206498 fn4020640A_exit
l40206417:
	a3 = 0x40204530
	a2 = a1 + 16
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206426
	call fn40306068 (retsize: 0;)
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l40206498
	goto l4020642F
	// succ:  l4020642F l4020642C_thunk_fn40206407
l4020642C_thunk_fn40206407:
	call fn40206407 (retsize: 0;)
	return
	// succ:  fn4020640A_exit
l4020642F:
	a2 = Mem0[a1 + 0x00000010:word32]
	a3 = 0x40204534
	a2 = a2 - 1
	Mem0[a1 + 0x00000010:word32] = a2
	a2 = a1 + 16
	a0 = 0x4020643E
	call fn40306068 (retsize: 0;)
	branch a2 != 0x00000000 l40206448
	// succ:  l40206440 l40206448
l40206440:
	a2 = Mem0[a1 + 0x00000010:word32]
	a2 = a2 + 1
	Mem0[a1 + 0x00000010:word32] = a2
	// succ:  l40206448
l40206448:
	a11 = 0x40204460
	goto l40206493
	// succ:  l40206493
l40206451:
	a3 = 0x40204538
	a2 = a1 + 16
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206460
	call fn40306068 (retsize: 0;)
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l40206498
	goto l40206469
	// succ:  l40206469 l40206466_thunk_fn40206407
l40206466_thunk_fn40206407:
	call fn40206407 (retsize: 0;)
	return
	// succ:  fn4020640A_exit
l40206469:
	a2 = Mem0[a1 + 0x00000010:word32]
	v13 = Mem0[a2 + 0x00000000:byte]
	a3 = (uint32) v13
	a2 = 0x00000028
	branch a3 != a2 l40206490
	// succ:  l40206475 l40206490
l40206475:
	a3 = 0x4020453C
	a2 = a1 + 16
	a4 = a1
	a0 = 0x40206480
	call __hexnan (retsize: 0;)
	branch a2 != 5 l40206490
	// succ:  l40206483 l40206490
l40206483:
	a2 = 0x40204460
	a3 = Mem0[a1 + 0x00000004:word32]
	a10 = Mem0[a1 + 0x00000000:word32]
	a11 = a3 | a2
	// succ:  l4020648D_thunk_fn40206D81
l4020648D_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  fn4020640A_exit
l40206490:
	a11 = 0x40204540
	// succ:  l40206493
l40206493:
	a10 = 0
	// succ:  l40206495_thunk_fn40206D81
l40206495_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  fn4020640A_exit
fn4020640A_exit:


// fn40206534
// Return size: 0
void fn40206534()
fn40206534_entry:
	// succ:  l40206534
l40206534:
	a1 = fp
	a2 = Mem0[a2 + 0x00000000:word32]
	a4 = a10
	a5 = a11
	a0 = 0x4020653D
	call fn4030487C (retsize: 0;)
	a9 = Mem0[a1 + 0x00000030:word32]
	a14 = a9 - a14
	a12 = a12 + a14 * 0x00000008
	a4 = Mem0[a12 + 0x00000000:word32]
	a5 = Mem0[a12 + 0x00000004:word32]
	// succ:  l40206547_thunk_fn40206549
l40206547_thunk_fn40206549:
	call fn40206549 (retsize: 0;)
	return
	// succ:  fn40206534_exit
fn40206534_exit:


// fn40206549
// Return size: 0
void fn40206549()
fn40206549_entry:
	// succ:  l40206549
l40206549:
	a1 = fp
	a0 = 0x4020654C
	call fn4030487C (retsize: 0;)
	a10 = a2
	a11 = a3
	goto l40206550_thunk_fn40206D81
	// succ:  l40206550_thunk_fn40206D81
l40206549:
	a0 = 0x4020654C
	call fn4030487C (retsize: 0;)
	a10 = a2
	a11 = a3
	goto l40206550_thunk_fn40206D81
	// succ:  l40206550_thunk_fn40206D81
l40206550_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  fn40206549_exit
l40206550_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  fn40206549_exit
fn40206549_exit:


// fn402065A8
// Return size: 0
void fn402065A8()
fn402065A8_entry:
	// succ:  l402065A8
l402065A8:
	a1 = fp
	__reserved()
	// succ:  l402065A8_thunk_fn402065AB
l402065A8_thunk_fn402065AB:
	call fn402065AB (retsize: 0;)
	return
	// succ:  fn402065A8_exit
fn402065A8_exit:


// fn402065AB
// Return size: 0
void fn402065AB()
fn402065AB_entry:
	// succ:  l402065AB
l402065AB:
	a1 = fp
	a10 = 0x4020427C
	v4 = Mem0[a15 + 0x00000018:uint16]
	a10 = (uint32) v4
	goto l402065AE_thunk_fn402065B1
	// succ:  l402065AE_thunk_fn402065B1
l402065AB:
	branch a2 >= a15 l402065D0
	// succ:  l402065AD_thunk_fn402065B0 l402065D0
l402065AD_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn402065AB_exit l402065AD_thunk_fn402065B0
l402065AD_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn402065AB_exit
l402065AE_thunk_fn402065B1:
	call fn402065B1 (retsize: 0;)
	return
	// succ:  fn402065AB_exit
l402065D0:
	a15 = a15 >> 4
	a2 = a10
	a3 = a11
	a13 = 0
	a12 = 0x40204548
	goto l402065F3
	// succ:  l402065F3
l402065E1:
	branch (a15 & 0x00000001) == 0x00000000 l402065EE
	// succ:  l402065E4 l402065EE
l402065E4:
	a4 = a12 + a13 * 0x00000008
	a5 = Mem0[a4 + 0x00000004:word32]
	a4 = Mem0[a4 + 0x00000000:word32]
	a0 = 0x402065EE
	call fn4030487C (retsize: 0;)
	// succ:  l402065EE
l402065EE:
	a13 = a13 + 1
	a15 = a15 >> 1
	// succ:  l402065F3
l402065F3:
	branch a15 >= 2 l402065E1
	// succ:  l402065F6 l402065E1
l402065F6:
	a10 = a2 | a2
	a2 = 0x4020454C
	a4 = a10 | a10
	a11 = a2 + a3
	a2 = 0x40204548
	a5 = a11
	a13 = a2 + a13 * 0x00000008
	a2 = Mem0[a13 + 0x00000000:word32]
	a3 = Mem0[a13 + 0x00000004:word32]
	a0 = 0x40206610
	call fn4030487C (retsize: 0;)
	a10 = a2
	a2 = 0x40204460
	a11 = a3
	a4 = 0x40204550
	a2 = a2 & a11
	branch a4 <u a2 l4020661D_thunk_fn402065B0
	goto l40206620
	// succ:  l40206620 l4020661D_thunk_fn402065B0
l4020661D_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn402065AB_exit
l40206620:
	a4 = 0x40204554
	branch a4 >=u a2 l40206630
	// succ:  l40206626 l40206630
l40206626:
	a11 = 0x40204558
	a10 = -1
	goto l4020670C
	// succ:  l4020670C
l40206630:
	a2 = 0x4020455C
	a11 = a3 + a2
	// succ:  l4020670C
l4020670C:
	a9 = 0
	Mem0[a1 + 0x0000002C:word32] = a9
	// succ:  l4020670E_thunk_fn40206320
l4020670E_thunk_fn40206320:
	call fn40206320 (retsize: 0;)
	return
	// succ:  fn402065AB_exit
fn402065AB_exit:


// fn402065B0
// Return size: 0
void fn402065B0()
fn402065B0_entry:
	call fn402066F8 (retsize: 0;)
	return
	// succ:  l402065B0 fn402065B0_exit
l402065B0:
	a1 = v3
	a12 = 0
	// succ:  l402065B0_thunk_fn402065B1
l402065B0_thunk_fn402065B1:
	call fn402065B1 (retsize: 0;)
	return
	// succ:  fn402065B0_exit
fn402065B0_exit:


// fn402065B1
// Return size: 0
void fn402065B1()
fn402065B1_entry:
	// succ:  l402065B1
l402065B1:
	a1 = fp
	a13 = 13
	a9 = 12
	a10 = 0x401EACDC
	goto l402065B5_thunk_fn402065B8
	// succ:  l402065B5_thunk_fn402065B8
l402065B1:
	a13 = a12
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a12
	goto l402065B6_thunk_fn402065B8
	// succ:  l402065B6_thunk_fn402065B8
l402065B5_thunk_fn402065B8:
	call fn402065B8 (retsize: 0;)
	return
	// succ:  fn402065B1_exit
l402065B6_thunk_fn402065B8:
	call fn402065B8 (retsize: 0;)
	return
	// succ:  fn402065B1_exit
fn402065B1_exit:


// fn402065B8
// Return size: 0
void fn402065B8()
fn402065B8_entry:
	// succ:  l402065B8
l402065B8:
	a1 = v3
	a9 = Mem0[a1 + 0x00000020:word32]
	a2 = 34
	Mem0[a9:word32] = a2
	a9 = Mem0[a1 + 0x00000028:word32]
	a10 = 0
	a11 = 0x40204460
	branch a9 == a10 l402065CB
	// succ:  l402065C8 l402065CB
l402065C8:
	call fn4020672E (retsize: 0;)
	return
	// succ:  l40206D52 fn402065B8_exit
l402065CB:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  l402065CB_thunk_fn40206D81 fn402065B8_exit
l402065CB_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  fn402065B8_exit
fn402065B8_exit:


// fn402066F8
// Return size: 0
void fn402066F8()
fn402066F8_entry:
	// succ:  l402066F8
l402066F8:
	a1 = v3
	a9 = Mem0[a1 + 0x00000020:word32]
	a2 = 34
	Mem0[a9:word32] = a2
	a9 = Mem0[a1 + 0x00000028:word32]
	a10 = 0x402044A0
	a11 = 0x402044A0
	branch a9 != 0x00000000 l40206D52
	goto l40206709
	// succ:  l40206709 l40206706_thunk_fn402065B0
l40206706_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn402066F8_exit
l40206709:
	a0 = 0x401C8B3C
	Mem0[a1 + 0x0000002C:word32] = a9
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x00000034:word32]
	a4 = Mem0[a1 + 0x00000024:word32]
	a6 = Mem0[a1 + 0x00000028:word32]
	a5 = a14
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206723
	call __s2b (retsize: 0;)
	Mem0[a1 + 0x00000028:word32] = a2
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l402065B0
	// succ:  l40206729_thunk_fn4020672E l40206729_thunk_fn402065B0 l40206729_thunk_fn40206D81
l40206729_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn402066F8_exit
l40206729_thunk_fn4020672E:
	call fn4020672E (retsize: 0;)
	return
	// succ:  fn402066F8_exit
l40206729_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  fn402066F8_exit
fn402066F8_exit:


// fn40206708
// Return size: 0
void fn40206708()
fn40206708_entry:
	// succ:  l40206708
l40206708:
	a1 = fp
	__reserved()
	// succ:  l40206708_thunk_fn402066F8
l40206708_thunk_fn402066F8:
	call fn402066F8 (retsize: 0;)
	return
	// succ:  fn40206708_exit
fn40206708_exit:


// fn4020672E
// Return size: 0
void fn4020672E()
fn4020672E_entry:
	call fn402066F8 (retsize: 0;)
	return
	// succ:  l4020672E fn4020672E_exit
l4020672E:
	a1 = v3
	a9 = Mem0[a1 + 0x00000030:word32]
	a12 = 0
	a2 = -a9
	branch a9 < 0x00000000 l40206738
	// succ:  l40206735_1 l40206738
l40206735_1:
	a2 = a12
	// succ:  l40206738
l40206738:
	Mem0[a1 + 0x00000050:word32] = a2
	a13 = a12
	a9 = Mem0[a1 + 0x00000028:word32]
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a9 + 0x00000004:word32]
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x4020674C
	call _Balloc (retsize: 0;)
	Mem0[a1 + 0x00000024:word32] = a2
	branch a2 == 0x00000000 l402065B8
	goto l40206751
	// succ:  l40206751 l4020674E_thunk_fn402065B0
l4020674E_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn4020672E_exit
l40206751:
	a9 = Mem0[a1 + 0x00000028:word32]
	a2 = a2 + 12
	a4 = Mem0[a9 + 0x00000010:word32]
	a3 = a9 + 12
	a4 = a4 + 2
	a4 = a4 << 30
	a0 = 0x40203130
	v13 = a0
	a0 = 0x40206766
	call v13 (retsize: 0;)
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	a2 = Mem0[a1 + 0x00000020:word32]
	a4 = a10
	a5 = a11
	a6 = a1 + 8
	a7 = a1 | a1
	Mem0[a1 + 0x00000040:word32] = a10
	Mem0[a1 + 0x00000044:word32] = a11
	a0 = 0x40206780
	call __d2b (retsize: 0;)
	Mem0[a1 + 0x0000000C:word32] = a2
	branch a2 == 0x00000000 l402065B8
	goto l40206785
	// succ:  l40206785 l40206782_thunk_fn402065B0
l40206782_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn4020672E_exit
l40206785:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = 1
	a0 = 0x4020678C
	call __i2b (retsize: 0;)
	a13 = a2
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l402065B8
	goto l40206797
	// succ:  l40206797 l40206794_thunk_fn402065B0
l40206794_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn4020672E_exit
l40206797:
	a5 = 0
	a9 = Mem0[a1 + 0x00000030:word32]
	Mem0[a1 + 0x00000034:word32] = a5
	branch a5 >= a9 l402067A2
	// succ:  l402067A0 l402067A2
l402067A0:
	Mem0[a1 + 0x00000034:word32] = a9
	// succ:  l402067A2
l402067A2:
	a2 = Mem0[a1 + 0x00000008:word32]
	branch a2 < 0x00000000 l402067B1
	// succ:  l402067A7 l402067B1
l402067A7:
	a9 = Mem0[a1 + 0x00000050:word32]
	a6 = Mem0[a1 + 0x00000034:word32]
	a15 = a9 + a2
	goto l402067B9
	// succ:  l402067B9
l402067B1:
	a5 = Mem0[a1 + 0x00000034:word32]
	a15 = Mem0[a1 + 0x00000050:word32]
	a6 = a5 - a2
	// succ:  l402067B9
l402067B9:
	a9 = Mem0[a1 + 0x0000002C:word32]
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = a2 - a9
	a14 = 54
	a2 = a2 + a3
	a4 = 0xFFFFFC03
	a14 = a14 - a3
	branch a2 >= a4 l40206800
	// succ:  l402067CD l40206800
l402067CD:
	a4 = a4 - a2
	a5 = 31
	a14 = a14 - a4
	a3 = 1
	branch a5 < a4 l402067EC
	// succ:  l402067DA l402067EC
l402067DA:
	SAR = 0x00000020 - a4
	a3 = a3 << SAR
	a5 = 0
	Mem0[a1 + 0x00000054:word32] = a3
	Mem0[a1 + 0x00000038:word32] = a5
	goto l40206809
	// succ:  l40206809
l402067EC:
	a4 = 0xFFFFFBE3
	a2 = a4 - a2
	SAR = 0x00000020 - a2
	a2 = a3 << SAR
	Mem0[a1 + 0x00000038:word32] = a2
	Mem0[a1 + 0x00000054:word32] = a3
	goto l40206809
	// succ:  l40206809
l40206800:
	a9 = 0
	a5 = 1
	Mem0[a1 + 0x00000038:word32] = a9
	Mem0[a1 + 0x00000054:word32] = a5
	// succ:  l40206809
l40206809:
	a9 = Mem0[a1 + 0x0000002C:word32]
	a5 = a15 + a14
	a14 = a6 + a14
	a14 = a14 + a9
	a2 = a5
	branch a15 >= a5 l40206818
	// succ:  l40206816 l40206818
l40206816:
	a2 = a15
	// succ:  l40206818
l40206818:
	branch a14 >= a2 l4020681D
	// succ:  l4020681B l4020681D
l4020681B:
	a2 = a14
	// succ:  l4020681D
l4020681D:
	branch a2 < 1 l40206829
	// succ:  l40206820 l40206829
l40206820:
	a5 = a5 - a2
	a14 = a14 - a2
	a15 = a15 - a2
	// succ:  l40206829
l40206829:
	a9 = Mem0[a1 + 0x00000050:word32]
	branch a9 == 0x00000000 l4020686E
	// succ:  l4020682F l4020686E
l4020682F:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = a13
	a4 = a9
	Mem0[a1 + 0x00000060:word32] = a5
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206842
	call __pow5mult (retsize: 0;)
	a13 = a2
	branch a2 == 0x00000000 l402065B8
	goto l40206847
	// succ:  l40206847 l40206844_thunk_fn402065B0
l40206844_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn4020672E_exit
l40206847:
	a4 = Mem0[a1 + 0x0000000C:word32]
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = a13 | a13
	a0 = 0x40206851
	call __multiply (retsize: 0;)
	a4 = a2
	branch a2 == 0x00000000 l402065B8
	goto l40206856
	// succ:  l40206856 l40206853_thunk_fn402065B0
l40206853_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn4020672E_exit
l40206856:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a1 + 0x0000005C:word32] = a4
	a0 = 0x40206860
	call _Bfree (retsize: 0;)
	a4 = Mem0[a1 + 0x0000005C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	a10 = Mem0[a1 + 0x0000006C:word32]
	a5 = Mem0[a1 + 0x00000060:word32]
	Mem0[a1 + 0x0000000C:word32] = a4
	// succ:  l4020686E
l4020686E:
	branch a5 >= 1 l40206878
	// succ:  l40206871 l40206878
l40206871:
	a5 = Mem0[a1 + 0x00000034:word32]
	branch a5 != 0x00000000 l40206898
	// succ:  l40206875 l40206898
l40206875:
	goto l402068B4
	// succ:  l402068B4
l40206878:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x0000000C:word32]
	a4 = a5 | a5
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x4020688A
	call __lshift (retsize: 0;)
	Mem0[a1 + 0x0000000C:word32] = a2
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 != 0x00000000 l40206871
	// succ:  l40206895 l40206871
l40206895:
	call fn402068D1 (retsize: 0;)
	return
	// succ:  l402465B8 fn4020672E_exit
l40206898:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x00000024:word32]
	a4 = Mem0[a1 + 0x00000034:word32]
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x402068A9
	call __pow5mult (retsize: 0;)
	Mem0[a1 + 0x00000024:word32] = a2
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l402065B8
	goto l402068B4
	// succ:  l402068B4 l402068B1_thunk_fn402065B0
l402068B1_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn4020672E_exit
l402068B4:
	branch a14 < 1 l402068D1
	branch a14 < 1 l402068D1
	goto l402068B7
	// succ:  l402068B7 l402068B4_thunk_fn402068D1
l402068B4_thunk_fn402068D1:
	call fn402068D1 (retsize: 0;)
	return
	// succ:  fn4020672E_exit
l402068B7:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x00000024:word32]
	a4 = a14
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x402068C6
	call __lshift (retsize: 0;)
	Mem0[a1 + 0x00000024:word32] = a2
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l402065B8
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x00000024:word32]
	a4 = a14
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x402068C6
	call __lshift (retsize: 0;)
	Mem0[a1 + 0x00000024:word32] = a2
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l402065B8
	goto l402068CE_thunk_fn402068D1
	// succ:  l402068CE_thunk_fn402068D1 l402068CE_thunk_fn402065B0
l402068CE_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn4020672E_exit
l402068CE_thunk_fn402068D1:
	call fn402068D1 (retsize: 0;)
	return
	// succ:  fn4020672E_exit
fn4020672E_exit:


// fn402068BC
// Return size: 0
void fn402068BC()
fn402068BC_entry:
	// succ:  l402068BC
l402068BC:
	a1 = fp
	__reserved()
	a11 = a2 + 1
	a6 = 0x401F7D34
	Mem0[a2:word32] = a8
	Mem0[a1 + 0x00000024:word32] = a2
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l402068CE_thunk_fn402065B8
	goto l402068CE_thunk_fn402068D1
	// succ:  l402068CE_thunk_fn402068D1 l402068CE_thunk_fn402065B8
l402068CE_thunk_fn402065B8:
	call fn402065B8 (retsize: 0;)
	return
	// succ:  fn402068BC_exit
l402068CE_thunk_fn402068D1:
	call fn402068D1 (retsize: 0;)
	return
	// succ:  fn402068BC_exit l402068CE_thunk_fn402068D1
l402068CE_thunk_fn402068D1:
	call fn402068D1 (retsize: 0;)
	return
	// succ:  fn402068BC_exit
fn402068BC_exit:


// fn402068D1
// Return size: 0
void fn402068D1()
fn402068D1_entry:
	// succ:  l402068D1
l402068D1:
	a1 = v3
	branch a15 < 1 l402068F0
	branch a15 < 1 l402068F0
	// succ:  l402068D4 l402068F0
l402068D4:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = a13 | a13
	a4 = a15 | a15
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x402068E5
	call __lshift (retsize: 0;)
	a13 = a2
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l402065B8
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = a13 | a13
	a4 = a15 | a15
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x402068E5
	call __lshift (retsize: 0;)
	a13 = a2
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l402065B8
	goto l402068F0
	// succ:  l402068F0 l402068ED_thunk_fn402065B0
l402068ED_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn402068D1_exit
l402068F0:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x0000000C:word32]
	a4 = Mem0[a1 + 0x00000024:word32]
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206901
	call __mdiff (retsize: 0;)
	a12 = a2
	branch a2 == 0x00000000 l402065B8
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x0000000C:word32]
	a4 = Mem0[a1 + 0x00000024:word32]
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206901
	call __mdiff (retsize: 0;)
	a12 = a2
	branch a2 == 0x00000000 l402065B8
	goto l40206906
	// succ:  l40206906 l40206903_thunk_fn402065B0
l40206903_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn402068D1_exit
l40206906:
	a9 = Mem0[a2 + 0x0000000C:word32]
	a2 = 0
	Mem0[a12 + 0x0000000C:word32] = a2
	a3 = a13
	a2 = a12
	Mem0[a1 + 0x00000034:word32] = a9
	a0 = 0x40206915
	call __mcmp (retsize: 0;)
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 >= 0x00000000 l4020696C
	a9 = Mem0[a2 + 0x0000000C:word32]
	a2 = 0
	Mem0[a12 + 0x0000000C:word32] = a2
	a3 = a13
	a2 = a12
	Mem0[a1 + 0x00000034:word32] = a9
	a0 = 0x40206915
	call __mcmp (retsize: 0;)
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 >= 0x00000000 l4020696C
	// succ:  l4020691E l4020696C
l4020691E:
	a9 = Mem0[a1 + 0x00000034:word32]
	branch a9 != 0x00000000 l40206D25
	a9 = Mem0[a1 + 0x00000034:word32]
	branch a9 != 0x00000000 l40206D25
	// succ:  l40206923 l40206D25
l40206923:
	branch a10 != 0x00000000 l40206D25
	branch a10 != 0x00000000 l40206D25
	// succ:  l40206926 l40206D25
l40206926:
	a2 = 0x40204508
	branch (a2 & a11) == 0x00000000 l4020692F
	a2 = 0x40204508
	branch (a2 & a11) == 0x00000000 l4020692F
	// succ:  l4020692C l4020692F
l4020692C:
	goto l40206D25
	// succ:  l40206D25
l4020692F:
	a2 = 0x40204460
	a3 = 0x40204568
	a2 = a2 & a11
	branch a3 <u a2 l4020693E
	// succ:  l4020693B l4020693E
l4020693B:
	goto l40206D25
	// succ:  l40206D25
l4020693E:
	a2 = Mem0[a12 + 0x00000014:word32]
	branch a2 != 0x00000000 l4020694A
	// succ:  l40206942 l4020694A
l40206942:
	a2 = Mem0[a12 + 0x00000010:word32]
	branch a2 >= 2 l4020694A
	// succ:  l40206947 l4020694A
l40206947:
	goto l40206D25
	// succ:  l40206D25
l4020694A:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = a12
	a4 = 1
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206959
	call __lshift (retsize: 0;)
	a3 = a13
	a12 = a2
	a0 = 0x40206960
	call __mcmp (retsize: 0;)
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 >= 1 l402069C9
	// succ:  l40206969 l402069C9
l40206969:
	goto l40206D25
	// succ:  l40206D25
l4020696C:
	branch a2 != 0x00000000 l40206A5E
	// succ:  l4020696F l40206A5E
l4020696F:
	a9 = Mem0[a1 + 0x00000034:word32]
	a2 = 0x40204508
	branch a9 == 0x00000000 l402069C4
	// succ:  l40206977 l402069C4
l40206977:
	a4 = a2 & a11
	a3 = a11
	branch a4 != a2 l402069F8
	// succ:  l4020697F l402069F8
l4020697F:
	a9 = Mem0[a1 + 0x0000002C:word32]
	a4 = a10 | a10
	a2 = 0xFFFFFFFF
	branch a9 == 0x00000000 l402069A5
	// succ:  l4020698A l402069A5
l4020698A:
	a5 = 0x40204460
	a6 = 0x4020456C
	a5 = a11 & a5
	branch a6 <u a5 l402069A5
	// succ:  l40206996 l402069A5
l40206996:
	a5 = a5 >>u 0x00000014 & 0x00000FFF
	a6 = 0x0000006B
	a5 = a6 - a5
	SAR = 0x00000020 - a5
	a2 = a2 << SAR
	// succ:  l402069A5
l402069A5:
	branch a4 != a2 l402069F8
	// succ:  l402069A8 l402069F8
l402069A8:
	a2 = 0x40204558
	branch a3 != a2 l402069B4
	// succ:  l402069AE l402069B4
l402069AE:
	branch a4 != -1 l402069B4
	// succ:  l402069B1 l402069B4
l402069B1:
	goto l402465B8
	// succ:  l402465B8
l402069B4:
	a2 = 0x40204460
	a10 = 0
	a3 = a3 & a2
	a2 = 0x40204570
	a11 = a3 + a2
	goto l40206D25
	// succ:  l40206D25
l402069C4:
	branch (a2 & a11) != 0x00000000 l402069F8
	// succ:  l402069C7 l402069F8
l402069C7:
	branch a10 != 0x00000000 l402069F8
	// succ:  l402069C9 l402069F8
l402069C9:
	a9 = Mem0[a1 + 0x0000002C:word32]
	a2 = 0x40204460
	branch a9 == 0x00000000 l402069E5
	// succ:  l402069D0 l402069E5
l402069D0:
	a4 = 0x40204568
	a3 = a2 & a11
	branch a4 <u a3 l402069E5
	// succ:  l402069D9 l402069E5
l402069D9:
	a2 = 0x40204564
	branch a2 >=u a3 l402069E2
	// succ:  l402069DF l402069E2
l402069DF:
	goto l40206D29
	// succ:  l40206D29
l402069E2:
	goto l402466F8
	// succ:  l402466F8
l402069E5:
	a3 = 0x40204500
	a2 = a2 & a11
	a2 = a2 + a3
	a3 = 0x40204508
	a10 = -1
	a11 = a2 | a3
	goto l40206D25
	// succ:  l40206D25
l402069F8:
	a5 = Mem0[a1 + 0x00000038:word32]
	branch a5 == 0x00000000 l40206A05
	// succ:  l402069FC l40206A05
l402069FC:
	branch (a5 & a11) != 0x00000000 l40206A02
	// succ:  l402069FF l40206A02
l402069FF:
	goto l40206D25
	// succ:  l40206D25
l40206A02:
	goto l40206A0E
	// succ:  l40206A0E
l40206A05:
	a9 = Mem0[a1 + 0x00000054:word32]
	branch (a9 & a10) != 0x00000000 l40206A0E
	// succ:  l40206A0B l40206A0E
l40206A0B:
	goto l40206D25
	// succ:  l40206D25
l40206A0E:
	a9 = Mem0[a1 + 0x00000034:word32]
	a2 = a10 | a10
	a3 = a11
	a4 = Mem0[a1 + 0x0000002C:word32]
	branch a9 == 0x00000000 l40206A31
	// succ:  l40206A1A l40206A31
l40206A1A:
	a0 = 0x40206A1D
	call sulp (retsize: 0;)
	a4 = a2
	a5 = a3
	a2 = Mem0[a1 + 0x00000040:word32]
	a3 = Mem0[a1 + 0x00000044:word32]
	a0 = 0x40206A2A
	call __adddf3 (retsize: 0;)
	a10 = a2
	a11 = a3
	goto l40206D25
	// succ:  l40206D25
l40206A31:
	a0 = 0x40206A34
	call sulp (retsize: 0;)
	a4 = a2 | a2
	a5 = a3 | a3
	a2 = Mem0[a1 + 0x00000040:word32]
	a3 = Mem0[a1 + 0x00000044:word32]
	a0 = 0x40206A43
	call __subdf3 (retsize: 0;)
	a4 = 0x402044A0
	a5 = 0x402044A0
	Mem0[a1 + 0x0000006C:word32] = a2
	Mem0[a1 + 0x00000070:word32] = a3
	a0 = 0x40206A52
	call __nedf2 (retsize: 0;)
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 == 0x00000000 l402066F8
	goto l40206A5B
	// succ:  l40206A5B l40206A58_thunk_fn402066F8
l40206A58_thunk_fn402066F8:
	call fn402066F8 (retsize: 0;)
	return
	// succ:  fn402068D1_exit
l40206A5B:
	goto l40206D25
	// succ:  l40206D25
l40206A5E:
	a2 = a12
	a3 = a13
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206A6B
	call __ratio (retsize: 0;)
	a4 = 0x402044A0
	a5 = 0x40204574
	a14 = a2
	a15 = a3
	a0 = 0x40206A78
	call __ledf2 (retsize: 0;)
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 >= 1 l40206AFD
	// succ:  l40206A81 l40206AFD
l40206A81:
	a9 = Mem0[a1 + 0x00000034:word32]
	branch a9 == 0x00000000 l40206A92
	// succ:  l40206A85 l40206A92
l40206A85:
	a14 = 0x402044A0
	a15 = 0x402036AC
	a8 = a14
	a9 = a15
	goto l40206B31
	// succ:  l40206B31
l40206A92:
	branch a10 != 0x00000000 l40206A9D
	// succ:  l40206A94 l40206A9D
l40206A94:
	a2 = 0x40204508
	branch (a2 & a11) != 0x00000000 l40206AA3
	// succ:  l40206A9A l40206AA3
l40206A9A:
	goto l40206AB2
	// succ:  l40206AB2
l40206A9D:
	branch a10 != 1 l40206AA3
	// succ:  l40206AA0 l40206AA3
l40206AA0:
	branch a11 == 0x00000000 l402066F8
	goto l40206AA3
	// succ:  l40206AA3 l40206AA0_thunk_fn402066F8
l40206AA0_thunk_fn402066F8:
	call fn402066F8 (retsize: 0;)
	return
	// succ:  fn402068D1_exit
l40206AA3:
	a14 = 0x402044A0
	a15 = 0x40204578
	a8 = 0x402044A0
	a9 = 0x402036AC
	a14 = 0x402044A0
	a15 = 0x40204578
	a8 = 0x402044A0
	a9 = 0x402036AC
	goto l40206B31
	// succ:  l40206B31
l40206AB2:
	a4 = 0x402044A0
	a5 = 0x402036AC
	a2 = a14 | a14
	a3 = a15 | a15
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206AC7
	call __ltdf2 (retsize: 0;)
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 < 0x00000000 l40206AEC
	// succ:  l40206AD0 l40206AEC
l40206AD0:
	a4 = 0x402044A0
	a5 = 0x40204520
	a2 = a14
	a3 = a15
	a0 = 0x40206ADD
	call fn4030487C (retsize: 0;)
	a8 = a2
	a9 = a3
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	goto l40206AF2
	// succ:  l40206AF2
l40206AEC:
	a8 = 0x402044A0
	a9 = 0x40204520
	// succ:  l40206AF2
l40206AF2:
	a2 = 0x4020449C
	a14 = a8
	a15 = a2 ^ a9
	goto l40206B31
	// succ:  l40206B31
l40206AFD:
	a4 = 0x402044A0
	a5 = 0x40204520
	a2 = a14
	a3 = a15
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206B10
	call fn4030487C (retsize: 0;)
	a8 = a2
	a2 = Mem0[a1 + 0x00000034:word32]
	a9 = a3
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	a3 = a8
	branch a2 != 0x00000000 l40206B2A
	// succ:  l40206B20 l40206B2A
l40206B20:
	a2 = 0x4020449C
	a2 = a9 ^ a2
	goto l40206B2D
	// succ:  l40206B2D
l40206B2A:
	a2 = a9 | a9
	// succ:  l40206B2D
l40206B2D:
	a14 = a3
	a15 = a2
	// succ:  l40206B31
l40206B31:
	a3 = 0x40204460
	a2 = 0x4020457C
	a3 = a3 & a11
	Mem0[a1 + 0x00000038:word32] = a3
	branch a3 == a2 l40206B42
	// succ:  l40206B3F l40206B42
l40206B3F:
	goto l40206BBE
	// succ:  l40206BBE
l40206B42:
	a2 = 0x4020454C
	a4 = Mem0[a1 + 0x00000040:word32]
	a11 = a2 + a11
	a5 = Mem0[a1 + 0x00000044:word32]
	a2 = a10 | a10
	a3 = a11 | a11
	Mem0[a1 + 0x00000060:word32] = a10
	Mem0[a1 + 0x0000005C:word32] = a11
	Mem0[a1 + 0x00000064:word32] = a8
	Mem0[a1 + 0x00000068:word32] = a9
	Mem0[a1 + 0x00000048:word32] = a4
	Mem0[a1 + 0x0000004C:word32] = a5
	a0 = 0x40206B68
	call __ulp (retsize: 0;)
	a4 = a2
	a5 = a3
	a2 = a14
	a3 = a15
	a0 = 0x40206B73
	call fn4030487C (retsize: 0;)
	a6 = Mem0[a1 + 0x00000060:word32]
	a7 = Mem0[a1 + 0x0000005C:word32]
	a5 = a3
	a4 = a2
	a3 = a7
	a2 = a6
	a0 = 0x40206B84
	call __adddf3 (retsize: 0;)
	a5 = 0x40204460
	a10 = a2
	a11 = a3
	a2 = a5 & a3
	a3 = 0x40204580
	a8 = Mem0[a1 + 0x00000064:word32]
	a9 = Mem0[a1 + 0x00000068:word32]
	branch a3 >=u a2 l40206BB4
	// succ:  l40206B9A l40206BB4
l40206B9A:
	a2 = 0x40204558
	a9 = Mem0[a1 + 0x0000004C:word32]
	branch a9 != a2 l40206BAC
	// succ:  l40206BA3 l40206BAC
l40206BA3:
	a2 = Mem0[a1 + 0x00000048:word32]
	branch a2 != -1 l40206BAC
	// succ:  l40206BA9 l40206BAC
l40206BA9:
	goto l402465B8
	// succ:  l402465B8
l40206BAC:
	a11 = 0x40204558
	a10 = -1
	goto l40206CFA
	// succ:  l40206CFA
l40206BB4:
	a2 = 0x4020455C
	a11 = a2 + a11
	goto l40206C4D
	// succ:  l40206C4D
l40206BBE:
	a3 = Mem0[a1 + 0x0000002C:word32]
	branch a3 == 0x00000000 l40206C1C
	// succ:  l40206BC4 l40206C1C
l40206BC4:
	a2 = 0x4020456C
	a4 = Mem0[a1 + 0x00000038:word32]
	branch a2 <u a4 l40206C1C
	// succ:  l40206BCC l40206C1C
l40206BCC:
	a4 = 0x40204584
	a5 = 0x40204588
	a2 = a8
	a3 = a9
	Mem0[a1 + 0x00000064:word32] = a8
	Mem0[a1 + 0x00000068:word32] = a9
	a0 = 0x40206BDF
	call __ledf2 (retsize: 0;)
	a8 = Mem0[a1 + 0x00000064:word32]
	a9 = Mem0[a1 + 0x00000068:word32]
	branch a2 >= 1 l40206C11
	// succ:  l40206BE8 l40206C11
l40206BE8:
	a3 = a9
	a2 = a8 | a8
	a0 = 0x40206BF0
	call __fixunsdfsi (retsize: 0;)
	a3 = 1
	branch a2 != 0x00000000 l40206BF5
	// succ:  l40206BF2_1 l40206BF5
l40206BF2_1:
	a2 = a3
	// succ:  l40206BF5
l40206BF5:
	a0 = 0x40206BF8
	call __floatunsidf (retsize: 0;)
	a5 = Mem0[a1 + 0x00000034:word32]
	a9 = a3
	a8 = a2
	a3 = a2
	a2 = a9
	branch a5 != 0x00000000 l40206C0D
	// succ:  l40206C04 l40206C0D
l40206C04:
	a2 = 0x4020449C
	a2 = a9 ^ a2
	goto l40246C0D
	// succ:  l40246C0D
l40206C0D:
	a14 = a3
	a15 = a2
	// succ:  l40206C11
l40206C11:
	a2 = 0x40204568
	a3 = Mem0[a1 + 0x00000038:word32]
	a2 = a15 + a2
	a15 = a2 - a3
	// succ:  l40206C1C
l40206C1C:
	a2 = Mem0[a1 + 0x00000040:word32]
	a3 = Mem0[a1 + 0x00000044:word32]
	Mem0[a1 + 0x00000064:word32] = a8
	Mem0[a1 + 0x00000068:word32] = a9
	a0 = 0x40206C2B
	call __ulp (retsize: 0;)
	a4 = a2
	a5 = a3
	a2 = a14
	a3 = a15
	a0 = 0x40206C36
	call fn4030487C (retsize: 0;)
	a4 = a2
	a5 = a3
	a2 = Mem0[a1 + 0x00000040:word32]
	a3 = Mem0[a1 + 0x00000044:word32]
	a0 = 0x40206C43
	call __adddf3 (retsize: 0;)
	a9 = Mem0[a1 + 0x00000068:word32]
	a8 = Mem0[a1 + 0x00000064:word32]
	a10 = a2
	a11 = a3
	// succ:  l40206C4D
l40206C4D:
	a4 = Mem0[a1 + 0x0000002C:word32]
	branch a4 != 0x00000000 l40206CFA
	// succ:  l40206C52 l40206CFA
l40206C52:
	a2 = 0x40204460
	a5 = Mem0[a1 + 0x00000038:word32]
	a2 = a2 & a11
	branch a5 == a2 l40206C60
	// succ:  l40206C5D l40206C60
l40206C5D:
	goto l40206CFA
	// succ:  l40206CFA
l40206C60:
	a2 = a8
	a3 = a9
	Mem0[a1 + 0x00000060:word32] = a11
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	Mem0[a1 + 0x00000064:word32] = a8
	Mem0[a1 + 0x00000068:word32] = a9
	a0 = 0x40206C76
	call __fixdfsi (retsize: 0;)
	a0 = 0x40206C79
	call __floatsidf (retsize: 0;)
	a9 = Mem0[a1 + 0x00000068:word32]
	a8 = Mem0[a1 + 0x00000064:word32]
	a4 = a2
	a5 = a3
	a2 = a8
	a3 = a9
	a0 = 0x40206C8A
	call __subdf3 (retsize: 0;)
	a9 = Mem0[a1 + 0x00000034:word32]
	a14 = a2
	a15 = a3
	a6 = Mem0[a1 + 0x00000060:word32]
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a9 != 0x00000000 l40206CA5
	// succ:  l40206C9C l40206CA5
l40206C9C:
	branch a10 != 0x00000000 l40206CA5
	// succ:  l40206C9F l40206CA5
l40206C9F:
	a2 = 0x40204508
	branch (a6 & a2) == 0x00000000 l40206CDD
	// succ:  l40206CA5 l40206CDD
l40206CA5:
	a4 = 0x4020458C
	a5 = 0x40204590
	a2 = a14 | a14
	a3 = a15 | a15
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206CBA
	call __ltdf2 (retsize: 0;)
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 < 0x00000000 l40206D52
	goto l40206CC3
	// succ:  l40206CC3 l40206CC0_thunk_fn402065B0
l40206CC0_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn402068D1_exit
l40206CC3:
	a4 = 0x40204594
	a5 = 0x40204520
	a2 = a14 | a14
	a3 = a15
	a0 = 0x40206CD1
	call __gtdf2 (retsize: 0;)
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 < 1 l40206CFA
	// succ:  l40206CDA l40206CFA
l40206CDA:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  l40206D52 fn402068D1_exit
l40206CDD:
	a4 = 0x4020458C
	a5 = 0x40204598
	a2 = a14
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a1 = a1 | a1
	a0 = 0x40206CF1
	call __ltdf2 (retsize: 0;)
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	branch a2 < 0x00000000 l40206D52
	goto l40206CFA
	// succ:  l40206CFA l40206CF7_thunk_fn402065B0
l40206CF7_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn402068D1_exit
l40206CFA:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206D07
	call _Bfree (retsize: 0;)
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x00000024:word32]
	a0 = 0x40206D0E
	call _Bfree (retsize: 0;)
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = a13
	a0 = 0x40206D15
	call _Bfree (retsize: 0;)
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = a12
	a0 = 0x40206D1C
	call _Bfree (retsize: 0;)
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206D07
	call _Bfree (retsize: 0;)
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x00000024:word32]
	a0 = 0x40206D0E
	call _Bfree (retsize: 0;)
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = a13
	a0 = 0x40206D15
	call _Bfree (retsize: 0;)
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = a12
	a0 = 0x40206D1C
	call _Bfree (retsize: 0;)
	a10 = Mem0[a1 + 0x0000006C:word32]
	a11 = Mem0[a1 + 0x00000070:word32]
	goto l4024673D
	// succ:  l4024673D
l40206D25:
	a9 = Mem0[a1 + 0x0000002C:word32]
	branch a9 == 0x00000000 l40206D52
	goto l40206D29
	// succ:  l40206D29 l40206D27_thunk_fn402065B0
l40206D27_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn402068D1_exit
l40206D29:
	a2 = 0x4020459C
	a3 = 0x00000000
	Mem0[a1 + 0x0000004C:word32] = a2
	Mem0[a1 + 0x00000048:word32] = a3
	a4 = Mem0[a1 + 0x00000048:word32]
	a5 = Mem0[a1 + 0x0000004C:word32]
	// succ:  l40206D38_thunk_fn40206D3A
l40206D38_thunk_fn40206D3A:
	call fn40206D3A (retsize: 0;)
	return
	// succ:  fn402068D1_exit
l40206D52:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a1 + 0x0000006C:word32] = a10
	Mem0[a1 + 0x00000070:word32] = a11
	a0 = 0x40206D5F
	call _Bfree (retsize: 0;)
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x00000024:word32]
	a0 = 0x40206D66
	call _Bfree (retsize: 0;)
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = a13
	a0 = 0x40206D6D
	call _Bfree (retsize: 0;)
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x00000028:word32]
	a0 = 0x40206D74
	call _Bfree (retsize: 0;)
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = a12
	a0 = 0x40206D7B
	call _Bfree (retsize: 0;)
	a11 = Mem0[a1 + 0x00000070:word32]
	a10 = Mem0[a1 + 0x0000006C:word32]
	// succ:  l40206D7E_thunk_fn40206D81
l40206D7E_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  fn402068D1_exit
l402465B8:
l402466F8:
l4024673D:
l40246C0D:
fn402068D1_exit:


// fn40206D3A
// Return size: 0
void fn40206D3A()
fn40206D3A_entry:
	// succ:  l40206D3A
l40206D3A:
	a1 = fp
	__reserved()
l40206D3A:
	a2 = a10 | a10
	a3 = a11 | a11
	a0 = 0x40206D44
	call fn4030487C (retsize: 0;)
	a10 = a2
	a11 = a3
	branch a3 != 0x00000000 l40206D52
	goto l40206D4A
	// succ:  l40206D4A l40206D48_thunk_fn402065B0
l40206D48_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn40206D3A_exit
l40206D4A:
	branch a2 != 0x00000000 l40206D52
	goto l40206D4C
	// succ:  l40206D4C l40206D4A_thunk_fn402065B0
l40206D4A_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn40206D3A_exit
l40206D4C:
	a9 = Mem0[a1 + 0x00000020:word32]
	a2 = 34
	Mem0[a9:word32] = a2
	// succ:  l40206D50_thunk_fn402065B0
l40206D50_thunk_fn402065B0:
	call fn402065B0 (retsize: 0;)
	return
	// succ:  fn40206D3A_exit
fn40206D3A_exit:


// fn40206D70
// Return size: 0
void fn40206D70()
fn40206D70_entry:
	// succ:  l40206D70
l40206D70:
	a1 = fp
	a10 = 0x40205F84
	a0 = 0x401E7214
	a3 = a12
	a0 = 0x40206D7B
	call _Bfree (retsize: 0;)
	a11 = Mem0[a1 + 0x00000070:word32]
	a10 = Mem0[a1 + 0x0000006C:word32]
	// succ:  l40206D7E_thunk_fn40206D81
l40206D7E_thunk_fn40206D81:
	call fn40206D81 (retsize: 0;)
	return
	// succ:  fn40206D70_exit
fn40206D70_exit:


// fn40206D81
// Return size: 0
void fn40206D81()
fn40206D81_entry:
	// succ:  l40206D81
l40206D81:
	a1 = v3
	a9 = Mem0[a1 + 0x00000058:word32]
	branch a9 == 0x00000000 l40206D8A
	// succ:  l40206D86 l40206D8A
l40206D86:
	a2 = Mem0[a1 + 0x00000010:word32]
	Mem0[a9:word32] = a2
	// succ:  l40206D8A
l40206D8A:
	a9 = Mem0[a1 + 0x0000003C:word32]
	a5 = a10
	a4 = a11
	branch a9 == 0x00000000 l40206D98
	// succ:  l40206D92 l40206D98
l40206D92:
	a4 = 0x4020449C
	a4 = a11 ^ a4
	// succ:  l40206D98
l40206D98:
	a0 = Mem0[a1 + 0x0000009C:word32]
	a9 = 0x000000A0
	a2 = a5
	a3 = a4
	a12 = Mem0[a1 + 0x00000098:word32]
	a13 = Mem0[a1 + 0x00000094:word32]
	a14 = Mem0[a1 + 0x00000090:word32]
	a15 = Mem0[a1 + 0x0000008C:word32]
	a1 = a1 + a9
	return
	// succ:  fn40206D81_exit
fn40206D81_exit:


// fn40206DA8
// Return size: 0
void fn40206DA8()
fn40206DA8_entry:
	// succ:  l40206DA8
l40206DA8:
	a1 = fp
	a14 = Mem0[a1 + 0x00000090:word32]
	a15 = Mem0[a1 + 0x0000008C:word32]
	a1 = a1 + a9
	return
	// succ:  fn40206DA8_exit
fn40206DA8_exit:


// strtod
// Return size: 0
void strtod()
strtod_entry:
	// succ:  l40206DB4
l40206DB4:
	a1 = fp
	a5 = a2
	a2 = 0x40203754
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	a4 = a3
	a3 = a5
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40206DC8
	call fn40306098 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  strtod_exit
strtod_exit:


// strtof
// Return size: 0
void strtof()
strtof_entry:
	// succ:  l40206DD0
l40206DD0:
	a1 = fp
	a5 = a2 | a2
	a2 = 0x40203754
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	a4 = a3
	a3 = a5
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40206DEA
	call fn40306098 (retsize: 0;)
	a12 = a2
	a13 = a3
	a0 = 0x40206DF1
	call fn40305FC0 (retsize: 0;)
	branch a2 != 0x00000000 l40206DFA
	// succ:  l40206DF3 l40206DFA
l40206DF3:
	a0 = 0x40206DF6
	call fn40305FB8 (retsize: 0;)
	goto l40206E03
	// succ:  l40206E03
l40206DFA:
	a2 = a12 | a12
	a3 = a13 | a13
	a0 = 0x40206E03
	call __truncdfsf2 (retsize: 0;)
	// succ:  l40206E03
l40206E03:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  strtof_exit
strtof_exit:


// sulp
// Return size: 0
void sulp()
sulp_entry:
	// succ:  l40206E10
l40206E10:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a14
	a14 = a4 | a4
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	a13 = a3 | a3
	a0 = 0x40206E25
	call __ulp (retsize: 0;)
	branch a14 == 0x00000000 l40206E40
	// succ:  l40206E27 l40206E40
l40206E27:
	a4 = a13 >>u 0x00000014 & 0x000007FF
	a5 = 0x0000006B
	a4 = a5 - a4
	branch a4 < 1 l40206E40
	// succ:  l40206E33 l40206E40
l40206E33:
	a6 = 0x402036AC
	a7 = a4 << 12
	a5 = a7 + a6
	a4 = 0
	a0 = 0x40206E40
	call fn4030487C (retsize: 0;)
	// succ:  l40206E40
l40206E40:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sulp_exit
sulp_exit:


// _strtol_r
// Return size: 0
void _strtol_r()
_strtol_r_entry:
	goto l40206E50
	// succ:  l40206E50
l00000000_thunk_fn40206EA8:
	call fn40206EA8 (retsize: 0;)
	return
	// succ:  _strtol_r_exit
l40206E50:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000004:word32] = a2
	a2 = 0x402045A0
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x0000002C:word32] = a15
	a8 = a3
	a15 = a4
	Mem0[a1 + 0x0000003C:word32] = a0
	a4 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000034:word32] = a13
	a2 = a3
	Mem0[a1 + 0x00000030:word32] = a14
	a12 = a5
	a3 = 8
	v13 = Mem0[a2 + 0x00000000:byte]
	a13 = (uint32) v13
	a7 = a2 + 1
	a5 = a4 + a13
	v15 = Mem0[a5 + 0x00000001:byte]
	a14 = (uint32) v15
	a14 = a14 & a3
	branch a14 == 0x00000000 l40206E82
	// succ:  l40206E7D l40206E82
l40206E7D:
	a2 = a7
	goto l40246E6E
	// succ:  l40246E6E
l40206E82:
	a3 = 45
	branch a13 != a3 l40206E92
	// succ:  l40206E87 l40206E92
l40206E87:
	a7 = a2 + 2
	v16 = Mem0[a2 + 0x00000001:byte]
	a13 = (uint32) v16
	a14 = 1
	goto l40206E9C
	// succ:  l40206E9C
l40206E92:
	a3 = 43
	branch a13 != a3 l40206E9C
	// succ:  l40206E97 l40206E9C
l40206E97:
	v18 = Mem0[a2 + 0x00000001:byte]
	a13 = (uint32) v18
	a7 = a2 + 2
	// succ:  l40206E9C
l40206E9C:
	a2 = -17
	a2 = a12 & a2
	branch a2 != 0x00000000 l40206ED1
	goto l40206EA3
	// succ:  l40206EA3 l40206EA1_thunk_fn40206EA8
l40206EA1_thunk_fn40206EA8:
	call fn40206EA8 (retsize: 0;)
	return
	// succ:  _strtol_r_exit
l40206EA3:
	a3 = 1
	branch a12 != 0x00000000 l40206EA8
	// succ:  l40206EA5_1 l40206EA5_thunk_fn40206EA8
l40206EA5_1:
	a2 = a3
	goto l00000000_thunk_fn40206EA8
	// succ:  l00000000_thunk_fn40206EA8
l40206EA5_thunk_fn40206EA8:
	call fn40206EA8 (retsize: 0;)
	return
	// succ:  _strtol_r_exit
l40246E6E:
_strtol_r_exit:


// fn40206EA8
// Return size: 0
void fn40206EA8()
fn40206EA8_entry:
	// succ:  l40206EA8
l40206EA8:
	a1 = fp
	a3 = 48
	a2 = a2 & 0x000000FF
	branch a13 != a3 l40206ECC
	// succ:  l40206EB0 l40206ECC
l40206EB0:
	v7 = Mem0[a7 + 0x00000000:byte]
	a5 = (uint32) v7
	a3 = 0x000000DF
	a5 = a5 & a3
	a3 = 88
	branch a5 == a3 l40206EC1
	// succ:  l40206EBE l40206EC1
l40206EBE:
	goto l40206F79
	// succ:  l40206F79
l40206EC1:
	v9 = Mem0[a7 + 0x00000001:byte]
	a13 = (uint32) v9
	a12 = 16
	a7 = a7 + 2
	goto l40206ED1
	// succ:  l40206ED1
l40206ECC:
	a3 = 10
	branch a2 == 0x00000000 l40206ED1
	// succ:  l40206ECE_1 l40206ED1
l40206ECE_1:
	a12 = a3
	// succ:  l40206ED1
l40206ED1:
	a2 = 0x4020449C
	a5 = 0x402044FC
	a3 = a12
	branch a14 == 0x00000000 l40206EDC
	a2 = 0x4020449C
	a5 = 0x402044FC
	a3 = a12
	branch a14 == 0x00000000 l40206EDC
	// succ:  l40206ED9_1 l40206EDC l40206ED9_2
l40206ED9_1:
	a5 = a2
	goto l40206EDC
	// succ:  l40206EDC
l40206ED9_2:
	a5 = a2
	// succ:  l40206EDC
l40206EDC:
	a2 = a5
	Mem0[a1 + 0x00000010:word32] = a4
	Mem0[a1 + 0x0000000C:word32] = a7
	Mem0[a1 + 0x00000014:word32] = a8
	Mem0[a1 + 0x00000008:word32] = a5
	a0 = 0x402044C4
	v15 = a0
	a0 = 0x40206EEC
	call v15 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000008:word32]
	Mem0[a1:word32] = a2
	a3 = a12
	a2 = a5
	a0 = 0x40204388
	v16 = a0
	a0 = 0x40206EFA
	call v16 (retsize: 0;)
	a6 = 0
	a7 = Mem0[a1 + 0x0000000C:word32]
	a8 = Mem0[a1 + 0x00000014:word32]
	a4 = Mem0[a1 + 0x00000010:word32]
	a5 = a6
	a10 = 87
	a11 = 55
	a3 = a4 + a13
	v20 = Mem0[a3 + 0x00000001:byte]
	a3 = (uint32) v20
	a9 = 4
	branch (a3 & a9) == 0x00000000 l40206F18
	a2 = a5
	Mem0[a1 + 0x00000010:word32] = a4
	Mem0[a1 + 0x0000000C:word32] = a7
	Mem0[a1 + 0x00000014:word32] = a8
	Mem0[a1 + 0x00000008:word32] = a5
	a0 = 0x402044C4
	v22 = a0
	a0 = 0x40206EEC
	call v22 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000008:word32]
	Mem0[a1:word32] = a2
	a3 = a12
	a2 = a5
	a0 = 0x40204388
	v23 = a0
	a0 = 0x40206EFA
	call v23 (retsize: 0;)
	a6 = 0
	a7 = Mem0[a1 + 0x0000000C:word32]
	a8 = Mem0[a1 + 0x00000014:word32]
	a4 = Mem0[a1 + 0x00000010:word32]
	a5 = a6
	a10 = 87
	a11 = 55
	a3 = a4 + a13
	v24 = Mem0[a3 + 0x00000001:byte]
	a3 = (uint32) v24
	a9 = 4
	branch (a3 & a9) == 0x00000000 l40206F18
	// succ:  l40206F12 l40206F18
l40206F12:
	a13 = a13 - 48
	a13 = a13 - 48
	goto l40206F27
	// succ:  l40206F27
l40206F18:
	a3 = a3 & 0x00000003
	branch a3 == 0x00000000 l40206F50
	// succ:  l40206F1D l40206F50
l40206F1D:
	a3 = a3 - 1
	a9 = a11
	branch a3 == 0x00000000 l40206F24
	// succ:  l40206F21_1 l40206F24
l40206F21_1:
	a9 = a10
	// succ:  l40206F24
l40206F24:
	a13 = a13 - a9
	// succ:  l40206F27
l40206F27:
	branch a13 >= a12 l40206F50
	// succ:  l40206F2A l40206F50
l40206F2A:
	branch a6 < 0x00000000 l40206F46
	// succ:  l40206F2D l40206F46
l40206F2D:
	branch a2 <u a5 l40206F46
	// succ:  l40206F30 l40206F46
l40206F30:
	a9 = Mem0[a1 + 0x00000000:word32]
	branch a9 >= a13 l40206F3C
	// succ:  l40206F36 l40206F3C
l40206F36:
	a6 = 0xFFFFFFFF
	branch a5 == a2 l40206F48
	// succ:  l40206F3C l40206F48
l40206F3C:
	a5 = a5 * a12
	a6 = 1
	a5 = a13 + a5
	goto l40206F48
	// succ:  l40206F48
l40206F46:
	a6 = -1
	// succ:  l40206F48
l40206F48:
	v25 = Mem0[a7 + 0x00000000:byte]
	a13 = (uint32) v25
	a7 = a7 + 1
	goto l40246F08
	// succ:  l40246F08
l40206F50:
	branch a6 != -1 l40206F68
	// succ:  l40206F53 l40206F68
l40206F53:
	a2 = 0x4020449C
	a5 = 0x402044FC
	a9 = Mem0[a1 + 0x00000004:word32]
	branch a14 == 0x00000000 l40206F5E
	// succ:  l40206F5B_1 l40206F5E
l40206F5B_1:
	a5 = a2
	// succ:  l40206F5E
l40206F5E:
	a2 = 34
	Mem0[a9:word32] = a2
	branch a15 != 0x00000000 l40206F72
	// succ:  l40206F64 l40206F72
l40206F64:
	goto l40206F7E
	// succ:  l40206F7E
l40206F68:
	a2 = -a5
	branch a14 == 0x00000000 l40206F6E
	// succ:  l40206F6B_1 l40206F6E
l40206F6B_1:
	a5 = a2
	// succ:  l40206F6E
l40206F6E:
	branch a15 == 0x00000000 l40206F7E
	// succ:  l40206F70 l40206F7E
l40206F70:
	branch a6 == 0x00000000 l40206F74
	// succ:  l40206F72 l40206F74
l40206F72:
	a8 = a7 - 1
	a8 = a7 - 1
	// succ:  l40206F74
l40206F74:
	Mem0[a15:word32] = a8
	goto l40206F7E
	// succ:  l40206F7E
l40206F79:
	a3 = 8
	goto l40246ECE
	// succ:  l40246ECE
l40206F7E:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a2 = a5
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  fn40206EA8_exit
l40246ECE:
l40246F08:
fn40206EA8_exit:


// strtol
// Return size: 0
void strtol()
strtol_entry:
	// succ:  l40206F90
l40206F90:
	a1 = fp
	a7 = a2
	a2 = 0x40203754
	a6 = a3
	a2 = Mem0[a2 + 0x00000000:word32]
	a1 = a1 - 16
	a5 = a4
	a3 = a7
	a4 = a6
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40206FA8
	call fn40306E50 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  strtol_exit
strtol_exit:


// sbrk
// Return size: 0
void sbrk()
sbrk_entry:
	// succ:  l40206FB0
l40206FB0:
	a1 = fp
	a3 = a2
	a2 = 0x40203754
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40204488
	v6 = a0
	a0 = 0x40206FC2
	call v6 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sbrk_exit
sbrk_exit:


// __swbuf_r
// Return size: 0
void __swbuf_r()
__swbuf_r_entry:
	// succ:  l40206FCC
l40206FCC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	a13 = a2
	a14 = a3
	a12 = a4
	branch a2 == 0x00000000 l40206FEC
	// succ:  l40206FDF l40206FEC
l40206FDF:
	a2 = Mem0[a2 + 0x00000018:word32]
	branch a2 != 0x00000000 l40206FEC
	// succ:  l40206FE3 l40206FEC
l40206FE3:
	a2 = a13 | a13
	a0 = 0x40204470
	v10 = a0
	a0 = 0x40206FEC
	call v10 (retsize: 0;)
	// succ:  l40206FEC
l40206FEC:
	a2 = 0x402044D0
	branch a12 != a2 l40206FF8
	// succ:  l40206FF2 l40206FF8
l40206FF2:
	a12 = Mem0[a13 + 0x00000004:word32]
	goto l4020700C
	// succ:  l4020700C
l40206FF8:
	a2 = 0x402044D4
	branch a12 != a2 l40207004
	// succ:  l40206FFE l40207004
l40206FFE:
	a12 = Mem0[a13 + 0x00000008:word32]
	goto l4020700C
	// succ:  l4020700C
l40207004:
	a2 = 0x402044D8
	branch a12 != a2 l4020700C
	// succ:  l4020700A l4020700C
l4020700A:
	a12 = Mem0[a13 + 0x0000000C:word32]
	// succ:  l4020700C
l4020700C:
	a2 = Mem0[a12 + 0x00000018:word32]
	Mem0[a12 + 0x00000008:word32] = a2
	v11 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v11
	branch (a2 & 0x00000008) == 0x00000000 l40207032
	// succ:  l40207016 l40207032
l40207016:
	a2 = Mem0[a12 + 0x00000010:word32]
	branch a2 == 0x00000000 l40207032
	// succ:  l4020701C l40207032
l4020701C:
	v12 = Mem0[a12 + 0x0000000C:int16]
	a3 = (int32) v12
	a2 = 0x402044E8
	a14 = a14 & 0x000000FF
	a4 = a3 & a2
	a4 = a4 & 0x0000FFFF
	branch a4 == 0x00000000 l40207041
	// succ:  l4020702D l40207041
l4020702D:
	goto l40207053
	// succ:  l40207053
l40207032:
	a2 = a13
	a3 = a12
	a0 = 0x40207039
	call __swsetup_r (retsize: 0;)
	branch a2 == 0x00000000 l4020701C
	// succ:  l4020703C l4020701C
l4020703C:
	a2 = -1
	goto l40207099
	// succ:  l40207099
l40207041:
	a2 = a3 | a2
	Mem0[a12 + 0x0000000C:word16] = a2
	a3 = Mem0[a12 + 0x00000064:word32]
	a2 = 0x402044EC
	a2 = a3 & a2
	Mem0[a12 + 0x00000064:word32] = a2
	// succ:  l40207053
l40207053:
	a3 = Mem0[a12 + 0x00000000:word32]
	a2 = Mem0[a12 + 0x00000010:word32]
	a2 = a3 - a2
	a3 = Mem0[a12 + 0x00000014:word32]
	branch a2 < a3 l40207069
	// succ:  l4020705F l40207069
l4020705F:
	a2 = a13
	a3 = a12
	a0 = 0x40207066
	call _fflush_r (retsize: 0;)
	branch a2 != 0x00000000 l4020703C
	// succ:  l40207069 l4020703C
l40207069:
	a3 = Mem0[a12 + 0x00000008:word32]
	a2 = a2 + 1
	a3 = a3 - 1
	Mem0[a12 + 0x00000008:word32] = a3
	a3 = Mem0[a12 + 0x00000000:word32]
	a4 = a3 + 1
	Mem0[a12:word32] = a4
	Mem0[a3:byte] = a14
	a3 = Mem0[a12 + 0x00000014:word32]
	branch a2 == a3 l4020708A
	// succ:  l4020707F l4020708A
l4020707F:
	v13 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v13
	a2 = a14
	branch (a3 & 0x00000001) == 0x00000000 l40207099
	// succ:  l40207087 l40207099
l40207087:
	branch a14 != 10 l40207099
	// succ:  l4020708A l40207099
l4020708A:
	a2 = a13 | a13
	a3 = a12 | a12
	a0 = 0x40207093
	call _fflush_r (retsize: 0;)
	branch a2 != 0x00000000 l4020703C
	// succ:  l40207096 l4020703C
l40207096:
	a2 = a14 | a14
	// succ:  l40207099
l40207099:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  __swbuf_r_exit
__swbuf_r_exit:


// __swbuf
// Return size: 0
void __swbuf()
__swbuf_entry:
	// succ:  l402070A8
l402070A8:
	a1 = fp
	a5 = a2
	a2 = 0x40203754
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	a4 = a3
	a3 = a5
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x402070BC
	call fn40306FCC (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  __swbuf_exit
__swbuf_exit:


// __swsetup_r
// Return size: 0
void __swsetup_r()
__swsetup_r_entry:
	// succ:  l402070C4
l402070C4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a14
	a14 = a2
	a2 = 0x40203754
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a3
	branch a13 == 0x00000000 l402070E8
	// succ:  l402070DA l402070E8
l402070DA:
	a2 = Mem0[a13 + 0x00000018:word32]
	branch a2 != 0x00000000 l402070E8
	// succ:  l402070DF l402070E8
l402070DF:
	a2 = a13 | a13
	a0 = 0x40204470
	v9 = a0
	a0 = 0x402070E8
	call v9 (retsize: 0;)
	// succ:  l402070E8
l402070E8:
	a2 = 0x402044D0
	branch a12 != a2 l402070F4
	// succ:  l402070EE l402070F4
l402070EE:
	a12 = Mem0[a13 + 0x00000004:word32]
	goto l40207108
	// succ:  l40207108
l402070F4:
	a2 = 0x402044D4
	branch a12 != a2 l40207100
	// succ:  l402070FA l40207100
l402070FA:
	a12 = Mem0[a13 + 0x00000008:word32]
	goto l40207108
	// succ:  l40207108
l40207100:
	a2 = 0x402044D8
	branch a12 != a2 l40207108
	// succ:  l40207106 l40207108
l40207106:
	a12 = Mem0[a13 + 0x0000000C:word32]
	// succ:  l40207108
l40207108:
	v10 = Mem0[a12 + 0x0000000C:int16]
	a3 = (int32) v10
	a2 = a3 & 0x0000FFFF
	branch (a2 & 0x00000008) != 0x00000000 l40207154
	// succ:  l40207111 l40207154
l40207111:
	branch (a2 & 0x00000010) != 0x00000000 l4020711C
	// succ:  l40207114 l4020711C
l40207114:
	a2 = 9
	Mem0[a14:word32] = a2
	goto l4020719C
	// succ:  l4020719C
l4020711C:
	branch (a2 & 0x00000004) == 0x00000000 l40207149
	// succ:  l4020711F l40207149
l4020711F:
	a3 = Mem0[a12 + 0x00000034:word32]
	branch a3 == 0x00000000 l40207135
	// succ:  l40207123 l40207135
l40207123:
	a2 = a12 + 68
	branch a3 == a2 l40207131
	// succ:  l40207129 l40207131
l40207129:
	a2 = a14
	a0 = 0x402044F4
	v12 = a0
	a0 = 0x40207131
	call v12 (retsize: 0;)
	// succ:  l40207131
l40207131:
	a2 = 0
	Mem0[a12 + 0x00000034:word32] = a2
	// succ:  l40207135
l40207135:
	v13 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v13
	a2 = 0xFFFFFFDB
	a2 = a3 & a2
	Mem0[a12 + 0x0000000C:word16] = a2
	a2 = 0
	Mem0[a12 + 0x00000004:word32] = a2
	a2 = Mem0[a12 + 0x00000010:word32]
	Mem0[a12:word32] = a2
	// succ:  l40207149
l40207149:
	v14 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v14
	a2 = 8
	a2 = a3 | a2
	Mem0[a12 + 0x0000000C:word16] = a2
	// succ:  l40207154
l40207154:
	a2 = Mem0[a12 + 0x00000010:word32]
	branch a2 != 0x00000000 l40207171
	// succ:  l4020715A l40207171
l4020715A:
	v11 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v11
	a2 = 0x00000280
	a3 = a3 & a2
	a2 = 0x00000200
	branch a3 == a2 l40207171
	// succ:  l40207169 l40207171
l40207169:
	a2 = a14 | a14
	a3 = a12
	a0 = 0x40207171
	call __smakebuf_r (retsize: 0;)
	// succ:  l40207171
l40207171:
	v15 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v15
	a2 = a3 & 0x00000001
	branch a2 == 0x00000000 l40207188
	// succ:  l40207179 l40207188
l40207179:
	a2 = 0
	Mem0[a12 + 0x00000008:word32] = a2
	a2 = Mem0[a12 + 0x00000014:word32]
	a2 = -a2
	Mem0[a12 + 0x00000018:word32] = a2
	goto l4020718F
	// succ:  l4020718F
l40207188:
	branch (a3 & 0x00000002) != 0x00000000 l4020718D
	// succ:  l4020718B l4020718D
l4020718B:
	a2 = Mem0[a12 + 0x00000014:word32]
	// succ:  l4020718D
l4020718D:
	Mem0[a12 + 0x00000008:word32] = a2
	// succ:  l4020718F
l4020718F:
	a3 = Mem0[a12 + 0x00000010:word32]
	a2 = 0
	branch a3 != a2 l402071A6
	// succ:  l40207196 l402071A6
l40207196:
	v16 = Mem0[a12 + 0x0000000C:int16]
	a3 = (int32) v16
	branch (a3 & 0x00000080) == 0x00000000 l402071A6
	// succ:  l4020719C l402071A6
l4020719C:
	a2 = 64
	a3 = a3 | a2
	Mem0[a12 + 0x0000000C:word16] = a3
	a2 = -1
	a2 = 64
	a3 = a3 | a2
	Mem0[a12 + 0x0000000C:word16] = a3
	a2 = -1
	// succ:  l402071A6
l402071A6:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  __swsetup_r_exit
__swsetup_r_exit:


// quorem
// Return size: 0
void quorem()
quorem_entry:
	// succ:  l402071B4
l402071B4:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000038:word32] = a12
	a4 = a2
	a12 = Mem0[a3 + 0x00000010:word32]
	a2 = Mem0[a2 + 0x00000010:word32]
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a15
	a9 = a3
	a10 = 0
	branch a2 >= a12 l402071D1
	// succ:  l402071CB_thunk_fn402071CE l402071CB_thunk_fn402071D1
l402071CB_thunk_fn402071CE:
	call fn402071CE (retsize: 0;)
	return
	// succ:  quorem_exit
l402071CB_thunk_fn402071D1:
	call fn402071D1 (retsize: 0;)
	return
	// succ:  quorem_exit
quorem_exit:


// fn402071B8
// Return size: 0
void fn402071B8()
fn402071B8_entry:
	// succ:  l402071B8
l402071B8:
	a1 = fp
	a14 = 0x401C7AEC
	a12 = Mem0[a3 + 0x00000010:word32]
	a2 = Mem0[a2 + 0x00000010:word32]
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a15
	a9 = a3
	a10 = 0
	branch a2 >= a12 l402071CB_thunk_fn402071D1
	// succ:  l402071CB_thunk_fn402071CE l402071CB_thunk_fn402071D1
l402071CB_thunk_fn402071CE:
	call fn402071CE (retsize: 0;)
	return
	// succ:  fn402071B8_exit l402071CB_thunk_fn402071CE
l402071CB_thunk_fn402071CE:
	call fn402071CE (retsize: 0;)
	return
	// succ:  fn402071B8_exit
l402071CB_thunk_fn402071D1:
	call fn402071D1 (retsize: 0;)
	return
	// succ:  fn402071B8_exit
fn402071B8_exit:


// fn402071CE
// Return size: 0
void fn402071CE()
fn402071CE_entry:
	// succ:  l402071CE
l402071CE:
	a1 = v3
	// succ:  l402072E0_in_quorem l402072E0_in_quorem
l402072E0_in_quorem:
	a15 = 0x401C9B98
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  fn402071CE_exit
l402072E0_in_quorem:
	a15 = 0x401C9B98
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  fn402071CE_exit
fn402071CE_exit:


// fn402071D1
// Return size: 0
void fn402071D1()
fn402071D1_entry:
	// succ:  l402071D1
l402071D1:
	a1 = v3
	a12 = a12 - 1
	a11 = a3 + 20
	a15 = a12 << 30
	a7 = a11 + a15
	a14 = a4 + 20
	a3 = Mem0[a7 + 0x00000000:word32]
	a15 = a14 + a15
	a2 = Mem0[a15 + 0x00000000:word32]
	a3 = a3 + 1
	Mem0[a1 + 0x00000010:word32] = a4
	Mem0[a1 + 0x0000000C:word32] = a7
	Mem0[a1 + 0x00000008:word32] = a9
	Mem0[a1 + 0x00000004:word32] = a10
	Mem0[a1:word32] = a11
	a0 = 0x40204388
	v15 = a0
	a0 = 0x402071F6
	call v15 (retsize: 0;)
	a13 = a2
	a4 = Mem0[a1 + 0x00000010:word32]
	a7 = Mem0[a1 + 0x0000000C:word32]
	a9 = Mem0[a1 + 0x00000008:word32]
	a10 = Mem0[a1 + 0x00000004:word32]
	branch a2 == 0x00000000 l40207200_thunk_fn40207272
	goto l40207203
	// succ:  l40207203 l40207200_thunk_fn40207272
l40207200_thunk_fn40207272:
	call fn40207272 (retsize: 0;)
	return
	// succ:  fn402071D1_exit
l40207203:
	a5 = Mem0[a1 + 0x00000000:word32]
	a6 = a14
	a2 = a10
	// succ:  l40207207_thunk_fn40207209
l40207207_thunk_fn40207209:
	call fn40207209 (retsize: 0;)
	return
	// succ:  fn402071D1_exit
fn402071D1_exit:


// fn40207208
// Return size: 0
void fn40207208()
fn40207208_entry:
	// succ:  l40207208
l40207208:
	a1 = fp
	a10 = a0 + a0
	// succ:  l40207208_thunk_fn40207209
l40207208_thunk_fn40207209:
	call fn40207209 (retsize: 0;)
	return
	// succ:  fn40207208_exit
fn40207208_exit:


// fn40207209
// Return size: 0
void fn40207209()
fn40207209_entry:
	// succ:  l40207209
l40207209:
	a1 = fp
	a3 = a10 | a10
	goto l40207209_thunk_fn4020720C
	// succ:  l40207209_thunk_fn4020720C
l40207209:
	a2 = a0 + a3
	goto l40207209_thunk_fn4020720C
	// succ:  l40207209_thunk_fn4020720C
l40207209_thunk_fn4020720C:
	call fn4020720C (retsize: 0;)
	return
	// succ:  fn40207209_exit
l40207209_thunk_fn4020720C:
	call fn4020720C (retsize: 0;)
	return
	// succ:  fn40207209_exit
fn40207209_exit:


// fn4020720C
// Return size: 0
void fn4020720C()
fn4020720C_entry:
	// succ:  l4020720C
l4020720C:
	a1 = v3
	a11 = Mem0[a5 + 0x00000000:word32]
	a5 = a5 + 4
	a10 = a11 & 0x0000FFFF
	a10 = a10 * a13
	a11 = a11 >>u 0x00000010 & 0x0000FFFF
	a10 = a2 + a10
	a11 = a11 * a13
	a2 = a10 >>u 0x00000010 & 0x0000FFFF
	a8 = a2 + a11
	a11 = Mem0[a6 + 0x00000000:word32]
	a10 = a10 & 0x0000FFFF
	a11 = a11 & 0x0000FFFF
	a3 = a11 + a3
	a11 = Mem0[a6 + 0x00000000:word32]
	a10 = a3 - a10
	a3 = a11 >>u 0x00000010 & 0x0000FFFF
	a11 = a8 & 0x0000FFFF
	a11 = a3 - a11
	a3 = a10 >> 16
	a11 = a11 + a3
	a3 = a11 >> 16
	a10 = a10 & 0x0000FFFF
	a11 = a11 << 16
	a10 = a11 | a10
	Mem0[a6:word32] = a10
	a2 = a8 >>u 0x00000010 & 0x0000FFFF
	a6 = a6 + 4
	branch a7 >=u a5 l4020720C
	// succ:  l40207253_thunk_fn40207256 l4020720C
l40207253_thunk_fn40207256:
	call fn40207256 (retsize: 0;)
	return
	// succ:  fn4020720C_exit l40207253_thunk_fn40207256
l40207253_thunk_fn40207256:
	call fn40207256 (retsize: 0;)
	return
	// succ:  fn4020720C_exit
fn4020720C_exit:


// fn40207254
// Return size: 0
void fn40207254()
fn40207254_entry:
	// succ:  l40207254
l40207254:
	a1 = fp
	branch a5 >=u a11 l40207280
fn40207254_exit:


// fn40207256
// Return size: 0
void fn40207256()
fn40207256_entry:
	// succ:  l40207256
l40207256:
	a1 = fp
	a2 = Mem0[a15 + 0x00000000:word32]
	goto l40207256_thunk_fn40207258
	// succ:  l40207256_thunk_fn40207258
l40207256:
	// succ:  l40207257 l40207280
l40207256_thunk_fn40207258:
	call fn40207258 (retsize: 0;)
	return
	// succ:  fn40207256_exit
l40207257:
	__reserved()
l40207280:
	a3 = 0x401EBCD8
	// succ:  l40207280_thunk_fn40207272
l40207280_thunk_fn40207272:
	call fn40207272 (retsize: 0;)
	return
	// succ:  fn40207256_exit
fn40207256_exit:


// fn40207258
// Return size: 0
void fn40207258()
fn40207258_entry:
	// succ:  l40207258
l40207258:
	a1 = fp
	branch a2 != 0x00000000 l40207258_thunk_fn40207272
	goto l4020725A
	// succ:  l4020725A l40207258_thunk_fn40207272
l40207258:
	call fn4020725F (retsize: 0;)
	return
	// succ:  l40207258_thunk_fn4020725F fn40207258_exit
l40207258_thunk_fn4020725F:
	call fn4020725F (retsize: 0;)
	return
	// succ:  fn40207258_exit
l40207258_thunk_fn40207272:
	call fn40207272 (retsize: 0;)
	return
	// succ:  fn40207258_exit
l4020725A:
	// succ:  l4020725A_thunk_fn4020725F l4020725A_thunk_fn4020725F
l4020725A_thunk_fn4020725F:
	call fn4020725F (retsize: 0;)
	return
	// succ:  fn40207258_exit
l4020725A_thunk_fn4020725F:
	call fn4020725F (retsize: 0;)
	return
	// succ:  fn40207258_exit
fn40207258_exit:


// fn4020725F
// Return size: 0
void fn4020725F()
fn4020725F_entry:
	goto l4020725F
	// succ:  l4020725F
l4020725D:
	a12 = a12 - 1
	// succ:  l4020725F
l4020725F:
	a1 = v3
	a15 = a15 - 4
	branch a14 <u a15 l4020726A
	// succ:  l40207265 l4020726A
l40207265:
	Mem0[a4 + 0x00000010:word32] = a12
	// succ:  l40207265_thunk_fn40207272
l40207265_thunk_fn40207272:
	call fn40207272 (retsize: 0;)
	return
	// succ:  fn4020725F_exit
l4020726A:
	a2 = Mem0[a15 + 0x00000000:word32]
	branch a2 == 0x00000000 l4020725D
	// succ:  l4020726F l4020725D
l4020726F:
	// succ:  l40247265
l40247265:
fn4020725F_exit:


// fn40207272
// Return size: 0
void fn40207272()
fn40207272_entry:
	// succ:  l40207272
l40207272:
	a1 = v3
	a2 = a4
	a3 = a9
	Mem0[a1 + 0x00000010:word32] = a4
	Mem0[a1 + 0x0000000C:word32] = a7
	a0 = 0x4020727D
	call __mcmp (retsize: 0;)
	a4 = Mem0[a1 + 0x00000010:word32]
	a7 = Mem0[a1 + 0x0000000C:word32]
	// succ:  l40207281
l40207281:
	a0 = 0x40207286
	call fn40208B04 (retsize: 0;)
	a13 = a13 + 1
	a2 = a14
	a6 = 0
	// succ:  l4020728A_thunk_fn4020728C
l4020728A_thunk_fn4020728C:
	call fn4020728C (retsize: 0;)
	return
	// succ:  fn40207272_exit
fn40207272_exit:


// fn4020728C
// Return size: 0
void fn4020728C()
fn4020728C_entry:
	// succ:  l4020728C
l4020728C:
	a1 = fp
	a5 = Mem0[a2 + 0x00000000:word32]
	a9 = Mem0[a8 + 0x00000000:word32]
	a3 = a5 & 0x0000FFFF
	a3 = a3 + a6
	a10 = a9 & 0x0000FFFF
	a3 = a3 - a10
	a5 = a5 >>u 0x00000010 & 0x0000FFFF
	a9 = a9 >>u 0x00000010 & 0x0000FFFF
	a6 = a3 >> 16
	a5 = a5 - a9
	a5 = a5 + a6
	a6 = a5 >> 16
	goto l402072A9_thunk_fn402072AC
	// succ:  l402072A9_thunk_fn402072AC
l4020728C:
l402072A9_thunk_fn402072AC:
	call fn402072AC (retsize: 0;)
	return
	// succ:  fn4020728C_exit
fn4020728C_exit:


// fn402072AC
// Return size: 0
void fn402072AC()
fn402072AC_entry:
	// succ:  l402072AC
l402072AC:
	a1 = fp
	a3 = a3 & 0x0000FFFF
	a5 = a5 << 16
	a3 = a5 | a3
	Mem0[a2:word32] = a3
	a8 = a8 + 4
	a2 = a2 + 4
	branch a7 >=u a8 l402072BB_thunk_fn4020728C
	goto l402072BE
	// succ:  l402072BE l402072BB_thunk_fn4020728C
l402072BB_thunk_fn4020728C:
	call fn4020728C (retsize: 0;)
	return
	// succ:  fn402072AC_exit
l402072BE:
	a2 = a14 + a12 * 0x00000004
	a3 = Mem0[a2 + 0x00000000:word32]
	branch a3 != 0x00000000 l402072DE_in_fn402072AC
	// succ:  l402072C5 l402072DE_in_fn402072AC
l402072C5:
l402072DE_in_fn402072AC:
	a0 = a8
	a15 = 0x401C9B98
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  fn402072AC_exit
fn402072AC_exit:


// fn402072C4
// Return size: 0
void fn402072C4()
fn402072C4_entry:
	// succ:  l402072C4
l402072C4:
	a1 = fp
	Mem0[a6:real32] = f7
	// succ:  l402072C4_thunk_fn402072C7
l402072C4_thunk_fn402072C7:
	call fn402072C7 (retsize: 0;)
	return
	// succ:  fn402072C4_exit
fn402072C4_exit:


// fn402072C7
// Return size: 0
void fn402072C7()
fn402072C7_entry:
	// succ:  l402072C7
l402072C7:
	a1 = fp
	__reserved()
	goto l402072C7_thunk_fn402072CA
	// succ:  l402072C7_thunk_fn402072CA
l402072C7:
	call fn402072CA (retsize: 0;)
	return
	// succ:  l402072C7_thunk_fn402072CA fn402072C7_exit
l402072C7_thunk_fn402072CA:
	call fn402072CA (retsize: 0;)
	return
	// succ:  fn402072C7_exit
l402072C7_thunk_fn402072CA:
	call fn402072CA (retsize: 0;)
	return
	// succ:  fn402072C7_exit
fn402072C7_exit:


// fn402072CA
// Return size: 0
void fn402072CA()
fn402072CA_entry:
	goto l402072CA
	// succ:  l402072CA
l402072C8:
	a12 = a12 - 1
	// succ:  l402072CA
l402072CA:
	a1 = v3
	a2 = a2 - 4
	branch a14 <u a2 l402072D5
	// succ:  l402072D0 l402072D5
l402072D0:
	Mem0[a4 + 0x00000010:word32] = a12
	goto l402072DE_in_fn402072AC
	// succ:  l402072DE_in_fn402072AC
l402072D5:
	a3 = Mem0[a2 + 0x00000000:word32]
	branch a3 == 0x00000000 l402072C8
	// succ:  l402072DA l402072C8
l402072DA:
	goto l402472D0
	// succ:  l402472D0
l402072DE_in_fn402072AC:
	a0 = a8
	a15 = 0x401C9B98
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  fn402072CA_exit
l402472D0:
fn402072CA_exit:


// fn402072DC
// Return size: 0
void fn402072DC()
fn402072DC_entry:
	// succ:  l402072DC
l402072DC:
	a1 = fp
	__reserved()
	// succ:  l402072DE
l402072DE:
	a0 = a8
	// succ:  l402072E0
l402072E0:
	a15 = 0x401C9B98
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  fn402072DC_exit
fn402072DC_exit:


// _dtoa_r
// Return size: 0
void _dtoa_r()
_dtoa_r_entry:
	// succ:  l402072F4
l402072F4:
	a1 = fp
	a9 = 0x00000090
	a1 = a1 - a9
	Mem0[a1 + 0x00000084:word32] = a13
	a13 = Mem0[a2 + 0x00000024:word32]
	Mem0[a1 + 0x00000088:word32] = a12
	Mem0[a1 + 0x0000008C:word32] = a0
	Mem0[a1 + 0x00000080:word32] = a14
	Mem0[a1 + 0x0000007C:word32] = a15
	// succ:  l40207309_thunk_fn4020730C
l40207309_thunk_fn4020730C:
	call fn4020730C (retsize: 0;)
	return
	// succ:  _dtoa_r_exit
_dtoa_r_exit:


// fn4020730C
// Return size: 0
void fn4020730C()
fn4020730C_entry:
	// succ:  l4020730C
l4020730C:
	a1 = fp
	Mem0[a1 + 0x00000014:word32] = a2
	Mem0[a1 + 0x00000034:word32] = a6
	Mem0[a1 + 0x00000044:word32] = a7
	Mem0[a1 + 0x00000020:word32] = a4
	Mem0[a1 + 0x00000024:word32] = a5
	a12 = Mem0[a1 + 0x00000094:word32]
	branch a13 != 0x00000000 l40207333
	// succ:  l4020731F l40207333
l4020731F:
	a2 = 16
	a0 = 0x402034C4
	v11 = a0
	a0 = 0x40207327
	call v11 (retsize: 0;)
	a8 = Mem0[a1 + 0x00000014:word32]
	Mem0[a8 + 0x00000024:word32] = a2
	Mem0[a2 + 0x00000004:word32] = a13
	Mem0[a2 + 0x00000008:word32] = a13
	Mem0[a2:word32] = a13
	Mem0[a2 + 0x0000000C:word32] = a13
	// succ:  l40207333
l40207333:
	a8 = Mem0[a1 + 0x00000014:word32]
	a2 = Mem0[a8 + 0x00000024:word32]
	a3 = Mem0[a2 + 0x00000000:word32]
	branch a3 == 0x00000000 l40207356
	// succ:  l4020733B l40207356
l4020733B:
	a2 = Mem0[a2 + 0x00000004:word32]
	a4 = 1
	Mem0[a3 + 0x00000004:word32] = a2
	SAR = 0x00000020 - a2
	a2 = a4 << SAR
	Mem0[a3 + 0x00000008:word32] = a2
	a2 = a8
	a0 = 0x4020734E
	call _Bfree (retsize: 0;)
	a8 = Mem0[a1 + 0x00000014:word32]
	a3 = 0
	a2 = Mem0[a8 + 0x00000024:word32]
	Mem0[a2:word32] = a3
	// succ:  l40207356
l40207356:
	a2 = Mem0[a1 + 0x00000024:word32]
	branch a2 >= 0x00000000 l4020736E
	// succ:  l4020735B l4020736E
l4020735B:
	a2 = 1
	a3 = Mem0[a1 + 0x00000024:word32]
	Mem0[a12:word32] = a2
	a2 = 0x402044FC
	a2 = a2 & a3
	Mem0[a1 + 0x00000024:word32] = a2
	goto l40207372
	// succ:  l40207372
l4020736E:
	a2 = 0
	Mem0[a12:word32] = a2
	// succ:  l40207372
l40207372:
	a15 = Mem0[a1 + 0x00000024:word32]
	a2 = 0x40204460
	a3 = a2 & a15
	branch a3 != a2 l402073AD
	// succ:  l4020737D l402073AD
l4020737D:
	a2 = 0x402045B0
	a8 = Mem0[a1 + 0x00000090:word32]
	a3 = Mem0[a1 + 0x00000020:word32]
	Mem0[a8:word32] = a2
	a2 = 0x402045A8
	branch a3 != 0x00000000 l40207398
	// succ:  l4020738C l40207398
l4020738C:
	a3 = 0x40204508
	a15 = a15 & a3
	a3 = 0x402045A4
	branch a15 != 0x00000000 l40207398
	// succ:  l40207395_1 l40207398
l40207395_1:
	a2 = a3
	// succ:  l40207398
l40207398:
	a8 = Mem0[a1 + 0x00000098:word32]
	branch a8 != 0x00000000 l402073A0
	// succ:  l4020739D l402073A0
l4020739D:
	call fn4020759E (retsize: 0;)
	return
	// succ:  l40207F04 fn4020730C_exit
l402073A0:
	v18 = Mem0[a2 + 0x00000003:byte]
	a5 = (uint32) v18
	a3 = a2 + 8
	a4 = a2 + 3
	branch a5 != 0x00000000 l402073AA
	// succ:  l402073A7_1 l402073AA
l402073A7_1:
	a3 = a4
	// succ:  l402073AA
l402073AA:
	goto l402073D8
	// succ:  l402073D8
l402073AD:
	a12 = Mem0[a1 + 0x00000020:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a4 = 0x402044A0
	a5 = 0x402044A0
	a2 = a12 | a12
	a3 = a13
	a0 = 0x402073C1
	call __nedf2 (retsize: 0;)
	branch a2 != 0x00000000 l402073DD
	// succ:  l402073C3 l402073DD
l402073C3:
	a8 = Mem0[a1 + 0x00000090:word32]
	a2 = 1
	Mem0[a8:word32] = a2
	a8 = Mem0[a1 + 0x00000098:word32]
	a2 = 0x402045AC
	branch a8 != 0x00000000 l402073D5
	// succ:  l402073D2 l402073D5
l402073D2:
	call fn4020759E (retsize: 0;)
	return
	// succ:  l40207F04 fn4020730C_exit
l402073D5:
	a3 = 0x402045B4
	// succ:  l402073D8
l402073D8:
	Mem0[a8:word32] = a3
	// succ:  l402073D8_thunk_fn4020759E
l402073D8_thunk_fn4020759E:
	call fn4020759E (retsize: 0;)
	return
	// succ:  fn4020730C_exit
l402073DD:
	a2 = Mem0[a1 + 0x00000014:word32]
	a4 = a12 | a12
	a5 = a13 | a13
	a6 = a1
	a7 = a1 + 4
	a0 = 0x402073ED
	call __d2b (retsize: 0;)
	Mem0[a1 + 0x0000001C:word32] = a2
	a4 = a15 >>u 0x00000014 & 0x000007FF
	branch a4 == 0x00000000 l4020740C
	// succ:  l402073F4 l4020740C
l402073F4:
	a6 = 0x40204508
	a5 = 0x402036AC
	a6 = a13 & a6
	a14 = 0xFFFFFC01
	a2 = a12
	a3 = a6 | a5
	a14 = a4 + a14
	a7 = 0
	goto l4020744F
	// succ:  l4020744F
l4020740C:
	a2 = Mem0[a1 + 0x00000000:word32]
	a14 = Mem0[a1 + 0x00000004:word32]
	a14 = a14 + a2
	a2 = 0xFFFFFBEF
	branch a14 < a2 l40207435
	// succ:  l40207418 l40207435
l40207418:
	a8 = Mem0[a1 + 0x00000020:word32]
	a3 = 0xFFFFFC0E
	a2 = a14 + 18
	a3 = a3 - a14
	SAR = a2
	a2 = a8 >> SAR
	SAR = 0x00000020 - a3
	a15 = a15 << SAR
	a2 = a2 | a15
	goto l40207443
	// succ:  l40207443
l40207435:
	a2 = 0xFFFFFBEE
	a3 = Mem0[a1 + 0x00000020:word32]
	a2 = a2 - a14
	SAR = 0x00000020 - a2
	a2 = a3 << SAR
	// succ:  l40207443
l40207443:
	a0 = 0x40207446
	call __floatunsidf (retsize: 0;)
	a4 = 0x402045B8
	a14 = a14 - 1
	a3 = a4 + a3
	a7 = 1
	// succ:  l4020744F
l4020744F:
	a4 = 0x402044A0
	a5 = 0x402045BC
	Mem0[a1 + 0x00000054:word32] = a7
	a0 = 0x4020745B
	call __subdf3 (retsize: 0;)
	a4 = 0x402045C0
	a5 = 0x402045C4
	a0 = 0x40207464
	call fn4030487C (retsize: 0;)
	a4 = 0x402045C8
	a5 = 0x402045CC
	a0 = 0x4020746D
	call __adddf3 (retsize: 0;)
	a12 = a2
	a2 = a14
	a13 = a3
	a0 = 0x40207476
	call __floatsidf (retsize: 0;)
	a4 = 0x402045D0
	a5 = 0x402045D4
	a0 = 0x4020747F
	call fn4030487C (retsize: 0;)
	a4 = a2
	a5 = a3
	a2 = a12
	a3 = a13
	a0 = 0x4020748A
	call __adddf3 (retsize: 0;)
	a12 = a2
	a13 = a3
	a0 = 0x40207491
	call __fixdfsi (retsize: 0;)
	a4 = 0x402044A0
	a5 = 0x402044A0
	Mem0[a1 + 0x00000010:word32] = a2
	a3 = a13 | a13
	a2 = a12 | a12
	a0 = 0x402074A3
	call __ltdf2 (retsize: 0;)
	branch a2 >= 0x00000000 l402074C4
	// succ:  l402074A3_thunk_fn402074A6 l402074A3_thunk_fn402074C4
l402074A3_thunk_fn402074A6:
	call fn402074A6 (retsize: 0;)
	return
	// succ:  fn4020730C_exit
l402074A3_thunk_fn402074C4:
	call fn402074C4 (retsize: 0;)
	return
	// succ:  fn4020730C_exit
fn4020730C_exit:


// fn40207468
// Return size: 0
void fn40207468()
fn40207468_entry:
	// succ:  l40207468
l40207468:
	a1 = fp
	Mem0[a4 + 0x0000003C:word32] = a5
	a0 = 0x4020746D
	call __adddf3 (retsize: 0;)
	a12 = a2
	a2 = a14
	a13 = a3
	a0 = 0x40207476
	call __floatsidf (retsize: 0;)
	a4 = 0x402045D0
	a5 = 0x402045D4
	a0 = 0x4020747F
	call fn4030487C (retsize: 0;)
	a4 = a2
	a5 = a3
	a2 = a12
	a3 = a13
	a0 = 0x4020748A
	call __adddf3 (retsize: 0;)
	a12 = a2
	a13 = a3
	a0 = 0x40207491
	call __fixdfsi (retsize: 0;)
	a4 = 0x402044A0
	a5 = 0x402044A0
	Mem0[a1 + 0x00000010:word32] = a2
	a3 = a13 | a13
	a2 = a12 | a12
	a0 = 0x402074A3
	call __ltdf2 (retsize: 0;)
	branch a2 >= 0x00000000 l402074A3_thunk_fn402074C4
	// succ:  l402074A3_thunk_fn402074A6 l402074A3_thunk_fn402074C4
l402074A3_thunk_fn402074A6:
	call fn402074A6 (retsize: 0;)
	return
	// succ:  fn40207468_exit l402074A3_thunk_fn402074A6
l402074A3_thunk_fn402074A6:
	call fn402074A6 (retsize: 0;)
	return
	// succ:  fn40207468_exit
l402074A3_thunk_fn402074C4:
	call fn402074C4 (retsize: 0;)
	return
	// succ:  fn40207468_exit
fn40207468_exit:


// fn402074A6
// Return size: 0
void fn402074A6()
fn402074A6_entry:
	// succ:  l402074A6
l402074A6:
	a1 = v3
	a2 = Mem0[a1 + 0x00000010:word32]
	a0 = 0x402074AB
	call __floatsidf (retsize: 0;)
	a4 = a2
	a5 = a3
	a2 = a12
	a3 = a13
	a0 = 0x402074B6
	call __nedf2 (retsize: 0;)
	a8 = Mem0[a1 + 0x00000010:word32]
	a3 = 0
	a4 = 1
	branch a2 == 0x00000000 l402074BF
	// succ:  l402074BC_1 l402074BF
l402074BC_1:
	a3 = a4
	// succ:  l402074BF
l402074BF:
	a8 = a8 - a3
	Mem0[a1 + 0x00000010:word32] = a8
	// succ:  l402074C2_thunk_fn402074C4
l402074C2_thunk_fn402074C4:
	call fn402074C4 (retsize: 0;)
	return
	// succ:  fn402074A6_exit
fn402074A6_exit:


// fn402074C4
// Return size: 0
void fn402074C4()
fn402074C4_entry:
	// succ:  l402074C4
l402074C4:
	a1 = v3
	a7 = 0x00000001
	a8 = Mem0[a1 + 0x00000010:word32]
	Mem0[a1 + 0x00000050:word32] = a7
	a2 = 0x00000016
	branch a2 <u a8 l402074FA
	// succ:  l402074D3 l402074FA
l402074D3:
	a2 = 0x40204544
	a4 = Mem0[a1 + 0x00000020:word32]
	a2 = a2 + a8 * 0x00000008
	a3 = Mem0[a2 + 0x00000004:word32]
	a5 = Mem0[a1 + 0x00000024:word32]
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x402074E4
	call __gtdf2 (retsize: 0;)
	branch a2 < 1 l402074F5
	// succ:  l402074E7 l402074F5
l402074E7:
	a7 = Mem0[a1 + 0x00000010:word32]
	a8 = 0
	a7 = a7 - 1
	Mem0[a1 + 0x00000010:word32] = a7
	Mem0[a1 + 0x00000050:word32] = a8
	goto l402074FA
	// succ:  l402074FA
l402074F5:
	a7 = 0
	Mem0[a1 + 0x00000050:word32] = a7
	// succ:  l402074FA
l402074FA:
	a2 = Mem0[a1 + 0x00000004:word32]
	a8 = 0
	a14 = a2 - a14
	a14 = a14 - 1
	Mem0[a1 + 0x00000028:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a8
	branch a14 >= a8 l40207511
	// succ:  l4020750A l40207511
l4020750A:
	a7 = -a14
	Mem0[a1 + 0x0000002C:word32] = a7
	Mem0[a1 + 0x00000028:word32] = a8
	// succ:  l40207511
l40207511:
	a7 = Mem0[a1 + 0x00000010:word32]
	branch a7 < 0x00000000 l40207526
	// succ:  l40207516 l40207526
l40207516:
	a8 = Mem0[a1 + 0x00000028:word32]
	Mem0[a1 + 0x0000004C:word32] = a7
	a8 = a8 + a7
	a7 = 0
	Mem0[a1 + 0x00000028:word32] = a8
	Mem0[a1 + 0x00000038:word32] = a7
	goto l40207539
	// succ:  l40207539
l40207526:
	a7 = Mem0[a1 + 0x00000010:word32]
	a8 = Mem0[a1 + 0x0000002C:word32]
	a8 = a8 - a7
	Mem0[a1 + 0x0000002C:word32] = a8
	a8 = -a7
	a7 = 0
	Mem0[a1 + 0x00000038:word32] = a8
	Mem0[a1 + 0x0000004C:word32] = a7
	// succ:  l40207539
l40207539:
	a8 = Mem0[a1 + 0x00000034:word32]
	// succ:  l40207539_thunk_fn4020753B
l40207539_thunk_fn4020753B:
	call fn4020753B (retsize: 0;)
	return
	// succ:  fn402074C4_exit
fn402074C4_exit:


// fn40207538
// Return size: 0
void fn40207538()
fn40207538_entry:
	// succ:  l40207538
l40207538:
	a1 = fp
	v5 = a8 + 0x00000344
	f1 = Mem0[v5:real32]
	a8 = v5
	// succ:  l40207538_thunk_fn4020753B
l40207538_thunk_fn4020753B:
	call fn4020753B (retsize: 0;)
	return
	// succ:  fn40207538_exit
fn40207538_exit:


// fn4020753B
// Return size: 0
void fn4020753B()
fn4020753B_entry:
	// succ:  l4020753B
l4020753B:
	a1 = fp
	a2 = 9
	a13 = 1
	branch a2 <u a8 l4020753F_thunk_fn4020759E
	goto l4020753F_thunk_fn40207542
	// succ:  l4020753F_thunk_fn40207542 l4020753F_thunk_fn4020759E
l4020753B:
	a2 = 9
	a13 = 1
	branch a2 <u a8 l4020759E
	goto l4020753F_thunk_fn40207542
	// succ:  l4020753F_thunk_fn40207542 l4020753F_thunk_fn4020759E
l4020753F_thunk_fn40207542:
	call fn40207542 (retsize: 0;)
	return
	// succ:  fn4020753B_exit l4020753F_thunk_fn40207542
l4020753F_thunk_fn40207542:
	call fn40207542 (retsize: 0;)
	return
	// succ:  fn4020753B_exit
l4020753F_thunk_fn40207542:
	call fn40207542 (retsize: 0;)
	return
	// succ:  fn4020753B_exit
l4020753F_thunk_fn4020759E:
	call fn4020759E (retsize: 0;)
	return
	// succ:  fn4020753B_exit
l4020753F_thunk_fn4020759E:
	call fn4020759E (retsize: 0;)
	return
	// succ:  fn4020753B_exit
fn4020753B_exit:


// fn40207542
// Return size: 0
void fn40207542()
fn40207542_entry:
	// succ:  l40207542
l40207542:
	a1 = v3
	branch a8 < 6 l4020754C
	// succ:  l40207545 l4020754C
l40207545:
	a8 = a8 - 4
	Mem0[a1 + 0x00000034:word32] = a8
	a13 = 0
	// succ:  l4020754C
l4020754C:
	a8 = Mem0[a1 + 0x00000034:word32]
	branch a8 == 3 l40207582
	// succ:  l40207551 l40207582
l40207551:
	branch a8 >= 4 l40207560
	// succ:  l40207554 l40207560
l40207554:
	a7 = 0
	Mem0[a1 + 0x00000040:word32] = a7
	branch a8 == 2 l40207575
	// succ:  l4020755C l40207575
l4020755C:
	goto l402075B0
	// succ:  l402075B0
l40207560:
	a8 = Mem0[a1 + 0x00000034:word32]
	branch a8 == 4 l40207570
	// succ:  l40207565 l40207570
l40207565:
	a7 = 1
	Mem0[a1 + 0x00000040:word32] = a7
	branch a8 == 5 l40207587
	// succ:  l4020756D l40207587
l4020756D:
	goto l402075B0
	// succ:  l402075B0
l40207570:
	a8 = 1
	Mem0[a1 + 0x00000040:word32] = a8
	// succ:  l40207575
l40207575:
	a8 = Mem0[a1 + 0x00000044:word32]
	branch a8 < 1 l402075C5
	// succ:  l4020757B l402075C5
l4020757B:
	Mem0[a1 + 0x0000003C:word32] = a8
	Mem0[a1 + 0x00000018:word32] = a8
	goto l40207599
	// succ:  l40207599
l40207582:
	a7 = 0
	Mem0[a1 + 0x00000040:word32] = a7
	// succ:  l40207587
l40207587:
	a8 = Mem0[a1 + 0x00000044:word32]
	a7 = Mem0[a1 + 0x00000010:word32]
	a2 = 1
	a8 = a8 + a7
	Mem0[a1 + 0x0000003C:word32] = a8
	a8 = a8 + 1
	Mem0[a1 + 0x00000018:word32] = a8
	branch a8 < a2 l402075D0
	goto l40207599
	// succ:  l40207599 l40207596_thunk_fn4020759E
l40207596_thunk_fn4020759E:
	call fn4020759E (retsize: 0;)
	return
	// succ:  fn40207542_exit
l40207599:
	a2 = a8
	// succ:  l40207599_thunk_fn4020759E
l40207599_thunk_fn4020759E:
	call fn4020759E (retsize: 0;)
	return
	// succ:  fn40207542_exit
l402075B0:
	a8 = 1
	a7 = -1
	Mem0[a1 + 0x00000040:word32] = a8
	Mem0[a1 + 0x0000003C:word32] = a7
	Mem0[a1 + 0x00000018:word32] = a7
	a2 = 18
	a8 = 0
	// succ:  l402075BD_thunk_fn4020759E
l402075BD_thunk_fn4020759E:
	call fn4020759E (retsize: 0;)
	return
	// succ:  fn40207542_exit
l402075C5:
	a7 = 1
	Mem0[a1 + 0x0000003C:word32] = a7
	Mem0[a1 + 0x00000018:word32] = a7
	a2 = a7
	Mem0[a1 + 0x00000044:word32] = a7
	// succ:  l402075CD_thunk_fn4020759E
l402075CD_thunk_fn4020759E:
	call fn4020759E (retsize: 0;)
	return
	// succ:  fn40207542_exit
fn40207542_exit:


// fn4020759E
// Return size: 0
void fn4020759E()
fn4020759E_entry:
	// succ:  l4020759E
l4020759E:
	a1 = v3
	a7 = -1
	a8 = 0
	Mem0[a1 + 0x00000034:word32] = a8
	Mem0[a1 + 0x00000040:word32] = a13
	Mem0[a1 + 0x0000003C:word32] = a7
	Mem0[a1 + 0x00000018:word32] = a7
	a2 = 18
	// succ:  l402075BF
l402075BF:
	Mem0[a1 + 0x00000044:word32] = a8
	// succ:  l402075D0
l402075D0:
	a8 = Mem0[a1 + 0x00000014:word32]
	a3 = 0
	a12 = Mem0[a8 + 0x00000024:word32]
	Mem0[a12 + 0x00000004:word32] = a3
	a3 = 4
	goto l402075E6
	// succ:  l402075E6
l402075DD:
	a4 = Mem0[a12 + 0x00000004:word32]
	a3 = a3 << 31
	a4 = a4 + 1
	Mem0[a12 + 0x00000004:word32] = a4
	// succ:  l402075E6
l402075E6:
	a4 = a3 + 20
	branch a2 >=u a4 l402075DD
	// succ:  l402075EC l402075DD
l402075EC:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = Mem0[a12 + 0x00000004:word32]
	a0 = 0x402075F3
	call _Balloc (retsize: 0;)
	a8 = Mem0[a1 + 0x00000014:word32]
	Mem0[a12:word32] = a2
	a2 = Mem0[a8 + 0x00000024:word32]
	a7 = Mem0[a1 + 0x00000018:word32]
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000030:word32] = a2
	a2 = 14
	branch a2 >=u a7 l40207607
	// succ:  l40207604 l40207607
l40207604:
	goto l402078FA
	// succ:  l402078FA
l40207607:
	branch a13 == 0x00000000 l402078FA
	// succ:  l4020760A l402078FA
l4020760A:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x00000024:word32]
	a7 = Mem0[a1 + 0x00000010:word32]
	Mem0[a1 + 0x00000058:word32] = a2
	Mem0[a1 + 0x0000005C:word32] = a3
	branch a7 < 1 l40207680
	// succ:  l40207619 l40207680
l40207619:
	a3 = 0x40204544
	a2 = a7 & 0x0000000F
	a2 = a3 + a2 * 0x00000008
	a13 = a7 >> 4
	a14 = Mem0[a2 + 0x00000000:word32]
	a15 = Mem0[a2 + 0x00000004:word32]
	a12 = 2
	branch (a13 & 0x00000010) == 0x00000000 l40207648
	// succ:  l4020762E l40207648
l4020762E:
	a4 = 0x40204548
	a2 = Mem0[a1 + 0x00000058:word32]
	a5 = Mem0[a4 + 0x00000024:word32]
	a3 = Mem0[a1 + 0x0000005C:word32]
	a4 = Mem0[a4 + 0x00000020:word32]
	a13 = a13 & 0x0000000F
	a0 = 0x40207642
	call __divdf3 (retsize: 0;)
	Mem0[a1 + 0x00000020:word32] = a2
	Mem0[a1 + 0x00000024:word32] = a3
	a12 = 3
	// succ:  l40207648
l40207648:
	a6 = 0x40204548
	goto l4020766E
	// succ:  l4020766E
l4020764E:
	branch (a13 & 0x00000001) == 0x00000000 l40207669
	// succ:  l40207651 l40207669
l40207651:
	a4 = Mem0[a6 + 0x00000000:word32]
	a5 = Mem0[a6 + 0x00000004:word32]
	a2 = a14
	a3 = a15 | a15
	Mem0[a1 + 0x0000006C:word32] = a6
	a0 = 0x40207660
	call fn4030487C (retsize: 0;)
	a6 = Mem0[a1 + 0x0000006C:word32]
	a12 = a12 + 1
	a14 = a2
	a15 = a3
	// succ:  l40207669
l40207669:
	a13 = a13 >> 1
	a6 = a6 + 8
	// succ:  l4020766E
l4020766E:
	branch a13 != 0x00000000 l4020764E
	// succ:  l40207671 l4020764E
l40207671:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x00000024:word32]
	a4 = a14
	a5 = a15
	a0 = 0x4020767C
	call __divdf3 (retsize: 0;)
	goto l402076C4
	// succ:  l402076C4
l40207680:
	a8 = Mem0[a1 + 0x00000010:word32]
	a12 = 0x00000002
	a13 = -a8
	branch a13 == 0x00000000 l402076C8
	// succ:  l4020768C l402076C8
l4020768C:
	a2 = 0x40204544
	a4 = a13 & 0x0000000F
	a4 = a2 + a4 * 0x00000008
	a5 = Mem0[a4 + 0x00000004:word32]
	a2 = Mem0[a1 + 0x00000058:word32]
	a3 = Mem0[a1 + 0x0000005C:word32]
	a4 = Mem0[a4 + 0x00000000:word32]
	a13 = a13 >> 4
	a0 = 0x402076A5
	call fn4030487C (retsize: 0;)
	a14 = 0x40204548
	goto l402076C1
	// succ:  l402076C1
l402076AD:
	branch (a13 & 0x00000001) == 0x00000000 l402076BC
	// succ:  l402076B0 l402076BC
l402076B0:
	a4 = Mem0[a14 + 0x00000000:word32]
	a5 = Mem0[a14 + 0x00000004:word32]
	a12 = a12 + 1
	a0 = 0x402076BC
	call fn4030487C (retsize: 0;)
	// succ:  l402076BC
l402076BC:
	a13 = a13 >> 1
	a14 = a14 + 8
	// succ:  l402076C1
l402076C1:
	branch a13 != 0x00000000 l402076AD
	// succ:  l402076C4 l402076AD
l402076C4:
	Mem0[a1 + 0x00000020:word32] = a2
	Mem0[a1 + 0x00000024:word32] = a3
	// succ:  l402076C8
l402076C8:
	a7 = Mem0[a1 + 0x00000050:word32]
	branch a7 == 0x00000000 l40207715
	// succ:  l402076CE l40207715
l402076CE:
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x00000024:word32]
	a4 = 0x402044A0
	a5 = 0x402036AC
	a2 = a14
	a3 = a15
	a0 = 0x402076DF
	call __ltdf2 (retsize: 0;)
	branch a2 >= 0x00000000 l4020770D
	// succ:  l402076E2 l4020770D
l402076E2:
	a8 = Mem0[a1 + 0x00000018:word32]
	branch a8 == 0x00000000 l40207715
	// succ:  l402076E6 l40207715
l402076E6:
	a7 = Mem0[a1 + 0x0000003C:word32]
	branch a7 >= 1 l402076EE
	// succ:  l402076EB l402076EE
l402076EB:
	goto l402078F0
	// succ:  l402078F0
l402076EE:
	a8 = Mem0[a1 + 0x00000010:word32]
	a4 = 0x402044A0
	a5 = 0x402045D8
	a8 = a8 - 1
	a2 = a14
	a3 = a15
	Mem0[a1 + 0x00000048:word32] = a8
	a0 = 0x40207702
	call fn4030487C (retsize: 0;)
	Mem0[a1 + 0x00000020:word32] = a2
	Mem0[a1 + 0x00000024:word32] = a3
	a12 = a12 + 1
	a13 = Mem0[a1 + 0x0000003C:word32]
	goto l4020771C
	// succ:  l4020771C
l4020770D:
	a8 = Mem0[a1 + 0x00000010:word32]
	Mem0[a1 + 0x00000048:word32] = a8
	goto l4020771A
	// succ:  l4020771A
l40207715:
	a7 = Mem0[a1 + 0x00000010:word32]
	Mem0[a1 + 0x00000048:word32] = a7
	// succ:  l4020771A
l4020771A:
	a13 = Mem0[a1 + 0x00000018:word32]
	// succ:  l4020771C
l4020771C:
	a2 = a12
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x00000024:word32]
	a0 = 0x40207725
	call __floatsidf (retsize: 0;)
	a4 = a14
	a5 = a15
	a0 = 0x4020772C
	call fn4030487C (retsize: 0;)
	a4 = 0x402044A0
	a5 = 0x402045DC
	a0 = 0x40207735
	call __adddf3 (retsize: 0;)
	a12 = 0x402045E0
	a6 = a2
	a12 = a3 + a12
	branch a13 != 0x00000000 l40207780
	// succ:  l4020773F l40207780
l4020773F:
	a4 = 0x402044A0
	a5 = 0x402045E4
	a2 = a14
	a3 = a15
	Mem0[a1 + 0x0000006C:word32] = a6
	Mem0[a1 + 0x00000064:word32] = a12
	a0 = 0x40207752
	call __subdf3 (retsize: 0;)
	a6 = Mem0[a1 + 0x0000006C:word32]
	a5 = a12
	a4 = a6
	a14 = a2
	a15 = a3
	a0 = 0x40207760
	call __gtdf2 (retsize: 0;)
	a6 = Mem0[a1 + 0x0000006C:word32]
	branch a2 < 1 l40207769
	// succ:  l40207766 l40207769
l40207766:
	goto l40207C5D
	// succ:  l40207C5D
l40207769:
	a4 = a6
	a6 = 0x4020449C
	a2 = a14
	a3 = a15
	a5 = a12 ^ a6
	a0 = 0x40207778
	call __ltdf2 (retsize: 0;)
	branch a2 < 0x00000000 l40207C4C
	// succ:  l4020777B l40207C4C
l4020777B:
	goto l402078F0
	// succ:  l402078F0
l40207780:
	a8 = Mem0[a1 + 0x00000040:word32]
	a2 = 0x40204544
	a3 = a13 - 1
	branch a8 == 0x00000000 l40207845
	// succ:  l4020778B l40207845
l4020778B:
	a4 = a2 + a3 * 0x00000008
	a5 = Mem0[a4 + 0x00000004:word32]
	a2 = 0x402044A0
	a4 = Mem0[a4 + 0x00000000:word32]
	a3 = 0x40204520
	Mem0[a1 + 0x0000006C:word32] = a6
	Mem0[a1 + 0x00000064:word32] = a12
	a0 = 0x402077A1
	call __divdf3 (retsize: 0;)
	a6 = Mem0[a1 + 0x0000006C:word32]
	a7 = Mem0[a1 + 0x00000064:word32]
	a4 = a6
	a5 = a7
	a0 = 0x402077AE
	call __subdf3 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000030:word32]
	Mem0[a1 + 0x00000020:word32] = a2
	Mem0[a1 + 0x00000024:word32] = a3
	a3 = a15
	a2 = a14
	a0 = 0x402077BB
	call __fixdfsi (retsize: 0;)
	a6 = a2
	Mem0[a1 + 0x0000006C:word32] = a6
	a0 = 0x402077C3
	call __floatsidf (retsize: 0;)
	a4 = a2
	a5 = a3
	a2 = a14
	a3 = a15
	a0 = 0x402077CE
	call __subdf3 (retsize: 0;)
	a6 = Mem0[a1 + 0x0000006C:word32]
	a12 = a12 + 1
	a14 = a2
	a6 = a6 + 48
	a2 = a12 - 1
	a4 = Mem0[a1 + 0x00000020:word32]
	a5 = Mem0[a1 + 0x00000024:word32]
	Mem0[a2:byte] = a6
	a2 = a14
	a15 = a3
	a0 = 0x402077E8
	call __ltdf2 (retsize: 0;)
	branch a2 < 0x00000000 l40207ED8
	// succ:  l402077EB l40207ED8
l402077EB:
	a2 = 0x402044A0
	a3 = 0x402036AC
	a4 = a14
	a5 = a15
	a0 = 0x402077F8
	call __subdf3 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000020:word32]
	a5 = Mem0[a1 + 0x00000024:word32]
	a0 = 0x402077FF
	call __ltdf2 (retsize: 0;)
	branch a2 < 0x00000000 l402079EC
	// succ:  l40207802 l402079EC
l40207802:
	a7 = Mem0[a1 + 0x00000030:word32]
	a2 = a12 - a7
	branch a2 < a13 l4020780D
	// succ:  l4020780A l4020780D
l4020780A:
	goto l402078F0
	// succ:  l402078F0
l4020780D:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x00000024:word32]
	a4 = 0x402044A0
	a5 = 0x402045D8
	a0 = 0x4020781B
	call fn4030487C (retsize: 0;)
	a4 = 0x402044A0
	a5 = 0x402045D8
	a6 = a2
	a7 = a3
	a2 = a14 | a14
	a3 = a15 | a15
	Mem0[a1 + 0x0000006C:word32] = a6
	Mem0[a1 + 0x00000064:word32] = a7
	a0 = 0x40207834
	call fn4030487C (retsize: 0;)
	a6 = Mem0[a1 + 0x0000006C:word32]
	a7 = Mem0[a1 + 0x00000064:word32]
	a14 = a2
	a15 = a3
	Mem0[a1 + 0x00000020:word32] = a6
	Mem0[a1 + 0x00000024:word32] = a7
	goto l402477B4
	// succ:  l402477B4
l40207845:
	a2 = a2 + a3 * 0x00000008
	a3 = Mem0[a2 + 0x00000004:word32]
	a2 = Mem0[a2 + 0x00000000:word32]
	a5 = a12
	a4 = a6
	a0 = 0x40207853
	call fn4030487C (retsize: 0;)
	a12 = Mem0[a1 + 0x00000030:word32]
	Mem0[a1 + 0x00000020:word32] = a2
	a8 = a12 + a13
	Mem0[a1 + 0x00000024:word32] = a3
	Mem0[a1 + 0x00000060:word32] = a8
	a3 = a15
	a2 = a14
	a0 = 0x40207865
	call __fixdfsi (retsize: 0;)
	a7 = a2
	Mem0[a1 + 0x00000064:word32] = a7
	a0 = 0x4020786D
	call __floatsidf (retsize: 0;)
	a4 = a2
	a5 = a3
	a2 = a14
	a3 = a15
	a0 = 0x40207878
	call __subdf3 (retsize: 0;)
	a7 = Mem0[a1 + 0x00000064:word32]
	a14 = a2
	a7 = a7 + 48
	Mem0[a12:byte] = a7
	a7 = Mem0[a1 + 0x00000060:word32]
	a12 = a12 + 1
	a15 = a3
	branch a12 != a7 l402078DD
	// succ:  l4020788D l402078DD
l4020788D:
	a8 = Mem0[a1 + 0x00000030:word32]
	a4 = 0x402044A0
	a5 = 0x40204520
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x00000024:word32]
	a12 = a8 + a13
	a0 = 0x4020789F
	call __adddf3 (retsize: 0;)
	a4 = a2
	a5 = a3
	a2 = a14
	a3 = a15
	a0 = 0x402078AA
	call __gtdf2 (retsize: 0;)
	branch a2 < 1 l402078B0
	// succ:  l402078AD l402078B0
l402078AD:
	goto l402079F4
	// succ:  l402079F4
l402078B0:
	a4 = Mem0[a1 + 0x00000020:word32]
	a5 = Mem0[a1 + 0x00000024:word32]
	a2 = 0x402044A0
	a3 = 0x40204520
	a0 = 0x402078BD
	call __subdf3 (retsize: 0;)
	a4 = a2
	a5 = a3
	a2 = a14
	a3 = a15
	a0 = 0x402078C8
	call __ltdf2 (retsize: 0;)
	branch a2 >= 0x00000000 l402078F0
	// succ:  l402078CB l402078F0
l402078CB:
	a3 = 48
	a2 = a12 - 1
	v22 = Mem0[a2 + 0x00000000:byte]
	a4 = (uint32) v22
	branch a4 == a3 l402078D8
	// succ:  l402078D5 l402078D8
l402078D5:
	goto l40207EE1
	// succ:  l40207EE1
l402078D8:
	a12 = a2
	goto l402478CD
	// succ:  l402478CD
l402078DD:
	a4 = 0x402044A0
	a5 = 0x402045D8
	a0 = 0x402078E6
	call fn4030487C (retsize: 0;)
	a14 = a2
	a15 = a3
	goto l4024785E
	// succ:  l4024785E
l402078F0:
	a2 = Mem0[a1 + 0x00000058:word32]
	a3 = Mem0[a1 + 0x0000005C:word32]
	Mem0[a1 + 0x00000020:word32] = a2
	Mem0[a1 + 0x00000024:word32] = a3
	// succ:  l402078FA
l402078FA:
	a2 = Mem0[a1 + 0x00000000:word32]
	branch a2 < 0x00000000 l40207A3C
	// succ:  l40207900 l40207A3C
l40207900:
	a7 = Mem0[a1 + 0x00000010:word32]
	a3 = 14
	branch a3 >= a7 l4020790B
	// succ:  l40207908 l4020790B
l40207908:
	goto l40207A3C
	// succ:  l40207A3C
l4020790B:
	a2 = 0x40204544
	a8 = Mem0[a1 + 0x00000018:word32]
	a2 = a2 + a7 * 0x00000008
	a14 = Mem0[a2 + 0x00000000:word32]
	a15 = Mem0[a2 + 0x00000004:word32]
	a2 = a8 - 1
	a2 = a8 | a2
	branch a2 >= 0x00000000 l4020794A
	// succ:  l4020791F l4020794A
l4020791F:
	a8 = Mem0[a1 + 0x00000044:word32]
	branch a8 >= 0x00000000 l4020794A
	// succ:  l40207925 l4020794A
l40207925:
	a7 = Mem0[a1 + 0x00000018:word32]
	branch a7 != 0x00000000 l40207C4A
	// succ:  l4020792A l40207C4A
l4020792A:
	a4 = 0x402044A0
	a5 = 0x402045E4
	a3 = a15
	a2 = a14
	a0 = 0x40207937
	call fn4030487C (retsize: 0;)
	a4 = Mem0[a1 + 0x00000020:word32]
	a5 = Mem0[a1 + 0x00000024:word32]
	a0 = 0x4020793E
	call __gedf2 (retsize: 0;)
	a13 = Mem0[a1 + 0x00000018:word32]
	a15 = a13
	branch a2 >= 0x00000000 l40207C4E
	// succ:  l40207945 l40207C4E
l40207945:
	goto l40207C64
	// succ:  l40207C64
l4020794A:
	a6 = Mem0[a1 + 0x00000020:word32]
	a7 = Mem0[a1 + 0x00000024:word32]
	a12 = Mem0[a1 + 0x00000030:word32]
	a2 = a6
	a3 = a7
	a4 = a14
	a5 = a15
	Mem0[a1 + 0x0000006C:word32] = a6
	Mem0[a1 + 0x00000064:word32] = a7
	a0 = 0x40207961
	call __divdf3 (retsize: 0;)
	a0 = 0x40207964
	call __fixdfsi (retsize: 0;)
	a13 = a2
	a0 = 0x40207969
	call __floatsidf (retsize: 0;)
	a4 = a14
	a5 = a15
	a0 = 0x40207970
	call fn4030487C (retsize: 0;)
	a7 = Mem0[a1 + 0x00000064:word32]
	a6 = Mem0[a1 + 0x0000006C:word32]
	a4 = a2
	a5 = a3
	a2 = a6
	a3 = a7
	a0 = 0x40207981
	call __subdf3 (retsize: 0;)
	a12 = a12 + 1
	a8 = Mem0[a1 + 0x00000030:word32]
	a4 = a2
	a5 = a3
	a2 = a12 - 1
	a3 = a13 + 48
	a7 = Mem0[a1 + 0x00000018:word32]
	Mem0[a2:byte] = a3
	a2 = a12 - a8
	branch a2 != a7 l40207A0E
	// succ:  l40207999 l40207A0E
l40207999:
	a2 = a4
	a3 = a5
	a0 = 0x402079A0
	call __adddf3 (retsize: 0;)
	a6 = a2
	a7 = a3
	a4 = a14 | a14
	a5 = a15 | a15
	Mem0[a1 + 0x0000006C:word32] = a6
	Mem0[a1 + 0x00000064:word32] = a7
	a0 = 0x402079B3
	call __gtdf2 (retsize: 0;)
	a6 = Mem0[a1 + 0x0000006C:word32]
	a7 = Mem0[a1 + 0x00000064:word32]
	branch a2 >= 1 l402079F9
	// succ:  l402079BC l402079F9
l402079BC:
	a2 = a6
	a3 = a7
	a4 = a14
	a5 = a15 | a15
	a0 = 0x402079C8
	call __nedf2 (retsize: 0;)
	branch a2 != 0x00000000 l40207EE6
	// succ:  l402079CB l40207EE6
l402079CB:
	branch (a13 & 0x00000001) != 0x00000000 l402079F9
	// succ:  l402079CE l402079F9
l402079CE:
	goto l40207EE6
	// succ:  l40207EE6
l402079D1:
	a8 = Mem0[a1 + 0x00000030:word32]
	branch a2 == a8 l402079DB
	// succ:  l402079D6 l402079DB
l402079D6:
	a12 = a2
	goto l402079FB
	// succ:  l402079FB
l402079DB:
	a7 = Mem0[a1 + 0x00000010:word32]
	a8 = Mem0[a1 + 0x00000030:word32]
	a7 = a7 + 1
	a3 = 48
	Mem0[a1 + 0x00000010:word32] = a7
	Mem0[a8:byte] = a3
	goto l40207A03
	// succ:  l40207A03
l402079EC:
	a7 = Mem0[a1 + 0x00000048:word32]
	Mem0[a1 + 0x00000010:word32] = a7
	goto l402079F9
	// succ:  l402079F9
l402079F4:
	a8 = Mem0[a1 + 0x00000048:word32]
	Mem0[a1 + 0x00000010:word32] = a8
	// succ:  l402079F9
l402079F9:
	a3 = 57
	// succ:  l402079FB
l402079FB:
	a2 = a12 - 1
	v20 = Mem0[a2 + 0x00000000:byte]
	a4 = (uint32) v20
	branch a4 == a3 l402079D1
	// succ:  l40207A03 l402079D1
l40207A03:
	v21 = Mem0[a2 + 0x00000000:byte]
	a3 = (uint32) v21
	a3 = a3 + 1
	Mem0[a2:byte] = a3
	goto l40207EE6
	// succ:  l40207EE6
l40207A0E:
	a2 = a4 | a4
	a3 = a5 | a5
	a4 = 0x402044A0
	a5 = 0x402045D8
	a0 = 0x40207A1D
	call fn4030487C (retsize: 0;)
	a4 = 0x402044A0
	a5 = 0x402044A0
	a6 = a2
	a7 = a3
	Mem0[a1 + 0x0000006C:word32] = a6
	Mem0[a1 + 0x00000064:word32] = a7
	a0 = 0x40207A30
	call __nedf2 (retsize: 0;)
	a6 = Mem0[a1 + 0x0000006C:word32]
	a7 = Mem0[a1 + 0x00000064:word32]
	branch a2 == 0x00000000 l40207EE6
	// succ:  l40207A39 l40207EE6
l40207A39:
	goto l40247950
	// succ:  l40247950
l40207A3C:
	a7 = Mem0[a1 + 0x00000040:word32]
	branch a7 == 0x00000000 l40207AAA
	// succ:  l40207A42 l40207AAA
l40207A42:
	a8 = Mem0[a1 + 0x00000034:word32]
	branch a8 >= 2 l40207A62
	// succ:  l40207A47 l40207A62
l40207A47:
	a7 = Mem0[a1 + 0x00000054:word32]
	branch a7 == 0x00000000 l40207A54
	// succ:  l40207A4C l40207A54
l40207A4C:
	a3 = 0x00000433
	a2 = a2 + a3
	goto l40207A5B
	// succ:  l40207A5B
l40207A54:
	a2 = Mem0[a1 + 0x00000004:word32]
	a3 = 54
	a2 = a3 - a2
	// succ:  l40207A5B
l40207A5B:
	a13 = Mem0[a1 + 0x00000038:word32]
	a12 = Mem0[a1 + 0x0000002C:word32]
	goto l40207A8E
	// succ:  l40207A8E
l40207A62:
	a8 = Mem0[a1 + 0x00000018:word32]
	a7 = Mem0[a1 + 0x00000038:word32]
	a13 = a8 - 1
	branch a7 < a13 l40207A71
	// succ:  l40207A6B l40207A71
l40207A6B:
	a13 = a7 - a13
	goto l40207A82
	// succ:  l40207A82
l40207A71:
	a8 = Mem0[a1 + 0x00000038:word32]
	a7 = Mem0[a1 + 0x0000004C:word32]
	a2 = a13 - a8
	a7 = a7 + a2
	Mem0[a1 + 0x00000038:word32] = a13
	Mem0[a1 + 0x0000004C:word32] = a7
	a13 = 0
	// succ:  l40207A82
l40207A82:
	a2 = Mem0[a1 + 0x00000018:word32]
	a12 = Mem0[a1 + 0x0000002C:word32]
	branch a2 >= 0x00000000 l40207A8E
	// succ:  l40207A89 l40207A8E
l40207A89:
	a12 = a12 - a2
	a2 = 0
	// succ:  l40207A8E
l40207A8E:
	a8 = Mem0[a1 + 0x0000002C:word32]
	a7 = Mem0[a1 + 0x00000028:word32]
	a8 = a8 + a2
	a7 = a7 + a2
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = 1
	Mem0[a1 + 0x0000002C:word32] = a8
	Mem0[a1 + 0x00000028:word32] = a7
	a0 = 0x40207AA4
	call __i2b (retsize: 0;)
	a15 = a2
	goto l40207AB1
	// succ:  l40207AB1
l40207AAA:
	a13 = Mem0[a1 + 0x00000038:word32]
	a12 = Mem0[a1 + 0x0000002C:word32]
	a15 = Mem0[a1 + 0x00000040:word32]
	// succ:  l40207AB1
l40207AB1:
	a8 = Mem0[a1 + 0x00000028:word32]
	a2 = a8 >> 31
	a2 = a2 - a8
	branch a2 >= 0x00000000 l40207ADD
	// succ:  l40207ABC l40207ADD
l40207ABC:
	a2 = a12 >> 31
	a2 = a2 - a12
	branch a2 >= 0x00000000 l40207ADD
	// succ:  l40207AC5 l40207ADD
l40207AC5:
	a2 = a8
	branch a12 >= a8 l40207ACC
	// succ:  l40207ACA l40207ACC
l40207ACA:
	a2 = a12
	// succ:  l40207ACC
l40207ACC:
	a7 = Mem0[a1 + 0x0000002C:word32]
	a8 = Mem0[a1 + 0x00000028:word32]
	a7 = a7 - a2
	a8 = a8 - a2
	Mem0[a1 + 0x0000002C:word32] = a7
	a12 = a12 - a2
	Mem0[a1 + 0x00000028:word32] = a8
	// succ:  l40207ADD
l40207ADD:
	a7 = Mem0[a1 + 0x00000038:word32]
	branch a7 < 1 l40207B25
	// succ:  l40207AE3 l40207B25
l40207AE3:
	a8 = Mem0[a1 + 0x00000040:word32]
	branch a8 == 0x00000000 l40207B1A
	// succ:  l40207AE8 l40207B1A
l40207AE8:
	branch a13 < 1 l40207B0A
	// succ:  l40207AEB l40207B0A
l40207AEB:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = a15
	a4 = a13
	a0 = 0x40207AF4
	call __pow5mult (retsize: 0;)
	a15 = a2
	a4 = Mem0[a1 + 0x0000001C:word32]
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = a15
	a0 = 0x40207AFF
	call __multiply (retsize: 0;)
	a14 = a2
	a3 = Mem0[a1 + 0x0000001C:word32]
	a2 = Mem0[a1 + 0x00000014:word32]
	a0 = 0x40207B08
	call _Bfree (retsize: 0;)
	Mem0[a1 + 0x0000001C:word32] = a14
	// succ:  l40207B0A
l40207B0A:
	a7 = Mem0[a1 + 0x00000038:word32]
	a2 = Mem0[a1 + 0x00000014:word32]
	a4 = a7 - a13
	a3 = Mem0[a1 + 0x0000001C:word32]
	branch a4 != 0x00000000 l40207B20
	// succ:  l40207B15 l40207B20
l40207B15:
	goto l40207B25
	// succ:  l40207B25
l40207B1A:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = Mem0[a1 + 0x0000001C:word32]
	a4 = Mem0[a1 + 0x00000038:word32]
	// succ:  l40207B20
l40207B20:
	a0 = 0x40207B23
	call __pow5mult (retsize: 0;)
	Mem0[a1 + 0x0000001C:word32] = a2
	// succ:  l40207B25
l40207B25:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = 0x00000001
	a0 = 0x40207B2D
	call __i2b (retsize: 0;)
	a8 = Mem0[a1 + 0x0000004C:word32]
	a13 = a2
	branch a8 < 1 l40207B40
	// succ:  l40207B35 l40207B40
l40207B35:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = a13
	a4 = a8
	a0 = 0x40207B3E
	call __pow5mult (retsize: 0;)
	a13 = a2
	// succ:  l40207B40
l40207B40:
	a7 = 0
	a8 = Mem0[a1 + 0x00000034:word32]
	Mem0[a1 + 0x00000038:word32] = a7
	branch a8 >= 2 l40207B6C
	// succ:  l40207B49 l40207B6C
l40207B49:
	a2 = Mem0[a1 + 0x00000020:word32]
	branch a2 != a7 l40207B6C
	// succ:  l40207B4E l40207B6C
l40207B4E:
	a2 = 0x40204508
	a3 = Mem0[a1 + 0x00000024:word32]
	branch (a2 & a3) != 0x00000000 l40207B6C
	// succ:  l40207B56 l40207B6C
l40207B56:
	a2 = 0x40204460
	branch (a2 & a3) == 0x00000000 l40207B6C
	// succ:  l40207B5C l40207B6C
l40207B5C:
	a7 = Mem0[a1 + 0x0000002C:word32]
	a8 = Mem0[a1 + 0x00000028:word32]
	a7 = a7 + 1
	Mem0[a1 + 0x0000002C:word32] = a7
	a8 = a8 + 1
	a7 = 1
	Mem0[a1 + 0x00000028:word32] = a8
	Mem0[a1 + 0x00000038:word32] = a7
	// succ:  l40207B6C
l40207B6C:
	a8 = Mem0[a1 + 0x0000004C:word32]
	a2 = 0x00000001
	branch a8 == 0x00000000 l40207B85
	// succ:  l40207B75 l40207B85
l40207B75:
	a2 = Mem0[a13 + 0x00000010:word32]
	a2 = a13 + a2 * 0x00000004
	a2 = Mem0[a2 + 0x00000010:word32]
	a0 = 0x40207B80
	call __hi0bits (retsize: 0;)
	a3 = 32
	a2 = a3 - a2
	// succ:  l40207B85
l40207B85:
	a7 = Mem0[a1 + 0x00000028:word32]
	a2 = a2 + a7
	a2 = a2 & 0x0000001F
	branch a2 == 0x00000000 l40207BB1
	// succ:  l40207B8E l40207BB1
l40207B8E:
	a3 = 32
	a3 = a3 - a2
	branch a3 < 5 l40207BAC
	// succ:  l40207B96 l40207BAC
l40207B96:
	a8 = Mem0[a1 + 0x0000002C:word32]
	a3 = 28
	a2 = a3 - a2
	a8 = a8 + a2
	a7 = a7 + a2
	Mem0[a1 + 0x0000002C:word32] = a8
	a12 = a12 + a2
	Mem0[a1 + 0x00000028:word32] = a7
	goto l40207BC2
	// succ:  l40207BC2
l40207BAC:
	branch a3 == 4 l40207BC2
	// succ:  l40207BAF l40207BC2
l40207BAF:
	a2 = a3
	// succ:  l40207BB1
l40207BB1:
	a7 = Mem0[a1 + 0x0000002C:word32]
	a8 = Mem0[a1 + 0x00000028:word32]
	a2 = a2 + 28
	a7 = a7 + a2
	a8 = a8 + a2
	Mem0[a1 + 0x0000002C:word32] = a7
	a12 = a12 + a2
	Mem0[a1 + 0x00000028:word32] = a8
	// succ:  l40207BC2
l40207BC2:
	a7 = Mem0[a1 + 0x0000002C:word32]
	branch a7 < 1 l40207BD5
	// succ:  l40207BC7 l40207BD5
l40207BC7:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = Mem0[a1 + 0x0000001C:word32]
	a4 = a7 | a7
	a0 = 0x40207BD2
	call __lshift (retsize: 0;)
	Mem0[a1 + 0x0000001C:word32] = a2
	// succ:  l40207BD5
l40207BD5:
	a8 = Mem0[a1 + 0x00000028:word32]
	branch a8 < 1 l40207BE5
	// succ:  l40207BDA l40207BE5
l40207BDA:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = a13
	a4 = a8
	a0 = 0x40207BE3
	call __lshift (retsize: 0;)
	a13 = a2
	// succ:  l40207BE5
l40207BE5:
	a7 = Mem0[a1 + 0x00000050:word32]
	branch a7 == 0x00000000 l40207C1D
	// succ:  l40207BEA l40207C1D
l40207BEA:
	a2 = Mem0[a1 + 0x0000001C:word32]
	a3 = a13
	a0 = 0x40207BF1
	call __mcmp (retsize: 0;)
	branch a2 >= 0x00000000 l40207C1D
	// succ:  l40207BF4 l40207C1D
l40207BF4:
	a8 = Mem0[a1 + 0x00000010:word32]
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = Mem0[a1 + 0x0000001C:word32]
	a8 = a8 - 1
	a4 = 10
	a5 = 0
	Mem0[a1 + 0x00000010:word32] = a8
	a0 = 0x40207C05
	call __multadd (retsize: 0;)
	a7 = Mem0[a1 + 0x0000003C:word32]
	a8 = Mem0[a1 + 0x00000040:word32]
	Mem0[a1 + 0x0000001C:word32] = a2
	Mem0[a1 + 0x00000018:word32] = a7
	branch a8 == 0x00000000 l40207C1D
	// succ:  l40207C10 l40207C1D
l40207C10:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = a15
	a4 = 10
	a5 = 0
	a0 = 0x40207C1B
	call __multadd (retsize: 0;)
	a15 = a2
	// succ:  l40207C1D
l40207C1D:
	a7 = Mem0[a1 + 0x00000018:word32]
	a2 = a7 - 1
	a2 = a7 | a2
	branch a2 >= 0x00000000 l40207C7D
	// succ:  l40207C29 l40207C7D
l40207C29:
	a8 = Mem0[a1 + 0x00000034:word32]
	branch a8 < 3 l40207C7D
	// succ:  l40207C2E l40207C7D
l40207C2E:
	branch a7 != 0x00000000 l40207C4E
	// succ:  l40207C30 l40207C4E
l40207C30:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = a13
	a4 = 5
	a5 = a7
	a0 = 0x40207C3B
	call __multadd (retsize: 0;)
	a13 = a2
	a2 = Mem0[a1 + 0x0000001C:word32]
	a3 = a13
	a0 = 0x40207C44
	call __mcmp (retsize: 0;)
	branch a2 >= 1 l40207C64
	// succ:  l40207C47 l40207C64
l40207C47:
	goto l40207C4E
	// succ:  l40207C4E
l40207C4A:
	a13 = 0
	// succ:  l40207C4C
l40207C4C:
	a15 = a13
	// succ:  l40207C4E
l40207C4E:
	a8 = Mem0[a1 + 0x00000044:word32]
	a2 = -1
	a2 = a2 ^ a8
	Mem0[a1 + 0x00000010:word32] = a2
	a12 = Mem0[a1 + 0x00000030:word32]
	goto l40207C73
	// succ:  l40207C73
l40207C5D:
	a7 = Mem0[a1 + 0x00000048:word32]
	a15 = a13
	Mem0[a1 + 0x00000010:word32] = a7
	// succ:  l40207C64
l40207C64:
	a7 = Mem0[a1 + 0x00000010:word32]
	a8 = Mem0[a1 + 0x00000030:word32]
	a2 = 49
	a7 = a7 + 1
	a12 = a8 + 1
	Mem0[a8:byte] = a2
	Mem0[a1 + 0x00000010:word32] = a7
	// succ:  l40207C73
l40207C73:
	a14 = a15
	a15 = 0
l40207C7D:
	a8 = Mem0[a1 + 0x00000040:word32]
	branch a8 == 0x00000000 l40207E15
	// succ:  l40207C83 l40207E15
l40207C83:
	branch a12 < 1 l40207C94
	// succ:  l40207C86 l40207C94
l40207C86:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = a15 | a15
	a4 = a12 | a12
	a0 = 0x40207C92
	call __lshift (retsize: 0;)
	a15 = a2
	// succ:  l40207C94
l40207C94:
	a7 = Mem0[a1 + 0x00000038:word32]
	a14 = a15 | a15
	branch a7 == 0x00000000 l40207CC2
	// succ:  l40207C9C l40207CC2
l40207C9C:
	a3 = Mem0[a15 + 0x00000004:word32]
	a2 = Mem0[a1 + 0x00000014:word32]
	a0 = 0x40207CA4
	call _Balloc (retsize: 0;)
	a4 = Mem0[a15 + 0x00000010:word32]
	a12 = a2
	a4 = a4 + 2
	a3 = a15 + 12
	a4 = a4 << 30
	a2 = a2 + 12
	a0 = 0x40203130
	v15 = a0
	a0 = 0x40207CB7
	call v15 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = a12
	a4 = 1
	a0 = 0x40207CC0
	call __lshift (retsize: 0;)
	a14 = a2
	// succ:  l40207CC2
l40207CC2:
	a6 = Mem0[a1 + 0x00000030:word32]
	a7 = Mem0[a1 + 0x00000020:word32]
	a8 = Mem0[a1 + 0x00000018:word32]
	a12 = a6 - 1
	a12 = a12 + a8
	a7 = a7 & 0x00000001
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000020:word32] = a7
	a2 = Mem0[a1 + 0x0000001C:word32]
	a3 = a13
	Mem0[a1 + 0x0000006C:word32] = a6
	a0 = 0x40207CDE
	call fn403071B4 (retsize: 0;)
	a5 = a2 + 48
	a12 = a2
	a2 = Mem0[a1 + 0x0000001C:word32]
	a3 = a15
	Mem0[a1 + 0x00000068:word32] = a5
	a0 = 0x40207CEE
	call __mcmp (retsize: 0;)
	Mem0[a1 + 0x00000018:word32] = a2
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = a13
	a4 = a14
	a0 = 0x40207CF9
	call __mdiff (retsize: 0;)
	a7 = a2
	a2 = Mem0[a2 + 0x0000000C:word32]
	a5 = Mem0[a1 + 0x00000068:word32]
	a6 = Mem0[a1 + 0x0000006C:word32]
	branch a2 != 0x00000000 l40207D1E
	// succ:  l40207D05 l40207D1E
l40207D05:
	a2 = Mem0[a1 + 0x0000001C:word32]
	a3 = a7 | a7
	Mem0[a1 + 0x00000064:word32] = a7
	a0 = 0x40207D10
	call __mcmp (retsize: 0;)
	a4 = a2
	a5 = Mem0[a1 + 0x00000068:word32]
	a6 = Mem0[a1 + 0x0000006C:word32]
	a7 = Mem0[a1 + 0x00000064:word32]
	goto l40207D20
	// succ:  l40207D20
l40207D1E:
	a4 = 1
	// succ:  l40207D20
l40207D20:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = a7 | a7
	Mem0[a1 + 0x00000064:word32] = a4
	Mem0[a1 + 0x00000068:word32] = a5
	Mem0[a1 + 0x0000006C:word32] = a6
	a0 = 0x40207D31
	call _Bfree (retsize: 0;)
	a4 = Mem0[a1 + 0x00000064:word32]
	a8 = Mem0[a1 + 0x00000034:word32]
	a6 = Mem0[a1 + 0x0000006C:word32]
	a3 = a4 | a8
	a2 = a6 + 1
	a5 = Mem0[a1 + 0x00000068:word32]
	branch a3 != 0x00000000 l40207D59
	// succ:  l40207D43 l40207D59
l40207D43:
	a7 = Mem0[a1 + 0x00000020:word32]
	branch a7 != 0x00000000 l40207D59
	// succ:  l40207D47 l40207D59
l40207D47:
	a3 = 57
	branch a5 == a3 l40207DB4
	// succ:  l40207D4C l40207DB4
l40207D4C:
	a8 = Mem0[a1 + 0x00000018:word32]
	branch a8 < 1 l40207D54
	// succ:  l40207D51 l40207D54
l40207D51:
	a5 = a12 + 49
	// succ:  l40207D54
l40207D54:
	a12 = a2
	goto l40207DA4
	// succ:  l40207DA4
l40207D59:
	a7 = Mem0[a1 + 0x00000018:word32]
	branch a7 >= 0x00000000 l40207D64
	// succ:  l40207D5E l40207D64
l40207D5E:
	branch a4 >= 1 l40207D76
	// succ:  l40207D61 l40207D76
l40207D61:
	goto l40207DA2
	// succ:  l40207DA2
l40207D64:
	a8 = Mem0[a1 + 0x00000018:word32]
	a7 = Mem0[a1 + 0x00000034:word32]
	a3 = a8 | a7
	branch a3 != 0x00000000 l40207DAC
	// succ:  l40207D6E l40207DAC
l40207D6E:
	a8 = Mem0[a1 + 0x00000020:word32]
	branch a8 != 0x00000000 l40207DAC
	// succ:  l40207D73 l40207DAC
l40207D73:
	goto l40247D5E
	// succ:  l40247D5E
l40207D76:
	a3 = Mem0[a1 + 0x0000001C:word32]
	a2 = Mem0[a1 + 0x00000014:word32]
	a4 = 1
	Mem0[a1 + 0x00000068:word32] = a5
	Mem0[a1 + 0x0000006C:word32] = a6
	a0 = 0x40207D85
	call __lshift (retsize: 0;)
	a3 = a13
	Mem0[a1 + 0x0000001C:word32] = a2
	a0 = 0x40207D8C
	call __mcmp (retsize: 0;)
	a5 = Mem0[a1 + 0x00000068:word32]
	a6 = Mem0[a1 + 0x0000006C:word32]
	branch a2 >= 1 l40207D9A
	// succ:  l40207D95 l40207D9A
l40207D95:
	branch a2 != 0x00000000 l40207DA2
	// succ:  l40207D97 l40207DA2
l40207D97:
	branch (a5 & 0x00000001) == 0x00000000 l40207DA2
	// succ:  l40207D9A l40207DA2
l40207D9A:
	a2 = 57
	branch a5 == a2 l40207DB4
	// succ:  l40207D9F l40207DB4
l40207D9F:
	a5 = a12 + 49
	// succ:  l40207DA2
l40207DA2:
	a12 = a6 + 1
	// succ:  l40207DA4
l40207DA4:
	Mem0[a6:byte] = a5
	goto l40207EB6
	// succ:  l40207EB6
l40207DAC:
	branch a4 < 1 l40207DC6
	// succ:  l40207DAF l40207DC6
l40207DAF:
	a3 = 57
	branch a5 != a3 l40207DBE
	// succ:  l40207DB4 l40207DBE
l40207DB4:
	a2 = 57
	a12 = a6 + 1
	Mem0[a6:byte] = a2
	a2 = 57
	a12 = a6 + 1
	Mem0[a6:byte] = a2
	goto l40207E94
	// succ:  l40207E94
l40207DBE:
	a12 = a2
	a5 = a5 + 1
	goto l40247DA4
	// succ:  l40247DA4
l40207DC6:
	a7 = a6 + 1
	a8 = Mem0[a1 + 0x00000028:word32]
	Mem0[a1 + 0x00000018:word32] = a7
	Mem0[a6:byte] = a5
	a12 = a7
	branch a6 != a8 l40207DD9
	// succ:  l40207DD6 l40207DD9
l40207DD6:
	goto l40207E59
	// succ:  l40207E59
l40207DD9:
	a3 = Mem0[a1 + 0x0000001C:word32]
	a2 = Mem0[a1 + 0x00000014:word32]
	a4 = 10
	a5 = 0
	a0 = 0x40207DE4
	call __multadd (retsize: 0;)
	Mem0[a1 + 0x0000001C:word32] = a2
	a3 = a15
	a2 = Mem0[a1 + 0x00000014:word32]
	a4 = 10
	a5 = 0
	branch a15 != a14 l40207DFC
	// succ:  l40207DF1 l40207DFC
l40207DF1:
	a0 = 0x40207DF4
	call __multadd (retsize: 0;)
	a15 = a2
	a14 = a2
	goto l40207E10
	// succ:  l40207E10
l40207DFC:
	a0 = 0x40207DFF
	call __multadd (retsize: 0;)
	a15 = a2 | a2
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = a14
	a4 = 10
	a5 = 0
	a0 = 0x40207E0E
	call __multadd (retsize: 0;)
	a14 = a2
	// succ:  l40207E10
l40207E10:
	a6 = Mem0[a1 + 0x00000018:word32]
	goto l40247CD4
	// succ:  l40247CD4
l40207E15:
	a12 = Mem0[a1 + 0x00000040:word32]
	a2 = Mem0[a1 + 0x0000001C:word32]
	a3 = a13 | a13
	a0 = 0x40207E20
	call fn403071B4 (retsize: 0;)
	a7 = Mem0[a1 + 0x00000030:word32]
	a5 = a2 + 48
	a8 = Mem0[a1 + 0x00000018:word32]
	a2 = a7 + a12
	Mem0[a2:byte] = a5
	a12 = a12 + 1
	branch a12 < a8 l40207E44
	// succ:  l40207E31 l40207E44
l40207E31:
	a12 = a8
	branch a8 >= 1 l40207E38
	// succ:  l40207E36 l40207E38
l40207E36:
	a12 = 1
	// succ:  l40207E38
l40207E38:
	a7 = Mem0[a1 + 0x00000030:word32]
	a14 = a15
	a12 = a7 + a12
	a15 = 0
	goto l40207E59
	// succ:  l40207E59
l40207E44:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = Mem0[a1 + 0x0000001C:word32]
	a4 = 0x0000000A
	a5 = 0
	a0 = 0x40207E52
	call __multadd (retsize: 0;)
	Mem0[a1 + 0x0000001C:word32] = a2
	goto l40247E18
	// succ:  l40247E18
l40207E59:
	a3 = Mem0[a1 + 0x0000001C:word32]
	a2 = Mem0[a1 + 0x00000014:word32]
	a4 = 1
	Mem0[a1 + 0x00000068:word32] = a5
	a0 = 0x40207E65
	call __lshift (retsize: 0;)
	a3 = a13
	Mem0[a1 + 0x0000001C:word32] = a2
	a0 = 0x40207E6C
	call __mcmp (retsize: 0;)
	a5 = Mem0[a1 + 0x00000068:word32]
	branch a2 >= 1 l40207E94
	// succ:  l40207E72 l40207E94
l40207E72:
	branch a2 != 0x00000000 l40207EA6
	// succ:  l40207E74 l40207EA6
l40207E74:
	branch (a5 & 0x00000001) != 0x00000000 l40207E94
	// succ:  l40207E77 l40207E94
l40207E77:
	goto l40207EA6
	// succ:  l40207EA6
l40207E7A:
	a8 = Mem0[a1 + 0x00000030:word32]
	branch a2 == a8 l40207E84
	// succ:  l40207E7F l40207E84
l40207E7F:
	a12 = a2
	goto l40207E96
	// succ:  l40207E96
l40207E84:
	a7 = Mem0[a1 + 0x00000010:word32]
	a8 = Mem0[a1 + 0x00000030:word32]
	a7 = a7 + 1
	a2 = 49
	Mem0[a1 + 0x00000010:word32] = a7
	Mem0[a8:byte] = a2
	goto l40207EB6
	// succ:  l40207EB6
l40207E94:
	a4 = 57
	// succ:  l40207E96
l40207E96:
	a2 = a12 - 1
	v18 = Mem0[a2 + 0x00000000:byte]
	a3 = (uint32) v18
	branch a3 == a4 l40207E7A
	// succ:  l40207E9E l40207E7A
l40207E9E:
	a3 = a3 + 1
	Mem0[a2:byte] = a3
	goto l40207EB6
	// succ:  l40207EB6
l40207EA6:
	a3 = 48
	a2 = a12 - 1
	v19 = Mem0[a2 + 0x00000000:byte]
	a4 = (uint32) v19
	branch a4 != a3 l40207EB6
	// succ:  l40207EB0 l40207EB6
l40207EB0:
	a12 = a2
	// succ:  l40207EB6 l40247EA8
l40207EB6:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = a13 | a13
	a0 = 0x40207EBF
	call _Bfree (retsize: 0;)
	branch a14 == 0x00000000 l40207EE6
	// succ:  l40207EC2 l40207EE6
l40207EC2:
	branch a15 == a14 l40207ECE
	// succ:  l40207EC5 l40207ECE
l40207EC5:
	branch a15 == 0x00000000 l40207ECE
	// succ:  l40207EC7 l40207ECE
l40207EC7:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = a15
	a0 = 0x40207ECE
	call _Bfree (retsize: 0;)
	// succ:  l40207ECE
l40207ECE:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = a14
	a0 = 0x40207ED5
	call _Bfree (retsize: 0;)
	goto l40207EE6
	// succ:  l40207EE6
l40207ED8:
	a7 = Mem0[a1 + 0x00000048:word32]
	Mem0[a1 + 0x00000010:word32] = a7
	goto l40207EE6
	// succ:  l40207EE6
l40207EE1:
	a8 = Mem0[a1 + 0x00000048:word32]
	Mem0[a1 + 0x00000010:word32] = a8
	// succ:  l40207EE6
l40207EE6:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = Mem0[a1 + 0x0000001C:word32]
	a0 = 0x40207EED
	call _Bfree (retsize: 0;)
	a7 = Mem0[a1 + 0x00000010:word32]
	a2 = 0
	a8 = Mem0[a1 + 0x00000090:word32]
	Mem0[a12:byte] = a2
	a2 = a7 + 1
	Mem0[a8:word32] = a2
	a8 = Mem0[a1 + 0x00000098:word32]
	branch a8 == 0x00000000 l40207F02
	// succ:  l40207F00 l40207F02
l40207F00:
	Mem0[a8:word32] = a12
	// succ:  l40207F02
l40207F02:
	a2 = Mem0[a1 + 0x00000030:word32]
	// succ:  l40207F04
l40207F04:
	a0 = Mem0[a1 + 0x0000008C:word32]
	a9 = 0x00000090
	a12 = Mem0[a1 + 0x00000088:word32]
	a13 = Mem0[a1 + 0x00000084:word32]
	a14 = Mem0[a1 + 0x00000080:word32]
	a15 = Mem0[a1 + 0x0000007C:word32]
	a1 = a1 + a9
	return
	// succ:  fn4020759E_exit
l402477B4:
l4024785E:
l402478CD:
l40247950:
l40247CD4:
l40247D5E:
l40247DA4:
l40247E18:
l40247EA8:
fn4020759E_exit:


// __sflush_r
// Return size: 0
void __sflush_r()
__sflush_r_entry:
	// succ:  l40207F1C
l40207F1C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	a12 = a3
	v5 = Mem0[a3 + 0x0000000C:int16]
	a3 = (int32) v5
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a0
	a13 = a2
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a15
	a2 = a3 & 0x0000FFFF
	branch (a2 & 0x00000008) == 0x00000000 l40207F39
	// succ:  l40207F36 l40207F39
l40207F36:
	goto l40208024
	// succ:  l40208024
l40207F39:
	a15 = 0x402045E8
	a2 = Mem0[a12 + 0x00000004:word32]
	a15 = a3 | a15
	a15 = a15 << 16
	a15 = a15 >> 16
	Mem0[a12 + 0x0000000C:word16] = a15
	branch a2 >= 1 l40207F56
	// succ:  l40207F4D l40207F56
l40207F4D:
	a2 = Mem0[a12 + 0x00000040:word32]
	branch a2 >= 1 l40207F56
	// succ:  l40207F53 l40207F56
l40207F53:
	goto l40207F9E
	// succ:  l40207F9E
l40207F56:
	a6 = Mem0[a12 + 0x0000002C:word32]
	branch a6 == 0x00000000 l40207F9E
	// succ:  l40207F5B l40207F9E
l40207F5B:
	a2 = 0
	a14 = Mem0[a13 + 0x00000000:word32]
	Mem0[a13:word32] = a2
	a2 = 0x402040DC
	a15 = a15 & a2
	a15 = a15 & 0x0000FFFF
	branch a15 == 0x00000000 l40207F72
	// succ:  l40207F6C l40207F72
l40207F6C:
	a4 = Mem0[a12 + 0x00000054:word32]
	goto l40207FA4
	// succ:  l40207FA4
l40207F72:
	a3 = Mem0[a12 + 0x00000020:word32]
	a4 = a15
	a2 = a13
	a5 = 1
	a0 = 0x40207F7D
	call a6 (retsize: 0;)
	a4 = a2
	branch a2 != -1 l40207FA4
	// succ:  l40207F82 l40207FA4
l40207F82:
	a2 = Mem0[a13 + 0x00000000:word32]
	branch a2 == 0x00000000 l40207FA4
	// succ:  l40207F86 l40207FA4
l40207F86:
	a5 = a2 - 22
	a3 = 1
	branch a5 != 0x00000000 l40207F8E
	// succ:  l40207F8B_1 l40207F8E
l40207F8B_1:
	a15 = a3
	// succ:  l40207F8E
l40207F8E:
	a15 = a15 & 0x000000FF
	branch a15 != 0x00000000 l40207F9C
	// succ:  l40207F93 l40207F9C
l40207F93:
	a2 = a2 - 29
	branch a2 != 0x00000000 l40207F99
	// succ:  l40207F96_2 l40207F99
l40207F96_2:
	a15 = a3
	// succ:  l40207F99
l40207F99:
	branch a15 == 0x00000000 l40208050
	// succ:  l40207F9C l40208050
l40207F9C:
	Mem0[a13:word32] = a14
	// succ:  l40207F9E
l40207F9E:
	a2 = 0
	goto l4020806B
	// succ:  l4020806B
l40207FA4:
	v15 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v15
	branch (a2 & 0x00000004) == 0x00000000 l40207FB9
	// succ:  l40207FAA l40207FB9
l40207FAA:
	a2 = Mem0[a12 + 0x00000004:word32]
	a4 = a4 - a2
	a2 = Mem0[a12 + 0x00000034:word32]
	branch a2 == 0x00000000 l40207FB9
	// succ:  l40207FB3 l40207FB9
l40207FB3:
	a2 = Mem0[a12 + 0x00000040:word32]
	a4 = a4 - a2
	// succ:  l40207FB9
l40207FB9:
	a6 = Mem0[a12 + 0x0000002C:word32]
	a3 = Mem0[a12 + 0x00000020:word32]
	a2 = a13
	a5 = 0
	a0 = 0x40207FC4
	call a6 (retsize: 0;)
	v16 = Mem0[a12 + 0x0000000C:uint16]
	a4 = (uint32) v16
	branch a2 != -1 l40207FD8
	// succ:  l40207FCA l40207FD8
l40207FCA:
	a3 = Mem0[a13 + 0x00000000:word32]
	branch a3 == 0x00000000 l40207FD8
	// succ:  l40207FCE l40207FD8
l40207FCE:
	a5 = 29
	branch a3 == a5 l40207FD8
	// succ:  l40207FD3 l40207FD8
l40207FD3:
	a5 = 22
	branch a3 != a5 l40208018
	// succ:  l40207FD8 l40208018
l40207FD8:
	a3 = 0x402045EC
	a4 = a3 & a4
	a3 = 0
	a4 = a4 << 16
	Mem0[a12 + 0x00000004:word32] = a3
	a3 = Mem0[a12 + 0x00000010:word32]
	a4 = a4 >> 16
	Mem0[a12 + 0x0000000C:word16] = a4
	Mem0[a12:word32] = a3
	branch (a4 & 0x00001000) == 0x00000000 l40207FFC
	// succ:  l40207FF2 l40207FFC
l40207FF2:
	branch a2 != -1 l40207FF9
	// succ:  l40207FF5 l40207FF9
l40207FF5:
	a3 = Mem0[a13 + 0x00000000:word32]
	branch a3 != 0x00000000 l40207FFC
	// succ:  l40207FF9 l40207FFC
l40207FF9:
	Mem0[a12 + 0x00000054:word32] = a2
	// succ:  l40207FFC
l40207FFC:
	a3 = Mem0[a12 + 0x00000034:word32]
	Mem0[a13:word32] = a14
	branch a3 == 0x00000000 l40207F9E
	// succ:  l40208003 l40207F9E
l40208003:
	a2 = a12 + 68
	branch a3 == a2 l40208011
	// succ:  l40208009 l40208011
l40208009:
	a2 = a13
	a0 = 0x402044F4
	v17 = a0
	a0 = 0x40208011
	call v17 (retsize: 0;)
	// succ:  l40208011
l40208011:
	a2 = 0
	Mem0[a12 + 0x00000034:word32] = a2
	goto l4020806B
	// succ:  l4020806B
l40208018:
	a3 = 64
	a4 = a4 | a3
	Mem0[a12 + 0x0000000C:word16] = a4
	goto l4020806B
	// succ:  l4020806B
l40208024:
	a14 = Mem0[a12 + 0x00000010:word32]
	branch a14 == 0x00000000 l40207F9E
	// succ:  l40208029 l40207F9E
l40208029:
	a15 = Mem0[a12 + 0x00000000:word32]
	a3 = a2 & 0x00000003
	Mem0[a12:word32] = a14
	a2 = 0
	a15 = a15 - a14
	branch a3 != a2 l4020803A
	// succ:  l40208038 l4020803A
l40208038:
	a2 = Mem0[a12 + 0x00000014:word32]
	// succ:  l4020803A
l4020803A:
	Mem0[a12 + 0x00000008:word32] = a2
	goto l40208065
	// succ:  l40208065
l40208040:
	a6 = Mem0[a12 + 0x00000028:word32]
	a3 = Mem0[a12 + 0x00000020:word32]
	a2 = a13
	a4 = a14
	a5 = a15
	a0 = 0x4020804D
	call a6 (retsize: 0;)
	branch a2 >= 1 l40208060
	// succ:  l40208050 l40208060
l40208050:
	v14 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v14
	a2 = 64
	a2 = a3 | a2
	Mem0[a12 + 0x0000000C:word16] = a2
	a2 = -1
	goto l4020806B
	// succ:  l4020806B
l40208060:
	a14 = a14 + a2
	a15 = a15 - a2
	// succ:  l40208065
l40208065:
	branch a15 >= 1 l40208040
	// succ:  l40208068 l40208040
l40208068:
	goto l40247F9E
	// succ:  l40247F9E
l4020806B:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  __sflush_r_exit
l40247F9E:
__sflush_r_exit:


// _fflush_r
// Return size: 0
void _fflush_r()
_fflush_r_entry:
	// succ:  l4020807C
l4020807C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = a2
	a2 = Mem0[a3 + 0x00000010:word32]
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a3
	branch a2 != 0x00000000 l40208092
	// succ:  l4020808D l40208092
l4020808D:
	a13 = 0
	goto l402080F8
	// succ:  l402080F8
l40208092:
	branch a13 == 0x00000000 l402080A0
	// succ:  l40208094 l402080A0
l40208094:
	a2 = Mem0[a13 + 0x00000018:word32]
	branch a2 != 0x00000000 l402080A0
	// succ:  l40208098 l402080A0
l40208098:
	a2 = a13
	a0 = 0x40204470
	v8 = a0
	a0 = 0x402080A0
	call v8 (retsize: 0;)
	// succ:  l402080A0
l402080A0:
	a2 = 0x402044D0
	branch a12 != a2 l402080AB
	// succ:  l402080A6 l402080AB
l402080A6:
	a12 = Mem0[a13 + 0x00000004:word32]
	goto l402080C1
	// succ:  l402080C1
l402080AB:
	a2 = 0x402044D4
	branch a12 != a2 l402080B9
	// succ:  l402080B1 l402080B9
l402080B1:
	a12 = Mem0[a13 + 0x00000008:word32]
	goto l402080C1
	// succ:  l402080C1
l402080B9:
	a2 = 0x402044D8
	branch a12 != a2 l402080C1
	// succ:  l402080BF l402080C1
l402080BF:
	a12 = Mem0[a13 + 0x0000000C:word32]
	// succ:  l402080C1
l402080C1:
	v9 = Mem0[a12 + 0x0000000C:int16]
	a2 = (int32) v9
	branch a2 == 0x00000000 l4020808D
	// succ:  l402080C7 l4020808D
l402080C7:
	a3 = Mem0[a12 + 0x00000064:word32]
	branch (a3 & 0x00000001) != 0x00000000 l402080D9
	// succ:  l402080CD l402080D9
l402080CD:
	branch (a2 & 0x00000200) != 0x00000000 l402080D9
	// succ:  l402080D0 l402080D9
l402080D0:
	a2 = a12 + 88
	a0 = 0x402044DC
	v10 = a0
	a0 = 0x402080D9
	call v10 (retsize: 0;)
	// succ:  l402080D9
l402080D9:
	a2 = a13
	a3 = a12 | a12
	a0 = 0x402080E1
	call fn40307F1C (retsize: 0;)
	a3 = Mem0[a12 + 0x00000064:word32]
	a13 = a2
	branch (a3 & 0x00000001) != 0x00000000 l402080F8
	// succ:  l402080E9 l402080F8
l402080E9:
	v11 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v11
	branch (a2 & 0x00000200) != 0x00000000 l402080F8
	// succ:  l402080EF l402080F8
l402080EF:
	a2 = a12 + 88
	a0 = 0x402044E0
	v12 = a0
	a0 = 0x402080F8
	call v12 (retsize: 0;)
	// succ:  l402080F8
l402080F8:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  _fflush_r_exit
_fflush_r_exit:


// fflush
// Return size: 0
void fflush()
fflush_entry:
	// succ:  l40208108
l40208108:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a3 = a2
	branch a2 != 0x00000000 l40208120
	// succ:  l40208111 l40208120
l40208111:
	a2 = 0x402045F0
	a3 = 0x402045F4
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x4020811C
	call _fwalk_reent (retsize: 0;)
	goto l40208128
	// succ:  l40208128
l40208120:
	a2 = 0x40203754
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x40208128
	call fn4030807C (retsize: 0;)
	// succ:  l40208128
l40208128:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  fflush_exit
fflush_exit:


// __sfvwrite_r
// Return size: 0
void __sfvwrite_r()
__sfvwrite_r_entry:
	// succ:  l40208130
l40208130:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000034:word32] = a13
	a13 = a2
	a2 = Mem0[a4 + 0x00000008:word32]
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x0000002C:word32] = a15
	a12 = a3
	a14 = a4
	branch a2 != 0x00000000 l4020814C
	// succ:  l40208147 l4020814C
l40208147:
	a2 = 0
	goto l4020844D
	// succ:  l4020844D
l4020814C:
	v11 = Mem0[a3 + 0x0000000C:uint16]
	a2 = (uint32) v11
	branch (a2 & 0x00000008) == 0x00000000 l4020816A
	// succ:  l40208152 l4020816A
l40208152:
	a2 = Mem0[a3 + 0x00000010:word32]
	branch a2 == 0x00000000 l4020816A
	// succ:  l40208156 l4020816A
l40208156:
	a6 = Mem0[a14 + 0x00000000:word32]
	v13 = Mem0[a12 + 0x0000000C:uint16]
	a15 = (uint32) v13
	a7 = 2
	Mem0[a1 + 0x00000004:word32] = a6
	a7 = a15 & a7
	branch a7 != 0x00000000 l4020817A
	// succ:  l40208164 l4020817A
l40208164:
	goto l402081C0
	// succ:  l402081C0
l4020816A:
	a2 = a13
	a3 = a12
	a0 = 0x40208171
	call fn403070C4 (retsize: 0;)
	branch a2 == 0x00000000 l40208156
	// succ:  l40208174 l40208156
l40208174:
	goto l4020844B
	// succ:  l4020844B
l4020817A:
	a8 = 0
	a15 = a8
	goto l4020818C
	// succ:  l4020818C
l40208182:
	a6 = Mem0[a1 + 0x00000004:word32]
	a8 = Mem0[a6 + 0x00000000:word32]
	a15 = Mem0[a6 + 0x00000004:word32]
	a6 = a6 + 8
	Mem0[a1 + 0x00000004:word32] = a6
	// succ:  l4020818C
l4020818C:
	branch a15 == 0x00000000 l40208182
	// succ:  l4020818F l40208182
l4020818F:
	a2 = 0x402045F8
	a5 = a15
	branch a2 >=u a15 l40208199
	// succ:  l40208197 l40208199
l40208197:
	a5 = a2
	// succ:  l40208199
l40208199:
	a9 = Mem0[a12 + 0x00000028:word32]
	a3 = Mem0[a12 + 0x00000020:word32]
	a4 = a8
	Mem0[a1 + 0x0000000C:word32] = a8
	a2 = a13
	a0 = 0x402081A6
	call a9 (retsize: 0;)
	a8 = Mem0[a1 + 0x0000000C:word32]
	branch a2 >= 1 l402081AE
	// succ:  l402081AB l402081AE
l402081AB:
	goto l40208440
	// succ:  l40208440
l402081AE:
	a3 = Mem0[a14 + 0x00000008:word32]
	a8 = a8 + a2
	a15 = a15 - a2
	a2 = a3 - a2
	Mem0[a14 + 0x00000008:word32] = a2
	branch a2 != 0x00000000 l4020818C
	// succ:  l402081BD l4020818C
l402081BD:
	goto l40248147
	// succ:  l40248147
l402081C0:
	a15 = a15 & 0x00000001
	branch a15 == 0x00000000 l402081CE
	// succ:  l402081C5 l402081CE
l402081C5:
	a10 = a7
	a15 = a7
	Mem0[a1:word32] = a7
	goto l40208362
	// succ:  l40208362
l402081CE:
	Mem0[a1:word32] = a15
	goto l402081E4
	// succ:  l402081E4
l402081D6:
	a6 = Mem0[a1 + 0x00000004:word32]
	a6 = Mem0[a6 + 0x00000000:word32]
	Mem0[a1:word32] = a6
	a6 = Mem0[a1 + 0x00000004:word32]
	a15 = Mem0[a6 + 0x00000004:word32]
	a6 = a6 + 8
	Mem0[a1 + 0x00000004:word32] = a6
	// succ:  l402081E4
l402081E4:
	branch a15 == 0x00000000 l402081D6
	// succ:  l402081E7 l402081D6
l402081E7:
	v18 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v18
	a3 = 0x00000200
	a8 = Mem0[a12 + 0x00000008:word32]
	branch (a2 & a3) != 0x00000000 l402081F5
	// succ:  l402081F2 l402081F5
l402081F2:
	goto l402082CC
	// succ:  l402082CC
l402081F5:
	branch a15 >=u a8 l402081FB
	// succ:  l402081F8 l402081FB
l402081F8:
	goto l402082A8
	// succ:  l402082A8
l402081FB:
	a3 = 0x00000480
	branch (a2 & a3) != 0x00000000 l40208204
	// succ:  l40208201 l40208204
l40208201:
	goto l402082A5
	// succ:  l402082A5
l40208204:
	a3 = Mem0[a12 + 0x00000010:word32]
	a4 = Mem0[a12 + 0x00000000:word32]
	a5 = Mem0[a12 + 0x00000014:word32]
	a4 = a4 - a3
	Mem0[a1 + 0x00000008:word32] = a4
	a5 = a5 + a5 * 0x00000002
	a6 = Mem0[a1 + 0x00000008:word32]
	a4 = a5 >>u 0x0000001F & 0x00000001
	a5 = a4 + a5
	a4 = a6 + 1
	a5 = a5 >> 1
	a4 = a4 + a15
	branch a5 >=u a4 l40208225
	// succ:  l40208223 l40208225
l40208223:
	a5 = a4
	// succ:  l40208225
l40208225:
	branch (a2 & 0x00000400) == 0x00000000 l40208265
	// succ:  l40208228 l40208265
l40208228:
	a3 = a5
	a2 = a13
	Mem0[a1 + 0x00000010:word32] = a5
	a0 = 0x402045FC
	v25 = a0
	a0 = 0x40208234
	call v25 (retsize: 0;)
	a8 = a2
	a5 = Mem0[a1 + 0x00000010:word32]
	branch a2 != 0x00000000 l4020823E
	// succ:  l4020823A l4020823E
l4020823A:
	goto l4020828D
	// succ:  l4020828D
l4020823E:
	a3 = Mem0[a12 + 0x00000010:word32]
	a4 = Mem0[a1 + 0x00000008:word32]
	Mem0[a1 + 0x00000010:word32] = a5
	Mem0[a1 + 0x0000000C:word32] = a8
	a0 = 0x40203130
	v26 = a0
	a0 = 0x4020824C
	call v26 (retsize: 0;)
	v27 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v27
	a2 = 0xFFFFFB7F
	a2 = a3 & a2
	a3 = 0x00000080
	a2 = a2 | a3
	Mem0[a12 + 0x0000000C:word16] = a2
	a5 = Mem0[a1 + 0x00000010:word32]
	a8 = Mem0[a1 + 0x0000000C:word32]
	goto l40208294
	// succ:  l40208294
l40208265:
	a4 = a5 | a5
	a2 = a13 | a13
	Mem0[a1 + 0x00000010:word32] = a5
	a0 = 0x40208271
	call _realloc_r (retsize: 0;)
	a8 = a2
	a5 = Mem0[a1 + 0x00000010:word32]
	branch a2 != 0x00000000 l40208294
	// succ:  l40208277 l40208294
l40208277:
	a3 = Mem0[a12 + 0x00000010:word32]
	a2 = a13
	a0 = 0x402044F4
	v29 = a0
	a0 = 0x40208281
	call v29 (retsize: 0;)
	v30 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v30
	a2 = 0xFFFFFF7F
	a2 = a3 & a2
	Mem0[a12 + 0x0000000C:word16] = a2
	// succ:  l4020828D
l4020828D:
	a2 = 12
	Mem0[a13:word32] = a2
	goto l40208440
	// succ:  l40208440
l40208294:
	a6 = Mem0[a1 + 0x00000008:word32]
	Mem0[a12 + 0x00000010:word32] = a8
	Mem0[a12 + 0x00000014:word32] = a5
	a8 = a8 + a6
	a5 = a5 - a6
	Mem0[a12:word32] = a8
	Mem0[a12 + 0x00000008:word32] = a5
	a8 = a15
	// succ:  l402082A5
l402082A5:
	branch a15 >=u a8 l402082AA
	// succ:  l402082A8 l402082AA
l402082A8:
	a8 = a15
	a8 = a15
	// succ:  l402082AA
l402082AA:
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = Mem0[a1 + 0x00000000:word32]
	a4 = a8
	Mem0[a1 + 0x0000000C:word32] = a8
	a0 = 0x40204600
	v23 = a0
	a0 = 0x402082B8
	call v23 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000008:word32]
	a8 = Mem0[a1 + 0x0000000C:word32]
	a5 = a15
	a2 = a2 - a8
	Mem0[a12 + 0x00000008:word32] = a2
	a2 = Mem0[a12 + 0x00000000:word32]
	a8 = a2 + a8
	Mem0[a12:word32] = a8
	goto l4020833C
	// succ:  l4020833C
l402082CC:
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = Mem0[a12 + 0x00000010:word32]
	branch a3 <u a2 l402082D9
	// succ:  l402082D3 l402082D9
l402082D3:
	a5 = Mem0[a12 + 0x00000014:word32]
	branch a15 >=u a5 l40208310
	// succ:  l402082D9 l40208310
l402082D9:
	a5 = a15
	branch a8 >=u a15 l402082E1
	// succ:  l402082DE l402082E1
l402082DE:
	a5 = a8 | a8
	// succ:  l402082E1
l402082E1:
	a3 = Mem0[a1 + 0x00000000:word32]
	a4 = a5 | a5
	Mem0[a1 + 0x00000010:word32] = a5
	a0 = 0x40204600
	v21 = a0
	a0 = 0x402082F0
	call v21 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000008:word32]
	a5 = Mem0[a1 + 0x00000010:word32]
	a3 = Mem0[a12 + 0x00000000:word32]
	a2 = a2 - a5
	a3 = a3 + a5
	Mem0[a12 + 0x00000008:word32] = a2
	Mem0[a12:word32] = a3
	branch a2 != 0x00000000 l4020833C
	// succ:  l40208301 l4020833C
l40208301:
	a2 = a13
	a3 = a12
	a0 = 0x40208308
	call fn4030807C (retsize: 0;)
	a5 = Mem0[a1 + 0x00000010:word32]
	branch a2 == 0x00000000 l4020833C
	// succ:  l4020830C l4020833C
l4020830C:
	goto l40208440
	// succ:  l40208440
l40208310:
	a3 = 0x402044FC
	a2 = a15
	branch a3 >=u a15 l4020831A
	// succ:  l40208318 l4020831A
l40208318:
	a2 = a3
	// succ:  l4020831A
l4020831A:
	a3 = a5
	Mem0[a1 + 0x00000010:word32] = a5
	a0 = 0x40202548
	v22 = a0
	a0 = 0x40208324
	call v22 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000010:word32]
	a8 = Mem0[a12 + 0x00000028:word32]
	a5 = a2 * a5
	a3 = Mem0[a12 + 0x00000020:word32]
	a4 = Mem0[a1 + 0x00000000:word32]
	a2 = a13
	a0 = 0x40208334
	call a8 (retsize: 0;)
	a5 = a2
	branch a2 >= 1 l4020833C
	// succ:  l40208339 l4020833C
l40208339:
	goto l40208440
	// succ:  l40208440
l4020833C:
	a6 = Mem0[a1 + 0x00000000:word32]
	a2 = Mem0[a14 + 0x00000008:word32]
	a6 = a6 + a5
	a15 = a15 - a5
	a5 = a2 - a5
	Mem0[a1:word32] = a6
	Mem0[a14 + 0x00000008:word32] = a5
	branch a5 != 0x00000000 l402081E4
	// succ:  l4020834F l402081E4
l4020834F:
	goto l40248147
	// succ:  l40248147
l40208352:
	a6 = Mem0[a1 + 0x00000004:word32]
	a10 = 0
	a15 = Mem0[a6 + 0x00000000:word32]
	a6 = Mem0[a6 + 0x00000004:word32]
	Mem0[a1:word32] = a6
	a6 = Mem0[a1 + 0x00000004:word32]
	a6 = a6 + 8
	Mem0[a1 + 0x00000004:word32] = a6
	// succ:  l40208362
l40208362:
	a6 = Mem0[a1 + 0x00000000:word32]
	branch a6 == 0x00000000 l40208352
	// succ:  l40208368 l40208352
l40208368:
	branch a10 != 0x00000000 l40208386
	// succ:  l4020836B l40208386
l4020836B:
	a2 = a15 | a15
	a3 = 10
	a4 = a6
	a0 = 0x40208375
	call memchr (retsize: 0;)
	branch a2 == 0x00000000 l40208380
	// succ:  l40208377 l40208380
l40208377:
	a7 = a2 + 1
	a7 = a7 - a15
	goto l40208384
	// succ:  l40208384
l40208380:
	a6 = Mem0[a1 + 0x00000000:word32]
	a7 = a6 + 1
	// succ:  l40208384
l40208384:
	a10 = 1
	// succ:  l40208386
l40208386:
	a6 = Mem0[a1 + 0x00000000:word32]
	a9 = a7
	branch a6 >=u a7 l4020838F
	// succ:  l4020838D l4020838F
l4020838D:
	a9 = a6
	// succ:  l4020838F
l4020838F:
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = Mem0[a12 + 0x00000010:word32]
	a8 = Mem0[a12 + 0x00000008:word32]
	a5 = Mem0[a12 + 0x00000014:word32]
	branch a3 >=u a2 l402083CC
	// succ:  l4020839A l402083CC
l4020839A:
	a8 = a8 + a5
	branch a8 >= a9 l402083CC
	// succ:  l4020839F l402083CC
l4020839F:
	a4 = a8
	a3 = a15
	Mem0[a1 + 0x00000014:word32] = a7
	Mem0[a1 + 0x00000010:word32] = a10
	Mem0[a1 + 0x0000000C:word32] = a8
	a0 = 0x40204600
	v24 = a0
	a0 = 0x402083AF
	call v24 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000000:word32]
	a8 = Mem0[a1 + 0x0000000C:word32]
	a3 = a12
	a2 = a2 + a8
	Mem0[a12:word32] = a2
	a2 = a13
	a0 = 0x402083BE
	call fn4030807C (retsize: 0;)
	a7 = Mem0[a1 + 0x00000014:word32]
	a8 = Mem0[a1 + 0x0000000C:word32]
	a10 = Mem0[a1 + 0x00000010:word32]
	branch a2 == 0x00000000 l4020840F
	// succ:  l402083C7 l4020840F
l402083C7:
	goto l40208440
	// succ:  l40208440
l402083CC:
	branch a9 < a5 l402083EA
	// succ:  l402083CF l402083EA
l402083CF:
	a8 = Mem0[a12 + 0x00000028:word32]
	a3 = Mem0[a12 + 0x00000020:word32]
	Mem0[a1 + 0x00000014:word32] = a7
	Mem0[a1 + 0x00000010:word32] = a10
	a2 = a13
	a4 = a15
	a0 = 0x402083DE
	call a8 (retsize: 0;)
	a8 = a2
	a7 = Mem0[a1 + 0x00000014:word32]
	a10 = Mem0[a1 + 0x00000010:word32]
	branch a2 >= 1 l4020840F
	// succ:  l402083E7 l4020840F
l402083E7:
	goto l40208440
	// succ:  l40208440
l402083EA:
	a4 = a9
	a3 = a15
	Mem0[a1 + 0x00000014:word32] = a7
	Mem0[a1 + 0x0000000C:word32] = a9
	Mem0[a1 + 0x00000010:word32] = a10
	a0 = 0x40204600
	v28 = a0
	a0 = 0x402083FA
	call v28 (retsize: 0;)
	a9 = Mem0[a1 + 0x0000000C:word32]
	a2 = Mem0[a12 + 0x00000008:word32]
	a10 = Mem0[a1 + 0x00000010:word32]
	a2 = a2 - a9
	Mem0[a12 + 0x00000008:word32] = a2
	a2 = Mem0[a12 + 0x00000000:word32]
	a7 = Mem0[a1 + 0x00000014:word32]
	a2 = a2 + a9
	Mem0[a12:word32] = a2
	a8 = a9
	// succ:  l4020840F
l4020840F:
	a7 = a7 - a8
	branch a7 != 0x00000000 l40208428
	// succ:  l40208414 l40208428
l40208414:
	a2 = a13
	a3 = a12
	Mem0[a1 + 0x00000014:word32] = a7
	Mem0[a1 + 0x0000000C:word32] = a8
	a0 = 0x40208420
	call fn4030807C (retsize: 0;)
	a7 = Mem0[a1 + 0x00000014:word32]
	a8 = Mem0[a1 + 0x0000000C:word32]
	branch a2 != 0x00000000 l40208440
	// succ:  l40208426 l40208440
l40208426:
	a10 = a7
	// succ:  l40208428
l40208428:
	a6 = Mem0[a1 + 0x00000000:word32]
	a2 = Mem0[a14 + 0x00000008:word32]
	a6 = a6 - a8
	a15 = a15 + a8
	a8 = a2 - a8
	Mem0[a1:word32] = a6
	Mem0[a14 + 0x00000008:word32] = a8
	branch a8 != 0x00000000 l40208362
	// succ:  l4020843B l40208362
l4020843B:
	goto l40248147
	// succ:  l40248147
l40208440:
	v20 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v20
	a2 = 64
	a2 = a3 | a2
	Mem0[a12 + 0x0000000C:word16] = a2
	// succ:  l4020844B
l4020844B:
	a2 = -1
	// succ:  l4020844D
l4020844D:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  __sfvwrite_r_exit
l40248147:
__sfvwrite_r_exit:


// rshift
// Return size: 0
void rshift()
rshift_entry:
	// succ:  l4020845C
l4020845C:
	a1 = fp
	a8 = Mem0[a2 + 0x00000010:word32]
	a4 = a2 + 20
	a6 = a3 >> 5
	a5 = a4
	branch a6 >= a8 l402084C1
	// succ:  l40208469 l402084C1
l40208469:
	a3 = a3 & 0x0000001F
	a8 = a4 + a8 * 0x00000004
	a6 = a4 + a6 * 0x00000004
	branch a3 != 0x00000000 l40208479
	// succ:  l40208474 l40208479
l40208474:
	a3 = a4
	goto l402084BC
	// succ:  l402084BC
l40208479:
	a7 = Mem0[a6 + 0x00000000:word32]
	a9 = 32
	a9 = a9 - a3
	SAR = a3
	a7 = a7 >> SAR
	a6 = a6 + 4
	a5 = a4
	goto l402084A6
	// succ:  l402084A6
l4020848D:
	a10 = Mem0[a6 + 0x00000000:word32]
	SAR = 0x00000020 - a9
	a10 = a10 << SAR
	a7 = a10 | a7
	Mem0[a5:word32] = a7
	a7 = Mem0[a6 + 0x00000000:word32]
	a5 = a5 + 4
	SAR = a3
	a7 = a7 >> SAR
	a6 = a6 + 4
	// succ:  l402084A6
l402084A6:
	branch a6 <u a8 l4020848D
	// succ:  l402084A9 l4020848D
l402084A9:
	a3 = a5 + 4
	Mem0[a5:word32] = a7
	branch a7 == 0x00000000 l402084B0
	// succ:  l402084AD_1 l402084B0
l402084AD_1:
	a5 = a3
	// succ:  l402084B0
l402084B0:
	goto l402084C1
	// succ:  l402084C1
l402084B4:
	a5 = Mem0[a6 + 0x00000000:word32]
	a6 = a6 + 4
	Mem0[a3:word32] = a5
	a3 = a3 + 4
	// succ:  l402084BC
l402084BC:
	a5 = a3
	branch a6 <u a8 l402084B4
	// succ:  l402084C1 l402084B4
l402084C1:
	a4 = a5 - a4
	a4 = a4 >> 2
	Mem0[a2 + 0x00000010:word32] = a4
	branch a4 != 0x00000000 l402084CD
	a4 = a5 - a4
	a4 = a4 >> 2
	Mem0[a2 + 0x00000010:word32] = a4
	branch a4 != 0x00000000 l402084CD
	// succ:  l402084CB l402084CD
l402084CB:
	Mem0[a2 + 0x00000014:word32] = a4
	Mem0[a2 + 0x00000014:word32] = a4
	// succ:  l402084CD
l402084CD:
	return
	// succ:  rshift_exit
rshift_exit:


// __hexdig_fun
// Return size: 0
void __hexdig_fun()
__hexdig_fun_entry:
	// succ:  l402084D0
l402084D0:
	a1 = fp
	a3 = a2 & 0x000000FF
	a2 = a3 - 48
	a2 = a2 & 0x000000FF
	a4 = 9
	branch a4 <u a2 l402084E4
	// succ:  l402084DE l402084E4
l402084DE:
	a3 = a3 - 32
	goto l40208502
	// succ:  l40208502
l402084E4:
	a2 = a3 - 97
	a2 = a2 & 0x000000FF
	branch a2 >=u 0x00000006 l402084F4
	// succ:  l402084ED l402084F4
l402084ED:
	a3 = a3 - 71
	goto l40208502
	// succ:  l40208502
l402084F4:
	a4 = a3 - 65
	a4 = a4 & 0x000000FF
	a2 = 0
	branch a4 >=u 0x00000006 l40208505
	// succ:  l402084FF l40208505
l402084FF:
	a3 = a3 - 39
	// succ:  l40208502
l40208502:
	a2 = a3 & 0x000000FF
	// succ:  l40208505
l40208505:
	return
	// succ:  __hexdig_fun_exit
__hexdig_fun_exit:


// __gethex
// Return size: 0
void __gethex()
__gethex_entry:
	// succ:  l40208508
l40208508:
	a1 = fp
	a1 = a1 - 96
	Mem0[a1 + 0x00000020:word32] = a3
	Mem0[a1 + 0x00000004:word32] = a4
	Mem0[a1 + 0x00000024:word32] = a5
	Mem0[a1 + 0x0000005C:word32] = a0
	Mem0[a1 + 0x0000001C:word32] = a6
	Mem0[a1 + 0x00000018:word32] = a7
	Mem0[a1 + 0x00000058:word32] = a12
	Mem0[a1 + 0x00000054:word32] = a13
	Mem0[a1 + 0x00000050:word32] = a14
	Mem0[a1 + 0x0000004C:word32] = a15
	Mem0[a1 + 0x0000000C:word32] = a2
	a0 = 0x4020852B
	call _localeconv_r (retsize: 0;)
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000014:word32] = a2
	a0 = 0x40208532
	call fn4030600C (retsize: 0;)
	a5 = Mem0[a1 + 0x00000014:word32]
	Mem0[a1 + 0x00000008:word32] = a2
	a2 = a5 + a2
	a2 = a2 - 1
	v14 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v14
	a5 = 0
	Mem0[a1 + 0x00000028:word32] = a2
	a2 = Mem0[a1 + 0x00000020:word32]
	Mem0[a1 + 0x00000010:word32] = a5
	a3 = Mem0[a2 + 0x00000000:word32]
	a4 = 48
	a3 = a3 + 2
	goto l40208554
	// succ:  l40208554
l4020854E:
	a5 = Mem0[a1 + 0x00000010:word32]
	a5 = a5 + 1
	Mem0[a1 + 0x00000010:word32] = a5
	// succ:  l40208554
l40208554:
	Mem0[a1:word32] = a3
	a5 = Mem0[a1 + 0x00000000:word32]
	a3 = a3 + 1
	v15 = Mem0[a5 + 0x00000000:byte]
	a2 = (uint32) v15
	branch a2 == a4 l4020854E
	// succ:  l40208560 l4020854E
l40208560:
	a14 = 0
	a0 = 0x40208565
	call fn403084D0 (retsize: 0;)
	a15 = a14
	branch a2 != a14 l402085AC
	// succ:  l4020856A l402085AC
l4020856A:
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = Mem0[a1 + 0x00000014:word32]
	a4 = Mem0[a1 + 0x00000008:word32]
	a0 = 0x40208575
	call strncmp (retsize: 0;)
	branch a2 != a14 l402085EE
	// succ:  l40208578 l402085EE
l40208578:
	a2 = Mem0[a1 + 0x00000008:word32]
	a5 = Mem0[a1 + 0x00000000:word32]
	a13 = a5 + a2
	v16 = Mem0[a13 + 0x00000000:byte]
	a2 = (uint32) v16
	a0 = 0x40208584
	call fn403084D0 (retsize: 0;)
	branch a2 == a14 l402085F0
	// succ:  l40208587 l402085F0
l40208587:
	Mem0[a1:word32] = a13
	a3 = 48
	goto l40208594
	// succ:  l40208594
l4020858E:
	a5 = Mem0[a1 + 0x00000000:word32]
	a5 = a5 + 1
	Mem0[a1:word32] = a5
	// succ:  l40208594
l40208594:
	a5 = Mem0[a1 + 0x00000000:word32]
	v17 = Mem0[a5 + 0x00000000:byte]
	a2 = (uint32) v17
	branch a2 == a3 l4020858E
	// succ:  l4020859D l4020858E
l4020859D:
	a0 = 0x402085A0
	call fn403084D0 (retsize: 0;)
	a3 = 1
	a14 = 0
	branch a2 != 0x00000000 l402085A7
	// succ:  l402085A4_1 l402085A7
l402085A4_1:
	a14 = a3
	// succ:  l402085A7
l402085A7:
	a15 = a13
	Mem0[a1 + 0x00000010:word32] = a3
	// succ:  l402085AC
l402085AC:
	a13 = Mem0[a1 + 0x00000000:word32]
	goto l402085B4
	// succ:  l402085B4
l402085B1:
	a13 = a13 + 1
	// succ:  l402085B4
l402085B4:
	v29 = Mem0[a13 + 0x00000000:byte]
	a2 = (uint32) v29
	a0 = 0x402085BA
	call fn403084D0 (retsize: 0;)
	branch a2 != 0x00000000 l402085B1
	// succ:  l402085BD l402085B1
l402085BD:
	a3 = Mem0[a1 + 0x00000014:word32]
	a4 = Mem0[a1 + 0x00000008:word32]
	a2 = a13
	a0 = 0x402085C8
	call strncmp (retsize: 0;)
	branch a2 != 0x00000000 l402085E0
	// succ:  l402085CA l402085E0
l402085CA:
	branch a15 != 0x00000000 l402085E5
	// succ:  l402085CC l402085E5
l402085CC:
	a5 = Mem0[a1 + 0x00000008:word32]
	a13 = a13 + a5
	a15 = a13
	goto l402085D7
	// succ:  l402085D7
l402085D5:
	a13 = a13 + 1
	// succ:  l402085D7
l402085D7:
	v30 = Mem0[a13 + 0x00000000:byte]
	a2 = (uint32) v30
	a0 = 0x402085DD
	call fn403084D0 (retsize: 0;)
	branch a2 != 0x00000000 l402085D5
	// succ:  l402085E0 l402085D5
l402085E0:
	a12 = 0
	branch a15 == a12 l402085F4
	a12 = 0
	branch a15 == a12 l402085F4
	// succ:  l402085E5 l402085F4
l402085E5:
	a12 = a15 - a13
	a12 = a12 << 30
	a12 = a15 - a13
	a12 = a12 << 30
	goto l402085F4
	// succ:  l402085F4
l402085EE:
	a13 = Mem0[a1 + 0x00000000:word32]
	// succ:  l402085F0
l402085F0:
	a12 = a14
	a14 = 1
	// succ:  l402085F4
l402085F4:
	v18 = Mem0[a13 + 0x00000000:byte]
	a2 = (uint32) v18
	a3 = 80
	branch a2 == a3 l40208602
	// succ:  l402085FC l40208602
l402085FC:
	a3 = 0x00000070
	branch a2 != a3 l40208674
	// succ:  l40208602 l40208674
l40208602:
	v19 = Mem0[a13 + 0x00000001:byte]
	a2 = (uint32) v19
	a3 = 43
	branch a2 == a3 l40208612
	// succ:  l4020860A l40208612
l4020860A:
	a3 = 45
	branch a2 == a3 l4020861E
	// succ:  l4020860F l4020861E
l4020860F:
	goto l40208617
	// succ:  l40208617
l40208612:
	a5 = 0
	goto l40208620
	// succ:  l40208620
l40208617:
	a3 = a13 + 1
	a5 = 0
	goto l40208622
	// succ:  l40208622
l4020861E:
	a5 = 1
	// succ:  l40208620
l40208620:
	a3 = a13 + 2
	// succ:  l40208622
l40208622:
	v20 = Mem0[a3 + 0x00000000:byte]
	a2 = (uint32) v20
	Mem0[a1 + 0x0000002C:word32] = a3
	Mem0[a1 + 0x00000030:word32] = a5
	a0 = 0x4020862C
	call fn403084D0 (retsize: 0;)
	a4 = a2 - 1
	a4 = a4 & 0x000000FF
	a7 = 24
	a3 = Mem0[a1 + 0x0000002C:word32]
	a5 = Mem0[a1 + 0x00000030:word32]
	branch a7 <u a4 l40208674
	// succ:  l4020863A l40208674
l4020863A:
	a4 = a2 - 16
	goto l40208649
	// succ:  l40208649
l40208640:
	a4 = a4 + a4 * 0x00000004
	a4 = a2 + a4 * 0x00000002
	a4 = a4 - 16
	// succ:  l40208649
l40208649:
	v21 = Mem0[a3 + 0x00000001:byte]
	a2 = (uint32) v21
	a3 = a3 + 1
	Mem0[a1 + 0x0000002C:word32] = a3
	Mem0[a1 + 0x00000034:word32] = a4
	Mem0[a1 + 0x00000030:word32] = a5
	Mem0[a1 + 0x00000038:word32] = a7
	a0 = 0x40208659
	call fn403084D0 (retsize: 0;)
	a8 = a2 - 1
	a7 = Mem0[a1 + 0x00000038:word32]
	a8 = a8 & 0x000000FF
	a3 = Mem0[a1 + 0x0000002C:word32]
	a4 = Mem0[a1 + 0x00000034:word32]
	a5 = Mem0[a1 + 0x00000030:word32]
	branch a7 >=u a8 l40208640
	// succ:  l40208669 l40208640
l40208669:
	a2 = -a4
	branch a5 == 0x00000000 l4020866F
	// succ:  l4020866C_1 l4020866F
l4020866C_1:
	a4 = a2
	// succ:  l4020866F
l4020866F:
	a12 = a12 + a4
	goto l40208676
	// succ:  l40208676
l40208674:
	a3 = a13
	// succ:  l40208676
l40208676:
	a2 = Mem0[a1 + 0x00000020:word32]
	Mem0[a2:word32] = a3
	branch a14 == 0x00000000 l40208688
	// succ:  l4020867C l40208688
l4020867C:
	a5 = Mem0[a1 + 0x00000010:word32]
	a2 = 0
	a3 = 6
	branch a5 != 0x00000000 l40208685
	// succ:  l40208682_1 l40208685
l40208682_1:
	a2 = a3
	// succ:  l40208685
l40208685:
	goto l402089A0
	// succ:  l402089A0
l40208688:
	a5 = Mem0[a1 + 0x00000000:word32]
	a3 = a14
	a2 = a13 - a5
	a2 = a2 - 1
	goto l4020869A
	// succ:  l4020869A
l40208694:
	a3 = a3 + 1
	a2 = a2 >> 1
	// succ:  l4020869A
l4020869A:
	branch a2 >= 8 l40208694
	// succ:  l4020869D l40208694
l4020869D:
	a2 = Mem0[a1 + 0x0000000C:word32]
	a0 = 0x402086A3
	call _Balloc (retsize: 0;)
	a5 = Mem0[a1 + 0x00000008:word32]
	a14 = a2 + 20
	a15 = a2
	a2 = 1
	a7 = 0
	a2 = a2 - a5
	a8 = a14
	a9 = a7
	Mem0[a1 + 0x00000010:word32] = a2
	goto l40208724
	// succ:  l40208724
l402086BE:
	a10 = a13 - 1
	v26 = Mem0[a10 + 0x00000000:byte]
	a2 = (uint32) v26
	a5 = Mem0[a1 + 0x00000028:word32]
	branch a2 == a5 l402086CE
	// succ:  l402086C8 l402086CE
l402086C8:
	branch a9 != 32 l402086FD
	// succ:  l402086CB l402086FD
l402086CB:
	goto l402086F5
	// succ:  l402086F5
l402086CE:
	a5 = Mem0[a1 + 0x00000010:word32]
	a13 = a10 + a5
	a5 = Mem0[a1 + 0x00000000:word32]
	branch a13 <u a5 l402086C8
	// succ:  l402086D7 l402086C8
l402086D7:
	a3 = Mem0[a1 + 0x00000014:word32]
	a4 = Mem0[a1 + 0x00000008:word32]
	a2 = a13
	Mem0[a1 + 0x00000038:word32] = a7
	Mem0[a1 + 0x00000034:word32] = a8
	Mem0[a1 + 0x0000002C:word32] = a9
	Mem0[a1 + 0x00000030:word32] = a10
	a0 = 0x402086E8
	call strncmp (retsize: 0;)
	a7 = Mem0[a1 + 0x00000038:word32]
	a8 = Mem0[a1 + 0x00000034:word32]
	a9 = Mem0[a1 + 0x0000002C:word32]
	a10 = Mem0[a1 + 0x00000030:word32]
	branch a2 == 0x00000000 l40208724
	// succ:  l402086F2 l40208724
l402086F2:
	goto l402486C8
	// succ:  l402486C8
l402086F5:
	Mem0[a8:word32] = a7
	a7 = 0
	a8 = a8 + 4
	a9 = a7
	// succ:  l402086FD
l402086FD:
	v27 = Mem0[a10 + 0x00000000:byte]
	a2 = (uint32) v27
	Mem0[a1 + 0x00000038:word32] = a7
	Mem0[a1 + 0x00000034:word32] = a8
	Mem0[a1 + 0x0000002C:word32] = a9
	Mem0[a1 + 0x00000030:word32] = a10
	a0 = 0x4020870C
	call fn403084D0 (retsize: 0;)
	a9 = Mem0[a1 + 0x0000002C:word32]
	a2 = a2 & 0x0000000F
	a7 = Mem0[a1 + 0x00000038:word32]
	a10 = Mem0[a1 + 0x00000030:word32]
	SAR = 0x00000020 - a9
	a2 = a2 << SAR
	a8 = Mem0[a1 + 0x00000034:word32]
	a7 = a7 | a2
	a9 = a9 + 4
	a13 = a10
	// succ:  l40208724
l40208724:
	a5 = Mem0[a1 + 0x00000000:word32]
	branch a5 <u a13 l402086BE
	// succ:  l4020872A l402086BE
l4020872A:
	a4 = a8 + 4
	a4 = a4 - a14
	a4 = a4 >> 2
	Mem0[a8:word32] = a7
	Mem0[a15 + 0x00000010:word32] = a4
	a2 = a7
	a13 = a4 << 27
	a0 = 0x4020873F
	call __hi0bits (retsize: 0;)
	a3 = Mem0[a1 + 0x00000004:word32]
	a2 = a13 - a2
	a13 = Mem0[a3 + 0x00000000:word32]
	branch a13 >= a2 l402087A2
	// succ:  l40208749 l402087A2
l40208749:
	a4 = a2 - a13
	a3 = a4
	a2 = a15
	Mem0[a1 + 0x00000034:word32] = a4
	a0 = 0x40208755
	call __any_on (retsize: 0;)
	a6 = 0
	a4 = Mem0[a1 + 0x00000034:word32]
	branch a2 == a6 l4020878D
	// succ:  l4020875C l4020878D
l4020875C:
	a2 = a4 - 1
	a3 = a2 >> 5
	a3 = a14 + a3 * 0x00000004
	a6 = 1
	a3 = Mem0[a3 + 0x00000000:word32]
	SAR = 0x00000020 - a2
	a7 = a6 << SAR
	branch (a7 & a3) == 0x00000000 l4020878D
	// succ:  l40208771 l4020878D
l40208771:
	branch a2 >= 2 l40208779
	// succ:  l40208774 l40208779
l40208774:
	a6 = 2
	goto l4020878D
	// succ:  l4020878D
l40208779:
	a3 = a4 - 2
	a2 = a15 | a15
	Mem0[a1 + 0x00000034:word32] = a4
	a0 = 0x40208785
	call __any_on (retsize: 0;)
	a4 = Mem0[a1 + 0x00000034:word32]
	branch a2 == 0x00000000 l40208774
	// succ:  l4020878B l40208774
l4020878B:
	a6 = 3
	// succ:  l4020878D
l4020878D:
	a3 = a4
	a2 = a15
	Mem0[a1 + 0x00000034:word32] = a4
	Mem0[a1 + 0x0000002C:word32] = a6
	a0 = 0x40208798
	call fn4030845C (retsize: 0;)
	a4 = Mem0[a1 + 0x00000034:word32]
	a12 = a12 + a4
	goto l402087BF
	// succ:  l402087BF
l402087A2:
	a6 = 0x00000000
	branch a2 >= a13 l402087C1
	// succ:  l402087A8 l402087C1
l402087A8:
	a14 = a13 - a2
	a2 = Mem0[a1 + 0x0000000C:word32]
	a3 = a15
	a4 = a14
	Mem0[a1 + 0x0000002C:word32] = a6
	a0 = 0x402087B7
	call __lshift (retsize: 0;)
	a12 = a12 - a14
	a15 = a2
	a14 = a2 + 20
	// succ:  l402087BF
l402087BF:
	a6 = Mem0[a1 + 0x0000002C:word32]
	// succ:  l402087C1
l402087C1:
	a4 = Mem0[a1 + 0x00000004:word32]
	a2 = Mem0[a4 + 0x00000008:word32]
	branch a2 >= a12 l402087DC
	// succ:  l402087C8 l402087DC
l402087C8:
	a2 = Mem0[a1 + 0x0000000C:word32]
	a3 = a15 | a15
	a0 = 0x402087D0
	call _Bfree (retsize: 0;)
	a5 = Mem0[a1 + 0x0000001C:word32]
	a2 = 0
	Mem0[a5:word32] = a2
	a2 = 0x000000A3
	goto l402089A0
	// succ:  l402089A0
l402087DC:
	a3 = Mem0[a1 + 0x00000004:word32]
	a2 = Mem0[a3 + 0x00000004:word32]
	branch a12 < a2 l402087E6
	// succ:  l402087E3 l402087E6
l402087E3:
	goto l40208890
	// succ:  l40208890
l402087E6:
	a12 = a2 - a12
	branch a12 < a13 l40208849
	// succ:  l402087EC l40208849
l402087EC:
	a2 = Mem0[a3 + 0x0000000C:word32]
	branch a2 == 2 l40208826
	// succ:  l402087F1 l40208826
l402087F1:
	branch a2 == 3 l4020882E
	// succ:  l402087F4 l4020882E
l402087F4:
	branch a2 != 1 l40208834
	// succ:  l402087F7 l40208834
l402087F7:
	branch a12 != a13 l40208834
	// succ:  l402087FA l40208834
l402087FA:
	branch a13 >= 2 l40208816
	// succ:  l402087FD l40208816
l402087FD:
	a4 = Mem0[a1 + 0x00000004:word32]
	a5 = Mem0[a1 + 0x00000024:word32]
	a2 = Mem0[a4 + 0x00000004:word32]
	Mem0[a5:word32] = a2
	a2 = 1
	Mem0[a15 + 0x00000010:word32] = a2
	a5 = Mem0[a1 + 0x0000001C:word32]
	Mem0[a14:word32] = a2
	Mem0[a5:word32] = a15
	a2 = 0x00000062
	goto l402089A0
	// succ:  l402089A0
l40208816:
	a2 = a15
	a3 = a13 - 1
	a0 = 0x4020881D
	call __any_on (retsize: 0;)
	branch a2 != 0x00000000 l402087FD
	// succ:  l40208820 l402087FD
l40208820:
	goto l40208834
	// succ:  l40208834
l40208826:
	a5 = Mem0[a1 + 0x00000018:word32]
	branch a5 == 0x00000000 l402087FD
	// succ:  l4020882B l402087FD
l4020882B:
	goto l40208834
	// succ:  l40208834
l4020882E:
	a5 = Mem0[a1 + 0x00000018:word32]
	branch a5 != 0x00000000 l402087FD
	// succ:  l40208834 l402087FD
l40208834:
	a2 = Mem0[a1 + 0x0000000C:word32]
	a3 = a15 | a15
	a0 = 0x4020883D
	call _Bfree (retsize: 0;)
	a5 = Mem0[a1 + 0x0000001C:word32]
	a2 = 0
	Mem0[a5:word32] = a2
	a2 = 80
	a2 = Mem0[a1 + 0x0000000C:word32]
	a3 = a15 | a15
	a0 = 0x4020883D
	call _Bfree (retsize: 0;)
	a5 = Mem0[a1 + 0x0000001C:word32]
	a2 = 0
	Mem0[a5:word32] = a2
	a2 = 80
	goto l402089A0
	// succ:  l402089A0
l40208849:
	a4 = a12 - 1
	branch a6 != 0x00000000 l40208866
	// succ:  l4020884F l40208866
l4020884F:
	branch a4 < 1 l40208868
	// succ:  l40208852 l40208868
l40208852:
	a3 = a4 | a4
	a2 = a15
	Mem0[a1 + 0x00000034:word32] = a4
	a0 = 0x4020885C
	call __any_on (retsize: 0;)
	a6 = a2
	a4 = Mem0[a1 + 0x00000034:word32]
	goto l40208868
	// succ:  l40208868
l40208866:
	a6 = 1
	// succ:  l40208868
l40208868:
	a2 = a4 >> 5
	a2 = a14 + a2 * 0x00000004
	a2 = Mem0[a2 + 0x00000000:word32]
l40208890:
	a7 = 1
	branch a6 == 0x00000000 l40208996
	// succ:  l40208895 l40208996
l40208895:
	a3 = Mem0[a1 + 0x00000004:word32]
	a2 = Mem0[a3 + 0x0000000C:word32]
	branch a2 == 2 l402088B6
	// succ:  l4020889C l402088B6
l4020889C:
	branch a2 == 3 l402088C0
	// succ:  l4020889F l402088C0
l4020889F:
	branch a2 == 1 l402088A5
	// succ:  l402088A2 l402088A5
l402088A2:
	goto l40208991
	// succ:  l40208991
l402088A5:
	branch (a6 & 0x00000002) != 0x00000000 l402088AB
	// succ:  l402088A8 l402088AB
l402088A8:
	goto l40208991
	// succ:  l40208991
l402088AB:
	a2 = Mem0[a14 + 0x00000000:word32]
	a6 = a6 | a2
	branch (a6 & 0x00000001) != 0x00000000 l402088C5
	// succ:  l402088B3 l402088C5
l402088B3:
	goto l40208991
	// succ:  l40208991
l402088B6:
	a5 = Mem0[a1 + 0x00000018:word32]
	a2 = 1
	a5 = a2 - a5
	Mem0[a1 + 0x00000018:word32] = a5
	// succ:  l402088C0
l402088C0:
	a5 = Mem0[a1 + 0x00000018:word32]
	branch a5 == 0x00000000 l40208991
	// succ:  l402088C5 l40208991
l402088C5:
	a14 = Mem0[a15 + 0x00000010:word32]
	a2 = a15 + 20
	a6 = a14 << 30
	a4 = a2 + a6
	a8 = 0
	// succ:  l402088D1
l402088D1:
	a3 = Mem0[a2 + 0x00000000:word32]
	branch a3 == -1 l402088DD
	// succ:  l402088D6 l402088DD
l402088D6:
	a3 = a3 + 1
	Mem0[a2:word32] = a3
	goto l40208929
	// succ:  l40208929
l402088DD:
	Mem0[a2:word32] = a8
	a2 = a2 + 4
	branch a2 <u a4 l402088D1
	// succ:  l402088E6 l402088D1
l402088E6:
	a2 = Mem0[a15 + 0x00000008:word32]
	branch a14 < a2 l4020891C
	// succ:  l402088EB l4020891C
l402088EB:
	a3 = Mem0[a15 + 0x00000004:word32]
	a2 = Mem0[a1 + 0x0000000C:word32]
	a3 = a3 + 1
	Mem0[a1 + 0x0000002C:word32] = a6
	Mem0[a1 + 0x00000038:word32] = a7
	a0 = 0x402088F8
	call _Balloc (retsize: 0;)
	a4 = Mem0[a15 + 0x00000010:word32]
	a8 = a2
	a4 = a4 + 2
	a3 = a15 + 12
	a4 = a4 << 30
	a2 = a2 + 12
	Mem0[a1 + 0x00000034:word32] = a8
	a0 = 0x40203130
	v28 = a0
	a0 = 0x4020890D
	call v28 (retsize: 0;)
	a2 = Mem0[a1 + 0x0000000C:word32]
	a3 = a15
	a0 = 0x40208914
	call _Bfree (retsize: 0;)
	a8 = Mem0[a1 + 0x00000034:word32]
	a7 = Mem0[a1 + 0x00000038:word32]
	a6 = Mem0[a1 + 0x0000002C:word32]
	a15 = a8
	// succ:  l4020891C
l4020891C:
	a2 = Mem0[a15 + 0x00000010:word32]
	a3 = a2 + 1
	Mem0[a15 + 0x00000010:word32] = a3
	a2 = a15 + a2 * 0x00000004
	a3 = 1
	Mem0[a2 + 0x00000014:word32] = a3
	// succ:  l40208929
l40208929:
	a2 = a15 + 20
	branch a7 != 2 l40208951
	// succ:  l4020892F l40208951
l4020892F:
	a4 = Mem0[a1 + 0x00000004:word32]
	a3 = Mem0[a4 + 0x00000000:word32]
	a3 = a3 - 1
	branch a13 != a3 l4020898C
	// succ:  l40208938 l4020898C
l40208938:
	a6 = a13 >> 5
	a2 = a2 + a6 * 0x00000004
	a3 = 1
	a2 = Mem0[a2 + 0x00000000:word32]
	SAR = 0x00000020 - a13
	a13 = a3 << SAR
	a13 = a13 & a2
	branch a13 == 0x00000000 l4020894E
	// succ:  l4020894B_1 l4020894E
l4020894B_1:
	a7 = a3
	// succ:  l4020894E
l4020894E:
	goto l4020898C
	// succ:  l4020898C
l40208951:
	a3 = Mem0[a15 + 0x00000010:word32]
	branch a14 >= a3 l4020896C
	// succ:  l40208956 l4020896C
l40208956:
	a2 = a15
	a3 = 1
	a0 = 0x4020895D
	call fn4030845C (retsize: 0;)
	a5 = Mem0[a1 + 0x00000004:word32]
	a12 = a12 + 1
	a2 = Mem0[a5 + 0x00000008:word32]
	a7 = 1
	branch a2 >= a12 l4020898C
	// succ:  l40208968 l4020898C
l40208968:
	goto l402487C8
	// succ:  l402487C8
l4020896C:
	a13 = a13 & 0x0000001F
	a7 = 0x00000001
	branch a13 == 0x00000000 l4020898C
	// succ:  l40208975 l4020898C
l40208975:
	a2 = a2 + a6
	a2 = a2 - 4
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000038:word32] = a7
	a0 = 0x40208982
	call __hi0bits (retsize: 0;)
	a3 = 32
	a13 = a3 - a13
	a7 = Mem0[a1 + 0x00000038:word32]
	branch a2 < a13 l40208956
	// succ:  l4020898C l40208956
l4020898C:
	a2 = 32
	a2 = 32
	goto l40208993
	// succ:  l40208993
l40208991:
	a2 = 16
	// succ:  l40208993
l40208993:
	a7 = a7 | a2
	// succ:  l40208996
l40208996:
	a5 = Mem0[a1 + 0x0000001C:word32]
	a2 = a7
	Mem0[a5:word32] = a15
	a5 = Mem0[a1 + 0x00000024:word32]
	Mem0[a5:word32] = a12
	// succ:  l402089A0
l402089A0:
	a0 = Mem0[a1 + 0x0000005C:word32]
	a12 = Mem0[a1 + 0x00000058:word32]
	a13 = Mem0[a1 + 0x00000054:word32]
	a14 = Mem0[a1 + 0x00000050:word32]
	a15 = Mem0[a1 + 0x0000004C:word32]
	a1 = a1 + 96
	return
	// succ:  __gethex_exit
l402486C8:
l402487C8:
__gethex_exit:


// L_shift
// Return size: 0
void L_shift()
L_shift_entry:
	// succ:  l402089B4
l402089B4:
	a1 = fp
	a5 = 8
	a4 = a5 - a4
	a4 = a4 << 30
	a8 = 32
	a8 = a8 - a4
	// succ:  l402089C1
l402089C1:
	a5 = Mem0[a2 + 0x00000004:word32]
	a7 = Mem0[a2 + 0x00000000:word32]
	SAR = 0x00000020 - a8
	a6 = a5 << SAR
	a6 = a7 | a6
	SAR = a4
	a5 = a5 >> SAR
	Mem0[a2:word32] = a6
	Mem0[a2 + 0x00000004:word32] = a5
	a2 = a2 + 4
	branch a2 <u a3 l402089C1
	// succ:  l402089DD l402089C1
l402089DD:
	return
	// succ:  L_shift_exit
L_shift_exit:


// __hexnan
// Return size: 0
void __hexnan()
__hexnan_entry:
	// succ:  l402089E0
l402089E0:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000038:word32] = a12
	a12 = Mem0[a3 + 0x00000000:word32]
	Mem0[a1 + 0x00000004:word32] = a2
	a6 = a12 >> 5
	a6 = a4 + a6 * 0x00000004
	a2 = a6 + 4
	a12 = a12 & 0x0000001F
	branch a12 == 0x00000000 l402089F7
	// succ:  l402089F4_1 l402089F7
l402089F4_1:
	a6 = a2
	// succ:  l402089F7
l402089F7:
	a2 = Mem0[a1 + 0x00000004:word32]
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x00000030:word32] = a14
	a13 = a6 - 4
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x0000003C:word32] = a0
	a14 = a4
	a4 = 0
	Mem0[a13:word32] = a4
	a10 = Mem0[a2 + 0x00000000:word32]
	a7 = a13
	a15 = a13
	Mem0[a1:word32] = a4
	a9 = a4
	goto l40208AA0
	// succ:  l40208AA0
l40208A18:
	a2 = a3 | a3
	Mem0[a1 + 0x0000000C:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a4
	Mem0[a1 + 0x00000018:word32] = a7
	Mem0[a1 + 0x00000014:word32] = a9
	Mem0[a1 + 0x00000010:word32] = a10
	a0 = 0x40208A2A
	call fn403084D0 (retsize: 0;)
	a3 = Mem0[a1 + 0x0000000C:word32]
	a4 = Mem0[a1 + 0x00000008:word32]
	a7 = Mem0[a1 + 0x00000018:word32]
	a9 = Mem0[a1 + 0x00000014:word32]
	a10 = Mem0[a1 + 0x00000010:word32]
	branch a2 != 0x00000000 l40208A7A
	// succ:  l40208A37 l40208A7A
l40208A37:
	a2 = 32
	branch a2 <u a3 l40208A69
	// succ:  l40208A3C l40208A69
l40208A3C:
	a3 = Mem0[a1 + 0x00000000:word32]
	branch a3 >= a9 l40208A9E
	// succ:  l40208A41 l40208A9E
l40208A41:
	branch a4 >= 8 l40208A54
	// succ:  l40208A44 l40208A54
l40208A44:
	branch a15 >=u a7 l40208A54
	// succ:  l40208A47 l40208A54
l40208A47:
	a3 = a7
	a2 = a15
	a0 = 0x40208A4E
	call fn403089B4 (retsize: 0;)
	a10 = Mem0[a1 + 0x00000010:word32]
	a9 = Mem0[a1 + 0x00000014:word32]
	a7 = Mem0[a1 + 0x00000018:word32]
	// succ:  l40208A54
l40208A54:
	a4 = 8
	branch a14 >=u a15 l40208A9E
	// succ:  l40208A59 l40208A9E
l40208A59:
	a7 = a15 - 4
	a2 = 0
	Mem0[a7:word32] = a2
	Mem0[a1:word32] = a9
	a15 = a7
	a4 = a2
	goto l40208A9E
	// succ:  l40208A9E
l40208A69:
	a2 = 41
	branch a3 == a2 l40208A71
	// succ:  l40208A6E l40208A71
l40208A6E:
	goto l40208B02
	// succ:  l40208B02
l40208A71:
	a3 = Mem0[a1 + 0x00000004:word32]
	a10 = a10 + 2
	Mem0[a3:word32] = a10
	goto l40208AA6
	// succ:  l40208AA6
l40208A7A:
	a4 = a4 + 1
	a3 = 8
	a9 = a9 + 1
	branch a3 >= a4 l40208A91
	// succ:  l40208A83 l40208A91
l40208A83:
	branch a14 >=u a15 l40208A9E
	// succ:  l40208A86 l40208A9E
l40208A86:
	a5 = a15 - 4
	a3 = 0
	Mem0[a5:word32] = a3
	a15 = a5
	a4 = 1
	// succ:  l40208A91
l40208A91:
	a3 = Mem0[a15 + 0x00000000:word32]
	a2 = a2 & 0x0000000F
	a3 = a3 << 28
	a2 = a3 | a2
	Mem0[a15:word32] = a2
	// succ:  l40208A9E
l40208A9E:
	a10 = a10 + 1
	// succ:  l40208AA0
l40208AA0:
	v15 = Mem0[a10 + 0x00000001:byte]
	a3 = (uint32) v15
	branch a3 != 0x00000000 l40208A18
	// succ:  l40208AA6 l40208A18
l40208AA6:
	branch a9 == 0x00000000 l40208B02
	// succ:  l40208AA9 l40208B02
l40208AA9:
	branch a4 >= 8 l40208AB8
	// succ:  l40208AAC l40208AB8
l40208AAC:
	branch a15 >=u a7 l40208AB8
	// succ:  l40208AAF l40208AB8
l40208AAF:
	a2 = a15 | a15
	a3 = a7 | a7
	a0 = 0x40208AB8
	call fn403089B4 (retsize: 0;)
	// succ:  l40208AB8
l40208AB8:
	branch a14 >=u a15 l40208ADA
	// succ:  l40208ABB l40208ADA
l40208ABB:
	a5 = a15
	a2 = a14 | a14
	// succ:  l40208AC0
l40208AC0:
	a4 = Mem0[a5 + 0x00000000:word32]
	a2 = a2 + 4
	a3 = a2 - 4
	Mem0[a3:word32] = a4
	a5 = a5 + 4
	branch a13 >=u a5 l40208AC0
	// succ:  l40208ACE l40208AC0
l40208ACE:
	a3 = 0
	// succ:  l40208AD0
l40208AD0:
	Mem0[a2:word32] = a3
	a2 = a2 + 4
	branch a13 >=u a2 l40208AD0
	// succ:  l40208AD7 l40208AD0
l40208AD7:
	goto l40208AEE
	// succ:  l40208AEE
l40208ADA:
	branch a12 == 0x00000000 l40208AEE
	// succ:  l40208ADC l40208AEE
l40208ADC:
	a2 = -1
	a12 = -a12
	SAR = a12
	a12 = a2 >> SAR
	a2 = Mem0[a13 + 0x00000000:word32]
	a12 = a2 & a12
	Mem0[a13:word32] = a12
	// succ:  l40208AEE
l40208AEE:
	a2 = Mem0[a13 + 0x00000000:word32]
	branch a2 != 0x00000000 l40208B08
	// succ:  l40208AF2 l40208B08
l40208AF2:
	branch a13 != a14 l40208AFC
	// succ:  l40208AF5 l40208AFC
l40208AF5:
	a2 = 1
	Mem0[a13:word32] = a2
	goto l40208B08
	// succ:  l40208B08
l40208AFC:
	a13 = a13 - 4
	goto l40248AEE
	// succ:  l40248AEE
l40208B02:
	a2 = 4
	// succ:  l40208B02_thunk_fn40208B04
l40208B02_thunk_fn40208B04:
	call fn40208B04 (retsize: 0;)
	return
	// succ:  __hexnan_exit
l40208B08:
	a2 = 5
	// succ:  l40208B0A_in___hexnan
l40208B0A_in___hexnan:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  __hexnan_exit
l40248AEE:
__hexnan_exit:


// fn40208B04
// Return size: 0
void fn40208B04()
fn40208B04_entry:
	// succ:  l40208B04
l40208B04:
	a1 = fp
	// succ:  l40208B0A
l40208B0A:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  fn40208B04_exit
fn40208B04_exit:


// _setlocale_r
// Return size: 0
void _setlocale_r()
_setlocale_r_entry:
	// succ:  l40208B1C
l40208B1C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a4
	a13 = 0x40204604
	branch a4 != 0x00000000 l40208B31
	// succ:  l40208B2C l40208B31
l40208B2C:
	a2 = a13
	goto l40208B57
	// succ:  l40208B57
l40208B31:
	a3 = 0x40204608
	a2 = a4 | a4
	a0 = 0x40208B3A
	call strcmp (retsize: 0;)
	branch a2 == 0x00000000 l40208B2C
	// succ:  l40208B3D l40208B2C
l40208B3D:
	a2 = a12
	a3 = a13
	a0 = 0x40208B44
	call strcmp (retsize: 0;)
	branch a2 == 0x00000000 l40208B2C
	// succ:  l40208B47 l40208B2C
l40208B47:
	a3 = 0x4020460C
	a2 = a12 | a12
	a0 = 0x40208B50
	call strcmp (retsize: 0;)
	a3 = a2
	a2 = 0
	branch a3 != 0x00000000 l40208B57
	// succ:  l40208B54_1 l40208B57
l40208B54_1:
	a2 = a13
	// succ:  l40208B57
l40208B57:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  _setlocale_r_exit
_setlocale_r_exit:


// __locale_charset
// Return size: 0
void __locale_charset()
__locale_charset_entry:
	// succ:  l40208B64
l40208B64:
	a1 = fp
	a2 = 0x40204610
	return
	// succ:  __locale_charset_exit
__locale_charset_exit:


// __locale_mb_cur_max
// Return size: 0
void __locale_mb_cur_max()
__locale_mb_cur_max_entry:
	// succ:  l40208B6C
l40208B6C:
	a1 = fp
	a2 = 0x40204614
	a2 = Mem0[a2 + 0x00000000:word32]
	return
	// succ:  __locale_mb_cur_max_exit
__locale_mb_cur_max_exit:


// __locale_msgcharset
// Return size: 0
void __locale_msgcharset()
__locale_msgcharset_entry:
	// succ:  l40208B74
l40208B74:
	a1 = fp
	a2 = 0x40204618
	return
	// succ:  __locale_msgcharset_exit
__locale_msgcharset_exit:


// __locale_cjk_lang
// Return size: 0
void __locale_cjk_lang()
__locale_cjk_lang_entry:
	// succ:  l40208B7C
l40208B7C:
	a1 = fp
	a2 = 0
	return
	// succ:  __locale_cjk_lang_exit
__locale_cjk_lang_exit:


// _localeconv_r
// Return size: 0
void _localeconv_r()
_localeconv_r_entry:
	// succ:  l40208B80
l40208B80:
	a1 = fp
	a2 = 0x4020461C
	return
	// succ:  _localeconv_r_exit
_localeconv_r_exit:


// setlocale
// Return size: 0
void setlocale()
setlocale_entry:
	// succ:  l40208B88
l40208B88:
	a1 = fp
	a5 = a2
	a2 = 0x40203754
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	a4 = a3
	a3 = a5
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40208B9C
	call fn40308B1C (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  setlocale_exit
setlocale_exit:


// localeconv
// Return size: 0
void localeconv()
localeconv_entry:
	// succ:  l40208BA4
l40208BA4:
	a1 = fp
	a2 = 0x4020461C
	return
	// succ:  localeconv_exit
localeconv_exit:


// __smakebuf_r
// Return size: 0
void __smakebuf_r()
__smakebuf_r_entry:
	// succ:  l40208BAC
l40208BAC:
	a1 = fp
	a1 = a1 - 96
	Mem0[a1 + 0x00000054:word32] = a13
	v4 = Mem0[a3 + 0x0000000C:uint16]
	a13 = (uint32) v4
	Mem0[a1 + 0x00000050:word32] = a14
	a14 = a2
	a2 = 2
	Mem0[a1 + 0x00000058:word32] = a12
	Mem0[a1 + 0x0000005C:word32] = a0
	Mem0[a1 + 0x0000004C:word32] = a15
	a13 = a13 & a2
	a12 = a3
	branch a13 == 0x00000000 l40208BD0
	// succ:  l40208BCC l40208BD0
l40208BCC:
	goto l40208C62
	// succ:  l40208C62
l40208BD0:
	v11 = Mem0[a3 + 0x0000000E:int16]
	a3 = (int32) v11
	branch a3 >= 0x00000000 l40208BF2
	// succ:  l40208BD6 l40208BF2
l40208BD6:
	v12 = Mem0[a12 + 0x0000000C:int16]
	a2 = (int32) v12
	a3 = 0x00000080
	a4 = a2 >>u 0x00000007 & 0x00000001
	a13 = 64
	branch a4 != 0x00000000 l40208BE4
	// succ:  l40208BE1_1 l40208BE4
l40208BE1_1:
	a13 = a3
	// succ:  l40208BE4
l40208BE4:
	a3 = 0x402045E8
	a15 = 0
	a2 = a2 | a3
	Mem0[a12 + 0x0000000C:word16] = a2
	goto l40208C40
	// succ:  l40208C40
l40208BF2:
	a2 = a14 | a14
	a4 = a1 | a1
	a0 = 0x40208BFB
	call _close_r (retsize: 0;)
	branch a2 < 0x00000000 l40208BD6
	// succ:  l40208BFE l40208BD6
l40208BFE:
	a2 = 0x40204620
	a3 = Mem0[a1 + 0x00000004:word32]
	a4 = 0x40204624
	a3 = a3 & a2
	a15 = a3 + 0xFFFFE000
	a2 = 1
	branch a15 != 0x00000000 l40208C12
	// succ:  l40208C0F_1 l40208C12
l40208C0F_1:
	a13 = a2
	// succ:  l40208C12
l40208C12:
	a15 = a13
	v18 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v18
	branch a3 != a4 l40208C34
	// succ:  l40208C1A l40208C34
l40208C1A:
	a4 = Mem0[a12 + 0x0000002C:word32]
	a3 = 0x40204628
	branch a4 != a3 l40208C34
	// succ:  l40208C22 l40208C34
l40208C22:
	a3 = 0x00000400
	a2 = a2 | a3
	Mem0[a12 + 0x0000000C:word16] = a2
	a2 = 0x00000400
	Mem0[a12 + 0x00000050:word32] = a2
	goto l40208C3D
	// succ:  l40208C3D
l40208C34:
	a3 = 0x402045E8
	a2 = a3 | a2
	Mem0[a12 + 0x0000000C:word16] = a2
	// succ:  l40208C3D
l40208C3D:
	a13 = 0x00000080
	// succ:  l40208C40
l40208C40:
	a3 = a13 | a13
	a2 = a14 | a14
	a0 = 0x402045FC
	v14 = a0
	a0 = 0x40208C4C
	call v14 (retsize: 0;)
	v15 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v15
	branch a2 != 0x00000000 l40208C70
	// succ:  l40208C51 l40208C70
l40208C51:
	a3 = a3 << 16
	a3 = a3 >> 16
	branch (a3 & 0x00000200) != 0x00000000 l40208C9C
	// succ:  l40208C5A l40208C9C
l40208C5A:
	a2 = 2
	a3 = a3 | a2
	Mem0[a12 + 0x0000000C:word16] = a3
	// succ:  l40208C62
l40208C62:
	a2 = a12 + 71
	Mem0[a12:word32] = a2
	Mem0[a12 + 0x00000010:word32] = a2
	a2 = 1
	Mem0[a12 + 0x00000014:word32] = a2
	goto l40208C9C
	// succ:  l40208C9C
l40208C70:
	a4 = 0x402044F0
	Mem0[a14 + 0x00000028:word32] = a4
	a4 = 0x00000080
	a3 = a3 | a4
	Mem0[a12 + 0x0000000C:word16] = a3
	Mem0[a12:word32] = a2
	Mem0[a12 + 0x00000010:word32] = a2
	Mem0[a12 + 0x00000014:word32] = a13
	branch a15 == 0x00000000 l40208C9C
	// succ:  l40208C86 l40208C9C
l40208C86:
	v16 = Mem0[a12 + 0x0000000E:int16]
	a3 = (int32) v16
	a2 = a14
	a0 = 0x40208C8E
	call _isatty_r (retsize: 0;)
	branch a2 == 0x00000000 l40208C9C
	// succ:  l40208C91 l40208C9C
l40208C91:
	v17 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v17
	a2 = 1
	a2 = a3 | a2
	Mem0[a12 + 0x0000000C:word16] = a2
	// succ:  l40208C9C
l40208C9C:
	a0 = Mem0[a1 + 0x0000005C:word32]
	a12 = Mem0[a1 + 0x00000058:word32]
	a13 = Mem0[a1 + 0x00000054:word32]
	a14 = Mem0[a1 + 0x00000050:word32]
	a15 = Mem0[a1 + 0x0000004C:word32]
	a1 = a1 + 96
	return
	// succ:  __smakebuf_r_exit
__smakebuf_r_exit:


// _Balloc
// Return size: 0
void _Balloc()
_Balloc_entry:
	// succ:  l40208CB0
l40208CB0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = Mem0[a2 + 0x00000024:word32]
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a2
	a14 = a3
	branch a13 != 0x00000000 l40208CD6
	// succ:  l40208CC4 l40208CD6
l40208CC4:
	a2 = 16
	a0 = 0x402034C4
	v9 = a0
	a0 = 0x40208CCC
	call v9 (retsize: 0;)
	Mem0[a12 + 0x00000024:word32] = a2
	Mem0[a2 + 0x00000004:word32] = a13
	Mem0[a2 + 0x00000008:word32] = a13
	Mem0[a2:word32] = a13
	Mem0[a2 + 0x0000000C:word32] = a13
	// succ:  l40208CD6
l40208CD6:
	a13 = Mem0[a12 + 0x00000024:word32]
	a2 = Mem0[a13 + 0x0000000C:word32]
	branch a2 == 0x00000000 l40208CEA
	// succ:  l40208CDC l40208CEA
l40208CDC:
	a2 = Mem0[a12 + 0x00000024:word32]
	a2 = Mem0[a2 + 0x0000000C:word32]
	a2 = a2 + a14 * 0x00000004
	a4 = Mem0[a2 + 0x00000000:word32]
	branch a4 != 0x00000000 l40208D01
	// succ:  l40208CE7 l40208D01
l40208CE7:
	goto l40208D08
	// succ:  l40208D08
l40208CEA:
	a2 = a12
	a3 = 4
	a4 = 33
	a0 = 0x40208CF3
	call _calloc_r (retsize: 0;)
	Mem0[a13 + 0x0000000C:word32] = a2
	a2 = Mem0[a12 + 0x00000024:word32]
	a2 = Mem0[a2 + 0x0000000C:word32]
	branch a2 != 0x00000000 l40208CDC
	// succ:  l40208CFC l40208CDC
l40208CFC:
	a2 = 0
	goto l40208D2E
	// succ:  l40208D2E
l40208D01:
	a3 = Mem0[a4 + 0x00000000:word32]
	Mem0[a2:word32] = a3
	goto l40208D26
	// succ:  l40208D26
l40208D08:
	a3 = 0x00000001
	SAR = 0x00000020 - a14
	a13 = a3 << SAR
	a4 = a13 + 5
	a4 = a4 << 30
	a2 = a12 | a12
	a0 = 0x40208D1D
	call _calloc_r (retsize: 0;)
	a4 = a2
	branch a2 == 0x00000000 l40208CFC
	// succ:  l40208D22 l40208CFC
l40208D22:
	Mem0[a2 + 0x00000004:word32] = a14
	Mem0[a2 + 0x00000008:word32] = a13
	// succ:  l40208D26
l40208D26:
	a2 = 0
	Mem0[a4 + 0x00000010:word32] = a2
	Mem0[a4 + 0x0000000C:word32] = a2
	a2 = a4
	// succ:  l40208D2E
l40208D2E:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  _Balloc_exit
_Balloc_exit:


// _Bfree
// Return size: 0
void _Bfree()
_Bfree_entry:
	// succ:  l40208D3C
l40208D3C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = Mem0[a2 + 0x00000024:word32]
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	a14 = a2
	a13 = a3
	branch a12 != 0x00000000 l40208D62
	// succ:  l40208D50 l40208D62
l40208D50:
	a2 = 16
	a0 = 0x402034C4
	v9 = a0
	a0 = 0x40208D58
	call v9 (retsize: 0;)
	Mem0[a14 + 0x00000024:word32] = a2
	Mem0[a2 + 0x00000004:word32] = a12
	Mem0[a2 + 0x00000008:word32] = a12
	Mem0[a2:word32] = a12
	Mem0[a2 + 0x0000000C:word32] = a12
	// succ:  l40208D62
l40208D62:
	branch a13 == 0x00000000 l40208D74
	// succ:  l40208D64 l40208D74
l40208D64:
	a2 = Mem0[a14 + 0x00000024:word32]
	a3 = Mem0[a13 + 0x00000004:word32]
	a2 = Mem0[a2 + 0x0000000C:word32]
	a2 = a2 + a3 * 0x00000004
	a3 = Mem0[a2 + 0x00000000:word32]
	Mem0[a13:word32] = a3
	Mem0[a2:word32] = a13
	// succ:  l40208D74
l40208D74:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  _Bfree_exit
_Bfree_exit:


// __multadd
// Return size: 0
void __multadd()
__multadd_entry:
	// succ:  l40208D84
l40208D84:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	a12 = a3
	a14 = a5
	a13 = Mem0[a3 + 0x00000010:word32]
	Mem0[a1 + 0x0000002C:word32] = a0
	a15 = a2
	a3 = a3 + 20
	a5 = 0
	// succ:  l40208D9E
l40208D9E:
	a7 = Mem0[a3 + 0x00000000:word32]
	a5 = a5 + 1
	a2 = a7 & 0x0000FFFF
	a2 = a2 * a4
	a7 = a7 >>u 0x00000010 & 0x0000FFFF
	a2 = a2 + a14
	a7 = a7 * a4
	a6 = a2 >>u 0x00000010 & 0x0000FFFF
	a6 = a6 + a7
	a14 = a6 >>u 0x00000010 & 0x0000FFFF
	a2 = a2 & 0x0000FFFF
	a6 = a6 << 16
	a2 = a6 + a2
	Mem0[a3:word32] = a2
	a3 = a3 + 4
	branch a5 < a13 l40208D9E
	// succ:  l40208DC7 l40208D9E
l40208DC7:
	branch a14 == 0x00000000 l40208E01
	// succ:  l40208DC9 l40208E01
l40208DC9:
	a2 = Mem0[a12 + 0x00000008:word32]
	branch a13 < a2 l40208DF8
	// succ:  l40208DCE l40208DF8
l40208DCE:
	a3 = Mem0[a12 + 0x00000004:word32]
	a2 = a15
	a3 = a3 + 1
	a0 = 0x40208DD8
	call fn40308CB0 (retsize: 0;)
	a4 = Mem0[a12 + 0x00000010:word32]
	a5 = a2
	a4 = a4 + 2
	a3 = a12 + 12
	a4 = a4 << 30
	a2 = a2 + 12
	Mem0[a1:word32] = a5
	a0 = 0x40203130
	v14 = a0
	a0 = 0x40208DED
	call v14 (retsize: 0;)
	a3 = a12
	a2 = a15
	a0 = 0x40208DF4
	call fn40308D3C (retsize: 0;)
	a5 = Mem0[a1 + 0x00000000:word32]
	a12 = a5
	// succ:  l40208DF8
l40208DF8:
	a2 = a12 + a13 * 0x00000004
	Mem0[a2 + 0x00000014:word32] = a14
	a13 = a13 + 1
	Mem0[a12 + 0x00000010:word32] = a13
	// succ:  l40208E01
l40208E01:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a12
	a13 = Mem0[a1 + 0x00000024:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  __multadd_exit
__multadd_exit:


// __s2b
// Return size: 0
void __s2b()
__s2b_entry:
	// succ:  l40208E14
l40208E14:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a13
	a12 = a2
	a13 = a3
	a2 = a5 + 8
	a3 = 9
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x0000002C:word32] = a0
	a15 = a4
	Mem0[a1:word32] = a5
	a14 = a6
	a0 = 0x40202548
	v13 = a0
	a0 = 0x40208E35
	call v13 (retsize: 0;)
	a4 = 1
	a3 = 0
	goto l40208E41
	// succ:  l40208E41
l40208E3C:
	a4 = a4 << 31
	a3 = a3 + 1
	// succ:  l40208E41
l40208E41:
	branch a4 < a2 l40208E3C
	// succ:  l40208E44 l40208E3C
l40208E44:
	a2 = a12
	a0 = 0x40208E49
	call fn40308CB0 (retsize: 0;)
	a3 = a2
	Mem0[a2 + 0x00000014:word32] = a14
	a2 = 1
	Mem0[a3 + 0x00000010:word32] = a2
	a2 = 9
	branch a2 >= a15 l40208E7C
	// succ:  l40208E56 l40208E7C
l40208E56:
	a6 = a13 + a2
	a14 = a6
	a13 = a13 + a15
	// succ:  l40208E5C
l40208E5C:
	v14 = Mem0[a14 + 0x00000000:byte]
	a5 = (uint32) v14
	a2 = a12
	a4 = 10
	a5 = a5 - 48
	Mem0[a1 + 0x00000004:word32] = a6
	a14 = a14 + 1
	a0 = 0x40208E6D
	call fn40308D84 (retsize: 0;)
	a3 = a2
	a6 = Mem0[a1 + 0x00000004:word32]
	branch a14 != a13 l40208E5C
	// succ:  l40208E74 l40208E5C
l40208E74:
	a7 = a6 + a15
	a7 = a7 - 8
	goto l40208E80
	// succ:  l40208E80
l40208E7C:
	a7 = a13 + 10
	a15 = a2
	// succ:  l40208E80
l40208E80:
	a14 = a7 - a15
	goto l40208E99
	// succ:  l40208E99
l40208E86:
	a2 = a14 + a15
	v16 = Mem0[a2 + 0x00000000:byte]
	a5 = (uint32) v16
	a4 = 10
	a2 = a12
	a5 = a5 - 48
	a0 = 0x40208E95
	call fn40308D84 (retsize: 0;)
	a3 = a2
	a15 = a15 + 1
	// succ:  l40208E99
l40208E99:
	a2 = Mem0[a1 + 0x00000000:word32]
	branch a15 < a2 l40208E86
	// succ:  l40208E9E l40208E86
l40208E9E:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a3
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  __s2b_exit
__s2b_exit:


// __hi0bits
// Return size: 0
void __hi0bits()
__hi0bits_entry:
	// succ:  l40208EB0
l40208EB0:
	a1 = fp
	a4 = 0x4020462C
	a3 = a2
	a2 = 0x00000000
	branch (a3 & a4) != 0x00000000 l40208EC1
	// succ:  l40208EBB l40208EC1
l40208EBB:
	a3 = a3 << 16
	a2 = 0x00000010
	// succ:  l40208EC1
l40208EC1:
	a4 = 0x40204518
	branch (a3 & a4) != 0x00000000 l40208ECD
	// succ:  l40208EC7 l40208ECD
l40208EC7:
	a2 = a2 + 8
	a3 = a3 << 24
	// succ:  l40208ECD
l40208ECD:
	a4 = 0x40204630
	branch (a3 & a4) != 0x00000000 l40208ED9
	// succ:  l40208ED3 l40208ED9
l40208ED3:
	a2 = a2 + 4
	a3 = a3 << 28
	// succ:  l40208ED9
l40208ED9:
	a4 = 0x40204634
	branch (a3 & a4) != 0x00000000 l40208EE4
	// succ:  l40208EDF l40208EE4
l40208EDF:
	a2 = a2 + 2
	a3 = a3 << 30
	// succ:  l40208EE4
l40208EE4:
	branch a3 < 0x00000000 l40208EF4
	// succ:  l40208EE7 l40208EF4
l40208EE7:
	a4 = 0x40204574
	a3 = a3 & a4
	a4 = a2 + 1
	a2 = 32
	branch a3 == 0x00000000 l40208EF4
	// succ:  l40208EF1_1 l40208EF4
l40208EF1_1:
	a2 = a4
	// succ:  l40208EF4
l40208EF4:
	return
	// succ:  __hi0bits_exit
__hi0bits_exit:


// __lo0bits
// Return size: 0
void __lo0bits()
__lo0bits_entry:
	// succ:  l40208EF8
l40208EF8:
	a1 = fp
	a3 = Mem0[a2 + 0x00000000:word32]
	a5 = a2
	a4 = a3 & 0x00000007
	branch a4 == 0x00000000 l40208F1C
	// succ:  l40208F01 l40208F1C
l40208F01:
	a2 = 0
l40208F1C:
	a2 = a3 & 0x0000FFFF
	branch a2 != 0x00000000 l40208F28
	// succ:  l40208F22 l40208F28
l40208F22:
	a3 = a3 >>u 0x00000010 & 0x0000FFFF
	a4 = 0x00000010
	// succ:  l40208F28
l40208F28:
	a2 = a3 & 0x000000FF
	branch a2 != 0x00000000 l40208F34
	// succ:  l40208F2E l40208F34
l40208F2E:
	a4 = a4 + 8
	a3 = a3 >>u 8
	// succ:  l40208F34
l40208F34:
	a2 = a3 & 0x0000000F
	branch a2 != 0x00000000 l40208F40
	// succ:  l40208F3A l40208F40
l40208F3A:
	a4 = a4 + 4
	a3 = a3 >>u 4
	// succ:  l40208F40
l40208F40:
	a2 = a3 & 0x00000003
	branch a2 != 0x00000000 l40208F4C
	// succ:  l40208F46 l40208F4C
l40208F46:
	a4 = a4 + 2
	a3 = a3 >>u 2
	// succ:  l40208F4C
l40208F4C:
	branch (a3 & 0x00000001) != 0x00000000 l40208F58
	// succ:  l40208F4F l40208F58
l40208F4F:
	a3 = a3 >>u 1
	a2 = 32
	branch a3 == 0x00000000 l40208F5C
	// succ:  l40208F56 l40208F5C
l40208F56:
	a4 = a4 + 1
	// succ:  l40208F58
l40208F58:
	Mem0[a5:word32] = a3
	a2 = a4
	// succ:  l40208F5C
l40208F5C:
	return
	// succ:  __lo0bits_exit
__lo0bits_exit:


// __i2b
// Return size: 0
void __i2b()
__i2b_entry:
	// succ:  l40208F60
l40208F60:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a3
	a3 = 1
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40208F6E
	call fn40308CB0 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a3 = 1
	Mem0[a2 + 0x00000014:word32] = a12
	Mem0[a2 + 0x00000010:word32] = a3
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  __i2b_exit
__i2b_exit:


// __multiply
// Return size: 0
void __multiply()
__multiply_entry:
	// succ:  l40208F80
l40208F80:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000020:word32] = a14
	a14 = a4
	Mem0[a1 + 0x00000024:word32] = a13
	a4 = Mem0[a3 + 0x00000010:word32]
	a13 = a3
	a3 = Mem0[a14 + 0x00000010:word32]
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x0000001C:word32] = a15
	branch a4 >= a3 l40208F9E
	// succ:  l40208F98 l40208F9E
l40208F98:
	a3 = a13
	a13 = a14
	a14 = a3
	// succ:  l40208F9E
l40208F9E:
	a4 = Mem0[a13 + 0x00000010:word32]
	a15 = Mem0[a14 + 0x00000010:word32]
	a5 = Mem0[a13 + 0x00000008:word32]
	a12 = a4 + a15
	a3 = Mem0[a13 + 0x00000004:word32]
	branch a5 >= a12 l40208FAD
	// succ:  l40208FAB l40208FAD
l40208FAB:
	a3 = a3 + 1
	// succ:  l40208FAD
l40208FAD:
	Mem0[a1 + 0x00000008:word32] = a4
	a0 = 0x40208FB2
	call fn40308CB0 (retsize: 0;)
	a5 = a2 + 20
	a8 = a5 + a12 * 0x00000004
	a3 = a5
	a6 = 0
	a4 = Mem0[a1 + 0x00000008:word32]
	goto l40208FC5
	// succ:  l40208FC5
l40208FC1:
	Mem0[a3:word32] = a6
	a3 = a3 + 4
	// succ:  l40208FC5
l40208FC5:
	branch a3 <u a8 l40208FC1
	// succ:  l40208FC8 l40208FC1
l40208FC8:
	a3 = a13 + 20
	a4 = a3 + a4 * 0x00000004
	Mem0[a1:word32] = a4
	a4 = a14 + 20
	a6 = a4 + a15 * 0x00000004
	Mem0[a1 + 0x00000004:word32] = a6
	// succ:  l40209071
l40209071:
	a6 = Mem0[a1 + 0x00000004:word32]
	branch a4 >=u a6 l40209079
	// succ:  l40209076 l40209079
l40209076:
	goto l40248FDC
	// succ:  l40248FDC
l40209079:
	goto l4020907E
	// succ:  l4020907E
l4020907C:
	a12 = a12 - 1
	// succ:  l4020907E
l4020907E:
	branch a12 >= 1 l40209088
	// succ:  l40209081 l40209088
l40209081:
	Mem0[a2 + 0x00000010:word32] = a12
	goto l40209093
	// succ:  l40209093
l40209088:
	a8 = a8 - 4
	a3 = Mem0[a8 + 0x00000000:word32]
	branch a3 == 0x00000000 l4020907C
	// succ:  l40209090 l4020907C
l40209090:
	goto l40249081
	// succ:  l40249081
l40209093:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  __multiply_exit
l40248FDC:
l40249081:
__multiply_exit:


// __pow5mult
// Return size: 0
void __pow5mult()
__pow5mult_entry:
	// succ:  l402090A4
l402090A4:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	a12 = a2
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x0000001C:word32] = a15
	a2 = a4 & 0x00000003
	a13 = a3
	a14 = a4
	branch a2 == 0x00000000 l402090D4
	// succ:  l402090BC l402090D4
l402090BC:
	a3 = 0x40204638
	a2 = a2 - 1
	a4 = a3 + a2 * 0x00000004
	a4 = Mem0[a4 + 0x00000000:word32]
	a3 = a13 | a13
	a2 = a12 | a12
	a5 = 0x00000000
	a0 = 0x402090D2
	call fn40308D84 (retsize: 0;)
	a13 = a2
	// succ:  l402090D4
l402090D4:
	a14 = a14 >> 2
	branch a14 == 0x00000000 l4020914E
	// succ:  l402090DA l4020914E
l402090DA:
	a15 = Mem0[a12 + 0x00000024:word32]
	branch a15 != 0x00000000 l402090F0
	// succ:  l402090DE l402090F0
l402090DE:
	a2 = 16
	a0 = 0x402034C4
	v12 = a0
	a0 = 0x402090E6
	call v12 (retsize: 0;)
	Mem0[a12 + 0x00000024:word32] = a2
	Mem0[a2 + 0x00000004:word32] = a15
	Mem0[a2 + 0x00000008:word32] = a15
	Mem0[a2:word32] = a15
	Mem0[a2 + 0x0000000C:word32] = a15
	// succ:  l402090F0
l402090F0:
	a15 = Mem0[a12 + 0x00000024:word32]
	a5 = Mem0[a15 + 0x00000008:word32]
	branch a5 != 0x00000000 l40209106
	// succ:  l402090F6 l40209106
l402090F6:
	a2 = a12
	a3 = 0x00000271
	a0 = 0x402090FE
	call fn40308F60 (retsize: 0;)
	a5 = a2
	Mem0[a15 + 0x00000008:word32] = a2
	a2 = 0
	Mem0[a5:word32] = a2
	// succ:  l40209106
l40209106:
	a15 = 0
	goto l4020910D
	// succ:  l4020910D
l4020910B:
	a5 = a2
	// succ:  l4020910D
l4020910D:
	branch (a14 & 0x00000001) == 0x00000000 l40209130
	// succ:  l40209110 l40209130
l40209110:
	a4 = a5
	a3 = a13
	a2 = a12
	Mem0[a1 + 0x00000004:word32] = a5
	a0 = 0x4020911C
	call fn40308F80 (retsize: 0;)
	a4 = a2
	a3 = a13 | a13
	a2 = a12 | a12
	Mem0[a1:word32] = a4
	a0 = 0x4020912A
	call fn40308D3C (retsize: 0;)
	a4 = Mem0[a1 + 0x00000000:word32]
	a5 = Mem0[a1 + 0x00000004:word32]
	a13 = a4
	// succ:  l40209130
l40209130:
	a14 = a14 >> 1
	branch a14 == 0x00000000 l4020914E
	// succ:  l40209135 l4020914E
l40209135:
	a2 = Mem0[a5 + 0x00000000:word32]
	branch a2 != 0x00000000 l4020910B
	// succ:  l4020913A l4020910B
l4020913A:
	a3 = a5
	a4 = a5
	a2 = a12
	Mem0[a1 + 0x00000004:word32] = a5
	a0 = 0x40209145
	call fn40308F80 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000004:word32]
	Mem0[a5:word32] = a2
	Mem0[a2:word32] = a15
	goto l4024910B
	// succ:  l4024910B
l4020914E:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  __pow5mult_exit
l4024910B:
__pow5mult_exit:


// __lshift
// Return size: 0
void __lshift()
__lshift_entry:
	// succ:  l40209160
l40209160:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = a3
	a7 = Mem0[a12 + 0x00000010:word32]
	Mem0[a1 + 0x00000020:word32] = a14
	a14 = a4 >> 5
	a7 = a14 + a7
	Mem0[a1 + 0x00000024:word32] = a13
	a6 = a2
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x0000001C:word32] = a15
	a3 = Mem0[a3 + 0x00000004:word32]
	a13 = a7 + 1
	a2 = Mem0[a12 + 0x00000008:word32]
	goto l40209186
	// succ:  l40209186
l40209181:
	a3 = a3 + 1
	a2 = a2 << 31
	// succ:  l40209186
l40209186:
	branch a2 < a13 l40209181
	// succ:  l40209189 l40209181
l40209189:
	a2 = a6
	Mem0[a1 + 0x00000008:word32] = a4
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1:word32] = a7
	a0 = 0x40209194
	call fn40308CB0 (retsize: 0;)
	a3 = 0
	a15 = a2
	a8 = a3
	a2 = a2 + 20
	a4 = Mem0[a1 + 0x00000008:word32]
	a6 = Mem0[a1 + 0x00000004:word32]
	a7 = Mem0[a1 + 0x00000000:word32]
	goto l402091AF
	// succ:  l402091AF
l402091A8:
	a5 = a2 + a3 * 0x00000004
	Mem0[a5:word32] = a8
	a3 = a3 + 1
	// succ:  l402091AF
l402091AF:
	a5 = 0
	branch a3 < a14 l402091A8
	// succ:  l402091B4 l402091A8
l402091B4:
	branch a14 >= 0x00000000 l402091B7
	// succ:  l402091B4_1 l402091B7
l402091B4_1:
	a14 = a5
	// succ:  l402091B7
l402091B7:
	a14 = a2 + a14 * 0x00000004
	a2 = Mem0[a12 + 0x00000010:word32]
	a3 = a12 + 20
	a4 = a4 & 0x0000001F
	a2 = a3 + a2 * 0x00000004
	branch a4 == a5 l402091F6
	// succ:  l402091C8 l402091F6
l402091C8:
	a8 = 32
	a8 = a8 - a4
	// succ:  l402091CD
l402091CD:
	a10 = Mem0[a3 + 0x00000000:word32]
	a9 = a14
	SAR = 0x00000020 - a4
	a10 = a10 << SAR
	a5 = a5 | a10
	Mem0[a14:word32] = a5
	a5 = Mem0[a3 + 0x00000000:word32]
	a3 = a3 + 4
	SAR = a8
	a5 = a5 >> SAR
	a14 = a14 + 4
	branch a3 <u a2 l402091CD
	// succ:  l402091EB l402091CD
l402091EB:
	a7 = a7 + 2
	Mem0[a9 + 0x00000004:word32] = a5
	branch a5 == 0x00000000 l402091F2
	// succ:  l402091EF_2 l402091F2
l402091EF_2:
	a13 = a7
	// succ:  l402091F2
l402091F2:
	goto l40209201
	// succ:  l40209201
l402091F6:
	a4 = Mem0[a3 + 0x00000000:word32]
	a3 = a3 + 4
	Mem0[a14:word32] = a4
	a14 = a14 + 4
	branch a3 <u a2 l402091F6
	// succ:  l40209201 l402091F6
l40209201:
	a13 = a13 - 1
	Mem0[a15 + 0x00000010:word32] = a13
	a2 = a6
	a3 = a12
	a0 = 0x4020920C
	call fn40308D3C (retsize: 0;)
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a15
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  __lshift_exit
__lshift_exit:


// __mcmp
// Return size: 0
void __mcmp()
__mcmp_entry:
	// succ:  l40209220
l40209220:
	a1 = fp
	a4 = a2
	a5 = Mem0[a3 + 0x00000010:word32]
	a2 = Mem0[a2 + 0x00000010:word32]
	a2 = a2 - a5
	branch a2 != 0x00000000 l40209255
	// succ:  l4020922B l40209255
l4020922B:
	a5 = a5 << 30
	a2 = a4 + 20
	a3 = a3 + 20
	a4 = a2 + a5
	a3 = a3 + a5
	// succ:  l40209238
l40209238:
	a4 = a4 - 4
	a3 = a3 - 4
	a6 = Mem0[a4 + 0x00000000:word32]
	a5 = Mem0[a3 + 0x00000000:word32]
	branch a6 == a5 l40209250
	// succ:  l40209245 l40209250
l40209245:
	a2 = 1
	branch a6 >=u a5 l40209255
	// succ:  l4020924A l40209255
l4020924A:
	a2 = -1
	return
	// succ:  __mcmp_exit
l40209250:
	branch a2 <u a4 l40209238
	// succ:  l40209253 l40209238
l40209253:
	a2 = 0
	// succ:  l40209255
l40209255:
	return
	// succ:  __mcmp_exit
__mcmp_exit:


// __mdiff
// Return size: 0
void __mdiff()
__mdiff_entry:
	// succ:  l40209258
l40209258:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a15
	a12 = a3
	a15 = a2
	a2 = a3
	a3 = a4
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a0
	a13 = a4
	a0 = 0x40209272
	call fn40309220 (retsize: 0;)
	a14 = a2
	branch a2 != 0x00000000 l40209288
	// succ:  l40209276 l40209288
l40209276:
	a3 = a14
	a2 = a15
	a0 = 0x4020927D
	call fn40308CB0 (retsize: 0;)
	a3 = 1
	Mem0[a2 + 0x00000010:word32] = a3
	Mem0[a2 + 0x00000014:word32] = a14
	goto l40209329
	// succ:  l40209329
l40209288:
	branch a2 < 0x00000000 l40209291
	// succ:  l4020928B l40209291
l4020928B:
	a14 = 0
	goto l40209299
	// succ:  l40209299
l40209291:
	a2 = a12
	a14 = 1
	a12 = a13
	a13 = a2
	// succ:  l40209299
l40209299:
	a3 = Mem0[a12 + 0x00000004:word32]
	a2 = a15 | a15
	a0 = 0x402092A1
	call fn40308CB0 (retsize: 0;)
	a4 = Mem0[a12 + 0x00000010:word32]
	a5 = a12 + 20
	a12 = Mem0[a13 + 0x00000010:word32]
	a3 = a13 + 20
	Mem0[a2 + 0x0000000C:word32] = a14
	a10 = a5 + a4 * 0x00000004
	a12 = a3 + a12 * 0x00000004
	a7 = a2 + 20
	a6 = 0
	// succ:  l402092B8
l402092B8:
	a9 = Mem0[a5 + 0x00000000:word32]
	a11 = Mem0[a3 + 0x00000000:word32]
	a8 = a9 & 0x0000FFFF
	a6 = a8 + a6
	a13 = a11 & 0x0000FFFF
	a8 = a6 - a13
	a11 = a11 >>u 0x00000010 & 0x0000FFFF
	a9 = a9 >>u 0x00000010 & 0x0000FFFF
	a6 = a8 >> 16
	a9 = a9 - a11
	a9 = a9 + a6
	a6 = a9 >> 16
	a7 = a7 + 4
	a9 = a9 << 16
	a8 = a8 & 0x0000FFFF
	a11 = a7 - 4
	a8 = a9 | a8
	a3 = a3 + 4
	Mem0[a11:word32] = a8
	a5 = a5 + 4
	branch a3 <u a12 l402092B8
	// succ:  l402092EF l402092B8
l402092EF:
	a3 = a7
	goto l40209315
	// succ:  l40209315
l402092F4:
	a9 = Mem0[a5 + 0x00000000:word32]
	a5 = a5 + 4
	a7 = a9 & 0x0000FFFF
	a7 = a7 + a6
	a8 = a7 >> 16
	a9 = a9 >>u 0x00000010 & 0x0000FFFF
	a8 = a8 + a9
	a6 = a8 >> 16
	a7 = a7 & 0x0000FFFF
	a8 = a8 << 16
	a7 = a8 | a7
	Mem0[a3:word32] = a7
	a3 = a3 + 4
	// succ:  l40209315
l40209315:
	a7 = a3
	branch a5 <u a10 l402092F4
	// succ:  l4020931A l402092F4
l4020931A:
	goto l4020931F
	// succ:  l4020931F
l4020931D:
	a4 = a4 - 1
	// succ:  l4020931F
l4020931F:
	a7 = a7 - 4
	a3 = Mem0[a7 + 0x00000000:word32]
	branch a3 == 0x00000000 l4020931D
	// succ:  l40209327 l4020931D
l40209327:
	Mem0[a2 + 0x00000010:word32] = a4
	// succ:  l40209329
l40209329:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  __mdiff_exit
__mdiff_exit:


// __ulp
// Return size: 0
void __ulp()
__ulp_entry:
	// succ:  l40209338
l40209338:
	a1 = fp
	a4 = 0x40204460
	a2 = 0x402045E0
	a3 = a3 & a4
	a4 = a3 + a2
	a3 = a4
	branch a4 >= 1 l4020935C
	// succ:  l40209348 l4020935C
l40209348:
	a4 = -a4
	a4 = a4 >> 20
	a2 = 19
	branch a2 < a4 l40209360
	// succ:  l40209353 l40209360
l40209353:
	a5 = 0x4020445C
	SAR = a4
	a3 = a0 >> SAR
	// succ:  l4020935C
l4020935C:
	a2 = 0
	return
	// succ:  __ulp_exit
l40209360:
	a6 = 50
	a3 = 0x402044A0
	a5 = 1
	branch a6 < a4 l40209375
	// succ:  l4020936A l40209375
l4020936A:
	a6 = 51
	a4 = a6 - a4
	SAR = 0x00000020 - a4
	a5 = a5 << SAR
	// succ:  l40209375
l40209375:
	a2 = a5
	return
	// succ:  __ulp_exit
__ulp_exit:


// __b2d
// Return size: 0
void __b2d()
__b2d_entry:
	// succ:  l4020937C
l4020937C:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x0000001C:word32] = a15
	a15 = Mem0[a2 + 0x00000010:word32]
	Mem0[a1 + 0x00000020:word32] = a14
	a14 = a2 + 20
	a15 = a14 + a15 * 0x00000004
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = a15 - 4
	Mem0[a1 + 0x00000024:word32] = a13
	a13 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x0000002C:word32] = a0
	a2 = a13
	Mem0[a1:word32] = a3
	a0 = 0x4020939D
	call fn40308EB0 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a4 = 32
	a4 = a4 - a2
	Mem0[a3:word32] = a4
	a3 = 10
	a7 = 0x402036AC
	branch a3 < a2 l402093DE
	// succ:  l402093AE l402093DE
l402093AE:
	a3 = 11
	a3 = a3 - a2
	SAR = a3
	a6 = a13 >> SAR
	a5 = a6 | a7
	a6 = 0x00000000
	branch a14 >=u a12 l402093C8
	// succ:  l402093C2 l402093C8
l402093C2:
	a15 = a15 - 8
	a6 = Mem0[a15 + 0x00000000:word32]
	// succ:  l402093C8
l402093C8:
	a2 = a2 + 21
	SAR = a3
	a3 = a6 >> SAR
	SAR = 0x00000020 - a2
	a13 = a13 << SAR
	a4 = a3 | a13
	goto l40209429
	// succ:  l40209429
l402093DE:
	a3 = 0
	branch a14 >=u a12 l402093E8
	// succ:  l402093E3 l402093E8
l402093E3:
	a12 = a15 - 8
	a3 = Mem0[a12 + 0x00000000:word32]
	// succ:  l402093E8
l402093E8:
	a6 = a2 - 11
	branch a6 == 0x00000000 l40209424
	// succ:  l402093ED l40209424
l402093ED:
	a4 = 43
	a2 = a4 - a2
	a4 = 0x402036AC
	SAR = 0x00000020 - a6
	a13 = a13 << SAR
	SAR = a2
	a7 = a3 >> SAR
	a13 = a13 | a4
	a5 = a13 | a7
	a7 = 0
	branch a14 >=u a12 l40209411
	// succ:  l4020940C l40209411
l4020940C:
	a12 = a12 - 4
	a7 = Mem0[a12 + 0x00000000:word32]
	// succ:  l40209411
l40209411:
	SAR = a2
	a2 = a7 >> SAR
	SAR = 0x00000020 - a6
	a3 = a3 << SAR
	a4 = a2 | a3
	goto l40209429
	// succ:  l40209429
l40209424:
	a5 = a13 | a7
	a4 = a3
	// succ:  l40209429
l40209429:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a4
	a3 = a5
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  __b2d_exit
__b2d_exit:


// __d2b
// Return size: 0
void __d2b()
__d2b_entry:
	// succ:  l4020943C
l4020943C:
	a1 = fp
	a1 = a1 - 64
	a3 = 1
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x00000030:word32] = a14
	a13 = a5
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a6
	Mem0[a1 + 0x00000014:word32] = a7
	a12 = a4
	a0 = 0x40209456
	call fn40308CB0 (retsize: 0;)
	a14 = a2
	a2 = 0x40204508
	a15 = a13 >>u 0x00000014 & 0x000007FF
	a2 = a2 & a13
	branch a15 != 0x00000000 l40209468
	// succ:  l40209463 l40209468
l40209463:
	goto l4020946E
	// succ:  l4020946E
l40209468:
	a5 = 0x40204570
	a2 = a2 | a5
	// succ:  l4020946E
l4020946E:
	Mem0[a1:word32] = a2
	branch a12 == 0x00000000 l402094AA
	// succ:  l40209472 l402094AA
l40209472:
	a2 = a1 + 4
	Mem0[a1 + 0x00000004:word32] = a12
	a0 = 0x40209479
	call fn40308EF8 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000004:word32]
	branch a2 == 0x00000000 l40209498
	// succ:  l4020947D l40209498
l4020947D:
	a6 = Mem0[a1 + 0x00000000:word32]
	a7 = -a2
	SAR = 0x00000020 - a7
	a7 = a6 << SAR
	a5 = a7 | a5
	SAR = a2
	a6 = a6 >> SAR
	Mem0[a14 + 0x00000014:word32] = a5
	Mem0[a1:word32] = a6
	goto l4020949A
	// succ:  l4020949A
l40209498:
	Mem0[a14 + 0x00000014:word32] = a5
	// succ:  l4020949A
l4020949A:
	a5 = Mem0[a1 + 0x00000000:word32]
	a12 = 2
	a6 = 1
	branch a5 != 0x00000000 l402094A3
	// succ:  l402094A0_1 l402094A3
l402094A0_1:
	a12 = a6
	// succ:  l402094A3
l402094A3:
	Mem0[a14 + 0x00000018:word32] = a5
	Mem0[a14 + 0x00000010:word32] = a12
	goto l402094BA
	// succ:  l402094BA
l402094AA:
	a2 = a1
	a0 = 0x402094AF
	call fn40308EF8 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000000:word32]
	a12 = 1
	Mem0[a14 + 0x00000014:word32] = a5
	Mem0[a14 + 0x00000010:word32] = a12
	a2 = a2 + 32
	// succ:  l402094BA
l402094BA:
	branch a15 == 0x00000000 l402094CF
	// succ:  l402094BC l402094CF
l402094BC:
	a5 = 0xFFFFFBCD
	a4 = a15 + a5
	a3 = Mem0[a1 + 0x00000010:word32]
	a4 = a4 + a2
	Mem0[a3:word32] = a4
	a4 = 53
	a2 = a4 - a2
	goto l402094EB
	// succ:  l402094EB
l402094CF:
	a4 = 0xFFFFFBCE
	a3 = Mem0[a1 + 0x00000010:word32]
	a2 = a2 + a4
	Mem0[a3:word32] = a2
	a2 = 0x40202638
	a2 = a12 + a2
	a2 = a14 + a2 * 0x00000004
	a2 = Mem0[a2 + 0x00000014:word32]
	a12 = a12 << 27
	a0 = 0x402094E8
	call fn40308EB0 (retsize: 0;)
	a2 = a12 - a2
	// succ:  l402094EB
l402094EB:
	a3 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x0000003C:word32]
	Mem0[a3:word32] = a2
	a12 = Mem0[a1 + 0x00000038:word32]
	a2 = a14
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  __d2b_exit
__d2b_exit:


// __ratio
// Return size: 0
void __ratio()
__ratio_entry:
	// succ:  l40209500
l40209500:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = a3
	a3 = a1 + 4
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	a13 = a2
	a0 = 0x40209516
	call fn4030937C (retsize: 0;)
	a14 = a2
	a15 = a3
	a2 = a12
	a3 = a1
	a0 = 0x40209521
	call fn4030937C (retsize: 0;)
	a4 = a2
	a5 = a3
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = Mem0[a1 + 0x00000004:word32]
	a6 = Mem0[a13 + 0x00000010:word32]
	a2 = a3 - a2
	a3 = Mem0[a12 + 0x00000010:word32]
	a3 = a6 - a3
	a3 = a3 << 27
	a2 = a2 + a3
	branch a2 < 1 l40209544
	// succ:  l4020953B l40209544
l4020953B:
	a2 = a2 << 12
	a15 = a2 + a15
	goto l4020954A
	// succ:  l4020954A
l40209544:
	a2 = a2 << 12
	a5 = a5 - a2
	// succ:  l4020954A
l4020954A:
	a2 = a14 | a14
	a3 = a15 | a15
	a0 = 0x40209553
	call __divdf3 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  __ratio_exit
__ratio_exit:


// _mprec_log10
// Return size: 0
void _mprec_log10()
_mprec_log10_entry:
	// succ:  l40209564
l40209564:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a2
	a4 = 23
	a2 = 0x402044A0
	a3 = 0x402036AC
	branch a4 < a12 l40209585
	// succ:  l40209578 l40209585
l40209578:
	a2 = 0x40204544
	a12 = a2 + a12 * 0x00000008
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = Mem0[a12 + 0x00000004:word32]
	goto l40209593
	// succ:  l40209593
l40209585:
	a4 = 0x402044A0
	a5 = 0x402045D8
	a12 = a12 - 1
	a0 = 0x40209590
	call fn4030487C (retsize: 0;)
	branch a12 != 0x00000000 l40209585
	// succ:  l40209593 l40209585
l40209593:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  _mprec_log10_exit
_mprec_log10_exit:


// __copybits
// Return size: 0
void __copybits()
__copybits_entry:
	// succ:  l4020959C
l4020959C:
	a1 = fp
	a3 = a3 - 1
	a5 = a3 >> 5
	a3 = a4 + 20
	a4 = Mem0[a4 + 0x00000010:word32]
	a5 = a5 + 1
	a5 = a2 + a5 * 0x00000004
	a4 = a3 + a4 * 0x00000004
	goto l402095B9
	// succ:  l402095B9
l402095B1:
	a6 = Mem0[a3 + 0x00000000:word32]
	a3 = a3 + 4
	Mem0[a2:word32] = a6
	a2 = a2 + 4
	// succ:  l402095B9
l402095B9:
	branch a3 <u a4 l402095B1
	// succ:  l402095BC l402095B1
l402095BC:
	a3 = 0
	goto l402095C5
	// succ:  l402095C5
l402095C1:
	Mem0[a2:word32] = a3
	a2 = a2 + 4
	// succ:  l402095C5
l402095C5:
	branch a2 <u a5 l402095C1
	// succ:  l402095C8 l402095C1
l402095C8:
	return
	// succ:  __copybits_exit
__copybits_exit:


// __any_on
// Return size: 0
void __any_on()
__any_on_entry:
	// succ:  l402095CC
l402095CC:
	a1 = fp
	a5 = a2 + 20
	a2 = Mem0[a2 + 0x00000010:word32]
	a4 = a3 >> 5
	branch a2 < a4 l402095FA
	// succ:  l402095D7 l402095FA
l402095D7:
	branch a4 >= a2 l402095FC
	// succ:  l402095DA l402095FC
l402095DA:
	a3 = a3 & 0x0000001F
	branch a3 == 0x00000000 l402095FC
	// succ:  l402095DF l402095FC
l402095DF:
	a2 = a5 + a4 * 0x00000004
	a6 = Mem0[a2 + 0x00000000:word32]
	SAR = a3
	a2 = a6 >> SAR
	SAR = 0x00000020 - a3
	a3 = a2 << SAR
	a2 = 1
	branch a3 != a6 l40209614
	// succ:  l402095F5 l40209614
l402095F5:
	goto l402095FC
	// succ:  l402095FC
l402095FA:
	a4 = a2
	// succ:  l402095FC
l402095FC:
	a4 = a5 + a4 * 0x00000004
	goto l4020960B
	// succ:  l4020960B
l40209604:
	a4 = a4 - 4
	a2 = Mem0[a4 + 0x00000000:word32]
	branch a2 != 0x00000000 l40209612
	// succ:  l4020960B l40209612
l4020960B:
	branch a5 <u a4 l40209604
	branch a5 <u a4 l40209604
	// succ:  l4020960E l40209604
l4020960E:
	a2 = 0
	return
	a2 = 0
	return
	// succ:  __any_on_exit __any_on_exit
l40209612:
	a2 = 1
	// succ:  l40209614
l40209614:
	return
	// succ:  __any_on_exit
__any_on_exit:


// _calloc_r
// Return size: 0
void _calloc_r()
_calloc_r_entry:
	// succ:  l40209618
l40209618:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = a3 * a4
	Mem0[a1 + 0x00000008:word32] = a12
	a3 = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x402045FC
	v8 = a0
	a0 = 0x4020962C
	call v8 (retsize: 0;)
	a12 = a2
	branch a2 == 0x00000000 l4020963A
	// succ:  l40209630 l4020963A
l40209630:
	a3 = 0
	a4 = a13
	a0 = 0x4020267C
	v10 = a0
	a0 = 0x4020963A
	call v10 (retsize: 0;)
	// succ:  l4020963A
l4020963A:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12
	a13 = Mem0[a1 + 0x00000004:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  _calloc_r_exit
_calloc_r_exit:


// _realloc_r
// Return size: 0
void _realloc_r()
_realloc_r_entry:
	// succ:  l40209648
l40209648:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a15
	a14 = a2
	a12 = a3
	a13 = a4
	branch a3 != 0x00000000 l4020966A
	// succ:  l4020965D l4020966A
l4020965D:
	a3 = a4
	a0 = 0x402045FC
	v11 = a0
	a0 = 0x40209665
	call v11 (retsize: 0;)
	a3 = a2
	goto l402096AA
	// succ:  l402096AA
l4020966A:
	branch a4 != 0x00000000 l40209678
	// succ:  l4020966C l40209678
l4020966C:
	a0 = 0x402044F4
	v12 = a0
	a0 = 0x40209672
	call v12 (retsize: 0;)
	a3 = a13
	goto l402096AA
	// succ:  l402096AA
l40209678:
	a0 = 0x4020967B
	call _malloc_usable_size_r (retsize: 0;)
	a3 = a12 | a12
	branch a2 >=u a13 l402096AA
	// succ:  l40209681 l402096AA
l40209681:
	a3 = a13 | a13
	a2 = a14 | a14
	a0 = 0x402045FC
	v13 = a0
	a0 = 0x4020968D
	call v13 (retsize: 0;)
	a3 = 0
	a15 = a2
	branch a2 == a3 l402096AA
	// succ:  l40209694 l402096AA
l40209694:
	a3 = a12
	a4 = a13
	a0 = 0x40203130
	v14 = a0
	a0 = 0x4020969E
	call v14 (retsize: 0;)
	a3 = a12
	a2 = a14
	a0 = 0x402044F4
	v15 = a0
	a0 = 0x402096A8
	call v15 (retsize: 0;)
	a3 = a15
	// succ:  l402096AA
l402096AA:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a2 = a3
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  _realloc_r_exit
_realloc_r_exit:


// __sread
// Return size: 0
void __sread()
__sread_entry:
	// succ:  l402096BC
l402096BC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a3
	v5 = Mem0[a3 + 0x0000000E:int16]
	a3 = (int32) v5
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x402096CC
	call _read_r (retsize: 0;)
	branch a2 < 0x00000000 l402096DC
	// succ:  l402096CF l402096DC
l402096CF:
	a3 = Mem0[a12 + 0x00000054:word32]
	a3 = a3 + a2
	Mem0[a12 + 0x00000054:word32] = a3
	goto l402096E8
	// succ:  l402096E8
l402096DC:
	v9 = Mem0[a12 + 0x0000000C:uint16]
	a4 = (uint32) v9
	a3 = 0x40204640
	a3 = a4 & a3
	Mem0[a12 + 0x0000000C:word16] = a3
	// succ:  l402096E8
l402096E8:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  __sread_exit
__sread_exit:


// __seofread
// Return size: 0
void __seofread()
__seofread_entry:
	// succ:  l402096F4
l402096F4:
	a1 = fp
	a2 = 0
	return
	// succ:  __seofread_exit
__seofread_exit:


// __swrite
// Return size: 0
void __swrite()
__swrite_entry:
	// succ:  l402096F8
l402096F8:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a13
	a13 = a2
	v5 = Mem0[a3 + 0x0000000C:uint16]
	a2 = (uint32) v5
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a15
	Mem0[a1 + 0x0000001C:word32] = a0
	a12 = a3
	a15 = a4
	a14 = a5
	branch (a2 & 0x00000100) == 0x00000000 l40209721
	// succ:  l40209713 l40209721
l40209713:
	v13 = Mem0[a3 + 0x0000000E:int16]
	a3 = (int32) v13
	a2 = a13
	a4 = 0x00000000
	a5 = 0x00000002
	a0 = 0x40209721
	call _close_r (retsize: 0;)
	// succ:  l40209721
l40209721:
	v14 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v14
	a2 = 0x40204640
	a4 = a15 | a15
	a2 = a3 & a2
	v15 = Mem0[a12 + 0x0000000E:int16]
	a3 = (int32) v15
	Mem0[a12 + 0x0000000C:word16] = a2
	a5 = a14 | a14
	a2 = a13 | a13
	a0 = 0x4020973C
	call _write_r (retsize: 0;)
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  __swrite_exit
__swrite_exit:


// __sseek
// Return size: 0
void __sseek()
__sseek_entry:
	// succ:  l4020974C
l4020974C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a3
	v5 = Mem0[a3 + 0x0000000E:int16]
	a3 = (int32) v5
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4020975C
	call _close_r (retsize: 0;)
	v7 = Mem0[a12 + 0x0000000C:uint16]
	a3 = (uint32) v7
	branch a2 != -1 l40209770
	// succ:  l40209762 l40209770
l40209762:
	a4 = 0x40204640
	a3 = a4 & a3
	Mem0[a12 + 0x0000000C:word16] = a3
	goto l4020977C
	// succ:  l4020977C
l40209770:
	a4 = 0x402040DC
	Mem0[a12 + 0x00000054:word32] = a2
	a3 = a4 | a3
	Mem0[a12 + 0x0000000C:word16] = a3
	// succ:  l4020977C
l4020977C:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  __sseek_exit
__sseek_exit:


// __sclose
// Return size: 0
void __sclose()
__sclose_entry:
	// succ:  l40209788
l40209788:
	a1 = fp
	v4 = Mem0[a3 + 0x0000000E:int16]
	a3 = (int32) v4
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40209794
	call _close_r (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  __sclose_exit
__sclose_exit:


// strcmp
// Return size: 0
void strcmp()
strcmp_entry:
	// succ:  l402097A0
l402097A0:
	a1 = fp
	v4 = Mem0[a2 + 0x00000000:byte]
	a8 = (uint32) v4
	v7 = Mem0[a3 + 0x00000000:byte]
	a9 = (uint32) v7
	a10 = 3
	branch a8 != a9 l402097F8
	// succ:  l402097AB l402097F8
l402097AB:
	a11 = a2 | a3
	branch (a11 & a10) == 0x00000000 l40209800
	// succ:  l402097B1 l40209800
l402097B1:
	a11 = a2 ^ a3
	branch (a11 & a10) != 0x00000000 l402097E8
	// succ:  l402097B7 l402097E8
l402097B7:
	a2 = a2 + 1
	branch a8 == 0x00000000 l40209850
	// succ:  l402097BC l40209850
l402097BC:
	a3 = a3 + 1
	branch (a2 & a10) == 0x00000000 l40209800
	// succ:  l402097C1 l40209800
l402097C1:
	v11 = Mem0[a2 + 0x00000000:byte]
	a8 = (uint32) v11
	v12 = Mem0[a3 + 0x00000000:byte]
	a9 = (uint32) v12
	a2 = a2 + 1
	branch a8 != a9 l402097F8
	// succ:  l402097CC l402097F8
l402097CC:
	branch a8 == 0x00000000 l40209850
	// succ:  l402097CF l40209850
l402097CF:
	a3 = a3 + 1
	branch (a2 & a10) == 0x00000000 l40209800
	// succ:  l402097D4 l40209800
l402097D4:
	v13 = Mem0[a2 + 0x00000000:byte]
	a8 = (uint32) v13
	v14 = Mem0[a3 + 0x00000000:byte]
	a9 = (uint32) v14
	a2 = a2 + 1
	branch a8 != a9 l402097F8
	// succ:  l402097DF l402097F8
l402097DF:
	branch a8 == 0x00000000 l40209850
	// succ:  l402097E2 l40209850
l402097E2:
	a3 = a3 + 1
	goto l40209800
	// succ:  l40209800
l402097E8:
	v15 = Mem0[a2 + 0x00000000:byte]
	a8 = (uint32) v15
	v16 = Mem0[a3 + 0x00000000:byte]
	a9 = (uint32) v16
	a2 = a2 + 1
	branch a8 != a9 l402097F8
	// succ:  l402097F3 l402097F8
l402097F3:
	a3 = a3 + 1
	branch a8 != 0x00000000 l402097E8
	// succ:  l402097F8 l402097E8
l402097F8:
	a2 = a8 - a9
	return
	a2 = a8 - a9
	return
	// succ:  strcmp_exit strcmp_exit
l40209800:
	a4 = 0x000000FF
	a7 = 0x4020464C
	goto l4020980D
	// succ:  l4020980D
l40209809:
	a2 = a2 + 4
	a3 = a3 + 4
	// succ:  l4020980D
l4020980D:
	a8 = Mem0[a2 + 0x00000000:word32]
	a9 = Mem0[a3 + 0x00000000:word32]
	a5 = a8 << 31
	branch a8 != a9 l40209854
	// succ:  l40209817 l40209854
l40209817:
	a9 = a8 | a5
	branch (~a9 & a7) == 0x00000000 l40209809
	// succ:  l4020981D l40209809
l4020981D:
	branch (a8 & a4) == 0x00000000 l40209850
	// succ:  l40209820 l40209850
l40209820:
	a5 = 0x40204510
	a6 = 0x40204514
	branch (a8 & a5) == 0x00000000 l40209850
	// succ:  l40209829 l40209850
l40209829:
	a7 = 0x40204518
	branch (a8 & a6) == 0x00000000 l40209850
	// succ:  l4020982F l40209850
l4020982F:
	branch (a8 & a7) == 0x00000000 l40209850
	// succ:  l40209832 l40209850
l40209832:
	a2 = a2 + 4
	a3 = a3 + 4
	goto l4020983B
	// succ:  l4020983B
l40209839:
	a3 = a3 + 4
	// succ:  l4020983B
l4020983B:
	a8 = Mem0[a2 + 0x00000000:word32]
	a9 = Mem0[a3 + 0x00000000:word32]
	a2 = a2 + 4
	branch a8 != a9 l40209854
	// succ:  l40209844 l40209854
l40209844:
	branch (a8 & a4) == 0x00000000 l40209850
	// succ:  l40209847 l40209850
l40209847:
	branch (a8 & a5) == 0x00000000 l40209850
	// succ:  l4020984A l40209850
l4020984A:
	branch (a8 & a6) == 0x00000000 l40209850
	// succ:  l4020984D l40209850
l4020984D:
	branch (a8 & a7) != 0x00000000 l40209839
	// succ:  l40209850 l40209839
l40209850:
	a2 = 0
	return
	a2 = 0
	return
	// succ:  strcmp_exit strcmp_exit
l40209854:
	a2 = a8 ^ a9
	branch (a2 & a4) != 0x00000000 l4020987C
	// succ:  l4020985A l4020987C
l4020985A:
	a5 = 0x40204510
	branch (a8 & a4) == 0x00000000 l40209850
	// succ:  l40209860 l40209850
l40209860:
	branch (a2 & a5) != 0x00000000 l40209888
	// succ:  l40209863 l40209888
l40209863:
	a6 = 0x40204514
	branch (a8 & a5) == 0x00000000 l40209850
	// succ:  l40209869 l40209850
l40209869:
	branch (a2 & a6) != 0x00000000 l40209894
	// succ:  l4020986C l40209894
l4020986C:
	branch (a8 & a6) == 0x00000000 l40209850
	// succ:  l4020986F l40209850
l4020986F:
	a10 = a8 >>u 0x00000018 & 0x000000FF
	a11 = a9 >>u 0x00000018 & 0x000000FF
	a2 = a10 - a11
	return
	// succ:  strcmp_exit
l4020987C:
	a10 = a8 & 0x000000FF
	a11 = a9 & 0x000000FF
	a2 = a10 - a11
	return
	// succ:  strcmp_exit
l40209888:
	a10 = a8 >>u 0x00000008 & 0x000000FF
	a11 = a9 >>u 0x00000008 & 0x000000FF
	a2 = a10 - a11
	return
	// succ:  strcmp_exit
l40209894:
	a10 = a8 >>u 0x00000010 & 0x000000FF
	a11 = a9 >>u 0x00000010 & 0x000000FF
	a2 = a10 - a11
	return
	// succ:  strcmp_exit
strcmp_exit:


// _isatty_r
// Return size: 0
void _isatty_r()
_isatty_r_entry:
	// succ:  l402098A0
l402098A0:
	a1 = fp
	a1 = a1 - 80
	a4 = a1 | a1
	Mem0[a1 + 0x0000004C:word32] = a0
	a0 = 0x402098AC
	call _close_r (retsize: 0;)
	branch a2 < 0x00000000 l402098C6
	// succ:  l402098AF l402098C6
l402098AF:
	a2 = 0x40204620
	a4 = Mem0[a1 + 0x00000004:word32]
	a3 = 0x00000001
	a4 = a4 & a2
	a4 = a4 + 0xFFFFE000
	a2 = 0
	branch a4 != 0x00000000 l402098C3
	// succ:  l402098C0_1 l402098C3
l402098C0_1:
	a2 = a3
	// succ:  l402098C3
l402098C3:
	goto l402098C8
	// succ:  l402098C8
l402098C6:
	a2 = 0
	// succ:  l402098C8
l402098C8:
	a0 = Mem0[a1 + 0x0000004C:word32]
	a1 = a1 + 80
	return
	// succ:  _isatty_r_exit
_isatty_r_exit:


// _fclose_r
// Return size: 0
void _fclose_r()
_fclose_r_entry:
	// succ:  l402098D0
l402098D0:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a15
	a13 = a2
	a12 = a3
	branch a3 == 0x00000000 l402099B0
	// succ:  l402098E4 l402099B0
l402098E4:
	branch a2 == 0x00000000 l402098F4
	// succ:  l402098E6 l402098F4
l402098E6:
	a2 = Mem0[a2 + 0x00000018:word32]
	branch a2 != 0x00000000 l402098F4
	// succ:  l402098EB l402098F4
l402098EB:
	a2 = a13 | a13
	a0 = 0x40204470
	v10 = a0
	a0 = 0x402098F4
	call v10 (retsize: 0;)
	// succ:  l402098F4
l402098F4:
	a2 = 0x402044D0
	branch a12 != a2 l40209900
	// succ:  l402098FA l40209900
l402098FA:
	a12 = Mem0[a13 + 0x00000004:word32]
	goto l40209914
	// succ:  l40209914
l40209900:
	a2 = 0x402044D4
	branch a12 != a2 l4020990C
	// succ:  l40209906 l4020990C
l40209906:
	a12 = Mem0[a13 + 0x00000008:word32]
	goto l40209914
	// succ:  l40209914
l4020990C:
	a2 = 0x402044D8
	branch a12 != a2 l40209914
	// succ:  l40209912 l40209914
l40209912:
	a12 = Mem0[a13 + 0x0000000C:word32]
	// succ:  l40209914
l40209914:
	v11 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v11
	a14 = a12 + 88
	branch (a2 & 0x00000200) != 0x00000000 l40209925
	// succ:  l4020991D l40209925
l4020991D:
	a2 = a14
	a0 = 0x402044DC
	v12 = a0
	a0 = 0x40209925
	call v12 (retsize: 0;)
	// succ:  l40209925
l40209925:
	v13 = Mem0[a12 + 0x0000000C:int16]
	a15 = (int32) v13
	branch a15 != 0x00000000 l40209938
	// succ:  l4020992B l40209938
l4020992B:
	a2 = a14 | a14
	a0 = 0x402044E0
	v14 = a0
	a0 = 0x40209934
	call v14 (retsize: 0;)
	goto l402099AB
	// succ:  l402099AB
l40209938:
	a2 = a13
	a3 = a12
	a0 = 0x4020993F
	call fn40307F1C (retsize: 0;)
	a4 = Mem0[a12 + 0x00000030:word32]
	a15 = a2
	branch a4 == 0x00000000 l40209952
	// succ:  l40209946 l40209952
l40209946:
	a3 = Mem0[a12 + 0x00000020:word32]
	a2 = a13
	a0 = 0x4020994D
	call a4 (retsize: 0;)
	a3 = -1
	branch a2 >= 0x00000000 l40209952
	// succ:  l4020994F_1 l40209952
l4020994F_1:
	a15 = a3
	// succ:  l40209952
l40209952:
	v16 = Mem0[a12 + 0x0000000C:uint16]
	a2 = (uint32) v16
	branch (a2 & 0x00000080) == 0x00000000 l40209962
	// succ:  l40209958 l40209962
l40209958:
	a3 = Mem0[a12 + 0x00000010:word32]
	a2 = a13
	a0 = 0x402044F4
	v17 = a0
	a0 = 0x40209962
	call v17 (retsize: 0;)
	// succ:  l40209962
l40209962:
	a3 = Mem0[a12 + 0x00000034:word32]
	branch a3 == 0x00000000 l40209978
	// succ:  l40209966 l40209978
l40209966:
	a2 = a12 + 68
	branch a3 == a2 l40209974
	// succ:  l4020996C l40209974
l4020996C:
	a2 = a13
	a0 = 0x402044F4
	v18 = a0
	a0 = 0x40209974
	call v18 (retsize: 0;)
	// succ:  l40209974
l40209974:
	a2 = 0
	Mem0[a12 + 0x00000034:word32] = a2
	// succ:  l40209978
l40209978:
	a3 = Mem0[a12 + 0x00000048:word32]
	branch a3 == 0x00000000 l4020998A
	// succ:  l4020997D l4020998A
l4020997D:
	a2 = a13
	a0 = 0x402044F4
	v19 = a0
	a0 = 0x40209985
	call v19 (retsize: 0;)
	a2 = 0
	Mem0[a12 + 0x00000048:word32] = a2
	// succ:  l4020998A
l4020998A:
	a0 = 0x40204650
	v20 = a0
	a0 = 0x40209990
	call v20 (retsize: 0;)
	a2 = 0
	Mem0[a12 + 0x0000000C:word16] = a2
	a2 = a14
	a0 = 0x402044E0
	v21 = a0
	a0 = 0x4020999D
	call v21 (retsize: 0;)
	a2 = a14
	a0 = 0x40204654
	v22 = a0
	a0 = 0x402099A5
	call v22 (retsize: 0;)
	a0 = 0x40204658
	v23 = a0
	a0 = 0x402099AB
	call v23 (retsize: 0;)
	// succ:  l402099AB
l402099AB:
	a2 = a15
	goto l402099B2
	// succ:  l402099B2
l402099B0:
	a2 = a3
	// succ:  l402099B2
l402099B2:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  _fclose_r_exit
_fclose_r_exit:


// fclose
// Return size: 0
void fclose()
fclose_entry:
	// succ:  l402099C4
l402099C4:
	a1 = fp
	a3 = a2
	a2 = 0x40203754
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x402099D4
	call fn403098D0 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  fclose_exit
fclose_exit:


// _wcrtomb_r
// Return size: 0
void _wcrtomb_r()
_wcrtomb_r_entry:
	// succ:  l402099DC
l402099DC:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000038:word32] = a12
	a12 = a2 | a2
	a2 = 0x4020465C
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x0000003C:word32] = a0
	a14 = a3
	a13 = a5
	a4 = a4 & 0x0000FFFF
	a15 = Mem0[a2 + 0x00000000:word32]
	branch a3 != 0x00000000 l40209A0C
	// succ:  l402099FD l40209A0C
l402099FD:
	a0 = 0x40209A00
	call fn40308B64 (retsize: 0;)
	a5 = a2
	a3 = a1
	a2 = a12
	a4 = a14
	goto l40209A1C
	// succ:  l40209A1C
l40209A0C:
	Mem0[a1 + 0x00000010:word32] = a4
	a0 = 0x40209A12
	call fn40308B64 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000010:word32]
	a5 = a2 | a2
	a3 = a14
	a2 = a12
	// succ:  l40209A1C
l40209A1C:
	a6 = a13
	a0 = 0x40209A21
	call a15 (retsize: 0;)
	branch a2 != -1 l40209A2D
	// succ:  l40209A24 l40209A2D
l40209A24:
	a3 = 0
	Mem0[a13:word32] = a3
	a3 = 0x0000008A
	Mem0[a12:word32] = a3
	// succ:  l40209A2D
l40209A2D:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  _wcrtomb_r_exit
_wcrtomb_r_exit:


// wcrtomb
// Return size: 0
void wcrtomb()
wcrtomb_entry:
	// succ:  l40209A3C
l40209A3C:
	a1 = fp
	a6 = a2
	a2 = 0x40203754
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	a5 = a4
	a4 = a3 & 0x0000FFFF
	a3 = a6
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40209A52
	call fn403099DC (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  wcrtomb_exit
wcrtomb_exit:


// __ascii_wctomb
// Return size: 0
void __ascii_wctomb()
__ascii_wctomb_entry:
	// succ:  l40209A5C
l40209A5C:
	a1 = fp
	a4 = a4 & 0x0000FFFF
	branch a3 == 0x00000000 l40209A78
	// succ:  l40209A61 l40209A78
l40209A61:
	a5 = 0x000000FF
	branch a5 >=u a4 l40209A70
	// succ:  l40209A67 l40209A70
l40209A67:
	a3 = 0x0000008A
	Mem0[a2:word32] = a3
	a2 = -1
	return
	// succ:  __ascii_wctomb_exit
l40209A70:
	Mem0[a3:byte] = a4
	a2 = 1
	return
	// succ:  __ascii_wctomb_exit
l40209A78:
	a2 = a3
	return
	// succ:  __ascii_wctomb_exit
__ascii_wctomb_exit:


// _wctomb_r
// Return size: 0
void _wctomb_r()
_wctomb_r_entry:
	// succ:  l40209A7C
l40209A7C:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000020:word32] = a14
	a14 = a2 | a2
	a2 = 0x4020465C
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a13
	a12 = Mem0[a2 + 0x00000000:word32]
	a13 = a5
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1:word32] = a3
	a15 = a4 & 0x0000FFFF
	a0 = 0x40209A9D
	call fn40308B64 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a5 = a2
	a4 = a15
	a2 = a14
	a6 = a13
	a0 = 0x40209AAA
	call a12 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  _wctomb_r_exit
_wctomb_r_exit:


// low_level_output
// Return size: 0
void low_level_output()
low_level_output_entry:
	// succ:  l40209AC0
l40209AC0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a3
	a13 = a2 | a2
	branch a3 == 0x00000000 l40209ADC
	// succ:  l40209AD0 l40209ADC
l40209AD0:
	a3 = a12
	a2 = a13
	a0 = 0x40209AD7
	call sdk_ieee80211_output_pbuf (retsize: 0;)
	a12 = Mem0[a12 + 0x00000000:word32]
	branch a12 != 0x00000000 l40209AD0
	// succ:  l40209ADC l40209AD0
l40209ADC:
	a2 = 0x40209ABC
	a0 = Mem0[a1 + 0x0000000C:word32]
	v8 = Mem0[a2 + 0x00000000:uint16]
	a3 = (uint32) v8
	a12 = Mem0[a1 + 0x00000008:word32]
	a3 = a3 + 1
	Mem0[a2:word16] = a3
	a13 = Mem0[a1 + 0x00000004:word32]
	a2 = 0
	a1 = a1 + 16
	return
	// succ:  low_level_output_exit
low_level_output_exit:


// ethernetif_init
// Return size: 0
void ethernetif_init()
ethernetif_init_entry:
	// succ:  l40209AFC
l40209AFC:
	a1 = fp
	a3 = 0x00000065
	Mem0[a2 + 0x00000030:byte] = a3
	a3 = 0x0000006E
	Mem0[a2 + 0x00000031:byte] = a3
	a3 = 0x40209AF4
	Mem0[a2 + 0x00000014:word32] = a3
	a3 = 0x40209AF8
	Mem0[a2 + 0x00000018:word32] = a3
	a3 = 6
	Mem0[a2 + 0x00000028:byte] = a3
	a3 = 0x000005DC
	Mem0[a2 + 0x00000026:word16] = a3
	a3 = 48
	Mem0[a2 + 0x0000002F:byte] = a3
	a2 = 0
	return
	// succ:  ethernetif_init_exit
ethernetif_init_exit:


// ethernetif_input
// Return size: 0
void ethernetif_input()
ethernetif_input_entry:
	// succ:  l40209B2C
l40209B2C:
	a1 = fp
	a1 = a1 - 16
	a4 = Mem0[a3 + 0x00000004:word32]
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a3
	v7 = Mem0[a4 + 0x0000000D:byte]
	a3 = (uint32) v7
	v8 = Mem0[a4 + 0x0000000C:byte]
	a4 = (uint32) v8
	a3 = a3 << 24
	a3 = a3 | a4
	a4 = a3 << 24
	a3 = a3 >>u 8
	a4 = a4 | a3
	a3 = a2
	a2 = 0x402045E8
	a4 = a4 & 0x0000FFFF
	branch a4 == a2 l40209B5D
	// succ:  l40209B57 l40209B5D
l40209B57:
	a2 = 0x40209B28
	branch a4 != a2 l40209B69
	// succ:  l40209B5D l40209B69
l40209B5D:
	a4 = Mem0[a3 + 0x00000010:word32]
	a2 = a12
	a0 = 0x40209B64
	call a4 (retsize: 0;)
	a2 = a2 & 0x000000FF
	branch a2 == 0x00000000 l40209B6E
	// succ:  l40209B69 l40209B6E
l40209B69:
	a2 = a12
	a0 = 0x40209B6E
	call pbuf_free (retsize: 0;)
	// succ:  l40209B6E
l40209B6E:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  ethernetif_input_exit
ethernetif_input_exit:


// tcpip_thread
// Return size: 0
void tcpip_thread()
tcpip_thread_entry:
	// succ:  l40209B88
l40209B88:
	a1 = fp
	a2 = 0x40209B78
	a1 = a1 - 32
	a3 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	branch a3 == 0x00000000 l40209BA5
	// succ:  l40209B9C l40209BA5
l40209B9C:
	a2 = 0x40209B7C
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x40209BA5
	call a3 (retsize: 0;)
	// succ:  l40209BA5
l40209BA5:
	a12 = 0x40209B80
	a13 = 0x40209B84
	a14 = 0x00000060
	// succ:  l40209BAE
l40209BAE:
	a2 = a12 | a12
	a3 = a1 | a1
	a0 = 0x40209BB7
	call sys_timeouts_mbox_fetch (retsize: 0;)
	a4 = Mem0[a1 + 0x00000000:word32]
	a2 = Mem0[a4 + 0x00000000:word32]
	branch a2 >=u 0x00000006 l40209BAE
	// succ:  l40209BBF l40209BAE
l40209BBF:
	a2 = a13 + a2 * 0x00000004
	a2 = Mem0[a2 + 0x00000000:word32]
	call a2 (retsize: 4;)
	return
	// succ:  tcpip_thread_exit
tcpip_thread_exit:


// tcpip_input
// Return size: 0
void tcpip_input()
tcpip_input_entry:
	// succ:  l40209C3C
l40209C3C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a13
	a13 = 0x40209B80
	Mem0[a1 + 0x00000010:word32] = a14
	a4 = Mem0[a13 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a15
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a12
	a15 = a2
	a14 = a3 | a3
	branch a4 == 0x00000000 l40209C8C
	// succ:  l40209C55 l40209C8C
l40209C55:
	a2 = 0x40209C38
	v11 = Mem0[a2 + 0x00000010:uint16]
	a2 = (uint32) v11
	a0 = 0x402034C4
	v12 = a0
	a0 = 0x40209C61
	call v12 (retsize: 0;)
	a12 = a2
	branch a2 == 0x00000000 l40209C92
	// succ:  l40209C65 l40209C92
l40209C65:
	a3 = a12
	a4 = 1
	a2 = a13
	Mem0[a12:word32] = a4
	Mem0[a12 + 0x00000008:word32] = a15
	Mem0[a12 + 0x0000000C:word32] = a14
	a0 = 0x40209C74
	call sys_mbox_trypost (retsize: 0;)
	a3 = a2 & 0x000000FF
	a2 = 0
	branch a3 == a2 l40209C95
	// succ:  l40209C7C l40209C95
l40209C7C:
	a2 = a12
	a0 = 0x402034CC
	v13 = a0
	a0 = 0x40209C84
	call v13 (retsize: 0;)
	a2 = 0x000000FF
	goto l40209C95
	// succ:  l40209C95
l40209C8C:
	a2 = 0x000000FA
	goto l40209C95
	// succ:  l40209C95
l40209C92:
	a2 = 0x000000FF
	// succ:  l40209C95
l40209C95:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  tcpip_input_exit
tcpip_input_exit:


// tcpip_init
// Return size: 0
void tcpip_init()
tcpip_init_entry:
	// succ:  l40209CAC
l40209CAC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	a12 = a3
	a13 = a2 | a2
	a0 = 0x40209CBE
	call lwip_init (retsize: 0;)
	a4 = 0x40209B78
	a2 = 0x40209B80
	Mem0[a4:word32] = a13
	a4 = 0x40209B7C
	a3 = 16
	Mem0[a4:word32] = a12
	a0 = 0x40209CD0
	call sys_mbox_new (retsize: 0;)
	a2 = 0x40209CA4
	a3 = 0x40209CA8
	a4 = 0
	a5 = 0x00000200
	a6 = 10
	a0 = 0x40209CE0
	call sys_thread_new (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  tcpip_init_exit
tcpip_init_exit:


// dhcp_create_msg
// Return size: 0
void dhcp_create_msg()
dhcp_create_msg_entry:
	// succ:  l40209CF0
l40209CF0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a14
	a14 = a2 | a2
	a2 = 0x00000000
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	a12 = a3
	a13 = a4
	a3 = 0x00000134
	a4 = a2
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x40209D0E
	call pbuf_alloc (retsize: 0;)
	Mem0[a12 + 0x00000010:word32] = a2
	branch a2 == 0x00000000 l40209EA8
	// succ:  l40209D13 l40209EA8
l40209D13:
	v10 = Mem0[a12 + 0x0000000D:byte]
	a3 = (uint32) v10
	branch a3 == 0x00000000 l40209D21
	// succ:  l40209D18 l40209D21
l40209D18:
	a3 = 0x40209CEC
	a4 = Mem0[a3 + 0x00000000:word32]
	goto l40209D2A
	// succ:  l40209D2A
l40209D21:
	a3 = 0x40209CEC
	a4 = Mem0[a3 + 0x00000000:word32]
	a4 = a4 + 1
	Mem0[a3:word32] = a4
	// succ:  l40209D2A
l40209D2A:
	a3 = Mem0[a2 + 0x00000004:word32]
	Mem0[a12:word32] = a4
	Mem0[a12 + 0x00000014:word32] = a3
	a2 = 1
	Mem0[a3:byte] = a2
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = 0
	Mem0[a3 + 0x00000001:byte] = a2
	a2 = Mem0[a12 + 0x00000014:word32]
	v11 = Mem0[a14 + 0x00000028:byte]
	a3 = (uint32) v11
	a5 = 0x40204510
	Mem0[a2 + 0x00000002:byte] = a3
	a3 = Mem0[a12 + 0x00000014:word32]
	a2 = 0
	Mem0[a3 + 0x00000003:byte] = a4
	a3 = Mem0[a12 + 0x00000000:word32]
	a4 = Mem0[a12 + 0x00000014:word32]
	a6 = a3 << 8
	a7 = a3 & a5
	a8 = a3 >>u 0x00000018 & 0x000000FF
	a8 = a8 | a6
	a7 = a7 << 24
	a6 = a3 >>u 8
	a5 = a6 & a5
	a3 = a8 | a7
	a3 = a3 | a5
	a10 = a2
	a6 = a13 - 4
	a5 = 1
	a9 = a3 >>u 0x00000008 & 0x000000FF
	a8 = a3 >>u 0x00000010 & 0x000000FF
	a7 = a3 >>u 0x00000018 & 0x000000FF
	branch a6 != 0x00000000 l40209D80
	// succ:  l40209D7D_1 l40209D80
l40209D7D_1:
	a10 = a5
	// succ:  l40209D80
l40209D80:
	Mem0[a4 + 0x00000008:byte] = a2
	Mem0[a4 + 0x00000009:byte] = a2
	Mem0[a4 + 0x0000000A:byte] = a2
	Mem0[a4 + 0x0000000B:byte] = a2
	Mem0[a4 + 0x0000000C:byte] = a2
	Mem0[a4 + 0x0000000D:byte] = a2
	Mem0[a4 + 0x0000000E:byte] = a2
	Mem0[a4 + 0x0000000F:byte] = a2
	Mem0[a4 + 0x00000004:byte] = a3
	Mem0[a4 + 0x00000005:byte] = a9
	Mem0[a4 + 0x00000006:byte] = a8
	Mem0[a4 + 0x00000007:byte] = a7
	a2 = a10 & 0x000000FF
	branch a2 != 0x00000000 l40209DC0
	// succ:  l40209DA9 l40209DC0
l40209DA9:
	a3 = a13 - 8
	branch a3 != 0x00000000 l40209DAF
	// succ:  l40209DAC_2 l40209DAF
l40209DAC_2:
	a2 = a5
	// succ:  l40209DAF
l40209DAF:
	branch a2 != 0x00000000 l40209DC0
	// succ:  l40209DB1 l40209DC0
l40209DB1:
	branch a13 != 3 l40209DD8
	// succ:  l40209DB4 l40209DD8
l40209DB4:
	v18 = Mem0[a12 + 0x0000000C:byte]
	a2 = (uint32) v18
	a2 = a2 - 4
	a2 = a2 & 0x000000FF
	branch a2 >=u 0x00000002 l40209DD8
	// succ:  l40209DC0 l40209DD8
l40209DC0:
	v19 = Mem0[a14 + 0x00000004:byte]
	a6 = (uint32) v19
	v20 = Mem0[a14 + 0x00000005:byte]
	a5 = (uint32) v20
	v21 = Mem0[a14 + 0x00000006:byte]
	a3 = (uint32) v21
	v22 = Mem0[a14 + 0x00000007:byte]
	a2 = (uint32) v22
	Mem0[a4 + 0x0000000C:byte] = a6
	Mem0[a4 + 0x0000000D:byte] = a5
	Mem0[a4 + 0x0000000E:byte] = a3
	Mem0[a4 + 0x0000000F:byte] = a2
	// succ:  l40209DD8
l40209DD8:
	a3 = 0
	Mem0[a4 + 0x00000010:byte] = a3
	Mem0[a4 + 0x00000011:byte] = a3
	Mem0[a4 + 0x00000012:byte] = a3
	Mem0[a4 + 0x00000013:byte] = a3
	Mem0[a4 + 0x00000014:byte] = a3
	Mem0[a4 + 0x00000015:byte] = a3
	Mem0[a4 + 0x00000016:byte] = a3
	Mem0[a4 + 0x00000017:byte] = a3
	Mem0[a4 + 0x00000018:byte] = a3
	Mem0[a4 + 0x00000019:byte] = a3
	Mem0[a4 + 0x0000001A:byte] = a3
	Mem0[a4 + 0x0000001B:byte] = a3
	a5 = a14
	v23 = Mem0[a14 + 0x00000028:byte]
	a7 = (uint32) v23
	a8 = a3 & 0x0000FFFF
	a4 = a4 + a3
	a6 = 0x00000000
	a3 = a3 + 1
	branch a8 >=u a7 l40209E14
	// succ:  l40209E11 l40209E14
l40209E11:
	v24 = Mem0[a5 + 0x00000029:byte]
	a6 = (uint32) v24
	// succ:  l40209E14
l40209E14:
	Mem0[a4 + 0x0000001C:byte] = a6
	a5 = a5 + 1
	branch a3 == 16 l40209E21
	// succ:  l40209E1C l40209E21
l40209E1C:
	a4 = Mem0[a12 + 0x00000014:word32]
	goto l40249E00
	// succ:  l40249E00
l40209E21:
	a2 = 0
	a4 = a2
	// succ:  l40209E25
l40209E25:
	a3 = Mem0[a12 + 0x00000014:word32]
	a3 = a3 + a2
	Mem0[a3 + 0x0000002C:byte] = a4
	a2 = a2 + 1
	branch a2 != 64 l40209E25
	// succ:  l40209E31 l40209E25
l40209E31:
	a2 = 0
	a4 = a2
	// succ:  l40209E35
l40209E35:
	a3 = Mem0[a12 + 0x00000014:word32]
	a3 = a3 + a2
	Mem0[a3 + 0x0000006C:byte] = a4
	a2 = a2 + 1
	branch a2 != 128 l40209E35
	// succ:  l40209E41 l40209E35
l40209E41:
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = 0xFFFFFF82
	a2 = 0x00000063
	Mem0[a3 + 0x000000ED:byte] = a4
	a4 = 83
	Mem0[a3 + 0x000000EC:byte] = a2
	Mem0[a3 + 0x000000EE:byte] = a4
	Mem0[a3 + 0x000000EF:byte] = a2
	a2 = 0
	Mem0[a12 + 0x00000018:word16] = a2
	a4 = 68
	a2 = 0
	a3 = a3 + a2
	Mem0[a3 + 0x000000F0:byte] = a2
	a2 = a2 + 1
	branch a2 == a4 l40209E70
	// succ:  l40209E6A l40209E70
l40209E6A:
	a3 = Mem0[a12 + 0x00000014:word32]
	goto l40249E60
	// succ:  l40249E60
l40209E70:
	v25 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v25
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 53
	Mem0[a2 + 0x000000F0:byte] = a3
	v26 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v26
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 1
	Mem0[a2 + 0x000000F0:byte] = a3
	v27 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v27
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	Mem0[a2 + 0x000000F0:byte] = a13
	a2 = 0
	goto l40209EAB
	// succ:  l40209EAB
l40209EA8:
	a2 = 0x000000FF
	// succ:  l40209EAB
l40209EAB:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  dhcp_create_msg_exit
l40249E00:
l40249E60:
dhcp_create_msg_exit:


// dhcp_rebind
// Return size: 0
void dhcp_rebind()
dhcp_rebind_entry:
	// succ:  l40209EBC
l40209EBC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = Mem0[a2 + 0x00000020:word32]
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a13
	a14 = a2
	v8 = Mem0[a12 + 0x0000000C:byte]
	a2 = (uint32) v8
	branch a2 == 4 l40209EE0
	// succ:  l40209ED1 l40209EE0
l40209ED1:
	a2 = 4
	Mem0[a12 + 0x0000000C:byte] = a2
	a2 = 0
	Mem0[a12 + 0x0000000D:byte] = a2
	a2 = 0
	Mem0[a12 + 0x0000001A:word16] = a2
	// succ:  l40209EE0
l40209EE0:
	a2 = a14
	a3 = a12
	a4 = 3
	a0 = 0x40209EE9
	call fn40309CF0 (retsize: 0;)
	a13 = a2 & 0x000000FF
	branch a13 != 0x00000000 l40209F91
	// succ:  l40209EEF l40209F91
l40209EEF:
	v11 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v11
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 57
	Mem0[a2 + 0x000000F0:byte] = a3
	v12 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v12
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 2
	Mem0[a2 + 0x000000F0:byte] = a3
	v13 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v13
	v14 = Mem0[a14 + 0x00000026:uint16]
	a2 = (uint32) v14
	a4 = Mem0[a12 + 0x00000014:word32]
	a5 = a3 + 1
	Mem0[a12 + 0x00000018:word16] = a5
	a3 = a4 + a3
	a4 = a2 >>u 8
	Mem0[a3 + 0x000000F0:byte] = a4
	v16 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v16
	a4 = Mem0[a12 + 0x00000014:word32]
	a5 = a3 + 1
	Mem0[a12 + 0x00000018:word16] = a5
	a3 = a4 + a3
	Mem0[a3 + 0x000000F0:byte] = a2
	v17 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v17
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = -1
	Mem0[a2 + 0x000000F0:byte] = a3
	v18 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v18
	a5 = 0x00000043
	branch a5 <u a3 l40209F65
	// succ:  l40209F4F l40209F65
l40209F4F:
	a6 = a13 | a13
	// succ:  l40209F52
l40209F52:
	a2 = Mem0[a12 + 0x00000014:word32]
	a4 = a3 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a3 = a2 + a3
	Mem0[a3 + 0x000000F0:byte] = a6
	v20 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v20
	branch a5 >=u a3 l40209F52
	// succ:  l40209F65 l40209F52
l40209F65:
	a2 = 0x000000F0
	a3 = a3 + a2
	a2 = Mem0[a12 + 0x00000010:word32]
	a3 = a3 & 0x0000FFFF
	a0 = 0x40209F72
	call pbuf_realloc (retsize: 0;)
	a2 = Mem0[a12 + 0x00000004:word32]
	a3 = Mem0[a12 + 0x00000010:word32]
	a4 = 0x40209EB8
	a5 = 67
	a6 = a14 | a14
	a0 = 0x40209F81
	call udp_sendto_if (retsize: 0;)
	a2 = Mem0[a12 + 0x00000010:word32]
	branch a2 == 0x00000000 l40209F8A
	// succ:  l40209F87 l40209F8A
l40209F87:
	a0 = 0x40209F8A
	call pbuf_free (retsize: 0;)
	// succ:  l40209F8A
l40209F8A:
	a2 = 0
	Mem0[a12 + 0x00000010:word32] = a2
	Mem0[a12 + 0x00000014:word32] = a2
	// succ:  l40209F91
l40209F91:
	v21 = Mem0[a12 + 0x0000000D:byte]
	a3 = (uint32) v21
	a4 = 9
	a3 = a3 + 1
	a3 = a3 & 0x000000FF
	Mem0[a12 + 0x0000000D:byte] = a3
	a2 = 20
	branch a4 <u a3 l40209FC4
	// succ:  l40209FA3 l40209FC4
l40209FA3:
	a2 = a3 << 27
	a2 = a2 - a3
	a3 = a3 + a2 * 0x00000004
	a3 = a3 << 29
	a3 = a3 & 0x0000FFFF
	a2 = 0x000001F3
	a2 = a3 + a2
	a3 = 0x000001F4
	a0 = 0x40202548
	v22 = a0
	a0 = 0x40209FC1
	call v22 (retsize: 0;)
	a2 = a2 & 0x0000FFFF
	// succ:  l40209FC4
l40209FC4:
	a0 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a12 + 0x0000001A:word16] = a2
	a14 = Mem0[a1 + 0x00000000:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  dhcp_rebind_exit
dhcp_rebind_exit:


// dhcp_discover
// Return size: 0
void dhcp_discover()
dhcp_discover_entry:
	// succ:  l40209FD8
l40209FD8:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = Mem0[a2 + 0x00000020:word32]
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a13
	a14 = a2
	v9 = Mem0[a12 + 0x0000000C:byte]
	a3 = (uint32) v9
	a2 = 0
	Mem0[a12 + 0x00000024:word32] = a2
	branch a3 == 6 l40209FFC
	// succ:  l40209FF1 l40209FFC
l40209FF1:
	a3 = 6
	Mem0[a12 + 0x0000000C:byte] = a3
	Mem0[a12 + 0x0000000D:byte] = a2
	Mem0[a12 + 0x0000001A:word16] = a2
	// succ:  l40209FFC
l40209FFC:
	a2 = a14
	a3 = a12
	a4 = 1
	a0 = 0x4020A005
	call fn40309CF0 (retsize: 0;)
	a13 = a2 & 0x000000FF
	branch a13 != 0x00000000 l4020A111
	// succ:  l4020A00B l4020A111
l4020A00B:
	v11 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v11
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 57
	Mem0[a2 + 0x000000F0:byte] = a3
	v12 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v12
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 2
	Mem0[a2 + 0x000000F0:byte] = a3
	v13 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v13
	v14 = Mem0[a14 + 0x00000026:uint16]
	a2 = (uint32) v14
	a4 = Mem0[a12 + 0x00000014:word32]
	a5 = a3 + 1
	Mem0[a12 + 0x00000018:word16] = a5
	a3 = a4 + a3
	a4 = a2 >>u 8
	Mem0[a3 + 0x000000F0:byte] = a4
	v16 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v16
	a4 = Mem0[a12 + 0x00000014:word32]
	a5 = a3 + 1
	Mem0[a12 + 0x00000018:word16] = a5
	a3 = a4 + a3
	Mem0[a3 + 0x000000F0:byte] = a2
	v17 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v17
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 55
	Mem0[a2 + 0x000000F0:byte] = a3
	v18 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v18
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 4
	Mem0[a2 + 0x000000F0:byte] = a3
	v19 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v19
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 1
	Mem0[a2 + 0x000000F0:byte] = a3
	v20 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v20
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 3
	Mem0[a2 + 0x000000F0:byte] = a3
	v21 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v21
	a4 = Mem0[a12 + 0x00000014:word32]
	a3 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a3
	a2 = a4 + a2
	a3 = 28
	Mem0[a2 + 0x000000F0:byte] = a3
	v22 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v22
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 6
	Mem0[a2 + 0x000000F0:byte] = a3
	v23 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v23
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = -1
	Mem0[a2 + 0x000000F0:byte] = a3
	v24 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v24
	a5 = 67
	branch a5 <u a3 l4020A0E5
	// succ:  l4020A0D0 l4020A0E5
l4020A0D0:
	a6 = a13
	// succ:  l4020A0D2
l4020A0D2:
	a2 = Mem0[a12 + 0x00000014:word32]
	a4 = a3 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a3 = a2 + a3
	Mem0[a3 + 0x000000F0:byte] = a6
	v26 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v26
	branch a5 >=u a3 l4020A0D2
	// succ:  l4020A0E5 l4020A0D2
l4020A0E5:
	a2 = 0x000000F0
	a3 = a3 + a2
	a2 = Mem0[a12 + 0x00000010:word32]
	a3 = a3 & 0x0000FFFF
	a0 = 0x4020A0F2
	call pbuf_realloc (retsize: 0;)
	a2 = Mem0[a12 + 0x00000004:word32]
	a3 = Mem0[a12 + 0x00000010:word32]
	a4 = 0x40209EB8
	a5 = 67
	a6 = a14 | a14
	a0 = 0x4020A101
	call udp_sendto_if (retsize: 0;)
	a2 = Mem0[a12 + 0x00000010:word32]
	branch a2 == 0x00000000 l4020A10A
	// succ:  l4020A107 l4020A10A
l4020A107:
	a0 = 0x4020A10A
	call pbuf_free (retsize: 0;)
	// succ:  l4020A10A
l4020A10A:
	a2 = 0
	Mem0[a12 + 0x00000010:word32] = a2
	Mem0[a12 + 0x00000014:word32] = a2
	// succ:  l4020A111
l4020A111:
	v27 = Mem0[a12 + 0x0000000D:byte]
	a3 = (uint32) v27
	a2 = 0x00000078
	a3 = a3 + 1
	a3 = a3 & 0x000000FF
	Mem0[a12 + 0x0000000D:byte] = a3
	branch a3 >=u 0x00000006 l4020A13C
	// succ:  l4020A122 l4020A13C
l4020A122:
	a2 = 0x000003E8
	SAR = 0x00000020 - a3
	a3 = a2 << SAR
	a2 = 0x000001F3
	a2 = a3 + a2
	a3 = 0x000001F4
	a0 = 0x40202548
	v29 = a0
	a0 = 0x4020A139
	call v29 (retsize: 0;)
	a2 = a2 & 0x0000FFFF
	// succ:  l4020A13C
l4020A13C:
	a0 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a12 + 0x0000001A:word16] = a2
	a14 = Mem0[a1 + 0x00000000:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  dhcp_discover_exit
dhcp_discover_exit:


// dhcp_check
// Return size: 0
void dhcp_check()
dhcp_check_entry:
	// succ:  l4020A150
l4020A150:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = Mem0[a2 + 0x00000020:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	v7 = Mem0[a12 + 0x0000000C:byte]
	a3 = (uint32) v7
	branch a3 == 8 l4020A170
	// succ:  l4020A15F l4020A170
l4020A15F:
	a3 = 8
	Mem0[a12 + 0x0000000C:byte] = a3
	a3 = 0x00000000
	Mem0[a12 + 0x0000000D:byte] = a3
	a3 = 0x00000000
	Mem0[a12 + 0x0000001A:word16] = a3
	// succ:  l4020A170
l4020A170:
	a3 = a12 + 36
	a4 = 0
	a0 = 0x4020A178
	call etharp_query (retsize: 0;)
	v9 = Mem0[a12 + 0x0000000D:byte]
	a2 = (uint32) v9
	a2 = a2 + 1
	Mem0[a12 + 0x0000000D:byte] = a2
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = 1
	Mem0[a12 + 0x0000001A:word16] = a2
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  dhcp_check_exit
dhcp_check_exit:


// dhcp_bind
// Return size: 0
void dhcp_bind()
dhcp_bind_entry:
	// succ:  l4020A198
l4020A198:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	a12 = Mem0[a2 + 0x00000020:word32]
	Mem0[a1 + 0x00000014:word32] = a13
	a13 = a2
	a2 = Mem0[a12 + 0x00000034:word32]
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a14
	branch a2 != -1 l4020A1B5
	// succ:  l4020A1AC l4020A1B5
l4020A1AC:
	v8 = Mem0[a12 + 0x0000001C:uint16]
	a14 = (uint32) v8
	goto l4020A1DD
	// succ:  l4020A1DD
l4020A1B5:
	a2 = a2 + 30
	a3 = 60
	a0 = 0x40204388
	v10 = a0
	a0 = 0x4020A1C0
	call v10 (retsize: 0;)
	a14 = 0x4020A190
	branch a14 >=u a2 l4020A1C9
	// succ:  l4020A1C6 l4020A1C9
l4020A1C6:
	goto l4020A2A6
	// succ:  l4020A2A6
l4020A1C9:
	a2 = a2 & 0x0000FFFF
	branch a2 == 0x00000000 l4020A1D6
	// succ:  l4020A1CE l4020A1D6
l4020A1CE:
	Mem0[a12 + 0x0000001C:word16] = a2
	a14 = a2
	goto l4020A1DD
	// succ:  l4020A1DD
l4020A1D6:
	a2 = 1
	Mem0[a12 + 0x0000001C:word16] = a2
	a14 = 1
	// succ:  l4020A1DD
l4020A1DD:
	a2 = Mem0[a12 + 0x00000038:word32]
	branch a2 == -1 l4020A20D
	// succ:  l4020A1E2 l4020A20D
l4020A1E2:
	a3 = 60
	a2 = a2 + 30
	a0 = 0x40204388
	v11 = a0
	a0 = 0x4020A1ED
	call v11 (retsize: 0;)
	a3 = 0x4020A190
	branch a3 >=u a2 l4020A1F6
	// succ:  l4020A1F3 l4020A1F6
l4020A1F3:
	goto l4020A2AE
	// succ:  l4020A2AE
l4020A1F6:
	a2 = a2 & 0x0000FFFF
	branch a2 == 0x00000000 l4020A203
	// succ:  l4020A1FB l4020A203
l4020A1FB:
	Mem0[a12 + 0x0000001E:word16] = a2
	a3 = a2
	goto l4020A2B3
	// succ:  l4020A2B3
l4020A203:
	a2 = 1
	Mem0[a12 + 0x0000001E:word16] = a2
	a3 = 1
	goto l4020A2B3
	// succ:  l4020A2B3
l4020A20D:
	v12 = Mem0[a12 + 0x0000001E:uint16]
	a3 = (uint32) v12
	branch a14 <u a3 l4020A21A
	// succ:  l4020A213 l4020A21A
l4020A213:
	branch a3 == 0x00000000 l4020A21A
	// succ:  l4020A215 l4020A21A
l4020A215:
	a2 = 0
	Mem0[a12 + 0x0000001C:word16] = a2
	// succ:  l4020A21A
l4020A21A:
	v13 = Mem0[a12 + 0x0000000E:byte]
	a2 = (uint32) v13
	branch a2 == 0x00000000 l4020A228
	// succ:  l4020A21F l4020A228
l4020A21F:
	a2 = Mem0[a12 + 0x00000028:word32]
	Mem0[a1 + 0x00000004:word32] = a2
	goto l4020A24D
	// succ:  l4020A24D
l4020A228:
	v16 = Mem0[a12 + 0x00000024:byte]
	a2 = (uint32) v16
	a3 = a2 << 8
	branch a3 < 0x00000000 l4020A239
	// succ:  l4020A231 l4020A239
l4020A231:
	a2 = 0x000000FF
	Mem0[a1 + 0x00000004:word32] = a2
	goto l4020A24D
	// succ:  l4020A24D
l4020A239:
	a3 = 0x000000BF
	branch a3 >=u a2 l4020A248
	// succ:  l4020A23F l4020A248
l4020A23F:
	a2 = 0x40203740
	Mem0[a1 + 0x00000004:word32] = a2
	goto l4020A24D
	// succ:  l4020A24D
l4020A248:
	a2 = 0x4020A190
	Mem0[a1 + 0x00000004:word32] = a2
	// succ:  l4020A24D
l4020A24D:
	a2 = Mem0[a12 + 0x0000002C:word32]
	Mem0[a1:word32] = a2
	branch a2 != 0x00000000 l4020A265
	// succ:  l4020A253 l4020A265
l4020A253:
	a3 = Mem0[a1 + 0x00000004:word32]
	a2 = Mem0[a12 + 0x00000024:word32]
	a2 = a3 & a2
	a3 = 0x4020A194
	a2 = a2 | a3
	Mem0[a1:word32] = a2
	// succ:  l4020A265
l4020A265:
	a14 = a12 + 36
	a2 = a13 | a13
	a3 = a14 | a14
	a0 = 0x4020A271
	call netif_set_ipaddr (retsize: 0;)
	a2 = a13 | a13
	a3 = a1 + 4
	a0 = 0x4020A279
	call netif_set_netmask (retsize: 0;)
	a4 = a1
	a2 = a14
	a3 = a1 + 4
	a0 = 0x4020A282
	call fn40304254 (retsize: 0;)
	a2 = a13
	a3 = a1
	a0 = 0x4020A289
	call netif_set_gw (retsize: 0;)
	a2 = a13
	a0 = 0x4020A28E
	call netif_set_up (retsize: 0;)
	v15 = Mem0[a12 + 0x0000000C:byte]
	a2 = (uint32) v15
	branch a2 == 10 l4020A2BC
	// succ:  l4020A294 l4020A2BC
l4020A294:
	a2 = 10
	Mem0[a12 + 0x0000000C:byte] = a2
	a2 = 0
	Mem0[a12 + 0x0000000D:byte] = a2
	a2 = 0
	Mem0[a12 + 0x0000001A:word16] = a2
	goto l4020A2BC
	// succ:  l4020A2BC
l4020A2A6:
	a2 = -1
	Mem0[a12 + 0x0000001C:word16] = a2
	goto l4024A1DD
	// succ:  l4024A1DD
l4020A2AE:
	a2 = -1
	Mem0[a12 + 0x0000001E:word16] = a2
	// succ:  l4020A2B3
l4020A2B3:
	branch a14 <u a3 l4020A2B9
	// succ:  l4020A2B6 l4020A2B9
l4020A2B6:
	goto l4024A215
	// succ:  l4024A215
l4020A2B9:
	goto l4024A21A
	// succ:  l4024A21A
l4020A2BC:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  dhcp_bind_exit
l4024A1DD:
l4024A215:
l4024A21A:
dhcp_bind_exit:


// dhcp_option_long$isra$3
// Return size: 0
void dhcp_option_long$isra$3()
dhcp_option_long$isra$3_entry:
	// succ:  l4020A2CC
l4020A2CC:
	a1 = fp
	v4 = Mem0[a3 + 0x00000000:uint16]
	a5 = (uint32) v4
	a6 = Mem0[a2 + 0x00000000:word32]
	a7 = a5 + 1
	Mem0[a3:word16] = a7
	a5 = a6 + a5
	a6 = a4 >>u 0x00000018 & 0x000000FF
	Mem0[a5 + 0x000000F0:byte] = a6
	v10 = Mem0[a3 + 0x00000000:uint16]
	a5 = (uint32) v10
	a6 = 0x40204514
	a7 = Mem0[a2 + 0x00000000:word32]
	a8 = a5 + 1
	a6 = a4 & a6
	Mem0[a3:word16] = a8
	a5 = a7 + a5
	a6 = a6 >>u 0x00000010 & 0x0000FFFF
	Mem0[a5 + 0x000000F0:byte] = a6
	v12 = Mem0[a3 + 0x00000000:uint16]
	a5 = (uint32) v12
	a6 = 0x40204510
	a7 = Mem0[a2 + 0x00000000:word32]
	a8 = a5 + 1
	a6 = a4 & a6
	Mem0[a3:word16] = a8
	a5 = a7 + a5
	a6 = a6 >>u 8
	Mem0[a5 + 0x000000F0:byte] = a6
	v13 = Mem0[a3 + 0x00000000:uint16]
	a5 = (uint32) v13
	a2 = Mem0[a2 + 0x00000000:word32]
	a6 = a5 + 1
	Mem0[a3:word16] = a6
	a5 = a2 + a5
	Mem0[a5 + 0x000000F0:byte] = a4
	return
	// succ:  dhcp_option_long$isra$3_exit
dhcp_option_long$isra$3_exit:


// dhcp_select
// Return size: 0
void dhcp_select()
dhcp_select_entry:
	// succ:  l4020A320
l4020A320:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = Mem0[a2 + 0x00000020:word32]
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a15
	a14 = a2
	v9 = Mem0[a12 + 0x0000000C:byte]
	a2 = (uint32) v9
	branch a2 == 1 l4020A346
	// succ:  l4020A337 l4020A346
l4020A337:
	a2 = 1
	Mem0[a12 + 0x0000000C:byte] = a2
	a2 = 0
	Mem0[a12 + 0x0000000D:byte] = a2
	a2 = 0
	Mem0[a12 + 0x0000001A:word16] = a2
	// succ:  l4020A346
l4020A346:
	a2 = a14
	a3 = a12
	a4 = 3
	a0 = 0x4020A34F
	call fn40309CF0 (retsize: 0;)
	a13 = a2 & 0x000000FF
	branch a13 != 0x00000000 l4020A4FD
	// succ:  l4020A355 l4020A4FD
l4020A355:
	v12 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v12
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 57
	Mem0[a2 + 0x000000F0:byte] = a3
	v13 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v13
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 2
	Mem0[a2 + 0x000000F0:byte] = a3
	v14 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v14
	v15 = Mem0[a14 + 0x00000026:uint16]
	a2 = (uint32) v15
	a4 = Mem0[a12 + 0x00000014:word32]
	a5 = a3 + 1
	Mem0[a12 + 0x00000018:word16] = a5
	a3 = a4 + a3
	a4 = a2 >>u 8
	Mem0[a3 + 0x000000F0:byte] = a4
	v17 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v17
	a4 = Mem0[a12 + 0x00000014:word32]
	a5 = a3 + 1
	Mem0[a12 + 0x00000018:word16] = a5
	a3 = a4 + a3
	Mem0[a3 + 0x000000F0:byte] = a2
	v18 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v18
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 50
	Mem0[a2 + 0x000000F0:byte] = a3
	v19 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v19
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a5 = 4
	a2 = a3 + a2
	Mem0[a2 + 0x000000F0:byte] = a5
	a2 = Mem0[a12 + 0x00000024:word32]
	a15 = 0x40204510
	a4 = a2 << 8
	a8 = a2 >>u 0x00000018 & 0x000000FF
	a3 = a2 & a15
	a8 = a8 | a4
	a3 = a3 << 24
	a2 = a2 >>u 8
	a7 = a12 + 20
	a6 = a12 + 24
	a8 = a8 | a3
	a4 = a2 & a15
	a3 = a6
	a2 = a7
	a4 = a8 | a4
	Mem0[a1 + 0x00000008:word32] = a5
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1:word32] = a7
	a0 = 0x4020A3F0
	call fn4030A2CC (retsize: 0;)
	v23 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v23
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 54
	Mem0[a2 + 0x000000F0:byte] = a3
	v24 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v24
	a3 = Mem0[a12 + 0x00000014:word32]
	a5 = Mem0[a1 + 0x00000008:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	Mem0[a2 + 0x000000F0:byte] = a5
	a4 = Mem0[a12 + 0x00000020:word32]
	a7 = Mem0[a1 + 0x00000000:word32]
	a8 = a4 >>u 0x00000018 & 0x000000FF
	a2 = a7
	a3 = a4 & a15
	a7 = a4 << 8
	a7 = a8 | a7
	a3 = a3 << 24
	a6 = Mem0[a1 + 0x00000004:word32]
	a4 = a4 >>u 8
	a7 = a7 | a3
	a4 = a4 & a15
	a3 = a6
	a4 = a7 | a4
	Mem0[a1 + 0x00000008:word32] = a5
	a0 = 0x4020A43C
	call fn4030A2CC (retsize: 0;)
	v25 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v25
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 55
	Mem0[a2 + 0x000000F0:byte] = a3
	v26 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v26
	a3 = Mem0[a12 + 0x00000014:word32]
	a5 = Mem0[a1 + 0x00000008:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	Mem0[a2 + 0x000000F0:byte] = a5
	v27 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v27
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 1
	Mem0[a2 + 0x000000F0:byte] = a3
	v28 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v28
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 3
	Mem0[a2 + 0x000000F0:byte] = a3
	v29 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v29
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 28
	Mem0[a2 + 0x000000F0:byte] = a3
	v30 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v30
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 6
	Mem0[a2 + 0x000000F0:byte] = a3
	v31 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v31
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = -1
	Mem0[a2 + 0x000000F0:byte] = a3
	v32 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v32
	a5 = 67
	branch a5 <u a3 l4020A4D1
	// succ:  l4020A4BB l4020A4D1
l4020A4BB:
	a6 = a13 | a13
	// succ:  l4020A4BE
l4020A4BE:
	a2 = Mem0[a12 + 0x00000014:word32]
	a4 = a3 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a3 = a2 + a3
	Mem0[a3 + 0x000000F0:byte] = a6
	v33 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v33
	branch a5 >=u a3 l4020A4BE
	// succ:  l4020A4D1 l4020A4BE
l4020A4D1:
	a2 = 0x000000F0
	a3 = a3 + a2
	a2 = Mem0[a12 + 0x00000010:word32]
	a3 = a3 & 0x0000FFFF
	a0 = 0x4020A4DE
	call pbuf_realloc (retsize: 0;)
	a2 = Mem0[a12 + 0x00000004:word32]
	a3 = Mem0[a12 + 0x00000010:word32]
	a4 = 0x40209EB8
	a5 = 67
	a6 = a14 | a14
	a0 = 0x4020A4ED
	call udp_sendto_if (retsize: 0;)
	a2 = Mem0[a12 + 0x00000010:word32]
	branch a2 == 0x00000000 l4020A4F6
	// succ:  l4020A4F3 l4020A4F6
l4020A4F3:
	a0 = 0x4020A4F6
	call pbuf_free (retsize: 0;)
	// succ:  l4020A4F6
l4020A4F6:
	a2 = 0
	Mem0[a12 + 0x00000010:word32] = a2
	Mem0[a12 + 0x00000014:word32] = a2
	// succ:  l4020A4FD
l4020A4FD:
	v34 = Mem0[a12 + 0x0000000D:byte]
	a3 = (uint32) v34
	a2 = 0x00000078
	a3 = a3 + 1
	a3 = a3 & 0x000000FF
	Mem0[a12 + 0x0000000D:byte] = a3
	branch a3 >=u 0x00000006 l4020A528
	// succ:  l4020A50E l4020A528
l4020A50E:
	a2 = 0x000003E8
	SAR = 0x00000020 - a3
	a3 = a2 << SAR
	a2 = 0x000001F3
	a2 = a3 + a2
	a3 = 0x000001F4
	a0 = 0x40202548
	v36 = a0
	a0 = 0x4020A525
	call v36 (retsize: 0;)
	a2 = a2 & 0x0000FFFF
	// succ:  l4020A528
l4020A528:
	a0 = Mem0[a1 + 0x0000002C:word32]
	Mem0[a12 + 0x0000001A:word16] = a2
	a14 = Mem0[a1 + 0x00000020:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  dhcp_select_exit
dhcp_select_exit:


// dhcp_reboot
// Return size: 0
void dhcp_reboot()
dhcp_reboot_entry:
	// succ:  l4020A53C
l4020A53C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = Mem0[a2 + 0x00000020:word32]
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a13
	a14 = a2
	v8 = Mem0[a12 + 0x0000000C:byte]
	a2 = (uint32) v8
	branch a2 == 3 l4020A560
	// succ:  l4020A551 l4020A560
l4020A551:
	a2 = 3
	Mem0[a12 + 0x0000000C:byte] = a2
	a2 = 0
	Mem0[a12 + 0x0000000D:byte] = a2
	a2 = 0
	Mem0[a12 + 0x0000001A:word16] = a2
	// succ:  l4020A560
l4020A560:
	a2 = a14
	a3 = a12
	a4 = 3
	a0 = 0x4020A569
	call fn40309CF0 (retsize: 0;)
	a13 = a2 & 0x000000FF
	branch a13 != 0x00000000 l4020A659
	// succ:  l4020A56F l4020A659
l4020A56F:
	v11 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v11
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 57
	Mem0[a2 + 0x000000F0:byte] = a3
	v12 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v12
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a3 = a3 + a2
	a2 = 2
	Mem0[a3 + 0x000000F0:byte] = a2
	v13 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v13
	a4 = Mem0[a12 + 0x00000014:word32]
	a5 = a3 + 1
	Mem0[a12 + 0x00000018:word16] = a5
	a3 = a4 + a3
	Mem0[a3 + 0x000000F0:byte] = a2
	v15 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v15
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 64
	Mem0[a2 + 0x000000F0:byte] = a3
	v16 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v16
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 50
	Mem0[a2 + 0x000000F0:byte] = a3
	v17 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v17
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 4
	Mem0[a2 + 0x000000F0:byte] = a3
	a2 = Mem0[a12 + 0x00000024:word32]
	a3 = 0x40204510
	a6 = a2 >>u 0x00000018 & 0x000000FF
	a4 = a2 & a3
	a5 = a2 << 8
	a5 = a6 | a5
	a4 = a4 << 24
	a2 = a2 >>u 8
	a5 = a5 | a4
	a4 = a2 & a3
	a4 = a5 | a4
	a2 = a12 + 20
	a3 = a12 + 24
	a0 = 0x4020A5FC
	call fn4030A2CC (retsize: 0;)
	v19 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v19
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 0xFFFFFFFF
	Mem0[a2 + 0x000000F0:byte] = a3
	v20 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v20
	a5 = 0x00000043
	branch a5 <u a3 l4020A62D
	// succ:  l4020A617 l4020A62D
l4020A617:
	a6 = a13 | a13
	// succ:  l4020A61A
l4020A61A:
	a2 = Mem0[a12 + 0x00000014:word32]
	a4 = a3 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a3 = a2 + a3
	Mem0[a3 + 0x000000F0:byte] = a6
	v21 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v21
	branch a5 >=u a3 l4020A61A
	// succ:  l4020A62D l4020A61A
l4020A62D:
	a2 = 0x000000F0
	a3 = a3 + a2
	a2 = Mem0[a12 + 0x00000010:word32]
	a3 = a3 & 0x0000FFFF
	a0 = 0x4020A63A
	call pbuf_realloc (retsize: 0;)
	a2 = Mem0[a12 + 0x00000004:word32]
	a3 = Mem0[a12 + 0x00000010:word32]
	a4 = 0x40209EB8
	a5 = 67
	a6 = a14 | a14
	a0 = 0x4020A649
	call udp_sendto_if (retsize: 0;)
	a2 = Mem0[a12 + 0x00000010:word32]
	branch a2 == 0x00000000 l4020A652
	// succ:  l4020A64F l4020A652
l4020A64F:
	a0 = 0x4020A652
	call pbuf_free (retsize: 0;)
	// succ:  l4020A652
l4020A652:
	a2 = 0
	Mem0[a12 + 0x00000010:word32] = a2
	Mem0[a12 + 0x00000014:word32] = a2
	// succ:  l4020A659
l4020A659:
	v22 = Mem0[a12 + 0x0000000D:byte]
	a3 = (uint32) v22
	a4 = 9
	a3 = a3 + 1
	a3 = a3 & 0x000000FF
	Mem0[a12 + 0x0000000D:byte] = a3
	a2 = 20
	branch a4 <u a3 l4020A68C
	// succ:  l4020A66B l4020A68C
l4020A66B:
	a2 = a3 << 27
	a2 = a2 - a3
	a3 = a3 + a2 * 0x00000004
	a3 = a3 << 29
	a3 = a3 & 0x0000FFFF
	a2 = 0x000001F3
	a2 = a3 + a2
	a3 = 0x000001F4
	a0 = 0x40202548
	v23 = a0
	a0 = 0x4020A689
	call v23 (retsize: 0;)
	a2 = a2 & 0x0000FFFF
	// succ:  l4020A68C
l4020A68C:
	a0 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a12 + 0x0000001A:word16] = a2
	a14 = Mem0[a1 + 0x00000000:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  dhcp_reboot_exit
dhcp_reboot_exit:


// dhcp_recv
// Return size: 0
void dhcp_recv()
dhcp_recv_entry:
	// succ:  l4020A6B0
l4020A6B0:
	a1 = fp
	a6 = Mem0[a2 + 0x00000020:word32]
	a1 = a1 - 96
	v6 = Mem0[a4 + 0x0000000A:uint16]
	a9 = (uint32) v6
	Mem0[a1 + 0x00000024:word32] = a2
	Mem0[a1 + 0x0000005C:word32] = a0
	Mem0[a1 + 0x00000058:word32] = a12
	Mem0[a1 + 0x00000054:word32] = a13
	Mem0[a1 + 0x00000050:word32] = a14
	Mem0[a1 + 0x0000004C:word32] = a15
	Mem0[a1 + 0x0000001C:word32] = a4
	Mem0[a1 + 0x00000028:word32] = a6
	a2 = 43
	a8 = Mem0[a4 + 0x00000004:word32]
	branch a2 <u a9 l4020A6D7
	// succ:  l4020A6D4 l4020A6D7
l4020A6D4:
	goto l4020AB99
	// succ:  l4020AB99
l4020A6D7:
	v14 = Mem0[a8 + 0x00000000:byte]
	a2 = (uint32) v14
	branch a2 == 2 l4020A6E0
	// succ:  l4020A6DD l4020A6E0
l4020A6DD:
	goto l4020AB99
	// succ:  l4020AB99
l4020A6E0:
	a7 = Mem0[a1 + 0x00000024:word32]
	v16 = Mem0[a7 + 0x00000028:byte]
	a2 = (uint32) v16
	branch a2 == 0x00000000 l4020A714
	// succ:  l4020A6E7 l4020A714
l4020A6E7:
	v17 = Mem0[a7 + 0x00000029:byte]
	a4 = (uint32) v17
	v19 = Mem0[a8 + 0x0000001C:byte]
	a3 = (uint32) v19
	branch a4 == a3 l4020A6F3
	// succ:  l4020A6F0 l4020A6F3
l4020A6F0:
	goto l4020AB99
	// succ:  l4020AB99
l4020A6F3:
	a2 = a2 - 1
	a3 = Mem0[a1 + 0x00000024:word32]
	a7 = a2 & 0x000000FF
	a4 = a8
	a7 = a3 + a7
	goto l4020A711
	// succ:  l4020A711
l4020A701:
	v30 = Mem0[a3 + 0x0000002A:byte]
	a5 = (uint32) v30
	v31 = Mem0[a4 + 0x0000001D:byte]
	a2 = (uint32) v31
	a3 = a3 + 1
	a4 = a4 + 1
	branch a5 == a2 l4020A711
	// succ:  l4020A70E l4020A711
l4020A70E:
	goto l4020AB99
	// succ:  l4020AB99
l4020A711:
	branch a3 != a7 l4020A701
	// succ:  l4020A714 l4020A701
l4020A714:
	v21 = Mem0[a8 + 0x00000005:byte]
	a5 = (uint32) v21
	v22 = Mem0[a8 + 0x00000004:byte]
	a2 = (uint32) v22
	v23 = Mem0[a8 + 0x00000006:byte]
	a4 = (uint32) v23
	a5 = a5 << 24
	v24 = Mem0[a8 + 0x00000007:byte]
	a3 = (uint32) v24
	a2 = a5 | a2
	a4 = a4 << 16
	a2 = a4 | a2
	a3 = a3 << 8
	a8 = 0x40204510
	a2 = a3 | a2
	a5 = a2 >>u 0x00000018 & 0x000000FF
	a4 = a2 << 8
	a3 = a2 & a8
	a6 = Mem0[a1 + 0x00000028:word32]
	a3 = a3 << 24
	a2 = a2 >>u 8
	a4 = a5 | a4
	a4 = a4 | a3
	a3 = a2 & a8
	a2 = Mem0[a6 + 0x00000000:word32]
	a3 = a4 | a3
	branch a3 == a2 l4020A75A
	v26 = Mem0[a8 + 0x00000005:byte]
	a5 = (uint32) v26
	v27 = Mem0[a8 + 0x00000004:byte]
	a2 = (uint32) v27
	v28 = Mem0[a8 + 0x00000006:byte]
	a4 = (uint32) v28
	a5 = a5 << 24
	v29 = Mem0[a8 + 0x00000007:byte]
	a3 = (uint32) v29
	a2 = a5 | a2
	a4 = a4 << 16
	a2 = a4 | a2
	a3 = a3 << 8
	a8 = 0x40204510
	a2 = a3 | a2
	a5 = a2 >>u 0x00000018 & 0x000000FF
	a4 = a2 << 8
	a3 = a2 & a8
	a6 = Mem0[a1 + 0x00000028:word32]
	a3 = a3 << 24
	a2 = a2 >>u 8
	a4 = a5 | a4
	a4 = a4 | a3
	a3 = a2 & a8
	a2 = Mem0[a6 + 0x00000000:word32]
	a3 = a4 | a3
	branch a3 == a2 l4020A75A
	// succ:  l4020A757 l4020A75A
l4020A757:
	goto l4020AB99
	// succ:  l4020AB99
l4020A75A:
	a7 = 0x4020A6A0
	a2 = 0
	a8 = Mem0[a1 + 0x0000001C:word32]
	Mem0[a7:word32] = a2
	Mem0[a7 + 0x00000004:word32] = a2
	Mem0[a7 + 0x00000008:word16] = a2
	a3 = Mem0[a8 + 0x00000004:word32]
	Mem0[a1 + 0x0000002C:word32] = a2
	Mem0[a6 + 0x00000008:word32] = a3
	v25 = Mem0[a8 + 0x00000008:uint16]
	a6 = (uint32) v25
	a2 = a9
	Mem0[a1 + 0x00000010:word32] = a6
	a13 = 0x000000F0
	goto l4020A78C
	// succ:  l4020A78C
l4020A77C:
	a7 = 0
	a8 = 0x0000006C
	Mem0[a1 + 0x0000002C:word32] = a7
	Mem0[a1 + 0x00000010:word32] = a8
	a13 = 44
	a6 = Mem0[a1 + 0x0000001C:word32]
	v47 = Mem0[a6 + 0x0000000A:uint16]
	a2 = (uint32) v47
	// succ:  l4020A78C
l4020A78C:
	a14 = Mem0[a1 + 0x0000001C:word32]
	a3 = Mem0[a1 + 0x00000010:word32]
	goto l4020A7A8
	// succ:  l4020A7A8
l4020A794:
	a14 = Mem0[a14 + 0x00000000:word32]
	a13 = a13 - a2
	a3 = a3 - a2
	a13 = a13 & 0x0000FFFF
	a3 = a3 & 0x0000FFFF
	branch a14 == 0x00000000 l4020AB99
	// succ:  l4020A7A5 l4020AB99
l4020A7A5:
	v32 = Mem0[a14 + 0x0000000A:uint16]
	a2 = (uint32) v32
	// succ:  l4020A7A8
l4020A7A8:
	branch a13 >=u a2 l4020A794
	// succ:  l4020A7AB l4020A794
l4020A7AB:
	a7 = Mem0[a14 + 0x00000004:word32]
	Mem0[a1 + 0x00000010:word32] = a3
	Mem0[a1 + 0x00000018:word32] = a7
	goto l4020A946
	// succ:  l4020A946
l4020A934:
	a7 = 0x4020A6A0
	v34 = Mem0[a7 + 0x00000000:byte]
	a2 = (uint32) v34
	branch a2 != 0x00000000 l4020A960
	// succ:  l4020A93C l4020A960
l4020A93C:
	goto l4020ABFC
	// succ:  l4020ABFC
l4020A946:
	a6 = Mem0[a1 + 0x00000018:word32]
	a7 = 0x000000FF
	a4 = a6 + a13
	v33 = Mem0[a4 + 0x00000000:byte]
	a2 = (uint32) v33
	branch a2 == a7 l4020A934
	// succ:  l4020A953 l4020A934
l4020A953:
	a8 = Mem0[a1 + 0x00000010:word32]
	branch a13 >=u a8 l4020A95B
	// succ:  l4020A958 l4020A95B
l4020A958:
	goto l4024A7B4
	// succ:  l4024A7B4
l4020A95B:
	goto l4024A934
	// succ:  l4024A934
l4020A960:
	a2 = 0x4020A6A4
	a4 = 0x4020A6A0
	a3 = 0
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a4:byte] = a3
	branch a2 != 1 l4020A973
	// succ:  l4020A970 l4020A973
l4020A970:
	goto l4020AC08
	// succ:  l4020AC08
l4020A973:
	branch a2 != 2 l4020A979
	// succ:  l4020A976 l4020A979
l4020A976:
	goto l4024A77C
	// succ:  l4024A77C
l4020A979:
	branch a2 == 3 l4020A97F
	// succ:  l4020A97C l4020A97F
l4020A97C:
	goto l4020ABFC
	// succ:  l4020ABFC
l4020A97F:
	goto l4020AC04
	// succ:  l4020AC04
l4020A982:
	a12 = 0x4020A6A4
	v36 = Mem0[a12 + 0x00000004:byte]
	a2 = (uint32) v36
	branch a2 == 5 l4020A98E
	// succ:  l4020A98B l4020A98E
l4020A98B:
	goto l4020AAD4
	// succ:  l4020AAD4
l4020A98E:
	a6 = Mem0[a1 + 0x00000028:word32]
	v37 = Mem0[a6 + 0x0000000C:byte]
	a2 = (uint32) v37
	branch a2 == 1 l4020A999
	// succ:  l4020A996 l4020A999
l4020A996:
	goto l4020AABD
	// succ:  l4020AABD
l4020A999:
	a7 = Mem0[a1 + 0x00000024:word32]
	a8 = 0x4020A6A0
	a2 = Mem0[a7 + 0x00000020:word32]
	a6 = Mem0[a1 + 0x0000002C:word32]
	v46 = Mem0[a8 + 0x00000003:byte]
	a3 = (uint32) v46
	Mem0[a2 + 0x00000028:word32] = a6
	Mem0[a2 + 0x0000002C:word32] = a6
	branch a3 == 0x00000000 l4020A9B0
	// succ:  l4020A9AB l4020A9B0
l4020A9AB:
	a3 = Mem0[a12 + 0x0000000C:word32]
	Mem0[a2 + 0x00000030:word32] = a3
	// succ:  l4020A9B0
l4020A9B0:
	a7 = 0x4020A6A0
	v48 = Mem0[a7 + 0x00000004:byte]
	a3 = (uint32) v48
	branch a3 == 0x00000000 l4020A9C0
	// succ:  l4020A9B8 l4020A9C0
l4020A9B8:
	a3 = Mem0[a12 + 0x00000010:word32]
	Mem0[a2 + 0x00000034:word32] = a3
	goto l4020A9C7
	// succ:  l4020A9C7
l4020A9C0:
	a3 = Mem0[a2 + 0x00000030:word32]
	a3 = a3 >>u 1
	Mem0[a2 + 0x00000034:word32] = a3
	// succ:  l4020A9C7
l4020A9C7:
	a8 = 0x4020A6A0
	v49 = Mem0[a8 + 0x00000005:byte]
	a3 = (uint32) v49
	branch a3 == 0x00000000 l4020A9D6
	// succ:  l4020A9CF l4020A9D6
l4020A9CF:
	a3 = Mem0[a12 + 0x00000014:word32]
	Mem0[a2 + 0x00000038:word32] = a3
	goto l4020A9DA
	// succ:  l4020A9DA
l4020A9D6:
	a3 = Mem0[a2 + 0x00000030:word32]
	Mem0[a2 + 0x00000038:word32] = a3
	// succ:  l4020A9DA
l4020A9DA:
	a3 = Mem0[a2 + 0x00000008:word32]
	a5 = 0x4020A6A0
	v50 = Mem0[a3 + 0x00000011:byte]
	a8 = (uint32) v50
	v51 = Mem0[a3 + 0x00000010:byte]
	a7 = (uint32) v51
	v52 = Mem0[a3 + 0x00000012:byte]
	a6 = (uint32) v52
	v53 = Mem0[a5 + 0x00000006:byte]
	a4 = (uint32) v53
	v54 = Mem0[a3 + 0x00000013:byte]
	a5 = (uint32) v54
	a3 = a8 << 24
	a3 = a3 | a7
	a6 = a6 << 16
	a3 = a6 | a3
	a5 = a5 << 8
	a3 = a5 | a3
	Mem0[a2 + 0x00000024:word32] = a3
	branch a4 == 0x00000000 l4020AA30
	// succ:  l4020AA04 l4020AA30
l4020AA04:
	a3 = Mem0[a12 + 0x00000018:word32]
	a7 = 0x40204510
	a6 = a3 >>u 0x00000018 & 0x000000FF
	a5 = a3 << 8
	a4 = a3 & a7
	a5 = a6 | a5
	a4 = a4 << 24
	a3 = a3 >>u 8
	a4 = a5 | a4
	a3 = a3 & a7
	a3 = a4 | a3
	Mem0[a2 + 0x00000028:word32] = a3
	a3 = 1
	Mem0[a2 + 0x0000000E:byte] = a3
	goto l4020AA33
	// succ:  l4020AA33
l4020AA30:
	Mem0[a2 + 0x0000000E:byte] = a4
	// succ:  l4020AA33
l4020AA33:
	a8 = 0x4020A6A0
	v55 = Mem0[a8 + 0x00000007:byte]
	a3 = (uint32) v55
	branch a3 == 0x00000000 l4020AA60
	// succ:  l4020AA3C l4020AA60
l4020AA3C:
	a3 = Mem0[a12 + 0x0000001C:word32]
	a7 = 0x40204510
	a6 = a3 >>u 0x00000018 & 0x000000FF
	a5 = a3 << 8
	a4 = a3 & a7
	a5 = a6 | a5
	a4 = a4 << 24
	a3 = a3 >>u 8
	a4 = a5 | a4
	a3 = a3 & a7
	a3 = a4 | a3
	Mem0[a2 + 0x0000002C:word32] = a3
	// succ:  l4020AA60
l4020AA60:
	a8 = 0x4020A6A0
	a13 = 0
	v56 = Mem0[a8 + 0x00000008:byte]
	a4 = (uint32) v56
	a2 = a13
	a3 = 8
	branch a4 != a13 l4020AA79
	// succ:  l4020AA6F l4020AA79
l4020AA6F:
	a2 = Mem0[a1 + 0x00000024:word32]
	a0 = 0x4020AA74
	call fn4030A150 (retsize: 0;)
	goto l4020AB99
	// succ:  l4020AB99
l4020AA79:
	a3 = a12 + a3 * 0x00000004
	a3 = Mem0[a3 + 0x00000000:word32]
	a7 = 0x40204510
	a6 = a3 >>u 0x00000018 & 0x000000FF
	a4 = a3 & a7
	a5 = a3 << 8
	a5 = a6 | a5
	a4 = a4 << 24
	a3 = a3 >>u 8
	a3 = a3 & a7
	a4 = a5 | a4
	a4 = a4 | a3
	a3 = a1 | a1
	Mem0[a1:word32] = a4
	a13 = a13 + 1
	a0 = 0x4020AAA8
	call dns_setserver (retsize: 0;)
	a13 = a13 & 0x000000FF
	a8 = 0x4020A6A0
	a3 = a13 + 8
	a2 = a8 + a3
	v57 = Mem0[a2 + 0x00000000:byte]
	a4 = (uint32) v57
	a2 = a13
	branch a4 != 0x00000000 l4020AA79
	// succ:  l4020AABA l4020AA79
l4020AABA:
	goto l4024AA6F
	// succ:  l4024AA6F
l4020AABD:
	a2 = a2 - 3
	a2 = a2 & 0x000000FF
	branch a2 <u 0x00000003 l4020AAC9
	// succ:  l4020AAC6 l4020AAC9
l4020AAC6:
	goto l4020AB99
	// succ:  l4020AB99
l4020AAC9:
	a2 = Mem0[a1 + 0x00000024:word32]
	a0 = 0x4020AACE
	call fn4030A198 (retsize: 0;)
	goto l4020AB99
	// succ:  l4020AB99
l4020AAD4:
	branch a2 != 6 l4020AB31
	// succ:  l4020AAD7 l4020AB31
l4020AAD7:
	a6 = Mem0[a1 + 0x00000028:word32]
	v38 = Mem0[a6 + 0x0000000C:byte]
	a2 = (uint32) v38
	a3 = a2 - 3
	a3 = a3 & 0x000000FF
	branch a3 <u 0x00000003 l4020AAF1
	// succ:  l4020AAE5 l4020AAF1
l4020AAE5:
	a7 = Mem0[a1 + 0x0000002C:word32]
	a3 = a2 - 1
	a2 = 1
	branch a3 == 0x00000000 l4020AAEE
	// succ:  l4020AAEB_1 l4020AAEE
l4020AAEB_1:
	a2 = a7
	// succ:  l4020AAEE
l4020AAEE:
	branch a2 == 0x00000000 l4020AB99
	// succ:  l4020AAF1 l4020AB99
l4020AAF1:
	a2 = Mem0[a1 + 0x00000024:word32]
	a13 = Mem0[a2 + 0x00000020:word32]
	a0 = 0x4020AAF9
	call netif_set_down (retsize: 0;)
	a12 = 0x4020A6AC
	a2 = Mem0[a1 + 0x00000024:word32]
	a3 = a12 | a12
	a0 = 0x4020AB05
	call netif_set_ipaddr (retsize: 0;)
	a2 = Mem0[a1 + 0x00000024:word32]
	a3 = a12
	a0 = 0x4020AB0C
	call netif_set_gw (retsize: 0;)
	a2 = Mem0[a1 + 0x00000024:word32]
	a3 = a12
	a0 = 0x4020AB13
	call netif_set_netmask (retsize: 0;)
	v39 = Mem0[a13 + 0x0000000C:byte]
	a2 = (uint32) v39
	branch a2 == 12 l4020AB28
	// succ:  l4020AB19 l4020AB28
l4020AB19:
	a2 = 12
	Mem0[a13 + 0x0000000C:byte] = a2
	a2 = 0
	Mem0[a13 + 0x0000000D:byte] = a2
	a2 = 0
	Mem0[a13 + 0x0000001A:word16] = a2
	// succ:  l4020AB28
l4020AB28:
	a2 = Mem0[a1 + 0x00000024:word32]
	a0 = 0x4020AB2D
	call fn40309FD8 (retsize: 0;)
	goto l4020AB99
	// succ:  l4020AB99
l4020AB31:
	branch a2 != 2 l4020AB99
	// succ:  l4020AB34 l4020AB99
l4020AB34:
	a8 = Mem0[a1 + 0x00000028:word32]
	v40 = Mem0[a8 + 0x0000000C:byte]
	a2 = (uint32) v40
	branch a2 != 6 l4020AB99
	// succ:  l4020AB3D l4020AB99
l4020AB3D:
	a3 = 0x4020A6A0
	a6 = Mem0[a1 + 0x0000002C:word32]
	a7 = Mem0[a1 + 0x00000024:word32]
	v41 = Mem0[a3 + 0x00000002:byte]
	a2 = (uint32) v41
	Mem0[a8 + 0x0000001A:word16] = a6
	a4 = Mem0[a7 + 0x00000020:word32]
	branch a2 == 0x00000000 l4020AB99
	// succ:  l4020AB50 l4020AB99
l4020AB50:
	a3 = Mem0[a12 + 0x00000008:word32]
	a8 = 0x40204510
	a7 = a3 >>u 0x00000018 & 0x000000FF
	a6 = a3 << 8
	a5 = a3 & a8
	a6 = a7 | a6
	a5 = a5 << 24
	a3 = a3 >>u 8
	a5 = a6 | a5
	a3 = a3 & a8
	a2 = Mem0[a4 + 0x00000008:word32]
	a3 = a5 | a3
	Mem0[a4 + 0x00000020:word32] = a3
	v42 = Mem0[a2 + 0x00000011:byte]
	a7 = (uint32) v42
	v43 = Mem0[a2 + 0x00000010:byte]
	a6 = (uint32) v43
	v44 = Mem0[a2 + 0x00000012:byte]
	a5 = (uint32) v44
	v45 = Mem0[a2 + 0x00000013:byte]
	a3 = (uint32) v45
	a2 = a7 << 24
	a2 = a2 | a6
	a5 = a5 << 16
	a2 = a5 | a2
	a3 = a3 << 8
	a2 = a3 | a2
	Mem0[a4 + 0x00000024:word32] = a2
	a2 = Mem0[a1 + 0x00000024:word32]
	a0 = 0x4020AB99
	call fn4030A320 (retsize: 0;)
	// succ:  l4020AB99
l4020AB99:
	a6 = Mem0[a1 + 0x00000028:word32]
	a2 = 0
	Mem0[a6 + 0x00000008:word32] = a2
	a2 = Mem0[a1 + 0x0000001C:word32]
	a0 = 0x4020ABA4
	call pbuf_free (retsize: 0;)
	a0 = Mem0[a1 + 0x0000005C:word32]
	a12 = Mem0[a1 + 0x00000058:word32]
	a13 = Mem0[a1 + 0x00000054:word32]
	a14 = Mem0[a1 + 0x00000050:word32]
	a15 = Mem0[a1 + 0x0000004C:word32]
	a1 = a1 + 96
	return
	// succ:  dhcp_recv_exit
l4020ABFC:
	a6 = Mem0[a1 + 0x0000002C:word32]
	branch a6 != 0x00000000 l4020A77C
	// succ:  l4020AC01 l4020A77C
l4020AC01:
	goto l4020AC13
	// succ:  l4020AC13
l4020AC04:
	a7 = 1
	Mem0[a1 + 0x0000002C:word32] = a7
	// succ:  l4020AC08
l4020AC08:
	a8 = 0x000000EC
	Mem0[a1 + 0x00000010:word32] = a8
	a13 = 0x0000006C
	goto l4024A787
	// succ:  l4024A787
l4020AC13:
	a3 = 0x4020A6A0
	v35 = Mem0[a3 + 0x00000001:byte]
	a2 = (uint32) v35
	branch a2 != 0x00000000 l4020A982
	// succ:  l4020AC1C l4020A982
l4020AC1C:
	goto l4024AB99
	// succ:  l4024AB99
l4024A77C:
l4024A787:
l4024A7B4:
l4024A934:
l4024AA6F:
l4024AB99:
dhcp_recv_exit:


// dhcp_arp_reply
// Return size: 0
void dhcp_arp_reply()
dhcp_arp_reply_entry:
	// succ:  l4020AC20
l4020AC20:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = Mem0[a2 + 0x00000020:word32]
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1:word32] = a14
	a13 = a2
	branch a12 == 0x00000000 l4020AD19
	// succ:  l4020AC34 l4020AD19
l4020AC34:
	v8 = Mem0[a12 + 0x0000000C:byte]
	a2 = (uint32) v8
	branch a2 == 8 l4020AC3D
	// succ:  l4020AC3A l4020AC3D
l4020AC3A:
	goto l4020AD19
	// succ:  l4020AD19
l4020AC3D:
	a3 = Mem0[a3 + 0x00000000:word32]
	a2 = Mem0[a12 + 0x00000024:word32]
	branch a3 == a2 l4020AC47
	// succ:  l4020AC44 l4020AC47
l4020AC44:
	goto l4020AD19
	// succ:  l4020AD19
l4020AC47:
	a2 = 12
	Mem0[a12 + 0x0000000C:byte] = a2
	a14 = 0
	a2 = 0
	Mem0[a12 + 0x0000000D:byte] = a2
	Mem0[a12 + 0x0000001A:word16] = a14
	a2 = a13
	a3 = a12
	a4 = 4
	a0 = 0x4020AC5F
	call fn40309CF0 (retsize: 0;)
	a2 = a2 & 0x000000FF
	branch a2 != 0x00000000 l4020AD0C
	// succ:  l4020AC65 l4020AD0C
l4020AC65:
	v11 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v11
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 50
	Mem0[a2 + 0x000000F0:byte] = a3
	v12 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v12
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 4
	Mem0[a2 + 0x000000F0:byte] = a3
	a2 = Mem0[a12 + 0x00000024:word32]
	a3 = 0x40204510
	a6 = a2 >>u 0x00000018 & 0x000000FF
	a4 = a2 & a3
	a5 = a2 << 8
	a5 = a6 | a5
	a4 = a4 << 24
	a2 = a2 >>u 8
	a5 = a5 | a4
	a4 = a2 & a3
	a4 = a5 | a4
	a2 = a12 + 20
	a3 = a12 + 24
	a0 = 0x4020ACB0
	call fn4030A2CC (retsize: 0;)
	v15 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v15
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = -1
	Mem0[a2 + 0x000000F0:byte] = a3
	v16 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v16
	a5 = 67
	branch a5 <u a2 l4020ACE2
	// succ:  l4020ACC9 l4020ACE2
l4020ACC9:
	a7 = 0x000000F0
	a6 = a14
	// succ:  l4020ACCE
l4020ACCE:
	a4 = Mem0[a12 + 0x00000014:word32]
	a3 = a2 + 1
	a2 = a4 + a2
	Mem0[a12 + 0x00000018:word16] = a3
	a2 = a2 + a7
	Mem0[a2:byte] = a6
	v18 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v18
	branch a5 >=u a2 l4020ACCE
	// succ:  l4020ACE2 l4020ACCE
l4020ACE2:
	a3 = 0x000000F0
	a3 = a2 + a3
	a2 = Mem0[a12 + 0x00000010:word32]
	a3 = a3 & 0x0000FFFF
	a0 = 0x4020ACEF
	call pbuf_realloc (retsize: 0;)
	a2 = Mem0[a12 + 0x00000004:word32]
	a3 = Mem0[a12 + 0x00000010:word32]
	a4 = 0x40209EB8
	a5 = 67
	a6 = a13
	a0 = 0x4020ACFD
	call udp_sendto_if (retsize: 0;)
	a2 = Mem0[a12 + 0x00000010:word32]
	branch a2 == 0x00000000 l4020AD06
	// succ:  l4020AD03 l4020AD06
l4020AD03:
	a0 = 0x4020AD06
	call pbuf_free (retsize: 0;)
	// succ:  l4020AD06
l4020AD06:
	a2 = 0
	Mem0[a12 + 0x00000010:word32] = a2
	Mem0[a12 + 0x00000014:word32] = a2
	// succ:  l4020AD0C
l4020AD0C:
	v19 = Mem0[a12 + 0x0000000D:byte]
	a2 = (uint32) v19
	a2 = a2 + 1
	Mem0[a12 + 0x0000000D:byte] = a2
	a2 = 20
	Mem0[a12 + 0x0000001A:word16] = a2
	// succ:  l4020AD19
l4020AD19:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  dhcp_arp_reply_exit
dhcp_arp_reply_exit:


// dhcp_renew
// Return size: 0
void dhcp_renew()
dhcp_renew_entry:
	// succ:  l4020AD28
l4020AD28:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = Mem0[a2 + 0x00000020:word32]
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a13
	a14 = a2
	v8 = Mem0[a12 + 0x0000000C:byte]
	a2 = (uint32) v8
	branch a2 == 5 l4020AD4C
	// succ:  l4020AD3D l4020AD4C
l4020AD3D:
	a2 = 5
	Mem0[a12 + 0x0000000C:byte] = a2
	a2 = 0
	Mem0[a12 + 0x0000000D:byte] = a2
	a2 = 0
	Mem0[a12 + 0x0000001A:word16] = a2
	// succ:  l4020AD4C
l4020AD4C:
	a2 = a14
	a3 = a12
	a4 = 3
	a0 = 0x4020AD55
	call fn40309CF0 (retsize: 0;)
	a13 = a2 & 0x000000FF
	branch a13 != 0x00000000 l4020ADFD
	// succ:  l4020AD5B l4020ADFD
l4020AD5B:
	v11 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v11
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 57
	Mem0[a2 + 0x000000F0:byte] = a3
	v12 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v12
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = 2
	Mem0[a2 + 0x000000F0:byte] = a3
	v13 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v13
	v14 = Mem0[a14 + 0x00000026:uint16]
	a2 = (uint32) v14
	a4 = Mem0[a12 + 0x00000014:word32]
	a5 = a3 + 1
	Mem0[a12 + 0x00000018:word16] = a5
	a3 = a4 + a3
	a4 = a2 >>u 8
	Mem0[a3 + 0x000000F0:byte] = a4
	v16 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v16
	a4 = Mem0[a12 + 0x00000014:word32]
	a5 = a3 + 1
	Mem0[a12 + 0x00000018:word16] = a5
	a3 = a4 + a3
	Mem0[a3 + 0x000000F0:byte] = a2
	v17 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v17
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = -1
	Mem0[a2 + 0x000000F0:byte] = a3
	v18 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v18
	a5 = 0x00000043
	branch a5 <u a3 l4020ADD1
	// succ:  l4020ADBB l4020ADD1
l4020ADBB:
	a6 = a13 | a13
	// succ:  l4020ADBE
l4020ADBE:
	a2 = Mem0[a12 + 0x00000014:word32]
	a4 = a3 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a3 = a2 + a3
	Mem0[a3 + 0x000000F0:byte] = a6
	v20 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v20
	branch a5 >=u a3 l4020ADBE
	// succ:  l4020ADD1 l4020ADBE
l4020ADD1:
	a2 = 0x000000F0
	a3 = a3 + a2
	a2 = Mem0[a12 + 0x00000010:word32]
	a3 = a3 & 0x0000FFFF
	a0 = 0x4020ADDE
	call pbuf_realloc (retsize: 0;)
	a2 = Mem0[a12 + 0x00000004:word32]
	a3 = Mem0[a12 + 0x00000010:word32]
	a4 = a12 + 32
	a5 = 67
	a6 = a14 | a14
	a0 = 0x4020ADED
	call udp_sendto_if (retsize: 0;)
	a2 = Mem0[a12 + 0x00000010:word32]
	branch a2 == 0x00000000 l4020ADF6
	// succ:  l4020ADF3 l4020ADF6
l4020ADF3:
	a0 = 0x4020ADF6
	call pbuf_free (retsize: 0;)
	// succ:  l4020ADF6
l4020ADF6:
	a2 = 0
	Mem0[a12 + 0x00000010:word32] = a2
	Mem0[a12 + 0x00000014:word32] = a2
	// succ:  l4020ADFD
l4020ADFD:
	v21 = Mem0[a12 + 0x0000000D:byte]
	a3 = (uint32) v21
	a4 = 9
	a3 = a3 + 1
	a3 = a3 & 0x000000FF
	Mem0[a12 + 0x0000000D:byte] = a3
	a2 = 40
	branch a4 <u a3 l4020AE30
	// succ:  l4020AE0F l4020AE30
l4020AE0F:
	a2 = a3 << 27
	a2 = a2 - a3
	a3 = a3 + a2 * 0x00000004
	a3 = a3 << 28
	a3 = a3 & 0x0000FFFF
	a2 = 0x000001F3
	a2 = a3 + a2
	a3 = 0x000001F4
	a0 = 0x40202548
	v22 = a0
	a0 = 0x4020AE2D
	call v22 (retsize: 0;)
	a2 = a2 & 0x0000FFFF
	// succ:  l4020AE30
l4020AE30:
	a0 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a12 + 0x0000001A:word16] = a2
	a14 = Mem0[a1 + 0x00000000:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  dhcp_renew_exit
dhcp_renew_exit:


// dhcp_coarse_tmr
// Return size: 0
void dhcp_coarse_tmr()
dhcp_coarse_tmr_entry:
	// succ:  l4020AE48
l4020AE48:
	a1 = fp
	a2 = 0x4020AE44
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	a13 = 0x00000000
	a14 = -5
	branch a12 == a13 l4020AECD
	// succ:  l4020AE60 l4020AECD
l4020AE60:
	a3 = Mem0[a12 + 0x00000020:word32]
	branch a3 == 0x00000000 l4020AEC8
	// succ:  l4020AE65 l4020AEC8
l4020AE65:
	v10 = Mem0[a3 + 0x0000001E:uint16]
	a4 = (uint32) v10
	a2 = a4 - 1
	Mem0[a3 + 0x0000001E:word16] = a2
	branch a4 != 1 l4020AE99
	// succ:  l4020AE70 l4020AE99
l4020AE70:
	v12 = Mem0[a3 + 0x0000000C:byte]
	a5 = (uint32) v12
	a6 = a13
	a3 = a5 & a14
	a3 = a3 - 1
	branch a3 != 0x00000000 l4020AE7D
	// succ:  l4020AE7A_1 l4020AE7D
l4020AE7A_1:
	a6 = a4
	// succ:  l4020AE7D
l4020AE7D:
	a5 = a5 - 10
	a3 = a6 & 0x000000FF
	branch a5 == 0x00000000 l4020AE86
	// succ:  l4020AE83_2 l4020AE86
l4020AE83_2:
	a4 = a3
	// succ:  l4020AE86
l4020AE86:
	a2 = a12 | a12
	a4 = a4 & 0x000000FF
	branch a3 != 0x00000000 l4020AE90
	// succ:  l4020AE8E l4020AE90
l4020AE8E:
	branch a4 == 0x00000000 l4020AEC8
	// succ:  l4020AE90 l4020AEC8
l4020AE90:
	a0 = 0x4020AE93
	call fn40309EBC (retsize: 0;)
	goto l4020AEC8
	// succ:  l4020AEC8
l4020AE99:
	v14 = Mem0[a3 + 0x0000001C:uint16]
	a4 = (uint32) v14
	a2 = a4 - 1
	Mem0[a3 + 0x0000001C:word16] = a2
	branch a4 != 1 l4020AEC8
	// succ:  l4020AEA4 l4020AEC8
l4020AEA4:
	v15 = Mem0[a3 + 0x0000000C:byte]
	a5 = (uint32) v15
	a6 = a13
	a3 = a5 & a14
	a3 = a3 - 1
	branch a3 != 0x00000000 l4020AEB1
	// succ:  l4020AEAE_1 l4020AEB1
l4020AEAE_1:
	a6 = a4
	// succ:  l4020AEB1
l4020AEB1:
	a5 = a5 - 10
	a3 = a6 & 0x000000FF
	branch a5 == 0x00000000 l4020AEBA
	// succ:  l4020AEB7_2 l4020AEBA
l4020AEB7_2:
	a4 = a3
	// succ:  l4020AEBA
l4020AEBA:
	a2 = a12
	a4 = a4 & 0x000000FF
	branch a3 != 0x00000000 l4020AEC5
	// succ:  l4020AEC2 l4020AEC5
l4020AEC2:
	branch a4 == 0x00000000 l4020AEC8
	// succ:  l4020AEC5 l4020AEC8
l4020AEC5:
	a0 = 0x4020AEC8
	call fn4030AD28 (retsize: 0;)
	// succ:  l4020AEC8
l4020AEC8:
	a12 = Mem0[a12 + 0x00000000:word32]
	branch a12 != 0x00000000 l4020AE60
	// succ:  l4020AECD l4020AE60
l4020AECD:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  dhcp_coarse_tmr_exit dhcp_coarse_tmr_exit
dhcp_coarse_tmr_exit:


// dhcp_release
// Return size: 0
void dhcp_release()
dhcp_release_entry:
	// succ:  l4020AEDC
l4020AEDC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = Mem0[a2 + 0x00000020:word32]
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1:word32] = a14
	a13 = a2
	v8 = Mem0[a12 + 0x0000000C:byte]
	a2 = (uint32) v8
	branch a2 == 0x00000000 l4020AF00
	// succ:  l4020AEF3 l4020AF00
l4020AEF3:
	a2 = 0
	Mem0[a12 + 0x0000000C:byte] = a2
	Mem0[a12 + 0x0000000D:byte] = a2
	a2 = 0
	Mem0[a12 + 0x0000001A:word16] = a2
	// succ:  l4020AF00
l4020AF00:
	a2 = 0
	Mem0[a12 + 0x00000020:word32] = a2
	Mem0[a12 + 0x00000024:word32] = a2
	Mem0[a12 + 0x00000028:word32] = a2
	Mem0[a12 + 0x0000002C:word32] = a2
	Mem0[a12 + 0x00000038:word32] = a2
	Mem0[a12 + 0x00000034:word32] = a2
	Mem0[a12 + 0x00000030:word32] = a2
	a3 = a12
	a2 = a13
	a4 = 7
	a0 = 0x4020AF19
	call fn40309CF0 (retsize: 0;)
	a14 = a2 & 0x000000FF
	branch a14 != 0x00000000 l4020AF79
	// succ:  l4020AF1F l4020AF79
l4020AF1F:
	v11 = Mem0[a12 + 0x00000018:uint16]
	a2 = (uint32) v11
	a3 = Mem0[a12 + 0x00000014:word32]
	a4 = a2 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a2 = a3 + a2
	a3 = -1
	Mem0[a2 + 0x000000F0:byte] = a3
	v12 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v12
	a5 = 67
	branch a5 <u a3 l4020AF4D
	// succ:  l4020AF38 l4020AF4D
l4020AF38:
	a6 = a14
	// succ:  l4020AF3A
l4020AF3A:
	a2 = Mem0[a12 + 0x00000014:word32]
	a4 = a3 + 1
	Mem0[a12 + 0x00000018:word16] = a4
	a3 = a2 + a3
	Mem0[a3 + 0x000000F0:byte] = a6
	v15 = Mem0[a12 + 0x00000018:uint16]
	a3 = (uint32) v15
	branch a5 >=u a3 l4020AF3A
	// succ:  l4020AF4D l4020AF3A
l4020AF4D:
	a2 = 0x000000F0
	a3 = a3 + a2
	a2 = Mem0[a12 + 0x00000010:word32]
	a3 = a3 & 0x0000FFFF
	a0 = 0x4020AF5A
	call pbuf_realloc (retsize: 0;)
	a2 = Mem0[a12 + 0x00000004:word32]
	a3 = Mem0[a12 + 0x00000010:word32]
	a4 = a12 + 32
	a5 = 67
	a6 = a13 | a13
	a0 = 0x4020AF69
	call udp_sendto_if (retsize: 0;)
	a2 = Mem0[a12 + 0x00000010:word32]
	branch a2 == 0x00000000 l4020AF72
	// succ:  l4020AF6F l4020AF72
l4020AF6F:
	a0 = 0x4020AF72
	call pbuf_free (retsize: 0;)
	// succ:  l4020AF72
l4020AF72:
	a2 = 0
	Mem0[a12 + 0x00000010:word32] = a2
	Mem0[a12 + 0x00000014:word32] = a2
	// succ:  l4020AF79
l4020AF79:
	v16 = Mem0[a12 + 0x0000000D:byte]
	a3 = (uint32) v16
	a2 = 9
	a3 = a3 + 1
	a3 = a3 & 0x000000FF
	Mem0[a12 + 0x0000000D:byte] = a3
	a4 = 20
	branch a2 <u a3 l4020AFAC
	// succ:  l4020AF8B l4020AFAC
l4020AF8B:
	a2 = a3 << 27
	a2 = a2 - a3
	a3 = a3 + a2 * 0x00000004
	a3 = a3 << 29
	a3 = a3 & 0x0000FFFF
	a2 = 0x000001F3
	a2 = a3 + a2
	a3 = 0x000001F4
	a0 = 0x40202548
	v17 = a0
	a0 = 0x4020AFA9
	call v17 (retsize: 0;)
	a4 = a2 & 0x0000FFFF
	// succ:  l4020AFAC
l4020AFAC:
	Mem0[a12 + 0x0000001A:word16] = a4
	a2 = a13 | a13
	a0 = 0x4020AFB5
	call netif_set_down (retsize: 0;)
	a12 = 0x4020A6AC
	a2 = a13
	a3 = a12 | a12
	a0 = 0x4020AFC0
	call netif_set_ipaddr (retsize: 0;)
	a2 = a13
	a3 = a12
	a0 = 0x4020AFC7
	call netif_set_gw (retsize: 0;)
	a2 = a13
	a3 = a12
	a0 = 0x4020AFCE
	call netif_set_netmask (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a14
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  dhcp_release_exit
dhcp_release_exit:


// dhcp_fine_tmr
// Return size: 0
void dhcp_fine_tmr()
dhcp_fine_tmr_entry:
	// succ:  l4020AFE0
l4020AFE0:
	a1 = fp
	a2 = 0x4020AE44
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	a13 = 0
	a14 = 0
	branch a12 != a13 l4020AFFA
	// succ:  l4020AFF7 l4020AFFA
l4020AFF7:
	goto l4020B0AE
	// succ:  l4020B0AE
l4020AFFA:
	a2 = Mem0[a12 + 0x00000020:word32]
	branch a2 == 0x00000000 l4020B0A9
	// succ:  l4020AFFF l4020B0A9
l4020AFFF:
	v9 = Mem0[a2 + 0x0000001A:uint16]
	a3 = (uint32) v9
	branch a3 <u 0x00000002 l4020B00D
	// succ:  l4020B005 l4020B00D
l4020B005:
	a3 = a3 - 1
	Mem0[a2 + 0x0000001A:word16] = a3
	goto l4020B0A9
	// succ:  l4020B0A9
l4020B00D:
	branch a3 == 1 l4020B013
	// succ:  l4020B010 l4020B013
l4020B010:
	goto l4020B0A9
	// succ:  l4020B0A9
l4020B013:
	v11 = Mem0[a2 + 0x0000000C:byte]
	a4 = (uint32) v11
	a6 = a13
	a5 = a4 - 6
	branch a5 != 0x00000000 l4020B01E
	// succ:  l4020B01B_1 l4020B01E
l4020B01B_1:
	a6 = a3
	// succ:  l4020B01E
l4020B01E:
	Mem0[a2 + 0x0000001A:word16] = a14
	a5 = a6 & 0x000000FF
	branch a5 != 0x00000000 l4020B0A4
	// succ:  l4020B027 l4020B0A4
l4020B027:
	a6 = a4 - 12
	branch a6 == 0x00000000 l4020B02D
	// succ:  l4020B02A_2 l4020B02D
l4020B02A_2:
	a3 = a5
	// succ:  l4020B02D
l4020B02D:
	a3 = a3 & 0x000000FF
	branch a3 != 0x00000000 l4020B0A4
	// succ:  l4020B033 l4020B0A4
l4020B033:
	branch a4 != 1 l4020B044
	// succ:  l4020B036 l4020B044
l4020B036:
	v14 = Mem0[a2 + 0x0000000D:byte]
	a2 = (uint32) v14
	branch a2 >=u 0x00000006 l4020B080
	// succ:  l4020B03C l4020B080
l4020B03C:
	a2 = a12
	a0 = 0x4020B041
	call fn4030A320 (retsize: 0;)
	goto l4020B0A9
	// succ:  l4020B0A9
l4020B044:
	branch a4 != 8 l4020B061
	// succ:  l4020B047 l4020B061
l4020B047:
	v15 = Mem0[a2 + 0x0000000D:byte]
	a2 = (uint32) v15
	branch a2 >=u 0x00000002 l4020B058
	// succ:  l4020B04D l4020B058
l4020B04D:
	a2 = a12
	a0 = 0x4020B052
	call fn4030A150 (retsize: 0;)
	goto l4020B0A9
	// succ:  l4020B0A9
l4020B058:
	a2 = a12
	a0 = 0x4020B05D
	call fn4030A198 (retsize: 0;)
	goto l4020B0A9
	// succ:  l4020B0A9
l4020B061:
	branch a4 != 5 l4020B06D
	// succ:  l4020B064 l4020B06D
l4020B064:
	a2 = a12
	a0 = 0x4020B069
	call fn4030AD28 (retsize: 0;)
	goto l4020B0A9
	// succ:  l4020B0A9
l4020B06D:
	branch a4 != 4 l4020B090
	// succ:  l4020B070 l4020B090
l4020B070:
	v16 = Mem0[a2 + 0x0000000D:byte]
	a2 = (uint32) v16
	a3 = 8
	branch a3 <u a2 l4020B080
	// succ:  l4020B078 l4020B080
l4020B078:
	a2 = a12
	a0 = 0x4020B07D
	call fn40309EBC (retsize: 0;)
	goto l4020B0A9
	// succ:  l4020B0A9
l4020B080:
	a2 = a12 | a12
	a0 = 0x4020B086
	call fn4030AEDC (retsize: 0;)
	a2 = a12 | a12
	a0 = 0x4020B08C
	call fn40309FD8 (retsize: 0;)
	goto l4020B0A9
	// succ:  l4020B0A9
l4020B090:
	branch a4 != 3 l4020B0A9
	// succ:  l4020B093 l4020B0A9
l4020B093:
	v17 = Mem0[a2 + 0x0000000D:byte]
	a2 = (uint32) v17
	branch a2 >=u 0x00000002 l4020B0A4
	// succ:  l4020B099 l4020B0A4
l4020B099:
	a2 = a12
	a0 = 0x4020B09E
	call fn4030A53C (retsize: 0;)
	goto l4020B0A9
	// succ:  l4020B0A9
l4020B0A4:
	a2 = a12
	a0 = 0x4020B0A9
	call fn40309FD8 (retsize: 0;)
	// succ:  l4020B0A9
l4020B0A9:
	a12 = Mem0[a12 + 0x00000000:word32]
	branch a12 != 0x00000000 l4020AFFA
	// succ:  l4020B0AE l4020AFFA
l4020B0AE:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  dhcp_fine_tmr_exit dhcp_fine_tmr_exit
dhcp_fine_tmr_exit:


// dhcp_stop
// Return size: 0
void dhcp_stop()
dhcp_stop_entry:
	// succ:  l4020B0BC
l4020B0BC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	v6 = Mem0[a2 + 0x0000002F:byte]
	a4 = (uint32) v6
	a3 = 0xFFFFFFF7
	a3 = a4 & a3
	a12 = Mem0[a2 + 0x00000020:word32]
	Mem0[a2 + 0x0000002F:byte] = a3
	branch a12 == 0x00000000 l4020B0F2
	// succ:  l4020B0D5 l4020B0F2
l4020B0D5:
	a2 = Mem0[a12 + 0x00000004:word32]
	branch a2 == 0x00000000 l4020B0E0
	// succ:  l4020B0D9 l4020B0E0
l4020B0D9:
	a0 = 0x4020B0DC
	call udp_remove (retsize: 0;)
	a2 = 0
	Mem0[a12 + 0x00000004:word32] = a2
	// succ:  l4020B0E0
l4020B0E0:
	v9 = Mem0[a12 + 0x0000000C:byte]
	a2 = (uint32) v9
	branch a2 == 0x00000000 l4020B0F2
	// succ:  l4020B0E5 l4020B0F2
l4020B0E5:
	a2 = 0
	Mem0[a12 + 0x0000000C:byte] = a2
	Mem0[a12 + 0x0000000D:byte] = a2
	a2 = 0
	Mem0[a12 + 0x0000001A:word16] = a2
	// succ:  l4020B0F2
l4020B0F2:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  dhcp_stop_exit
dhcp_stop_exit:


// dhcp_start
// Return size: 0
void dhcp_start()
dhcp_start_entry:
	// succ:  l4020B100
l4020B100:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1:word32] = a14
	a12 = a2
	v8 = Mem0[a2 + 0x0000002F:byte]
	a2 = (uint32) v8
	a3 = -9
	a3 = a2 & a3
	Mem0[a12 + 0x0000002F:byte] = a3
	a13 = Mem0[a12 + 0x00000020:word32]
	branch (a2 & 0x00000020) != 0x00000000 l4020B120
	// succ:  l4020B11D l4020B120
l4020B11D:
	goto l4020B1AC
	// succ:  l4020B1AC
l4020B120:
	v10 = Mem0[a12 + 0x00000026:uint16]
	a2 = (uint32) v10
	a3 = 0x0000023F
	branch a3 >=u a2 l4020B194
	// succ:  l4020B129 l4020B194
l4020B129:
	branch a13 != 0x00000000 l4020B13E
	// succ:  l4020B12B l4020B13E
l4020B12B:
	a2 = 0x0000003C
	a0 = 0x402034C4
	v11 = a0
	a0 = 0x4020B134
	call v11 (retsize: 0;)
	a13 = a2
	branch a2 == 0x00000000 l4020B194
	// succ:  l4020B139 l4020B194
l4020B139:
	Mem0[a12 + 0x00000020:word32] = a2
	goto l4020B145
	// succ:  l4020B145
l4020B13E:
	a2 = Mem0[a13 + 0x00000004:word32]
	branch a2 == 0x00000000 l4020B145
	// succ:  l4020B142 l4020B145
l4020B142:
	a0 = 0x4020B145
	call udp_remove (retsize: 0;)
	// succ:  l4020B145
l4020B145:
	a3 = 0
	a4 = 0x0000003C
	a2 = a13
	a0 = 0x4020267C
	v13 = a0
	a0 = 0x4020B152
	call v13 (retsize: 0;)
	a0 = 0x4020B155
	call udp_new (retsize: 0;)
	Mem0[a13 + 0x00000004:word32] = a2
	branch a2 == 0x00000000 l4020B194
	// succ:  l4020B15A l4020B194
l4020B15A:
	v14 = Mem0[a2 + 0x00000008:byte]
	a4 = (uint32) v14
	a3 = 32
	a3 = a4 | a3
	a14 = 0x4020A6AC
	Mem0[a2 + 0x00000008:byte] = a3
	a2 = Mem0[a13 + 0x00000004:word32]
	a3 = a14
	a4 = 68
	a0 = 0x4020B171
	call udp_bind (retsize: 0;)
	a2 = Mem0[a13 + 0x00000004:word32]
	a3 = a14
	a4 = 67
	a0 = 0x4020B17A
	call udp_connect (retsize: 0;)
	a3 = 0x4020B0FC
	a2 = Mem0[a13 + 0x00000004:word32]
	a4 = a12
	a0 = 0x4020B184
	call udp_recv (retsize: 0;)
	a2 = a12
	a0 = 0x4020B189
	call fn40309FD8 (retsize: 0;)
	a2 = a2 & 0x000000FF
	branch a2 == 0x00000000 l4020B19C
	// succ:  l4020B18E l4020B19C
l4020B18E:
	a2 = a12 | a12
	a0 = 0x4020B194
	call fn4030B0BC (retsize: 0;)
	// succ:  l4020B194
l4020B194:
	a2 = 0x000000FF
	goto l4020B1AF
	// succ:  l4020B1AF
l4020B19C:
	v15 = Mem0[a12 + 0x0000002F:byte]
	a4 = (uint32) v15
	a3 = 8
	a3 = a4 | a3
	Mem0[a12 + 0x0000002F:byte] = a3
	goto l4020B1AF
	// succ:  l4020B1AF
l4020B1AC:
	a2 = 0x000000F2
	// succ:  l4020B1AF
l4020B1AF:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  dhcp_start_exit
dhcp_start_exit:


// lwip_init
// Return size: 0
void lwip_init()
lwip_init_entry:
	// succ:  l4020B1BC
l4020B1BC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4020B1C5
	call stats_init (retsize: 0;)
	a0 = 0x4020B1C8
	call sys_init (retsize: 0;)
	a0 = 0x4020B1CB
	call netif_init (retsize: 0;)
	a0 = 0x4020B1CE
	call lwip_socket_init (retsize: 0;)
	a0 = 0x4020B1D1
	call udp_init (retsize: 0;)
	a0 = 0x4020B1D4
	call tcp_init (retsize: 0;)
	a0 = 0x4020B1D7
	call dns_init (retsize: 0;)
	a0 = 0x4020B1DA
	call sys_timeouts_init (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  lwip_init_exit
lwip_init_exit:


// dns_recv
// Return size: 0
void dns_recv()
dns_recv_entry:
	// succ:  l4020B1FC
l4020B1FC:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000038:word32] = a12
	a12 = a4 | a4
	v5 = Mem0[a4 + 0x00000008:uint16]
	a4 = (uint32) v5
	Mem0[a1 + 0x0000003C:word32] = a0
	a2 = a4 - 26
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a15
	a2 = a2 & 0x0000FFFF
	a3 = 0x000001E6
	branch a3 >=u a2 l4020B220
	// succ:  l4020B21D l4020B220
l4020B21D:
	goto l4020B406
	// succ:  l4020B406
l4020B220:
	a13 = 0x4020B1E8
	a2 = a12
	a3 = Mem0[a13 + 0x00000000:word32]
	a5 = 0
	a0 = 0x4020B22C
	call pbuf_copy_partial (retsize: 0;)
	v13 = Mem0[a12 + 0x00000008:uint16]
	a3 = (uint32) v13
	branch a3 == a2 l4020B235
	// succ:  l4020B232 l4020B235
l4020B232:
	goto l4020B406
	// succ:  l4020B406
l4020B235:
	a3 = Mem0[a13 + 0x00000000:word32]
	v14 = Mem0[a3 + 0x00000001:byte]
	a2 = (uint32) v14
	v15 = Mem0[a3 + 0x00000000:byte]
	a4 = (uint32) v15
	a2 = a2 << 24
	a2 = a2 | a4
	a4 = a2 << 24
	a2 = a2 >>u 8
	a2 = a4 | a2
	a2 = a2 << 16
	branch a2 != 0x00000000 l4020B406
	// succ:  l4020B252 l4020B406
l4020B252:
	a13 = 0x4020B1EC
	v16 = Mem0[a13 + 0x00000000:byte]
	a2 = (uint32) v16
	branch a2 == 2 l4020B25E
	// succ:  l4020B25B l4020B25E
l4020B25B:
	goto l4020B406
	// succ:  l4020B406
l4020B25E:
	v17 = Mem0[a3 + 0x00000003:byte]
	a2 = (uint32) v17
	v19 = Mem0[a3 + 0x00000007:byte]
	a6 = (uint32) v19
	a2 = a2 & 0x0000000F
	Mem0[a13 + 0x00000005:byte] = a2
	v21 = Mem0[a3 + 0x00000005:byte]
	a8 = (uint32) v21
	v22 = Mem0[a3 + 0x00000002:byte]
	a4 = (uint32) v22
	v24 = Mem0[a3 + 0x00000004:byte]
	a7 = (uint32) v24
	v25 = Mem0[a3 + 0x00000006:byte]
	a5 = (uint32) v25
	a9 = 3
	a8 = a8 << 24
	a6 = a6 << 24
	Mem0[a13:byte] = a9
	a4 = a4 << 8
	a7 = a8 | a7
	a5 = a6 | a5
	branch a4 < 0x00000000 l4020B298
	// succ:  l4020B28D l4020B298
l4020B28D:
	a5 = Mem0[a13 + 0x00000090:word32]
	branch a5 != 0x00000000 l4020B3F1
	// succ:  l4020B293 l4020B3F1
l4020B293:
	goto l4020B3FC
	// succ:  l4020B3FC
l4020B298:
	branch a2 != 0x00000000 l4020B28D
	// succ:  l4020B29B l4020B28D
l4020B29B:
	a2 = a7 << 24
	a7 = a7 >>u 8
	a2 = a2 | a7
	a2 = a2 << 16
	a2 = a2 >> 16
	branch a2 != 1 l4020B28D
	// succ:  l4020B2AD l4020B28D
l4020B2AD:
	a15 = a3 + 12
	a4 = 0x4020B1E4
	a6 = a15
	a10 = 0xFFFFFFC0
	a9 = 0x000000C0
	v28 = Mem0[a6 + 0x00000000:byte]
	a7 = (uint32) v28
	a2 = a6 + 1
	a8 = a7 & a10
	branch a8 != a9 l4020B2D1
	// succ:  l4020B2C5 l4020B2D1
l4020B2C5:
	v29 = Mem0[a3 + 0x0000000C:byte]
	a2 = (uint32) v29
	a7 = 0xFFFFFFC0
	a6 = 0x000000C0
	goto l4020B305
	// succ:  l4020B305
l4020B2D1:
	branch a7 == 0x00000000 l4020B2F8
	// succ:  l4020B2D3 l4020B2F8
l4020B2D3:
	v31 = Mem0[a4 + 0x00000000:byte]
	a11 = (uint32) v31
	v32 = Mem0[a6 + 0x00000001:byte]
	a8 = (uint32) v32
	branch a11 != a8 l4020B28D
	// succ:  l4020B2DC l4020B28D
l4020B2DC:
	a7 = a7 - 1
	a8 = a7 & 0x000000FF
	a8 = a8 + 2
	a8 = a6 + a8
	goto l4020B2F1
	// succ:  l4020B2F1
l4020B2E8:
	v35 = Mem0[a4 + 0x00000000:byte]
	a7 = (uint32) v35
	v36 = Mem0[a2 + 0x00000000:byte]
	a6 = (uint32) v36
	branch a7 != a6 l4020B28D
	// succ:  l4020B2F1 l4020B28D
l4020B2F1:
	a2 = a2 + 1
	a4 = a4 + 1
	branch a2 != a8 l4020B2E8
	a2 = a2 + 1
	a4 = a4 + 1
	branch a2 != a8 l4020B2E8
	// succ:  l4020B2F8 l4020B2E8
l4020B2F8:
	v33 = Mem0[a2 + 0x00000000:byte]
	a6 = (uint32) v33
	a4 = a4 + 1
	branch a6 == 0x00000000 l4020B2C5
	v34 = Mem0[a2 + 0x00000000:byte]
	a6 = (uint32) v34
	a4 = a4 + 1
	branch a6 == 0x00000000 l4020B2C5
	v37 = Mem0[a2 + 0x00000000:byte]
	a6 = (uint32) v37
	a4 = a4 + 1
	branch a6 == 0x00000000 l4020B2C5
	// succ:  l4020B300 l4020B2C5
l4020B300:
	a6 = a2
	a6 = a2
	a6 = a2
	goto l4024B2BA
	// succ:  l4024B2BA
l4020B305:
	a4 = a2 - 1
	a4 = a4 & 0x000000FF
	a3 = a2 & a7
	a4 = a4 + 1
	a15 = a15 + 1
	branch a3 == a6 l4020B31E
	// succ:  l4020B314 l4020B31E
l4020B314:
	branch a2 == 0x00000000 l4020B318
	// succ:  l4020B316 l4020B318
l4020B316:
	a15 = a15 + a4
	// succ:  l4020B318
l4020B318:
	v38 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v38
	branch a2 != 0x00000000 l4020B305
	// succ:  l4020B31E l4020B305
l4020B31E:
	a7 = a5 << 24
	a5 = a5 >>u 8
	a7 = a7 | a5
	a7 = a7 & 0x0000FFFF
	a15 = a15 + 5
	branch a7 == 0x00000000 l4020B28D
	// succ:  l4020B32F l4020B28D
l4020B32F:
	a6 = 0xFFFFFFC0
	a14 = 0x000000C0
	// succ:  l4020B335
l4020B335:
	v39 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v39
	// succ:  l4020B338
l4020B338:
	a4 = a2 - 1
	a4 = a4 & 0x000000FF
	a3 = a2 & a6
	a4 = a4 + 1
	a15 = a15 + 1
	branch a3 == a14 l4020B352
	// succ:  l4020B347 l4020B352
l4020B347:
	branch a2 == 0x00000000 l4020B34C
	// succ:  l4020B34A l4020B34C
l4020B34A:
	a15 = a15 + a4
	// succ:  l4020B34C
l4020B34C:
	v40 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v40
	branch a2 != 0x00000000 l4020B338
	// succ:  l4020B352 l4020B338
l4020B352:
	a8 = a15 + 1
	a3 = a8
	a4 = 10
	a2 = a1
	Mem0[a1 + 0x00000018:word32] = a6
	Mem0[a1 + 0x00000014:word32] = a7
	Mem0[a1 + 0x00000010:word32] = a8
	a0 = 0x40203130
	v41 = a0
	a0 = 0x4020B366
	call v41 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a4 = 0x4020B1F0
	v42 = Mem0[a1 + 0x00000008:uint16]
	a2 = (uint32) v42
	a6 = Mem0[a1 + 0x00000018:word32]
	a7 = Mem0[a1 + 0x00000014:word32]
	a8 = Mem0[a1 + 0x00000010:word32]
	branch a3 != a4 l4020B3D4
	// succ:  l4020B377 l4020B3D4
l4020B377:
	a3 = 0x00000400
	branch a2 != a3 l4020B3D4
	// succ:  l4020B37D l4020B3D4
l4020B37D:
	a2 = Mem0[a1 + 0x00000004:word32]
	a4 = 0x40204510
	a6 = a2 >>u 0x00000018 & 0x000000FF
	a3 = a2 & a4
	a5 = a2 << 8
	a5 = a6 | a5
	a2 = a2 >>u 8
	a3 = a3 << 24
	a4 = a2 & a4
	a3 = a5 | a3
	a3 = a3 | a4
	a2 = 0x4020B1F4
	Mem0[a13 + 0x00000008:word32] = a3
	branch a2 >=u a3 l4020B3A8
	// succ:  l4020B3A5 l4020B3A8
l4020B3A5:
	Mem0[a13 + 0x00000008:word32] = a2
	// succ:  l4020B3A8
l4020B3A8:
	v43 = Mem0[a15 + 0x0000000B:byte]
	a4 = (uint32) v43
	a3 = 0x4020B1F8
	v44 = Mem0[a15 + 0x0000000C:byte]
	a2 = (uint32) v44
	Mem0[a3:byte] = a4
	v45 = Mem0[a15 + 0x0000000D:byte]
	a4 = (uint32) v45
	Mem0[a3 + 0x00000001:byte] = a2
	v46 = Mem0[a15 + 0x0000000E:byte]
	a2 = (uint32) v46
	a5 = Mem0[a13 + 0x00000090:word32]
	Mem0[a3 + 0x00000002:byte] = a4
	Mem0[a3 + 0x00000003:byte] = a2
	branch a5 == 0x00000000 l4020B406
	// succ:  l4020B3C8 l4020B406
l4020B3C8:
	a4 = Mem0[a13 + 0x00000094:word32]
	a2 = 0x4020B1E4
	a0 = 0x4020B3D1
	call a5 (retsize: 0;)
	goto l4020B406
	// succ:  l4020B406
l4020B3D4:
	a15 = a2 << 24
	a2 = a2 >>u 8
	a15 = a15 | a2
	a15 = a15 & 0x0000FFFF
	a7 = a7 - 1
	a15 = a15 + 10
	a7 = a7 & 0x0000FFFF
	a15 = a8 + a15
	branch a7 != 0x00000000 l4020B335
	// succ:  l4020B3EC l4020B335
l4020B3EC:
	goto l4024B28D
	// succ:  l4024B28D
l4020B3F1:
	a2 = 0x4020B1E4
	a4 = Mem0[a13 + 0x00000094:word32]
	a3 = 0
	a0 = 0x4020B3FC
	call a5 (retsize: 0;)
	// succ:  l4020B3FC
l4020B3FC:
	a2 = 0
	Mem0[a13:byte] = a2
	a2 = 0
	Mem0[a13 + 0x00000090:word32] = a2
	// succ:  l4020B406
l4020B406:
	a2 = a12 | a12
	a0 = 0x4020B40C
	call pbuf_free (retsize: 0;)
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  dns_recv_exit
l4024B28D:
l4024B2BA:
dns_recv_exit:


// dns_send
// Return size: 0
void dns_send()
dns_send_entry:
	// succ:  l4020B428
l4020B428:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = a2
	a2 = 0
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	a14 = a3
	a15 = a4
	a3 = 0x00000090
	a4 = a2
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x0000002C:word32] = a0
	a0 = 0x4020B446
	call pbuf_alloc (retsize: 0;)
	a13 = a2
	branch a2 == 0x00000000 l4020B514
	// succ:  l4020B44B l4020B514
l4020B44B:
	a9 = Mem0[a2 + 0x00000004:word32]
	a4 = a15 << 24
	a2 = 0
	a3 = a4 & 0x000000FF
	Mem0[a9 + 0x00000003:byte] = a2
	Mem0[a9 + 0x00000006:byte] = a2
	Mem0[a9 + 0x00000007:byte] = a2
	Mem0[a9 + 0x00000008:byte] = a2
	Mem0[a9 + 0x00000009:byte] = a2
	Mem0[a9 + 0x0000000A:byte] = a2
	Mem0[a9 + 0x0000000B:byte] = a2
	Mem0[a9:byte] = a3
	Mem0[a9 + 0x00000004:byte] = a2
	a4 = a4 >>u 8
	a3 = 1
	a2 = 1
	Mem0[a9 + 0x00000001:byte] = a4
	Mem0[a9 + 0x00000002:byte] = a3
	Mem0[a9 + 0x00000005:byte] = a2
	a5 = a14 - 1
	a9 = a9 + 12
	v13 = Mem0[a5 + 0x00000001:byte]
	a4 = (uint32) v13
	a6 = a9 + 1
	a5 = a5 + 1
	a7 = 0
	branch a4 == 0x00000000 l4020B4AC
	// succ:  l4020B48F l4020B4AC
l4020B48F:
	a2 = a4 - 46
	branch a2 == 0x00000000 l4020B4AC
	// succ:  l4020B495 l4020B4AC
l4020B495:
	Mem0[a6:byte] = a4
	a5 = a5 + 1
	v16 = Mem0[a5 + 0x00000000:byte]
	a4 = (uint32) v16
	a7 = a7 + 1
	a8 = a4 - 46
	a6 = a6 + 1
	a7 = a7 & 0x000000FF
	branch a4 == 0x00000000 l4020B4AC
	// succ:  l4020B4A9 l4020B4AC
l4020B4A9:
	branch a8 != 0x00000000 l4020B495
	// succ:  l4020B4AC l4020B495
l4020B4AC:
	Mem0[a9:byte] = a7
	v18 = Mem0[a5 + 0x00000000:byte]
	a4 = (uint32) v18
	branch a4 == 0x00000000 l4020B4BA
	// succ:  l4020B4B4 l4020B4BA
l4020B4B4:
	a9 = a6
	goto l4024B484
	// succ:  l4024B484
l4020B4BA:
	a3 = 1
	Mem0[a6 + 0x00000002:byte] = a3
	a3 = 0
	Mem0[a6 + 0x00000003:byte] = a3
	a2 = 0
	a3 = 1
	Mem0[a6:byte] = a4
	Mem0[a6 + 0x00000004:byte] = a3
	Mem0[a6 + 0x00000001:byte] = a2
	a2 = Mem0[a13 + 0x00000004:word32]
	a3 = a6 + 5
	a3 = a3 - a2
	a4 = 0x00000100
	a2 = a13 | a13
	a3 = a3 & 0x0000FFFF
	Mem0[a1:word16] = a4
	Mem0[a1 + 0x00000002:word16] = a4
	a0 = 0x4020B4EA
	call pbuf_realloc (retsize: 0;)
	a3 = 0x4020B420
	a14 = 0x4020B424
	a12 = a3 + a12 * 0x00000004
	a2 = Mem0[a14 + 0x00000000:word32]
	a3 = a12
	a4 = 53
	a0 = 0x4020B4FC
	call udp_connect (retsize: 0;)
	a2 = Mem0[a14 + 0x00000000:word32]
	a4 = a12
	a3 = a13
	a5 = 0x00000035
	a0 = 0x4020B508
	call udp_sendto (retsize: 0;)
	a12 = a2 & 0x000000FF
	a2 = a13
	a0 = 0x4020B510
	call pbuf_free (retsize: 0;)
	goto l4020B517
	// succ:  l4020B517
l4020B514:
	a12 = 0x000000FF
	// succ:  l4020B517
l4020B517:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a12
	a13 = Mem0[a1 + 0x00000024:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  dns_send_exit
l4024B484:
dns_send_exit:


// dns_check_entry
// Return size: 0
void dns_check_entry()
dns_check_entry_entry:
	// succ:  l4020B528
l4020B528:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2 + a2 * 0x00000008
	a12 = a2 + a12 * 0x00000002
	a4 = a2 | a2
	a2 = 0x4020B1EC
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a2 + a12 * 0x00000008
	v7 = Mem0[a12 + 0x00000000:byte]
	a2 = (uint32) v7
	branch a2 == 2 l4020B56C
	// succ:  l4020B546 l4020B56C
l4020B546:
	branch a2 != 3 l4020B54C
	// succ:  l4020B549 l4020B54C
l4020B549:
	goto l4020B5CC
	// succ:  l4020B5CC
l4020B54C:
	branch a2 == 1 l4020B552
	// succ:  l4020B54F l4020B552
l4020B54F:
	goto l4020B5DA
	// succ:  l4020B5DA
l4020B552:
	a3 = 0
	a5 = 2
	Mem0[a12 + 0x00000001:byte] = a3
	Mem0[a12 + 0x00000002:byte] = a2
	Mem0[a12 + 0x00000003:byte] = a3
	Mem0[a12:byte] = a5
	a3 = a12 + 12
	a2 = 0
	a0 = 0x4020B569
	call fn4030B428 (retsize: 0;)
	goto l4020B5DA
	// succ:  l4020B5DA
l4020B56C:
	v8 = Mem0[a12 + 0x00000002:byte]
	a2 = (uint32) v8
	a2 = a2 - 1
	a2 = a2 & 0x000000FF
	Mem0[a12 + 0x00000002:byte] = a2
	branch a2 != 0x00000000 l4020B5DA
	// succ:  l4020B57A l4020B5DA
l4020B57A:
	v10 = Mem0[a12 + 0x00000003:byte]
	a3 = (uint32) v10
	v11 = Mem0[a12 + 0x00000001:byte]
	a2 = (uint32) v11
	a3 = a3 + 1
	a3 = a3 & 0x000000FF
	Mem0[a12 + 0x00000003:byte] = a3
	branch a3 != 4 l4020B5C1
	// succ:  l4020B58B l4020B5C1
l4020B58B:
	branch a2 != 0x00000000 l4020B5A5
	// succ:  l4020B58D l4020B5A5
l4020B58D:
	a3 = 0x4020B420
	a3 = Mem0[a3 + 0x00000004:word32]
	branch a3 == 0x00000000 l4020B5A5
	// succ:  l4020B594 l4020B5A5
l4020B594:
	a3 = 1
	Mem0[a12 + 0x00000001:byte] = a3
	Mem0[a12 + 0x00000002:byte] = a3
	Mem0[a12 + 0x00000003:byte] = a2
	goto l4020B5DA
	// succ:  l4020B5DA
l4020B5A5:
	a5 = Mem0[a12 + 0x00000090:word32]
	branch a5 == 0x00000000 l4020B5B4
	// succ:  l4020B5AA l4020B5B4
l4020B5AA:
	a4 = Mem0[a12 + 0x00000094:word32]
	a2 = a12 + 12
	a3 = 0
	a0 = 0x4020B5B4
	call a5 (retsize: 0;)
	// succ:  l4020B5B4
l4020B5B4:
	a2 = 0
	Mem0[a12:byte] = a2
	a2 = 0
	Mem0[a12 + 0x00000090:word32] = a2
	goto l4020B5DA
	// succ:  l4020B5DA
l4020B5C1:
	Mem0[a12 + 0x00000002:byte] = a3
	a3 = a12 + 12
	a0 = 0x4020B5C9
	call fn4030B428 (retsize: 0;)
	goto l4020B5DA
	// succ:  l4020B5DA
l4020B5CC:
	a2 = Mem0[a12 + 0x00000008:word32]
	a2 = a2 - 1
	Mem0[a12 + 0x00000008:word32] = a2
	branch a2 != 0x00000000 l4020B5DA
	// succ:  l4020B5D4 l4020B5DA
l4020B5D4:
	Mem0[a12:byte] = a2
	Mem0[a12 + 0x00000090:word32] = a2
	// succ:  l4020B5DA
l4020B5DA:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  dns_check_entry_exit
dns_check_entry_exit:


// dns_init
// Return size: 0
void dns_init()
dns_init_entry:
	// succ:  l4020B5F0
l4020B5F0:
	a1 = fp
	a4 = 0x4020B5E4
	a3 = -4
	a4 = a4 + 3
	a1 = a1 - 16
	a4 = a4 & a3
	a2 = 0x4020B5E8
	a3 = 0x4020B1E8
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a3:word32] = a4
	a0 = 0x4020B612
	call ipaddr_addr (retsize: 0;)
	a12 = 0x4020B424
	a14 = a2
	a13 = Mem0[a12 + 0x00000000:word32]
	branch a13 != 0x00000000 l4020B640
	// succ:  l4020B61C l4020B640
l4020B61C:
	a0 = 0x4020B61F
	call udp_new (retsize: 0;)
	Mem0[a12:word32] = a2
	branch a2 == 0x00000000 l4020B640
	// succ:  l4020B623 l4020B640
l4020B623:
	a3 = 0x4020A6AC
	a4 = a13
	a0 = 0x4020B62B
	call udp_bind (retsize: 0;)
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = 0x4020B5EC
	a4 = a13
	a0 = 0x4020B635
	call udp_recv (retsize: 0;)
	a2 = Mem0[a12 + 0x00000000:word32]
	branch a2 == 0x00000000 l4020B640
	// succ:  l4020B639 l4020B640
l4020B639:
	branch a14 == 0x00000000 l4020B640
	// succ:  l4020B63B l4020B640
l4020B63B:
	a2 = 0x4020B420
	Mem0[a2:word32] = a14
	// succ:  l4020B640
l4020B640:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  dns_init_exit
dns_init_exit:


// dns_setserver
// Return size: 0
void dns_setserver()
dns_setserver_entry:
	// succ:  l4020B650
l4020B650:
	a1 = fp
	a2 = a2 & 0x000000FF
	branch a2 >=u 0x00000002 l4020B66C
	// succ:  l4020B656 l4020B66C
l4020B656:
	a4 = 0x4020B424
	a4 = Mem0[a4 + 0x00000000:word32]
	branch a4 == 0x00000000 l4020B66C
	// succ:  l4020B65D l4020B66C
l4020B65D:
	branch a3 == 0x00000000 l4020B66C
	// succ:  l4020B65F l4020B66C
l4020B65F:
	a3 = Mem0[a3 + 0x00000000:word32]
	branch a3 == 0x00000000 l4020B66C
	// succ:  l4020B663 l4020B66C
l4020B663:
	a4 = 0x4020B420
	a2 = a4 + a2 * 0x00000004
	Mem0[a2:word32] = a3
	// succ:  l4020B66C
l4020B66C:
	return
	// succ:  dns_setserver_exit
dns_setserver_exit:


// dns_tmr
// Return size: 0
void dns_tmr()
dns_tmr_entry:
	// succ:  l4020B670
l4020B670:
	a1 = fp
	a2 = 0x4020B424
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a2 == 0x00000000 l4020B684
	// succ:  l4020B67F l4020B684
l4020B67F:
	a2 = 0
	a0 = 0x4020B684
	call fn4030B528 (retsize: 0;)
	// succ:  l4020B684
l4020B684:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  dns_tmr_exit
dns_tmr_exit:


// tcp_update_rcv_ann_wnd
// Return size: 0
void tcp_update_rcv_ann_wnd()
tcp_update_rcv_ann_wnd_entry:
	// succ:  l4020B690
l4020B690:
	a1 = fp
	v4 = Mem0[a2 + 0x0000003A:uint16]
	a4 = (uint32) v4
	a3 = 0x4020B68C
	a6 = Mem0[a2 + 0x0000002C:word32]
	v9 = Mem0[a2 + 0x00000030:uint16]
	a5 = (uint32) v9
	a7 = Mem0[a2 + 0x00000034:word32]
	branch a3 <u a4 l4020B6A4
	// succ:  l4020B6A1 l4020B6A4
l4020B6A1:
	a3 = a4 | a4
	// succ:  l4020B6A4
l4020B6A4:
	a4 = a5 - a7
	a4 = a4 + a6
	a3 = a4 - a3
	branch a3 < 0x00000000 l4020B6B8
	// succ:  l4020B6AF l4020B6B8
l4020B6AF:
	Mem0[a2 + 0x00000032:word16] = a5
	a2 = a4
	return
	// succ:  tcp_update_rcv_ann_wnd_exit
l4020B6B8:
	a3 = a6 - a7
	branch a3 < 1 l4020B6C8
	// succ:  l4020B6BE l4020B6C8
l4020B6BE:
	a3 = 0
	Mem0[a2 + 0x00000032:word16] = a3
	a2 = 0
	return
	// succ:  tcp_update_rcv_ann_wnd_exit
l4020B6C8:
	a6 = a7 - a6
	Mem0[a2 + 0x00000032:word16] = a6
	a2 = 0
	return
	// succ:  tcp_update_rcv_ann_wnd_exit
tcp_update_rcv_ann_wnd_exit:


// tcp_recved
// Return size: 0
void tcp_recved()
tcp_recved_entry:
	// succ:  l4020B6D8
l4020B6D8:
	a1 = fp
	v4 = Mem0[a2 + 0x00000030:uint16]
	a4 = (uint32) v4
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a3 = a3 + a4
	a12 = a2
	a2 = 0x4020B6D4
	Mem0[a1 + 0x0000000C:word32] = a0
	a3 = a3 & 0x0000FFFF
	branch a2 <u a3 l4020B6F5
	// succ:  l4020B6EF l4020B6F5
l4020B6EF:
	Mem0[a12 + 0x00000030:word16] = a3
	goto l4020B6F8
	// succ:  l4020B6F8
l4020B6F5:
	Mem0[a12 + 0x00000030:word16] = a2
	// succ:  l4020B6F8
l4020B6F8:
	a2 = a12 | a12
	a0 = 0x4020B6FE
	call fn4030B690 (retsize: 0;)
	a3 = 0x000005B3
	branch a3 >= a2 l4020B715
	// succ:  l4020B704 l4020B715
l4020B704:
	v9 = Mem0[a12 + 0x00000022:byte]
	a3 = (uint32) v9
	a2 = 0x00000002
	a2 = a3 | a2
	Mem0[a12 + 0x00000022:byte] = a2
	a2 = a12
	a0 = 0x4020B715
	call tcp_output (retsize: 0;)
	// succ:  l4020B715
l4020B715:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_recved_exit
tcp_recved_exit:


// tcp_seg_free
// Return size: 0
void tcp_seg_free()
tcp_seg_free_entry:
	// succ:  l4020B720
l4020B720:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a2 | a2
	branch a2 == 0x00000000 l4020B73D
	// succ:  l4020B72E l4020B73D
l4020B72E:
	a2 = Mem0[a2 + 0x00000004:word32]
	branch a2 == 0x00000000 l4020B735
	// succ:  l4020B732 l4020B735
l4020B732:
	a0 = 0x4020B735
	call pbuf_free (retsize: 0;)
	// succ:  l4020B735
l4020B735:
	a2 = a12
	a0 = 0x402034CC
	v6 = a0
	a0 = 0x4020B73D
	call v6 (retsize: 0;)
	// succ:  l4020B73D
l4020B73D:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_seg_free_exit
tcp_seg_free_exit:


// tcp_pcb_purge
// Return size: 0
void tcp_pcb_purge()
tcp_pcb_purge_entry:
	// succ:  l4020B748
l4020B748:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = a2
	a2 = Mem0[a2 + 0x00000018:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	branch a2 <u 0x00000002 l4020B7AA
	// succ:  l4020B758 l4020B7AA
l4020B758:
	branch a2 == 10 l4020B7AA
	// succ:  l4020B75B l4020B7AA
l4020B75B:
	a2 = Mem0[a13 + 0x00000078:word32]
	branch a2 == 0x00000000 l4020B76A
	// succ:  l4020B761 l4020B76A
l4020B761:
	a0 = 0x4020B764
	call pbuf_free (retsize: 0;)
	a2 = 0x00000000
	Mem0[a13 + 0x00000078:word32] = a2
	// succ:  l4020B76A
l4020B76A:
	a3 = -1
	a2 = Mem0[a13 + 0x00000070:word32]
	Mem0[a13 + 0x00000038:word16] = a3
	branch a2 != 0x00000000 l4020B77C
	// succ:  l4020B774 l4020B77C
l4020B774:
	a2 = Mem0[a13 + 0x00000074:word32]
	branch a2 != 0x00000000 l4020B79A
	// succ:  l4020B779 l4020B79A
l4020B779:
	goto l4020B78C
	// succ:  l4020B78C
l4020B77C:
	a12 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x4020B781
	call fn4030B720 (retsize: 0;)
	branch a12 == 0x00000000 l4020B774
	// succ:  l4020B784 l4020B774
l4020B784:
	a2 = a12
	goto l4024B77C
	// succ:  l4024B77C
l4020B78C:
	a2 = 0
	Mem0[a13 + 0x00000070:word32] = a2
	Mem0[a13 + 0x00000074:word32] = a2
	Mem0[a13 + 0x0000006E:word16] = a2
	goto l4020B7AA
	// succ:  l4020B7AA
l4020B79A:
	a12 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x4020B79F
	call fn4030B720 (retsize: 0;)
	branch a12 == 0x00000000 l4020B78C
	// succ:  l4020B7A2 l4020B78C
l4020B7A2:
	a2 = a12
	goto l4024B79A
	// succ:  l4024B79A
l4020B7AA:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_pcb_purge_exit
l4024B77C:
l4024B79A:
tcp_pcb_purge_exit:


// tcp_slowtmr
// Return size: 0
void tcp_slowtmr()
tcp_slowtmr_entry:
	// succ:  l4020B7D4
l4020B7D4:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000024:word32] = a13
	a4 = 0x4020B7BC
	a13 = 0x4020B7B8
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	a3 = Mem0[a13 + 0x00000000:word32]
	v11 = Mem0[a4 + 0x00000000:byte]
	a2 = (uint32) v11
	a3 = a3 + 1
	a2 = a2 + 1
	Mem0[a13:word32] = a3
	Mem0[a4:byte] = a2
	// succ:  l4020B7F5
l4020B7F5:
	a2 = 0x4020B7C0
	a15 = Mem0[a2 + 0x00000000:word32]
	branch a15 != 0x00000000 l4020B810
	// succ:  l4020B7FC l4020B810
l4020B7FC:
	a3 = 0x4020B7C4
	a12 = 0
	a15 = Mem0[a3 + 0x00000000:word32]
	a14 = 0x000000F0
	branch a15 == a12 l4020B80C
	// succ:  l4020B809 l4020B80C
l4020B809:
	goto l4020BA5C
	// succ:  l4020BA5C
l4020B80C:
	goto l4020BAA4
	// succ:  l4020BAA4
l4020B810:
	a14 = 0
	a4 = 0x4020B7BC
	v12 = Mem0[a15 + 0x00000025:byte]
	a3 = (uint32) v12
	v13 = Mem0[a4 + 0x00000000:byte]
	a2 = (uint32) v13
	branch a3 != a2 l4020B825
	// succ:  l4020B81E l4020B825
l4020B81E:
	a12 = Mem0[a15 + 0x0000000C:word32]
	goto l4020BA54
	// succ:  l4020BA54
l4020B825:
	a4 = Mem0[a15 + 0x00000018:word32]
	Mem0[a15 + 0x00000025:byte] = a2
	v15 = Mem0[a15 + 0x0000004A:byte]
	a2 = (uint32) v15
	branch a4 != 2 l4020B838
	// succ:  l4020B830 l4020B838
l4020B830:
	a5 = 1
	branch a2 != 3 l4020B838
	// succ:  l4020B835 l4020B838
l4020B835:
	goto l4020B904
	// succ:  l4020B904
l4020B838:
	a5 = 1
	branch a2 != 6 l4020B840
	// succ:  l4020B83D l4020B840
l4020B83D:
	goto l4020B8EA
	// succ:  l4020B8EA
l4020B840:
	v25 = Mem0[a15 + 0x0000009D:byte]
	a3 = (uint32) v25
	branch a3 == 0x00000000 l4020B87D
	// succ:  l4020B845 l4020B87D
l4020B845:
	a5 = 0x4020B7C8
	v26 = Mem0[a15 + 0x0000009C:byte]
	a2 = (uint32) v26
	a5 = a5 + a3
	a5 = a5 - 1
	a2 = a2 + 1
	a2 = a2 & 0x000000FF
	v27 = Mem0[a5 + 0x00000000:byte]
	a6 = (uint32) v27
	Mem0[a15 + 0x0000009C:byte] = a2
	a5 = 0
	branch a2 >=u a6 l4020B862
	// succ:  l4020B85F l4020B862
l4020B85F:
	goto l4020B8EA
	// succ:  l4020B8EA
l4020B862:
	Mem0[a15 + 0x0000009C:byte] = a5
	branch a3 >=u 0x00000007 l4020B86D
	// succ:  l4020B868 l4020B86D
l4020B868:
	a3 = a3 + 1
	Mem0[a15 + 0x0000009D:byte] = a3
	// succ:  l4020B86D
l4020B86D:
	a2 = a15 | a15
	a0 = 0x4020B873
	call tcp_zero_window_probe (retsize: 0;)
	a5 = 0x00000000
	a4 = Mem0[a15 + 0x00000018:word32]
	goto l4020B8EA
	// succ:  l4020B8EA
l4020B87D:
	v28 = Mem0[a15 + 0x00000038:int16]
	a3 = (int32) v28
	branch a3 < 0x00000000 l4020B889
	// succ:  l4020B883 l4020B889
l4020B883:
	a3 = a3 + 1
	Mem0[a15 + 0x00000038:word16] = a3
	// succ:  l4020B889
l4020B889:
	a5 = Mem0[a15 + 0x00000074:word32]
	branch a5 == 0x00000000 l4020B8EA
	// succ:  l4020B88F l4020B8EA
l4020B88F:
	v29 = Mem0[a15 + 0x00000038:int16]
	a6 = (int32) v29
	v30 = Mem0[a15 + 0x00000048:int16]
	a3 = (int32) v30
	a5 = 0
	branch a6 < a3 l4020B8EA
	// succ:  l4020B89A l4020B8EA
l4020B89A:
	branch a4 == 2 l4020B8BC
	// succ:  l4020B89D l4020B8BC
l4020B89D:
	v31 = Mem0[a15 + 0x00000044:uint16]
	a5 = (uint32) v31
	a3 = 0x4020B7CC
	a5 = a5 << 16
	a3 = a3 + a2
	v32 = Mem0[a15 + 0x00000046:int16]
	a4 = (int32) v32
	a2 = a5 >> 19
	v33 = Mem0[a3 + 0x00000000:byte]
	a3 = (uint32) v33
	a2 = a2 + a4
	SAR = 0x00000020 - a3
	a2 = a2 << SAR
	Mem0[a15 + 0x00000048:word16] = a2
	// succ:  l4020B8BC
l4020B8BC:
	a4 = 0
	v35 = Mem0[a15 + 0x00000050:uint16]
	a2 = (uint32) v35
	v36 = Mem0[a15 + 0x00000064:uint16]
	a3 = (uint32) v36
	Mem0[a15 + 0x00000038:word16] = a4
	branch a3 >=u a2 l4020B8CC
	// succ:  l4020B8CA l4020B8CC
l4020B8CA:
	a2 = a3
	// succ:  l4020B8CC
l4020B8CC:
	v37 = Mem0[a15 + 0x0000003A:uint16]
	a3 = (uint32) v37
	a2 = a2 >>u 1
	Mem0[a15 + 0x00000052:word16] = a2
	a4 = a3 << 31
	branch a2 >= a4 l4020B8DE
	// succ:  l4020B8DB l4020B8DE
l4020B8DB:
	Mem0[a15 + 0x00000052:word16] = a4
	// succ:  l4020B8DE
l4020B8DE:
	Mem0[a15 + 0x00000050:word16] = a3
	a2 = a15
	a0 = 0x4020B8E6
	call tcp_rexmit_rto (retsize: 0;)
	a4 = Mem0[a15 + 0x00000018:word32]
	a5 = 0
	// succ:  l4020B8EA
l4020B8EA:
	branch a4 != 6 l4020B904
	// succ:  l4020B8ED l4020B904
l4020B8ED:
	v24 = Mem0[a15 + 0x00000022:byte]
	a2 = (uint32) v24
	branch (a2 & 0x00000010) == 0x00000000 l4020B904
	// succ:  l4020B8F3 l4020B904
l4020B8F3:
	a3 = Mem0[a13 + 0x00000000:word32]
	a2 = Mem0[a15 + 0x00000028:word32]
	a2 = a3 - a2
	a3 = 40
	branch a3 >=u a2 l4020B904
	// succ:  l4020B8FF l4020B904
l4020B8FF:
	a5 = a5 + 1
	a5 = a5 & 0x000000FF
	// succ:  l4020B904
l4020B904:
	v16 = Mem0[a15 + 0x00000008:byte]
	a2 = (uint32) v16
	a3 = 8
	a12 = 0
	branch (a2 & a3) == 0x00000000 l4020B984
	// succ:  l4020B90E l4020B984
l4020B90E:
	branch a4 == 7 l4020B914
	// succ:  l4020B911 l4020B914
l4020B911:
	branch a4 != 4 l4020B984
	// succ:  l4020B914 l4020B984
l4020B914:
	a12 = Mem0[a15 + 0x00000094:word32]
	a2 = Mem0[a15 + 0x00000098:word32]
	a7 = Mem0[a15 + 0x00000090:word32]
	a6 = Mem0[a13 + 0x00000000:word32]
	a9 = Mem0[a15 + 0x00000028:word32]
	a2 = a12 * a2
	a3 = 0x000001F4
	a2 = a2 + a7
	a9 = a6 - a9
	Mem0[a1 + 0x00000008:word32] = a4
	Mem0[a1 + 0x0000000C:word32] = a5
	Mem0[a1 + 0x00000004:word32] = a7
	Mem0[a1:word32] = a9
	a0 = 0x40204388
	v20 = a0
	a0 = 0x4020B93A
	call v20 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a4 = Mem0[a1 + 0x00000008:word32]
	a5 = Mem0[a1 + 0x0000000C:word32]
	a7 = Mem0[a1 + 0x00000004:word32]
	branch a2 >=u a3 l4020B950
	// succ:  l4020B945 l4020B950
l4020B945:
	a5 = a5 + 1
	a5 = a5 & 0x000000FF
	a12 = 1
	goto l4020B984
	// succ:  l4020B984
l4020B950:
	v21 = Mem0[a15 + 0x0000009E:byte]
	a2 = (uint32) v21
	a3 = 0x000001F4
	a2 = a2 * a12
	Mem0[a1 + 0x00000008:word32] = a4
	a2 = a2 + a7
	Mem0[a1 + 0x0000000C:word32] = a5
	a0 = 0x40204388
	v22 = a0
	a0 = 0x4020B968
	call v22 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a12 = 0
	a4 = Mem0[a1 + 0x00000008:word32]
	a5 = Mem0[a1 + 0x0000000C:word32]
	branch a2 >=u a3 l4020B984
	// succ:  l4020B973 l4020B984
l4020B973:
	a2 = a15
	a0 = 0x4020B978
	call tcp_keepalive (retsize: 0;)
	v23 = Mem0[a15 + 0x0000009E:byte]
	a2 = (uint32) v23
	a4 = Mem0[a15 + 0x00000018:word32]
	a2 = a2 + 1
	Mem0[a15 + 0x0000009E:byte] = a2
	a5 = Mem0[a1 + 0x0000000C:word32]
	// succ:  l4020B984
l4020B984:
	branch a4 != 3 l4020B99E
	// succ:  l4020B987 l4020B99E
l4020B987:
	a3 = Mem0[a13 + 0x00000000:word32]
	a2 = Mem0[a15 + 0x00000028:word32]
	a2 = a3 - a2
	a3 = 40
	branch a3 >=u a2 l4020B9B1
	// succ:  l4020B993 l4020B9B1
l4020B993:
	a5 = a5 + 1
	a5 = a5 & 0x000000FF
	goto l4020B9B1
	// succ:  l4020B9B1
l4020B99E:
	a2 = 9
	branch a4 != a2 l4020B9B1
	// succ:  l4020B9A3 l4020B9B1
l4020B9A3:
	a3 = Mem0[a13 + 0x00000000:word32]
	a2 = Mem0[a15 + 0x00000028:word32]
	a2 = a3 - a2
	a3 = 0x000000F0
	branch a3 <u a2 l4020B9B4
	// succ:  l4020B9B1 l4020B9B4
l4020B9B1:
	branch a5 == 0x00000000 l4020BA11
	// succ:  l4020B9B4 l4020BA11
l4020B9B4:
	a2 = a15 | a15
	a0 = 0x4020B9BA
	call fn4030B748 (retsize: 0;)
	a2 = Mem0[a15 + 0x0000000C:word32]
	branch a14 == 0x00000000 l4020B9C5
	// succ:  l4020B9C0 l4020B9C5
l4020B9C0:
	Mem0[a14 + 0x0000000C:word32] = a2
	goto l4020B9CB
	// succ:  l4020B9CB
l4020B9C5:
	a4 = 0x4020B7C0
	Mem0[a4:word32] = a2
	// succ:  l4020B9CB
l4020B9CB:
	branch a12 == 0x00000000 l4020B9E1
	// succ:  l4020B9CE l4020B9E1
l4020B9CE:
	a2 = Mem0[a15 + 0x00000054:word32]
	a3 = Mem0[a15 + 0x0000002C:word32]
	v38 = Mem0[a15 + 0x0000001E:uint16]
	a6 = (uint32) v38
	v39 = Mem0[a15 + 0x00000020:uint16]
	a7 = (uint32) v39
	a4 = a15
	a5 = a15 + 4
	a0 = 0x4020B9E1
	call tcp_rst (retsize: 0;)
	// succ:  l4020B9E1
l4020B9E1:
	a5 = Mem0[a15 + 0x0000008C:word32]
	a3 = Mem0[a15 + 0x00000010:word32]
	a2 = a15
	a12 = Mem0[a15 + 0x0000000C:word32]
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x0000000C:word32] = a5
	a0 = 0x402034CC
	v42 = a0
	a0 = 0x4020B9F4
	call v42 (retsize: 0;)
	a15 = 0x4020B7D0
	a2 = 0
	Mem0[a15:byte] = a2
	a5 = Mem0[a1 + 0x0000000C:word32]
	branch a5 == 0x00000000 l4020BA54
	// succ:  l4020BA01 l4020BA54
l4020BA01:
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = -10
	a0 = 0x4020BA08
	call a5 (retsize: 0;)
	v43 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v43
	branch a2 == 0x00000000 l4020BA54
	// succ:  l4020BA0E l4020BA54
l4020BA0E:
	goto l4024B7F5
	// succ:  l4024B7F5
l4020BA11:
	v40 = Mem0[a15 + 0x00000023:byte]
	a2 = (uint32) v40
	v41 = Mem0[a15 + 0x00000024:byte]
	a3 = (uint32) v41
	a2 = a2 + 1
	a2 = a2 & 0x000000FF
	Mem0[a15 + 0x00000023:byte] = a2
	a12 = Mem0[a15 + 0x0000000C:word32]
	branch a2 <u a3 l4020BA52
	// succ:  l4020BA24 l4020BA52
l4020BA24:
	a14 = 0x4020B7D0
	a6 = Mem0[a15 + 0x00000088:word32]
	Mem0[a15 + 0x00000023:byte] = a5
	Mem0[a14:byte] = a5
	branch a6 != 0x00000000 l4020BA3F
	// succ:  l4020BA32 l4020BA3F
l4020BA32:
	a2 = a15
	a0 = 0x4020BA37
	call tcp_output (retsize: 0;)
	a14 = a15
	goto l4020BA54
	// succ:  l4020BA54
l4020BA3F:
	a2 = Mem0[a15 + 0x00000010:word32]
	a3 = a15
	a0 = 0x4020BA46
	call a6 (retsize: 0;)
	v44 = Mem0[a14 + 0x00000000:byte]
	a3 = (uint32) v44
	a2 = a2 & 0x000000FF
	branch a3 != 0x00000000 l4020B7F5
	// succ:  l4020BA4F l4020B7F5
l4020BA4F:
	branch a2 == 0x00000000 l4020BA32
	// succ:  l4020BA52 l4020BA32
l4020BA52:
	a14 = a15
	// succ:  l4020BA54
l4020BA54:
	branch a12 == 0x00000000 l4020B7FC
	// succ:  l4020BA57 l4020B7FC
l4020BA57:
	a15 = a12
	goto l4024B812
	// succ:  l4024B812
l4020BA5C:
	a5 = Mem0[a13 + 0x00000000:word32]
	a4 = Mem0[a15 + 0x00000028:word32]
	a2 = a15
	a4 = a5 - a4
	branch a14 <u a4 l4020BA98
	// succ:  l4020BA68 l4020BA98
l4020BA68:
	goto l4020BA91
	// succ:  l4020BA91
l4020BA6C:
	a2 = Mem0[a15 + 0x0000000C:word32]
	Mem0[a12 + 0x0000000C:word32] = a2
	a4 = Mem0[a15 + 0x0000000C:word32]
	Mem0[a1:word32] = a4
	// succ:  l4020BA80
l4020BA80:
	a2 = a15
	a0 = 0x402034CC
	v45 = a0
	a0 = 0x4020BA88
	call v45 (retsize: 0;)
	a15 = Mem0[a1 + 0x00000000:word32]
	branch a15 != 0x00000000 l4020BA5C
	// succ:  l4020BA8D l4020BA5C
l4020BA8D:
	goto l4020BAA4
	// succ:  l4020BAA4
l4020BA91:
	a12 = a15
	a15 = Mem0[a15 + 0x0000000C:word32]
	goto l4024BA8A
	// succ:  l4024BA8A
l4020BA98:
	a0 = 0x4020BA9B
	call fn4030B748 (retsize: 0;)
	branch a12 != 0x00000000 l4020BA6C
	// succ:  l4020BA9E l4020BA6C
l4020BA9E:
	goto l4024BA77
	// succ:  l4024BA77
l4020BAA4:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  tcp_slowtmr_exit
l4024B7F5:
l4024B812:
l4024BA77:
l4024BA8A:
tcp_slowtmr_exit:


// tcp_pcb_remove
// Return size: 0
void tcp_pcb_remove()
tcp_pcb_remove_entry:
	// succ:  l4020BAB8
l4020BAB8:
	a1 = fp
	a1 = a1 - 16
	a5 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a3
	branch a5 != a3 l4020BACD
	// succ:  l4020BAC6 l4020BACD
l4020BAC6:
	a3 = Mem0[a3 + 0x0000000C:word32]
	Mem0[a2:word32] = a3
	goto l4020BAFA
	// succ:  l4020BAFA
l4020BACD:
	a2 = 0x4020BAB4
	Mem0[a2:word32] = a5
	branch a5 == 0x00000000 l4020BAFA
	// succ:  l4020BAD4 l4020BAFA
l4020BAD4:
	a4 = Mem0[a5 + 0x0000000C:word32]
	branch a4 != a3 l4020BAF5
	// succ:  l4020BAD9 l4020BAF5
l4020BAD9:
	goto l4020BAEB
	// succ:  l4020BAEB
l4020BADC:
	a5 = Mem0[a4 + 0x0000000C:word32]
	branch a5 == a12 l4020BAE6
	// succ:  l4020BAE1 l4020BAE6
l4020BAE1:
	a4 = a5
	goto l4020BAF5
	// succ:  l4020BAF5
l4020BAE6:
	Mem0[a2:word32] = a4
	goto l4020BAED
	// succ:  l4020BAED
l4020BAEB:
	a4 = a5
	// succ:  l4020BAED
l4020BAED:
	a2 = Mem0[a12 + 0x0000000C:word32]
	Mem0[a4 + 0x0000000C:word32] = a2
	goto l4020BAFA
	// succ:  l4020BAFA
l4020BAF5:
	branch a4 != 0x00000000 l4020BADC
	// succ:  l4020BAF8 l4020BADC
l4020BAF8:
	Mem0[a2:word32] = a4
	// succ:  l4020BAFA
l4020BAFA:
	a2 = 0x00000000
	Mem0[a12 + 0x0000000C:word32] = a2
	a2 = a12
	a0 = 0x4020BB05
	call fn4030B748 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000018:word32]
	branch a2 == 1 l4020BB20
	// succ:  l4020BB0A l4020BB20
l4020BB0A:
	branch a2 == 10 l4020BB20
	// succ:  l4020BB0D l4020BB20
l4020BB0D:
	v9 = Mem0[a12 + 0x00000022:byte]
	a2 = (uint32) v9
	branch (a2 & 0x00000001) == 0x00000000 l4020BB20
	// succ:  l4020BB13 l4020BB20
l4020BB13:
	a3 = 2
	a2 = a2 | a3
	Mem0[a12 + 0x00000022:byte] = a2
	a2 = a12
	a0 = 0x4020BB20
	call tcp_output (retsize: 0;)
	// succ:  l4020BB20
l4020BB20:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = 0
	Mem0[a12 + 0x00000018:word32] = a2
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_pcb_remove_exit
tcp_pcb_remove_exit:


// tcp_close_shutdown
// Return size: 0
void tcp_close_shutdown()
tcp_close_shutdown_entry:
	// succ:  l4020BB3C
l4020BB3C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a13
	a12 = a2
	a2 = Mem0[a2 + 0x00000018:word32]
	branch a3 == 0x00000000 l4020BC00
	// succ:  l4020BB4C l4020BC00
l4020BB4C:
	a4 = 1
	a5 = a2 - 7
	a3 = 0
	branch a5 != 0x00000000 l4020BB56
	// succ:  l4020BB53_1 l4020BB56
l4020BB53_1:
	a3 = a4
	// succ:  l4020BB56
l4020BB56:
	a3 = a3 & 0x000000FF
	branch a3 != 0x00000000 l4020BB64
	// succ:  l4020BB5B l4020BB64
l4020BB5B:
	a5 = a2 - 4
	branch a5 != 0x00000000 l4020BB61
	// succ:  l4020BB5E_2 l4020BB61
l4020BB5E_2:
	a3 = a4
	// succ:  l4020BB61
l4020BB61:
	branch a3 == 0x00000000 l4020BC00
	// succ:  l4020BB64 l4020BC00
l4020BB64:
	a3 = Mem0[a12 + 0x00000078:word32]
	branch a3 != 0x00000000 l4020BB75
	// succ:  l4020BB69 l4020BB75
l4020BB69:
	v10 = Mem0[a12 + 0x00000030:uint16]
	a4 = (uint32) v10
	a3 = 0x4020B6D4
	branch a4 != a3 l4020BB75
	// succ:  l4020BB72 l4020BB75
l4020BB72:
	goto l4020BC00
	// succ:  l4020BC00
l4020BB75:
	a3 = Mem0[a12 + 0x0000002C:word32]
	v12 = Mem0[a12 + 0x0000001E:uint16]
	a6 = (uint32) v12
	v14 = Mem0[a12 + 0x00000020:uint16]
	a7 = (uint32) v14
	a2 = Mem0[a12 + 0x00000054:word32]
	a4 = a12 | a12
	a5 = a12 + 4
	a0 = 0x4020BB89
	call tcp_rst (retsize: 0;)
	a2 = a12
	a0 = 0x4020BB8E
	call fn4030B748 (retsize: 0;)
	a2 = 0x4020B7C0
	a3 = Mem0[a2 + 0x00000000:word32]
	branch a3 != a12 l4020BB9D
	// succ:  l4020BB96 l4020BB9D
l4020BB96:
	a3 = Mem0[a12 + 0x0000000C:word32]
	Mem0[a2:word32] = a3
	goto l4020BBC9
	// succ:  l4020BBC9
l4020BB9D:
	a4 = 0x4020BAB4
	Mem0[a4:word32] = a3
	branch a3 == 0x00000000 l4020BBC9
	// succ:  l4020BBA4 l4020BBC9
l4020BBA4:
	a2 = Mem0[a3 + 0x0000000C:word32]
	branch a2 != a12 l4020BBC4
	// succ:  l4020BBA9 l4020BBC4
l4020BBA9:
	goto l4020BBBB
	// succ:  l4020BBBB
l4020BBAC:
	a3 = Mem0[a2 + 0x0000000C:word32]
	branch a3 == a12 l4020BBB6
	// succ:  l4020BBB1 l4020BBB6
l4020BBB1:
	a2 = a3
	goto l4020BBC4
	// succ:  l4020BBC4
l4020BBB6:
	Mem0[a4:word32] = a2
	goto l4020BBBD
	// succ:  l4020BBBD
l4020BBBB:
	a2 = a3
	// succ:  l4020BBBD
l4020BBBD:
	a4 = Mem0[a12 + 0x0000000C:word32]
	Mem0[a2 + 0x0000000C:word32] = a4
	goto l4020BBC9
	// succ:  l4020BBC9
l4020BBC4:
	branch a2 != 0x00000000 l4020BBAC
	// succ:  l4020BBC7 l4020BBAC
l4020BBC7:
	Mem0[a4:word32] = a2
	// succ:  l4020BBC9
l4020BBC9:
	a3 = 0x4020B7D0
	a13 = 0x00000000
	a4 = 0x00000001
	a2 = Mem0[a12 + 0x00000018:word32]
	Mem0[a12 + 0x0000000C:word32] = a13
	Mem0[a3:byte] = a4
	branch a2 != 4 l4020BBF2
	// succ:  l4020BBDD l4020BBF2
l4020BBDD:
	a2 = 0x4020B7C4
	a4 = 10
	a3 = Mem0[a2 + 0x00000000:word32]
	Mem0[a12 + 0x00000018:word32] = a4
	Mem0[a12 + 0x0000000C:word32] = a3
	Mem0[a2:word32] = a12
	a0 = 0x4020BBED
	call tcp_timer_needed (retsize: 0;)
	a2 = a13
	goto l4020BCBC
	// succ:  l4020BCBC
l4020BBF2:
	a2 = a12
	a0 = 0x402034CC
	v15 = a0
	a0 = 0x4020BBFA
	call v15 (retsize: 0;)
	a2 = a13
	goto l4020BCBC
	// succ:  l4020BCBC
l4020BC00:
	branch a2 <u 0x00000008 l4020BC06
	// succ:  l4020BC03 l4020BC06
l4020BC03:
	goto l4020BCBA
	// succ:  l4020BCBA
l4020BC06:
	a3 = 0x4020BB30
	a2 = a3 + a2 * 0x00000004
	a2 = Mem0[a2 + 0x00000000:word32]
	call a2 (retsize: 4;)
	return
	// succ:  tcp_close_shutdown_exit
l4020BCBA:
	a2 = 0
	// succ:  l4020BCBC
l4020BCBC:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_close_shutdown_exit
tcp_close_shutdown_exit:


// tcp_close
// Return size: 0
void tcp_close()
tcp_close_entry:
	// succ:  l4020BCC8
l4020BCC8:
	a1 = fp
	a1 = a1 - 16
	a3 = Mem0[a2 + 0x00000018:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a3 == 1 l4020BCDD
	// succ:  l4020BCD2 l4020BCDD
l4020BCD2:
	v7 = Mem0[a2 + 0x00000022:byte]
	a4 = (uint32) v7
	a3 = 16
	a3 = a4 | a3
	Mem0[a2 + 0x00000022:byte] = a3
	// succ:  l4020BCDD
l4020BCDD:
	a3 = 0x00000001
	a0 = 0x4020BCE3
	call fn4030BB3C (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a2 & 0x000000FF
	a1 = a1 + 16
	return
	// succ:  tcp_close_exit
tcp_close_exit:


// tcp_recv_null
// Return size: 0
void tcp_recv_null()
tcp_recv_null_entry:
	// succ:  l4020BCF0
l4020BCF0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a4
	a5 = a5 & 0x000000FF
	a4 = a3
	branch a12 == 0x00000000 l4020BD15
	// succ:  l4020BD02 l4020BD15
l4020BD02:
	v8 = Mem0[a12 + 0x00000008:uint16]
	a3 = (uint32) v8
	a2 = a4 | a4
	a0 = 0x4020BD0B
	call fn4030B6D8 (retsize: 0;)
	a2 = a12
	a0 = 0x4020BD10
	call pbuf_free (retsize: 0;)
	a2 = 0
	goto l4020BD24
	// succ:  l4020BD24
l4020BD15:
	a2 = a12 | a12
	branch a5 != 0x00000000 l4020BD24
	// succ:  l4020BD1B l4020BD24
l4020BD1B:
	a2 = a3 | a3
	a0 = 0x4020BD21
	call fn4030BCC8 (retsize: 0;)
	a2 = a2 & 0x000000FF
	// succ:  l4020BD24
l4020BD24:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_recv_null_exit
tcp_recv_null_exit:


// tcp_process_refused_data
// Return size: 0
void tcp_process_refused_data()
tcp_process_refused_data_entry:
	// succ:  l4020BD30
l4020BD30:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = Mem0[a2 + 0x00000078:word32]
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1:word32] = a14
	a5 = 0
	a6 = Mem0[a2 + 0x00000080:word32]
	v10 = Mem0[a13 + 0x0000000D:byte]
	a14 = (uint32) v10
	Mem0[a2 + 0x00000078:word32] = a5
	a12 = a2
	branch a6 == a5 l4020BD5E
	// succ:  l4020BD4E l4020BD5E
l4020BD4E:
	a2 = Mem0[a2 + 0x00000010:word32]
	a3 = a12
	a4 = a13 | a13
	a0 = 0x4020BD58
	call a6 (retsize: 0;)
	a2 = a2 & 0x000000FF
	goto l4020BD6C
	// succ:  l4020BD6C
l4020BD5E:
	a2 = a6
	a3 = a12
	a4 = a13
	a5 = a6
	a0 = 0x4020BD69
	call fn4030BCF0 (retsize: 0;)
	a2 = a2 & 0x000000FF
	// succ:  l4020BD6C
l4020BD6C:
	branch a2 != 0x00000000 l4020BDA4
	// succ:  l4020BD6E l4020BDA4
l4020BD6E:
	branch (a14 & 0x00000020) == 0x00000000 l4020BDB4
	// succ:  l4020BD71 l4020BDB4
l4020BD71:
	v13 = Mem0[a12 + 0x00000030:uint16]
	a2 = (uint32) v13
	a3 = 0x4020B6D4
	branch a2 == a3 l4020BD7F
	// succ:  l4020BD7A l4020BD7F
l4020BD7A:
	a2 = a2 + 1
	Mem0[a12 + 0x00000030:word16] = a2
	// succ:  l4020BD7F
l4020BD7F:
	a6 = Mem0[a12 + 0x00000080:word32]
	branch a6 == 0x00000000 l4020BDB2
	// succ:  l4020BD84 l4020BDB2
l4020BD84:
	a4 = 0
	a2 = Mem0[a12 + 0x00000010:word32]
	a3 = a12 | a12
	a5 = a4 | a4
	a0 = 0x4020BD91
	call a6 (retsize: 0;)
	a2 = a2 << 8
	a3 = a2 >> 24
	a2 = -10
	branch a3 != a2 l4020BDB2
	// succ:  l4020BD9C l4020BDB2
l4020BD9C:
	a2 = 0x000000F6
	a2 = 0x000000F6
	goto l4020BDB4
	// succ:  l4020BDB4
l4020BDA4:
	a2 = a2 << 8
	a2 = a2 >> 24
	a3 = -10
	branch a2 == a3 l4020BD9C
	// succ:  l4020BDAF l4020BD9C
l4020BDAF:
	Mem0[a12 + 0x00000078:word32] = a13
	// succ:  l4020BDB2
l4020BDB2:
	a2 = 0
	// succ:  l4020BDB4
l4020BDB4:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_process_refused_data_exit
tcp_process_refused_data_exit:


// tcp_fasttmr
// Return size: 0
void tcp_fasttmr()
tcp_fasttmr_entry:
	// succ:  l4020BDC4
l4020BDC4:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000000C:word32] = a15
	a15 = 0x4020B7BC
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a12
	v9 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v9
	a14 = 2
	a2 = a2 + 1
	Mem0[a15:byte] = a2
	a13 = -4
	a2 = 0x4020B7C0
	a12 = Mem0[a2 + 0x00000000:word32]
	goto l4020BE2D
	// succ:  l4020BE2D
l4020BDE8:
	goto l4024BDE8
	// succ:  l4024BDE8
l4020BE2D:
	branch a12 == 0x00000000 l4020BE3C
	// succ:  l4020BE2F l4020BE3C
l4020BE2F:
	v10 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v10
	v12 = Mem0[a12 + 0x00000025:byte]
	a4 = (uint32) v12
	branch a4 == a2 l4020BDE8
	// succ:  l4020BE38 l4020BDE8
l4020BE38:
	goto l4024BDED
	// succ:  l4024BDED
l4020BE3C:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  tcp_fasttmr_exit
l4024BDE8:
l4024BDED:
tcp_fasttmr_exit:


// tcp_tmr
// Return size: 0
void tcp_tmr()
tcp_tmr_entry:
	// succ:  l4020BE50
l4020BE50:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4020BE58
	call fn4030BDC4 (retsize: 0;)
	a3 = 0x4020BE4C
	v6 = Mem0[a3 + 0x00000000:byte]
	a2 = (uint32) v6
	a2 = a2 + 1
	a2 = a2 & 0x000000FF
	Mem0[a3:byte] = a2
	branch (a2 & 0x00000001) == 0x00000000 l4020BE6C
	// succ:  l4020BE69 l4020BE6C
l4020BE69:
	a0 = 0x4020BE6C
	call fn4030B7D4 (retsize: 0;)
	// succ:  l4020BE6C
l4020BE6C:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_tmr_exit
tcp_tmr_exit:


// tcp_abandon
// Return size: 0
void tcp_abandon()
tcp_abandon_entry:
	// succ:  l4020BE74
l4020BE74:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = a2 | a2
	a2 = Mem0[a2 + 0x00000018:word32]
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a15
	a14 = a3
	branch a2 != 10 l4020BEA1
	// succ:  l4020BE8D l4020BEA1
l4020BE8D:
	a2 = 0x4020B7C4
	a3 = a12
	a0 = 0x4020BE95
	call fn4030BAB8 (retsize: 0;)
	a2 = a12
	a0 = 0x402034CC
	v10 = a0
	a0 = 0x4020BE9D
	call v10 (retsize: 0;)
	goto l4020BF1C
	// succ:  l4020BF1C
l4020BEA1:
	a4 = Mem0[a12 + 0x00000054:word32]
	a2 = 0x4020B7C0
	Mem0[a1 + 0x00000004:word32] = a4
	a4 = Mem0[a12 + 0x0000002C:word32]
	a3 = a12 | a12
	Mem0[a1 + 0x00000008:word32] = a4
	a4 = Mem0[a12 + 0x00000010:word32]
	a13 = Mem0[a12 + 0x0000008C:word32]
	Mem0[a1:word32] = a4
	a0 = 0x4020BEBC
	call fn4030BAB8 (retsize: 0;)
	a3 = 0x4020B7D0
	a4 = 1
	a2 = Mem0[a12 + 0x00000074:word32]
	Mem0[a3:byte] = a4
	branch a2 != 0x00000000 l4020BED1
	// succ:  l4020BEC9 l4020BED1
l4020BEC9:
	a2 = Mem0[a12 + 0x00000070:word32]
	branch a2 != 0x00000000 l4020BEE6
	// succ:  l4020BECE l4020BEE6
l4020BECE:
	goto l4020BEE1
	// succ:  l4020BEE1
l4020BED1:
	a15 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x4020BED6
	call fn4030B720 (retsize: 0;)
	branch a15 == 0x00000000 l4020BEC9
	// succ:  l4020BED9 l4020BEC9
l4020BED9:
	a2 = a15
	goto l4024BED1
	// succ:  l4024BED1
l4020BEE1:
	branch a14 == 0x00000000 l4020BF0A
	// succ:  l4020BEE3 l4020BF0A
l4020BEE3:
	goto l4020BEF6
	// succ:  l4020BEF6
l4020BEE6:
	a15 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x4020BEEB
	call fn4030B720 (retsize: 0;)
	branch a15 == 0x00000000 l4020BEE1
	// succ:  l4020BEEE l4020BEE1
l4020BEEE:
	a2 = a15
	goto l4024BEE6
	// succ:  l4024BEE6
l4020BEF6:
	v14 = Mem0[a12 + 0x0000001E:uint16]
	a6 = (uint32) v14
	v16 = Mem0[a12 + 0x00000020:uint16]
	a7 = (uint32) v16
	a2 = Mem0[a1 + 0x00000004:word32]
	a3 = Mem0[a1 + 0x00000008:word32]
	a4 = a12 | a12
	a5 = a12 + 4
	a0 = 0x4020BF0A
	call tcp_rst (retsize: 0;)
	// succ:  l4020BF0A
l4020BF0A:
	a2 = a12
	a0 = 0x402034CC
	v12 = a0
	a0 = 0x4020BF12
	call v12 (retsize: 0;)
	branch a13 == 0x00000000 l4020BF1C
	// succ:  l4020BF14 l4020BF1C
l4020BF14:
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = 0xFFFFFFF6
	a0 = 0x4020BF1C
	call a13 (retsize: 0;)
	// succ:  l4020BF1C
l4020BF1C:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  tcp_abandon_exit
l4024BED1:
l4024BEE6:
tcp_abandon_exit:


// tcp_abort
// Return size: 0
void tcp_abort()
tcp_abort_entry:
	// succ:  l4020BF2C
l4020BF2C:
	a1 = fp
	a1 = a1 - 16
	a3 = 0x00000001
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4020BF38
	call fn4030BE74 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_abort_exit
tcp_abort_exit:


// tcp_kill_timewait
// Return size: 0
void tcp_kill_timewait()
tcp_kill_timewait_entry:
	// succ:  l4020BF40
l4020BF40:
	a1 = fp
	a2 = 0x4020B7C4
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a2 != 0x00000000 l4020BF6C
	// succ:  l4020BF4C l4020BF6C
l4020BF4C:
	goto l4020BF7B
	// succ:  l4020BF7B
l4020BF6C:
	a3 = 0x4020B7B8
	a5 = Mem0[a2 + 0x00000028:word32]
	a6 = Mem0[a3 + 0x00000000:word32]
	a3 = a2
	a5 = a6 - a5
	goto l4024BF5C
	// succ:  l4024BF5C
l4020BF7B:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_kill_timewait_exit
l4024BF5C:
tcp_kill_timewait_exit:


// tcp_alloc
// Return size: 0
void tcp_alloc()
tcp_alloc_entry:
	// succ:  l4020BF94
l4020BF94:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	a12 = 0x402045B0
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a15
	a14 = a2 & 0x000000FF
	a13 = 3
	// succ:  l4020BFA9
l4020BFA9:
	a0 = 0x4020BFAC
	call fn40303108 (retsize: 0;)
	a13 = a13 - 1
	branch a12 <u a2 l4020BFB4
	// succ:  l4020BFB1 l4020BFB4
l4020BFB1:
	a0 = 0x4020BFB4
	call fn4030BF40 (retsize: 0;)
	// succ:  l4020BFB4
l4020BFB4:
	branch a13 != 0x00000000 l4020BFA9
	// succ:  l4020BFB7 l4020BFA9
l4020BFB7:
	a2 = 0x40209C38
	v9 = Mem0[a2 + 0x00000004:uint16]
	a15 = (uint32) v9
	a2 = a15
	a0 = 0x402034C4
	v10 = a0
	a0 = 0x4020BFC5
	call v10 (retsize: 0;)
	a12 = a2
	branch a2 != 0x00000000 l4020C021
	// succ:  l4020BFCA l4020C021
l4020BFCA:
	a0 = 0x4020BFCD
	call fn4030BF40 (retsize: 0;)
	a2 = a15
	a0 = 0x402034C4
	v11 = a0
	a0 = 0x4020BFD5
	call v11 (retsize: 0;)
	a12 = a2
	branch a2 != 0x00000000 l4020C021
	// succ:  l4020BFDA l4020C021
l4020BFDA:
	a2 = 0x4020B7C0
	a3 = Mem0[a2 + 0x00000000:word32]
	branch a3 == 0x00000000 l4020C014
	// succ:  l4020BFE1 l4020C014
l4020BFE1:
	a4 = 0x4020B7B8
	a2 = a13
	a8 = Mem0[a4 + 0x00000000:word32]
	a7 = a13
	a5 = 0x0000007F
	// succ:  l4020BFED
l4020BFED:
	v17 = Mem0[a3 + 0x0000001C:byte]
	a4 = (uint32) v17
	branch a14 <u a4 l4020C005
	// succ:  l4020BFF3 l4020C005
l4020BFF3:
	branch a5 <u a4 l4020C005
	// succ:  l4020BFF6 l4020C005
l4020BFF6:
	a6 = Mem0[a3 + 0x00000028:word32]
	a6 = a8 - a6
	branch a6 <u a7 l4020C005
	// succ:  l4020BFFE l4020C005
l4020BFFE:
	a2 = a3
	a5 = a4
	a7 = a6 | a6
	// succ:  l4020C005
l4020C005:
	a3 = Mem0[a3 + 0x0000000C:word32]
	branch a3 != 0x00000000 l4020BFED
	// succ:  l4020C00B l4020BFED
l4020C00B:
	branch a2 == 0x00000000 l4020C014
	// succ:  l4020C00E l4020C014
l4020C00E:
	a3 = 0x00000001
	a0 = 0x4020C014
	call fn4030BE74 (retsize: 0;)
	// succ:  l4020C014
l4020C014:
	a2 = a15
	a0 = 0x402034C4
	v22 = a0
	a0 = 0x4020C01C
	call v22 (retsize: 0;)
	a12 = a2
	branch a2 == 0x00000000 l4020C0A4
	// succ:  l4020C021 l4020C0A4
l4020C021:
	a3 = 0
	a4 = 0x000000A0
	a2 = a12
	a0 = 0x4020267C
	v19 = a0
	a0 = 0x4020C02E
	call v19 (retsize: 0;)
	a5 = 0x4020BF84
	a2 = 0x4020B7B8
	a3 = Mem0[a5 + 0x00000000:word32]
	a4 = Mem0[a2 + 0x00000000:word32]
	a7 = 0x4020B6D4
	a3 = a4 + a3
	Mem0[a5:word32] = a3
	Mem0[a12 + 0x0000005C:word32] = a3
	Mem0[a12 + 0x00000054:word32] = a3
	Mem0[a12 + 0x0000004C:word32] = a3
	Mem0[a12 + 0x00000060:word32] = a3
	a3 = 0x4020BF88
	a2 = 0x4020B7BC
	Mem0[a12 + 0x00000080:word32] = a3
	a3 = 0x4020BF8C
	a6 = 6
	v20 = Mem0[a2 + 0x00000000:byte]
	a8 = (uint32) v20
	a9 = 0x4020B68C
	Mem0[a12 + 0x00000030:word16] = a7
	Mem0[a12 + 0x00000032:word16] = a7
	Mem0[a12 + 0x00000048:word16] = a6
	a7 = -1
	Mem0[a12 + 0x00000046:word16] = a6
	Mem0[a12 + 0x00000090:word32] = a3
	a6 = -1
	a3 = 0x4020BF90
	a2 = 0
	Mem0[a12 + 0x0000000A:byte] = a7
	Mem0[a12 + 0x00000038:word16] = a6
	a7 = 0x00000218
	a6 = 1
	Mem0[a12 + 0x00000094:word32] = a3
	Mem0[a12 + 0x0000001C:byte] = a14
	Mem0[a12 + 0x0000006A:word16] = a9
	Mem0[a12 + 0x00000009:byte] = a2
	Mem0[a12 + 0x0000003A:word16] = a7
	Mem0[a12 + 0x00000050:word16] = a6
	Mem0[a12 + 0x00000028:word32] = a4
	Mem0[a12 + 0x00000025:byte] = a8
	Mem0[a12 + 0x00000023:byte] = a2
	a3 = 9
	Mem0[a12 + 0x00000098:word32] = a3
	Mem0[a12 + 0x0000009E:byte] = a2
	a3 = 0
	a4 = 0x000000A0
	a2 = a12
	a0 = 0x4020267C
	v23 = a0
	a0 = 0x4020C02E
	call v23 (retsize: 0;)
	a5 = 0x4020BF84
	a2 = 0x4020B7B8
	a3 = Mem0[a5 + 0x00000000:word32]
	a4 = Mem0[a2 + 0x00000000:word32]
	a7 = 0x4020B6D4
	a3 = a4 + a3
	Mem0[a5:word32] = a3
	Mem0[a12 + 0x0000005C:word32] = a3
	Mem0[a12 + 0x00000054:word32] = a3
	Mem0[a12 + 0x0000004C:word32] = a3
	Mem0[a12 + 0x00000060:word32] = a3
	a3 = 0x4020BF88
	a2 = 0x4020B7BC
	Mem0[a12 + 0x00000080:word32] = a3
	a3 = 0x4020BF8C
	a6 = 6
	v24 = Mem0[a2 + 0x00000000:byte]
	a8 = (uint32) v24
	a9 = 0x4020B68C
	Mem0[a12 + 0x00000030:word16] = a7
	Mem0[a12 + 0x00000032:word16] = a7
	Mem0[a12 + 0x00000048:word16] = a6
	a7 = -1
	Mem0[a12 + 0x00000046:word16] = a6
	Mem0[a12 + 0x00000090:word32] = a3
	a6 = -1
	a3 = 0x4020BF90
	a2 = 0
	Mem0[a12 + 0x0000000A:byte] = a7
	Mem0[a12 + 0x00000038:word16] = a6
	a7 = 0x00000218
	a6 = 1
	Mem0[a12 + 0x00000094:word32] = a3
	Mem0[a12 + 0x0000001C:byte] = a14
	Mem0[a12 + 0x0000006A:word16] = a9
	Mem0[a12 + 0x00000009:byte] = a2
	Mem0[a12 + 0x0000003A:word16] = a7
	Mem0[a12 + 0x00000050:word16] = a6
	Mem0[a12 + 0x00000028:word32] = a4
	Mem0[a12 + 0x00000025:byte] = a8
	Mem0[a12 + 0x00000023:byte] = a2
	a3 = 9
	Mem0[a12 + 0x00000098:word32] = a3
	Mem0[a12 + 0x0000009E:byte] = a2
	// succ:  l4020C0A4
l4020C0A4:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a2 = a12
	a13 = Mem0[a1 + 0x00000014:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  tcp_alloc_exit
tcp_alloc_exit:


// tcp_eff_send_mss
// Return size: 0
void tcp_eff_send_mss()
tcp_eff_send_mss_entry:
	// succ:  l4020C0B8
l4020C0B8:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2 & 0x0000FFFF
	a2 = a3
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4020C0C7
	call ip_route (retsize: 0;)
	branch a2 == 0x00000000 l4020C0E0
	// succ:  l4020C0C9 l4020C0E0
l4020C0C9:
	v7 = Mem0[a2 + 0x00000026:uint16]
	a2 = (uint32) v7
	branch a2 == 0x00000000 l4020C0E0
	// succ:  l4020C0CF l4020C0E0
l4020C0CF:
	a2 = a2 - 40
	a4 = a2 & 0x0000FFFF
	a3 = a12
	branch a4 >=u a12 l4020C0DD
	// succ:  l4020C0DA l4020C0DD
l4020C0DA:
	a3 = a2 | a2
	// succ:  l4020C0DD
l4020C0DD:
	a12 = a3 & 0x0000FFFF
	// succ:  l4020C0E0
l4020C0E0:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_eff_send_mss_exit
tcp_eff_send_mss_exit:


// pbuf_free
// Return size: 0
void pbuf_free()
pbuf_free_entry:
	// succ:  l4020C0EC
l4020C0EC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1:word32] = a14
	a12 = a2
	branch a2 == 0x00000000 l4020C14C
	// succ:  l4020C0FE l4020C14C
l4020C0FE:
	a14 = 0
	a0 = 0x4020C103
	call sys_arch_protect (retsize: 0;)
	v8 = Mem0[a12 + 0x0000000E:uint16]
	a13 = (uint32) v8
	a13 = a13 - 1
	a13 = a13 & 0x0000FFFF
	Mem0[a12 + 0x0000000E:word16] = a13
	a0 = 0x4020C111
	call sys_arch_unprotect (retsize: 0;)
	branch a13 != 0x00000000 l4020C14A
	// succ:  l4020C113 l4020C14A
l4020C113:
	v10 = Mem0[a12 + 0x0000000C:byte]
	a3 = (uint32) v10
	a13 = Mem0[a12 + 0x00000000:word32]
	a2 = a3 - 1
	a2 = a2 & 0x0000FFFF
	branch a3 == 3 l4020C12D
	// succ:  l4020C120 l4020C12D
l4020C120:
	branch a2 <u 0x00000002 l4020C128
	// succ:  l4020C123 l4020C128
l4020C123:
	a2 = a12
	branch a3 != 4 l4020C138
	// succ:  l4020C128 l4020C138
l4020C128:
	a2 = Mem0[a12 + 0x00000010:word32]
	a0 = 0x4020C12D
	call fn40304004 (retsize: 0;)
	// succ:  l4020C12D
l4020C12D:
	a2 = a12
	a0 = 0x402034CC
	v12 = a0
	a0 = 0x4020C135
	call v12 (retsize: 0;)
	goto l4020C13E
	// succ:  l4020C13E
l4020C138:
	a0 = 0x402034CC
	v11 = a0
	a0 = 0x4020C13E
	call v11 (retsize: 0;)
	// succ:  l4020C13E
l4020C13E:
	a14 = a14 + 1
	a14 = a14 & 0x000000FF
	branch a13 == 0x00000000 l4020C14A
	// succ:  l4020C145 l4020C14A
l4020C145:
	a12 = a13
	goto l4024C100
	// succ:  l4024C100
l4020C14A:
	a2 = a14
	// succ:  l4020C14C
l4020C14C:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  pbuf_free_exit
l4024C100:
pbuf_free_exit:


// pbuf_alloc
// Return size: 0
void pbuf_alloc()
pbuf_alloc_entry:
	// succ:  l4020C160
l4020C160:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	a12 = a3 & 0x0000FFFF
	branch a2 == 1 l4020C18E
	// succ:  l4020C173 l4020C18E
l4020C173:
	branch a2 == 0x00000000 l4020C17E
	// succ:  l4020C175 l4020C17E
l4020C175:
	branch a2 == 2 l4020C184
	// succ:  l4020C178 l4020C184
l4020C178:
	branch a2 == 3 l4020C189
	// succ:  l4020C17B l4020C189
l4020C17B:
	goto l4020C2B4
	// succ:  l4020C2B4
l4020C17E:
	a14 = 90
	goto l4020C190
	// succ:  l4020C190
l4020C184:
	a14 = 50
	goto l4020C190
	// succ:  l4020C190
l4020C189:
	a14 = 36
	goto l4020C190
	// succ:  l4020C190
l4020C18E:
	a14 = 70
	// succ:  l4020C190
l4020C190:
	a2 = 0
	branch a4 <u 0x00000005 l4020C198
	// succ:  l4020C195 l4020C198
l4020C195:
	goto l4020C2B6
	// succ:  l4020C2B6
l4020C198:
	a2 = 0x4020C15C
	a2 = a2 + a4 * 0x00000004
	a2 = Mem0[a2 + 0x00000000:word32]
	call a2 (retsize: 4;)
	return
	// succ:  pbuf_alloc_exit
l4020C2B4:
	a2 = 0
	// succ:  l4020C2B6
l4020C2B6:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  pbuf_alloc_exit
pbuf_alloc_exit:


// pbuf_realloc
// Return size: 0
void pbuf_realloc()
pbuf_realloc_entry:
	// succ:  l4020C2C8
l4020C2C8:
	a1 = fp
	a1 = a1 - 16
	v4 = Mem0[a2 + 0x00000008:uint16]
	a4 = (uint32) v4
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	a3 = a3 & 0x0000FFFF
	a12 = a2
	branch a3 >=u a4 l4020C311
	// succ:  l4020C2DA l4020C311
l4020C2DA:
	v9 = Mem0[a2 + 0x0000000A:uint16]
	a2 = (uint32) v9
	a5 = a3 - a4
	branch a2 >=u a3 l4020C300
	// succ:  l4020C2E3 l4020C300
l4020C2E3:
	a5 = a5 & 0x0000FFFF
	a4 = a4 + a5
	Mem0[a12 + 0x00000008:word16] = a4
	a12 = Mem0[a12 + 0x00000000:word32]
	a3 = a3 - a2
	v11 = Mem0[a12 + 0x0000000A:uint16]
	a2 = (uint32) v11
	a3 = a3 & 0x0000FFFF
	branch a2 >=u a3 l4020C300
	// succ:  l4020C2F9 l4020C300
l4020C2F9:
	v12 = Mem0[a12 + 0x00000008:uint16]
	a4 = (uint32) v12
	goto l4024C2E6
	// succ:  l4024C2E6
l4020C300:
	a2 = Mem0[a12 + 0x00000000:word32]
	Mem0[a12 + 0x0000000A:word16] = a3
	Mem0[a12 + 0x00000008:word16] = a3
	branch a2 == 0x00000000 l4020C30D
	// succ:  l4020C30A l4020C30D
l4020C30A:
	a0 = 0x4020C30D
	call fn4030C0EC (retsize: 0;)
	// succ:  l4020C30D
l4020C30D:
	a2 = 0
	Mem0[a12:word32] = a2
	// succ:  l4020C311
l4020C311:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  pbuf_realloc_exit
l4024C2E6:
pbuf_realloc_exit:


// pbuf_ref
// Return size: 0
void pbuf_ref()
pbuf_ref_entry:
	// succ:  l4020C31C
l4020C31C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a2
	branch a2 == 0x00000000 l4020C338
	// succ:  l4020C329 l4020C338
l4020C329:
	a0 = 0x4020C32C
	call sys_arch_protect (retsize: 0;)
	v7 = Mem0[a12 + 0x0000000E:uint16]
	a3 = (uint32) v7
	a3 = a3 + 1
	Mem0[a12 + 0x0000000E:word16] = a3
	a0 = 0x4020C338
	call sys_arch_unprotect (retsize: 0;)
	// succ:  l4020C338
l4020C338:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  pbuf_ref_exit
pbuf_ref_exit:


// pbuf_chain
// Return size: 0
void pbuf_chain()
pbuf_chain_entry:
	// succ:  l4020C344
l4020C344:
	a1 = fp
	a1 = a1 - 16
	a4 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a4 == 0x00000000 l4020C366
	// succ:  l4020C34D l4020C366
l4020C34D:
	v7 = Mem0[a2 + 0x00000008:uint16]
	a6 = (uint32) v7
	v9 = Mem0[a3 + 0x00000008:uint16]
	a7 = (uint32) v9
	a5 = Mem0[a4 + 0x00000000:word32]
	a6 = a7 + a6
	Mem0[a2 + 0x00000008:word16] = a6
	branch a5 == 0x00000000 l4020C368
	// succ:  l4020C35C l4020C368
l4020C35C:
	a2 = a4
	a4 = a5
	goto l4024C34D
	// succ:  l4024C34D
l4020C366:
	a4 = a2
	// succ:  l4020C368
l4020C368:
	v12 = Mem0[a3 + 0x00000008:uint16]
	a5 = (uint32) v12
	v13 = Mem0[a4 + 0x00000008:uint16]
	a2 = (uint32) v13
	Mem0[a4:word32] = a3
	a2 = a5 + a2
	Mem0[a4 + 0x00000008:word16] = a2
	a2 = a3 | a3
	a0 = 0x4020C37D
	call fn4030C31C (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  pbuf_chain_exit
l4024C34D:
pbuf_chain_exit:


// pbuf_copy
// Return size: 0
void pbuf_copy()
pbuf_copy_entry:
	// succ:  l4020C384
l4020C384:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = 0
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x0000001C:word32] = a15
	a5 = a2
	a14 = a3
	a13 = a12
	// succ:  l4020C399
l4020C399:
	v11 = Mem0[a5 + 0x0000000A:uint16]
	a2 = (uint32) v11
	v12 = Mem0[a14 + 0x0000000A:uint16]
	a3 = (uint32) v12
	a2 = a2 - a13
	a3 = a3 - a12
	a15 = a2 & 0x0000FFFF
	branch a2 < a3 l4020C3AE
	// succ:  l4020C3AB l4020C3AE
l4020C3AB:
	a15 = a3 & 0x0000FFFF
	// succ:  l4020C3AE
l4020C3AE:
	a2 = Mem0[a5 + 0x00000004:word32]
	a3 = Mem0[a14 + 0x00000004:word32]
	a2 = a2 + a13
	a3 = a3 + a12
	a4 = a15 | a15
	Mem0[a1:word32] = a5
	a0 = 0x40203130
	v14 = a0
	a0 = 0x4020C3C2
	call v14 (retsize: 0;)
	a12 = a15 + a12
	v15 = Mem0[a14 + 0x0000000A:uint16]
	a2 = (uint32) v15
	a13 = a15 + a13
	a12 = a12 & 0x0000FFFF
	a13 = a13 & 0x0000FFFF
	a5 = Mem0[a1 + 0x00000000:word32]
	branch a12 <u a2 l4020C3D8
	// succ:  l4020C3D4 l4020C3D8
l4020C3D4:
	a14 = Mem0[a14 + 0x00000000:word32]
	a12 = 0
	// succ:  l4020C3D8
l4020C3D8:
	v16 = Mem0[a5 + 0x0000000A:uint16]
	a2 = (uint32) v16
	branch a2 != a13 l4020C3E4
	// succ:  l4020C3DE l4020C3E4
l4020C3DE:
	a5 = Mem0[a5 + 0x00000000:word32]
	a13 = 0x00000000
	// succ:  l4020C3E4
l4020C3E4:
	branch a14 != 0x00000000 l4020C399
	// succ:  l4020C3E7 l4020C399
l4020C3E7:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a14
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  pbuf_copy_exit
pbuf_copy_exit:


// pbuf_copy_partial
// Return size: 0
void pbuf_copy_partial()
pbuf_copy_partial_entry:
	// succ:  l4020C3F8
l4020C3F8:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a13
	a12 = a2
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1:word32] = a3
	a2 = 0
	a13 = a4 & 0x0000FFFF
	a5 = a5 & 0x0000FFFF
	branch a3 == a2 l4020C47A
	// succ:  l4020C414 l4020C47A
l4020C414:
	branch a13 == a2 l4020C472
	// succ:  l4020C417 l4020C472
l4020C417:
	branch a12 == a2 l4020C472
	// succ:  l4020C41A l4020C472
l4020C41A:
	a14 = a2 | a2
	a6 = a2 | a2
	// succ:  l4020C420
l4020C420:
	v13 = Mem0[a12 + 0x0000000A:uint16]
	a3 = (uint32) v13
	branch a5 == 0x00000000 l4020C431
	// succ:  l4020C425 l4020C431
l4020C425:
	a2 = a5 - a3
	branch a5 <u a3 l4020C431
	// succ:  l4020C42B l4020C431
l4020C42B:
	a5 = a2 & 0x0000FFFF
	goto l4020C468
	// succ:  l4020C468
l4020C431:
	a3 = a3 - a5
	a4 = Mem0[a1 + 0x00000000:word32]
	a3 = a3 & 0x0000FFFF
	a2 = a4 + a6
	a15 = a3
	branch a13 >=u a3 l4020C442
	// succ:  l4020C440 l4020C442
l4020C440:
	a15 = a13
	// succ:  l4020C442
l4020C442:
	a3 = Mem0[a12 + 0x00000004:word32]
	a15 = a15 & 0x0000FFFF
	a3 = a3 + a5
	a4 = a15
	Mem0[a1 + 0x00000004:word32] = a6
	a0 = 0x40203130
	v14 = a0
	a0 = 0x4020C454
	call v14 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000004:word32]
	a7 = a15 + a14
	a6 = a15 + a6
	a13 = a13 - a15
	a13 = a13 & 0x0000FFFF
	a14 = a7 & 0x0000FFFF
	a6 = a6 & 0x0000FFFF
	a5 = 0
	// succ:  l4020C468
l4020C468:
	a12 = Mem0[a12 + 0x00000000:word32]
	branch a13 == 0x00000000 l4020C478
	// succ:  l4020C46C l4020C478
l4020C46C:
	branch a12 != 0x00000000 l4020C420
	// succ:  l4020C46F l4020C420
l4020C46F:
	goto l4020C478
	// succ:  l4020C478
l4020C472:
	a2 = 0
	goto l4020C47A
	// succ:  l4020C47A
l4020C478:
	a2 = a14
	// succ:  l4020C47A
l4020C47A:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  pbuf_copy_partial_exit
pbuf_copy_partial_exit:


// netif_set_ipaddr
// Return size: 0
void netif_set_ipaddr()
netif_set_ipaddr_entry:
	// succ:  l4020C48C
l4020C48C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1:word32] = a14
	a13 = a3
	a12 = a2
	branch a3 == 0x00000000 l4020C4EA
	// succ:  l4020C4A1 l4020C4EA
l4020C4A1:
	a7 = Mem0[a3 + 0x00000000:word32]
	a6 = Mem0[a2 + 0x00000004:word32]
	branch a7 == a6 l4020C4EC
	// succ:  l4020C4A8 l4020C4EC
l4020C4A8:
	a2 = 0x4020B7C0
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 == 0x00000000 l4020C4CC
	// succ:  l4020C4AF l4020C4CC
l4020C4AF:
	a5 = Mem0[a2 + 0x00000000:word32]
	branch a5 != a6 l4020C4BE
	// succ:  l4020C4B4 l4020C4BE
l4020C4B4:
	a14 = Mem0[a2 + 0x0000000C:word32]
	a0 = 0x4020C4B9
	call fn4030BF2C (retsize: 0;)
	a2 = a14
	goto l4020C4C0
	// succ:  l4020C4C0
l4020C4BE:
	a2 = Mem0[a2 + 0x0000000C:word32]
	// succ:  l4020C4C0
l4020C4C0:
	branch a2 == 0x00000000 l4020C4CA
	// succ:  l4020C4C2 l4020C4CA
l4020C4C2:
	a6 = Mem0[a12 + 0x00000004:word32]
	goto l4024C4AF
	// succ:  l4024C4AF
l4020C4CA:
	a7 = Mem0[a13 + 0x00000000:word32]
	// succ:  l4020C4CC
l4020C4CC:
	a2 = 0x4020BB38
	a4 = Mem0[a2 + 0x00000000:word32]
	branch a4 == 0x00000000 l4020C4EC
	// succ:  l4020C4D4 l4020C4EC
l4020C4D4:
	a5 = Mem0[a4 + 0x00000000:word32]
	branch a5 == 0x00000000 l4020C4E1
	// succ:  l4020C4D8 l4020C4E1
l4020C4D8:
	a2 = Mem0[a12 + 0x00000004:word32]
	branch a5 != a2 l4020C4E1
	// succ:  l4020C4DD l4020C4E1
l4020C4DD:
	Mem0[a4:word32] = a7
	a7 = Mem0[a13 + 0x00000000:word32]
	// succ:  l4020C4E1
l4020C4E1:
	a4 = Mem0[a4 + 0x0000000C:word32]
	branch a4 != 0x00000000 l4020C4D4
	// succ:  l4020C4E6 l4020C4D4
l4020C4E6:
	goto l4020C4EC
	// succ:  l4020C4EC
l4020C4EA:
	a7 = a3
	// succ:  l4020C4EC
l4020C4EC:
	a0 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a12 + 0x00000004:word32] = a7
	a13 = Mem0[a1 + 0x00000004:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  netif_set_ipaddr_exit
l4024C4AF:
netif_set_ipaddr_exit:


// netif_set_addr
// Return size: 0
void netif_set_addr()
netif_set_addr_entry:
	// succ:  l4020C4FC
l4020C4FC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = a4
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a2
	a14 = a5
	a0 = 0x4020C510
	call fn4030C48C (retsize: 0;)
	branch a13 == 0x00000000 l4020C514
	// succ:  l4020C512 l4020C514
l4020C512:
	a13 = Mem0[a13 + 0x00000000:word32]
	// succ:  l4020C514
l4020C514:
	Mem0[a12 + 0x00000008:word32] = a13
	branch a14 == 0x00000000 l4020C51A
	// succ:  l4020C518 l4020C51A
l4020C518:
	a14 = Mem0[a14 + 0x00000000:word32]
	// succ:  l4020C51A
l4020C51A:
	a0 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a12 + 0x0000000C:word32] = a14
	a13 = Mem0[a1 + 0x00000004:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  netif_set_addr_exit
netif_set_addr_exit:


// netif_add
// Return size: 0
void netif_add()
netif_add_entry:
	// succ:  l4020C530
l4020C530:
	a1 = fp
	a1 = a1 - 32
	a8 = 0x4020C52C
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a15
	Mem0[a1 + 0x0000001C:word32] = a0
	a12 = a2
	a2 = 0
	v11 = Mem0[a8 + 0x00000000:byte]
	a9 = (uint32) v11
	Mem0[a12 + 0x00000004:word32] = a2
	Mem0[a12 + 0x00000008:word32] = a2
	Mem0[a12 + 0x0000000C:word32] = a2
	Mem0[a12 + 0x0000002F:byte] = a2
	Mem0[a12 + 0x00000020:word32] = a2
	a2 = Mem0[a1 + 0x00000020:word32]
	a13 = a4
	Mem0[a12 + 0x00000010:word32] = a2
	a4 = a9 + 1
	Mem0[a12 + 0x0000001C:word32] = a6
	Mem0[a12 + 0x00000032:byte] = a9
	a2 = a12
	a14 = a5
	a15 = a7
	Mem0[a8:byte] = a4
	a0 = 0x4020C56E
	call fn4030C48C (retsize: 0;)
	branch a13 == 0x00000000 l4020C572
	// succ:  l4020C570 l4020C572
l4020C570:
	a13 = Mem0[a13 + 0x00000000:word32]
	// succ:  l4020C572
l4020C572:
	Mem0[a12 + 0x00000008:word32] = a13
	branch a14 == 0x00000000 l4020C579
	// succ:  l4020C576 l4020C579
l4020C576:
	a14 = Mem0[a14 + 0x00000000:word32]
	// succ:  l4020C579
l4020C579:
	Mem0[a12 + 0x0000000C:word32] = a14
	a2 = a12
	a0 = 0x4020C580
	call a15 (retsize: 0;)
	a2 = a2 & 0x000000FF
	branch a2 != 0x00000000 l4020C594
	// succ:  l4020C585 l4020C594
l4020C585:
	a3 = 0x4020AE44
	a2 = a12
	a4 = Mem0[a3 + 0x00000000:word32]
	Mem0[a12:word32] = a4
	Mem0[a3:word32] = a12
	goto l4020C596
	// succ:  l4020C596
l4020C594:
	a2 = 0
	// succ:  l4020C596
l4020C596:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  netif_add_exit
netif_add_exit:


// netif_set_default
// Return size: 0
void netif_set_default()
netif_set_default_entry:
	// succ:  l4020C5AC
l4020C5AC:
	a1 = fp
	a3 = 0x4020C5A8
	Mem0[a3:word32] = a2
	return
	// succ:  netif_set_default_exit
netif_set_default_exit:


// netif_set_up
// Return size: 0
void netif_set_up()
netif_set_up_entry:
	// succ:  l4020C5B4
l4020C5B4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	v5 = Mem0[a2 + 0x0000002F:byte]
	a4 = (uint32) v5
	a3 = a2 | a2
	branch (a4 & 0x00000001) != 0x00000000 l4020C5DD
	// succ:  l4020C5C3 l4020C5DD
l4020C5C3:
	a2 = 0x00000001
	a2 = a4 | a2
	Mem0[a3 + 0x0000002F:byte] = a2
	a2 = 48
	a4 = a4 & a2
	a2 = 48
	branch a4 != a2 l4020C5DD
	// succ:  l4020C5D6 l4020C5DD
l4020C5D6:
	a2 = a3
	a3 = a3 + 4
	a0 = 0x4020C5DD
	call etharp_request (retsize: 0;)
	// succ:  l4020C5DD
l4020C5DD:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  netif_set_up_exit
netif_set_up_exit:


// netif_set_down
// Return size: 0
void netif_set_down()
netif_set_down_entry:
	// succ:  l4020C5E4
l4020C5E4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	v5 = Mem0[a2 + 0x0000002F:byte]
	a3 = (uint32) v5
	branch (a3 & 0x00000001) == 0x00000000 l4020C5FD
	// succ:  l4020C5EF l4020C5FD
l4020C5EF:
	a4 = -2
	a4 = a3 & a4
	Mem0[a2 + 0x0000002F:byte] = a4
	branch (a3 & 0x00000020) == 0x00000000 l4020C5FD
	// succ:  l4020C5FA l4020C5FD
l4020C5FA:
	a0 = 0x4020C5FD
	call etharp_cleanup_netif (retsize: 0;)
	// succ:  l4020C5FD
l4020C5FD:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  netif_set_down_exit
netif_set_down_exit:


// sys_timeout
// Return size: 0
void sys_timeout()
sys_timeout_entry:
	// succ:  l4020C608
l4020C608:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2
	a2 = 0x40209C38
	Mem0[a1 + 0x00000004:word32] = a13
	v6 = Mem0[a2 + 0x00000014:uint16]
	a2 = (uint32) v6
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	a14 = a3
	a13 = a4
	a0 = 0x402034C4
	v11 = a0
	a0 = 0x4020C625
	call v11 (retsize: 0;)
	a7 = a2
	branch a2 == 0x00000000 l4020C679
	// succ:  l4020C62A l4020C679
l4020C62A:
	a3 = 0x4020C604
	a2 = 0
	a6 = Mem0[a3 + 0x00000000:word32]
	Mem0[a7:word32] = a2
	Mem0[a7 + 0x00000008:word32] = a14
	Mem0[a7 + 0x0000000C:word32] = a13
	Mem0[a7 + 0x00000004:word32] = a12
	branch a6 == a2 l4020C64C
	// succ:  l4020C63C l4020C64C
l4020C63C:
	a2 = Mem0[a6 + 0x00000004:word32]
	a8 = a12
	a5 = a2
	branch a12 >=u a2 l4020C664
	// succ:  l4020C645 l4020C664
l4020C645:
	a2 = a2 - a12
	Mem0[a6 + 0x00000004:word32] = a2
	Mem0[a7:word32] = a6
	// succ:  l4020C64C
l4020C64C:
	Mem0[a3:word32] = a7
	goto l4020C679
	// succ:  l4020C679
l4020C651:
	a5 = Mem0[a3 + 0x00000004:word32]
	a8 = a4
	branch a4 <u a5 l4020C671
	// succ:  l4020C658 l4020C671
l4020C658:
	a6 = a3
	// succ:  l4020C664
l4020C664:
	a4 = a8 - a5
	a3 = Mem0[a6 + 0x00000000:word32]
	Mem0[a7 + 0x00000004:word32] = a4
	branch a3 != 0x00000000 l4020C651
	// succ:  l4020C66E l4020C651
l4020C66E:
	goto l4024C65D
	// succ:  l4024C65D
l4020C671:
	a4 = a5 - a4
	Mem0[a3 + 0x00000004:word32] = a4
	goto l4024C65D
	// succ:  l4024C65D
l4020C679:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sys_timeout_exit
l4024C65D:
sys_timeout_exit:


// tcp_timer_needed
// Return size: 0
void tcp_timer_needed()
tcp_timer_needed_entry:
	// succ:  l4020C690
l4020C690:
	a1 = fp
	a5 = 0x4020C688
	a1 = a1 - 16
	a2 = Mem0[a5 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a2 != 0x00000000 l4020C6BE
	// succ:  l4020C69C l4020C6BE
l4020C69C:
	a2 = 0x4020B7C0
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 != 0x00000000 l4020C6AC
	// succ:  l4020C6A3 l4020C6AC
l4020C6A3:
	a2 = 0x4020B7C4
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 == 0x00000000 l4020C6BE
	// succ:  l4020C6AC l4020C6BE
l4020C6AC:
	a3 = 0x4020C68C
	a6 = 0x00000001
	a2 = 0x000000FA
	a4 = 0x00000000
	Mem0[a5:word32] = a6
	a0 = 0x4020C6BE
	call fn4030C608 (retsize: 0;)
	// succ:  l4020C6BE
l4020C6BE:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_timer_needed_exit
tcp_timer_needed_exit:


// tcpip_tcp_timer
// Return size: 0
void tcpip_tcp_timer()
tcpip_tcp_timer_entry:
	// succ:  l4020C6C8
l4020C6C8:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4020C6D0
	call fn4030BE50 (retsize: 0;)
	a2 = 0x4020B7C0
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 != 0x00000000 l4020C6E0
	// succ:  l4020C6D7 l4020C6E0
l4020C6D7:
	a2 = 0x4020B7C4
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 == 0x00000000 l4020C6F1
	// succ:  l4020C6E0 l4020C6F1
l4020C6E0:
	a3 = 0x4020C68C
	a2 = 0x000000FA
	a4 = 0
	a0 = 0x4020C6EB
	call fn4030C608 (retsize: 0;)
	goto l4020C6F6
	// succ:  l4020C6F6
l4020C6F1:
	a3 = 0x4020C688
	Mem0[a3:word32] = a2
	// succ:  l4020C6F6
l4020C6F6:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  tcpip_tcp_timer_exit
tcpip_tcp_timer_exit:


// sys_timeouts_init
// Return size: 0
void sys_timeouts_init()
sys_timeouts_init_entry:
	// succ:  l4020C718
l4020C718:
	a1 = fp
	a2 = 0x4020C700
	a3 = 0x4020C704
	a1 = a1 - 16
	a4 = 0x00000000
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4020C729
	call fn4030C608 (retsize: 0;)
	a2 = 0x4020C708
	a3 = 0x4020C70C
	a4 = 0
	a0 = 0x4020C734
	call fn4030C608 (retsize: 0;)
	a3 = 0x4020C710
	a2 = 0x000001F4
	a4 = 0
	a0 = 0x4020C73F
	call fn4030C608 (retsize: 0;)
	a3 = 0x4020C714
	a2 = 0x000003E8
	a4 = 0
	a0 = 0x4020C74A
	call fn4030C608 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sys_timeouts_init_exit
sys_timeouts_init_exit:


// dns_timer
// Return size: 0
void dns_timer()
dns_timer_entry:
	// succ:  l4020C754
l4020C754:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4020C75D
	call fn4030B670 (retsize: 0;)
	a3 = 0x4020C714
	a2 = 0x000003E8
	a4 = 0x00000000
	a0 = 0x4020C769
	call fn4030C608 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  dns_timer_exit
dns_timer_exit:


// dhcp_timer_fine
// Return size: 0
void dhcp_timer_fine()
dhcp_timer_fine_entry:
	// succ:  l4020C774
l4020C774:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4020C77D
	call fn4030AFE0 (retsize: 0;)
	a3 = 0x4020C710
	a2 = 0x000001F4
	a4 = 0x00000000
	a0 = 0x4020C789
	call fn4030C608 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  dhcp_timer_fine_exit
dhcp_timer_fine_exit:


// dhcp_timer_coarse
// Return size: 0
void dhcp_timer_coarse()
dhcp_timer_coarse_entry:
	// succ:  l4020C794
l4020C794:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4020C79D
	call fn4030AE48 (retsize: 0;)
	a2 = 0x4020C708
	a3 = 0x4020C70C
	a4 = 0x00000000
	a0 = 0x4020C7A9
	call fn4030C608 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  dhcp_timer_coarse_exit
dhcp_timer_coarse_exit:


// arp_timer
// Return size: 0
void arp_timer()
arp_timer_entry:
	// succ:  l4020C7B4
l4020C7B4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4020C7BD
	call etharp_tmr (retsize: 0;)
	a2 = 0x4020C700
	a3 = 0x4020C704
	a4 = 0x00000000
	a0 = 0x4020C7C9
	call fn4030C608 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  arp_timer_exit
arp_timer_exit:


// sys_untimeout
// Return size: 0
void sys_untimeout()
sys_untimeout_entry:
	// succ:  l4020C7D4
l4020C7D4:
	a1 = fp
	a7 = 0x4020C604
	a1 = a1 - 16
	a4 = Mem0[a7 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a4 == 0x00000000 l4020C81C
	// succ:  l4020C7E0 l4020C81C
l4020C7E0:
	a6 = 0
	a5 = Mem0[a4 + 0x00000008:word32]
	branch a5 != a2 l4020C810
	// succ:  l4020C7E7 l4020C810
l4020C7E7:
	a5 = Mem0[a4 + 0x0000000C:word32]
	branch a5 != a3 l4020C810
	// succ:  l4020C7EC l4020C810
l4020C7EC:
	a2 = Mem0[a4 + 0x00000000:word32]
	branch a6 != 0x00000000 l4020C7F6
	// succ:  l4020C7F0 l4020C7F6
l4020C7F0:
	Mem0[a7:word32] = a2
	goto l4020C7FA
	// succ:  l4020C7FA
l4020C7F6:
	Mem0[a6:word32] = a2
	a2 = Mem0[a4 + 0x00000000:word32]
	// succ:  l4020C7FA
l4020C7FA:
	branch a2 == 0x00000000 l4020C804
	// succ:  l4020C7FC l4020C804
l4020C7FC:
	a5 = Mem0[a2 + 0x00000004:word32]
	a3 = Mem0[a4 + 0x00000004:word32]
	a3 = a5 + a3
	Mem0[a2 + 0x00000004:word32] = a3
	// succ:  l4020C804
l4020C804:
	a2 = a4
	a0 = 0x402034CC
	v10 = a0
	a0 = 0x4020C80C
	call v10 (retsize: 0;)
	goto l4020C81C
	// succ:  l4020C81C
l4020C810:
	a5 = Mem0[a4 + 0x00000000:word32]
	a6 = a4
	branch a5 == 0x00000000 l4020C81C
	// succ:  l4020C816 l4020C81C
l4020C816:
	a4 = a5
	goto l4024C7E2
	// succ:  l4024C7E2
l4020C81C:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sys_untimeout_exit
l4024C7E2:
sys_untimeout_exit:


// sys_timeouts_mbox_fetch
// Return size: 0
void sys_timeouts_mbox_fetch()
sys_timeouts_mbox_fetch_entry:
	// succ:  l4020C824
l4020C824:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = 0x4020C604
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1:word32] = a2
	Mem0[a1 + 0x00000004:word32] = a3
	a5 = Mem0[a12 + 0x00000000:word32]
	branch a5 != 0x00000000 l4020C84E
	// succ:  l4020C83F l4020C84E
l4020C83F:
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = Mem0[a1 + 0x00000004:word32]
	a4 = a5
	a0 = 0x4020C848
	call sys_arch_mbox_fetch (retsize: 0;)
	goto l4020C893
	// succ:  l4020C893
l4020C84E:
	a4 = Mem0[a5 + 0x00000004:word32]
	branch a4 == 0x00000000 l4020C861
	// succ:  l4020C854 l4020C861
l4020C854:
	a3 = Mem0[a1 + 0x00000004:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x4020C85C
	call sys_arch_mbox_fetch (retsize: 0;)
	branch a2 != -1 l4020C880
	// succ:  l4020C85F l4020C880
l4020C85F:
	a5 = Mem0[a12 + 0x00000000:word32]
	// succ:  l4020C861
l4020C861:
	a14 = Mem0[a5 + 0x00000000:word32]
	a13 = Mem0[a5 + 0x00000008:word32]
	a2 = a5
	a15 = Mem0[a5 + 0x0000000C:word32]
	Mem0[a12:word32] = a14
	a0 = 0x402034CC
	v12 = a0
	a0 = 0x4020C871
	call v12 (retsize: 0;)
	branch a13 != 0x00000000 l4020C878
	// succ:  l4020C873 l4020C878
l4020C873:
	a5 = a14
	goto l4024C83D
	// succ:  l4024C83D
l4020C878:
	a2 = a15
	a0 = 0x4020C87D
	call a13 (retsize: 0;)
	goto l4024C83B
	// succ:  l4024C83B
l4020C880:
	a3 = Mem0[a12 + 0x00000000:word32]
	a4 = Mem0[a3 + 0x00000004:word32]
	branch a2 >=u a4 l4020C88F
	// succ:  l4020C887 l4020C88F
l4020C887:
	a2 = a4 - a2
	Mem0[a3 + 0x00000004:word32] = a2
	goto l4020C893
	// succ:  l4020C893
l4020C88F:
	a2 = 0
	Mem0[a3 + 0x00000004:word32] = a2
	// succ:  l4020C893
l4020C893:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  sys_timeouts_mbox_fetch_exit
l4024C83B:
l4024C83D:
sys_timeouts_mbox_fetch_exit:


// udp_input
// Return size: 0
void udp_input()
udp_input_entry:
	// succ:  l4020C8B0
l4020C8B0:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000030:word32] = a14
	a14 = 0x40209ABC
	Mem0[a1 + 0x0000002C:word32] = a15
	a15 = a2
	v6 = Mem0[a14 + 0x0000007A:uint16]
	a2 = (uint32) v6
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x0000003C:word32] = a0
	a12 = Mem0[a15 + 0x00000004:word32]
	a2 = a2 + 1
	Mem0[a14 + 0x0000007A:word16] = a2
	v10 = Mem0[a12 + 0x00000000:byte]
	a2 = (uint32) v10
	v12 = Mem0[a15 + 0x00000008:uint16]
	a5 = (uint32) v12
	a2 = a2 & 0x0000000F
	a4 = a2 + 2
	a4 = a4 << 30
	a13 = a3 | a3
	branch a5 >= a4 l4020C8FC
	// succ:  l4020C8E0 l4020C8FC
l4020C8E0:
	v15 = Mem0[a14 + 0x00000082:uint16]
	a4 = (uint32) v15
	v16 = Mem0[a14 + 0x0000007E:uint16]
	a3 = (uint32) v16
	a4 = a4 + 1
	a3 = a3 + 1
	a2 = a15 | a15
	Mem0[a14 + 0x00000082:word16] = a4
	Mem0[a14 + 0x0000007E:word16] = a3
	a0 = 0x4020C8F8
	call fn4030C0EC (retsize: 0;)
	goto l4020CB12
	// succ:  l4020CB12
l4020C8FC:
	a2 = a2 << 14
	a3 = -a2
	a3 = a3 >> 16
	a2 = a15 | a15
	a0 = 0x4020C90B
	call pbuf_header (retsize: 0;)
	a8 = a2 | a2
	branch a2 != 0x00000000 l4020C8E0
	// succ:  l4020C911 l4020C8E0
l4020C911:
	a3 = 0x4020C8A4
	a4 = Mem0[a15 + 0x00000004:word32]
	a2 = Mem0[a3 + 0x00000000:word32]
	a3 = a13
	Mem0[a1 + 0x00000004:word32] = a4
	Mem0[a1 + 0x0000000C:word32] = a8
	a0 = 0x4020C921
	call ip4_addr_isbroadcast (retsize: 0;)
	a4 = Mem0[a1 + 0x00000004:word32]
	a9 = a2
	v19 = Mem0[a4 + 0x00000003:byte]
	a5 = (uint32) v19
	v20 = Mem0[a4 + 0x00000001:byte]
	a2 = (uint32) v20
	v22 = Mem0[a4 + 0x00000002:byte]
	a6 = (uint32) v22
	v23 = Mem0[a4 + 0x00000000:byte]
	a3 = (uint32) v23
	a5 = a5 << 24
	a5 = a5 | a6
	a2 = a2 << 24
	a2 = a2 | a3
	a3 = a5 << 24
	a5 = a5 >>u 8
	a10 = a2 << 24
	a3 = a3 | a5
	a2 = a2 >>u 8
	a10 = a10 | a2
	a3 = a3 & 0x0000FFFF
	a2 = 68
	a10 = a10 & 0x0000FFFF
	a8 = Mem0[a1 + 0x0000000C:word32]
	branch a3 != a2 l4020C981
	// succ:  l4020C95C l4020C981
l4020C95C:
	a2 = 67
	branch a10 == a2 l4020C964
	// succ:  l4020C961 l4020C964
l4020C961:
	goto l4020CA01
	// succ:  l4020CA01
l4020C964:
	a2 = Mem0[a13 + 0x00000020:word32]
	branch a2 == 0x00000000 l4020CA01
	// succ:  l4020C969 l4020CA01
l4020C969:
	a8 = Mem0[a2 + 0x00000004:word32]
	branch a8 == 0x00000000 l4020CA01
	// succ:  l4020C96E l4020CA01
l4020C96E:
	a2 = Mem0[a8 + 0x00000004:word32]
	branch a2 == 0x00000000 l4020CA11
	// succ:  l4020C973 l4020CA11
l4020C973:
	a3 = 0x4020C8A8
	a3 = Mem0[a3 + 0x00000000:word32]
	branch a2 == a3 l4020C97E
	// succ:  l4020C97B l4020C97E
l4020C97B:
	goto l4020CA01
	// succ:  l4020CA01
l4020C97E:
	goto l4020CA11
	// succ:  l4020CA11
l4020C981:
	a5 = 0x4020C8AC
	a11 = Mem0[a5 + 0x00000000:word32]
	branch a11 == 0x00000000 l4020CA01
	// succ:  l4020C989 l4020CA01
l4020C989:
	a6 = 0x4020C8A4
	a2 = 0x4020C8A8
	a6 = Mem0[a6 + 0x00000000:word32]
	a5 = a11
	Mem0[a1:word32] = a6
	Mem0[a1 + 0x00000010:word32] = a11
	a6 = Mem0[a2 + 0x00000000:word32]
	a2 = a8
	v27 = Mem0[a5 + 0x00000012:uint16]
	a7 = (uint32) v27
	branch a7 != a3 l4020C9F4
	// succ:  l4020C9A1 l4020C9F4
l4020C9A1:
	a7 = Mem0[a5 + 0x00000000:word32]
	branch a9 != 0x00000000 l4020CAFC
	// succ:  l4020C9A6 l4020CAFC
l4020C9A6:
	branch a7 == 0x00000000 l4020C9B8
	// succ:  l4020C9A8 l4020C9B8
l4020C9A8:
	goto l4020CB07
	// succ:  l4020CB07
l4020C9B8:
	branch a8 != 0x00000000 l4020CAE4
	// succ:  l4020C9BB l4020CAE4
l4020C9BB:
	v34 = Mem0[a5 + 0x00000010:byte]
	a7 = (uint32) v34
	a11 = 4
	a7 = a7 & a11
	branch a7 != 0x00000000 l4020C9C6
	// succ:  l4020C9C3_1 l4020C9C6
l4020C9C3_1:
	a8 = a5
	// succ:  l4020C9C6
l4020C9C6:
	goto l4020CAE4
	// succ:  l4020CAE4
l4020C9F4:
	a7 = Mem0[a5 + 0x0000000C:word32]
	branch a7 == 0x00000000 l4020CAF0
	// succ:  l4020C9F9 l4020CAF0
l4020C9F9:
	a2 = a5
	a5 = a7
	goto l4024C99B
	// succ:  l4024C99B
l4020CA01:
	a11 = 0x4020C8A4
	a3 = Mem0[a13 + 0x00000004:word32]
	a2 = Mem0[a11 + 0x00000000:word32]
	branch a3 == a2 l4020CA0E
	// succ:  l4020CA0B l4020CA0E
l4020CA0B:
	goto l4020CA98
	// succ:  l4020CA98
l4020CA0E:
	a8 = 0x00000000
	// succ:  l4020CA11
l4020CA11:
	v28 = Mem0[a4 + 0x00000007:byte]
	a2 = (uint32) v28
	v29 = Mem0[a4 + 0x00000006:byte]
	a3 = (uint32) v29
	a2 = a2 << 24
	a2 = a2 | a3
	branch a2 == 0x00000000 l4020CA57
	// succ:  l4020CA20 l4020CA57
l4020CA20:
	v30 = Mem0[a15 + 0x00000008:uint16]
	a6 = (uint32) v30
	a3 = 0x4020C8A8
	a4 = 0x4020C8A4
	a2 = a15 | a15
	a5 = 17
	Mem0[a1 + 0x0000000C:word32] = a8
	Mem0[a1 + 0x00000004:word32] = a9
	Mem0[a1 + 0x00000008:word32] = a10
	a0 = 0x4020CA37
	call inet_chksum_pseudo (retsize: 0;)
	a8 = Mem0[a1 + 0x0000000C:word32]
	a9 = Mem0[a1 + 0x00000004:word32]
	a10 = Mem0[a1 + 0x00000008:word32]
	branch a2 == 0x00000000 l4020CA57
	// succ:  l4020CA3F l4020CA57
l4020CA3F:
	v31 = Mem0[a14 + 0x00000080:uint16]
	a4 = (uint32) v31
	v32 = Mem0[a14 + 0x0000007E:uint16]
	a3 = (uint32) v32
	a4 = a4 + 1
	a3 = a3 + 1
	a2 = a15
	Mem0[a14 + 0x00000080:word16] = a4
	Mem0[a14 + 0x0000007E:word16] = a3
	a0 = 0x4020CA54
	call fn4030C0EC (retsize: 0;)
	goto l4020CB12
	// succ:  l4020CB12
l4020CA57:
	a2 = a15 | a15
	a3 = 0xFFFFFFF8
	Mem0[a1 + 0x0000000C:word32] = a8
	Mem0[a1 + 0x00000004:word32] = a9
	Mem0[a1 + 0x00000008:word32] = a10
	a0 = 0x4020CA67
	call pbuf_header (retsize: 0;)
	a8 = Mem0[a1 + 0x0000000C:word32]
	a9 = Mem0[a1 + 0x00000004:word32]
	a10 = Mem0[a1 + 0x00000008:word32]
	branch a2 == 0x00000000 l4020CA80
	// succ:  l4020CA6F l4020CA80
l4020CA6F:
	v33 = Mem0[a14 + 0x0000007E:uint16]
	a3 = (uint32) v33
	a2 = a15
	a3 = a3 + 1
	Mem0[a14 + 0x0000007E:word16] = a3
	a0 = 0x4020CA7C
	call fn4030C0EC (retsize: 0;)
	goto l4020CB12
	// succ:  l4020CB12
l4020CA80:
	branch a8 == 0x00000000 l4020CAA0
	// succ:  l4020CA82 l4020CAA0
l4020CA82:
	a7 = Mem0[a8 + 0x00000018:word32]
	branch a7 == 0x00000000 l4020CA98
	// succ:  l4020CA86 l4020CA98
l4020CA86:
	a2 = Mem0[a8 + 0x0000001C:word32]
	a5 = 0x4020C8A8
	a3 = a8
	a4 = a15
	a6 = a10
	a0 = 0x4020CA94
	call a7 (retsize: 0;)
	goto l4020CB12
	// succ:  l4020CB12
l4020CA98:
	a2 = a15
	a0 = 0x4020CA9D
	call fn4030C0EC (retsize: 0;)
	goto l4020CB12
	// succ:  l4020CB12
l4020CAA0:
	branch a9 != 0x00000000 l4020CACB
	// succ:  l4020CAA3 l4020CACB
l4020CAA3:
	a3 = 0x4020C8A4
	a2 = Mem0[a3 + 0x00000000:word32]
	a3 = 0x000000F0
	a3 = a3 & a2
	a2 = 0x000000E0
	branch a3 == a2 l4020CACB
	// succ:  l4020CAB4 l4020CACB
l4020CAB4:
	v35 = Mem0[a12 + 0x00000000:byte]
	a3 = (uint32) v35
	a2 = a15
	a3 = a3 & 0x0000000F
	a3 = a3 + 2
	a3 = a3 << 30
	a0 = 0x4020CAC4
	call pbuf_header (retsize: 0;)
	a2 = a15
	a3 = 3
	a0 = 0x4020CACB
	call icmp_dest_unreach (retsize: 0;)
	// succ:  l4020CACB
l4020CACB:
	v37 = Mem0[a14 + 0x00000088:uint16]
	a4 = (uint32) v37
	v38 = Mem0[a14 + 0x0000007E:uint16]
	a3 = (uint32) v38
	a4 = a4 + 1
	a3 = a3 + 1
	a2 = a15
	Mem0[a14 + 0x00000088:word16] = a4
	Mem0[a14 + 0x0000007E:word16] = a3
	a0 = 0x4020CAE0
	call fn4030C0EC (retsize: 0;)
	goto l4020CB12
	// succ:  l4020CB12
l4020CAE4:
	v36 = Mem0[a5 + 0x00000014:uint16]
	a7 = (uint32) v36
	branch a7 == a10 l4020CAED
	// succ:  l4020CAEA l4020CAED
l4020CAEA:
	goto l4024C9F4
	// succ:  l4024C9F4
l4020CAED:
	goto l4024C9C9
	// succ:  l4024C9C9
l4020CAF0:
	branch a8 != 0x00000000 l4020CA11
	// succ:  l4020CAF3 l4020CA11
l4020CAF3:
	goto l4024CA01
	// succ:  l4024CA01
l4020CAFC:
	a11 = Mem0[a1 + 0x00000000:word32]
	branch a7 == a11 l4020CB04
	// succ:  l4020CB01 l4020CB04
l4020CB01:
	goto l4024C9AC
	// succ:  l4024C9AC
l4020CB04:
	goto l4024C9B8
	// succ:  l4024C9B8
l4020CB07:
	a11 = Mem0[a1 + 0x00000000:word32]
	branch a7 == a11 l4020CB0F
	// succ:  l4020CB0C l4020CB0F
l4020CB0C:
	goto l4024C9F4
	// succ:  l4024C9F4
l4020CB0F:
	goto l4024C9B8
	// succ:  l4024C9B8
l4020CB12:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  udp_input_exit
l4024C99B:
l4024C9AC:
l4024C9B8:
l4024C9C9:
l4024C9F4:
l4024CA01:
udp_input_exit:


// udp_bind
// Return size: 0
void udp_bind()
udp_bind_entry:
	// succ:  l4020CB30
l4020CB30:
	a1 = fp
	a9 = 0x4020C8AC
	a1 = a1 - 16
	a10 = Mem0[a9 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a12
	a4 = a4 & 0x0000FFFF
	branch a10 == 0x00000000 l4020CB7C
	// succ:  l4020CB3F l4020CB7C
l4020CB3F:
	a5 = a10
	a8 = 0
	a7 = 4
	// succ:  l4020CB45
l4020CB45:
	branch a2 == a5 l4020CB72
	// succ:  l4020CB48 l4020CB72
l4020CB48:
	v12 = Mem0[a2 + 0x00000008:byte]
	a6 = (uint32) v12
	branch (a6 & a7) != 0x00000000 l4020CB74
	// succ:  l4020CB4E l4020CB74
l4020CB4E:
	v13 = Mem0[a5 + 0x00000008:byte]
	a6 = (uint32) v13
	branch (a6 & a7) != 0x00000000 l4020CB74
	// succ:  l4020CB54 l4020CB74
l4020CB54:
	v14 = Mem0[a5 + 0x00000012:uint16]
	a6 = (uint32) v14
	branch a6 != a4 l4020CB74
	// succ:  l4020CB5A l4020CB74
l4020CB5A:
	a6 = Mem0[a5 + 0x00000000:word32]
	branch a6 != 0x00000000 l4020CB64
	// succ:  l4020CB5E l4020CB64
l4020CB5E:
	a3 = 0x000000F8
	goto l4020CBDC
	// succ:  l4020CBDC
l4020CB64:
	branch a3 == 0x00000000 l4020CB5E
	// succ:  l4020CB67 l4020CB5E
l4020CB67:
	a11 = Mem0[a3 + 0x00000000:word32]
	branch a11 == 0x00000000 l4020CB5E
	// succ:  l4020CB6C l4020CB5E
l4020CB6C:
	branch a6 != a11 l4020CB74
	// succ:  l4020CB6F l4020CB74
l4020CB6F:
	goto l4024CB5E
	// succ:  l4024CB5E
l4020CB72:
	a8 = 1
	// succ:  l4020CB74
l4020CB74:
	a5 = Mem0[a5 + 0x0000000C:word32]
	branch a5 != 0x00000000 l4020CB45
	// succ:  l4020CB79 l4020CB45
l4020CB79:
	goto l4020CB7E
	// succ:  l4020CB7E
l4020CB7C:
	a8 = a10
	// succ:  l4020CB7E
l4020CB7E:
	branch a3 == 0x00000000 l4020CB82
	// succ:  l4020CB80 l4020CB82
l4020CB80:
	a3 = Mem0[a3 + 0x00000000:word32]
	// succ:  l4020CB82
l4020CB82:
	Mem0[a2:word32] = a3
	branch a4 != 0x00000000 l4020CBD0
	// succ:  l4020CB87 l4020CBD0
l4020CB87:
	a7 = 0x4020CB2C
	a6 = 0x4020CB24
	v16 = Mem0[a7 + 0x00000000:uint16]
	a3 = (uint32) v16
	a12 = 0x4020A190
	a11 = 0x4020CB28
	a4 = a11
	branch a3 == a12 l4020CBA0
	// succ:  l4020CB9B l4020CBA0
l4020CB9B:
	a3 = a3 + 1
	a4 = a3 & 0x0000FFFF
	// succ:  l4020CBA0
l4020CBA0:
	branch a10 == 0x00000000 l4020CBCD
	// succ:  l4020CBA2 l4020CBCD
l4020CBA2:
	v18 = Mem0[a10 + 0x00000012:uint16]
	a3 = (uint32) v18
	branch a3 != a4 l4020CBC6
	// succ:  l4020CBA8 l4020CBC6
l4020CBA8:
	goto l4020CBB2
	// succ:  l4020CBB2
l4020CBAC:
	v19 = Mem0[a3 + 0x00000012:uint16]
	a5 = (uint32) v19
	branch a5 != a4 l4020CBC8
	// succ:  l4020CBB2 l4020CBC8
l4020CBB2:
	a6 = a6 - 1
	a6 = a6 & 0x0000FFFF
	branch a6 != 0x00000000 l4020CBC0
	a6 = a6 - 1
	a6 = a6 & 0x0000FFFF
	branch a6 != 0x00000000 l4020CBC0
	// succ:  l4020CBB9 l4020CBC0
l4020CBB9:
	Mem0[a7:word16] = a4
	Mem0[a7:word16] = a4
	goto l4024CB5E
	// succ:  l4024CB5E
l4020CBC0:
	a3 = a4
	goto l4024CB96
	// succ:  l4024CB96
l4020CBC6:
	a3 = a10
	// succ:  l4020CBC8
l4020CBC8:
	a3 = Mem0[a3 + 0x0000000C:word32]
	branch a3 != 0x00000000 l4020CBAC
	// succ:  l4020CBCD l4020CBAC
l4020CBCD:
	Mem0[a7:word16] = a4
	// succ:  l4020CBD0
l4020CBD0:
	Mem0[a2 + 0x00000012:word16] = a4
	a3 = 0
	branch a8 != a3 l4020CBDC
	// succ:  l4020CBD8 l4020CBDC
l4020CBD8:
	Mem0[a2 + 0x0000000C:word32] = a10
	Mem0[a9:word32] = a2
	// succ:  l4020CBDC
l4020CBDC:
	a2 = a3
	a12 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  udp_bind_exit
l4024CB5E:
l4024CB96:
udp_bind_exit:


// udp_sendto_if
// Return size: 0
void udp_sendto_if()
udp_sendto_if_entry:
	// succ:  l4020CBE8
l4020CBE8:
	a1 = fp
	a1 = a1 - 64
	v4 = Mem0[a2 + 0x00000012:uint16]
	a8 = (uint32) v4
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a4
	a15 = a2
	a13 = a3
	a14 = a6
	a12 = a5 & 0x0000FFFF
	branch a8 == 0x00000000 l4020CC1A
	// succ:  l4020CC06 l4020CC1A
l4020CC06:
	a2 = a13 | a13
	a3 = 0x00000008
	a0 = 0x4020CC0F
	call pbuf_header (retsize: 0;)
	a8 = a13 | a13
	branch a2 == 0x00000000 l4020CC4B
	// succ:  l4020CC14 l4020CC4B
l4020CC14:
	goto l4020CC2A
	// succ:  l4020CC2A
l4020CC1A:
	a3 = a15
	a4 = a8
	a0 = 0x4020CC21
	call fn4030CB30 (retsize: 0;)
	a3 = a2 & 0x000000FF
	branch a3 == 0x00000000 l4020CC06
	// succ:  l4020CC27 l4020CC06
l4020CC27:
	goto l4020CD20
	// succ:  l4020CD20
l4020CC2A:
	a2 = 0x00000001
	a3 = 8
	a4 = 0
	a0 = 0x4020CC34
	call fn4030C160 (retsize: 0;)
	a8 = a2
	branch a2 == 0x00000000 l4020CD1D
	// succ:  l4020CC39 l4020CD1D
l4020CC39:
	v15 = Mem0[a13 + 0x00000008:uint16]
	a2 = (uint32) v15
	branch a2 == 0x00000000 l4020CC4B
	// succ:  l4020CC3E l4020CC4B
l4020CC3E:
	a2 = a8
	a3 = a13 | a13
	Mem0[a1 + 0x00000018:word32] = a8
	a0 = 0x4020CC49
	call fn4030C344 (retsize: 0;)
	a8 = Mem0[a1 + 0x00000018:word32]
	// succ:  l4020CC4B
l4020CC4B:
	v16 = Mem0[a15 + 0x00000012:uint16]
	a2 = (uint32) v16
	a3 = a12 << 24
	a4 = a2 << 24
	a12 = a12 >>u 8
	a2 = a2 >>u 8
	a4 = a4 | a2
	a3 = a3 | a12
	a4 = a4 & 0x0000FFFF
	a12 = Mem0[a8 + 0x00000004:word32]
	a3 = a3 & 0x0000FFFF
	a5 = Mem0[a15 + 0x00000000:word32]
	a2 = 0
	a9 = a4 >>u 8
	a6 = a3 >>u 8
	Mem0[a12 + 0x00000001:byte] = a9
	Mem0[a12:byte] = a4
	Mem0[a12 + 0x00000002:byte] = a3
	Mem0[a12 + 0x00000003:byte] = a6
	Mem0[a12 + 0x00000006:byte] = a2
	Mem0[a12 + 0x00000007:byte] = a2
	a9 = a14 + 4
	branch a5 == a2 l4020CCA9
	// succ:  l4020CC89 l4020CCA9
l4020CC89:
	a2 = Mem0[a14 + 0x00000004:word32]
	branch a5 == a2 l4020CCA6
	// succ:  l4020CC8E l4020CCA6
l4020CC8E:
	a3 = 0x000000FA
	branch a8 != a13 l4020CC97
	// succ:  l4020CC94 l4020CC97
l4020CC94:
	goto l4020CD20
	// succ:  l4020CD20
l4020CC97:
	a2 = a8
	Mem0[a1 + 0x00000014:word32] = a3
	a0 = 0x4020CC9E
	call fn4030C0EC (retsize: 0;)
	a3 = Mem0[a1 + 0x00000014:word32]
	goto l4020CD20
	// succ:  l4020CD20
l4020CCA6:
	a9 = a15 | a15
	// succ:  l4020CCA9
l4020CCA9:
	v18 = Mem0[a8 + 0x00000008:uint16]
	a6 = (uint32) v18
	a3 = a6 << 24
	a2 = a6 >>u 8
	a2 = a3 | a2
	a2 = a2 & 0x0000FFFF
	a3 = a2 >>u 8
	Mem0[a12 + 0x00000004:byte] = a2
	Mem0[a12 + 0x00000005:byte] = a3
	v19 = Mem0[a15 + 0x00000010:byte]
	a2 = (uint32) v19
	branch (a2 & 0x00000001) != 0x00000000 l4020CCEA
	// succ:  l4020CCC7 l4020CCEA
l4020CCC7:
	a4 = Mem0[a1 + 0x00000010:word32]
	a3 = a9
	a2 = a8
	a5 = 17
	Mem0[a1 + 0x00000018:word32] = a8
	Mem0[a1 + 0x00000014:word32] = a9
	a0 = 0x4020CCD7
	call inet_chksum_pseudo (retsize: 0;)
	a3 = 0x4020A190
	a9 = Mem0[a1 + 0x00000014:word32]
	branch a2 == 0x00000000 l4020CCDF
	// succ:  l4020CCDC_1 l4020CCDF
l4020CCDC_1:
	a3 = a2
	// succ:  l4020CCDF
l4020CCDF:
	a2 = a3 >>u 0x00000008 & 0x0000FFFF
	a8 = Mem0[a1 + 0x00000018:word32]
	Mem0[a12 + 0x00000006:byte] = a3
	Mem0[a12 + 0x00000007:byte] = a2
	// succ:  l4020CCEA
l4020CCEA:
	v20 = Mem0[a15 + 0x0000000A:byte]
	a5 = (uint32) v20
	v21 = Mem0[a15 + 0x00000009:byte]
	a6 = (uint32) v21
	a4 = Mem0[a1 + 0x00000010:word32]
	a2 = a8
	Mem0[a1:word32] = a14
	a3 = a9
	a7 = 17
	Mem0[a1 + 0x00000018:word32] = a8
	a0 = 0x4020CCFF
	call ip_output_if (retsize: 0;)
	a8 = Mem0[a1 + 0x00000018:word32]
	a12 = a2 & 0x000000FF
	branch a8 == a13 l4020CD0C
	// succ:  l4020CD07 l4020CD0C
l4020CD07:
	a2 = a8
	a0 = 0x4020CD0C
	call fn4030C0EC (retsize: 0;)
	// succ:  l4020CD0C
l4020CD0C:
	a4 = 0x40209ABC
	a3 = a12
	v23 = Mem0[a4 + 0x00000078:uint16]
	a2 = (uint32) v23
	a2 = a2 + 1
	Mem0[a4 + 0x00000078:word16] = a2
	goto l4020CD20
	// succ:  l4020CD20
l4020CD1D:
	a3 = 0x000000FF
	// succ:  l4020CD20
l4020CD20:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a2 = a3
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  udp_sendto_if_exit
udp_sendto_if_exit:


// udp_sendto
// Return size: 0
void udp_sendto()
udp_sendto_entry:
	// succ:  l4020CD34
l4020CD34:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a13
	a13 = a2 | a2
	a2 = a4 | a4
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a15
	Mem0[a1 + 0x0000001C:word32] = a0
	a12 = a4
	a15 = a3
	a14 = a5 & 0x0000FFFF
	a0 = 0x4020CD52
	call ip_route (retsize: 0;)
	a6 = a2
	branch a2 != 0x00000000 l4020CD6A
	// succ:  l4020CD56 l4020CD6A
l4020CD56:
	a3 = 0x40209ABC
	a2 = 0x000000FC
	v13 = Mem0[a3 + 0x00000086:uint16]
	a4 = (uint32) v13
	a4 = a4 + 1
	Mem0[a3 + 0x00000086:word16] = a4
	goto l4020CD7B
	// succ:  l4020CD7B
l4020CD6A:
	a2 = a13 | a13
	a3 = a15 | a15
	a4 = a12 | a12
	a5 = a14
	a0 = 0x4020CD78
	call fn4030CBE8 (retsize: 0;)
	a2 = a2 & 0x000000FF
	// succ:  l4020CD7B
l4020CD7B:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  udp_sendto_exit
udp_sendto_exit:


// udp_connect
// Return size: 0
void udp_connect()
udp_connect_entry:
	// succ:  l4020CD8C
l4020CD8C:
	a1 = fp
	a1 = a1 - 16
	v4 = Mem0[a2 + 0x00000012:uint16]
	a5 = (uint32) v4
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a2
	a13 = a3
	a14 = a4 & 0x0000FFFF
	branch a5 == 0x00000000 l4020CDAA
	// succ:  l4020CDA4 l4020CDAA
l4020CDA4:
	branch a13 != 0x00000000 l4020CDBD
	// succ:  l4020CDA6 l4020CDBD
l4020CDA6:
	goto l4020CDBF
	// succ:  l4020CDBF
l4020CDAA:
	a3 = a12
	a4 = a5
	a0 = 0x4020CDB1
	call fn4030CB30 (retsize: 0;)
	a2 = a2 & 0x000000FF
	branch a2 == 0x00000000 l4020CDA4
	// succ:  l4020CDB7 l4020CDA4
l4020CDB7:
	goto l4020CDF3
	// succ:  l4020CDF3
l4020CDBD:
	a13 = Mem0[a13 + 0x00000000:word32]
	// succ:  l4020CDBF
l4020CDBF:
	v12 = Mem0[a12 + 0x00000010:byte]
	a4 = (uint32) v12
	a3 = 0x4020C8AC
	a2 = 4
	a4 = a4 | a2
	a2 = Mem0[a3 + 0x00000000:word32]
	Mem0[a12 + 0x00000004:word32] = a13
	Mem0[a12 + 0x00000014:word16] = a14
	Mem0[a12 + 0x00000010:byte] = a4
	branch a2 == 0x00000000 l4020CDE8
	// succ:  l4020CDD6 l4020CDE8
l4020CDD6:
	branch a12 == a2 l4020CDF1
	// succ:  l4020CDD9 l4020CDF1
l4020CDD9:
	a4 = a2
	goto l4020CDE3
	// succ:  l4020CDE3
l4020CDE0:
	branch a12 == a4 l4020CDF1
	// succ:  l4020CDE3 l4020CDF1
l4020CDE3:
	a4 = Mem0[a4 + 0x0000000C:word32]
	branch a4 != 0x00000000 l4020CDE0
	a4 = Mem0[a4 + 0x0000000C:word32]
	branch a4 != 0x00000000 l4020CDE0
	// succ:  l4020CDE8 l4020CDE0
l4020CDE8:
	Mem0[a12 + 0x0000000C:word32] = a2
	Mem0[a3:word32] = a12
	a2 = 0
	Mem0[a12 + 0x0000000C:word32] = a2
	Mem0[a3:word32] = a12
	a2 = 0
	Mem0[a12 + 0x0000000C:word32] = a2
	Mem0[a3:word32] = a12
	a2 = 0
	goto l4020CDF3
	// succ:  l4020CDF3
l4020CDF1:
	a2 = 0
	// succ:  l4020CDF3
l4020CDF3:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  udp_connect_exit
udp_connect_exit:


// udp_remove
// Return size: 0
void udp_remove()
udp_remove_entry:
	// succ:  l4020CE00
l4020CE00:
	a1 = fp
	a3 = 0x4020C8AC
	a1 = a1 - 16
	a4 = Mem0[a3 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a4 == a2 l4020CE12
	// succ:  l4020CE0D l4020CE12
l4020CE0D:
	branch a4 != 0x00000000 l4020CE1C
	// succ:  l4020CE0F l4020CE1C
l4020CE0F:
	goto l4020CE2C
	// succ:  l4020CE2C
l4020CE12:
	a4 = Mem0[a2 + 0x0000000C:word32]
	Mem0[a3:word32] = a4
	goto l4020CE2C
	// succ:  l4020CE2C
l4020CE1A:
	a4 = a3
	// succ:  l4020CE1C
l4020CE1C:
	a3 = Mem0[a4 + 0x0000000C:word32]
	branch a3 == 0x00000000 l4020CE2C
	// succ:  l4020CE20 l4020CE2C
l4020CE20:
	branch a2 != a3 l4020CE1A
	// succ:  l4020CE23 l4020CE1A
l4020CE23:
	a3 = Mem0[a2 + 0x0000000C:word32]
	Mem0[a4 + 0x0000000C:word32] = a3
	branch a3 != 0x00000000 l4020CE1A
	// succ:  l4020CE2C l4020CE1A
l4020CE2C:
	a0 = 0x402034CC
	v7 = a0
	a0 = 0x4020CE32
	call v7 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	a0 = 0x402034CC
	v8 = a0
	a0 = 0x4020CE32
	call v8 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  udp_remove_exit udp_remove_exit
udp_remove_exit:


// udp_new
// Return size: 0
void udp_new()
udp_new_entry:
	// succ:  l4020CE3C
l4020CE3C:
	a1 = fp
	a2 = 0x40209C38
	a1 = a1 - 16
	v4 = Mem0[a2 + 0x00000002:uint16]
	a2 = (uint32) v4
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x402034C4
	v6 = a0
	a0 = 0x4020CE4D
	call v6 (retsize: 0;)
	branch a2 == 0x00000000 l4020CE66
	// succ:  l4020CE4F l4020CE66
l4020CE4F:
	a3 = 0
	Mem0[a2 + 0x00000008:word32] = a3
	Mem0[a2:word32] = a3
	Mem0[a2 + 0x00000004:word32] = a3
	Mem0[a2 + 0x0000000C:word32] = a3
	Mem0[a2 + 0x00000010:word32] = a3
	Mem0[a2 + 0x00000014:word32] = a3
	Mem0[a2 + 0x00000018:word32] = a3
	Mem0[a2 + 0x0000001C:word32] = a3
	a3 = -1
	Mem0[a2 + 0x0000000A:byte] = a3
	// succ:  l4020CE66
l4020CE66:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  udp_new_exit
udp_new_exit:


// tcp_create_segment$isra$1
// Return size: 0
void tcp_create_segment$isra$1()
tcp_create_segment$isra$1_entry:
	// succ:  l4020CE70
l4020CE70:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1:word32] = a2
	a2 = 0x40209C38
	a9 = 2
	a9 = a7 & a9
	Mem0[a1 + 0x00000038:word32] = a12
	a8 = 12
	a12 = 0
	v8 = Mem0[a2 + 0x00000008:uint16]
	a2 = (uint32) v8
	Mem0[a1 + 0x00000034:word32] = a13
	branch a9 != 0x00000000 l4020CE8B
	// succ:  l4020CE88_1 l4020CE8B
l4020CE88_1:
	a8 = a12
	// succ:  l4020CE8B
l4020CE8B:
	a13 = a7 & 0x00000001
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x0000000C:word32] = a4
	Mem0[a1 + 0x00000010:word32] = a7
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a3
	a15 = a6
	Mem0[a1 + 0x00000008:word32] = a5
	a13 = a8 + a13 * 0x00000004
	a0 = 0x402034C4
	v17 = a0
	a0 = 0x4020CEA7
	call v17 (retsize: 0;)
	a14 = a2
	a4 = Mem0[a1 + 0x0000000C:word32]
	a7 = Mem0[a1 + 0x00000010:word32]
	branch a2 != a12 l4020CEBC
	// succ:  l4020CEB0 l4020CEBC
l4020CEB0:
	a2 = a4
	a0 = 0x4020CEB5
	call fn4030C0EC (retsize: 0;)
	a2 = a14
	goto l4020CF82
	// succ:  l4020CF82
l4020CEBC:
	Mem0[a2 + 0x0000000A:byte] = a7
	v18 = Mem0[a4 + 0x00000008:uint16]
	a7 = (uint32) v18
	a2 = a4 | a4
	a7 = a7 - a13
	a3 = 0x00000014
	Mem0[a14:word32] = a12
	Mem0[a14 + 0x00000004:word32] = a4
	Mem0[a14 + 0x00000008:word16] = a7
	a0 = 0x4020CED5
	call pbuf_header (retsize: 0;)
	branch a2 == 0x00000000 l4020CEED
	// succ:  l4020CED7 l4020CEED
l4020CED7:
	a3 = 0x40209ABC
	a2 = a14
	v19 = Mem0[a3 + 0x000000A4:uint16]
	a4 = (uint32) v19
	a4 = a4 + 1
	Mem0[a3 + 0x000000A4:word16] = a4
	a0 = 0x4020CEE8
	call fn4030B720 (retsize: 0;)
	a2 = a12
	goto l4020CF82
	// succ:  l4020CF82
l4020CEED:
	a4 = Mem0[a1 + 0x00000000:word32]
	a8 = Mem0[a14 + 0x00000004:word32]
	v20 = Mem0[a4 + 0x00000000:uint16]
	a3 = (uint32) v20
	a13 = a13 << 22
	a7 = a3 << 24
	a4 = a3 >>u 8
	a3 = Mem0[a8 + 0x00000004:word32]
	a4 = a7 | a4
	Mem0[a14 + 0x0000000C:word32] = a3
	a4 = a4 & 0x0000FFFF
	a7 = a4 >>u 8
	Mem0[a3:byte] = a4
	a4 = Mem0[a1 + 0x00000004:word32]
	Mem0[a3 + 0x00000001:byte] = a7
	v21 = Mem0[a4 + 0x00000000:uint16]
	a9 = (uint32) v21
	a8 = 0x40204510
	a4 = Mem0[a1 + 0x00000008:word32]
	a13 = a13 + 0x00005000
	a13 = a13 | a4
	a10 = a15 & a8
	a4 = a15 << 8
	a11 = a15 >>u 0x00000018 & 0x000000FF
	a11 = a11 | a4
	a7 = a9 << 24
	a10 = a10 << 24
	a9 = a9 >>u 8
	a6 = a15 >>u 8
	a4 = a13 >> 8
	a13 = a13 << 24
	a7 = a7 | a9
	a8 = a6 & a8
	a9 = a11 | a10
	a4 = a4 | a13
	a6 = a9 | a8
	a7 = a7 & 0x0000FFFF
	a4 = a4 & 0x0000FFFF
	a12 = a7 >>u 8
	a11 = a6 >>u 0x00000008 & 0x000000FF
	a10 = a6 >>u 0x00000010 & 0x000000FF
	a9 = a6 >>u 0x00000018 & 0x000000FF
	a8 = a4 >>u 8
	Mem0[a3 + 0x00000012:byte] = a2
	Mem0[a3 + 0x00000013:byte] = a2
	Mem0[a3 + 0x00000002:byte] = a7
	Mem0[a3 + 0x00000003:byte] = a12
	Mem0[a3 + 0x00000004:byte] = a6
	Mem0[a3 + 0x00000005:byte] = a11
	Mem0[a3 + 0x00000006:byte] = a10
	Mem0[a3 + 0x00000007:byte] = a9
	Mem0[a3 + 0x0000000C:byte] = a4
	Mem0[a3 + 0x0000000D:byte] = a8
	a2 = a14
	// succ:  l4020CF82
l4020CF82:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  tcp_create_segment$isra$1_exit
tcp_create_segment$isra$1_exit:


// tcp_output_alloc_header$constprop$2
// Return size: 0
void tcp_output_alloc_header$constprop$2()
tcp_output_alloc_header$constprop$2_entry:
	// succ:  l4020CF94
l4020CF94:
	a1 = fp
	a1 = a1 - 64
	a3 = a3 + 20
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000034:word32] = a13
	a12 = a2 | a2
	a13 = a4
	a2 = 1
	a3 = a3 & 0x0000FFFF
	a4 = 0
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a15
	a0 = 0x4020CFB5
	call fn4030C160 (retsize: 0;)
	branch a2 == 0x00000000 l4020D086
	// succ:  l4020CFB8 l4020D086
l4020CFB8:
	v11 = Mem0[a12 + 0x00000032:uint16]
	a3 = (uint32) v11
	a5 = Mem0[a12 + 0x0000002C:word32]
	Mem0[a1:word32] = a3
	a3 = 0x40204510
	a7 = a5 << 8
	a11 = a5 >>u 0x00000018 & 0x000000FF
	v15 = Mem0[a12 + 0x0000001E:uint16]
	a4 = (uint32) v15
	a10 = a5 & a3
	a11 = a11 | a7
	a7 = Mem0[a1 + 0x00000000:word32]
	a9 = a5 >>u 8
	a10 = a10 << 24
	a15 = a4 << 24
	a8 = a7 << 24
	a10 = a11 | a10
	a9 = a9 & a3
	a4 = a4 >>u 8
	a7 = a7 >>u 8
	a3 = Mem0[a2 + 0x00000004:word32]
	a4 = a15 | a4
	a7 = a8 | a7
	a8 = a10 | a9
	a10 = a13 >>u 0x00000010 & 0x000000FF
	a4 = a4 & 0x0000FFFF
	Mem0[a1 + 0x00000018:word32] = a10
	a10 = a13 >>u 0x00000018 & 0x000000FF
	v20 = Mem0[a12 + 0x00000020:uint16]
	a6 = (uint32) v20
	Mem0[a1 + 0x00000004:word32] = a10
	a15 = a4 >>u 8
	a10 = a8 >>u 0x00000008 & 0x000000FF
	Mem0[a3:byte] = a4
	a4 = Mem0[a1 + 0x00000018:word32]
	Mem0[a1 + 0x00000008:word32] = a10
	a10 = a8 >>u 0x00000010 & 0x000000FF
	a7 = a7 & 0x0000FFFF
	Mem0[a1 + 0x0000000C:word32] = a10
	Mem0[a3 + 0x00000006:byte] = a4
	a10 = a8 >>u 0x00000018 & 0x000000FF
	a4 = Mem0[a1 + 0x00000008:word32]
	Mem0[a1 + 0x00000010:word32] = a10
	a10 = a7 >>u 8
	a14 = a6 << 24
	Mem0[a1 + 0x00000014:word32] = a10
	Mem0[a3 + 0x00000009:byte] = a4
	a10 = Mem0[a1 + 0x00000004:word32]
	a4 = Mem0[a1 + 0x00000010:word32]
	a6 = a6 >>u 8
	a6 = a14 | a6
	a9 = a6 & 0x0000FFFF
	Mem0[a3 + 0x00000007:byte] = a10
	Mem0[a3 + 0x0000000B:byte] = a4
	a10 = Mem0[a1 + 0x0000000C:word32]
	a4 = 80
	Mem0[a3 + 0x0000000C:byte] = a4
	a14 = a9 >>u 8
	a11 = a13 >>u 0x00000008 & 0x000000FF
	a4 = 16
	Mem0[a3 + 0x0000000A:byte] = a10
	Mem0[a3 + 0x00000001:byte] = a15
	Mem0[a3 + 0x00000002:byte] = a9
	Mem0[a3 + 0x00000003:byte] = a14
	Mem0[a3 + 0x00000004:byte] = a13
	Mem0[a3 + 0x00000005:byte] = a11
	Mem0[a3 + 0x00000008:byte] = a8
	Mem0[a3 + 0x0000000D:byte] = a4
	Mem0[a3 + 0x0000000E:byte] = a7
	a7 = Mem0[a1 + 0x00000014:word32]
	a10 = Mem0[a1 + 0x00000000:word32]
	a6 = 0
	Mem0[a3 + 0x0000000F:byte] = a7
	Mem0[a3 + 0x00000010:byte] = a6
	Mem0[a3 + 0x00000011:byte] = a6
	Mem0[a3 + 0x00000012:byte] = a6
	Mem0[a3 + 0x00000013:byte] = a6
	a5 = a10 + a5
	Mem0[a12 + 0x00000034:word32] = a5
	// succ:  l4020D086
l4020D086:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  tcp_output_alloc_header$constprop$2_exit
tcp_output_alloc_header$constprop$2_exit:


// tcp_enqueue_flags
// Return size: 0
void tcp_enqueue_flags()
tcp_enqueue_flags_entry:
	// succ:  l4020D098
l4020D098:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2
	v5 = Mem0[a2 + 0x0000006C:uint16]
	a2 = (uint32) v5
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1:word32] = a14
	a13 = a3 & 0x000000FF
	branch a2 <u 0x00000008 l4020D0CC
	// succ:  l4020D0AE l4020D0CC
l4020D0AE:
	a3 = 0x40209ABC
	a2 = 0x000000FF
	v11 = Mem0[a3 + 0x0000009C:uint16]
	a4 = (uint32) v11
	a4 = a4 + 1
	Mem0[a3 + 0x0000009C:word16] = a4
	v12 = Mem0[a12 + 0x00000022:byte]
	a4 = (uint32) v12
	a3 = 0xFFFFFF80
	a3 = a4 | a3
	Mem0[a12 + 0x00000022:byte] = a3
	goto l4020D182
	// succ:  l4020D182
l4020D0CC:
	a7 = 2
	a7 = a13 & a7
	branch a7 == 0x00000000 l4020D0DA
	// succ:  l4020D0D3 l4020D0DA
l4020D0D3:
	a14 = 1
	a3 = 4
	goto l4020D0DE
	// succ:  l4020D0DE
l4020D0DA:
	a14 = a7
	a3 = a7
	// succ:  l4020D0DE
l4020D0DE:
	v14 = Mem0[a12 + 0x0000006A:uint16]
	a2 = (uint32) v14
	branch a2 != 0x00000000 l4020D0F4
	// succ:  l4020D0E3 l4020D0F4
l4020D0E3:
	a3 = 0x40209ABC
	a2 = 0x000000FF
	v15 = Mem0[a3 + 0x0000009C:uint16]
	a4 = (uint32) v15
	a4 = a4 + 1
	Mem0[a3 + 0x0000009C:word16] = a4
	goto l4020D182
	// succ:  l4020D182
l4020D0F4:
	a2 = 0x00000000
	a4 = a2 | a2
	a0 = 0x4020D0FD
	call fn4030C160 (retsize: 0;)
	a4 = a2
	branch a2 == 0x00000000 l4020D114
	// succ:  l4020D101 l4020D114
l4020D101:
	a6 = Mem0[a12 + 0x00000060:word32]
	a2 = a12 + 30
	a3 = a12 + 32
	a5 = a13
	a7 = a14 | a14
	a0 = 0x4020D112
	call fn4030CE70 (retsize: 0;)
	branch a2 != 0x00000000 l4020D131
	// succ:  l4020D114 l4020D131
l4020D114:
	v18 = Mem0[a12 + 0x00000022:byte]
	a4 = (uint32) v18
	a2 = 0xFFFFFF80
	a2 = a4 | a2
	a3 = 0x40209ABC
	Mem0[a12 + 0x00000022:byte] = a2
	v19 = Mem0[a3 + 0x0000009C:uint16]
	a4 = (uint32) v19
	a2 = 0x000000FF
	a4 = a4 + 1
	Mem0[a3 + 0x0000009C:word16] = a4
	goto l4020D182
	// succ:  l4020D182
l4020D131:
	a6 = Mem0[a12 + 0x00000070:word32]
	branch a6 != 0x00000000 l4020D13C
	// succ:  l4020D136 l4020D13C
l4020D136:
	Mem0[a12 + 0x00000070:word32] = a2
	goto l4020D147
	// succ:  l4020D147
l4020D13C:
	a4 = Mem0[a6 + 0x00000000:word32]
	branch a4 == 0x00000000 l4020D145
	// succ:  l4020D140 l4020D145
l4020D140:
	a6 = a4
	goto l4024D13C
	// succ:  l4024D13C
l4020D145:
	Mem0[a6:word32] = a2
	// succ:  l4020D147
l4020D147:
	a3 = 0
	Mem0[a12 + 0x0000006E:word16] = a3
	a3 = a13 & 0x00000003
	branch a3 == 0x00000000 l4020D161
	// succ:  l4020D151 l4020D161
l4020D151:
	a4 = Mem0[a12 + 0x00000060:word32]
	v20 = Mem0[a12 + 0x0000006A:uint16]
	a3 = (uint32) v20
	a4 = a4 + 1
	a3 = a3 - 1
	Mem0[a12 + 0x00000060:word32] = a4
	Mem0[a12 + 0x0000006A:word16] = a3
	// succ:  l4020D161
l4020D161:
	branch (a13 & 0x00000001) == 0x00000000 l4020D170
	// succ:  l4020D164 l4020D170
l4020D164:
	v21 = Mem0[a12 + 0x00000022:byte]
	a4 = (uint32) v21
	a3 = 0x00000020
	a3 = a4 | a3
	Mem0[a12 + 0x00000022:byte] = a3
	// succ:  l4020D170
l4020D170:
	a2 = Mem0[a2 + 0x00000004:word32]
	v22 = Mem0[a12 + 0x0000006C:uint16]
	a13 = (uint32) v22
	a0 = 0x4020D179
	call pbuf_clen (retsize: 0;)
	a2 = a2 + a13
	Mem0[a12 + 0x0000006C:word16] = a2
	a2 = 0x00000000
	// succ:  l4020D182
l4020D182:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_enqueue_flags_exit
l4024D13C:
tcp_enqueue_flags_exit:


// tcp_send_fin
// Return size: 0
void tcp_send_fin()
tcp_send_fin_entry:
	// succ:  l4020D190
l4020D190:
	a1 = fp
	a1 = a1 - 16
	a4 = Mem0[a2 + 0x00000070:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a4 == 0x00000000 l4020D1D6
	// succ:  l4020D19A l4020D1D6
l4020D19A:
	a3 = Mem0[a4 + 0x00000000:word32]
	branch a3 == 0x00000000 l4020D1A4
	// succ:  l4020D19E l4020D1A4
l4020D19E:
	a4 = a3
	goto l4024D19A
	// succ:  l4024D19A
l4020D1A4:
	a3 = Mem0[a4 + 0x0000000C:word32]
	v8 = Mem0[a3 + 0x0000000D:byte]
	a5 = (uint32) v8
	v9 = Mem0[a3 + 0x0000000C:byte]
	a4 = (uint32) v9
	a5 = a5 << 24
	a5 = a5 | a4
	a4 = a5 >>u 0x00000008 & 0x00000007
	branch a4 != 0x00000000 l4020D1D6
	// succ:  l4020D1B7 l4020D1D6
l4020D1B7:
	a6 = 0x00000100
	a5 = a5 | a6
	a6 = a5 >>u 8
	Mem0[a3 + 0x0000000C:byte] = a5
	Mem0[a3 + 0x0000000D:byte] = a6
	v11 = Mem0[a2 + 0x00000022:byte]
	a5 = (uint32) v11
	a3 = 32
	a3 = a5 | a3
	Mem0[a2 + 0x00000022:byte] = a3
	a2 = a4
	goto l4020D1DF
	// succ:  l4020D1DF
l4020D1D6:
	a3 = 0x00000001
	a0 = 0x4020D1DC
	call fn4030D098 (retsize: 0;)
	a2 = a2 & 0x000000FF
	// succ:  l4020D1DF
l4020D1DF:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_send_fin_exit
l4024D19A:
tcp_send_fin_exit:


// tcp_send_empty_ack
// Return size: 0
void tcp_send_empty_ack()
tcp_send_empty_ack_entry:
	// succ:  l4020D1E8
l4020D1E8:
	a1 = fp
	a1 = a1 - 32
	a3 = 0x40204510
	Mem0[a1 + 0x00000018:word32] = a12
	a12 = a2
	a2 = Mem0[a2 + 0x00000054:word32]
	Mem0[a1 + 0x00000014:word32] = a13
	a6 = a2 >>u 0x00000018 & 0x000000FF
	a4 = a2 & a3
	a5 = a2 << 8
	a5 = a6 | a5
	a4 = a4 << 24
	a2 = a2 >>u 8
	a5 = a5 | a4
	a4 = a2 & a3
	a4 = a5 | a4
	a2 = a12
	a3 = 0
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a15
	a0 = 0x4020D21F
	call fn4030CF94 (retsize: 0;)
	a13 = a2
	branch a2 == 0x00000000 l4020D266
	// succ:  l4020D224 l4020D266
l4020D224:
	v13 = Mem0[a12 + 0x00000022:byte]
	a3 = (uint32) v13
	a2 = -4
	a2 = a3 & a2
	a15 = Mem0[a13 + 0x00000004:word32]
	Mem0[a12 + 0x00000022:byte] = a2
	a14 = a12 + 4
	v14 = Mem0[a13 + 0x00000008:uint16]
	a6 = (uint32) v14
	a3 = a12
	a4 = a14
	a5 = 6
	a2 = a13 | a13
	a0 = 0x4020D242
	call inet_chksum_pseudo (retsize: 0;)
	a3 = a2 >>u 0x00000008 & 0x0000FFFF
	Mem0[a15 + 0x00000010:byte] = a2
	Mem0[a15 + 0x00000011:byte] = a3
	v15 = Mem0[a12 + 0x0000000A:byte]
	a5 = (uint32) v15
	v16 = Mem0[a12 + 0x00000009:byte]
	a6 = (uint32) v16
	a3 = a12
	a4 = a14
	a7 = 6
	a2 = a13
	a0 = 0x4020D25C
	call ip_output (retsize: 0;)
	a2 = a13
	a0 = 0x4020D261
	call fn4030C0EC (retsize: 0;)
	a2 = 0
	goto l4020D269
	// succ:  l4020D269
l4020D266:
	a2 = 0x000000FE
	// succ:  l4020D269
l4020D269:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  tcp_send_empty_ack_exit
tcp_send_empty_ack_exit:


// tcp_output
// Return size: 0
void tcp_output()
tcp_output_entry:
	// succ:  l4020D27C
l4020D27C:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = a2
	a2 = 0x4020D278
	Mem0[a1 + 0x0000002C:word32] = a0
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	branch a2 != a12 l4020D296
	// succ:  l4020D293 l4020D296
l4020D293:
	goto l4020D6D0
	// succ:  l4020D6D0
l4020D296:
	v9 = Mem0[a12 + 0x00000064:uint16]
	a2 = (uint32) v9
	Mem0[a1 + 0x00000004:word32] = a2
	a3 = Mem0[a1 + 0x00000004:word32]
	v11 = Mem0[a12 + 0x00000050:uint16]
	a2 = (uint32) v11
	branch a2 >=u a3 l4020D2A5
	// succ:  l4020D2A3 l4020D2A5
l4020D2A3:
	Mem0[a1 + 0x00000004:word32] = a2
	// succ:  l4020D2A5
l4020D2A5:
	v13 = Mem0[a12 + 0x00000022:byte]
	a5 = (uint32) v13
	a13 = Mem0[a12 + 0x00000070:word32]
	branch (a5 & 0x00000002) == 0x00000000 l4020D30C
	// succ:  l4020D2AE l4020D30C
l4020D2AE:
	branch a13 == 0x00000000 l4020D300
	// succ:  l4020D2B1 l4020D300
l4020D2B1:
	a2 = Mem0[a13 + 0x0000000C:word32]
	a3 = 0x40204510
	v15 = Mem0[a2 + 0x00000005:byte]
	a6 = (uint32) v15
	v17 = Mem0[a2 + 0x00000004:byte]
	a7 = (uint32) v17
	v19 = Mem0[a2 + 0x00000006:byte]
	a4 = (uint32) v19
	a6 = a6 << 24
	v20 = Mem0[a2 + 0x00000007:byte]
	a2 = (uint32) v20
	a6 = a6 | a7
	a4 = a4 << 16
	a4 = a4 | a6
	a2 = a2 << 8
	a2 = a2 | a4
	a4 = a2 & a3
	a9 = a2 >>u 0x00000018 & 0x000000FF
	a8 = a2 << 8
	v23 = Mem0[a13 + 0x00000008:uint16]
	a7 = (uint32) v23
	a2 = a2 >>u 8
	a6 = Mem0[a12 + 0x0000004C:word32]
	a8 = a9 | a8
	a4 = a4 << 24
	a4 = a8 | a4
	a3 = a2 & a3
	a3 = a4 | a3
	a2 = a7 - a6
	a4 = Mem0[a1 + 0x00000004:word32]
	a2 = a2 + a3
	branch a4 >=u a2 l4020D30C
	// succ:  l4020D300 l4020D30C
l4020D300:
	a2 = a12
	a0 = 0x4020D305
	call fn4030D1E8 (retsize: 0;)
	a2 = a2 & 0x000000FF
	goto l4020D6E6
	// succ:  l4020D6E6
l4020D30C:
	a3 = Mem0[a12 + 0x00000074:word32]
	a15 = a3
	branch a3 != 0x00000000 l4020D36A
	// succ:  l4020D314 l4020D36A
l4020D314:
	branch a13 == 0x00000000 l4020D6E1
	// succ:  l4020D317 l4020D6E1
l4020D317:
	a2 = Mem0[a13 + 0x0000000C:word32]
	a14 = 0x40204510
	v24 = Mem0[a2 + 0x00000005:byte]
	a7 = (uint32) v24
	v25 = Mem0[a2 + 0x00000004:byte]
	a9 = (uint32) v25
	v26 = Mem0[a2 + 0x00000006:byte]
	a6 = (uint32) v26
	a7 = a7 << 24
	v27 = Mem0[a2 + 0x00000007:byte]
	a4 = (uint32) v27
	a7 = a7 | a9
	a6 = a6 << 16
	a6 = a6 | a7
	a4 = a4 << 8
	a4 = a4 | a6
	a7 = a4 >>u 0x00000018 & 0x000000FF
	a11 = a4 << 8
	a9 = a4 >>u 8
	a11 = a11 | a7
	v30 = Mem0[a13 + 0x00000008:uint16]
	a10 = (uint32) v30
	a7 = a4 & a14
	a6 = Mem0[a12 + 0x0000004C:word32]
	a9 = a9 & a14
	a9 = a11 | a9
	a7 = a7 << 24
	a6 = a10 - a6
	a4 = a9 | a7
	a4 = a6 + a4
	a6 = Mem0[a1 + 0x00000004:word32]
	branch a6 >=u a4 l4020D376
	// succ:  l4020D365 l4020D376
l4020D365:
	a3 = a5
	goto l4020D6C4
	// succ:  l4020D6C4
l4020D36A:
	a2 = Mem0[a15 + 0x00000000:word32]
	branch a2 == 0x00000000 l4020D314
	// succ:  l4020D36F l4020D314
l4020D36F:
	a15 = a2
	goto l4024D36A
	// succ:  l4024D36A
l4020D376:
	Mem0[a1:word32] = a15
	branch a3 == 0x00000000 l4020D3A0
	// succ:  l4020D37A l4020D3A0
l4020D37A:
	v31 = Mem0[a12 + 0x00000022:byte]
	a3 = (uint32) v31
	a4 = 68
	branch (a3 & a4) != 0x00000000 l4020D3A0
	// succ:  l4020D382 l4020D3A0
l4020D382:
	branch a13 == 0x00000000 l4020D391
	// succ:  l4020D384 l4020D391
l4020D384:
	a4 = Mem0[a13 + 0x00000000:word32]
	branch a4 != 0x00000000 l4020D3A0
	// succ:  l4020D388 l4020D3A0
l4020D388:
	v32 = Mem0[a13 + 0x00000008:uint16]
	a5 = (uint32) v32
	v33 = Mem0[a12 + 0x0000003A:uint16]
	a4 = (uint32) v33
	branch a5 >=u a4 l4020D3A0
	// succ:  l4020D391 l4020D3A0
l4020D391:
	v34 = Mem0[a12 + 0x0000006A:uint16]
	a4 = (uint32) v34
	branch a4 == 0x00000000 l4020D3A0
	// succ:  l4020D397 l4020D3A0
l4020D397:
	v35 = Mem0[a12 + 0x0000006C:uint16]
	a4 = (uint32) v35
	branch a4 >=u 0x00000008 l4020D3A0
	// succ:  l4020D39D l4020D3A0
l4020D39D:
	goto l4020D6D5
	// succ:  l4020D6D5
l4020D3A0:
	a4 = Mem0[a13 + 0x00000000:word32]
	a3 = Mem0[a12 + 0x00000018:word32]
	Mem0[a12 + 0x00000070:word32] = a4
	branch a3 == 2 l4020D3D3
	// succ:  l4020D3AA l4020D3D3
l4020D3AA:
	v36 = Mem0[a2 + 0x0000000D:byte]
	a3 = (uint32) v36
	v37 = Mem0[a2 + 0x0000000C:byte]
	a4 = (uint32) v37
	a3 = a3 << 24
	a3 = a3 | a4
	a4 = 0x402040DC
	a3 = a3 | a4
	a3 = a3 & 0x0000FFFF
	a4 = a3 >>u 8
	Mem0[a2 + 0x0000000C:byte] = a3
	Mem0[a2 + 0x0000000D:byte] = a4
	v38 = Mem0[a12 + 0x00000022:byte]
	a3 = (uint32) v38
	a2 = -4
	a2 = a3 & a2
	Mem0[a12 + 0x00000022:byte] = a2
	// succ:  l4020D3D3
l4020D3D3:
	a2 = Mem0[a12 + 0x0000002C:word32]
	v39 = Mem0[a12 + 0x00000032:uint16]
	a4 = (uint32) v39
	a5 = a2 >>u 0x00000018 & 0x000000FF
	a3 = a2 << 8
	a9 = a2 & a14
	a3 = a5 | a3
	a9 = a9 << 24
	a7 = a2 >>u 8
	a5 = a4 >>u 8
	a6 = a4 << 24
	a3 = a3 | a9
	a7 = a7 & a14
	a6 = a6 | a5
	a3 = a3 | a7
	a5 = Mem0[a13 + 0x0000000C:word32]
	a6 = a6 & 0x0000FFFF
	a11 = a3 >>u 0x00000008 & 0x000000FF
	a10 = a3 >>u 0x00000010 & 0x000000FF
	a9 = a3 >>u 0x00000018 & 0x000000FF
	a7 = a6 >>u 8
	Mem0[a5 + 0x00000008:byte] = a3
	Mem0[a5 + 0x00000009:byte] = a11
	Mem0[a5 + 0x0000000A:byte] = a10
	Mem0[a5 + 0x0000000B:byte] = a9
	Mem0[a5 + 0x0000000E:byte] = a6
	Mem0[a5 + 0x0000000F:byte] = a7
	a2 = a4 + a2
	Mem0[a12 + 0x00000034:word32] = a2
	v40 = Mem0[a13 + 0x0000000A:byte]
	a2 = (uint32) v40
	a15 = a12 + 4
	branch (a2 & 0x00000001) == 0x00000000 l4020D451
	// succ:  l4020D42B l4020D451
l4020D42B:
	a3 = a15
	a2 = 0x000005B4
	Mem0[a1 + 0x00000008:word32] = a5
	a0 = 0x4020D435
	call fn4030C0B8 (retsize: 0;)
	a3 = 0xFFFFFF00
	a3 = a2 & a3
	a3 = a3 & 0x0000FFFF
	a2 = a2 << 8
	a4 = 0x00000402
	a2 = a2 | a4
	a3 = a3 << 24
	a5 = Mem0[a1 + 0x00000008:word32]
	a2 = a2 | a3
	Mem0[a5 + 0x00000014:word32] = a2
	// succ:  l4020D451
l4020D451:
	v41 = Mem0[a12 + 0x00000038:int16]
	a2 = (int32) v41
	branch a2 != -1 l4020D45D
	// succ:  l4020D457 l4020D45D
l4020D457:
	a2 = 0x00000000
	Mem0[a12 + 0x00000038:word16] = a2
	// succ:  l4020D45D
l4020D45D:
	a2 = Mem0[a12 + 0x00000000:word32]
	branch a2 != 0x00000000 l4020D470
	// succ:  l4020D463 l4020D470
l4020D463:
	a2 = a15 | a15
	a0 = 0x4020D469
	call ip_route (retsize: 0;)
	branch a2 == 0x00000000 l4020D515
	// succ:  l4020D46C l4020D515
l4020D46C:
	a2 = Mem0[a2 + 0x00000004:word32]
	Mem0[a12:word32] = a2
	// succ:  l4020D470
l4020D470:
	a2 = Mem0[a12 + 0x0000003C:word32]
	a7 = Mem0[a13 + 0x0000000C:word32]
	branch a2 != 0x00000000 l4020D4BA
	// succ:  l4020D477 l4020D4BA
l4020D477:
	v42 = Mem0[a7 + 0x00000005:byte]
	a4 = (uint32) v42
	v43 = Mem0[a7 + 0x00000004:byte]
	a5 = (uint32) v43
	v44 = Mem0[a7 + 0x00000006:byte]
	a3 = (uint32) v44
	v45 = Mem0[a7 + 0x00000007:byte]
	a2 = (uint32) v45
	a4 = a4 << 24
	a4 = a4 | a5
	a3 = a3 << 16
	a3 = a3 | a4
	a2 = a2 << 8
	a2 = a2 | a3
	a3 = a2 << 8
	a4 = a2 >>u 0x00000018 & 0x000000FF
	a5 = a2 & a14
	a4 = a4 | a3
	a3 = 0x4020B7B8
	a5 = a5 << 24
	a2 = a2 >>u 8
	a3 = Mem0[a3 + 0x00000000:word32]
	a4 = a4 | a5
	a2 = a2 & a14
	a2 = a4 | a2
	Mem0[a12 + 0x0000003C:word32] = a3
	Mem0[a12 + 0x00000040:word32] = a2
	// succ:  l4020D4BA
l4020D4BA:
	a2 = Mem0[a13 + 0x00000004:word32]
	a10 = 0
	a3 = Mem0[a2 + 0x00000004:word32]
	v46 = Mem0[a2 + 0x00000008:uint16]
	a6 = (uint32) v46
	a3 = a7 - a3
	v47 = Mem0[a2 + 0x0000000A:uint16]
	a4 = (uint32) v47
	a3 = a3 & 0x0000FFFF
	a6 = a6 - a3
	a6 = a6 & 0x0000FFFF
	a3 = a4 - a3
	Mem0[a2 + 0x0000000A:word16] = a3
	Mem0[a2 + 0x00000008:word16] = a6
	Mem0[a2 + 0x00000004:word32] = a7
	Mem0[a7 + 0x00000010:byte] = a10
	Mem0[a7 + 0x00000011:byte] = a10
	a3 = a12
	a4 = a15
	a5 = 6
	Mem0[a1 + 0x00000008:word32] = a7
	a0 = 0x4020D4EE
	call inet_chksum_pseudo (retsize: 0;)
	a3 = 0x40209ABC
	a7 = Mem0[a1 + 0x00000008:word32]
	v48 = Mem0[a3 + 0x00000090:uint16]
	a4 = (uint32) v48
	a5 = a2 >>u 0x00000008 & 0x0000FFFF
	Mem0[a7 + 0x00000010:byte] = a2
	Mem0[a7 + 0x00000011:byte] = a5
	a2 = a4 + 1
	Mem0[a3 + 0x00000090:word16] = a2
	v49 = Mem0[a12 + 0x0000000A:byte]
	a5 = (uint32) v49
	a2 = Mem0[a13 + 0x00000004:word32]
	v50 = Mem0[a12 + 0x00000009:byte]
	a6 = (uint32) v50
	a3 = a12
	a4 = a15
	a7 = 6
	a0 = 0x4020D515
	call ip_output (retsize: 0;)
	// succ:  l4020D515
l4020D515:
	a2 = Mem0[a13 + 0x0000000C:word32]
	v51 = Mem0[a13 + 0x00000008:uint16]
	a4 = (uint32) v51
	v52 = Mem0[a2 + 0x00000005:byte]
	a6 = (uint32) v52
	v53 = Mem0[a2 + 0x00000004:byte]
	a7 = (uint32) v53
	v54 = Mem0[a2 + 0x00000006:byte]
	a5 = (uint32) v54
	v55 = Mem0[a2 + 0x00000007:byte]
	a3 = (uint32) v55
	a6 = a6 << 24
	a6 = a6 | a7
	a5 = a5 << 16
	a5 = a5 | a6
	a3 = a3 << 8
	a3 = a3 | a5
	v56 = Mem0[a2 + 0x0000000D:byte]
	a7 = (uint32) v56
	a5 = a3 >>u 0x00000018 & 0x000000FF
	a2 = a3 << 8
	a6 = a3 & a14
	a5 = a5 | a2
	a6 = a6 << 24
	a5 = a5 | a6
	a3 = a3 >>u 8
	a7 = a7 & 0x00000003
	a2 = 0
	a6 = 1
	a3 = a3 & a14
	branch a7 == 0x00000000 l4020D55D
	// succ:  l4020D55A_1 l4020D55D
l4020D55A_1:
	a2 = a6
	// succ:  l4020D55D
l4020D55D:
	a2 = a4 + a2
	a5 = a5 | a3
	a4 = Mem0[a12 + 0x00000054:word32]
	a3 = a2 + a5
	a4 = a4 - a3
	branch a4 >= 0x00000000 l4020D570
	// succ:  l4020D56D l4020D570
l4020D56D:
	Mem0[a12 + 0x00000054:word32] = a3
	// succ:  l4020D570
l4020D570:
	branch a2 == 0x00000000 l4020D651
	// succ:  l4020D573 l4020D651
l4020D573:
	a2 = Mem0[a12 + 0x00000074:word32]
	a3 = 0
	Mem0[a13:word32] = a3
	branch a2 != a3 l4020D585
	// succ:  l4020D57D l4020D585
l4020D57D:
	Mem0[a12 + 0x00000074:word32] = a13
	Mem0[a1:word32] = a13
	goto l4020D656
	// succ:  l4020D656
l4020D585:
	a6 = Mem0[a1 + 0x00000000:word32]
	a4 = Mem0[a6 + 0x0000000C:word32]
	v57 = Mem0[a4 + 0x00000005:byte]
	a6 = (uint32) v57
	v58 = Mem0[a4 + 0x00000004:byte]
	a9 = (uint32) v58
	v59 = Mem0[a4 + 0x00000006:byte]
	a7 = (uint32) v59
	v60 = Mem0[a4 + 0x00000007:byte]
	a3 = (uint32) v60
	a6 = a6 << 24
	a6 = a6 | a9
	a4 = a7 << 16
	a4 = a4 | a6
	a3 = a3 << 8
	a3 = a3 | a4
	a7 = a3 >>u 0x00000018 & 0x000000FF
	a4 = a3 << 8
	a6 = a3 & a14
	a4 = a7 | a4
	a6 = a6 << 24
	a3 = a3 >>u 8
	a4 = a4 | a6
	a3 = a3 & a14
	a3 = a4 | a3
	a3 = a5 - a3
	branch a3 >= 0x00000000 l4020D648
	// succ:  l4020D5C8 l4020D648
l4020D5C8:
	a4 = Mem0[a2 + 0x0000000C:word32]
	a6 = a12 + 116
	v61 = Mem0[a4 + 0x00000005:byte]
	a7 = (uint32) v61
	v62 = Mem0[a4 + 0x00000004:byte]
	a10 = (uint32) v62
	v63 = Mem0[a4 + 0x00000006:byte]
	a9 = (uint32) v63
	v64 = Mem0[a4 + 0x00000007:byte]
	a3 = (uint32) v64
	a7 = a7 << 24
	a7 = a7 | a10
	a4 = a9 << 16
	a4 = a4 | a7
	a3 = a3 << 8
	a3 = a3 | a4
	a9 = a3 >>u 0x00000018 & 0x000000FF
	a4 = a3 << 8
	a7 = a3 & a14
	a4 = a9 | a4
	a7 = a7 << 24
	a3 = a3 >>u 8
	a4 = a4 | a7
	a3 = a3 & a14
	a3 = a4 | a3
	a3 = a3 - a5
	branch a3 >= 0x00000000 l4020D641
	// succ:  l4020D60C l4020D641
l4020D60C:
	a6 = a2
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 == 0x00000000 l4020D641
	// succ:  l4020D612 l4020D641
l4020D612:
	a4 = Mem0[a2 + 0x0000000C:word32]
	v65 = Mem0[a4 + 0x00000005:byte]
	a7 = (uint32) v65
	v66 = Mem0[a4 + 0x00000004:byte]
	a9 = (uint32) v66
	v67 = Mem0[a4 + 0x00000006:byte]
	a8 = (uint32) v67
	v68 = Mem0[a4 + 0x00000007:byte]
	a3 = (uint32) v68
	a7 = a7 << 24
	a7 = a7 | a9
	a4 = a8 << 16
	a4 = a4 | a7
	a3 = a3 << 8
	a3 = a3 | a4
	a8 = a3 >>u 0x00000018 & 0x000000FF
	a4 = a3 << 8
	a7 = a3 & a14
	a4 = a8 | a4
	goto l4024D5F7
	// succ:  l4024D5F7
l4020D641:
	Mem0[a13:word32] = a2
	Mem0[a6:word32] = a13
	goto l4020D656
	// succ:  l4020D656
l4020D648:
	a2 = Mem0[a1 + 0x00000000:word32]
	Mem0[a1:word32] = a13
	Mem0[a2:word32] = a13
	goto l4020D656
	// succ:  l4020D656
l4020D651:
	a2 = a13
	a0 = 0x4020D656
	call fn4030B720 (retsize: 0;)
	// succ:  l4020D656
l4020D656:
	a13 = Mem0[a12 + 0x00000070:word32]
	branch a13 != 0x00000000 l4020D664
	// succ:  l4020D65B l4020D664
l4020D65B:
	v69 = Mem0[a12 + 0x00000022:byte]
	a3 = (uint32) v69
	goto l4020D6BE
	// succ:  l4020D6BE
l4020D664:
	a2 = Mem0[a13 + 0x0000000C:word32]
	v70 = Mem0[a13 + 0x00000008:uint16]
	a7 = (uint32) v70
	v71 = Mem0[a2 + 0x00000005:byte]
	a5 = (uint32) v71
	v72 = Mem0[a2 + 0x00000004:byte]
	a6 = (uint32) v72
	v73 = Mem0[a2 + 0x00000006:byte]
	a4 = (uint32) v73
	a5 = a5 << 24
	v74 = Mem0[a2 + 0x00000007:byte]
	a3 = (uint32) v74
	a5 = a5 | a6
	a4 = a4 << 16
	a4 = a4 | a5
	a3 = a3 << 8
	a3 = a3 | a4
	a5 = a3 << 8
	a6 = a3 >>u 0x00000018 & 0x000000FF
	a9 = a3 & a14
	a6 = a6 | a5
	a4 = Mem0[a12 + 0x0000004C:word32]
	a5 = a3 >>u 8
	a9 = a9 << 24
	a6 = a6 | a9
	a5 = a5 & a14
	a4 = a7 - a4
	a3 = a6 | a5
	a3 = a4 + a3
	a4 = Mem0[a1 + 0x00000004:word32]
	branch a4 >=u a3 l4020D6B5
	// succ:  l4020D6AF l4020D6B5
l4020D6AF:
	v75 = Mem0[a12 + 0x00000022:byte]
	a3 = (uint32) v75
	goto l4020D6C4
	// succ:  l4020D6C4
l4020D6B5:
	a3 = Mem0[a12 + 0x00000074:word32]
	goto l4024D378
	// succ:  l4024D378
l4020D6BE:
	a2 = 0x00000000
	Mem0[a12 + 0x0000006E:word16] = a2
	// succ:  l4020D6C4
l4020D6C4:
	a3 = a3 & 0x0000007F
	Mem0[a12 + 0x00000022:byte] = a3
	a2 = 0
	goto l4020D6E6
	// succ:  l4020D6E6
l4020D6D0:
	a2 = 0
	goto l4020D6E6
	// succ:  l4020D6E6
l4020D6D5:
	a6 = 0xFFFFFFA0
	branch (a3 & a6) == 0x00000000 l4020D6DE
	// succ:  l4020D6DB l4020D6DE
l4020D6DB:
	goto l4024D3A0
	// succ:  l4024D3A0
l4020D6DE:
	goto l4024D6BB
	// succ:  l4024D6BB
l4020D6E1:
	a3 = a5
	goto l4024D6BE
	// succ:  l4024D6BE
l4020D6E6:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  tcp_output_exit
l4024D36A:
l4024D378:
l4024D3A0:
l4024D5F7:
l4024D6BB:
l4024D6BE:
tcp_output_exit:


// tcp_rst
// Return size: 0
void tcp_rst()
tcp_rst_entry:
	// succ:  l4020D6F8
l4020D6F8:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1:word32] = a4
	a13 = a2
	a12 = a3
	a2 = 1
	a3 = 20
	a4 = 0
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a5
	a14 = a6 & 0x0000FFFF
	a15 = a7 & 0x0000FFFF
	a0 = 0x4020D71C
	call fn4030C160 (retsize: 0;)
	a10 = a2
	branch a2 == 0x00000000 l4020D826
	// succ:  l4020D721 l4020D826
l4020D721:
	a3 = 0x40204510
	a8 = a13 >>u 0x00000018 & 0x000000FF
	a6 = a13 & a3
	a7 = a13 << 8
	a4 = a12 & a3
	a2 = a12 << 8
	a7 = a8 | a7
	a5 = a12 >>u 0x00000018 & 0x000000FF
	a6 = a6 << 24
	a13 = a13 >>u 8
	a5 = a5 | a2
	a8 = a14 << 24
	a6 = a7 | a6
	a13 = a13 & a3
	a12 = a12 >>u 8
	a4 = a4 << 24
	a14 = a14 >>u 8
	a14 = a8 | a14
	a4 = a5 | a4
	a8 = a6 | a13
	a3 = a12 & a3
	a2 = a15 << 24
	a15 = a15 >>u 8
	a12 = Mem0[a10 + 0x00000004:word32]
	a7 = a4 | a3
	a2 = a2 | a15
	a3 = a8 >>u 0x00000008 & 0x000000FF
	a2 = a2 & 0x0000FFFF
	Mem0[a1 + 0x00000008:word32] = a3
	v16 = Mem0[a10 + 0x00000008:uint16]
	a6 = (uint32) v16
	a9 = a14 & 0x0000FFFF
	a3 = a8 >>u 0x00000018 & 0x000000FF
	a14 = a2 >>u 8
	Mem0[a12 + 0x00000002:byte] = a2
	a2 = Mem0[a1 + 0x00000008:word32]
	Mem0[a1 + 0x0000000C:word32] = a3
	Mem0[a12 + 0x00000005:byte] = a2
	a3 = a7 >>u 0x00000008 & 0x000000FF
	a2 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a1 + 0x00000010:word32] = a3
	Mem0[a12 + 0x00000007:byte] = a2
	a3 = a7 >>u 0x00000010 & 0x000000FF
	a2 = Mem0[a1 + 0x00000010:word32]
	Mem0[a1 + 0x00000014:word32] = a3
	Mem0[a12 + 0x00000009:byte] = a2
	a3 = a7 >>u 0x00000018 & 0x000000FF
	a2 = Mem0[a1 + 0x00000014:word32]
	Mem0[a1 + 0x00000018:word32] = a3
	Mem0[a12 + 0x0000000A:byte] = a2
	a2 = Mem0[a1 + 0x00000018:word32]
	a13 = 0
	Mem0[a12 + 0x0000000B:byte] = a2
	a2 = 80
	Mem0[a12 + 0x0000000C:byte] = a2
	a2 = 20
	Mem0[a12 + 0x0000000D:byte] = a2
	a2 = 22
	a11 = a8 >>u 0x00000010 & 0x000000FF
	a15 = a9 >>u 8
	Mem0[a12 + 0x0000000E:byte] = a2
	a2 = 0xFFFFFFD0
	a3 = Mem0[a1 + 0x00000000:word32]
	a4 = Mem0[a1 + 0x00000004:word32]
	Mem0[a12:byte] = a9
	Mem0[a12 + 0x00000004:byte] = a8
	Mem0[a12 + 0x00000006:byte] = a11
	Mem0[a12 + 0x00000008:byte] = a7
	Mem0[a12 + 0x0000000F:byte] = a2
	Mem0[a12 + 0x00000001:byte] = a15
	Mem0[a12 + 0x00000003:byte] = a14
	Mem0[a12 + 0x00000010:byte] = a13
	Mem0[a12 + 0x00000011:byte] = a13
	Mem0[a12 + 0x00000012:byte] = a13
	a5 = 6
	Mem0[a12 + 0x00000013:byte] = a13
	a2 = a10
	Mem0[a1 + 0x0000001C:word32] = a10
	a0 = 0x4020D7F7
	call inet_chksum_pseudo (retsize: 0;)
	a8 = 0x40209ABC
	a10 = Mem0[a1 + 0x0000001C:word32]
	v19 = Mem0[a8 + 0x00000090:uint16]
	a9 = (uint32) v19
	a3 = a2 >>u 0x00000008 & 0x0000FFFF
	Mem0[a12 + 0x00000010:byte] = a2
	Mem0[a12 + 0x00000011:byte] = a3
	a9 = a9 + 1
	a3 = Mem0[a1 + 0x00000000:word32]
	a4 = Mem0[a1 + 0x00000004:word32]
	a2 = a10
	Mem0[a8 + 0x00000090:word16] = a9
	a5 = 0x000000FF
	a6 = a13
	a7 = 6
	Mem0[a1 + 0x0000001C:word32] = a10
	a0 = 0x4020D81F
	call ip_output (retsize: 0;)
	a10 = Mem0[a1 + 0x0000001C:word32]
	a2 = a10
	a0 = 0x4020D826
	call fn4030C0EC (retsize: 0;)
	// succ:  l4020D826
l4020D826:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  tcp_rst_exit
tcp_rst_exit:


// tcp_rexmit_rto
// Return size: 0
void tcp_rexmit_rto()
tcp_rexmit_rto_entry:
	// succ:  l4020D838
l4020D838:
	a1 = fp
	a1 = a1 - 16
	a6 = Mem0[a2 + 0x00000074:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	a5 = a2
	branch a6 == 0x00000000 l4020D86D
	// succ:  l4020D844 l4020D86D
l4020D844:
	a4 = a6
	a3 = Mem0[a4 + 0x00000000:word32]
	branch a3 == 0x00000000 l4020D850
	// succ:  l4020D84A l4020D850
l4020D84A:
	a4 = a3
	goto l4024D846
	// succ:  l4024D846
l4020D850:
	a7 = Mem0[a5 + 0x00000070:word32]
	a2 = a5 | a5
	Mem0[a4:word32] = a7
	v10 = Mem0[a5 + 0x0000004A:byte]
	a4 = (uint32) v10
	Mem0[a5 + 0x00000070:word32] = a6
	a4 = a4 + 1
	Mem0[a5 + 0x00000074:word32] = a3
	Mem0[a5 + 0x0000004A:byte] = a4
	Mem0[a5 + 0x0000003C:word32] = a3
	a0 = 0x4020D86D
	call fn4030D27C (retsize: 0;)
	// succ:  l4020D86D
l4020D86D:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_rexmit_rto_exit
l4024D846:
tcp_rexmit_rto_exit:


// tcp_rexmit
// Return size: 0
void tcp_rexmit()
tcp_rexmit_entry:
	// succ:  l4020D874
l4020D874:
	a1 = fp
	a1 = a1 - 16
	a10 = Mem0[a2 + 0x00000074:word32]
	Mem0[a1 + 0x0000000C:word32] = a12
	branch a10 == 0x00000000 l4020D92C
	// succ:  l4020D87F l4020D92C
l4020D87F:
	a4 = Mem0[a10 + 0x00000000:word32]
	a3 = Mem0[a2 + 0x00000070:word32]
	Mem0[a2 + 0x00000074:word32] = a4
	a8 = a2 + 112
	branch a3 == 0x00000000 l4020D915
	// succ:  l4020D88D l4020D915
l4020D88D:
	a5 = Mem0[a10 + 0x0000000C:word32]
	a6 = 0x40204510
	v12 = Mem0[a5 + 0x00000005:byte]
	a7 = (uint32) v12
	v14 = Mem0[a5 + 0x00000004:byte]
	a11 = (uint32) v14
	v16 = Mem0[a5 + 0x00000006:byte]
	a9 = (uint32) v16
	v17 = Mem0[a5 + 0x00000007:byte]
	a4 = (uint32) v17
	a7 = a7 << 24
	a7 = a7 | a11
	a5 = a9 << 16
	a5 = a5 | a7
	a4 = a4 << 8
	a4 = a4 | a5
	a9 = a4 >>u 0x00000018 & 0x000000FF
	a7 = a4 << 8
	a5 = a4 & a6
	a9 = a9 | a7
	a5 = a5 << 24
	a4 = a4 >>u 8
	a9 = a9 | a5
	a4 = a4 & a6
	a9 = a9 | a4
	goto l4020D8D4
	// succ:  l4020D8D4
l4020D8CE:
	a8 = a3
	a3 = Mem0[a3 + 0x00000000:word32]
	branch a3 == 0x00000000 l4020D915
	// succ:  l4020D8D4 l4020D915
l4020D8D4:
	a5 = Mem0[a3 + 0x0000000C:word32]
	v18 = Mem0[a5 + 0x00000005:byte]
	a7 = (uint32) v18
	v19 = Mem0[a5 + 0x00000004:byte]
	a12 = (uint32) v19
	v20 = Mem0[a5 + 0x00000006:byte]
	a11 = (uint32) v20
	v21 = Mem0[a5 + 0x00000007:byte]
	a4 = (uint32) v21
	a7 = a7 << 24
	a7 = a7 | a12
	a5 = a11 << 16
	a5 = a5 | a7
	a4 = a4 << 8
	a4 = a4 | a5
	a11 = a4 >>u 0x00000018 & 0x000000FF
	a5 = a4 << 8
	a7 = a4 & a6
	a5 = a11 | a5
	a7 = a7 << 24
	a4 = a4 >>u 8
	a5 = a5 | a7
	a4 = a4 & a6
	a4 = a5 | a4
	a4 = a4 - a9
	branch a4 < 0x00000000 l4020D8CE
	a5 = Mem0[a3 + 0x0000000C:word32]
	v22 = Mem0[a5 + 0x00000005:byte]
	a7 = (uint32) v22
	v23 = Mem0[a5 + 0x00000004:byte]
	a12 = (uint32) v23
	v24 = Mem0[a5 + 0x00000006:byte]
	a11 = (uint32) v24
	v25 = Mem0[a5 + 0x00000007:byte]
	a4 = (uint32) v25
	a7 = a7 << 24
	a7 = a7 | a12
	a5 = a11 << 16
	a5 = a5 | a7
	a4 = a4 << 8
	a4 = a4 | a5
	a11 = a4 >>u 0x00000018 & 0x000000FF
	a5 = a4 << 8
	a7 = a4 & a6
	a5 = a11 | a5
	a7 = a7 << 24
	a4 = a4 >>u 8
	a5 = a5 | a7
	a4 = a4 & a6
	a4 = a5 | a4
	a4 = a4 - a9
	branch a4 < 0x00000000 l4020D8CE
	// succ:  l4020D915 l4020D8CE
l4020D915:
	Mem0[a10:word32] = a3
	Mem0[a8:word32] = a10
	a3 = Mem0[a10 + 0x00000000:word32]
	branch a3 != 0x00000000 l4020D920
	Mem0[a10:word32] = a3
	Mem0[a8:word32] = a10
	a3 = Mem0[a10 + 0x00000000:word32]
	branch a3 != 0x00000000 l4020D920
	// succ:  l4020D91D l4020D920
l4020D91D:
	Mem0[a2 + 0x0000006E:word16] = a3
	Mem0[a2 + 0x0000006E:word16] = a3
	// succ:  l4020D920
l4020D920:
	v26 = Mem0[a2 + 0x0000004A:byte]
	a3 = (uint32) v26
	a3 = a3 + 1
	Mem0[a2 + 0x0000004A:byte] = a3
	a3 = 0
	Mem0[a2 + 0x0000003C:word32] = a3
	// succ:  l4020D92C
l4020D92C:
	a12 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_rexmit_exit
tcp_rexmit_exit:


// tcp_rexmit_fast
// Return size: 0
void tcp_rexmit_fast()
tcp_rexmit_fast_entry:
	// succ:  l4020D934
l4020D934:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2 | a2
	a2 = Mem0[a2 + 0x00000074:word32]
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a2 == 0x00000000 l4020D98A
	// succ:  l4020D946 l4020D98A
l4020D946:
	v6 = Mem0[a12 + 0x00000022:byte]
	a2 = (uint32) v6
	branch (a2 & 0x00000004) != 0x00000000 l4020D98A
	// succ:  l4020D94C l4020D98A
l4020D94C:
	a2 = a12
	a0 = 0x4020D951
	call fn4030D874 (retsize: 0;)
	v7 = Mem0[a12 + 0x00000050:uint16]
	a2 = (uint32) v7
	v9 = Mem0[a12 + 0x00000064:uint16]
	a3 = (uint32) v9
	branch a3 >=u a2 l4020D963
	// succ:  l4020D95A l4020D963
l4020D95A:
	a2 = a3 >>u 1
	Mem0[a12 + 0x00000052:word16] = a2
	goto l4020D969
	// succ:  l4020D969
l4020D963:
	a2 = a2 >>u 1
	Mem0[a12 + 0x00000052:word16] = a2
	// succ:  l4020D969
l4020D969:
	v11 = Mem0[a12 + 0x0000003A:uint16]
	a4 = (uint32) v11
	a3 = a4 << 31
	branch a2 >= a3 l4020D978
	// succ:  l4020D972 l4020D978
l4020D972:
	a2 = a3 & 0x0000FFFF
	Mem0[a12 + 0x00000052:word16] = a2
	// succ:  l4020D978
l4020D978:
	v13 = Mem0[a12 + 0x00000022:byte]
	a5 = (uint32) v13
	a3 = a4 + a3
	a2 = a2 + a3
	a3 = 4
	a5 = a5 | a3
	Mem0[a12 + 0x00000050:word16] = a2
	Mem0[a12 + 0x00000022:byte] = a5
	// succ:  l4020D98A
l4020D98A:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  tcp_rexmit_fast_exit
tcp_rexmit_fast_exit:


// tcp_keepalive
// Return size: 0
void tcp_keepalive()
tcp_keepalive_entry:
	// succ:  l4020D994
l4020D994:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	a12 = a2
	a2 = Mem0[a2 + 0x00000054:word32]
	a3 = 0x40204510
	a2 = a2 - 1
	a6 = a2 >>u 0x00000018 & 0x000000FF
	a4 = a2 & a3
	a5 = a2 << 8
	a5 = a6 | a5
	a4 = a4 << 24
	a2 = a2 >>u 8
	a5 = a5 | a4
	a4 = a2 & a3
	a4 = a5 | a4
	a2 = a12
	a3 = 0
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a15
	a0 = 0x4020D9CE
	call fn4030CF94 (retsize: 0;)
	a13 = a2
	branch a2 == 0x00000000 l4020DA0C
	// succ:  l4020D9D3 l4020DA0C
l4020D9D3:
	a14 = a12 + 4
	v13 = Mem0[a2 + 0x00000008:uint16]
	a6 = (uint32) v13
	a3 = a12
	a4 = a14
	a5 = 6
	a15 = Mem0[a13 + 0x00000004:word32]
	a0 = 0x4020D9E3
	call inet_chksum_pseudo (retsize: 0;)
	a3 = 0x40209ABC
	a5 = a2 >>u 0x00000008 & 0x0000FFFF
	v14 = Mem0[a3 + 0x00000090:uint16]
	a4 = (uint32) v14
	Mem0[a15 + 0x00000010:byte] = a2
	Mem0[a15 + 0x00000011:byte] = a5
	a2 = a4 + 1
	Mem0[a3 + 0x00000090:word16] = a2
	v15 = Mem0[a12 + 0x0000000A:byte]
	a5 = (uint32) v15
	a2 = a13
	a3 = a12
	a4 = a14
	a6 = 0
	a7 = 6
	a0 = 0x4020DA07
	call ip_output (retsize: 0;)
	a2 = a13
	a0 = 0x4020DA0C
	call fn4030C0EC (retsize: 0;)
	// succ:  l4020DA0C
l4020DA0C:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  tcp_keepalive_exit
tcp_keepalive_exit:


// tcp_zero_window_probe
// Return size: 0
void tcp_zero_window_probe()
tcp_zero_window_probe_entry:
	// succ:  l4020DA24
l4020DA24:
	a1 = fp
	a1 = a1 - 48
	a5 = Mem0[a2 + 0x00000074:word32]
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	a12 = a2
	branch a5 != 0x00000000 l4020DA3E
	// succ:  l4020DA38 l4020DA3E
l4020DA38:
	a5 = Mem0[a2 + 0x00000070:word32]
	branch a5 == 0x00000000 l4020DB04
	// succ:  l4020DA3E l4020DB04
l4020DA3E:
	a2 = Mem0[a5 + 0x0000000C:word32]
	a3 = 1
	v11 = Mem0[a2 + 0x0000000D:byte]
	a14 = (uint32) v11
	a14 = a14 & 0x00000001
	branch a14 == 0x00000000 l4020DA5B
	// succ:  l4020DA4A l4020DA5B
l4020DA4A:
	v12 = Mem0[a5 + 0x00000008:uint16]
	a14 = (uint32) v12
	a6 = 1
	a4 = 0
	a3 = a6
	branch a14 != 0x00000000 l4020DA56
	// succ:  l4020DA53_1 l4020DA56
l4020DA53_1:
	a3 = a4
	// succ:  l4020DA56
l4020DA56:
	branch a14 != 0x00000000 l4020DA59
	// succ:  l4020DA56_2 l4020DA59
l4020DA56_2:
	a4 = a6
	// succ:  l4020DA59
l4020DA59:
	a14 = a4
	// succ:  l4020DA5B
l4020DA5B:
	v16 = Mem0[a2 + 0x00000005:byte]
	a8 = (uint32) v16
	v17 = Mem0[a2 + 0x00000006:byte]
	a6 = (uint32) v17
	v19 = Mem0[a2 + 0x00000004:byte]
	a7 = (uint32) v19
	v20 = Mem0[a2 + 0x00000007:byte]
	a4 = (uint32) v20
	a8 = a8 << 24
	a2 = a8 | a7
	a6 = a6 << 16
	a6 = a6 | a2
	a4 = a4 << 8
	a2 = a12
	a4 = a4 | a6
	Mem0[a1:word32] = a5
	a0 = 0x4020DA80
	call fn4030CF94 (retsize: 0;)
	a13 = a2
	a5 = Mem0[a1 + 0x00000000:word32]
	branch a2 == 0x00000000 l4020DB04
	// succ:  l4020DA87 l4020DB04
l4020DA87:
	a15 = Mem0[a2 + 0x00000004:word32]
	branch a14 == 0x00000000 l4020DAB2
	// succ:  l4020DA8B l4020DAB2
l4020DA8B:
	v21 = Mem0[a15 + 0x0000000D:byte]
	a2 = (uint32) v21
	v22 = Mem0[a15 + 0x0000000C:byte]
	a3 = (uint32) v22
	a2 = a2 << 24
	a2 = a2 | a3
	a3 = 0x4020DA1C
	a2 = a2 & a3
	a3 = 0x4020DA20
	a2 = a2 | a3
	a2 = a2 & 0x0000FFFF
	a3 = a2 >>u 8
	Mem0[a15 + 0x0000000C:byte] = a2
	Mem0[a15 + 0x0000000D:byte] = a3
	goto l4020DAC9
	// succ:  l4020DAC9
l4020DAB2:
	a2 = Mem0[a5 + 0x00000004:word32]
	v26 = Mem0[a5 + 0x00000008:uint16]
	a3 = (uint32) v26
	v27 = Mem0[a2 + 0x00000008:uint16]
	a5 = (uint32) v27
	a4 = 0x00000001
	a5 = a5 - a3
	a5 = a5 & 0x0000FFFF
	a3 = a15 + 20
	a0 = 0x4020DAC9
	call fn4030C3F8 (retsize: 0;)
	// succ:  l4020DAC9
l4020DAC9:
	a14 = a12 + 4
	v23 = Mem0[a13 + 0x00000008:uint16]
	a6 = (uint32) v23
	a3 = a12
	a4 = a14
	a5 = 6
	a2 = a13 | a13
	a0 = 0x4020DADA
	call inet_chksum_pseudo (retsize: 0;)
	a3 = 0x40209ABC
	a5 = a2 >>u 0x00000008 & 0x0000FFFF
	v24 = Mem0[a3 + 0x00000090:uint16]
	a4 = (uint32) v24
	Mem0[a15 + 0x00000010:byte] = a2
	Mem0[a15 + 0x00000011:byte] = a5
	a2 = a4 + 1
	Mem0[a3 + 0x00000090:word16] = a2
	v25 = Mem0[a12 + 0x0000000A:byte]
	a5 = (uint32) v25
	a2 = a13
	a3 = a12
	a4 = a14
	a6 = 0
	a7 = 0x00000006
	a0 = 0x4020DAFF
	call ip_output (retsize: 0;)
	a2 = a13
	a0 = 0x4020DB04
	call fn4030C0EC (retsize: 0;)
	// succ:  l4020DB04
l4020DB04:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  tcp_zero_window_probe_exit
tcp_zero_window_probe_exit:


// ipaddr_aton
// Return size: 0
void ipaddr_aton()
ipaddr_aton_entry:
	// succ:  l4020DB14
l4020DB14:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x0000002C:word32] = a12
	Mem0[a1 + 0x00000028:word32] = a13
	Mem0[a1 + 0x00000024:word32] = a14
	Mem0[a1 + 0x00000020:word32] = a15
	v8 = Mem0[a2 + 0x00000000:byte]
	a4 = (uint32) v8
	a9 = 9
	a5 = a4 - 48
	a6 = a5 & 0x000000FF
	Mem0[a1 + 0x00000010:word32] = a3
	a12 = a1
	a14 = a1 + 12
	a13 = 48
	a10 = 0xFFFFFFDF
	a11 = 25
	branch a9 >=u a6 l4020DB40
	// succ:  l4020DB3A l4020DB40
l4020DB3A:
	a2 = 0
	goto l4020DC86
	// succ:  l4020DC86
l4020DB40:
	a8 = 10
	branch a4 != a13 l4020DB66
	// succ:  l4020DB45 l4020DB66
l4020DB45:
	v17 = Mem0[a2 + 0x00000001:byte]
	a4 = (uint32) v17
	a5 = 88
	a3 = a4 & a10
	branch a3 == a5 l4020DB5C
	// succ:  l4020DB50 l4020DB5C
l4020DB50:
	a2 = a2 + 1
	a8 = 8
	a5 = a4 - 48
	goto l4020DB66
	// succ:  l4020DB66
l4020DB5C:
	v18 = Mem0[a2 + 0x00000002:byte]
	a4 = (uint32) v18
	a8 = 16
	a2 = a2 + 2
	a5 = a4 - 48
	// succ:  l4020DB66
l4020DB66:
	a3 = 0
	// succ:  l4020DB70
l4020DB70:
	a7 = a3 * a8
	a6 = a4 & a10
	a6 = a6 - 65
	a5 = a5 & 0x000000FF
	a7 = a7 + a4
	a15 = a4 - 97
	a6 = a6 & 0x000000FF
	branch a9 <u a5 l4020DB90
	// succ:  l4020DB87 l4020DB90
l4020DB87:
	a3 = a7 - 48
	v20 = Mem0[a2 + 0x00000001:byte]
	a4 = (uint32) v20
	goto l4024DB6B
	// succ:  l4024DB6B
l4020DB90:
	branch a8 != 16 l4020DBB4
	// succ:  l4020DB93 l4020DBB4
l4020DB93:
	a15 = a15 & 0x000000FF
	branch a6 >=u 0x00000006 l4020DBB4
	// succ:  l4020DB99 l4020DBB4
l4020DB99:
	a4 = a4 + 10
	a5 = 0x00000041
	a3 = a3 << 28
	branch a11 <u a15 l4020DBA8
	// succ:  l4020DBA5 l4020DBA8
l4020DBA5:
	a5 = 0x00000061
	// succ:  l4020DBA8
l4020DBA8:
	a5 = a4 - a5
	a3 = a5 | a3
	v21 = Mem0[a2 + 0x00000001:byte]
	a4 = (uint32) v21
	goto l4024DB6B
	// succ:  l4024DB6B
l4020DBB4:
	a5 = 46
	branch a4 != a5 l4020DBD7
	// succ:  l4020DBB9 l4020DBD7
l4020DBB9:
	branch a12 != a14 l4020DBBF
	// succ:  l4020DBBC l4020DBBF
l4020DBBC:
	goto l4024DB3A
	// succ:  l4024DB3A
l4020DBBF:
	Mem0[a12:word32] = a3
	v22 = Mem0[a2 + 0x00000001:byte]
	a4 = (uint32) v22
	a12 = a12 + 4
	a5 = a4 - 48
	a3 = a5 & 0x000000FF
	a2 = a2 + 1
	branch a9 <u a3 l4020DBD4
	// succ:  l4020DBD1 l4020DBD4
l4020DBD1:
	goto l4024DB40
	// succ:  l4024DB40
l4020DBD4:
	goto l4024DB3A
	// succ:  l4024DB3A
l4020DBD7:
	a2 = 0xFFFFFFDF
	branch (a4 & a2) == 0x00000000 l4020DBE9
	// succ:  l4020DBDD l4020DBE9
l4020DBDD:
	a2 = a4 - 9
	a2 = a2 & 0x000000FF
	branch a2 <u 0x00000005 l4020DBE9
	// succ:  l4020DBE6 l4020DBE9
l4020DBE6:
	goto l4024DB3A
	// succ:  l4024DB3A
l4020DBE9:
	a2 = a12 - a1
	a2 = a2 >> 2
	a2 = a2 + 1
	branch a2 == 2 l4020DC08
	// succ:  l4020DBF4 l4020DC08
l4020DBF4:
	branch a2 >= 3 l4020DBFD
	// succ:  l4020DBF7 l4020DBFD
l4020DBF7:
	branch a2 == 0x00000000 l4020DC86
	// succ:  l4020DBFA l4020DC86
l4020DBFA:
	goto l4020DC59
	// succ:  l4020DC59
l4020DBFD:
	branch a2 == 3 l4020DC1C
	// succ:  l4020DC00 l4020DC1C
l4020DC00:
	branch a2 == 4 l4020DC38
	// succ:  l4020DC03 l4020DC38
l4020DC03:
	goto l4020DC59
	// succ:  l4020DC59
l4020DC08:
	a2 = 0x40203740
	branch a2 >=u a3 l4020DC11
	// succ:  l4020DC0E l4020DC11
l4020DC0E:
	goto l4024DB3A
	// succ:  l4024DB3A
l4020DC11:
	a2 = Mem0[a1 + 0x00000000:word32]
	a2 = a2 << 8
	a3 = a3 | a2
	goto l4020DC59
	// succ:  l4020DC59
l4020DC1C:
	a2 = 0x4020A190
	branch a2 >=u a3 l4020DC25
	// succ:  l4020DC22 l4020DC25
l4020DC22:
	goto l4024DB3A
	// succ:  l4024DB3A
l4020DC25:
	a4 = Mem0[a1 + 0x00000004:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	a4 = a4 << 16
	a2 = a2 << 8
	a2 = a4 | a2
	a3 = a2 | a3
	goto l4020DC59
	// succ:  l4020DC59
l4020DC38:
	a2 = 0x000000FF
	branch a2 >=u a3 l4020DC41
	// succ:  l4020DC3E l4020DC41
l4020DC3E:
	goto l4024DB3A
	// succ:  l4024DB3A
l4020DC41:
	a4 = Mem0[a1 + 0x00000004:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	a4 = a4 << 16
	a2 = a2 << 8
	a4 = a4 | a2
	a2 = Mem0[a1 + 0x00000008:word32]
	a2 = a2 << 24
	a2 = a4 | a2
	a3 = a2 | a3
	// succ:  l4020DC59
l4020DC59:
	a2 = Mem0[a1 + 0x00000010:word32]
	branch a2 == 0x00000000 l4020DC84
	// succ:  l4020DC5D l4020DC84
l4020DC5D:
	a2 = 0x40204510
	a6 = a3 >>u 0x00000018 & 0x000000FF
	a4 = a3 & a2
	a5 = a3 << 8
	a5 = a6 | a5
	a3 = a3 >>u 8
	a4 = a4 << 24
	a2 = a3 & a2
	a4 = a5 | a4
	a3 = Mem0[a1 + 0x00000010:word32]
	a2 = a4 | a2
	Mem0[a3:word32] = a2
	a2 = 1
	goto l4020DC86
	// succ:  l4020DC86
l4020DC84:
	a2 = 1
	// succ:  l4020DC86
l4020DC86:
	a12 = Mem0[a1 + 0x0000002C:word32]
	a13 = Mem0[a1 + 0x00000028:word32]
	a14 = Mem0[a1 + 0x00000024:word32]
	a15 = Mem0[a1 + 0x00000020:word32]
	a1 = a1 + 48
	return
	// succ:  ipaddr_aton_exit
l4024DB3A:
l4024DB40:
l4024DB6B:
ipaddr_aton_exit:


// ipaddr_addr
// Return size: 0
void ipaddr_addr()
ipaddr_addr_entry:
	// succ:  l4020DC94
l4020DC94:
	a1 = fp
	a1 = a1 - 32
	a3 = a1 | a1
	Mem0[a1 + 0x0000001C:word32] = a0
	a0 = 0x4020DCA0
	call fn4030DB14 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000000:word32]
	a3 = -1
	a0 = Mem0[a1 + 0x0000001C:word32]
	branch a2 == 0x00000000 l4020DCAA
	// succ:  l4020DCA7_1 l4020DCAA
l4020DCA7_1:
	a3 = a4
	// succ:  l4020DCAA
l4020DCAA:
	a2 = a3
	a1 = a1 + 32
	return
	// succ:  ipaddr_addr_exit
ipaddr_addr_exit:


// ip_route
// Return size: 0
void ip_route()
ip_route_entry:
	// succ:  l4020DCB4
l4020DCB4:
	a1 = fp
	a3 = 0x4020AE44
	// succ:  l4020DCB7
l4020DCB7:
	a3 = Mem0[a3 + 0x00000000:word32]
	branch a3 == 0x00000000 l4020DCD1
	// succ:  l4020DCBB l4020DCD1
l4020DCBB:
	v5 = Mem0[a3 + 0x0000002F:byte]
	a4 = (uint32) v5
	branch (a4 & 0x00000001) == 0x00000000 l4020DCB7
	// succ:  l4020DCC1 l4020DCB7
l4020DCC1:
	a6 = Mem0[a3 + 0x00000004:word32]
	a5 = Mem0[a2 + 0x00000000:word32]
	a4 = Mem0[a3 + 0x00000008:word32]
	a5 = a6 ^ a5
	branch (a5 & a4) != 0x00000000 l4020DCB7
	// succ:  l4020DCCD l4020DCB7
l4020DCCD:
	goto l4020DCEF
	// succ:  l4020DCEF
l4020DCD1:
	a2 = 0x4020C5A8
	a3 = Mem0[a2 + 0x00000000:word32]
	branch a3 == 0x00000000 l4020DCE0
	// succ:  l4020DCD8 l4020DCE0
l4020DCD8:
	v9 = Mem0[a3 + 0x0000002F:byte]
	a4 = (uint32) v9
	a2 = a3
	branch (a4 & 0x00000001) != 0x00000000 l4020DCF1
	// succ:  l4020DCE0 l4020DCF1
l4020DCE0:
	a3 = 0x40209ABC
	a2 = 0
	v10 = Mem0[a3 + 0x00000056:uint16]
	a4 = (uint32) v10
	a4 = a4 + 1
	Mem0[a3 + 0x00000056:word16] = a4
	return
	// succ:  ip_route_exit
l4020DCEF:
	a2 = a3
	// succ:  l4020DCF1
l4020DCF1:
	return
	// succ:  ip_route_exit
ip_route_exit:


// ip_input
// Return size: 0
void ip_input()
ip_input_entry:
	// succ:  l4020DD00
l4020DD00:
	a1 = fp
	a4 = 0x40209ABC
	a1 = a1 - 48
	Mem0[a1 + 0x00000020:word32] = a14
	a14 = a2 | a2
	v6 = Mem0[a4 + 0x0000004A:uint16]
	a2 = (uint32) v6
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a13
	a15 = Mem0[a14 + 0x00000004:word32]
	a2 = a2 + 1
	Mem0[a4 + 0x0000004A:word16] = a2
	v11 = Mem0[a15 + 0x00000000:byte]
	a13 = (uint32) v11
	a9 = a3
	a2 = a13 >>u 4
	branch a2 == 4 l4020DD48
	// succ:  l4020DD2A l4020DD48
l4020DD2A:
	a2 = a14
	Mem0[a1 + 0x0000000C:word32] = a4
	a0 = 0x4020DD31
	call fn4030C0EC (retsize: 0;)
	a4 = Mem0[a1 + 0x0000000C:word32]
	v14 = Mem0[a4 + 0x0000005C:uint16]
	a3 = (uint32) v14
	v15 = Mem0[a4 + 0x0000004E:uint16]
	a2 = (uint32) v15
	a3 = a3 + 1
	a2 = a2 + 1
	Mem0[a4 + 0x0000005C:word16] = a3
	Mem0[a4 + 0x0000004E:word16] = a2
	goto l4020DFC7
	// succ:  l4020DFC7
l4020DD48:
	v16 = Mem0[a15 + 0x00000003:byte]
	a2 = (uint32) v16
	v17 = Mem0[a15 + 0x00000002:byte]
	a3 = (uint32) v17
	a2 = a2 << 24
	a2 = a2 | a3
	a3 = a2 << 24
	a13 = a13 & 0x0000000F
	a2 = a2 >>u 8
	v19 = Mem0[a14 + 0x0000000A:uint16]
	a5 = (uint32) v19
	a2 = a3 | a2
	a13 = a13 << 30
	a12 = a2 & 0x0000FFFF
	branch a5 <u a13 l4020DD72
	// succ:  l4020DD6C l4020DD72
l4020DD6C:
	v20 = Mem0[a14 + 0x00000008:uint16]
	a2 = (uint32) v20
	branch a2 >=u a12 l4020DD92
	// succ:  l4020DD72 l4020DD92
l4020DD72:
	a2 = a14 | a14
	Mem0[a1 + 0x0000000C:word32] = a4
	a0 = 0x4020DD7B
	call fn4030C0EC (retsize: 0;)
	a4 = Mem0[a1 + 0x0000000C:word32]
	v21 = Mem0[a4 + 0x00000052:uint16]
	a3 = (uint32) v21
	v22 = Mem0[a4 + 0x0000004E:uint16]
	a2 = (uint32) v22
	a3 = a3 + 1
	a2 = a2 + 1
	Mem0[a4 + 0x00000052:word16] = a3
	Mem0[a4 + 0x0000004E:word16] = a2
	goto l4020DFC7
	// succ:  l4020DFC7
l4020DD92:
	a2 = a15 | a15
	a3 = a13 | a13
	Mem0[a1 + 0x0000000C:word32] = a4
	Mem0[a1 + 0x00000008:word32] = a9
	a0 = 0x4020DD9F
	call inet_chksum (retsize: 0;)
	a4 = Mem0[a1 + 0x0000000C:word32]
	a9 = Mem0[a1 + 0x00000008:word32]
	branch a2 == 0x00000000 l4020DDC2
	// succ:  l4020DDA5 l4020DDC2
l4020DDA5:
	a2 = a14
	a0 = 0x4020DDAA
	call fn4030C0EC (retsize: 0;)
	a4 = Mem0[a1 + 0x0000000C:word32]
	v23 = Mem0[a4 + 0x00000050:uint16]
	a3 = (uint32) v23
	v24 = Mem0[a4 + 0x0000004E:uint16]
	a2 = (uint32) v24
	a3 = a3 + 1
	a2 = a2 + 1
	Mem0[a4 + 0x00000050:word16] = a3
	Mem0[a4 + 0x0000004E:word16] = a2
	goto l4020DFC7
	// succ:  l4020DFC7
l4020DDC2:
	a3 = a12
	a2 = a14
	Mem0[a1 + 0x0000000C:word32] = a4
	Mem0[a1 + 0x00000008:word32] = a9
	a0 = 0x4020DDCD
	call fn4030C2C8 (retsize: 0;)
	v26 = Mem0[a15 + 0x0000000D:byte]
	a10 = (uint32) v26
	v27 = Mem0[a15 + 0x0000000C:byte]
	a12 = (uint32) v27
	v29 = Mem0[a15 + 0x00000011:byte]
	a11 = (uint32) v29
	v30 = Mem0[a15 + 0x0000000E:byte]
	a5 = (uint32) v30
	v32 = Mem0[a15 + 0x00000010:byte]
	a7 = (uint32) v32
	v34 = Mem0[a15 + 0x00000012:byte]
	a6 = (uint32) v34
	a10 = a10 << 24
	v35 = Mem0[a15 + 0x0000000F:byte]
	a2 = (uint32) v35
	a10 = a10 | a12
	a11 = a11 << 24
	v36 = Mem0[a15 + 0x00000013:byte]
	a3 = (uint32) v36
	a5 = a5 << 16
	a5 = a5 | a10
	a11 = a11 | a7
	a6 = a6 << 16
	a2 = a2 << 8
	a6 = a6 | a11
	a2 = a2 | a5
	a3 = a3 << 8
	a5 = 0x4020C8A4
	a3 = a3 | a6
	Mem0[a5:word32] = a3
	a9 = Mem0[a1 + 0x00000008:word32]
	a3 = 0x4020C8A8
	a10 = 0x4020AE44
	a4 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a3:word32] = a2
	a12 = a9
	a6 = 1
	v37 = Mem0[a12 + 0x0000002F:byte]
	a5 = (uint32) v37
	branch (a5 & 0x00000001) != 0x00000000 l4020DE29
	// succ:  l4020DE24 l4020DE29
l4020DE24:
	branch a6 != 0x00000000 l4020DE58
	// succ:  l4020DE26 l4020DE58
l4020DE26:
	goto l4020DE5D
	// succ:  l4020DE5D
l4020DE29:
	a3 = Mem0[a12 + 0x00000004:word32]
	branch a3 == 0x00000000 l4020DE24
	// succ:  l4020DE2F l4020DE24
l4020DE2F:
	a5 = 0x4020C8A4
	a2 = Mem0[a5 + 0x00000000:word32]
	branch a3 != a2 l4020DE3B
	// succ:  l4020DE38 l4020DE3B
l4020DE38:
	goto l4020DFBC
	// succ:  l4020DFBC
l4020DE3B:
	a3 = a12 | a12
	Mem0[a1 + 0x0000000C:word32] = a4
	Mem0[a1:word32] = a6
	Mem0[a1 + 0x00000008:word32] = a9
	Mem0[a1 + 0x00000004:word32] = a10
	a0 = 0x4020DE49
	call ip4_addr_isbroadcast (retsize: 0;)
	a4 = Mem0[a1 + 0x0000000C:word32]
	a6 = Mem0[a1 + 0x00000000:word32]
	a9 = Mem0[a1 + 0x00000008:word32]
	a10 = Mem0[a1 + 0x00000004:word32]
	branch a2 == 0x00000000 l4020DE24
	// succ:  l4020DE54 l4020DE24
l4020DE54:
	goto l4020DFBC
	// succ:  l4020DFBC
l4020DE58:
	a12 = Mem0[a10 + 0x00000000:word32]
	goto l4020DE5F
	// succ:  l4020DE5F
l4020DE5D:
	a12 = Mem0[a12 + 0x00000000:word32]
	// succ:  l4020DE5F
l4020DE5F:
	branch a12 != a9 l4020DE64
	// succ:  l4020DE62 l4020DE64
l4020DE62:
	a12 = Mem0[a12 + 0x00000000:word32]
	// succ:  l4020DE64
l4020DE64:
	branch a12 == 0x00000000 l4020DFB1
	// succ:  l4020DE67 l4020DFB1
l4020DE67:
	a6 = 0
	goto l4024DE1E
	// succ:  l4024DE1E
l4020DEC2:
	branch a12 != 0x00000000 l4020DECD
	// succ:  l4020DEC4 l4020DECD
l4020DEC4:
	a2 = a14
	a0 = 0x4020DEC9
	call fn4030C0EC (retsize: 0;)
	goto l4020DFC7
	// succ:  l4020DFC7
l4020DECD:
	v39 = Mem0[a15 + 0x00000006:byte]
	a3 = (uint32) v39
	v40 = Mem0[a15 + 0x00000007:byte]
	a2 = (uint32) v40
	a3 = a3 & 0x0000003F
	a2 = a2 << 24
	a2 = a3 | a2
	branch a2 == 0x00000000 l4020DEFD
	// succ:  l4020DEDF l4020DEFD
l4020DEDF:
	a2 = a14 | a14
	Mem0[a1 + 0x0000000C:word32] = a4
	a0 = 0x4020DEE8
	call fn4030C0EC (retsize: 0;)
	a4 = Mem0[a1 + 0x0000000C:word32]
	v41 = Mem0[a4 + 0x0000005A:uint16]
	a3 = (uint32) v41
	v42 = Mem0[a4 + 0x0000004E:uint16]
	a2 = (uint32) v42
	a3 = a3 + 1
	a2 = a2 + 1
	Mem0[a4 + 0x0000005A:word16] = a3
	Mem0[a4 + 0x0000004E:word16] = a2
	goto l4020DFC7
	// succ:  l4020DFC7
l4020DEFD:
	a13 = 0x4020DCF8
	a12 = 0x4020DCFC
	Mem0[a13:word32] = a9
	Mem0[a12:word32] = a15
	a3 = a9 | a9
	a2 = a14
	Mem0[a1 + 0x0000000C:word32] = a4
	Mem0[a1 + 0x00000008:word32] = a9
	a0 = 0x4020DF15
	call raw_input (retsize: 0;)
	a4 = Mem0[a1 + 0x0000000C:word32]
	a9 = Mem0[a1 + 0x00000008:word32]
	branch a2 != 0x00000000 l4020DF9C
	// succ:  l4020DF1C l4020DF9C
l4020DF1C:
	v43 = Mem0[a15 + 0x00000009:byte]
	a2 = (uint32) v43
	branch a2 == 6 l4020DF3A
	// succ:  l4020DF22 l4020DF3A
l4020DF22:
	a3 = 17
	branch a2 == a3 l4020DF2E
	// succ:  l4020DF27 l4020DF2E
l4020DF27:
	branch a2 != 1 l4020DF51
	// succ:  l4020DF2A l4020DF51
l4020DF2A:
	goto l4020DF47
	// succ:  l4020DF47
l4020DF2E:
	a2 = a14
	a3 = a9
	a0 = 0x4020DF35
	call fn4030C8B0 (retsize: 0;)
	goto l4020DF9C
	// succ:  l4020DF9C
l4020DF3A:
	a2 = a14
	a3 = a9
	a0 = 0x4020DF41
	call tcp_input (retsize: 0;)
	goto l4020DF9C
	// succ:  l4020DF9C
l4020DF47:
	a2 = a14
	a3 = a9
	a0 = 0x4020DF4E
	call icmp_input (retsize: 0;)
	goto l4020DF9C
	// succ:  l4020DF9C
l4020DF51:
	a5 = 0x4020C8A4
	a3 = a9
	a2 = Mem0[a5 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a4
	a0 = 0x4020DF5D
	call ip4_addr_isbroadcast (retsize: 0;)
	a4 = Mem0[a1 + 0x0000000C:word32]
	branch a2 != 0x00000000 l4020DF80
	// succ:  l4020DF61 l4020DF80
l4020DF61:
	a3 = 0x4020C8A4
	a2 = Mem0[a3 + 0x00000000:word32]
	a3 = 0x000000F0
	a3 = a3 & a2
	a2 = 0x000000E0
	branch a3 == a2 l4020DF80
	// succ:  l4020DF72 l4020DF80
l4020DF72:
	Mem0[a14 + 0x00000004:word32] = a15
	a2 = a14
	a3 = 2
	Mem0[a1 + 0x0000000C:word32] = a4
	a0 = 0x4020DF7E
	call icmp_dest_unreach (retsize: 0;)
	a4 = Mem0[a1 + 0x0000000C:word32]
	// succ:  l4020DF80
l4020DF80:
	a2 = a14 | a14
	Mem0[a1 + 0x0000000C:word32] = a4
	a0 = 0x4020DF89
	call fn4030C0EC (retsize: 0;)
	a4 = Mem0[a1 + 0x0000000C:word32]
	v44 = Mem0[a4 + 0x00000058:uint16]
	a3 = (uint32) v44
	v45 = Mem0[a4 + 0x0000004E:uint16]
	a2 = (uint32) v45
	a3 = a3 + 1
	a2 = a2 + 1
	Mem0[a4 + 0x00000058:word16] = a3
	Mem0[a4 + 0x0000004E:word16] = a2
	// succ:  l4020DF9C
l4020DF9C:
	a5 = 0x4020C8A8
	a3 = 0x4020C8A4
	a2 = 0
	Mem0[a13:word32] = a2
	Mem0[a12:word32] = a2
	Mem0[a5:word32] = a2
	Mem0[a3:word32] = a2
	goto l4020DFC7
	// succ:  l4020DFC7
l4020DFB1:
	v38 = Mem0[a15 + 0x00000009:byte]
	a3 = (uint32) v38
	a2 = 17
	branch a3 != a2 l4020DFBC
	// succ:  l4020DFB9 l4020DFBC
l4020DFB9:
	goto l4024DE6C
	// succ:  l4024DE6C
l4020DFBC:
	a5 = 0x4020C8A8
	a2 = Mem0[a5 + 0x00000000:word32]
	branch a2 == 0x00000000 l4020DEC2
	// succ:  l4020DFC4 l4020DEC2
l4020DFC4:
	goto l4024DE86
	// succ:  l4024DE86
l4020DFC7:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = 0
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  ip_input_exit
l4024DE1E:
l4024DE6C:
l4024DE86:
ip_input_exit:


// ip_output_if
// Return size: 0
void ip_output_if()
ip_output_if_entry:
	// succ:  l4020DFDC
l4020DFDC:
	a1 = fp
	a1 = a1 - 80
	Mem0[a1 + 0x00000048:word32] = a12
	Mem0[a1 + 0x00000044:word32] = a13
	Mem0[a1 + 0x00000040:word32] = a14
	Mem0[a1 + 0x0000003C:word32] = a15
	Mem0[a1 + 0x0000004C:word32] = a0
	a12 = a2 | a2
	a14 = a3 | a3
	a13 = a5 & 0x000000FF
	a15 = a6 & 0x000000FF
	a7 = a7 & 0x000000FF
	branch a4 == 0x00000000 l4020E101
	// succ:  l4020E000 l4020E101
l4020E000:
	a3 = 20
	Mem0[a1 + 0x0000001C:word32] = a4
	Mem0[a1 + 0x00000020:word32] = a7
	a0 = 0x4020E009
	call pbuf_header (retsize: 0;)
	a4 = Mem0[a1 + 0x0000001C:word32]
	a7 = Mem0[a1 + 0x00000020:word32]
	branch a2 == 0x00000000 l4020E020
	// succ:  l4020E00F l4020E020
l4020E00F:
	a3 = 0x40209ABC
	a2 = 0x000000FE
	v14 = Mem0[a3 + 0x0000005C:uint16]
	a4 = (uint32) v14
	a4 = a4 + 1
	Mem0[a3 + 0x0000005C:word16] = a4
	goto l4020E15F
	// succ:  l4020E15F
l4020E020:
	a5 = Mem0[a12 + 0x00000004:word32]
	a3 = 69
	Mem0[a5 + 0x00000009:byte] = a7
	Mem0[a5 + 0x00000008:byte] = a13
	a8 = Mem0[a4 + 0x00000000:word32]
	a6 = 0x4020DFD8
	Mem0[a5:byte] = a3
	Mem0[a5 + 0x00000001:byte] = a15
	v25 = Mem0[a12 + 0x00000008:uint16]
	a10 = (uint32) v25
	v26 = Mem0[a6 + 0x00000000:uint16]
	a3 = (uint32) v26
	a11 = a10 << 24
	a10 = a10 >>u 8
	a6 = a3 >>u 8
	a9 = a3 << 24
	a10 = a11 | a10
	a9 = a9 | a6
	a11 = a8 >>u 0x00000008 & 0x000000FF
	a10 = a10 & 0x0000FFFF
	a9 = a9 & 0x0000FFFF
	Mem0[a1 + 0x00000024:word32] = a11
	a11 = a10 >>u 8
	Mem0[a1 + 0x00000014:word32] = a11
	a11 = a9 >>u 8
	a6 = a8 >>u 0x00000010 & 0x0000FFFF
	Mem0[a1 + 0x00000018:word32] = a11
	a11 = Mem0[a1 + 0x00000024:word32]
	Mem0[a1 + 0x00000010:word32] = a6
	Mem0[a5 + 0x00000011:byte] = a11
	a11 = Mem0[a1 + 0x00000010:word32]
	a6 = a8 >>u 0x00000018 & 0x000000FF
	Mem0[a5 + 0x00000012:byte] = a11
	Mem0[a5 + 0x00000013:byte] = a6
	Mem0[a5 + 0x00000006:byte] = a2
	a6 = Mem0[a1 + 0x00000014:word32]
	Mem0[a5 + 0x00000007:byte] = a2
	a11 = Mem0[a1 + 0x00000018:word32]
	a2 = 0x4020DFD8
	a3 = a3 + 1
	a7 = a7 << 24
	a15 = a15 << 24
	Mem0[a5 + 0x00000010:byte] = a8
	Mem0[a2:word16] = a3
	Mem0[a5 + 0x00000002:byte] = a10
	a2 = 69
	Mem0[a5 + 0x00000003:byte] = a6
	Mem0[a5 + 0x00000004:byte] = a9
	Mem0[a5 + 0x00000005:byte] = a11
	a7 = a13 | a7
	a8 = a8 & 0x0000FFFF
	a15 = a15 | a2
	branch a14 == 0x00000000 l4020E0B0
	// succ:  l4020E0AB l4020E0B0
l4020E0AB:
	a2 = Mem0[a14 + 0x00000000:word32]
	branch a2 != 0x00000000 l4020E0B5
	// succ:  l4020E0B0 l4020E0B5
l4020E0B0:
	a11 = Mem0[a1 + 0x00000050:word32]
	a2 = Mem0[a11 + 0x00000004:word32]
	// succ:  l4020E0B5
l4020E0B5:
	a3 = a2 >>u 0x00000018 & 0x000000FF
	Mem0[a5 + 0x0000000F:byte] = a3
	a3 = Mem0[a1 + 0x00000010:word32]
	a11 = a2 >>u 0x00000008 & 0x000000FF
	a8 = a3 + a8
	a10 = a8 + a10
	a9 = a10 + a9
	a15 = a9 + a15
	a3 = a2 & 0x0000FFFF
	a7 = a15 + a7
	a6 = a2 >>u 0x00000010 & 0x000000FF
	a7 = a7 + a3
	Mem0[a5 + 0x0000000C:byte] = a2
	a2 = a2 >>u 0x00000010 & 0x0000FFFF
	a7 = a7 + a2
	a3 = a7 >>u 0x00000010 & 0x0000FFFF
	a2 = a7 & 0x0000FFFF
	a2 = a2 + a3
	a3 = a2 >>u 0x00000010 & 0x0000FFFF
	a2 = a3 + a2
	a3 = -1
	a2 = a3 ^ a2
	a2 = a2 & 0x0000FFFF
	a3 = a2 >>u 8
	Mem0[a5 + 0x0000000D:byte] = a11
	Mem0[a5 + 0x0000000E:byte] = a6
	Mem0[a5 + 0x0000000A:byte] = a2
	Mem0[a5 + 0x0000000B:byte] = a3
	goto l4020E128
	// succ:  l4020E128
l4020E101:
	a2 = Mem0[a2 + 0x00000004:word32]
	a4 = a1 | a1
	v15 = Mem0[a2 + 0x00000011:byte]
	a5 = (uint32) v15
	v16 = Mem0[a2 + 0x00000010:byte]
	a6 = (uint32) v16
	v17 = Mem0[a2 + 0x00000012:byte]
	a3 = (uint32) v17
	a5 = a5 << 24
	v18 = Mem0[a2 + 0x00000013:byte]
	a2 = (uint32) v18
	a5 = a5 | a6
	a3 = a3 << 16
	a3 = a3 | a5
	a2 = a2 << 8
	a2 = a2 | a3
	Mem0[a1:word32] = a2
	// succ:  l4020E128
l4020E128:
	a2 = 0x40209ABC
	a11 = Mem0[a1 + 0x00000050:word32]
	v20 = Mem0[a2 + 0x00000048:uint16]
	a5 = (uint32) v20
	v21 = Mem0[a11 + 0x00000026:uint16]
	a3 = (uint32) v21
	a5 = a5 + 1
	Mem0[a2 + 0x00000048:word16] = a5
	branch a3 == 0x00000000 l4020E150
	// succ:  l4020E13B l4020E150
l4020E13B:
	v22 = Mem0[a12 + 0x00000008:uint16]
	a2 = (uint32) v22
	branch a3 >=u a2 l4020E150
	// succ:  l4020E141 l4020E150
l4020E141:
	a2 = a12
	a3 = a11
	a0 = 0x4020E148
	call ip_frag (retsize: 0;)
	a2 = a2 & 0x000000FF
	goto l4020E15F
	// succ:  l4020E15F
l4020E150:
	a11 = Mem0[a1 + 0x00000050:word32]
	a3 = a12
	a5 = Mem0[a11 + 0x00000014:word32]
	a2 = a11
	a0 = 0x4020E15C
	call a5 (retsize: 0;)
	a2 = a2 & 0x000000FF
	// succ:  l4020E15F
l4020E15F:
	a0 = Mem0[a1 + 0x0000004C:word32]
	a12 = Mem0[a1 + 0x00000048:word32]
	a13 = Mem0[a1 + 0x00000044:word32]
	a14 = Mem0[a1 + 0x00000040:word32]
	a15 = Mem0[a1 + 0x0000003C:word32]
	a1 = a1 + 80
	return
	// succ:  ip_output_if_exit
ip_output_if_exit:


// ip_output
// Return size: 0
void ip_output()
ip_output_entry:
	// succ:  l4020E174
l4020E174:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000038:word32] = a12
	a12 = a2 | a2
	a2 = a4 | a4
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x00000010:word32] = a3
	Mem0[a1 + 0x00000014:word32] = a4
	Mem0[a1 + 0x0000003C:word32] = a0
	a15 = a5 & 0x000000FF
	a14 = a6 & 0x000000FF
	a13 = a7 & 0x000000FF
	a0 = 0x4020E198
	call fn4030DCB4 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000010:word32]
	a4 = Mem0[a1 + 0x00000014:word32]
	branch a2 != 0x00000000 l4020E1B0
	// succ:  l4020E19E l4020E1B0
l4020E19E:
	a3 = 0x40209ABC
	a2 = 0x000000FC
	v14 = Mem0[a3 + 0x00000056:uint16]
	a4 = (uint32) v14
	a4 = a4 + 1
	Mem0[a3 + 0x00000056:word16] = a4
	goto l4020E1C3
	// succ:  l4020E1C3
l4020E1B0:
	Mem0[a1:word32] = a2
	a5 = a15 | a15
	a2 = a12 | a12
	a6 = a14
	a7 = a13
	a0 = 0x4020E1C0
	call fn4030DFDC (retsize: 0;)
	a2 = a2 & 0x000000FF
	// succ:  l4020E1C3
l4020E1C3:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  ip_output_exit
ip_output_exit:


// inet_chksum_pseudo
// Return size: 0
void inet_chksum_pseudo()
inet_chksum_pseudo_entry:
	// succ:  l4020E1D4
l4020E1D4:
	a1 = fp
	a1 = a1 - 48
	a5 = a5 & 0x000000FF
	a6 = a6 & 0x0000FFFF
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x00000004:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a4
	Mem0[a1 + 0x0000000C:word32] = a5
	Mem0[a1:word32] = a6
	a14 = a2
	branch a2 == 0x00000000 l4020E240
	// succ:  l4020E1F4 l4020E240
l4020E1F4:
	a12 = 0x00000000
	a15 = a12 | a12
	a13 = 0x00000001
	// succ:  l4020E1FD
l4020E1FD:
	v13 = Mem0[a14 + 0x0000000A:uint16]
	a3 = (uint32) v13
	a2 = Mem0[a14 + 0x00000004:word32]
	a0 = 0x4020E206
	call lwip_standard_chksum (retsize: 0;)
	a2 = a15 + a2
	a5 = a2 >>u 0x00000010 & 0x0000FFFF
	a4 = a2 & 0x0000FFFF
	a15 = a4 + a5
	v14 = Mem0[a14 + 0x0000000A:uint16]
	a3 = (uint32) v14
	a5 = a15 >>u 0x00000008 & 0x000000FF
	a2 = a15 << 24
	a6 = a13 - a12
	a2 = a5 | a2
	branch (a3 & 0x00000001) == 0x00000000 l4020E22A
	// succ:  l4020E224 l4020E22A
l4020E224:
	a12 = a6 & 0x000000FF
	a15 = a2 & 0x0000FFFF
	// succ:  l4020E22A
l4020E22A:
	a14 = Mem0[a14 + 0x00000000:word32]
	branch a14 != 0x00000000 l4020E1FD
	// succ:  l4020E22F l4020E1FD
l4020E22F:
	branch a12 == 0x00000000 l4020E242
	// succ:  l4020E231 l4020E242
l4020E231:
	a2 = a15 >>u 0x00000008 & 0x000000FF
	a4 = a15 << 24
	a4 = a2 | a4
	a15 = a4 & 0x0000FFFF
	goto l4020E242
	// succ:  l4020E242
l4020E240:
	a15 = a2
	// succ:  l4020E242
l4020E242:
	a2 = Mem0[a1 + 0x00000004:word32]
	a4 = Mem0[a1 + 0x00000008:word32]
	a3 = Mem0[a2 + 0x00000000:word32]
	a2 = Mem0[a4 + 0x00000000:word32]
	a5 = a3 >>u 0x00000010 & 0x0000FFFF
	a4 = Mem0[a1 + 0x00000000:word32]
	a3 = a3 & 0x0000FFFF
	a3 = a5 + a3
	a5 = a2 & 0x0000FFFF
	a3 = a3 + a5
	a14 = a4 >>u 8
	a5 = a4 << 24
	a4 = Mem0[a1 + 0x0000000C:word32]
	a2 = a2 >>u 0x00000010 & 0x0000FFFF
	a2 = a3 + a2
	a14 = a5 | a14
	a3 = a4 << 24
	a14 = a14 & 0x0000FFFF
	a2 = a2 + a3
	a2 = a2 + a14
	a4 = a2 + a15
	a2 = a4 >>u 0x00000010 & 0x0000FFFF
	a4 = a4 & 0x0000FFFF
	a4 = a4 + a2
	a2 = a4 >>u 0x00000010 & 0x0000FFFF
	a4 = a4 & 0x0000FFFF
	a4 = a4 + a2
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = -1
	a2 = a2 ^ a4
	a2 = a2 & 0x0000FFFF
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  inet_chksum_pseudo_exit
inet_chksum_pseudo_exit:


// inet_chksum
// Return size: 0
void inet_chksum()
inet_chksum_entry:
	// succ:  l4020E29C
l4020E29C:
	a1 = fp
	a1 = a1 - 16
	a3 = a3 & 0x0000FFFF
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4020E2A8
	call lwip_standard_chksum (retsize: 0;)
	a3 = 0xFFFFFFFF
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a3 ^ a2
	a2 = a2 & 0x0000FFFF
	a1 = a1 + 16
	return
	// succ:  inet_chksum_exit
inet_chksum_exit:


// inet_chksum_pbuf
// Return size: 0
void inet_chksum_pbuf()
inet_chksum_pbuf_entry:
	// succ:  l4020E2BC
l4020E2BC:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a15
	a12 = a2
	branch a2 == 0x00000000 l4020E31D
	// succ:  l4020E2CE l4020E31D
l4020E2CE:
	a14 = 0
	a13 = a14
	a15 = 0x00000001
	// succ:  l4020E2D5
l4020E2D5:
	v10 = Mem0[a12 + 0x0000000A:uint16]
	a3 = (uint32) v10
	a2 = Mem0[a12 + 0x00000004:word32]
	a0 = 0x4020E2DE
	call lwip_standard_chksum (retsize: 0;)
	a2 = a13 + a2
	a4 = a2 >>u 0x00000010 & 0x0000FFFF
	a13 = a2 & 0x0000FFFF
	a13 = a13 + a4
	v12 = Mem0[a12 + 0x0000000A:uint16]
	a3 = (uint32) v12
	a4 = a13 >>u 0x00000008 & 0x000000FF
	a2 = a13 << 24
	a5 = a15 - a14
	a2 = a4 | a2
	branch (a3 & 0x00000001) == 0x00000000 l4020E302
	// succ:  l4020E2FC l4020E302
l4020E2FC:
	a14 = a5 & 0x000000FF
	a13 = a2 & 0x0000FFFF
	// succ:  l4020E302
l4020E302:
	a12 = Mem0[a12 + 0x00000000:word32]
	branch a12 != 0x00000000 l4020E2D5
	// succ:  l4020E307 l4020E2D5
l4020E307:
	branch a14 == 0x00000000 l4020E312
	// succ:  l4020E309 l4020E312
l4020E309:
	a2 = a13 >>u 0x00000008 & 0x000000FF
	a13 = a13 << 24
	a13 = a2 | a13
	// succ:  l4020E312
l4020E312:
	a2 = -1
	a2 = a2 ^ a13
	a2 = a2 & 0x0000FFFF
	goto l4020E320
	// succ:  l4020E320
l4020E31D:
	a2 = 0x4020A190
	// succ:  l4020E320
l4020E320:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  inet_chksum_pbuf_exit
inet_chksum_pbuf_exit:


// icmp_input
// Return size: 0
void icmp_input()
icmp_input_entry:
	// succ:  l4020E330
l4020E330:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000038:word32] = a12
	a12 = 0x40209ABC
	Mem0[a1 + 0x0000002C:word32] = a15
	a15 = a2
	v6 = Mem0[a12 + 0x00000062:uint16]
	a2 = (uint32) v6
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000003C:word32] = a0
	a13 = Mem0[a15 + 0x00000004:word32]
	a2 = a2 + 1
	Mem0[a12 + 0x00000062:word16] = a2
	v10 = Mem0[a13 + 0x00000000:byte]
	a2 = (uint32) v10
	Mem0[a1 + 0x00000014:word32] = a3
	a2 = a2 & 0x0000000F
	a14 = a2 << 30
	a2 = -a14
	Mem0[a1 + 0x00000010:word32] = a2
	a3 = Mem0[a1 + 0x00000010:word32]
	a2 = a15
	a0 = 0x4020E363
	call pbuf_header (retsize: 0;)
	branch a2 != 0x00000000 l4020E500
	// succ:  l4020E366 l4020E500
l4020E366:
	v12 = Mem0[a15 + 0x00000008:uint16]
	a2 = (uint32) v12
	branch a2 >=u 0x00000004 l4020E36F
	// succ:  l4020E36C l4020E36F
l4020E36C:
	goto l4020E500
	// succ:  l4020E500
l4020E36F:
	a2 = Mem0[a15 + 0x00000004:word32]
	v14 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v14
	branch a2 == 0x00000000 l4020E4F8
	// succ:  l4020E377 l4020E4F8
l4020E377:
	branch a2 == 8 l4020E37D
	// succ:  l4020E37A l4020E37D
l4020E37A:
	goto l4020E4E8
	// succ:  l4020E4E8
l4020E37D:
	a2 = 0x4020C8A4
	a3 = Mem0[a1 + 0x00000014:word32]
	a4 = Mem0[a2 + 0x00000000:word32]
	a2 = a4
	Mem0[a1 + 0x00000018:word32] = a4
	a0 = 0x4020E38C
	call ip4_addr_isbroadcast (retsize: 0;)
	a4 = Mem0[a1 + 0x00000018:word32]
	branch a2 != 0x00000000 l4020E39C
	// succ:  l4020E390 l4020E39C
l4020E390:
	a2 = 0x000000F0
	a4 = a4 & a2
	a2 = 0x000000E0
	branch a4 != a2 l4020E3AD
	// succ:  l4020E39C l4020E3AD
l4020E39C:
	v18 = Mem0[a12 + 0x00000074:uint16]
	a3 = (uint32) v18
	a2 = a15
	a3 = a3 + 1
	Mem0[a12 + 0x00000074:word16] = a3
	a0 = 0x4020E3A9
	call fn4030C0EC (retsize: 0;)
	goto l4020E51F
	// succ:  l4020E51F
l4020E3AD:
	v19 = Mem0[a15 + 0x00000008:uint16]
	a2 = (uint32) v19
	branch a2 >=u 0x00000008 l4020E3B6
	// succ:  l4020E3B3 l4020E3B6
l4020E3B3:
	goto l4020E500
	// succ:  l4020E500
l4020E3B6:
	a2 = a15 | a15
	a0 = 0x4020E3BC
	call fn4030E2BC (retsize: 0;)
	branch a2 == 0x00000000 l4020E3D2
	// succ:  l4020E3BF l4020E3D2
l4020E3BF:
	a2 = a15
	a0 = 0x4020E3C4
	call fn4030C0EC (retsize: 0;)
	v20 = Mem0[a12 + 0x00000068:uint16]
	a2 = (uint32) v20
	a2 = a2 + 1
	Mem0[a12 + 0x00000068:word16] = a2
	goto l4020E51F
	// succ:  l4020E51F
l4020E3D2:
	a2 = a15 | a15
	a3 = 0x00000022
	a0 = 0x4020E3DB
	call pbuf_header (retsize: 0;)
	branch a2 == 0x00000000 l4020E421
	// succ:  l4020E3DE l4020E421
l4020E3DE:
	a2 = a15
	a3 = a14
	a0 = 0x4020E3E5
	call pbuf_header (retsize: 0;)
	branch a2 != 0x00000000 l4020E510
	// succ:  l4020E3E8 l4020E510
l4020E3E8:
	v21 = Mem0[a15 + 0x00000008:uint16]
	a3 = (uint32) v21
	a4 = 0
	a2 = 2
	a0 = 0x4020E3F2
	call fn4030C160 (retsize: 0;)
	a4 = a2
	branch a2 == 0x00000000 l4020E510
	// succ:  l4020E3F7 l4020E510
l4020E3F7:
	a3 = a15
	Mem0[a1 + 0x00000018:word32] = a4
	a0 = 0x4020E3FE
	call fn4030C384 (retsize: 0;)
	a2 = a2 & 0x000000FF
	a4 = Mem0[a1 + 0x00000018:word32]
	branch a2 != 0x00000000 l4020E510
	// succ:  l4020E406 l4020E510
l4020E406:
	a3 = Mem0[a1 + 0x00000010:word32]
	a2 = a4
	a13 = Mem0[a4 + 0x00000004:word32]
	a0 = 0x4020E410
	call pbuf_header (retsize: 0;)
	branch a2 != 0x00000000 l4020E510
	// succ:  l4020E413 l4020E510
l4020E413:
	a2 = a15
	a0 = 0x4020E418
	call fn4030C0EC (retsize: 0;)
	a4 = Mem0[a1 + 0x00000018:word32]
	a15 = a4
	goto l4020E42D
	// succ:  l4020E42D
l4020E421:
	a2 = a15 | a15
	a3 = 0xFFFFFFDE
	a0 = 0x4020E42A
	call pbuf_header (retsize: 0;)
	branch a2 != 0x00000000 l4020E510
	// succ:  l4020E42D l4020E510
l4020E42D:
	a2 = 0x4020C8A4
	a4 = Mem0[a2 + 0x00000000:word32]
	a2 = 0x4020C8A8
	a11 = a4 >>u 0x00000008 & 0x000000FF
	a3 = Mem0[a2 + 0x00000000:word32]
	a10 = a4 >>u 0x00000010 & 0x000000FF
	a2 = Mem0[a15 + 0x00000004:word32]
	a5 = a3 >>u 0x00000018 & 0x000000FF
	a9 = a4 >>u 0x00000018 & 0x000000FF
	a7 = a3 >>u 0x00000008 & 0x000000FF
	a6 = a3 >>u 0x00000010 & 0x000000FF
	Mem0[a13 + 0x00000013:byte] = a5
	Mem0[a13 + 0x0000000C:byte] = a4
	Mem0[a13 + 0x0000000D:byte] = a11
	Mem0[a13 + 0x0000000E:byte] = a10
	Mem0[a13 + 0x0000000F:byte] = a9
	Mem0[a13 + 0x00000010:byte] = a3
	Mem0[a13 + 0x00000011:byte] = a7
	Mem0[a13 + 0x00000012:byte] = a6
	v28 = Mem0[a2 + 0x00000003:byte]
	a4 = (uint32) v28
	v29 = Mem0[a2 + 0x00000002:byte]
	a3 = (uint32) v29
	a4 = a4 << 24
	a5 = 0
	a3 = a4 | a3
	a4 = -10
	Mem0[a2:byte] = a5
	a4 = a4 & 0x0000FFFF
	branch a4 >=u a3 l4020E490
	// succ:  l4020E47E l4020E490
l4020E47E:
	a3 = a3 + 9
	a3 = a3 & 0x0000FFFF
	a4 = a3 >>u 8
	Mem0[a2 + 0x00000002:byte] = a3
	Mem0[a2 + 0x00000003:byte] = a4
	goto l4020E49F
	// succ:  l4020E49F
l4020E490:
	a3 = a3 + 8
	a3 = a3 & 0x0000FFFF
	a4 = a3 >>u 8
	Mem0[a2 + 0x00000002:byte] = a3
	Mem0[a2 + 0x00000003:byte] = a4
	// succ:  l4020E49F
l4020E49F:
	a2 = 0
	a4 = -1
	a3 = 20
	Mem0[a13 + 0x00000008:byte] = a4
	Mem0[a13 + 0x0000000A:byte] = a2
	Mem0[a13 + 0x0000000B:byte] = a2
	a2 = a13
	a0 = 0x4020E4B3
	call fn4030E29C (retsize: 0;)
	v31 = Mem0[a12 + 0x00000060:uint16]
	a4 = (uint32) v31
	a3 = a2 >>u 0x00000008 & 0x0000FFFF
	Mem0[a13 + 0x0000000A:byte] = a2
	Mem0[a13 + 0x0000000B:byte] = a3
	a4 = a4 + 1
	a2 = a15 | a15
	a3 = a14 | a14
	Mem0[a12 + 0x00000060:word16] = a4
	a0 = 0x4020E4CD
	call pbuf_header (retsize: 0;)
	a6 = a2
	branch a2 != 0x00000000 l4020E4F8
	// succ:  l4020E4D1 l4020E4F8
l4020E4D1:
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = 0x4020C8A4
	Mem0[a1:word32] = a2
	a4 = a6
	a2 = a15
	a5 = 0x000000FF
	a7 = 1
	a0 = 0x4020E4E4
	call fn4030DFDC (retsize: 0;)
	goto l4020E4F8
	// succ:  l4020E4F8
l4020E4E8:
	v15 = Mem0[a12 + 0x00000070:uint16]
	a3 = (uint32) v15
	v16 = Mem0[a12 + 0x00000066:uint16]
	a2 = (uint32) v16
	a3 = a3 + 1
	a2 = a2 + 1
	Mem0[a12 + 0x00000070:word16] = a3
	Mem0[a12 + 0x00000066:word16] = a2
	// succ:  l4020E4F8
l4020E4F8:
	a2 = a15
	a0 = 0x4020E4FD
	call fn4030C0EC (retsize: 0;)
	goto l4020E51F
	// succ:  l4020E51F
l4020E500:
	a2 = a15
	a0 = 0x4020E505
	call fn4030C0EC (retsize: 0;)
	v13 = Mem0[a12 + 0x0000006A:uint16]
	a2 = (uint32) v13
	a2 = a2 + 1
	Mem0[a12 + 0x0000006A:word16] = a2
	goto l4020E51F
	// succ:  l4020E51F
l4020E510:
	a2 = a15 | a15
	a0 = 0x4020E516
	call fn4030C0EC (retsize: 0;)
	v30 = Mem0[a12 + 0x00000074:uint16]
	a2 = (uint32) v30
	a2 = a2 + 1
	Mem0[a12 + 0x00000074:word16] = a2
	// succ:  l4020E51F
l4020E51F:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  icmp_input_exit
icmp_input_exit:


// icmp_dest_unreach
// Return size: 0
void icmp_dest_unreach()
icmp_dest_unreach_entry:
	// succ:  l4020E530
l4020E530:
	a1 = fp
	a1 = a1 - 64
	a5 = a2
	Mem0[a1 + 0x00000034:word32] = a13
	a2 = 1
	a13 = a3
	a4 = 0
	a3 = 36
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x00000010:word32] = a5
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x0000002C:word32] = a15
	a0 = 0x4020E54D
	call fn4030C160 (retsize: 0;)
	a14 = a2
	a5 = Mem0[a1 + 0x00000010:word32]
	branch a2 == 0x00000000 l4020E5D4
	// succ:  l4020E554 l4020E5D4
l4020E554:
	a12 = Mem0[a2 + 0x00000004:word32]
	a2 = 3
	a15 = Mem0[a5 + 0x00000004:word32]
	Mem0[a12 + 0x00000001:byte] = a13
	Mem0[a12:byte] = a2
	a2 = Mem0[a14 + 0x00000004:word32]
	a13 = 0
	a3 = Mem0[a5 + 0x00000004:word32]
	a4 = 28
	Mem0[a12 + 0x00000004:byte] = a13
	Mem0[a12 + 0x00000005:byte] = a13
	Mem0[a12 + 0x00000006:byte] = a13
	Mem0[a12 + 0x00000007:byte] = a13
	a2 = a2 + 8
	a0 = 0x40203130
	v12 = a0
	a0 = 0x4020E57D
	call v12 (retsize: 0;)
	v13 = Mem0[a14 + 0x0000000A:uint16]
	a3 = (uint32) v13
	a2 = a12
	Mem0[a12 + 0x00000002:byte] = a13
	Mem0[a12 + 0x00000003:byte] = a13
	a0 = 0x4020E58B
	call fn4030E29C (retsize: 0;)
	a3 = a2 >>u 0x00000008 & 0x0000FFFF
	Mem0[a12 + 0x00000002:byte] = a2
	Mem0[a12 + 0x00000003:byte] = a3
	v14 = Mem0[a15 + 0x0000000D:byte]
	a3 = (uint32) v14
	v15 = Mem0[a15 + 0x0000000C:byte]
	a4 = (uint32) v15
	a8 = 0x40209ABC
	v17 = Mem0[a15 + 0x0000000E:byte]
	a2 = (uint32) v17
	v19 = Mem0[a15 + 0x0000000F:byte]
	a9 = (uint32) v19
	a3 = a3 << 24
	v21 = Mem0[a8 + 0x00000060:uint16]
	a10 = (uint32) v21
	a3 = a3 | a4
	a2 = a2 << 16
	a2 = a2 | a3
	a9 = a9 << 8
	a9 = a9 | a2
	a10 = a10 + 1
	a2 = a14
	a3 = a13
	a4 = a1
	a5 = 0x000000FF
	a6 = a13
	a7 = 1
	Mem0[a8 + 0x00000060:word16] = a10
	Mem0[a1:word32] = a9
	a0 = 0x4020E5CF
	call fn4030E174 (retsize: 0;)
	a2 = a14
	a0 = 0x4020E5D4
	call fn4030C0EC (retsize: 0;)
	// succ:  l4020E5D4
l4020E5D4:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  icmp_dest_unreach_exit
icmp_dest_unreach_exit:


// free_etharp_q
// Return size: 0
void free_etharp_q()
free_etharp_q_entry:
	// succ:  l4020E5E4
l4020E5E4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a13
	a12 = a2
	branch a2 == 0x00000000 l4020E608
	// succ:  l4020E5F1 l4020E608
l4020E5F1:
	a2 = Mem0[a12 + 0x00000004:word32]
	a13 = Mem0[a12 + 0x00000000:word32]
	a0 = 0x4020E5F8
	call fn4030C0EC (retsize: 0;)
	a2 = a12
	a0 = 0x402034CC
	v7 = a0
	a0 = 0x4020E600
	call v7 (retsize: 0;)
	branch a13 == 0x00000000 l4020E608
	// succ:  l4020E602 l4020E608
l4020E602:
	a12 = a13
	goto l4024E5F1
	// succ:  l4024E5F1
l4020E608:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  free_etharp_q_exit
l4024E5F1:
free_etharp_q_exit:


// etharp_find_entry
// Return size: 0
void etharp_find_entry()
etharp_find_entry_entry:
	// succ:  l4020E618
l4020E618:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000024:word32] = a13
	a13 = 0x4020E614
	a8 = 0
	a9 = 10
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x0000002C:word32] = a0
	a12 = a2
	a5 = a13
	a11 = a8
	a4 = a8
	a7 = a9
	a14 = a9
	a15 = a9
	Mem0[a1 + 0x00000008:word32] = a8
	// succ:  l4020E63C
l4020E63C:
	v15 = Mem0[a5 + 0x00000012:byte]
	a2 = (uint32) v15
	branch a2 != 0x00000000 l4020E64A
	// succ:  l4020E641 l4020E64A
l4020E641:
	branch a7 != 10 l4020E64A
	// succ:  l4020E644 l4020E64A
l4020E644:
	a7 = a4 & 0x000000FF
	goto l4020E68C
	// succ:  l4020E68C
l4020E64A:
	branch a2 == 0x00000000 l4020E68C
	// succ:  l4020E64C l4020E68C
l4020E64C:
	branch a12 == 0x00000000 l4020E65C
	// succ:  l4020E64E l4020E65C
l4020E64E:
	a6 = Mem0[a12 + 0x00000000:word32]
	a10 = Mem0[a5 + 0x00000004:word32]
	branch a6 != a10 l4020E65C
	// succ:  l4020E655 l4020E65C
l4020E655:
	a2 = a4 & 0x000000FF
	goto l4020E707
	// succ:  l4020E707
l4020E65C:
	branch a2 != 1 l4020E681
	// succ:  l4020E65F l4020E681
l4020E65F:
	a2 = Mem0[a5 + 0x00000000:word32]
	branch a2 == 0x00000000 l4020E671
	// succ:  l4020E663 l4020E671
l4020E663:
	v19 = Mem0[a5 + 0x00000013:byte]
	a2 = (uint32) v19
	branch a2 <u a8 l4020E68C
	// succ:  l4020E669 l4020E68C
l4020E669:
	a9 = a4 & 0x000000FF
	a8 = a2
	goto l4020E68C
	// succ:  l4020E68C
l4020E671:
	v21 = Mem0[a5 + 0x00000013:byte]
	a2 = (uint32) v21
	a6 = Mem0[a1 + 0x00000008:word32]
	branch a2 <u a6 l4020E68C
	// succ:  l4020E679 l4020E68C
l4020E679:
	a15 = a4 & 0x000000FF
	Mem0[a1 + 0x00000008:word32] = a2
	goto l4020E68C
	// succ:  l4020E68C
l4020E681:
	v20 = Mem0[a5 + 0x00000013:byte]
	a2 = (uint32) v20
	branch a2 <u a11 l4020E68C
	// succ:  l4020E687 l4020E68C
l4020E687:
	a14 = a4 & 0x000000FF
	a11 = a2
	// succ:  l4020E68C
l4020E68C:
	a4 = a4 + 1
	a4 = a4 & 0x000000FF
	a5 = a5 + 20
	branch a4 != 10 l4020E63C
	// succ:  l4020E697 l4020E63C
l4020E697:
	branch (a3 & 0x00000002) != 0x00000000 l4020E704
	// succ:  l4020E69A l4020E704
l4020E69A:
	a5 = a7 << 8
	a5 = a5 >> 24
	a7 = a7 & 0x000000FF
	branch a5 != 10 l4020E6E4
	// succ:  l4020E6A6 l4020E6E4
l4020E6A6:
	branch (a3 & 0x00000001) == 0x00000000 l4020E704
	// succ:  l4020E6A9 l4020E704
l4020E6A9:
	a7 = a14 & 0x000000FF
	branch a14 != 10 l4020E6BB
	// succ:  l4020E6AF l4020E6BB
l4020E6AF:
	a7 = a15 & 0x000000FF
	branch a15 != 10 l4020E6BB
	// succ:  l4020E6B5 l4020E6BB
l4020E6B5:
	branch a9 == 10 l4020E704
	// succ:  l4020E6B8 l4020E704
l4020E6B8:
	a7 = a9 & 0x000000FF
	// succ:  l4020E6BB
l4020E6BB:
	a14 = a7 << 30
	a15 = a14 + a7
	a15 = a13 + a15 * 0x00000004
	a2 = Mem0[a15 + 0x00000000:word32]
	a5 = a7
	branch a2 == 0x00000000 l4020E6DA
	// succ:  l4020E6C9 l4020E6DA
l4020E6C9:
	Mem0[a1:word32] = a7
	Mem0[a1 + 0x00000004:word32] = a7
	a0 = 0x4020E6D0
	call fn4030E5E4 (retsize: 0;)
	a2 = 0
	a7 = Mem0[a1 + 0x00000004:word32]
	a5 = Mem0[a1 + 0x00000000:word32]
	Mem0[a15:word32] = a2
	// succ:  l4020E6DA
l4020E6DA:
	a2 = a14 + a7
	a2 = a13 + a2 * 0x00000004
	a3 = 0
	Mem0[a2 + 0x00000012:byte] = a3
	// succ:  l4020E6E4
l4020E6E4:
	a2 = a5 << 30
	branch a12 == 0x00000000 l4020E6F2
	// succ:  l4020E6E9 l4020E6F2
l4020E6E9:
	a4 = Mem0[a12 + 0x00000000:word32]
	a3 = a2 + a5
	a3 = a13 + a3 * 0x00000004
	Mem0[a3 + 0x00000004:word32] = a4
	// succ:  l4020E6F2
l4020E6F2:
	a5 = a2 + a5
	a13 = a13 + a5 * 0x00000004
	a2 = 0
	Mem0[a13 + 0x00000013:byte] = a2
	a2 = a7 & 0x000000FF
	goto l4020E707
	// succ:  l4020E707
l4020E704:
	a2 = 0x000000FF
	// succ:  l4020E707
l4020E707:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  etharp_find_entry_exit
etharp_find_entry_exit:


// etharp_send_ip
// Return size: 0
void etharp_send_ip()
etharp_send_ip_entry:
	// succ:  l4020E718
l4020E718:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = Mem0[a3 + 0x00000004:word32]
	Mem0[a1 + 0x00000020:word32] = a14
	a14 = 6
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a15
	a13 = a3
	a15 = a2
	a3 = a5
	a2 = a12
	a5 = a4
	a4 = a14
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1:word32] = a5
	a0 = 0x40203130
	v12 = a0
	a0 = 0x4020E73E
	call v12 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000000:word32]
	a4 = a14
	a3 = a5
	a2 = a12 + a14
	a0 = 0x40203130
	v13 = a0
	a0 = 0x4020E74D
	call v13 (retsize: 0;)
	a2 = 8
	a4 = Mem0[a15 + 0x00000018:word32]
	Mem0[a12 + 0x0000000C:byte] = a2
	a2 = 0
	Mem0[a12 + 0x0000000D:byte] = a2
	a3 = a13
	a2 = a15
	a0 = 0x4020E760
	call a4 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a2 & 0x000000FF
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  etharp_send_ip_exit
etharp_send_ip_exit:


// etharp_tmr
// Return size: 0
void etharp_tmr()
etharp_tmr_entry:
	// succ:  l4020E774
l4020E774:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	a12 = 0x4020E614
	Mem0[a1 + 0x00000010:word32] = a14
	a14 = 0x000000C8
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a15
	Mem0[a1 + 0x0000001C:word32] = a0
	a14 = a12 + a14
	a15 = 0x000000EF
	a13 = 0x00000000
	// succ:  l4020E790
l4020E790:
	v9 = Mem0[a12 + 0x00000012:byte]
	a2 = (uint32) v9
	branch a2 == 0x00000000 l4020E7C8
	// succ:  l4020E796 l4020E7C8
l4020E796:
	v11 = Mem0[a12 + 0x00000013:byte]
	a3 = (uint32) v11
	a3 = a3 + 1
	a3 = a3 & 0x000000FF
	Mem0[a12 + 0x00000013:byte] = a3
	branch a15 <u a3 l4020E7AB
	// succ:  l4020E7A5 l4020E7AB
l4020E7A5:
	branch a2 != 1 l4020E7C0
	// succ:  l4020E7A8 l4020E7C0
l4020E7A8:
	branch a3 <u 0x00000002 l4020E7C8
	// succ:  l4020E7AB l4020E7C8
l4020E7AB:
	a3 = Mem0[a12 + 0x00000000:word32]
	a2 = a3
	branch a3 == 0x00000000 l4020E7B9
	// succ:  l4020E7B2 l4020E7B9
l4020E7B2:
	a0 = 0x4020E7B5
	call fn4030E5E4 (retsize: 0;)
	a2 = 0
	Mem0[a12:word32] = a2
	// succ:  l4020E7B9
l4020E7B9:
	Mem0[a12 + 0x00000012:byte] = a13
	goto l4020E7C8
	// succ:  l4020E7C8
l4020E7C0:
	branch a2 != 3 l4020E7C8
	// succ:  l4020E7C3 l4020E7C8
l4020E7C3:
	a2 = 2
	Mem0[a12 + 0x00000012:byte] = a2
	// succ:  l4020E7C8
l4020E7C8:
	a12 = a12 + 20
	branch a12 != a14 l4020E790
	// succ:  l4020E7CE l4020E790
l4020E7CE:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  etharp_tmr_exit
etharp_tmr_exit:


// etharp_cleanup_netif
// Return size: 0
void etharp_cleanup_netif()
etharp_cleanup_netif_entry:
	// succ:  l4020E7E0
l4020E7E0:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = 0x4020E614
	Mem0[a1 + 0x00000024:word32] = a13
	a13 = 0x000000C8
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x0000002C:word32] = a0
	a14 = a2
	a13 = a12 + a13
	a15 = 0
	a4 = 0x00000000
	// succ:  l4020E7FC
l4020E7FC:
	v11 = Mem0[a12 + 0x00000012:byte]
	a3 = (uint32) v11
	branch a3 == 0x00000000 l4020E818
	// succ:  l4020E801 l4020E818
l4020E801:
	a3 = Mem0[a12 + 0x00000008:word32]
	branch a3 != a14 l4020E818
	// succ:  l4020E806 l4020E818
l4020E806:
	a3 = Mem0[a12 + 0x00000000:word32]
	a2 = a3
	branch a3 == 0x00000000 l4020E815
	// succ:  l4020E80C l4020E815
l4020E80C:
	Mem0[a1:word32] = a4
	a0 = 0x4020E811
	call fn4030E5E4 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000000:word32]
	Mem0[a12:word32] = a4
	// succ:  l4020E815
l4020E815:
	Mem0[a12 + 0x00000012:byte] = a15
	// succ:  l4020E818
l4020E818:
	a12 = a12 + 20
	branch a12 != a13 l4020E7FC
	// succ:  l4020E81E l4020E7FC
l4020E81E:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  etharp_cleanup_netif_exit
etharp_cleanup_netif_exit:


// etharp_request
// Return size: 0
void etharp_request()
etharp_request_entry:
	// succ:  l4020E838
l4020E838:
	a1 = fp
	a1 = a1 - 64
	a5 = a3
	Mem0[a1 + 0x00000030:word32] = a14
	a3 = 42
	a14 = a2
	a4 = 0
	a2 = 3
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x00000010:word32] = a5
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000034:word32] = a13
	a0 = 0x4020E854
	call fn4030C160 (retsize: 0;)
	a15 = a2
	a8 = a14 + 41
	a6 = a14 + 4
	a5 = Mem0[a1 + 0x00000010:word32]
	branch a2 != 0x00000000 l4020E870
	// succ:  l4020E85F l4020E870
l4020E85F:
	a3 = 0x40209ABC
	a2 = 0x000000FF
	v14 = Mem0[a3 + 0x00000024:uint16]
	a4 = (uint32) v14
	a4 = a4 + 1
	Mem0[a3 + 0x00000024:word16] = a4
	goto l4020E930
	// succ:  l4020E930
l4020E870:
	a12 = Mem0[a2 + 0x00000004:word32]
	a13 = 6
	a7 = 0
	a9 = 1
	Mem0[a12 + 0x00000014:byte] = a7
	Mem0[a12 + 0x00000015:byte] = a9
	a3 = a8
	a4 = a13
	a2 = a12 + 22
	Mem0[a1 + 0x00000010:word32] = a5
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1 + 0x00000008:word32] = a7
	Mem0[a1 + 0x0000000C:word32] = a9
	Mem0[a1:word32] = a8
	a0 = 0x40203130
	v17 = a0
	a0 = 0x4020E895
	call v17 (retsize: 0;)
	a3 = 0x4020E830
	a4 = a13
	a2 = a12 + 32
	a0 = 0x40203130
	v18 = a0
	a0 = 0x4020E8A3
	call v18 (retsize: 0;)
	a3 = 0x4020E834
	a2 = a12
	a4 = a13
	a0 = 0x40203130
	v19 = a0
	a0 = 0x4020E8B0
	call v19 (retsize: 0;)
	a8 = Mem0[a1 + 0x00000000:word32]
	a4 = a13
	a3 = a8
	a2 = a12 + a13
	a0 = 0x40203130
	v20 = a0
	a0 = 0x4020E8BE
	call v20 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000004:word32]
	v21 = Mem0[a14 + 0x00000004:byte]
	a4 = (uint32) v21
	v22 = Mem0[a6 + 0x00000001:byte]
	a3 = (uint32) v22
	Mem0[a12 + 0x0000001C:byte] = a4
	v23 = Mem0[a6 + 0x00000002:byte]
	a4 = (uint32) v23
	Mem0[a12 + 0x0000001D:byte] = a3
	v24 = Mem0[a6 + 0x00000003:byte]
	a3 = (uint32) v24
	Mem0[a12 + 0x0000001E:byte] = a4
	Mem0[a12 + 0x0000001F:byte] = a3
	a5 = Mem0[a1 + 0x00000010:word32]
	a2 = 4
	v25 = Mem0[a5 + 0x00000000:byte]
	a4 = (uint32) v25
	v26 = Mem0[a5 + 0x00000001:byte]
	a3 = (uint32) v26
	Mem0[a12 + 0x00000026:byte] = a4
	v27 = Mem0[a5 + 0x00000002:byte]
	a4 = (uint32) v27
	Mem0[a12 + 0x00000027:byte] = a3
	v28 = Mem0[a5 + 0x00000003:byte]
	a3 = (uint32) v28
	Mem0[a12 + 0x00000028:byte] = a4
	Mem0[a12 + 0x00000029:byte] = a3
	Mem0[a12 + 0x00000013:byte] = a2
	Mem0[a12 + 0x00000012:byte] = a13
	a7 = Mem0[a1 + 0x00000008:word32]
	a9 = Mem0[a1 + 0x0000000C:word32]
	a5 = Mem0[a14 + 0x00000018:word32]
	a4 = 8
	Mem0[a12 + 0x0000000E:byte] = a7
	Mem0[a12 + 0x0000000F:byte] = a9
	Mem0[a12 + 0x00000010:byte] = a4
	Mem0[a12 + 0x00000011:byte] = a7
	Mem0[a12 + 0x0000000C:byte] = a4
	a3 = a15
	Mem0[a12 + 0x0000000D:byte] = a13
	a2 = a14
	a0 = 0x4020E91B
	call a5 (retsize: 0;)
	a3 = 0x40209ABC
	a12 = a2 & 0x000000FF
	v29 = Mem0[a3 + 0x00000018:uint16]
	a4 = (uint32) v29
	a2 = a15
	a4 = a4 + 1
	Mem0[a3 + 0x00000018:word16] = a4
	a0 = 0x4020E92E
	call fn4030C0EC (retsize: 0;)
	a2 = a12
	// succ:  l4020E930
l4020E930:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  etharp_request_exit
etharp_request_exit:


// etharp_output_to_arp_index
// Return size: 0
void etharp_output_to_arp_index()
etharp_output_to_arp_index_entry:
	// succ:  l4020E940
l4020E940:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	a13 = 0x4020E614
	a14 = a4 << 30
	a5 = a14 + a4
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x0000001C:word32] = a15
	a5 = a13 + a5 * 0x00000004
	Mem0[a1 + 0x0000002C:word32] = a0
	v11 = Mem0[a5 + 0x00000012:byte]
	a7 = (uint32) v11
	a15 = a5 + 16
	a12 = a2
	a6 = a3
	branch a7 != 2 l4020E98A
	// succ:  l4020E968 l4020E98A
l4020E968:
	v15 = Mem0[a5 + 0x00000013:byte]
	a2 = (uint32) v15
	a3 = 0x000000E3
	branch a3 >=u a2 l4020E98A
	// succ:  l4020E971 l4020E98A
l4020E971:
	a2 = a12
	a3 = a5 + 4
	Mem0[a1:word32] = a4
	Mem0[a1 + 0x00000004:word32] = a6
	a0 = 0x4020E97C
	call fn4030E838 (retsize: 0;)
	a2 = a2 & 0x000000FF
	a4 = Mem0[a1 + 0x00000000:word32]
	a6 = Mem0[a1 + 0x00000004:word32]
	branch a2 != 0x00000000 l4020E98A
	// succ:  l4020E985 l4020E98A
l4020E985:
	a2 = 3
	Mem0[a15 + 0x00000002:byte] = a2
	// succ:  l4020E98A
l4020E98A:
	a4 = a14 + a4
	a5 = a13 + a4 * 0x00000004
	a2 = a12 | a12
	a4 = a12 + 41
	a3 = a6 | a6
	a5 = a5 + 12
	a0 = 0x4020E99E
	call fn4030E718 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a2 & 0x000000FF
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  etharp_output_to_arp_index_exit
etharp_output_to_arp_index_exit:


// etharp_query
// Return size: 0
void etharp_query()
etharp_query_entry:
	// succ:  l4020E9B4
l4020E9B4:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x0000001C:word32] = a15
	a15 = a2
	a2 = Mem0[a3 + 0x00000000:word32]
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = a3
	a3 = a15
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a13
	a14 = a4
	a0 = 0x4020E9CE
	call ip4_addr_isbroadcast (retsize: 0;)
	branch a2 != 0x00000000 l4020EB04
	// succ:  l4020E9D1 l4020EB04
l4020E9D1:
	a2 = Mem0[a12 + 0x00000000:word32]
	a4 = 0x000000F0
	a4 = a2 & a4
	a3 = 0x000000E0
	branch a4 != a3 l4020E9E2
	// succ:  l4020E9DF l4020E9E2
l4020E9DF:
	goto l4020EB04
	// succ:  l4020EB04
l4020E9E2:
	branch a2 == 0x00000000 l4020EB04
	// succ:  l4020E9E5 l4020EB04
l4020E9E5:
	a2 = a12
	a3 = 1
	a0 = 0x4020E9EC
	call fn4030E618 (retsize: 0;)
	a6 = a2 & 0x000000FF
	a13 = a6 << 8
	a13 = a13 >> 24
	branch a13 >= 0x00000000 l4020EA0C
	// succ:  l4020E9F8 l4020EA0C
l4020E9F8:
	branch a14 == 0x00000000 l4020EB0A
	// succ:  l4020E9FB l4020EB0A
l4020E9FB:
	a3 = 0x40209ABC
	a2 = a6
	v12 = Mem0[a3 + 0x00000024:uint16]
	a4 = (uint32) v12
	a4 = a4 + 1
	Mem0[a3 + 0x00000024:word16] = a4
	goto l4020EB5D
	// succ:  l4020EB5D
l4020EA0C:
	a5 = 0x4020E614
	a7 = a13 << 30
	a3 = a7 + a13
	a3 = a5 + a3 * 0x00000004
	v15 = Mem0[a3 + 0x00000012:byte]
	a2 = (uint32) v15
	a3 = a3 + 16
	branch a2 != 0x00000000 l4020EA28
	// succ:  l4020EA1F l4020EA28
l4020EA1F:
	a2 = 1
	Mem0[a3 + 0x00000002:byte] = a2
	goto l4020EA30
	// succ:  l4020EA30
l4020EA28:
	branch a2 == 1 l4020EA30
	// succ:  l4020EA2B l4020EA30
l4020EA2B:
	branch a14 != 0x00000000 l4020EA56
	// succ:  l4020EA2D l4020EA56
l4020EA2D:
	goto l4020EB0F
	// succ:  l4020EB0F
l4020EA30:
	a2 = a15
	a3 = a12
	Mem0[a1 + 0x00000008:word32] = a5
	Mem0[a1:word32] = a6
	Mem0[a1 + 0x00000004:word32] = a7
	a0 = 0x4020EA3D
	call fn4030E838 (retsize: 0;)
	a4 = a2 & 0x000000FF
	a2 = a4
	a5 = Mem0[a1 + 0x00000008:word32]
	a6 = Mem0[a1 + 0x00000000:word32]
	a7 = Mem0[a1 + 0x00000004:word32]
	branch a14 == 0x00000000 l4020EB5D
	// succ:  l4020EA4B l4020EB5D
l4020EA4B:
	a3 = a7 + a13
	a3 = a5 + a3 * 0x00000004
	v16 = Mem0[a3 + 0x00000012:byte]
	a3 = (uint32) v16
	branch a3 <u 0x00000002 l4020EA76
	// succ:  l4020EA56 l4020EA76
l4020EA56:
	a13 = a7 + a13
	a5 = a5 + a13 * 0x00000004
	a7 = 0x4020E9B0
	a2 = a15 | a15
	a3 = a14 | a14
	a4 = a15 + 41
	a5 = a5 + 12
	Mem0[a7:byte] = a6
	a0 = 0x4020EA70
	call fn4030E718 (retsize: 0;)
	a2 = a2 & 0x000000FF
	goto l4020EB5D
	// succ:  l4020EB5D
l4020EA76:
	a2 = a4
	branch a3 == 1 l4020EA7E
	// succ:  l4020EA7B l4020EA7E
l4020EA7B:
	goto l4020EB5D
	// succ:  l4020EB5D
l4020EA7E:
	v17 = Mem0[a14 + 0x0000000C:byte]
	a2 = (uint32) v17
	a6 = a14
	branch a2 == 1 l4020EA92
	// succ:  l4020EA86 l4020EA92
l4020EA86:
	goto l4020EB1C
	// succ:  l4020EB1C
l4020EA89:
	v20 = Mem0[a6 + 0x0000000C:byte]
	a2 = (uint32) v20
	branch a2 == 1 l4020EA92
	// succ:  l4020EA8F l4020EA92
l4020EA8F:
	goto l4020EB1C
	// succ:  l4020EB1C
l4020EA92:
	a6 = Mem0[a6 + 0x00000000:word32]
	branch a6 != 0x00000000 l4020EA89
	// succ:  l4020EA97 l4020EA89
l4020EA97:
	goto l4020EB48
	// succ:  l4020EB48
l4020EA9A:
	a2 = a12 | a12
	a3 = a14 | a14
	Mem0[a1 + 0x00000008:word32] = a5
	Mem0[a1 + 0x00000004:word32] = a7
	a0 = 0x4020EAA7
	call fn4030C384 (retsize: 0;)
	a2 = a2 & 0x000000FF
	a5 = Mem0[a1 + 0x00000008:word32]
	a7 = Mem0[a1 + 0x00000004:word32]
	branch a2 == 0x00000000 l4020EAB8
	// succ:  l4020EAB0 l4020EAB8
l4020EAB0:
	a2 = a12
	a0 = 0x4020EAB5
	call fn4030C0EC (retsize: 0;)
	goto l4020EB36
	// succ:  l4020EB36
l4020EAB8:
	a2 = 0x40209C38
	Mem0[a1 + 0x00000008:word32] = a5
	v21 = Mem0[a2 + 0x00000012:uint16]
	a2 = (uint32) v21
	Mem0[a1 + 0x00000004:word32] = a7
	a0 = 0x402034C4
	v22 = a0
	a0 = 0x4020EAC8
	call v22 (retsize: 0;)
	a6 = a2
	a5 = Mem0[a1 + 0x00000008:word32]
	a7 = Mem0[a1 + 0x00000004:word32]
	branch a2 == 0x00000000 l4020EAF8
	// succ:  l4020EAD0 l4020EAF8
l4020EAD0:
	a7 = a7 + a13
	a5 = a5 + a7 * 0x00000004
	a2 = 0
	a4 = Mem0[a5 + 0x00000000:word32]
	Mem0[a6:word32] = a2
	Mem0[a6 + 0x00000004:word32] = a12
	branch a4 == a2 l4020EAF0
	// succ:  l4020EAE0 l4020EAF0
l4020EAE0:
	a3 = Mem0[a4 + 0x00000000:word32]
	branch a3 == 0x00000000 l4020EAE9
	// succ:  l4020EAE4 l4020EAE9
l4020EAE4:
	a4 = a3
	goto l4024EAE0
	// succ:  l4024EAE0
l4020EAE9:
	Mem0[a4:word32] = a6
	a2 = a3
	goto l4020EB5D
	// succ:  l4020EB5D
l4020EAF0:
	Mem0[a5:word32] = a6
	a2 = a4
	goto l4020EB5D
	// succ:  l4020EB5D
l4020EAF8:
	a2 = a12
	a0 = 0x4020EAFD
	call fn4030C0EC (retsize: 0;)
	a2 = 0x000000FF
	goto l4020EB5D
	// succ:  l4020EB5D
l4020EB04:
	a2 = 0x000000F2
	goto l4020EB5D
	// succ:  l4020EB5D
l4020EB0A:
	a2 = a6
	goto l4020EB5D
	// succ:  l4020EB5D
l4020EB0F:
	a2 = a15
	a3 = a12
	a0 = 0x4020EB16
	call fn4030E838 (retsize: 0;)
	a2 = a2 & 0x000000FF
	goto l4020EB5D
	// succ:  l4020EB5D
l4020EB1C:
	v18 = Mem0[a6 + 0x00000008:uint16]
	a3 = (uint32) v18
	a2 = 0x00000003
	a4 = 0x00000000
	Mem0[a1 + 0x00000008:word32] = a5
	Mem0[a1 + 0x00000004:word32] = a7
	a0 = 0x4020EB2D
	call fn4030C160 (retsize: 0;)
	a12 = a2
	a5 = Mem0[a1 + 0x00000008:word32]
	a7 = Mem0[a1 + 0x00000004:word32]
	branch a2 != 0x00000000 l4020EA9A
	// succ:  l4020EB36 l4020EA9A
l4020EB36:
	a3 = 0x40209ABC
	a2 = 0x000000FF
	v19 = Mem0[a3 + 0x00000024:uint16]
	a4 = (uint32) v19
	a4 = a4 + 1
	Mem0[a3 + 0x00000024:word16] = a4
	goto l4020EB5D
	// succ:  l4020EB5D
l4020EB48:
	a2 = a14 | a14
	Mem0[a1 + 0x00000008:word32] = a5
	Mem0[a1 + 0x00000004:word32] = a7
	a0 = 0x4020EB54
	call fn4030C31C (retsize: 0;)
	a12 = a14
	a5 = Mem0[a1 + 0x00000008:word32]
	a7 = Mem0[a1 + 0x00000004:word32]
	goto l4024EAB8
	// succ:  l4024EAB8
l4020EB5D:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  etharp_query_exit
l4024EAB8:
l4024EAE0:
etharp_query_exit:


// etharp_output
// Return size: 0
void etharp_output()
etharp_output_entry:
	// succ:  l4020EB70
l4020EB70:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	a12 = a3
	Mem0[a1 + 0x00000010:word32] = a14
	a3 = 14
	a14 = a2
	a2 = a12
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a0
	a13 = a4
	a0 = 0x4020EB88
	call pbuf_header (retsize: 0;)
	branch a2 == 0x00000000 l4020EB9E
	// succ:  l4020EB8A l4020EB9E
l4020EB8A:
	a3 = 0x40209ABC
	a2 = 0x000000FE
	v10 = Mem0[a3 + 0x0000000A:uint16]
	a4 = (uint32) v10
	a4 = a4 + 1
	Mem0[a3 + 0x0000000A:word16] = a4
	goto l4020EC8F
	// succ:  l4020EC8F
l4020EB9E:
	a2 = Mem0[a13 + 0x00000000:word32]
	a3 = a14 | a14
	a0 = 0x4020EBA7
	call ip4_addr_isbroadcast (retsize: 0;)
	branch a2 != 0x00000000 l4020EC78
	// succ:  l4020EBAA l4020EC78
l4020EBAA:
	a3 = Mem0[a13 + 0x00000000:word32]
	a5 = 0x000000F0
	a5 = a3 & a5
	a4 = 0x000000E0
	branch a5 != a4 l4020EBE2
	// succ:  l4020EBB9 l4020EBE2
l4020EBB9:
	v12 = Mem0[a13 + 0x00000001:byte]
	a5 = (uint32) v12
	v13 = Mem0[a13 + 0x00000002:byte]
	a4 = (uint32) v13
	v14 = Mem0[a13 + 0x00000003:byte]
	a3 = (uint32) v14
	a5 = a5 & 0x0000007F
	a6 = 1
	Mem0[a1 + 0x00000001:byte] = a2
	a2 = 94
	Mem0[a1 + 0x00000003:byte] = a5
	Mem0[a1:byte] = a6
	Mem0[a1 + 0x00000002:byte] = a2
	Mem0[a1 + 0x00000004:byte] = a4
	Mem0[a1 + 0x00000005:byte] = a3
	a5 = a1
	goto l4020EC7B
	// succ:  l4020EC7B
l4020EBE2:
	a4 = Mem0[a14 + 0x00000004:word32]
	a2 = Mem0[a14 + 0x00000008:word32]
	a4 = a3 ^ a4
	branch (a4 & a2) == 0x00000000 l4020EBFC
	// succ:  l4020EBEC l4020EBFC
l4020EBEC:
	a2 = 0x4020EB6C
	a3 = a3 & 0x0000FFFF
	branch a3 == a2 l4020EBFC
	// succ:  l4020EBF5 l4020EBFC
l4020EBF5:
	a2 = Mem0[a14 + 0x0000000C:word32]
	a13 = a14 + 12
	branch a2 == 0x00000000 l4020EC8C
	// succ:  l4020EBFC l4020EC8C
l4020EBFC:
	a10 = 0x4020E9B0
	a6 = 0x4020E614
	v17 = Mem0[a10 + 0x00000000:byte]
	a4 = (uint32) v17
	a2 = a4 + a4 * 0x00000004
	a2 = a6 + a2 * 0x00000004
	v18 = Mem0[a2 + 0x00000012:byte]
	a3 = (uint32) v18
	branch a3 <u 0x00000002 l4020EC18
	// succ:  l4020EC11 l4020EC18
l4020EC11:
	a3 = Mem0[a13 + 0x00000000:word32]
	a2 = Mem0[a2 + 0x00000004:word32]
	branch a3 == a2 l4020EC1D
	// succ:  l4020EC18 l4020EC1D
l4020EC18:
	a4 = 0
	goto l4020EC38
	// succ:  l4020EC38
l4020EC1D:
	a5 = 0x40209ABC
	a2 = a14
	v19 = Mem0[a5 + 0x0000002E:uint16]
	a6 = (uint32) v19
	a3 = a12
	a6 = a6 + 1
	Mem0[a5 + 0x0000002E:word16] = a6
	a0 = 0x4020EC30
	call fn4030E940 (retsize: 0;)
	a2 = a2 & 0x000000FF
	goto l4020EC8F
	// succ:  l4020EC8F
l4020EC38:
	v21 = Mem0[a6 + 0x00000012:byte]
	a7 = (uint32) v21
	a9 = a4 & 0x000000FF
	branch a7 <u 0x00000002 l4020EC5C
	// succ:  l4020EC41 l4020EC5C
l4020EC41:
	a7 = Mem0[a6 + 0x00000004:word32]
	a8 = Mem0[a13 + 0x00000000:word32]
	branch a8 != a7 l4020EC5C
	// succ:  l4020EC4A l4020EC5C
l4020EC4A:
	a2 = a14 | a14
	a3 = a12
	Mem0[a10:byte] = a9
	a0 = 0x4020EC55
	call fn4030E940 (retsize: 0;)
	a2 = a2 & 0x000000FF
	goto l4020EC8F
	// succ:  l4020EC8F
l4020EC5C:
	a4 = a4 + 1
	a6 = a6 + 20
	branch a4 != 10 l4020EC38
	// succ:  l4020EC65 l4020EC38
l4020EC65:
	a2 = a14 | a14
	a3 = a13 | a13
	a4 = a12
	a0 = 0x4020EC70
	call fn4030E9B4 (retsize: 0;)
	a2 = a2 & 0x000000FF
	goto l4020EC8F
	// succ:  l4020EC8F
l4020EC78:
	a5 = 0x4020E834
	// succ:  l4020EC7B
l4020EC7B:
	a2 = a14
	a3 = a12
	a4 = a14 + 41
	a0 = 0x4020EC85
	call fn4030E718 (retsize: 0;)
	a2 = a2 & 0x000000FF
	goto l4020EC8F
	// succ:  l4020EC8F
l4020EC8C:
	a2 = 0x000000FC
	// succ:  l4020EC8F
l4020EC8F:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  etharp_output_exit
etharp_output_exit:


// ethernet_input
// Return size: 0
void ethernet_input()
ethernet_input_entry:
	// succ:  l4020EC9C
l4020EC9C:
	a1 = fp
	a1 = a1 - 80
	Mem0[a1 + 0x00000048:word32] = a12
	v4 = Mem0[a2 + 0x0000000A:uint16]
	a12 = (uint32) v4
	Mem0[a1 + 0x0000003C:word32] = a15
	Mem0[a1 + 0x0000004C:word32] = a0
	Mem0[a1 + 0x00000044:word32] = a13
	Mem0[a1 + 0x00000040:word32] = a14
	a4 = 14
	a15 = a2
	a8 = a3
	branch a4 <u a12 l4020ECBC
	// succ:  l4020ECB9 l4020ECBC
l4020ECB9:
	goto l4020EFA9
	// succ:  l4020EFA9
l4020ECBC:
	a14 = Mem0[a2 + 0x00000004:word32]
	v13 = Mem0[a14 + 0x0000000D:byte]
	a13 = (uint32) v13
	v14 = Mem0[a14 + 0x0000000C:byte]
	a3 = (uint32) v14
	v15 = Mem0[a14 + 0x00000000:byte]
	a2 = (uint32) v15
	a13 = a13 << 24
	a13 = a13 | a3
	branch (a2 & 0x00000001) == 0x00000000 l4020ED10
	// succ:  l4020ECD0 l4020ED10
l4020ECD0:
	branch a2 != 1 l4020ECF1
	// succ:  l4020ECD3 l4020ECF1
l4020ECD3:
	v16 = Mem0[a14 + 0x00000001:byte]
	a2 = (uint32) v16
	branch a2 != 0x00000000 l4020ED10
	// succ:  l4020ECD8 l4020ED10
l4020ECD8:
	v17 = Mem0[a14 + 0x00000002:byte]
	a3 = (uint32) v17
	a2 = 94
	branch a3 != a2 l4020ED10
	// succ:  l4020ECE0 l4020ED10
l4020ECE0:
	v18 = Mem0[a15 + 0x0000000D:byte]
	a3 = (uint32) v18
	a2 = 16
	a2 = a3 | a2
	Mem0[a15 + 0x0000000D:byte] = a2
	goto l4020ED10
	// succ:  l4020ED10
l4020ECF1:
	a3 = 0x4020E834
	a2 = a14
	a4 = 6
	Mem0[a1 + 0x00000020:word32] = a8
	a0 = 0x40202AA8
	v21 = a0
	a0 = 0x4020ED01
	call v21 (retsize: 0;)
	a8 = Mem0[a1 + 0x00000020:word32]
	branch a2 != 0x00000000 l4020ED10
	// succ:  l4020ED05 l4020ED10
l4020ED05:
	v22 = Mem0[a15 + 0x0000000D:byte]
	a3 = (uint32) v22
	a2 = 8
	a2 = a3 | a2
	Mem0[a15 + 0x0000000D:byte] = a2
	// succ:  l4020ED10
l4020ED10:
	branch a13 == 8 l4020ED1C
	// succ:  l4020ED13 l4020ED1C
l4020ED13:
	a2 = 0x00000608
	branch a13 == a2 l4020ED40
	// succ:  l4020ED19 l4020ED40
l4020ED19:
	goto l4020EFA9
	// succ:  l4020EFA9
l4020ED1C:
	v23 = Mem0[a8 + 0x0000002F:byte]
	a2 = (uint32) v23
	branch (a2 & 0x00000020) != 0x00000000 l4020ED25
	// succ:  l4020ED22 l4020ED25
l4020ED22:
	goto l4020EFBC
	// succ:  l4020EFBC
l4020ED25:
	a2 = a15 | a15
	a3 = 0xFFFFFFF2
	Mem0[a1 + 0x00000020:word32] = a8
	a0 = 0x4020ED30
	call pbuf_header (retsize: 0;)
	a8 = Mem0[a1 + 0x00000020:word32]
	branch a2 != 0x00000000 l4020EFBC
	// succ:  l4020ED35 l4020EFBC
l4020ED35:
	a2 = a15
	a3 = a8
	a0 = 0x4020ED3C
	call fn4030DD00 (retsize: 0;)
	goto l4020EFC2
	// succ:  l4020EFC2
l4020ED40:
	v24 = Mem0[a8 + 0x0000002F:byte]
	a2 = (uint32) v24
	branch (a2 & 0x00000020) != 0x00000000 l4020ED49
	// succ:  l4020ED46 l4020ED49
l4020ED46:
	goto l4020EFBC
	// succ:  l4020EFBC
l4020ED49:
	a2 = 0x00000029
	branch a2 <u a12 l4020ED6C
	// succ:  l4020ED4F l4020ED6C
l4020ED4F:
	a3 = 0x40209ABC
	a2 = a15 | a15
	v26 = Mem0[a3 + 0x00000022:uint16]
	a5 = (uint32) v26
	v27 = Mem0[a3 + 0x0000001E:uint16]
	a4 = (uint32) v27
	a5 = a5 + 1
	a4 = a4 + 1
	Mem0[a3 + 0x00000022:word16] = a5
	Mem0[a3 + 0x0000001E:word16] = a4
	a0 = 0x4020ED69
	call fn4030C0EC (retsize: 0;)
	goto l4020EFC2
	// succ:  l4020EFC2
l4020ED6C:
	v28 = Mem0[a14 + 0x0000000F:byte]
	a2 = (uint32) v28
	v29 = Mem0[a14 + 0x0000000E:byte]
	a3 = (uint32) v29
	a2 = a2 << 24
	a2 = a2 | a3
	branch a2 != 256 l4020ED96
	// succ:  l4020ED7B l4020ED96
l4020ED7B:
	v30 = Mem0[a14 + 0x00000012:byte]
	a2 = (uint32) v30
	branch a2 != 6 l4020ED96
	// succ:  l4020ED81 l4020ED96
l4020ED81:
	v31 = Mem0[a14 + 0x00000013:byte]
	a2 = (uint32) v31
	branch a2 != 4 l4020ED96
	// succ:  l4020ED87 l4020ED96
l4020ED87:
	v32 = Mem0[a14 + 0x00000011:byte]
	a3 = (uint32) v32
	v33 = Mem0[a14 + 0x00000010:byte]
	a2 = (uint32) v33
	a3 = a3 << 24
	a2 = a3 | a2
	branch a2 == 8 l4020EDB4
	// succ:  l4020ED96 l4020EDB4
l4020ED96:
	a3 = 0x40209ABC
	a2 = a15 | a15
	v34 = Mem0[a3 + 0x00000028:uint16]
	a5 = (uint32) v34
	v35 = Mem0[a3 + 0x0000001E:uint16]
	a4 = (uint32) v35
	a5 = a5 + 1
	a4 = a4 + 1
	Mem0[a3 + 0x00000028:word16] = a5
	Mem0[a3 + 0x0000001E:word16] = a4
	a0 = 0x4020EDB1
	call fn4030C0EC (retsize: 0;)
	goto l4020EFC2
	// succ:  l4020EFC2
l4020EDB4:
	a3 = 0x40209ABC
	a6 = a14 + 28
	v37 = Mem0[a3 + 0x0000001A:uint16]
	a2 = (uint32) v37
	a12 = a14 + 38
	a2 = a2 + 1
	Mem0[a3 + 0x0000001A:word16] = a2
	v38 = Mem0[a14 + 0x0000001C:byte]
	a3 = (uint32) v38
	v39 = Mem0[a6 + 0x00000001:byte]
	a2 = (uint32) v39
	Mem0[a1 + 0x00000004:byte] = a3
	v40 = Mem0[a6 + 0x00000002:byte]
	a3 = (uint32) v40
	Mem0[a1 + 0x00000005:byte] = a2
	v41 = Mem0[a6 + 0x00000003:byte]
	a2 = (uint32) v41
	Mem0[a1 + 0x00000006:byte] = a3
	Mem0[a1 + 0x00000007:byte] = a2
	v42 = Mem0[a12 + 0x00000003:byte]
	a2 = (uint32) v42
	v43 = Mem0[a14 + 0x00000026:byte]
	a5 = (uint32) v43
	v44 = Mem0[a12 + 0x00000001:byte]
	a4 = (uint32) v44
	v45 = Mem0[a12 + 0x00000002:byte]
	a3 = (uint32) v45
	Mem0[a1 + 0x00000003:byte] = a2
	a13 = Mem0[a8 + 0x00000004:word32]
	a2 = a14 + 22
	Mem0[a1:byte] = a5
	Mem0[a1 + 0x00000001:byte] = a4
	Mem0[a1 + 0x00000002:byte] = a3
	Mem0[a1 + 0x00000010:word32] = a2
	branch a13 == 0x00000000 l4020EE0C
	// succ:  l4020EDFE l4020EE0C
l4020EDFE:
	a2 = Mem0[a1 + 0x00000000:word32]
	branch a13 != a2 l4020EE0A
	// succ:  l4020EE03 l4020EE0A
l4020EE03:
	a13 = 1
	a4 = a13
	goto l4020EE0E
	// succ:  l4020EE0E
l4020EE0A:
	a13 = 0
	// succ:  l4020EE0C
l4020EE0C:
	a4 = 2
	// succ:  l4020EE0E
l4020EE0E:
	a3 = a8 + 41
	a2 = Mem0[a1 + 0x00000004:word32]
	Mem0[a1 + 0x00000014:word32] = a3
	branch a2 != 0x00000000 l4020EE36
	// succ:  l4020EE18 l4020EE36
l4020EE18:
	v46 = Mem0[a14 + 0x00000015:byte]
	a3 = (uint32) v46
	v47 = Mem0[a14 + 0x00000014:byte]
	a2 = (uint32) v47
	a3 = a3 << 24
	a2 = a3 | a2
	branch a2 != 256 l4020EE2A
	// succ:  l4020EE27 l4020EE2A
l4020EE27:
	goto l4020EEF0
	// succ:  l4020EEF0
l4020EE2A:
	a3 = 0x00000200
	branch a2 != a3 l4020EE33
	// succ:  l4020EE30 l4020EE33
l4020EE30:
	goto l4020EF8E
	// succ:  l4020EF8E
l4020EE33:
	goto l4020EF9B
	// succ:  l4020EF9B
l4020EE36:
	a3 = a8
	Mem0[a1 + 0x0000001C:word32] = a4
	Mem0[a1 + 0x00000028:word32] = a6
	Mem0[a1 + 0x00000020:word32] = a8
	a0 = 0x4020EE41
	call ip4_addr_isbroadcast (retsize: 0;)
	Mem0[a1 + 0x00000018:word32] = a2
	a4 = Mem0[a1 + 0x0000001C:word32]
	a6 = Mem0[a1 + 0x00000028:word32]
	a8 = Mem0[a1 + 0x00000020:word32]
	branch a2 != 0x00000000 l4020EE18
	// succ:  l4020EE4C l4020EE18
l4020EE4C:
	a2 = Mem0[a1 + 0x00000004:word32]
	a3 = 0x000000F0
	a3 = a3 & a2
	a2 = 0x000000E0
	branch a3 == a2 l4020EE18
	// succ:  l4020EE5A l4020EE18
l4020EE5A:
	a2 = a1 + 4
	a3 = a4
	a0 = 0x4020EE61
	call fn4030E618 (retsize: 0;)
	a2 = a2 << 8
	a5 = a2 >> 24
	a6 = Mem0[a1 + 0x00000028:word32]
	a8 = Mem0[a1 + 0x00000020:word32]
	branch a5 < 0x00000000 l4020EE18
	// succ:  l4020EE6E l4020EE18
l4020EE6E:
	a2 = 0x4020E614
	a5 = a5 + a5 * 0x00000004
	a5 = a2 + a5 * 0x00000004
	a3 = Mem0[a1 + 0x00000010:word32]
	a2 = 2
	Mem0[a5 + 0x00000012:byte] = a2
	Mem0[a5 + 0x00000008:word32] = a8
	a11 = a5 + 16
	a2 = a5 + 12
	a4 = 6
	Mem0[a1 + 0x0000001C:word32] = a5
	Mem0[a1 + 0x00000028:word32] = a6
	Mem0[a1 + 0x00000020:word32] = a8
	Mem0[a1 + 0x00000024:word32] = a11
	a0 = 0x40203130
	v49 = a0
	a0 = 0x4020EE96
	call v49 (retsize: 0;)
	a5 = Mem0[a1 + 0x0000001C:word32]
	a11 = Mem0[a1 + 0x00000024:word32]
	a3 = Mem0[a1 + 0x00000018:word32]
	a2 = Mem0[a5 + 0x00000000:word32]
	Mem0[a11 + 0x00000003:byte] = a3
	a6 = Mem0[a1 + 0x00000028:word32]
	a8 = Mem0[a1 + 0x00000020:word32]
	branch a2 == 0x00000000 l4020EE18
	// succ:  l4020EEA8 l4020EE18
l4020EEA8:
	a7 = a13
	a9 = a15
	a11 = a5
	a15 = a12
	a13 = a8
	// succ:  l4020EEB2
l4020EEB2:
	a3 = Mem0[a2 + 0x00000000:word32]
	a12 = Mem0[a2 + 0x00000004:word32]
	Mem0[a11:word32] = a3
	Mem0[a1 + 0x00000028:word32] = a6
	Mem0[a1 + 0x0000001C:word32] = a7
	Mem0[a1 + 0x00000020:word32] = a9
	Mem0[a1 + 0x00000024:word32] = a11
	a0 = 0x402034CC
	v52 = a0
	a0 = 0x4020EEC8
	call v52 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000014:word32]
	a5 = Mem0[a1 + 0x00000010:word32]
	a3 = a12
	a2 = a13
	a0 = 0x4020EED3
	call fn4030E718 (retsize: 0;)
	a2 = a12
	a0 = 0x4020EED8
	call fn4030C0EC (retsize: 0;)
	a11 = Mem0[a1 + 0x00000024:word32]
	a6 = Mem0[a1 + 0x00000028:word32]
	a2 = Mem0[a11 + 0x00000000:word32]
	a7 = Mem0[a1 + 0x0000001C:word32]
	a9 = Mem0[a1 + 0x00000020:word32]
	branch a2 != 0x00000000 l4020EEB2
	// succ:  l4020EEE5 l4020EEB2
l4020EEE5:
	a12 = a15
	a8 = a13
	a15 = a9
	a13 = a7
	goto l4024EE18
	// succ:  l4024EE18
l4020EEF0:
	branch a13 == 0x00000000 l4020EFBC
	// succ:  l4020EEF3 l4020EFBC
l4020EEF3:
	a13 = 0x00000000
	a2 = 0x00000002
	Mem0[a14 + 0x00000014:byte] = a13
	Mem0[a14 + 0x00000015:byte] = a2
	v53 = Mem0[a14 + 0x0000001C:byte]
	a3 = (uint32) v53
	v54 = Mem0[a6 + 0x00000001:byte]
	a2 = (uint32) v54
	Mem0[a14 + 0x00000026:byte] = a3
	v55 = Mem0[a6 + 0x00000002:byte]
	a3 = (uint32) v55
	Mem0[a12 + 0x00000001:byte] = a2
	v56 = Mem0[a6 + 0x00000003:byte]
	a2 = (uint32) v56
	Mem0[a12 + 0x00000002:byte] = a3
	Mem0[a12 + 0x00000003:byte] = a2
	v57 = Mem0[a8 + 0x00000004:byte]
	a3 = (uint32) v57
	v58 = Mem0[a8 + 0x00000005:byte]
	a4 = (uint32) v58
	Mem0[a14 + 0x0000001C:byte] = a3
	v59 = Mem0[a8 + 0x00000006:byte]
	a3 = (uint32) v59
	Mem0[a6 + 0x00000001:byte] = a4
	v60 = Mem0[a8 + 0x00000007:byte]
	a2 = (uint32) v60
	Mem0[a6 + 0x00000002:byte] = a3
	a3 = Mem0[a1 + 0x00000010:word32]
	Mem0[a6 + 0x00000003:byte] = a2
	a4 = 6
	a2 = a14 + 32
	Mem0[a1 + 0x00000020:word32] = a8
	a0 = 0x40203130
	v61 = a0
	a0 = 0x4020EF3E
	call v61 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000010:word32]
	a4 = 6
	a2 = a14
	a0 = 0x40203130
	v62 = a0
	a0 = 0x4020EF4A
	call v62 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000014:word32]
	a2 = Mem0[a1 + 0x00000010:word32]
	a4 = 6
	a0 = 0x40203130
	v63 = a0
	a0 = 0x4020EF56
	call v63 (retsize: 0;)
	a4 = 6
	a3 = Mem0[a1 + 0x00000014:word32]
	a2 = a14 + a4
	a0 = 0x40203130
	v64 = a0
	a0 = 0x4020EF62
	call v64 (retsize: 0;)
	v65 = Mem0[a15 + 0x00000008:uint16]
	a3 = (uint32) v65
	a2 = 3
	a4 = a13
	a0 = 0x4020EF6C
	call fn4030C160 (retsize: 0;)
	a12 = a2
	a8 = Mem0[a1 + 0x00000020:word32]
	branch a2 == a13 l4020EF7A
	// succ:  l4020EF73 l4020EF7A
l4020EF73:
	a3 = a15
	a0 = 0x4020EF78
	call fn4030C384 (retsize: 0;)
	a8 = Mem0[a1 + 0x00000020:word32]
	// succ:  l4020EF7A
l4020EF7A:
	a4 = Mem0[a8 + 0x00000018:word32]
	a2 = a8
	a3 = a12
	a0 = 0x4020EF83
	call a4 (retsize: 0;)
	a2 = a12
	a0 = 0x4020EF88
	call fn4030C0EC (retsize: 0;)
	goto l4020EFBC
	// succ:  l4020EFBC
l4020EF8E:
	a2 = a8
	a3 = a1 + 4
	a0 = 0x4020EF95
	call fn4030AC20 (retsize: 0;)
	goto l4020EFBC
	// succ:  l4020EFBC
l4020EF9B:
	a3 = 0x40209ABC
	v66 = Mem0[a3 + 0x0000002C:uint16]
	a2 = (uint32) v66
	a2 = a2 + 1
	Mem0[a3 + 0x0000002C:word16] = a2
	goto l4020EFBC
	// succ:  l4020EFBC
l4020EFA9:
	a2 = 0x40209ABC
	v19 = Mem0[a2 + 0x00000028:uint16]
	a4 = (uint32) v19
	v20 = Mem0[a2 + 0x0000001E:uint16]
	a3 = (uint32) v20
	a4 = a4 + 1
	a3 = a3 + 1
	Mem0[a2 + 0x00000028:word16] = a4
	Mem0[a2 + 0x0000001E:word16] = a3
	// succ:  l4020EFBC
l4020EFBC:
	a2 = a15 | a15
	a0 = 0x4020EFC2
	call fn4030C0EC (retsize: 0;)
	// succ:  l4020EFC2
l4020EFC2:
	a0 = Mem0[a1 + 0x0000004C:word32]
	a2 = 0x00000000
	a12 = Mem0[a1 + 0x00000048:word32]
	a13 = Mem0[a1 + 0x00000044:word32]
	a14 = Mem0[a1 + 0x00000040:word32]
	a15 = Mem0[a1 + 0x0000003C:word32]
	a1 = a1 + 80
	return
	// succ:  ethernet_input_exit
l4024EE18:
ethernet_input_exit:


// sys_mbox_new
// Return size: 0
void sys_mbox_new()
sys_mbox_new_entry:
	// succ:  l4020EFDC
l4020EFDC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a4 = 0x00000000
	a12 = a2 | a2
	a2 = a3
	a3 = 4
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4020EFF1
	call fn403031E8 (retsize: 0;)
	Mem0[a12:word32] = a2
	branch a2 == 0x00000000 l4020F011
	// succ:  l4020EFF5 l4020F011
l4020EFF5:
	a3 = 0x40209ABC
	a2 = 0
	v8 = Mem0[a3 + 0x000000B4:uint16]
	a4 = (uint32) v8
	v10 = Mem0[a3 + 0x000000B6:uint16]
	a5 = (uint32) v10
	a4 = a4 + 1
	a4 = a4 & 0x0000FFFF
	Mem0[a3 + 0x000000B4:word16] = a4
	branch a5 >=u a4 l4020F014
	// succ:  l4020F00B l4020F014
l4020F00B:
	Mem0[a3 + 0x000000B6:word16] = a4
	goto l4020F014
	// succ:  l4020F014
l4020F011:
	a2 = 0x000000FF
	// succ:  l4020F014
l4020F014:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sys_mbox_new_exit
sys_mbox_new_exit:


// sys_mbox_trypost
// Return size: 0
void sys_mbox_trypost()
sys_mbox_trypost_entry:
	// succ:  l4020F024
l4020F024:
	a1 = fp
	a4 = 0x4020F020
	a1 = a1 - 48
	a6 = 0
	v6 = Mem0[a4 + 0x00000000:byte]
	a5 = (uint32) v6
	Mem0[a1 + 0x00000010:word32] = a3
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1:word32] = a6
	a2 = Mem0[a2 + 0x00000000:word32]
	a3 = a1 + 16
	branch a5 == a6 l4020F04A
	// succ:  l4020F03D l4020F04A
l4020F03D:
	a4 = a1
	a5 = a6
	a0 = 0x4020F044
	call fn40303250 (retsize: 0;)
	a3 = a2 & 0x000000FF
	goto l4020F055
	// succ:  l4020F055
l4020F04A:
	a4 = a5
	a0 = 0x40202DF4
	v10 = a0
	a0 = 0x4020F052
	call v10 (retsize: 0;)
	a3 = a2 & 0x000000FF
	// succ:  l4020F055
l4020F055:
	a2 = 0
	branch a3 == 1 l4020F068
	// succ:  l4020F05A l4020F068
l4020F05A:
	a3 = 0x40209ABC
	a2 = 0x000000FF
	v11 = Mem0[a3 + 0x000000B8:uint16]
	a4 = (uint32) v11
	a4 = a4 + 1
	Mem0[a3 + 0x000000B8:word16] = a4
	// succ:  l4020F068
l4020F068:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 48
	return
	// succ:  sys_mbox_trypost_exit
sys_mbox_trypost_exit:


// sys_arch_mbox_fetch
// Return size: 0
void sys_arch_mbox_fetch()
sys_arch_mbox_fetch_entry:
	// succ:  l4020F070
l4020F070:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000024:word32] = a13
	a13 = a3
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x0000002C:word32] = a0
	a12 = a4
	a14 = a2
	branch a3 != 0x00000000 l4020F087
	// succ:  l4020F084_1 l4020F087
l4020F084_1:
	a13 = a1
	// succ:  l4020F087
l4020F087:
	a0 = 0x4020F08A
	call fn40302980 (retsize: 0;)
	a15 = a2
	branch a12 == 0x00000000 l4020F0BE
	// succ:  l4020F08E l4020F0BE
l4020F08E:
	a3 = 10
	a2 = a12
	a0 = 0x40204388
	v11 = a0
	a0 = 0x4020F098
	call v11 (retsize: 0;)
	a4 = a2
	a2 = Mem0[a14 + 0x00000000:word32]
	a3 = a13
	a5 = 0
	a0 = 0x4020F0A3
	call fn403032D0 (retsize: 0;)
	branch a2 != 1 l4020F0B5
	// succ:  l4020F0A6 l4020F0B5
l4020F0A6:
	a0 = 0x4020F0A9
	call fn40302980 (retsize: 0;)
	a2 = a2 - a15
	a2 = a2 + a2 * 0x00000004
	a2 = a2 << 31
	goto l4020F0E0
	// succ:  l4020F0E0
l4020F0B5:
	a2 = 0
	Mem0[a13:word32] = a2
	a2 = -1
	goto l4020F0E0
	// succ:  l4020F0E0
l4020F0BE:
	a2 = Mem0[a14 + 0x00000000:word32]
	a3 = a13 | a13
	a4 = -1
	a5 = 0x00000000
	a0 = 0x4020F0CC
	call fn403032D0 (retsize: 0;)
	a12 = a2
	branch a2 != 1 l4020F0BE
	// succ:  l4020F0D1 l4020F0BE
l4020F0D1:
	a0 = 0x4020F0D4
	call fn40302980 (retsize: 0;)
	a2 = a2 - a15
	a2 = a2 + a2 * 0x00000004
	a2 = a2 << 31
	branch a2 != 0x00000000 l4020F0E0
	// succ:  l4020F0DD_1 l4020F0E0
l4020F0DD_1:
	a2 = a12
	// succ:  l4020F0E0
l4020F0E0:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  sys_arch_mbox_fetch_exit
sys_arch_mbox_fetch_exit:


// sys_thread_new
// Return size: 0
void sys_thread_new()
sys_thread_new_entry:
	// succ:  l4020F0F0
l4020F0F0:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a8 = a2
	a12 = 0
	a7 = a4
	Mem0[a1:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a12
	a2 = a3
	a4 = a5 & 0x0000FFFF
	a3 = a8
	a5 = a7
	a7 = a1 + 16
	Mem0[a1 + 0x0000002C:word32] = a0
	a0 = 0x4020F110
	call fn40302690 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000010:word32]
	a2 = a2 - 1
	a0 = Mem0[a1 + 0x0000002C:word32]
	branch a2 != 0x00000000 l4020F119
	// succ:  l4020F116_1 l4020F119
l4020F116_1:
	a12 = a3
	// succ:  l4020F119
l4020F119:
	a2 = a12
	a12 = Mem0[a1 + 0x00000028:word32]
	a1 = a1 + 48
	return
	// succ:  sys_thread_new_exit
sys_thread_new_exit:


// sys_arch_protect
// Return size: 0
void sys_arch_protect()
sys_arch_protect_entry:
	// succ:  l4020F124
l4020F124:
	a1 = fp
	a2 = 0x4020F020
	a1 = a1 - 16
	v4 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v4
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a2 != 0x00000000 l4020F138
	// succ:  l4020F132 l4020F138
l4020F132:
	a0 = 0x40202680
	v6 = a0
	a0 = 0x4020F138
	call v6 (retsize: 0;)
	// succ:  l4020F138
l4020F138:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = 1
	a1 = a1 + 16
	return
	// succ:  sys_arch_protect_exit
sys_arch_protect_exit:


// sys_arch_unprotect
// Return size: 0
void sys_arch_unprotect()
sys_arch_unprotect_entry:
	// succ:  l4020F144
l4020F144:
	a1 = fp
	a2 = 0x4020F020
	a1 = a1 - 16
	v4 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v4
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a2 != 0x00000000 l4020F158
	// succ:  l4020F152 l4020F158
l4020F152:
	a0 = 0x40202688
	v6 = a0
	a0 = 0x4020F158
	call v6 (retsize: 0;)
	// succ:  l4020F158
l4020F158:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sys_arch_unprotect_exit
sys_arch_unprotect_exit:


// tcp_receive
// Return size: 0
void tcp_receive()
tcp_receive_entry:
	// succ:  l4020F180
l4020F180:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000020:word32] = a14
	a14 = a2
	a2 = 0x4020F160
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a15
	a4 = 0x4020F164
	v10 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v10
	Mem0[a1 + 0x00000004:word32] = a4
	branch (a2 & 0x00000010) != 0x00000000 l4020F1A5
	// succ:  l4020F19D l4020F1A5
l4020F19D:
	a4 = 0x4020F170
	Mem0[a1 + 0x00000008:word32] = a4
	goto l4020F50D
	// succ:  l4020F50D
l4020F1A5:
	a2 = Mem0[a4 + 0x00000000:word32]
	a3 = Mem0[a14 + 0x00000058:word32]
	a4 = 0x4020F16C
	a6 = a3 - a2
	Mem0[a1:word32] = a4
	v14 = Mem0[a14 + 0x00000064:uint16]
	a7 = (uint32) v14
	a5 = Mem0[a14 + 0x0000005C:word32]
	branch a6 >= 0x00000000 l4020F1D1
	// succ:  l4020F1BB l4020F1D1
l4020F1BB:
	a3 = 0x4020F168
	a6 = Mem0[a4 + 0x00000000:word32]
	a8 = Mem0[a3 + 0x00000000:word32]
	v17 = Mem0[a8 + 0x0000000F:byte]
	a3 = (uint32) v17
	v18 = Mem0[a8 + 0x0000000E:byte]
	a8 = (uint32) v18
	a3 = a3 << 24
	a3 = a3 | a8
	goto l4020F209
	// succ:  l4020F209
l4020F1D1:
	a6 = Mem0[a4 + 0x00000000:word32]
	branch a3 != a2 l4020F1F0
	// succ:  l4020F1D6 l4020F1F0
l4020F1D6:
	a3 = a5 - a6
	branch a3 >= 0x00000000 l4020F1F0
	// succ:  l4020F1DC l4020F1F0
l4020F1DC:
	a3 = 0x4020F168
	a3 = Mem0[a3 + 0x00000000:word32]
	v66 = Mem0[a3 + 0x0000000F:byte]
	a8 = (uint32) v66
	v67 = Mem0[a3 + 0x0000000E:byte]
	a3 = (uint32) v67
	a8 = a8 << 24
	a3 = a8 | a3
	goto l4020F209
	// succ:  l4020F209
l4020F1F0:
	branch a5 != a6 l4020F234
	// succ:  l4020F1F3 l4020F234
l4020F1F3:
	a3 = 0x4020F168
	a6 = a5
	a3 = Mem0[a3 + 0x00000000:word32]
	v74 = Mem0[a3 + 0x0000000F:byte]
	a9 = (uint32) v74
	v75 = Mem0[a3 + 0x0000000E:byte]
	a8 = (uint32) v75
	a3 = a9 << 24
	a3 = a3 | a8
	branch a7 >=u a3 l4020F234
	// succ:  l4020F209 l4020F234
l4020F209:
	v20 = Mem0[a14 + 0x00000066:uint16]
	a8 = (uint32) v20
	Mem0[a14 + 0x00000064:word16] = a3
	branch a8 >=u a3 l4020F215
	v76 = Mem0[a14 + 0x00000066:uint16]
	a8 = (uint32) v76
	Mem0[a14 + 0x00000064:word16] = a3
	branch a8 >=u a3 l4020F215
	// succ:  l4020F212 l4020F215
l4020F212:
	Mem0[a14 + 0x00000066:word16] = a3
	Mem0[a14 + 0x00000066:word16] = a3
	// succ:  l4020F215
l4020F215:
	Mem0[a14 + 0x00000058:word32] = a2
	Mem0[a14 + 0x0000005C:word32] = a6
	v34 = Mem0[a14 + 0x0000009D:byte]
	a2 = (uint32) v34
	branch a3 != 0x00000000 l4020F22D
	// succ:  l4020F220 l4020F22D
l4020F220:
	branch a2 != 0x00000000 l4020F234
	// succ:  l4020F222 l4020F234
l4020F222:
	a2 = 1
	Mem0[a14 + 0x0000009C:byte] = a3
	Mem0[a14 + 0x0000009D:byte] = a2
	goto l4020F234
	// succ:  l4020F234
l4020F22D:
	branch a2 == 0x00000000 l4020F234
	// succ:  l4020F22F l4020F234
l4020F22F:
	a2 = 0
	Mem0[a14 + 0x0000009D:byte] = a2
	// succ:  l4020F234
l4020F234:
	a3 = Mem0[a14 + 0x0000004C:word32]
	a2 = a6 - a3
	branch a2 >= 1 l4020F2A5
	// succ:  l4020F23D l4020F2A5
l4020F23D:
	a4 = 0x4020F170
	a8 = 0
	v35 = Mem0[a4 + 0x00000000:uint16]
	a2 = (uint32) v35
	Mem0[a1 + 0x00000008:word32] = a4
	Mem0[a14 + 0x00000068:word16] = a8
	branch a2 != 0x00000000 l4020F6FE
	// succ:  l4020F24D l4020F6FE
l4020F24D:
	v36 = Mem0[a14 + 0x00000064:uint16]
	a8 = (uint32) v36
	a2 = Mem0[a14 + 0x0000005C:word32]
	a5 = a7 + a5
	a2 = a8 + a2
	branch a2 == a5 l4020F25D
	// succ:  l4020F25A l4020F25D
l4020F25A:
	goto l4020F6FE
	// succ:  l4020F6FE
l4020F25D:
	v40 = Mem0[a14 + 0x00000038:int16]
	a2 = (int32) v40
	branch a2 < 0x00000000 l4020F6FE
	// succ:  l4020F263 l4020F6FE
l4020F263:
	branch a3 == a6 l4020F269
	// succ:  l4020F266 l4020F269
l4020F266:
	goto l4020F6FE
	// succ:  l4020F6FE
l4020F269:
	v41 = Mem0[a14 + 0x0000004B:byte]
	a2 = (uint32) v41
	a3 = a2 + 1
	a3 = a3 & 0x000000FF
	branch a2 >=u a3 l4020F279
	// succ:  l4020F274 l4020F279
l4020F274:
	Mem0[a14 + 0x0000004B:byte] = a3
	a2 = a3
	// succ:  l4020F279
l4020F279:
	branch a2 <u 0x00000004 l4020F294
	// succ:  l4020F27C l4020F294
l4020F27C:
	v42 = Mem0[a14 + 0x00000050:uint16]
	a3 = (uint32) v42
	v43 = Mem0[a14 + 0x0000003A:uint16]
	a2 = (uint32) v43
	a2 = a3 + a2
	a2 = a2 & 0x0000FFFF
	branch a3 <u a2 l4020F28D
	// succ:  l4020F28A l4020F28D
l4020F28A:
	goto l4020F3E8
	// succ:  l4020F3E8
l4020F28D:
	Mem0[a14 + 0x00000050:word16] = a2
	goto l4020F3E8
	// succ:  l4020F3E8
l4020F294:
	branch a2 == 3 l4020F29A
	// succ:  l4020F297 l4020F29A
l4020F297:
	goto l4020F3E8
	// succ:  l4020F3E8
l4020F29A:
	a2 = a14
	a0 = 0x4020F29F
	call fn4030D934 (retsize: 0;)
	goto l4020F3E8
	// succ:  l4020F3E8
l4020F2A5:
	a3 = Mem0[a14 + 0x00000054:word32]
	a3 = a6 - a3
	branch a3 < 1 l4020F2B1
	// succ:  l4020F2AE l4020F2B1
l4020F2AE:
	goto l4020F3DC
	// succ:  l4020F3DC
l4020F2B1:
	v52 = Mem0[a14 + 0x00000022:byte]
	a3 = (uint32) v52
	branch (a3 & 0x00000004) == 0x00000000 l4020F2C5
	// succ:  l4020F2B7 l4020F2C5
l4020F2B7:
	v53 = Mem0[a14 + 0x00000052:uint16]
	a5 = (uint32) v53
	a7 = -5
	a3 = a3 & a7
	Mem0[a14 + 0x00000022:byte] = a3
	Mem0[a14 + 0x00000050:word16] = a5
	// succ:  l4020F2C5
l4020F2C5:
	v55 = Mem0[a14 + 0x00000044:uint16]
	a8 = (uint32) v55
	v56 = Mem0[a14 + 0x0000006A:uint16]
	a7 = (uint32) v56
	v57 = Mem0[a14 + 0x00000046:uint16]
	a5 = (uint32) v57
	a8 = a8 << 16
	a2 = a2 & 0x0000FFFF
	a8 = a8 >> 19
	a3 = 0
	a8 = a8 + a5
	a7 = a2 + a7
	a5 = Mem0[a14 + 0x00000018:word32]
	Mem0[a14 + 0x0000004A:byte] = a3
	Mem0[a14 + 0x00000048:word16] = a8
	Mem0[a14 + 0x00000068:word16] = a2
	Mem0[a14 + 0x0000006A:word16] = a7
	Mem0[a14 + 0x0000004B:byte] = a3
	Mem0[a14 + 0x0000004C:word32] = a6
	branch a5 <u 0x00000004 l4020F329
	// succ:  l4020F2F4 l4020F329
l4020F2F4:
	v58 = Mem0[a14 + 0x00000050:uint16]
	a12 = (uint32) v58
	v59 = Mem0[a14 + 0x00000052:uint16]
	a2 = (uint32) v59
	branch a12 >=u a2 l4020F30C
	// succ:  l4020F2FD l4020F30C
l4020F2FD:
	v60 = Mem0[a14 + 0x0000003A:uint16]
	a2 = (uint32) v60
	a2 = a12 + a2
	a2 = a2 & 0x0000FFFF
	branch a12 >=u a2 l4020F329
	// succ:  l4020F308 l4020F329
l4020F308:
	goto l4020F326
	// succ:  l4020F326
l4020F30C:
	v64 = Mem0[a14 + 0x0000003A:uint16]
	a2 = (uint32) v64
	a3 = a12
	a2 = a2 * a2
	Mem0[a1 + 0x0000000C:word32] = a6
	a0 = 0x40202548
	v65 = a0
	a0 = 0x4020F31C
	call v65 (retsize: 0;)
	a2 = a12 + a2
	a2 = a2 & 0x0000FFFF
	a6 = Mem0[a1 + 0x0000000C:word32]
	branch a12 >=u a2 l4020F329
	// succ:  l4020F326 l4020F329
l4020F326:
	Mem0[a14 + 0x00000050:word16] = a2
	Mem0[a14 + 0x00000050:word16] = a2
	// succ:  l4020F329
l4020F329:
	a15 = Mem0[a14 + 0x00000074:word32]
	branch a15 == 0x00000000 l4020F70E
	// succ:  l4020F32F l4020F70E
l4020F32F:
	a12 = 0x40204510
	// succ:  l4020F372
l4020F372:
	a2 = Mem0[a15 + 0x0000000C:word32]
	v68 = Mem0[a15 + 0x00000008:uint16]
	a7 = (uint32) v68
	v69 = Mem0[a2 + 0x00000005:byte]
	a9 = (uint32) v69
	v70 = Mem0[a2 + 0x00000004:byte]
	a10 = (uint32) v70
	v71 = Mem0[a2 + 0x00000006:byte]
	a8 = (uint32) v71
	v72 = Mem0[a2 + 0x00000007:byte]
	a5 = (uint32) v72
	a9 = a9 << 24
	a9 = a9 | a10
	a8 = a8 << 16
	a8 = a8 | a9
	a5 = a5 << 8
	a5 = a5 | a8
	a10 = a5 >>u 0x00000018 & 0x000000FF
	a8 = a5 << 8
	a9 = a5 & a12
	v73 = Mem0[a2 + 0x0000000D:byte]
	a2 = (uint32) v73
	a8 = a10 | a8
	a9 = a9 << 24
	a5 = a5 >>u 8
	a2 = a2 & 0x00000003
	a8 = a8 | a9
	a5 = a5 & a12
	a3 = 0
	a4 = 1
	a5 = a8 | a5
	branch a2 == 0x00000000 l4020F3BD
	// succ:  l4020F3BA_1 l4020F3BD
l4020F3BA_1:
	a3 = a4
	// succ:  l4020F3BD
l4020F3BD:
	a6 = a5 - a6
	a2 = a7 + a3
	a6 = a6 + a2
	branch a6 >= a4 l4020F3CA
	// succ:  l4020F3C7 l4020F3CA
l4020F3C7:
	goto l4024F336
	// succ:  l4024F336
l4020F3CA:
	goto l4020F706
	// succ:  l4020F706
l4020F3DC:
	a4 = 0x4020F170
	a2 = 0x00000000
	Mem0[a1 + 0x00000008:word32] = a4
	Mem0[a14 + 0x00000068:word16] = a2
	// succ:  l4020F3E8
l4020F3E8:
	a15 = Mem0[a14 + 0x00000070:word32]
	a12 = 0x40204510
	branch a15 != 0x00000000 l4020F439
	// succ:  l4020F3F1 l4020F439
l4020F3F1:
	a2 = Mem0[a14 + 0x0000003C:word32]
	branch a2 != 0x00000000 l4020F4A5
	// succ:  l4020F3F6 l4020F4A5
l4020F3F6:
	goto l4020F50D
	// succ:  l4020F50D
l4020F439:
	a2 = Mem0[a15 + 0x0000000C:word32]
	a4 = Mem0[a1 + 0x00000000:word32]
	v45 = Mem0[a2 + 0x00000005:byte]
	a7 = (uint32) v45
	v46 = Mem0[a2 + 0x00000004:byte]
	a9 = (uint32) v46
	v47 = Mem0[a2 + 0x00000006:byte]
	a6 = (uint32) v47
	v48 = Mem0[a2 + 0x00000007:byte]
	a5 = (uint32) v48
	a7 = a7 << 24
	a7 = a7 | a9
	a6 = a6 << 16
	a6 = a6 | a7
	a5 = a5 << 8
	a5 = a5 | a6
	v49 = Mem0[a2 + 0x0000000D:byte]
	a7 = (uint32) v49
	a6 = a5 >>u 0x00000018 & 0x000000FF
	a2 = a5 << 8
	a9 = a5 & a12
	a6 = a6 | a2
	a9 = a9 << 24
	a5 = a5 >>u 8
	a2 = Mem0[a4 + 0x00000000:word32]
	a5 = a5 & a12
	v50 = Mem0[a15 + 0x00000008:uint16]
	a8 = (uint32) v50
	a6 = a6 | a9
	a7 = a7 & 0x00000003
	a3 = 0
	a4 = 1
	a6 = a6 | a5
	branch a7 == 0x00000000 l4020F489
	// succ:  l4020F486_1 l4020F489
l4020F486_1:
	a3 = a4
	// succ:  l4020F489
l4020F489:
	a6 = a2 - a6
	a5 = a8 + a3
	a5 = a6 - a5
	branch a5 < 0x00000000 l4020F3F1
	// succ:  l4020F494 l4020F3F1
l4020F494:
	a5 = Mem0[a14 + 0x00000054:word32]
	a2 = a2 - a5
	branch a2 >= a4 l4020F4A0
	// succ:  l4020F49D l4020F4A0
l4020F49D:
	goto l4024F3F9
	// succ:  l4024F3F9
l4020F4A0:
	goto l4024F3F1
	// succ:  l4024F3F1
l4020F4A5:
	a4 = Mem0[a1 + 0x00000000:word32]
	a5 = Mem0[a14 + 0x00000040:word32]
	a3 = Mem0[a4 + 0x00000000:word32]
	a3 = a5 - a3
	branch a3 >= 0x00000000 l4020F50D
	// succ:  l4020F4B2 l4020F50D
l4020F4B2:
	a3 = 0x4020B7B8
	v44 = Mem0[a14 + 0x00000044:uint16]
	a5 = (uint32) v44
	a3 = Mem0[a3 + 0x00000000:word32]
	a5 = a5 << 16
	a2 = a3 - a2
	a3 = a5 >> 19
	a3 = a2 - a3
	a3 = a3 & 0x0000FFFF
	a5 = a5 >> 16
	a5 = a3 + a5
	a5 = a5 << 16
	a2 = a3 << 16
	a5 = a5 >> 16
	a2 = a2 >> 16
	Mem0[a14 + 0x00000044:word16] = a5
	branch a2 >= 0x00000000 l4020F4E9
	// succ:  l4020F4E0 l4020F4E9
l4020F4E0:
	a2 = -a3
	a2 = a2 << 16
	a2 = a2 >> 16
	// succ:  l4020F4E9
l4020F4E9:
	v51 = Mem0[a14 + 0x00000046:uint16]
	a3 = (uint32) v51
	a5 = a5 >> 3
	a3 = a3 << 16
	a6 = a3 >> 16
	a3 = a3 >> 18
	a3 = a6 - a3
	a2 = a3 + a2
	a2 = a2 & 0x0000FFFF
	a3 = a2 + a5
	Mem0[a14 + 0x00000046:word16] = a2
	a2 = 0x00000000
	Mem0[a14 + 0x00000048:word16] = a3
	Mem0[a14 + 0x0000003C:word32] = a2
	// succ:  l4020F50D
l4020F50D:
	a4 = Mem0[a1 + 0x00000008:word32]
	v19 = Mem0[a4 + 0x00000000:uint16]
	a2 = (uint32) v19
	branch a2 == 0x00000000 l4020F6D6
	// succ:  l4020F515 l4020F6D6
l4020F515:
	a3 = Mem0[a14 + 0x00000018:word32]
	branch a3 <u 0x00000007 l4020F51D
	// succ:  l4020F51A l4020F51D
l4020F51A:
	goto l4020F6D6
	// succ:  l4020F6D6
l4020F51D:
	a4 = Mem0[a1 + 0x00000004:word32]
	a5 = Mem0[a14 + 0x0000002C:word32]
	a6 = Mem0[a4 + 0x00000000:word32]
	a7 = a5 - a6
	a3 = a7 - 1
	branch a3 < 0x00000000 l4020F5B5
	// succ:  l4020F52B l4020F5B5
l4020F52B:
	a3 = a5 + 1
	a3 = a3 - a6
	a2 = a3 - a2
	branch a2 < 1 l4020F539
	// succ:  l4020F536 l4020F539
l4020F536:
	goto l4020F5B5
	// succ:  l4020F5B5
l4020F539:
	a12 = 0x4020F174
	a3 = a7
	a2 = Mem0[a12 + 0x00000004:word32]
	v24 = Mem0[a2 + 0x0000000A:uint16]
	a5 = (uint32) v24
	branch a5 >= a7 l4020F571
	// succ:  l4020F546 l4020F571
l4020F546:
	v25 = Mem0[a2 + 0x00000008:uint16]
	a6 = (uint32) v25
	a7 = 0
	a6 = a6 - a3
	a6 = a6 & 0x0000FFFF
	// succ:  l4020F551
l4020F551:
	Mem0[a2 + 0x0000000A:word16] = a7
	Mem0[a2 + 0x00000008:word16] = a6
	a2 = Mem0[a2 + 0x00000000:word32]
	a3 = a3 - a5
	v26 = Mem0[a2 + 0x0000000A:uint16]
	a5 = (uint32) v26
	branch a5 < a3 l4020F551
	// succ:  l4020F562 l4020F551
l4020F562:
	a3 = -a3
	a3 = a3 << 16
	a3 = a3 >> 16
	a0 = 0x4020F56E
	call pbuf_header (retsize: 0;)
	goto l4020F57D
	// succ:  l4020F57D
l4020F571:
	a3 = -a7
	a3 = a3 << 16
	a3 = a3 >> 16
	a0 = 0x4020F57D
	call pbuf_header (retsize: 0;)
	// succ:  l4020F57D
l4020F57D:
	a4 = Mem0[a1 + 0x00000004:word32]
	v28 = Mem0[a12 + 0x00000008:uint16]
	a3 = (uint32) v28
	a9 = Mem0[a4 + 0x00000000:word32]
	a6 = Mem0[a14 + 0x0000002C:word32]
	a2 = Mem0[a12 + 0x0000000C:word32]
	a9 = a9 + a3
	a9 = a9 - a6
	a8 = a6 >>u 0x00000008 & 0x000000FF
	a7 = a6 >>u 0x00000010 & 0x000000FF
	a3 = a6 >>u 0x00000018 & 0x000000FF
	Mem0[a2 + 0x00000004:byte] = a6
	Mem0[a2 + 0x00000005:byte] = a8
	Mem0[a2 + 0x00000006:byte] = a7
	Mem0[a2 + 0x00000007:byte] = a3
	Mem0[a12 + 0x00000008:word16] = a9
	Mem0[a4:word32] = a6
	a2 = a6 - a6
	a5 = a6
	branch a2 >= 0x00000000 l4020F5C9
	// succ:  l4020F5B2 l4020F5C9
l4020F5B2:
	goto l4020F6CD
	// succ:  l4020F6CD
l4020F5B5:
	a2 = a6 - a5
	branch a2 >= 0x00000000 l4020F5C9
	// succ:  l4020F5BB l4020F5C9
l4020F5BB:
	v23 = Mem0[a14 + 0x00000022:byte]
	a3 = (uint32) v23
	a2 = 2
	a2 = a3 | a2
	Mem0[a14 + 0x00000022:byte] = a2
	goto l4020F6CD
	// succ:  l4020F6CD
l4020F5C9:
	v27 = Mem0[a14 + 0x00000030:uint16]
	a3 = (uint32) v27
	a2 = 1
	a7 = a2 - a3
	a7 = a7 + a6
	a7 = a7 - a5
	branch a7 < a2 l4020F5DC
	// succ:  l4020F5D9 l4020F5DC
l4020F5D9:
	goto l4020F6CD
	// succ:  l4020F6CD
l4020F5DC:
	branch a6 == a5 l4020F5E2
	// succ:  l4020F5DF l4020F5E2
l4020F5DF:
	goto l4020F6CD
	// succ:  l4020F6CD
l4020F5E2:
	a12 = 0x4020F174
	a5 = 0
	a7 = Mem0[a12 + 0x0000000C:word32]
	v30 = Mem0[a12 + 0x00000008:uint16]
	a9 = (uint32) v30
	v31 = Mem0[a7 + 0x0000000D:byte]
	a8 = (uint32) v31
	v32 = Mem0[a7 + 0x0000000C:byte]
	a6 = (uint32) v32
	a8 = a8 << 24
	a8 = a8 | a6
	a10 = a8 << 24
	a6 = a8 >>u 8
	a6 = a10 | a6
	a6 = a6 & 0x0000FFFF
	a10 = a6 & 0x00000003
	branch a10 == 0x00000000 l4020F60A
	// succ:  l4020F607_1 l4020F60A
l4020F607_1:
	a5 = a2
	// succ:  l4020F60A
l4020F60A:
	a2 = a5 + a9
	a4 = Mem0[a1 + 0x00000008:word32]
	a2 = a2 & 0x0000FFFF
	Mem0[a4:word16] = a2
	branch a3 >=u a2 l4020F670
	// succ:  l4020F617 l4020F670
l4020F617:
	branch (a6 & 0x00000001) == 0x00000000 l4020F63D
	// succ:  l4020F61A l4020F63D
l4020F61A:
	a5 = 0x4020DA1C
	a2 = 62
	a2 = a6 & a2
	a8 = a8 & a5
	a2 = a2 << 24
	a2 = a2 | a8
	a5 = a2 >>u 8
	a6 = a2 << 24
	a6 = a6 | a5
	Mem0[a7 + 0x0000000C:byte] = a2
	Mem0[a7 + 0x0000000D:byte] = a5
	a6 = a6 & 0x0000FFFF
	// succ:  l4020F63D
l4020F63D:
	branch (a6 & 0x00000002) == 0x00000000 l4020F646
	// succ:  l4020F640 l4020F646
l4020F640:
	a3 = a3 - 1
	a3 = a3 & 0x0000FFFF
	// succ:  l4020F646
l4020F646:
	a2 = Mem0[a12 + 0x00000004:word32]
	Mem0[a12 + 0x00000008:word16] = a3
	a0 = 0x4020F64F
	call fn4030C2C8 (retsize: 0;)
	a2 = Mem0[a12 + 0x0000000C:word32]
	v37 = Mem0[a12 + 0x00000008:uint16]
	a3 = (uint32) v37
	v38 = Mem0[a2 + 0x0000000D:byte]
	a6 = (uint32) v38
	a5 = 0x00000001
	a2 = 0
	a6 = a6 & 0x00000003
	branch a6 == 0x00000000 l4020F663
	// succ:  l4020F660_1 l4020F663
l4020F660_1:
	a2 = a5
	// succ:  l4020F663
l4020F663:
	a2 = a2 + a3
	a4 = Mem0[a1 + 0x00000008:word32]
	a2 = a2 & 0x0000FFFF
	v39 = Mem0[a14 + 0x00000030:uint16]
	a3 = (uint32) v39
	Mem0[a4:word16] = a2
	// succ:  l4020F670
l4020F670:
	a4 = Mem0[a1 + 0x00000004:word32]
	a3 = a3 - a2
	a5 = Mem0[a4 + 0x00000000:word32]
	Mem0[a14 + 0x00000030:word16] = a3
	a2 = a2 + a5
	Mem0[a14 + 0x0000002C:word32] = a2
	a2 = a14
	a0 = 0x4020F686
	call fn4030B690 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000004:word32]
	v54 = Mem0[a2 + 0x00000008:uint16]
	a3 = (uint32) v54
	branch a3 == 0x00000000 l4020F696
	// succ:  l4020F68D l4020F696
l4020F68D:
	a3 = 0x4020F178
	Mem0[a3:word32] = a2
	a2 = 0
	Mem0[a12 + 0x00000004:word32] = a2
	// succ:  l4020F696
l4020F696:
	a2 = Mem0[a12 + 0x0000000C:word32]
	v61 = Mem0[a2 + 0x0000000D:byte]
	a2 = (uint32) v61
	branch (a2 & 0x00000001) == 0x00000000 l4020F6AC
	// succ:  l4020F69E l4020F6AC
l4020F69E:
	a2 = 0x4020F17C
	a3 = 32
	v62 = Mem0[a2 + 0x00000000:byte]
	a5 = (uint32) v62
	a3 = a5 | a3
	Mem0[a2:byte] = a3
	// succ:  l4020F6AC
l4020F6AC:
	v63 = Mem0[a14 + 0x00000022:byte]
	a2 = (uint32) v63
	branch (a2 & 0x00000001) == 0x00000000 l4020F6C2
	// succ:  l4020F6B2 l4020F6C2
l4020F6B2:
	a3 = -2
	a2 = a2 & a3
	a3 = 2
	a2 = a2 | a3
	Mem0[a14 + 0x00000022:byte] = a2
	goto l4020F716
	// succ:  l4020F716
l4020F6C2:
	a3 = 1
	a2 = a2 | a3
	Mem0[a14 + 0x00000022:byte] = a2
	goto l4020F716
	// succ:  l4020F716
l4020F6CD:
	a2 = a14
	a0 = 0x4020F6D2
	call fn4030D1E8 (retsize: 0;)
	goto l4020F716
	// succ:  l4020F716
l4020F6D6:
	a4 = Mem0[a1 + 0x00000004:word32]
	a2 = Mem0[a14 + 0x0000002C:word32]
	a3 = Mem0[a4 + 0x00000000:word32]
	a5 = a3 - a2
	branch a5 < 0x00000000 l4020F6F0
	// succ:  l4020F6E2 l4020F6F0
l4020F6E2:
	a3 = a3 + 1
	v21 = Mem0[a14 + 0x00000030:uint16]
	a5 = (uint32) v21
	a2 = a3 - a2
	a2 = a2 - a5
	branch a2 < 1 l4020F716
	// succ:  l4020F6F0 l4020F716
l4020F6F0:
	v22 = Mem0[a14 + 0x00000022:byte]
	a3 = (uint32) v22
	a2 = 2
	a2 = a3 | a2
	Mem0[a14 + 0x00000022:byte] = a2
	goto l4020F716
	// succ:  l4020F716
l4020F6FE:
	a2 = 0
	Mem0[a14 + 0x0000004B:byte] = a2
	goto l4024F3E8
	// succ:  l4024F3E8
l4020F706:
	a2 = 0
	Mem0[a14 + 0x00000038:word16] = a2
	goto l4024F3CF
	// succ:  l4024F3CF
l4020F70E:
	a2 = -1
	Mem0[a14 + 0x00000038:word16] = a2
	goto l4024F3CF
	// succ:  l4024F3CF
l4020F716:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  tcp_receive_exit
l4024F336:
l4024F3CF:
l4024F3E8:
l4024F3F1:
l4024F3F9:
tcp_receive_exit:


// tcp_parseopt$isra$0
// Return size: 0
void tcp_parseopt$isra$0()
tcp_parseopt$isra$0_entry:
	// succ:  l4020F728
l4020F728:
	a1 = fp
	a3 = 0x4020F168
	a6 = Mem0[a3 + 0x00000000:word32]
	v6 = Mem0[a6 + 0x0000000C:byte]
	a7 = (uint32) v6
	a7 = a7 >>u 4
	branch a7 <u 0x00000006 l4020F79C
	// succ:  l4020F736 l4020F79C
l4020F736:
	a7 = a7 - 5
	a7 = a7 << 30
	a6 = a6 + 20
	a7 = a7 & 0x0000FFFF
	a3 = 0x00000000
	a8 = 0x000005B3
	// succ:  l4020F748
l4020F748:
	a5 = a6 + a3
	v10 = Mem0[a5 + 0x00000000:byte]
	a4 = (uint32) v10
	branch a4 == 1 l4020F759
	// succ:  l4020F750 l4020F759
l4020F750:
	branch a4 == 0x00000000 l4020F79C
	// succ:  l4020F753 l4020F79C
l4020F753:
	branch a4 == 2 l4020F761
	// succ:  l4020F756 l4020F761
l4020F756:
	goto l4020F78F
	// succ:  l4020F78F
l4020F759:
	a3 = a3 + 1
	a3 = a3 & 0x0000FFFF
	goto l4020F799
	// succ:  l4020F799
l4020F761:
	v12 = Mem0[a5 + 0x00000001:byte]
	a4 = (uint32) v12
	branch a4 != 4 l4020F79C
	// succ:  l4020F767 l4020F79C
l4020F767:
	a4 = a3 + 3
	branch a4 >= a7 l4020F79C
	// succ:  l4020F76C l4020F79C
l4020F76C:
	v13 = Mem0[a5 + 0x00000002:byte]
	a4 = (uint32) v13
	v14 = Mem0[a5 + 0x00000003:byte]
	a5 = (uint32) v14
	a4 = a4 << 24
	a4 = a5 | a4
	a5 = a4 - 1
	a5 = a5 & 0x0000FFFF
	branch a8 >=u a5 l4020F784
	// succ:  l4020F781 l4020F784
l4020F781:
	a4 = 0x000005B4
	// succ:  l4020F784
l4020F784:
	a3 = a3 + 4
	Mem0[a2:word16] = a4
	a3 = a3 & 0x0000FFFF
	goto l4020F799
	// succ:  l4020F799
l4020F78F:
	v11 = Mem0[a5 + 0x00000001:byte]
	a4 = (uint32) v11
	branch a4 == 0x00000000 l4020F79C
	// succ:  l4020F794 l4020F79C
l4020F794:
	a3 = a4 + a3
	a3 = a3 & 0x0000FFFF
	// succ:  l4020F799
l4020F799:
	branch a3 <u a7 l4020F748
	// succ:  l4020F79C l4020F748
l4020F79C:
	return
	return
	// succ:  tcp_parseopt$isra$0_exit tcp_parseopt$isra$0_exit
tcp_parseopt$isra$0_exit:


// tcp_input
// Return size: 0
void tcp_input()
tcp_input_entry:
	// succ:  l4020F7A8
l4020F7A8:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000038:word32] = a12
	a12 = 0x40209ABC
	Mem0[a1 + 0x00000034:word32] = a13
	a13 = a2
	v6 = Mem0[a12 + 0x00000092:uint16]
	a2 = (uint32) v6
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000030:word32] = a14
	a4 = Mem0[a13 + 0x00000004:word32]
	a2 = a2 + 1
	Mem0[a12 + 0x00000092:word16] = a2
	v12 = Mem0[a4 + 0x00000000:byte]
	a5 = (uint32) v12
	a15 = a3
	a5 = a5 & 0x0000000F
	a5 = a5 << 30
	a6 = a4 + a5
	a3 = -a5
	a5 = 0x4020F7A0
	a2 = a13
	Mem0[a5:word32] = a4
	a4 = 0x4020F168
	Mem0[a4:word32] = a6
	a0 = 0x4020F7E3
	call pbuf_header (retsize: 0;)
	branch a2 != 0x00000000 l4020F854
	// succ:  l4020F7E6 l4020F854
l4020F7E6:
	v15 = Mem0[a13 + 0x00000008:uint16]
	a2 = (uint32) v15
	a3 = 19
	branch a3 >=u a2 l4020F854
	// succ:  l4020F7EE l4020F854
l4020F7EE:
	a14 = 0x4020C8A4
	a3 = a15
	a2 = Mem0[a14 + 0x00000000:word32]
	a0 = 0x4020F7F8
	call ip4_addr_isbroadcast (retsize: 0;)
	branch a2 != 0x00000000 l4020F808
	// succ:  l4020F7FA l4020F808
l4020F7FA:
	a2 = Mem0[a14 + 0x00000000:word32]
	a3 = 0x000000F0
	a3 = a3 & a2
	a2 = 0x000000E0
	branch a3 != a2 l4020F814
	// succ:  l4020F808 l4020F814
l4020F808:
	v16 = Mem0[a12 + 0x000000A0:uint16]
	a2 = (uint32) v16
	a2 = a2 + 1
	Mem0[a12 + 0x000000A0:word16] = a2
	goto l402101A8
	// succ:  l402101A8
l4020F814:
	v19 = Mem0[a13 + 0x00000008:uint16]
	a6 = (uint32) v19
	a3 = 0x4020C8A8
	a2 = a13 | a13
	a4 = a14 | a14
	a5 = 0x00000006
	a0 = 0x4020F826
	call fn4030E1D4 (retsize: 0;)
	branch a2 == 0x00000000 l4020F834
	// succ:  l4020F828 l4020F834
l4020F828:
	v20 = Mem0[a12 + 0x00000098:uint16]
	a2 = (uint32) v20
	a2 = a2 + 1
	Mem0[a12 + 0x00000098:word16] = a2
	goto l402101A8
	// succ:  l402101A8
l4020F834:
	a5 = 0x4020F168
	a2 = a13 | a13
	a3 = Mem0[a5 + 0x00000000:word32]
	v21 = Mem0[a3 + 0x0000000C:byte]
	a3 = (uint32) v21
	a3 = a3 >>u 4
	a3 = a3 << 14
	a3 = -a3
	a3 = a3 >> 16
	a0 = 0x4020F84F
	call pbuf_header (retsize: 0;)
	Mem0[a1 + 0x00000008:word32] = a2
	branch a2 == 0x00000000 l4020F860
	// succ:  l4020F854 l4020F860
l4020F854:
	v17 = Mem0[a12 + 0x0000009A:uint16]
	a2 = (uint32) v17
	a2 = a2 + 1
	Mem0[a12 + 0x0000009A:word16] = a2
	v22 = Mem0[a12 + 0x0000009A:uint16]
	a2 = (uint32) v22
	a2 = a2 + 1
	Mem0[a12 + 0x0000009A:word16] = a2
	goto l402101A8
	// succ:  l402101A8
l4020F860:
	a6 = 0x4020F168
	a4 = Mem0[a6 + 0x00000000:word32]
	v24 = Mem0[a4 + 0x00000005:byte]
	a11 = (uint32) v24
	v25 = Mem0[a4 + 0x00000004:byte]
	a3 = (uint32) v25
	v27 = Mem0[a4 + 0x00000009:byte]
	a8 = (uint32) v27
	v28 = Mem0[a4 + 0x00000006:byte]
	a15 = (uint32) v28
	v29 = Mem0[a4 + 0x00000008:byte]
	a2 = (uint32) v29
	v31 = Mem0[a4 + 0x0000000A:byte]
	a9 = (uint32) v31
	v33 = Mem0[a4 + 0x00000007:byte]
	a10 = (uint32) v33
	a11 = a11 << 24
	v35 = Mem0[a4 + 0x0000000B:byte]
	a7 = (uint32) v35
	a11 = a11 | a3
	a15 = a15 << 16
	a8 = a8 << 24
	a11 = a15 | a11
	a8 = a8 | a2
	a9 = a9 << 16
	a10 = a10 << 8
	a10 = a10 | a11
	v36 = Mem0[a4 + 0x00000001:byte]
	a5 = (uint32) v36
	a8 = a9 | a8
	a7 = a7 << 8
	a7 = a7 | a8
	a11 = a10 >>u 0x00000018 & 0x000000FF
	Mem0[a1 + 0x00000004:word32] = a5
	Mem0[a1 + 0x00000018:word32] = a11
	a11 = a7 << 8
	a9 = Mem0[a1 + 0x00000004:word32]
	v37 = Mem0[a4 + 0x0000000F:byte]
	a6 = (uint32) v37
	Mem0[a1 + 0x00000004:word32] = a11
	a11 = 0x40204510
	Mem0[a1:word32] = a6
	a11 = a7 & a11
	v38 = Mem0[a4 + 0x00000000:byte]
	a3 = (uint32) v38
	a6 = a9 << 24
	Mem0[a1 + 0x0000000C:word32] = a11
	a11 = Mem0[a1 + 0x00000000:word32]
	a3 = a6 | a3
	a15 = a11 << 24
	v39 = Mem0[a4 + 0x00000003:byte]
	a5 = (uint32) v39
	a11 = a3 << 24
	a3 = a3 >>u 8
	Mem0[a1 + 0x00000010:word32] = a3
	v40 = Mem0[a4 + 0x00000002:byte]
	a2 = (uint32) v40
	a3 = Mem0[a1 + 0x00000018:word32]
	a5 = a5 << 24
	a9 = a10 << 8
	a2 = a5 | a2
	a9 = a3 | a9
	a5 = 0x40204510
	a3 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a1 + 0x00000018:word32] = a9
	a9 = Mem0[a1 + 0x00000004:word32]
	a6 = a10 & a5
	Mem0[a1:word32] = a11
	a5 = a7 >>u 0x00000018 & 0x000000FF
	a11 = a3 << 24
	a5 = a5 | a9
	a3 = Mem0[a1 + 0x00000010:word32]
	a9 = Mem0[a1 + 0x00000000:word32]
	v41 = Mem0[a4 + 0x0000000E:byte]
	a8 = (uint32) v41
	a9 = a9 | a3
	Mem0[a1 + 0x00000004:word32] = a9
	a3 = 0x40204510
	a7 = a7 >>u 8
	a8 = a15 | a8
	a9 = Mem0[a1 + 0x00000018:word32]
	a15 = a2 << 24
	a5 = a5 | a11
	a7 = a7 & a3
	a2 = a2 >>u 8
	a2 = a15 | a2
	a7 = a5 | a7
	a6 = a6 << 24
	a10 = a10 >>u 8
	Mem0[a1:word32] = a7
	a6 = a9 | a6
	a11 = a2 & 0x0000FFFF
	a10 = a10 & a3
	a10 = a6 | a10
	a3 = Mem0[a1 + 0x00000000:word32]
	a6 = a11 >>u 8
	a5 = Mem0[a1 + 0x00000004:word32]
	Mem0[a1 + 0x00000004:word32] = a6
	a6 = Mem0[a1 + 0x00000000:word32]
	a9 = a8 << 24
	a3 = a3 >>u 0x00000008 & 0x000000FF
	a8 = a8 >>u 8
	a7 = a5 & 0x0000FFFF
	a2 = a9 | a8
	Mem0[a1 + 0x00000010:word32] = a3
	a5 = a6 >>u 0x00000010 & 0x000000FF
	a3 = a6 >>u 0x00000018 & 0x000000FF
	a9 = a10 >>u 0x00000008 & 0x000000FF
	a6 = Mem0[a1 + 0x00000004:word32]
	Mem0[a1 + 0x0000000C:word32] = a9
	Mem0[a4 + 0x00000003:byte] = a6
	a6 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a4 + 0x0000000B:byte] = a3
	Mem0[a4 + 0x00000005:byte] = a6
	a3 = 0x4020F16C
	a6 = Mem0[a1 + 0x00000000:word32]
	a2 = a2 & 0x0000FFFF
	a9 = a10 >>u 0x00000010 & 0x000000FF
	Mem0[a3:word32] = a6
	Mem0[a4 + 0x00000006:byte] = a9
	Mem0[a4 + 0x0000000E:byte] = a2
	a9 = 0x4020F164
	a2 = a2 >>u 8
	v42 = Mem0[a4 + 0x0000000D:byte]
	a3 = (uint32) v42
	Mem0[a4 + 0x0000000F:byte] = a2
	v43 = Mem0[a4 + 0x0000000C:byte]
	a2 = (uint32) v43
	Mem0[a9:word32] = a10
	a3 = a3 << 24
	a9 = Mem0[a1 + 0x00000010:word32]
	a8 = a10 >>u 0x00000018 & 0x000000FF
	a2 = a3 | a2
	a15 = a7 >>u 8
	a2 = a2 >>u 8
	Mem0[a4 + 0x00000007:byte] = a8
	Mem0[a4 + 0x00000008:byte] = a6
	Mem0[a4 + 0x00000009:byte] = a9
	Mem0[a4 + 0x0000000A:byte] = a5
	Mem0[a4:byte] = a7
	Mem0[a4 + 0x00000001:byte] = a15
	Mem0[a4 + 0x00000002:byte] = a11
	Mem0[a4 + 0x00000004:byte] = a10
	Mem0[a1 + 0x0000000C:word32] = a2
	a8 = a2 & 0x000000FF
	a5 = Mem0[a1 + 0x00000008:word32]
	a3 = a8 & 0x00000003
	a2 = 1
	v44 = Mem0[a13 + 0x00000008:uint16]
	a9 = (uint32) v44
	branch a3 == 0x00000000 l4020F9D0
	// succ:  l4020F9CD_1 l4020F9D0
l4020F9CD_1:
	a5 = a2
	// succ:  l4020F9D0
l4020F9D0:
	a3 = a9 + a5
	a3 = a3 & 0x0000FFFF
	a6 = 0x4020B7C0
	a5 = 0x4020F160
	Mem0[a1 + 0x00000004:word32] = a3
	a2 = a8 & 0x0000003F
	a3 = Mem0[a6 + 0x00000000:word32]
	Mem0[a5:byte] = a2
	a6 = 0x4020F170
	a5 = Mem0[a1 + 0x00000004:word32]
	Mem0[a6:word16] = a5
	branch a3 != 0x00000000 l4020F9F2
	// succ:  l4020F9EF l4020F9F2
l4020F9EF:
	goto l402101DC
	// succ:  l402101DC
l4020F9F2:
	a6 = 0x4020C8A8
	a2 = Mem0[a14 + 0x00000000:word32]
	a5 = Mem0[a6 + 0x00000000:word32]
	Mem0[a1 + 0x00000010:word32] = a2
	a6 = Mem0[a1 + 0x00000008:word32]
	a15 = a3
	Mem0[a1 + 0x00000008:word32] = a9
	v45 = Mem0[a15 + 0x00000020:uint16]
	a2 = (uint32) v45
	branch a2 != a7 l4020FA2C
	// succ:  l4020FA07 l4020FA2C
l4020FA07:
	v46 = Mem0[a15 + 0x0000001E:uint16]
	a2 = (uint32) v46
	branch a2 != a11 l4020FA2C
	// succ:  l4020FA0D l4020FA2C
l4020FA0D:
	a2 = Mem0[a15 + 0x00000004:word32]
	branch a2 != a5 l4020FA2C
	// succ:  l4020FA12 l4020FA2C
l4020FA12:
	a9 = Mem0[a15 + 0x00000000:word32]
	a2 = Mem0[a1 + 0x00000010:word32]
	branch a9 != a2 l4020FA2C
	// succ:  l4020FA19 l4020FA2C
l4020FA19:
	a9 = Mem0[a1 + 0x00000008:word32]
	branch a6 == 0x00000000 l402101B8
	// succ:  l4020FA1E l402101B8
l4020FA1E:
	a2 = Mem0[a15 + 0x0000000C:word32]
	a5 = 0x4020B7C0
	Mem0[a6 + 0x0000000C:word32] = a2
	Mem0[a5:word32] = a15
	Mem0[a15 + 0x0000000C:word32] = a3
	goto l402101B8
	// succ:  l402101B8
l4020FA2C:
	a2 = Mem0[a15 + 0x0000000C:word32]
	branch a2 == 0x00000000 l402101DC
	// succ:  l4020FA31 l402101DC
l4020FA31:
	a6 = a15
	a15 = a2
	goto l4024FA01
	// succ:  l4024FA01
l4020FA89:
	a2 = a13
	a0 = 0x4020FA8E
	call fn4030C0EC (retsize: 0;)
	goto l40210228
	// succ:  l40210228
l4020FA99:
	a9 = 0x4020BB38
	a15 = Mem0[a9 + 0x00000000:word32]
	branch a15 == 0x00000000 l402101F1
	// succ:  l4020FAA1 l402101F1
l4020FAA1:
	a3 = 0
	a9 = Mem0[a14 + 0x00000000:word32]
	a2 = a15
	a6 = a3
	a5 = a3
	v47 = Mem0[a2 + 0x0000001E:uint16]
	a4 = (uint32) v47
	branch a4 != a11 l4020FABC
	// succ:  l4020FAB1 l4020FABC
l4020FAB1:
	a4 = Mem0[a2 + 0x00000000:word32]
	branch a4 == a9 l4020FAC8
	// succ:  l4020FAB6 l4020FAC8
l4020FAB6:
	branch a4 != 0x00000000 l4020FAB9
	// succ:  l4020FAB6_1 l4020FAB9
l4020FAB6_1:
	a3 = a2
	// succ:  l4020FAB9
l4020FAB9:
	branch a4 != 0x00000000 l4020FABC
	// succ:  l4020FAB9_2 l4020FABC
l4020FAB9_2:
	a6 = a5
	// succ:  l4020FABC
l4020FABC:
	a4 = Mem0[a2 + 0x0000000C:word32]
	branch a4 == 0x00000000 l402101EE
	// succ:  l4020FAC1 l402101EE
l4020FAC1:
	a5 = a2
	a2 = a4
	goto l4024FAAB
	// succ:  l4024FAAB
l4020FAC8:
	a3 = a2
	a6 = a5
	// succ:  l4020FACC
l4020FACC:
	branch a6 == 0x00000000 l4020FADC
	// succ:  l4020FACF l4020FADC
l4020FACF:
	a2 = Mem0[a3 + 0x0000000C:word32]
	a4 = 0x4020BB38
	Mem0[a6 + 0x0000000C:word32] = a2
	Mem0[a4:word32] = a3
	Mem0[a3 + 0x0000000C:word32] = a15
	// succ:  l4020FADC
l4020FADC:
	branch (a8 & 0x00000004) != 0x00000000 l4020FA89
	// succ:  l4020FADF l4020FA89
l4020FADF:
	a15 = 16
	a5 = a8 & a15
	Mem0[a1 + 0x00000008:word32] = a5
	branch a5 == 0x00000000 l4020FAFC
	// succ:  l4020FAE8 l4020FAFC
l4020FAE8:
	a6 = Mem0[a1 + 0x00000004:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	a5 = 0x4020C8A8
	a3 = a6 + a10
	a4 = a14
	a6 = a11
	a0 = 0x4020FAF8
	call fn4030D6F8 (retsize: 0;)
	goto l4024FA89
	// succ:  l4024FA89
l4020FAFC:
	branch (a8 & 0x00000002) == 0x00000000 l4020FA89
	// succ:  l4020FAFF l4020FA89
l4020FAFF:
	v48 = Mem0[a3 + 0x0000001C:byte]
	a2 = (uint32) v48
	Mem0[a1 + 0x00000014:word32] = a3
	a0 = 0x4020FB08
	call fn4030BF94 (retsize: 0;)
	a15 = a2 | a2
	a3 = Mem0[a1 + 0x00000014:word32]
	branch a2 != 0x00000000 l4020FB1C
	// succ:  l4020FB10 l4020FB1C
l4020FB10:
	v49 = Mem0[a12 + 0x0000009C:uint16]
	a2 = (uint32) v49
	a2 = a2 + 1
	Mem0[a12 + 0x0000009C:word16] = a2
	goto l4024FA89
	// succ:  l4024FA89
l4020FB1C:
	a7 = 0x4020F168
	a9 = 0x4020F164
	a5 = Mem0[a7 + 0x00000000:word32]
	a11 = Mem0[a14 + 0x00000000:word32]
	v50 = Mem0[a5 + 0x00000001:byte]
	a10 = (uint32) v50
	a2 = Mem0[a9 + 0x00000000:word32]
	a14 = 0x4020C8A8
	v51 = Mem0[a5 + 0x0000000F:byte]
	a9 = (uint32) v51
	v52 = Mem0[a5 + 0x00000000:byte]
	a7 = (uint32) v52
	v53 = Mem0[a5 + 0x0000000E:byte]
	a8 = (uint32) v53
	v54 = Mem0[a3 + 0x0000001E:uint16]
	a6 = (uint32) v54
	a5 = Mem0[a3 + 0x00000010:word32]
	a4 = Mem0[a3 + 0x00000014:word32]
	a10 = a10 << 24
	a12 = Mem0[a14 + 0x00000000:word32]
	a9 = a9 << 24
	a8 = a9 | a8
	a7 = a10 | a7
	a9 = a2 + 1
	Mem0[a15 + 0x0000001E:word16] = a6
	a2 = a2 - 1
	a6 = 3
	Mem0[a15:word32] = a11
	Mem0[a15 + 0x00000020:word16] = a7
	Mem0[a15 + 0x00000018:word32] = a6
	Mem0[a15 + 0x0000002C:word32] = a9
	Mem0[a15 + 0x00000034:word32] = a9
	Mem0[a15 + 0x00000064:word16] = a8
	Mem0[a15 + 0x00000066:word16] = a8
	Mem0[a15 + 0x00000052:word16] = a8
	Mem0[a15 + 0x00000058:word32] = a2
	Mem0[a15 + 0x00000014:word32] = a4
	Mem0[a15 + 0x00000004:word32] = a12
	Mem0[a15 + 0x00000010:word32] = a5
	v55 = Mem0[a3 + 0x00000008:byte]
	a5 = (uint32) v55
	a3 = 0x4020B7C0
	a4 = 0x4020B7C0
	a2 = Mem0[a3 + 0x00000000:word32]
	a3 = 0xFFFFFF8C
	a3 = a5 & a3
	Mem0[a15 + 0x00000008:byte] = a3
	Mem0[a15 + 0x0000000C:word32] = a2
	Mem0[a4:word32] = a15
	a0 = 0x4020FB90
	call fn4030C690 (retsize: 0;)
	a3 = 0x4020B7D0
	a5 = 1
	a2 = a15 + 58
	Mem0[a3:byte] = a5
	a0 = 0x4020FB9E
	call fn4030F728 (retsize: 0;)
	v56 = Mem0[a15 + 0x0000003A:uint16]
	a2 = (uint32) v56
	a3 = a15 + 4
	a0 = 0x4020FBA6
	call fn4030C0B8 (retsize: 0;)
	Mem0[a15 + 0x0000003A:word16] = a2
	a3 = 18
	a2 = a15
	a0 = 0x4020FBB0
	call fn4030D098 (retsize: 0;)
	a2 = a2 & 0x000000FF
	branch a2 == 0x00000000 l4020FBC0
	// succ:  l4020FBB5 l4020FBC0
l4020FBB5:
	a3 = Mem0[a1 + 0x00000008:word32]
	a2 = a15
	a0 = 0x4020FBBC
	call fn4030BE74 (retsize: 0;)
	goto l4024FA89
	// succ:  l4024FA89
l4020FBC0:
	a2 = a15
	a0 = 0x4020FBC5
	call fn4030D27C (retsize: 0;)
	goto l4024FA89
	// succ:  l4024FA89
l402101A8:
	v18 = Mem0[a12 + 0x00000096:uint16]
	a3 = (uint32) v18
	a2 = a13
	a3 = a3 + 1
	Mem0[a12 + 0x00000096:word16] = a3
	a0 = 0x402101B5
	call fn4030C0EC (retsize: 0;)
	goto l40210228
	// succ:  l40210228
l402101B8:
	a5 = 0x4020F174
	a6 = 0x4020F178
	a7 = 0x4020F17C
	a2 = 0
	Mem0[a5:word32] = a2
	Mem0[a5 + 0x00000008:word16] = a9
	Mem0[a5 + 0x00000004:word32] = a13
	Mem0[a5 + 0x0000000C:word32] = a4
	Mem0[a6:word32] = a2
	Mem0[a7:byte] = a2
	branch (a8 & 0x00000008) == 0x00000000 l402101D7
	// succ:  l402101D4 l402101D7
l402101D4:
	goto l4024FBC8
	// succ:  l4024FBC8
l402101D7:
	goto l4024FBD4
	// succ:  l4024FBD4
l402101DC:
	a2 = 0x4020B7C4
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 == 0x00000000 l4020FA99
	// succ:  l402101E4 l4020FA99
l402101E4:
	a9 = 0x4020C8A8
	a5 = Mem0[a14 + 0x00000000:word32]
	a4 = Mem0[a9 + 0x00000000:word32]
	goto l4024FA38
	// succ:  l4024FA38
l402101EE:
	branch a3 != 0x00000000 l4020FACC
	// succ:  l402101F1 l4020FACC
l402101F1:
	a2 = Mem0[a1 + 0x0000000C:word32]
	branch (a2 & 0x00000004) == 0x00000000 l402101F9
	a2 = Mem0[a1 + 0x0000000C:word32]
	branch (a2 & 0x00000004) == 0x00000000 l402101F9
	// succ:  l402101F6 l402101F9
l402101F6:
	goto l4024FA89
	// succ:  l4024FA89
l402101F9:
	goto l40250184
	// succ:  l40250184
l40210228:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  tcp_input_exit
l4024FA01:
l4024FA38:
l4024FA89:
l4024FAAB:
l4024FBC8:
l4024FBD4:
l40250184:
tcp_input_exit:


// raw_input
// Return size: 0
void raw_input()
raw_input_entry:
	// succ:  l4021023C
l4021023C:
	a1 = fp
	a3 = 0x40210238
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	a12 = Mem0[a3 + 0x00000000:word32]
	a13 = a2
	a2 = Mem0[a2 + 0x00000004:word32]
	Mem0[a1 + 0x0000000C:word32] = a15
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a14
	a15 = 0
	v10 = Mem0[a2 + 0x00000009:byte]
	a14 = (uint32) v10
	branch a12 != a15 l40210260
	// succ:  l4021025A l40210260
l4021025A:
	a2 = 0
	goto l402102A4
	// succ:  l402102A4
l40210260:
	v11 = Mem0[a12 + 0x00000010:byte]
	a3 = (uint32) v11
	branch a3 != a14 l40210296
	// succ:  l40210266 l40210296
l40210266:
	a8 = Mem0[a12 + 0x00000000:word32]
	a3 = a12
	a4 = a13
	a5 = 0x4020C8A8
	branch a8 == 0x00000000 l40210279
	// succ:  l40210271 l40210279
l40210271:
	a6 = 0x4020C8A4
	a2 = Mem0[a6 + 0x00000000:word32]
	branch a8 != a2 l40210296
	// succ:  l40210279 l40210296
l40210279:
	a8 = Mem0[a12 + 0x00000014:word32]
	branch a8 == 0x00000000 l40210296
	// succ:  l4021027D l40210296
l4021027D:
	a2 = Mem0[a12 + 0x00000018:word32]
	a0 = 0x40210282
	call a8 (retsize: 0;)
	branch a2 == 0x00000000 l40210296
	// succ:  l40210284 l40210296
l40210284:
	branch a15 == 0x00000000 l402102A2
	// succ:  l40210286 l402102A2
l40210286:
	a4 = 0x40210238
	a3 = Mem0[a12 + 0x0000000C:word32]
	a2 = Mem0[a4 + 0x00000000:word32]
	Mem0[a15 + 0x0000000C:word32] = a3
	Mem0[a12 + 0x0000000C:word32] = a2
	Mem0[a4:word32] = a12
	goto l402102A2
	// succ:  l402102A2
l40210296:
	a3 = Mem0[a12 + 0x0000000C:word32]
	a15 = a12
	branch a3 == 0x00000000 l4021025A
	// succ:  l4021029D l4021025A
l4021029D:
	a12 = a3
	goto l40250260
	// succ:  l40250260
l402102A2:
	a2 = 1
	// succ:  l402102A4
l402102A4:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  raw_input_exit
l40250260:
raw_input_exit:


// ip_frag
// Return size: 0
void ip_frag()
ip_frag_entry:
	// succ:  l402102B4
l402102B4:
	a1 = fp
	a1 = a1 - 80
	Mem0[a1 + 0x00000010:word32] = a2
	a2 = Mem0[a2 + 0x00000004:word32]
	Mem0[a1 + 0x0000003C:word32] = a15
	Mem0[a1 + 0x00000014:word32] = a2
	Mem0[a1 + 0x0000004C:word32] = a0
	Mem0[a1 + 0x00000048:word32] = a12
	Mem0[a1 + 0x00000044:word32] = a13
	Mem0[a1 + 0x00000040:word32] = a14
	a5 = Mem0[a1 + 0x00000014:word32]
	Mem0[a1 + 0x0000000C:word32] = a3
	v11 = Mem0[a2 + 0x00000007:byte]
	a2 = (uint32) v11
	v12 = Mem0[a5 + 0x00000006:byte]
	a3 = (uint32) v12
	a5 = Mem0[a1 + 0x0000000C:word32]
	a2 = a2 << 24
	a2 = a2 | a3
	v13 = Mem0[a5 + 0x00000026:uint16]
	a3 = (uint32) v13
	a5 = Mem0[a1 + 0x00000010:word32]
	Mem0[a1 + 0x00000028:word32] = a4
	v16 = Mem0[a5 + 0x00000008:uint16]
	a6 = (uint32) v16
	a5 = a2 << 24
	a2 = a2 >>u 8
	a5 = a5 | a2
	a5 = a5 & 0x0000FFFF
	a4 = a5 & 0x00001FFF
	a2 = a3 - 20
	a7 = a3 - 13
	Mem0[a1 + 0x00000004:word32] = a4
	a4 = 0x402044E8
	branch a2 >= 0x00000000 l40210304
	// succ:  l40210301_1 l40210304
l40210301_1:
	a2 = a7
	// succ:  l40210304
l40210304:
	a6 = a6 - 20
	a5 = a5 & a4
	a2 = a2 >>u 0x00000003 & 0x0000FFFF
	a15 = a6 & 0x0000FFFF
	Mem0[a1 + 0x0000001C:word32] = a5
	Mem0[a1 + 0x00000018:word32] = a2
	branch a15 != 0x00000000 l4021031D
	// succ:  l40210316 l4021031D
l40210316:
	a2 = 0
	goto l40210418
	// succ:  l40210418
l4021031D:
	a5 = Mem0[a1 + 0x00000018:word32]
	a3 = a3 - 19
	a2 = a5 << 29
	a2 = a2 & 0x0000FFFF
	Mem0[a1 + 0x00000020:word32] = a2
	a2 = 20
	Mem0[a1 + 0x00000024:word32] = a3
	Mem0[a1:word32] = a2
	// succ:  l40210331
l40210331:
	a3 = Mem0[a1 + 0x00000004:word32]
	a5 = Mem0[a1 + 0x0000001C:word32]
	a14 = a3 & 0x00001FFF
	a14 = a5 | a14
	a5 = 0x402044E8
	Mem0[a1 + 0x00000008:word32] = a15
	a3 = a14 | a5
	a5 = Mem0[a1 + 0x00000024:word32]
	a4 = 0
	a2 = 1
	a13 = a15
	branch a15 < a5 l40210355
	// succ:  l4021034E l40210355
l4021034E:
	a13 = Mem0[a1 + 0x00000020:word32]
	a14 = a3 & 0x0000FFFF
	Mem0[a1 + 0x00000008:word32] = a13
	// succ:  l40210355
l40210355:
	a3 = a13
	a0 = 0x4021035A
	call fn4030C160 (retsize: 0;)
	a12 = a2
	a5 = Mem0[a1 + 0x00000000:word32]
	a4 = a13
	a2 = Mem0[a1 + 0x00000010:word32]
	branch a12 == 0x00000000 l40210415
	// succ:  l40210365 l40210415
l40210365:
	a3 = Mem0[a12 + 0x00000004:word32]
	a0 = 0x4021036B
	call fn4030C3F8 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a4 = a2 + a3
	a4 = a4 & 0x0000FFFF
	a3 = 20
	a2 = a12
	Mem0[a1:word32] = a4
	a0 = 0x4021037B
	call pbuf_header (retsize: 0;)
	a5 = a2
	a4 = 20
	a3 = Mem0[a1 + 0x00000014:word32]
	branch a2 == 0x00000000 l4021038E
	// succ:  l40210383 l4021038E
l40210383:
	a2 = a12
	a0 = 0x40210388
	call fn4030C0EC (retsize: 0;)
	a2 = 0x000000FF
	goto l40210418
	// succ:  l40210418
l4021038E:
	a2 = Mem0[a12 + 0x00000004:word32]
	a13 = a13 + 20
	Mem0[a1 + 0x0000002C:word32] = a5
	a0 = 0x40203130
	v18 = a0
	a0 = 0x4021039B
	call v18 (retsize: 0;)
	a3 = a14 << 24
	a2 = a13 >>u 0x00000008 & 0x000000FF
	a14 = a14 >>u 8
	a13 = a13 << 24
	a14 = a3 | a14
	a2 = a2 | a13
	a5 = Mem0[a1 + 0x0000002C:word32]
	a13 = Mem0[a12 + 0x00000004:word32]
	a2 = a2 & 0x0000FFFF
	a14 = a14 & 0x0000FFFF
	a4 = a2 >>u 8
	a7 = a14 >>u 8
	a3 = 20
	Mem0[a13 + 0x00000007:byte] = a7
	Mem0[a13 + 0x00000002:byte] = a2
	Mem0[a13 + 0x00000003:byte] = a4
	Mem0[a13 + 0x0000000A:byte] = a5
	Mem0[a13 + 0x0000000B:byte] = a5
	Mem0[a13 + 0x00000006:byte] = a14
	a2 = a13
	a0 = 0x402103D6
	call fn4030E29C (retsize: 0;)
	a4 = Mem0[a1 + 0x0000000C:word32]
	a7 = a2 >>u 0x00000008 & 0x0000FFFF
	a5 = Mem0[a4 + 0x00000014:word32]
	a4 = Mem0[a1 + 0x00000028:word32]
	Mem0[a13 + 0x0000000A:byte] = a2
	a2 = Mem0[a1 + 0x0000000C:word32]
	a3 = a12
	Mem0[a13 + 0x0000000B:byte] = a7
	a0 = 0x402103EC
	call a5 (retsize: 0;)
	a5 = 0x40209ABC
	a2 = a12
	v19 = Mem0[a5 + 0x00000030:uint16]
	a3 = (uint32) v19
	a3 = a3 + 1
	Mem0[a5 + 0x00000030:word16] = a3
	a0 = 0x402103FC
	call fn4030C0EC (retsize: 0;)
	a2 = Mem0[a1 + 0x00000008:word32]
	a3 = Mem0[a1 + 0x00000004:word32]
	a4 = Mem0[a1 + 0x00000018:word32]
	a6 = a15 - a2
	a2 = a3 + a4
	a2 = a2 & 0x0000FFFF
	a15 = a6 & 0x0000FFFF
	Mem0[a1 + 0x00000004:word32] = a2
	branch a15 != 0x00000000 l40210331
	// succ:  l40210412 l40210331
l40210412:
	goto l40250316
	// succ:  l40250316
l40210415:
	a2 = 0x000000FF
	// succ:  l40210418
l40210418:
	a0 = Mem0[a1 + 0x0000004C:word32]
	a12 = Mem0[a1 + 0x00000048:word32]
	a13 = Mem0[a1 + 0x00000044:word32]
	a14 = Mem0[a1 + 0x00000040:word32]
	a15 = Mem0[a1 + 0x0000003C:word32]
	a1 = a1 + 80
	return
	// succ:  ip_frag_exit
l40250316:
ip_frag_exit:


// _write_r
// Return size: 0
void _write_r()
_write_r_entry:
	// succ:  l4021042C
l4021042C:
	a1 = fp
	a6 = Mem0[a2 + 0x00000008:word32]
	v5 = Mem0[a6 + 0x0000000E:int16]
	a6 = (int32) v5
	branch a6 != a3 l4021043D
	// succ:  l40210434 l4021043D
l40210434:
	a10 = a4 + a5
	branch a5 >= 1 l40210445
	// succ:  l40210439 l40210445
l40210439:
	a2 = a5
	return
	// succ:  _write_r_exit
l4021043D:
	a3 = 9
	Mem0[a2:word32] = a3
	a2 = -1
	return
	// succ:  _write_r_exit
l40210445:
	a2 = 0x40202544
	a9 = 0x0000000D
	a6 = 0x0000007F
	a8 = a2 | a2
	// succ:  l40210451
l40210451:
	v12 = Mem0[a4 + 0x00000000:byte]
	a3 = (uint32) v12
	branch a3 == a9 l4021048C
	// succ:  l40210457 l4021048C
l40210457:
	a11 = a3
	a7 = a2
	branch a3 != 10 l40210478
	// succ:  l4021045E l40210478
l4021045E:
	a7 = a8 | a8
	// succ:  l40210461
l40210461:
	a3 = Mem0[a8 + 0x0000001C:word32]
	a3 = a3 >>u 0x00000010 & 0x000000FF
	a3 = a6 - a3
	branch a3 < 1 l40210461
	// succ:  l4021046F l40210461
l4021046F:
	Mem0[a8:word32] = a9
	v15 = Mem0[a4 + 0x00000000:byte]
	a11 = (uint32) v15
	// succ:  l40210478
l40210478:
	a3 = Mem0[a7 + 0x0000001C:word32]
	a3 = a3 >>u 0x00000010 & 0x000000FF
	a3 = a6 - a3
	branch a3 < 1 l40210478
	// succ:  l40210486 l40210478
l40210486:
	Mem0[a7:word32] = a11
	// succ:  l4021048C
l4021048C:
	a4 = a4 + 1
	branch a4 != a10 l40210451
	// succ:  l40210491 l40210451
l40210491:
	// succ:  l40250439
l40250439:
_write_r_exit:


// _read_r
// Return size: 0
void _read_r()
_read_r_entry:
	// succ:  l40210494
l40210494:
	a1 = fp
	a6 = Mem0[a2 + 0x00000004:word32]
	v6 = Mem0[a6 + 0x0000000E:int16]
	a7 = (int32) v6
	a6 = 0x40202544
	branch a7 == a3 l402104A8
	// succ:  l4021049F l402104A8
l4021049F:
	a3 = 9
	Mem0[a2:word32] = a3
	a2 = -1
	return
	// succ:  _read_r_exit
l402104A8:
	a2 = Mem0[a6 + 0x0000001C:word32]
	a2 = a2 & 0x000000FF
	branch a2 == 0x00000000 l402104A8
	// succ:  l402104B3 l402104A8
l402104B3:
	branch a5 < 1 l402104EE
	// succ:  l402104B6 l402104EE
l402104B6:
	a3 = Mem0[a6 + 0x0000001C:word32]
	a2 = 0
	a3 = a3 & 0x000000FF
	branch a3 == a2 l402104F0
	// succ:  l402104C3 l402104F0
l402104C3:
	a3 = Mem0[a6 + 0x00000000:word32]
	branch a3 >= a2 l402104E2
	// succ:  l402104CB l402104E2
l402104CB:
	goto l402104F0
	// succ:  l402104F0
l402104D0:
	a3 = Mem0[a6 + 0x0000001C:word32]
	a3 = a3 & 0x000000FF
	branch a3 == 0x00000000 l402104F0
	// succ:  l402104DA l402104F0
l402104DA:
	a3 = Mem0[a6 + 0x00000000:word32]
	branch a3 < 0x00000000 l402104F0
	// succ:  l402104E2 l402104F0
l402104E2:
	a7 = a4 + a2
	Mem0[a7:byte] = a3
	a2 = a2 + 1
	branch a2 != a5 l402104D0
	a7 = a4 + a2
	Mem0[a7:byte] = a3
	a2 = a2 + 1
	branch a2 != a5 l402104D0
	// succ:  l402104EC l402104D0
l402104EC:
	return
	return
	// succ:  _read_r_exit _read_r_exit
l402104EE:
	a2 = 0
	// succ:  l402104F0
l402104F0:
	return
	// succ:  _read_r_exit
_read_r_exit:


// __addsf3
// Return size: 0
void __addsf3()
__addsf3_entry:
	goto l40210510
	// succ:  l40210510
l402104F4:
	branch (~a3 & a6) != 0x00000000 l402104FC
	// succ:  l402104F7 l402104FC
l402104F7:
	a7 = a2 << 23
	branch a7 == 0x00000000 l402104FE
	// succ:  l402104FC l402104FE
l402104FC:
	return
	// succ:  __addsf3_exit
l402104FE:
	a2 = a3
	return
	// succ:  __addsf3_exit
l40210504:
	a7 = a6 << 24
	a3 = a3 ^ a7
	// succ:  l4021050A_thunk_fn40210601
l4021050A_thunk_fn40210601:
	call fn40210601 (retsize: 0;)
	return
	// succ:  __addsf3_exit
l40210510:
	a1 = fp
	a6 = 0x40204458
	a7 = a2 ^ a3
	branch a7 < 0x00000000 l40210504
	// succ:  l40210519 l40210504
l40210519:
	branch (~a2 & a6) == 0x00000000 l402104F4
	// succ:  l4021051C l402104F4
l4021051C:
	branch (~a3 & a6) == 0x00000000 l402104FE
	// succ:  l4021051F l402104FE
l4021051F:
	a7 = a2 >>u 0x00000017 & 0x000001FF
	a8 = a3 >>u 0x00000017 & 0x000001FF
	branch a7 <u a8 l40210575
	// succ:  l40210528 l40210575
l40210528:
	branch (a3 & a6) == 0x00000000 l40210554
	// succ:  l4021052B l40210554
l4021052B:
	a3 = a3 | a6
	a3 = a3 << 24
	a3 = a3 >>u 8
	a10 = a7 - a8
	branch a10 >=u 0x00000020 l40210564
	// succ:  l4021053A l40210564
l4021053A:
	SAR = a10
	a9 = 0
	a9 = (word32) (a3_a9 >>u SAR)
	a3 = a3 >> SAR
	a2 = a2 + a3
	a10 = a2 >>u 0x00000017 & 0x000001FF
	branch a10 == a7 l40210598
	// succ:  l4021054D l40210598
l4021054D:
	a8 = a7
	goto l402105A8
	// succ:  l402105A8
l40210554:
	a3 = a3 << 23
	a3 = a3 >>u 9
	branch (a2 & a6) == 0x00000000 l40210562
	// succ:  l4021055D l40210562
l4021055D:
	a8 = a8 + 1
	goto l40250534
	// succ:  l40250534
l40210562:
	a2 = a2 + a3
	// succ:  l40210564
l40210564:
	return
	// succ:  __addsf3_exit
l40210568:
	a2 = a2 << 23
	a2 = a2 >>u 9
	a7 = a7 + 1
	goto l40210581
	// succ:  l40210581
l40210575:
	branch (a2 & a6) == 0x00000000 l40210568
	// succ:  l40210578 l40210568
l40210578:
	a2 = a2 | a6
	a2 = a2 << 24
	a2 = a2 >>u 8
	// succ:  l40210581
l40210581:
	a10 = a8 - a7
	branch a10 >=u 0x00000020 l402105A4
	// succ:  l40210587 l402105A4
l40210587:
	SAR = a10
	a9 = a2 << SAR
	a2 = a2 >> SAR
	a2 = a2 + a3
	a10 = a2 >>u 0x00000017 & 0x000001FF
	branch a10 != a8 l402105A8
	// succ:  l40210598 l402105A8
l40210598:
	branch a9 >= 0x00000000 l402105A2
	branch a9 >= 0x00000000 l402105A2
	// succ:  l4021059B l402105A2
l4021059B:
	a2 = a2 + 1
	a9 = a9 << 31
	branch a9 == 0x00000000 l402105CE
	a2 = a2 + 1
	a9 = a9 << 31
	branch a9 == 0x00000000 l402105CE
	// succ:  l402105A2 l402105CE
l402105A2:
	return
	return
	// succ:  __addsf3_exit __addsf3_exit
l402105A4:
	a2 = a3
	return
	// succ:  __addsf3_exit
l402105A8:
	a10 = a2
	a2 = a2 >>u 1
	a8 = a8 + 1
	a8 = a8 << 10
	a2 = a2 + a8
	branch (~a2 & a6) == 0x00000000 l402105C0
	// succ:  l402105B7 l402105C0
l402105B7:
	branch (a10 & 0x00000001) == 0x00000000 l402105BE
	// succ:  l402105BA l402105BE
l402105BA:
	a2 = a2 + 1
	branch a9 == 0x00000000 l402105CE
	// succ:  l402105BE l402105CE
l402105BE:
	return
	// succ:  __addsf3_exit
l402105C0:
	a2 = a2 >>u 0x00000017 & 0x000001FF
	a2 = a2 << 9
	a8 = a8 << 31
	a2 = a2 | a8
	return
	// succ:  __addsf3_exit
l402105CE:
	a2 = a2 >>u 1
	a2 = a2 << 31
	return
	// succ:  __addsf3_exit
l40250534:
__addsf3_exit:


// __subsf3
// Return size: 0
void __subsf3()
__subsf3_entry:
	goto l402105F8
	// succ:  l402105F8
l402105EC:
	a7 = a6 << 24
	a3 = a3 ^ a7
	goto l40250519
	// succ:  l40250519
l402105F8:
	a1 = fp
	a6 = 0x40204458
	a7 = a2 ^ a3
	branch a7 < 0x00000000 l402105EC
	// succ:  l402105FE_thunk_fn40210601 l402105EC
l402105FE_thunk_fn40210601:
	call fn40210601 (retsize: 0;)
	return
	// succ:  __subsf3_exit
l40250519:
__subsf3_exit:


// fn40210601
// Return size: 0
void fn40210601()
fn40210601_entry:
	goto l40210601
	// succ:  l40210601
l402105D8:
	branch (~a3 & a6) != 0x00000000 l402105E1
	// succ:  l402105DB l402105E1
l402105DB:
	a4 = 0x40204454
	a2 = a2 | a4
	// succ:  l402105E1
l402105E1:
	return
	// succ:  fn40210601_exit
l402105E4:
	a7 = a6 << 24
	a2 = a3 ^ a7
	return
	// succ:  fn40210601_exit
l40210601:
	a1 = v3
	branch (~a2 & a6) == 0x00000000 l402105D8
	// succ:  l40210604 l402105D8
l40210604:
	branch (~a3 & a6) == 0x00000000 l402105E4
	// succ:  l40210607 l402105E4
l40210607:
	a7 = a2 >>u 0x00000017 & 0x000000FF
	a8 = a3 >>u 0x00000017 & 0x000000FF
	branch a2 <u a3 l4021065C
	// succ:  l40210610 l4021065C
l40210610:
	branch (a3 & a6) == 0x00000000 l40210641
	// succ:  l40210613 l40210641
l40210613:
	a3 = a3 | a6
	a3 = a3 << 24
	a3 = a3 >>u 8
	// succ:  l4021061C
l4021061C:
	a10 = a7 - a8
	branch a10 >=u 0x00000020 l4021065A
	// succ:  l40210622 l4021065A
l40210622:
	SAR = a10
	a9 = 0
	a9 = (word32) (a3_a9 >>u SAR)
	a3 = a3 >> SAR
	a2 = a2 - a3
	a9 = -a9
	a10 = a2 - 1
	branch a9 == 0x00000000 l40210638
	// succ:  l40210635_1 l40210638
l40210635_1:
	a2 = a10
	// succ:  l40210638
l40210638:
	a10 = a2 >>u 0x00000017 & 0x000000FF
	branch a10 == a7 l40210690
	// succ:  l4021063E l40210690
l4021063E:
	goto l402106B1
	// succ:  l402106B1
l40210641:
	branch a2 == a3 l402106AD
	// succ:  l40210644 l402106AD
l40210644:
	a3 = a3 << 23
	a3 = a3 >>u 9
	branch (a2 & a6) == 0x00000000 l4021061C
	// succ:  l4021064D l4021061C
l4021064D:
	a8 = a8 + 1
	goto l4025061C
	// succ:  l4025061C
l40210654:
	a7 = a6 << 24
	a2 = a3 ^ a7
	// succ:  l4021065A
l4021065A:
	return
	// succ:  fn40210601_exit
l4021065C:
	branch (a2 & a6) == 0x00000000 l4021069C
	// succ:  l4021065F l4021069C
l4021065F:
	a2 = a2 | a6
	a2 = a2 << 24
	a2 = a2 >>u 8
	// succ:  l40210668
l40210668:
	a10 = a8 - a7
	branch a10 >=u 0x00000020 l40210654
	// succ:  l4021066E l40210654
l4021066E:
	SAR = a10
	a9 = 0
	a9 = (word32) (a2_a9 >>u SAR)
	a2 = a2 >> SAR
	a11 = a6 << 24
	a3 = a3 ^ a11
	a2 = a3 - a2
	a9 = -a9
	a10 = a2 - 1
	branch a9 == 0x00000000 l4021068A
	// succ:  l40210687_1 l4021068A
l40210687_1:
	a2 = a10
	// succ:  l4021068A
l4021068A:
	a10 = a2 >>u 0x00000017 & 0x000000FF
	branch a10 != a8 l402106B1
	// succ:  l40210690 l402106B1
l40210690:
	branch a9 >= 0x00000000 l4021069A
	branch a9 >= 0x00000000 l4021069A
	// succ:  l40210693 l4021069A
l40210693:
	a2 = a2 + 1
	a9 = a9 << 31
	branch a9 == 0x00000000 l402106D8
	a2 = a2 + 1
	a9 = a9 << 31
	branch a9 == 0x00000000 l402106D8
	// succ:  l4021069A l402106D8
l4021069A:
	return
	return
	// succ:  fn40210601_exit fn40210601_exit
l4021069C:
	branch a2 == a3 l402106AD
	// succ:  l4021069F l402106AD
l4021069F:
	a2 = a2 << 23
	a2 = a2 >>u 9
	branch (a3 & a6) == 0x00000000 l40210668
	// succ:  l402106A8 l40210668
l402106A8:
	a7 = a7 + 1
	goto l40250668
	// succ:  l40250668
l402106AD:
	a2 = 0
	return
	// succ:  fn40210601_exit
l402106B1:
	a8 = a2 << 23
	branch a8 == 0x00000000 l402106E0
	// succ:  l402106B6 l402106E0
l402106B6:
	a6 = __nsau(a8)
	a8 = a8 >>u 9
	branch a6 >= a10 l402106EE
	// succ:  l402106BF l402106EE
l402106BF:
	a6 = a6 + 1
	SAR = 0x00000020 - a6
	a8 = (word32) (a8_a9 >>u SAR)
	a9 = a9 << SAR
	a2 = a2 >>u 0x00000017 & 0x000001FF
	a2 = a2 - a6
	a2 = a2 << 9
	a2 = a2 + a8
	goto l40250690
	// succ:  l40250690
l402106D8:
	a2 = a2 >>u 1
	a2 = a2 << 31
	return
	// succ:  fn40210601_exit
l402106E0:
	branch a9 == 0x00000000 l402106AD
	// succ:  l402106E3 l402106AD
l402106E3:
	a11 = a10 - 24
	a6 = 24
	branch a11 >= 0x00000000 l402106EB
	// succ:  l402106E8_1 l402106EB
l402106E8_1:
	a6 = a10
	// succ:  l402106EB
l402106EB:
	goto l402506C1
	// succ:  l402506C1
l402106EE:
	a6 = a10
	goto l402506C1
	// succ:  l402506C1
l4025061C:
l40250668:
l40250690:
l402506C1:
fn40210601_exit:


// __mulsf3
// Return size: 0
void __mulsf3()
__mulsf3_entry:
	goto l4021076C
	// succ:  l4021076C
l402106F4:
	a2 = a2 << 31
	a2 = a2 >>u 1
	branch a2 == 0x00000000 l4021072C
	// succ:  l402106FC l4021072C
l402106FC:
	a10 = __nsau(a2)
	a10 = a10 - 8
	SAR = 0x00000020 - a10
	a2 = a2 << SAR
	a8 = 1
	a8 = a8 - a10
	goto l4021078C
	// succ:  l4021078C
l40210710:
	a3 = a3 << 31
	a3 = a3 >>u 1
	branch a3 == 0x00000000 l4021072C
	// succ:  l40210718 l4021072C
l40210718:
	a10 = __nsau(a3)
	a10 = a10 - 8
	SAR = 0x00000020 - a10
	a3 = a3 << SAR
	a9 = 1
	a9 = a9 - a10
	goto l4021078F
	// succ:  l4021078F
l4021072C:
	a2 = a7 >>u 0x0000001F & 0x00000001
	a2 = a2 << 1
	goto l40210806
	// succ:  l40210806
l40210735:
	a8 = a3 << 31
	branch a8 != 0x00000000 l40210744
	// succ:  l4021073A l40210744
l4021073A:
	a4 = 0x40204454
	a2 = a2 | a4
	goto l40210806
	// succ:  l40210806
l40210744:
	branch (~a3 & a6) != 0x00000000 l4021074E
	// succ:  l40210747 l4021074E
l40210747:
	a8 = a3 << 23
	branch a8 == 0x00000000 l4021074E
	// succ:  l4021074C l4021074E
l4021074C:
	a2 = a3
	// succ:  l4021074E
l4021074E:
	a7 = a7 >>u 0x0000001F & 0x00000001
	a2 = a2 << 31
	SAR = 0x01
	a2 = (word32) (a7_a2 >>u SAR)
	goto l40210806
	// succ:  l40210806
l4021075D:
	a8 = a2 << 31
	branch a8 != 0x00000000 l4021074C
	// succ:  l40210763 l4021074C
l40210763:
	a7 = 0x40204454
	a2 = a3 | a7
	goto l40210806
	// succ:  l40210806
l4021076C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000018:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	a6 = 0x40204458
	a7 = a2 ^ a3
	branch (~a2 & a6) == 0x00000000 l40210735
	// succ:  l40210780 l40210735
l40210780:
	branch (~a3 & a6) == 0x00000000 l4021075D
	// succ:  l40210783 l4021075D
l40210783:
	a8 = a2 >>u 0x00000017 & 0x000000FF
	a9 = a3 >>u 0x00000017 & 0x000000FF
	branch a8 == 0x00000000 l402106F4
	// succ:  l4021078C l402106F4
l4021078C:
	branch a9 == 0x00000000 l40210710
	// succ:  l4021078F l40210710
l4021078F:
	a8 = a8 + a9
	a10 = 0x40203740
	a2 = a2 | a6
	a2 = a2 & a10
	a3 = a3 | a6
	a3 = a3 & a10
	a4 = a2 >>u 0x00000010 & 0x0000FFFF
	a5 = a3 >>u 0x00000010 & 0x0000FFFF
	v16 = (uint16) a2
	v17 = (uint16) a5
	a6 = v16 *u v17
	v19 = (uint16) a4
	v20 = (uint16) a3
	a11 = v19 *u v20
	a9 = 0
	a6 = a6 + a11
	branch a6 >=u a11 l402107B5
	// succ:  l402107B3 l402107B5
l402107B3:
	a9 = a9 + 1
	// succ:  l402107B5
l402107B5:
	SAR = 0x00
	a9 = (word32) (a9_a6 >>u SAR)
	v23 = (uint16) a2
	v24 = (uint16) a3
	a11 = v23 *u v24
	a6 = a6 << SAR
	a6 = a6 + a11
	branch a6 >=u a11 l402107C8
	// succ:  l402107C6 l402107C8
l402107C6:
	a9 = a9 + 1
	// succ:  l402107C8
l402107C8:
	v25 = (uint16) a4
	v26 = (uint16) a5
	a2 = v25 *u v26
	a2 = a2 + a9
	a4 = 9
	a5 = a2 >>u 15
	branch a5 == 0x00000000 l402107D8
	// succ:  l402107D4 l402107D8
l402107D4:
	a4 = a4 - 1
	a8 = a8 + 1
	// succ:  l402107D8
l402107D8:
	SAR = 0x00000020 - a4
	a2 = (word32) (a2_a6 >>u SAR)
	a6 = a6 << SAR
	a4 = 0x00000080
	a8 = a8 - a4
	a4 = 0x000000FE
	branch a8 >=u a4 l4021081D
	// succ:  l402107ED l4021081D
l402107ED:
	branch a6 >= 0x00000000 l402107F8
	// succ:  l402107F0 l402107F8
l402107F0:
	a2 = a2 + 1
	a6 = a6 << 31
	branch a6 == 0x00000000 l40210814
	// succ:  l402107F8 l40210814
l402107F8:
	a8 = a8 << 9
	a2 = a2 + a8
	a7 = a7 >>u 0x0000001F & 0x00000001
	a7 = a7 << 1
	a2 = a2 | a7
	// succ:  l40210806
l40210806:
	a12 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000018:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  __mulsf3_exit
l40210814:
	a2 = a2 >>u 1
	a2 = a2 << 31
	goto l402507F8
	// succ:  l402507F8
l4021081D:
	branch a8 < 0x00000000 l40210829
	// succ:  l40210820 l40210829
l40210820:
	a8 = 0x000000FF
	a2 = a8 << 9
	goto l402507FD
	// succ:  l402507FD
l40210829:
	a8 = -a8
	a9 = a6
	SAR = a8
	branch a8 >=u 0x00000020 l40210848
	// succ:  l40210834 l40210848
l40210834:
	a6 = a2 << SAR
	a2 = a2 >> SAR
	a8 = 0
	branch a9 == 0x00000000 l402107ED
	// succ:  l4021083F l402107ED
l4021083F:
	a9 = 1
	a6 = a6 | a9
	goto l402507ED
	// succ:  l402507ED
l40210848:
	a2 = a7 >>u 0x0000001F & 0x00000001
	a2 = a2 << 1
	goto l40250806
	// succ:  l40250806
l402507ED:
l402507F8:
l402507FD:
l40250806:
__mulsf3_exit:


// __fixsfsi
// Return size: 0
void __fixsfsi()
__fixsfsi_entry:
	// succ:  l40210854
l40210854:
	a1 = fp
	a6 = 0x40204458
	branch (~a2 & a6) == 0x00000000 l4021087D
	// succ:  l4021085A l4021087D
l4021085A:
	a4 = a2 >>u 0x00000017 & 0x000000FF
	a4 = a4 - 126
	branch a4 >= 32 l40210884
	// succ:  l40210863 l40210884
l40210863:
	branch a4 < 1 l40210890
	// succ:  l40210866 l40210890
l40210866:
	a7 = a2 | a6
	a5 = a7 << 24
	SAR = 0x00000020 - a4
	a5 = a5 >> SAR
	a2 = -a5
	branch a7 < 0x00000000 l40210878
	// succ:  l40210875_1 l40210878
l40210875_1:
	a2 = a5
	// succ:  l40210878
l40210878:
	return
	// succ:  __fixsfsi_exit
l4021087D:
	a4 = a2 << 23
	branch a4 == 0x00000000 l40210884
	// succ:  l40210882 l40210884
l40210882:
	a2 = 0
	// succ:  l40210884
l40210884:
	a4 = a6 << 24
	a5 = a4 - 1
	branch a2 < 0x00000000 l4021088C
	// succ:  l40210889_1 l4021088C
l40210889_1:
	a4 = a5
	// succ:  l4021088C
l4021088C:
	a2 = a4
	return
	// succ:  __fixsfsi_exit
l40210890:
	a2 = 0
	return
	// succ:  __fixsfsi_exit
__fixsfsi_exit:


// __fixunssfsi
// Return size: 0
void __fixunssfsi()
__fixunssfsi_entry:
	// succ:  l40210894
l40210894:
	a1 = fp
	a6 = 0x40204458
	branch (~a2 & a6) == 0x00000000 l402108C0
	// succ:  l4021089A l402108C0
l4021089A:
	a4 = a2 >>u 0x00000017 & 0x000000FF
	a4 = a4 - 127
	branch a4 >= 32 l402108C9
	// succ:  l402108A3 l402108C9
l402108A3:
	branch a4 < 0x00000000 l402108D5
	// succ:  l402108A6 l402108D5
l402108A6:
	a7 = a2 | a6
	a5 = a7 << 24
	a4 = a4 + 1
	branch a4 == 32 l402108D9
	// succ:  l402108B1 l402108D9
l402108B1:
	SAR = 0x00000020 - a4
	a5 = a5 >> SAR
	a2 = -a5
	branch a7 < 0x00000000 l402108BD
	// succ:  l402108BA_1 l402108BD
l402108BA_1:
	a2 = a5
	// succ:  l402108BD
l402108BD:
	return
	// succ:  __fixunssfsi_exit
l402108C0:
	a4 = a2 << 23
	branch a4 == 0x00000000 l402108C9
	// succ:  l402108C5 l402108C9
l402108C5:
	a2 = -1
	return
	// succ:  __fixunssfsi_exit
l402108C9:
	a4 = a6 << 24
	a5 = -1
	branch a2 < 0x00000000 l402108D1
	// succ:  l402108CE_1 l402108D1
l402108CE_1:
	a4 = a5
	// succ:  l402108D1
l402108D1:
	a2 = a4
	return
	// succ:  __fixunssfsi_exit
l402108D5:
	a2 = 0
	return
	// succ:  __fixunssfsi_exit
l402108D9:
	branch a2 < 0x00000000 l402108E0
	// succ:  l402108DC l402108E0
l402108DC:
	a2 = a5
	return
	// succ:  __fixunssfsi_exit
l402108E0:
	a2 = a6 << 24
	return
	// succ:  __fixunssfsi_exit
__fixunssfsi_exit:


// __adddf3
// Return size: 0
void __adddf3()
__adddf3_entry:
	goto l40210908
	// succ:  l40210908
l402108E8:
	branch (~a5 & a6) != 0x00000000 l402108F4
	// succ:  l402108EB l402108F4
l402108EB:
	a7 = a3 << 20
	a7 = a7 | a2
	branch a7 == 0x00000000 l402108F6
	// succ:  l402108F4 l402108F6
l402108F4:
	return
	// succ:  __adddf3_exit
l402108F6:
	a3 = a5
	a2 = a4
	return
	// succ:  __adddf3_exit
l402108FC:
	a7 = a6 << 21
	a5 = a5 ^ a7
	// succ:  l40210902_thunk_fn40210A61
l40210902_thunk_fn40210A61:
	call fn40210A61 (retsize: 0;)
	return
	// succ:  __adddf3_exit
l40210908:
	a1 = fp
	a6 = 0x40204460
	a7 = a3 ^ a5
	branch a7 < 0x00000000 l402108FC
	// succ:  l40210911 l402108FC
l40210911:
	branch (~a3 & a6) == 0x00000000 l402108E8
	// succ:  l40210914 l402108E8
l40210914:
	branch (~a5 & a6) == 0x00000000 l402108F6
	// succ:  l40210917 l402108F6
l40210917:
	a7 = a3 >>u 0x00000014 & 0x00000FFF
	a8 = a5 >>u 0x00000014 & 0x00000FFF
	branch a7 <u a8 l40210998
	// succ:  l40210920 l40210998
l40210920:
	branch (a5 & a6) == 0x00000000 l40210954
	// succ:  l40210923 l40210954
l40210923:
	a5 = a5 | a6
	a5 = a5 << 21
	a5 = a5 >>u 11
	a10 = a7 - a8
	branch a10 >=u 0x00000020 l40210970
	// succ:  l40210932 l40210970
l40210932:
	SAR = a10
	a9 = 0
	a9 = (word32) (a4_a9 >>u SAR)
	a4 = (word32) (a5_a4 >>u SAR)
	a5 = a5 >> SAR
	// succ:  l40210940
l40210940:
	a2 = a2 + a4
	a3 = a3 + a5
	branch a2 >=u a4 l40210949
	// succ:  l40210947 l40210949
l40210947:
	a3 = a3 + 1
	// succ:  l40210949
l40210949:
	a10 = a3 >>u 0x00000014 & 0x00000FFF
	branch a10 == a7 l402109C6
	// succ:  l4021094F l402109C6
l4021094F:
	a8 = a7
	goto l402109F8
	// succ:  l402109F8
l40210954:
	a5 = a5 << 20
	a5 = a5 >>u 12
	branch (a3 & a6) == 0x00000000 l40210962
	// succ:  l4021095D l40210962
l4021095D:
	a8 = a8 + 1
	goto l4025092C
	// succ:  l4025092C
l40210962:
	a2 = a2 + a4
	a3 = a3 + a5
	branch a2 >=u a4 l4021096C
	// succ:  l40210969 l4021096C
l40210969:
	a3 = a3 + 1
	// succ:  l4021096C
l4021096C:
	return
	// succ:  __adddf3_exit
l40210970:
	branch a10 >=u 0x00000040 l4021096C
	// succ:  l40210973 l4021096C
l40210973:
	SAR = a10
	a11 = a4 << SAR
	a9 = (word32) (a5_a4 >>u SAR)
	a4 = a5 >> SAR
	a5 = 0
	branch a11 == 0x00000000 l40210940
	// succ:  l40210984 l40210940
l40210984:
	a9 = a9 | a10
	goto l40250940
	// succ:  l40250940
l4021098C:
	a3 = a3 << 20
	a3 = a3 >>u 12
	a7 = a7 + 1
	goto l402109A4
	// succ:  l402109A4
l40210998:
	branch (a3 & a6) == 0x00000000 l4021098C
	// succ:  l4021099B l4021098C
l4021099B:
	a3 = a3 | a6
	a3 = a3 << 21
	a3 = a3 >>u 11
	// succ:  l402109A4
l402109A4:
	a10 = a8 - a7
	branch a10 >=u 0x00000020 l402109D8
	// succ:  l402109AA l402109D8
l402109AA:
	SAR = a10
	a9 = a2 << SAR
	a2 = (word32) (a3_a2 >>u SAR)
	a3 = a3 >> SAR
	// succ:  l402109B6
l402109B6:
	a2 = a2 + a4
	a3 = a3 + a5
	branch a2 >=u a4 l402109C0
	// succ:  l402109BE l402109C0
l402109BE:
	a3 = a3 + 1
	// succ:  l402109C0
l402109C0:
	a10 = a3 >>u 0x00000014 & 0x00000FFF
	branch a10 != a8 l402109F8
	// succ:  l402109C6 l402109F8
l402109C6:
	branch a9 >= 0x00000000 l402109D4
	branch a9 >= 0x00000000 l402109D4
	// succ:  l402109C9 l402109D4
l402109C9:
	a2 = a2 + 1
	branch a2 == 0x00000000 l40210A30
	a2 = a2 + 1
	branch a2 == 0x00000000 l40210A30
	// succ:  l402109CE l40210A30
l402109CE:
	a9 = a9 << 31
	branch a9 == 0x00000000 l40210A28
	a9 = a9 << 31
	branch a9 == 0x00000000 l40210A28
	// succ:  l402109D4 l40210A28
l402109D4:
	return
	return
	// succ:  __adddf3_exit __adddf3_exit
l402109D8:
	branch a10 >=u 0x00000040 l402109F2
	// succ:  l402109DB l402109F2
l402109DB:
	SAR = a10
	a11 = a2 << SAR
	a9 = (word32) (a3_a2 >>u SAR)
	a2 = a3 >> SAR
	a3 = 0
	branch a11 == 0x00000000 l402109B6
	// succ:  l402109EC l402109B6
l402109EC:
	a9 = a9 | a10
	goto l402509B6
	// succ:  l402509B6
l402109F2:
	a3 = a5
	a2 = a4
	return
	// succ:  __adddf3_exit
l402109F8:
	a10 = a2
	SAR = 0x01
	a2 = (word32) (a3_a2 >>u SAR)
	a3 = a3 >> SAR
	a8 = a8 + 1
	a8 = a8 << 13
	a3 = a3 + a8
	branch (~a3 & a6) == 0x00000000 l40210A18
	// succ:  l40210A0D l40210A18
l40210A0D:
	branch (a10 & 0x00000001) == 0x00000000 l40210A16
	// succ:  l40210A10 l40210A16
l40210A10:
	a2 = a2 + 1
	branch a2 == 0x00000000 l40210A30
	// succ:  l40210A14 l40210A30
l40210A14:
	branch a9 == 0x00000000 l40210A28
	// succ:  l40210A16 l40210A28
l40210A16:
	return
	// succ:  __adddf3_exit
l40210A18:
	a2 = 0
	a3 = a3 >>u 0x00000014 & 0x00000FFF
	a3 = a3 << 12
	a8 = a8 << 31
	a3 = a3 | a8
	return
	// succ:  __adddf3_exit
l40210A28:
	a2 = a2 >>u 1
	a2 = a2 << 31
	return
	// succ:  __adddf3_exit
l40210A30:
	a3 = a3 + 1
	return
	// succ:  __adddf3_exit
l4025092C:
l40250940:
l402509B6:
__adddf3_exit:


// __subdf3
// Return size: 0
void __subdf3()
__subdf3_entry:
	goto l40210A58
	// succ:  l40210A58
l40210A4C:
	a7 = a6 << 21
	a5 = a5 ^ a7
	goto l40250911
	// succ:  l40250911
l40210A58:
	a1 = fp
	a6 = 0x40204460
	a7 = a3 ^ a5
	branch a7 < 0x00000000 l40210A4C
	// succ:  l40210A5E_thunk_fn40210A61 l40210A4C
l40210A5E_thunk_fn40210A61:
	call fn40210A61 (retsize: 0;)
	return
	// succ:  __subdf3_exit
l40250911:
__subdf3_exit:


// fn40210A61
// Return size: 0
void fn40210A61()
fn40210A61_entry:
	goto l40210A61
	// succ:  l40210A61
l40210A34:
	branch (~a5 & a6) != 0x00000000 l40210A3D
	// succ:  l40210A37 l40210A3D
l40210A37:
	a4 = 0x4020445C
	a3 = a3 | a4
	// succ:  l40210A3D
l40210A3D:
	return
	// succ:  fn40210A61_exit
l40210A40:
	a7 = a6 << 21
	a3 = a5 ^ a7
	a2 = a4
	return
	// succ:  fn40210A61_exit
l40210A61:
	a1 = v3
	branch (~a3 & a6) == 0x00000000 l40210A34
	// succ:  l40210A64 l40210A34
l40210A64:
	branch (~a5 & a6) == 0x00000000 l40210A40
	// succ:  l40210A67 l40210A40
l40210A67:
	a7 = a3 >>u 0x00000014 & 0x000007FF
	a8 = a5 >>u 0x00000014 & 0x000007FF
	branch a3 <u a5 l40210AEE
	// succ:  l40210A70 l40210AEE
l40210A70:
	branch a3 == a5 l40210AB5
	// succ:  l40210A73 l40210AB5
l40210A73:
	branch (a5 & a6) == 0x00000000 l40210AC4
	// succ:  l40210A76 l40210AC4
l40210A76:
	a5 = a5 | a6
	a5 = a5 << 21
	a5 = a5 >>u 11
	// succ:  l40210A7F
l40210A7F:
	a10 = a7 - a8
	branch a10 >=u 0x00000020 l40210AD4
	// succ:  l40210A85 l40210AD4
l40210A85:
	SAR = a10
	a9 = 0x00000000
	a9 = (word32) (a4_a9 >>u SAR)
	a4 = (word32) (a5_a4 >>u SAR)
	a5 = a5 >> SAR
	// succ:  l40210A94
l40210A94:
	a3 = a3 - a5
	branch a2 >=u a4 l40210A9D
	// succ:  l40210A9A l40210A9D
l40210A9A:
	a3 = a3 - 1
	// succ:  l40210A9D
l40210A9D:
	a2 = a2 - a4
	a9 = -a9
	branch a9 == 0x00000000 l40210AAC
	// succ:  l40210AA5 l40210AAC
l40210AA5:
	a5 = a3 - 1
	branch a2 != 0x00000000 l40210AAA
	// succ:  l40210AA7_1 l40210AAA
l40210AA7_1:
	a3 = a5
	// succ:  l40210AAA
l40210AAA:
	a2 = a2 - 1
	// succ:  l40210AAC
l40210AAC:
	a10 = a3 >>u 0x00000014 & 0x000007FF
	branch a10 == a7 l40210B32
	// succ:  l40210AB2 l40210B32
l40210AB2:
	goto l40210B7C
	// succ:  l40210B7C
l40210AB5:
	branch a2 <u a4 l40210AEE
	// succ:  l40210AB8 l40210AEE
l40210AB8:
	branch a4 <u a2 l40210A73
	// succ:  l40210ABB l40210A73
l40210ABB:
	a3 = 0
	a2 = 0x00000000
	// succ:  l40210AC0
l40210AC0:
	return
	// succ:  fn40210A61_exit
l40210AC4:
	a5 = a5 << 20
	a5 = a5 >>u 12
	branch (a3 & a6) == 0x00000000 l40210A7F
	// succ:  l40210ACD l40210A7F
l40210ACD:
	a8 = a8 + 1
	goto l40250A7F
	// succ:  l40250A7F
l40210AD4:
	branch a10 >=u 0x00000040 l40210AC0
	// succ:  l40210AD7 l40210AC0
l40210AD7:
	SAR = a10
	a11 = a4 << SAR
	a9 = (word32) (a5_a4 >>u SAR)
	a4 = a5 >> SAR
	a5 = 0
	branch a11 == 0x00000000 l40210A94
	// succ:  l40210AE8 l40210A94
l40210AE8:
	a9 = a9 | a10
	goto l40250A94
	// succ:  l40250A94
l40210AEE:
	branch (a3 & a6) == 0x00000000 l40210B44
	// succ:  l40210AF1 l40210B44
l40210AF1:
	a3 = a3 | a6
	a3 = a3 << 21
	a3 = a3 >>u 11
	// succ:  l40210AFA
l40210AFA:
	a10 = a8 - a7
	branch a10 >=u 0x00000020 l40210B54
	// succ:  l40210B00 l40210B54
l40210B00:
	SAR = a10
	a9 = 0x00000000
	a9 = (word32) (a2_a9 >>u SAR)
	a2 = (word32) (a3_a2 >>u SAR)
	a3 = a3 >> SAR
	a11 = a6 << 21
	a5 = a5 ^ a11
	// succ:  l40210B15
l40210B15:
	a2 = a4 - a2
	a3 = a5 - a3
	branch a4 >=u a2 l40210B20
	// succ:  l40210B1E l40210B20
l40210B1E:
	a3 = a3 - 1
	// succ:  l40210B20
l40210B20:
	a9 = -a9
	branch a9 == 0x00000000 l40210B2C
	// succ:  l40210B25 l40210B2C
l40210B25:
	a5 = a3 - 1
	branch a2 != 0x00000000 l40210B2A
	// succ:  l40210B27_1 l40210B2A
l40210B27_1:
	a3 = a5
	// succ:  l40210B2A
l40210B2A:
	a2 = a2 - 1
	// succ:  l40210B2C
l40210B2C:
	a10 = a3 >>u 0x00000014 & 0x000007FF
	branch a10 != a8 l40210B7C
	// succ:  l40210B32 l40210B7C
l40210B32:
	branch a9 >= 0x00000000 l40210B40
	// succ:  l40210B35 l40210B40
l40210B35:
	a2 = a2 + 1
	branch a2 == 0x00000000 l40210BB0
	// succ:  l40210B3A l40210BB0
l40210B3A:
	a9 = a9 << 31
	branch a9 == 0x00000000 l40210BA8
	// succ:  l40210B40 l40210BA8
l40210B40:
	return
	// succ:  fn40210A61_exit
l40210B44:
	a3 = a3 << 20
	a3 = a3 >>u 12
	branch (a5 & a6) == 0x00000000 l40210AFA
	// succ:  l40210B4D l40210AFA
l40210B4D:
	a7 = a7 + 1
	goto l40250AFA
	// succ:  l40250AFA
l40210B54:
	branch a10 >=u 0x00000040 l40210B70
	// succ:  l40210B57 l40210B70
l40210B57:
	SAR = a10
	a11 = a2 << SAR
	a9 = (word32) (a3_a2 >>u SAR)
	a2 = a3 >> SAR
	a3 = a6 << 21
	branch a11 == 0x00000000 l40210B15
	// succ:  l40210B69 l40210B15
l40210B69:
	a9 = a9 | a10
	goto l40250B15
	// succ:  l40250B15
l40210B70:
	a7 = a6 << 21
	a3 = a5 ^ a7
	a2 = a4
	return
	// succ:  fn40210A61_exit
l40210B7C:
	a8 = a3 << 20
	branch a8 == 0x00000000 l40210BB4
	// succ:  l40210B81 l40210BB4
l40210B81:
	a6 = __nsau(a8)
	a8 = a8 >>u 12
	branch a6 >= a10 l40210BD9
	// succ:  l40210B8A l40210BD9
l40210B8A:
	a6 = a6 + 1
	// succ:  l40210B8C
l40210B8C:
	SAR = 0x00000020 - a6
	a8 = (word32) (a8_a2 >>u SAR)
	a2 = (word32) (a2_a9 >>u SAR)
	a9 = a9 << SAR
	a3 = a3 >>u 0x00000014 & 0x00000FFF
	a3 = a3 - a6
	a3 = a3 << 12
	a3 = a3 + a8
	goto l40250B32
	// succ:  l40250B32
l40210BA8:
	a2 = a2 >>u 1
	a2 = a2 << 31
	return
	// succ:  fn40210A61_exit
l40210BB0:
	a3 = a3 + 1
	return
	// succ:  fn40210A61_exit
l40210BB4:
	a6 = __nsau(a2)
	a6 = a6 + 21
	branch a10 < a6 l40210BD9
	// succ:  l40210BBD l40210BD9
l40210BBD:
	branch a6 <u 0x00000020 l40210B8C
	// succ:  l40210BC0 l40210B8C
l40210BC0:
	SAR = 0x00000020 - a6
	a8 = (word32) (a2_a9 >>u SAR)
	a2 = a9 << SAR
	a9 = 0
	a3 = a3 >>u 0x00000014 & 0x00000FFF
	a3 = a3 - a6
	a3 = a3 << 12
	a3 = a3 + a8
	goto l40250B32
	// succ:  l40250B32
l40210BD9:
	a6 = a10
	goto l40250BBD
	// succ:  l40250BBD
l40250A7F:
l40250A94:
l40250AFA:
l40250B15:
l40250B32:
l40250BBD:
fn40210A61_exit:


// __divdf3
// Return size: 0
void __divdf3()
__divdf3_entry:
	goto l40210CC8
	// succ:  l40210CC8
l40210BE0:
	a5 = a5 << 31
	a5 = a5 >>u 1
	a10 = a5 | a4
	branch a10 == 0x00000000 l40210C28
	// succ:  l40210BEB l40210C28
l40210BEB:
	branch a5 == 0x00000000 l40210C04
	// succ:  l40210BED l40210C04
l40210BED:
	a10 = __nsau(a5)
	a10 = a10 - 11
	SAR = 0x00000020 - a10
	a5 = (word32) (a5_a4 >>u SAR)
	a4 = a4 << SAR
	a9 = 1
	a9 = a9 - a10
	goto l40210CDD
	// succ:  l40210CDD
l40210C04:
	a10 = __nsau(a4)
	a10 = a10 - 11
	a9 = -31
	a9 = a9 - a10
	SAR = 0x00000020 - a10
	branch a10 < 0x00000000 l40210C1D
	// succ:  l40210C15 l40210C1D
l40210C15:
	a5 = a4 << SAR
	a4 = 0
	goto l40210CDD
	// succ:  l40210CDD
l40210C1D:
	a5 = a4 >> SAR
	a4 = a4 << SAR
	goto l40210CDD
	// succ:  l40210CDD
l40210C28:
	a3 = a3 << 31
	a3 = a3 >>u 1
	a2 = a2 | a3
	a3 = a7 >>u 0x0000001F & 0x00000001
	a3 = a3 << 1
	a3 = a3 | a6
	branch a2 != 0x00000000 l40210C42
	// succ:  l40210C3C l40210C42
l40210C3C:
	a4 = 0x4020445C
	a3 = a3 | a4
	// succ:  l40210C42
l40210C42:
	a2 = 0
	return
	// succ:  __divdf3_exit
l40210C48:
	a3 = a3 << 31
	a3 = a3 >>u 1
	a10 = a3 | a2
	branch a10 == 0x00000000 l40210C90
	// succ:  l40210C53 l40210C90
l40210C53:
	branch a3 == 0x00000000 l40210C6C
	// succ:  l40210C55 l40210C6C
l40210C55:
	a10 = __nsau(a3)
	a10 = a10 - 11
	SAR = 0x00000020 - a10
	a3 = (word32) (a3_a2 >>u SAR)
	a2 = a2 << SAR
	a8 = 1
	a8 = a8 - a10
	goto l40210CE0
	// succ:  l40210CE0
l40210C6C:
	a10 = __nsau(a2)
	a10 = a10 - 11
	a8 = -31
	a8 = a8 - a10
	SAR = 0x00000020 - a10
	branch a10 < 0x00000000 l40210C85
	// succ:  l40210C7D l40210C85
l40210C7D:
	a3 = a2 << SAR
	a2 = 0
	goto l40210CE0
	// succ:  l40210CE0
l40210C85:
	a3 = a2 >> SAR
	a2 = a2 << SAR
	goto l40210CE0
	// succ:  l40210CE0
l40210C90:
	a3 = a7 >>u 0x0000001F & 0x00000001
	a3 = a3 << 1
	a2 = 0
	return
	// succ:  __divdf3_exit
l40210C9C:
	a7 = a5 >>u 0x0000001F & 0x00000001
	a7 = a7 << 1
	a3 = a3 ^ a7
	branch (~a5 & a6) != 0x00000000 l40210CAE
	// succ:  l40210CA8 l40210CAE
l40210CA8:
	a4 = 0x4020445C
	a3 = a3 | a4
	// succ:  l40210CAE
l40210CAE:
	return
	// succ:  __divdf3_exit
l40210CB0:
	a8 = a5 << 20
	a8 = a8 | a4
	branch a8 == 0x00000000 l40210C90
	// succ:  l40210CB9 l40210C90
l40210CB9:
	a3 = a5
	a2 = a4
	return
	// succ:  __divdf3_exit
l40210CC0:
	branch a2 <u a4 l40210CFB
	// succ:  l40210CC3 l40210CFB
l40210CC3:
	goto l40210D04
	// succ:  l40210D04
l40210CC8:
	a1 = fp
	a6 = 0x40204460
	a7 = a3 ^ a5
	branch (~a3 & a6) == 0x00000000 l40210C9C
	// succ:  l40210CD1 l40210C9C
l40210CD1:
	branch (~a5 & a6) == 0x00000000 l40210CB0
	// succ:  l40210CD4 l40210CB0
l40210CD4:
	a8 = a3 >>u 0x00000014 & 0x000007FF
	a9 = a5 >>u 0x00000014 & 0x000007FF
	branch a9 == 0x00000000 l40210BE0
	// succ:  l40210CDD l40210BE0
l40210CDD:
	branch a8 == 0x00000000 l40210C48
	// succ:  l40210CE0 l40210C48
l40210CE0:
	a8 = a8 - a9
	a10 = 0x40204464
	a3 = a3 | a6
	a3 = a3 & a10
	a5 = a5 | a6
	a5 = a5 & a10
	SAR = 0x0F
	branch a5 <u a3 l40210D04
	// succ:  l40210CF8 l40210D04
l40210CF8:
	branch a5 == a3 l40210CC0
	// succ:  l40210CFB l40210CC0
l40210CFB:
	a3 = (word32) (a3_a2 >>u SAR)
	a2 = a2 << SAR
	a8 = a8 - 1
	// succ:  l40210D04
l40210D04:
	a3 = a3 - a5
	branch a2 >=u a4 l40210D0D
	// succ:  l40210D0A l40210D0D
l40210D0A:
	a3 = a3 - 1
	// succ:  l40210D0D
l40210D0D:
	a2 = a2 - a4
	a3 = (word32) (a3_a2 >>u SAR)
	a2 = a2 << SAR
	a10 = 0
	a11 = 1
	a9 = 52
	// succ:  l40210D1C
l40210D1C:
	a10 = (word32) (a10_a11 >>u SAR)
	a11 = a11 << SAR
	branch a3 <u a5 l40210D35
	// succ:  l40210D25 l40210D35
l40210D25:
	branch a3 == a5 l40210D68
	// succ:  l40210D28 l40210D68
l40210D28:
	a11 = a11 + 1
	a3 = a3 - a5
	branch a2 >=u a4 l40210D32
	// succ:  l40210D30 l40210D32
l40210D30:
	a3 = a3 - 1
	// succ:  l40210D32
l40210D32:
	a2 = a2 - a4
	// succ:  l40210D35
l40210D35:
	a3 = (word32) (a3_a2 >>u SAR)
	a2 = a2 << SAR
	a9 = a9 - 1
	branch a9 != 0x00000000 l40210D1C
	// succ:  l40210D40 l40210D1C
l40210D40:
	a9 = 0x000003FE
	a8 = a8 + a9
	a9 = a9 + 0x00000400
	branch a8 >=u a9 l40210D84
	// succ:  l40210D4B l40210D84
l40210D4B:
	branch a3 <u a5 l40210D56
	// succ:  l40210D4E l40210D56
l40210D4E:
	branch a3 == a5 l40210D70
	// succ:  l40210D51 l40210D70
l40210D51:
	a11 = a11 + 1
	branch a11 == 0x00000000 l40210DDC
	// succ:  l40210D56 l40210DDC
l40210D56:
	a2 = a11
	a8 = a8 << 12
	a3 = a10 + a8
	a7 = a7 >>u 0x0000001F & 0x00000001
	a7 = a7 << 1
	a3 = a3 | a7
	return
	// succ:  __divdf3_exit
l40210D68:
	branch a2 >=u a4 l40210D28
	// succ:  l40210D6B l40210D28
l40210D6B:
	goto l40250D35
	// succ:  l40250D35
l40210D70:
	branch a2 <u a4 l40210D56
	// succ:  l40210D73 l40210D56
l40210D73:
	branch a2 != a4 l40210D51
	// succ:  l40210D76 l40210D51
l40210D76:
	a11 = a11 + 1
	branch a11 == 0x00000000 l40210DDC
	// succ:  l40210D7B l40210DDC
l40210D7B:
	a11 = a11 >>u 1
	a11 = a11 << 31
	goto l40250D56
	// succ:  l40250D56
l40210D84:
	branch a8 < 0x00000000 l40210D91
	// succ:  l40210D87 l40210D91
l40210D87:
	a8 = a9 + 1
	a3 = a8 << 12
	a2 = 0
	goto l40250D5D
	// succ:  l40250D5D
l40210D91:
	a8 = -a8
	SAR = a8
	branch a8 >=u 0x00000020 l40210DA8
	// succ:  l40210D9A l40210DA8
l40210D9A:
	a6 = a11 << SAR
	a11 = (word32) (a10_a11 >>u SAR)
	a10 = a10 >> SAR
	goto l40210DB9
	// succ:  l40210DB9
l40210DA8:
	branch a8 >=u 0x00000040 l40210DE1
	// succ:  l40210DAB l40210DE1
l40210DAB:
	a9 = a11 << SAR
	a6 = (word32) (a10_a11 >>u SAR)
	a11 = a10 >> SAR
	a10 = 0
	a2 = a2 | a9
	// succ:  l40210DB9
l40210DB9:
	a8 = 0
	a3 = a3 | a2
	branch a3 == 0x00000000 l40210DC5
	// succ:  l40210DC0 l40210DC5
l40210DC0:
	a9 = 1
	a6 = a6 | a9
	// succ:  l40210DC5
l40210DC5:
	branch a6 >= 0x00000000 l40210D56
	// succ:  l40210DC8 l40210D56
l40210DC8:
	a11 = a11 + 1
	branch a11 == 0x00000000 l40210DDC
	// succ:  l40210DCC l40210DDC
l40210DCC:
	a6 = a6 << 31
	branch a6 != 0x00000000 l40210D56
	// succ:  l40210DD2 l40210D56
l40210DD2:
	a11 = a11 >>u 1
	a11 = a11 << 31
	goto l40250D56
	// succ:  l40250D56
l40210DDC:
	a10 = a10 + 1
	goto l40250D56
	// succ:  l40250D56
l40210DE1:
	a3 = a7 >>u 0x0000001F & 0x00000001
	a3 = a3 << 1
	a2 = 0
	return
	// succ:  __divdf3_exit
l40250D35:
l40250D56:
l40250D5D:
__divdf3_exit:


// __nedf2
// Return size: 0
void __nedf2()
__nedf2_entry:
	// succ:  l40210DEC
l40210DEC:
	a1 = fp
	branch a2 != a4 l40210DFC
	// succ:  l40210DEF l40210DFC
l40210DEF:
	branch a3 != a5 l40210E09
	// succ:  l40210DF2 l40210E09
l40210DF2:
	a6 = 0x40204460
	branch (~a3 & a6) == 0x00000000 l40210E00
	// succ:  l40210DF8 l40210E00
l40210DF8:
	a2 = 0
	return
	// succ:  __nedf2_exit
l40210DFC:
	a2 = 1
	return
	// succ:  __nedf2_exit
l40210E00:
	a7 = a3 << 20
	a7 = a7 | a2
	goto l40210E12
	// succ:  l40210E12
l40210E09:
	a7 = a3 | a5
	a7 = a7 << 31
	a7 = a7 | a2
	// succ:  l40210E12
l40210E12:
	a2 = 0
	a3 = 1
	branch a7 == 0x00000000 l40210E19
	// succ:  l40210E16_1 l40210E19
l40210E16_1:
	a2 = a3
	// succ:  l40210E19
l40210E19:
	return
	// succ:  __nedf2_exit
__nedf2_exit:


// __gtdf2
// Return size: 0
void __gtdf2()
__gtdf2_entry:
	// succ:  l40210E1C
l40210E1C:
	a1 = fp
	a6 = 0x40204460
	branch (~a3 & a6) == 0x00000000 l40210E31
	// succ:  l40210E22 l40210E31
l40210E22:
	branch (~a5 & a6) != 0x00000000 l40210E64
	goto l40210E25
	// succ:  l40210E25 l40210E22_thunk_fn40210E64
l40210E22_thunk_fn40210E64:
	call fn40210E64 (retsize: 0;)
	return
	// succ:  __gtdf2_exit
l40210E25:
	a7 = a5 << 20
	a7 = a7 | a4
	branch a7 == 0x00000000 l40210E64
	goto l40210E2D
	// succ:  l40210E2D l40210E2B_thunk_fn40210E64
l40210E2B_thunk_fn40210E64:
	call fn40210E64 (retsize: 0;)
	return
	// succ:  __gtdf2_exit
l40210E2D:
	a2 = 0
	return
	// succ:  __gtdf2_exit
l40210E31:
	a7 = a3 << 20
	a7 = a7 | a2
	branch a7 == 0x00000000 l40210E22
	// succ:  l40210E3A l40210E22
l40210E3A:
	a2 = 0
	return
	// succ:  __gtdf2_exit
__gtdf2_exit:


// __ledf2
// Return size: 0
void __ledf2()
__ledf2_entry:
	// succ:  l40210E40
l40210E40:
	a1 = fp
	a6 = 0x40204460
	branch (~a3 & a6) == 0x00000000 l40210E55
	// succ:  l40210E46 l40210E55
l40210E46:
	branch (~a5 & a6) != 0x00000000 l40210E46_thunk_fn40210E64
	goto l40210E49
	// succ:  l40210E49 l40210E46_thunk_fn40210E64
l40210E46_thunk_fn40210E64:
	call fn40210E64 (retsize: 0;)
	return
	// succ:  __ledf2_exit
l40210E49:
	a7 = a5 << 20
	a7 = a7 | a4
	branch a7 == 0x00000000 l40210E4F_thunk_fn40210E64
	goto l40210E51
	// succ:  l40210E51 l40210E4F_thunk_fn40210E64
l40210E4F_thunk_fn40210E64:
	call fn40210E64 (retsize: 0;)
	return
	// succ:  __ledf2_exit
l40210E51:
	a2 = 1
	return
	// succ:  __ledf2_exit
l40210E55:
	a7 = a3 << 20
	a7 = a7 | a2
	branch a7 == 0x00000000 l40210E46
	// succ:  l40210E5E l40210E46
l40210E5E:
	a2 = 1
	return
	// succ:  __ledf2_exit
__ledf2_exit:


// fn40210E64
// Return size: 0
void fn40210E64()
fn40210E64_entry:
	// succ:  l40210E64
l40210E64:
	a1 = v3
	a7 = a3 ^ a5
	branch a7 < 0x00000000 l40210E89
	// succ:  l40210E6A l40210E89
l40210E6A:
	branch a3 < 0x00000000 l40210E7C
	// succ:  l40210E6D l40210E7C
l40210E6D:
	branch a3 <u a5 l40210E76
	// succ:  l40210E70 l40210E76
l40210E70:
	branch a3 != a5 l40210E85
	// succ:  l40210E73 l40210E85
l40210E73:
	branch a4 <u a2 l40210E85
	// succ:  l40210E76 l40210E85
l40210E76:
	a2 = 0
	return
	// succ:  fn40210E64_exit
l40210E7C:
	branch a5 <u a3 l40210E76
	// succ:  l40210E7F l40210E76
l40210E7F:
	branch a5 != a3 l40210E85
	// succ:  l40210E82 l40210E85
l40210E82:
	branch a2 >=u a4 l40210E76
	// succ:  l40210E85 l40210E76
l40210E85:
	a2 = 1
	return
	a2 = 1
	return
	// succ:  fn40210E64_exit fn40210E64_exit
l40210E89:
	branch a3 < 0x00000000 l40210E76
	// succ:  l40210E8C l40210E76
l40210E8C:
	a7 = a3 | a5
	a7 = a7 << 31
	a7 = a7 | a2
	a7 = a7 | a4
	a2 = 1
	a3 = 0
	branch a7 != 0x00000000 l40210E9F
	// succ:  l40210E9C_1 l40210E9F
l40210E9C_1:
	a2 = a3
	// succ:  l40210E9F
l40210E9F:
	return
	// succ:  fn40210E64_exit
fn40210E64_exit:


// __gedf2
// Return size: 0
void __gedf2()
__gedf2_entry:
	// succ:  l40210EA4
l40210EA4:
	a1 = fp
	a6 = 0x40204460
	branch (~a3 & a6) == 0x00000000 l40210EB9
	// succ:  l40210EAA l40210EB9
l40210EAA:
	branch (~a5 & a6) != 0x00000000 l40210EAA_thunk_fn40210EEC
	goto l40210EAD
	// succ:  l40210EAD l40210EAA_thunk_fn40210EEC
l40210EAA_thunk_fn40210EEC:
	call fn40210EEC (retsize: 0;)
	return
	// succ:  __gedf2_exit
l40210EAD:
	a7 = a5 << 20
	a7 = a7 | a4
	branch a7 == 0x00000000 l40210EB3_thunk_fn40210EEC
	goto l40210EB5
	// succ:  l40210EB5 l40210EB3_thunk_fn40210EEC
l40210EB3_thunk_fn40210EEC:
	call fn40210EEC (retsize: 0;)
	return
	// succ:  __gedf2_exit
l40210EB5:
	a2 = -1
	return
	// succ:  __gedf2_exit
l40210EB9:
	a7 = a3 << 20
	a7 = a7 | a2
	branch a7 == 0x00000000 l40210EAA
	// succ:  l40210EC2 l40210EAA
l40210EC2:
	a2 = -1
	return
	// succ:  __gedf2_exit
__gedf2_exit:


// __ltdf2
// Return size: 0
void __ltdf2()
__ltdf2_entry:
	// succ:  l40210EC8
l40210EC8:
	a1 = fp
	a6 = 0x40204460
	branch (~a3 & a6) == 0x00000000 l40210EDD
	// succ:  l40210ECE l40210EDD
l40210ECE:
	branch (~a5 & a6) != 0x00000000 l40210EEC
	goto l40210ED1
	// succ:  l40210ED1 l40210ECE_thunk_fn40210EEC
l40210ECE_thunk_fn40210EEC:
	call fn40210EEC (retsize: 0;)
	return
	// succ:  __ltdf2_exit
l40210ED1:
	a7 = a5 << 20
	a7 = a7 | a4
	branch a7 == 0x00000000 l40210EEC
	goto l40210ED9
	// succ:  l40210ED9 l40210ED7_thunk_fn40210EEC
l40210ED7_thunk_fn40210EEC:
	call fn40210EEC (retsize: 0;)
	return
	// succ:  __ltdf2_exit
l40210ED9:
	a2 = 0
	return
	// succ:  __ltdf2_exit
l40210EDD:
	a7 = a3 << 20
	a7 = a7 | a2
	branch a7 == 0x00000000 l40210ECE
	// succ:  l40210EE6 l40210ECE
l40210EE6:
	a2 = 0
	return
	// succ:  __ltdf2_exit
__ltdf2_exit:


// fn40210EEC
// Return size: 0
void fn40210EEC()
fn40210EEC_entry:
	// succ:  l40210EEC
l40210EEC:
	a1 = v3
	a7 = a3 ^ a5
	branch a7 < 0x00000000 l40210F11
	// succ:  l40210EF2 l40210F11
l40210EF2:
	branch a3 < 0x00000000 l40210F04
	// succ:  l40210EF5 l40210F04
l40210EF5:
	branch a3 <u a5 l40210EFE
	// succ:  l40210EF8 l40210EFE
l40210EF8:
	branch a3 != a5 l40210F0D
	// succ:  l40210EFB l40210F0D
l40210EFB:
	branch a2 >=u a4 l40210F0D
	// succ:  l40210EFE l40210F0D
l40210EFE:
	a2 = -1
	return
	// succ:  fn40210EEC_exit
l40210F04:
	branch a5 <u a3 l40210EFE
	// succ:  l40210F07 l40210EFE
l40210F07:
	branch a5 != a3 l40210F0D
	// succ:  l40210F0A l40210F0D
l40210F0A:
	branch a4 <u a2 l40210EFE
	// succ:  l40210F0D l40210EFE
l40210F0D:
	a2 = 0
	return
	a2 = 0
	return
	// succ:  fn40210EEC_exit fn40210EEC_exit
l40210F11:
	branch a3 >= 0x00000000 l40210F0D
	// succ:  l40210F14 l40210F0D
l40210F14:
	a7 = a3 | a5
	a7 = a7 << 31
	a7 = a7 | a2
	a7 = a7 | a4
	a2 = 0
	a3 = -1
	branch a7 == 0x00000000 l40210F27
	// succ:  l40210F24_1 l40210F27
l40210F24_1:
	a2 = a3
	// succ:  l40210F27
l40210F27:
	return
	// succ:  fn40210EEC_exit
fn40210EEC_exit:


// __unorddf2
// Return size: 0
void __unorddf2()
__unorddf2_entry:
	// succ:  l40210F2C
l40210F2C:
	a1 = fp
	a6 = 0x40204460
	branch (~a3 & a6) == 0x00000000 l40210F39
	// succ:  l40210F32 l40210F39
l40210F32:
	branch (~a5 & a6) == 0x00000000 l40210F48
	// succ:  l40210F35 l40210F48
l40210F35:
	a2 = 0
	return
	// succ:  __unorddf2_exit
l40210F39:
	a7 = a3 << 20
	a7 = a7 | a2
	branch a7 == 0x00000000 l40210F32
	// succ:  l40210F42 l40210F32
l40210F42:
	a2 = 1
	return
	// succ:  __unorddf2_exit
l40210F48:
	a7 = a5 << 20
	a7 = a7 | a4
	branch a7 == 0x00000000 l40210F35
	// succ:  l40210F51 l40210F35
l40210F51:
	a2 = 1
	return
	// succ:  __unorddf2_exit
__unorddf2_exit:


// __fixdfsi
// Return size: 0
void __fixdfsi()
__fixdfsi_entry:
	// succ:  l40210F58
l40210F58:
	a1 = fp
	a6 = 0x40204460
	branch (~a3 & a6) == 0x00000000 l40210F84
	// succ:  l40210F5E l40210F84
l40210F5E:
	a4 = a3 >>u 0x00000014 & 0x000007FF
	a5 = a6 >>u 0x00000013 & 0x000003FF
	a4 = a4 - a5
	branch a4 >= 32 l40210F90
	// succ:  l40210F6A l40210F90
l40210F6A:
	branch a4 < 1 l40210F9C
	// succ:  l40210F6D l40210F9C
l40210F6D:
	a7 = a3 | a6
	SAR = 0x05
	a5 = (word32) (a7_a2 >>u SAR)
	SAR = 0x00000020 - a4
	a5 = a5 >> SAR
	a2 = -a5
	branch a7 < 0x00000000 l40210F82
	// succ:  l40210F7F_1 l40210F82
l40210F7F_1:
	a2 = a5
	// succ:  l40210F82
l40210F82:
	return
	// succ:  __fixdfsi_exit
l40210F84:
	a4 = a3 << 20
	a4 = a4 | a2
	branch a4 == 0x00000000 l40210F90
	// succ:  l40210F8D l40210F90
l40210F8D:
	a3 = 0x00000000
	// succ:  l40210F90
l40210F90:
	a4 = a6 << 21
	a5 = a4 - 1
	branch a3 < 0x00000000 l40210F98
	// succ:  l40210F95_1 l40210F98
l40210F95_1:
	a4 = a5
	// succ:  l40210F98
l40210F98:
	a2 = a4
	return
	// succ:  __fixdfsi_exit
l40210F9C:
	a2 = 0
	return
	// succ:  __fixdfsi_exit
__fixdfsi_exit:


// __fixunsdfsi
// Return size: 0
void __fixunsdfsi()
__fixunsdfsi_entry:
	// succ:  l40210FA0
l40210FA0:
	a1 = fp
	a6 = 0x40204460
	branch (~a3 & a6) == 0x00000000 l40210FD1
	// succ:  l40210FA6 l40210FD1
l40210FA6:
	a4 = a3 >>u 0x00000014 & 0x000007FF
	a5 = a6 >>u 0x00000014 & 0x000003FF
	a4 = a4 - a5
	branch a4 >= 32 l40210FDD
	// succ:  l40210FB2 l40210FDD
l40210FB2:
	branch a4 < 0x00000000 l40210FE9
	// succ:  l40210FB5 l40210FE9
l40210FB5:
	a7 = a3 | a6
	SAR = 0x05
	a5 = (word32) (a7_a2 >>u SAR)
	a4 = a4 + 1
	branch a4 == 32 l40210FED
	// succ:  l40210FC3 l40210FED
l40210FC3:
	SAR = 0x00000020 - a4
	a5 = a5 >> SAR
	a2 = -a5
	branch a7 < 0x00000000 l40210FCF
	// succ:  l40210FCC_1 l40210FCF
l40210FCC_1:
	a2 = a5
	// succ:  l40210FCF
l40210FCF:
	return
	// succ:  __fixunsdfsi_exit
l40210FD1:
	a4 = a3 << 20
	a4 = a4 | a2
	branch a4 == 0x00000000 l40210FDD
	// succ:  l40210FD9 l40210FDD
l40210FD9:
	a2 = -1
	return
	// succ:  __fixunsdfsi_exit
l40210FDD:
	a4 = a6 << 21
	a5 = -1
	branch a3 < 0x00000000 l40210FE5
	// succ:  l40210FE2_1 l40210FE5
l40210FE2_1:
	a4 = a5
	// succ:  l40210FE5
l40210FE5:
	a2 = a4
	return
	// succ:  __fixunsdfsi_exit
l40210FE9:
	a2 = 0
	return
	// succ:  __fixunsdfsi_exit
l40210FED:
	branch a3 < 0x00000000 l40210FF4
	// succ:  l40210FF0 l40210FF4
l40210FF0:
	a2 = a5
	return
	// succ:  __fixunsdfsi_exit
l40210FF4:
	a2 = a6 << 21
	return
	// succ:  __fixunsdfsi_exit
__fixunsdfsi_exit:


// __truncdfsf2
// Return size: 0
void __truncdfsf2()
__truncdfsf2_entry:
	// succ:  l40210FFC
l40210FFC:
	a1 = fp
	a4 = 0x40204468
	a5 = a3 - a4
	a6 = a3 ^ a5
	branch a6 < 0x00000000 l4021105C
	// succ:  l40211008 l4021105C
l40211008:
	a6 = a5 >>u 0x00000014 & 0x000007FF
	branch a6 == 0x00000000 l4021105C
	// succ:  l4021100E l4021105C
l4021100E:
	a4 = 0x000000FF
	branch a6 >= a4 l4021103C
	// succ:  l40211014 l4021103C
l40211014:
	SAR = 0x0D
	a5 = (word32) (a5_a2 >>u SAR)
	a4 = a2 << SAR
	// succ:  l4021101D
l4021101D:
	a6 = a3 >>u 0x0000001F & 0x00000001
	a6 = a6 << 1
	a2 = a6 | a5
	branch a4 >= 0x00000000 l40211030
	// succ:  l40211029 l40211030
l40211029:
	a2 = a2 + 1
	a4 = a4 << 31
	branch a4 == 0x00000000 l40211034
	// succ:  l40211030 l40211034
l40211030:
	return
	// succ:  __truncdfsf2_exit
l40211034:
	a2 = a2 >>u 1
	a2 = a2 << 31
	return
	// succ:  __truncdfsf2_exit
l4021103C:
	a4 = 0x40204460
	branch (~a3 & a4) != 0x00000000 l4021104D
	// succ:  l40211042 l4021104D
l40211042:
	a5 = a3 << 20
	a5 = a5 | a2
	branch a5 == 0x00000000 l4021104D
	// succ:  l4021104A l4021104D
l4021104A:
	a4 = a4 >>u 1
	// succ:  l4021104D
l4021104D:
	a4 = a4 << 28
	a6 = a3 >>u 0x0000001F & 0x00000001
	SAR = 0x01
	a2 = (word32) (a6_a4 >>u SAR)
	return
	// succ:  __truncdfsf2_exit
l4021105C:
	a6 = a3 >>u 0x00000014 & 0x000007FF
	a5 = 0x00000380
	a6 = a5 - a6
	a6 = a6 + 1
	branch a6 >=u 0x00000020 l40211094
	// succ:  l4021106A l40211094
l4021106A:
	a5 = a5 << 19
	a5 = a5 | a3
	a5 = a5 << 21
	a5 = a5 >>u 11
	SAR = 0x0D
	a5 = (word32) (a5_a2 >>u SAR)
	a4 = a2 << SAR
	SAR = a6
	a7 = a4 << SAR
	a4 = (word32) (a5_a4 >>u SAR)
	a5 = a5 >> SAR
	branch a7 == 0x00000000 l4021101D
	// succ:  l4021108E l4021101D
l4021108E:
	a4 = a4 | a6
	goto l4025101D
	// succ:  l4025101D
l40211094:
	a2 = a3 >>u 0x0000001F & 0x00000001
	a2 = a2 << 1
	return
	// succ:  __truncdfsf2_exit
l4025101D:
__truncdfsf2_exit:


// __popcountsi2
// Return size: 0
void __popcountsi2()
__popcountsi2_entry:
	// succ:  l4021109C
l4021109C:
	a1 = fp
	a4 = 0
	a6 = 0x40204660
	a3 = a4 | a4
	// succ:  l402110A4
l402110A4:
	SAR = a3
	a5 = a2 >> SAR
	a5 = a5 & 0x000000FF
	a5 = a6 + a5
	v9 = Mem0[a5 + 0x00000000:byte]
	a5 = (uint32) v9
	a3 = a3 + 8
	a4 = a4 + a5
	branch a3 != 32 l402110A4
	// succ:  l402110B9 l402110A4
l402110B9:
	a2 = a4
	return
	// succ:  __popcountsi2_exit
__popcountsi2_exit:


// calloc
// Return size: 0
void calloc()
calloc_entry:
	// succ:  l402110C0
l402110C0:
	a1 = fp
	a5 = a2 | a2
	a2 = 0x40203754
	a1 = a1 - 16
	a2 = Mem0[a2 + 0x00000000:word32]
	a4 = a3 | a3
	a3 = a5
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x402110D6
	call fn40309618 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  calloc_exit
calloc_exit:


// strncpy
// Return size: 0
void strncpy()
strncpy_entry:
	goto l40211118
	// succ:  l40211118
l402110E0:
	v16 = Mem0[a3 + 0x00000000:byte]
	a8 = (uint32) v16
	a3 = a3 + 1
	Mem0[a10:byte] = a8
	a4 = a4 - 1
	branch a4 == 0x00000000 l40211115
	// succ:  l402110EC l40211115
l402110EC:
	a10 = a10 + 1
	branch a8 == 0x00000000 l40211139
	// succ:  l402110F1 l40211139
l402110F1:
	branch (a3 & 0x00000002) == 0x00000000 l40211130
	// succ:  l402110F4 l40211130
l402110F4:
	v13 = Mem0[a3 + 0x00000000:byte]
	a8 = (uint32) v13
	a4 = a4 - 1
	Mem0[a10:byte] = a8
	branch a4 == 0x00000000 l40211115
	v17 = Mem0[a3 + 0x00000000:byte]
	a8 = (uint32) v17
	a4 = a4 - 1
	Mem0[a10:byte] = a8
	branch a4 == 0x00000000 l40211115
	// succ:  l402110FE l40211115
l402110FE:
	a10 = a10 + 1
	branch a8 == 0x00000000 l40211139
	a10 = a10 + 1
	branch a8 == 0x00000000 l40211139
	// succ:  l40211102 l40211139
l40211102:
	v14 = Mem0[a3 + 0x00000001:byte]
	a8 = (uint32) v14
	a3 = a3 + 2
	Mem0[a10:byte] = a8
	a4 = a4 - 1
	branch a4 == 0x00000000 l40211115
	v18 = Mem0[a3 + 0x00000001:byte]
	a8 = (uint32) v18
	a3 = a3 + 2
	Mem0[a10:byte] = a8
	a4 = a4 - 1
	branch a4 == 0x00000000 l40211115
	// succ:  l4021110E l40211115
l4021110E:
	a10 = a10 + 1
	branch a8 != 0x00000000 l40211130
	a10 = a10 + 1
	branch a8 != 0x00000000 l40211130
	// succ:  l40211112 l40211130
l40211112:
	goto l40211139
	// succ:  l40211139
l40211115:
	return
	// succ:  strncpy_exit
l40211118:
	a1 = fp
	a10 = a2 | a2
	branch a4 == 0x00000000 l40211115
	// succ:  l4021111E l40211115
l4021111E:
	a11 = 0x000000FF
	a5 = 0x40204510
	a6 = 0x40204514
	a7 = 0x40204518
	branch (a3 & 0x00000001) != 0x00000000 l402110E0
	// succ:  l4021112D l402110E0
l4021112D:
	branch (a3 & 0x00000002) != 0x00000000 l402110F4
	// succ:  l40211130 l402110F4
l40211130:
	a8 = 3
	branch (a10 & a8) == 0x00000000 l40211180
	// succ:  l40211135 l40211180
l40211135:
	goto l402111C4
	// succ:  l402111C4
l40211139:
	a9 = 0
	branch (a10 & 0x00000001) != 0x00000000 l4021115C
	// succ:  l4021113E l4021115C
l4021113E:
	branch (a10 & 0x00000002) != 0x00000000 l40211169
	// succ:  l40211141 l40211169
l40211141:
	branch a4 < 4 l40211150
	// succ:  l40211144 l40211150
l40211144:
	Mem0[a10:word32] = a9
	a10 = a10 + 4
	a4 = a4 - 4
	branch a4 >= 4 l40211144
	// succ:  l4021114E l40211144
l4021114E:
	branch a4 == 0x00000000 l4021115A
	// succ:  l40211150 l4021115A
l40211150:
	Mem0[a10:byte] = a9
	a4 = a4 - 1
	a10 = a10 + 1
	branch a4 != 0x00000000 l40211150
	// succ:  l4021115A l40211150
l4021115A:
	return
	// succ:  strncpy_exit
l4021115C:
	Mem0[a10:byte] = a9
	a4 = a4 - 1
	branch a4 == 0x00000000 l4021115A
	// succ:  l40211164 l4021115A
l40211164:
	a10 = a10 + 1
	branch (a10 & 0x00000002) == 0x00000000 l40211141
	// succ:  l40211169 l40211141
l40211169:
	Mem0[a10:byte] = a9
	a4 = a4 - 1
	branch a4 == 0x00000000 l4021115A
	Mem0[a10:byte] = a9
	a4 = a4 - 1
	branch a4 == 0x00000000 l4021115A
	// succ:  l40211171 l4021115A
l40211171:
	Mem0[a10 + 0x00000001:byte] = a9
	a4 = a4 - 1
	branch a4 == 0x00000000 l4021115A
	Mem0[a10 + 0x00000001:byte] = a9
	a4 = a4 - 1
	branch a4 == 0x00000000 l4021115A
	// succ:  l40211179 l4021115A
l40211179:
	a10 = a10 + 2
	a10 = a10 + 2
	goto l40251141
	// succ:  l40251141
l40211180:
	branch a4 < 5 l402111C4
	// succ:  l40211183 l402111C4
l40211183:
	a8 = Mem0[a3 + 0x00000000:word32]
	a3 = a3 + 4
	branch (a8 & a11) == 0x00000000 l4021119D
	// succ:  l4021118A l4021119D
l4021118A:
	branch (a8 & a5) == 0x00000000 l402111A8
	// succ:  l4021118D l402111A8
l4021118D:
	branch (a8 & a6) == 0x00000000 l402111B4
	// succ:  l40211190 l402111B4
l40211190:
	Mem0[a10:word32] = a8
	a4 = a4 - 4
	a10 = a10 + 4
	branch (a8 & a7) != 0x00000000 l40211180
	// succ:  l4021119A l40211180
l4021119A:
	goto l40251139
	// succ:  l40251139
l4021119D:
	Mem0[a10:byte] = a8
	a4 = a4 - 1
	a10 = a10 + 1
	goto l40251139
	// succ:  l40251139
l402111A8:
	Mem0[a10:word16] = a8
	a4 = a4 - 2
	a10 = a10 + 2
	goto l40251139
	// succ:  l40251139
l402111B4:
	Mem0[a10:word16] = a8
	a8 = 0
	Mem0[a10 + 0x00000002:byte] = a8
	a4 = a4 - 3
	a10 = a10 + 3
	goto l40251139
	// succ:  l40251139
l402111C4:
	v12 = Mem0[a3 + 0x00000000:byte]
	a8 = (uint32) v12
	a3 = a3 + 1
	Mem0[a10:byte] = a8
	a4 = a4 - 1
	branch a4 == 0x00000000 l402111D8
	// succ:  l402111D0 l402111D8
l402111D0:
	a10 = a10 + 1
	branch a8 != 0x00000000 l402111C4
	// succ:  l402111D5 l402111C4
l402111D5:
	goto l40251139
	// succ:  l40251139
l402111D8:
	return
	// succ:  strncpy_exit
l40251139:
l40251141:
strncpy_exit:


// strrchr
// Return size: 0
void strrchr()
strrchr_entry:
	// succ:  l402111DC
l402111DC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a0
	a13 = a3
	a12 = 0
	branch a3 != 0x00000000 l402111F2
	// succ:  l402111EB l402111F2
l402111EB:
	goto l40211202
	// succ:  l40211202
l402111EE:
	a2 = a3 + 1
	a12 = a3
	// succ:  l402111F2
l402111F2:
	a3 = a13
	a0 = 0x402111F7
	call strchr (retsize: 0;)
	a3 = a2
	branch a2 != 0x00000000 l402111EE
	// succ:  l402111FC l402111EE
l402111FC:
	goto l40211208
	// succ:  l40211208
l40211202:
	a0 = 0x40211205
	call strchr (retsize: 0;)
	a12 = a2 | a2
	// succ:  l40211208
l40211208:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12 | a12
	a13 = Mem0[a1 + 0x00000004:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  strrchr_exit
strrchr_exit:


// vListInitialise
// Return size: 0
void vListInitialise()
vListInitialise_entry:
	// succ:  l40211220
l40211220:
	a1 = fp
	a3 = a2 + 8
	Mem0[a2 + 0x00000004:word32] = a3
	a4 = -1
	Mem0[a2 + 0x0000000C:word32] = a3
	Mem0[a2 + 0x00000010:word32] = a3
	a3 = 0
	Mem0[a2 + 0x00000008:word32] = a4
	Mem0[a2:word32] = a3
	return
	// succ:  vListInitialise_exit
vListInitialise_exit:


// vListInitialiseItem
// Return size: 0
void vListInitialiseItem()
vListInitialiseItem_entry:
	// succ:  l40211234
l40211234:
	a1 = fp
	a3 = 0
	Mem0[a2 + 0x00000010:word32] = a3
	return
	// succ:  vListInitialiseItem_exit
vListInitialiseItem_exit:


// xthal_get_ccount
// Return size: 0
void xthal_get_ccount()
xthal_get_ccount_entry:
xthal_get_ccount_exit:


// xthal_set_ccompare
// Return size: 0
void xthal_set_ccompare()
xthal_set_ccompare_entry:
	// succ:  l402113A4
l402113A4:
	a1 = fp
	branch a2 != 0x00000000 l402113AC
	// succ:  l402113A6 l402113AC
l402113A6:
	CCOMPARE0 = a3
l402113AC:
	return
	// succ:  xthal_set_ccompare_exit
xthal_set_ccompare_exit:


// xthal_get_ccompare
// Return size: 0
void xthal_get_ccompare()
xthal_get_ccompare_entry:
	// succ:  l402113B0
l402113B0:
	a1 = fp
	branch a2 != 0x00000000 l402113B8
	// succ:  l402113B2 l402113B8
l402113B2:
	a2 = CCOMPARE0
	return
	// succ:  xthal_get_ccompare_exit
l402113B8:
	a2 = 0
	return
	// succ:  xthal_get_ccompare_exit
xthal_get_ccompare_exit:


// __floatunsisf
// Return size: 0
void __floatunsisf()
__floatunsisf_entry:
	// succ:  l402113BC
l402113BC:
	a1 = fp
	branch a2 == 0x00000000 l402113F6_in___floatunsisf
	// succ:  l402113BE l402113F6_in___floatunsisf
l402113BE:
	a7 = 0
	// succ:  l402113C0_thunk_fn402113CC
l402113C0_thunk_fn402113CC:
	call fn402113CC (retsize: 0;)
	return
	// succ:  __floatunsisf_exit
l402113F6_in___floatunsisf:
	return
	// succ:  __floatunsisf_exit
__floatunsisf_exit:


// __floatsisf
// Return size: 0
void __floatsisf()
__floatsisf_entry:
	// succ:  l402113C4
l402113C4:
	a1 = fp
	branch a2 == 0x00000000 l402113F6
	goto l402113C6
	// succ:  l402113C6 l402113C4_thunk_fn402113EF
l402113C4_thunk_fn402113EF:
	call fn402113EF (retsize: 0;)
	return
	// succ:  __floatsisf_exit
l402113C6:
	a7 = a2 >>u 0x0000001F & 0x00000001
	a2 = abs(a2)
	// succ:  l402113C9_thunk_fn402113CC
l402113C9_thunk_fn402113CC:
	call fn402113CC (retsize: 0;)
	return
	// succ:  __floatsisf_exit
__floatsisf_exit:


// fn402113CC
// Return size: 0
void fn402113CC()
fn402113CC_entry:
	// succ:  l402113CC
l402113CC:
	a1 = fp
	a4 = __nsau(a2)
	SAR = 0x00000020 - a4
	a5 = a2 << SAR
	a2 = a5 >>u 8
	a6 = a5 << 8
	a5 = 0x0000009D
	a5 = a5 - a4
	a5 = a5 << 9
	a2 = a2 + a5
	a7 = a7 << 1
	a2 = a2 | a7
	branch a6 >= 0x00000000 l402113F6_in_fn402113CC
	goto l402113EC_thunk_fn402113EF
	// succ:  l402113EC_thunk_fn402113EF l402113F6_in_fn402113CC
l402113CC:
	a4 = __nsau(a2)
	SAR = 0x00000020 - a4
	a5 = a2 << SAR
	a2 = a5 >>u 8
	a6 = a5 << 8
	a5 = 0x0000009D
	a5 = a5 - a4
	a5 = a5 << 9
	a2 = a2 + a5
	a7 = a7 << 1
	a2 = a2 | a7
	branch a6 >= 0x00000000 l402113F6
	goto l402113EC_thunk_fn402113EF
	// succ:  l402113EC_thunk_fn402113EF l402113EC_thunk_fn402113EF
l402113EC_thunk_fn402113EF:
	call fn402113EF (retsize: 0;)
	return
	// succ:  fn402113CC_exit l402113EC_thunk_fn402113EF
l402113EC_thunk_fn402113EF:
	call fn402113EF (retsize: 0;)
	return
	// succ:  fn402113CC_exit
l402113EC_thunk_fn402113EF:
	call fn402113EF (retsize: 0;)
	return
	// succ:  fn402113CC_exit
l402113EC_thunk_fn402113EF:
	call fn402113EF (retsize: 0;)
	return
	// succ:  fn402113CC_exit
l402113F6_in_fn402113CC:
	return
	// succ:  fn402113CC_exit
fn402113CC_exit:


// fn402113EF
// Return size: 0
void fn402113EF()
fn402113EF_entry:
	// succ:  l402113EF
l402113EF:
	a1 = v3
	a2 = a2 + 1
	a6 = a6 << 31
	branch a6 == 0x00000000 l402113F8
	// succ:  l402113F6 l402113F8
l402113F6:
	return
	// succ:  fn402113EF_exit
l402113F8:
	a2 = a2 >>u 1
	a2 = a2 << 31
	return
	// succ:  fn402113EF_exit
fn402113EF_exit:


// __floatunsidf
// Return size: 0
void __floatunsidf()
__floatunsidf_entry:
	// succ:  l40211400
l40211400:
	a1 = fp
	branch a2 == 0x00000000 l40211432_in___floatunsidf
	// succ:  l40211402 l40211432_in___floatunsidf
l40211402:
	a7 = 0
	// succ:  l40211410_in___floatunsidf
l40211410_in___floatunsidf:
	a4 = __nsau(a2)
	SAR = 0x00000020 - a4
	a5 = a2 << SAR
	a3 = a5 >>u 11
	a2 = a5 << 11
	a5 = 0x0000041D
	a5 = a5 - a4
	a5 = a5 << 12
	a3 = a3 + a5
	a7 = a7 << 1
	a3 = a3 | a7
	return
	// succ:  __floatunsidf_exit
l40211432_in___floatunsidf:
	a3 = 0
	return
	// succ:  __floatunsidf_exit
__floatunsidf_exit:


// __floatsidf
// Return size: 0
void __floatsidf()
__floatsidf_entry:
	// succ:  l40211408
l40211408:
	a1 = fp
	branch a2 == 0x00000000 l40211432
	// succ:  l4021140A l40211432
l4021140A:
	a7 = a2 >>u 0x0000001F & 0x00000001
	a2 = abs(a2)
	// succ:  l40211410
l40211410:
	a4 = __nsau(a2)
	SAR = 0x00000020 - a4
	a5 = a2 << SAR
	a3 = a5 >>u 11
	a2 = a5 << 11
	a5 = 0x0000041D
	a5 = a5 - a4
	a5 = a5 << 12
	a3 = a3 + a5
	a7 = a7 << 1
	a3 = a3 | a7
	return
	// succ:  __floatsidf_exit
l40211432:
	a3 = 0
	return
	// succ:  __floatsidf_exit
__floatsidf_exit:


// _mallopt_r
// Return size: 0
void _mallopt_r()
_mallopt_r_entry:
	// succ:  l40211438
l40211438:
	a1 = fp
	a2 = 0
	return
	// succ:  _mallopt_r_exit
_mallopt_r_exit:


// _fwalk
// Return size: 0
void _fwalk()
_fwalk_entry:
	// succ:  l4021143C
l4021143C:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = 0x000000D8
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a15
	a12 = a2 + a12
	a14 = 0
	goto l4021147F
	// succ:  l4021147F
l40211454:
	a13 = Mem0[a12 + 0x00000008:word32]
	a15 = Mem0[a12 + 0x00000004:word32]
	goto l40211478
	// succ:  l40211478
l4021145D:
	v9 = Mem0[a13 + 0x0000000C:uint16]
	a2 = (uint32) v9
	branch a2 <u 0x00000002 l40211475
	// succ:  l40211463 l40211475
l40211463:
	v10 = Mem0[a13 + 0x0000000E:int16]
	a2 = (int32) v10
	branch a2 == -1 l40211475
	// succ:  l40211469 l40211475
l40211469:
	Mem0[a1:word32] = a3
	a2 = a13
	a0 = 0x40211470
	call a3 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a14 = a14 | a2
	// succ:  l40211475
l40211475:
	a13 = a13 + 104
	// succ:  l40211478
l40211478:
	a15 = a15 - 1
	branch a15 >= 0x00000000 l4021145D
	// succ:  l4021147D l4021145D
l4021147D:
	a12 = Mem0[a12 + 0x00000000:word32]
	// succ:  l4021147F
l4021147F:
	branch a12 != 0x00000000 l40211454
	// succ:  l40211482 l40211454
l40211482:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a14
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  _fwalk_exit
_fwalk_exit:


// _fwalk_reent
// Return size: 0
void _fwalk_reent()
_fwalk_reent_entry:
	// succ:  l40211494
l40211494:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	a12 = 0x000000D8
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a15
	a4 = a2
	a5 = a3
	a12 = a2 + a12
	a14 = 0
	goto l402114E2
	// succ:  l402114E2
l402114B0:
	a13 = Mem0[a12 + 0x00000008:word32]
	a15 = Mem0[a12 + 0x00000004:word32]
	goto l402114DB
	// succ:  l402114DB
l402114B9:
	v12 = Mem0[a13 + 0x0000000C:uint16]
	a2 = (uint32) v12
	branch a2 <u 0x00000002 l402114D8
	// succ:  l402114BF l402114D8
l402114BF:
	v13 = Mem0[a13 + 0x0000000E:int16]
	a2 = (int32) v13
	branch a2 == -1 l402114D8
	// succ:  l402114C5 l402114D8
l402114C5:
	a2 = a4
	Mem0[a1:word32] = a4
	Mem0[a1 + 0x00000004:word32] = a5
	a3 = a13 | a13
	a0 = 0x402114D1
	call a5 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000004:word32]
	a4 = Mem0[a1 + 0x00000000:word32]
	a14 = a14 | a2
	// succ:  l402114D8
l402114D8:
	a13 = a13 + 104
	// succ:  l402114DB
l402114DB:
	a15 = a15 - 1
	branch a15 >= 0x00000000 l402114B9
	// succ:  l402114E0 l402114B9
l402114E0:
	a12 = Mem0[a12 + 0x00000000:word32]
	// succ:  l402114E2
l402114E2:
	branch a12 != 0x00000000 l402114B0
	// succ:  l402114E5 l402114B0
l402114E5:
	a0 = Mem0[a1 + 0x0000002C:word32]
	a2 = a14
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  _fwalk_reent_exit
_fwalk_reent_exit:


// memchr
// Return size: 0
void memchr()
memchr_entry:
	// succ:  l402114F8
l402114F8:
	a1 = fp
	a3 = a3 & 0x000000FF
	a4 = a2 + a4
	goto l40211508
	// succ:  l40211508
l40211500:
	v7 = Mem0[a2 + 0x00000000:byte]
	a5 = (uint32) v7
	branch a5 == a3 l4021150D
	// succ:  l40211506 l4021150D
l40211506:
	a2 = a2 + 1
	// succ:  l40211508
l40211508:
	branch a2 != a4 l40211500
	// succ:  l4021150B l40211500
l4021150B:
	a2 = 0
	// succ:  l4021150D
l4021150D:
	return
	// succ:  memchr_exit
memchr_exit:


// strncmp
// Return size: 0
void strncmp()
strncmp_entry:
	// succ:  l40211510
l40211510:
	a1 = fp
	a5 = a2
	a2 = 0
	branch a4 == a2 l40211541
	// succ:  l40211517 l40211541
l40211517:
	goto l40211535
	// succ:  l40211535
l4021151D:
	branch a4 != 1 l4021152C
	// succ:  l40211520 l4021152C
l40211520:
	v10 = Mem0[a5 + 0x00000000:byte]
	a4 = (uint32) v10
	v11 = Mem0[a3 + 0x00000000:byte]
	a2 = (uint32) v11
	a2 = a4 - a2
	return
	// succ:  strncmp_exit
l4021152C:
	a4 = a4 - 1
	branch a2 == 0x00000000 l40211520
	// succ:  l40211531 l40211520
l40211531:
	a5 = a5 + 1
	a3 = a3 + 1
	// succ:  l40211535
l40211535:
	v7 = Mem0[a5 + 0x00000000:byte]
	a6 = (uint32) v7
	v8 = Mem0[a3 + 0x00000000:byte]
	a2 = (uint32) v8
	branch a2 == a6 l4021151D
	// succ:  l4021153E l4021151D
l4021153E:
	goto l40251520
	// succ:  l40251520
l40211541:
	return
	// succ:  strncmp_exit
l40251520:
strncmp_exit:


// _malloc_usable_size_r
// Return size: 0
void _malloc_usable_size_r()
_malloc_usable_size_r_entry:
	// succ:  l40211544
l40211544:
	a1 = fp
	a3 = a3 - 4
	a4 = Mem0[a3 + 0x00000000:word32]
	a2 = a4 - 4
	branch a4 >= 0x00000000 l40211558
	// succ:  l4021154F l40211558
l4021154F:
	a3 = a3 + a4
	a2 = Mem0[a3 + 0x00000000:word32]
	a4 = a4 + a2
	a2 = a4 - 4
	// succ:  l40211558
l40211558:
	return
	// succ:  _malloc_usable_size_r_exit
_malloc_usable_size_r_exit:


// tcp_init
// Return size: 0
void tcp_init()
tcp_init_entry:
	// succ:  l40212260
l40212260:
	a1 = fp
	return
	// succ:  tcp_init_exit
tcp_init_exit:


// pbuf_header
// Return size: 0
void pbuf_header()
pbuf_header_entry:
	// succ:  l4021229C
l4021229C:
	a1 = fp
	a3 = a3 << 16
	a3 = a3 >> 16
	a5 = 1
	a4 = 0
	branch a3 != 0x00000000 l402122A9
	// succ:  l402122A6_1 l402122A9
l402122A6_1:
	a4 = a5
	// succ:  l402122A9
l402122A9:
	a6 = a4 & 0x000000FF
	a4 = a2 | a2
	branch a6 != 0x00000000 l4021232E
	// succ:  l402122B2 l4021232E
l402122B2:
	branch a2 == 0x00000000 l402122B5
	// succ:  l402122B2_2 l402122B5
l402122B2_2:
	a5 = a6
	// succ:  l402122B5
l402122B5:
	branch a5 != 0x00000000 l4021232E
	// succ:  l402122B8 l4021232E
l402122B8:
	a8 = a3 & 0x0000FFFF
	branch a3 >= 0x00000000 l402122C4
	// succ:  l402122BE l402122C4
l402122BE:
	a8 = -a3
	a8 = a8 & 0x0000FFFF
	// succ:  l402122C4
l402122C4:
	v9 = Mem0[a4 + 0x0000000C:byte]
	a6 = (uint32) v9
	a2 = 1
	a7 = a6 - 3
	a5 = 0
	branch a7 != 0x00000000 l402122D1
	// succ:  l402122CE_1 l402122D1
l402122CE_1:
	a5 = a2
	// succ:  l402122D1
l402122D1:
	a5 = a5 & 0x000000FF
	a7 = Mem0[a4 + 0x00000004:word32]
	branch a5 != 0x00000000 l402122DD
	// succ:  l402122D8 l402122DD
l402122D8:
	branch a6 != 0x00000000 l402122DB
	// succ:  l402122D8_2 l402122DB
l402122D8_2:
	a5 = a2
	// succ:  l402122DB
l402122DB:
	branch a5 == 0x00000000 l402122F4
	// succ:  l402122DD l402122F4
l402122DD:
	a2 = a7 - a3
	Mem0[a4 + 0x00000004:word32] = a2
	a5 = a4 + 56
	branch a2 <u a5 l402122EE
	// succ:  l402122E8 l402122EE
l402122E8:
	v11 = Mem0[a4 + 0x0000000A:uint16]
	a2 = (uint32) v11
	goto l4021231A
	// succ:  l4021231A
l402122EE:
	Mem0[a4 + 0x00000004:word32] = a7
	a2 = 1
	return
	// succ:  pbuf_header_exit
l402122F4:
	a5 = a6 - 1
	a5 = a5 & 0x0000FFFF
	branch a5 >=u 0x00000002 l40212330
	// succ:  l402122FC l40212330
l402122FC:
	branch a3 >= 0x00000000 l4021230D
	// succ:  l402122FF l4021230D
l402122FF:
	v13 = Mem0[a4 + 0x0000000A:uint16]
	a2 = (uint32) v13
	branch a2 <u a8 l4021230D
	// succ:  l40212305 l4021230D
l40212305:
	a7 = a7 - a3
	Mem0[a4 + 0x00000004:word32] = a7
	goto l4021231A
	// succ:  l4021231A
l4021230D:
	a2 = 1
	branch a6 != 2 l40212330
	// succ:  l40212312 l40212330
l40212312:
	a7 = a7 - a3
	v14 = Mem0[a4 + 0x0000000A:uint16]
	a2 = (uint32) v14
	Mem0[a4 + 0x00000004:word32] = a7
	// succ:  l4021231A
l4021231A:
	v12 = Mem0[a4 + 0x00000008:uint16]
	a5 = (uint32) v12
	a3 = a3 & 0x0000FFFF
	a2 = a2 + a3
	a3 = a3 + a5
	Mem0[a4 + 0x0000000A:word16] = a2
	Mem0[a4 + 0x00000008:word16] = a3
	a2 = 0
	return
	// succ:  pbuf_header_exit
l4021232E:
	a2 = 0
	// succ:  l40212330
l40212330:
	return
	// succ:  pbuf_header_exit
pbuf_header_exit:


// pbuf_clen
// Return size: 0
void pbuf_clen()
pbuf_clen_entry:
	// succ:  l40212348
l40212348:
	a1 = fp
	a3 = a2
	branch a2 == 0x00000000 l4021235A
	// succ:  l4021234C l4021235A
l4021234C:
	a2 = 0
	// succ:  l4021234E
l4021234E:
	a3 = Mem0[a3 + 0x00000000:word32]
	a2 = a2 + 1
	a2 = a2 & 0x000000FF
	branch a3 != 0x00000000 l4021234E
	// succ:  l40212358 l4021234E
l40212358:
	return
	// succ:  pbuf_clen_exit
l4021235A:
	return
	// succ:  pbuf_clen_exit
pbuf_clen_exit:


// netif_init
// Return size: 0
void netif_init()
netif_init_entry:
	// succ:  l4021235C
l4021235C:
	a1 = fp
	return
	// succ:  netif_init_exit
netif_init_exit:


// netif_set_gw
// Return size: 0
void netif_set_gw()
netif_set_gw_entry:
	// succ:  l40212360
l40212360:
	a1 = fp
	branch a3 == 0x00000000 l40212364
	// succ:  l40212362 l40212364
l40212362:
	a3 = Mem0[a3 + 0x00000000:word32]
	// succ:  l40212364
l40212364:
	Mem0[a2 + 0x0000000C:word32] = a3
	return
	// succ:  netif_set_gw_exit
netif_set_gw_exit:


// netif_set_netmask
// Return size: 0
void netif_set_netmask()
netif_set_netmask_entry:
	// succ:  l40212368
l40212368:
	a1 = fp
	branch a3 == 0x00000000 l4021236C
	// succ:  l4021236A l4021236C
l4021236A:
	a3 = Mem0[a3 + 0x00000000:word32]
	// succ:  l4021236C
l4021236C:
	Mem0[a2 + 0x00000008:word32] = a3
	return
	// succ:  netif_set_netmask_exit
netif_set_netmask_exit:


// stats_init
// Return size: 0
void stats_init()
stats_init_entry:
	// succ:  l40212370
l40212370:
	a1 = fp
	return
	// succ:  stats_init_exit
stats_init_exit:


// udp_init
// Return size: 0
void udp_init()
udp_init_entry:
	// succ:  l40212374
l40212374:
	a1 = fp
	return
	// succ:  udp_init_exit
udp_init_exit:


// udp_recv
// Return size: 0
void udp_recv()
udp_recv_entry:
	// succ:  l40212378
l40212378:
	a1 = fp
	Mem0[a2 + 0x00000018:word32] = a3
	Mem0[a2 + 0x0000001C:word32] = a4
	return
	// succ:  udp_recv_exit
udp_recv_exit:


// ip4_addr_isbroadcast
// Return size: 0
void ip4_addr_isbroadcast()
ip4_addr_isbroadcast_entry:
	// succ:  l40212380
l40212380:
	a1 = fp
	a5 = a2 - 1
	a6 = -3
	a4 = 1
	branch a6 <u a5 l402123B1
	// succ:  l40212389 l402123B1
l40212389:
	v7 = Mem0[a3 + 0x0000002F:byte]
	a5 = (uint32) v7
	a4 = 0
	branch (a5 & 0x00000002) == 0x00000000 l402123B1
	// succ:  l40212391 l402123B1
l40212391:
	a5 = Mem0[a3 + 0x00000004:word32]
	branch a5 == a2 l402123B1
	// succ:  l40212396 l402123B1
l40212396:
	a3 = Mem0[a3 + 0x00000008:word32]
	a5 = a2 ^ a5
	branch (a5 & a3) != 0x00000000 l402123B1
	// succ:  l4021239E l402123B1
l4021239E:
	a5 = -1
	a3 = a5 ^ a3
	a2 = a2 & a3
	a3 = a3 - a2
	a5 = 1
	branch a3 != 0x00000000 l402123AE
	// succ:  l402123AB_1 l402123AE
l402123AB_1:
	a4 = a5
	// succ:  l402123AE
l402123AE:
	a4 = a4 & 0x000000FF
	// succ:  l402123B1
l402123B1:
	a2 = a4
	return
	// succ:  ip4_addr_isbroadcast_exit
ip4_addr_isbroadcast_exit:


// lwip_standard_chksum
// Return size: 0
void lwip_standard_chksum()
lwip_standard_chksum_entry:
	// succ:  l402123C0
l402123C0:
	a1 = fp
	a1 = a1 - 16
	a4 = 0
	Mem0[a1:word16] = a4
	a9 = a2 & 0x00000001
	branch a9 == 0x00000000 l402123E0
	// succ:  l402123CD l402123E0
l402123CD:
	a4 = a3 >> 31
	a4 = a4 - a3
	branch a4 >= 0x00000000 l402123E0
	// succ:  l402123D6 l402123E0
l402123D6:
	v7 = Mem0[a2 + 0x00000000:byte]
	a4 = (uint32) v7
	a3 = a3 - 1
	Mem0[a1 + 0x00000001:byte] = a4
	a2 = a2 + 1
	// succ:  l402123E0
l402123E0:
	branch a3 < 2 l4021240E
	// succ:  l402123E3 l4021240E
l402123E3:
	a3 = a3 - 2
	a8 = a3 >>u 1
	a7 = a2 + 2
	a4 = a2 | a2
	a7 = a7 + a8 * 0x00000002
	a5 = 0x00000000
	// succ:  l402123F4
l402123F4:
	v12 = Mem0[a4 + 0x00000000:uint16]
	a6 = (uint32) v12
	a4 = a4 + 2
	a5 = a5 + a6
	branch a4 != a7 l402123F4
	// succ:  l402123FE l402123F4
l402123FE:
	a4 = a8 + 1
	a8 = a8 << 31
	a2 = a2 + a4 * 0x00000002
	a3 = a3 - a8
	goto l40212410
	// succ:  l40212410
l4021240E:
	a5 = 0
	// succ:  l40212410
l40212410:
	branch a3 != 1 l40212419
	// succ:  l40212413 l40212419
l40212413:
	v13 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v13
	Mem0[a1:byte] = a2
	// succ:  l40212419
l40212419:
	v14 = Mem0[a1 + 0x00000000:uint16]
	a2 = (uint32) v14
	a5 = a5 + a2
	a2 = a5 >>u 0x00000010 & 0x0000FFFF
	a5 = a5 & 0x0000FFFF
	a5 = a5 + a2
	a3 = a5 >>u 0x00000010 & 0x0000FFFF
	a2 = a5 & 0x0000FFFF
	a2 = a2 + a3
	branch a9 == 0x00000000 l4021243C
	// succ:  l40212430 l4021243C
l40212430:
	a3 = a2 >>u 0x00000008 & 0x000000FF
	a2 = a2 << 24
	a2 = a3 | a2
	a2 = a2 & 0x0000FFFF
	// succ:  l4021243C
l4021243C:
	a2 = a2 & 0x0000FFFF
	a1 = a1 + 16
	return
	// succ:  lwip_standard_chksum_exit
lwip_standard_chksum_exit:


// sys_init
// Return size: 0
void sys_init()
sys_init_entry:
	// succ:  l40212454
l40212454:
	a1 = fp
	return
	// succ:  sys_init_exit
sys_init_exit:


// lwip_socket_init
// Return size: 0
void lwip_socket_init()
lwip_socket_init_entry:
	// succ:  l40212458
l40212458:
	a1 = fp
	return
	// succ:  lwip_socket_init_exit
lwip_socket_init_exit:


// _close_r
// Return size: 0
void _close_r()
_close_r_entry:
	// succ:  l4021247C
l4021247C:
	a1 = fp
	a3 = 88
	Mem0[a2:word32] = a3
	a2 = -1
	return
	// succ:  _close_r_exit
_close_r_exit:


// sdk_uart_buff_switch
// Return size: 0
void sdk_uart_buff_switch()
sdk_uart_buff_switch_entry:
	// succ:  l40212484
l40212484:
	a1 = fp
	return
	// succ:  sdk_uart_buff_switch_exit
sdk_uart_buff_switch_exit:


// sdk_Uart_Init
// Return size: 0
void sdk_Uart_Init()
sdk_Uart_Init_entry:
	// succ:  l40212488
l40212488:
	a1 = fp
	return
	// succ:  sdk_Uart_Init_exit
sdk_Uart_Init_exit:


// strchr
// Return size: 0
void strchr()
strchr_entry:
	// succ:  l4021258C
l4021258C:
	a1 = fp
	a3 = a3 & 0x000000FF
	goto l40212594
	// succ:  l40212594
l40212592:
	a2 = a2 + 1
	// succ:  l40212594
l40212594:
	v5 = Mem0[a2 + 0x00000000:byte]
	a4 = (uint32) v5
	branch a4 == 0x00000000 l4021259E
	// succ:  l40212599 l4021259E
l40212599:
	branch a4 != a3 l40212592
	// succ:  l4021259C l40212592
l4021259C:
	return
	// succ:  strchr_exit
l4021259E:
	branch a3 == 0x00000000 l402125A2
	// succ:  l402125A0 l402125A2
l402125A0:
	a2 = a4
	// succ:  l402125A2
l402125A2:
	return
	// succ:  strchr_exit
strchr_exit:


// sdk_ets_timer_setfn
// Return size: 0
void sdk_ets_timer_setfn()
sdk_ets_timer_setfn_entry:
	// succ:  l40212614
l40212614:
	a1 = fp
	Mem0[a2 + 0x00000010:word32] = a3
	Mem0[a2 + 0x00000018:word32] = a4
	a5 = -1
	a6 = 0
	Mem0[a2 + 0x00000008:word32] = a6
	Mem0[a2 + 0x0000000C:word32] = a6
	Mem0[a2:word32] = a5
	return
	// succ:  sdk_ets_timer_setfn_exit
sdk_ets_timer_setfn_exit:


// sdk_ets_timer_arm_ms_us
// Return size: 0
void sdk_ets_timer_arm_ms_us()
sdk_ets_timer_arm_ms_us_entry:
	// succ:  l40212694
l40212694:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	a12 = a2
	a2 = a3
	a3 = a4
	a4 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1:word32] = a0
	branch a4 == -1 l402126B6
	// succ:  l402126A8 l402126B6
l402126A8:
	a2 = 0x40212688
	a3 = a12
	a0 = 0x402034D0
	v9 = a0
	a0 = 0x402126B3
	call v9 (retsize: 0;)
	goto l402526B3
	// succ:  l402526B3
l402126B6:
	branch a5 != 1 l402126BF
	// succ:  l402126B9 l402126BF
l402126B9:
	a0 = 0x000003E8
	a2 = a2 * a0
	// succ:  l402126BF
l402126BF:
	branch a2 == 0x00000000 l402126F1
	// succ:  l402126C1 l402126F1
l402126C1:
	Mem0[a1 + 0x0000000C:word32] = a3
	a4 = 0x0000035A
	branch a4 >=u a2 l402126DB
	// succ:  l402126C9 l402126DB
l402126C9:
	a13 = a2 >>u 2
	a0 = a2 & 0x00000003
	a0 = a0 + a0 * 0x00000004
	a13 = a13 + a13 * 0x00000004
	a13 = a0 + a13 * 0x00000004
	goto l402126F3
	// succ:  l402126F3
l402126DB:
	a4 = 0x4021268C
	a3 = 0x40212690
	a2 = a2 * a4
	a0 = 0x40204388
	v11 = a0
	a0 = 0x402126EA
	call v11 (retsize: 0;)
	a13 = a2
	a3 = Mem0[a1 + 0x0000000C:word32]
	goto l402126F3
	// succ:  l402126F3
l402126F1:
	a13 = 0
	// succ:  l402126F3
l402126F3:
	branch a3 == 0x00000000 l402126F7
	// succ:  l402126F5 l402126F7
l402126F5:
	Mem0[a12 + 0x0000000C:word32] = a13
	// succ:  l402126F7
l402126F7:
	a0 = 0x40202680
	v12 = a0
	a0 = 0x402126FD
	call v12 (retsize: 0;)
	a3 = a12
	a2 = 0x402125CC
	a2 = Mem0[a2 + 0x00000024:word32]
	a2 = a13 + a2
	a0 = 0x4021270C
	call fn40312630 (retsize: 0;)
	a0 = 0x40202688
	v13 = a0
	a0 = 0x40212712
	call v13 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ets_timer_arm_ms_us_exit
l402526B3:
sdk_ets_timer_arm_ms_us_exit:


// sdk_ets_timer_arm_us
// Return size: 0
void sdk_ets_timer_arm_us()
sdk_ets_timer_arm_us_entry:
	// succ:  l40212720
l40212720:
	a1 = fp
	a5 = 0
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021272A
	call fn40312694 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ets_timer_arm_us_exit
sdk_ets_timer_arm_us_exit:


// sdk_ets_timer_arm
// Return size: 0
void sdk_ets_timer_arm()
sdk_ets_timer_arm_entry:
	// succ:  l40212734
l40212734:
	a1 = fp
	a5 = 1
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021273E
	call fn40312694 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ets_timer_arm_exit
sdk_ets_timer_arm_exit:


// sdk_ets_timer_disarm
// Return size: 0
void sdk_ets_timer_disarm()
sdk_ets_timer_disarm_entry:
	// succ:  l40212748
l40212748:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	a0 = 0x40202680
	v6 = a0
	a0 = 0x40212757
	call v6 (retsize: 0;)
	a5 = 0x402125A4
	a0 = Mem0[a5 + 0x00000004:word32]
	a2 = 0
	branch a0 == 0x00000000 l4021276D
	// succ:  l40212760 l4021276D
l40212760:
	branch a12 == a0 l4021276F
	// succ:  l40212763 l4021276F
l40212763:
	a2 = a0
	a0 = Mem0[a0 + 0x00000000:word32]
	branch a0 != 0x00000000 l40212760
	// succ:  l4021276A l40212760
l4021276A:
	goto l4021277C
	// succ:  l4021277C
l4021276D:
	a2 = 0
	// succ:  l4021276F
l4021276F:
	branch a0 == 0x00000000 l4021277C
	// succ:  l40212771 l4021277C
l40212771:
	a0 = Mem0[a0 + 0x00000000:word32]
	branch a2 != 0x00000000 l4021277A
	// succ:  l40212775 l4021277A
l40212775:
	Mem0[a5 + 0x00000004:word32] = a0
	goto l4021277C
	// succ:  l4021277C
l4021277A:
	Mem0[a2:word32] = a0
	// succ:  l4021277C
l4021277C:
	a0 = 0x40202688
	v8 = a0
	a0 = 0x40212782
	call v8 (retsize: 0;)
	a0 = 0
	a2 = -1
	Mem0[a12:word32] = a2
	Mem0[a12 + 0x0000000C:word32] = a0
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ets_timer_disarm_exit
sdk_ets_timer_disarm_exit:


// sdk_ets_timer_done
// Return size: 0
void sdk_ets_timer_done()
sdk_ets_timer_done_entry:
	// succ:  l40212794
l40212794:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = Mem0[a2 + 0x00000000:word32]
	branch a0 == -1 l402127B0
	// succ:  l4021279E l402127B0
l4021279E:
	a2 = 0x40212624
	a3 = 0x40212628
	a4 = 0x00000120
	a0 = 0x4021262C
	v7 = a0
	a0 = 0x402127AD
	call v7 (retsize: 0;)
	goto l402527AD
	// succ:  l402527AD
l402127B0:
	a3 = 0
	a4 = 0
	a0 = 0x402127B7
	call fn40312614 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ets_timer_done_exit
l402527AD:
sdk_ets_timer_done_exit:


// sdk_ets_timer_handler_isr
// Return size: 0
void sdk_ets_timer_handler_isr()
sdk_ets_timer_handler_isr_entry:
	// succ:  l402127C0
l402127C0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a0 = 0x40202680
	v5 = a0
	a0 = 0x402127CD
	call v5 (retsize: 0;)
	a3 = 0x402125CC
	a0 = 0x402125A4
	a5 = Mem0[a3 + 0x00000024:word32]
	a12 = Mem0[a0 + 0x00000004:word32]
	branch a12 == 0x00000000 l40212830
	// succ:  l402127DD l40212830
l402127DD:
	a2 = Mem0[a12 + 0x00000008:word32]
	a4 = a2 - a5
	branch a4 >= 1 l4021282B
	// succ:  l402127E5 l4021282B
l402127E5:
	a5 = -1
	a7 = 0x402125A4
	a8 = Mem0[a12 + 0x00000010:word32]
	Mem0[a7 + 0x0000000C:word32] = a8
	Mem0[a7 + 0x00000008:word32] = a12
	a6 = Mem0[a12 + 0x00000000:word32]
	Mem0[a7 + 0x00000004:word32] = a6
	Mem0[a12:word32] = a5
	a0 = 0x40202688
	v13 = a0
	a0 = 0x402127FC
	call v13 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000010:word32]
	a2 = Mem0[a12 + 0x00000018:word32]
	v14 = a0
	a0 = 0x40212803
	call v14 (retsize: 0;)
	a0 = 0x40202680
	v15 = a0
	a0 = 0x40212809
	call v15 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a12 + 0x0000000C:word32]
	branch a2 != -1 l4021281D
	// succ:  l40212810 l4021281D
l40212810:
	branch a0 == 0x00000000 l4021281D
	// succ:  l40212812 l4021281D
l40212812:
	a2 = Mem0[a12 + 0x00000008:word32]
	a3 = a12
	a2 = a2 + a0
	Mem0[a12 + 0x00000008:word32] = a2
	a0 = 0x4021281D
	call fn40312630 (retsize: 0;)
	// succ:  l4021281D
l4021281D:
	a0 = 0x402125A4
	a3 = 0x402125CC
	a5 = Mem0[a3 + 0x00000024:word32]
	goto l402527D8
	// succ:  l402527D8
l4021282B:
	branch a12 == 0x00000000 l40212830
	// succ:  l4021282D l40212830
l4021282D:
	a0 = 0x40212830
	call fn403125DC (retsize: 0;)
	// succ:  l40212830
l40212830:
	a0 = 0x40202688
	v16 = a0
	a0 = 0x40212836
	call v16 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ets_timer_handler_isr_exit
l402527D8:
sdk_ets_timer_handler_isr_exit:


// sdk_ets_timer_init
// Return size: 0
void sdk_ets_timer_init()
sdk_ets_timer_init_entry:
	// succ:  l40212884
l40212884:
	a1 = fp
	a3 = 0x4021286C
	a1 = a1 - 32
	a2 = 0x402125A4
	Mem0[a1 + 0x00000014:word32] = a0
	a0 = 0x00000000
	Mem0[a2 + 0x00000004:word32] = a0
	a2 = 10
	a0 = 0x402030A0
	v6 = a0
	a0 = 0x4021289D
	call v6 (retsize: 0;)
	a2 = 4
	a3 = 4
	a4 = 0
	a0 = 0x402128A6
	call fn403031E8 (retsize: 0;)
	a5 = 0
	a6 = 12
	a7 = a1 + 16
	a4 = 0x402125A4
	a3 = 0
	Mem0[a4 + 0x00000010:word32] = a2
	a4 = 0x000000C8
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000004:word32] = a3
	a2 = 0x40212874
	a3 = 0x40212870
	a0 = 0x402128C4
	call fn40302690 (retsize: 0;)
	a2 = 0x40212878
	a3 = Mem0[a1 + 0x00000010:word32]
	a4 = 12
	a5 = 0x000000C8
	a0 = 0x402034D0
	v11 = a0
	a0 = 0x402128D4
	call v11 (retsize: 0;)
	a6 = 0x4021287C
	a9 = 0x402125CC
	a8 = 0
	Mem0[a9 + 0x00000030:word32] = a8
	a10 = 0x00000084
	Mem0[a9 + 0x00000028:word32] = a10
	Mem0[a9 + 0x00000020:word32] = a8
	a7 = 4
	a5 = Mem0[a6 + 0x00000204:word32]
	a5 = a5 | a7
	Mem0[a6 + 0x00000204:word32] = a5
	a2 = 0x00000400
	a0 = 0x40212880
	v15 = a0
	a0 = 0x40212908
	call v15 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_ets_timer_init_exit
sdk_ets_timer_init_exit:


// sdk_wifi_get_opmode
// Return size: 0
void sdk_wifi_get_opmode()
sdk_wifi_get_opmode_entry:
	// succ:  l40213458
l40213458:
	a1 = fp
	a2 = 1
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40213462
	call fn40313420 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_get_opmode_exit
sdk_wifi_get_opmode_exit:


// sdk_wifi_get_opmode_default
// Return size: 0
void sdk_wifi_get_opmode_default()
sdk_wifi_get_opmode_default_entry:
	// succ:  l4021346C
l4021346C:
	a1 = fp
	a2 = 0
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40213476
	call fn40313420 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_get_opmode_default_exit
sdk_wifi_get_opmode_default_exit:


// sdk_wifi_set_opmode_local
// Return size: 0
void sdk_wifi_set_opmode_local()
sdk_wifi_set_opmode_local_entry:
	// succ:  l402134F4
l402134F4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1:word32] = a3
	a12 = a2
	branch a2 <u 0x00000004 l4021353B
	// succ:  l40213502 l4021353B
l40213502:
	a2 = 0
	goto l40213532
	// succ:  l40213532
l40213507:
	a0 = 0x402134F0
	a3 = 0x402035EC
	v8 = Mem0[a0 + 0x00000080:byte]
	a2 = (uint32) v8
	v9 = Mem0[a3 + 0x00000000:byte]
	a3 = (uint32) v9
	branch a2 == a12 l40213530
	// succ:  l40213516 l40213530
l40213516:
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a3 != 1 l40213522
	// succ:  l4021351B l40213522
l4021351B:
	a2 = a12
	a0 = 0x40213520
	call fn40313480 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	// succ:  l40213522
l40213522:
	a4 = Mem0[a1 + 0x00000000:word32]
	Mem0[a0 + 0x00000080:byte] = a12
	branch a4 != 1 l40213530
	// succ:  l4021352A l40213530
l4021352A:
	a2 = 0x40212B28
	a0 = 0x40213530
	call sdk_wifi_param_save_protect (retsize: 0;)
	// succ:  l40213530
l40213530:
	a2 = 1
	// succ:  l40213532
l40213532:
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_set_opmode_local_exit
l4021353B:
	a2 = 5
	a0 = 0x40213540
	call fn40312928 (retsize: 0;)
	branch a2 != -1 l40213507
	// succ:  l40213543 l40213507
l40213543:
	a5 = 0x40212918
	Mem0[a5 + 0x0000008A:byte] = a12
	// succ:  l40253530
l40253530:
sdk_wifi_set_opmode_local_exit:


// sdk_wifi_set_opmode
// Return size: 0
void sdk_wifi_set_opmode()
sdk_wifi_set_opmode_entry:
	// succ:  l4021354C
l4021354C:
	a1 = fp
	a3 = 1
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40213556
	call fn403134F4 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_set_opmode_exit
sdk_wifi_set_opmode_exit:


// sdk_wifi_set_opmode_current
// Return size: 0
void sdk_wifi_set_opmode_current()
sdk_wifi_set_opmode_current_entry:
	// succ:  l40213560
l40213560:
	a1 = fp
	a3 = 0
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021356A
	call fn403134F4 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_set_opmode_current_exit
sdk_wifi_set_opmode_current_exit:


// sdk_system_get_checksum
// Return size: 0
void sdk_system_get_checksum()
sdk_system_get_checksum_entry:
	// succ:  l40213574
l40213574:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a3 == 0x00000000 l40213596
	// succ:  l4021357B l40213596
l4021357B:
	a0 = 0x000000EF
	a6 = 0
	// succ:  l40213580
l40213580:
	a5 = a6 + 1
	a4 = a2 + a6
	v9 = Mem0[a4 + 0x00000000:byte]
	a4 = (uint32) v9
	a6 = a5 & 0x0000FFFF
	a0 = a4 ^ a0
	a0 = a0 & 0x000000FF
	branch a3 != a6 l40213580
	// succ:  l40213593 l40213580
l40213593:
	goto l40213599
	// succ:  l40213599
l40213596:
	a0 = 0x000000EF
	// succ:  l40213599
l40213599:
	a2 = a0
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_system_get_checksum_exit
sdk_system_get_checksum_exit:


// sdk_wifi_param_save_protect
// Return size: 0
void sdk_wifi_param_save_protect()
sdk_wifi_param_save_protect_entry:
	// succ:  l4021362C
l4021362C:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x0000002C:word32] = a13
	Mem0[a1 + 0x00000028:word32] = a12
	a13 = a2
	a2 = 0x402034B8
	Mem0[a1 + 0x00000024:word32] = a0
	a12 = Mem0[a2 + 0x0000000C:word32]
	a2 = Mem0[a2 + 0x00000004:word32]
	a3 = a12
	a0 = 0x40204388
	v8 = a0
	a0 = 0x40213646
	call v8 (retsize: 0;)
	a4 = 28
	a3 = a2 - 4
	Mem0[a1 + 0x0000001C:word32] = a3
	a2 = a2 - 1
	Mem0[a1 + 0x00000020:word32] = a2
	a3 = a1
	a2 = a2 * a12
	a0 = 0x402034C8
	v10 = a0
	a0 = 0x4021365C
	call v10 (retsize: 0;)
	v12 = Mem0[a1 + 0x00000000:byte]
	a5 = (uint32) v12
	a4 = 1
	a3 = 0
	a2 = Mem0[a1 + 0x0000001C:word32]
	branch a5 != 0x00000000 l40213668
	// succ:  l40213665_1 l40213668
l40213665_1:
	a3 = a4
	// succ:  l40213668
l40213668:
	a4 = a13
	a5 = 0x00000370
	Mem0[a1:byte] = a3
	a2 = a2 + a3
	a2 = a2 + 1
	a3 = a12
	a0 = 0x40213679
	call fn403135B0 (retsize: 0;)
	a4 = 28
	a6 = 1
	a7 = Mem0[a1 + 0x00000008:word32]
	v15 = Mem0[a1 + 0x00000000:byte]
	a5 = (uint32) v15
	a8 = 0x40213628
	Mem0[a1 + 0x00000004:word32] = a8
	a5 = a1 + a5 * 0x00000004
	a7 = a7 + 1
	branch a7 == 0x00000000 l4021368F
	// succ:  l4021368C_2 l4021368F
l4021368C_2:
	a6 = a7
	// succ:  l4021368F
l4021368F:
	Mem0[a1 + 0x00000008:word32] = a6
	Mem0[a5 + 0x0000000C:word32] = a4
	v17 = Mem0[a1 + 0x00000000:byte]
	a3 = (uint32) v17
	a2 = a13
	a3 = a1 + a3 * 0x00000004
	v18 = Mem0[a3 + 0x0000000C:uint16]
	a3 = (uint32) v18
	a0 = 0x402136A1
	call fn40313574 (retsize: 0;)
	a3 = a12
	a4 = a1
	v20 = Mem0[a1 + 0x00000000:byte]
	a9 = (uint32) v20
	a5 = 28
	a9 = a1 + a9 * 0x00000004
	Mem0[a9 + 0x00000014:word32] = a2
	a2 = Mem0[a1 + 0x00000020:word32]
	a0 = 0x402136B4
	call fn403135B0 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x0000002C:word32]
	a0 = Mem0[a1 + 0x00000024:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_wifi_param_save_protect_exit
sdk_wifi_param_save_protect_exit:


// sdk_wifi_station_get_config
// Return size: 0
void sdk_wifi_station_get_config()
sdk_wifi_station_get_config_entry:
	// succ:  l402137C4
l402137C4:
	a1 = fp
	a3 = 1
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x402137CE
	call fn40313728 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_station_get_config_exit
sdk_wifi_station_get_config_exit:


// sdk_wifi_station_get_config_default
// Return size: 0
void sdk_wifi_station_get_config_default()
sdk_wifi_station_get_config_default_entry:
	// succ:  l402137D8
l402137D8:
	a1 = fp
	a3 = 0
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x402137E2
	call fn40313728 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_station_get_config_default_exit
sdk_wifi_station_get_config_default_exit:


// sdk_wifi_station_get_ap_info
// Return size: 0
void sdk_wifi_station_get_ap_info()
sdk_wifi_station_get_ap_info_entry:
	// succ:  l402137F8
l402137F8:
	a1 = fp
	a8 = 0x402137EC
	a1 = a1 - 32
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000014:word32] = a15
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000018:word32] = a8
	v8 = Mem0[a8 + 0x00000094:byte]
	a8 = (uint32) v8
	Mem0[a1 + 0x00000004:word32] = a0
	branch a8 == 0x00000000 l4021389B
	// succ:  l40213810 l4021389B
l40213810:
	a0 = 0x000000FF
	a12 = 0
	a14 = 0
	Mem0[a1:word32] = a2
	a5 = Mem0[a1 + 0x00000018:word32]
	a7 = 0x00000064
	a5 = a5 + 28
	// succ:  l40213821
l40213821:
	v13 = (uint16) a12
	v14 = (uint16) a7
	a7 = v13 *u v14
	a9 = a7 + a5
	v16 = Mem0[a9 + 0x00000080:byte]
	a9 = (uint32) v16
	branch a9 == a0 l4021388D
	// succ:  l4021382C l4021388D
l4021382C:
	a4 = 32
	a3 = 0x0000031C
	a15 = 0x402035F0
	a0 = Mem0[a1 + 0x00000000:word32]
	a13 = 0x00000067
	v19 = (uint16) a14
	v20 = (uint16) a13
	a13 = v19 *u v20
	a13 = a13 + a0
	a15 = a7 + a15
	a3 = a15 + a3
	a2 = a13
	a0 = 0x40203130
	v21 = a0
	a0 = 0x4021384A
	call v21 (retsize: 0;)
	a2 = a13 + 32
	a4 = 64
	a3 = 0x0000033C
	a3 = a15 + a3
	a0 = 0x40203130
	v22 = a0
	a0 = 0x4021385A
	call v22 (retsize: 0;)
	a2 = a13 + 97
	a15 = a12 * 0x00000008 - a12
	a3 = 0x402035F0
	a4 = 0x00000521
	a3 = a3 + a4
	a3 = a15 + a3
	a4 = 6
	a0 = 0x40203130
	v23 = a0
	a0 = 0x40213872
	call v23 (retsize: 0;)
	a0 = 0x000000FF
	a5 = 0x402137F0
	a8 = Mem0[a1 + 0x00000018:word32]
	a14 = a14 + 1
	a6 = 0x402137F4
	a14 = a14 & 0x000000FF
	a2 = a15 + a6
	v25 = Mem0[a2 + 0x00000080:byte]
	a2 = (uint32) v25
	Mem0[a13 + 0x00000060:byte] = a2
	v26 = Mem0[a8 + 0x00000094:byte]
	a8 = (uint32) v26
	// succ:  l4021388D
l4021388D:
	a7 = 0x00000064
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	branch a12 <u a8 l40213821
	// succ:  l40213898 l40213821
l40213898:
	goto l4021389D
	// succ:  l4021389D
l4021389B:
	a14 = 0
	// succ:  l4021389D
l4021389D:
	a0 = Mem0[a1 + 0x00000004:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a2 = a14
	a15 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wifi_station_get_ap_info_exit
sdk_wifi_station_get_ap_info_exit:


// sdk_wifi_station_ap_number_set
// Return size: 0
void sdk_wifi_station_ap_number_set()
sdk_wifi_station_ap_number_set_entry:
	// succ:  l402138B4
l402138B4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	branch a2 >=u 0x00000006 l402138E5
	// succ:  l402138C0 l402138E5
l402138C0:
	branch a2 == 0x00000000 l402138E5
	// succ:  l402138C2 l402138E5
l402138C2:
	a0 = 0x402138C5
	call fn40313458 (retsize: 0;)
	branch a2 == 2 l402138E5
	// succ:  l402138C8 l402138E5
l402138C8:
	a0 = 0x402138B0
	v6 = Mem0[a0 + 0x00000080:byte]
	a2 = (uint32) v6
	branch a2 == a12 l402138DA
	// succ:  l402138D1 l402138DA
l402138D1:
	a2 = 0x40212B28
	Mem0[a0 + 0x00000080:byte] = a12
	a0 = 0x402138DA
	call fn4031362C (retsize: 0;)
	// succ:  l402138DA
l402138DA:
	a2 = 1
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_station_ap_number_set_exit
l402138E5:
	a2 = 0
	// succ:  l402538DC
l402538DC:
sdk_wifi_station_ap_number_set_exit:


// sdk_wifi_station_set_config
// Return size: 0
void sdk_wifi_station_set_config()
sdk_wifi_station_set_config_entry:
	// succ:  l40213B20
l40213B20:
	a1 = fp
	a3 = 1
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40213B2A
	call fn40313A00 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_station_set_config_exit
sdk_wifi_station_set_config_exit:


// sdk_wifi_station_set_config_current
// Return size: 0
void sdk_wifi_station_set_config_current()
sdk_wifi_station_set_config_current_entry:
	// succ:  l40213B34
l40213B34:
	a1 = fp
	a3 = 0
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40213B3E
	call fn40313A00 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_station_set_config_current_exit
sdk_wifi_station_set_config_current_exit:


// sdk_wifi_station_get_current_ap_id
// Return size: 0
void sdk_wifi_station_get_current_ap_id()
sdk_wifi_station_get_current_ap_id_entry:
	// succ:  l40213B48
l40213B48:
	a1 = fp
	a2 = 0x402138EC
	v4 = Mem0[a2 + 0x00000080:byte]
	a2 = (uint32) v4
	a3 = 0x000000FF
	branch a2 == a3 l40213B56
	// succ:  l40213B54 l40213B56
l40213B54:
	return
	// succ:  sdk_wifi_station_get_current_ap_id_exit
l40213B56:
	a2 = 0
	return
	// succ:  sdk_wifi_station_get_current_ap_id_exit
sdk_wifi_station_get_current_ap_id_exit:


// sdk_wifi_station_ap_check
// Return size: 0
void sdk_wifi_station_ap_check()
sdk_wifi_station_ap_check_entry:
	// succ:  l40213B5C
l40213B5C:
	a1 = fp
	branch a2 < 1 l40213B82
	// succ:  l40213B5F l40213B82
l40213B5F:
	a8 = 0x000000FF
	a9 = 0x000000C8
	a6 = 0
	a5 = 0x402137F0
	a7 = 0x00000064
	v9 = (int16) a7
	v10 = (int16) a2
	a7 = v9 *s v10
	a7 = a7 + a5
	// succ:  l40213B72
l40213B72:
	v12 = Mem0[a5 + 0x00000080:byte]
	a10 = (uint32) v12
	a6 = a6 + 2
	branch a10 != a8 l40213B8B
	// succ:  l40213B7A l40213B8B
l40213B7A:
	a5 = a5 + a9
	branch a5 <u a7 l40213B72
	// succ:  l40213B7F l40213B72
l40213B7F:
	goto l40213B84
	// succ:  l40213B84
l40213B82:
	a6 = 0
	// succ:  l40213B84
l40213B84:
	branch a6 != a2 l40213B89
	// succ:  l40213B87 l40213B89
l40213B87:
	a2 = 0
	// succ:  l40213B89
l40213B89:
	return
	// succ:  sdk_wifi_station_ap_check_exit
l40213B8B:
	a2 = 1
	return
	// succ:  sdk_wifi_station_ap_check_exit
sdk_wifi_station_ap_check_exit:


// sdk_wifi_station_ap_change
// Return size: 0
void sdk_wifi_station_ap_change()
sdk_wifi_station_ap_change_entry:
	// succ:  l40213B94
l40213B94:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a13
	Mem0[a1 + 0x00000014:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a12
	a14 = 0x402138B0
	a12 = a2
	v8 = Mem0[a14 + 0x00000080:byte]
	a13 = (uint32) v8
	a0 = 0x40213BAA
	call fn40313458 (retsize: 0;)
	branch a2 == 2 l40213BE3
	// succ:  l40213BAD l40213BE3
l40213BAD:
	branch a12 >=u a13 l40213BE3
	// succ:  l40213BB0 l40213BE3
l40213BB0:
	a2 = a13
	a0 = 0x40213BB5
	call fn40313B5C (retsize: 0;)
	branch a2 == 0x00000000 l40213BE3
	// succ:  l40213BB7 l40213BE3
l40213BB7:
	a0 = 0x402137F0
	a13 = 0x00000064
	v9 = (int16) a13
	v10 = (int16) a12
	a13 = v9 *s v10
	Mem0[a1 + 0x00000004:word32] = a13
	a13 = a13 + a0
	v11 = Mem0[a13 + 0x00000080:byte]
	a0 = (uint32) v11
	a2 = 0x000000FF
	branch a0 == a2 l40213BE3
	// succ:  l40213BCD l40213BE3
l40213BCD:
	a2 = 0x40213B90
	a3 = a12
	a0 = 0x402034D0
	v13 = a0
	a0 = 0x40213BD8
	call v13 (retsize: 0;)
	v14 = Mem0[a14 + 0x00000081:byte]
	a0 = (uint32) v14
	branch a0 != a12 l40213BF2
	// succ:  l40213BDE l40213BF2
l40213BDE:
	a2 = 1
	goto l40213BE5
	// succ:  l40213BE5
l40213BE3:
	a2 = 0
	// succ:  l40213BE5
l40213BE5:
	a12 = Mem0[a1 + 0x0000000C:word32]
	a13 = Mem0[a1 + 0x00000010:word32]
	a14 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wifi_station_ap_change_exit
l40213BF2:
	a4 = 32
	a0 = 0x402035F0
	Mem0[a14 + 0x00000081:byte] = a12
	a3 = 0x402138F0
	Mem0[a1:word32] = a3
	a2 = Mem0[a13 + 0x0000007C:word32]
	Mem0[a3 + 0x00000124:word32] = a2
	a13 = Mem0[a1 + 0x00000004:word32]
	a2 = 0x402138F4
	a3 = 0x0000031C
	a13 = a13 + a0
	a3 = a13 + a3
	a0 = 0x40203130
	v16 = a0
	a0 = 0x40213C17
	call v16 (retsize: 0;)
	a2 = 0x40203750
	a4 = 64
	a3 = 0x0000033C
	a3 = a13 + a3
	a0 = 0x40203130
	v17 = a0
	a0 = 0x40213C27
	call v17 (retsize: 0;)
	a11 = 1
	a10 = a14 + 0xFFFFFF00
	a13 = Mem0[a1 + 0x00000000:word32]
	a9 = 0
	a13 = a13 + 0x00000100
	Mem0[a10 + 0x000000BB:byte] = a9
	Mem0[a13 + 0x0000004E:byte] = a11
	a7 = 0x402138F8
	a8 = 0x40212EE8
	a2 = 0x402138FC
	a6 = 0x402137F4
	a3 = a12 * 0x00000008 - a12
	a5 = 0x00000521
	Mem0[a8 + 0x000003F4:word32] = a7
	a4 = 0x402035F0
	a7 = a14 + 0xFFFFFF00
	a4 = a4 + a5
	a6 = a3 + a6
	v25 = Mem0[a6 + 0x00000080:byte]
	a6 = (uint32) v25
	a3 = a3 + a4
	Mem0[a7 + 0x000000ED:byte] = a6
	a4 = 6
	a0 = 0x40203130
	v26 = a0
	a0 = 0x40213C6B
	call v26 (retsize: 0;)
	a0 = 0x40213C6E
	call sdk_wifi_station_disconnect (retsize: 0;)
	a0 = 0x40213C71
	call sdk_wifi_station_connect (retsize: 0;)
	// succ:  l40253BDE
l40253BDE:
sdk_wifi_station_ap_change_exit:


// sdk_wifi_station_scan
// Return size: 0
void sdk_wifi_station_scan()
sdk_wifi_station_scan_entry:
	// succ:  l40213C78
l40213C78:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1:word32] = a2
	a0 = 0x402035F0
	Mem0[a1 + 0x00000004:word32] = a3
	a0 = Mem0[a0 + 0x00000010:word32]
	Mem0[a1 + 0x00000008:word32] = a0
	a0 = 0x40213C8E
	call fn40313458 (retsize: 0;)
	branch a2 == 2 l40213CB0
	// succ:  l40213C91 l40213CB0
l40213C91:
	a2 = Mem0[a1 + 0x00000008:word32]
	branch a2 == 0x00000000 l40213CB0
	// succ:  l40213C95 l40213CB0
l40213C95:
	a2 = Mem0[a1 + 0x00000000:word32]
	a5 = 0x40213C74
	a4 = 0
	a3 = Mem0[a1 + 0x00000004:word32]
	Mem0[a5:word16] = a4
	a4 = 0x402131CC
	a0 = 0x40213CA7
	call sdk_cnx_sta_scan_cmd (retsize: 0;)
	a2 = 1
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_station_scan_exit
l40213CB0:
	a2 = 0
	// succ:  l40253CA9
l40253CA9:
sdk_wifi_station_scan_exit:


// sdk_wifi_station_get_auto_connect
// Return size: 0
void sdk_wifi_station_get_auto_connect()
sdk_wifi_station_get_auto_connect_entry:
	// succ:  l40213CBC
l40213CBC:
	a1 = fp
	a3 = 0x40213CB8
	v4 = Mem0[a3 + 0x00000080:byte]
	a3 = (uint32) v4
	a4 = 1
	branch a3 >=u 0x00000002 l40213CC9
	// succ:  l40213CC7 l40213CC9
l40213CC7:
	a4 = a3
	// succ:  l40213CC9
l40213CC9:
	a2 = a4 & 0x000000FF
	return
	// succ:  sdk_wifi_station_get_auto_connect_exit
sdk_wifi_station_get_auto_connect_exit:


// sdk_wifi_station_set_auto_connect
// Return size: 0
void sdk_wifi_station_set_auto_connect()
sdk_wifi_station_set_auto_connect_entry:
	// succ:  l40213CD0
l40213CD0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	branch a2 >=u 0x00000002 l40213CE2
	// succ:  l40213CDC l40213CE2
l40213CDC:
	a0 = 0x40213CDF
	call fn40313458 (retsize: 0;)
	branch a2 != 2 l40213CE7
	// succ:  l40213CE2 l40213CE7
l40213CE2:
	a2 = 0
	goto l40213CFB
	// succ:  l40213CFB
l40213CE7:
	a0 = 0x40213CB8
	v6 = Mem0[a0 + 0x00000080:byte]
	a2 = (uint32) v6
	branch a2 == a12 l40213CF9
	// succ:  l40213CF0 l40213CF9
l40213CF0:
	a2 = 0x40212B28
	Mem0[a0 + 0x00000080:byte] = a12
	a0 = 0x40213CF9
	call fn4031362C (retsize: 0;)
	// succ:  l40213CF9
l40213CF9:
	a2 = 1
	// succ:  l40213CFB
l40213CFB:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_station_set_auto_connect_exit
sdk_wifi_station_set_auto_connect_exit:


// sdk_wifi_station_connect
// Return size: 0
void sdk_wifi_station_connect()
sdk_wifi_station_connect_entry:
	// succ:  l40213D04
l40213D04:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = 0x402035F0
	a0 = Mem0[a0 + 0x00000010:word32]
	Mem0[a1:word32] = a0
	a0 = 0x40213D16
	call fn40313458 (retsize: 0;)
	branch a2 == 2 l40213D6B
	// succ:  l40213D19 l40213D6B
l40213D19:
	a2 = Mem0[a1 + 0x00000000:word32]
	branch a2 == 0x00000000 l40213D6B
	// succ:  l40213D1E l40213D6B
l40213D1E:
	a2 = 2
	a0 = 0x40213D23
	call fn40312928 (retsize: 0;)
	branch a2 == -1 l40213D76
	// succ:  l40213D26 l40213D76
l40213D26:
	a0 = 0x402035F0
	a4 = Mem0[a0 + 0x00000010:word32]
	a2 = 0
	Mem0[a4 + 0x000000B8:byte] = a2
	a3 = Mem0[a0 + 0x00000010:word32]
	Mem0[a3 + 0x000000B9:byte] = a2
	a0 = Mem0[a0 + 0x000001E4:word32]
	branch a0 == -1 l40213D76
	// succ:  l40213D3B l40213D76
l40213D3B:
	branch a0 == 0x00000000 l40213D76
	// succ:  l40213D3D l40213D76
l40213D3D:
	a6 = 0x4020462C
	a3 = 0x40212EE8
	a5 = Mem0[a3 + 0x000003F4:word32]
	a5 = a5 & a6
	a5 = a5 >>u 0x00000010 & 0x0000FFFF
	a3 = Mem0[a3 + 0x000003F4:word32]
	a2 = 0x40212B28
	a3 = a3 & 0x000000FF
	branch a5 != 1 l40213D70
	// succ:  l40213D5E l40213D70
l40213D5E:
	a7 = 13
	branch a7 >=u a3 l40213D81
	// succ:  l40213D63 l40213D81
l40213D63:
	a3 = 0
	a0 = 0x40213D68
	call sdk_cnx_sta_connect_cmd (retsize: 0;)
	goto l40213D76
	// succ:  l40213D76
l40213D6B:
	a2 = 0
	goto l40213D79
	// succ:  l40213D79
l40213D70:
	a3 = 0x00000000
	a0 = 0x40213D76
	call sdk_cnx_sta_connect_cmd (retsize: 0;)
	// succ:  l40213D76
l40213D76:
	a2 = 0x00000001
	// succ:  l40213D79
l40213D79:
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_station_connect_exit
l40213D81:
	a0 = 0x40213D84
	call sdk_cnx_sta_connect_cmd (retsize: 0;)
	// succ:  l40253D76
l40253D76:
sdk_wifi_station_connect_exit:


// sdk_wifi_station_disconnect
// Return size: 0
void sdk_wifi_station_disconnect()
sdk_wifi_station_disconnect_entry:
	// succ:  l40213D8C
l40213D8C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = 0x402035F0
	a0 = Mem0[a0 + 0x00000010:word32]
	Mem0[a1:word32] = a0
	a0 = 0x40213D9E
	call fn40313458 (retsize: 0;)
	branch a2 == 2 l40213DD1
	// succ:  l40213DA1 l40213DD1
l40213DA1:
	a2 = Mem0[a1 + 0x00000000:word32]
	branch a2 == 0x00000000 l40213DD1
	// succ:  l40213DA5 l40213DD1
l40213DA5:
	a2 = 1
	a0 = 0x40213DAA
	call fn40312928 (retsize: 0;)
	a0 = 0x402035F0
	branch a2 == -1 l40213DDF
	// succ:  l40213DB0 l40213DDF
l40213DB0:
	a7 = Mem0[a0 + 0x00000010:word32]
	a3 = 0
	Mem0[a7 + 0x000000B8:byte] = a3
	a6 = Mem0[a0 + 0x00000010:word32]
	Mem0[a6 + 0x000000BA:byte] = a3
	a5 = Mem0[a0 + 0x00000010:word32]
	Mem0[a5 + 0x000000B9:byte] = a3
	a2 = Mem0[a0 + 0x00000010:word32]
	a4 = Mem0[a2 + 0x0000003C:word32]
	branch a4 == 0x00000000 l40213DD6
	// succ:  l40213DC7 l40213DD6
l40213DC7:
	a4 = 0
	a2 = a0
	a0 = 0x40213DCE
	call sdk_ieee80211_sta_new_state (retsize: 0;)
	goto l40213DDF
	// succ:  l40213DDF
l40213DD1:
	a2 = 0
	goto l40213DE2
	// succ:  l40213DE2
l40213DD6:
	a2 = a2 + 4
	a0 = 0x40213DDC
	call fn40304430 (retsize: 0;)
	a0 = 0x40213DDF
	call sdk_scan_cancel (retsize: 0;)
	// succ:  l40213DDF
l40213DDF:
	a2 = 0x00000001
	// succ:  l40213DE2
l40213DE2:
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_station_disconnect_exit
sdk_wifi_station_disconnect_exit:


// sdk_wifi_station_get_connect_status
// Return size: 0
void sdk_wifi_station_get_connect_status()
sdk_wifi_station_get_connect_status_entry:
	// succ:  l40213DEC
l40213DEC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = 0x402035F0
	a0 = Mem0[a0 + 0x00000010:word32]
	Mem0[a1:word32] = a0
	a0 = 0x40213DFB
	call fn40313458 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000004:word32]
	branch a2 == 2 l40213E11
	// succ:  l40213E00 l40213E11
l40213E00:
	a2 = Mem0[a1 + 0x00000000:word32]
	branch a2 == 0x00000000 l40213E11
	// succ:  l40213E04 l40213E11
l40213E04:
	a2 = 0x402035F0
	a2 = Mem0[a2 + 0x00000010:word32]
	v5 = Mem0[a2 + 0x000000BA:byte]
	a2 = (uint32) v5
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_station_get_connect_status_exit
l40213E11:
	a2 = 0x000000FF
	// succ:  l40253E0C
l40253E0C:
sdk_wifi_station_get_connect_status_exit:


// sdk_wifi_softap_cacl_mac
// Return size: 0
void sdk_wifi_softap_cacl_mac()
sdk_wifi_softap_cacl_mac_entry:
	// succ:  l40213E18
l40213E18:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a14
	a13 = a2
	a14 = a3
	branch a2 == 0x00000000 l40213E71
	// succ:  l40213E2F l40213E71
l40213E2F:
	branch a3 == 0x00000000 l40213E71
	// succ:  l40213E32 l40213E71
l40213E32:
	a4 = 6
	a0 = 0x40203130
	v11 = a0
	a0 = 0x40213E3A
	call v11 (retsize: 0;)
	a12 = 0
	a15 = 2
	// succ:  l40213E3E
l40213E3E:
	a2 = a13
	a3 = a14
	a4 = 6
	v12 = Mem0[a14 + 0x00000000:byte]
	a0 = (uint32) v12
	a5 = a12 << 30
	a0 = a0 | a15
	a0 = a0 ^ a5
	Mem0[a13:byte] = a0
	a0 = 0x40213E56
	call fn40311510 (retsize: 0;)
	branch a2 != 0x00000000 l40213E60
	// succ:  l40213E58 l40213E60
l40213E58:
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	branch a12 != 64 l40213E3E
	// succ:  l40213E60 l40213E3E
l40213E60:
	a2 = 1
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wifi_softap_cacl_mac_exit
l40213E71:
	a2 = 0
	// succ:  l40253E62
l40253E62:
sdk_wifi_softap_cacl_mac_exit:


// sdk_wifi_softap_set_default_ssid
// Return size: 0
void sdk_wifi_softap_set_default_ssid()
sdk_wifi_softap_set_default_ssid_entry:
	// succ:  l40213E84
l40213E84:
	a1 = fp
	a2 = 1
	a1 = a1 - 16
	a3 = a1
	Mem0[a1 + 0x00000008:word32] = a0
	a0 = 0x40213E90
	call sdk_wifi_get_macaddr (retsize: 0;)
	a0 = 0x402035F0
	a2 = 0x402137EC
	a0 = Mem0[a0 + 0x00000288:word32]
	v6 = Mem0[a2 + 0x0000000C:byte]
	a2 = (uint32) v6
	branch a0 == -1 l40213EA5
	// succ:  l40213E9F l40213EA5
l40213E9F:
	a3 = 0x000000FF
	branch a2 != a3 l40213ECD
	// succ:  l40213EA5 l40213ECD
l40213EA5:
	a2 = 0x40213E78
	a3 = 36
	a0 = 0x40213724
	v7 = a0
	a0 = 0x40213EB0
	call v7 (retsize: 0;)
	a2 = 0x40213E7C
	a3 = 0x40213E80
	v9 = Mem0[a1 + 0x00000003:byte]
	a4 = (uint32) v9
	v11 = Mem0[a1 + 0x00000004:byte]
	a5 = (uint32) v11
	v13 = Mem0[a1 + 0x00000005:byte]
	a6 = (uint32) v13
	a0 = 0x402044CC
	v14 = a0
	a0 = 0x40213EC5
	call v14 (retsize: 0;)
	a4 = 0x40203770
	a3 = 10
	Mem0[a4 + 0x00000188:word32] = a3
	// succ:  l40213ECD
l40213ECD:
	a2 = 1
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_softap_set_default_ssid_exit
sdk_wifi_softap_set_default_ssid_exit:


// sdk_wifi_softap_get_config
// Return size: 0
void sdk_wifi_softap_get_config()
sdk_wifi_softap_get_config_entry:
	// succ:  l40214008
l40214008:
	a1 = fp
	a3 = 1
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40214012
	call fn40313ED8 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_softap_get_config_exit
sdk_wifi_softap_get_config_exit:


// sdk_wifi_softap_get_config_default
// Return size: 0
void sdk_wifi_softap_get_config_default()
sdk_wifi_softap_get_config_default_entry:
	// succ:  l4021401C
l4021401C:
	a1 = fp
	a3 = 0
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40214026
	call fn40313ED8 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_softap_get_config_default_exit
sdk_wifi_softap_get_config_default_exit:


// sdk_wifi_softap_set_config
// Return size: 0
void sdk_wifi_softap_set_config()
sdk_wifi_softap_set_config_entry:
	// succ:  l4021425C
l4021425C:
	a1 = fp
	a3 = 1
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40214266
	call fn40314040 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_softap_set_config_exit
sdk_wifi_softap_set_config_exit:


// sdk_wifi_softap_set_config_current
// Return size: 0
void sdk_wifi_softap_set_config_current()
sdk_wifi_softap_set_config_current_entry:
	// succ:  l40214270
l40214270:
	a1 = fp
	a3 = 0
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021427A
	call fn40314040 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_softap_set_config_current_exit
sdk_wifi_softap_set_config_current_exit:


// sdk_wifi_softap_set_station_info
// Return size: 0
void sdk_wifi_softap_set_station_info()
sdk_wifi_softap_set_station_info_entry:
	// succ:  l40214284
l40214284:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a13
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a15
	a15 = 0x402137EC
	Mem0[a1 + 0x0000000C:word32] = a12
	v7 = Mem0[a15 + 0x00000090:byte]
	a15 = (uint32) v7
	Mem0[a1 + 0x00000014:word32] = a14
	a15 = a15 + 2
	branch a15 < 2 l402142D1
	// succ:  l4021429C l402142D1
l4021429C:
	a12 = 1
	a14 = 0x402035F0
	Mem0[a1 + 0x00000004:word32] = a3
	a14 = Mem0[a14 + 0x00000014:word32]
	Mem0[a1:word32] = a2
	// succ:  l402142A7
l402142A7:
	a13 = a14 + a12 * 0x00000004
	a13 = Mem0[a13 + 0x00000090:word32]
	branch a13 == 0x00000000 l402142C9
	// succ:  l402142AF l402142C9
l402142AF:
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = a13
	a4 = 6
	a0 = 0x40202AA8
	v12 = a0
	a0 = 0x402142BB
	call v12 (retsize: 0;)
	branch a2 != 0x00000000 l402142C9
	// succ:  l402142BD l402142C9
l402142BD:
	a14 = Mem0[a1 + 0x00000004:word32]
	a2 = 1
	a14 = Mem0[a14 + 0x00000000:word32]
	Mem0[a13 + 0x0000010C:word32] = a14
	goto l402142D3
	// succ:  l402142D3
l402142C9:
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	branch a15 != a12 l402142A7
	// succ:  l402142D1 l402142A7
l402142D1:
	a2 = 0
	a2 = 0
	// succ:  l402142D3
l402142D3:
	a12 = Mem0[a1 + 0x0000000C:word32]
	a13 = Mem0[a1 + 0x00000010:word32]
	a14 = Mem0[a1 + 0x00000014:word32]
	a15 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wifi_softap_set_station_info_exit
sdk_wifi_softap_set_station_info_exit:


// sdk_wifi_softap_get_station_info
// Return size: 0
void sdk_wifi_softap_get_station_info()
sdk_wifi_softap_get_station_info_entry:
	// succ:  l402142EC
l402142EC:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1:word32] = a0
	a0 = 0x402035F0
	Mem0[a1 + 0x00000008:word32] = a13
	a13 = Mem0[a0 + 0x00000014:word32]
	Mem0[a1 + 0x00000010:word32] = a15
	branch a13 != 0x00000000 l40214305
	// succ:  l40214300 l40214305
l40214300:
	a2 = 0
	goto l4021436B
	// succ:  l4021436B
l40214305:
	a2 = 0x402142E4
	a5 = 0x402137EC
	Mem0[a0 + 0x0000018C:word32] = a2
	a2 = 0
	v11 = Mem0[a5 + 0x00000090:byte]
	a7 = (uint32) v11
	Mem0[a0 + 0x00000188:word32] = a2
	a6 = a7 + 2
	branch a6 < 2 l4021436B
	// succ:  l4021431B l4021436B
l4021431B:
	a12 = 1
	// succ:  l4021431D
l4021431D:
	a14 = a13 + a12 * 0x00000004
	a4 = Mem0[a14 + 0x00000090:word32]
	branch a4 == 0x00000000 l40214360
	// succ:  l40214325 l40214360
l40214325:
	a3 = Mem0[a4 + 0x0000010C:word32]
	branch a3 == 0x00000000 l4021435E
	// succ:  l4021432A l4021435E
l4021432A:
	a2 = 16
	a0 = 0x402142E8
	v15 = a0
	a0 = 0x40214332
	call v15 (retsize: 0;)
	a3 = Mem0[a14 + 0x00000090:word32]
	a15 = a2
	a4 = 6
	a2 = a2 + 4
	a0 = 0x40203130
	v16 = a0
	a0 = 0x40214341
	call v16 (retsize: 0;)
	a2 = 0
	a5 = Mem0[a14 + 0x00000090:word32]
	a0 = 0x402035F0
	a5 = Mem0[a5 + 0x0000010C:word32]
	a4 = Mem0[a0 + 0x0000018C:word32]
	Mem0[a15:word32] = a2
	Mem0[a15 + 0x0000000C:word32] = a5
	a5 = 0x402137EC
	Mem0[a4:word32] = a15
	v17 = Mem0[a5 + 0x00000090:byte]
	a7 = (uint32) v17
	Mem0[a0 + 0x0000018C:word32] = a15
	// succ:  l4021435E
l4021435E:
	a6 = a7 + 2
	// succ:  l40214360
l40214360:
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	branch a12 < a6 l4021431D
	// succ:  l40214368 l4021431D
l40214368:
	a2 = Mem0[a0 + 0x00000188:word32]
	// succ:  l4021436B
l4021436B:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wifi_softap_get_station_info_exit
sdk_wifi_softap_get_station_info_exit:


// sdk_wifi_softap_free_station_info
// Return size: 0
void sdk_wifi_softap_free_station_info()
sdk_wifi_softap_free_station_info_entry:
	// succ:  l4021437C
l4021437C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	a12 = 0x402035F0
	a13 = 0x402142E4
	a2 = Mem0[a12 + 0x00000188:word32]
	branch a2 == 0x00000000 l402143A3
	// succ:  l40214390 l402143A3
l40214390:
	a0 = Mem0[a2 + 0x00000000:word32]
	Mem0[a12 + 0x00000188:word32] = a0
	branch a0 != 0x00000000 l4021439A
	// succ:  l40214397 l4021439A
l40214397:
	Mem0[a12 + 0x0000018C:word32] = a13
	// succ:  l4021439A
l4021439A:
	a0 = 0x402034CC
	v7 = a0
	a0 = 0x402143A0
	call v7 (retsize: 0;)
	goto l4025438B
	// succ:  l4025438B
l402143A3:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_softap_free_station_info_exit
l4025438B:
sdk_wifi_softap_free_station_info_exit:


// sdk_wifi_softap_deauth
// Return size: 0
void sdk_wifi_softap_deauth()
sdk_wifi_softap_deauth_entry:
	// succ:  l402143B4
l402143B4:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a14
	a13 = 0x402035F0
	a14 = a2
	a13 = Mem0[a13 + 0x00000014:word32]
	a0 = 0x402143CB
	call fn40313458 (retsize: 0;)
	a15 = a2 - 1
	branch a15 == 0x00000000 l4021445D
	// succ:  l402143D0 l4021445D
l402143D0:
	branch a13 == 0x00000000 l4021445D
	// succ:  l402143D3 l4021445D
l402143D3:
	a2 = a13 + 64
	a12 = Mem0[a13 + 0x00000088:word32]
	a0 = Mem0[a13 + 0x00000090:word32]
	Mem0[a13 + 0x00000088:word32] = a0
	branch a14 != 0x00000000 l402143EF
	// succ:  l402143E1 l402143EF
l402143E1:
	a3 = 0x402143B0
	a4 = 6
	a0 = 0x40203130
	v11 = a0
	a0 = 0x402143EC
	call v11 (retsize: 0;)
	goto l402143FB
	// succ:  l402143FB
l402143EF:
	a3 = a14 | a14
	a4 = 0x00000006
	a0 = 0x40203130
	v12 = a0
	a0 = 0x402143FB
	call v12 (retsize: 0;)
	// succ:  l402143FB
l402143FB:
	a2 = a13 | a13
	a3 = 0x000000C0
	a4 = 2
	a0 = 0x40214406
	call sdk_ieee80211_send_mgmt (retsize: 0;)
	a0 = 0x402137EC
	Mem0[a13 + 0x00000088:word32] = a12
	v13 = Mem0[a0 + 0x00000090:byte]
	a0 = (uint32) v13
	a12 = 1
	a2 = a0 + 2
	branch a2 < 2 l4021444C
	// succ:  l40214416 l4021444C
l40214416:
	a15 = a13 + a12 * 0x00000004
	a15 = Mem0[a15 + 0x00000090:word32]
	branch a15 == 0x00000000 l40214444
	// succ:  l4021441E l40214444
l4021441E:
	Mem0[a1 + 0x00000014:word32] = a0
	branch a14 == 0x00000000 l40214432
	// succ:  l40214422 l40214432
l40214422:
	a2 = a14
	a3 = a15
	a4 = 6
	a0 = 0x40202AA8
	v14 = a0
	a0 = 0x4021442E
	call v14 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000014:word32]
	branch a2 != 0x00000000 l40214442
	// succ:  l40214432 l40214442
l40214432:
	a3 = a15
	a2 = a13
	a1 = a1 | a1
	a0 = 0x4021443C
	call sdk_cnx_node_leave (retsize: 0;)
	a0 = 0x402137EC
	v15 = Mem0[a0 + 0x00000090:byte]
	a0 = (uint32) v15
	// succ:  l40214442
l40214442:
	a2 = a0 + 2
	// succ:  l40214444
l40214444:
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	branch a12 < a2 l40214416
	// succ:  l4021444C l40214416
l4021444C:
	a2 = 1
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	a2 = 1
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wifi_softap_deauth_exit sdk_wifi_softap_deauth_exit
l4021445D:
	a2 = 0
	// succ:  l4025444E
l4025444E:
sdk_wifi_softap_deauth_exit:


// sdk_wifi_get_phy_mode
// Return size: 0
void sdk_wifi_get_phy_mode()
sdk_wifi_get_phy_mode_entry:
	// succ:  l40214468
l40214468:
	a1 = fp
	a2 = 0x40214464
	a2 = Mem0[a2 + 0x000002E8:word32]
	return
	// succ:  sdk_wifi_get_phy_mode_exit
sdk_wifi_get_phy_mode_exit:


// sdk_wifi_set_phy_mode
// Return size: 0
void sdk_wifi_set_phy_mode()
sdk_wifi_set_phy_mode_entry:
	// succ:  l40214474
l40214474:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a0
	a12 = a2
	branch a2 == 0x00000000 l402144F5
	// succ:  l40214482 l402144F5
l40214482:
	branch a2 >=u 0x00000004 l402144F5
	// succ:  l40214485 l402144F5
l40214485:
	a0 = 0x40214470
	a0 = Mem0[a0 + 0x0000031C:word32]
	branch a0 == a2 l402144E8
	// succ:  l4021448E l402144E8
l4021448E:
	a0 = 0x40214491
	call fn40313458 (retsize: 0;)
	Mem0[a1:word32] = a2
	a2 = 0x40214470
	Mem0[a2 + 0x0000031C:word32] = a12
	a2 = a2 - 40
	a0 = 0x4021449F
	call fn4031362C (retsize: 0;)
	a3 = 0x402035EC
	v7 = Mem0[a3 + 0x00000000:byte]
	a3 = (uint32) v7
	branch a3 != 1 l402144AE
	// succ:  l402144A8 l402144AE
l402144A8:
	a0 = 0x402144AB
	call sdk_wifi_station_stop (retsize: 0;)
	a0 = 0x402144AE
	call sdk_wifi_softap_stop (retsize: 0;)
	// succ:  l402144AE
l402144AE:
	a2 = a12 | a12
	a0 = 0x402144B4
	call sdk_ieee80211_phy_init (retsize: 0;)
	a5 = 0x40214470
	a4 = 0x00000000
	Mem0[a5 + 0x0000030C:word32] = a4
	branch a12 != 3 l402144C6
	// succ:  l402144C0 l402144C6
l402144C0:
	a2 = a5 + 0xFFFFFE00
	a0 = 0x402144C6
	call sdk_ieee80211_ht_attach (retsize: 0;)
	// succ:  l402144C6
l402144C6:
	a6 = 0x402035EC
	a7 = Mem0[a1 + 0x00000000:word32]
	v12 = Mem0[a6 + 0x00000000:byte]
	a6 = (uint32) v12
	a12 = a7
	branch a6 != 1 l402144E8
	// succ:  l402144D3 l402144E8
l402144D3:
	branch a7 == 1 l402144D9
	// succ:  l402144D6 l402144D9
l402144D6:
	branch a7 != 3 l402144DF
	// succ:  l402144D9 l402144DF
l402144D9:
	a0 = 0x402144DC
	call sdk_wifi_station_start (retsize: 0;)
	a0 = 0x402144DF
	call fn40313D04 (retsize: 0;)
	// succ:  l402144DF
l402144DF:
	branch a12 == 2 l402144E5
	// succ:  l402144E2 l402144E5
l402144E2:
	branch a12 != 3 l402144E8
	// succ:  l402144E5 l402144E8
l402144E5:
	a0 = 0x402144E8
	call sdk_wifi_softap_start (retsize: 0;)
	// succ:  l402144E8
l402144E8:
	a2 = 1
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_set_phy_mode_exit
l402144F5:
	a2 = 0
	// succ:  l402544EA
l402544EA:
sdk_wifi_set_phy_mode_exit:


// sdk_wifi_set_sleep_type
// Return size: 0
void sdk_wifi_set_sleep_type()
sdk_wifi_set_sleep_type_entry:
	// succ:  l402144FC
l402144FC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a2 <u 0x00000003 l40214509
	// succ:  l40214504 l40214509
l40214504:
	a2 = 0
	goto l40214512
	// succ:  l40214512
l40214509:
	a2 = a2 & 0x000000FF
	a0 = 0x4021450F
	call sdk_pm_set_sleep_type_from_upper (retsize: 0;)
	a2 = 0x00000001
	// succ:  l40214512
l40214512:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_set_sleep_type_exit
sdk_wifi_set_sleep_type_exit:


// sdk_wifi_get_sleep_type
// Return size: 0
void sdk_wifi_get_sleep_type()
sdk_wifi_get_sleep_type_entry:
	// succ:  l4021451C
l4021451C:
	a1 = fp
	return
	// succ:  sdk_wifi_get_sleep_type_exit
sdk_wifi_get_sleep_type_exit:


// sdk_wifi_get_channel
// Return size: 0
void sdk_wifi_get_channel()
sdk_wifi_get_channel_entry:
	// succ:  l40214524
l40214524:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40214520
	v4 = a0
	a0 = 0x4021452F
	call v4 (retsize: 0;)
	v6 = Mem0[a2 + 0x00000006:byte]
	a2 = (uint32) v6
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_get_channel_exit
sdk_wifi_get_channel_exit:


// sdk_wifi_set_channel
// Return size: 0
void sdk_wifi_set_channel()
sdk_wifi_set_channel_entry:
	// succ:  l4021453C
l4021453C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 14
	branch a0 >=u a2 l4021454B
	// succ:  l40214546 l4021454B
l40214546:
	a2 = 0
	goto l4021455D
	// succ:  l4021455D
l4021454B:
	a3 = 0x402035F0
	a2 = a2 + a2 * 0x00000002
	a2 = a3 + a2 * 0x00000004
	a2 = a2 + 120
	a0 = 0x4021455A
	call sdk_chm_set_current_channel (retsize: 0;)
	a2 = 0x00000001
	// succ:  l4021455D
l4021455D:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_set_channel_exit
sdk_wifi_set_channel_exit:


// sdk_wifi_promiscuous_set_mac
// Return size: 0
void sdk_wifi_promiscuous_set_mac()
sdk_wifi_promiscuous_set_mac_entry:
	// succ:  l4021456C
l4021456C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a3 = a2 | a2
	a8 = 0x00000001
	a2 = 0x40214568
	a7 = Mem0[a2 + 0x0000026C:word32]
	a7 = a7 | a8
	Mem0[a2 + 0x0000026C:word32] = a7
	a6 = 2
	a5 = Mem0[a2 + 0x0000026C:word32]
	a5 = a5 | a6
	Mem0[a2 + 0x0000026C:word32] = a5
	a4 = 4
	a0 = Mem0[a2 + 0x0000026C:word32]
	a0 = a0 | a4
	Mem0[a2 + 0x0000026C:word32] = a0
	a2 = 0
	a0 = 0x402145B1
	call sdk_wDev_SetMacAddress (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_promiscuous_set_mac_exit
sdk_wifi_promiscuous_set_mac_exit:


// sdk_wifi_promiscuous_enable
// Return size: 0
void sdk_wifi_promiscuous_enable()
sdk_wifi_promiscuous_enable_entry:
	// succ:  l402145B8
l402145B8:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = 0x40214568
	branch a2 == 0x00000000 l4021460D
	// succ:  l402145C6 l4021460D
l402145C6:
	a0 = 0x402145C9
	call sdk_wDevDisableRx (retsize: 0;)
	a11 = -2
	a10 = Mem0[a12 + 0x0000026C:word32]
	a10 = a10 & a11
	Mem0[a12 + 0x0000026C:word32] = a10
	a9 = -3
	a8 = Mem0[a12 + 0x0000026C:word32]
	a8 = a8 & a9
	Mem0[a12 + 0x0000026C:word32] = a8
	a7 = -5
	a6 = Mem0[a12 + 0x0000026C:word32]
	a6 = a6 & a7
	Mem0[a12 + 0x0000026C:word32] = a6
	a5 = 0x402131CC
	a4 = 1
	Mem0[a5 + 0x00000054:byte] = a4
	a0 = 0x40214607
	call sdk_wdev_go_sniffer (retsize: 0;)
	a0 = 0x4021460A
	call sdk_wDevEnableRx (retsize: 0;)
	goto l40214659
	// succ:  l40214659
l4021460D:
	a0 = 0x40214610
	call sdk_wDevDisableRx (retsize: 0;)
	a0 = 0x40214613
	call sdk_wdev_exit_sniffer (retsize: 0;)
	a5 = Mem0[a12 + 0x0000026C:word32]
	a6 = 1
	a5 = a5 | a6
	Mem0[a12 + 0x0000026C:word32] = a5
	a4 = 2
	a3 = Mem0[a12 + 0x0000026C:word32]
	a3 = a3 | a4
	Mem0[a12 + 0x0000026C:word32] = a3
	a2 = 4
	a0 = Mem0[a12 + 0x0000026C:word32]
	a0 = a0 | a2
	a2 = 0
	a3 = 0x40203738
	Mem0[a12 + 0x0000026C:word32] = a0
	a0 = 0x4021464E
	call sdk_wDev_SetMacAddress (retsize: 0;)
	a8 = 0x402131CC
	a7 = 0
	Mem0[a8 + 0x00000054:byte] = a7
	a0 = 0x40214659
	call sdk_wDevEnableRx (retsize: 0;)
	// succ:  l40214659
l40214659:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_promiscuous_enable_exit
sdk_wifi_promiscuous_enable_exit:


// sdk_wifi_set_promiscuous_rx_cb
// Return size: 0
void sdk_wifi_set_promiscuous_rx_cb()
sdk_wifi_set_promiscuous_rx_cb_entry:
	// succ:  l40214664
l40214664:
	a1 = fp
	a3 = 0x40212918
	Mem0[a3 + 0x0000011C:word32] = a2
	return
	// succ:  sdk_wifi_set_promiscuous_rx_cb_exit
sdk_wifi_set_promiscuous_rx_cb_exit:


// sdk_wifi_get_ip_info
// Return size: 0
void sdk_wifi_get_ip_info()
sdk_wifi_get_ip_info_entry:
	// succ:  l4021466C
l4021466C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a14
	a12 = a3
	a14 = a2
	a0 = 0x4021467E
	call fn40313360 (retsize: 0;)
	a13 = a2
	branch a14 >=u 0x00000002 l402146C5
	// succ:  l40214683 l402146C5
l40214683:
	branch a12 == 0x00000000 l402146C5
	// succ:  l40214685 l402146C5
l40214685:
	branch a2 == 0x00000000 l402146AE
	// succ:  l40214687 l402146AE
l40214687:
	a2 = a12
	a3 = a13 + 4
	a4 = 4
	a0 = 0x40203130
	v10 = a0
	a0 = 0x40214693
	call v10 (retsize: 0;)
	a2 = a12 + 4
	a3 = a13 + 8
	a4 = 4
	a0 = 0x40203130
	v11 = a0
	a0 = 0x4021469F
	call v11 (retsize: 0;)
	a2 = a12 + 8
	a3 = a13 + 12
	a4 = 4
	a0 = 0x40203130
	v12 = a0
	a0 = 0x402146AB
	call v12 (retsize: 0;)
	goto l402146B6
	// succ:  l402146B6
l402146AE:
	a0 = 0
	Mem0[a12:word32] = a0
	Mem0[a12 + 0x00000004:word32] = a0
	Mem0[a12 + 0x00000008:word32] = a0
	// succ:  l402146B6
l402146B6:
	a2 = 1
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_get_ip_info_exit
l402146C5:
	a2 = 0
	// succ:  l402546B8
l402546B8:
sdk_wifi_get_ip_info_exit:


// sdk_wifi_set_ip_info
// Return size: 0
void sdk_wifi_set_ip_info()
sdk_wifi_set_ip_info_entry:
	// succ:  l402146E0
l402146E0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	a12 = a3
	a13 = a2
	a0 = 0x402146F2
	call fn40313360 (retsize: 0;)
	a14 = a2
	branch a13 >=u 0x00000002 l4021470D
	// succ:  l402146F7 l4021470D
l402146F7:
	branch a12 == 0x00000000 l4021470D
	// succ:  l402146F9 l4021470D
l402146F9:
	branch a13 != 0x00000000 l40214712
	// succ:  l402146FB l40214712
l402146FB:
	a0 = 0x4021337C
	a2 = 0x402035EC
	v9 = Mem0[a0 + 0x00000000:byte]
	a0 = (uint32) v9
	v10 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v10
	branch a0 != 1 l40214758
	// succ:  l4021470A l40214758
l4021470A:
	branch a2 != 1 l40214758
	// succ:  l4021470D l40214758
l4021470D:
	a2 = 0
	goto l4021474B
	// succ:  l4021474B
l40214712:
	a2 = 0x40203730
	a3 = a12 | a12
	a4 = 0x00000004
	a0 = 0x40203130
	v12 = a0
	a0 = 0x40214721
	call v12 (retsize: 0;)
	a2 = 0x402146CC
	a3 = a12 + 4
	a4 = 4
	a0 = 0x40203130
	v13 = a0
	a0 = 0x4021472F
	call v13 (retsize: 0;)
	a2 = 0x402146D0
	a3 = a12 + 8
	a4 = 4
	a0 = 0x40203130
	v14 = a0
	a0 = 0x4021473C
	call v14 (retsize: 0;)
	branch a14 == 0x00000000 l40214749
	// succ:  l4021473E l40214749
l4021473E:
	a2 = a14
	a3 = a12
	a4 = a12 + 4
	a5 = a12 + 8
	a0 = 0x40214749
	call fn4030C4FC (retsize: 0;)
	// succ:  l40214749
l40214749:
	a2 = 1
	// succ:  l4021474B
l4021474B:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_set_ip_info_exit
l40214758:
	branch a13 != 0x00000000 l40214712
	// succ:  l4021475B l40214712
l4021475B:
	a2 = 0x402146D4
	a3 = a12
	a4 = 4
	a0 = 0x40203130
	v16 = a0
	a0 = 0x40214768
	call v16 (retsize: 0;)
	a2 = 0x402146D8
	a3 = a12 + 4
	a4 = 4
	a0 = 0x40203130
	v17 = a0
	a0 = 0x40214775
	call v17 (retsize: 0;)
	a2 = 0x402146DC
	a3 = a12 + 8
	a4 = 4
	a0 = 0x40203130
	v18 = a0
	a0 = 0x40214782
	call v18 (retsize: 0;)
	// succ:  l4025473C
l4025473C:
sdk_wifi_set_ip_info_exit:


// sdk_wifi_get_macaddr
// Return size: 0
void sdk_wifi_get_macaddr()
sdk_wifi_get_macaddr_entry:
	// succ:  l40214788
l40214788:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	a13 = a3
	a12 = a2
	a0 = 0x40214798
	call fn40313360 (retsize: 0;)
	a0 = a2
	branch a12 >=u 0x00000002 l402147B1
	// succ:  l4021479D l402147B1
l4021479D:
	branch a13 == 0x00000000 l402147B1
	// succ:  l4021479F l402147B1
l4021479F:
	branch a2 == 0x00000000 l402147D0
	// succ:  l402147A1 l402147D0
l402147A1:
	a2 = a13
	a4 = 6
	a3 = a0 + 41
	a0 = 0x40203130
	v9 = a0
	a0 = 0x402147AE
	call v9 (retsize: 0;)
	goto l402147C3
	// succ:  l402147C3
l402147B1:
	a2 = 0
	goto l402147C5
	// succ:  l402147C5
l402147B6:
	a2 = a13
	a3 = 0x40203734
	a4 = 6
	a0 = 0x40203130
	v11 = a0
	a0 = 0x402147C3
	call v11 (retsize: 0;)
	// succ:  l402147C3
l402147C3:
	a2 = 1
	// succ:  l402147C5
l402147C5:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_get_macaddr_exit
l402147D0:
	branch a12 != 0x00000000 l402147B6
	// succ:  l402147D3 l402147B6
l402147D3:
	a2 = a13
	a3 = 0x40203738
	a4 = 6
	a0 = 0x40203130
	v10 = a0
	a0 = 0x402147E0
	call v10 (retsize: 0;)
	// succ:  l402547C3
l402547C3:
sdk_wifi_get_macaddr_exit:


// sdk_wifi_set_macaddr
// Return size: 0
void sdk_wifi_set_macaddr()
sdk_wifi_set_macaddr_entry:
	// succ:  l402147E4
l402147E4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	a12 = a3
	a13 = a2
	a0 = 0x402147F6
	call fn40313360 (retsize: 0;)
	a14 = a2
	branch a13 >=u 0x00000002 l40214805
	// succ:  l402147FB l40214805
l402147FB:
	branch a12 == 0x00000000 l40214805
	// succ:  l402147FD l40214805
l402147FD:
	branch a13 != 0x00000000 l40214814
	// succ:  l402147FF l40214814
l402147FF:
	a0 = 0x40214802
	call fn40313458 (retsize: 0;)
	branch a2 != 2 l40214853
	// succ:  l40214805 l40214853
l40214805:
	a2 = 0
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_set_macaddr_exit
l40214814:
	a0 = 0x40214817
	call fn40313458 (retsize: 0;)
	branch a2 == 1 l40214805
	// succ:  l4021481A l40214805
l4021481A:
	a3 = a12 | a12
	a13 = 0x40203734
	a4 = 0x00000006
	a2 = a13
	a0 = 0x40202AA8
	v10 = a0
	a0 = 0x4021482B
	call v10 (retsize: 0;)
	branch a2 == 0x00000000 l4021484E
	// succ:  l4021482D l4021484E
l4021482D:
	a2 = a13
	a3 = a12
	a4 = 6
	a0 = 0x40203130
	v11 = a0
	a0 = 0x40214839
	call v11 (retsize: 0;)
	branch a14 == 0x00000000 l4021484E
	// succ:  l4021483B l4021484E
l4021483B:
	a3 = a12
	a2 = a14 + 41
	a4 = 6
	a0 = 0x40203130
	v12 = a0
	a0 = 0x40214848
	call v12 (retsize: 0;)
	a0 = 0x4021484B
	call sdk_wifi_softap_stop (retsize: 0;)
	a0 = 0x4021484E
	call sdk_wifi_softap_start (retsize: 0;)
	// succ:  l4021484E
l4021484E:
	a2 = 1
	goto l40254807
	// succ:  l40254807
l40214853:
	a3 = a12 | a12
	a13 = 0x40203738
	a4 = 0x00000006
	a2 = a13
	a0 = 0x40202AA8
	v13 = a0
	a0 = 0x40214864
	call v13 (retsize: 0;)
	branch a2 == 0x00000000 l4021484E
	// succ:  l40214867 l4021484E
l40214867:
	a2 = a13
	a3 = a12
	a4 = 6
	a0 = 0x40203130
	v14 = a0
	a0 = 0x40214873
	call v14 (retsize: 0;)
	branch a14 == 0x00000000 l4021484E
	// succ:  l40214876 l4021484E
l40214876:
	a3 = a12
	a2 = a14 + 41
	a4 = 6
	a0 = 0x40203130
	v15 = a0
	a0 = 0x40214883
	call v15 (retsize: 0;)
	a0 = 0x40214886
	call sdk_wifi_station_stop (retsize: 0;)
	a0 = 0x40214889
	call sdk_wifi_station_start (retsize: 0;)
	a0 = 0x4021488C
	call fn40313D04 (retsize: 0;)
	goto l4025484E
	// succ:  l4025484E
l40254807:
l4025484E:
sdk_wifi_set_macaddr_exit:


// sdk_wifi_status_led_install
// Return size: 0
void sdk_wifi_status_led_install()
sdk_wifi_status_led_install_entry:
	// succ:  l40214894
l40214894:
	a1 = fp
	a6 = a4 & 0x00000003
	a8 = 1
	a9 = 0x40214890
	a7 = 4
	a7 = a4 & a7
	Mem0[a9 + 0x00000081:byte] = a2
	Mem0[a9 + 0x00000082:byte] = a8
	Mem0[a9 + 0x00000080:byte] = a8
	a7 = a7 << 30
	a6 = a6 | a7
	a6 = a6 << 28
	a7 = 0xFFFFFECF
	a5 = Mem0[a3 + 0x00000000:word32]
	a5 = a5 & a7
	a5 = a5 | a6
	Mem0[a3:word32] = a5
	return
	// succ:  sdk_wifi_status_led_install_exit
sdk_wifi_status_led_install_exit:


// sdk_system_uart_swap
// Return size: 0
void sdk_system_uart_swap()
sdk_system_uart_swap_entry:
	// succ:  l402148C8
l402148C8:
	a1 = fp
	a4 = 0x40204514
	a5 = 0x40212EE4
	a2 = Mem0[a5 + 0x0000021C:word32]
	branch (a4 & a2) == 0x00000000 l402148E0
	// succ:  l402148D7 l402148E0
l402148D7:
	a3 = Mem0[a5 + 0x0000021C:word32]
	branch (a3 & a4) != 0x00000000 l402148D7
	// succ:  l402148E0 l402148D7
l402148E0:
	a5 = 0x40212EE8
	a6 = Mem0[a5 + 0x0000011C:word32]
	branch (a4 & a6) == 0x00000000 l402148F5
	// succ:  l402148EC l402148F5
l402148EC:
	a7 = Mem0[a5 + 0x0000011C:word32]
	branch (a7 & a4) != 0x00000000 l402148EC
	// succ:  l402148F5 l402148EC
l402148F5:
	a9 = 0x4021287C
	a4 = 0xFFFFFECF
	a3 = 0x00000100
	a2 = 0x402125CC
	a5 = Mem0[a2 + 0x00000208:word32]
	a5 = a5 & a4
	a5 = a5 | a3
	Mem0[a2 + 0x00000208:word32] = a5
	a11 = Mem0[a2 + 0x00000210:word32]
	a11 = a11 & a4
	a11 = a11 | a3
	Mem0[a2 + 0x00000210:word32] = a11
	a10 = 4
	a8 = Mem0[a9 + 0x00000228:word32]
	a8 = a8 | a10
	Mem0[a9 + 0x00000228:word32] = a8
	return
	// succ:  sdk_system_uart_swap_exit
sdk_system_uart_swap_exit:


// sdk_system_get_sdk_version
// Return size: 0
void sdk_system_get_sdk_version()
sdk_system_get_sdk_version_entry:
	// succ:  l4021493C
l4021493C:
	a1 = fp
	a2 = 0x40214938
	return
	// succ:  sdk_system_get_sdk_version_exit
sdk_system_get_sdk_version_exit:


// sdk_ieee80211_ifattach
// Return size: 0
void sdk_ieee80211_ifattach()
sdk_ieee80211_ifattach_entry:
	// succ:  l402149DC
l402149DC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2 | a2
	a0 = 0x402149EB
	call fn4031494C (retsize: 0;)
	a2 = a12
	a0 = 0x00000064
	Mem0[a12 + 0x00000028:word16] = a0
	a0 = 0x402149F6
	call sdk_ieee80211_crypto_attach (retsize: 0;)
	a2 = a12
	a0 = 0x402149FB
	call sdk_ieee80211_proto_attach (retsize: 0;)
	a3 = 0
	a4 = a12 + 0x00000500
	a2 = Mem0[a4 + 0x0000001C:word32]
	Mem0[a4 + 0x0000000C:word32] = a3
	branch a2 != 3 l40214A0C
	// succ:  l40214A07 l40214A0C
l40214A07:
	a2 = a12
	a0 = 0x40214A0C
	call sdk_ieee80211_ht_attach (retsize: 0;)
	// succ:  l40214A0C
l40214A0C:
	a2 = 0x402035F0
	a0 = 0x40214A12
	call sdk_chm_init (retsize: 0;)
	a2 = a12
	a0 = 0x40214A17
	call sdk_ieee80211_scan_attach (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_ifattach_exit
sdk_ieee80211_ifattach_exit:


// sdk_ieee80211_mhz2ieee
// Return size: 0
void sdk_ieee80211_mhz2ieee()
sdk_ieee80211_mhz2ieee_entry:
	// succ:  l40214A2C
l40214A2C:
	a1 = fp
	a6 = 0x40214A20
	a7 = 0x40214A24
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40214948
	branch (a3 & 0x00000080) == 0x00000000 l40214A50
	// succ:  l40214A3D l40214A50
l40214A3D:
	branch a2 == a0 l40214A7E
	// succ:  l40214A40 l40214A7E
l40214A40:
	branch a6 <u a2 l40214A6C
	// succ:  l40214A43 l40214A6C
l40214A43:
	a2 = a2 + a7
	a3 = 5
	a0 = 0x40202548
	v8 = a0
	a0 = 0x40214A4D
	call v8 (retsize: 0;)
	goto l40214A65
	// succ:  l40214A65
l40214A50:
	branch a2 == a0 l40214A7E
	// succ:  l40214A53 l40214A7E
l40214A53:
	branch a6 <u a2 l40214A63
	// succ:  l40214A56 l40214A63
l40214A56:
	a2 = a2 + a7
	a3 = 5
	a0 = 0x40202548
	v9 = a0
	a0 = 0x40214A60
	call v9 (retsize: 0;)
	goto l40214A65
	// succ:  l40214A65
l40214A63:
	a2 = -1
	// succ:  l40214A65
l40214A65:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_mhz2ieee_exit
l40214A6C:
	a0 = 0x40214A28
	a3 = 20
	a2 = a2 + a0
	a0 = 0x40204388
	v10 = a0
	a0 = 0x40214A79
	call v10 (retsize: 0;)
	a2 = a2 + 15
	goto l40254A65
	// succ:  l40254A65
l40214A7E:
	a2 = 14
	// succ:  l40254A65
l40254A65:
sdk_ieee80211_mhz2ieee_exit:


// sdk_ieee80211_chan2ieee
// Return size: 0
void sdk_ieee80211_chan2ieee()
sdk_ieee80211_chan2ieee_entry:
	// succ:  l40214A84
l40214A84:
	a1 = fp
	branch a2 != 0x00000000 l40214A8A
	// succ:  l40214A86 l40214A8A
l40214A86:
	a2 = 0
	return
	// succ:  sdk_ieee80211_chan2ieee_exit
l40214A8A:
	a5 = 0x4020A190
	branch a2 == a5 l40214A95
	// succ:  l40214A90 l40214A95
l40214A90:
	v5 = Mem0[a2 + 0x00000006:byte]
	a2 = (uint32) v5
	return
	// succ:  sdk_ieee80211_chan2ieee_exit
l40214A95:
	a2 = a5
	return
	// succ:  sdk_ieee80211_chan2ieee_exit
sdk_ieee80211_chan2ieee_exit:


// sdk_ieee80211_ieee2mhz
// Return size: 0
void sdk_ieee80211_ieee2mhz()
sdk_ieee80211_ieee2mhz_entry:
	// succ:  l40214AA4
l40214AA4:
	a1 = fp
	a7 = 14
	a8 = 13
	a6 = 0x40214A9C
	a9 = 0x40214AA0
	branch (a3 & 0x00000080) == 0x00000000 l40214ABF
	// succ:  l40214AB1 l40214ABF
l40214AB1:
	branch a2 == a7 l40214AD4
	// succ:  l40214AB4 l40214AD4
l40214AB4:
	branch a8 >=u a2 l40214ACD
	// succ:  l40214AB7 l40214ACD
l40214AB7:
	a2 = a2 + a2 * 0x00000004
	a2 = a9 + a2 * 0x00000004
	return
	// succ:  sdk_ieee80211_ieee2mhz_exit
l40214ABF:
	branch a2 == a7 l40214AD4
	// succ:  l40214AC2 l40214AD4
l40214AC2:
	branch a8 >=u a2 l40214ACD
	// succ:  l40214AC5 l40214ACD
l40214AC5:
	a3 = 26
	branch a3 >=u a2 l40214AB7
	// succ:  l40214ACA l40214AB7
l40214ACA:
	a6 = 0x4020C700
	// succ:  l40214ACD
l40214ACD:
	a2 = a2 + a2 * 0x00000004
	a2 = a2 + a6
	return
	// succ:  sdk_ieee80211_ieee2mhz_exit
l40214AD4:
	a2 = 0x40214948
	return
	// succ:  sdk_ieee80211_ieee2mhz_exit
sdk_ieee80211_ieee2mhz_exit:


// sdk_ieee80211_find_channel
// Return size: 0
void sdk_ieee80211_find_channel()
sdk_ieee80211_find_channel_entry:
	// succ:  l40214ADC
l40214ADC:
	a1 = fp
	a6 = Mem0[a2 + 0x00000080:word32]
	branch a6 < 1 l40214B00
	// succ:  l40214AE2 l40214B00
l40214AE2:
	a7 = a6 + a6 * 0x00000002
	a7 = a2 + a7 * 0x00000004
	// succ:  l40214AE8
l40214AE8:
	v7 = Mem0[a2 + 0x00000088:uint16]
	a8 = (uint32) v7
	a9 = Mem0[a2 + 0x00000084:word32]
	branch a3 != a8 l40214AFB
	// succ:  l40214AF1 l40214AFB
l40214AF1:
	branch (a9 & a4) == 0x00000000 l40214AFB
	// succ:  l40214AF4 l40214AFB
l40214AF4:
	a10 = 0x00000084
	a2 = a2 + a10
	return
	// succ:  sdk_ieee80211_find_channel_exit
l40214AFB:
	a2 = a2 + 12
	branch a2 != a7 l40214AE8
	// succ:  l40214B00 l40214AE8
l40214B00:
	a2 = 0
	return
	a2 = 0
	return
	// succ:  sdk_ieee80211_find_channel_exit sdk_ieee80211_find_channel_exit
sdk_ieee80211_find_channel_exit:


// sdk_ieee80211_find_channel_byieee
// Return size: 0
void sdk_ieee80211_find_channel_byieee()
sdk_ieee80211_find_channel_byieee_entry:
	// succ:  l40214B04
l40214B04:
	a1 = fp
	a6 = Mem0[a2 + 0x00000080:word32]
	branch a6 < 1 l40214B28
	// succ:  l40214B0A l40214B28
l40214B0A:
	a7 = a6 + a6 * 0x00000002
	a7 = a2 + a7 * 0x00000004
	// succ:  l40214B10
l40214B10:
	v7 = Mem0[a2 + 0x0000008A:byte]
	a8 = (uint32) v7
	a9 = Mem0[a2 + 0x00000084:word32]
	branch a3 != a8 l40214B23
	// succ:  l40214B19 l40214B23
l40214B19:
	branch (a9 & a4) == 0x00000000 l40214B23
	// succ:  l40214B1C l40214B23
l40214B1C:
	a10 = 0x00000084
	a2 = a2 + a10
	return
	// succ:  sdk_ieee80211_find_channel_byieee_exit
l40214B23:
	a2 = a2 + 12
	branch a2 != a7 l40214B10
	// succ:  l40214B28 l40214B10
l40214B28:
	a2 = 0
	return
	a2 = 0
	return
	// succ:  sdk_ieee80211_find_channel_byieee_exit sdk_ieee80211_find_channel_byieee_exit
sdk_ieee80211_find_channel_byieee_exit:


// sdk_wifi_mode_set
// Return size: 0
void sdk_wifi_mode_set()
sdk_wifi_mode_set_entry:
	// succ:  l40214B4C
l40214B4C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a0
	a12 = a2
	a2 = 0x40214B2C
	a0 = 0x402034D0
	v6 = a0
	a0 = 0x40214B5E
	call v6 (retsize: 0;)
	branch a12 == 0x00000000 l40214C36
	// succ:  l40214B61 l40214C36
l40214B61:
	branch a12 == 1 l40214B6D
	// succ:  l40214B64 l40214B6D
l40214B64:
	branch a12 == 2 l40214BDA
	// succ:  l40214B67 l40214BDA
l40214B67:
	a0 = a12 - 3
	branch a0 != 0x00000000 l40214C3F
	// succ:  l40214B6D l40214C3F
l40214B6D:
	a2 = 0x40214B30
	a0 = 0x402034D0
	v7 = a0
	a0 = 0x40214B76
	call v7 (retsize: 0;)
	a2 = 0x40203730
	v9 = Mem0[a2 + 0x00000022:byte]
	a7 = (uint32) v9
	v11 = Mem0[a2 + 0x00000021:byte]
	a6 = (uint32) v11
	v13 = Mem0[a2 + 0x00000020:byte]
	a5 = (uint32) v13
	v15 = Mem0[a2 + 0x0000001F:byte]
	a4 = (uint32) v15
	v17 = Mem0[a2 + 0x0000001E:byte]
	a3 = (uint32) v17
	v18 = Mem0[a2 + 0x00000023:byte]
	a2 = (uint32) v18
	Mem0[a1:word32] = a2
	a2 = 0x40214B34
	a0 = 0x402034D0
	v19 = a0
	a0 = 0x40214B96
	call v19 (retsize: 0;)
	a3 = 0x402035F0
	a3 = Mem0[a3 + 0x00000010:word32]
	branch a3 != 0x00000000 l40214BCE
	// succ:  l40214B9D l40214BCE
l40214B9D:
	a2 = 0x00000288
	a0 = 0x402142E8
	v20 = a0
	a0 = 0x40214BA6
	call v20 (retsize: 0;)
	a5 = 0x402035F0
	a4 = 0
	Mem0[a5 + 0x00000010:word32] = a2
	Mem0[a2 + 0x000000B0:word32] = a4
	Mem0[a2 + 0x0000003C:word32] = a4
	a2 = 0x00000110
	a0 = 0x402142E8
	v21 = a0
	a0 = 0x40214BBB
	call v21 (retsize: 0;)
	a6 = 0x402035F0
	a3 = 0x40214B38
	a6 = Mem0[a6 + 0x00000010:word32]
	a4 = 6
	Mem0[a6 + 0x0000008C:word32] = a2
	a0 = 0x40203130
	v22 = a0
	a0 = 0x40214BCE
	call v22 (retsize: 0;)
	// succ:  l40214BCE
l40214BCE:
	branch a12 == 1 l40214C3F
	// succ:  l40214BD1 l40214C3F
l40214BD1:
	a2 = 0x40214B3C
	a0 = 0x402034D0
	v24 = a0
	a0 = 0x40214BDA
	call v24 (retsize: 0;)
	// succ:  l40214BDA
l40214BDA:
	a12 = 0x402035F0
	a2 = 0x40214B40
	a0 = 0x402034D0
	v26 = a0
	a0 = 0x40214BE6
	call v26 (retsize: 0;)
	a8 = 0x40203730
	a2 = 0x40214B34
	v28 = Mem0[a8 + 0x0000001C:byte]
	a7 = (uint32) v28
	v29 = Mem0[a8 + 0x0000001B:byte]
	a6 = (uint32) v29
	v30 = Mem0[a8 + 0x0000001A:byte]
	a5 = (uint32) v30
	v31 = Mem0[a8 + 0x00000019:byte]
	a4 = (uint32) v31
	v32 = Mem0[a8 + 0x00000018:byte]
	a3 = (uint32) v32
	v33 = Mem0[a8 + 0x0000001D:byte]
	a8 = (uint32) v33
	Mem0[a1:word32] = a8
	a0 = 0x402034D0
	v34 = a0
	a0 = 0x40214C06
	call v34 (retsize: 0;)
	a9 = Mem0[a12 + 0x00000014:word32]
	branch a9 != 0x00000000 l40214C3F
	// succ:  l40214C0A l40214C3F
l40214C0A:
	a2 = 0x00000288
	a0 = 0x402142E8
	v36 = a0
	a0 = 0x40214C13
	call v36 (retsize: 0;)
	Mem0[a12 + 0x00000014:word32] = a2
	a10 = 1
	Mem0[a2 + 0x000000B0:word32] = a10
	a2 = 0x00000110
	a0 = 0x402142E8
	v38 = a0
	a0 = 0x40214C23
	call v38 (retsize: 0;)
	a3 = 0x40214B38
	a11 = Mem0[a12 + 0x00000014:word32]
	a4 = 6
	Mem0[a11 + 0x00000090:word32] = a2
	a0 = 0x40203130
	v40 = a0
	a0 = 0x40214C33
	call v40 (retsize: 0;)
	goto l40214C3F
	// succ:  l40214C3F
l40214C36:
	a2 = 0x40214B44
	a0 = 0x402034D0
	v23 = a0
	a0 = 0x40214C3F
	call v23 (retsize: 0;)
	// succ:  l40214C3F
l40214C3F:
	a2 = 0x40214B48
	a0 = 0x402034D0
	v25 = a0
	a0 = 0x40214C48
	call v25 (retsize: 0;)
	a2 = 1
	a12 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wifi_mode_set_exit
sdk_wifi_mode_set_exit:


// sdk_ieee80211_crypto_attach
// Return size: 0
void sdk_ieee80211_crypto_attach()
sdk_ieee80211_crypto_attach_entry:
	// succ:  l40214C54
l40214C54:
	a1 = fp
	return
	// succ:  sdk_ieee80211_crypto_attach_exit
sdk_ieee80211_crypto_attach_exit:


// sdk_ieee80211_crypto_available
// Return size: 0
void sdk_ieee80211_crypto_available()
sdk_ieee80211_crypto_available_entry:
	// succ:  l40214C58
l40214C58:
	a1 = fp
	a2 = 0
	return
	// succ:  sdk_ieee80211_crypto_available_exit
sdk_ieee80211_crypto_available_exit:


// sdk_ieee80211_crypto_setkey
// Return size: 0
void sdk_ieee80211_crypto_setkey()
sdk_ieee80211_crypto_setkey_entry:
	// succ:  l40214C5C
l40214C5C:
	a1 = fp
	a2 = 0
	return
	// succ:  sdk_ieee80211_crypto_setkey_exit
sdk_ieee80211_crypto_setkey_exit:


// sdk_ieee80211_crypto_encap
// Return size: 0
void sdk_ieee80211_crypto_encap()
sdk_ieee80211_crypto_encap_entry:
	// succ:  l40214C60
l40214C60:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	a4 = Mem0[a3 + 0x00000020:word32]
	a0 = Mem0[a2 + 0x00000088:word32]
	a4 = Mem0[a4 + 0x00000000:word32]
	a2 = 0x402035F0
	branch (a4 & 0x00000080) == 0x00000000 l40214CA7
	// succ:  l40214C72 l40214CA7
l40214C72:
	v7 = Mem0[a0 + 0x000000E9:byte]
	a0 = (uint32) v7
	branch a0 <u 0x00000002 l40214C7D
	// succ:  l40214C78 l40214C7D
l40214C78:
	a6 = a0 - 1
	goto l40214C7F
	// succ:  l40214C7F
l40214C7D:
	a6 = a0
	// succ:  l40214C7F
l40214C7F:
	a2 = a2 + a0 * 0x00000004
	a2 = Mem0[a2 + 0x00000190:word32]
	a4 = a6 << 26
	a0 = Mem0[a2 + 0x00000098:word32]
	a4 = a4 & 0x000000FF
	a0 = Mem0[a0 + 0x00000010:word32]
	Mem0[a1:word32] = a2
	v10 = a0
	a0 = 0x40214C95
	call v10 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000000:word32]
	a3 = Mem0[a1 + 0x00000004:word32]
	a0 = 0
	a1 = a1 + 16
	branch a2 == 0x00000000 l40214CA1
	// succ:  l40214C9E_1 l40214CA1
l40214C9E_1:
	a0 = a4
	// succ:  l40214CA1
l40214CA1:
	a2 = a0
	a0 = a3
	return
	// succ:  sdk_ieee80211_crypto_encap_exit
l40214CA7:
	a6 = 0
	v9 = Mem0[a0 + 0x000000E8:byte]
	a0 = (uint32) v9
	// succ:  l40254C7F
l40254C7F:
sdk_ieee80211_crypto_encap_exit:


// sdk_ieee80211_crypto_decap
// Return size: 0
void sdk_ieee80211_crypto_decap()
sdk_ieee80211_crypto_decap_entry:
	// succ:  l40214CB0
l40214CB0:
	a1 = fp
	a1 = a1 - 16
	v4 = Mem0[a3 + 0x00000016:uint16]
	a5 = (uint32) v4
	Mem0[a1 + 0x00000004:word32] = a0
	v7 = Mem0[a3 + 0x00000014:uint16]
	a0 = (uint32) v7
	a6 = 0x402035F0
	a0 = a0 + a5
	branch a0 <u 0x00000020 l40214CE4
	// succ:  l40214CC3 l40214CE4
l40214CC3:
	a0 = Mem0[a3 + 0x00000004:word32]
	a0 = Mem0[a0 + 0x00000004:word32]
	v10 = Mem0[a0 + 0x00000004:byte]
	a7 = (uint32) v10
	a0 = a4 + a0
	branch (a7 & 0x00000001) == 0x00000000 l40214D01
	// succ:  l40214CCF l40214D01
l40214CCF:
	v12 = Mem0[a0 + 0x00000003:byte]
	a0 = (uint32) v12
	a0 = a0 >>u 0x00000006 & 0x00000003
	a0 = a0 - 1
	a0 = a0 & 0x000000FF
	a2 = a6 + a0 * 0x00000004
	a2 = Mem0[a2 + 0x00000190:word32]
	Mem0[a1:word32] = a2
	branch a2 != 0x00000000 l40214CE9
	// succ:  l40214CE4 l40214CE9
l40214CE4:
	a2 = 0
	goto l40214CFA
	// succ:  l40214CFA
l40214CE9:
	a0 = Mem0[a2 + 0x00000098:word32]
	a0 = Mem0[a0 + 0x00000014:word32]
	v14 = a0
	a0 = 0x40214CF1
	call v14 (retsize: 0;)
	a4 = a2
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = 0
	branch a4 == 0x00000000 l40214CFA
	// succ:  l40214CF7_1 l40214CFA
l40214CF7_1:
	a2 = a3
	// succ:  l40214CFA
l40214CFA:
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_crypto_decap_exit sdk_ieee80211_crypto_decap_exit
l40214D01:
	a0 = Mem0[a2 + 0x00000088:word32]
	v15 = Mem0[a0 + 0x000000E8:byte]
	a0 = (uint32) v15
	// succ:  l40254CDA
l40254CDA:
sdk_ieee80211_crypto_decap_exit:


// sdk_ieee80211_hostap_attach
// Return size: 0
void sdk_ieee80211_hostap_attach()
sdk_ieee80211_hostap_attach_entry:
	// succ:  l4021503C
l4021503C:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000038:word32] = a13
	Mem0[a1 + 0x00000034:word32] = a12
	Mem0[a1 + 0x00000030:word32] = a0
	a12 = a2
	a0 = a2 + 0x00000300
	v7 = Mem0[a0 + 0x0000000E:byte]
	a0 = (uint32) v7
	a13 = Mem0[a2 + 0x00000014:word32]
	branch a0 >= 5 l40215058
	// succ:  l40215052 l40215058
l40215052:
	branch a0 < 2 l40215058
	// succ:  l40215055 l40215058
l40215055:
	a0 = 0x40215058
	call fn40314E88 (retsize: 0;)
	// succ:  l40215058
l40215058:
	a2 = 1
	a4 = 2
	a3 = Mem0[a13 + 0x00000000:word32]
	a5 = 0x00000064
	a3 = a3 + 41
	a0 = 0x40215067
	call sdk_ic_bss_info_update (retsize: 0;)
	a2 = 0x40215034
	a3 = 4
	a4 = 5
	a5 = 0
	Mem0[a12 + 0x000001D0:word16] = a5
	Mem0[a13 + 0x0000003C:word32] = a4
	a0 = 0x40215078
	call sdk_ppRegisterTxCallback (retsize: 0;)
	a2 = a13
	a3 = a1
	a0 = 0x4021507F
	call sdk_ieee80211_beacon_alloc (retsize: 0;)
	a12 = 0x40214D18
	Mem0[a12 + 0x00000020:word32] = a2
	a13 = a12 - 4
	a2 = a12
	a0 = 0x4021508C
	call fn40312748 (retsize: 0;)
	a4 = Mem0[a13 + 0x00000024:word32]
	a2 = a12
	a3 = 0x40215038
	a0 = 0x40215096
	call fn40312614 (retsize: 0;)
	a0 = 0x40215099
	call sdk_wDev_Reset_TBTT (retsize: 0;)
	a0 = 0x4021509C
	call sdk_wDev_Get_Next_TBTT (retsize: 0;)
	a3 = a2
	a4 = 0
	a2 = a12
	a0 = 0x402150A5
	call fn40312734 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000034:word32]
	a13 = Mem0[a1 + 0x00000038:word32]
	a0 = Mem0[a1 + 0x00000030:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_ieee80211_hostap_attach_exit
sdk_ieee80211_hostap_attach_exit:


// sdk_hostap_handle_timer
// Return size: 0
void sdk_hostap_handle_timer()
sdk_hostap_handle_timer_entry:
	// succ:  l402150EC
l402150EC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = a2
	a2 = 0x402125CC
	a0 = Mem0[a12 + 0x00000108:word32]
	a2 = Mem0[a2 + 0x00000024:word32]
	branch a2 <u a0 l40215112
	// succ:  l40215103 l40215112
l40215103:
	a3 = 0x00000138
	a2 = a2 - a0
	a0 = 0x40204388
	v7 = a0
	a0 = 0x4021510F
	call v7 (retsize: 0;)
	goto l40215125
	// succ:  l40215125
l40215112:
	a3 = 0xFFFFFFFF
	a3 = a0 ^ a3
	a2 = a2 + a3
	a2 = a2 + 1
	a3 = 0x00000138
	a0 = 0x40204388
	v8 = a0
	a0 = 0x40215125
	call v8 (retsize: 0;)
	// succ:  l40215125
l40215125:
	a4 = 0x402150E8
	branch a4 >=u a2 l4021515E
	// succ:  l4021512B l4021515E
l4021512B:
	a3 = 0x000000A0
	a2 = 0x402035F0
	a4 = 4
	a5 = Mem0[a2 + 0x00000014:word32]
	a2 = Mem0[a2 + 0x00000014:word32]
	a6 = Mem0[a5 + 0x00000088:word32]
	Mem0[a1:word32] = a6
	Mem0[a5 + 0x00000088:word32] = a12
	a0 = 0x40215142
	call sdk_ieee80211_send_mgmt (retsize: 0;)
	a3 = 0x000000C0
	a2 = 0x402035F0
	a4 = 2
	a2 = Mem0[a2 + 0x00000014:word32]
	a0 = 0x4021514F
	call sdk_ieee80211_send_mgmt (retsize: 0;)
	a2 = 0x402035F0
	a2 = Mem0[a2 + 0x00000014:word32]
	a3 = Mem0[a1 + 0x00000000:word32]
	Mem0[a2 + 0x00000088:word32] = a3
	a3 = a12
	a0 = 0x4021515E
	call sdk_cnx_node_leave (retsize: 0;)
	// succ:  l4021515E
l4021515E:
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_hostap_handle_timer_exit
sdk_hostap_handle_timer_exit:


// sdk_hostap_input
// Return size: 0
void sdk_hostap_input()
sdk_hostap_input_entry:
	// succ:  l40215174
l40215174:
	a1 = fp
	a11 = a4
	a1 = a1 - 64
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x00000028:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a12
	a13 = a2
	a12 = a3
	a0 = Mem0[a12 + 0x00000010:word32]
	a2 = Mem0[a2 + 0x00000000:word32]
	v12 = Mem0[a0 + 0x00000001:byte]
	a4 = (uint32) v12
	a3 = a5
	a4 = a4 >>u 6
	branch a4 != 0x00000000 l4021519E
	// succ:  l40215195 l4021519E
l40215195:
	v14 = Mem0[a0 + 0x00000002:uint16]
	a0 = (uint32) v14
	a0 = a0 & 0x00000FFF
	goto l402151AD
	// succ:  l402151AD
l4021519E:
	v15 = Mem0[a0 + 0x00000006:uint16]
	a5 = (uint32) v15
	v16 = Mem0[a0 + 0x00000004:uint16]
	a4 = (uint32) v16
	a0 = a5 << 16
	a0 = a0 | a4
	a0 = a0 >>u 8
	// succ:  l402151AD
l402151AD:
	a0 = a0 & 0x0000FFFF
	branch a0 <u 0x00000010 l402151EE
	// succ:  l402151B3 l402151EE
l402151B3:
	a14 = Mem0[a12 + 0x00000004:word32]
	a14 = Mem0[a14 + 0x00000004:word32]
	v17 = Mem0[a14 + 0x00000000:byte]
	a4 = (uint32) v17
	a15 = 0x000000FF
	a6 = a4 & 0x00000003
	branch a6 != 0x00000000 l4021520C
	// succ:  l402151C3 l4021520C
l402151C3:
	a9 = 23
	Mem0[a1 + 0x00000010:word32] = a11
	Mem0[a1 + 0x0000000C:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a2
	v20 = Mem0[a14 + 0x00000001:byte]
	a5 = (uint32) v20
	a6 = 0x000000F0
	a15 = 12
	a15 = a4 & a15
	a6 = a4 & a6
	Mem0[a1 + 0x00000034:word32] = a6
	a5 = a5 & 0x00000003
	Mem0[a1 + 0x00000018:word32] = a5
	branch a5 != 0x00000000 l402151E5
	// succ:  l402151E2 l402151E5
l402151E2:
	branch a15 != 4 l4021520F
	// succ:  l402151E5 l4021520F
l402151E5:
	Mem0[a1 + 0x00000004:word32] = a0
	a2 = a14 + 4
	Mem0[a1 + 0x00000038:word32] = a2
	goto l4021521B
	// succ:  l4021521B
l402151EE:
	a15 = 0x000000FF
	// succ:  l402151F1
l402151F1:
	branch a12 == 0x00000000 l402151FA
	// succ:  l402151F4 l402151FA
l402151F4:
	a2 = a12 | a12
	a0 = 0x402151FA
	call sdk_ppRecycleRxPkt (retsize: 0;)
	// succ:  l402151FA
l402151FA:
	a2 = a15 | a15
	a12 = Mem0[a1 + 0x00000020:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000028:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a0 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_hostap_input_exit
l4021520C:
	goto l402551F1
	// succ:  l402551F1
l4021520F:
	branch a9 >=u a0 l402151F1
	// succ:  l40215212 l402151F1
l40215212:
	Mem0[a1 + 0x00000004:word32] = a0
	a3 = a14 + 16
	Mem0[a1 + 0x00000038:word32] = a3
	// succ:  l4021521B
l4021521B:
	a2 = a14 + 10
	Mem0[a1 + 0x00000014:word32] = a2
	a0 = 0x40215223
	call sdk_cnx_node_search (retsize: 0;)
	a8 = 0x40215168
	branch a2 != 0x00000000 l40215258
	// succ:  l40215228 l40215258
l40215228:
	a2 = Mem0[a1 + 0x00000038:word32]
	a3 = a8
	a4 = 6
	a0 = 0x40202AA8
	v22 = a0
	a0 = 0x40215234
	call v22 (retsize: 0;)
	branch a2 == 0x00000000 l40215248
	// succ:  l40215236 l40215248
l40215236:
	a2 = Mem0[a1 + 0x00000038:word32]
	a3 = Mem0[a1 + 0x00000008:word32]
	a4 = 6
	a3 = a3 + 41
	a0 = 0x40202AA8
	v23 = a0
	a0 = 0x40215245
	call v23 (retsize: 0;)
	branch a2 != 0x00000000 l402151F1
	// succ:  l40215248 l402151F1
l40215248:
	a2 = 0x40215168
	a0 = 0x4021524E
	call sdk_cnx_node_search (retsize: 0;)
	Mem0[a1 + 0x00000030:word32] = a2
	branch a2 != 0x00000000 l40215265
	// succ:  l40215252 l40215265
l40215252:
	goto l402551F1
	// succ:  l402551F1
l40215258:
	Mem0[a1 + 0x00000030:word32] = a2
	a4 = 0x402125CC
	a4 = Mem0[a4 + 0x00000024:word32]
	Mem0[a2 + 0x00000108:word32] = a4
	// succ:  l40215265
l40215265:
	a5 = Mem0[a1 + 0x00000030:word32]
	Mem0[a13 + 0x00000088:word32] = a5
	branch a15 != 0x00000000 l40215271
	// succ:  l4021526C l40215271
l4021526C:
	a6 = Mem0[a1 + 0x00000034:word32]
	branch a6 == 64 l40215292
	// succ:  l40215271 l40215292
l40215271:
	a2 = Mem0[a1 + 0x00000038:word32]
	a3 = Mem0[a1 + 0x00000008:word32]
	a4 = 6
	a3 = a3 + 41
	a0 = 0x40202AA8
	v24 = a0
	a0 = 0x40215280
	call v24 (retsize: 0;)
	branch a2 == 0x00000000 l40215292
	// succ:  l40215282 l40215292
l40215282:
	a2 = Mem0[a1 + 0x00000038:word32]
	a3 = 0x40215168
	a4 = 6
	a0 = 0x40202AA8
	v25 = a0
	a0 = 0x4021528F
	call v25 (retsize: 0;)
	branch a2 != 0x00000000 l402151F1
	// succ:  l40215292 l402151F1
l40215292:
	a4 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a13 + 0x000000A8:byte] = a4
	branch (a15 & 0x00000004) != 0x00000000 l402152DB
	// succ:  l4021529A l402152DB
l4021529A:
	a5 = Mem0[a1 + 0x00000034:word32]
	branch a5 == 64 l402152DB
	// succ:  l4021529F l402152DB
l4021529F:
	v26 = Mem0[a14 + 0x00000001:byte]
	a0 = (uint32) v26
	v27 = Mem0[a14 + 0x00000000:byte]
	a6 = (uint32) v27
	a7 = 0x0000008C
	a6 = a6 & a7
	a7 = 0x00000088
	branch a6 != a7 l402152BD
	// succ:  l402152B1 l402152BD
l402152B1:
	a8 = a0 & 0x00000003
	branch a8 != 3 l4021532F
	// succ:  l402152B7 l4021532F
l402152B7:
	v29 = Mem0[a14 + 0x0000001E:byte]
	a8 = (uint32) v29
	goto l40215332
	// succ:  l40215332
l402152BD:
	a8 = 0x00000010
	a9 = Mem0[a1 + 0x00000030:word32]
	a8 = a9 + a8 * 0x00000002
	v30 = Mem0[a14 + 0x00000016:uint16]
	a9 = (uint32) v30
	branch (a0 & 0x00000008) == 0x00000000 l402152D8
	// succ:  l402152CC l402152D8
l402152CC:
	v32 = Mem0[a8 + 0x0000009E:uint16]
	a10 = (uint32) v32
	a10 = a9 - a10
	branch a10 >= 1 l402152D8
	// succ:  l402152D5 l402152D8
l402152D5:
	goto l402551F1
	// succ:  l402551F1
l402152D8:
	Mem0[a8 + 0x0000009E:word16] = a9
	// succ:  l402152DB
l402152DB:
	a3 = Mem0[a1 + 0x00000014:word32]
	a2 = a13 + 64
	a4 = 6
	a0 = 0x40203130
	v34 = a0
	a0 = 0x402152E9
	call v34 (retsize: 0;)
	branch a15 == 0x00000000 l40215347
	// succ:  l402152EC l40215347
l402152EC:
	branch a15 == 4 l40215338
	// succ:  l402152EF l40215338
l402152EF:
	a11 = a15 - 8
	branch a11 != 0x00000000 l402151F1
	// succ:  l402152F5 l402151F1
l402152F5:
	a2 = a14
	a0 = 0x40215170
	v35 = a0
	a0 = 0x402152FD
	call v35 (retsize: 0;)
	a5 = a2
	a0 = Mem0[a1 + 0x00000004:word32]
	Mem0[a12 + 0x00000014:word16] = a2
	a2 = a0 - a2
	a2 = a2 - 4
	Mem0[a12 + 0x00000016:word16] = a2
	branch a0 >= a5 l40215313
	// succ:  l40215310 l40215313
l40215310:
	goto l402551F1
	// succ:  l402551F1
l40215313:
	a3 = Mem0[a1 + 0x00000018:word32]
	a3 = a3 - 1
	branch a3 != 0x00000000 l402151F1
	// succ:  l4021531A l402151F1
l4021531A:
	a4 = Mem0[a1 + 0x00000030:word32]
	v36 = Mem0[a4 + 0x0000001A:uint16]
	a4 = (uint32) v36
	branch a4 != 0x00000000 l402153C1
	// succ:  l40215322 l402153C1
l40215322:
	a2 = a13
	a3 = 0x000000A0
	a4 = 7
	a0 = 0x4021532C
	call sdk_ieee80211_send_mgmt (retsize: 0;)
	goto l402551F1
	// succ:  l402551F1
l4021532F:
	v33 = Mem0[a14 + 0x00000018:byte]
	a8 = (uint32) v33
	// succ:  l40215332
l40215332:
	a8 = a8 & 0x0000000F
	goto l402552C0
	// succ:  l402552C0
l40215338:
	a2 = a13 | a13
	a3 = a12 | a12
	a4 = Mem0[a1 + 0x00000034:word32]
	a0 = 0x40215344
	call fn40215978 (retsize: 0;)
	goto l402551F1
	// succ:  l402551F1
l40215347:
	a2 = a14 | a14
	a0 = 0x40215170
	v39 = a0
	a0 = 0x40215350
	call v39 (retsize: 0;)
	a4 = a2 | a2
	Mem0[a12 + 0x00000014:word16] = a2
	a0 = Mem0[a1 + 0x00000004:word32]
	a5 = Mem0[a1 + 0x00000018:word32]
	a6 = a0 - a2
	a6 = a6 - 4
	Mem0[a12 + 0x00000016:word16] = a6
	branch a5 != 0x00000000 l402151F1
	// succ:  l40215367 l402151F1
l40215367:
	a7 = 23
	branch a7 <u a0 l4021536F
	// succ:  l4021536C l4021536F
l4021536C:
	goto l402551F1
	// succ:  l402551F1
l4021536F:
	v40 = Mem0[a14 + 0x0000000A:byte]
	a8 = (uint32) v40
	a8 = a8 & 0x00000001
	branch a8 != 0x00000000 l402151F1
	// succ:  l40215378 l402151F1
l40215378:
	v41 = Mem0[a14 + 0x00000001:byte]
	a9 = (uint32) v41
	branch (a9 & 0x00000040) == 0x00000000 l402153AE
	// succ:  l4021537E l402153AE
l4021537E:
	a10 = Mem0[a1 + 0x00000034:word32]
	a11 = 0x000000B0
	a10 = a10 - a11
	branch a10 != 0x00000000 l402151F1
	// succ:  l40215389 l402151F1
l40215389:
	a14 = Mem0[a13 + 0x00000048:word32]
	a0 = 16
	branch (a14 & a0) != 0x00000000 l40215394
	// succ:  l40215391 l40215394
l40215391:
	goto l402551F1
	// succ:  l402551F1
l40215394:
	a2 = a13
	a3 = a12
	a0 = 0x4021539B
	call fn40314CB0 (retsize: 0;)
	branch a2 == 0x00000000 l402151F1
	// succ:  l4021539E l402151F1
l4021539E:
	a3 = Mem0[a12 + 0x00000004:word32]
	a3 = Mem0[a3 + 0x00000004:word32]
	v42 = Mem0[a3 + 0x00000001:byte]
	a2 = (uint32) v42
	a4 = 0x000000BF
	a2 = a2 & a4
	Mem0[a3 + 0x00000001:byte] = a2
	// succ:  l402153AE
l402153AE:
	a2 = a13 | a13
	a3 = a12 | a12
	a4 = Mem0[a1 + 0x00000034:word32]
	a5 = Mem0[a1 + 0x00000010:word32]
	a6 = Mem0[a1 + 0x0000000C:word32]
	a0 = 0x402153BE
	call fn4021559C (retsize: 0;)
	goto l402551F1
	// succ:  l402551F1
l402153C1:
	Mem0[a1:word32] = a5
	a4 = Mem0[a1 + 0x00000030:word32]
	a3 = 0x00000010
	a4 = Mem0[a4 + 0x00000008:word32]
	v37 = Mem0[a14 + 0x00000001:byte]
	a0 = (uint32) v37
	a4 = a4 & a3
	a3 = a0 & a3
	branch a3 == a4 l402153E0
	// succ:  l402153D8 l402153E0
l402153D8:
	a2 = Mem0[a1 + 0x00000030:word32]
	a0 = 0x402153DD
	call sdk_ieee80211_node_pwrsave (retsize: 0;)
	v38 = Mem0[a14 + 0x00000001:byte]
	a0 = (uint32) v38
	// succ:  l402153E0
l402153E0:
	branch (a0 & 0x00000040) == 0x00000000 l4021540C
	// succ:  l402153E3 l4021540C
l402153E3:
	a5 = Mem0[a13 + 0x00000048:word32]
	a6 = 0x00000010
	branch (a5 & a6) != 0x00000000 l402153EF
	// succ:  l402153EC l402153EF
l402153EC:
	goto l402551F1
	// succ:  l402551F1
l402153EF:
	a2 = a13 | a13
	a3 = a12 | a12
	a4 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x402153FA
	call fn40314CB0 (retsize: 0;)
	branch a2 == 0x00000000 l402151F1
	// succ:  l402153FD l402151F1
l402153FD:
	v43 = Mem0[a14 + 0x00000001:byte]
	a7 = (uint32) v43
	a8 = 0x000000BF
	a7 = a7 & a8
	Mem0[a14 + 0x00000001:byte] = a7
	goto l40215419
	// succ:  l40215419
l4021540C:
	a10 = Mem0[a12 + 0x00000004:word32]
	v44 = Mem0[a12 + 0x00000014:uint16]
	a9 = (uint32) v44
	a11 = Mem0[a10 + 0x00000004:word32]
	a9 = a9 + a11
	Mem0[a10 + 0x00000004:word32] = a9
	// succ:  l40215419
l40215419:
	a3 = a14
	a2 = a12
	a4 = Mem0[a1 + 0x00000004:word32]
	a5 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x40215424
	call sdk_ieee80211_decap (retsize: 0;)
	a3 = a2
	a12 = a2
	branch a2 == 0x00000000 l402151F1
	// succ:  l4021542B l402151F1
l4021542B:
	a4 = 0x4021516C
	a14 = Mem0[a1 + 0x00000030:word32]
	a0 = Mem0[a2 + 0x00000004:word32]
	a14 = Mem0[a14 + 0x00000008:word32]
	a0 = Mem0[a0 + 0x00000004:word32]
	branch (a14 & 0x00000001) != 0x00000000 l4021546C
	// succ:  l40215439 l4021546C
l40215439:
	a2 = Mem0[a1 + 0x00000030:word32]
	v45 = Mem0[a2 + 0x00000018:byte]
	a2 = (uint32) v45
	branch a2 != 1 l40215499
	// succ:  l40215441 l40215499
l40215441:
	v46 = Mem0[a0 + 0x0000000D:byte]
	a5 = (uint32) v46
	v47 = Mem0[a0 + 0x0000000C:byte]
	a6 = (uint32) v47
	a5 = a5 << 24
	a5 = a5 | a6
	a5 = a5 - a4
	branch a5 != 0x00000000 l402151F1
	// succ:  l40215453 l402151F1
l40215453:
	a4 = a0 + 14
	v48 = Mem0[a3 + 0x00000016:uint16]
	a5 = (uint32) v48
	a2 = Mem0[a13 + 0x000000B4:word32]
	a3 = Mem0[a13 + 0x00000088:word32]
	a2 = Mem0[a2 + 0x00000018:word32]
	a5 = a5 - 14
	a3 = Mem0[a3 + 0x000000E4:word32]
	a0 = 0x40215469
	call sdk_wpa_receive (retsize: 0;)
	goto l402551F1
	// succ:  l402551F1
l4021546C:
	v49 = Mem0[a0 + 0x0000000D:byte]
	a5 = (uint32) v49
	v50 = Mem0[a0 + 0x0000000C:byte]
	a6 = (uint32) v50
	a5 = a5 << 24
	a5 = a5 | a6
	branch a5 != a4 l40215499
	// succ:  l4021547B l40215499
l4021547B:
	a2 = Mem0[a13 + 0x000000B4:word32]
	branch a2 == 0x00000000 l40215499
	// succ:  l40215481 l40215499
l40215481:
	a2 = Mem0[a2 + 0x00000018:word32]
	a4 = a0 + 14
	v51 = Mem0[a3 + 0x00000016:uint16]
	a5 = (uint32) v51
	a6 = Mem0[a13 + 0x00000088:word32]
	a5 = a5 - 14
	a3 = Mem0[a6 + 0x000000E4:word32]
	a0 = 0x40215496
	call sdk_wpa_receive (retsize: 0;)
	goto l402551F1
	// succ:  l402551F1
l40215499:
	a2 = a13
	a0 = 0x4021549E
	call fn403150B0 (retsize: 0;)
	a2 = 8
	goto l402551FD
	// succ:  l402551FD
l402551F1:
l402551FD:
l402552C0:
sdk_hostap_input_exit:


// fn4021559C
// Return size: 0
void fn4021559C()
fn4021559C_entry:
	// succ:  l4021559C
l4021559C:
	a1 = fp
	a10 = 0x402035F0
	a11 = 50
	a7 = 0x00000090
	a1 = a1 - a7
	Mem0[a1 + 0x00000064:word32] = a0
	a7 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000074:word32] = a15
	Mem0[a1 + 0x0000006C:word32] = a13
	Mem0[a1 + 0x00000068:word32] = a12
	Mem0[a1 + 0x00000070:word32] = a14
	a12 = a2
	a14 = Mem0[a2 + 0x00000088:word32]
	a13 = a4
	a15 = Mem0[a3 + 0x00000004:word32]
	a4 = a5
	a5 = 48
	a15 = Mem0[a15 + 0x00000004:word32]
	v15 = Mem0[a3 + 0x00000016:uint16]
	a2 = (uint32) v15
	a0 = a15 + 24
	a2 = a2 + a15
	a2 = a2 + 24
	branch a13 == 0x00000000 l4021561D
	// succ:  l402155D5 l4021561D
l402155D5:
	branch a13 == 16 l40215607
	// succ:  l402155D8 l40215607
l402155D8:
	branch a13 == 32 l4021561D
	// succ:  l402155DB l4021561D
l402155DB:
	branch a13 == a5 l40215607
	// succ:  l402155DE l40215607
l402155DE:
	branch a13 != 64 l402155E4
	// succ:  l402155E1 l402155E4
l402155E1:
	goto l40215679
	// succ:  l40215679
l402155E4:
	a5 = 80
	a8 = a13 - 80
	branch a8 == 0x00000000 l402156C2
	// succ:  l402155EC l402156C2
l402155EC:
	a9 = a13 - 128
	branch a9 == 0x00000000 l402156C7
	// succ:  l402155F2 l402156C7
l402155F2:
	a11 = 0x000000A0
	branch a13 == a11 l40215646
	// succ:  l402155F8 l40215646
l402155F8:
	a3 = 0x000000B0
	a3 = a13 - a3
	branch a3 == 0x00000000 l402156E1
	// succ:  l40215601 l402156E1
l40215601:
	a4 = 0x000000C0
	branch a13 == a4 l40215646
	// succ:  l40215607 l40215646
l40215607:
	a12 = Mem0[a1 + 0x00000068:word32]
	a13 = Mem0[a1 + 0x0000006C:word32]
	a14 = Mem0[a1 + 0x00000070:word32]
	a15 = Mem0[a1 + 0x00000074:word32]
	a2 = 0x00000090
	a0 = Mem0[a1 + 0x00000064:word32]
	a1 = a1 + a2
	return
	// succ:  fn4021559C_exit
l4021561D:
	a5 = Mem0[a12 + 0x0000003C:word32]
	Mem0[a1 + 0x00000050:word32] = a2
	branch a5 != 5 l40215607
	// succ:  l40215625 l40215607
l40215625:
	a3 = a7 + 41
	a2 = a15 + 16
	a4 = 6
	a0 = 0x40202AA8
	v16 = a0
	a0 = 0x40215633
	call v16 (retsize: 0;)
	branch a2 != 0x00000000 l40215607
	// succ:  l40215636 l40215607
l40215636:
	a6 = a13 - 32
	branch a6 != 0x00000000 l40215787
	// succ:  l4021563C l40215787
l4021563C:
	a0 = 1
	a7 = 48
	Mem0[a1 + 0x00000058:word32] = a7
	goto l4021578E
	// succ:  l4021578E
l40215646:
	Mem0[a1 + 0x00000050:word32] = a2
	a8 = Mem0[a12 + 0x0000003C:word32]
	Mem0[a1 + 0x00000080:word32] = a0
	branch a8 != 5 l40215607
	// succ:  l40215652 l40215607
l40215652:
	a2 = a15 + 4
	a3 = a7 + 41
	a4 = 0x00000006
	a13 = a0
	a0 = 0x40202AA8
	v47 = a0
	a0 = 0x40215663
	call v47 (retsize: 0;)
	branch a2 != 0x00000000 l40215607
	// succ:  l40215666 l40215607
l40215666:
	a9 = Mem0[a1 + 0x00000050:word32]
	a9 = a9 - a13
	branch a9 < 2 l40215607
	// succ:  l4021566F l40215607
l4021566F:
	a3 = a14
	a2 = a12
	a0 = 0x40215676
	call sdk_cnx_node_leave (retsize: 0;)
	goto l40255607
	// succ:  l40255607
l40215679:
	a13 = Mem0[a12 + 0x0000003C:word32]
	a14 = a2 - a15
	branch a13 != 5 l40215607
	// succ:  l40215681 l40215607
l40215681:
	a14 = a14 - 24
	branch a14 >= 2 l4021568A
	// succ:  l40215687 l4021568A
l40215687:
	goto l40215746
	// succ:  l40215746
l4021568A:
	a13 = 0
	a3 = 0
	a6 = a2 - a0
	a14 = 0
	// succ:  l40215693
l40215693:
	v41 = Mem0[a0 + 0x00000001:byte]
	a5 = (uint32) v41
	a4 = a5 + 2
	branch a6 >= a4 l4021569E
	// succ:  l4021569B l4021569E
l4021569B:
	goto l40255607
	// succ:  l40255607
l4021569E:
	v42 = Mem0[a0 + 0x00000000:byte]
	a4 = (uint32) v42
	branch a4 == 0x00000000 l402156B3
	// succ:  l402156A3 l402156B3
l402156A3:
	branch a4 == 1 l402156AE
	// succ:  l402156A6 l402156AE
l402156A6:
	branch a4 != a11 l402156B5
	// succ:  l402156A9 l402156B5
l402156A9:
	a14 = a0
	goto l402156B5
	// succ:  l402156B5
l402156AE:
	a13 = a0
	goto l402156B5
	// succ:  l402156B5
l402156B3:
	a3 = a0
	// succ:  l402156B5
l402156B5:
	a0 = a5 + a0
	a0 = a0 + 2
	a6 = a2 - a0
	branch a6 >= 2 l40215693
	// succ:  l402156BF l40215693
l402156BF:
	goto l4021574C
	// succ:  l4021574C
l402156C2:
	a4 = 1
	goto l402156CA
	// succ:  l402156CA
l402156C7:
	a4 = 0x00000000
	// succ:  l402156CA
l402156CA:
	a2 = Mem0[a10 + 0x0000001C:word32]
	a6 = a13 - a5
	branch (a2 & 0x00000080) != 0x00000000 l402156D6
	// succ:  l402156D3 l402156D6
l402156D3:
	branch a6 == 0x00000000 l40215607
	// succ:  l402156D6 l40215607
l402156D6:
	a2 = a3 | a3
	a3 = a1
	a0 = 0x402156DE
	call sdk_ieee80211_parse_beacon (retsize: 0;)
	goto l40255607
	// succ:  l40255607
l402156E1:
	Mem0[a1 + 0x00000060:word32] = a4
	Mem0[a1 + 0x0000005C:word32] = a6
	Mem0[a1 + 0x00000050:word32] = a2
	a8 = Mem0[a12 + 0x0000003C:word32]
	Mem0[a1 + 0x00000080:word32] = a0
	a8 = a8 - 5
	branch a8 != 0x00000000 l40215607
	// succ:  l402156F5 l40215607
l402156F5:
	a3 = a7 + 41
	a2 = a15 + 16
	a4 = 6
	a13 = a0
	a0 = 0x40202AA8
	v43 = a0
	a0 = 0x40215705
	call v43 (retsize: 0;)
	branch a2 != 0x00000000 l40215607
	// succ:  l40215708 l40215607
l40215708:
	a9 = Mem0[a1 + 0x00000050:word32]
	a9 = a9 - a13
	branch a9 >= 6 l40215714
	// succ:  l40215711 l40215714
l40215711:
	goto l40255607
	// succ:  l40255607
l40215714:
	v44 = Mem0[a13 + 0x00000000:uint16]
	a0 = (uint32) v44
	a10 = 0x402035F0
	v45 = Mem0[a13 + 0x00000002:uint16]
	a6 = (uint32) v45
	a10 = Mem0[a10 + 0x0000001C:word32]
	v46 = Mem0[a13 + 0x00000004:uint16]
	a7 = (uint32) v46
	a10 = a10 >>u 0x0000001A & 0x00000001
	branch a10 != 0x00000000 l40215607
	// succ:  l40215728 l40215607
l40215728:
	a11 = a0 - 1
	a13 = Mem0[a12 + 0x00000090:word32]
	Mem0[a12 + 0x00000088:word32] = a13
	branch a11 == 0x00000000 l40215607
	// succ:  l40215733 l40215607
l40215733:
	branch a0 != 0x00000000 l40215607
	// succ:  l40215736 l40215607
l40215736:
	a3 = a15
	a2 = a12
	a4 = Mem0[a1 + 0x00000060:word32]
	a5 = Mem0[a1 + 0x0000005C:word32]
	a0 = 0x40215743
	call fn403154B0 (retsize: 0;)
	goto l40255607
	// succ:  l40255607
l40215746:
	a3 = 0
	a13 = 0
	a14 = 0
	// succ:  l4021574C
l4021574C:
	branch a13 == 0x00000000 l40215607
	// succ:  l4021574F l40215607
l4021574F:
	v19 = Mem0[a13 + 0x00000001:byte]
	a2 = (uint32) v19
	branch a2 <u 0x00000010 l40215758
	// succ:  l40215755 l40215758
l40215755:
	goto l40255607
	// succ:  l40255607
l40215758:
	branch a14 == 0x00000000 l40215768
	// succ:  l4021575A l40215768
l4021575A:
	v20 = Mem0[a14 + 0x00000001:byte]
	a4 = (uint32) v20
	a0 = 15
	a0 = a0 - a2
	branch a0 >= a4 l40215768
	// succ:  l40215765 l40215768
l40215765:
	goto l40255607
	// succ:  l40255607
l40215768:
	branch a3 == 0x00000000 l40215607
	// succ:  l4021576B l40215607
l4021576B:
	v27 = Mem0[a3 + 0x00000001:byte]
	a0 = (uint32) v27
	a2 = 32
	branch a2 >=u a0 l40215776
	// succ:  l40215773 l40215776
l40215773:
	goto l40255607
	// succ:  l40255607
l40215776:
	a4 = 0x402137EC
	v32 = Mem0[a4 + 0x0000008F:byte]
	a4 = (uint32) v32
	a4 = a4 - 1
	branch a4 != 0x00000000 l4021589B
	// succ:  l40215781 l4021589B
l40215781:
	branch a0 != 0x00000000 l4021589D
	// succ:  l40215784 l4021589D
l40215784:
	goto l40255607
	// succ:  l40255607
l40215787:
	a0 = 0
	a5 = 16
	Mem0[a1 + 0x00000058:word32] = a5
	// succ:  l4021578E
l4021578E:
	a8 = 10
	a7 = 4
	a6 = Mem0[a1 + 0x00000050:word32]
	branch a0 == 0x00000000 l40215798
	// succ:  l40215795_1 l40215798
l40215795_1:
	a7 = a8
	// succ:  l40215798
l40215798:
	a6 = a6 - a15
	a6 = a6 - 24
	branch a6 >= a7 l402157A4
	// succ:  l402157A1 l402157A4
l402157A1:
	goto l40255607
	// succ:  l40255607
l402157A4:
	a11 = 0x000000DD
	a6 = Mem0[a1 + 0x00000050:word32]
	a7 = a15 + 34
	a13 = a15 + 28
	branch a0 == 0x00000000 l402157B3
	// succ:  l402157B0_1 l402157B3
l402157B0_1:
	a13 = a7
	// succ:  l402157B3
l402157B3:
	a6 = a6 - a13
	branch a6 >= 2 l402157BC
	// succ:  l402157B9 l402157BC
l402157B9:
	goto l402158EC
	// succ:  l402158EC
l402157BC:
	a0 = 0
	a7 = 0
	a15 = a14 + 39
	a10 = 0
	Mem0[a1 + 0x00000048:word32] = a10
	Mem0[a1 + 0x00000054:word32] = a15
	a15 = 0
	v22 = Mem0[a13 + 0x00000001:byte]
	a5 = (uint32) v22
	v23 = Mem0[a13 + 0x00000000:byte]
	a3 = (uint32) v23
	a10 = a5 + 2
	branch a6 >= a10 l402157DB
	// succ:  l402157D8 l402157DB
l402157D8:
	goto l40255607
	// succ:  l40255607
l402157DB:
	branch a3 == 0x00000000 l40215885
	// succ:  l402157DE l40215885
l402157DE:
	branch a3 != 1 l402157E4
	// succ:  l402157E1 l402157E4
l402157E1:
	goto l40215880
	// succ:  l40215880
l402157E4:
	a2 = 45
	branch a3 != a2 l402157EC
	// succ:  l402157E9 l402157EC
l402157E9:
	goto l4021587B
	// succ:  l4021587B
l402157EC:
	Mem0[a1 + 0x00000078:word32] = a7
	Mem0[a1 + 0x0000007C:word32] = a0
	a4 = 48
	branch a3 == a4 l4021585B
	// succ:  l402157F7 l4021585B
l402157F7:
	a6 = 50
	branch a3 == a6 l40215856
	// succ:  l402157FC l40215856
l402157FC:
	branch a3 == a11 l40215802
	// succ:  l402157FF l40215802
l402157FF:
	goto l40215888
	// succ:  l40215888
l40215802:
	a3 = 0
	branch a5 <u 0x00000004 l4021582D
	// succ:  l40215807 l4021582D
l40215807:
	v28 = Mem0[a13 + 0x00000005:byte]
	a2 = (uint32) v28
	v29 = Mem0[a13 + 0x00000003:byte]
	a9 = (uint32) v29
	v30 = Mem0[a13 + 0x00000002:byte]
	a8 = (uint32) v30
	a9 = a9 << 24
	a8 = a8 | a9
	v31 = Mem0[a13 + 0x00000004:byte]
	a9 = (uint32) v31
	a2 = a2 << 8
	a9 = a9 << 16
	a9 = a9 | a2
	a8 = a8 | a9
	a9 = 0x40215598
	branch a8 != a9 l4021582D
	// succ:  l4021582B l4021582D
l4021582B:
	a3 = 1
	// succ:  l4021582D
l4021582D:
	Mem0[a1 + 0x00000078:word32] = a7
	Mem0[a1 + 0x0000007C:word32] = a0
	branch a3 == 0x00000000 l40215888
	// succ:  l40215836 l40215888
l40215836:
	a2 = Mem0[a1 + 0x00000054:word32]
	a3 = a13
	a4 = a10 & 0x000000FF
	Mem0[a14 + 0x00000026:byte] = a4
	a0 = 0x40203130
	v33 = a0
	a0 = 0x40215847
	call v33 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000007C:word32]
	a7 = Mem0[a1 + 0x00000078:word32]
	a11 = 0x000000DD
	v34 = Mem0[a13 + 0x00000001:byte]
	a5 = (uint32) v34
	goto l40215888
	// succ:  l40215888
l40215856:
	a15 = a13
	goto l40215888
	// succ:  l40215888
l4021585B:
	a2 = Mem0[a1 + 0x00000054:word32]
	a3 = a13
	a4 = a10 & 0x000000FF
	Mem0[a14 + 0x00000026:byte] = a4
	a0 = 0x40203130
	v39 = a0
	a0 = 0x4021586C
	call v39 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000007C:word32]
	a7 = Mem0[a1 + 0x00000078:word32]
	a11 = 0x000000DD
	v40 = Mem0[a13 + 0x00000001:byte]
	a5 = (uint32) v40
	goto l40215888
	// succ:  l40215888
l4021587B:
	a7 = a13
	goto l40215888
	// succ:  l40215888
l40215880:
	a0 = a13
	goto l40215888
	// succ:  l40215888
l40215885:
	Mem0[a1 + 0x00000048:word32] = a13
	// succ:  l40215888
l40215888:
	a6 = Mem0[a1 + 0x00000050:word32]
	a13 = a5 + a13
	a13 = a13 + 2
	a6 = a6 - a13
	branch a6 < 2 l40215898
	// succ:  l40215895 l40215898
l40215895:
	goto l402557CD
	// succ:  l402557CD
l40215898:
	goto l402158F9
	// succ:  l402158F9
l4021589B:
	branch a0 == 0x00000000 l402158C4
	// succ:  l4021589D l402158C4
l4021589D:
	Mem0[a1 + 0x0000004C:word32] = a0
	a2 = Mem0[a10 + 0x00000288:word32]
	Mem0[a1 + 0x00000048:word32] = a3
	a2 = a2 - a0
	branch a2 != 0x00000000 l40215607
	Mem0[a1 + 0x0000004C:word32] = a0
	a2 = Mem0[a10 + 0x00000288:word32]
	Mem0[a1 + 0x00000048:word32] = a3
	a2 = a2 - a0
	branch a2 != 0x00000000 l40215607
	// succ:  l402158AC l40215607
l402158AC:
	a2 = a3 + 2
	a4 = Mem0[a1 + 0x0000004C:word32]
	a3 = 0x40213E7C
	a0 = 0x40202AA8
	v37 = a0
	a0 = 0x402158BB
	call v37 (retsize: 0;)
	a10 = 0x402035F0
	a0 = Mem0[a1 + 0x0000004C:word32]
	branch a2 != 0x00000000 l40215607
	a2 = a3 + 2
	a4 = Mem0[a1 + 0x0000004C:word32]
	a3 = 0x40213E7C
	a0 = 0x40202AA8
	v38 = a0
	a0 = 0x402158BB
	call v38 (retsize: 0;)
	a10 = 0x402035F0
	a0 = Mem0[a1 + 0x0000004C:word32]
	branch a2 != 0x00000000 l40215607
	// succ:  l402158C4 l40215607
l402158C4:
	a3 = Mem0[a10 + 0x0000001C:word32]
	branch (a3 & 0x08000000) == 0x00000000 l402158CD
	a3 = Mem0[a10 + 0x0000001C:word32]
	branch (a3 & 0x08000000) == 0x00000000 l402158CD
	// succ:  l402158CA l402158CD
l402158CA:
	branch a0 == 0x00000000 l40215607
	branch a0 == 0x00000000 l40215607
	// succ:  l402158CD l40215607
l402158CD:
	a3 = a14 | a14
	a2 = a13
	a4 = Mem0[a12 + 0x00000090:word32]
	Mem0[a12 + 0x00000088:word32] = a4
	a0 = 0x402158DB
	call fn4031556C (retsize: 0;)
	a3 = a15 + 10
	a4 = a2
	a5 = 1
	a2 = a12
	branch a4 == 0x00000000 l402158E6
	a3 = a14 | a14
	a2 = a13
	a4 = Mem0[a12 + 0x00000090:word32]
	Mem0[a12 + 0x00000088:word32] = a4
	a0 = 0x402158DB
	call fn4031556C (retsize: 0;)
	a3 = a15 + 10
	a4 = a2
	a5 = 1
	a2 = a12
	branch a4 == 0x00000000 l402158E6
	// succ:  l402158E3_1 l402158E6 l402158E3_1
l402158E3_1:
	a4 = a5
	goto l402158E6
	// succ:  l402158E6
l402158E3_1:
	a4 = a5
	// succ:  l402158E6
l402158E6:
	a0 = 0x402158E9
	call sdk_ieee80211_send_proberesp (retsize: 0;)
	a0 = 0x402158E9
	call sdk_ieee80211_send_proberesp (retsize: 0;)
	goto l40255607
	// succ:  l40255607
l402158EC:
	a0 = 0x00000000
	a15 = 0x00000000
	a7 = 0
	a6 = 0
	Mem0[a1 + 0x00000048:word32] = a6
	// succ:  l402158F9
l402158F9:
	branch a0 == 0x00000000 l40215607
	// succ:  l402158FC l40215607
l402158FC:
	v21 = Mem0[a0 + 0x00000001:byte]
	a2 = (uint32) v21
	branch a2 <u 0x00000010 l40215905
	// succ:  l40215902 l40215905
l40215902:
	goto l40255607
	// succ:  l40255607
l40215905:
	branch a15 == 0x00000000 l40215915
	// succ:  l40215907 l40215915
l40215907:
	v25 = Mem0[a15 + 0x00000001:byte]
	a9 = (uint32) v25
	a8 = 15
	a8 = a8 - a2
	branch a8 >= a9 l40215915
	// succ:  l40215912 l40215915
l40215912:
	goto l40255607
	// succ:  l40255607
l40215915:
	a9 = Mem0[a1 + 0x00000048:word32]
	branch a9 == 0x00000000 l40215607
	// succ:  l4021591B l40215607
l4021591B:
	v26 = Mem0[a9 + 0x00000001:byte]
	a13 = (uint32) v26
	a10 = 32
	branch a10 >=u a13 l40215926
	// succ:  l40215923 l40215926
l40215923:
	goto l40255607
	// succ:  l40255607
l40215926:
	branch a7 == 0x00000000 l4021593E
	// succ:  l40215928 l4021593E
l40215928:
	v35 = Mem0[a7 + 0x00000001:byte]
	a2 = (uint32) v35
	a4 = 30
	v36 = Mem0[a7 + 0x00000000:byte]
	a5 = (uint32) v36
	a3 = 26
	a5 = a5 - a11
	branch a5 != 0x00000000 l40215938
	// succ:  l40215935_1 l40215938
l40215935_1:
	a3 = a4
	// succ:  l40215938
l40215938:
	branch a2 >=u a3 l4021593E
	// succ:  l4021593B l4021593E
l4021593B:
	goto l40255607
	// succ:  l40255607
l4021593E:
	a4 = a15
	a2 = a14
	a5 = 15
	a3 = a0
	a0 = 0x40215949
	call sdk_ieee80211_setup_rates (retsize: 0;)
	a0 = a2 & 0x000000FF
	a6 = a2 >>u 0x00000007 & 0x00000001
	branch a6 != 0x00000000 l40215607
	// succ:  l40215952 l40215607
l40215952:
	a7 = 0x402035F0
	a7 = Mem0[a7 + 0x0000001C:word32]
	branch (a7 & 0x00000020) == 0x00000000 l40215962
	// succ:  l4021595A l40215962
l4021595A:
	a8 = 47
	branch a8 <u a0 l40215962
	// succ:  l4021595F l40215962
l4021595F:
	goto l40255607
	// succ:  l40255607
l40215962:
	a3 = a14
	a2 = a12
	a4 = Mem0[a1 + 0x00000058:word32]
	a9 = Mem0[a12 + 0x00000090:word32]
	Mem0[a12 + 0x00000088:word32] = a9
	a0 = 0x40215972
	call sdk_cnx_node_join (retsize: 0;)
	// succ:  l40255607
l40255607:
l402557CD:
fn4021559C_exit:


// fn40215978
// Return size: 0
void fn40215978()
fn40215978_entry:
	// succ:  l40215978
l40215978:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a4 == 128 l40215989
	// succ:  l40215980 l40215989
l40215980:
	a0 = 0x000000A0
	branch a4 != a0 l40215989
	// succ:  l40215986 l40215989
l40215986:
	a0 = 0x40215989
	call fn40215994 (retsize: 0;)
	// succ:  l40215989
l40215989:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn40215978_exit
fn40215978_exit:


// fn40215994
// Return size: 0
void fn40215994()
fn40215994_entry:
	// succ:  l40215994
l40215994:
	a1 = fp
	a1 = a1 - 16
	a6 = Mem0[a2 + 0x00000088:word32]
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	a0 = Mem0[a3 + 0x00000004:word32]
	a12 = a3
	a0 = Mem0[a0 + 0x00000004:word32]
	branch a6 == 0x00000000 l40215A4F
	// succ:  l402159A9 l40215A4F
l402159A9:
	a5 = 0x40215990
	v10 = Mem0[a6 + 0x0000001A:uint16]
	a4 = (uint32) v10
	a3 = a4 & a5
	branch (a4 & a5) != 0x00000000 l402159B8
	// succ:  l402159B5 l402159B8
l402159B5:
	goto l40215A4F
	// succ:  l40215A4F
l402159B8:
	v12 = Mem0[a0 + 0x00000002:uint16]
	a7 = (uint32) v12
	a7 = a7 & 0x00003FFF
	branch a3 == a7 l402159C4
	// succ:  l402159C1 l402159C4
l402159C1:
	goto l40215A46
	// succ:  l40215A46
l402159C4:
	a0 = Mem0[a6 + 0x000000CC:word32]
	Mem0[a1 + 0x0000000C:word32] = a6
	branch a0 != 0x00000000 l402159DA
	// succ:  l402159CB l402159DA
l402159CB:
	a12 = a6
	a0 = 0x402159D0
	call sdk_ieee80211_send_nulldata (retsize: 0;)
	a2 = a12
	a3 = 0
	a0 = 0x402159D7
	call sdk_ieee80211_set_tim (retsize: 0;)
	goto l40215A46
	// succ:  l40215A46
l402159DA:
	a3 = 0
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a6
	a8 = Mem0[a6 + 0x000000D4:word32]
	a5 = Mem0[a6 + 0x000000C0:word32]
	a8 = a8 - 1
	a5 = a5 - 1
	Mem0[a6 + 0x000000C0:word32] = a5
	branch a5 != 0x00000000 l402159F8
	// succ:  l402159EF l402159F8
l402159EF:
	Mem0[a6 + 0x000000D0:word32] = a3
	Mem0[a6 + 0x000000CC:word32] = a3
	goto l402159FF
	// succ:  l402159FF
l402159F8:
	Mem0[a1:word32] = a0
	a7 = Mem0[a0 + 0x0000001C:word32]
	Mem0[a6 + 0x000000CC:word32] = a7
	// succ:  l402159FF
l402159FF:
	Mem0[a6 + 0x000000D4:word32] = a8
	branch a5 == 0x00000000 l40215A1F
	// succ:  l40215A04 l40215A1F
l40215A04:
	a10 = Mem0[a12 + 0x00000020:word32]
	a11 = Mem0[a10 + 0x00000000:word32]
	a0 = 0x402138F8
	a9 = a11 & 0x0000003F
	a11 = a11 >>u 6
	a11 = a11 | a0
	a11 = a11 << 26
	a9 = a9 | a11
	Mem0[a10:word32] = a9
	goto l40215A27
	// succ:  l40215A27
l40215A1F:
	a2 = Mem0[a1 + 0x0000000C:word32]
	a3 = 0
	a0 = 0x40215A27
	call sdk_ieee80211_set_tim (retsize: 0;)
	// succ:  l40215A27
l40215A27:
	a0 = 0x40215A2A
	call sdk_chm_check_same_channel (retsize: 0;)
	branch a2 == 0x00000000 l40215A34
	// succ:  l40215A2C l40215A34
l40215A2C:
	a2 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x40215A31
	call sdk_ppTxPkt (retsize: 0;)
	goto l40215A46
	// succ:  l40215A46
l40215A34:
	a0 = a12 + 28
	a2 = 0x402035F0
	a4 = 0
	a3 = Mem0[a2 + 0x000001C4:word32]
	Mem0[a12 + 0x0000001C:word32] = a4
	Mem0[a3:word32] = a12
	Mem0[a2 + 0x000001C4:word32] = a0
	// succ:  l40215A46
l40215A46:
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  fn40215994_exit
l40215A4F:
	a3 = 0x000000C0
	a4 = 7
	a0 = 0x40215A57
	call sdk_ieee80211_send_mgmt (retsize: 0;)
	// succ:  l40255A46
l40255A46:
fn40215994_exit:


// sdk_wifi_softap_start
// Return size: 0
void sdk_wifi_softap_start()
sdk_wifi_softap_start_entry:
	// succ:  l40215A68
l40215A68:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000014:word32] = a0
	a0 = 0x402035F0
	Mem0[a1 + 0x00000018:word32] = a12
	a12 = Mem0[a0 + 0x00000014:word32]
	a2 = 0
	branch a12 != 0x00000000 l40215A7B
	// succ:  l40215A78 l40215A7B
l40215A78:
	goto l40215BA4
	// succ:  l40215BA4
l40215A7B:
	v6 = Mem0[a12 + 0x000000BB:byte]
	a2 = (uint32) v6
	a6 = 0x40214D14
	a2 = a2 - 1
	branch a2 == 0x00000000 l40215BA2
	// succ:  l40215A86 l40215BA2
l40215A86:
	v9 = Mem0[a6 + 0x00000000:byte]
	a3 = (uint32) v9
	a0 = 1
	branch (a3 & 0x00000001) == 0x00000000 l40215A9B
	// succ:  l40215A8E l40215A9B
l40215A8E:
	a2 = a0
	a4 = 2
	a4 = a3 | a4
	Mem0[a6:byte] = a4
	goto l40215BA4
	// succ:  l40215BA4
l40215A9B:
	a3 = 0x40203734
	a5 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x00000010:word32] = a3
	branch a5 != 0x00000000 l40215AD6
	// succ:  l40215AA7 l40215AD6
l40215AA7:
	a2 = 52
	a0 = 0x402034C4
	v12 = a0
	a0 = 0x40215AAF
	call v12 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000010:word32]
	Mem0[a12:word32] = a2
	a4 = 6
	a2 = a2 + 41
	a0 = 0x40203130
	v13 = a0
	a0 = 0x40215ABE
	call v13 (retsize: 0;)
	a6 = a12
	a7 = 0x40215A60
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = 0x40203730
	a8 = 0x40215A64
	a4 = a3 + 4
	a5 = a3 + 8
	Mem0[a1:word32] = a8
	a0 = 0x40215AD4
	call fn4030C530 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000010:word32]
	// succ:  l40215AD6
l40215AD6:
	a2 = 0x00000001
	a5 = 1
	a6 = 0
	a4 = a3
	a3 = 1
	a0 = 0x40215AE4
	call sdk_ic_set_vif (retsize: 0;)
	a2 = Mem0[a12 + 0x00000000:word32]
	a0 = 0x40215AE9
	call fn4030C5B4 (retsize: 0;)
	a0 = 0x40215AEC
	call fn40313458 (retsize: 0;)
	a0 = 0x402035F0
	branch a2 != 3 l40215B04
	// succ:  l40215AF2 l40215B04
l40215AF2:
	a3 = Mem0[a0 + 0x00000010:word32]
	branch a3 == 0x00000000 l40215BAD
	// succ:  l40215AF7 l40215BAD
l40215AF7:
	a9 = Mem0[a3 + 0x0000003C:word32]
	a3 = 0
	branch a9 >=u 0x00000002 l40215B01
	// succ:  l40215AFE l40215B01
l40215AFE:
	goto l40215BAD
	// succ:  l40215BAD
l40215B01:
	goto l40215B06
	// succ:  l40215B06
l40215B04:
	a3 = 1
	// succ:  l40215B06
l40215B06:
	branch a3 == 1 l40215B0C
	// succ:  l40215B09 l40215B0C
l40215B09:
	goto l40215B90
	// succ:  l40215B90
l40215B0C:
	a6 = 0x402137EC
	a4 = 0x4020290C
	v19 = Mem0[a6 + 0x0000008D:byte]
	a6 = (uint32) v19
	v20 = Mem0[a4 + 0x00000000:byte]
	a4 = (uint32) v20
	a6 = a6 - 1
	a6 = a6 & 0x000000FF
	Mem0[a1 + 0x0000001C:word32] = a6
	branch a4 != 0x00000000 l40215B4F
	// succ:  l40215B21 l40215B4F
l40215B21:
	a0 = 0x40202680
	v21 = a0
	a0 = 0x40215B27
	call v21 (retsize: 0;)
	a3 = 0x4021287C
	a8 = -32
	// succ:  l40215B2C
l40215B2C:
	a9 = Mem0[a3 + 0x00000200:word32]
	a9 = a9 & a8
	Mem0[a3 + 0x00000200:word32] = a9
	a7 = Mem0[a3 + 0x00000200:word32]
	branch (a7 & 0x00000001) != 0x00000000 l40215B2C
	// succ:  l40215B44 l40215B2C
l40215B44:
	a0 = 0x402035F0
	a4 = 0x4020290C
	a6 = Mem0[a1 + 0x0000001C:word32]
	v22 = Mem0[a4 + 0x00000000:byte]
	a4 = (uint32) v22
	// succ:  l40215B4F
l40215B4F:
	a5 = 0x40203770
	a7 = 0x00000084
	a6 = a6 + a6 * 0x00000002
	a6 = a0 + a6 * 0x00000004
	a6 = a6 + a7
	Mem0[a1 + 0x00000020:word32] = a6
	Mem0[a5 + 0x0000004C:word32] = a6
	branch a4 != 0x00000000 l40215B85
	// succ:  l40215B64 l40215B85
l40215B64:
	a8 = 0x4021287C
	a7 = Mem0[a8 + 0x00000200:word32]
	a9 = -32
	a7 = a7 & a9
	a9 = 1
	a7 = a7 | a9
	Mem0[a8 + 0x00000200:word32] = a7
	a0 = 0x40202688
	v23 = a0
	a0 = 0x40215B83
	call v23 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000020:word32]
	// succ:  l40215B85
l40215B85:
	a2 = a6
	a1 = a1 | a1
	a0 = 0x40215B8D
	call sdk_chm_set_current_channel (retsize: 0;)
	a0 = 0x402035F0
	// succ:  l40215B90
l40215B90:
	a2 = a0
	a0 = 0x40215B95
	call fn4031503C (retsize: 0;)
	a10 = 1
	a0 = 0x40214D14
	a11 = 0
	Mem0[a0 + 0x00000020:byte] = a11
	Mem0[a12 + 0x000000BB:byte] = a10
	// succ:  l40215BA2
l40215BA2:
	a2 = 1
	// succ:  l40215BA4
l40215BA4:
	a12 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_wifi_softap_start_exit
l40215BAD:
	a3 = 1
	// succ:  l40255B06
l40255B06:
sdk_wifi_softap_start_exit:


// sdk_wifi_softap_stop
// Return size: 0
void sdk_wifi_softap_stop()
sdk_wifi_softap_stop_entry:
	// succ:  l40215BB4
l40215BB4:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000004:word32] = a12
	a12 = 0x402035F0
	Mem0[a1 + 0x00000010:word32] = a15
	a12 = Mem0[a12 + 0x00000014:word32]
	Mem0[a1:word32] = a0
	branch a12 != 0x00000000 l40215BCD
	// succ:  l40215BC8 l40215BCD
l40215BC8:
	a2 = 0
	goto l40215BD7
	// succ:  l40215BD7
l40215BCD:
	v9 = Mem0[a12 + 0x000000BB:byte]
	a13 = (uint32) v9
	a0 = 0x402137EC
	branch a13 != 0x00000000 l40215BE6
	// succ:  l40215BD5 l40215BE6
l40215BD5:
	a2 = 1
	// succ:  l40215BD7
l40215BD7:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wifi_softap_stop_exit
l40215BE6:
	Mem0[a1 + 0x00000014:word32] = a0
	v10 = Mem0[a0 + 0x00000090:byte]
	a0 = (uint32) v10
	a13 = 1
	a0 = a0 + 2
	branch a0 < 2 l40215C2E
	// succ:  l40215BF2 l40215C2E
l40215BF2:
	a14 = a12 + a13 * 0x00000004
	a2 = Mem0[a14 + 0x00000090:word32]
	branch a2 == 0x00000000 l40215C26
	// succ:  l40215BFA l40215C26
l40215BFA:
	a3 = 0x000000A0
	a15 = Mem0[a12 + 0x00000088:word32]
	a4 = 4
	Mem0[a12 + 0x00000088:word32] = a2
	a2 = a12
	a0 = 0x40215C0A
	call sdk_ieee80211_send_mgmt (retsize: 0;)
	a2 = a12
	a3 = 0x000000C0
	a4 = 2
	a0 = 0x40215C14
	call sdk_ieee80211_send_mgmt (retsize: 0;)
	a2 = a12
	Mem0[a12 + 0x00000088:word32] = a15
	a3 = Mem0[a14 + 0x00000090:word32]
	a0 = 0x40215C1F
	call sdk_cnx_node_leave (retsize: 0;)
	a0 = Mem0[a1 + 0x00000014:word32]
	v13 = Mem0[a0 + 0x00000090:byte]
	a0 = (uint32) v13
	a0 = a0 + 2
	// succ:  l40215C26
l40215C26:
	a13 = a13 + 1
	a13 = a13 & 0x000000FF
	branch a13 < a0 l40215BF2
	// succ:  l40215C2E l40215BF2
l40215C2E:
	a2 = Mem0[a12 + 0x00000000:word32]
	a0 = 0x40215C33
	call fn4030C5E4 (retsize: 0;)
	a13 = 0x40214D14
	a14 = 1
	Mem0[a13 + 0x00000020:byte] = a14
	a2 = a13 + 4
	a0 = 0x40215C40
	call fn40312748 (retsize: 0;)
	a2 = 1
	a3 = 0x40203734
	a4 = 2
	a5 = 0
	a0 = 0x40215C4C
	call sdk_ic_bss_info_update (retsize: 0;)
	a2 = 1
	a3 = 0
	a4 = 0
	a5 = 1
	a6 = 0
	a0 = 0x40215C59
	call sdk_ic_set_vif (retsize: 0;)
	a0 = 0x40215C5C
	call fn40314F94 (retsize: 0;)
	v16 = Mem0[a13 + 0x00000000:byte]
	a15 = (uint32) v16
	branch (a15 & 0x00000001) != 0x00000000 l40215C69
	a2 = Mem0[a12 + 0x00000000:word32]
	a0 = 0x40215C33
	call fn4030C5E4 (retsize: 0;)
	a13 = 0x40214D14
	a14 = 1
	Mem0[a13 + 0x00000020:byte] = a14
	a2 = a13 + 4
	a0 = 0x40215C40
	call fn40312748 (retsize: 0;)
	a2 = 1
	a3 = 0x40203734
	a4 = 2
	a5 = 0
	a0 = 0x40215C4C
	call sdk_ic_bss_info_update (retsize: 0;)
	a2 = 1
	a3 = 0
	a4 = 0
	a5 = 1
	a6 = 0
	a0 = 0x40215C59
	call sdk_ic_set_vif (retsize: 0;)
	a0 = 0x40215C5C
	call fn40314F94 (retsize: 0;)
	v17 = Mem0[a13 + 0x00000000:byte]
	a15 = (uint32) v17
	branch (a15 & 0x00000001) != 0x00000000 l40215C69
	// succ:  l40215C62 l40215C69
l40215C62:
	a2 = Mem0[a13 + 0x00000024:word32]
	a3 = 4
	a0 = 0x40215C69
	call sdk_esf_buf_recycle (retsize: 0;)
	a2 = Mem0[a13 + 0x00000024:word32]
	a3 = 4
	a0 = 0x40215C69
	call sdk_esf_buf_recycle (retsize: 0;)
	// succ:  l40215C69
l40215C69:
	a0 = 0
	Mem0[a12 + 0x000000BB:byte] = a0
	// succ:  l40255BD5
l40255BD5:
sdk_wifi_softap_stop_exit:


// sdk_ieee80211_ht_attach
// Return size: 0
void sdk_ieee80211_ht_attach()
sdk_ieee80211_ht_attach_entry:
	// succ:  l40215C84
l40215C84:
	a1 = fp
	a3 = 0x00000000
	a7 = 0x0000001C
	a6 = 0x40215C74
	a5 = 0x000002BC
	a1 = a1 - 16
	a4 = 0x00000496
	a4 = a2 + a4
	Mem0[a1:word32] = a0
	a5 = a2 + a5
	a0 = 1
	Mem0[a5 + 0x00000250:word32] = a6
	a2 = 3
	a6 = 0x40215C78
	a5 = a5 + 0x00000200
	Mem0[a5 + 0x00000056:word16] = a7
	Mem0[a5 + 0x00000058:word16] = a3
	Mem0[a5 + 0x00000054:word16] = a6
	Mem0[a4 + 0x00000080:byte] = a0
	Mem0[a4 + 0x00000081:byte] = a0
	a4 = 0x40215C7C
	a0 = 0x40215CBE
	call sdk_ieee80211_recv_action_register (retsize: 0;)
	a2 = 3
	a3 = 1
	a4 = 0x40215C80
	a0 = 0x40215CC8
	call sdk_ieee80211_send_action_register (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_ht_attach_exit
sdk_ieee80211_ht_attach_exit:


// sdk_ieee80211_ht_node_init
// Return size: 0
void sdk_ieee80211_ht_node_init()
sdk_ieee80211_ht_node_init_entry:
	// succ:  l40215CD4
l40215CD4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a0 = Mem0[a2 + 0x00000048:word32]
	a12 = a2
	branch (a0 & 0x00000040) == 0x00000000 l40215CE6
	// succ:  l40215CE3 l40215CE6
l40215CE3:
	a0 = 0x40215CE6
	call sdk_ieee80211_ht_node_cleanup (retsize: 0;)
	// succ:  l40215CE6
l40215CE6:
	a0 = 0
	a4 = a12 >>u 0x00000010 & 0x0000FFFF
	a2 = 0x000000CE
	a2 = a12 + a2
	// succ:  l40215CF0
l40215CF0:
	Mem0[a2 + 0x0000007A:word16] = a12
	Mem0[a2 + 0x0000007C:word16] = a4
	Mem0[a2 + 0x00000080:byte] = a0
	a2 = a2 + 80
	a0 = a0 + 1
	branch a0 != 4 l40215CF0
	// succ:  l40215D01 l40215CF0
l40215D01:
	a4 = 0x40215CD0
	a3 = Mem0[a12 + 0x00000048:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a3 = a3 | a4
	Mem0[a12 + 0x00000048:word32] = a3
	a12 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_ht_node_init_exit
sdk_ieee80211_ht_node_init_exit:


// sdk_ieee80211_ht_node_cleanup
// Return size: 0
void sdk_ieee80211_ht_node_cleanup()
sdk_ieee80211_ht_node_cleanup_entry:
	// succ:  l40215D18
l40215D18:
	a1 = fp
	a5 = 0xFFFFFFBF
	a4 = Mem0[a2 + 0x00000048:word32]
	a3 = 0
	Mem0[a2 + 0x000000C0:word16] = a3
	a4 = a4 & a5
	Mem0[a2 + 0x00000048:word32] = a4
	return
	// succ:  sdk_ieee80211_ht_node_cleanup_exit
sdk_ieee80211_ht_node_cleanup_exit:


// sdk_ieee80211_parse_htcap
// Return size: 0
void sdk_ieee80211_parse_htcap()
sdk_ieee80211_parse_htcap_entry:
	// succ:  l40215D50
l40215D50:
	a1 = fp
	a6 = Mem0[a2 + 0x00000048:word32]
	v6 = Mem0[a3 + 0x00000000:byte]
	a4 = (uint32) v6
	a5 = 0x000000DD
	branch a4 != a5 l40215D6A
	// succ:  l40215D5C l40215D6A
l40215D5C:
	a3 = a3 + 4
	a7 = 0x00000080
	a7 = a6 | a7
	Mem0[a2 + 0x00000048:word32] = a7
	goto l40215D72
	// succ:  l40215D72
l40215D6A:
	a8 = 64
	a8 = a6 | a8
	Mem0[a2 + 0x00000048:word32] = a8
	// succ:  l40215D72
l40215D72:
	v12 = Mem0[a3 + 0x00000003:byte]
	a11 = (uint32) v12
	v14 = Mem0[a3 + 0x00000002:byte]
	a10 = (uint32) v14
	a11 = a11 << 24
	a10 = a10 | a11
	Mem0[a2 + 0x000000C0:word16] = a10
	v16 = Mem0[a3 + 0x00000004:byte]
	a9 = (uint32) v16
	Mem0[a2 + 0x000000C2:byte] = a9
	return
	// succ:  sdk_ieee80211_parse_htcap_exit
sdk_ieee80211_parse_htcap_exit:


// sdk_ieee80211_ht_updateparams
// Return size: 0
void sdk_ieee80211_ht_updateparams()
sdk_ieee80211_ht_updateparams_entry:
	// succ:  l40215E2C
l40215E2C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	a13 = a4
	a12 = a2
	a0 = 0x40215E40
	call fn40315D50 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000048:word32]
	a14 = 0x40215E20
	v10 = Mem0[a12 + 0x000000C0:uint16]
	a2 = (uint32) v10
	a3 = a14 + 0x00000200
	v12 = Mem0[a3 + 0x000000D8:uint16]
	a3 = (uint32) v12
	a8 = 12
	branch (a8 & a3) == 0x00000000 l40215E78
	// succ:  l40215E54 l40215E78
l40215E54:
	a4 = 0x402040DC
	a3 = 0x402044EC
	a7 = a2 & a8
	branch (a2 & a8) != 0x00000000 l40215E63
	// succ:  l40215E60 l40215E63
l40215E60:
	goto l40215F2B
	// succ:  l40215F2B
l40215E63:
	a5 = a7 - 4
	branch a5 == 0x00000000 l40215F34
	// succ:  l40215E69 l40215F34
l40215E69:
	a4 = 0x40204640
	a0 = a0 & a4
	Mem0[a12 + 0x00000048:word32] = a0
	a0 = a0 & a3
	Mem0[a12 + 0x00000048:word32] = a0
	// succ:  l40215E78
l40215E78:
	a15 = 0x402138F8
	a5 = 0x40215E24
	a3 = 0x40214470
	a0 = a0 & a5
	Mem0[a12 + 0x00000048:word32] = a0
	branch (a2 & 0x00000020) == 0x00000000 l40215E99
	// succ:  l40215E8A l40215E99
l40215E8A:
	a6 = Mem0[a3 + 0x0000030C:word32]
	a7 = 0x40204624
	branch (a6 & 0x04000000) == 0x00000000 l40215E99
	// succ:  l40215E93 l40215E99
l40215E93:
	a0 = a0 | a7
	Mem0[a12 + 0x00000048:word32] = a0
	// succ:  l40215E99
l40215E99:
	branch (a2 & 0x00000040) == 0x00000000 l40215EA8
	// succ:  l40215E9C l40215EA8
l40215E9C:
	a8 = Mem0[a3 + 0x0000030C:word32]
	a9 = a0 | a15
	branch (a8 & 0x08000000) == 0x00000000 l40215EA8
	// succ:  l40215EA5 l40215EA8
l40215EA5:
	Mem0[a12 + 0x00000048:word32] = a9
	// succ:  l40215EA8
l40215EA8:
	v19 = Mem0[a13 + 0x00000000:byte]
	a10 = (uint32) v19
	a11 = 0x000000DD
	branch a10 != a11 l40215EB3
	// succ:  l40215EB1 l40215EB3
l40215EB1:
	a13 = a13 + 4
	// succ:  l40215EB3
l40215EB3:
	a2 = a12
	a3 = a13
	a0 = 0x40215EBA
	call fn40315D8C (retsize: 0;)
	v21 = Mem0[a13 + 0x00000003:byte]
	a2 = (uint32) v21
	a0 = Mem0[a14 + 0x000002D4:word32]
	a3 = 0
	a4 = a0 >>u 0x00000013 & 0x00000001
	branch a4 == 0x00000000 l40215EC8
	// succ:  l40215EC5_1 l40215EC8
l40215EC5_1:
	a3 = a15
	// succ:  l40215EC8
l40215EC8:
	branch (a2 & 0x00000004) == 0x00000000 l40215EE3
	// succ:  l40215ECB l40215EE3
l40215ECB:
	branch (a0 & 0x01000000) == 0x00000000 l40215EE3
	// succ:  l40215ECE l40215EE3
l40215ECE:
	v22 = Mem0[a12 + 0x000000C4:byte]
	a0 = (uint32) v22
	a5 = 0x40215E28
	branch a0 != 1 l40215EDD
	// succ:  l40215ED7 l40215EDD
l40215ED7:
	a3 = 0x402154AC
	goto l40215EE3
	// succ:  l40215EE3
l40215EDD:
	a6 = a0 - 3
	branch a6 != 0x00000000 l40215EE3
	// succ:  l40215EE0_1 l40215EE3
l40215EE0_1:
	a3 = a5
	// succ:  l40215EE3
l40215EE3:
	a8 = Mem0[a12 + 0x000000BC:word32]
	a9 = 0x40215D2C
	a7 = Mem0[a8 + 0x00000000:word32]
	a2 = a12
	a7 = a7 & a9
	a7 = a3 | a7
	Mem0[a8:word32] = a7
	a0 = 0x40215EF8
	call fn40315DB4 (retsize: 0;)
	a15 = Mem0[a1 + 0x00000010:word32]
	v23 = Mem0[a13 + 0x00000003:byte]
	a10 = (uint32) v23
	a13 = Mem0[a1 + 0x00000008:word32]
	branch (a10 & 0x00000008) == 0x00000000 l40215F1F
	// succ:  l40215F02 l40215F1F
l40215F02:
	a11 = Mem0[a14 + 0x000002D4:word32]
	a2 = 0x4020CB24
	branch (a11 & 0x20000000) == 0x00000000 l40215F1F
	// succ:  l40215F0B l40215F1F
l40215F0B:
	a0 = Mem0[a12 + 0x00000048:word32]
	a0 = a0 | a2
	Mem0[a12 + 0x00000048:word32] = a0
	a14 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_ieee80211_ht_updateparams_exit
l40215F1F:
	a2 = 0x40212EEC
	a0 = Mem0[a12 + 0x00000048:word32]
	a0 = a0 & a2
	goto l40255F11
	// succ:  l40255F11
l40215F2B:
	a0 = a0 | a4
	a0 = a0 & a3
	goto l40255E75
	// succ:  l40255E75
l40215F34:
	a3 = 0x402044E8
	a0 = a0 | a4
	a0 = a0 | a3
	// succ:  l40255E75
l40255E75:
l40255F11:
sdk_ieee80211_ht_updateparams_exit:


// sdk_ieee80211_setup_htrates
// Return size: 0
void sdk_ieee80211_setup_htrates()
sdk_ieee80211_setup_htrates_entry:
	// succ:  l40215F44
l40215F44:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a2
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000014:word32] = a15
	a14 = a3
	a15 = a2
	a3 = -1
	a2 = 0x40215F40
	Mem0[a1 + 0x00000018:word32] = a2
	v10 = Mem0[a2 + 0x00000082:byte]
	a0 = (uint32) v10
	a2 = Mem0[a2 + 0x0000007C:word32]
	a3 = a3 + a0 * 0x00000008
	Mem0[a1 + 0x00000020:word32] = a3
	branch (a2 & 0x00800000) == 0x00000000 l40215F88
	// succ:  l40215F6C l40215F88
l40215F6C:
	a3 = 38
	a2 = Mem0[a1 + 0x00000000:word32]
	branch a0 >=u 0x00000002 l40215F75
	// succ:  l40215F73 l40215F75
l40215F73:
	a3 = a2
	// succ:  l40215F75
l40215F75:
	a2 = 52
	branch a0 >=u 0x00000003 l40215F7C
	// succ:  l40215F7A l40215F7C
l40215F7A:
	a2 = a3
	// succ:  l40215F7C
l40215F7C:
	a3 = 76
	Mem0[a1 + 0x0000001C:word32] = a3
	branch a0 >=u 0x00000004 l40215F8C
	// succ:  l40215F83 l40215F8C
l40215F83:
	Mem0[a1 + 0x0000001C:word32] = a2
	goto l40215F8C
	// succ:  l40215F8C
l40215F88:
	a5 = 0
	Mem0[a1 + 0x0000001C:word32] = a5
	// succ:  l40215F8C
l40215F8C:
	a3 = 0
	a4 = 0x00000080
	a2 = 0x000000C8
	a2 = a15 + a2
	a0 = 0x4020267C
	v13 = a0
	a0 = 0x40215F9C
	call v13 (retsize: 0;)
	branch a14 == 0x00000000 l40216004
	// succ:  l40215F9F l40216004
l40215F9F:
	a12 = 0
	v14 = Mem0[a14 + 0x00000000:byte]
	a3 = (uint32) v14
	a4 = 0x000000DD
	branch a3 != a4 l40215FAC
	// succ:  l40215FAA l40215FAC
l40215FAA:
	a14 = a14 + 4
	// succ:  l40215FAC
l40215FAC:
	a13 = 0x0000007F
	// succ:  l40215FAF
l40215FAF:
	a2 = a12
	a3 = 8
	a0 = 0x402044A4
	v15 = a0
	a0 = 0x40215FB9
	call v15 (retsize: 0;)
	a6 = a12 + 7
	branch a12 < 0x00000000 l40215FBE
	// succ:  l40215FBB_1 l40215FBE
l40215FBB_1:
	a6 = a12
	// succ:  l40215FBE
l40215FBE:
	a6 = a6 >> 3
	a6 = a14 + a6
	v17 = Mem0[a6 + 0x00000005:byte]
	a6 = (uint32) v17
	SAR = a2
	a6 = a0 >> SAR
	branch (a6 & 0x00000001) == 0x00000000 l40215FFF
	// succ:  l40215FCF l40215FFF
l40215FCF:
	v19 = Mem0[a15 + 0x000000C8:byte]
	a0 = (uint32) v19
	branch a0 == a13 l40216004
	// succ:  l40215FD5 l40216004
l40215FD5:
	branch a12 >= 32 l40215FDD
	// succ:  l40215FD8 l40215FDD
l40215FD8:
	a7 = Mem0[a1 + 0x00000020:word32]
	branch a7 < a12 l40215FFF
	// succ:  l40215FDD l40215FFF
l40215FDD:
	branch a12 != 32 l40215FEB
	// succ:  l40215FE0 l40215FEB
l40215FE0:
	a8 = Mem0[a1 + 0x00000018:word32]
	a9 = 0x4020A194
	a8 = Mem0[a8 + 0x0000007C:word32]
	branch (a8 & a9) == 0x00000000 l40215FFF
	// succ:  l40215FEB l40215FFF
l40215FEB:
	a9 = 32
	branch a9 >= a12 l40215FF5
	// succ:  l40215FF0 l40215FF5
l40215FF0:
	a10 = Mem0[a1 + 0x0000001C:word32]
	branch a10 < a12 l40215FFF
	// succ:  l40215FF5 l40215FFF
l40215FF5:
	a11 = a0 + a15
	a2 = a0 + 1
	Mem0[a15 + 0x000000C8:byte] = a2
	Mem0[a11 + 0x000000C9:byte] = a12
	// succ:  l40215FFF
l40215FFF:
	a12 = a12 + 1
	branch a12 != a13 l40215FAF
	// succ:  l40216004 l40215FAF
l40216004:
	a2 = 0
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 48
	return
	a2 = 0
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_ieee80211_setup_htrates_exit sdk_ieee80211_setup_htrates_exit
sdk_ieee80211_setup_htrates_exit:


// sdk_ieee80211_setup_basic_htrates
// Return size: 0
void sdk_ieee80211_setup_basic_htrates()
sdk_ieee80211_setup_basic_htrates_entry:
	// succ:  l40216018
l40216018:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1 + 0x00000014:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1:word32] = a0
	a13 = a2
	v10 = Mem0[a3 + 0x00000000:byte]
	a0 = (uint32) v10
	a2 = 0x000000DD
	branch a0 != a2 l40216036
	// succ:  l40216032 l40216036
l40216032:
	a2 = a3 + 4
	Mem0[a1 + 0x00000014:word32] = a2
	// succ:  l40216036
l40216036:
	v11 = Mem0[a13 + 0x000000C8:byte]
	a12 = (uint32) v11
	branch a12 == 0x00000000 l40216089
	// succ:  l4021603C l40216089
l4021603C:
	a14 = 0
	a15 = 0x00000080
	// succ:  l40216041
l40216041:
	a2 = a14
	a3 = 8
	a0 = 0x402044A4
	v12 = a0
	a0 = 0x4021604B
	call v12 (retsize: 0;)
	a0 = 0x0000007F
	a4 = Mem0[a1 + 0x00000014:word32]
	a5 = a14 + 7
	branch a14 < 0x00000000 l40216055
	// succ:  l40216052_1 l40216055
l40216052_1:
	a5 = a14
	// succ:  l40216055
l40216055:
	a5 = a5 >> 3
	a4 = a4 + a5
	v15 = Mem0[a4 + 0x00000008:byte]
	a4 = (uint32) v15
	SAR = a2
	a4 = a0 >> SAR
	branch (a4 & 0x00000001) == 0x00000000 l40216084
	// succ:  l40216066 l40216084
l40216066:
	branch a12 < 1 l40216084
	// succ:  l40216069 l40216084
l40216069:
	a2 = 0
	// succ:  l4021606B
l4021606B:
	a7 = a2 + a13
	v19 = Mem0[a7 + 0x000000C9:byte]
	a6 = (uint32) v19
	a2 = a2 + 1
	a8 = a6 & 0x0000007F
	branch a14 != a8 l40216081
	// succ:  l40216078 l40216081
l40216078:
	a9 = a6 | a15
	Mem0[a7 + 0x000000C9:byte] = a9
	v22 = Mem0[a13 + 0x000000C8:byte]
	a12 = (uint32) v22
	// succ:  l40216081
l40216081:
	branch a2 < a12 l4021606B
	// succ:  l40216084 l4021606B
l40216084:
	a14 = a14 + 1
	branch a14 != a0 l40216041
	// succ:  l40216089 l40216041
l40216089:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_ieee80211_setup_basic_htrates_exit sdk_ieee80211_setup_basic_htrates_exit
sdk_ieee80211_setup_basic_htrates_exit:


// sdk_ieee80211_add_htcap
// Return size: 0
void sdk_ieee80211_add_htcap()
sdk_ieee80211_add_htcap_entry:
	// succ:  l40216380
l40216380:
	a1 = fp
	a1 = a1 - 16
	a4 = 45
	Mem0[a1:word32] = a0
	a0 = 26
	Mem0[a2:byte] = a4
	Mem0[a2 + 0x00000001:byte] = a0
	a2 = a2 + 2
	a0 = 0x40216394
	call fn40316224 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_add_htcap_exit
sdk_ieee80211_add_htcap_exit:


// sdk_ieee80211_add_htcap_vendor
// Return size: 0
void sdk_ieee80211_add_htcap_vendor()
sdk_ieee80211_add_htcap_vendor_entry:
	// succ:  l4021639C
l4021639C:
	a1 = fp
	a4 = 76
	a5 = 0xFFFFFF90
	a6 = 0
	a7 = 30
	a8 = 0xFFFFFFDD
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a2:byte] = a8
	Mem0[a2 + 0x00000001:byte] = a7
	Mem0[a2 + 0x00000002:byte] = a6
	Mem0[a2 + 0x00000003:byte] = a5
	a0 = 51
	Mem0[a2 + 0x00000004:byte] = a4
	Mem0[a2 + 0x00000005:byte] = a0
	a2 = a2 + 6
	a0 = 0x402163C6
	call fn40316224 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_add_htcap_vendor_exit
sdk_ieee80211_add_htcap_vendor_exit:


// sdk_ieee80211_add_htinfo
// Return size: 0
void sdk_ieee80211_add_htinfo()
sdk_ieee80211_add_htinfo_entry:
	// succ:  l402164C0
l402164C0:
	a1 = fp
	a1 = a1 - 16
	a4 = 61
	Mem0[a1:word32] = a0
	a0 = 22
	Mem0[a2:byte] = a4
	Mem0[a2 + 0x00000001:byte] = a0
	a2 = a2 + 2
	a0 = 0x402164D4
	call fn4031643C (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_add_htinfo_exit
sdk_ieee80211_add_htinfo_exit:


// sdk_ieee80211_add_htinfo_vendor
// Return size: 0
void sdk_ieee80211_add_htinfo_vendor()
sdk_ieee80211_add_htinfo_vendor_entry:
	// succ:  l402164DC
l402164DC:
	a1 = fp
	a4 = 76
	a5 = 0xFFFFFF90
	a6 = 0
	a7 = 26
	a8 = 0xFFFFFFDD
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a2:byte] = a8
	Mem0[a2 + 0x00000001:byte] = a7
	Mem0[a2 + 0x00000002:byte] = a6
	Mem0[a2 + 0x00000003:byte] = a5
	a0 = 52
	Mem0[a2 + 0x00000004:byte] = a4
	Mem0[a2 + 0x00000005:byte] = a0
	a2 = a2 + 6
	a0 = 0x40216506
	call fn4031643C (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_add_htinfo_vendor_exit
sdk_ieee80211_add_htinfo_vendor_exit:


// sdk_ieee80211_deliver_data
// Return size: 0
void sdk_ieee80211_deliver_data()
sdk_ieee80211_deliver_data_entry:
	// succ:  l40216708
l40216708:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a0
	a0 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1:word32] = a0
	v5 = Mem0[a0 + 0x0000002F:byte]
	a0 = (uint32) v5
	Mem0[a1 + 0x00000004:word32] = a3
	branch (a0 & 0x00000010) != 0x00000000 l40216728
	// succ:  l4021671C l40216728
l4021671C:
	Mem0[a1 + 0x00000004:word32] = a3
	branch a3 == 0x00000000 l40216747
	// succ:  l40216720 l40216747
l40216720:
	a2 = a3
	a0 = 0x40216725
	call sdk_ppRecycleRxPkt (retsize: 0;)
	goto l40216747
	// succ:  l40216747
l40216728:
	a2 = 0x00000003
	v7 = Mem0[a3 + 0x00000016:uint16]
	a3 = (uint32) v7
	a4 = 0x00000002
	a0 = 0x40216734
	call fn4030C160 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000004:word32]
	a5 = Mem0[a4 + 0x00000004:word32]
	a3 = a2
	a5 = Mem0[a5 + 0x00000004:word32]
	Mem0[a2 + 0x00000004:word32] = a5
	Mem0[a4:word32] = a2
	Mem0[a2 + 0x00000010:word32] = a4
	a2 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x40216747
	call fn40309B2C (retsize: 0;)
	// succ:  l40216747
l40216747:
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_deliver_data_exit
sdk_ieee80211_deliver_data_exit:


// sdk_ieee80211_decap
// Return size: 0
void sdk_ieee80211_decap()
sdk_ieee80211_decap_entry:
	// succ:  l4021675C
l4021675C:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a0
	a12 = a2 | a2
	a0 = a5 + 14
	branch a4 >=u a0 l40216775
	// succ:  l4021676D l40216775
l4021676D:
	a0 = 0x40216770
	call sdk_ppRecycleRxPkt (retsize: 0;)
	a12 = 0
	goto l4021683A
	// succ:  l4021683A
l40216775:
	a4 = a5
	a2 = a1
	a0 = 0x40203130
	v8 = a0
	a0 = 0x4021677F
	call v8 (retsize: 0;)
	a3 = Mem0[a12 + 0x00000004:word32]
	a0 = Mem0[a3 + 0x00000004:word32]
	a2 = 0x000000AA
	v10 = Mem0[a0 + 0x00000000:byte]
	a4 = (uint32) v10
	v11 = Mem0[a0 + 0x00000001:byte]
	a5 = (uint32) v11
	branch a4 != a2 l402167BF
	// succ:  l4021678F l402167BF
l4021678F:
	branch a5 != a2 l402167BF
	// succ:  l40216792 l402167BF
l40216792:
	v13 = Mem0[a0 + 0x00000002:byte]
	a6 = (uint32) v13
	branch a6 != 3 l402167BF
	// succ:  l40216798 l402167BF
l40216798:
	v15 = Mem0[a0 + 0x00000003:byte]
	a7 = (uint32) v15
	branch a7 != 0x00000000 l402167BF
	// succ:  l4021679D l402167BF
l4021679D:
	v17 = Mem0[a0 + 0x00000004:byte]
	a8 = (uint32) v17
	branch a8 != 0x00000000 l402167BF
	// succ:  l402167A2 l402167BF
l402167A2:
	v19 = Mem0[a0 + 0x00000005:byte]
	a9 = (uint32) v19
	branch a9 != 0x00000000 l402167BF
	// succ:  l402167A7 l402167BF
l402167A7:
	a10 = 0x40216750
	v21 = Mem0[a0 + 0x00000007:byte]
	a4 = (uint32) v21
	v22 = Mem0[a0 + 0x00000006:byte]
	a5 = (uint32) v22
	a4 = a4 << 24
	a4 = a4 | a5
	branch a4 == a10 l402167BF
	// succ:  l402167B9 l402167BF
l402167B9:
	a5 = 0x40216754
	branch a4 != a5 l402167D3
	// succ:  l402167BF l402167D3
l402167BF:
	v23 = Mem0[a12 + 0x00000016:uint16]
	a6 = (uint32) v23
	a7 = Mem0[a3 + 0x00000004:word32]
	Mem0[a1 + 0x00000020:word32] = a7
	a6 = a6 + 14
	a7 = a7 - 14
	Mem0[a3 + 0x00000004:word32] = a7
	Mem0[a12 + 0x00000016:word16] = a6
	goto l402167F4
	// succ:  l402167F4
l402167D3:
	a8 = a4 >>u 8
	a10 = 0x40216758
	v27 = Mem0[a12 + 0x00000016:uint16]
	a9 = (uint32) v27
	a2 = a0 + 8
	a11 = a0 - 6
	Mem0[a1 + 0x00000020:word32] = a11
	Mem0[a3 + 0x00000004:word32] = a2
	Mem0[a3 + 0x00000004:word32] = a11
	a9 = a9 + a10
	a9 = a9 + 14
	Mem0[a12 + 0x00000016:word16] = a9
	Mem0[a0 + 0x00000006:byte] = a4
	Mem0[a0 + 0x00000007:byte] = a8
	// succ:  l402167F4
l402167F4:
	v24 = Mem0[a1 + 0x00000001:byte]
	a0 = (uint32) v24
	a0 = a0 & 0x00000003
	branch a0 == 0x00000000 l40216820
	// succ:  l402167FC l40216820
l402167FC:
	branch a0 == 1 l40216845
	// succ:  l402167FF l40216845
l402167FF:
	branch a0 != 2 l4021683A
	// succ:  l40216802 l4021683A
l40216802:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = a1 + 4
	a4 = 6
	a0 = 0x40203130
	v25 = a0
	a0 = 0x4021680E
	call v25 (retsize: 0;)
	a3 = a1 + 16
	a2 = Mem0[a1 + 0x00000020:word32]
	a4 = 6
	a2 = a2 + 6
	a0 = 0x40203130
	v26 = a0
	a0 = 0x4021681D
	call v26 (retsize: 0;)
	goto l4021683A
	// succ:  l4021683A
l40216820:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = a1 + 4
	a4 = 6
	a0 = 0x40203130
	v29 = a0
	a0 = 0x4021682C
	call v29 (retsize: 0;)
	a3 = a1 + 10
	a2 = Mem0[a1 + 0x00000020:word32]
	a4 = 6
	a2 = a2 + 6
	a0 = 0x40203130
	v30 = a0
	a0 = 0x4021683A
	call v30 (retsize: 0;)
	// succ:  l4021683A
l4021683A:
	a2 = a12
	a0 = Mem0[a1 + 0x00000024:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_ieee80211_decap_exit
l40216845:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = a1 + 16
	a4 = 6
	a0 = 0x40203130
	v31 = a0
	a0 = 0x40216852
	call v31 (retsize: 0;)
	a3 = a1 + 10
	a2 = Mem0[a1 + 0x00000020:word32]
	a4 = 6
	a2 = a2 + 6
	a0 = 0x40203130
	v32 = a0
	a0 = 0x40216860
	call v32 (retsize: 0;)
	// succ:  l4025683A
l4025683A:
sdk_ieee80211_decap_exit:


// sdk_ieee80211_setup_rates
// Return size: 0
void sdk_ieee80211_setup_rates()
sdk_ieee80211_setup_rates_entry:
	// succ:  l40216864
l40216864:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	a13 = a4
	a12 = a2
	a14 = a3
	a2 = a2 + 71
	a3 = 0
	a4 = 16
	a0 = 0x4020267C
	v10 = a0
	a0 = 0x40216882
	call v10 (retsize: 0;)
	a3 = a14 + 2
	a2 = a12 + 72
	v11 = Mem0[a14 + 0x00000001:byte]
	a4 = (uint32) v11
	Mem0[a12 + 0x00000047:byte] = a4
	a0 = 0x40203130
	v12 = a0
	a0 = 0x40216893
	call v12 (retsize: 0;)
	branch a13 == 0x00000000 l402168BF
	// succ:  l40216895 l402168BF
l40216895:
	v13 = Mem0[a12 + 0x00000047:byte]
	a0 = (uint32) v13
	v14 = Mem0[a13 + 0x00000001:byte]
	a14 = (uint32) v14
	a2 = a14 + a0
	branch a2 < 16 l402168A8
	// succ:  l402168A0 l402168A8
l402168A0:
	a14 = 15
	a14 = a14 - a0
	a14 = a14 & 0x000000FF
	// succ:  l402168A8
l402168A8:
	a3 = a13 + 2
	a4 = a14
	a2 = a0 + a12
	a2 = a2 + 72
	a0 = 0x40203130
	v15 = a0
	a0 = 0x402168B7
	call v15 (retsize: 0;)
	v16 = Mem0[a12 + 0x00000047:byte]
	a3 = (uint32) v16
	a3 = a3 + a14
	Mem0[a12 + 0x00000047:byte] = a3
	// succ:  l402168BF
l402168BF:
	a2 = 0
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_setup_rates_exit
sdk_ieee80211_setup_rates_exit:


// sdk_ieee80211_alloc_challenge
// Return size: 0
void sdk_ieee80211_alloc_challenge()
sdk_ieee80211_alloc_challenge_entry:
	// succ:  l402168D0
l402168D0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a2
	a2 = Mem0[a2 + 0x00000054:word32]
	Mem0[a1 + 0x00000004:word32] = a0
	branch a2 != 0x00000000 l402168EA
	// succ:  l402168DC l402168EA
l402168DC:
	a2 = 0x00000080
	a0 = 0x402034C4
	v5 = a0
	a0 = 0x402168E5
	call v5 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	Mem0[a0 + 0x00000054:word32] = a2
	// succ:  l402168EA
l402168EA:
	a0 = Mem0[a1 + 0x00000004:word32]
	a3 = 1
	branch a2 == 0x00000000 l402168F1
	// succ:  l402168EE_1 l402168F1
l402168EE_1:
	a2 = a3
	// succ:  l402168F1
l402168F1:
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_alloc_challenge_exit
sdk_ieee80211_alloc_challenge_exit:


// sdk_ieee80211_parse_beacon
// Return size: 0
void sdk_ieee80211_parse_beacon()
sdk_ieee80211_parse_beacon_entry:
	// succ:  l40216904
l40216904:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a15
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a13
	a14 = a2
	a13 = Mem0[a2 + 0x00000004:word32]
	v9 = Mem0[a2 + 0x00000016:uint16]
	a15 = (uint32) v9
	a13 = Mem0[a13 + 0x00000004:word32]
	a12 = a3
	a15 = a15 + a13
	a15 = a15 + 24
	a5 = a15 - a13
	a0 = a5 - 24
	branch a0 >= 12 l40216930
	// succ:  l4021692D l40216930
l4021692D:
	goto l40216B62
	// succ:  l40216B62
l40216930:
	a2 = a3
	Mem0[a1:word32] = a5
	a3 = 72
	a0 = 0x40213724
	v12 = a0
	a0 = 0x4021693C
	call v12 (retsize: 0;)
	a5 = a13 + 24
	v14 = Mem0[a13 + 0x00000020:uint16]
	a4 = (uint32) v14
	Mem0[a12 + 0x00000006:word16] = a4
	v15 = Mem0[a13 + 0x00000022:uint16]
	a3 = (uint32) v15
	Mem0[a12 + 0x00000018:word32] = a5
	a13 = a13 + 36
	a2 = Mem0[a14 + 0x00000020:word32]
	Mem0[a12 + 0x00000002:word16] = a3
	a2 = Mem0[a2 + 0x00000008:word32]
	a0 = 0x40216957
	call fn40314A84 (retsize: 0;)
	Mem0[a12 + 0x0000000C:word32] = a13
	a6 = 0x000000DD
	Mem0[a12 + 0x00000001:byte] = a2
	a7 = Mem0[a1 + 0x00000000:word32]
	a3 = a2 & 0x000000FF
	Mem0[a12:byte] = a3
	a7 = a7 - 36
	Mem0[a12 + 0x00000010:word32] = a7
	branch a7 >= 2 l40216972
	// succ:  l4021696F l40216972
l4021696F:
	goto l40216B67
	// succ:  l40216B67
l40216972:
	a8 = 0x402168F8
	a10 = 50
	a11 = 45
	a9 = 0x40212B28
	a2 = a15 - a13
	// succ:  l4021697F
l4021697F:
	v23 = Mem0[a13 + 0x00000001:byte]
	a0 = (uint32) v23
	a7 = a13
	a4 = a0 + 2
	branch a2 >= a4 l4021698C
	// succ:  l40216989 l4021698C
l40216989:
	goto l40216B62
	// succ:  l40216B62
l4021698C:
	v26 = Mem0[a13 + 0x00000000:byte]
	a2 = (uint32) v26
	a5 = 32
	branch a2 >= 32 l40216997
	// succ:  l40216994 l40216997
l40216994:
	goto l40216B10
	// succ:  l40216B10
l40216997:
	branch a5 >= a2 l402169A8
	// succ:  l4021699A l402169A8
l4021699A:
	branch a2 >= a10 l402169A0
	// succ:  l4021699D l402169A0
l4021699D:
	goto l40216AE0
	// succ:  l40216AE0
l402169A0:
	branch a10 < a2 l402169B5
	// succ:  l402169A3 l402169B5
l402169A3:
	Mem0[a12 + 0x00000028:word32] = a13
	v35 = Mem0[a7 + 0x00000001:byte]
	a0 = (uint32) v35
	// succ:  l402169A8
l402169A8:
	a13 = a0 + a7
	a13 = a13 + 2
	a2 = a15 - a13
	branch a2 >= 2 l4021697F
	// succ:  l402169B2 l4021697F
l402169B2:
	goto l40216B67
	// succ:  l40216B67
l402169B5:
	branch a2 >= a6 l402169BB
	// succ:  l402169B8 l402169BB
l402169B8:
	goto l40216AD4
	// succ:  l40216AD4
l402169BB:
	branch a6 < a2 l402169A8
	// succ:  l402169BE l402169A8
l402169BE:
	a2 = 0
	branch a0 <u 0x00000004 l402169E9
	// succ:  l402169C3 l402169E9
l402169C3:
	v37 = Mem0[a13 + 0x00000003:byte]
	a5 = (uint32) v37
	v38 = Mem0[a13 + 0x00000002:byte]
	a4 = (uint32) v38
	a5 = a5 << 24
	v39 = Mem0[a13 + 0x00000005:byte]
	a13 = (uint32) v39
	a4 = a4 | a5
	v40 = Mem0[a7 + 0x00000004:byte]
	a5 = (uint32) v40
	a13 = a13 << 8
	a5 = a5 << 16
	a5 = a5 | a13
	a4 = a4 | a5
	a5 = 0x40215598
	branch a4 != a5 l402169E9
	// succ:  l402169E7 l402169E9
l402169E7:
	a2 = 1
	// succ:  l402169E9
l402169E9:
	branch a2 == 0x00000000 l402169F3
	// succ:  l402169EB l402169F3
l402169EB:
	Mem0[a12 + 0x00000030:word32] = a7
	v41 = Mem0[a7 + 0x00000001:byte]
	a0 = (uint32) v41
	goto l402569A8
	// succ:  l402569A8
l402169F3:
	a2 = 0
	branch a0 <u 0x00000006 l40216A21
	// succ:  l402169F8 l40216A21
l402169F8:
	v42 = Mem0[a7 + 0x00000005:byte]
	a5 = (uint32) v42
	v43 = Mem0[a7 + 0x00000003:byte]
	a4 = (uint32) v43
	v44 = Mem0[a7 + 0x00000002:byte]
	a13 = (uint32) v44
	a4 = a4 << 24
	a13 = a13 | a4
	v45 = Mem0[a7 + 0x00000004:byte]
	a4 = (uint32) v45
	a5 = a5 << 8
	a4 = a4 << 16
	a4 = a4 | a5
	a13 = a13 | a4
	branch a13 != a8 l40216A21
	// succ:  l40216A19 l40216A21
l40216A19:
	v46 = Mem0[a7 + 0x00000006:byte]
	a5 = (uint32) v46
	branch a5 != 1 l40216A21
	// succ:  l40216A1F l40216A21
l40216A1F:
	a2 = 1
	// succ:  l40216A21
l40216A21:
	branch a2 != 0x00000000 l40216A53
	// succ:  l40216A23 l40216A53
l40216A23:
	a2 = 0
	branch a0 <u 0x00000006 l40216A51
	// succ:  l40216A28 l40216A51
l40216A28:
	v47 = Mem0[a7 + 0x00000005:byte]
	a5 = (uint32) v47
	v48 = Mem0[a7 + 0x00000003:byte]
	a4 = (uint32) v48
	v49 = Mem0[a7 + 0x00000002:byte]
	a13 = (uint32) v49
	a4 = a4 << 24
	a13 = a13 | a4
	v50 = Mem0[a7 + 0x00000004:byte]
	a4 = (uint32) v50
	a5 = a5 << 8
	a4 = a4 << 16
	a4 = a4 | a5
	a13 = a13 | a4
	branch a13 != a8 l40216A51
	// succ:  l40216A49 l40216A51
l40216A49:
	v51 = Mem0[a7 + 0x00000006:byte]
	a13 = (uint32) v51
	a5 = 1
	branch a13 != 0x00000000 l40216A51
	// succ:  l40216A4E_1 l40216A51
l40216A4E_1:
	a2 = a5
	// succ:  l40216A51
l40216A51:
	branch a2 == 0x00000000 l40216A58
	// succ:  l40216A53 l40216A58
l40216A53:
	Mem0[a12 + 0x00000038:word32] = a7
	goto l402569ED
	// succ:  l402569ED
l40216A58:
	a2 = Mem0[a9 + 0x00000334:word32]
	a2 = a2 >>u 0x0000001C & 0x00000001
	branch a2 == 0x00000000 l402169A8
	// succ:  l40216A61 l402169A8
l40216A61:
	a2 = 0
	branch a0 <u 0x00000004 l40216A8C
	// succ:  l40216A66 l40216A8C
l40216A66:
	v52 = Mem0[a7 + 0x00000005:byte]
	a13 = (uint32) v52
	v53 = Mem0[a7 + 0x00000003:byte]
	a5 = (uint32) v53
	v54 = Mem0[a7 + 0x00000002:byte]
	a4 = (uint32) v54
	a5 = a5 << 24
	a4 = a4 | a5
	v55 = Mem0[a7 + 0x00000004:byte]
	a5 = (uint32) v55
	a13 = a13 << 8
	a5 = a5 << 16
	a5 = a5 | a13
	a4 = a4 | a5
	a5 = 0x402168FC
	branch a4 != a5 l40216A8C
	// succ:  l40216A8A l40216A8C
l40216A8A:
	a2 = 1
	// succ:  l40216A8C
l40216A8C:
	branch a2 == 0x00000000 l40216A9B
	// succ:  l40216A8E l40216A9B
l40216A8E:
	a13 = Mem0[a12 + 0x0000003C:word32]
	branch a13 != 0x00000000 l402169A8
	// succ:  l40216A93 l402169A8
l40216A93:
	Mem0[a12 + 0x0000003C:word32] = a7
	v56 = Mem0[a7 + 0x00000001:byte]
	a0 = (uint32) v56
	goto l402569A8
	// succ:  l402569A8
l40216A9B:
	a2 = 0
	branch a0 <u 0x00000004 l40216AC6
	// succ:  l40216AA0 l40216AC6
l40216AA0:
	v57 = Mem0[a7 + 0x00000005:byte]
	a13 = (uint32) v57
	v58 = Mem0[a7 + 0x00000003:byte]
	a5 = (uint32) v58
	v59 = Mem0[a7 + 0x00000002:byte]
	a4 = (uint32) v59
	a5 = a5 << 24
	a4 = a4 | a5
	v60 = Mem0[a7 + 0x00000004:byte]
	a5 = (uint32) v60
	a13 = a13 << 8
	a5 = a5 << 16
	a5 = a5 | a13
	a4 = a4 | a5
	a5 = 0x40216900
	branch a4 != a5 l40216AC6
	// succ:  l40216AC4 l40216AC6
l40216AC4:
	a2 = 1
	// succ:  l40216AC6
l40216AC6:
	branch a2 == 0x00000000 l402169A8
	// succ:  l40216AC9 l402169A8
l40216AC9:
	a13 = Mem0[a12 + 0x00000040:word32]
	branch a13 != 0x00000000 l402169A8
	// succ:  l40216ACF l402169A8
l40216ACF:
	Mem0[a12 + 0x0000003C:word32] = a7
	goto l402569ED
	// succ:  l402569ED
l40216AD4:
	a4 = a2 - 61
	branch a4 != 0x00000000 l402169A8
	// succ:  l40216ADA l402169A8
l40216ADA:
	Mem0[a12 + 0x00000040:word32] = a13
	goto l402569A5
	// succ:  l402569A5
l40216AE0:
	branch a2 < a11 l40216AF6
	// succ:  l40216AE3 l40216AF6
l40216AE3:
	branch a11 < a2 l40216AEB
	// succ:  l40216AE6 l40216AEB
l40216AE6:
	Mem0[a12 + 0x0000003C:word32] = a13
	goto l402569A5
	// succ:  l402569A5
l40216AEB:
	a5 = a2 - 48
	branch a5 != 0x00000000 l402169A8
	// succ:  l40216AF1 l402169A8
l40216AF1:
	Mem0[a12 + 0x00000034:word32] = a13
	goto l402569A5
	// succ:  l402569A5
l40216AF6:
	a13 = a2 - 42
	branch a13 != 0x00000000 l402169A8
	// succ:  l40216AFC l402169A8
l40216AFC:
	a2 = a0 - 1
	branch a2 != 0x00000000 l402169A8
	// succ:  l40216B01 l402169A8
l40216B01:
	v36 = Mem0[a7 + 0x00000002:byte]
	a4 = (uint32) v36
	a5 = 0x00000100
	a4 = a4 | a5
	Mem0[a12 + 0x00000004:word16] = a4
	goto l402569A5
	// succ:  l402569A5
l40216B10:
	branch a2 < 4 l40216B40
	// succ:  l40216B13 l40216B40
l40216B13:
	branch a2 >= 5 l40216B19
	// succ:  l40216B16 l40216B19
l40216B16:
	goto l402569A8
	// succ:  l402569A8
l40216B19:
	branch a2 < 6 l40216B2D
	// succ:  l40216B1C l40216B2D
l40216B1C:
	branch a2 >= 7 l40216B22
	// succ:  l40216B1F l40216B22
l40216B1F:
	goto l402569A8
	// succ:  l402569A8
l40216B22:
	a13 = a2 - 7
	branch a13 != 0x00000000 l402169A8
	// succ:  l40216B28 l402169A8
l40216B28:
	Mem0[a12 + 0x0000001C:word32] = a7
	goto l402569A5
	// succ:  l402569A5
l40216B2D:
	a4 = a2 - 5
	branch a4 != 0x00000000 l402169A8
	// succ:  l40216B33 l402169A8
l40216B33:
	Mem0[a12 + 0x00000014:word32] = a13
	a5 = Mem0[a14 + 0x00000010:word32]
	a5 = a13 - a5
	Mem0[a12 + 0x00000008:byte] = a5
	goto l402569A5
	// succ:  l402569A5
l40216B40:
	branch a2 < 1 l40216B5A
	// succ:  l40216B43 l40216B5A
l40216B43:
	branch a2 >= 2 l40216B4B
	// succ:  l40216B46 l40216B4B
l40216B46:
	Mem0[a12 + 0x00000024:word32] = a13
	goto l402569A5
	// succ:  l402569A5
l40216B4B:
	a13 = a2 - 3
	branch a13 != 0x00000000 l402169A8
	// succ:  l40216B51 l402169A8
l40216B51:
	v30 = Mem0[a7 + 0x00000002:byte]
	a3 = (uint32) v30
	Mem0[a12:byte] = a3
	goto l402569A5
	// succ:  l402569A5
l40216B5A:
	branch a2 != 0x00000000 l402169A8
	// succ:  l40216B5D l402169A8
l40216B5D:
	Mem0[a12 + 0x00000020:word32] = a13
	goto l402569A5
	// succ:  l402569A5
l40216B62:
	a2 = 1
	goto l40216BEE
	// succ:  l40216BEE
l40216B67:
	a0 = Mem0[a12 + 0x00000024:word32]
	a7 = Mem0[a12 + 0x00000028:word32]
	branch a0 == 0x00000000 l40216BFD
	// succ:  l40216B6E l40216BFD
l40216B6E:
	v18 = Mem0[a0 + 0x00000001:byte]
	a14 = (uint32) v18
	branch a14 <u 0x00000010 l40216B77
	// succ:  l40216B74 l40216B77
l40216B74:
	goto l40216BFD
	// succ:  l40216BFD
l40216B77:
	a2 = 0
	branch a0 == 0x00000000 l40216B90
	// succ:  l40216B7B l40216B90
l40216B7B:
	branch a7 == 0x00000000 l40216B90
	// succ:  l40216B7D l40216B90
l40216B7D:
	v24 = Mem0[a7 + 0x00000001:byte]
	a4 = (uint32) v24
	v25 = Mem0[a0 + 0x00000001:byte]
	a5 = (uint32) v25
	a15 = 15
	a15 = a15 - a5
	branch a15 >= a4 l40216B90
	// succ:  l40216B8B l40216B90
l40216B8B:
	a7 = 4
	a2 = a2 | a7
	// succ:  l40216B90
l40216B90:
	a7 = 8
	a0 = Mem0[a12 + 0x00000020:word32]
	v27 = Mem0[a12 + 0x00000001:byte]
	a10 = (uint32) v27
	branch a0 == 0x00000000 l40216BA1
	// succ:  l40216B99 l40216BA1
l40216B99:
	v28 = Mem0[a0 + 0x00000001:byte]
	a9 = (uint32) v28
	a8 = 32
	branch a8 >=u a9 l40216BA4
	// succ:  l40216BA1 l40216BA4
l40216BA1:
	a2 = a2 | a7
	// succ:  l40216BA4
l40216BA4:
	a0 = Mem0[a12 + 0x0000001C:word32]
	branch a10 == a3 l40216BAE
	// succ:  l40216BA9 l40216BAE
l40216BA9:
	a11 = 32
	a2 = a2 | a11
	// succ:  l40216BAE
l40216BAE:
	a3 = 0
	branch a0 == 0x00000000 l40216BBA
	// succ:  l40216BB2 l40216BBA
l40216BB2:
	v29 = Mem0[a0 + 0x00000001:byte]
	a13 = (uint32) v29
	branch a13 >=u 0x00000003 l40216BBA
	// succ:  l40216BB8 l40216BBA
l40216BB8:
	Mem0[a12 + 0x0000001C:word32] = a3
	// succ:  l40216BBA
l40216BBA:
	a0 = Mem0[a12 + 0x0000003C:word32]
	a8 = 26
	branch a0 == 0x00000000 l40216BD5
	// succ:  l40216BC0 l40216BD5
l40216BC0:
	v31 = Mem0[a0 + 0x00000001:byte]
	a14 = (uint32) v31
	a4 = 30
	v32 = Mem0[a0 + 0x00000000:byte]
	a5 = (uint32) v32
	a15 = a8
	a5 = a5 - a6
	branch a5 != 0x00000000 l40216BD0
	// succ:  l40216BCD_1 l40216BD0
l40216BCD_1:
	a15 = a4
	// succ:  l40216BD0
l40216BD0:
	branch a14 >=u a15 l40216BD5
	// succ:  l40216BD3 l40216BD5
l40216BD3:
	Mem0[a12 + 0x0000003C:word32] = a3
	// succ:  l40216BD5
l40216BD5:
	a0 = Mem0[a12 + 0x00000040:word32]
	a9 = 22
	branch a0 == 0x00000000 l40216BEE
	// succ:  l40216BDC l40216BEE
l40216BDC:
	v33 = Mem0[a0 + 0x00000000:byte]
	a10 = (uint32) v33
	v34 = Mem0[a0 + 0x00000001:byte]
	a7 = (uint32) v34
	a10 = a10 - a6
	branch a10 != 0x00000000 l40216BE8
	// succ:  l40216BE5_1 l40216BE8
l40216BE5_1:
	a9 = a8
	// succ:  l40216BE8
l40216BE8:
	branch a7 >=u a9 l40216BEE
	// succ:  l40216BEB l40216BEE
l40216BEB:
	Mem0[a12 + 0x00000040:word32] = a3
	// succ:  l40216BEE
l40216BEE:
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_ieee80211_parse_beacon_exit
l40216BFD:
	a2 = 2
	goto l40256B79
	// succ:  l40256B79
l402569A5:
l402569A8:
l402569ED:
l40256B79:
sdk_ieee80211_parse_beacon_exit:


// sdk_ieee80211_parse_wpa
// Return size: 0
void sdk_ieee80211_parse_wpa()
sdk_ieee80211_parse_wpa_entry:
	// succ:  l40216D70
l40216D70:
	a1 = fp
	a5 = 0
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a0
	Mem0[a1:byte] = a5
	a0 = Mem0[a2 + 0x00000030:word32]
	branch a0 == 0x00000000 l40216D95
	// succ:  l40216D7E l40216D95
l40216D7E:
	Mem0[a1 + 0x00000010:word32] = a0
	v7 = Mem0[a0 + 0x00000007:byte]
	a3 = (uint32) v7
	v8 = Mem0[a0 + 0x00000006:byte]
	a2 = (uint32) v8
	a3 = a3 << 24
	a2 = a2 | a3
	a2 = a2 << 16
	a2 = a2 >> 16
	branch a2 == 1 l40216DA6
	// succ:  l40216D95 l40216DA6
l40216D95:
	a2 = a5
	goto l40216D9F
	// succ:  l40216D9F
l40216D9A:
	branch a0 < 0x00000000 l40216E81
	// succ:  l40216D9D l40216E81
l40216D9D:
	a2 = 1
	// succ:  l40216D9F
l40216D9F:
	a0 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_ieee80211_parse_wpa_exit
l40216DA6:
	a3 = a1
	a2 = a0 + 8
	a4 = 3
	v11 = Mem0[a0 + 0x00000001:byte]
	a6 = (uint32) v11
	a5 = 0x402142E4
	Mem0[a1 + 0x00000014:word32] = a5
	a6 = a6 - 6
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a5 + 0x00000080:byte] = a4
	a0 = 0x40216DBF
	call fn40316C10 (retsize: 0;)
	a5 = 0
	a6 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a7 = Mem0[a1 + 0x00000014:word32]
	a0 = a0 - 6
	Mem0[a7 + 0x00000084:byte] = a2
	v13 = Mem0[a6 + 0x0000000D:byte]
	a7 = (uint32) v13
	v14 = Mem0[a6 + 0x0000000C:byte]
	a6 = (uint32) v14
	a7 = a7 << 24
	a6 = a6 | a7
	a6 = a6 & 0x0000FFFF
	branch a0 == 0x00000000 l40216E18
	// succ:  l40216DDE l40216E18
l40216DDE:
	Mem0[a1 + 0x0000000C:word32] = a5
	Mem0[a1 + 0x0000001C:word32] = a6
	Mem0[a1 + 0x00000004:word32] = a0
	a8 = a5 & 0x0000FFFF
	branch a8 >=u a6 l40216E18
	// succ:  l40216DEA l40216E18
l40216DEA:
	a3 = Mem0[a1 + 0x00000010:word32]
	a2 = Mem0[a1 + 0x0000000C:word32]
	a2 = a3 + a2 * 0x00000004
	a2 = a2 + 14
	a3 = a1
	a0 = 0x40216DF8
	call fn40316C10 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000014:word32]
	a6 = Mem0[a1 + 0x0000001C:word32]
	v16 = Mem0[a0 + 0x00000082:byte]
	a0 = (uint32) v16
	a5 = Mem0[a1 + 0x0000000C:word32]
	branch a0 == 0x00000000 l40216E06
	// succ:  l40216E03 l40216E06
l40216E03:
	branch a0 != 1 l40216E0B
	// succ:  l40216E06 l40216E0B
l40216E06:
	a3 = Mem0[a1 + 0x00000014:word32]
	Mem0[a3 + 0x00000082:byte] = a2
	// succ:  l40216E0B
l40216E0B:
	a0 = Mem0[a1 + 0x00000004:word32]
	a4 = a5 + 1
	a5 = a4 & 0x000000FF
	a0 = a0 - 4
	goto l40256DDC
	// succ:  l40256DDC
l40216E18:
	branch a0 < 1 l40216E81
	// succ:  l40216E1B l40216E81
l40216E1B:
	a5 = 0
	a7 = Mem0[a1 + 0x00000010:word32]
	a0 = a0 - 2
	a6 = a7 + a6 * 0x00000004
	a2 = a6 + 16
	v17 = Mem0[a6 + 0x0000000F:byte]
	a7 = (uint32) v17
	v18 = Mem0[a6 + 0x0000000E:byte]
	a6 = (uint32) v18
	a7 = a7 << 24
	a6 = a6 | a7
	a6 = a6 & 0x0000FFFF
	branch a0 == 0x00000000 l40216D9A
	// succ:  l40216E3A l40216D9A
l40216E3A:
	Mem0[a1 + 0x0000001C:word32] = a6
	Mem0[a1 + 0x0000000C:word32] = a5
	Mem0[a1 + 0x00000008:word32] = a2
	Mem0[a1 + 0x00000004:word32] = a0
	a9 = a5 & 0x0000FFFF
	branch a9 <u a6 l40216E4B
	// succ:  l40216E48 l40216E4B
l40216E48:
	goto l40256D9A
	// succ:  l40256D9A
l40216E4B:
	a2 = Mem0[a1 + 0x00000008:word32]
	a0 = 0x40216E50
	call fn40316C74 (retsize: 0;)
	branch a2 != 1 l40216E5D
	// succ:  l40216E53 l40216E5D
l40216E53:
	a11 = Mem0[a1 + 0x00000014:word32]
	a10 = 2
	Mem0[a11 + 0x00000081:byte] = a10
	goto l40216E6C
	// succ:  l40216E6C
l40216E5D:
	a2 = Mem0[a1 + 0x00000008:word32]
	a0 = 0x40216E62
	call fn40316C74 (retsize: 0;)
	branch a2 != 2 l40216E6C
	// succ:  l40216E65 l40216E6C
l40216E65:
	a2 = Mem0[a1 + 0x00000014:word32]
	a0 = 3
	Mem0[a2 + 0x00000081:byte] = a0
	// succ:  l40216E6C
l40216E6C:
	a6 = Mem0[a1 + 0x0000001C:word32]
	a5 = Mem0[a1 + 0x0000000C:word32]
	a2 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a2 = a2 + 4
	a0 = a0 - 4
	a3 = a5 + 1
	a5 = a3 & 0x000000FF
	goto l40256E37
	// succ:  l40256E37
l40216E81:
	a2 = 0
	goto l40256D9F
	// succ:  l40256D9F
l40256D9A:
l40256D9F:
l40256DDC:
l40256E37:
sdk_ieee80211_parse_wpa_exit:


// sdk_ieee80211_parse_rsn
// Return size: 0
void sdk_ieee80211_parse_rsn()
sdk_ieee80211_parse_rsn_entry:
	// succ:  l40216E88
l40216E88:
	a1 = fp
	a4 = 0
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a13
	Mem0[a1 + 0x00000014:word32] = a14
	Mem0[a1 + 0x00000018:word32] = a15
	Mem0[a1 + 0x0000000C:word32] = a12
	Mem0[a1:byte] = a4
	a12 = Mem0[a2 + 0x00000034:word32]
	Mem0[a1 + 0x00000008:word32] = a0
	branch a12 == 0x00000000 l40216EB9
	// succ:  l40216E9E l40216EB9
l40216E9E:
	v11 = Mem0[a12 + 0x00000001:byte]
	a5 = (uint32) v11
	v12 = Mem0[a12 + 0x00000003:byte]
	a2 = (uint32) v12
	branch a5 < 10 l40216EB9
	// succ:  l40216EA7 l40216EB9
l40216EA7:
	v13 = Mem0[a12 + 0x00000002:byte]
	a0 = (uint32) v13
	a2 = a2 << 24
	a0 = a0 | a2
	a0 = a0 << 16
	a0 = a0 >> 16
	branch a0 == 1 l40216ED5
	// succ:  l40216EB9 l40216ED5
l40216EB9:
	a2 = a4
	goto l40216EC6
	// succ:  l40216EC6
l40216EBE:
	branch a13 >= 2 l40216EC4
	// succ:  l40216EC1 l40216EC4
l40216EC1:
	goto l40216F7F
	// succ:  l40216F7F
l40216EC4:
	a2 = 1
	// succ:  l40216EC6
l40216EC6:
	a12 = Mem0[a1 + 0x0000000C:word32]
	a13 = Mem0[a1 + 0x00000010:word32]
	a14 = Mem0[a1 + 0x00000014:word32]
	a15 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_ieee80211_parse_rsn_exit
l40216ED5:
	a2 = a12 + 4
	a15 = 0x402142E4
	a3 = 3
	Mem0[a1 + 0x0000001C:word32] = a5
	Mem0[a15 + 0x00000080:byte] = a3
	a3 = a1
	a0 = 0x40216EE6
	call fn40316CC8 (retsize: 0;)
	a14 = 0
	a13 = Mem0[a1 + 0x0000001C:word32]
	Mem0[a15 + 0x00000084:byte] = a2
	v15 = Mem0[a12 + 0x00000008:byte]
	a4 = (uint32) v15
	v16 = Mem0[a12 + 0x00000009:byte]
	a5 = (uint32) v16
	a13 = a13 - 8
	a12 = a12 + 10
	a5 = a5 << 24
	a4 = a4 | a5
	a4 = a4 & 0x0000FFFF
	Mem0[a1 + 0x00000004:word32] = a4
	a2 = Mem0[a1 + 0x00000004:word32]
	a0 = a14 & 0x0000FFFF
	branch a0 >=u a2 l40216F2C
	// succ:  l40216F0B l40216F2C
l40216F0B:
	branch a13 == 0x00000000 l40216F2C
	// succ:  l40216F0D l40216F2C
l40216F0D:
	a2 = a12
	a3 = a1
	a0 = 0x40216F14
	call fn40316CC8 (retsize: 0;)
	a13 = a13 - 4
	v17 = Mem0[a15 + 0x00000082:byte]
	a0 = (uint32) v17
	a12 = a12 + 4
	branch a0 == 0x00000000 l40216F21
	// succ:  l40216F1E l40216F21
l40216F1E:
	branch a0 != 1 l40216F24
	// succ:  l40216F21 l40216F24
l40216F21:
	Mem0[a15 + 0x00000082:byte] = a2
	// succ:  l40216F24
l40216F24:
	a14 = a14 + 1
	a14 = a14 & 0x000000FF
	goto l40256F03
	// succ:  l40256F03
l40216F2C:
	branch a13 < 1 l40216F7F
	// succ:  l40216F2F l40216F7F
l40216F2F:
	a14 = 0
	a13 = a13 - 2
	v18 = Mem0[a12 + 0x00000000:byte]
	a0 = (uint32) v18
	v19 = Mem0[a12 + 0x00000001:byte]
	a2 = (uint32) v19
	a12 = a12 + 2
	a2 = a2 << 24
	a0 = a0 | a2
	a0 = a0 & 0x0000FFFF
	Mem0[a1 + 0x00000004:word32] = a0
	branch a13 == 0x00000000 l40216EBE
	// succ:  l40216F4A l40216EBE
l40216F4A:
	a6 = Mem0[a1 + 0x00000004:word32]
	a5 = a14 & 0x0000FFFF
	branch a5 <u a6 l40216F55
	// succ:  l40216F52 l40216F55
l40216F52:
	goto l40256EBE
	// succ:  l40256EBE
l40216F55:
	a2 = a12
	a0 = 0x40216F5A
	call fn40316D34 (retsize: 0;)
	branch a2 != 1 l40216F65
	// succ:  l40216F5D l40216F65
l40216F5D:
	a7 = 4
	Mem0[a15 + 0x00000081:byte] = a7
	goto l40216F72
	// succ:  l40216F72
l40216F65:
	a2 = a12
	a0 = 0x40216F6A
	call fn40316D34 (retsize: 0;)
	branch a2 != 2 l40216F72
	// succ:  l40216F6D l40216F72
l40216F6D:
	a8 = 5
	Mem0[a15 + 0x00000081:byte] = a8
	// succ:  l40216F72
l40216F72:
	a12 = a12 + 4
	a13 = a13 - 4
	a14 = a14 + 1
	a14 = a14 & 0x000000FF
	goto l40256F47
	// succ:  l40256F47
l40216F7F:
	a2 = 0
	goto l40256EC6
	// succ:  l40256EC6
l40256EBE:
l40256EC6:
l40256F03:
l40256F47:
sdk_ieee80211_parse_rsn_exit:


// sdk_ieee80211_parse_action
// Return size: 0
void sdk_ieee80211_parse_action()
sdk_ieee80211_parse_action_entry:
	// succ:  l40216F84
l40216F84:
	a1 = fp
	a4 = Mem0[a3 + 0x00000004:word32]
	v6 = Mem0[a3 + 0x00000016:uint16]
	a2 = (uint32) v6
	a3 = Mem0[a4 + 0x00000004:word32]
	a2 = a2 + a3
	a2 = a2 + 24
	a2 = a2 - a3
	a2 = a2 - 24
	branch a2 <u 0x00000002 l40216FB6
	// succ:  l40216F99 l40216FB6
l40216F99:
	v8 = Mem0[a3 + 0x00000018:byte]
	a5 = (uint32) v8
	branch a5 == 3 l40216FBA
	// succ:  l40216F9F l40216FBA
l40216F9F:
	branch a5 != 7 l40216FAD
	// succ:  l40216FA2 l40216FAD
l40216FA2:
	v9 = Mem0[a3 + 0x00000019:byte]
	a3 = (uint32) v9
	branch a3 == 0x00000000 l40216FCC
	// succ:  l40216FA7 l40216FCC
l40216FA7:
	branch a3 != 1 l40216FAD
	// succ:  l40216FAA l40216FAD
l40216FAA:
	branch a2 <u 0x00000003 l40216FB6
	// succ:  l40216FAD l40216FB6
l40216FAD:
	a2 = 0
	return
	// succ:  sdk_ieee80211_parse_action_exit
l40216FB1:
	a5 = 8
	branch a5 <u a2 l40216FAD
	// succ:  l40216FB6 l40216FAD
l40216FB6:
	a2 = -1
	return
	a2 = -1
	return
	// succ:  sdk_ieee80211_parse_action_exit sdk_ieee80211_parse_action_exit
l40216FBA:
	v10 = Mem0[a3 + 0x00000019:byte]
	a3 = (uint32) v10
	branch a3 == 0x00000000 l40216FB1
	// succ:  l40216FC0 l40216FB1
l40216FC0:
	branch a3 == 1 l40216FD2
	// succ:  l40216FC3 l40216FD2
l40216FC3:
	branch a3 != 2 l40216FAD
	// succ:  l40216FC6 l40216FAD
l40216FC6:
	branch a2 <u 0x00000006 l40216FB6
	// succ:  l40216FC9 l40216FB6
l40216FC9:
	goto l40256FAD
	// succ:  l40256FAD
l40216FCC:
	branch a2 <u 0x00000003 l40216FB6
	// succ:  l40216FCF l40216FB6
l40216FCF:
	goto l40256FAD
	// succ:  l40256FAD
l40216FD2:
	a6 = 8
	branch a6 >=u a2 l40216FB6
	// succ:  l40216FD7 l40216FB6
l40216FD7:
	// succ:  l40256FAD
l40256FAD:
sdk_ieee80211_parse_action_exit:


// sdk_ieee80211_setup_rateset
// Return size: 0
void sdk_ieee80211_setup_rateset()
sdk_ieee80211_setup_rateset_entry:
	// succ:  l40216FDC
l40216FDC:
	a1 = fp
	a2 = 0
	return
	// succ:  sdk_ieee80211_setup_rateset_exit
sdk_ieee80211_setup_rateset_exit:


// sdk_ieee80211_output_pbuf
// Return size: 0
void sdk_ieee80211_output_pbuf()
sdk_ieee80211_output_pbuf_entry:
	// succ:  l40216FE8
l40216FE8:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x0000001C:word32] = a14
	Mem0[a1 + 0x00000018:word32] = a13
	a13 = Mem0[a2 + 0x0000001C:word32]
	Mem0[a1 + 0x00000010:word32] = a0
	a0 = Mem0[a13 + 0x0000003C:word32]
	a14 = a3
	a0 = a0 - 5
	branch a0 != 0x00000000 l402170AC
	// succ:  l40216FFF l402170AC
l40216FFF:
	branch a3 == 0x00000000 l402170AC
	// succ:  l40217002 l402170AC
l40217002:
	a2 = Mem0[a14 + 0x00000004:word32]
	a3 = Mem0[a13 + 0x000000B0:word32]
	Mem0[a1 + 0x00000008:word32] = a2
	branch a3 != 0x00000000 l40217011
	// succ:  l4021700B l40217011
l4021700B:
	a12 = Mem0[a13 + 0x00000088:word32]
	goto l4021701A
	// succ:  l4021701A
l40217011:
	Mem0[a1 + 0x00000008:word32] = a2
	a0 = 0x40217017
	call sdk_cnx_node_search (retsize: 0;)
	a12 = a2 | a2
	// succ:  l4021701A
l4021701A:
	branch a12 == 0x00000000 l402170AC
	// succ:  l4021701D l402170AC
l4021701D:
	v10 = Mem0[a12 + 0x0000001A:uint16]
	a4 = (uint32) v10
	branch a4 != 0x00000000 l4021702A
	// succ:  l40217022 l4021702A
l40217022:
	a5 = Mem0[a12 + 0x00000008:word32]
	a5 = a5 >>u 0x00000011 & 0x00000001
	branch a5 != 0x00000000 l402170AC
	// succ:  l4021702A l402170AC
l4021702A:
	a2 = a12
	a6 = 1
	a9 = Mem0[a1 + 0x00000008:word32]
	a3 = 0
	v15 = Mem0[a9 + 0x0000000D:byte]
	a8 = (uint32) v15
	v16 = Mem0[a9 + 0x0000000C:byte]
	a9 = (uint32) v16
	a8 = a8 << 24
	a8 = a8 | a9
	a7 = a8 >>u 0x00000008 & 0x000000FF
	a8 = a8 & 0x000000FF
	a8 = a8 << 24
	a7 = a7 | a8
	a8 = 0x40216FE0
	a7 = a7 & 0x0000FFFF
	a7 = a7 - a8
	branch a7 != 0x00000000 l40217056
	// succ:  l40217053_1 l40217056
l40217053_1:
	a3 = a6
	// succ:  l40217056
l40217056:
	Mem0[a1 + 0x00000004:word32] = a3
	a0 = 0x4021705B
	call fn40218104 (retsize: 0;)
	branch a2 == 0x00000000 l402170AC
	// succ:  l4021705E l402170AC
l4021705E:
	Mem0[a13 + 0x00000088:word32] = a12
	a2 = a12
	a3 = a14
	a0 = 0x40217068
	call fn4021787C (retsize: 0;)
	a3 = 1
	Mem0[a1:word32] = a2
	a4 = 0
	a2 = a14
	a0 = 0x40217073
	call sdk_esf_buf_alloc (retsize: 0;)
	a3 = a2
	branch a2 == 0x00000000 l402170AC
	// succ:  l40217077 l402170AC
l40217077:
	a5 = 4
	a10 = Mem0[a1 + 0x00000004:word32]
	a0 = 8
	branch a10 == 0x00000000 l4021709C
	// succ:  l4021707F l4021709C
l4021707F:
	a2 = Mem0[a2 + 0x00000020:word32]
	a4 = Mem0[a2 + 0x00000000:word32]
	a6 = a4 >>u 6
	a4 = a4 & 0x0000003F
	a6 = a6 | a5
	a6 = a6 << 26
	a4 = a4 | a6
	Mem0[a2:word32] = a4
	a11 = Mem0[a13 + 0x000000B0:word32]
	branch a11 != 0x00000000 l4021709C
	// succ:  l40217099 l4021709C
l40217099:
	Mem0[a2 + 0x0000000E:byte] = a0
	// succ:  l4021709C
l4021709C:
	a2 = a13
	a0 = 0x402170A1
	call fn402175D8 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a2
	branch a2 != 0x00000000 l402170BB
	// succ:  l402170A7 l402170BB
l402170A7:
	a3 = 1
	a0 = 0x402170AC
	call sdk_esf_buf_recycle (retsize: 0;)
	// succ:  l402170AC
l402170AC:
	a2 = 1
	a12 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x00000018:word32]
	a14 = Mem0[a1 + 0x0000001C:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_ieee80211_output_pbuf_exit
l402170BB:
	Mem0[a1 + 0x0000000C:word32] = a2
	a11 = 8
	a3 = 1
	a7 = Mem0[a2 + 0x00000020:word32]
	a8 = 0x402035F0
	a10 = Mem0[a7 + 0x00000000:word32]
	a6 = Mem0[a8 + 0x00000010:word32]
	a9 = a10 & 0x0000003F
	a6 = a6 - a13
	branch a6 == 0x00000000 l402170D3
	// succ:  l402170D0_1 l402170D3
l402170D0_1:
	a6 = a3
	// succ:  l402170D3
l402170D3:
	a10 = a10 >>u 6
	a10 = a10 | a11
	a3 = 0x0000008F
	v20 = Mem0[a7 + 0x00000006:byte]
	a11 = (uint32) v20
	a10 = a10 << 26
	a9 = a9 | a10
	a11 = a11 & a3
	Mem0[a7:word32] = a9
	a3 = a5 & 0x00000007
	branch a6 != 0x00000000 l402170F4
	// succ:  l402170EF l402170F4
l402170EF:
	a0 = 0
	goto l402170F7
	// succ:  l402170F7
l402170F4:
	v21 = Mem0[a12 + 0x0000001A:uint16]
	a0 = (uint32) v21
	// succ:  l402170F7
l402170F7:
	a10 = Mem0[a1 + 0x0000000C:word32]
	a3 = a3 << 28
	a11 = a11 | a3
	Mem0[a7 + 0x00000006:byte] = a11
	branch a5 == 0x00000000 l40217119
	// succ:  l40217104 l40217119
l40217104:
	branch a5 != 1 l4021710C
	// succ:  l40217107 l4021710C
l40217107:
	a5 = 5
	goto l4021711C
	// succ:  l4021711C
l4021710C:
	a7 = a5 - 3
	a4 = 1
	a5 = 0
	branch a7 != 0x00000000 l40217116
	// succ:  l40217113_1 l40217116
l40217113_1:
	a5 = a4
	// succ:  l40217116
l40217116:
	goto l4021711C
	// succ:  l4021711C
l40217119:
	a5 = 0x00000006
	// succ:  l4021711C
l4021711C:
	a9 = Mem0[a10 + 0x00000020:word32]
	a11 = a5 & 0x0000000F
	v22 = Mem0[a9 + 0x00000004:byte]
	a8 = (uint32) v22
	a3 = 0x000000F0
	a8 = a8 & a3
	a8 = a8 | a11
	Mem0[a9 + 0x00000004:byte] = a8
	a7 = 0x4021319C
	a5 = 0
	a3 = Mem0[a10 + 0x00000020:word32]
	a4 = 0x000000FE
	v23 = Mem0[a3 + 0x00000000:byte]
	a11 = (uint32) v23
	a7 = Mem0[a7 + 0x00000200:word32]
	Mem0[a3 + 0x00000010:word32] = a7
	a11 = a11 & a4
	Mem0[a3:byte] = a11
	a3 = 0x000000FD
	a10 = Mem0[a10 + 0x00000020:word32]
	a11 = a6 & 0x00000001
	v24 = Mem0[a10 + 0x00000000:byte]
	a9 = (uint32) v24
	a11 = a11 << 31
	a9 = a9 & a3
	a9 = a9 | a11
	Mem0[a10:byte] = a9
	v25 = Mem0[a12 + 0x0000001A:uint16]
	a8 = (uint32) v25
	branch a8 == 0x00000000 l40217252
	// succ:  l40217169 l40217252
l40217169:
	a4 = Mem0[a1 + 0x0000000C:word32]
	a4 = Mem0[a4 + 0x00000020:word32]
	a4 = Mem0[a4 + 0x00000000:word32]
	a4 = a4 >>u 0x00000007 & 0x00000001
	branch a4 != 0x00000000 l40217252
	// succ:  l40217175 l40217252
l40217175:
	a2 = a0 & 0x000000FF
	a0 = 0x4021717B
	call sdk_rc_get_trc_by_index (retsize: 0;)
	a5 = 0
	a6 = Mem0[a1 + 0x0000000C:word32]
	v26 = Mem0[a6 + 0x00000016:uint16]
	a10 = (uint32) v26
	v27 = Mem0[a6 + 0x00000014:uint16]
	a9 = (uint32) v27
	Mem0[a6 + 0x00000018:word32] = a2
	a9 = a9 + a10
	a8 = Mem0[a6 + 0x00000004:word32]
	a10 = 0x00000080
	v28 = Mem0[a8 + 0x00000003:byte]
	a7 = (uint32) v28
	a7 = a7 & 0x0000007F
	a7 = a7 | a10
	Mem0[a8 + 0x00000003:byte] = a7
	a4 = 0x000000BF
	a3 = 64
	v29 = Mem0[a8 + 0x00000003:byte]
	a0 = (uint32) v29
	a0 = a0 & a4
	a0 = a0 | a3
	Mem0[a8 + 0x00000003:byte] = a0
	a11 = 0x000000DF
	v30 = Mem0[a8 + 0x00000003:byte]
	a10 = (uint32) v30
	a10 = a10 & a11
	a10 = a10 | a5
	Mem0[a8 + 0x00000003:byte] = a10
	a9 = a9 & 0x00000FFF
	a9 = a9 << 20
	a10 = 0x40216FE4
	v31 = Mem0[a8 + 0x00000002:uint16]
	a7 = (uint32) v31
	a7 = a7 << 16
	v32 = Mem0[a8 + 0x00000000:uint16]
	a11 = (uint32) v32
	a7 = a7 | a11
	a7 = a7 & a10
	a7 = a7 | a9
	Mem0[a8:word16] = a7
	a7 = a7 >>u 0x00000010 & 0x0000FFFF
	a6 = Mem0[a6 + 0x00000020:word32]
	a6 = Mem0[a6 + 0x00000000:word32]
	Mem0[a8 + 0x00000002:word16] = a7
	branch (a6 & 0x00000100) != 0x00000000 l40217208
	// succ:  l40217203 l40217208
l40217203:
	a2 = a14
	a0 = 0x40217208
	call fn4030C31C (retsize: 0;)
	// succ:  l40217208
l40217208:
	a11 = Mem0[a12 + 0x00000008:word32]
	branch (a11 & 0x00000010) == 0x00000000 l40217222
	// succ:  l4021720E l40217222
l4021720E:
	a14 = Mem0[a13 + 0x000000B0:word32]
	branch a14 != 1 l40217222
	// succ:  l40217214 l40217222
l40217214:
	a2 = a12 | a12
	a3 = Mem0[a1 + 0x0000000C:word32]
	a0 = 0x4021721D
	call sdk_ieee80211_pwrsave (retsize: 0;)
	a2 = 0
	goto l402570AE
	// succ:  l402570AE
l40217222:
	a0 = 0x40217225
	call sdk_chm_check_same_channel (retsize: 0;)
	branch a2 == 0x00000000 l40217231
	// succ:  l40217228 l40217231
l40217228:
	a2 = Mem0[a1 + 0x0000000C:word32]
	a0 = 0x4021722E
	call sdk_ppTxPkt (retsize: 0;)
	goto l40217247
	// succ:  l40217247
l40217231:
	a2 = 0
	a6 = 0
	a4 = Mem0[a1 + 0x0000000C:word32]
	a3 = 0x402035F0
	a0 = a4 + 28
	a5 = Mem0[a3 + 0x000001C4:word32]
	Mem0[a4 + 0x0000001C:word32] = a6
	Mem0[a5:word32] = a4
	Mem0[a3 + 0x000001C4:word32] = a0
	// succ:  l40217247
l40217247:
	branch a2 == 0x00000000 l40217257
	// succ:  l40217249 l40217257
l40217249:
	a2 = a2 << 8
	a2 = a2 >> 24
	goto l402570AE
	// succ:  l402570AE
l40217252:
	a2 = a5
	goto l4025717D
	// succ:  l4025717D
l40217257:
	a3 = 0x402125CC
	a4 = 0x402035F0
	a3 = Mem0[a3 + 0x00000024:word32]
	Mem0[a4 + 0x00000164:word32] = a3
	goto l4025721D
	// succ:  l4025721D
l402570AE:
l4025717D:
l4025721D:
sdk_ieee80211_output_pbuf_exit:


// sdk_ieee80211_send_setup
// Return size: 0
void sdk_ieee80211_send_setup()
sdk_ieee80211_send_setup_entry:
	// succ:  l40217268
l40217268:
	a1 = fp
	a9 = 1
	a1 = a1 - 48
	Mem0[a1 + 0x00000004:word32] = a5
	Mem0[a1 + 0x0000000C:word32] = a12
	Mem0[a1 + 0x00000018:word32] = a15
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x00000020:word32] = a3
	Mem0[a1 + 0x00000010:word32] = a13
	Mem0[a1 + 0x00000014:word32] = a14
	a13 = a7
	a14 = a2
	a3 = 12
	a3 = a4 & a3
	v14 = Mem0[a14 + 0x000000B0:byte]
	a0 = (uint32) v14
	a15 = Mem0[a1 + 0x00000020:word32]
	a2 = a6
	a8 = Mem0[a14 + 0x00000088:word32]
	Mem0[a1 + 0x0000001C:word32] = a8
	Mem0[a1:word32] = a2
	a12 = Mem0[a15 + 0x00000010:word32]
	a7 = a0 << 8
	Mem0[a12:byte] = a4
	a4 = a7 >> 24
	branch a3 != 8 l402172D3
	// succ:  l402172A0 l402172D3
l402172A0:
	branch a0 == 0x00000000 l40217367
	// succ:  l402172A3 l40217367
l402172A3:
	branch a4 != 1 l40217304
	// succ:  l402172A6 l40217304
l402172A6:
	a2 = a12 + 4
	a4 = 2
	a3 = a13
	Mem0[a12 + 0x00000001:byte] = a4
	a4 = 6
	a0 = 0x40203130
	v17 = a0
	a0 = 0x402172B7
	call v17 (retsize: 0;)
	a2 = a12 + 10
	a4 = 6
	a3 = Mem0[a1 + 0x00000030:word32]
	a0 = 0x40203130
	v18 = a0
	a0 = 0x402172C3
	call v18 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = a12 + 16
	a4 = 6
	a0 = 0x40203130
	v19 = a0
	a0 = 0x402172D0
	call v19 (retsize: 0;)
	goto l40217304
	// succ:  l40217304
l402172D3:
	branch a0 != 0x00000000 l402172DA
	// succ:  l402172D5 l402172DA
l402172D5:
	a4 = Mem0[a14 + 0x0000008C:word32]
	Mem0[a1 + 0x0000001C:word32] = a4
	// succ:  l402172DA
l402172DA:
	a2 = a12 + 4
	a3 = a13
	a4 = 6
	a5 = 0
	Mem0[a12 + 0x00000001:byte] = a5
	a0 = 0x40203130
	v20 = a0
	a0 = 0x402172EB
	call v20 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = a12 + 10
	a4 = 6
	a0 = 0x40203130
	v21 = a0
	a0 = 0x402172F7
	call v21 (retsize: 0;)
	a2 = a12 + 16
	a4 = 6
	a3 = Mem0[a1 + 0x00000030:word32]
	a0 = 0x40203130
	v22 = a0
	a0 = 0x40217304
	call v22 (retsize: 0;)
	// succ:  l40217304
l40217304:
	a4 = 0
	Mem0[a12 + 0x00000002:word16] = a4
	branch a14 == 0x00000000 l40217320
	// succ:  l4021730B l40217320
l4021730B:
	a8 = Mem0[a1 + 0x0000001C:word32]
	a7 = Mem0[a1 + 0x00000004:word32]
	a7 = a8 + a7 * 0x00000002
	v23 = Mem0[a7 + 0x0000007C:uint16]
	a5 = (uint32) v23
	a6 = a5 + 1
	Mem0[a7 + 0x0000007C:word16] = a6
	a5 = a5 << 28
	Mem0[a12 + 0x00000016:word16] = a5
	// succ:  l40217320
l40217320:
	a0 = Mem0[a15 + 0x00000020:word32]
	v27 = Mem0[a13 + 0x00000000:byte]
	a9 = (uint32) v27
	a15 = Mem0[a1 + 0x00000018:word32]
	branch (a9 & 0x00000001) == 0x00000000 l40217351
	// succ:  l4021732A l40217351
l4021732A:
	a12 = 0x00000400
	a13 = Mem0[a0 + 0x00000000:word32]
	a14 = 2
	a11 = a13 & 0x0000003F
	a13 = a13 >>u 6
	a13 = a13 | a14
	a13 = a13 << 26
	a11 = a11 | a13
	a10 = a11 & 0x0000003F
	a11 = a11 >>u 6
	a11 = a11 | a12
	a11 = a11 << 26
	a10 = a10 | a11
	Mem0[a0:word32] = a10
	// succ:  l40217351
l40217351:
	a12 = Mem0[a1 + 0x0000000C:word32]
	a14 = 0x402035F0
	a13 = Mem0[a1 + 0x00000010:word32]
	v30 = Mem0[a14 + 0x0000007D:byte]
	a14 = (uint32) v30
	Mem0[a0 + 0x00000008:byte] = a14
	a14 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_ieee80211_send_setup_exit
l40217367:
	Mem0[a12 + 0x00000001:byte] = a9
	a3 = Mem0[a1 + 0x00000030:word32]
	a2 = a12 + 4
	a4 = 6
	a0 = 0x40203130
	v24 = a0
	a0 = 0x40217376
	call v24 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = a12 + 10
	a4 = 6
	a0 = 0x40203130
	v25 = a0
	a0 = 0x40217382
	call v25 (retsize: 0;)
	a2 = a12 + 16
	a3 = a13
	a4 = 6
	a0 = 0x40203130
	v26 = a0
	a0 = 0x4021738F
	call v26 (retsize: 0;)
	// succ:  l40257304
l40257304:
sdk_ieee80211_send_setup_exit:


// sdk_ieee80211_mgmt_output
// Return size: 0
void sdk_ieee80211_mgmt_output()
sdk_ieee80211_mgmt_output_entry:
	// succ:  l40217394
l40217394:
	a1 = fp
	a9 = 64
	a1 = a1 - 32
	a8 = 0x00000080
	a6 = Mem0[a2 + 0x00000000:word32]
	a7 = Mem0[a2 + 0x00000088:word32]
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a0
	a12 = a3
	v11 = Mem0[a3 + 0x00000016:uint16]
	a3 = (uint32) v11
	v12 = Mem0[a12 + 0x00000014:uint16]
	a0 = (uint32) v12
	a11 = Mem0[a12 + 0x00000004:word32]
	a0 = a0 + a3
	v15 = Mem0[a11 + 0x00000003:byte]
	a5 = (uint32) v15
	a5 = a5 & 0x0000007F
	a5 = a5 | a8
	Mem0[a11 + 0x00000003:byte] = a5
	a3 = 0x000000BF
	v16 = Mem0[a11 + 0x00000003:byte]
	a8 = (uint32) v16
	a8 = a8 & a3
	a8 = a8 | a9
	Mem0[a11 + 0x00000003:byte] = a8
	a5 = 0x000000DF
	v17 = Mem0[a11 + 0x00000003:byte]
	a3 = (uint32) v17
	a3 = a3 & a5
	Mem0[a11 + 0x00000003:byte] = a3
	a0 = a0 & 0x00000FFF
	a3 = 0x40216FE4
	a0 = a0 << 20
	v18 = Mem0[a11 + 0x00000002:uint16]
	a8 = (uint32) v18
	a8 = a8 << 16
	v19 = Mem0[a11 + 0x00000000:uint16]
	a5 = (uint32) v19
	a8 = a8 | a5
	a8 = a8 & a3
	a8 = a8 | a0
	Mem0[a11:word16] = a8
	a8 = a8 >>u 0x00000010 & 0x0000FFFF
	a6 = a6 + 41
	a0 = Mem0[a2 + 0x000000B0:word32]
	a3 = Mem0[a12 + 0x00000010:word32]
	Mem0[a1 + 0x00000010:word32] = a3
	Mem0[a11 + 0x00000002:word16] = a8
	branch a0 != 0x00000000 l40217432
	// succ:  l40217426 l40217432
l40217426:
	Mem0[a1:word32] = a7
	a3 = a12
	a5 = 16
	a0 = 0x4021742F
	call fn40317268 (retsize: 0;)
	goto l40217449
	// succ:  l40217449
l40217432:
	a8 = 0x40215990
	v20 = Mem0[a7 + 0x0000001A:uint16]
	a5 = (uint32) v20
	branch (a5 & a8) != 0x00000000 l4021743E
	// succ:  l4021743B l4021743E
l4021743B:
	a7 = a2 + 64
	// succ:  l4021743E
l4021743E:
	Mem0[a1:word32] = a6
	a3 = a12 | a12
	a5 = 16
	a0 = 0x40217449
	call fn40317268 (retsize: 0;)
	// succ:  l40217449
l40217449:
	a9 = Mem0[a12 + 0x00000020:word32]
	a11 = Mem0[a1 + 0x00000010:word32]
	a9 = Mem0[a9 + 0x00000000:word32]
	a0 = 64
	branch (a9 & 0x00000040) == 0x00000000 l4021745D
	// succ:  l40217454 l4021745D
l40217454:
	v22 = Mem0[a11 + 0x00000001:byte]
	a10 = (uint32) v22
	a10 = a10 | a0
	Mem0[a11 + 0x00000001:byte] = a10
	// succ:  l4021745D
l4021745D:
	a0 = 0x40217460
	call sdk_chm_check_same_channel (retsize: 0;)
	branch a2 == 0x00000000 l4021746A
	// succ:  l40217462 l4021746A
l40217462:
	a2 = a12
	a0 = 0x40217467
	call sdk_ppTxPkt (retsize: 0;)
	goto l4021747E
	// succ:  l4021747E
l4021746A:
	a2 = 0
	a3 = a12 + 28
	a4 = 0x402035F0
	a6 = 0
	a5 = Mem0[a4 + 0x000001C4:word32]
	Mem0[a12 + 0x0000001C:word32] = a6
	Mem0[a5:word32] = a12
	Mem0[a4 + 0x000001C4:word32] = a3
	// succ:  l4021747E
l4021747E:
	a12 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_ieee80211_mgmt_output_exit
sdk_ieee80211_mgmt_output_exit:


// sdk_ieee80211_tx_mgt_cb
// Return size: 0
void sdk_ieee80211_tx_mgt_cb()
sdk_ieee80211_tx_mgt_cb_entry:
	// succ:  l40217488
l40217488:
	a1 = fp
	return
	// succ:  sdk_ieee80211_tx_mgt_cb_exit
sdk_ieee80211_tx_mgt_cb_exit:


// sdk_ieee80211_send_nulldata
// Return size: 0
void sdk_ieee80211_send_nulldata()
sdk_ieee80211_send_nulldata_entry:
	// succ:  l4021748C
l4021748C:
	a1 = fp
	a3 = 0x00000018
	a5 = 0x00000042
	a1 = a1 - 48
	Mem0[a1 + 0x00000020:word32] = a12
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000028:word32] = a14
	a13 = Mem0[a2 + 0x00000088:word32]
	a14 = a2
	a0 = Mem0[a14 + 0x00000000:word32]
	Mem0[a1 + 0x00000014:word32] = a0
	a4 = Mem0[a13 + 0x00000008:word32]
	a2 = 26
	a4 = a4 & a5
	branch a4 == 0x00000000 l402174B3
	// succ:  l402174B0_1 l402174B3
l402174B0_1:
	a3 = a2
	// succ:  l402174B3
l402174B3:
	Mem0[a1 + 0x00000018:word32] = a3
	a2 = a1 + 16
	a4 = 0
	Mem0[a1 + 0x00000010:word32] = a4
	a0 = 0x402174BF
	call sdk_ieee80211_getmgtframe (retsize: 0;)
	a12 = a2
	branch a2 != 0x00000000 l402174C8
	// succ:  l402174C3 l402174C8
l402174C3:
	a2 = 1
	goto l402175BD
	// succ:  l402175BD
l402174C8:
	a15 = Mem0[a2 + 0x00000010:word32]
	a6 = Mem0[a1 + 0x00000014:word32]
	a8 = Mem0[a13 + 0x00000008:word32]
	a7 = Mem0[a1 + 0x00000018:word32]
	Mem0[a2 + 0x00000014:word16] = a7
	a6 = a6 + 41
	a7 = a14 + 64
	branch (a8 & 0x00000002) == 0x00000000 l402174FF
	// succ:  l402174DC l402174FF
l402174DC:
	Mem0[a1:word32] = a13
	a2 = a14
	a3 = a12
	a4 = 0x000000C8
	a5 = 0
	a0 = 0x402174EA
	call fn40317268 (retsize: 0;)
	a2 = 0
	Mem0[a15 + 0x00000018:byte] = a2
	v15 = Mem0[a13 + 0x00000069:byte]
	a8 = (uint32) v15
	a0 = 32
	branch a8 == 0x00000000 l402174F9
	// succ:  l402174F6 l402174F9
l402174F6:
	Mem0[a15 + 0x00000018:byte] = a0
	// succ:  l402174F9
l402174F9:
	Mem0[a15 + 0x00000019:byte] = a2
	goto l4021750E
	// succ:  l4021750E
l402174FF:
	Mem0[a1:word32] = a13
	a2 = a14
	a3 = a12
	a4 = 72
	a5 = 16
	a0 = 0x4021750C
	call fn40317268 (retsize: 0;)
	a0 = 32
	// succ:  l4021750E
l4021750E:
	a3 = 16
	a9 = Mem0[a13 + 0x00000008:word32]
	a4 = 0x402035F0
	branch (a9 & 0x00000010) == 0x00000000 l40217521
	// succ:  l40217518 l40217521
l40217518:
	v18 = Mem0[a15 + 0x00000001:byte]
	a10 = (uint32) v18
	a10 = a10 | a3
	Mem0[a15 + 0x00000001:byte] = a10
	// succ:  l40217521
l40217521:
	a15 = 0
	a11 = 1
	a7 = Mem0[a12 + 0x00000020:word32]
	a2 = Mem0[a4 + 0x00000010:word32]
	v20 = Mem0[a7 + 0x00000006:byte]
	a6 = (uint32) v20
	a2 = a2 - a14
	branch a2 == 0x00000000 l40217532
	// succ:  l4021752F_1 l40217532
l4021752F_1:
	a2 = a11
	// succ:  l40217532
l40217532:
	branch a2 != 0x00000000 l40217539
	// succ:  l40217534 l40217539
l40217534:
	a3 = 0
	goto l4021753C
	// succ:  l4021753C
l40217539:
	v25 = Mem0[a13 + 0x0000001A:uint16]
	a3 = (uint32) v25
	// succ:  l4021753C
l4021753C:
	a8 = 0x0000008F
	a6 = a6 & a8
	a6 = a6 | a0
	Mem0[a7 + 0x00000006:byte] = a6
	a4 = Mem0[a12 + 0x00000020:word32]
	v21 = Mem0[a4 + 0x00000004:byte]
	a14 = (uint32) v21
	a5 = 0x000000F0
	a14 = a14 & a5
	Mem0[a4 + 0x00000004:byte] = a14
	a11 = 0x4021319C
	a9 = Mem0[a12 + 0x00000020:word32]
	a11 = Mem0[a11 + 0x00000200:word32]
	a10 = 0x000000FE
	a7 = a2 & 0x00000001
	v22 = Mem0[a9 + 0x00000000:byte]
	a8 = (uint32) v22
	a7 = a7 << 31
	a8 = a8 & a10
	Mem0[a9:byte] = a8
	a6 = Mem0[a12 + 0x00000020:word32]
	Mem0[a9 + 0x00000010:word32] = a11
	v23 = Mem0[a6 + 0x00000000:byte]
	a5 = (uint32) v23
	a8 = 0x000000FD
	a5 = a5 & a8
	a5 = a5 | a7
	Mem0[a6:byte] = a5
	v24 = Mem0[a13 + 0x0000001A:uint16]
	a4 = (uint32) v24
	a2 = a15
	branch a4 == 0x00000000 l402175CC
	// succ:  l4021758F l402175CC
l4021758F:
	a9 = Mem0[a12 + 0x00000020:word32]
	a9 = Mem0[a9 + 0x00000000:word32]
	branch (a9 & 0x00000080) != 0x00000000 l402175CC
	// succ:  l40217596 l402175CC
l40217596:
	a2 = a3 & 0x000000FF
	a0 = 0x4021759C
	call sdk_rc_get_trc_by_index (retsize: 0;)
	Mem0[a12 + 0x00000018:word32] = a2
	a0 = 0x402175A1
	call sdk_chm_check_same_channel (retsize: 0;)
	branch a2 == 0x00000000 l402175AB
	// succ:  l402175A3 l402175AB
l402175A3:
	a2 = a12
	a0 = 0x402175A8
	call sdk_ppTxPkt (retsize: 0;)
	goto l402175BD
	// succ:  l402175BD
l402175AB:
	a2 = 0
	a11 = 0x402035F0
	a10 = a12 + 28
	a13 = Mem0[a11 + 0x000001C4:word32]
	Mem0[a12 + 0x0000001C:word32] = a15
	Mem0[a13:word32] = a12
	Mem0[a11 + 0x000001C4:word32] = a10
	// succ:  l402175BD
l402175BD:
	a12 = Mem0[a1 + 0x00000020:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000028:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a0 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_ieee80211_send_nulldata_exit
l402175CC:
	// succ:  l4025759C
l4025759C:
sdk_ieee80211_send_nulldata_exit:


// fn402175D8
// Return size: 0
void fn402175D8()
fn402175D8_entry:
	// succ:  l402175D8
l402175D8:
	a1 = fp
	a4 = 14
	a1 = a1 - 64
	Mem0[a1 + 0x00000034:word32] = a2
	Mem0[a1 + 0x00000014:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a12
	Mem0[a1 + 0x0000002C:word32] = a14
	Mem0[a1 + 0x00000030:word32] = a15
	Mem0[a1 + 0x00000028:word32] = a13
	a15 = a2
	a13 = Mem0[a2 + 0x00000088:word32]
	v10 = Mem0[a2 + 0x000000B0:byte]
	a14 = (uint32) v10
	a12 = a3
	a0 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000010:word32] = a0
	a3 = Mem0[a3 + 0x00000004:word32]
	a14 = a14 << 8
	a3 = Mem0[a3 + 0x00000004:word32]
	a14 = a14 >> 24
	a2 = a1
	a0 = 0x40203130
	v12 = a0
	a0 = 0x40217609
	call v12 (retsize: 0;)
	a7 = 2
	a6 = 0x402175D0
	a3 = Mem0[a12 + 0x00000004:word32]
	v15 = Mem0[a12 + 0x00000016:uint16]
	a4 = (uint32) v15
	a5 = Mem0[a3 + 0x00000004:word32]
	a4 = a4 + a6
	a5 = a5 + 14
	Mem0[a3 + 0x00000004:word32] = a5
	Mem0[a12 + 0x00000016:word16] = a4
	a4 = 0
	branch a14 != 1 l4021763E
	// succ:  l40217623 l4021763E
l40217623:
	v18 = Mem0[a1 + 0x00000000:byte]
	a9 = (uint32) v18
	branch (a9 & 0x00000001) == 0x00000000 l4021763E
	// succ:  l40217629 l4021763E
l40217629:
	a11 = Mem0[a12 + 0x00000020:word32]
	a0 = Mem0[a11 + 0x00000000:word32]
	a10 = a0 & 0x0000003F
	a0 = a0 >>u 6
	a0 = a0 | a7
	a0 = a0 << 26
	a10 = a10 | a0
	Mem0[a11:word32] = a10
	// succ:  l4021763E
l4021763E:
	a0 = 0
	a11 = 0xFFFFFFAA
	a9 = 26
	a8 = 24
	Mem0[a1 + 0x00000020:word32] = a4
	a2 = Mem0[a13 + 0x00000008:word32]
	a4 = 0x000000AA
	branch (a2 & 0x00000002) == 0x00000000 l4021765C
	// succ:  l40217651 l4021765C
l40217651:
	a5 = Mem0[a12 + 0x00000020:word32]
	a5 = Mem0[a5 + 0x00000000:word32]
	a6 = 1
	branch (a5 & 0x00000100) != 0x00000000 l4021765C
	// succ:  l4021765A l4021765C
l4021765A:
	Mem0[a1 + 0x00000020:word32] = a6
	// succ:  l4021765C
l4021765C:
	a5 = 3
	a10 = Mem0[a1 + 0x00000020:word32]
	v22 = Mem0[a12 + 0x00000016:uint16]
	a6 = (uint32) v22
	branch a10 == 0x00000000 l40217666
	// succ:  l40217663_1 l40217666
l40217663_1:
	a8 = a9
	// succ:  l40217666
l40217666:
	a6 = a6 + 8
	a10 = Mem0[a3 + 0x00000004:word32]
	Mem0[a12 + 0x00000014:word16] = a8
	a2 = a10 - 8
	Mem0[a3 + 0x00000004:word32] = a2
	a10 = a10 - 2
	Mem0[a12 + 0x00000016:word16] = a6
	a6 = 8
	Mem0[a2 + 0x00000001:byte] = a11
	Mem0[a2:byte] = a4
	Mem0[a2 + 0x00000002:byte] = a5
	Mem0[a2 + 0x00000003:byte] = a0
	Mem0[a2 + 0x00000004:byte] = a0
	Mem0[a2 + 0x00000005:byte] = a0
	a8 = Mem0[a13 + 0x00000008:word32]
	v23 = Mem0[a1 + 0x0000000C:uint16]
	a9 = (uint32) v23
	Mem0[a10:byte] = a9
	a9 = a9 >>u 8
	Mem0[a10 + 0x00000001:byte] = a9
	branch (a8 & 0x00000001) == 0x00000000 l402176BE
	// succ:  l4021769D l402176BE
l4021769D:
	a11 = Mem0[a15 + 0x00000048:word32]
	branch (a11 & 0x00000010) == 0x00000000 l402176BE
	// succ:  l402176A3 l402176BE
l402176A3:
	a2 = Mem0[a12 + 0x00000020:word32]
	a2 = Mem0[a2 + 0x00000000:word32]
	branch (a2 & 0x00000100) == 0x00000000 l40217709
	// succ:  l402176AA l40217709
l402176AA:
	a3 = Mem0[a12 + 0x00000004:word32]
	a4 = Mem0[a3 + 0x00000004:word32]
	v24 = Mem0[a4 + 0x0000000E:byte]
	a4 = (uint32) v24
	a5 = 0
	branch (a4 & 0x00000008) == 0x00000000 l40217709
	// succ:  l402176B9 l40217709
l402176B9:
	Mem0[a1 + 0x0000001C:word32] = a5
	goto l402176C4
	// succ:  l402176C4
l402176BE:
	Mem0[a1 + 0x0000001C:word32] = a0
	a3 = Mem0[a12 + 0x00000004:word32]
	// succ:  l402176C4
l402176C4:
	a2 = 0x402175D4
	v25 = Mem0[a12 + 0x00000016:uint16]
	a10 = (uint32) v25
	a11 = Mem0[a3 + 0x00000004:word32]
	a10 = a10 + 24
	a10 = a10 + a2
	a11 = a11 - 24
	Mem0[a3 + 0x00000004:word32] = a11
	Mem0[a12 + 0x00000010:word32] = a11
	a9 = Mem0[a3 + 0x00000004:word32]
	Mem0[a1 + 0x00000018:word32] = a9
	Mem0[a12 + 0x00000016:word16] = a10
	Mem0[a9:byte] = a6
	Mem0[a9 + 0x00000002:word16] = a0
	branch a14 == 0x00000000 l40217720
	// succ:  l402176E8 l40217720
l402176E8:
	a2 = a14 - 1
	branch a2 == 0x00000000 l40217827
	// succ:  l402176ED l40217827
l402176ED:
	branch a12 == 0x00000000 l402176F6
	// succ:  l402176EF l402176F6
l402176EF:
	a2 = a12
	a3 = 1
	a0 = 0x402176F6
	call sdk_esf_buf_recycle (retsize: 0;)
	// succ:  l402176F6
l402176F6:
	a12 = 0
	a0 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x00000028:word32]
	a14 = Mem0[a1 + 0x0000002C:word32]
	a2 = a12
	a15 = Mem0[a1 + 0x00000030:word32]
	a12 = Mem0[a1 + 0x00000024:word32]
	a1 = a1 + 64
	return
	// succ:  fn402175D8_exit
l40217709:
	a2 = a15 | a15
	a3 = a12 | a12
	a0 = 0x40217712
	call fn40314C60 (retsize: 0;)
	a0 = 0x00000000
	a6 = 8
	a7 = 2
	Mem0[a1 + 0x0000001C:word32] = a2
	a3 = Mem0[a12 + 0x00000004:word32]
	goto l402576C4
	// succ:  l402576C4
l40217720:
	a14 = 0
	a2 = Mem0[a1 + 0x00000018:word32]
	a3 = 1
	a4 = 6
	Mem0[a2 + 0x00000001:byte] = a3
	a2 = a2 + 4
	a3 = a13
	a0 = 0x40203130
	v29 = a0
	a0 = 0x40217735
	call v29 (retsize: 0;)
	a3 = a1 + 6
	a2 = Mem0[a1 + 0x00000018:word32]
	a4 = 6
	a2 = a2 + 10
	a0 = 0x40203130
	v30 = a0
	a0 = 0x40217743
	call v30 (retsize: 0;)
	a3 = a1
	a2 = Mem0[a1 + 0x00000018:word32]
	a4 = 6
	a2 = a2 + 16
	a0 = 0x40203130
	v31 = a0
	a0 = 0x40217752
	call v31 (retsize: 0;)
	a3 = Mem0[a12 + 0x00000020:word32]
	a6 = 32
	a3 = Mem0[a3 + 0x00000000:word32]
	a8 = 0x00000080
	branch (a3 & 0x00400000) == 0x00000000 l40217769
	// succ:  l4021775E l40217769
l4021775E:
	a5 = Mem0[a1 + 0x00000018:word32]
	v32 = Mem0[a5 + 0x00000001:byte]
	a4 = (uint32) v32
	a4 = a4 | a6
	Mem0[a5 + 0x00000001:byte] = a4
	// succ:  l40217769
l40217769:
	a5 = Mem0[a1 + 0x00000020:word32]
	branch a5 == 0x00000000 l4021786D
	// succ:  l4021776E l4021786D
l4021776E:
	a0 = Mem0[a12 + 0x00000020:word32]
	v33 = Mem0[a0 + 0x00000006:byte]
	a0 = (uint32) v33
	a0 = a0 >>u 0x00000004 & 0x00000007
	branch a0 == 0x00000000 l4021778D
	// succ:  l40217778 l4021778D
l40217778:
	branch a0 != 1 l40217780
	// succ:  l4021777B l40217780
l4021777B:
	a3 = 5
	goto l4021778F
	// succ:  l4021778F
l40217780:
	a4 = a0 - 3
	a2 = 1
	a3 = 0
	branch a4 != 0x00000000 l4021778A
	// succ:  l40217787_1 l4021778A
l40217787_1:
	a3 = a2
	// succ:  l4021778A
l4021778A:
	goto l4021778F
	// succ:  l4021778F
l4021778D:
	a3 = 6
	// succ:  l4021778F
l4021778F:
	a5 = a0 + a0 * 0x00000002
	a5 = a13 + a5 * 0x00000002
	a0 = a3 & 0x0000000F
	Mem0[a14:byte] = a0
	v35 = Mem0[a5 + 0x0000005D:byte]
	a5 = (uint32) v35
	branch a5 == 0x00000000 l402177A6
	// succ:  l402177A0 l402177A6
l402177A0:
	a7 = a0 | a6
	Mem0[a14:byte] = a7
	// succ:  l402177A6
l402177A6:
	a0 = Mem0[a1 + 0x00000018:word32]
	Mem0[a14 + 0x00000001:byte] = a14
	v36 = Mem0[a0 + 0x00000000:byte]
	a11 = (uint32) v36
	a10 = a13 + a3 * 0x00000002
	a11 = a11 | a8
	Mem0[a0:byte] = a11
	v37 = Mem0[a10 + 0x0000007C:uint16]
	a3 = (uint32) v37
	a9 = a3 + 1
	Mem0[a10 + 0x0000007C:word16] = a9
	a9 = 0x000000F0
	a13 = Mem0[a1 + 0x0000001C:word32]
	a14 = a3 << 28
	a0 = Mem0[a1 + 0x00000018:word32]
	a3 = 0x402035F0
	Mem0[a0 + 0x00000016:word16] = a14
	branch a13 == 0x00000000 l40217862
	// succ:  l402177D2 l40217862
l402177D2:
	a6 = 1
	a11 = Mem0[a1 + 0x00000018:word32]
	a7 = Mem0[a1 + 0x0000001C:word32]
	v38 = Mem0[a11 + 0x00000001:byte]
	a10 = (uint32) v38
	a13 = 64
	a10 = a10 | a13
	Mem0[a11 + 0x00000001:byte] = a10
	a0 = Mem0[a12 + 0x00000020:word32]
	a2 = Mem0[a3 + 0x00000014:word32]
	a5 = Mem0[a0 + 0x00000000:word32]
	v39 = Mem0[a7 + 0x00000000:uint16]
	a7 = (uint32) v39
	a4 = a5 & 0x0000003F
	a5 = a5 >>u 6
	a5 = a5 | a6
	a5 = a5 << 26
	a4 = a4 | a5
	Mem0[a0:word32] = a4
	branch a2 != a15 l4021785D
	// succ:  l40217800 l4021785D
l40217800:
	a5 = a7 | a8
	a4 = Mem0[a1 + 0x0000001C:word32]
	Mem0[a0 + 0x0000000C:byte] = a5
	a4 = Mem0[a4 + 0x00000098:word32]
	v40 = Mem0[a0 + 0x0000000D:byte]
	a2 = (uint32) v40
	a4 = Mem0[a4 + 0x00000000:word32]
	a2 = a2 & a9
	a4 = a4 & 0x0000000F
	a2 = a2 | a4
	Mem0[a0 + 0x0000000D:byte] = a2
	a6 = Mem0[a12 + 0x00000020:word32]
	v41 = Mem0[a3 + 0x0000007C:byte]
	a5 = (uint32) v41
	Mem0[a6 + 0x00000008:byte] = a5
	goto l402576F8
	// succ:  l402576F8
l40217827:
	a14 = Mem0[a1 + 0x00000010:word32]
	a3 = a1
	a2 = Mem0[a1 + 0x00000018:word32]
	a4 = 6
	Mem0[a2 + 0x00000001:byte] = a7
	a2 = a2 + 4
	a0 = 0x40203130
	v26 = a0
	a0 = 0x4021783A
	call v26 (retsize: 0;)
	a3 = a14 + 41
	a2 = Mem0[a1 + 0x00000018:word32]
	a4 = 6
	a2 = a2 + 10
	a0 = 0x40203130
	v27 = a0
	a0 = 0x40217849
	call v27 (retsize: 0;)
	a14 = 0
	a3 = a1 + 6
	a2 = Mem0[a1 + 0x00000018:word32]
	a4 = 6
	a2 = a2 + 16
	a0 = 0x40203130
	v28 = a0
	a0 = 0x4021785A
	call v28 (retsize: 0;)
	goto l40257752
	// succ:  l40257752
l4021785D:
	a5 = a7
	goto l40257803
	// succ:  l40257803
l40217862:
	a0 = Mem0[a12 + 0x00000020:word32]
	v42 = Mem0[a0 + 0x0000000D:byte]
	a2 = (uint32) v42
	a2 = a2 & a9
	goto l40257819
	// succ:  l40257819
l4021786D:
	v34 = Mem0[a13 + 0x0000009C:uint16]
	a3 = (uint32) v34
	a4 = a3 + 1
	Mem0[a13 + 0x0000009C:word16] = a4
	goto l402577BF
	// succ:  l402577BF
l402576C4:
l402576F8:
l40257752:
l402577BF:
l40257803:
l40257819:
fn402175D8_exit:


// fn4021787C
// Return size: 0
void fn4021787C()
fn4021787C_entry:
	// succ:  l4021787C
l4021787C:
	a1 = fp
	a6 = Mem0[a3 + 0x00000004:word32]
	a4 = 0x4021516C
	v7 = Mem0[a6 + 0x0000000D:byte]
	a5 = (uint32) v7
	v9 = Mem0[a6 + 0x0000000C:byte]
	a7 = (uint32) v9
	a5 = a5 << 24
	a3 = a5 | a7
	branch a3 != a4 l40217895
	// succ:  l40217890 l40217895
l40217890:
	a3 = 0
	goto l4021789C
	// succ:  l4021789C
l40217895:
	a7 = Mem0[a2 + 0x00000008:word32]
	branch (a7 & 0x00000002) != 0x00000000 l402178A0
	// succ:  l4021789A l402178A0
l4021789A:
	a3 = 2
	// succ:  l4021789C
l4021789C:
	a2 = a3
	return
	// succ:  fn4021787C_exit
l402178A0:
	branch a3 != 8 l402178BB
	// succ:  l402178A3 l402178BB
l402178A3:
	v11 = Mem0[a6 + 0x0000000E:byte]
	a5 = (uint32) v11
	a5 = a5 >>u 5
	branch a5 == 0x00000000 l402178DC
	// succ:  l402178AB l402178DC
l402178AB:
	branch a5 == 3 l402178DC
	// succ:  l402178AE l402178DC
l402178AE:
	branch a5 <u 0x00000003 l402178D7
	// succ:  l402178B1 l402178D7
l402178B1:
	a3 = 1
	branch a5 <u 0x00000006 l402178BD
	// succ:  l402178B6 l402178BD
l402178B6:
	a3 = 0
	goto l402178BD
	// succ:  l402178BD
l402178BB:
	a3 = 2
	// succ:  l402178BD
l402178BD:
	a5 = 0x40217878
	branch a3 == 3 l4021789C
	// succ:  l402178C3 l4021789C
l402178C3:
	a6 = a3 + a3 * 0x00000002
	a6 = a2 + a6 * 0x00000002
	v12 = Mem0[a6 + 0x00000058:byte]
	a6 = (uint32) v12
	branch a6 == 0x00000000 l4021789C
	// succ:  l402178CF l4021789C
l402178CF:
	a3 = a3 + a5
	v13 = Mem0[a3 + 0x00000000:byte]
	a3 = (uint32) v13
	goto l402578C0
	// succ:  l402578C0
l402178D7:
	a3 = 3
	goto l402578BD
	// succ:  l402578BD
l402178DC:
	a3 = 2
	// succ:  l402578BD
l402578BD:
l402578C0:
fn4021787C_exit:


// sdk_ieee80211_add_rates
// Return size: 0
void sdk_ieee80211_add_rates()
sdk_ieee80211_add_rates_entry:
	// succ:  l402178E4
l402178E4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	a0 = 1
	Mem0[a2:byte] = a0
	v7 = Mem0[a3 + 0x00000000:byte]
	a0 = (uint32) v7
	a13 = 8
	branch a13 < a0 l402178FE
	// succ:  l402178FC l402178FE
l402178FC:
	a13 = a0
	// succ:  l402178FE
l402178FE:
	Mem0[a12 + 0x00000001:byte] = a13
	a3 = a3 + 1
	a2 = a12 + 2
	a4 = a13
	a0 = 0x40203130
	v10 = a0
	a0 = 0x4021790D
	call v10 (retsize: 0;)
	a2 = a13 + a12
	a0 = Mem0[a1 + 0x00000000:word32]
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a2 = a2 + 2
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_add_rates_exit
sdk_ieee80211_add_rates_exit:


// sdk_ieee80211_add_xrates
// Return size: 0
void sdk_ieee80211_add_xrates()
sdk_ieee80211_add_xrates_entry:
	// succ:  l4021791C
l4021791C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a0
	a12 = a2
	v6 = Mem0[a3 + 0x00000000:byte]
	a0 = (uint32) v6
	a2 = 8
	branch a2 >=u a0 l4021794A
	// succ:  l4021792D l4021794A
l4021792D:
	a3 = a3 + 9
	a2 = a12 + 2
	a5 = 50
	a4 = a0 - 8
	Mem0[a1:word32] = a4
	Mem0[a12:byte] = a5
	Mem0[a12 + 0x00000001:byte] = a4
	a0 = 0x40203130
	v10 = a0
	a0 = 0x40217944
	call v10 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a12 = a0 + a12
	a12 = a12 + 2
	// succ:  l4021794A
l4021794A:
	a2 = a12
	a0 = Mem0[a1 + 0x00000004:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_add_xrates_exit
sdk_ieee80211_add_xrates_exit:


// sdk_ieee80211_send_probereq
// Return size: 0
void sdk_ieee80211_send_probereq()
sdk_ieee80211_send_probereq_entry:
	// succ:  l402179B8
l402179B8:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000034:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a3
	Mem0[a1 + 0x0000001C:word32] = a5
	Mem0[a1 + 0x00000018:word32] = a6
	Mem0[a1 + 0x00000014:word32] = a7
	Mem0[a1 + 0x00000030:word32] = a0
	a0 = 0x402035F0
	Mem0[a1 + 0x00000020:word32] = a4
	a2 = Mem0[a0 + 0x00000168:word32]
	a9 = Mem0[a0 + 0x00000010:word32]
	branch a2 != 0x00000000 l402179D8
	// succ:  l402179D3 l402179D8
l402179D3:
	a4 = 53
	goto l402179DE
	// succ:  l402179DE
l402179D8:
	v12 = Mem0[a2 + 0x00000000:uint16]
	a4 = (uint32) v12
	a4 = a4 + 53
	// succ:  l402179DE
l402179DE:
	a2 = a1 + 16
	a3 = 0x00000018
	Mem0[a1 + 0x0000002C:word32] = a9
	a0 = 0x402179EA
	call sdk_ieee80211_getmgtframe (retsize: 0;)
	a12 = a2 | a2
	branch a2 != 0x00000000 l40217A0D
	// succ:  l402179EF l40217A0D
l402179EF:
	a2 = 0x402035F0
	a2 = Mem0[a2 + 0x00000168:word32]
	a3 = 0
	branch a2 != 0x00000000 l402179FC
	// succ:  l402179F9 l402179FC
l402179F9:
	goto l402179FF
	// succ:  l402179FF
l402179FC:
	v30 = Mem0[a2 + 0x00000000:uint16]
	a3 = (uint32) v30
	// succ:  l402179FF
l402179FF:
	a2 = 0x402179B0
	a0 = 0x402034D0
	v29 = a0
	a0 = 0x40217A08
	call v29 (retsize: 0;)
	a2 = 1
	goto l40217B4B
	// succ:  l40217B4B
l40217A0D:
	a3 = 0x00000018
	a4 = Mem0[a1 + 0x00000014:word32]
	Mem0[a2 + 0x00000014:word16] = a3
	a2 = Mem0[a1 + 0x00000010:word32]
	a3 = Mem0[a1 + 0x00000018:word32]
	a0 = 0x40217A1E
	call fn40317958 (retsize: 0;)
	Mem0[a1 + 0x00000010:word32] = a2
	a3 = 0x402179B4
	Mem0[a1 + 0x00000028:word32] = a3
	a0 = 0x40217A28
	call fn403178E4 (retsize: 0;)
	Mem0[a1 + 0x00000010:word32] = a2
	a3 = Mem0[a1 + 0x00000028:word32]
	a0 = 0x40217A2F
	call fn4031791C (retsize: 0;)
	v14 = Mem0[a12 + 0x00000014:uint16]
	a8 = (uint32) v14
	Mem0[a1 + 0x00000010:word32] = a2
	a7 = Mem0[a12 + 0x00000004:word32]
	a4 = 0
	a9 = Mem0[a7 + 0x00000004:word32]
	Mem0[a1 + 0x00000038:word32] = a4
	a9 = a8 + a9
	a9 = a2 - a9
	Mem0[a12 + 0x00000016:word16] = a9
	a3 = 0x00000080
	a8 = a8 + a9
	v15 = Mem0[a7 + 0x00000003:byte]
	a2 = (uint32) v15
	a2 = a2 & 0x0000007F
	a2 = a2 | a3
	Mem0[a7 + 0x00000003:byte] = a2
	a0 = 0x000000BF
	a4 = 64
	v17 = Mem0[a7 + 0x00000003:byte]
	a11 = (uint32) v17
	a11 = a11 & a0
	a11 = a11 | a4
	Mem0[a7 + 0x00000003:byte] = a11
	a10 = 0x000000DF
	v19 = Mem0[a7 + 0x00000003:byte]
	a9 = (uint32) v19
	a9 = a9 & a10
	Mem0[a7 + 0x00000003:byte] = a9
	a8 = a8 & 0x00000FFF
	a8 = a8 << 20
	a9 = 0x40216FE4
	v20 = Mem0[a7 + 0x00000002:uint16]
	a6 = (uint32) v20
	a6 = a6 << 16
	v21 = Mem0[a7 + 0x00000000:uint16]
	a10 = (uint32) v21
	a6 = a6 | a10
	a6 = a6 & a9
	a6 = a6 | a8
	Mem0[a7:word16] = a6
	a6 = a6 >>u 0x00000010 & 0x0000FFFF
	a2 = Mem0[a1 + 0x0000002C:word32]
	a3 = a12
	Mem0[a7 + 0x00000002:word16] = a6
	a5 = Mem0[a1 + 0x0000001C:word32]
	a6 = Mem0[a1 + 0x00000024:word32]
	a7 = Mem0[a1 + 0x00000020:word32]
	Mem0[a1:word32] = a5
	a5 = 16
	a0 = 0x40217AC5
	call fn40317268 (retsize: 0;)
	a7 = 7
	a3 = 16
	a10 = Mem0[a12 + 0x00000020:word32]
	a4 = 0x0000008F
	a11 = Mem0[a10 + 0x00000000:word32]
	v22 = Mem0[a10 + 0x00000006:byte]
	a2 = (uint32) v22
	a9 = a11 & 0x0000003F
	a2 = a2 & a4
	a11 = a11 >>u 6
	Mem0[a10 + 0x00000006:byte] = a2
	a6 = Mem0[a12 + 0x00000020:word32]
	a11 = a11 | a3
	a11 = a11 << 26
	a9 = a9 | a11
	Mem0[a10:word32] = a9
	v23 = Mem0[a6 + 0x00000004:byte]
	a5 = (uint32) v23
	a8 = 0x000000F0
	a5 = a5 & a8
	a5 = a5 | a7
	Mem0[a6 + 0x00000004:byte] = a5
	a0 = Mem0[a1 + 0x00000038:word32]
	a4 = 0x4021319C
	a5 = Mem0[a12 + 0x00000020:word32]
	a4 = Mem0[a4 + 0x00000200:word32]
	v24 = Mem0[a5 + 0x00000000:byte]
	a6 = (uint32) v24
	a7 = 0x000000FE
	a6 = a6 & a7
	Mem0[a5:byte] = a6
	a2 = Mem0[a12 + 0x00000020:word32]
	Mem0[a5 + 0x00000010:word32] = a4
	v25 = Mem0[a2 + 0x00000000:byte]
	a11 = (uint32) v25
	a3 = 0x000000FD
	a11 = a11 & a3
	Mem0[a2:byte] = a11
	a2 = Mem0[a12 + 0x00000020:word32]
	a10 = Mem0[a2 + 0x00000000:word32]
	branch (a10 & 0x00000080) == 0x00000000 l40217B54
	// succ:  l40217B2B l40217B54
l40217B2B:
	a5 = 1
	v26 = Mem0[a1 + 0x00000040:byte]
	a6 = (uint32) v26
	a7 = 0x402035F0
	Mem0[a12 + 0x00000018:word32] = a0
	v27 = Mem0[a7 + 0x0000007D:byte]
	a7 = (uint32) v27
	SAR = 0x00000020 - a6
	a5 = a5 << SAR
	Mem0[a2 + 0x00000008:byte] = a7
	Mem0[a2 + 0x0000000E:byte] = a5
	a2 = a12
	a0 = 0x40217B49
	call sdk_ppTxPkt (retsize: 0;)
	a2 = 0
	// succ:  l40217B4B
l40217B4B:
	a12 = Mem0[a1 + 0x00000034:word32]
	a0 = Mem0[a1 + 0x00000030:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_ieee80211_send_probereq_exit
l40217B54:
	a2 = 0x00000000
	a0 = 0x40217B5A
	call sdk_rc_get_trc_by_index (retsize: 0;)
	a0 = a2 | a2
	a2 = Mem0[a12 + 0x00000020:word32]
	// succ:  l40257B2B
l40257B2B:
sdk_ieee80211_send_probereq_exit:


// sdk_ieee80211_getcapinfo
// Return size: 0
void sdk_ieee80211_getcapinfo()
sdk_ieee80211_getcapinfo_entry:
	// succ:  l40217B64
l40217B64:
	a1 = fp
	a7 = 16
	a2 = Mem0[a2 + 0x00000000:word32]
	a5 = 0x402035F0
	a3 = 1
	a5 = Mem0[a5 + 0x00000014:word32]
	a4 = 0
	a6 = Mem0[a5 + 0x000000B0:word32]
	a5 = Mem0[a5 + 0x00000048:word32]
	a6 = a6 - 1
	branch a6 != 0x00000000 l40217B7C
	// succ:  l40217B79_1 l40217B7C
l40217B79_1:
	a4 = a3
	// succ:  l40217B7C
l40217B7C:
	branch (a5 & 0x00000010) == 0x00000000 l40217B85
	// succ:  l40217B7F l40217B85
l40217B7F:
	a4 = a4 | a7
	a4 = a4 & 0x0000FFFF
	// succ:  l40217B85
l40217B85:
	branch (a5 & 0x00040000) == 0x00000000 l40217B93
	// succ:  l40217B88 l40217B93
l40217B88:
	branch (a2 & 0x00000080) == 0x00000000 l40217B93
	// succ:  l40217B8B l40217B93
l40217B8B:
	a6 = 32
	a4 = a4 | a6
	a4 = a4 & 0x0000FFFF
	// succ:  l40217B93
l40217B93:
	a6 = 0x00000400
	branch (a5 & 0x00000400) == 0x00000000 l40217B9F
	// succ:  l40217B99 l40217B9F
l40217B99:
	a4 = a4 | a6
	a4 = a4 & 0x0000FFFF
	// succ:  l40217B9F
l40217B9F:
	a6 = 0x00000100
	branch (a2 & 0x00000100) == 0x00000000 l40217BAE
	// succ:  l40217BA5 l40217BAE
l40217BA5:
	branch (a5 & 0x40000000) == 0x00000000 l40217BAE
	// succ:  l40217BA8 l40217BAE
l40217BA8:
	a4 = a4 | a6
	a4 = a4 & 0x0000FFFF
	// succ:  l40217BAE
l40217BAE:
	a2 = a4
	return
	// succ:  sdk_ieee80211_getcapinfo_exit
sdk_ieee80211_getcapinfo_exit:


// sdk_ieee80211_send_mgmt
// Return size: 0
void sdk_ieee80211_send_mgmt()
sdk_ieee80211_send_mgmt_entry:
	// succ:  l40217BC0
l40217BC0:
	a1 = fp
	a8 = 0x000000C0
	a10 = 0x40217BB4
	a9 = 0x00000018
	a6 = 0x402179B4
	a7 = a4 | a4
	a1 = a1 - 96
	Mem0[a1 + 0x0000003C:word32] = a13
	Mem0[a1 + 0x00000034:word32] = a0
	a4 = 2
	Mem0[a1 + 0x00000044:word32] = a15
	Mem0[a1 + 0x00000038:word32] = a12
	Mem0[a1 + 0x00000040:word32] = a14
	a12 = a2
	a14 = a3
	a15 = a6 - 44
	a3 = Mem0[a2 + 0x00000088:word32]
	Mem0[a1 + 0x0000004C:word32] = a3
	branch a14 == 0x00000000 l40217CA7
	// succ:  l40217BF1 l40217CA7
l40217BF1:
	a5 = a14 - 16
	branch a5 == 0x00000000 l40217CD2
	// succ:  l40217BF7 l40217CD2
l40217BF7:
	a11 = a14 - 32
	branch a11 == 0x00000000 l40217CA7
	// succ:  l40217BFD l40217CA7
l40217BFD:
	a13 = a14 - 48
	branch a13 == 0x00000000 l40217CD2
	// succ:  l40217C03 l40217CD2
l40217C03:
	a0 = 0x000000A0
	a0 = a14 - a0
	branch a0 == 0x00000000 l402180D1
	// succ:  l40217C0C l402180D1
l40217C0C:
	a2 = 0x000000B0
	a2 = a14 - a2
	branch a2 == 0x00000000 l40217FBA
	// succ:  l40217C15 l40217FBA
l40217C15:
	branch a14 != a8 l40217C5E
	// succ:  l40217C18 l40217C5E
l40217C18:
	a3 = a9
	a2 = a1
	Mem0[a1 + 0x00000008:word32] = a7
	a0 = 0x40217C21
	call sdk_ieee80211_getmgtframe (retsize: 0;)
	a13 = a2
	branch a2 == 0x00000000 l40217C7E
	// succ:  l40217C26 l40217C7E
l40217C26:
	Mem0[a1 + 0x0000002C:word32] = a12
	a5 = -2
	a6 = 2
	a7 = Mem0[a1 + 0x00000008:word32]
	a8 = Mem0[a1 + 0x00000000:word32]
	a4 = Mem0[a1 + 0x0000004C:word32]
	a9 = 24
	a3 = Mem0[a4 + 0x00000008:word32]
	Mem0[a2 + 0x00000014:word16] = a9
	Mem0[a8:word16] = a7
	Mem0[a2 + 0x00000016:word16] = a6
	a3 = a3 & a5
	Mem0[a4 + 0x00000008:word32] = a3
	goto l40217DBC
	// succ:  l40217DBC
l40217C48:
	v26 = Mem0[a0 + 0x00000000:uint16]
	a0 = (uint32) v26
	a4 = a2 + a4
	a3 = 0x00000018
	a2 = a1 | a1
	a4 = a0 + a4
	a0 = 0x40217C59
	call sdk_ieee80211_getmgtframe (retsize: 0;)
	a13 = a2
	branch a2 != 0x00000000 l40217E36
	// succ:  l40217C5E l40217E36
l40217C5E:
	branch a13 == 0x00000000 l40217C7E
	// succ:  l40217C60 l40217C7E
l40217C60:
	a0 = Mem0[a13 + 0x00000020:word32]
	a3 = 4
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = 5
	branch (a0 & 0x00100000) == 0x00000000 l40217C6E
	// succ:  l40217C6B l40217C6E
l40217C6B:
	goto l40217C76
	// succ:  l40217C76
l40217C6E:
	a3 = Mem0[a1 + 0x00000004:word32]
	a4 = a0 >>u 0x00000015 & 0x00000001
	branch a4 == 0x00000000 l40217C76
	// succ:  l40217C73_1 l40217C76
l40217C73_1:
	a3 = a2
	// succ:  l40217C76
l40217C76:
	a2 = a13
	a1 = a1 | a1
	a0 = 0x40217C7E
	call sdk_esf_buf_recycle (retsize: 0;)
	a2 = a13
	a1 = a1 | a1
	a0 = 0x40217C7E
	call sdk_esf_buf_recycle (retsize: 0;)
	// succ:  l40217C7E
l40217C7E:
	a2 = 1
	goto l40217C96
	// succ:  l40217C96
l40217C83:
	a5 = 0
	Mem0[a13 + 0x00000018:word32] = a5
	a4 = a14
	a3 = a13
	a2 = a12
	v25 = Mem0[a15 + 0x0000007D:byte]
	a6 = (uint32) v25
	Mem0[a0 + 0x00000008:byte] = a6
	a0 = 0x40217C96
	call fn40317394 (retsize: 0;)
	// succ:  l40217C96
l40217C96:
	a12 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x0000003C:word32]
	a14 = Mem0[a1 + 0x00000040:word32]
	a15 = Mem0[a1 + 0x00000044:word32]
	a0 = Mem0[a1 + 0x00000034:word32]
	a1 = a1 + 96
	return
	// succ:  sdk_ieee80211_send_mgmt_exit
l40217CA7:
	a0 = Mem0[a15 + 0x00000174:word32]
	branch a0 != 0x00000000 l40217CB2
	// succ:  l40217CAC l40217CB2
l40217CAC:
	a2 = 0x000000A4
	goto l40217CBA
	// succ:  l40217CBA
l40217CB2:
	v23 = Mem0[a0 + 0x00000000:uint16]
	a2 = (uint32) v23
	a3 = 0x000000A4
	a2 = a2 + a3
	// succ:  l40217CBA
l40217CBA:
	a0 = Mem0[a15 + 0x00000178:word32]
	branch a0 != 0x00000000 l40217CC4
	// succ:  l40217CBF l40217CC4
l40217CBF:
	a4 = 0
	goto l40217CC7
	// succ:  l40217CC7
l40217CC4:
	v24 = Mem0[a0 + 0x00000000:uint16]
	a4 = (uint32) v24
	// succ:  l40217CC7
l40217CC7:
	a0 = Mem0[a15 + 0x0000016C:word32]
	branch a0 != 0x00000000 l40217C48
	// succ:  l40217CCD l40217C48
l40217CCD:
	a0 = 0
	goto l40257C4B
	// succ:  l40257C4B
l40217CD2:
	a0 = Mem0[a15 + 0x00000170:word32]
	branch a0 != 0x00000000 l40217CDD
	// succ:  l40217CD7 l40217CDD
l40217CD7:
	a4 = 0x0000006F
	goto l40217CE3
	// succ:  l40217CE3
l40217CDD:
	v55 = Mem0[a0 + 0x00000000:uint16]
	a4 = (uint32) v55
	a4 = a4 + 111
	// succ:  l40217CE3
l40217CE3:
	a2 = a1 | a1
	a3 = 0x00000018
	Mem0[a1 + 0x00000008:word32] = a7
	a0 = 0x40217CEF
	call sdk_ieee80211_getmgtframe (retsize: 0;)
	Mem0[a1 + 0x00000030:word32] = a2
	a13 = a2
	branch a2 == 0x00000000 l40217C5E
	// succ:  l40217CF6 l40217C5E
l40217CF6:
	a3 = 0x402137EC
	a4 = 24
	Mem0[a2 + 0x00000014:word16] = a4
	v56 = Mem0[a3 + 0x0000008D:byte]
	a2 = (uint32) v56
	v57 = Mem0[a3 + 0x0000008D:byte]
	a3 = (uint32) v57
	a2 = a3 + a2 * 0x00000002
	a2 = a15 + a2 * 0x00000004
	a2 = a2 + 120
	a0 = 0x40217D10
	call fn40317B64 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a5 = Mem0[a1 + 0x00000008:word32]
	Mem0[a0:word16] = a2
	Mem0[a0 + 0x00000002:word16] = a5
	a2 = a0 + 4
	Mem0[a1:word32] = a2
	branch a5 != 0x00000000 l40217D29
	// succ:  l40217D20 l40217D29
l40217D20:
	a6 = Mem0[a1 + 0x0000004C:word32]
	v58 = Mem0[a6 + 0x0000001A:uint16]
	a6 = (uint32) v58
	Mem0[a0 + 0x00000004:word16] = a6
	// succ:  l40217D29
l40217D29:
	a3 = 0x402179B4
	a2 = a2 + 2
	Mem0[a1:word32] = a2
	Mem0[a1 + 0x00000028:word32] = a3
	a0 = 0x40217D37
	call fn403178E4 (retsize: 0;)
	Mem0[a1:word32] = a2
	a3 = Mem0[a1 + 0x00000028:word32]
	Mem0[a1 + 0x0000002C:word32] = a12
	a0 = 0x40217D40
	call fn4031791C (retsize: 0;)
	a12 = a2
	a0 = Mem0[a1 + 0x0000004C:word32]
	a3 = 0x000000C0
	a0 = Mem0[a0 + 0x00000008:word32]
	Mem0[a1:word32] = a2
	a0 = a0 & a3
	branch a0 != 64 l40217D6D
	// succ:  l40217D52 l40217D6D
l40217D52:
	a3 = Mem0[a1 + 0x0000002C:word32]
	a0 = 0x40217D57
	call fn40316380 (retsize: 0;)
	Mem0[a1:word32] = a2
	a3 = Mem0[a1 + 0x0000002C:word32]
	a0 = 0x40217D5E
	call fn403164C0 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000004C:word32]
	a12 = a2
	a0 = Mem0[a0 + 0x00000008:word32]
	Mem0[a1:word32] = a2
	a2 = 0x000000C0
	a0 = a0 & a2
	// succ:  l40217D6D
l40217D6D:
	a2 = 0x000000C0
	branch a0 != a2 l40217D87
	// succ:  l40217D73 l40217D87
l40217D73:
	a2 = a12 | a12
	a3 = Mem0[a1 + 0x0000002C:word32]
	a0 = 0x40217D7C
	call fn4031639C (retsize: 0;)
	Mem0[a1:word32] = a2
	a3 = Mem0[a1 + 0x0000002C:word32]
	a0 = 0x40217D83
	call fn403164DC (retsize: 0;)
	a12 = a2
	Mem0[a1:word32] = a2
	// succ:  l40217D87
l40217D87:
	a3 = Mem0[a15 + 0x00000170:word32]
	Mem0[a1 + 0x00000024:word32] = a3
	branch a3 == 0x00000000 l40217DA6
	// succ:  l40217D8E l40217DA6
l40217D8E:
	a4 = a3
	a2 = a12
	a3 = a3 + 2
	v59 = Mem0[a4 + 0x00000000:uint16]
	a4 = (uint32) v59
	a0 = 0x40203130
	v60 = a0
	a0 = 0x40217D9D
	call v60 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000024:word32]
	v61 = Mem0[a5 + 0x00000000:uint16]
	a5 = (uint32) v61
	a12 = a5 + a12
	Mem0[a1:word32] = a12
	// succ:  l40217DA6
l40217DA6:
	a0 = Mem0[a1 + 0x00000030:word32]
	a4 = Mem0[a0 + 0x00000004:word32]
	v62 = Mem0[a0 + 0x00000014:uint16]
	a0 = (uint32) v62
	a2 = Mem0[a4 + 0x00000004:word32]
	a3 = Mem0[a1 + 0x00000030:word32]
	a2 = a0 + a2
	a2 = a12 - a2
	Mem0[a3 + 0x00000016:word16] = a2
	// succ:  l40217DBC
l40217DBC:
	a8 = 0x4021319C
	a5 = 7
	a6 = 0x000000F0
	a9 = Mem0[a13 + 0x00000020:word32]
	a2 = Mem0[a15 + 0x00000010:word32]
	v18 = Mem0[a9 + 0x00000006:byte]
	a7 = (uint32) v18
	a10 = 0x0000008F
	a7 = a7 & a10
	Mem0[a9 + 0x00000006:byte] = a7
	a4 = Mem0[a13 + 0x00000020:word32]
	a12 = Mem0[a1 + 0x0000002C:word32]
	v19 = Mem0[a4 + 0x00000004:byte]
	a3 = (uint32) v19
	a2 = a2 - a12
	a3 = a3 & a6
	a3 = a3 | a5
	Mem0[a4 + 0x00000004:byte] = a3
	a9 = 1
	branch a2 == 0x00000000 l40217DEC
	// succ:  l40217DE9_1 l40217DEC
l40217DE9_1:
	a2 = a9
	// succ:  l40217DEC
l40217DEC:
	a9 = Mem0[a13 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x0000004C:word32]
	a7 = 0x000000FD
	a6 = a2 & 0x00000001
	a8 = Mem0[a8 + 0x00000200:word32]
	v20 = Mem0[a9 + 0x00000000:byte]
	a10 = (uint32) v20
	a11 = 0x000000FE
	a10 = a10 & a11
	Mem0[a9:byte] = a10
	a5 = Mem0[a13 + 0x00000020:word32]
	Mem0[a9 + 0x00000010:word32] = a8
	v21 = Mem0[a5 + 0x00000000:byte]
	a4 = (uint32) v21
	a6 = a6 << 31
	a4 = a4 & a7
	a4 = a4 | a6
	Mem0[a5:byte] = a4
	v22 = Mem0[a3 + 0x0000001A:uint16]
	a3 = (uint32) v22
	a0 = Mem0[a13 + 0x00000020:word32]
	branch a3 == 0x00000000 l40217C83
	// succ:  l40217E24 l40217C83
l40217E24:
	a11 = Mem0[a0 + 0x00000000:word32]
	a11 = a11 >>u 0x00000007 & 0x00000001
	branch a11 != 0x00000000 l40217C83
	// succ:  l40217E2C l40217C83
l40217E2C:
	a0 = 0x40217E2F
	call sdk_rc_get_trc_by_index (retsize: 0;)
	Mem0[a13 + 0x00000018:word32] = a2
	a0 = Mem0[a13 + 0x00000020:word32]
	goto l40257C87
	// succ:  l40257C87
l40217E36:
	a5 = 1
	a0 = 17
	a4 = Mem0[a1 + 0x0000004C:word32]
	a6 = 0x40217BB4
	a8 = 24
	Mem0[a2 + 0x00000014:word16] = a8
	Mem0[a1 + 0x00000048:word32] = a6
	a2 = Mem0[a15 + 0x0000001C:word32]
	a4 = Mem0[a4 + 0x00000078:word32]
	v27 = Mem0[a6 + 0x00000080:byte]
	a6 = (uint32) v27
	a4 = Mem0[a4 + 0x00000000:word32]
	branch a6 != 0x00000000 l40217E55
	// succ:  l40217E52_1 l40217E55
l40217E52_1:
	a0 = a5
	// succ:  l40217E55
l40217E55:
	branch (a2 & 0x00040000) == 0x00000000 l40217E60
	// succ:  l40217E58 l40217E60
l40217E58:
	branch (a4 & 0x00000080) == 0x00000000 l40217E60
	// succ:  l40217E5B l40217E60
l40217E5B:
	a9 = 32
	a0 = a0 | a9
	// succ:  l40217E60
l40217E60:
	a10 = 0x000000C0
	branch (~a4 & a10) == 0x00000000 l40217E6C
	// succ:  l40217E66 l40217E6C
l40217E66:
	a11 = 0x00000480
	branch (~a4 & a11) != 0x00000000 l40217E77
	// succ:  l40217E6C l40217E77
l40217E6C:
	a2 = Mem0[a15 + 0x00000020:word32]
	branch (a2 & 0x00004000) == 0x00000000 l40217E77
	// succ:  l40217E71 l40217E77
l40217E71:
	a3 = 0x00000400
	a0 = a0 | a3
	// succ:  l40217E77
l40217E77:
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = Mem0[a1 + 0x0000004C:word32]
	a4 = a2 + 2
	Mem0[a2:word16] = a0
	v34 = Mem0[a3 + 0x0000001C:uint16]
	a3 = (uint32) v34
	Mem0[a1:word32] = a4
	Mem0[a2 + 0x00000002:word16] = a3
	a2 = a2 + 4
	Mem0[a1:word32] = a2
	branch a14 != 32 l40217EA1
	// succ:  l40217E90 l40217EA1
l40217E90:
	a3 = Mem0[a1 + 0x0000004C:word32]
	a4 = 6
	a0 = 0x40203130
	v35 = a0
	a0 = 0x40217E9B
	call v35 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000000:word32]
	a2 = a2 + 6
	Mem0[a1:word32] = a2
	// succ:  l40217EA1
l40217EA1:
	a5 = Mem0[a1 + 0x00000048:word32]
	a3 = 0x402138F4
	v37 = Mem0[a5 + 0x0000005C:uint16]
	a4 = (uint32) v37
	v38 = Mem0[a5 + 0x0000005A:uint16]
	a5 = (uint32) v38
	a4 = a4 << 16
	a4 = a4 | a5
	a0 = 0x40217EB6
	call fn40317958 (retsize: 0;)
	Mem0[a1:word32] = a2
	a3 = 0x402179B4
	Mem0[a1 + 0x00000028:word32] = a3
	a0 = 0x40217EC2
	call fn403178E4 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000048:word32]
	a4 = a2
	v39 = Mem0[a0 + 0x0000007F:byte]
	a0 = (uint32) v39
	Mem0[a1:word32] = a2
	branch a0 == 4 l40217ED5
	// succ:  l40217ECF l40217ED5
l40217ECF:
	branch a0 == 5 l40217ED5
	// succ:  l40217ED2 l40217ED5
l40217ED2:
	branch a0 != 7 l40217EFA
	// succ:  l40217ED5 l40217EFA
l40217ED5:
	a0 = Mem0[a15 + 0x00000178:word32]
	Mem0[a1 + 0x0000001C:word32] = a4
	branch a0 == 0x00000000 l40217EFA
	// succ:  l40217EDC l40217EFA
l40217EDC:
	a2 = Mem0[a1 + 0x0000001C:word32]
	v40 = Mem0[a0 + 0x00000003:byte]
	a4 = (uint32) v40
	a3 = a0 + 2
	Mem0[a1 + 0x00000014:word32] = a3
	a4 = a4 + 2
	a0 = 0x40203130
	v41 = a0
	a0 = 0x40217EED
	call v41 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = Mem0[a1 + 0x0000001C:word32]
	v42 = Mem0[a2 + 0x00000001:byte]
	a2 = (uint32) v42
	a2 = a2 + a3
	a2 = a2 + 2
	Mem0[a1:word32] = a2
	// succ:  l40217EFA
l40217EFA:
	a3 = Mem0[a1 + 0x00000028:word32]
	Mem0[a1 + 0x0000002C:word32] = a12
	a0 = 0x40217F01
	call fn4031791C (retsize: 0;)
	Mem0[a1:word32] = a2
	a4 = Mem0[a1 + 0x00000048:word32]
	a12 = a2
	a4 = a4 + 0x00000300
	a4 = a4 + 127
	a4 = a4 + 3
	v43 = Mem0[a4 + 0x00000002:uint16]
	a3 = (uint32) v43
	v44 = Mem0[a4 + 0x00000000:uint16]
	a4 = (uint32) v44
	a3 = a3 << 16
	a3 = a3 | a4
	branch (a3 & 0x00080000) == 0x00000000 l40217F33
	// succ:  l40217F1F l40217F33
l40217F1F:
	a6 = Mem0[a1 + 0x0000002C:word32]
	a6 = Mem0[a6 + 0x00000048:word32]
	a5 = 0x000000C0
	branch (a5 & a6) == 0x00000000 l40217F33
	// succ:  l40217F2A l40217F33
l40217F2A:
	a3 = Mem0[a1 + 0x0000002C:word32]
	a0 = 0x40217F2F
	call fn40316380 (retsize: 0;)
	a12 = a2
	Mem0[a1:word32] = a2
	// succ:  l40217F33
l40217F33:
	a0 = Mem0[a1 + 0x00000048:word32]
	v45 = Mem0[a0 + 0x0000007F:byte]
	a0 = (uint32) v45
	branch a0 == 2 l40217F42
	// succ:  l40217F3C l40217F42
l40217F3C:
	branch a0 == 3 l40217F42
	// succ:  l40217F3F l40217F42
l40217F3F:
	branch a0 != 6 l40217F63
	// succ:  l40217F42 l40217F63
l40217F42:
	a0 = Mem0[a15 + 0x00000174:word32]
	branch a0 == 0x00000000 l40217F63
	// succ:  l40217F47 l40217F63
l40217F47:
	a2 = a12
	v46 = Mem0[a0 + 0x00000003:byte]
	a4 = (uint32) v46
	a3 = a0 + 2
	Mem0[a1 + 0x00000018:word32] = a3
	a4 = a4 + 2
	a0 = 0x40203130
	v47 = a0
	a0 = 0x40217F58
	call v47 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000018:word32]
	v48 = Mem0[a0 + 0x00000001:byte]
	a0 = (uint32) v48
	a12 = a0 + a12
	a12 = a12 + 2
	Mem0[a1:word32] = a12
	// succ:  l40217F63
l40217F63:
	a3 = Mem0[a1 + 0x00000048:word32]
	a3 = a3 + 0x00000300
	a3 = a3 + 127
	a3 = a3 + 3
	v49 = Mem0[a3 + 0x00000002:uint16]
	a2 = (uint32) v49
	v50 = Mem0[a3 + 0x00000000:uint16]
	a3 = (uint32) v50
	a2 = a2 << 16
	a2 = a2 | a3
	branch (a2 & 0x10000000) == 0x00000000 l40217F93
	// succ:  l40217F7D l40217F93
l40217F7D:
	a5 = Mem0[a1 + 0x0000002C:word32]
	a5 = Mem0[a5 + 0x00000048:word32]
	a4 = 0x000000C0
	branch (a4 & a5) == 0x00000000 l40217F93
	// succ:  l40217F88 l40217F93
l40217F88:
	a2 = a12
	a3 = Mem0[a1 + 0x0000002C:word32]
	a0 = 0x40217F8F
	call fn4031639C (retsize: 0;)
	a12 = a2
	Mem0[a1:word32] = a2
	// succ:  l40217F93
l40217F93:
	a6 = Mem0[a15 + 0x0000016C:word32]
	Mem0[a1 + 0x00000020:word32] = a6
	branch a6 == 0x00000000 l40217FB0
	// succ:  l40217F9A l40217FB0
l40217F9A:
	a2 = a12
	a3 = a6 + 2
	v51 = Mem0[a6 + 0x00000000:uint16]
	a4 = (uint32) v51
	a0 = 0x40203130
	v52 = a0
	a0 = 0x40217FA7
	call v52 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000020:word32]
	v53 = Mem0[a5 + 0x00000000:uint16]
	a5 = (uint32) v53
	a12 = a5 + a12
	Mem0[a1:word32] = a12
	// succ:  l40217FB0
l40217FB0:
	Mem0[a1 + 0x00000030:word32] = a13
	a4 = Mem0[a13 + 0x00000004:word32]
	v54 = Mem0[a13 + 0x00000014:uint16]
	a0 = (uint32) v54
	goto l40257DAF
	// succ:  l40257DAF
l40217FBA:
	a6 = 0
	a0 = a7 & 0x0000FFFF
	branch a0 == 2 l40217FC5
	// succ:  l40217FC2 l40217FC5
l40217FC2:
	branch a0 != 3 l40217FCD
	// succ:  l40217FC5 l40217FCD
l40217FC5:
	a11 = Mem0[a12 + 0x00000054:word32]
	a8 = 1
	branch a11 == 0x00000000 l40217FCD
	// succ:  l40217FCA_1 l40217FCD
l40217FCA_1:
	a6 = a8
	// succ:  l40217FCD
l40217FCD:
	a8 = 1
	branch a6 != 0x00000000 l40217FE1
	// succ:  l40217FD1 l40217FE1
l40217FD1:
	branch a0 >= 3 l40217FDF
	// succ:  l40217FD4 l40217FDF
l40217FD4:
	branch a0 != 1 l40217FDD
	// succ:  l40217FD7 l40217FDD
l40217FD7:
	v28 = Mem0[a10 + 0x0000007E:byte]
	a13 = (uint32) v28
	branch a13 == 2 l40217FDF
	// succ:  l40217FDD l40217FDF
l40217FDD:
	a8 = 0
	// succ:  l40217FDF
l40217FDF:
	branch a6 == 0x00000000 l40217FEB
	// succ:  l40217FE1 l40217FEB
l40217FE1:
	a0 = a7 >> 16
	branch a0 != 0x00000000 l40217FEB
	// succ:  l40217FE6 l40217FEB
l40217FE6:
	a3 = 28
	goto l40217FED
	// succ:  l40217FED
l40217FEB:
	a3 = 24
	// succ:  l40217FED
l40217FED:
	branch a6 == 0x00000000 l40217FFA
	// succ:  l40217FEF l40217FFA
l40217FEF:
	a2 = a7 >> 16
	branch a2 != 0x00000000 l40217FFA
	// succ:  l40217FF4 l40217FFA
l40217FF4:
	a4 = 0x00000088
	goto l40217FFD
	// succ:  l40217FFD
l40217FFA:
	a4 = 0x00000006
	// succ:  l40217FFD
l40217FFD:
	a2 = a1 | a1
	Mem0[a1 + 0x00000010:word32] = a8
	Mem0[a1 + 0x0000000C:word32] = a6
	Mem0[a1 + 0x00000008:word32] = a7
	a0 = 0x40218009
	call sdk_ieee80211_getmgtframe (retsize: 0;)
	a0 = a2
	a13 = a2
	branch a2 == 0x00000000 l40217C5E
	// succ:  l40218010 l40217C5E
l40218010:
	a3 = Mem0[a1 + 0x0000000C:word32]
	a4 = Mem0[a1 + 0x00000008:word32]
	a6 = 1
	a7 = 24
	a5 = Mem0[a1 + 0x00000010:word32]
	Mem0[a2 + 0x00000014:word16] = a7
	a2 = Mem0[a1 + 0x00000000:word32]
	branch a5 == 0x00000000 l40218022
	// succ:  l4021801F_1 l40218022
l4021801F_1:
	a5 = a6
	// succ:  l40218022
l40218022:
	Mem0[a2 + 0x00000002:word16] = a4
	Mem0[a2:word16] = a5
	a4 = a4 >> 16
	Mem0[a2 + 0x00000004:word16] = a4
	branch a3 == 0x00000000 l402180C7
	// succ:  l40218031 l402180C7
l40218031:
	Mem0[a1 + 0x00000054:word32] = a0
	branch a4 != 0x00000000 l402180C7
	// succ:  l40218037 l402180C7
l40218037:
	a3 = Mem0[a12 + 0x00000054:word32]
	a4 = 0x00000080
	a8 = 0x40217BB8
	a13 = a0
	Mem0[a2 + 0x00000006:word16] = a8
	a2 = a2 + 8
	a0 = 0x40203130
	v29 = a0
	a0 = 0x4021804D
	call v29 (retsize: 0;)
	a2 = a12
	a3 = a13
	a10 = Mem0[a13 + 0x00000004:word32]
	a11 = 0x00000088
	a9 = Mem0[a10 + 0x00000004:word32]
	Mem0[a13 + 0x00000016:word16] = a11
	a9 = a9 + 28
	Mem0[a10 + 0x00000004:word32] = a9
	a0 = 0x40218063
	call fn40314C60 (retsize: 0;)
	v30 = Mem0[a13 + 0x00000016:uint16]
	a3 = (uint32) v30
	a4 = Mem0[a13 + 0x00000004:word32]
	Mem0[a1 + 0x00000050:word32] = a2
	a0 = Mem0[a4 + 0x00000004:word32]
	a2 = 0x40217BBC
	a0 = a0 - 24
	Mem0[a4 + 0x00000004:word32] = a0
	Mem0[a13 + 0x00000010:word32] = a0
	a0 = 0x402034D0
	v31 = a0
	a0 = 0x4021807D
	call v31 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000050:word32]
	a0 = Mem0[a13 + 0x00000020:word32]
	branch a4 == 0x00000000 l402180F8
	// succ:  l40218085 l402180F8
l40218085:
	a3 = Mem0[a15 + 0x00000014:word32]
	v32 = Mem0[a4 + 0x00000000:uint16]
	a2 = (uint32) v32
	a6 = Mem0[a0 + 0x00000000:word32]
	a7 = 1
	a5 = a6 & 0x0000003F
	a6 = a6 >>u 6
	a6 = a6 | a7
	a6 = a6 << 26
	a5 = a5 | a6
	Mem0[a0:word32] = a5
	branch a3 != a12 l402180A8
	// succ:  l402180A2 l402180A8
l402180A2:
	a7 = 0x00000080
	a2 = a2 | a7
	// succ:  l402180A8
l402180A8:
	a5 = 0x000000F0
	Mem0[a0 + 0x0000000C:byte] = a2
	a3 = Mem0[a4 + 0x00000098:word32]
	v33 = Mem0[a0 + 0x0000000D:byte]
	a2 = (uint32) v33
	a3 = Mem0[a3 + 0x00000000:word32]
	a2 = a2 & a5
	a3 = a3 & 0x0000000F
	a2 = a2 | a3
	Mem0[a0 + 0x0000000D:byte] = a2
	Mem0[a1 + 0x0000002C:word32] = a12
	goto l40257DBC
	// succ:  l40257DBC
l402180C7:
	Mem0[a1 + 0x0000002C:word32] = a12
	a4 = 6
	Mem0[a0 + 0x00000016:word16] = a4
	goto l40257DBC
	// succ:  l40257DBC
l402180D1:
	a3 = a9 | a9
	a2 = a1 | a1
	Mem0[a1 + 0x00000008:word32] = a7
	a0 = 0x402180DD
	call sdk_ieee80211_getmgtframe (retsize: 0;)
	a13 = a2
	branch a2 == 0x00000000 l40217C7E
	// succ:  l402180E2 l40217C7E
l402180E2:
	Mem0[a1 + 0x0000002C:word32] = a12
	a5 = 2
	a6 = Mem0[a1 + 0x00000008:word32]
	a7 = Mem0[a1 + 0x00000000:word32]
	a8 = 24
	Mem0[a2 + 0x00000014:word16] = a8
	Mem0[a7:word16] = a6
	Mem0[a2 + 0x00000016:word16] = a5
	goto l40257DBC
	// succ:  l40257DBC
l402180F8:
	v36 = Mem0[a0 + 0x0000000D:byte]
	a2 = (uint32) v36
	a3 = 0x000000F0
	a2 = a2 & a3
	goto l402580BF
	// succ:  l402580BF
l40257C4B:
l40257C87:
l40257DAF:
l40257DBC:
l402580BF:
sdk_ieee80211_send_mgmt_exit:


// fn40218104
// Return size: 0
void fn40218104()
fn40218104_entry:
	// succ:  l40218104
l40218104:
	a1 = fp
	v4 = Mem0[a2 + 0x00000018:byte]
	a2 = (uint32) v4
	branch a2 == 0x00000000 l4021810E
	// succ:  l40218109 l4021810E
l40218109:
	branch a2 != 1 l40218112
	// succ:  l4021810C l40218112
l4021810C:
	branch a3 == 0x00000000 l40218112
	// succ:  l4021810E l40218112
l4021810E:
	a2 = 1
	return
	// succ:  fn40218104_exit
l40218112:
	a2 = 0
	return
	// succ:  fn40218104_exit
fn40218104_exit:


// sdk_ieee80211_alloc_proberesp
// Return size: 0
void sdk_ieee80211_alloc_proberesp()
sdk_ieee80211_alloc_proberesp_entry:
	// succ:  l40218124
l40218124:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000024:word32] = a15
	Mem0[a1 + 0x00000008:word32] = a3
	Mem0[a1 + 0x00000014:word32] = a0
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a13
	Mem0[a1 + 0x00000018:word32] = a12
	a13 = a2
	a12 = 0x00000084
	a14 = 0x40218118
	a0 = 0x402035F0
	v11 = Mem0[a14 + 0x00000080:byte]
	a6 = (uint32) v11
	a5 = Mem0[a0 + 0x0000016C:word32]
	a6 = a6 - 1
	a6 = a6 & 0x000000FF
	a6 = a6 + a6 * 0x00000002
	a6 = a0 + a6 * 0x00000004
	a12 = a6 + a12
	Mem0[a2 + 0x000000BC:word32] = a12
	branch a5 != 0x00000000 l4021815B
	// succ:  l40218156 l4021815B
l40218156:
	a2 = 0
	goto l4021815E
	// succ:  l4021815E
l4021815B:
	v13 = Mem0[a5 + 0x00000000:uint16]
	a2 = (uint32) v13
	// succ:  l4021815E
l4021815E:
	a3 = 0x00000018
	Mem0[a1 + 0x0000000C:word32] = a6
	a5 = a14 - 5
	v15 = Mem0[a5 + 0x00000003:byte]
	a4 = (uint32) v15
	v17 = Mem0[a5 + 0x00000002:byte]
	a7 = (uint32) v17
	a4 = a4 << 24
	a4 = a4 | a7
	a4 = a4 << 24
	v18 = Mem0[a5 + 0x00000001:byte]
	a7 = (uint32) v18
	v19 = Mem0[a5 + 0x00000000:byte]
	a5 = (uint32) v19
	a4 = a4 | a7
	a4 = a4 << 24
	a4 = a4 | a5
	a4 = a4 + a2
	a5 = 0x000000CE
	a2 = a1
	a4 = a4 + a5
	a0 = 0x40218192
	call sdk_ieee80211_getmgtframe (retsize: 0;)
	a15 = a2
	branch a2 != 0x00000000 l4021819B
	// succ:  l40218196 l4021819B
l40218196:
	a2 = 0
	goto l4021830F
	// succ:  l4021830F
l4021819B:
	a3 = 0x00000000
	a5 = 0x00000018
	a4 = 0x00000008
	Mem0[a2 + 0x00000014:word16] = a5
	a2 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x4020267C
	v20 = a0
	a0 = 0x402181AF
	call v20 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000000:word32]
	a7 = 0x00000064
	a2 = a12
	Mem0[a6 + 0x00000008:word16] = a7
	a6 = a6 + 10
	Mem0[a1:word32] = a6
	a0 = 0x402181C0
	call fn40317B64 (retsize: 0;)
	a5 = a14 - 5
	v21 = Mem0[a5 + 0x00000003:byte]
	a4 = (uint32) v21
	v22 = Mem0[a5 + 0x00000002:byte]
	a6 = (uint32) v22
	a4 = a4 << 24
	a4 = a4 | a6
	v23 = Mem0[a5 + 0x00000001:byte]
	a6 = (uint32) v23
	a4 = a4 << 24
	v24 = Mem0[a5 + 0x00000000:byte]
	a5 = (uint32) v24
	a4 = a4 | a6
	a4 = a4 << 24
	a4 = a4 | a5
	a5 = Mem0[a1 + 0x00000000:word32]
	a3 = 0x40213E7C
	Mem0[a5:word16] = a2
	a2 = a5 + 2
	Mem0[a1:word32] = a2
	a0 = 0x402181F0
	call fn40317958 (retsize: 0;)
	Mem0[a1:word32] = a2
	Mem0[a1 + 0x00000004:word32] = a12
	a3 = 0x402179B4
	Mem0[a1 + 0x00000010:word32] = a3
	a0 = 0x402181FC
	call fn403178E4 (retsize: 0;)
	a12 = a2
	a5 = Mem0[a1 + 0x0000000C:word32]
	a6 = 0x4021811C
	a5 = Mem0[a5 + 0x00000084:word32]
	Mem0[a1:word32] = a2
	branch (~a5 & a6) == 0x00000000 l40218231
	// succ:  l4021820B l40218231
l4021820B:
	a10 = 3
	Mem0[a2:byte] = a10
	a8 = Mem0[a1 + 0x00000000:word32]
	a7 = 1
	a9 = a8 + 1
	Mem0[a1:word32] = a9
	Mem0[a8 + 0x00000001:byte] = a7
	a6 = Mem0[a1 + 0x00000000:word32]
	a2 = Mem0[a1 + 0x00000004:word32]
	a6 = a6 + 1
	Mem0[a1:word32] = a6
	a0 = 0x40218226
	call fn40314A84 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	Mem0[a0:byte] = a2
	a12 = Mem0[a1 + 0x00000000:word32]
	a12 = a12 + 1
	Mem0[a1:word32] = a12
	// succ:  l40218231
l40218231:
	a2 = a12
	a3 = Mem0[a1 + 0x00000010:word32]
	a0 = 0x40218238
	call fn4031791C (retsize: 0;)
	Mem0[a1:word32] = a2
	a0 = Mem0[a13 + 0x000000B4:word32]
	a12 = a2
	branch a0 == 0x00000000 l4021825F
	// succ:  l40218241 l4021825F
l40218241:
	a0 = Mem0[a0 + 0x00000018:word32]
	a3 = Mem0[a0 + 0x00000050:word32]
	branch a3 == 0x00000000 l4021825F
	// succ:  l40218248 l4021825F
l40218248:
	a4 = Mem0[a0 + 0x00000054:word32]
	a0 = 0x40203130
	v28 = a0
	a0 = 0x40218251
	call v28 (retsize: 0;)
	a12 = Mem0[a13 + 0x000000B4:word32]
	a12 = Mem0[a12 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a12 = Mem0[a12 + 0x00000054:word32]
	a12 = a12 + a0
	Mem0[a1:word32] = a12
	// succ:  l4021825F
l4021825F:
	a3 = Mem0[a13 + 0x000000BC:word32]
	a6 = 0x40218120
	a3 = Mem0[a3 + 0x00000000:word32]
	a0 = 0x000000C0
	a2 = a3 & a6
	branch (a3 & a6) == 0x00000000 l4021829B
	// succ:  l40218270 l4021829B
l40218270:
	a4 = Mem0[a1 + 0x00000008:word32]
	branch a4 == 1 l4021829B
	// succ:  l40218275 l4021829B
l40218275:
	a5 = Mem0[a13 + 0x00000048:word32]
	branch (a0 & a5) == 0x00000000 l4021829B
	// succ:  l4021827B l4021829B
l4021827B:
	a2 = a12
	a3 = a13
	a0 = 0x40218282
	call fn40316380 (retsize: 0;)
	Mem0[a1:word32] = a2
	a3 = a13
	a0 = 0x40218289
	call fn403164C0 (retsize: 0;)
	a12 = a2
	Mem0[a1:word32] = a2
	a2 = Mem0[a13 + 0x000000BC:word32]
	a3 = 0x40218120
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x000000C0
	a2 = a2 & a3
	// succ:  l4021829B
l4021829B:
	branch a2 == 0x00000000 l402182DF
	// succ:  l4021829E l402182DF
l4021829E:
	a4 = a14 + 0x00000200
	v29 = Mem0[a4 + 0x00000082:byte]
	a3 = (uint32) v29
	v30 = Mem0[a4 + 0x00000081:byte]
	a5 = (uint32) v30
	a3 = a3 << 24
	a3 = a3 | a5
	a3 = a3 << 24
	v31 = Mem0[a4 + 0x00000080:byte]
	a5 = (uint32) v31
	v32 = Mem0[a4 + 0x0000007F:byte]
	a4 = (uint32) v32
	a3 = a3 | a5
	a3 = a3 << 24
	a3 = a3 | a4
	branch (a3 & 0x10000000) == 0x00000000 l402182DF
	// succ:  l402182C2 l402182DF
l402182C2:
	a4 = Mem0[a1 + 0x00000008:word32]
	branch a4 == 1 l402182DF
	// succ:  l402182C7 l402182DF
l402182C7:
	a5 = Mem0[a13 + 0x00000048:word32]
	branch (a0 & a5) == 0x00000000 l402182DF
	// succ:  l402182CD l402182DF
l402182CD:
	a2 = a12
	a3 = a13
	a0 = 0x402182D4
	call fn4031639C (retsize: 0;)
	a3 = a13
	Mem0[a1:word32] = a2
	a0 = 0x402182DB
	call fn403164DC (retsize: 0;)
	a12 = a2
	Mem0[a1:word32] = a2
	// succ:  l402182DF
l402182DF:
	a13 = 0x402035F0
	a13 = Mem0[a13 + 0x0000016C:word32]
	branch a13 == 0x00000000 l402182FB
	// succ:  l402182E7 l402182FB
l402182E7:
	a2 = a12
	a3 = a13 + 2
	v33 = Mem0[a13 + 0x00000000:uint16]
	a4 = (uint32) v33
	a0 = 0x40203130
	v34 = a0
	a0 = 0x402182F4
	call v34 (retsize: 0;)
	v35 = Mem0[a13 + 0x00000000:uint16]
	a14 = (uint32) v35
	a12 = a14 + a12
	Mem0[a1:word32] = a12
	// succ:  l402182FB
l402182FB:
	a2 = a15
	a0 = Mem0[a15 + 0x00000004:word32]
	a3 = 24
	a0 = Mem0[a0 + 0x00000004:word32]
	Mem0[a15 + 0x00000014:word16] = a3
	a0 = a12 - a0
	a0 = a0 - 24
	Mem0[a15 + 0x00000016:word16] = a0
	// succ:  l4021830F
l4021830F:
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x0000001C:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x00000024:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_ieee80211_alloc_proberesp_exit
sdk_ieee80211_alloc_proberesp_exit:


// sdk_ieee80211_send_proberesp
// Return size: 0
void sdk_ieee80211_send_proberesp()
sdk_ieee80211_send_proberesp_entry:
	// succ:  l40218320
l40218320:
	a1 = fp
	a6 = a3
	a1 = a1 - 48
	Mem0[a1 + 0x0000001C:word32] = a12
	a3 = a4
	Mem0[a1 + 0x00000020:word32] = a13
	Mem0[a1 + 0x00000018:word32] = a0
	a13 = a2
	Mem0[a1 + 0x00000010:word32] = a6
	a0 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000014:word32] = a0
	a0 = 0x40218338
	call fn40318124 (retsize: 0;)
	a12 = a2
	branch a2 != 0x00000000 l40218360
	// succ:  l4021833C l40218360
l4021833C:
	a2 = 1
	goto l40218355
	// succ:  l40218355
l40218341:
	a2 = 0
	a3 = a12 + 28
	a4 = 0x402035F0
	a6 = 0
	a5 = Mem0[a4 + 0x000001C4:word32]
	Mem0[a12 + 0x0000001C:word32] = a6
	Mem0[a5:word32] = a12
	Mem0[a4 + 0x000001C4:word32] = a3
	// succ:  l40218355
l40218355:
	a12 = Mem0[a1 + 0x0000001C:word32]
	a13 = Mem0[a1 + 0x00000020:word32]
	a0 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_ieee80211_send_proberesp_exit
l40218360:
	a7 = 0x00000080
	v11 = Mem0[a2 + 0x00000016:uint16]
	a0 = (uint32) v11
	v13 = Mem0[a2 + 0x00000014:uint16]
	a11 = (uint32) v13
	a10 = Mem0[a2 + 0x00000004:word32]
	a11 = a11 + a0
	v15 = Mem0[a10 + 0x00000003:byte]
	a6 = (uint32) v15
	a6 = a6 & 0x0000007F
	a6 = a6 | a7
	Mem0[a10 + 0x00000003:byte] = a6
	a4 = 64
	a5 = 0x000000BF
	v17 = Mem0[a10 + 0x00000003:byte]
	a3 = (uint32) v17
	a3 = a3 & a5
	a3 = a3 | a4
	Mem0[a10 + 0x00000003:byte] = a3
	a2 = 0x000000DF
	v18 = Mem0[a10 + 0x00000003:byte]
	a0 = (uint32) v18
	a0 = a0 & a2
	Mem0[a10 + 0x00000003:byte] = a0
	a11 = a11 & 0x00000FFF
	a0 = 0x40216FE4
	a11 = a11 << 20
	v20 = Mem0[a10 + 0x00000002:uint16]
	a9 = (uint32) v20
	a9 = a9 << 16
	v21 = Mem0[a10 + 0x00000000:uint16]
	a2 = (uint32) v21
	a9 = a9 | a2
	a9 = a9 & a0
	a9 = a9 | a11
	Mem0[a10:word16] = a9
	a9 = a9 >>u 0x00000010 & 0x0000FFFF
	a7 = Mem0[a1 + 0x00000010:word32]
	a2 = a13
	a3 = a12
	a4 = 80
	a5 = 16
	a8 = Mem0[a1 + 0x00000014:word32]
	Mem0[a10 + 0x00000002:word16] = a9
	a8 = a8 + 41
	a6 = a8
	Mem0[a1:word32] = a8
	a0 = 0x402183EE
	call fn40317268 (retsize: 0;)
	a0 = Mem0[a13 + 0x00000088:word32]
	a4 = Mem0[a12 + 0x00000020:word32]
	a7 = 0x0000008F
	a5 = Mem0[a4 + 0x00000000:word32]
	v23 = Mem0[a4 + 0x00000006:byte]
	a6 = (uint32) v23
	a3 = a5 & 0x0000003F
	a6 = a6 & a7
	a5 = a5 >>u 6
	Mem0[a4 + 0x00000006:byte] = a6
	a10 = Mem0[a12 + 0x00000020:word32]
	a6 = 16
	a5 = a5 | a6
	a5 = a5 << 26
	a3 = a3 | a5
	Mem0[a4:word32] = a3
	v24 = Mem0[a10 + 0x00000004:byte]
	a9 = (uint32) v24
	a11 = 0x000000F0
	a9 = a9 & a11
	a11 = 7
	a9 = a9 | a11
	Mem0[a10 + 0x00000004:byte] = a9
	a8 = 0x4021319C
	a6 = 2
	a9 = Mem0[a12 + 0x00000020:word32]
	a8 = Mem0[a8 + 0x00000200:word32]
	v25 = Mem0[a9 + 0x00000000:byte]
	a10 = (uint32) v25
	a11 = 0x000000FE
	a10 = a10 & a11
	Mem0[a9:byte] = a10
	a5 = Mem0[a12 + 0x00000020:word32]
	Mem0[a9 + 0x00000010:word32] = a8
	v26 = Mem0[a5 + 0x00000000:byte]
	a4 = (uint32) v26
	a7 = 0x000000FD
	a4 = a4 & a7
	a4 = a4 | a6
	Mem0[a5:byte] = a4
	a3 = Mem0[a12 + 0x00000020:word32]
	a3 = Mem0[a3 + 0x00000000:word32]
	a8 = 0
	branch (a3 & 0x00000080) != 0x00000000 l40218461
	// succ:  l4021845C l40218461
l4021845C:
	v27 = Mem0[a0 + 0x0000001A:uint16]
	a0 = (uint32) v27
	branch a0 != 0x00000000 l40218466
	// succ:  l40218461 l40218466
l40218461:
	Mem0[a12 + 0x00000018:word32] = a8
	goto l4021846F
	// succ:  l4021846F
l40218466:
	a2 = a0 & 0x000000FF
	a0 = 0x4021846C
	call sdk_rc_get_trc_by_index (retsize: 0;)
	Mem0[a12 + 0x00000018:word32] = a2
	// succ:  l4021846F
l4021846F:
	a0 = 0x40218472
	call sdk_chm_check_same_channel (retsize: 0;)
	branch a2 == 0x00000000 l40218341
	// succ:  l40218475 l40218341
l40218475:
	a2 = a12
	a0 = 0x4021847A
	call sdk_ppTxPkt (retsize: 0;)
	// succ:  l40258355
l40258355:
sdk_ieee80211_send_proberesp_exit:


// sdk_ieee80211_beacon_alloc
// Return size: 0
void sdk_ieee80211_beacon_alloc()
sdk_ieee80211_beacon_alloc_entry:
	// succ:  l40218660
l40218660:
	a1 = fp
	a4 = 0x402035F0
	a10 = a3 | a3
	a1 = a1 - 48
	Mem0[a1 + 0x00000024:word32] = a13
	a3 = 0x00000018
	Mem0[a1 + 0x0000001C:word32] = a0
	a5 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000020:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a10
	a4 = Mem0[a4 + 0x00000288:word32]
	a12 = a2
	Mem0[a1 + 0x00000018:word32] = a5
	a2 = a1 + 16
	a5 = 0x0000008D
	a4 = a4 + a5
	a0 = 0x40218689
	call sdk_ieee80211_getmgtframe (retsize: 0;)
	a13 = a2
	branch a2 != 0x00000000 l40218692
	// succ:  l4021868D l40218692
l4021868D:
	a13 = 0
	goto l4021879E
	// succ:  l4021879E
l40218692:
	a4 = Mem0[a1 + 0x00000014:word32]
	a5 = a12
	a3 = Mem0[a1 + 0x00000010:word32]
	a6 = 24
	Mem0[a2 + 0x00000014:word16] = a6
	a0 = 0x402186A0
	call fn40318480 (retsize: 0;)
	a4 = 0x00000080
	v12 = Mem0[a13 + 0x00000016:uint16]
	a0 = (uint32) v12
	v14 = Mem0[a13 + 0x00000014:uint16]
	a11 = (uint32) v14
	a10 = Mem0[a13 + 0x00000004:word32]
	a11 = a11 + a0
	v16 = Mem0[a10 + 0x00000003:byte]
	a7 = (uint32) v16
	a7 = a7 & 0x0000007F
	a7 = a7 | a4
	Mem0[a10 + 0x00000003:byte] = a7
	a5 = 64
	a6 = 0x000000BF
	v17 = Mem0[a10 + 0x00000003:byte]
	a3 = (uint32) v17
	a3 = a3 & a6
	a3 = a3 | a5
	Mem0[a10 + 0x00000003:byte] = a3
	a2 = 0x000000DF
	v18 = Mem0[a10 + 0x00000003:byte]
	a0 = (uint32) v18
	a0 = a0 & a2
	Mem0[a10 + 0x00000003:byte] = a0
	a11 = a11 & 0x00000FFF
	a0 = 0x40216FE4
	a11 = a11 << 20
	v20 = Mem0[a10 + 0x00000002:uint16]
	a9 = (uint32) v20
	a9 = a9 << 16
	v21 = Mem0[a10 + 0x00000000:uint16]
	a2 = (uint32) v21
	a9 = a9 | a2
	a9 = a9 & a0
	a9 = a9 | a11
	Mem0[a10:word16] = a9
	a9 = a9 >>u 0x00000010 & 0x0000FFFF
	a2 = a12
	a3 = a13
	a5 = 16
	a7 = 0x4021865C
	Mem0[a10 + 0x00000002:word16] = a9
	a8 = Mem0[a1 + 0x00000018:word32]
	a9 = Mem0[a12 + 0x00000090:word32]
	Mem0[a12 + 0x00000088:word32] = a9
	a8 = a8 + 41
	a6 = a8
	Mem0[a1:word32] = a8
	a0 = 0x40218733
	call fn40317268 (retsize: 0;)
	a6 = Mem0[a13 + 0x00000020:word32]
	v23 = Mem0[a6 + 0x00000006:byte]
	a5 = (uint32) v23
	a7 = 0x0000008F
	a5 = a5 & a7
	Mem0[a6 + 0x00000006:byte] = a5
	a2 = Mem0[a13 + 0x00000020:word32]
	a3 = 7
	v24 = Mem0[a2 + 0x00000004:byte]
	a0 = (uint32) v24
	a4 = 0x000000F0
	a0 = a0 & a4
	a0 = a0 | a3
	Mem0[a2 + 0x00000004:byte] = a0
	a12 = 0x4021319C
	a6 = 16
	a0 = Mem0[a13 + 0x00000020:word32]
	a7 = 0
	a10 = 2
	a12 = Mem0[a12 + 0x00000200:word32]
	v25 = Mem0[a0 + 0x00000000:byte]
	a2 = (uint32) v25
	a3 = 0x000000FE
	a2 = a2 & a3
	Mem0[a0:byte] = a2
	a9 = Mem0[a13 + 0x00000020:word32]
	Mem0[a0 + 0x00000010:word32] = a12
	v26 = Mem0[a9 + 0x00000000:byte]
	a8 = (uint32) v26
	a11 = 0x000000FD
	a8 = a8 & a11
	a8 = a8 | a10
	Mem0[a9:byte] = a8
	a4 = Mem0[a13 + 0x00000020:word32]
	Mem0[a13 + 0x00000018:word32] = a7
	a5 = Mem0[a4 + 0x00000000:word32]
	Mem0[a4 + 0x0000000E:byte] = a6
	a3 = a5 & 0x0000003F
	a5 = a5 >>u 6
	a5 = a5 | a6
	a5 = a5 << 26
	a3 = a3 | a5
	Mem0[a4:word32] = a3
	// succ:  l4021879E
l4021879E:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000020:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_ieee80211_beacon_alloc_exit
sdk_ieee80211_beacon_alloc_exit:


// sdk_ieee80211_get_11g_ratetable
// Return size: 0
void sdk_ieee80211_get_11g_ratetable()
sdk_ieee80211_get_11g_ratetable_entry:
	// succ:  l402187B0
l402187B0:
	a1 = fp
	a2 = 0x402187AC
	return
	// succ:  sdk_ieee80211_get_11g_ratetable_exit
sdk_ieee80211_get_11g_ratetable_exit:


// sdk_ieee80211_get_ratetable
// Return size: 0
void sdk_ieee80211_get_ratetable()
sdk_ieee80211_get_ratetable_entry:
	// succ:  l402187BC
l402187BC:
	a1 = fp
	a2 = Mem0[a2 + 0x00000000:word32]
	a3 = 0x000000C0
	branch (~a2 & a3) == 0x00000000 l402187CF
	// succ:  l402187C4 l402187CF
l402187C4:
	a4 = 0x00000480
	branch (~a2 & a4) == 0x00000000 l402187CF
	// succ:  l402187CA l402187CF
l402187CA:
	a2 = 0x402187B8
	return
	// succ:  sdk_ieee80211_get_ratetable_exit
l402187CF:
	a2 = 0x402187AC
	return
	// succ:  sdk_ieee80211_get_ratetable_exit
sdk_ieee80211_get_ratetable_exit:


// sdk_ieee80211_phy_init
// Return size: 0
void sdk_ieee80211_phy_init()
sdk_ieee80211_phy_init_entry:
	// succ:  l402187D4
l402187D4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	a0 = 0x402187E0
	call sdk_ieee80211_setup_ratetable (retsize: 0;)
	a3 = 12
	a0 = 3
	a5 = 4
	a2 = 0x402035F0
	a4 = a12 - 1
	a6 = 0
	a12 = Mem0[a1 + 0x00000004:word32]
	Mem0[a2 + 0x0000007D:byte] = a6
	Mem0[a2 + 0x0000007E:byte] = a6
	Mem0[a2 + 0x0000007F:byte] = a5
	branch a4 == 0x00000000 l402187FB
	// succ:  l402187F8_1 l402187FB
l402187F8_1:
	a0 = a3
	// succ:  l402187FB
l402187FB:
	Mem0[a2 + 0x0000007C:byte] = a0
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_phy_init_exit
sdk_ieee80211_phy_init_exit:


// sdk_ieee80211_phy_type_get
// Return size: 0
void sdk_ieee80211_phy_type_get()
sdk_ieee80211_phy_type_get_entry:
	// succ:  l40218808
l40218808:
	a1 = fp
	a2 = 0x40214470
	a2 = Mem0[a2 + 0x0000031C:word32]
	a3 = 1
	a2 = a2 - 1
	branch a2 == 0x00000000 l40218815
	// succ:  l40218812_1 l40218815
l40218812_1:
	a2 = a3
	// succ:  l40218815
l40218815:
	return
	// succ:  sdk_ieee80211_phy_type_get_exit
sdk_ieee80211_phy_type_get_exit:


// sdk_ieee80211_setup_ratetable
// Return size: 0
void sdk_ieee80211_setup_ratetable()
sdk_ieee80211_setup_ratetable_entry:
	// succ:  l40218818
l40218818:
	a1 = fp
	a4 = 0x402187AC
	a5 = 0x402187B8
	a6 = a2 - 1
	branch a6 == 0x00000000 l40218823
	// succ:  l40218820_1 l40218823
l40218820_1:
	a5 = a4
	// succ:  l40218823
l40218823:
	a6 = 0x402035F0
	v8 = Mem0[a5 + 0x00000000:byte]
	a3 = (uint32) v8
	Mem0[a6 + 0x0000002C:byte] = a3
	branch a3 == 0x00000000 l40218848
	// succ:  l4021882E l40218848
l4021882E:
	a2 = 0
	// succ:  l40218830
l40218830:
	a4 = a2 + a6
	a3 = a2 << 28
	a3 = a5 + a3
	a2 = a2 + 1
	v9 = Mem0[a3 + 0x0000001E:byte]
	a3 = (uint32) v9
	Mem0[a4 + 0x0000002D:byte] = a3
	v11 = Mem0[a6 + 0x0000002C:byte]
	a7 = (uint32) v11
	a2 = a2 & 0x000000FF
	branch a2 <u a7 l40218830
	// succ:  l40218848 l40218830
l40218848:
	return
	// succ:  sdk_ieee80211_setup_ratetable_exit
sdk_ieee80211_setup_ratetable_exit:


// sdk_ieee80211_compute_duration
// Return size: 0
void sdk_ieee80211_compute_duration()
sdk_ieee80211_compute_duration_entry:
	// succ:  l4021884C
l4021884C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a0
	a0 = a4 + a2
	v6 = Mem0[a0 + 0x00000004:byte]
	a0 = (uint32) v6
	a7 = a3
	a0 = a0 << 28
	a0 = a2 + a0
	a3 = Mem0[a0 + 0x00000018:word32]
	v9 = Mem0[a0 + 0x00000014:byte]
	a2 = (uint32) v9
	branch a3 != 0x00000000 l40218869
	// succ:  l40218864 l40218869
l40218864:
	a2 = 0
	goto l402188BA
	// succ:  l402188BA
l40218869:
	Mem0[a1 + 0x00000004:word32] = a7
	branch a2 == 0x00000000 l40218894
	// succ:  l4021886D l40218894
l4021886D:
	branch a2 != 1 l402188B7
	// succ:  l40218870 l402188B7
l40218870:
	a2 = a3 << 30
	a3 = 0x000003E8
	a0 = 0x40204388
	v10 = a0
	a0 = 0x4021887C
	call v10 (retsize: 0;)
	a3 = a2
	a2 = Mem0[a1 + 0x00000004:word32]
	a2 = a3 + a2 * 0x00000008
	a2 = a2 + 21
	a0 = 0x40204388
	v11 = a0
	a0 = 0x4021888C
	call v11 (retsize: 0;)
	a0 = 36
	a0 = a0 + a2 * 0x00000004
	goto l402188B7
	// succ:  l402188B7
l40218894:
	branch a5 == 0x00000000 l402188C1
	// succ:  l40218896 l402188C1
l40218896:
	v13 = Mem0[a0 + 0x0000001C:byte]
	a2 = (uint32) v13
	a4 = 0x00000060
	branch a2 == 0x00000000 l402188C1
	// succ:  l4021889E l402188C1
l4021889E:
	Mem0[a1:word32] = a4
	a2 = Mem0[a1 + 0x00000004:word32]
	a4 = 0x000003E8
	a2 = a2 << 29
	a2 = a2 * a4
	a0 = 0x40204388
	v14 = a0
	a0 = 0x402188B1
	call v14 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a0 = a0 + a2
	a0 = a0 + 10
	// succ:  l402188B7
l402188B7:
	a2 = a0 & 0x0000FFFF
	// succ:  l402188BA
l402188BA:
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_compute_duration_exit
l402188C1:
	a2 = 0x000000C0
	Mem0[a1:word32] = a2
	// succ:  l402588A0
l402588A0:
sdk_ieee80211_compute_duration_exit:


// sdk_ieee80211_dot11Rate_rix
// Return size: 0
void sdk_ieee80211_dot11Rate_rix()
sdk_ieee80211_dot11Rate_rix_entry:
	// succ:  l402188CC
l402188CC:
	a1 = fp
	a6 = 0
	a8 = 0x402187AC
	// succ:  l402188D1
l402188D1:
	a7 = a6 << 28
	a7 = a8 + a7
	v7 = Mem0[a7 + 0x0000001E:byte]
	a4 = (uint32) v7
	branch a4 != a2 l402188E6
	// succ:  l402188DC l402188E6
l402188DC:
	a2 = a6
	v9 = Mem0[a7 + 0x0000001D:byte]
	a8 = (uint32) v9
	Mem0[a3:byte] = a8
	return
	// succ:  sdk_ieee80211_dot11Rate_rix_exit
l402188E6:
	a6 = a6 + 1
	a6 = a6 & 0x000000FF
	branch a6 != 12 l402188D1
	// succ:  l402188EE l402188D1
l402188EE:
	a2 = 0x000000FF
	return
	// succ:  sdk_ieee80211_dot11Rate_rix_exit
sdk_ieee80211_dot11Rate_rix_exit:


// sdk_ieee80211_psq_init
// Return size: 0
void sdk_ieee80211_psq_init()
sdk_ieee80211_psq_init_entry:
	// succ:  l402188F4
l402188F4:
	a1 = fp
	a6 = 0
	a5 = 0
	a4 = 1
	// succ:  l402188FA
l402188FA:
	a4 = a4 - 1
	a3 = a5 + a2
	Mem0[a3:word32] = a6
	a5 = a5 + 4
	branch a4 >= 1 l402188FA
	// succ:  l40218905 l402188FA
l40218905:
	a4 = 10
	Mem0[a2 + 0x00000004:word32] = a4
	return
	// succ:  sdk_ieee80211_psq_init_exit
sdk_ieee80211_psq_init_exit:


// sdk_ieee80211_psq_cleanup
// Return size: 0
void sdk_ieee80211_psq_cleanup()
sdk_ieee80211_psq_cleanup_entry:
	// succ:  l4021890C
l4021890C:
	a1 = fp
	return
	// succ:  sdk_ieee80211_psq_cleanup_exit
sdk_ieee80211_psq_cleanup_exit:


// sdk_ieee80211_set_tim
// Return size: 0
void sdk_ieee80211_set_tim()
sdk_ieee80211_set_tim_entry:
	// succ:  l40218914
l40218914:
	a1 = fp
	a10 = 1
	v5 = Mem0[a2 + 0x0000001A:uint16]
	a6 = (uint32) v5
	a8 = 0x40218910
	a7 = a6 & 0x00000007
	a6 = a6 >>u 0x00000003 & 0x000007FF
	a6 = a6 + a8
	v10 = Mem0[a6 + 0x00000080:byte]
	a5 = (uint32) v10
	SAR = a7
	a4 = a0 >> SAR
	a4 = a4 & 0x00000001
	a2 = a3 - a4
	branch a2 == 0x00000000 l40218936
	// succ:  l40218933_1 l40218936
l40218933_1:
	a2 = a10
	// succ:  l40218936
l40218936:
	branch a2 == 0x00000000 l4021894F
	// succ:  l40218938 l4021894F
l40218938:
	a11 = -1
	SAR = 0x00000020 - a7
	a9 = a10 << SAR
	a8 = a9 | a5
	a9 = a9 ^ a11
	a9 = a5 & a9
	branch a3 != 0x00000000 l4021894C
	// succ:  l40218949_2 l4021894C
l40218949_2:
	a8 = a9
	// succ:  l4021894C
l4021894C:
	Mem0[a6 + 0x00000080:byte] = a8
	// succ:  l4021894F
l4021894F:
	return
	// succ:  sdk_ieee80211_set_tim_exit
sdk_ieee80211_set_tim_exit:


// sdk_ieee80211_pwrsave
// Return size: 0
void sdk_ieee80211_pwrsave()
sdk_ieee80211_pwrsave_entry:
	// succ:  l40218954
l40218954:
	a1 = fp
	a6 = a2 | a2
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a2 = Mem0[a2 + 0x000000C4:word32]
	a0 = Mem0[a6 + 0x000000C0:word32]
	a12 = a3
	branch a0 < a2 l40218983
	// succ:  l4021896A l40218983
l4021896A:
	a3 = Mem0[a6 + 0x000000C8:word32]
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = a3 + 1
	Mem0[a6 + 0x000000C8:word32] = a3
	a0 = 0x40218977
	call fn4030C0EC (retsize: 0;)
	a2 = a12
	a3 = 1
	a0 = 0x4021897E
	call sdk_esf_buf_recycle (retsize: 0;)
	a2 = 1
	goto l402189B0
	// succ:  l402189B0
l40218983:
	a4 = a0 + 1
	a7 = 0
	a5 = Mem0[a6 + 0x000000D4:word32]
	a2 = Mem0[a6 + 0x000000D0:word32]
	a5 = a5 + 1
	branch a2 != 0x00000000 l40218997
	// succ:  l40218991 l40218997
l40218991:
	Mem0[a6 + 0x000000CC:word32] = a3
	goto l40218999
	// succ:  l40218999
l40218997:
	Mem0[a2 + 0x0000001C:word32] = a3
	// succ:  l40218999
l40218999:
	Mem0[a12 + 0x0000001C:word32] = a7
	Mem0[a6 + 0x000000D0:word32] = a12
	Mem0[a6 + 0x000000C0:word32] = a4
	Mem0[a6 + 0x000000D4:word32] = a5
	branch a4 != 1 l402189AE
	// succ:  l402189A7 l402189AE
l402189A7:
	a2 = a6
	a3 = 1
	a0 = 0x402189AE
	call fn40318914 (retsize: 0;)
	// succ:  l402189AE
l402189AE:
	a2 = 0
	// succ:  l402189B0
l402189B0:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_pwrsave_exit
sdk_ieee80211_pwrsave_exit:


// sdk_ieee80211_node_pwrsave
// Return size: 0
void sdk_ieee80211_node_pwrsave()
sdk_ieee80211_node_pwrsave_entry:
	// succ:  l40218A20
l40218A20:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1:word32] = a2
	a0 = Mem0[a2 + 0x00000008:word32]
	branch a3 == 0x00000000 l40218A35
	// succ:  l40218A2B l40218A35
l40218A2B:
	a3 = 16
	a3 = a0 | a3
	Mem0[a2 + 0x00000008:word32] = a3
	goto l40218A4D
	// succ:  l40218A4D
l40218A35:
	a3 = 0
	a4 = -17
	a4 = a0 & a4
	Mem0[a2 + 0x00000008:word32] = a4
	a0 = 0x40218A41
	call fn40318914 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a5 = Mem0[a0 + 0x000000C0:word32]
	branch a5 == 0x00000000 l40218A4D
	// succ:  l40218A48 l40218A4D
l40218A48:
	a2 = a0
	a0 = 0x40218A4D
	call fn403189BC (retsize: 0;)
	// succ:  l40218A4D
l40218A4D:
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_node_pwrsave_exit
sdk_ieee80211_node_pwrsave_exit:


// sdk_ieee80211_proto_attach
// Return size: 0
void sdk_ieee80211_proto_attach()
sdk_ieee80211_proto_attach_entry:
	// succ:  l40218A58
l40218A58:
	a1 = fp
	a3 = 0x00000002
	a4 = 0x40215E28
	a6 = 0x00000001
	a5 = a2 | a2
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a2 = 0x40218A54
	a0 = Mem0[a5 + 0x0000001C:word32]
	Mem0[a5 + 0x0000000C:word32] = a6
	a0 = a0 | a4
	Mem0[a5 + 0x0000001C:word32] = a0
	a0 = 0x40218A78
	call sdk_ppRegisterTxCallback (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_proto_attach_exit
sdk_ieee80211_proto_attach_exit:


// sdk_ieee80211_set_shortslottime
// Return size: 0
void sdk_ieee80211_set_shortslottime()
sdk_ieee80211_set_shortslottime_entry:
	// succ:  l40218A80
l40218A80:
	a1 = fp
	a6 = 0x00000400
	a5 = Mem0[a2 + 0x0000001C:word32]
	a4 = 0xFFFFFBFF
	a4 = a5 & a4
	a5 = a5 | a6
	branch a3 != 0x00000000 l40218A91
	// succ:  l40218A8E_1 l40218A91
l40218A8E_1:
	a5 = a4
	// succ:  l40218A91
l40218A91:
	Mem0[a2 + 0x0000001C:word32] = a5
	return
	// succ:  sdk_ieee80211_set_shortslottime_exit
sdk_ieee80211_set_shortslottime_exit:


// sdk_ieee80211_iserp_rateset
// Return size: 0
void sdk_ieee80211_iserp_rateset()
sdk_ieee80211_iserp_rateset_entry:
	// succ:  l40218A9C
l40218A9C:
	a1 = fp
	v4 = Mem0[a2 + 0x00000000:byte]
	a8 = (uint32) v4
	branch a8 <u 0x00000007 l40218AC1
	// succ:  l40218AA2 l40218AC1
l40218AA2:
	a9 = 0x40218A98
	a10 = 0
	// succ:  l40218AA7
l40218AA7:
	branch a8 < 1 l40218AC1
	// succ:  l40218AAA l40218AC1
l40218AAA:
	a5 = 0
	a6 = Mem0[a9 + 0x00000000:word32]
	// succ:  l40218AAE
l40218AAE:
	a7 = a5 + a2
	v11 = Mem0[a7 + 0x00000001:byte]
	a7 = (uint32) v11
	a7 = a7 & 0x0000007F
	branch a6 == a7 l40218AC5
	// succ:  l40218AB9 l40218AC5
l40218AB9:
	branch a6 < a7 l40218AC1
	// succ:  l40218ABC l40218AC1
l40218ABC:
	a5 = a5 + 1
	branch a5 != a8 l40218AAE
	// succ:  l40218AC1 l40218AAE
l40218AC1:
	a2 = 0
	return
	// succ:  sdk_ieee80211_iserp_rateset_exit
l40218AC5:
	a9 = a9 + 4
	a10 = a10 + 1
	branch a10 != 7 l40218AA7
	// succ:  l40218ACC l40218AA7
l40218ACC:
	a2 = 1
	return
	// succ:  sdk_ieee80211_iserp_rateset_exit
sdk_ieee80211_iserp_rateset_exit:


// sdk_ieee80211_setbasicrates
// Return size: 0
void sdk_ieee80211_setbasicrates()
sdk_ieee80211_setbasicrates_entry:
	// succ:  l40218B30
l40218B30:
	a1 = fp
	a4 = 0
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40218B3A
	call fn40318AD4 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_setbasicrates_exit
sdk_ieee80211_setbasicrates_exit:


// sdk_ieee80211_addbasicrates
// Return size: 0
void sdk_ieee80211_addbasicrates()
sdk_ieee80211_addbasicrates_entry:
	// succ:  l40218B44
l40218B44:
	a1 = fp
	a4 = 1
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40218B4E
	call fn40318AD4 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_addbasicrates_exit
sdk_ieee80211_addbasicrates_exit:


// sdk_ieee80211_wme_initparams
// Return size: 0
void sdk_ieee80211_wme_initparams()
sdk_ieee80211_wme_initparams_entry:
	// succ:  l40218B58
l40218B58:
	a1 = fp
	return
	// succ:  sdk_ieee80211_wme_initparams_exit
sdk_ieee80211_wme_initparams_exit:


// sdk_ieee80211_wme_updateparams
// Return size: 0
void sdk_ieee80211_wme_updateparams()
sdk_ieee80211_wme_updateparams_entry:
	// succ:  l40218B5C
l40218B5C:
	a1 = fp
	return
	// succ:  sdk_ieee80211_wme_updateparams_exit
sdk_ieee80211_wme_updateparams_exit:


// sdk_ieee80211_mlme_connect_bss
// Return size: 0
void sdk_ieee80211_mlme_connect_bss()
sdk_ieee80211_mlme_connect_bss_entry:
	// succ:  l40218B60
l40218B60:
	a1 = fp
	a3 = a2 | a2
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a5
	Mem0[a1 + 0x00000008:word32] = a0
	a2 = 0x402035F0
	Mem0[a1:word32] = a4
	a2 = Mem0[a2 + 0x00000010:word32]
	a4 = 6
	Mem0[a2 + 0x00000088:word32] = a3
	a2 = a2 + 64
	a0 = 0x40203130
	v8 = a0
	a0 = 0x40218B81
	call v8 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000004:word32]
	a0 = 0x402035F0
	branch a3 == 0x00000000 l40218B95
	// succ:  l40218B88 l40218B95
l40218B88:
	a3 = 2
	a4 = 0x000000B0
	a2 = a0
	a0 = 0x40218B92
	call sdk_ieee80211_sta_new_state (retsize: 0;)
	goto l40218BA8
	// succ:  l40218BA8
l40218B95:
	a3 = 0x00000003
	a2 = a0 | a0
	a6 = Mem0[a1 + 0x00000000:word32]
	a5 = 32
	a4 = 0
	branch a6 == 0x00000000 l40218BA5
	// succ:  l40218BA2_1 l40218BA5
l40218BA2_1:
	a4 = a5
	// succ:  l40218BA5
l40218BA5:
	a0 = 0x40218BA8
	call sdk_ieee80211_sta_new_state (retsize: 0;)
	// succ:  l40218BA8
l40218BA8:
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_mlme_connect_bss_exit
sdk_ieee80211_mlme_connect_bss_exit:


// sdk_ieee80211_scan_attach
// Return size: 0
void sdk_ieee80211_scan_attach()
sdk_ieee80211_scan_attach_entry:
	// succ:  l40218BC0
l40218BC0:
	a1 = fp
	a4 = 0x000000FF
	a3 = 0x00000168
	a5 = 0x00000078
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	a2 = 0x40218BB0
	Mem0[a12 + 0x00000004:word32] = a2
	Mem0[a2 + 0x00000044:word32] = a5
	Mem0[a2 + 0x00000048:word32] = a5
	Mem0[a2 + 0x0000004C:word32] = a3
	Mem0[a2 + 0x000000AB:byte] = a4
	a3 = 0x40218BB4
	a4 = 0
	a2 = a2 + 8
	a0 = 0x40218BEF
	call fn403042E8 (retsize: 0;)
	a2 = 0x40218BB8
	a3 = 0x40218BBC
	a4 = 0
	a0 = 0x40218BFA
	call fn403042E8 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a6 = 0
	a7 = 0x000001C0
	a7 = a12 + a7
	Mem0[a12 + 0x000001C0:word32] = a6
	Mem0[a12 + 0x000001C4:word32] = a7
	a12 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_scan_attach_exit
sdk_ieee80211_scan_attach_exit:


// sdk_scan_start
// Return size: 0
void sdk_scan_start()
sdk_scan_start_entry:
	// succ:  l40218C3C
l40218C3C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a4
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	a13 = a3
	a12 = a2
	a14 = a5
	a2 = 0x40218C30
	a0 = 0x40218C56
	call fn40304430 (retsize: 0;)
	a2 = 0x40218C30
	a3 = 0x40218C34
	a4 = 0
	a0 = 0x40218C61
	call fn403042E8 (retsize: 0;)
	a0 = 0x40218C64
	call sdk_pm_is_open (retsize: 0;)
	branch a2 == 0x00000000 l40218C9D
	// succ:  l40218C67 l40218C9D
l40218C67:
	a0 = 0x40218C6A
	call sdk_pm_is_waked (retsize: 0;)
	branch a2 != 0x00000000 l40218C97
	// succ:  l40218C6C l40218C97
l40218C6C:
	a2 = 1
	a0 = 0x40218C71
	call sdk_pm_post (retsize: 0;)
	a2 = 0x40218C30
	a0 = 0x40218C77
	call fn40304430 (retsize: 0;)
	a2 = 0x40218C30
	a3 = 10
	a4 = 0x40218BB0
	a5 = Mem0[a1 + 0x00000010:word32]
	Mem0[a4 + 0x000000B4:word32] = a12
	Mem0[a4 + 0x000000B8:byte] = a13
	Mem0[a4 + 0x000000BC:word32] = a5
	Mem0[a4 + 0x000000C0:word32] = a14
	a4 = 0
	a0 = 0x40218C92
	call fn4030438C (retsize: 0;)
	// succ:  l40218C92
l40218C92:
	a2 = -1
	goto l40218D0A
	// succ:  l40218D0A
l40218C97:
	a1 = a1 | a1
	a0 = 0x40218C9D
	call sdk_pm_scan_lock (retsize: 0;)
	// succ:  l40218C9D
l40218C9D:
	a2 = 0x402035F0
	a2 = Mem0[a2 + 0x00000010:word32]
	a2 = a2 + 4
	a0 = 0x40218CA8
	call fn40304430 (retsize: 0;)
	a0 = 0x40218CAB
	call sdk_scan_cancel (retsize: 0;)
	a2 = a13
	a5 = 16
	a4 = 0x40214568
	a3 = Mem0[a4 + 0x0000026C:word32]
	a3 = a3 | a5
	Mem0[a4 + 0x0000026C:word32] = a3
	a3 = 0x40218C38
	a4 = 0
	a0 = 0x40218CC9
	call sdk_chm_acquire_lock (retsize: 0;)
	branch a2 == 3 l40218C92
	// succ:  l40218CCC l40218C92
l40218CCC:
	a6 = 1
	a7 = 0x40218BB0
	a8 = Mem0[a1 + 0x00000010:word32]
	Mem0[a7 + 0x00000058:word32] = a14
	Mem0[a7 + 0x00000004:word32] = a12
	Mem0[a7 + 0x00000054:word32] = a8
	Mem0[a7 + 0x0000005D:byte] = a6
	branch (a12 & 0x00001000) != 0x00000000 l40218CF4
	// succ:  l40218CE1 l40218CF4
l40218CE1:
	a11 = 0
	a13 = 0x00000100
	a10 = a7
	v17 = Mem0[a10 + 0x000000AB:byte]
	a9 = (uint32) v17
	a13 = a12 & a13
	branch a13 == 0x00000000 l40218CF1
	// succ:  l40218CEE_1 l40218CF1
l40218CEE_1:
	a9 = a11
	// succ:  l40218CF1
l40218CF1:
	Mem0[a10 + 0x0000005C:byte] = a9
	// succ:  l40218CF4
l40218CF4:
	a12 = 0x402035F0
	a0 = 0x40218CFA
	call fn40219438 (retsize: 0;)
	a14 = Mem0[a12 + 0x00000000:word32]
	a14 = Mem0[a14 + 0x00000000:word32]
	branch (a14 & 0x00000002) == 0x00000000 l40218D08
	// succ:  l40218D03 l40218D08
l40218D03:
	a2 = 0
	a0 = 0x40218D08
	call fn4021919C (retsize: 0;)
	// succ:  l40218D08
l40218D08:
	a2 = 0
	// succ:  l40218D0A
l40218D0A:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_scan_start_exit
sdk_scan_start_exit:


// sdk_scan_pm_channel_op_cb
// Return size: 0
void sdk_scan_pm_channel_op_cb()
sdk_scan_pm_channel_op_cb_entry:
	// succ:  l40218D18
l40218D18:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = 0x40218BB0
	v5 = Mem0[a0 + 0x0000005D:byte]
	a2 = (uint32) v5
	branch (a2 & 0x00000001) == 0x00000000 l40218D38
	// succ:  l40218D27 l40218D38
l40218D27:
	a2 = a0 + 8
	Mem0[a1:word32] = a2
	a0 = 0x40218D2F
	call fn40304430 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = 0
	a4 = 0
	a0 = 0x40218D38
	call fn4030438C (retsize: 0;)
	// succ:  l40218D38
l40218D38:
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_scan_pm_channel_op_cb_exit
sdk_scan_pm_channel_op_cb_exit:


// sdk_scan_cancel
// Return size: 0
void sdk_scan_cancel()
sdk_scan_cancel_entry:
	// succ:  l40218EB0
l40218EB0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40218BB0
	v5 = Mem0[a0 + 0x0000005D:byte]
	a2 = (uint32) v5
	branch (a2 & 0x00000001) == 0x00000000 l40218ED3
	// succ:  l40218EBF l40218ED3
l40218EBF:
	a3 = 0
	Mem0[a0 + 0x0000005D:byte] = a3
	a0 = 0x40218EC7
	call sdk_chm_cancel_op (retsize: 0;)
	a2 = 0x40218BB8
	a0 = 0x40218ECD
	call fn40304430 (retsize: 0;)
	a2 = 0x40218DEC
	a0 = 0x40218ED3
	call fn40304430 (retsize: 0;)
	// succ:  l40218ED3
l40218ED3:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_scan_cancel_exit
sdk_scan_cancel_exit:


// sdk_scan_add_bssid
// Return size: 0
void sdk_scan_add_bssid()
sdk_scan_add_bssid_entry:
	// succ:  l40218FBC
l40218FBC:
	a1 = fp
	a4 = 6
	a3 = a2
	a1 = a1 - 16
	a2 = 0x40218FB8
	Mem0[a1:word32] = a0
	a0 = 0x40203130
	v7 = a0
	a0 = 0x40218FCE
	call v7 (retsize: 0;)
	a2 = 0x40218BB0
	a0 = 1
	Mem0[a2 + 0x000000B2:byte] = a0
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_scan_add_bssid_exit
sdk_scan_add_bssid_exit:


// sdk_scan_remove_bssid
// Return size: 0
void sdk_scan_remove_bssid()
sdk_scan_remove_bssid_entry:
	// succ:  l40218FE0
l40218FE0:
	a1 = fp
	a3 = 0x40218BB0
	a2 = 0
	Mem0[a3 + 0x000000B2:byte] = a2
	return
	// succ:  sdk_scan_remove_bssid_exit
sdk_scan_remove_bssid_exit:


// sdk_scan_hidden_ssid
// Return size: 0
void sdk_scan_hidden_ssid()
sdk_scan_hidden_ssid_entry:
	// succ:  l40218FEC
l40218FEC:
	a1 = fp
	a3 = 0x40218BB0
	Mem0[a3 + 0x000000B3:byte] = a2
	return
	// succ:  sdk_scan_hidden_ssid_exit
sdk_scan_hidden_ssid_exit:


// sdk_scan_add_probe_ssid
// Return size: 0
void sdk_scan_add_probe_ssid()
sdk_scan_add_probe_ssid_entry:
	// succ:  l40218FF4
l40218FF4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	a12 = a2
	a13 = a5
	branch a2 >=u 0x00000003 l40219026
	// succ:  l40219004 l40219026
l40219004:
	a0 = 0x40218BB0
	branch a5 != 1 l40219021
	// succ:  l4021900A l40219021
l4021900A:
	a5 = a0
	a2 = a2 + a2 * 0x00000008
	a2 = a5 + a2 * 0x00000004
	Mem0[a2 + 0x00000060:word32] = a4
	a2 = a2 + 100
	a0 = 0x40203130
	v9 = a0
	a0 = 0x4021901E
	call v9 (retsize: 0;)
	a0 = 0x40218BB0
	// succ:  l40219021
l40219021:
	a6 = a12 + a0
	Mem0[a6 + 0x000000A8:byte] = a13
	// succ:  l40219026
l40219026:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_scan_add_probe_ssid_exit
sdk_scan_add_probe_ssid_exit:


// sdk_scan_remove_probe_ssid
// Return size: 0
void sdk_scan_remove_probe_ssid()
sdk_scan_remove_probe_ssid_entry:
	// succ:  l40219034
l40219034:
	a1 = fp
	branch a2 >=u 0x00000003 l4021904A
	// succ:  l40219037 l4021904A
l40219037:
	a3 = 0
	a5 = 0x40218BB0
	a4 = a2 + a2 * 0x00000008
	a4 = a5 + a4 * 0x00000004
	a5 = a2 + a5
	Mem0[a5 + 0x000000A8:byte] = a3
	Mem0[a4 + 0x00000060:word32] = a3
	// succ:  l4021904A
l4021904A:
	return
	// succ:  sdk_scan_remove_probe_ssid_exit
sdk_scan_remove_probe_ssid_exit:


// sdk_scan_clear_channles
// Return size: 0
void sdk_scan_clear_channles()
sdk_scan_clear_channles_entry:
	// succ:  l40219168
l40219168:
	a1 = fp
	a4 = 0
	a7 = 0x402035F0
	a6 = -3
	a5 = 14
	// succ:  l40219171
l40219171:
	a8 = a4 + 1
	a3 = a4 + a4 * 0x00000002
	a3 = a7 + a3 * 0x00000004
	a2 = Mem0[a3 + 0x00000084:word32]
	a4 = a8 & 0x000000FF
	a2 = a2 & a6
	Mem0[a3 + 0x00000084:word32] = a2
	branch a4 != a5 l40219171
	// succ:  l40219188 l40219171
l40219188:
	return
	// succ:  sdk_scan_clear_channles_exit
sdk_scan_clear_channles_exit:


// fn4021919C
// Return size: 0
void fn4021919C()
fn4021919C_entry:
	// succ:  l4021919C
l4021919C:
	a1 = fp
	a1 = a1 - 16
	a6 = 0x40218BB0
	Mem0[a1:word32] = a0
	v5 = Mem0[a6 + 0x0000005D:byte]
	a0 = (uint32) v5
	a2 = a6 + 8
	branch (a0 & 0x00000001) == 0x00000000 l402191D0
	// succ:  l402191AE l402191D0
l402191AE:
	a3 = 0x0000000A
	branch (a3 & a0) == 0x00000000 l402191BE
	// succ:  l402191B4 l402191BE
l402191B4:
	a3 = 0
	a4 = 0
	a0 = 0x402191BB
	call fn4030438C (retsize: 0;)
	goto l402191D0
	// succ:  l402191D0
l402191BE:
	a4 = Mem0[a6 + 0x00000004:word32]
	branch (a4 & 0x00000200) == 0x00000000 l402191CD
	// succ:  l402191C4 l402191CD
l402191C4:
	a3 = Mem0[a6 + 0x00000040:word32]
	a4 = 0x00000000
	a0 = 0x402191CD
	call fn4030438C (retsize: 0;)
	// succ:  l402191CD
l402191CD:
	a0 = 0x402191D0
	call fn40318D40 (retsize: 0;)
	// succ:  l402191D0
l402191D0:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn4021919C_exit
fn4021919C_exit:


// sdk_scan_set_desChan
// Return size: 0
void sdk_scan_set_desChan()
sdk_scan_set_desChan_entry:
	// succ:  l402191D8
l402191D8:
	a1 = fp
	a4 = 0x40218BB0
	a3 = a2 - 1
	Mem0[a4 + 0x000000AB:byte] = a3
	return
	// succ:  sdk_scan_set_desChan_exit
sdk_scan_set_desChan_exit:


// sdk_scan_get_type
// Return size: 0
void sdk_scan_get_type()
sdk_scan_get_type_entry:
	// succ:  l402191E4
l402191E4:
	a1 = fp
	a2 = 0x40218BB0
	a2 = Mem0[a2 + 0x00000004:word32]
	return
	// succ:  sdk_scan_get_type_exit
sdk_scan_get_type_exit:


// sdk_cannel_scan_connect_state
// Return size: 0
void sdk_cannel_scan_connect_state()
sdk_cannel_scan_connect_state_entry:
	// succ:  l402191EC
l402191EC:
	a1 = fp
	a4 = 0x402035F0
	a3 = Mem0[a4 + 0x0000001C:word32]
	a2 = 0x40212EEC
	branch (a3 & 0x00004000) == 0x00000000 l402191FC
	// succ:  l402191F7 l402191FC
l402191F7:
	a2 = a3 & a2
	Mem0[a4 + 0x0000001C:word32] = a2
	// succ:  l402191FC
l402191FC:
	return
	// succ:  sdk_cannel_scan_connect_state_exit
sdk_cannel_scan_connect_state_exit:


// sdk_scan_connect_state
// Return size: 0
void sdk_scan_connect_state()
sdk_scan_connect_state_entry:
	// succ:  l40219204
l40219204:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = Mem0[a2 + 0x00000000:word32]
	a2 = 0x00000001
	Mem0[a1:word32] = a0
	a0 = 0x40219215
	call sdk_ppCheckTxIdle (retsize: 0;)
	a4 = 0x402035F0
	a5 = 0x4020CB24
	a0 = Mem0[a4 + 0x0000001C:word32]
	branch a2 != 0x00000000 l4021923E
	// succ:  l4021921F l4021923E
l4021921F:
	a3 = 0x40212EEC
	a2 = 0x40219200
	a3 = a0 & a3
	Mem0[a4 + 0x0000001C:word32] = a3
	a0 = 0x4021262C
	v8 = a0
	a0 = 0x40219230
	call v8 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = 3
	a4 = 0
	a5 = 0
	a0 = 0x4021923B
	call fn40318C3C (retsize: 0;)
	goto l40219243
	// succ:  l40219243
l4021923E:
	a5 = a0 | a5
	Mem0[a4 + 0x0000001C:word32] = a5
	// succ:  l40219243
l40219243:
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_scan_connect_state_exit
sdk_scan_connect_state_exit:


// sdk_scan_check_hidden
// Return size: 0
void sdk_scan_check_hidden()
sdk_scan_check_hidden_entry:
	// succ:  l4021924C
l4021924C:
	a1 = fp
	v4 = Mem0[a2 + 0x00000001:byte]
	a6 = (uint32) v4
	a5 = 0
	branch a6 == 0x00000000 l40219266
	// succ:  l40219253 l40219266
l40219253:
	a3 = a2 + a5
	v8 = Mem0[a3 + 0x00000002:byte]
	a3 = (uint32) v8
	a5 = a5 + 1
	branch a3 == 0x00000000 l40219260
	// succ:  l4021925C l40219260
l4021925C:
	a2 = 0
	return
	// succ:  sdk_scan_check_hidden_exit
l40219260:
	a5 = a5 & 0x000000FF
	branch a6 != a5 l40219253
	// succ:  l40219266 l40219253
l40219266:
	a2 = 1
	return
	a2 = 1
	return
	// succ:  sdk_scan_check_hidden_exit sdk_scan_check_hidden_exit
sdk_scan_check_hidden_exit:


// sdk_scan_profile_check
// Return size: 0
void sdk_scan_profile_check()
sdk_scan_profile_check_entry:
	// succ:  l40219278
l40219278:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a0
	a0 = 0x402035F0
	Mem0[a1 + 0x0000001C:word32] = a12
	a4 = Mem0[a0 + 0x00000010:word32]
	a12 = a3
	a3 = Mem0[a4 + 0x00000048:word32]
	a5 = -17
	a3 = a3 & a5
	Mem0[a4 + 0x00000048:word32] = a3
	v8 = Mem0[a0 + 0x00000018:byte]
	a0 = (uint32) v8
	Mem0[a1 + 0x00000010:word32] = a2
	a0 = a0 - 2
	branch a0 == 0x00000000 l4021936A
	// succ:  l4021929C l4021936A
l4021929C:
	a2 = Mem0[a12 + 0x00000020:word32]
	a0 = 0x402192A1
	call fn4031924C (retsize: 0;)
	a0 = 0x4021926C
	branch a2 != 0x00000000 l402192E7
	// succ:  l402192A6 l402192E7
l402192A6:
	Mem0[a1 + 0x00000008:word32] = a0
	a3 = Mem0[a12 + 0x00000020:word32]
	a5 = a0 - 29
	v10 = Mem0[a5 + 0x00000003:byte]
	a4 = (uint32) v10
	v12 = Mem0[a5 + 0x00000002:byte]
	a6 = (uint32) v12
	a4 = a4 << 24
	a4 = a4 | a6
	a4 = a4 << 24
	v13 = Mem0[a5 + 0x00000001:byte]
	a6 = (uint32) v13
	v14 = Mem0[a5 + 0x00000000:byte]
	a5 = (uint32) v14
	a4 = a4 | a6
	v15 = Mem0[a3 + 0x00000001:byte]
	a6 = (uint32) v15
	a4 = a4 << 24
	a4 = a4 | a5
	branch a4 != a6 l402192E2
	// succ:  l402192D1 l402192E2
l402192D1:
	a3 = a3 + 2
	a2 = a0
	a2 = a2 - 25
	a0 = 0x40202AA8
	v16 = a0
	a0 = 0x402192DE
	call v16 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000008:word32]
	branch a2 == 0x00000000 l402192E7
	// succ:  l402192E2 l402192E7
l402192E2:
	a2 = 0
	goto l4021936C
	// succ:  l4021936C
l402192E7:
	v17 = Mem0[a0 + 0x00000080:byte]
	a3 = (uint32) v17
	branch a3 != 1 l4021930A
	// succ:  l402192ED l4021930A
l402192ED:
	Mem0[a1 + 0x00000008:word32] = a0
	branch a3 == 0x00000000 l402192E2
	// succ:  l402192F3 l402192E2
l402192F3:
	a2 = 0x402138FC
	a3 = Mem0[a1 + 0x00000010:word32]
	a4 = 0x00000006
	a3 = a3 + 16
	a0 = 0x40202AA8
	v18 = a0
	a0 = 0x40219305
	call v18 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000008:word32]
	branch a2 != 0x00000000 l402192E2
	// succ:  l4021930A l402192E2
l4021930A:
	v19 = Mem0[a12 + 0x00000002:uint16]
	a4 = (uint32) v19
	a3 = 0x000000F0
	branch (a4 & 0x00000002) != 0x00000000 l402192E2
	// succ:  l40219313 l402192E2
l40219313:
	a2 = 0x40218BB0
	a8 = 0
	Mem0[a0 + 0x0000000C:byte] = a8
	Mem0[a0 + 0x0000000B:byte] = a8
	Mem0[a0 + 0x0000000A:byte] = a8
	v22 = Mem0[a2 + 0x000000C4:byte]
	a7 = (uint32) v22
	Mem0[a0 + 0x00000009:byte] = a8
	a7 = a7 & 0x0000000F
	a8 = a7 << 28
	a7 = a7 | a8
	Mem0[a2 + 0x000000C4:byte] = a7
	a8 = 1
	Mem0[a0 + 0x00000008:byte] = a8
	Mem0[a0 + 0x00000007:byte] = a8
	a5 = Mem0[a12 + 0x00000034:word32]
	Mem0[a1 + 0x00000014:word32] = a8
	branch a5 == 0x00000000 l40219375
	// succ:  l40219341 l40219375
l40219341:
	a10 = 0x402035F0
	a10 = Mem0[a10 + 0x00000010:word32]
	a2 = a12
	a9 = Mem0[a10 + 0x00000048:word32]
	a11 = 16
	a9 = a9 | a11
	Mem0[a10 + 0x00000048:word32] = a9
	a0 = 0x40219356
	call fn40316E88 (retsize: 0;)
	a2 = 0x40218BB0
	v26 = Mem0[a2 + 0x000000C4:byte]
	a0 = (uint32) v26
	a3 = 0x000000F0
	a0 = a0 & a3
	a3 = Mem0[a1 + 0x00000014:word32]
	a0 = a0 | a3
	Mem0[a2 + 0x000000C4:byte] = a0
	// succ:  l4021936A
l4021936A:
	a2 = 1
	// succ:  l4021936C
l4021936C:
	a12 = Mem0[a1 + 0x0000001C:word32]
	a0 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_scan_profile_check_exit
l40219375:
	a5 = Mem0[a12 + 0x00000030:word32]
	branch a5 == 0x00000000 l4021939B
	// succ:  l4021937B l4021939B
l4021937B:
	a7 = 0x402035F0
	a7 = Mem0[a7 + 0x00000010:word32]
	a2 = a12
	a6 = Mem0[a7 + 0x00000048:word32]
	a8 = 16
	a6 = a6 | a8
	Mem0[a7 + 0x00000048:word32] = a6
	a0 = 0x40219391
	call fn40316D70 (retsize: 0;)
	a2 = 0x40218BB0
	a8 = 2
	Mem0[a1 + 0x00000014:word32] = a8
	goto l40259359
	// succ:  l40259359
l4021939B:
	v27 = Mem0[a12 + 0x00000002:uint16]
	a9 = (uint32) v27
	Mem0[a1 + 0x00000008:word32] = a0
	branch (a9 & 0x00000010) == 0x00000000 l402193D4
	// succ:  l402193A4 l402193D4
l402193A4:
	a12 = 0x40203750
	a2 = a12 | a12
	a0 = 0x402193AD
	call fn4030600C (retsize: 0;)
	Mem0[a1 + 0x0000000C:word32] = a12
	Mem0[a1:word32] = a2
	a3 = a1
	a2 = a12
	a0 = 0x402193B8
	call sdk_wpa_config_parse_string (retsize: 0;)
	a12 = a2
	branch a2 != 0x00000000 l402193DA
	// succ:  l402193BC l402193DA
l402193BC:
	a2 = 0x40219270
	a3 = Mem0[a1 + 0x0000000C:word32]
	a0 = 0x402034D0
	v28 = a0
	a0 = 0x402193C7
	call v28 (retsize: 0;)
	a11 = 0x402035F0
	a11 = Mem0[a11 + 0x00000010:word32]
	a10 = 2
	Mem0[a11 + 0x000000BA:byte] = a10
	goto l402592E2
	// succ:  l402592E2
l402193D4:
	a0 = a7 & a3
	goto l40259367
	// succ:  l40259367
l402193DA:
	a0 = Mem0[a1 + 0x00000000:word32]
	branch a0 != 5 l4021942B
	// succ:  l402193DF l4021942B
l402193DF:
	a0 = 7
	a2 = Mem0[a1 + 0x00000008:word32]
	Mem0[a2 + 0x00000009:byte] = a0
	// succ:  l402193E6
l402193E6:
	a3 = 16
	a2 = 0x40219274
	Mem0[a1 + 0x00000004:word32] = a2
	a0 = 0x40213724
	v29 = a0
	a0 = 0x402193F3
	call v29 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000004:word32]
	a3 = a12
	a4 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x40203130
	v30 = a0
	a0 = 0x402193FF
	call v30 (retsize: 0;)
	a2 = a12
	a0 = 0x402034CC
	v31 = a0
	a0 = 0x40219407
	call v31 (retsize: 0;)
	a6 = 0x402035F0
	a3 = 3
	a6 = Mem0[a6 + 0x00000010:word32]
	a2 = 0x40218BB0
	a5 = Mem0[a6 + 0x00000048:word32]
	a7 = 16
	a5 = a5 | a7
	Mem0[a6 + 0x00000048:word32] = a5
	v32 = Mem0[a2 + 0x000000C4:byte]
	a0 = (uint32) v32
	a4 = 0x000000F0
	a0 = a0 & a4
	a0 = a0 | a3
	goto l40259367
	// succ:  l40259367
l4021942B:
	a7 = 13
	branch a0 != a7 l402193E6
	// succ:  l40219430 l402193E6
l40219430:
	a0 = 8
	goto l402593E1
	// succ:  l402593E1
l402592E2:
l40259359:
l40259367:
l402593E1:
sdk_scan_profile_check_exit:


// fn40219438
// Return size: 0
void fn40219438()
fn40219438_entry:
	// succ:  l40219438
l40219438:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	a12 = 0x402035F0
	a13 = 0x402131CC
	a2 = Mem0[a12 + 0x00000180:word32]
	branch a2 == 0x00000000 l4021945F
	// succ:  l4021944C l4021945F
l4021944C:
	a0 = Mem0[a2 + 0x00000000:word32]
	Mem0[a12 + 0x00000180:word32] = a0
	branch a0 != 0x00000000 l40219456
	// succ:  l40219453 l40219456
l40219453:
	Mem0[a12 + 0x00000184:word32] = a13
	// succ:  l40219456
l40219456:
	a0 = 0x40202678
	v7 = a0
	a0 = 0x4021945C
	call v7 (retsize: 0;)
	goto l40259447
	// succ:  l40259447
l4021945F:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn40219438_exit
l40259447:
fn40219438_exit:


// sdk_scan_parse_beacon
// Return size: 0
void sdk_scan_parse_beacon()
sdk_scan_parse_beacon_entry:
	// succ:  l402195DC
l402195DC:
	a1 = fp
	a1 = a1 - 96
	Mem0[a1 + 0x0000003C:word32] = a2
	Mem0[a1 + 0x00000044:word32] = a4
	Mem0[a1 + 0x00000048:word32] = a0
	Mem0[a1 + 0x00000054:word32] = a14
	Mem0[a1 + 0x00000050:word32] = a13
	Mem0[a1 + 0x0000004C:word32] = a12
	Mem0[a1 + 0x00000058:word32] = a15
	a12 = a3 | a3
	a15 = 0x40218BB0
	a13 = Mem0[a2 + 0x00000020:word32]
	a14 = Mem0[a2 + 0x00000010:word32]
	a13 = Mem0[a13 + 0x00000008:word32]
	v11 = Mem0[a14 + 0x00000000:byte]
	a14 = (uint32) v11
	v12 = Mem0[a15 + 0x000000B3:byte]
	a0 = (uint32) v12
	a14 = a14 << 8
	a14 = a14 >> 24
	branch a0 != 0x00000000 l4021961D
	// succ:  l4021960F l4021961D
l4021960F:
	a0 = Mem0[a3 + 0x00000020:word32]
	v13 = Mem0[a0 + 0x00000001:byte]
	a2 = (uint32) v13
	v14 = Mem0[a0 + 0x00000002:byte]
	a3 = (uint32) v14
	branch a2 == 0x00000000 l4021973D
	// succ:  l4021961A l4021973D
l4021961A:
	branch a3 == 0x00000000 l4021973D
	// succ:  l4021961D l4021973D
l4021961D:
	a2 = a13
	a0 = 0x40219622
	call fn40314A84 (retsize: 0;)
	v15 = Mem0[a12 + 0x00000000:byte]
	a4 = (uint32) v15
	Mem0[a1 + 0x00000038:word32] = a14
	branch a2 == a4 l4021962F
	// succ:  l4021962A l4021962F
l4021962A:
	a2 = -1
	goto l4021973F
	// succ:  l4021973F
l4021962F:
	a14 = Mem0[a1 + 0x0000003C:word32]
	a14 = Mem0[a14 + 0x00000004:word32]
	a5 = Mem0[a15 + 0x00000054:word32]
	a14 = Mem0[a14 + 0x00000004:word32]
	branch a5 == 0x00000000 l402196B5
	// succ:  l4021963E l402196B5
l4021963E:
	a0 = Mem0[a15 + 0x00000058:word32]
	branch a0 == 0x00000000 l402196B5
	// succ:  l40219644 l402196B5
l40219644:
	a2 = a14 + 10
	Mem0[a1 + 0x00000030:word32] = a2
	a0 = 0x4021964B
	call fn4031946C (retsize: 0;)
	branch a2 != 0x00000000 l402196B5
	// succ:  l4021964E l402196B5
l4021964E:
	v17 = Mem0[a15 + 0x0000005D:byte]
	a2 = (uint32) v17
	branch (a2 & 0x00000001) == 0x00000000 l402196B5
	// succ:  l40219654 l402196B5
l40219654:
	a0 = 0x40218FB8
	v19 = Mem0[a15 + 0x000000A9:byte]
	a6 = (uint32) v19
	a2 = a0 - 36
	a3 = a6 - 1
	branch a3 != 0x00000000 l4021984E
	// succ:  l40219662 l4021984E
l40219662:
	v20 = Mem0[a15 + 0x000000B2:byte]
	a4 = (uint32) v20
	a4 = a4 - 1
	branch a4 != 0x00000000 l4021987E
	// succ:  l4021966A l4021987E
l4021966A:
	a4 = Mem0[a12 + 0x00000020:word32]
	a3 = a4 + 2
	v21 = Mem0[a4 + 0x00000001:byte]
	a4 = (uint32) v21
	a0 = 0x40219674
	call fn40311510 (retsize: 0;)
	branch a2 != 0x00000000 l402196B5
	// succ:  l40219676 l402196B5
l40219676:
	a2 = 0x40218FB8
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = 6
	a0 = 0x40202AA8
	v22 = a0
	a0 = 0x40219683
	call v22 (retsize: 0;)
	branch a2 != 0x00000000 l402196B5
	// succ:  l40219685 l402196B5
l40219685:
	a2 = a14
	a3 = a12
	a4 = Mem0[a1 + 0x00000038:word32]
	v23 = Mem0[a13 + 0x00000004:uint16]
	a5 = (uint32) v23
	a4 = a4 - 96
	a4 = a4 << 8
	a4 = a4 >> 24
	a0 = 0x4021969A
	call fn403194A4 (retsize: 0;)
	goto l402196B5
	// succ:  l402196B5
l4021969D:
	a2 = a14 | a14
	a3 = a12 | a12
	a4 = Mem0[a1 + 0x00000038:word32]
	v49 = Mem0[a13 + 0x00000004:uint16]
	a5 = (uint32) v49
	a4 = a4 - 96
	a4 = a4 << 8
	a4 = a4 >> 24
	a0 = 0x402196B5
	call fn403194A4 (retsize: 0;)
	// succ:  l402196B5
l402196B5:
	a5 = 0x402131CC
	a0 = 0x402035F0
	v24 = Mem0[a5 + 0x00000054:byte]
	a5 = (uint32) v24
	a6 = Mem0[a0 + 0x000001E4:word32]
	branch a5 == 1 l4021973D
	// succ:  l402196C4 l4021973D
l402196C4:
	branch a6 == 0x00000000 l4021970E
	// succ:  l402196C7 l4021970E
l402196C7:
	a8 = Mem0[a12 + 0x00000020:word32]
	branch a8 == 0x00000000 l4021970E
	// succ:  l402196CC l4021970E
l402196CC:
	a2 = a14 + 16
	Mem0[a1 + 0x00000034:word32] = a2
	a0 = 0x402196D4
	call sdk_cnx_rc_search (retsize: 0;)
	Mem0[a1 + 0x0000005C:word32] = a2
	branch a2 != 0x00000000 l4021975E
	// succ:  l402196DA l4021975E
l402196DA:
	a0 = Mem0[a12 + 0x00000020:word32]
	a9 = 0x402035F0
	v27 = Mem0[a0 + 0x00000001:byte]
	a4 = (uint32) v27
	a9 = Mem0[a9 + 0x000001E4:word32]
	branch a9 != a4 l402196F6
	// succ:  l402196E8 l402196F6
l402196E8:
	a2 = 0x402138F4
	a3 = a0 + 2
	a0 = 0x40202AA8
	v28 = a0
	a0 = 0x402196F3
	call v28 (retsize: 0;)
	branch a2 == 0x00000000 l4021975E
	// succ:  l402196F6 l4021975E
l402196F6:
	a10 = 0x4021926C
	v30 = Mem0[a10 + 0x00000080:byte]
	a10 = (uint32) v30
	branch a10 == 0x00000000 l4021970E
	// succ:  l402196FE l4021970E
l402196FE:
	a2 = 0x402138FC
	a3 = Mem0[a1 + 0x00000034:word32]
	a4 = 6
	a0 = 0x40202AA8
	v31 = a0
	a0 = 0x4021970B
	call v31 (retsize: 0;)
	branch a2 == 0x00000000 l4021975E
	// succ:  l4021970E l4021975E
l4021970E:
	a14 = 0
	// succ:  l40219710
l40219710:
	a2 = a14 + a14 * 0x00000008
	a2 = a15 + a2 * 0x00000004
	a4 = Mem0[a2 + 0x00000060:word32]
	branch a4 == 0x00000000 l40219753
	// succ:  l4021971B l40219753
l4021971B:
	a0 = Mem0[a12 + 0x00000020:word32]
	branch a0 == 0x00000000 l40219753
	// succ:  l4021971F l40219753
l4021971F:
	v32 = Mem0[a0 + 0x00000001:byte]
	a3 = (uint32) v32
	branch a4 != a3 l40219753
	// succ:  l40219725 l40219753
l40219725:
	a2 = a2 + 100
	a3 = a0 + 2
	a0 = 0x40202AA8
	v33 = a0
	a0 = 0x40219730
	call v33 (retsize: 0;)
	branch a2 != 0x00000000 l40219753
	// succ:  l40219732 l40219753
l40219732:
	v34 = Mem0[a13 + 0x00000008:byte]
	a4 = (uint32) v34
	a5 = 4
	a4 = a4 | a5
	Mem0[a13 + 0x00000008:byte] = a4
	// succ:  l4021973D
l4021973D:
	a2 = 0
	// succ:  l4021973F
l4021973F:
	a12 = Mem0[a1 + 0x0000004C:word32]
	a13 = Mem0[a1 + 0x00000050:word32]
	a14 = Mem0[a1 + 0x00000054:word32]
	a15 = Mem0[a1 + 0x00000058:word32]
	a0 = Mem0[a1 + 0x00000048:word32]
	a1 = a1 + 96
	return
	// succ:  sdk_scan_parse_beacon_exit
l40219753:
	a14 = a14 + 1
	a14 = a14 & 0x000000FF
	branch a14 != 2 l40219710
	// succ:  l4021975B l40219710
l4021975B:
	goto l4025973D
	// succ:  l4025973D
l4021975E:
	a2 = a14
	a3 = a12
	a4 = Mem0[a1 + 0x00000044:word32]
	a0 = 0x40219768
	call fn40319278 (retsize: 0;)
	branch a2 == 0x00000000 l4021983D
	// succ:  l4021976B l4021983D
l4021976B:
	a4 = Mem0[a12 + 0x00000020:word32]
	a2 = a1
	a3 = a4 + 2
	v35 = Mem0[a4 + 0x00000001:byte]
	a4 = (uint32) v35
	a0 = 0x40219777
	call fn40311118 (retsize: 0;)
	a7 = Mem0[a12 + 0x00000020:word32]
	a5 = Mem0[a1 + 0x0000005C:word32]
	v37 = Mem0[a7 + 0x00000001:byte]
	a7 = (uint32) v37
	a6 = 0
	a7 = a7 + a1
	Mem0[a7:byte] = a6
	branch a5 != 0x00000000 l402197E5
	// succ:  l40219789 l402197E5
l40219789:
	a2 = Mem0[a1 + 0x00000034:word32]
	a0 = 0x4021978E
	call sdk_cnx_bss_alloc (retsize: 0;)
	Mem0[a1 + 0x00000040:word32] = a2
	a3 = 0x00000110
	a0 = 0x40213724
	v38 = a0
	a0 = 0x4021979A
	call v38 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000038:word32]
	a4 = 2
	a2 = Mem0[a1 + 0x00000040:word32]
	v39 = Mem0[a13 + 0x00000008:byte]
	a8 = (uint32) v39
	a9 = 8
	a8 = a8 | a9
	Mem0[a13 + 0x00000008:byte] = a8
	Mem0[a2 + 0x00000078:word32] = a13
	a0 = 0x402197B2
	call sdk_cnx_rc_update_rssi (retsize: 0;)
	a2 = Mem0[a1 + 0x00000040:word32]
	a3 = 10
	a4 = 0
	a0 = 0x402197BC
	call sdk_cnx_rc_update_state_metric (retsize: 0;)
	a2 = Mem0[a1 + 0x00000040:word32]
	a3 = 5
	a4 = 0
	a0 = 0x402197C6
	call sdk_cnx_rc_update_age (retsize: 0;)
	a4 = a14
	a2 = Mem0[a1 + 0x00000040:word32]
	a3 = a12
	a0 = 0x402197D0
	call sdk_cnx_update_bss (retsize: 0;)
	a3 = a12
	a14 = Mem0[a1 + 0x00000040:word32]
	a4 = Mem0[a1 + 0x00000044:word32]
	a2 = a14
	a0 = 0x402197DD
	call sdk_cnx_update_bss_more (retsize: 0;)
	a2 = a14
	a0 = 0x402197E2
	call sdk_cnx_add_rc (retsize: 0;)
	goto l40219825
	// succ:  l40219825
l402197E5:
	a2 = a5 | a5
	Mem0[a5 + 0x00000078:word32] = a13
	a3 = Mem0[a1 + 0x00000038:word32]
	a4 = 2
	a0 = 0x402197F2
	call sdk_cnx_rc_update_rssi (retsize: 0;)
	a2 = Mem0[a1 + 0x0000005C:word32]
	a3 = 6
	a4 = 1
	a0 = 0x402197FC
	call sdk_cnx_rc_update_state_metric (retsize: 0;)
	a2 = Mem0[a1 + 0x0000005C:word32]
	a3 = 5
	a4 = 0
	a0 = 0x40219806
	call sdk_cnx_rc_update_age (retsize: 0;)
	a0 = Mem0[a12 + 0x00000014:word32]
	branch a0 == 0x00000000 l40219819
	// succ:  l4021980A l40219819
l4021980A:
	a11 = Mem0[a1 + 0x0000005C:word32]
	v41 = Mem0[a0 + 0x00000002:byte]
	a14 = (uint32) v41
	Mem0[a11 + 0x00000025:byte] = a14
	v42 = Mem0[a0 + 0x00000003:byte]
	a10 = (uint32) v42
	Mem0[a11 + 0x00000024:byte] = a10
	// succ:  l40219819
l40219819:
	a2 = Mem0[a1 + 0x0000005C:word32]
	a3 = a12 | a12
	a4 = Mem0[a1 + 0x00000044:word32]
	a0 = 0x40219825
	call sdk_cnx_update_bss_more (retsize: 0;)
	// succ:  l40219825
l40219825:
	a0 = Mem0[a15 + 0x00000004:word32]
	a0 = a0 >>u 0x0000000A & 0x00000001
	branch a0 == 0x00000000 l4021970E
	// succ:  l4021982E l4021970E
l4021982E:
	v43 = Mem0[a15 + 0x0000005D:byte]
	a2 = (uint32) v43
	a3 = 0x00000004
	a2 = a2 | a3
	Mem0[a15 + 0x0000005D:byte] = a2
	goto l4025970E
	// succ:  l4025970E
l4021983D:
	a4 = Mem0[a1 + 0x0000005C:word32]
	branch a4 == 0x00000000 l4021970E
	// succ:  l40219843 l4021970E
l40219843:
	a2 = a4
	a0 = 0x40219848
	call sdk_cnx_remove_rc (retsize: 0;)
	goto l4025970E
	// succ:  l4025970E
l4021984E:
	v46 = Mem0[a15 + 0x000000B2:byte]
	a5 = (uint32) v46
	a5 = a5 - 1
	branch a5 != 0x00000000 l4021969D
	// succ:  l40219856 l4021969D
l40219856:
	a2 = 0x40218FB8
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = 6
	a0 = 0x40202AA8
	v47 = a0
	a0 = 0x40219863
	call v47 (retsize: 0;)
	branch a2 != 0x00000000 l402196B5
	// succ:  l40219866 l402196B5
l40219866:
	a2 = a14
	a3 = a12
	a4 = Mem0[a1 + 0x00000038:word32]
	v48 = Mem0[a13 + 0x00000004:uint16]
	a5 = (uint32) v48
	a4 = a4 - 96
	a4 = a4 << 8
	a4 = a4 >> 24
	a0 = 0x4021987B
	call fn403194A4 (retsize: 0;)
	goto l402596B5
	// succ:  l402596B5
l4021987E:
	branch a6 != 1 l4021984E
	// succ:  l40219881 l4021984E
l40219881:
	a4 = Mem0[a12 + 0x00000020:word32]
	a3 = a4 + 2
	v44 = Mem0[a4 + 0x00000001:byte]
	a4 = (uint32) v44
	a0 = 0x4021988D
	call fn40311510 (retsize: 0;)
	branch a2 != 0x00000000 l402196B5
	// succ:  l40219890 l402196B5
l40219890:
	a2 = a14 | a14
	a3 = a12
	a4 = Mem0[a1 + 0x00000038:word32]
	v45 = Mem0[a13 + 0x00000004:uint16]
	a5 = (uint32) v45
	a4 = a4 - 96
	a4 = a4 << 8
	a4 = a4 >> 24
	a0 = 0x402198A6
	call fn403194A4 (retsize: 0;)
	// succ:  l402596B5
l402596B5:
l4025970E:
l4025973D:
sdk_scan_parse_beacon_exit:


// sdk_sta_status_set
// Return size: 0
void sdk_sta_status_set()
sdk_sta_status_set_entry:
	// succ:  l402198D4
l402198D4:
	a1 = fp
	a7 = 0x402035F0
	a5 = Mem0[a7 + 0x00000010:word32]
	v6 = Mem0[a5 + 0x000000B8:byte]
	a6 = (uint32) v6
	v8 = Mem0[a5 + 0x000000B9:byte]
	a10 = (uint32) v8
	branch a6 == 1 l402198F8
	// succ:  l402198E2 l402198F8
l402198E2:
	branch a2 == a6 l402198F8
	// succ:  l402198E5 l402198F8
l402198E5:
	a6 = 0
	Mem0[a5 + 0x000000B9:byte] = a6
	a4 = Mem0[a7 + 0x00000010:word32]
	a3 = 1
	Mem0[a4 + 0x000000BA:byte] = a3
	// succ:  l402198F1
l402198F1:
	a8 = Mem0[a7 + 0x00000010:word32]
	Mem0[a8 + 0x000000B8:byte] = a2
	return
	// succ:  sdk_sta_status_set_exit
l402198F8:
	a10 = a10 + 1
	Mem0[a5 + 0x000000B9:byte] = a10
	a5 = Mem0[a7 + 0x00000010:word32]
	v14 = Mem0[a5 + 0x000000B9:byte]
	a9 = (uint32) v14
	branch a9 != 3 l402198F1
	// succ:  l40219905 l402198F1
l40219905:
	Mem0[a5 + 0x000000BA:byte] = a2
	// succ:  l402598F1
l402598F1:
sdk_sta_status_set_exit:


// sdk_ieee80211_sta_new_state
// Return size: 0
void sdk_ieee80211_sta_new_state()
sdk_ieee80211_sta_new_state_entry:
	// succ:  l4021990C
l4021990C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000008:word32] = a13
	a14 = a2
	a13 = Mem0[a2 + 0x00000000:word32]
	a12 = Mem0[a2 + 0x00000010:word32]
	a13 = a13 + 0x00000600
	a0 = Mem0[a12 + 0x0000003C:word32]
	Mem0[a12 + 0x0000003C:word32] = a3
	a13 = Mem0[a13 + 0x0000008C:word32]
	branch a3 == 0x00000000 l40219985
	// succ:  l4021992C l40219985
l4021992C:
	branch a3 != 2 l40219932
	// succ:  l4021992F l40219932
l4021992F:
	goto l402199B9
	// succ:  l402199B9
l40219932:
	branch a3 == 3 l40219961
	// succ:  l40219935 l40219961
l40219935:
	branch a3 != 5 l40219976
	// succ:  l40219938 l40219976
l40219938:
	branch a0 >=u 0x00000004 l40219976
	// succ:  l4021993B l40219976
l4021993B:
	branch a0 <u 0x00000002 l40219976
	// succ:  l4021993E l40219976
l4021993E:
	a3 = a13
	a2 = a4 - 16
	a0 = 1
	a4 = 0
	branch a2 != 0x00000000 l4021994A
	// succ:  l40219947_1 l4021994A
l40219947_1:
	a4 = a0
	// succ:  l4021994A
l4021994A:
	a2 = a12
	a0 = 0x4021994F
	call sdk_cnx_sta_associated (retsize: 0;)
	a3 = a14 + 0x00000200
	v17 = Mem0[a3 + 0x00000008:byte]
	a3 = (uint32) v17
	a3 = a3 - 3
	branch a3 == 0x00000000 l40219A57
	// succ:  l4021995B l40219A57
l4021995B:
	a0 = 0x4021995E
	call sdk_eagle_auth_done (retsize: 0;)
	goto l40219976
	// succ:  l40219976
l40219961:
	branch a0 >=u 0x00000004 l4021996A
	// succ:  l40219964 l4021996A
l40219964:
	branch a0 <u 0x00000002 l4021996A
	// succ:  l40219967 l4021996A
l40219967:
	goto l40219AA6
	// succ:  l40219AA6
l4021996A:
	a4 = a0 - 5
	branch a4 == 0x00000000 l40219A97
	// succ:  l40219970 l40219A97
l40219970:
	a5 = a0 - 7
	branch a5 == 0x00000000 l40219A97
	// succ:  l40219976 l40219A97
l40219976:
	a2 = 0
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	a2 = 0
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_ieee80211_sta_new_state_exit sdk_ieee80211_sta_new_state_exit
l40219985:
	a6 = a0 - 2
	branch a6 == 0x00000000 l40219A5F
	// succ:  l4021998B l40219A5F
l4021998B:
	a7 = a0 - 3
	branch a7 == 0x00000000 l40219A75
	// succ:  l40219991 l40219A75
l40219991:
	branch a0 == 5 l40219997
	// succ:  l40219994 l40219997
l40219994:
	branch a0 != 7 l40219976
	// succ:  l40219997 l40219976
l40219997:
	a8 = a4 & 0x000000FF
	branch a8 != 1 l402199A0
	// succ:  l4021999D l402199A0
l4021999D:
	goto l40219A25
	// succ:  l40219A25
l402199A0:
	a2 = a12 + 4
	a0 = 0x402199A6
	call fn40304430 (retsize: 0;)
	a2 = a12 + 32
	a0 = 0x402199AC
	call fn40304430 (retsize: 0;)
	a2 = a12
	a3 = 0x000000A0
	a4 = 8
	a0 = 0x402199B6
	call fn40317BC0 (retsize: 0;)
	goto l40219A36
	// succ:  l40219A36
l402199B9:
	branch a0 >=u 0x00000002 l402199CC
	// succ:  l402199BC l402199CC
l402199BC:
	a2 = a12
	a3 = 0x000000B0
	a4 = 1
	a0 = 0x402199C6
	call fn40317BC0 (retsize: 0;)
	goto l40259976
	// succ:  l40259976
l402199CC:
	a3 = 0x000000B0
	a7 = 0x000000C0
	branch a0 >=u 0x00000004 l402199D8
	// succ:  l402199D5 l402199D8
l402199D5:
	branch a0 >=u 0x00000002 l40219A40
	// succ:  l402199D8 l40219A40
l402199D8:
	branch a0 != 5 l40219976
	// succ:  l402199DB l40219976
l402199DB:
	a9 = 0x000000A0
	a2 = a4 & 0x000000FF
	branch a2 == a9 l402199F2
	// succ:  l402199E4 l402199F2
l402199E4:
	Mem0[a1 + 0x00000010:word32] = a0
	a10 = a2 - a3
	branch a10 == 0x00000000 l40219AC2
	// succ:  l402199EC l40219AC2
l402199EC:
	branch a2 == a7 l402199F2
	// succ:  l402199EF l402199F2
l402199EF:
	goto l40259976
	// succ:  l40259976
l402199F2:
	a2 = 0x00000002
	a0 = 0x402199F8
	call fn403198D4 (retsize: 0;)
	a2 = a12 + 32
	a0 = 0x402199FE
	call fn40304430 (retsize: 0;)
	a14 = a12 + 4
	a2 = a14 | a14
	a0 = 0x40219A07
	call fn40304430 (retsize: 0;)
	a2 = a14
	a3 = 0x40218EE0
	a4 = 0
	a0 = 0x40219A11
	call fn403042E8 (retsize: 0;)
	a2 = a14
	a3 = 0x000003E8
	a4 = 0
	a0 = 0x40219A1B
	call fn4030438C (retsize: 0;)
	a3 = a13
	a2 = a12
	a0 = 0x40219A22
	call sdk_cnx_sta_leave (retsize: 0;)
	goto l40259976
	// succ:  l40259976
l40219A25:
	a2 = 0x00000004
	a0 = 0x40219A2B
	call fn403198D4 (retsize: 0;)
	a2 = a12 | a12
	a3 = 0x000000A0
	a4 = 4
	a0 = 0x40219A36
	call fn40317BC0 (retsize: 0;)
	// succ:  l40219A36
l40219A36:
	a3 = a13
	a2 = a12
	a0 = 0x40219A3D
	call sdk_cnx_sta_leave (retsize: 0;)
l40219A40:
	a2 = a4 & 0x000000FF
	branch a2 == a3 l40219AB5
	// succ:  l40219A46 l40219AB5
l40219A46:
	a11 = a2 - a7
	branch a11 != 0x00000000 l40219976
	// succ:  l40219A4C l40219976
l40219A4C:
	a2 = a12
	a3 = a4 >> 8
	a0 = 0x40219A54
	call fn403198AC (retsize: 0;)
	goto l40259976
	// succ:  l40259976
l40219A57:
	a12 = 1
	Mem0[a13 + 0x00000018:byte] = a12
	goto l40259976
	// succ:  l40259976
l40219A5F:
	a13 = 0x402035F0
	a13 = Mem0[a13 + 0x00000010:word32]
	v16 = Mem0[a13 + 0x000000B8:byte]
	a13 = (uint32) v16
	a13 = a13 - 2
	branch a13 == 0x00000000 l40219976
	// succ:  l40219A6D l40219976
l40219A6D:
	a2 = 4
	a0 = 0x40219A72
	call fn403198D4 (retsize: 0;)
	goto l40259976
	// succ:  l40259976
l40219A75:
	a2 = a12
	a3 = 0x000000C0
	a4 = 3
	a0 = 0x40219A7F
	call fn40317BC0 (retsize: 0;)
	branch a13 == 0x00000000 l40219976
	// succ:  l40219A82 l40219976
l40219A82:
	a2 = a12 + 4
	a0 = 0x40219A87
	call fn40304430 (retsize: 0;)
	a2 = a12 + 32
	a0 = 0x40219A8D
	call fn40304430 (retsize: 0;)
	a3 = a13
	a2 = a12
	a0 = 0x40219A94
	call sdk_cnx_sta_leave (retsize: 0;)
	goto l40259976
	// succ:  l40259976
l40219A97:
	a2 = a12 | a12
	a3 = 0x00000020
	a4 = 0x00000000
	a0 = 0x40219AA3
	call fn40317BC0 (retsize: 0;)
	goto l40259976
	// succ:  l40259976
l40219AA6:
	a2 = a12 | a12
	a3 = 0x00000000
	a4 = 0x00000000
	a0 = 0x40219AB2
	call fn40317BC0 (retsize: 0;)
	goto l40259976
	// succ:  l40259976
l40219AB5:
	a2 = a12
	a4 = 2
	a0 = 0x40219ABC
	call fn40317BC0 (retsize: 0;)
	goto l40259976
	// succ:  l40259976
l40219AC2:
	a2 = a12 | a12
	a3 = 0x000000B0
	a4 = 0x00000002
	a13 = a0 | a0
	a0 = 0x40219AD1
	call fn40317BC0 (retsize: 0;)
	Mem0[a12 + 0x0000003C:word32] = a13
	// succ:  l40259976
l40259976:
sdk_ieee80211_sta_new_state_exit:


// sdk_sta_input
// Return size: 0
void sdk_sta_input()
sdk_sta_input_entry:
	// succ:  l40219AD8
l40219AD8:
	a1 = fp
	a6 = 0x402131CC
	a1 = a1 - 64
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x00000024:word32] = a15
	Mem0[a1 + 0x00000014:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x0000001C:word32] = a13
	v9 = Mem0[a6 + 0x00000054:byte]
	a6 = (uint32) v9
	a13 = a2
	a12 = a3
	a0 = Mem0[a12 + 0x00000010:word32]
	a3 = a4
	v13 = Mem0[a0 + 0x00000001:byte]
	a4 = (uint32) v13
	a2 = a5
	a4 = a4 >>u 6
	branch a4 != 0x00000000 l40219B06
	// succ:  l40219AFD l40219B06
l40219AFD:
	v15 = Mem0[a0 + 0x00000002:uint16]
	a0 = (uint32) v15
	a0 = a0 & 0x00000FFF
	goto l40219B15
	// succ:  l40219B15
l40219B06:
	v16 = Mem0[a0 + 0x00000006:uint16]
	a5 = (uint32) v16
	v17 = Mem0[a0 + 0x00000004:uint16]
	a4 = (uint32) v17
	a0 = a5 << 16
	a0 = a0 | a4
	a0 = a0 >>u 8
	// succ:  l40219B15
l40219B15:
	branch a6 != 1 l40219B1B
	// succ:  l40219B18 l40219B1B
l40219B18:
	goto l40219BAC
	// succ:  l40219BAC
l40219B1B:
	branch a13 == 0x00000000 l40219BAC
	// succ:  l40219B1E l40219BAC
l40219B1E:
	a15 = Mem0[a13 + 0x00000088:word32]
	a9 = a0 & 0x0000FFFF
	branch a9 >=u 0x00000010 l40219B2A
	// succ:  l40219B27 l40219B2A
l40219B27:
	goto l40219BCA
	// succ:  l40219BCA
l40219B2A:
	a0 = Mem0[a12 + 0x00000004:word32]
	a0 = Mem0[a0 + 0x00000004:word32]
	v20 = Mem0[a0 + 0x00000000:byte]
	a4 = (uint32) v20
	a14 = 0x000000FF
	a7 = a4 & 0x00000003
	branch a7 != 0x00000000 l40219BD0
	// succ:  l40219B3A l40219BD0
l40219B3A:
	Mem0[a1 + 0x0000000C:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a2
	v23 = Mem0[a0 + 0x00000001:byte]
	a10 = (uint32) v23
	a11 = 0x000000F0
	a14 = 12
	a14 = a4 & a14
	a11 = a4 & a11
	a10 = a10 & 0x00000003
	branch a15 == 0x00000000 l40219B78
	// succ:  l40219B51 l40219B78
l40219B51:
	Mem0[a1 + 0x00000028:word32] = a11
	Mem0[a1 + 0x0000002C:word32] = a10
	a2 = 0x40218BB0
	Mem0[a1 + 0x00000030:word32] = a9
	v25 = Mem0[a2 + 0x0000005D:byte]
	a2 = (uint32) v25
	Mem0[a1 + 0x00000004:word32] = a0
	branch (a2 & 0x00000001) != 0x00000000 l40219B78
	// succ:  l40219B62 l40219B78
l40219B62:
	a3 = a15
	a4 = 6
	a2 = a0 + 10
	a0 = 0x40202AA8
	v26 = a0
	a0 = 0x40219B6E
	call v26 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000004:word32]
	a9 = Mem0[a1 + 0x00000030:word32]
	a10 = Mem0[a1 + 0x0000002C:word32]
	a11 = Mem0[a1 + 0x00000028:word32]
	branch a2 != 0x00000000 l40219BAF
	// succ:  l40219B78 l40219BAF
l40219B78:
	a5 = 0x0000008C
	a6 = 0x00000088
	a4 = 64
	a3 = Mem0[a1 + 0x00000008:word32]
	Mem0[a13 + 0x000000A8:byte] = a3
	branch (a14 & 0x00000004) != 0x00000000 l40219BD9
	// succ:  l40219B88 l40219BD9
l40219B88:
	v27 = Mem0[a0 + 0x00000004:byte]
	a7 = (uint32) v27
	branch (a7 & 0x00000001) != 0x00000000 l40219BD9
	// succ:  l40219B8E l40219BD9
l40219B8E:
	v29 = Mem0[a0 + 0x00000000:byte]
	a8 = (uint32) v29
	a8 = a8 & a5
	a8 = a8 - a6
	branch a8 != 0x00000000 l40219C37
	// succ:  l40219B9A l40219C37
l40219B9A:
	v30 = Mem0[a0 + 0x00000001:byte]
	a2 = (uint32) v30
	a2 = a2 & 0x00000003
	a2 = a2 - 3
	branch a2 != 0x00000000 l40219C8F
	// succ:  l40219BA6 l40219C8F
l40219BA6:
	v31 = Mem0[a0 + 0x0000001E:byte]
	a2 = (uint32) v31
	goto l40219C92
	// succ:  l40219C92
l40219BAC:
	v19 = Mem0[a1 + 0x00000000:byte]
	a14 = (uint32) v19
	// succ:  l40219BAF
l40219BAF:
	branch a12 == 0x00000000 l40219BB6
	// succ:  l40219BB1 l40219BB6
l40219BB1:
	a2 = a12
	a0 = 0x40219BB6
	call sdk_ppRecycleRxPkt (retsize: 0;)
	// succ:  l40219BB6
l40219BB6:
	a2 = a14
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x0000001C:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x00000024:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_sta_input_exit
l40219BCA:
	a14 = 0x000000FF
	goto l40259BAF
	// succ:  l40259BAF
l40219BD0:
	goto l40259BAF
	// succ:  l40259BAF
l40219BD3:
	a2 = a13 + a2 * 0x00000002
	Mem0[a2 + 0x00000058:word16] = a8
	// succ:  l40219BD9
l40219BD9:
	a4 = 24
	a2 = 30
	v35 = Mem0[a0 + 0x00000000:byte]
	a3 = (uint32) v35
	v36 = Mem0[a0 + 0x00000001:byte]
	a7 = (uint32) v36
	a3 = a3 & a5
	a7 = a7 & 0x00000003
	a7 = a7 - 3
	branch a7 == 0x00000000 l40219BEF
	// succ:  l40219BEC_1 l40219BEF
l40219BEC_1:
	a2 = a4
	// succ:  l40219BEF
l40219BEF:
	branch a3 != a6 l40219BF4
	// succ:  l40219BF2 l40219BF4
l40219BF2:
	a2 = a2 + 2
	// succ:  l40219BF4
l40219BF4:
	Mem0[a12 + 0x00000014:word16] = a2
	a4 = a9 - a2
	a4 = a4 - 4
	Mem0[a12 + 0x00000016:word16] = a4
	branch a14 == 0x00000000 l40219C68
	// succ:  l40219C03 l40219C68
l40219C03:
	branch a14 == 4 l40219BAF
	// succ:  l40219C06 l40219BAF
l40219C06:
	branch a14 != 8 l40219BAF
	// succ:  l40219C09 l40219BAF
l40219C09:
	a5 = Mem0[a13 + 0x00000088:word32]
	branch a5 == 0x00000000 l40219BAF
	// succ:  l40219C0F l40219BAF
l40219C0F:
	branch a9 < a2 l40219BAF
	// succ:  l40219C12 l40219BAF
l40219C12:
	branch a10 != 2 l40219BAF
	// succ:  l40219C15 l40219BAF
l40219C15:
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000030:word32] = a9
	v38 = Mem0[a0 + 0x00000001:byte]
	a6 = (uint32) v38
	Mem0[a1 + 0x00000010:word32] = a2
	branch (a6 & 0x00000040) == 0x00000000 l40219C98
	// succ:  l40219C24 l40219C98
l40219C24:
	a2 = a13
	a3 = a12
	a4 = Mem0[a1 + 0x00000010:word32]
	a0 = 0x40219C2D
	call fn40314CB0 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000004:word32]
	a9 = Mem0[a1 + 0x00000030:word32]
	branch a2 != 0x00000000 l40219CA5
	// succ:  l40219C34 l40219CA5
l40219C34:
	goto l40259BAF
	// succ:  l40259BAF
l40219C37:
	a2 = 16
	v33 = Mem0[a0 + 0x00000016:uint16]
	a8 = (uint32) v33
	a3 = Mem0[a13 + 0x00000048:word32]
	branch a15 == 0x00000000 l40219C86
	// succ:  l40219C42 l40219C86
l40219C42:
	a7 = Mem0[a15 + 0x00000008:word32]
	a7 = a7 & a4
	a3 = a3 | a7
	Mem0[a13 + 0x00000048:word32] = a3
	branch (a3 & 0x00000040) != 0x00000000 l40219BD3
	// succ:  l40219C50 l40219BD3
l40219C50:
	v34 = Mem0[a0 + 0x00000001:byte]
	a3 = (uint32) v34
	a2 = a13 + a2 * 0x00000002
	branch (a3 & 0x00000008) != 0x00000000 l40219C5C
	// succ:  l40219C59 l40219C5C
l40219C59:
	goto l40259BD6
	// succ:  l40259BD6
l40219C5C:
	v37 = Mem0[a2 + 0x00000058:uint16]
	a4 = (uint32) v37
	a4 = a4 - a8
	branch a4 == 0x00000000 l40219BAF
	// succ:  l40219C65 l40219BAF
l40219C65:
	goto l40259BD6
	// succ:  l40259BD6
l40219C68:
	branch a10 != 0x00000000 l40219BAF
	// succ:  l40219C6B l40219BAF
l40219C6B:
	a5 = 0x00000017
	branch a5 <u a9 l40219C74
	// succ:  l40219C71 l40219C74
l40219C71:
	goto l40259BAF
	// succ:  l40259BAF
l40219C74:
	a4 = a11 | a11
	a2 = a13 | a13
	a3 = a12
	a5 = Mem0[a1 + 0x0000000C:word32]
	a6 = Mem0[a1 + 0x00000008:word32]
	a0 = 0x40219C83
	call fn40219EB0 (retsize: 0;)
	goto l40259BAF
	// succ:  l40259BAF
l40219C86:
	a7 = 0xFFFFFFBF
	a3 = a3 & a7
	goto l40259C4A
	// succ:  l40259C4A
l40219C8F:
	v32 = Mem0[a0 + 0x00000018:byte]
	a2 = (uint32) v32
	// succ:  l40219C92
l40219C92:
	a2 = a2 & 0x0000000F
	goto l40259C39
	// succ:  l40259C39
l40219C98:
	a10 = Mem0[a12 + 0x00000004:word32]
	Mem0[a1 + 0x00000010:word32] = a2
	a8 = Mem0[a10 + 0x00000004:word32]
	a11 = a2 & 0x0000FFFF
	a8 = a8 + a11
	Mem0[a10 + 0x00000004:word32] = a8
	// succ:  l40219CA5
l40219CA5:
	a4 = a9 | a9
	a2 = a12 | a12
	a5 = Mem0[a1 + 0x00000010:word32]
	a3 = a0
	a0 = 0x40219CB2
	call fn4031675C (retsize: 0;)
	a3 = a2
	a12 = a2
	branch a2 == 0x00000000 l40219BAF
	// succ:  l40219CB9 l40219BAF
l40219CB9:
	a0 = Mem0[a2 + 0x00000004:word32]
	a4 = Mem0[a13 + 0x00000088:word32]
	a2 = 0x4021516C
	a4 = Mem0[a4 + 0x00000008:word32]
	a0 = Mem0[a0 + 0x00000004:word32]
	branch (a4 & 0x00000001) != 0x00000000 l40219CF0
	// succ:  l40219CC8 l40219CF0
l40219CC8:
	v39 = Mem0[a15 + 0x00000018:byte]
	a4 = (uint32) v39
	branch a4 != 1 l40219D12
	// succ:  l40219CCE l40219D12
l40219CCE:
	v40 = Mem0[a0 + 0x0000000D:byte]
	a5 = (uint32) v40
	v41 = Mem0[a0 + 0x0000000C:byte]
	a6 = (uint32) v41
	a5 = a5 << 24
	a5 = a5 | a6
	a5 = a5 - a2
	branch a5 != 0x00000000 l40219BAF
	// succ:  l40219CE0 l40219BAF
l40219CE0:
	a2 = a0 + 6
	v42 = Mem0[a3 + 0x00000016:uint16]
	a4 = (uint32) v42
	a3 = a0 + 14
	a4 = a4 - 14
	a0 = 0x40219CED
	call sdk_wpa_sm_rx_eapol (retsize: 0;)
	goto l40259BAF
	// succ:  l40259BAF
l40219CF0:
	v43 = Mem0[a0 + 0x0000000D:byte]
	a5 = (uint32) v43
	v44 = Mem0[a0 + 0x0000000C:byte]
	a6 = (uint32) v44
	a5 = a5 << 24
	a5 = a5 | a6
	branch a5 != a2 l40219D12
	// succ:  l40219CFF l40219D12
l40219CFF:
	a2 = a0 + 6
	v45 = Mem0[a3 + 0x00000016:uint16]
	a4 = (uint32) v45
	a3 = a0 + 14
	a4 = a4 - 14
	a0 = 0x40219D0C
	call sdk_wpa_sm_rx_eapol (retsize: 0;)
	goto l40259BAF
	// succ:  l40259BAF
l40219D12:
	a2 = a13
	a0 = 0x40219D17
	call fn40316708 (retsize: 0;)
	a2 = 8
	goto l40259BB8
	// succ:  l40259BB8
l40259BAF:
l40259BB8:
l40259BD6:
l40259C39:
l40259C4A:
sdk_sta_input_exit:


// sdk_ieee80211_parse_wmeparams
// Return size: 0
void sdk_ieee80211_parse_wmeparams()
sdk_ieee80211_parse_wmeparams_entry:
	// succ:  l40219E4C
l40219E4C:
	a1 = fp
	v4 = Mem0[a3 + 0x00000001:byte]
	a5 = (uint32) v4
	a4 = 23
	branch a4 <u a5 l40219E58
	// succ:  l40219E54 l40219E58
l40219E54:
	a2 = -1
	return
	// succ:  sdk_ieee80211_parse_wmeparams_exit
l40219E58:
	v9 = Mem0[a3 + 0x00000008:byte]
	a7 = (uint32) v9
	v11 = Mem0[a2 + 0x00000057:byte]
	a8 = (uint32) v11
	a6 = a7 & 0x0000000F
	branch a8 != a6 l40219E68
	// succ:  l40219E64 l40219E68
l40219E64:
	a2 = 0
	return
	// succ:  sdk_ieee80211_parse_wmeparams_exit
l40219E68:
	a3 = a3 + 10
	Mem0[a2 + 0x00000057:byte] = a6
	a9 = 0x00000080
	a6 = a2 + 24
	a9 = a7 & a9
	Mem0[a2 + 0x0000000C:byte] = a9
	// succ:  l40219E79
l40219E79:
	v14 = Mem0[a3 + 0x00000000:byte]
	a7 = (uint32) v14
	a7 = a7 >>u 0x00000004 & 0x00000001
	Mem0[a2 + 0x00000058:byte] = a7
	v15 = Mem0[a3 + 0x00000000:byte]
	a5 = (uint32) v15
	a5 = a5 & 0x0000000F
	Mem0[a2 + 0x00000059:byte] = a5
	v16 = Mem0[a3 + 0x00000001:byte]
	a4 = (uint32) v16
	a4 = a4 & 0x0000000F
	Mem0[a2 + 0x0000005A:byte] = a4
	v18 = Mem0[a3 + 0x00000001:byte]
	a11 = (uint32) v18
	a2 = a2 + 6
	a11 = a11 >>u 0x00000004 & 0x0000000F
	Mem0[a2 + 0x00000055:byte] = a11
	v20 = Mem0[a3 + 0x00000002:byte]
	a10 = (uint32) v20
	Mem0[a2 + 0x00000056:byte] = a10
	a3 = a3 + 4
	branch a2 != a6 l40219E79
	// succ:  l40219EAA l40219E79
l40219EAA:
	a2 = 1
	return
	// succ:  sdk_ieee80211_parse_wmeparams_exit
sdk_ieee80211_parse_wmeparams_exit:


// fn40219EB0
// Return size: 0
void fn40219EB0()
fn40219EB0_entry:
	// succ:  l40219EB0
l40219EB0:
	a1 = fp
	a1 = a1 - 128
	Mem0[a1 + 0x00000070:word32] = a14
	Mem0[a1 + 0x00000074:word32] = a15
	Mem0[a1 + 0x0000005C:word32] = a5
	Mem0[a1 + 0x00000058:word32] = a6
	Mem0[a1 + 0x00000064:word32] = a0
	Mem0[a1 + 0x0000006C:word32] = a13
	Mem0[a1 + 0x00000068:word32] = a12
	Mem0[a1 + 0x00000078:word32] = a3
	a12 = a4
	a3 = 72
	a13 = a2
	a0 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000060:word32] = a0
	a2 = a1 + 16
	a0 = 0x40213724
	v13 = a0
	a0 = 0x40219EDF
	call v13 (retsize: 0;)
	a15 = Mem0[a1 + 0x00000078:word32]
	a14 = Mem0[a15 + 0x00000004:word32]
	v14 = Mem0[a15 + 0x00000016:uint16]
	a15 = (uint32) v14
	a14 = Mem0[a14 + 0x00000004:word32]
	a0 = 80
	a15 = a15 + a14
	a15 = a15 + 24
	branch a12 < a0 l40219EFB
	// succ:  l40219EF3 l40219EFB
l40219EF3:
	branch a0 < a12 l40219F49
	// succ:  l40219EF6 l40219F49
l40219EF6:
	a12 = 1
	goto l40219F8D
	// succ:  l40219F8D
l40219EFB:
	branch a12 < 32 l40219F2B
	// succ:  l40219EFE l40219F2B
l40219EFE:
	a0 = 0x00000020
	branch a0 >= a12 l40219F33
	// succ:  l40219F04 l40219F33
l40219F04:
	branch a12 >= 64 l40219F33
	// succ:  l40219F07 l40219F33
l40219F07:
	a2 = 0x00000030
	branch a12 != a2 l40219F33
	// succ:  l40219F0D l40219F33
l40219F0D:
	a3 = Mem0[a13 + 0x0000003C:word32]
	branch a3 != 3 l40219F33
	// succ:  l40219F13 l40219F33
l40219F13:
	a4 = a15 - a14
	a4 = a4 - 24
	branch a4 < 6 l40219F33
	// succ:  l40219F1C l40219F33
l40219F1C:
	a5 = a12
	a4 = a15
	a2 = a13
	a3 = a14 + 24
	a0 = 0x40219F28
	call fn4021A0A0 (retsize: 0;)
	goto l40219F33
	// succ:  l40219F33
l40219F2B:
	branch a12 < 16 l40219F33
	// succ:  l40219F2E l40219F33
l40219F2E:
	a5 = 16
	branch a5 >= a12 l40219F0D
	// succ:  l40219F33 l40219F0D
l40219F33:
	a12 = Mem0[a1 + 0x00000068:word32]
	a13 = Mem0[a1 + 0x0000006C:word32]
	a14 = Mem0[a1 + 0x00000070:word32]
	a15 = Mem0[a1 + 0x00000074:word32]
	a2 = 0x00000080
	a0 = Mem0[a1 + 0x00000064:word32]
	a1 = a1 + a2
	return
	a12 = Mem0[a1 + 0x00000068:word32]
	a13 = Mem0[a1 + 0x0000006C:word32]
	a14 = Mem0[a1 + 0x00000070:word32]
	a15 = Mem0[a1 + 0x00000074:word32]
	a2 = 0x00000080
	a0 = Mem0[a1 + 0x00000064:word32]
	a1 = a1 + a2
	return
	// succ:  fn40219EB0_exit fn40219EB0_exit
l40219F49:
	a10 = 0x000000B0
	branch a12 >= a10 l40219F52
	// succ:  l40219F4F l40219F52
l40219F4F:
	goto l40219FD1
	// succ:  l40219FD1
l40219F52:
	branch a10 >= a12 l40219F58
	// succ:  l40219F55 l40219F58
l40219F55:
	goto l4021A021
	// succ:  l4021A021
l40219F58:
	a6 = a15 - a14
	a6 = a6 - 24
	branch a6 < 6 l40219F33
	// succ:  l40219F61 l40219F33
l40219F61:
	v23 = Mem0[a14 + 0x0000001A:uint16]
	a6 = (uint32) v23
	v24 = Mem0[a14 + 0x00000018:uint16]
	a0 = (uint32) v24
	v25 = Mem0[a14 + 0x0000001C:uint16]
	a7 = (uint32) v25
	a8 = a0 - 1
	branch a8 != 0x00000000 l4021A051
	// succ:  l40219F6F l4021A051
l40219F6F:
	a5 = a15
	a2 = a13
	a3 = a14
	a4 = a14 + 30
	Mem0[a1:word32] = a6
	Mem0[a1 + 0x00000004:word32] = a7
	a6 = Mem0[a1 + 0x0000005C:word32]
	a7 = Mem0[a1 + 0x00000058:word32]
	a0 = 0x40219F85
	call fn40319D6C (retsize: 0;)
	goto l40259F33
	// succ:  l40259F33
l40219F88:
	branch a12 != 128 l40219F33
	// succ:  l40219F8B l40219F33
l40219F8B:
	a12 = 0
	// succ:  l40219F8D
l40219F8D:
	a2 = Mem0[a1 + 0x00000078:word32]
	a3 = a1 + 16
	a4 = a12
	a0 = 0x40219F98
	call fn40316904 (retsize: 0;)
	branch a2 != 0x00000000 l40219F33
	// succ:  l40219F9B l40219F33
l40219F9B:
	a4 = a12
	a2 = Mem0[a1 + 0x00000078:word32]
	a3 = a1 + 16
	a0 = 0x40219FA6
	call fn403195DC (retsize: 0;)
	a9 = Mem0[a13 + 0x00000088:word32]
	branch a9 == 0x00000000 l40219F33
	// succ:  l40219FAC l40219F33
l40219FAC:
	a10 = Mem0[a13 + 0x0000003C:word32]
	branch a10 == 5 l40219FB4
	// succ:  l40219FB1 l40219FB4
l40219FB1:
	goto l40259F33
	// succ:  l40259F33
l40219FB4:
	a12 = a13 + 32
	a2 = a12
	a0 = 0x40219FBC
	call fn40304430 (retsize: 0;)
	a4 = Mem0[a13 + 0x00000088:word32]
	a3 = 30
	v17 = Mem0[a4 + 0x0000001C:uint16]
	a4 = (uint32) v17
	a2 = a12
	v18 = (uint16) a3
	v19 = (uint16) a4
	a3 = v18 *u v19
	a4 = 0
	a0 = 0x40219FCE
	call fn4030438C (retsize: 0;)
	goto l40259F33
	// succ:  l40259F33
l40219FD1:
	a0 = 0x000000A0
	branch a12 < a0 l40219F88
	// succ:  l40219FD7 l40219F88
l40219FD7:
	branch a0 >= a12 l40219FDD
	// succ:  l40219FDA l40219FDD
l40219FDA:
	goto l40259F33
	// succ:  l40259F33
l40219FDD:
	a0 = Mem0[a13 + 0x0000003C:word32]
	branch a0 == 5 l40219FEB
	// succ:  l40219FE2 l40219FEB
l40219FE2:
	branch a0 == 3 l40219FEB
	// succ:  l40219FE5 l40219FEB
l40219FE5:
	a5 = a0 - 2
	branch a5 != 0x00000000 l40219F33
	// succ:  l40219FEB l40219F33
l40219FEB:
	a2 = a14 + 4
	a3 = Mem0[a1 + 0x00000060:word32]
	a4 = 6
	a3 = a3 + 41
	a0 = 0x40202AA8
	v20 = a0
	a0 = 0x40219FFB
	call v20 (retsize: 0;)
	branch a2 != 0x00000000 l40219F33
	// succ:  l40219FFE l40219F33
l40219FFE:
	a4 = a15 - a14
	a4 = a4 - 24
	branch a4 >= 2 l4021A00A
	// succ:  l4021A007 l4021A00A
l4021A007:
	goto l40259F33
	// succ:  l40259F33
l4021A00A:
	a2 = 0x402035F0
	a3 = 2
	v21 = Mem0[a14 + 0x00000018:uint16]
	a4 = (uint32) v21
	a5 = 0x000000A0
	a4 = a4 << 24
	a4 = a4 | a5
	a0 = 0x4021A01E
	call fn4031990C (retsize: 0;)
	goto l40259F33
	// succ:  l40259F33
l4021A021:
	a0 = 0x000000D0
	branch a12 < a0 l4021A064
	// succ:  l4021A027 l4021A064
l4021A027:
	branch a0 >= a12 l4021A02D
	// succ:  l4021A02A l4021A02D
l4021A02A:
	goto l40259F33
	// succ:  l40259F33
l4021A02D:
	a5 = Mem0[a13 + 0x0000003C:word32]
	a5 = a5 - 5
	branch a5 != 0x00000000 l40219F33
	// succ:  l4021A036 l40219F33
l4021A036:
	a2 = a13 | a13
	a3 = Mem0[a1 + 0x00000078:word32]
	a0 = 0x4021A03F
	call fn40316F84 (retsize: 0;)
	branch a2 != 0x00000000 l40219F33
	// succ:  l4021A042 l40219F33
l4021A042:
	a5 = a15
	a2 = a13
	a3 = a14
	a4 = a14 + 24
	a0 = 0x4021A04E
	call sdk_ieee80211_recv_action (retsize: 0;)
	goto l40259F33
	// succ:  l40259F33
l4021A051:
	branch a0 != 0x00000000 l40219F33
	// succ:  l4021A054 l40219F33
l4021A054:
	a3 = a14
	a2 = a13
	a4 = Mem0[a1 + 0x0000005C:word32]
	a5 = Mem0[a1 + 0x00000058:word32]
	a0 = 0x4021A061
	call fn40319D20 (retsize: 0;)
	goto l40259F33
	// succ:  l40259F33
l4021A064:
	a0 = 0x000000C0
	a6 = a12 - a0
	branch a6 != 0x00000000 l40219F33
	// succ:  l4021A06D l40219F33
l4021A06D:
	a7 = a15 - a14
	a7 = a7 - 24
	branch a7 >= 2 l4021A079
	// succ:  l4021A076 l4021A079
l4021A076:
	goto l40259F33
	// succ:  l40259F33
l4021A079:
	a8 = Mem0[a13 + 0x0000003C:word32]
	a8 = a8 - 5
	branch a8 != 0x00000000 l40219F33
	// succ:  l4021A081 l40219F33
l4021A081:
	a2 = 0x402035F0
	v27 = Mem0[a14 + 0x00000018:uint16]
	a4 = (uint32) v27
	a3 = 2
	a4 = a4 << 24
	a4 = a4 | a0
	a0 = 0x4021A092
	call fn4031990C (retsize: 0;)
	// succ:  l40259F33
l40259F33:
fn40219EB0_exit:


// fn4021A0A0
// Return size: 0
void fn4021A0A0()
fn4021A0A0_entry:
	// succ:  l4021A0A0
l4021A0A0:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000018:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	a13 = a2
	a12 = Mem0[a13 + 0x00000088:word32]
	a2 = a5
	branch a12 != 0x00000000 l4021A173
	// succ:  l4021A0B7 l4021A173
l4021A0B7:
	a2 = -1
	goto l4021A164
	// succ:  l4021A164
l4021A0BC:
	a2 = Mem0[a12 + 0x00000008:word32]
	a3 = 0xFFFFFFFD
	a2 = a2 & a3
	Mem0[a12 + 0x00000008:word32] = a2
	branch a14 == 0x00000000 l4021A0F3
	// succ:  l4021A0CA l4021A0F3
l4021A0CA:
	branch a15 == 0x00000000 l4021A0F3
	// succ:  l4021A0CC l4021A0F3
l4021A0CC:
	a4 = 0x40214470
	a4 = Mem0[a4 + 0x0000030C:word32]
	branch (a4 & 0x00080000) == 0x00000000 l4021A0F3
	// succ:  l4021A0D5 l4021A0F3
l4021A0D5:
	a2 = a13
	a0 = 0x4021A0DA
	call fn40315CD4 (retsize: 0;)
	a2 = a13
	a3 = a14
	a4 = a15
	a0 = 0x4021A0E3
	call fn40315E2C (retsize: 0;)
	a3 = a14
	a2 = a13
	a4 = 48
	a0 = 0x4021A0EC
	call fn40315F44 (retsize: 0;)
	a3 = a15
	a2 = a13
	a0 = 0x4021A0F3
	call fn40316018 (retsize: 0;)
	// succ:  l4021A0F3
l4021A0F3:
	a13 = 0x402035F0
	v37 = Mem0[a12 + 0x0000001E:uint16]
	a2 = (uint32) v37
	a0 = Mem0[a13 + 0x0000001C:word32]
	a5 = a2 >>u 0x00000005 & 0x00000001
	branch a5 == 0x00000000 l4021A317
	// succ:  l4021A101 l4021A317
l4021A101:
	a4 = 0x40215E28
	a3 = 0x40203F84
	a0 = a0 | a4
	Mem0[a13 + 0x0000001C:word32] = a0
	a0 = a0 & a3
	a3 = 0x00000400
	Mem0[a13 + 0x0000001C:word32] = a0
	a3 = a2 & a3
	a2 = a13
	a0 = 0x4021A11C
	call fn40318A80 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000078:word32]
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = 0x000000C0
	branch (~a0 & a4) == 0x00000000 l4021A130
	// succ:  l4021A127 l4021A130
l4021A127:
	a2 = 0x00000480
	branch (~a0 & a2) == 0x00000000 l4021A130
	// succ:  l4021A12D l4021A130
l4021A12D:
	goto l4021A30C
	// succ:  l4021A30C
l4021A130:
	v38 = Mem0[a12 + 0x00000022:uint16]
	a3 = (uint32) v38
	a3 = a3 >>u 0x00000001 & 0x00000001
	branch a3 == 0x00000000 l4021A30C
	// succ:  l4021A139 l4021A30C
l4021A139:
	a2 = 0x40204570
	a0 = Mem0[a13 + 0x0000001C:word32]
	a0 = a0 | a2
	a2 = a13 | a13
	a4 = Mem0[a1 + 0x00000000:word32]
	a3 = Mem0[a13 + 0x00000000:word32]
	Mem0[a13 + 0x0000001C:word32] = a0
	a3 = a3 + 0x00000600
	Mem0[a3 + 0x0000008C:word32] = a12
	a3 = 5
	a0 = 0x4021A157
	call fn4031990C (retsize: 0;)
	a3 = a12
	a2 = 0
	a4 = 1
	a5 = 0
	a0 = 0x4021A162
	call sdk_ic_bss_info_update (retsize: 0;)
	a2 = 0
	// succ:  l4021A164
l4021A164:
	a12 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000018:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 48
	return
	// succ:  fn4021A0A0_exit
l4021A173:
	v10 = Mem0[a3 + 0x00000002:uint16]
	a5 = (uint32) v10
	v12 = Mem0[a3 + 0x00000000:uint16]
	a0 = (uint32) v12
	branch a5 != 0x00000000 l4021A0B7
	// succ:  l4021A17C l4021A0B7
l4021A17C:
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1:word32] = a2
	v14 = Mem0[a3 + 0x00000004:uint16]
	a6 = (uint32) v14
	Mem0[a1 + 0x00000008:word32] = a6
	a3 = a3 + 6
	a9 = a4 - a3
	branch a9 >= 2 l4021A190
	// succ:  l4021A18D l4021A190
l4021A18D:
	goto l4021A29A
	// succ:  l4021A29A
l4021A190:
	a5 = 50
	a11 = 45
	a10 = 0
	a2 = 0
	a0 = 0
	a15 = 0
	a14 = 0
	v20 = Mem0[a3 + 0x00000001:byte]
	a8 = (uint32) v20
	v22 = Mem0[a3 + 0x00000000:byte]
	a7 = (uint32) v22
	a6 = a8 + 2
	branch a9 >= a6 l4021A1AC
	// succ:  l4021A1A9 l4021A1AC
l4021A1A9:
	goto l4025A0B7
	// succ:  l4025A0B7
l4021A1AC:
	a9 = a7 - 1
	branch a9 == 0x00000000 l4021A288
	// succ:  l4021A1B1 l4021A288
l4021A1B1:
	a6 = a7 - a11
	branch a6 == 0x00000000 l4021A283
	// succ:  l4021A1B7 l4021A283
l4021A1B7:
	a9 = a7 - a5
	branch a9 == 0x00000000 l4021A27E
	// succ:  l4021A1BD l4021A27E
l4021A1BD:
	a6 = a7 - 61
	branch a6 == 0x00000000 l4021A279
	// succ:  l4021A1C3 l4021A279
l4021A1C3:
	a9 = 0x000000DD
	a9 = a7 - a9
	branch a9 != 0x00000000 l4021A28A
	// succ:  l4021A1CC l4021A28A
l4021A1CC:
	a9 = 0
	branch a8 <u 0x00000004 l4021A1FB
	// succ:  l4021A1D1 l4021A1FB
l4021A1D1:
	v24 = Mem0[a3 + 0x00000002:byte]
	a6 = (uint32) v24
	Mem0[a1 + 0x00000024:word32] = a0
	v25 = Mem0[a3 + 0x00000003:byte]
	a7 = (uint32) v25
	v26 = Mem0[a3 + 0x00000005:byte]
	a0 = (uint32) v26
	a7 = a7 << 24
	a6 = a6 | a7
	v27 = Mem0[a3 + 0x00000004:byte]
	a7 = (uint32) v27
	a0 = a0 << 8
	a7 = a7 << 16
	a7 = a7 | a0
	a6 = a6 | a7
	a7 = 0x402168F8
	a0 = Mem0[a1 + 0x00000024:word32]
	branch a6 != a7 l4021A1FB
	// succ:  l4021A1F9 l4021A1FB
l4021A1F9:
	a9 = 1
	// succ:  l4021A1FB
l4021A1FB:
	branch a9 == 0x00000000 l4021A202
	// succ:  l4021A1FD l4021A202
l4021A1FD:
	a10 = a3
	goto l4021A28A
	// succ:  l4021A28A
l4021A202:
	a9 = 0x40214470
	a9 = Mem0[a9 + 0x0000030C:word32]
	branch (a9 & 0x10000000) == 0x00000000 l4021A28A
	// succ:  l4021A20B l4021A28A
l4021A20B:
	a9 = 0
	branch a8 <u 0x00000004 l4021A23A
	// succ:  l4021A210 l4021A23A
l4021A210:
	v29 = Mem0[a3 + 0x00000002:byte]
	a6 = (uint32) v29
	Mem0[a1 + 0x00000024:word32] = a0
	v30 = Mem0[a3 + 0x00000003:byte]
	a7 = (uint32) v30
	v31 = Mem0[a3 + 0x00000005:byte]
	a0 = (uint32) v31
	a7 = a7 << 24
	a6 = a6 | a7
	v32 = Mem0[a3 + 0x00000004:byte]
	a7 = (uint32) v32
	a0 = a0 << 8
	a7 = a7 << 16
	a7 = a7 | a0
	a6 = a6 | a7
	a7 = 0x402168FC
	a0 = Mem0[a1 + 0x00000024:word32]
	branch a6 != a7 l4021A23A
	// succ:  l4021A238 l4021A23A
l4021A238:
	a9 = 1
	// succ:  l4021A23A
l4021A23A:
	branch a9 == 0x00000000 l4021A242
	// succ:  l4021A23C l4021A242
l4021A23C:
	branch a14 != 0x00000000 l4021A23F
	// succ:  l4021A23C_1 l4021A23F
l4021A23C_1:
	a14 = a3
	// succ:  l4021A23F
l4021A23F:
	goto l4021A28A
	// succ:  l4021A28A
l4021A242:
	a9 = 0
	branch a8 <u 0x00000004 l4021A271
	// succ:  l4021A247 l4021A271
l4021A247:
	v33 = Mem0[a3 + 0x00000002:byte]
	a6 = (uint32) v33
	Mem0[a1 + 0x00000024:word32] = a0
	v34 = Mem0[a3 + 0x00000003:byte]
	a7 = (uint32) v34
	v35 = Mem0[a3 + 0x00000005:byte]
	a0 = (uint32) v35
	a7 = a7 << 24
	a6 = a6 | a7
	v36 = Mem0[a3 + 0x00000004:byte]
	a7 = (uint32) v36
	a0 = a0 << 8
	a7 = a7 << 16
	a7 = a7 | a0
	a6 = a6 | a7
	a7 = 0x40216900
	a0 = Mem0[a1 + 0x00000024:word32]
	branch a6 != a7 l4021A271
	// succ:  l4021A26F l4021A271
l4021A26F:
	a9 = 1
	// succ:  l4021A271
l4021A271:
	branch a9 == 0x00000000 l4021A28A
	// succ:  l4021A273 l4021A28A
l4021A273:
	branch a15 != 0x00000000 l4021A276
	// succ:  l4021A273_1 l4021A276
l4021A273_1:
	a14 = a3
	// succ:  l4021A276
l4021A276:
	goto l4021A28A
	// succ:  l4021A28A
l4021A279:
	a15 = a3
	goto l4021A28A
	// succ:  l4021A28A
l4021A27E:
	a2 = a3
	goto l4021A28A
	// succ:  l4021A28A
l4021A283:
	a14 = a3
	goto l4021A28A
	// succ:  l4021A28A
l4021A288:
	a0 = a3
	// succ:  l4021A28A
l4021A28A:
	a3 = a8 + a3
	a3 = a3 + 2
	a9 = a4 - a3
	branch a9 < 2 l4021A297
	// succ:  l4021A294 l4021A297
l4021A294:
	goto l4025A19E
	// succ:  l4025A19E
l4021A297:
	goto l4021A2A6
	// succ:  l4021A2A6
l4021A29A:
	a14 = 0x00000000
	a15 = 0x00000000
	a0 = 0
	a2 = 0
	a10 = 0
	// succ:  l4021A2A6
l4021A2A6:
	branch a0 == 0x00000000 l4021A0B7
	// succ:  l4021A2A9 l4021A0B7
l4021A2A9:
	v23 = Mem0[a0 + 0x00000001:byte]
	a3 = (uint32) v23
	branch a3 <u 0x00000010 l4021A2B2
	// succ:  l4021A2AF l4021A2B2
l4021A2AF:
	goto l4025A0B7
	// succ:  l4025A0B7
l4021A2B2:
	Mem0[a1 + 0x00000020:word32] = a10
	branch a2 == 0x00000000 l4021A2C6
	// succ:  l4021A2B6 l4021A2C6
l4021A2B6:
	Mem0[a1 + 0x00000020:word32] = a10
	v28 = Mem0[a2 + 0x00000001:byte]
	a5 = (uint32) v28
	a4 = 15
	a4 = a4 - a3
	branch a4 >= a5 l4021A2C6
	// succ:  l4021A2C3 l4021A2C6
l4021A2C3:
	goto l4025A0B7
	// succ:  l4025A0B7
l4021A2C6:
	a5 = 47
	a4 = a2
	a3 = a0
	a2 = a12
	a0 = 0x4021A2D1
	call fn40316864 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000020:word32]
	a6 = Mem0[a1 + 0x00000008:word32]
	a5 = Mem0[a13 + 0x00000050:word32]
	a7 = Mem0[a1 + 0x00000004:word32]
	Mem0[a12 + 0x0000001E:word16] = a7
	Mem0[a12 + 0x0000001A:word16] = a6
	branch a5 != 0x00000000 l4021A2ED
	// succ:  l4021A2E2 l4021A2ED
l4021A2E2:
	a8 = 0x402125CC
	a8 = Mem0[a8 + 0x00000024:word32]
	Mem0[a13 + 0x00000050:word32] = a8
	// succ:  l4021A2ED
l4021A2ED:
	branch a3 == 0x00000000 l4021A0BC
	// succ:  l4021A2F0 l4021A0BC
l4021A2F0:
	a2 = a12
	a0 = 0x4021A2F5
	call fn40319E4C (retsize: 0;)
	branch a2 < 0x00000000 l4021A0BC
	// succ:  l4021A2F8 l4021A0BC
l4021A2F8:
	a2 = a12
	a3 = a12 + 87
	a10 = Mem0[a12 + 0x00000008:word32]
	a11 = -3
	a10 = a10 & a11
	Mem0[a12 + 0x00000008:word32] = a10
	a0 = 0x4021A309
	call fn40318B5C (retsize: 0;)
	goto l4025A0C8
	// succ:  l4025A0C8
l4021A30C:
	a2 = 0x4020452C
	a0 = Mem0[a13 + 0x0000001C:word32]
	a0 = a0 & a2
	goto l4025A142
	// succ:  l4025A142
l4021A317:
	a4 = 0x4021A098
	a3 = 0x4021A09C
	a0 = a0 & a4
	Mem0[a13 + 0x0000001C:word32] = a0
	a0 = a0 | a3
	goto l4025A10F
	// succ:  l4025A10F
l4025A0B7:
l4025A0C8:
l4025A10F:
l4025A142:
l4025A19E:
fn4021A0A0_exit:


// sdk_wifi_station_start
// Return size: 0
void sdk_wifi_station_start()
sdk_wifi_station_start_entry:
	// succ:  l4021A328
l4021A328:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a0
	a0 = 0x402035F0
	Mem0[a1 + 0x00000018:word32] = a12
	a12 = Mem0[a0 + 0x00000010:word32]
	a2 = 0
	branch a12 != 0x00000000 l4021A33B
	// succ:  l4021A338 l4021A33B
l4021A338:
	goto l4021A3A3
	// succ:  l4021A3A3
l4021A33B:
	v6 = Mem0[a12 + 0x000000BB:byte]
	a2 = (uint32) v6
	a0 = 0x40203738
	branch a2 != 1 l4021A349
	// succ:  l4021A344 l4021A349
l4021A344:
	a2 = 1
	goto l4021A3A3
	// succ:  l4021A3A3
l4021A349:
	a3 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x00000010:word32] = a0
	branch a3 != 0x00000000 l4021A386
	// succ:  l4021A351 l4021A386
l4021A351:
	a2 = 52
	a0 = 0x402034C4
	v8 = a0
	a0 = 0x4021A359
	call v8 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000010:word32]
	Mem0[a12:word32] = a2
	a4 = 6
	a2 = a2 + 41
	a0 = 0x40203130
	v10 = a0
	a0 = 0x4021A368
	call v10 (retsize: 0;)
	a6 = a12
	a7 = 0x40215A60
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = 0x402146D4
	a8 = 0x40215A64
	a4 = a3 + 4
	a5 = a3 + 8
	Mem0[a1:word32] = a8
	a0 = 0x4021A37E
	call fn4030C530 (retsize: 0;)
	a2 = 0x402035F0
	a0 = 0x4021A384
	call sdk_wpa_attach (retsize: 0;)
	a0 = Mem0[a1 + 0x00000010:word32]
	// succ:  l4021A386
l4021A386:
	a2 = 0x00000000
	a3 = 0x00000001
	a5 = 0x00000000
	a6 = 0
	a4 = a0
	a0 = 0x4021A396
	call sdk_ic_set_vif (retsize: 0;)
	a2 = 1
	a9 = 0
	Mem0[a12 + 0x000000B8:byte] = a9
	Mem0[a12 + 0x000000B9:byte] = a9
	Mem0[a12 + 0x000000BB:byte] = a2
	// succ:  l4021A3A3
l4021A3A3:
	a12 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wifi_station_start_exit
sdk_wifi_station_start_exit:


// sdk_wifi_station_stop
// Return size: 0
void sdk_wifi_station_stop()
sdk_wifi_station_stop_entry:
	// succ:  l4021A3AC
l4021A3AC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	a12 = 0x402035F0
	a2 = 0
	a12 = Mem0[a12 + 0x00000010:word32]
	Mem0[a1:word32] = a0
	branch a12 != 0x00000000 l4021A3BF
	// succ:  l4021A3BC l4021A3BF
l4021A3BC:
	goto l4021A3C6
	// succ:  l4021A3C6
l4021A3BF:
	v6 = Mem0[a12 + 0x000000BB:byte]
	a0 = (uint32) v6
	branch a0 != 0x00000000 l4021A3CF
	// succ:  l4021A3C4 l4021A3CF
l4021A3C4:
	a2 = 1
	// succ:  l4021A3C6
l4021A3C6:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wifi_station_stop_exit
l4021A3CF:
	a2 = 0x00000000
	Mem0[a12 + 0x000000B8:byte] = a2
	Mem0[a12 + 0x000000B9:byte] = a2
	a0 = 0x4021A3DB
	call fn40313D8C (retsize: 0;)
	a2 = 0x00000000
	a3 = 0
	a4 = 0
	a5 = 0
	a6 = 0
	a0 = 0x4021A3E9
	call sdk_ic_set_vif (retsize: 0;)
	a3 = 0
	Mem0[a12 + 0x000000BB:byte] = a3
	// succ:  l4025A3C4
l4025A3C4:
sdk_wifi_station_stop_exit:


// sdk_chm_init
// Return size: 0
void sdk_chm_init()
sdk_chm_init_entry:
	// succ:  l4021A400
l4021A400:
	a1 = fp
	a4 = -32
	a5 = 0x4020290C
	a3 = 0x402131CC
	a6 = 0x4021A3F4
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1:word32] = a0
	a13 = 0x4021287C
	a0 = 0
	Mem0[a6:word32] = a2
	a12 = a2
	v11 = Mem0[a3 + 0x00000060:byte]
	a6 = (uint32) v11
	v12 = Mem0[a5 + 0x00000000:byte]
	a2 = (uint32) v12
	a3 = a3 + 0x00000100
	v13 = Mem0[a3 + 0x0000008D:byte]
	a3 = (uint32) v13
	a6 = a6 - 1
	a3 = a3 - 1
	a3 = a3 & 0x000000FF
	branch a6 == 0x00000000 l4021A433
	// succ:  l4021A430_1 l4021A433
l4021A430_1:
	a0 = a3
	// succ:  l4021A433
l4021A433:
	Mem0[a1 + 0x00000010:word32] = a0
	branch a2 != 0x00000000 l4021A45C
	// succ:  l4021A437 l4021A45C
l4021A437:
	a0 = 0x40202680
	v14 = a0
	a0 = 0x4021A43D
	call v14 (retsize: 0;)
	a4 = -32
	// succ:  l4021A43F
l4021A43F:
	a9 = Mem0[a13 + 0x00000200:word32]
	a9 = a9 & a4
	Mem0[a13 + 0x00000200:word32] = a9
	a8 = Mem0[a13 + 0x00000200:word32]
	branch (a8 & 0x00000001) != 0x00000000 l4021A43F
	// succ:  l4021A457 l4021A43F
l4021A457:
	a0 = Mem0[a1 + 0x00000010:word32]
	a5 = 0x4020290C
	// succ:  l4021A45C
l4021A45C:
	a2 = 0x00000084
	a0 = a0 + a0 * 0x00000002
	a0 = a12 + a0 * 0x00000004
	a0 = a0 + a2
	Mem0[a12 + 0x0000014C:word32] = a0
	v18 = Mem0[a5 + 0x00000000:byte]
	a10 = (uint32) v18
	Mem0[a1 + 0x0000000C:word32] = a0
	branch a10 != 0x00000000 l4021A48D
	// succ:  l4021A471 l4021A48D
l4021A471:
	a2 = Mem0[a13 + 0x00000200:word32]
	a3 = 1
	a2 = a2 & a4
	a2 = a2 | a3
	Mem0[a13 + 0x00000200:word32] = a2
	a0 = 0x40202688
	v19 = a0
	a0 = 0x4021A48B
	call v19 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	// succ:  l4021A48D
l4021A48D:
	a2 = a0 | a0
	a0 = 0x4021A493
	call sdk_chm_set_current_channel (retsize: 0;)
	a2 = 0x4021A3F8
	a3 = 0x4021A3FC
	a4 = 0x00000000
	a0 = 0x4021A49F
	call fn403042E8 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_chm_init_exit
sdk_chm_init_exit:


// sdk_chm_acquire_lock
// Return size: 0
void sdk_chm_acquire_lock()
sdk_chm_acquire_lock_entry:
	// succ:  l4021A4AC
l4021A4AC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	a0 = 0x4021A3F4
	a2 = a4
	v7 = Mem0[a0 + 0x00000040:byte]
	a4 = (uint32) v7
	v9 = Mem0[a0 + 0x00000041:byte]
	a5 = (uint32) v9
	branch a4 == 0x00000000 l4021A4D8
	// succ:  l4021A4C2 l4021A4D8
l4021A4C2:
	Mem0[a1 + 0x0000000C:word32] = a2
	Mem0[a1 + 0x00000008:word32] = a3
	branch a5 >=u a12 l4021A4CE
	// succ:  l4021A4C9 l4021A4CE
l4021A4C9:
	a2 = 3
	goto l4021A4E6
	// succ:  l4021A4E6
l4021A4CE:
	a0 = 0x4021A4D1
	call sdk_chm_cancel_op (retsize: 0;)
	a2 = Mem0[a1 + 0x0000000C:word32]
	a0 = 0x4021A3F4
	a3 = Mem0[a1 + 0x00000008:word32]
	// succ:  l4021A4D8
l4021A4D8:
	Mem0[a0 + 0x00000041:byte] = a12
	Mem0[a0 + 0x00000018:word32] = a3
	Mem0[a0 + 0x0000001C:word32] = a2
	a6 = 1
	a2 = 0
	Mem0[a0 + 0x00000040:byte] = a6
	// succ:  l4021A4E6
l4021A4E6:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_chm_acquire_lock_exit
sdk_chm_acquire_lock_exit:


// sdk_chm_release_lock
// Return size: 0
void sdk_chm_release_lock()
sdk_chm_release_lock_entry:
	// succ:  l4021A4F0
l4021A4F0:
	a1 = fp
	a3 = 0x4021A3F4
	a2 = 0
	Mem0[a3 + 0x0000001C:word32] = a2
	Mem0[a3 + 0x00000018:word32] = a2
	Mem0[a3 + 0x00000040:byte] = a2
	Mem0[a3 + 0x00000041:byte] = a2
	return
	// succ:  sdk_chm_release_lock_exit
sdk_chm_release_lock_exit:


// sdk_chm_start_op
// Return size: 0
void sdk_chm_start_op()
sdk_chm_start_op_entry:
	// succ:  l4021A504
l4021A504:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021A3F4
	a7 = Mem0[a0 + 0x00000004:word32]
	branch a7 == 0x00000000 l4021A521
	// succ:  l4021A510 l4021A521
l4021A510:
	a2 = 3
	goto l4021A51A
	// succ:  l4021A51A
l4021A515:
	a0 = 0x4021A518
	call fn4021A540 (retsize: 0;)
	a2 = 0
	// succ:  l4021A51A
l4021A51A:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_chm_start_op_exit
l4021A521:
	Mem0[a0 + 0x00000004:word32] = a2
	Mem0[a0 + 0x00000010:word32] = a4
	a8 = 0x402035F0
	Mem0[a0 + 0x00000014:word32] = a5
	a8 = Mem0[a8 + 0x00000000:word32]
	Mem0[a0 + 0x00000008:word32] = a3
	a8 = Mem0[a8 + 0x00000000:word32]
	Mem0[a0 + 0x0000000C:word32] = a6
	branch (a8 & 0x00000002) == 0x00000000 l4021A515
	// succ:  l4021A535 l4021A515
l4021A535:
	a0 = 0x4021A538
	call fn4021A540 (retsize: 0;)
	// succ:  l4025A518
l4025A518:
sdk_chm_start_op_exit:


// fn4021A540
// Return size: 0
void fn4021A540()
fn4021A540_entry:
	// succ:  l4021A540
l4021A540:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000008:word32] = a12
	a13 = 0x4021A3F4
	Mem0[a1 + 0x00000004:word32] = a0
	a12 = Mem0[a13 + 0x00000010:word32]
	a0 = Mem0[a13 + 0x0000000C:word32]
	Mem0[a1:word32] = a0
	a0 = 0x40214520
	v6 = a0
	a0 = 0x4021A55B
	call v6 (retsize: 0;)
	a3 = a2
	a2 = Mem0[a13 + 0x00000004:word32]
	v9 = Mem0[a3 + 0x00000004:uint16]
	a3 = (uint32) v9
	v11 = Mem0[a2 + 0x00000004:uint16]
	a4 = (uint32) v11
	branch a3 == a4 l4021A56B
	// succ:  l4021A568 l4021A56B
l4021A568:
	a0 = 0x4021A56B
	call sdk_chm_set_current_channel (retsize: 0;)
	// succ:  l4021A56B
l4021A56B:
	branch a12 == 0x00000000 l4021A574
	// succ:  l4021A56D l4021A574
l4021A56D:
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = 0
	a0 = 0x4021A574
	call a12 (retsize: 0;)
	// succ:  l4021A574
l4021A574:
	a4 = Mem0[a13 + 0x00000008:word32]
	branch a4 != 0x00000000 l4021A586
	// succ:  l4021A578 l4021A586
l4021A578:
	a2 = 0x4021A53C
	a3 = 20
	a0 = 0x40213724
	v12 = a0
	a0 = 0x4021A583
	call v12 (retsize: 0;)
	goto l4021A599
	// succ:  l4021A599
l4021A586:
	a12 = 0x4021A3F8
	a2 = a12 | a12
	a0 = 0x4021A58F
	call fn40304430 (retsize: 0;)
	a2 = a12 | a12
	a3 = Mem0[a13 + 0x00000008:word32]
	a4 = 0
	a0 = 0x4021A599
	call fn4030438C (retsize: 0;)
	// succ:  l4021A599
l4021A599:
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  fn4021A540_exit
fn4021A540_exit:


// sdk_chm_end_op
// Return size: 0
void sdk_chm_end_op()
sdk_chm_end_op_entry:
	// succ:  l4021A5A4
l4021A5A4:
	a1 = fp
	a3 = -4
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = 0x4021A3F4
	Mem0[a1:word32] = a2
	branch a0 == a3 l4021A5D1
	// succ:  l4021A5B3 l4021A5D1
l4021A5B3:
	a2 = a0
	a3 = Mem0[a2 + 0x00000014:word32]
	Mem0[a1 + 0x00000008:word32] = a3
	a2 = a2 + 4
	a3 = 20
	a0 = 0x40213724
	v6 = a0
	a0 = 0x4021A5C3
	call v6 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000008:word32]
	branch a5 == 0x00000000 l4021A5D1
	// succ:  l4021A5C7 l4021A5D1
l4021A5C7:
	a2 = 0x4021A3F4
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = Mem0[a2 + 0x0000000C:word32]
	a0 = 0x4021A5D1
	call a5 (retsize: 0;)
	// succ:  l4021A5D1
l4021A5D1:
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_chm_end_op_exit
sdk_chm_end_op_exit:


// sdk_chm_cancel_op
// Return size: 0
void sdk_chm_cancel_op()
sdk_chm_cancel_op_entry:
	// succ:  l4021A5EC
l4021A5EC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021A3F4
	a2 = Mem0[a0 + 0x00000004:word32]
	branch a2 == 0x00000000 l4021A60B
	// succ:  l4021A5FB l4021A60B
l4021A5FB:
	a2 = a0
	a2 = a2 + 32
	a0 = 0x4021A603
	call fn40304430 (retsize: 0;)
	a2 = 4
	a0 = 0x4021A608
	call fn4031A5A4 (retsize: 0;)
	a0 = 0x4021A3F4
	// succ:  l4021A60B
l4021A60B:
	a5 = Mem0[a0 + 0x00000018:word32]
	branch a5 == 0x00000000 l4021A616
	// succ:  l4021A60F l4021A616
l4021A60F:
	a3 = 4
	a2 = Mem0[a0 + 0x0000001C:word32]
	a0 = 0x4021A616
	call a5 (retsize: 0;)
	// succ:  l4021A616
l4021A616:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_chm_cancel_op_exit
sdk_chm_cancel_op_exit:


// sdk_chm_return_home_channel
// Return size: 0
void sdk_chm_return_home_channel()
sdk_chm_return_home_channel_entry:
	// succ:  l4021A620
l4021A620:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	a12 = 0x402035F0
	Mem0[a1:word32] = a0
	a12 = Mem0[a12 + 0x0000014C:word32]
	a0 = 0x40214520
	v5 = a0
	a0 = 0x4021A635
	call v5 (retsize: 0;)
	v6 = Mem0[a2 + 0x00000004:uint16]
	a0 = (uint32) v6
	v8 = Mem0[a12 + 0x00000004:uint16]
	a2 = (uint32) v8
	branch a0 == a2 l4021A644
	// succ:  l4021A63E l4021A644
l4021A63E:
	a2 = a12 | a12
	a0 = 0x4021A644
	call sdk_chm_set_current_channel (retsize: 0;)
	// succ:  l4021A644
l4021A644:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_chm_return_home_channel_exit
sdk_chm_return_home_channel_exit:


// sdk_chm_set_current_channel
// Return size: 0
void sdk_chm_set_current_channel()
sdk_chm_set_current_channel_entry:
	// succ:  l4021A654
l4021A654:
	a1 = fp
	a3 = 1
	a4 = 0
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	v9 = Mem0[a2 + 0x00000004:uint16]
	a2 = (uint32) v9
	a0 = 0x4021A650
	v10 = a0
	a0 = 0x4021A66C
	call v10 (retsize: 0;)
	a2 = 0x4020290C
	a0 = -32
	v11 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v11
	a13 = 0x4021287C
	branch a2 != 0x00000000 l4021A69F
	// succ:  l4021A679 l4021A69F
l4021A679:
	a0 = 0x40202680
	v12 = a0
	a0 = 0x4021A67F
	call v12 (retsize: 0;)
	a0 = -32
	// succ:  l4021A681
l4021A681:
	a5 = Mem0[a13 + 0x00000200:word32]
	a5 = a5 & a0
	Mem0[a13 + 0x00000200:word32] = a5
	a4 = Mem0[a13 + 0x00000200:word32]
	branch (a4 & 0x00000001) != 0x00000000 l4021A681
	// succ:  l4021A699 l4021A681
l4021A699:
	a2 = 0x4020290C
	v14 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v14
	// succ:  l4021A69F
l4021A69F:
	a3 = 0x4021A3F4
	Mem0[a3 + 0x0000003C:word32] = a12
	branch a2 != 0x00000000 l4021A6C0
	// succ:  l4021A6A6 l4021A6C0
l4021A6A6:
	a4 = Mem0[a13 + 0x00000200:word32]
	a5 = 1
	a4 = a4 & a0
	a4 = a4 | a5
	Mem0[a13 + 0x00000200:word32] = a4
	a0 = 0x40202688
	v15 = a0
	a0 = 0x4021A6C0
	call v15 (retsize: 0;)
	// succ:  l4021A6C0
l4021A6C0:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_chm_set_current_channel_exit
sdk_chm_set_current_channel_exit:


// sdk_chm_freq2index
// Return size: 0
void sdk_chm_freq2index()
sdk_chm_freq2index_entry:
	// succ:  l4021A6CC
l4021A6CC:
	a1 = fp
	a5 = 0
	a6 = 0x4021A3F4
	a7 = 14
	a6 = Mem0[a6 + 0x00000000:word32]
	// succ:  l4021A6D5
l4021A6D5:
	a8 = a5 + a5 * 0x00000002
	a8 = a6 + a8 * 0x00000004
	v7 = Mem0[a8 + 0x00000088:uint16]
	a8 = (uint32) v7
	branch a8 != a2 l4021A6E5
	// succ:  l4021A6E1 l4021A6E5
l4021A6E1:
	a2 = a5
	return
	// succ:  sdk_chm_freq2index_exit
l4021A6E5:
	a5 = a5 + 1
	a5 = a5 & 0x000000FF
	branch a5 != a7 l4021A6D5
	// succ:  l4021A6ED l4021A6D5
l4021A6ED:
	a2 = 0x000000FF
	return
	// succ:  sdk_chm_freq2index_exit
sdk_chm_freq2index_exit:


// sdk_chm_check_same_channel
// Return size: 0
void sdk_chm_check_same_channel()
sdk_chm_check_same_channel_entry:
	// succ:  l4021A6F4
l4021A6F4:
	a1 = fp
	a2 = 0x402035F0
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	a2 = Mem0[a2 + 0x0000014C:word32]
	a0 = 0x4021A703
	call fn40314A84 (retsize: 0;)
	Mem0[a1:word32] = a2
	a0 = 0x40214520
	v5 = a0
	a0 = 0x4021A70C
	call v5 (retsize: 0;)
	a0 = 0x4021A70F
	call fn40314A84 (retsize: 0;)
	a3 = 0
	a4 = Mem0[a1 + 0x00000000:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a4 = a4 - a2
	a1 = a1 + 16
	a2 = 1
	branch a4 == 0x00000000 l4021A720
	// succ:  l4021A71D_1 l4021A720
l4021A71D_1:
	a2 = a3
	// succ:  l4021A720
l4021A720:
	return
	// succ:  sdk_chm_check_same_channel_exit
sdk_chm_check_same_channel_exit:


// sdk_cnx_attach
// Return size: 0
void sdk_cnx_attach()
sdk_cnx_attach_entry:
	// succ:  l4021A730
l4021A730:
	a1 = fp
	a3 = 0x00000760
	a1 = a1 - 16
	Mem0[a1:word32] = a2
	Mem0[a1 + 0x00000004:word32] = a0
	a2 = 0x4021A724
	a0 = 0x40213724
	v6 = a0
	a0 = 0x4021A745
	call v6 (retsize: 0;)
	a2 = 0x4021A728
	a0 = 0x0000000F
	a7 = Mem0[a1 + 0x00000000:word32]
	a4 = 0x4021A724
	a5 = 2
	a3 = Mem0[a4 + 0x00000000:word32]
	a6 = a4
	a3 = a3 | a5
	Mem0[a7:word32] = a6
	Mem0[a2:byte] = a0
	Mem0[a4:word32] = a3
	a2 = 0x4021A72C
	a3 = 0
	a0 = 0x4021A768
	call sdk_ppRegisterTxCallback (retsize: 0;)
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_cnx_attach_exit
sdk_cnx_attach_exit:


// sdk_cnx_sta_connect_led_timer_cb
// Return size: 0
void sdk_cnx_sta_connect_led_timer_cb()
sdk_cnx_sta_connect_led_timer_cb_entry:
	// succ:  l4021A770
l4021A770:
	a1 = fp
	a4 = 0x00000001
	a3 = 0x00000000
	a5 = 0x402131CC
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	v8 = Mem0[a5 + 0x00000063:byte]
	a2 = (uint32) v8
	v9 = Mem0[a5 + 0x00000062:byte]
	a5 = (uint32) v9
	a6 = a2 & 0x00000001
	branch a6 != 0x00000000 l4021A78B
	// succ:  l4021A788_1 l4021A78B
l4021A788_1:
	a3 = a4
	// succ:  l4021A78B
l4021A78B:
	SAR = 0x00000020 - a5
	a2 = a2 << SAR
	a5 = 0
	a4 = a4 << SAR
	a3 = a3 << SAR
	a0 = 0x4021A79C
	call fn40303F68 (retsize: 0;)
	a8 = 1
	a6 = 0
	a7 = 0x402131CC
	a0 = Mem0[a1 + 0x00000000:word32]
	v15 = Mem0[a7 + 0x00000063:byte]
	a9 = (uint32) v15
	a1 = a1 + 16
	a9 = a9 & 0x00000001
	branch a9 != 0x00000000 l4021A7B1
	// succ:  l4021A7AE_2 l4021A7B1
l4021A7AE_2:
	a6 = a8
	// succ:  l4021A7B1
l4021A7B1:
	Mem0[a7 + 0x00000063:byte] = a6
	return
	// succ:  sdk_cnx_sta_connect_led_timer_cb_exit
sdk_cnx_sta_connect_led_timer_cb_exit:


// sdk_cnx_sta_connect_cmd
// Return size: 0
void sdk_cnx_sta_connect_cmd()
sdk_cnx_sta_connect_cmd_entry:
	// succ:  l4021A7C4
l4021A7C4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a0 = 0x402131CC
	a12 = a2
	v7 = Mem0[a0 + 0x00000061:byte]
	a2 = (uint32) v7
	a13 = a3
	branch a2 != 1 l4021A7FB
	// succ:  l4021A7DA l4021A7FB
l4021A7DA:
	v9 = Mem0[a0 + 0x00000060:byte]
	a3 = (uint32) v9
	branch a3 != 1 l4021A7FB
	// succ:  l4021A7E0 l4021A7FB
l4021A7E0:
	a2 = 0x40204250
	a0 = 0x4021A7E6
	call fn40304430 (retsize: 0;)
	a2 = 0x40204250
	a3 = 0x4021A7B8
	a4 = 0
	a0 = 0x4021A7F1
	call fn403042E8 (retsize: 0;)
	a2 = 0x40204250
	a3 = 50
	a4 = 1
	a0 = 0x4021A7FB
	call fn4030438C (retsize: 0;)
	// succ:  l4021A7FB
l4021A7FB:
	a7 = 16
	a6 = 0x40214568
	a5 = Mem0[a6 + 0x0000026C:word32]
	a5 = a5 | a7
	Mem0[a6 + 0x0000026C:word32] = a5
	v14 = Mem0[a12 + 0x000000A9:byte]
	a4 = (uint32) v14
	branch a4 == 0x00000000 l4021A823
	// succ:  l4021A814 l4021A823
l4021A814:
	a2 = 2
	a3 = 0
	a4 = 0x000000AA
	a4 = a12 + a4
	a0 = 0x4021A820
	call sdk_wDev_SetRxPolicy (retsize: 0;)
	goto l4021A82D
	// succ:  l4021A82D
l4021A823:
	a2 = 0x00000000
	a3 = 0
	a4 = 0
	a0 = 0x4021A82D
	call sdk_wDev_SetRxPolicy (retsize: 0;)
	// succ:  l4021A82D
l4021A82D:
	a0 = 0x4021A830
	call fn40318FE0 (retsize: 0;)
	branch a13 == 0x00000000 l4021A83D
	// succ:  l4021A832 l4021A83D
l4021A832:
	a2 = a13
	a0 = 0x4021A837
	call fn403191D8 (retsize: 0;)
	a13 = 0x4021A7BC
	goto l4021A840
	// succ:  l4021A840
l4021A83D:
	a13 = 0x0000050F
	// succ:  l4021A840
l4021A840:
	a5 = 0x4021A7C0
	a5 = Mem0[a5 + 0x00000000:word32]
	a6 = 0x4020CB28
	branch (a5 & 0x00000001) == 0x00000000 l4021A851
	// succ:  l4021A84B l4021A851
l4021A84B:
	a13 = a13 | a6
	goto l4021A860
	// succ:  l4021A860
l4021A851:
	a3 = a12 + 16
	v15 = Mem0[a12 + 0x0000000C:byte]
	a4 = (uint32) v15
	a2 = 0x00000000
	a5 = 0x00000001
	a0 = 0x4021A860
	call fn40318FF4 (retsize: 0;)
	// succ:  l4021A860
l4021A860:
	a2 = a13 | a13
	a0 = 0x4021A866
	call fn4021A94C (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_cnx_sta_connect_cmd_exit
sdk_cnx_sta_connect_cmd_exit:


// sdk_cnx_sta_scan_cmd
// Return size: 0
void sdk_cnx_sta_scan_cmd()
sdk_cnx_sta_scan_cmd_entry:
	// succ:  l4021A874
l4021A874:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = 0x40218BB0
	a14 = a4
	v9 = Mem0[a0 + 0x0000005D:byte]
	a0 = (uint32) v9
	a12 = a2
	branch (a0 & 0x00000001) == 0x00000000 l4021A89F
	// succ:  l4021A891 l4021A89F
l4021A891:
	a2 = 0x402035F0
	a2 = Mem0[a2 + 0x00000010:word32]
	v11 = Mem0[a2 + 0x000000B8:byte]
	a2 = (uint32) v11
	a2 = a2 - 5
	branch a2 == 0x00000000 l4021A93A
	// succ:  l4021A89F l4021A93A
l4021A89F:
	branch a12 != 0x00000000 l4021A8CC
	// succ:  l4021A8A1 l4021A8CC
l4021A8A1:
	a2 = 1
	a3 = 0
	a4 = 0
	a5 = 2
	a0 = 0x4021A8AC
	call fn40318FF4 (retsize: 0;)
	a0 = 0x4021A8AF
	call fn40318FE0 (retsize: 0;)
	a2 = 0
	a0 = 0x4021A8B4
	call fn40318FEC (retsize: 0;)
	a2 = 0
	a3 = 0
	a4 = 0
	a0 = 0x4021A8BD
	call sdk_wDev_SetRxPolicy (retsize: 0;)
	a5 = a14
	a2 = 0x0000010F
	a3 = 3
	a4 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x4021A8C9
	call fn40318C3C (retsize: 0;)
	goto l4021A93A
	// succ:  l4021A93A
l4021A8CC:
	a13 = Mem0[a12 + 0x00000000:word32]
	branch a13 == 0x00000000 l4021A8E6
	// succ:  l4021A8D2 l4021A8E6
l4021A8D2:
	a2 = a13
	a0 = 0x4021A8D7
	call fn4030600C (retsize: 0;)
	a3 = a13
	a4 = a2 & 0x000000FF
	a5 = 1
	a2 = 1
	a0 = 0x4021A8E3
	call fn40318FF4 (retsize: 0;)
	goto l4021A8F3
	// succ:  l4021A8F3
l4021A8E6:
	a2 = 0x00000001
	a3 = 0x00000000
	a4 = 0
	a5 = 2
	a0 = 0x4021A8F3
	call fn40318FF4 (retsize: 0;)
	// succ:  l4021A8F3
l4021A8F3:
	a2 = Mem0[a12 + 0x00000004:word32]
	branch a2 == 0x00000000 l4021A8FD
	// succ:  l4021A8F7 l4021A8FD
l4021A8F7:
	a0 = 0x4021A8FA
	call fn40318FBC (retsize: 0;)
	goto l4021A900
	// succ:  l4021A900
l4021A8FD:
	a0 = 0x4021A900
	call fn40318FE0 (retsize: 0;)
	// succ:  l4021A900
l4021A900:
	v13 = Mem0[a12 + 0x00000008:byte]
	a2 = (uint32) v13
	a3 = 0x0000000D
	branch a2 == 0x00000000 l4021A915
	// succ:  l4021A909 l4021A915
l4021A909:
	branch a3 <u a2 l4021A915
	// succ:  l4021A90C l4021A915
l4021A90C:
	a0 = 0x4021A90F
	call fn403191D8 (retsize: 0;)
	a13 = 0x40204624
	goto l4021A918
	// succ:  l4021A918
l4021A915:
	a13 = 0x0000010F
	// succ:  l4021A918
l4021A918:
	v14 = Mem0[a12 + 0x00000009:byte]
	a4 = (uint32) v14
	branch a4 == 0x00000000 l4021A928
	// succ:  l4021A91D l4021A928
l4021A91D:
	a2 = 1
	a0 = 0x4021A922
	call fn40318FEC (retsize: 0;)
	goto l4021A92E
	// succ:  l4021A92E
l4021A928:
	a2 = 0x00000000
	a0 = 0x4021A92E
	call fn40318FEC (retsize: 0;)
	// succ:  l4021A92E
l4021A92E:
	a5 = a14 | a14
	a2 = a13
	a3 = 3
	a4 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x4021A93A
	call fn40318C3C (retsize: 0;)
	// succ:  l4021A93A
l4021A93A:
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_cnx_sta_scan_cmd_exit
sdk_cnx_sta_scan_cmd_exit:


// fn4021A94C
// Return size: 0
void fn4021A94C()
fn4021A94C_entry:
	// succ:  l4021A94C
l4021A94C:
	a1 = fp
	a1 = a1 - 16
	a5 = 0x402035F0
	Mem0[a1:word32] = a0
	a0 = Mem0[a5 + 0x00000010:word32]
	a4 = 1
	v7 = Mem0[a0 + 0x000000B9:byte]
	a3 = (uint32) v7
	a6 = 16
	branch a3 != 0x00000000 l4021A964
	// succ:  l4021A95F l4021A964
l4021A95F:
	Mem0[a0 + 0x000000BA:byte] = a4
	a0 = Mem0[a5 + 0x00000010:word32]
	// succ:  l4021A964
l4021A964:
	a5 = 0x4021A724
	Mem0[a0 + 0x000000B8:byte] = a4
	a4 = Mem0[a5 + 0x00000000:word32]
	a4 = a4 | a6
	Mem0[a5:word32] = a4
	a4 = 0x4021A948
	branch a2 == 0x00000000 l4021A983
	// succ:  l4021A979 l4021A983
l4021A979:
	a3 = 2
	a5 = 0
	a0 = 0x4021A980
	call fn40318C3C (retsize: 0;)
	goto l4021A98C
	// succ:  l4021A98C
l4021A983:
	a2 = a4 | a4
	a3 = 0x00000000
	a0 = 0x4021A98C
	call fn4021A99C (retsize: 0;)
	// succ:  l4021A98C
l4021A98C:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn4021A94C_exit
fn4021A94C_exit:


// fn4021A99C
// Return size: 0
void fn4021A99C()
fn4021A99C_entry:
	// succ:  l4021A99C
l4021A99C:
	a1 = fp
	a3 = 0x4021A994
	a4 = 0x00000000
	a1 = a1 - 16
	a6 = a2 | a2
	Mem0[a1:word32] = a0
	a0 = 0x4021A998
	a2 = 2
	Mem0[a0 + 0x000001FC:word32] = a6
	a0 = 0x4021A9B6
	call fn4031A4AC (retsize: 0;)
	branch a2 == 0x00000000 l4021A9D0
	// succ:  l4021A9B8 l4021A9D0
l4021A9B8:
	a2 = 1
	goto l4021A9C9
	// succ:  l4021A9C9
l4021A9BD:
	a2 = 0x00000000
	a3 = 0x00000000
	a0 = 0x4021A9C6
	call fn4021AA90 (retsize: 0;)
	a2 = 0x00000002
	// succ:  l4021A9C9
l4021A9C9:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn4021A99C_exit
l4021A9D0:
	a0 = 0x4021A9D3
	call fn4021B060 (retsize: 0;)
	branch a2 == 0x00000000 l4021A9BD
	// succ:  l4021A9D6 l4021A9BD
l4021A9D6:
	a3 = 0
	a0 = 0x4021A9DB
	call fn4021A9E4 (retsize: 0;)
	// succ:  l4025A9C6
l4025A9C6:
fn4021A99C_exit:


// fn4021A9E4
// Return size: 0
void fn4021A9E4()
fn4021A9E4_entry:
	// succ:  l4021A9E4
l4021A9E4:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a0
	a0 = 0x402035F0
	Mem0[a1 + 0x00000018:word32] = a12
	a0 = Mem0[a0 + 0x00000010:word32]
	a12 = a2
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a1 + 0x00000010:word32] = a0
	a0 = 0x40214520
	v6 = a0
	a0 = 0x4021A9FF
	call v6 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000078:word32]
	branch a2 == a0 l4021AA16
	// succ:  l4021AA05 l4021AA16
l4021AA05:
	a6 = a12
	a3 = 0
	a4 = 0x4021A9E0
	a5 = 0
	a2 = a0
	a0 = 0x4021AA13
	call fn4031A504 (retsize: 0;)
	goto l4021AA34
	// succ:  l4021AA34
l4021AA16:
	a5 = a12 | a12
	a2 = a12 | a12
	a4 = a12 | a12
	a8 = 0
	a3 = Mem0[a1 + 0x00000010:word32]
	a6 = 0x402138F4
	a3 = a3 + 41
	a7 = a6 - 104
	v13 = Mem0[a7 + 0x00000064:byte]
	a7 = (uint32) v13
	Mem0[a1:word32] = a8
	a0 = 0x4021AA34
	call fn403179B8 (retsize: 0;)
	// succ:  l4021AA34
l4021AA34:
	a12 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 32
	return
	// succ:  fn4021A9E4_exit
fn4021A9E4_exit:


// fn4021AA90
// Return size: 0
void fn4021AA90()
fn4021AA90_entry:
	// succ:  l4021AA90
l4021AA90:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a0
	a12 = 0x4021AA8C
	a0 = 0
	Mem0[a12 + 0x0000007E:byte] = a0
	a12 = Mem0[a12 + 0x00000170:word32]
	a0 = 0x4021AAA9
	call fn4031A620 (retsize: 0;)
	a0 = 0x4021AAAC
	call fn4031A4F0 (retsize: 0;)
	branch a12 == 0x00000000 l4021AAB7
	// succ:  l4021AAAE l4021AAB7
l4021AAAE:
	a3 = Mem0[a1 + 0x00000000:word32]
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 0
	v7 = a0
	a0 = 0x4021AAB7
	call v7 (retsize: 0;)
	// succ:  l4021AAB7
l4021AAB7:
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  fn4021AA90_exit
fn4021AA90_exit:


// sdk_cnx_connect_timeout
// Return size: 0
void sdk_cnx_connect_timeout()
sdk_cnx_connect_timeout_entry:
	// succ:  l4021AAC4
l4021AAC4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = 0x402035F0
	a2 = 0x4021AAC0
	a0 = Mem0[a0 + 0x00000010:word32]
	Mem0[a1:word32] = a0
	a0 = 0x402034D0
	v5 = a0
	a0 = 0x4021AADC
	call v5 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000000:word32]
	a2 = Mem0[a2 + 0x0000003C:word32]
	branch a2 == 0x00000000 l4021AAEC
	// succ:  l4021AAE2 l4021AAEC
l4021AAE2:
	a2 = 0x402035F0
	a3 = 0
	a4 = 1
	a0 = 0x4021AAEC
	call fn4031990C (retsize: 0;)
	// succ:  l4021AAEC
l4021AAEC:
	a5 = 0x4020462C
	a3 = 0x40212EE8
	a4 = Mem0[a3 + 0x000003F4:word32]
	a4 = a4 & a5
	a4 = a4 >>u 0x00000010 & 0x0000FFFF
	a3 = Mem0[a3 + 0x000003F4:word32]
	a2 = 0x40212B28
	a3 = a3 & 0x000000FF
	branch a4 != 1 l4021AB1A
	// succ:  l4021AB0D l4021AB1A
l4021AB0D:
	a6 = 13
	branch a6 >=u a3 l4021AB26
	// succ:  l4021AB12 l4021AB26
l4021AB12:
	a3 = 0
	a0 = 0x4021AB17
	call fn4031A7C4 (retsize: 0;)
	goto l4021AB1F
	// succ:  l4021AB1F
l4021AB1A:
	a3 = 0
	a0 = 0x4021AB1F
	call fn4031A7C4 (retsize: 0;)
	// succ:  l4021AB1F
l4021AB1F:
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_cnx_connect_timeout_exit
l4021AB26:
	a0 = 0x4021AB29
	call fn4031A7C4 (retsize: 0;)
	// succ:  l4025AB1F
l4025AB1F:
sdk_cnx_connect_timeout_exit:


// sdk_cnx_start_handoff_cb
// Return size: 0
void sdk_cnx_start_handoff_cb()
sdk_cnx_start_handoff_cb_entry:
	// succ:  l4021AB2C
l4021AB2C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a3 != 0x00000000 l4021AB36
	// succ:  l4021AB33 l4021AB36
l4021AB33:
	a0 = 0x4021AB36
	call fn4021AB48 (retsize: 0;)
	// succ:  l4021AB36
l4021AB36:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_cnx_start_handoff_cb_exit
sdk_cnx_start_handoff_cb_exit:


// fn4021AB48
// Return size: 0
void fn4021AB48()
fn4021AB48_entry:
	// succ:  l4021AB48
l4021AB48:
	a1 = fp
	a3 = 0x00000010
	a2 = 0x4021A724
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = 0x402035F0
	a0 = Mem0[a2 + 0x00000000:word32]
	a12 = Mem0[a12 + 0x00000010:word32]
	a0 = a0 | a3
	Mem0[a2:word32] = a0
	a0 = 0x4021AB68
	call fn4021AE50 (retsize: 0;)
	a12 = a12 + 4
	a13 = 0x40218EE0
	branch a2 != 0x00000000 l4021ABB6
	// succ:  l4021AB70 l4021ABB6
l4021AB70:
	a0 = 0x402035F0
	a0 = Mem0[a0 + 0x00000010:word32]
	v8 = Mem0[a0 + 0x000000BA:byte]
	a0 = (uint32) v8
	branch a0 == 2 l4021AB8C
	// succ:  l4021AB7B l4021AB8C
l4021AB7B:
	a2 = 3
	a0 = 0x4021AB80
	call fn403198D4 (retsize: 0;)
	a2 = 0x4021AB40
	a3 = 0x402138F4
	a0 = 0x402034D0
	v9 = a0
	a0 = 0x4021AB8C
	call v9 (retsize: 0;)
	// succ:  l4021AB8C
l4021AB8C:
	a2 = 0x402138F8
	a3 = 0x40212EE8
	Mem0[a3 + 0x000003F4:word32] = a2
	a2 = a12 | a12
	a0 = 0x4021AB9E
	call fn40304430 (retsize: 0;)
	a3 = a13
	a2 = a12
	a4 = 0
	a0 = 0x4021ABA7
	call fn403042E8 (retsize: 0;)
	a2 = a12
	a3 = 0x000003E8
	a4 = 0
	a0 = 0x4021ABB1
	call fn4030438C (retsize: 0;)
	a2 = 0
	goto l4021ABE5
	// succ:  l4021ABE5
l4021ABB6:
	a0 = 0x4021ABB9
	call fn4021AC10 (retsize: 0;)
	a13 = a2 | a2
	a2 = a12
	a0 = 0x4021ABC1
	call fn40304430 (retsize: 0;)
	a3 = 0x40218EE0
	a2 = a12
	a4 = 0
	a0 = 0x4021ABCB
	call fn403042E8 (retsize: 0;)
	a2 = a12
	a3 = 0x000003E8
	a4 = 0
	a0 = 0x4021ABD5
	call fn4030438C (retsize: 0;)
	branch a13 != 0x00000000 l4021ABF0
	// succ:  l4021ABD7 l4021ABF0
l4021ABD7:
	a2 = 0x4021A724
	a0 = Mem0[a2 + 0x00000000:word32]
	a3 = -17
	a0 = a0 & a3
	Mem0[a2:word32] = a0
	// succ:  l4021ABE3
l4021ABE3:
	a2 = a13
	// succ:  l4021ABE5
l4021ABE5:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn4021AB48_exit
l4021ABF0:
	branch a13 != 1 l4021ABE3
	// succ:  l4021ABF3 l4021ABE3
l4021ABF3:
	a2 = 0x4021AB44
	a0 = Mem0[a2 + 0x00000000:word32]
	a3 = 0x00000140
	a0 = a0 | a3
	// succ:  l4025ABE1
l4025ABE1:
fn4021AB48_exit:


// fn4021AC10
// Return size: 0
void fn4021AC10()
fn4021AC10_entry:
	// succ:  l4021AC10
l4021AC10:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021AC04
	Mem0[a1 + 0x00000004:word32] = a12
	a0 = Mem0[a0 + 0x00000000:word32]
	a12 = a2
	branch a0 == 0x00000000 l4021AC41
	// succ:  l4021AC20 l4021AC41
l4021AC20:
	branch a2 != a0 l4021AC41
	// succ:  l4021AC23 l4021AC41
l4021AC23:
	a0 = 0x40214520
	v6 = a0
	a0 = 0x4021AC29
	call v6 (retsize: 0;)
	a3 = Mem0[a12 + 0x00000078:word32]
	branch a3 != a2 l4021AC41
	// succ:  l4021AC2F l4021AC41
l4021AC2F:
	a6 = 0x4021AB44
	a2 = 0
	a5 = Mem0[a6 + 0x00000000:word32]
	a7 = 0x00000140
	a5 = a5 | a7
	Mem0[a6:word32] = a5
	goto l4021ACD3
	// succ:  l4021ACD3
l4021AC41:
	branch a12 == 0x00000000 l4021ACD1
	// succ:  l4021AC44 l4021ACD1
l4021AC44:
	a0 = 0x4020290C
	a3 = 4
	Mem0[a12 + 0x000000E8:byte] = a3
	v11 = Mem0[a0 + 0x00000000:byte]
	a0 = (uint32) v11
	branch a0 != 0x00000000 l4021AC7A
	// succ:  l4021AC51 l4021AC7A
l4021AC51:
	a0 = 0x40202680
	v12 = a0
	a0 = 0x4021AC57
	call v12 (retsize: 0;)
	a2 = 0x4021287C
	a4 = -32
	// succ:  l4021AC5C
l4021AC5C:
	a6 = Mem0[a2 + 0x00000200:word32]
	a6 = a6 & a4
	Mem0[a2 + 0x00000200:word32] = a6
	a5 = Mem0[a2 + 0x00000200:word32]
	branch (a5 & 0x00000001) != 0x00000000 l4021AC5C
	// succ:  l4021AC74 l4021AC5C
l4021AC74:
	a0 = 0x4020290C
	v14 = Mem0[a0 + 0x00000000:byte]
	a0 = (uint32) v14
	// succ:  l4021AC7A
l4021AC7A:
	a5 = 0x40203770
	a3 = Mem0[a12 + 0x00000078:word32]
	Mem0[a5 + 0x0000004C:word32] = a3
	branch a0 != 0x00000000 l4021ACA4
	// succ:  l4021AC85 l4021ACA4
l4021AC85:
	a7 = 0x4021287C
	a6 = Mem0[a7 + 0x00000200:word32]
	a8 = -32
	a6 = a6 & a8
	a8 = 1
	a6 = a6 | a8
	Mem0[a7 + 0x00000200:word32] = a6
	a0 = 0x40202688
	v16 = a0
	a0 = 0x4021ACA4
	call v16 (retsize: 0;)
	// succ:  l4021ACA4
l4021ACA4:
	a9 = 0x402125CC
	a10 = 0x4021AC08
	a9 = Mem0[a9 + 0x00000024:word32]
	Mem0[a10:word32] = a9
	a0 = 0x40214520
	v19 = a0
	a0 = 0x4021ACB9
	call v19 (retsize: 0;)
	a10 = Mem0[a12 + 0x00000078:word32]
	branch a10 == a2 l4021ACDC
	// succ:  l4021ACBF l4021ACDC
l4021ACBF:
	a3 = 0x4021AC0C
	a2 = 0x00000003
	a4 = a12
	a0 = 0x4021ACCA
	call fn4031A4AC (retsize: 0;)
	branch a2 == 0x00000000 l4021ACE8
	// succ:  l4021ACCC l4021ACE8
l4021ACCC:
	a2 = 1
	goto l4021ACD3
	// succ:  l4021ACD3
l4021ACD1:
	a2 = 1
	// succ:  l4021ACD3
l4021ACD3:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn4021AC10_exit
l4021ACDC:
	a2 = a12
	a3 = 0
	a0 = 0x4021ACE3
	call fn4021AD0C (retsize: 0;)
	a2 = 2
	goto l4025ACD3
	// succ:  l4025ACD3
l4021ACE8:
	a6 = a12 | a12
	a2 = Mem0[a12 + 0x00000078:word32]
	a5 = 0x4021AC0C
	a3 = 0x00000000
	a4 = a5 | a5
	a0 = 0x4021ACFA
	call fn4031A504 (retsize: 0;)
	goto l4025ACE3
	// succ:  l4025ACE3
l4025ACD3:
l4025ACE3:
fn4021AC10_exit:


// fn4021AD0C
// Return size: 0
void fn4021AD0C()
fn4021AD0C_entry:
	// succ:  l4021AD0C
l4021AD0C:
	a1 = fp
	a4 = 0x00000008
	a1 = a1 - 48
	Mem0[a1 + 0x00000020:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a12
	Mem0[a1 + 0x0000001C:word32] = a3
	a12 = a2
	a3 = 0x4021AD00
	a2 = a1 + 16
	a0 = 0x40203130
	v8 = a0
	a0 = 0x4021AD26
	call v8 (retsize: 0;)
	a0 = 0x4021AD29
	call fn4031A4F0 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000001C:word32]
	branch a0 != 0x00000000 l4021ADA7
	// succ:  l4021AD2E l4021ADA7
l4021AD2E:
	a2 = 6
	a0 = 0x4021AD33
	call sdk_wDev_remove_KeyEntry (retsize: 0;)
	a2 = 7
	a0 = 0x4021AD38
	call sdk_wDev_remove_KeyEntry (retsize: 0;)
	a2 = 8
	a0 = 0x4021AD3D
	call sdk_wDev_remove_KeyEntry (retsize: 0;)
	a2 = 9
	a0 = 0x4021AD42
	call sdk_wDev_remove_KeyEntry (retsize: 0;)
	a0 = 0x402131CC
	v9 = Mem0[a0 + 0x00000089:byte]
	a2 = (uint32) v9
	a3 = 0x40219274
	branch a2 == 1 l4021ADB0
	// succ:  l4021AD4E l4021ADB0
l4021AD4E:
	a2 = 0x402035F0
	a0 = 0x4021AD54
	call sdk_wpa_config_profile (retsize: 0;)
	a2 = 0x402035F0
	a3 = a12
	a0 = 0x4021AD5C
	call sdk_wpa_config_bss (retsize: 0;)
	// succ:  l4021AD5C
l4021AD5C:
	a0 = 0x4021AD5F
	call fn403191E4 (retsize: 0;)
	a0 = 0x4021AD04
	a0 = Mem0[a0 + 0x00000000:word32]
	branch a0 == 0x00000000 l4021AD87
	// succ:  l4021AD68 l4021AD87
l4021AD68:
	v10 = Mem0[a0 + 0x00000000:byte]
	a2 = (uint32) v10
	branch a2 != 0x00000000 l4021AD8C
	// succ:  l4021AD6E l4021AD8C
l4021AD6E:
	v11 = Mem0[a0 + 0x00000001:byte]
	a3 = (uint32) v11
	branch a3 != 0x00000000 l4021AD8C
	// succ:  l4021AD73 l4021AD8C
l4021AD73:
	v12 = Mem0[a0 + 0x00000002:byte]
	a4 = (uint32) v12
	branch a4 != 0x00000000 l4021AD8C
	// succ:  l4021AD78 l4021AD8C
l4021AD78:
	v14 = Mem0[a0 + 0x00000003:byte]
	a5 = (uint32) v14
	branch a5 != 0x00000000 l4021AD8C
	// succ:  l4021AD7D l4021AD8C
l4021AD7D:
	v16 = Mem0[a0 + 0x00000004:byte]
	a6 = (uint32) v16
	branch a6 != 0x00000000 l4021AD8C
	// succ:  l4021AD82 l4021AD8C
l4021AD82:
	v18 = Mem0[a0 + 0x00000005:byte]
	a7 = (uint32) v18
	branch a7 != 0x00000000 l4021AD8C
	// succ:  l4021AD87 l4021AD8C
l4021AD87:
	a4 = 0
	goto l4021AD8F
	// succ:  l4021AD8F
l4021AD8C:
	a4 = 0x00000001
	// succ:  l4021AD8F
l4021AD8F:
	a3 = 0x40212B28
	branch a4 == 0x00000000 l4021AE39
	// succ:  l4021AD95 l4021AE39
l4021AD95:
	a8 = 0x4021AD08
	v20 = Mem0[a8 + 0x00000000:byte]
	a8 = (uint32) v20
	branch a8 == 0x00000000 l4021AE39
	// succ:  l4021AD9E l4021AE39
l4021AD9E:
	a2 = a12 | a12
	a5 = 0x00000000
	a0 = 0x4021ADA7
	call fn40318B60 (retsize: 0;)
	// succ:  l4021ADA7
l4021ADA7:
	a12 = Mem0[a1 + 0x00000024:word32]
	a0 = Mem0[a1 + 0x00000020:word32]
	a1 = a1 + 48
	return
	// succ:  fn4021AD0C_exit
l4021ADB0:
	v21 = Mem0[a0 + 0x0000008A:byte]
	a2 = (uint32) v21
	branch a2 != 7 l4021ADF6
	// succ:  l4021ADB6 l4021ADF6
l4021ADB6:
	a2 = 0x00000001
	a4 = 0x00000000
	a5 = 1
	a6 = a1 + 16
	a7 = 8
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000018:word32] = a3
	a9 = 5
	Mem0[a1 + 0x00000004:word32] = a9
	Mem0[a1 + 0x00000008:word32] = a9
	a3 = a12
	a0 = 0x4021ADD2
	call sdk_ppInstallKey (retsize: 0;)
	a2 = 1
	a3 = a12
	a4 = 1
	a5 = 1
	a6 = a1 + 16
	a7 = 8
	a0 = Mem0[a1 + 0x00000018:word32]
	a10 = 6
	a11 = 5
	Mem0[a1 + 0x00000004:word32] = a11
	Mem0[a1 + 0x00000008:word32] = a10
	Mem0[a1:word32] = a0
	a0 = 0x4021ADEE
	call sdk_ppInstallKey (retsize: 0;)
	a2 = 5
	Mem0[a12 + 0x000000E9:byte] = a2
	goto l4025AD5C
	// succ:  l4025AD5C
l4021ADF6:
	a4 = a2 - 8
	branch a4 != 0x00000000 l4021AD5C
	// succ:  l4021ADFC l4021AD5C
l4021ADFC:
	a2 = 0x00000005
	a4 = 0x00000000
	a7 = 8
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000018:word32] = a3
	a5 = 5
	a6 = 13
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1 + 0x00000008:word32] = a5
	a3 = a12
	a5 = 1
	a6 = a1 + 16
	a0 = 0x4021AE1A
	call sdk_ppInstallKey (retsize: 0;)
	a2 = 5
	a3 = a12
	a4 = 1
	a5 = 1
	a6 = a1 + 16
	a8 = 13
	a7 = 6
	a9 = Mem0[a1 + 0x00000018:word32]
	Mem0[a1:word32] = a9
	Mem0[a1 + 0x00000008:word32] = a7
	Mem0[a1 + 0x00000004:word32] = a8
	a7 = 8
	a0 = 0x4021AE36
	call sdk_ppInstallKey (retsize: 0;)
	goto l4025ADEE
	// succ:  l4025ADEE
l4021AE39:
	a2 = a12
	a5 = 1
	a0 = 0x4021AE40
	call fn40318B60 (retsize: 0;)
	goto l4025ADA7
	// succ:  l4025ADA7
l4025AD5C:
l4025ADA7:
l4025ADEE:
fn4021AD0C_exit:


// fn4021AE50
// Return size: 0
void fn4021AE50()
fn4021AE50_entry:
	// succ:  l4021AE50
l4021AE50:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1:word32] = a0
	a0 = 0x4021AE48
	Mem0[a1 + 0x00000008:word32] = a13
	v7 = Mem0[a0 + 0x00000000:byte]
	a0 = (uint32) v7
	Mem0[a1 + 0x0000000C:word32] = a14
	branch a0 == 0x00000000 l4021AED0
	// succ:  l4021AE66 l4021AED0
l4021AE66:
	a14 = 0
	a13 = 0
	a15 = 0x4021926C
	a0 = 0x4021AE4C
	a2 = 0
	a3 = 0x402138FC
	Mem0[a1 + 0x00000018:word32] = a3
	Mem0[a1 + 0x00000014:word32] = a2
	// succ:  l4021AE79
l4021AE79:
	v12 = Mem0[a15 + 0x00000080:byte]
	a4 = (uint32) v12
	a2 = a0 + a13 * 0x00000004
	a2 = a2 + 0x00000100
	v13 = Mem0[a2 + 0x000000FF:byte]
	a12 = (uint32) v13
	v14 = Mem0[a2 + 0x000000FE:byte]
	a3 = (uint32) v14
	a12 = a12 << 24
	a12 = a12 | a3
	a12 = a12 << 24
	v15 = Mem0[a2 + 0x000000FD:byte]
	a3 = (uint32) v15
	v16 = Mem0[a2 + 0x000000FC:byte]
	a2 = (uint32) v16
	a12 = a12 | a3
	a12 = a12 << 24
	a12 = a12 | a2
	branch a4 == 0x00000000 l4021AEB0
	// succ:  l4021AEA2 l4021AEB0
l4021AEA2:
	a2 = Mem0[a1 + 0x00000018:word32]
	a3 = a12
	a4 = 6
	a0 = 0x40202AA8
	v17 = a0
	a0 = 0x4021AEAE
	call v17 (retsize: 0;)
	branch a2 == 0x00000000 l4021AED6
	// succ:  l4021AEB0 l4021AED6
l4021AEB0:
	a2 = a12
	a0 = 0x4021AEB5
	call fn4021AEE8 (retsize: 0;)
	a0 = 0x4021AE4C
	a4 = 0x4021AE48
	a13 = a13 + 1
	a13 = a13 & 0x000000FF
	v18 = Mem0[a4 + 0x00000000:byte]
	a4 = (uint32) v18
	branch a14 >=u a2 l4021AECA
	// succ:  l4021AEC6 l4021AECA
l4021AEC6:
	a14 = a2
	Mem0[a1 + 0x00000014:word32] = a12
	// succ:  l4021AECA
l4021AECA:
	branch a13 <u a4 l4021AE79
	// succ:  l4021AECD l4021AE79
l4021AECD:
	goto l4021AED4
	// succ:  l4021AED4
l4021AED0:
	a5 = 0
	Mem0[a1 + 0x00000014:word32] = a5
	// succ:  l4021AED4
l4021AED4:
	a12 = Mem0[a1 + 0x00000014:word32]
	// succ:  l4021AED6
l4021AED6:
	a0 = Mem0[a1 + 0x00000000:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12
	a15 = Mem0[a1 + 0x00000010:word32]
	a12 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 32
	return
	// succ:  fn4021AE50_exit
fn4021AE50_exit:


// fn4021AEE8
// Return size: 0
void fn4021AEE8()
fn4021AEE8_entry:
	// succ:  l4021AEE8
l4021AEE8:
	a1 = fp
	a5 = 0x4021A728
	v4 = Mem0[a5 + 0x00000000:byte]
	a5 = (uint32) v4
	branch (a5 & 0x00000001) == 0x00000000 l4021AF0C
	// succ:  l4021AEF1 l4021AF0C
l4021AEF1:
	v6 = Mem0[a2 + 0x00000073:byte]
	a4 = (uint32) v6
	v9 = Mem0[a2 + 0x00000070:byte]
	a6 = (uint32) v9
	a4 = a4 << 8
	a4 = a4 >> 24
	branch (a5 & 0x00000002) == 0x00000000 l4021AF1D
	// succ:  l4021AF00 l4021AF1D
l4021AF00:
	a6 = a6 << 8
	a6 = a6 >> 24
	v10 = (int16) a4
	v11 = (int16) a6
	a4 = v10 *s v11
	goto l4021AF1D
	// succ:  l4021AF1D
l4021AF0C:
	branch (a5 & 0x00000002) == 0x00000000 l4021AF1B
	// succ:  l4021AF0F l4021AF1B
l4021AF0F:
	v12 = Mem0[a2 + 0x00000070:byte]
	a4 = (uint32) v12
	a4 = a4 << 8
	a4 = a4 >> 24
	goto l4021AF1D
	// succ:  l4021AF1D
l4021AF1B:
	a4 = 0
	// succ:  l4021AF1D
l4021AF1D:
	branch (a5 & 0x00000004) == 0x00000000 l4021AF2A
	// succ:  l4021AF20 l4021AF2A
l4021AF20:
	branch a4 == 0x00000000 l4021AF2A
	// succ:  l4021AF22 l4021AF2A
l4021AF22:
	v14 = Mem0[a2 + 0x00000071:byte]
	a7 = (uint32) v14
	a6 = a4 + 2
	branch a7 == 0x00000000 l4021AF2A
	// succ:  l4021AF27_1 l4021AF2A
l4021AF27_1:
	a4 = a6
	// succ:  l4021AF2A
l4021AF2A:
	branch (a5 & 0x00000008) == 0x00000000 l4021AF36
	// succ:  l4021AF2D l4021AF36
l4021AF2D:
	v16 = Mem0[a2 + 0x00000076:byte]
	a9 = (uint32) v16
	a8 = a4 << 31
	branch a9 == 0x00000000 l4021AF36
	// succ:  l4021AF33_2 l4021AF36
l4021AF33_2:
	a4 = a8
	// succ:  l4021AF36
l4021AF36:
	a2 = a4
	return
	// succ:  fn4021AEE8_exit
fn4021AEE8_exit:


// sdk_cnx_bss_alloc
// Return size: 0
void sdk_cnx_bss_alloc()
sdk_cnx_bss_alloc_entry:
	// succ:  l4021AF3C
l4021AF3C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	a12 = 0
	a13 = 0
	a15 = 0x4021A724
	a0 = -1
	Mem0[a1 + 0x00000014:word32] = a0
	// succ:  l4021AF54
l4021AF54:
	a0 = 0x00000110
	v8 = (uint16) a12
	v9 = (uint16) a0
	a0 = v8 *u v9
	a0 = a15 + a0
	v11 = Mem0[a0 + 0x00000010:byte]
	a2 = (uint32) v11
	a14 = a0 + 16
	branch a2 != 0x00000000 l4021AFC8
	// succ:  l4021AF66 l4021AFC8
l4021AF66:
	v12 = Mem0[a0 + 0x00000011:byte]
	a2 = (uint32) v12
	v14 = Mem0[a0 + 0x00000012:byte]
	a3 = (uint32) v14
	branch a2 != 0x00000000 l4021AFC8
	// succ:  l4021AF6F l4021AFC8
l4021AF6F:
	branch a3 != 0x00000000 l4021AFC8
	// succ:  l4021AF72 l4021AFC8
l4021AF72:
	v16 = Mem0[a0 + 0x00000013:byte]
	a4 = (uint32) v16
	branch a4 != 0x00000000 l4021AFC8
	// succ:  l4021AF78 l4021AFC8
l4021AF78:
	v18 = Mem0[a0 + 0x00000014:byte]
	a5 = (uint32) v18
	branch a5 != 0x00000000 l4021AFC8
	// succ:  l4021AF7E l4021AFC8
l4021AF7E:
	v20 = Mem0[a0 + 0x00000015:byte]
	a6 = (uint32) v20
	branch a6 != 0x00000000 l4021AFC8
	// succ:  l4021AF84 l4021AFC8
l4021AF84:
	a13 = a0 + 16
	v22 = Mem0[a13 + 0x00000000:byte]
	a7 = (uint32) v22
	v24 = Mem0[a13 + 0x00000001:byte]
	a8 = (uint32) v24
	branch a7 != 0x00000000 l4021AFA7
	// succ:  l4021AF90 l4021AFA7
l4021AF90:
	branch a8 != 0x00000000 l4021AFA7
	// succ:  l4021AF93 l4021AFA7
l4021AF93:
	v26 = Mem0[a13 + 0x00000002:byte]
	a9 = (uint32) v26
	v28 = Mem0[a13 + 0x00000003:byte]
	a10 = (uint32) v28
	branch a9 != 0x00000000 l4021AFA7
	// succ:  l4021AF9B l4021AFA7
l4021AF9B:
	branch a10 != 0x00000000 l4021AFA7
	// succ:  l4021AF9D l4021AFA7
l4021AF9D:
	v30 = Mem0[a13 + 0x00000004:byte]
	a11 = (uint32) v30
	v31 = Mem0[a13 + 0x00000005:byte]
	a12 = (uint32) v31
	branch a11 != 0x00000000 l4021AFA7
	// succ:  l4021AFA5 l4021AFA7
l4021AFA5:
	branch a12 == 0x00000000 l4021AFAC
	// succ:  l4021AFA7 l4021AFAC
l4021AFA7:
	a2 = a13
	a0 = 0x4021AFAC
	call sdk_cnx_remove_rc (retsize: 0;)
	// succ:  l4021AFAC
l4021AFAC:
	a0 = Mem0[a1 + 0x00000000:word32]
	a12 = Mem0[a1 + 0x00000004:word32]
	a2 = a13
	v32 = Mem0[a13 + 0x00000006:byte]
	a14 = (uint32) v32
	a15 = 1
	a14 = a14 | a15
	Mem0[a13 + 0x00000006:byte] = a14
	a15 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_cnx_bss_alloc_exit
l4021AFC8:
	a2 = 0x4021AC04
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a2 == a14 l4021AFDE
	// succ:  l4021AFD0 l4021AFDE
l4021AFD0:
	a2 = a14
	a0 = 0x4021AFD5
	call fn4031AEE8 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000014:word32]
	branch a2 >=u a3 l4021AFDE
	// succ:  l4021AFDA l4021AFDE
l4021AFDA:
	a13 = a14
	Mem0[a1 + 0x00000014:word32] = a2
	// succ:  l4021AFDE
l4021AFDE:
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	a5 = a12 - 6
	branch a5 != 0x00000000 l4021AF54
	// succ:  l4021AFE9 l4021AF54
l4021AFE9:
	// succ:  l4025AF87
l4025AF87:
sdk_cnx_bss_alloc_exit:


// sdk_cnx_rc_search
// Return size: 0
void sdk_cnx_rc_search()
sdk_cnx_rc_search_entry:
	// succ:  l4021AFEC
l4021AFEC:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a14
	a14 = 0x4021AE48
	Mem0[a1 + 0x00000008:word32] = a13
	v8 = Mem0[a14 + 0x00000000:byte]
	a14 = (uint32) v8
	a13 = a2
	branch a14 == 0x00000000 l4021B048
	// succ:  l4021B004 l4021B048
l4021B004:
	a12 = 0
	// succ:  l4021B006
l4021B006:
	a3 = a13
	a0 = 0x4021AE4C
	a4 = 6
	a0 = a0 + a12 * 0x00000004
	a0 = a0 + 0x00000100
	v12 = Mem0[a0 + 0x000000FF:byte]
	a15 = (uint32) v12
	v13 = Mem0[a0 + 0x000000FE:byte]
	a2 = (uint32) v13
	a15 = a15 << 24
	a15 = a15 | a2
	a15 = a15 << 24
	v14 = Mem0[a0 + 0x000000FD:byte]
	a2 = (uint32) v14
	v15 = Mem0[a0 + 0x000000FC:byte]
	a0 = (uint32) v15
	a15 = a15 | a2
	a15 = a15 << 24
	a15 = a15 | a0
	a2 = a15
	a0 = 0x40202AA8
	v16 = a0
	a0 = 0x4021B039
	call v16 (retsize: 0;)
	branch a2 != 0x00000000 l4021B040
	// succ:  l4021B03B l4021B040
l4021B03B:
	a2 = a15
	goto l4021B04A
	// succ:  l4021B04A
l4021B040:
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	branch a14 != a12 l4021B006
	// succ:  l4021B048 l4021B006
l4021B048:
	a2 = 0
	a2 = 0
	// succ:  l4021B04A
l4021B04A:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_cnx_rc_search_exit
sdk_cnx_rc_search_exit:


// fn4021B060
// Return size: 0
void fn4021B060()
fn4021B060_entry:
	// succ:  l4021B060
l4021B060:
	a1 = fp
	a6 = 0x4021B05C
	v5 = Mem0[a6 + 0x00000000:byte]
	a5 = (uint32) v5
	a6 = a6 - 1
	v6 = Mem0[a6 + 0x00000000:byte]
	a6 = (uint32) v6
	a7 = 0x4021AE4C
	branch a5 >=u a6 l4021B0AB
	// succ:  l4021B071 l4021B0AB
l4021B071:
	a9 = 0x4021B05C
	a3 = a7 + a5 * 0x00000004
	a3 = a3 + 0x00000100
	a5 = a5 + 1
	a5 = a5 & 0x000000FF
	v11 = Mem0[a3 + 0x000000FF:byte]
	a2 = (uint32) v11
	v13 = Mem0[a3 + 0x000000FE:byte]
	a4 = (uint32) v13
	a2 = a2 << 24
	a2 = a2 | a4
	a2 = a2 << 24
	v14 = Mem0[a3 + 0x000000FD:byte]
	a4 = (uint32) v14
	v15 = Mem0[a3 + 0x000000FC:byte]
	a3 = (uint32) v15
	Mem0[a9:byte] = a5
	a2 = a2 | a4
	a2 = a2 << 24
	a2 = a2 | a3
	a8 = Mem0[a2 + 0x00000078:word32]
	a8 = Mem0[a8 + 0x00000000:word32]
	branch (a8 & 0x00000200) == 0x00000000 l4021B0AD
	// succ:  l4021B0A8 l4021B0AD
l4021B0A8:
	branch a5 != a6 l4021B071
	// succ:  l4021B0AB l4021B071
l4021B0AB:
	a2 = 0
	// succ:  l4021B0AD
l4021B0AD:
	return
	// succ:  fn4021B060_exit
fn4021B060_exit:


// sdk_cnx_add_rc
// Return size: 0
void sdk_cnx_add_rc()
sdk_cnx_add_rc_entry:
	// succ:  l4021B0B4
l4021B0B4:
	a1 = fp
	a6 = 0x4021AE48
	v4 = Mem0[a6 + 0x00000000:byte]
	a6 = (uint32) v4
	a10 = 0x4021AE4C
	branch a6 <u 0x00000006 l4021B0C4
	// succ:  l4021B0C0 l4021B0C4
l4021B0C0:
	a2 = -1
	return
	// succ:  sdk_cnx_add_rc_exit
l4021B0C4:
	branch a6 <u 0x00000002 l4021B0CA
	// succ:  l4021B0C7 l4021B0CA
l4021B0C7:
	goto l4021B160
	// succ:  l4021B160
l4021B0CA:
	a7 = a2 >>u 8
	a8 = a10 + a6 * 0x00000004
	a8 = a8 + 0x00000100
	Mem0[a8 + 0x000000FD:byte] = a7
	Mem0[a8 + 0x000000FC:byte] = a2
	a7 = a7 >>u 8
	Mem0[a8 + 0x000000FE:byte] = a7
	a7 = a7 >>u 8
	Mem0[a8 + 0x000000FF:byte] = a7
	goto l4021B151
	// succ:  l4021B151
l4021B0E8:
	a5 = 0
	a8 = a10 + a5 * 0x00000004
	// succ:  l4021B0ED
l4021B0ED:
	a9 = a5 + 1
	branch a9 >= a6 l4021B139
	// succ:  l4021B0F2 l4021B139
l4021B0F2:
	a10 = 0x4021B0B0
	// succ:  l4021B0F5
l4021B0F5:
	a11 = a10 + a6 * 0x00000004
	a3 = a11 + 0x00000100
	a6 = a6 - 1
	a6 = a6 & 0x000000FF
	a11 = a11 + 0x00000200
	v19 = Mem0[a3 + 0x000000FF:byte]
	a7 = (uint32) v19
	v20 = Mem0[a3 + 0x000000FE:byte]
	a4 = (uint32) v20
	a7 = a7 << 24
	a7 = a7 | a4
	v21 = Mem0[a3 + 0x000000FD:byte]
	a4 = (uint32) v21
	a7 = a7 << 24
	a7 = a7 | a4
	v22 = Mem0[a3 + 0x000000FC:byte]
	a3 = (uint32) v22
	a7 = a7 << 24
	a7 = a7 | a3
	Mem0[a11:byte] = a7
	a7 = a7 >>u 8
	Mem0[a11 + 0x00000001:byte] = a7
	a7 = a7 >>u 8
	Mem0[a11 + 0x00000002:byte] = a7
	a7 = a7 >>u 8
	Mem0[a11 + 0x00000003:byte] = a7
	branch a9 < a6 l4021B0F5
	// succ:  l4021B139 l4021B0F5
l4021B139:
	a9 = a2 >>u 8
	a10 = a8 + 0x00000200
	Mem0[a10:byte] = a2
	Mem0[a10 + 0x00000001:byte] = a9
	a9 = a9 >>u 8
	Mem0[a10 + 0x00000002:byte] = a9
	a9 = a9 >>u 8
	Mem0[a10 + 0x00000003:byte] = a9
	// succ:  l4021B151
l4021B151:
	a11 = 0x4021AE48
	v18 = Mem0[a11 + 0x00000000:byte]
	a10 = (uint32) v18
	a2 = 0
	a10 = a10 + 1
	Mem0[a11:byte] = a10
	return
	// succ:  sdk_cnx_add_rc_exit
l4021B160:
	branch a6 == 0x00000000 l4021B0E8
	// succ:  l4021B163 l4021B0E8
l4021B163:
	a5 = 0
	a9 = Mem0[a2 + 0x00000078:word32]
	// succ:  l4021B168
l4021B168:
	a8 = a10 + a5 * 0x00000004
	a3 = a8 + 0x00000100
	v13 = Mem0[a3 + 0x000000FF:byte]
	a11 = (uint32) v13
	v15 = Mem0[a3 + 0x000000FE:byte]
	a4 = (uint32) v15
	a11 = a11 << 24
	a11 = a11 | a4
	a11 = a11 << 24
	v16 = Mem0[a3 + 0x000000FD:byte]
	a4 = (uint32) v16
	v17 = Mem0[a3 + 0x000000FC:byte]
	a3 = (uint32) v17
	a11 = a11 | a4
	a11 = a11 << 24
	a11 = a11 | a3
	a11 = Mem0[a11 + 0x00000078:word32]
	a11 = a11 - a9
	branch a11 == 0x00000000 l4021B0ED
	// succ:  l4021B195 l4021B0ED
l4021B195:
	a5 = a5 + 1
	a5 = a5 & 0x000000FF
	branch a5 != a6 l4021B168
	// succ:  l4021B19D l4021B168
l4021B19D:
	// succ:  l4025B0EA
l4025B0EA:
sdk_cnx_add_rc_exit:


// sdk_cnx_remove_rc
// Return size: 0
void sdk_cnx_remove_rc()
sdk_cnx_remove_rc_entry:
	// succ:  l4021B1A0
l4021B1A0:
	a1 = fp
	a5 = 0x4021AE48
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	v8 = Mem0[a5 + 0x00000000:byte]
	a5 = (uint32) v8
	a13 = 0x4021AE4C
	branch a5 == 0x00000000 l4021B218
	// succ:  l4021B1B7 l4021B218
l4021B1B7:
	a12 = 0
	// succ:  l4021B1B9
l4021B1B9:
	a14 = a13 + a12 * 0x00000004
	a7 = a14 + 0x00000100
	v11 = Mem0[a7 + 0x000000FF:byte]
	a6 = (uint32) v11
	v13 = Mem0[a7 + 0x000000FE:byte]
	a8 = (uint32) v13
	a6 = a6 << 24
	a6 = a6 | a8
	a6 = a6 << 24
	v14 = Mem0[a7 + 0x000000FD:byte]
	a8 = (uint32) v14
	v15 = Mem0[a7 + 0x000000FC:byte]
	a7 = (uint32) v15
	a6 = a6 | a8
	a6 = a6 << 24
	a6 = a6 | a7
	branch a6 != a2 l4021B20D
	// succ:  l4021B1E0 l4021B20D
l4021B1E0:
	a3 = 0x00000110
	a0 = 0x40213724
	v18 = a0
	a0 = 0x4021B1E9
	call v18 (retsize: 0;)
	a7 = 0x4021AE48
	a6 = 0
	a8 = a14 + 0x00000100
	a9 = 0
	Mem0[a8 + 0x000000FE:byte] = a9
	Mem0[a8 + 0x000000FD:byte] = a9
	Mem0[a8 + 0x000000FC:byte] = a9
	Mem0[a8 + 0x000000FF:byte] = a6
	v20 = Mem0[a7 + 0x00000000:byte]
	a5 = (uint32) v20
	a5 = a5 - 1
	a5 = a5 & 0x000000FF
	Mem0[a7:byte] = a5
	goto l4021B21A
	// succ:  l4021B21A
l4021B20D:
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	branch a5 != a12 l4021B1B9
	// succ:  l4021B215 l4021B1B9
l4021B215:
	goto l4021B21A
	// succ:  l4021B21A
l4021B218:
	a12 = 0
	// succ:  l4021B21A
l4021B21A:
	branch a12 >=u a5 l4021B267
	// succ:  l4021B21D l4021B267
l4021B21D:
	a5 = 0x4021AE48
	// succ:  l4021B220
l4021B220:
	a0 = a13 + a12 * 0x00000004
	a2 = a0 + 0x00000200
	a12 = a12 + 1
	a0 = a0 + 0x00000100
	v21 = Mem0[a2 + 0x00000003:byte]
	a14 = (uint32) v21
	v22 = Mem0[a2 + 0x00000002:byte]
	a3 = (uint32) v22
	a14 = a14 << 24
	a14 = a14 | a3
	v23 = Mem0[a2 + 0x00000001:byte]
	a3 = (uint32) v23
	a14 = a14 << 24
	v24 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v24
	a14 = a14 | a3
	a14 = a14 << 24
	a14 = a14 | a2
	Mem0[a0 + 0x000000FC:byte] = a14
	a14 = a14 >>u 8
	Mem0[a0 + 0x000000FD:byte] = a14
	a14 = a14 >>u 8
	Mem0[a0 + 0x000000FE:byte] = a14
	a14 = a14 >>u 8
	Mem0[a0 + 0x000000FF:byte] = a14
	v25 = Mem0[a5 + 0x00000000:byte]
	a14 = (uint32) v25
	a12 = a12 & 0x000000FF
	branch a12 <u a14 l4021B220
	// succ:  l4021B267 l4021B220
l4021B267:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_cnx_remove_rc_exit
sdk_cnx_remove_rc_exit:


// sdk_cnx_rc_update_rssi
// Return size: 0
void sdk_cnx_rc_update_rssi()
sdk_cnx_rc_update_rssi_entry:
	// succ:  l4021B274
l4021B274:
	a1 = fp
	a1 = a1 - 16
	Mem0[a2 + 0x00000072:byte] = a3
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	v7 = Mem0[a2 + 0x00000070:byte]
	a0 = (uint32) v7
	branch a4 != 0x00000000 l4021B28A
	// succ:  l4021B285 l4021B28A
l4021B285:
	a2 = a3
	goto l4021B2A6
	// succ:  l4021B2A6
l4021B28A:
	a5 = a0 << 8
	a6 = a3 + a3 * 0x00000002
	a4 = a6 + 15
	a5 = a5 >> 24
	a2 = a5 + a5 * 0x00000002
	branch a6 < 0x00000000 l4021B29B
	// succ:  l4021B298_1 l4021B29B
l4021B298_1:
	a4 = a6
	// succ:  l4021B29B
l4021B29B:
	a4 = a4 >> 4
	a2 = a5 + a2 * 0x00000004
	a2 = a2 + a4
	branch a0 != 0x00000000 l4021B2A6
	// succ:  l4021B2A3_2 l4021B2A6
l4021B2A3_2:
	a2 = a3
	// succ:  l4021B2A6
l4021B2A6:
	branch a0 == 0x00000000 l4021B2D1
	// succ:  l4021B2A8 l4021B2D1
l4021B2A8:
	a7 = a2 - a0
	v13 = Mem0[a12 + 0x00000071:byte]
	a9 = (uint32) v13
	a11 = a0 << 8
	a11 = a11 >> 24
	a8 = a9 + a9 * 0x00000004
	a11 = a2 - a11
	a11 = a11 + a11 * 0x00000002
	a11 = a11 << 31
	a10 = a11 + 15
	branch a11 < 0x00000000 l4021B2C5
	// succ:  l4021B2C2_3 l4021B2C5
l4021B2C2_3:
	a10 = a11
	// succ:  l4021B2C5
l4021B2C5:
	a10 = a10 >> 4
	a8 = a10 + a8 * 0x00000002
	branch a9 == 0x00000000 l4021B2CE
	// succ:  l4021B2CB_4 l4021B2CE
l4021B2CB_4:
	a7 = a8
	// succ:  l4021B2CE
l4021B2CE:
	Mem0[a12 + 0x00000071:byte] = a7
	// succ:  l4021B2D1
l4021B2D1:
	Mem0[a12 + 0x00000070:byte] = a2
	a0 = a2 & 0x000000FF
	branch a0 != 0x00000000 l4021B2E0
	// succ:  l4021B2D9 l4021B2E0
l4021B2D9:
	a2 = a12
	a3 = 4
	a0 = 0x4021B2E0
	call fn4021B6C4 (retsize: 0;)
	// succ:  l4021B2E0
l4021B2E0:
	v17 = Mem0[a12 + 0x00000071:byte]
	a2 = (uint32) v17
	branch (a2 & 0x00000080) == 0x00000000 l4021B2ED
	// succ:  l4021B2E6 l4021B2ED
l4021B2E6:
	a2 = a12
	a3 = 8
	a0 = 0x4021B2ED
	call fn4021B6C4 (retsize: 0;)
	// succ:  l4021B2ED
l4021B2ED:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_cnx_rc_update_rssi_exit
sdk_cnx_rc_update_rssi_exit:


// sdk_cnx_rc_update_state_metric
// Return size: 0
void sdk_cnx_rc_update_state_metric()
sdk_cnx_rc_update_state_metric_entry:
	// succ:  l4021B2F8
l4021B2F8:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a4 != 1 l4021B311
	// succ:  l4021B300 l4021B311
l4021B300:
	v5 = Mem0[a2 + 0x00000073:byte]
	a4 = (uint32) v5
	a4 = a3 + a4
	a0 = a4 << 8
	Mem0[a2 + 0x00000073:byte] = a4
	a0 = a0 >> 24
	goto l4021B324
	// succ:  l4021B324
l4021B311:
	branch a4 != 0x00000000 l4021B31B
	// succ:  l4021B313 l4021B31B
l4021B313:
	a0 = a3 << 8
	a4 = a3
	goto l4025B308
	// succ:  l4025B308
l4021B31B:
	v9 = Mem0[a2 + 0x00000073:byte]
	a0 = (uint32) v9
	a0 = a0 << 8
	a0 = a0 >> 24
	// succ:  l4021B324
l4021B324:
	a5 = 0x4021AC04
	a4 = 15
	branch a0 >= 0x00000000 l4021B333
	// succ:  l4021B32C l4021B333
l4021B32C:
	a0 = 0
	a3 = 0
	Mem0[a2 + 0x00000073:byte] = a3
	// succ:  l4021B333
l4021B333:
	a5 = Mem0[a5 + 0x00000000:word32]
	a3 = 10
	a5 = a5 - a2
	branch a5 != 0x00000000 l4021B33D
	// succ:  l4021B33A_1 l4021B33D
l4021B33A_1:
	a3 = a4
	// succ:  l4021B33D
l4021B33D:
	branch a3 >= a0 l4021B345
	// succ:  l4021B340 l4021B345
l4021B340:
	a0 = a3
	Mem0[a2 + 0x00000073:byte] = a3
	// succ:  l4021B345
l4021B345:
	a6 = a0 & 0x000000FF
	branch a6 != 0x00000000 l4021B35D
	// succ:  l4021B34A l4021B35D
l4021B34A:
	a7 = 0x4021AC04
	a7 = Mem0[a7 + 0x00000000:word32]
	branch a7 != a2 l4021B35A
	// succ:  l4021B352 l4021B35A
l4021B352:
	a3 = 2
	a0 = 0x4021B357
	call fn4021B6C4 (retsize: 0;)
	goto l4021B35D
	// succ:  l4021B35D
l4021B35A:
	a0 = 0x4021B35D
	call fn4031B1A0 (retsize: 0;)
	// succ:  l4021B35D
l4021B35D:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_cnx_rc_update_state_metric_exit
l4025B308:
sdk_cnx_rc_update_state_metric_exit:


// sdk_cnx_rc_update_age
// Return size: 0
void sdk_cnx_rc_update_age()
sdk_cnx_rc_update_age_entry:
	// succ:  l4021B364
l4021B364:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a4 == 0x00000000 l4021B373
	// succ:  l4021B36B l4021B373
l4021B36B:
	v5 = Mem0[a2 + 0x00000075:byte]
	a0 = (uint32) v5
	branch a4 != 1 l4021B379
	// succ:  l4021B371 l4021B379
l4021B371:
	a3 = a3 + a0
	// succ:  l4021B373
l4021B373:
	a0 = a3 & 0x000000FF
	Mem0[a2 + 0x00000075:byte] = a0
	// succ:  l4021B379
l4021B379:
	branch a0 != 0x00000000 l4021B380
	// succ:  l4021B37B l4021B380
l4021B37B:
	a3 = 1
	a0 = 0x4021B380
	call fn4021B6C4 (retsize: 0;)
	// succ:  l4021B380
l4021B380:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_cnx_rc_update_age_exit
sdk_cnx_rc_update_age_exit:


// sdk_cnx_update_bss
// Return size: 0
void sdk_cnx_update_bss()
sdk_cnx_update_bss_entry:
	// succ:  l4021B388
l4021B388:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a12
	a3 = a4 + 16
	a12 = a2
	a4 = 6
	a0 = 0x40203130
	v8 = a0
	a0 = 0x4021B3A1
	call v8 (retsize: 0;)
	a2 = a12 + 71
	a4 = Mem0[a1 + 0x00000000:word32]
	a5 = 15
	a3 = Mem0[a4 + 0x00000024:word32]
	a4 = Mem0[a4 + 0x00000028:word32]
	a0 = 0x4021B3AF
	call fn40316FDC (retsize: 0;)
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_cnx_update_bss_exit
sdk_cnx_update_bss_exit:


// sdk_cnx_update_bss_more
// Return size: 0
void sdk_cnx_update_bss_more()
sdk_cnx_update_bss_more_entry:
	// succ:  l4021B3C0
l4021B3C0:
	a1 = fp
	a5 = 0x4021AC04
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000008:word32] = a13
	a14 = 0
	a13 = a3
	v10 = Mem0[a3 + 0x00000006:uint16]
	a0 = (uint32) v10
	a12 = a2
	a5 = Mem0[a5 + 0x00000000:word32]
	v12 = Mem0[a2 + 0x0000001C:uint16]
	a2 = (uint32) v12
	a5 = a5 - a12
	a3 = 1
	branch a5 != 0x00000000 l4021B3E6
	// succ:  l4021B3E3_1 l4021B3E6
l4021B3E3_1:
	a14 = a3
	// succ:  l4021B3E6
l4021B3E6:
	branch a2 == a0 l4021B3EC
	// succ:  l4021B3E9 l4021B3EC
l4021B3E9:
	Mem0[a12 + 0x0000001C:word16] = a0
	// succ:  l4021B3EC
l4021B3EC:
	branch a4 != 0x00000000 l4021B408
	// succ:  l4021B3EF l4021B408
l4021B3EF:
	a3 = Mem0[a13 + 0x00000014:word32]
	branch a3 == 0x00000000 l4021B408
	// succ:  l4021B3F3 l4021B408
l4021B3F3:
	branch a14 == 0x00000000 l4021B3FC
	// succ:  l4021B3F5 l4021B3FC
l4021B3F5:
	a2 = a12
	a0 = 0x4021B3FA
	call fn4021B548 (retsize: 0;)
	a3 = Mem0[a13 + 0x00000014:word32]
	// succ:  l4021B3FC
l4021B3FC:
	v22 = Mem0[a3 + 0x00000002:byte]
	a7 = (uint32) v22
	Mem0[a12 + 0x00000025:byte] = a7
	v24 = Mem0[a3 + 0x00000003:byte]
	a6 = (uint32) v24
	Mem0[a12 + 0x00000024:byte] = a6
	// succ:  l4021B408
l4021B408:
	a2 = a12 + 16
	a4 = 8
	a3 = Mem0[a13 + 0x00000018:word32]
	v15 = Mem0[a13 + 0x00000004:uint16]
	a8 = (uint32) v15
	Mem0[a12 + 0x00000022:word16] = a8
	a0 = 0x40203130
	v16 = a0
	a0 = 0x4021B41B
	call v16 (retsize: 0;)
	a2 = 0x00000400
	v17 = Mem0[a13 + 0x00000002:uint16]
	a0 = (uint32) v17
	v19 = Mem0[a12 + 0x0000001E:uint16]
	a9 = (uint32) v19
	a15 = 0x402035F0
	a9 = a9 ^ a0
	branch (a9 & 0x00000400) == 0x00000000 l4021B43A
	// succ:  l4021B42D l4021B43A
l4021B42D:
	branch a14 == 0x00000000 l4021B43A
	// succ:  l4021B42F l4021B43A
l4021B42F:
	a3 = a0 & a2
	a2 = a15
	a0 = 0x4021B437
	call fn40318A80 (retsize: 0;)
	v20 = Mem0[a13 + 0x00000002:uint16]
	a0 = (uint32) v20
	// succ:  l4021B43A
l4021B43A:
	a3 = Mem0[a13 + 0x00000038:word32]
	Mem0[a12 + 0x0000001E:word16] = a0
	branch a3 == 0x00000000 l4021B456
	// succ:  l4021B441 l4021B456
l4021B441:
	a2 = a12
	a0 = 0x4021B446
	call fn40319E4C (retsize: 0;)
	branch a2 < 1 l4021B466
	// succ:  l4021B449 l4021B466
l4021B449:
	branch a14 == 0x00000000 l4021B466
	// succ:  l4021B44B l4021B466
l4021B44B:
	a2 = a12
	a3 = a12 + 87
	a0 = 0x4021B453
	call fn40318B5C (retsize: 0;)
	goto l4021B466
	// succ:  l4021B466
l4021B456:
	v26 = Mem0[a12 + 0x00000057:byte]
	a10 = (uint32) v26
	branch a10 == 0x00000000 l4021B466
	// succ:  l4021B45B l4021B466
l4021B45B:
	a2 = a12 + 87
	a3 = 25
	a0 = 0x40213724
	v27 = a0
	a0 = 0x4021B466
	call v27 (retsize: 0;)
	// succ:  l4021B466
l4021B466:
	a3 = Mem0[a13 + 0x00000034:word32]
	a15 = 0x4021B3B8
	branch a3 == 0x00000000 l4021B479
	// succ:  l4021B46D l4021B479
l4021B46D:
	v28 = Mem0[a15 + 0x00000080:byte]
	a0 = (uint32) v28
	branch a0 == 4 l4021B497
	// succ:  l4021B473 l4021B497
l4021B473:
	branch a0 == 5 l4021B497
	// succ:  l4021B476 l4021B497
l4021B476:
	branch a0 == 7 l4021B497
	// succ:  l4021B479 l4021B497
l4021B479:
	a3 = Mem0[a13 + 0x00000030:word32]
	v29 = Mem0[a15 + 0x00000080:byte]
	a0 = (uint32) v29
	branch a3 == 0x00000000 l4021B492
	// succ:  l4021B480 l4021B492
l4021B480:
	a11 = a0 - 2
	branch a11 == 0x00000000 l4021B52F
	// succ:  l4021B486 l4021B52F
l4021B486:
	a14 = a0 - 3
	branch a14 == 0x00000000 l4021B52F
	// succ:  l4021B48C l4021B52F
l4021B48C:
	a2 = a0 - 6
	branch a2 == 0x00000000 l4021B52F
	// succ:  l4021B492 l4021B52F
l4021B492:
	a14 = 0
	goto l4021B4AA
	// succ:  l4021B4AA
l4021B497:
	v39 = Mem0[a3 + 0x00000001:byte]
	a14 = (uint32) v39
	a2 = a12 + 39
	a14 = a14 + 2
	a14 = a14 & 0x000000FF
	a4 = a14
	a0 = 0x40203130
	v40 = a0
	a0 = 0x4021B4AA
	call v40 (retsize: 0;)
	// succ:  l4021B4AA
l4021B4AA:
	Mem0[a12 + 0x00000026:byte] = a14
	a3 = Mem0[a13 + 0x0000003C:word32]
	a4 = Mem0[a13 + 0x00000040:word32]
	branch a3 == 0x00000000 l4021B4E8
	// succ:  l4021B4B4 l4021B4E8
l4021B4B4:
	branch a4 == 0x00000000 l4021B4E8
	// succ:  l4021B4B6 l4021B4E8
l4021B4B6:
	a2 = a15 + 0x00000300
	v31 = Mem0[a2 + 0x00000086:byte]
	a0 = (uint32) v31
	v32 = Mem0[a2 + 0x00000085:byte]
	a5 = (uint32) v32
	a0 = a0 << 24
	a0 = a0 | a5
	a0 = a0 << 24
	v33 = Mem0[a2 + 0x00000084:byte]
	a5 = (uint32) v33
	v34 = Mem0[a2 + 0x00000083:byte]
	a2 = (uint32) v34
	a0 = a0 | a5
	a0 = a0 << 24
	a0 = a0 | a2
	branch (a0 & 0x00080000) == 0x00000000 l4021B4E8
	// succ:  l4021B4DA l4021B4E8
l4021B4DA:
	a2 = 0x402035F0
	a2 = Mem0[a2 + 0x00000010:word32]
	a5 = Mem0[a12 + 0x00000078:word32]
	Mem0[a2 + 0x000000BC:word32] = a5
	a0 = 0x4021B4E8
	call fn40315E2C (retsize: 0;)
	// succ:  l4021B4E8
l4021B4E8:
	a3 = 0x40218BB0
	a4 = 0x4021B3BC
	v37 = Mem0[a3 + 0x0000005D:byte]
	a3 = (uint32) v37
	v38 = Mem0[a4 + 0x00000000:byte]
	a4 = (uint32) v38
	branch (a3 & 0x00000001) != 0x00000000 l4021B520
	// succ:  l4021B4F7 l4021B520
l4021B4F7:
	a5 = a4 >>u 0x00000004 & 0x0000000F
	a4 = a4 & 0x0000000F
	branch a4 == a5 l4021B520
	// succ:  l4021B500 l4021B520
l4021B500:
	a12 = 0x402035F0
	a12 = Mem0[a12 + 0x00000010:word32]
	a12 = a12 + 4
	a2 = a12
	a0 = 0x4021B50C
	call fn40304430 (retsize: 0;)
	a2 = a12
	a3 = 0x40218EE0
	a4 = 0
	a0 = 0x4021B516
	call fn403042E8 (retsize: 0;)
	a2 = a12
	a3 = 0x000003E8
	a4 = 0
	a0 = 0x4021B520
	call fn4030438C (retsize: 0;)
	// succ:  l4021B520
l4021B520:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_cnx_update_bss_more_exit
l4021B52F:
	v35 = Mem0[a3 + 0x00000001:byte]
	a14 = (uint32) v35
	a2 = a12 + 39
	a14 = a14 + 2
	a14 = a14 & 0x000000FF
	a4 = a14
	a0 = 0x40203130
	v36 = a0
	a0 = 0x4021B542
	call v36 (retsize: 0;)
	// succ:  l4025B4AA
l4025B4AA:
sdk_cnx_update_bss_more_exit:


// fn4021B548
// Return size: 0
void fn4021B548()
fn4021B548_entry:
	// succ:  l4021B548
l4021B548:
	a1 = fp
	return
	// succ:  fn4021B548_exit
fn4021B548_exit:


// sdk_cnx_sta_leave
// Return size: 0
void sdk_cnx_sta_leave()
sdk_cnx_sta_leave_entry:
	// succ:  l4021B54C
l4021B54C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a13
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x0000001C:word32] = a14
	a12 = a3
	a14 = a2
	a13 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x4021B563
	call fn40318808 (retsize: 0;)
	a3 = 0
	a4 = a12
	a5 = 0
	v12 = Mem0[a12 + 0x0000001A:uint16]
	a6 = (uint32) v12
	a7 = 0
	Mem0[a1:word32] = a7
	Mem0[a1 + 0x00000004:word32] = a7
	a6 = a6 & 0x00000FFF
	a7 = a2
	a2 = 0
	a0 = 0x4021B57C
	call sdk_ic_set_sta (retsize: 0;)
	a2 = a13
	a0 = 0x4021B581
	call fn4030C5E4 (retsize: 0;)
	v15 = Mem0[a13 + 0x0000002F:byte]
	a8 = (uint32) v15
	branch (a8 & 0x00000008) == 0x00000000 l4021B591
	// succ:  l4021B587 l4021B591
l4021B587:
	a2 = a13
	a0 = 0x4021B58C
	call fn4030AEDC (retsize: 0;)
	a2 = a13
	a0 = 0x4021B591
	call fn4030B0BC (retsize: 0;)
	// succ:  l4021B591
l4021B591:
	a13 = 0x402035F0
	v16 = Mem0[a12 + 0x000000E8:byte]
	a2 = (uint32) v16
	a2 = a13 + a2 * 0x00000004
	a2 = Mem0[a2 + 0x00000190:word32]
	a0 = 0x402034CC
	v17 = a0
	a0 = 0x4021B5A3
	call v17 (retsize: 0;)
	v18 = Mem0[a12 + 0x000000E8:byte]
	a3 = (uint32) v18
	a0 = 0x00000000
	a3 = a13 + a3 * 0x00000004
	Mem0[a3 + 0x00000190:word32] = a0
	a2 = Mem0[a13 + 0x00000190:word32]
	branch a2 == 0x00000000 l4021B5C0
	// succ:  l4021B5B5 l4021B5C0
l4021B5B5:
	a0 = 0x402034CC
	v19 = a0
	a0 = 0x4021B5BB
	call v19 (retsize: 0;)
	a0 = 0
	Mem0[a13 + 0x00000190:word32] = a0
	// succ:  l4021B5C0
l4021B5C0:
	a2 = Mem0[a13 + 0x00000194:word32]
	branch a2 == 0x00000000 l4021B5D0
	// succ:  l4021B5C5 l4021B5D0
l4021B5C5:
	a0 = 0x402034CC
	v20 = a0
	a0 = 0x4021B5CB
	call v20 (retsize: 0;)
	a4 = 0
	Mem0[a13 + 0x00000194:word32] = a4
	// succ:  l4021B5D0
l4021B5D0:
	a0 = 0x4021B5D3
	call fn40318EB0 (retsize: 0;)
	a2 = 0
	a3 = 0
	a4 = 0
	a0 = 0x4021B5DC
	call sdk_wDev_SetRxPolicy (retsize: 0;)
	a6 = 0x4021A724
	a5 = 2
	Mem0[a6:word32] = a5
	v21 = Mem0[a12 + 0x00000006:byte]
	a0 = (uint32) v21
	branch (a0 & 0x00000002) == 0x00000000 l4021B600
	// succ:  l4021B5E9 l4021B600
l4021B5E9:
	a2 = a12
	a3 = -7
	a4 = 1
	a7 = 0x000000FD
	a7 = a0 & a7
	Mem0[a12 + 0x00000006:byte] = a7
	a0 = 0x4021B5FB
	call fn4031B2F8 (retsize: 0;)
	a8 = 0x4021AD04
	Mem0[a8:word32] = a12
	// succ:  l4021B600
l4021B600:
	a13 = 0
	a2 = a12
	a0 = 0x4021B607
	call fn4031B1A0 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000010:word32]
	a11 = 0x4021AC04
	a9 = Mem0[a12 + 0x00000008:word32]
	a10 = -2
	a9 = a9 & a10
	Mem0[a11:word32] = a13
	Mem0[a12 + 0x00000008:word32] = a9
	Mem0[a14 + 0x00000088:word32] = a13
	a12 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x00000018:word32]
	a14 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_cnx_sta_leave_exit
sdk_cnx_sta_leave_exit:


// sdk_cnx_sta_associated
// Return size: 0
void sdk_cnx_sta_associated()
sdk_cnx_sta_associated_entry:
	// succ:  l4021B66C
l4021B66C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a3
	Mem0[a1 + 0x0000001C:word32] = a12
	Mem0[a1 + 0x00000018:word32] = a0
	a12 = a2
	a0 = 0x4021B67C
	call fn40318808 (retsize: 0;)
	a3 = 1
	a5 = 0
	a4 = Mem0[a1 + 0x00000010:word32]
	a7 = 0
	v11 = Mem0[a4 + 0x0000001A:uint16]
	a6 = (uint32) v11
	Mem0[a1:word32] = a7
	Mem0[a1 + 0x00000004:word32] = a7
	a6 = a6 & 0x00000FFF
	a7 = a2
	a2 = 0
	a0 = 0x4021B695
	call sdk_ic_set_sta (retsize: 0;)
	a2 = a12 + 32
	Mem0[a1 + 0x00000014:word32] = a2
	a0 = 0x4021B69D
	call fn40304430 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = 0x4021B668
	a4 = 0
	a0 = 0x4021B6A7
	call fn403042E8 (retsize: 0;)
	a12 = a12 + 4
	a2 = a12
	a0 = 0x4021B6AE
	call fn40304430 (retsize: 0;)
	a2 = a12
	a3 = 0x402154A8
	a4 = 0
	a0 = 0x4021B6B8
	call fn4030438C (retsize: 0;)
	a12 = Mem0[a1 + 0x0000001C:word32]
	a0 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_cnx_sta_associated_exit
sdk_cnx_sta_associated_exit:


// fn4021B6C4
// Return size: 0
void fn4021B6C4()
fn4021B6C4_entry:
	// succ:  l4021B6C4
l4021B6C4:
	a1 = fp
	return
	// succ:  fn4021B6C4_exit
fn4021B6C4_exit:


// sdk_cnx_node_alloc
// Return size: 0
void sdk_cnx_node_alloc()
sdk_cnx_node_alloc_entry:
	// succ:  l4021B6C8
l4021B6C8:
	a1 = fp
	a6 = 0x402137EC
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000008:word32] = a12
	v6 = Mem0[a6 + 0x00000090:byte]
	a6 = (uint32) v6
	Mem0[a1 + 0x00000004:word32] = a0
	a6 = a6 + 2
	branch a6 < 2 l4021B718
	// succ:  l4021B6DC l4021B718
l4021B6DC:
	a0 = 0x402035F0
	a12 = 1
	a0 = Mem0[a0 + 0x00000014:word32]
	Mem0[a1:word32] = a2
	// succ:  l4021B6E5
l4021B6E5:
	a13 = a0 + a12 * 0x00000004
	a2 = Mem0[a13 + 0x00000090:word32]
	branch a2 != 0x00000000 l4021B710
	// succ:  l4021B6ED l4021B710
l4021B6ED:
	a2 = 0x00000110
	a0 = 0x402142E8
	v9 = a0
	a0 = 0x4021B6F6
	call v9 (retsize: 0;)
	a4 = 6
	a3 = a12 + 7
	Mem0[a13 + 0x00000090:word32] = a2
	a12 = a2
	Mem0[a2 + 0x000000E8:byte] = a3
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = Mem0[a13 + 0x00000090:word32]
	a0 = 0x40203130
	v12 = a0
	a0 = 0x4021B70D
	call v12 (retsize: 0;)
	goto l4021B71A
	// succ:  l4021B71A
l4021B710:
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	branch a6 != a12 l4021B6E5
	// succ:  l4021B718 l4021B6E5
l4021B718:
	a12 = 0
	a12 = 0
	// succ:  l4021B71A
l4021B71A:
	a0 = Mem0[a1 + 0x00000004:word32]
	a2 = a12
	a13 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_cnx_node_alloc_exit
sdk_cnx_node_alloc_exit:


// sdk_cnx_node_remove
// Return size: 0
void sdk_cnx_node_remove()
sdk_cnx_node_remove_entry:
	// succ:  l4021B728
l4021B728:
	a1 = fp
	a6 = 0x402137EC
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	v7 = Mem0[a6 + 0x00000090:byte]
	a6 = (uint32) v7
	a12 = a2
	a6 = a6 + 2
	branch a6 < 2 l4021B786
	// succ:  l4021B73E l4021B786
l4021B73E:
	a0 = 0x402035F0
	a5 = Mem0[a0 + 0x00000014:word32]
	a2 = 1
	// succ:  l4021B745
l4021B745:
	a13 = a5 + a2 * 0x00000004
	a7 = Mem0[a13 + 0x00000090:word32]
	a2 = a2 + 1
	branch a7 != a12 l4021B791
	// succ:  l4021B751 l4021B791
l4021B751:
	a2 = Mem0[a12 + 0x000000E4:word32]
	a0 = 0x4021B757
	call sdk_wpa_auth_sta_deinit (retsize: 0;)
	a3 = 0x402035F0
	v12 = Mem0[a12 + 0x000000E8:byte]
	a2 = (uint32) v12
	a2 = a3 + a2 * 0x00000004
	a2 = Mem0[a2 + 0x00000190:word32]
	a0 = 0x402034CC
	v13 = a0
	a0 = 0x4021B769
	call v13 (retsize: 0;)
	a2 = a12 | a12
	a6 = 0x402035F0
	v14 = Mem0[a12 + 0x000000E8:byte]
	a5 = (uint32) v14
	a4 = 0x00000000
	a5 = a6 + a5 * 0x00000004
	Mem0[a5 + 0x00000190:word32] = a4
	a0 = 0x402034CC
	v16 = a0
	a0 = 0x4021B781
	call v16 (retsize: 0;)
	a7 = 0
	Mem0[a13 + 0x00000090:word32] = a7
	// succ:  l4021B786
l4021B786:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_cnx_node_remove_exit
l4021B791:
	a2 = a2 & 0x000000FF
	branch a6 != a2 l4021B745
	// succ:  l4021B797 l4021B745
l4021B797:
	// succ:  l4025B786
l4025B786:
sdk_cnx_node_remove_exit:


// sdk_cnx_node_search
// Return size: 0
void sdk_cnx_node_search()
sdk_cnx_node_search_entry:
	// succ:  l4021B79C
l4021B79C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000014:word32] = a15
	a15 = 0x402137EC
	Mem0[a1 + 0x00000008:word32] = a12
	v7 = Mem0[a15 + 0x00000090:byte]
	a15 = (uint32) v7
	Mem0[a1 + 0x00000010:word32] = a14
	a15 = a15 + 2
	branch a15 < 1 l4021B7DB
	// succ:  l4021B7B4 l4021B7DB
l4021B7B4:
	a14 = 0x402035F0
	a12 = 0
	a14 = Mem0[a14 + 0x00000014:word32]
	Mem0[a1:word32] = a2
	// succ:  l4021B7BD
l4021B7BD:
	a13 = a14 + a12 * 0x00000004
	a13 = Mem0[a13 + 0x00000090:word32]
	branch a13 == 0x00000000 l4021B7D3
	// succ:  l4021B7C5 l4021B7D3
l4021B7C5:
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = a13
	a4 = 6
	a0 = 0x40202AA8
	v12 = a0
	a0 = 0x4021B7D1
	call v12 (retsize: 0;)
	branch a2 == 0x00000000 l4021B7DD
	// succ:  l4021B7D3 l4021B7DD
l4021B7D3:
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	branch a15 != a12 l4021B7BD
	// succ:  l4021B7DB l4021B7BD
l4021B7DB:
	a13 = 0
	// succ:  l4021B7DD
l4021B7DD:
	a0 = Mem0[a1 + 0x00000004:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a2 = a13
	a15 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_cnx_node_search_exit
sdk_cnx_node_search_exit:


// sdk_cnx_node_leave
// Return size: 0
void sdk_cnx_node_leave()
sdk_cnx_node_leave_entry:
	// succ:  l4021B7FC
l4021B7FC:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a2
	a12 = a3
	a2 = 0x000000EC
	a2 = a3 + a2
	a0 = 0x4021B812
	call fn40304430 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000010:word32]
	a3 = Mem0[a3 + 0x00000090:word32]
	a5 = 0x40215990
	a3 = a3 - a12
	branch a3 == 0x00000000 l4021B8A6
	// succ:  l4021B820 l4021B8A6
l4021B820:
	v9 = Mem0[a12 + 0x0000001A:uint16]
	a4 = (uint32) v9
	a0 = a4 & a5
	branch (a4 & a5) == 0x00000000 l4021B850
	// succ:  l4021B829 l4021B850
l4021B829:
	a2 = 0x4021B7F4
	a8 = 0x4021B7F0
	v12 = Mem0[a12 + 0x00000004:byte]
	a7 = (uint32) v12
	v14 = Mem0[a12 + 0x00000003:byte]
	a6 = (uint32) v14
	v15 = Mem0[a12 + 0x00000002:byte]
	a5 = (uint32) v15
	v16 = Mem0[a12 + 0x00000001:byte]
	a4 = (uint32) v16
	v17 = Mem0[a12 + 0x00000000:byte]
	a3 = (uint32) v17
	v19 = Mem0[a12 + 0x00000005:byte]
	a9 = (uint32) v19
	Mem0[a1:word32] = a9
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a8
	a0 = 0x402034D0
	v20 = a0
	a0 = 0x4021B84D
	call v20 (retsize: 0;)
	goto l4021B859
	// succ:  l4021B859
l4021B850:
	a2 = 0x4021B7F8
	a0 = 0x402034D0
	v28 = a0
	a0 = 0x4021B859
	call v28 (retsize: 0;)
	// succ:  l4021B859
l4021B859:
	v22 = Mem0[a12 + 0x0000001A:uint16]
	a10 = (uint32) v22
	branch a10 == 0x00000000 l4021B8A1
	// succ:  l4021B85F l4021B8A1
l4021B85F:
	a0 = 0x4021B862
	call fn40318808 (retsize: 0;)
	a3 = 0x00000000
	a4 = a12 | a12
	v23 = Mem0[a12 + 0x0000001A:uint16]
	a6 = (uint32) v23
	a7 = 0
	Mem0[a1:word32] = a7
	Mem0[a1 + 0x00000004:word32] = a7
	a6 = a6 & 0x00000FFF
	a5 = a6
	a7 = a2
	a2 = 1
	a0 = 0x4021B87D
	call sdk_ic_set_sta (retsize: 0;)
	a8 = 0
	a0 = -1
	a11 = 1
	a10 = 0x402035F0
	v25 = Mem0[a12 + 0x0000001A:uint16]
	a2 = (uint32) v25
	v26 = Mem0[a10 + 0x000001D0:uint16]
	a9 = (uint32) v26
	a2 = a2 & 0x0000001F
	SAR = 0x00000020 - a2
	a11 = a11 << SAR
	a11 = a11 ^ a0
	a9 = a9 & a11
	Mem0[a10 + 0x000001D0:word16] = a9
	Mem0[a12 + 0x0000001A:word16] = a8
	// succ:  l4021B8A1
l4021B8A1:
	a2 = a12
	a0 = 0x4021B8A6
	call fn4031B728 (retsize: 0;)
	// succ:  l4021B8A6
l4021B8A6:
	a12 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_cnx_node_leave_exit
sdk_cnx_node_leave_exit:


// sdk_cnx_node_join
// Return size: 0
void sdk_cnx_node_join()
sdk_cnx_node_join_entry:
	// succ:  l4021B8B8
l4021B8B8:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000014:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x0000001C:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	a13 = a3
	a14 = a2
	a12 = a4
	a2 = a3
	a4 = 6
	a3 = 0x40215168
	a0 = 0x40202AA8
	v10 = a0
	a0 = 0x4021B8D9
	call v10 (retsize: 0;)
	branch a2 != 0x00000000 l4021B8F7
	// succ:  l4021B8DB l4021B8F7
l4021B8DB:
	a3 = a12
	a2 = a14
	a4 = 17
	a0 = 0x4021B8E4
	call fn40317BC0 (retsize: 0;)
	a2 = 0x4021B7F8
	a0 = 0x402034D0
	v11 = a0
	a0 = 0x4021B8ED
	call v11 (retsize: 0;)
	a3 = a13
	a2 = a14
	a0 = 0x4021B8F4
	call fn4031B7FC (retsize: 0;)
	goto l4021BA14
	// succ:  l4021BA14
l4021B8F7:
	v13 = Mem0[a13 + 0x0000001A:uint16]
	a9 = (uint32) v13
	a0 = 1
	branch a9 != 0x00000000 l4021B972
	// succ:  l4021B8FF l4021B972
l4021B8FF:
	Mem0[a1 + 0x00000010:word32] = a12
	a6 = 0x402035F0
	a5 = 0x402137EC
	a4 = 0x4021B8B4
	v16 = Mem0[a5 + 0x00000090:byte]
	a5 = (uint32) v16
	v17 = Mem0[a4 + 0x00000080:byte]
	a4 = (uint32) v17
	a5 = a5 + 1
	branch a5 >= 2 l4021B918
	// succ:  l4021B915 l4021B918
l4021B915:
	goto l4021BA21
	// succ:  l4021BA21
l4021B918:
	v18 = Mem0[a6 + 0x000001D0:uint16]
	a2 = (uint32) v18
	a12 = a0
	// succ:  l4021B91D
l4021B91D:
	a8 = a12 & 0x0000001F
	SAR = a8
	a7 = a0 >> SAR
	branch (a7 & 0x00000001) != 0x00000000 l4021B92C
	// succ:  l4021B929 l4021B92C
l4021B929:
	goto l4021BA24
	// succ:  l4021BA24
l4021B92C:
	a12 = a12 + 1
	a12 = a12 & 0x0000FFFF
	branch a5 != a12 l4021B91D
	// succ:  l4021B934 l4021B91D
l4021B934:
	goto l4021BA24
	// succ:  l4021BA24
l4021B972:
	a2 = 0x4021B7F4
	a8 = 0x4021B8B0
	v22 = Mem0[a13 + 0x00000000:byte]
	a3 = (uint32) v22
	v23 = Mem0[a13 + 0x00000001:byte]
	a4 = (uint32) v23
	v24 = Mem0[a13 + 0x00000002:byte]
	a5 = (uint32) v24
	v25 = Mem0[a13 + 0x00000003:byte]
	a6 = (uint32) v25
	v26 = Mem0[a13 + 0x00000004:byte]
	a7 = (uint32) v26
	a11 = 0x40215990
	v29 = Mem0[a13 + 0x00000005:byte]
	a10 = (uint32) v29
	a9 = a9 & a11
	Mem0[a1:word32] = a10
	Mem0[a1 + 0x00000008:word32] = a9
	Mem0[a1 + 0x00000004:word32] = a8
	a0 = 0x402034D0
	v30 = a0
	a0 = 0x4021B99C
	call v30 (retsize: 0;)
	a2 = Mem0[a14 + 0x00000088:word32]
	a3 = a13
	a4 = 6
	a0 = 0x40203130
	v31 = a0
	a0 = 0x4021B9A9
	call v31 (retsize: 0;)
	a3 = a12
	a2 = Mem0[a14 + 0x00000088:word32]
	v32 = Mem0[a13 + 0x0000001A:uint16]
	a0 = (uint32) v32
	a4 = 0
	Mem0[a2 + 0x0000001A:word16] = a0
	a2 = a14
	a0 = 0x4021B9BB
	call fn40317BC0 (retsize: 0;)
	a2 = Mem0[a14 + 0x00000088:word32]
	a3 = 0x000000FF
	a4 = 6
	a0 = 0x4020267C
	v33 = a0
	a0 = 0x4021B9C9
	call v33 (retsize: 0;)
	a4 = Mem0[a14 + 0x00000088:word32]
	a3 = 0
	a0 = Mem0[a14 + 0x000000B4:word32]
	Mem0[a4 + 0x0000001A:word16] = a3
	branch a0 == 0x00000000 l4021BA14
	// succ:  l4021B9D7 l4021BA14
l4021B9D7:
	a2 = Mem0[a0 + 0x00000018:word32]
	a5 = Mem0[a2 + 0x00000004:word32]
	branch a5 == 0x00000000 l4021BA09
	// succ:  l4021B9DD l4021BA09
l4021B9DD:
	a2 = Mem0[a13 + 0x000000E4:word32]
	a0 = 0x4021B9E3
	call sdk_wpa_auth_sta_deinit (retsize: 0;)
	a2 = Mem0[a14 + 0x000000B4:word32]
	a3 = a13
	a2 = Mem0[a2 + 0x00000018:word32]
	a0 = 0x4021B9ED
	call sdk_wpa_auth_sta_init (retsize: 0;)
	Mem0[a13 + 0x000000E4:word32] = a2
	branch a2 == 0x00000000 l4021BA14
	// succ:  l4021B9F2 l4021BA14
l4021B9F2:
	a3 = a2
	a4 = Mem0[a14 + 0x000000B4:word32]
	v34 = Mem0[a13 + 0x00000026:byte]
	a5 = (uint32) v34
	a2 = Mem0[a4 + 0x00000018:word32]
	a4 = a13 + 39
	a0 = 0x4021BA02
	call sdk_wpa_validate_wpa_ie (retsize: 0;)
	branch a2 != 0x00000000 l4021BA14
	// succ:  l4021BA04 l4021BA14
l4021BA04:
	a2 = Mem0[a14 + 0x000000B4:word32]
	a2 = Mem0[a2 + 0x00000018:word32]
	// succ:  l4021BA09
l4021BA09:
	a3 = Mem0[a13 + 0x000000E4:word32]
	a0 = 0x4021BA0F
	call sdk_wpa_auth_sta_associated (retsize: 0;)
	a3 = 1
	Mem0[a13 + 0x00000018:byte] = a3
	// succ:  l4021BA14
l4021BA14:
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x0000001C:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_cnx_node_join_exit
l4021BA21:
	a12 = a0 | a0
	// succ:  l4021BA24
l4021BA24:
	a4 = a4 + 1
	branch a12 >= a4 l4021BA2D
	// succ:  l4021BA2A l4021BA2D
l4021BA2A:
	goto l4025B937
	// succ:  l4025B937
l4021BA2D:
	a3 = Mem0[a1 + 0x00000010:word32]
	a2 = a14
	a4 = 17
	a0 = 0x4021BA37
	call fn40317BC0 (retsize: 0;)
	a3 = a13
	a2 = a14
	a0 = 0x4021BA3E
	call fn4031B7FC (retsize: 0;)
	goto l4025BA14
	// succ:  l4025BA14
l4025B937:
l4025BA14:
sdk_cnx_node_join_exit:


// sdk_ieee80211_send_action_register
// Return size: 0
void sdk_ieee80211_send_action_register()
sdk_ieee80211_send_action_register_entry:
	// succ:  l4021BA54
l4021BA54:
	a1 = fp
	branch a2 == 3 l4021BA72
	// succ:  l4021BA57 l4021BA72
l4021BA57:
	branch a2 == 7 l4021BA7B
	// succ:  l4021BA5A l4021BA7B
l4021BA5A:
	a5 = 0x0000007F
	branch a2 != a5 l4021BA6E
	// succ:  l4021BA60 l4021BA6E
l4021BA60:
	branch a3 != 0x00000000 l4021BA6E
	// succ:  l4021BA62 l4021BA6E
l4021BA62:
	a2 = 0x4021BA48
	a6 = a2 + a3 * 0x00000004
	Mem0[a6:word32] = a4
	a2 = 0
	return
	// succ:  sdk_ieee80211_send_action_register_exit
l4021BA6E:
	a2 = -1
	return
	// succ:  sdk_ieee80211_send_action_register_exit
l4021BA72:
	branch a3 >=u 0x00000002 l4021BA6E
	// succ:  l4021BA75 l4021BA6E
l4021BA75:
	a2 = 0x4021BA4C
	goto l4025BA65
	// succ:  l4025BA65
l4021BA7B:
	branch a3 != 0x00000000 l4021BA6E
	// succ:  l4021BA7E l4021BA6E
l4021BA7E:
	a2 = 0x4021BA50
	// succ:  l4025BA65
l4025BA65:
sdk_ieee80211_send_action_register_exit:


// sdk_ieee80211_send_action_unregister
// Return size: 0
void sdk_ieee80211_send_action_unregister()
sdk_ieee80211_send_action_unregister_entry:
	// succ:  l4021BA88
l4021BA88:
	a1 = fp
	a4 = 0x4021BA84
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BA93
	call fn4031BA54 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_send_action_unregister_exit
sdk_ieee80211_send_action_unregister_exit:


// sdk_ieee80211_send_action
// Return size: 0
void sdk_ieee80211_send_action()
sdk_ieee80211_send_action_entry:
	// succ:  l4021BA9C
l4021BA9C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BA84
	branch a3 == 3 l4021BABD
	// succ:  l4021BAA7 l4021BABD
l4021BAA7:
	branch a3 == 7 l4021BAD1
	// succ:  l4021BAAA l4021BAD1
l4021BAAA:
	a6 = 0x0000007F
	branch a3 != a6 l4021BAC0
	// succ:  l4021BAB0 l4021BAC0
l4021BAB0:
	branch a4 != 0x00000000 l4021BACC
	// succ:  l4021BAB2 l4021BACC
l4021BAB2:
	a7 = 0x4021BA48
	a7 = a7 + a4 * 0x00000004
	a7 = Mem0[a7 + 0x00000000:word32]
	goto l4021BAC2
	// succ:  l4021BAC2
l4021BABD:
	branch a4 <u 0x00000002 l4021BAE3
	// succ:  l4021BAC0 l4021BAE3
l4021BAC0:
	a7 = a0
	// succ:  l4021BAC2
l4021BAC2:
	a0 = 0x4021BAC5
	call a7 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_send_action_exit
l4021BACC:
	a7 = a0
	goto l4025BAC2
	// succ:  l4025BAC2
l4021BAD1:
	branch a4 != 0x00000000 l4021BADE
	// succ:  l4021BAD3 l4021BADE
l4021BAD3:
	a7 = 0x4021BA50
	a7 = a7 + a4 * 0x00000004
	a7 = Mem0[a7 + 0x00000000:word32]
	goto l4025BAC2
	// succ:  l4025BAC2
l4021BADE:
	a7 = a0
	goto l4025BAC2
	// succ:  l4025BAC2
l4021BAE3:
	a7 = 0x4021BA4C
	a7 = a7 + a4 * 0x00000004
	a7 = Mem0[a7 + 0x00000000:word32]
	// succ:  l4025BAC2
l4025BAC2:
sdk_ieee80211_send_action_exit:


// sdk_ieee80211_recv_action_register
// Return size: 0
void sdk_ieee80211_recv_action_register()
sdk_ieee80211_recv_action_register_entry:
	// succ:  l4021BB00
l4021BB00:
	a1 = fp
	branch a2 == 3 l4021BB1E
	// succ:  l4021BB03 l4021BB1E
l4021BB03:
	branch a2 == 7 l4021BB27
	// succ:  l4021BB06 l4021BB27
l4021BB06:
	a5 = 0x0000007F
	branch a2 != a5 l4021BB1A
	// succ:  l4021BB0C l4021BB1A
l4021BB0C:
	branch a3 != 0x00000000 l4021BB1A
	// succ:  l4021BB0E l4021BB1A
l4021BB0E:
	a2 = 0x4021BAF4
	a6 = a2 + a3 * 0x00000004
	Mem0[a6:word32] = a4
	a2 = 0
	return
	// succ:  sdk_ieee80211_recv_action_register_exit
l4021BB1A:
	a2 = -1
	return
	// succ:  sdk_ieee80211_recv_action_register_exit
l4021BB1E:
	branch a3 != 0x00000000 l4021BB1A
	// succ:  l4021BB21 l4021BB1A
l4021BB21:
	a2 = 0x4021BAF8
	goto l4025BB11
	// succ:  l4025BB11
l4021BB27:
	branch a3 != 0x00000000 l4021BB1A
	// succ:  l4021BB2A l4021BB1A
l4021BB2A:
	a2 = 0x4021BAFC
	// succ:  l4025BB11
l4025BB11:
sdk_ieee80211_recv_action_register_exit:


// sdk_ieee80211_recv_action_unregister
// Return size: 0
void sdk_ieee80211_recv_action_unregister()
sdk_ieee80211_recv_action_unregister_entry:
	// succ:  l4021BB34
l4021BB34:
	a1 = fp
	a4 = 0x4021BB30
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BB3F
	call fn4031BB00 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_recv_action_unregister_exit
sdk_ieee80211_recv_action_unregister_exit:


// sdk_ieee80211_recv_action
// Return size: 0
void sdk_ieee80211_recv_action()
sdk_ieee80211_recv_action_entry:
	// succ:  l4021BB48
l4021BB48:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	v4 = Mem0[a4 + 0x00000000:byte]
	a0 = (uint32) v4
	a8 = 0x4021BB30
	branch a0 == 3 l4021BB71
	// succ:  l4021BB56 l4021BB71
l4021BB56:
	branch a0 == 7 l4021BB85
	// succ:  l4021BB59 l4021BB85
l4021BB59:
	a6 = 0x0000007F
	branch a0 != a6 l4021BB76
	// succ:  l4021BB5F l4021BB76
l4021BB5F:
	v8 = Mem0[a4 + 0x00000001:byte]
	a0 = (uint32) v8
	a7 = a8
	branch a0 != 0x00000000 l4021BB82
	// succ:  l4021BB66 l4021BB82
l4021BB66:
	a7 = 0x4021BAF4
	a7 = a7 + a0 * 0x00000004
	a7 = Mem0[a7 + 0x00000000:word32]
	goto l4021BB78
	// succ:  l4021BB78
l4021BB71:
	v10 = Mem0[a4 + 0x00000001:byte]
	a0 = (uint32) v10
	branch a0 == 0x00000000 l4021BB9A
	// succ:  l4021BB76 l4021BB9A
l4021BB76:
	a7 = a8
	// succ:  l4021BB78
l4021BB78:
	a0 = 0x4021BB7B
	call a7 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_recv_action_exit
l4021BB82:
	goto l4025BB78
	// succ:  l4025BB78
l4021BB85:
	v11 = Mem0[a4 + 0x00000001:byte]
	a0 = (uint32) v11
	a7 = a8
	branch a0 != 0x00000000 l4021BB97
	// succ:  l4021BB8C l4021BB97
l4021BB8C:
	a7 = 0x4021BAFC
	a7 = a7 + a0 * 0x00000004
	a7 = Mem0[a7 + 0x00000000:word32]
	goto l4025BB78
	// succ:  l4025BB78
l4021BB97:
	goto l4025BB78
	// succ:  l4025BB78
l4021BB9A:
	a7 = 0x4021BAF8
	a7 = a7 + a0 * 0x00000004
	a7 = Mem0[a7 + 0x00000000:word32]
	// succ:  l4025BB78
l4025BB78:
sdk_ieee80211_recv_action_exit:


// sdk_ieee80211_getmgtframe
// Return size: 0
void sdk_ieee80211_getmgtframe()
sdk_ieee80211_getmgtframe_entry:
	// succ:  l4021BBA8
l4021BBA8:
	a1 = fp
	a5 = -4
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	a0 = 0x00000100
	a12 = a3
	a3 = a3 + a4
	a3 = a3 + 3
	a4 = a3 & a5
	branch a0 >=u a4 l4021BBC5
	// succ:  l4021BBC0 l4021BBC5
l4021BBC0:
	a2 = 0
	goto l4021BBE4
	// succ:  l4021BBE4
l4021BBC5:
	a3 = 4
	Mem0[a1:word32] = a2
	a5 = 65
	branch a4 >=u a5 l4021BBD0
	// succ:  l4021BBCE l4021BBD0
l4021BBCE:
	a3 = 5
	// succ:  l4021BBD0
l4021BBD0:
	a2 = 0x00000000
	a0 = 0x4021BBD6
	call sdk_esf_buf_alloc (retsize: 0;)
	branch a2 == 0x00000000 l4021BBE4
	// succ:  l4021BBD9 l4021BBE4
l4021BBD9:
	a6 = Mem0[a2 + 0x00000004:word32]
	a6 = Mem0[a6 + 0x00000004:word32]
	a7 = Mem0[a1 + 0x00000000:word32]
	a6 = a12 + a6
	Mem0[a7:word32] = a6
	// succ:  l4021BBE4
l4021BBE4:
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ieee80211_getmgtframe_exit
sdk_ieee80211_getmgtframe_exit:


// sdk_rf_init
// Return size: 0
void sdk_rf_init()
sdk_rf_init_entry:
	// succ:  l4021BBF4
l4021BBF4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BBF0
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = a2 << 8
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a4 >> 24
	v6 = a0
	a0 = 0x4021BC09
	call v6 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rf_init_exit
sdk_rf_init_exit:


// sdk_bb_init
// Return size: 0
void sdk_bb_init()
sdk_bb_init_entry:
	// succ:  l4021BC10
l4021BC10:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BBF0
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000018:word32]
	v4 = a0
	a0 = 0x4021BC1F
	call v4 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_bb_init_exit
sdk_bb_init_exit:


// sdk_phy_init
// Return size: 0
void sdk_phy_init()
sdk_phy_init_entry:
	// succ:  l4021BC28
l4021BC28:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a3
	a0 = 0x4021BBF0
	a3 = a2 << 8
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a3 >> 24
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = a12
	v7 = a0
	a0 = 0x4021BC43
	call v7 (retsize: 0;)
	a0 = 0x4021BBF0
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000018:word32]
	a2 = a12
	v8 = a0
	a0 = 0x4021BC4F
	call v8 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_phy_init_exit
sdk_phy_init_exit:


// sdk_RFChannelSel
// Return size: 0
void sdk_RFChannelSel()
sdk_RFChannelSel_entry:
	// succ:  l4021BC58
l4021BC58:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BBF0
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = a2 << 8
	a0 = Mem0[a0 + 0x00000008:word32]
	a2 = a3 >> 24
	v6 = a0
	a0 = 0x4021BC6D
	call v6 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_RFChannelSel_exit
sdk_RFChannelSel_exit:


// sdk_phy_delete_channel
// Return size: 0
void sdk_phy_delete_channel()
sdk_phy_delete_channel_entry:
	// succ:  l4021BC74
l4021BC74:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BBF0
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000000C:word32]
	v4 = a0
	a0 = 0x4021BC83
	call v4 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_phy_delete_channel_exit
sdk_phy_delete_channel_exit:


// sdk_phy_enable_agc
// Return size: 0
void sdk_phy_enable_agc()
sdk_phy_enable_agc_entry:
	// succ:  l4021BC8C
l4021BC8C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BBF0
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000010:word32]
	v4 = a0
	a0 = 0x4021BC9B
	call v4 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_phy_enable_agc_exit
sdk_phy_enable_agc_exit:


// sdk_phy_disable_agc
// Return size: 0
void sdk_phy_disable_agc()
sdk_phy_disable_agc_entry:
	// succ:  l4021BCA4
l4021BCA4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BBF0
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000014:word32]
	v4 = a0
	a0 = 0x4021BCB3
	call v4 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_phy_disable_agc_exit
sdk_phy_disable_agc_exit:


// sdk_phy_initialize_bb
// Return size: 0
void sdk_phy_initialize_bb()
sdk_phy_initialize_bb_entry:
	// succ:  l4021BCBC
l4021BCBC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BBF0
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000018:word32]
	v4 = a0
	a0 = 0x4021BCCB
	call v4 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_phy_initialize_bb_exit
sdk_phy_initialize_bb_exit:


// sdk_phy_set_sense
// Return size: 0
void sdk_phy_set_sense()
sdk_phy_set_sense_entry:
	// succ:  l4021BCD4
l4021BCD4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BBF0
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000001C:word32]
	v4 = a0
	a0 = 0x4021BCE3
	call v4 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_phy_set_sense_exit
sdk_phy_set_sense_exit:


// sdk_ram_pbus_set_rxgain
// Return size: 0
void sdk_ram_pbus_set_rxgain()
sdk_ram_pbus_set_rxgain_entry:
	// succ:  l4021BCF0
l4021BCF0:
	a1 = fp
	a3 = 2
	a1 = a1 - 32
	Mem0[a1 + 0x0000000C:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a13
	a13 = 0x4021BCEC
	Mem0[a1 + 0x00000008:word32] = a0
	a0 = Mem0[a13 + 0x00000000:word32]
	a12 = a2
	a0 = Mem0[a0 + 0x000000B0:word32]
	a2 = 3
	v8 = a0
	a0 = 0x4021BD0A
	call v8 (retsize: 0;)
	a3 = 1
	a0 = Mem0[a13 + 0x00000000:word32]
	Mem0[a1:word32] = a2
	a0 = Mem0[a0 + 0x000000B0:word32]
	a2 = 2
	v9 = a0
	a0 = 0x4021BD18
	call v9 (retsize: 0;)
	a3 = 1
	a4 = a12 >>u 0x00000009 & 0x00000001
	a0 = Mem0[a13 + 0x00000000:word32]
	a5 = a12 >>u 0x00000008 & 0x00000001
	a6 = a12 >>u 0x00000006 & 0x00000001
	Mem0[a1 + 0x00000004:word32] = a2
	a7 = a12 >>u 0x00000007 & 0x00000001
	a2 = 3
	a7 = a7 << 30
	a6 = a6 << 29
	a5 = a5 << 31
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a4 | a5
	a6 = a6 | a7
	a5 = a12 >>u 0x00000003 & 0x00000001
	a7 = a12 >>u 0x00000004 & 0x00000001
	a5 = a5 << 26
	a7 = a7 << 27
	a5 = a5 | a7
	a7 = a12 >>u 0x00000005 & 0x00000001
	a7 = a7 << 28
	a5 = a5 | a7
	a5 = a5 | a6
	a4 = a4 | a5
	a4 = a4 & 0x0000FFFF
	v14 = a0
	a0 = 0x4021BD62
	call v14 (retsize: 0;)
	a2 = 3
	a3 = 2
	a0 = Mem0[a13 + 0x00000000:word32]
	a4 = Mem0[a1 + 0x00000000:word32]
	a5 = 0x000001C7
	a4 = a4 & a5
	a0 = Mem0[a0 + 0x000000AC:word32]
	a5 = a12 & 0x00000007
	a5 = a5 << 29
	a4 = a4 | a5
	a4 = a4 & 0x0000FFFF
	v15 = a0
	a0 = 0x4021BD82
	call v15 (retsize: 0;)
	a2 = 2
	a3 = 1
	a0 = Mem0[a13 + 0x00000000:word32]
	a4 = Mem0[a1 + 0x00000004:word32]
	a5 = 0x00000185
	a4 = a4 & a5
	a0 = Mem0[a0 + 0x000000AC:word32]
	a5 = a12 >>u 0x0000000B & 0x0000000F
	a5 = a5 << 29
	a4 = a4 | a5
	a5 = a12 >>u 0x0000000A & 0x00000001
	a5 = a5 << 31
	a4 = a4 | a5
	a4 = a4 & 0x0000FFFF
	v16 = a0
	a0 = 0x4021BDAB
	call v16 (retsize: 0;)
	a12 = Mem0[a1 + 0x0000000C:word32]
	a13 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_ram_pbus_set_rxgain_exit
sdk_ram_pbus_set_rxgain_exit:


// sdk_ram_pbus_debugmode
// Return size: 0
void sdk_ram_pbus_debugmode()
sdk_ram_pbus_debugmode_entry:
	// succ:  l4021BDC4
l4021BDC4:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a15
	a4 = a0
	a15 = 0x4021319C
	a12 = 0x4021BDB8
	a2 = Mem0[a12 + 0x00000394:word32]
	branch (a2 & 0x00000001) != 0x00000000 l4021BE24
	// succ:  l4021BDE5 l4021BE24
l4021BDE5:
	a5 = Mem0[a15 + 0x00000270:word32]
	branch (a5 & 0x00000002) == 0x00000000 l4021BE24
	// succ:  l4021BDEE l4021BE24
l4021BDEE:
	a13 = 0x4021BCEC
	a0 = Mem0[a13 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000074:word32]
	v11 = a0
	a0 = 0x4021BDF9
	call v11 (retsize: 0;)
	a2 = 5
	a0 = 0x4021BDFE
	call fn40303F28 (retsize: 0;)
	a14 = 0x00000184
	// succ:  l4021BE01
l4021BE01:
	a0 = Mem0[a13 + 0x00000000:word32]
	a2 = 2
	a0 = Mem0[a0 + 0x000000B0:word32]
	a3 = 1
	v13 = a0
	a0 = 0x4021BE0D
	call v13 (retsize: 0;)
	branch (~a2 & a14) != 0x00000000 l4021BE01
	// succ:  l4021BE10 l4021BE01
l4021BE10:
	a0 = Mem0[a13 + 0x00000000:word32]
	a2 = 3
	a0 = Mem0[a0 + 0x000000B0:word32]
	a3 = 2
	v14 = a0
	a0 = 0x4021BE1C
	call v14 (retsize: 0;)
	a3 = 6
	a2 = a2 & a3
	branch a2 != 6 l4021BE01
	// succ:  l4021BE24 l4021BE01
l4021BE24:
	a9 = 0x4021BDBC
	a8 = 0x4021BDC0
	a7 = Mem0[a8 + 0x00000108:word32]
	a7 = a7 | a9
	Mem0[a8 + 0x00000108:word32] = a7
	a5 = Mem0[a12 + 0x00000394:word32]
	a6 = 1
	a5 = a5 | a6
	Mem0[a12 + 0x00000394:word32] = a5
	a4 = Mem0[a15 + 0x00000270:word32]
	a0 = 0x40204574
	branch (a4 & 0x00000002) == 0x00000000 l4021BE68
	// succ:  l4021BE56 l4021BE68
l4021BE56:
	a10 = Mem0[a12 + 0x000003A0:word32]
	branch (a10 & 0x40000000) != 0x00000000 l4021BE68
	// succ:  l4021BE5F l4021BE68
l4021BE5F:
	a11 = Mem0[a12 + 0x000003A0:word32]
	branch (a11 & a0) == 0x00000000 l4021BE5F
	// succ:  l4021BE68 l4021BE5F
l4021BE68:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_ram_pbus_debugmode_exit
sdk_ram_pbus_debugmode_exit:


// sdk_ram_pbus_xpd_tx_on
// Return size: 0
void sdk_ram_pbus_xpd_tx_on()
sdk_ram_pbus_xpd_tx_on_entry:
	// succ:  l4021BE78
l4021BE78:
	a1 = fp
	a3 = 1
	a4 = 0x00000081
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	a13 = 0x4021BCEC
	Mem0[a1:word32] = a0
	a0 = Mem0[a13 + 0x00000000:word32]
	a12 = a2
	a0 = Mem0[a0 + 0x000000AC:word32]
	a2 = 2
	v9 = a0
	a0 = 0x4021BE95
	call v9 (retsize: 0;)
	a2 = 7
	a0 = Mem0[a13 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a12 >>u 5
	v10 = a0
	a0 = 0x4021BEA4
	call v10 (retsize: 0;)
	a4 = a12 & 0x0000001F
	a0 = Mem0[a13 + 0x00000000:word32]
	a2 = 0
	a0 = Mem0[a0 + 0x000000AC:word32]
	a3 = 1
	v11 = a0
	a0 = 0x4021BEB3
	call v11 (retsize: 0;)
	a2 = 1
	a0 = Mem0[a13 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0x0000007F
	v12 = a0
	a0 = 0x4021BEC2
	call v12 (retsize: 0;)
	a2 = 6
	a0 = Mem0[a13 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0x0000007F
	v13 = a0
	a0 = 0x4021BED1
	call v13 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ram_pbus_xpd_tx_on_exit
sdk_ram_pbus_xpd_tx_on_exit:


// sdk_set_rf_freq_offset
// Return size: 0
void sdk_set_rf_freq_offset()
sdk_set_rf_freq_offset_entry:
	// succ:  l4021BEE4
l4021BEE4:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a2
	Mem0[a1 + 0x00000008:word32] = a3
	Mem0[a1 + 0x00000010:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a4
	a4 = 0x4021BEDC
	a0 = 0x4021BCEC
	a3 = 0x4021BDB8
	a2 = Mem0[a3 + 0x000003C8:word32]
	a2 = a2 | a4
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000DC:word32]
	Mem0[a3 + 0x000003C8:word32] = a2
	v7 = a0
	a0 = 0x4021BF0F
	call v7 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000008:word32]
	a3 = Mem0[a1 + 0x00000004:word32]
	a4 = Mem0[a1 + 0x0000000C:word32]
	a5 = a1
	a0 = 0x4021BF1A
	call sdk_ram_rfpll_set_freq (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000E0:word32]
	a2 = a1
	v9 = a0
	a0 = 0x4021BF27
	call v9 (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000D8:word32]
	v10 = a0
	a0 = 0x4021BF32
	call v10 (retsize: 0;)
	a0 = 0x4021BF35
	call sdk_wait_rfpll_cal_end (retsize: 0;)
	a4 = 0x4021BEE0
	a3 = 0x4021BDB8
	a2 = Mem0[a3 + 0x000003C8:word32]
	a2 = a2 & a4
	Mem0[a3 + 0x000003C8:word32] = a2
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_set_rf_freq_offset_exit
sdk_set_rf_freq_offset_exit:


// sdk_chip_v6_rxmax_ext_ana
// Return size: 0
void sdk_chip_v6_rxmax_ext_ana()
sdk_chip_v6_rxmax_ext_ana_entry:
	// succ:  l4021BF54
l4021BF54:
	a1 = fp
	a3 = 1
	a4 = 5
	a5 = 7
	a6 = 0
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a14
	a14 = 0x4021BCEC
	Mem0[a1:word32] = a0
	a0 = Mem0[a14 + 0x00000000:word32]
	a12 = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000062
	v13 = a0
	a0 = 0x4021BF79
	call v13 (retsize: 0;)
	a13 = 0
	a15 = a2
	a3 = 0xFFFFFEAC
	a2 = a2 + a2 * 0x00000002
	a2 = a3 + a2 * 0x00000008
	a3 = 0x000000E3
	a0 = 0x40202548
	v14 = a0
	a0 = 0x4021BF8F
	call v14 (retsize: 0;)
	a5 = a2 << 16
	a4 = 15
	a0 = a4
	a5 = a5 >> 16
	a2 = a13
	branch a5 < 0x00000000 l4021BF9E
	// succ:  l4021BF9B_1 l4021BF9E
l4021BF9B_1:
	a2 = a5
	// succ:  l4021BF9E
l4021BF9E:
	branch a2 >= 16 l4021BFA3
	// succ:  l4021BFA1 l4021BFA3
l4021BFA1:
	a0 = a2
	// succ:  l4021BFA3
l4021BFA3:
	a3 = 0x000000CF
	a2 = a15 + a15 * 0x00000002
	a2 = a2 * 0x00000008 - a15
	a2 = a2 + 29
	a15 = a0 << 16
	a15 = a15 >> 16
	a0 = 0x40202548
	v15 = a0
	a0 = 0x4021BFBB
	call v15 (retsize: 0;)
	a9 = Mem0[a14 + 0x00000000:word32]
	a4 = a2 << 16
	a3 = 15
	a0 = a3
	a4 = a4 >> 16
	a9 = Mem0[a9 + 0x0000009C:word32]
	branch a4 < 0x00000000 l4021BFCD
	// succ:  l4021BFCA_1 l4021BFCD
l4021BFCA_1:
	a13 = a4
	// succ:  l4021BFCD
l4021BFCD:
	branch a13 >= 16 l4021BFD2
	// succ:  l4021BFD0 l4021BFD2
l4021BFD0:
	a0 = a13
	// succ:  l4021BFD2
l4021BFD2:
	a13 = a0 << 16
	a13 = a13 >> 16
	branch a12 <u 0x00000003 l4021BFF8
	// succ:  l4021BFDB l4021BFF8
l4021BFDB:
	a2 = 8
	branch a15 < 8 l4021BFE2
	// succ:  l4021BFE0 l4021BFE2
l4021BFE0:
	a2 = -8
	// succ:  l4021BFE2
l4021BFE2:
	a3 = 0
	a4 = 4
	a5 = 3
	a6 = 0
	a7 = a15 + a2
	a7 = a7 & 0x000000FF
	a2 = 0x00000064
	a0 = 0x4021BFF5
	call a9 (retsize: 0;)
	goto l4021C009
	// succ:  l4021C009
l4021BFF8:
	a7 = a15 & 0x000000FF
	a2 = 0x00000064
	a3 = 0
	a4 = 4
	a5 = 3
	a6 = 0
	a0 = 0x4021C009
	call a9 (retsize: 0;)
	// succ:  l4021C009
l4021C009:
	a9 = Mem0[a14 + 0x00000000:word32]
	a0 = 8
	a9 = Mem0[a9 + 0x0000009C:word32]
	branch a12 <u 0x00000002 l4021C02E
	// succ:  l4021C013 l4021C02E
l4021C013:
	branch a13 < 8 l4021C018
	// succ:  l4021C016 l4021C018
l4021C016:
	a0 = -8
	// succ:  l4021C018
l4021C018:
	a2 = 0x00000064
	a3 = 0
	a4 = 7
	a5 = 3
	a6 = 0
	a7 = a13 + a0
	a7 = a7 & 0x000000FF
	a0 = 0x4021C02B
	call a9 (retsize: 0;)
	goto l4021C03F
	// succ:  l4021C03F
l4021C02E:
	a7 = a13 & 0x000000FF
	a2 = 0x00000064
	a3 = 0
	a4 = 7
	a5 = 3
	a6 = 0
	a0 = 0x4021C03F
	call a9 (retsize: 0;)
	// succ:  l4021C03F
l4021C03F:
	a9 = Mem0[a14 + 0x00000000:word32]
	a9 = Mem0[a9 + 0x0000009C:word32]
	branch a12 == 0x00000000 l4021C06E
	// succ:  l4021C046 l4021C06E
l4021C046:
	a2 = 0x00000061
	a3 = 1
	a4 = 5
	a5 = 3
	a6 = 2
	a7 = 3
	a0 = 0x4021C056
	call a9 (retsize: 0;)
	a2 = 0x00000061
	a3 = 1
	a4 = 5
	a5 = 1
	a0 = Mem0[a14 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 3
	v18 = a0
	a0 = 0x4021C06B
	call v18 (retsize: 0;)
	goto l4021C093
	// succ:  l4021C093
l4021C06E:
	a2 = 0x00000061
	a3 = 1
	a4 = 5
	a5 = 3
	a6 = 2
	a7 = 0
	a0 = 0x4021C07E
	call a9 (retsize: 0;)
	a2 = 0x00000061
	a3 = 1
	a4 = 5
	a5 = 1
	a0 = Mem0[a14 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v19 = a0
	a0 = 0x4021C093
	call v19 (retsize: 0;)
	// succ:  l4021C093
l4021C093:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_chip_v6_rxmax_ext_ana_exit
sdk_chip_v6_rxmax_ext_ana_exit:


// sdk_ram_chip_v6_rx_init
// Return size: 0
void sdk_ram_chip_v6_rx_init()
sdk_ram_chip_v6_rx_init_entry:
	// succ:  l4021C0A4
l4021C0A4:
	a1 = fp
	a2 = 0x00000061
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BCEC
	a3 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = 8
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 17
	v8 = a0
	a0 = 0x4021C0BD
	call v8 (retsize: 0;)
	a2 = 0
	a0 = 0x4021C0C2
	call fn4031BF54 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ram_chip_v6_rx_init_exit
sdk_ram_chip_v6_rx_init_exit:


// sdk_tsen_meas
// Return size: 0
void sdk_tsen_meas()
sdk_tsen_meas_entry:
	// succ:  l4021C0D4
l4021C0D4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a7 = 0xFFFFFFDF
	a2 = 0x4021C0CC
	a6 = Mem0[a2 + 0x00000350:word32]
	a6 = a6 & a7
	Mem0[a2 + 0x00000350:word32] = a6
	a5 = 0x4021A09C
	a4 = Mem0[a2 + 0x0000035C:word32]
	a4 = a4 | a5
	Mem0[a2 + 0x0000035C:word32] = a4
	a3 = 0x4021C0D0
	a0 = Mem0[a2 + 0x0000035C:word32]
	a0 = a0 & a3
	Mem0[a2 + 0x0000035C:word32] = a0
	a2 = 0x000000C8
	a0 = 0x4021C119
	call fn40303F28 (retsize: 0;)
	a2 = 0x0000006C
	a3 = 0x00000002
	a4 = 0x00000000
	a0 = 0x4021BCEC
	a5 = 6
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = 6
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v10 = a0
	a0 = 0x4021C133
	call v10 (retsize: 0;)
	a2 = 0x0000006C
	a3 = 2
	a4 = 0
	a0 = 0x4021BCEC
	a5 = 6
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = 6
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v11 = a0
	a0 = 0x4021C14B
	call v11 (retsize: 0;)
	a4 = 32
	a3 = 0x4021C0CC
	a2 = Mem0[a3 + 0x00000350:word32]
	a2 = a2 | a4
	a4 = 2
	a5 = 7
	a0 = 0x4021BCEC
	a6 = 0
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a3 + 0x00000350:word32] = a2
	a2 = 0x0000006C
	a0 = Mem0[a0 + 0x00000094:word32]
	a3 = 2
	v12 = a0
	a0 = 0x4021C175
	call v12 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_tsen_meas_exit
sdk_tsen_meas_exit:


// sdk_readvdd33
// Return size: 0
void sdk_readvdd33()
sdk_readvdd33_entry:
	// succ:  l4021C180
l4021C180:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x0000001C:word32] = a13
	a13 = 0x4021BCEC
	Mem0[a1 + 0x00000014:word32] = a0
	a0 = Mem0[a13 + 0x00000000:word32]
	Mem0[a1 + 0x00000018:word32] = a12
	a0 = Mem0[a0 + 0x000000A0:word32]
	Mem0[a1 + 0x00000020:word32] = a14
	v7 = a0
	a0 = 0x4021C198
	call v7 (retsize: 0;)
	a0 = Mem0[a13 + 0x00000000:word32]
	a2 = 6
	a0 = Mem0[a0 + 0x000000B0:word32]
	a3 = 1
	v10 = a0
	a0 = 0x4021C1A4
	call v10 (retsize: 0;)
	a3 = 2
	a4 = 9
	a5 = 2
	a6 = 0
	a0 = Mem0[a13 + 0x00000000:word32]
	a14 = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x0000006B
	v14 = a0
	a0 = 0x4021C1B9
	call v14 (retsize: 0;)
	a3 = 2
	a4 = 0
	a5 = 5
	a6 = 5
	a0 = Mem0[a13 + 0x00000000:word32]
	Mem0[a1 + 0x00000010:word32] = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x0000006C
	v15 = a0
	a0 = 0x4021C1CE
	call v15 (retsize: 0;)
	a3 = 1
	a0 = Mem0[a13 + 0x00000000:word32]
	a12 = a2
	a4 = 2
	a2 = 6
	a4 = a14 | a4
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a4 & 0x0000FFFF
	v16 = a0
	a0 = 0x4021C1E4
	call v16 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a4 = 9
	a5 = 7
	a6 = 7
	a0 = Mem0[a13 + 0x00000000:word32]
	a7 = 1
	a0 = Mem0[a0 + 0x0000009C:word32]
	Mem0[a1 + 0x00000024:word32] = a12
	v18 = a0
	a0 = 0x4021C1FB
	call v18 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a4 = 9
	a5 = 2
	a0 = Mem0[a13 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v19 = a0
	a0 = 0x4021C210
	call v19 (retsize: 0;)
	a12 = 2
	a2 = 0x0000006C
	a3 = 2
	a4 = 0
	a5 = 5
	a0 = Mem0[a13 + 0x00000000:word32]
	a6 = 5
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v20 = a0
	a0 = 0x4021C227
	call v20 (retsize: 0;)
	a9 = 0x4021C17C
	a3 = 0x4021C0CC
	a8 = Mem0[a3 + 0x0000035C:word32]
	a8 = a8 | a9
	Mem0[a3 + 0x0000035C:word32] = a8
	a7 = 0x40203F84
	a6 = Mem0[a3 + 0x0000035C:word32]
	a6 = a6 & a7
	Mem0[a3 + 0x0000035C:word32] = a6
	a5 = -3
	a4 = Mem0[a3 + 0x00000350:word32]
	a4 = a4 & a5
	Mem0[a3 + 0x00000350:word32] = a4
	a2 = Mem0[a3 + 0x00000350:word32]
	a2 = a2 | a12
	Mem0[a3 + 0x00000350:word32] = a2
	a2 = 25
	a0 = 0x4021C273
	call fn40303F28 (retsize: 0;)
	a2 = a1
	a0 = 0x4021C278
	call sdk_read_sar_dout (retsize: 0;)
	a0 = 0
	a12 = 0
	a2 = a1
	// succ:  l4021C27E
l4021C27E:
	a4 = a0 + 1
	a3 = a2 + a0 * 0x00000002
	v23 = Mem0[a3 + 0x00000000:uint16]
	a3 = (uint32) v23
	a0 = a4 & 0x000000FF
	a12 = a3 + a12
	a12 = a12 & 0x0000FFFF
	branch a0 != 8 l4021C27E
	// succ:  l4021C291 l4021C27E
l4021C291:
	a4 = a14 & 0x0000FFFF
	a0 = Mem0[a13 + 0x00000000:word32]
	a2 = 6
	a0 = Mem0[a0 + 0x000000AC:word32]
	a3 = 1
	v24 = a0
	a0 = 0x4021C2A0
	call v24 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a4 = 9
	a5 = 7
	a0 = Mem0[a13 + 0x00000000:word32]
	a6 = 7
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v25 = a0
	a0 = 0x4021C2B5
	call v25 (retsize: 0;)
	a14 = Mem0[a1 + 0x00000024:word32]
	a2 = 0x0000006B
	a3 = 2
	a4 = 9
	a5 = 2
	a6 = 0
	a0 = Mem0[a13 + 0x00000000:word32]
	a7 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a7 & 0x000000FF
	v26 = a0
	a0 = 0x4021C2CF
	call v26 (retsize: 0;)
	a7 = a14 & 0x000000FF
	a2 = 0x0000006C
	a3 = 2
	a4 = 0
	a0 = Mem0[a13 + 0x00000000:word32]
	a5 = 5
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 5
	v27 = a0
	a0 = 0x4021C2E5
	call v27 (retsize: 0;)
	a0 = Mem0[a13 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000BC:word32]
	v28 = a0
	a0 = 0x4021C2ED
	call v28 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x0000001C:word32]
	a2 = a12 << 22
	a14 = Mem0[a1 + 0x00000020:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	a2 = a2 + 0x00000800
	a2 = a2 >>u 0x0000000C & 0x0000FFFF
	a1 = a1 + 48
	return
	// succ:  sdk_readvdd33_exit
sdk_readvdd33_exit:


// sdk_txpwr_offset
// Return size: 0
void sdk_txpwr_offset()
sdk_txpwr_offset_entry:
	// succ:  l4021C310
l4021C310:
	a1 = fp
	a3 = 0x4021C304
	a1 = a1 - 32
	Mem0[a1:word32] = a2
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a13
	a13 = 0x4021C308
	a0 = 0x4021C304
	v10 = Mem0[a13 + 0x0000006C:byte]
	a4 = (uint32) v10
	a14 = 0x00000066
	v11 = (int16) a4
	v12 = (int16) a14
	a14 = v11 *s v12
	a14 = a14 & 0x0000FFFF
	branch a4 != 0x00000000 l4021C335
	// succ:  l4021C332_1 l4021C335
l4021C332_1:
	a14 = a3
	// succ:  l4021C335
l4021C335:
	branch a14 <u a0 l4021C33D
	// succ:  l4021C338 l4021C33D
l4021C338:
	a12 = 0
	goto l4021C36A
	// succ:  l4021C36A
l4021C33D:
	a12 = 0x4021BCEC
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = a14
	a0 = Mem0[a0 + 0x00000038:word32]
	a3 = 3
	v13 = a0
	a0 = 0x4021C34B
	call v13 (retsize: 0;)
	a3 = 3
	a0 = Mem0[a12 + 0x00000000:word32]
	a12 = a2
	a0 = Mem0[a0 + 0x00000038:word32]
	a2 = 0x4021C304
	v14 = a0
	a0 = 0x4021C359
	call v14 (retsize: 0;)
	a12 = a12 - a2
	a12 = a12 << 31
	a12 = a12 << 16
	a12 = a12 >> 16
	a12 = a12 + 2
	a12 = a12 >> 2
	// succ:  l4021C36A
l4021C36A:
	a0 = 0x4021C36D
	call fn4031C0D4 (retsize: 0;)
	a0 = 0
	a3 = Mem0[a1 + 0x00000000:word32]
	a5 = 0x4021C30C
	a12 = a3 + a12
	a12 = a12 << 16
	a12 = a12 >> 16
	// succ:  l4021C37C
l4021C37C:
	a6 = a0 + a5
	a7 = a0 + 1
	a4 = a0 + a13
	v18 = Mem0[a4 + 0x00000024:byte]
	a4 = (uint32) v18
	a0 = a7 & 0x000000FF
	a4 = a12 + a4
	Mem0[a6 + 0x00000068:byte] = a4
	branch a0 != 6 l4021C37C
	// succ:  l4021C390 l4021C37C
l4021C390:
	a13 = Mem0[a1 + 0x0000000C:word32]
	a0 = 0xFFFFFF81
	a7 = a14 << 16
	a6 = a2 << 24
	a14 = Mem0[a1 + 0x00000010:word32]
	a2 = a12
	a6 = a6 + a7
	branch a12 < a0 l4021C3A6
	// succ:  l4021C3A4 l4021C3A6
l4021C3A4:
	a0 = a12
	// succ:  l4021C3A6
l4021C3A6:
	a7 = a0 & 0x000000FF
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a6 = a6 + a7
	Mem0[a5 + 0x00000070:word32] = a6
	a1 = a1 + 32
	return
	// succ:  sdk_txpwr_offset_exit
sdk_txpwr_offset_exit:


// sdk_set_txcap_reg
// Return size: 0
void sdk_set_txcap_reg()
sdk_set_txcap_reg_entry:
	// succ:  l4021C3B8
l4021C3B8:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	a12 = a2
	a13 = 0
	// succ:  l4021C3C5
l4021C3C5:
	branch a13 == 0x00000000 l4021C40A
	// succ:  l4021C3C8 l4021C40A
l4021C3C8:
	branch a13 == 1 l4021C3EC
	// succ:  l4021C3CB l4021C3EC
l4021C3CB:
	branch a13 != 2 l4021C425
	// succ:  l4021C3CE l4021C425
l4021C3CE:
	a2 = 0x0000006B
	a3 = 2
	a4 = 2
	a5 = 6
	a0 = 0x4021BCEC
	a6 = 4
	a0 = Mem0[a0 + 0x00000000:word32]
	a7 = a12 + a13
	a0 = Mem0[a0 + 0x0000009C:word32]
	v12 = Mem0[a7 + 0x00000000:byte]
	a7 = (uint32) v12
	v13 = a0
	a0 = 0x4021C3E9
	call v13 (retsize: 0;)
	goto l4021C425
	// succ:  l4021C425
l4021C3EC:
	a2 = 0x0000006B
	a3 = 2
	a4 = 2
	a5 = 3
	a0 = 0x4021BCEC
	a6 = 0
	a0 = Mem0[a0 + 0x00000000:word32]
	a7 = a12 + a13
	a0 = Mem0[a0 + 0x0000009C:word32]
	v16 = Mem0[a7 + 0x00000000:byte]
	a7 = (uint32) v16
	v17 = a0
	a0 = 0x4021C407
	call v17 (retsize: 0;)
	goto l4021C425
	// succ:  l4021C425
l4021C40A:
	a2 = 0x0000006B
	a3 = 2
	a4 = 1
	a5 = 3
	a0 = 0x4021BCEC
	a6 = 0
	a0 = Mem0[a0 + 0x00000000:word32]
	a7 = a12 + a13
	a0 = Mem0[a0 + 0x0000009C:word32]
	v14 = Mem0[a7 + 0x00000000:byte]
	a7 = (uint32) v14
	v15 = a0
	a0 = 0x4021C425
	call v15 (retsize: 0;)
	// succ:  l4021C425
l4021C425:
	a13 = a13 + 1
	a13 = a13 & 0x000000FF
	branch a13 != 3 l4021C3C5
	// succ:  l4021C42D l4021C3C5
l4021C42D:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_set_txcap_reg_exit
sdk_set_txcap_reg_exit:


// sdk_ram_restart_cal
// Return size: 0
void sdk_ram_restart_cal()
sdk_ram_restart_cal_entry:
	// succ:  l4021C438
l4021C438:
	a1 = fp
	a2 = 0x00000062
	a3 = 1
	a4 = 0
	a5 = 6
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	a12 = 0x4021BCEC
	Mem0[a1:word32] = a0
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 6
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v11 = a0
	a0 = 0x4021C457
	call v11 (retsize: 0;)
	a2 = 0x00000062
	a3 = 1
	a4 = 0
	a5 = 5
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 5
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v12 = a0
	a0 = 0x4021C46C
	call v12 (retsize: 0;)
	a2 = 0x00000062
	a3 = 1
	a4 = 0
	a5 = 5
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 5
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v13 = a0
	a0 = 0x4021C481
	call v13 (retsize: 0;)
	a2 = 0x00000062
	a3 = 1
	a4 = 0
	a5 = 6
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 6
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v14 = a0
	a0 = 0x4021C496
	call v14 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ram_restart_cal_exit
sdk_ram_restart_cal_exit:


// sdk_wait_rfpll_cal_end
// Return size: 0
void sdk_wait_rfpll_cal_end()
sdk_wait_rfpll_cal_end_entry:
	// succ:  l4021C4A4
l4021C4A4:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a15
	a12 = 0
	a15 = 0x00000063
	a14 = 0x00000064
	a13 = 0x4021BCEC
	// succ:  l4021C4BC
l4021C4BC:
	a2 = 0x00000014
	a0 = 0x4021C4C2
	call fn40303F28 (retsize: 0;)
	a2 = 0x00000062
	a3 = 0x00000001
	a4 = 0x00000007
	a0 = Mem0[a13 + 0x00000000:word32]
	a5 = 7
	a0 = Mem0[a0 + 0x00000094:word32]
	a6 = 7
	v13 = a0
	a0 = 0x4021C4D7
	call v13 (retsize: 0;)
	branch a2 != 0x00000000 l4021C4ED
	// succ:  l4021C4D9 l4021C4ED
l4021C4D9:
	branch a12 != a15 l4021C4E5
	// succ:  l4021C4DC l4021C4E5
l4021C4DC:
	a2 = 0x4021C4A0
	a0 = 0x4021262C
	v14 = a0
	a0 = 0x4021C4E5
	call v14 (retsize: 0;)
	// succ:  l4021C4E5
l4021C4E5:
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	branch a12 != a14 l4021C4BC
	// succ:  l4021C4ED l4021C4BC
l4021C4ED:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wait_rfpll_cal_end_exit sdk_wait_rfpll_cal_end_exit
sdk_wait_rfpll_cal_end_exit:


// sdk_ram_rfpll_set_freq
// Return size: 0
void sdk_ram_rfpll_set_freq()
sdk_ram_rfpll_set_freq_entry:
	// succ:  l4021C518
l4021C518:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a14
	a12 = a5
	a14 = 0x4021C4FC
	branch a3 == 0x00000000 l4021C539
	// succ:  l4021C52A l4021C539
l4021C52A:
	branch a3 == 1 l4021C536
	// succ:  l4021C52D l4021C536
l4021C52D:
	branch a3 != 2 l4021C539
	// succ:  l4021C530 l4021C539
l4021C530:
	a14 = 0x4021C500
	goto l4021C539
	// succ:  l4021C539
l4021C536:
	a14 = 0x4021C504
	// succ:  l4021C539
l4021C539:
	a13 = 0x4021C508
	a2 = a2 << 22
	a2 = a4 + a2
	a2 = a2 << 30
	a0 = 0x4021C548
	call fn40311400 (retsize: 0;)
	a5 = 0x4021C50C
	a4 = 0
	a0 = 0x4021C550
	call fn40310CC8 (retsize: 0;)
	a0 = 0x4021C553
	call fn40310FFC (retsize: 0;)
	Mem0[a1:word32] = a2
	a3 = 0x4021C510
	a2 = a14
	a0 = 0x4021C55D
	call fn4031076C (retsize: 0;)
	a3 = a2
	a2 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x4021C564
	call fn403046E0 (retsize: 0;)
	a3 = 0x4021C514
	a0 = 0x4021C56A
	call fn40310510 (retsize: 0;)
	a14 = a2
	a0 = 0x4021C56F
	call fn40310894 (retsize: 0;)
	Mem0[a12:byte] = a2
	a2 = a2 & 0x000000FF
	a0 = 0x4021C578
	call fn403113C4 (retsize: 0;)
	a3 = a2
	a2 = a14
	a0 = 0x4021C57F
	call fn403105F8 (retsize: 0;)
	a3 = a13
	a0 = 0x4021C584
	call fn4031076C (retsize: 0;)
	a14 = a2
	a0 = 0x4021C589
	call fn40310894 (retsize: 0;)
	Mem0[a12 + 0x00000001:byte] = a2
	a2 = a2 & 0x000000FF
	a0 = 0x4021C592
	call fn403113C4 (retsize: 0;)
	a3 = a2
	a2 = a14
	a0 = 0x4021C599
	call fn403105F8 (retsize: 0;)
	a3 = a13
	a0 = 0x4021C59E
	call fn4031076C (retsize: 0;)
	a0 = 0x4021C5A1
	call fn40310894 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a12 + 0x00000002:byte] = a2
	a14 = Mem0[a1 + 0x00000010:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_ram_rfpll_set_freq_exit
sdk_ram_rfpll_set_freq_exit:


// sdk_ram_set_channel_freq
// Return size: 0
void sdk_ram_set_channel_freq()
sdk_ram_set_channel_freq_entry:
	// succ:  l4021C5F0
l4021C5F0:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000010:word32] = a12
	Mem0[a1 + 0x00000020:word32] = a4
	Mem0[a1 + 0x00000008:word32] = a6
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000018:word32] = a14
	a13 = a2
	a14 = a3
	a15 = a4
	branch a2 < 1 l4021C619
	// succ:  l4021C60A l4021C619
l4021C60A:
	a0 = 13
	branch a0 < a2 l4021C619
	// succ:  l4021C60F l4021C619
l4021C60F:
	a2 = a2 - 1
	a2 = a2 & 0x000000FF
	Mem0[a1 + 0x00000004:word32] = a2
	goto l4021C61D
	// succ:  l4021C61D
l4021C619:
	a3 = 13
	Mem0[a1 + 0x00000004:word32] = a3
	// succ:  l4021C61D
l4021C61D:
	a4 = 0x4021BEDC
	a12 = 0x4021BCEC
	a3 = 0x4021BDB8
	a2 = Mem0[a3 + 0x000003C8:word32]
	a2 = a2 | a4
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000DC:word32]
	Mem0[a3 + 0x000003C8:word32] = a2
	v12 = a0
	a0 = 0x4021C63D
	call v12 (retsize: 0;)
	a5 = 14
	branch a13 >=u a5 l4021C677
	// succ:  l4021C642 l4021C677
l4021C642:
	a7 = 0x4021C5B4
	a6 = a13 + a13 * 0x00000002
	a6 = a6 + a7
	call a6 (retsize: 4;)
	return
	// succ:  sdk_ram_set_channel_freq_exit
l4021C677:
	a12 = 0x40214948
	branch a15 != 0x00000000 l4021C6D5
	// succ:  l4021C67D l4021C6D5
l4021C67D:
	branch a14 >=u 0x00000002 l4021C6D5
	// succ:  l4021C680 l4021C6D5
l4021C680:
	a0 = 59
	a8 = a14 - 1
	branch a8 != 0x00000000 l4021C741
	// succ:  l4021C687 l4021C741
l4021C687:
	a4 = 0xFFFFFFB7
	a11 = 0xFFFFFF83
	a10 = 0x00000076
	a3 = 94
	a9 = 93
	a6 = 92
	a8 = 91
	a14 = 14
	branch a13 <u a14 l4021C6A0
	// succ:  l4021C69D l4021C6A0
l4021C69D:
	goto l4021C81F
	// succ:  l4021C81F
l4021C6A0:
	a2 = 0x4021C5B8
	a15 = a13 + a13 * 0x00000002
	a15 = a15 + a2
	call a15 (retsize: 4;)
	return
	// succ:  sdk_ram_set_channel_freq_exit
l4021C6D5:
	a4 = a15
	a3 = a14
	a13 = Mem0[a1 + 0x00000004:word32]
	a2 = a12
	a5 = a1
	a0 = 0x4021C6E2
	call fn4031C518 (retsize: 0;)
	v19 = Mem0[a1 + 0x00000002:byte]
	a3 = (uint32) v19
	v20 = Mem0[a1 + 0x00000000:byte]
	a5 = (uint32) v20
	a4 = Mem0[a1 + 0x00000008:word32]
	v21 = Mem0[a1 + 0x00000001:byte]
	a6 = (uint32) v21
	a4 = a4 + a13 * 0x00000004
	a6 = a6 << 24
	a5 = a5 << 16
	a5 = a5 | a6
	a3 = a3 | a5
	Mem0[a4:word32] = a3
	a13 = 0x4021BCEC
	a0 = Mem0[a13 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000E0:word32]
	a2 = a1
	v22 = a0
	a0 = 0x4021C70B
	call v22 (retsize: 0;)
	a0 = Mem0[a13 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000D8:word32]
	v23 = a0
	a0 = 0x4021C713
	call v23 (retsize: 0;)
	v24 = Mem0[a1 + 0x00000030:byte]
	a2 = (uint32) v24
	branch a2 == 0x00000000 l4021C71B
	// succ:  l4021C718 l4021C71B
l4021C718:
	a0 = 0x4021C71B
	call fn4031C4A4 (retsize: 0;)
	// succ:  l4021C71B
l4021C71B:
	a2 = a12
	a5 = 0x4021BEE0
	a4 = 0x4021BDB8
	a3 = Mem0[a4 + 0x000003C8:word32]
	a3 = a3 & a5
	Mem0[a4 + 0x000003C8:word32] = a3
	a12 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000018:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_ram_set_channel_freq_exit
l4021C741:
	a4 = 48
	a10 = 49
	a2 = 50
	a3 = 0x00000066
	a11 = 0xFFFFFF91
	a6 = 0xFFFFFFBB
	a9 = -26
	a8 = 17
	a7 = 14
	branch a13 >=u a7 l4021C78E
	// succ:  l4021C759 l4021C78E
l4021C759:
	a15 = 0x4021C5BC
	a14 = a13 + a13 * 0x00000002
	a14 = a14 + a15
	call a14 (retsize: 4;)
	return
	// succ:  sdk_ram_set_channel_freq_exit
l4021C78E:
	a4 = a2
	a8 = 0xFFFFFFCC
	a11 = a8
	a6 = a8
	a0 = a11
	a10 = a4
	a3 = a6
	a4 = a10
	Mem0[a1 + 0x00000001:byte] = a0
	// succ:  l4021C7AA
l4021C7AA:
	a0 = a3
	Mem0[a1:byte] = a4
	// succ:  l4021C7BB
l4021C7BB:
	Mem0[a1 + 0x00000002:byte] = a0
	goto l4025C6FE
	// succ:  l4025C6FE
l4021C81F:
	a0 = a10
	a2 = 0x00000062
	a3 = 95
	Mem0[a1:byte] = a3
	Mem0[a1 + 0x00000001:byte] = a2
	goto l4025C7BB
	// succ:  l4025C7BB
l4025C6FE:
l4025C7BB:
sdk_ram_set_channel_freq_exit:


// sdk_chip_60_set_channel
// Return size: 0
void sdk_chip_60_set_channel()
sdk_chip_60_set_channel_entry:
	// succ:  l4021C8F8
l4021C8F8:
	a1 = fp
	a8 = 0x4021C30C
	a4 = a5
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a0
	Mem0[a1 + 0x00000014:word32] = a12
	a5 = a6
	a12 = a2
	Mem0[a8 + 0x0000004E:byte] = a2
	a6 = a7
	v11 = Mem0[a1 + 0x00000024:byte]
	a0 = (uint32) v11
	v12 = Mem0[a1 + 0x00000020:uint16]
	a7 = (uint32) v12
	Mem0[a1:word32] = a0
	a0 = 0x4021C918
	call fn4031C5F0 (retsize: 0;)
	a3 = a2
	a9 = 14
	branch a12 >=u a9 l4021C954
	// succ:  l4021C91F l4021C954
l4021C91F:
	a11 = 0x4021C8EC
	a10 = a12 + a12 * 0x00000002
	a10 = a10 + a11
	call a10 (retsize: 4;)
	return
	// succ:  sdk_chip_60_set_channel_exit
l4021C954:
	a0 = 0x0000006A
	a4 = 0x4021C8F4
	a5 = 0x4021C8F0
	a2 = 0x4021BDC0
	a5 = a0 + a5
	a5 = a5 << 15
	a0 = Mem0[a2 + 0x00000114:word32]
	a0 = a0 & 0x00001FFF
	a0 = a0 | a5
	a0 = a0 | a4
	Mem0[a2 + 0x00000114:word32] = a0
	a2 = a12 | a12
	a0 = 0x4021C981
	call sdk_phy_dig_spur_set (retsize: 0;)
	a0 = 0x4021C984
	call sdk_phy_dig_spur_prot (retsize: 0;)
	a12 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_chip_60_set_channel_exit
sdk_chip_60_set_channel_exit:


// sdk_chip_v6_set_chan_offset
// Return size: 0
void sdk_chip_v6_set_chan_offset()
sdk_chip_v6_set_chan_offset_entry:
	// succ:  l4021C9E4
l4021C9E4:
	a1 = fp
	a4 = a2 - 1
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a13
	SAR = 0x00000020 - a4
	Mem0[a1 + 0x00000014:word32] = a12
	a4 = -1
	a12 = a2
	a13 = a3
	a2 = 0x4021C30C
	a3 = 1
	a3 = a3 << SAR
	a3 = a3 ^ a4
	a0 = Mem0[a2 + 0x00000000:word32]
	a4 = a13
	a0 = a0 & a3
	Mem0[a2:word32] = a0
	a3 = a12
	a2 = 0x4021C9DC
	a0 = 0x4021262C
	v10 = a0
	a0 = 0x4021CA1A
	call v10 (retsize: 0;)
	a5 = a13
	a6 = 0x4021C30C
	a2 = a12
	a4 = 0
	a8 = 0x00000064
	a3 = 0x4021C308
	a7 = 1
	v15 = Mem0[a3 + 0x00000001:byte]
	a3 = (uint32) v15
	Mem0[a1 + 0x00000004:word32] = a7
	Mem0[a1:word32] = a8
	a7 = 0x4021C9E0
	a0 = 0x4021CA38
	call fn4031C8F8 (retsize: 0;)
	a2 = a12
	a0 = 0x4021CA3D
	call sdk_chip_v6_set_chan_misc (retsize: 0;)
	a12 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_chip_v6_set_chan_offset_exit
sdk_chip_v6_set_chan_offset_exit:


// sdk_chip_v6_set_chan
// Return size: 0
void sdk_chip_v6_set_chan()
sdk_chip_v6_set_chan_entry:
	// succ:  l4021CA50
l4021CA50:
	a1 = fp
	a4 = 0x4021CA48
	a3 = 0x00000001
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a0
	a0 = 0x4021C30C
	a12 = a2
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a4:byte] = a3
	branch (a0 & 0x00200000) == 0x00000000 l4021CA74
	// succ:  l4021CA6C l4021CA74
l4021CA6C:
	a2 = 4
	a0 = 0x4021CA71
	call sdk_pm_set_sleep_mode (retsize: 0;)
	goto l4021CA7A
	// succ:  l4021CA7A
l4021CA74:
	a0 = 0x4021CA77
	call sdk_stop_dig_rx (retsize: 0;)
	Mem0[a1 + 0x00000010:word32] = a2
	// succ:  l4021CA7A
l4021CA7A:
	a6 = 0x4021C30C
	a7 = 0x4021C9E0
	a4 = 0x00000064
	a2 = 1
	a5 = 0x4021CA4C
	a3 = 0x4021C308
	v11 = Mem0[a5 + 0x00000000:int16]
	a5 = (int32) v11
	v12 = Mem0[a3 + 0x00000001:byte]
	a3 = (uint32) v12
	Mem0[a1 + 0x00000004:word32] = a2
	Mem0[a1:word32] = a4
	a2 = a12
	a4 = 0
	a0 = 0x4021CA9C
	call fn4031C8F8 (retsize: 0;)
	a2 = a12
	a0 = 0x4021CAA1
	call sdk_chip_v6_set_chan_misc (retsize: 0;)
	a6 = 0x4021C30C
	a6 = Mem0[a6 + 0x00000000:word32]
	branch (a6 & 0x00200000) == 0x00000000 l4021CAB3
	// succ:  l4021CAA9 l4021CAB3
l4021CAA9:
	a2 = 4
	a3 = 0
	a0 = 0x4021CAB0
	call sdk_pm_wakeup_init (retsize: 0;)
	goto l4021CAB9
	// succ:  l4021CAB9
l4021CAB3:
	a2 = Mem0[a1 + 0x00000010:word32]
	a0 = 0x4021CAB9
	call sdk_start_dig_rx (retsize: 0;)
	// succ:  l4021CAB9
l4021CAB9:
	a12 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_chip_v6_set_chan_exit
sdk_chip_v6_set_chan_exit:


// sdk_chip_v6_set_chan_wakeup
// Return size: 0
void sdk_chip_v6_set_chan_wakeup()
sdk_chip_v6_set_chan_wakeup_entry:
	// succ:  l4021CAC8
l4021CAC8:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a0
	Mem0[a1 + 0x0000001C:word32] = a12
	a8 = 0x00000400
	a7 = 0x4021C0CC
	a12 = a2 | a2
	a6 = Mem0[a7 + 0x00000340:word32]
	a6 = a6 | a8
	a4 = 0
	a0 = 0
	a2 = 0x00000064
	a3 = 0x4021C308
	Mem0[a7 + 0x00000340:word32] = a6
	a5 = 0x4021CA4C
	a6 = 0x4021C30C
	a7 = 0x4021C9E0
	v12 = Mem0[a5 + 0x00000000:int16]
	a5 = (int32) v12
	v13 = Mem0[a3 + 0x00000001:byte]
	a3 = (uint32) v13
	Mem0[a1:word32] = a2
	Mem0[a1 + 0x00000004:word32] = a0
	a2 = a12
	a0 = 0x4021CB0B
	call fn4031C8F8 (retsize: 0;)
	a3 = 0x4021CAC4
	a2 = a12 + a12 * 0x00000002
	a2 = a2 + a3
	a0 = 0x4021CB16
	call fn4031C3B8 (retsize: 0;)
	a2 = a12 & 0x000000FF
	a3 = a1 + 16
	a0 = 0x4021CB1F
	call sdk_tx_atten_set_interp (retsize: 0;)
	a12 = Mem0[a1 + 0x0000001C:word32]
	a0 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_chip_v6_set_chan_wakeup_exit
sdk_chip_v6_set_chan_wakeup_exit:


// sdk_chip_v6_rf_init
// Return size: 0
void sdk_chip_v6_rf_init()
sdk_chip_v6_rf_init_entry:
	// succ:  l4021CB48
l4021CB48:
	a1 = fp
	a6 = 0x4021CB28
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1:word32] = a2
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a13
	a5 = 0x4021BDB8
	a13 = 0x402125CC
	a12 = 0x4021BCEC
	a4 = Mem0[a5 + 0x000003E8:word32]
	a4 = a4 & a6
	Mem0[a5 + 0x000003E8:word32] = a4
	a3 = 0x4021CB2C
	a2 = Mem0[a13 + 0x00000110:word32]
	a2 = a2 | a3
	a3 = 2
	a4 = 0
	a5 = 39
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a13 + 0x00000110:word32] = a2
	a0 = Mem0[a0 + 0x00000098:word32]
	a2 = 0x0000006A
	v11 = a0
	a0 = 0x4021CB94
	call v11 (retsize: 0;)
	a7 = 0x4021CB30
	a8 = 0x4021319C
	a6 = Mem0[a13 + 0x00000110:word32]
	a6 = a6 | a7
	Mem0[a13 + 0x00000110:word32] = a6
	a5 = 0x4021CB34
	a4 = 0x4021CB38
	a11 = 0x4021BDB8
	a3 = Mem0[a11 + 0x000003A0:word32]
	a3 = a3 & a5
	a3 = a3 | a4
	Mem0[a11 + 0x000003A0:word32] = a3
	a2 = 0x4021CB3C
	a0 = 0x4021CB40
	a10 = Mem0[a11 + 0x00000398:word32]
	a10 = a10 & a2
	a10 = a10 | a0
	Mem0[a11 + 0x00000398:word32] = a10
	a9 = -3
	a7 = Mem0[a8 + 0x00000270:word32]
	a7 = a7 & a9
	Mem0[a8 + 0x00000270:word32] = a7
	a2 = 2
	a0 = 0x4021CBF2
	call fn40303F28 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000A0:word32]
	v17 = a0
	a0 = 0x4021CBFA
	call v17 (retsize: 0;)
	a2 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0x00000081
	v18 = a0
	a0 = 0x4021CC09
	call v18 (retsize: 0;)
	a3 = 0x4021CB44
	a2 = Mem0[a13 + 0x00000110:word32]
	a2 = a2 | a3
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C8:word32]
	Mem0[a13 + 0x00000110:word32] = a2
	v19 = a0
	a0 = 0x4021CC23
	call v19 (retsize: 0;)
	a2 = 0x0000006A
	a3 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 0
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 36
	v20 = a0
	a0 = 0x4021CC34
	call v20 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C4:word32]
	v21 = a0
	a0 = 0x4021CC3C
	call v21 (retsize: 0;)
	a2 = 0x0000006A
	a3 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 0
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 37
	v22 = a0
	a0 = 0x4021CC4D
	call v22 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000BC:word32]
	v23 = a0
	a0 = 0x4021CC55
	call v23 (retsize: 0;)
	a4 = 0xFFFFF9FF
	a3 = 0x4021C0CC
	a2 = Mem0[a3 + 0x00000340:word32]
	a2 = a2 & a4
	a4 = 0
	a5 = 4
	a6 = 0
	a7 = 8
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a3 + 0x00000340:word32] = a2
	a2 = 0x00000062
	a0 = Mem0[a0 + 0x0000009C:word32]
	a3 = 1
	v24 = a0
	a0 = 0x4021CC7F
	call v24 (retsize: 0;)
	a0 = 0x4021C30C
	a5 = Mem0[a0 + 0x00000000:word32]
	branch (a5 & 0x08000000) != 0x00000000 l4021CC8F
	// succ:  l4021CC87 l4021CC8F
l4021CC87:
	a2 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x4021CC8C
	call fn4031CA50 (retsize: 0;)
	goto l4021CC9B
	// succ:  l4021CC9B
l4021CC8F:
	v25 = Mem0[a0 + 0x0000004E:byte]
	a2 = (uint32) v25
	a2 = a2 << 8
	a2 = a2 >> 24
	a0 = 0x4021CC9B
	call fn4031CAC8 (retsize: 0;)
	// succ:  l4021CC9B
l4021CC9B:
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000008C:word32]
	v26 = a0
	a0 = 0x4021CCA3
	call v26 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 1
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 72
	v27 = a0
	a0 = 0x4021CCB4
	call v27 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000088:word32]
	v28 = a0
	a0 = 0x4021CCBC
	call v28 (retsize: 0;)
	a2 = 0x0000006C
	a3 = 2
	a4 = 0
	a5 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v29 = a0
	a0 = 0x4021CCD1
	call v29 (retsize: 0;)
	a2 = 0x0000006C
	a3 = 2
	a4 = 0
	a5 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 2
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v30 = a0
	a0 = 0x4021CCE6
	call v30 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000004C:word32]
	v31 = a0
	a0 = 0x4021CCEE
	call v31 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 26
	a5 = 4
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 4
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v32 = a0
	a0 = 0x4021CD03
	call v32 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 26
	a5 = 5
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 5
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v33 = a0
	a0 = 0x4021CD18
	call v33 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 26
	a5 = 4
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 4
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v34 = a0
	a0 = 0x4021CD2D
	call v34 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 26
	a5 = 5
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 5
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v35 = a0
	a0 = 0x4021CD42
	call v35 (retsize: 0;)
	a2 = 0
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_chip_v6_rf_init_exit
sdk_chip_v6_rf_init_exit:


// sdk_low_power_set
// Return size: 0
void sdk_low_power_set()
sdk_low_power_set_entry:
	// succ:  l4021CD54
l4021CD54:
	a1 = fp
	a6 = 0x4021C30C
	a11 = 24
	v6 = Mem0[a6 + 0x00000078:byte]
	a9 = (uint32) v6
	a7 = 0x4021BDB8
	a9 = a9 << 8
	a9 = a9 >> 24
	a9 = a4 - a9
	branch a2 == 0x00000000 l4021CD9E
	// succ:  l4021CD6A l4021CD9E
l4021CD6A:
	a2 = 0
	a10 = a3 << 19
	a3 = 0x4021CD50
	// succ:  l4021CD72
l4021CD72:
	a6 = a7 + a2 * 0x00000004
	a8 = Mem0[a6 + 0x00000304:word32]
	a5 = a8 & a3
	a8 = a8 - a9
	a5 = a10 | a5
	a8 = a8 & 0x000000FF
	a5 = a5 | a8
	Mem0[a6 + 0x00000304:word32] = a5
	a2 = a2 + 1
	a2 = a2 & 0x000000FF
	branch a2 != a11 l4021CD72
	// succ:  l4021CD98 l4021CD72
l4021CD98:
	a9 = 0x4021C30C
	Mem0[a9 + 0x00000078:byte] = a4
	// succ:  l4021CD9E
l4021CD9E:
	return
	// succ:  sdk_low_power_set_exit
sdk_low_power_set_exit:


// sdk_test_tout
// Return size: 0
void sdk_test_tout()
sdk_test_tout_entry:
	// succ:  l4021CDB4
l4021CDB4:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000028:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x00000020:word32] = a12
	a15 = 0x4021BDB8
	a12 = 0x4021287C
	a0 = 0x4021CDA0
	a14 = 0x402125CC
	a13 = Mem0[a14 + 0x00000110:word32]
	Mem0[a1 + 0x00000030:word32] = a2
	a3 = a13 & a0
	Mem0[a1 + 0x00000018:word32] = a3
	branch (~a13 & a0) == 0x00000000 l4021CE47
	// succ:  l4021CDDF l4021CE47
l4021CDDF:
	a5 = Mem0[a12 + 0x00000218:word32]
	Mem0[a1 + 0x00000010:word32] = a5
	a4 = 0x4021CDA4
	a3 = Mem0[a12 + 0x00000218:word32]
	a3 = a3 | a4
	Mem0[a12 + 0x00000218:word32] = a3
	a2 = 0x4021CDA0
	a2 = a13 | a2
	a3 = 1
	a4 = 3
	a5 = 7
	a6 = 4
	a0 = 0x4021BCEC
	a7 = 15
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a14 + 0x00000110:word32] = a2
	a0 = Mem0[a0 + 0x0000009C:word32]
	a2 = 0x00000062
	v14 = a0
	a0 = 0x4021CE1D
	call v14 (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000004C:word32]
	v15 = a0
	a0 = 0x4021CE28
	call v15 (retsize: 0;)
	a2 = 2
	a0 = 0x4021CE2D
	call fn40303F28 (retsize: 0;)
	a3 = 0x4021CDA8
	a2 = Mem0[a15 + 0x000003E8:word32]
	a2 = a2 | a3
	Mem0[a15 + 0x000003E8:word32] = a2
	a2 = 2
	a0 = 0x4021CE44
	call fn40303F28 (retsize: 0;)
	goto l4021CE4D
	// succ:  l4021CE4D
l4021CE47:
	a2 = 0x00000004
	a0 = 0x4021CE4D
	call sdk_pm_set_sleep_mode (retsize: 0;)
	// succ:  l4021CE4D
l4021CE4D:
	a2 = 0x0000006C
	a3 = 0x00000002
	a4 = 0x00000000
	a0 = 0x4021BCEC
	a5 = 5
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = 5
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v16 = a0
	a0 = 0x4021CE67
	call v16 (retsize: 0;)
	a5 = 0x4021A09C
	a2 = 7
	a12 = 0x4021C0CC
	a4 = Mem0[a12 + 0x0000035C:word32]
	a4 = a4 | a5
	Mem0[a12 + 0x0000035C:word32] = a4
	a3 = Mem0[a12 + 0x00000350:word32]
	a3 = a3 >>u 0x00000018 & 0x000000FF
	branch (a2 & a3) == 0x00000000 l4021CE96
	// succ:  l4021CE8A l4021CE96
l4021CE8A:
	a6 = Mem0[a12 + 0x00000350:word32]
	a6 = a6 >>u 0x00000018 & 0x00000007
	branch a6 != 0x00000000 l4021CE8A
	// succ:  l4021CE96 l4021CE8A
l4021CE96:
	a9 = 0xFFFFFFFD
	a8 = Mem0[a12 + 0x00000350:word32]
	a8 = a8 & a9
	Mem0[a12 + 0x00000350:word32] = a8
	a2 = 0x00000002
	a7 = Mem0[a12 + 0x00000350:word32]
	a7 = a7 | a2
	Mem0[a12 + 0x00000350:word32] = a7
	a0 = 0x4021CEBD
	call fn40303F28 (retsize: 0;)
	a11 = Mem0[a12 + 0x00000350:word32]
	a10 = 0x00000007
	a11 = a11 >>u 0x00000018 & 0x000000FF
	branch (a10 & a11) == 0x00000000 l4021CED8
	// succ:  l4021CECC l4021CED8
l4021CECC:
	a0 = Mem0[a12 + 0x00000350:word32]
	a0 = a0 >>u 0x00000018 & 0x00000007
	branch a0 != 0x00000000 l4021CECC
	// succ:  l4021CED8 l4021CECC
l4021CED8:
	a2 = a1 | a1
	Mem0[a1 + 0x00000014:word32] = a13
	a0 = 0x4021CEE1
	call sdk_read_sar_dout (retsize: 0;)
	a15 = Mem0[a1 + 0x00000030:word32]
	a13 = 0
	a14 = 0
	a0 = a1
	// succ:  l4021CEEA
l4021CEEA:
	a3 = a0 + a13 * 0x00000002
	v21 = Mem0[a3 + 0x00000000:uint16]
	a3 = (uint32) v21
	a14 = a3 + a14
	a14 = a14 & 0x0000FFFF
	branch a15 == 0x00000000 l4021CF02
	// succ:  l4021CEF7 l4021CF02
l4021CEF7:
	a2 = 0x4021CDAC
	a0 = 0x4021262C
	v22 = a0
	a0 = 0x4021CF00
	call v22 (retsize: 0;)
	a0 = a1
	// succ:  l4021CF02
l4021CF02:
	a13 = a13 + 1
	a13 = a13 & 0x000000FF
	branch a13 != 8 l4021CEEA
	// succ:  l4021CF0A l4021CEEA
l4021CF0A:
	a2 = 0x0000006C
	a3 = 2
	a4 = 0
	a13 = 0x4021BCEC
	a5 = 5
	a0 = Mem0[a13 + 0x00000000:word32]
	a6 = 5
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v23 = a0
	a0 = 0x4021CF22
	call v23 (retsize: 0;)
	a0 = 0x4021CDA0
	a2 = Mem0[a1 + 0x00000018:word32]
	a4 = Mem0[a12 + 0x00000350:word32]
	a3 = 7
	a4 = a4 >>u 0x00000018 & 0x000000FF
	branch (a3 & a4) == 0x00000000 l4021CF41
	// succ:  l4021CF35 l4021CF41
l4021CF35:
	a5 = Mem0[a12 + 0x00000350:word32]
	a5 = a5 >>u 0x00000018 & 0x00000007
	branch a5 != 0x00000000 l4021CF35
	// succ:  l4021CF41 l4021CF35
l4021CF41:
	a11 = 0x40203F84
	a10 = Mem0[a12 + 0x0000035C:word32]
	a10 = a10 & a11
	Mem0[a12 + 0x0000035C:word32] = a10
	a9 = -2
	a8 = Mem0[a12 + 0x00000360:word32]
	a8 = a8 & a9
	Mem0[a12 + 0x00000360:word32] = a8
	a7 = 1
	a6 = Mem0[a12 + 0x00000360:word32]
	a6 = a6 | a7
	Mem0[a12 + 0x00000360:word32] = a6
	branch a2 == a0 l4021CFC1
	// succ:  l4021CF78 l4021CFC1
l4021CF78:
	a12 = Mem0[a1 + 0x00000010:word32]
	a5 = 0x4021CDB0
	a4 = 0x4021C17C
	a3 = 0x4021BDB8
	a2 = Mem0[a3 + 0x000003E8:word32]
	a2 = a2 & a5
	a2 = a2 | a4
	a4 = 3
	a5 = 7
	a6 = 4
	a7 = 0
	a0 = Mem0[a13 + 0x00000000:word32]
	Mem0[a3 + 0x000003E8:word32] = a2
	a2 = 0x00000062
	a0 = Mem0[a0 + 0x0000009C:word32]
	a3 = 1
	v24 = a0
	a0 = 0x4021CFAA
	call v24 (retsize: 0;)
	a8 = 0x402125CC
	a7 = Mem0[a1 + 0x00000014:word32]
	Mem0[a8 + 0x00000110:word32] = a7
	a6 = 0x4021287C
	Mem0[a6 + 0x00000218:word32] = a12
	goto l4021CFCA
	// succ:  l4021CFCA
l4021CFC1:
	a2 = 0x00000004
	a3 = 0x00000000
	a0 = 0x4021CFCA
	call sdk_pm_wakeup_init (retsize: 0;)
	// succ:  l4021CFCA
l4021CFCA:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000020:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a2 = a14 + 8
	a15 = Mem0[a1 + 0x0000002C:word32]
	a14 = Mem0[a1 + 0x00000028:word32]
	a2 = a2 >>u 0x00000004 & 0x0000FFFF
	a1 = a1 + 64
	return
	// succ:  sdk_test_tout_exit
sdk_test_tout_exit:


// sdk_check_data_flag
// Return size: 0
void sdk_check_data_flag()
sdk_check_data_flag_entry:
	// succ:  l4021CFE0
l4021CFE0:
	a1 = fp
	a9 = a2
	a2 = a5
	branch a9 < a3 l4021CFEA
	// succ:  l4021CFE7 l4021CFEA
l4021CFE7:
	branch a4 >= a9 l4021CFF5
	// succ:  l4021CFEA l4021CFF5
l4021CFEA:
	SAR = 0x00000020 - a6
	a3 = 1
	a3 = a3 << SAR
	a2 = a2 | a3
	// succ:  l4021CFF5
l4021CFF5:
	return
	// succ:  sdk_check_data_flag_exit
sdk_check_data_flag_exit:


// sdk_get_check_flag
// Return size: 0
void sdk_get_check_flag()
sdk_get_check_flag_entry:
	// succ:  l4021D000
l4021D000:
	a1 = fp
	a5 = 0
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	a13 = 0x4021C30C
	Mem0[a1 + 0x0000000C:word32] = a14
	a12 = a13
	a14 = a13 + 8
	// succ:  l4021D016
l4021D016:
	a3 = 0
	a4 = 12
	a6 = 0
	v13 = Mem0[a12 + 0x0000000C:int16]
	a2 = (int32) v13
	a0 = 0x4021D022
	call fn4031CFE0 (retsize: 0;)
	a5 = a2
	a12 = a12 + 2
	branch a12 != a14 l4021D016
	// succ:  l4021D029 l4021D016
l4021D029:
	a13 = 1
	a0 = 0x4021CFF8
	a7 = 0x4021C30C
	a6 = 0x000003E4
	v15 = Mem0[a7 + 0x00000076:uint16]
	a15 = (uint32) v15
	a12 = a7 + 6
	// succ:  l4021D039
l4021D039:
	branch a15 == a6 l4021D03F
	// succ:  l4021D03C l4021D03F
l4021D03C:
	branch a15 != a0 l4021D05C
	// succ:  l4021D03F l4021D05C
l4021D03F:
	a3 = 12
	a4 = 60
	v16 = Mem0[a12 + 0x0000004F:byte]
	a2 = (uint32) v16
	a6 = 1
	a2 = a2 << 8
	a2 = a2 >> 24
	a0 = 0x4021D051
	call fn4031CFE0 (retsize: 0;)
	a5 = a2
	a0 = 0x4021CFF8
	a6 = 0x000003E4
	a7 = 0x4021C30C
	// succ:  l4021D05C
l4021D05C:
	a12 = a12 + 6
	a13 = a13 + 1
	branch a13 != 5 l4021D039
	// succ:  l4021D063 l4021D039
l4021D063:
	v17 = Mem0[a7 + 0x00000014:uint16]
	a0 = (uint32) v17
	a4 = a0 >>u 0x00000008 & 0x000000FF
	a2 = a4
	a0 = a0 & 0x000000FF
	a13 = a0
	branch a4 < 16 l4021D076
	// succ:  l4021D073 l4021D076
l4021D073:
	a2 = a4 - 32
	// succ:  l4021D076
l4021D076:
	branch a0 < 32 l4021D07C
	// succ:  l4021D079 l4021D07C
l4021D079:
	a13 = a0 - 64
	// succ:  l4021D07C
l4021D07C:
	a3 = -13
	a4 = 13
	a6 = 2
	a0 = 0x4021D085
	call fn4031CFE0 (retsize: 0;)
	a3 = -27
	a4 = 27
	a5 = a2
	a6 = 2
	a2 = a13
	a0 = 0x4021D092
	call fn4031CFE0 (retsize: 0;)
	a15 = 0x4021C30C
	a5 = a2
	a12 = a15
	a3 = a15 + 10
	Mem0[a1 + 0x00000014:word32] = a3
	// succ:  l4021D09D
l4021D09D:
	v18 = Mem0[a12 + 0x00000016:uint16]
	a0 = (uint32) v18
	a4 = a0 >>u 0x00000006 & 0x0000001F
	a2 = a4
	a0 = a0 & 0x0000003F
	a13 = a0
	branch a4 < 16 l4021D0B0
	// succ:  l4021D0AD l4021D0B0
l4021D0AD:
	a2 = a4 - 32
	// succ:  l4021D0B0
l4021D0B0:
	branch a0 < 32 l4021D0B6
	// succ:  l4021D0B3 l4021D0B6
l4021D0B3:
	a13 = a0 - 64
	// succ:  l4021D0B6
l4021D0B6:
	a3 = -13
	a4 = 13
	a6 = 3
	a0 = 0x4021D0BF
	call fn4031CFE0 (retsize: 0;)
	a3 = -27
	a4 = 27
	a5 = a2
	a6 = 3
	a2 = a13
	a0 = 0x4021D0CC
	call fn4031CFE0 (retsize: 0;)
	a5 = a2
	a4 = Mem0[a1 + 0x00000014:word32]
	a12 = a12 + 2
	branch a12 != a4 l4021D09D
	// succ:  l4021D0D5 l4021D09D
l4021D0D5:
	a12 = a15
	// succ:  l4021D0D7
l4021D0D7:
	a3 = 3
	a4 = 0x0000007C
	v19 = Mem0[a12 + 0x00000004:uint16]
	a2 = (uint32) v19
	a6 = 4
	a13 = a2 >>u 0x00000008 & 0x000000FF
	a2 = a2 & 0x000000FF
	a0 = 0x4021D0EA
	call fn4031CFE0 (retsize: 0;)
	a3 = 3
	a4 = 0x0000007C
	a5 = a2
	a6 = 4
	a2 = a13
	a0 = 0x4021D0F8
	call fn4031CFE0 (retsize: 0;)
	a5 = a2
	a12 = a12 + 2
	branch a12 != a14 l4021D0D7
	// succ:  l4021D0FF l4021D0D7
l4021D0FF:
	a12 = a15
	a14 = 0x4021CFFC
	// succ:  l4021D104
l4021D104:
	a3 = 0x00000080
	a4 = 0x00000180
	a2 = Mem0[a12 + 0x0000007C:word32]
	a6 = 5
	a13 = a2 & 0x000001FF
	a2 = a2 >>u 0x00000009 & 0x000001FF
	a0 = 0x4021D118
	call fn4031CFE0 (retsize: 0;)
	a3 = 0x00000080
	a4 = 0x00000180
	a5 = a2
	a6 = 5
	a2 = a13
	a0 = 0x4021D127
	call fn4031CFE0 (retsize: 0;)
	a5 = a2
	a12 = a12 + 4
	branch a12 != a14 l4021D104
	// succ:  l4021D12E l4021D104
l4021D12E:
	a2 = a2 & 0x0000FFFF
	a0 = Mem0[a1 + 0x00000000:word32]
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	v20 = Mem0[a15 + 0x00000079:byte]
	a3 = (uint32) v20
	a15 = Mem0[a1 + 0x00000010:word32]
	a3 = a3 << 8
	a3 = a3 >> 24
	a3 = a3 >> 3
	a1 = a1 + 32
	a3 = a3 << 16
	a2 = a2 | a3
	return
	// succ:  sdk_get_check_flag_exit
sdk_get_check_flag_exit:


// sdk_ram_tx_mac_enable
// Return size: 0
void sdk_ram_tx_mac_enable()
sdk_ram_tx_mac_enable_entry:
	// succ:  l4021D154
l4021D154:
	a1 = fp
	return
	// succ:  sdk_ram_tx_mac_enable_exit
sdk_ram_tx_mac_enable_exit:


// sdk_rtc_mem_backup
// Return size: 0
void sdk_rtc_mem_backup()
sdk_rtc_mem_backup_entry:
	// succ:  l4021D158
l4021D158:
	a1 = fp
	a9 = a3 - a2
	a8 = a9 + 3
	branch a9 < 0x00000000 l4021D160
	// succ:  l4021D15D_1 l4021D160
l4021D15D_1:
	a8 = a9
	// succ:  l4021D160
l4021D160:
	a8 = a8 >> 2
	a8 = a8 + 1
	branch a8 == 0x00000000 l4021D181
	// succ:  l4021D167 l4021D181
l4021D167:
	a3 = 0x40212EE8
	a7 = a2 + a8 * 0x00000004
	a3 = a4 + a3
	// succ:  l4021D16F
l4021D16F:
	a4 = Mem0[a2 + 0x00000000:word32]
	Mem0[a3 + 0x00000200:word32] = a4
	a2 = a2 + 4
	a3 = a3 + 4
	branch a2 != a7 l4021D16F
	// succ:  l4021D181 l4021D16F
l4021D181:
	a2 = a8 << 30
	return
	// succ:  sdk_rtc_mem_backup_exit
sdk_rtc_mem_backup_exit:


// sdk_rtc_mem_recovery
// Return size: 0
void sdk_rtc_mem_recovery()
sdk_rtc_mem_recovery_entry:
	// succ:  l4021D188
l4021D188:
	a1 = fp
	a8 = a3 - a2
	a7 = a8 + 3
	branch a8 < 0x00000000 l4021D190
	// succ:  l4021D18D_1 l4021D190
l4021D18D_1:
	a7 = a8
	// succ:  l4021D190
l4021D190:
	a7 = a7 >> 2
	a7 = a7 + 1
	branch a7 == 0x00000000 l4021D1B3
	// succ:  l4021D197 l4021D1B3
l4021D197:
	a10 = 0x40212EE8
	a9 = a4 + a7 * 0x00000004
	a3 = a4 + a10
	a4 = a9 + a10
	// succ:  l4021D1A1
l4021D1A1:
	a11 = Mem0[a3 + 0x00000200:word32]
	Mem0[a2:word32] = a11
	a3 = a3 + 4
	a2 = a2 + 4
	branch a3 != a4 l4021D1A1
	// succ:  l4021D1B3 l4021D1A1
l4021D1B3:
	a2 = a7 << 30
	return
	// succ:  sdk_rtc_mem_recovery_exit
sdk_rtc_mem_recovery_exit:


// sdk_set_cal_rxdc
// Return size: 0
void sdk_set_cal_rxdc()
sdk_set_cal_rxdc_entry:
	// succ:  l4021D1B8
l4021D1B8:
	a1 = fp
	a7 = a2 >>u 0x00000003 & 0x00000001
	a6 = a2 >>u 0x00000001 & 0x00000001
	a5 = a2 & 0x00000001
	a1 = a1 - 32
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a12
	a5 = a5 + a6
	a12 = 0x4021BCEC
	a6 = a2 >>u 0x00000002 & 0x00000001
	a6 = a6 + a7
	a0 = a2 >>u 0x00000005 & 0x00000001
	a7 = a2 >>u 0x00000006 & 0x00000001
	a0 = a0 + a7
	a7 = a2 >>u 0x00000004 & 0x00000001
	a0 = a0 + a7
	a0 = a0 + a6
	a0 = a0 + a5
	a5 = a3 >>u 0x00000003 & 0x00000007
	a2 = a0 & 0x000000FF
	a0 = 4
	branch a2 >=u 0x00000005 l4021D1F0
	// succ:  l4021D1EE l4021D1F0
l4021D1EE:
	a0 = a2
	// succ:  l4021D1F0
l4021D1F0:
	a2 = a0 + a0 * 0x00000002
	a0 = 29
	a2 = a5 + a2 * 0x00000002
	a2 = a2 & 0x000000FF
	branch a0 <u a2 l4021D200
	// succ:  l4021D1FE l4021D200
l4021D1FE:
	a0 = a2
	// succ:  l4021D200
l4021D200:
	a2 = 4
	a5 = a0 & 0x000000FF
	a3 = 1
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = a4 + a5 * 0x00000008
	a6 = Mem0[a4 + 0x00000004:word32]
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = Mem0[a4 + 0x00000000:word32]
	a7 = a6 >>u 0x00000009 & 0x000001FF
	Mem0[a1 + 0x00000004:word32] = a7
	a5 = a4 & 0x000001FF
	a6 = a6 & 0x000001FF
	Mem0[a1 + 0x00000008:word32] = a6
	Mem0[a1:word32] = a5
	a4 = a4 >>u 0x00000009 & 0x000001FF
	v11 = a0
	a0 = 0x4021D228
	call v11 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 5
	a0 = Mem0[a0 + 0x000000AC:word32]
	a3 = 1
	v12 = a0
	a0 = 0x4021D236
	call v12 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000000:word32]
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 4
	a0 = Mem0[a0 + 0x000000AC:word32]
	a3 = 2
	v13 = a0
	a0 = 0x4021D244
	call v13 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 5
	a0 = Mem0[a0 + 0x000000AC:word32]
	a3 = 2
	v14 = a0
	a0 = 0x4021D252
	call v14 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_set_cal_rxdc_exit
sdk_set_cal_rxdc_exit:


// sdk_set_rx_gain_cal_iq
// Return size: 0
void sdk_set_rx_gain_cal_iq()
sdk_set_rx_gain_cal_iq_entry:
	// succ:  l4021D270
l4021D270:
	a1 = fp
	a10 = a5
	a9 = a6
	a1 = a1 - 80
	Mem0[a1 + 0x00000034:word32] = a2
	Mem0[a1 + 0x00000014:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a15
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x0000003C:word32] = a3
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a13
	Mem0[a1 + 0x00000028:word32] = a4
	a13 = 0x4021BCEC
	a4 = -17
	a14 = a7
	a3 = 0x4021BDB8
	a2 = Mem0[a3 + 0x00000390:word32]
	a2 = a2 & a4
	a4 = 18
	a5 = 7
	a6 = 0
	a7 = 0
	Mem0[a1 + 0x0000002C:word32] = a10
	Mem0[a1 + 0x00000038:word32] = a9
	a0 = Mem0[a13 + 0x00000000:word32]
	Mem0[a3 + 0x00000390:word32] = a2
	a2 = 0x00000077
	a0 = Mem0[a0 + 0x0000009C:word32]
	a3 = 0
	v16 = a0
	a0 = 0x4021D2B9
	call v16 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 9
	a5 = 7
	a0 = Mem0[a13 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v17 = a0
	a0 = 0x4021D2CE
	call v17 (retsize: 0;)
	a3 = 1
	a2 = 5
	a15 = 0
	a4 = Mem0[a1 + 0x00000034:word32]
	Mem0[a1 + 0x0000004C:word32] = a15
	branch a4 == 0x00000000 l4021D2DC
	// succ:  l4021D2D9_1 l4021D2DC
l4021D2D9_1:
	a2 = a3
	// succ:  l4021D2DC
l4021D2DC:
	Mem0[a1 + 0x00000030:word32] = a2
	a2 = Mem0[a1 + 0x00000030:word32]
	a0 = Mem0[a1 + 0x0000004C:word32]
	branch a0 < a2 l4021D2E9
	// succ:  l4021D2E6 l4021D2E9
l4021D2E6:
	goto l4021D589
	// succ:  l4021D589
l4021D2E9:
	branch a0 == 0x00000000 l4021D574
	// succ:  l4021D2EC l4021D574
l4021D2EC:
	a4 = a0 - 1
	branch a4 == 0x00000000 l4021D579
	// succ:  l4021D2F1 l4021D579
l4021D2F1:
	a5 = a0 - 2
	branch a5 == 0x00000000 l4021D57E
	// succ:  l4021D2F7 l4021D57E
l4021D2F7:
	a6 = a0 - 3
	branch a6 == 0x00000000 l4021D5AC
	// succ:  l4021D2FD l4021D5AC
l4021D2FD:
	a7 = a0 - 4
	branch a7 == 0x00000000 l4021D5B7
	// succ:  l4021D303 l4021D5B7
l4021D303:
	a12 = 0
	a8 = 0
	Mem0[a1 + 0x00000040:word32] = a8
	a3 = Mem0[a1 + 0x0000004C:word32]
	a2 = 8
	a0 = Mem0[a13 + 0x00000000:word32]
	a15 = 0
	a0 = Mem0[a0 + 0x000000D0:word32]
	branch a3 != 0x00000000 l4021D319
	// succ:  l4021D316_1 l4021D319
l4021D316_1:
	a15 = a2
	// succ:  l4021D319
l4021D319:
	a2 = a15
	v19 = a0
	a0 = 0x4021D31E
	call v19 (retsize: 0;)
	a4 = Mem0[a1 + 0x0000004C:word32]
	branch a4 >=u 0x00000002 l4021D338
	// succ:  l4021D324 l4021D338
l4021D324:
	a2 = 0
	a3 = a15
	a4 = 0x000001F4
	a0 = Mem0[a13 + 0x00000000:word32]
	a5 = 12
	a0 = Mem0[a0 + 0x000000E8:word32]
	a6 = a1 + 16
	v20 = a0
	a0 = 0x4021D338
	call v20 (retsize: 0;)
	// succ:  l4021D338
l4021D338:
	a2 = 0
	a13 = 0x4021BCEC
	a3 = 0x00000104
	a0 = Mem0[a13 + 0x00000000:word32]
	a4 = a12
	a0 = Mem0[a0 + 0x00000054:word32]
	a5 = 22
	v21 = a0
	a0 = 0x4021D34C
	call v21 (retsize: 0;)
	a2 = a12
	a3 = 22
	a4 = Mem0[a1 + 0x0000002C:word32]
	a0 = 0x4021D355
	call fn4031D1B8 (retsize: 0;)
	branch a14 == 0x00000000 l4021D386
	// succ:  l4021D357 l4021D386
l4021D357:
	a7 = a12
	a6 = a15
	a2 = 0x4021D25C
	a3 = 0
	a10 = 22
	Mem0[a1:word32] = a10
	v22 = Mem0[a1 + 0x00000010:byte]
	a9 = (uint32) v22
	a4 = 0x00000104
	a9 = a9 << 8
	a9 = a9 >> 24
	Mem0[a1 + 0x00000004:word32] = a9
	v23 = Mem0[a1 + 0x00000011:byte]
	a8 = (uint32) v23
	a5 = Mem0[a1 + 0x00000040:word32]
	a8 = a8 << 8
	a8 = a8 >> 24
	Mem0[a1 + 0x00000008:word32] = a8
	a0 = 0x4021262C
	v24 = a0
	a0 = 0x4021D386
	call v24 (retsize: 0;)
	// succ:  l4021D386
l4021D386:
	a13 = 0x4021BCEC
	a0 = Mem0[a13 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000040:word32]
	a2 = 1
	v25 = a0
	a0 = 0x4021D393
	call v25 (retsize: 0;)
	a15 = 0
	// succ:  l4021D395
l4021D395:
	a2 = 1
	a3 = Mem0[a1 + 0x0000003C:word32]
	a4 = Mem0[a1 + 0x00000040:word32]
	a5 = 0
	a6 = 0
	Mem0[a1:word32] = a6
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1 + 0x00000008:word32] = a6
	a0 = Mem0[a13 + 0x00000000:word32]
	a7 = 0
	a0 = Mem0[a0 + 0x00000068:word32]
	a6 = 0
	v26 = a0
	a0 = 0x4021D3B2
	call v26 (retsize: 0;)
	a0 = Mem0[a13 + 0x00000000:word32]
	a2 = 1
	a0 = Mem0[a0 + 0x00000034:word32]
	a3 = 0x00000400
	v27 = a0
	a0 = 0x4021D3BE
	call v27 (retsize: 0;)
	a0 = Mem0[a13 + 0x00000000:word32]
	a12 = 0x4021BDB8
	a0 = Mem0[a0 + 0x00000030:word32]
	a12 = Mem0[a12 + 0x000003E4:word32]
	v28 = a0
	a0 = 0x4021D3CE
	call v28 (retsize: 0;)
	branch a14 == 0x00000000 l4021D3DF
	// succ:  l4021D3D0 l4021D3DF
l4021D3D0:
	a2 = 0x4021D260
	a3 = a12 >> 8
	a4 = 0x40204624
	a0 = 0x4021262C
	v29 = a0
	a0 = 0x4021D3DF
	call v29 (retsize: 0;)
	// succ:  l4021D3DF
l4021D3DF:
	a2 = 0x4021C17C
	a0 = Mem0[a1 + 0x00000040:word32]
	branch a2 >= a12 l4021D3F9
	// succ:  l4021D3E8 l4021D3F9
l4021D3E8:
	a2 = a0 + 24
	a15 = a15 + 1
	a15 = a15 & 0x000000FF
	a0 = a2 & 0x000000FF
	Mem0[a1 + 0x00000040:word32] = a0
	branch a15 != 2 l4021D395
	// succ:  l4021D3F9 l4021D395
l4021D3F9:
	a0 = Mem0[a13 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000006C:word32]
	a2 = 0x00000001
	v30 = a0
	a0 = 0x4021D405
	call v30 (retsize: 0;)
	a12 = 0x00000000
	a15 = 0
	a13 = 0
	a2 = 0
	a3 = 0
	Mem0[a1 + 0x00000044:word32] = a3
	Mem0[a1 + 0x00000048:word32] = a2
	a2 = 14
	a3 = Mem0[a1 + 0x0000003C:word32]
	a4 = Mem0[a1 + 0x00000040:word32]
	a5 = a1 + 18
	a6 = Mem0[a1 + 0x00000038:word32]
	a7 = a14
	a0 = 0x4021D427
	call sdk_ram_rfcal_rxiq (retsize: 0;)
	branch a14 == 0x00000000 l4021D446
	// succ:  l4021D429 l4021D446
l4021D429:
	a2 = 0x4021D264
	a3 = a12
	v31 = Mem0[a1 + 0x00000013:byte]
	a5 = (uint32) v31
	v32 = Mem0[a1 + 0x00000012:byte]
	a4 = (uint32) v32
	a5 = a5 << 8
	a4 = a4 << 8
	a4 = a4 >> 24
	a5 = a5 >> 24
	a0 = 0x4021262C
	v33 = a0
	a0 = 0x4021D446
	call v33 (retsize: 0;)
	// succ:  l4021D446
l4021D446:
	branch a12 == 0x00000000 l4021D47A
	// succ:  l4021D448 l4021D47A
l4021D448:
	v34 = Mem0[a1 + 0x00000012:byte]
	a2 = (uint32) v34
	a0 = 0x4021BCEC
	a2 = a2 << 8
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a2 >> 24
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a13 - a2
	v35 = a0
	a0 = 0x4021D45E
	call v35 (retsize: 0;)
	branch a2 >= 2 l4021D47A
	// succ:  l4021D461 l4021D47A
l4021D461:
	v36 = Mem0[a1 + 0x00000013:byte]
	a2 = (uint32) v36
	a0 = 0x4021BCEC
	a2 = a2 << 8
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a2 >> 24
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a15 - a2
	v37 = a0
	a0 = 0x4021D477
	call v37 (retsize: 0;)
	branch a2 < 2 l4021D4AC
	// succ:  l4021D47A l4021D4AC
l4021D47A:
	a3 = Mem0[a1 + 0x00000048:word32]
	a2 = Mem0[a1 + 0x00000044:word32]
	v38 = Mem0[a1 + 0x00000012:byte]
	a13 = (uint32) v38
	v39 = Mem0[a1 + 0x00000013:byte]
	a15 = (uint32) v39
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	a15 = a15 << 8
	a13 = a13 << 8
	a13 = a13 >> 24
	a15 = a15 >> 24
	a2 = a15 + a2
	a3 = a13 + a3
	Mem0[a1 + 0x00000048:word32] = a3
	Mem0[a1 + 0x00000044:word32] = a2
	branch a12 == 4 l4021D4A7
	// succ:  l4021D4A4 l4021D4A7
l4021D4A4:
	goto l4025D416
	// succ:  l4025D416
l4021D4A7:
	a0 = 0
	goto l4021D4AE
	// succ:  l4021D4AE
l4021D4AC:
	a0 = 1
	// succ:  l4021D4AE
l4021D4AE:
	a3 = -31
	branch a0 != 0x00000000 l4021D54B
	// succ:  l4021D4B3 l4021D54B
l4021D4B3:
	a13 = Mem0[a1 + 0x00000048:word32]
	a0 = Mem0[a1 + 0x00000044:word32]
	a13 = a13 + 2
	a0 = a0 + 2
	a0 = a0 >> 2
	a13 = a13 >> 2
	a13 = a13 << 8
	a13 = a13 >> 24
	a2 = -15
	a15 = a0 << 8
	a15 = a15 >> 24
	a0 = a2
	branch a13 < a2 l4021D4D8
	// succ:  l4021D4D6 l4021D4D8
l4021D4D6:
	a0 = a13
	// succ:  l4021D4D8
l4021D4D8:
	a2 = 15
	a7 = a2
	branch a0 >= 16 l4021D4E1
	// succ:  l4021D4DF l4021D4E1
l4021D4DF:
	a7 = a0
	// succ:  l4021D4E1
l4021D4E1:
	a0 = a3
	a13 = a7 << 8
	a13 = a13 >> 24
	branch a15 < a3 l4021D4EE
	// succ:  l4021D4EC l4021D4EE
l4021D4EC:
	a0 = a15
	// succ:  l4021D4EE
l4021D4EE:
	a15 = 31
	a7 = a15
	branch a0 >= 32 l4021D4F7
	// succ:  l4021D4F5 l4021D4F7
l4021D4F5:
	a7 = a0
	// succ:  l4021D4F7
l4021D4F7:
	a15 = a7 << 8
	a0 = Mem0[a1 + 0x00000034:word32]
	a15 = a15 >> 24
	branch a0 != 0x00000000 l4021D518
	// succ:  l4021D501 l4021D518
l4021D501:
	a3 = Mem0[a1 + 0x00000028:word32]
	a0 = a7 & 0x0000003F
	a2 = a13 & 0x0000001F
	a2 = a2 << 26
	a0 = a0 | a2
	a2 = Mem0[a1 + 0x0000004C:word32]
	a2 = a3 + a2 * 0x00000002
	Mem0[a2:word16] = a0
	// succ:  l4021D518
l4021D518:
	branch a14 == 0x00000000 l4021D52A
	// succ:  l4021D51A l4021D52A
l4021D51A:
	a5 = a15
	a4 = a13
	a2 = 0x4021D268
	a3 = Mem0[a1 + 0x0000004C:word32]
	a0 = 0x4021262C
	v42 = a0
	a0 = 0x4021D52A
	call v42 (retsize: 0;)
	// succ:  l4021D52A
l4021D52A:
	a13 = 0x4021BCEC
	a5 = a12 & 0x00000003
	a6 = 0x4021D26C
	a3 = Mem0[a1 + 0x0000004C:word32]
	a7 = Mem0[a6 + 0x00000000:word32]
	a4 = a3 + 1
	a3 = a4 & 0x000000FF
	Mem0[a1 + 0x0000004C:word32] = a3
	a7 = a7 << 30
	a5 = a5 | a7
	Mem0[a6:word32] = a5
	goto l4025D2DE
	// succ:  l4025D2DE
l4021D54B:
	v40 = Mem0[a1 + 0x00000013:byte]
	a0 = (uint32) v40
	v41 = Mem0[a1 + 0x00000012:byte]
	a2 = (uint32) v41
	a0 = a0 << 8
	a2 = a2 << 8
	a2 = a2 >> 24
	a0 = a0 >> 24
	a0 = a0 + a15
	a13 = a2 + a13
	a13 = a13 + 1
	a0 = a0 + 1
	a0 = a0 >> 1
	a13 = a13 >> 1
	a13 = a13 << 8
	a13 = a13 >> 24
	goto l4025D4C9
	// succ:  l4025D4C9
l4021D574:
	a12 = 0
	goto l4025D305
	// succ:  l4025D305
l4021D579:
	a12 = 64
	goto l4025D305
	// succ:  l4025D305
l4021D57E:
	a12 = 0x00000060
	a2 = 15
	Mem0[a1 + 0x00000040:word32] = a2
	goto l4025D30A
	// succ:  l4025D30A
l4021D589:
	a5 = 16
	a4 = 0x4021BDB8
	a3 = Mem0[a4 + 0x00000390:word32]
	a3 = a3 | a5
	Mem0[a4 + 0x00000390:word32] = a3
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x0000001C:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x00000024:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 80
	return
	// succ:  sdk_set_rx_gain_cal_iq_exit
l4021D5AC:
	a12 = 0x00000070
	a6 = 40
	Mem0[a1 + 0x00000040:word32] = a6
	goto l4025D30A
	// succ:  l4025D30A
l4021D5B7:
	a12 = 0x00000078
	a7 = 65
	Mem0[a1 + 0x00000040:word32] = a7
	goto l4025D30A
	// succ:  l4025D30A
l4025D2DE:
l4025D305:
l4025D30A:
l4025D416:
l4025D4C9:
sdk_set_rx_gain_cal_iq_exit:


// sdk_gen_rx_gain_table
// Return size: 0
void sdk_gen_rx_gain_table()
sdk_gen_rx_gain_table_entry:
	// succ:  l4021D5CC
l4021D5CC:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000014:word32] = a15
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a5
	Mem0[a1 + 0x00000024:word32] = a7
	Mem0[a1 + 0x0000001C:word32] = a2
	Mem0[a1 + 0x00000020:word32] = a4
	a2 = 0x0000007F
	a4 = a3 << 8
	a4 = a4 >> 24
	branch a4 >= 0x00000000 l4021D5ED
	// succ:  l4021D5EA_1 l4021D5ED
l4021D5EA_1:
	a3 = a2
	// succ:  l4021D5ED
l4021D5ED:
	Mem0[a1 + 0x00000018:word32] = a3
	branch a3 >= 1 l4021D5F5
	// succ:  l4021D5F2 l4021D5F5
l4021D5F2:
	goto l4021D6FB
	// succ:  l4021D6FB
l4021D5F5:
	a12 = 0
	a0 = 0
	a15 = 0
	a5 = Mem0[a1 + 0x00000028:word32]
	a7 = a6 - 1
	a13 = a5
	a5 = a5 + a7
	Mem0[a1 + 0x0000002C:word32] = a5
	// succ:  l4021D605
l4021D605:
	a3 = 24
	v15 = Mem0[a13 + 0x00000000:byte]
	a10 = (uint32) v15
	a6 = a12 - a15
	a14 = a6 << 8
	a14 = a14 >> 24
	a10 = a10 << 8
	a10 = a10 >> 24
	branch a14 < a10 l4021D65B
	// succ:  l4021D61C l4021D65B
l4021D61C:
	a6 = a6 << 8
	a2 = Mem0[a1 + 0x0000002C:word32]
	a6 = a6 >> 24
	branch a13 >= a2 l4021D65B
	// succ:  l4021D627 l4021D65B
l4021D627:
	a7 = a10 & 0x000000FF
	branch a7 != 0x00000000 l4021D638
	// succ:  l4021D62C l4021D638
l4021D62C:
	v17 = Mem0[a13 + 0x00000001:byte]
	a8 = (uint32) v17
	a8 = a8 << 8
	a8 = a8 >> 24
	branch a6 < a8 l4021D65B
	// succ:  l4021D638 l4021D65B
l4021D638:
	a13 = Mem0[a1 + 0x00000028:word32]
	a0 = a0 + 1
	a2 = a10 & 0x000000FF
	a15 = a15 + a2
	a0 = a0 & 0x000000FF
	a13 = a13 + a0
	a6 = a12 - a15
	a14 = a6 << 8
	v18 = Mem0[a13 + 0x00000000:byte]
	a10 = (uint32) v18
	a14 = a14 >> 24
	a10 = a10 << 8
	a10 = a10 >> 24
	branch a14 >= a10 l4021D61C
	// succ:  l4021D65B l4021D61C
l4021D65B:
	Mem0[a1 + 0x00000030:word32] = a0
	branch a14 < a3 l4021D66E
	// succ:  l4021D660 l4021D66E
l4021D660:
	a6 = a14 - 24
	a14 = 15
	a6 = a6 << 8
	a6 = a6 >> 24
	goto l4021D699
	// succ:  l4021D699
l4021D66E:
	a2 = a14
	a3 = 6
	a0 = 0x40202548
	v19 = a0
	a0 = 0x4021D678
	call v19 (retsize: 0;)
	a0 = a2
	a3 = 6
	a2 = a14
	SAR = 0x00000020 - a0
	a14 = 1
	a14 = a14 << SAR
	a14 = a14 - 1
	a14 = a14 & 0x0000FFFF
	a0 = 0x402044A4
	v21 = a0
	a0 = 0x4021D691
	call v21 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000030:word32]
	a6 = a2 << 8
	a6 = a6 >> 24
	// succ:  l4021D699
l4021D699:
	branch a6 < 5 l4021D6A1
	// succ:  l4021D69C l4021D6A1
l4021D69C:
	a6 = 5
	goto l4021D6A4
	// succ:  l4021D6A4
l4021D6A1:
	a6 = a6 & 0x0000FFFF
	// succ:  l4021D6A4
l4021D6A4:
	Mem0[a1 + 0x00000030:word32] = a0
	Mem0[a1:word32] = a6
	a7 = Mem0[a1 + 0x00000024:word32]
	a9 = Mem0[a1 + 0x00000020:word32]
	a8 = Mem0[a1 + 0x0000001C:word32]
	a9 = a9 + a0 * 0x00000002
	v23 = Mem0[a9 + 0x00000000:uint16]
	a4 = (uint32) v23
	a8 = a8 + a12 * 0x00000002
	a4 = a4 + a14 * 0x00000008
	a4 = a6 + a4
	a4 = a4 & 0x0000FFFF
	Mem0[a8:word16] = a4
	branch a7 == 0x00000000 l4021D6DA
	// succ:  l4021D6C4 l4021D6DA
l4021D6C4:
	v24 = Mem0[a9 + 0x00000000:uint16]
	a5 = (uint32) v24
	a2 = 0x4021D5C4
	a3 = a12
	a6 = a14
	a7 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x4021262C
	v25 = a0
	a0 = 0x4021D6D6
	call v25 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000030:word32]
	a6 = Mem0[a1 + 0x00000000:word32]
	// succ:  l4021D6DA
l4021D6DA:
	a10 = 15
	branch a14 != a10 l4021D6EB
	// succ:  l4021D6DF l4021D6EB
l4021D6DF:
	branch a6 != 5 l4021D6EB
	// succ:  l4021D6E2 l4021D6EB
l4021D6E2:
	a11 = 0x4021D5C8
	Mem0[a11:byte] = a12
	goto l4021D6FB
	// succ:  l4021D6FB
l4021D6EB:
	a14 = Mem0[a1 + 0x00000018:word32]
	a12 = a12 + 1
	a12 = a12 << 8
	a12 = a12 >> 24
	a14 = a12 - a14
	branch a14 != 0x00000000 l4021D605
	// succ:  l4021D6FB l4021D605
l4021D6FB:
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 64
	return
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_gen_rx_gain_table_exit sdk_gen_rx_gain_table_exit
sdk_gen_rx_gain_table_exit:


// sdk_pbus_set_rxbbgain
// Return size: 0
void sdk_pbus_set_rxbbgain()
sdk_pbus_set_rxbbgain_entry:
	// succ:  l4021D70C
l4021D70C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	a0 = 23
	branch a0 < a2 l4021D738
	// succ:  l4021D71A l4021D738
l4021D71A:
	a2 = 17
	branch a2 < a12 l4021D732
	// succ:  l4021D71F l4021D732
l4021D71F:
	branch a12 >= 12 l4021D72C
	// succ:  l4021D722 l4021D72C
l4021D722:
	a0 = 64
	branch a12 >= 6 l4021D73B
	// succ:  l4021D727 l4021D73B
l4021D727:
	a0 = 0
	goto l4021D73B
	// succ:  l4021D73B
l4021D72C:
	a0 = 0x00000060
	goto l4021D73B
	// succ:  l4021D73B
l4021D732:
	a0 = 0x00000070
	goto l4021D73B
	// succ:  l4021D73B
l4021D738:
	a0 = 0x00000078
	// succ:  l4021D73B
l4021D73B:
	a2 = 0x4021BCEC
	a4 = a0 & 0x0000FFFF
	a0 = Mem0[a2 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a2 = 3
	v8 = a0
	a0 = 0x4021D74D
	call v8 (retsize: 0;)
	a2 = a12
	a3 = 6
	a0 = 0x402044A4
	v9 = a0
	a0 = 0x4021D757
	call v9 (retsize: 0;)
	a3 = 2
	a5 = 6
	a4 = a2 << 29
	a0 = 0x4021BCEC
	a2 = 3
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = a4 | a5
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a4 & 0x0000FFFF
	v11 = a0
	a0 = 0x4021D771
	call v11 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pbus_set_rxbbgain_exit
sdk_pbus_set_rxbbgain_exit:


// sdk_set_rx_gain_testchip_50
// Return size: 0
void sdk_set_rx_gain_testchip_50()
sdk_set_rx_gain_testchip_50_entry:
	// succ:  l4021D788
l4021D788:
	a1 = fp
	a4 = a6
	a9 = 0x4021D26C
	a1 = a1 - 96
	Mem0[a1 + 0x0000002C:word32] = a12
	Mem0[a1 + 0x00000038:word32] = a15
	Mem0[a1 + 0x00000028:word32] = a0
	Mem0[a1 + 0x0000001C:word32] = a2
	Mem0[a1 + 0x00000020:word32] = a3
	Mem0[a1 + 0x00000044:word32] = a5
	Mem0[a1 + 0x00000034:word32] = a14
	Mem0[a1 + 0x00000030:word32] = a13
	a14 = a7
	a13 = 0x4021BDC0
	v15 = Mem0[a9 + 0x00000004:byte]
	a5 = (uint32) v15
	Mem0[a1 + 0x00000018:word32] = a4
	branch a5 == 0x00000000 l4021D7B7
	// succ:  l4021D7AD l4021D7B7
l4021D7AD:
	a10 = Mem0[a3 + 0x00000000:word32]
	Mem0[a1 + 0x00000020:word32] = a3
	a10 = a10 >>u 0x00000010 & 0x00000001
	branch a10 != 0x00000000 l4021D9A6
	// succ:  l4021D7B7 l4021D9A6
l4021D7B7:
	a4 = 0x4021D77C
	a15 = 0x4021BCEC
	a3 = 0x4021BDB8
	a2 = Mem0[a3 + 0x000003C8:word32]
	a2 = a2 | a4
	Mem0[a3 + 0x000003C8:word32] = a2
	a0 = Mem0[a15 + 0x00000000:word32]
	a12 = 0x000001E0
	a0 = Mem0[a0 + 0x000000A0:word32]
	Mem0[a13 + 0x00000068:word32] = a12
	v17 = a0
	a0 = 0x4021D7E0
	call v17 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 18
	a0 = Mem0[a15 + 0x00000000:word32]
	a5 = 7
	a0 = Mem0[a0 + 0x00000094:word32]
	a6 = 0
	v18 = a0
	a0 = 0x4021D7F3
	call v18 (retsize: 0;)
	a3 = 0
	a4 = 24
	a5 = 5
	a6 = 5
	a0 = Mem0[a15 + 0x00000000:word32]
	Mem0[a1 + 0x00000024:word32] = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000077
	v19 = a0
	a0 = 0x4021D808
	call v19 (retsize: 0;)
	a3 = 0
	a4 = 24
	a5 = 5
	a6 = 5
	a7 = 0
	a0 = Mem0[a15 + 0x00000000:word32]
	a12 = a2
	a0 = Mem0[a0 + 0x0000009C:word32]
	a2 = 0x00000077
	v20 = a0
	a0 = 0x4021D81F
	call v20 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 18
	a5 = 7
	a0 = Mem0[a15 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v21 = a0
	a0 = 0x4021D834
	call v21 (retsize: 0;)
	Mem0[a1 + 0x00000048:word32] = a12
	branch a14 == 0x00000000 l4021D913
	// succ:  l4021D83A l4021D913
l4021D83A:
	a5 = 0
	a12 = 0
	v22 = Mem0[a1 + 0x0000006C:byte]
	a2 = (uint32) v22
	a15 = Mem0[a1 + 0x00000060:word32]
	Mem0[a1 + 0x0000003C:word32] = a2
	a6 = a15 + a12 * 0x00000002
	// succ:  l4021D849
l4021D849:
	v23 = Mem0[a6 + 0x00000000:uint16]
	a6 = (uint32) v23
	a4 = 0x00000004
	a0 = a4 | a4
	a10 = a6 & 0x00007FFF
	a2 = a6 >>u 0x00000004 & 0x00000001
	a8 = a6 >>u 0x00000007 & 0x00000001
	a11 = a6 >>u 0x00000006 & 0x00000001
	a7 = a6 >>u 0x00000005 & 0x00000001
	a9 = a6 >>u 0x00000009 & 0x00000001
	a3 = a6 >>u 0x00000008 & 0x00000001
	a3 = a3 + a9
	a7 = a7 + a11
	a3 = a3 + a8
	a3 = a3 + a7
	a7 = 29
	a6 = a6 >>u 0x00000003 & 0x00000001
	a6 = a6 + a2
	a3 = a3 + a6
	a3 = a3 & 0x000000FF
	branch a3 >=u 0x00000005 l4021D881
	// succ:  l4021D87F l4021D881
l4021D87F:
	a0 = a3
	// succ:  l4021D881
l4021D881:
	a11 = a0 & 0x000000FF
	Mem0[a1 + 0x0000004C:word32] = a5
	a0 = a10 & 0x00000007
	a11 = a11 + a11 * 0x00000002
	a11 = a0 + a11 * 0x00000002
	a0 = a7
	a11 = a11 & 0x0000FFFF
	branch a7 <u a11 l4021D89A
	// succ:  l4021D898 l4021D89A
l4021D898:
	a0 = a11
	// succ:  l4021D89A
l4021D89A:
	a3 = a0 & 0x0000FFFF
	Mem0[a1 + 0x00000040:word32] = a3
	SAR = a3
	a2 = a5 >> SAR
	branch (a2 & 0x00000001) != 0x00000000 l4021D905
	// succ:  l4021D8A9 l4021D905
l4021D8A9:
	a2 = a10 & 0x00000FFF
	a0 = 0x4021D8AF
	call fn4031BCF0 (retsize: 0;)
	a2 = 0x40202348
	a3 = a1 + 16
	a0 = 0x4021BCEC
	a4 = 10
	a0 = Mem0[a0 + 0x00000000:word32]
	a5 = Mem0[a1 + 0x0000003C:word32]
	a0 = Mem0[a0 + 0x000000EC:word32]
	a6 = 0
	v30 = a0
	a0 = 0x4021D8C6
	call v30 (retsize: 0;)
	a5 = Mem0[a1 + 0x0000004C:word32]
	a8 = 1
	a3 = Mem0[a1 + 0x00000044:word32]
	v31 = Mem0[a1 + 0x00000010:int16]
	a4 = (int32) v31
	v32 = Mem0[a1 + 0x00000012:int16]
	a2 = (int32) v32
	a9 = Mem0[a1 + 0x00000040:word32]
	v33 = Mem0[a1 + 0x00000014:int16]
	a6 = (int32) v33
	v34 = Mem0[a1 + 0x00000016:int16]
	a7 = (int32) v34
	a6 = a6 & 0x000001FF
	a7 = a7 & 0x000001FF
	SAR = 0x00000020 - a9
	a2 = a2 & 0x000001FF
	a4 = a4 & 0x000001FF
	a3 = a3 + a9 * 0x00000008
	a4 = a4 << 23
	a2 = a2 << 23
	a8 = a8 << SAR
	a5 = a5 | a8
	a2 = a2 | a7
	a4 = a4 | a6
	Mem0[a3:word32] = a4
	Mem0[a3 + 0x00000004:word32] = a2
	// succ:  l4021D905
l4021D905:
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	a6 = a15 + a12 * 0x00000002
	a4 = a14 - a12
	branch a4 != 0x00000000 l4021D849
	// succ:  l4021D913 l4021D849
l4021D913:
	a0 = Mem0[a1 + 0x00000020:word32]
	a15 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a12 = Mem0[a1 + 0x00000048:word32]
	branch (a0 & 0x00010000) != 0x00000000 l4021D93B
	a0 = Mem0[a1 + 0x00000020:word32]
	a15 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a12 = Mem0[a1 + 0x00000048:word32]
	branch (a0 & 0x00010000) != 0x00000000 l4021D93B
	// succ:  l4021D920 l4021D93B
l4021D920:
	a2 = Mem0[a1 + 0x0000001C:word32]
	branch a2 == 0x00000000 l4021D93B
	a2 = Mem0[a1 + 0x0000001C:word32]
	branch a2 == 0x00000000 l4021D93B
	// succ:  l4021D924 l4021D93B
l4021D924:
	a2 = 0
	a3 = 8
	a4 = Mem0[a1 + 0x00000018:word32]
	a5 = Mem0[a1 + 0x00000044:word32]
	v26 = Mem0[a1 + 0x00000064:byte]
	a6 = (uint32) v26
	v27 = Mem0[a1 + 0x00000068:byte]
	a7 = (uint32) v27
	v28 = Mem0[a1 + 0x0000006C:byte]
	a8 = (uint32) v28
	Mem0[a1:word32] = a8
	a0 = 0x4021D93B
	call fn4031D270 (retsize: 0;)
	a2 = 0
	a3 = 8
	a4 = Mem0[a1 + 0x00000018:word32]
	a5 = Mem0[a1 + 0x00000044:word32]
	v41 = Mem0[a1 + 0x00000064:byte]
	a6 = (uint32) v41
	v42 = Mem0[a1 + 0x00000068:byte]
	a7 = (uint32) v42
	v43 = Mem0[a1 + 0x0000006C:byte]
	a8 = (uint32) v43
	Mem0[a1:word32] = a8
	a0 = 0x4021D93B
	call fn4031D270 (retsize: 0;)
	// succ:  l4021D93B
l4021D93B:
	a7 = a12
	a4 = 0x4021D780
	a3 = 0x4021BDB8
	a2 = Mem0[a3 + 0x000003C8:word32]
	a2 = a2 & a4
	a4 = 24
	a5 = 5
	a6 = 5
	Mem0[a3 + 0x000003C8:word32] = a2
	a0 = Mem0[a15 + 0x00000000:word32]
	a2 = 0x00000077
	a0 = Mem0[a0 + 0x0000009C:word32]
	a3 = 0
	v35 = a0
	a0 = 0x4021D965
	call v35 (retsize: 0;)
	a7 = Mem0[a1 + 0x00000024:word32]
	a2 = 0x00000077
	a3 = 0
	a4 = 18
	a0 = Mem0[a15 + 0x00000000:word32]
	a5 = 7
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 0
	v36 = a0
	a0 = 0x4021D97A
	call v36 (retsize: 0;)
	a0 = Mem0[a15 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C8:word32]
	v37 = a0
	a0 = 0x4021D982
	call v37 (retsize: 0;)
	a0 = Mem0[a15 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C4:word32]
	v38 = a0
	a0 = 0x4021D98A
	call v38 (retsize: 0;)
	a0 = Mem0[a15 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000BC:word32]
	a12 = 0x4021D26C
	v39 = a0
	a0 = 0x4021D995
	call v39 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000020:word32]
	a5 = 0x402138F8
	a3 = Mem0[a4 + 0x00000000:word32]
	a2 = 1
	a3 = a3 | a5
	Mem0[a4:word32] = a3
	Mem0[a12 + 0x00000004:byte] = a2
	// succ:  l4021D9A6
l4021D9A6:
	branch a14 == 0x00000000 l4021DA89
	// succ:  l4021D9A9 l4021DA89
l4021D9A9:
	a15 = Mem0[a1 + 0x00000060:word32]
	a6 = 0x4021D784
	a12 = 0
	a2 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000044:word32]
	a5 = 4
	// succ:  l4021D9B8
l4021D9B8:
	a10 = a15 + a12 * 0x00000002
	v40 = Mem0[a10 + 0x00000000:uint16]
	a10 = (uint32) v40
	a3 = a5
	a7 = a10 >>u 0x00000008 & 0x00000001
	a9 = a10 >>u 0x00000004 & 0x00000001
	a8 = a10 >>u 0x00000003 & 0x00000001
	a8 = a8 + a9
	a11 = a10 >>u 0x00000006 & 0x00000001
	a9 = a10 >>u 0x00000005 & 0x00000001
	a9 = a9 + a11
	a11 = a10 >>u 0x00000009 & 0x00000001
	a7 = a7 + a11
	a11 = a10 >>u 0x00000007 & 0x00000001
	a7 = a7 + a11
	a10 = a10 & 0x00007FFF
	a11 = 29
	a7 = a7 + a9
	a7 = a7 + a8
	a8 = a10 & 0x00000007
	a7 = a7 & 0x000000FF
	branch a7 >=u 0x00000005 l4021D9F1
	// succ:  l4021D9EF l4021D9F1
l4021D9EF:
	a3 = a7
	// succ:  l4021D9F1
l4021D9F1:
	a4 = a3 & 0x000000FF
	a3 = a11
	a7 = a4 + a4 * 0x00000002
	a7 = a8 + a7 * 0x00000002
	a7 = a7 & 0x0000FFFF
	branch a11 <u a7 l4021DA04
	// succ:  l4021DA02 l4021DA04
l4021DA02:
	a3 = a7
	// succ:  l4021DA04
l4021DA04:
	a11 = a3 & 0x0000FFFF
	a11 = a0 + a11 * 0x00000008
	a8 = Mem0[a11 + 0x00000004:word32]
	a11 = Mem0[a11 + 0x00000000:word32]
	a3 = a8 >>u 0x00000009 & 0x000001FF
	a7 = a11 & 0x000001FF
	a8 = a8 & 0x000001FF
	a11 = a11 >>u 0x00000009 & 0x000001FF
	a11 = a11 << 24
	a9 = a10 << 15
	a5 = 30
	Mem0[a13 + 0x00000068:word32] = a5
	a9 = a9 + a11
	a11 = a7 >>u 1
	a5 = a6 + a12 * 0x00000004
	a9 = a9 + a11
	Mem0[a5:word32] = a9
	a11 = 31
	Mem0[a13 + 0x00000068:word32] = a11
	a7 = a7 << 1
	a3 = a3 << 10
	Mem0[a5:word32] = a9
	a3 = a3 + a7
	a7 = a2 + a4 * 0x00000002
	v44 = Mem0[a7 + 0x00000000:uint16]
	a7 = (uint32) v44
	a8 = a8 << 19
	a7 = a7 & 0x000007FF
	a7 = a8 + a7 * 0x00000004
	a3 = a3 + a7
	a8 = 0x000001E0
	Mem0[a13 + 0x00000068:word32] = a8
	Mem0[a5:word32] = a3
	a7 = 0x000001E1
	Mem0[a13 + 0x00000068:word32] = a7
	Mem0[a5:word32] = a3
	a12 = a12 + 1
	a3 = Mem0[a1 + 0x00000050:word32]
	a5 = 4
	a12 = a12 & 0x000000FF
	a8 = a14 - a12
	branch a8 != 0x00000000 l4021D9B8
	// succ:  l4021DA89 l4021D9B8
l4021DA89:
	a12 = Mem0[a1 + 0x0000002C:word32]
	a13 = Mem0[a1 + 0x00000030:word32]
	a14 = Mem0[a1 + 0x00000034:word32]
	a15 = Mem0[a1 + 0x00000038:word32]
	a0 = Mem0[a1 + 0x00000028:word32]
	a1 = a1 + 96
	return
	a12 = Mem0[a1 + 0x0000002C:word32]
	a13 = Mem0[a1 + 0x00000030:word32]
	a14 = Mem0[a1 + 0x00000034:word32]
	a15 = Mem0[a1 + 0x00000038:word32]
	a0 = Mem0[a1 + 0x00000028:word32]
	a1 = a1 + 96
	return
	// succ:  sdk_set_rx_gain_testchip_50_exit sdk_set_rx_gain_testchip_50_exit
sdk_set_rx_gain_testchip_50_exit:


// sdk_ram_get_corr_power
// Return size: 0
void sdk_ram_get_corr_power()
sdk_ram_get_corr_power_entry:
	// succ:  l4021DAA0
l4021DAA0:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000030:word32] = a13
	Mem0[a1 + 0x0000002C:word32] = a12
	Mem0[a1 + 0x00000028:word32] = a0
	a12 = a2
	a2 = 0x4021BDB8
	a5 = Mem0[a2 + 0x0000038C:word32]
	a5 = a5 >> 9
	a4 = Mem0[a2 + 0x00000380:word32]
	a4 = a4 >> 9
	a4 = a4 + a5
	a5 = Mem0[a2 + 0x00000388:word32]
	a5 = a5 >> 9
	a0 = Mem0[a2 + 0x00000384:word32]
	a0 = a0 >> 9
	a0 = a0 - a5
	Mem0[a1 + 0x0000000C:word32] = a0
	a6 = Mem0[a2 + 0x000003DC:word32]
	a6 = a6 >> 8
	Mem0[a1:word32] = a6
	a5 = Mem0[a2 + 0x000003E0:word32]
	a5 = a5 >> 8
	Mem0[a1 + 0x00000004:word32] = a5
	a2 = Mem0[a2 + 0x000003E4:word32]
	a13 = -4
	a5 = a3 - 2
	a0 = a0 >> 31
	Mem0[a1 + 0x00000008:word32] = a0
	SAR = a5
	a13 = a13 + a3 * 0x00000002
	a5 = a4 >> 31
	a2 = a0 >> SAR
	Mem0[a12:word32] = a2
	a3 = a5
	a2 = a4
	a0 = 0x4021DA98
	v12 = a0
	a0 = 0x4021DB17
	call v12 (retsize: 0;)
	Mem0[a1 + 0x00000014:word32] = a2
	Mem0[a1 + 0x00000010:word32] = a3
	a5 = Mem0[a1 + 0x00000008:word32]
	a4 = Mem0[a1 + 0x0000000C:word32]
	a3 = a5
	a2 = a4
	a0 = 0x4021DA98
	v13 = a0
	a0 = 0x4021DB29
	call v13 (retsize: 0;)
	a4 = a3
	a6 = Mem0[a1 + 0x00000014:word32]
	a3 = Mem0[a1 + 0x00000010:word32]
	a2 = a6 + a2
	a3 = a3 + a4
	branch a2 >=u a6 l4021DB38
	// succ:  l4021DB36 l4021DB38
l4021DB36:
	a3 = a3 + 1
	// succ:  l4021DB38
l4021DB38:
	a4 = a13
	a0 = 0x4021DA9C
	v14 = a0
	a0 = 0x4021DB40
	call v14 (retsize: 0;)
	Mem0[a12 + 0x00000004:word32] = a2
	a4 = Mem0[a1 + 0x00000000:word32]
	a6 = Mem0[a1 + 0x00000004:word32]
	Mem0[a1 + 0x0000001C:word32] = a6
	a5 = a4 >> 31
	a6 = a6 >> 31
	Mem0[a1 + 0x00000018:word32] = a6
	a3 = a5
	a2 = a4
	a0 = 0x4021DA98
	v15 = a0
	a0 = 0x4021DB5A
	call v15 (retsize: 0;)
	Mem0[a1 + 0x00000024:word32] = a2
	Mem0[a1 + 0x00000020:word32] = a3
	a5 = Mem0[a1 + 0x00000018:word32]
	a4 = Mem0[a1 + 0x0000001C:word32]
	a3 = a5
	a2 = a4
	a0 = 0x4021DA98
	v16 = a0
	a0 = 0x4021DB6C
	call v16 (retsize: 0;)
	a4 = a3
	a8 = Mem0[a1 + 0x00000024:word32]
	a3 = Mem0[a1 + 0x00000020:word32]
	a2 = a8 + a2
	a3 = a3 + a4
	branch a2 >=u a8 l4021DB7B
	// succ:  l4021DB79 l4021DB7B
l4021DB79:
	a3 = a3 + 1
	// succ:  l4021DB7B
l4021DB7B:
	a4 = a13
	a0 = 0x4021DA9C
	v18 = a0
	a0 = 0x4021DB83
	call v18 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000028:word32]
	Mem0[a12 + 0x00000008:word32] = a2
	a13 = Mem0[a1 + 0x00000030:word32]
	a12 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_ram_get_corr_power_exit
sdk_ram_get_corr_power_exit:


// sdk_check_data_func
// Return size: 0
void sdk_check_data_func()
sdk_check_data_func_entry:
	// succ:  l4021DB90
l4021DB90:
	a1 = fp
	branch a2 < a3 l4021DB96
	// succ:  l4021DB93 l4021DB96
l4021DB93:
	branch a4 >= a2 l4021DBA8
	// succ:  l4021DB96 l4021DBA8
l4021DB96:
	SAR = 0x00000020 - a5
	a3 = 0x4021D26C
	a4 = 1
	a2 = Mem0[a3 + 0x00000008:word32]
	a4 = a4 << SAR
	a2 = a2 | a4
	Mem0[a3 + 0x00000008:word32] = a2
	// succ:  l4021DBA8
l4021DBA8:
	return
	// succ:  sdk_check_data_func_exit
sdk_check_data_func_exit:


// sdk_do_noisefloor_lsleep_v50
// Return size: 0
void sdk_do_noisefloor_lsleep_v50()
sdk_do_noisefloor_lsleep_v50_entry:
	// succ:  l4021DBB0
l4021DBB0:
	a1 = fp
	a8 = 0xFFFFFE00
	a7 = 0x00000142
	a3 = 0x4021BDC0
	a6 = Mem0[a3 + 0x00000164:word32]
	a6 = a6 & a8
	a6 = a6 | a7
	Mem0[a3 + 0x00000164:word32] = a6
	a5 = 0x4021DBAC
	a4 = 2
	a2 = Mem0[a3 + 0x00000160:word32]
	a2 = a2 & a5
	a2 = a2 | a4
	Mem0[a3 + 0x00000160:word32] = a2
	return
	// succ:  sdk_do_noisefloor_lsleep_v50_exit
sdk_do_noisefloor_lsleep_v50_exit:


// sdk_do_noisefloor
// Return size: 0
void sdk_do_noisefloor()
sdk_do_noisefloor_entry:
	// succ:  l4021DBE4
l4021DBE4:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1:word32] = a2
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000008:word32] = a12
	a14 = a5
	a12 = 0x4021BDC0
	a13 = 0x4021319C
	// succ:  l4021DBF9
l4021DBF9:
	a0 = Mem0[a12 + 0x00000160:word32]
	Mem0[a1 + 0x00000014:word32] = a4
	branch (a0 & 0x00000002) != 0x00000000 l4021DC29
	// succ:  l4021DC05 l4021DC29
l4021DC05:
	a2 = a3 | a3
	a0 = 0x4021DC0B
	call fn40303F28 (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000064:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	v11 = a0
	a0 = 0x4021DC19
	call v11 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000014:word32]
	// succ:  l4021DC1B
l4021DC1B:
	a2 = Mem0[a12 + 0x00000160:word32]
	branch (a2 & 0x00000002) != 0x00000000 l4021DC38
	// succ:  l4021DC24 l4021DC38
l4021DC24:
	a2 = 0
	goto l4021DC46
	// succ:  l4021DC46
l4021DC29:
	a5 = Mem0[a13 + 0x00000200:word32]
	a5 = a5 - a4
	branch a14 >=u a5 l4021DBF9
	// succ:  l4021DC35 l4021DBF9
l4021DC35:
	goto l4021DC44
	// succ:  l4021DC44
l4021DC38:
	a6 = Mem0[a13 + 0x00000200:word32]
	a6 = a6 - a0
	branch a14 >=u a6 l4021DC1B
	// succ:  l4021DC44 l4021DC1B
l4021DC44:
	a2 = 1
	a2 = 1
	// succ:  l4021DC46
l4021DC46:
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_do_noisefloor_exit
sdk_do_noisefloor_exit:


// sdk_start_dig_rx
// Return size: 0
void sdk_start_dig_rx()
sdk_start_dig_rx_entry:
	// succ:  l4021DC54
l4021DC54:
	a1 = fp
	a9 = 0x4021CB28
	a3 = 0x4021BDC0
	a8 = Mem0[a3 + 0x00000108:word32]
	a8 = a8 & a9
	Mem0[a3 + 0x00000108:word32] = a8
	a7 = 1
	a6 = Mem0[a3 + 0x00000160:word32]
	a6 = a6 | a7
	Mem0[a3 + 0x00000160:word32] = a6
	a5 = -2
	a4 = Mem0[a3 + 0x00000160:word32]
	a4 = a4 & a5
	Mem0[a3 + 0x00000160:word32] = a4
	Mem0[a3 + 0x0000002C:word32] = a2
	return
	// succ:  sdk_start_dig_rx_exit
sdk_start_dig_rx_exit:


// sdk_stop_dig_rx
// Return size: 0
void sdk_stop_dig_rx()
sdk_stop_dig_rx_entry:
	// succ:  l4021DC98
l4021DC98:
	a1 = fp
	a4 = 0x4021BDC0
	a7 = 0x4021BDBC
	a2 = Mem0[a4 + 0x0000002C:word32]
	a6 = Mem0[a4 + 0x00000108:word32]
	a6 = a6 | a7
	Mem0[a4 + 0x00000108:word32] = a6
	a5 = 0x4021DC94
	a3 = Mem0[a4 + 0x0000002C:word32]
	a3 = a3 & a5
	Mem0[a4 + 0x0000002C:word32] = a3
	return
	// succ:  sdk_stop_dig_rx_exit
sdk_stop_dig_rx_exit:


// sdk_chip_v6_set_chanfreq
// Return size: 0
void sdk_chip_v6_set_chanfreq()
sdk_chip_v6_set_chanfreq_entry:
	// succ:  l4021DCC4
l4021DCC4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000044:word32]
	a3 = 0x00000080
	v5 = a0
	a0 = 0x4021DCD9
	call v5 (retsize: 0;)
	a0 = 0x4021DCDC
	call fn4031CA50 (retsize: 0;)
	a2 = 0x00000000
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_chip_v6_set_chanfreq_exit
sdk_chip_v6_set_chanfreq_exit:


// sdk_tx_cap_init
// Return size: 0
void sdk_tx_cap_init()
sdk_tx_cap_init_entry:
	// succ:  l4021DCF0
l4021DCF0:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a15
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a13
	a13 = 0x4021D26C
	Mem0[a1 + 0x00000014:word32] = a0
	a0 = Mem0[a13 + 0x0000000C:word32]
	a14 = a13 + 41
	a0 = a0 >>u 0x00000012 & 0x00000001
	branch a0 != 0x00000000 l4021DE7F
	// succ:  l4021DD0D l4021DE7F
l4021DD0D:
	a12 = 0x4021BCEC
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000A0:word32]
	v8 = a0
	a0 = 0x4021DD18
	call v8 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C0:word32]
	a2 = 1
	v10 = a0
	a0 = 0x4021DD22
	call v10 (retsize: 0;)
	a15 = 0x4021D5C8
	v11 = Mem0[a15 + 0x00000002:uint16]
	a2 = (uint32) v11
	a2 = a2 & 0x00000FFF
	a0 = 0x4021DD2E
	call fn4031BE78 (retsize: 0;)
	v12 = Mem0[a15 + 0x00000002:uint16]
	a2 = (uint32) v12
	a3 = a1 + 16
	a4 = 1
	a0 = 0x4021DD39
	call sdk_set_txdc_pbus (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000018:word32]
	a2 = 0
	v15 = a0
	a0 = 0x4021DD42
	call v15 (retsize: 0;)
	v16 = Mem0[a1 + 0x00000012:byte]
	a13 = (uint32) v16
	a12 = 0
	a15 = 0x4021C9E0
	// succ:  l4021DD4A
l4021DD4A:
	branch a12 == 0x00000000 l4021DD64
	// succ:  l4021DD4C l4021DD64
l4021DD4C:
	branch a12 == 1 l4021DD5F
	// succ:  l4021DD4F l4021DD5F
l4021DD4F:
	branch a12 == 2 l4021DD5A
	// succ:  l4021DD52 l4021DD5A
l4021DD52:
	branch a12 != 3 l4021DD66
	// succ:  l4021DD55 l4021DD66
l4021DD55:
	a13 = 14
	goto l4021DD66
	// succ:  l4021DD66
l4021DD5A:
	a13 = 11
	goto l4021DD66
	// succ:  l4021DD66
l4021DD5F:
	a13 = 6
	goto l4021DD66
	// succ:  l4021DD66
l4021DD64:
	a13 = 1
	// succ:  l4021DD66
l4021DD66:
	a7 = a15 | a15
	a6 = 0x00000064
	a4 = 0x00000001
	a3 = 0x4021DCEC
	a5 = 0x4021DCE8
	a2 = a13 << 8
	a2 = a2 >> 24
	v22 = Mem0[a5 + 0x000001FA:int16]
	a5 = (int32) v22
	v23 = Mem0[a3 + 0x00000080:byte]
	a3 = (uint32) v23
	Mem0[a1 + 0x00000004:word32] = a4
	Mem0[a1:word32] = a6
	a4 = 0
	a6 = 0x4021C30C
	a0 = 0x4021DD8D
	call fn4031C8F8 (retsize: 0;)
	a2 = 64
	a3 = 40
	a4 = 2
	a5 = 0
	a6 = a13 + a13 * 0x00000002
	a6 = a14 + a6
	a0 = 0x4021DD9D
	call sdk_ram_rfcal_txcap (retsize: 0;)
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	branch a12 != 4 l4021DD4A
	// succ:  l4021DDA5 l4021DD4A
l4021DDA5:
	a12 = 0
	a15 = 0
	a13 = 3
	a0 = 0x4021C30C
	Mem0[a1 + 0x00000028:word32] = a13
	a14 = a15 + a0
	// succ:  l4021DDB2
l4021DDB2:
	a13 = 14
	// succ:  l4021DDB4
l4021DDB4:
	branch a12 >=u 0x00000006 l4021DDDB
	// succ:  l4021DDB7 l4021DDDB
l4021DDB7:
	a2 = a12
	a3 = 5
	v24 = Mem0[a14 + 0x00000020:byte]
	a0 = (uint32) v24
	Mem0[a1 + 0x00000034:word32] = a0
	a0 = 0x40204388
	v25 = a0
	a0 = 0x4021DDC6
	call v25 (retsize: 0;)
	a3 = a2
	v26 = Mem0[a14 + 0x0000002F:byte]
	a4 = (uint32) v26
	a2 = Mem0[a1 + 0x00000034:word32]
	a0 = 0x4021C30C
	a4 = a4 - a2
	a3 = a3 * a4
	a2 = a2 + a3
	goto l4021DE2B
	// succ:  l4021DE2B
l4021DDDB:
	a5 = 10
	branch a5 <u a12 l4021DE03
	// succ:  l4021DDE0 l4021DE03
l4021DDE0:
	a3 = 5
	a2 = a12 - 5
	v30 = Mem0[a14 + 0x0000003E:byte]
	a4 = (uint32) v30
	v31 = Mem0[a14 + 0x0000002F:byte]
	a5 = (uint32) v31
	Mem0[a1 + 0x00000030:word32] = a5
	a4 = a4 - a5
	a2 = a2 * a4
	a0 = 0x40202548
	v32 = a0
	a0 = 0x4021DDF9
	call v32 (retsize: 0;)
	a6 = Mem0[a1 + 0x00000030:word32]
	a0 = 0x4021C30C
	a2 = a2 + a6
	goto l4021DE2B
	// succ:  l4021DE2B
l4021DE03:
	v33 = Mem0[a14 + 0x00000047:byte]
	a2 = (uint32) v33
	a7 = 12
	branch a7 <u a12 l4021DE2B
	// succ:  l4021DE0B l4021DE2B
l4021DE0B:
	a8 = a12 + a12 * 0x00000004
	v35 = Mem0[a14 + 0x0000003E:byte]
	a3 = (uint32) v35
	Mem0[a1 + 0x0000002C:word32] = a3
	a8 = a8 - 50
	a2 = a2 - a3
	a2 = a8 * a2
	a3 = 22
	a0 = 0x40202548
	v36 = a0
	a0 = 0x4021DE24
	call v36 (retsize: 0;)
	a9 = Mem0[a1 + 0x0000002C:word32]
	a0 = 0x4021C30C
	a2 = a2 + a9
	// succ:  l4021DE2B
l4021DE2B:
	a13 = a13 - 1
	a3 = a12 + a12 * 0x00000002
	a3 = a15 + a3
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	a3 = a0 + a3
	Mem0[a3 + 0x00000020:byte] = a2
	branch a13 != 0x00000000 l4021DDB4
	// succ:  l4021DE3F l4021DDB4
l4021DE3F:
	a12 = 0
	a4 = Mem0[a1 + 0x00000028:word32]
	a15 = a15 + 1
	a15 = a15 & 0x000000FF
	a14 = a15 + a0
	a4 = a4 - 1
	Mem0[a1 + 0x00000028:word32] = a4
	branch a4 != 0x00000000 l4021DDB2
	// succ:  l4021DE51 l4021DDB2
l4021DE51:
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C8:word32]
	v27 = a0
	a0 = 0x4021DE5C
	call v27 (retsize: 0;)
	a12 = 0x4021BCEC
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C4:word32]
	v28 = a0
	a0 = 0x4021DE67
	call v28 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a13 = 0x4021D26C
	a0 = Mem0[a0 + 0x000000BC:word32]
	a14 = 0x40215E28
	v29 = a0
	a0 = 0x4021DE75
	call v29 (retsize: 0;)
	a2 = Mem0[a13 + 0x0000000C:word32]
	a2 = a2 | a14
	Mem0[a13 + 0x0000000C:word32] = a2
	goto l4021DE9A
	// succ:  l4021DE9A
l4021DE7F:
	v17 = Mem0[a13 + 0x0000005A:byte]
	a2 = (uint32) v17
	v18 = Mem0[a13 + 0x0000005A:byte]
	a3 = (uint32) v18
	a2 = a2 << 8
	a2 = a2 >> 24
	a3 = a3 << 8
	a3 = a3 >> 24
	a2 = a3 + a2 * 0x00000002
	a2 = a14 + a2
	a0 = 0x4021DE9A
	call fn4031C3B8 (retsize: 0;)
	// succ:  l4021DE9A
l4021DE9A:
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x0000001C:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x00000024:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_tx_cap_init_exit
sdk_tx_cap_init_exit:


// sdk_target_power_add_backoff
// Return size: 0
void sdk_target_power_add_backoff()
sdk_target_power_add_backoff_entry:
	// succ:  l4021DEAC
l4021DEAC:
	a1 = fp
	a8 = 16
	v5 = Mem0[a3 + 0x00000000:byte]
	a6 = (uint32) v5
	a5 = 28
	branch a5 >= a4 l4021DEBB
	// succ:  l4021DEB6 l4021DEBB
l4021DEB6:
	a7 = 12
	goto l4021DEC6
	// succ:  l4021DEC6
l4021DEBB:
	branch a8 >= a4 l4021DEC4
	// succ:  l4021DEBE l4021DEC4
l4021DEBE:
	a7 = a4 - 16
	goto l4021DEC6
	// succ:  l4021DEC6
l4021DEC4:
	a7 = 0
	// succ:  l4021DEC6
l4021DEC6:
	a6 = a6 - a7
	Mem0[a2:byte] = a6
	a7 = a8
	branch a8 < a4 l4021DED3
	// succ:  l4021DED1 l4021DED3
l4021DED1:
	a7 = a4
	// succ:  l4021DED3
l4021DED3:
	a4 = 1
	// succ:  l4021DED5
l4021DED5:
	a9 = a2 + a4
	a10 = a4 + 1
	a8 = a3 + a4
	v13 = Mem0[a8 + 0x00000000:byte]
	a8 = (uint32) v13
	a4 = a10 & 0x000000FF
	a8 = a8 - a7
	Mem0[a9:byte] = a8
	branch a4 != 6 l4021DED5
	// succ:  l4021DEEA l4021DED5
l4021DEEA:
	return
	// succ:  sdk_target_power_add_backoff_exit
sdk_target_power_add_backoff_exit:


// sdk_tx_pwctrl_init_cal
// Return size: 0
void sdk_tx_pwctrl_init_cal()
sdk_tx_pwctrl_init_cal_entry:
	// succ:  l4021DEFC
l4021DEFC:
	a1 = fp
	a6 = 0x00000064
	a4 = 1
	a1 = a1 - 48
	Mem0[a1 + 0x00000028:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a12
	a13 = a3
	a12 = a2
	a15 = 0x4021DEEC
	a2 = a2 << 8
	a2 = a2 >> 24
	a7 = a15 - 38
	v14 = Mem0[a15 + 0x000000B4:int16]
	a5 = (int32) v14
	v15 = Mem0[a15 + 0x00000047:byte]
	a3 = (uint32) v15
	Mem0[a1 + 0x00000004:word32] = a4
	Mem0[a1:word32] = a6
	a4 = 0
	a6 = 0x4021C30C
	a0 = 0x4021DF30
	call fn4031C8F8 (retsize: 0;)
	a3 = 0x4021CAC4
	a2 = a12 + a12 * 0x00000002
	a2 = a2 + a3
	a0 = 0x4021DF3B
	call fn4031C3B8 (retsize: 0;)
	v16 = Mem0[a15 + 0x000000B6:byte]
	a4 = (uint32) v16
	branch a4 != 0x00000000 l4021DF46
	// succ:  l4021DF40 l4021DF46
l4021DF40:
	branch a12 != 6 l4021DF46
	// succ:  l4021DF43 l4021DF46
l4021DF43:
	a0 = 0x4021DF46
	call sdk_cal_rf_ana_gain (retsize: 0;)
	// succ:  l4021DF46
l4021DF46:
	a14 = 0x4021DEF0
	branch a13 != 1 l4021DF7E
	// succ:  l4021DF4C l4021DF7E
l4021DF4C:
	a13 = 0
	a5 = 0
	Mem0[a1 + 0x00000018:word32] = a5
	// succ:  l4021DF52
l4021DF52:
	a2 = a14
	a0 = 0x4021DF57
	call sdk_tx_pwr_backoff (retsize: 0;)
	a6 = Mem0[a1 + 0x00000018:word32]
	a13 = a2 + a13
	a13 = a13 << 16
	a13 = a13 >> 16
	a0 = a6 + 1
	a6 = a0 & 0x000000FF
	Mem0[a1 + 0x00000018:word32] = a6
	branch a6 != 4 l4021DF52
	// succ:  l4021DF6B l4021DF52
l4021DF6B:
	a0 = a13 + 2
	a13 = a13 + 5
	branch a0 < 0x00000000 l4021DF72
	// succ:  l4021DF6F_1 l4021DF72
l4021DF6F_1:
	a13 = a0
	// succ:  l4021DF72
l4021DF72:
	a13 = a13 >> 2
	a13 = a13 << 16
	a13 = a13 >> 16
	goto l4021DF80
	// succ:  l4021DF80
l4021DF7E:
	a13 = 0
	// succ:  l4021DF80
l4021DF80:
	a3 = a14
	a2 = a1 + 16
	a4 = a13
	a0 = 0x4021DF8A
	call fn4031DEAC (retsize: 0;)
	branch a12 == 1 l4021DFA0
	// succ:  l4021DF8D l4021DFA0
l4021DF8D:
	a2 = a12 - 6
	branch a2 == 0x00000000 l4021E050
	// succ:  l4021DF93 l4021E050
l4021DF93:
	a4 = a12 - 11
	a3 = 2
	a0 = 3
	branch a4 != 0x00000000 l4021DF9D
	// succ:  l4021DF9A_1 l4021DF9D
l4021DF9A_1:
	a0 = a3
	// succ:  l4021DF9D
l4021DF9D:
	goto l4021DFA3
	// succ:  l4021DFA3
l4021DFA0:
	a0 = 0x00000000
	// succ:  l4021DFA3
l4021DFA3:
	a3 = 0x4021BDB8
	a6 = 0xFFFFFFFF
	a4 = a13 & 0x000000FF
	a5 = a0 << 29
	a14 = 0x4021C30C
	SAR = 0x00000020 - a5
	a5 = 0x000000FF
	a14 = a14 + a0 * 0x00000002
	Mem0[a14 + 0x0000000C:word16] = a13
	a5 = a5 << SAR
	a4 = a4 << SAR
	a5 = a5 ^ a6
	a2 = Mem0[a3 + 0x000003FC:word32]
	a2 = a2 & a5
	a2 = a2 | a4
	a4 = 0x00000006
	a5 = 31
	a9 = 0x00000138
	a6 = 0x4021D5C8
	a7 = 0x4021DEF4
	Mem0[a3 + 0x000003FC:word32] = a2
	a12 = a0 + a0 * 0x00000002
	a2 = 64
	a3 = a1 + 16
	a12 = a12 << 31
	a7 = a12 + a7
	v19 = Mem0[a6 + 0x00000002:uint16]
	a6 = (uint32) v19
	Mem0[a1:word32] = a9
	v21 = Mem0[a15 + 0x000000B7:byte]
	a8 = (uint32) v21
	Mem0[a1 + 0x00000004:word32] = a8
	a0 = 0x4021E001
	call sdk_ram_rfcal_pwrctrl (retsize: 0;)
	a3 = 0x4021D26C
	a5 = 0x4021C30C
	v22 = Mem0[a3 + 0x00000075:byte]
	a4 = (uint32) v22
	v23 = Mem0[a3 + 0x00000074:byte]
	a0 = (uint32) v23
	a5 = a12 + a5
	v24 = Mem0[a5 + 0x00000051:byte]
	a2 = (uint32) v24
	v25 = Mem0[a5 + 0x00000050:byte]
	a5 = (uint32) v25
	a2 = a2 << 8
	a0 = a0 - a4
	a0 = a0 + 4
	a2 = a2 >> 24
	a5 = a5 << 8
	a5 = a5 >> 24
	a2 = a2 - a5
	branch a0 >= a2 l4021E036
	// succ:  l4021E02C l4021E036
l4021E02C:
	a7 = 0x4021DEF8
	a6 = Mem0[a3 + 0x0000000C:word32]
	a6 = a6 | a7
	Mem0[a3 + 0x0000000C:word32] = a6
	// succ:  l4021E036
l4021E036:
	a12 = Mem0[a1 + 0x00000020:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a0 = Mem0[a1 + 0x0000001C:word32]
	v26 = Mem0[a14 + 0x0000000C:int16]
	a8 = (int32) v26
	a14 = Mem0[a1 + 0x00000028:word32]
	branch a8 < 5 l4021E049
	// succ:  l4021E044 l4021E049
l4021E044:
	a9 = 1
	Mem0[a15 + 0x000000B8:byte] = a9
	// succ:  l4021E049
l4021E049:
	a15 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_tx_pwctrl_init_cal_exit
l4021E050:
	a0 = 1
	// succ:  l4025DFA3
l4025DFA3:
sdk_tx_pwctrl_init_cal_exit:


// sdk_tx_atten_set_interp
// Return size: 0
void sdk_tx_atten_set_interp()
sdk_tx_atten_set_interp_entry:
	// succ:  l4021E064
l4021E064:
	a1 = fp
	a4 = a2 - 6
	a5 = a2 + a2 * 0x00000004
	a1 = a1 - 64
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000030:word32] = a3
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x00000010:word32] = a12
	a5 = a5 - 55
	a12 = a2
	Mem0[a1 + 0x00000008:word32] = a5
	Mem0[a1 + 0x00000020:word32] = a4
	a15 = 0
	a14 = 6
	a0 = 0x4021C30C
	a3 = a2 - 1
	Mem0[a1 + 0x0000002C:word32] = a3
	a13 = a0
	a0 = a0 - 12
	// succ:  l4021E092
l4021E092:
	branch a12 >=u 0x00000007 l4021E0C3
	// succ:  l4021E095 l4021E0C3
l4021E095:
	a3 = 5
	a2 = Mem0[a1 + 0x0000002C:word32]
	v12 = Mem0[a13 + 0x00000056:byte]
	a4 = (uint32) v12
	v13 = Mem0[a13 + 0x00000050:byte]
	a5 = (uint32) v13
	Mem0[a1 + 0x00000028:word32] = a5
	a4 = a4 << 8
	a5 = a5 << 8
	a5 = a5 >> 24
	a4 = a4 >> 24
	a4 = a4 - a5
	a2 = a2 * a4
	a0 = 0x40202548
	v14 = a0
	a0 = 0x4021E0B9
	call v14 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000028:word32]
	a0 = 0x4021D26C
	a2 = a2 + a5
	goto l4021E124
	// succ:  l4021E124
l4021E0C3:
	branch a12 >=u 0x0000000C l4021E0F4
	// succ:  l4021E0C6 l4021E0F4
l4021E0C6:
	a3 = 5
	a2 = Mem0[a1 + 0x00000020:word32]
	v15 = Mem0[a13 + 0x0000005C:byte]
	a4 = (uint32) v15
	v16 = Mem0[a13 + 0x00000056:byte]
	a5 = (uint32) v16
	Mem0[a1 + 0x00000024:word32] = a5
	a4 = a4 << 8
	a5 = a5 << 8
	a5 = a5 >> 24
	a4 = a4 >> 24
	a4 = a4 - a5
	a2 = a2 * a4
	a0 = 0x40202548
	v17 = a0
	a0 = 0x4021E0EA
	call v17 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000024:word32]
	a0 = 0x4021D26C
	a2 = a2 + a5
	goto l4021E124
	// succ:  l4021E124
l4021E0F4:
	v29 = Mem0[a13 + 0x00000062:byte]
	a2 = (uint32) v29
	a6 = 13
	a2 = a2 << 8
	a2 = a2 >> 24
	branch a6 <u a12 l4021E124
	// succ:  l4021E102 l4021E124
l4021E102:
	v30 = Mem0[a13 + 0x0000005C:byte]
	a4 = (uint32) v30
	Mem0[a1 + 0x00000004:word32] = a4
	a4 = a4 << 8
	a4 = a4 >> 24
	a4 = a2 - a4
	a2 = Mem0[a1 + 0x00000008:word32]
	a3 = 22
	a2 = a2 * a4
	a0 = 0x40202548
	v31 = a0
	a0 = 0x4021E11D
	call v31 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000004:word32]
	a0 = 0x4021D26C
	a2 = a2 + a5
	// succ:  l4021E124
l4021E124:
	a13 = a13 + 1
	a14 = a14 - 1
	a7 = Mem0[a1 + 0x00000030:word32]
	v20 = Mem0[a0 + 0x00000084:byte]
	a6 = (uint32) v20
	a7 = a15 + a7
	a6 = a6 << 8
	a15 = a15 + 1
	a6 = a6 >> 24
	a6 = a6 + a2
	Mem0[a7:byte] = a6
	branch a14 != 0x00000000 l4021E092
	// succ:  l4021E142 l4021E092
l4021E142:
	a2 = 0x4021E05C
	a9 = 0x4021E058
	a10 = Mem0[a1 + 0x00000030:word32]
	v23 = Mem0[a9 + 0x00000000:byte]
	a9 = (uint32) v23
	v25 = Mem0[a10 + 0x00000000:byte]
	a11 = (uint32) v25
	a9 = a9 << 8
	a9 = a9 >> 24
	a9 = a9 + a11
	Mem0[a10:byte] = a9
	v27 = Mem0[a2 + 0x0000006C:byte]
	a8 = (uint32) v27
	v28 = Mem0[a2 + 0x00000090:byte]
	a10 = (uint32) v28
	branch a8 == 1 l4021E18D
	// succ:  l4021E164 l4021E18D
l4021E164:
	branch a10 == 1 l4021E18D
	// succ:  l4021E167 l4021E18D
l4021E167:
	a5 = 0
	a13 = 0xFFFFFF80
	a6 = a13
	a2 = 0x4021E060
	a3 = 13
	a4 = Mem0[a1 + 0x00000030:word32]
	Mem0[a0 + 0x0000005B:byte] = a13
	Mem0[a0 + 0x0000007A:byte] = a5
	a0 = 0x4021E17E
	call sdk_ram_set_txbb_atten (retsize: 0;)
	a12 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000018:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_tx_atten_set_interp_exit
l4021E18D:
	v32 = Mem0[a2 + 0x00000063:byte]
	a11 = (uint32) v32
	v33 = Mem0[a2 + 0x00000067:byte]
	a14 = (uint32) v33
	branch a11 != 0x00000000 l4021E1AC
	// succ:  l4021E195 l4021E1AC
l4021E195:
	branch a12 <u 0x00000003 l4021E19B
	// succ:  l4021E198 l4021E19B
l4021E198:
	goto l4021E2BA
	// succ:  l4021E2BA
l4021E19B:
	a2 = 0x4021C30C
	v41 = Mem0[a2 + 0x00000052:byte]
	a2 = (uint32) v41
	a5 = 1
	a13 = a2 << 8
	a13 = a13 >> 24
	goto l4025E16C
	// succ:  l4025E16C
l4021E1AC:
	branch a14 <u a12 l4021E211
	// succ:  l4021E1AF l4021E211
l4021E1AF:
	a15 = 0x4021C30C
	v34 = Mem0[a2 + 0x00000065:byte]
	a13 = (uint32) v34
	a13 = a13 + a15
	v35 = Mem0[a13 + 0x00000050:byte]
	a13 = (uint32) v35
	v36 = Mem0[a2 + 0x00000068:byte]
	a15 = (uint32) v36
	a13 = a13 << 8
	a13 = a13 >> 24
	branch a15 != 1 l4021E20C
	// succ:  l4021E1C6 l4021E20C
l4021E1C6:
	a12 = 0x4021D26C
	a3 = 5
	v37 = Mem0[a12 + 0x00000062:byte]
	a2 = (uint32) v37
	v38 = Mem0[a12 + 0x0000005C:byte]
	a12 = (uint32) v38
	a2 = a2 << 8
	a2 = a2 >> 24
	a12 = a12 << 8
	a12 = a12 >> 24
	a2 = a2 - a12
	a2 = a14 * a2
	a0 = 0x40202548
	v39 = a0
	a0 = 0x4021E1E9
	call v39 (retsize: 0;)
	a3 = a12 + a2
	a3 = a3 << 8
	a2 = Mem0[a1 + 0x0000002C:word32]
	a3 = a3 >> 24
	a3 = a3 - a13
	a2 = a2 * a3
	a3 = a14
	a0 = 0x40202548
	v40 = a0
	a0 = 0x4021E201
	call v40 (retsize: 0;)
	a0 = 0x4021D26C
	a13 = a13 + a2
	a13 = a13 << 8
	a13 = a13 >> 24
	// succ:  l4021E20C
l4021E20C:
	a5 = 1
	goto l4025E16C
	// succ:  l4025E16C
l4021E211:
	v43 = Mem0[a2 + 0x00000066:byte]
	a3 = (uint32) v43
	a15 = 15
	a15 = a15 - a3
	branch a12 < a15 l4021E267
	// succ:  l4021E21C l4021E267
l4021E21C:
	a15 = 0x4021C30C
	v44 = Mem0[a2 + 0x00000064:byte]
	a13 = (uint32) v44
	a13 = a13 + a15
	v45 = Mem0[a13 + 0x00000062:byte]
	a13 = (uint32) v45
	v46 = Mem0[a2 + 0x00000068:byte]
	a4 = (uint32) v46
	a13 = a13 << 8
	a13 = a13 >> 24
	branch a4 != 1 l4021E20C
	// succ:  l4021E233 l4021E20C
l4021E233:
	v47 = Mem0[a0 + 0x00000068:byte]
	a15 = (uint32) v47
	a15 = a15 << 8
	a15 = a15 >> 24
	branch a12 >=u 0x0000000C l4021E26F
	// succ:  l4021E23F l4021E26F
l4021E23F:
	a2 = 0x4021D26C
	a3 = 8
	v48 = Mem0[a2 + 0x00000062:byte]
	a2 = (uint32) v48
	a3 = a3 - a14
	a2 = a2 << 8
	a2 = a2 >> 24
	Mem0[a1:word32] = a2
	a2 = a15 - a2
	a2 = a2 * a3
	a3 = 5
	a0 = 0x40202548
	v49 = a0
	a0 = 0x4021E260
	call v49 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a0 = a0 + a2
	goto l4021E293
	// succ:  l4021E293
l4021E267:
	a5 = 0
	a13 = 0xFFFFFF80
	goto l4025E16C
	// succ:  l4025E16C
l4021E26F:
	a2 = 0x4021D26C
	a3 = 3
	v51 = Mem0[a2 + 0x0000006E:byte]
	a2 = (uint32) v51
	a3 = a3 - a14
	a2 = a2 << 8
	a2 = a2 >> 24
	a2 = a2 - a15
	a2 = a2 * a3
	a2 = a2 + a2 * 0x00000004
	a3 = 22
	a0 = 0x40202548
	v52 = a0
	a0 = 0x4021E291
	call v52 (retsize: 0;)
	a0 = a15 + a2
	// succ:  l4021E293
l4021E293:
	a3 = 14
	a2 = a0 << 8
	a2 = a2 >> 24
	a3 = a3 - a12
	a2 = a2 - a13
	a2 = a2 * a3
	a3 = a14
	a0 = 0x40202548
	v50 = a0
	a0 = 0x4021E2AC
	call v50 (retsize: 0;)
	a0 = 0x4021D26C
	a13 = a13 + a2
	a13 = a13 << 8
	a13 = a13 >> 24
	goto l4025E20C
	// succ:  l4025E20C
l4021E2BA:
	branch a12 <u 0x0000000A l4021E2C6
	// succ:  l4021E2BD l4021E2C6
l4021E2BD:
	a2 = 0x4021C30C
	v42 = Mem0[a2 + 0x0000005E:byte]
	a2 = (uint32) v42
	goto l4025E1A1
	// succ:  l4025E1A1
l4021E2C6:
	a13 = 0xFFFFFF80
	a5 = 0
	// succ:  l4025E16C
l4025E16C:
l4025E1A1:
l4025E20C:
sdk_tx_atten_set_interp_exit:


// sdk_tx_pwctrl_init
// Return size: 0
void sdk_tx_pwctrl_init()
sdk_tx_pwctrl_init_entry:
	// succ:  l4021E2D8
l4021E2D8:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x0000001C:word32] = a14
	Mem0[a1 + 0x00000024:word32] = a2
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a0
	Mem0[a1 + 0x00000020:word32] = a15
	Mem0[a1 + 0x00000018:word32] = a13
	a13 = 0x4021D26C
	a15 = a2
	a0 = Mem0[a13 + 0x0000000C:word32]
	a12 = 0x4021D5C8
	a0 = a0 >>u 0x00000014 & 0x00000001
	branch a0 != 0x00000000 l4021E39F
	// succ:  l4021E2F9 l4021E39F
l4021E2F9:
	a14 = 0x4021BCEC
	a0 = Mem0[a14 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000A0:word32]
	v9 = a0
	a0 = 0x4021E304
	call v9 (retsize: 0;)
	a0 = Mem0[a14 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C0:word32]
	a2 = 1
	v10 = a0
	a0 = 0x4021E30E
	call v10 (retsize: 0;)
	v11 = Mem0[a12 + 0x00000002:uint16]
	a2 = (uint32) v11
	a2 = a2 & 0x00000FFF
	a0 = 0x4021E317
	call fn4031BE78 (retsize: 0;)
	v12 = Mem0[a12 + 0x00000002:uint16]
	a2 = (uint32) v12
	a3 = a1
	a4 = 1
	a0 = 0x4021E321
	call sdk_set_txdc_pbus (retsize: 0;)
	a0 = Mem0[a14 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000018:word32]
	a2 = 0
	v15 = a0
	a0 = 0x4021E32A
	call v15 (retsize: 0;)
	v16 = Mem0[a1 + 0x00000002:byte]
	a13 = (uint32) v16
	a12 = 0
	// succ:  l4021E32F
l4021E32F:
	branch a12 == 0x00000000 l4021E349
	// succ:  l4021E331 l4021E349
l4021E331:
	branch a12 == 1 l4021E344
	// succ:  l4021E334 l4021E344
l4021E334:
	branch a12 == 2 l4021E33F
	// succ:  l4021E337 l4021E33F
l4021E337:
	branch a12 != 3 l4021E34B
	// succ:  l4021E33A l4021E34B
l4021E33A:
	a13 = 14
	goto l4021E34B
	// succ:  l4021E34B
l4021E33F:
	a13 = 11
	goto l4021E34B
	// succ:  l4021E34B
l4021E344:
	a13 = 1
	goto l4021E34B
	// succ:  l4021E34B
l4021E349:
	a13 = 6
	// succ:  l4021E34B
l4021E34B:
	a3 = a15
	a2 = a13
	a0 = 0x4021E352
	call fn4031DEFC (retsize: 0;)
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	branch a12 != 4 l4021E32F
	// succ:  l4021E35A l4021E32F
l4021E35A:
	a0 = Mem0[a14 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C8:word32]
	v20 = a0
	a0 = 0x4021E362
	call v20 (retsize: 0;)
	a0 = Mem0[a14 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C4:word32]
	a13 = 0x4021D26C
	v21 = a0
	a0 = 0x4021E36D
	call v21 (retsize: 0;)
	a0 = Mem0[a14 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000BC:word32]
	v22 = a0
	a0 = 0x4021E375
	call v22 (retsize: 0;)
	a2 = 0x40204570
	a0 = Mem0[a13 + 0x0000000C:word32]
	a4 = 0x4021E2D4
	a5 = 0x4021E058
	a6 = 0x4021E2D0
	a3 = 0
	Mem0[a13 + 0x00000085:byte] = a3
	Mem0[a13 + 0x00000084:byte] = a3
	Mem0[a6 + 0x00000082:word16] = a3
	Mem0[a6 + 0x00000080:byte] = a3
	Mem0[a5:byte] = a3
	Mem0[a4:word16] = a3
	a0 = a0 | a2
	Mem0[a13 + 0x0000000C:word32] = a0
	goto l4021E3B8
	// succ:  l4021E3B8
l4021E39F:
	a3 = a1 | a1
	a4 = 0x00000000
	v17 = Mem0[a13 + 0x00000082:uint16]
	a2 = (uint32) v17
	Mem0[a12 + 0x00000002:word16] = a2
	a0 = 0x4021E3AE
	call sdk_set_txdc_pbus (retsize: 0;)
	v18 = Mem0[a12 + 0x00000002:uint16]
	a2 = (uint32) v18
	a3 = a1
	a0 = 0x4021E3B6
	call sdk_set_rfanagain_dc_reg (retsize: 0;)
	a0 = Mem0[a13 + 0x0000000C:word32]
	// succ:  l4021E3B8
l4021E3B8:
	branch (a0 & 0x08000000) != 0x00000000 l4021E3C3
	// succ:  l4021E3BB l4021E3C3
l4021E3BB:
	v19 = Mem0[a13 + 0x0000005A:byte]
	a2 = (uint32) v19
	a3 = a1 + 8
	a0 = 0x4021E3C3
	call fn4031E064 (retsize: 0;)
	// succ:  l4021E3C3
l4021E3C3:
	a12 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x00000018:word32]
	a14 = Mem0[a1 + 0x0000001C:word32]
	a15 = Mem0[a1 + 0x00000020:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_tx_pwctrl_init_exit
sdk_tx_pwctrl_init_exit:


// sdk_ram_get_noisefloor
// Return size: 0
void sdk_ram_get_noisefloor()
sdk_ram_get_noisefloor_entry:
	// succ:  l4021E3D4
l4021E3D4:
	a1 = fp
	a2 = 0x4021BDC0
	a2 = Mem0[a2 + 0x00000164:word32]
	a2 = a2 >>u 0x00000014 & 0x00000FFF
	a2 = a2 + 1
	a2 = a2 >>u 1
	a2 = a2 + 0xFFFFF800
	a2 = a2 << 16
	a2 = a2 >> 16
	return
	// succ:  sdk_ram_get_noisefloor_exit
sdk_ram_get_noisefloor_exit:


// sdk_get_noisefloor_sat
// Return size: 0
void sdk_get_noisefloor_sat()
sdk_get_noisefloor_sat_entry:
	// succ:  l4021E3F0
l4021E3F0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000028:word32]
	v4 = a0
	a0 = 0x4021E3FF
	call v4 (retsize: 0;)
	a5 = 0xFFFFFEAC
	a0 = 0xFFFFFE78
	branch a2 < a0 l4021E40A
	// succ:  l4021E408 l4021E40A
l4021E408:
	a0 = a2
	// succ:  l4021E40A
l4021E40A:
	a2 = a5
	branch a5 < a0 l4021E411
	// succ:  l4021E40F l4021E411
l4021E40F:
	a2 = a0
	// succ:  l4021E411
l4021E411:
	a0 = Mem0[a1 + 0x00000000:word32]
	a2 = a2 << 16
	a2 = a2 >> 16
	a1 = a1 + 16
	return
	// succ:  sdk_get_noisefloor_sat_exit
sdk_get_noisefloor_sat_exit:


// sdk_ram_set_noise_floor
// Return size: 0
void sdk_ram_set_noise_floor()
sdk_ram_set_noise_floor_entry:
	// succ:  l4021E420
l4021E420:
	a1 = fp
	a10 = -3
	a4 = 0x4021BDC0
	a9 = Mem0[a4 + 0x00000160:word32]
	a9 = a9 & a10
	Mem0[a4 + 0x00000160:word32] = a9
	a10 = a2 + 1
	a8 = a2 + 2
	branch a10 < 0x00000000 l4021E43B
	// succ:  l4021E438_1 l4021E43B
l4021E438_1:
	a8 = a10
	// succ:  l4021E43B
l4021E43B:
	a8 = a8 >> 1
	a9 = 0xFFFFFE00
	a8 = a8 + 0x00000200
	a8 = a8 & 0x000001FF
	a7 = Mem0[a4 + 0x00000164:word32]
	a7 = a7 & a9
	a7 = a7 | a8
	Mem0[a4 + 0x00000164:word32] = a7
	a6 = 0x4021DBAC
	a5 = 2
	a3 = Mem0[a4 + 0x00000160:word32]
	a3 = a3 & a6
	a3 = a3 | a5
	Mem0[a4 + 0x00000160:word32] = a3
	return
	// succ:  sdk_ram_set_noise_floor_exit
sdk_ram_set_noise_floor_exit:


// sdk_ram_start_noisefloor
// Return size: 0
void sdk_ram_start_noisefloor()
sdk_ram_start_noisefloor_entry:
	// succ:  l4021E47C
l4021E47C:
	a1 = fp
	a7 = 0x4021BDC0
	a3 = Mem0[a7 + 0x00000160:word32]
	a8 = 0x000001A0
	branch (a3 & 0x00000002) != 0x00000000 l4021E4BB
	// succ:  l4021E48B l4021E4BB
l4021E48B:
	a9 = a2 & 0x00000007
	a10 = 0x4021E474
	a9 = a9 << 23
	a6 = Mem0[a7 + 0x00000164:word32]
	a6 = a6 & a10
	a6 = a6 | a9
	a6 = a6 | a8
	Mem0[a7 + 0x00000164:word32] = a6
	a5 = 0x4021E478
	a4 = Mem0[a7 + 0x00000160:word32]
	a4 = a4 | a5
	Mem0[a7 + 0x00000160:word32] = a4
	// succ:  l4021E4BB
l4021E4BB:
	return
	// succ:  sdk_ram_start_noisefloor_exit
sdk_ram_start_noisefloor_exit:


// sdk_read_hw_noisefloor
// Return size: 0
void sdk_read_hw_noisefloor()
sdk_read_hw_noisefloor_entry:
	// succ:  l4021E4C8
l4021E4C8:
	a1 = fp
	a3 = 0x4021E4C0
	a2 = 0x4021E4C4
	a2 = Mem0[a2 + 0x00000224:word32]
	a2 = a2 & 0x00000FFF
	a2 = a2 + a3
	a2 = a2 >>u 1
	a2 = a2 << 16
	a2 = a2 >> 16
	return
	// succ:  sdk_read_hw_noisefloor_exit
sdk_read_hw_noisefloor_exit:


// sdk_noise_check_loop
// Return size: 0
void sdk_noise_check_loop()
sdk_noise_check_loop_entry:
	// succ:  l4021E4F4
l4021E4F4:
	a1 = fp
	a7 = 0x4021BDC0
	a6 = 0x00000200
	a8 = 0x4021E4E4
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	a12 = 0x4021D26C
	a0 = 0x4021BCEC
	a13 = a2
	a5 = Mem0[a7 + 0x00000164:word32]
	a5 = a5 & a8
	a5 = a5 | a6
	Mem0[a7 + 0x00000164:word32] = a5
	a5 = 5
	a4 = Mem0[a7 + 0x00000160:word32]
	a6 = 0x4021E4E8
	a4 = a4 >>u 15
	a4 = a4 & a5
	branch a4 == 5 l4021E53F
	// succ:  l4021E534 l4021E53F
l4021E534:
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000064:word32]
	v12 = a0
	a0 = 0x4021E53C
	call v12 (retsize: 0;)
	goto l4021E553
	// succ:  l4021E553
l4021E53F:
	v13 = Mem0[a6 + 0x00000000:uint16]
	a2 = (uint32) v13
	a4 = Mem0[a7 + 0x00000160:word32]
	branch (a4 & 0x00000002) == 0x00000000 l4021E569
	// succ:  l4021E54B l4021E569
l4021E54B:
	branch a2 >=u 0x0000000A l4021E56E
	// succ:  l4021E54E l4021E56E
l4021E54E:
	a0 = a2 + 1
	Mem0[a6:word16] = a0
	// succ:  l4021E553
l4021E553:
	a2 = 0x4021E4EC
	a4 = Mem0[a12 + 0x000001DC:word32]
	a3 = a2 + 9
	a0 = 0x4021E55E
	call fn4031D158 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_noise_check_loop_exit
l4021E569:
	Mem0[a1 + 0x0000000C:word32] = a3
	branch a2 <u 0x0000000A l4021E574
	// succ:  l4021E56E l4021E574
l4021E56E:
	a2 = 0xFFFFFEB0
	a2 = 0xFFFFFEB0
	goto l4021E583
	// succ:  l4021E583
l4021E574:
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000028:word32]
	v16 = a0
	a0 = 0x4021E57E
	call v16 (retsize: 0;)
	a3 = Mem0[a1 + 0x0000000C:word32]
	a6 = 0x4021E4E8
	// succ:  l4021E583
l4021E583:
	a4 = 0xFFFFFE6C
	branch a4 >= a2 l4021E5FC
	// succ:  l4021E589 l4021E5FC
l4021E589:
	v15 = Mem0[a6 + 0x00000000:uint16]
	a5 = (uint32) v15
	a7 = 0xFFFFFEAC
	branch a5 >=u 0x0000000A l4021E5A7
	// succ:  l4021E592 l4021E5A7
l4021E592:
	a0 = 0xFFFFFE78
	branch a2 < a0 l4021E59A
	// succ:  l4021E598 l4021E59A
l4021E598:
	a0 = a2
	// succ:  l4021E59A
l4021E59A:
	a2 = a7
	branch a7 < a0 l4021E5A1
	// succ:  l4021E59F l4021E5A1
l4021E59F:
	a2 = a0
	// succ:  l4021E5A1
l4021E5A1:
	a2 = a2 << 16
	a2 = a2 >> 16
	// succ:  l4021E5A7
l4021E5A7:
	v18 = Mem0[a12 + 0x00000080:int16]
	a0 = (int32) v18
	branch a0 >= a2 l4021E61B
	// succ:  l4021E5AD l4021E61B
l4021E5AD:
	a0 = a0 + a0 * 0x00000002
	a0 = a2 + a0
	a4 = a0 - 2
	a0 = a0 + 1
	branch a4 < 0x00000000 l4021E5BA
	// succ:  l4021E5B7_1 l4021E5BA
l4021E5B7_1:
	a0 = a4
	// succ:  l4021E5BA
l4021E5BA:
	a0 = a0 >> 2
	a0 = a0 << 16
	a0 = a0 >> 16
	Mem0[a12 + 0x00000080:word16] = a0
	// succ:  l4021E5C6
l4021E5C6:
	a2 = 0x4021E4F0
	v19 = Mem0[a2 + 0x00000080:byte]
	a2 = (uint32) v19
	branch a2 == 0x00000000 l4021E62A
	// succ:  l4021E5CF l4021E62A
l4021E5CF:
	a2 = 0xFFFFFE7C
	branch a2 >= a0 l4021E611
	// succ:  l4021E5D5 l4021E611
l4021E5D5:
	a4 = a0 + a2
	a2 = a4 + 1
	branch a4 < 0x00000000 l4021E5DC
	// succ:  l4021E5D9_2 l4021E5DC
l4021E5D9_2:
	a2 = a4
	// succ:  l4021E5DC
l4021E5DC:
	a2 = a2 >> 1
	a2 = a2 << 16
	a2 = a2 >> 16
	Mem0[a12 + 0x00000058:word16] = a2
	goto l4021E616
	// succ:  l4021E616
l4021E5EB:
	a0 = 0
	branch a3 == 0x00000000 l4021E5FC
	// succ:  l4021E5EF l4021E5FC
l4021E5EF:
	branch a0 == 0x00000000 l4021E5FC
	// succ:  l4021E5F1 l4021E5FC
l4021E5F1:
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000058:word32]
	v21 = a0
	a0 = 0x4021E5FC
	call v21 (retsize: 0;)
	// succ:  l4021E5FC
l4021E5FC:
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000064:word32]
	a2 = a13
	v17 = a0
	a0 = 0x4021E609
	call v17 (retsize: 0;)
	a6 = 0x4021E4E8
	a0 = 0
	goto l4025E550
	// succ:  l4025E550
l4021E611:
	a2 = a0
	Mem0[a12 + 0x00000058:word16] = a0
	// succ:  l4021E616
l4021E616:
	a0 = 1
	goto l4025E5ED
	// succ:  l4025E5ED
l4021E61B:
	branch a2 >= a0 l4021E5C6
	// succ:  l4021E61E l4021E5C6
l4021E61E:
	a4 = a0 - 16
	branch a2 >= a4 l4021E640
	// succ:  l4021E624 l4021E640
l4021E624:
	a0 = a0 - 12
	goto l4025E5BD
	// succ:  l4025E5BD
l4021E62A:
	v20 = Mem0[a12 + 0x00000058:int16]
	a2 = (int32) v20
	a5 = a2 + 8
	branch a5 < a0 l4021E638
	// succ:  l4021E632 l4021E638
l4021E632:
	a7 = a2 - 8
	branch a0 >= a7 l4021E5EB
	// succ:  l4021E638 l4021E5EB
l4021E638:
	a2 = a0
	Mem0[a12 + 0x00000058:word16] = a0
	goto l4025E616
	// succ:  l4025E616
l4021E640:
	a4 = a2 + a2 * 0x00000002
	a0 = a0 + a4
	a4 = a0 - 2
	a0 = a0 + 1
	branch a4 < 0x00000000 l4021E64D
	// succ:  l4021E64A_1 l4021E64D
l4021E64A_1:
	a0 = a4
	// succ:  l4021E64D
l4021E64D:
	a0 = a0 >> 2
	goto l4025E5BD
	// succ:  l4025E5BD
l4025E550:
l4025E5BD:
l4025E5ED:
l4025E616:
sdk_noise_check_loop_exit:


// sdk_noise_init
// Return size: 0
void sdk_noise_init()
sdk_noise_init_entry:
	// succ:  l4021E65C
l4021E65C:
	a1 = fp
	a8 = a2 | a2
	a9 = 0x4021BCEC
	a1 = a1 - 64
	Mem0[a1 + 0x00000014:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x00000024:word32] = a15
	Mem0[a1 + 0x0000001C:word32] = a13
	a15 = 0xFFFFFC00
	a13 = 0x4021D26C
	a14 = a3
	a12 = 0x000000C9
	a3 = a4
	a4 = Mem0[a1 + 0x00000040:word32]
	a9 = Mem0[a9 + 0x00000000:word32]
	a0 = Mem0[a4 + 0x00000000:word32]
	a9 = Mem0[a9 + 0x00000058:word32]
	a0 = a0 >>u 0x00000015 & 0x00000001
	branch a0 != 0x00000000 l4021E81E
	// succ:  l4021E68E l4021E81E
l4021E68E:
	a2 = 0xFFFFFE7C
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1:word32] = a4
	Mem0[a1 + 0x00000034:word32] = a8
	Mem0[a1 + 0x00000030:word32] = a3
	Mem0[a1 + 0x0000002C:word32] = a5
	a0 = 0x4021E69E
	call a9 (retsize: 0;)
	a9 = 0xFFFFFE7C
	a10 = 0x4021BDC0
	a3 = Mem0[a10 + 0x00000034:word32]
	a3 = a3 & a15
	a3 = a3 | a12
	Mem0[a10 + 0x00000034:word32] = a3
	a0 = Mem0[a10 + 0x00000034:word32]
	a2 = -2
	a0 = a0 & a2
	Mem0[a10 + 0x00000034:word32] = a0
	a0 = 0x4021E654
	a8 = 0xFFFFFEAC
	a10 = Mem0[a10 + 0x00000160:word32]
	a11 = 0
	Mem0[a1 + 0x00000028:word32] = a11
	Mem0[a13 + 0x00000058:word16] = a9
	// succ:  l4021E6D6
l4021E6D6:
	a4 = Mem0[a1 + 0x00000028:word32]
	a5 = a4 + 1
	a6 = a0 + a4 * 0x00000002
	Mem0[a6:word16] = a8
	a4 = a5 & 0x000000FF
	Mem0[a1 + 0x00000028:word32] = a4
	branch a4 != 4 l4021E6D6
	// succ:  l4021E6E8 l4021E6D6
l4021E6E8:
	a9 = 0x4021BDC0
	a3 = Mem0[a9 + 0x0000002C:word32]
	Mem0[a1 + 0x00000008:word32] = a3
	a2 = Mem0[a9 + 0x00000320:word32]
	Mem0[a1 + 0x0000000C:word32] = a2
	a15 = Mem0[a9 + 0x00000340:word32]
	Mem0[a1 + 0x00000010:word32] = a15
	a11 = Mem0[a9 + 0x0000002C:word32]
	a12 = -2
	a11 = a11 & a12
	Mem0[a9 + 0x0000002C:word32] = a11
	a10 = 0x4021E658
	a8 = Mem0[a9 + 0x00000320:word32]
	a8 = a8 & a10
	Mem0[a9 + 0x00000320:word32] = a8
	a12 = 0x4021319C
	a7 = 0
	Mem0[a1 + 0x00000028:word32] = a7
	// succ:  l4021E72A
l4021E72A:
	a15 = Mem0[a12 + 0x00000200:word32]
	a4 = Mem0[a1 + 0x00000028:word32]
	a2 = 14
	a3 = a4 + a4 * 0x00000004
	a4 = a4 - 3
	a3 = a3 + 1
	branch a4 == 0x00000000 l4021E73F
	// succ:  l4021E73C_1 l4021E73F
l4021E73C_1:
	a2 = a3
	// succ:  l4021E73F
l4021E73F:
	a2 = a2 << 8
	a2 = a2 >> 24
	a0 = 0x4021E748
	call fn4031CA50 (retsize: 0;)
	a0 = 0x4021BDC0
	a13 = Mem0[a1 + 0x00000028:word32]
	a4 = Mem0[a0 + 0x00000160:word32]
	branch a14 == 0x00000000 l4021E784
	// succ:  l4021E755 l4021E784
l4021E755:
	a0 = 0x4021E654
	a12 = 0
	a13 = a0 + a13 * 0x00000002
	// succ:  l4021E75D
l4021E75D:
	a4 = a15
	a2 = Mem0[a1 + 0x00000034:word32]
	a3 = Mem0[a1 + 0x00000030:word32]
	a5 = Mem0[a1 + 0x0000002C:word32]
	a0 = 0x4021E768
	call fn4031DBE4 (retsize: 0;)
	branch a2 != 0x00000000 l4021E77E
	// succ:  l4021E76A l4021E77E
l4021E76A:
	a0 = 0x4021E76D
	call fn4031E3F0 (retsize: 0;)
	v18 = Mem0[a13 + 0x00000000:int16]
	a4 = (int32) v18
	a12 = a12 + 1
	branch a2 >= a4 l4021E778
	// succ:  l4021E775 l4021E778
l4021E775:
	Mem0[a13:word16] = a2
	// succ:  l4021E778
l4021E778:
	a12 = a12 & 0x000000FF
	branch a14 != a12 l4021E75D
	// succ:  l4021E77E l4021E75D
l4021E77E:
	a0 = 0x4021BDC0
	a12 = 0x4021319C
	a0 = 0x4021BDC0
	a12 = 0x4021319C
	// succ:  l4021E784
l4021E784:
	a2 = Mem0[a0 + 0x00000034:word32]
	a3 = -2
	a2 = a2 & a3
	a13 = Mem0[a1 + 0x00000028:word32]
	Mem0[a0 + 0x00000034:word32] = a2
	a15 = a13 + 1
	a13 = a15 & 0x000000FF
	Mem0[a1 + 0x00000028:word32] = a13
	branch a13 != 4 l4021E72A
	// succ:  l4021E79F l4021E72A
l4021E79F:
	a6 = 0x4021BDC0
	a8 = Mem0[a1 + 0x00000008:word32]
	Mem0[a6 + 0x0000002C:word32] = a8
	a7 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a6 + 0x00000320:word32] = a7
	a5 = Mem0[a1 + 0x00000010:word32]
	a4 = Mem0[a1 + 0x00000004:word32]
	Mem0[a6 + 0x00000340:word32] = a5
	branch a4 == 0x00000000 l4021E7FD
	// succ:  l4021E7BD l4021E7FD
l4021E7BD:
	a0 = 0x4021E654
	a2 = 0xFFFFFFD8
	a9 = 0
	Mem0[a1 + 0x00000028:word32] = a9
	a10 = a2 << 16
	// succ:  l4021E7CA
l4021E7CA:
	a10 = a10 >> 16
	a3 = Mem0[a1 + 0x00000028:word32]
	a4 = Mem0[a1 + 0x00000028:word32]
	a3 = a0 + a3 * 0x00000002
	a5 = a4 + 1
	a4 = a5 & 0x000000FF
	v20 = Mem0[a3 + 0x00000000:int16]
	a3 = (int32) v20
	Mem0[a1 + 0x00000028:word32] = a4
	branch a3 >= a10 l4021E7E3
	// succ:  l4021E7E1 l4021E7E3
l4021E7E1:
	a2 = a3
	// succ:  l4021E7E3
l4021E7E3:
	a10 = a2 << 16
	branch a4 != 4 l4021E7CA
	// succ:  l4021E7E9 l4021E7CA
l4021E7E9:
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = 0x4021D26C
	a0 = Mem0[a0 + 0x00000058:word32]
	Mem0[a3 + 0x00000058:word16] = a2
	v21 = a0
	a0 = 0x4021E7FA
	call v21 (retsize: 0;)
	goto l4021E806
	// succ:  l4021E806
l4021E7FD:
	a3 = 0x4021D26C
	a2 = 0xFFFFFE7C
	Mem0[a3 + 0x00000058:word16] = a2
	// succ:  l4021E806
l4021E806:
	a8 = 0x4021A09C
	a7 = Mem0[a1 + 0x00000000:word32]
	a5 = 0x4021D26C
	a6 = Mem0[a7 + 0x00000000:word32]
	v22 = Mem0[a5 + 0x00000058:int16]
	a4 = (int32) v22
	a6 = a6 | a8
	Mem0[a7:word32] = a6
	Mem0[a5 + 0x00000080:word16] = a4
	goto l4021E84C
	// succ:  l4021E84C
l4021E81E:
	v19 = Mem0[a13 + 0x00000058:int16]
	a2 = (int32) v19
	a0 = 0x4021E824
	call a9 (retsize: 0;)
	a9 = 0x4021BDC0
	a13 = Mem0[a9 + 0x00000034:word32]
	a13 = a13 & a15
	a13 = a13 | a12
	Mem0[a9 + 0x00000034:word32] = a13
	a10 = Mem0[a9 + 0x00000034:word32]
	a11 = -2
	a10 = a10 & a11
	Mem0[a9 + 0x00000034:word32] = a10
	a9 = Mem0[a9 + 0x00000160:word32]
	// succ:  l4021E84C
l4021E84C:
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x0000001C:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x00000024:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_noise_init_exit
sdk_noise_init_exit:


// sdk_target_power_backoff
// Return size: 0
void sdk_target_power_backoff()
sdk_target_power_backoff_entry:
	// succ:  l4021E85C
l4021E85C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a12
	a3 = a1 | a1
	a12 = a2 | a2
	a2 = 0x4021D26C
	Mem0[a1 + 0x00000008:word32] = a0
	v7 = Mem0[a2 + 0x0000005A:byte]
	a2 = (uint32) v7
	a0 = 0x4021E873
	call fn4031E064 (retsize: 0;)
	a0 = 0x4021D26C
	a2 = 0
	a5 = a1
	// succ:  l4021E87A
l4021E87A:
	a6 = a2 + 1
	a4 = a2 + a5
	v11 = Mem0[a4 + 0x00000000:byte]
	a3 = (uint32) v11
	a2 = a6 & 0x000000FF
	a3 = a3 + a12
	Mem0[a4:byte] = a3
	branch a2 != 6 l4021E87A
	// succ:  l4021E88C l4021E87A
l4021E88C:
	a2 = 0x4021E060
	a3 = 13
	a4 = a1
	v12 = Mem0[a0 + 0x0000005B:byte]
	a6 = (uint32) v12
	v13 = Mem0[a0 + 0x0000007A:byte]
	a5 = (uint32) v13
	a6 = a6 << 8
	a6 = a6 >> 24
	a0 = 0x4021E8A2
	call sdk_ram_set_txbb_atten (retsize: 0;)
	a12 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_target_power_backoff_exit
sdk_target_power_backoff_exit:


// sdk_sdt_on_noise_start
// Return size: 0
void sdk_sdt_on_noise_start()
sdk_sdt_on_noise_start_entry:
	// succ:  l4021E8B0
l4021E8B0:
	a1 = fp
	a7 = a2 | a2
	a1 = a1 - 32
	Mem0[a1:word32] = a3
	a2 = 0x4021E8AC
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a13
	a12 = a5
	a13 = a4
	Mem0[a1 + 0x00000010:word32] = a7
	a0 = 0x4021262C
	v11 = a0
	a0 = 0x4021E8CF
	call v11 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000010:word32]
	// succ:  l4021E8D1
l4021E8D1:
	a2 = Mem0[a13 + 0x00000000:word32]
	branch a2 != a12 l4021E8D1
	// succ:  l4021E8D9 l4021E8D1
l4021E8D9:
	a2 = a0
	a0 = 0x4021E8DE
	call fn40303F28 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a4 = 5
	a2 = 0x4021BDC0
	a3 = Mem0[a2 + 0x00000160:word32]
	a3 = a3 >>u 15
	a3 = a3 & a4
	branch a3 != 5 l4021E908
	// succ:  l4021E8F4 l4021E908
l4021E8F4:
	a5 = -3
	a4 = Mem0[a2 + 0x00000160:word32]
	a4 = a4 & a5
	Mem0[a2 + 0x00000160:word32] = a4
	goto l4021E90E
	// succ:  l4021E90E
l4021E908:
	a6 = Mem0[a2 + 0x00000160:word32]
	// succ:  l4021E90E
l4021E90E:
	a7 = 0x4021BCEC
	a7 = Mem0[a7 + 0x00000000:word32]
	a7 = Mem0[a7 + 0x00000064:word32]
	a2 = a0 & 0x000000FF
	a0 = 0x4021E91C
	call a7 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_sdt_on_noise_start_exit
sdk_sdt_on_noise_start_exit:


// sdk_chip_v6_set_chan_rx_cmp
// Return size: 0
void sdk_chip_v6_set_chan_rx_cmp()
sdk_chip_v6_set_chan_rx_cmp_entry:
	// succ:  l4021E934
l4021E934:
	a1 = fp
	a4 = 0
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a14
	Mem0[a1 + 0x00000010:word32] = a13
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a12
	a0 = 0x4021E92C
	a12 = a2
	a13 = a3
	a2 = 2
	a3 = 0x4021E928
	v10 = Mem0[a0 + 0x0000007D:byte]
	a14 = (uint32) v10
	a4 = a4 + a3
	a14 = a14 << 8
	a2 = a2 + a3
	v11 = Mem0[a4 + 0x00000000:uint16]
	a4 = (uint32) v11
	Mem0[a1:word16] = a4
	v12 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v12
	a14 = a14 >> 24
	Mem0[a1 + 0x00000002:byte] = a2
	a2 = 13
	branch a12 >= 7 l4021E98F
	// succ:  l4021E96B l4021E98F
l4021E96B:
	a3 = 5
	a4 = a0
	v13 = Mem0[a4 + 0x0000007C:byte]
	a4 = (uint32) v13
	a2 = a12 - 1
	a4 = a4 << 8
	a4 = a4 >> 24
	Mem0[a1 + 0x00000004:word32] = a4
	a4 = a14 - a4
	a2 = a2 * a4
	a0 = 0x40202548
	v14 = a0
	a0 = 0x4021E988
	call v14 (retsize: 0;)
	a14 = Mem0[a1 + 0x00000004:word32]
	a14 = a14 + a2
	goto l4021E9B1
	// succ:  l4021E9B1
l4021E98F:
	v15 = Mem0[a0 + 0x0000007E:byte]
	a3 = (uint32) v15
	a3 = a3 << 8
	a3 = a3 >> 24
	a3 = a3 - a14
	branch a2 >= a12 l4021E9A1
	// succ:  l4021E99E l4021E9A1
l4021E99E:
	goto l4021EAAB
	// succ:  l4021EAAB
l4021E9A1:
	a2 = a12 - 6
	a2 = a3 * a2
	a3 = 5
	a0 = 0x40202548
	v35 = a0
	a0 = 0x4021E9AF
	call v35 (retsize: 0;)
	a14 = a14 + a2
	// succ:  l4021E9B1
l4021E9B1:
	branch a13 != 1 l4021E9BF
	// succ:  l4021E9B4 l4021E9BF
l4021E9B4:
	a13 = -6
	Mem0[a1:byte] = a13
	Mem0[a1 + 0x00000002:byte] = a13
	goto l4021E9E3
	// succ:  l4021E9E3
l4021E9BF:
	a3 = a13 - 2
	branch a3 != 0x00000000 l4021EA7F
	// succ:  l4021E9C5 l4021EA7F
l4021E9C5:
	a0 = 0x4021E92C
	v17 = Mem0[a0 + 0x0000007F:byte]
	a3 = (uint32) v17
	Mem0[a1:byte] = a3
	v18 = Mem0[a0 + 0x00000080:byte]
	a2 = (uint32) v18
	Mem0[a1 + 0x00000001:byte] = a2
	v19 = Mem0[a0 + 0x00000081:byte]
	a0 = (uint32) v19
	Mem0[a1 + 0x00000002:byte] = a0
	// succ:  l4021E9DA
l4021E9DA:
	v20 = Mem0[a1 + 0x00000001:byte]
	a13 = (uint32) v20
	a13 = a13 << 8
	a13 = a13 >> 24
	// succ:  l4021E9E3
l4021E9E3:
	branch a12 >= 7 l4021EA13
	// succ:  l4021E9E6 l4021EA13
l4021E9E6:
	v21 = Mem0[a1 + 0x00000000:byte]
	a3 = (uint32) v21
	a2 = a12 - 1
	a3 = a3 << 8
	a3 = a3 >> 24
	a3 = a3 << 8
	a3 = a3 >> 24
	a3 = a13 - a3
	a2 = a2 * a3
	a3 = 5
	a0 = 0x40202548
	v22 = a0
	a0 = 0x4021EA05
	call v22 (retsize: 0;)
	v23 = Mem0[a1 + 0x00000000:byte]
	a0 = (uint32) v23
	a0 = a0 << 8
	a0 = a0 >> 24
	a0 = a0 + a2
	goto l4021EA34
	// succ:  l4021EA34
l4021EA13:
	v30 = Mem0[a1 + 0x00000002:byte]
	a0 = (uint32) v30
	a2 = 13
	a0 = a0 << 8
	a0 = a0 >> 24
	a0 = a0 - a13
	branch a2 < a12 l4021EA9A
	// succ:  l4021EA24 l4021EA9A
l4021EA24:
	a3 = 5
	a2 = a12 - 6
	a2 = a0 * a2
	a0 = 0x40202548
	v31 = a0
	a0 = 0x4021EA32
	call v31 (retsize: 0;)
	a0 = a2 + a13
	// succ:  l4021EA34
l4021EA34:
	a10 = 0x4021E930
	a9 = a14 + a0
	a4 = 0x4021BDC0
	a9 = a9 & 0x000000FF
	a9 = a9 << 22
	a8 = Mem0[a4 + 0x00000368:word32]
	a8 = a8 & a10
	a8 = a8 | a9
	Mem0[a4 + 0x00000368:word32] = a8
	a7 = 1
	a6 = Mem0[a4 + 0x00000034:word32]
	a6 = a6 | a7
	Mem0[a4 + 0x00000034:word32] = a6
	a5 = -2
	a3 = Mem0[a4 + 0x00000034:word32]
	a3 = a3 & a5
	Mem0[a4 + 0x00000034:word32] = a3
	a12 = Mem0[a1 + 0x0000000C:word32]
	a13 = Mem0[a1 + 0x00000010:word32]
	a14 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_chip_v6_set_chan_rx_cmp_exit
l4021EA7F:
	a10 = a13 - 3
	branch a10 != 0x00000000 l4021E9DA
	// succ:  l4021EA85 l4021E9DA
l4021EA85:
	a0 = 0x4021E92C
	v32 = Mem0[a0 + 0x00000082:byte]
	a3 = (uint32) v32
	Mem0[a1:byte] = a3
	v33 = Mem0[a0 + 0x00000083:byte]
	a2 = (uint32) v33
	Mem0[a1 + 0x00000001:byte] = a2
	v34 = Mem0[a0 + 0x00000084:byte]
	a0 = (uint32) v34
	goto l4025E9D7
	// succ:  l4025E9D7
l4021EA9A:
	a3 = 5
	a2 = a12 - 2
	a2 = a0 * a2
	a0 = 0x40202548
	v36 = a0
	a0 = 0x4021EAA8
	call v36 (retsize: 0;)
	goto l4025EA32
	// succ:  l4025EA32
l4021EAAB:
	a2 = a12 - 2
	a2 = a3 * a2
	a3 = 5
	a0 = 0x40202548
	v16 = a0
	a0 = 0x4021EAB9
	call v16 (retsize: 0;)
	// succ:  l4025E9AF
l4025E9AF:
l4025E9D7:
l4025EA32:
sdk_chip_v6_set_chan_rx_cmp_exit:


// sdk_chip_v6_set_chan_misc
// Return size: 0
void sdk_chip_v6_set_chan_misc()
sdk_chip_v6_set_chan_misc_entry:
	// succ:  l4021EABC
l4021EABC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4021D26C
	a0 = Mem0[a0 + 0x0000000C:word32]
	Mem0[a1 + 0x00000008:word32] = a2
	branch (a0 & 0x00040000) == 0x00000000 l4021EADB
	// succ:  l4021EACB l4021EADB
l4021EACB:
	a3 = 0x4021D26C
	a2 = a2 + a2 * 0x00000002
	a3 = a3 + 41
	a2 = a2 + a3
	a0 = 0x4021EAD9
	call fn4031C3B8 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000008:word32]
	// succ:  l4021EADB
l4021EADB:
	a4 = 0x4021319C
	a4 = Mem0[a4 + 0x00000270:word32]
	branch (a4 & 0x00000002) == 0x00000000 l4021EB0D
	// succ:  l4021EAE7 l4021EB0D
l4021EAE7:
	a2 = a2 & 0x000000FF
	a3 = a1
	a0 = 0x4021EAEF
	call fn4031E064 (retsize: 0;)
	a0 = 0x4021EAF2
	call sdk_dpd_scale_set (retsize: 0;)
	a2 = 0
	a0 = 0x4021EAF7
	call sdk_chip_v6_rxmax_ext (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = 0x4021D26C
	a0 = Mem0[a0 + 0x00000058:word32]
	v7 = Mem0[a2 + 0x00000058:int16]
	a2 = (int32) v7
	v8 = a0
	a0 = 0x4021EB08
	call v8 (retsize: 0;)
	a2 = 30
	a0 = 0x4021EB0D
	call fn40303F28 (retsize: 0;)
	// succ:  l4021EB0D
l4021EB0D:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_chip_v6_set_chan_misc_exit
sdk_chip_v6_set_chan_misc_exit:


// sdk_phy_dig_spur_set
// Return size: 0
void sdk_phy_dig_spur_set()
sdk_phy_dig_spur_set_entry:
	// succ:  l4021EB2C
l4021EB2C:
	a1 = fp
	a1 = a1 - 80
	Mem0[a1 + 0x00000034:word32] = a14
	Mem0[a1 + 0x00000038:word32] = a15
	Mem0[a1 + 0x0000001C:word32] = a2
	Mem0[a1 + 0x00000030:word32] = a13
	Mem0[a1 + 0x0000002C:word32] = a12
	a12 = 0x4021EB14
	Mem0[a1 + 0x00000028:word32] = a0
	v9 = Mem0[a12 + 0x0000005F:byte]
	a0 = (uint32) v9
	a13 = a3
	branch a0 != 0x00000000 l4021EB4A
	// succ:  l4021EB45 l4021EB4A
l4021EB45:
	a14 = 40
	goto l4021EB5C
	// succ:  l4021EB5C
l4021EB4A:
	branch a0 != 1 l4021EB52
	// succ:  l4021EB4D l4021EB52
l4021EB4D:
	a14 = 26
	goto l4021EB5C
	// succ:  l4021EB5C
l4021EB52:
	a3 = a0 - 2
	a2 = 24
	a14 = 40
	branch a3 != 0x00000000 l4021EB5C
	// succ:  l4021EB59_1 l4021EB5C
l4021EB59_1:
	a14 = a2
	// succ:  l4021EB5C
l4021EB5C:
	a2 = a13
	a3 = a14
	a0 = 0x402044A4
	v11 = a0
	a0 = 0x4021EB66
	call v11 (retsize: 0;)
	branch a2 >= 10 l4021EB84
	a2 = a13
	a3 = a14
	a0 = 0x402044A4
	v13 = a0
	a0 = 0x4021EB66
	call v13 (retsize: 0;)
	branch a2 >= 10 l4021EB84
	// succ:  l4021EB69 l4021EB84
l4021EB69:
	a2 = a13
	a3 = a14
	a0 = 0x40202548
	v12 = a0
	a0 = 0x4021EB73
	call v12 (retsize: 0;)
	a0 = a14 * a2
	a0 = a0 - a13
	a0 = a0 + a0 * 0x00000004
	a2 = a0 << 31
	Mem0[a1 + 0x00000018:word32] = a2
	a2 = a13
	a3 = a14
	a0 = 0x40202548
	v14 = a0
	a0 = 0x4021EB73
	call v14 (retsize: 0;)
	a0 = a14 * a2
	a0 = a0 - a13
	a0 = a0 + a0 * 0x00000004
	a2 = a0 << 31
	Mem0[a1 + 0x00000018:word32] = a2
	goto l4021EBA7
	// succ:  l4021EBA7
l4021EB84:
	a4 = a14 - a2
	branch a4 >= 10 l4021EBA2
	// succ:  l4021EB8A l4021EBA2
l4021EB8A:
	a2 = a13
	a3 = a14
	a0 = 0x40202548
	v22 = a0
	a0 = 0x4021EB94
	call v22 (retsize: 0;)
	a0 = a2 + 1
	a0 = a14 * a0
	a0 = a0 - a13
	a0 = a0 + a0 * 0x00000004
	goto l4025EB7C
	// succ:  l4025EB7C
l4021EBA2:
	a2 = 0x00000000
	Mem0[a1 + 0x00000018:word32] = a2
	// succ:  l4021EBA7
l4021EBA7:
	v15 = Mem0[a12 + 0x0000007B:byte]
	a3 = (uint32) v15
	v16 = Mem0[a12 + 0x0000009E:byte]
	a2 = (uint32) v16
	branch a3 == 0x00000000 l4021EC20
	// succ:  l4021EBB0 l4021EC20
l4021EBB0:
	Mem0[a1 + 0x00000014:word32] = a3
	v17 = Mem0[a12 + 0x0000007A:byte]
	a15 = (uint32) v17
	a2 = a2 << 24
	a15 = a15 + a2
	branch a15 == 0x00000000 l4021EC20
	// succ:  l4021EBBD l4021EC20
l4021EBBD:
	a2 = a3
	a14 = -10
	a14 = a14 * a13
	v18 = (uint16) a2
	v19 = (uint16) a13
	a2 = v18 *u v19
	a3 = a3 + a3 * 0x00000004
	a3 = a3 << 31
	Mem0[a1 + 0x00000040:word32] = a2
	Mem0[a1 + 0x00000048:word32] = a3
	a3 = a15
	a0 = 0x402044A4
	v20 = a0
	a0 = 0x4021EBDB
	call v20 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000048:word32]
	a4 = Mem0[a1 + 0x00000040:word32]
	branch a2 < a0 l4021EBE7
	// succ:  l4021EBE4 l4021EBE7
l4021EBE4:
	goto l4021ED12
	// succ:  l4021ED12
l4021EBE7:
	a2 = a4
	a3 = a15
	a0 = 0x40202548
	v36 = a0
	a0 = 0x4021EBF1
	call v36 (retsize: 0;)
	a0 = 0x4021EBF4
	call fn403113C4 (retsize: 0;)
	Mem0[a1 + 0x00000008:word32] = a2
	a2 = a15
	a0 = 0x4021EBFB
	call fn403113C4 (retsize: 0;)
	a15 = a2
	a2 = Mem0[a1 + 0x00000014:word32]
	a0 = 0x4021EC02
	call fn403113BC (retsize: 0;)
	a3 = a2
	a2 = a15
	a0 = 0x4021EC09
	call fn403046E0 (retsize: 0;)
	a3 = a2
	a2 = Mem0[a1 + 0x00000008:word32]
	a0 = 0x4021EC10
	call fn4031076C (retsize: 0;)
	a15 = 0x4021EB18
	a3 = Mem0[a15 + 0x00000000:word32]
	a0 = 0x4021EC18
	call fn4031076C (retsize: 0;)
	a0 = 0x4021EC1B
	call fn40310854 (retsize: 0;)
	a15 = a14 + a2
	goto l4021EC28
	// succ:  l4021EC28
l4021EC20:
	a15 = 0x00000000
	a14 = -10
	a14 = a14 * a13
	// succ:  l4021EC28
l4021EC28:
	v23 = Mem0[a12 + 0x0000009A:byte]
	a0 = (uint32) v23
	Mem0[a1 + 0x0000004C:word32] = a15
	branch a0 == 0x00000000 l4021EC9E
	// succ:  l4021EC31 l4021EC9E
l4021EC31:
	Mem0[a1 + 0x00000010:word32] = a0
	v24 = Mem0[a12 + 0x0000009F:byte]
	a2 = (uint32) v24
	v25 = Mem0[a12 + 0x00000099:byte]
	a15 = (uint32) v25
	a2 = a2 << 24
	a15 = a15 + a2
	branch a15 == 0x00000000 l4021EC9E
	// succ:  l4021EC41 l4021EC9E
l4021EC41:
	a3 = a15
	v26 = (uint16) a0
	v27 = (uint16) a13
	a2 = v26 *u v27
	Mem0[a1 + 0x00000044:word32] = a2
	a13 = a0 + a0 * 0x00000004
	a13 = a13 << 31
	a0 = 0x402044A4
	v28 = a0
	a0 = 0x4021EC55
	call v28 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000044:word32]
	branch a2 < a13 l4021EC5E
	// succ:  l4021EC5B l4021EC5E
l4021EC5B:
	goto l4021ED57
	// succ:  l4021ED57
l4021EC5E:
	a3 = a15
	a2 = a0
	a0 = 0x40202548
	v32 = a0
	a0 = 0x4021EC68
	call v32 (retsize: 0;)
	a0 = 0x4021EC6B
	call fn403113C4 (retsize: 0;)
	Mem0[a1 + 0x0000000C:word32] = a2
	a13 = Mem0[a1 + 0x00000010:word32]
	a2 = a15
	a0 = 0x4021EC74
	call fn403113C4 (retsize: 0;)
	a15 = a2
	a2 = a13
	a0 = 0x4021EC7B
	call fn403113BC (retsize: 0;)
	a3 = a2
	a13 = Mem0[a1 + 0x0000000C:word32]
	a2 = a15
	a0 = 0x4021EC84
	call fn403046E0 (retsize: 0;)
	a3 = a2
	a2 = a13
	a0 = 0x4021EC8B
	call fn4031076C (retsize: 0;)
	a3 = 0x4021EB18
	a3 = Mem0[a3 + 0x00000000:word32]
	a0 = 0x4021EC93
	call fn4031076C (retsize: 0;)
	a0 = 0x4021EC96
	call fn40310854 (retsize: 0;)
	a15 = Mem0[a1 + 0x0000004C:word32]
	a3 = a14 + a2
	goto l4021ECA3
	// succ:  l4021ECA3
l4021EC9E:
	a15 = Mem0[a1 + 0x0000004C:word32]
	a3 = 0
	// succ:  l4021ECA3
l4021ECA3:
	Mem0[a1 + 0x0000003C:word32] = a3
	a2 = 0x4021EB1C
	v33 = Mem0[a12 + 0x000000A0:uint16]
	a13 = (uint32) v33
	a0 = 0x4021BCEC
	a13 = a14 + a13
	a0 = Mem0[a0 + 0x00000000:word32]
	a13 = a13 + a2
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a13
	v34 = a0
	a0 = 0x4021ECBB
	call v34 (retsize: 0;)
	a0 = 0x4021EB1C
	a4 = 0x4021BCEC
	a3 = 0
	a5 = 0x00000064
	branch a2 < a5 l4021ECCB
	// succ:  l4021ECC9 l4021ECCB
l4021ECC9:
	a13 = a3
	// succ:  l4021ECCB
l4021ECCB:
	v37 = Mem0[a12 + 0x000000A2:uint16]
	a3 = (uint32) v37
	a2 = Mem0[a4 + 0x00000000:word32]
	a14 = a14 + a3
	a14 = a14 + a0
	a0 = Mem0[a2 + 0x00000000:word32]
	a2 = a14
	v38 = a0
	a0 = 0x4021ECDB
	call v38 (retsize: 0;)
	a3 = Mem0[a1 + 0x0000003C:word32]
	a0 = Mem0[a1 + 0x0000001C:word32]
	v39 = Mem0[a12 + 0x0000007C:uint16]
	a4 = (uint32) v39
	a0 = a0 - 1
	SAR = a0
	a4 = a0 >> SAR
	branch (a4 & 0x00000001) == 0x00000000 l4021ECF0
	// succ:  l4021ECED l4021ECF0
l4021ECED:
	branch a15 != 0x00000000 l4021EE0F
	// succ:  l4021ECF0 l4021EE0F
l4021ECF0:
	v41 = Mem0[a12 + 0x0000009C:uint16]
	a4 = (uint32) v41
	SAR = a0
	a4 = a0 >> SAR
	branch (a4 & 0x00000001) == 0x00000000 l4021ECFF
	// succ:  l4021ECFC l4021ECFF
l4021ECFC:
	branch a3 != 0x00000000 l4021EE21
	// succ:  l4021ECFF l4021EE21
l4021ECFF:
	branch a13 != 0x00000000 l4021ED9A
	// succ:  l4021ED02 l4021ED9A
l4021ED02:
	a5 = 0x00000064
	branch a2 < a5 l4021ED0A
	// succ:  l4021ED08 l4021ED0A
l4021ED08:
	a14 = 0
	// succ:  l4021ED0A
l4021ED0A:
	a12 = Mem0[a1 + 0x00000018:word32]
	branch a14 == 0x00000000 l4021ED0F
	// succ:  l4021ED0C_1 l4021ED0F
l4021ED0C_1:
	a12 = a14
	// succ:  l4021ED0F
l4021ED0F:
	goto l4021ED9D
	// succ:  l4021ED9D
l4021ED12:
	a6 = a15 - a2
	branch a6 < a0 l4021ED1B
	// succ:  l4021ED18 l4021ED1B
l4021ED18:
	goto l4021EE14
	// succ:  l4021EE14
l4021ED1B:
	a2 = a4 | a4
	a3 = a15
	a0 = 0x40202548
	v30 = a0
	a0 = 0x4021ED26
	call v30 (retsize: 0;)
	a2 = a2 + 1
	a0 = 0x4021ED2B
	call fn403113C4 (retsize: 0;)
	Mem0[a1:word32] = a2
	a2 = a15
	a0 = 0x4021ED32
	call fn403113C4 (retsize: 0;)
	Mem0[a1 + 0x00000004:word32] = a2
	a2 = Mem0[a1 + 0x00000014:word32]
	a0 = 0x4021ED39
	call fn403113BC (retsize: 0;)
	a3 = a2
	a15 = Mem0[a1 + 0x00000000:word32]
	a2 = Mem0[a1 + 0x00000004:word32]
	a0 = 0x4021ED42
	call fn403046E0 (retsize: 0;)
	a3 = a2
	a2 = a15
	a0 = 0x4021ED49
	call fn4031076C (retsize: 0;)
	a3 = 0x4021EB18
	a3 = Mem0[a3 + 0x00000000:word32]
	a0 = 0x4021ED51
	call fn4031076C (retsize: 0;)
	a0 = 0x4021ED54
	call fn40310854 (retsize: 0;)
	goto l4025EC1B
	// succ:  l4025EC1B
l4021ED57:
	a4 = a15 - a2
	branch a4 < a13 l4021ED60
	// succ:  l4021ED5D l4021ED60
l4021ED5D:
	goto l4021EE19
	// succ:  l4021EE19
l4021ED60:
	a3 = a15 | a15
	a2 = a0
	a0 = 0x40202548
	v31 = a0
	a0 = 0x4021ED6B
	call v31 (retsize: 0;)
	a2 = a2 + 1
	a0 = 0x4021ED70
	call fn403113C4 (retsize: 0;)
	a13 = a2
	a2 = a15
	a0 = 0x4021ED77
	call fn403113C4 (retsize: 0;)
	a15 = a2
	a2 = Mem0[a1 + 0x00000010:word32]
	a0 = 0x4021ED7E
	call fn403113BC (retsize: 0;)
	a3 = a2
	a2 = a15
	a0 = 0x4021ED85
	call fn403046E0 (retsize: 0;)
	a3 = a2
	a2 = a13
	a0 = 0x4021ED8C
	call fn4031076C (retsize: 0;)
	a3 = 0x4021EB18
	a3 = Mem0[a3 + 0x00000000:word32]
	a0 = 0x4021ED94
	call fn4031076C (retsize: 0;)
	a0 = 0x4021ED97
	call fn40310854 (retsize: 0;)
	goto l4025EC96
	// succ:  l4025EC96
l4021ED9A:
	a12 = a13 | a13
	// succ:  l4021ED9D
l4021ED9D:
	a14 = 0x402045D8
	a13 = 0
	a2 = a12
	a0 = 0x4021EDA7
	call fn40311408 (retsize: 0;)
	Mem0[a1 + 0x00000024:word32] = a2
	Mem0[a1 + 0x00000020:word32] = a3
	a5 = 0x4021EB20
	a4 = 0x4021EB24
	a0 = 0x4021EDB4
	call fn4030487C (retsize: 0;)
	a5 = a14
	a4 = a13
	a0 = 0x4021EDBB
	call fn40310CC8 (retsize: 0;)
	a0 = 0x4021EDBE
	call fn40310F58 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000020:word32]
	a5 = 0x4021EB28
	a15 = a2
	a4 = 0x4021EB24
	a2 = Mem0[a1 + 0x00000024:word32]
	a0 = 0x4021EDCD
	call fn4030487C (retsize: 0;)
	a4 = a13
	a5 = a14
	a0 = 0x4021EDD4
	call fn40310CC8 (retsize: 0;)
	a13 = 0x4021E4C4
	a0 = 0x4021EDDA
	call fn40310F58 (retsize: 0;)
	a7 = 0x40204634
	a5 = 0x40204508
	a6 = a15 & 0x000003FF
	a5 = a2 & a5
	a6 = a6 << 12
	a2 = a12
	a4 = Mem0[a13 + 0x000002A0:word32]
	a4 = a4 & a7
	a4 = a4 | a6
	a4 = a4 | a5
	a12 = Mem0[a1 + 0x0000002C:word32]
	a14 = Mem0[a1 + 0x00000034:word32]
	Mem0[a13 + 0x000002A0:word32] = a4
	a15 = Mem0[a1 + 0x00000038:word32]
	a13 = Mem0[a1 + 0x00000030:word32]
	a0 = Mem0[a1 + 0x00000028:word32]
	a1 = a1 + 80
	return
	// succ:  sdk_phy_dig_spur_set_exit
l4021EE0F:
	a12 = a15
	goto l4025ED9D
	// succ:  l4025ED9D
l4021EE14:
	a15 = 0
	goto l4025EC28
	// succ:  l4025EC28
l4021EE19:
	a15 = Mem0[a1 + 0x0000004C:word32]
	a3 = 0
	goto l4025ECA3
	// succ:  l4025ECA3
l4021EE21:
	a12 = a3
	goto l4025ED9D
	// succ:  l4025ED9D
l4025EB7C:
l4025EC1B:
l4025EC28:
l4025EC96:
l4025ECA3:
l4025ED9D:
sdk_phy_dig_spur_set_exit:


// sdk_phy_dig_spur_prot
// Return size: 0
void sdk_phy_dig_spur_prot()
sdk_phy_dig_spur_prot_entry:
	// succ:  l4021EE28
l4021EE28:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a0
	branch a2 != 0x00000000 l4021EE38
	// succ:  l4021EE31 l4021EE38
l4021EE31:
	a0 = 0
	a12 = 0
	goto l4021EE83
	// succ:  l4021EE83
l4021EE38:
	branch a2 >= 1 l4021EE3E
	// succ:  l4021EE3B l4021EE3E
l4021EE3B:
	goto l4021F00A
	// succ:  l4021F00A
l4021EE3E:
	a3 = 0x00000064
	a12 = a2 << 27
	a2 = a12
	a0 = 0x40202548
	v21 = a0
	a0 = 0x4021EE4C
	call v21 (retsize: 0;)
	a0 = a2
	a3 = 10
	a2 = a12
	a12 = a0 << 8
	a12 = a12 >> 24
	a0 = 0x40202548
	v22 = a0
	a0 = 0x4021EE5E
	call v22 (retsize: 0;)
	a3 = 10
	a0 = 0x402044A4
	v23 = a0
	a0 = 0x4021EE66
	call v23 (retsize: 0;)
	branch a2 < 2 l4021EE6C
	// succ:  l4021EE69 l4021EE6C
l4021EE69:
	goto l4021F041
	// succ:  l4021F041
l4021EE6C:
	a0 = 1
	goto l4021EE83
	// succ:  l4021EE83
l4021EE71:
	v19 = Mem0[a1 + 0x00000001:byte]
	a12 = (uint32) v19
	v20 = Mem0[a1 + 0x00000000:byte]
	a0 = (uint32) v20
	a12 = a12 << 8
	a0 = a0 << 8
	a0 = a0 >> 24
	a12 = a12 >> 24
	// succ:  l4021EE83
l4021EE83:
	branch a12 >= 1 l4021EE8C
	// succ:  l4021EE86 l4021EE8C
l4021EE86:
	a4 = a0 >> 1
	goto l4021EE94
	// succ:  l4021EE94
l4021EE8C:
	a2 = a12 - 1
	SAR = 0x00000020 - a2
	a4 = a0 << SAR
	// succ:  l4021EE94
l4021EE94:
	a2 = 0x4021E4C4
	Mem0[a2 + 0x000002D4:word32] = a4
	a6 = a12 + 30
	a5 = 0
	SAR = 0x00000020 - a6
	a3 = a0 << SAR
	branch a12 < 0x00000000 l4021EEAB
	// succ:  l4021EEA8_1 l4021EEAB
l4021EEA8_1:
	a3 = a5
	// succ:  l4021EEAB
l4021EEAB:
	Mem0[a2 + 0x0000029C:word32] = a3
	branch a12 >= 1 l4021EEBA
	// succ:  l4021EEB4 l4021EEBA
l4021EEB4:
	a4 = a0 >> 1
	goto l4021EEC2
	// succ:  l4021EEC2
l4021EEBA:
	a7 = a12 - 1
	SAR = 0x00000020 - a7
	a4 = a0 << SAR
	// succ:  l4021EEC2
l4021EEC2:
	a6 = 0
	Mem0[a2 + 0x000003B0:word32] = a4
	a10 = a12 + 30
	a9 = 0
	SAR = 0x00000020 - a10
	a8 = a0 << SAR
	branch a12 < 0x00000000 l4021EED8
	// succ:  l4021EED5_1 l4021EED8
l4021EED5_1:
	a8 = a9
	// succ:  l4021EED8
l4021EED8:
	Mem0[a2 + 0x00000284:word32] = a8
	branch a0 == 1 l4021EEF6
	// succ:  l4021EEE1 l4021EEF6
l4021EEE1:
	branch a0 != 2 l4021EEE9
	// succ:  l4021EEE4 l4021EEE9
l4021EEE4:
	a5 = 8
	goto l4021EEF8
	// succ:  l4021EEF8
l4021EEE9:
	a3 = a0 - 3
	a11 = 10
	a5 = a6
	branch a3 != 0x00000000 l4021EEF3
	// succ:  l4021EEF0_1 l4021EEF3
l4021EEF0_1:
	a5 = a11
	// succ:  l4021EEF3
l4021EEF3:
	goto l4021EEF8
	// succ:  l4021EEF8
l4021EEF6:
	a5 = 2
	// succ:  l4021EEF8
l4021EEF8:
	branch a12 < 16 l4021EF09
	// succ:  l4021EEFB l4021EF09
l4021EEFB:
	a4 = -32
	a4 = a4 + a12 * 0x00000002
	SAR = 0x00000020 - a4
	a4 = a5 << SAR
	goto l4021EF0B
	// succ:  l4021EF0B
l4021EF09:
	a4 = 0
	// succ:  l4021EF0B
l4021EF0B:
	Mem0[a2 + 0x0000028C:word32] = a4
	a11 = -16
	branch a12 < 1 l4021EF27
	// succ:  l4021EF16 l4021EF27
l4021EF16:
	branch a12 >= 16 l4021EF27
	// succ:  l4021EF19 l4021EF27
l4021EF19:
	a7 = -2
	a7 = a7 + a12 * 0x00000002
	SAR = 0x00000020 - a7
	a7 = a5 << SAR
	goto l4021EF2F
	// succ:  l4021EF2F
l4021EF27:
	a8 = 0
	a7 = a5 >> 2
	branch a12 == 0x00000000 l4021EF2F
	// succ:  l4021EF2C_1 l4021EF2F
l4021EF2C_1:
	a7 = a8
	// succ:  l4021EF2F
l4021EF2F:
	a10 = -31
	Mem0[a2 + 0x00000288:word32] = a7
	a8 = 0x4021BDC0
	branch a11 >= a12 l4021EF4E
	a10 = -31
	Mem0[a2 + 0x00000288:word32] = a7
	a8 = 0x4021BDC0
	branch a11 >= a12 l4021EF4E
	// succ:  l4021EF3D l4021EF4E
l4021EF3D:
	branch a12 >= 0x00000000 l4021EF4E
	branch a12 >= 0x00000000 l4021EF4E
	// succ:  l4021EF40 l4021EF4E
l4021EF40:
	a9 = 30
	a9 = a9 + a12 * 0x00000002
	SAR = 0x00000020 - a9
	a7 = a5 << SAR
	a9 = 30
	a9 = a9 + a12 * 0x00000002
	SAR = 0x00000020 - a9
	a7 = a5 << SAR
	goto l4021EF50
	// succ:  l4021EF50
l4021EF4E:
	a7 = 0
	// succ:  l4021EF50
l4021EF50:
	a9 = -15
	Mem0[a8 + 0x0000030C:word32] = a7
	branch a10 >= a12 l4021EF6C
	// succ:  l4021EF5B l4021EF6C
l4021EF5B:
	branch a12 >= a9 l4021EF6C
	// succ:  l4021EF5E l4021EF6C
l4021EF5E:
	a3 = 60
	a3 = a3 + a12 * 0x00000002
	SAR = 0x00000020 - a3
	a4 = a5 << SAR
	goto l4021EF6E
	// succ:  l4021EF6E
l4021EF6C:
	a4 = 0
	// succ:  l4021EF6E
l4021EF6E:
	Mem0[a8 + 0x00000308:word32] = a4
	branch a0 == 1 l4021EF8C
	// succ:  l4021EF77 l4021EF8C
l4021EF77:
	branch a0 != 2 l4021EF7F
	// succ:  l4021EF7A l4021EF7F
l4021EF7A:
	a0 = 4
	goto l4021EF8E
	// succ:  l4021EF8E
l4021EF7F:
	a5 = a0 - 3
	a4 = 5
	branch a5 != 0x00000000 l4021EF87
	// succ:  l4021EF84_1 l4021EF87
l4021EF84_1:
	a6 = a4
	// succ:  l4021EF87
l4021EF87:
	a0 = a6
	goto l4021EF8E
	// succ:  l4021EF8E
l4021EF8C:
	a0 = 1
	// succ:  l4021EF8E
l4021EF8E:
	branch a12 < 16 l4021EF9F
	// succ:  l4021EF91 l4021EF9F
l4021EF91:
	a6 = -32
	a6 = a6 + a12 * 0x00000002
	SAR = 0x00000020 - a6
	a4 = a0 << SAR
	goto l4021EFA1
	// succ:  l4021EFA1
l4021EF9F:
	a4 = 0
	// succ:  l4021EFA1
l4021EFA1:
	Mem0[a2 + 0x000003BC:word32] = a4
	branch a12 < 1 l4021EFBB
	// succ:  l4021EFAA l4021EFBB
l4021EFAA:
	branch a12 >= 16 l4021EFBB
	// succ:  l4021EFAD l4021EFBB
l4021EFAD:
	a7 = -2
	a7 = a7 + a12 * 0x00000002
	SAR = 0x00000020 - a7
	a5 = a0 << SAR
	goto l4021EFC3
	// succ:  l4021EFC3
l4021EFBB:
	a8 = 0
	a5 = a0 >> 2
	branch a12 == 0x00000000 l4021EFC3
	// succ:  l4021EFC0_1 l4021EFC3
l4021EFC0_1:
	a5 = a8
	// succ:  l4021EFC3
l4021EFC3:
	Mem0[a2 + 0x000003B8:word32] = a5
	branch a11 >= a12 l4021EFDD
	Mem0[a2 + 0x000003B8:word32] = a5
	branch a11 >= a12 l4021EFDD
	// succ:  l4021EFCC l4021EFDD
l4021EFCC:
	branch a12 >= 0x00000000 l4021EFDD
	branch a12 >= 0x00000000 l4021EFDD
	// succ:  l4021EFCF l4021EFDD
l4021EFCF:
	a11 = 30
	a11 = a11 + a12 * 0x00000002
	SAR = 0x00000020 - a11
	a5 = a0 << SAR
	a11 = 30
	a11 = a11 + a12 * 0x00000002
	SAR = 0x00000020 - a11
	a5 = a0 << SAR
	goto l4021EFDF
	// succ:  l4021EFDF
l4021EFDD:
	a5 = 0
	// succ:  l4021EFDF
l4021EFDF:
	Mem0[a2 + 0x000003AC:word32] = a5
	branch a10 >= a12 l4021EFF9
	// succ:  l4021EFE8 l4021EFF9
l4021EFE8:
	branch a12 >= a9 l4021EFF9
	// succ:  l4021EFEB l4021EFF9
l4021EFEB:
	a3 = 60
	a3 = a3 + a12 * 0x00000002
	SAR = 0x00000020 - a3
	a0 = a0 << SAR
	goto l4021EFFB
	// succ:  l4021EFFB
l4021EFF9:
	a0 = 0
	// succ:  l4021EFFB
l4021EFFB:
	a12 = Mem0[a1 + 0x00000008:word32]
	Mem0[a2 + 0x000003A8:word32] = a0
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_phy_dig_spur_prot_exit
l4021F00A:
	branch a2 >= 0x00000000 l4021EE71
	// succ:  l4021F00D l4021EE71
l4021F00D:
	a3 = 0x00000064
	a12 = a2 << 27
	a2 = a12
	a0 = 0x40202548
	v8 = a0
	a0 = 0x4021F01B
	call v8 (retsize: 0;)
	a0 = a2
	a3 = 10
	a2 = a12
	a12 = a0 - 1
	a12 = a12 << 8
	a12 = a12 >> 24
	a0 = 0x40202548
	v9 = a0
	a0 = 0x4021F02F
	call v9 (retsize: 0;)
	a3 = 10
	a0 = 0x402044A4
	v10 = a0
	a0 = 0x4021F037
	call v10 (retsize: 0;)
	a3 = -8
	branch a2 >= a3 l4021F04E
	// succ:  l4021F03C l4021F04E
l4021F03C:
	a0 = 1
	goto l4025EE83
	// succ:  l4025EE83
l4021F041:
	a0 = 3
	branch a2 >= 8 l4021F049
	// succ:  l4021F046 l4021F049
l4021F046:
	goto l4025EE83
	// succ:  l4025EE83
l4021F049:
	a0 = 2
	goto l4025EE83
	// succ:  l4025EE83
l4021F04E:
	a0 = 3
	a4 = -2
	branch a2 >= a4 l4021F058
	// succ:  l4021F055 l4021F058
l4021F055:
	goto l4025EE83
	// succ:  l4025EE83
l4021F058:
	a0 = 2
	// succ:  l4025EE83
l4025EE83:
sdk_phy_dig_spur_prot_exit:


// sdk_chip_v6_rxmax_ext_dig
// Return size: 0
void sdk_chip_v6_rxmax_ext_dig()
sdk_chip_v6_rxmax_ext_dig_entry:
	// succ:  l4021F060
l4021F060:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BDB8
	branch a2 != 0x00000000 l4021F07E
	// succ:  l4021F06A l4021F07E
l4021F06A:
	a4 = 16
	a3 = Mem0[a0 + 0x00000390:word32]
	a3 = a3 | a4
	Mem0[a0 + 0x00000390:word32] = a3
	goto l4021F08F
	// succ:  l4021F08F
l4021F07E:
	a6 = -17
	a5 = Mem0[a0 + 0x00000390:word32]
	a5 = a5 & a6
	Mem0[a0 + 0x00000390:word32] = a5
	// succ:  l4021F08F
l4021F08F:
	a4 = 0x4021D26C
	a3 = a2 << 8
	v9 = Mem0[a4 + 0x0000005A:byte]
	a2 = (uint32) v9
	a3 = a3 >> 24
	a2 = a2 << 8
	a2 = a2 >> 24
	a0 = 0x4021F0A4
	call fn4031E934 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_chip_v6_rxmax_ext_dig_exit
sdk_chip_v6_rxmax_ext_dig_exit:


// sdk_chip_v6_rxmax_ext
// Return size: 0
void sdk_chip_v6_rxmax_ext()
sdk_chip_v6_rxmax_ext_entry:
	// succ:  l4021F0AC
l4021F0AC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2 | a2
	a0 = 0x4021F0BB
	call fn4031BF54 (retsize: 0;)
	a2 = a12
	a0 = 0x4021F0C0
	call fn4031F060 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_chip_v6_rxmax_ext_exit
sdk_chip_v6_rxmax_ext_exit:


// sdk_phy_bb_rx_cfg
// Return size: 0
void sdk_phy_bb_rx_cfg()
sdk_phy_bb_rx_cfg_entry:
	// succ:  l4021F154
l4021F154:
	a1 = fp
	a6 = 0x4021F0CC
	a11 = 0x4021CB40
	a4 = 0x4021D5C8
	a5 = 0x4021319C
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a13
	a8 = 0xFFFFFF80
	a2 = 0x4021BDC0
	a13 = 0x4021E4C4
	a3 = Mem0[a2 + 0x00000160:word32]
	a3 = a3 | a6
	Mem0[a2 + 0x00000160:word32] = a3
	a0 = Mem0[a2 + 0x0000010C:word32]
	a0 = a0 | a11
	Mem0[a2 + 0x0000010C:word32] = a0
	a12 = 0x4021F0D0
	a10 = Mem0[a2 + 0x00000340:word32]
	a10 = a10 & a12
	a10 = a10 | a11
	Mem0[a2 + 0x00000340:word32] = a10
	a9 = 0x4021F0D4
	Mem0[a2 + 0x0000016C:word32] = a9
	a7 = 0x4021F0D8
	Mem0[a2 + 0x00000168:word32] = a7
	a6 = 0x402044FC
	a3 = Mem0[a2 + 0x00000150:word32]
	a3 = a3 & a6
	Mem0[a2 + 0x00000150:word32] = a3
	a12 = 0x00000190
	a0 = Mem0[a2 + 0x00000318:word32]
	Mem0[a2 + 0x00000318:word32] = a12
	a11 = 0x4021F0DC
	a10 = 0x4021F0E0
	a9 = Mem0[a13 + 0x000002EC:word32]
	a9 = a9 & a11
	a9 = a9 | a10
	Mem0[a13 + 0x000002EC:word32] = a9
	a7 = 0x4021F0E4
	a6 = Mem0[a13 + 0x00000388:word32]
	a6 = a6 & a7
	Mem0[a13 + 0x00000388:word32] = a6
	v16 = Mem0[a4 + 0x00000000:byte]
	a4 = (uint32) v16
	a4 = a4 - 15
	a3 = Mem0[a2 + 0x00000148:word32]
	a3 = a3 & a8
	a3 = a3 | a4
	Mem0[a2 + 0x00000148:word32] = a3
	a0 = 0x40203740
	a12 = 0x4021F0E8
	a11 = Mem0[a2 + 0x00000128:word32]
	a11 = a11 & a0
	a11 = a11 | a12
	Mem0[a2 + 0x00000128:word32] = a11
	a10 = 0x4021F0EC
	a9 = Mem0[a2 + 0x00000034:word32]
	a9 = a9 & a10
	Mem0[a2 + 0x00000034:word32] = a9
	a7 = 38
	a6 = Mem0[a2 + 0x00000144:word32]
	a6 = a6 & a8
	a6 = a6 | a7
	Mem0[a2 + 0x00000144:word32] = a6
	a4 = 0xFFFFFFC0
	a3 = 17
	a0 = Mem0[a2 + 0x00000370:word32]
	a0 = a0 & a4
	a0 = a0 | a3
	Mem0[a2 + 0x00000370:word32] = a0
	a12 = 0x40204634
	a11 = Mem0[a13 + 0x000002A0:word32]
	a11 = a11 | a12
	Mem0[a13 + 0x000002A0:word32] = a11
	a10 = 0x4021F0F0
	a9 = 0x4021F0F4
	a8 = Mem0[a2 + 0x00000164:word32]
	a8 = a8 & a10
	a8 = a8 | a9
	Mem0[a2 + 0x00000164:word32] = a8
	a7 = 0x4021E474
	a6 = 0x4021F0F8
	a4 = Mem0[a2 + 0x00000164:word32]
	a4 = a4 & a7
	a4 = a4 | a6
	Mem0[a2 + 0x00000164:word32] = a4
	a3 = 0x40204584
	a0 = 0x4021F0FC
	a12 = Mem0[a2 + 0x0000015C:word32]
	a12 = a12 & a3
	a12 = a12 | a0
	Mem0[a2 + 0x0000015C:word32] = a12
	a11 = 0x4021F100
	a10 = 0x4021F104
	a9 = Mem0[a2 + 0x00000150:word32]
	a9 = a9 & a11
	a9 = a9 | a10
	Mem0[a2 + 0x00000150:word32] = a9
	a7 = 0x00000080
	a8 = Mem0[a2 + 0x00000318:word32]
	Mem0[a2 + 0x00000318:word32] = a7
	a6 = 4
	a4 = Mem0[a2 + 0x00000310:word32]
	a4 = a4 | a6
	Mem0[a2 + 0x00000310:word32] = a4
	a3 = 0x4021F108
	a0 = 0x4021F10C
	a12 = Mem0[a2 + 0x00000370:word32]
	a12 = a12 & a3
	a12 = a12 | a0
	Mem0[a2 + 0x00000370:word32] = a12
	a11 = 0x4021F110
	a10 = 0x4021F114
	a9 = Mem0[a2 + 0x00000324:word32]
	a9 = a9 & a11
	a9 = a9 | a10
	Mem0[a2 + 0x00000324:word32] = a9
	a8 = 0x4021F118
	a7 = 0x4021F11C
	a6 = Mem0[a2 + 0x00000158:word32]
	a6 = a6 & a8
	a6 = a6 | a7
	Mem0[a2 + 0x00000158:word32] = a6
	a4 = 0x4021F120
	a3 = 0x4021F124
	a0 = Mem0[a2 + 0x0000034C:word32]
	a0 = a0 & a4
	a0 = a0 | a3
	Mem0[a2 + 0x0000034C:word32] = a0
	a12 = 0x4021F128
	a11 = 0x4021F12C
	a10 = Mem0[a2 + 0x00000320:word32]
	a10 = a10 & a12
	a10 = a10 | a11
	Mem0[a2 + 0x00000320:word32] = a10
	a9 = 0x4021F130
	a8 = Mem0[a13 + 0x00000388:word32]
	a8 = a8 | a9
	Mem0[a13 + 0x00000388:word32] = a8
	a7 = 0x4021F134
	a6 = 0x4021F138
	a4 = Mem0[a5 + 0x00000270:word32]
	a4 = a4 & a7
	a4 = a4 | a6
	Mem0[a5 + 0x00000270:word32] = a4
	a3 = 0x4021F13C
	a0 = Mem0[a2 + 0x00000344:word32]
	a0 = a0 & a3
	Mem0[a2 + 0x00000344:word32] = a0
	a2 = 0
	a0 = 0x4021F3B8
	call fn4031F060 (retsize: 0;)
	a12 = 0x4021BCEC
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000000C:word32]
	a2 = 0
	v17 = a0
	a0 = 0x4021F3C4
	call v17 (retsize: 0;)
	a11 = 0xFFFFFFCF
	a10 = 32
	a3 = 0x4021BDB8
	a6 = 0x4021287C
	a2 = 0x4021F140
	a9 = Mem0[a13 + 0x00000238:word32]
	a9 = a9 & a11
	a9 = a9 | a10
	Mem0[a13 + 0x00000238:word32] = a9
	a10 = 0x4021BDC0
	a7 = 0x4021F144
	a8 = Mem0[a10 + 0x00000248:word32]
	Mem0[a10 + 0x00000248:word32] = a7
	a5 = 6
	a4 = Mem0[a10 + 0x0000024C:word32]
	a4 = a4 | a5
	Mem0[a10 + 0x0000024C:word32] = a4
	Mem0[a10 + 0x0000031C:word32] = a2
	a0 = Mem0[a10 + 0x0000031C:word32]
	a0 = a0 | a2
	Mem0[a10 + 0x0000031C:word32] = a0
	a11 = 0x402045EC
	a9 = Mem0[a10 + 0x00000028:word32]
	a9 = a9 & a11
	Mem0[a10 + 0x00000028:word32] = a9
	a8 = -7
	a7 = 2
	a5 = Mem0[a6 + 0x00000224:word32]
	a5 = a5 & a8
	a5 = a5 | a7
	Mem0[a6 + 0x00000224:word32] = a5
	a4 = -2
	a2 = Mem0[a3 + 0x000003C0:word32]
	a2 = a2 & a4
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000A0:word32]
	Mem0[a3 + 0x000003C0:word32] = a2
	v18 = a0
	a0 = 0x4021F45B
	call v18 (retsize: 0;)
	a2 = 1
	a0 = Mem0[a12 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 12
	v19 = a0
	a0 = 0x4021F469
	call v19 (retsize: 0;)
	a2 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0x00000184
	v20 = a0
	a0 = 0x4021F478
	call v20 (retsize: 0;)
	a2 = 3
	a0 = Mem0[a12 + 0x00000000:word32]
	a3 = 2
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 6
	v21 = a0
	a0 = 0x4021F486
	call v21 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000BC:word32]
	v22 = a0
	a0 = 0x4021F48E
	call v22 (retsize: 0;)
	a2 = 0x4021D26C
	a3 = Mem0[a2 + 0x0000000C:word32]
	a0 = 0x4021F148
	branch (a3 & 0x08000000) != 0x00000000 l4021F4B1
	// succ:  l4021F499 l4021F4B1
l4021F499:
	a3 = 0x0000007F
	a4 = 0x4021F14C
	a5 = 0x4021F150
	a6 = 16
	a7 = 0
	a2 = a0
	a0 = 0x4021F4AB
	call fn4031D5CC (retsize: 0;)
	a0 = 0x4021F148
	a2 = 0x4021D26C
	// succ:  l4021F4B1
l4021F4B1:
	a8 = 0
	a7 = 0x4021D5C8
	a3 = 0x4021C30C
	a4 = Mem0[a2 + 0x000001CC:word32]
	a2 = 1
	a5 = a3 + 124
	a6 = a3 + 22
	v23 = Mem0[a7 + 0x00000000:byte]
	a7 = (uint32) v23
	Mem0[a1 + 0x00000004:word32] = a8
	Mem0[a1 + 0x00000008:word32] = a8
	Mem0[a1 + 0x0000000C:word32] = a8
	Mem0[a1:word32] = a0
	a7 = a7 + 1
	a7 = a7 & 0x000000FF
	a0 = 0x4021F4D7
	call fn4031D788 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 18
	a5 = 7
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0x000000E8
	v24 = a0
	a0 = 0x4021F4ED
	call v24 (retsize: 0;)
	a3 = 1
	a2 = Mem0[a13 + 0x00000260:word32]
	a2 = a2 | a3
	Mem0[a13 + 0x00000260:word32] = a2
	a12 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_phy_bb_rx_cfg_exit
sdk_phy_bb_rx_cfg_exit:


// sdk_uart_wait_idle
// Return size: 0
void sdk_uart_wait_idle()
sdk_uart_wait_idle_entry:
	// succ:  l4021F50C
l4021F50C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021F515
	call sdk_uart_tx_flush (retsize: 0;)
	a2 = 0x00000064
	a0 = 0x4021F51B
	call fn40303F28 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_uart_wait_idle_exit
sdk_uart_wait_idle_exit:


// sdk_phy_pbus_soc_cfg
// Return size: 0
void sdk_phy_pbus_soc_cfg()
sdk_phy_pbus_soc_cfg_entry:
	// succ:  l4021F540
l4021F540:
	a1 = fp
	a11 = 0x4021F524
	a10 = 0x4021CDA8
	a3 = 0x4021BDB8
	a2 = Mem0[a3 + 0x00000398:word32]
	a2 = a2 & a11
	a2 = a2 | a10
	Mem0[a3 + 0x00000398:word32] = a2
	a9 = Mem0[a3 + 0x0000039C:word32]
	a9 = a9 & a11
	a9 = a9 | a10
	Mem0[a3 + 0x0000039C:word32] = a9
	a8 = 0x4021F528
	a7 = 0x40204634
	a6 = Mem0[a3 + 0x00000394:word32]
	a6 = a6 & a8
	a6 = a6 | a7
	Mem0[a3 + 0x00000394:word32] = a6
	a5 = 0x4021F52C
	a4 = 0x4021F530
	a2 = Mem0[a3 + 0x00000398:word32]
	a2 = a2 & a5
	a2 = a2 | a4
	Mem0[a3 + 0x00000398:word32] = a2
	a11 = 0x4021F534
	a10 = 0x4021F538
	a9 = Mem0[a3 + 0x000003A0:word32]
	a9 = a9 & a11
	a9 = a9 | a10
	Mem0[a3 + 0x000003A0:word32] = a9
	a8 = 0x4021F53C
	a7 = 0x00000100
	a6 = Mem0[a3 + 0x000003C8:word32]
	a6 = a6 & a8
	a6 = a6 | a7
	Mem0[a3 + 0x000003C8:word32] = a6
	a5 = 0xFFFFFF80
	a4 = 71
	a2 = Mem0[a3 + 0x00000398:word32]
	a2 = a2 & a5
	a2 = a2 | a4
	Mem0[a3 + 0x00000398:word32] = a2
	return
	// succ:  sdk_phy_pbus_soc_cfg_exit
sdk_phy_pbus_soc_cfg_exit:


// sdk_phy_gpio_cfg
// Return size: 0
void sdk_phy_gpio_cfg()
sdk_phy_gpio_cfg_entry:
	// succ:  l4021F600
l4021F600:
	a1 = fp
	a1 = a1 - 16
	a4 = 0x4021F5E8
	Mem0[a1:word32] = a0
	v6 = Mem0[a4 + 0x00000082:byte]
	a2 = (uint32) v6
	a0 = 0x402125CC
	branch a2 != 2 l4021F629
	// succ:  l4021F611 l4021F629
l4021F611:
	a5 = 0x00000069
	a6 = 0xFFFFFF94
	a3 = Mem0[a0 + 0x000001A0:word32]
	a3 = a3 & a6
	a3 = a3 | a5
	Mem0[a0 + 0x000001A0:word32] = a3
	// succ:  l4021F629
l4021F629:
	v10 = Mem0[a4 + 0x00000083:byte]
	a3 = (uint32) v10
	branch a3 == 1 l4021F632
	// succ:  l4021F62F l4021F632
l4021F62F:
	branch a3 != 3 l4021F65D
	// succ:  l4021F632 l4021F65D
l4021F632:
	a10 = 1
	a11 = 0xFFFFFFBC
	a9 = Mem0[a0 + 0x000001A0:word32]
	a9 = a9 & a11
	a9 = a9 | a10
	Mem0[a0 + 0x000001A0:word32] = a9
	a8 = -2
	a7 = Mem0[a0 + 0x00000174:word32]
	a7 = a7 & a8
	Mem0[a0 + 0x00000174:word32] = a7
	v16 = Mem0[a4 + 0x00000083:byte]
	a3 = (uint32) v16
	// succ:  l4021F65D
l4021F65D:
	a5 = 0xFFFFFEFF
	branch a3 == 2 l4021F666
	// succ:  l4021F663 l4021F666
l4021F663:
	branch a3 != 3 l4021F692
	// succ:  l4021F666 l4021F692
l4021F666:
	a2 = 0x402125CC
	a0 = Mem0[a2 + 0x00000234:word32]
	a3 = 0xFFFFFEFF
	a0 = a0 & a3
	a3 = 0x00000000
	a4 = 0x00000000
	Mem0[a2 + 0x00000234:word32] = a0
	a5 = 0x00000001
	a2 = 0
	a0 = 0x4021F689
	call fn40303F68 (retsize: 0;)
	a0 = 0x402125CC
	a4 = 0x4021F5E8
	a5 = 0xFFFFFEFF
	// succ:  l4021F692
l4021F692:
	v17 = Mem0[a4 + 0x0000007C:byte]
	a3 = (uint32) v17
	branch a3 == 1 l4021F6AA
	// succ:  l4021F698 l4021F6AA
l4021F698:
	a6 = Mem0[a0 + 0x00000234:word32]
	a6 = a6 & a5
	Mem0[a0 + 0x00000234:word32] = a6
	v18 = Mem0[a4 + 0x0000007C:byte]
	a3 = (uint32) v18
	// succ:  l4021F6AA
l4021F6AA:
	branch a3 != 2 l4021F6BF
	// succ:  l4021F6AD l4021F6BF
l4021F6AD:
	a8 = 0x00000100
	a7 = Mem0[a0 + 0x00000214:word32]
	a7 = a7 | a8
	Mem0[a0 + 0x00000214:word32] = a7
	// succ:  l4021F6BF
l4021F6BF:
	a6 = 0xFFFFFECF
	v19 = Mem0[a4 + 0x00000081:byte]
	a3 = (uint32) v19
	a7 = 48
	branch a3 != 1 l4021F6DF
	// succ:  l4021F6CA l4021F6DF
l4021F6CA:
	a9 = Mem0[a0 + 0x00000218:word32]
	a9 = a9 & a6
	a9 = a9 | a7
	Mem0[a0 + 0x00000218:word32] = a9
	goto l4021F715
	// succ:  l4021F715
l4021F6DF:
	branch a3 != 2 l4021F6F4
	// succ:  l4021F6E2 l4021F6F4
l4021F6E2:
	a10 = Mem0[a0 + 0x00000238:word32]
	a10 = a10 & a5
	Mem0[a0 + 0x00000238:word32] = a10
	goto l4021F715
	// succ:  l4021F715
l4021F6F4:
	a2 = Mem0[a0 + 0x00000218:word32]
	a2 = a2 & a6
	a2 = a2 | a7
	Mem0[a0 + 0x00000218:word32] = a2
	a11 = Mem0[a0 + 0x00000238:word32]
	a11 = a11 & a5
	Mem0[a0 + 0x00000238:word32] = a11
	// succ:  l4021F715
l4021F715:
	v20 = Mem0[a4 + 0x0000007E:byte]
	a3 = (uint32) v20
	a8 = 32
	branch a3 == 1 l4021F744
	// succ:  l4021F71D l4021F744
l4021F71D:
	branch a3 == 3 l4021F744
	// succ:  l4021F720 l4021F744
l4021F720:
	branch a3 == 4 l4021F744
	// succ:  l4021F723 l4021F744
l4021F723:
	branch a3 == 5 l4021F744
	// succ:  l4021F726 l4021F744
l4021F726:
	v21 = Mem0[a4 + 0x00000080:byte]
	a3 = (uint32) v21
	a5 = a3 - 3
	branch a5 != 0x00000000 l4021F832
	// succ:  l4021F72F l4021F832
l4021F72F:
	a7 = Mem0[a0 + 0x00000234:word32]
	a7 = a7 & a6
	a7 = a7 | a8
	Mem0[a0 + 0x00000234:word32] = a7
	goto l4021F7F0
	// succ:  l4021F7F0
l4021F744:
	a5 = 0x4021BDB8
	a9 = 0
	a10 = a3 - 1
	branch a10 == 0x00000000 l4021F84A
	// succ:  l4021F74E l4021F84A
l4021F74E:
	a11 = a3 - 4
	branch a11 == 0x00000000 l4021F84A
	// succ:  l4021F754 l4021F84A
l4021F754:
	a2 = a3 - 3
	branch a2 == 0x00000000 l4021F8AA
	// succ:  l4021F75A l4021F8AA
l4021F75A:
	a10 = a3 - 5
	branch a10 == 0x00000000 l4021F8AA
	// succ:  l4021F760 l4021F8AA
l4021F760:
	a3 = 0xFFFFFE0F
	a5 = Mem0[a0 + 0x00000208:word32]
	a5 = a5 & a3
	a5 = a5 | a7
	Mem0[a0 + 0x00000208:word32] = a5
	a2 = Mem0[a0 + 0x0000020C:word32]
	a2 = a2 & a3
	a2 = a2 | a7
	Mem0[a0 + 0x0000020C:word32] = a2
	v22 = Mem0[a4 + 0x0000007F:byte]
	a11 = (uint32) v22
	branch a11 <u 0x00000002 l4021F7B4
	// succ:  l4021F78D l4021F7B4
l4021F78D:
	a9 = Mem0[a0 + 0x00000214:word32]
	a9 = a9 & a6
	a9 = a9 | a8
	Mem0[a0 + 0x00000214:word32] = a9
	a7 = Mem0[a0 + 0x00000234:word32]
	a7 = a7 & a6
	a7 = a7 | a8
	Mem0[a0 + 0x00000234:word32] = a7
	goto l4021F7D5
	// succ:  l4021F7D5
l4021F7B4:
	a11 = Mem0[a0 + 0x00000214:word32]
	a11 = a11 & a6
	a11 = a11 | a7
	Mem0[a0 + 0x00000214:word32] = a11
	a10 = Mem0[a0 + 0x00000234:word32]
	a10 = a10 & a6
	Mem0[a0 + 0x00000234:word32] = a10
	// succ:  l4021F7D5
l4021F7D5:
	v24 = Mem0[a4 + 0x0000007E:byte]
	a3 = (uint32) v24
	branch a3 != 1 l4021F7DE
	// succ:  l4021F7DB l4021F7DE
l4021F7DB:
	goto l4021F86B
	// succ:  l4021F86B
l4021F7DE:
	branch a3 != 3 l4021F7E4
	// succ:  l4021F7E1 l4021F7E4
l4021F7E1:
	goto l4021F86B
	// succ:  l4021F86B
l4021F7E4:
	a0 = a3 - 4
	branch a0 == 0x00000000 l4021F8C2
	// succ:  l4021F7EA l4021F8C2
l4021F7EA:
	a2 = a3 - 5
	branch a2 == 0x00000000 l4021F8C2
	// succ:  l4021F7F0 l4021F8C2
l4021F7F0:
	a0 = 0x4021F5E8
	a4 = 0x4021C0CC
	v23 = Mem0[a0 + 0x0000007D:byte]
	a0 = (uint32) v23
	a3 = 0x4021F5EC
	branch a0 != 1 l4021F815
	a0 = 0x4021F5E8
	a4 = 0x4021C0CC
	v26 = Mem0[a0 + 0x0000007D:byte]
	a0 = (uint32) v26
	a3 = 0x4021F5EC
	branch a0 != 1 l4021F815
	// succ:  l4021F7FF l4021F815
l4021F7FF:
	a5 = 0x402040DC
	a2 = Mem0[a4 + 0x00000004:word32]
	a2 = a2 & a3
	a2 = a2 | a5
	Mem0[a4 + 0x00000004:word32] = a2
	a5 = 0x402040DC
	a2 = Mem0[a4 + 0x00000004:word32]
	a2 = a2 & a3
	a2 = a2 | a5
	Mem0[a4 + 0x00000004:word32] = a2
	goto l4021F82B
	// succ:  l4021F82B
l4021F815:
	branch a0 != 2 l4021F82B
	// succ:  l4021F818 l4021F82B
l4021F818:
	a6 = 0x402044E8
	a5 = Mem0[a4 + 0x00000004:word32]
	a5 = a5 & a3
	a5 = a5 | a6
	Mem0[a4 + 0x00000004:word32] = a5
	// succ:  l4021F82B
l4021F82B:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_phy_gpio_cfg_exit
l4021F832:
	branch a3 != 2 l4021F7F0
	// succ:  l4021F835 l4021F7F0
l4021F835:
	a7 = Mem0[a0 + 0x00000214:word32]
	a7 = a7 & a6
	a7 = a7 | a8
	Mem0[a0 + 0x00000214:word32] = a7
	goto l4025F7F0
	// succ:  l4025F7F0
l4021F84A:
	v29 = Mem0[a4 + 0x0000007F:byte]
	a3 = (uint32) v29
	a10 = a3 - 3
	branch a10 == 0x00000000 l4021F913
	// succ:  l4021F853 l4021F913
l4021F853:
	a11 = a3 - 5
	branch a11 == 0x00000000 l4021F913
	// succ:  l4021F859 l4021F913
l4021F859:
	branch a3 >=u 0x00000002 l4021F85F
	// succ:  l4021F85C l4021F85F
l4021F85C:
	goto l4021F901
	// succ:  l4021F901
l4021F85F:
	a2 = 0x4021F5F0
	Mem0[a5 + 0x00000100:word32] = a2
	goto l4025F760
	// succ:  l4025F760
l4021F86B:
	v25 = Mem0[a4 + 0x0000007F:byte]
	a3 = (uint32) v25
	branch a3 != 1 l4021F88C
	// succ:  l4021F871 l4021F88C
l4021F871:
	a2 = 0x00000001
	a3 = 0x00000000
	a4 = 1
	a5 = 0
	a0 = 0x4021F87E
	call fn40303F68 (retsize: 0;)
	a2 = 0
	a3 = 8
	a4 = 8
	a5 = 0
	a0 = 0x4021F889
	call fn40303F68 (retsize: 0;)
	goto l4025F7F0
	// succ:  l4025F7F0
l4021F88C:
	branch a3 != 0x00000000 l4021F7F0
	// succ:  l4021F88F l4021F7F0
l4021F88F:
	a2 = 0x00000000
	a3 = 0x00000001
	a4 = 1
	a5 = 0
	a0 = 0x4021F89C
	call fn40303F68 (retsize: 0;)
	a2 = 8
	a3 = 0
	a4 = 8
	a5 = 0
	a0 = 0x4021F8A7
	call fn40303F68 (retsize: 0;)
	goto l4025F7F0
	// succ:  l4025F7F0
l4021F8AA:
	v27 = Mem0[a4 + 0x0000007F:byte]
	a3 = (uint32) v27
	branch a3 == 3 l4021F91F
	// succ:  l4021F8B0 l4021F91F
l4021F8B0:
	branch a3 == 5 l4021F91F
	// succ:  l4021F8B3 l4021F91F
l4021F8B3:
	branch a3 <u 0x00000002 l4021F90A
	// succ:  l4021F8B6 l4021F90A
l4021F8B6:
	a3 = 0x4021F5F4
	Mem0[a5 + 0x00000100:word32] = a3
	goto l4025F760
	// succ:  l4025F760
l4021F8C2:
	v28 = Mem0[a4 + 0x0000007F:byte]
	a3 = (uint32) v28
	branch a3 != 1 l4021F8E3
	// succ:  l4021F8C8 l4021F8E3
l4021F8C8:
	a2 = 0x00000000
	a3 = 0x00000001
	a4 = 1
	a5 = 0
	a0 = 0x4021F8D5
	call fn40303F68 (retsize: 0;)
	a2 = 8
	a3 = 0
	a4 = 8
	a5 = 0
	a0 = 0x4021F8E0
	call fn40303F68 (retsize: 0;)
	goto l4025F7F0
	// succ:  l4025F7F0
l4021F8E3:
	branch a3 != 0x00000000 l4021F7F0
	// succ:  l4021F8E6 l4021F7F0
l4021F8E6:
	a2 = 0x00000001
	a3 = 0x00000000
	a4 = 1
	a5 = 0
	a0 = 0x4021F8F3
	call fn40303F68 (retsize: 0;)
	a2 = 0
	a3 = 8
	a4 = 8
	a5 = 0
	a0 = 0x4021F8FE
	call fn40303F68 (retsize: 0;)
	goto l4025F7F0
	// succ:  l4025F7F0
l4021F901:
	Mem0[a5 + 0x00000100:word32] = a9
	goto l4025F760
	// succ:  l4025F760
l4021F90A:
	Mem0[a5 + 0x00000100:word32] = a9
	goto l4025F760
	// succ:  l4025F760
l4021F913:
	a9 = 0x4021F5F8
	Mem0[a5 + 0x00000100:word32] = a9
	goto l4025F760
	// succ:  l4025F760
l4021F91F:
	a10 = 0x4021F5FC
	Mem0[a5 + 0x00000100:word32] = a10
	// succ:  l4025F760
l4025F760:
l4025F7F0:
sdk_phy_gpio_cfg_exit:


// sdk_tx_cont_en
// Return size: 0
void sdk_tx_cont_en()
sdk_tx_cont_en_entry:
	// succ:  l4021F934
l4021F934:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021E4F0
	v5 = Mem0[a0 + 0x0000007F:byte]
	a2 = (uint32) v5
	branch a2 != 0x00000000 l4021F9CC
	// succ:  l4021F942 l4021F9CC
l4021F942:
	a0 = 0x4021BCEC
	a2 = 0x00000066
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = 3
	a0 = Mem0[a0 + 0x00000090:word32]
	a4 = 1
	v8 = a0
	a0 = 0x4021F954
	call v8 (retsize: 0;)
	a3 = 0x4021E4F0
	Mem0[a3 + 0x00000084:word32] = a2
	a2 = 0x4021BDB8
	a5 = Mem0[a2 + 0x00000394:word32]
	Mem0[a3 + 0x00000088:word32] = a5
	a4 = Mem0[a2 + 0x00000398:word32]
	Mem0[a3 + 0x0000008C:word32] = a4
	a4 = 1
	a5 = 5
	a6 = 0
	a7 = 60
	a2 = Mem0[a2 + 0x0000039C:word32]
	a0 = 0x4021BCEC
	Mem0[a3 + 0x00000090:word32] = a2
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = 0x00000066
	a0 = Mem0[a0 + 0x0000009C:word32]
	a3 = 3
	v12 = a0
	a0 = 0x4021F990
	call v12 (retsize: 0;)
	a0 = 0x4021E4F0
	a2 = 0x4021F92C
	a7 = 0x4021BDB8
	a11 = Mem0[a7 + 0x0000039C:word32]
	a11 = a11 | a2
	Mem0[a7 + 0x0000039C:word32] = a11
	a10 = 0x4021F128
	a9 = Mem0[a7 + 0x00000398:word32]
	a9 = a9 | a10
	Mem0[a7 + 0x00000398:word32] = a9
	a8 = 0x4021F930
	a6 = Mem0[a7 + 0x00000394:word32]
	a6 = a6 & a8
	Mem0[a7 + 0x00000394:word32] = a6
	// succ:  l4021F9CC
l4021F9CC:
	a3 = 1
	Mem0[a0 + 0x0000007F:byte] = a3
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_tx_cont_en_exit
sdk_tx_cont_en_exit:


// sdk_tx_cont_dis
// Return size: 0
void sdk_tx_cont_dis()
sdk_tx_cont_dis_entry:
	// succ:  l4021F9DC
l4021F9DC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021F9D8
	v5 = Mem0[a0 + 0x0000007B:byte]
	a2 = (uint32) v5
	branch a2 != 1 l4021FA23
	// succ:  l4021F9EA l4021FA23
l4021F9EA:
	a2 = 0x00000066
	a3 = 3
	a0 = 0x4021BCEC
	a4 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	a5 = 0x4021F9D8
	a0 = Mem0[a0 + 0x00000098:word32]
	v9 = Mem0[a5 + 0x00000080:byte]
	a5 = (uint32) v9
	v10 = a0
	a0 = 0x4021FA02
	call v10 (retsize: 0;)
	a0 = 0x4021F9D8
	a3 = 0x4021BDB8
	a5 = Mem0[a0 + 0x00000084:word32]
	Mem0[a3 + 0x00000394:word32] = a5
	a4 = Mem0[a0 + 0x00000088:word32]
	Mem0[a3 + 0x00000398:word32] = a4
	a2 = Mem0[a0 + 0x0000008C:word32]
	Mem0[a3 + 0x0000039C:word32] = a2
	// succ:  l4021FA23
l4021FA23:
	a6 = 0
	Mem0[a0 + 0x0000007B:byte] = a6
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_tx_cont_dis_exit
sdk_tx_cont_dis_exit:


// sdk_tx_cont_cfg
// Return size: 0
void sdk_tx_cont_cfg()
sdk_tx_cont_cfg_entry:
	// succ:  l4021FA30
l4021FA30:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a2 != 1 l4021FA3E
	// succ:  l4021FA38 l4021FA3E
l4021FA38:
	a0 = 0x4021FA3B
	call fn4031F934 (retsize: 0;)
	goto l4021FA41
	// succ:  l4021FA41
l4021FA3E:
	a0 = 0x4021FA41
	call fn4031F9DC (retsize: 0;)
	// succ:  l4021FA41
l4021FA41:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_tx_cont_cfg_exit
sdk_tx_cont_cfg_exit:


// sdk_chip_v6_initialize_bb
// Return size: 0
void sdk_chip_v6_initialize_bb()
sdk_chip_v6_initialize_bb_entry:
	// succ:  l4021FA50
l4021FA50:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a0
	a2 = 0x4021287C
	a0 = 0x4021BCEC
	a4 = Mem0[a2 + 0x0000025C:word32]
	a3 = Mem0[a2 + 0x00000258:word32]
	SAR = 0x08
	a3 = 1
	a4 = 7
	a5 = 3
	a6 = 2
	a7 = 0
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = Mem0[a2 + 0x0000025C:word32]
	a0 = Mem0[a0 + 0x0000009C:word32]
	a2 = 0x00000061
	v12 = a0
	a0 = 0x4021FA88
	call v12 (retsize: 0;)
	a0 = 0x4021FA8B
	call fn4031F540 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 16
	a0 = 0x4021BCEC
	a5 = 0
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v13 = a0
	a0 = 0x4021FAA3
	call v13 (retsize: 0;)
	a0 = 0x4021FAA6
	call sdk_rc_cal (retsize: 0;)
	a3 = 0x4021C30C
	a2 = a3
	a3 = a3 + 4
	a0 = 0x4021FAB0
	call sdk_init_cal_dcoffset (retsize: 0;)
	a12 = 0x4021D26C
	a4 = Mem0[a12 + 0x0000000C:word32]
	branch (a4 & 0x00400000) != 0x00000000 l4021FAC7
	// succ:  l4021FAB8 l4021FAC7
l4021FAB8:
	a2 = 0
	a0 = 0x4021FABD
	call fn4031C310 (retsize: 0;)
	a7 = 0x40204454
	a6 = Mem0[a12 + 0x0000000C:word32]
	a6 = a6 | a7
	Mem0[a12 + 0x0000000C:word32] = a6
	// succ:  l4021FAC7
l4021FAC7:
	a0 = 0x4021FACA
	call fn4031DCF0 (retsize: 0;)
	a8 = 0x4021FA48
	v15 = Mem0[a8 + 0x00000076:byte]
	a8 = (uint32) v15
	branch a8 == 0x00000000 l4021FADA
	// succ:  l4021FAD2 l4021FADA
l4021FAD2:
	a2 = 0
	a0 = 0x4021FAD7
	call fn4031E2D8 (retsize: 0;)
	goto l4021FAE0
	// succ:  l4021FAE0
l4021FADA:
	a2 = 0x00000001
	a0 = 0x4021FAE0
	call fn4031E2D8 (retsize: 0;)
	// succ:  l4021FAE0
l4021FAE0:
	a5 = 0x00000040
	a7 = 0
	a6 = 0
	a9 = 1
	a10 = 0
	a4 = 0x4021D5C8
	a2 = 0x4021C30C
	v18 = Mem0[a12 + 0x00000073:byte]
	a8 = (uint32) v18
	a3 = a2 + 20
	a8 = a8 << 8
	v19 = Mem0[a4 + 0x00000002:uint16]
	a4 = (uint32) v19
	Mem0[a1:word32] = a10
	Mem0[a1 + 0x00000004:word32] = a9
	a8 = a8 >> 24
	a8 = a8 + 31
	a8 = a8 << 8
	a8 = a8 >> 24
	branch a8 < 0x00000000 l4021FB10
	// succ:  l4021FB0D_1 l4021FB10
l4021FB0D_1:
	a6 = a8
	// succ:  l4021FB10
l4021FB10:
	a6 = a6 & 0x000000FF
	a0 = 0x4021FB16
	call sdk_ram_rfcal_txiq (retsize: 0;)
	a9 = Mem0[a12 + 0x0000000C:word32]
	branch (a9 & 0x08000000) != 0x00000000 l4021FB20
	// succ:  l4021FB1B l4021FB20
l4021FB1B:
	a2 = 6
	a0 = 0x4021FB20
	call fn4031CA50 (retsize: 0;)
	// succ:  l4021FB20
l4021FB20:
	a2 = 0x00000000
	a0 = 0x4021FB26
	call sdk_dpd_init (retsize: 0;)
	a0 = 0x4021FB29
	call fn4031F154 (retsize: 0;)
	a2 = 2
	a0 = 0x4021319C
	a11 = Mem0[a0 + 0x00000270:word32]
	a11 = a11 | a2
	a2 = 1
	a3 = 7
	a4 = 5
	a5 = 0x4021FA4C
	a6 = 1
	a7 = 0
	Mem0[a0 + 0x00000270:word32] = a11
	a10 = 0x4021C30C
	Mem0[a1:word32] = a10
	a0 = 0x4021FB52
	call fn4031E65C (retsize: 0;)
	a0 = 0x4021FB55
	call sdk_tx_pwctrl_bg_init (retsize: 0;)
	a3 = Mem0[a12 + 0x0000000C:word32]
	branch (a3 & 0x08000000) == 0x00000000 l4021FB85
	// succ:  l4021FB5A l4021FB85
l4021FB5A:
	a0 = 0x4021FB5D
	call fn4031C4A4 (retsize: 0;)
	a6 = 0xFFFFFBFF
	a5 = 0x4021C0CC
	a4 = Mem0[a5 + 0x00000340:word32]
	a4 = a4 & a6
	Mem0[a5 + 0x00000340:word32] = a4
	a2 = 0
	a0 = 0x4021FB77
	call fn4031F0AC (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000058:word32]
	v21 = Mem0[a12 + 0x00000058:int16]
	a2 = (int32) v21
	v22 = a0
	a0 = 0x4021FB85
	call v22 (retsize: 0;)
	// succ:  l4021FB85
l4021FB85:
	a5 = 1
	a12 = 0x4021FA48
	a9 = 0x4021BCEC
	v23 = Mem0[a12 + 0x00000076:byte]
	a2 = (uint32) v23
	v24 = Mem0[a12 + 0x0000008A:byte]
	a3 = (uint32) v24
	a9 = Mem0[a9 + 0x00000000:word32]
	v25 = Mem0[a12 + 0x00000085:byte]
	a4 = (uint32) v25
	a9 = Mem0[a9 + 0x0000009C:word32]
	branch a4 == 0x00000000 l4021FB9E
	// succ:  l4021FB9B_1 l4021FB9E
l4021FB9B_1:
	a4 = a5
	// succ:  l4021FB9E
l4021FB9E:
	a3 = a3 | a4
	a2 = a2 | a3
	branch a2 == 0x00000000 l4021FBB7
	// succ:  l4021FBA6 l4021FBB7
l4021FBA6:
	a2 = 0x00000077
	a3 = 0
	a4 = 15
	a6 = 1
	a7 = 1
	a0 = 0x4021FBB4
	call a9 (retsize: 0;)
	goto l4021FBCC
	// succ:  l4021FBCC
l4021FBB7:
	a2 = 0x00000077
	a3 = 0x00000000
	a4 = 0x0000000F
	v29 = Mem0[a12 + 0x00000075:byte]
	a7 = (uint32) v29
	a6 = 0x00000001
	a7 = a7 & 0x00000001
	a0 = 0x4021FBCC
	call a9 (retsize: 0;)
	// succ:  l4021FBCC
l4021FBCC:
	v26 = Mem0[a12 + 0x00000076:byte]
	a2 = (uint32) v26
	v27 = Mem0[a12 + 0x00000077:byte]
	a3 = (uint32) v27
	v28 = Mem0[a12 + 0x00000078:byte]
	a4 = (uint32) v28
	a0 = 0x4021FBD8
	call fn4031CD54 (retsize: 0;)
	a2 = 0
	a12 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_chip_v6_initialize_bb_exit
sdk_chip_v6_initialize_bb_exit:


// sdk_periodic_cal
// Return size: 0
void sdk_periodic_cal()
sdk_periodic_cal_entry:
	// succ:  l4021FBF0
l4021FBF0:
	a1 = fp
	a5 = 0x4021FBE4
	a1 = a1 - 48
	Mem0[a1 + 0x0000001C:word32] = a12
	Mem0[a1 + 0x00000020:word32] = a13
	Mem0[a1 + 0x00000018:word32] = a0
	v8 = Mem0[a5 + 0x00000027:byte]
	a2 = (uint32) v8
	a3 = Mem0[a5 + 0x00000044:word32]
	a0 = 0
	Mem0[a1 + 0x00000010:word32] = a0
	a3 = a3 + 1
	Mem0[a5 + 0x00000044:word32] = a3
	branch a2 != a3 l4021FC16
	// succ:  l4021FC0E l4021FC16
l4021FC0E:
	a13 = 1
	Mem0[a5 + 0x00000044:word32] = a0
	goto l4021FC19
	// succ:  l4021FC19
l4021FC16:
	a13 = a0 | a0
	// succ:  l4021FC19
l4021FC19:
	Mem0[a5 + 0x0000002C:byte] = a13
	a2 = a1 + 16
	a3 = 0x4021FBE8
	a0 = 0x4021FC25
	call sdk_init_cal_dcoffset (retsize: 0;)
	a12 = 0x4021D26C
	branch a13 == 0x00000000 l4021FCB0
	// succ:  l4021FC2B l4021FCB0
l4021FC2B:
	a2 = 0x00000077
	a3 = 0x00000000
	a4 = 0x0000000F
	a5 = 1
	a6 = 1
	a0 = 0x4021BCEC
	v12 = Mem0[a12 + 0x0000005A:byte]
	a13 = (uint32) v12
	a0 = Mem0[a0 + 0x00000000:word32]
	a13 = a13 << 8
	a0 = Mem0[a0 + 0x00000094:word32]
	a13 = a13 >> 24
	v13 = a0
	a0 = 0x4021FC4C
	call v13 (retsize: 0;)
	a3 = 0
	a4 = 15
	a5 = 1
	a6 = 1
	a0 = 0x4021BCEC
	a7 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a1 + 0x00000014:word32] = a2
	a0 = Mem0[a0 + 0x0000009C:word32]
	a2 = 0x00000077
	v15 = a0
	a0 = 0x4021FC66
	call v15 (retsize: 0;)
	a4 = 0x4020452C
	a3 = Mem0[a12 + 0x0000000C:word32]
	a2 = 1
	a3 = a3 & a4
	Mem0[a12 + 0x0000000C:word32] = a3
	a0 = 0x4021FC75
	call fn4031E2D8 (retsize: 0;)
	a9 = 0x4021BCEC
	a5 = 0x4021FBE4
	a9 = Mem0[a9 + 0x00000000:word32]
	v17 = Mem0[a5 + 0x0000002E:byte]
	a5 = (uint32) v17
	a9 = Mem0[a9 + 0x0000009C:word32]
	branch a5 == 0x00000000 l4021FC98
	// succ:  l4021FC85 l4021FC98
l4021FC85:
	a2 = 0x00000077
	a3 = 0
	a4 = 15
	a5 = 1
	a6 = 1
	a7 = 1
	a0 = 0x4021FC95
	call a9 (retsize: 0;)
	goto l4021FCAB
	// succ:  l4021FCAB
l4021FC98:
	a2 = 0x00000077
	a3 = 0x00000000
	a4 = 0x0000000F
	a5 = 0x00000001
	a6 = 1
	a7 = Mem0[a1 + 0x00000014:word32]
	a0 = 0x4021FCAB
	call a9 (retsize: 0;)
	// succ:  l4021FCAB
l4021FCAB:
	a2 = a13
	a0 = 0x4021FCB0
	call fn4031CA50 (retsize: 0;)
	// succ:  l4021FCB0
l4021FCB0:
	a2 = 0
	a3 = a1 + 16
	a8 = 0x4021F148
	a4 = Mem0[a12 + 0x000001CC:word32]
	a9 = 0
	a5 = 0x4021FBEC
	a7 = 0x4021D5C8
	a6 = a5 - 102
	v19 = Mem0[a7 + 0x00000000:byte]
	a7 = (uint32) v19
	Mem0[a1 + 0x00000004:word32] = a9
	Mem0[a1 + 0x00000008:word32] = a9
	Mem0[a1 + 0x0000000C:word32] = a9
	Mem0[a1:word32] = a8
	a7 = a7 + 1
	a7 = a7 & 0x000000FF
	a0 = 0x4021FCD9
	call fn4031D788 (retsize: 0;)
	a2 = 0x4021C30C
	a4 = 0
	a3 = a2 + 111
	a0 = 0x4021FCE4
	call fn4031D158 (retsize: 0;)
	a4 = a2
	a2 = 0x4021E4EC
	Mem0[a12 + 0x000001DC:word32] = a4
	a3 = a2 + 9
	a0 = 0x4021FCF1
	call fn4031D158 (retsize: 0;)
	a12 = Mem0[a1 + 0x0000001C:word32]
	a13 = Mem0[a1 + 0x00000020:word32]
	a0 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_periodic_cal_exit
sdk_periodic_cal_exit:


// sdk_bbpll_cal
// Return size: 0
void sdk_bbpll_cal()
sdk_bbpll_cal_entry:
	// succ:  l4021FCFC
l4021FCFC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	a2 = 0x4021287C
	a4 = Mem0[a2 + 0x00000214:word32]
	Mem0[a1:word32] = a4
	a3 = 0xFFFFFFFE
	a0 = Mem0[a2 + 0x00000214:word32]
	a0 = a0 & a3
	Mem0[a2 + 0x00000214:word32] = a0
	a2 = 80
	a0 = 0x4021FD25
	call fn40303F20 (retsize: 0;)
	a2 = 1
	a0 = 0x4021FD2A
	call fn40303F28 (retsize: 0;)
	a7 = 8
	a8 = -13
	a6 = 0x4021C0CC
	a5 = Mem0[a6 + 0x00000340:word32]
	a5 = a5 & a8
	a5 = a5 | a7
	Mem0[a6 + 0x00000340:word32] = a5
	a2 = 0x000003E8
	a0 = 0x4021FD49
	call fn40303F28 (retsize: 0;)
	a11 = 4
	a10 = 0x4021C0CC
	a9 = Mem0[a10 + 0x00000340:word32]
	a0 = -13
	a9 = a9 & a0
	a9 = a9 | a11
	Mem0[a10 + 0x00000340:word32] = a9
	a2 = 1
	a0 = 0x4021FD67
	call fn40303F28 (retsize: 0;)
	a3 = 0x4021287C
	a2 = Mem0[a1 + 0x00000000:word32]
	Mem0[a3 + 0x00000214:word32] = a2
	branch (a2 & 0x00000001) == 0x00000000 l4021FD7B
	// succ:  l4021FD75 l4021FD7B
l4021FD75:
	a2 = 0x000000A0
	a0 = 0x4021FD7B
	call fn40303F20 (retsize: 0;)
	// succ:  l4021FD7B
l4021FD7B:
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_bbpll_cal_exit
sdk_bbpll_cal_exit:


// sdk_periodic_cal_top
// Return size: 0
void sdk_periodic_cal_top()
sdk_periodic_cal_top_entry:
	// succ:  l4021FD88
l4021FD88:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = 0x4021FD84
	a6 = 0
	v6 = Mem0[a0 + 0x00000093:byte]
	a3 = (uint32) v6
	v8 = Mem0[a0 + 0x0000006B:byte]
	a5 = (uint32) v8
	branch a3 != 0x00000000 l4021FDA2
	// succ:  l4021FD9A l4021FDA2
l4021FD9A:
	a4 = 1
	Mem0[a0 + 0x00000093:byte] = a4
	goto l4021FDD4
	// succ:  l4021FDD4
l4021FDA2:
	Mem0[a1:word32] = a2
	Mem0[a0 + 0x00000093:byte] = a6
	branch (a5 & 0x00000002) != 0x00000000 l4021FDD4
	// succ:  l4021FDAB l4021FDD4
l4021FDAB:
	a2 = 0x00000004
	a0 = 0x4021FDB1
	call sdk_pm_set_sleep_mode (retsize: 0;)
	a0 = 0x4021FD84
	v12 = Mem0[a0 + 0x00000094:byte]
	a7 = (uint32) v12
	branch a7 != 0x00000000 l4021FDC0
	// succ:  l4021FDBA l4021FDC0
l4021FDBA:
	a0 = 0x4021FDBD
	call fn4031FCFC (retsize: 0;)
	a0 = 0x4021FD84
	// succ:  l4021FDC0
l4021FDC0:
	a2 = Mem0[a1 + 0x00000000:word32]
	a8 = 0x00000000
	Mem0[a0 + 0x00000094:byte] = a8
	a0 = 0x4021FDCC
	call fn4031FBF0 (retsize: 0;)
	a2 = 0x00000004
	a3 = 0
	a0 = 0x4021FDD4
	call sdk_pm_wakeup_init (retsize: 0;)
	// succ:  l4021FDD4
l4021FDD4:
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_periodic_cal_top_exit
sdk_periodic_cal_top_exit:


// sdk_register_chipv6_phy_init_param
// Return size: 0
void sdk_register_chipv6_phy_init_param()
sdk_register_chipv6_phy_init_param_entry:
	// succ:  l4021FDE8
l4021FDE8:
	a1 = fp
	a6 = 0
	a9 = 0x4021C308
	v6 = Mem0[a2 + 0x00000000:byte]
	a4 = (uint32) v6
	a5 = a9
	a8 = a9 - 64
	Mem0[a9:byte] = a4
	v11 = Mem0[a2 + 0x00000001:byte]
	a3 = (uint32) v11
	a7 = a9 + 15
	a3 = a3 >>u 0x00000001 & 0x00000001
	Mem0[a9 + 0x00000002:byte] = a3
	// succ:  l4021FE03
l4021FE03:
	a10 = a6 + a2
	a6 = a6 + 1
	v14 = Mem0[a10 + 0x00000002:byte]
	a10 = (uint32) v14
	Mem0[a5 + 0x00000003:byte] = a10
	a5 = a5 + 1
	branch a5 != a7 l4021FE03
	// succ:  l4021FE12 l4021FE03
l4021FE12:
	a5 = a9
	a10 = 0x4021F150
	a6 = 0
	// succ:  l4021FE19
l4021FE19:
	a3 = a6 + a2
	a5 = a5 + 1
	a6 = a6 + 1
	v15 = Mem0[a3 + 0x00000011:byte]
	a4 = (uint32) v15
	Mem0[a5 + 0x00000011:byte] = a4
	v16 = Mem0[a3 + 0x00000014:byte]
	a7 = (uint32) v16
	a11 = a4 << 8
	a4 = a4 + a7
	Mem0[a5 + 0x00000014:byte] = a4
	v18 = Mem0[a3 + 0x00000017:byte]
	a3 = (uint32) v18
	a11 = a11 >> 24
	a11 = a11 + a3
	Mem0[a5 + 0x00000017:byte] = a11
	branch a5 != a10 l4021FE19
	// succ:  l4021FE3E l4021FE19
l4021FE3E:
	a5 = a9
	a7 = 0x4021FDDC
	a10 = 0
	a6 = 0
	v19 = Mem0[a2 + 0x0000001A:byte]
	a11 = (uint32) v19
	Mem0[a8 + 0x0000005C:byte] = a11
	v20 = Mem0[a2 + 0x0000001B:byte]
	a4 = (uint32) v20
	Mem0[a8 + 0x0000005D:byte] = a4
	a4 = a6 + a2
	v21 = Mem0[a2 + 0x0000001C:byte]
	a3 = (uint32) v21
	v22 = Mem0[a2 + 0x0000001D:byte]
	a11 = (uint32) v22
	a3 = a3 & 0x0000003F
	a3 = a3 << 24
	a11 = a11 | a3
	Mem0[a8 + 0x0000005E:word16] = a11
	// succ:  l4021FE67
l4021FE67:
	a6 = a6 + 1
	v23 = Mem0[a4 + 0x0000001E:byte]
	a4 = (uint32) v23
	Mem0[a5 + 0x00000020:byte] = a4
	a3 = a4 << 8
	a3 = a3 >> 24
	branch a3 >= 6 l4021FE7B
	// succ:  l4021FE78 l4021FE7B
l4021FE78:
	branch (a4 & 0x00000080) == 0x00000000 l4021FE7E
	// succ:  l4021FE7B l4021FE7E
l4021FE7B:
	Mem0[a5 + 0x00000020:byte] = a10
	// succ:  l4021FE7E
l4021FE7E:
	a4 = a6 + a2
	a5 = a5 + 1
	branch a5 != a7 l4021FE67
	// succ:  l4021FE85 l4021FE67
l4021FE85:
	a5 = a9
	a7 = 0x4021FDE0
	a6 = 0
	// succ:  l4021FE8C
l4021FE8C:
	a10 = a6 + a2
	a6 = a6 + 1
	v24 = Mem0[a10 + 0x00000022:byte]
	a10 = (uint32) v24
	Mem0[a5 + 0x00000024:byte] = a10
	a5 = a5 + 1
	branch a5 != a7 l4021FE8C
	// succ:  l4021FE9B l4021FE8C
l4021FE9B:
	a5 = a9
	a7 = 0x4021FDE4
	a6 = 0
	// succ:  l4021FEA2
l4021FEA2:
	a11 = a6 + a2
	a6 = a6 + 1
	v25 = Mem0[a11 + 0x00000028:byte]
	a11 = (uint32) v25
	Mem0[a5 + 0x0000002A:byte] = a11
	a5 = a5 + 1
	branch a5 != a7 l4021FEA2
	// succ:  l4021FEB1 l4021FEA2
l4021FEB1:
	a5 = 5
	v26 = Mem0[a2 + 0x00000030:byte]
	a3 = (uint32) v26
	Mem0[a8 + 0x00000041:byte] = a3
	v27 = Mem0[a2 + 0x00000031:byte]
	a11 = (uint32) v27
	Mem0[a8 + 0x00000073:byte] = a11
	v28 = Mem0[a2 + 0x00000032:byte]
	a10 = (uint32) v28
	Mem0[a8 + 0x00000074:byte] = a10
	v29 = Mem0[a2 + 0x00000033:byte]
	a9 = (uint32) v29
	Mem0[a8 + 0x00000075:byte] = a9
	v30 = Mem0[a2 + 0x00000034:byte]
	a7 = (uint32) v30
	Mem0[a8 + 0x00000076:byte] = a7
	v31 = Mem0[a2 + 0x00000035:byte]
	a6 = (uint32) v31
	Mem0[a8 + 0x00000077:byte] = a6
	v32 = Mem0[a2 + 0x00000036:byte]
	a4 = (uint32) v32
	Mem0[a8 + 0x00000078:byte] = a4
	v33 = Mem0[a2 + 0x00000037:byte]
	a3 = (uint32) v33
	Mem0[a8 + 0x00000079:byte] = a3
	v34 = Mem0[a2 + 0x00000038:byte]
	a11 = (uint32) v34
	Mem0[a8 + 0x0000007A:byte] = a11
	v35 = Mem0[a2 + 0x00000040:byte]
	a10 = (uint32) v35
	Mem0[a8 + 0x0000007B:byte] = a10
	v36 = Mem0[a2 + 0x00000041:byte]
	a9 = (uint32) v36
	Mem0[a8 + 0x0000007C:byte] = a9
	v37 = Mem0[a2 + 0x00000042:byte]
	a7 = (uint32) v37
	v38 = Mem0[a2 + 0x00000043:byte]
	a6 = (uint32) v38
	a7 = a7 & 0x0000003F
	a7 = a7 << 24
	a6 = a6 | a7
	Mem0[a8 + 0x0000007E:word16] = a6
	v39 = Mem0[a2 + 0x00000044:byte]
	a4 = (uint32) v39
	Mem0[a8 + 0x00000080:byte] = a4
	v40 = Mem0[a2 + 0x00000045:byte]
	a3 = (uint32) v40
	Mem0[a8 + 0x00000081:byte] = a3
	v41 = Mem0[a2 + 0x00000047:byte]
	a11 = (uint32) v41
	v42 = Mem0[a2 + 0x00000046:byte]
	a10 = (uint32) v42
	a11 = a11 << 8
	a10 = a10 << 8
	a10 = a10 >> 24
	a11 = a11 >> 24
	a11 = a11 << 24
	a10 = a10 | a11
	Mem0[a8 + 0x00000082:word16] = a10
	v43 = Mem0[a2 + 0x00000049:byte]
	a9 = (uint32) v43
	v44 = Mem0[a2 + 0x00000048:byte]
	a7 = (uint32) v44
	a9 = a9 << 8
	a7 = a7 << 8
	a7 = a7 >> 24
	a9 = a9 >> 24
	a9 = a9 << 24
	a7 = a7 | a9
	Mem0[a8 + 0x00000084:word16] = a7
	v45 = Mem0[a2 + 0x0000004A:byte]
	a6 = (uint32) v45
	Mem0[a8 + 0x00000086:byte] = a6
	v46 = Mem0[a2 + 0x0000004B:byte]
	a4 = (uint32) v46
	a6 = a5
	a4 = a4 & 0x0000000F
	Mem0[a8 + 0x00000088:byte] = a4
	branch a4 >=u 0x00000006 l4021FF5F
	// succ:  l4021FF5D l4021FF5F
l4021FF5D:
	a6 = a4
	// succ:  l4021FF5F
l4021FF5F:
	Mem0[a8 + 0x00000088:byte] = a6
	v47 = Mem0[a2 + 0x0000004B:byte]
	a9 = (uint32) v47
	a9 = a9 >>u 0x00000004 & 0x00000007
	Mem0[a8 + 0x0000008A:byte] = a9
	v48 = Mem0[a2 + 0x0000004B:byte]
	a7 = (uint32) v48
	a7 = a7 >>u 0x00000007 & 0x00000001
	Mem0[a8 + 0x0000008C:byte] = a7
	v49 = Mem0[a2 + 0x0000004C:byte]
	a6 = (uint32) v49
	a6 = a6 & 0x0000000F
	Mem0[a8 + 0x00000087:byte] = a6
	branch a5 <u a6 l4021FF82
	// succ:  l4021FF80 l4021FF82
l4021FF80:
	a5 = a6
	// succ:  l4021FF82
l4021FF82:
	Mem0[a8 + 0x00000087:byte] = a5
	v50 = Mem0[a2 + 0x0000004C:byte]
	a9 = (uint32) v50
	a9 = a9 >>u 0x00000004 & 0x00000007
	Mem0[a8 + 0x00000089:byte] = a9
	v51 = Mem0[a2 + 0x0000004C:byte]
	a7 = (uint32) v51
	a7 = a7 >>u 0x00000007 & 0x00000001
	Mem0[a8 + 0x0000008B:byte] = a7
	v52 = Mem0[a2 + 0x0000004D:byte]
	a6 = (uint32) v52
	a6 = a6 & 0x0000000F
	Mem0[a8 + 0x0000008E:byte] = a6
	v53 = Mem0[a2 + 0x0000004D:byte]
	a4 = (uint32) v53
	a4 = a4 >>u 0x00000004 & 0x0000000F
	Mem0[a8 + 0x0000008D:byte] = a4
	v54 = Mem0[a2 + 0x0000004E:byte]
	a3 = (uint32) v54
	Mem0[a8 + 0x0000008F:byte] = a3
	v55 = Mem0[a2 + 0x0000004F:byte]
	a11 = (uint32) v55
	Mem0[a8 + 0x00000090:byte] = a11
	v56 = Mem0[a2 + 0x00000050:byte]
	a10 = (uint32) v56
	Mem0[a8 + 0x00000091:byte] = a10
	v57 = Mem0[a2 + 0x00000051:byte]
	a9 = (uint32) v57
	Mem0[a8 + 0x00000092:byte] = a9
	v58 = Mem0[a2 + 0x00000052:byte]
	a7 = (uint32) v58
	Mem0[a8 + 0x00000093:byte] = a7
	v59 = Mem0[a2 + 0x00000053:byte]
	a6 = (uint32) v59
	Mem0[a8 + 0x00000094:byte] = a6
	v60 = Mem0[a2 + 0x00000054:byte]
	a4 = (uint32) v60
	Mem0[a8 + 0x00000095:byte] = a4
	v61 = Mem0[a2 + 0x00000055:byte]
	a3 = (uint32) v61
	Mem0[a8 + 0x00000096:byte] = a3
	v62 = Mem0[a2 + 0x00000056:byte]
	a11 = (uint32) v62
	Mem0[a8 + 0x00000097:byte] = a11
	v63 = Mem0[a2 + 0x00000057:byte]
	a10 = (uint32) v63
	Mem0[a8 + 0x00000098:byte] = a10
	v64 = Mem0[a2 + 0x00000058:byte]
	a9 = (uint32) v64
	Mem0[a8 + 0x00000099:byte] = a9
	v65 = Mem0[a2 + 0x00000059:byte]
	a7 = (uint32) v65
	Mem0[a8 + 0x0000009A:byte] = a7
	v66 = Mem0[a2 + 0x0000005A:byte]
	a6 = (uint32) v66
	Mem0[a8 + 0x0000009B:byte] = a6
	v67 = Mem0[a2 + 0x0000005B:byte]
	a4 = (uint32) v67
	Mem0[a8 + 0x0000009C:byte] = a4
	v68 = Mem0[a2 + 0x0000005C:byte]
	a3 = (uint32) v68
	Mem0[a8 + 0x0000009D:byte] = a3
	v69 = Mem0[a2 + 0x0000005D:byte]
	a11 = (uint32) v69
	Mem0[a8 + 0x0000009E:byte] = a11
	v70 = Mem0[a2 + 0x0000005E:byte]
	a10 = (uint32) v70
	Mem0[a8 + 0x0000009F:byte] = a10
	v71 = Mem0[a2 + 0x0000005F:byte]
	a9 = (uint32) v71
	Mem0[a8 + 0x000000A0:byte] = a9
	v72 = Mem0[a2 + 0x00000060:byte]
	a7 = (uint32) v72
	Mem0[a8 + 0x000000A1:byte] = a7
	v73 = Mem0[a2 + 0x00000061:byte]
	a6 = (uint32) v73
	Mem0[a8 + 0x000000A2:byte] = a6
	v74 = Mem0[a2 + 0x00000062:byte]
	a4 = (uint32) v74
	Mem0[a8 + 0x000000A3:byte] = a4
	v75 = Mem0[a2 + 0x00000063:byte]
	a3 = (uint32) v75
	Mem0[a8 + 0x000000A4:byte] = a3
	v76 = Mem0[a2 + 0x00000064:byte]
	a11 = (uint32) v76
	Mem0[a8 + 0x000000A5:byte] = a11
	v77 = Mem0[a2 + 0x00000065:byte]
	a10 = (uint32) v77
	Mem0[a8 + 0x000000A6:byte] = a10
	v78 = Mem0[a2 + 0x00000066:byte]
	a9 = (uint32) v78
	Mem0[a8 + 0x000000A7:byte] = a9
	v79 = Mem0[a2 + 0x00000067:byte]
	a7 = (uint32) v79
	Mem0[a8 + 0x000000A8:byte] = a7
	v80 = Mem0[a2 + 0x00000068:byte]
	a6 = (uint32) v80
	Mem0[a8 + 0x000000A9:byte] = a6
	v81 = Mem0[a2 + 0x00000069:byte]
	a4 = (uint32) v81
	Mem0[a8 + 0x000000AA:byte] = a4
	v82 = Mem0[a2 + 0x0000006A:byte]
	a3 = (uint32) v82
	Mem0[a8 + 0x000000AB:byte] = a3
	v83 = Mem0[a2 + 0x0000006B:byte]
	a11 = (uint32) v83
	Mem0[a8 + 0x000000AC:byte] = a11
	v84 = Mem0[a2 + 0x0000006C:byte]
	a10 = (uint32) v84
	Mem0[a8 + 0x000000AD:byte] = a10
	a2 = 0
	return
	// succ:  sdk_register_chipv6_phy_init_param_exit
sdk_register_chipv6_phy_init_param_exit:


// sdk_change_bbpll160_sleep
// Return size: 0
void sdk_change_bbpll160_sleep()
sdk_change_bbpll160_sleep_entry:
	// succ:  l4022006C
l4022006C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a12
	a2 = -1
	a12 = 0x402125CC
	a0 = 0x4021BCEC
	a3 = 2
	a4 = 8
	a5 = 0
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a12 + 0x00000124:word32] = a2
	a0 = Mem0[a0 + 0x00000098:word32]
	a2 = 0x0000006A
	v9 = a0
	a0 = 0x40220094
	call v9 (retsize: 0;)
	a2 = 0
	Mem0[a12 + 0x0000010C:word32] = a2
	a2 = 3
	a0 = 0x402200A1
	call sdk_pm_set_sleep_cycles (retsize: 0;)
	a7 = 0
	Mem0[a12 + 0x00000140:word32] = a7
	Mem0[a12 + 0x00000144:word32] = a7
	a6 = -2
	a5 = Mem0[a12 + 0x000001A8:word32]
	a5 = a5 & a6
	Mem0[a12 + 0x000001A8:word32] = a5
	a4 = Mem0[a12 + 0x00000100:word32]
	Mem0[a1 + 0x00000004:word32] = a4
	a3 = 0x40220068
	Mem0[a12 + 0x00000100:word32] = a3
	a2 = 8
	a3 = 0
	a0 = 0x402200D8
	call sdk_pm_wakeup_opt (retsize: 0;)
	a9 = 0x40204570
	a8 = Mem0[a12 + 0x00000108:word32]
	a0 = 0x4021DCEC
	a8 = a8 | a9
	v14 = Mem0[a0 + 0x00000080:byte]
	a0 = (uint32) v14
	Mem0[a1:word32] = a8
	branch a0 != 1 l4022011C
	// succ:  l402200EF l4022011C
l402200EF:
	a2 = 0x00000067
	a0 = 0x4021BCEC
	a3 = 4
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = 1
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 0x00000088
	v15 = a0
	a0 = 0x40220104
	call v15 (retsize: 0;)
	a2 = 0x00000067
	a0 = 0x4021BCEC
	a3 = 4
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = 2
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 0x00000091
	v16 = a0
	a0 = 0x40220119
	call v16 (retsize: 0;)
	goto l4022013A
	// succ:  l4022013A
l4022011C:
	branch a0 != 2 l4022013A
	// succ:  l4022011F l4022013A
l4022011F:
	a2 = 0x00000067
	a3 = 0x00000004
	a4 = 0x00000002
	a0 = 0x4021BCEC
	a5 = 0x00000007
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = 5
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 2
	v17 = a0
	a0 = 0x4022013A
	call v17 (retsize: 0;)
	// succ:  l4022013A
l4022013A:
	a2 = Mem0[a1 + 0x00000000:word32]
	Mem0[a12 + 0x00000108:word32] = a2
	a2 = 1
	a0 = 0x40220147
	call sdk_pm_wait4wakeup (retsize: 0;)
	a3 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	Mem0[a12 + 0x00000100:word32] = a3
	a12 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_change_bbpll160_sleep_exit
sdk_change_bbpll160_sleep_exit:


// sdk_change_bbpll160
// Return size: 0
void sdk_change_bbpll160()
sdk_change_bbpll160_entry:
	// succ:  l4022015C
l4022015C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40220164
	call sdk_get_chip_version (retsize: 0;)
	a0 = 0x40220158
	v5 = Mem0[a0 + 0x0000004E:byte]
	a3 = (uint32) v5
	v6 = Mem0[a0 + 0x000000B2:byte]
	a0 = (uint32) v6
	branch a3 == 0x00000000 l40220185
	// succ:  l4022016F l40220185
l4022016F:
	branch a0 != 1 l4022017B
	// succ:  l40220172 l4022017B
l40220172:
	a0 = 0x40220175
	call fn4032006C (retsize: 0;)
	goto l40220185
	// succ:  l40220185
l4022017B:
	branch a0 != 0x00000000 l40220185
	// succ:  l4022017D l40220185
l4022017D:
	branch a2 == 1 l40220185
	// succ:  l40220180 l40220185
l40220180:
	branch a2 == 0x00000000 l40220185
	// succ:  l40220182 l40220185
l40220182:
	a0 = 0x40220185
	call fn4032006C (retsize: 0;)
	// succ:  l40220185
l40220185:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_change_bbpll160_exit
sdk_change_bbpll160_exit:


// sdk_set_crystal_uart
// Return size: 0
void sdk_set_crystal_uart()
sdk_set_crystal_uart_entry:
	// succ:  l4022018C
l4022018C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021DCEC
	a2 = 0x4021D26C
	v5 = Mem0[a0 + 0x00000080:byte]
	a0 = (uint32) v5
	a2 = Mem0[a2 + 0x0000000C:word32]
	branch a0 == 0x00000000 l402201D4
	// succ:  l402201A0 l402201D4
l402201A0:
	branch (a2 & 0x08000000) != 0x00000000 l402201D4
	// succ:  l402201A3 l402201D4
l402201A3:
	a0 = 0x402201A6
	call fn4032006C (retsize: 0;)
	a0 = 0x4021BDB8
	a3 = Mem0[a0 + 0x00000118:word32]
	branch (a3 & 0x00040000) == 0x00000000 l402201D4
	// succ:  l402201B2 l402201D4
l402201B2:
	a4 = Mem0[a0 + 0x00000118:word32]
	a4 = a4 >>u 0x0000001D & 0x00000007
	branch a4 != 2 l402201D4
	// succ:  l402201BE l402201D4
l402201BE:
	a5 = 0x402125CC
	a5 = Mem0[a5 + 0x00000220:word32]
	branch (a5 & 0x00000100) == 0x00000000 l402201D4
	// succ:  l402201CA l402201D4
l402201CA:
	a2 = 1
	a0 = 0x402201CF
	call fn40312488 (retsize: 0;)
	a2 = 1
	a0 = 0x402201D4
	call fn40312484 (retsize: 0;)
	// succ:  l402201D4
l402201D4:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_set_crystal_uart_exit
sdk_set_crystal_uart_exit:


// sdk_ant_switch_init
// Return size: 0
void sdk_ant_switch_init()
sdk_ant_switch_init_entry:
	// succ:  l402201FC
l402201FC:
	a1 = fp
	a7 = 0x402201DC
	a3 = 0x4021BDC0
	v6 = Mem0[a7 + 0x0000007F:byte]
	a4 = (uint32) v6
	a5 = 0x402201E0
	branch a4 == 1 l40220274
	// succ:  l4022020B l40220274
l4022020B:
	branch a4 == 3 l40220274
	// succ:  l4022020E l40220274
l4022020E:
	a6 = 0x402201E4
	branch a4 == 4 l40220286
	// succ:  l40220214 l40220286
l40220214:
	branch a4 == 5 l40220286
	// succ:  l40220217 l40220286
l40220217:
	v9 = Mem0[a7 + 0x00000081:byte]
	a4 = (uint32) v9
	branch a4 != 2 l4022022F
	// succ:  l4022021D l4022022F
l4022021D:
	a2 = 0x402201E8
	Mem0[a3 + 0x00000360:word32] = a2
	Mem0[a3 + 0x00000364:word32] = a6
	goto l40220241
	// succ:  l40220241
l4022022F:
	branch a4 != 3 l40220241
	// succ:  l40220232 l40220241
l40220232:
	a4 = 0x402201EC
	Mem0[a3 + 0x00000360:word32] = a4
	Mem0[a3 + 0x00000364:word32] = a5
	// succ:  l40220241
l40220241:
	a10 = 0x4021C17C
	a9 = Mem0[a3 + 0x00000100:word32]
	a9 = a9 | a10
	Mem0[a3 + 0x00000100:word32] = a9
	a8 = 0x402201F0
	a7 = 0x402045E8
	a6 = Mem0[a3 + 0x00000108:word32]
	a6 = a6 & a8
	a6 = a6 | a7
	Mem0[a3 + 0x00000108:word32] = a6
	a5 = 2
	Mem0[a3 + 0x00000028:word32] = a5
	return
	// succ:  sdk_ant_switch_init_exit
l40220274:
	Mem0[a3 + 0x00000360:word32] = a5
	a11 = 0x402201F4
	Mem0[a3 + 0x00000364:word32] = a11
	goto l40260241
	// succ:  l40260241
l40220286:
	Mem0[a3 + 0x00000360:word32] = a6
	a2 = 0x402201F8
	Mem0[a3 + 0x00000364:word32] = a2
	// succ:  l40260241
l40260241:
sdk_ant_switch_init_exit:


// sdk_register_chipv6_phy
// Return size: 0
void sdk_register_chipv6_phy()
sdk_register_chipv6_phy_entry:
	// succ:  l402202E0
l402202E0:
	a1 = fp
	a5 = 0x402125CC
	a3 = 0x40220298
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000014:word32] = a15
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	a14 = a2
	a13 = 0x40212EE8
	a15 = 0x4022029C
	v11 = Mem0[a15 + 0x00000000:byte]
	a0 = (uint32) v11
	a4 = 1
	a5 = Mem0[a5 + 0x00000114:word32]
	a2 = 0
	a5 = a5 & 0x00000007
	a5 = a5 - 2
	branch a5 != 0x00000000 l40220311
	// succ:  l4022030E_1 l40220311
l4022030E_1:
	a2 = a4
	// succ:  l40220311
l40220311:
	Mem0[a3 + 0x0000009C:byte] = a2
	branch a0 != 0x00000000 l40220338
	// succ:  l40220316 l40220338
l40220316:
	branch a2 == 0x00000000 l402204BF
	// succ:  l40220319 l402204BF
l40220319:
	a3 = 0x40220298
	v13 = Mem0[a3 + 0x0000007B:byte]
	a3 = (uint32) v13
	branch a3 == 0x00000000 l402204BF
	// succ:  l40220322 l402204BF
l40220322:
	a2 = Mem0[a13 + 0x0000027C:word32]
	a2 = a2 & 0x0000FFFF
	a4 = a3 - a2
	branch a4 != 0x00000000 l402204DB
	// succ:  l40220331 l402204DB
l40220331:
	a2 = 0
	a5 = 0
	goto l402204C3
	// succ:  l402204C3
l40220338:
	a5 = 0
	a3 = 0x4021C30C
	a12 = a3 - 12
	a3 = a3 + 111
	branch a5 == 0x00000000 l4022036F
	// succ:  l40220345 l4022036F
l40220345:
	a2 = 0x4021C30C
	a4 = 0
	a0 = 0x4022034D
	call fn4031D188 (retsize: 0;)
	a4 = a2
	Mem0[a12 + 0x000001DC:word32] = a2
	a2 = 0x4021E4EC
	a3 = a2 + 9
	a0 = 0x4022035A
	call fn4031D188 (retsize: 0;)
	a9 = 0x4021F528
	a7 = Mem0[a12 + 0x0000000C:word32]
	a8 = 0x402202A0
	a7 = a7 & a9
	branch a7 == a8 l4022036C
	// succ:  l40220368 l4022036C
l40220368:
	a10 = 0
	Mem0[a12 + 0x0000000C:word32] = a10
	// succ:  l4022036C
l4022036C:
	v20 = Mem0[a15 + 0x00000000:byte]
	a0 = (uint32) v20
	// succ:  l4022036F
l4022036F:
	a7 = 1
	a4 = 0x4021C0CC
	a6 = Mem0[a4 + 0x00000348:word32]
	a6 = a6 | a7
	Mem0[a4 + 0x00000348:word32] = a6
	a5 = -2
	a3 = Mem0[a4 + 0x00000348:word32]
	a3 = a3 & a5
	a11 = 0x402202AC
	a9 = 0x402202B4
	a10 = 0x402202B0
	a8 = 0x402202B8
	a7 = 0x402202BC
	a6 = 0x402202C0
	a5 = 0x402202C4
	Mem0[a4 + 0x00000348:word32] = a3
	a2 = 0x4021BCEC
	a3 = 0x402202A8
	a2 = Mem0[a2 + 0x00000000:word32]
	a4 = 0x402202A4
	Mem0[a2 + 0x00000024:word32] = a5
	Mem0[a2 + 0x00000064:word32] = a6
	Mem0[a2 + 0x00000058:word32] = a7
	Mem0[a2 + 0x00000028:word32] = a8
	Mem0[a2 + 0x000000A0:word32] = a10
	Mem0[a2 + 0x00000088:word32] = a9
	Mem0[a2 + 0x000000E8:word32] = a11
	Mem0[a2 + 0x0000010C:word32] = a4
	Mem0[a2 + 0x00000048:word32] = a3
	a4 = 0x402202C8
	a3 = 0x402202CC
	a11 = 0x402202D0
	Mem0[a2 + 0x00000074:word32] = a11
	Mem0[a2 + 0x00000078:word32] = a3
	Mem0[a2 + 0x000000D8:word32] = a4
	branch a0 != 0x00000000 l402203EF
	// succ:  l402203E1 l402203EF
l402203E1:
	a2 = a14
	a0 = 0x402203E6
	call fn4031FDE8 (retsize: 0;)
	a14 = a2
	a8 = 14
	Mem0[a1:word32] = a8
	goto l402203FE
	// succ:  l402203FE
l402203EF:
	v23 = Mem0[a12 + 0x0000005A:byte]
	a9 = (uint32) v23
	a14 = 0x00000000
	a9 = a9 << 8
	a9 = a9 >> 24
	Mem0[a1:word32] = a9
	// succ:  l402203FE
l402203FE:
	a0 = 0x40220401
	call fn4032018C (retsize: 0;)
	a0 = 0x40220404
	call fn403201FC (retsize: 0;)
	a0 = 0x40220407
	call fn4031F600 (retsize: 0;)
	a0 = 0x4022040A
	call fn4031F9DC (retsize: 0;)
	a2 = 0x402202D4
	a0 = 0x402202DC
	v21 = a0
	a0 = 0x40220413
	call v21 (retsize: 0;)
	v22 = Mem0[a15 + 0x00000000:byte]
	a10 = (uint32) v22
	a0 = Mem0[a12 + 0x0000000C:word32]
	branch a10 != 1 l40220427
	// succ:  l4022041C l40220427
l4022041C:
	branch (a0 & 0x08000000) != 0x00000000 l40220447
	// succ:  l4022041F l40220447
l4022041F:
	a2 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x40220424
	call fn4031CA50 (retsize: 0;)
	goto l40220447
	// succ:  l40220447
l40220427:
	a4 = 0
	a2 = 0x4021C30C
	a11 = 0x4021CB2C
	a3 = a2 + 111
	a11 = a0 | a11
	Mem0[a12 + 0x0000000C:word32] = a11
	a0 = 0x4022043A
	call fn4031D158 (retsize: 0;)
	a4 = a2
	Mem0[a12 + 0x000001DC:word32] = a2
	a2 = 0x4021E4EC
	a3 = a2 + 9
	a0 = 0x40220447
	call fn4031D158 (retsize: 0;)
	// succ:  l40220447
l40220447:
	a2 = 0x402202D8
	a0 = Mem0[a13 + 0x0000027C:word32]
	a0 = a0 & 0x0000FFFF
	a0 = a0 | a2
	a12 = 0x40220298
	Mem0[a13 + 0x0000027C:word32] = a0
	v24 = Mem0[a12 + 0x00000067:byte]
	a12 = (uint32) v24
	branch a12 != 2 l402204A9
	// succ:  l40220465 l402204A9
l40220465:
	a5 = 0x40220298
	v25 = Mem0[a5 + 0x00000066:byte]
	a6 = (uint32) v25
	v26 = Mem0[a5 + 0x00000064:byte]
	a4 = (uint32) v26
	v27 = Mem0[a5 + 0x00000063:byte]
	a3 = (uint32) v27
	a4 = a4 << 24
	a3 = a3 | a4
	v28 = Mem0[a5 + 0x00000075:byte]
	a4 = (uint32) v28
	v29 = Mem0[a5 + 0x00000074:byte]
	a2 = (uint32) v29
	a4 = a4 << 24
	a2 = a2 | a4
	v30 = Mem0[a5 + 0x00000065:byte]
	a4 = (uint32) v30
	a6 = a6 << 8
	a4 = a4 << 16
	a4 = a4 | a6
	a3 = a3 | a4
	v31 = Mem0[a5 + 0x00000077:byte]
	a6 = (uint32) v31
	v32 = Mem0[a5 + 0x00000076:byte]
	a5 = (uint32) v32
	a6 = a6 << 8
	a5 = a5 << 16
	a5 = a5 | a6
	a2 = a2 | a5
	Mem0[a3:word32] = a2
	// succ:  l402204A9
l402204A9:
	a0 = Mem0[a1 + 0x00000004:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a2 = a14
	a5 = 1
	Mem0[a15:byte] = a5
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_register_chipv6_phy_exit
l402204BF:
	a2 = 0
	a5 = 0
	// succ:  l402204C3
l402204C3:
	a7 = 0x4020462C
	a6 = Mem0[a13 + 0x0000027C:word32]
	a6 = a6 & a7
	a6 = a6 | a2
	Mem0[a13 + 0x0000027C:word32] = a6
	goto l4026033A
	// succ:  l4026033A
l402204DB:
	a5 = 1
	a2 = a2 + 1
	a2 = a2 & 0x0000FFFF
	goto l402604C3
	// succ:  l402604C3
l4026033A:
l402604C3:
sdk_register_chipv6_phy_exit:


// sdk_txbbgain2dcoindex
// Return size: 0
void sdk_txbbgain2dcoindex()
sdk_txbbgain2dcoindex_entry:
	// succ:  l402204E8
l402204E8:
	a1 = fp
	branch a2 == 4 l40220500
	// succ:  l402204EB l40220500
l402204EB:
	branch a2 == 16 l402204F8
	// succ:  l402204EE l402204F8
l402204EE:
	a3 = 18
	branch a2 == a3 l40220504
	// succ:  l402204F3 l40220504
l402204F3:
	a4 = 20
	branch a2 == a4 l402204FC
	// succ:  l402204F8 l402204FC
l402204F8:
	a2 = 1
	return
	// succ:  sdk_txbbgain2dcoindex_exit
l402204FC:
	a2 = 3
	return
	// succ:  sdk_txbbgain2dcoindex_exit
l40220500:
	a2 = 0
	return
	// succ:  sdk_txbbgain2dcoindex_exit
l40220504:
	a2 = 2
	return
	// succ:  sdk_txbbgain2dcoindex_exit
sdk_txbbgain2dcoindex_exit:


// sdk_dcoindex2txbbgain
// Return size: 0
void sdk_dcoindex2txbbgain()
sdk_dcoindex2txbbgain_entry:
	// succ:  l40220508
l40220508:
	a1 = fp
	branch a2 == 0x00000000 l4022051B
	// succ:  l4022050A l4022051B
l4022050A:
	branch a2 == 1 l40220513
	// succ:  l4022050D l40220513
l4022050D:
	branch a2 == 2 l4022051F
	// succ:  l40220510 l4022051F
l40220510:
	branch a2 == 3 l40220517
	// succ:  l40220513 l40220517
l40220513:
	a2 = 16
	return
	// succ:  sdk_dcoindex2txbbgain_exit
l40220517:
	a2 = 20
	return
	// succ:  sdk_dcoindex2txbbgain_exit
l4022051B:
	a2 = 4
	return
	// succ:  sdk_dcoindex2txbbgain_exit
l4022051F:
	a2 = 18
	return
	// succ:  sdk_dcoindex2txbbgain_exit
sdk_dcoindex2txbbgain_exit:


// sdk_init_cal_dcoffset
// Return size: 0
void sdk_init_cal_dcoffset()
sdk_init_cal_dcoffset_entry:
	// succ:  l40220528
l40220528:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000014:word32] = a15
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000004:word32] = a0
	a14 = a3
	a0 = Mem0[a2 + 0x00000000:word32]
	a12 = a2
	a0 = a0 >>u 0x00000013 & 0x00000001
	branch a0 != 0x00000000 l402205D0
	// succ:  l40220541 l402205D0
l40220541:
	a15 = 0x4021BCEC
	a2 = 0x40220524
	a0 = Mem0[a15 + 0x00000000:word32]
	v10 = Mem0[a2 + 0x00000000:uint16]
	a2 = (uint32) v10
	a0 = Mem0[a0 + 0x000000A4:word32]
	a2 = a2 & 0x0000001F
	v11 = a0
	a0 = 0x40220555
	call v11 (retsize: 0;)
	a2 = 1
	a0 = Mem0[a15 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 31
	v13 = a0
	a0 = 0x40220563
	call v13 (retsize: 0;)
	a13 = 0
	// succ:  l40220565
l40220565:
	a2 = a13 | a13
	a0 = 0x4022056B
	call fn40320508 (retsize: 0;)
	a4 = 0x000001F4
	a5 = 0x0000000C
	a6 = a1 | a1
	a0 = Mem0[a15 + 0x00000000:word32]
	a3 = a2
	a0 = Mem0[a0 + 0x000000E8:word32]
	a2 = 0
	v16 = a0
	a0 = 0x40220580
	call v16 (retsize: 0;)
	v17 = Mem0[a1 + 0x00000000:byte]
	a0 = (uint32) v17
	v18 = Mem0[a1 + 0x00000001:byte]
	a2 = (uint32) v18
	a0 = a0 << 8
	a2 = a2 << 8
	a2 = a2 >> 24
	a0 = a0 >> 24
	a2 = a2 << 24
	a0 = a0 | a2
	a2 = a14 + a13 * 0x00000002
	Mem0[a2:word16] = a0
	a13 = a13 + 1
	a13 = a13 & 0x000000FF
	branch a13 != 4 l40220565
	// succ:  l402205A6 l40220565
l402205A6:
	a3 = a1
	a2 = 0x40220524
	a4 = 1
	v19 = Mem0[a2 + 0x00000000:uint16]
	a2 = (uint32) v19
	a0 = 0x402205B3
	call sdk_set_txdc_pbus (retsize: 0;)
	a2 = 0x40220524
	a3 = a1
	v20 = Mem0[a2 + 0x00000000:uint16]
	a2 = (uint32) v20
	a0 = 0x402205BE
	call sdk_set_rfanagain_dc_reg (retsize: 0;)
	a0 = Mem0[a15 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000A8:word32]
	a13 = 0x4020445C
	v21 = a0
	a0 = 0x402205C9
	call v21 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000000:word32]
	a2 = a2 | a13
	Mem0[a12:word32] = a2
	// succ:  l402205D0
l402205D0:
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_init_cal_dcoffset_exit
sdk_init_cal_dcoffset_exit:


// sdk_set_rfanagain_dc_reg
// Return size: 0
void sdk_set_rfanagain_dc_reg()
sdk_set_rfanagain_dc_reg_entry:
	// succ:  l402205EC
l402205EC:
	a1 = fp
	a9 = a2 << 24
	a8 = 0x402205E0
	a7 = 0x4021BDB8
	a11 = 0x402205E4
	a10 = 0x402205E8
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	a0 = 0
	a13 = 24
	// succ:  l4022060A
l4022060A:
	a5 = a7 + a0 * 0x00000004
	a4 = Mem0[a5 + 0x00000304:word32]
	a4 = a4 & a8
	a4 = a4 | a9
	Mem0[a5 + 0x00000304:word32] = a4
	a2 = a0 >>u 1
	a2 = a7 + a2 * 0x00000004
	v16 = Mem0[a3 + 0x00000001:byte]
	a6 = (uint32) v16
	v18 = Mem0[a3 + 0x00000000:byte]
	a5 = (uint32) v18
	a6 = a6 << 8
	a5 = a5 << 8
	a5 = a5 >> 24
	a6 = a6 >> 24
	branch (a0 & 0x00000001) == 0x00000000 l40220658
	// succ:  l4022063A l40220658
l4022063A:
	a14 = a5 << 18
	a4 = a6 << 11
	a12 = Mem0[a2 + 0x00000204:word32]
	a12 = a12 & a11
	a12 = a12 | a4
	a12 = a12 | a14
	Mem0[a2 + 0x00000204:word32] = a12
	goto l40220670
	// succ:  l40220670
l40220658:
	a4 = a6 << 25
	a14 = Mem0[a2 + 0x00000204:word32]
	a14 = a14 & a10
	a14 = a14 | a4
	a14 = a14 | a5
	Mem0[a2 + 0x00000204:word32] = a14
	// succ:  l40220670
l40220670:
	a0 = a0 + 1
	a0 = a0 & 0x000000FF
	branch a0 != a13 l4022060A
	// succ:  l40220678 l4022060A
l40220678:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_set_rfanagain_dc_reg_exit
sdk_set_rfanagain_dc_reg_exit:


// sdk_set_txdc_pbus
// Return size: 0
void sdk_set_txdc_pbus()
sdk_set_txdc_pbus_entry:
	// succ:  l40220688
l40220688:
	a1 = fp
	a2 = a2 & 0x0000001F
	a1 = a1 - 16
	Mem0[a1:word32] = a4
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a0
	a12 = a3
	a0 = 0x40220699
	call fn403204E8 (retsize: 0;)
	a4 = 0x4021C30C
	a2 = a4 + a2 * 0x00000002
	v8 = Mem0[a2 + 0x00000004:uint16]
	a3 = (uint32) v8
	Mem0[a12:byte] = a3
	v9 = Mem0[a2 + 0x00000004:uint16]
	a2 = (uint32) v9
	a0 = Mem0[a1 + 0x00000000:word32]
	a2 = a2 >>u 8
	Mem0[a12 + 0x00000001:byte] = a2
	branch a0 == 0x00000000 l402206E8
	// succ:  l402206B2 l402206E8
l402206B2:
	a2 = 0
	a3 = 2
	v10 = Mem0[a12 + 0x00000000:byte]
	a4 = (uint32) v10
	a0 = 0x4021BCEC
	a4 = a4 << 8
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = a4 >> 24
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a4 & 0x0000FFFF
	v11 = a0
	a0 = 0x402206CD
	call v11 (retsize: 0;)
	a2 = 1
	a3 = 2
	v12 = Mem0[a12 + 0x00000001:byte]
	a4 = (uint32) v12
	a0 = 0x4021BCEC
	a4 = a4 << 8
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = a4 >> 24
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a4 & 0x0000FFFF
	v13 = a0
	a0 = 0x402206E8
	call v13 (retsize: 0;)
	// succ:  l402206E8
l402206E8:
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_set_txdc_pbus_exit
sdk_set_txdc_pbus_exit:


// sdk_get_rf_gain_qdb
// Return size: 0
void sdk_get_rf_gain_qdb()
sdk_get_rf_gain_qdb_entry:
	// succ:  l402206F4
l402206F4:
	a1 = fp
	branch a2 == 1 l4022070C
	// succ:  l402206F7 l4022070C
l402206F7:
	branch a2 == 2 l40220710
	// succ:  l402206FA l40220710
l402206FA:
	branch a2 == 3 l40220714
	// succ:  l402206FD l40220714
l402206FD:
	branch a2 == 4 l40220718
	// succ:  l40220700 l40220718
l40220700:
	a4 = a2 - 5
	a3 = 6
	a2 = 5
	branch a4 != 0x00000000 l4022070A
	// succ:  l40220707_1 l4022070A
l40220707_1:
	a2 = a3
	// succ:  l4022070A
l4022070A:
	return
	// succ:  sdk_get_rf_gain_qdb_exit
l4022070C:
	a2 = 14
	return
	// succ:  sdk_get_rf_gain_qdb_exit
l40220710:
	a2 = 10
	return
	// succ:  sdk_get_rf_gain_qdb_exit
l40220714:
	a2 = 8
	return
	// succ:  sdk_get_rf_gain_qdb_exit
l40220718:
	a2 = 7
	return
	// succ:  sdk_get_rf_gain_qdb_exit
sdk_get_rf_gain_qdb_exit:


// sdk_correct_rf_ana_gain
// Return size: 0
void sdk_correct_rf_ana_gain()
sdk_correct_rf_ana_gain_entry:
	// succ:  l4022071C
l4022071C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000014:word32] = a3
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1 + 0x0000000C:word32] = a14
	a15 = a3
	a14 = a2
	v10 = Mem0[a3 + 0x00000000:uint16]
	a13 = (uint32) v10
	v11 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v11
	a12 = a13 >>u 0x00000009 & 0x00000007
	a3 = a13 & 0x0000000F
	a0 = a2 << 8
	a0 = a0 >> 24
	a13 = a13 >>u 0x00000004 & 0x00000001
	a13 = a13 + a13 * 0x00000002
	a13 = a3 + a13 * 0x00000002
	a13 = a13 & 0x000000FF
	branch a0 < 1 l402207CD
	// succ:  l40220750 l402207CD
l40220750:
	branch a13 != 4 l40220764
	// succ:  l40220753 l40220764
l40220753:
	a0 = a0 - 8
	a13 = a13 + 2
	a13 = a13 & 0x000000FF
	Mem0[a14:byte] = a0
	a0 = a0 << 8
	a0 = a0 >> 24
	// succ:  l40220764
l40220764:
	branch a0 < 1 l402207A6
	// succ:  l40220767 l402207A6
l40220767:
	branch a12 >=u 0x00000007 l40220789
	// succ:  l4022076A l40220789
l4022076A:
	a2 = a12
	a0 = 0x4022076F
	call fn403206F4 (retsize: 0;)
	v13 = Mem0[a14 + 0x00000000:byte]
	a0 = (uint32) v13
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	a0 = a0 - a2
	Mem0[a14:byte] = a0
	a0 = a0 << 8
	a0 = a0 >> 24
	branch a0 < 1 l402207A6
	// succ:  l40220786 l402207A6
l40220786:
	branch a12 != 7 l4022076A
	// succ:  l40220789 l4022076A
l40220789:
	branch a0 < 1 l402207A6
	// succ:  l4022078C l402207A6
l4022078C:
	branch a13 >=u 0x0000000A l402207A6
	// succ:  l4022078F l402207A6
l4022078F:
	a0 = a0 - 8
	a13 = a13 + 2
	a13 = a13 & 0x000000FF
	Mem0[a14:byte] = a0
	a0 = a0 << 8
	a0 = a0 >> 24
	branch a0 < 1 l402207A6
	// succ:  l402207A3 l402207A6
l402207A3:
	branch a13 <u 0x0000000A l4022078F
	// succ:  l402207A6 l4022078F
l402207A6:
	a14 = a12 << 28
	a0 = Mem0[a1 + 0x00000000:word32]
	a12 = Mem0[a1 + 0x00000004:word32]
	a14 = a14 + 15
	a14 = a14 & 0x000000FF
	a14 = a14 << 27
	branch a13 <u 0x00000006 l402207BD
	a14 = a12 << 28
	a0 = Mem0[a1 + 0x00000000:word32]
	a12 = Mem0[a1 + 0x00000004:word32]
	a14 = a14 + 15
	a14 = a14 & 0x000000FF
	a14 = a14 << 27
	branch a13 <u 0x00000006 l402207BD
	// succ:  l402207B8 l402207BD
l402207B8:
	a13 = a13 + 10
	a13 = a13 & 0x000000FF
	a13 = a13 + 10
	a13 = a13 & 0x000000FF
	// succ:  l402207BD
l402207BD:
	a14 = a13 + a14
	Mem0[a15:word16] = a14
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_correct_rf_ana_gain_exit
l402207CD:
	branch (a2 & 0x00000080) == 0x00000000 l402207A6
	// succ:  l402207D0 l402207A6
l402207D0:
	branch a13 <u 0x00000007 l402207EA
	// succ:  l402207D3 l402207EA
l402207D3:
	a13 = a13 - 2
	a2 = a0 + 8
	Mem0[a14:byte] = a2
	a13 = a13 & 0x000000FF
	a0 = a2 << 8
	a0 = a0 >> 24
	branch (a2 & 0x00000080) == 0x00000000 l402207EA
	// succ:  l402207E7 l402207EA
l402207E7:
	branch a13 >=u 0x00000007 l402207D3
	// succ:  l402207EA l402207D3
l402207EA:
	branch a0 >= 0x00000000 l402207A6
	// succ:  l402207ED l402207A6
l402207ED:
	branch a12 <u 0x00000002 l4022080E
	// succ:  l402207F0 l4022080E
l402207F0:
	a12 = a12 - 1
	a12 = a12 & 0x000000FF
	a2 = a12
	a0 = 0x402207FA
	call fn403206F4 (retsize: 0;)
	v12 = Mem0[a14 + 0x00000000:byte]
	a3 = (uint32) v12
	a2 = a3 + a2
	Mem0[a14:byte] = a2
	a0 = a2 << 8
	a0 = a0 >> 24
	branch (a2 & 0x00000080) == 0x00000000 l4022080E
	// succ:  l4022080B l4022080E
l4022080B:
	branch a12 != 1 l402207F0
	// succ:  l4022080E l402207F0
l4022080E:
	branch a0 >= 0x00000000 l402207A6
	// succ:  l40220811 l402207A6
l40220811:
	branch a13 != 6 l402207A6
	// succ:  l40220814 l402207A6
l40220814:
	a13 = a13 - 2
	a2 = a0 + 8
	Mem0[a14:byte] = a2
	a13 = a13 & 0x000000FF
	// succ:  l402607A6
l402607A6:
sdk_correct_rf_ana_gain_exit:


// sdk_get_sar_dout
// Return size: 0
void sdk_get_sar_dout()
sdk_get_sar_dout_entry:
	// succ:  l40220824
l40220824:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a2
	Mem0[a1 + 0x0000001C:word32] = a0
	a2 = a1
	a0 = 0x40220830
	call sdk_read_sar_dout (retsize: 0;)
	a3 = 3
	v7 = Mem0[a1 + 0x00000006:uint16]
	a5 = (uint32) v7
	v9 = Mem0[a1 + 0x00000004:uint16]
	a11 = (uint32) v9
	v11 = Mem0[a1 + 0x00000002:uint16]
	a8 = (uint32) v11
	v13 = Mem0[a1 + 0x0000000E:uint16]
	a10 = (uint32) v13
	v15 = Mem0[a1 + 0x0000000C:uint16]
	a7 = (uint32) v15
	v17 = Mem0[a1 + 0x0000000A:uint16]
	a9 = (uint32) v17
	v19 = Mem0[a1 + 0x00000008:uint16]
	a6 = (uint32) v19
	a0 = 0x4021BCEC
	a4 = 0
	a2 = a4
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = a6 + a9
	a7 = a7 + a10
	a8 = a8 + a11
	a0 = Mem0[a0 + 0x00000038:word32]
	a5 = a5 + a8
	a7 = a7 + a7 * 0x00000002
	a6 = a6 + a6 * 0x00000002
	a6 = a6 - a7
	a5 = a5 * 0x00000002 - a7
	a5 = a5 << 16
	a6 = a6 << 16
	a6 = a6 >> 16
	a5 = a5 >> 16
	branch a5 < 0x00000000 l40220875
	// succ:  l40220872_1 l40220875
l40220872_1:
	a2 = a5
	// succ:  l40220875
l40220875:
	branch a6 < 0x00000000 l40220878
	// succ:  l40220875_2 l40220878
l40220875_2:
	a4 = a6
	// succ:  l40220878
l40220878:
	a4 = a4 << 16
	a2 = a2 << 16
	a2 = a2 >> 16
	a4 = a4 >> 16
	Mem0[a1 + 0x00000014:word32] = a4
	v21 = a0
	a0 = 0x40220889
	call v21 (retsize: 0;)
	a0 = 0x4021BCEC
	a3 = 3
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a1 + 0x00000018:word32] = a2
	a0 = Mem0[a0 + 0x00000038:word32]
	a2 = Mem0[a1 + 0x00000014:word32]
	v22 = a0
	a0 = 0x40220899
	call v22 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x0000001C:word32]
	a3 = a3 - a2
	a2 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	a2 = a2 + a3
	a2 = a2 << 16
	a2 = a2 >> 16
	return
	// succ:  sdk_get_sar_dout_exit
sdk_get_sar_dout_exit:


// sdk_cal_rf_ana_gain
// Return size: 0
void sdk_cal_rf_ana_gain()
sdk_cal_rf_ana_gain_entry:
	// succ:  l402208BC
l402208BC:
	a1 = fp
	a3 = 1
	a4 = 95
	a2 = 0x402208B0
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a0
	a12 = 0x40220524
	a0 = 0x4021BCEC
	Mem0[a12:word16] = a2
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a12:word16] = a2
	a0 = Mem0[a0 + 0x000000AC:word32]
	a2 = 7
	v8 = a0
	a0 = 0x402208E0
	call v8 (retsize: 0;)
	a2 = 0
	a0 = 0x4021BCEC
	a3 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	v9 = Mem0[a12 + 0x00000000:uint16]
	a4 = (uint32) v9
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a4 & 0x0000001F
	v10 = a0
	a0 = 0x402208F5
	call v10 (retsize: 0;)
	v11 = Mem0[a12 + 0x00000000:uint16]
	a2 = (uint32) v11
	a3 = a1 + 16
	a4 = 1
	a0 = 0x40220900
	call fn40320688 (retsize: 0;)
	a2 = 64
	a3 = 0x402208B4
	a4 = 1
	a5 = 31
	a7 = a1 + 18
	a8 = 0x402208B8
	v16 = Mem0[a12 + 0x00000000:uint16]
	a6 = (uint32) v16
	a9 = 0x00000138
	a6 = a6 & 0x0000001F
	Mem0[a1:word32] = a9
	v18 = Mem0[a8 + 0x00000000:byte]
	a8 = (uint32) v18
	Mem0[a1 + 0x00000004:word32] = a8
	a0 = 0x40220922
	call sdk_ram_rfcal_pwrctrl (retsize: 0;)
	v19 = Mem0[a1 + 0x00000012:byte]
	a0 = (uint32) v19
	a7 = 36
	a0 = a0 << 8
	a0 = a0 >> 24
	branch a7 < a0 l40220933
	// succ:  l40220930 l40220933
l40220930:
	branch a0 >= 12 l4022096D
	// succ:  l40220933 l4022096D
l40220933:
	a2 = 24
	a3 = a12
	a2 = a2 - a0
	Mem0[a1 + 0x00000012:byte] = a2
	a2 = a1 + 18
	a0 = 0x40220943
	call fn4032071C (retsize: 0;)
	a2 = 7
	a0 = 0x4021BCEC
	a3 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	v20 = Mem0[a12 + 0x00000000:uint16]
	a4 = (uint32) v20
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a4 >>u 5
	v21 = a0
	a0 = 0x40220958
	call v21 (retsize: 0;)
	a2 = 0
	a0 = 0x4021BCEC
	a3 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	v22 = Mem0[a12 + 0x00000000:uint16]
	a4 = (uint32) v22
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a4 & 0x0000001F
	v23 = a0
	a0 = 0x4022096D
	call v23 (retsize: 0;)
	// succ:  l4022096D
l4022096D:
	v24 = Mem0[a12 + 0x00000000:uint16]
	a2 = (uint32) v24
	a3 = a1 + 16
	a4 = 1
	a0 = 0x40220978
	call fn40320688 (retsize: 0;)
	v25 = Mem0[a12 + 0x00000000:uint16]
	a2 = (uint32) v25
	a3 = a1 + 16
	a0 = 0x40220981
	call fn403205EC (retsize: 0;)
	a0 = Mem0[a1 + 0x00000014:word32]
	v26 = Mem0[a12 + 0x00000000:uint16]
	a2 = (uint32) v26
	a3 = 0x4021C30C
	a12 = Mem0[a1 + 0x00000018:word32]
	Mem0[a3 + 0x00000076:word16] = a2
	a1 = a1 + 32
	return
	// succ:  sdk_cal_rf_ana_gain_exit
sdk_cal_rf_ana_gain_exit:


// sdk_meas_tone_pwr_db
// Return size: 0
void sdk_meas_tone_pwr_db()
sdk_meas_tone_pwr_db_entry:
	// succ:  l40220994
l40220994:
	a1 = fp
	a5 = 0
	a6 = 0
	a7 = 0
	a4 = a2 & 0x000000FF
	a3 = 0
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x00000018:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a0
	Mem0[a1 + 0x0000001C:word32] = a14
	Mem0[a1 + 0x00000008:word32] = a3
	Mem0[a1 + 0x00000004:word32] = a3
	a14 = 0x4021BCEC
	Mem0[a1:word32] = a3
	a0 = Mem0[a14 + 0x00000000:word32]
	a2 = 1
	a0 = Mem0[a0 + 0x00000068:word32]
	a3 = 64
	v13 = a0
	a0 = 0x402209BF
	call v13 (retsize: 0;)
	a13 = 0
	a12 = 0
	// succ:  l402209C3
l402209C3:
	a0 = Mem0[a14 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000002C:word32]
	a2 = 0x00000138
	v14 = a0
	a0 = 0x402209CD
	call v14 (retsize: 0;)
	a13 = a13 + 1
	a12 = a2 + a12
	a12 = a12 << 16
	a12 = a12 >> 16
	branch a13 != 4 l402209C3
	// succ:  l402209DA l402209C3
l402209DA:
	a0 = Mem0[a14 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000006C:word32]
	a2 = 1
	v15 = a0
	a0 = 0x402209E4
	call v15 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000018:word32]
	a3 = a12 + 4
	a2 = a12 + 11
	a14 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000014:word32]
	branch a3 < 0x00000000 l402209F3
	// succ:  l402209F0_1 l402209F3
l402209F0_1:
	a2 = a3
	// succ:  l402209F3
l402209F3:
	a2 = a2 >> 3
	a1 = a1 + 32
	a2 = a2 << 16
	a2 = a2 >> 16
	return
	// succ:  sdk_meas_tone_pwr_db_exit
sdk_meas_tone_pwr_db_exit:


// sdk_tx_pwr_backoff
// Return size: 0
void sdk_tx_pwr_backoff()
sdk_tx_pwr_backoff_entry:
	// succ:  l40220A04
l40220A04:
	a1 = fp
	a4 = 1
	a5 = 31
	a8 = 0x00000138
	a6 = 0x40220524
	a1 = a1 - 64
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x0000001C:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x00000024:word32] = a15
	a7 = a1 + 16
	Mem0[a1 + 0x00000030:word32] = a2
	Mem0[a1 + 0x00000014:word32] = a0
	a2 = 64
	a3 = Mem0[a1 + 0x00000030:word32]
	a0 = 0x402208B8
	v15 = Mem0[a6 + 0x00000000:uint16]
	a6 = (uint32) v15
	Mem0[a1:word32] = a8
	a6 = a6 & 0x0000001F
	v16 = Mem0[a0 + 0x00000000:byte]
	a0 = (uint32) v16
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = 0x40220A37
	call sdk_ram_rfcal_pwrctrl (retsize: 0;)
	a14 = 0
	a0 = 0
	a15 = 0x0000006F
	v17 = Mem0[a1 + 0x00000010:byte]
	a7 = (uint32) v17
	a6 = Mem0[a1 + 0x00000030:word32]
	a10 = 0
	Mem0[a1 + 0x00000034:word32] = a10
	v19 = Mem0[a6 + 0x00000005:byte]
	a8 = (uint32) v19
	a7 = a7 << 8
	v20 = Mem0[a6 + 0x00000000:byte]
	a6 = (uint32) v20
	a7 = a7 >> 24
	a7 = a7 + 31
	Mem0[a1 + 0x00000010:byte] = a7
	a6 = a6 - a8
	a6 = a6 << 16
	a6 = a6 >> 16
	a7 = a6 << 31
	a8 = a7 - 7
	Mem0[a1 + 0x0000002C:word32] = a8
	a7 = a7 - 8
	a7 = a7 << 16
	a7 = a7 >> 16
	Mem0[a1 + 0x00000028:word32] = a7
	// succ:  l40220A75
l40220A75:
	v21 = Mem0[a1 + 0x00000010:byte]
	a3 = (uint32) v21
	a2 = a15
	a3 = a3 << 8
	a3 = a3 >> 24
	a0 = a3 + a0
	Mem0[a1 + 0x00000010:byte] = a0
	a12 = a6 + a0
	a0 = a0 << 8
	a0 = a0 >> 24
	branch a15 < a0 l40220A92
	// succ:  l40220A90 l40220A92
l40220A90:
	a2 = a0
	// succ:  l40220A92
l40220A92:
	Mem0[a1 + 0x00000010:byte] = a2
	Mem0[a1 + 0x0000003C:word32] = a6
	a0 = 0x40220A9A
	call fn40320994 (retsize: 0;)
	a4 = a12 << 8
	a13 = a2
	a12 = 1
	a4 = a4 >> 24
	Mem0[a1 + 0x00000038:word32] = a4
	branch a15 < a4 l40220AAB
	// succ:  l40220AA9 l40220AAB
l40220AA9:
	a12 = 0
	// succ:  l40220AAB
l40220AAB:
	a2 = Mem0[a1 + 0x00000038:word32]
	branch a12 == 0x00000000 l40220AB0
	// succ:  l40220AAD_1 l40220AB0
l40220AAD_1:
	a2 = a15
	// succ:  l40220AB0
l40220AB0:
	a0 = 0x40220AB3
	call fn40320994 (retsize: 0;)
	a5 = Mem0[a1 + 0x0000002C:word32]
	a7 = a13 - a2
	a0 = a7 << 16
	a0 = a0 >> 16
	branch a0 < a5 l40220AC7
	// succ:  l40220AC1 l40220AC7
l40220AC1:
	a3 = 0x000000A8
	branch a3 >= a13 l40220B19
	// succ:  l40220AC7 l40220B19
l40220AC7:
	branch a14 == 0x00000000 l40220AD9
	// succ:  l40220AC9 l40220AD9
l40220AC9:
	a4 = Mem0[a1 + 0x00000034:word32]
	a5 = Mem0[a1 + 0x00000028:word32]
	branch a4 < a0 l40220AD9
	// succ:  l40220AD0 l40220AD9
l40220AD0:
	branch a0 < a5 l40220AD9
	// succ:  l40220AD3 l40220AD9
l40220AD3:
	a6 = 0x000000A8
	branch a6 >= a13 l40220B19
	// succ:  l40220AD9 l40220B19
l40220AD9:
	a8 = 80
	branch a2 < a8 l40220B19
	// succ:  l40220ADE l40220B19
l40220ADE:
	a9 = Mem0[a1 + 0x00000038:word32]
	a6 = Mem0[a1 + 0x0000003C:word32]
	branch a12 == 0x00000000 l40220AE5
	// succ:  l40220AE2_2 l40220AE5
l40220AE2_2:
	a9 = a15
	// succ:  l40220AE5
l40220AE5:
	branch a9 == a15 l40220B19
	// succ:  l40220AE8 l40220B19
l40220AE8:
	a14 = a14 + 1
	a2 = a7 << 16
	a10 = 2
	a9 = a0 + 1
	a8 = a0 + 2
	branch a9 < 0x00000000 l40220AF6
	// succ:  l40220AF3_3 l40220AF6
l40220AF3_3:
	a8 = a9
	// succ:  l40220AF6
l40220AF6:
	a0 = a10
	a8 = a8 >> 1
	a8 = a6 - a8
	a8 = a8 - 1
	a8 = a8 << 8
	a8 = a8 >> 24
	branch a8 < 2 l40220B0B
	// succ:  l40220B09 l40220B0B
l40220B09:
	a0 = a8
	// succ:  l40220B0B
l40220B0B:
	a14 = a14 & 0x000000FF
	a2 = a2 >> 16
	Mem0[a1 + 0x00000034:word32] = a2
	a10 = a14 - 10
	branch a10 != 0x00000000 l40220A75
	// succ:  l40220B19 l40220A75
l40220B19:
	a0 = Mem0[a1 + 0x00000030:word32]
	a12 = Mem0[a1 + 0x00000018:word32]
	v23 = Mem0[a0 + 0x00000000:byte]
	a0 = (uint32) v23
	a15 = Mem0[a1 + 0x00000024:word32]
	a3 = a0 << 31
	branch a13 >= a3 l40220B48
	// succ:  l40220B28 l40220B48
l40220B28:
	branch a14 == 0x00000000 l40220B48
	// succ:  l40220B2A l40220B48
l40220B2A:
	a2 = a0 * 0x00000002 - a13
	a3 = a2 + 1
	a2 = a2 + 2
	branch a3 < 0x00000000 l40220B34
	// succ:  l40220B31_1 l40220B34
l40220B31_1:
	a2 = a3
	// succ:  l40220B34
l40220B34:
	a2 = a2 >> 1
	a2 = a2 << 16
	a2 = a2 >> 16
	a13 = Mem0[a1 + 0x0000001C:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_tx_pwr_backoff_exit
l40220B48:
	a2 = 0
	// succ:  l40260B3D
l40260B3D:
sdk_tx_pwr_backoff_exit:


// sdk_get_fcc_1m2m_pwr_offset
// Return size: 0
void sdk_get_fcc_1m2m_pwr_offset()
sdk_get_fcc_1m2m_pwr_offset_entry:
	// succ:  l40220B50
l40220B50:
	a1 = fp
	branch a2 == 0x00000000 l40220B5E
	// succ:  l40220B52 l40220B5E
l40220B52:
	branch a3 == 2 l40220B62
	// succ:  l40220B55 l40220B62
l40220B55:
	branch a3 == 3 l40220B62
	// succ:  l40220B58 l40220B62
l40220B58:
	branch a3 == 6 l40220B62
	// succ:  l40220B5B l40220B62
l40220B5B:
	branch a3 == 7 l40220B62
	// succ:  l40220B5E l40220B62
l40220B5E:
	a2 = 0
	// succ:  l40220B60
l40220B60:
	return
	// succ:  sdk_get_fcc_1m2m_pwr_offset_exit
l40220B62:
	a2 = 0x4021C308
	a4 = 0x4021C30C
	v6 = Mem0[a2 + 0x0000004E:byte]
	a3 = (uint32) v6
	v7 = Mem0[a4 + 0x0000004E:byte]
	a4 = (uint32) v7
	v8 = Mem0[a2 + 0x0000004D:byte]
	a2 = (uint32) v8
	a4 = a4 << 8
	a3 = a3 << 8
	a3 = a3 >> 24
	a4 = a4 >> 24
	a2 = a2 << 8
	a2 = a2 >> 24
	branch a4 >= 7 l40220B60
	// succ:  l40220B86 l40220B60
l40220B86:
	a2 = a3
	return
	// succ:  sdk_get_fcc_1m2m_pwr_offset_exit
sdk_get_fcc_1m2m_pwr_offset_exit:


// sdk_ram_set_txbb_atten
// Return size: 0
void sdk_ram_set_txbb_atten()
sdk_ram_set_txbb_atten_entry:
	// succ:  l40220B8C
l40220B8C:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a3
	Mem0[a1 + 0x0000001C:word32] = a6
	Mem0[a1:word32] = a2
	Mem0[a1 + 0x00000020:word32] = a4
	Mem0[a1 + 0x00000014:word32] = a15
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a14
	a12 = 0
	a14 = 24
	a13 = 0x4021BDB8
	a15 = Mem0[a1 + 0x00000020:word32]
	// succ:  l40220BAA
l40220BAA:
	a2 = a12
	a3 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x40220BB1
	call sdk_get_target_power_offset (retsize: 0;)
	a0 = a2 + a15
	v12 = Mem0[a0 + 0x00000000:byte]
	a0 = (uint32) v12
	a4 = Mem0[a1 + 0x00000018:word32]
	a0 = a0 << 8
	a0 = a0 >> 24
	branch a12 >=u 0x00000008 l40220BC6
	// succ:  l40220BC1 l40220BC6
l40220BC1:
	a4 = a0 + a4
	goto l40220BCF
	// succ:  l40220BCF
l40220BC6:
	a5 = Mem0[a1 + 0x0000001C:word32]
	a4 = a5
	branch a5 >= a0 l40220BCF
	// succ:  l40220BCD l40220BCF
l40220BCD:
	a4 = a0
	// succ:  l40220BCF
l40220BCF:
	a0 = 0xFFFFFF00
	a3 = a13 + a12 * 0x00000004
	a8 = -a4
	a4 = a14
	a8 = a8 << 8
	a8 = a8 >> 24
	branch a14 < a8 l40220BE5
	// succ:  l40220BE3 l40220BE5
l40220BE3:
	a4 = a8
	// succ:  l40220BE5
l40220BE5:
	a5 = a4 & 0x000000FF
	a2 = Mem0[a3 + 0x00000304:word32]
	a2 = a2 & a0
	a2 = a2 | a5
	Mem0[a3 + 0x00000304:word32] = a2
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	branch a12 != a14 l40220BAA
	// succ:  l40220C02 l40220BAA
l40220C02:
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_ram_set_txbb_atten_exit
sdk_ram_set_txbb_atten_exit:


// sdk_txiq_get_mis_pwr
// Return size: 0
void sdk_txiq_get_mis_pwr()
sdk_txiq_get_mis_pwr_entry:
	// succ:  l40220C1C
l40220C1C:
	a1 = fp
	a9 = 0x40204630
	a8 = a2 << 6
	a1 = a1 - 16
	a7 = 0x00000100
	a7 = a7 - a3
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1:word32] = a5
	Mem0[a1 + 0x0000000C:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a0
	a12 = a2
	a0 = 0x4021BCEC
	a5 = 0x4021BDB8
	a6 = 0x40220C14
	a7 = a7 & 0x000000FF
	a7 = a7 << 22
	a6 = a4 | a6
	a2 = Mem0[a5 + 0x000003B8:word32]
	a2 = a2 & a9
	a2 = a2 | a8
	a2 = a2 | a7
	a2 = a2 | a6
	a3 = 10
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a5 + 0x000003B8:word32] = a2
	a0 = Mem0[a0 + 0x00000070:word32]
	a2 = 4
	v13 = a0
	a0 = 0x40220C6B
	call v13 (retsize: 0;)
	a5 = a12 << 29
	a7 = a12 & 0x00000001
	a6 = 1
	a8 = Mem0[a1 + 0x00000000:word32]
	a4 = 0
	Mem0[a8:word16] = a2
	branch a7 != 0x00000000 l40220C7D
	// succ:  l40220C7A_1 l40220C7D
l40220C7A_1:
	a4 = a6
	// succ:  l40220C7D
l40220C7D:
	a4 = a4 | a5
	a4 = a4 << 8
	a5 = 0x40220C18
	a3 = 0x4021BDB8
	a2 = Mem0[a3 + 0x000003B8:word32]
	a2 = a2 & a5
	a2 = a2 | a4
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a3 + 0x000003B8:word32] = a2
	a2 = 4
	a0 = Mem0[a0 + 0x00000070:word32]
	a3 = 10
	v14 = a0
	a0 = 0x40220CAA
	call v14 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000008:word32]
	a9 = Mem0[a1 + 0x00000004:word32]
	a12 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a9:word16] = a2
	a1 = a1 + 16
	return
	// succ:  sdk_txiq_get_mis_pwr_exit
sdk_txiq_get_mis_pwr_exit:


// sdk_txiq_cover
// Return size: 0
void sdk_txiq_cover()
sdk_txiq_cover_entry:
	// succ:  l40220CC0
l40220CC0:
	a1 = fp
	a9 = a3
	a11 = 0
	a1 = a1 - 80
	Mem0[a1 + 0x00000024:word32] = a6
	Mem0[a1 + 0x00000040:word32] = a5
	Mem0[a1 + 0x00000018:word32] = a15
	Mem0[a1 + 0x00000030:word32] = a2
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a13
	Mem0[a1 + 0x00000014:word32] = a14
	a13 = a4
	a14 = 0
	a12 = 0
	Mem0[a1 + 0x00000038:word32] = a11
	Mem0[a1 + 0x00000004:word32] = a9
	a0 = 0
	a2 = 0
	a15 = Mem0[a1 + 0x00000040:word32]
	a3 = Mem0[a1 + 0x00000030:word32]
	Mem0[a1 + 0x0000003C:word32] = a2
	Mem0[a1 + 0x00000034:word32] = a0
	a2 = 7
	a0 = 3
	a3 = a3 - 12
	branch a7 == 0x00000000 l40220CF9
	// succ:  l40220CF6_1 l40220CF9
l40220CF6_1:
	a0 = a2
	// succ:  l40220CF9
l40220CF9:
	a3 = a3 & 0x000000FF
	Mem0[a1 + 0x0000002C:word32] = a3
	Mem0[a1 + 0x00000028:word32] = a0
	// succ:  l40220D00
l40220D00:
	branch a12 >=u 0x00000003 l40220D49
	// succ:  l40220D03 l40220D49
l40220D03:
	a4 = a15
	a0 = 0x4021BCEC
	a3 = 0x00000080
	v16 = (int16) a14
	v17 = (int16) a14
	a2 = v16 *s v17
	a2 = a2 + a3
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = Mem0[a1 + 0x0000003C:word32]
	a2 = a2 >> 8
	Mem0[a1 + 0x00000020:word32] = a2
	a0 = Mem0[a0 + 0x00000108:word32]
	a2 = a2 + a3
	a3 = 1
	a2 = a2 << 8
	a2 = a2 >> 24
	v18 = a0
	a0 = 0x40220D29
	call v18 (retsize: 0;)
	a4 = a15
	a3 = Mem0[a1 + 0x00000020:word32]
	a0 = 0x4021BCEC
	a3 = a2 - a3
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a14
	a3 = a3 << 8
	a3 = a3 >> 24
	Mem0[a1 + 0x0000003C:word32] = a3
	a0 = Mem0[a0 + 0x00000108:word32]
	a3 = 0
	v19 = a0
	a0 = 0x40220D47
	call v19 (retsize: 0;)
	a14 = a2
	// succ:  l40220D49
l40220D49:
	a2 = 1
	a3 = Mem0[a1 + 0x0000002C:word32]
	a4 = Mem0[a1 + 0x00000004:word32]
	a5 = a1
	a6 = a1 + 2
	a0 = 0x40220D56
	call fn40320C1C (retsize: 0;)
	v20 = Mem0[a1 + 0x00000002:int16]
	a7 = (int32) v20
	v21 = Mem0[a1 + 0x00000000:int16]
	a5 = (int32) v21
	a0 = a7
	branch a5 >= a7 l40220D63
	// succ:  l40220D61 l40220D63
l40220D61:
	a0 = a5
	// succ:  l40220D63
l40220D63:
	a4 = 1
	a3 = a0 << 16
	a2 = a7 - a5
	a2 = a2 << 21
	a3 = a3 >> 16
	branch a0 != 0x00000000 l40220D74
	// succ:  l40220D71_1 l40220D74
l40220D71_1:
	a3 = a4
	// succ:  l40220D74
l40220D74:
	a0 = 0x40202548
	v22 = a0
	a0 = 0x40220D7A
	call v22 (retsize: 0;)
	a0 = a2 + 16
	a0 = a0 >> 5
	Mem0[a13:byte] = a0
	branch a15 == 0x00000000 l40220D90
	// succ:  l40220D85 l40220D90
l40220D85:
	a2 = Mem0[a1 + 0x0000003C:word32]
	branch a2 >= 0x00000000 l40220D90
	// succ:  l40220D8A l40220D90
l40220D8A:
	a3 = -a0
	Mem0[a13:byte] = a3
	// succ:  l40220D90
l40220D90:
	a2 = 0
	a3 = Mem0[a1 + 0x00000030:word32]
	a4 = Mem0[a1 + 0x00000004:word32]
	a5 = a1
	a6 = a1 + 2
	a0 = 0x40220D9D
	call fn40320C1C (retsize: 0;)
	v23 = Mem0[a1 + 0x00000002:int16]
	a3 = (int32) v23
	v24 = Mem0[a1 + 0x00000000:int16]
	a4 = (int32) v24
	a2 = a4 - a3
	a3 = a3 + a4
	a2 = a2 << 20
	a4 = 1
	a3 = a3 << 16
	a3 = a3 >> 16
	branch a3 != 0x00000000 l40220DB6
	// succ:  l40220DB3_1 l40220DB6
l40220DB3_1:
	a3 = a4
	// succ:  l40220DB6
l40220DB6:
	a0 = 0x40202548
	v25 = a0
	a0 = 0x40220DBC
	call v25 (retsize: 0;)
	a5 = a2 + 16
	a5 = a5 >> 5
	Mem0[a13 + 0x00000001:byte] = a5
	branch a15 == 0x00000000 l40220DD0
	// succ:  l40220DC7 l40220DD0
l40220DC7:
	branch a14 >= 0x00000000 l40220DD0
	// succ:  l40220DCA l40220DD0
l40220DCA:
	a5 = -a5
	Mem0[a13 + 0x00000001:byte] = a5
	// succ:  l40220DD0
l40220DD0:
	v26 = Mem0[a13 + 0x00000000:byte]
	a0 = (uint32) v26
	a2 = Mem0[a1 + 0x0000003C:word32]
	a0 = a0 << 8
	a0 = a0 >> 24
	branch a12 >=u 0x00000003 l40220DF5
	// succ:  l40220DDE l40220DF5
l40220DDE:
	a14 = a14 - a5
	a3 = a2 - a0
	a3 = a3 << 8
	a14 = a14 << 8
	a14 = a14 >> 24
	a2 = a3 >> 24
	Mem0[a1 + 0x0000003C:word32] = a2
	goto l40220E5F
	// succ:  l40220E5F
l40220DF5:
	a2 = Mem0[a1 + 0x00000034:word32]
	a4 = Mem0[a1 + 0x00000038:word32]
	a3 = a5 + a2
	a6 = a0 + a4
	a6 = a6 << 8
	a3 = a3 << 8
	a2 = a3 >> 24
	a4 = a6 >> 24
	Mem0[a1 + 0x00000038:word32] = a4
	Mem0[a1 + 0x00000034:word32] = a2
	branch a12 != 6 l40220E5F
	// succ:  l40220E10 l40220E5F
l40220E10:
	a3 = Mem0[a1 + 0x0000003C:word32]
	a2 = Mem0[a1 + 0x00000038:word32]
	a0 = 0x4021BCEC
	a2 = a2 + 2
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a2 >> 2
	a4 = a3 - a2
	a4 = a4 << 8
	a3 = a4 >> 24
	Mem0[a1 + 0x0000003C:word32] = a3
	a3 = Mem0[a1 + 0x00000034:word32]
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = a3 + 2
	a3 = a3 >> 2
	Mem0[a1 + 0x0000001C:word32] = a3
	a14 = a14 - a3
	a14 = a14 << 8
	a14 = a14 >> 24
	v30 = a0
	a0 = 0x40220E40
	call v30 (retsize: 0;)
	branch a2 >= 5 l40220E52
	// succ:  l40220E43 l40220E52
l40220E43:
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = Mem0[a1 + 0x0000001C:word32]
	v31 = a0
	a0 = 0x40220E4F
	call v31 (retsize: 0;)
	branch a2 < 5 l40220E5F
	// succ:  l40220E52 l40220E5F
l40220E52:
	a3 = 0x40220CB8
	a4 = 0x402044E8
	a2 = Mem0[a3 + 0x00000000:word32]
	a2 = a2 | a4
	Mem0[a3:word32] = a2
	// succ:  l40220E5F
l40220E5F:
	a5 = Mem0[a1 + 0x00000024:word32]
	branch a5 == 0x00000000 l40220E7E
	// succ:  l40220E63 l40220E7E
l40220E63:
	a2 = 0x40220CBC
	v27 = Mem0[a13 + 0x00000001:byte]
	a4 = (uint32) v27
	v28 = Mem0[a13 + 0x00000000:byte]
	a3 = (uint32) v28
	a4 = a4 << 8
	a3 = a3 << 8
	a3 = a3 >> 24
	a4 = a4 >> 24
	a0 = 0x4021262C
	v29 = a0
	a0 = 0x40220E7E
	call v29 (retsize: 0;)
	// succ:  l40220E7E
l40220E7E:
	a5 = Mem0[a1 + 0x00000028:word32]
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	a5 = a5 - a12
	branch a5 != 0x00000000 l40220D00
	// succ:  l40220E8B l40220D00
l40220E8B:
	a3 = 1
	a4 = a15
	a0 = 0x4021BCEC
	a2 = Mem0[a1 + 0x0000003C:word32]
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a2 << 8
	a0 = Mem0[a0 + 0x00000108:word32]
	a2 = a2 >> 24
	v32 = a0
	a0 = 0x40220EA2
	call v32 (retsize: 0;)
	a4 = a15
	a0 = 0x4021BCEC
	a3 = 0
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a14 << 8
	a0 = Mem0[a0 + 0x00000108:word32]
	a2 = a2 >> 24
	v33 = a0
	a0 = 0x40220EB7
	call v33 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000008:word32]
	a12 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000018:word32]
	Mem0[a13 + 0x00000001:byte] = a14
	a2 = Mem0[a1 + 0x0000003C:word32]
	Mem0[a13:byte] = a2
	a14 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 80
	return
	// succ:  sdk_txiq_cover_exit
sdk_txiq_cover_exit:


// sdk_ram_rfcal_txiq
// Return size: 0
void sdk_ram_rfcal_txiq()
sdk_ram_rfcal_txiq_entry:
	// succ:  l40220ED8
l40220ED8:
	a1 = fp
	a9 = a3 | a3
	a1 = a1 - 64
	Mem0[a1 + 0x00000024:word32] = a12
	Mem0[a1 + 0x00000030:word32] = a15
	Mem0[a1 + 0x00000034:word32] = a5
	Mem0[a1 + 0x0000000C:word32] = a6
	Mem0[a1 + 0x00000008:word32] = a4
	Mem0[a1 + 0x00000020:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a13
	Mem0[a1 + 0x0000002C:word32] = a14
	a13 = a2
	a14 = a7
	a0 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1 + 0x00000004:word32] = a9
	a0 = a0 >>u 0x00000011 & 0x00000001
	branch a0 != 0x00000000 l40221089
	// succ:  l40220EFE l40221089
l40220EFE:
	a15 = Mem0[a1 + 0x00000034:word32]
	a2 = 0x00000077
	a3 = 0
	a12 = 0x4021BCEC
	a4 = 16
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 0
	a0 = Mem0[a0 + 0x00000094:word32]
	a6 = 0
	v15 = a0
	a0 = 0x40220F16
	call v15 (retsize: 0;)
	a3 = 0
	a4 = 15
	a5 = 6
	a6 = 6
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x00000014:word32] = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000077
	v16 = a0
	a0 = 0x40220F2B
	call v16 (retsize: 0;)
	a3 = 0
	a4 = 9
	a5 = 7
	a6 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x00000018:word32] = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000077
	v17 = a0
	a0 = 0x40220F40
	call v17 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000A0:word32]
	Mem0[a1 + 0x0000001C:word32] = a2
	v18 = a0
	a0 = 0x40220F4A
	call v18 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C0:word32]
	a2 = 1
	v19 = a0
	a0 = 0x40220F54
	call v19 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000008:word32]
	a2 = a2 & 0x00000FFF
	a0 = 0x40220F5C
	call fn4031BE78 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000008:word32]
	a3 = a1
	a4 = 1
	a0 = 0x40220F65
	call fn40320688 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000018:word32]
	a2 = 0
	v20 = a0
	a0 = 0x40220F6E
	call v20 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000003C:word32]
	a2 = 1
	v21 = a0
	a0 = 0x40220F77
	call v21 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 9
	a5 = 7
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v22 = a0
	a0 = 0x40220F8C
	call v22 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 16
	a5 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 2
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v23 = a0
	a0 = 0x40220FA1
	call v23 (retsize: 0;)
	a2 = Mem0[a1 + 0x0000000C:word32]
	v24 = Mem0[a1 + 0x00000044:byte]
	a7 = (uint32) v24
	a3 = a15
	a4 = a1 + 2
	v25 = Mem0[a1 + 0x00000040:byte]
	a15 = (uint32) v25
	a5 = a14
	a6 = a15
	a0 = 0x40220FB4
	call fn40320CC0 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000006C:word32]
	a2 = 1
	v26 = a0
	a0 = 0x40220FBE
	call v26 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 16
	a5 = 0
	a6 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	a7 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a0 + 0x0000009C:word32]
	Mem0[a1 + 0x00000010:word32] = a7
	v27 = a0
	a0 = 0x40220FD5
	call v27 (retsize: 0;)
	a7 = Mem0[a1 + 0x00000018:word32]
	a2 = 0x00000077
	a3 = 0
	a4 = 15
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 6
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 6
	v28 = a0
	a0 = 0x40220FEA
	call v28 (retsize: 0;)
	a7 = Mem0[a1 + 0x0000001C:word32]
	a2 = 0x00000077
	a3 = 0
	a4 = 9
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 7
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 0
	v29 = a0
	a0 = 0x40220FFF
	call v29 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 16
	a5 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 2
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v30 = a0
	a0 = 0x40221014
	call v30 (retsize: 0;)
	a2 = 15
	v31 = Mem0[a1 + 0x00000002:byte]
	a4 = (uint32) v31
	a0 = -15
	a4 = a4 << 8
	a4 = a4 >> 24
	branch a4 < a0 l40221026
	// succ:  l40221024 l40221026
l40221024:
	a0 = a4
	// succ:  l40221026
l40221026:
	v36 = Mem0[a1 + 0x00000003:byte]
	a4 = (uint32) v36
	branch a2 < a0 l4022102E
	// succ:  l4022102C l4022102E
l4022102C:
	a2 = a0
	// succ:  l4022102E
l4022102E:
	a0 = -31
	Mem0[a1 + 0x00000002:byte] = a2
	a4 = a4 << 8
	a3 = a2 << 8
	a3 = a3 >> 24
	a4 = a4 >> 24
	a2 = 31
	branch a4 < a0 l40221046
	// succ:  l40221044 l40221046
l40221044:
	a0 = a4
	// succ:  l40221046
l40221046:
	branch a2 < a0 l4022104B
	// succ:  l40221049 l4022104B
l40221049:
	a2 = a0
	// succ:  l4022104B
l4022104B:
	Mem0[a1 + 0x00000003:byte] = a2
	a4 = a2 << 8
	a4 = a4 >> 24
	branch a14 == 0x00000000 l40221066
	// succ:  l40221056 l40221066
l40221056:
	a5 = Mem0[a1 + 0x00000010:word32]
	branch a5 == 0x00000000 l40221066
	// succ:  l4022105A l40221066
l4022105A:
	a3 = -a3
	Mem0[a1 + 0x00000002:byte] = a3
	a3 = a3 << 8
	a3 = a3 >> 24
	// succ:  l40221066
l40221066:
	branch a15 == 0x00000000 l40221077
	// succ:  l40221068 l40221077
l40221068:
	a2 = 0x40220ED0
	a0 = 0x4021262C
	v37 = a0
	a0 = 0x40221071
	call v37 (retsize: 0;)
	v38 = Mem0[a1 + 0x00000003:byte]
	a4 = (uint32) v38
	v39 = Mem0[a1 + 0x00000002:byte]
	a3 = (uint32) v39
	// succ:  l40221077
l40221077:
	a5 = a3 >>u 0x00000007 & 0x00000001
	a14 = a3 << 8
	a14 = a14 >> 24
	branch a5 == 0x00000000 l4022110A
	// succ:  l40221083 l4022110A
l40221083:
	a14 = a3 + 32
	goto l4022110A
	// succ:  l4022110A
l40221089:
	v32 = Mem0[a3 + 0x00000000:uint16]
	a12 = (uint32) v32
	a14 = a12 >>u 8
	a12 = a12 << 8
	a12 = a12 >> 24
	a6 = 0x4021BDC0
	a10 = a14 << 8
	a11 = 0x4021D77C
	a9 = a12 << 14
	a9 = a9 | a11
	a14 = 0x4021E4C4
	a11 = 0x40220ED4
	a8 = Mem0[a14 + 0x00000260:word32]
	a8 = a8 & a11
	a8 = a8 | a10
	a8 = a8 | a9
	Mem0[a14 + 0x00000260:word32] = a8
	a7 = 32
	a5 = Mem0[a6 + 0x00000028:word32]
	a5 = a5 | a7
	Mem0[a6 + 0x00000028:word32] = a5
	a4 = -16
	a3 = 2
	a2 = Mem0[a14 + 0x0000023C:word32]
	a2 = a2 & a4
	a2 = a2 | a3
	Mem0[a14 + 0x0000023C:word32] = a2
	a0 = 0xFFFFFE0E
	a15 = 1
	a13 = Mem0[a14 + 0x00000264:word32]
	a13 = a13 & a0
	a13 = a13 | a15
	a12 = Mem0[a1 + 0x00000024:word32]
	Mem0[a14 + 0x00000264:word32] = a13
	a15 = Mem0[a1 + 0x00000030:word32]
	a13 = Mem0[a1 + 0x00000028:word32]
	a14 = Mem0[a1 + 0x0000002C:word32]
	a0 = Mem0[a1 + 0x00000020:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_ram_rfcal_txiq_exit
l4022110A:
	a15 = a4 << 8
	a15 = a15 >> 24
	branch (a4 & 0x00000080) == 0x00000000 l40221116
	// succ:  l40221113 l40221116
l40221113:
	a15 = a4 + 64
	// succ:  l40221116
l40221116:
	a0 = Mem0[a12 + 0x00000000:word32]
	a12 = a15 << 8
	a0 = Mem0[a0 + 0x000000A8:word32]
	a12 = a12 >> 24
	v40 = a0
	a0 = 0x40221124
	call v40 (retsize: 0;)
	a3 = 0x402154AC
	a2 = Mem0[a13 + 0x00000000:word32]
	a4 = a15 << 8
	a5 = a14 << 24
	a4 = a4 >> 24
	a4 = a4 | a5
	a5 = Mem0[a1 + 0x00000004:word32]
	a2 = a2 | a3
	Mem0[a5:word16] = a4
	Mem0[a13:word32] = a2
	// succ:  l40261095
l40261095:
sdk_ram_rfcal_txiq_exit:


// sdk_rc_cal
// Return size: 0
void sdk_rc_cal()
sdk_rc_cal_entry:
	// succ:  l40221144
l40221144:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a14
	a14 = 0x4021C30C
	Mem0[a1:word32] = a0
	a0 = Mem0[a14 + 0x00000000:word32]
	a12 = 0x4021BCEC
	branch (a0 & 0x00800000) != 0x00000000 l40221190
	// succ:  l4022115A l40221190
l4022115A:
	a2 = 0x0000006A
	a3 = 2
	a4 = 0
	a5 = 5
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 4
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v13 = a0
	a0 = 0x4022116F
	call v13 (retsize: 0;)
	a9 = 0x4021C308
	a10 = Mem0[a12 + 0x00000000:word32]
	v16 = Mem0[a9 + 0x00000001:byte]
	a2 = (uint32) v16
	a10 = Mem0[a10 + 0x0000009C:word32]
	branch a2 == 0x00000000 l402211CB
	// succ:  l4022117D l402211CB
l4022117D:
	a2 = 0x0000006A
	a3 = 2
	a4 = 4
	a5 = 7
	a6 = 4
	a7 = 1
	a0 = 0x4022118D
	call a10 (retsize: 0;)
	goto l402211DE
	// succ:  l402211DE
l40221190:
	v17 = Mem0[a14 + 0x0000004A:byte]
	a13 = (uint32) v17
	a2 = 0x00000061
	a3 = 1
	a4 = 2
	a5 = 4
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a13
	v18 = a0
	a0 = 0x402211A8
	call v18 (retsize: 0;)
	v19 = Mem0[a14 + 0x0000004B:byte]
	a7 = (uint32) v19
	a2 = 0x00000066
	a3 = 3
	a4 = 1
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 5
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 0
	v20 = a0
	a0 = 0x402211BE
	call v20 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rc_cal_exit
l402211CB:
	a2 = 0x0000006A
	a3 = 0x00000002
	a4 = 0x00000004
	a5 = 0x00000007
	a6 = 4
	a7 = 2
	a0 = 0x402211DE
	call a10 (retsize: 0;)
	// succ:  l402211DE
l402211DE:
	a2 = 0x00000068
	a3 = 3
	a4 = 1
	a5 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v21 = a0
	a0 = 0x402211F3
	call v21 (retsize: 0;)
	a2 = 0x0000006A
	a3 = 2
	a4 = 6
	a5 = 4
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 8
	v22 = a0
	a0 = 0x40221208
	call v22 (retsize: 0;)
	a2 = 0x0000006A
	a3 = 2
	a4 = 4
	a5 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v23 = a0
	a0 = 0x4022121D
	call v23 (retsize: 0;)
	a2 = 0x0000006A
	a3 = 2
	a4 = 3
	a5 = 6
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 6
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v24 = a0
	a0 = 0x40221232
	call v24 (retsize: 0;)
	a2 = 0x0000006A
	a3 = 2
	a4 = 4
	a5 = 3
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 3
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v25 = a0
	a0 = 0x40221247
	call v25 (retsize: 0;)
	a2 = 0x0000006A
	a3 = 2
	a4 = 4
	a5 = 3
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 3
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v26 = a0
	a0 = 0x4022125C
	call v26 (retsize: 0;)
	a2 = 0x00000064
	a0 = 0x40221262
	call fn40303F28 (retsize: 0;)
	a2 = 0x0000006A
	a3 = 2
	a4 = 5
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 5
	a0 = Mem0[a0 + 0x00000094:word32]
	a6 = 0
	v27 = a0
	a0 = 0x40221275
	call v27 (retsize: 0;)
	a3 = 3
	a4 = 1
	a5 = 0
	a6 = 0
	a7 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	a13 = a2
	a0 = Mem0[a0 + 0x0000009C:word32]
	a2 = 0x00000068
	v28 = a0
	a0 = 0x4022128C
	call v28 (retsize: 0;)
	a0 = 0x4021C308
	a4 = 0x40220CB8
	v29 = Mem0[a0 + 0x00000001:byte]
	a6 = (uint32) v29
	branch a13 <u 0x00000003 l4022129D
	// succ:  l40221298 l4022129D
l40221298:
	a2 = 60
	branch a2 >=u a13 l402212A7
	// succ:  l4022129D l402212A7
l4022129D:
	a5 = 0x4020A194
	a3 = Mem0[a4 + 0x00000000:word32]
	a3 = a3 | a5
	Mem0[a4:word32] = a3
	// succ:  l402212A7
l402212A7:
	branch a6 == 0x00000000 l402212E6
	// succ:  l402212A9 l402212E6
l402212A9:
	a3 = 30
	a2 = a13 << 28
	a2 = a2 - 39
	a0 = 0x40202548
	v30 = a0
	a0 = 0x402212B7
	call v30 (retsize: 0;)
	a3 = a13 * 0x00000008 - a13
	a13 = a2 & 0x000000FF
	Mem0[a14 + 0x0000004A:byte] = a13
	a2 = a3 << 30
	a2 = a2 & 0x0000FFFF
	a3 = 9
	a0 = 0x40204388
	v31 = a0
	a0 = 0x402212CE
	call v31 (retsize: 0;)
	a6 = 0x4021C17C
	a5 = Mem0[a14 + 0x00000000:word32]
	a4 = a2 & 0x000000FF
	a4 = a4 + 2
	a4 = a4 >> 2
	Mem0[a14 + 0x0000004B:byte] = a4
	a5 = a5 | a6
	Mem0[a14:word32] = a5
	goto l40261193
	// succ:  l40261193
l402212E6:
	a3 = 20
	a2 = a13 + a13 * 0x00000004
	a2 = a13 + a2 * 0x00000002
	a2 = a2 - 14
	a0 = 0x40202548
	v32 = a0
	a0 = 0x402212F7
	call v32 (retsize: 0;)
	goto l402612B7
	// succ:  l402612B7
l40261193:
l402612B7:
sdk_rc_cal_exit:


// sdk_get_target_power_offset
// Return size: 0
void sdk_get_target_power_offset()
sdk_get_target_power_offset_entry:
	// succ:  l40221300
l40221300:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	a12 = a2
	a13 = a3
	a2 = 0x4021C30C
	a3 = a12
	v8 = Mem0[a2 + 0x0000006E:byte]
	a2 = (uint32) v8
	a0 = 0x40221318
	call fn40320B50 (retsize: 0;)
	a0 = 0x4021C30C
	a6 = 0x4021C308
	branch a12 >=u 0x00000010 l4022135C
	// succ:  l40221321 l4022135C
l40221321:
	a4 = 0x402212FC
	a3 = a12 + a12 * 0x00000002
	a3 = a3 + a4
	call a3 (retsize: 4;)
	return
	// succ:  sdk_get_target_power_offset_exit
l4022135C:
	a3 = a12 + a13
	a3 = a3 + 0xFFFFFF00
	v11 = Mem0[a3 + 0x000000F0:byte]
	a3 = (uint32) v11
	v12 = Mem0[a0 + 0x0000004E:byte]
	a0 = (uint32) v12
	branch a12 >=u 0x00000008 l40221375
	// succ:  l4022136A l40221375
l4022136A:
	v13 = Mem0[a6 + 0x00000061:byte]
	a4 = (uint32) v13
	branch a4 != 0x00000000 l402213AC
	// succ:  l4022136F l402213AC
l4022136F:
	v14 = Mem0[a13 + 0x00000000:byte]
	a3 = (uint32) v14
	goto l402213AC
	// succ:  l402213AC
l40221375:
	a0 = a0 << 8
	a0 = a0 >> 24
	branch a0 == 1 l40221396
	// succ:  l4022137E l40221396
l4022137E:
	a2 = 11
	branch a0 == a2 l402213B1
	// succ:  l40221383 l402213B1
l40221383:
	a4 = 13
	branch a0 == a4 l402213B7
	// succ:  l40221388 l402213B7
l40221388:
	a7 = a0 - 14
	v17 = Mem0[a6 + 0x00000023:byte]
	a5 = (uint32) v17
	a2 = 0
	branch a7 != 0x00000000 l40221393
	// succ:  l40221390_1 l40221393
l40221390_1:
	a2 = a5
	// succ:  l40221393
l40221393:
	goto l40221399
	// succ:  l40221399
l40221396:
	v18 = Mem0[a6 + 0x00000020:byte]
	a2 = (uint32) v18
	// succ:  l40221399
l40221399:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = a3 & 0x000000FF
	branch a2 >=u a0 l402213A5
	// succ:  l402213A3 l402213A5
l402213A3:
	a2 = a0
	// succ:  l402213A5
l402213A5:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_get_target_power_offset_exit
l402213AC:
	a3 = a2 + a3
	goto l40261375
	// succ:  l40261375
l402213B1:
	v20 = Mem0[a6 + 0x00000021:byte]
	a2 = (uint32) v20
	goto l40261399
	// succ:  l40261399
l402213B7:
	v19 = Mem0[a6 + 0x00000022:byte]
	a2 = (uint32) v19
	goto l40261399
	// succ:  l40261399
l40261375:
l40261399:
sdk_get_target_power_offset_exit:


// sdk_get_pwctrl_correct
// Return size: 0
void sdk_get_pwctrl_correct()
sdk_get_pwctrl_correct_entry:
	// succ:  l402213F4
l402213F4:
	a1 = fp
	a6 = a4 + 2
	v6 = Mem0[a3 + 0x00000000:int16]
	a8 = (int32) v6
	SAR = a4
	a9 = a0 >> SAR
	a8 = a8 - a9
	SAR = 0x00000020 - a6
	a8 = a2 + a8
	a2 = a5 << SAR
	a8 = a8 << 16
	a8 = a8 >> 16
	Mem0[a3:word16] = a8
	branch a8 < a2 l4022142B
	// succ:  l40221416 l4022142B
l40221416:
	a4 = a8 - a2
	a2 = -a5
	a2 = a2 << 8
	a2 = a2 >> 24
	Mem0[a3:word16] = a4
	return
	// succ:  sdk_get_pwctrl_correct_exit
l40221427:
	a2 = 0
	return
	// succ:  sdk_get_pwctrl_correct_exit
l4022142B:
	a4 = -a2
	branch a4 < a8 l40221427
	// succ:  l40221431 l40221427
l40221431:
	a4 = a8 + a2
	a2 = a5 << 8
	a2 = a2 >> 24
	// succ:  l40261422
l40261422:
sdk_get_pwctrl_correct_exit:


// sdk_tx_pwctrl_cal
// Return size: 0
void sdk_tx_pwctrl_cal()
sdk_tx_pwctrl_cal_entry:
	// succ:  l4022144C
l4022144C:
	a1 = fp
	a1 = a1 - 112
	Mem0[a1 + 0x00000060:word32] = a15
	Mem0[a1 + 0x00000050:word32] = a0
	Mem0[a1 + 0x00000044:word32] = a2
	Mem0[a1 + 0x00000048:word32] = a5
	Mem0[a1 + 0x00000064:word32] = a6
	Mem0[a1 + 0x00000054:word32] = a12
	Mem0[a1 + 0x0000005C:word32] = a14
	Mem0[a1 + 0x00000058:word32] = a13
	a13 = a4
	a14 = a3
	a12 = 0x4021C0CC
	a12 = Mem0[a12 + 0x00000360:word32]
	a2 = 0x00000138
	a12 = a12 >>u 0x00000018 & 0x0000001F
	a0 = 0x4022147D
	call fn40320824 (retsize: 0;)
	Mem0[a1 + 0x0000004C:word32] = a2
	branch a12 >=u 0x00000008 l4022148E
	// succ:  l40221483 l4022148E
l40221483:
	a2 = -1
	a2 = a12 ^ a2
	a2 = a2 & 0x00000007
	goto l40221490
	// succ:  l40221490
l4022148E:
	a2 = a12
	// succ:  l40221490
l40221490:
	a3 = a14
	a0 = 0x40221495
	call fn40321300 (retsize: 0;)
	a15 = 0x4021E2D4
	a14 = 0x4021C30C
	a3 = -32
	a4 = Mem0[a1 + 0x0000004C:word32]
	a0 = a2
	a5 = Mem0[a1 + 0x00000044:word32]
	a10 = 32
	a5 = a2 + a5
	Mem0[a1 + 0x00000040:word32] = a5
	v14 = Mem0[a5 + 0x00000000:byte]
	a5 = (uint32) v14
	a2 = a10
	a5 = a5 << 30
	a4 = a4 - a5
	a4 = a4 << 16
	a4 = a4 >> 16
	branch a4 < a3 l402214C2
	// succ:  l402214C0 l402214C2
l402214C0:
	a3 = a4
	// succ:  l402214C2
l402214C2:
	Mem0[a1 + 0x00000038:word32] = a0
	a6 = Mem0[a14 + 0x00000000:word32]
	branch a10 < a3 l402214CB
	// succ:  l402214C9 l402214CB
l402214C9:
	a2 = a3
	// succ:  l402214CB
l402214CB:
	a8 = a2 << 16
	a8 = a8 >> 16
	branch (a6 & 0x20000000) == 0x00000000 l402214EE
	// succ:  l402214D4 l402214EE
l402214D4:
	Mem0[a1 + 0x00000038:word32] = a0
	branch a0 != 0x00000000 l402214EE
	// succ:  l402214D8 l402214EE
l402214D8:
	a2 = a8
	Mem0[a1 + 0x00000030:word32] = a8
	a3 = a15
	a4 = 4
	a5 = 2
	Mem0[a1 + 0x00000034:word32] = a13
	a0 = 0x402214E7
	call fn403213F4 (retsize: 0;)
	a0 = a2
	a13 = 0
	goto l40221533
	// succ:  l40221533
l402214EE:
	a3 = a13
	a2 = a8
	Mem0[a1 + 0x00000030:word32] = a8
	Mem0[a1 + 0x00000034:word32] = a13
	a4 = 4
	a5 = 2
	a0 = 0x402214FD
	call fn403213F4 (retsize: 0;)
	a9 = Mem0[a1 + 0x00000038:word32]
	a13 = a2
	branch a9 != 0x00000000 l40221699
	// succ:  l40221504 l40221699
l40221504:
	a10 = Mem0[a1 + 0x00000030:word32]
	branch a10 >= 1 l4022150C
	// succ:  l40221509 l4022150C
l40221509:
	goto l40221699
	// succ:  l40221699
l4022150C:
	branch a10 < 16 l40221512
	// succ:  l4022150F l40221512
l4022150F:
	goto l40221699
	// succ:  l40221699
l40221512:
	branch a2 != 0x00000000 l40221699
	// succ:  l40221515 l40221699
l40221515:
	v22 = Mem0[a15 + 0x00000002:byte]
	a0 = (uint32) v22
	a0 = a0 + 1
	a0 = a0 & 0x000000FF
	Mem0[a15 + 0x00000002:byte] = a0
	a2 = 20
	branch a0 != a2 l40221531
	// succ:  l40221525 l40221531
l40221525:
	a13 = -2
	a4 = Mem0[a1 + 0x00000034:word32]
	a3 = 0
	Mem0[a15 + 0x00000002:byte] = a3
	Mem0[a4:word16] = a3
	// succ:  l40221531
l40221531:
	a0 = 0
	// succ:  l40221533
l40221533:
	a6 = Mem0[a1 + 0x00000064:word32]
	branch a13 == 0x00000000 l40221540
	// succ:  l40221538 l40221540
l40221538:
	a5 = 0
	Mem0[a15 + 0x00000003:byte] = a5
	Mem0[a15:word16] = a5
	// succ:  l40221540
l40221540:
	Mem0[a1 + 0x00000068:word32] = a0
	branch a6 == 0x00000000 l4022157A
	// succ:  l40221545 l4022157A
l40221545:
	a2 = 0x4022143C
	a3 = a12
	a4 = Mem0[a1 + 0x00000030:word32]
	v17 = Mem0[a15 + 0x00000000:int16]
	a6 = (int32) v17
	a7 = 0x4021BDB8
	a5 = Mem0[a1 + 0x00000034:word32]
	a7 = a7 + a12 * 0x00000004
	v19 = Mem0[a5 + 0x00000000:int16]
	a5 = (int32) v19
	v20 = Mem0[a14 + 0x0000004E:byte]
	a8 = (uint32) v20
	a7 = Mem0[a7 + 0x00000304:word32]
	a8 = a8 << 8
	a7 = a7 << 8
	a7 = a7 >> 24
	a8 = a8 >> 24
	Mem0[a1:word32] = a8
	a0 = 0x4021262C
	v21 = a0
	a0 = 0x40221577
	call v21 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000068:word32]
	// succ:  l4022157A
l4022157A:
	a6 = Mem0[a1 + 0x00000048:word32]
	branch a6 == 0x00000000 l40221685
	// succ:  l40221580 l40221685
l40221580:
	Mem0[a1 + 0x0000003C:word32] = a12
	branch a13 != 0x00000000 l40221589
	// succ:  l40221584 l40221589
l40221584:
	Mem0[a1 + 0x0000003C:word32] = a12
	branch a0 == 0x00000000 l40221685
	// succ:  l40221589 l40221685
l40221589:
	a5 = 0
	a15 = a13
	a10 = 0x4021E2D4
	v23 = Mem0[a14 + 0x00000078:byte]
	a2 = (uint32) v23
	a12 = 0x0000007F
	a2 = a2 << 8
	a2 = a2 >> 24
	// succ:  l4022159C
l4022159C:
	a9 = a5 + a5 * 0x00000002
	a7 = a12 << 8
	a7 = a7 >> 24
	a5 = a5 + 1
	a9 = a14 + a9 * 0x00000002
	v24 = Mem0[a9 + 0x00000055:byte]
	a9 = (uint32) v24
	a5 = a5 & 0x000000FF
	a9 = a9 << 8
	a9 = a9 >> 24
	branch a9 >= a7 l402215BB
	// succ:  l402215B9 l402215BB
l402215B9:
	a12 = a9
	// succ:  l402215BB
l402215BB:
	branch a5 != 4 l4022159C
	// succ:  l402215BE l4022159C
l402215BE:
	a5 = 0x40220524
	a12 = a2 + a12
	a12 = a12 << 8
	a12 = a12 >> 24
	branch a13 == 0x00000000 l40221665
	// succ:  l402215CC l40221665
l402215CC:
	a4 = 36
	a9 = a12 - a13
	a9 = a9 << 8
	a9 = a9 >> 24
	branch a4 >= a9 l402215E6
	// succ:  l402215DA l402215E6
l402215DA:
	Mem0[a1 + 0x00000068:word32] = a0
	v25 = Mem0[a5 + 0x00000000:uint16]
	a2 = (uint32) v25
	a11 = 0x000003E4
	branch a11 <u a2 l402215F5
	// succ:  l402215E6 l402215F5
l402215E6:
	branch a9 >= 12 l40221665
	// succ:  l402215E9 l40221665
l402215E9:
	v27 = Mem0[a5 + 0x00000000:uint16]
	a4 = (uint32) v27
	a3 = 0x40221440
	Mem0[a1 + 0x00000068:word32] = a0
	branch a3 <u a4 l40221665
	// succ:  l402215F5 l40221665
l402215F5:
	a2 = a1 + 32
	a3 = 0x40220524
	a5 = 24
	a5 = a5 - a9
	Mem0[a1 + 0x00000020:byte] = a5
	a0 = 0x40221606
	call fn4032071C (retsize: 0;)
	v28 = Mem0[a14 + 0x00000079:byte]
	a6 = (uint32) v28
	v29 = Mem0[a1 + 0x00000020:byte]
	a7 = (uint32) v29
	a4 = 0x40221444
	a2 = 0x40220524
	a8 = a13 - a12
	a8 = a8 + 24
	v30 = Mem0[a2 + 0x00000000:uint16]
	a2 = (uint32) v30
	v31 = Mem0[a4 + 0x0000004A:byte]
	a3 = (uint32) v31
	a7 = a7 << 8
	a6 = a6 << 8
	a6 = a6 >> 24
	a7 = a7 >> 24
	a3 = a3 << 8
	a5 = a8 - a7
	a6 = a6 + a5
	a3 = a3 >> 24
	a7 = a7 - a8
	a15 = a15 + a7
	a3 = a3 + a5
	Mem0[a14 + 0x00000079:byte] = a6
	Mem0[a4 + 0x0000004A:byte] = a3
	a3 = a1 + 34
	a4 = 0
	a0 = 0x4022164A
	call fn40320688 (retsize: 0;)
	a2 = 0x40220524
	a3 = a1 + 34
	v32 = Mem0[a2 + 0x00000000:uint16]
	a2 = (uint32) v32
	a0 = 0x40221656
	call fn403205EC (retsize: 0;)
	a0 = Mem0[a1 + 0x00000068:word32]
	a5 = 0x40220524
	a10 = 0x4021E2D4
	v33 = Mem0[a5 + 0x00000000:uint16]
	a3 = (uint32) v33
	Mem0[a14 + 0x00000076:word16] = a3
	// succ:  l40221665
l40221665:
	a9 = a12 - a15
	branch a0 == 0x00000000 l4022166B
	// succ:  l40221668_1 l4022166B
l40221668_1:
	a15 = a0
	// succ:  l4022166B
l4022166B:
	a9 = a9 << 8
	a9 = a9 >> 24
	a4 = a15 << 8
	a15 = a4 >> 24
	branch a15 >= 0x00000000 l4022167F
	// succ:  l4022167A l4022167F
l4022167A:
	a11 = 70
	branch a11 >= a9 l4022169E
	// succ:  l4022167F l4022169E
l4022167F:
	branch a15 < 1 l40221685
	// succ:  l40221682 l40221685
l40221682:
	branch a9 >= 12 l4022169E
	// succ:  l40221685 l4022169E
l40221685:
	a12 = Mem0[a1 + 0x00000054:word32]
	a13 = Mem0[a1 + 0x00000058:word32]
	a14 = Mem0[a1 + 0x0000005C:word32]
	a15 = Mem0[a1 + 0x00000060:word32]
	a0 = Mem0[a1 + 0x00000050:word32]
	a1 = a1 + 112
	return
	a12 = Mem0[a1 + 0x00000054:word32]
	a13 = Mem0[a1 + 0x00000058:word32]
	a14 = Mem0[a1 + 0x0000005C:word32]
	a15 = Mem0[a1 + 0x00000060:word32]
	a0 = Mem0[a1 + 0x00000050:word32]
	a1 = a1 + 112
	return
	// succ:  sdk_tx_pwctrl_cal_exit sdk_tx_pwctrl_cal_exit
l40221699:
	a0 = 0
	goto l4026151D
	// succ:  l4026151D
l4022169E:
	branch a0 == 0x00000000 l402216CB
	// succ:  l402216A0 l402216CB
l402216A0:
	a13 = 8
	v34 = Mem0[a10 + 0x00000003:byte]
	a11 = (uint32) v34
	a9 = -8
	a11 = a11 << 8
	a11 = a11 >> 24
	a11 = a11 - a0
	Mem0[a10 + 0x00000003:byte] = a11
	a11 = a11 << 8
	a11 = a11 >> 24
	branch a11 < a9 l402216BE
	// succ:  l402216BC l402216BE
l402216BC:
	a9 = a11
	// succ:  l402216BE
l402216BE:
	a0 = a13
	branch a13 < a9 l402216C5
	// succ:  l402216C3 l402216C5
l402216C3:
	a0 = a9
	// succ:  l402216C5
l402216C5:
	Mem0[a10 + 0x00000003:byte] = a0
	goto l402216FB
	// succ:  l402216FB
l402216CB:
	v35 = Mem0[a14 + 0x00000078:byte]
	a3 = (uint32) v35
	a0 = 0x40221444
	v36 = Mem0[a14 + 0x00000079:byte]
	a2 = (uint32) v36
	v37 = Mem0[a0 + 0x0000004A:byte]
	a13 = (uint32) v37
	a2 = a2 << 8
	a3 = a3 << 8
	a3 = a3 >> 24
	a2 = a2 >> 24
	a13 = a13 << 8
	a2 = a2 + a15
	a3 = a3 - a15
	Mem0[a14 + 0x00000078:byte] = a3
	Mem0[a14 + 0x00000079:byte] = a2
	a13 = a13 >> 24
	a13 = a13 + a15
	Mem0[a0 + 0x0000004A:byte] = a13
	// succ:  l402216FB
l402216FB:
	v38 = Mem0[a14 + 0x0000004E:byte]
	a2 = (uint32) v38
	a3 = a1 + 40
	a0 = 0x40221704
	call fn4031E064 (retsize: 0;)
	a0 = 0x40221707
	call sdk_dpd_scale_set (retsize: 0;)
	a15 = Mem0[a1 + 0x00000064:word32]
	branch a15 == 0x00000000 l40221685
	// succ:  l4022170D l40221685
l4022170D:
	a2 = 0x40221448
	v39 = Mem0[a14 + 0x00000078:byte]
	a5 = (uint32) v39
	v40 = Mem0[a14 + 0x00000079:byte]
	a3 = (uint32) v40
	a4 = 0x40221444
	a3 = a3 << 8
	v41 = Mem0[a4 + 0x0000004A:byte]
	a4 = (uint32) v41
	a5 = a5 << 8
	a5 = a5 >> 24
	a4 = a4 << 8
	a3 = a3 >> 24
	a4 = a4 >> 24
	a8 = Mem0[a1 + 0x0000003C:word32]
	a11 = Mem0[a1 + 0x00000040:word32]
	a13 = Mem0[a1 + 0x00000030:word32]
	a7 = 0x40220524
	a10 = 0x4021BDB8
	v42 = Mem0[a7 + 0x00000000:uint16]
	a7 = (uint32) v42
	a6 = Mem0[a10 + 0x00000360:word32]
	Mem0[a1:word32] = a13
	v43 = Mem0[a11 + 0x00000000:byte]
	a11 = (uint32) v43
	Mem0[a1 + 0x00000004:word32] = a11
	Mem0[a1 + 0x00000008:word32] = a8
	v44 = Mem0[a14 + 0x0000004E:byte]
	a9 = (uint32) v44
	a6 = a6 << 8
	a9 = a9 << 8
	a9 = a9 >> 24
	Mem0[a1 + 0x0000000C:word32] = a9
	a6 = a6 >> 24
	a6 = -a6
	a8 = a10 + a8 * 0x00000004
	a8 = Mem0[a8 + 0x00000304:word32]
	a0 = 0x4021E2D4
	a8 = a8 << 8
	a8 = a8 >> 24
	Mem0[a1 + 0x00000010:word32] = a8
	v45 = Mem0[a0 + 0x00000003:byte]
	a0 = (uint32) v45
	Mem0[a1 + 0x00000018:word32] = a12
	a0 = a0 << 8
	a0 = a0 >> 24
	Mem0[a1 + 0x00000014:word32] = a0
	a0 = 0x4021262C
	v46 = a0
	a0 = 0x40221788
	call v46 (retsize: 0;)
	goto l40261685
	// succ:  l40261685
l4026151D:
l40261685:
sdk_tx_pwctrl_cal_exit:


// sdk_tx_pwctrl_bg_init
// Return size: 0
void sdk_tx_pwctrl_bg_init()
sdk_tx_pwctrl_bg_init_entry:
	// succ:  l4022178C
l4022178C:
	a1 = fp
	a4 = 0x40203F84
	a6 = -2
	a3 = 0x4021C0CC
	a2 = Mem0[a3 + 0x0000035C:word32]
	a2 = a2 & a4
	Mem0[a3 + 0x0000035C:word32] = a2
	a11 = 0x4021C0D0
	a10 = Mem0[a3 + 0x0000035C:word32]
	a10 = a10 & a11
	Mem0[a3 + 0x0000035C:word32] = a10
	a9 = Mem0[a3 + 0x00000350:word32]
	a9 = a9 & a6
	Mem0[a3 + 0x00000350:word32] = a9
	a8 = 2
	a7 = Mem0[a3 + 0x00000360:word32]
	a7 = a7 | a8
	Mem0[a3 + 0x00000360:word32] = a7
	a5 = Mem0[a3 + 0x00000360:word32]
	a5 = a5 & a6
	Mem0[a3 + 0x00000360:word32] = a5
	a4 = 1
	a2 = Mem0[a3 + 0x00000360:word32]
	a2 = a2 | a4
	Mem0[a3 + 0x00000360:word32] = a2
	return
	// succ:  sdk_tx_pwctrl_bg_init_exit
sdk_tx_pwctrl_bg_init_exit:


// sdk_tx_pwctrl_background
// Return size: 0
void sdk_tx_pwctrl_background()
sdk_tx_pwctrl_background_entry:
	// succ:  l402217FC
l402217FC:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000001C:word32] = a0
	a0 = 0x4021C308
	v4 = Mem0[a0 + 0x00000064:byte]
	a0 = (uint32) v4
	a5 = 0x4021C0CC
	a0 = a0 & 0x00000001
	branch a0 != 0x00000000 l402218CA
	// succ:  l40221810 l402218CA
l40221810:
	a0 = 0x4021C30C
	a4 = Mem0[a5 + 0x00000350:word32]
	Mem0[a1 + 0x00000014:word32] = a3
	branch (a4 & 0x80000000) != 0x00000000 l40221881
	// succ:  l4022181E l40221881
l4022181E:
	a6 = Mem0[a5 + 0x00000350:word32]
	a7 = 0x4021E2D4
	a6 = a6 >>u 0x00000018 & 0x00000007
	branch a6 != 0x00000000 l40221881
	// succ:  l4022182D l40221881
l4022182D:
	v10 = Mem0[a7 + 0x00000004:byte]
	a7 = (uint32) v10
	branch a7 != 0x00000000 l40221881
	// succ:  l40221833 l40221881
l40221833:
	v12 = Mem0[a0 + 0x0000004E:byte]
	a8 = (uint32) v12
	Mem0[a1 + 0x00000018:word32] = a2
	branch a8 <u 0x00000007 l4022183E
	// succ:  l4022183B l4022183E
l4022183B:
	goto l402218D1
	// succ:  l402218D1
l4022183E:
	a3 = 0x4021C30C
	a2 = a8 - 1
	v17 = Mem0[a3 + 0x0000000C:int16]
	a4 = (int32) v17
	v18 = Mem0[a3 + 0x0000000E:int16]
	a3 = (int32) v18
	Mem0[a1 + 0x00000010:word32] = a4
	a3 = a3 - a4
	a2 = a2 * a3
	a3 = 5
	a0 = 0x40202548
	v19 = a0
	a0 = 0x40221859
	call v19 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000010:word32]
	a0 = a0 + a2
	// succ:  l40221863
l40221863:
	a2 = a1 | a1
	a3 = 0x4021DEF0
	a4 = a0 << 16
	a4 = a4 >> 16
	a0 = 0x40221872
	call fn4031DEAC (retsize: 0;)
	a2 = a1
	a3 = 0x4021E060
	a4 = 0x4021E4F0
	a5 = Mem0[a1 + 0x00000018:word32]
	a6 = Mem0[a1 + 0x00000014:word32]
	a0 = 0x40221881
	call fn4032144C (retsize: 0;)
	// succ:  l40221881
l40221881:
	a0 = 0x40221884
	call fn4032178C (retsize: 0;)
	a3 = 0x4021E2D4
	a2 = 0
	a0 = 0x4021BCEC
	Mem0[a3 + 0x00000004:byte] = a2
	a2 = 0x40221444
	a0 = Mem0[a0 + 0x00000000:word32]
	v22 = Mem0[a2 + 0x0000004A:byte]
	a2 = (uint32) v22
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a2 << 8
	a2 = a2 >> 24
	v23 = a0
	a0 = 0x402218A2
	call v23 (retsize: 0;)
	branch a2 < 8 l402218CA
	// succ:  l402218A5 l402218CA
l402218A5:
	a2 = 0
	a5 = 0x40221444
	a4 = 0
	Mem0[a5 + 0x0000004A:byte] = a4
	a0 = 0x402218B2
	call fn4031FD88 (retsize: 0;)
	a7 = 0x4021C30C
	a3 = Mem0[a7 + 0x000001D4:word32]
	a6 = Mem0[a1 + 0x00000014:word32]
	a3 = a3 + 1
	Mem0[a7 + 0x000001D4:word32] = a3
	branch a6 == 0x00000000 l402218CA
	// succ:  l402218C1 l402218CA
l402218C1:
	a2 = 0x402217F8
	a0 = 0x4021262C
	v24 = a0
	a0 = 0x402218CA
	call v24 (retsize: 0;)
	// succ:  l402218CA
l402218CA:
	a0 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_tx_pwctrl_background_exit
l402218D1:
	branch a8 >=u 0x0000000C l402218F7
	// succ:  l402218D4 l402218F7
l402218D4:
	a3 = 0x4021C30C
	a2 = a8 - 6
	v14 = Mem0[a3 + 0x0000000E:int16]
	a4 = (int32) v14
	v15 = Mem0[a3 + 0x00000010:int16]
	a3 = (int32) v15
	Mem0[a1 + 0x0000000C:word32] = a4
	a3 = a3 - a4
	a2 = a2 * a3
	a3 = 5
	a0 = 0x40202548
	v16 = a0
	a0 = 0x402218F0
	call v16 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a0 = a0 + a2
	goto l40261863
	// succ:  l40261863
l402218F7:
	v21 = Mem0[a0 + 0x00000012:int16]
	a9 = (int32) v21
	a2 = 13
	branch a2 >=u a8 l40221902
	// succ:  l402218FF l40221902
l402218FF:
	goto l40261860
	// succ:  l40261860
l40221902:
	a3 = 0x4021C30C
	a2 = a8 + a8 * 0x00000004
	a2 = a2 - 55
	v25 = Mem0[a3 + 0x00000010:int16]
	a3 = (int32) v25
	Mem0[a1 + 0x00000008:word32] = a3
	a3 = a9 - a3
	a2 = a2 * a3
	a3 = 22
	a0 = 0x40202548
	v26 = a0
	a0 = 0x4022191E
	call v26 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000008:word32]
	a0 = a0 + a2
	goto l40261863
	// succ:  l40261863
l40261860:
l40261863:
sdk_tx_pwctrl_background_exit:


// sdk_read_sar_dout
// Return size: 0
void sdk_read_sar_dout()
sdk_read_sar_dout_entry:
	// succ:  l4022192C
l4022192C:
	a1 = fp
	a9 = 0x4021C0CC
	a8 = 0x40221928
	a11 = 0
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	a0 = 0
	a13 = 0x000000FF
	a12 = -1
	// succ:  l40221944
l40221944:
	a6 = a9 + a0 * 0x00000004
	a7 = a2 + a0 * 0x00000002
	a5 = a13
	a10 = a11
	a3 = 0x00000117
	a6 = Mem0[a6 + 0x00000380:word32]
	a0 = a0 + 1
	a0 = a0 & 0x000000FF
	a6 = a6 ^ a12
	a4 = a6 & 0x000000FF
	a4 = a4 - 21
	a6 = a6 & 0x000007FF
	Mem0[a7:word16] = a6
	branch a4 < 0x00000000 l4022196E
	// succ:  l4022196B_1 l4022196E
l4022196B_1:
	a10 = a4
	// succ:  l4022196E
l4022196E:
	a10 = a10 * a3
	a3 = a6 & a8
	a10 = a10 >> 8
	branch a13 < a10 l4022197C
	// succ:  l4022197A l4022197C
l4022197A:
	a5 = a10
	// succ:  l4022197C
l4022197C:
	a3 = a5 + a3
	Mem0[a7:word16] = a3
	branch a0 != 8 l40221944
	// succ:  l40221984 l40221944
l40221984:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_read_sar_dout_exit
sdk_read_sar_dout_exit:


// sdk_ram_get_fm_sar_dout
// Return size: 0
void sdk_ram_get_fm_sar_dout()
sdk_ram_get_fm_sar_dout_entry:
	// succ:  l40221990
l40221990:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a3
	Mem0[a1 + 0x00000014:word32] = a2
	a5 = -3
	a2 = 0x4021C0CC
	a4 = Mem0[a2 + 0x00000350:word32]
	a4 = a4 & a5
	Mem0[a2 + 0x00000350:word32] = a4
	a3 = 2
	a0 = Mem0[a2 + 0x00000350:word32]
	a0 = a0 | a3
	Mem0[a2 + 0x00000350:word32] = a0
	a2 = 25
	a0 = 0x402219C6
	call fn40303F28 (retsize: 0;)
	a2 = a1
	a0 = 0x402219CB
	call fn4032192C (retsize: 0;)
	a2 = Mem0[a1 + 0x00000014:word32]
	v8 = Mem0[a1 + 0x00000006:uint16]
	a0 = (uint32) v8
	v9 = Mem0[a1 + 0x00000004:uint16]
	a4 = (uint32) v9
	v10 = Mem0[a1 + 0x00000002:uint16]
	a3 = (uint32) v10
	v12 = Mem0[a1 + 0x0000000E:uint16]
	a9 = (uint32) v12
	v14 = Mem0[a1 + 0x0000000A:uint16]
	a7 = (uint32) v14
	v16 = Mem0[a1 + 0x00000008:uint16]
	a6 = (uint32) v16
	v18 = Mem0[a1 + 0x0000000C:uint16]
	a8 = (uint32) v18
	a6 = a6 + a7
	a8 = a8 + a9
	a3 = a3 + a4
	a0 = a0 + a3
	a8 = a8 + a8 * 0x00000002
	a6 = a6 + a6 * 0x00000002
	a6 = a6 & 0x0000FFFF
	a7 = a8 & 0x0000FFFF
	a9 = a0 << 31
	a9 = a9 & 0x0000FFFF
	branch a9 <u a7 l40221A05
	// succ:  l402219FF l40221A05
l402219FF:
	a8 = a0 * 0x00000002 - a8
	goto l40221A07
	// succ:  l40221A07
l40221A05:
	a8 = 0
	// succ:  l40221A07
l40221A07:
	Mem0[a2:word16] = a8
	a0 = Mem0[a1 + 0x00000010:word32]
	branch a6 <u a7 l40221A15
	// succ:  l40221A0F l40221A15
l40221A0F:
	a2 = a6 - a7
	goto l40221A17
	// succ:  l40221A17
l40221A15:
	a2 = 0
	// succ:  l40221A17
l40221A17:
	Mem0[a0:word16] = a2
	a0 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_ram_get_fm_sar_dout_exit
sdk_ram_get_fm_sar_dout_exit:


// sdk_ram_cal_tos_v60
// Return size: 0
void sdk_ram_cal_tos_v60()
sdk_ram_cal_tos_v60_entry:
	// succ:  l40221A34
l40221A34:
	a1 = fp
	a4 = a3 & 0x0000FFFF
	a1 = a1 - 64
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x00000024:word32] = a15
	Mem0[a1 + 0x00000034:word32] = a5
	Mem0[a1 + 0x00000010:word32] = a6
	a3 = 1
	Mem0[a1 + 0x0000001C:word32] = a13
	a13 = 0x4021BCEC
	Mem0[a1 + 0x00000014:word32] = a0
	a0 = Mem0[a13 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a2
	a0 = Mem0[a0 + 0x000000AC:word32]
	a2 = 0
	v13 = a0
	a0 = 0x40221A59
	call v13 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000034:word32]
	a12 = 0x4021C0CC
	branch a2 == 0x00000000 l40221B87
	// succ:  l40221A61 l40221B87
l40221A61:
	a15 = 64
	a14 = 1
	a13 = a2 - 4
	a7 = 64
	a8 = 28
	a9 = 0
	a10 = 0
	a11 = 0
	Mem0[a1 + 0x00000008:word32] = a11
	Mem0[a1 + 0x0000002C:word32] = a10
	Mem0[a1 + 0x00000030:word32] = a9
	Mem0[a1 + 0x00000004:word32] = a8
	Mem0[a1:word32] = a7
	Mem0[a1 + 0x00000028:word32] = a13
	a13 = 0
	// succ:  l40221A80
l40221A80:
	a2 = 0x00000001
	a0 = 0x4021BCEC
	a3 = 0x00000002
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = Mem0[a1 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a4 & 0x0000FFFF
	v19 = a0
	a0 = 0x40221A97
	call v19 (retsize: 0;)
	a0 = 0x4021BCEC
	a2 = 0
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = 2
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a15 & 0x0000FFFF
	v20 = a0
	a0 = 0x40221AA9
	call v20 (retsize: 0;)
	a3 = 0x40221A24
	Mem0[a12 + 0x0000034C:word32] = a3
	a2 = 0x40221A28
	Mem0[a12 + 0x0000034C:word32] = a2
	a2 = 2
	a0 = 0x40221AC0
	call fn40303F28 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a3 = Mem0[a1 + 0x00000004:word32]
	a8 = Mem0[a1 + 0x00000008:word32]
	a7 = 0x40204574
	a5 = 0x0000007F
	// succ:  l40221ACC
l40221ACC:
	a4 = a13
	a6 = Mem0[a12 + 0x0000034C:word32]
	a6 = a6 >>u 0x00000018 & 0x000000FF
	branch a6 != 0x00000000 l40221ADA
	// succ:  l40221AD7_1 l40221ADA
l40221AD7_1:
	a4 = a14
	// succ:  l40221ADA
l40221ADA:
	branch a4 != 0x00000000 l40221ACC
	// succ:  l40221ADD l40221ACC
l40221ADD:
	a9 = Mem0[a12 + 0x0000034C:word32]
	a11 = 1
	a9 = a9 >>u 0x0000001F & 0x00000001
	a9 = a9 ^ a11
	a2 = Mem0[a12 + 0x0000034C:word32]
	a10 = 0
	a2 = a2 & a7
	branch a2 != 0x00000000 l40221AF9
	// succ:  l40221AF6_2 l40221AF9
l40221AF6_2:
	a10 = a11
	// succ:  l40221AF9
l40221AF9:
	branch a9 == 0x00000000 l40221B0F
	// succ:  l40221AFB l40221B0F
l40221AFB:
	a9 = a5
	a15 = a3 + a15
	a15 = a15 << 16
	a15 = a15 >> 16
	branch a5 < a15 l40221B0A
	// succ:  l40221B08 l40221B0A
l40221B08:
	a9 = a15
	// succ:  l40221B0A
l40221B0A:
	a15 = a9
	goto l40221B1D
	// succ:  l40221B1D
l40221B0F:
	a2 = a15 - a3
	a15 = a13
	a2 = a2 << 16
	a2 = a2 >> 16
	branch a2 < 0x00000000 l40221B1D
	// succ:  l40221B1A_1 l40221B1D
l40221B1A_1:
	a15 = a2
	// succ:  l40221B1D
l40221B1D:
	branch a10 == 0x00000000 l40221B33
	// succ:  l40221B1F l40221B33
l40221B1F:
	a9 = a5
	a0 = a3 + a0
	a0 = a0 << 16
	a0 = a0 >> 16
	branch a5 < a0 l40221B2E
	// succ:  l40221B2C l40221B2E
l40221B2C:
	a9 = a0
	// succ:  l40221B2E
l40221B2E:
	a0 = a9
	goto l40221B41
	// succ:  l40221B41
l40221B33:
	a2 = a0 - a3
	a0 = a13
	a2 = a2 << 16
	a2 = a2 >> 16
	branch a2 < 0x00000000 l40221B41
	// succ:  l40221B3E_1 l40221B41
l40221B3E_1:
	a0 = a2
	// succ:  l40221B41
l40221B41:
	Mem0[a1:word32] = a0
	a4 = Mem0[a1 + 0x00000028:word32]
	a7 = a3 - 2
	a6 = a3 >> 1
	a6 = a6 + 1
	a3 = 1
	a6 = a6 << 8
	a6 = a6 >> 24
	branch a7 == 0x00000000 l40221B58
	// succ:  l40221B55_2 l40221B58
l40221B55_2:
	a3 = a6
	// succ:  l40221B58
l40221B58:
	Mem0[a1 + 0x00000004:word32] = a3
	branch a8 < a4 l40221B75
	// succ:  l40221B5D l40221B75
l40221B5D:
	a7 = Mem0[a1 + 0x0000002C:word32]
	a10 = Mem0[a1 + 0x00000030:word32]
	a9 = a7 + a0
	a11 = a10 + a15
	a11 = a11 << 16
	a9 = a9 << 16
	a7 = a9 >> 16
	a10 = a11 >> 16
	Mem0[a1 + 0x00000030:word32] = a10
	Mem0[a1 + 0x0000002C:word32] = a7
	// succ:  l40221B75
l40221B75:
	a10 = Mem0[a1 + 0x00000034:word32]
	a8 = a8 + 1
	a8 = a8 & 0x000000FF
	Mem0[a1 + 0x00000008:word32] = a8
	a10 = a10 - a8
	branch a10 != 0x00000000 l40221A80
	// succ:  l40221B84 l40221A80
l40221B84:
	goto l40221B8F
	// succ:  l40221B8F
l40221B87:
	a9 = 0
	a10 = 0
	Mem0[a1 + 0x0000002C:word32] = a10
	Mem0[a1 + 0x00000030:word32] = a9
	// succ:  l40221B8F
l40221B8F:
	a2 = 1
	a3 = 2
	a15 = Mem0[a1 + 0x0000002C:word32]
	a13 = 0x4021BCEC
	a15 = a15 + 2
	a0 = Mem0[a13 + 0x00000000:word32]
	a4 = a15 >>u 0x00000002 & 0x0000FFFF
	a0 = Mem0[a0 + 0x000000AC:word32]
	a15 = a15 >> 2
	v21 = a0
	a0 = 0x40221BA8
	call v21 (retsize: 0;)
	a2 = 0
	a3 = 2
	a14 = Mem0[a1 + 0x00000030:word32]
	a0 = Mem0[a13 + 0x00000000:word32]
	a14 = a14 + 2
	a4 = a14 >>u 0x00000002 & 0x0000FFFF
	a0 = Mem0[a0 + 0x000000AC:word32]
	a14 = a14 >> 2
	v22 = a0
	a0 = 0x40221BBE
	call v22 (retsize: 0;)
	a2 = 1
	a0 = Mem0[a13 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0x0000007F
	v23 = a0
	a0 = 0x40221BCD
	call v23 (retsize: 0;)
	a4 = 0x40221A2C
	a2 = Mem0[a1 + 0x0000000C:word32]
	a3 = Mem0[a1 + 0x00000010:word32]
	Mem0[a12 + 0x0000034C:word32] = a4
	Mem0[a3:byte] = a14
	Mem0[a3 + 0x00000001:byte] = a15
	branch a2 == 0x00000000 l40221C03
	// succ:  l40221BE2 l40221C03
l40221BE2:
	a9 = 0x40221A30
	a7 = a14 << 14
	a8 = a15 << 7
	a6 = 0x4021E4C4
	a5 = Mem0[a6 + 0x00000264:word32]
	a5 = a5 & a9
	a5 = a5 | a8
	a5 = a5 | a7
	Mem0[a6 + 0x00000264:word32] = a5
	// succ:  l40221C03
l40221C03:
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x0000001C:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x00000024:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_ram_cal_tos_v60_exit
sdk_ram_cal_tos_v60_exit:


// sdk_ram_get_bb_atten
// Return size: 0
void sdk_ram_get_bb_atten()
sdk_ram_get_bb_atten_entry:
	// succ:  l40221C14
l40221C14:
	a1 = fp
	a4 = 0
	a5 = a2 + 8
	a2 = 0x0000007F
	a5 = a5 * 0x00000004 - a3
	a5 = a5 << 16
	a5 = a5 >> 16
	branch a5 < 0x00000000 l40221C27
	// succ:  l40221C24_1 l40221C27
l40221C24_1:
	a4 = a5
	// succ:  l40221C27
l40221C27:
	a4 = a4 << 16
	a3 = a4 >> 16
	branch a3 >= 128 l40221C32
	// succ:  l40221C30 l40221C32
l40221C30:
	a2 = a3
	// succ:  l40221C32
l40221C32:
	a2 = a2 << 8
	a2 = a2 >> 24
	return
	// succ:  sdk_ram_get_bb_atten_exit
sdk_ram_get_bb_atten_exit:


// sdk_ram_rfcal_txcap
// Return size: 0
void sdk_ram_rfcal_txcap()
sdk_ram_rfcal_txcap_entry:
	// succ:  l40221C44
l40221C44:
	a1 = fp
	a7 = 0
	a1 = a1 - 80
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x00000024:word32] = a15
	Mem0[a1 + 0x0000001C:word32] = a13
	Mem0[a1 + 0x00000014:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000028:word32] = a6
	Mem0[a1 + 0x00000038:word32] = a4
	Mem0[a1 + 0x00000040:word32] = a5
	a4 = 9
	a5 = 7
	a6 = 0
	a12 = a3
	a0 = 0x4021BCEC
	a13 = a2
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = 0x00000077
	a0 = Mem0[a0 + 0x0000009C:word32]
	a3 = 0
	v14 = a0
	a0 = 0x40221C74
	call v14 (retsize: 0;)
	a4 = a12
	a3 = a13
	a5 = 0
	a6 = 0
	a0 = 0x4021BCEC
	a2 = 0
	Mem0[a1:word32] = a2
	Mem0[a1 + 0x00000004:word32] = a2
	Mem0[a1 + 0x00000008:word32] = a2
	a0 = Mem0[a0 + 0x00000000:word32]
	a7 = 0
	a0 = Mem0[a0 + 0x00000068:word32]
	a2 = 1
	v15 = a0
	a0 = 0x40221C93
	call v15 (retsize: 0;)
	a12 = 0
	a3 = 3
	v16 = Mem0[a1 + 0x00000010:byte]
	a5 = (uint32) v16
	Mem0[a1 + 0x0000002C:word32] = a5
	Mem0[a1 + 0x00000030:word32] = a3
	// succ:  l40221C9E
l40221C9E:
	a13 = 0
	a15 = 0
	a9 = Mem0[a1 + 0x00000028:word32]
	a8 = 0
	branch a12 == 0x00000000 l40221CAE
	// succ:  l40221CA8 l40221CAE
l40221CA8:
	branch a12 == 1 l40221CB5
	// succ:  l40221CAB l40221CB5
l40221CAB:
	branch a12 != 2 l40221CB9
	// succ:  l40221CAE l40221CB9
l40221CAE:
	a6 = 7
	Mem0[a1 + 0x0000002C:word32] = a6
	goto l40221CB9
	// succ:  l40221CB9
l40221CB5:
	a7 = 15
	Mem0[a1 + 0x0000002C:word32] = a7
	// succ:  l40221CB9
l40221CB9:
	a10 = Mem0[a1 + 0x0000002C:word32]
	a9 = a9 + a12
	Mem0[a1 + 0x00000034:word32] = a9
	Mem0[a9:byte] = a8
	a10 = a10 + 1
	Mem0[a1 + 0x0000003C:word32] = a10
	// succ:  l40221CC6
l40221CC6:
	branch a12 == 0x00000000 l40221D04
	// succ:  l40221CC8 l40221D04
l40221CC8:
	branch a12 == 1 l40221CE9
	// succ:  l40221CCB l40221CE9
l40221CCB:
	branch a12 != 2 l40221D22
	// succ:  l40221CCE l40221D22
l40221CCE:
	a2 = 0x0000006B
	a3 = 2
	a4 = 2
	a0 = 0x4021BCEC
	a5 = 6
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = 4
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a13
	v20 = a0
	a0 = 0x40221CE6
	call v20 (retsize: 0;)
	goto l40221D22
	// succ:  l40221D22
l40221CE9:
	a2 = 0x0000006B
	a3 = 2
	a4 = 2
	a0 = 0x4021BCEC
	a5 = 3
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a13
	v22 = a0
	a0 = 0x40221D01
	call v22 (retsize: 0;)
	goto l40221D22
	// succ:  l40221D22
l40221D04:
	a2 = 0x0000006B
	a3 = 2
	a4 = 1
	a5 = 3
	a6 = 0
	a0 = 0x4021BCEC
	a7 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	a7 = a7 + a13 * 0x00000002
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a7 & 0x000000FF
	v21 = a0
	a0 = 0x40221D22
	call v21 (retsize: 0;)
	// succ:  l40221D22
l40221D22:
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = Mem0[a1 + 0x00000038:word32]
	a0 = Mem0[a0 + 0x00000070:word32]
	a3 = 10
	v23 = a0
	a0 = 0x40221D31
	call v23 (retsize: 0;)
	a14 = a2
	a2 = Mem0[a1 + 0x00000040:word32]
	branch a2 == 0x00000000 l40221D45
	// succ:  l40221D38 l40221D45
l40221D38:
	a2 = 0x40221C3C
	a3 = a13
	a4 = a14
	a0 = 0x4021262C
	v24 = a0
	a0 = 0x40221D45
	call v24 (retsize: 0;)
	// succ:  l40221D45
l40221D45:
	branch a15 >= a14 l40221D57
	// succ:  l40221D48 l40221D57
l40221D48:
	a15 = a14
	a4 = Mem0[a1 + 0x00000034:word32]
	a3 = 1
	a3 = a3 + a13 * 0x00000002
	branch a12 == 0x00000000 l40221D54
	// succ:  l40221D51_1 l40221D54
l40221D51_1:
	a3 = a13
	// succ:  l40221D54
l40221D54:
	Mem0[a4:byte] = a3
	// succ:  l40221D57
l40221D57:
	a4 = Mem0[a1 + 0x0000003C:word32]
	a13 = a13 + 1
	a13 = a13 & 0x000000FF
	a4 = a4 - a13
	branch a4 != 0x00000000 l40221CC6
	// succ:  l40221D64 l40221CC6
l40221D64:
	a14 = Mem0[a1 + 0x00000040:word32]
	branch a14 == 0x00000000 l40221D79
	// succ:  l40221D69 l40221D79
l40221D69:
	a2 = 0x40221C40
	a4 = Mem0[a1 + 0x00000034:word32]
	a3 = a12
	v25 = Mem0[a4 + 0x00000000:byte]
	a4 = (uint32) v25
	a0 = 0x4021262C
	v26 = a0
	a0 = 0x40221D79
	call v26 (retsize: 0;)
	// succ:  l40221D79
l40221D79:
	branch a12 == 0x00000000 l40221D9F
	// succ:  l40221D7B l40221D9F
l40221D7B:
	branch a12 == 1 l40221DE4
	// succ:  l40221D7E l40221DE4
l40221D7E:
	branch a12 != 2 l40221DBA
	// succ:  l40221D81 l40221DBA
l40221D81:
	a2 = 0x0000006B
	a3 = 2
	a4 = 2
	a5 = 6
	a0 = 0x4021BCEC
	a6 = 4
	a0 = Mem0[a0 + 0x00000000:word32]
	a7 = Mem0[a1 + 0x00000034:word32]
	a0 = Mem0[a0 + 0x0000009C:word32]
	v27 = Mem0[a7 + 0x00000000:byte]
	a7 = (uint32) v27
	v28 = a0
	a0 = 0x40221D9C
	call v28 (retsize: 0;)
	goto l40221DBA
	// succ:  l40221DBA
l40221D9F:
	a2 = 0x0000006B
	a3 = 2
	a4 = 1
	a5 = 3
	a0 = 0x4021BCEC
	a6 = 0
	a0 = Mem0[a0 + 0x00000000:word32]
	a7 = Mem0[a1 + 0x00000034:word32]
	a0 = Mem0[a0 + 0x0000009C:word32]
	v29 = Mem0[a7 + 0x00000000:byte]
	a7 = (uint32) v29
	v30 = a0
	a0 = 0x40221DBA
	call v30 (retsize: 0;)
	// succ:  l40221DBA
l40221DBA:
	a2 = Mem0[a1 + 0x00000030:word32]
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	a2 = a2 - 1
	Mem0[a1 + 0x00000030:word32] = a2
	branch a2 != 0x00000000 l40221C9E
	// succ:  l40221DC8 l40221C9E
l40221DC8:
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000006C:word32]
	a2 = 1
	v33 = a0
	a0 = 0x40221DD5
	call v33 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x0000001C:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x00000024:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 80
	return
	// succ:  sdk_ram_rfcal_txcap_exit
l40221DE4:
	a2 = 0x0000006B
	a3 = 2
	a4 = 2
	a5 = 3
	a0 = 0x4021BCEC
	a6 = 0
	a0 = Mem0[a0 + 0x00000000:word32]
	a7 = Mem0[a1 + 0x00000034:word32]
	a0 = Mem0[a0 + 0x0000009C:word32]
	v31 = Mem0[a7 + 0x00000000:byte]
	a7 = (uint32) v31
	v32 = a0
	a0 = 0x40221DFF
	call v32 (retsize: 0;)
	// succ:  l40261DBA
l40261DBA:
sdk_ram_rfcal_txcap_exit:


// sdk_ram_rfcal_pwrctrl
// Return size: 0
void sdk_ram_rfcal_pwrctrl()
sdk_ram_rfcal_pwrctrl_entry:
	// succ:  l40221E08
l40221E08:
	a1 = fp
	a1 = a1 - 96
	Mem0[a1 + 0x00000020:word32] = a15
	Mem0[a1 + 0x00000010:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a13
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x0000001C:word32] = a14
	Mem0[a1 + 0x00000034:word32] = a7
	Mem0[a1 + 0x00000038:word32] = a5
	Mem0[a1 + 0x0000002C:word32] = a3
	Mem0[a1 + 0x00000030:word32] = a4
	a3 = 0
	a4 = 9
	a5 = 7
	a7 = 0
	a14 = a6
	a12 = 0x4021BCEC
	a13 = a2
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 0x00000077
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 0
	v14 = a0
	a0 = 0x40221E39
	call v14 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000030:word32]
	branch a2 == 0x00000000 l40221F96
	// succ:  l40221E3E l40221F96
l40221E3E:
	a15 = 0xFFFFFF80
	a11 = 0
	a6 = a14 & 0x00000007
	a5 = a14 >>u 0x00000003 & 0x00000003
	Mem0[a1 + 0x00000024:word32] = a13
	v16 = Mem0[a1 + 0x00000060:uint16]
	a3 = (uint32) v16
	v17 = Mem0[a1 + 0x00000064:byte]
	a4 = (uint32) v17
	a8 = 0
	Mem0[a1 + 0x00000054:word32] = a8
	Mem0[a1 + 0x00000028:word32] = a4
	Mem0[a1 + 0x00000050:word32] = a3
	a13 = 0x0000007F
	a5 = a5 + a5 * 0x00000002
	a14 = 0
	a5 = a6 + a5 * 0x00000002
	a5 = a5 & 0x000000FF
	Mem0[a1 + 0x0000003C:word32] = a5
	// succ:  l40221E6B
l40221E6B:
	a10 = Mem0[a1 + 0x00000054:word32]
	a9 = Mem0[a1 + 0x0000002C:word32]
	Mem0[a1 + 0x00000048:word32] = a11
	a9 = a9 + a10
	a10 = Mem0[a1 + 0x00000038:word32]
	v21 = Mem0[a9 + 0x00000000:byte]
	a9 = (uint32) v21
	Mem0[a1 + 0x00000044:word32] = a9
	a9 = a9 - a10
	Mem0[a1 + 0x00000040:word32] = a9
	// succ:  l40221E83
l40221E83:
	a3 = Mem0[a1 + 0x00000040:word32]
	a2 = Mem0[a1 + 0x0000003C:word32]
	a3 = a3 - a14
	a3 = a3 << 8
	a3 = a3 >> 24
	a0 = 0x40221E94
	call fn40321C14 (retsize: 0;)
	a0 = 0
	branch a2 < 0x00000000 l40221E99
	// succ:  l40221E96_1 l40221E99
l40221E96_1:
	a0 = a2
	// succ:  l40221E99
l40221E99:
	a12 = a0 << 8
	a12 = a12 >> 24
	branch a13 >= a12 l40221EA7
	// succ:  l40221EA2 l40221EA7
l40221EA2:
	a12 = a13 - 1
	goto l40221EAC
	// succ:  l40221EAC
l40221EA7:
	branch a12 >= a15 l40221EAC
	// succ:  l40221EAA l40221EAC
l40221EAA:
	a12 = a15 + 1
	// succ:  l40221EAC
l40221EAC:
	a2 = 1
	a3 = Mem0[a1 + 0x00000024:word32]
	a4 = a12 & 0x000000FF
	a5 = 0
	a0 = 0x4021BCEC
	a6 = 0
	Mem0[a1:word32] = a6
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1 + 0x00000008:word32] = a6
	a0 = Mem0[a0 + 0x00000000:word32]
	a7 = 0
	a0 = Mem0[a0 + 0x00000068:word32]
	a6 = 0
	v24 = a0
	a0 = 0x40221ECC
	call v24 (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000002C:word32]
	a2 = Mem0[a1 + 0x00000050:word32]
	v25 = a0
	a0 = 0x40221ED9
	call v25 (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a1 + 0x0000004C:word32] = a2
	a0 = Mem0[a0 + 0x0000002C:word32]
	a2 = Mem0[a1 + 0x00000050:word32]
	v26 = a0
	a0 = 0x40221EE9
	call v26 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000004C:word32]
	a6 = Mem0[a1 + 0x00000044:word32]
	a0 = a0 + a2
	a0 = a0 << 16
	a0 = a0 >> 16
	a0 = a0 + 4
	a0 = a0 >> 3
	a6 = a0 - a6
	a6 = a6 << 16
	a6 = a6 >> 16
	branch a6 >= 1 l40221F11
	// succ:  l40221F08 l40221F11
l40221F08:
	a13 = a12 << 8
	a13 = a13 >> 24
	goto l40221F17
	// succ:  l40221F17
l40221F11:
	a15 = a12 << 8
	a15 = a15 >> 24
	// succ:  l40221F17
l40221F17:
	branch a6 == 0x00000000 l40221F3F
	// succ:  l40221F19 l40221F3F
l40221F19:
	branch a6 == -1 l40221F3F
	// succ:  l40221F1C l40221F3F
l40221F1C:
	a2 = a12 << 8
	a2 = a2 >> 24
	branch a2 != 0x00000000 l40221F27
	// succ:  l40221F24 l40221F27
l40221F24:
	branch a6 < 0x00000000 l40221F3F
	// succ:  l40221F27 l40221F3F
l40221F27:
	a3 = a15 + 1
	branch a13 == a3 l40221F3F
	// succ:  l40221F2C l40221F3F
l40221F2C:
	a4 = Mem0[a1 + 0x00000048:word32]
	a14 = a6 + a14
	a5 = a4 + 1
	a4 = a5 & 0x000000FF
	Mem0[a1 + 0x00000048:word32] = a4
	a4 = a4 - 10
	branch a4 != 0x00000000 l40221E83
	// succ:  l40221F3F l40221E83
l40221F3F:
	a9 = Mem0[a1 + 0x00000028:word32]
	a11 = Mem0[a1 + 0x00000054:word32]
	a7 = Mem0[a1 + 0x00000038:word32]
	a10 = Mem0[a1 + 0x00000034:word32]
	a7 = a12 - a7
	a10 = a10 + a11
	a6 = a7 << 8
	a6 = a6 >> 24
	Mem0[a10:byte] = a7
	a7 = -24
	branch a6 >= a7 l40221F62
	// succ:  l40221F5B l40221F62
l40221F5B:
	a6 = -24
	a8 = -24
	Mem0[a10:byte] = a8
	// succ:  l40221F62
l40221F62:
	branch a9 == 0x00000000 l40221F79
	// succ:  l40221F64 l40221F79
l40221F64:
	a4 = Mem0[a1 + 0x00000044:word32]
	a2 = 0x40221E04
	a3 = Mem0[a1 + 0x00000054:word32]
	a5 = a0 << 8
	a5 = a5 >> 24
	a0 = 0x4021262C
	v32 = a0
	a0 = 0x40221F79
	call v32 (retsize: 0;)
	// succ:  l40221F79
l40221F79:
	a15 = 0xFFFFFF80
	a13 = 0x0000007F
	a14 = 0
	a11 = 0
	a7 = Mem0[a1 + 0x00000054:word32]
	a6 = Mem0[a1 + 0x00000030:word32]
	a8 = a7 + 1
	a7 = a8 & 0x000000FF
	Mem0[a1 + 0x00000054:word32] = a7
	a6 = a6 - a7
	branch a6 != 0x00000000 l40221E6B
	// succ:  l40221F96 l40221E6B
l40221F96:
	a12 = 0x4021BCEC
	a9 = 50
	a3 = Mem0[a1 + 0x00000034:word32]
	a2 = Mem0[a1 + 0x00000030:word32]
	v22 = Mem0[a3 + 0x00000000:byte]
	a10 = (uint32) v22
	a2 = a2 + a3
	a10 = a10 << 8
	a2 = a2 - 128
	v23 = Mem0[a2 + 0x0000007F:byte]
	a0 = (uint32) v23
	a10 = a10 >> 24
	a0 = a0 << 8
	a0 = a0 >> 24
	a10 = a0 - a10
	branch a9 >= a10 l40221FC2
	a12 = 0x4021BCEC
	a9 = 50
	a3 = Mem0[a1 + 0x00000034:word32]
	a2 = Mem0[a1 + 0x00000030:word32]
	v33 = Mem0[a3 + 0x00000000:byte]
	a10 = (uint32) v33
	a2 = a2 + a3
	a10 = a10 << 8
	a2 = a2 - 128
	v34 = Mem0[a2 + 0x0000007F:byte]
	a0 = (uint32) v34
	a10 = a10 >> 24
	a0 = a0 << 8
	a0 = a0 >> 24
	a10 = a0 - a10
	branch a9 >= a10 l40221FC2
	// succ:  l40221FBC l40221FC2
l40221FBC:
	a4 = a0 - 50
	Mem0[a3:byte] = a4
	a4 = a0 - 50
	Mem0[a3:byte] = a4
	// succ:  l40221FC2
l40221FC2:
	a6 = 0x4021C308
	v27 = Mem0[a6 + 0x0000005E:byte]
	a6 = (uint32) v27
	branch a6 == 0x00000000 l40222002
	// succ:  l40221FCA l40222002
l40221FCA:
	a5 = Mem0[a1 + 0x00000030:word32]
	a5 = a5 - 1
	branch a5 < 1 l40222002
	// succ:  l40221FD1 l40222002
l40221FD1:
	a6 = 0x4021C30C
	a7 = 0
	a4 = Mem0[a1 + 0x00000030:word32]
	Mem0[a1 + 0x00000054:word32] = a7
	a4 = a4 + a6
	// succ:  l40221FDD
l40221FDD:
	a8 = Mem0[a1 + 0x00000054:word32]
	v28 = Mem0[a4 + 0x00000067:byte]
	a11 = (uint32) v28
	a13 = a8 + a6
	v29 = Mem0[a13 + 0x00000068:byte]
	a13 = (uint32) v29
	v30 = Mem0[a2 + 0x0000007F:byte]
	a10 = (uint32) v30
	a11 = a11 - a13
	a10 = a10 + a11
	a11 = Mem0[a1 + 0x00000034:word32]
	a9 = a8 + 1
	a11 = a11 + a8
	Mem0[a11:byte] = a10
	a8 = a9 & 0x000000FF
	Mem0[a1 + 0x00000054:word32] = a8
	branch a5 != a8 l40221FDD
	// succ:  l40222002 l40221FDD
l40222002:
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000006C:word32]
	a2 = 1
	v31 = a0
	a0 = 0x4022200C
	call v31 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x00000018:word32]
	a14 = Mem0[a1 + 0x0000001C:word32]
	a15 = Mem0[a1 + 0x00000020:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 96
	return
	// succ:  sdk_ram_rfcal_pwrctrl_exit
sdk_ram_rfcal_pwrctrl_exit:


// sdk_ram_rxiq_get_mis
// Return size: 0
void sdk_ram_rxiq_get_mis()
sdk_ram_rxiq_get_mis_entry:
	// succ:  l40222024
l40222024:
	a1 = fp
	a8 = a2 - 2
	a1 = a1 - 96
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x00000034:word32] = a15
	Mem0[a1 + 0x00000024:word32] = a0
	Mem0[a1 + 0x00000038:word32] = a6
	Mem0[a1 + 0x0000004C:word32] = a5
	Mem0[a1 + 0x0000002C:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a8
	a13 = 0x4021BDB8
	a9 = Mem0[a13 + 0x00000380:word32]
	SAR = a8
	a9 = a0 >> SAR
	a10 = Mem0[a13 + 0x0000038C:word32]
	SAR = a8
	a10 = a0 >> SAR
	a15 = a9 - a10
	a6 = Mem0[a13 + 0x00000388:word32]
	SAR = a8
	a6 = a0 >> SAR
	Mem0[a1:word32] = a7
	a0 = Mem0[a13 + 0x00000384:word32]
	SAR = a8
	a9 = a9 + a10
	a2 = a9
	a8 = Mem0[a1 + 0x00000038:word32]
	a0 = a0 >> SAR
	a14 = a6 + a0
	a8 = a5 ^ a8
	a0 = a0 - a6
	a12 = a0
	a6 = a3 ^ a4
	a6 = a6 ^ a8
	a6 = a6 & 0x000000FF
	branch a6 == 0x00000000 l40222096
	// succ:  l4022208E l40222096
l4022208E:
	a12 = a14
	a2 = a15
	a14 = a0
	a15 = a9
	// succ:  l40222096
l40222096:
	Mem0[a1 + 0x00000040:word32] = a2
	a13 = a12 >> 31
	a4 = a2
	a5 = a2 >> 31
	Mem0[a1 + 0x0000003C:word32] = a5
	a3 = a5
	a0 = 0x4021DA98
	v18 = a0
	a0 = 0x402220AB
	call v18 (retsize: 0;)
	a5 = a13
	a4 = a12
	Mem0[a1 + 0x0000000C:word32] = a3
	Mem0[a1 + 0x00000010:word32] = a2
	a3 = a13
	a2 = a12
	a0 = 0x4021DA98
	v19 = a0
	a0 = 0x402220BD
	call v19 (retsize: 0;)
	a6 = 0
	a0 = 1
	a7 = 0
	a5 = Mem0[a1 + 0x0000000C:word32]
	a11 = Mem0[a1 + 0x00000010:word32]
	a5 = a5 + a3
	a4 = a11 + a2
	branch a4 != 0x00000000 l402220CE
	// succ:  l402220CB_1 l402220CE
l402220CB_1:
	a7 = a0
	// succ:  l402220CE
l402220CE:
	branch a4 >=u a11 l402220D3
	// succ:  l402220D1 l402220D3
l402220D1:
	a5 = a5 + 1
	// succ:  l402220D3
l402220D3:
	a11 = a4
	a10 = a5
	branch a5 != 0x00000000 l402220DA
	// succ:  l402220D7_1 l402220DA
l402220D7_1:
	a6 = a0
	// succ:  l402220DA
l402220DA:
	branch (a6 & a7) == 0x00000000 l402220E1
	// succ:  l402220DD l402220E1
l402220DD:
	a11 = a0
	a10 = 0
	// succ:  l402220E1
l402220E1:
	a4 = a15
	Mem0[a1 + 0x00000018:word32] = a15
	Mem0[a1 + 0x00000048:word32] = a14
	a3 = Mem0[a1 + 0x0000003C:word32]
	a2 = Mem0[a1 + 0x00000040:word32]
	Mem0[a1 + 0x00000050:word32] = a10
	Mem0[a1 + 0x00000054:word32] = a11
	a8 = a14 >> 31
	a5 = a15 >> 31
	Mem0[a1 + 0x00000014:word32] = a5
	Mem0[a1 + 0x00000044:word32] = a8
	a0 = 0x4021DA98
	v21 = a0
	a0 = 0x40222104
	call v21 (retsize: 0;)
	a14 = Mem0[a1 + 0x00000054:word32]
	a15 = Mem0[a1 + 0x00000050:word32]
	a5 = Mem0[a1 + 0x00000044:word32]
	a4 = Mem0[a1 + 0x00000048:word32]
	Mem0[a1 + 0x0000001C:word32] = a3
	Mem0[a1 + 0x00000020:word32] = a2
	a3 = a13
	a2 = a12
	a0 = 0x4021DA98
	v22 = a0
	a0 = 0x4022211E
	call v22 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000001C:word32]
	a0 = a0 - a3
	a3 = Mem0[a1 + 0x00000020:word32]
	a10 = a3 - a2
	branch a3 >=u a10 l4022212D
	// succ:  l4022212B l4022212D
l4022212B:
	a0 = a0 - 1
	// succ:  l4022212D
l4022212D:
	a2 = a10 << 23
	a5 = a15
	a4 = a14
	SAR = 0x07
	a3 = (word32) (a0_a10 >>u SAR)
	a0 = 0x40222020
	v24 = a0
	a0 = 0x40222140
	call v24 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a4 = a2 << 8
	a5 = Mem0[a1 + 0x00000038:word32]
	a4 = a4 >> 24
	a4 = a4 + 1
	a4 = a4 >> 1
	a2 = -a4
	branch a5 != 0x00000000 l40222155
	// succ:  l40222152_1 l40222155
l40222152_1:
	a2 = a4
	// succ:  l40222155
l40222155:
	a5 = Mem0[a1 + 0x00000014:word32]
	a4 = Mem0[a1 + 0x00000018:word32]
	Mem0[a3:byte] = a2
	Mem0[a1 + 0x00000008:word32] = a2
	a3 = a13
	a2 = a12
	a0 = 0x4021DA98
	v25 = a0
	a0 = 0x40222168
	call v25 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000044:word32]
	a4 = Mem0[a1 + 0x00000048:word32]
	a13 = a3
	a12 = a2
	a3 = Mem0[a1 + 0x0000003C:word32]
	a2 = Mem0[a1 + 0x00000040:word32]
	a0 = 0x4021DA98
	v26 = a0
	a0 = 0x4022217D
	call v26 (retsize: 0;)
	a0 = a13 + a3
	a2 = a12 + a2
	branch a2 >=u a12 l40222186
	// succ:  l40222184 l40222186
l40222184:
	a0 = a0 + 1
	// succ:  l40222186
l40222186:
	a4 = a14
	a5 = a15
	a12 = Mem0[a1 + 0x00000000:word32]
	SAR = 0x07
	a13 = Mem0[a1 + 0x0000004C:word32]
	a3 = (word32) (a0_a2 >>u SAR)
	a2 = a2 << 23
	a0 = 0x40222020
	v28 = a0
	a0 = 0x4022219E
	call v28 (retsize: 0;)
	v29 = Mem0[a1 + 0x00000060:byte]
	a5 = (uint32) v29
	a6 = a2 << 8
	a6 = a6 >> 24
	a6 = a6 + 1
	a6 = a6 >> 1
	a0 = -a6
	branch a13 != 0x00000000 l402221B2
	// succ:  l402221AF_1 l402221B2
l402221AF_1:
	a0 = a6
	// succ:  l402221B2
l402221B2:
	Mem0[a12 + 0x00000001:byte] = a0
	branch a5 == 0x00000000 l402221DF
	// succ:  l402221B7 l402221DF
l402221B7:
	a2 = 0x4022201C
	a3 = 0x4021BDB8
	a4 = Mem0[a1 + 0x00000004:word32]
	a5 = a0 << 8
	a5 = a5 >> 24
	SAR = a4
	a3 = Mem0[a3 + 0x000003E4:word32]
	a4 = Mem0[a1 + 0x00000008:word32]
	a3 = a0 >> SAR
	a4 = a4 << 8
	a4 = a4 >> 24
	a0 = 0x4021262C
	v30 = a0
	a0 = 0x402221DF
	call v30 (retsize: 0;)
	// succ:  l402221DF
l402221DF:
	a12 = Mem0[a1 + 0x00000028:word32]
	a13 = Mem0[a1 + 0x0000002C:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a15 = Mem0[a1 + 0x00000034:word32]
	a0 = Mem0[a1 + 0x00000024:word32]
	a1 = a1 + 96
	return
	// succ:  sdk_ram_rxiq_get_mis_exit
sdk_ram_rxiq_get_mis_exit:


// sdk_ram_rxiq_cover_mg_mp
// Return size: 0
void sdk_ram_rxiq_cover_mg_mp()
sdk_ram_rxiq_cover_mg_mp_entry:
	// succ:  l402221F0
l402221F0:
	a1 = fp
	a9 = a3
	a1 = a1 - 80
	Mem0[a1 + 0x0000001C:word32] = a7
	Mem0[a1 + 0x00000014:word32] = a4
	Mem0[a1 + 0x00000048:word32] = a6
	Mem0[a1 + 0x00000044:word32] = a5
	Mem0[a1 + 0x00000020:word32] = a0
	Mem0[a1 + 0x00000040:word32] = a2
	Mem0[a1 + 0x00000030:word32] = a15
	Mem0[a1 + 0x00000028:word32] = a13
	Mem0[a1 + 0x0000002C:word32] = a14
	Mem0[a1 + 0x00000024:word32] = a12
	a14 = 0
	a12 = 0
	a13 = 0x4021BCEC
	v15 = Mem0[a1 + 0x00000054:byte]
	a15 = (uint32) v15
	Mem0[a1 + 0x00000018:word32] = a9
	a2 = 2
	a0 = Mem0[a1 + 0x00000040:word32]
	Mem0[a1 + 0x0000004C:word32] = a2
	a5 = Mem0[a1 + 0x00000048:word32]
	a6 = Mem0[a1 + 0x00000044:word32]
	Mem0[a1 + 0x00000010:byte] = a6
	Mem0[a1 + 0x00000011:byte] = a5
	a2 = 1
	SAR = 0x00000020 - a0
	a2 = a2 << SAR
	v17 = Mem0[a1 + 0x00000058:byte]
	a0 = (uint32) v17
	Mem0[a1 + 0x00000038:word32] = a0
	a2 = a2 & 0x0000FFFF
	Mem0[a1 + 0x00000034:word32] = a2
	// succ:  l4022223E
l4022223E:
	a4 = 1
	a5 = a15
	a3 = 0x00000080
	a0 = Mem0[a13 + 0x00000000:word32]
	v18 = (int16) a12
	v19 = (int16) a12
	a2 = v18 *s v19
	a0 = Mem0[a0 + 0x000000F8:word32]
	a2 = a2 + a3
	a2 = a2 >> 8
	a3 = a1 + 16
	Mem0[a1 + 0x0000003C:word32] = a2
	a2 = a14 - a2
	a2 = a2 << 8
	a2 = a2 >> 24
	v20 = a0
	a0 = 0x40222263
	call v20 (retsize: 0;)
	a3 = a1 + 17
	a4 = 0
	a5 = a15
	a0 = Mem0[a13 + 0x00000000:word32]
	a14 = a2
	a0 = Mem0[a0 + 0x000000F8:word32]
	a2 = a12
	v21 = a0
	a0 = 0x40222276
	call v21 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000034:word32]
	a0 = Mem0[a13 + 0x00000000:word32]
	a12 = a2
	a0 = Mem0[a0 + 0x00000034:word32]
	a2 = 1
	v22 = a0
	a0 = 0x40222283
	call v22 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000040:word32]
	a3 = Mem0[a1 + 0x00000018:word32]
	v23 = Mem0[a1 + 0x00000011:byte]
	a5 = (uint32) v23
	a8 = Mem0[a1 + 0x00000044:word32]
	v25 = Mem0[a1 + 0x00000010:byte]
	a6 = (uint32) v25
	a9 = 1
	a6 = a6 - a8
	a8 = Mem0[a1 + 0x00000048:word32]
	branch a6 == 0x00000000 l4022229C
	// succ:  l40222299_1 l4022229C
l40222299_1:
	a6 = a9
	// succ:  l4022229C
l4022229C:
	Mem0[a1 + 0x00000010:byte] = a6
	a5 = a5 - a8
	a8 = Mem0[a1 + 0x00000038:word32]
	branch a5 == 0x00000000 l402222A7
	// succ:  l402222A4_2 l402222A7
l402222A4_2:
	a5 = a9
	// succ:  l402222A7
l402222A7:
	Mem0[a1 + 0x00000011:byte] = a5
	Mem0[a1:word32] = a8
	a0 = Mem0[a13 + 0x00000000:word32]
	a4 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a0 + 0x00000048:word32]
	a7 = a1 + 18
	v26 = a0
	a0 = 0x402222B9
	call v26 (retsize: 0;)
	a2 = Mem0[a1 + 0x0000003C:word32]
	v27 = Mem0[a1 + 0x00000012:byte]
	a0 = (uint32) v27
	a2 = a14 + a2
	a14 = a0 << 8
	v28 = Mem0[a1 + 0x00000013:byte]
	a0 = (uint32) v28
	a14 = a14 >> 24
	a14 = a14 + a2
	a0 = a0 << 8
	a14 = a14 << 8
	a14 = a14 >> 24
	a0 = a0 >> 24
	a12 = a12 - a0
	a0 = Mem0[a13 + 0x00000000:word32]
	a12 = a12 << 8
	a0 = Mem0[a0 + 0x00000030:word32]
	a12 = a12 >> 24
	v29 = a0
	a0 = 0x402222E7
	call v29 (retsize: 0;)
	a3 = Mem0[a1 + 0x0000004C:word32]
	a3 = a3 - 1
	Mem0[a1 + 0x0000004C:word32] = a3
	branch a3 != 0x00000000 l4022223E
	// succ:  l402222F2 l4022223E
l402222F2:
	v30 = Mem0[a1 + 0x00000012:byte]
	a2 = (uint32) v30
	a0 = Mem0[a13 + 0x00000000:word32]
	a2 = a2 << 8
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a2 >> 24
	v31 = a0
	a0 = 0x40222302
	call v31 (retsize: 0;)
	branch a2 >= 5 l40222318
	// succ:  l40222305 l40222318
l40222305:
	v32 = Mem0[a1 + 0x00000013:byte]
	a2 = (uint32) v32
	a0 = Mem0[a13 + 0x00000000:word32]
	a2 = a2 << 8
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a2 >> 24
	v33 = a0
	a0 = 0x40222315
	call v33 (retsize: 0;)
	branch a2 < 5 l40222330
	// succ:  l40222318 l40222330
l40222318:
	a7 = 0x4020CB24
	a4 = 0x40220CB8
	a6 = 0x4021E2D4
	a3 = Mem0[a4 + 0x00000000:word32]
	v34 = Mem0[a6 + 0x00000005:byte]
	a5 = (uint32) v34
	a3 = a3 | a7
	a5 = a5 + 1
	Mem0[a6 + 0x00000005:byte] = a5
	Mem0[a4:word32] = a3
	// succ:  l40222330
l40222330:
	a2 = 15
	a0 = -15
	branch a14 < a0 l40222339
	// succ:  l40222337 l40222339
l40222337:
	a0 = a14
	// succ:  l40222339
l40222339:
	branch a2 < a0 l4022233E
	// succ:  l4022233C l4022233E
l4022233C:
	a2 = a0
	// succ:  l4022233E
l4022233E:
	a0 = -31
	a14 = a2 << 8
	a14 = a14 >> 24
	a2 = 31
	branch a12 < a0 l4022234D
	// succ:  l4022234B l4022234D
l4022234B:
	a0 = a12
	// succ:  l4022234D
l4022234D:
	branch a2 < a0 l40222352
	// succ:  l40222350 l40222352
l40222350:
	a2 = a0
	// succ:  l40222352
l40222352:
	a3 = a1 + 16
	a4 = 1
	a5 = a15
	a12 = a2 << 8
	a0 = Mem0[a13 + 0x00000000:word32]
	a12 = a12 >> 24
	a0 = Mem0[a0 + 0x000000F8:word32]
	a2 = a14
	v35 = a0
	a0 = 0x40222369
	call v35 (retsize: 0;)
	a5 = a15
	a2 = a12
	a0 = Mem0[a13 + 0x00000000:word32]
	a3 = a1 + 17
	a0 = Mem0[a0 + 0x000000F8:word32]
	a4 = 0
	v36 = a0
	a0 = 0x4022237A
	call v36 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000020:word32]
	a13 = Mem0[a1 + 0x00000028:word32]
	a15 = Mem0[a1 + 0x00000030:word32]
	a3 = Mem0[a1 + 0x0000001C:word32]
	a2 = Mem0[a1 + 0x00000050:word32]
	Mem0[a3:byte] = a14
	Mem0[a2:byte] = a12
	a14 = Mem0[a1 + 0x0000002C:word32]
	a12 = Mem0[a1 + 0x00000024:word32]
	a1 = a1 + 80
	return
	// succ:  sdk_ram_rxiq_cover_mg_mp_exit
sdk_ram_rxiq_cover_mg_mp_exit:


// sdk_ram_rfcal_rxiq
// Return size: 0
void sdk_ram_rfcal_rxiq()
sdk_ram_rfcal_rxiq_entry:
	// succ:  l40222394
l40222394:
	a1 = fp
	a9 = a5
	a10 = a3
	a1 = a1 - 80
	Mem0[a1 + 0x00000038:word32] = a13
	Mem0[a1 + 0x0000003C:word32] = a14
	Mem0[a1 + 0x00000020:word32] = a7
	a3 = 0
	a5 = 0
	Mem0[a1 + 0x00000040:word32] = a15
	Mem0[a1 + 0x00000030:word32] = a0
	Mem0[a1 + 0x00000034:word32] = a12
	Mem0[a1 + 0x0000004C:word32] = a6
	Mem0[a1 + 0x00000014:word32] = a2
	Mem0[a1 + 0x00000018:word32] = a4
	a2 = 0x00000077
	a4 = 16
	a6 = 0
	a12 = 0x4021BCEC
	Mem0[a1 + 0x00000044:word32] = a10
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x00000048:word32] = a9
	a0 = Mem0[a0 + 0x00000094:word32]
	a15 = Mem0[a1 + 0x0000004C:word32]
	v16 = a0
	a0 = 0x402223CE
	call v16 (retsize: 0;)
	a3 = 0
	a4 = 15
	a5 = 6
	a6 = 6
	a0 = Mem0[a12 + 0x00000000:word32]
	a14 = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000077
	v17 = a0
	a0 = 0x402223E3
	call v17 (retsize: 0;)
	a3 = 0
	a4 = 24
	a5 = 5
	a6 = 5
	a0 = Mem0[a12 + 0x00000000:word32]
	a13 = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000077
	v18 = a0
	a0 = 0x402223F8
	call v18 (retsize: 0;)
	a3 = 0
	a4 = 24
	a5 = 3
	a6 = 3
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x00000024:word32] = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000077
	v19 = a0
	a0 = 0x4022240D
	call v19 (retsize: 0;)
	a3 = 0
	a4 = 9
	a5 = 7
	a6 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x00000028:word32] = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000077
	v20 = a0
	a0 = 0x40222422
	call v20 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x0000001C:word32] = a2
	a0 = Mem0[a0 + 0x00000040:word32]
	a2 = 1
	v21 = a0
	a0 = 0x4022242E
	call v21 (retsize: 0;)
	Mem0[a1 + 0x00000010:byte] = a14
	Mem0[a1 + 0x00000011:byte] = a13
	branch a15 == 0x00000000 l40222444
	// succ:  l40222436 l40222444
l40222436:
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = a1 + 16
	a0 = Mem0[a0 + 0x00000114:word32]
	a3 = a1 + 17
	v22 = a0
	a0 = 0x40222444
	call v22 (retsize: 0;)
	// succ:  l40222444
l40222444:
	a2 = 0x00000077
	a3 = 0
	a4 = 16
	a5 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 2
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v23 = a0
	a0 = 0x40222459
	call v23 (retsize: 0;)
	Mem0[a1 + 0x0000002C:word32] = a14
	a2 = 0x00000077
	a3 = 0
	a4 = 24
	a5 = 7
	a0 = Mem0[a12 + 0x00000000:word32]
	a7 = 1
	v24 = Mem0[a1 + 0x00000010:byte]
	a9 = (uint32) v24
	v26 = Mem0[a1 + 0x00000011:byte]
	a8 = (uint32) v26
	a9 = a9 - a14
	a8 = a8 - a13
	branch a8 == 0x00000000 l40222477
	// succ:  l40222474_1 l40222477
l40222474_1:
	a8 = a7
	// succ:  l40222477
l40222477:
	branch a9 == 0x00000000 l4022247A
	// succ:  l40222477_2 l4022247A
l40222477_2:
	a9 = a7
	// succ:  l4022247A
l4022247A:
	Mem0[a1 + 0x00000010:byte] = a9
	Mem0[a1 + 0x00000011:byte] = a8
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 7
	v27 = a0
	a0 = 0x40222488
	call v27 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a14 = Mem0[a1 + 0x00000044:word32]
	a0 = Mem0[a0 + 0x00000050:word32]
	a2 = Mem0[a1 + 0x00000018:word32]
	v28 = a0
	a0 = 0x40222495
	call v28 (retsize: 0;)
	a5 = 0
	a6 = 0
	a7 = 0
	a4 = a2
	a3 = 0
	Mem0[a1 + 0x00000008:word32] = a3
	Mem0[a1 + 0x00000004:word32] = a3
	Mem0[a1:word32] = a3
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 1
	a0 = Mem0[a0 + 0x00000068:word32]
	a3 = a14
	v29 = a0
	a0 = 0x402224B1
	call v29 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000014:word32]
	a7 = Mem0[a1 + 0x00000020:word32]
	a6 = a1 + 19
	v30 = Mem0[a1 + 0x00000011:byte]
	a4 = (uint32) v30
	a5 = Mem0[a1 + 0x00000024:word32]
	v31 = Mem0[a1 + 0x00000010:byte]
	a3 = (uint32) v31
	a14 = a5
	Mem0[a1 + 0x00000004:word32] = a15
	Mem0[a1:word32] = a6
	Mem0[a1 + 0x00000008:word32] = a7
	a7 = a1 + 18
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = Mem0[a1 + 0x00000028:word32]
	a0 = Mem0[a0 + 0x0000010C:word32]
	a15 = a6
	v32 = a0
	a0 = 0x402224D7
	call v32 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000006C:word32]
	a2 = 1
	v33 = a0
	a0 = 0x402224E1
	call v33 (retsize: 0;)
	a7 = Mem0[a1 + 0x0000002C:word32]
	a2 = 0x00000077
	a3 = 0
	a4 = 16
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 0
	v34 = a0
	a0 = 0x402224F6
	call v34 (retsize: 0;)
	a7 = a13
	a2 = 0x00000077
	a3 = 0
	a4 = 15
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 6
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 6
	v35 = a0
	a0 = 0x4022250B
	call v35 (retsize: 0;)
	a7 = a14
	a2 = 0x00000077
	a3 = 0
	a4 = 24
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 5
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 5
	v36 = a0
	a0 = 0x40222520
	call v36 (retsize: 0;)
	a7 = a15
	a2 = 0x00000077
	a3 = 0
	a4 = 24
	a5 = 3
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 3
	a0 = Mem0[a0 + 0x0000009C:word32]
	a13 = Mem0[a1 + 0x0000001C:word32]
	v37 = a0
	a0 = 0x40222537
	call v37 (retsize: 0;)
	a7 = a13
	a2 = 0x00000077
	a3 = 0
	a4 = 9
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 7
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 0
	v38 = a0
	a0 = 0x4022254C
	call v38 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 24
	a5 = 7
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 7
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v39 = a0
	a0 = 0x40222561
	call v39 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 16
	a5 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 2
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v40 = a0
	a0 = 0x40222576
	call v40 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a13 = Mem0[a1 + 0x00000048:word32]
	a0 = Mem0[a0 + 0x00000040:word32]
	a2 = 0
	v41 = a0
	a0 = 0x40222583
	call v41 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000030:word32]
	a12 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x0000003C:word32]
	v42 = Mem0[a1 + 0x00000012:byte]
	a3 = (uint32) v42
	a15 = Mem0[a1 + 0x00000040:word32]
	Mem0[a13:byte] = a3
	v43 = Mem0[a1 + 0x00000013:byte]
	a2 = (uint32) v43
	Mem0[a13 + 0x00000001:byte] = a2
	a13 = Mem0[a1 + 0x00000038:word32]
	a1 = a1 + 80
	return
	// succ:  sdk_ram_rfcal_rxiq_exit
sdk_ram_rfcal_rxiq_exit:


// sdk_dpd_scale_set
// Return size: 0
void sdk_dpd_scale_set()
sdk_dpd_scale_set_entry:
	// succ:  l402225A0
l402225A0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a5 = 0x4021BDB8
	a2 = 0x00000077
	a3 = 0
	a4 = 8
	a5 = Mem0[a5 + 0x00000360:word32]
	a6 = 0x4021C30C
	a0 = 0x4021BCEC
	v9 = Mem0[a6 + 0x0000006F:byte]
	a6 = (uint32) v9
	a0 = Mem0[a0 + 0x00000000:word32]
	a5 = -a5
	a5 = a5 << 8
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = a5 >> 24
	a6 = a6 << 8
	a6 = a6 >> 24
	a5 = a5 - a6
	a5 = a5 - 24
	a5 = a5 & 0x000000FF
	v10 = a0
	a0 = 0x402225DE
	call v10 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_dpd_scale_set_exit
sdk_dpd_scale_set_exit:


// sdk_dpd_mem_write
// Return size: 0
void sdk_dpd_mem_write()
sdk_dpd_mem_write_entry:
	// succ:  l402225E8
l402225E8:
	a1 = fp
	a5 = a3
	a1 = a1 - 16
	a3 = 0
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	a13 = a4
	a12 = 0x4021BCEC
	a14 = a2
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 0x00000077
	a0 = Mem0[a0 + 0x00000098:word32]
	a4 = 27
	v11 = a0
	a0 = 0x4022260B
	call v11 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 5
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = a14 >>u 0x00000004 & 0x000000FF
	v12 = a0
	a0 = 0x4022261D
	call v12 (retsize: 0;)
	a5 = a14 & 0x0000000F
	a2 = 0x00000077
	a0 = Mem0[a12 + 0x00000000:word32]
	a3 = 0
	a0 = Mem0[a0 + 0x00000098:word32]
	a4 = 6
	v13 = a0
	a0 = 0x4022262F
	call v13 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 15
	a5 = 4
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = a13 | a5
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = a5 & 0x000000FF
	v14 = a0
	a0 = 0x40222646
	call v14 (retsize: 0;)
	a5 = a13
	a2 = 0x00000077
	a0 = Mem0[a12 + 0x00000000:word32]
	a3 = 0
	a0 = Mem0[a0 + 0x00000098:word32]
	a4 = 15
	v15 = a0
	a0 = 0x40222657
	call v15 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_dpd_mem_write_exit
sdk_dpd_mem_write_exit:


// sdk_dpd_init
// Return size: 0
void sdk_dpd_init()
sdk_dpd_init_entry:
	// succ:  l40222670
l40222670:
	a1 = fp
	a3 = 0x000000F0
	a1 = a1 - a3
	Mem0[a1 + 0x000000AC:word32] = a0
	Mem0[a1 + 0x000000B8:word32] = a14
	Mem0[a1 + 0x000000B4:word32] = a13
	Mem0[a1 + 0x000000BC:word32] = a15
	Mem0[a1 + 0x000000C0:word32] = a2
	Mem0[a1 + 0x000000B0:word32] = a12
	a12 = 0x4021BCEC
	a2 = 0x4021319C
	a15 = 0x4021C30C
	a0 = Mem0[a15 + 0x00000000:word32]
	a2 = Mem0[a2 + 0x00000200:word32]
	a0 = a0 >>u 0x0000001C & 0x00000001
	branch a0 != 0x00000000 l40222904
	// succ:  l402226A0 l40222904
l402226A0:
	a2 = 0x00000006
	a3 = a1
	a0 = 0x402226A8
	call fn4031E064 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 15
	a5 = 1
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 1
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v14 = a0
	a0 = 0x402226BD
	call v14 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a4 = 10
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 5
	a0 = Mem0[a0 + 0x00000094:word32]
	a6 = 4
	v15 = a0
	a0 = 0x402226D0
	call v15 (retsize: 0;)
	a3 = 2
	a4 = 10
	a5 = 5
	a6 = 4
	a7 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x000000A8:word32] = a2
	a0 = Mem0[a0 + 0x0000009C:word32]
	a2 = 0x0000006B
	v16 = a0
	a0 = 0x402226E8
	call v16 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000A0:word32]
	v17 = a0
	a0 = 0x402226F0
	call v17 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C0:word32]
	a2 = 1
	v18 = a0
	a0 = 0x402226FA
	call v18 (retsize: 0;)
	a2 = 0x40220524
	v19 = Mem0[a2 + 0x00000000:uint16]
	a2 = (uint32) v19
	a0 = 0x40222703
	call fn4031BE78 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000018:word32]
	a2 = 0
	v20 = a0
	a0 = 0x4022270C
	call v20 (retsize: 0;)
	a13 = 0x4021BDB8
	a14 = a1 + 112
	a4 = 95
	a13 = Mem0[a13 + 0x00000360:word32]
	a2 = 48
	a8 = 0
	a9 = 0
	a12 = a1 + 0xFFFFFF00
	a12 = a12 + 16
	Mem0[a1 + 0x000000C8:word32] = a9
	Mem0[a1 + 0x000000CC:word32] = a8
	Mem0[a1 + 0x000000D4:word32] = a2
	a13 = -a13
	Mem0[a15 + 0x0000006F:byte] = a13
	a13 = a13 + 31
	a13 = a13 << 8
	a13 = a13 >> 24
	Mem0[a1 + 0x000000D0:word32] = a13
	a13 = 0
	// succ:  l40222743
l40222743:
	a3 = Mem0[a1 + 0x000000D0:word32]
	a0 = a4
	a3 = a3 - a13
	a3 = a3 << 8
	a3 = a3 >> 24
	branch a4 < a3 l40222756
	// succ:  l40222754 l40222756
l40222754:
	a0 = a3
	// succ:  l40222756
l40222756:
	a2 = 0
	branch a0 < 0x00000000 l4022275B
	// succ:  l40222758_1 l4022275B
l40222758_1:
	a2 = a0
	// succ:  l4022275B
l4022275B:
	a2 = a2 << 8
	a2 = a2 >> 24
	Mem0[a1 + 0x000000D8:word32] = a2
	a0 = 0x40222767
	call fn40320994 (retsize: 0;)
	a4 = a2
	a0 = Mem0[a1 + 0x000000D0:word32]
	a2 = Mem0[a1 + 0x000000D8:word32]
	a15 = a12 + a13 * 0x00000002
	a0 = a0 - a2
	a0 = a0 << 31
	branch a13 >=u 0x00000004 l40222794
	// succ:  l4022277B l40222794
l4022277B:
	Mem0[a15 + 0x00000100:word16] = a4
	a3 = Mem0[a1 + 0x000000CC:word32]
	a5 = a4 - a0
	a5 = a3 + a5
	a5 = a5 << 16
	a3 = a5 >> 16
	Mem0[a1 + 0x000000CC:word32] = a3
	a5 = a4
	goto l402227B6
	// succ:  l402227B6
l40222794:
	branch a13 != 4 l402227A8
	// succ:  l40222797 l402227A8
l40222797:
	a6 = Mem0[a1 + 0x000000CC:word32]
	a7 = a6 + 2
	a7 = a7 >> 2
	a7 = a7 << 16
	a6 = a7 >> 16
	Mem0[a1 + 0x000000CC:word32] = a6
	// succ:  l402227A8
l402227A8:
	a5 = Mem0[a1 + 0x000000CC:word32]
	a5 = a0 + a5
	a5 = a5 << 16
	a5 = a5 >> 16
	Mem0[a15 + 0x00000100:word16] = a5
	// succ:  l402227B6
l402227B6:
	a6 = Mem0[a1 + 0x000000C8:word32]
	a0 = a5 - a4
	branch a6 != 0x00000000 l402227D1
	// succ:  l402227BE l402227D1
l402227BE:
	a6 = a0 << 16
	a6 = a6 >> 16
	branch a6 < 2 l402227D1
	// succ:  l402227C7 l402227D1
l402227C7:
	a7 = 1
	a8 = a6 - 1
	Mem0[a1 + 0x000000C4:word32] = a8
	Mem0[a1 + 0x000000C8:word32] = a7
	// succ:  l402227D1
l402227D1:
	a7 = Mem0[a1 + 0x000000C0:word32]
	a2 = 0
	a6 = Mem0[a1 + 0x000000C4:word32]
	a9 = 8
	a6 = a0 - a6
	a0 = a9
	a6 = a6 << 16
	a6 = a6 >> 16
	branch a9 < a6 l402227EB
	// succ:  l402227E9 l402227EB
l402227E9:
	a0 = a6
	// succ:  l402227EB
l402227EB:
	branch a0 < 0x00000000 l402227EE
	// succ:  l402227EB_1 l402227EE
l402227EB_1:
	a2 = a0
	// succ:  l402227EE
l402227EE:
	a0 = a2 << 16
	a0 = a0 >> 16
	Mem0[a1 + 0x000000A4:word32] = a0
	branch a7 == 0x00000000 l4022280A
	// succ:  l402227F9 l4022280A
l402227F9:
	a2 = 0x40222664
	a3 = Mem0[a1 + 0x000000D8:word32]
	a6 = a0
	a0 = 0x4021262C
	v25 = a0
	a0 = 0x40222807
	call v25 (retsize: 0;)
	a0 = Mem0[a1 + 0x000000A4:word32]
	// succ:  l4022280A
l4022280A:
	Mem0[a15 + 0x00000100:word16] = a0
	a3 = 0x40222668
	a2 = Mem0[a1 + 0x000000D8:word32]
	a4 = 95
	a2 = a2 + a3
	a3 = a13 + a14
	v26 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v26
	a13 = a13 + 1
	Mem0[a3:byte] = a2
	a3 = Mem0[a1 + 0x000000D4:word32]
	a13 = a13 & 0x0000FFFF
	a3 = a3 - 1
	Mem0[a1 + 0x000000D4:word32] = a3
	branch a3 != 0x00000000 l40222743
	// succ:  l4022282F l40222743
l4022282F:
	goto l402229DE
	// succ:  l402229DE
l40222904:
	a2 = 0x00000077
	a3 = 0
	a4 = 15
	a5 = 1
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 1
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v23 = a0
	a0 = 0x40222919
	call v23 (retsize: 0;)
	a0 = 0x4022291C
	call fn403225A0 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 27
	a5 = 7
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0x000000FF
	v24 = a0
	a0 = 0x40222932
	call v24 (retsize: 0;)
	a12 = Mem0[a1 + 0x000000B0:word32]
	a13 = Mem0[a1 + 0x000000B4:word32]
	a14 = Mem0[a1 + 0x000000B8:word32]
	a15 = Mem0[a1 + 0x000000BC:word32]
	a2 = 0x000000F0
	a0 = Mem0[a1 + 0x000000AC:word32]
	a1 = a1 + a2
	return
	// succ:  sdk_dpd_init_exit
l402229DE:
	a15 = 0x4021BCEC
	a0 = Mem0[a15 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C8:word32]
	v27 = a0
	a0 = 0x402229E9
	call v27 (retsize: 0;)
	a0 = Mem0[a15 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C4:word32]
	v28 = a0
	a0 = 0x402229F1
	call v28 (retsize: 0;)
	a0 = Mem0[a15 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000BC:word32]
	v29 = a0
	a0 = 0x402229F9
	call v29 (retsize: 0;)
	a13 = 47
	// succ:  l402229FB
l402229FB:
	a15 = a12 + a13 * 0x00000002
	v30 = Mem0[a15 + 0x000000FE:int16]
	a2 = (int32) v30
	a13 = a13 - 1
	v31 = Mem0[a15 + 0x00000100:int16]
	a5 = (int32) v31
	a13 = a13 & 0x0000FFFF
	branch a5 >= a2 l40222A0F
	// succ:  l40222A0C l40222A0F
l40222A0C:
	Mem0[a15 + 0x000000FE:word16] = a5
	// succ:  l40222A0F
l40222A0F:
	branch a13 != 0x00000000 l402229FB
	// succ:  l40222A12 l402229FB
l40222A12:
	a0 = 48
	a15 = 0x4021BCEC
	a13 = 0
	a2 = 0x4022266C
	// succ:  l40262832
l40262832:
sdk_dpd_init_exit:


// sdk_chip_v6_set_sense
// Return size: 0
void sdk_chip_v6_set_sense()
sdk_chip_v6_set_sense_entry:
	// succ:  l40222A20
l40222A20:
	a1 = fp
	return
	// succ:  sdk_chip_v6_set_sense_exit
sdk_chip_v6_set_sense_exit:


// sdk_chip_v6_get_sense
// Return size: 0
void sdk_chip_v6_get_sense()
sdk_chip_v6_get_sense_entry:
	// succ:  l40222A24
l40222A24:
	a1 = fp
	return
	// succ:  sdk_chip_v6_get_sense_exit
sdk_chip_v6_get_sense_exit:


// sdk_chip_v6_unset_chanfreq
// Return size: 0
void sdk_chip_v6_unset_chanfreq()
sdk_chip_v6_unset_chanfreq_entry:
	// succ:  l40222A28
l40222A28:
	a1 = fp
	a2 = 0
	return
	// succ:  sdk_chip_v6_unset_chanfreq_exit
sdk_chip_v6_unset_chanfreq_exit:


// sdk_data_collect
// Return size: 0
void sdk_data_collect()
sdk_data_collect_entry:
	// succ:  l40222A34
l40222A34:
	a1 = fp
	a2 = 0x40222A2C
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x00000018:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a0
	a0 = 0x4021262C
	v7 = a0
	a0 = 0x40222A47
	call v7 (retsize: 0;)
	a2 = 0x4021C30C
	a3 = 0x40222A30
	a4 = 0
	a0 = 0x40222A52
	call fn4031D158 (retsize: 0;)
	a3 = 1
	a4 = 5
	a5 = 7
	a13 = 0x4021BCEC
	a6 = 0
	a0 = Mem0[a13 + 0x00000000:word32]
	a12 = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000062
	v12 = a0
	a0 = 0x40222A6A
	call v12 (retsize: 0;)
	a3 = 1
	a4 = 6
	a5 = 4
	a6 = 0
	a0 = Mem0[a13 + 0x00000000:word32]
	Mem0[a1 + 0x00000008:word32] = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000062
	v13 = a0
	a0 = 0x40222A7F
	call v13 (retsize: 0;)
	a3 = 4
	a4 = 3
	a5 = 4
	a6 = 0
	a0 = Mem0[a13 + 0x00000000:word32]
	Mem0[a1 + 0x0000000C:word32] = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000067
	v14 = a0
	a0 = 0x40222A94
	call v14 (retsize: 0;)
	a3 = 1
	a4 = 2
	a5 = 4
	a6 = 0
	a0 = Mem0[a13 + 0x00000000:word32]
	a13 = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000061
	v15 = a0
	a0 = 0x40222AA9
	call v15 (retsize: 0;)
	a4 = a2 << 8
	a3 = a13 << 16
	a2 = Mem0[a1 + 0x00000008:word32]
	a3 = a3 | a4
	a4 = Mem0[a1 + 0x0000000C:word32]
	a2 = a2 & 0x000000FF
	a4 = a4 & 0x000000FF
	a4 = a4 << 24
	a2 = a2 | a4
	a4 = a12
	a2 = a2 | a3
	Mem0[a1:word32] = a2
	a3 = a1
	a2 = a1
	a0 = 0x40222AD0
	call fn4031D158 (retsize: 0;)
	a5 = 0x40212EE8
	a3 = a1 + 4
	a12 = a12 + a2
	a5 = Mem0[a5 + 0x000003FC:word32]
	Mem0[a1 + 0x00000004:word32] = a5
	a2 = a1 + 4
	a4 = a12
	a0 = 0x40222AE6
	call fn4031D158 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000010:word32]
	a2 = a2 + a12
	a13 = Mem0[a1 + 0x00000018:word32]
	a12 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_data_collect_exit
sdk_data_collect_exit:


// sdk_operation_test
// Return size: 0
void sdk_operation_test()
sdk_operation_test_entry:
	// succ:  l40222B08
l40222B08:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1:word32] = a0
	a2 = 0x4021319C
	a3 = 0x40222AF8
	a4 = 0x000004D2
	a2 = Mem0[a2 + 0x00000200:word32]
	a5 = 0x40222AF4
	a4 = a2 + a4
	a4 = a4 ^ a5
	a2 = a2 * a4
	a2 = a2 * a3
	a3 = 0x40222AFC
	a0 = 0x40204388
	v10 = a0
	a0 = 0x40222B37
	call v10 (retsize: 0;)
	a3 = 0x40222B00
	a2 = a2 * a3
	a3 = 0x40222B04
	a0 = 0x40204388
	v11 = a0
	a0 = 0x40222B46
	call v11 (retsize: 0;)
	a12 = 0
	a13 = 0x000003E8
	// succ:  l40222B4B
l40222B4B:
	a3 = 0x000003E7
	a0 = 0x40204388
	v12 = a0
	a0 = 0x40222B54
	call v12 (retsize: 0;)
	a12 = a12 + 1
	a4 = 0x00000460
	a2 = a2 * a4
	branch a12 != a13 l40222B4B
	// succ:  l40222B5F l40222B4B
l40222B5F:
	a12 = 0
	// succ:  l40222B61
l40222B61:
	a3 = 0x000003D9
	a5 = 0x0000035C
	a2 = a2 * a5
	a0 = 0x40204388
	v13 = a0
	a0 = 0x40222B70
	call v13 (retsize: 0;)
	a12 = a12 + 1
	branch a12 != a13 l40222B61
	// succ:  l40222B75 l40222B61
l40222B75:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_operation_test_exit
sdk_operation_test_exit:


// sdk_slop_wdt_feed
// Return size: 0
void sdk_slop_wdt_feed()
sdk_slop_wdt_feed_entry:
	// succ:  l40222B80
l40222B80:
	a1 = fp
	a2 = 0x00000073
	a3 = 0x402125CC
	Mem0[a3 + 0x00000314:word32] = a2
	return
	// succ:  sdk_slop_wdt_feed_exit
sdk_slop_wdt_feed_exit:


// sdk_slop_test
// Return size: 0
void sdk_slop_test()
sdk_slop_test_entry:
	// succ:  l40222B94
l40222B94:
	a1 = fp
	a2 = 0x40222B90
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1:word32] = a0
	a0 = 0x4021262C
	v9 = a0
	a0 = 0x40222BAB
	call v9 (retsize: 0;)
	a10 = 1
	a9 = 0x4021287C
	a8 = Mem0[a9 + 0x00000214:word32]
	a8 = a8 | a10
	a2 = 0x0000006A
	a3 = 2
	a4 = 8
	a5 = 4
	a0 = 0x4021BCEC
	a6 = 0
	a0 = Mem0[a0 + 0x00000000:word32]
	a7 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	Mem0[a9 + 0x00000214:word32] = a8
	v18 = a0
	a0 = 0x40222BD7
	call v18 (retsize: 0;)
	a12 = 0x4021319C
	a11 = Mem0[a12 + 0x00000200:word32]
	a2 = 14
	a0 = 0x40222BE5
	call fn4031BC58 (retsize: 0;)
	a13 = 0
	a14 = 0x402125CC
	a15 = 0x000000C8
	// succ:  l40222BED
l40222BED:
	a0 = 0x40222BF0
	call fn40322B80 (retsize: 0;)
	a0 = 0x40222BF3
	call fn40322B08 (retsize: 0;)
	Mem0[a14 + 0x00000138:word32] = a2
	a2 = 2
	a0 = 0x40222BFE
	call sdk_pm_set_sleep_mode (retsize: 0;)
	a2 = 8
	a3 = 0
	a0 = 0x40222C05
	call sdk_pm_wakeup_opt (retsize: 0;)
	a2 = 0x000000AA
	a0 = 0x40222C0B
	call sdk_pm_set_sleep_cycles (retsize: 0;)
	a2 = 2
	a0 = Mem0[a12 + 0x00000200:word32]
	a0 = 0x40222C16
	call sdk_pm_goto_sleep (retsize: 0;)
	a2 = 2
	a0 = 0x40222C1B
	call sdk_pm_wait4wakeup (retsize: 0;)
	a2 = 2
	a3 = 0
	a0 = 0x40222C22
	call sdk_pm_wakeup_init (retsize: 0;)
	a3 = Mem0[a12 + 0x00000200:word32]
	a13 = a13 + 1
	branch a13 != a15 l40222BED
	// succ:  l40222C2D l40222BED
l40222C2D:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_slop_test_exit
sdk_slop_test_exit:


// sdk_wd_reset_cnt
// Return size: 0
void sdk_wd_reset_cnt()
sdk_wd_reset_cnt_entry:
	// succ:  l40222C40
l40222C40:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40222C48
	call fn40303F88 (retsize: 0;)
	a0 = 0x40212EE8
	branch a2 != 4 l40222C6B
	// succ:  l40222C4E l40222C6B
l40222C4E:
	a3 = Mem0[a0 + 0x000003FC:word32]
	a3 = a3 + 1
	a2 = 0x40222C3C
	Mem0[a0 + 0x000003FC:word32] = a3
	a0 = 0x4021262C
	v6 = a0
	a0 = 0x40222C65
	call v6 (retsize: 0;)
	goto l40222C82
	// succ:  l40222C82
l40222C6B:
	branch a2 == 2 l40222C71
	// succ:  l40222C6E l40222C71
l40222C6E:
	branch a2 != 1 l40222C82
	// succ:  l40222C71 l40222C82
l40222C71:
	a3 = 0
	a2 = 0x40222C3C
	Mem0[a0 + 0x000003FC:word32] = a3
	a0 = 0x4021262C
	v7 = a0
	a0 = 0x40222C82
	call v7 (retsize: 0;)
	// succ:  l40222C82
l40222C82:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wd_reset_cnt_exit
sdk_wd_reset_cnt_exit:


// sdk_pm_usec2rtc
// Return size: 0
void sdk_pm_usec2rtc()
sdk_pm_usec2rtc_entry:
	// succ:  l40222C8C
l40222C8C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a3 != 0x00000000 l40222C9E
	// succ:  l40222C93 l40222C9E
l40222C93:
	a3 = 5
	a0 = 0x40204388
	v5 = a0
	a0 = 0x40222C9B
	call v5 (retsize: 0;)
	goto l40222CB9
	// succ:  l40222CB9
l40222C9E:
	a0 = 0x40204508
	branch a0 >=u a2 l40222CB0
	// succ:  l40222CA4 l40222CB0
l40222CA4:
	a0 = 0x40204388
	v7 = a0
	a0 = 0x40222CAA
	call v7 (retsize: 0;)
	a2 = a2 << 20
	goto l40222CB9
	// succ:  l40222CB9
l40222CB0:
	a2 = a2 << 20
	a0 = 0x40204388
	v8 = a0
	a0 = 0x40222CB9
	call v8 (retsize: 0;)
	// succ:  l40222CB9
l40222CB9:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_usec2rtc_exit
sdk_pm_usec2rtc_exit:


// sdk_pm_rtc2usec
// Return size: 0
void sdk_pm_rtc2usec()
sdk_pm_rtc2usec_entry:
	// succ:  l40222CC0
l40222CC0:
	a1 = fp
	a2 = a2 * a3
	a2 = a2 >>u 12
	return
	// succ:  sdk_pm_rtc2usec_exit
sdk_pm_rtc2usec_exit:


// sdk_pm_set_sleep_cycles
// Return size: 0
void sdk_pm_set_sleep_cycles()
sdk_pm_set_sleep_cycles_entry:
	// succ:  l40222CCC
l40222CCC:
	a1 = fp
	a5 = 0x402125CC
	a4 = Mem0[a5 + 0x0000011C:word32]
	a4 = a2 + a4
	a6 = 0x40222CC8
	Mem0[a5 + 0x00000104:word32] = a4
	a3 = 0x4020C700
	a5 = 1
	branch a3 <u a2 l40222CEA
	// succ:  l40222CE8 l40222CEA
l40222CE8:
	a5 = 0
	// succ:  l40222CEA
l40222CEA:
	Mem0[a6:byte] = a5
	return
	// succ:  sdk_pm_set_sleep_cycles_exit
sdk_pm_set_sleep_cycles_exit:


// sdk_pm_sleep_opt
// Return size: 0
void sdk_pm_sleep_opt()
sdk_pm_sleep_opt_entry:
	// succ:  l40222CF4
l40222CF4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021C308
	Mem0[a1 + 0x00000004:word32] = a12
	v5 = Mem0[a0 + 0x00000039:byte]
	a0 = (uint32) v5
	a12 = 0x402125CC
	branch a0 != 0x00000000 l40222D1A
	// succ:  l40222D06 l40222D1A
l40222D06:
	a5 = -4
	a3 = Mem0[a12 + 0x00000164:word32]
	a3 = a3 & a5
	Mem0[a12 + 0x00000164:word32] = a3
	goto l40222D3A
	// succ:  l40222D3A
l40222D1A:
	branch a0 != 1 l40222D25
	// succ:  l40222D1D l40222D25
l40222D1D:
	a6 = 32
	a4 = a4 | a6
	goto l40222D3A
	// succ:  l40222D3A
l40222D25:
	branch a0 != 2 l40222D3A
	// succ:  l40222D28 l40222D3A
l40222D28:
	a8 = 0x00000003
	a7 = Mem0[a12 + 0x00000164:word32]
	a7 = a7 | a8
	Mem0[a12 + 0x00000164:word32] = a7
	// succ:  l40222D3A
l40222D3A:
	a3 = 0x00000000
	a0 = 0x4021BCEC
	Mem0[a12 + 0x00000140:word32] = a3
	Mem0[a12 + 0x00000144:word32] = a2
	a2 = 0x00000077
	a5 = 0x00000005
	a6 = 5
	a7 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a12 + 0x00000100:word32] = a4
	a0 = Mem0[a0 + 0x0000009C:word32]
	a4 = 28
	v12 = a0
	a0 = 0x40222D66
	call v12 (retsize: 0;)
	a5 = 0x4021D780
	a4 = 0x402138F8
	a3 = 0x4021BDB8
	a2 = Mem0[a3 + 0x000003C8:word32]
	a2 = a2 & a5
	a2 = a2 | a4
	Mem0[a3 + 0x000003C8:word32] = a2
	a2 = 1
	a0 = 0x40222D86
	call fn40303F28 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 28
	a0 = 0x4021BCEC
	a5 = 5
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = 5
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v13 = a0
	a0 = 0x40222D9E
	call v13 (retsize: 0;)
	a5 = 0x4021CDB0
	a4 = 0x4021C17C
	a3 = 0x4021BDB8
	a2 = Mem0[a3 + 0x000003E8:word32]
	a2 = a2 & a5
	a2 = a2 | a4
	a4 = 3
	a5 = 7
	a6 = 4
	a0 = 0x4021BCEC
	a7 = 0
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a3 + 0x000003E8:word32] = a2
	a2 = 0x00000062
	a0 = Mem0[a0 + 0x0000009C:word32]
	a3 = 1
	v14 = a0
	a0 = 0x40222DD1
	call v14 (retsize: 0;)
	a6 = 0x40222CF0
	Mem0[a12 + 0x00000110:word32] = a6
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_sleep_opt_exit
sdk_pm_sleep_opt_exit:


// sdk_pm_wakeup_opt
// Return size: 0
void sdk_pm_wakeup_opt()
sdk_pm_wakeup_opt_entry:
	// succ:  l40222DE4
l40222DE4:
	a1 = fp
	a8 = 0xFFFFFFC0
	a5 = 0x402125CC
	a7 = Mem0[a5 + 0x00000118:word32]
	a7 = a7 & a8
	a7 = a7 | a2
	Mem0[a5 + 0x00000118:word32] = a7
	a6 = -2
	a4 = Mem0[a5 + 0x000001A8:word32]
	a4 = a4 & a6
	a4 = a4 | a3
	Mem0[a5 + 0x000001A8:word32] = a4
	return
	// succ:  sdk_pm_wakeup_opt_exit
sdk_pm_wakeup_opt_exit:


// sdk_get_chip_version
// Return size: 0
void sdk_get_chip_version()
sdk_get_chip_version_entry:
	// succ:  l40222E1C
l40222E1C:
	a1 = fp
	a6 = 0x40222E14
	a2 = Mem0[a6 + 0x00000000:word32]
	branch a2 != -1 l40222E4A
	// succ:  l40222E24 l40222E4A
l40222E24:
	a5 = 0x40204624
	a4 = 0x40222E18
	a2 = 0x4021287C
	a3 = Mem0[a2 + 0x00000258:word32]
	a3 = a3 & a5
	a3 = a3 >>u 15
	branch a3 != 1 l40222E4C
	// succ:  l40222E3C l40222E4C
l40222E3C:
	a2 = Mem0[a2 + 0x00000254:word32]
	a2 = a2 & a4
	a2 = a2 >>u 0x00000018 & 0x000000FF
	Mem0[a6:word32] = a2
	// succ:  l40222E4A
l40222E4A:
	return
	// succ:  sdk_get_chip_version_exit
l40222E4C:
	a2 = Mem0[a2 + 0x0000025C:word32]
	// succ:  l40262E42
l40262E42:
sdk_get_chip_version_exit:


// sdk_pm_sleep_opt_bb_off
// Return size: 0
void sdk_pm_sleep_opt_bb_off()
sdk_pm_sleep_opt_bb_off_entry:
	// succ:  l40222E5C
l40222E5C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40222E64
	call fn40322E1C (retsize: 0;)
	branch a2 == 2 l40222E74
	// succ:  l40222E67 l40222E74
l40222E67:
	a2 = 4
	a3 = 0
	a4 = 0x40222E58
	a0 = 0x40222E71
	call fn40322CF4 (retsize: 0;)
	goto l40222E94
	// succ:  l40222E94
l40222E74:
	a0 = 0x4021C308
	v7 = Mem0[a0 + 0x00000065:byte]
	a0 = (uint32) v7
	branch a0 != 2 l40222E8A
	// succ:  l40222E7D l40222E8A
l40222E7D:
	a2 = 4
	a3 = 0
	a4 = 0x40222E58
	a0 = 0x40222E87
	call fn40322CF4 (retsize: 0;)
	goto l40222E94
	// succ:  l40222E94
l40222E8A:
	a2 = 4
	a3 = 0
	a4 = 0x4021C17C
	a0 = 0x40222E94
	call fn40322CF4 (retsize: 0;)
	// succ:  l40222E94
l40222E94:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_sleep_opt_bb_off_exit
sdk_pm_sleep_opt_bb_off_exit:


// sdk_pm_sleep_opt_bb_on
// Return size: 0
void sdk_pm_sleep_opt_bb_on()
sdk_pm_sleep_opt_bb_on_entry:
	// succ:  l40222E9C
l40222E9C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40222EA4
	call fn40322E1C (retsize: 0;)
	branch a2 == 2 l40222EB4
	// succ:  l40222EA7 l40222EB4
l40222EA7:
	a2 = 0
	a3 = 0
	a4 = 0x40222E58
	a0 = 0x40222EB1
	call fn40322CF4 (retsize: 0;)
	goto l40222ED4
	// succ:  l40222ED4
l40222EB4:
	a0 = 0x4021C308
	v7 = Mem0[a0 + 0x00000065:byte]
	a0 = (uint32) v7
	branch a0 != 2 l40222ECA
	// succ:  l40222EBD l40222ECA
l40222EBD:
	a2 = 0
	a3 = 0
	a4 = 0x40222E58
	a0 = 0x40222EC7
	call fn40322CF4 (retsize: 0;)
	goto l40222ED4
	// succ:  l40222ED4
l40222ECA:
	a2 = 0
	a3 = 0
	a4 = 0x4021C17C
	a0 = 0x40222ED4
	call fn40322CF4 (retsize: 0;)
	// succ:  l40222ED4
l40222ED4:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_sleep_opt_bb_on_exit
sdk_pm_sleep_opt_bb_on_exit:


// sdk_pm_set_pll_xtal_wait_time
// Return size: 0
void sdk_pm_set_pll_xtal_wait_time()
sdk_pm_set_pll_xtal_wait_time_entry:
	// succ:  l40222EE8
l40222EE8:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40222EF0
	call fn40322E1C (retsize: 0;)
	a0 = 0x402125CC
	branch a2 == 1 l40222F22
	// succ:  l40222EF6 l40222F22
l40222EF6:
	branch a2 == 0x00000000 l40222F22
	// succ:  l40222EF8 l40222F22
l40222EF8:
	a2 = 0x4021C308
	v6 = Mem0[a2 + 0x00000001:byte]
	a3 = (uint32) v6
	v8 = Mem0[a2 + 0x00000065:byte]
	a4 = (uint32) v8
	branch a3 == 0x00000000 l40222F16
	// succ:  l40222F03 l40222F16
l40222F03:
	branch a4 == 2 l40222F16
	// succ:  l40222F06 l40222F16
l40222F06:
	a5 = 0x40222EDC
	Mem0[a0 + 0x0000010C:word32] = a5
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_set_pll_xtal_wait_time_exit
l40222F16:
	a6 = 0x40222EE0
	Mem0[a0 + 0x0000010C:word32] = a6
	goto l40262F0F
	// succ:  l40262F0F
l40222F22:
	a7 = 0x40222EE4
	Mem0[a0 + 0x0000010C:word32] = a7
	// succ:  l40262F0F
l40262F0F:
sdk_pm_set_pll_xtal_wait_time_exit:


// sdk_pm_prepare_to_sleep
// Return size: 0
void sdk_pm_prepare_to_sleep()
sdk_pm_prepare_to_sleep_entry:
	// succ:  l40222F30
l40222F30:
	a1 = fp
	a3 = 0x4021C308
	v5 = Mem0[a3 + 0x00000039:byte]
	a2 = (uint32) v5
	v6 = Mem0[a3 + 0x0000003A:byte]
	a3 = (uint32) v6
	branch a2 == 2 l40222F4D
	// succ:  l40222F3C l40222F4D
l40222F3C:
	branch a3 == 1 l40222F4D
	// succ:  l40222F3F l40222F4D
l40222F3F:
	branch a3 == 3 l40222F4D
	// succ:  l40222F42 l40222F4D
l40222F42:
	a3 = 2
	a4 = 0x402125CC
	Mem0[a4 + 0x000001A0:word32] = a3
	// succ:  l40222F4D
l40222F4D:
	return
	// succ:  sdk_pm_prepare_to_sleep_exit
sdk_pm_prepare_to_sleep_exit:


// sdk_pm_sdio_nidle
// Return size: 0
void sdk_pm_sdio_nidle()
sdk_pm_sdio_nidle_entry:
	// succ:  l40222F54
l40222F54:
	a1 = fp
	a7 = 0x4020452C
	a8 = 0x4021287C
	a6 = Mem0[a8 + 0x00000218:word32]
	a2 = 0x4021BDB8
	a6 = a6 & a7
	a2 = Mem0[a2 + 0x00000118:word32]
	a7 = 0x40222F50
	branch (a2 & 0x00040000) == 0x00000000 l40222FC4
	// succ:  l40222F72 l40222FC4
l40222F72:
	a5 = 0x4021C0CC
	a9 = Mem0[a5 + 0x00000158:word32]
	branch a9 == a7 l40222F82
	// succ:  l40222F7E l40222F82
l40222F7E:
	a2 = 1
	return
	// succ:  sdk_pm_sdio_nidle_exit
l40222F82:
	a2 = Mem0[a5 + 0x0000013C:word32]
	a10 = a2 >>u 0x00000012 & 0x00000003
	branch a10 != 3 l40222F7E
	// succ:  l40222F8E l40222F7E
l40222F8E:
	a11 = a2 >>u 0x00000014 & 0x00000007
	branch a11 != 2 l40222F7E
	// succ:  l40222F94 l40222F7E
l40222F94:
	a3 = a2 >>u 0x00000017 & 0x000001FF
	a9 = 0x0000007F
	branch (a9 & a3) != 0x00000000 l40222F7E
	// succ:  l40222F9D l40222F7E
l40222F9D:
	a2 = Mem0[a5 + 0x0000013C:word32]
	a4 = a2 >>u 0x00000012 & 0x00000003
	branch a4 != 3 l40222F7E
	// succ:  l40222FA9 l40222F7E
l40222FA9:
	a10 = a2 >>u 0x00000014 & 0x00000007
	branch a10 != 2 l40222F7E
	// succ:  l40222FAF l40222F7E
l40222FAF:
	a11 = a2 >>u 0x00000017 & 0x000001FF
	branch (a9 & a11) != 0x00000000 l40222F7E
	// succ:  l40222FB5 l40222F7E
l40222FB5:
	a2 = Mem0[a5 + 0x00000158:word32]
	branch a2 != a7 l40222F7E
	// succ:  l40222FBE l40222F7E
l40222FBE:
	Mem0[a8 + 0x00000218:word32] = a6
	// succ:  l40222FC4
l40222FC4:
	a2 = 0
	return
	// succ:  sdk_pm_sdio_nidle_exit
sdk_pm_sdio_nidle_exit:


// sdk_pm_goto_sleep
// Return size: 0
void sdk_pm_goto_sleep()
sdk_pm_goto_sleep_entry:
	// succ:  l40222FD0
l40222FD0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a2 == 1 l40222FE4
	// succ:  l40222FD8 l40222FE4
l40222FD8:
	branch a2 == 2 l40222FE4
	// succ:  l40222FDB l40222FE4
l40222FDB:
	a2 = 1
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_goto_sleep_exit
l40222FE4:
	a0 = 0x40222FE7
	call fn40322F54 (retsize: 0;)
	a3 = 0x40222CC8
	a4 = 0x40222FC8
	Mem0[a3 + 0x00000002:byte] = a2
	v7 = Mem0[a4 + 0x00000000:byte]
	a4 = (uint32) v7
	v8 = Mem0[a3 + 0x00000000:byte]
	a0 = (uint32) v8
	Mem0[a3 + 0x00000001:byte] = a2
	a0 = a0 & a4
	a0 = a2 | a0
	Mem0[a3 + 0x00000001:byte] = a0
	a0 = a0 & 0x000000FF
	branch a0 != 0x00000000 l40222FDB
	// succ:  l40223008 l40222FDB
l40223008:
	a3 = 0x40222FCC
	a2 = 1
	Mem0[a3:byte] = a2
	a6 = 0x4021C0CC
	a0 = -1
	a10 = 0x402125CC
	Mem0[a10 + 0x00000124:word32] = a0
	a11 = 0x40204570
	a9 = Mem0[a10 + 0x00000108:word32]
	a9 = a9 | a11
	Mem0[a10 + 0x00000108:word32] = a9
	a7 = 8
	a8 = -13
	a5 = Mem0[a6 + 0x00000340:word32]
	a5 = a5 & a8
	a5 = a5 | a7
	Mem0[a6 + 0x00000340:word32] = a5
	a2 = 0
	// succ:  l40262FDD
l40262FDD:
sdk_pm_goto_sleep_exit:


// sdk_pm_wait4wakeup
// Return size: 0
void sdk_pm_wait4wakeup()
sdk_pm_wait4wakeup_entry:
	// succ:  l4022304C
l4022304C:
	a1 = fp
	branch a2 == 1 l40223052
	// succ:  l4022304F l40223052
l4022304F:
	branch a2 != 2 l40223082
	// succ:  l40223052 l40223082
l40223052:
	a5 = 0x40222CC8
	v5 = Mem0[a5 + 0x00000001:byte]
	a2 = (uint32) v5
	branch a2 != 0x00000000 l40223082
	// succ:  l4022305A l40223082
l4022305A:
	a2 = 0x402125CC
	a3 = Mem0[a2 + 0x00000128:word32]
	a3 = a3 & 0x00000003
	branch a3 != 0x00000000 l40223074
	// succ:  l40223068 l40223074
l40223068:
	a4 = Mem0[a2 + 0x00000128:word32]
	a4 = a4 & 0x00000003
	branch a4 == 0x00000000 l40223068
	// succ:  l40223074 l40223068
l40223074:
	a7 = 2
	a6 = Mem0[a2 + 0x00000128:word32]
	a6 = a6 & a7
	Mem0[a5 + 0x00000003:byte] = a6
	// succ:  l40223082
l40223082:
	return
	// succ:  sdk_pm_wait4wakeup_exit
sdk_pm_wait4wakeup_exit:


// sdk_pm_open_rf
// Return size: 0
void sdk_pm_open_rf()
sdk_pm_open_rf_entry:
	// succ:  l40223084
l40223084:
	a1 = fp
	a8 = 0x4021CDA0
	a3 = 0x4021BDB8
	a6 = 0x402125CC
	Mem0[a6 + 0x00000110:word32] = a8
	a7 = 0
	Mem0[a6 + 0x00000144:word32] = a7
	a5 = 0x4020A194
	Mem0[a6 + 0x00000100:word32] = a5
	a4 = 0x4021D780
	a2 = Mem0[a3 + 0x000003C8:word32]
	a2 = a2 & a4
	Mem0[a3 + 0x000003C8:word32] = a2
	return
	// succ:  sdk_pm_open_rf_exit
sdk_pm_open_rf_exit:


// sdk_pm_sleep_set_mac
// Return size: 0
void sdk_pm_sleep_set_mac()
sdk_pm_sleep_set_mac_entry:
	// succ:  l402230C4
l402230C4:
	a1 = fp
	a10 = 0x402230B8
	a3 = 0x40214568
	a6 = 0x4021319C
	Mem0[a6 + 0x000003E0:word32] = a10
	a9 = 0x402230BC
	a8 = 0x4021C17C
	a7 = Mem0[a6 + 0x00000274:word32]
	a7 = a7 & a9
	a7 = a7 | a8
	Mem0[a6 + 0x00000274:word32] = a7
	a5 = 0x402230C0
	a4 = 0x4021CB2C
	a2 = Mem0[a6 + 0x00000274:word32]
	a2 = a2 & a5
	a2 = a2 | a4
	Mem0[a6 + 0x00000274:word32] = a2
	a11 = 0x4021CB3C
	a10 = 0x4021DEF8
	a9 = Mem0[a6 + 0x00000274:word32]
	a9 = a9 & a11
	a9 = a9 | a10
	Mem0[a6 + 0x00000274:word32] = a9
	a8 = 0x40202638
	a7 = 0x4020449C
	a5 = Mem0[a6 + 0x00000274:word32]
	a5 = a5 & a8
	a5 = a5 | a7
	Mem0[a6 + 0x00000274:word32] = a5
	a4 = 0x402044FC
	a2 = Mem0[a3 + 0x00000204:word32]
	a2 = a2 & a4
	Mem0[a3 + 0x00000204:word32] = a2
	return
	// succ:  sdk_pm_sleep_set_mac_exit
sdk_pm_sleep_set_mac_exit:


// sdk_pm_set_wakeup_mac
// Return size: 0
void sdk_pm_set_wakeup_mac()
sdk_pm_set_wakeup_mac_entry:
	// succ:  l40223148
l40223148:
	a1 = fp
	a4 = 0x4021C308
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	v6 = Mem0[a4 + 0x00000035:byte]
	a0 = (uint32) v6
	a12 = 0x4021319C
	branch a0 == 1 l402231D2
	// succ:  l4022315B l402231D2
l4022315B:
	branch a0 == 3 l402231D2
	// succ:  l4022315E l402231D2
l4022315E:
	branch a0 == 4 l402231D2
	// succ:  l40223161 l402231D2
l40223161:
	branch a0 == 5 l402231D2
	// succ:  l40223164 l402231D2
l40223164:
	a0 = 0
	Mem0[a12 + 0x000003E0:word32] = a0
	a0 = 0x40202638
	a3 = 0x40214568
	a11 = Mem0[a12 + 0x00000274:word32]
	a11 = a11 & a0
	Mem0[a12 + 0x00000274:word32] = a11
	a10 = 0x4021CB3C
	a9 = Mem0[a12 + 0x00000274:word32]
	a9 = a9 & a10
	Mem0[a12 + 0x00000274:word32] = a9
	a8 = 0x402230C0
	a7 = Mem0[a12 + 0x00000274:word32]
	a7 = a7 & a8
	Mem0[a12 + 0x00000274:word32] = a7
	a6 = 0x402230BC
	a5 = Mem0[a12 + 0x00000274:word32]
	a5 = a5 & a6
	Mem0[a12 + 0x00000274:word32] = a5
	a4 = 0x4020449C
	a2 = Mem0[a3 + 0x00000204:word32]
	a2 = a2 | a4
	Mem0[a3 + 0x00000204:word32] = a2
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_set_wakeup_mac_exit
l402231D2:
	v16 = Mem0[a4 + 0x00000036:byte]
	a2 = (uint32) v16
	a0 = 0x402231D8
	call sdk_pm_unmask_bt (retsize: 0;)
	// succ:  l4026316C
l4026316C:
sdk_pm_set_wakeup_mac_exit:


// sdk_pm_check_mac_idle
// Return size: 0
void sdk_pm_check_mac_idle()
sdk_pm_check_mac_idle_entry:
	// succ:  l402231E4
l402231E4:
	a1 = fp
	a2 = 0x00000014
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1:word32] = a0
	a0 = 0x402231F9
	call fn40303F28 (retsize: 0;)
	a12 = 0
	a14 = 0x402231DC
	a13 = 0x402231E0
	a15 = 0x40214568
	// succ:  l40223204
l40223204:
	a0 = Mem0[a13 + 0x00000210:word32]
	a0 = a0 & 0x0000000F
	branch a0 != 0x00000000 l4022321C
	// succ:  l40223210 l4022321C
l40223210:
	a2 = Mem0[a15 + 0x000003D0:word32]
	a2 = a2 >>u 0x0000000C & 0x0000000F
	branch a2 == 0x00000000 l4022322C
	// succ:  l4022321C l4022322C
l4022321C:
	a2 = 0x00000002
	a0 = 0x40223222
	call fn40303F28 (retsize: 0;)
	a3 = a12
	a12 = a12 + 1
	a12 = a12 & 0x0000FFFF
	branch a14 >=u a3 l40223204
	// succ:  l4022322C l40223204
l4022322C:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_pm_check_mac_idle_exit
sdk_pm_check_mac_idle_exit:


// sdk_pm_set_sleep_btco
// Return size: 0
void sdk_pm_set_sleep_btco()
sdk_pm_set_sleep_btco_entry:
	// succ:  l4022323C
l4022323C:
	a1 = fp
	a1 = a1 - 16
	a3 = 0x4021C308
	Mem0[a1:word32] = a0
	v5 = Mem0[a3 + 0x00000035:byte]
	a0 = (uint32) v5
	a4 = 0xFFFFFECF
	branch a0 == 1 l4022325D
	// succ:  l4022324D l4022325D
l4022324D:
	branch a0 == 3 l4022325D
	// succ:  l40223250 l4022325D
l40223250:
	branch a0 == 4 l4022325D
	// succ:  l40223253 l4022325D
l40223253:
	branch a0 == 5 l4022325D
	// succ:  l40223256 l4022325D
l40223256:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_set_sleep_btco_exit
l4022325D:
	a6 = 0x00000030
	a2 = 0x402125CC
	a5 = Mem0[a2 + 0x00000214:word32]
	a5 = a5 & a4
	a5 = a5 | a6
	Mem0[a2 + 0x00000214:word32] = a5
	a0 = Mem0[a2 + 0x00000234:word32]
	a0 = a0 & a4
	Mem0[a2 + 0x00000234:word32] = a0
	v10 = Mem0[a3 + 0x00000035:byte]
	a0 = (uint32) v10
	branch a0 == 1 l402232B3
	// succ:  l4022328A l402232B3
l4022328A:
	branch a0 == 3 l402232B3
	// succ:  l4022328D l402232B3
l4022328D:
	branch a0 == 4 l40223293
	// succ:  l40223290 l40223293
l40223290:
	branch a0 != 5 l40223256
	// succ:  l40223293 l40223256
l40223293:
	v11 = Mem0[a3 + 0x00000036:byte]
	a6 = (uint32) v11
	branch a6 <u 0x00000002 l40223256
	// succ:  l40223299 l40223256
l40223299:
	a2 = 0x00000000
	a3 = 1
	a4 = 1
	a5 = 0
	a0 = 0x402232A5
	call fn40303F68 (retsize: 0;)
	a2 = 8
	a3 = 0
	a4 = 8
	a5 = 0
	a0 = 0x402232B0
	call fn40303F68 (retsize: 0;)
	goto l40263256
	// succ:  l40263256
l402232B3:
	v13 = Mem0[a3 + 0x00000036:byte]
	a7 = (uint32) v13
	branch a7 <u 0x00000002 l40223256
	// succ:  l402232B9 l40223256
l402232B9:
	a2 = 0x00000001
	a3 = 0x00000000
	a4 = 1
	a5 = 0
	a0 = 0x402232C6
	call fn40303F68 (retsize: 0;)
	a2 = 0
	a3 = 8
	a4 = 8
	a5 = 0
	a0 = 0x402232D1
	call fn40303F68 (retsize: 0;)
	// succ:  l40263256
l40263256:
sdk_pm_set_sleep_btco_exit:


// sdk_pm_set_wakeup_btco
// Return size: 0
void sdk_pm_set_wakeup_btco()
sdk_pm_set_wakeup_btco_entry:
	// succ:  l402232D4
l402232D4:
	a1 = fp
	a1 = a1 - 16
	a3 = 0x4021C308
	Mem0[a1:word32] = a0
	v5 = Mem0[a3 + 0x00000035:byte]
	a0 = (uint32) v5
	a5 = 0xFFFFFECF
	branch a0 == 1 l402232F5
	// succ:  l402232E5 l402232F5
l402232E5:
	branch a0 == 3 l402232F5
	// succ:  l402232E8 l402232F5
l402232E8:
	branch a0 == 4 l402232F5
	// succ:  l402232EB l402232F5
l402232EB:
	branch a0 == 5 l402232F5
	// succ:  l402232EE l402232F5
l402232EE:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_set_wakeup_btco_exit
l402232F5:
	v8 = Mem0[a3 + 0x00000036:byte]
	a2 = (uint32) v8
	a0 = 0x402125CC
	branch a2 <u 0x00000002 l40223327
	// succ:  l402232FE l40223327
l402232FE:
	a6 = 32
	a7 = Mem0[a0 + 0x00000214:word32]
	a7 = a7 & a5
	a7 = a7 | a6
	Mem0[a0 + 0x00000214:word32] = a7
	a4 = Mem0[a0 + 0x00000234:word32]
	a4 = a4 & a5
	a4 = a4 | a6
	Mem0[a0 + 0x00000234:word32] = a4
	goto l4022334A
	// succ:  l4022334A
l40223327:
	a10 = 48
	a9 = Mem0[a0 + 0x00000214:word32]
	a9 = a9 & a5
	a9 = a9 | a10
	Mem0[a0 + 0x00000214:word32] = a9
	a8 = Mem0[a0 + 0x00000234:word32]
	a8 = a8 & a5
	Mem0[a0 + 0x00000234:word32] = a8
	// succ:  l4022334A
l4022334A:
	v12 = Mem0[a3 + 0x00000035:byte]
	a0 = (uint32) v12
	branch a0 == 1 l40223398
	// succ:  l40223350 l40223398
l40223350:
	branch a0 == 3 l40223398
	// succ:  l40223353 l40223398
l40223353:
	branch a0 == 4 l40223359
	// succ:  l40223356 l40223359
l40223356:
	branch a0 != 5 l402232EE
	// succ:  l40223359 l402232EE
l40223359:
	v13 = Mem0[a3 + 0x00000036:byte]
	a0 = (uint32) v13
	branch a0 != 1 l4022337A
	// succ:  l4022335F l4022337A
l4022335F:
	a2 = 0x00000000
	a3 = 0x00000001
	a4 = 1
	a5 = 0
	a0 = 0x4022336C
	call fn40303F68 (retsize: 0;)
	a2 = 8
	a3 = 0
	a4 = 8
	a5 = 0
	a0 = 0x40223377
	call fn40303F68 (retsize: 0;)
	goto l402632EE
	// succ:  l402632EE
l4022337A:
	branch a0 != 0x00000000 l402232EE
	// succ:  l4022337D l402232EE
l4022337D:
	a2 = 0x00000001
	a3 = 0x00000000
	a4 = 1
	a5 = 0
	a0 = 0x4022338A
	call fn40303F68 (retsize: 0;)
	a2 = 0
	a3 = 8
	a4 = 8
	a5 = 0
	a0 = 0x40223395
	call fn40303F68 (retsize: 0;)
	goto l402632EE
	// succ:  l402632EE
l40223398:
	v17 = Mem0[a3 + 0x00000036:byte]
	a0 = (uint32) v17
	branch a0 != 1 l402233B9
	// succ:  l4022339E l402233B9
l4022339E:
	a2 = 0x00000001
	a3 = 0x00000000
	a4 = 1
	a5 = 0
	a0 = 0x402233AB
	call fn40303F68 (retsize: 0;)
	a2 = 0
	a3 = 8
	a4 = 8
	a5 = 0
	a0 = 0x402233B6
	call fn40303F68 (retsize: 0;)
	goto l402632EE
	// succ:  l402632EE
l402233B9:
	branch a0 != 0x00000000 l402232EE
	// succ:  l402233BC l402232EE
l402233BC:
	a2 = 0x00000000
	a3 = 0x00000001
	a4 = 1
	a5 = 0
	a0 = 0x402233C9
	call fn40303F68 (retsize: 0;)
	a2 = 8
	a3 = 0
	a4 = 8
	a5 = 0
	a0 = 0x402233D4
	call fn40303F68 (retsize: 0;)
	// succ:  l402632EE
l402632EE:
sdk_pm_set_wakeup_btco_exit:


// sdk_pm_set_sleep_mode
// Return size: 0
void sdk_pm_set_sleep_mode()
sdk_pm_set_sleep_mode_entry:
	// succ:  l402233DC
l402233DC:
	a1 = fp
	a3 = 0x00000000
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	a2 = 1
	a0 = 0x402233EF
	call fn4031E4F4 (retsize: 0;)
	a3 = 0x4021BDBC
	a2 = 0x4021BDC0
	a0 = Mem0[a2 + 0x00000108:word32]
	a0 = a0 | a3
	Mem0[a2 + 0x00000108:word32] = a0
	a0 = 0x40223407
	call fn40322EE8 (retsize: 0;)
	branch a12 == 4 l4022341C
	// succ:  l4022340A l4022341C
l4022340A:
	branch a12 != 1 l40223413
	// succ:  l4022340D l40223413
l4022340D:
	a0 = 0x40223410
	call fn40322E5C (retsize: 0;)
	goto l4022341C
	// succ:  l4022341C
l40223413:
	branch a12 == 2 l40223419
	// succ:  l40223416 l40223419
l40223416:
	branch a12 != 8 l4022341C
	// succ:  l40223419 l4022341C
l40223419:
	a0 = 0x4022341C
	call fn40322E9C (retsize: 0;)
	// succ:  l4022341C
l4022341C:
	a3 = 0x4021E474
	a2 = 2
	a5 = 0x4021319C
	a0 = Mem0[a5 + 0x00000214:word32]
	a0 = a0 & a3
	a0 = a0 | a2
	Mem0[a5 + 0x00000214:word32] = a0
	a11 = 0x4021E658
	a10 = Mem0[a5 + 0x00000214:word32]
	a10 = a10 & a11
	Mem0[a5 + 0x00000214:word32] = a10
	a9 = 0x4020449C
	a8 = Mem0[a5 + 0x00000214:word32]
	a8 = a8 | a9
	Mem0[a5 + 0x00000214:word32] = a8
	a7 = 0x402230BC
	a6 = 0x4021C17C
	a4 = Mem0[a5 + 0x00000274:word32]
	a4 = a4 & a7
	a4 = a4 | a6
	Mem0[a5 + 0x00000274:word32] = a4
	a0 = 0x40223475
	call fn4032323C (retsize: 0;)
	a0 = 0x40223478
	call fn403230C4 (retsize: 0;)
	a0 = 0x4022347B
	call fn403231E4 (retsize: 0;)
	branch a12 != 8 l40223493
	// succ:  l4022347E l40223493
l4022347E:
	a6 = 0x402233D8
	a5 = 0x4021287C
	a4 = Mem0[a5 + 0x00000218:word32]
	a4 = a4 & a6
	Mem0[a5 + 0x00000218:word32] = a4
	// succ:  l40223493
l40223493:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_set_sleep_mode_exit
sdk_pm_set_sleep_mode_exit:


// sdk_pm_unmask_bt
// Return size: 0
void sdk_pm_unmask_bt()
sdk_pm_unmask_bt_entry:
	// succ:  l402234AC
l402234AC:
	a1 = fp
	a4 = 0x4021319C
	branch a2 == 0x00000000 l402234CB
	// succ:  l402234B1 l402234CB
l402234B1:
	branch a2 == 1 l402234D5
	// succ:  l402234B4 l402234D5
l402234B4:
	branch a2 == 2 l402234E0
	// succ:  l402234B7 l402234E0
l402234B7:
	branch a2 == 3 l402234EB
	// succ:  l402234BA l402234EB
l402234BA:
	branch a2 == 4 l402234F6
	// succ:  l402234BD l402234F6
l402234BD:
	branch a2 != 5 l402234C9
	// succ:  l402234C0 l402234C9
l402234C0:
	a2 = 0x4022349C
	Mem0[a4 + 0x000003E0:word32] = a2
	// succ:  l402234C9
l402234C9:
	return
	// succ:  sdk_pm_unmask_bt_exit
l402234CB:
	a3 = 0
	Mem0[a4 + 0x000003E0:word32] = a3
	return
	// succ:  sdk_pm_unmask_bt_exit
l402234D5:
	a5 = 0x402230B8
	Mem0[a4 + 0x000003E0:word32] = a5
	return
	// succ:  sdk_pm_unmask_bt_exit
l402234E0:
	a6 = 0x402234A0
	Mem0[a4 + 0x000003E0:word32] = a6
	return
	// succ:  sdk_pm_unmask_bt_exit
l402234EB:
	a7 = 0x402234A4
	Mem0[a4 + 0x000003E0:word32] = a7
	return
	// succ:  sdk_pm_unmask_bt_exit
l402234F6:
	a8 = 0x402234A8
	Mem0[a4 + 0x000003E0:word32] = a8
	return
	// succ:  sdk_pm_unmask_bt_exit
sdk_pm_unmask_bt_exit:


// sdk_pm_wakeup_init
// Return size: 0
void sdk_pm_wakeup_init()
sdk_pm_wakeup_init_entry:
	// succ:  l4022350C
l4022350C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	a13 = a3
	a12 = a2
	a0 = 0x40222CC8
	branch a2 == 2 l40223524
	// succ:  l40223521 l40223524
l40223521:
	branch a2 != 1 l40223536
	// succ:  l40223524 l40223536
l40223524:
	branch a13 != 0x00000000 l40223536
	// succ:  l40223527 l40223536
l40223527:
	v9 = Mem0[a0 + 0x00000001:byte]
	a2 = (uint32) v9
	branch a2 != 0x00000000 l40223536
	// succ:  l4022352D l40223536
l4022352D:
	v10 = Mem0[a0 + 0x00000003:byte]
	a3 = (uint32) v10
	branch a3 != 0x00000000 l40223536
	// succ:  l40223533 l40223536
l40223533:
	a0 = 0x40223536
	call fn4032015C (retsize: 0;)
	// succ:  l40223536
l40223536:
	a10 = -13
	a9 = 4
	a6 = 0x4021287C
	a8 = 0x4021C0CC
	a7 = Mem0[a8 + 0x00000340:word32]
	a7 = a7 & a10
	a7 = a7 | a9
	Mem0[a8 + 0x00000340:word32] = a7
	a5 = 0x40204570
	a4 = Mem0[a6 + 0x00000218:word32]
	a4 = a4 | a5
	Mem0[a6 + 0x00000218:word32] = a4
	branch a12 != 8 l40223579
	// succ:  l40223567 l40223579
l40223567:
	a14 = 0x4021CDA4
	a11 = Mem0[a6 + 0x00000218:word32]
	a11 = a11 | a14
	Mem0[a6 + 0x00000218:word32] = a11
	// succ:  l40223579
l40223579:
	a6 = 0x40223504
	a14 = 0x4021CB28
	a4 = 0x4021319C
	Mem0[a4 + 0x00000214:word32] = a6
	a5 = 0x402230BC
	a3 = Mem0[a4 + 0x00000274:word32]
	a3 = a3 & a5
	Mem0[a4 + 0x00000274:word32] = a3
	a2 = a12 - 1
	branch a2 == 0x00000000 l4022365D
	// succ:  l402235A0 l4022365D
l402235A0:
	a7 = a12 - 2
	branch a7 == 0x00000000 l4022365D
	// succ:  l402235A6 l4022365D
l402235A6:
	a8 = a12 - 8
	branch a8 == 0x00000000 l4022365D
	// succ:  l402235AC l4022365D
l402235AC:
	a2 = 0x0000012C
	a0 = 0x402235B2
	call fn40303F28 (retsize: 0;)
	a11 = 0x4021BDC0
	a4 = Mem0[a11 + 0x00000108:word32]
	a4 = a4 & a14
	Mem0[a11 + 0x00000108:word32] = a4
	a3 = 1
	a2 = Mem0[a11 + 0x00000160:word32]
	a2 = a2 | a3
	Mem0[a11 + 0x00000160:word32] = a2
	a0 = -2
	a10 = Mem0[a11 + 0x00000160:word32]
	a10 = a10 & a0
	Mem0[a11 + 0x00000160:word32] = a10
	a9 = 0x4021319C
	a9 = Mem0[a9 + 0x00000270:word32]
	branch (a9 & 0x00000002) == 0x00000000 l40223628
	// succ:  l402235F2 l40223628
l402235F2:
	a2 = 2
	a0 = 0x402235F7
	call fn40303F28 (retsize: 0;)
	a10 = 0x000000F1
	a8 = 0xFFFFFC00
	a6 = 0x4021BDC0
	a9 = Mem0[a6 + 0x00000034:word32]
	a9 = a9 & a8
	a9 = a9 | a10
	Mem0[a6 + 0x00000034:word32] = a9
	a7 = 0x000000F0
	a5 = Mem0[a6 + 0x00000034:word32]
	a5 = a5 & a8
	a5 = a5 | a7
	Mem0[a6 + 0x00000034:word32] = a5
	a2 = 2
	a0 = 0x40223628
	call fn40303F28 (retsize: 0;)
	// succ:  l40223628
l40223628:
	a0 = 0x4022362B
	call fn403232D4 (retsize: 0;)
	a0 = 0x4022362E
	call fn40323148 (retsize: 0;)
	branch a13 != 0x00000000 l40223650
	// succ:  l40223630 l40223650
l40223630:
	a10 = 0x40222CC8
	a2 = 0x40222FC8
	v21 = Mem0[a10 + 0x00000002:byte]
	a10 = (uint32) v21
	v22 = Mem0[a2 + 0x00000000:byte]
	a11 = (uint32) v22
	branch a10 != 0x00000000 l40223650
	// succ:  l4022363E l40223650
l4022363E:
	branch a11 != 1 l40223650
	// succ:  l40223641 l40223650
l40223641:
	a13 = 0x40222CC8
	v23 = Mem0[a13 + 0x00000000:byte]
	a13 = (uint32) v23
	branch a13 != 1 l40223650
	// succ:  l4022364A l40223650
l4022364A:
	branch a12 == 2 l402236C9
	// succ:  l4022364D l402236C9
l4022364D:
	branch a12 == 1 l402236C9
	// succ:  l40223650 l402236C9
l40223650:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_wakeup_init_exit
l4022365D:
	a4 = 0x4021CDB0
	a0 = 0x4021BCEC
	a3 = 0x4021BDB8
	a2 = Mem0[a3 + 0x000003E8:word32]
	a2 = a2 & a4
	a4 = 0x00000003
	a5 = 0x00000007
	a6 = 4
	a7 = 15
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a3 + 0x000003E8:word32] = a2
	a2 = 0x00000062
	a0 = Mem0[a0 + 0x0000009C:word32]
	a3 = 1
	v19 = a0
	a0 = 0x4022368C
	call v19 (retsize: 0;)
	a2 = 0x00000062
	a0 = 0x4021BCEC
	a3 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = 11
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 0x00000080
	v20 = a0
	a0 = 0x402236A1
	call v20 (retsize: 0;)
	a0 = 0x402236A4
	call fn40323084 (retsize: 0;)
	a4 = 0x4021C30C
	a5 = 0x4021BDBC
	a3 = Mem0[a4 + 0x00000000:word32]
	a2 = 0
	a3 = a3 | a5
	Mem0[a4:word32] = a3
	a0 = 0x402236B6
	call fn403202E0 (retsize: 0;)
	a2 = 0x000000C8
	a0 = 0x402236BC
	call fn40303F28 (retsize: 0;)
	a7 = 0x4021C30C
	a6 = Mem0[a7 + 0x00000000:word32]
	a6 = a6 & a14
	Mem0[a7:word32] = a6
	goto l402635B2
	// succ:  l402635B2
l402236C9:
	a9 = 0x40222CC8
	a8 = 0x00000000
	a7 = 0x4021C308
	Mem0[a2:byte] = a8
	v24 = Mem0[a7 + 0x00000064:byte]
	a7 = (uint32) v24
	Mem0[a9:byte] = a8
	a7 = a7 >>u 0x00000001 & 0x00000001
	branch a7 != 0x00000000 l40223650
	// succ:  l402236E1 l40223650
l402236E1:
	a2 = 0x00000004
	a0 = 0x402236E7
	call fn403233DC (retsize: 0;)
	a2 = 0x40223508
	v25 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v25
	a0 = 0x402236F0
	call fn4031FBF0 (retsize: 0;)
	a2 = 0x00000004
	a3 = 0
	a0 = 0x402236F8
	call fn4032350C (retsize: 0;)
	goto l40263650
	// succ:  l40263650
l402635B2:
l40263650:
sdk_pm_wakeup_init_exit:


// sdk_sleep_opt_8266
// Return size: 0
void sdk_sleep_opt_8266()
sdk_sleep_opt_8266_entry:
	// succ:  l402236FC
l402236FC:
	a1 = fp
	a6 = 0
	a5 = 0x402125CC
	Mem0[a5 + 0x00000140:word32] = a6
	Mem0[a5 + 0x00000144:word32] = a2
	Mem0[a5 + 0x00000100:word32] = a4
	Mem0[a5 + 0x00000110:word32] = a3
	return
	// succ:  sdk_sleep_opt_8266_exit
sdk_sleep_opt_8266_exit:


// sdk_sleep_opt_bb_on_8266
// Return size: 0
void sdk_sleep_opt_bb_on_8266()
sdk_sleep_opt_bb_on_8266_entry:
	// succ:  l4022371C
l4022371C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40223724
	call fn40322E1C (retsize: 0;)
	branch a2 == 2 l40223734
	// succ:  l40223727 l40223734
l40223727:
	a2 = 0
	a3 = 0
	a4 = 0x40222E58
	a0 = 0x40223731
	call fn403236FC (retsize: 0;)
	goto l4022373E
	// succ:  l4022373E
l40223734:
	a2 = 0
	a3 = 0
	a4 = 0x4021C17C
	a0 = 0x4022373E
	call fn403236FC (retsize: 0;)
	// succ:  l4022373E
l4022373E:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_sleep_opt_bb_on_8266_exit
sdk_sleep_opt_bb_on_8266_exit:


// sdk_sleep_reset_analog_rtcreg_8266
// Return size: 0
void sdk_sleep_reset_analog_rtcreg_8266()
sdk_sleep_reset_analog_rtcreg_8266_entry:
	// succ:  l40223754
l40223754:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a0 = -1
	a12 = 0x402125CC
	Mem0[a12 + 0x00000124:word32] = a0
	a0 = 0x40223769
	call fn4032371C (retsize: 0;)
	a2 = 8
	a3 = 0
	a0 = 0x40223770
	call fn40322DE4 (retsize: 0;)
	a0 = 0x40223773
	call fn40322EE8 (retsize: 0;)
	a2 = 0x00000064
	a0 = 0x40223779
	call fn40322CCC (retsize: 0;)
	a3 = 0x40204570
	a2 = Mem0[a12 + 0x00000108:word32]
	a2 = a2 | a3
	Mem0[a12 + 0x00000108:word32] = a2
	a2 = 2
	a0 = 0x40223790
	call fn4032304C (retsize: 0;)
	a0 = 0x40223793
	call fn40323084 (retsize: 0;)
	a0 = 0x40223748
	a4 = 0
	a5 = 7
	Mem0[a12 + 0x00000100:word32] = a0
	a11 = 0x4021F140
	Mem0[a12 + 0x00000104:word32] = a11
	Mem0[a12 + 0x00000108:word32] = a4
	a10 = 0x40212EFC
	Mem0[a12 + 0x0000010C:word32] = a10
	a9 = 0x40204630
	Mem0[a12 + 0x00000110:word32] = a9
	a8 = 4
	Mem0[a12 + 0x00000118:word32] = a8
	Mem0[a12 + 0x00000120:word32] = a4
	Mem0[a12 + 0x00000140:word32] = a4
	Mem0[a12 + 0x00000144:word32] = a4
	a7 = 0x4022374C
	Mem0[a12 + 0x00000148:word32] = a7
	a6 = 0x40223750
	Mem0[a12 + 0x0000014C:word32] = a6
	Mem0[a12 + 0x00000158:word32] = a4
	Mem0[a12 + 0x0000015C:word32] = a5
	Mem0[a12 + 0x00000160:word32] = a5
	Mem0[a12 + 0x00000164:word32] = a4
	Mem0[a12 + 0x00000168:word32] = a4
	Mem0[a12 + 0x00000174:word32] = a4
	Mem0[a12 + 0x00000180:word32] = a4
	Mem0[a12 + 0x00000190:word32] = a4
	Mem0[a12 + 0x00000194:word32] = a4
	Mem0[a12 + 0x00000198:word32] = a4
	Mem0[a12 + 0x0000019C:word32] = a4
	Mem0[a12 + 0x000001A0:word32] = a4
	Mem0[a12 + 0x000001A8:word32] = a4
	Mem0[a12 + 0x000001AC:word32] = a4
	Mem0[a12 + 0x000001B0:word32] = a4
	Mem0[a12 + 0x000001B4:word32] = a4
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_sleep_reset_analog_rtcreg_8266_exit
sdk_sleep_reset_analog_rtcreg_8266_exit:


// sdk_rom_abs_temp
// Return size: 0
void sdk_rom_abs_temp()
sdk_rom_abs_temp_entry:
	// succ:  l40223858
l40223858:
	a1 = fp
	a4 = -a2
	branch a2 < 0x00000000 l4022385E
	// succ:  l4022385B_1 l4022385E
l4022385B_1:
	a4 = a2
	// succ:  l4022385E
l4022385E:
	a2 = a4
	return
	// succ:  sdk_rom_abs_temp_exit
sdk_rom_abs_temp_exit:


// sdk_rom_chip_v5_disable_cca
// Return size: 0
void sdk_rom_chip_v5_disable_cca()
sdk_rom_chip_v5_disable_cca_entry:
	// succ:  l40223864
l40223864:
	a1 = fp
	a4 = 0x4021CB40
	a3 = 0x4021BDC0
	a2 = Mem0[a3 + 0x00000100:word32]
	a2 = a2 | a4
	Mem0[a3 + 0x00000100:word32] = a2
	return
	// succ:  sdk_rom_chip_v5_disable_cca_exit
sdk_rom_chip_v5_disable_cca_exit:


// sdk_rom_chip_v5_enable_cca
// Return size: 0
void sdk_rom_chip_v5_enable_cca()
sdk_rom_chip_v5_enable_cca_entry:
	// succ:  l40223880
l40223880:
	a1 = fp
	a4 = 0x4022387C
	a3 = 0x4021BDC0
	a2 = Mem0[a3 + 0x00000100:word32]
	a2 = a2 & a4
	Mem0[a3 + 0x00000100:word32] = a2
	return
	// succ:  sdk_rom_chip_v5_enable_cca_exit
sdk_rom_chip_v5_enable_cca_exit:


// sdk_rom_chip_v5_sense_backoff
// Return size: 0
void sdk_rom_chip_v5_sense_backoff()
sdk_rom_chip_v5_sense_backoff_entry:
	// succ:  l402238A0
l402238A0:
	a1 = fp
	a3 = 0x4022389C
	a7 = 0x4021BDC0
	a5 = a2 << 8
	a5 = a5 >> 24
	branch (a2 & 0x00000080) != 0x00000000 l402238B5
	// succ:  l402238AF l402238B5
l402238AF:
	a4 = a2 << 22
	goto l402238B8
	// succ:  l402238B8
l402238B5:
	a4 = 0x40223898
	// succ:  l402238B8
l402238B8:
	a11 = Mem0[a7 + 0x00000228:word32]
	a11 = a11 & a3
	a11 = a11 | a4
	Mem0[a7 + 0x00000228:word32] = a11
	a10 = 0x000000FE
	a8 = a2 << 31
	a9 = 0xFFFFFF01
	branch a5 >= 0x00000000 l402238D6
	// succ:  l402238D3_1 l402238D6
l402238D3_1:
	a8 = a10
	// succ:  l402238D6
l402238D6:
	a6 = Mem0[a7 + 0x00000324:word32]
	a6 = a6 & a9
	a6 = a6 | a8
	Mem0[a7 + 0x00000324:word32] = a6
	return
	// succ:  sdk_rom_chip_v5_sense_backoff_exit
sdk_rom_chip_v5_sense_backoff_exit:


// sdk_rom_dc_iq_est
// Return size: 0
void sdk_rom_dc_iq_est()
sdk_rom_dc_iq_est_entry:
	// succ:  l402238EC
l402238EC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1:word32] = a0
	a0 = 0x4021BCEC
	Mem0[a1 + 0x00000004:word32] = a12
	a0 = Mem0[a0 + 0x00000000:word32]
	a12 = a4
	a0 = Mem0[a0 + 0x00000034:word32]
	a13 = a3
	v8 = a0
	a0 = 0x40223903
	call v8 (retsize: 0;)
	a13 = a13 + 1
	a2 = 0x4021BDB8
	a2 = Mem0[a2 + 0x000003DC:word32]
	a3 = a13
	a2 = a2 >> 6
	a0 = 0x40202548
	v10 = a0
	a0 = 0x40223919
	call v10 (retsize: 0;)
	Mem0[a12:word32] = a2
	a3 = a13
	a2 = 0x4021BDB8
	a2 = Mem0[a2 + 0x000003E0:word32]
	a2 = a2 >> 6
	a0 = 0x40202548
	v11 = a0
	a0 = 0x4022392F
	call v11 (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000030:word32]
	Mem0[a12 + 0x00000004:word32] = a2
	v12 = a0
	a0 = 0x4022393B
	call v12 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_dc_iq_est_exit
sdk_rom_dc_iq_est_exit:


// sdk_rom_en_pwdet
// Return size: 0
void sdk_rom_en_pwdet()
sdk_rom_en_pwdet_entry:
	// succ:  l40223948
l40223948:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a1 + 0x00000004:word32] = a12
	a0 = Mem0[a0 + 0x0000004C:word32]
	a12 = a2
	v6 = a0
	a0 = 0x4022395C
	call v6 (retsize: 0;)
	a6 = 0x40203F84
	a2 = 0x4021C0CC
	a5 = Mem0[a2 + 0x0000035C:word32]
	a5 = a5 & a6
	Mem0[a2 + 0x0000035C:word32] = a5
	a4 = 0x4021C0D0
	a3 = Mem0[a2 + 0x0000035C:word32]
	a3 = a3 & a4
	Mem0[a2 + 0x0000035C:word32] = a3
	branch a12 != 0x00000000 l40223999
	// succ:  l40223985 l40223999
l40223985:
	a8 = -2
	a7 = Mem0[a2 + 0x00000350:word32]
	a7 = a7 & a8
	Mem0[a2 + 0x00000350:word32] = a7
	goto l402239AD
	// succ:  l402239AD
l40223999:
	branch a12 != 1 l402239AD
	// succ:  l4022399C l402239AD
l4022399C:
	a10 = 1
	a9 = Mem0[a2 + 0x00000350:word32]
	a9 = a9 | a10
	Mem0[a2 + 0x00000350:word32] = a9
	// succ:  l402239AD
l402239AD:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_en_pwdet_exit
sdk_rom_en_pwdet_exit:


// sdk_rom_get_bb_atten
// Return size: 0
void sdk_rom_get_bb_atten()
sdk_rom_get_bb_atten_entry:
	// succ:  l402239B8
l402239B8:
	a1 = fp
	a4 = 0
	a5 = a2 + 8
	a2 = 0x0000007F
	a5 = a5 * 0x00000004 - a3
	a5 = a5 << 16
	a5 = a5 >> 16
	branch a5 < 0x00000000 l402239CB
	// succ:  l402239C8_1 l402239CB
l402239C8_1:
	a4 = a5
	// succ:  l402239CB
l402239CB:
	a4 = a4 << 16
	a3 = a4 >> 16
	branch a3 >= 128 l402239D6
	// succ:  l402239D4 l402239D6
l402239D4:
	a2 = a3
	// succ:  l402239D6
l402239D6:
	a2 = a2 << 8
	a2 = a2 >> 24
	return
	// succ:  sdk_rom_get_bb_atten_exit
sdk_rom_get_bb_atten_exit:


// sdk_rom_get_corr_power
// Return size: 0
void sdk_rom_get_corr_power()
sdk_rom_get_corr_power_entry:
	// succ:  l402239E0
l402239E0:
	a1 = fp
	a7 = 0x4021BDB8
	a4 = Mem0[a7 + 0x00000380:word32]
	a4 = a4 >> 18
	a5 = Mem0[a7 + 0x00000384:word32]
	a5 = a5 >> 18
	a10 = Mem0[a7 + 0x00000388:word32]
	a10 = a10 >> 18
	a11 = Mem0[a7 + 0x0000038C:word32]
	a8 = a3 - 2
	a11 = a11 >> 18
	a6 = Mem0[a7 + 0x000003DC:word32]
	SAR = a8
	a6 = a0 >> SAR
	a9 = Mem0[a7 + 0x000003E0:word32]
	SAR = a8
	a9 = a0 >> SAR
	SAR = a8
	a7 = Mem0[a7 + 0x000003E4:word32]
	a9 = a9 * a9
	a6 = a6 * a6
	a4 = a4 + a11
	a5 = a5 - a10
	a5 = a5 * a5
	a4 = a4 * a4
	a6 = a6 + a9
	a7 = a0 >> SAR
	Mem0[a2:word32] = a7
	a4 = a4 + a5
	a6 = a6 >> 16
	Mem0[a2 + 0x00000008:word32] = a6
	a5 = -22
	a5 = a5 + a3 * 0x00000002
	SAR = a5
	a4 = a0 >> SAR
	Mem0[a2 + 0x00000004:word32] = a4
	return
	// succ:  sdk_rom_get_corr_power_exit
sdk_rom_get_corr_power_exit:


// sdk_rom_get_fm_sar_dout
// Return size: 0
void sdk_rom_get_fm_sar_dout()
sdk_rom_get_fm_sar_dout_entry:
	// succ:  l40223A5C
l40223A5C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a0
	Mem0[a1 + 0x00000014:word32] = a12
	a5 = a2 | a2
	a6 = -3
	a12 = 0x4021C0CC
	a4 = Mem0[a12 + 0x00000350:word32]
	a4 = a4 & a6
	Mem0[a12 + 0x00000350:word32] = a4
	a2 = 2
	a0 = Mem0[a12 + 0x00000350:word32]
	a0 = a0 | a2
	a2 = 25
	Mem0[a1 + 0x00000018:word32] = a5
	Mem0[a1 + 0x0000001C:word32] = a3
	Mem0[a12 + 0x00000350:word32] = a0
	a0 = 0x40223A96
	call fn40303F28 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000001C:word32]
	a2 = Mem0[a1 + 0x00000018:word32]
	a3 = 0
	a6 = a1
	// succ:  l40223A9E
l40223A9E:
	a7 = a12 + a3 * 0x00000004
	a8 = a6 + a3 * 0x00000002
	a7 = Mem0[a7 + 0x00000380:word32]
	a3 = a3 + 1
	a3 = a3 & 0x000000FF
	a7 = a7 & 0x00000FFF
	a7 = -a7
	a7 = a7 + 0x00000800
	Mem0[a8:word16] = a7
	branch a3 != 8 l40223A9E
	// succ:  l40223ABE l40223A9E
l40223ABE:
	v12 = Mem0[a1 + 0x00000008:uint16]
	a8 = (uint32) v12
	v14 = Mem0[a1 + 0x00000006:uint16]
	a11 = (uint32) v14
	v16 = Mem0[a1 + 0x0000000E:uint16]
	a10 = (uint32) v16
	v17 = Mem0[a1 + 0x00000004:uint16]
	a3 = (uint32) v17
	v18 = Mem0[a1 + 0x00000002:uint16]
	a12 = (uint32) v18
	v20 = Mem0[a1 + 0x0000000C:uint16]
	a9 = (uint32) v20
	a12 = a12 + a3
	a9 = a9 + a10
	a9 = a9 + a9 * 0x00000002
	a11 = a11 + a12
	v21 = Mem0[a1 + 0x0000000A:uint16]
	a10 = (uint32) v21
	a12 = Mem0[a1 + 0x00000014:word32]
	a8 = a8 + a10
	a11 = a11 * 0x00000002 - a9
	Mem0[a2:word16] = a11
	a8 = a8 + a8 * 0x00000002
	a8 = a8 - a9
	Mem0[a0:word16] = a8
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_rom_get_fm_sar_dout_exit
sdk_rom_get_fm_sar_dout_exit:


// sdk_rom_get_noisefloor
// Return size: 0
void sdk_rom_get_noisefloor()
sdk_rom_get_noisefloor_entry:
	// succ:  l40223AF8
l40223AF8:
	a1 = fp
	a2 = 0x4021BDC0
	a2 = Mem0[a2 + 0x00000164:word32]
	a2 = a2 >>u 0x00000014 & 0x00000FFF
	a2 = a2 >>u 3
	a2 = a2 + 0xFFFFFE00
	a2 = a2 << 16
	a2 = a2 >> 16
	return
	// succ:  sdk_rom_get_noisefloor_exit
sdk_rom_get_noisefloor_exit:


// sdk_rom_get_power_db
// Return size: 0
void sdk_rom_get_power_db()
sdk_rom_get_power_db_entry:
	// succ:  l40223B14
l40223B14:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4021BCEC
	a3 = a1 + 2
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a1 + 0x00000004:word32] = a2
	a0 = Mem0[a0 + 0x00000024:word32]
	a2 = a1
	v6 = a0
	a0 = 0x40223B29
	call v6 (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	v7 = Mem0[a1 + 0x00000000:int16]
	a2 = (int32) v7
	a0 = Mem0[a0 + 0x00000038:word32]
	a3 = 3
	v8 = a0
	a0 = 0x40223B38
	call v8 (retsize: 0;)
	a0 = 0x4021BCEC
	a3 = 3
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a1 + 0x00000008:word32] = a2
	a0 = Mem0[a0 + 0x00000038:word32]
	v9 = Mem0[a1 + 0x00000002:int16]
	a2 = (int32) v9
	v10 = a0
	a0 = 0x40223B49
	call v10 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x0000000C:word32]
	a3 = a3 - a2
	a2 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	a2 = a2 + a3
	a2 = a2 << 16
	a2 = a2 >> 16
	return
	// succ:  sdk_rom_get_power_db_exit
sdk_rom_get_power_db_exit:


// sdk_rom_iq_est_disable
// Return size: 0
void sdk_rom_iq_est_disable()
sdk_rom_iq_est_disable_entry:
	// succ:  l40223B64
l40223B64:
	a1 = fp
	a7 = 0x40223B60
	a6 = 0x402040DC
	a3 = 0x4021BDB8
	a5 = Mem0[a3 + 0x0000037C:word32]
	a5 = a5 & a7
	a5 = a5 | a6
	Mem0[a3 + 0x0000037C:word32] = a5
	a4 = -2
	a2 = Mem0[a3 + 0x0000037C:word32]
	a2 = a2 & a4
	Mem0[a3 + 0x0000037C:word32] = a2
	return
	// succ:  sdk_rom_iq_est_disable_exit
sdk_rom_iq_est_disable_exit:


// sdk_rom_iq_est_enable
// Return size: 0
void sdk_rom_iq_est_enable()
sdk_rom_iq_est_enable_entry:
	// succ:  l40223B94
l40223B94:
	a1 = fp
	a9 = 1
	a5 = 0x4021BDB8
	a8 = Mem0[a5 + 0x0000037C:word32]
	a8 = a8 | a9
	Mem0[a5 + 0x0000037C:word32] = a8
	a7 = a3 & 0x00007FFF
	a8 = 2
	a7 = a7 << 30
	a9 = 0x40223B60
	a7 = a7 | a8
	a8 = a2 << 14
	a6 = Mem0[a5 + 0x0000037C:word32]
	a6 = a6 & a9
	a6 = a6 | a8
	a6 = a6 | a7
	Mem0[a5 + 0x0000037C:word32] = a6
	a4 = Mem0[a5 + 0x0000037C:word32]
	branch a4 < 0x00000000 l40223BE0
	// succ:  l40223BD7 l40223BE0
l40223BD7:
	a10 = Mem0[a5 + 0x0000037C:word32]
	branch a10 >= 0x00000000 l40223BD7
	// succ:  l40223BE0 l40223BD7
l40223BE0:
	return
	// succ:  sdk_rom_iq_est_enable_exit
sdk_rom_iq_est_enable_exit:


// sdk_rom_linear_to_db
// Return size: 0
void sdk_rom_linear_to_db()
sdk_rom_linear_to_db_entry:
	// succ:  l40223BE8
l40223BE8:
	a1 = fp
	a4 = 16
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a13
	Mem0[a1 + 0x00000014:word32] = a12
	a13 = a2
	a12 = a3
	a2 = a1
	a3 = 0x40223BE4
	a0 = 0x40203130
	v9 = a0
	a0 = 0x40223C02
	call v9 (retsize: 0;)
	branch a12 >=u 0x00000003 l40223C13
	// succ:  l40223C05 l40223C13
l40223C05:
	a0 = 3
	a0 = a0 - a12
	SAR = 0x00000020 - a0
	a0 = a13 << SAR
	goto l40223C1C
	// succ:  l40223C1C
l40223C13:
	a2 = a12 - 3
	SAR = a2
	a0 = a0 >> SAR
	// succ:  l40223C1C
l40223C1C:
	a12 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x00000018:word32]
	a3 = __nsau(a0)
	a2 = 28
	a2 = a2 - a3
	a2 = a2 << 8
	a2 = a2 >> 24
	branch a2 >= 1 l40223C39
	// succ:  l40223C31 l40223C39
l40223C31:
	a0 = a0 & 0x0000000F
	a2 = 0
	goto l40223C44
	// succ:  l40223C44
l40223C39:
	a3 = a2 - 1
	SAR = a3
	a0 = a0 >> SAR
	a0 = a0 & 0x0000000F
	// succ:  l40223C44
l40223C44:
	a4 = a2 << 27
	a5 = a0 + a1
	a3 = a2 << 28
	a0 = Mem0[a1 + 0x00000010:word32]
	a3 = a3 + a4
	v12 = Mem0[a5 + 0x00000000:byte]
	a2 = (uint32) v12
	a1 = a1 + 32
	a2 = a2 + a3
	a2 = a2 << 16
	a2 = a2 >> 16
	return
	// succ:  sdk_rom_linear_to_db_exit
sdk_rom_linear_to_db_exit:


// sdk_rom_set_txclk_en
// Return size: 0
void sdk_rom_set_txclk_en()
sdk_rom_set_txclk_en_entry:
	// succ:  l40223C60
l40223C60:
	a1 = fp
	a3 = 0
	a4 = 28
	a5 = 6
	a6 = 6
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a0 = 0x4021BCEC
	a12 = a2
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = 0x00000077
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a12
	v11 = a0
	a0 = 0x40223C81
	call v11 (retsize: 0;)
	a7 = a12
	a2 = 0x0000007C
	a3 = 1
	a0 = 0x4021BCEC
	a4 = 21
	a0 = Mem0[a0 + 0x00000000:word32]
	a5 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 0
	v12 = a0
	a0 = 0x40223C99
	call v12 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_set_txclk_en_exit
sdk_rom_set_txclk_en_exit:


// sdk_rom_set_rxclk_en
// Return size: 0
void sdk_rom_set_rxclk_en()
sdk_rom_set_rxclk_en_entry:
	// succ:  l40223CA4
l40223CA4:
	a1 = fp
	a3 = 0
	a4 = 28
	a5 = 5
	a6 = 5
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a0 = 0x4021BCEC
	a12 = a2
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = 0x00000077
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a12
	v11 = a0
	a0 = 0x40223CC5
	call v11 (retsize: 0;)
	a7 = a12
	a2 = 0x0000007C
	a3 = 1
	a0 = 0x4021BCEC
	a4 = 21
	a0 = Mem0[a0 + 0x00000000:word32]
	a5 = 1
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 1
	v12 = a0
	a0 = 0x40223CDD
	call v12 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_set_rxclk_en_exit
sdk_rom_set_rxclk_en_exit:


// sdk_rom_mhz2ieee
// Return size: 0
void sdk_rom_mhz2ieee()
sdk_rom_mhz2ieee_entry:
	// succ:  l40223CE8
l40223CE8:
	a1 = fp
	a6 = 0x40214A20
	a7 = 0x40214A24
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40214948
	branch (a3 & 0x00000080) == 0x00000000 l40223D1B
	// succ:  l40223CF9 l40223D1B
l40223CF9:
	branch a2 == a0 l40223D40
	// succ:  l40223CFC l40223D40
l40223CFC:
	branch a6 <u a2 l40223D2E
	// succ:  l40223CFF l40223D2E
l40223CFF:
	a2 = a2 + a7
	a3 = 5
	a0 = 0x40202548
	v8 = a0
	a0 = 0x40223D09
	call v8 (retsize: 0;)
	a2 = a2 << 8
	a2 = a2 >> 24
	goto l40223D14
	// succ:  l40223D14
l40223D12:
	a2 = -1
	// succ:  l40223D14
l40223D14:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_mhz2ieee_exit
l40223D1B:
	branch a2 == a0 l40223D40
	// succ:  l40223D1E l40223D40
l40223D1E:
	branch a6 <u a2 l40223D12
	// succ:  l40223D21 l40223D12
l40223D21:
	a2 = a2 + a7
	a3 = 5
	a0 = 0x40202548
	v9 = a0
	a0 = 0x40223D2B
	call v9 (retsize: 0;)
	goto l40263D09
	// succ:  l40263D09
l40223D2E:
	a4 = 0x40214A28
	a3 = 20
	a2 = a2 + a4
	a0 = 0x40202548
	v11 = a0
	a0 = 0x40223D3B
	call v11 (retsize: 0;)
	a2 = a2 + 15
	goto l40263D09
	// succ:  l40263D09
l40223D40:
	a2 = 14
	goto l40263D14
	// succ:  l40263D14
l40263D09:
l40263D14:
sdk_rom_mhz2ieee_exit:


// sdk_rom_rxiq_get_mis
// Return size: 0
void sdk_rom_rxiq_get_mis()
sdk_rom_rxiq_get_mis_entry:
	// succ:  l40223D4C
l40223D4C:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000014:word32] = a15
	Mem0[a1 + 0x00000018:word32] = a5
	Mem0[a1 + 0x00000020:word32] = a7
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x0000001C:word32] = a6
	a6 = a2 - 2
	a0 = 0x4021BDB8
	a7 = Mem0[a0 + 0x00000380:word32]
	SAR = a6
	a7 = a0 >> SAR
	a8 = Mem0[a0 + 0x0000038C:word32]
	SAR = a6
	a8 = a0 >> SAR
	a15 = a7 - a8
	a5 = Mem0[a0 + 0x00000388:word32]
	SAR = a6
	a5 = a0 >> SAR
	a9 = 0
	a0 = Mem0[a0 + 0x00000384:word32]
	SAR = a6
	a2 = a7 + a8
	a13 = a2
	a8 = 0
	a7 = Mem0[a1 + 0x0000001C:word32]
	a6 = Mem0[a1 + 0x00000018:word32]
	a0 = a0 >> SAR
	a14 = a5 + a0
	a6 = a6 ^ a7
	a0 = a0 - a5
	a12 = a0
	a5 = a3 ^ a4
	a5 = a5 ^ a6
	a5 = a5 & 0x000000FF
	branch a5 == 0x00000000 l40223DC1
	// succ:  l40223DB9 l40223DC1
l40223DB9:
	a12 = a14
	a13 = a15
	a14 = a0
	a15 = a2
	// succ:  l40223DC1
l40223DC1:
	a0 = 1
	a11 = a12 * a12
	a10 = a13 * a13
	a10 = a10 + a11
	Mem0[a1 + 0x00000028:word32] = a10
	branch a10 != 0x00000000 l40223DD0
	// succ:  l40223DCD_1 l40223DD0
l40223DCD_1:
	a9 = a0
	// succ:  l40223DD0
l40223DD0:
	a10 = a10 >> 31
	Mem0[a1 + 0x00000024:word32] = a10
	branch a10 != 0x00000000 l40223DD8
	// succ:  l40223DD5_2 l40223DD8
l40223DD5_2:
	a8 = a0
	// succ:  l40223DD8
l40223DD8:
	branch (a8 & a9) == 0x00000000 l40223DE1
	// succ:  l40223DDB l40223DE1
l40223DDB:
	Mem0[a1 + 0x00000028:word32] = a0
	a2 = 0
	Mem0[a1 + 0x00000024:word32] = a2
	// succ:  l40223DE1
l40223DE1:
	a5 = Mem0[a1 + 0x00000024:word32]
	a4 = a14 * a12
	a3 = a15 * a13
	a3 = a3 - a4
	a2 = a3 << 23
	a4 = Mem0[a1 + 0x00000028:word32]
	a3 = a3 >> 23
	a0 = 0x40222020
	v19 = a0
	a0 = 0x40223DFA
	call v19 (retsize: 0;)
	a7 = Mem0[a1 + 0x0000001C:word32]
	a4 = a14 * a13
	a3 = a15 * a12
	a6 = a2 << 8
	a6 = a6 >> 24
	a3 = a3 + a4
	a6 = a6 + 1
	a4 = Mem0[a1 + 0x00000028:word32]
	a2 = a3 << 23
	a6 = a6 >> 1
	a5 = -a6
	a3 = a3 >> 23
	branch a7 != 0x00000000 l40223E1D
	// succ:  l40223E1A_1 l40223E1D
l40223E1A_1:
	a5 = a6
	// succ:  l40223E1D
l40223E1D:
	a6 = Mem0[a1 + 0x00000020:word32]
	Mem0[a1:word32] = a5
	Mem0[a6:byte] = a5
	a5 = Mem0[a1 + 0x00000024:word32]
	a0 = 0x40222020
	v20 = a0
	a0 = 0x40223E2C
	call v20 (retsize: 0;)
	a8 = a2 << 8
	a9 = Mem0[a1 + 0x00000018:word32]
	a8 = a8 >> 24
	a8 = a8 + 1
	a8 = a8 >> 1
	a0 = -a8
	branch a9 != 0x00000000 l40223E3F
	// succ:  l40223E3C_2 l40223E3F
l40223E3C_2:
	a0 = a8
	// succ:  l40223E3F
l40223E3F:
	a8 = Mem0[a1 + 0x00000020:word32]
	v21 = Mem0[a1 + 0x00000030:byte]
	a7 = (uint32) v21
	Mem0[a8 + 0x00000001:byte] = a0
	branch a7 == 0x00000000 l40223E64
	// succ:  l40223E49 l40223E64
l40223E49:
	a5 = Mem0[a1 + 0x00000024:word32]
	a4 = Mem0[a1 + 0x00000028:word32]
	a2 = 0x40223D48
	a6 = Mem0[a1 + 0x00000000:word32]
	a7 = a0 << 8
	a7 = a7 >> 24
	a6 = a6 << 8
	a6 = a6 >> 24
	a0 = 0x4021262C
	v22 = a0
	a0 = 0x40223E64
	call v22 (retsize: 0;)
	// succ:  l40223E64
l40223E64:
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_rom_rxiq_get_mis_exit
sdk_rom_rxiq_get_mis_exit:


// sdk_rom_sar_init
// Return size: 0
void sdk_rom_sar_init()
sdk_rom_sar_init_entry:
	// succ:  l40223E74
l40223E74:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a4 = 0x4021CB2C
	a3 = 0x402125CC
	a0 = 0x4021BCEC
	a2 = Mem0[a3 + 0x00000110:word32]
	a2 = a2 | a4
	a4 = 0
	a5 = 4
	a6 = 4
	a7 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a3 + 0x00000110:word32] = a2
	a2 = 0x0000006C
	a0 = Mem0[a0 + 0x0000009C:word32]
	a3 = 2
	v10 = a0
	a0 = 0x40223EA6
	call v10 (retsize: 0;)
	a2 = 0x0000006C
	a3 = 2
	a4 = 1
	a0 = 0x4021BCEC
	a5 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 2
	v11 = a0
	a0 = 0x40223EBE
	call v11 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_sar_init_exit
sdk_rom_sar_init_exit:


// sdk_rom_set_ana_inf_tx_scale
// Return size: 0
void sdk_rom_set_ana_inf_tx_scale()
sdk_rom_set_ana_inf_tx_scale_entry:
	// succ:  l40223EC8
l40223EC8:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	branch a2 <u 0x00000040 l40223EDD
	// succ:  l40223ED2 l40223EDD
l40223ED2:
	a12 = 63
	a7 = a12 - a2
	a7 = a7 & 0x000000FF
	goto l40223EE1
	// succ:  l40223EE1
l40223EDD:
	a7 = 0
	a12 = a2
	// succ:  l40223EE1
l40223EE1:
	a2 = 0x00000077
	a3 = 0
	a0 = 0x4021BCEC
	a4 = 9
	a0 = Mem0[a0 + 0x00000000:word32]
	a5 = 7
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 0
	v11 = a0
	a0 = 0x40223EF7
	call v11 (retsize: 0;)
	a2 = a12
	a0 = Mem0[a1 + 0x00000000:word32]
	a12 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_set_ana_inf_tx_scale_exit
sdk_rom_set_ana_inf_tx_scale_exit:


// sdk_rom_set_loopback_gain
// Return size: 0
void sdk_rom_set_loopback_gain()
sdk_rom_set_loopback_gain_entry:
	// succ:  l40223F04
l40223F04:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000000C:word32] = a5
	Mem0[a1 + 0x00000008:word32] = a4
	Mem0[a1 + 0x00000004:word32] = a3
	Mem0[a1 + 0x00000010:word32] = a0
	Mem0[a1:word32] = a2
	Mem0[a1 + 0x00000014:word32] = a12
	a12 = 0x4021BCEC
	a2 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0x00000185
	v9 = a0
	a0 = 0x40223F25
	call v9 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000000:word32]
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 7
	a0 = Mem0[a0 + 0x000000AC:word32]
	a3 = 1
	v10 = a0
	a0 = 0x40223F33
	call v10 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 2
	a0 = Mem0[a0 + 0x000000AC:word32]
	a3 = 1
	v11 = a0
	a0 = 0x40223F41
	call v11 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 3
	a0 = Mem0[a0 + 0x000000AC:word32]
	a3 = 1
	v12 = a0
	a0 = 0x40223F4F
	call v12 (retsize: 0;)
	a4 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 3
	a0 = Mem0[a0 + 0x000000AC:word32]
	a3 = 2
	v13 = a0
	a0 = 0x40223F5D
	call v13 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_rom_set_loopback_gain_exit
sdk_rom_set_loopback_gain_exit:


// sdk_rom_set_noise_floor
// Return size: 0
void sdk_rom_set_noise_floor()
sdk_rom_set_noise_floor_entry:
	// succ:  l40223F68
l40223F68:
	a1 = fp
	a9 = 0xFFFFFE00
	a8 = a2 << 31
	a4 = 0x4021BDC0
	a8 = a8 + 0x00000200
	a8 = a8 & 0x000001FF
	a7 = Mem0[a4 + 0x00000164:word32]
	a7 = a7 & a9
	a7 = a7 | a8
	Mem0[a4 + 0x00000164:word32] = a7
	a6 = 0x4021DBAC
	a5 = 2
	a3 = Mem0[a4 + 0x00000160:word32]
	a3 = a3 & a6
	a3 = a3 | a5
	Mem0[a4 + 0x00000160:word32] = a3
	return
	// succ:  sdk_rom_set_noise_floor_exit
sdk_rom_set_noise_floor_exit:


// sdk_rom_start_noisefloor
// Return size: 0
void sdk_rom_start_noisefloor()
sdk_rom_start_noisefloor_entry:
	// succ:  l40223FA4
l40223FA4:
	a1 = fp
	a9 = 0x4021E474
	a7 = 0x000001A0
	a8 = a2 & 0x00000007
	a4 = 0x4021BDC0
	a8 = a8 << 23
	a6 = Mem0[a4 + 0x00000164:word32]
	a6 = a6 & a9
	a6 = a6 | a8
	a6 = a6 | a7
	Mem0[a4 + 0x00000164:word32] = a6
	a5 = 0x4021E478
	a3 = Mem0[a4 + 0x00000160:word32]
	a3 = a3 | a5
	Mem0[a4 + 0x00000160:word32] = a3
	return
	// succ:  sdk_rom_start_noisefloor_exit
sdk_rom_start_noisefloor_exit:


// sdk_rom_start_tx_tone
// Return size: 0
void sdk_rom_start_tx_tone()
sdk_rom_start_tx_tone_entry:
	// succ:  l40223FE0
l40223FE0:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000004:word32] = a4
	Mem0[a1 + 0x00000008:word32] = a6
	Mem0[a1 + 0x0000000C:word32] = a7
	Mem0[a1 + 0x00000018:word32] = a13
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a0
	a0 = 0x4021BCEC
	a12 = a5
	a0 = Mem0[a0 + 0x00000000:word32]
	a13 = a2
	a0 = Mem0[a0 + 0x0000003C:word32]
	a2 = 1
	v12 = a0
	a0 = 0x40224001
	call v12 (retsize: 0;)
	a11 = 0
	a5 = 0x00000100
	a0 = 0x4021BDB8
	a2 = 0x40204630
	branch a13 == 0x00000000 l40224036
	// succ:  l4022400E l40224036
l4022400E:
	a6 = Mem0[a1 + 0x00000004:word32]
	a4 = Mem0[a1 + 0x00000000:word32]
	a6 = a5 - a6
	a6 = a6 & 0x000000FF
	a6 = a6 << 22
	a4 = a4 | a6
	a6 = a13 << 14
	a3 = Mem0[a0 + 0x000003B8:word32]
	a3 = a3 & a2
	a3 = a3 | a6
	a3 = a3 | a4
	Mem0[a0 + 0x000003B8:word32] = a3
	// succ:  l40224036
l40224036:
	branch a12 == 0x00000000 l40224063
	// succ:  l40224038 l40224063
l40224038:
	a9 = Mem0[a1 + 0x0000000C:word32]
	a8 = Mem0[a1 + 0x00000008:word32]
	a9 = a5 - a9
	a9 = a9 & 0x000000FF
	a9 = a9 << 22
	a8 = a8 | a9
	a9 = a12 << 14
	a7 = Mem0[a0 + 0x000003BC:word32]
	a7 = a7 & a2
	a7 = a7 | a11
	a7 = a7 | a9
	a7 = a7 | a8
	Mem0[a0 + 0x000003BC:word32] = a7
	// succ:  l40224063
l40224063:
	v16 = Mem0[a1 + 0x00000020:byte]
	a2 = (uint32) v16
	a8 = 0x40223FDC
	branch a2 == 0x00000000 l4022409B
	// succ:  l4022406B l4022409B
l4022406B:
	a7 = a2 << 4
	a6 = a2 << 14
	v17 = Mem0[a1 + 0x00000028:byte]
	a9 = (uint32) v17
	v18 = Mem0[a1 + 0x00000024:int16]
	a4 = (int32) v18
	a9 = a5 - a9
	a9 = a9 & 0x000000FF
	a9 = a9 << 22
	a4 = a4 | a9
	a3 = Mem0[a0 + 0x000003C4:word32]
	a3 = a3 & a8
	a3 = a3 | a7
	a3 = a3 | a6
	a3 = a3 | a4
	Mem0[a0 + 0x000003C4:word32] = a3
	// succ:  l4022409B
l4022409B:
	a12 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_rom_start_tx_tone_exit
sdk_rom_start_tx_tone_exit:


// sdk_rom_stop_tx_tone
// Return size: 0
void sdk_rom_stop_tx_tone()
sdk_rom_stop_tx_tone_entry:
	// succ:  l402240A8
l402240A8:
	a1 = fp
	a1 = a1 - 16
	a4 = 0x4021A098
	Mem0[a1:word32] = a0
	a0 = 0x4021BDB8
	branch a2 == 1 l402240EC
	// succ:  l402240B6 l402240EC
l402240B6:
	branch a2 == 2 l40224120
	// succ:  l402240B9 l40224120
l402240B9:
	branch a2 == 3 l4022410E
	// succ:  l402240BC l4022410E
l402240BC:
	a5 = Mem0[a0 + 0x000003B8:word32]
	a5 = a5 & a4
	Mem0[a0 + 0x000003B8:word32] = a5
	a3 = Mem0[a0 + 0x000003BC:word32]
	a3 = a3 & a4
	Mem0[a0 + 0x000003BC:word32] = a3
	a2 = Mem0[a0 + 0x000003C4:word32]
	a2 = a2 & a4
	Mem0[a0 + 0x000003C4:word32] = a2
	goto l402240FB
	// succ:  l402240FB
l402240EC:
	a6 = Mem0[a0 + 0x000003B8:word32]
	a6 = a6 & a4
	Mem0[a0 + 0x000003B8:word32] = a6
	// succ:  l402240FB
l402240FB:
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000003C:word32]
	a2 = 0
	v9 = a0
	a0 = 0x40224107
	call v9 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_stop_tx_tone_exit
l4022410E:
	a2 = Mem0[a0 + 0x000003C4:word32]
	a2 = a2 & a4
	Mem0[a0 + 0x000003C4:word32] = a2
	goto l402640FB
	// succ:  l402640FB
l40224120:
	a3 = Mem0[a0 + 0x000003BC:word32]
	a3 = a3 & a4
	Mem0[a0 + 0x000003BC:word32] = a3
	// succ:  l402640FB
l402640FB:
sdk_rom_stop_tx_tone_exit:


// sdk_rom_txtone_linear_pwr
// Return size: 0
void sdk_rom_txtone_linear_pwr()
sdk_rom_txtone_linear_pwr_entry:
	// succ:  l40224134
l40224134:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a3
	Mem0[a1 + 0x00000014:word32] = a15
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000008:word32] = a12
	a14 = a2
	branch a2 == 0x00000000 l40224188
	// succ:  l40224147 l40224188
l40224147:
	a12 = 0
	a13 = 0
	a15 = a3
	// succ:  l4022414D
l4022414D:
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a1
	a0 = Mem0[a0 + 0x00000024:word32]
	a3 = a1 + 2
	v10 = a0
	a0 = 0x4022415B
	call v10 (retsize: 0;)
	a4 = 1
	v12 = Mem0[a1 + 0x00000002:int16]
	a3 = (int32) v12
	v13 = Mem0[a1 + 0x00000000:int16]
	a2 = (int32) v13
	SAR = 0x00000020 - a15
	a2 = a2 << SAR
	branch a3 != 0x00000000 l4022416C
	// succ:  l40224169_1 l4022416C
l40224169_1:
	a3 = a4
	// succ:  l4022416C
l4022416C:
	Mem0[a1 + 0x00000002:word16] = a3
	a0 = 0x40202548
	v15 = a0
	a0 = 0x40224175
	call v15 (retsize: 0;)
	a12 = a12 + a2
	a13 = a13 + 1
	a13 = a13 & 0x000000FF
	a12 = a12 << 16
	a12 = a12 >> 16
	branch a14 != a13 l4022414D
	// succ:  l40224185 l4022414D
l40224185:
	goto l4022418A
	// succ:  l4022418A
l40224188:
	a12 = 0
	// succ:  l4022418A
l4022418A:
	a0 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a2 = a12
	a15 = Mem0[a1 + 0x00000014:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_rom_txtone_linear_pwr_exit
sdk_rom_txtone_linear_pwr_exit:


// sdk_rom_tx_mac_disable
// Return size: 0
void sdk_rom_tx_mac_disable()
sdk_rom_tx_mac_disable_entry:
	// succ:  l4022419C
l4022419C:
	a1 = fp
	a3 = 0x4021319C
	a5 = Mem0[a3 + 0x000003E0:word32]
	a7 = 0x40204458
	a6 = a5 >>u 1
	a6 = a6 & a7
	a7 = 0x000000FC
	a5 = a5 & a7
	a5 = a5 | a6
	a6 = 3
	a5 = a5 | a6
	Mem0[a3 + 0x000003E0:word32] = a5
	a4 = -2
	a2 = Mem0[a3 + 0x00000294:word32]
	a2 = a2 & a4
	Mem0[a3 + 0x00000294:word32] = a2
	return
	// succ:  sdk_rom_tx_mac_disable_exit
sdk_rom_tx_mac_disable_exit:


// sdk_rom_tx_mac_enable
// Return size: 0
void sdk_rom_tx_mac_enable()
sdk_rom_tx_mac_enable_entry:
	// succ:  l402241D8
l402241D8:
	a1 = fp
	a3 = 0x4021319C
	a5 = Mem0[a3 + 0x000003E0:word32]
	a7 = 0x40204458
	a6 = a5 >>u 1
	a6 = a6 & a7
	a7 = 0x000000FC
	a5 = a5 & a7
	a5 = a5 | a6
	Mem0[a3 + 0x000003E0:word32] = a5
	a4 = 1
	a2 = Mem0[a3 + 0x00000294:word32]
	a2 = a2 | a4
	Mem0[a3 + 0x00000294:word32] = a2
	return
	// succ:  sdk_rom_tx_mac_enable_exit
sdk_rom_tx_mac_enable_exit:


// sdk_rom_ana_inf_gating_en
// Return size: 0
void sdk_rom_ana_inf_gating_en()
sdk_rom_ana_inf_gating_en_entry:
	// succ:  l4022420C
l4022420C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	a13 = a2
	a14 = a4
	a12 = 0x4021BCEC
	branch a2 == 0x00000000 l40224316
	// succ:  l40224223 l40224316
l40224223:
	a2 = 0x00000077
	a3 = 0
	a4 = 28
	a5 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v13 = a0
	a0 = 0x40224238
	call v13 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 26
	a5 = 4
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 4
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v14 = a0
	a0 = 0x4022424D
	call v14 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 26
	a5 = 4
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 4
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v15 = a0
	a0 = 0x40224262
	call v15 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 26
	a5 = 5
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 5
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v16 = a0
	a0 = 0x40224277
	call v16 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 26
	a5 = 5
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 5
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v17 = a0
	a0 = 0x4022428C
	call v17 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 0
	a5 = 7
	a6 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	a7 = Mem0[a1 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a7 >>u 0x0000000C & 0x000000FF
	v18 = a0
	a0 = 0x402242A4
	call v18 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 1
	a5 = 7
	a6 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	a7 = Mem0[a1 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a7 >>u 0x00000004 & 0x000000FF
	v19 = a0
	a0 = 0x402242BC
	call v19 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 2
	a5 = 3
	a6 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	a7 = Mem0[a1 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a7 & 0x0000000F
	v20 = a0
	a0 = 0x402242D4
	call v20 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 4
	a5 = 7
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a14 & 0x000000FF
	v21 = a0
	a0 = 0x402242EA
	call v21 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 3
	a5 = 7
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a14 >>u 0x00000008 & 0x000000FF
	v22 = a0
	a0 = 0x40224300
	call v22 (retsize: 0;)
	a7 = a14 >>u 0x00000010 & 0x0000000F
	a2 = 0x00000077
	a3 = 0
	a4 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 7
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 4
	v23 = a0
	a0 = 0x40224316
	call v23 (retsize: 0;)
	// succ:  l40224316
l40224316:
	a4 = 15
	a5 = 3
	a6 = 3
	a3 = a13 & 0x00000001
	a2 = 1
	a0 = Mem0[a12 + 0x00000000:word32]
	a14 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	branch a3 != 0x00000000 l4022432B
	// succ:  l40224328_1 l4022432B
l40224328_1:
	a14 = a2
	// succ:  l4022432B
l4022432B:
	a7 = a14
	a2 = 0x00000077
	a3 = 0
	v24 = a0
	a0 = 0x40224335
	call v24 (retsize: 0;)
	a7 = a14
	a2 = 0x00000077
	a3 = 0
	a4 = 24
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 0
	v25 = a0
	a0 = 0x4022434A
	call v25 (retsize: 0;)
	a7 = a13
	a2 = 0x00000077
	a3 = 0
	a4 = 28
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 0
	v26 = a0
	a0 = 0x4022435F
	call v26 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_rom_ana_inf_gating_en_exit
sdk_rom_ana_inf_gating_en_exit:


// sdk_rom_set_channel_freq
// Return size: 0
void sdk_rom_set_channel_freq()
sdk_rom_set_channel_freq_entry:
	// succ:  l40224378
l40224378:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a6
	Mem0[a1 + 0x00000020:word32] = a7
	Mem0[a1 + 0x00000004:word32] = a5
	Mem0[a1 + 0x00000010:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a14
	a13 = a2
	branch a2 < 1 l4022439D
	// succ:  l40224390 l4022439D
l40224390:
	a0 = 13
	branch a0 < a2 l4022439D
	// succ:  l40224395 l4022439D
l40224395:
	a14 = a2 - 1
	a14 = a14 & 0x000000FF
	goto l4022439F
	// succ:  l4022439F
l4022439D:
	a14 = 13
	// succ:  l4022439F
l4022439F:
	a12 = 0x4021BCEC
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000DC:word32]
	Mem0[a1 + 0x00000024:word32] = a4
	v13 = a0
	a0 = 0x402243AC
	call v13 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000024:word32]
	a2 = 14
	branch a13 >=u a2 l402243E8
	// succ:  l402243B3 l402243E8
l402243B3:
	a4 = 0x4022436C
	a3 = a13 + a13 * 0x00000002
	a3 = a3 + a4
	call a3 (retsize: 4;)
	return
	// succ:  sdk_rom_set_channel_freq_exit
l402243E8:
	a12 = 0x40214948
	a4 = a0 + a14 * 0x00000002
	v14 = Mem0[a4 + 0x00000000:int16]
	a4 = (int32) v14
	SAR = a14
	branch a4 != 0x00000000 l4022444C
	// succ:  l402243F7 l4022444C
l402243F7:
	a5 = Mem0[a1 + 0x0000000C:word32]
	a0 = 59
	branch a5 == 0x00000000 l40224560
	// succ:  l402243FE l40224560
l402243FE:
	a6 = 91
	a10 = 93
	a3 = 94
	a11 = 0x00000076
	a14 = 0xFFFFFF83
	a4 = 0xFFFFFFB7
	a5 = 92
	a7 = 14
	branch a13 <u a7 l40224417
	// succ:  l40224414 l40224417
l40224414:
	goto l402244E6
	// succ:  l402244E6
l40224417:
	a9 = 0x40224370
	a8 = a13 + a13 * 0x00000002
	a8 = a8 + a9
	call a8 (retsize: 4;)
	return
	// succ:  sdk_rom_set_channel_freq_exit
l4022444C:
	a10 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a10 = Mem0[a10 + 0x00000000:word32]
	a13 = a13 + a14 * 0x00000004
	a10 = a10 >> SAR
	branch (a10 & 0x00000001) != 0x00000000 l40224497
	// succ:  l4022445B l40224497
l4022445B:
	a0 = 0x4021BCEC
	a3 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a12
	a0 = Mem0[a0 + 0x000000E4:word32]
	a5 = a1
	v18 = a0
	a0 = 0x4022446C
	call v18 (retsize: 0;)
	SAR = 0x00000020 - a14
	a4 = 1
	a3 = Mem0[a1 + 0x00000004:word32]
	v19 = Mem0[a1 + 0x00000002:byte]
	a5 = (uint32) v19
	v20 = Mem0[a1 + 0x00000001:byte]
	a7 = (uint32) v20
	v21 = Mem0[a1 + 0x00000000:byte]
	a6 = (uint32) v21
	a7 = a7 << 24
	a6 = a6 << 16
	a6 = a6 | a7
	a5 = a5 | a6
	Mem0[a13:word32] = a5
	a2 = Mem0[a3 + 0x00000000:word32]
	a4 = a4 << SAR
	a2 = a2 | a4
	Mem0[a3:word32] = a2
	goto l402244B8
	// succ:  l402244B8
l40224497:
	a9 = Mem0[a13 + 0x00000000:word32]
	a9 = a9 >>u 0x00000010 & 0x0000FFFF
	Mem0[a1:byte] = a9
	a8 = Mem0[a13 + 0x00000000:word32]
	a8 = a8 >>u 8
	Mem0[a1 + 0x00000001:byte] = a8
	a0 = Mem0[a13 + 0x00000000:word32]
	// succ:  l402244B5
l402244B5:
	Mem0[a1 + 0x00000002:byte] = a0
	// succ:  l402244B8
l402244B8:
	a14 = 0x4021BCEC
	a0 = Mem0[a14 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000E0:word32]
	a2 = a1 | a1
	v24 = a0
	a0 = 0x402244C7
	call v24 (retsize: 0;)
	a0 = Mem0[a14 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000D8:word32]
	a13 = Mem0[a1 + 0x00000020:word32]
	v25 = a0
	a0 = 0x402244D2
	call v25 (retsize: 0;)
	a2 = a13
	a0 = 0x402244D7
	call fn40303F28 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000018:word32]
	a2 = a12
	a14 = Mem0[a1 + 0x0000001C:word32]
	a12 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_rom_set_channel_freq_exit
l402244E6:
	a0 = a11
	a3 = 95
	a2 = 0x00000062
	Mem0[a1 + 0x00000001:byte] = a2
	Mem0[a1:byte] = a3
	goto l402644B5
	// succ:  l402644B5
l40224560:
	a6 = 17
	a10 = -26
	a5 = 0xFFFFFFBB
	a14 = 0xFFFFFF91
	a3 = 0x00000066
	a7 = 50
	a11 = 49
	a4 = 48
	a8 = 14
	branch a13 >=u a8 l402245AD
	// succ:  l40224578 l402245AD
l40224578:
	a2 = 0x40224374
	a9 = a13 + a13 * 0x00000002
	a9 = a9 + a2
	call a9 (retsize: 4;)
	return
	// succ:  sdk_rom_set_channel_freq_exit
l402245AD:
	a4 = a7
	a6 = 0xFFFFFFCC
	a14 = a6
	a5 = a6
	a0 = a14
	a11 = a4
	a3 = a5
	a4 = a11
	Mem0[a1 + 0x00000001:byte] = a0
	// succ:  l402245C9
l402245C9:
	a0 = a3
	Mem0[a1:byte] = a4
	// succ:  l402644B5
l402644B5:
sdk_rom_set_channel_freq_exit:


// sdk_rom_chip_50_set_channel
// Return size: 0
void sdk_rom_chip_50_set_channel()
sdk_rom_chip_50_set_channel_entry:
	// succ:  l40224688
l40224688:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a14
	a12 = a2
	a14 = a4
	a13 = 0x4021BCEC
	a4 = a5
	Mem0[a1 + 0x0000001C:word32] = a14
	a5 = a6
	a0 = Mem0[a13 + 0x00000000:word32]
	a6 = a7
	a0 = Mem0[a0 + 0x00000080:word32]
	v12 = Mem0[a1 + 0x00000020:uint16]
	a7 = (uint32) v12
	v13 = a0
	a0 = 0x402246AD
	call v13 (retsize: 0;)
	a3 = a2
	a0 = Mem0[a1 + 0x0000001C:word32]
	a8 = 14
	branch a12 >=u a8 l402246EB
	// succ:  l402246B6 l402246EB
l402246B6:
	a10 = 0x40224680
	a9 = a12 + a12 * 0x00000002
	a9 = a9 + a10
	call a9 (retsize: 4;)
	return
	// succ:  sdk_rom_chip_50_set_channel_exit
l402246EB:
	a13 = 0x0000006A
	a14 = 0x00000108
	branch a0 == 0x00000000 l40224736
	// succ:  l402246F4 l40224736
l402246F4:
	a11 = 0x4021319C
	a11 = Mem0[a11 + 0x00000270:word32]
	Mem0[a1 + 0x00000018:word32] = a3
	branch (a11 & 0x00000002) != 0x00000000 l40224718
	// succ:  l40224702 l40224718
l40224702:
	a2 = 0x00000067
	a0 = 0x4021BCEC
	a3 = 4
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = 7
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 4
	v19 = a0
	a0 = 0x40224716
	call v19 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000018:word32]
	// succ:  l40224718
l40224718:
	a2 = 0x00000001
	a0 = 0x4021BCEC
	a4 = 0x40224684
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = a3 * a14
	a0 = Mem0[a0 + 0x0000007C:word32]
	v20 = (uint16) a14
	v21 = (uint16) a4
	a4 = v20 *u v21
	v22 = a0
	a0 = 0x40224730
	call v22 (retsize: 0;)
	a2 = 0x00000005
	a0 = 0x40224736
	call fn40303F28 (retsize: 0;)
	// succ:  l40224736
l40224736:
	a5 = 0x4021BDC0
	a7 = 0x4021C8F0
	a6 = 0x4021C8F4
	a7 = a13 + a7
	a7 = a7 << 15
	a4 = Mem0[a5 + 0x00000114:word32]
	a4 = a4 & 0x00001FFF
	a4 = a4 | a7
	a4 = a4 | a6
	Mem0[a5 + 0x00000114:word32] = a4
	a2 = a12 - 5
	branch a2 == 0x00000000 l402247F0
	// succ:  l4022475F l402247F0
l4022475F:
	branch a12 == 6 l40224781
	// succ:  l40224762 l40224781
l40224762:
	a8 = a12 - 7
	branch a8 == 0x00000000 l402247F5
	// succ:  l40224768 l402247F5
l40224768:
	a9 = a12 - 8
	branch a9 == 0x00000000 l402247FA
	// succ:  l4022476E l402247FA
l4022476E:
	a10 = a12 - 13
	branch a10 == 0x00000000 l402247F0
	// succ:  l40224774 l402247F0
l40224774:
	a13 = a12 - 14
	a11 = -4
	a2 = 0
	branch a13 != 0x00000000 l4022477E
	// succ:  l4022477B_1 l4022477E
l4022477B_1:
	a2 = a11
	// succ:  l4022477E
l4022477E:
	goto l40224784
	// succ:  l40224784
l40224781:
	a2 = 0x00000003
	// succ:  l40224784
l40224784:
	a13 = 0x40204520
	a12 = 0
	a0 = 0x4022478C
	call fn40311408 (retsize: 0;)
	Mem0[a1 + 0x00000004:word32] = a2
	Mem0[a1:word32] = a3
	a5 = 0x4021EB20
	a4 = 0x4021EB24
	a0 = 0x40224799
	call fn4030487C (retsize: 0;)
	a5 = a13
	a4 = a12
	a0 = 0x402247A0
	call fn40310908 (retsize: 0;)
	a0 = 0x402247A3
	call fn40310F58 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a5 = 0x4021EB28
	a14 = a2
	a4 = 0x4021EB24
	a2 = Mem0[a1 + 0x00000004:word32]
	a0 = 0x402247B2
	call fn4030487C (retsize: 0;)
	a4 = a12
	a5 = a13
	a0 = 0x402247B9
	call fn40310908 (retsize: 0;)
	a12 = 0x4021E4C4
	a0 = 0x402247BF
	call fn40310F58 (retsize: 0;)
	a0 = 0x40204508
	a3 = a14 & 0x000003FF
	a0 = a2 & a0
	a3 = a3 << 12
	a2 = 0x40204634
	a14 = Mem0[a12 + 0x000002A0:word32]
	a14 = a14 & a2
	a14 = a14 | a3
	a14 = a14 | a0
	Mem0[a12 + 0x000002A0:word32] = a14
	a13 = Mem0[a1 + 0x00000010:word32]
	a12 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_rom_chip_50_set_channel_exit
l402247F0:
	a2 = 8
	goto l40264784
	// succ:  l40264784
l402247F5:
	a2 = -2
	goto l40264784
	// succ:  l40264784
l402247FA:
	a2 = -7
	// succ:  l40264784
l40264784:
sdk_rom_chip_50_set_channel_exit:


// sdk_rom_chip_v5_rx_init
// Return size: 0
void sdk_rom_chip_v5_rx_init()
sdk_rom_chip_v5_rx_init_entry:
	// succ:  l40224874
l40224874:
	a1 = fp
	a2 = 0x00000061
	a3 = 1
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	a12 = 0x4021BCEC
	Mem0[a1:word32] = a0
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 8
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 17
	v9 = a0
	a0 = 0x4022488F
	call v9 (retsize: 0;)
	a2 = 0x00000061
	a3 = 1
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 6
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 21
	v10 = a0
	a0 = 0x402248A0
	call v10 (retsize: 0;)
	a2 = 0x00000061
	a3 = 1
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 7
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 81
	v11 = a0
	a0 = 0x402248B1
	call v11 (retsize: 0;)
	a2 = 0x00000064
	a3 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 4
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 0x00000079
	v12 = a0
	a0 = 0x402248C3
	call v12 (retsize: 0;)
	a2 = 0x00000064
	a3 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 7
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 0x0000007B
	v13 = a0
	a0 = 0x402248D5
	call v13 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_chip_v5_rx_init_exit
sdk_rom_chip_v5_rx_init_exit:


// sdk_rom_chip_v5_tx_init
// Return size: 0
void sdk_rom_chip_v5_tx_init()
sdk_rom_chip_v5_tx_init_entry:
	// succ:  l402248E0
l402248E0:
	a1 = fp
	a2 = 0x0000006B
	a3 = 2
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	a12 = 0x4021BCEC
	Mem0[a1:word32] = a0
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 1
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 0x00000068
	v9 = a0
	a0 = 0x402248FC
	call v9 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 2
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 15
	v10 = a0
	a0 = 0x4022490D
	call v10 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 3
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 0x000000A8
	v11 = a0
	a0 = 0x4022491F
	call v11 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 4
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 6
	v12 = a0
	a0 = 0x40224930
	call v12 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 5
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 8
	v13 = a0
	a0 = 0x40224941
	call v13 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 6
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 0x000000B8
	v14 = a0
	a0 = 0x40224953
	call v14 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 7
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 91
	v15 = a0
	a0 = 0x40224964
	call v15 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 8
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 4
	v16 = a0
	a0 = 0x40224975
	call v16 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 9
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 0
	v17 = a0
	a0 = 0x40224986
	call v17 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 10
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 0x00000074
	v18 = a0
	a0 = 0x40224998
	call v18 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 11
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 7
	v19 = a0
	a0 = 0x402249A9
	call v19 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_chip_v5_tx_init_exit
sdk_rom_chip_v5_tx_init_exit:


// sdk_rom_i2c_readReg
// Return size: 0
void sdk_rom_i2c_readReg()
sdk_rom_i2c_readReg_entry:
	// succ:  l402249B4
l402249B4:
	a1 = fp
	a8 = 0x4021C0CC
	a6 = a4 << 24
	a7 = a3 << 30
	a6 = a2 | a6
	a2 = a7 + a8
	Mem0[a2 + 0x00000300:word32] = a6
	a5 = Mem0[a2 + 0x00000300:word32]
	branch (a5 & 0x02000000) == 0x00000000 l402249DA
	// succ:  l402249D1 l402249DA
l402249D1:
	a7 = Mem0[a2 + 0x00000300:word32]
	branch (a7 & 0x02000000) != 0x00000000 l402249D1
	// succ:  l402249DA l402249D1
l402249DA:
	a2 = Mem0[a2 + 0x00000300:word32]
	a2 = a2 >>u 0x00000010 & 0x000000FF
	return
	// succ:  sdk_rom_i2c_readReg_exit
sdk_rom_i2c_readReg_exit:


// sdk_rom_i2c_readReg_Mask
// Return size: 0
void sdk_rom_i2c_readReg_Mask()
sdk_rom_i2c_readReg_Mask_entry:
	// succ:  l402249E8
l402249E8:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a0
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a1:word32] = a5
	a0 = Mem0[a0 + 0x00000090:word32]
	Mem0[a1 + 0x00000004:word32] = a6
	v6 = a0
	a0 = 0x402249FC
	call v6 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000000:word32]
	a5 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	SAR = a5
	a1 = a1 + 16
	a3 = a0 >> SAR
	a4 = a4 - a5
	a2 = 1
	a4 = a4 + 1
	SAR = 0x00000020 - a4
	a2 = a2 << SAR
	a2 = a2 - 1
	a2 = a2 & a3
	a2 = a2 & 0x000000FF
	return
	// succ:  sdk_rom_i2c_readReg_Mask_exit
sdk_rom_i2c_readReg_Mask_exit:


// sdk_rom_i2c_writeReg
// Return size: 0
void sdk_rom_i2c_writeReg()
sdk_rom_i2c_writeReg_entry:
	// succ:  l40224A24
l40224A24:
	a1 = fp
	a8 = a5 << 16
	a7 = a4 << 24
	a9 = 0x4021C0CC
	a7 = a7 | a8
	a8 = 0x4020A194
	a7 = a2 | a7
	a7 = a7 | a8
	a8 = a3 << 30
	a2 = a8 + a9
	Mem0[a2 + 0x00000300:word32] = a7
	a6 = Mem0[a2 + 0x00000300:word32]
	branch (a6 & 0x02000000) == 0x00000000 l40224A56
	// succ:  l40224A4D l40224A56
l40224A4D:
	a9 = Mem0[a2 + 0x00000300:word32]
	branch (a9 & 0x02000000) != 0x00000000 l40224A4D
	// succ:  l40224A56 l40224A4D
l40224A56:
	return
	// succ:  sdk_rom_i2c_writeReg_exit
sdk_rom_i2c_writeReg_exit:


// sdk_rom_i2c_writeReg_Mask
// Return size: 0
void sdk_rom_i2c_writeReg_Mask()
sdk_rom_i2c_writeReg_Mask_entry:
	// succ:  l40224A58
l40224A58:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1:word32] = a5
	Mem0[a1 + 0x00000004:word32] = a6
	Mem0[a1 + 0x00000008:word32] = a7
	Mem0[a1 + 0x00000010:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000018:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = 0x4021BCEC
	a14 = a2
	a0 = Mem0[a0 + 0x00000000:word32]
	a13 = a3
	a0 = Mem0[a0 + 0x00000090:word32]
	a12 = a4
	v13 = a0
	a0 = 0x40224A7A
	call v13 (retsize: 0;)
	a4 = a12
	a3 = a13
	a5 = 1
	a8 = Mem0[a1 + 0x00000000:word32]
	a6 = Mem0[a1 + 0x00000008:word32]
	a0 = 0x4021BCEC
	a7 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a0 + 0x00000000:word32]
	SAR = 0x00000020 - a7
	a6 = a6 << SAR
	a8 = a8 - a7
	a8 = a8 + 1
	a0 = Mem0[a0 + 0x00000098:word32]
	SAR = 0x00000020 - a8
	a5 = a5 << SAR
	SAR = 0x00000020 - a7
	a5 = a5 - 1
	a7 = -1
	a5 = a5 << SAR
	a5 = a5 ^ a7
	a5 = a2 & a5
	a2 = a14
	a5 = a5 | a6
	a5 = a5 & 0x000000FF
	v16 = a0
	a0 = 0x40224ABA
	call v16 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_rom_i2c_writeReg_Mask_exit
sdk_rom_i2c_writeReg_Mask_exit:


// sdk_rom_pbus_debugmode
// Return size: 0
void sdk_rom_pbus_debugmode()
sdk_rom_pbus_debugmode_entry:
	// succ:  l40224AC8
l40224AC8:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	a5 = a0
	a2 = 0x4021BDB8
	a2 = Mem0[a2 + 0x00000394:word32]
	a6 = 0x4021319C
	branch (a2 & 0x00000001) != 0x00000000 l40224B24
	// succ:  l40224AE5 l40224B24
l40224AE5:
	a6 = Mem0[a6 + 0x00000270:word32]
	branch (a6 & 0x00000002) == 0x00000000 l40224B24
	// succ:  l40224AEE l40224B24
l40224AEE:
	a12 = 0x4021BCEC
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000074:word32]
	v9 = a0
	a0 = 0x40224AF9
	call v9 (retsize: 0;)
	a2 = 5
	a0 = 0x40224AFE
	call fn40303F28 (retsize: 0;)
	a13 = 0x00000184
	// succ:  l40224B01
l40224B01:
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 2
	a0 = Mem0[a0 + 0x000000B0:word32]
	a3 = 1
	v11 = a0
	a0 = 0x40224B0D
	call v11 (retsize: 0;)
	branch (~a2 & a13) != 0x00000000 l40224B01
	// succ:  l40224B10 l40224B01
l40224B10:
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 3
	a0 = Mem0[a0 + 0x000000B0:word32]
	a3 = 2
	v12 = a0
	a0 = 0x40224B1C
	call v12 (retsize: 0;)
	a3 = 6
	a2 = a2 & a3
	branch a2 != 6 l40224B01
	// succ:  l40224B24 l40224B01
l40224B24:
	a9 = 0x4021BDBC
	a8 = 0x4021BDC0
	a7 = Mem0[a8 + 0x00000108:word32]
	a7 = a7 | a9
	Mem0[a8 + 0x00000108:word32] = a7
	a5 = 0x4021BDB8
	a4 = Mem0[a5 + 0x00000394:word32]
	a6 = 1
	a4 = a4 | a6
	Mem0[a5 + 0x00000394:word32] = a4
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_pbus_debugmode_exit
sdk_rom_pbus_debugmode_exit:


// sdk_rom_pbus_enter_debugmode
// Return size: 0
void sdk_rom_pbus_enter_debugmode()
sdk_rom_pbus_enter_debugmode_entry:
	// succ:  l40224B58
l40224B58:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000A0:word32]
	Mem0[a1:word32] = a2
	v5 = a0
	a0 = 0x40224B6A
	call v5 (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C0:word32]
	a2 = 1
	v6 = a0
	a0 = 0x40224B77
	call v6 (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000D0:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	v7 = a0
	a0 = 0x40224B84
	call v7 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_pbus_enter_debugmode_exit
sdk_rom_pbus_enter_debugmode_exit:


// sdk_rom_pbus_exit_debugmode
// Return size: 0
void sdk_rom_pbus_exit_debugmode()
sdk_rom_pbus_exit_debugmode_entry:
	// succ:  l40224B8C
l40224B8C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C8:word32]
	v4 = a0
	a0 = 0x40224B9C
	call v4 (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C4:word32]
	v5 = a0
	a0 = 0x40224BA7
	call v5 (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000BC:word32]
	v6 = a0
	a0 = 0x40224BB2
	call v6 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_pbus_exit_debugmode_exit
sdk_rom_pbus_exit_debugmode_exit:


// sdk_rom_pbus_force_test
// Return size: 0
void sdk_rom_pbus_force_test()
sdk_rom_pbus_force_test_entry:
	// succ:  l40224BC0
l40224BC0:
	a1 = fp
	a9 = a3 << 18
	a10 = 0x40224BBC
	a8 = 2
	a7 = a2 << 30
	a7 = a7 | a8
	a2 = 0x4021BDB8
	a8 = a4 << 27
	a6 = Mem0[a2 + 0x00000394:word32]
	a6 = a6 & a10
	a6 = a6 | a9
	a6 = a6 | a8
	a6 = a6 | a7
	Mem0[a2 + 0x00000394:word32] = a6
	a5 = Mem0[a2 + 0x000003A0:word32]
	branch a5 >= 0x00000000 l40224BFE
	// succ:  l40224BF5 l40224BFE
l40224BF5:
	a9 = Mem0[a2 + 0x000003A0:word32]
	branch a9 < 0x00000000 l40224BF5
	// succ:  l40224BFE l40224BF5
l40224BFE:
	a11 = -3
	a10 = Mem0[a2 + 0x00000394:word32]
	a10 = a10 & a11
	Mem0[a2 + 0x00000394:word32] = a10
	return
	// succ:  sdk_rom_pbus_force_test_exit
sdk_rom_pbus_force_test_exit:


// sdk_rom_pbus_rd
// Return size: 0
void sdk_rom_pbus_rd()
sdk_rom_pbus_rd_entry:
	// succ:  l40224C1C
l40224C1C:
	a1 = fp
	a4 = a3 - 4
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	a0 = 2
	a13 = 0x40224C14
	a12 = a3 - 1
	a13 = a2 + a13
	v9 = Mem0[a13 + 0x00000000:byte]
	a13 = (uint32) v9
	branch a4 != 0x00000000 l40224C37
	// succ:  l40224C34_1 l40224C37
l40224C34_1:
	a12 = a0
	// succ:  l40224C37
l40224C37:
	a12 = a12 + a13
	a12 = a12 & 0x000000FF
	branch a12 == 12 l40224C57
	// succ:  l40224C3F l40224C57
l40224C3F:
	a2 = a12
	a3 = 3
	a0 = 0x402044C4
	v10 = a0
	a0 = 0x40224C49
	call v10 (retsize: 0;)
	a13 = 18
	a0 = a2 & 0x000000FF
	a0 = a0 + a0 * 0x00000008
	a13 = a13 - a0
	goto l40224C59
	// succ:  l40224C59
l40224C57:
	a13 = 0
	// succ:  l40224C59
l40224C59:
	a2 = a12
	a3 = 3
	a0 = 0x40204388
	v11 = a0
	a0 = 0x40224C63
	call v11 (retsize: 0;)
	a2 = a2 & 0x000000FF
	a3 = 0x40224C18
	a2 = a2 << 30
	a2 = a2 + a3
	a0 = Mem0[a1 + 0x00000000:word32]
	a12 = Mem0[a1 + 0x00000004:word32]
	SAR = a13
	a2 = Mem0[a2 + 0x00000000:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a2 = a2 >> SAR
	a2 = a2 & 0x000001FF
	a1 = a1 + 16
	return
	// succ:  sdk_rom_pbus_rd_exit
sdk_rom_pbus_rd_exit:


// sdk_rom_pbus_set_rxgain
// Return size: 0
void sdk_rom_pbus_set_rxgain()
sdk_rom_pbus_set_rxgain_entry:
	// succ:  l40224C88
l40224C88:
	a1 = fp
	a3 = 2
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	a13 = 0x4021BCEC
	Mem0[a1 + 0x0000000C:word32] = a0
	a0 = Mem0[a13 + 0x00000000:word32]
	a12 = a2
	a0 = Mem0[a0 + 0x000000B0:word32]
	a2 = 3
	v8 = a0
	a0 = 0x40224CA2
	call v8 (retsize: 0;)
	a3 = 1
	a0 = Mem0[a13 + 0x00000000:word32]
	Mem0[a1:word32] = a2
	a0 = Mem0[a0 + 0x000000B0:word32]
	a2 = 2
	v9 = a0
	a0 = 0x40224CB0
	call v9 (retsize: 0;)
	a3 = 1
	a0 = Mem0[a13 + 0x00000000:word32]
	a6 = a12 >>u 0x00000006 & 0x00000001
	a7 = a12 >>u 0x00000007 & 0x00000001
	a4 = a12 >>u 0x00000008 & 0x00000001
	Mem0[a1 + 0x00000004:word32] = a2
	a5 = a12 >>u 0x00000003 & 0x00000001
	a2 = 3
	a5 = a5 << 26
	a4 = a4 << 31
	a7 = a7 << 30
	a6 = a6 << 29
	a0 = Mem0[a0 + 0x000000AC:word32]
	a6 = a6 | a7
	Mem0[a1 + 0x00000008:word32] = a4
	a7 = a12 >>u 0x00000004 & 0x00000001
	a7 = a7 << 27
	a5 = a5 | a7
	a7 = a12 >>u 0x00000005 & 0x00000001
	a7 = a7 << 28
	a5 = a5 | a7
	a5 = a5 | a6
	a6 = a12 >>u 0x00000009 & 0x00000001
	a4 = a4 | a6
	a4 = a4 | a5
	a4 = a4 & 0x0000FFFF
	v14 = a0
	a0 = 0x40224CFC
	call v14 (retsize: 0;)
	a2 = 3
	a3 = 2
	a0 = Mem0[a13 + 0x00000000:word32]
	a4 = Mem0[a1 + 0x00000000:word32]
	a5 = 0x000001C7
	a4 = a4 & a5
	a0 = Mem0[a0 + 0x000000AC:word32]
	a5 = a12 & 0x00000007
	a5 = a5 << 29
	a4 = a4 | a5
	a4 = a4 & 0x0000FFFF
	v15 = a0
	a0 = 0x40224D1C
	call v15 (retsize: 0;)
	a2 = 2
	a3 = 1
	a4 = Mem0[a1 + 0x00000008:word32]
	a7 = 0x00000185
	a5 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a13 + 0x00000000:word32]
	a6 = a12 >>u 0x0000000B & 0x0000000F
	a6 = a6 << 29
	a0 = Mem0[a0 + 0x000000AC:word32]
	a5 = a5 & a7
	a5 = a5 | a6
	a4 = a4 | a5
	a4 = a4 & 0x0000FFFF
	v16 = a0
	a0 = 0x40224D41
	call v16 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_rom_pbus_set_rxgain_exit
sdk_rom_pbus_set_rxgain_exit:


// sdk_rom_pbus_set_txgain
// Return size: 0
void sdk_rom_pbus_set_txgain()
sdk_rom_pbus_set_txgain_entry:
	// succ:  l40224D4C
l40224D4C:
	a1 = fp
	a3 = 1
	a4 = a2 >>u 0x00000007 & 0x00000003
	a5 = a2 & 0x0000001F
	a1 = a1 - 16
	a6 = a2 >>u 0x00000005 & 0x00000003
	a6 = a6 << 30
	Mem0[a1:word32] = a0
	a5 = a5 << 28
	a0 = 0x4021BCEC
	a2 = 4
	a5 = a5 | a6
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = a4 | a5
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a4 & 0x0000FFFF
	v9 = a0
	a0 = 0x40224D78
	call v9 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_pbus_set_txgain_exit
sdk_rom_pbus_set_txgain_exit:


// sdk_rom_pbus_workmode
// Return size: 0
void sdk_rom_pbus_workmode()
sdk_rom_pbus_workmode_entry:
	// succ:  l40224D80
l40224D80:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a7 = -2
	a3 = 0x4021BDC0
	a6 = 0x4021BDB8
	a5 = Mem0[a6 + 0x00000394:word32]
	a5 = a5 & a7
	Mem0[a6 + 0x00000394:word32] = a5
	a4 = 0x4021CB28
	a2 = Mem0[a3 + 0x00000108:word32]
	a2 = a2 & a4
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000078:word32]
	Mem0[a3 + 0x00000108:word32] = a2
	v10 = a0
	a0 = 0x40224DB9
	call v10 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_pbus_workmode_exit
sdk_rom_pbus_workmode_exit:


// sdk_rom_pbus_xpd_rx_off
// Return size: 0
void sdk_rom_pbus_xpd_rx_off()
sdk_rom_pbus_xpd_rx_off_entry:
	// succ:  l40224DC0
l40224DC0:
	a1 = fp
	a3 = 1
	a4 = 0x00000080
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BCEC
	a4 = a2 + a4
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = a4 & 0x0000FFFF
	a0 = Mem0[a0 + 0x000000AC:word32]
	a2 = 2
	v7 = a0
	a0 = 0x40224DDC
	call v7 (retsize: 0;)
	a0 = 0x4021BCEC
	a2 = 3
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0
	v8 = a0
	a0 = 0x40224DED
	call v8 (retsize: 0;)
	a0 = 0x4021BCEC
	a2 = 3
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = 2
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0
	v9 = a0
	a0 = 0x40224DFE
	call v9 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_pbus_xpd_rx_off_exit
sdk_rom_pbus_xpd_rx_off_exit:


// sdk_rom_pbus_xpd_rx_on
// Return size: 0
void sdk_rom_pbus_xpd_rx_on()
sdk_rom_pbus_xpd_rx_on_entry:
	// succ:  l40224E08
l40224E08:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BCEC
	a2 = 2
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0x00000184
	v7 = a0
	a0 = 0x40224E1F
	call v7 (retsize: 0;)
	a0 = 0x4021BCEC
	a2 = 3
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = 2
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 6
	v8 = a0
	a0 = 0x40224E30
	call v8 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_pbus_xpd_rx_on_exit
sdk_rom_pbus_xpd_rx_on_exit:


// sdk_rom_pbus_xpd_tx_off
// Return size: 0
void sdk_rom_pbus_xpd_tx_off()
sdk_rom_pbus_xpd_tx_off_entry:
	// succ:  l40224E38
l40224E38:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BCEC
	a2 = 6
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0
	v7 = a0
	a0 = 0x40224E4E
	call v7 (retsize: 0;)
	a0 = 0x4021BCEC
	a2 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 12
	v8 = a0
	a0 = 0x40224E5F
	call v8 (retsize: 0;)
	a0 = 0x4021BCEC
	a2 = 2
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0x00000080
	v9 = a0
	a0 = 0x40224E71
	call v9 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_pbus_xpd_tx_off_exit
sdk_rom_pbus_xpd_tx_off_exit:


// sdk_rom_pbus_xpd_tx_on
// Return size: 0
void sdk_rom_pbus_xpd_tx_on()
sdk_rom_pbus_xpd_tx_on_entry:
	// succ:  l40224E78
l40224E78:
	a1 = fp
	a3 = 1
	a4 = 0x00000081
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = 0x4021BCEC
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1:word32] = a2
	a0 = Mem0[a0 + 0x000000AC:word32]
	a2 = 2
	v8 = a0
	a0 = 0x40224E93
	call v8 (retsize: 0;)
	a2 = 7
	a0 = Mem0[a12 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 95
	v9 = a0
	a0 = 0x40224EA1
	call v9 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000000:word32]
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 0
	a0 = Mem0[a0 + 0x000000AC:word32]
	a3 = 1
	v10 = a0
	a0 = 0x40224EAF
	call v10 (retsize: 0;)
	a2 = 1
	a0 = Mem0[a12 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0x0000007F
	v11 = a0
	a0 = 0x40224EBE
	call v11 (retsize: 0;)
	a2 = 6
	a0 = Mem0[a12 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0x0000007F
	v12 = a0
	a0 = 0x40224ECD
	call v12 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_pbus_xpd_tx_on_exit
sdk_rom_pbus_xpd_tx_on_exit:


// sdk_rom_pbus_xpd_tx_on__low_gain
// Return size: 0
void sdk_rom_pbus_xpd_tx_on__low_gain()
sdk_rom_pbus_xpd_tx_on__low_gain_entry:
	// succ:  l40224ED8
l40224ED8:
	a1 = fp
	a3 = 1
	a4 = 0x00000081
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = 0x4021BCEC
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1:word32] = a2
	a0 = Mem0[a0 + 0x000000AC:word32]
	a2 = 2
	v8 = a0
	a0 = 0x40224EF3
	call v8 (retsize: 0;)
	a2 = 7
	a0 = Mem0[a12 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0
	v9 = a0
	a0 = 0x40224F01
	call v9 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000000:word32]
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 0
	a0 = Mem0[a0 + 0x000000AC:word32]
	a3 = 1
	v10 = a0
	a0 = 0x40224F0F
	call v10 (retsize: 0;)
	a2 = 1
	a0 = Mem0[a12 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0x0000007F
	v11 = a0
	a0 = 0x40224F1E
	call v11 (retsize: 0;)
	a2 = 6
	a0 = Mem0[a12 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0x0000007F
	v12 = a0
	a0 = 0x40224F2D
	call v12 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_pbus_xpd_tx_on__low_gain_exit
sdk_rom_pbus_xpd_tx_on__low_gain_exit:


// sdk_rom_phy_reset_req
// Return size: 0
void sdk_rom_phy_reset_req()
sdk_rom_phy_reset_req_entry:
	// succ:  l40224F3C
l40224F3C:
	a1 = fp
	a4 = 0x40224F38
	a3 = 0x402125CC
	a2 = Mem0[a3 + 0x00000110:word32]
	a2 = a2 & a4
	Mem0[a3 + 0x00000110:word32] = a2
	return
	// succ:  sdk_rom_phy_reset_req_exit
sdk_rom_phy_reset_req_exit:


// sdk_rom_restart_cal
// Return size: 0
void sdk_rom_restart_cal()
sdk_rom_restart_cal_entry:
	// succ:  l40224F54
l40224F54:
	a1 = fp
	a2 = 0x00000062
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BCEC
	a3 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = 0
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 95
	v8 = a0
	a0 = 0x40224F6D
	call v8 (retsize: 0;)
	a2 = 0x00000062
	a0 = 0x4021BCEC
	a3 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = 0
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 0x0000007F
	v9 = a0
	a0 = 0x40224F82
	call v9 (retsize: 0;)
	a2 = 0x00000062
	a0 = 0x4021BCEC
	a3 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = 0
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 63
	v10 = a0
	a0 = 0x40224F96
	call v10 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_restart_cal_exit
sdk_rom_restart_cal_exit:


// sdk_rom_rfpll_reset
// Return size: 0
void sdk_rom_rfpll_reset()
sdk_rom_rfpll_reset_entry:
	// succ:  l40224FA0
l40224FA0:
	a1 = fp
	a2 = 0x00000062
	a3 = 1
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	a12 = 0x4021BCEC
	Mem0[a1:word32] = a0
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 10
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 0x000000A6
	v9 = a0
	a0 = 0x40224FBC
	call v9 (retsize: 0;)
	a2 = 0x00000062
	a3 = 1
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 10
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 0x000000A7
	v10 = a0
	a0 = 0x40224FCE
	call v10 (retsize: 0;)
	a2 = 0x00000062
	a3 = 1
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 10
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 0x000000A5
	v11 = a0
	a0 = 0x40224FE0
	call v11 (retsize: 0;)
	a2 = 0x00000063
	a3 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 1
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 0x000000F3
	v12 = a0
	a0 = 0x40224FF2
	call v12 (retsize: 0;)
	a2 = 0x00000062
	a3 = 1
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = 11
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 0x000000C0
	v13 = a0
	a0 = 0x40225004
	call v13 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_rfpll_reset_exit
sdk_rom_rfpll_reset_exit:


// sdk_rom_write_rfpll_sdm
// Return size: 0
void sdk_rom_write_rfpll_sdm()
sdk_rom_write_rfpll_sdm_entry:
	// succ:  l40225010
l40225010:
	a1 = fp
	a3 = 0
	a4 = 0
	a5 = 7
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	a13 = 0x4021BCEC
	Mem0[a1:word32] = a0
	a0 = Mem0[a13 + 0x00000000:word32]
	a12 = a2
	a0 = Mem0[a0 + 0x00000098:word32]
	a2 = 0x00000063
	v10 = a0
	a0 = 0x4022502F
	call v10 (retsize: 0;)
	a2 = 0x00000063
	a3 = 0
	a0 = Mem0[a13 + 0x00000000:word32]
	a4 = 3
	a0 = Mem0[a0 + 0x00000098:word32]
	v11 = Mem0[a12 + 0x00000000:byte]
	a5 = (uint32) v11
	v12 = a0
	a0 = 0x40225041
	call v12 (retsize: 0;)
	a2 = 0x00000063
	a3 = 0
	a0 = Mem0[a13 + 0x00000000:word32]
	a4 = 4
	a0 = Mem0[a0 + 0x00000098:word32]
	v13 = Mem0[a12 + 0x00000001:byte]
	a5 = (uint32) v13
	v14 = a0
	a0 = 0x40225053
	call v14 (retsize: 0;)
	v15 = Mem0[a12 + 0x00000002:byte]
	a5 = (uint32) v15
	a2 = 0x00000063
	a0 = Mem0[a13 + 0x00000000:word32]
	a3 = 0
	a0 = Mem0[a0 + 0x00000098:word32]
	a4 = 5
	v16 = a0
	a0 = 0x40225065
	call v16 (retsize: 0;)
	a2 = 0x00000063
	a3 = 0
	a0 = Mem0[a13 + 0x00000000:word32]
	a4 = 0
	a0 = Mem0[a0 + 0x00000098:word32]
	a5 = 23
	v17 = a0
	a0 = 0x40225076
	call v17 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_write_rfpll_sdm_exit
sdk_rom_write_rfpll_sdm_exit:


// sdk_rom_rfpll_set_freq
// Return size: 0
void sdk_rom_rfpll_set_freq()
sdk_rom_rfpll_set_freq_entry:
	// succ:  l40225090
l40225090:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a14
	a12 = a5
	a14 = 0x40225084
	a13 = 0
	a0 = a2 << 22
	a0 = a4 + a0
	a2 = a0 << 30
	a0 = 0x402250B0
	call fn40311400 (retsize: 0;)
	a5 = 0x4021C50C
	a4 = 0
	a0 = 0x402250B8
	call fn40310CC8 (retsize: 0;)
	a0 = 0x402250BB
	call fn40310FFC (retsize: 0;)
	a0 = 0x402250BE
	call fn40304A38 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000000:word32]
	branch a4 == 0x00000000 l402250D9
	// succ:  l402250C2 l402250D9
l402250C2:
	a5 = 0x40225088
	a4 = 0
	a0 = 0x402250CA
	call fn40310CC8 (retsize: 0;)
	a4 = a13
	a5 = a14
	a0 = 0x402250D1
	call fn40310908 (retsize: 0;)
	a0 = 0x402250D4
	call fn40310FFC (retsize: 0;)
	a14 = a2
	goto l402250ED
	// succ:  l402250ED
l402250D9:
	a5 = 0x4022508C
	a4 = 0
	a0 = 0x402250E1
	call fn40310CC8 (retsize: 0;)
	a4 = a13
	a5 = a14
	a0 = 0x402250E8
	call fn40310908 (retsize: 0;)
	a0 = 0x402250EB
	call fn40310FFC (retsize: 0;)
	a14 = a2
	// succ:  l402250ED
l402250ED:
	a13 = 0x4021C508
	a2 = a14
	a0 = 0x402250F5
	call fn40310894 (retsize: 0;)
	Mem0[a12:byte] = a2
	a2 = a2 & 0x000000FF
	a0 = 0x402250FE
	call fn403113C4 (retsize: 0;)
	a3 = a2
	a2 = a14
	a0 = 0x40225105
	call fn403105F8 (retsize: 0;)
	a3 = a13
	a0 = 0x4022510A
	call fn4031076C (retsize: 0;)
	a14 = a2
	a0 = 0x4022510F
	call fn40310894 (retsize: 0;)
	Mem0[a12 + 0x00000001:byte] = a2
	a2 = a2 & 0x000000FF
	a0 = 0x40225118
	call fn403113C4 (retsize: 0;)
	a3 = a2
	a2 = a14
	a0 = 0x4022511F
	call fn403105F8 (retsize: 0;)
	a3 = a13
	a0 = 0x40225124
	call fn4031076C (retsize: 0;)
	a0 = 0x40225127
	call fn40310894 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	Mem0[a12 + 0x00000002:byte] = a2
	a14 = Mem0[a1 + 0x00000010:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_rom_rfpll_set_freq_exit
sdk_rom_rfpll_set_freq_exit:


// sdk_rom_cal_tos_v50
// Return size: 0
void sdk_rom_cal_tos_v50()
sdk_rom_cal_tos_v50_entry:
	// succ:  l40225138
l40225138:
	a1 = fp
	a8 = a4 | a4
	a1 = a1 - 48
	Mem0[a1 + 0x0000001C:word32] = a13
	Mem0[a1 + 0x0000002C:word32] = a5
	Mem0[a1 + 0x00000010:word32] = a6
	a4 = a3 & 0x0000FFFF
	Mem0[a1 + 0x00000014:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a2
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a15
	Mem0[a1 + 0x00000020:word32] = a14
	a15 = 64
	a14 = 64
	a12 = 0x4021BCEC
	a2 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	Mem0[a1 + 0x00000028:word32] = a8
	v14 = a0
	a0 = 0x40225168
	call v14 (retsize: 0;)
	a2 = Mem0[a1 + 0x0000002C:word32]
	a13 = 0x4021C0CC
	branch a2 == 0x00000000 l40225247
	// succ:  l40225170 l40225247
l40225170:
	a12 = 20
	a8 = 0
	Mem0[a1 + 0x00000008:word32] = a8
	// succ:  l40225176
l40225176:
	a0 = 0x4021BCEC
	a2 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = 2
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a14 & 0x0000FFFF
	v15 = a0
	a0 = 0x40225188
	call v15 (retsize: 0;)
	a0 = 0x4021BCEC
	a2 = 0
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = 2
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a15 & 0x0000FFFF
	v16 = a0
	a0 = 0x4022519A
	call v16 (retsize: 0;)
	a3 = 0x40221A24
	Mem0[a13 + 0x0000034C:word32] = a3
	a2 = 0x40221A28
	Mem0[a13 + 0x0000034C:word32] = a2
	a2 = Mem0[a1 + 0x00000028:word32]
	a0 = 0x402251B1
	call fn40303F28 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000008:word32]
	a9 = 0x0000007F
	a4 = Mem0[a13 + 0x0000034C:word32]
	a5 = 1
	a4 = a4 >>u 0x0000001F & 0x00000001
	a4 = a4 ^ a5
	a3 = 0x40204574
	a6 = Mem0[a13 + 0x0000034C:word32]
	a11 = 0
	a6 = a6 & a3
	branch a6 != 0x00000000 l402251D5
	// succ:  l402251D2_1 l402251D5
l402251D2_1:
	a11 = a5
	// succ:  l402251D5
l402251D5:
	branch a4 == 0x00000000 l40225225
	// succ:  l402251D8 l40225225
l402251D8:
	a10 = a9
	a15 = a12 + a15
	a15 = a15 << 8
	a15 = a15 >> 24
	branch a9 < a15 l402251E7
	// succ:  l402251E5 l402251E7
l402251E5:
	a10 = a15
	// succ:  l402251E7
l402251E7:
	a2 = Mem0[a1 + 0x0000002C:word32]
	a0 = a0 + 1
	a15 = a10 << 8
	a15 = a15 >> 24
	a0 = a0 & 0x000000FF
	branch a11 == 0x00000000 l40225236
	// succ:  l402251F6 l40225236
l402251F6:
	a3 = a9
	a10 = a12 + a14
	a10 = a10 << 8
	a10 = a10 >> 24
	branch a9 < a10 l40225205
	// succ:  l40225203 l40225205
l40225203:
	a3 = a10
	// succ:  l40225205
l40225205:
	a14 = a3 << 8
	a14 = a14 >> 24
	branch a12 == 1 l40225217
	// succ:  l4022520E l40225217
l4022520E:
	a12 = a12 >> 1
	a12 = a12 << 8
	a12 = a12 >> 24
	// succ:  l40225217
l40225217:
	Mem0[a1 + 0x00000008:word32] = a0
	a2 = a2 - a0
	branch a2 != 0x00000000 l40225176
	// succ:  l4022521F l40225176
l4022521F:
	a12 = 0x4021BCEC
	goto l40225247
	// succ:  l40225247
l40225225:
	a10 = 0
	a2 = a15 - a12
	a2 = a2 << 8
	a2 = a2 >> 24
	branch a2 < 0x00000000 l40225233
	// succ:  l40225230_1 l40225233
l40225230_1:
	a10 = a2
	// succ:  l40225233
l40225233:
	goto l402651E7
	// succ:  l402651E7
l40225236:
	a3 = 0
	a4 = a14 - a12
	a4 = a4 << 8
	a4 = a4 >> 24
	branch a4 < 0x00000000 l40225244
	// succ:  l40225241_1 l40225244
l40225241_1:
	a3 = a4
	// succ:  l40225244
l40225244:
	goto l40265205
	// succ:  l40265205
l40225247:
	a2 = 1
	a3 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = a14 << 8
	a4 = a4 >> 24
	Mem0[a1:word32] = a4
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a4 & 0x0000FFFF
	v20 = a0
	a0 = 0x4022525E
	call v20 (retsize: 0;)
	a2 = 0
	a3 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a4 = a15 << 8
	a4 = a4 >> 24
	Mem0[a1 + 0x00000004:word32] = a4
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a4 & 0x0000FFFF
	v21 = a0
	a0 = 0x40225275
	call v21 (retsize: 0;)
	a2 = 1
	a0 = Mem0[a12 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0x0000007F
	v22 = a0
	a0 = 0x40225284
	call v22 (retsize: 0;)
	a4 = 0x40221A2C
	a2 = Mem0[a1 + 0x0000000C:word32]
	a3 = Mem0[a1 + 0x00000010:word32]
	Mem0[a13 + 0x0000034C:word32] = a4
	Mem0[a3:byte] = a15
	Mem0[a3 + 0x00000001:byte] = a14
	branch a2 == 0x00000000 l402252BE
	// succ:  l40225299 l402252BE
l40225299:
	a6 = 0x4021E4C4
	a9 = 0x40221A30
	a7 = Mem0[a1 + 0x00000004:word32]
	a8 = Mem0[a1 + 0x00000000:word32]
	a7 = a7 << 14
	a8 = a8 << 7
	a5 = Mem0[a6 + 0x00000264:word32]
	a5 = a5 & a9
	a5 = a5 | a8
	a5 = a5 | a7
	Mem0[a6 + 0x00000264:word32] = a5
	// succ:  l402252BE
l402252BE:
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x0000001C:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x00000024:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_rom_cal_tos_v50_exit
l402651E7:
l40265205:
sdk_rom_cal_tos_v50_exit:


// sdk_rom_pbus_dco___SA2
// Return size: 0
void sdk_rom_pbus_dco___SA2()
sdk_rom_pbus_dco___SA2_entry:
	// succ:  l402252E4
l402252E4:
	a1 = fp
	a8 = a2
	a1 = a1 - 128
	Mem0[a1 + 0x00000020:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x0000002C:word32] = a15
	Mem0[a1 + 0x00000044:word32] = a5
	Mem0[a1 + 0x00000060:word32] = a6
	a2 = 3
	Mem0[a1 + 0x00000058:word32] = a4
	Mem0[a1 + 0x00000034:word32] = a3
	Mem0[a1 + 0x00000028:word32] = a14
	a14 = 0x4021BCEC
	Mem0[a1 + 0x0000001C:word32] = a0
	a0 = Mem0[a14 + 0x00000000:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x000000B0:word32]
	Mem0[a1 + 0x0000005C:word32] = a8
	v14 = a0
	a0 = 0x40225310
	call v14 (retsize: 0;)
	Mem0[a1 + 0x00000054:word32] = a2
	a3 = 0x0000007C
	a4 = a2 & a3
	Mem0[a1 + 0x0000006C:word32] = a4
	branch (a3 & a2) == 0x00000000 l40225338
	// succ:  l4022531F l40225338
l4022531F:
	a12 = 0
	// succ:  l40225321
l40225321:
	a5 = Mem0[a1 + 0x0000006C:word32]
	a13 = a5 & 0x00000001
	a12 = a12 + a13
	a5 = a5 >>u 1
	Mem0[a1 + 0x0000006C:word32] = a5
	a12 = a12 & 0x000000FF
	branch a5 != 0x00000000 l40225321
	// succ:  l40225335 l40225321
l40225335:
	goto l4022533A
	// succ:  l4022533A
l40225338:
	a12 = 0
	// succ:  l4022533A
l4022533A:
	a0 = Mem0[a14 + 0x00000000:word32]
	a2 = 3
	a0 = Mem0[a0 + 0x000000B0:word32]
	a3 = 2
	v15 = a0
	a0 = 0x40225346
	call v15 (retsize: 0;)
	a3 = 2
	a4 = 0x00000100
	a0 = Mem0[a14 + 0x00000000:word32]
	a13 = a2
	a0 = Mem0[a0 + 0x000000AC:word32]
	a2 = 4
	v16 = a0
	a0 = 0x40225357
	call v16 (retsize: 0;)
	a2 = 5
	a0 = Mem0[a14 + 0x00000000:word32]
	a3 = 2
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = 0x00000100
	v17 = a0
	a0 = 0x40225366
	call v17 (retsize: 0;)
	a2 = a12 + 6
	a0 = 1
	Mem0[a1 + 0x00000050:word32] = a2
	a2 = a2 & 0x000000FF
	Mem0[a1 + 0x0000006C:word32] = a2
	branch a12 <u 0x00000004 l40225378
	// succ:  l40225376 l40225378
l40225376:
	a0 = 0
	// succ:  l40225378
l40225378:
	branch a12 <u 0x00000003 l40225385
	// succ:  l4022537B l40225385
l4022537B:
	a4 = 5
	a8 = 10
	branch a0 == 0x00000000 l40225382
	// succ:  l4022537F_1 l40225382
l4022537F_1:
	a8 = a4
	// succ:  l40225382
l40225382:
	goto l40225387
	// succ:  l40225387
l40225385:
	a8 = 2
	// succ:  l40225387
l40225387:
	a6 = 0
	a2 = 0x402252D0
	a3 = 5
	a11 = Mem0[a1 + 0x00000050:word32]
	Mem0[a1 + 0x00000018:word32] = a12
	a15 = a13 >>u 0x00000003 & 0x000000FF
	a5 = 2
	a10 = 0
	a4 = a8 & 0x000000FF
	Mem0[a1 + 0x00000068:word32] = a4
	Mem0[a1 + 0x00000064:word32] = a10
	Mem0[a1 + 0x00000048:word32] = a5
	a13 = 0x00000200
	a12 = 0x00000200
	Mem0[a1 + 0x00000030:word32] = a15
	a11 = a11 & 0x000000FF
	branch a0 == 0x00000000 l402253B4
	// succ:  l402253B1_1 l402253B4
l402253B1_1:
	a3 = a5
	// succ:  l402253B4
l402253B4:
	Mem0[a1 + 0x00000038:word32] = a3
	Mem0[a1 + 0x0000003C:word32] = a11
	a15 = a15 + a2
	Mem0[a1 + 0x00000040:word32] = a15
	// succ:  l402253BD
l402253BD:
	a15 = Mem0[a1 + 0x00000034:word32]
	a5 = Mem0[a1 + 0x00000064:word32]
	Mem0[a1 + 0x00000070:word32] = a6
	a15 = a15 + a5 * 0x00000004
	a5 = a5 + 1
	Mem0[a1 + 0x0000004C:word32] = a5
	a5 = a5 & 0x000000FF
	Mem0[a1 + 0x00000074:word32] = a5
	// succ:  l402253D5
l402253D5:
	a2 = 0x00000004
	a3 = Mem0[a1 + 0x00000074:word32]
	a0 = Mem0[a14 + 0x00000000:word32]
	a4 = a12 + 1
	a5 = a4 >> 1
	Mem0[a15:word16] = a5
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a4 >>u 0x00000001 & 0x0000FFFF
	v20 = a0
	a0 = 0x402253EE
	call v20 (retsize: 0;)
	a2 = 5
	a3 = Mem0[a1 + 0x00000074:word32]
	a0 = Mem0[a14 + 0x00000000:word32]
	a4 = a13 + 1
	a5 = a4 >> 1
	Mem0[a15 + 0x00000002:word16] = a5
	a0 = Mem0[a0 + 0x000000AC:word32]
	a4 = a4 >>u 0x00000001 & 0x0000FFFF
	v21 = a0
	a0 = 0x40225406
	call v21 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000058:word32]
	a0 = 0x4022540C
	call fn40303F28 (retsize: 0;)
	a2 = 1
	a0 = Mem0[a14 + 0x00000000:word32]
	a3 = Mem0[a1 + 0x0000005C:word32]
	a0 = Mem0[a0 + 0x00000010:word32]
	a4 = a1 + 16
	v22 = a0
	a0 = 0x4022541B
	call v22 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000060:word32]
	branch a2 == 0x00000000 l4022543A
	// succ:  l40225420 l4022543A
l40225420:
	a2 = 0x402252D4
	a3 = a12
	a4 = a13
	a0 = 0x4021262C
	v23 = a0
	a0 = 0x4022542D
	call v23 (retsize: 0;)
	a2 = 0x402252D8
	a3 = Mem0[a1 + 0x00000010:word32]
	a4 = Mem0[a1 + 0x00000014:word32]
	a0 = 0x4021262C
	v24 = a0
	a0 = 0x4022543A
	call v24 (retsize: 0;)
	// succ:  l4022543A
l4022543A:
	a0 = Mem0[a14 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = Mem0[a1 + 0x00000010:word32]
	v25 = a0
	a0 = 0x40225443
	call v25 (retsize: 0;)
	a0 = 0
	a3 = Mem0[a1 + 0x00000068:word32]
	a9 = 0x000003FF
	branch a3 < a2 l40225465
	// succ:  l4022544E l40225465
l4022544E:
	a0 = Mem0[a14 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = Mem0[a1 + 0x00000014:word32]
	v27 = a0
	a0 = 0x40225457
	call v27 (retsize: 0;)
	a0 = 0
	a3 = Mem0[a1 + 0x00000068:word32]
	a9 = 0x000003FF
	branch a3 < a2 l40225465
	// succ:  l40225462 l40225465
l40225462:
	goto l402254FB
	// succ:  l402254FB
l40225465:
	a10 = Mem0[a1 + 0x00000014:word32]
	a4 = Mem0[a1 + 0x00000064:word32]
	a8 = Mem0[a1 + 0x00000010:word32]
	branch a4 != 0x00000000 l402254B9
	// succ:  l4022546F l402254B9
l4022546F:
	a2 = Mem0[a1 + 0x00000050:word32]
	a11 = Mem0[a1 + 0x00000040:word32]
	a2 = a2 & 0x000000FF
	v28 = Mem0[a11 + 0x00000000:byte]
	a11 = (uint32) v28
	Mem0[a1 + 0x0000006C:word32] = a2
	a2 = Mem0[a1 + 0x0000003C:word32]
	a10 = a10 * a11
	SAR = a2
	a10 = a0 >> SAR
	a2 = a8 * a11
	a2 = a0 >> SAR
	a12 = a12 - a2
	a12 = a12 << 16
	a12 = a12 >> 16
	a13 = a13 - a10
	a2 = Mem0[a1 + 0x00000070:word32]
	a10 = a9
	a13 = a13 << 16
	a3 = a2 + 1
	a13 = a13 >> 16
	a2 = a3 & 0x000000FF
	Mem0[a1 + 0x00000070:word32] = a2
	a2 = a2 - 12
	branch a9 < a12 l402254DD
	// succ:  l402254B4 l402254DD
l402254B4:
	a10 = a12
	goto l402254DD
	// succ:  l402254DD
l402254B9:
	a11 = Mem0[a1 + 0x0000006C:word32]
	a10 = a10 + a10 * 0x00000004
	a2 = a8 + a8 * 0x00000004
	a2 = a2 << 29
	a10 = a10 << 29
	SAR = a11
	a10 = a0 >> SAR
	a2 = a0 >> SAR
	a12 = a12 - a2
	a12 = a12 << 16
	a12 = a12 >> 16
	goto l40265498
	// succ:  l40265498
l402254DD:
	a12 = a0
	branch a10 < 0x00000000 l402254E2
	// succ:  l402254DF_1 l402254E2
l402254DF_1:
	a12 = a10
	// succ:  l402254E2
l402254E2:
	a10 = a9
	a12 = a12 << 16
	a12 = a12 >> 16
	branch a9 < a13 l402254EF
	// succ:  l402254ED l402254EF
l402254ED:
	a10 = a13
	// succ:  l402254EF
l402254EF:
	branch a10 < 0x00000000 l402254F2
	// succ:  l402254EF_1 l402254F2
l402254EF_1:
	a0 = a10
	// succ:  l402254F2
l402254F2:
	a13 = a0 << 16
	a13 = a13 >> 16
	branch a2 != 0x00000000 l402253D5
	// succ:  l402254FB l402253D5
l402254FB:
	a9 = Mem0[a1 + 0x00000044:word32]
	a4 = Mem0[a1 + 0x00000054:word32]
	a5 = Mem0[a1 + 0x00000038:word32]
	a7 = a4 >>u 0x00000004 & 0x00000001
	a6 = a4 >>u 0x00000002 & 0x00000003
	a5 = a5 & 0x000000FF
	Mem0[a1 + 0x00000068:word32] = a5
	a6 = a6 + a7
	a4 = a6 & 0x000000FF
	Mem0[a1 + 0x00000054:word32] = a4
	branch a4 == 0x00000000 l40225526
	a9 = Mem0[a1 + 0x00000044:word32]
	a4 = Mem0[a1 + 0x00000054:word32]
	a5 = Mem0[a1 + 0x00000038:word32]
	a7 = a4 >>u 0x00000004 & 0x00000001
	a6 = a4 >>u 0x00000002 & 0x00000003
	a5 = a5 & 0x000000FF
	Mem0[a1 + 0x00000068:word32] = a5
	a6 = a6 + a7
	a4 = a6 & 0x000000FF
	Mem0[a1 + 0x00000054:word32] = a4
	branch a4 == 0x00000000 l40225526
	// succ:  l40225519 l40225526
l40225519:
	a8 = Mem0[a1 + 0x00000054:word32]
	a0 = 5
	branch a8 <u 0x00000002 l40225528
	a8 = Mem0[a1 + 0x00000054:word32]
	a0 = 5
	branch a8 <u 0x00000002 l40225528
	// succ:  l40225521 l40225528
l40225521:
	a0 = 6
	a0 = 6
	goto l40225528
	// succ:  l40225528
l40225526:
	a0 = 4
	// succ:  l40225528
l40225528:
	a10 = a0 & 0x000000FF
	Mem0[a1 + 0x0000006C:word32] = a10
	branch a9 == 0x00000000 l4022554E
	// succ:  l40225530 l4022554E
l40225530:
	a2 = 0x402252DC
	a3 = Mem0[a1 + 0x0000004C:word32]
	a4 = Mem0[a1 + 0x00000018:word32]
	a5 = Mem0[a1 + 0x00000030:word32]
	a7 = Mem0[a1 + 0x00000014:word32]
	a6 = Mem0[a1 + 0x00000010:word32]
	v31 = Mem0[a15 + 0x00000000:int16]
	a12 = (int32) v31
	Mem0[a1:word32] = a12
	v32 = Mem0[a15 + 0x00000002:int16]
	a11 = (int32) v32
	Mem0[a1 + 0x00000004:word32] = a11
	a0 = 0x4021262C
	v33 = a0
	a0 = 0x4022554E
	call v33 (retsize: 0;)
	// succ:  l4022554E
l4022554E:
	a13 = Mem0[a1 + 0x00000060:word32]
	branch a13 == 0x00000000 l4022555C
	// succ:  l40225553 l4022555C
l40225553:
	a2 = 0x402252E0
	a0 = 0x4021262C
	v34 = a0
	a0 = 0x4022555C
	call v34 (retsize: 0;)
	// succ:  l4022555C
l4022555C:
	a13 = 0x00000200
	a12 = 0x00000200
	a6 = 0
	a15 = Mem0[a1 + 0x00000048:word32]
	a0 = Mem0[a1 + 0x0000004C:word32]
	a15 = a15 - 1
	a0 = a0 & 0x000000FF
	Mem0[a1 + 0x00000064:word32] = a0
	Mem0[a1 + 0x00000048:word32] = a15
	branch a15 != 0x00000000 l402253BD
	// succ:  l40225578 l402253BD
l40225578:
	a2 = Mem0[a1 + 0x00000044:word32]
	branch a2 == 0x00000000 l40225586
	// succ:  l4022557D l40225586
l4022557D:
	a2 = 0x402252E0
	a0 = 0x4021262C
	v35 = a0
	a0 = 0x40225586
	call v35 (retsize: 0;)
	// succ:  l40225586
l40225586:
	a12 = Mem0[a1 + 0x00000020:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000028:word32]
	a15 = Mem0[a1 + 0x0000002C:word32]
	a2 = 0x00000080
	a0 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + a2
	return
	// succ:  sdk_rom_pbus_dco___SA2_exit
l40265498:
sdk_rom_pbus_dco___SA2_exit:


// sdk_rom_rfcal_pwrctrl
// Return size: 0
void sdk_rom_rfcal_pwrctrl()
sdk_rom_rfcal_pwrctrl_entry:
	// succ:  l4022559C
l4022559C:
	a1 = fp
	a1 = a1 - 96
	Mem0[a1 + 0x00000020:word32] = a15
	Mem0[a1 + 0x00000030:word32] = a3
	Mem0[a1 + 0x00000038:word32] = a4
	Mem0[a1 + 0x00000040:word32] = a5
	Mem0[a1 + 0x00000034:word32] = a7
	Mem0[a1 + 0x0000001C:word32] = a14
	Mem0[a1 + 0x00000018:word32] = a13
	Mem0[a1 + 0x00000014:word32] = a12
	a12 = 0x4021BCEC
	Mem0[a1 + 0x00000010:word32] = a0
	a0 = Mem0[a12 + 0x00000000:word32]
	a13 = a6
	a0 = Mem0[a0 + 0x000000A0:word32]
	a14 = a2
	v14 = a0
	a0 = 0x402255C1
	call v14 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C0:word32]
	a2 = 1
	v15 = a0
	a0 = 0x402255CB
	call v15 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000CC:word32]
	a2 = a13 & 0x0000001F
	v16 = a0
	a0 = 0x402255D6
	call v16 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000018:word32]
	a2 = 0
	v17 = a0
	a0 = 0x402255DF
	call v17 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000038:word32]
	Mem0[a1 + 0x0000005C:word32] = a13
	branch a2 == 0x00000000 l402256F3
	// succ:  l402255E7 l402256F3
l402255E7:
	a13 = 0
	Mem0[a1 + 0x00000028:word32] = a14
	a7 = Mem0[a1 + 0x0000005C:word32]
	v18 = Mem0[a1 + 0x00000060:uint16]
	a3 = (uint32) v18
	v19 = Mem0[a1 + 0x00000068:byte]
	a4 = (uint32) v19
	v20 = Mem0[a1 + 0x00000064:uint16]
	a5 = (uint32) v20
	Mem0[a1 + 0x00000024:word32] = a5
	Mem0[a1 + 0x0000002C:word32] = a4
	Mem0[a1 + 0x00000058:word32] = a3
	a8 = a7 & 0x00000007
	a7 = a7 >>u 0x00000003 & 0x00000003
	a7 = a7 + a7 * 0x00000002
	a7 = a8 + a7 * 0x00000002
	a7 = a7 & 0x000000FF
	Mem0[a1 + 0x0000003C:word32] = a7
	// succ:  l4022560F
l4022560F:
	a14 = 0
	a15 = 0
	a8 = Mem0[a1 + 0x00000030:word32]
	a9 = Mem0[a1 + 0x00000040:word32]
	a8 = a8 + a13
	v23 = Mem0[a8 + 0x00000000:byte]
	a8 = (uint32) v23
	Mem0[a1 + 0x00000050:word32] = a8
	a8 = a8 - a9
	Mem0[a1 + 0x00000048:word32] = a8
	// succ:  l40225626
l40225626:
	a2 = Mem0[a1 + 0x0000003C:word32]
	a3 = Mem0[a1 + 0x00000048:word32]
	a0 = Mem0[a12 + 0x00000000:word32]
	a3 = a3 - a14
	a0 = Mem0[a0 + 0x0000001C:word32]
	a3 = a3 & 0x000000FF
	v24 = a0
	a0 = 0x4022563B
	call v24 (retsize: 0;)
	Mem0[a1 + 0x00000044:word32] = a2
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = a2 & 0x000000FF
	a0 = Mem0[a0 + 0x00000050:word32]
	Mem0[a1 + 0x0000004C:word32] = a2
	v25 = a0
	a0 = 0x4022564C
	call v25 (retsize: 0;)
	a5 = 0
	a6 = 0
	a7 = 0
	a4 = a2
	a3 = 0
	Mem0[a1 + 0x00000008:word32] = a3
	Mem0[a1 + 0x00000004:word32] = a3
	Mem0[a1:word32] = a3
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 1
	a0 = Mem0[a0 + 0x00000068:word32]
	a3 = Mem0[a1 + 0x00000028:word32]
	v26 = a0
	a0 = 0x40225668
	call v26 (retsize: 0;)
	branch a13 != 0x00000000 l40225671
	// succ:  l4022566A l40225671
l4022566A:
	branch a15 != 0x00000000 l40225671
	// succ:  l4022566C l40225671
l4022566C:
	a2 = Mem0[a1 + 0x00000024:word32]
	a0 = 0x40225671
	call fn40303F28 (retsize: 0;)
	// succ:  l40225671
l40225671:
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000002C:word32]
	a2 = Mem0[a1 + 0x00000058:word32]
	v31 = a0
	a0 = 0x4022567B
	call v31 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x00000054:word32] = a2
	a0 = Mem0[a0 + 0x0000002C:word32]
	a2 = Mem0[a1 + 0x00000058:word32]
	v32 = a0
	a0 = 0x40225688
	call v32 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000054:word32]
	a6 = Mem0[a1 + 0x00000050:word32]
	a0 = a0 + a2
	a0 = a0 << 16
	a0 = a0 >> 16
	a0 = a0 + 4
	a0 = a0 >> 3
	a6 = a0 - a6
	a6 = a6 << 16
	a6 = a6 >> 16
	branch a6 == 0x00000000 l402256B3
	// succ:  l402256A6 l402256B3
l402256A6:
	a14 = a6 + a14
	a15 = a15 + 1
	a15 = a15 & 0x000000FF
	a2 = a15 - 4
	branch a2 != 0x00000000 l40225626
	// succ:  l402256B3 l40225626
l402256B3:
	a8 = Mem0[a1 + 0x0000002C:word32]
	a3 = Mem0[a1 + 0x00000040:word32]
	a9 = Mem0[a1 + 0x00000034:word32]
	a2 = Mem0[a1 + 0x0000004C:word32]
	a9 = a9 + a13
	branch a2 <u a3 l402256CB
	// succ:  l402256C2 l402256CB
l402256C2:
	a6 = Mem0[a1 + 0x00000044:word32]
	a6 = a6 - a3
	goto l402256CD
	// succ:  l402256CD
l402256CB:
	a6 = 0
	// succ:  l402256CD
l402256CD:
	Mem0[a9:byte] = a6
	branch a8 == 0x00000000 l402256E6
	// succ:  l402256D2 l402256E6
l402256D2:
	a4 = Mem0[a1 + 0x00000050:word32]
	a2 = 0x40225598
	a3 = a13
	a5 = a0 << 8
	a5 = a5 >> 24
	a0 = 0x4021262C
	v33 = a0
	a0 = 0x402256E6
	call v33 (retsize: 0;)
	// succ:  l402256E6
l402256E6:
	a6 = Mem0[a1 + 0x00000038:word32]
	a13 = a13 + 1
	a13 = a13 & 0x000000FF
	a6 = a6 - a13
	branch a6 != 0x00000000 l4022560F
	// succ:  l402256F3 l4022560F
l402256F3:
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000006C:word32]
	a2 = 1
	v27 = a0
	a0 = 0x402256FD
	call v27 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C8:word32]
	v28 = a0
	a0 = 0x40225705
	call v28 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C4:word32]
	v29 = a0
	a0 = 0x4022570D
	call v29 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000BC:word32]
	v30 = a0
	a0 = 0x40225715
	call v30 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x00000018:word32]
	a14 = Mem0[a1 + 0x0000001C:word32]
	a15 = Mem0[a1 + 0x00000020:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 96
	return
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000006C:word32]
	a2 = 1
	v34 = a0
	a0 = 0x402256FD
	call v34 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C8:word32]
	v35 = a0
	a0 = 0x40225705
	call v35 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C4:word32]
	v36 = a0
	a0 = 0x4022570D
	call v36 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000BC:word32]
	v37 = a0
	a0 = 0x40225715
	call v37 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x00000018:word32]
	a14 = Mem0[a1 + 0x0000001C:word32]
	a15 = Mem0[a1 + 0x00000020:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 96
	return
	// succ:  sdk_rom_rfcal_pwrctrl_exit sdk_rom_rfcal_pwrctrl_exit
sdk_rom_rfcal_pwrctrl_exit:


// sdk_rom_rfcal_rxiq
// Return size: 0
void sdk_rom_rfcal_rxiq()
sdk_rom_rfcal_rxiq_entry:
	// succ:  l40225724
l40225724:
	a1 = fp
	a9 = a5
	a10 = a3
	a1 = a1 - 80
	Mem0[a1 + 0x00000038:word32] = a13
	Mem0[a1 + 0x0000003C:word32] = a14
	Mem0[a1 + 0x00000020:word32] = a7
	a3 = 0
	a5 = 0
	Mem0[a1 + 0x00000040:word32] = a15
	Mem0[a1 + 0x00000030:word32] = a0
	Mem0[a1 + 0x00000034:word32] = a12
	Mem0[a1 + 0x0000004C:word32] = a6
	Mem0[a1 + 0x00000014:word32] = a2
	Mem0[a1 + 0x00000018:word32] = a4
	a2 = 0x00000077
	a4 = 16
	a6 = 0
	a12 = 0x4021BCEC
	Mem0[a1 + 0x00000044:word32] = a10
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x00000048:word32] = a9
	a0 = Mem0[a0 + 0x00000094:word32]
	a15 = Mem0[a1 + 0x0000004C:word32]
	v16 = a0
	a0 = 0x4022575E
	call v16 (retsize: 0;)
	a3 = 0
	a4 = 15
	a5 = 6
	a6 = 6
	a0 = Mem0[a12 + 0x00000000:word32]
	a14 = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000077
	v17 = a0
	a0 = 0x40225773
	call v17 (retsize: 0;)
	a3 = 0
	a4 = 24
	a5 = 5
	a6 = 5
	a0 = Mem0[a12 + 0x00000000:word32]
	a13 = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000077
	v18 = a0
	a0 = 0x40225788
	call v18 (retsize: 0;)
	a3 = 0
	a4 = 24
	a5 = 3
	a6 = 3
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x00000024:word32] = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000077
	v19 = a0
	a0 = 0x4022579D
	call v19 (retsize: 0;)
	a3 = 0
	a4 = 9
	a5 = 7
	a6 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x00000028:word32] = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000077
	v20 = a0
	a0 = 0x402257B2
	call v20 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x0000001C:word32] = a2
	a0 = Mem0[a0 + 0x00000040:word32]
	a2 = 1
	v21 = a0
	a0 = 0x402257BE
	call v21 (retsize: 0;)
	Mem0[a1 + 0x00000010:byte] = a14
	Mem0[a1 + 0x00000011:byte] = a13
	branch a15 == 0x00000000 l402257D4
	// succ:  l402257C6 l402257D4
l402257C6:
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = a1 + 16
	a0 = Mem0[a0 + 0x00000114:word32]
	a3 = a1 + 17
	v22 = a0
	a0 = 0x402257D4
	call v22 (retsize: 0;)
	// succ:  l402257D4
l402257D4:
	a2 = 0x00000077
	a3 = 0
	a4 = 16
	a5 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 2
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v23 = a0
	a0 = 0x402257E9
	call v23 (retsize: 0;)
	Mem0[a1 + 0x0000002C:word32] = a14
	a2 = 0x00000077
	a3 = 0
	a4 = 24
	a5 = 7
	a0 = Mem0[a12 + 0x00000000:word32]
	a7 = 1
	v24 = Mem0[a1 + 0x00000010:byte]
	a9 = (uint32) v24
	v26 = Mem0[a1 + 0x00000011:byte]
	a8 = (uint32) v26
	a9 = a9 - a14
	a8 = a8 - a13
	branch a8 == 0x00000000 l40225807
	// succ:  l40225804_1 l40225807
l40225804_1:
	a8 = a7
	// succ:  l40225807
l40225807:
	branch a9 == 0x00000000 l4022580A
	// succ:  l40225807_2 l4022580A
l40225807_2:
	a9 = a7
	// succ:  l4022580A
l4022580A:
	Mem0[a1 + 0x00000010:byte] = a9
	Mem0[a1 + 0x00000011:byte] = a8
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 7
	v27 = a0
	a0 = 0x40225818
	call v27 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a14 = Mem0[a1 + 0x00000044:word32]
	a0 = Mem0[a0 + 0x00000050:word32]
	a2 = Mem0[a1 + 0x00000018:word32]
	v28 = a0
	a0 = 0x40225825
	call v28 (retsize: 0;)
	a5 = 0
	a6 = 0
	a7 = 0
	a4 = a2
	a3 = 0
	Mem0[a1 + 0x00000008:word32] = a3
	Mem0[a1 + 0x00000004:word32] = a3
	Mem0[a1:word32] = a3
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 1
	a0 = Mem0[a0 + 0x00000068:word32]
	a3 = a14
	v29 = a0
	a0 = 0x40225841
	call v29 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000014:word32]
	a7 = Mem0[a1 + 0x00000020:word32]
	a6 = a1 + 19
	v30 = Mem0[a1 + 0x00000011:byte]
	a4 = (uint32) v30
	a5 = Mem0[a1 + 0x00000024:word32]
	v31 = Mem0[a1 + 0x00000010:byte]
	a3 = (uint32) v31
	a14 = a5
	Mem0[a1 + 0x00000004:word32] = a15
	Mem0[a1:word32] = a6
	Mem0[a1 + 0x00000008:word32] = a7
	a7 = a1 + 18
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = Mem0[a1 + 0x00000028:word32]
	a0 = Mem0[a0 + 0x0000010C:word32]
	a15 = a6
	v32 = a0
	a0 = 0x40225867
	call v32 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000006C:word32]
	a2 = 1
	v33 = a0
	a0 = 0x40225871
	call v33 (retsize: 0;)
	a7 = Mem0[a1 + 0x0000002C:word32]
	a2 = 0x00000077
	a3 = 0
	a4 = 16
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 0
	v34 = a0
	a0 = 0x40225886
	call v34 (retsize: 0;)
	a7 = a13
	a2 = 0x00000077
	a3 = 0
	a4 = 15
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 6
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 6
	v35 = a0
	a0 = 0x4022589B
	call v35 (retsize: 0;)
	a7 = a14
	a2 = 0x00000077
	a3 = 0
	a4 = 24
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 5
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 5
	v36 = a0
	a0 = 0x402258B0
	call v36 (retsize: 0;)
	a7 = a15
	a2 = 0x00000077
	a3 = 0
	a4 = 24
	a5 = 3
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 3
	a0 = Mem0[a0 + 0x0000009C:word32]
	a13 = Mem0[a1 + 0x0000001C:word32]
	v37 = a0
	a0 = 0x402258C7
	call v37 (retsize: 0;)
	a7 = a13
	a2 = 0x00000077
	a3 = 0
	a4 = 9
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 7
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 0
	v38 = a0
	a0 = 0x402258DC
	call v38 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 24
	a5 = 7
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 7
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v39 = a0
	a0 = 0x402258F1
	call v39 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 16
	a5 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 2
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v40 = a0
	a0 = 0x40225906
	call v40 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a13 = Mem0[a1 + 0x00000048:word32]
	a0 = Mem0[a0 + 0x00000040:word32]
	a2 = 0
	v41 = a0
	a0 = 0x40225913
	call v41 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000030:word32]
	a12 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x0000003C:word32]
	v42 = Mem0[a1 + 0x00000012:byte]
	a3 = (uint32) v42
	a15 = Mem0[a1 + 0x00000040:word32]
	Mem0[a13:byte] = a3
	v43 = Mem0[a1 + 0x00000013:byte]
	a2 = (uint32) v43
	Mem0[a13 + 0x00000001:byte] = a2
	a13 = Mem0[a1 + 0x00000038:word32]
	a1 = a1 + 80
	return
	// succ:  sdk_rom_rfcal_rxiq_exit
sdk_rom_rfcal_rxiq_exit:


// sdk_rom_rfcal_rxiq_set_reg
// Return size: 0
void sdk_rom_rfcal_rxiq_set_reg()
sdk_rom_rfcal_rxiq_set_reg_entry:
	// succ:  l40225930
l40225930:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000018:word32] = a4
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000014:word32] = a15
	a14 = a5
	a15 = a4
	a0 = 15
	branch a5 == 0x00000000 l40225962
	// succ:  l40225947 l40225962
l40225947:
	branch a2 >= 0x00000000 l40225958
	// succ:  l4022594A l40225958
l4022594A:
	a13 = 1
	a12 = -a2
	a12 = a12 << 8
	a12 = a12 >> 24
	goto l4022595C
	// succ:  l4022595C
l40225958:
	a13 = 0
	a12 = a2
	// succ:  l4022595C
l4022595C:
	Mem0[a3:byte] = a13
	goto l40225967
	// succ:  l40225967
l40225962:
	a12 = a2
	v11 = Mem0[a1 + 0x00000000:byte]
	a13 = (uint32) v11
	// succ:  l40225967
l40225967:
	a2 = 31
	branch a15 == 0x00000000 l4022596C
	// succ:  l40225969_1 l4022596C
l40225969_1:
	a2 = a0
	// succ:  l4022596C
l4022596C:
	a0 = 0x4021BCEC
	branch a14 == 0x00000000 l402259FA
	// succ:  l40225972 l402259FA
l40225972:
	branch a12 >= a2 l40225977
	// succ:  l40225975 l40225977
l40225975:
	a2 = a12
	// succ:  l40225977
l40225977:
	a9 = Mem0[a0 + 0x00000000:word32]
	a12 = a2 << 8
	a12 = a12 >> 24
	a9 = Mem0[a9 + 0x0000009C:word32]
	branch a15 == 0x00000000 l40225A06
	// succ:  l40225985 l40225A06
l40225985:
	a2 = 0x00000077
	a3 = 0
	a4 = 24
	a5 = 5
	a6 = 5
	a7 = a13
	a0 = 0x40225995
	call a9 (retsize: 0;)
	a0 = 0x4021BCEC
	a9 = Mem0[a0 + 0x00000000:word32]
	a9 = Mem0[a9 + 0x0000009C:word32]
	branch a15 == 0x00000000 l402259B3
	// succ:  l4022599F l402259B3
l4022599F:
	a7 = a12 & 0x0000001F
	a2 = 0x00000077
	a3 = 0
	a4 = 25
	a5 = 4
	a6 = 0
	a0 = 0x402259B0
	call a9 (retsize: 0;)
	goto l402259DD
	// succ:  l402259DD
l402259B3:
	a2 = 0x00000077
	a3 = 0
	a4 = 25
	a5 = 7
	a6 = 5
	a7 = a12 >>u 0x00000003 & 0x00000007
	a0 = 0x402259C4
	call a9 (retsize: 0;)
	a7 = a12 & 0x00000007
	a2 = 0x00000077
	a3 = 0
	a0 = 0x4021BCEC
	a4 = 26
	a0 = Mem0[a0 + 0x00000000:word32]
	a5 = 2
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 0
	v16 = a0
	a0 = 0x402259DD
	call v16 (retsize: 0;)
	// succ:  l402259DD
l402259DD:
	a0 = Mem0[a1 + 0x00000004:word32]
	a15 = Mem0[a1 + 0x00000014:word32]
	branch (a13 & a14) == 0x00000000 l402259ED
	// succ:  l402259E4 l402259ED
l402259E4:
	a12 = -a12
	a12 = a12 << 8
	a12 = a12 >> 24
	// succ:  l402259ED
l402259ED:
	a13 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12
	a14 = Mem0[a1 + 0x00000010:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_rom_rfcal_rxiq_set_reg_exit
l402259FA:
	branch a2 >= a12 l40225A1C
	// succ:  l402259FD l40225A1C
l402259FD:
	a12 = a2 << 8
	a12 = a12 >> 24
	goto l40265998
	// succ:  l40265998
l40225A06:
	a2 = 0x00000077
	a3 = 0
	a4 = 24
	a5 = 3
	a6 = 3
	a7 = a13
	a0 = 0x40225A16
	call a9 (retsize: 0;)
	a0 = 0x4021BCEC
	goto l40265998
	// succ:  l40265998
l40225A1C:
	a2 = -a2
	branch a12 >= a2 l40225A24
	// succ:  l40225A22 l40225A24
l40225A22:
	a12 = a2
	// succ:  l40225A24
l40225A24:
	a2 = a12
	goto l402659FD
	// succ:  l402659FD
l40265998:
l402659FD:
sdk_rom_rfcal_rxiq_set_reg_exit:


// sdk_rom_rfcal_txcap
// Return size: 0
void sdk_rom_rfcal_txcap()
sdk_rom_rfcal_txcap_entry:
	// succ:  l40225A34
l40225A34:
	a1 = fp
	a9 = a2
	a1 = a1 - 80
	Mem0[a1 + 0x00000024:word32] = a15
	Mem0[a1 + 0x00000030:word32] = a3
	Mem0[a1 + 0x00000038:word32] = a7
	Mem0[a1 + 0x00000014:word32] = a0
	Mem0[a1 + 0x00000020:word32] = a14
	Mem0[a1 + 0x00000018:word32] = a12
	Mem0[a1 + 0x0000001C:word32] = a13
	a12 = a6
	a13 = a5
	a14 = a4
	a0 = 0x4021BCEC
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = a2 >>u 0x00000012 & 0x00000001
	branch a2 != 0x00000000 l40225C14
	// succ:  l40225A5A l40225C14
l40225A5A:
	Mem0[a1 + 0x00000044:word32] = a9
	a3 = Mem0[a1 + 0x00000030:word32]
	a2 = 0
	a0 = Mem0[a0 + 0x000000A0:word32]
	Mem0[a3:word32] = a2
	v15 = a0
	a0 = 0x40225A69
	call v15 (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C0:word32]
	a2 = 1
	v16 = a0
	a0 = 0x40225A76
	call v16 (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000CC:word32]
	a2 = a14 & 0x0000001F
	v17 = a0
	a0 = 0x40225A84
	call v17 (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000018:word32]
	a2 = 0
	v18 = a0
	a0 = 0x40225A90
	call v18 (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000050:word32]
	a2 = a12
	v19 = a0
	a0 = 0x40225A9D
	call v19 (retsize: 0;)
	a5 = 0
	a6 = 0
	a7 = 0
	a4 = a2
	a0 = 0x4021BCEC
	a3 = 0
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000004:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a3
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = 1
	a0 = Mem0[a0 + 0x00000068:word32]
	a3 = a13
	v20 = a0
	a0 = 0x40225ABC
	call v20 (retsize: 0;)
	a13 = 0
	v21 = Mem0[a1 + 0x00000050:byte]
	a4 = (uint32) v21
	a5 = 3
	v22 = Mem0[a1 + 0x00000010:byte]
	a6 = (uint32) v22
	Mem0[a1 + 0x00000028:word32] = a6
	Mem0[a1 + 0x0000002C:word32] = a5
	Mem0[a1 + 0x00000040:word32] = a4
	// succ:  l40225ACD
l40225ACD:
	branch a13 == 0x00000000 l40225ADC
	// succ:  l40225ACF l40225ADC
l40225ACF:
	branch a13 == 1 l40225ADC
	// succ:  l40225AD2 l40225ADC
l40225AD2:
	branch a13 != 2 l40225AE0
	// succ:  l40225AD5 l40225AE0
l40225AD5:
	a7 = 7
	Mem0[a1 + 0x00000028:word32] = a7
	goto l40225AE0
	// succ:  l40225AE0
l40225ADC:
	a8 = 15
	Mem0[a1 + 0x00000028:word32] = a8
	// succ:  l40225AE0
l40225AE0:
	a15 = 0
	a12 = 0
	a9 = 0
	a10 = Mem0[a1 + 0x00000028:word32]
	Mem0[a1 + 0x00000034:word32] = a9
	a10 = a10 + 1
	Mem0[a1 + 0x0000003C:word32] = a10
	branch a13 == 0x00000000 l40225B2C
	// succ:  l40225AF0 l40225B2C
l40225AF0:
	branch a13 == 1 l40225B11
	// succ:  l40225AF3 l40225B11
l40225AF3:
	branch a13 != 2 l40225B44
	// succ:  l40225AF6 l40225B44
l40225AF6:
	a2 = 0x0000006B
	a3 = 2
	a4 = 2
	a0 = 0x4021BCEC
	a5 = 6
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = 4
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a12
	v28 = a0
	a0 = 0x40225B0E
	call v28 (retsize: 0;)
	goto l40225B44
	// succ:  l40225B44
l40225B11:
	a2 = 0x0000006B
	a3 = 2
	a4 = 2
	a0 = 0x4021BCEC
	a5 = 3
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a12
	v32 = a0
	a0 = 0x40225B29
	call v32 (retsize: 0;)
	goto l40225B44
	// succ:  l40225B44
l40225B2C:
	a2 = 0x0000006B
	a3 = 2
	a4 = 1
	a0 = 0x4021BCEC
	a5 = 3
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a12
	v33 = a0
	a0 = 0x40225B44
	call v33 (retsize: 0;)
	// succ:  l40225B44
l40225B44:
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a2 = Mem0[a1 + 0x00000038:word32]
	a0 = Mem0[a0 + 0x00000070:word32]
	a3 = 10
	v30 = a0
	a0 = 0x40225B53
	call v30 (retsize: 0;)
	a14 = a2
	a2 = Mem0[a1 + 0x00000040:word32]
	branch a2 == 0x00000000 l40225B67
	// succ:  l40225B5A l40225B67
l40225B5A:
	a2 = 0x40225A2C
	a3 = a12
	a4 = a14
	a0 = 0x4021262C
	v31 = a0
	a0 = 0x40225B67
	call v31 (retsize: 0;)
	// succ:  l40225B67
l40225B67:
	a4 = Mem0[a1 + 0x0000003C:word32]
	branch a15 >= a14 l40225B70
	// succ:  l40225B6C l40225B70
l40225B6C:
	a15 = a14
	Mem0[a1 + 0x00000034:word32] = a12
	// succ:  l40225B70
l40225B70:
	a12 = a12 + 1
	a12 = a12 & 0x000000FF
	branch a4 == a12 l40225B7B
	// succ:  l40225B78 l40225B7B
l40225B78:
	goto l40265AEE
	// succ:  l40265AEE
l40225B7B:
	a14 = Mem0[a1 + 0x00000040:word32]
	branch a14 == 0x00000000 l40225B8D
	// succ:  l40225B80 l40225B8D
l40225B80:
	a2 = 0x40225A30
	a3 = a13
	a4 = Mem0[a1 + 0x00000034:word32]
	a0 = 0x4021262C
	v34 = a0
	a0 = 0x40225B8D
	call v34 (retsize: 0;)
	// succ:  l40225B8D
l40225B8D:
	branch a13 == 0x00000000 l40225BB2
	// succ:  l40225B8F l40225BB2
l40225B8F:
	a15 = a13 - 1
	branch a15 == 0x00000000 l40225C73
	// succ:  l40225B94 l40225C73
l40225B94:
	branch a13 != 2 l40225BCA
	// succ:  l40225B97 l40225BCA
l40225B97:
	a2 = 0x0000006B
	a3 = 2
	a4 = 2
	a0 = 0x4021BCEC
	a5 = 6
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = 4
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = Mem0[a1 + 0x00000034:word32]
	v35 = a0
	a0 = 0x40225BAF
	call v35 (retsize: 0;)
	goto l40225BCA
	// succ:  l40225BCA
l40225BB2:
	a2 = 0x0000006B
	a3 = 2
	a4 = 1
	a0 = 0x4021BCEC
	a5 = 3
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = Mem0[a1 + 0x00000034:word32]
	v36 = a0
	a0 = 0x40225BCA
	call v36 (retsize: 0;)
	// succ:  l40225BCA
l40225BCA:
	a14 = Mem0[a1 + 0x00000034:word32]
	a15 = Mem0[a1 + 0x00000030:word32]
	a2 = a13 << 29
	SAR = 0x00000020 - a2
	a13 = a13 + 1
	a13 = a13 & 0x000000FF
	a0 = Mem0[a15 + 0x00000000:word32]
	a2 = Mem0[a1 + 0x0000002C:word32]
	a0 = a0 << SAR
	a2 = a2 - 1
	Mem0[a1 + 0x0000002C:word32] = a2
	a14 = a14 | a0
	Mem0[a15:word32] = a14
	branch a2 != 0x00000000 l40225ACD
	// succ:  l40225BEC l40225ACD
l40225BEC:
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000006C:word32]
	a2 = 1
	v38 = a0
	a0 = 0x40225BF9
	call v38 (retsize: 0;)
	a0 = 0x4021BCEC
	a0 = Mem0[a0 + 0x00000000:word32]
	a12 = 0x40215E28
	a0 = Mem0[a0 + 0x000000A8:word32]
	a13 = Mem0[a1 + 0x00000044:word32]
	v39 = a0
	a0 = 0x40225C0A
	call v39 (retsize: 0;)
	a2 = Mem0[a13 + 0x00000000:word32]
	a2 = a2 | a12
	Mem0[a13:word32] = a2
	goto l40225C64
	// succ:  l40225C64
l40225C14:
	a2 = 0x0000006B
	a3 = 2
	a4 = 1
	a5 = 3
	a7 = Mem0[a1 + 0x00000030:word32]
	a6 = 0
	a7 = Mem0[a7 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a7 >>u 0x00000010 & 0x000000FF
	v23 = a0
	a0 = 0x40225C2C
	call v23 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a4 = 2
	a5 = 3
	a6 = 0
	a0 = 0x4021BCEC
	a7 = Mem0[a1 + 0x00000030:word32]
	a0 = Mem0[a0 + 0x00000000:word32]
	a7 = Mem0[a7 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = a7 >>u 0x00000008 & 0x000000FF
	v24 = a0
	a0 = 0x40225C49
	call v24 (retsize: 0;)
	a2 = 0x0000006B
	a3 = 2
	a4 = 2
	a5 = 6
	a0 = 0x4021BCEC
	a6 = 4
	a0 = Mem0[a0 + 0x00000000:word32]
	a7 = Mem0[a1 + 0x00000030:word32]
	a0 = Mem0[a0 + 0x0000009C:word32]
	v25 = Mem0[a7 + 0x00000000:byte]
	a7 = (uint32) v25
	v26 = a0
	a0 = 0x40225C64
	call v26 (retsize: 0;)
	// succ:  l40225C64
l40225C64:
	a12 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x0000001C:word32]
	a14 = Mem0[a1 + 0x00000020:word32]
	a15 = Mem0[a1 + 0x00000024:word32]
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 80
	return
	// succ:  sdk_rom_rfcal_txcap_exit
l40225C73:
	a2 = 0x0000006B
	a3 = 2
	a4 = 2
	a0 = 0x4021BCEC
	a5 = 3
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = Mem0[a1 + 0x00000034:word32]
	v40 = a0
	a0 = 0x40225C8B
	call v40 (retsize: 0;)
	goto l40265BCA
	// succ:  l40265BCA
l40265AEE:
l40265BCA:
sdk_rom_rfcal_txcap_exit:


// sdk_rom_rfcal_txiq
// Return size: 0
void sdk_rom_rfcal_txiq()
sdk_rom_rfcal_txiq_entry:
	// succ:  l40225C94
l40225C94:
	a1 = fp
	a9 = a3
	a1 = a1 - 64
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000034:word32] = a15
	Mem0[a1 + 0x0000003C:word32] = a4
	Mem0[a1 + 0x00000018:word32] = a5
	Mem0[a1 + 0x00000014:word32] = a7
	Mem0[a1 + 0x00000024:word32] = a0
	Mem0[a1 + 0x00000030:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a13
	a14 = 0x4021E4C4
	Mem0[a1 + 0x0000000C:word32] = a9
	a13 = a2
	a2 = a6
	a0 = Mem0[a13 + 0x00000000:word32]
	Mem0[a1 + 0x00000010:word32] = a2
	a0 = a0 >>u 0x00000011 & 0x00000001
	branch a0 != 0x00000000 l40225E55
	// succ:  l40225CBC l40225E55
l40225CBC:
	a15 = Mem0[a1 + 0x0000003C:word32]
	a2 = 0x00000077
	a3 = 0
	a12 = 0x4021BCEC
	a4 = 16
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 0
	a0 = Mem0[a0 + 0x00000094:word32]
	a6 = 0
	v15 = a0
	a0 = 0x40225CD4
	call v15 (retsize: 0;)
	a3 = 0
	a4 = 15
	a5 = 6
	a6 = 6
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x00000008:word32] = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000077
	v16 = a0
	a0 = 0x40225CE9
	call v16 (retsize: 0;)
	a3 = 0
	a4 = 9
	a5 = 7
	a6 = 0
	a0 = Mem0[a12 + 0x00000000:word32]
	Mem0[a1 + 0x0000001C:word32] = a2
	a0 = Mem0[a0 + 0x00000094:word32]
	a2 = 0x00000077
	v17 = a0
	a0 = 0x40225CFE
	call v17 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000A0:word32]
	Mem0[a1 + 0x00000004:word32] = a2
	v18 = a0
	a0 = 0x40225D08
	call v18 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000C0:word32]
	a2 = 1
	v19 = a0
	a0 = 0x40225D12
	call v19 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x000000CC:word32]
	a2 = a15 & 0x0000001F
	v20 = a0
	a0 = 0x40225D1D
	call v20 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000018:word32]
	a2 = 0
	v21 = a0
	a0 = 0x40225D26
	call v21 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x0000003C:word32]
	a2 = 1
	v22 = a0
	a0 = 0x40225D2F
	call v22 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 16
	a5 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 2
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 1
	v23 = a0
	a0 = 0x40225D44
	call v23 (retsize: 0;)
	v24 = Mem0[a1 + 0x00000040:byte]
	a15 = (uint32) v24
	branch a15 == 0x00000000 l40225D54
	// succ:  l40225D49 l40225D54
l40225D49:
	a2 = 0x40225C90
	a3 = Mem0[a1 + 0x00000010:word32]
	a0 = 0x4021262C
	v25 = a0
	a0 = 0x40225D54
	call v25 (retsize: 0;)
	// succ:  l40225D54
l40225D54:
	a6 = a15 | a15
	a2 = Mem0[a1 + 0x00000010:word32]
	a3 = Mem0[a1 + 0x00000018:word32]
	a5 = Mem0[a1 + 0x00000014:word32]
	v26 = Mem0[a1 + 0x00000044:byte]
	a7 = (uint32) v26
	a4 = a1
	a0 = 0x40225D67
	call fn40320CC0 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000000:word32]
	a2 = 1
	a0 = Mem0[a0 + 0x0000006C:word32]
	a15 = Mem0[a1 + 0x00000008:word32]
	v27 = a0
	a0 = 0x40225D73
	call v27 (retsize: 0;)
	a7 = a15
	a2 = 0x00000077
	a3 = 0
	a4 = 16
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 0
	v28 = a0
	a0 = 0x40225D88
	call v28 (retsize: 0;)
	a7 = Mem0[a1 + 0x0000001C:word32]
	a2 = 0x00000077
	a3 = 0
	a4 = 15
	a5 = 6
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 6
	a0 = Mem0[a0 + 0x0000009C:word32]
	a15 = Mem0[a1 + 0x00000004:word32]
	v29 = a0
	a0 = 0x40225D9F
	call v29 (retsize: 0;)
	a7 = a15
	a2 = 0x00000077
	a3 = 0
	a4 = 9
	a0 = Mem0[a12 + 0x00000000:word32]
	a5 = 7
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 0
	v30 = a0
	a0 = 0x40225DB4
	call v30 (retsize: 0;)
	a2 = 0x00000077
	a3 = 0
	a4 = 16
	a5 = 2
	a0 = Mem0[a12 + 0x00000000:word32]
	a6 = 2
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v31 = a0
	a0 = 0x40225DC9
	call v31 (retsize: 0;)
	a5 = 32
	a11 = 0x4021BDC0
	a10 = Mem0[a11 + 0x00000028:word32]
	a10 = a10 | a5
	Mem0[a11 + 0x00000028:word32] = a10
	a8 = 2
	a9 = -16
	a7 = Mem0[a14 + 0x0000023C:word32]
	a7 = a7 & a9
	a7 = a7 | a8
	Mem0[a14 + 0x0000023C:word32] = a7
	a4 = 1
	a6 = 0xFFFFFE0E
	a3 = Mem0[a14 + 0x00000264:word32]
	a3 = a3 & a6
	a3 = a3 | a4
	a4 = 15
	Mem0[a14 + 0x00000264:word32] = a3
	v35 = Mem0[a1 + 0x00000000:byte]
	a2 = (uint32) v35
	a0 = -15
	a2 = a2 << 8
	a2 = a2 >> 24
	branch a2 < a0 l40225E1A
	// succ:  l40225E18 l40225E1A
l40225E18:
	a0 = a2
	// succ:  l40225E1A
l40225E1A:
	a2 = -31
	branch a4 < a0 l40225E21
	// succ:  l40225E1F l40225E21
l40225E1F:
	a4 = a0
	// succ:  l40225E21
l40225E21:
	a3 = 31
	Mem0[a1:byte] = a4
	a0 = a4 << 8
	v36 = Mem0[a1 + 0x00000001:byte]
	a4 = (uint32) v36
	a0 = a0 >> 24
	a4 = a4 << 8
	a4 = a4 >> 24
	branch a4 < a2 l40225E3A
	// succ:  l40225E38 l40225E3A
l40225E38:
	a2 = a4
	// succ:  l40225E3A
l40225E3A:
	a4 = a3
	branch a2 >= 32 l40225E41
	// succ:  l40225E3F l40225E41
l40225E3F:
	a4 = a2
	// succ:  l40225E41
l40225E41:
	Mem0[a1 + 0x00000001:byte] = a4
	a2 = a4 << 8
	a2 = a2 >> 24
	branch a0 >= 1 l40225E93
	// succ:  l40225E4D l40225E93
l40225E4D:
	a3 = -a0
	Mem0[a1 + 0x00000038:word32] = a3
	goto l40225E98
	// succ:  l40225E98
l40225E55:
	a12 = Mem0[a3 + 0x00000000:word32]
	a15 = a12 >>u 8
	a12 = a12 << 8
	a12 = a12 >> 24
	a0 = a15 << 8
	a2 = 0x4021D77C
	a15 = a12 << 14
	a15 = a15 | a2
	a2 = 0x40220ED4
	a13 = Mem0[a14 + 0x00000260:word32]
	a13 = a13 & a2
	a13 = a13 | a0
	a13 = a13 | a15
	a12 = Mem0[a1 + 0x00000028:word32]
	Mem0[a14 + 0x00000260:word32] = a13
	a15 = Mem0[a1 + 0x00000034:word32]
	a13 = Mem0[a1 + 0x0000002C:word32]
	a14 = Mem0[a1 + 0x00000030:word32]
	a0 = Mem0[a1 + 0x00000024:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_rom_rfcal_txiq_exit
l40225E93:
	a3 = a5 - a0
	Mem0[a1 + 0x00000038:word32] = a3
	// succ:  l40225E98
l40225E98:
	a15 = Mem0[a1 + 0x00000038:word32]
	a0 = Mem0[a12 + 0x00000000:word32]
	a12 = a2 + 64
	a0 = Mem0[a0 + 0x000000A8:word32]
	a15 = a15 << 8
	branch a2 < 0x00000000 l40225EA8
	// succ:  l40225EA5_1 l40225EA8
l40225EA5_1:
	a12 = a2
	// succ:  l40225EA8
l40225EA8:
	Mem0[a1 + 0x00000020:word32] = a12
	a15 = a15 >> 24
	a12 = a12 << 8
	a12 = a12 >> 24
	v37 = a0
	a0 = 0x40225EB6
	call v37 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000020:word32]
	a5 = Mem0[a1 + 0x00000038:word32]
	a4 = a4 << 8
	a5 = a5 << 8
	a5 = a5 >> 24
	a4 = a4 >> 24
	a5 = a5 << 24
	a4 = a4 | a5
	a5 = Mem0[a1 + 0x0000000C:word32]
	a3 = 0x402154AC
	Mem0[a5:word32] = a4
	a2 = Mem0[a13 + 0x00000000:word32]
	a2 = a2 | a3
	Mem0[a13:word32] = a2
	// succ:  l40265E60
l40265E60:
sdk_rom_rfcal_txiq_exit:


// sdk_rom_rfcal_txiq_cover
// Return size: 0
void sdk_rom_rfcal_txiq_cover()
sdk_rom_rfcal_txiq_cover_entry:
	// succ:  l40225EE0
l40225EE0:
	a1 = fp
	return
	// succ:  sdk_rom_rfcal_txiq_cover_exit
sdk_rom_rfcal_txiq_cover_exit:


// sdk_rom_rfcal_txiq_set_reg
// Return size: 0
void sdk_rom_rfcal_txiq_set_reg()
sdk_rom_rfcal_txiq_set_reg_entry:
	// succ:  l40225EE4
l40225EE4:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a15
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a13
	a14 = a3
	a13 = a4
	a0 = 15
	branch a4 == 0x00000000 l40225F03
	// succ:  l40225EF9 l40225F03
l40225EF9:
	branch a2 < 0x00000000 l40225F8E
	// succ:  l40225EFC l40225F8E
l40225EFC:
	a15 = 0
	a12 = a2
	goto l40225F08
	// succ:  l40225F08
l40225F03:
	a12 = a2
	v11 = Mem0[a1 + 0x00000000:byte]
	a15 = (uint32) v11
	// succ:  l40225F08
l40225F08:
	a2 = 31
	branch a14 == 0x00000000 l40225F0D
	// succ:  l40225F0A_1 l40225F0D
l40225F0A_1:
	a2 = a0
	// succ:  l40225F0D
l40225F0D:
	a0 = 0x4021BCEC
	branch a13 == 0x00000000 l40225F82
	// succ:  l40225F13 l40225F82
l40225F13:
	branch a12 >= a2 l40225F18
	// succ:  l40225F16 l40225F18
l40225F16:
	a2 = a12
	// succ:  l40225F18
l40225F18:
	a9 = Mem0[a0 + 0x00000000:word32]
	a12 = a2 << 8
	a12 = a12 >> 24
	a9 = Mem0[a9 + 0x0000009C:word32]
	branch a14 == 0x00000000 l40225F9C
	// succ:  l40225F26 l40225F9C
l40225F26:
	a2 = 0x00000077
	a3 = 0
	a4 = 16
	a5 = 0
	a6 = 0
	a7 = a15
	a0 = 0x40225F36
	call a9 (retsize: 0;)
	a0 = 0x4021BCEC
	a9 = Mem0[a0 + 0x00000000:word32]
	a9 = Mem0[a9 + 0x0000009C:word32]
	branch a14 == 0x00000000 l40225F54
	// succ:  l40225F40 l40225F54
l40225F40:
	a7 = a12 & 0x0000001F
	a2 = 0x00000077
	a3 = 0
	a4 = 16
	a5 = 7
	a6 = 3
	a0 = 0x40225F51
	call a9 (retsize: 0;)
	goto l40225F65
	// succ:  l40225F65
l40225F54:
	a7 = a12 & 0x0000003F
	a2 = 0x00000077
	a3 = 0
	a4 = 17
	a5 = 5
	a6 = 0
	a0 = 0x40225F65
	call a9 (retsize: 0;)
	// succ:  l40225F65
l40225F65:
	a0 = Mem0[a1 + 0x00000004:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	branch (a15 & a13) == 0x00000000 l40225F75
	// succ:  l40225F6C l40225F75
l40225F6C:
	a12 = -a12
	a12 = a12 << 8
	a12 = a12 >> 24
	// succ:  l40225F75
l40225F75:
	a13 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12
	a15 = Mem0[a1 + 0x00000014:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_rom_rfcal_txiq_set_reg_exit
l40225F82:
	branch a2 >= a12 l40225FB2
	// succ:  l40225F85 l40225FB2
l40225F85:
	a12 = a2 << 8
	a12 = a12 >> 24
	goto l40265F39
	// succ:  l40265F39
l40225F8E:
	a15 = 1
	a12 = -a2
	a12 = a12 << 8
	a12 = a12 >> 24
	goto l40265F08
	// succ:  l40265F08
l40225F9C:
	a2 = 0x00000077
	a3 = 0
	a4 = 15
	a5 = 6
	a6 = 6
	a7 = a15
	a0 = 0x40225FAC
	call a9 (retsize: 0;)
	a0 = 0x4021BCEC
	goto l40265F39
	// succ:  l40265F39
l40225FB2:
	a2 = -a2
	branch a12 >= a2 l40225FBA
	// succ:  l40225FB8 l40225FBA
l40225FB8:
	a12 = a2
	// succ:  l40225FBA
l40225FBA:
	a2 = a12
	goto l40265F85
	// succ:  l40265F85
l40265F08:
l40265F39:
l40265F85:
sdk_rom_rfcal_txiq_set_reg_exit:


// sdk_rom_rxiq_cover_mg_mp
// Return size: 0
void sdk_rom_rxiq_cover_mg_mp()
sdk_rom_rxiq_cover_mg_mp_entry:
	// succ:  l40225FC0
l40225FC0:
	a1 = fp
	a1 = a1 - 80
	Mem0[a1 + 0x0000002C:word32] = a3
	Mem0[a1 + 0x00000030:word32] = a4
	Mem0[a1 + 0x00000034:word32] = a5
	Mem0[a1 + 0x00000038:word32] = a6
	Mem0[a1 + 0x00000014:word32] = a7
	Mem0[a1 + 0x00000018:word32] = a0
	Mem0[a1 + 0x00000048:word32] = a2
	Mem0[a1 + 0x00000028:word32] = a15
	Mem0[a1 + 0x00000024:word32] = a14
	Mem0[a1 + 0x00000020:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a12
	a13 = 0
	a12 = 0
	a14 = 0x4021BCEC
	v14 = Mem0[a1 + 0x00000054:byte]
	a15 = (uint32) v14
	a2 = 2
	Mem0[a1 + 0x0000004C:word32] = a2
	a0 = Mem0[a1 + 0x00000048:word32]
	a2 = 1
	SAR = 0x00000020 - a0
	a2 = a2 << SAR
	v16 = Mem0[a1 + 0x00000058:byte]
	a0 = (uint32) v16
	Mem0[a1 + 0x00000040:word32] = a0
	a2 = a2 & 0x0000FFFF
	Mem0[a1 + 0x0000003C:word32] = a2
	// succ:  l40225FFF
l40225FFF:
	a2 = a12
	a3 = a1 + 16
	a0 = Mem0[a14 + 0x00000000:word32]
	a4 = 1
	a0 = Mem0[a0 + 0x000000F8:word32]
	a5 = a15
	v17 = a0
	a0 = 0x40226010
	call v17 (retsize: 0;)
	a3 = a1 + 17
	a4 = 0
	a5 = a15
	a0 = Mem0[a14 + 0x00000000:word32]
	Mem0[a1 + 0x00000044:word32] = a2
	a0 = Mem0[a0 + 0x000000F8:word32]
	a2 = a13
	v18 = a0
	a0 = 0x40226024
	call v18 (retsize: 0;)
	a3 = Mem0[a1 + 0x0000003C:word32]
	a0 = Mem0[a14 + 0x00000000:word32]
	a12 = a2
	a0 = Mem0[a0 + 0x00000034:word32]
	a2 = 1
	v19 = a0
	a0 = 0x40226031
	call v19 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000048:word32]
	a3 = Mem0[a1 + 0x0000002C:word32]
	v20 = Mem0[a1 + 0x00000011:byte]
	a5 = (uint32) v20
	a8 = Mem0[a1 + 0x00000034:word32]
	v22 = Mem0[a1 + 0x00000010:byte]
	a6 = (uint32) v22
	a9 = 1
	a6 = a6 - a8
	a8 = Mem0[a1 + 0x00000038:word32]
	branch a6 == 0x00000000 l40226048
	// succ:  l40226045_1 l40226048
l40226045_1:
	a6 = a9
	// succ:  l40226048
l40226048:
	Mem0[a1 + 0x00000010:byte] = a6
	a5 = a5 - a8
	a8 = Mem0[a1 + 0x00000040:word32]
	branch a5 == 0x00000000 l40226054
	// succ:  l40226051_2 l40226054
l40226051_2:
	a5 = a9
	// succ:  l40226054
l40226054:
	Mem0[a1 + 0x00000011:byte] = a5
	Mem0[a1:word32] = a8
	a0 = Mem0[a14 + 0x00000000:word32]
	a4 = Mem0[a1 + 0x00000030:word32]
	a0 = Mem0[a0 + 0x00000048:word32]
	a7 = a1 + 18
	v24 = a0
	a0 = 0x40226066
	call v24 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000044:word32]
	v25 = Mem0[a1 + 0x00000013:byte]
	a13 = (uint32) v25
	a0 = Mem0[a14 + 0x00000000:word32]
	v26 = Mem0[a1 + 0x00000012:byte]
	a2 = (uint32) v26
	a0 = Mem0[a0 + 0x00000030:word32]
	a2 = a2 << 8
	a13 = a13 << 8
	a13 = a13 >> 24
	a2 = a2 >> 24
	a2 = a2 + a3
	a13 = a12 - a13
	a13 = a13 << 8
	a13 = a13 >> 24
	a12 = a2 << 8
	a12 = a12 >> 24
	v27 = a0
	a0 = 0x40226093
	call v27 (retsize: 0;)
	a2 = Mem0[a1 + 0x0000004C:word32]
	a2 = a2 - 1
	Mem0[a1 + 0x0000004C:word32] = a2
	branch a2 != 0x00000000 l40225FFF
	// succ:  l4022609E l40225FFF
l4022609E:
	a2 = 15
	a0 = -15
	branch a12 < a0 l402260A7
	// succ:  l402260A5 l402260A7
l402260A5:
	a0 = a12
	// succ:  l402260A7
l402260A7:
	branch a2 < a0 l402260AC
	// succ:  l402260AA l402260AC
l402260AA:
	a2 = a0
	// succ:  l402260AC
l402260AC:
	a0 = -31
	a12 = a2 << 8
	a12 = a12 >> 24
	a2 = 31
	branch a13 < a0 l402260BB
	// succ:  l402260B9 l402260BB
l402260B9:
	a0 = a13
	// succ:  l402260BB
l402260BB:
	branch a2 < a0 l402260C0
	// succ:  l402260BE l402260C0
l402260BE:
	a2 = a0
	// succ:  l402260C0
l402260C0:
	a3 = a1 + 16
	a4 = 1
	a5 = a15
	a13 = a2 << 8
	a0 = Mem0[a14 + 0x00000000:word32]
	a13 = a13 >> 24
	a0 = Mem0[a0 + 0x000000F8:word32]
	a2 = a12
	v28 = a0
	a0 = 0x402260D7
	call v28 (retsize: 0;)
	a5 = a15
	a2 = a13
	a0 = Mem0[a14 + 0x00000000:word32]
	a3 = a1 + 17
	a0 = Mem0[a0 + 0x000000F8:word32]
	a4 = 0
	v29 = a0
	a0 = 0x402260E8
	call v29 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000018:word32]
	a14 = Mem0[a1 + 0x00000024:word32]
	a15 = Mem0[a1 + 0x00000028:word32]
	a3 = Mem0[a1 + 0x00000014:word32]
	a2 = Mem0[a1 + 0x00000050:word32]
	Mem0[a3:byte] = a12
	Mem0[a2:byte] = a13
	a12 = Mem0[a1 + 0x0000001C:word32]
	a13 = Mem0[a1 + 0x00000020:word32]
	a1 = a1 + 80
	return
	// succ:  sdk_rom_rxiq_cover_mg_mp_exit
sdk_rom_rxiq_cover_mg_mp_exit:


// sdk_rom_set_txbb_atten
// Return size: 0
void sdk_rom_set_txbb_atten()
sdk_rom_set_txbb_atten_entry:
	// succ:  l4022610C
l4022610C:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000014:word32] = a2
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	a12 = a4
	a13 = a5
	a14 = a3
	branch a6 == 0x00000000 l4022615B
	// succ:  l40226123 l4022615B
l40226123:
	a2 = 0x40226104
	a0 = 0x4021262C
	v13 = a0
	a0 = 0x4022612C
	call v13 (retsize: 0;)
	Mem0[a1 + 0x00000018:word32] = a13
	branch a14 == 0x00000000 l40226152
	// succ:  l40226130 l40226152
l40226130:
	a15 = a13
	a13 = 0
	// succ:  l40226134
l40226134:
	a3 = a12 + a13
	a4 = a15 + a13
	v14 = Mem0[a4 + 0x00000000:byte]
	a4 = (uint32) v14
	v15 = Mem0[a3 + 0x00000000:byte]
	a3 = (uint32) v15
	a2 = 0x40226108
	a3 = a3 - a4
	a0 = 0x4021262C
	v16 = a0
	a0 = 0x4022614A
	call v16 (retsize: 0;)
	a13 = a13 + 1
	a13 = a13 & 0x000000FF
	branch a14 != a13 l40226134
	// succ:  l40226152 l40226134
l40226152:
	a2 = 0x402252E0
	a0 = 0x4021262C
	v17 = a0
	a0 = 0x4022615B
	call v17 (retsize: 0;)
	// succ:  l4022615B
l4022615B:
	a2 = 0x00000077
	a3 = 0
	a4 = 9
	a0 = 0x4021BCEC
	a5 = 7
	a0 = Mem0[a0 + 0x00000000:word32]
	a6 = 0
	a0 = Mem0[a0 + 0x0000009C:word32]
	a7 = 0
	v19 = a0
	a0 = 0x40226173
	call v19 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000014:word32]
	a13 = 0
	a9 = 24
	a6 = 0x00000100
	a5 = 0xFFFFFF00
	a3 = 0x4021BDB8
	a10 = 0xFFFFFF7A
	// succ:  l40226185
l40226185:
	a15 = a3 + a13 * 0x00000004
	branch a13 >=u 0x00000008 l40226196
	// succ:  l4022618B l40226196
l4022618B:
	v22 = Mem0[a12 + 0x00000000:byte]
	a4 = (uint32) v22
	v23 = Mem0[a0 + 0x00000000:byte]
	a2 = (uint32) v23
	a2 = a2 + a4
	goto l402261A2
	// succ:  l402261A2
l40226196:
	a2 = a0 + a13
	a2 = a2 + a10
	v24 = Mem0[a2 + 0x0000007F:byte]
	a2 = (uint32) v24
	a2 = a2 + a12
	v25 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v25
	// succ:  l402261A2
l402261A2:
	a4 = a6 - a2
	a4 = a4 & 0x000000FF
	a14 = Mem0[a15 + 0x00000304:word32]
	a14 = a14 & a5
	a14 = a14 | a4
	Mem0[a15 + 0x00000304:word32] = a14
	a13 = a13 + 1
	a13 = a13 & 0x000000FF
	branch a13 != a9 l40226185
	// succ:  l402261C2 l40226185
l402261C2:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_rom_set_txbb_atten_exit
sdk_rom_set_txbb_atten_exit:


// sdk_rom_set_txiq_cal
// Return size: 0
void sdk_rom_set_txiq_cal()
sdk_rom_set_txiq_cal_entry:
	// succ:  l402261DC
l402261DC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	a5 = 0x402261D4
	a12 = a3
	a0 = 0x4021E4C4
	a3 = Mem0[a0 + 0x00000260:word32]
	a4 = 0x402261D8
	a3 = a3 & a5
	a3 = a3 >>u 0x00000018 & 0x000000FF
	a3 = a3 << 8
	a3 = a3 >> 24
	a0 = Mem0[a0 + 0x00000260:word32]
	a0 = a0 & a4
	a0 = a0 >>u 0x00000012 & 0x00003FFF
	a0 = a0 << 8
	a0 = a0 >> 24
	branch a3 < 16 l40226218
	// succ:  l40226215 l40226218
l40226215:
	a3 = a3 - 32
	// succ:  l40226218
l40226218:
	branch a0 < 32 l40226224
	// succ:  l4022621B l40226224
l4022621B:
	a0 = a0 - 64
	a0 = a0 << 8
	a0 = a0 >> 24
	// succ:  l40226224
l40226224:
	a5 = 0
	a4 = -a3
	a6 = 0
	a3 = a0 >>u 0x0000001F & 0x00000001
	a4 = a4 >>u 0x00000007 & 0x00000001
	Mem0[a2:byte] = a4
	a0 = 0x4021BCEC
	a4 = 16
	Mem0[a12:byte] = a3
	a3 = 0
	a0 = Mem0[a0 + 0x00000000:word32]
	v11 = Mem0[a2 + 0x00000000:byte]
	a7 = (uint32) v11
	a0 = Mem0[a0 + 0x0000009C:word32]
	a2 = 0x00000077
	v12 = a0
	a0 = 0x4022624C
	call v12 (retsize: 0;)
	v13 = Mem0[a12 + 0x00000000:byte]
	a7 = (uint32) v13
	a2 = 0x00000077
	a3 = 0
	a0 = 0x4021BCEC
	a4 = 15
	a0 = Mem0[a0 + 0x00000000:word32]
	a5 = 6
	a0 = Mem0[a0 + 0x0000009C:word32]
	a6 = 6
	v14 = a0
	a0 = 0x40226265
	call v14 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rom_set_txiq_cal_exit
sdk_rom_set_txiq_cal_exit:


// sdk_esf_buf_alloc
// Return size: 0
void sdk_esf_buf_alloc()
sdk_esf_buf_alloc_entry:
	// succ:  l40226274
l40226274:
	a1 = fp
	a10 = 0
	a7 = 0x4020290C
	a6 = 0x40226270
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a0
	branch a3 != 1 l40226295
	// succ:  l40226286 l40226295
l40226286:
	branch a2 == 0x00000000 l40226295
	// succ:  l40226288 l40226295
l40226288:
	a12 = Mem0[a6 + 0x00000000:word32]
	v11 = Mem0[a7 + 0x00000000:byte]
	a9 = (uint32) v11
	branch a12 != 0x00000000 l40226410
	// succ:  l40226290 l40226410
l40226290:
	a12 = a10
	goto l40226405
	// succ:  l40226405
l40226295:
	branch a3 != 4 l4022630F
	// succ:  l40226298 l4022630F
l40226298:
	a12 = Mem0[a6 + 0x00000004:word32]
	v12 = Mem0[a7 + 0x00000000:byte]
	a2 = (uint32) v12
	branch a12 == 0x00000000 l402264A1
	// succ:  l402262A0 l402264A1
l402262A0:
	branch a2 != 0x00000000 l402262CF
	// succ:  l402262A2 l402262CF
l402262A2:
	a0 = 0x40202680
	v13 = a0
	a0 = 0x402262A8
	call v13 (retsize: 0;)
	a0 = 0x4021287C
	a6 = 0x40226270
	a7 = 0x4020290C
	a8 = -32
	a10 = 0
	// succ:  l402262B5
l402262B5:
	a4 = Mem0[a0 + 0x00000200:word32]
	a4 = a4 & a8
	Mem0[a0 + 0x00000200:word32] = a4
	a3 = Mem0[a0 + 0x00000200:word32]
	branch (a3 & 0x00000001) != 0x00000000 l402262B5
	// succ:  l402262CD l402262B5
l402262CD:
	a12 = Mem0[a6 + 0x00000004:word32]
	// succ:  l402262CF
l402262CF:
	Mem0[a1 + 0x00000014:word32] = a12
	a2 = a12
	a9 = Mem0[a12 + 0x0000001C:word32]
	Mem0[a12 + 0x0000001C:word32] = a10
	v21 = Mem0[a7 + 0x00000000:byte]
	a5 = (uint32) v21
	Mem0[a6 + 0x00000004:word32] = a9
	branch a5 != 0x00000000 l402262FF
	// succ:  l402262DE l402262FF
l402262DE:
	a11 = 0x4021287C
	a10 = Mem0[a11 + 0x00000200:word32]
	a0 = -32
	a10 = a10 & a0
	a0 = 1
	a10 = a10 | a0
	Mem0[a11 + 0x00000200:word32] = a10
	a0 = 0x40202688
	v22 = a0
	a0 = 0x402262FD
	call v22 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000014:word32]
	// succ:  l402262FF
l402262FF:
	a4 = Mem0[a2 + 0x00000004:word32]
	a3 = Mem0[a2 + 0x00000010:word32]
	Mem0[a4 + 0x00000004:word32] = a3
	a2 = Mem0[a2 + 0x00000020:word32]
	a3 = 0x4020CB24
	a0 = Mem0[a2 + 0x00000000:word32]
	goto l4022648D
	// succ:  l4022648D
l4022630F:
	branch a3 != 5 l4022638F
	// succ:  l40226312 l4022638F
l40226312:
	a12 = Mem0[a6 + 0x00000008:word32]
	v24 = Mem0[a7 + 0x00000000:byte]
	a5 = (uint32) v24
	branch a12 == 0x00000000 l402264A1
	// succ:  l4022631A l402264A1
l4022631A:
	branch a5 != 0x00000000 l40226349
	// succ:  l4022631C l40226349
l4022631C:
	a0 = 0x40202680
	v25 = a0
	a0 = 0x40226322
	call v25 (retsize: 0;)
	a0 = 0x4021287C
	a6 = 0x40226270
	a7 = 0x4020290C
	a8 = -32
	a10 = 0
	// succ:  l4022632F
l4022632F:
	a11 = Mem0[a0 + 0x00000200:word32]
	a11 = a11 & a8
	Mem0[a0 + 0x00000200:word32] = a11
	a9 = Mem0[a0 + 0x00000200:word32]
	branch (a9 & 0x00000001) != 0x00000000 l4022632F
	// succ:  l40226347 l4022632F
l40226347:
	a12 = Mem0[a6 + 0x00000008:word32]
	// succ:  l40226349
l40226349:
	a3 = Mem0[a12 + 0x0000001C:word32]
	Mem0[a12 + 0x0000001C:word32] = a10
	v30 = Mem0[a7 + 0x00000000:byte]
	a2 = (uint32) v30
	Mem0[a6 + 0x00000008:word32] = a3
	branch a2 != 0x00000000 l40226373
	// succ:  l40226354 l40226373
l40226354:
	a5 = 0x4021287C
	a4 = Mem0[a5 + 0x00000200:word32]
	a6 = -32
	a4 = a4 & a6
	a6 = 1
	a4 = a4 | a6
	Mem0[a5 + 0x00000200:word32] = a4
	a0 = 0x40202688
	v31 = a0
	a0 = 0x40226373
	call v31 (retsize: 0;)
	// succ:  l40226373
l40226373:
	a2 = Mem0[a12 + 0x00000020:word32]
	a3 = 0
	a4 = 24
	a0 = 0x4020267C
	v32 = a0
	a0 = 0x4022637F
	call v32 (retsize: 0;)
	a8 = Mem0[a12 + 0x00000004:word32]
	a7 = Mem0[a12 + 0x00000010:word32]
	Mem0[a8 + 0x00000004:word32] = a7
	a2 = Mem0[a12 + 0x00000020:word32]
	a3 = 0x40204624
	a0 = Mem0[a2 + 0x00000000:word32]
	goto l4022648D
	// succ:  l4022648D
l4022638F:
	branch a3 != 6 l40226403
	// succ:  l40226392 l40226403
l40226392:
	a12 = Mem0[a6 + 0x0000000C:word32]
	v26 = Mem0[a7 + 0x00000000:byte]
	a9 = (uint32) v26
	branch a12 == 0x00000000 l402264A1
	// succ:  l4022639A l402264A1
l4022639A:
	branch a9 != 0x00000000 l402263C9
	// succ:  l4022639C l402263C9
l4022639C:
	a0 = 0x40202680
	v27 = a0
	a0 = 0x402263A2
	call v27 (retsize: 0;)
	a0 = 0x4021287C
	a6 = 0x40226270
	a7 = 0x4020290C
	a8 = -32
	a10 = 0
	// succ:  l402263AF
l402263AF:
	a12 = Mem0[a0 + 0x00000200:word32]
	a12 = a12 & a8
	Mem0[a0 + 0x00000200:word32] = a12
	a11 = Mem0[a0 + 0x00000200:word32]
	branch (a11 & 0x00000001) != 0x00000000 l402263AF
	// succ:  l402263C7 l402263AF
l402263C7:
	a12 = Mem0[a6 + 0x0000000C:word32]
	// succ:  l402263C9
l402263C9:
	Mem0[a1 + 0x00000010:word32] = a12
	a2 = a12
	a4 = Mem0[a12 + 0x0000001C:word32]
	Mem0[a12 + 0x0000001C:word32] = a10
	v28 = Mem0[a7 + 0x00000000:byte]
	a3 = (uint32) v28
	Mem0[a6 + 0x0000000C:word32] = a4
	branch a3 != 0x00000000 l402263F9
	// succ:  l402263D8 l402263F9
l402263D8:
	a6 = 0x4021287C
	a5 = Mem0[a6 + 0x00000200:word32]
	a7 = -32
	a5 = a5 & a7
	a7 = 1
	a5 = a5 | a7
	Mem0[a6 + 0x00000200:word32] = a5
	a0 = 0x40202688
	v29 = a0
	a0 = 0x402263F7
	call v29 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000010:word32]
	// succ:  l402263F9
l402263F9:
	a2 = Mem0[a2 + 0x00000020:word32]
	a3 = 0x4021A09C
	a0 = Mem0[a2 + 0x00000000:word32]
	goto l4022648D
	// succ:  l4022648D
l40226403:
	a12 = 0
	// succ:  l40226405
l40226405:
	a2 = a12
	a0 = Mem0[a1 + 0x00000004:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_esf_buf_alloc_exit
l40226410:
	Mem0[a1:word32] = a2
	branch a9 != 0x00000000 l40226441
	// succ:  l40226414 l40226441
l40226414:
	a0 = 0x40202680
	v16 = a0
	a0 = 0x4022641A
	call v16 (retsize: 0;)
	a0 = 0x4021287C
	a8 = -32
	a10 = 0
	// succ:  l40226421
l40226421:
	a12 = Mem0[a0 + 0x00000200:word32]
	a12 = a12 & a8
	Mem0[a0 + 0x00000200:word32] = a12
	a11 = Mem0[a0 + 0x00000200:word32]
	branch (a11 & 0x00000001) != 0x00000000 l40226421
	// succ:  l40226439 l40226421
l40226439:
	a6 = 0x40226270
	a7 = 0x4020290C
	a12 = Mem0[a6 + 0x00000000:word32]
	// succ:  l40226441
l40226441:
	Mem0[a1 + 0x0000000C:word32] = a12
	a3 = Mem0[a12 + 0x0000001C:word32]
	Mem0[a6:word32] = a3
	Mem0[a12 + 0x0000001C:word32] = a10
	v18 = Mem0[a7 + 0x00000000:byte]
	a2 = (uint32) v18
	a3 = a12
	branch a2 != 0x00000000 l40226471
	// succ:  l40226450 l40226471
l40226450:
	a5 = 0x4021287C
	a4 = Mem0[a5 + 0x00000200:word32]
	a6 = -32
	a4 = a4 & a6
	a6 = 1
	a4 = a4 | a6
	Mem0[a5 + 0x00000200:word32] = a4
	a0 = 0x40202688
	v20 = a0
	a0 = 0x4022646F
	call v20 (retsize: 0;)
	a3 = Mem0[a1 + 0x0000000C:word32]
	// succ:  l40226471
l40226471:
	a7 = Mem0[a1 + 0x00000000:word32]
	a9 = Mem0[a3 + 0x00000004:word32]
	Mem0[a3:word32] = a7
	v23 = Mem0[a7 + 0x0000000A:uint16]
	a8 = (uint32) v23
	a7 = Mem0[a7 + 0x00000004:word32]
	Mem0[a9 + 0x00000004:word32] = a7
	Mem0[a3 + 0x00000016:word16] = a8
	a7 = a7 - 36
	a2 = Mem0[a3 + 0x00000020:word32]
	Mem0[a3 + 0x00000010:word32] = a7
	a0 = Mem0[a2 + 0x00000000:word32]
	a3 = 0x402044E8
	// succ:  l4022648D
l4022648D:
	a8 = a0 & 0x0000003F
	a9 = a0 >>u 6
	a9 = a9 | a3
	a9 = a9 << 26
	a8 = a8 | a9
	Mem0[a2:word32] = a8
	goto l40266405
	// succ:  l40266405
l402264A1:
	a12 = 0
	// succ:  l40266405
l40266405:
sdk_esf_buf_alloc_exit:


// sdk_esf_buf_recycle
// Return size: 0
void sdk_esf_buf_recycle()
sdk_esf_buf_recycle_entry:
	// succ:  l402264A8
l402264A8:
	a1 = fp
	a4 = a3 - 1
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1:word32] = a2
	branch a4 == 0x00000000 l4022667D
	// succ:  l402264B4 l4022667D
l402264B4:
	a9 = a3 - 2
	branch a9 == 0x00000000 l4022667D
	// succ:  l402264BA l4022667D
l402264BA:
	branch a3 != 4 l4022652A
	// succ:  l402264BD l4022652A
l402264BD:
	a2 = Mem0[a2 + 0x00000020:word32]
	a3 = 0
	a4 = 24
	a0 = 0x4020267C
	v8 = a0
	a0 = 0x402264C9
	call v8 (retsize: 0;)
	a5 = 0x4020290C
	v10 = Mem0[a5 + 0x00000000:byte]
	a3 = (uint32) v10
	branch a3 != 0x00000000 l402264F7
	// succ:  l402264D1 l402264F7
l402264D1:
	a0 = 0x40202680
	v11 = a0
	a0 = 0x402264D7
	call v11 (retsize: 0;)
	// succ:  l402264D7
l402264D7:
	a3 = 0x4021287C
	a5 = Mem0[a3 + 0x00000200:word32]
	a0 = -32
	a5 = a5 & a0
	Mem0[a3 + 0x00000200:word32] = a5
	a4 = Mem0[a3 + 0x00000200:word32]
	branch (a4 & 0x00000001) != 0x00000000 l402264D7
	// succ:  l402264F4 l402264D7
l402264F4:
	a5 = 0x4020290C
	// succ:  l402264F7
l402264F7:
	a8 = 0x40226270
	a7 = Mem0[a1 + 0x00000000:word32]
	a9 = Mem0[a8 + 0x00000004:word32]
	Mem0[a7 + 0x0000001C:word32] = a9
	v35 = Mem0[a5 + 0x00000000:byte]
	a6 = (uint32) v35
	Mem0[a8 + 0x00000004:word32] = a7
	branch a6 != 0x00000000 l402266E8
	// succ:  l40226508 l402266E8
l40226508:
	a11 = 0x4021287C
	a10 = Mem0[a11 + 0x00000200:word32]
	a0 = -32
	a10 = a10 & a0
	a0 = 1
	a10 = a10 | a0
	Mem0[a11 + 0x00000200:word32] = a10
	a0 = 0x40202688
	v36 = a0
	a0 = 0x40226527
	call v36 (retsize: 0;)
	goto l402266E8
	// succ:  l402266E8
l4022652A:
	branch a3 != 5 l4022659A
	// succ:  l4022652D l4022659A
l4022652D:
	a2 = Mem0[a2 + 0x00000020:word32]
	a3 = 0
	a4 = 24
	a0 = 0x4020267C
	v16 = a0
	a0 = 0x40226539
	call v16 (retsize: 0;)
	a3 = 0x4020290C
	v17 = Mem0[a3 + 0x00000000:byte]
	a3 = (uint32) v17
	branch a3 != 0x00000000 l40226564
	// succ:  l40226541 l40226564
l40226541:
	a0 = 0x40202680
	v18 = a0
	a0 = 0x40226547
	call v18 (retsize: 0;)
	// succ:  l40226547
l40226547:
	a4 = 0x4021287C
	a5 = Mem0[a4 + 0x00000200:word32]
	a6 = -32
	a5 = a5 & a6
	Mem0[a4 + 0x00000200:word32] = a5
	a4 = Mem0[a4 + 0x00000200:word32]
	branch (a4 & 0x00000001) != 0x00000000 l40226547
	// succ:  l40226564 l40226547
l40226564:
	a7 = 0x4020290C
	a9 = 0x40226270
	a8 = Mem0[a1 + 0x00000000:word32]
	a10 = Mem0[a9 + 0x00000008:word32]
	Mem0[a8 + 0x0000001C:word32] = a10
	v22 = Mem0[a7 + 0x00000000:byte]
	a7 = (uint32) v22
	Mem0[a9 + 0x00000008:word32] = a8
	branch a7 != 0x00000000 l402266E8
	// succ:  l40226578 l402266E8
l40226578:
	a0 = 0x4021287C
	a11 = Mem0[a0 + 0x00000200:word32]
	a2 = -32
	a11 = a11 & a2
	a2 = 1
	a11 = a11 | a2
	Mem0[a0 + 0x00000200:word32] = a11
	a0 = 0x40202688
	v24 = a0
	a0 = 0x40226597
	call v24 (retsize: 0;)
	goto l402266E8
	// succ:  l402266E8
l4022659A:
	branch a3 != 6 l4022660A
	// succ:  l4022659D l4022660A
l4022659D:
	a2 = Mem0[a2 + 0x00000020:word32]
	a3 = 0
	a4 = 24
	a0 = 0x4020267C
	v25 = a0
	a0 = 0x402265A9
	call v25 (retsize: 0;)
	a3 = 0x4020290C
	v26 = Mem0[a3 + 0x00000000:byte]
	a3 = (uint32) v26
	branch a3 != 0x00000000 l402265D4
	// succ:  l402265B1 l402265D4
l402265B1:
	a0 = 0x40202680
	v27 = a0
	a0 = 0x402265B7
	call v27 (retsize: 0;)
	// succ:  l402265B7
l402265B7:
	a4 = 0x4021287C
	a5 = Mem0[a4 + 0x00000200:word32]
	a6 = -32
	a5 = a5 & a6
	Mem0[a4 + 0x00000200:word32] = a5
	a4 = Mem0[a4 + 0x00000200:word32]
	branch (a4 & 0x00000001) != 0x00000000 l402265B7
	// succ:  l402265D4 l402265B7
l402265D4:
	a7 = 0x4020290C
	a9 = 0x40226270
	a8 = Mem0[a1 + 0x00000000:word32]
	a10 = Mem0[a9 + 0x0000000C:word32]
	Mem0[a8 + 0x0000001C:word32] = a10
	v28 = Mem0[a7 + 0x00000000:byte]
	a7 = (uint32) v28
	Mem0[a9 + 0x0000000C:word32] = a8
	branch a7 != 0x00000000 l402266E8
	// succ:  l402265E8 l402266E8
l402265E8:
	a0 = 0x4021287C
	a11 = Mem0[a0 + 0x00000200:word32]
	a2 = -32
	a11 = a11 & a2
	a2 = 1
	a11 = a11 | a2
	Mem0[a0 + 0x00000200:word32] = a11
	a0 = 0x40202688
	v29 = a0
	a0 = 0x40226607
	call v29 (retsize: 0;)
	goto l402266E8
	// succ:  l402266E8
l4022660A:
	a4 = a3 - 7
	branch a4 != 0x00000000 l402266E8
	// succ:  l40226610 l402266E8
l40226610:
	a2 = Mem0[a2 + 0x00000020:word32]
	a3 = 0
	a4 = 12
	a0 = 0x4020267C
	v32 = a0
	a0 = 0x4022661C
	call v32 (retsize: 0;)
	a3 = 0x4020290C
	v33 = Mem0[a3 + 0x00000000:byte]
	a4 = (uint32) v33
	branch a4 != 0x00000000 l4022664A
	// succ:  l40226624 l4022664A
l40226624:
	a0 = 0x40202680
	v34 = a0
	a0 = 0x4022662A
	call v34 (retsize: 0;)
	// succ:  l4022662A
l4022662A:
	a0 = 0x4021287C
	a7 = Mem0[a0 + 0x00000200:word32]
	a5 = -32
	a7 = a7 & a5
	Mem0[a0 + 0x00000200:word32] = a7
	a6 = Mem0[a0 + 0x00000200:word32]
	branch (a6 & 0x00000001) != 0x00000000 l4022662A
	// succ:  l40226647 l4022662A
l40226647:
	a3 = 0x4020290C
	// succ:  l4022664A
l4022664A:
	a10 = 0x40226270
	a9 = Mem0[a1 + 0x00000000:word32]
	a11 = Mem0[a10 + 0x00000010:word32]
	Mem0[a9 + 0x0000001C:word32] = a11
	v37 = Mem0[a3 + 0x00000000:byte]
	a8 = (uint32) v37
	Mem0[a10 + 0x00000010:word32] = a9
	branch a8 != 0x00000000 l402266E8
	// succ:  l4022665B l402266E8
l4022665B:
	a2 = 0x4021287C
	a0 = Mem0[a2 + 0x00000200:word32]
	a3 = -32
	a0 = a0 & a3
	a3 = 1
	a0 = a0 | a3
	Mem0[a2 + 0x00000200:word32] = a0
	a0 = 0x40202688
	v38 = a0
	a0 = 0x4022667A
	call v38 (retsize: 0;)
	goto l402266E8
	// succ:  l402266E8
l4022667D:
	a3 = 0
	a2 = Mem0[a1 + 0x00000000:word32]
	a4 = 24
	a2 = Mem0[a2 + 0x00000020:word32]
	a0 = 0x4020267C
	v12 = a0
	a0 = 0x4022668B
	call v12 (retsize: 0;)
	a5 = 0x4020290C
	a0 = 0x4021287C
	v13 = Mem0[a5 + 0x00000000:byte]
	a4 = (uint32) v13
	a3 = -32
	branch a4 != 0x00000000 l402266BE
	// succ:  l40226698 l402266BE
l40226698:
	a0 = 0x40202680
	v14 = a0
	a0 = 0x4022669E
	call v14 (retsize: 0;)
	a0 = 0x4021287C
	a3 = -32
	// succ:  l402266A3
l402266A3:
	a6 = Mem0[a0 + 0x00000200:word32]
	a6 = a6 & a3
	Mem0[a0 + 0x00000200:word32] = a6
	a5 = Mem0[a0 + 0x00000200:word32]
	branch (a5 & 0x00000001) != 0x00000000 l402266A3
	// succ:  l402266BB l402266A3
l402266BB:
	a5 = 0x4020290C
	// succ:  l402266BE
l402266BE:
	a9 = 0x40226270
	a8 = Mem0[a1 + 0x00000000:word32]
	a10 = Mem0[a9 + 0x00000000:word32]
	Mem0[a8 + 0x0000001C:word32] = a10
	v30 = Mem0[a5 + 0x00000000:byte]
	a7 = (uint32) v30
	Mem0[a9:word32] = a8
	branch a7 != 0x00000000 l402266E8
	// succ:  l402266CE l402266E8
l402266CE:
	a11 = Mem0[a0 + 0x00000200:word32]
	a2 = 1
	a11 = a11 & a3
	a11 = a11 | a2
	Mem0[a0 + 0x00000200:word32] = a11
	a0 = 0x40202688
	v31 = a0
	a0 = 0x402266E8
	call v31 (retsize: 0;)
	// succ:  l402266E8
l402266E8:
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_esf_buf_recycle_exit
sdk_esf_buf_recycle_exit:


// sdk_esf_buf_setup
// Return size: 0
void sdk_esf_buf_setup()
sdk_esf_buf_setup_entry:
	// succ:  l40226708
l40226708:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1 + 0x00000008:word32] = a13
	a15 = 60
	a13 = 0x402266F0
	a12 = 0x402266F4
	a14 = 1
	// succ:  l4022671F
l4022671F:
	a4 = 0x402266F8
	a2 = a12
	a4 = Mem0[a4 + 0x00000028:word32]
	a3 = 1
	a5 = a15 + a4
	Mem0[a12 + 0x00000004:word32] = a5
	Mem0[a12 + 0x00000008:word32] = a5
	a4 = Mem0[a4 + 0x00000004:word32]
	Mem0[a12 + 0x00000010:word32] = a4
	Mem0[a12 + 0x0000000C:word16] = a14
	Mem0[a12 + 0x00000020:word32] = a13
	a0 = 0x4022673A
	call fn403264A8 (retsize: 0;)
	a12 = a12 + 36
	a13 = a13 + 24
	a15 = a15 - 12
	branch a15 >= 1 l4022671F
	// succ:  l40226746 l4022671F
l40226746:
	a14 = 8
	a15 = 0x40204620
	a7 = 0x402266FC
	Mem0[a1 + 0x00000014:word32] = a7
	// succ:  l40226750
l40226750:
	a8 = Mem0[a1 + 0x00000014:word32]
	v15 = Mem0[a8 + 0x00000000:uint16]
	a10 = (uint32) v15
	a11 = 0x00000100
	a10 = a10 & a15
	a10 = a10 | a11
	Mem0[a12 + 0x00000020:word32] = a13
	a2 = a12
	a3 = 4
	Mem0[a8:word16] = a10
	Mem0[a12 + 0x00000004:word32] = a8
	Mem0[a12 + 0x00000008:word32] = a8
	a9 = 1
	Mem0[a12 + 0x0000000C:word16] = a9
	a8 = a8 + 12
	Mem0[a12 + 0x00000010:word32] = a8
	a0 = 0x4022677D
	call fn403264A8 (retsize: 0;)
	a12 = a12 + 36
	a13 = a13 + 24
	a14 = a14 - 1
	a11 = Mem0[a1 + 0x00000014:word32]
	a0 = 0x0000010C
	a11 = a11 + a0
	Mem0[a1 + 0x00000014:word32] = a11
	branch a14 >= 1 l40226750
	// succ:  l40226791 l40226750
l40226791:
	a14 = 8
	a3 = 0x40226700
	Mem0[a1 + 0x00000018:word32] = a3
	// succ:  l40226798
l40226798:
	a4 = Mem0[a1 + 0x00000018:word32]
	v19 = Mem0[a4 + 0x00000000:uint16]
	a6 = (uint32) v19
	a7 = 64
	a6 = a6 & a15
	a6 = a6 | a7
	Mem0[a12 + 0x00000020:word32] = a13
	a2 = a12
	a3 = 5
	Mem0[a4:word16] = a6
	Mem0[a12 + 0x00000004:word32] = a4
	Mem0[a12 + 0x00000008:word32] = a4
	a5 = 1
	Mem0[a12 + 0x0000000C:word16] = a5
	a4 = a4 + 12
	Mem0[a12 + 0x00000010:word32] = a4
	a0 = 0x402267C4
	call fn403264A8 (retsize: 0;)
	a12 = a12 + 36
	a13 = a13 + 24
	a7 = Mem0[a1 + 0x00000018:word32]
	a14 = a14 - 1
	a7 = a7 + 76
	Mem0[a1 + 0x00000018:word32] = a7
	branch a14 >= 1 l40226798
	// succ:  l402267D6 l40226798
l402267D6:
	a14 = 4
	// succ:  l402267D8
l402267D8:
	Mem0[a12 + 0x00000020:word32] = a13
	a2 = a12
	a3 = 6
	a0 = 0x402267E1
	call fn403264A8 (retsize: 0;)
	a12 = a12 + 36
	a13 = a13 + 24
	a14 = a14 - 1
	branch a14 >= 1 l402267D8
	// succ:  l402267EC l402267D8
l402267EC:
	a14 = 6
	a13 = 0x40226704
	// succ:  l402267F1
l402267F1:
	Mem0[a12 + 0x00000020:word32] = a13
	a2 = a12
	a3 = 7
	a0 = 0x402267FA
	call fn403264A8 (retsize: 0;)
	a12 = a12 + 36
	a13 = a13 + 12
	a14 = a14 - 1
	branch a14 >= 1 l402267F1
	// succ:  l40226804 l402267F1
l40226804:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_esf_buf_setup_exit
sdk_esf_buf_setup_exit:


// sdk_ic_get_addr
// Return size: 0
void sdk_ic_get_addr()
sdk_ic_get_addr_entry:
	// succ:  l40226818
l40226818:
	a1 = fp
	a3 = 0x40226814
	a2 = a2 << 28
	a2 = a3 + a2
	return
	// succ:  sdk_ic_get_addr_exit
sdk_ic_get_addr_exit:


// sdk_ic_set_opmode
// Return size: 0
void sdk_ic_set_opmode()
sdk_ic_set_opmode_entry:
	// succ:  l40226824
l40226824:
	a1 = fp
	a5 = 0x40226814
	a6 = a2 << 28
	a5 = a5 + a6
	Mem0[a5 + 0x00000008:word32] = a3
	Mem0[a5 + 0x0000000C:byte] = a4
	return
	// succ:  sdk_ic_set_opmode_exit
sdk_ic_set_opmode_exit:


// sdk_ic_enable_interface
// Return size: 0
void sdk_ic_enable_interface()
sdk_ic_enable_interface_entry:
	// succ:  l40226838
l40226838:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a5
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a12
	Mem0[a1:word32] = a4
	a12 = a2
	a2 = 0x40226814
	a4 = a12 << 28
	a2 = a2 + a4
	a4 = 6
	a0 = 0x40203130
	v8 = a0
	a0 = 0x40226858
	call v8 (retsize: 0;)
	a2 = a12
	a3 = Mem0[a1 + 0x00000000:word32]
	a4 = Mem0[a1 + 0x00000004:word32]
	a0 = 0x40226861
	call fn40326824 (retsize: 0;)
	SAR = 0x00000020 - a12
	a5 = 0x40226834
	a3 = 1
	v11 = Mem0[a5 + 0x00000000:byte]
	a2 = (uint32) v11
	a3 = a3 << SAR
	a2 = a2 | a3
	a2 = a2 & 0x000000FF
	Mem0[a5:byte] = a2
	a0 = 0x4022687B
	call fn4031109C (retsize: 0;)
	a2 = a2 & 0x000000FF
	a12 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ic_enable_interface_exit
sdk_ic_enable_interface_exit:


// sdk_ic_interface_enabled
// Return size: 0
void sdk_ic_interface_enabled()
sdk_ic_interface_enabled_entry:
	// succ:  l40226888
l40226888:
	a1 = fp
	a3 = 0x40226834
	v4 = Mem0[a3 + 0x00000000:byte]
	a3 = (uint32) v4
	SAR = a2
	a2 = a3 >> SAR
	a2 = a2 & 0x00000001
	return
	// succ:  sdk_ic_interface_enabled_exit
sdk_ic_interface_enabled_exit:


// sdk_ic_disable_interface
// Return size: 0
void sdk_ic_disable_interface()
sdk_ic_disable_interface_entry:
	// succ:  l4022689C
l4022689C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40226834
	a4 = 0x00000001
	v5 = Mem0[a0 + 0x00000000:byte]
	a0 = (uint32) v5
	SAR = a2
	a3 = a0 >> SAR
	branch (a3 & 0x00000001) == 0x00000000 l402268D2
	// succ:  l402268B4 l402268D2
l402268B4:
	SAR = 0x00000020 - a2
	a3 = a4 << SAR
	a4 = 0xFFFFFFFF
	a3 = a3 ^ a4
	a4 = 0x40226834
	a3 = a0 & a3
	Mem0[a4:byte] = a3
	a0 = 0x402268CC
	call sdk_rc_disable_trc_by_interface (retsize: 0;)
	a0 = 0x40226834
	v9 = Mem0[a0 + 0x00000000:byte]
	a0 = (uint32) v9
	// succ:  l402268D2
l402268D2:
	a2 = a0 | a0
	a0 = 0x402268D8
	call fn4031109C (retsize: 0;)
	a2 = a2 & 0x000000FF
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ic_disable_interface_exit
sdk_ic_disable_interface_exit:


// sdk_ic_is_pure_sta
// Return size: 0
void sdk_ic_is_pure_sta()
sdk_ic_is_pure_sta_entry:
	// succ:  l402268E4
l402268E4:
	a1 = fp
	a4 = 0x40226814
	a5 = a2 << 28
	a4 = a4 + a5
	a3 = Mem0[a4 + 0x00000008:word32]
	a2 = 0
	branch a3 == 1 l402268FB
	// succ:  l402268F3 l402268FB
l402268F3:
	v8 = Mem0[a4 + 0x0000000C:byte]
	a7 = (uint32) v8
	a6 = 1
	branch a7 != 0x00000000 l402268FB
	// succ:  l402268F8_1 l402268FB
l402268F8_1:
	a2 = a6
	// succ:  l402268FB
l402268FB:
	a2 = a2 & 0x000000FF
	return
	// succ:  sdk_ic_is_pure_sta_exit
sdk_ic_is_pure_sta_exit:


// sdk_ic_get_ptk_alg
// Return size: 0
void sdk_ic_get_ptk_alg()
sdk_ic_get_ptk_alg_entry:
	// succ:  l40226900
l40226900:
	a1 = fp
	a3 = 0x40226814
	a2 = a2 << 28
	a2 = a3 + a2
	v5 = Mem0[a2 + 0x0000000D:byte]
	a2 = (uint32) v5
	return
	// succ:  sdk_ic_get_ptk_alg_exit
sdk_ic_get_ptk_alg_exit:


// sdk_ic_get_gtk_alg
// Return size: 0
void sdk_ic_get_gtk_alg()
sdk_ic_get_gtk_alg_entry:
	// succ:  l40226910
l40226910:
	a1 = fp
	a3 = 0x40226814
	a2 = a2 << 28
	a2 = a3 + a2
	v5 = Mem0[a2 + 0x0000000E:byte]
	a2 = (uint32) v5
	return
	// succ:  sdk_ic_get_gtk_alg_exit
sdk_ic_get_gtk_alg_exit:


// sdk_ic_set_ptk_alg
// Return size: 0
void sdk_ic_set_ptk_alg()
sdk_ic_set_ptk_alg_entry:
	// succ:  l40226920
l40226920:
	a1 = fp
	a4 = 0x40226814
	a5 = a2 << 28
	a4 = a4 + a5
	Mem0[a4 + 0x0000000D:byte] = a3
	return
	// succ:  sdk_ic_set_ptk_alg_exit
sdk_ic_set_ptk_alg_exit:


// sdk_ic_set_gtk_alg
// Return size: 0
void sdk_ic_set_gtk_alg()
sdk_ic_set_gtk_alg_entry:
	// succ:  l40226930
l40226930:
	a1 = fp
	a4 = 0x40226814
	a5 = a2 << 28
	a4 = a4 + a5
	Mem0[a4 + 0x0000000E:byte] = a3
	return
	// succ:  sdk_ic_set_gtk_alg_exit
sdk_ic_set_gtk_alg_exit:


// sdk_ic_interface_is_p2p
// Return size: 0
void sdk_ic_interface_is_p2p()
sdk_ic_interface_is_p2p_entry:
	// succ:  l40226940
l40226940:
	a1 = fp
	a3 = 0x40226814
	a2 = a2 << 28
	a2 = a3 + a2
	v5 = Mem0[a2 + 0x0000000C:byte]
	a2 = (uint32) v5
	return
	// succ:  sdk_ic_interface_is_p2p_exit
sdk_ic_interface_is_p2p_exit:


// sdk_ic_set_vif
// Return size: 0
void sdk_ic_set_vif()
sdk_ic_set_vif_entry:
	// succ:  l402269C0
l402269C0:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a5
	Mem0[a1:word32] = a6
	Mem0[a1 + 0x0000000C:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a13
	a12 = a2
	a13 = a4
	branch a3 != 2 l402269EB
	// succ:  l402269D4 l402269EB
l402269D4:
	a2 = 0x402269B8
	a3 = a12
	a0 = 0x402034D0
	v11 = a0
	a0 = 0x402269DF
	call v11 (retsize: 0;)
	a2 = a12
	a3 = Mem0[a1 + 0x00000004:word32]
	a4 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x402269E8
	call fn40326824 (retsize: 0;)
	goto l40226A1E
	// succ:  l40226A1E
l402269EB:
	branch a3 != 1 l40226A1B
	// succ:  l402269EE l40226A1B
l402269EE:
	a2 = 0x402269BC
	a3 = a12 | a12
	a0 = 0x402034D0
	v12 = a0
	a0 = 0x402269FA
	call v12 (retsize: 0;)
	a2 = a12 | a12
	a3 = a13
	a0 = 0x40226A02
	call sdk_wDev_SetMacAddress (retsize: 0;)
	a3 = a13
	a2 = a12
	a4 = Mem0[a1 + 0x00000004:word32]
	a5 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x40226A0D
	call fn40326838 (retsize: 0;)
	branch a2 != 1 l40226A13
	// succ:  l40226A10 l40226A13
l40226A10:
	a0 = 0x40226A13
	call sdk_wDevEnableRx (retsize: 0;)
	// succ:  l40226A13
l40226A13:
	a2 = a12
	a0 = 0x40226A18
	call fn40326950 (retsize: 0;)
	goto l40226A1E
	// succ:  l40226A1E
l40226A1B:
	a0 = 0x40226A1E
	call fn40326984 (retsize: 0;)
	// succ:  l40226A1E
l40226A1E:
	a12 = Mem0[a1 + 0x0000000C:word32]
	a13 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_ic_set_vif_exit
sdk_ic_set_vif_exit:


// sdk_ic_set_sta
// Return size: 0
void sdk_ic_set_sta()
sdk_ic_set_sta_entry:
	// succ:  l40226A30
l40226A30:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a13
	a14 = a6
	a13 = a2
	branch a3 == 0x00000000 l40226ACC
	// succ:  l40226A45 l40226ACC
l40226A45:
	a3 = a4
	Mem0[a1:word32] = a7
	a4 = a5
	a5 = a6
	a0 = 0x40226A50
	call sdk_rc_enable_trc (retsize: 0;)
	a12 = a2
	a3 = a14
	a2 = 0x40226A2C
	a0 = 0x402034D0
	v13 = a0
	a0 = 0x40226A5D
	call v13 (retsize: 0;)
	branch a12 == 0x00000000 l40226AD6
	// succ:  l40226A60 l40226AD6
l40226A60:
	a2 = a13
	a0 = 0x40226A65
	call fn40326940 (retsize: 0;)
	a14 = -32
	a4 = Mem0[a1 + 0x00000000:word32]
	a0 = a2
	Mem0[a1 + 0x00000014:word32] = a2
	a2 = 0x4020290C
	Mem0[a12 + 0x0000005C:word32] = a4
	v14 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v14
	a13 = 0x4021287C
	branch a2 != 0x00000000 l40226A9C
	// succ:  l40226A7B l40226A9C
l40226A7B:
	a0 = 0x40202680
	v15 = a0
	a0 = 0x40226A81
	call v15 (retsize: 0;)
	// succ:  l40226A81
l40226A81:
	a6 = Mem0[a13 + 0x00000200:word32]
	a6 = a6 & a14
	Mem0[a13 + 0x00000200:word32] = a6
	a5 = Mem0[a13 + 0x00000200:word32]
	branch (a5 & 0x00000001) != 0x00000000 l40226A81
	// succ:  l40226A99 l40226A81
l40226A99:
	a0 = Mem0[a1 + 0x00000014:word32]
	// succ:  l40226A9C
l40226A9C:
	a2 = a12 | a12
	a3 = 0x00000000
	a4 = a0
	a0 = 0x40226AA7
	call sdk_rcUpdatePhyMode (retsize: 0;)
	a7 = 0x4020290C
	v16 = Mem0[a7 + 0x00000000:byte]
	a7 = (uint32) v16
	branch a7 != 0x00000000 l40226AD6
	// succ:  l40226AAF l40226AD6
l40226AAF:
	a8 = Mem0[a13 + 0x00000200:word32]
	a9 = 1
	a8 = a8 & a14
	a8 = a8 | a9
	Mem0[a13 + 0x00000200:word32] = a8
	a0 = 0x40202688
	v19 = a0
	a0 = 0x40226AC9
	call v19 (retsize: 0;)
	goto l40226AD6
	// succ:  l40226AD6
l40226ACC:
	a3 = a4
	a4 = a5
	a1 = a1 | a1
	a0 = 0x40226AD6
	call sdk_rc_disable_trc (retsize: 0;)
	// succ:  l40226AD6
l40226AD6:
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_ic_set_sta_exit
sdk_ic_set_sta_exit:


// sdk_ic_bss_info_update
// Return size: 0
void sdk_ic_bss_info_update()
sdk_ic_bss_info_update_entry:
	// succ:  l40226AF0
l40226AF0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	branch a4 != 2 l40226B0B
	// succ:  l40226AF9 l40226B0B
l40226AF9:
	Mem0[a1:word32] = a5
	branch a5 == 0x00000000 l40226B39
	// succ:  l40226AFF l40226B39
l40226AFF:
	a4 = a3
	a3 = a2
	a2 = 2
	a0 = 0x40226B08
	call sdk_wDev_SetRxPolicy (retsize: 0;)
	goto l40226B3C
	// succ:  l40226B3C
l40226B0B:
	branch a4 != 1 l40226B26
	// succ:  l40226B0E l40226B26
l40226B0E:
	a4 = a3 | a3
	a3 = a2 | a2
	a2 = 0x00000002
	a0 = 0x40226B1A
	call sdk_wDev_SetRxPolicy (retsize: 0;)
	a2 = 0x40226AE4
	a0 = 0x402034D0
	v8 = a0
	a0 = 0x40226B23
	call v8 (retsize: 0;)
	goto l40226B32
	// succ:  l40226B32
l40226B26:
	a0 = 0x40226B29
	call fn40326950 (retsize: 0;)
	a2 = 0x40226AE8
	a0 = 0x402034D0
	v10 = a0
	a0 = 0x40226B32
	call v10 (retsize: 0;)
	// succ:  l40226B32
l40226B32:
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ic_bss_info_update_exit
l40226B39:
	a0 = 0x40226B3C
	call fn40326950 (retsize: 0;)
	// succ:  l40226B3C
l40226B3C:
	a2 = 0x40226AEC
	a3 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x402034D0
	v9 = a0
	a0 = 0x40226B47
	call v9 (retsize: 0;)
	// succ:  l40266B32
l40266B32:
sdk_ic_bss_info_update_exit:


// sdk_ic_set_key
// Return size: 0
void sdk_ic_set_key()
sdk_ic_set_key_entry:
	// succ:  l40226B4C
l40226B4C:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x0000001C:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a4
	Mem0[a1 + 0x00000014:word32] = a5
	Mem0[a1 + 0x00000018:word32] = a7
	Mem0[a1 + 0x00000028:word32] = a14
	Mem0[a1 + 0x00000024:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a12
	a13 = a2
	a12 = a3
	a14 = a6
	branch a6 <u 0x00000006 l40226B6C
	// succ:  l40226B66 l40226B6C
l40226B66:
	a0 = 0x40226B69
	call fn40326920 (retsize: 0;)
	goto l40226B7E
	// succ:  l40226B7E
l40226B6C:
	branch a3 != 0x00000000 l40226B7B
	// succ:  l40226B6E l40226B7B
l40226B6E:
	a0 = 0x40226B71
	call fn40326920 (retsize: 0;)
	a2 = a13
	a3 = a12
	a0 = 0x40226B78
	call fn40326930 (retsize: 0;)
	goto l40226B7E
	// succ:  l40226B7E
l40226B7B:
	a0 = 0x40226B7E
	call fn40326930 (retsize: 0;)
	// succ:  l40226B7E
l40226B7E:
	a6 = a14 | a14
	a4 = Mem0[a1 + 0x00000010:word32]
	a5 = Mem0[a1 + 0x00000014:word32]
	a7 = Mem0[a1 + 0x00000018:word32]
	a2 = a12
	a3 = a13
	v13 = Mem0[a1 + 0x00000030:byte]
	a0 = (uint32) v13
	Mem0[a1:word32] = a0
	a0 = 0x40226B94
	call sdk_wDev_Insert_KeyEntry (retsize: 0;)
	a3 = a12
	a2 = a13
	a0 = 0x40226B9B
	call sdk_wDev_Crypto_Conf (retsize: 0;)
	a12 = Mem0[a1 + 0x00000020:word32]
	a13 = Mem0[a1 + 0x00000024:word32]
	a14 = Mem0[a1 + 0x00000028:word32]
	a0 = Mem0[a1 + 0x0000001C:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_ic_set_key_exit
sdk_ic_set_key_exit:


// sdk_ic_remove_key
// Return size: 0
void sdk_ic_remove_key()
sdk_ic_remove_key_entry:
	// succ:  l40226BA8
l40226BA8:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40226BB1
	call sdk_wDev_remove_KeyEntry (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ic_remove_key_exit
sdk_ic_remove_key_exit:


// sdk_lmacInitAc
// Return size: 0
void sdk_lmacInitAc()
sdk_lmacInitAc_entry:
	// succ:  l40226BC0
l40226BC0:
	a1 = fp
	a7 = 0
	a9 = 0x40226BBC
	a8 = a2 + a2 * 0x00000008
	a8 = a9 + a8 * 0x00000004
	Mem0[a8 + 0x00000004:byte] = a2
	Mem0[a8 + 0x00000005:byte] = a3
	Mem0[a8 + 0x00000008:byte] = a5
	Mem0[a8 + 0x00000007:byte] = a4
	Mem0[a8 + 0x00000006:byte] = a4
	Mem0[a8 + 0x00000018:word16] = a6
	Mem0[a8 + 0x00000009:byte] = a7
	Mem0[a8 + 0x0000000A:byte] = a7
	Mem0[a8 + 0x00000011:byte] = a7
	Mem0[a8 + 0x0000001C:word32] = a7
	Mem0[a8 + 0x00000020:word32] = a7
	return
	// succ:  sdk_lmacInitAc_exit
sdk_lmacInitAc_exit:


// sdk_lmacInit
// Return size: 0
void sdk_lmacInit()
sdk_lmacInit_entry:
	// succ:  l40226BF4
l40226BF4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40226BFD
	call fn40226C6C (retsize: 0;)
	a2 = 0x00000002
	a3 = 3
	a4 = 4
	a5 = 10
	a6 = 0
	a0 = 0x40226C0B
	call fn40326BC0 (retsize: 0;)
	a2 = 3
	a3 = 7
	a4 = 4
	a5 = 10
	a6 = 0
	a0 = 0x40226C18
	call fn40326BC0 (retsize: 0;)
	a2 = 1
	a3 = 2
	a4 = 3
	a5 = 4
	a6 = 0x40226BEC
	a0 = 0x40226C26
	call fn40326BC0 (retsize: 0;)
	a2 = 0
	a3 = 2
	a4 = 2
	a5 = 3
	a6 = 0x000005E0
	a0 = 0x40226C34
	call fn40326BC0 (retsize: 0;)
	a2 = 4
	a3 = 2
	a4 = 4
	a5 = 10
	a6 = 0
	a0 = 0x40226C41
	call fn40326BC0 (retsize: 0;)
	a2 = 7
	a3 = 2
	a4 = 5
	a5 = 10
	a6 = 0
	a0 = 0x40226C4E
	call fn40326BC0 (retsize: 0;)
	a2 = 0x40226BF0
	a3 = 8
	Mem0[a2:byte] = a3
	v9 = Mem0[a2 + 0x0000001C:uint16]
	a2 = (uint32) v9
	a3 = 1
	a0 = 0x40226C5E
	call sdk_RC_SetBasicRate (retsize: 0;)
	a0 = 0x40226C61
	call sdk_rcAttach (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_lmacInit_exit
sdk_lmacInit_exit:


// fn40226C6C
// Return size: 0
void fn40226C6C()
fn40226C6C_entry:
	// succ:  l40226C6C
l40226C6C:
	a1 = fp
	a2 = 0x4021F140
	a4 = 0x0000015F
	a5 = 9
	a6 = 0x40226C68
	a7 = 11
	a3 = 0x40226BF0
	a8 = 0x00000200
	Mem0[a3 + 0x00000004:word32] = a8
	Mem0[a3 + 0x00000008:word32] = a8
	Mem0[a3 + 0x0000000D:byte] = a7
	Mem0[a3 + 0x0000000C:byte] = a7
	Mem0[a3 + 0x00000010:word16] = a6
	Mem0[a3 + 0x0000000E:word16] = a6
	Mem0[a3 + 0x00000014:word16] = a5
	Mem0[a3 + 0x0000001C:word16] = a4
	Mem0[a3 + 0x0000001E:word16] = a2
	return
	// succ:  fn40226C6C_exit
fn40226C6C_exit:


// sdk_pm_rtc_clock_cali_proc
// Return size: 0
void sdk_pm_rtc_clock_cali_proc()
sdk_pm_rtc_clock_cali_proc_entry:
	// succ:  l40226CF8
l40226CF8:
	a1 = fp
	a2 = 0x0000006A
	a3 = 2
	a4 = 8
	a7 = 0x40226C9C
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4021BCEC
	a6 = 0
	a0 = Mem0[a0 + 0x00000000:word32]
	a5 = a6
	a0 = Mem0[a0 + 0x00000098:word32]
	Mem0[a7 + 0x00000008:word32] = a6
	v10 = a0
	a0 = 0x40226D18
	call v10 (retsize: 0;)
	a2 = 0x40226CF0
	a0 = 0x40226CF4
	v11 = a0
	a0 = 0x40226D21
	call v11 (retsize: 0;)
	a2 = 0x40226C9C
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	a2 = Mem0[a2 + 0x00000008:word32]
	return
	// succ:  sdk_pm_rtc_clock_cali_proc_exit
sdk_pm_rtc_clock_cali_proc_exit:


// sdk_pm_set_sleep_time
// Return size: 0
void sdk_pm_set_sleep_time()
sdk_pm_set_sleep_time_entry:
	// succ:  l40226D30
l40226D30:
	a1 = fp
	a3 = 0x40226C9C
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a3 = Mem0[a3 + 0x00000008:word32]
	a0 = 0x40226D3F
	call fn40322C8C (retsize: 0;)
	a0 = 0x40226D42
	call fn40322CCC (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_set_sleep_time_exit
sdk_pm_set_sleep_time_exit:


// sdk_pm_rf_is_closed
// Return size: 0
void sdk_pm_rf_is_closed()
sdk_pm_rf_is_closed_entry:
	// succ:  l40226E74
l40226E74:
	a1 = fp
	a4 = 0x40226C9C
	a3 = 1
	v5 = Mem0[a4 + 0x00000035:byte]
	a4 = (uint32) v5
	a2 = 0
	a4 = a4 >>u 0x00000001 & 0x00000007
	a4 = a4 - 3
	branch a4 != 0x00000000 l40226E87
	// succ:  l40226E84_1 l40226E87
l40226E84_1:
	a2 = a3
	// succ:  l40226E87
l40226E87:
	return
	// succ:  sdk_pm_rf_is_closed_exit
sdk_pm_rf_is_closed_exit:


// sdk_pm_set_sleep_type_from_upper
// Return size: 0
void sdk_pm_set_sleep_type_from_upper()
sdk_pm_set_sleep_type_from_upper_entry:
	// succ:  l40226EA4
l40226EA4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	a13 = 0x40226C9C
	a12 = a2 & 0x000000FF
	branch a12 != 0x00000000 l40226EC9
	// succ:  l40226EB5 l40226EC9
l40226EB5:
	a2 = 0x40226E8C
	a3 = 0x40226E90
	a0 = 0
	Mem0[a13 + 0x000000E4:byte] = a0
	a0 = 0x402034D0
	v8 = a0
	a0 = 0x40226EC6
	call v8 (retsize: 0;)
	goto l40226F08
	// succ:  l40226F08
l40226EC9:
	a2 = 1
	a3 = 0x40226E94
	Mem0[a13 + 0x000000E4:byte] = a2
	a2 = 0x40226E8C
	a0 = 0x402034D0
	v9 = a0
	a0 = 0x40226EDA
	call v9 (retsize: 0;)
	branch a12 == 1 l40226EE6
	// succ:  l40226EDD l40226EE6
l40226EDD:
	branch a12 == 2 l40226EE6
	// succ:  l40226EE0 l40226EE6
l40226EE0:
	Mem0[a13 + 0x000000E3:byte] = a12
	goto l40226F08
	// succ:  l40226F08
l40226EE6:
	v11 = Mem0[a13 + 0x000000E2:byte]
	a3 = (uint32) v11
	branch a3 == a12 l40226EFF
	// succ:  l40226EEC l40226EFF
l40226EEC:
	branch a12 != 1 l40226EFA
	// succ:  l40226EEF l40226EFA
l40226EEF:
	a2 = 0x40226E98
	a0 = 0x402034D0
	v12 = a0
	a0 = 0x40226EF8
	call v12 (retsize: 0;)
	a12 = 2
	// succ:  l40226EFA
l40226EFA:
	a3 = a12
	Mem0[a13 + 0x000000E2:byte] = a12
	// succ:  l40226EFF
l40226EFF:
	a2 = 0x40226E9C
	a0 = 0x402034D0
	v13 = a0
	a0 = 0x40226F08
	call v13 (retsize: 0;)
	// succ:  l40226F08
l40226F08:
	a2 = 0x40226EA0
	a0 = 0x402034D0
	v10 = a0
	a0 = 0x40226F11
	call v10 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_set_sleep_type_from_upper_exit
sdk_pm_set_sleep_type_from_upper_exit:


// sdk_pm_get_sleep_type
// Return size: 0
void sdk_pm_get_sleep_type()
sdk_pm_get_sleep_type_entry:
	// succ:  l40226F1C
l40226F1C:
	a1 = fp
	a2 = 0x40226C9C
	a3 = 0
	v6 = Mem0[a2 + 0x000000E4:byte]
	a4 = (uint32) v6
	v7 = Mem0[a2 + 0x000000E2:byte]
	a2 = (uint32) v7
	a4 = a4 - 1
	branch a4 == 0x00000000 l40226F2C
	// succ:  l40226F29_1 l40226F2C
l40226F29_1:
	a2 = a3
	// succ:  l40226F2C
l40226F2C:
	return
	// succ:  sdk_pm_get_sleep_type_exit
sdk_pm_get_sleep_type_exit:


// sdk_uart_tx_flush
// Return size: 0
void sdk_uart_tx_flush()
sdk_uart_tx_flush_entry:
	// succ:  l40227044
l40227044:
	a1 = fp
	return
	// succ:  sdk_uart_tx_flush_exit
sdk_uart_tx_flush_exit:


// sdk_pm_suspend
// Return size: 0
void sdk_pm_suspend()
sdk_pm_suspend_entry:
	// succ:  l40227048
l40227048:
	a1 = fp
	return
	// succ:  sdk_pm_suspend_exit
sdk_pm_suspend_exit:


// sdk_pm_shutdown
// Return size: 0
void sdk_pm_shutdown()
sdk_pm_shutdown_entry:
	// succ:  l40227364
l40227364:
	a1 = fp
	a2 = 0x4022734C
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a0 = 0x402034D0
	v6 = a0
	a0 = 0x40227375
	call v6 (retsize: 0;)
	a2 = 0x40226F44
	a0 = 0x4022737B
	call fn40304430 (retsize: 0;)
	a2 = 0x40226F3C
	a0 = 0x40227381
	call fn40304430 (retsize: 0;)
	a4 = 0x000000EF
	a3 = 0x40226D4C
	a12 = 0x40226C9C
	a5 = 0
	Mem0[a12 + 0x0000003A:byte] = a5
	Mem0[a12 + 0x0000003B:byte] = a5
	v10 = Mem0[a12 + 0x00000035:byte]
	a0 = (uint32) v10
	v11 = Mem0[a3 + 0x00000000:byte]
	a3 = (uint32) v11
	a0 = a0 & a4
	Mem0[a12 + 0x00000035:byte] = a0
	branch a3 != 2 l402273B4
	// succ:  l402273A1 l402273B4
l402273A1:
	a0 = 0x402273A4
	call fn40326E74 (retsize: 0;)
	branch a2 == 0x00000000 l402273B1
	// succ:  l402273A6 l402273B1
l402273A6:
	a2 = 0x40227350
	a0 = 0x402273AC
	call fn40304430 (retsize: 0;)
	a2 = 2
	a0 = 0x402273B1
	call fn40326F4C (retsize: 0;)
	// succ:  l402273B1
l402273B1:
	v23 = Mem0[a12 + 0x00000035:byte]
	a0 = (uint32) v23
	// succ:  l402273B4
l402273B4:
	a3 = a0 >>u 0x00000001 & 0x00000007
	branch a3 == 7 l402273C5
	// succ:  l402273BA l402273C5
l402273BA:
	branch a3 == 0x00000000 l402273C5
	// succ:  l402273BC l402273C5
l402273BC:
	a0 = 0x402273BF
	call fn403272E8 (retsize: 0;)
	v12 = Mem0[a12 + 0x00000035:byte]
	a3 = (uint32) v12
	a3 = a3 >>u 0x00000001 & 0x00000007
	// succ:  l402273C5
l402273C5:
	a6 = 0x4021319C
	a2 = 0x40227354
	a7 = Mem0[a12 + 0x0000000C:word32]
	a5 = Mem0[a12 + 0x00000010:word32]
	v15 = Mem0[a12 + 0x0000003A:byte]
	a4 = (uint32) v15
	a6 = Mem0[a6 + 0x00000200:word32]
	a6 = a6 - a7
	a0 = 0x402034D0
	v16 = a0
	a0 = 0x402273E1
	call v16 (retsize: 0;)
	a7 = 7
	a9 = 0x000000DF
	v19 = Mem0[a12 + 0x00000035:byte]
	a8 = (uint32) v19
	a11 = 0x40227358
	a10 = 0x4022735C
	a0 = 0
	Mem0[a12 + 0x00000036:byte] = a0
	Mem0[a12 + 0x00000030:word32] = a0
	Mem0[a12 + 0x0000003E:byte] = a0
	Mem0[a12 + 0x0000001C:word32] = a0
	Mem0[a12 + 0x00000014:word32] = a0
	Mem0[a12 + 0x00000018:word32] = a0
	Mem0[a12 + 0x00000024:word32] = a0
	Mem0[a12 + 0x00000050:word32] = a10
	Mem0[a12 + 0x0000004C:word32] = a11
	v22 = Mem0[a12 + 0x00000034:byte]
	a10 = (uint32) v22
	a8 = a8 & a9
	a8 = a8 & 0x000000FF
	a9 = 0x40227360
	a8 = a8 << 24
	a8 = a8 | a10
	a10 = 0x000000FE
	a8 = a8 & a9
	a9 = a8 & 0x000000FF
	a11 = a8 >>u 8
	Mem0[a12 + 0x00000035:byte] = a11
	a9 = a9 & a10
	Mem0[a12 + 0x00000034:byte] = a9
	a8 = a8 >>u 0x00000008 & 0x000000FF
	a8 = a8 >>u 1
	branch (a7 & a8) == 0x00000000 l4022743A
	// succ:  l40227437 l4022743A
l40227437:
	a0 = 0x4022743A
	call fn403272B0 (retsize: 0;)
	// succ:  l4022743A
l4022743A:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_shutdown_exit
sdk_pm_shutdown_exit:


// sdk_pm_reset_idle_sleep
// Return size: 0
void sdk_pm_reset_idle_sleep()
sdk_pm_reset_idle_sleep_entry:
	// succ:  l40227448
l40227448:
	a1 = fp
	a1 = a1 - 16
	a2 = 0x40226C9C
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = 0
	Mem0[a2 + 0x00000038:byte] = a0
	a2 = 0x40227444
	Mem0[a1:word32] = a2
	a0 = 0x4022745E
	call fn40304430 (retsize: 0;)
	a3 = 0x40226C9C
	v6 = Mem0[a3 + 0x00000035:byte]
	a3 = (uint32) v6
	branch (a3 & 0x00000020) != 0x00000000 l40227476
	// succ:  l40227467 l40227476
l40227467:
	a0 = 0x4022746A
	call sdk_rc_get_mask (retsize: 0;)
	branch a2 != 0x00000000 l40227476
	// succ:  l4022746C l40227476
l4022746C:
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = 0x000001F4
	a4 = 0
	a0 = 0x40227476
	call fn4030438C (retsize: 0;)
	// succ:  l40227476
l40227476:
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_reset_idle_sleep_exit
sdk_pm_reset_idle_sleep_exit:


// sdk_pm_idle_sleep
// Return size: 0
void sdk_pm_idle_sleep()
sdk_pm_idle_sleep_entry:
	// succ:  l40227480
l40227480:
	a1 = fp
	return
	// succ:  sdk_pm_idle_sleep_exit
sdk_pm_idle_sleep_exit:


// sdk_pm_open
// Return size: 0
void sdk_pm_open()
sdk_pm_open_entry:
	// succ:  l4022748C
l4022748C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a0
	a12 = a2
	a0 = 0x40202EE0
	v7 = a0
	a0 = 0x4022749D
	call v7 (retsize: 0;)
	a2 = a12
	a0 = 0x402274A2
	call sdk_rc_get_sta_trc (retsize: 0;)
	Mem0[a1:word32] = a2
	branch a2 == 0x00000000 l4022752C
	// succ:  l402274A7 l4022752C
l402274A7:
	a2 = 0x40227444
	a13 = 0x40226C9C
	a3 = 32
	v9 = Mem0[a13 + 0x00000035:byte]
	a0 = (uint32) v9
	a4 = 0x000000DF
	a0 = a0 & a4
	a0 = a0 | a3
	Mem0[a13 + 0x00000035:byte] = a0
	a0 = 0x402274C1
	call fn40304430 (retsize: 0;)
	a2 = 0x40227484
	v11 = Mem0[a13 + 0x000000E2:byte]
	a3 = (uint32) v11
	v12 = Mem0[a13 + 0x00000035:byte]
	a4 = (uint32) v12
	v14 = Mem0[a13 + 0x0000003A:byte]
	a5 = (uint32) v14
	a4 = a4 >>u 0x00000001 & 0x00000007
	a0 = 0x402034D0
	v15 = a0
	a0 = 0x402274D6
	call v15 (retsize: 0;)
	v16 = Mem0[a13 + 0x00000035:byte]
	a5 = (uint32) v16
	a4 = a5 >>u 0x00000001 & 0x00000007
	branch a4 != 0x00000000 l4022753D
	// succ:  l402274DF l4022753D
l402274DF:
	a7 = 14
	a6 = 0x000000F1
	a6 = a5 & a6
	a6 = a6 | a7
	Mem0[a13 + 0x00000035:byte] = a6
	// succ:  l402274ED
l402274ED:
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = 0x40227488
	v19 = Mem0[a3 + 0x00000020:uint16]
	a4 = (uint32) v19
	Mem0[a13 + 0x00000040:byte] = a12
	Mem0[a13 + 0x00000048:word16] = a4
	a3 = a3 + 26
	a4 = 6
	a0 = 0x40203130
	v20 = a0
	a0 = 0x40227506
	call v20 (retsize: 0;)
	v21 = Mem0[a13 + 0x00000034:byte]
	a7 = (uint32) v21
	a8 = 0x000000FE
	a7 = a7 & a8
	a8 = 1
	a7 = a7 | a8
	Mem0[a13 + 0x00000034:byte] = a7
	a6 = 0x4021319C
	a5 = 0
	a6 = Mem0[a6 + 0x00000200:word32]
	Mem0[a13 + 0x0000000C:word32] = a6
	Mem0[a13 + 0x00000010:word32] = a5
	a0 = 0x40227529
	call sdk_pp_disable_idle_timer (retsize: 0;)
	a0 = 0x4022752C
	call sdk_pp_enable_idle_timer (retsize: 0;)
	// succ:  l4022752C
l4022752C:
	a0 = 0x402029B0
	v23 = a0
	a0 = 0x40227532
	call v23 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_open_exit
l4022753D:
	branch a4 == 6 l402274ED
	// succ:  l40227540 l402274ED
l40227540:
	v25 = Mem0[a13 + 0x00000034:byte]
	a9 = (uint32) v25
	branch (a9 & 0x00000001) == 0x00000000 l402274ED
	// succ:  l40227546 l402274ED
l40227546:
	a2 = 0x40226F34
	a3 = 0x40226F38
	a4 = 0x00000364
	a0 = 0x402034D0
	v26 = a0
	a0 = 0x40227555
	call v26 (retsize: 0;)
	// succ:  l40267555
l40267555:
sdk_pm_open_exit:


// sdk_pm_onBcnRx
// Return size: 0
void sdk_pm_onBcnRx()
sdk_pm_onBcnRx_entry:
	// succ:  l4022757C
l4022757C:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000018:word32] = a13
	Mem0[a1 + 0x00000020:word32] = a15
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x0000001C:word32] = a14
	Mem0[a1 + 0x00000010:word32] = a0
	a14 = a3
	a0 = a4 - a3
	branch a0 < 12 l402275D0
	// succ:  l40227591 l402275D0
l40227591:
	a0 = a14 + 12
	v10 = Mem0[a3 + 0x00000008:uint16]
	a3 = (uint32) v10
	a12 = 0x40226C9C
	a3 = a3 << 22
	Mem0[a12 + 0x00000030:word32] = a3
	a3 = a4 - a0
	branch a3 < 2 l402275DF
	// succ:  l402275A4 l402275DF
l402275A4:
	a13 = 0
	// succ:  l402275A6
l402275A6:
	v12 = Mem0[a0 + 0x00000001:byte]
	a5 = (uint32) v12
	v14 = Mem0[a0 + 0x00000000:byte]
	a7 = (uint32) v14
	a6 = a5 + 2
	branch a3 < a6 l402275D0
	// succ:  l402275B1 l402275D0
l402275B1:
	branch a7 != 5 l402275B6
	// succ:  l402275B4 l402275B6
l402275B4:
	a13 = a0
	// succ:  l402275B6
l402275B6:
	a0 = a5 + a0
	a0 = a0 + 2
	a3 = a4 - a0
	branch a3 >= 2 l402275A6
	// succ:  l402275C0 l402275A6
l402275C0:
	goto l402275E1
	// succ:  l402275E1
l402275C3:
	branch a15 == 0x00000000 l402275D0
	// succ:  l402275C5 l402275D0
l402275C5:
	branch (a2 & 0x00000010) != 0x00000000 l402275CD
	// succ:  l402275C8 l402275CD
l402275C8:
	v51 = Mem0[a12 + 0x0000003B:byte]
	a2 = (uint32) v51
	branch a2 == 0x00000000 l402275D0
	// succ:  l402275CD l402275D0
l402275CD:
	a0 = 0x402275D0
	call fn40327218 (retsize: 0;)
	// succ:  l402275D0
l402275D0:
	a12 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x00000018:word32]
	a14 = Mem0[a1 + 0x0000001C:word32]
	a15 = Mem0[a1 + 0x00000020:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_pm_onBcnRx_exit
l402275DF:
	a13 = 0
	// succ:  l402275E1
l402275E1:
	Mem0[a1 + 0x0000000C:word32] = a2
	branch a13 != 0x00000000 l402275F1
	// succ:  l402275E5 l402275F1
l402275E5:
	a2 = 0x40227558
	a0 = 0x402034D0
	v17 = a0
	a0 = 0x402275EE
	call v17 (retsize: 0;)
	goto l402675D0
	// succ:  l402675D0
l402275F1:
	a2 = 0x4022755C
	a0 = 0x402034D0
	v18 = a0
	a0 = 0x402275FA
	call v18 (retsize: 0;)
	a2 = 0x40226F44
	a0 = 0x40227600
	call fn40304430 (retsize: 0;)
	a4 = Mem0[a12 + 0x00000030:word32]
	a3 = Mem0[a14 + 0x00000004:word32]
	a2 = Mem0[a14 + 0x00000000:word32]
	v19 = Mem0[a12 + 0x000000E8:uint16]
	a6 = (uint32) v19
	a15 = 0
	a6 = a6 + 1
	Mem0[a12 + 0x000000E6:word16] = a15
	Mem0[a12 + 0x000000E8:word16] = a6
	v20 = Mem0[a13 + 0x00000003:byte]
	a14 = (uint32) v20
	v21 = Mem0[a13 + 0x00000002:byte]
	a5 = (uint32) v21
	Mem0[a1 + 0x00000004:word32] = a4
	branch a5 != 0x00000000 l40227621
	// succ:  l4022761E_1 l40227621
l4022761E_1:
	a5 = a14
	// succ:  l40227621
l40227621:
	a5 = a5 * a4
	Mem0[a1 + 0x00000008:word32] = a5
	a5 = a15
	a0 = 0x40227578
	v22 = a0
	a0 = 0x4022762E
	call v22 (retsize: 0;)
	a9 = Mem0[a1 + 0x0000000C:word32]
	v24 = Mem0[a12 + 0x00000036:byte]
	a7 = (uint32) v24
	a9 = Mem0[a9 + 0x00000020:word32]
	a10 = Mem0[a1 + 0x00000004:word32]
	a9 = Mem0[a9 + 0x00000004:word32]
	a8 = Mem0[a1 + 0x00000008:word32]
	a9 = a9 - a2
	Mem0[a12 + 0x0000001C:word32] = a9
	a8 = a8 + a9
	Mem0[a12 + 0x00000018:word32] = a8
	a9 = a9 + a10
	Mem0[a12 + 0x00000014:word32] = a9
	branch a7 == 0x00000000 l40227662
	// succ:  l4022764A l40227662
l4022764A:
	v27 = Mem0[a12 + 0x0000003E:byte]
	a3 = (uint32) v27
	a4 = 0
	branch a14 == a3 l40227667
	// succ:  l40227652 l40227667
l40227652:
	a4 = a14
	a2 = 0x40227560
	a0 = 0x402034D0
	v28 = a0
	a0 = 0x4022765D
	call v28 (retsize: 0;)
	a4 = 0
	goto l40227667
	// succ:  l40227667
l40227662:
	a4 = 0
	Mem0[a12 + 0x0000003E:byte] = a14
	// succ:  l40227667
l40227667:
	a3 = 0x000000FE
	v29 = Mem0[a12 + 0x00000048:uint16]
	a0 = (uint32) v29
	a10 = 1
	a2 = a10
	Mem0[a12 + 0x00000036:byte] = a10
	a11 = a0 & 0x00003FFF
	v31 = Mem0[a13 + 0x00000004:byte]
	a5 = (uint32) v31
	v32 = Mem0[a13 + 0x00000001:byte]
	a9 = (uint32) v32
	a3 = a5 & a3
	a9 = a9 + a3
	a5 = a5 & 0x00000001
	Mem0[a12 + 0x0000002E:byte] = a5
	a9 = a9 - 4
	a9 = a9 & 0x000000FF
	branch a11 == 0x00000000 l402276AF
	// succ:  l40227690 l402276AF
l40227690:
	a8 = a0 >>u 0x00000003 & 0x000007FF
	branch a8 <u a3 l402276AD
	// succ:  l40227696 l402276AD
l40227696:
	branch a9 <u a8 l402276AD
	// succ:  l40227699 l402276AD
l40227699:
	a7 = a0 & 0x00000007
	a6 = a13 - a3
	a6 = a8 + a6
	v33 = Mem0[a6 + 0x00000005:byte]
	a6 = (uint32) v33
	SAR = a7
	a6 = a0 >> SAR
	branch (a6 & 0x00000001) != 0x00000000 l402276AF
	// succ:  l402276AD l402276AF
l402276AD:
	a2 = 0
	// succ:  l402276AF
l402276AF:
	a0 = 1
	a3 = a2 & 0x000000FF
	Mem0[a12 + 0x0000002F:byte] = a3
	branch a5 != 0x00000000 l402276BE
	// succ:  l402276B9 l402276BE
l402276B9:
	a7 = 0
	branch a3 != 0x00000000 l402276BE
	// succ:  l402276BB_1 l402276BE
l402276BB_1:
	a0 = a7
	// succ:  l402276BE
l402276BE:
	v35 = Mem0[a13 + 0x00000003:byte]
	a14 = (uint32) v35
	Mem0[a1:word32] = a0
	a5 = 0x40227564
	a15 = a0 & 0x000000FF
	v36 = Mem0[a5 + 0x00000000:byte]
	a3 = (uint32) v36
	a8 = a2 & 0x000000FF
	a3 = a3 + 1
	a3 = a3 & 0x000000FF
	branch a8 == 0x00000000 l402276E5
	// succ:  l402276D6 l402276E5
l402276D6:
	v37 = Mem0[a12 + 0x00000035:byte]
	a0 = (uint32) v37
	a0 = a0 >>u 0x00000001 & 0x00000007
	branch a0 < 2 l402276E5
	// succ:  l402276DF l402276E5
l402276DF:
	branch a0 >= 6 l402276E5
	// succ:  l402276E2 l402276E5
l402276E2:
	Mem0[a12 + 0x000000F4:byte] = a10
	// succ:  l402276E5
l402276E5:
	branch a14 >=u 0x00000004 l40227703
	// succ:  l402276E8 l40227703
l402276E8:
	Mem0[a1 + 0x00000024:word32] = a3
	branch a14 == 0x00000000 l40227703
	// succ:  l402276EC l40227703
l402276EC:
	a3 = a14
	a2 = 15
	a0 = 0x40202548
	v38 = a0
	a0 = 0x402276F6
	call v38 (retsize: 0;)
	a4 = 0
	a3 = Mem0[a1 + 0x00000024:word32]
	a5 = 0x40227564
	a0 = a2 & 0x000000FF
	goto l40227705
	// succ:  l40227705
l40227703:
	a0 = 15
	// succ:  l40227705
l40227705:
	branch a3 <u a0 l4022772E
	// succ:  l40227708 l4022772E
l40227708:
	Mem0[a5:byte] = a4
	a14 = 0x40227568
	v39 = Mem0[a12 + 0x000000F4:byte]
	a3 = (uint32) v39
	a0 = 0x4022756C
	branch a3 == 0x00000000 l402277DC
	// succ:  l40227717 l402277DC
l40227717:
	v40 = Mem0[a0 + 0x00000000:byte]
	a2 = (uint32) v40
	a2 = a2 + 1
	a2 = a2 & 0x000000FF
	branch a2 <u 0x00000002 l4022778F
	// succ:  l40227722 l4022778F
l40227722:
	Mem0[a0:byte] = a4
	a3 = 0x00000514
	Mem0[a14:word16] = a3
	goto l40227792
	// succ:  l40227792
l4022772E:
	Mem0[a5:byte] = a3
	a5 = Mem0[a1 + 0x00000000:word32]
	v41 = Mem0[a12 + 0x00000035:byte]
	a2 = (uint32) v41
	a5 = a5 & 0x000000FF
	branch a5 != 0x00000000 l4022778A
	// succ:  l4022773C l4022778A
l4022773C:
	v42 = Mem0[a13 + 0x00000003:byte]
	a7 = (uint32) v42
	v43 = Mem0[a12 + 0x0000003F:byte]
	a0 = (uint32) v43
	a6 = 8
	v44 = (uint16) a0
	v45 = (uint16) a7
	a7 = v44 *u v45
	branch a6 >= a7 l40227751
	// succ:  l4022774A l40227751
l4022774A:
	a15 = 1
	a0 = 0
	Mem0[a12 + 0x0000003F:byte] = a0
	// succ:  l40227751
l40227751:
	a5 = a0 + 1
	Mem0[a12 + 0x0000003F:byte] = a5
	a0 = a2 >>u 0x00000001 & 0x00000007
	branch a0 == 0x00000000 l402277AA
	// succ:  l4022775D l402277AA
l4022775D:
	a8 = a0 - 1
	branch a8 == 0x00000000 l402275C3
	// succ:  l40227763 l402275C3
l40227763:
	branch a0 == 2 l4022779B
	// succ:  l40227766 l4022779B
l40227766:
	branch a0 == 3 l402277AA
	// succ:  l40227769 l402277AA
l40227769:
	branch a0 == 4 l402277B8
	// succ:  l4022776C l402277B8
l4022776C:
	branch a0 == 5 l402277C1
	// succ:  l4022776F l402277C1
l4022776F:
	a9 = a0 - 6
	branch a9 == 0x00000000 l402275D0
	// succ:  l40227775 l402275D0
l40227775:
	a10 = a0 - 7
	branch a10 != 0x00000000 l402275D0
	// succ:  l4022777B l402275D0
l4022777B:
	branch a15 != 0x00000000 l402275D0
	// succ:  l4022777E l402275D0
l4022777E:
	a0 = 0x40227781
	call sdk_pm_scan_unlocked (retsize: 0;)
	branch a2 == 0x00000000 l402275D0
	// succ:  l40227784 l402275D0
l40227784:
	a0 = 0x40227787
	call sdk_pp_try_enable_idle_timer (retsize: 0;)
	goto l402675D0
	// succ:  l402675D0
l4022778A:
	a5 = a4
	goto l40267754
	// succ:  l40267754
l4022778F:
	Mem0[a0:byte] = a2
	// succ:  l40227792
l40227792:
	Mem0[a12 + 0x000000F4:byte] = a4
	Mem0[a12 + 0x000000F5:byte] = a4
	goto l40267731
	// succ:  l40267731
l4022779B:
	branch a15 == 0x00000000 l402275D0
	// succ:  l4022779E l402275D0
l4022779E:
	a11 = a2 >>u 0x00000004 & 0x00000001
	branch a11 == 0x00000000 l402275D0
	// succ:  l402277A4 l402275D0
l402277A4:
	a0 = 0x402277A7
	call fn40327218 (retsize: 0;)
	goto l402675D0
	// succ:  l402675D0
l402277AA:
	branch a15 == 0x00000000 l402275D0
	// succ:  l402277AD l402275D0
l402277AD:
	a2 = 1
	a0 = 0x402277B2
	call sdk_pm_post (retsize: 0;)
	goto l402675D0
	// succ:  l402675D0
l402277B8:
	branch a15 == 0x00000000 l40227803
	// succ:  l402277BB l40227803
l402277BB:
	a0 = 0x402277BE
	call fn40327218 (retsize: 0;)
	goto l402675D0
	// succ:  l402675D0
l402277C1:
	branch a15 == 0x00000000 l4022780C
	// succ:  l402277C4 l4022780C
l402277C4:
	a2 = 0x40226F3C
	a0 = 0x402277CA
	call fn40304430 (retsize: 0;)
	v48 = Mem0[a12 + 0x00000035:byte]
	a13 = (uint32) v48
	a13 = a13 >>u 0x00000004 & 0x00000001
	branch a13 == 0x00000000 l402275D0
	// succ:  l402277D3 l402275D0
l402277D3:
	a0 = 0x402277D6
	call fn40327218 (retsize: 0;)
	goto l402675D0
	// succ:  l402675D0
l402277DC:
	v46 = Mem0[a12 + 0x000000F5:byte]
	a3 = (uint32) v46
	Mem0[a0:byte] = a4
	branch a3 == 0x00000000 l40227839
	// succ:  l402277E5 l40227839
l402277E5:
	v47 = Mem0[a0 + 0x00000001:byte]
	a2 = (uint32) v47
	a2 = a2 + 1
	a2 = a2 & 0x000000FF
	branch a2 == 0x00000000 l40227833
	// succ:  l402277F1 l40227833
l402277F1:
	a3 = 0x00000000
	Mem0[a0 + 0x00000001:byte] = a3
	a0 = 0x402277FA
	call sdk_pm_get_idle_wait_time (retsize: 0;)
	a4 = 0x00000000
	Mem0[a14:word16] = a2
	goto l40267792
	// succ:  l40267792
l40227803:
	branch (a2 & 0x00000010) != 0x00000000 l40227824
	// succ:  l40227806 l40227824
l40227806:
	a0 = 0x40227809
	call fn403271B8 (retsize: 0;)
	goto l402675D0
	// succ:  l402675D0
l4022780C:
	v49 = Mem0[a12 + 0x00000037:byte]
	a6 = (uint32) v49
	a6 = a6 - 8
	branch a6 != 0x00000000 l402275D0
	// succ:  l40227815 l402275D0
l40227815:
	a2 = 0x40227570
	a0 = 0x402034D0
	v50 = a0
	a0 = 0x4022781E
	call v50 (retsize: 0;)
	a0 = 0x40227821
	call fn40327050 (retsize: 0;)
	goto l402675D0
	// succ:  l402675D0
l40227824:
	a2 = 0x40227574
	a0 = 0x402034D0
	v52 = a0
	a0 = 0x4022782D
	call v52 (retsize: 0;)
	a0 = 0x40227830
	call fn40327050 (retsize: 0;)
	goto l402675D0
	// succ:  l402675D0
l40227833:
	Mem0[a0 + 0x00000001:byte] = a2
	goto l40267792
	// succ:  l40267792
l40227839:
	Mem0[a0 + 0x00000001:byte] = a4
	goto l40267792
	// succ:  l40267792
l402675D0:
l40267731:
l40267754:
l40267792:
sdk_pm_onBcnRx_exit:


// sdk_pm_enable_gpio_wakeup
// Return size: 0
void sdk_pm_enable_gpio_wakeup()
sdk_pm_enable_gpio_wakeup_entry:
	// succ:  l40227C98
l40227C98:
	a1 = fp
	a3 = 0x40226C9C
	v5 = Mem0[a3 + 0x00000034:byte]
	a2 = (uint32) v5
	a4 = 0x000000DF
	a2 = a2 & a4
	a4 = 32
	a2 = a2 | a4
	Mem0[a3 + 0x00000034:byte] = a2
	return
	// succ:  sdk_pm_enable_gpio_wakeup_exit
sdk_pm_enable_gpio_wakeup_exit:


// sdk_pm_attach
// Return size: 0
void sdk_pm_attach()
sdk_pm_attach_entry:
	// succ:  l40227CDC
l40227CDC:
	a1 = fp
	a5 = 0x000000FB
	a3 = 0x40226C9C
	a2 = 2
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a0
	Mem0[a3 + 0x000000E0:byte] = a2
	v8 = Mem0[a3 + 0x00000034:byte]
	a4 = (uint32) v8
	a2 = 0x40227350
	a4 = a4 & a5
	a5 = 4
	a4 = a4 | a5
	Mem0[a3 + 0x00000034:byte] = a4
	a5 = 0x000000FE
	a4 = a4 & a5
	Mem0[a3 + 0x00000034:byte] = a4
	a5 = 0x000000FD
	a4 = a4 & a5
	Mem0[a3 + 0x00000034:byte] = a4
	a5 = 0x000000F7
	a4 = a4 & a5
	a5 = 8
	a4 = a4 | a5
	Mem0[a3 + 0x00000034:byte] = a4
	a3 = 0x40227CB0
	a4 = 0
	a0 = 0x40227D25
	call fn403042E8 (retsize: 0;)
	a0 = 0x000000DF
	a3 = 0
	a6 = 1
	a8 = 0x4022735C
	a9 = 0x40227358
	a10 = 0x40227CB4
	a7 = 0x40226C9C
	a4 = 2
	Mem0[a7 + 0x000000E2:byte] = a4
	Mem0[a7 + 0x0000002C:word16] = a10
	Mem0[a7 + 0x0000004C:word32] = a9
	Mem0[a7 + 0x00000050:word32] = a8
	Mem0[a7 + 0x000000E4:byte] = a6
	Mem0[a7 + 0x000000E1:byte] = a3
	Mem0[a7 + 0x000000E3:byte] = a3
	Mem0[a7 + 0x00000036:byte] = a3
	v14 = Mem0[a7 + 0x00000034:byte]
	a2 = (uint32) v14
	v16 = Mem0[a7 + 0x00000035:byte]
	a11 = (uint32) v16
	a2 = a2 & a0
	a11 = a11 & a0
	Mem0[a7 + 0x00000035:byte] = a11
	Mem0[a7 + 0x00000034:byte] = a2
	a3 = 5
	a2 = 0x40227CB8
	a0 = 0x40227D6C
	call sdk_ppRegisterTxCallback (retsize: 0;)
	a2 = 0x40227CBC
	a3 = 6
	a0 = 0x40227D74
	call sdk_ppRegisterTxCallback (retsize: 0;)
	a2 = 0x40226F44
	a3 = 0x40227CC0
	a4 = 0
	a0 = 0x40227D7F
	call fn403042E8 (retsize: 0;)
	a2 = 0x40226F3C
	a3 = 0x40227CC4
	a4 = 0
	a0 = 0x40227D8A
	call fn403042E8 (retsize: 0;)
	a2 = 0x402278DC
	a3 = 0x40227CC8
	a4 = 0
	a0 = 0x40227D95
	call fn403042E8 (retsize: 0;)
	a2 = 0x40227444
	a3 = 0x40227CCC
	a4 = 0
	a0 = 0x40227DA0
	call fn403042E8 (retsize: 0;)
	a2 = 0x40227CD0
	a3 = 0x40227CD4
	a4 = 0x000000B0
	a6 = 1
	a7 = a1 + 16
	a5 = 0
	Mem0[a1:word32] = a5
	Mem0[a1 + 0x00000004:word32] = a5
	a5 = 0
	a0 = 0x40227DB9
	call fn40302690 (retsize: 0;)
	a2 = 0x40227CD8
	a3 = Mem0[a1 + 0x00000010:word32]
	a4 = 1
	a5 = 0x000000B0
	a0 = 0x402034D0
	v17 = a0
	a0 = 0x40227DC9
	call v17 (retsize: 0;)
	a7 = 0x40226C9C
	a6 = 1
	Mem0[a7 + 0x00000039:byte] = a6
	a0 = 0x40227DD4
	call fn40327448 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_pm_attach_exit
sdk_pm_attach_exit:


// sdk_pm_send_nullfunc
// Return size: 0
void sdk_pm_send_nullfunc()
sdk_pm_send_nullfunc_entry:
	// succ:  l40227DEC
l40227DEC:
	a1 = fp
	a5 = 2
	a1 = a1 - 48
	a3 = 0x40226C9C
	Mem0[a1 + 0x00000028:word32] = a0
	a0 = 0
	v7 = Mem0[a3 + 0x0000003B:byte]
	a4 = (uint32) v7
	Mem0[a1 + 0x00000010:word32] = a0
	branch a4 != 0x00000000 l40227E18
	// succ:  l40227DFF l40227E18
l40227DFF:
	v9 = Mem0[a3 + 0x0000003C:byte]
	a6 = (uint32) v9
	branch a6 == 0x00000000 l40227E0B
	// succ:  l40227E04 l40227E0B
l40227E04:
	a5 = a2
	a0 = 1
	goto l40227E18
	// succ:  l40227E18
l40227E0B:
	v12 = Mem0[a3 + 0x00000035:byte]
	a7 = (uint32) v12
	a6 = 1
	a7 = a7 >>u 7
	branch a7 == 0x00000000 l40227E51
	// succ:  l40227E16 l40227E51
l40227E16:
	a0 = a6
	// succ:  l40227E18
l40227E18:
	branch a2 == 0x00000000 l40227E1B
	// succ:  l40227E18_1 l40227E1B
l40227E18_1:
	a5 = a0
	// succ:  l40227E1B
l40227E1B:
	Mem0[a3 + 0x0000003D:byte] = a5
	goto l40227E4A
	// succ:  l40227E4A
l40227E21:
	a9 = Mem0[a1 + 0x00000020:word32]
	a2 = 0x40227DDC
	a9 = Mem0[a9 + 0x00000020:word32]
	a8 = 64
	Mem0[a9 + 0x0000000E:byte] = a8
	a0 = 0x402034D0
	v30 = a0
	a0 = 0x40227E34
	call v30 (retsize: 0;)
	a2 = 0x402278DC
	Mem0[a1 + 0x00000014:word32] = a2
	a0 = 0x40227E3C
	call fn40304430 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = 55
	a4 = 0
	a0 = 0x40227E45
	call fn4030438C (retsize: 0;)
	a2 = Mem0[a1 + 0x00000020:word32]
	a0 = 0x40227E4A
	call sdk_ppTxPkt (retsize: 0;)
	// succ:  l40227E4A
l40227E4A:
	a0 = Mem0[a1 + 0x00000028:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_pm_send_nullfunc_exit
l40227E51:
	Mem0[a1 + 0x00000024:word32] = a2
	Mem0[a3 + 0x0000003A:byte] = a6
	Mem0[a1 + 0x0000001C:word32] = a0
	branch a2 != 0x00000000 l40227E60
	// succ:  l40227E5A l40227E60
l40227E5A:
	Mem0[a3 + 0x0000003C:byte] = a6
	goto l40227E63
	// succ:  l40227E63
l40227E60:
	Mem0[a3 + 0x0000003B:byte] = a6
	// succ:  l40227E63
l40227E63:
	a2 = a1 + 16
	a3 = 0x00000018
	a4 = 0x00000000
	a0 = 0x40227E6F
	call fn4031BBA8 (retsize: 0;)
	Mem0[a1 + 0x00000020:word32] = a2
	branch a2 != 0x00000000 l40227E86
	// succ:  l40227E74 l40227E86
l40227E74:
	a2 = 0x40226F34
	a3 = 0x40226F38
	a4 = 0x0000071A
	a0 = 0x402034D0
	v13 = a0
	a0 = 0x40227E83
	call v13 (retsize: 0;)
	goto l40267E83
	// succ:  l40267E83
l40227E86:
	a2 = Mem0[a2 + 0x00000004:word32]
	a3 = 0x00000018
	a2 = Mem0[a2 + 0x00000004:word32]
	Mem0[a1 + 0x00000018:word32] = a2
	a0 = 0x40213724
	v14 = a0
	a0 = 0x40227E96
	call v14 (retsize: 0;)
	a5 = 24
	a4 = Mem0[a1 + 0x00000020:word32]
	a6 = Mem0[a1 + 0x0000001C:word32]
	Mem0[a4 + 0x00000016:word16] = a6
	Mem0[a4 + 0x00000014:word16] = a5
	a9 = 64
	a0 = 0x00000080
	a4 = Mem0[a4 + 0x00000004:word32]
	v17 = Mem0[a4 + 0x00000003:byte]
	a11 = (uint32) v17
	a11 = a11 & 0x0000007F
	a11 = a11 | a0
	Mem0[a4 + 0x00000003:byte] = a11
	a10 = 0x000000BF
	v20 = Mem0[a4 + 0x00000003:byte]
	a8 = (uint32) v20
	a8 = a8 & a10
	a8 = a8 | a9
	Mem0[a4 + 0x00000003:byte] = a8
	a7 = 0x000000DF
	v21 = Mem0[a4 + 0x00000003:byte]
	a5 = (uint32) v21
	a5 = a5 & a7
	a5 = a5 | a6
	Mem0[a4 + 0x00000003:byte] = a5
	a6 = 0x40216FE4
	a5 = 0x40227DE0
	v22 = Mem0[a4 + 0x00000002:uint16]
	a3 = (uint32) v22
	a3 = a3 << 16
	v23 = Mem0[a4 + 0x00000000:uint16]
	a7 = (uint32) v23
	a3 = a3 | a7
	a3 = a3 & a6
	a3 = a3 | a5
	Mem0[a4:word16] = a3
	a3 = a3 >>u 0x00000010 & 0x0000FFFF
	Mem0[a4 + 0x00000002:word16] = a3
	a2 = 0
	a0 = 0x40227F17
	call fn40326818 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000020:word32]
	a4 = 72
	a5 = 0
	a6 = a2
	a8 = 0x40227488
	a2 = 0x402035F0
	a7 = a8
	a2 = Mem0[a2 + 0x00000010:word32]
	Mem0[a1:word32] = a8
	a0 = 0x40227F2E
	call fn40317268 (retsize: 0;)
	a5 = Mem0[a1 + 0x00000020:word32]
	a6 = 0x4021319C
	a7 = Mem0[a5 + 0x00000020:word32]
	a3 = 6
	a4 = 0x000000F0
	a9 = 0x0000008F
	v24 = Mem0[a7 + 0x00000006:byte]
	a8 = (uint32) v24
	a6 = Mem0[a6 + 0x00000200:word32]
	a8 = a8 & a9
	a9 = 0x000000FD
	Mem0[a7 + 0x00000006:byte] = a8
	a2 = Mem0[a5 + 0x00000020:word32]
	Mem0[a7 + 0x00000010:word32] = a6
	v25 = Mem0[a2 + 0x00000004:byte]
	a0 = (uint32) v25
	a8 = 0x40226C9C
	a0 = a0 & a4
	a4 = Mem0[a1 + 0x0000001C:word32]
	a0 = a0 | a3
	Mem0[a2 + 0x00000004:byte] = a0
	a7 = Mem0[a5 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x00000024:word32]
	a11 = Mem0[a7 + 0x00000000:word32]
	a0 = 0x40227DE4
	a10 = a11 & 0x0000003F
	a11 = a11 >>u 6
	a11 = a11 & a0
	a11 = a11 << 26
	a10 = a10 | a11
	Mem0[a7:word32] = a10
	v26 = Mem0[a7 + 0x00000000:byte]
	a6 = (uint32) v26
	v27 = Mem0[a8 + 0x00000040:byte]
	a8 = (uint32) v27
	a6 = a6 & a9
	a8 = a8 & 0x00000001
	a8 = a8 << 31
	a6 = a6 | a8
	Mem0[a7:byte] = a6
	Mem0[a5 + 0x00000018:word32] = a4
	branch a3 == 0x00000000 l40227E21
	// succ:  l40227F98 l40227E21
l40227F98:
	a2 = 0x40227DE8
	a10 = Mem0[a1 + 0x00000018:word32]
	a8 = Mem0[a1 + 0x00000020:word32]
	v28 = Mem0[a10 + 0x00000001:byte]
	a9 = (uint32) v28
	a11 = 16
	a9 = a9 | a11
	Mem0[a10 + 0x00000001:byte] = a9
	a8 = Mem0[a8 + 0x00000020:word32]
	a7 = 32
	Mem0[a8 + 0x0000000E:byte] = a7
	a0 = 0x402034D0
	v29 = a0
	a0 = 0x40227FB7
	call v29 (retsize: 0;)
	// succ:  l40267E34
l40267E34:
l40267E83:
sdk_pm_send_nullfunc_exit:


// sdk_pm_is_waked
// Return size: 0
void sdk_pm_is_waked()
sdk_pm_is_waked_entry:
	// succ:  l40227FBC
l40227FBC:
	a1 = fp
	a4 = 0x40226C9C
	v4 = Mem0[a4 + 0x00000035:byte]
	a4 = (uint32) v4
	a2 = 0
	a3 = a4 >>u 0x00000001 & 0x00000007
	branch a3 != 7 l40227FCF
	// succ:  l40227FCA l40227FCF
l40227FCA:
	branch (a4 & 0x00000020) == 0x00000000 l40227FCF
	// succ:  l40227FCD l40227FCF
l40227FCD:
	a2 = 1
	// succ:  l40227FCF
l40227FCF:
	a2 = a2 & 0x000000FF
	return
	// succ:  sdk_pm_is_waked_exit
sdk_pm_is_waked_exit:


// sdk_pm_is_open
// Return size: 0
void sdk_pm_is_open()
sdk_pm_is_open_entry:
	// succ:  l40227FD4
l40227FD4:
	a1 = fp
	a4 = 0x40226C9C
	a3 = 1
	v5 = Mem0[a4 + 0x00000035:byte]
	a4 = (uint32) v5
	a2 = 0
	a4 = a4 >>u 0x00000005 & 0x00000001
	a4 = a4 - 1
	branch a4 != 0x00000000 l40227FE6
	// succ:  l40227FE3_1 l40227FE6
l40227FE3_1:
	a2 = a3
	// succ:  l40227FE6
l40227FE6:
	return
	// succ:  sdk_pm_is_open_exit
sdk_pm_is_open_exit:


// sdk_pm_scan_lock
// Return size: 0
void sdk_pm_scan_lock()
sdk_pm_scan_lock_entry:
	// succ:  l40227FEC
l40227FEC:
	a1 = fp
	a2 = 0x40227FE8
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x402034D0
	v5 = a0
	a0 = 0x40227FFB
	call v5 (retsize: 0;)
	a2 = 0x40226C9C
	v6 = Mem0[a2 + 0x00000035:byte]
	a0 = (uint32) v6
	a3 = 0x00000080
	a0 = a0 & 0x0000007F
	a0 = a0 | a3
	Mem0[a2 + 0x00000035:byte] = a0
	a0 = 0x40228010
	call sdk_pp_disable_idle_timer (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_scan_lock_exit
sdk_pm_scan_lock_exit:


// sdk_pm_try_scan_unlock
// Return size: 0
void sdk_pm_try_scan_unlock()
sdk_pm_try_scan_unlock_entry:
	// succ:  l4022801C
l4022801C:
	a1 = fp
	a2 = 0
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40228026
	call fn40228058 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_try_scan_unlock_exit
sdk_pm_try_scan_unlock_exit:


// sdk_pm_force_scan_unlock
// Return size: 0
void sdk_pm_force_scan_unlock()
sdk_pm_force_scan_unlock_entry:
	// succ:  l40228034
l40228034:
	a1 = fp
	a2 = 0x40228030
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x402034D0
	v5 = a0
	a0 = 0x40228043
	call v5 (retsize: 0;)
	a2 = 0x00000000
	a0 = 0x40228049
	call fn40228058 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_force_scan_unlock_exit
sdk_pm_force_scan_unlock_exit:


// fn40228058
// Return size: 0
void fn40228058()
fn40228058_entry:
	// succ:  l40228058
l40228058:
	a1 = fp
	a1 = a1 - 16
	a2 = 0x40228054
	Mem0[a1 + 0x00000004:word32] = a12
	a12 = 0x40226C9C
	Mem0[a1:word32] = a0
	v7 = Mem0[a12 + 0x00000035:byte]
	a3 = (uint32) v7
	v9 = Mem0[a12 + 0x0000003D:byte]
	a4 = (uint32) v9
	a3 = a3 >>u 0x00000001 & 0x00000007
	a0 = 0x402034D0
	v10 = a0
	a0 = 0x40228074
	call v10 (retsize: 0;)
	v11 = Mem0[a12 + 0x00000035:byte]
	a0 = (uint32) v11
	v13 = Mem0[a12 + 0x0000003A:byte]
	a5 = (uint32) v13
	a4 = a0 & 0x0000007F
	Mem0[a12 + 0x00000035:byte] = a4
	branch (a4 & 0x00000020) == 0x00000000 l402280B6
	// succ:  l40228083 l402280B6
l40228083:
	branch a5 != 0x00000000 l402280B6
	// succ:  l40228085 l402280B6
l40228085:
	v14 = Mem0[a12 + 0x0000003D:byte]
	a4 = (uint32) v14
	a2 = 0
	branch a4 != 1 l402280C2
	// succ:  l4022808D l402280C2
l4022808D:
	Mem0[a12 + 0x0000003D:byte] = a2
	a6 = a0 >>u 0x00000001 & 0x00000007
	branch a6 == 1 l402280E6
	// succ:  l40228096 l402280E6
l40228096:
	a2 = 0x40226F34
	a3 = 0x40226F38
	a4 = 0x00000783
	a0 = 0x402034D0
	v16 = a0
	a0 = 0x402280A5
	call v16 (retsize: 0;)
	goto l402680A5
	// succ:  l402680A5
l402280A8:
	a0 = 0x402280AB
	call fn40327FBC (retsize: 0;)
	branch a2 == 0x00000000 l402280B6
	// succ:  l402280AD l402280B6
l402280AD:
	a0 = 0x402280B0
	call sdk_pp_disable_idle_timer (retsize: 0;)
	a1 = a1 | a1
	a0 = 0x402280B6
	call sdk_pp_enable_idle_timer (retsize: 0;)
	// succ:  l402280B6
l402280B6:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn40228058_exit
l402280C2:
	branch a4 != 2 l402280A8
	// succ:  l402280C5 l402280A8
l402280C5:
	Mem0[a12 + 0x0000003D:byte] = a2
	a7 = a0 >>u 0x00000001 & 0x00000007
	branch a7 == 6 l402280E0
	// succ:  l402280CE l402280E0
l402280CE:
	a2 = 0x40226F34
	a3 = 0x40226F38
	a4 = 0x0000078A
	a0 = 0x402034D0
	v18 = a0
	a0 = 0x402280DD
	call v18 (retsize: 0;)
	goto l402680DD
	// succ:  l402680DD
l402280E0:
	a0 = 0x402280E3
	call fn40327DEC (retsize: 0;)
	goto l402680B6
	// succ:  l402680B6
l402280E6:
	a2 = 1
	a0 = 0x402280EB
	call fn40327DEC (retsize: 0;)
	goto l402680B6
	// succ:  l402680B6
l402680A5:
l402680B6:
l402680DD:
fn40228058_exit:


// sdk_pm_scan_unlocked
// Return size: 0
void sdk_pm_scan_unlocked()
sdk_pm_scan_unlocked_entry:
	// succ:  l402280F0
l402280F0:
	a1 = fp
	a4 = 0x40226C9C
	a3 = 1
	v5 = Mem0[a4 + 0x00000035:byte]
	a4 = (uint32) v5
	a2 = 0
	a4 = a4 >>u 7
	branch a4 != 0x00000000 l40228100
	// succ:  l402280FD_1 l40228100
l402280FD_1:
	a2 = a3
	// succ:  l40228100
l40228100:
	return
	// succ:  sdk_pm_scan_unlocked_exit
sdk_pm_scan_unlocked_exit:


// sdk_pm_allow_tx
// Return size: 0
void sdk_pm_allow_tx()
sdk_pm_allow_tx_entry:
	// succ:  l40228104
l40228104:
	a1 = fp
	a6 = 0x40226C9C
	v5 = Mem0[a6 + 0x00000035:byte]
	a4 = (uint32) v5
	a5 = 1
	a4 = a4 >>u 0x00000001 & 0x00000007
	branch a4 == 7 l4022811C
	// succ:  l40228112 l4022811C
l40228112:
	branch a4 == 0x00000000 l4022811C
	// succ:  l40228114 l4022811C
l40228114:
	v8 = Mem0[a6 + 0x00000040:byte]
	a7 = (uint32) v8
	branch a7 != a2 l4022811C
	// succ:  l4022811A l4022811C
l4022811A:
	a5 = 0
	// succ:  l4022811C
l4022811C:
	a2 = a5 & 0x000000FF
	return
	// succ:  sdk_pm_allow_tx_exit
sdk_pm_allow_tx_exit:


// sdk_pm_assoc_parse
// Return size: 0
void sdk_pm_assoc_parse()
sdk_pm_assoc_parse_entry:
	// succ:  l40228124
l40228124:
	a1 = fp
	v4 = Mem0[a2 + 0x00000002:uint16]
	a3 = (uint32) v4
	branch a3 == 0x00000000 l4022812D
	// succ:  l40228129 l4022812D
l40228129:
	a2 = -1
	return
	// succ:  sdk_pm_assoc_parse_exit
l4022812D:
	v7 = Mem0[a2 + 0x00000004:uint16]
	a4 = (uint32) v7
	a5 = 0x40226C9C
	a2 = 0
	Mem0[a5 + 0x00000048:word16] = a4
	return
	// succ:  sdk_pm_assoc_parse_exit
sdk_pm_assoc_parse_exit:


// sdk_pm_set_addr
// Return size: 0
void sdk_pm_set_addr()
sdk_pm_set_addr_entry:
	// succ:  l4022813C
l4022813C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40226C9C
	a4 = 6
	Mem0[a0 + 0x00000040:byte] = a2
	a2 = a0 + 65
	a0 = 0x40203130
	v6 = a0
	a0 = 0x40228152
	call v6 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_set_addr_exit
sdk_pm_set_addr_exit:


// sdk_pm_sleep_for
// Return size: 0
void sdk_pm_sleep_for()
sdk_pm_sleep_for_entry:
	// succ:  l4022815C
l4022815C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40226C9C
	v5 = Mem0[a0 + 0x00000035:byte]
	a3 = (uint32) v5
	branch (a3 & 0x00000020) == 0x00000000 l4022817C
	// succ:  l4022816A l4022817C
l4022816A:
	a4 = 6
	a3 = a0 + 65
	a0 = 0x40202AA8
	v7 = a0
	a0 = 0x40228175
	call v7 (retsize: 0;)
	branch a2 != 0x00000000 l4022817C
	// succ:  l40228177 l4022817C
l40228177:
	a0 = 1
	goto l4022817E
	// succ:  l4022817E
l4022817C:
	a0 = 0
	// succ:  l4022817E
l4022817E:
	a2 = a0 & 0x000000FF
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_sleep_for_exit
sdk_pm_sleep_for_exit:


// sdk_pm_post
// Return size: 0
void sdk_pm_post()
sdk_pm_post_entry:
	// succ:  l40228198
l40228198:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = 0x40226C9C
	Mem0[a1 + 0x00000008:word32] = a12
	v5 = Mem0[a0 + 0x00000039:byte]
	a0 = (uint32) v5
	a12 = a2
	branch a0 == 0x00000000 l40228203
	// succ:  l402281AA l40228203
l402281AA:
	a0 = 0x40202680
	v7 = a0
	a0 = 0x402281B0
	call v7 (retsize: 0;)
	a2 = 0x40228188
	a2 = a12 + a2
	v8 = Mem0[a2 + 0x00000000:byte]
	a0 = (uint32) v8
	branch a0 == 0x00000000 l402281C5
	// succ:  l402281BA l402281C5
l402281BA:
	a0 = 0x40202688
	v9 = a0
	a0 = 0x402281C0
	call v9 (retsize: 0;)
	// succ:  l402281C0
l402281C0:
	a2 = 0
	goto l40228203
	// succ:  l40228203
l402281C5:
	a3 = a0 + 1
	Mem0[a2:byte] = a3
	a0 = 0x40202688
	v11 = a0
	a0 = 0x402281D0
	call v11 (retsize: 0;)
	a0 = 0x402281D3
	call fn40326CA0 (retsize: 0;)
	Mem0[a1:word32] = a2
	branch a2 != 0x00000000 l402281E2
	// succ:  l402281D7 l402281E2
l402281D7:
	a2 = 0x4022818C
	a0 = 0x402034D0
	v12 = a0
	a0 = 0x402281E0
	call v12 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000000:word32]
	// succ:  l402281E2
l402281E2:
	a3 = a1
	a4 = 0x40228190
	Mem0[a2:word32] = a12
	a5 = 0
	a2 = Mem0[a4 + 0x0000001C:word32]
	a4 = 1
	a0 = 0x40202DF4
	v15 = a0
	a0 = 0x402281F5
	call v15 (retsize: 0;)
	branch a2 == 1 l402281C0
	// succ:  l402281F8 l402281C0
l402281F8:
	a2 = 0x40228194
	a0 = 0x402034D0
	v16 = a0
	a0 = 0x40228201
	call v16 (retsize: 0;)
	a2 = 1
	// succ:  l40228203
l40228203:
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_post_exit
sdk_pm_post_exit:


// sdk_pm_get_idle_wait_time
// Return size: 0
void sdk_pm_get_idle_wait_time()
sdk_pm_get_idle_wait_time_entry:
	// succ:  l4022837C
l4022837C:
	a1 = fp
	a2 = 0x40226C9C
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	v5 = Mem0[a2 + 0x00000040:byte]
	a2 = (uint32) v5
	a0 = 0x4022838B
	call sdk_rc_get_sta_trc (retsize: 0;)
	branch a2 == 0x00000000 l402283B7
	// succ:  l4022838E l402283B7
l4022838E:
	v6 = Mem0[a2 + 0x00000001:byte]
	a2 = (uint32) v6
	a3 = 0x0000001A
	a0 = a2 << 8
	a0 = a0 >> 24
	branch a3 >= a0 l402283A2
	// succ:  l4022839D l402283A2
l4022839D:
	a2 = 80
	goto l402283B0
	// succ:  l402283B0
l402283A2:
	a3 = 16
	branch a3 >= a0 l402283B7
	// succ:  l402283A7 l402283B7
l402283A7:
	a4 = 0x0000007F
	branch a2 == a4 l402283B7
	// succ:  l402283AD l402283B7
l402283AD:
	a2 = 0x000000A0
	// succ:  l402283B0
l402283B0:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pm_get_idle_wait_time_exit
l402283B7:
	a2 = 0x000000F0
	// succ:  l402683B0
l402683B0:
sdk_pm_get_idle_wait_time_exit:


// sdk_PPWdtReset
// Return size: 0
void sdk_PPWdtReset()
sdk_PPWdtReset_entry:
	// succ:  l402283C4
l402283C4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a2 = 0x402125CC
	a0 = 0x00000073
	Mem0[a2 + 0x00000314:word32] = a0
	a2 = 0x402283C0
	a0 = 0x40204014
	v5 = a0
	a0 = 0x402283DE
	call v5 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_PPWdtReset_exit
sdk_PPWdtReset_exit:


// sdk_pp_soft_wdt_init
// Return size: 0
void sdk_pp_soft_wdt_init()
sdk_pp_soft_wdt_init_entry:
	// succ:  l402283EC
l402283EC:
	a1 = fp
	a2 = 0x402283E8
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x402283F8
	call sdk_wDev_MacTim1SetFunc (retsize: 0;)
	a2 = 0x402283C0
	a0 = 0x40204014
	v5 = a0
	a0 = 0x40228401
	call v5 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pp_soft_wdt_init_exit
sdk_pp_soft_wdt_init_exit:


// sdk_RxNodeNum
// Return size: 0
void sdk_RxNodeNum()
sdk_RxNodeNum_entry:
	// succ:  l4022840C
l4022840C:
	a1 = fp
	a2 = 0x402266F8
	v5 = Mem0[a2 + 0x00000005:byte]
	a3 = (uint32) v5
	a5 = Mem0[a2 + 0x00000008:word32]
	branch a3 == 0x00000000 l4022841A
	// succ:  l40228416 l4022841A
l40228416:
	a2 = 5
	return
	// succ:  sdk_RxNodeNum_exit
l4022841A:
	a2 = 0
	branch a5 == 0x00000000 l4022842D
	// succ:  l4022841E l4022842D
l4022841E:
	a2 = a2 + 1
	a6 = Mem0[a5 + 0x00000008:word32]
	a2 = a2 & 0x000000FF
	branch a5 == a6 l4022842D
	// succ:  l40228428 l4022842D
l40228428:
	a5 = a6
	goto l4026841C
	// succ:  l4026841C
l4022842D:
	return
	// succ:  sdk_RxNodeNum_exit
l4026841C:
sdk_RxNodeNum_exit:


// sdk_TxNodeNum
// Return size: 0
void sdk_TxNodeNum()
sdk_TxNodeNum_entry:
	// succ:  l40228430
l40228430:
	a1 = fp
	a2 = 0x402266F8
	v5 = Mem0[a2 + 0x00000005:byte]
	a3 = (uint32) v5
	a4 = Mem0[a2 + 0x00000028:word32]
	branch a3 != 0x00000000 l4022843F
	// succ:  l4022843A l4022843F
l4022843A:
	a2 = 0
	goto l4022844A
	// succ:  l4022844A
l4022843F:
	a2 = 5
	return
	// succ:  sdk_TxNodeNum_exit
l40228443:
	a4 = Mem0[a4 + 0x00000008:word32]
	a2 = a2 + 1
	a2 = a2 & 0x000000FF
	// succ:  l4022844A
l4022844A:
	branch a4 != 0x00000000 l40228443
	// succ:  l4022844D l40228443
l4022844D:
	return
	// succ:  sdk_TxNodeNum_exit
sdk_TxNodeNum_exit:


// sdk_pp_disable_noise_timer
// Return size: 0
void sdk_pp_disable_noise_timer()
sdk_pp_disable_noise_timer_entry:
	// succ:  l4022847C
l4022847C:
	a1 = fp
	a2 = 0x40228478
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40228488
	call fn40304430 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pp_disable_noise_timer_exit
sdk_pp_disable_noise_timer_exit:


// sdk_pp_enable_noise_timer
// Return size: 0
void sdk_pp_enable_noise_timer()
sdk_pp_enable_noise_timer_entry:
	// succ:  l40228498
l40228498:
	a1 = fp
	a2 = 0x40228478
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1:word32] = a0
	a0 = 0x402284AB
	call fn40304430 (retsize: 0;)
	a0 = 0x402284AE
	call fn40326E74 (retsize: 0;)
	a14 = 1
	a12 = 0x40228450
	branch a2 == 0x00000000 l402284BB
	// succ:  l402284B5 l402284BB
l402284B5:
	Mem0[a12 + 0x00000028:byte] = a14
	goto l402284C4
	// succ:  l402284C4
l402284BB:
	a2 = a14 | a14
	a3 = 0x00000001
	a0 = 0x402284C4
	call fn4031E4F4 (retsize: 0;)
	// succ:  l402284C4
l402284C4:
	a13 = 0x402266F8
	v9 = Mem0[a13 + 0x00000000:byte]
	a13 = (uint32) v9
	a0 = 0x402284CD
	call fn40328430 (retsize: 0;)
	a0 = 0x00000000
	a14 = 0x40228494
	branch a13 <u 0x00000002 l402284DC
	// succ:  l402284D6 l402284DC
l402284D6:
	a3 = a2 & 0x000000FF
	branch a3 >=u 0x00000002 l402284F5
	// succ:  l402284DC l402284F5
l402284DC:
	a2 = 0x000003E8
	v10 = Mem0[a12 + 0x00000029:byte]
	a13 = (uint32) v10
	v11 = Mem0[a14 + 0x00000000:uint16]
	a3 = (uint32) v11
	a13 = a13 + 1
	a13 = a13 & 0x000000FF
	a0 = 0x40202548
	v12 = a0
	a0 = 0x402284F0
	call v12 (retsize: 0;)
	a0 = 0
	branch a13 < a2 l402284FB
	// succ:  l402284F5 l402284FB
l402284F5:
	Mem0[a12 + 0x00000029:byte] = a0
	goto l402284FE
	// succ:  l402284FE
l402284FB:
	Mem0[a12 + 0x00000029:byte] = a13
	// succ:  l402284FE
l402284FE:
	a0 = 0x40228501
	call fn4031E4C8 (retsize: 0;)
	a14 = a2 + 2
	a13 = Mem0[a12 + 0x0000002C:word32]
	a2 = 0x40228494
	a14 = a14 >> 2
	a13 = a13 + 1
	Mem0[a2 + 0x00000002:byte] = a14
	v13 = Mem0[a2 + 0x00000000:uint16]
	a14 = (uint32) v13
	a2 = Mem0[a2 + 0x00000004:word32]
	a3 = a14
	a0 = 0x40204388
	v14 = a0
	a0 = 0x4022851F
	call v14 (retsize: 0;)
	branch a13 <u a2 l40228536
	// succ:  l40228522 l40228536
l40228522:
	a13 = 0x40228494
	a2 = 0
	Mem0[a12 + 0x0000002C:word32] = a2
	a0 = 0x4022852C
	call fn40326E74 (retsize: 0;)
	branch a2 == 0x00000000 l40228552
	// succ:  l4022852E l40228552
l4022852E:
	a3 = 1
	Mem0[a12 + 0x00000030:byte] = a3
	goto l40228557
	// succ:  l40228557
l40228536:
	Mem0[a12 + 0x0000002C:word32] = a13
	a3 = a14 | a14
	a2 = 0x40228478
	a4 = 0x00000000
	a0 = 0x40228545
	call fn4030438C (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pp_enable_noise_timer_exit
l40228552:
	a2 = 0
	a0 = 0x40228557
	call fn4031FD88 (retsize: 0;)
	// succ:  l40228557
l40228557:
	v16 = Mem0[a13 + 0x00000000:uint16]
	a14 = (uint32) v16
	// succ:  l40268539
l40268539:
sdk_pp_enable_noise_timer_exit:


// sdk_pp_noise_test
// Return size: 0
void sdk_pp_noise_test()
sdk_pp_noise_test_entry:
	// succ:  l40228560
l40228560:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40228568
	call fn40328498 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pp_noise_test_exit
sdk_pp_noise_test_exit:


// sdk_reset_noise_timer
// Return size: 0
void sdk_reset_noise_timer()
sdk_reset_noise_timer_entry:
	// succ:  l40228570
l40228570:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a2
	Mem0[a1 + 0x00000004:word32] = a0
	a2 = 0x40228478
	a0 = 0
	Mem0[a2 + 0x00000020:word32] = a0
	Mem0[a2 + 0x0000001D:byte] = a0
	a0 = 0x40228586
	call fn40304430 (retsize: 0;)
	a4 = 0x40228494
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = 0x40228478
	Mem0[a4:word16] = a3
	a4 = 1
	a0 = 0x40228596
	call fn4030438C (retsize: 0;)
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_reset_noise_timer_exit
sdk_reset_noise_timer_exit:


// sdk_pp_disable_idle_timer
// Return size: 0
void sdk_pp_disable_idle_timer()
sdk_pp_disable_idle_timer_entry:
	// succ:  l402285A4
l402285A4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40228450
	v5 = Mem0[a0 + 0x00000031:byte]
	a2 = (uint32) v5
	branch a2 != 1 l402285B9
	// succ:  l402285B3 l402285B9
l402285B3:
	a3 = 0x00000000
	Mem0[a0 + 0x00000031:byte] = a3
	// succ:  l402285B9
l402285B9:
	a2 = 0x402285A0
	a0 = 0x402285BF
	call fn40304430 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pp_disable_idle_timer_exit
sdk_pp_disable_idle_timer_exit:


// sdk_pp_enable_idle_timer
// Return size: 0
void sdk_pp_enable_idle_timer()
sdk_pp_enable_idle_timer_entry:
	// succ:  l402285C8
l402285C8:
	a1 = fp
	a4 = 0x00000000
	a2 = 0x40228450
	a3 = 0x00000001
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a2 + 0x00000031:byte] = a3
	a3 = 0x40228494
	a2 = a2 + 52
	v7 = Mem0[a3 + 0x00000008:uint16]
	a3 = (uint32) v7
	a0 = 0x402285E6
	call fn4030438C (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pp_enable_idle_timer_exit
sdk_pp_enable_idle_timer_exit:


// sdk_pp_try_enable_idle_timer
// Return size: 0
void sdk_pp_try_enable_idle_timer()
sdk_pp_try_enable_idle_timer_entry:
	// succ:  l402285F0
l402285F0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40228450
	v5 = Mem0[a0 + 0x00000031:byte]
	a2 = (uint32) v5
	branch a2 != 0x00000000 l40228613
	// succ:  l402285FF l40228613
l402285FF:
	a2 = a0 + 52
	a3 = 0x40228494
	a4 = 0x00000001
	Mem0[a0 + 0x00000031:byte] = a4
	v8 = Mem0[a3 + 0x00000008:uint16]
	a3 = (uint32) v8
	a4 = 0
	a0 = 0x40228613
	call fn4030438C (retsize: 0;)
	// succ:  l40228613
l40228613:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pp_try_enable_idle_timer_exit
sdk_pp_try_enable_idle_timer_exit:


// sdk_ppPeocessRxPktHdr
// Return size: 0
void sdk_ppPeocessRxPktHdr()
sdk_ppPeocessRxPktHdr_entry:
	// succ:  l40228620
l40228620:
	a1 = fp
	a5 = 0x4022861C
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	a5 = Mem0[a5 + 0x00000000:word32]
	a12 = a2
	branch a5 == 0x00000000 l4022865E
	// succ:  l40228630 l4022865E
l40228630:
	v8 = Mem0[a2 + 0x00000001:byte]
	a6 = (uint32) v8
	v9 = Mem0[a2 + 0x00000004:byte]
	a0 = (uint32) v9
	a6 = a6 >>u 6
	branch a6 == 0x00000000 l4022864D
	// succ:  l4022863B l4022864D
l4022863B:
	a7 = a0 >>u 7
	branch a7 == 1 l4022866F
	// succ:  l40228641 l4022866F
l40228641:
	a8 = a0 & 0x0000007F
	branch a8 >= 8 l4022866F
	// succ:  l40228647 l4022866F
l40228647:
	v13 = Mem0[a2 + 0x00000007:byte]
	a9 = (uint32) v13
	branch (a9 & 0x00000040) != 0x00000000 l4022866F
	// succ:  l4022864D l4022866F
l4022864D:
	v15 = Mem0[a12 + 0x00000030:uint16]
	a3 = (uint32) v15
	a3 = a3 << 31
	a3 = a3 + 58
	a3 = a3 & 0x0000FFFF
	a2 = a12
	a0 = 0x4022865E
	call a5 (retsize: 0;)
	// succ:  l4022865E
l4022865E:
	a2 = a12
	a0 = 0x40202678
	v16 = a0
	a0 = 0x40228666
	call v16 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ppPeocessRxPktHdr_exit
l4022866F:
	a3 = 12
	// succ:  l40268659
l40268659:
sdk_ppPeocessRxPktHdr_exit:


// sdk_ppTask
// Return size: 0
void sdk_ppTask()
sdk_ppTask_entry:
	// succ:  l40228680
l40228680:
	a1 = fp
	a2 = 0x00000028
	a3 = 0x00000004
	a4 = 0
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a15
	Mem0[a1 + 0x00000014:word32] = a14
	Mem0[a1 + 0x00000010:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a0
	a0 = 0x40228698
	call fn403031E8 (retsize: 0;)
	a12 = 0x4021287C
	a15 = 0x4020290C
	a13 = 0x40228450
	a14 = -32
	Mem0[a13 + 0x00000050:word32] = a2
	a3 = a1
	a4 = -1
	a5 = 0
	a0 = 0x402286AF
	call fn403032D0 (retsize: 0;)
	branch a2 != 1 l402286D2
	// succ:  l402286B2 l402286D2
l402286B2:
	a2 = Mem0[a1 + 0x00000000:word32]
	a0 = Mem0[a2 + 0x00000000:word32]
	branch a0 >=u 0x00000004 l402286D8
	// succ:  l402286B9 l402286D8
l402286B9:
	a10 = 0x40228674
	a10 = a0 + a10
	v14 = Mem0[a10 + 0x00000000:byte]
	a9 = (uint32) v14
	a2 = a0 & 0x000000FF
	a9 = a9 - 1
	Mem0[a10:byte] = a9
	a0 = 0x40228678
	v15 = a0
	a0 = 0x402286CF
	call v15 (retsize: 0;)
	// succ:  l402286CF
l402286CF:
	a0 = 0x402286D2
	call fn40328454 (retsize: 0;)
	// succ:  l402286D2
l402286D2:
	a2 = Mem0[a13 + 0x00000050:word32]
	goto l402686A6
	// succ:  l402686A6
l402286D8:
	a11 = a0 - 4
	branch a11 == 0x00000000 l40228796
	// succ:  l402286DE l40228796
l402286DE:
	a3 = a0 - 5
	branch a3 == 0x00000000 l402287F4
	// succ:  l402286E4 l402287F4
l402286E4:
	branch a0 == 7 l402286CF
	// succ:  l402286E7 l402286CF
l402286E7:
	a4 = a0 - 8
	branch a4 == 0x00000000 l4022890B
	// succ:  l402286ED l4022890B
l402286ED:
	a5 = a0 - 9
	branch a5 == 0x00000000 l40228903
	// succ:  l402286F3 l40228903
l402286F3:
	a6 = a0 - 10
	branch a6 == 0x00000000 l40228850
	// succ:  l402286F9 l40228850
l402286F9:
	a7 = a0 - 11
	branch a7 == 0x00000000 l402288AC
	// succ:  l402286FF l402288AC
l402286FF:
	branch a0 != 12 l402286CF
	// succ:  l40228702 l402286CF
l40228702:
	v20 = Mem0[a15 + 0x00000000:byte]
	a8 = (uint32) v20
	branch a8 != 0x00000000 l40228725
	// succ:  l40228707 l40228725
l40228707:
	a0 = 0x40202680
	v21 = a0
	a0 = 0x4022870D
	call v21 (retsize: 0;)
	// succ:  l4022870D
l4022870D:
	a10 = Mem0[a12 + 0x00000200:word32]
	a10 = a10 & a14
	Mem0[a12 + 0x00000200:word32] = a10
	a9 = Mem0[a12 + 0x00000200:word32]
	branch (a9 & 0x00000001) != 0x00000000 l4022870D
	// succ:  l40228725 l4022870D
l40228725:
	a2 = 32
	a0 = 0x402142E8
	v22 = a0
	a0 = 0x4022872D
	call v22 (retsize: 0;)
	a3 = a2
	Mem0[a1 + 0x00000004:word32] = a2
	a4 = 32
	a2 = 0
	a0 = 0x40203778
	v23 = a0
	a0 = 0x4022873B
	call v23 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000004:word32]
	a0 = 0x402034CC
	v24 = a0
	a0 = 0x40228743
	call v24 (retsize: 0;)
	v25 = Mem0[a13 + 0x00000055:byte]
	a11 = (uint32) v25
	a4 = 0x40228674
	v26 = Mem0[a13 + 0x00000054:byte]
	a6 = (uint32) v26
	a5 = 0
	a2 = Mem0[a1 + 0x00000000:word32]
	v27 = Mem0[a13 + 0x00000000:byte]
	a3 = (uint32) v27
	a2 = Mem0[a2 + 0x00000000:word32]
	branch a6 != 0x00000000 l40228758
	// succ:  l40228755_1 l40228758
l40228755_1:
	a3 = a5
	// succ:  l40228758
l40228758:
	a2 = a2 + a4
	v28 = Mem0[a2 + 0x00000000:byte]
	a0 = (uint32) v28
	Mem0[a13:byte] = a3
	a0 = a0 - 1
	Mem0[a2:byte] = a0
	branch a11 != 0x00000000 l40228773
	// succ:  l40228767 l40228773
l40228767:
	a4 = 0x402125CC
	a3 = 0x00000073
	Mem0[a4 + 0x00000314:word32] = a3
	// succ:  l40228773
l40228773:
	v34 = Mem0[a15 + 0x00000000:byte]
	a5 = (uint32) v34
	branch a5 != 0x00000000 l402286CF
	// succ:  l40228779 l402286CF
l40228779:
	a6 = Mem0[a12 + 0x00000200:word32]
	a7 = 1
	a6 = a6 & a14
	a6 = a6 | a7
	Mem0[a12 + 0x00000200:word32] = a6
	a0 = 0x40202688
	v35 = a0
	a0 = 0x40228793
	call v35 (retsize: 0;)
	goto l402686CF
	// succ:  l402686CF
l40228796:
	v29 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v29
	branch a2 != 0x00000000 l402287C0
	// succ:  l4022879B l402287C0
l4022879B:
	a0 = 0x40202680
	v30 = a0
	a0 = 0x402287A1
	call v30 (retsize: 0;)
	// succ:  l402287A1
l402287A1:
	a8 = Mem0[a12 + 0x00000200:word32]
	a8 = a8 & a14
	Mem0[a12 + 0x00000200:word32] = a8
	a7 = Mem0[a12 + 0x00000200:word32]
	branch (a7 & 0x00000001) != 0x00000000 l402287A1
	// succ:  l402287B9 l402287A1
l402287B9:
	a0 = Mem0[a1 + 0x00000000:word32]
	v31 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v31
	a0 = Mem0[a0 + 0x00000000:word32]
	// succ:  l402287C0
l402287C0:
	a4 = 0x40228674
	a4 = a0 + a4
	v32 = Mem0[a4 + 0x00000000:byte]
	a3 = (uint32) v32
	a3 = a3 - 1
	Mem0[a4:byte] = a3
	branch a2 != 0x00000000 l402287E9
	// succ:  l402287CF l402287E9
l402287CF:
	a5 = Mem0[a12 + 0x00000200:word32]
	a6 = 1
	a5 = a5 & a14
	a5 = a5 | a6
	Mem0[a12 + 0x00000200:word32] = a5
	a0 = 0x40202688
	v33 = a0
	a0 = 0x402287E9
	call v33 (retsize: 0;)
	// succ:  l402287E9
l402287E9:
	a2 = 1
	a0 = 0x402287EE
	call fn40228DF8 (retsize: 0;)
	goto l402686CF
	// succ:  l402686CF
l402287F4:
	v48 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v48
	branch a2 != 0x00000000 l40228821
	// succ:  l402287FA l40228821
l402287FA:
	a0 = 0x40202680
	v49 = a0
	a0 = 0x40228800
	call v49 (retsize: 0;)
	// succ:  l40228800
l40228800:
	a7 = Mem0[a12 + 0x00000200:word32]
	a7 = a7 & a14
	Mem0[a12 + 0x00000200:word32] = a7
	a6 = Mem0[a12 + 0x00000200:word32]
	branch (a6 & 0x00000001) != 0x00000000 l40228800
	// succ:  l40228818 l40228800
l40228818:
	a0 = Mem0[a1 + 0x00000000:word32]
	v50 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v50
	a0 = Mem0[a0 + 0x00000000:word32]
	// succ:  l40228821
l40228821:
	a4 = 0x40228674
	a4 = a0 + a4
	v51 = Mem0[a4 + 0x00000000:byte]
	a3 = (uint32) v51
	a3 = a3 - 1
	Mem0[a4:byte] = a3
	branch a2 != 0x00000000 l4022884A
	// succ:  l40228830 l4022884A
l40228830:
	a5 = Mem0[a12 + 0x00000200:word32]
	a6 = 1
	a5 = a5 & a14
	a5 = a5 | a6
	Mem0[a12 + 0x00000200:word32] = a5
	a0 = 0x40202688
	v52 = a0
	a0 = 0x4022884A
	call v52 (retsize: 0;)
	// succ:  l4022884A
l4022884A:
	a0 = 0x4022884D
	call fn40228F8C (retsize: 0;)
	goto l402686CF
	// succ:  l402686CF
l40228850:
	v39 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v39
	branch a2 != 0x00000000 l4022887D
	// succ:  l40228856 l4022887D
l40228856:
	a0 = 0x40202680
	v40 = a0
	a0 = 0x4022885C
	call v40 (retsize: 0;)
	// succ:  l4022885C
l4022885C:
	a7 = Mem0[a12 + 0x00000200:word32]
	a7 = a7 & a14
	Mem0[a12 + 0x00000200:word32] = a7
	a6 = Mem0[a12 + 0x00000200:word32]
	branch (a6 & 0x00000001) != 0x00000000 l4022885C
	// succ:  l40228874 l4022885C
l40228874:
	a0 = Mem0[a1 + 0x00000000:word32]
	v41 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v41
	a0 = Mem0[a0 + 0x00000000:word32]
	// succ:  l4022887D
l4022887D:
	a4 = 0x40228674
	a4 = a0 + a4
	v42 = Mem0[a4 + 0x00000000:byte]
	a3 = (uint32) v42
	a3 = a3 - 1
	Mem0[a4:byte] = a3
	branch a2 != 0x00000000 l402288A6
	// succ:  l4022888C l402288A6
l4022888C:
	a5 = Mem0[a12 + 0x00000200:word32]
	a6 = 1
	a5 = a5 & a14
	a5 = a5 | a6
	Mem0[a12 + 0x00000200:word32] = a5
	a0 = 0x40202688
	v43 = a0
	a0 = 0x402288A6
	call v43 (retsize: 0;)
	// succ:  l402288A6
l402288A6:
	a0 = 0x402288A9
	call fn40327C98 (retsize: 0;)
	goto l402686CF
	// succ:  l402686CF
l402288AC:
	v36 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v36
	branch a2 != 0x00000000 l402288D6
	// succ:  l402288B1 l402288D6
l402288B1:
	a0 = 0x40202680
	v37 = a0
	a0 = 0x402288B7
	call v37 (retsize: 0;)
	// succ:  l402288B7
l402288B7:
	a7 = Mem0[a12 + 0x00000200:word32]
	a7 = a7 & a14
	Mem0[a12 + 0x00000200:word32] = a7
	a6 = Mem0[a12 + 0x00000200:word32]
	branch (a6 & 0x00000001) != 0x00000000 l402288B7
	// succ:  l402288CF l402288B7
l402288CF:
	a0 = Mem0[a1 + 0x00000000:word32]
	v38 = Mem0[a15 + 0x00000000:byte]
	a2 = (uint32) v38
	a0 = Mem0[a0 + 0x00000000:word32]
	// succ:  l402288D6
l402288D6:
	a4 = 0x40228674
	a4 = a0 + a4
	v44 = Mem0[a4 + 0x00000000:byte]
	a3 = (uint32) v44
	a3 = a3 - 1
	Mem0[a4:byte] = a3
	branch a2 != 0x00000000 l402286CF
	// succ:  l402288E6 l402286CF
l402288E6:
	a5 = Mem0[a12 + 0x00000200:word32]
	a6 = 1
	a5 = a5 & a14
	a5 = a5 | a6
	Mem0[a12 + 0x00000200:word32] = a5
	a0 = 0x40202688
	v45 = a0
	a0 = 0x40228900
	call v45 (retsize: 0;)
	goto l402686CF
	// succ:  l402686CF
l40228903:
	a2 = Mem0[a2 + 0x00000004:word32]
	a0 = 0x40228908
	call fn40328620 (retsize: 0;)
	goto l402686CF
	// succ:  l402686CF
l4022890B:
	a7 = 0x40228674
	a7 = a0 + a7
	v46 = Mem0[a7 + 0x00000000:byte]
	a6 = (uint32) v46
	a6 = a6 - 1
	Mem0[a7:byte] = a6
	a0 = 0x4022867C
	v47 = a0
	a0 = 0x4022891E
	call v47 (retsize: 0;)
	goto l402686CF
	// succ:  l402686CF
l402686A6:
l402686CF:
sdk_ppTask_exit:


// sdk_ppTxPkt
// Return size: 0
void sdk_ppTxPkt()
sdk_ppTxPkt_entry:
	// succ:  l40228A28
l40228A28:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	a0 = Mem0[a2 + 0x00000020:word32]
	a12 = a2
	v10 = Mem0[a0 + 0x00000006:byte]
	a3 = (uint32) v10
	v11 = Mem0[a0 + 0x00000004:byte]
	a2 = (uint32) v11
	a3 = a3 >>u 0x00000004 & 0x00000007
	a2 = a2 & 0x0000000F
	branch a2 == 0x00000000 l40228A5E
	// succ:  l40228A47 l40228A5E
l40228A47:
	branch a2 == 3 l40228A5E
	// succ:  l40228A4A l40228A5E
l40228A4A:
	branch a2 < 3 l40228A57
	// succ:  l40228A4D l40228A57
l40228A4D:
	a4 = 1
	branch a2 < 6 l40228A59
	// succ:  l40228A52 l40228A59
l40228A52:
	a4 = 0
	goto l40228A59
	// succ:  l40228A59
l40228A57:
	a4 = 3
	// succ:  l40228A59
l40228A59:
	a2 = a4
	goto l40228A60
	// succ:  l40228A60
l40228A5E:
	a2 = 2
	// succ:  l40228A60
l40228A60:
	branch a2 == a3 l40228A75
	// succ:  l40228A63 l40228A75
l40228A63:
	a2 = 0x40228A08
	a3 = 0x40228A0C
	a4 = 0x0000025B
	a0 = 0x402034D0
	v13 = a0
	a0 = 0x40228A72
	call v13 (retsize: 0;)
	goto l40268A72
	// succ:  l40268A72
l40228A75:
	a2 = a12 | a12
	a0 = 0x40228A7B
	call fn40328928 (retsize: 0;)
	a2 = a12 | a12
	a0 = 0x40228A81
	call fn402294B4 (retsize: 0;)
	a15 = 0xFFFFFFE0
	a13 = 0x4021287C
	a14 = 0x4020290C
	a4 = a2 - 1
	branch a4 == 0x00000000 l40228BA9
	// succ:  l40228A8F l40228BA9
l40228A8F:
	v15 = Mem0[a14 + 0x00000000:byte]
	a5 = (uint32) v15
	branch a5 != 0x00000000 l40228AB2
	// succ:  l40228A94 l40228AB2
l40228A94:
	a0 = 0x40202680
	v16 = a0
	a0 = 0x40228A9A
	call v16 (retsize: 0;)
	// succ:  l40228A9A
l40228A9A:
	a7 = Mem0[a13 + 0x00000200:word32]
	a7 = a7 & a15
	Mem0[a13 + 0x00000200:word32] = a7
	a6 = Mem0[a13 + 0x00000200:word32]
	branch (a6 & 0x00000001) != 0x00000000 l40228A9A
	// succ:  l40228AB2 l40228A9A
l40228AB2:
	a2 = Mem0[a12 + 0x00000018:word32]
	a3 = Mem0[a12 + 0x00000020:word32]
	a0 = 0x40228A14
	v19 = a0
	a0 = 0x40228ABC
	call v19 (retsize: 0;)
	v21 = Mem0[a14 + 0x00000000:byte]
	a8 = (uint32) v21
	branch a8 != 0x00000000 l40228ADB
	// succ:  l40228AC1 l40228ADB
l40228AC1:
	a9 = Mem0[a13 + 0x00000200:word32]
	a10 = 1
	a9 = a9 & a15
	a9 = a9 | a10
	Mem0[a13 + 0x00000200:word32] = a9
	a0 = 0x40202688
	v24 = a0
	a0 = 0x40228ADB
	call v24 (retsize: 0;)
	// succ:  l40228ADB
l40228ADB:
	a2 = a12
	a0 = 0x40228A18
	v31 = a0
	a0 = 0x40228AE3
	call v31 (retsize: 0;)
	a2 = a12
	a0 = 0x40228A1C
	v32 = a0
	a0 = 0x40228AEB
	call v32 (retsize: 0;)
	a5 = 0
	a4 = 0x40228494
	branch a2 != 0x00000000 l40228B72
	// succ:  l40228AF3 l40228B72
l40228AF3:
	v33 = Mem0[a14 + 0x00000000:byte]
	a10 = (uint32) v33
	branch a10 != 0x00000000 l40228B1B
	// succ:  l40228AF8 l40228B1B
l40228AF8:
	a0 = 0x40202680
	v34 = a0
	a0 = 0x40228AFE
	call v34 (retsize: 0;)
	// succ:  l40228AFE
l40228AFE:
	a0 = Mem0[a13 + 0x00000200:word32]
	a0 = a0 & a15
	Mem0[a13 + 0x00000200:word32] = a0
	a11 = Mem0[a13 + 0x00000200:word32]
	branch (a11 & 0x00000001) != 0x00000000 l40228AFE
	// succ:  l40228B16 l40228AFE
l40228B16:
	a4 = 0x40228494
	a5 = 0
	// succ:  l40228B1B
l40228B1B:
	a0 = Mem0[a12 + 0x00000020:word32]
	Mem0[a12 + 0x0000001C:word32] = a5
	v35 = Mem0[a0 + 0x00000000:byte]
	a8 = (uint32) v35
	a6 = Mem0[a4 + 0x0000000C:word32]
	a8 = a8 >>u 0x00000002 & 0x0000000F
	a8 = a8 << 27
	a8 = a6 + a8
	a8 = Mem0[a8 + 0x0000001C:word32]
	Mem0[a8:word32] = a12
	v36 = Mem0[a0 + 0x00000000:byte]
	a7 = (uint32) v36
	a3 = a12 + 28
	a7 = a7 >>u 0x00000002 & 0x0000000F
	a7 = a7 << 27
	a6 = a6 + a7
	Mem0[a6 + 0x0000001C:word32] = a3
	v37 = Mem0[a14 + 0x00000000:byte]
	a2 = (uint32) v37
	branch a2 != 0x00000000 l40228B61
	// succ:  l40228B45 l40228B61
l40228B45:
	a9 = Mem0[a13 + 0x00000200:word32]
	a10 = 1
	a9 = a9 & a15
	a9 = a9 | a10
	Mem0[a13 + 0x00000200:word32] = a9
	a0 = 0x40202688
	v38 = a0
	a0 = 0x40228B5F
	call v38 (retsize: 0;)
	a0 = Mem0[a12 + 0x00000020:word32]
	// succ:  l40228B61
l40228B61:
	v41 = Mem0[a0 + 0x00000006:byte]
	a2 = (uint32) v41
	a3 = 0
	a2 = a2 >>u 0x00000004 & 0x00000007
	a0 = 0x40228A20
	v42 = a0
	a0 = 0x40228B6F
	call v42 (retsize: 0;)
	goto l40228BF5
	// succ:  l40228BF5
l40228B72:
	branch a2 != 1 l40228B9D
	// succ:  l40228B75 l40228B9D
l40228B75:
	a6 = Mem0[a12 + 0x00000020:word32]
	Mem0[a12 + 0x0000001C:word32] = a5
	v39 = Mem0[a6 + 0x00000000:byte]
	a8 = (uint32) v39
	a7 = Mem0[a4 + 0x0000000C:word32]
	a8 = a8 >>u 0x00000001 & 0x00000001
	a8 = a7 + a8 * 0x00000008
	a8 = Mem0[a8 + 0x0000011C:word32]
	Mem0[a8:word32] = a12
	v40 = Mem0[a6 + 0x00000000:byte]
	a6 = (uint32) v40
	a3 = a12 + 28
	a6 = a6 >>u 0x00000001 & 0x00000001
	a6 = a7 + a6 * 0x00000008
	Mem0[a6 + 0x0000011C:word32] = a3
	// succ:  l40228B98
l40228B98:
	a2 = 0
	goto l40228BF5
	// succ:  l40228BF5
l40228B9D:
	branch a2 != 2 l40228B98
	// succ:  l40228BA0 l40228B98
l40228BA0:
	a2 = 0x40228A10
	a0 = 0x402034D0
	v43 = a0
	a0 = 0x40228BA9
	call v43 (retsize: 0;)
	// succ:  l40228BA9
l40228BA9:
	v25 = Mem0[a14 + 0x00000000:byte]
	a9 = (uint32) v25
	branch a9 != 0x00000000 l40228BCC
	// succ:  l40228BAE l40228BCC
l40228BAE:
	a0 = 0x40202680
	v26 = a0
	a0 = 0x40228BB4
	call v26 (retsize: 0;)
	// succ:  l40228BB4
l40228BB4:
	a11 = Mem0[a13 + 0x00000200:word32]
	a11 = a11 & a15
	Mem0[a13 + 0x00000200:word32] = a11
	a10 = Mem0[a13 + 0x00000200:word32]
	branch (a10 & 0x00000001) != 0x00000000 l40228BB4
	// succ:  l40228BCC l40228BB4
l40228BCC:
	a2 = a12
	a0 = 0x40228A24
	v28 = a0
	a0 = 0x40228BD4
	call v28 (retsize: 0;)
	v29 = Mem0[a14 + 0x00000000:byte]
	a12 = (uint32) v29
	branch a12 != 0x00000000 l40228BF3
	// succ:  l40228BD9 l40228BF3
l40228BD9:
	a14 = Mem0[a13 + 0x00000200:word32]
	a0 = 1
	a14 = a14 & a15
	a14 = a14 | a0
	Mem0[a13 + 0x00000200:word32] = a14
	a0 = 0x40202688
	v30 = a0
	a0 = 0x40228BF3
	call v30 (retsize: 0;)
	// succ:  l40228BF3
l40228BF3:
	a2 = 1
	// succ:  l40228BF5
l40228BF5:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_ppTxPkt_exit
l40268A72:
sdk_ppTxPkt_exit:


// sdk_ppProcessWaitQ
// Return size: 0
void sdk_ppProcessWaitQ()
sdk_ppProcessWaitQ_entry:
	// succ:  l40228C04
l40228C04:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4022867C
	v4 = a0
	a0 = 0x40228C0F
	call v4 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ppProcessWaitQ_exit
sdk_ppProcessWaitQ_exit:


// sdk_ppRegisterTxCallback
// Return size: 0
void sdk_ppRegisterTxCallback()
sdk_ppRegisterTxCallback_entry:
	// succ:  l40228C18
l40228C18:
	a1 = fp
	a7 = 0x40228494
	a8 = 1
	a7 = Mem0[a7 + 0x0000000C:word32]
	a6 = 0x000000B8
	a6 = a7 + a6
	v7 = Mem0[a6 + 0x00000080:byte]
	a5 = (uint32) v7
	SAR = a3
	a4 = a0 >> SAR
	branch (a4 & 0x00000001) == 0x00000000 l40228C34
	// succ:  l40228C30 l40228C34
l40228C30:
	a2 = a8
	return
	// succ:  sdk_ppRegisterTxCallback_exit
l40228C34:
	SAR = 0x00000020 - a3
	a9 = a7 + a3 * 0x00000004
	a10 = a8 << SAR
	a10 = a5 | a10
	Mem0[a6 + 0x00000080:byte] = a10
	Mem0[a9 + 0x0000013C:word32] = a2
	a2 = 0
	return
	// succ:  sdk_ppRegisterTxCallback_exit
sdk_ppRegisterTxCallback_exit:


// sdk_ppRecycleRxPkt
// Return size: 0
void sdk_ppRecycleRxPkt()
sdk_ppRecycleRxPkt_entry:
	// succ:  l40228C54
l40228C54:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	a2 = Mem0[a2 + 0x00000004:word32]
	a3 = Mem0[a12 + 0x00000010:word32]
	Mem0[a2 + 0x00000004:word32] = a3
	a0 = Mem0[a12 + 0x00000020:word32]
	v7 = Mem0[a0 + 0x00000000:uint16]
	a0 = (uint32) v7
	v9 = Mem0[a12 + 0x0000000C:uint16]
	a4 = (uint32) v9
	a0 = a0 & 0x00000FFF
	branch (a0 & 0x00000010) != 0x00000000 l40228C7C
	// succ:  l40228C71 l40228C7C
l40228C71:
	a3 = Mem0[a12 + 0x00000008:word32]
	a0 = 0x40228C4C
	v10 = a0
	a0 = 0x40228C79
	call v10 (retsize: 0;)
	goto l40228CA0
	// succ:  l40228CA0
l40228C7C:
	a3 = a4 - 1
	a3 = a3 & 0x0000FFFF
	a0 = 0x40228C50
	v11 = a0
	a0 = 0x40228C88
	call v11 (retsize: 0;)
	a3 = a2 | a2
	v12 = Mem0[a12 + 0x0000000C:uint16]
	a4 = (uint32) v12
	a5 = 0x00000000
	a4 = a4 - 1
	Mem0[a2 + 0x00000008:word32] = a5
	a2 = Mem0[a12 + 0x00000004:word32]
	a4 = a4 & 0x0000FFFF
	a0 = 0x40228C4C
	v14 = a0
	a0 = 0x40228CA0
	call v14 (retsize: 0;)
	// succ:  l40228CA0
l40228CA0:
	a2 = a12
	a3 = 7
	a0 = 0x40228CA7
	call fn403264A8 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ppRecycleRxPkt_exit
sdk_ppRecycleRxPkt_exit:


// sdk_ppCheckTxIdle
// Return size: 0
void sdk_ppCheckTxIdle()
sdk_ppCheckTxIdle_entry:
	// succ:  l40228CB4
l40228CB4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	a0 = 0x4020290C
	a14 = 0x4021287C
	branch a2 == 0x00000000 l40228CEE
	// succ:  l40228CC9 l40228CEE
l40228CC9:
	v9 = Mem0[a0 + 0x00000000:byte]
	a3 = (uint32) v9
	branch a3 != 0x00000000 l40228CEE
	// succ:  l40228CCE l40228CEE
l40228CCE:
	a0 = 0x40202680
	v10 = a0
	a0 = 0x40228CD4
	call v10 (retsize: 0;)
	a2 = -32
	// succ:  l40228CD6
l40228CD6:
	a5 = Mem0[a14 + 0x00000200:word32]
	a5 = a5 & a2
	Mem0[a14 + 0x00000200:word32] = a5
	a4 = Mem0[a14 + 0x00000200:word32]
	branch (a4 & 0x00000001) != 0x00000000 l40228CD6
	// succ:  l40228CEE l40228CD6
l40228CEE:
	a13 = 0
	// succ:  l40228CF0
l40228CF0:
	a2 = a13
	a0 = 0x40228CB0
	v13 = a0
	a0 = 0x40228CF8
	call v13 (retsize: 0;)
	branch a2 == 0x00000000 l40228D7A
	// succ:  l40228CFB l40228D7A
l40228CFB:
	a13 = a13 + 1
	a13 = a13 & 0x000000FF
	branch a13 != 4 l40228CF0
	// succ:  l40228D03 l40228CF0
l40228D03:
	a13 = 0x40228494
	a0 = Mem0[a13 + 0x0000000C:word32]
	a6 = Mem0[a0 + 0x00000000:word32]
	a5 = -a6
	a5 = a5 & a6
	a5 = __nsau(a5)
	a5 = -a5
	a5 = a5 + 31
	branch a5 < 0x00000000 l40228DAF
	// succ:  l40228D1C l40228DAF
l40228D1C:
	a2 = a5 << 27
	a2 = a0 + a2
	a7 = Mem0[a2 + 0x00000018:word32]
	branch a7 != 0x00000000 l40228D7A
	// succ:  l40228D26 l40228D7A
l40228D26:
	a3 = Mem0[a2 + 0x0000002C:word32]
	v16 = Mem0[a2 + 0x00000024:byte]
	a2 = (uint32) v16
	branch a3 != 0x00000000 l40228D7A
	// succ:  l40228D2E l40228D7A
l40228D2E:
	branch a2 == 0x00000000 l40228D47
	// succ:  l40228D30 l40228D47
l40228D30:
	branch a2 == 3 l40228D47
	// succ:  l40228D33 l40228D47
l40228D33:
	branch a2 <u 0x00000003 l40228D40
	// succ:  l40228D36 l40228D40
l40228D36:
	a4 = 1
	branch a2 <u 0x00000006 l40228D42
	// succ:  l40228D3B l40228D42
l40228D3B:
	a4 = 0
	goto l40228D42
	// succ:  l40228D42
l40228D40:
	a4 = 3
	// succ:  l40228D42
l40228D42:
	a6 = a4
	goto l40228D49
	// succ:  l40228D49
l40228D47:
	a6 = 2
	// succ:  l40228D49
l40228D49:
	a2 = 8
	a8 = a5 & 0x000000FF
	a7 = a6 & 0x000000FF
	a5 = 1
	SAR = 0x00000020 - a8
	a7 = a0 + a7 * 0x00000004
	a6 = Mem0[a7 + 0x00000004:word32]
	a8 = -1
	a5 = a5 << SAR
	a5 = a5 ^ a8
	a6 = a6 & a5
	Mem0[a7 + 0x00000004:word32] = a6
	a4 = Mem0[a0 + 0x00000000:word32]
	a3 = 0
	a4 = a4 & a5
	Mem0[a0:word32] = a4
	a0 = 0x40228A20
	v19 = a0
	a0 = 0x40228D77
	call v19 (retsize: 0;)
	goto l40268D06
	// succ:  l40268D06
l40228D7A:
	branch a12 == 0x00000000 l40228DA0
	// succ:  l40228D7C l40228DA0
l40228D7C:
	a9 = 0x4020290C
	v23 = Mem0[a9 + 0x00000000:byte]
	a9 = (uint32) v23
	branch a9 != 0x00000000 l40228DA0
	// succ:  l40228D84 l40228DA0
l40228D84:
	a10 = Mem0[a14 + 0x00000200:word32]
	a11 = -32
	a10 = a10 & a11
	a11 = 1
	a10 = a10 | a11
	Mem0[a14 + 0x00000200:word32] = a10
	a0 = 0x40202688
	v26 = a0
	a0 = 0x40228DA0
	call v26 (retsize: 0;)
	// succ:  l40228DA0
l40228DA0:
	a2 = 1
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ppCheckTxIdle_exit
l40228DAF:
	a13 = Mem0[a0 + 0x00000018:word32]
	branch a13 != 0x00000000 l40228D7A
	// succ:  l40228DB4 l40228D7A
l40228DB4:
	a2 = Mem0[a0 + 0x00000038:word32]
	branch a2 != 0x00000000 l40228D7A
	// succ:  l40228DB9 l40228D7A
l40228DB9:
	a3 = Mem0[a0 + 0x00000118:word32]
	branch a3 != 0x00000000 l40228D7A
	// succ:  l40228DBF l40228D7A
l40228DBF:
	a4 = Mem0[a0 + 0x00000120:word32]
	branch a4 != 0x00000000 l40228D7A
	// succ:  l40228DC5 l40228D7A
l40228DC5:
	branch a12 == 0x00000000 l40228DEB
	// succ:  l40228DC7 l40228DEB
l40228DC7:
	a5 = 0x4020290C
	v20 = Mem0[a5 + 0x00000000:byte]
	a5 = (uint32) v20
	branch a5 != 0x00000000 l40228DEB
	// succ:  l40228DCF l40228DEB
l40228DCF:
	a6 = Mem0[a14 + 0x00000200:word32]
	a7 = -32
	a6 = a6 & a7
	a7 = 1
	a6 = a6 | a7
	Mem0[a14 + 0x00000200:word32] = a6
	a0 = 0x40202688
	v21 = a0
	a0 = 0x40228DEB
	call v21 (retsize: 0;)
	// succ:  l40228DEB
l40228DEB:
	a2 = 0
	goto l40268DA2
	// succ:  l40268DA2
l40268D06:
l40268DA2:
sdk_ppCheckTxIdle_exit:


// fn40228DF8
// Return size: 0
void fn40228DF8()
fn40228DF8_entry:
	// succ:  l40228DF8
l40228DF8:
	a1 = fp
	a9 = 0
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000014:word32] = a15
	Mem0[a1 + 0x00000018:word32] = a9
	a15 = -1
	a14 = 1
	// succ:  l40228E0D
l40228E0D:
	a0 = 0x40228E10
	call fn40229294 (retsize: 0;)
	branch a2 == 0x00000000 l40228F5F
	// succ:  l40228E13 l40228F5F
l40228E13:
	a5 = 0x000000B8
	a13 = Mem0[a2 + 0x00000020:word32]
	a0 = 0x40228494
	v11 = Mem0[a13 + 0x0000000E:byte]
	a13 = (uint32) v11
	Mem0[a1:word32] = a2
	a12 = -a13
	a12 = a12 & a13
	a12 = __nsau(a12)
	a12 = -a12
	a12 = a12 + 31
	branch a12 < 0x00000000 l40228E62
	// succ:  l40228E32 l40228E62
l40228E32:
	a6 = Mem0[a0 + 0x0000000C:word32]
	a3 = a6 + a5
	v14 = Mem0[a3 + 0x00000080:byte]
	a3 = (uint32) v14
	SAR = a12
	a3 = a3 >> SAR
	branch (a3 & 0x00000001) == 0x00000000 l40228E53
	// succ:  l40228E42 l40228E53
l40228E42:
	a0 = a6 + a12 * 0x00000004
	a0 = Mem0[a0 + 0x0000013C:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	v16 = a0
	a0 = 0x40228E4D
	call v16 (retsize: 0;)
	a0 = 0x40228494
	a5 = 0x000000B8
	// succ:  l40228E53
l40228E53:
	SAR = 0x00000020 - a12
	a3 = a14 << SAR
	a3 = a3 ^ a15
	a13 = a13 & a3
	goto l40268E20
	// succ:  l40268E20
l40228E62:
	a5 = Mem0[a1 + 0x00000000:word32]
	a5 = Mem0[a5 + 0x00000020:word32]
	a4 = Mem0[a5 + 0x00000000:word32]
	v18 = Mem0[a5 + 0x00000004:byte]
	a6 = (uint32) v18
	a0 = a4 >>u 6
	branch (a4 & 0x10000000) != 0x00000000 l40228EA6
	// succ:  l40228E74 l40228EA6
l40228E74:
	a5 = 0x40228DF0
	a3 = 0x40228DF0
	v19 = Mem0[a5 + 0x00000000:byte]
	a5 = (uint32) v19
	a6 = a6 >>u 4
	a5 = a5 + a6
	a5 = a5 & 0x000000FF
	branch a5 <u 0x00000005 l40228EA3
	// succ:  l40228E88 l40228EA3
l40228E88:
	a2 = 1
	a3 = 0
	a7 = 0x40228DF0
	a6 = 0
	Mem0[a7:byte] = a6
	a0 = 0x40228E97
	call fn403217FC (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000020:word32]
	a0 = Mem0[a0 + 0x00000000:word32]
	a0 = a0 >>u 6
	goto l40228EA6
	// succ:  l40228EA6
l40228EA3:
	Mem0[a3:byte] = a5
	// succ:  l40228EA6
l40228EA6:
	branch (a0 & 0x00002000) == 0x00000000 l40228EC3
	// succ:  l40228EA9 l40228EC3
l40228EA9:
	a2 = Mem0[a1 + 0x00000000:word32]
	a2 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x40228EB2
	call fn4030C0EC (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000020:word32]
	a3 = 1
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a1 + 0x00000018:word32] = a3
	a0 = a0 >>u 6
	goto l40228ED6
	// succ:  l40228ED6
l40228EC3:
	branch (a0 & 0x00004000) != 0x00000000 l40228EC9
	// succ:  l40228EC6 l40228EC9
l40228EC6:
	goto l40228F52
	// succ:  l40228F52
l40228EC9:
	a3 = 4
	Mem0[a1 + 0x00000018:word32] = a3
	// succ:  l40228ED6
l40228ED6:
	branch (a0 & 0x00800000) == 0x00000000 l40228F45
	// succ:  l40228ED9 l40228F45
l40228ED9:
	a7 = Mem0[a1 + 0x00000000:word32]
	v22 = Mem0[a7 + 0x00000016:uint16]
	a8 = (uint32) v22
	a8 = a8 - 4
	Mem0[a7 + 0x00000016:word16] = a8
	a7 = Mem0[a7 + 0x00000008:word32]
	v23 = Mem0[a7 + 0x00000002:uint16]
	a8 = (uint32) v23
	a8 = a8 << 16
	v24 = Mem0[a7 + 0x00000000:uint16]
	a9 = (uint32) v24
	a8 = a8 | a9
	a9 = 0x40203740
	a8 = a8 & a9
	a8 = a8 >>u 12
	a8 = a8 - 4
	a8 = a8 & 0x00000FFF
	a8 = a8 << 20
	v25 = Mem0[a7 + 0x00000002:uint16]
	a6 = (uint32) v25
	a6 = a6 << 16
	v26 = Mem0[a7 + 0x00000000:uint16]
	a9 = (uint32) v26
	a6 = a6 | a9
	a9 = 0x40216FE4
	a6 = a6 & a9
	a6 = a6 | a8
	Mem0[a7:word16] = a6
	a6 = a6 >>u 0x00000010 & 0x0000FFFF
	a5 = 0x40228DF4
	Mem0[a7 + 0x00000002:word16] = a6
	v27 = Mem0[a5 + 0x00000000:byte]
	a5 = (uint32) v27
	branch a5 == 0x00000000 l40228E0D
	// succ:  l40228F3D l40228E0D
l40228F3D:
	a10 = 0x40228DF4
	a9 = 0
	Mem0[a10:byte] = a9
	// succ:  l40228F45
l40228F45:
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = Mem0[a1 + 0x00000018:word32]
	a0 = 0x40228F4C
	call fn403264A8 (retsize: 0;)
	goto l40268E0D
	// succ:  l40268E0D
l40228F52:
	branch (a0 & 0x00008000) != 0x00000000 l40228F58
	// succ:  l40228F55 l40228F58
l40228F55:
	goto l40268ED0
	// succ:  l40268ED0
l40228F58:
	a11 = 5
	Mem0[a1 + 0x00000018:word32] = a11
	goto l40268ED6
	// succ:  l40268ED6
l40228F5F:
	a2 = 0x00000001
	a0 = 0x40228F65
	call fn40328CB4 (retsize: 0;)
	a0 = 0x402035F0
	a12 = Mem0[a0 + 0x0000001C:word32]
	branch (a12 & 0x00004000) == 0x00000000 l40228F76
	// succ:  l40228F6E l40228F76
l40228F6E:
	a2 = Mem0[a0 + 0x00000004:word32]
	a2 = a2 + 4
	a0 = 0x40228F76
	call fn40319204 (retsize: 0;)
	// succ:  l40228F76
l40228F76:
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 32
	return
	// succ:  fn40228DF8_exit
l40268E0D:
l40268E20:
l40268ED0:
l40268ED6:
fn40228DF8_exit:


// fn40228F8C
// Return size: 0
void fn40228F8C()
fn40228F8C_entry:
	// succ:  l40228F8C
l40228F8C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1:word32] = a0
	a14 = 0x000000F5
	goto l40228FA0
	// succ:  l40228FA0
l40228F9D:
	a0 = 0x40228FA0
	call fn40328C54 (retsize: 0;)
	// succ:  l40228FA0
l40228FA0:
	a0 = 0x40228FA3
	call fn40229318 (retsize: 0;)
	a12 = a2 | a2
	branch a2 == 0x00000000 l40229030
	// succ:  l40228FA9 l40229030
l40228FA9:
	a13 = Mem0[a2 + 0x00000010:word32]
	a6 = Mem0[a2 + 0x00000004:word32]
	a5 = a13 + 12
	Mem0[a6 + 0x00000004:word32] = a5
	v10 = Mem0[a13 + 0x00000008:byte]
	a0 = (uint32) v10
	branch a0 == 0x00000000 l40228FBB
	// succ:  l40228FB8 l40228FBB
l40228FB8:
	branch a0 != a14 l40228F9D
	// succ:  l40228FBB l40228F9D
l40228FBB:
	a2 = a12
	a3 = a13
	a0 = 0x40228FC2
	call fn40229048 (retsize: 0;)
	branch a2 != 0x00000000 l40228FA0
	// succ:  l40228FC5 l40228FA0
l40228FC5:
	v12 = Mem0[a13 + 0x00000003:byte]
	a0 = (uint32) v12
	a9 = 0x402131CC
	branch (a0 & 0x00000010) != 0x00000000 l40228FD1
	// succ:  l40228FCE l40228FD1
l40228FCE:
	branch (a0 & 0x00000040) == 0x00000000 l40228FD6
	// succ:  l40228FD1 l40228FD6
l40228FD1:
	a8 = a0 >>u 7
	branch a8 == 0x00000000 l40228FDC
	// succ:  l40228FD6 l40228FDC
l40228FD6:
	v15 = Mem0[a9 + 0x00000054:byte]
	a9 = (uint32) v15
	branch a9 != 1 l40228FF9
	// succ:  l40228FDC l40228FF9
l40228FDC:
	a3 = a12 | a12
	a5 = 0x00000000
	a4 = Mem0[a12 + 0x00000010:word32]
	a2 = 0x402035F0
	v17 = Mem0[a4 + 0x00000000:byte]
	a4 = (uint32) v17
	a2 = Mem0[a2 + 0x00000010:word32]
	a4 = a4 << 8
	a4 = a4 >> 24
	a0 = 0x40228FF6
	call fn40319AD8 (retsize: 0;)
	v18 = Mem0[a13 + 0x00000003:byte]
	a0 = (uint32) v18
	// succ:  l40228FF9
l40228FF9:
	branch (a0 & 0x00000020) != 0x00000000 l40229002
	// succ:  l40228FFC l40229002
l40228FFC:
	a3 = a0 >>u 7
	branch a3 == 0x00000000 l40228FA0
	// succ:  l40229002 l40228FA0
l40229002:
	a4 = 0x40228F88
	v19 = Mem0[a4 + 0x00000000:byte]
	a4 = (uint32) v19
	branch a4 != 1 l40229013
	// succ:  l4022900B l40229013
l4022900B:
	a2 = a12
	a0 = 0x40229010
	call fn40328C54 (retsize: 0;)
	goto l40268FA0
	// succ:  l40268FA0
l40229013:
	a3 = a12 | a12
	a5 = 0x00000000
	a4 = Mem0[a12 + 0x00000010:word32]
	a2 = 0x402035F0
	v20 = Mem0[a4 + 0x00000000:byte]
	a4 = (uint32) v20
	a2 = Mem0[a2 + 0x00000014:word32]
	a4 = a4 << 8
	a4 = a4 >> 24
	a0 = 0x4022902D
	call fn40315174 (retsize: 0;)
	goto l40268FA0
	// succ:  l40268FA0
l40229030:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn40228F8C_exit
l40268FA0:
fn40228F8C_exit:


// fn40229048
// Return size: 0
void fn40229048()
fn40229048_entry:
	// succ:  l40229048
l40229048:
	a1 = fp
	a5 = 0x000000F0
	a1 = a1 - 48
	Mem0[a1 + 0x00000010:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a2
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x00000014:word32] = a13
	a15 = 12
	a13 = a3
	a14 = Mem0[a2 + 0x00000004:word32]
	a0 = 0x40228494
	a14 = Mem0[a14 + 0x00000004:word32]
	v11 = Mem0[a0 + 0x00000002:byte]
	a3 = (uint32) v11
	v13 = Mem0[a14 + 0x00000000:byte]
	a4 = (uint32) v13
	a3 = a3 << 8
	a15 = a4 & a15
	a3 = a3 >> 24
	a4 = a4 & a5
	Mem0[a1 + 0x00000020:word32] = a4
	branch a3 < 1 l4022908D
	// succ:  l4022907F l4022908D
l4022907F:
	a0 = 0x40229082
	call fn4031E4C8 (retsize: 0;)
	a0 = 0x40228494
	a3 = a2 + 2
	a3 = a3 >> 2
	Mem0[a0 + 0x00000002:byte] = a3
	// succ:  l4022908D
l4022908D:
	Mem0[a13 + 0x0000000B:byte] = a3
	v14 = Mem0[a13 + 0x00000003:byte]
	a3 = (uint32) v14
	branch (a3 & 0x00000010) != 0x00000000 l4022909C
	// succ:  l40229096 l4022909C
l40229096:
	a4 = a3 >>u 0x00000006 & 0x00000001
	branch a4 == 0x00000000 l402291B6
	// succ:  l4022909C l402291B6
l4022909C:
	branch (a3 & 0x00000020) != 0x00000000 l402290A9
	// succ:  l4022909F l402290A9
l4022909F:
	a6 = a3 >>u 7
	branch a6 != 0x00000000 l402290A9
	// succ:  l402290A4 l402290A9
l402290A4:
	a12 = 0
	goto l402290AB
	// succ:  l402290AB
l402290A9:
	a12 = 2
	// succ:  l402290AB
l402290AB:
	branch a15 == 8 l402290B1
	// succ:  l402290AE l402290B1
l402290AE:
	goto l4022912C
	// succ:  l4022912C
l402290B1:
	a3 = 0x40228450
	v20 = Mem0[a3 + 0x00000031:byte]
	a7 = (uint32) v20
	branch a7 != 1 l402290BF
	// succ:  l402290BA l402290BF
l402290BA:
	a8 = 0
	Mem0[a3 + 0x00000031:byte] = a8
	// succ:  l402290BF
l402290BF:
	a2 = 0x402285A0
	a0 = 0x402290C5
	call fn40304430 (retsize: 0;)
	a0 = 0x402290C8
	call fn40327FBC (retsize: 0;)
	branch a2 == 0x00000000 l402290E5
	// succ:  l402290CA l402290E5
l402290CA:
	a0 = 0x402290CD
	call fn403280F0 (retsize: 0;)
	branch a2 == 0x00000000 l402290E5
	// succ:  l402290CF l402290E5
l402290CF:
	a3 = 0x40228494
	a5 = 0x40228450
	a4 = 1
	a2 = a5 + 52
	Mem0[a5 + 0x00000031:byte] = a4
	v22 = Mem0[a3 + 0x00000008:uint16]
	a3 = (uint32) v22
	a4 = 0
	a0 = 0x402290E5
	call fn4030438C (retsize: 0;)
	// succ:  l402290E5
l402290E5:
	branch a12 >=u 0x00000002 l4022915A
	// succ:  l402290E8 l4022915A
l402290E8:
	a2 = a12 | a12
	a3 = a14 + 10
	Mem0[a1 + 0x00000008:word32] = a3
	a0 = 0x402290F3
	call sdk_rc_get_trc (retsize: 0;)
	a6 = Mem0[a1 + 0x00000024:word32]
	a3 = a13
	Mem0[a6 + 0x00000018:word32] = a2
	a0 = 0x40229040
	v25 = a0
	a0 = 0x402290FF
	call v25 (retsize: 0;)
	v26 = Mem0[a13 + 0x00000000:byte]
	a7 = (uint32) v26
	a2 = a12
	a7 = a7 + 3
	Mem0[a13:byte] = a7
	a0 = 0x4022910C
	call fn403268E4 (retsize: 0;)
	branch a2 == 0x00000000 l402291A2
	// succ:  l4022910F l402291A2
l4022910F:
	branch a15 != 0x00000000 l402291A2
	// succ:  l40229112 l402291A2
l40229112:
	a2 = a14
	a0 = 0x40229044
	v27 = a0
	a0 = 0x4022911A
	call v27 (retsize: 0;)
	v28 = Mem0[a13 + 0x00000001:byte]
	a8 = (uint32) v28
	a8 = a8 >>u 6
	branch a8 != 0x00000000 l4022916B
	// succ:  l40229123 l4022916B
l40229123:
	v29 = Mem0[a13 + 0x00000002:uint16]
	a0 = (uint32) v29
	a0 = a0 & 0x00000FFF
	goto l4022917A
	// succ:  l4022917A
l4022912C:
	branch a15 != 0x00000000 l402290E5
	// succ:  l4022912F l402290E5
l4022912F:
	a2 = Mem0[a1 + 0x00000020:word32]
	branch a2 != 128 l402290E5
	// succ:  l40229134 l402290E5
l40229134:
	a2 = a14
	a0 = 0x40229044
	v16 = a0
	a0 = 0x4022913C
	call v16 (retsize: 0;)
	v17 = Mem0[a13 + 0x00000001:byte]
	a3 = (uint32) v17
	Mem0[a1 + 0x00000004:word32] = a2
	a3 = a3 >>u 6
	branch a3 != 0x00000000 l402291C8
	// succ:  l40229147 l402291C8
l40229147:
	v18 = Mem0[a13 + 0x00000002:uint16]
	a4 = (uint32) v18
	a4 = a4 & 0x00000FFF
	Mem0[a1:word32] = a4
	goto l402291DA
	// succ:  l402291DA
l40229152:
	a2 = a12
	a1 = a1 | a1
	a0 = 0x4022915A
	call fn40326900 (retsize: 0;)
	// succ:  l4022915A
l4022915A:
	a2 = 0
	a12 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000018:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 48
	return
	// succ:  fn40229048_exit
l4022916B:
	v30 = Mem0[a13 + 0x00000006:uint16]
	a0 = (uint32) v30
	v31 = Mem0[a13 + 0x00000004:uint16]
	a3 = (uint32) v31
	a0 = a0 << 16
	a0 = a0 | a3
	a0 = a0 >>u 0x00000008 & 0x0000FFFF
	// succ:  l4022917A
l4022917A:
	a3 = Mem0[a1 + 0x00000020:word32]
	branch a3 == 16 l40229185
	// succ:  l40229180 l40229185
l40229180:
	a5 = 48
	branch a3 != a5 l402291A2
	// succ:  l40229185 l402291A2
l40229185:
	a3 = a0 - a2
	a2 = a14 + 24
	a3 = a3 - 4
	a3 = a3 & 0x0000FFFF
	a3 = a14 + a3
	a3 = a3 + 24
	a0 = 0x40229199
	call fn40328124 (retsize: 0;)
	branch a2 == 0x00000000 l402291A2
	// succ:  l4022919B l402291A2
l4022919B:
	a2 = a12
	a3 = Mem0[a1 + 0x00000008:word32]
	a0 = 0x402291A2
	call fn4032813C (retsize: 0;)
	// succ:  l402291A2
l402291A2:
	v32 = Mem0[a14 + 0x00000001:byte]
	a4 = (uint32) v32
	v33 = Mem0[a14 + 0x00000004:byte]
	a5 = (uint32) v33
	branch (a4 & 0x00000040) == 0x00000000 l4022915A
	// succ:  l402291AB l4022915A
l402291AB:
	branch (a5 & 0x00000001) == 0x00000000 l40229152
	// succ:  l402291AE l40229152
l402291AE:
	a2 = a12
	a0 = 0x402291B3
	call fn40326910 (retsize: 0;)
	goto l4026915A
	// succ:  l4026915A
l402291B6:
	branch (a3 & 0x00000020) != 0x00000000 l402291BE
	// succ:  l402291B9 l402291BE
l402291B9:
	a6 = a3 >>u 7
	branch a6 == 0x00000000 l402291C3
	// succ:  l402291BE l402291C3
l402291BE:
	a12 = 1
	goto l402690AB
	// succ:  l402690AB
l402291C3:
	a12 = 2
	goto l402690AB
	// succ:  l402690AB
l402291C8:
	v23 = Mem0[a13 + 0x00000006:uint16]
	a7 = (uint32) v23
	v24 = Mem0[a13 + 0x00000004:uint16]
	a8 = (uint32) v24
	a7 = a7 << 16
	a7 = a7 | a8
	a7 = a7 >>u 0x00000008 & 0x0000FFFF
	Mem0[a1:word32] = a7
	// succ:  l402291DA
l402291DA:
	a2 = a14 + 10
	a0 = 0x402291E0
	call fn4032815C (retsize: 0;)
	branch a2 == 0x00000000 l402290E5
	// succ:  l402291E3 l402290E5
l402291E3:
	a2 = Mem0[a1 + 0x00000024:word32]
	a5 = Mem0[a1 + 0x00000004:word32]
	a4 = Mem0[a1 + 0x00000000:word32]
	a3 = a14 + 24
	a4 = a4 - a5
	a4 = a4 - 4
	a4 = a4 & 0x0000FFFF
	a4 = a14 + a4
	a4 = a4 + 24
	a0 = 0x402291FD
	call fn4032757C (retsize: 0;)
	goto l402690E5
	// succ:  l402690E5
l402690AB:
l402690E5:
l4026915A:
fn40229048_exit:


// sdk_ppGetTxQFirstAvail_Locked
// Return size: 0
void sdk_ppGetTxQFirstAvail_Locked()
sdk_ppGetTxQFirstAvail_Locked_entry:
	// succ:  l40229200
l40229200:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a2 >=u 0x00000008 l4022927E
	// succ:  l40229208 l4022927E
l40229208:
	a7 = 0x40228494
	a0 = Mem0[a7 + 0x0000000C:word32]
	a5 = a2 << 27
	a0 = a0 + a5
	v8 = Mem0[a0 + 0x00000027:byte]
	a3 = (uint32) v8
	branch a3 != 0x00000000 l4022927E
	// succ:  l40229218 l4022927E
l40229218:
	a4 = 0x4020290C
	v10 = Mem0[a4 + 0x00000000:byte]
	a4 = (uint32) v10
	Mem0[a1 + 0x00000004:word32] = a5
	branch a4 != 0x00000000 l40229254
	// succ:  l40229222 l40229254
l40229222:
	a0 = 0x40202680
	v11 = a0
	a0 = 0x40229228
	call v11 (retsize: 0;)
	a2 = 0x4021287C
	a6 = -32
	a5 = 0x40228494
	a7 = Mem0[a1 + 0x00000004:word32]
	// succ:  l40229232
l40229232:
	a9 = Mem0[a2 + 0x00000200:word32]
	a9 = a9 & a6
	Mem0[a2 + 0x00000200:word32] = a9
	a8 = Mem0[a2 + 0x00000200:word32]
	branch (a8 & 0x00000001) != 0x00000000 l40229232
	// succ:  l4022924A l40229232
l4022924A:
	a4 = 0x4020290C
	a0 = Mem0[a5 + 0x0000000C:word32]
	v15 = Mem0[a4 + 0x00000000:byte]
	a4 = (uint32) v15
	a0 = a0 + a7
	// succ:  l40229254
l40229254:
	a0 = Mem0[a0 + 0x00000018:word32]
	Mem0[a1 + 0x00000008:word32] = a0
	branch a4 != 0x00000000 l40229280
	// succ:  l4022925A l40229280
l4022925A:
	a6 = 0x4021287C
	a5 = Mem0[a6 + 0x00000200:word32]
	a7 = -32
	a5 = a5 & a7
	a7 = 1
	a5 = a5 | a7
	Mem0[a6 + 0x00000200:word32] = a5
	a0 = 0x40202688
	v16 = a0
	a0 = 0x40229279
	call v16 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000008:word32]
	goto l40229280
	// succ:  l40229280
l4022927E:
	a0 = 0
	// succ:  l40229280
l40229280:
	branch a0 == 0x00000000 l4022928B
	// succ:  l40229282 l4022928B
l40229282:
	a8 = Mem0[a0 + 0x00000020:word32]
	a8 = Mem0[a8 + 0x00000000:word32]
	branch (a8 & 0x01000000) == 0x00000000 l4022928B
	// succ:  l40229289 l4022928B
l40229289:
	a0 = 0
	// succ:  l4022928B
l4022928B:
	a2 = a0
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_ppGetTxQFirstAvail_Locked_exit
sdk_ppGetTxQFirstAvail_Locked_exit:


// fn40229294
// Return size: 0
void fn40229294()
fn40229294_entry:
	// succ:  l40229294
l40229294:
	a1 = fp
	a4 = -32
	a2 = 0x4020290C
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	v7 = Mem0[a2 + 0x00000000:byte]
	a0 = (uint32) v7
	a12 = 0x4021287C
	branch a0 != 0x00000000 l402292CB
	// succ:  l402292A8 l402292CB
l402292A8:
	a0 = 0x40202680
	v8 = a0
	a0 = 0x402292AE
	call v8 (retsize: 0;)
	a4 = -32
	// succ:  l402292B0
l402292B0:
	a5 = Mem0[a12 + 0x00000200:word32]
	a5 = a5 & a4
	Mem0[a12 + 0x00000200:word32] = a5
	a3 = Mem0[a12 + 0x00000200:word32]
	branch (a3 & 0x00000001) != 0x00000000 l402292B0
	// succ:  l402292C8 l402292B0
l402292C8:
	a2 = 0x4020290C
	// succ:  l402292CB
l402292CB:
	a5 = 0x40228494
	a5 = Mem0[a5 + 0x0000000C:word32]
	a0 = Mem0[a5 + 0x00000128:word32]
	Mem0[a1 + 0x00000008:word32] = a0
	branch a0 == 0x00000000 l402292EA
	// succ:  l402292D7 l402292EA
l402292D7:
	a8 = 0
	a6 = Mem0[a0 + 0x0000001C:word32]
	Mem0[a5 + 0x00000128:word32] = a6
	branch a6 != 0x00000000 l402292E8
	// succ:  l402292E0 l402292E8
l402292E0:
	a7 = 0x00000128
	a7 = a5 + a7
	Mem0[a5 + 0x0000012C:word32] = a7
	// succ:  l402292E8
l402292E8:
	Mem0[a0 + 0x0000001C:word32] = a8
	// succ:  l402292EA
l402292EA:
	v15 = Mem0[a2 + 0x00000000:byte]
	a9 = (uint32) v15
	branch a9 != 0x00000000 l4022930B
	// succ:  l402292EF l4022930B
l402292EF:
	a10 = Mem0[a12 + 0x00000200:word32]
	a11 = 1
	a10 = a10 & a4
	a10 = a10 | a11
	Mem0[a12 + 0x00000200:word32] = a10
	a0 = 0x40202688
	v18 = a0
	a0 = 0x40229309
	call v18 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000008:word32]
	// succ:  l4022930B
l4022930B:
	a12 = Mem0[a1 + 0x00000004:word32]
	a2 = a0
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn40229294_exit
fn40229294_exit:


// fn40229318
// Return size: 0
void fn40229318()
fn40229318_entry:
	// succ:  l40229318
l40229318:
	a1 = fp
	a4 = -32
	a2 = 0x4020290C
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	v7 = Mem0[a2 + 0x00000000:byte]
	a0 = (uint32) v7
	a12 = 0x4021287C
	branch a0 != 0x00000000 l4022934F
	// succ:  l4022932C l4022934F
l4022932C:
	a0 = 0x40202680
	v8 = a0
	a0 = 0x40229332
	call v8 (retsize: 0;)
	a4 = -32
	// succ:  l40229334
l40229334:
	a5 = Mem0[a12 + 0x00000200:word32]
	a5 = a5 & a4
	Mem0[a12 + 0x00000200:word32] = a5
	a3 = Mem0[a12 + 0x00000200:word32]
	branch (a3 & 0x00000001) != 0x00000000 l40229334
	// succ:  l4022934C l40229334
l4022934C:
	a2 = 0x4020290C
	// succ:  l4022934F
l4022934F:
	a5 = 0x40228494
	a5 = Mem0[a5 + 0x0000000C:word32]
	a0 = Mem0[a5 + 0x00000130:word32]
	Mem0[a1 + 0x00000008:word32] = a0
	branch a0 == 0x00000000 l4022936E
	// succ:  l4022935B l4022936E
l4022935B:
	a8 = 0
	a6 = Mem0[a0 + 0x0000001C:word32]
	Mem0[a5 + 0x00000130:word32] = a6
	branch a6 != 0x00000000 l4022936C
	// succ:  l40229364 l4022936C
l40229364:
	a7 = 0x00000130
	a7 = a5 + a7
	Mem0[a5 + 0x00000134:word32] = a7
	// succ:  l4022936C
l4022936C:
	Mem0[a0 + 0x0000001C:word32] = a8
	// succ:  l4022936E
l4022936E:
	v15 = Mem0[a2 + 0x00000000:byte]
	a9 = (uint32) v15
	branch a9 != 0x00000000 l4022938F
	// succ:  l40229373 l4022938F
l40229373:
	a10 = Mem0[a12 + 0x00000200:word32]
	a11 = 1
	a10 = a10 & a4
	a10 = a10 | a11
	Mem0[a12 + 0x00000200:word32] = a10
	a0 = 0x40202688
	v18 = a0
	a0 = 0x4022938D
	call v18 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000008:word32]
	// succ:  l4022938F
l4022938F:
	a12 = Mem0[a1 + 0x00000004:word32]
	a2 = a0
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn40229318_exit
fn40229318_exit:


// sdk_pp_attach
// Return size: 0
void sdk_pp_attach()
sdk_pp_attach_entry:
	// succ:  l402293B4
l402293B4:
	a1 = fp
	a4 = 0
	a6 = 1
	a1 = a1 - 32
	a3 = 0x40228494
	Mem0[a1 + 0x00000014:word32] = a0
	a0 = 0
	a3 = Mem0[a3 + 0x0000000C:word32]
	// succ:  l402293C4
l402293C4:
	a2 = a0 << 27
	a0 = a0 + 1
	a2 = a3 + a2
	Mem0[a2 + 0x00000018:word32] = a4
	Mem0[a2 + 0x00000027:byte] = a4
	a0 = a0 & 0x000000FF
	a5 = a2 + 24
	Mem0[a2 + 0x0000001C:word32] = a5
	branch a0 != 8 l402293C4
	// succ:  l402293DB l402293C4
l402293DB:
	a0 = 0
	a5 = 7
	// succ:  l402293DF
l402293DF:
	a2 = a0 << 27
	a0 = a0 + 1
	a2 = a3 + a2
	Mem0[a2 + 0x00000027:byte] = a6
	Mem0[a2 + 0x00000024:byte] = a5
	a0 = a0 & 0x000000FF
	branch a0 != 2 l402293DF
	// succ:  l402293F2 l402293DF
l402293F2:
	Mem0[a3:word32] = a4
	a0 = 0
	// succ:  l402293F6
l402293F6:
	a6 = a0 + a0 * 0x00000002
	a5 = a3 + a0 * 0x00000004
	Mem0[a5 + 0x00000004:word32] = a4
	a6 = a6 << 31
	a5 = a0 + a3
	a2 = a6 + 3
	branch a6 < 0x00000000 l40229408
	// succ:  l40229405_1 l40229408
l40229405_1:
	a2 = a6
	// succ:  l40229408
l40229408:
	a0 = a0 + 1
	a0 = a0 & 0x000000FF
	a2 = a2 >> 2
	a2 = a2 + 2
	Mem0[a5 + 0x00000014:byte] = a2
	branch a0 != 4 l402293F6
	// succ:  l40229418 l402293F6
l40229418:
	a0 = 0
	a6 = 0x00000118
	// succ:  l4022941D
l4022941D:
	a2 = a3 + a0 * 0x00000008
	Mem0[a2 + 0x00000118:word32] = a4
	a0 = a0 + 1
	a5 = a2 + a6
	Mem0[a2 + 0x0000011C:word32] = a5
	a0 = a0 & 0x000000FF
	branch a0 != 2 l4022941D
	// succ:  l40229431 l4022941D
l40229431:
	Mem0[a3 + 0x00000130:word32] = a4
	Mem0[a3 + 0x00000128:word32] = a4
	a9 = 0x00000130
	a8 = 0x00000128
	a8 = a3 + a8
	a9 = a3 + a9
	Mem0[a3 + 0x00000134:word32] = a9
	Mem0[a3 + 0x0000012C:word32] = a8
	a6 = 0x4022939C
	a7 = 0x40212EE8
	Mem0[a7 + 0x000003F8:word32] = a6
	a0 = 0x40229456
	call fn40326708 (retsize: 0;)
	a2 = 0x402293A0
	a3 = 0x402293A4
	a4 = 0x00000200
	a5 = 0
	a6 = 14
	a7 = a1 + 16
	a10 = 0
	Mem0[a1:word32] = a10
	Mem0[a1 + 0x00000004:word32] = a10
	a0 = 0x4022946F
	call fn40302690 (retsize: 0;)
	a2 = 0x402293A8
	a3 = Mem0[a1 + 0x00000010:word32]
	a4 = 14
	a5 = 0x00000200
	a0 = 0x402034D0
	v13 = a0
	a0 = 0x4022947F
	call v13 (retsize: 0;)
	a2 = 0x40228478
	a3 = 0x402293AC
	a4 = 0
	a0 = 0x40228494
	a6 = 0x4021C308
	a5 = 0x402154A8
	v14 = Mem0[a6 + 0x0000006A:byte]
	a6 = (uint32) v14
	a11 = 0x402293B0
	v16 = (uint16) a6
	v17 = (uint16) a5
	a5 = v16 *u v17
	branch a6 == 0x00000000 l4022949C
	// succ:  l40229499_2 l4022949C
l40229499_2:
	a11 = a5
	// succ:  l4022949C
l4022949C:
	Mem0[a0 + 0x00000004:word32] = a11
	a0 = 0x402294A1
	call fn403042E8 (retsize: 0;)
	a0 = 0x402294A4
	call fn40328498 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_pp_attach_exit
sdk_pp_attach_exit:


// fn402294B4
// Return size: 0
void fn402294B4()
fn402294B4_entry:
	// succ:  l402294B4
l402294B4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = Mem0[a2 + 0x00000020:word32]
	a5 = Mem0[a2 + 0x00000018:word32]
	v6 = Mem0[a0 + 0x0000000D:byte]
	a0 = (uint32) v6
	v8 = Mem0[a2 + 0x00000016:uint16]
	a10 = (uint32) v8
	a0 = a0 & 0x0000000F
	branch a0 == 0x00000000 l402294D7
	// succ:  l402294C8 l402294D7
l402294C8:
	branch a0 == 1 l402294DC
	// succ:  l402294CB l402294DC
l402294CB:
	a3 = a0 - 2
	branch a3 == 0x00000000 l4022959A
	// succ:  l402294D1 l4022959A
l402294D1:
	a4 = a0 - 3
	branch a4 == 0x00000000 l40229600
	// succ:  l402294D7 l40229600
l402294D7:
	a0 = 4
	goto l402294DE
	// succ:  l402294DE
l402294DC:
	a0 = 8
	// succ:  l402294DE
l402294DE:
	a10 = a10 + a0
	Mem0[a2 + 0x00000016:word16] = a10
	a11 = 0x40203740
	a8 = Mem0[a2 + 0x00000008:word32]
	v14 = Mem0[a8 + 0x00000002:uint16]
	a9 = (uint32) v14
	a9 = a9 << 16
	v15 = Mem0[a8 + 0x00000000:uint16]
	a3 = (uint32) v15
	a10 = 0x40216FE4
	a9 = a9 | a3
	a9 = a9 & a11
	a9 = a9 >>u 12
	a9 = a9 + a0
	a9 = a9 & 0x00000FFF
	a9 = a9 << 20
	v17 = Mem0[a8 + 0x00000002:uint16]
	a7 = (uint32) v17
	a7 = a7 << 16
	v18 = Mem0[a8 + 0x00000000:uint16]
	a11 = (uint32) v18
	a7 = a7 | a11
	a7 = a7 & a10
	a7 = a7 | a9
	Mem0[a8:word16] = a7
	a7 = a7 >>u 0x00000010 & 0x0000FFFF
	a6 = Mem0[a2 + 0x00000020:word32]
	a3 = 64
	a6 = Mem0[a6 + 0x00000000:word32]
	Mem0[a8 + 0x00000002:word16] = a7
	branch (a6 & 0x01000000) == 0x00000000 l40229542
	// succ:  l4022953B l40229542
l4022953B:
	branch a5 != 0x00000000 l40229562
	// succ:  l4022953D l40229562
l4022953D:
	a2 = 1
	goto l4022955B
	// succ:  l4022955B
l40229542:
	a4 = 0x000000BF
	a0 = Mem0[a2 + 0x00000008:word32]
	v23 = Mem0[a0 + 0x00000003:byte]
	a11 = (uint32) v23
	a11 = a11 & a4
	a11 = a11 | a3
	Mem0[a0 + 0x00000003:byte] = a11
	a2 = 0
	// succ:  l4022955B
l4022955B:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn402294B4_exit
l40229562:
	a6 = 32
	a7 = 0x000000DF
	a4 = Mem0[a2 + 0x00000004:word32]
	v20 = Mem0[a4 + 0x00000003:byte]
	a3 = (uint32) v20
	a3 = a3 & a7
	a3 = a3 | a6
	Mem0[a4 + 0x00000003:byte] = a3
	a0 = Mem0[a2 + 0x00000020:word32]
	v21 = Mem0[a0 + 0x0000000D:byte]
	a0 = (uint32) v21
	a0 = a0 & 0x0000000F
	branch a0 == 3 l4022959F
	// succ:  l40229586 l4022959F
l40229586:
	branch a0 == 0x00000000 l4022959F
	// succ:  l40229588 l4022959F
l40229588:
	a2 = 0x40228A08
	a3 = 0x40228A0C
	a4 = 0x402294AC
	a0 = 0x402034D0
	v22 = a0
	a0 = 0x40229597
	call v22 (retsize: 0;)
	goto l40269597
	// succ:  l40269597
l4022959A:
	a0 = 16
	goto l402694DE
	// succ:  l402694DE
l4022959F:
	a4 = 0x402034B4
	v24 = Mem0[a2 + 0x00000016:uint16]
	a3 = (uint32) v24
	a2 = Mem0[a2 + 0x00000004:word32]
	a3 = a3 + a4
	a2 = Mem0[a2 + 0x00000004:word32]
	a4 = 0x40204620
	v25 = Mem0[a2 + 0x00000000:uint16]
	a0 = (uint32) v25
	a3 = a3 & 0x00000FFF
	a0 = a0 & a4
	a0 = a0 | a3
	v26 = Mem0[a2 + 0x00000002:byte]
	a3 = (uint32) v26
	Mem0[a2:word16] = a0
	v27 = Mem0[a5 + 0x00000074:byte]
	a5 = (uint32) v27
	v28 = Mem0[a2 + 0x00000001:byte]
	a6 = (uint32) v28
	a0 = a0 & 0x00000FFF
	a8 = a0 + 4
	a3 = a3 << 24
	a3 = a3 | a6
	branch a5 < a8 l402295DD
	// succ:  l402295D4 l402295DD
l402295D4:
	a0 = a5 - a0
	a0 = a0 >> 2
	goto l402295DF
	// succ:  l402295DF
l402295DD:
	a0 = 0
	// succ:  l402295DF
l402295DF:
	a5 = 0x402294B0
	a4 = a0 & 0x0000007F
	a4 = a4 << 28
	a3 = a3 & a5
	a3 = a3 | a4
	Mem0[a2 + 0x00000001:byte] = a3
	a4 = 0x000000CF
	a3 = a3 >>u 0x00000008 & 0x000000FF
	a3 = a3 & a4
	Mem0[a2 + 0x00000002:byte] = a3
	goto l40269559
	// succ:  l40269559
l40229600:
	a0 = 12
	// succ:  l402694DE
l402694DE:
l40269559:
l40269597:
fn402294B4_exit:


// sdk_RC_SetBasicRate
// Return size: 0
void sdk_RC_SetBasicRate()
sdk_RC_SetBasicRate_entry:
	// succ:  l40229854
l40229854:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x0000015F
	branch (~a2 & a0) != 0x00000000 l40229865
	// succ:  l4022985F l40229865
l4022985F:
	a0 = 0x40229862
	call fn40329670 (retsize: 0;)
	goto l40229895
	// succ:  l40229895
l40229865:
	a4 = 0x40229608
	a8 = 5
	a5 = 7
	a2 = 3
	a9 = a3 - 1
	a7 = 1
	a6 = 0
	branch a9 != 0x00000000 l40229877
	// succ:  l40229874_1 l40229877
l40229874_1:
	a6 = a7
	// succ:  l40229877
l40229877:
	branch a6 == 0x00000000 l4022987A
	// succ:  l40229877_2 l4022987A
l40229877_2:
	a2 = a5
	// succ:  l4022987A
l4022987A:
	branch a6 == 0x00000000 l4022987D
	// succ:  l4022987A_3 l4022987D
l4022987A_3:
	a7 = a8
	// succ:  l4022987D
l4022987D:
	Mem0[a4 + 0x0000005C:byte] = a7
	Mem0[a4 + 0x0000007C:byte] = a7
	Mem0[a4 + 0x00000054:byte] = a7
	Mem0[a4 + 0x00000074:byte] = a2
	Mem0[a4 + 0x0000004C:byte] = a2
	Mem0[a4 + 0x0000006C:byte] = a2
	Mem0[a4 + 0x00000044:byte] = a2
	Mem0[a4 + 0x00000064:byte] = a2
	// succ:  l40229895
l40229895:
	a2 = 0
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_RC_SetBasicRate_exit
sdk_RC_SetBasicRate_exit:


// sdk_rcUpdatePhyMode
// Return size: 0
void sdk_rcUpdatePhyMode()
sdk_rcUpdatePhyMode_entry:
	// succ:  l402298CC
l402298CC:
	a1 = fp
	a8 = 3
	a7 = 0
	a1 = a1 - 16
	a6 = 0x402298B4
	Mem0[a2 + 0x00000015:byte] = a3
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	a0 = 0x402298B8
	a12 = a2
	a2 = Mem0[a2 + 0x0000005C:word32]
	a9 = a0 - 36
	branch a2 == 0x00000000 l40229960
	// succ:  l402298EB l40229960
l402298EB:
	branch a2 == 1 l40229920
	// succ:  l402298EE l40229920
l402298EE:
	Mem0[a12 + 0x00000068:word32] = a9
	Mem0[a12 + 0x00000004:byte] = a7
	Mem0[a12 + 0x00000005:byte] = a8
	Mem0[a12 + 0x0000006C:word32] = a6
	Mem0[a12 + 0x00000060:word32] = a0
	a2 = a12
	Mem0[a12 + 0x00000064:word32] = a0
	a0 = 0x402298C8
	v11 = a0
	a0 = 0x40229908
	call v11 (retsize: 0;)
	a0 = 0x0000007F
	Mem0[a12:byte] = a0
	Mem0[a12 + 0x00000001:byte] = a0
	Mem0[a12 + 0x00000002:byte] = a0
	Mem0[a12 + 0x00000003:byte] = a0
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rcUpdatePhyMode_exit
l40229920:
	Mem0[a12 + 0x00000004:byte] = a7
	a11 = 0x402298C4
	a9 = 7
	a6 = 10
	a5 = 0x402298BC
	a10 = 0x402298C0
	Mem0[a12 + 0x0000006C:word32] = a10
	a2 = a5 - 96
	branch a4 == 0x00000000 l40229939
	// succ:  l40229936_1 l40229939
l40229936_1:
	a6 = a9
	// succ:  l40229939
l40229939:
	Mem0[a12 + 0x00000005:byte] = a6
	branch a4 != 0x00000000 l4022993F
	// succ:  l4022993C_2 l4022993F
l4022993C_2:
	a2 = a5
	// succ:  l4022993F
l4022993F:
	Mem0[a12 + 0x00000068:word32] = a2
	branch a3 >= 12 l40229972
	// succ:  l40229945 l40229972
l40229945:
	a0 = 10
	// succ:  l40229947
l40229947:
	branch a4 == 0x00000000 l4022994E
	// succ:  l40229949 l4022994E
l40229949:
	branch a0 <u 0x00000008 l4022994E
	// succ:  l4022994C l4022994E
l4022994C:
	a0 = 7
	// succ:  l4022994E
l4022994E:
	a0 = a0 + a0 * 0x00000002
	a0 = a2 + a0 * 0x00000004
	Mem0[a12 + 0x00000060:word32] = a0
	a0 = a11 - 96
	branch a4 != 0x00000000 l4022995D
	// succ:  l4022995A_1 l4022995D
l4022995A_1:
	a0 = a11
	// succ:  l4022995D
l4022995D:
	goto l402698FD
	// succ:  l402698FD
l40229960:
	Mem0[a12 + 0x00000068:word32] = a9
	Mem0[a12 + 0x00000004:byte] = a7
	Mem0[a12 + 0x00000005:byte] = a8
	Mem0[a12 + 0x0000006C:word32] = a6
	Mem0[a12 + 0x00000060:word32] = a0
	goto l402698FD
	// succ:  l402698FD
l40229972:
	a5 = 16
	branch a5 < a3 l4022997C
	// succ:  l40229977 l4022997C
l40229977:
	a0 = 5
	goto l40269947
	// succ:  l40269947
l4022997C:
	a6 = 21
	branch a6 < a3 l40229986
	// succ:  l40229981 l40229986
l40229981:
	a0 = a8
	goto l40269947
	// succ:  l40269947
l40229986:
	a0 = 2
	a8 = 30
	branch a3 < a8 l40229947
	// succ:  l4022998D l40229947
l4022998D:
	a0 = a7
	goto l40269947
	// succ:  l40269947
l402698FD:
l40269947:
sdk_rcUpdatePhyMode_exit:


// sdk_rcAttach
// Return size: 0
void sdk_rcAttach()
sdk_rcAttach_entry:
	// succ:  l402299A8
l402299A8:
	a1 = fp
	a4 = 0x40229994
	a5 = 0
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a4 + 0x00000004:word16] = a5
	a0 = a4 + 8
	a4 = a4 + 12
	// succ:  l402299B9
l402299B9:
	Mem0[a0:word16] = a5
	a0 = a0 + 2
	branch a0 != a4 l402299B9
	// succ:  l402299C1 l402299B9
l402299C1:
	a2 = 0x40229998
	a3 = 12
	a0 = 0x402299C9
	call fn403298A0 (retsize: 0;)
	a2 = 0x4022999C
	a3 = 9
	a0 = 0x402299D1
	call fn403298A0 (retsize: 0;)
	a2 = 0x402298BC
	a3 = 11
	a0 = 0x402299D9
	call fn403298A0 (retsize: 0;)
	a2 = 0x402299A0
	a3 = 8
	a0 = 0x402299E1
	call fn403298A0 (retsize: 0;)
	a2 = 0x402299A4
	a3 = 4
	a0 = 0x402299E9
	call fn403298A0 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rcAttach_exit
sdk_rcAttach_exit:


// sdk_rcGetTrc
// Return size: 0
void sdk_rcGetTrc()
sdk_rcGetTrc_entry:
	// succ:  l402299F4
l402299F4:
	a1 = fp
	a2 = 0x402299F0
	return
	// succ:  sdk_rcGetTrc_exit
sdk_rcGetTrc_exit:


// sdk_trc_onDisconnect
// Return size: 0
void sdk_trc_onDisconnect()
sdk_trc_onDisconnect_entry:
	// succ:  l402299FC
l402299FC:
	a1 = fp
	return
	// succ:  sdk_trc_onDisconnect_exit
sdk_trc_onDisconnect_exit:


// sdk_trc_onScanStart
// Return size: 0
void sdk_trc_onScanStart()
sdk_trc_onScanStart_entry:
	// succ:  l40229A00
l40229A00:
	a1 = fp
	branch a2 == 0x00000000 l40229A1E
	// succ:  l40229A02 l40229A1E
l40229A02:
	v5 = Mem0[a2 + 0x00000014:byte]
	a3 = (uint32) v5
	a4 = 0x000000FE
	a3 = a3 & a4
	a4 = 1
	a3 = a3 | a4
	a4 = 0x000000FB
	a3 = a3 & a4
	a4 = 4
	a3 = a3 | a4
	Mem0[a2 + 0x00000014:byte] = a3
	// succ:  l40229A1E
l40229A1E:
	return
	// succ:  sdk_trc_onScanStart_exit
sdk_trc_onScanStart_exit:


// sdk_trc_onScanDone
// Return size: 0
void sdk_trc_onScanDone()
sdk_trc_onScanDone_entry:
	// succ:  l40229A20
l40229A20:
	a1 = fp
	branch a2 == 0x00000000 l40229A34
	// succ:  l40229A22 l40229A34
l40229A22:
	v5 = Mem0[a2 + 0x00000014:byte]
	a3 = (uint32) v5
	a4 = 0x000000FE
	a3 = a3 & a4
	a4 = 0x000000FB
	a3 = a3 & a4
	Mem0[a2 + 0x00000014:byte] = a3
	// succ:  l40229A34
l40229A34:
	return
	// succ:  sdk_trc_onScanDone_exit
sdk_trc_onScanDone_exit:


// sdk_rc_enable_trc
// Return size: 0
void sdk_rc_enable_trc()
sdk_rc_enable_trc_entry:
	// succ:  l40229A40
l40229A40:
	a1 = fp
	a9 = 1
	SAR = a4
	a7 = 0x402299F0
	a1 = a1 - 48
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a5
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000018:word32] = a14
	Mem0[a1 + 0x00000010:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a4
	a8 = a7 - 16
	v14 = Mem0[a8 + 0x00000004:uint16]
	a0 = (uint32) v14
	a4 = a7 - 8
	a4 = a4 + a2 * 0x00000002
	v16 = Mem0[a4 + 0x00000000:uint16]
	a14 = (uint32) v16
	a6 = a0 >> SAR
	branch (a6 & 0x00000001) == 0x00000000 l40229AAB
	// succ:  l40229A6E l40229AAB
l40229A6E:
	Mem0[a1 + 0x0000001C:word32] = a4
	Mem0[a1 + 0x00000020:word32] = a0
	SAR = a12
	a5 = a14 >> SAR
	branch (a5 & 0x00000001) == 0x00000000 l40229A9D
	// succ:  l40229A7B l40229A9D
l40229A7B:
	a3 = Mem0[a1 + 0x00000000:word32]
	a4 = 6
	a13 = 0x00000078
	v18 = (uint16) a13
	v19 = (uint16) a12
	a13 = v18 *u v19
	a13 = a7 + a13
	a2 = a13 + 26
	Mem0[a1 + 0x00000008:word32] = a2
	a0 = 0x40202AA8
	v20 = a0
	a0 = 0x40229A92
	call v20 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000020:word32]
	a4 = Mem0[a1 + 0x0000001C:word32]
	a8 = 0x40229994
	a9 = 1
	branch a2 == 0x00000000 l40229ABA
	// succ:  l40229A9D l40229ABA
l40229A9D:
	a2 = 0x40229A38
	a0 = 0x402034D0
	v21 = a0
	a0 = 0x40229AA6
	call v21 (retsize: 0;)
	a13 = 0
	goto l40229AF6
	// succ:  l40229AF6
l40229AAB:
	a3 = a7 + 26
	a2 = 0x00000078
	v22 = (uint16) a2
	v23 = (uint16) a12
	a2 = v22 *u v23
	a13 = a2 + a7
	a2 = a2 + a3
	Mem0[a1 + 0x00000008:word32] = a2
	// succ:  l40229ABA
l40229ABA:
	SAR = 0x00000020 - a12
	a2 = a13
	a3 = a9 << SAR
	a5 = a3 | a0
	a3 = a3 | a14
	Mem0[a8 + 0x00000004:word16] = a5
	Mem0[a4:word16] = a3
	a3 = 0x00000078
	a0 = 0x40213724
	v24 = a0
	a0 = 0x40229AD7
	call v24 (retsize: 0;)
	Mem0[a13 + 0x00000076:byte] = a12
	a2 = Mem0[a1 + 0x00000008:word32]
	a3 = Mem0[a1 + 0x00000000:word32]
	a4 = 6
	a6 = Mem0[a1 + 0x00000004:word32]
	Mem0[a13 + 0x00000020:word16] = a6
	a0 = 0x40203130
	v25 = a0
	a0 = 0x40229AEB
	call v25 (retsize: 0;)
	a3 = a12
	a2 = 0x40229A3C
	a0 = 0x402034D0
	v26 = a0
	a0 = 0x40229AF6
	call v26 (retsize: 0;)
	// succ:  l40229AF6
l40229AF6:
	a0 = Mem0[a1 + 0x0000000C:word32]
	a12 = Mem0[a1 + 0x00000010:word32]
	a2 = a13
	a14 = Mem0[a1 + 0x00000018:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_rc_enable_trc_exit
sdk_rc_enable_trc_exit:


// sdk_rc_get_mask
// Return size: 0
void sdk_rc_get_mask()
sdk_rc_get_mask_entry:
	// succ:  l40229B08
l40229B08:
	a1 = fp
	a2 = 0x40229994
	v4 = Mem0[a2 + 0x00000004:byte]
	a2 = (uint32) v4
	return
	// succ:  sdk_rc_get_mask_exit
sdk_rc_get_mask_exit:


// sdk_rc_disable_trc
// Return size: 0
void sdk_rc_disable_trc()
sdk_rc_disable_trc_entry:
	// succ:  l40229B1C
l40229B1C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a12
	a0 = 0x40229B10
	a12 = a4
	SAR = a12
	a4 = a0 + a2 * 0x00000002
	Mem0[a1:word32] = a4
	v8 = Mem0[a4 + 0x00000000:uint16]
	a4 = (uint32) v8
	Mem0[a1 + 0x00000004:word32] = a4
	a4 = a4 >> SAR
	branch (a4 & 0x00000001) == 0x00000000 l40229B81
	// succ:  l40229B3B l40229B81
l40229B3B:
	a2 = a0 + 8
	a4 = 0x00000078
	v9 = (int16) a4
	v10 = (int16) a12
	a4 = v9 *s v10
	a2 = a2 + a4
	a2 = a2 + 26
	a4 = 6
	a0 = 0x40202AA8
	v11 = a0
	a0 = 0x40229B50
	call v11 (retsize: 0;)
	branch a2 != 0x00000000 l40229B81
	// succ:  l40229B52 l40229B81
l40229B52:
	a2 = 0x40229B14
	a9 = Mem0[a1 + 0x00000000:word32]
	a8 = -1
	a6 = 0x40229994
	SAR = 0x00000020 - a12
	a7 = 1
	a7 = a7 << SAR
	v17 = Mem0[a6 + 0x00000004:uint16]
	a5 = (uint32) v17
	a7 = a7 ^ a8
	a8 = Mem0[a1 + 0x00000004:word32]
	a5 = a5 & a7
	Mem0[a6 + 0x00000004:word16] = a5
	a8 = a8 & a7
	Mem0[a9:word16] = a8
	a0 = 0x402034D0
	v18 = a0
	a0 = 0x40229B7E
	call v18 (retsize: 0;)
	goto l40229B8A
	// succ:  l40229B8A
l40229B81:
	a2 = 0x40229B18
	a0 = 0x402034D0
	v19 = a0
	a0 = 0x40229B8A
	call v19 (retsize: 0;)
	// succ:  l40229B8A
l40229B8A:
	a12 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rc_disable_trc_exit
sdk_rc_disable_trc_exit:


// sdk_rc_disable_trc_by_interface
// Return size: 0
void sdk_rc_disable_trc_by_interface()
sdk_rc_disable_trc_by_interface_entry:
	// succ:  l40229B94
l40229B94:
	a1 = fp
	a6 = 0x40229994
	a3 = 0
	v6 = Mem0[a6 + 0x00000004:uint16]
	a7 = (uint32) v6
	a4 = a6 + 8
	a4 = a4 + a2 * 0x00000002
	v10 = Mem0[a4 + 0x00000000:uint16]
	a5 = (uint32) v10
	Mem0[a4:word16] = a3
	a5 = a5 ^ a7
	Mem0[a6 + 0x00000004:word16] = a5
	return
	// succ:  sdk_rc_disable_trc_by_interface_exit
sdk_rc_disable_trc_by_interface_exit:


// sdk_rc_get_sta_trc
// Return size: 0
void sdk_rc_get_sta_trc()
sdk_rc_get_sta_trc_entry:
	// succ:  l40229BB0
l40229BB0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = 0x40229B10
	a0 = a0 + a2 * 0x00000002
	v5 = Mem0[a0 + 0x00000000:uint16]
	a2 = (uint32) v5
	Mem0[a1:word32] = a2
	a0 = 0x40229BC5
	call fn4031109C (retsize: 0;)
	a5 = 0x00000078
	// succ:  l40229BC5_thunk_fn40229BC8
l40229BC5_thunk_fn40229BC8:
	call fn40229BC8 (retsize: 0;)
	return
	// succ:  sdk_rc_get_sta_trc_exit
sdk_rc_get_sta_trc_exit:


// fn40229BC8
// Return size: 0
void fn40229BC8()
fn40229BC8_entry:
	// succ:  l40229BC8
l40229BC8:
	a1 = fp
	a4 = Mem0[a1 + 0x00000000:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a3 = -a4
	a1 = a1 + 16
	a3 = a3 & a4
	a4 = a2 - 1
	a3 = __nsau(a3)
	a3 = -a3
	a2 = 0x402299F0
	a3 = a3 + 31
	a3 = a3 * a5
	a2 = a2 + a3
	a3 = 0
	branch a4 == 0x00000000 l40229BEE
	// succ:  l40229BEB_1 l40229BEE
l40229BEB_1:
	a2 = a3
	// succ:  l40229BEE
l40229BEE:
	return
	// succ:  fn40229BC8_exit
fn40229BC8_exit:


// sdk_rc_get_trc
// Return size: 0
void sdk_rc_get_trc()
sdk_rc_get_trc_entry:
	// succ:  l40229BF0
l40229BF0:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	a12 = 0x40229B10
	Mem0[a1 + 0x0000000C:word32] = a14
	a12 = a12 + a2 * 0x00000002
	v9 = Mem0[a12 + 0x00000000:byte]
	a12 = (uint32) v9
	a14 = a3
	a13 = -a12
	a13 = a13 & a12
	a13 = __nsau(a13)
	a13 = -a13
	a13 = a13 + 31
	branch a13 < 0x00000000 l40229C4A
	// succ:  l40229C1A l40229C4A
l40229C1A:
	a3 = a14
	a4 = 6
	a15 = 0x402299F0
	a0 = 0x00000078
	a0 = a13 * a0
	a15 = a15 + a0
	a2 = a15 + 26
	a0 = 0x40202AA8
	v12 = a0
	a0 = 0x40229C32
	call v12 (retsize: 0;)
	branch a2 == 0x00000000 l40229C5B
	// succ:  l40229C34 l40229C5B
l40229C34:
	a0 = -1
	SAR = 0x00000020 - a13
	a15 = 1
	a15 = a15 << SAR
	a15 = a15 ^ a0
	a12 = a12 & a15
	a12 = a12 & 0x000000FF
	goto l40269C08
	// succ:  l40269C08
l40229C4A:
	a2 = 0
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_rc_get_trc_exit
l40229C5B:
	a2 = a15
	goto l40269C4C
	// succ:  l40269C4C
l40269C08:
l40269C4C:
sdk_rc_get_trc_exit:


// sdk_rc_get_trc_by_index
// Return size: 0
void sdk_rc_get_trc_by_index()
sdk_rc_get_trc_by_index_entry:
	// succ:  l40229C60
l40229C60:
	a1 = fp
	a4 = 0x40229994
	SAR = a2
	v7 = Mem0[a4 + 0x00000004:uint16]
	a3 = (uint32) v7
	a5 = a4 + 16
	a3 = a3 >> SAR
	branch (a3 & 0x00000001) == 0x00000000 l40229C7C
	// succ:  l40229C72 l40229C7C
l40229C72:
	a3 = 0x00000078
	v9 = (uint16) a3
	v10 = (uint16) a2
	a2 = v9 *u v10
	a2 = a5 + a2
	return
	// succ:  sdk_rc_get_trc_by_index_exit
l40229C7C:
	a2 = 0
	return
	// succ:  sdk_rc_get_trc_by_index_exit
sdk_rc_get_trc_by_index_exit:


// sdk_rc_only_sta_trc
// Return size: 0
void sdk_rc_only_sta_trc()
sdk_rc_only_sta_trc_entry:
	// succ:  l40229C80
l40229C80:
	a1 = fp
	a2 = 0x40229994
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	v5 = Mem0[a2 + 0x00000004:uint16]
	a2 = (uint32) v5
	a0 = 0x40229C8F
	call fn4031109C (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	branch a2 != 1 l40229CA6
	// succ:  l40229C95 l40229CA6
l40229C95:
	a4 = 0x40229994
	a3 = 0x00000001
	v8 = Mem0[a4 + 0x00000008:uint16]
	a4 = (uint32) v8
	a2 = 0
	branch a4 != 0x00000000 l40229CA3
	// succ:  l40229CA0_1 l40229CA3
l40229CA0_1:
	a2 = a3
	// succ:  l40229CA3
l40229CA3:
	goto l40229CA8
	// succ:  l40229CA8
l40229CA6:
	a2 = -1
	// succ:  l40229CA8
l40229CA8:
	a1 = a1 + 16
	return
	// succ:  sdk_rc_only_sta_trc_exit
sdk_rc_only_sta_trc_exit:


// sdk_wDev_Option_Init
// Return size: 0
void sdk_wDev_Option_Init()
sdk_wDev_Option_Init_entry:
	// succ:  l40229CBC
l40229CBC:
	a1 = fp
	a9 = 0x40229CB0
	a8 = 0x40229CB4
	a3 = 0x4021319C
	a7 = Mem0[a3 + 0x00000288:word32]
	a7 = a7 | a9
	Mem0[a3 + 0x00000288:word32] = a7
	a6 = 0x40229CB8
	a5 = Mem0[a3 + 0x00000288:word32]
	a5 = a5 & a6
	Mem0[a3 + 0x00000288:word32] = a5
	a4 = 8
	a2 = Mem0[a3 + 0x00000290:word32]
	a2 = a2 | a4
	Mem0[a3 + 0x00000290:word32] = a2
	a11 = 3
	a10 = Mem0[a3 + 0x00000294:word32]
	a10 = a10 | a11
	Mem0[a3 + 0x00000294:word32] = a10
	a9 = 0xFFFFFF0F
	a7 = Mem0[a8 + 0x00000008:word32]
	a7 = a7 & a9
	Mem0[a8 + 0x00000008:word32] = a7
	a6 = 0xFFFFFF00
	a5 = 4
	a4 = Mem0[a3 + 0x0000026C:word32]
	a4 = a4 & a6
	a4 = a4 | a5
	Mem0[a3 + 0x0000026C:word32] = a4
	a2 = 0x4021F53C
	a11 = 0x00000400
	a10 = Mem0[a3 + 0x0000026C:word32]
	a10 = a10 & a2
	a10 = a10 | a11
	Mem0[a3 + 0x0000026C:word32] = a10
	a9 = 0x4021E474
	a8 = 0x000000F0
	a7 = Mem0[a3 + 0x00000214:word32]
	a7 = a7 & a9
	a7 = a7 | a8
	Mem0[a3 + 0x00000214:word32] = a7
	a6 = 0x4020449C
	a5 = Mem0[a3 + 0x00000214:word32]
	a5 = a5 | a6
	Mem0[a3 + 0x00000214:word32] = a5
	a4 = 0x40204574
	a2 = Mem0[a3 + 0x00000214:word32]
	a2 = a2 | a4
	Mem0[a3 + 0x00000214:word32] = a2
	return
	// succ:  sdk_wDev_Option_Init_exit
sdk_wDev_Option_Init_exit:


// sdk_wDev_Enable_Beacon_Tsf
// Return size: 0
void sdk_wDev_Enable_Beacon_Tsf()
sdk_wDev_Enable_Beacon_Tsf_entry:
	// succ:  l40229D8C
l40229D8C:
	a1 = fp
	a4 = 0x40229D88
	a3 = 0x40229CB4
	a2 = Mem0[a3 + 0x00000258:word32]
	a2 = a2 | a4
	Mem0[a3 + 0x00000258:word32] = a2
	return
	// succ:  sdk_wDev_Enable_Beacon_Tsf_exit
sdk_wDev_Enable_Beacon_Tsf_exit:


// sdk_wDev_Disable_Beacon_Tsf
// Return size: 0
void sdk_wDev_Disable_Beacon_Tsf()
sdk_wDev_Disable_Beacon_Tsf_entry:
	// succ:  l40229DA8
l40229DA8:
	a1 = fp
	a4 = 0x40229DA4
	a3 = 0x40229CB4
	a2 = Mem0[a3 + 0x00000258:word32]
	a2 = a2 & a4
	Mem0[a3 + 0x00000258:word32] = a2
	return
	// succ:  sdk_wDev_Disable_Beacon_Tsf_exit
sdk_wDev_Disable_Beacon_Tsf_exit:


// sdk_wDev_Set_Beacon_Int
// Return size: 0
void sdk_wDev_Set_Beacon_Int()
sdk_wDev_Set_Beacon_Int_entry:
	// succ:  l40229DC4
l40229DC4:
	a1 = fp
	a3 = 0x40229DC0
	Mem0[a3 + 0x00000004:word32] = a2
	return
	// succ:  sdk_wDev_Set_Beacon_Int_exit
sdk_wDev_Set_Beacon_Int_exit:


// sdk_wDev_Reset_TBTT
// Return size: 0
void sdk_wDev_Reset_TBTT()
sdk_wDev_Reset_TBTT_entry:
	// succ:  l40229DCC
l40229DCC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40229DD5
	call fn40329DA8 (retsize: 0;)
	a0 = 0x40229DD8
	call fn403283C4 (retsize: 0;)
	a3 = 0x402266F8
	a0 = 0x00000000
	Mem0[a3 + 0x000001A0:word32] = a0
	a2 = 0x40229CB4
	Mem0[a2 + 0x0000025C:word32] = a0
	Mem0[a2 + 0x00000260:word32] = a0
	a0 = 0x40229DF3
	call fn40329D8C (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wDev_Reset_TBTT_exit
sdk_wDev_Reset_TBTT_exit:


// sdk_wDev_Get_Next_TBTT
// Return size: 0
void sdk_wDev_Get_Next_TBTT()
sdk_wDev_Get_Next_TBTT_entry:
	// succ:  l40229DFC
l40229DFC:
	a1 = fp
	a5 = 0x40229CB4
	a7 = 0x402266F8
	a6 = 0x40229DC0
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a6 = Mem0[a6 + 0x00000004:word32]
	a0 = Mem0[a7 + 0x000001A0:word32]
	// succ:  l40229E0F
l40229E0F:
	a0 = a0 + a6
	a2 = Mem0[a5 + 0x00000248:word32]
	a2 = a0 - a2
	branch a6 <u a2 l40229E0F
	// succ:  l40229E1D l40229E0F
l40229E1D:
	a3 = 0x000003E8
	Mem0[a7 + 0x000001A0:word32] = a0
	a0 = 0x40204388
	v9 = a0
	a0 = 0x40229E29
	call v9 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wDev_Get_Next_TBTT_exit
sdk_wDev_Get_Next_TBTT_exit:


// sdk_wDev_MacTim1SetFunc
// Return size: 0
void sdk_wDev_MacTim1SetFunc()
sdk_wDev_MacTim1SetFunc_entry:
	// succ:  l4022A094
l4022A094:
	a1 = fp
	a6 = 0x4020449C
	a5 = 0x40229CB4
	a4 = Mem0[a5 + 0x00000258:word32]
	a4 = a4 | a6
	a3 = 0x40229DC0
	Mem0[a5 + 0x00000258:word32] = a4
	Mem0[a3 + 0x0000000C:word32] = a2
	return
	// succ:  sdk_wDev_MacTim1SetFunc_exit
sdk_wDev_MacTim1SetFunc_exit:


// sdk_wDev_Initialize
// Return size: 0
void sdk_wDev_Initialize()
sdk_wDev_Initialize_entry:
	// succ:  l4022A0B4
l4022A0B4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a3 = 0
	a2 = 0x4021319C
	Mem0[a2 + 0x00000218:word32] = a3
	a0 = -1
	Mem0[a2 + 0x00000224:word32] = a0
	a0 = 0x4022A0CF
	call fn40329CBC (retsize: 0;)
	a0 = 0x4022A0D2
	call fn4022A494 (retsize: 0;)
	a0 = 0x4022A0D5
	call fn40329E58 (retsize: 0;)
	a0 = 0x4022A0D8
	call fn4032A01C (retsize: 0;)
	a0 = 0x4022A0DB
	call fn4032A03C (retsize: 0;)
	a9 = 0x4022A0B0
	a5 = 0x40214568
	a10 = 0x4021319C
	Mem0[a10 + 0x00000218:word32] = a9
	a8 = 2
	a7 = Mem0[a5 + 0x00000378:word32]
	a7 = a7 | a8
	Mem0[a5 + 0x00000378:word32] = a7
	a6 = 0x402044FC
	a4 = Mem0[a5 + 0x00000204:word32]
	a4 = a4 & a6
	Mem0[a5 + 0x00000204:word32] = a4
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wDev_Initialize_exit
sdk_wDev_Initialize_exit:


// sdk_wDevForceAck6M
// Return size: 0
void sdk_wDevForceAck6M()
sdk_wDevForceAck6M_entry:
	// succ:  l4022A11C
l4022A11C:
	a1 = fp
	a4 = 0x402231E0
	branch a2 == 0x00000000 l4022A12C
	// succ:  l4022A121 l4022A12C
l4022A121:
	a3 = 0x4022A114
	Mem0[a4 + 0x0000020C:word32] = a3
	return
	// succ:  sdk_wDevForceAck6M_exit
l4022A12C:
	a2 = 0x4022A118
	Mem0[a4 + 0x0000020C:word32] = a2
	return
	// succ:  sdk_wDevForceAck6M_exit
sdk_wDevForceAck6M_exit:


// sdk_wDev_SetMacAddress
// Return size: 0
void sdk_wDev_SetMacAddress()
sdk_wDev_SetMacAddress_entry:
	// succ:  l4022A138
l4022A138:
	a1 = fp
	a9 = -1
	a8 = 0x402138F8
	v6 = Mem0[a3 + 0x00000003:byte]
	a7 = (uint32) v6
	v9 = Mem0[a3 + 0x00000001:byte]
	a5 = (uint32) v9
	v11 = Mem0[a3 + 0x00000000:byte]
	a6 = (uint32) v11
	a5 = a5 << 24
	a5 = a5 | a6
	v12 = Mem0[a3 + 0x00000002:byte]
	a6 = (uint32) v12
	a7 = a7 << 8
	a6 = a6 << 16
	a6 = a6 | a7
	a7 = 0x4020A190
	a5 = a5 | a6
	a6 = 0x4021319C
	branch a2 == 0x00000000 l4022A198
	// succ:  l4022A163 l4022A198
l4022A163:
	Mem0[a6 + 0x00000250:word32] = a5
	v15 = Mem0[a3 + 0x00000005:byte]
	a11 = (uint32) v15
	v17 = Mem0[a3 + 0x00000004:byte]
	a10 = (uint32) v17
	a11 = a11 << 24
	a10 = a10 | a11
	Mem0[a6 + 0x00000254:word32] = a10
	Mem0[a6 + 0x00000260:word32] = a9
	Mem0[a6 + 0x00000264:word32] = a7
	a4 = Mem0[a6 + 0x00000264:word32]
	a4 = a4 | a8
	Mem0[a6 + 0x00000264:word32] = a4
	return
	// succ:  sdk_wDev_SetMacAddress_exit
l4022A198:
	Mem0[a6 + 0x00000248:word32] = a5
	v19 = Mem0[a3 + 0x00000005:byte]
	a2 = (uint32) v19
	v20 = Mem0[a3 + 0x00000004:byte]
	a11 = (uint32) v20
	a2 = a2 << 24
	a11 = a11 | a2
	Mem0[a6 + 0x0000024C:word32] = a11
	Mem0[a6 + 0x00000258:word32] = a9
	Mem0[a6 + 0x0000025C:word32] = a7
	a10 = Mem0[a6 + 0x0000025C:word32]
	a10 = a10 | a8
	Mem0[a6 + 0x0000025C:word32] = a10
	return
	// succ:  sdk_wDev_SetMacAddress_exit
sdk_wDev_SetMacAddress_exit:


// sdk_wDev_SetRxPolicy
// Return size: 0
void sdk_wDev_SetRxPolicy()
sdk_wDev_SetRxPolicy_entry:
	// succ:  l4022A1D4
l4022A1D4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a2 != 0x00000000 l4022A1F5
	// succ:  l4022A1DB l4022A1F5
l4022A1DB:
	a0 = 0x4022A1D0
	a2 = 0x4021319C
	branch a3 != 0x00000000 l4022A216
	// succ:  l4022A1E3 l4022A216
l4022A1E3:
	a3 = Mem0[a2 + 0x0000023C:word32]
	a3 = a3 & a0
	Mem0[a2 + 0x0000023C:word32] = a3
	goto l4022A20F
	// succ:  l4022A20F
l4022A1F5:
	branch a2 != 1 l4022A203
	// succ:  l4022A1F8 l4022A203
l4022A1F8:
	a2 = a3
	a3 = 0x40215168
	a0 = 0x4022A200
	call sdk_wDev_SetBssid (retsize: 0;)
	goto l4022A20F
	// succ:  l4022A20F
l4022A203:
	branch a2 != 2 l4022A20F
	// succ:  l4022A206 l4022A20F
l4022A206:
	branch a4 == 0x00000000 l4022A20F
	// succ:  l4022A208 l4022A20F
l4022A208:
	a2 = a3
	a3 = a4
	a0 = 0x4022A20F
	call sdk_wDev_SetBssid (retsize: 0;)
	// succ:  l4022A20F
l4022A20F:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wDev_SetRxPolicy_exit
l4022A216:
	a4 = Mem0[a2 + 0x00000244:word32]
	a4 = a4 & a0
	Mem0[a2 + 0x00000244:word32] = a4
	// succ:  l4026A20F
l4026A20F:
sdk_wDev_SetRxPolicy_exit:


// sdk_wDev_SetBssid
// Return size: 0
void sdk_wDev_SetBssid()
sdk_wDev_SetBssid_entry:
	// succ:  l4022A228
l4022A228:
	a1 = fp
	a10 = -1
	a8 = 0x402138F8
	a7 = 0x4020A190
	a5 = 0x4022A1D0
	a6 = 0x4021319C
	branch a2 == 0x00000000 l4022A29B
	// succ:  l4022A239 l4022A29B
l4022A239:
	a11 = Mem0[a6 + 0x00000244:word32]
	a11 = a11 & a5
	Mem0[a6 + 0x00000244:word32] = a11
	v10 = Mem0[a3 + 0x00000003:byte]
	a11 = (uint32) v10
	v13 = Mem0[a3 + 0x00000001:byte]
	a9 = (uint32) v13
	v15 = Mem0[a3 + 0x00000000:byte]
	a4 = (uint32) v15
	a9 = a9 << 24
	a4 = a4 | a9
	v16 = Mem0[a3 + 0x00000002:byte]
	a9 = (uint32) v16
	a11 = a11 << 8
	a9 = a9 << 16
	a9 = a9 | a11
	a4 = a4 | a9
	Mem0[a6 + 0x00000230:word32] = a4
	v17 = Mem0[a3 + 0x00000005:byte]
	a2 = (uint32) v17
	v18 = Mem0[a3 + 0x00000004:byte]
	a11 = (uint32) v18
	a2 = a2 << 24
	a11 = a11 | a2
	Mem0[a6 + 0x00000234:word32] = a11
	Mem0[a6 + 0x00000240:word32] = a10
	Mem0[a6 + 0x00000244:word32] = a7
	a9 = Mem0[a6 + 0x00000244:word32]
	a9 = a9 | a8
	Mem0[a6 + 0x00000244:word32] = a9
	return
	// succ:  sdk_wDev_SetBssid_exit
l4022A29B:
	a4 = Mem0[a6 + 0x0000023C:word32]
	a4 = a4 & a5
	Mem0[a6 + 0x0000023C:word32] = a4
	v19 = Mem0[a3 + 0x00000003:byte]
	a4 = (uint32) v19
	v20 = Mem0[a3 + 0x00000001:byte]
	a2 = (uint32) v20
	v21 = Mem0[a3 + 0x00000000:byte]
	a11 = (uint32) v21
	a2 = a2 << 24
	a11 = a11 | a2
	v22 = Mem0[a3 + 0x00000002:byte]
	a2 = (uint32) v22
	a4 = a4 << 8
	a2 = a2 << 16
	a2 = a2 | a4
	a11 = a11 | a2
	Mem0[a6 + 0x00000228:word32] = a11
	v23 = Mem0[a3 + 0x00000005:byte]
	a9 = (uint32) v23
	v24 = Mem0[a3 + 0x00000004:byte]
	a4 = (uint32) v24
	a9 = a9 << 24
	a4 = a4 | a9
	Mem0[a6 + 0x0000022C:word32] = a4
	Mem0[a6 + 0x00000238:word32] = a10
	Mem0[a6 + 0x0000023C:word32] = a7
	a2 = Mem0[a6 + 0x0000023C:word32]
	a2 = a2 | a8
	Mem0[a6 + 0x0000023C:word32] = a2
	return
	// succ:  sdk_wDev_SetBssid_exit
sdk_wDev_SetBssid_exit:


// sdk_wDev_ClearBssid
// Return size: 0
void sdk_wDev_ClearBssid()
sdk_wDev_ClearBssid_entry:
	// succ:  l4022A300
l4022A300:
	a1 = fp
	a4 = 0x4022A1D0
	a5 = 0x4021319C
	branch a2 == 0x00000000 l4022A319
	// succ:  l4022A308 l4022A319
l4022A308:
	a3 = Mem0[a5 + 0x00000244:word32]
	a3 = a3 & a4
	Mem0[a5 + 0x00000244:word32] = a3
	return
	// succ:  sdk_wDev_ClearBssid_exit
l4022A319:
	a2 = Mem0[a5 + 0x0000023C:word32]
	a2 = a2 & a4
	Mem0[a5 + 0x0000023C:word32] = a2
	return
	// succ:  sdk_wDev_ClearBssid_exit
sdk_wDev_ClearBssid_exit:


// sdk_wDev_Insert_KeyEntry
// Return size: 0
void sdk_wDev_Insert_KeyEntry()
sdk_wDev_Insert_KeyEntry_entry:
	// succ:  l4022A338
l4022A338:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	v5 = Mem0[a5 + 0x00000005:byte]
	a11 = (uint32) v5
	v8 = Mem0[a5 + 0x00000004:byte]
	a10 = (uint32) v8
	a11 = a11 << 24
	a10 = a10 + a11
	branch a2 != 5 l4022A352
	// succ:  l4022A34B l4022A352
l4022A34B:
	a9 = 1
	a2 = 1
	goto l4022A354
	// succ:  l4022A354
l4022A352:
	a9 = 0
	// succ:  l4022A354
l4022A354:
	Mem0[a1 + 0x00000008:word32] = a7
	a8 = 0x4022A32C
	v13 = Mem0[a5 + 0x00000001:byte]
	a7 = (uint32) v13
	v14 = Mem0[a5 + 0x00000000:byte]
	a11 = (uint32) v14
	a7 = a7 << 24
	a11 = a11 + a7
	v15 = Mem0[a5 + 0x00000003:byte]
	a7 = (uint32) v15
	v16 = Mem0[a5 + 0x00000002:byte]
	a5 = (uint32) v16
	a7 = a7 << 8
	a5 = a5 << 16
	a5 = a5 + a7
	a11 = a11 + a5
	a5 = a6 + a6 * 0x00000004
	a5 = a5 << 29
	a8 = a5 + a8
	branch a2 == 1 l4022A389
	// succ:  l4022A37F l4022A389
l4022A37F:
	a0 = 6
	branch a6 < 6 l4022A38B
	// succ:  l4022A384 l4022A38B
l4022A384:
	a0 = 2
	goto l4022A38B
	// succ:  l4022A38B
l4022A389:
	a0 = 7
	// succ:  l4022A38B
l4022A38B:
	a7 = a4 << 2
	a0 = a0 & 0x00000007
	Mem0[a8 + 0x00000200:word32] = a11
	a9 = a9 & 0x00000003
	a11 = a10 & 0x0000FFFF
	a9 = a9 << 16
	a9 = a9 + a11
	a0 = a0 << 11
	a11 = a2 & 0x00000007
	a11 = a11 << 14
	a11 = a11 + a0
	a9 = a9 + a11
	a11 = a3 & 0x00000001
	a11 = a11 << 8
	a7 = a7 + a11
	a7 = a7 + a9
	Mem0[a8 + 0x00000204:word32] = a7
	SAR = 0x00000020 - a6
	a0 = 1
	a0 = a0 << SAR
	a8 = 0x4022A330
	a7 = Mem0[a8 + 0x0000020C:word32]
	a7 = a7 | a0
	Mem0[a8 + 0x0000020C:word32] = a7
	a9 = Mem0[a1 + 0x00000004:word32]
	a7 = Mem0[a1 + 0x00000008:word32]
	branch a3 >=u 0x00000002 l4022A3F2
	// succ:  l4022A3E0 l4022A3F2
l4022A3E0:
	branch a6 < 2 l4022A3F2
	// succ:  l4022A3E3 l4022A3F2
l4022A3E3:
	a9 = 0x40229DC0
	a9 = Mem0[a9 + 0x00000000:word32]
	a9 = a9 + a3 * 0x00000004
	a8 = Mem0[a9 + 0x00000038:word32]
	a8 = a0 | a8
	Mem0[a9 + 0x00000038:word32] = a8
	// succ:  l4022A3F2
l4022A3F2:
	a3 = a7
	a2 = 0x4022A334
	a4 = Mem0[a1 + 0x00000010:word32]
	a2 = a5 + a2
	a0 = 0x40203130
	v21 = a0
	a0 = 0x4022A401
	call v21 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wDev_Insert_KeyEntry_exit
sdk_wDev_Insert_KeyEntry_exit:


// sdk_wDev_remove_KeyEntry
// Return size: 0
void sdk_wDev_remove_KeyEntry()
sdk_wDev_remove_KeyEntry_entry:
	// succ:  l4022A40C
l4022A40C:
	a1 = fp
	a7 = 0x4022A330
	SAR = 0x00000020 - a2
	a8 = 1
	a9 = -1
	a8 = a8 << SAR
	a8 = a8 ^ a9
	a6 = Mem0[a7 + 0x0000020C:word32]
	a6 = a6 & a8
	Mem0[a7 + 0x0000020C:word32] = a6
	a5 = 0x4022A32C
	a4 = a2 + a2 * 0x00000004
	a4 = a5 + a4 * 0x00000008
	a5 = 0x4022A408
	a3 = Mem0[a4 + 0x00000204:word32]
	a3 = a3 & a5
	Mem0[a4 + 0x00000204:word32] = a3
	return
	// succ:  sdk_wDev_remove_KeyEntry_exit
sdk_wDev_remove_KeyEntry_exit:


// sdk_wDev_Crypto_Conf
// Return size: 0
void sdk_wDev_Crypto_Conf()
sdk_wDev_Crypto_Conf_entry:
	// succ:  l4022A44C
l4022A44C:
	a1 = fp
	a6 = 0x4022A448
	a7 = 0x4021CB40
	a5 = 0x4022A330
	branch a2 != 0x00000000 l4022A474
	// succ:  l4022A457 l4022A474
l4022A457:
	Mem0[a5 + 0x00000200:word32] = a6
	branch a3 == 1 l4022A463
	// succ:  l4022A460 l4022A463
l4022A460:
	branch a3 != 5 l4022A48F
	// succ:  l4022A463 l4022A48F
l4022A463:
	a2 = Mem0[a5 + 0x00000200:word32]
	a2 = a2 | a7
	Mem0[a5 + 0x00000200:word32] = a2
	return
	// succ:  sdk_wDev_Crypto_Conf_exit
l4022A474:
	Mem0[a5 + 0x00000204:word32] = a6
	branch a3 == 1 l4022A480
	// succ:  l4022A47D l4022A480
l4022A47D:
	branch a3 != 5 l4022A48F
	// succ:  l4022A480 l4022A48F
l4022A480:
	a3 = Mem0[a5 + 0x00000204:word32]
	a3 = a3 | a7
	Mem0[a5 + 0x00000204:word32] = a3
	// succ:  l4022A48F
l4022A48F:
	return
	// succ:  sdk_wDev_Crypto_Conf_exit
sdk_wDev_Crypto_Conf_exit:


// fn4022A494
// Return size: 0
void fn4022A494()
fn4022A494_entry:
	// succ:  l4022A494
l4022A494:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a0
	a2 = 0x4021D77C
	a7 = 0x40215168
	a3 = 0x4022A330
	Mem0[a3 + 0x00000200:word32] = a2
	a4 = 0
	a5 = a7
	a6 = 0
	Mem0[a3 + 0x00000204:word32] = a2
	a0 = 6
	a2 = 3
	a3 = 0
	Mem0[a1:word32] = a0
	a0 = 0x4022A4BF
	call fn4032A338 (retsize: 0;)
	a2 = 3
	a3 = 1
	a6 = 1
	a7 = 0x40215168
	a4 = 6
	Mem0[a1:word32] = a4
	a5 = a7
	a4 = 0
	a0 = 0x4022A4D3
	call fn4032A338 (retsize: 0;)
	a5 = 0
	a6 = 0x4022A330
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	Mem0[a6 + 0x00000208:word32] = a5
	return
	// succ:  fn4022A494_exit
fn4022A494_exit:


// sdk_wDev_Crypto_Disable
// Return size: 0
void sdk_wDev_Crypto_Disable()
sdk_wDev_Crypto_Disable_entry:
	// succ:  l4022A4E8
l4022A4E8:
	a1 = fp
	a6 = 0x40229DC0
	a4 = 0x4022A330
	a6 = Mem0[a6 + 0x00000000:word32]
	a5 = 0x4021D77C
	a6 = a6 + a2 * 0x00000004
	a6 = Mem0[a6 + 0x00000038:word32]
	branch a2 != 0x00000000 l4022A503
	// succ:  l4022A4FA l4022A503
l4022A4FA:
	Mem0[a4 + 0x00000200:word32] = a5
	goto l4022A509
	// succ:  l4022A509
l4022A503:
	Mem0[a4 + 0x00000204:word32] = a5
	// succ:  l4022A509
l4022A509:
	a8 = -1
	a8 = a6 ^ a8
	a7 = Mem0[a4 + 0x0000020C:word32]
	a7 = a7 & a8
	Mem0[a4 + 0x0000020C:word32] = a7
	return
	// succ:  sdk_wDev_Crypto_Disable_exit
sdk_wDev_Crypto_Disable_exit:


// sdk_wDevDisableRx
// Return size: 0
void sdk_wDevDisableRx()
sdk_wDevDisableRx_entry:
	// succ:  l4022A520
l4022A520:
	a1 = fp
	a4 = 0x402044FC
	a3 = 0x40214568
	a2 = Mem0[a3 + 0x00000204:word32]
	a2 = a2 & a4
	Mem0[a3 + 0x00000204:word32] = a2
	return
	// succ:  sdk_wDevDisableRx_exit
sdk_wDevDisableRx_exit:


// sdk_wDevEnableRx
// Return size: 0
void sdk_wDevEnableRx()
sdk_wDevEnableRx_entry:
	// succ:  l4022A538
l4022A538:
	a1 = fp
	a4 = 0x4020449C
	a3 = 0x40214568
	a2 = Mem0[a3 + 0x00000204:word32]
	a2 = a2 | a4
	Mem0[a3 + 0x00000204:word32] = a2
	return
	// succ:  sdk_wDevEnableRx_exit
sdk_wDevEnableRx_exit:


// sdk_wdev_go_sniffer
// Return size: 0
void sdk_wdev_go_sniffer()
sdk_wdev_go_sniffer_entry:
	// succ:  l4022A55C
l4022A55C:
	a1 = fp
	a8 = 0x00000000
	a2 = 0x4021BDC0
	a3 = 0x4022A550
	a7 = 0x402138F8
	a10 = 0x4022A330
	a4 = 0x00000001
	a5 = 0x40229DC0
	a1 = a1 - 16
	a5 = Mem0[a5 + 0x00000000:word32]
	Mem0[a1:word32] = a0
	Mem0[a5 + 0x00000005:byte] = a4
	a11 = 0x4022A1D0
	a0 = 0x40215E28
	a5 = 0x4021319C
	a9 = Mem0[a5 + 0x00000288:word32]
	a9 = a9 | a0
	Mem0[a5 + 0x00000288:word32] = a9
	a6 = Mem0[a10 + 0x00000200:word32]
	a6 = a6 | a3
	Mem0[a10 + 0x00000200:word32] = a6
	a4 = Mem0[a10 + 0x00000200:word32]
	a4 = a4 & a11
	Mem0[a10 + 0x00000200:word32] = a4
	a0 = Mem0[a10 + 0x00000204:word32]
	a0 = a0 | a3
	Mem0[a10 + 0x00000204:word32] = a0
	a9 = Mem0[a10 + 0x00000204:word32]
	a9 = a9 & a11
	Mem0[a10 + 0x00000204:word32] = a9
	Mem0[a5 + 0x00000258:word32] = a8
	Mem0[a5 + 0x0000025C:word32] = a7
	Mem0[a5 + 0x00000238:word32] = a8
	Mem0[a5 + 0x0000023C:word32] = a7
	a6 = 12
	a4 = Mem0[a5 + 0x00000218:word32]
	a4 = a4 | a6
	Mem0[a5 + 0x00000218:word32] = a4
	a3 = 0x4022A554
	a0 = Mem0[a2 + 0x00000344:word32]
	a0 = a0 & a3
	Mem0[a2 + 0x00000344:word32] = a0
	a2 = 0x4022A558
	a0 = 0x4022A611
	call fn40303F28 (retsize: 0;)
	a8 = -2
	a7 = 0x4021319C
	a6 = Mem0[a7 + 0x00000294:word32]
	a6 = a6 & a8
	Mem0[a7 + 0x00000294:word32] = a6
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wdev_go_sniffer_exit
sdk_wdev_go_sniffer_exit:


// sdk_wdev_exit_sniffer
// Return size: 0
void sdk_wdev_exit_sniffer()
sdk_wdev_exit_sniffer_entry:
	// succ:  l4022A634
l4022A634:
	a1 = fp
	a3 = 0x40229DC0
	a8 = -1
	a3 = Mem0[a3 + 0x00000000:word32]
	a7 = 1
	v7 = Mem0[a3 + 0x00000005:byte]
	a2 = (uint32) v7
	a11 = 0x4021BDC0
	branch a2 == 0x00000000 l4022A6F5
	// succ:  l4022A646 l4022A6F5
l4022A646:
	a10 = 0x402138F8
	a2 = 0x402230C0
	a9 = 0x4022A330
	a6 = 0x4021319C
	a5 = Mem0[a6 + 0x00000294:word32]
	a5 = a5 | a7
	Mem0[a6 + 0x00000294:word32] = a5
	a4 = 0x4022A62C
	a7 = Mem0[a11 + 0x00000344:word32]
	a7 = a7 | a4
	Mem0[a11 + 0x00000344:word32] = a7
	a5 = -13
	a4 = Mem0[a6 + 0x00000218:word32]
	a4 = a4 & a5
	Mem0[a6 + 0x00000218:word32] = a4
	Mem0[a6 + 0x00000258:word32] = a8
	a11 = 0x4022A630
	Mem0[a6 + 0x0000025C:word32] = a11
	Mem0[a6 + 0x00000238:word32] = a8
	a7 = 0x4020A190
	Mem0[a6 + 0x0000023C:word32] = a7
	a5 = Mem0[a9 + 0x00000200:word32]
	a5 = a5 & a2
	Mem0[a9 + 0x00000200:word32] = a5
	a4 = Mem0[a9 + 0x00000200:word32]
	a4 = a4 | a10
	Mem0[a9 + 0x00000200:word32] = a4
	a11 = Mem0[a9 + 0x00000204:word32]
	a11 = a11 & a2
	Mem0[a9 + 0x00000204:word32] = a11
	a8 = Mem0[a9 + 0x00000204:word32]
	a8 = a8 | a10
	Mem0[a9 + 0x00000204:word32] = a8
	a7 = 0x4021A098
	a5 = Mem0[a6 + 0x00000288:word32]
	a5 = a5 & a7
	Mem0[a6 + 0x00000288:word32] = a5
	a4 = 0
	Mem0[a3 + 0x00000005:byte] = a4
	// succ:  l4022A6F5
l4022A6F5:
	return
	// succ:  sdk_wdev_exit_sniffer_exit
sdk_wdev_exit_sniffer_exit:


// sdk_hostapd_config_defaults_bss
// Return size: 0
void sdk_hostapd_config_defaults_bss()
sdk_hostapd_config_defaults_bss_entry:
	// succ:  l4022A6FC
l4022A6FC:
	a1 = fp
	a4 = 0x4020A190
	a3 = 0x0000012C
	a5 = 4
	a6 = 0
	a7 = 0x4022A6F8
	a8 = 0x00000258
	a9 = 1
	a10 = 3
	a11 = 2
	Mem0[a2 + 0x00000074:word32] = a11
	Mem0[a2 + 0x00000084:word32] = a11
	Mem0[a2 + 0x0000008C:word32] = a11
	Mem0[a2 + 0x00000090:word32] = a11
	Mem0[a2 + 0x00000004:word32] = a11
	Mem0[a2 + 0x0000000C:word32] = a11
	Mem0[a2 + 0x0000007C:word32] = a10
	Mem0[a2 + 0x00000070:word32] = a9
	Mem0[a2 + 0x00000094:word32] = a8
	Mem0[a2 + 0x0000009C:word32] = a7
	Mem0[a2 + 0x000000A4:word32] = a6
	Mem0[a2:word32] = a5
	Mem0[a2 + 0x0000006C:word32] = a3
	Mem0[a2 + 0x000000B4:word32] = a3
	Mem0[a2 + 0x000000CA:word16] = a4
	a3 = -1
	Mem0[a2 + 0x000000BC:word32] = a3
	return
	// succ:  sdk_hostapd_config_defaults_bss_exit
sdk_hostapd_config_defaults_bss_exit:


// sdk_hostapd_config_defaults
// Return size: 0
void sdk_hostapd_config_defaults()
sdk_hostapd_config_defaults_entry:
	// succ:  l4022A744
l4022A744:
	a1 = fp
	a2 = 0x00000064
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1:word32] = a0
	a0 = 0x402142E8
	v7 = a0
	a0 = 0x4022A756
	call v7 (retsize: 0;)
	a13 = a2
	a2 = 0x000000CC
	a0 = 0x402142E8
	v8 = a0
	a0 = 0x4022A761
	call v8 (retsize: 0;)
	a12 = a2
	branch a13 == 0x00000000 l4022A79A
	// succ:  l4022A765 l4022A79A
l4022A765:
	branch a2 == 0x00000000 l4022A79A
	// succ:  l4022A767 l4022A79A
l4022A767:
	a0 = 0x4022A76A
	call fn4032A6FC (retsize: 0;)
	Mem0[a13:word32] = a12
	a0 = 60
	a2 = 0x000000FF
	a3 = 12
	a4 = 0x00000064
	a5 = 1
	a6 = -1
	Mem0[a13 + 0x00000010:word32] = a6
	Mem0[a13 + 0x00000014:word32] = a6
	Mem0[a13 + 0x00000008:word32] = a5
	Mem0[a13 + 0x00000018:byte] = a5
	Mem0[a13 + 0x0000000C:word16] = a4
	Mem0[a13 + 0x00000044:word16] = a3
	Mem0[a13 + 0x00000030:word32] = a2
	Mem0[a13 + 0x00000034:word32] = a0
	a0 = Mem0[a1 + 0x00000000:word32]
	a2 = a13
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_hostapd_config_defaults_exit
l4022A79A:
	a2 = a13
	a0 = 0x402034CC
	v13 = a0
	a0 = 0x4022A7A2
	call v13 (retsize: 0;)
	a2 = a12
	a0 = 0x402034CC
	v14 = a0
	a0 = 0x4022A7AA
	call v14 (retsize: 0;)
	a13 = 0
	// succ:  l4026A78D
l4026A78D:
sdk_hostapd_config_defaults_exit:


// sdk_hostapd_mac_comp
// Return size: 0
void sdk_hostapd_mac_comp()
sdk_hostapd_mac_comp_entry:
	// succ:  l4022A7B0
l4022A7B0:
	a1 = fp
	a4 = 6
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40202AA8
	v5 = a0
	a0 = 0x4022A7BD
	call v5 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_hostapd_mac_comp_exit
sdk_hostapd_mac_comp_exit:


// sdk_hostapd_mac_comp_empty
// Return size: 0
void sdk_hostapd_mac_comp_empty()
sdk_hostapd_mac_comp_empty_entry:
	// succ:  l4022A7C8
l4022A7C8:
	a1 = fp
	a3 = 0x4022A7C4
	a4 = 6
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a2
	Mem0[a1 + 0x0000000C:word32] = a0
	a2 = a1
	a0 = 0x40203130
	v7 = a0
	a0 = 0x4022A7DC
	call v7 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000008:word32]
	a3 = a1
	a4 = 6
	a0 = 0x40202AA8
	v8 = a0
	a0 = 0x4022A7E8
	call v8 (retsize: 0;)
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_hostapd_mac_comp_empty_exit
sdk_hostapd_mac_comp_empty_exit:


// sdk_hostapd_setup_wpa_psk
// Return size: 0
void sdk_hostapd_setup_wpa_psk()
sdk_hostapd_setup_wpa_psk_entry:
	// succ:  l4022A820
l4022A820:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = Mem0[a2 + 0x0000003C:word32]
	branch a0 == 0x00000000 l4022A845
	// succ:  l4022A829 l4022A845
l4022A829:
	a0 = Mem0[a2 + 0x00000038:word32]
	Mem0[a1:word32] = a2
	branch a0 != 0x00000000 l4022A841
	// succ:  l4022A82F l4022A841
l4022A82F:
	a2 = a2 + 16
	a0 = 0x4022A835
	call fn4032A7F0 (retsize: 0;)
	branch a2 >= 0x00000000 l4022A83D
	// succ:  l4022A838 l4022A83D
l4022A838:
	a2 = -1
	goto l4022A847
	// succ:  l4022A847
l4022A83D:
	a0 = Mem0[a1 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000038:word32]
	// succ:  l4022A841
l4022A841:
	a2 = 1
	Mem0[a0 + 0x00000004:word32] = a2
	// succ:  l4022A845
l4022A845:
	a2 = 0
	// succ:  l4022A847
l4022A847:
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_hostapd_setup_wpa_psk_exit
sdk_hostapd_setup_wpa_psk_exit:


// sdk_hostapd_wep_key_cmp
// Return size: 0
void sdk_hostapd_wep_key_cmp()
sdk_hostapd_wep_key_cmp_entry:
	// succ:  l4022A850
l4022A850:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	v5 = Mem0[a3 + 0x00000000:byte]
	a4 = (uint32) v5
	Mem0[a1 + 0x00000004:word32] = a0
	v8 = Mem0[a2 + 0x00000000:byte]
	a0 = (uint32) v8
	Mem0[a1 + 0x0000000C:word32] = a13
	branch a0 != a4 l4022A89B
	// succ:  l4022A862 l4022A89B
l4022A862:
	a6 = Mem0[a3 + 0x00000028:word32]
	a5 = Mem0[a2 + 0x00000028:word32]
	a12 = a3
	branch a5 != a6 l4022A89B
	// succ:  l4022A86B l4022A89B
l4022A86B:
	a13 = a2
	a7 = a2 + 16
	Mem0[a1:word32] = a7
	// succ:  l4022A872
l4022A872:
	a4 = Mem0[a13 + 0x00000014:word32]
	a8 = Mem0[a12 + 0x00000014:word32]
	branch a8 != a4 l4022A89B
	// succ:  l4022A879 l4022A89B
l4022A879:
	a2 = Mem0[a13 + 0x00000004:word32]
	a3 = Mem0[a12 + 0x00000004:word32]
	a0 = 0x40202AA8
	v15 = a0
	a0 = 0x4022A883
	call v15 (retsize: 0;)
	branch a2 != 0x00000000 l4022A89B
	// succ:  l4022A885 l4022A89B
l4022A885:
	a12 = a12 + 4
	a9 = Mem0[a1 + 0x00000000:word32]
	a13 = a13 + 4
	branch a13 != a9 l4022A872
	// succ:  l4022A88E l4022A872
l4022A88E:
	a2 = 0
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_hostapd_wep_key_cmp_exit
l4022A89B:
	a2 = 1
	// succ:  l4026A890
l4026A890:
sdk_hostapd_wep_key_cmp_exit:


// sdk_hostapd_maclist_found
// Return size: 0
void sdk_hostapd_maclist_found()
sdk_hostapd_maclist_found_entry:
	// succ:  l4022A8A0
l4022A8A0:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000014:word32] = a14
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x00000020:word32] = a4
	Mem0[a1 + 0x00000010:word32] = a13
	Mem0[a1 + 0x00000018:word32] = a15
	Mem0[a1 + 0x0000000C:word32] = a12
	a15 = a4
	a12 = a3 - 1
	branch a12 < 0x00000000 l4022A8F8
	// succ:  l4022A8B6 l4022A8F8
l4022A8B6:
	a13 = 0
	Mem0[a1 + 0x00000004:word32] = a5
	Mem0[a1:word32] = a2
	// succ:  l4022A8BC
l4022A8BC:
	a4 = 6
	a0 = a12 + a13
	a3 = Mem0[a1 + 0x00000000:word32]
	a14 = a0 + 1
	branch a0 < 0x00000000 l4022A8C7
	// succ:  l4022A8C4_1 l4022A8C7
l4022A8C4_1:
	a14 = a0
	// succ:  l4022A8C7
l4022A8C7:
	a14 = a14 >> 1
	a2 = a14 + a14 * 0x00000002
	a2 = a3 + a2 * 0x00000004
	a3 = a15
	Mem0[a1 + 0x0000001C:word32] = a2
	a0 = 0x40202AA8
	v12 = a0
	a0 = 0x4022A8DA
	call v12 (retsize: 0;)
	branch a2 != 0x00000000 l4022A8EB
	// succ:  l4022A8DC l4022A8EB
l4022A8DC:
	a2 = Mem0[a1 + 0x00000004:word32]
	a3 = Mem0[a1 + 0x0000001C:word32]
	branch a2 == 0x00000000 l4022A8E6
	// succ:  l4022A8E2 l4022A8E6
l4022A8E2:
	a3 = Mem0[a3 + 0x00000008:word32]
	Mem0[a2:word32] = a3
	// succ:  l4022A8E6
l4022A8E6:
	a2 = 1
	goto l4022A8FA
	// succ:  l4022A8FA
l4022A8EB:
	branch a2 >= 0x00000000 l4022A8F3
	// succ:  l4022A8EE l4022A8F3
l4022A8EE:
	a13 = a14 + 1
	goto l4022A8F5
	// succ:  l4022A8F5
l4022A8F3:
	a12 = a14 - 1
	// succ:  l4022A8F5
l4022A8F5:
	branch a12 >= a13 l4022A8BC
	// succ:  l4022A8F8 l4022A8BC
l4022A8F8:
	a2 = 0
	a2 = 0
	// succ:  l4022A8FA
l4022A8FA:
	a12 = Mem0[a1 + 0x0000000C:word32]
	a13 = Mem0[a1 + 0x00000010:word32]
	a14 = Mem0[a1 + 0x00000014:word32]
	a15 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_hostapd_maclist_found_exit
sdk_hostapd_maclist_found_exit:


// sdk_hostapd_rate_found
// Return size: 0
void sdk_hostapd_rate_found()
sdk_hostapd_rate_found_entry:
	// succ:  l4022A90C
l4022A90C:
	a1 = fp
	branch a2 == 0x00000000 l4022A921
	// succ:  l4022A90E l4022A921
l4022A90E:
	a6 = Mem0[a2 + 0x00000000:word32]
	branch a6 < 0x00000000 l4022A921
	// succ:  l4022A913 l4022A921
l4022A913:
	branch a6 != a3 l4022A91A
	// succ:  l4022A916 l4022A91A
l4022A916:
	a2 = 1
	return
	// succ:  sdk_hostapd_rate_found_exit
l4022A91A:
	a6 = Mem0[a2 + 0x00000004:word32]
	a2 = a2 + 4
	branch a6 >= 0x00000000 l4022A913
	// succ:  l4022A921 l4022A913
l4022A921:
	a2 = 0
	return
	a2 = 0
	return
	// succ:  sdk_hostapd_rate_found_exit sdk_hostapd_rate_found_exit
sdk_hostapd_rate_found_exit:


// sdk_hostapd_get_psk
// Return size: 0
void sdk_hostapd_get_psk()
sdk_hostapd_get_psk_entry:
	// succ:  l4022A928
l4022A928:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000004:word32] = a0
	a14 = a4
	a0 = 1
	a13 = 0
	a12 = Mem0[a2 + 0x00000038:word32]
	branch a4 != 0x00000000 l4022A93E
	// succ:  l4022A93B_1 l4022A93E
l4022A93B_1:
	a13 = a0
	// succ:  l4022A93E
l4022A93E:
	branch a12 == 0x00000000 l4022A96B
	// succ:  l4022A940 l4022A96B
l4022A940:
	Mem0[a1:word32] = a3
	// succ:  l4022A942
l4022A942:
	branch a13 == 0x00000000 l4022A95E
	// succ:  l4022A944 l4022A95E
l4022A944:
	a2 = Mem0[a12 + 0x00000004:word32]
	branch a2 != 0x00000000 l4022A959
	// succ:  l4022A948 l4022A959
l4022A948:
	a2 = a12 + 40
	a3 = Mem0[a1 + 0x00000000:word32]
	a4 = 6
	a0 = 0x40202AA8
	v10 = a0
	a0 = 0x4022A955
	call v10 (retsize: 0;)
	a0 = 1
	branch a2 != 0x00000000 l4022A95E
	// succ:  l4022A959 l4022A95E
l4022A959:
	a2 = a12 + 8
	goto l4022A96D
	// succ:  l4022A96D
l4022A95E:
	a3 = a12 + 8
	a3 = a14 - a3
	a12 = Mem0[a12 + 0x00000000:word32]
	branch a3 != 0x00000000 l4022A968
	// succ:  l4022A965_1 l4022A968
l4022A965_1:
	a13 = a0
	// succ:  l4022A968
l4022A968:
	branch a12 != 0x00000000 l4022A942
	// succ:  l4022A96B l4022A942
l4022A96B:
	a2 = 0
	a2 = 0
	// succ:  l4022A96D
l4022A96D:
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_hostapd_get_psk_exit
sdk_hostapd_get_psk_exit:


// sdk_inc_byte_array
// Return size: 0
void sdk_inc_byte_array()
sdk_inc_byte_array_entry:
	// succ:  l4022A97C
l4022A97C:
	a1 = fp
	a3 = a3 - 1
	branch a3 < 0x00000000 l4022A997
	// succ:  l4022A981 l4022A997
l4022A981:
	a3 = a3 + a2
	a2 = a2 - 1
	// succ:  l4022A985
l4022A985:
	v6 = Mem0[a3 + 0x00000000:byte]
	a4 = (uint32) v6
	a4 = a4 + 1
	a4 = a4 & 0x000000FF
	Mem0[a3:byte] = a4
	branch a4 != 0x00000000 l4022A997
	// succ:  l4022A992 l4022A997
l4022A992:
	a3 = a3 - 1
	branch a3 != a2 l4022A985
	// succ:  l4022A997 l4022A985
l4022A997:
	return
	// succ:  sdk_inc_byte_array_exit
sdk_inc_byte_array_exit:


// sdk_hex2byte
// Return size: 0
void sdk_hex2byte()
sdk_hex2byte_entry:
	// succ:  l4022A9D0
l4022A9D0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a0
	a12 = a2
	v6 = Mem0[a2 + 0x00000000:byte]
	a2 = (uint32) v6
	a0 = 0x4022A9DF
	call fn4032A99C (retsize: 0;)
	Mem0[a1:word32] = a2
	branch a2 < 0x00000000 l4022A9FE
	// succ:  l4022A9E4 l4022A9FE
l4022A9E4:
	v7 = Mem0[a12 + 0x00000001:byte]
	a2 = (uint32) v7
	a0 = 0x4022A9EA
	call fn4032A99C (retsize: 0;)
	branch a2 < 0x00000000 l4022A9FE
	// succ:  l4022A9ED l4022A9FE
l4022A9ED:
	a0 = Mem0[a1 + 0x00000000:word32]
	a0 = a0 << 28
	a2 = a2 | a0
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_hex2byte_exit
l4022A9FE:
	a2 = -1
	// succ:  l4026A9F5
l4026A9F5:
sdk_hex2byte_exit:


// sdk_hexstr2bin
// Return size: 0
void sdk_hexstr2bin()
sdk_hexstr2bin_entry:
	// succ:  l4022AA04
l4022AA04:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000014:word32] = a4
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	a12 = a2
	a13 = a3
	a15 = a4
	branch a4 == 0x00000000 l4022AA36
	// succ:  l4022AA1B l4022AA36
l4022AA1B:
	a14 = 0
	// succ:  l4022AA1D
l4022AA1D:
	a2 = a12
	a0 = 0x4022AA22
	call fn4032A9D0 (retsize: 0;)
	branch a2 >= 0x00000000 l4022AA2A
	// succ:  l4022AA25 l4022AA2A
l4022AA25:
	a2 = -1
	goto l4022AA38
	// succ:  l4022AA38
l4022AA2A:
	a12 = a12 + 2
	Mem0[a13:byte] = a2
	a14 = a14 + 1
	a13 = a13 + 1
	branch a15 != a14 l4022AA1D
	// succ:  l4022AA36 l4022AA1D
l4022AA36:
	a2 = 0
	a2 = 0
	// succ:  l4022AA38
l4022AA38:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_hexstr2bin_exit
sdk_hexstr2bin_exit:


// sdk_wpa_get_ntp_timestamp
// Return size: 0
void sdk_wpa_get_ntp_timestamp()
sdk_wpa_get_ntp_timestamp_entry:
	// succ:  l4022AA50
l4022AA50:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a0
	a12 = a2 | a2
	a2 = a1
	a0 = 0x4022AA61
	call sdk_os_get_time (retsize: 0;)
	a2 = a12
	a3 = a1 + 8
	a4 = 4
	a8 = 0x40204510
	a6 = 0x4022AA4C
	a5 = 0x4022AA48
	a9 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a10 = a9 >>u 9
	a11 = a9 >>u 5
	a0 = a0 + a5
	a5 = a0 << 8
	a9 = a9 * a6
	a7 = a0 & a8
	a6 = a0 >>u 0x00000018 & 0x000000FF
	a9 = a9 - a11
	a7 = a7 << 24
	a5 = a5 | a7
	a9 = a9 - a10
	Mem0[a1 + 0x0000000C:word32] = a9
	a0 = a0 >>u 8
	a0 = a0 & a8
	a0 = a0 | a6
	a0 = a0 | a5
	Mem0[a1 + 0x00000008:word32] = a0
	a0 = 0x40203130
	v15 = a0
	a0 = 0x4022AAAA
	call v15 (retsize: 0;)
	a2 = a12 + 4
	a3 = a1 + 8
	a4 = 4
	a9 = Mem0[a1 + 0x0000000C:word32]
	a8 = 0x40204510
	a7 = a9 >>u 8
	a7 = a7 & a8
	a10 = a9 & a8
	a10 = a10 << 24
	a8 = a9 << 8
	a8 = a8 | a10
	a9 = a9 >>u 0x00000018 & 0x000000FF
	a7 = a7 | a9
	a7 = a7 | a8
	Mem0[a1 + 0x00000008:word32] = a7
	a0 = 0x40203130
	v16 = a0
	a0 = 0x4022AAD8
	call v16 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wpa_get_ntp_timestamp_exit
sdk_wpa_get_ntp_timestamp_exit:


// sdk_wpa_config_parse_string
// Return size: 0
void sdk_wpa_config_parse_string()
sdk_wpa_config_parse_string_entry:
	// succ:  l4022AAE4
l4022AAE4:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000008:word32] = a12
	a13 = a3
	a12 = a2
	v9 = Mem0[a2 + 0x00000000:byte]
	a0 = (uint32) v9
	a2 = 34
	branch a0 != a2 l4022AB11
	// succ:  l4022AAFC l4022AB11
l4022AAFC:
	a2 = a12
	a0 = 0x4022AB01
	call fn4030600C (retsize: 0;)
	a3 = a2 - 7
	branch a3 == 0x00000000 l4022AB8B
	// succ:  l4022AB07 l4022AB8B
l4022AB07:
	a2 = a12
	a0 = 0x4022AB0C
	call fn4030600C (retsize: 0;)
	a4 = 15
	branch a2 == a4 l4022AB8B
	// succ:  l4022AB11 l4022AB8B
l4022AB11:
	a2 = a12
	a0 = 0x4022AB16
	call fn4030600C (retsize: 0;)
	branch a2 == 5 l4022AB69
	// succ:  l4022AB19 l4022AB69
l4022AB19:
	a5 = 13
	branch a2 == a5 l4022AB69
	// succ:  l4022AB1E l4022AB69
l4022AB1E:
	branch a2 == 10 l4022AB26
	// succ:  l4022AB21 l4022AB26
l4022AB21:
	a6 = 26
	branch a2 != a6 l4022AB4A
	// succ:  l4022AB26 l4022AB4A
l4022AB26:
	a2 = a2 >>u 1
	Mem0[a1:word32] = a2
	a2 = a2 + 1
	a0 = 0x402034C4
	v13 = a0
	a0 = 0x4022AB33
	call v13 (retsize: 0;)
	a14 = a2
	branch a2 == 0x00000000 l4022AB4A
	// succ:  l4022AB37 l4022AB4A
l4022AB37:
	a2 = a12
	a3 = a14
	a4 = Mem0[a1 + 0x00000000:word32]
	a0 = 0x4022AB40
	call fn4032AA04 (retsize: 0;)
	branch a2 == 0x00000000 l4022AB4F
	// succ:  l4022AB42 l4022AB4F
l4022AB42:
	a2 = a14
	a0 = 0x402034CC
	v14 = a0
	a0 = 0x4022AB4A
	call v14 (retsize: 0;)
	// succ:  l4022AB4A
l4022AB4A:
	a14 = 0
	goto l4022AB5A
	// succ:  l4022AB5A
l4022AB4F:
	a3 = Mem0[a1 + 0x00000000:word32]
	a4 = 0
	a5 = a3 + a14
	Mem0[a5:byte] = a4
	Mem0[a13:word32] = a3
	// succ:  l4022AB5A
l4022AB5A:
	a0 = Mem0[a1 + 0x00000004:word32]
	a12 = Mem0[a1 + 0x00000008:word32]
	a2 = a14
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wpa_config_parse_string_exit
l4022AB69:
	Mem0[a13:word32] = a2
	a2 = a2 + 1
	a0 = 0x402034C4
	v15 = a0
	a0 = 0x4022AB73
	call v15 (retsize: 0;)
	a3 = a12
	a14 = a2
	a4 = Mem0[a13 + 0x00000000:word32]
	a0 = 0x40203130
	v16 = a0
	a0 = 0x4022AB7F
	call v16 (retsize: 0;)
	a7 = Mem0[a13 + 0x00000000:word32]
	a6 = 0
	a7 = a7 + a14
	Mem0[a7:byte] = a6
	goto l4026AB5A
	// succ:  l4026AB5A
l4022AB8B:
	a3 = 0x00000022
	a14 = a12 + 1
	a2 = a14 | a14
	a0 = 0x4022AB97
	call fn403111DC (retsize: 0;)
	branch a2 == 0x00000000 l4022AB4A
	// succ:  l4022AB9A l4022AB4A
l4022AB9A:
	a2 = a2 - a12
	a8 = a2 - 1
	Mem0[a13:word32] = a8
	a0 = 0x402034C4
	v19 = a0
	a0 = 0x4022ABA7
	call v19 (retsize: 0;)
	a12 = a2
	branch a2 == 0x00000000 l4022AB4A
	// succ:  l4022ABAC l4022AB4A
l4022ABAC:
	a3 = a14
	a4 = Mem0[a13 + 0x00000000:word32]
	a0 = 0x40203130
	v20 = a0
	a0 = 0x4022ABB6
	call v20 (retsize: 0;)
	a14 = a12
	a10 = Mem0[a13 + 0x00000000:word32]
	a9 = 0
	a10 = a10 + a12
	Mem0[a10:byte] = a9
	// succ:  l4026AB5A
l4026AB5A:
sdk_wpa_config_parse_string_exit:


// sdk_os_get_time
// Return size: 0
void sdk_os_get_time()
sdk_os_get_time_entry:
	// succ:  l4022ABC4
l4022ABC4:
	a1 = fp
	a2 = 0
	return
	// succ:  sdk_os_get_time_exit
sdk_os_get_time_exit:


// os_random
// Return size: 0
void os_random()
os_random_entry:
	// succ:  l4022ABCC
l4022ABCC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4022ABC8
	v4 = a0
	a0 = 0x4022ABD7
	call v4 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  os_random_exit
os_random_exit:


// os_get_random
// Return size: 0
void os_get_random()
os_get_random_entry:
	// succ:  l4022ABE0
l4022ABE0:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a14
	a12 = a2
	a14 = a3 >>u 2
	branch a14 < 1 l4022AC10
	// succ:  l4022ABF3 l4022AC10
l4022ABF3:
	a13 = 0
	// succ:  l4022ABF5
l4022ABF5:
	a0 = 0x4022ABC8
	v9 = a0
	a0 = 0x4022ABFB
	call v9 (retsize: 0;)
	a3 = a1
	Mem0[a1:word32] = a2
	a4 = 4
	a2 = a12
	a0 = 0x40203130
	v11 = a0
	a0 = 0x4022AC09
	call v11 (retsize: 0;)
	a12 = a12 + 4
	a13 = a13 + 1
	branch a13 != a14 l4022ABF5
	// succ:  l4022AC10 l4022ABF5
l4022AC10:
	a2 = 0
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 32
	return
	// succ:  os_get_random_exit
os_get_random_exit:


// sdk_pbkdf2_sha1
// Return size: 0
void sdk_pbkdf2_sha1()
sdk_pbkdf2_sha1_entry:
	// succ:  l4022AD04
l4022AD04:
	a1 = fp
	a1 = a1 - 80
	Mem0[a1 + 0x0000002C:word32] = a14
	Mem0[a1 + 0x00000020:word32] = a0
	Mem0[a1 + 0x00000034:word32] = a2
	Mem0[a1 + 0x00000038:word32] = a3
	Mem0[a1 + 0x0000003C:word32] = a4
	Mem0[a1 + 0x00000040:word32] = a5
	Mem0[a1 + 0x00000030:word32] = a15
	Mem0[a1 + 0x00000028:word32] = a13
	Mem0[a1 + 0x00000024:word32] = a12
	a13 = a6
	a12 = a7
	branch a7 == 0x00000000 l4022AD58
	// succ:  l4022AD20 l4022AD58
l4022AD20:
	a15 = 0
	// succ:  l4022AD22
l4022AD22:
	a2 = Mem0[a1 + 0x00000034:word32]
	a3 = Mem0[a1 + 0x00000038:word32]
	a4 = Mem0[a1 + 0x0000003C:word32]
	a5 = Mem0[a1 + 0x00000040:word32]
	a7 = a1
	a15 = a15 + 1
	a6 = a15
	a0 = 0x4022AD34
	call fn4032AC20 (retsize: 0;)
	branch a2 == 0x00000000 l4022AD3B
	// succ:  l4022AD36 l4022AD3B
l4022AD36:
	a2 = -1
	goto l4022AD5A
	// succ:  l4022AD5A
l4022AD3B:
	a2 = 20
	a14 = a2
	branch a2 <u a12 l4022AD44
	// succ:  l4022AD42 l4022AD44
l4022AD42:
	a14 = a12
	// succ:  l4022AD44
l4022AD44:
	a2 = a13
	a3 = a1
	a4 = a14
	a0 = 0x40203130
	v14 = a0
	a0 = 0x4022AD50
	call v14 (retsize: 0;)
	a13 = a13 + a14
	a12 = a12 - a14
	branch a12 != 0x00000000 l4022AD22
	// succ:  l4022AD58 l4022AD22
l4022AD58:
	a2 = 0
	a2 = 0
	// succ:  l4022AD5A
l4022AD5A:
	a12 = Mem0[a1 + 0x00000024:word32]
	a13 = Mem0[a1 + 0x00000028:word32]
	a14 = Mem0[a1 + 0x0000002C:word32]
	a15 = Mem0[a1 + 0x00000030:word32]
	a0 = Mem0[a1 + 0x00000020:word32]
	a1 = a1 + 80
	return
	// succ:  sdk_pbkdf2_sha1_exit
sdk_pbkdf2_sha1_exit:


// sdk_wpa_auth_for_each_sta
// Return size: 0
void sdk_wpa_auth_for_each_sta()
sdk_wpa_auth_for_each_sta_entry:
	// succ:  l4022AEAC
l4022AEAC:
	a1 = fp
	a2 = 0
	return
	// succ:  sdk_wpa_auth_for_each_sta_exit
sdk_wpa_auth_for_each_sta_exit:


// sdk_wpa_init
// Return size: 0
void sdk_wpa_init()
sdk_wpa_init_entry:
	// succ:  l4022B010
l4022B010:
	a1 = fp
	a6 = a2 | a2
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a12
	a2 = 0x00000060
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a6
	a0 = 0x402142E8
	v8 = a0
	a0 = 0x4022B029
	call v8 (retsize: 0;)
	a12 = a2
	branch a2 == 0x00000000 l4022B077
	// succ:  l4022B02E l4022B077
l4022B02E:
	a3 = Mem0[a1 + 0x00000004:word32]
	a2 = a2 + 88
	a4 = 6
	a0 = 0x40203130
	v10 = a0
	a0 = 0x4022B03B
	call v10 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = a12 + 4
	a4 = 76
	a0 = 0x40203130
	v11 = a0
	a0 = 0x4022B047
	call v11 (retsize: 0;)
	a2 = a12
	a0 = 0x4022B04C
	call sdk_wpa_auth_gen_wpa_ie (retsize: 0;)
	branch a2 == 0x00000000 l4022B059
	// succ:  l4022B04E l4022B059
l4022B04E:
	a2 = a12
	a0 = 0x402034CC
	v12 = a0
	a0 = 0x4022B056
	call v12 (retsize: 0;)
	goto l4022B077
	// succ:  l4022B077
l4022B059:
	a2 = a12
	a3 = 0
	a4 = 0
	a0 = 0x4022B062
	call fn4032AFA4 (retsize: 0;)
	Mem0[a12:word32] = a2
	branch a2 != 0x00000000 l4022B079
	// succ:  l4022B066 l4022B079
l4022B066:
	a2 = Mem0[a12 + 0x00000050:word32]
	a0 = 0x402034CC
	v13 = a0
	a0 = 0x4022B06F
	call v13 (retsize: 0;)
	a2 = a12
	a0 = 0x402034CC
	v14 = a0
	a0 = 0x4022B077
	call v14 (retsize: 0;)
	// succ:  l4022B077
l4022B077:
	a12 = 0
	// succ:  l4022B079
l4022B079:
	a2 = a12
	a0 = Mem0[a1 + 0x00000008:word32]
	a12 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wpa_init_exit
sdk_wpa_init_exit:


// sdk_wpa_auth_sta_init
// Return size: 0
void sdk_wpa_auth_sta_init()
sdk_wpa_auth_sta_init_entry:
	// succ:  l4022B084
l4022B084:
	a1 = fp
	a5 = a2
	a1 = a1 - 16
	Mem0[a1 + 0x0000000C:word32] = a12
	a2 = 0x0000019C
	Mem0[a1:word32] = a3
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a5
	a0 = 0x402142E8
	v8 = a0
	a0 = 0x4022B09A
	call v8 (retsize: 0;)
	a12 = a2
	branch a2 != 0x00000000 l4022B0A3
	// succ:  l4022B09E l4022B0A3
l4022B09E:
	a12 = 0
	goto l4022B0B7
	// succ:  l4022B0B7
l4022B0A3:
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = a2 + 8
	a4 = 6
	a0 = 0x40203130
	v10 = a0
	a0 = 0x4022B0AF
	call v10 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000004:word32]
	Mem0[a12:word32] = a0
	a0 = Mem0[a0 + 0x00000000:word32]
	Mem0[a12 + 0x00000004:word32] = a0
	// succ:  l4022B0B7
l4022B0B7:
	a2 = a12
	a0 = Mem0[a1 + 0x00000008:word32]
	a12 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wpa_auth_sta_init_exit
sdk_wpa_auth_sta_init_exit:


// sdk_wpa_auth_sta_associated
// Return size: 0
void sdk_wpa_auth_sta_associated()
sdk_wpa_auth_sta_associated_entry:
	// succ:  l4022B0C4
l4022B0C4:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a3 | a3
	branch a2 == 0x00000000 l4022B139
	// succ:  l4022B0D3 l4022B139
l4022B0D3:
	a0 = Mem0[a2 + 0x00000004:word32]
	branch a0 == 0x00000000 l4022B139
	// succ:  l4022B0D8 l4022B139
l4022B0D8:
	branch a3 == 0x00000000 l4022B139
	// succ:  l4022B0DB l4022B139
l4022B0DB:
	a2 = 0x000000F4
	a2 = a3 + a2
	v7 = Mem0[a2 + 0x00000080:byte]
	a0 = (uint32) v7
	branch (a0 & 0x00000008) == 0x00000000 l4022B101
	// succ:  l4022B0E6 l4022B101
l4022B0E6:
	a2 = 0x000000FC
	a4 = 48
	a2 = a3 + a2
	a3 = 0
	a0 = 0x4020267C
	v9 = a0
	a0 = 0x4022B0F5
	call v9 (retsize: 0;)
	a2 = a12
	a3 = 1
	Mem0[a12 + 0x00000024:word32] = a3
	a0 = 0x4022B0FE
	call fn4022C984 (retsize: 0;)
	goto l4022B130
	// succ:  l4022B130
l4022B101:
	a4 = 0x00000001
	a6 = 0x00000008
	a5 = 0x000000F7
	a5 = a0 & a5
	a5 = a5 | a6
	Mem0[a2 + 0x00000080:byte] = a5
	Mem0[a3 + 0x00000018:word32] = a4
	a2 = a3
	a0 = 0x4022B11B
	call fn4022C984 (retsize: 0;)
	branch a2 != 1 l4022B123
	// succ:  l4022B11E l4022B123
l4022B11E:
	a2 = 1
	goto l4022B130
	// succ:  l4022B130
l4022B123:
	a2 = a12
	a6 = 0
	a7 = 1
	Mem0[a12 + 0x00000020:word32] = a7
	Mem0[a12 + 0x00000018:word32] = a6
	a0 = 0x4022B130
	call fn4022C984 (retsize: 0;)
	// succ:  l4022B130
l4022B130:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wpa_auth_sta_associated_exit
l4022B139:
	a2 = -1
	// succ:  l4026B130
l4026B130:
sdk_wpa_auth_sta_associated_exit:


// sdk_wpa_auth_sta_no_wpa
// Return size: 0
void sdk_wpa_auth_sta_no_wpa()
sdk_wpa_auth_sta_no_wpa_entry:
	// succ:  l4022B140
l4022B140:
	a1 = fp
	branch a2 == 0x00000000 l4022B147
	// succ:  l4022B142 l4022B147
l4022B142:
	a3 = 0
	Mem0[a2 + 0x00000194:word32] = a3
	// succ:  l4022B147
l4022B147:
	return
	// succ:  sdk_wpa_auth_sta_no_wpa_exit
sdk_wpa_auth_sta_no_wpa_exit:


// sdk_wpa_auth_sta_deinit
// Return size: 0
void sdk_wpa_auth_sta_deinit()
sdk_wpa_auth_sta_deinit_entry:
	// succ:  l4022B18C
l4022B18C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a2 == 0x00000000 l4022B1B2
	// succ:  l4022B193 l4022B1B2
l4022B193:
	a4 = 0x000000F4
	a4 = a2 + a4
	v6 = Mem0[a4 + 0x00000080:byte]
	a0 = (uint32) v6
	a6 = 4
	branch (a0 & 0x00000002) == 0x00000000 l4022B1AF
	// succ:  l4022B1A0 l4022B1AF
l4022B1A0:
	a5 = 0x000000FB
	a5 = a0 & a5
	a5 = a5 | a6
	Mem0[a4 + 0x00000080:byte] = a5
	goto l4022B1B2
	// succ:  l4022B1B2
l4022B1AF:
	a0 = 0x4022B1B2
	call fn4032B14C (retsize: 0;)
	// succ:  l4022B1B2
l4022B1B2:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wpa_auth_sta_deinit_exit
sdk_wpa_auth_sta_deinit_exit:


// sdk_wpa_receive
// Return size: 0
void sdk_wpa_receive()
sdk_wpa_receive_entry:
	// succ:  l4022B268
l4022B268:
	a1 = fp
	a9 = a2
	a6 = a4
	a1 = a1 - 96
	Mem0[a1 + 0x00000048:word32] = a13
	Mem0[a1 + 0x0000004C:word32] = a14
	Mem0[a1 + 0x00000050:word32] = a15
	Mem0[a1 + 0x00000044:word32] = a12
	Mem0[a1 + 0x00000040:word32] = a0
	a12 = a3
	branch a2 == 0x00000000 l4022B2E9
	// succ:  l4022B283 l4022B2E9
l4022B283:
	a0 = Mem0[a2 + 0x00000004:word32]
	branch a0 == 0x00000000 l4022B2E9
	// succ:  l4022B288 l4022B2E9
l4022B288:
	branch a3 == 0x00000000 l4022B2E9
	// succ:  l4022B28B l4022B2E9
l4022B28B:
	a3 = 0x00000062
	branch a3 >=u a5 l4022B2E9
	// succ:  l4022B291 l4022B2E9
l4022B291:
	v14 = Mem0[a4 + 0x00000006:byte]
	a15 = (uint32) v14
	v15 = Mem0[a4 + 0x00000061:byte]
	a3 = (uint32) v15
	v16 = Mem0[a4 + 0x00000005:byte]
	a0 = (uint32) v16
	a3 = a3 << 24
	a0 = a0 << 24
	a15 = a15 | a0
	v17 = Mem0[a4 + 0x00000062:byte]
	a0 = (uint32) v17
	a4 = a5 - 99
	a0 = a0 | a3
	a0 = a0 & 0x0000FFFF
	branch a4 <u a0 l4022B2E9
	// succ:  l4022B2B2 l4022B2E9
l4022B2B2:
	a11 = 0x000000FE
	Mem0[a1 + 0x00000054:word32] = a6
	v20 = Mem0[a6 + 0x00000004:byte]
	a10 = (uint32) v20
	Mem0[a1 + 0x00000024:word32] = a0
	Mem0[a1 + 0x00000030:word32] = a5
	Mem0[a1 + 0x00000028:word32] = a9
	a14 = 0x000000B0
	a3 = Mem0[a12 + 0x0000018C:word32]
	a14 = a12 + a14
	branch a3 != 2 l4022B2E6
	// succ:  l4022B2CC l4022B2E6
l4022B2CC:
	branch a10 == a11 l4022B2D2
	// succ:  l4022B2CF l4022B2D2
l4022B2CF:
	branch a10 != 2 l4022B2E9
	// succ:  l4022B2D2 l4022B2E9
l4022B2D2:
	a2 = 0x4022B260
	a6 = 0x402045E8
	branch (~a15 & a2) != 0x00000000 l4022B2FD
	// succ:  l4022B2DB l4022B2FD
l4022B2DB:
	a3 = a15 >>u 0x0000000A & 0x00000001
	branch a3 == 0x00000000 l4022B467
	// succ:  l4022B2E1 l4022B467
l4022B2E1:
	a13 = 6
	goto l4022B311
	// succ:  l4022B311
l4022B2E6:
	branch a10 == a11 l4022B2D2
	// succ:  l4022B2E9 l4022B2D2
l4022B2E9:
	a12 = Mem0[a1 + 0x00000044:word32]
	a13 = Mem0[a1 + 0x00000048:word32]
	a14 = Mem0[a1 + 0x0000004C:word32]
	a15 = Mem0[a1 + 0x00000050:word32]
	a0 = Mem0[a1 + 0x00000040:word32]
	a1 = a1 + 96
	return
	a12 = Mem0[a1 + 0x00000044:word32]
	a13 = Mem0[a1 + 0x00000048:word32]
	a14 = Mem0[a1 + 0x0000004C:word32]
	a15 = Mem0[a1 + 0x00000050:word32]
	a0 = Mem0[a1 + 0x00000040:word32]
	a1 = a1 + 96
	return
	// succ:  sdk_wpa_receive_exit sdk_wpa_receive_exit
l4022B2FD:
	a4 = a15 >>u 0x0000000D & 0x00000001
	branch a4 == 0x00000000 l4022B46C
	// succ:  l4022B303 l4022B46C
l4022B303:
	a13 = 5
	goto l4022B311
	// succ:  l4022B311
l4022B308:
	a5 = 0
	a7 = Mem0[a1 + 0x00000024:word32]
	a13 = 1
	branch a7 == 0x00000000 l4022B311
	// succ:  l4022B30E_1 l4022B311
l4022B30E_1:
	a13 = a5
	// succ:  l4022B311
l4022B311:
	branch a13 == 3 l4022B31C
	branch a13 == 3 l4022B31C
	// succ:  l4022B314 l4022B31C
l4022B314:
	branch a13 == 0x00000000 l4022B31C
	branch a13 == 0x00000000 l4022B31C
	// succ:  l4022B316 l4022B31C
l4022B316:
	branch a13 == 1 l4022B31C
	branch a13 == 1 l4022B31C
	// succ:  l4022B319 l4022B31C
l4022B319:
	branch a13 != 2 l4022B344
	branch a13 != 2 l4022B344
	// succ:  l4022B31C l4022B344
l4022B31C:
	a0 = Mem0[a14 + 0x000000E0:word32]
	branch a0 == 8 l4022B325
	a0 = Mem0[a14 + 0x000000E0:word32]
	branch a0 == 8 l4022B325
	// succ:  l4022B322 l4022B325
l4022B322:
	branch a0 != 64 l4022B344
	branch a0 != 64 l4022B344
	// succ:  l4022B325 l4022B344
l4022B325:
	a2 = a12 | a12
	a0 = 0x4022B32B
	call fn4032AEB4 (retsize: 0;)
	branch a2 == 0x00000000 l4022B334
	a2 = a12 | a12
	a0 = 0x4022B32B
	call fn4032AEB4 (retsize: 0;)
	branch a2 == 0x00000000 l4022B334
	// succ:  l4022B32E l4022B334
l4022B32E:
	a8 = a15 & 0x00000007
	branch a8 != 3 l4022B2E9
	a8 = a15 & 0x00000007
	branch a8 != 3 l4022B2E9
	// succ:  l4022B334 l4022B2E9
l4022B334:
	a2 = a12
	a0 = 0x4022B339
	call fn4032AEB4 (retsize: 0;)
	a6 = 0x402045E8
	branch a2 != 0x00000000 l4022B344
	a2 = a12
	a0 = 0x4022B339
	call fn4032AEB4 (retsize: 0;)
	a6 = 0x402045E8
	branch a2 != 0x00000000 l4022B344
	// succ:  l4022B33E l4022B344
l4022B33E:
	a9 = a15 & 0x00000007
	branch a9 != 2 l4022B2E9
	a9 = a15 & 0x00000007
	branch a9 != 2 l4022B2E9
	// succ:  l4022B344 l4022B2E9
l4022B344:
	a10 = a15 & a6
	Mem0[a1 + 0x0000003C:word32] = a10
	branch (a15 & a6) == 0x00000000 l4022B366
	a10 = a15 & a6
	Mem0[a1 + 0x0000003C:word32] = a10
	branch (a15 & a6) == 0x00000000 l4022B366
	// succ:  l4022B34C l4022B366
l4022B34C:
	a0 = Mem0[a12 + 0x00000180:word32]
	branch a0 == 0x00000000 l4022B366
	a0 = Mem0[a12 + 0x00000180:word32]
	branch a0 == 0x00000000 l4022B366
	// succ:  l4022B351 l4022B366
l4022B351:
	a4 = 8
	a2 = Mem0[a1 + 0x00000054:word32]
	a3 = 0x00000175
	a3 = a12 + a3
	a2 = a2 + 9
	a0 = 0x40202AA8
	v22 = a0
	a0 = 0x4022B363
	call v22 (retsize: 0;)
	branch a2 < 1 l4022B2E9
	a4 = 8
	a2 = Mem0[a1 + 0x00000054:word32]
	a3 = 0x00000175
	a3 = a12 + a3
	a2 = a2 + 9
	a0 = 0x40202AA8
	v30 = a0
	a0 = 0x4022B363
	call v30 (retsize: 0;)
	branch a2 < 1 l4022B2E9
	// succ:  l4022B366 l4022B2E9
l4022B366:
	a3 = Mem0[a1 + 0x0000003C:word32]
	branch a3 != 0x00000000 l4022B3C3
	a3 = Mem0[a1 + 0x0000003C:word32]
	branch a3 != 0x00000000 l4022B3C3
	// succ:  l4022B36B l4022B3C3
l4022B36B:
	a3 = Mem0[a1 + 0x00000054:word32]
	a2 = 0x000000FC
	a2 = a12 + a2
	a3 = a3 + 9
	Mem0[a1 + 0x00000038:word32] = a3
	a0 = 0x4022B37A
	call fn4032B1CC (retsize: 0;)
	branch a2 != 0x00000000 l4022B3C3
	a3 = Mem0[a1 + 0x00000054:word32]
	a2 = 0x000000FC
	a2 = a12 + a2
	a3 = a3 + 9
	Mem0[a1 + 0x00000038:word32] = a3
	a0 = 0x4022B37A
	call fn4032B1CC (retsize: 0;)
	branch a2 != 0x00000000 l4022B3C3
	// succ:  l4022B37D l4022B3C3
l4022B37D:
	branch a13 != 0x00000000 l4022B609
	branch a13 != 0x00000000 l4022B609
	// succ:  l4022B380 l4022B609
l4022B380:
	a3 = Mem0[a1 + 0x00000038:word32]
	a2 = 0x0000012C
	a2 = a12 + a2
	Mem0[a1 + 0x00000034:word32] = a2
	a0 = 0x4022B38C
	call fn4032B1CC (retsize: 0;)
	branch a2 == 0x00000000 l4022B5FD
	a3 = Mem0[a1 + 0x00000038:word32]
	a2 = 0x0000012C
	a2 = a12 + a2
	Mem0[a1 + 0x00000034:word32] = a2
	a0 = 0x4022B38C
	call fn4032B1CC (retsize: 0;)
	branch a2 == 0x00000000 l4022B5FD
	// succ:  l4022B38F l4022B5FD
l4022B38F:
	a3 = Mem0[a12 + 0x00000010:word32]
	a3 = a3 - 10
	branch a3 != 0x00000000 l4022B5FD
	a3 = Mem0[a12 + 0x00000010:word32]
	a3 = a3 - 10
	branch a3 != 0x00000000 l4022B5FD
	// succ:  l4022B397 l4022B5FD
l4022B397:
	a2 = a12 + 108
	a3 = Mem0[a1 + 0x00000054:word32]
	a4 = 32
	a3 = a3 + 17
	a0 = 0x40202AA8
	v23 = a0
	a0 = 0x4022B3A8
	call v23 (retsize: 0;)
	branch a2 == 0x00000000 l4022B5FD
	a2 = a12 + 108
	a3 = Mem0[a1 + 0x00000054:word32]
	a4 = 32
	a3 = a3 + 17
	a0 = 0x40202AA8
	v31 = a0
	a0 = 0x4022B3A8
	call v31 (retsize: 0;)
	branch a2 == 0x00000000 l4022B5FD
	// succ:  l4022B3AB l4022B5FD
l4022B3AB:
	a2 = Mem0[a1 + 0x00000034:word32]
	a5 = 0x000000BF
	v24 = Mem0[a14 + 0x000000C4:byte]
	a4 = (uint32) v24
	a3 = Mem0[a1 + 0x00000038:word32]
	a4 = a4 & a5
	a5 = 64
	a4 = a4 | a5
	Mem0[a14 + 0x000000C4:byte] = a4
	a0 = 0x4022B3C3
	call fn4032B20C (retsize: 0;)
	a2 = Mem0[a1 + 0x00000034:word32]
	a5 = 0x000000BF
	v32 = Mem0[a14 + 0x000000C4:byte]
	a4 = (uint32) v32
	a3 = Mem0[a1 + 0x00000038:word32]
	a4 = a4 & a5
	a5 = 64
	a4 = a4 | a5
	Mem0[a14 + 0x000000C4:byte] = a4
	a0 = 0x4022B3C3
	call fn4032B20C (retsize: 0;)
	// succ:  l4022B3C3
l4022B3C3:
	branch a13 == 0x00000000 l4022B474
	// succ:  l4022B3C6 l4022B474
l4022B3C6:
	a6 = a13 - 1
	branch a6 == 0x00000000 l4022B49D
	// succ:  l4022B3CB l4022B49D
l4022B3CB:
	a7 = a13 - 2
	branch a7 == 0x00000000 l4022B558
	// succ:  l4022B3D1 l4022B558
l4022B3D1:
	branch a13 == 3 l4022B3DD
	// succ:  l4022B3D4 l4022B3DD
l4022B3D4:
	branch a13 >=u 0x00000007 l4022B3DD
	// succ:  l4022B3D7 l4022B3DD
l4022B3D7:
	branch a13 <u 0x00000004 l4022B3DD
	// succ:  l4022B3DA l4022B3DD
l4022B3DA:
	goto l4026B2E9
	// succ:  l4026B2E9
l4022B3DD:
	a8 = a15 >>u 0x00000007 & 0x00000001
	branch a8 != 0x00000000 l4022B2E9
	// succ:  l4022B3E3 l4022B2E9
l4022B3E3:
	a9 = a15 >>u 0x00000008 & 0x00000001
	branch a9 == 0x00000000 l4022B2E9
	// succ:  l4022B3E9 l4022B2E9
l4022B3E9:
	a0 = 0
	a10 = Mem0[a14 + 0x0000003C:word32]
	Mem0[a12 + 0x00000044:word32] = a0
	branch a10 == 0x00000000 l4022B41C
	// succ:  l4022B3F2 l4022B41C
l4022B3F2:
	v33 = Mem0[a14 + 0x000000C4:byte]
	a11 = (uint32) v33
	branch (a11 & 0x00000040) != 0x00000000 l4022B41C
	// succ:  l4022B3F8 l4022B41C
l4022B3F8:
	a3 = Mem0[a1 + 0x00000054:word32]
	a4 = Mem0[a1 + 0x00000030:word32]
	a2 = 0x000000AC
	a2 = a12 + a2
	a0 = 0x4022B405
	call fn4022BB30 (retsize: 0;)
	branch a2 != 0x00000000 l4022B2E9
	// succ:  l4022B408 l4022B2E9
l4022B408:
	a2 = 0x4022B264
	a3 = 1
	a4 = a12
	Mem0[a12 + 0x00000044:word32] = a3
	a3 = Mem0[a1 + 0x00000028:word32]
	a0 = 0x4022B417
	call sdk_eloop_cancel_timeout (retsize: 0;)
	a4 = 0
	Mem0[a14 + 0x000000E8:word32] = a4
	// succ:  l4022B41C
l4022B41C:
	a5 = Mem0[a1 + 0x0000003C:word32]
	branch a5 == 0x00000000 l4022B5BE
	// succ:  l4022B421 l4022B5BE
l4022B421:
	a6 = Mem0[a12 + 0x00000044:word32]
	branch a6 == 0x00000000 l4022B2E9
	// succ:  l4022B427 l4022B2E9
l4022B427:
	a4 = 8
	a3 = 1
	a2 = 0x00000175
	Mem0[a12 + 0x00000180:word32] = a3
	a3 = Mem0[a1 + 0x00000054:word32]
	a2 = a12 + a2
	a3 = a3 + 9
	a0 = 0x40203130
	v34 = a0
	a0 = 0x4022B43E
	call v34 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000024:word32]
	a4 = a13 - 6
	branch a4 == 0x00000000 l4022B2E9
	// succ:  l4022B446 l4022B2E9
l4022B446:
	a13 = Mem0[a1 + 0x00000028:word32]
	a6 = 8
	a6 = a15 & a6
	branch (a15 & 0x00000400) == 0x00000000 l4022B4B8
	// succ:  l4022B450 l4022B4B8
l4022B450:
	a2 = a13
	a3 = a12
	a7 = 1
	a4 = 0
	branch a6 != 0x00000000 l4022B45B
	// succ:  l4022B458_1 l4022B45B
l4022B458_1:
	a4 = a7
	// succ:  l4022B45B
l4022B45B:
	a0 = 0x4022B45E
	call fn4032B24C (retsize: 0;)
	branch a2 < 1 l4022B464
	// succ:  l4022B461 l4022B464
l4022B461:
	goto l4026B2E9
	// succ:  l4026B2E9
l4022B464:
	goto l4022B4ED
	// succ:  l4022B4ED
l4022B467:
	a13 = 4
	goto l4026B311
	// succ:  l4026B311
l4022B46C:
	branch (a15 & 0x00000800) == 0x00000000 l4022B4AD
	// succ:  l4022B46F l4022B4AD
l4022B46F:
	a13 = 3
	goto l4026B311
	// succ:  l4026B311
l4022B474:
	a0 = Mem0[a12 + 0x00000010:word32]
	branch a0 == 7 l4022B48B
	// succ:  l4022B479 l4022B48B
l4022B479:
	branch a0 == 8 l4022B48B
	// succ:  l4022B47C l4022B48B
l4022B47C:
	v35 = Mem0[a14 + 0x000000C4:byte]
	a8 = (uint32) v35
	a8 = a8 >>u 0x00000006 & 0x00000001
	branch a8 == 0x00000000 l4022B2E9
	// succ:  l4022B485 l4022B2E9
l4022B485:
	a9 = a0 - 10
	branch a9 != 0x00000000 l4022B2E9
	// succ:  l4022B48B l4022B2E9
l4022B48B:
	a10 = Mem0[a12 + 0x00000004:word32]
	a10 = Mem0[a10 + 0x000000D0:word32]
	branch a10 == 0x00000000 l4022B567
	// succ:  l4022B493 l4022B567
l4022B493:
	a2 = Mem0[a1 + 0x00000028:word32]
	a3 = a12 + 8
	a0 = 0x4022B49A
	call fn4032AEB0 (retsize: 0;)
	goto l4026B2E9
	// succ:  l4026B2E9
l4022B49D:
	a11 = Mem0[a12 + 0x00000010:word32]
	a11 = a11 - 10
	branch a11 != 0x00000000 l4022B2E9
	// succ:  l4022B4A5 l4022B2E9
l4022B4A5:
	a0 = Mem0[a14 + 0x0000003C:word32]
	branch a0 != 0x00000000 l4022B3DD
	// succ:  l4022B4AA l4022B3DD
l4022B4AA:
	goto l4026B2E9
	// succ:  l4026B2E9
l4022B4AD:
	a2 = a15 >>u 0x00000003 & 0x00000001
	branch a2 != 0x00000000 l4022B308
	// succ:  l4022B4B3 l4022B308
l4022B4B3:
	a13 = 2
	goto l4026B311
	// succ:  l4026B311
l4022B4B8:
	a3 = 8
	branch (a15 & a3) == 0x00000000 l4022B4C5
	// succ:  l4022B4BD l4022B4C5
l4022B4BD:
	a2 = a12
	a0 = 0x4022B4C2
	call fn4032B1BC (retsize: 0;)
	goto l4022B4ED
	// succ:  l4022B4ED
l4022B4C5:
	branch a0 == 0x00000000 l4022B4DC
	// succ:  l4022B4C8 l4022B4DC
l4022B4C8:
	a4 = a1 | a1
	a2 = Mem0[a1 + 0x00000054:word32]
	a3 = a0
	a2 = a2 + 99
	a0 = 0x4022B4D6
	call sdk_wpa_parse_kde_ies (retsize: 0;)
	branch a2 != 0x00000000 l4022B4DC
	// succ:  l4022B4D8 l4022B4DC
l4022B4D8:
	a3 = Mem0[a1 + 0x0000001C:word32]
	branch a3 != 0x00000000 l4022B4ED
	// succ:  l4022B4DC l4022B4ED
l4022B4DC:
	a2 = 0x4022AEB8
	a3 = a13
	a4 = 0
	a0 = 0x4022B4E6
	call sdk_eloop_cancel_timeout (retsize: 0;)
	a2 = a13
	a3 = 0
	a0 = 0x4022B4ED
	call fn4032AEBC (retsize: 0;)
	// succ:  l4022B4ED
l4022B4ED:
	a2 = Mem0[a14 + 0x000000BC:word32]
	a0 = 0x402034CC
	v36 = a0
	a0 = 0x4022B4F6
	call v36 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000030:word32]
	a0 = 0x402034C4
	v37 = a0
	a0 = 0x4022B4FF
	call v37 (retsize: 0;)
	Mem0[a14 + 0x000000BC:word32] = a2
	branch a2 == 0x00000000 l4022B2E9
	// succ:  l4022B505 l4022B2E9
l4022B505:
	a3 = Mem0[a1 + 0x00000054:word32]
	a4 = Mem0[a1 + 0x00000030:word32]
	a0 = 0x40203130
	v38 = a0
	a0 = 0x4022B511
	call v38 (retsize: 0;)
	a2 = a12 + 108
	a6 = a15 >>u 0x00000003 & 0x00000001
	a7 = 0x00000001
	a5 = 1
	a4 = Mem0[a1 + 0x0000003C:word32]
	a9 = 0x000000DF
	v39 = Mem0[a14 + 0x000000C4:byte]
	a8 = (uint32) v39
	a3 = Mem0[a1 + 0x00000054:word32]
	a10 = Mem0[a1 + 0x00000030:word32]
	Mem0[a14 + 0x000000C0:word32] = a10
	a3 = a3 + 17
	a8 = a8 & a9
	branch a4 == 0x00000000 l4022B535
	// succ:  l4022B532_1 l4022B535
l4022B532_1:
	a4 = a5
	// succ:  l4022B535
l4022B535:
	a9 = a15 >>u 0x00000009 & 0x00000001
	a9 = a9 << 27
	a8 = a8 | a9
	Mem0[a14 + 0x000000C4:byte] = a8
	Mem0[a12 + 0x00000038:word32] = a7
	Mem0[a12 + 0x00000040:word32] = a4
	Mem0[a12 + 0x0000003C:word32] = a6
	a4 = 32
	a0 = 0x40203130
	v40 = a0
	a0 = 0x4022B550
	call v40 (retsize: 0;)
	a2 = a12
	a0 = 0x4022B555
	call fn4022C984 (retsize: 0;)
	goto l4026B2E9
	// succ:  l4026B2E9
l4022B558:
	a11 = Mem0[a12 + 0x00000014:word32]
	a11 = a11 - 1
	branch a11 != 0x00000000 l4022B2E9
	// succ:  l4022B55F l4022B2E9
l4022B55F:
	a0 = Mem0[a14 + 0x0000003C:word32]
	branch a0 != 0x00000000 l4022B3DD
	// succ:  l4022B564 l4022B3DD
l4022B564:
	goto l4026B2E9
	// succ:  l4026B2E9
l4022B567:
	a3 = Mem0[a1 + 0x00000024:word32]
	a2 = Mem0[a1 + 0x00000054:word32]
	a4 = a1 | a1
	a2 = a2 + 99
	a0 = 0x4022B576
	call sdk_wpa_parse_kde_ies (retsize: 0;)
	branch a2 < 0x00000000 l4022B2E9
	// succ:  l4022B579 l4022B2E9
l4022B579:
	a5 = Mem0[a1 + 0x00000008:word32]
	branch a5 != 0x00000000 l4022B585
	// succ:  l4022B57E l4022B585
l4022B57E:
	a5 = Mem0[a1 + 0x00000000:word32]
	a6 = Mem0[a1 + 0x00000004:word32]
	goto l4022B587
	// succ:  l4022B587
l4022B585:
	a6 = Mem0[a1 + 0x0000000C:word32]
	// succ:  l4022B587
l4022B587:
	a3 = Mem0[a14 + 0x000000DC:word32]
	branch a3 != 2 l4022B59C
	// succ:  l4022B58D l4022B59C
l4022B58D:
	a8 = Mem0[a14 + 0x000000E4:word32]
	a0 = 1
	branch a8 == 64 l4022B59A
	// succ:  l4022B595 l4022B59A
l4022B595:
	branch a8 == 32 l4022B59A
	// succ:  l4022B598 l4022B59A
l4022B598:
	a0 = 0
	// succ:  l4022B59A
l4022B59A:
	branch a0 != 0x00000000 l4022B5A1
	// succ:  l4022B59C l4022B5A1
l4022B59C:
	a2 = 0
	goto l4022B5A3
	// succ:  l4022B5A3
l4022B5A1:
	a2 = 1
	// succ:  l4022B5A3
l4022B5A3:
	a3 = Mem0[a14 + 0x000000D4:word32]
	branch a3 == 0x00000000 l4022B5B1
	// succ:  l4022B5A8 l4022B5B1
l4022B5A8:
	a4 = Mem0[a14 + 0x000000D8:word32]
	a0 = 0x4022B5AE
	call sdk_wpa_compare_rsn_ie (retsize: 0;)
	branch a2 == 0x00000000 l4022B3DD
	// succ:  l4022B5B1 l4022B3DD
l4022B5B1:
	a2 = Mem0[a1 + 0x00000028:word32]
	a3 = a12 + 8
	a0 = 0x4022B5B8
	call fn4032AEB0 (retsize: 0;)
	goto l4026B2E9
	// succ:  l4026B2E9
l4022B5BE:
	a3 = Mem0[a1 + 0x00000054:word32]
	a2 = 0x000000FC
	a2 = a12 + a2
	Mem0[a1 + 0x0000002C:word32] = a2
	a3 = a3 + 9
	a0 = 0x4022B5CD
	call fn4032B20C (retsize: 0;)
	a0 = 0x0000012C
	a0 = a12 + a0
	branch a13 != 0x00000000 l4022B5E5
	// succ:  l4022B5D4 l4022B5E5
l4022B5D4:
	a4 = 48
	a13 = Mem0[a1 + 0x0000002C:word32]
	a2 = a0
	a3 = a13
	a0 = 0x40203130
	v41 = a0
	a0 = 0x4022B5E2
	call v41 (retsize: 0;)
	goto l4022B5F3
	// succ:  l4022B5F3
l4022B5E5:
	a13 = Mem0[a1 + 0x0000002C:word32]
	a3 = 0
	a4 = 48
	a2 = a0
	a0 = 0x4020267C
	v42 = a0
	a0 = 0x4022B5F3
	call v42 (retsize: 0;)
	// succ:  l4022B5F3
l4022B5F3:
	a2 = a13
	a3 = 0
	a0 = 0x4022B5FA
	call fn4032B20C (retsize: 0;)
	goto l4026B4ED
	// succ:  l4026B4ED
l4022B5FD:
	branch a13 != 0x00000000 l4022B609
	// succ:  l4022B5FF l4022B609
l4022B5FF:
	a3 = Mem0[a1 + 0x00000038:word32]
	a2 = 0x0000012C
	a2 = a12 + a2
	a0 = 0x4022B609
	call fn4032B1CC (retsize: 0;)
	// succ:  l4022B609
l4022B609:
	a3 = a12
	a0 = a12 + 48
	// succ:  l4022B60E
l4022B60E:
	a5 = a3 + 0x00000100
	v25 = Mem0[a5 + 0x00000007:byte]
	a4 = (uint32) v25
	v26 = Mem0[a5 + 0x00000006:byte]
	a6 = (uint32) v26
	a4 = a4 << 24
	a4 = a4 | a6
	a4 = a4 << 24
	v27 = Mem0[a5 + 0x00000005:byte]
	a6 = (uint32) v27
	v28 = Mem0[a5 + 0x00000004:byte]
	a5 = (uint32) v28
	a4 = a4 | a6
	a4 = a4 << 24
	a4 = a4 | a5
	branch a4 == 0x00000000 l4022B2E9
	// succ:  l4022B632 l4022B2E9
l4022B632:
	a3 = a3 + 12
	branch a3 != a0 l4022B60E
	// succ:  l4022B637 l4022B60E
l4022B637:
	// succ:  l4026B2E9
l4026B2E9:
l4026B311:
l4026B4ED:
sdk_wpa_receive_exit:


// sdk___wpa_send_eapol
// Return size: 0
void sdk___wpa_send_eapol()
sdk___wpa_send_eapol_entry:
	// succ:  l4022B6D4
l4022B6D4:
	a1 = fp
	a1 = a1 - 128
	Mem0[a1 + 0x0000004C:word32] = a15
	Mem0[a1 + 0x0000003C:word32] = a0
	Mem0[a1 + 0x00000078:word32] = a2
	Mem0[a1 + 0x00000074:word32] = a5
	Mem0[a1 + 0x00000070:word32] = a6
	Mem0[a1 + 0x00000020:word32] = a7
	Mem0[a1 + 0x00000040:word32] = a12
	Mem0[a1 + 0x00000044:word32] = a13
	Mem0[a1 + 0x00000048:word32] = a14
	a13 = a3
	a3 = Mem0[a1 + 0x0000008C:word32]
	a14 = a4
	branch a3 == 0x00000000 l4022BA40
	// succ:  l4022B6FA l4022BA40
l4022B6FA:
	a12 = a3
	goto l4022B701
	// succ:  l4022B701
l4022B6FF:
	a12 = 3
	// succ:  l4022B701
l4022B701:
	a4 = a12 - 2
	a0 = 8
	a15 = Mem0[a1 + 0x00000080:word32]
	Mem0[a1 + 0x00000060:word32] = a15
	a5 = a14 & a0
	Mem0[a1 + 0x00000034:word32] = a5
	branch a4 == 0x00000000 l4022BA1B
	// succ:  l4022B714 l4022BA1B
l4022B714:
	a2 = a12 - 3
	branch a2 == 0x00000000 l4022BA1B
	// succ:  l4022B71A l4022BA1B
l4022B71A:
	a3 = 0
	Mem0[a1 + 0x00000030:word32] = a3
	Mem0[a1 + 0x0000002C:word32] = a12
	a2 = a15 + 99
	Mem0[a1 + 0x00000038:word32] = a2
	a0 = 0x402142E8
	v14 = a0
	a0 = 0x4022B72B
	call v14 (retsize: 0;)
	a9 = Mem0[a1 + 0x00000078:word32]
	a12 = a2
	branch a2 == 0x00000000 l4022BA06
	// succ:  l4022B733 l4022BA06
l4022B733:
	a6 = 2
	a5 = 0x000000FE
	a8 = 3
	a4 = Mem0[a1 + 0x00000088:word32]
	a11 = a15 + 95
	a10 = a11 >>u 0x00000008 & 0x000000FF
	Mem0[a1 + 0x00000054:word32] = a4
	a11 = a11 & 0x000000FF
	a11 = a11 << 24
	a10 = a10 | a11
	a11 = Mem0[a9 + 0x0000002C:word32]
	Mem0[a2 + 0x00000002:byte] = a10
	Mem0[a2:byte] = a11
	Mem0[a2 + 0x00000001:byte] = a8
	a0 = Mem0[a13 + 0x0000018C:word32]
	a10 = a10 >>u 8
	a7 = a0 - 2
	branch a7 != 0x00000000 l4022B766
	// succ:  l4022B763_1 l4022B766
l4022B763_1:
	a5 = a6
	// succ:  l4022B766
l4022B766:
	Mem0[a2 + 0x00000004:byte] = a5
	a5 = Mem0[a1 + 0x0000002C:word32]
	Mem0[a2 + 0x00000003:byte] = a10
	a14 = a14 | a5
	branch a4 == 0x00000000 l4022B77C
	// succ:  l4022B773 l4022B77C
l4022B773:
	branch a0 != 2 l4022B77F
	// succ:  l4022B776 l4022B77F
l4022B776:
	a2 = 0x402040DC
	a14 = a14 | a2
	// succ:  l4022B77C
l4022B77C:
	branch a0 == 2 l4022B788
	// succ:  l4022B77F l4022B788
l4022B77F:
	a3 = Mem0[a1 + 0x00000084:word32]
	a3 = a3 << 28
	a14 = a14 | a3
	a3 = Mem0[a1 + 0x00000084:word32]
	a3 = a3 << 28
	a14 = a14 | a3
	// succ:  l4022B788
l4022B788:
	Mem0[a12 + 0x00000006:byte] = a14
	a5 = a14 >>u 8
	a4 = Mem0[a1 + 0x00000034:word32]
	Mem0[a12 + 0x00000005:byte] = a5
	branch a4 != 0x00000000 l4022B79D
	// succ:  l4022B795 l4022B79D
l4022B795:
	a6 = Mem0[a9 + 0x00000010:word32]
	Mem0[a1 + 0x0000005C:word32] = a6
	goto l4022B7A3
	// succ:  l4022B7A3
l4022B79D:
	a7 = Mem0[a13 + 0x00000190:word32]
	Mem0[a1 + 0x0000005C:word32] = a7
	// succ:  l4022B7A3
l4022B7A3:
	a2 = Mem0[a1 + 0x0000005C:word32]
	a0 = 0x4022B7A9
	call sdk_wpa_cipher_key_len (retsize: 0;)
	a8 = a2 >>u 8
	Mem0[a12 + 0x00000007:byte] = a8
	a2 = Mem0[a1 + 0x0000005C:word32]
	a0 = 0x4022B7B5
	call sdk_wpa_cipher_key_len (retsize: 0;)
	Mem0[a12 + 0x00000008:byte] = a2
	Mem0[a1 + 0x00000050:word32] = a15
	branch (a14 & 0x00002000) == 0x00000000 l4022B7CA
	// succ:  l4022B7BE l4022B7CA
l4022B7BE:
	Mem0[a1 + 0x00000050:word32] = a15
	a9 = 0x00000000
	Mem0[a12 + 0x00000007:byte] = a9
	Mem0[a12 + 0x00000008:byte] = a9
	// succ:  l4022B7CA
l4022B7CA:
	a0 = 0x000000FC
	a2 = 0x00000120
	a15 = 0x00000114
	a3 = a13 + 36
	Mem0[a1 + 0x00000068:word32] = a3
	a15 = a13 + a15
	a2 = a13 + a2
	a0 = a13 + a0
	Mem0[a1 + 0x00000064:word32] = a0
	Mem0[a1 + 0x0000006C:word32] = a2
	// succ:  l4022B7E5
l4022B7E5:
	a2 = Mem0[a1 + 0x0000006C:word32]
	a5 = Mem0[a1 + 0x00000068:word32]
	a3 = a15
	v19 = Mem0[a5 + 0x000000FB:byte]
	a4 = (uint32) v19
	v20 = Mem0[a5 + 0x000000FA:byte]
	a6 = (uint32) v20
	a4 = a4 << 24
	a4 = a4 | a6
	v21 = Mem0[a5 + 0x000000F9:byte]
	a6 = (uint32) v21
	a4 = a4 << 24
	a4 = a4 | a6
	v22 = Mem0[a5 + 0x000000F8:byte]
	a6 = (uint32) v22
	a4 = a4 << 24
	a5 = a5 + 0x00000100
	a4 = a4 | a6
	Mem0[a5 + 0x00000004:byte] = a4
	a4 = a4 >>u 8
	Mem0[a5 + 0x00000005:byte] = a4
	a4 = a4 >>u 8
	Mem0[a5 + 0x00000006:byte] = a4
	a4 = a4 >>u 8
	Mem0[a5 + 0x00000007:byte] = a4
	a4 = 8
	a0 = 0x40203130
	v23 = a0
	a0 = 0x4022B82B
	call v23 (retsize: 0;)
	a15 = a15 - 12
	a6 = Mem0[a1 + 0x00000064:word32]
	a5 = Mem0[a1 + 0x0000006C:word32]
	a7 = Mem0[a1 + 0x00000068:word32]
	a5 = a5 - 12
	a7 = a7 - 12
	Mem0[a1 + 0x00000068:word32] = a7
	Mem0[a1 + 0x0000006C:word32] = a5
	branch a5 != a6 l4022B7E5
	// succ:  l4022B846 l4022B7E5
l4022B846:
	a2 = a6
	a3 = 8
	a0 = 0x4022B84D
	call fn4032A97C (retsize: 0;)
	a15 = Mem0[a1 + 0x00000074:word32]
	a3 = Mem0[a1 + 0x00000064:word32]
	a2 = a12 + 9
	a4 = 8
	a0 = 0x40203130
	v24 = a0
	a0 = 0x4022B85D
	call v24 (retsize: 0;)
	a10 = 1
	a9 = a13 + 0x00000100
	a8 = 0
	Mem0[a9 + 0x00000005:byte] = a8
	Mem0[a9 + 0x00000004:byte] = a10
	a8 = 0
	Mem0[a9 + 0x00000006:byte] = a8
	a8 = 0
	Mem0[a9 + 0x00000007:byte] = a8
	a9 = Mem0[a1 + 0x00000070:word32]
	branch a9 == 0x00000000 l4022B886
	// succ:  l4022B879 l4022B886
l4022B879:
	a3 = a9
	a2 = a12 + 17
	a4 = 32
	a0 = 0x40203130
	v25 = a0
	a0 = 0x4022B886
	call v25 (retsize: 0;)
	// succ:  l4022B886
l4022B886:
	branch a15 == 0x00000000 l4022B895
	// succ:  l4022B888 l4022B895
l4022B888:
	a3 = a15
	a2 = a12 + 65
	a4 = 8
	a0 = 0x40203130
	v26 = a0
	a0 = 0x4022B895
	call v26 (retsize: 0;)
	// succ:  l4022B895
l4022B895:
	a11 = Mem0[a1 + 0x00000020:word32]
	a3 = Mem0[a1 + 0x00000020:word32]
	branch a11 == 0x00000000 l4022B8BD
	// succ:  l4022B89B l4022B8BD
l4022B89B:
	a15 = Mem0[a1 + 0x00000054:word32]
	branch a15 != 0x00000000 l4022B8C3
	// succ:  l4022B8A0 l4022B8C3
l4022B8A0:
	a2 = a12 + 99
	a3 = a11
	a4 = Mem0[a1 + 0x00000060:word32]
	a0 = 0x40203130
	v27 = a0
	a0 = 0x4022B8AE
	call v27 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000060:word32]
	Mem0[a12 + 0x00000062:byte] = a0
	a0 = a0 >>u 8
	Mem0[a12 + 0x00000061:byte] = a0
	goto l4022B978
	// succ:  l4022B978
l4022B8BD:
	a2 = Mem0[a1 + 0x00000054:word32]
	branch a2 == 0x00000000 l4022B978
	// succ:  l4022B8C3 l4022B978
l4022B8C3:
	branch a3 == 0x00000000 l4022B978
	branch a3 == 0x00000000 l4022B978
	// succ:  l4022B8C6 l4022B978
l4022B8C6:
	a2 = Mem0[a1 + 0x00000050:word32]
	a0 = 0x402142E8
	v34 = a0
	a0 = 0x4022B8CF
	call v34 (retsize: 0;)
	a15 = a2
	branch a2 != 0x00000000 l4022B8DE
	a2 = Mem0[a1 + 0x00000050:word32]
	a0 = 0x402142E8
	v36 = a0
	a0 = 0x4022B8CF
	call v36 (retsize: 0;)
	a15 = a2
	branch a2 != 0x00000000 l4022B8DE
	// succ:  l4022B8D3 l4022B8DE
l4022B8D3:
	a2 = a12
	a0 = 0x402034CC
	v35 = a0
	a0 = 0x4022B8DB
	call v35 (retsize: 0;)
	a2 = a12
	a0 = 0x402034CC
	v37 = a0
	a0 = 0x4022B8DB
	call v37 (retsize: 0;)
	goto l4022BA06
	// succ:  l4022BA06
l4022B8DE:
	a3 = Mem0[a1 + 0x00000020:word32]
	a4 = Mem0[a1 + 0x00000060:word32]
	a0 = 0x40203130
	v38 = a0
	a0 = 0x4022B8E9
	call v38 (retsize: 0;)
	a4 = Mem0[a1 + 0x00000030:word32]
	branch a4 == 0x00000000 l4022B8F8
	// succ:  l4022B8ED l4022B8F8
l4022B8ED:
	a6 = Mem0[a1 + 0x00000060:word32]
	a5 = 0xFFFFFFDD
	a6 = a15 + a6
	Mem0[a6:byte] = a5
	// succ:  l4022B8F8
l4022B8F8:
	a7 = Mem0[a1 + 0x0000002C:word32]
	a0 = 0x000000BC
	a7 = a7 - 2
	branch a7 == 0x00000000 l4022BA58
	// succ:  l4022B904 l4022BA58
l4022B904:
	a8 = Mem0[a1 + 0x0000002C:word32]
	a8 = a8 - 3
	branch a8 == 0x00000000 l4022BA58
	// succ:  l4022B90D l4022BA58
l4022B90D:
	a4 = 16
	a3 = Mem0[a13 + 0x00000004:word32]
	a2 = a12 + 49
	Mem0[a1 + 0x00000024:word32] = a2
	a3 = a3 + 52
	a0 = 0x40203130
	v39 = a0
	a0 = 0x4022B91F
	call v39 (retsize: 0;)
	a2 = Mem0[a13 + 0x00000004:word32]
	a3 = 32
	a2 = a2 + 36
	a0 = 0x4022B929
	call fn4032A97C (retsize: 0;)
	a3 = Mem0[a1 + 0x00000024:word32]
	a2 = a1
	a4 = 16
	a0 = 0x40203130
	v40 = a0
	a0 = 0x4022B935
	call v40 (retsize: 0;)
	a2 = a1 + 16
	a4 = 16
	a3 = 0x000000BC
	a3 = a13 + a3
	a0 = 0x40203130
	v41 = a0
	a0 = 0x4022B945
	call v41 (retsize: 0;)
	a3 = a15
	a4 = Mem0[a1 + 0x00000050:word32]
	a2 = a12 + 99
	Mem0[a1 + 0x00000028:word32] = a2
	a0 = 0x40203130
	v42 = a0
	a0 = 0x4022B955
	call v42 (retsize: 0;)
	a2 = a1
	a3 = 32
	a4 = 0x00000100
	a5 = Mem0[a1 + 0x00000028:word32]
	a6 = Mem0[a1 + 0x00000050:word32]
	a0 = 0x4022B964
	call sdk_rc4_skip (retsize: 0;)
	// succ:  l4022B964
l4022B964:
	a2 = a15
	a4 = Mem0[a1 + 0x00000050:word32]
	Mem0[a12 + 0x00000062:byte] = a4
	a4 = a4 >>u 8
	Mem0[a12 + 0x00000061:byte] = a4
	a0 = 0x402034CC
	v43 = a0
	a0 = 0x4022B978
	call v43 (retsize: 0;)
	// succ:  l4022B978
l4022B978:
	branch (a14 & 0x00000100) == 0x00000000 l4022B99D
	// succ:  l4022B97B l4022B99D
l4022B97B:
	a5 = Mem0[a13 + 0x000000EC:word32]
	branch a5 != 0x00000000 l4022B98B
	// succ:  l4022B980 l4022B98B
l4022B980:
	a2 = a12
	a0 = 0x402034CC
	v29 = a0
	a0 = 0x4022B988
	call v29 (retsize: 0;)
	goto l4022BA06
	// succ:  l4022BA06
l4022B98B:
	a3 = Mem0[a1 + 0x0000002C:word32]
	a4 = a12
	a5 = Mem0[a1 + 0x00000038:word32]
	a6 = a12 + 81
	a2 = 0x000000AC
	a2 = a13 + a2
	a0 = 0x4022B99D
	call sdk_wpa_eapol_key_mic (retsize: 0;)
	// succ:  l4022B99D
l4022B99D:
	a2 = 3
	a5 = 0x402035F0
	a3 = 0x00000100
	a5 = Mem0[a5 + 0x00000014:word32]
	a4 = 0
	a5 = Mem0[a5 + 0x00000000:word32]
	Mem0[a1 + 0x00000058:word32] = a5
	a0 = 0x4022B9B1
	call fn4030C160 (retsize: 0;)
	a3 = a13 + 8
	a15 = a2
	a14 = Mem0[a2 + 0x00000004:word32]
	a4 = 6
	a2 = a14
	a0 = 0x40203130
	v30 = a0
	a0 = 0x4022B9C1
	call v30 (retsize: 0;)
	a13 = Mem0[a1 + 0x00000038:word32]
	a2 = a14 + 6
	a3 = Mem0[a1 + 0x00000058:word32]
	a4 = 6
	a3 = a3 + 41
	a0 = 0x40203130
	v31 = a0
	a0 = 0x4022B9D3
	call v31 (retsize: 0;)
	a2 = Mem0[a15 + 0x00000004:word32]
	a4 = 0x4022B6CC
	a3 = 0x4022B6D0
	Mem0[a14 + 0x0000000C:byte] = a4
	a4 = a13
	Mem0[a14 + 0x0000000D:byte] = a3
	a2 = a2 + 14
	a3 = a12
	a0 = 0x40203130
	v32 = a0
	a0 = 0x4022B9ED
	call v32 (retsize: 0;)
	a3 = a15
	a5 = Mem0[a1 + 0x00000050:word32]
	a2 = Mem0[a1 + 0x00000058:word32]
	a5 = a5 + 113
	Mem0[a15 + 0x0000000A:word16] = a5
	a0 = 0x4022B9FE
	call fn40316FE8 (retsize: 0;)
	a2 = a12
	a0 = 0x402034CC
	v33 = a0
	a0 = 0x4022BA06
	call v33 (retsize: 0;)
	// succ:  l4022BA06
l4022BA06:
	a12 = Mem0[a1 + 0x00000040:word32]
	a13 = Mem0[a1 + 0x00000044:word32]
	a14 = Mem0[a1 + 0x00000048:word32]
	a15 = Mem0[a1 + 0x0000004C:word32]
	a2 = 0x00000080
	a0 = Mem0[a1 + 0x0000003C:word32]
	a1 = a1 + a2
	return
	// succ:  sdk___wpa_send_eapol_exit
l4022BA1B:
	a6 = Mem0[a1 + 0x00000088:word32]
	branch a6 == 0x00000000 l4022B71A
	// succ:  l4022BA21 l4022B71A
l4022BA21:
	a2 = Mem0[a1 + 0x00000060:word32]
	a3 = 8
	a0 = 0x402044A4
	v28 = a0
	a0 = 0x4022BA2C
	call v28 (retsize: 0;)
	a15 = Mem0[a1 + 0x00000060:word32]
	a0 = 8
	a0 = a0 - a2
	branch a2 == 0x00000000 l4022BA37
	// succ:  l4022BA34_1 l4022BA37
l4022BA34_1:
	a2 = a0
	// succ:  l4022BA37
l4022BA37:
	Mem0[a1 + 0x00000030:word32] = a2
	a15 = a15 + a2
	a15 = a15 + 8
	goto l4026B71E
	// succ:  l4026B71E
l4022BA40:
	a2 = a13
	a0 = 0x4022BA45
	call fn4032AEB4 (retsize: 0;)
	branch a2 != 0x00000000 l4022B6FF
	// succ:  l4022BA48 l4022B6FF
l4022BA48:
	a2 = 2
	a3 = Mem0[a13 + 0x00000190:word32]
	a12 = 1
	a3 = a3 - 2
	branch a3 == 0x00000000 l4022BA55
	// succ:  l4022BA52_1 l4022BA55
l4022BA52_1:
	a12 = a2
	// succ:  l4022BA55
l4022BA55:
	goto l4026B701
	// succ:  l4026B701
l4022BA58:
	a5 = a12 + 99
	a3 = Mem0[a1 + 0x00000050:word32]
	a2 = a13 + a0
	a4 = a3 - 8
	a3 = a3 - 1
	branch a4 < 0x00000000 l4022BA6A
	// succ:  l4022BA67_1 l4022BA6A
l4022BA67_1:
	a3 = a4
	// succ:  l4022BA6A
l4022BA6A:
	a3 = a3 >> 3
	a4 = a15 | a15
	a0 = 0x4022BA73
	call sdk_aes_wrap (retsize: 0;)
	branch a2 == 0x00000000 l4022B964
	// succ:  l4022BA76 l4022B964
l4022BA76:
	a2 = a12
	a0 = 0x402034CC
	v44 = a0
	a0 = 0x4022BA7E
	call v44 (retsize: 0;)
	a2 = a15
	a0 = 0x402034CC
	v45 = a0
	a0 = 0x4022BA86
	call v45 (retsize: 0;)
	goto l4026BA06
	// succ:  l4026BA06
l4026B701:
l4026B71E:
l4026BA06:
sdk___wpa_send_eapol_exit:


// fn4022BB30
// Return size: 0
void fn4022BB30()
fn4022BB30_entry:
	// succ:  l4022BB30
l4022BB30:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x0000001C:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a2
	Mem0[a1 + 0x00000018:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a14
	Mem0[a1 + 0x00000020:word32] = a13
	a14 = a3
	a13 = a4
	a0 = 0x00000062
	branch a0 <u a4 l4022BB69
	// succ:  l4022BB47 l4022BB69
l4022BB47:
	a2 = -1
	goto l4022BB5C
	// succ:  l4022BB5C
l4022BB4C:
	a13 = -1
	a2 = a12
	a3 = a1
	a4 = 16
	a0 = 0x40203130
	v16 = a0
	a0 = 0x4022BB5A
	call v16 (retsize: 0;)
	a2 = a13
	// succ:  l4022BB5C
l4022BB5C:
	a12 = Mem0[a1 + 0x0000001C:word32]
	a13 = Mem0[a1 + 0x00000020:word32]
	a14 = Mem0[a1 + 0x00000024:word32]
	a0 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 48
	return
	// succ:  fn4022BB30_exit
l4022BB69:
	a4 = 0x00000010
	v10 = Mem0[a3 + 0x00000006:byte]
	a2 = (uint32) v10
	a12 = a3 + 81
	Mem0[a1 + 0x00000010:word32] = a2
	a2 = a1 | a1
	a3 = a12
	a0 = 0x40203130
	v11 = a0
	a0 = 0x4022BB80
	call v11 (retsize: 0;)
	a2 = a12
	a3 = 0
	a4 = 16
	a0 = 0x4020267C
	v12 = a0
	a0 = 0x4022BB8C
	call v12 (retsize: 0;)
	a5 = a13
	a4 = a14
	a2 = Mem0[a1 + 0x00000014:word32]
	a3 = Mem0[a1 + 0x00000010:word32]
	a6 = a12
	a3 = a3 & 0x00000007
	a0 = 0x4022BB9C
	call sdk_wpa_eapol_key_mic (retsize: 0;)
	branch a2 != 0x00000000 l4022BB4C
	// succ:  l4022BB9F l4022BB4C
l4022BB9F:
	a2 = a1
	a3 = a12
	a4 = 16
	a0 = 0x40202AA8
	v15 = a0
	a0 = 0x4022BBAB
	call v15 (retsize: 0;)
	branch a2 != 0x00000000 l4022BB4C
	// succ:  l4022BBAE l4022BB4C
l4022BBAE:
	a13 = 0
	// succ:  l4026BB4E
l4026BB4E:
fn4022BB30_exit:


// sdk_wpa_remove_ptk
// Return size: 0
void sdk_wpa_remove_ptk()
sdk_wpa_remove_ptk_entry:
	// succ:  l4022BBB8
l4022BBB8:
	a1 = fp
	a4 = 0x00000040
	a3 = 0x00000000
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a0
	a12 = a2
	Mem0[a2 + 0x000000EC:word32] = a3
	a2 = 0x000000AC
	a2 = a12 + a2
	a0 = 0x4020267C
	v8 = a0
	a0 = 0x4022BBD6
	call v8 (retsize: 0;)
	a4 = 0
	a5 = a12 + 8
	a6 = 0
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = 0
	a7 = 0
	Mem0[a1:word32] = a3
	a3 = 0
	a0 = 0x4022BBE9
	call fn4032AD78 (retsize: 0;)
	a3 = Mem0[a12 + 0x00000000:word32]
	a4 = 0
	a2 = 0x4022BBB4
	Mem0[a12 + 0x000000F0:word32] = a4
	a4 = a12
	a0 = 0x4022BBF8
	call sdk_eloop_cancel_timeout (retsize: 0;)
	a12 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wpa_remove_ptk_exit
sdk_wpa_remove_ptk_exit:


// sdk_wpa_auth_sm_event
// Return size: 0
void sdk_wpa_auth_sm_event()
sdk_wpa_auth_sm_event_entry:
	// succ:  l4022BC04
l4022BC04:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	a12 = a2
	a13 = a3
	branch a2 != 0x00000000 l4022BC18
	// succ:  l4022BC13 l4022BC18
l4022BC13:
	a2 = -1
	goto l4022BC92
	// succ:  l4022BC92
l4022BC18:
	a2 = 0
	branch a3 <u 0x00000002 l4022BC70
	// succ:  l4022BC1D l4022BC70
l4022BC1D:
	a0 = 1
	branch a3 >=u 0x00000004 l4022BC25
	// succ:  l4022BC22 l4022BC25
l4022BC22:
	branch a3 >=u 0x00000002 l4022BC9F
	// succ:  l4022BC25 l4022BC9F
l4022BC25:
	branch a13 >=u 0x00000006 l4022BC70
	// succ:  l4022BC28 l4022BC70
l4022BC28:
	branch a13 <u 0x00000004 l4022BC70
	// succ:  l4022BC2B l4022BC70
l4022BC2B:
	a5 = 0x000000F4
	a5 = a12 + a5
	v9 = Mem0[a5 + 0x00000080:byte]
	a3 = (uint32) v9
	branch (a3 & 0x00000008) != 0x00000000 l4022BC5B
	// succ:  l4022BC36 l4022BC5B
l4022BC36:
	a2 = a12
	a6 = 1
	a8 = 8
	a7 = 0x000000F7
	a7 = a3 & a7
	a7 = a7 | a8
	Mem0[a5 + 0x00000080:byte] = a7
	Mem0[a12 + 0x00000018:word32] = a6
	a0 = 0x4022BC4D
	call fn4022C984 (retsize: 0;)
	branch a2 == 1 l4022BCA4
	// succ:  l4022BC50 l4022BCA4
l4022BC50:
	a8 = 0
	a9 = 1
	Mem0[a12 + 0x00000020:word32] = a9
	Mem0[a12 + 0x00000018:word32] = a8
	goto l4022BC70
	// succ:  l4022BC70
l4022BC5B:
	a10 = Mem0[a12 + 0x00000048:word32]
	branch a10 == 0x00000000 l4022BC6E
	// succ:  l4022BC60 l4022BC6E
l4022BC60:
	a3 = Mem0[a12 + 0x00000004:word32]
	a11 = Mem0[a3 + 0x0000000C:word32]
	a11 = a11 - 1
	Mem0[a3 + 0x0000000C:word32] = a11
	Mem0[a12 + 0x00000048:word32] = a2
	Mem0[a12 + 0x00000168:word32] = a0
	// succ:  l4022BC6E
l4022BC6E:
	Mem0[a12 + 0x00000024:word32] = a0
	// succ:  l4022BC70
l4022BC70:
	a4 = 64
	a2 = 0x000000AC
	a3 = 0
	Mem0[a12 + 0x000000EC:word32] = a3
	a2 = a12 + a2
	a3 = 0
	a0 = 0x4020267C
	v17 = a0
	a0 = 0x4022BC84
	call v17 (retsize: 0;)
	branch a13 == 5 l4022BC8C
	// succ:  l4022BC87 l4022BC8C
l4022BC87:
	a2 = a12
	a0 = 0x4022BC8C
	call fn4032BBB8 (retsize: 0;)
	// succ:  l4022BC8C
l4022BC8C:
	a2 = a12 | a12
	a0 = 0x4022BC92
	call fn4022C984 (retsize: 0;)
	// succ:  l4022BC92
l4022BC92:
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wpa_auth_sm_event_exit
l4022BC9F:
	Mem0[a12 + 0x0000001C:word32] = a0
	goto l4026BC70
	// succ:  l4026BC70
l4022BCA4:
	a2 = 1
	goto l4026BC92
	// succ:  l4026BC92
l4026BC70:
l4026BC92:
sdk_wpa_auth_sm_event_exit:


// fn4022C984
// Return size: 0
void fn4022C984()
fn4022C984_entry:
	// succ:  l4022C984
l4022C984:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	a12 = a2
	branch a2 == 0x00000000 l4022CA0E
	// succ:  l4022C992 l4022CA0E
l4022C992:
	a13 = 0x000000F4
	a13 = a2 + a13
	v7 = Mem0[a13 + 0x00000080:byte]
	a0 = (uint32) v7
	a2 = 2
	branch (a0 & 0x00000002) != 0x00000000 l4022CA0E
	// succ:  l4022C99F l4022CA0E
l4022C99F:
	a3 = 0x000000FD
	a0 = a0 & a3
	a0 = a0 | a2
	Mem0[a13 + 0x00000080:byte] = a0
	// succ:  l4022C9AB
l4022C9AB:
	branch (a0 & 0x00000004) != 0x00000000 l4022C9D6
	// succ:  l4022C9AE l4022C9D6
l4022C9AE:
	a8 = 0x000000FE
	a8 = a0 & a8
	Mem0[a13 + 0x00000080:byte] = a8
	a7 = Mem0[a12 + 0x00000000:word32]
	a2 = a12
	a7 = Mem0[a7 + 0x00000000:word32]
	a6 = 0
	Mem0[a7 + 0x000000C8:word32] = a6
	a0 = 0x4022C9C5
	call fn4032C384 (retsize: 0;)
	v12 = Mem0[a13 + 0x00000080:byte]
	a0 = (uint32) v12
	branch (a0 & 0x00000004) != 0x00000000 l4022C9D6
	// succ:  l4022C9CB l4022C9D6
l4022C9CB:
	a2 = a12
	a0 = 0x4022C9D0
	call fn4032C708 (retsize: 0;)
	v13 = Mem0[a13 + 0x00000080:byte]
	a0 = (uint32) v13
	branch (a0 & 0x00000004) == 0x00000000 l4022C9F4
	// succ:  l4022C9D6 l4022C9F4
l4022C9D6:
	a9 = 0x000000FD
	a9 = a0 & a9
	Mem0[a13 + 0x00000080:byte] = a9
	branch (a9 & 0x00000004) == 0x00000000 l4022CA0E
	// succ:  l4022C9E2 l4022CA0E
l4022C9E2:
	a2 = a12
	a0 = 0x4022C9E7
	call fn4032B14C (retsize: 0;)
	a2 = 1
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn4022C984_exit
l4022C9F4:
	a2 = Mem0[a12 + 0x00000000:word32]
	a3 = Mem0[a12 + 0x00000004:word32]
	a0 = 0x4022C9FB
	call fn4032C93C (retsize: 0;)
	v15 = Mem0[a13 + 0x00000080:byte]
	a0 = (uint32) v15
	branch (a0 & 0x00000001) != 0x00000000 l4022C9AB
	// succ:  l4022CA01 l4022C9AB
l4022CA01:
	a10 = Mem0[a12 + 0x00000000:word32]
	a10 = Mem0[a10 + 0x00000000:word32]
	a10 = Mem0[a10 + 0x000000C8:word32]
	branch a10 != 0x00000000 l4022C9AB
	// succ:  l4022CA0B l4022C9AB
l4022CA0B:
	goto l4026C9D6
	// succ:  l4026C9D6
l4022CA0E:
	a2 = 0
	goto l4026C9E9
	// succ:  l4026C9E9
l4026C9D6:
l4026C9E9:
fn4022C984_exit:


// sdk_wpa_write_rsn_ie
// Return size: 0
void sdk_wpa_write_rsn_ie()
sdk_wpa_write_rsn_ie_entry:
	// succ:  l4022CAD8
l4022CAD8:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1:word32] = a4
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000004:word32] = a0
	a14 = a5
	a0 = 0
	a13 = a3
	a12 = a2
	a3 = 48
	a2 = 1
	Mem0[a13 + 0x00000003:byte] = a0
	Mem0[a13 + 0x00000002:byte] = a2
	Mem0[a13:byte] = a3
	a2 = 2
	a3 = Mem0[a12 + 0x0000000C:word32]
	a0 = 0x4022CB03
	call sdk_wpa_cipher_to_suite (retsize: 0;)
	branch a2 == 0x00000000 l4022CBD9
	// succ:  l4022CB06 l4022CBD9
l4022CB06:
	Mem0[a13 + 0x00000007:byte] = a2
	a4 = a2 >>u 0x00000018 & 0x000000FF
	a5 = a2 >>u 0x00000010 & 0x0000FFFF
	a6 = a2 >>u 8
	Mem0[a13 + 0x00000006:byte] = a6
	Mem0[a13 + 0x00000005:byte] = a5
	Mem0[a13 + 0x00000004:byte] = a4
	a2 = a13 + 10
	a3 = Mem0[a12 + 0x00000020:word32]
	a0 = 0x4022CB22
	call sdk_rsn_cipher_put_suites (retsize: 0;)
	a0 = 0
	a10 = 1
	branch a2 == 0x00000000 l4022CBD9
	// succ:  l4022CB29 l4022CBD9
l4022CB29:
	a8 = 0xFFFFFFAC
	a9 = 15
	a11 = 2
	a5 = a13 + a2 * 0x00000004
	Mem0[a13 + 0x00000008:byte] = a2
	a7 = a2 >>u 8
	Mem0[a13 + 0x00000009:byte] = a7
	a7 = Mem0[a12 + 0x00000004:word32]
	a2 = a5 + 12
	branch (a7 & 0x00000001) == 0x00000000 l4022CB59
	// succ:  l4022CB43 l4022CB59
l4022CB43:
	a3 = 1
	a2 = a5 + 16
	Mem0[a5 + 0x0000000C:byte] = a0
	Mem0[a5 + 0x0000000D:byte] = a9
	Mem0[a5 + 0x0000000E:byte] = a8
	Mem0[a5 + 0x0000000F:byte] = a10
	a7 = Mem0[a12 + 0x00000004:word32]
	goto l4022CB5B
	// succ:  l4022CB5B
l4022CB59:
	a3 = 0
	// succ:  l4022CB5B
l4022CB5B:
	branch (a7 & 0x00000002) == 0x00000000 l4022CB6E
	// succ:  l4022CB5E l4022CB6E
l4022CB5E:
	a3 = a3 + 1
	Mem0[a2 + 0x00000001:byte] = a9
	Mem0[a2 + 0x00000002:byte] = a8
	Mem0[a2 + 0x00000003:byte] = a11
	Mem0[a2:byte] = a0
	a2 = a2 + 4
	// succ:  l4022CB6E
l4022CB6E:
	branch a3 == 0x00000000 l4022CBD9
	// succ:  l4022CB71 l4022CBD9
l4022CB71:
	a9 = 12
	a4 = 0
	a8 = 1
	Mem0[a5 + 0x0000000A:byte] = a3
	a7 = a3 >>u 8
	Mem0[a5 + 0x0000000B:byte] = a7
	a6 = Mem0[a12 + 0x00000024:word32]
	a11 = 0x00000200
	branch a6 != 0x00000000 l4022CB88
	// succ:  l4022CB85_1 l4022CB88
l4022CB85_1:
	a8 = a4
	// succ:  l4022CB88
l4022CB88:
	a4 = Mem0[a12 + 0x0000002C:word32]
	a11 = a8 | a11
	branch a4 == 0x00000000 l4022CB90
	// succ:  l4022CB8D_2 l4022CB90
l4022CB8D_2:
	a8 = a11
	// succ:  l4022CB90
l4022CB90:
	a11 = Mem0[a12 + 0x00000030:word32]
	a9 = a8 | a9
	branch a11 == 0x00000000 l4022CB98
	// succ:  l4022CB95_3 l4022CB98
l4022CB95_3:
	a8 = a9
	// succ:  l4022CB98
l4022CB98:
	Mem0[a2:byte] = a8
	a8 = a8 >>u 8
	Mem0[a2 + 0x00000001:byte] = a8
	a2 = a2 + 2
	branch a14 == 0x00000000 l4022CBC3
	// succ:  l4022CBA5 l4022CBC3
l4022CBA5:
	a8 = Mem0[a1 + 0x00000000:word32]
	a12 = a2 + 18
	a8 = a13 + a8
	branch a8 <u a12 l4022CBD9
	// succ:  l4022CBAF l4022CBD9
l4022CBAF:
	a3 = a14
	Mem0[a2 + 0x00000001:byte] = a0
	Mem0[a2:byte] = a10
	a4 = 16
	a2 = a2 + 2
	a0 = 0x40203130
	v17 = a0
	a0 = 0x4022CBC1
	call v17 (retsize: 0;)
	a2 = a12
	// succ:  l4022CBC3
l4022CBC3:
	a2 = a2 - a13
	a9 = a2 - 2
	Mem0[a13 + 0x00000001:byte] = a9
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wpa_write_rsn_ie_exit
l4022CBD9:
	a2 = -1
	// succ:  l4026CBCC
l4026CBCC:
sdk_wpa_write_rsn_ie_exit:


// sdk_wpa_auth_gen_wpa_ie
// Return size: 0
void sdk_wpa_auth_gen_wpa_ie()
sdk_wpa_auth_gen_wpa_ie_entry:
	// succ:  l4022CBE0
l4022CBE0:
	a1 = fp
	a3 = 0x00000090
	a1 = a1 - a3
	Mem0[a1 + 0x00000084:word32] = a12
	Mem0[a1 + 0x00000080:word32] = a0
	a12 = a2
	a2 = Mem0[a2 + 0x00000004:word32]
	Mem0[a1 + 0x00000088:word32] = a13
	branch (a2 & 0x00000002) == 0x00000000 l4022CC0C
	// succ:  l4022CBF6 l4022CC0C
l4022CBF6:
	a2 = a12 + 4
	a3 = a1
	a4 = 0x00000080
	a5 = 0
	a0 = 0x4022CC02
	call fn4032CAD8 (retsize: 0;)
	branch a2 < 0x00000000 l4022CC52
	// succ:  l4022CC05 l4022CC52
l4022CC05:
	a13 = a2 + a1
	a2 = Mem0[a12 + 0x00000004:word32]
	goto l4022CC0E
	// succ:  l4022CC0E
l4022CC0C:
	a13 = a1
	// succ:  l4022CC0E
l4022CC0E:
	branch (a2 & 0x00000001) == 0x00000000 l4022CC25
	// succ:  l4022CC11 l4022CC25
l4022CC11:
	a2 = a12 + 4
	a3 = a13
	a5 = 0x00000080
	a4 = a1 - a13
	a4 = a4 + a5
	a0 = 0x4022CC20
	call fn4032CA14 (retsize: 0;)
	branch a2 < 0x00000000 l4022CC52
	// succ:  l4022CC23 l4022CC52
l4022CC23:
	a13 = a2 + a13
	// succ:  l4022CC25
l4022CC25:
	a2 = Mem0[a12 + 0x00000050:word32]
	a0 = 0x402034CC
	v10 = a0
	a0 = 0x4022CC2E
	call v10 (retsize: 0;)
	a13 = a13 - a1
	a2 = a13
	a0 = 0x402034C4
	v11 = a0
	a0 = 0x4022CC39
	call v11 (retsize: 0;)
	Mem0[a12 + 0x00000050:word32] = a2
	branch a2 != 0x00000000 l4022CC43
	// succ:  l4022CC3E l4022CC43
l4022CC3E:
	a2 = -1
	goto l4022CC52
	// succ:  l4022CC52
l4022CC43:
	a3 = a1
	a4 = a13
	a0 = 0x40203130
	v12 = a0
	a0 = 0x4022CC4D
	call v12 (retsize: 0;)
	Mem0[a12 + 0x00000054:word32] = a13
	a2 = 0
	// succ:  l4022CC52
l4022CC52:
	a12 = Mem0[a1 + 0x00000084:word32]
	a13 = Mem0[a1 + 0x00000088:word32]
	a3 = 0x00000090
	a0 = Mem0[a1 + 0x00000080:word32]
	a1 = a1 + a3
	return
	// succ:  sdk_wpa_auth_gen_wpa_ie_exit
sdk_wpa_auth_gen_wpa_ie_exit:


// sdk_wpa_add_kde
// Return size: 0
void sdk_wpa_add_kde()
sdk_wpa_add_kde_entry:
	// succ:  l4022CC64
l4022CC64:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a6
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1 + 0x0000000C:word32] = a14
	a15 = a6
	a14 = a5
	a12 = a2
	a13 = a7
	a2 = a3
	a7 = 0xFFFFFFDD
	Mem0[a12:byte] = a7
	Mem0[a12 + 0x00000005:byte] = a2
	a3 = a4
	a0 = a14 + a13
	a5 = a2 >>u 0x00000010 & 0x0000FFFF
	a6 = a2 >>u 0x00000018 & 0x000000FF
	Mem0[a12 + 0x00000002:byte] = a6
	Mem0[a12 + 0x00000003:byte] = a5
	a0 = a0 + 4
	a4 = a2 >>u 8
	Mem0[a12 + 0x00000004:byte] = a4
	Mem0[a12 + 0x00000001:byte] = a0
	a4 = a14
	a2 = a12 + 6
	a0 = 0x40203130
	v14 = a0
	a0 = 0x4022CCAB
	call v14 (retsize: 0;)
	a12 = a12 + a14
	a12 = a12 + 6
	branch a15 == 0x00000000 l4022CCBF
	// succ:  l4022CCB1 l4022CCBF
l4022CCB1:
	a3 = a15
	a2 = a12
	a4 = a13
	a0 = 0x40203130
	v15 = a0
	a0 = 0x4022CCBD
	call v15 (retsize: 0;)
	a12 = a12 + a13
	// succ:  l4022CCBF
l4022CCBF:
	a0 = Mem0[a1 + 0x00000000:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a2 = a12
	a15 = Mem0[a1 + 0x00000010:word32]
	a12 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wpa_add_kde_exit
sdk_wpa_add_kde_exit:


// sdk_wpa_validate_wpa_ie
// Return size: 0
void sdk_wpa_validate_wpa_ie()
sdk_wpa_validate_wpa_ie_entry:
	// succ:  l4022CCD0
l4022CCD0:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x0000003C:word32] = a15
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000034:word32] = a13
	Mem0[a1 + 0x00000030:word32] = a12
	Mem0[a1 + 0x00000038:word32] = a14
	a12 = a3
	a14 = a4
	a13 = a2
	a2 = a5
	branch a13 == 0x00000000 l4022CD06
	// succ:  l4022CCE7 l4022CD06
l4022CCE7:
	branch a3 == 0x00000000 l4022CD06
	// succ:  l4022CCE9 l4022CD06
l4022CCE9:
	branch a4 == 0x00000000 l4022CD0B
	// succ:  l4022CCEB l4022CD0B
l4022CCEB:
	branch a5 == 0x00000000 l4022CD0B
	// succ:  l4022CCED l4022CD0B
l4022CCED:
	a5 = Mem0[a13 + 0x00000004:word32]
	a15 = 2
	v13 = Mem0[a4 + 0x00000000:byte]
	a6 = (uint32) v13
	a3 = 1
	a6 = a6 - 48
	branch a6 != 0x00000000 l4022CCFC
	// succ:  l4022CCF9_1 l4022CCFC
l4022CCF9_1:
	a3 = a15
	// succ:  l4022CCFC
l4022CCFC:
	a0 = a3
	branch (a5 & a3) != 0x00000000 l4022CD1C
	// succ:  l4022CD01 l4022CD1C
l4022CD01:
	a2 = 10
	goto l4022CD0D
	// succ:  l4022CD0D
l4022CD06:
	a2 = 5
	goto l4022CD0D
	// succ:  l4022CD0D
l4022CD0B:
	a2 = 1
	// succ:  l4022CD0D
l4022CD0D:
	a12 = Mem0[a1 + 0x00000030:word32]
	a13 = Mem0[a1 + 0x00000034:word32]
	a14 = Mem0[a1 + 0x00000038:word32]
	a15 = Mem0[a1 + 0x0000003C:word32]
	a0 = Mem0[a1 + 0x0000002C:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_wpa_validate_wpa_ie_exit
l4022CD1C:
	Mem0[a1 + 0x00000020:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a2
	branch a3 != 2 l4022CD40
	// succ:  l4022CD24 l4022CD40
l4022CD24:
	a2 = a4
	a3 = Mem0[a1 + 0x00000028:word32]
	a4 = a1
	a0 = 0x4022CD2D
	call sdk_wpa_parse_wpa_ie_rsn (retsize: 0;)
	Mem0[a1 + 0x00000024:word32] = a2
	a3 = Mem0[a1 + 0x00000004:word32]
	a2 = 2
	a0 = 0x4022CD36
	call sdk_wpa_cipher_to_suite (retsize: 0;)
	a2 = 2
	a3 = Mem0[a1 + 0x00000008:word32]
	a0 = 0x4022CD3D
	call sdk_wpa_cipher_to_suite (retsize: 0;)
	goto l4022CD5A
	// succ:  l4022CD5A
l4022CD40:
	a2 = a4 | a4
	a3 = Mem0[a1 + 0x00000028:word32]
	a4 = a1
	a0 = 0x4022CD4A
	call sdk_wpa_parse_wpa_ie_wpa (retsize: 0;)
	Mem0[a1 + 0x00000024:word32] = a2
	a3 = Mem0[a1 + 0x00000004:word32]
	a2 = 1
	a0 = 0x4022CD53
	call sdk_wpa_cipher_to_suite (retsize: 0;)
	a2 = 1
	a3 = Mem0[a1 + 0x00000008:word32]
	a0 = 0x4022CD5A
	call sdk_wpa_cipher_to_suite (retsize: 0;)
	// succ:  l4022CD5A
l4022CD5A:
	a7 = Mem0[a1 + 0x00000024:word32]
	a9 = Mem0[a1 + 0x00000008:word32]
	branch a7 != 0x00000000 l4022CD0B
	// succ:  l4022CD61 l4022CD0B
l4022CD61:
	a8 = Mem0[a13 + 0x00000010:word32]
	a11 = Mem0[a1 + 0x0000000C:word32]
	branch a8 == a9 l4022CD6D
	// succ:  l4022CD68 l4022CD6D
l4022CD68:
	a2 = 2
	goto l4026CD0D
	// succ:  l4026CD0D
l4022CD6D:
	a10 = Mem0[a13 + 0x00000008:word32]
	a0 = a10 & a11
	branch (a10 & a11) != 0x00000000 l4022CD7A
	// succ:  l4022CD75 l4022CD7A
l4022CD75:
	a2 = 4
	goto l4026CD0D
	// succ:  l4026CD0D
l4022CD7A:
	a2 = Mem0[a1 + 0x00000020:word32]
	branch (a0 & 0x00000001) == 0x00000000 l4022CD87
	// succ:  l4022CD7F l4022CD87
l4022CD7F:
	a0 = 1
	Mem0[a12 + 0x00000194:word32] = a0
	goto l4022CD8A
	// succ:  l4022CD8A
l4022CD87:
	Mem0[a12 + 0x00000194:word32] = a15
	// succ:  l4022CD8A
l4022CD8A:
	a0 = Mem0[a1 + 0x00000004:word32]
	branch a2 != 2 l4022CDD8
	// succ:  l4022CD8F l4022CDD8
l4022CD8F:
	a9 = Mem0[a13 + 0x00000024:word32]
	a8 = a9 & a0
	branch (a9 & a0) == 0x00000000 l4022CDF1
	// succ:  l4022CD97 l4022CDF1
l4022CD97:
	a0 = 8
	branch (a8 & 0x00000008) != 0x00000000 l4022CDA3
	// succ:  l4022CD9C l4022CDA3
l4022CD9C:
	a0 = 64
	branch (a8 & 0x00000040) != 0x00000000 l4022CDA3
	// succ:  l4022CDA1 l4022CDA3
l4022CDA1:
	a0 = a15
	// succ:  l4022CDA3
l4022CDA3:
	Mem0[a12 + 0x00000190:word32] = a0
	v19 = Mem0[a14 + 0x00000000:byte]
	a3 = (uint32) v19
	a4 = 48
	branch a3 == a4 l4022CDB0
	// succ:  l4022CDAE l4022CDB0
l4022CDAE:
	a15 = 1
	// succ:  l4022CDB0
l4022CDB0:
	a2 = Mem0[a12 + 0x00000184:word32]
	Mem0[a12 + 0x0000018C:word32] = a15
	branch a2 == 0x00000000 l4022CDC0
	// succ:  l4022CDB8 l4022CDC0
l4022CDB8:
	a6 = Mem0[a1 + 0x00000028:word32]
	a5 = Mem0[a12 + 0x00000188:word32]
	branch a5 >=u a6 l4022CDDD
	// succ:  l4022CDC0 l4022CDDD
l4022CDC0:
	a0 = 0x402034CC
	v20 = a0
	a0 = 0x4022CDC6
	call v20 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000028:word32]
	a0 = 0x402034C4
	v21 = a0
	a0 = 0x4022CDCE
	call v21 (retsize: 0;)
	Mem0[a12 + 0x00000184:word32] = a2
	branch a2 != 0x00000000 l4022CDDD
	// succ:  l4022CDD3 l4022CDDD
l4022CDD3:
	a2 = 6
	goto l4026CD0D
	// succ:  l4026CD0D
l4022CDD8:
	a9 = Mem0[a13 + 0x0000000C:word32]
	goto l4026CD91
	// succ:  l4026CD91
l4022CDDD:
	a3 = a14
	a4 = Mem0[a1 + 0x00000028:word32]
	a0 = 0x40203130
	v22 = a0
	a0 = 0x4022CDE7
	call v22 (retsize: 0;)
	a2 = 0
	a7 = Mem0[a1 + 0x00000028:word32]
	Mem0[a12 + 0x00000188:word32] = a7
	goto l4026CD0D
	// succ:  l4026CD0D
l4022CDF1:
	a2 = 3
	// succ:  l4026CD0D
l4026CD0D:
l4026CD91:
sdk_wpa_validate_wpa_ie_exit:


// sdk_wpa_parse_kde_ies
// Return size: 0
void sdk_wpa_parse_kde_ies()
sdk_wpa_parse_kde_ies_entry:
	// succ:  l4022CED0
l4022CED0:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a15
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x00000014:word32] = a14
	Mem0[a1 + 0x00000010:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a12
	a13 = a4
	a12 = a2
	a14 = a3
	a2 = a4
	a3 = 0
	a4 = 36
	a0 = 0x4020267C
	v11 = a0
	a0 = 0x4022CEEF
	call v11 (retsize: 0;)
	Mem0[a1 + 0x00000004:word32] = a13
	branch a14 < 2 l4022CF65
	// succ:  l4022CEF4 l4022CF65
l4022CEF4:
	a15 = 48
	a2 = 0
	a13 = a12 + a14
	a14 = 0x000000DD
	a0 = a13 - 1
	Mem0[a1:word32] = a0
	// succ:  l4022CF01
l4022CF01:
	v12 = Mem0[a12 + 0x00000000:byte]
	a0 = (uint32) v12
	v13 = Mem0[a12 + 0x00000001:byte]
	a3 = (uint32) v13
	branch a0 != a14 l4022CF17
	// succ:  l4022CF0A l4022CF17
l4022CF0A:
	a3 = Mem0[a1 + 0x00000000:word32]
	branch a3 == a12 l4022CF56
	// succ:  l4022CF0F l4022CF56
l4022CF0F:
	v14 = Mem0[a12 + 0x00000001:byte]
	a3 = (uint32) v14
	branch a3 != 0x00000000 l4022CF17
	// succ:  l4022CF14 l4022CF17
l4022CF14:
	goto l4022CF56
	// succ:  l4022CF56
l4022CF17:
	a3 = a3 + a12
	a3 = a3 + 2
	branch a13 <u a3 l4022CF54
	// succ:  l4022CF1E l4022CF54
l4022CF1E:
	branch a0 != a15 l4022CF3D
	// succ:  l4022CF21 l4022CF3D
l4022CF21:
	a5 = Mem0[a1 + 0x00000004:word32]
	Mem0[a5 + 0x00000008:word32] = a12
	v16 = Mem0[a12 + 0x00000001:byte]
	a4 = (uint32) v16
	a4 = a4 + 2
	Mem0[a5 + 0x0000000C:word32] = a4
	// succ:  l4022CF2C
l4022CF2C:
	v17 = Mem0[a12 + 0x00000001:byte]
	a3 = (uint32) v17
	a3 = a3 + a12
	a3 = a3 + 2
	// succ:  l4022CF33
l4022CF33:
	a12 = a3
	a4 = a3 + 1
	branch a4 <u a13 l4022CF01
	// succ:  l4022CF3A l4022CF01
l4022CF3A:
	goto l4022CF56
	// succ:  l4022CF56
l4022CF3D:
	branch a0 != a14 l4022CF33
	// succ:  l4022CF40 l4022CF33
l4022CF40:
	a2 = a12
	a3 = a13
	a4 = Mem0[a1 + 0x00000004:word32]
	a0 = 0x4022CF49
	call fn4032CE04 (retsize: 0;)
	branch a2 < 0x00000000 l4022CF56
	// succ:  l4022CF4C l4022CF56
l4022CF4C:
	branch a2 < 1 l4022CF2C
	// succ:  l4022CF4F l4022CF2C
l4022CF4F:
	a2 = 0
	goto l4022CF56
	// succ:  l4022CF56
l4022CF54:
	a2 = -1
	// succ:  l4022CF56
l4022CF56:
	a12 = Mem0[a1 + 0x0000000C:word32]
	a13 = Mem0[a1 + 0x00000010:word32]
	a14 = Mem0[a1 + 0x00000014:word32]
	a15 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wpa_parse_kde_ies_exit
l4022CF65:
	a2 = 0
	// succ:  l4026CF56
l4026CF56:
sdk_wpa_parse_kde_ies_exit:


// sdk_wpa_auth_uses_mfp
// Return size: 0
void sdk_wpa_auth_uses_mfp()
sdk_wpa_auth_uses_mfp_entry:
	// succ:  l4022CF6C
l4022CF6C:
	a1 = fp
	branch a2 == 0x00000000 l4022CF79
	// succ:  l4022CF6E l4022CF79
l4022CF6E:
	a2 = a2 + 0x00000100
	v4 = Mem0[a2 + 0x00000074:byte]
	a2 = (uint32) v4
	a2 = a2 >>u 0x00000004 & 0x00000001
	return
	// succ:  sdk_wpa_auth_uses_mfp_exit
l4022CF79:
	a2 = 0
	return
	// succ:  sdk_wpa_auth_uses_mfp_exit
sdk_wpa_auth_uses_mfp_exit:


// sdk_wpa_sm_rx_eapol
// Return size: 0
void sdk_wpa_sm_rx_eapol()
sdk_wpa_sm_rx_eapol_entry:
	// succ:  l4022DED0
l4022DED0:
	a1 = fp
	a5 = a2
	a1 = a1 - 48
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x00000018:word32] = a14
	Mem0[a1 + 0x0000001C:word32] = a15
	Mem0[a1 + 0x00000010:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a0
	a12 = a3
	a0 = 0x00000062
	branch a0 <u a4 l4022DEEC
	// succ:  l4022DEE7 l4022DEEC
l4022DEE7:
	a2 = 0
	goto l4022DF37
	// succ:  l4022DF37
l4022DEEC:
	v12 = Mem0[a3 + 0x00000001:byte]
	a3 = (uint32) v12
	v13 = Mem0[a12 + 0x00000003:byte]
	a2 = (uint32) v13
	v15 = Mem0[a12 + 0x00000002:byte]
	a6 = (uint32) v15
	a2 = a2 << 24
	a2 = a2 | a6
	branch a3 != 3 l4022DF21
	// succ:  l4022DEFE l4022DF21
l4022DEFE:
	a3 = a4 - 4
	a6 = a2 >>u 0x00000008 & 0x000000FF
	a7 = a2 & 0x000000FF
	a7 = a7 << 24
	a6 = a6 | a7
	branch a3 <u a6 l4022DF21
	// succ:  l4022DF10 l4022DF21
l4022DF10:
	a8 = 94
	branch a8 >=u a6 l4022DF21
	// succ:  l4022DF15 l4022DF21
l4022DF15:
	v18 = Mem0[a12 + 0x00000004:byte]
	a0 = (uint32) v18
	a9 = 0x000000FE
	branch a0 == a9 l4022DF46
	// succ:  l4022DF1E l4022DF46
l4022DF1E:
	branch a0 == 2 l4022DF46
	// succ:  l4022DF21 l4022DF46
l4022DF21:
	a2 = 0
	goto l4022DF37
	// succ:  l4022DF37
l4022DF26:
	a10 = Mem0[a1 + 0x00000000:word32]
	branch a10 == 0x00000000 l4022DF35
	// succ:  l4022DF2A l4022DF35
l4022DF2A:
	a6 = a13
	a4 = a15
	a2 = a14
	a3 = Mem0[a1 + 0x00000004:word32]
	a0 = 0x4022DF35
	call fn4032DC0C (retsize: 0;)
	// succ:  l4022DF35
l4022DF35:
	a2 = 1
	// succ:  l4022DF37
l4022DF37:
	a12 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000018:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_wpa_sm_rx_eapol_exit
l4022DF46:
	a2 = 0
	Mem0[a1 + 0x00000008:word32] = a6
	Mem0[a1 + 0x00000004:word32] = a5
	a15 = a12 + 4
	a3 = a15
	a0 = 0x4022DF53
	call fn4032DEC0 (retsize: 0;)
	v20 = Mem0[a12 + 0x00000005:byte]
	a2 = (uint32) v20
	v21 = Mem0[a12 + 0x00000006:byte]
	a0 = (uint32) v21
	a2 = a2 << 24
	a0 = a0 | a2
	a13 = a0 & 0x00000007
	branch a13 == 1 l4022DF6D
	// succ:  l4022DF65 l4022DF6D
l4022DF65:
	branch a13 == 2 l4022DF6D
	// succ:  l4022DF68 l4022DF6D
l4022DF68:
	a2 = -1
	goto l4026DF37
	// succ:  l4026DF37
l4022DF6D:
	a14 = 0x4022DEC4
	a3 = Mem0[a14 + 0x00000114:word32]
	branch a3 != 8 l4022DF82
	// succ:  l4022DF76 l4022DF82
l4022DF76:
	branch a13 == 2 l4022DF82
	// succ:  l4022DF79 l4022DF82
l4022DF79:
	a4 = Mem0[a14 + 0x00000118:word32]
	branch a4 == 8 l4022DF68
	// succ:  l4022DF7F l4022DF68
l4022DF7F:
	branch (a0 & 0x00000008) != 0x00000000 l4022DF68
	// succ:  l4022DF82 l4022DF68
l4022DF82:
	a5 = Mem0[a14 + 0x00000104:word32]
	Mem0[a1 + 0x00000020:word32] = a0
	branch a5 == 0x00000000 l4022DF9B
	// succ:  l4022DF89 l4022DF9B
l4022DF89:
	a2 = a12 + 9
	a3 = 0x4022DEC8
	a4 = 8
	a0 = 0x40202AA8
	v22 = a0
	a0 = 0x4022DF96
	call v22 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000020:word32]
	branch a2 < 1 l4022DF68
	// succ:  l4022DF9B l4022DF68
l4022DF9B:
	a6 = 0x4022DECC
	branch (a0 & a6) == 0x00000000 l4022DF68
	// succ:  l4022DFA1 l4022DF68
l4022DFA1:
	branch (a0 & 0x00000800) != 0x00000000 l4022DF68
	// succ:  l4022DFA4 l4022DF68
l4022DFA4:
	Mem0[a1 + 0x00000020:word32] = a0
	a7 = 0x00000100
	a7 = a0 & a7
	Mem0[a1:word32] = a7
	branch (a0 & 0x00000100) == 0x00000000 l4022DFC5
	// succ:  l4022DFB1 l4022DFC5
l4022DFB1:
	a2 = a14
	a3 = a15
	a4 = a13
	a6 = Mem0[a1 + 0x00000008:word32]
	a5 = a12
	a6 = a6 + 4
	a0 = 0x4022DFC0
	call fn4032DD20 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000020:word32]
	branch a2 != 0x00000000 l4022DF68
	// succ:  l4022DFC5 l4022DF68
l4022DFC5:
	v23 = Mem0[a12 + 0x00000062:byte]
	a5 = (uint32) v23
	a7 = Mem0[a1 + 0x00000008:word32]
	v24 = Mem0[a12 + 0x00000061:byte]
	a6 = (uint32) v24
	a7 = a7 - 95
	a6 = a6 << 24
	a5 = a5 | a6
	a5 = a5 & 0x0000FFFF
	branch a7 <u a5 l4022DF68
	// succ:  l4022DFDC l4022DF68
l4022DFDC:
	a8 = Mem0[a14 + 0x00000164:word32]
	branch a8 != 2 l4022E004
	// succ:  l4022DFE2 l4022E004
l4022DFE2:
	Mem0[a1 + 0x00000020:word32] = a0
	branch (a0 & 0x00001000) == 0x00000000 l4022E004
	// succ:  l4022DFE7 l4022E004
l4022DFE7:
	a2 = a14
	a3 = a15
	a4 = a13
	a0 = 0x4022DFF0
	call fn4032DE0C (retsize: 0;)
	branch a2 != 0x00000000 l4022DF68
	// succ:  l4022DFF3 l4022DF68
l4022DFF3:
	a0 = Mem0[a1 + 0x00000020:word32]
	v25 = Mem0[a12 + 0x00000061:byte]
	a6 = (uint32) v25
	v26 = Mem0[a12 + 0x00000062:byte]
	a5 = (uint32) v26
	a6 = a6 << 24
	a5 = a5 | a6
	a5 = a5 & 0x0000FFFF
	// succ:  l4022E004
l4022E004:
	a7 = a0 >>u 0x00000003 & 0x00000001
	branch a7 == 0x00000000 l4022DF26
	// succ:  l4022E00A l4022DF26
l4022E00A:
	a8 = 48
	branch (a0 & a8) == 0x00000000 l4022E012
	// succ:  l4022E00F l4022E012
l4022E00F:
	goto l4026DF68
	// succ:  l4026DF68
l4022E012:
	a9 = Mem0[a1 + 0x00000000:word32]
	branch a9 == 0x00000000 l4022E022
	// succ:  l4022E016 l4022E022
l4022E016:
	a4 = a13
	a3 = a15
	a2 = a14
	a0 = 0x4022E01F
	call fn4032D850 (retsize: 0;)
	goto l4026DF35
	// succ:  l4026DF35
l4022E022:
	a5 = a13
	a4 = a15
	a2 = a14
	a3 = Mem0[a1 + 0x00000004:word32]
	a0 = 0x4022E02D
	call fn4032D2F0 (retsize: 0;)
	// succ:  l4026DF35
l4026DF35:
l4026DF37:
l4026DF68:
sdk_wpa_sm_rx_eapol_exit:


// sdk_wpa_register
// Return size: 0
void sdk_wpa_register()
sdk_wpa_register_entry:
	// succ:  l4022E034
l4022E034:
	a1 = fp
	a8 = 0x4022E030
	a2 = 1
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	Mem0[a8 + 0x00000080:byte] = a2
	Mem0[a8 + 0x00000144:word32] = a3
	Mem0[a8 + 0x00000148:word32] = a4
	Mem0[a8 + 0x0000014C:word32] = a5
	Mem0[a8 + 0x00000150:word32] = a6
	Mem0[a8 + 0x00000154:word32] = a7
	a0 = 0
	Mem0[a8 + 0x0000013C:word32] = a0
	a0 = 0x4022E058
	call sdk_wpa_sm_set_state (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wpa_register_exit
sdk_wpa_register_exit:


// sdk_wpa_set_profile
// Return size: 0
void sdk_wpa_set_profile()
sdk_wpa_set_profile_entry:
	// succ:  l4022E060
l4022E060:
	a1 = fp
	a4 = 0x4022DEC4
	a3 = 2
	Mem0[a4 + 0x00000164:word32] = a2
	Mem0[a4 + 0x0000011C:word32] = a3
	return
	// succ:  sdk_wpa_set_profile_exit
sdk_wpa_set_profile_exit:


// sdk_wpa_set_pmk
// Return size: 0
void sdk_wpa_set_pmk()
sdk_wpa_set_pmk_entry:
	// succ:  l4022E070
l4022E070:
	a1 = fp
	a4 = 32
	a3 = a2
	a1 = a1 - 16
	a2 = 0x4022DEC4
	Mem0[a1:word32] = a0
	a0 = 0x40203130
	v7 = a0
	a0 = 0x4022E082
	call v7 (retsize: 0;)
	a2 = 0x4022DEC4
	a0 = 32
	Mem0[a2 + 0x00000020:word32] = a0
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wpa_set_pmk_exit
sdk_wpa_set_pmk_exit:


// sdk_wpa_set_bss
// Return size: 0
void sdk_wpa_set_bss()
sdk_wpa_set_bss_entry:
	// succ:  l4022E09C
l4022E09C:
	a1 = fp
	SAR = 0x00000020 - a4
	a1 = a1 - 32
	Mem0[a1 + 0x00000008:word32] = a6
	Mem0[a1 + 0x0000000C:word32] = a7
	a4 = 8
	Mem0[a1 + 0x00000004:word32] = a3
	Mem0[a1 + 0x00000010:word32] = a0
	Mem0[a1:word32] = a2
	a0 = 0x4022DEC4
	a2 = 1
	a3 = a2 << SAR
	Mem0[a0 + 0x00000114:word32] = a3
	SAR = 0x00000020 - a5
	a3 = 0
	a2 = a2 << SAR
	Mem0[a0 + 0x00000118:word32] = a2
	Mem0[a0 + 0x00000104:word32] = a3
	a2 = 0x4022DEC8
	a0 = 0x4020267C
	v11 = a0
	a0 = 0x4022E0D1
	call v11 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000000:word32]
	a2 = 0x4022E090
	a6 = 0
	a5 = 0x4022DEC4
	a4 = 1
	Mem0[a5 + 0x000000F8:word32] = a4
	Mem0[a5 + 0x00000154:word32] = a6
	a4 = 6
	a0 = 0x40203130
	v12 = a0
	a0 = 0x4022E0EB
	call v12 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000004:word32]
	a2 = 0x4022E094
	a4 = 6
	a0 = 0x40203130
	v13 = a0
	a0 = 0x4022E0F8
	call v13 (retsize: 0;)
	a2 = 0x4022E098
	a0 = 0x4022E0FE
	call fn4022E188 (retsize: 0;)
	a4 = 0x4022DEC4
	a2 = a4
	a3 = Mem0[a4 + 0x00000148:word32]
	a4 = Mem0[a4 + 0x0000014C:word32]
	a0 = 0x4022E10C
	call sdk_wpa_gen_wpa_ie (retsize: 0;)
	a2 = Mem0[a1 + 0x00000008:word32]
	a3 = Mem0[a1 + 0x0000000C:word32]
	a4 = Mem0[a1 + 0x00000020:word32]
	a0 = 0x4022E115
	call fn4022E120 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wpa_set_bss_exit
sdk_wpa_set_bss_exit:


// fn4022E120
// Return size: 0
void fn4022E120()
fn4022E120_entry:
	// succ:  l4022E120
l4022E120:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a0
	branch a2 == 0x00000000 l4022E17D
	// succ:  l4022E12C l4022E17D
l4022E12C:
	a0 = 0x402131CC
	v6 = Mem0[a0 + 0x0000008E:byte]
	a0 = (uint32) v6
	a12 = 0x4022E11C
	branch a0 == 0x00000000 l4022E16A
	// succ:  l4022E137 l4022E16A
l4022E137:
	a2 = a12 - 65
	Mem0[a1:word32] = a2
	a0 = 0x4022E13F
	call fn4030600C (retsize: 0;)
	branch a2 != 64 l4022E14E
	// succ:  l4022E142 l4022E14E
l4022E142:
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = a12
	a4 = 32
	a0 = 0x4022E14B
	call fn4032AA04 (retsize: 0;)
	goto l4022E16A
	// succ:  l4022E16A
l4022E14E:
	a0 = 0x4022E151
	call fn403041E8 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = 0x402138F4
	a5 = 0x402040DC
	a6 = a12
	a4 = 0x402035F0
	a7 = 32
	a4 = Mem0[a4 + 0x000001E4:word32]
	a0 = 0x4022E167
	call fn4032AD04 (retsize: 0;)
	a0 = 0x4022E16A
	call fn40304218 (retsize: 0;)
	// succ:  l4022E16A
l4022E16A:
	a3 = a12
	a12 = 0x4022DEC4
	a4 = 32
	a2 = a12
	a0 = 0x40203130
	v12 = a0
	a0 = 0x4022E179
	call v12 (retsize: 0;)
	a5 = 32
	Mem0[a12 + 0x00000020:word32] = a5
	// succ:  l4022E17D
l4022E17D:
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  fn4022E120_exit
fn4022E120_exit:


// fn4022E188
// Return size: 0
void fn4022E188()
fn4022E188_entry:
	// succ:  l4022E188
l4022E188:
	a1 = fp
	a3 = a2
	a1 = a1 - 16
	a6 = 0x4022DEC4
	Mem0[a1:word32] = a0
	a0 = a2 + 2
	a2 = Mem0[a6 + 0x00000164:word32]
	Mem0[a6 + 0x00000148:word32] = a0
	branch a2 != 1 l4022E1B4
	// succ:  l4022E19D l4022E1B4
l4022E19D:
	a4 = 24
	a0 = 24
	Mem0[a6 + 0x0000014C:word32] = a0
	a0 = Mem0[a6 + 0x00000218:word32]
	a2 = a2 & 0x000000FF
	v8 = a0
	a0 = 0x4022E1AD
	call v8 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  fn4022E188_exit
l4022E1B4:
	a0 = 22
	a4 = 22
	// succ:  l4026E1A1
l4026E1A1:
fn4022E188_exit:


// sdk_pp_michael_mic_failure
// Return size: 0
void sdk_pp_michael_mic_failure()
sdk_pp_michael_mic_failure_entry:
	// succ:  l4022E280
l4022E280:
	a1 = fp
	a4 = 0x4022E270
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = 0x4022E274
	a0 = 0x4022DEC4
	a5 = a4 - 72
	a3 = Mem0[a0 + 0x000001C4:word32]
	a0 = Mem0[a0 + 0x0000017C:word32]
	branch a2 != 0x00000000 l4022E29E
	// succ:  l4022E29B_1 l4022E29E
l4022E29B_1:
	a5 = a4
	// succ:  l4022E29E
l4022E29E:
	a0 = a0 + a3
	branch a0 == 0x00000000 l4022E2DD
	// succ:  l4022E2A4 l4022E2DD
l4022E2A4:
	a2 = 11
	a0 = 0x4022E2A9
	call sdk_wpa_sm_set_state (retsize: 0;)
	a2 = 0x4022DEC4
	a3 = 1
	a4 = 0
	a0 = 0x4022E2B3
	call fn4032D08C (retsize: 0;)
	a3 = 0x4022DEC4
	a2 = 1
	Mem0[a3 + 0x00000128:word32] = a2
	a2 = 0x402154A8
	a0 = 0x4022E2C1
	call fn40303F28 (retsize: 0;)
	a2 = a12
	a0 = 0x4022E2C6
	call fn40304430 (retsize: 0;)
	a2 = a12
	a3 = 0x4022E278
	a4 = 0
	a0 = 0x4022E2D0
	call fn403042E8 (retsize: 0;)
	a2 = a12
	a3 = 0x4020C708
	a4 = 0
	a0 = 0x4022E2DA
	call fn4030438C (retsize: 0;)
	goto l4022E308
	// succ:  l4022E308
l4022E2DD:
	a4 = Mem0[a5 + 0x00000000:word32]
	a2 = 0x0000000A
	a4 = a4 + 1
	Mem0[a5:word32] = a4
	a0 = 0x4022E2EA
	call sdk_wpa_sm_set_state (retsize: 0;)
	a2 = 0x4022DEC4
	a3 = 1
	a4 = 0
	a0 = 0x4022E2F4
	call fn4032D08C (retsize: 0;)
	a2 = a12
	a3 = 0x4022E27C
	a4 = 0
	a0 = 0x4022E2FE
	call fn403042E8 (retsize: 0;)
	a2 = a12
	a3 = 0x4020C708
	a4 = 0
	a0 = 0x4022E308
	call fn4030438C (retsize: 0;)
	// succ:  l4022E308
l4022E308:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_pp_michael_mic_failure_exit
sdk_pp_michael_mic_failure_exit:


// sdk_eapol_txcb
// Return size: 0
void sdk_eapol_txcb()
sdk_eapol_txcb_entry:
	// succ:  l4022E314
l4022E314:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x402035F0
	a0 = Mem0[a0 + 0x00000010:word32]
	a0 = Mem0[a0 + 0x0000003C:word32]
	branch a0 != 5 l4022E344
	// succ:  l4022E326 l4022E344
l4022E326:
	a0 = 0x4022DEC4
	a3 = Mem0[a0 + 0x00000168:word32]
	branch a3 == 6 l4022E33A
	// succ:  l4022E32F l4022E33A
l4022E32F:
	branch a3 == 7 l4022E350
	// succ:  l4022E332 l4022E350
l4022E332:
	branch a3 == 8 l4022E358
	// succ:  l4022E335 l4022E358
l4022E335:
	a2 = 11
	branch a3 == a2 l4022E34B
	// succ:  l4022E33A l4022E34B
l4022E33A:
	a3 = 0
	branch a3 == 0x00000000 l4022E344
	// succ:  l4022E33E l4022E344
l4022E33E:
	a2 = 0x4022DEC4
	a0 = 0x4022E344
	call sdk_wpa_sm_deauthenticate (retsize: 0;)
	// succ:  l4022E344
l4022E344:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_eapol_txcb_exit
l4022E34B:
	a3 = 14
	goto l4026E33C
	// succ:  l4026E33C
l4022E350:
	a2 = a0
	a0 = 0x4022E355
	call fn4032D958 (retsize: 0;)
	goto l4022E35D
	// succ:  l4022E35D
l4022E358:
	a2 = a0
	a0 = 0x4022E35D
	call fn4032DCBC (retsize: 0;)
	// succ:  l4022E35D
l4022E35D:
	a3 = a2 & 0x000000FF
	// succ:  l4026E33C
l4026E33C:
sdk_eapol_txcb_exit:


// sdk_wpa_sm_set_state
// Return size: 0
void sdk_wpa_sm_set_state()
sdk_wpa_sm_set_state_entry:
	// succ:  l4022E364
l4022E364:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4022DEC4
	a3 = Mem0[a0 + 0x00000168:word32]
	Mem0[a1 + 0x00000004:word32] = a2
	branch a3 != 10 l4022E382
	// succ:  l4022E376 l4022E382
l4022E376:
	a2 = 0x4022E274
	a0 = 0x4022E37C
	call fn40304430 (retsize: 0;)
	a0 = 0x4022DEC4
	a2 = Mem0[a1 + 0x00000004:word32]
	// succ:  l4022E382
l4022E382:
	Mem0[a0 + 0x00000168:word32] = a2
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wpa_sm_set_state_exit
sdk_wpa_sm_set_state_exit:


// sdk_wpa_parse_wpa_ie_rsn
// Return size: 0
void sdk_wpa_parse_wpa_ie_rsn()
sdk_wpa_parse_wpa_ie_rsn_entry:
	// succ:  l4022E4D4
l4022E4D4:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a15
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a12
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a13
	a14 = a4
	a13 = a2
	a12 = a3
	a2 = a4
	a3 = 0
	a4 = 32
	a0 = 0x4020267C
	v11 = a0
	a0 = 0x4022E4F3
	call v11 (retsize: 0;)
	a15 = 0
	a0 = 1
	a2 = 2
	a3 = 8
	Mem0[a14 + 0x00000004:word32] = a3
	Mem0[a14 + 0x00000008:word32] = a3
	Mem0[a14:word32] = a2
	Mem0[a14 + 0x0000000C:word32] = a0
	Mem0[a14 + 0x00000010:word32] = a15
	Mem0[a14 + 0x00000018:word32] = a15
	Mem0[a14 + 0x00000014:word32] = a15
	Mem0[a14 + 0x0000001C:word32] = a15
	branch a12 == 0x00000000 l4022E547
	// succ:  l4022E50D l4022E547
l4022E50D:
	branch a12 <u 0x00000004 l4022E547
	// succ:  l4022E510 l4022E547
l4022E510:
	v12 = Mem0[a13 + 0x00000000:byte]
	a4 = (uint32) v12
	a5 = 48
	branch a4 != a5 l4022E536
	// succ:  l4022E518 l4022E536
l4022E518:
	v15 = Mem0[a13 + 0x00000001:byte]
	a6 = (uint32) v15
	a7 = a12 - 2
	branch a6 != a7 l4022E536
	// succ:  l4022E521 l4022E536
l4022E521:
	v18 = Mem0[a13 + 0x00000003:byte]
	a9 = (uint32) v18
	v20 = Mem0[a13 + 0x00000002:byte]
	a8 = (uint32) v20
	a9 = a9 << 24
	a8 = a8 | a9
	a8 = a8 << 16
	a8 = a8 >> 16
	branch a8 == 1 l4022E54C
	// succ:  l4022E536 l4022E54C
l4022E536:
	a2 = -2
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a15 = Mem0[a1 + 0x00000014:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wpa_parse_wpa_ie_rsn_exit
l4022E547:
	a2 = -1
	goto l4026E538
	// succ:  l4026E538
l4022E54C:
	a13 = a13 + 4
	a10 = a12 - 4
	Mem0[a1:word32] = a10
	a12 = a10
	branch a10 >= 4 l4022E55B
	// succ:  l4022E558 l4022E55B
l4022E558:
	goto l4022E638
	// succ:  l4022E638
l4022E55B:
	a2 = a13
	a0 = 0x4022E560
	call fn4032E398 (retsize: 0;)
	a13 = a13 + 4
	a12 = Mem0[a1 + 0x00000000:word32]
	Mem0[a14 + 0x00000008:word32] = a2
	a12 = a12 - 4
	branch a12 >= 2 l4022E56F
	// succ:  l4022E56C l4022E56F
l4022E56C:
	goto l4022E64C
	// succ:  l4022E64C
l4022E56F:
	a12 = a12 - 2
	Mem0[a14 + 0x00000004:word32] = a15
	v22 = Mem0[a13 + 0x00000000:byte]
	a0 = (uint32) v22
	v23 = Mem0[a13 + 0x00000001:byte]
	a2 = (uint32) v23
	a13 = a13 + 2
	a2 = a2 << 24
	a0 = a0 | a2
	a0 = a0 & 0x0000FFFF
	Mem0[a1 + 0x00000018:word32] = a0
	branch a0 == 0x00000000 l4022E65E
	// succ:  l4022E58A l4022E65E
l4022E58A:
	a3 = a0 << 30
	branch a12 >= a3 l4022E593
	// succ:  l4022E590 l4022E593
l4022E590:
	goto l4022E65E
	// succ:  l4022E65E
l4022E593:
	branch a0 < 1 l4022E5B0
	// succ:  l4022E596 l4022E5B0
l4022E596:
	a15 = 0
	// succ:  l4022E598
l4022E598:
	a2 = a13
	a0 = 0x4022E59D
	call fn4032E398 (retsize: 0;)
	a13 = a13 + 4
	a12 = a12 - 4
	a15 = a15 + 1
	a6 = Mem0[a14 + 0x00000004:word32]
	a5 = Mem0[a1 + 0x00000018:word32]
	a6 = a6 | a2
	Mem0[a14 + 0x00000004:word32] = a6
	branch a5 != a15 l4022E598
	// succ:  l4022E5B0 l4022E598
l4022E5B0:
	a15 = 0
	branch a12 >= 2 l4022E5B8
	a15 = 0
	branch a12 >= 2 l4022E5B8
	// succ:  l4022E5B5 l4022E5B8
l4022E5B5:
	goto l4022E656
	// succ:  l4022E656
l4022E5B8:
	a12 = a12 - 2
	Mem0[a14 + 0x0000000C:word32] = a15
	v24 = Mem0[a13 + 0x00000000:byte]
	a7 = (uint32) v24
	v25 = Mem0[a13 + 0x00000001:byte]
	a8 = (uint32) v25
	a13 = a13 + 2
	a8 = a8 << 24
	a7 = a7 | a8
	a7 = a7 & 0x0000FFFF
	Mem0[a1 + 0x00000018:word32] = a7
	branch a7 == 0x00000000 l4022E663
	// succ:  l4022E5D3 l4022E663
l4022E5D3:
	a9 = a7 << 30
	branch a12 >= a9 l4022E5DC
	// succ:  l4022E5D9 l4022E5DC
l4022E5D9:
	goto l4022E663
	// succ:  l4022E663
l4022E5DC:
	branch a7 < 1 l4022E5F9
	// succ:  l4022E5DF l4022E5F9
l4022E5DF:
	a15 = 0
	// succ:  l4022E5E1
l4022E5E1:
	a2 = a13
	a0 = 0x4022E5E6
	call fn4032E3F0 (retsize: 0;)
	a13 = a13 + 4
	a12 = a12 - 4
	a15 = a15 + 1
	a0 = Mem0[a14 + 0x0000000C:word32]
	a11 = Mem0[a1 + 0x00000018:word32]
	a0 = a0 | a2
	Mem0[a14 + 0x0000000C:word32] = a0
	branch a11 != a15 l4022E5E1
	// succ:  l4022E5F9 l4022E5E1
l4022E5F9:
	a15 = 0
	branch a12 < 2 l4022E647
	// succ:  l4022E5FE l4022E647
l4022E5FE:
	a12 = a12 - 2
	v27 = Mem0[a13 + 0x00000000:byte]
	a2 = (uint32) v27
	v28 = Mem0[a13 + 0x00000001:byte]
	a3 = (uint32) v28
	a13 = a13 + 2
	a3 = a3 << 24
	a2 = a2 | a3
	a2 = a2 & 0x0000FFFF
	Mem0[a14 + 0x00000010:word32] = a2
	branch a12 < 2 l4022E647
	// succ:  l4022E617 l4022E647
l4022E617:
	a4 = a12 - 2
	v29 = Mem0[a13 + 0x00000001:byte]
	a6 = (uint32) v29
	v30 = Mem0[a13 + 0x00000000:byte]
	a5 = (uint32) v30
	a6 = a6 << 24
	a5 = a5 | a6
	a5 = a5 & 0x0000FFFF
	Mem0[a14 + 0x00000014:word32] = a5
	a5 = a5 << 28
	branch a4 >= a5 l4022E643
	// succ:  l4022E631 l4022E643
l4022E631:
	Mem0[a14 + 0x00000014:word32] = a15
	a2 = -9
	goto l4026E538
	// succ:  l4026E538
l4022E638:
	branch a10 >= 1 l4022E63E
	// succ:  l4022E63B l4022E63E
l4022E63B:
	goto l4026E569
	// succ:  l4026E569
l4022E63E:
	a2 = -3
	goto l4026E538
	// succ:  l4026E538
l4022E643:
	a7 = a13 + 2
	Mem0[a14 + 0x00000018:word32] = a7
	// succ:  l4022E647
l4022E647:
	a2 = 0
	goto l4026E538
	// succ:  l4026E538
l4022E64C:
	a8 = a12 - 1
	branch a8 != 0x00000000 l4022E5B0
	// succ:  l4022E651 l4022E5B0
l4022E651:
	a2 = -5
	goto l4026E538
	// succ:  l4026E538
l4022E656:
	branch a12 != 1 l4022E5F9
	// succ:  l4022E659 l4022E5F9
l4022E659:
	a2 = -7
	goto l4026E538
	// succ:  l4026E538
l4022E65E:
	a2 = -4
	goto l4026E538
	// succ:  l4026E538
l4022E663:
	a2 = -6
	// succ:  l4026E538
l4026E538:
l4026E569:
sdk_wpa_parse_wpa_ie_rsn_exit:


// sdk_wpa_parse_wpa_ie_wpa
// Return size: 0
void sdk_wpa_parse_wpa_ie_wpa()
sdk_wpa_parse_wpa_ie_wpa_entry:
	// succ:  l4022E668
l4022E668:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000008:word32] = a13
	a14 = a4
	a13 = a2
	a12 = a3
	a2 = a4
	a3 = 0
	a4 = 32
	a0 = 0x4020267C
	v11 = a0
	a0 = 0x4022E687
	call v11 (retsize: 0;)
	a0 = 1
	a2 = 2
	Mem0[a14 + 0x00000004:word32] = a2
	Mem0[a14:word32] = a0
	Mem0[a14 + 0x0000000C:word32] = a0
	Mem0[a14 + 0x00000008:word32] = a2
	a0 = 0
	Mem0[a14 + 0x00000010:word32] = a0
	Mem0[a14 + 0x00000018:word32] = a0
	Mem0[a14 + 0x00000014:word32] = a0
	Mem0[a14 + 0x0000001C:word32] = a0
	branch a12 == 0x00000000 l4022E6FF
	// succ:  l4022E6A0 l4022E6FF
l4022E6A0:
	branch a12 <u 0x00000008 l4022E6FF
	// succ:  l4022E6A3 l4022E6FF
l4022E6A3:
	v12 = Mem0[a13 + 0x00000000:byte]
	a3 = (uint32) v12
	a4 = 0x000000DD
	branch a3 != a4 l4022E6EE
	// succ:  l4022E6AC l4022E6EE
l4022E6AC:
	v14 = Mem0[a13 + 0x00000001:byte]
	a5 = (uint32) v14
	a6 = a12 - 2
	branch a5 != a6 l4022E6EE
	// succ:  l4022E6B5 l4022E6EE
l4022E6B5:
	v17 = Mem0[a13 + 0x00000005:byte]
	a7 = (uint32) v17
	v19 = Mem0[a13 + 0x00000002:byte]
	a9 = (uint32) v19
	v21 = Mem0[a13 + 0x00000003:byte]
	a10 = (uint32) v21
	v23 = Mem0[a13 + 0x00000004:byte]
	a8 = (uint32) v23
	a10 = a10 << 16
	a8 = a8 << 24
	a9 = a9 << 8
	a7 = a7 | a8
	a8 = 0x4022CDF8
	a9 = a9 | a10
	a7 = a7 | a9
	branch a7 != a8 l4022E6EE
	// succ:  l4022E6D9 l4022E6EE
l4022E6D9:
	v24 = Mem0[a13 + 0x00000007:byte]
	a10 = (uint32) v24
	v25 = Mem0[a13 + 0x00000006:byte]
	a9 = (uint32) v25
	a10 = a10 << 24
	a9 = a9 | a10
	a9 = a9 << 16
	a9 = a9 >> 16
	branch a9 == 1 l4022E704
	// succ:  l4022E6EE l4022E704
l4022E6EE:
	a2 = -2
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wpa_parse_wpa_ie_wpa_exit
l4022E6FF:
	a2 = -1
	goto l4026E6F0
	// succ:  l4026E6F0
l4022E704:
	a13 = a13 + 8
	a15 = a12 - 8
	a12 = a15
	branch a15 >= 4 l4022E711
	// succ:  l4022E70E l4022E711
l4022E70E:
	goto l4022E7C6
	// succ:  l4022E7C6
l4022E711:
	a2 = a13
	a0 = 0x4022E716
	call fn4032E438 (retsize: 0;)
	a0 = 0
	a13 = a13 + 4
	a12 = a15 - 4
	Mem0[a14 + 0x00000008:word32] = a2
	branch a12 >= 2 l4022E725
	// succ:  l4022E722 l4022E725
l4022E722:
	goto l4022E7D1
	// succ:  l4022E7D1
l4022E725:
	a12 = a12 - 2
	Mem0[a14 + 0x00000004:word32] = a0
	v26 = Mem0[a13 + 0x00000000:byte]
	a15 = (uint32) v26
	v27 = Mem0[a13 + 0x00000001:byte]
	a2 = (uint32) v27
	a13 = a13 + 2
	a2 = a2 << 24
	a15 = a15 | a2
	a15 = a15 & 0x0000FFFF
	branch a15 == 0x00000000 l4022E7E1
	// succ:  l4022E73E l4022E7E1
l4022E73E:
	a3 = a15 << 30
	branch a12 >= a3 l4022E747
	// succ:  l4022E744 l4022E747
l4022E744:
	goto l4022E7E1
	// succ:  l4022E7E1
l4022E747:
	branch a15 < 1 l4022E76A
	// succ:  l4022E74A l4022E76A
l4022E74A:
	a4 = 0
	Mem0[a1 + 0x00000014:word32] = a4
	// succ:  l4022E74E
l4022E74E:
	a2 = a13
	a0 = 0x4022E753
	call fn4032E438 (retsize: 0;)
	a13 = a13 + 4
	a12 = a12 - 4
	a5 = Mem0[a1 + 0x00000014:word32]
	a6 = Mem0[a14 + 0x00000004:word32]
	a5 = a5 + 1
	a6 = a6 | a2
	Mem0[a14 + 0x00000004:word32] = a6
	Mem0[a1 + 0x00000014:word32] = a5
	branch a15 != a5 l4022E74E
	// succ:  l4022E768 l4022E74E
l4022E768:
	a0 = 0
	// succ:  l4022E76A
l4022E76A:
	branch a12 < 2 l4022E7D9
	// succ:  l4022E76D l4022E7D9
l4022E76D:
	a12 = a12 - 2
	Mem0[a14 + 0x0000000C:word32] = a0
	v28 = Mem0[a13 + 0x00000000:byte]
	a15 = (uint32) v28
	v29 = Mem0[a13 + 0x00000001:byte]
	a2 = (uint32) v29
	a13 = a13 + 2
	a2 = a2 << 24
	a15 = a15 | a2
	a15 = a15 & 0x0000FFFF
	branch a15 == 0x00000000 l4022E7E6
	// succ:  l4022E786 l4022E7E6
l4022E786:
	a3 = a15 << 30
	branch a12 < a3 l4022E7E6
	// succ:  l4022E78C l4022E7E6
l4022E78C:
	branch a15 < 1 l4022E7AD
	// succ:  l4022E78F l4022E7AD
l4022E78F:
	a4 = 0
	Mem0[a1 + 0x00000014:word32] = a4
	// succ:  l4022E793
l4022E793:
	a2 = a13
	a0 = 0x4022E798
	call fn4032E490 (retsize: 0;)
	a13 = a13 + 4
	a12 = a12 - 4
	a5 = Mem0[a1 + 0x00000014:word32]
	a6 = Mem0[a14 + 0x0000000C:word32]
	a5 = a5 + 1
	a6 = a6 | a2
	Mem0[a14 + 0x0000000C:word32] = a6
	Mem0[a1 + 0x00000014:word32] = a5
	branch a15 != a5 l4022E793
	// succ:  l4022E7AD l4022E793
l4022E7AD:
	branch a12 < 2 l4022E7C1
	// succ:  l4022E7B0 l4022E7C1
l4022E7B0:
	v30 = Mem0[a13 + 0x00000001:byte]
	a8 = (uint32) v30
	v31 = Mem0[a13 + 0x00000000:byte]
	a7 = (uint32) v31
	a8 = a8 << 24
	a7 = a7 | a8
	a7 = a7 & 0x0000FFFF
	Mem0[a14 + 0x00000010:word32] = a7
	// succ:  l4022E7C1
l4022E7C1:
	a2 = 0
	goto l4026E6F0
	// succ:  l4026E6F0
l4022E7C6:
	branch a15 >= 1 l4022E7CC
	// succ:  l4022E7C9 l4022E7CC
l4022E7C9:
	goto l4026E71F
	// succ:  l4026E71F
l4022E7CC:
	a2 = -3
	goto l4026E6F0
	// succ:  l4026E6F0
l4022E7D1:
	branch a12 != 1 l4022E76A
	// succ:  l4022E7D4 l4022E76A
l4022E7D4:
	a2 = -5
	goto l4026E6F0
	// succ:  l4026E6F0
l4022E7D9:
	branch a12 != 1 l4022E7AD
	// succ:  l4022E7DC l4022E7AD
l4022E7DC:
	a2 = -7
	goto l4026E6F0
	// succ:  l4026E6F0
l4022E7E1:
	a2 = -4
	goto l4026E6F0
	// succ:  l4026E6F0
l4022E7E6:
	a2 = -6
	// succ:  l4026E6F0
l4026E6F0:
l4026E71F:
sdk_wpa_parse_wpa_ie_wpa_exit:


// sdk_wpa_eapol_key_mic
// Return size: 0
void sdk_wpa_eapol_key_mic()
sdk_wpa_eapol_key_mic_entry:
	// succ:  l4022E7EC
l4022E7EC:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000024:word32] = a0
	branch a3 == 1 l4022E7FE
	// succ:  l4022E7F4 l4022E7FE
l4022E7F4:
	Mem0[a1 + 0x00000020:word32] = a6
	branch a3 == 2 l4022E80D
	// succ:  l4022E7F9 l4022E80D
l4022E7F9:
	a2 = -1
	goto l4022E804
	// succ:  l4022E804
l4022E7FE:
	a3 = 0x00000010
	a0 = 0x4022E804
	call sdk_hmac_md5 (retsize: 0;)
	// succ:  l4022E804
l4022E804:
	a0 = Mem0[a1 + 0x00000024:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_wpa_eapol_key_mic_exit
l4022E80D:
	a3 = 0x00000010
	a6 = a1 | a1
	a0 = 0x4022E816
	call sdk_hmac_sha1 (retsize: 0;)
	branch a2 != 0x00000000 l4022E7F9
	// succ:  l4022E819 l4022E7F9
l4022E819:
	a2 = Mem0[a1 + 0x00000020:word32]
	a3 = a1
	a4 = 16
	a0 = 0x40203130
	v8 = a0
	a0 = 0x4022E826
	call v8 (retsize: 0;)
	a2 = 0
	// succ:  l4026E804
l4026E804:
sdk_wpa_eapol_key_mic_exit:


// sdk_wpa_compare_rsn_ie
// Return size: 0
void sdk_wpa_compare_rsn_ie()
sdk_wpa_compare_rsn_ie_entry:
	// succ:  l4022E82C
l4022E82C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a3 == 0x00000000 l4022E849
	// succ:  l4022E833 l4022E849
l4022E833:
	branch a5 == 0x00000000 l4022E849
	// succ:  l4022E835 l4022E849
l4022E835:
	branch a4 != a6 l4022E849
	// succ:  l4022E838 l4022E849
l4022E838:
	a2 = a3
	a3 = a5
	a0 = 0x40202AA8
	v9 = a0
	a0 = 0x4022E842
	call v9 (retsize: 0;)
	branch a2 != 0x00000000 l4022E849
	// succ:  l4022E844 l4022E849
l4022E844:
	a2 = 0
	goto l4022E84B
	// succ:  l4022E84B
l4022E849:
	a2 = -1
	// succ:  l4022E84B
l4022E84B:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wpa_compare_rsn_ie_exit
sdk_wpa_compare_rsn_ie_exit:


// sdk_wpa_pmk_to_ptk
// Return size: 0
void sdk_wpa_pmk_to_ptk()
sdk_wpa_pmk_to_ptk_entry:
	// succ:  l4022E854
l4022E854:
	a1 = fp
	a1 = a1 - 128
	Mem0[a1 + 0x0000007C:word32] = a15
	Mem0[a1 + 0x0000006C:word32] = a0
	Mem0[a1 + 0x00000068:word32] = a4
	Mem0[a1 + 0x00000074:word32] = a13
	Mem0[a1 + 0x00000078:word32] = a14
	Mem0[a1 + 0x00000064:word32] = a3
	Mem0[a1 + 0x00000070:word32] = a12
	Mem0[a1 + 0x00000060:word32] = a2
	a12 = a7
	a2 = a5
	a3 = a6
	a14 = a5
	a13 = a6
	a4 = 6
	a0 = 0x40202AA8
	v14 = a0
	a0 = 0x4022E881
	call v14 (retsize: 0;)
	a15 = a1 + 22
	branch a2 >= 0x00000000 l4022E8A3
	// succ:  l4022E887 l4022E8A3
l4022E887:
	a3 = a14
	a2 = a1 + 16
	a4 = 6
	a0 = 0x40203130
	v15 = a0
	a0 = 0x4022E894
	call v15 (retsize: 0;)
	a3 = a13
	a2 = a15
	a4 = 6
	a0 = 0x40203130
	v16 = a0
	a0 = 0x4022E8A0
	call v16 (retsize: 0;)
	goto l4022E8BC
	// succ:  l4022E8BC
l4022E8A3:
	a3 = a13
	a2 = a1 + 16
	a4 = 6
	a0 = 0x40203130
	v17 = a0
	a0 = 0x4022E8B0
	call v17 (retsize: 0;)
	a3 = a14
	a2 = a15
	a4 = 6
	a0 = 0x40203130
	v18 = a0
	a0 = 0x4022E8BC
	call v18 (retsize: 0;)
	// succ:  l4022E8BC
l4022E8BC:
	a2 = a12
	a14 = Mem0[a1 + 0x00000080:word32]
	a4 = 32
	a3 = a14
	a0 = 0x40202AA8
	v19 = a0
	a0 = 0x4022E8CB
	call v19 (retsize: 0;)
	a13 = a1 + 60
	a15 = a2
	a2 = a1 + 28
	branch a15 >= 0x00000000 l4022E8EF
	// succ:  l4022E8D6 l4022E8EF
l4022E8D6:
	a3 = a12
	a4 = 32
	a0 = 0x40203130
	v20 = a0
	a0 = 0x4022E8E0
	call v20 (retsize: 0;)
	a3 = a14
	a2 = a13
	a4 = 32
	a0 = 0x40203130
	v21 = a0
	a0 = 0x4022E8EC
	call v21 (retsize: 0;)
	goto l4022E908
	// succ:  l4022E908
l4022E8EF:
	a3 = a14 | a14
	a4 = 0x00000020
	a0 = 0x40203130
	v22 = a0
	a0 = 0x4022E8FB
	call v22 (retsize: 0;)
	a3 = a12 | a12
	a2 = a13
	a4 = 32
	a0 = 0x40203130
	v23 = a0
	a0 = 0x4022E908
	call v23 (retsize: 0;)
	// succ:  l4022E908
l4022E908:
	a2 = Mem0[a1 + 0x00000060:word32]
	a3 = Mem0[a1 + 0x00000064:word32]
	a4 = Mem0[a1 + 0x00000068:word32]
	a7 = Mem0[a1 + 0x00000084:word32]
	a5 = a1 + 16
	a6 = 76
	a0 = Mem0[a1 + 0x00000088:word32]
	Mem0[a1:word32] = a0
	a0 = 0x4022E921
	call sdk_sha1_prf (retsize: 0;)
	a12 = Mem0[a1 + 0x00000070:word32]
	a13 = Mem0[a1 + 0x00000074:word32]
	a14 = Mem0[a1 + 0x00000078:word32]
	a15 = Mem0[a1 + 0x0000007C:word32]
	a2 = 0x00000080
	a0 = Mem0[a1 + 0x0000006C:word32]
	a1 = a1 + a2
	return
	// succ:  sdk_wpa_pmk_to_ptk_exit
sdk_wpa_pmk_to_ptk_exit:


// sdk_rsn_pmkid
// Return size: 0
void sdk_rsn_pmkid()
sdk_rsn_pmkid_entry:
	// succ:  l4022E940
l4022E940:
	a1 = fp
	a1 = a1 - 64
	a7 = a1 + 16
	Mem0[a1 + 0x00000034:word32] = a0
	Mem0[a1 + 0x00000030:word32] = a6
	Mem0[a1 + 0x00000004:word32] = a4
	Mem0[a1 + 0x00000008:word32] = a5
	a4 = 3
	a5 = a1
	a6 = 0x4022E93C
	a0 = 0x4022E938
	Mem0[a1:word32] = a0
	a0 = 0x4022E960
	call sdk_hmac_sha1_vector (retsize: 0;)
	a2 = Mem0[a1 + 0x00000030:word32]
	a3 = a1 + 16
	a4 = 16
	a0 = 0x40203130
	v10 = a0
	a0 = 0x4022E96D
	call v10 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000034:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_rsn_pmkid_exit
sdk_rsn_pmkid_exit:


// sdk_wpa_cipher_key_len
// Return size: 0
void sdk_wpa_cipher_key_len()
sdk_wpa_cipher_key_len_entry:
	// succ:  l4022E974
l4022E974:
	a1 = fp
	branch a2 == 2 l4022E98C
	// succ:  l4022E977 l4022E98C
l4022E977:
	branch a2 == 8 l4022E990
	// succ:  l4022E97A l4022E990
l4022E97A:
	branch a2 == 64 l4022E990
	// succ:  l4022E97D l4022E990
l4022E97D:
	branch a2 == 128 l4022E994
	// succ:  l4022E980 l4022E994
l4022E980:
	a4 = a2 + 0xFFFFFF00
	a3 = 13
	a2 = 0
	branch a4 != 0x00000000 l4022E98A
	// succ:  l4022E987_1 l4022E98A
l4022E987_1:
	a2 = a3
	// succ:  l4022E98A
l4022E98A:
	return
	// succ:  sdk_wpa_cipher_key_len_exit
l4022E98C:
	a2 = 32
	return
	// succ:  sdk_wpa_cipher_key_len_exit
l4022E990:
	a2 = 16
	return
	// succ:  sdk_wpa_cipher_key_len_exit
l4022E994:
	a2 = 5
	return
	// succ:  sdk_wpa_cipher_key_len_exit
sdk_wpa_cipher_key_len_exit:


// sdk_wpa_cipher_to_alg
// Return size: 0
void sdk_wpa_cipher_to_alg()
sdk_wpa_cipher_to_alg_entry:
	// succ:  l4022E998
l4022E998:
	a1 = fp
	branch a2 == 2 l4022E9AB
	// succ:  l4022E99B l4022E9AB
l4022E99B:
	branch a2 == 8 l4022E9B3
	// succ:  l4022E99E l4022E9B3
l4022E99E:
	branch a2 == 64 l4022E9B7
	// succ:  l4022E9A1 l4022E9B7
l4022E9A1:
	branch a2 == 128 l4022E9AF
	// succ:  l4022E9A4 l4022E9AF
l4022E9A4:
	branch a2 == 256 l4022E9AF
	// succ:  l4022E9A7 l4022E9AF
l4022E9A7:
	a2 = 0
	return
	// succ:  sdk_wpa_cipher_to_alg_exit
l4022E9AB:
	a2 = 2
	return
	// succ:  sdk_wpa_cipher_to_alg_exit
l4022E9AF:
	a2 = 6
	return
	// succ:  sdk_wpa_cipher_to_alg_exit
l4022E9B3:
	a2 = 3
	return
	// succ:  sdk_wpa_cipher_to_alg_exit
l4022E9B7:
	a2 = 9
	return
	// succ:  sdk_wpa_cipher_to_alg_exit
sdk_wpa_cipher_to_alg_exit:


// sdk_wpa_cipher_to_suite
// Return size: 0
void sdk_wpa_cipher_to_suite()
sdk_wpa_cipher_to_suite_entry:
	// succ:  l4022E9C0
l4022E9C0:
	a1 = fp
	branch (a3 & 0x00000008) == 0x00000000 l4022E9D8
	// succ:  l4022E9C3 l4022E9D8
l4022E9C3:
	a5 = 0x4022CDFC
	a3 = 0x4022E430
	a4 = a2 - 2
	branch a4 != 0x00000000 l4022E9CF
	// succ:  l4022E9CC_1 l4022E9CF
l4022E9CC_1:
	a3 = a5
	// succ:  l4022E9CF
l4022E9CF:
	goto l4022E9D4
	// succ:  l4022E9D4
l4022E9D2:
	a3 = 0
	// succ:  l4022E9D4
l4022E9D4:
	a2 = a3
	return
	// succ:  sdk_wpa_cipher_to_suite_exit
l4022E9D8:
	branch (a3 & 0x00000040) == 0x00000000 l4022E9E1
	// succ:  l4022E9DB l4022E9E1
l4022E9DB:
	a3 = 0x4022E9BC
	goto l4026E9D4
	// succ:  l4026E9D4
l4022E9E1:
	branch (a3 & 0x00000002) == 0x00000000 l4022E9ED
	// succ:  l4022E9E4 l4022E9ED
l4022E9E4:
	a5 = 0x4022E390
	a3 = 0x4022E42C
	goto l4026E9C9
	// succ:  l4026E9C9
l4022E9ED:
	branch (a3 & 0x00000100) == 0x00000000 l4022E9F9
	// succ:  l4022E9F0 l4022E9F9
l4022E9F0:
	a5 = 0x4022E394
	a3 = 0x4022E434
	goto l4026E9C9
	// succ:  l4026E9C9
l4022E9F9:
	branch (a3 & 0x00000080) == 0x00000000 l4022EA05
	// succ:  l4022E9FC l4022EA05
l4022E9FC:
	a5 = 0x4022C12C
	a3 = 0x4022CDF8
	goto l4026E9C9
	// succ:  l4026E9C9
l4022EA05:
	branch (a3 & 0x00000001) == 0x00000000 l4022E9D2
	// succ:  l4022EA08 l4022E9D2
l4022EA08:
	a5 = 0x4022E38C
	a3 = 0x4022E428
	// succ:  l4026E9C9
l4026E9C9:
l4026E9D4:
sdk_wpa_cipher_to_suite_exit:


// sdk_rsn_cipher_put_suites
// Return size: 0
void sdk_rsn_cipher_put_suites()
sdk_rsn_cipher_put_suites_entry:
	// succ:  l4022EA14
l4022EA14:
	a1 = fp
	a8 = 15
	a9 = 8
	a7 = 0xFFFFFFAC
	a6 = 0
	branch (a3 & 0x00000008) == 0x00000000 l4022EA35
	// succ:  l4022EA20 l4022EA35
l4022EA20:
	a5 = 1
	Mem0[a2:byte] = a6
	Mem0[a2 + 0x00000001:byte] = a8
	a4 = 4
	Mem0[a2 + 0x00000002:byte] = a7
	Mem0[a2 + 0x00000003:byte] = a4
	a2 = a2 + 4
	goto l4022EA37
	// succ:  l4022EA37
l4022EA35:
	a5 = a6
	// succ:  l4022EA37
l4022EA37:
	branch (a3 & 0x00000040) == 0x00000000 l4022EA4A
	// succ:  l4022EA3A l4022EA4A
l4022EA3A:
	a5 = a5 + 1
	Mem0[a2 + 0x00000003:byte] = a9
	Mem0[a2:byte] = a6
	Mem0[a2 + 0x00000001:byte] = a8
	Mem0[a2 + 0x00000002:byte] = a7
	a2 = a2 + 4
	// succ:  l4022EA4A
l4022EA4A:
	a9 = 2
	branch (a3 & 0x00000002) == 0x00000000 l4022EA5F
	// succ:  l4022EA4F l4022EA5F
l4022EA4F:
	a5 = a5 + 1
	Mem0[a2 + 0x00000003:byte] = a9
	Mem0[a2:byte] = a6
	Mem0[a2 + 0x00000001:byte] = a8
	Mem0[a2 + 0x00000002:byte] = a7
	a2 = a2 + 4
	// succ:  l4022EA5F
l4022EA5F:
	branch (a3 & 0x00000001) == 0x00000000 l4022EA70
	// succ:  l4022EA62 l4022EA70
l4022EA62:
	Mem0[a2 + 0x00000001:byte] = a8
	Mem0[a2 + 0x00000002:byte] = a7
	Mem0[a2:byte] = a6
	Mem0[a2 + 0x00000003:byte] = a6
	a5 = a5 + 1
	// succ:  l4022EA70
l4022EA70:
	a2 = a5
	return
	// succ:  sdk_rsn_cipher_put_suites_exit
sdk_rsn_cipher_put_suites_exit:


// sdk_wpa_cipher_put_suites
// Return size: 0
void sdk_wpa_cipher_put_suites()
sdk_wpa_cipher_put_suites_entry:
	// succ:  l4022EA74
l4022EA74:
	a1 = fp
	a8 = -14
	a7 = 80
	a9 = 2
	a6 = 0
	branch (a3 & 0x00000008) == 0x00000000 l4022EA94
	// succ:  l4022EA7F l4022EA94
l4022EA7F:
	a5 = 1
	Mem0[a2:byte] = a6
	Mem0[a2 + 0x00000001:byte] = a7
	a4 = 4
	Mem0[a2 + 0x00000002:byte] = a8
	Mem0[a2 + 0x00000003:byte] = a4
	a2 = a2 + 4
	goto l4022EA96
	// succ:  l4022EA96
l4022EA94:
	a5 = a6
	// succ:  l4022EA96
l4022EA96:
	branch (a3 & 0x00000002) == 0x00000000 l4022EAA9
	// succ:  l4022EA99 l4022EAA9
l4022EA99:
	a5 = a5 + 1
	Mem0[a2 + 0x00000003:byte] = a9
	Mem0[a2:byte] = a6
	Mem0[a2 + 0x00000001:byte] = a7
	Mem0[a2 + 0x00000002:byte] = a8
	a2 = a2 + 4
	// succ:  l4022EAA9
l4022EAA9:
	branch (a3 & 0x00000001) == 0x00000000 l4022EABA
	// succ:  l4022EAAC l4022EABA
l4022EAAC:
	Mem0[a2 + 0x00000001:byte] = a7
	Mem0[a2 + 0x00000002:byte] = a8
	Mem0[a2:byte] = a6
	Mem0[a2 + 0x00000003:byte] = a6
	a5 = a5 + 1
	// succ:  l4022EABA
l4022EABA:
	a2 = a5
	return
	// succ:  sdk_wpa_cipher_put_suites_exit
sdk_wpa_cipher_put_suites_exit:


// sdk_wpa_parse_wpa_ie
// Return size: 0
void sdk_wpa_parse_wpa_ie()
sdk_wpa_parse_wpa_ie_entry:
	// succ:  l4022EAC0
l4022EAC0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a3 == 0x00000000 l4022EAD8
	// succ:  l4022EAC9 l4022EAD8
l4022EAC9:
	v5 = Mem0[a2 + 0x00000000:byte]
	a0 = (uint32) v5
	a5 = 0x00000030
	branch a0 != a5 l4022EAD8
	// succ:  l4022EAD2 l4022EAD8
l4022EAD2:
	a0 = 0x4022EAD5
	call fn4032E4D4 (retsize: 0;)
	goto l4022EADB
	// succ:  l4022EADB
l4022EAD8:
	a0 = 0x4022EADB
	call fn4032E668 (retsize: 0;)
	// succ:  l4022EADB
l4022EADB:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wpa_parse_wpa_ie_exit
sdk_wpa_parse_wpa_ie_exit:


// sdk_wpa_supplicant_parse_ies
// Return size: 0
void sdk_wpa_supplicant_parse_ies()
sdk_wpa_supplicant_parse_ies_entry:
	// succ:  l4022EBB4
l4022EBB4:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a15
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x00000014:word32] = a14
	Mem0[a1 + 0x00000010:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a12
	a13 = a4
	a12 = a2
	a14 = a3
	a2 = a4
	a3 = 0
	a4 = 36
	a0 = 0x4020267C
	v11 = a0
	a0 = 0x4022EBD3
	call v11 (retsize: 0;)
	Mem0[a1 + 0x00000004:word32] = a13
	branch a14 < 2 l4022EC49
	// succ:  l4022EBD8 l4022EC49
l4022EBD8:
	a15 = 48
	a2 = 0
	a13 = a12 + a14
	a14 = 0x000000DD
	a0 = a13 - 1
	Mem0[a1:word32] = a0
	// succ:  l4022EBE5
l4022EBE5:
	v12 = Mem0[a12 + 0x00000000:byte]
	a0 = (uint32) v12
	v13 = Mem0[a12 + 0x00000001:byte]
	a3 = (uint32) v13
	branch a0 != a14 l4022EBFB
	// succ:  l4022EBEE l4022EBFB
l4022EBEE:
	a3 = Mem0[a1 + 0x00000000:word32]
	branch a3 == a12 l4022EC3A
	// succ:  l4022EBF3 l4022EC3A
l4022EBF3:
	v14 = Mem0[a12 + 0x00000001:byte]
	a3 = (uint32) v14
	branch a3 != 0x00000000 l4022EBFB
	// succ:  l4022EBF8 l4022EBFB
l4022EBF8:
	goto l4022EC3A
	// succ:  l4022EC3A
l4022EBFB:
	a3 = a3 + a12
	a3 = a3 + 2
	branch a13 <u a3 l4022EC38
	// succ:  l4022EC02 l4022EC38
l4022EC02:
	branch a0 != a15 l4022EC21
	// succ:  l4022EC05 l4022EC21
l4022EC05:
	a5 = Mem0[a1 + 0x00000004:word32]
	Mem0[a5 + 0x00000008:word32] = a12
	v16 = Mem0[a12 + 0x00000001:byte]
	a4 = (uint32) v16
	a4 = a4 + 2
	Mem0[a5 + 0x0000000C:word32] = a4
	// succ:  l4022EC10
l4022EC10:
	v17 = Mem0[a12 + 0x00000001:byte]
	a3 = (uint32) v17
	a3 = a3 + a12
	a3 = a3 + 2
	// succ:  l4022EC17
l4022EC17:
	a12 = a3
	a4 = a3 + 1
	branch a4 <u a13 l4022EBE5
	// succ:  l4022EC1E l4022EBE5
l4022EC1E:
	goto l4022EC3A
	// succ:  l4022EC3A
l4022EC21:
	branch a0 != a14 l4022EC17
	// succ:  l4022EC24 l4022EC17
l4022EC24:
	a2 = a12
	a3 = a13
	a4 = Mem0[a1 + 0x00000004:word32]
	a0 = 0x4022EC2D
	call fn4032EAE8 (retsize: 0;)
	branch a2 < 0x00000000 l4022EC3A
	// succ:  l4022EC30 l4022EC3A
l4022EC30:
	branch a2 < 1 l4022EC10
	// succ:  l4022EC33 l4022EC10
l4022EC33:
	a2 = 0
	goto l4022EC3A
	// succ:  l4022EC3A
l4022EC38:
	a2 = -1
	// succ:  l4022EC3A
l4022EC3A:
	a12 = Mem0[a1 + 0x0000000C:word32]
	a13 = Mem0[a1 + 0x00000010:word32]
	a14 = Mem0[a1 + 0x00000014:word32]
	a15 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wpa_supplicant_parse_ies_exit
l4022EC49:
	a2 = 0
	// succ:  l4026EC3A
l4026EC3A:
sdk_wpa_supplicant_parse_ies_exit:


// sdk_wpa_gen_wpa_ie
// Return size: 0
void sdk_wpa_gen_wpa_ie()
sdk_wpa_gen_wpa_ie_entry:
	// succ:  l4022EDB4
l4022EDB4:
	a1 = fp
	a1 = a1 - 32
	a9 = a3
	a5 = Mem0[a2 + 0x00000118:word32]
	a6 = Mem0[a2 + 0x0000011C:word32]
	a3 = a4
	Mem0[a1 + 0x00000010:word32] = a0
	a0 = Mem0[a2 + 0x00000164:word32]
	a4 = Mem0[a2 + 0x00000114:word32]
	branch a0 != 2 l4022EDD9
	// succ:  l4022EDCC l4022EDD9
l4022EDCC:
	a7 = Mem0[a2 + 0x00000120:word32]
	Mem0[a1:word32] = a2
	a2 = a9
	a0 = 0x4022EDD6
	call fn4032ED08 (retsize: 0;)
	goto l4022EDDE
	// succ:  l4022EDDE
l4022EDD9:
	a2 = a9
	a0 = 0x4022EDDE
	call fn4032EC50 (retsize: 0;)
	// succ:  l4022EDDE
l4022EDDE:
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wpa_gen_wpa_ie_exit
sdk_wpa_gen_wpa_ie_exit:


// sdk_ppInstallKey
// Return size: 0
void sdk_ppInstallKey()
sdk_ppInstallKey_entry:
	// succ:  l4022EDE8
l4022EDE8:
	a1 = fp
	a5 = a3 | a3
	a1 = a1 - 48
	Mem0[a1 + 0x00000024:word32] = a14
	a7 = Mem0[a1 + 0x00000030:word32]
	Mem0[a1 + 0x00000010:word32] = a6
	Mem0[a1 + 0x00000018:word32] = a0
	Mem0[a1 + 0x00000020:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a12
	a13 = Mem0[a1 + 0x00000038:word32]
	a12 = a2
	a0 = Mem0[a1 + 0x00000034:word32]
	a2 = 0
	a3 = a12
	Mem0[a1:word32] = a0
	a6 = a13 + 1
	Mem0[a1 + 0x00000014:word32] = a6
	a0 = 0x4022EE0F
	call fn40326B4C (retsize: 0;)
	a0 = 0x402035F0
	a2 = a13 - 1
	a14 = a0 + a13 * 0x00000004
	branch a13 >= 4 l4022EE38
	// succ:  l4022EE1A l4022EE38
l4022EE1A:
	a3 = Mem0[a0 + 0x00000010:word32]
	a3 = Mem0[a3 + 0x00000088:word32]
	Mem0[a3 + 0x000000E9:byte] = a2
	a13 = Mem0[a14 + 0x0000018C:word32]
	branch a13 != 0x00000000 l4022EE53
	// succ:  l4022EE27 l4022EE53
l4022EE27:
	a2 = 0x000000A0
	a0 = 0x402034C4
	v12 = a0
	a0 = 0x4022EE30
	call v12 (retsize: 0;)
	a13 = a2
	Mem0[a14 + 0x0000018C:word32] = a2
	goto l4022EE53
	// succ:  l4022EE53
l4022EE38:
	a13 = Mem0[a14 + 0x0000018C:word32]
	branch a13 == 0x00000000 l4022EE45
	// succ:  l4022EE3D l4022EE45
l4022EE3D:
	a2 = a13
	a0 = 0x402034CC
	v13 = a0
	a0 = 0x4022EE45
	call v13 (retsize: 0;)
	// succ:  l4022EE45
l4022EE45:
	a2 = 0x000000A0
	a0 = 0x402034C4
	v14 = a0
	a0 = 0x4022EE4E
	call v14 (retsize: 0;)
	a13 = a2
	Mem0[a14 + 0x0000018C:word32] = a2
	// succ:  l4022EE53
l4022EE53:
	a2 = a13
	a3 = 0x000000A0
	a0 = 0x40213724
	v15 = a0
	a0 = 0x4022EE5E
	call v15 (retsize: 0;)
	branch a12 != 2 l4022EE88
	// succ:  l4022EE61 l4022EE88
l4022EE61:
	a0 = 0x4022AD6C
	Mem0[a13 + 0x00000098:word32] = a0
	// succ:  l4022EE67
l4022EE67:
	a4 = 8
	a2 = 0x00000090
	a3 = Mem0[a1 + 0x00000014:word32]
	Mem0[a13:word16] = a3
	a2 = a13 + a2
	a3 = Mem0[a1 + 0x00000010:word32]
	a0 = 0x40203130
	v17 = a0
	a0 = 0x4022EE7B
	call v17 (retsize: 0;)
	a12 = Mem0[a1 + 0x0000001C:word32]
	a13 = Mem0[a1 + 0x00000020:word32]
	a14 = Mem0[a1 + 0x00000024:word32]
	a0 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_ppInstallKey_exit
l4022EE88:
	branch a12 != 3 l4022EE91
	// succ:  l4022EE8B l4022EE91
l4022EE8B:
	a0 = 0x4022AD70
	goto l4026EE64
	// succ:  l4026EE64
l4022EE91:
	branch a12 == 1 l4022EE97
	// succ:  l4022EE94 l4022EE97
l4022EE94:
	branch a12 != 5 l4022EE67
	// succ:  l4022EE97 l4022EE67
l4022EE97:
	a0 = 0x4022AD74
	// succ:  l4026EE64
l4026EE64:
sdk_ppInstallKey_exit:


// sdk_wpa_config_profile
// Return size: 0
void sdk_wpa_config_profile()
sdk_wpa_config_profile_entry:
	// succ:  l4022EEF0
l4022EEF0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = a2 + 0x00000200
	v5 = Mem0[a0 + 0x00000009:byte]
	a0 = (uint32) v5
	branch a0 == 2 l4022EF1C
	// succ:  l4022EEFF l4022EF1C
l4022EEFF:
	branch a0 == 3 l4022EF1C
	// succ:  l4022EF02 l4022EF1C
l4022EF02:
	branch a0 == 6 l4022EF1C
	// succ:  l4022EF05 l4022EF1C
l4022EF05:
	branch a0 == 4 l4022EF0E
	// succ:  l4022EF08 l4022EF0E
l4022EF08:
	branch a0 == 5 l4022EF0E
	// succ:  l4022EF0B l4022EF0E
l4022EF0B:
	branch a0 != 7 l4022EF14
	// succ:  l4022EF0E l4022EF14
l4022EF0E:
	a2 = 0x00000002
	a0 = 0x4022EF14
	call fn4032E060 (retsize: 0;)
	// succ:  l4022EF14
l4022EF14:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wpa_config_profile_exit
l4022EF1C:
	a2 = 1
	a0 = 0x4022EF21
	call fn4032E060 (retsize: 0;)
	// succ:  l4026EF14
l4026EF14:
sdk_wpa_config_profile_exit:


// sdk_wpa_config_bss
// Return size: 0
void sdk_wpa_config_bss()
sdk_wpa_config_bss_entry:
	// succ:  l4022EF28
l4022EF28:
	a1 = fp
	a7 = a2 | a2
	a1 = a1 - 32
	a4 = 0x0000018A
	v7 = Mem0[a2 + 0x000001E4:uint16]
	a8 = (uint32) v7
	v9 = Mem0[a2 + 0x000001E6:uint16]
	a6 = (uint32) v9
	Mem0[a1 + 0x00000010:word32] = a0
	a4 = a2 + a4
	v12 = Mem0[a4 + 0x00000082:byte]
	a5 = (uint32) v12
	a0 = 0x000001E8
	v13 = Mem0[a4 + 0x00000080:byte]
	a4 = (uint32) v13
	a6 = a6 << 16
	a2 = Mem0[a2 + 0x00000010:word32]
	a6 = a6 | a8
	a2 = Mem0[a2 + 0x00000000:word32]
	Mem0[a1:word32] = a6
	a6 = 0x0000020F
	a2 = a2 + 41
	a6 = a7 + a6
	a7 = a7 + a0
	a0 = 0x4022EF5F
	call fn4032E09C (retsize: 0;)
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wpa_config_bss_exit
sdk_wpa_config_bss_exit:


// sdk_wpa_config_assoc_ie
// Return size: 0
void sdk_wpa_config_assoc_ie()
sdk_wpa_config_assoc_ie_entry:
	// succ:  l4022EF68
l4022EF68:
	a1 = fp
	a6 = 0x402035F0
	branch a2 != 1 l4022EF76
	// succ:  l4022EF6E l4022EF76
l4022EF6E:
	Mem0[a6 + 0x00000174:word32] = a3
	Mem0[a3:word16] = a4
	return
	// succ:  sdk_wpa_config_assoc_ie_exit
l4022EF76:
	Mem0[a6 + 0x00000178:word32] = a3
	// succ:  l4026EF71
l4026EF71:
sdk_wpa_config_assoc_ie_exit:


// sdk_dhcp_bind_check
// Return size: 0
void sdk_dhcp_bind_check()
sdk_dhcp_bind_check_entry:
	// succ:  l4022EF7C
l4022EF7C:
	a1 = fp
	a4 = 0x402035F0
	a4 = Mem0[a4 + 0x00000010:word32]
	a3 = 0x402131CC
	v6 = Mem0[a4 + 0x000000BA:byte]
	a2 = (uint32) v6
	v7 = Mem0[a3 + 0x0000008A:byte]
	a3 = (uint32) v7
	branch a2 == 5 l4022EF98
	// succ:  l4022EF8D l4022EF98
l4022EF8D:
	branch a3 == 7 l4022EF93
	// succ:  l4022EF90 l4022EF93
l4022EF90:
	branch a3 != 8 l4022EF98
	// succ:  l4022EF93 l4022EF98
l4022EF93:
	a5 = 2
	Mem0[a4 + 0x000000BA:byte] = a5
	// succ:  l4022EF98
l4022EF98:
	return
	// succ:  sdk_dhcp_bind_check_exit
sdk_dhcp_bind_check_exit:


// sdk_eagle_auth_done
// Return size: 0
void sdk_eagle_auth_done()
sdk_eagle_auth_done_entry:
	// succ:  l4022EFAC
l4022EFAC:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a12
	a12 = 0x402035F0
	a12 = Mem0[a12 + 0x00000010:word32]
	Mem0[a1 + 0x00000004:word32] = a0
	a0 = Mem0[a12 + 0x00000088:word32]
	a2 = Mem0[a0 + 0x00000008:word32]
	a2 = a2 & 0x00000001
	branch a2 != 0x00000000 l4022F056
	// succ:  l4022EFC3 l4022F056
l4022EFC3:
	a2 = 0x4022EF9C
	a4 = Mem0[a0 + 0x00000078:word32]
	a3 = 0x402138F4
	v8 = Mem0[a4 + 0x00000006:byte]
	a4 = (uint32) v8
	a0 = 0x402034D0
	v9 = a0
	a0 = 0x4022EFD5
	call v9 (retsize: 0;)
	a5 = Mem0[a12 + 0x00000088:word32]
	a5 = Mem0[a5 + 0x00000078:word32]
	a6 = 0x402138F8
	v12 = Mem0[a5 + 0x00000006:byte]
	a5 = (uint32) v12
	a5 = a5 | a6
	a6 = 0x40212EE8
	Mem0[a6 + 0x000003F4:word32] = a5
	a2 = a12 + 4
	Mem0[a1:word32] = a2
	a0 = 0x4022EFF4
	call fn40304430 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = 0x4022EFA0
	a4 = 0
	a0 = 0x4022EFFE
	call fn403042E8 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = 0x4022A558
	a4 = 0
	a0 = 0x4022F008
	call fn4030438C (retsize: 0;)
	a9 = 1
	a11 = 0x402035F0
	a8 = Mem0[a12 + 0x00000088:word32]
	a11 = Mem0[a11 + 0x00000010:word32]
	a10 = 0
	Mem0[a11 + 0x000000B9:byte] = a10
	Mem0[a8 + 0x00000018:byte] = a10
	a7 = Mem0[a8 + 0x00000008:word32]
	a0 = Mem0[a12 + 0x00000000:word32]
	a7 = a7 | a9
	Mem0[a8 + 0x00000008:word32] = a7
	v18 = Mem0[a0 + 0x0000002F:byte]
	a6 = (uint32) v18
	branch (a6 & 0x00000008) != 0x00000000 l4022F056
	// succ:  l4022F029 l4022F056
l4022F029:
	a2 = Mem0[a0 + 0x00000004:word32]
	a3 = 0x4022EFA4
	branch a2 != 0x00000000 l4022F046
	// succ:  l4022F030 l4022F046
l4022F030:
	v19 = Mem0[a3 + 0x00000000:byte]
	a3 = (uint32) v19
	branch a3 == 0x00000000 l4022F056
	// succ:  l4022F035 l4022F056
l4022F035:
	a2 = 0x4022EFA8
	a0 = 0x402034D0
	v20 = a0
	a0 = 0x4022F03E
	call v20 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000000:word32]
	a0 = 0x4022F043
	call fn4030B100 (retsize: 0;)
	goto l4022F056
	// succ:  l4022F056
l4022F046:
	a2 = a0 + 4
	a3 = a0 + 8
	a4 = a0 + 12
	a0 = 0x4022F051
	call fn40304254 (retsize: 0;)
	a2 = Mem0[a12 + 0x00000000:word32]
	a0 = 0x4022F056
	call fn4030C5B4 (retsize: 0;)
	// succ:  l4022F056
l4022F056:
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_eagle_auth_done_exit
sdk_eagle_auth_done_exit:


// sdk_wpa_neg_complete
// Return size: 0
void sdk_wpa_neg_complete()
sdk_wpa_neg_complete_entry:
	// succ:  l4022F060
l4022F060:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4022F068
	call fn4032EFAC (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wpa_neg_complete_exit
sdk_wpa_neg_complete_exit:


// sdk_wpa_attach
// Return size: 0
void sdk_wpa_attach()
sdk_wpa_attach_entry:
	// succ:  l4022F088
l4022F088:
	a1 = fp
	a3 = 0x4022F070
	a5 = 0x4022F078
	a6 = 0x4022F07C
	a7 = 0x4022F080
	a4 = a2 | a2
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a2 = 0
	a0 = 0x00000180
	a0 = a4 + a0
	Mem0[a4 + 0x00000180:word32] = a2
	Mem0[a4 + 0x00000184:word32] = a0
	a4 = 0x4022F074
	a0 = 0x4022F0B0
	call fn4032E034 (retsize: 0;)
	a2 = 0x4022F084
	a3 = 3
	a0 = 0x4022F0B8
	call fn40328C18 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wpa_attach_exit
sdk_wpa_attach_exit:


// sdk_wpa_sm_alloc_eapol
// Return size: 0
void sdk_wpa_sm_alloc_eapol()
sdk_wpa_sm_alloc_eapol_entry:
	// succ:  l4022F134
l4022F134:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x0000000C:word32] = a5
	Mem0[a1 + 0x00000010:word32] = a6
	Mem0[a1 + 0x00000014:word32] = a7
	Mem0[a1 + 0x00000018:word32] = a0
	Mem0[a1 + 0x00000008:word32] = a4
	Mem0[a1:word32] = a2
	Mem0[a1 + 0x00000004:word32] = a3
	a2 = 3
	a3 = 0x00000100
	a4 = 0
	a0 = 0x4022F152
	call fn4030C160 (retsize: 0;)
	a3 = Mem0[a1 + 0x00000004:word32]
	a4 = Mem0[a1 + 0x00000008:word32]
	a5 = Mem0[a1 + 0x0000000C:word32]
	a0 = a2
	a6 = Mem0[a1 + 0x00000010:word32]
	a2 = Mem0[a1 + 0x00000000:word32]
	a7 = Mem0[a1 + 0x00000014:word32]
	Mem0[a2 + 0x00000210:word32] = a0
	a0 = 0x4022F166
	call fn4032F0C0 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000018:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_wpa_sm_alloc_eapol_exit
sdk_wpa_sm_alloc_eapol_exit:


// sdk_wpa_sm_deauthenticate
// Return size: 0
void sdk_wpa_sm_deauthenticate()
sdk_wpa_sm_deauthenticate_entry:
	// succ:  l4022F170
l4022F170:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = Mem0[a2 + 0x00000168:word32]
	branch a0 <u 0x00000005 l4022F183
	// succ:  l4022F17B l4022F183
l4022F17B:
	a0 = Mem0[a2 + 0x00000220:word32]
	a2 = a3
	v6 = a0
	a0 = 0x4022F183
	call v6 (retsize: 0;)
	// succ:  l4022F183
l4022F183:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_wpa_sm_deauthenticate_exit
sdk_wpa_sm_deauthenticate_exit:


// sdk_wpa_sm_mlme_setprotection
// Return size: 0
void sdk_wpa_sm_mlme_setprotection()
sdk_wpa_sm_mlme_setprotection_entry:
	// succ:  l4022F18C
l4022F18C:
	a1 = fp
	a2 = 0
	return
	// succ:  sdk_wpa_sm_mlme_setprotection_exit
sdk_wpa_sm_mlme_setprotection_exit:


// sdk_wpa_sm_get_beacon_ie
// Return size: 0
void sdk_wpa_sm_get_beacon_ie()
sdk_wpa_sm_get_beacon_ie_entry:
	// succ:  l4022F190
l4022F190:
	a1 = fp
	a2 = 0
	return
	// succ:  sdk_wpa_sm_get_beacon_ie_exit
sdk_wpa_sm_get_beacon_ie_exit:


// sdk_wpa_sm_disassociate
// Return size: 0
void sdk_wpa_sm_disassociate()
sdk_wpa_sm_disassociate_entry:
	// succ:  l4022F194
l4022F194:
	a1 = fp
	return
	// succ:  sdk_wpa_sm_disassociate_exit
sdk_wpa_sm_disassociate_exit:


// sdk_aes_unwrap
// Return size: 0
void sdk_aes_unwrap()
sdk_aes_unwrap_entry:
	// succ:  l4022F198
l4022F198:
	a1 = fp
	a1 = a1 - 80
	Mem0[a1 + 0x00000030:word32] = a15
	Mem0[a1 + 0x00000020:word32] = a0
	Mem0[a1 + 0x00000024:word32] = a12
	Mem0[a1 + 0x0000002C:word32] = a14
	Mem0[a1 + 0x00000028:word32] = a13
	Mem0[a1 + 0x0000003C:word32] = a3
	a13 = a5
	a3 = a4
	a14 = a2
	a12 = a4
	a2 = a1
	a4 = 8
	a0 = 0x40203130
	v12 = a0
	a0 = 0x4022F1BC
	call v12 (retsize: 0;)
	a3 = a12 + 8
	a12 = Mem0[a1 + 0x0000003C:word32]
	a2 = a13
	a12 = a12 << 29
	a4 = a12
	a0 = 0x40203130
	v13 = a0
	a0 = 0x4022F1CD
	call v13 (retsize: 0;)
	a2 = a14
	a3 = 16
	a0 = 0x4022F1D4
	call sdk_aes_decrypt_init (retsize: 0;)
	a0 = a2
	branch a2 == 0x00000000 l4022F283
	// succ:  l4022F1D9 l4022F283
l4022F1D9:
	a14 = a1 + 24
	Mem0[a1 + 0x00000040:word32] = a0
	a15 = Mem0[a1 + 0x0000003C:word32]
	a2 = a12 + a13
	a3 = 5
	Mem0[a1 + 0x00000038:word32] = a3
	a2 = a2 - 8
	a15 = a15 + a15 * 0x00000004
	Mem0[a1 + 0x00000034:word32] = a2
	// succ:  l4022F1EF
l4022F1EF:
	a0 = Mem0[a1 + 0x0000003C:word32]
	a12 = Mem0[a1 + 0x00000034:word32]
	branch a0 < 1 l4022F249
	// succ:  l4022F1F6 l4022F249
l4022F1F6:
	a13 = a15 + a0
	// succ:  l4022F1F8
l4022F1F8:
	a2 = a1 + 16
	a3 = a1 | a1
	a4 = 0x00000008
	a0 = 0x40203130
	v14 = a0
	a0 = 0x4022F207
	call v14 (retsize: 0;)
	a2 = a14 | a14
	a3 = a12
	v15 = Mem0[a1 + 0x00000017:byte]
	a0 = (uint32) v15
	a4 = 8
	a0 = a13 ^ a0
	Mem0[a1 + 0x00000017:byte] = a0
	a0 = 0x40203130
	v16 = a0
	a0 = 0x4022F21D
	call v16 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000040:word32]
	a3 = a1 + 16
	a4 = a3
	a0 = 0x4022F228
	call sdk_aes_decrypt (retsize: 0;)
	a2 = a1
	a3 = a1 + 16
	a4 = 8
	a0 = 0x40203130
	v17 = a0
	a0 = 0x4022F235
	call v17 (retsize: 0;)
	a2 = a12
	a3 = a14
	a4 = 8
	a0 = 0x40203130
	v18 = a0
	a0 = 0x4022F241
	call v18 (retsize: 0;)
	a12 = a12 - 8
	a13 = a13 - 1
	branch a15 != a13 l4022F1F8
	// succ:  l4022F249 l4022F1F8
l4022F249:
	a3 = Mem0[a1 + 0x0000003C:word32]
	a2 = Mem0[a1 + 0x00000038:word32]
	a15 = a15 - a3
	a2 = a2 - 1
	Mem0[a1 + 0x00000038:word32] = a2
	branch a2 != -1 l4022F1EF
	// succ:  l4022F25A l4022F1EF
l4022F25A:
	a2 = Mem0[a1 + 0x00000040:word32]
	a0 = 0x4022F260
	call sdk_aes_decrypt_deinit (retsize: 0;)
	a0 = a1
	a2 = a1 + 8
	a3 = 0x000000A6
	// succ:  l4022F267
l4022F267:
	v19 = Mem0[a0 + 0x00000000:byte]
	a4 = (uint32) v19
	a0 = a0 + 1
	branch a4 != a3 l4022F283
	// succ:  l4022F26F l4022F283
l4022F26F:
	branch a0 != a2 l4022F267
	// succ:  l4022F272 l4022F267
l4022F272:
	a2 = 0
	a12 = Mem0[a1 + 0x00000024:word32]
	a13 = Mem0[a1 + 0x00000028:word32]
	a14 = Mem0[a1 + 0x0000002C:word32]
	a15 = Mem0[a1 + 0x00000030:word32]
	a0 = Mem0[a1 + 0x00000020:word32]
	a1 = a1 + 80
	return
	// succ:  sdk_aes_unwrap_exit
l4022F283:
	a2 = -1
	// succ:  l4026F274
l4026F274:
sdk_aes_unwrap_exit:


// sdk_aes_wrap
// Return size: 0
void sdk_aes_wrap()
sdk_aes_wrap_entry:
	// succ:  l4022F288
l4022F288:
	a1 = fp
	a1 = a1 - 64
	Mem0[a1 + 0x00000020:word32] = a15
	Mem0[a1 + 0x00000010:word32] = a0
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x00000018:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a14
	Mem0[a1 + 0x00000030:word32] = a3
	a14 = a5
	a3 = 0x000000A6
	a13 = a2
	a12 = a4
	a2 = a5
	a4 = 8
	a0 = 0x4020267C
	v12 = a0
	a0 = 0x4022F2AD
	call v12 (retsize: 0;)
	a3 = a12
	a4 = Mem0[a1 + 0x00000030:word32]
	a2 = a14 + 8
	Mem0[a1 + 0x00000028:word32] = a2
	a4 = a4 << 29
	a0 = 0x40203130
	v13 = a0
	a0 = 0x4022F2BE
	call v13 (retsize: 0;)
	a2 = a13
	a3 = 16
	a0 = 0x4022F2C5
	call sdk_aes_encrypt_init (retsize: 0;)
	branch a2 != 0x00000000 l4022F2CC
	// succ:  l4022F2C7 l4022F2CC
l4022F2C7:
	a2 = -1
	goto l4022F358
	// succ:  l4022F358
l4022F2CC:
	a15 = a1 + 8
	Mem0[a1 + 0x00000038:word32] = a2
	a6 = Mem0[a1 + 0x00000030:word32]
	a5 = 0
	a7 = 0
	Mem0[a1 + 0x00000034:word32] = a7
	Mem0[a1 + 0x0000002C:word32] = a5
	a6 = a6 + 1
	Mem0[a1 + 0x00000024:word32] = a6
	// succ:  l4022F2DE
l4022F2DE:
	a8 = Mem0[a1 + 0x00000030:word32]
	a12 = Mem0[a1 + 0x00000028:word32]
	branch a8 < 1 l4022F33D
	// succ:  l4022F2E7 l4022F33D
l4022F2E7:
	a9 = Mem0[a1 + 0x00000034:word32]
	a10 = Mem0[a1 + 0x00000024:word32]
	a13 = a9 + 1
	a9 = a9 + a10
	Mem0[a1 + 0x0000003C:word32] = a9
	// succ:  l4022F2F2
l4022F2F2:
	a2 = a1
	a3 = a14
	a4 = 8
	a0 = 0x40203130
	v19 = a0
	a0 = 0x4022F2FE
	call v19 (retsize: 0;)
	a2 = a15
	a3 = a12
	a4 = 8
	a0 = 0x40203130
	v20 = a0
	a0 = 0x4022F30A
	call v20 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000038:word32]
	a3 = a1
	a4 = a1
	a0 = 0x4022F313
	call sdk_aes_encrypt (retsize: 0;)
	a2 = a14
	a3 = a1
	a4 = 8
	a0 = 0x40203130
	v21 = a0
	a0 = 0x4022F31F
	call v21 (retsize: 0;)
	a2 = a12
	a3 = a15
	v23 = Mem0[a14 + 0x00000007:byte]
	a11 = (uint32) v23
	a4 = 8
	a11 = a13 ^ a11
	Mem0[a14 + 0x00000007:byte] = a11
	a0 = 0x40203130
	v24 = a0
	a0 = 0x4022F334
	call v24 (retsize: 0;)
	a12 = a12 + 8
	a0 = Mem0[a1 + 0x0000003C:word32]
	a13 = a13 + 1
	branch a13 != a0 l4022F2F2
	// succ:  l4022F33D l4022F2F2
l4022F33D:
	a4 = Mem0[a1 + 0x00000030:word32]
	a2 = Mem0[a1 + 0x0000002C:word32]
	a3 = Mem0[a1 + 0x00000034:word32]
	a2 = a2 + 1
	Mem0[a1 + 0x0000002C:word32] = a2
	a3 = a3 + a4
	Mem0[a1 + 0x00000034:word32] = a3
	branch a2 != 6 l4022F2DE
	// succ:  l4022F351 l4022F2DE
l4022F351:
	a2 = Mem0[a1 + 0x00000038:word32]
	a0 = 0x4022F356
	call sdk_aes_encrypt_deinit (retsize: 0;)
	a2 = 0
	// succ:  l4022F358
l4022F358:
	a12 = Mem0[a1 + 0x00000014:word32]
	a13 = Mem0[a1 + 0x00000018:word32]
	a14 = Mem0[a1 + 0x0000001C:word32]
	a15 = Mem0[a1 + 0x00000020:word32]
	a0 = Mem0[a1 + 0x00000010:word32]
	a1 = a1 + 64
	return
	// succ:  sdk_aes_wrap_exit
sdk_aes_wrap_exit:


// sdk_hmac_md5_vector
// Return size: 0
void sdk_hmac_md5_vector()
sdk_hmac_md5_vector_entry:
	// succ:  l4022F368
l4022F368:
	a1 = fp
	a8 = 0x000000D0
	a1 = a1 - a8
	Mem0[a1 + 0x000000B4:word32] = a3
	Mem0[a1 + 0x000000B0:word32] = a2
	Mem0[a1 + 0x00000094:word32] = a0
	Mem0[a1 + 0x0000009C:word32] = a13
	Mem0[a1 + 0x00000098:word32] = a12
	Mem0[a1 + 0x000000A0:word32] = a14
	a12 = a5 | a5
	a14 = a4 | a4
	a13 = a6 | a6
	a0 = 0x000000B4
	a0 = a1 + a0
	a6 = 0x000000B0
	a6 = a1 + a6
	branch a4 <u 0x00000006 l4022F399
	// succ:  l4022F396 l4022F399
l4022F396:
	goto l4022F42A
	// succ:  l4022F42A
l4022F399:
	Mem0[a1 + 0x00000090:word32] = a7
	a2 = 64
	branch a2 >=u a3 l4022F3B7
	// succ:  l4022F3A1 l4022F3B7
l4022F3A1:
	a3 = a6
	a2 = 1
	a5 = a1
	a4 = a0
	a0 = 0x4022F3AC
	call sdk_md5_vector (retsize: 0;)
	branch a2 != 0x00000000 l4022F42A
	// succ:  l4022F3AF l4022F42A
l4022F3AF:
	Mem0[a1 + 0x000000B0:word32] = a1
	a6 = 16
	Mem0[a1 + 0x000000B4:word32] = a6
	// succ:  l4022F3B7
l4022F3B7:
	a2 = a1 + 16
	a3 = 0
	a4 = 64
	a0 = 0x4020267C
	v14 = a0
	a0 = 0x4022F3C4
	call v14 (retsize: 0;)
	a3 = Mem0[a1 + 0x000000B0:word32]
	a4 = Mem0[a1 + 0x000000B4:word32]
	a2 = a1 + 16
	Mem0[a1 + 0x000000A4:word32] = a14
	a0 = 0x40203130
	v15 = a0
	a0 = 0x4022F3D6
	call v15 (retsize: 0;)
	a4 = Mem0[a1 + 0x000000A4:word32]
	a0 = a1 + 16
	a14 = a1 + 80
	a2 = 54
	a6 = 64
	Mem0[a1 + 0x00000070:word32] = a6
	a6 = a1 + 16
	Mem0[a1 + 0x00000050:word32] = a6
	// succ:  l4022F3EC
l4022F3EC:
	v16 = Mem0[a0 + 0x00000000:byte]
	a5 = (uint32) v16
	a5 = a5 ^ a2
	Mem0[a0:byte] = a5
	a0 = a0 + 1
	branch a0 != a14 l4022F3EC
	// succ:  l4022F3FA l4022F3EC
l4022F3FA:
	branch a4 == 0x00000000 l4022F418
	// succ:  l4022F3FC l4022F418
l4022F3FC:
	a0 = a1 + 112
	a2 = a1 + 80
	a3 = a12 + a4 * 0x00000004
	// succ:  l4022F405
l4022F405:
	a7 = Mem0[a13 + 0x00000000:word32]
	a8 = Mem0[a12 + 0x00000000:word32]
	a13 = a13 + 4
	a12 = a12 + 4
	Mem0[a2 + 0x00000004:word32] = a8
	Mem0[a0 + 0x00000004:word32] = a7
	a2 = a2 + 4
	a0 = a0 + 4
	branch a12 != a3 l4022F405
	// succ:  l4022F418 l4022F405
l4022F418:
	a3 = a1 + 80
	a2 = a4 + 1
	a5 = Mem0[a1 + 0x00000090:word32]
	a4 = a1 + 112
	a0 = 0x4022F427
	call sdk_md5_vector (retsize: 0;)
	branch a2 == 0x00000000 l4022F430
	// succ:  l4022F42A l4022F430
l4022F42A:
	a2 = 0xFFFFFFFF
	a2 = 0xFFFFFFFF
	goto l4022F483
	// succ:  l4022F483
l4022F430:
	a2 = a1 + 16
	a3 = 0
	a4 = 64
	a0 = 0x4020267C
	v17 = a0
	a0 = 0x4022F43D
	call v17 (retsize: 0;)
	a3 = Mem0[a1 + 0x000000B0:word32]
	a4 = Mem0[a1 + 0x000000B4:word32]
	a2 = a1 + 16
	a0 = 0x40203130
	v18 = a0
	a0 = 0x4022F44C
	call v18 (retsize: 0;)
	a0 = a1 + 16
	a2 = 92
	// succ:  l4022F451
l4022F451:
	v19 = Mem0[a0 + 0x00000000:byte]
	a5 = (uint32) v19
	a5 = a5 ^ a2
	Mem0[a0:byte] = a5
	a0 = a0 + 1
	branch a0 != a14 l4022F451
	// succ:  l4022F460 l4022F451
l4022F460:
	a2 = 0x00000002
	a3 = a1 + 80
	a4 = a1 + 112
	a6 = 0x00000010
	a5 = Mem0[a1 + 0x00000090:word32]
	a7 = 64
	a8 = a1 + 16
	Mem0[a1 + 0x00000050:word32] = a8
	Mem0[a1 + 0x00000070:word32] = a7
	Mem0[a1 + 0x00000054:word32] = a5
	Mem0[a1 + 0x00000074:word32] = a6
	a0 = 0x4022F483
	call sdk_md5_vector (retsize: 0;)
	// succ:  l4022F483
l4022F483:
	a12 = Mem0[a1 + 0x00000098:word32]
	a13 = Mem0[a1 + 0x0000009C:word32]
	a14 = Mem0[a1 + 0x000000A0:word32]
	a3 = 0x000000D0
	a0 = Mem0[a1 + 0x00000094:word32]
	a1 = a1 + a3
	return
	// succ:  sdk_hmac_md5_vector_exit
sdk_hmac_md5_vector_exit:


// sdk_hmac_md5
// Return size: 0
void sdk_hmac_md5()
sdk_hmac_md5_entry:
	// succ:  l4022F498
l4022F498:
	a1 = fp
	a7 = a6
	a9 = a5
	a1 = a1 - 48
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a4
	a5 = a1 + 24
	a6 = a1 + 28
	Mem0[a1 + 0x0000001C:word32] = a9
	a4 = 1
	a0 = 0x4022F4B0
	call fn4032F368 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_hmac_md5_exit
sdk_hmac_md5_exit:


// sdk_md5_vector
// Return size: 0
void sdk_md5_vector()
sdk_md5_vector_entry:
	// succ:  l4022F4B8
l4022F4B8:
	a1 = fp
	a1 = a1 - 112
	Mem0[a1 + 0x00000058:word32] = a3
	Mem0[a1 + 0x0000005C:word32] = a0
	Mem0[a1 + 0x00000064:word32] = a13
	Mem0[a1 + 0x00000060:word32] = a12
	Mem0[a1 + 0x00000068:word32] = a14
	a12 = a4
	a14 = a2
	a13 = a5
	a2 = a1
	a0 = 0x4022F4D5
	call sdk_MD5Init (retsize: 0;)
	Mem0[a1 + 0x0000006C:word32] = a13
	branch a14 == 0x00000000 l4022F4F0
	// succ:  l4022F4DA l4022F4F0
l4022F4DA:
	a13 = Mem0[a1 + 0x00000058:word32]
	a14 = a13 + a14 * 0x00000004
	// succ:  l4022F4E0
l4022F4E0:
	a2 = a1
	a3 = Mem0[a13 + 0x00000000:word32]
	a4 = Mem0[a12 + 0x00000000:word32]
	a0 = 0x4022F4E9
	call sdk_MD5Update (retsize: 0;)
	a12 = a12 + 4
	a13 = a13 + 4
	branch a13 != a14 l4022F4E0
	// succ:  l4022F4F0 l4022F4E0
l4022F4F0:
	a2 = Mem0[a1 + 0x0000006C:word32]
	a3 = a1
	a0 = 0x4022F4F8
	call sdk_MD5Final (retsize: 0;)
	a2 = 0
	a12 = Mem0[a1 + 0x00000060:word32]
	a13 = Mem0[a1 + 0x00000064:word32]
	a14 = Mem0[a1 + 0x00000068:word32]
	a0 = Mem0[a1 + 0x0000005C:word32]
	a1 = a1 + 112
	return
	// succ:  sdk_md5_vector_exit
sdk_md5_vector_exit:


// sdk_MD5Init
// Return size: 0
void sdk_MD5Init()
sdk_MD5Init_entry:
	// succ:  l4022F51C
l4022F51C:
	a1 = fp
	a3 = 0x4022F518
	a4 = 0x4022F514
	a5 = 0x4022F510
	a6 = 0x4022F50C
	a7 = 0
	Mem0[a2 + 0x00000010:word32] = a7
	Mem0[a2 + 0x00000014:word32] = a7
	Mem0[a2:word32] = a6
	Mem0[a2 + 0x00000004:word32] = a5
	Mem0[a2 + 0x00000008:word32] = a4
	Mem0[a2 + 0x0000000C:word32] = a3
	return
	// succ:  sdk_MD5Init_exit
sdk_MD5Init_exit:


// sdk_MD5Update
// Return size: 0
void sdk_MD5Update()
sdk_MD5Update_entry:
	// succ:  l4022F538
l4022F538:
	a1 = fp
	a1 = a1 - 48
	Mem0[a1 + 0x00000018:word32] = a14
	Mem0[a1 + 0x0000000C:word32] = a0
	Mem0[a1 + 0x00000020:word32] = a2
	Mem0[a1 + 0x00000010:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a13
	Mem0[a1 + 0x0000001C:word32] = a15
	a13 = a4
	a15 = a2
	a12 = a3
	a2 = Mem0[a2 + 0x00000010:word32]
	a0 = Mem0[a15 + 0x00000014:word32]
	a7 = a2 >>u 0x00000003 & 0x0000003F
	a3 = a2 + a4 * 0x00000008
	Mem0[a15 + 0x00000010:word32] = a3
	a4 = a13 >>u 0x0000001D & 0x00000007
	branch a3 >=u a2 l4022F563
	// succ:  l4022F55F l4022F563
l4022F55F:
	a0 = a0 + 1
	Mem0[a15 + 0x00000014:word32] = a0
	// succ:  l4022F563
l4022F563:
	a4 = a0 + a4
	Mem0[a15 + 0x00000014:word32] = a4
	branch a7 == 0x00000000 l4022F5AA
	// succ:  l4022F569 l4022F5AA
l4022F569:
	a4 = 64
	a2 = a7 + a15
	a2 = a2 + 24
	a4 = a4 - a7
	branch a13 >=u a4 l4022F583
	// succ:  l4022F576 l4022F583
l4022F576:
	a4 = a13
	a3 = a12
	a0 = 0x40203130
	v12 = a0
	a0 = 0x4022F580
	call v12 (retsize: 0;)
	goto l4022F5E9
	// succ:  l4022F5E9
l4022F583:
	a3 = a12 | a12
	Mem0[a1 + 0x00000008:word32] = a7
	a0 = 0x40203130
	v14 = a0
	a0 = 0x4022F58F
	call v14 (retsize: 0;)
	a2 = a15 | a15
	a14 = a15 + 24
	a3 = a14
	a0 = 0x4022F59A
	call fn4022F788 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000008:word32]
	a13 = a0 + a13
	a12 = a12 - a0
	a12 = a12 + 64
	a13 = a13 - 64
	goto l4022F5AD
	// succ:  l4022F5AD
l4022F5AA:
	a14 = a15 + 24
	// succ:  l4022F5AD
l4022F5AD:
	branch a13 <u 0x00000040 l4022F5DD
	// succ:  l4022F5B0 l4022F5DD
l4022F5B0:
	Mem0[a1:word32] = a13
	a2 = a13 >>u 6
	Mem0[a1 + 0x00000004:word32] = a2
	// succ:  l4022F5B7
l4022F5B7:
	a2 = a14
	a3 = a12
	a4 = 64
	a0 = 0x40203130
	v13 = a0
	a0 = 0x4022F5C3
	call v13 (retsize: 0;)
	a2 = a15
	a3 = a14
	a0 = 0x4022F5CA
	call fn4022F788 (retsize: 0;)
	a12 = a12 + 64
	a13 = a13 - 64
	branch a13 >=u 0x00000040 l4022F5B7
	// succ:  l4022F5D3 l4022F5B7
l4022F5D3:
	a15 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000000:word32]
	a15 = a15 << 26
	a13 = a13 - a15
	// succ:  l4022F5DD
l4022F5DD:
	a4 = a13
	a3 = a12
	a2 = a14
	a0 = 0x40203130
	v15 = a0
	a0 = 0x4022F5E9
	call v15 (retsize: 0;)
	// succ:  l4022F5E9
l4022F5E9:
	a12 = Mem0[a1 + 0x00000010:word32]
	a13 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000018:word32]
	a15 = Mem0[a1 + 0x0000001C:word32]
	a0 = Mem0[a1 + 0x0000000C:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_MD5Update_exit
sdk_MD5Update_exit:


// sdk_MD5Final
// Return size: 0
void sdk_MD5Final()
sdk_MD5Final_entry:
	// succ:  l4022F5F8
l4022F5F8:
	a1 = fp
	a4 = 0x0000003F
	a1 = a1 - 16
	Mem0[a1:word32] = a2
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a13
	Mem0[a1 + 0x00000008:word32] = a12
	a13 = a3 + 24
	a12 = a3
	a0 = Mem0[a12 + 0x00000010:word32]
	a3 = 0xFFFFFF80
	a0 = a0 >>u 0x00000003 & 0x0000003F
	a2 = a12 + a0
	a4 = a4 - a0
	Mem0[a2 + 0x00000018:byte] = a3
	a2 = a2 + 25
	branch a4 >=u 0x00000008 l4022F641
	// succ:  l4022F623 l4022F641
l4022F623:
	a3 = 0
	a0 = 0x4020267C
	v9 = a0
	a0 = 0x4022F62B
	call v9 (retsize: 0;)
	a2 = a12
	a3 = a13
	a0 = 0x4022F632
	call fn4022F788 (retsize: 0;)
	a2 = a13
	a3 = 0
	a4 = 56
	a0 = 0x4020267C
	v10 = a0
	a0 = 0x4022F63E
	call v10 (retsize: 0;)
	goto l4022F64E
	// succ:  l4022F64E
l4022F641:
	a3 = 0
	a4 = 55
	a4 = a4 - a0
	a0 = 0x4020267C
	v11 = a0
	a0 = 0x4022F64E
	call v11 (retsize: 0;)
	// succ:  l4022F64E
l4022F64E:
	a3 = a13
	a2 = a12
	a5 = Mem0[a12 + 0x00000014:word32]
	a6 = Mem0[a12 + 0x00000010:word32]
	Mem0[a12 + 0x00000050:word32] = a6
	Mem0[a12 + 0x00000054:word32] = a5
	a0 = 0x4022F65F
	call fn4022F788 (retsize: 0;)
	a2 = Mem0[a1 + 0x00000000:word32]
	a3 = a12
	a4 = 16
	a0 = 0x40203130
	v14 = a0
	a0 = 0x4022F66B
	call v14 (retsize: 0;)
	a3 = 0
	a2 = 0
	a0 = 1
	a13 = Mem0[a1 + 0x0000000C:word32]
	// succ:  l4022F673
l4022F673:
	a0 = a0 - 1
	a7 = a2 + a12
	Mem0[a7:word32] = a3
	a2 = a2 + 4
	branch a0 >= 1 l4022F673
	// succ:  l4022F67E l4022F673
l4022F67E:
	a12 = Mem0[a1 + 0x00000008:word32]
	a0 = Mem0[a1 + 0x00000004:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_MD5Final_exit
sdk_MD5Final_exit:


// fn4022F788
// Return size: 0
void fn4022F788()
fn4022F788_entry:
	// succ:  l4022F788
l4022F788:
	a1 = fp
	a1 = a1 - 32
	SAR = 0x09
	a6 = Mem0[a3 + 0x0000001C:word32]
	a4 = Mem0[a3 + 0x00000014:word32]
	a10 = Mem0[a3 + 0x00000008:word32]
	a7 = Mem0[a3 + 0x00000000:word32]
	a9 = Mem0[a2 + 0x00000004:word32]
	Mem0[a1:word32] = a0
	a8 = Mem0[a2 + 0x00000008:word32]
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000010:word32] = a15
	a13 = Mem0[a3 + 0x00000004:word32]
	a15 = 0x4022F688
	a12 = Mem0[a2 + 0x0000000C:word32]
	a14 = Mem0[a2 + 0x00000000:word32]
	a0 = a12 ^ a8
	a0 = a9 & a0
	a0 = a12 ^ a0
	a0 = a7 + a0
	a14 = a14 + a0
	a14 = a14 + a15
	a14 = (word32) (a14_a14 >>u SAR)
	a15 = a8 ^ a9
	SAR = 0x04
	a14 = a9 + a14
	a15 = a14 & a15
	a11 = a9 ^ a14
	a15 = a8 ^ a15
	a13 = a13 + a15
	a12 = a12 + a13
	a13 = 0x4022F68C
	a15 = Mem0[a3 + 0x00000010:word32]
	a12 = a12 + a13
	a12 = (word32) (a12_a12 >>u SAR)
	a12 = a14 + a12
	SAR = 0x0F
	a11 = a12 & a11
	a11 = a9 ^ a11
	a11 = a10 + a11
	a8 = a8 + a11
	a11 = 0x4022F690
	a13 = a14 ^ a12
	a8 = a8 + a11
	a11 = Mem0[a3 + 0x0000000C:word32]
	a8 = (word32) (a8_a8 >>u SAR)
	a8 = a12 + a8
	SAR = 0x0A
	a13 = a8 & a13
	a13 = a14 ^ a13
	a11 = a11 + a13
	a9 = a9 + a11
	a11 = 0x4022F694
	a0 = a8 ^ a12
	a9 = a9 + a11
	a11 = Mem0[a3 + 0x00000018:word32]
	a9 = (word32) (a9_a9 >>u SAR)
	a9 = a8 + a9
	SAR = 0x09
	a0 = a9 & a0
	a0 = a12 ^ a0
	a15 = a15 + a0
	a14 = a14 + a15
	a15 = 0x4022F698
	a13 = a9 ^ a8
	a14 = a14 + a15
	a14 = (word32) (a14_a14 >>u SAR)
	a15 = Mem0[a3 + 0x00000020:word32]
	a14 = a9 + a14
	a13 = a14 & a13
	a13 = a8 ^ a13
	a13 = a4 + a13
	a12 = a12 + a13
	a13 = 0x4022F69C
	SAR = 0x04
	a12 = a12 + a13
	a12 = (word32) (a12_a12 >>u SAR)
	a13 = a14 ^ a9
	a12 = a14 + a12
	a13 = a12 & a13
	a13 = a9 ^ a13
	a11 = a11 + a13
	a8 = a8 + a11
	a11 = 0x4022F6A0
	SAR = 0x0F
	a8 = a8 + a11
	a11 = a14 ^ a12
	a8 = (word32) (a8_a8 >>u SAR)
	a8 = a12 + a8
	SAR = 0x0A
	a11 = a8 & a11
	a11 = a14 ^ a11
	a11 = a6 + a11
	a9 = a9 + a11
	a11 = 0x4022F6A4
	a0 = a8 ^ a12
	a9 = a9 + a11
	a9 = (word32) (a9_a9 >>u SAR)
	a11 = Mem0[a3 + 0x00000024:word32]
	SAR = 0x09
	a9 = a8 + a9
	a0 = a9 & a0
	a13 = a9 ^ a8
	a0 = a12 ^ a0
	a15 = a15 + a0
	a14 = a14 + a15
	a15 = 0x4022F6A8
	a0 = Mem0[a3 + 0x00000030:word32]
	a14 = a14 + a15
	a14 = (word32) (a14_a14 >>u SAR)
	a14 = a9 + a14
	SAR = 0x04
	a13 = a14 & a13
	a13 = a8 ^ a13
	a13 = a11 + a13
	a12 = a12 + a13
	a13 = 0x4022F6AC
	a15 = a14 ^ a9
	a12 = a12 + a13
	a13 = Mem0[a3 + 0x00000028:word32]
	a12 = (word32) (a12_a12 >>u SAR)
	a12 = a14 + a12
	SAR = 0x0F
	a15 = a12 & a15
	a15 = a9 ^ a15
	a13 = a13 + a15
	a8 = a8 + a13
	a13 = 0x4022F6B0
	a15 = Mem0[a3 + 0x0000002C:word32]
	a8 = a8 + a13
	a13 = a14 ^ a12
	a8 = (word32) (a8_a8 >>u SAR)
	a8 = a12 + a8
	SAR = 0x0A
	a13 = a8 & a13
	a13 = a14 ^ a13
	a13 = a15 + a13
	a9 = a9 + a13
	a13 = 0x4022F6B4
	a5 = a8 ^ a12
	a9 = a9 + a13
	a13 = Mem0[a3 + 0x00000034:word32]
	a9 = (word32) (a9_a9 >>u SAR)
	a9 = a8 + a9
	SAR = 0x09
	a5 = a9 & a5
	a5 = a12 ^ a5
	a0 = a0 + a5
	a14 = a14 + a0
	a0 = 0x4022F6B8
	a5 = Mem0[a3 + 0x00000038:word32]
	a14 = a14 + a0
	a14 = (word32) (a14_a14 >>u SAR)
	a0 = a9 ^ a8
	a14 = a9 + a14
	a0 = a14 & a0
	a0 = a8 ^ a0
	a13 = a13 + a0
	a12 = a12 + a13
	a13 = 0x4022F6BC
	SAR = 0x04
	a12 = a12 + a13
	a13 = a14 ^ a9
	a12 = (word32) (a12_a12 >>u SAR)
	a12 = a14 + a12
	SAR = 0x0F
	a13 = a12 & a13
	a13 = a9 ^ a13
	a13 = a5 + a13
	a8 = a8 + a13
	a13 = 0x4022F6C0
	a0 = a14 ^ a12
	a8 = a8 + a13
	a13 = Mem0[a3 + 0x0000003C:word32]
	a8 = (word32) (a8_a8 >>u SAR)
	a8 = a12 + a8
	SAR = 0x0A
	a0 = a8 & a0
	a0 = a14 ^ a0
	a13 = a13 + a0
	a9 = a9 + a13
	a13 = 0x4022F6C4
	a0 = Mem0[a3 + 0x00000004:word32]
	a9 = a9 + a13
	a9 = (word32) (a9_a9 >>u SAR)
	a9 = a8 + a9
	SAR = 0x0B
	a13 = a9 ^ a8
	a13 = a12 & a13
	a13 = a8 ^ a13
	a0 = a0 + a13
	a14 = a14 + a0
	a0 = 0x4022F6C8
	a13 = Mem0[a3 + 0x00000018:word32]
	a14 = a14 + a0
	a14 = (word32) (a14_a14 >>u SAR)
	a14 = a9 + a14
	a0 = a14 ^ a9
	a0 = a8 & a0
	a0 = a9 ^ a0
	a13 = a13 + a0
	a12 = a12 + a13
	a13 = 0x4022F6CC
	SAR = 0x07
	a12 = a12 + a13
	a12 = (word32) (a12_a12 >>u SAR)
	a12 = a14 + a12
	a13 = a14 ^ a12
	a13 = a9 & a13
	a13 = a14 ^ a13
	a13 = a15 + a13
	a8 = a8 + a13
	a13 = 0x4022F6D0
	SAR = 0x02
	a8 = a8 + a13
	a8 = (word32) (a8_a8 >>u SAR)
	a8 = a12 + a8
	a13 = a8 ^ a12
	a13 = a14 & a13
	a13 = a12 ^ a13
	a13 = a7 + a13
	a9 = a9 + a13
	a13 = 0x4022F6D4
	SAR = 0x0C
	a9 = a9 + a13
	a9 = (word32) (a9_a9 >>u SAR)
	a13 = Mem0[a3 + 0x00000028:word32]
	a9 = a8 + a9
	a0 = a9 ^ a8
	a0 = a12 & a0
	a0 = a8 ^ a0
	a0 = a4 + a0
	a14 = a14 + a0
	a0 = 0x4022F6D8
	SAR = 0x0B
	a14 = a14 + a0
	a14 = (word32) (a14_a14 >>u SAR)
	a14 = a9 + a14
	a0 = a14 ^ a9
	a0 = a8 & a0
	a0 = a9 ^ a0
	a13 = a13 + a0
	a12 = a12 + a13
	a13 = 0x4022F6DC
	SAR = 0x07
	a12 = a12 + a13
	a12 = (word32) (a12_a12 >>u SAR)
	a13 = Mem0[a3 + 0x0000003C:word32]
	a12 = a14 + a12
	a0 = a14 ^ a12
	a0 = a9 & a0
	a0 = a14 ^ a0
	a13 = a13 + a0
	a8 = a8 + a13
	a13 = 0x4022F6E0
	SAR = 0x02
	a8 = a8 + a13
	a8 = (word32) (a8_a8 >>u SAR)
	a13 = Mem0[a3 + 0x00000010:word32]
	a8 = a12 + a8
	a0 = a8 ^ a12
	a0 = a14 & a0
	a0 = a12 ^ a0
	a13 = a13 + a0
	a9 = a9 + a13
	a13 = 0x4022F6E4
	SAR = 0x0C
	a9 = a9 + a13
	a9 = (word32) (a9_a9 >>u SAR)
	a9 = a8 + a9
	a0 = a9 ^ a8
	a0 = a12 & a0
	a0 = a8 ^ a0
	a0 = a11 + a0
	a14 = a14 + a0
	a0 = 0x4022F6E8
	SAR = 0x0B
	a14 = a14 + a0
	a14 = (word32) (a14_a14 >>u SAR)
	a14 = a9 + a14
	a13 = a14 ^ a9
	a13 = a8 & a13
	a13 = a9 ^ a13
	a13 = a5 + a13
	a12 = a12 + a13
	a13 = 0x4022F6EC
	SAR = 0x07
	a12 = a12 + a13
	a12 = (word32) (a12_a12 >>u SAR)
	a13 = Mem0[a3 + 0x0000000C:word32]
	a12 = a14 + a12
	a0 = a14 ^ a12
	a0 = a9 & a0
	a0 = a14 ^ a0
	a13 = a13 + a0
	a8 = a8 + a13
	a13 = 0x4022F6F0
	SAR = 0x02
	a8 = a8 + a13
	a13 = Mem0[a3 + 0x00000020:word32]
	a8 = (word32) (a8_a8 >>u SAR)
	a8 = a12 + a8
	SAR = 0x0C
	a0 = a8 ^ a12
	a0 = a14 & a0
	a0 = a12 ^ a0
	a13 = a13 + a0
	a9 = a9 + a13
	a13 = 0x4022F6F4
	a0 = Mem0[a3 + 0x00000034:word32]
	a9 = a9 + a13
	a9 = (word32) (a9_a9 >>u SAR)
	a9 = a8 + a9
	a13 = a9 ^ a8
	a13 = a12 & a13
	a13 = a8 ^ a13
	a0 = a0 + a13
	a14 = a14 + a0
	a0 = 0x4022F6F8
	SAR = 0x0B
	a14 = a14 + a0
	a14 = (word32) (a14_a14 >>u SAR)
	a14 = a9 + a14
	a13 = a14 ^ a9
	a13 = a8 & a13
	a13 = a9 ^ a13
	a13 = a10 + a13
	a12 = a12 + a13
	a13 = 0x4022F6FC
	SAR = 0x07
	a12 = a12 + a13
	a12 = (word32) (a12_a12 >>u SAR)
	a12 = a14 + a12
	a13 = a14 ^ a12
	a13 = a9 & a13
	a13 = a14 ^ a13
	a13 = a6 + a13
	a8 = a8 + a13
	a13 = 0x4022F700
	SAR = 0x02
	a8 = a8 + a13
	a8 = (word32) (a8_a8 >>u SAR)
	a13 = Mem0[a3 + 0x00000030:word32]
	a8 = a12 + a8
	a0 = a8 ^ a12
	a0 = a14 & a0
	a0 = a12 ^ a0
	a13 = a13 + a0
	a9 = a9 + a13
	a13 = 0x4022F704
	SAR = 0x0C
	a9 = a9 + a13
	a9 = (word32) (a9_a9 >>u SAR)
	a13 = Mem0[a3 + 0x00000020:word32]
	a9 = a8 + a9
	a0 = a9 ^ a8
	a0 = a12 ^ a0
	a0 = a4 + a0
	a14 = a14 + a0
	a0 = 0x4022F708
	SAR = 0x0C
	a14 = a14 + a0
	a14 = (word32) (a14_a14 >>u SAR)
	a14 = a9 + a14
	SAR = 0x05
	a0 = a14 ^ a9
	a0 = a8 ^ a0
	a13 = a13 + a0
	a12 = a12 + a13
	a13 = 0x4022F70C
	a0 = Mem0[a3 + 0x00000004:word32]
	a12 = a12 + a13
	a12 = (word32) (a12_a12 >>u SAR)
	a12 = a14 + a12
	a13 = a14 ^ a12
	a13 = a9 ^ a13
	a13 = a15 + a13
	a8 = a8 + a13
	a13 = 0x4022F710
	SAR = 0x00
	a8 = a8 + a13
	a8 = (word32) (a8_a8 >>u SAR)
	a8 = a12 + a8
	a13 = a8 ^ a12
	a13 = a14 ^ a13
	a13 = a5 + a13
	a9 = a9 + a13
	a13 = 0x4022F714
	SAR = 0x09
	a9 = a9 + a13
	a9 = (word32) (a9_a9 >>u SAR)
	a9 = a8 + a9
	SAR = 0x0C
	a13 = a9 ^ a8
	a13 = a12 ^ a13
	a0 = a0 + a13
	a14 = a14 + a0
	a0 = 0x4022F718
	a13 = Mem0[a3 + 0x00000010:word32]
	a14 = a14 + a0
	a14 = (word32) (a14_a14 >>u SAR)
	a14 = a9 + a14
	a0 = a14 ^ a9
	a0 = a8 ^ a0
	a13 = a13 + a0
	a12 = a12 + a13
	a13 = 0x4022F71C
	SAR = 0x05
	a12 = a12 + a13
	a12 = (word32) (a12_a12 >>u SAR)
	a12 = a14 + a12
	a13 = a14 ^ a12
	a13 = a9 ^ a13
	a13 = a6 + a13
	a8 = a8 + a13
	a13 = 0x4022F720
	SAR = 0x00
	a8 = a8 + a13
	a13 = Mem0[a3 + 0x00000028:word32]
	a8 = (word32) (a8_a8 >>u SAR)
	a8 = a12 + a8
	SAR = 0x09
	a0 = a8 ^ a12
	a0 = a14 ^ a0
	a13 = a13 + a0
	a9 = a9 + a13
	a13 = 0x4022F724
	a0 = Mem0[a3 + 0x00000034:word32]
	a9 = a9 + a13
	a9 = (word32) (a9_a9 >>u SAR)
	a9 = a8 + a9
	a13 = a9 ^ a8
	a13 = a12 ^ a13
	a0 = a0 + a13
	a14 = a14 + a0
	a0 = 0x4022F728
	SAR = 0x0C
	a14 = a14 + a0
	a14 = (word32) (a14_a14 >>u SAR)
	a14 = a9 + a14
	a13 = a14 ^ a9
	a13 = a8 ^ a13
	a13 = a7 + a13
	a12 = a12 + a13
	a13 = 0x4022F72C
	SAR = 0x05
	a12 = a12 + a13
	a12 = (word32) (a12_a12 >>u SAR)
	a13 = Mem0[a3 + 0x0000000C:word32]
	a12 = a14 + a12
	a0 = a14 ^ a12
	a0 = a9 ^ a0
	a13 = a13 + a0
	a8 = a8 + a13
	a13 = 0x4022F730
	SAR = 0x00
	a8 = a8 + a13
	a8 = (word32) (a8_a8 >>u SAR)
	a13 = Mem0[a3 + 0x00000018:word32]
	a8 = a12 + a8
	a0 = a8 ^ a12
	a0 = a14 ^ a0
	a13 = a13 + a0
	a9 = a9 + a13
	a13 = 0x4022F734
	SAR = 0x09
	a9 = a9 + a13
	a9 = (word32) (a9_a9 >>u SAR)
	a13 = Mem0[a3 + 0x00000030:word32]
	a9 = a8 + a9
	a0 = a9 ^ a8
	a0 = a12 ^ a0
	a0 = a11 + a0
	a14 = a14 + a0
	a0 = 0x4022F738
	SAR = 0x0C
	a14 = a14 + a0
	a14 = (word32) (a14_a14 >>u SAR)
	a14 = a9 + a14
	SAR = 0x05
	a0 = a14 ^ a9
	a0 = a8 ^ a0
	a13 = a13 + a0
	a12 = a12 + a13
	a13 = 0x4022F73C
	a0 = Mem0[a3 + 0x0000003C:word32]
	a12 = a12 + a13
	a12 = (word32) (a12_a12 >>u SAR)
	a12 = a14 + a12
	a13 = a14 ^ a12
	a13 = a9 ^ a13
	a13 = a0 + a13
	a8 = a8 + a13
	a13 = 0x4022F740
	SAR = 0x00
	a8 = a8 + a13
	a8 = (word32) (a8_a8 >>u SAR)
	a8 = a12 + a8
	a13 = a8 ^ a12
	a13 = a14 ^ a13
	a13 = a10 + a13
	a9 = a9 + a13
	a13 = 0x4022F744
	SAR = 0x09
	a9 = a9 + a13
	a9 = (word32) (a9_a9 >>u SAR)
	a13 = -1
	a13 = a12 ^ a13
	a9 = a8 + a9
	SAR = 0x0A
	a13 = a9 | a13
	a13 = a8 ^ a13
	a7 = a7 + a13
	a14 = a14 + a7
	a7 = 0x4022F748
	a13 = -1
	a14 = a14 + a7
	a7 = a8 ^ a13
	a14 = (word32) (a14_a14 >>u SAR)
	a14 = a9 + a14
	SAR = 0x06
	a7 = a14 | a7
	a7 = a9 ^ a7
	a6 = a6 + a7
	a12 = a12 + a6
	a6 = 0x4022F74C
	a7 = Mem0[a2 + 0x00000004:word32]
	a12 = a12 + a6
	a12 = (word32) (a12_a12 >>u SAR)
	a6 = a9 ^ a13
	a12 = a14 + a12
	a6 = a12 | a6
	a6 = a14 ^ a6
	a5 = a5 + a6
	a8 = a8 + a5
	a5 = 0x4022F750
	SAR = 0x01
	a8 = a8 + a5
	a5 = a14 ^ a13
	a8 = (word32) (a8_a8 >>u SAR)
	a8 = a12 + a8
	SAR = 0x0B
	a5 = a8 | a5
	a5 = a12 ^ a5
	a4 = a4 + a5
	a9 = a9 + a4
	a4 = 0x4022F754
	a5 = a12 ^ a13
	a9 = a9 + a4
	a4 = Mem0[a3 + 0x00000030:word32]
	a9 = (word32) (a9_a9 >>u SAR)
	a9 = a8 + a9
	SAR = 0x0A
	a5 = a9 | a5
	a5 = a8 ^ a5
	a4 = a4 + a5
	a14 = a14 + a4
	a4 = 0x4022F758
	a5 = a8 ^ a13
	a14 = a14 + a4
	a4 = Mem0[a3 + 0x0000000C:word32]
	a14 = (word32) (a14_a14 >>u SAR)
	a14 = a9 + a14
	SAR = 0x06
	a5 = a14 | a5
	a5 = a9 ^ a5
	a4 = a4 + a5
	a12 = a12 + a4
	a4 = 0x4022F75C
	a5 = a9 ^ a13
	a12 = a12 + a4
	a4 = Mem0[a3 + 0x00000028:word32]
	a12 = (word32) (a12_a12 >>u SAR)
	a12 = a14 + a12
	SAR = 0x01
	a5 = a12 | a5
	a5 = a14 ^ a5
	a4 = a4 + a5
	a8 = a8 + a4
	a4 = 0x4022F760
	a5 = a14 ^ a13
	a8 = a8 + a4
	a4 = Mem0[a3 + 0x00000004:word32]
	a8 = (word32) (a8_a8 >>u SAR)
	a8 = a12 + a8
	SAR = 0x0B
	a5 = a8 | a5
	a5 = a12 ^ a5
	a4 = a4 + a5
	a9 = a9 + a4
	a4 = 0x4022F764
	a5 = a12 ^ a13
	a9 = a9 + a4
	a9 = (word32) (a9_a9 >>u SAR)
	a4 = Mem0[a3 + 0x00000020:word32]
	a9 = a8 + a9
	a5 = a9 | a5
	a5 = a8 ^ a5
	a4 = a4 + a5
	a14 = a14 + a4
	a4 = 0x4022F768
	SAR = 0x0A
	a14 = a14 + a4
	a4 = a8 ^ a13
	a14 = (word32) (a14_a14 >>u SAR)
	a14 = a9 + a14
	SAR = 0x06
	a4 = a14 | a4
	a4 = a9 ^ a4
	a0 = a0 + a4
	a12 = a12 + a0
	a0 = 0x4022F76C
	a4 = a9 ^ a13
	a12 = a12 + a0
	a0 = Mem0[a3 + 0x00000018:word32]
	a12 = (word32) (a12_a12 >>u SAR)
	a12 = a14 + a12
	SAR = 0x01
	a4 = a12 | a4
	a4 = a14 ^ a4
	a0 = a0 + a4
	a8 = a8 + a0
	a0 = 0x4022F770
	a4 = a14 ^ a13
	a8 = a8 + a0
	a0 = Mem0[a3 + 0x00000034:word32]
	a8 = (word32) (a8_a8 >>u SAR)
	a8 = a12 + a8
	SAR = 0x0B
	a4 = a8 | a4
	a4 = a12 ^ a4
	a0 = a0 + a4
	a9 = a9 + a0
	a0 = 0x4022F774
	a4 = a12 ^ a13
	a9 = a9 + a0
	a0 = Mem0[a3 + 0x00000010:word32]
	a9 = (word32) (a9_a9 >>u SAR)
	a9 = a8 + a9
	SAR = 0x0A
	a4 = a9 | a4
	a4 = a8 ^ a4
	a0 = a0 + a4
	a14 = a14 + a0
	a0 = 0x4022F778
	a4 = Mem0[a2 + 0x00000000:word32]
	a14 = a14 + a0
	a14 = (word32) (a14_a14 >>u SAR)
	a0 = a8 ^ a13
	SAR = 0x06
	a14 = a9 + a14
	a4 = a4 + a14
	a0 = a14 | a0
	a0 = a9 ^ a0
	Mem0[a2:word32] = a4
	a15 = a15 + a0
	a12 = a12 + a15
	a15 = 0x4022F77C
	a0 = Mem0[a1 + 0x00000000:word32]
	a12 = a12 + a15
	a15 = Mem0[a2 + 0x0000000C:word32]
	a12 = (word32) (a12_a12 >>u SAR)
	a12 = a14 + a12
	a15 = a15 + a12
	SAR = 0x01
	Mem0[a2 + 0x0000000C:word32] = a15
	a15 = a9 ^ a13
	a13 = a14 ^ a13
	a15 = a12 | a15
	a14 = a14 ^ a15
	a10 = a10 + a14
	a15 = Mem0[a1 + 0x00000010:word32]
	a8 = a8 + a10
	a10 = 0x4022F780
	a14 = Mem0[a2 + 0x00000008:word32]
	a8 = a8 + a10
	a8 = (word32) (a8_a8 >>u SAR)
	a10 = 0x4022F784
	SAR = 0x0B
	a8 = a12 + a8
	a14 = a14 + a8
	a13 = a8 | a13
	a12 = a12 ^ a13
	Mem0[a2 + 0x00000008:word32] = a14
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a11 = a11 + a12
	a9 = a9 + a11
	a12 = Mem0[a1 + 0x00000004:word32]
	a9 = a9 + a10
	a9 = (word32) (a9_a9 >>u SAR)
	a8 = a8 + a9
	a7 = a7 + a8
	Mem0[a2 + 0x00000004:word32] = a7
	a1 = a1 + 32
	return
	// succ:  fn4022F788_exit
fn4022F788_exit:


// sdk_hmac_sha1_vector
// Return size: 0
void sdk_hmac_sha1_vector()
sdk_hmac_sha1_vector_entry:
	// succ:  l4022FE6C
l4022FE6C:
	a1 = fp
	a8 = 0x000000E0
	a1 = a1 - a8
	Mem0[a1 + 0x000000C4:word32] = a3
	Mem0[a1 + 0x000000C0:word32] = a2
	Mem0[a1 + 0x000000A4:word32] = a0
	Mem0[a1 + 0x000000AC:word32] = a13
	Mem0[a1 + 0x000000A8:word32] = a12
	Mem0[a1 + 0x000000B0:word32] = a14
	a12 = a5 | a5
	a14 = a4 | a4
	a13 = a6 | a6
	a0 = 0x000000C4
	a0 = a1 + a0
	a6 = 0x000000C0
	a6 = a1 + a6
	branch a4 <u 0x00000006 l4022FE9D
	// succ:  l4022FE9A l4022FE9D
l4022FE9A:
	goto l4022FF33
	// succ:  l4022FF33
l4022FE9D:
	Mem0[a1 + 0x000000A0:word32] = a7
	a2 = 64
	branch a2 >=u a3 l4022FEBB
	// succ:  l4022FEA5 l4022FEBB
l4022FEA5:
	a3 = a6
	a2 = 1
	a5 = a1
	a4 = a0
	a0 = 0x4022FEB0
	call sdk_sha1_vector (retsize: 0;)
	branch a2 != 0x00000000 l4022FF33
	// succ:  l4022FEB3 l4022FF33
l4022FEB3:
	Mem0[a1 + 0x000000C0:word32] = a1
	a6 = 20
	Mem0[a1 + 0x000000C4:word32] = a6
	// succ:  l4022FEBB
l4022FEBB:
	a2 = a1 + 32
	a3 = 0
	a4 = 64
	a0 = 0x4020267C
	v14 = a0
	a0 = 0x4022FEC8
	call v14 (retsize: 0;)
	a3 = Mem0[a1 + 0x000000C0:word32]
	a4 = Mem0[a1 + 0x000000C4:word32]
	a2 = a1 + 32
	Mem0[a1 + 0x000000B4:word32] = a14
	a0 = 0x40203130
	v15 = a0
	a0 = 0x4022FEDA
	call v15 (retsize: 0;)
	a4 = Mem0[a1 + 0x000000B4:word32]
	a0 = a1 + 32
	a14 = a1 + 96
	a2 = 54
	a6 = 64
	Mem0[a1 + 0x00000080:word32] = a6
	a6 = a1 + 32
	Mem0[a1 + 0x00000060:word32] = a6
	// succ:  l4022FEF0
l4022FEF0:
	v16 = Mem0[a0 + 0x00000000:byte]
	a5 = (uint32) v16
	a5 = a5 ^ a2
	Mem0[a0:byte] = a5
	a0 = a0 + 1
	branch a0 != a14 l4022FEF0
	// succ:  l4022FEFF l4022FEF0
l4022FEFF:
	branch a4 == 0x00000000 l4022FF21
	// succ:  l4022FF02 l4022FF21
l4022FF02:
	a2 = a1 + 96
	a3 = a12 + a4 * 0x00000004
	a0 = a1 + 127
	a0 = a0 + 1
	// succ:  l4022FF0E
l4022FF0E:
	a5 = Mem0[a13 + 0x00000000:word32]
	a6 = Mem0[a12 + 0x00000000:word32]
	a13 = a13 + 4
	a12 = a12 + 4
	Mem0[a2 + 0x00000004:word32] = a6
	Mem0[a0 + 0x00000004:word32] = a5
	a2 = a2 + 4
	a0 = a0 + 4
	branch a12 != a3 l4022FF0E
	// succ:  l4022FF21 l4022FF0E
l4022FF21:
	a3 = a1 + 96
	a2 = a4 + 1
	a5 = Mem0[a1 + 0x000000A0:word32]
	a4 = a1 + 127
	a4 = a4 + 1
	a0 = 0x4022FF31
	call sdk_sha1_vector (retsize: 0;)
	branch a2 == 0x00000000 l4022FF38
	// succ:  l4022FF33 l4022FF38
l4022FF33:
	a2 = -1
	a2 = -1
	goto l4022FF8D
	// succ:  l4022FF8D
l4022FF38:
	a2 = a1 + 32
	a3 = 0
	a4 = 64
	a0 = 0x4020267C
	v17 = a0
	a0 = 0x4022FF45
	call v17 (retsize: 0;)
	a3 = Mem0[a1 + 0x000000C0:word32]
	a4 = Mem0[a1 + 0x000000C4:word32]
	a2 = a1 + 32
	a0 = 0x40203130
	v18 = a0
	a0 = 0x4022FF54
	call v18 (retsize: 0;)
	a0 = a1 + 32
	a2 = 92
	// succ:  l4022FF59
l4022FF59:
	v19 = Mem0[a0 + 0x00000000:byte]
	a5 = (uint32) v19
	a5 = a5 ^ a2
	Mem0[a0:byte] = a5
	a0 = a0 + 1
	branch a0 != a14 l4022FF59
	// succ:  l4022FF68 l4022FF59
l4022FF68:
	a2 = 0x00000002
	a3 = a1 + 96
	a4 = a1 + 127
	a6 = 0x00000014
	a5 = Mem0[a1 + 0x000000A0:word32]
	a7 = 64
	a8 = a1 + 32
	Mem0[a1 + 0x00000060:word32] = a8
	Mem0[a1 + 0x00000080:word32] = a7
	Mem0[a1 + 0x00000064:word32] = a5
	Mem0[a1 + 0x00000084:word32] = a6
	a4 = a4 + 1
	a0 = 0x4022FF8D
	call sdk_sha1_vector (retsize: 0;)
	// succ:  l4022FF8D
l4022FF8D:
	a12 = Mem0[a1 + 0x000000A8:word32]
	a13 = Mem0[a1 + 0x000000AC:word32]
	a14 = Mem0[a1 + 0x000000B0:word32]
	a3 = 0x000000E0
	a0 = Mem0[a1 + 0x000000A4:word32]
	a1 = a1 + a3
	return
	// succ:  sdk_hmac_sha1_vector_exit
sdk_hmac_sha1_vector_exit:


// sdk_hmac_sha1
// Return size: 0
void sdk_hmac_sha1()
sdk_hmac_sha1_entry:
	// succ:  l4022FFA0
l4022FFA0:
	a1 = fp
	a7 = a6
	a9 = a5
	a1 = a1 - 48
	Mem0[a1:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a4
	a5 = a1 + 24
	a6 = a1 + 28
	Mem0[a1 + 0x0000001C:word32] = a9
	a4 = 1
	a0 = 0x4022FFB8
	call fn4032FE6C (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 48
	return
	// succ:  sdk_hmac_sha1_exit
sdk_hmac_sha1_exit:


// sdk_sha1_prf
// Return size: 0
void sdk_sha1_prf()
sdk_sha1_prf_entry:
	// succ:  l4022FFC0
l4022FFC0:
	a1 = fp
	a1 = a1 - 128
	Mem0[a1 + 0x00000058:word32] = a5
	Mem0[a1 + 0x00000054:word32] = a7
	Mem0[a1 + 0x0000006C:word32] = a15
	Mem0[a1 + 0x0000005C:word32] = a0
	Mem0[a1 + 0x00000060:word32] = a12
	Mem0[a1 + 0x00000070:word32] = a2
	Mem0[a1 + 0x00000064:word32] = a13
	Mem0[a1 + 0x00000068:word32] = a14
	a13 = a6 | a6
	a14 = a3 | a3
	a2 = a4 | a4
	a12 = a4
	a0 = 0
	a15 = Mem0[a1 + 0x00000070:word32]
	Mem0[a1:byte] = a0
	a0 = 0x4022FFF1
	call fn4030600C (retsize: 0;)
	Mem0[a1 + 0x00000018:word32] = a1
	Mem0[a1 + 0x00000010:word32] = a12
	Mem0[a1 + 0x00000024:word32] = a13
	a2 = a2 + 1
	a3 = Mem0[a1 + 0x00000058:word32]
	Mem0[a1 + 0x00000014:word32] = a3
	Mem0[a1 + 0x00000020:word32] = a2
	a13 = Mem0[a1 + 0x00000080:word32]
	a2 = 1
	Mem0[a1 + 0x00000028:word32] = a2
	branch a13 == 0x00000000 l4023006A
	// succ:  l4023000A l4023006A
l4023000A:
	a0 = 19
	a12 = 0
	// succ:  l4023000E
l4023000E:
	a4 = a13 - a12
	Mem0[a1 + 0x00000050:word32] = a4
	branch a0 >=u a4 l40230040
	// succ:  l40230017 l40230040
l40230017:
	a2 = a15
	a3 = a14
	a4 = 3
	a5 = a1 + 16
	a7 = Mem0[a1 + 0x00000054:word32]
	a6 = a1 + 32
	a7 = a7 + a12
	a0 = 0x4023002B
	call fn4032FE6C (retsize: 0;)
	branch a2 != 0x00000000 l40230054
	// succ:  l4023002D l40230054
l4023002D:
	a0 = 19
	v15 = Mem0[a1 + 0x00000000:byte]
	a8 = (uint32) v15
	a12 = a12 + 20
	a8 = a8 + 1
	Mem0[a1:byte] = a8
	branch a12 <u a13 l4023000E
	// succ:  l4023003D l4023000E
l4023003D:
	goto l4023006A
	// succ:  l4023006A
l40230040:
	a3 = a14
	a2 = a15
	a4 = 3
	a5 = a1 + 16
	a6 = a1 + 32
	a7 = a1 + 48
	a0 = 0x40230052
	call fn4032FE6C (retsize: 0;)
	branch a2 == 0x00000000 l40230059
	// succ:  l40230054 l40230059
l40230054:
	a2 = -1
	a2 = -1
	goto l4023006C
	// succ:  l4023006C
l40230059:
	a3 = a1 + 48
	a2 = Mem0[a1 + 0x00000054:word32]
	a4 = Mem0[a1 + 0x00000050:word32]
	a2 = a2 + a12
	a0 = 0x40203130
	v16 = a0
	a0 = 0x4023006A
	call v16 (retsize: 0;)
	// succ:  l4023006A
l4023006A:
	a2 = 0
	// succ:  l4023006C
l4023006C:
	a12 = Mem0[a1 + 0x00000060:word32]
	a13 = Mem0[a1 + 0x00000064:word32]
	a14 = Mem0[a1 + 0x00000068:word32]
	a15 = Mem0[a1 + 0x0000006C:word32]
	a3 = 0x00000080
	a0 = Mem0[a1 + 0x0000005C:word32]
	a1 = a1 + a3
	return
	// succ:  sdk_sha1_prf_exit
sdk_sha1_prf_exit:


// sdk_sha1_vector
// Return size: 0
void sdk_sha1_vector()
sdk_sha1_vector_entry:
	// succ:  l40230084
l40230084:
	a1 = fp
	a1 = a1 - 128
	Mem0[a1 + 0x0000005C:word32] = a3
	Mem0[a1 + 0x00000060:word32] = a0
	Mem0[a1 + 0x00000068:word32] = a13
	Mem0[a1 + 0x00000064:word32] = a12
	Mem0[a1 + 0x0000006C:word32] = a14
	a12 = a4
	a14 = a2
	a13 = a5
	a2 = a1
	a0 = 0x402300A1
	call sdk_SHA1Init (retsize: 0;)
	Mem0[a1 + 0x00000070:word32] = a13
	branch a14 == 0x00000000 l402300BC
	// succ:  l402300A6 l402300BC
l402300A6:
	a13 = Mem0[a1 + 0x0000005C:word32]
	a14 = a13 + a14 * 0x00000004
	// succ:  l402300AC
l402300AC:
	a2 = a1
	a3 = Mem0[a13 + 0x00000000:word32]
	a4 = Mem0[a12 + 0x00000000:word32]
	a0 = 0x402300B5
	call sdk_SHA1Update (retsize: 0;)
	a12 = a12 + 4
	a13 = a13 + 4
	branch a13 != a14 l402300AC
	// succ:  l402300BC l402300AC
l402300BC:
	a2 = Mem0[a1 + 0x00000070:word32]
	a3 = a1
	a0 = 0x402300C4
	call sdk_SHA1Final (retsize: 0;)
	a2 = 0
	a12 = Mem0[a1 + 0x00000064:word32]
	a13 = Mem0[a1 + 0x00000068:word32]
	a14 = Mem0[a1 + 0x0000006C:word32]
	a3 = 0x00000080
	a0 = Mem0[a1 + 0x00000060:word32]
	a1 = a1 + a3
	return
	// succ:  sdk_sha1_vector_exit
sdk_sha1_vector_exit:


// sdk_SHA1Transform
// Return size: 0
void sdk_SHA1Transform()
sdk_SHA1Transform_entry:
	// succ:  l402300F4
l402300F4:
	a1 = fp
	a4 = 0x00000130
	a1 = a1 - a4
	a4 = 64
	Mem0[a1 + 0x00000074:word32] = a12
	Mem0[a1 + 0x00000070:word32] = a0
	a12 = a2
	a2 = a1
	a0 = 0x40203130
	v7 = a0
	a0 = 0x4023010C
	call v7 (retsize: 0;)
	Mem0[a1 + 0x00000084:word32] = a12
	a6 = 0x402300E4
	a2 = Mem0[a12 + 0x00000004:word32]
	a7 = Mem0[a1 + 0x00000004:word32]
	Mem0[a1 + 0x00000080:word32] = a15
	a5 = Mem0[a12 + 0x00000000:word32]
	a4 = 0x402300E0
	a8 = 0x402300DC
	SAR = 0x08
	Mem0[a1 + 0x0000007C:word32] = a14
	Mem0[a1 + 0x00000078:word32] = a13
	a14 = Mem0[a1 + 0x00000000:word32]
	a13 = Mem0[a12 + 0x00000010:word32]
	a0 = (word32) (a14_a14 >>u SAR)
	a0 = a0 & a8
	SAR = 0x08
	a14 = (word32) (a14_a14 >>u SAR)
	a14 = a14 & a4
	SAR = 0x0B
	a15 = (word32) (a5_a5 >>u SAR)
	a14 = a14 | a0
	Mem0[a1 + 0x00000100:word32] = a14
	a0 = Mem0[a12 + 0x0000000C:word32]
	SAR = 0x08
	a9 = (word32) (a7_a7 >>u SAR)
	a9 = a9 & a8
	SAR = 0x08
	a7 = (word32) (a7_a7 >>u SAR)
	a7 = a7 & a4
	SAR = 0x02
	a11 = (word32) (a2_a2 >>u SAR)
	a7 = a7 | a9
	Mem0[a1 + 0x000000FC:word32] = a7
	a9 = Mem0[a12 + 0x00000008:word32]
	SAR = 0x0B
	a3 = a9 ^ a0
	a2 = a2 & a3
	a2 = a0 ^ a2
	a14 = a14 + a2
	a2 = a11 ^ a9
	a14 = a14 + a15
	a13 = a13 + a14
	a2 = a5 & a2
	a14 = Mem0[a1 + 0x00000008:word32]
	a2 = a9 ^ a2
	a13 = a13 + a6
	a3 = (word32) (a13_a13 >>u SAR)
	a2 = a7 + a2
	SAR = 0x08
	a2 = a2 + a3
	a15 = (word32) (a14_a14 >>u SAR)
	a3 = Mem0[a1 + 0x0000000C:word32]
	a15 = a15 & a8
	a0 = a0 + a2
	SAR = 0x08
	a2 = Mem0[a1 + 0x00000010:word32]
	a0 = a0 + a6
	a14 = (word32) (a14_a14 >>u SAR)
	a14 = a14 & a4
	SAR = 0x02
	a5 = (word32) (a5_a5 >>u SAR)
	a14 = a14 | a15
	SAR = 0x0B
	a12 = (word32) (a0_a0 >>u SAR)
	Mem0[a1 + 0x000000F8:word32] = a14
	SAR = 0x08
	a10 = (word32) (a3_a3 >>u SAR)
	SAR = 0x08
	a10 = a10 & a8
	a3 = (word32) (a3_a3 >>u SAR)
	SAR = 0x02
	a3 = a3 & a4
	a3 = a3 | a10
	Mem0[a1 + 0x000000F4:word32] = a3
	a10 = a11 ^ a5
	a7 = a7 ^ a3
	a10 = a13 & a10
	a13 = (word32) (a13_a13 >>u SAR)
	a10 = a11 ^ a10
	SAR = 0x0B
	a10 = a14 + a10
	a10 = a10 + a12
	a9 = a9 + a10
	a12 = a5 ^ a13
	a12 = a0 & a12
	a9 = a9 + a6
	a15 = (word32) (a9_a9 >>u SAR)
	a12 = a5 ^ a12
	SAR = 0x08
	a12 = a3 + a12
	a12 = a12 + a15
	a10 = (word32) (a2_a2 >>u SAR)
	a10 = a10 & a8
	a11 = a11 + a12
	SAR = 0x08
	a2 = (word32) (a2_a2 >>u SAR)
	a11 = a11 + a6
	SAR = 0x02
	a2 = a2 & a4
	a2 = a2 | a10
	a0 = (word32) (a0_a0 >>u SAR)
	a15 = a13 ^ a0
	Mem0[a1 + 0x000000F0:word32] = a2
	SAR = 0x0B
	a2 = Mem0[a1 + 0x00000014:word32]
	a12 = (word32) (a11_a11 >>u SAR)
	a15 = a9 & a15
	a15 = a13 ^ a15
	SAR = 0x08
	a10 = (word32) (a2_a2 >>u SAR)
	a10 = a10 & a8
	SAR = 0x08
	a2 = (word32) (a2_a2 >>u SAR)
	a2 = a2 & a4
	SAR = 0x02
	a9 = (word32) (a9_a9 >>u SAR)
	a2 = a2 | a10
	Mem0[a1 + 0x000000EC:word32] = a2
	a10 = Mem0[a1 + 0x000000F0:word32]
	SAR = 0x0B
	a10 = a10 + a15
	a10 = a10 + a12
	a5 = a5 + a10
	a12 = Mem0[a1 + 0x00000018:word32]
	a10 = a0 ^ a9
	a5 = a5 + a6
	a2 = (word32) (a5_a5 >>u SAR)
	a10 = a11 & a10
	a10 = a0 ^ a10
	SAR = 0x08
	a15 = (word32) (a12_a12 >>u SAR)
	a15 = a15 & a8
	SAR = 0x08
	a12 = (word32) (a12_a12 >>u SAR)
	a12 = a12 & a4
	SAR = 0x02
	a11 = (word32) (a11_a11 >>u SAR)
	a12 = a12 | a15
	SAR = 0x0B
	Mem0[a1 + 0x000000E8:word32] = a12
	a15 = Mem0[a1 + 0x000000EC:word32]
	a12 = a11 ^ a9
	a15 = a15 + a10
	a15 = a15 + a2
	a12 = a5 & a12
	a12 = a9 ^ a12
	a13 = a13 + a15
	a13 = a13 + a6
	a15 = Mem0[a1 + 0x0000001C:word32]
	a10 = (word32) (a13_a13 >>u SAR)
	SAR = 0x08
	a2 = (word32) (a15_a15 >>u SAR)
	a2 = a2 & a8
	SAR = 0x08
	a15 = (word32) (a15_a15 >>u SAR)
	a15 = a15 & a4
	SAR = 0x02
	a5 = (word32) (a5_a5 >>u SAR)
	a15 = a15 | a2
	SAR = 0x0B
	Mem0[a1 + 0x000000E4:word32] = a15
	a2 = Mem0[a1 + 0x000000E8:word32]
	a15 = a11 ^ a5
	a2 = a2 + a12
	a2 = a2 + a10
	a15 = a13 & a15
	a15 = a11 ^ a15
	a0 = a0 + a2
	a0 = a0 + a6
	a2 = Mem0[a1 + 0x00000020:word32]
	a12 = (word32) (a0_a0 >>u SAR)
	SAR = 0x08
	a10 = (word32) (a2_a2 >>u SAR)
	a10 = a10 & a8
	SAR = 0x08
	a2 = (word32) (a2_a2 >>u SAR)
	a2 = a2 & a4
	SAR = 0x02
	a13 = (word32) (a13_a13 >>u SAR)
	a2 = a2 | a10
	SAR = 0x0B
	Mem0[a1 + 0x000000E0:word32] = a2
	a10 = Mem0[a1 + 0x000000E4:word32]
	a2 = a5 ^ a13
	a10 = a10 + a15
	a10 = a10 + a12
	a2 = a0 & a2
	a2 = a5 ^ a2
	a9 = a9 + a10
	a9 = a9 + a6
	a10 = Mem0[a1 + 0x00000024:word32]
	a15 = (word32) (a9_a9 >>u SAR)
	SAR = 0x08
	a12 = (word32) (a10_a10 >>u SAR)
	a12 = a12 & a8
	SAR = 0x08
	a10 = (word32) (a10_a10 >>u SAR)
	a10 = a10 & a4
	SAR = 0x02
	a0 = (word32) (a0_a0 >>u SAR)
	a10 = a10 | a12
	Mem0[a1 + 0x000000DC:word32] = a10
	a12 = Mem0[a1 + 0x000000E0:word32]
	SAR = 0x0B
	a12 = a12 + a2
	a2 = Mem0[a1 + 0x00000028:word32]
	a12 = a12 + a15
	a11 = a11 + a12
	a15 = a13 ^ a0
	a15 = a9 & a15
	a11 = a11 + a6
	a12 = (word32) (a11_a11 >>u SAR)
	a15 = a13 ^ a15
	SAR = 0x08
	a10 = (word32) (a2_a2 >>u SAR)
	a10 = a10 & a8
	SAR = 0x08
	a2 = (word32) (a2_a2 >>u SAR)
	a2 = a2 & a4
	SAR = 0x02
	a9 = (word32) (a9_a9 >>u SAR)
	a2 = a2 | a10
	Mem0[a1 + 0x000000D8:word32] = a2
	a10 = Mem0[a1 + 0x000000DC:word32]
	SAR = 0x0B
	a10 = a10 + a15
	a10 = a10 + a12
	a5 = a5 + a10
	a12 = Mem0[a1 + 0x0000002C:word32]
	a10 = a0 ^ a9
	a5 = a5 + a6
	a2 = (word32) (a5_a5 >>u SAR)
	a10 = a11 & a10
	a10 = a0 ^ a10
	SAR = 0x08
	a15 = (word32) (a12_a12 >>u SAR)
	a15 = a15 & a8
	SAR = 0x08
	a12 = (word32) (a12_a12 >>u SAR)
	a12 = a12 & a4
	SAR = 0x02
	a11 = (word32) (a11_a11 >>u SAR)
	a12 = a12 | a15
	SAR = 0x0B
	Mem0[a1 + 0x000000D4:word32] = a12
	a15 = Mem0[a1 + 0x000000D8:word32]
	a12 = a11 ^ a9
	a15 = a15 + a10
	a15 = a15 + a2
	a12 = a5 & a12
	a12 = a9 ^ a12
	a13 = a13 + a15
	a13 = a13 + a6
	a15 = Mem0[a1 + 0x00000030:word32]
	a10 = (word32) (a13_a13 >>u SAR)
	SAR = 0x08
	a2 = (word32) (a15_a15 >>u SAR)
	a2 = a2 & a8
	SAR = 0x08
	a15 = (word32) (a15_a15 >>u SAR)
	a15 = a15 & a4
	SAR = 0x02
	a5 = (word32) (a5_a5 >>u SAR)
	a15 = a15 | a2
	SAR = 0x0B
	Mem0[a1 + 0x000000D0:word32] = a15
	a2 = Mem0[a1 + 0x000000D4:word32]
	a15 = a11 ^ a5
	a2 = a2 + a12
	a2 = a2 + a10
	a15 = a13 & a15
	a15 = a11 ^ a15
	a0 = a0 + a2
	a0 = a0 + a6
	a2 = Mem0[a1 + 0x00000034:word32]
	a12 = (word32) (a0_a0 >>u SAR)
	SAR = 0x08
	a10 = (word32) (a2_a2 >>u SAR)
	a10 = a10 & a8
	SAR = 0x08
	a2 = (word32) (a2_a2 >>u SAR)
	a2 = a2 & a4
	SAR = 0x02
	a13 = (word32) (a13_a13 >>u SAR)
	a2 = a2 | a10
	SAR = 0x0B
	Mem0[a1 + 0x000000CC:word32] = a2
	a10 = Mem0[a1 + 0x000000D0:word32]
	a2 = a5 ^ a13
	a10 = a10 + a15
	a10 = a10 + a12
	a2 = a0 & a2
	a2 = a5 ^ a2
	a9 = a9 + a10
	a9 = a9 + a6
	a10 = Mem0[a1 + 0x00000038:word32]
	a15 = (word32) (a9_a9 >>u SAR)
	SAR = 0x08
	a12 = (word32) (a10_a10 >>u SAR)
	a12 = a12 & a8
	SAR = 0x08
	a10 = (word32) (a10_a10 >>u SAR)
	a10 = a10 & a4
	SAR = 0x02
	a0 = (word32) (a0_a0 >>u SAR)
	a10 = a10 | a12
	Mem0[a1 + 0x000000C8:word32] = a10
	a12 = Mem0[a1 + 0x000000CC:word32]
	SAR = 0x0B
	a12 = a12 + a2
	a12 = a12 + a15
	a11 = a11 + a12
	a15 = Mem0[a1 + 0x0000003C:word32]
	a12 = a13 ^ a0
	a11 = a11 + a6
	a10 = (word32) (a11_a11 >>u SAR)
	a12 = a9 & a12
	a12 = a13 ^ a12
	SAR = 0x08
	a2 = (word32) (a15_a15 >>u SAR)
	a2 = a2 & a8
	SAR = 0x08
	a8 = Mem0[a1 + 0x000000C8:word32]
	a15 = (word32) (a15_a15 >>u SAR)
	a15 = a15 & a4
	SAR = 0x02
	a8 = a8 + a12
	a9 = (word32) (a9_a9 >>u SAR)
	a15 = a15 | a2
	SAR = 0x0B
	Mem0[a1 + 0x000000C4:word32] = a15
	a8 = a8 + a10
	a12 = Mem0[a1 + 0x00000100:word32]
	a10 = Mem0[a1 + 0x000000C8:word32]
	a2 = a0 ^ a9
	a5 = a5 + a8
	a12 = a12 ^ a14
	a5 = a5 + a6
	a8 = Mem0[a1 + 0x000000DC:word32]
	a2 = a11 & a2
	a2 = a0 ^ a2
	a15 = a15 + a2
	a8 = a8 ^ a10
	a2 = (word32) (a5_a5 >>u SAR)
	a7 = a7 ^ a8
	SAR = 0x0F
	a15 = a15 + a2
	a13 = a13 + a15
	a2 = Mem0[a1 + 0x000000CC:word32]
	a15 = Mem0[a1 + 0x000000E0:word32]
	a13 = a13 + a6
	a15 = a15 ^ a2
	a12 = a12 ^ a15
	a15 = Mem0[a1 + 0x000000D8:word32]
	a12 = (word32) (a12_a12 >>u SAR)
	Mem0[a1 + 0x000000C0:word32] = a12
	SAR = 0x02
	a11 = (word32) (a11_a11 >>u SAR)
	a4 = a11 ^ a9
	SAR = 0x0B
	a4 = a5 & a4
	a4 = a9 ^ a4
	a2 = a12 + a4
	a4 = (word32) (a13_a13 >>u SAR)
	a2 = a2 + a4
	SAR = 0x0F
	a4 = Mem0[a1 + 0x000000D4:word32]
	a0 = a0 + a2
	a7 = (word32) (a7_a7 >>u SAR)
	Mem0[a1 + 0x000000BC:word32] = a7
	a0 = a0 + a6
	SAR = 0x02
	a2 = Mem0[a1 + 0x000000C4:word32]
	a5 = (word32) (a5_a5 >>u SAR)
	SAR = 0x0B
	a15 = a15 ^ a2
	a12 = a11 ^ a5
	a2 = Mem0[a1 + 0x000000C0:word32]
	a12 = a13 & a12
	a12 = a11 ^ a12
	a10 = a7 + a12
	a2 = a2 ^ a4
	a12 = (word32) (a0_a0 >>u SAR)
	SAR = 0x0F
	a10 = a10 + a12
	a9 = a9 + a10
	a12 = Mem0[a1 + 0x000000F0:word32]
	a10 = Mem0[a1 + 0x000000BC:word32]
	a9 = a9 + a6
	a14 = a14 ^ a12
	a14 = a14 ^ a15
	a14 = (word32) (a14_a14 >>u SAR)
	Mem0[a1 + 0x000000B8:word32] = a14
	SAR = 0x02
	a13 = (word32) (a13_a13 >>u SAR)
	a15 = a5 ^ a13
	SAR = 0x0B
	a15 = a0 & a15
	a15 = a5 ^ a15
	a14 = a14 + a15
	a15 = (word32) (a9_a9 >>u SAR)
	a14 = a14 + a15
	SAR = 0x0F
	a15 = Mem0[a1 + 0x000000D0:word32]
	a11 = a11 + a14
	a11 = a11 + a6
	a14 = Mem0[a1 + 0x000000EC:word32]
	a10 = a10 ^ a15
	a3 = a3 ^ a14
	a2 = a2 ^ a3
	a3 = 0x402300E8
	a2 = (word32) (a2_a2 >>u SAR)
	Mem0[a1 + 0x000000B4:word32] = a2
	SAR = 0x02
	a0 = (word32) (a0_a0 >>u SAR)
	a8 = a13 ^ a0
	SAR = 0x0B
	a8 = a9 & a8
	a8 = a13 ^ a8
	a7 = a2 + a8
	a8 = (word32) (a11_a11 >>u SAR)
	a7 = a7 + a8
	SAR = 0x0F
	a8 = Mem0[a1 + 0x000000C8:word32]
	a5 = a5 + a7
	a5 = a5 + a6
	a7 = Mem0[a1 + 0x000000E8:word32]
	a6 = Mem0[a1 + 0x000000B4:word32]
	a12 = a12 ^ a7
	a10 = a10 ^ a12
	a6 = a6 ^ a8
	a12 = Mem0[a1 + 0x000000B8:word32]
	a8 = Mem0[a1 + 0x000000E0:word32]
	a10 = (word32) (a10_a10 >>u SAR)
	Mem0[a1 + 0x000000B0:word32] = a10
	SAR = 0x02
	a7 = a7 ^ a8
	a9 = (word32) (a9_a9 >>u SAR)
	a8 = Mem0[a1 + 0x000000CC:word32]
	a6 = a6 ^ a7
	a2 = a9 ^ a11
	a2 = a0 ^ a2
	SAR = 0x0B
	a15 = a10 + a2
	a2 = (word32) (a5_a5 >>u SAR)
	a15 = a15 + a2
	a13 = a13 + a15
	a15 = Mem0[a1 + 0x000000CC:word32]
	SAR = 0x0F
	a12 = a12 ^ a15
	a15 = Mem0[a1 + 0x000000E4:word32]
	a13 = a13 + a3
	a14 = a14 ^ a15
	a12 = a12 ^ a14
	a15 = Mem0[a1 + 0x000000C4:word32]
	a14 = Mem0[a1 + 0x000000B0:word32]
	a12 = (word32) (a12_a12 >>u SAR)
	Mem0[a1 + 0x000000AC:word32] = a12
	SAR = 0x02
	a14 = a14 ^ a15
	a11 = (word32) (a11_a11 >>u SAR)
	a15 = Mem0[a1 + 0x000000E4:word32]
	a4 = a11 ^ a5
	SAR = 0x0B
	a4 = a9 ^ a4
	a2 = a12 + a4
	a4 = (word32) (a13_a13 >>u SAR)
	a2 = a2 + a4
	SAR = 0x0F
	a4 = Mem0[a1 + 0x000000AC:word32]
	a6 = (word32) (a6_a6 >>u SAR)
	a0 = a0 + a2
	a0 = a0 + a3
	Mem0[a1 + 0x000000A8:word32] = a6
	SAR = 0x02
	a2 = Mem0[a1 + 0x000000DC:word32]
	a5 = (word32) (a5_a5 >>u SAR)
	SAR = 0x0B
	a12 = a5 ^ a13
	a15 = a15 ^ a2
	a14 = a14 ^ a15
	a12 = a11 ^ a12
	a2 = Mem0[a1 + 0x000000C0:word32]
	a10 = a6 + a12
	a6 = Mem0[a1 + 0x000000D8:word32]
	a2 = a2 ^ a4
	a12 = (word32) (a0_a0 >>u SAR)
	a4 = Mem0[a1 + 0x000000E0:word32]
	SAR = 0x0F
	a10 = a10 + a12
	a9 = a9 + a10
	a14 = (word32) (a14_a14 >>u SAR)
	a10 = Mem0[a1 + 0x000000BC:word32]
	a9 = a9 + a3
	SAR = 0x02
	Mem0[a1 + 0x000000A4:word32] = a14
	a4 = a4 ^ a6
	a2 = a2 ^ a4
	a12 = Mem0[a1 + 0x000000A4:word32]
	a13 = (word32) (a13_a13 >>u SAR)
	a14 = a13 ^ a0
	SAR = 0x0B
	a14 = a5 ^ a14
	a12 = a12 + a14
	a14 = (word32) (a9_a9 >>u SAR)
	a12 = a12 + a14
	SAR = 0x0F
	a14 = Mem0[a1 + 0x000000D4:word32]
	a11 = a11 + a12
	a2 = (word32) (a2_a2 >>u SAR)
	Mem0[a1 + 0x000000A0:word32] = a2
	a11 = a11 + a3
	SAR = 0x02
	a12 = Mem0[a1 + 0x000000A8:word32]
	a0 = (word32) (a0_a0 >>u SAR)
	SAR = 0x0B
	a10 = a10 ^ a12
	a7 = a0 ^ a9
	a7 = a13 ^ a7
	a12 = Mem0[a1 + 0x000000DC:word32]
	a6 = a2 + a7
	a7 = (word32) (a11_a11 >>u SAR)
	a12 = a12 ^ a14
	SAR = 0x0F
	a10 = a10 ^ a12
	a6 = a6 + a7
	a12 = Mem0[a1 + 0x000000B8:word32]
	a7 = Mem0[a1 + 0x000000A0:word32]
	a5 = a5 + a6
	a5 = a5 + a3
	a6 = Mem0[a1 + 0x000000B4:word32]
	a10 = (word32) (a10_a10 >>u SAR)
	Mem0[a1 + 0x0000009C:word32] = a10
	SAR = 0x02
	a9 = (word32) (a9_a9 >>u SAR)
	a6 = a6 ^ a7
	SAR = 0x0B
	a7 = Mem0[a1 + 0x000000D4:word32]
	a15 = a9 ^ a11
	a15 = a0 ^ a15
	a7 = a7 ^ a8
	a14 = a10 + a15
	a8 = Mem0[a1 + 0x000000BC:word32]
	a6 = a6 ^ a7
	a15 = (word32) (a5_a5 >>u SAR)
	a14 = a14 + a15
	SAR = 0x0F
	a13 = a13 + a14
	a14 = Mem0[a1 + 0x000000A4:word32]
	a15 = Mem0[a1 + 0x000000D0:word32]
	a12 = a12 ^ a14
	a14 = Mem0[a1 + 0x000000D8:word32]
	a13 = a13 + a3
	a14 = a14 ^ a15
	a12 = a12 ^ a14
	a15 = Mem0[a1 + 0x0000009C:word32]
	a14 = Mem0[a1 + 0x000000B0:word32]
	a12 = (word32) (a12_a12 >>u SAR)
	Mem0[a1 + 0x00000098:word32] = a12
	SAR = 0x02
	a14 = a14 ^ a15
	a11 = (word32) (a11_a11 >>u SAR)
	a15 = Mem0[a1 + 0x000000D0:word32]
	a4 = a11 ^ a5
	SAR = 0x0B
	a4 = a9 ^ a4
	a2 = a12 + a4
	a4 = (word32) (a13_a13 >>u SAR)
	a2 = a2 + a4
	SAR = 0x0F
	a4 = Mem0[a1 + 0x00000098:word32]
	a6 = (word32) (a6_a6 >>u SAR)
	a0 = a0 + a2
	a0 = a0 + a3
	Mem0[a1 + 0x00000094:word32] = a6
	SAR = 0x02
	a2 = Mem0[a1 + 0x000000C8:word32]
	a5 = (word32) (a5_a5 >>u SAR)
	SAR = 0x0B
	a12 = a5 ^ a13
	a15 = a15 ^ a2
	a14 = a14 ^ a15
	a12 = a11 ^ a12
	a2 = Mem0[a1 + 0x000000AC:word32]
	a10 = a6 + a12
	a6 = Mem0[a1 + 0x000000C4:word32]
	a2 = a2 ^ a4
	a12 = (word32) (a0_a0 >>u SAR)
	a4 = Mem0[a1 + 0x000000CC:word32]
	SAR = 0x0F
	a10 = a10 + a12
	a9 = a9 + a10
	a14 = (word32) (a14_a14 >>u SAR)
	a10 = Mem0[a1 + 0x000000C0:word32]
	a9 = a9 + a3
	SAR = 0x02
	Mem0[a1 + 0x00000088:word32] = a14
	a4 = a4 ^ a6
	a2 = a2 ^ a4
	a12 = Mem0[a1 + 0x00000088:word32]
	a13 = (word32) (a13_a13 >>u SAR)
	a14 = a13 ^ a0
	SAR = 0x0B
	a14 = a5 ^ a14
	a12 = a12 + a14
	a14 = (word32) (a9_a9 >>u SAR)
	a12 = a12 + a14
	SAR = 0x0F
	a14 = Mem0[a1 + 0x00000094:word32]
	a11 = a11 + a12
	a2 = (word32) (a2_a2 >>u SAR)
	Mem0[a1 + 0x0000008C:word32] = a2
	a11 = a11 + a3
	SAR = 0x02
	a12 = Mem0[a1 + 0x000000A8:word32]
	a0 = (word32) (a0_a0 >>u SAR)
	SAR = 0x0B
	a12 = a12 ^ a14
	a7 = a0 ^ a9
	a7 = a13 ^ a7
	a14 = Mem0[a1 + 0x000000C8:word32]
	a6 = a2 + a7
	a7 = (word32) (a11_a11 >>u SAR)
	a10 = a10 ^ a14
	SAR = 0x0F
	a6 = a6 + a7
	a10 = a10 ^ a12
	a7 = Mem0[a1 + 0x000000A0:word32]
	a5 = a5 + a6
	a12 = Mem0[a1 + 0x00000088:word32]
	a6 = Mem0[a1 + 0x000000C0:word32]
	a5 = a5 + a3
	a10 = (word32) (a10_a10 >>u SAR)
	Mem0[a1 + 0x00000090:word32] = a10
	SAR = 0x02
	a9 = (word32) (a9_a9 >>u SAR)
	a15 = a9 ^ a11
	SAR = 0x0B
	a15 = a0 ^ a15
	a14 = a10 + a15
	a10 = Mem0[a1 + 0x000000A4:word32]
	a15 = (word32) (a5_a5 >>u SAR)
	a14 = a14 + a15
	SAR = 0x0F
	a15 = Mem0[a1 + 0x00000094:word32]
	a10 = a10 ^ a12
	a13 = a13 + a14
	a12 = Mem0[a1 + 0x000000C4:word32]
	a13 = a13 + a3
	a8 = a8 ^ a12
	a8 = a8 ^ a10
	a10 = Mem0[a1 + 0x0000008C:word32]
	a8 = (word32) (a8_a8 >>u SAR)
	Mem0[a1 + 0x00000104:word32] = a8
	SAR = 0x02
	a7 = a7 ^ a10
	a11 = (word32) (a11_a11 >>u SAR)
	a10 = Mem0[a1 + 0x000000B8:word32]
	a2 = a11 ^ a5
	SAR = 0x0B
	a4 = (word32) (a13_a13 >>u SAR)
	a2 = a9 ^ a2
	SAR = 0x0F
	a6 = a6 ^ a10
	a2 = a8 + a2
	a2 = a2 + a4
	a6 = a6 ^ a7
	a4 = Mem0[a1 + 0x000000BC:word32]
	a7 = Mem0[a1 + 0x0000009C:word32]
	a0 = a0 + a2
	a6 = (word32) (a6_a6 >>u SAR)
	Mem0[a1 + 0x0000004C:word32] = a6
	a15 = a6 ^ a15
	a2 = Mem0[a1 + 0x000000B8:word32]
	SAR = 0x02
	a0 = a0 + a3
	a5 = (word32) (a5_a5 >>u SAR)
	SAR = 0x0B
	a10 = a5 ^ a13
	a10 = a11 ^ a10
	a12 = (word32) (a0_a0 >>u SAR)
	a10 = a6 + a10
	a10 = a10 + a12
	a9 = a9 + a10
	a10 = Mem0[a1 + 0x00000090:word32]
	SAR = 0x0F
	a7 = a7 ^ a10
	a10 = Mem0[a1 + 0x000000B4:word32]
	a9 = a9 + a3
	a4 = a4 ^ a10
	a4 = a4 ^ a7
	a7 = Mem0[a1 + 0x00000098:word32]
	a4 = (word32) (a4_a4 >>u SAR)
	Mem0[a1 + 0x00000050:word32] = a4
	SAR = 0x02
	a7 = a7 ^ a8
	a13 = (word32) (a13_a13 >>u SAR)
	a8 = Mem0[a1 + 0x000000B0:word32]
	a12 = a13 ^ a0
	SAR = 0x0B
	a14 = (word32) (a9_a9 >>u SAR)
	a12 = a5 ^ a12
	SAR = 0x0F
	a12 = a4 + a12
	a2 = a2 ^ a8
	a2 = a2 ^ a7
	a12 = a12 + a14
	a11 = a11 + a12
	a2 = (word32) (a2_a2 >>u SAR)
	Mem0[a1 + 0x00000054:word32] = a2
	a11 = a11 + a3
	a12 = Mem0[a1 + 0x0000008C:word32]
	SAR = 0x02
	a0 = (word32) (a0_a0 >>u SAR)
	a12 = a2 ^ a12
	a7 = a0 ^ a9
	SAR = 0x0B
	a8 = (word32) (a11_a11 >>u SAR)
	a7 = a13 ^ a7
	a7 = a2 + a7
	SAR = 0x0F
	a7 = a7 + a8
	a8 = Mem0[a1 + 0x000000AC:word32]
	a5 = a5 + a7
	a5 = a5 + a3
	a7 = a10 ^ a8
	a8 = Mem0[a1 + 0x000000A8:word32]
	a15 = a15 ^ a7
	a15 = (word32) (a15_a15 >>u SAR)
	Mem0[a1 + 0x0000005C:word32] = a15
	SAR = 0x02
	a9 = (word32) (a9_a9 >>u SAR)
	a14 = a9 ^ a11
	SAR = 0x0B
	a7 = (word32) (a5_a5 >>u SAR)
	a14 = a0 ^ a14
	a14 = a15 + a14
	SAR = 0x0F
	a14 = a14 + a7
	a7 = Mem0[a1 + 0x000000B0:word32]
	a13 = a13 + a14
	a13 = a13 + a3
	a14 = Mem0[a1 + 0x00000088:word32]
	a7 = a7 ^ a8
	a14 = a4 ^ a14
	a14 = a14 ^ a7
	a14 = (word32) (a14_a14 >>u SAR)
	Mem0[a1 + 0x00000064:word32] = a14
	SAR = 0x02
	a11 = (word32) (a11_a11 >>u SAR)
	a7 = a11 ^ a5
	SAR = 0x0B
	a8 = (word32) (a13_a13 >>u SAR)
	a7 = a9 ^ a7
	SAR = 0x0F
	a7 = a14 + a7
	a7 = a7 + a8
	a0 = a0 + a7
	a8 = Mem0[a1 + 0x000000A4:word32]
	a7 = Mem0[a1 + 0x000000AC:word32]
	a0 = a0 + a3
	a7 = a7 ^ a8
	a8 = Mem0[a1 + 0x000000A0:word32]
	a12 = a12 ^ a7
	a12 = (word32) (a12_a12 >>u SAR)
	Mem0[a1 + 0x00000068:word32] = a12
	SAR = 0x02
	a5 = (word32) (a5_a5 >>u SAR)
	a10 = a5 ^ a13
	SAR = 0x0B
	a7 = (word32) (a0_a0 >>u SAR)
	a10 = a11 ^ a10
	a10 = a12 + a10
	SAR = 0x0F
	a10 = a10 + a7
	a7 = Mem0[a1 + 0x000000A8:word32]
	a9 = a9 + a10
	a9 = a9 + a3
	a10 = Mem0[a1 + 0x00000090:word32]
	a7 = a7 ^ a8
	a8 = Mem0[a1 + 0x00000104:word32]
	a10 = a15 ^ a10
	a10 = a10 ^ a7
	a8 = a14 ^ a8
	a10 = (word32) (a10_a10 >>u SAR)
	Mem0[a1 + 0x0000006C:word32] = a10
	SAR = 0x02
	a13 = (word32) (a13_a13 >>u SAR)
	a3 = a13 ^ a0
	SAR = 0x0B
	a7 = (word32) (a9_a9 >>u SAR)
	a3 = a5 ^ a3
	a3 = a10 + a3
	a3 = a3 + a7
	a11 = a11 + a3
	a7 = Mem0[a1 + 0x0000009C:word32]
	a3 = Mem0[a1 + 0x000000A4:word32]
	SAR = 0x0F
	a3 = a3 ^ a7
	a7 = 0x402300E8
	a8 = a8 ^ a3
	a8 = (word32) (a8_a8 >>u SAR)
	a11 = a11 + a7
	Mem0[a1 + 0x00000108:word32] = a8
	SAR = 0x02
	a0 = (word32) (a0_a0 >>u SAR)
	a3 = a0 ^ a9
	a3 = a13 ^ a3
	SAR = 0x0B
	a8 = a8 + a3
	a3 = (word32) (a11_a11 >>u SAR)
	SAR = 0x0F
	a8 = a8 + a3
	a5 = a5 + a8
	a5 = a5 + a7
	a8 = Mem0[a1 + 0x00000098:word32]
	a7 = Mem0[a1 + 0x000000A0:word32]
	a3 = a6 ^ a12
	a7 = a7 ^ a8
	a3 = a3 ^ a7
	a3 = (word32) (a3_a3 >>u SAR)
	SAR = 0x02
	Mem0[a1 + 0x00000114:word32] = a3
	a9 = (word32) (a9_a9 >>u SAR)
	SAR = 0x0B
	a8 = a9 & a11
	a7 = a9 | a11
	a7 = a0 & a7
	a7 = a7 | a8
	a3 = a3 + a7
	a8 = Mem0[a1 + 0x00000094:word32]
	a7 = (word32) (a5_a5 >>u SAR)
	SAR = 0x0F
	a3 = a3 + a7
	a13 = a13 + a3
	a7 = Mem0[a1 + 0x0000009C:word32]
	a3 = a4 ^ a10
	a7 = a7 ^ a8
	a3 = a3 ^ a7
	a3 = (word32) (a3_a3 >>u SAR)
	SAR = 0x02
	Mem0[a1 + 0x0000010C:word32] = a3
	a3 = Mem0[a1 + 0x0000010C:word32]
	a11 = (word32) (a11_a11 >>u SAR)
	Mem0[a1 + 0x00000110:word32] = a11
	SAR = 0x0B
	a7 = a11 & a5
	a8 = a11 | a5
	a8 = a9 & a8
	a7 = a7 | a8
	a3 = a3 + a7
	a8 = Mem0[a1 + 0x00000108:word32]
	a7 = 0x402300EC
	a8 = a2 ^ a8
	a13 = a13 + a7
	a7 = (word32) (a13_a13 >>u SAR)
	a3 = a3 + a7
	a0 = a0 + a3
	a7 = Mem0[a1 + 0x00000088:word32]
	a3 = Mem0[a1 + 0x00000098:word32]
	SAR = 0x0F
	a3 = a3 ^ a7
	a8 = a8 ^ a3
	a7 = Mem0[a1 + 0x00000114:word32]
	a3 = 0x402300EC
	a8 = (word32) (a8_a8 >>u SAR)
	a7 = a15 ^ a7
	SAR = 0x02
	a0 = a0 + a3
	a5 = (word32) (a5_a5 >>u SAR)
	Mem0[a1 + 0x00000058:word32] = a5
	Mem0[a1 + 0x00000048:word32] = a0
	a3 = a5 | a13
	SAR = 0x0B
	a11 = a11 & a3
	a3 = a5 & a13
	a11 = a11 | a3
	a3 = (word32) (a0_a0 >>u SAR)
	a11 = a8 + a11
	a11 = a11 + a3
	a9 = a9 + a11
	a3 = Mem0[a1 + 0x0000008C:word32]
	a11 = Mem0[a1 + 0x00000094:word32]
	SAR = 0x0F
	a11 = a11 ^ a3
	a7 = a7 ^ a11
	a3 = 0x402300EC
	a7 = (word32) (a7_a7 >>u SAR)
	SAR = 0x02
	a9 = a9 + a3
	Mem0[a1 + 0x00000044:word32] = a9
	a13 = (word32) (a13_a13 >>u SAR)
	Mem0[a1 + 0x00000060:word32] = a13
	a11 = a13 & a0
	SAR = 0x0B
	a9 = (word32) (a9_a9 >>u SAR)
	a13 = a13 | a0
	SAR = 0x0F
	a0 = Mem0[a1 + 0x00000110:word32]
	a5 = a5 & a13
	a5 = a5 | a11
	a13 = Mem0[a1 + 0x00000078:word32]
	a11 = Mem0[a1 + 0x00000100:word32]
	a5 = a7 + a5
	a5 = a5 + a9
	Mem0[a1:word32] = a11
	a9 = Mem0[a1 + 0x0000010C:word32]
	a0 = a0 + a5
	a11 = Mem0[a1 + 0x000000F4:word32]
	Mem0[a1 + 0x0000000C:word32] = a11
	a0 = a0 + a3
	a5 = Mem0[a1 + 0x000000FC:word32]
	a3 = Mem0[a1 + 0x0000008C:word32]
	Mem0[a1 + 0x00000040:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a5
	a11 = Mem0[a1 + 0x000000E8:word32]
	a5 = Mem0[a1 + 0x000000F0:word32]
	Mem0[a1 + 0x00000018:word32] = a11
	a0 = Mem0[a1 + 0x000000F8:word32]
	a11 = Mem0[a1 + 0x000000DC:word32]
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x00000018:word32] = a10
	Mem0[a1 + 0x00000010:word32] = a5
	a10 = Mem0[a1 + 0x00000114:word32]
	a5 = Mem0[a1 + 0x000000E4:word32]
	a0 = Mem0[a1 + 0x000000EC:word32]
	Mem0[a1 + 0x00000024:word32] = a11
	Mem0[a1 + 0x00000024:word32] = a9
	Mem0[a1 + 0x00000014:word32] = a0
	Mem0[a1 + 0x0000001C:word32] = a5
	a11 = Mem0[a1 + 0x000000D0:word32]
	Mem0[a1 + 0x00000030:word32] = a11
	a5 = Mem0[a1 + 0x000000D8:word32]
	a0 = Mem0[a1 + 0x000000E0:word32]
	Mem0[a1 + 0x00000020:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a5
	a11 = Mem0[a1 + 0x000000C4:word32]
	a5 = Mem0[a1 + 0x000000CC:word32]
	Mem0[a1 + 0x0000003C:word32] = a11
	a0 = Mem0[a1 + 0x000000D4:word32]
	a11 = Mem0[a1 + 0x000000B8:word32]
	Mem0[a1 + 0x0000002C:word32] = a0
	Mem0[a1 + 0x00000034:word32] = a5
	Mem0[a1 + 0x00000034:word32] = a3
	a5 = Mem0[a1 + 0x000000C0:word32]
	a0 = Mem0[a1 + 0x000000C8:word32]
	Mem0[a1 + 0x00000008:word32] = a11
	Mem0[a1 + 0x00000008:word32] = a2
	a11 = Mem0[a1 + 0x000000AC:word32]
	Mem0[a1 + 0x00000038:word32] = a0
	Mem0[a1:word32] = a5
	a0 = Mem0[a1 + 0x000000BC:word32]
	a5 = Mem0[a1 + 0x000000B4:word32]
	Mem0[a1 + 0x00000014:word32] = a11
	Mem0[a1:word32] = a6
	a2 = Mem0[a1 + 0x00000090:word32]
	Mem0[a1 + 0x00000038:word32] = a2
	a6 = a14 ^ a9
	a11 = Mem0[a1 + 0x000000A0:word32]
	Mem0[a1 + 0x0000000C:word32] = a5
	Mem0[a1 + 0x00000014:word32] = a12
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a4
	a12 = Mem0[a1 + 0x00000084:word32]
	a0 = Mem0[a1 + 0x000000B0:word32]
	Mem0[a1 + 0x0000000C:word32] = a15
	Mem0[a1 + 0x00000020:word32] = a11
	Mem0[a1 + 0x00000020:word32] = a10
	a15 = Mem0[a1 + 0x00000080:word32]
	Mem0[a1 + 0x00000010:word32] = a0
	a11 = Mem0[a1 + 0x00000094:word32]
	a0 = Mem0[a1 + 0x000000A4:word32]
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x0000002C:word32] = a11
	Mem0[a1 + 0x0000002C:word32] = a7
	a14 = Mem0[a1 + 0x0000007C:word32]
	Mem0[a1 + 0x0000001C:word32] = a0
	a11 = Mem0[a1 + 0x00000088:word32]
	Mem0[a1 + 0x00000030:word32] = a11
	a0 = Mem0[a1 + 0x00000098:word32]
	a11 = a11 ^ a2
	Mem0[a1 + 0x00000028:word32] = a0
	Mem0[a1 + 0x00000028:word32] = a8
	a0 = Mem0[a1 + 0x00000104:word32]
	a6 = a6 ^ a11
	a6 = (word32) (a6_a6 >>u SAR)
	Mem0[a1 + 0x0000003C:word32] = a0
	a11 = Mem0[a1 + 0x00000108:word32]
	Mem0[a1 + 0x0000001C:word32] = a11
	a4 = Mem0[a1 + 0x00000058:word32]
	Mem0[a1 + 0x00000084:word32] = a12
	a3 = a3 ^ a0
	Mem0[a1 + 0x00000120:word32] = a8
	SAR = 0x02
	Mem0[a1 + 0x00000080:word32] = a15
	Mem0[a1 + 0x0000011C:word32] = a7
	Mem0[a1 + 0x00000078:word32] = a13
	Mem0[a1 + 0x0000007C:word32] = a14
	Mem0[a1 + 0x00000118:word32] = a6
	a5 = Mem0[a1 + 0x00000118:word32]
	a14 = Mem0[a1 + 0x00000040:word32]
	a13 = Mem0[a1 + 0x00000068:word32]
	a7 = Mem0[a1 + 0x00000048:word32]
	a15 = a13 ^ a8
	a7 = (word32) (a7_a7 >>u SAR)
	a8 = Mem0[a1 + 0x00000060:word32]
	a15 = a15 ^ a3
	SAR = 0x0B
	a6 = (word32) (a14_a14 >>u SAR)
	a3 = Mem0[a1 + 0x00000044:word32]
	SAR = 0x0F
	a15 = (word32) (a15_a15 >>u SAR)
	a12 = a7 | a3
	a12 = a8 & a12
	Mem0[a1 + 0x000000CC:word32] = a15
	SAR = 0x02
	a15 = a7 & a3
	a3 = (word32) (a3_a3 >>u SAR)
	a12 = a12 | a15
	SAR = 0x0B
	a5 = a5 + a12
	Mem0[a1 + 0x000000B4:word32] = a3
	a12 = Mem0[a1 + 0x000000CC:word32]
	a5 = a5 + a6
	a15 = a3 | a14
	a6 = Mem0[a1 + 0x0000006C:word32]
	a3 = a3 & a14
	a4 = a4 + a5
	a15 = a7 & a15
	a5 = 0x402300EC
	a15 = a15 | a3
	a3 = Mem0[a1 + 0x0000011C:word32]
	a12 = a12 + a15
	a4 = a4 + a5
	a15 = (word32) (a4_a4 >>u SAR)
	a3 = a6 ^ a3
	SAR = 0x0F
	a12 = a12 + a15
	a8 = a8 + a12
	a15 = Mem0[a1 + 0x0000004C:word32]
	a12 = 0x402300EC
	a2 = a15 ^ a2
	a8 = a8 + a12
	a2 = a2 ^ a3
	a2 = (word32) (a2_a2 >>u SAR)
	a3 = Mem0[a1 + 0x000000B4:word32]
	SAR = 0x02
	Mem0[a1 + 0x000000C8:word32] = a2
	a12 = Mem0[a1 + 0x000000C8:word32]
	a2 = (word32) (a14_a14 >>u SAR)
	a14 = a2 & a4
	a5 = a2 | a4
	a3 = a3 & a5
	SAR = 0x0B
	a14 = a14 | a3
	a12 = a12 + a14
	a14 = (word32) (a8_a8 >>u SAR)
	SAR = 0x0F
	a12 = a12 + a14
	a7 = a7 + a12
	a14 = Mem0[a1 + 0x00000118:word32]
	a12 = Mem0[a1 + 0x00000050:word32]
	a14 = a11 ^ a14
	a5 = a12 ^ a0
	a5 = a5 ^ a14
	a14 = 0x402300EC
	a5 = (word32) (a5_a5 >>u SAR)
	Mem0[a1 + 0x000000C4:word32] = a5
	SAR = 0x02
	a4 = (word32) (a4_a4 >>u SAR)
	a7 = a7 + a14
	SAR = 0x0B
	a3 = a4 & a8
	a0 = a4 | a8
	a0 = a2 & a0
	a0 = a0 | a3
	a14 = a5 + a0
	a3 = 0x402300EC
	a5 = Mem0[a1 + 0x000000B4:word32]
	a0 = (word32) (a7_a7 >>u SAR)
	a14 = a14 + a0
	SAR = 0x0F
	a0 = Mem0[a1 + 0x000000CC:word32]
	a5 = a5 + a14
	a5 = a5 + a3
	a14 = Mem0[a1 + 0x00000054:word32]
	a0 = a10 ^ a0
	a15 = a15 ^ a14
	a15 = a15 ^ a0
	a15 = (word32) (a15_a15 >>u SAR)
	Mem0[a1 + 0x000000C0:word32] = a15
	SAR = 0x02
	a8 = (word32) (a8_a8 >>u SAR)
	a0 = a8 | a7
	a15 = a8 & a7
	a0 = a4 & a0
	a0 = a0 | a15
	a15 = Mem0[a1 + 0x000000C0:word32]
	SAR = 0x0B
	a15 = a15 + a0
	a0 = (word32) (a5_a5 >>u SAR)
	a15 = a15 + a0
	SAR = 0x0F
	a0 = Mem0[a1 + 0x000000C8:word32]
	a2 = a2 + a15
	a2 = a2 + a3
	a15 = Mem0[a1 + 0x0000005C:word32]
	a0 = a9 ^ a0
	a12 = a12 ^ a15
	a15 = a15 ^ a13
	a12 = a12 ^ a0
	a12 = (word32) (a12_a12 >>u SAR)
	a13 = a13 ^ a11
	SAR = 0x02
	Mem0[a1 + 0x000000BC:word32] = a12
	a7 = (word32) (a7_a7 >>u SAR)
	SAR = 0x0B
	a3 = a7 & a5
	a0 = a7 | a5
	a0 = a8 & a0
	a0 = a0 | a3
	a12 = a12 + a0
	a3 = Mem0[a1 + 0x000000C4:word32]
	a0 = (word32) (a2_a2 >>u SAR)
	SAR = 0x0F
	a12 = a12 + a0
	a4 = a4 + a12
	a0 = Mem0[a1 + 0x00000120:word32]
	a12 = Mem0[a1 + 0x00000064:word32]
	a0 = a0 ^ a3
	a14 = a14 ^ a12
	a3 = Mem0[a1 + 0x000000C0:word32]
	a12 = a12 ^ a6
	a14 = a14 ^ a0
	a14 = (word32) (a14_a14 >>u SAR)
	a0 = Mem0[a1 + 0x0000011C:word32]
	SAR = 0x02
	a3 = a3 ^ a0
	a5 = (word32) (a5_a5 >>u SAR)
	a3 = a3 ^ a15
	a15 = 0x402300EC
	SAR = 0x0B
	a4 = a4 + a15
	a0 = (word32) (a4_a4 >>u SAR)
	a15 = a5 | a2
	a15 = a7 & a15
	SAR = 0x0F
	a3 = (word32) (a3_a3 >>u SAR)
	Mem0[a1 + 0x000000D0:word32] = a3
	SAR = 0x02
	a3 = a5 & a2
	a2 = (word32) (a2_a2 >>u SAR)
	a15 = a15 | a3
	a15 = a14 + a15
	a3 = Mem0[a1 + 0x000000BC:word32]
	a15 = a15 + a0
	a8 = a8 + a15
	a15 = Mem0[a1 + 0x00000118:word32]
	SAR = 0x0B
	a3 = a3 ^ a15
	a3 = a3 ^ a12
	a15 = a2 | a4
	a12 = 0x402300EC
	a15 = a5 & a15
	a8 = a8 + a12
	a0 = (word32) (a8_a8 >>u SAR)
	SAR = 0x0F
	a3 = (word32) (a3_a3 >>u SAR)
	Mem0[a1 + 0x000000D4:word32] = a3
	SAR = 0x02
	a3 = a2 & a4
	a3 = a3 | a15
	a4 = (word32) (a4_a4 >>u SAR)
	a15 = Mem0[a1 + 0x000000D0:word32]
	SAR = 0x0B
	a15 = a15 + a3
	a3 = Mem0[a1 + 0x000000CC:word32]
	a15 = a15 + a0
	a7 = a7 + a15
	a0 = a4 | a8
	a0 = a2 & a0
	a7 = a7 + a12
	a3 = a14 ^ a3
	a3 = a3 ^ a13
	a15 = (word32) (a7_a7 >>u SAR)
	a13 = Mem0[a1 + 0x000000D4:word32]
	SAR = 0x0F
	a3 = (word32) (a3_a3 >>u SAR)
	Mem0[a1 + 0x000000DC:word32] = a3
	SAR = 0x02
	a3 = a4 & a8
	a8 = (word32) (a8_a8 >>u SAR)
	a0 = a0 | a3
	SAR = 0x0B
	a3 = Mem0[a1 + 0x000000C8:word32]
	a13 = a13 + a0
	a13 = a13 + a15
	a0 = a6 ^ a10
	a15 = Mem0[a1 + 0x000000D0:word32]
	a5 = a5 + a13
	a5 = a5 + a12
	a13 = a8 | a7
	a13 = a4 & a13
	a15 = a15 ^ a3
	a6 = (word32) (a5_a5 >>u SAR)
	a3 = Mem0[a1 + 0x000000DC:word32]
	a15 = a15 ^ a0
	SAR = 0x0F
	a0 = Mem0[a1 + 0x000000D4:word32]
	a15 = (word32) (a15_a15 >>u SAR)
	Mem0[a1 + 0x000000D8:word32] = a15
	SAR = 0x02
	a15 = a8 & a7
	a7 = (word32) (a7_a7 >>u SAR)
	a13 = a13 | a15
	SAR = 0x0B
	a3 = a3 + a13
	a3 = a3 + a6
	a15 = a7 | a5
	a15 = a8 & a15
	a2 = a2 + a3
	a6 = a11 ^ a9
	a3 = Mem0[a1 + 0x000000C4:word32]
	a11 = a2 + a12
	a2 = Mem0[a1 + 0x00000120:word32]
	a13 = (word32) (a11_a11 >>u SAR)
	a0 = a0 ^ a3
	a0 = a0 ^ a6
	SAR = 0x0F
	a6 = Mem0[a1 + 0x000000D8:word32]
	a2 = a10 ^ a2
	a0 = (word32) (a0_a0 >>u SAR)
	SAR = 0x02
	Mem0[a1 + 0x000000E8:word32] = a0
	a10 = Mem0[a1 + 0x000000E8:word32]
	a0 = a7 & a5
	a15 = a15 | a0
	a5 = (word32) (a5_a5 >>u SAR)
	a0 = Mem0[a1 + 0x000000DC:word32]
	SAR = 0x0B
	a6 = a6 + a15
	a6 = a6 + a13
	a4 = a4 + a6
	a15 = a5 | a11
	a15 = a7 & a15
	a6 = Mem0[a1 + 0x000000C0:word32]
	a4 = a4 + a12
	a13 = (word32) (a4_a4 >>u SAR)
	a0 = a6 ^ a0
	SAR = 0x0F
	a0 = a0 ^ a2
	a2 = Mem0[a1 + 0x000000D8:word32]
	a0 = (word32) (a0_a0 >>u SAR)
	Mem0[a1 + 0x000000E0:word32] = a0
	SAR = 0x02
	a0 = a5 & a11
	a11 = (word32) (a11_a11 >>u SAR)
	a15 = a15 | a0
	SAR = 0x0B
	a0 = Mem0[a1 + 0x000000BC:word32]
	a10 = a10 + a15
	a10 = a10 + a13
	a2 = a0 ^ a2
	a13 = a11 & a4
	a15 = a11 | a4
	a8 = a8 + a10
	a8 = a8 + a12
	a10 = Mem0[a1 + 0x0000011C:word32]
	a15 = a5 & a15
	a13 = a13 | a15
	a9 = a9 ^ a10
	a15 = Mem0[a1 + 0x00000120:word32]
	a10 = (word32) (a8_a8 >>u SAR)
	a2 = a2 ^ a9
	SAR = 0x0F
	a9 = Mem0[a1 + 0x000000E0:word32]
	a2 = (word32) (a2_a2 >>u SAR)
	SAR = 0x02
	Mem0[a1 + 0x000000EC:word32] = a2
	a9 = a9 + a13
	a2 = Mem0[a1 + 0x00000118:word32]
	a13 = Mem0[a1 + 0x000000E8:word32]
	a4 = (word32) (a4_a4 >>u SAR)
	a9 = a9 + a10
	a7 = a7 + a9
	SAR = 0x0B
	a9 = Mem0[a1 + 0x000000EC:word32]
	a13 = a14 ^ a13
	a15 = a15 ^ a2
	a7 = a7 + a12
	a2 = a4 & a8
	a10 = (word32) (a7_a7 >>u SAR)
	a13 = a13 ^ a15
	SAR = 0x0F
	a15 = a4 | a8
	a13 = (word32) (a13_a13 >>u SAR)
	a15 = a11 & a15
	a15 = a15 | a2
	SAR = 0x02
	a8 = (word32) (a8_a8 >>u SAR)
	a9 = a9 + a15
	SAR = 0x0B
	a15 = Mem0[a1 + 0x000000CC:word32]
	a9 = a9 + a10
	a5 = a5 + a9
	a10 = Mem0[a1 + 0x0000011C:word32]
	a9 = Mem0[a1 + 0x000000D0:word32]
	a5 = a5 + a12
	a10 = a10 ^ a15
	a2 = (word32) (a5_a5 >>u SAR)
	a15 = Mem0[a1 + 0x000000E0:word32]
	SAR = 0x0F
	a9 = a9 ^ a15
	a9 = a9 ^ a10
	a15 = a8 | a7
	a15 = a4 & a15
	a9 = (word32) (a9_a9 >>u SAR)
	Mem0[a1 + 0x000000E4:word32] = a9
	SAR = 0x02
	a9 = a8 & a7
	a7 = (word32) (a7_a7 >>u SAR)
	a15 = a15 | a9
	SAR = 0x0B
	a9 = Mem0[a1 + 0x000000E4:word32]
	a10 = a7 | a5
	a15 = a13 + a15
	a15 = a15 + a2
	a10 = a8 & a10
	a2 = Mem0[a1 + 0x000000EC:word32]
	a11 = a11 + a15
	a11 = a11 + a12
	a15 = a7 & a5
	a10 = a10 | a15
	a9 = a9 + a10
	a15 = Mem0[a1 + 0x00000118:word32]
	a10 = (word32) (a11_a11 >>u SAR)
	a9 = a9 + a10
	SAR = 0x0F
	a10 = Mem0[a1 + 0x000000D4:word32]
	a4 = a4 + a9
	a4 = a4 + a12
	a10 = a10 ^ a2
	a12 = Mem0[a1 + 0x000000C8:word32]
	a2 = Mem0[a1 + 0x000000CC:word32]
	a15 = a15 ^ a12
	a10 = a10 ^ a15
	a12 = a6 ^ a12
	a2 = a2 ^ a3
	a6 = a6 ^ a14
	a3 = a0 ^ a3
	a10 = (word32) (a10_a10 >>u SAR)
	a15 = Mem0[a1 + 0x000000DC:word32]
	SAR = 0x02
	a5 = (word32) (a5_a5 >>u SAR)
	a15 = a15 ^ a13
	a15 = a15 ^ a2
	SAR = 0x0B
	a9 = a5 ^ a11
	a9 = a7 ^ a9
	a2 = (word32) (a4_a4 >>u SAR)
	a9 = a10 + a9
	SAR = 0x0F
	a9 = a9 + a2
	a15 = (word32) (a15_a15 >>u SAR)
	a2 = Mem0[a1 + 0x000000D8:word32]
	a8 = a8 + a9
	SAR = 0x02
	a11 = (word32) (a11_a11 >>u SAR)
	a9 = Mem0[a1 + 0x000000E4:word32]
	SAR = 0x0B
	a2 = a2 ^ a9
	a9 = 0x402300F0
	a12 = a12 ^ a2
	a8 = a8 + a9
	a2 = (word32) (a8_a8 >>u SAR)
	a9 = a11 ^ a4
	a9 = a5 ^ a9
	SAR = 0x0F
	a12 = (word32) (a12_a12 >>u SAR)
	a9 = a15 + a9
	a9 = a9 + a2
	SAR = 0x02
	a7 = a7 + a9
	a9 = Mem0[a1 + 0x000000E8:word32]
	a4 = (word32) (a4_a4 >>u SAR)
	a9 = a9 ^ a10
	a3 = a3 ^ a9
	a9 = 0x402300F0
	SAR = 0x0B
	a7 = a7 + a9
	a2 = (word32) (a7_a7 >>u SAR)
	a9 = a4 ^ a8
	a9 = a11 ^ a9
	SAR = 0x0F
	a3 = (word32) (a3_a3 >>u SAR)
	a9 = a12 + a9
	a9 = a9 + a2
	SAR = 0x02
	a8 = (word32) (a8_a8 >>u SAR)
	a5 = a5 + a9
	SAR = 0x0B
	a9 = Mem0[a1 + 0x000000E0:word32]
	a2 = a8 ^ a7
	a2 = a4 ^ a2
	a9 = a9 ^ a15
	a6 = a6 ^ a9
	a9 = 0x402300F0
	a2 = a3 + a2
	a5 = a5 + a9
	a9 = (word32) (a5_a5 >>u SAR)
	SAR = 0x0F
	a2 = a2 + a9
	a11 = a11 + a2
	a6 = (word32) (a6_a6 >>u SAR)
	Mem0[a1:word32] = a6
	SAR = 0x02
	a2 = Mem0[a1 + 0x000000D0:word32]
	a7 = (word32) (a7_a7 >>u SAR)
	SAR = 0x0B
	a0 = a0 ^ a2
	a9 = a7 ^ a5
	a2 = Mem0[a1 + 0x000000EC:word32]
	a9 = a8 ^ a9
	a2 = a2 ^ a12
	a0 = a0 ^ a2
	a2 = 0x402300F0
	a9 = a6 + a9
	a11 = a11 + a2
	a2 = (word32) (a11_a11 >>u SAR)
	a9 = a9 + a2
	SAR = 0x0F
	a2 = Mem0[a1 + 0x000000D4:word32]
	a4 = a4 + a9
	a0 = (word32) (a0_a0 >>u SAR)
	a9 = 0x402300F0
	SAR = 0x02
	a5 = (word32) (a5_a5 >>u SAR)
	a14 = a14 ^ a2
	SAR = 0x0B
	a4 = a4 + a9
	a2 = a13 ^ a3
	a14 = a14 ^ a2
	a9 = a5 ^ a11
	a9 = a7 ^ a9
	a9 = a0 + a9
	a2 = (word32) (a4_a4 >>u SAR)
	a9 = a9 + a2
	SAR = 0x0F
	a2 = Mem0[a1 + 0x000000DC:word32]
	a8 = a8 + a9
	a14 = (word32) (a14_a14 >>u SAR)
	a9 = Mem0[a1 + 0x000000E4:word32]
	Mem0[a1 + 0x000000F0:word32] = a14
	SAR = 0x02
	a11 = (word32) (a11_a11 >>u SAR)
	a14 = Mem0[a1 + 0x000000D0:word32]
	SAR = 0x0B
	a9 = a6 ^ a9
	a14 = a14 ^ a2
	a9 = a9 ^ a14
	a14 = 0x402300F0
	a2 = a11 ^ a4
	a8 = a8 + a14
	a14 = Mem0[a1 + 0x000000F0:word32]
	a2 = a5 ^ a2
	a14 = a14 + a2
	a2 = (word32) (a8_a8 >>u SAR)
	a14 = a14 + a2
	SAR = 0x0F
	a2 = Mem0[a1 + 0x000000D8:word32]
	a7 = a7 + a14
	a9 = (word32) (a9_a9 >>u SAR)
	a14 = Mem0[a1 + 0x000000D4:word32]
	Mem0[a1 + 0x000000F4:word32] = a9
	SAR = 0x02
	a9 = a0 ^ a10
	a4 = (word32) (a4_a4 >>u SAR)
	a14 = a14 ^ a2
	SAR = 0x0B
	a9 = a9 ^ a14
	a14 = 0x402300F0
	a2 = a4 ^ a8
	a7 = a7 + a14
	a14 = Mem0[a1 + 0x000000F4:word32]
	a2 = a11 ^ a2
	a14 = a14 + a2
	a2 = (word32) (a7_a7 >>u SAR)
	a14 = a14 + a2
	SAR = 0x0F
	a2 = Mem0[a1 + 0x000000E8:word32]
	a5 = a5 + a14
	a9 = (word32) (a9_a9 >>u SAR)
	a14 = Mem0[a1 + 0x000000DC:word32]
	Mem0[a1 + 0x000000FC:word32] = a9
	SAR = 0x02
	a8 = (word32) (a8_a8 >>u SAR)
	a9 = Mem0[a1 + 0x000000F0:word32]
	a14 = a14 ^ a2
	a9 = a9 ^ a15
	a9 = a9 ^ a14
	a14 = 0x402300F0
	SAR = 0x0B
	a5 = a5 + a14
	a2 = (word32) (a5_a5 >>u SAR)
	a14 = Mem0[a1 + 0x000000E0:word32]
	SAR = 0x0F
	a9 = (word32) (a9_a9 >>u SAR)
	Mem0[a1 + 0x00000110:word32] = a9
	a9 = Mem0[a1 + 0x000000D8:word32]
	Mem0[a1 + 0x00000004:word32] = a0
	a9 = a9 ^ a14
	a14 = Mem0[a1 + 0x000000F4:word32]
	Mem0[a1 + 0x000000B8:word32] = a4
	a14 = a14 ^ a12
	a14 = a14 ^ a9
	a9 = Mem0[a1 + 0x000000E0:word32]
	SAR = 0x02
	a9 = a9 ^ a13
	a13 = a13 ^ a10
	a10 = a10 ^ a12
	Mem0[a1 + 0x000000F8:word32] = a10
	a12 = a6 ^ a12
	Mem0[a1 + 0x00000100:word32] = a12
	a10 = Mem0[a1 + 0x00000110:word32]
	a12 = Mem0[a1 + 0x000000FC:word32]
	a6 = a6 ^ a10
	a6 = a6 ^ a9
	a10 = Mem0[a1 + 0x000000FC:word32]
	a9 = a8 ^ a7
	a10 = a10 ^ a3
	a4 = a4 ^ a9
	a7 = (word32) (a7_a7 >>u SAR)
	a9 = Mem0[a1 + 0x000000E4:word32]
	a12 = a12 + a4
	SAR = 0x0B
	a12 = a12 + a2
	a11 = a11 + a12
	a12 = 0x402300F0
	a4 = Mem0[a1 + 0x000000EC:word32]
	a11 = a11 + a12
	a2 = (word32) (a11_a11 >>u SAR)
	a12 = Mem0[a1 + 0x000000E8:word32]
	SAR = 0x0F
	a12 = a12 ^ a4
	a14 = (word32) (a14_a14 >>u SAR)
	Mem0[a1 + 0x00000018:word32] = a14
	SAR = 0x02
	a4 = a4 ^ a9
	a10 = a10 ^ a12
	a9 = a9 ^ a15
	a15 = a15 ^ a3
	a12 = Mem0[a1 + 0x00000110:word32]
	a3 = a0 ^ a3
	a0 = a0 ^ a14
	a0 = a0 ^ a4
	a4 = a7 ^ a5
	a4 = a8 ^ a4
	a5 = (word32) (a5_a5 >>u SAR)
	a12 = a12 + a4
	a4 = Mem0[a1 + 0x000000B8:word32]
	a12 = a12 + a2
	a4 = a4 + a12
	a12 = 0x402300F0
	SAR = 0x0B
	a4 = a4 + a12
	a2 = (word32) (a4_a4 >>u SAR)
	a12 = Mem0[a1 + 0x000000F0:word32]
	Mem0[a1 + 0x00000008:word32] = a12
	SAR = 0x0F
	a10 = (word32) (a10_a10 >>u SAR)
	Mem0[a1 + 0x0000001C:word32] = a10
	a12 = a12 ^ a10
	SAR = 0x02
	a12 = a12 ^ a13
	a13 = a5 ^ a11
	a13 = a7 ^ a13
	a11 = (word32) (a11_a11 >>u SAR)
	a13 = a14 + a13
	a13 = a13 + a2
	a8 = a8 + a13
	a13 = 0x402300F0
	SAR = 0x0B
	a8 = a8 + a13
	a2 = (word32) (a8_a8 >>u SAR)
	a13 = Mem0[a1 + 0x000000F4:word32]
	Mem0[a1 + 0x0000000C:word32] = a13
	SAR = 0x0F
	a6 = (word32) (a6_a6 >>u SAR)
	Mem0[a1 + 0x00000020:word32] = a6
	a13 = a13 ^ a6
	a13 = a13 ^ a9
	SAR = 0x02
	a9 = a11 ^ a4
	a4 = (word32) (a4_a4 >>u SAR)
	a9 = a5 ^ a9
	SAR = 0x0B
	a9 = a10 + a9
	a9 = a9 + a2
	a7 = a7 + a9
	a2 = 0x402300F0
	a9 = a4 ^ a8
	a9 = a11 ^ a9
	a6 = a6 + a9
	a7 = a7 + a2
	a9 = (word32) (a7_a7 >>u SAR)
	a6 = a6 + a9
	SAR = 0x0F
	a9 = Mem0[a1 + 0x000000FC:word32]
	a0 = (word32) (a0_a0 >>u SAR)
	a5 = a5 + a6
	a5 = a5 + a2
	Mem0[a1 + 0x00000024:word32] = a0
	a6 = Mem0[a1 + 0x000000F8:word32]
	Mem0[a1 + 0x00000010:word32] = a9
	SAR = 0x02
	a8 = (word32) (a8_a8 >>u SAR)
	a9 = a9 ^ a0
	a9 = a9 ^ a6
	SAR = 0x0B
	a6 = a8 ^ a7
	a6 = a4 ^ a6
	a0 = a0 + a6
	a6 = (word32) (a5_a5 >>u SAR)
	a0 = a0 + a6
	SAR = 0x0F
	a6 = Mem0[a1 + 0x00000110:word32]
	a11 = a11 + a0
	a12 = (word32) (a12_a12 >>u SAR)
	a0 = Mem0[a1 + 0x00000084:word32]
	a11 = a11 + a2
	Mem0[a1 + 0x00000028:word32] = a12
	Mem0[a1 + 0x00000014:word32] = a6
	SAR = 0x02
	a7 = (word32) (a7_a7 >>u SAR)
	a6 = a6 ^ a12
	a6 = a6 ^ a15
	SAR = 0x0B
	a15 = a7 ^ a5
	a15 = a8 ^ a15
	a12 = a12 + a15
	a15 = (word32) (a11_a11 >>u SAR)
	a12 = a12 + a15
	SAR = 0x0F
	a13 = (word32) (a13_a13 >>u SAR)
	a4 = a4 + a12
	a4 = a4 + a2
	Mem0[a1 + 0x0000002C:word32] = a13
	a14 = a14 ^ a13
	a12 = Mem0[a1 + 0x00000100:word32]
	SAR = 0x02
	a5 = (word32) (a5_a5 >>u SAR)
	a12 = a12 ^ a14
	SAR = 0x0B
	a14 = a5 ^ a11
	a14 = a7 ^ a14
	a13 = a13 + a14
	a14 = (word32) (a4_a4 >>u SAR)
	a13 = a13 + a14
	SAR = 0x0F
	a14 = Mem0[a1 + 0x0000007C:word32]
	a9 = (word32) (a9_a9 >>u SAR)
	a8 = a8 + a13
	a8 = a8 + a2
	Mem0[a1 + 0x00000030:word32] = a9
	a10 = a10 ^ a9
	SAR = 0x02
	a11 = (word32) (a11_a11 >>u SAR)
	a3 = a3 ^ a10
	SAR = 0x0B
	a10 = a11 ^ a4
	a10 = a5 ^ a10
	a9 = a9 + a10
	a10 = (word32) (a8_a8 >>u SAR)
	a9 = a9 + a10
	SAR = 0x0F
	a6 = (word32) (a6_a6 >>u SAR)
	a7 = a7 + a9
	a7 = a7 + a2
	Mem0[a1 + 0x00000034:word32] = a6
	SAR = 0x02
	a4 = (word32) (a4_a4 >>u SAR)
	a9 = a4 ^ a8
	SAR = 0x0B
	a9 = a11 ^ a9
	a6 = a6 + a9
	a9 = (word32) (a7_a7 >>u SAR)
	a6 = a6 + a9
	SAR = 0x0F
	a12 = (word32) (a12_a12 >>u SAR)
	a5 = a5 + a6
	a5 = a5 + a2
	Mem0[a1 + 0x00000038:word32] = a12
	SAR = 0x02
	a8 = (word32) (a8_a8 >>u SAR)
	a13 = a8 ^ a7
	SAR = 0x0B
	a13 = a4 ^ a13
	a12 = a12 + a13
	a13 = (word32) (a5_a5 >>u SAR)
	a12 = a12 + a13
	SAR = 0x0F
	a13 = Mem0[a1 + 0x00000078:word32]
	a3 = (word32) (a3_a3 >>u SAR)
	a11 = a11 + a12
	a11 = a11 + a2
	SAR = 0x02
	Mem0[a1 + 0x0000003C:word32] = a3
	a15 = Mem0[a0 + 0x00000000:word32]
	a10 = Mem0[a0 + 0x00000004:word32]
	a7 = (word32) (a7_a7 >>u SAR)
	a9 = Mem0[a0 + 0x00000010:word32]
	SAR = 0x0B
	a9 = a9 + a8
	a6 = (word32) (a11_a11 >>u SAR)
	a10 = a10 + a11
	Mem0[a0 + 0x00000004:word32] = a10
	SAR = 0x02
	Mem0[a0 + 0x00000010:word32] = a9
	a4 = a4 + a6
	a9 = a7 ^ a5
	a6 = Mem0[a0 + 0x0000000C:word32]
	a5 = (word32) (a5_a5 >>u SAR)
	a8 = a8 ^ a9
	a6 = a6 + a7
	a3 = a3 + a8
	a3 = a3 + a4
	Mem0[a0 + 0x0000000C:word32] = a6
	a4 = Mem0[a0 + 0x00000008:word32]
	a15 = a15 + a3
	a15 = a15 + a2
	a3 = 0
	a2 = a1
	Mem0[a0:word32] = a15
	a4 = a4 + a5
	Mem0[a0 + 0x00000008:word32] = a4
	a15 = Mem0[a1 + 0x00000080:word32]
	a4 = 64
	a0 = 0x4020267C
	v35 = a0
	a0 = 0x402313CC
	call v35 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000074:word32]
	a2 = 0x00000130
	a0 = Mem0[a1 + 0x00000070:word32]
	a1 = a1 + a2
	return
	// succ:  sdk_SHA1Transform_exit
sdk_SHA1Transform_exit:


// sdk_SHA1Init
// Return size: 0
void sdk_SHA1Init()
sdk_SHA1Init_entry:
	// succ:  l402313E0
l402313E0:
	a1 = fp
	a3 = 0x402313DC
	a4 = 0x4022F518
	a5 = 0x4022F514
	a6 = 0x4022F510
	a7 = 0x4022F50C
	a8 = 0
	Mem0[a2 + 0x00000018:word32] = a8
	Mem0[a2 + 0x00000014:word32] = a8
	Mem0[a2:word32] = a7
	Mem0[a2 + 0x00000004:word32] = a6
	Mem0[a2 + 0x00000008:word32] = a5
	Mem0[a2 + 0x0000000C:word32] = a4
	Mem0[a2 + 0x00000010:word32] = a3
	return
	// succ:  sdk_SHA1Init_exit
sdk_SHA1Init_exit:


// sdk_SHA1Update
// Return size: 0
void sdk_SHA1Update()
sdk_SHA1Update_entry:
	// succ:  l40231404
l40231404:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a13
	Mem0[a1 + 0x00000018:word32] = a4
	Mem0[a1 + 0x00000010:word32] = a15
	Mem0[a1 + 0x0000000C:word32] = a14
	Mem0[a1:word32] = a0
	a14 = a2
	a0 = Mem0[a2 + 0x00000018:word32]
	a15 = a4
	a5 = a15 >>u 0x0000001D & 0x00000007
	a2 = Mem0[a2 + 0x00000014:word32]
	a4 = a4 << 29
	a13 = a2 >>u 0x00000003 & 0x0000003F
	a2 = a2 + a15 * 0x00000008
	Mem0[a14 + 0x00000014:word32] = a2
	branch a2 >=u a4 l40231430
	// succ:  l4023142C l40231430
l4023142C:
	a0 = a0 + 1
	Mem0[a14 + 0x00000018:word32] = a0
	// succ:  l40231430
l40231430:
	a4 = a15 + a13
	a5 = a0 + a5
	Mem0[a14 + 0x00000018:word32] = a5
	branch a4 <u 0x00000040 l40231477
	// succ:  l40231439 l40231477
l40231439:
	Mem0[a1 + 0x00000014:word32] = a3
	a12 = 64
	a2 = a14 + a13
	a2 = a2 + 28
	a12 = a12 - a13
	a4 = a12
	a0 = 0x40203130
	v12 = a0
	a0 = 0x4023144D
	call v12 (retsize: 0;)
	a2 = a14
	a3 = a14 + 28
	a0 = 0x40231455
	call fn403300F4 (retsize: 0;)
	a0 = 0x0000007F
	a13 = a0 - a13
	branch a13 >=u a15 l40231470
	// succ:  l4023145E l40231470
l4023145E:
	a3 = Mem0[a1 + 0x00000014:word32]
	a2 = a14
	a3 = a3 + a12
	a0 = 0x40231467
	call fn403300F4 (retsize: 0;)
	a12 = a12 + 64
	a13 = a13 + 64
	branch a13 <u a15 l4023145E
	// succ:  l40231470 l4023145E
l40231470:
	a3 = Mem0[a1 + 0x00000014:word32]
	a13 = 0
	goto l40231479
	// succ:  l40231479
l40231477:
	a12 = 0
	// succ:  l40231479
l40231479:
	a3 = a3 + a12
	a4 = a15 - a12
	a2 = a14 + a13
	a2 = a2 + 28
	a0 = 0x40203130
	v13 = a0
	a0 = 0x40231489
	call v13 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a13 = Mem0[a1 + 0x00000008:word32]
	a14 = Mem0[a1 + 0x0000000C:word32]
	a15 = Mem0[a1 + 0x00000010:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_SHA1Update_exit
sdk_SHA1Update_exit:


// sdk_SHA1Final
// Return size: 0
void sdk_SHA1Final()
sdk_SHA1Final_entry:
	// succ:  l402314A0
l402314A0:
	a1 = fp
	a1 = a1 - 32
	Mem0[a1 + 0x00000018:word32] = a15
	Mem0[a1 + 0x00000010:word32] = a13
	Mem0[a1 + 0x0000000C:word32] = a12
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x00000014:word32] = a14
	a0 = 0
	a14 = -1
	a12 = a3
	a13 = a2
	a3 = a1
	a2 = 1
	// succ:  l402314B9
l402314B9:
	a5 = a0 ^ a14
	a5 = a5 & 0x00000003
	a5 = a5 << 29
	SAR = a5
	branch a0 <u 0x00000004 l402314CA
	// succ:  l402314C8 l402314CA
l402314C8:
	a2 = 0
	// succ:  l402314CA
l402314CA:
	a0 = a0 + 1
	a4 = a12 + a2 * 0x00000004
	a4 = Mem0[a4 + 0x00000014:word32]
	a2 = 1
	a4 = a4 >> SAR
	Mem0[a3:byte] = a4
	a3 = a3 + 1
	branch a0 != 8 l402314B9
	// succ:  l402314DE l402314B9
l402314DE:
	a2 = a12
	a3 = 0x40231498
	a4 = 1
	a0 = 0x402314E8
	call fn40331404 (retsize: 0;)
	a5 = Mem0[a12 + 0x00000014:word32]
	a6 = 0x000001F8
	a5 = a5 & a6
	a6 = 0x000001C0
	branch a5 == a6 l40231510
	// succ:  l402314F6 l40231510
l402314F6:
	a15 = 0x4023149C
	// succ:  l402314F9
l402314F9:
	a2 = a12
	a4 = 1
	a3 = a15
	a0 = 0x40231502
	call fn40331404 (retsize: 0;)
	a7 = Mem0[a12 + 0x00000014:word32]
	a8 = 0x000001F8
	a7 = a7 & a8
	a8 = 0x000001C0
	branch a7 != a8 l402314F9
	// succ:  l40231510 l402314F9
l40231510:
	a2 = a12
	a3 = a1
	a4 = 8
	a0 = 0x40231519
	call fn40331404 (retsize: 0;)
	a0 = 0
	a2 = 20
	// succ:  l4023151D
l4023151D:
	a10 = a0 ^ a14
	a9 = a0 >>u 2
	a9 = a12 + a9 * 0x00000004
	a10 = a10 & 0x00000003
	a0 = a0 + 1
	a10 = a10 << 29
	a9 = Mem0[a9 + 0x00000000:word32]
	SAR = a10
	a9 = a9 >> SAR
	Mem0[a13:byte] = a9
	a13 = a13 + 1
	branch a0 != a2 l4023151D
	// succ:  l4023153E l4023151D
l4023153E:
	a2 = a12 + 28
	a3 = 0
	a4 = 64
	a0 = 0x4020267C
	v18 = a0
	a0 = 0x4023154B
	call v18 (retsize: 0;)
	a2 = a12
	a3 = 0
	a4 = 20
	a0 = 0x4020267C
	v19 = a0
	a0 = 0x40231557
	call v19 (retsize: 0;)
	a2 = a12 + 20
	a3 = 0
	a4 = 8
	a0 = 0x4020267C
	v20 = a0
	a0 = 0x40231564
	call v20 (retsize: 0;)
	a2 = a1
	a3 = 0
	a4 = 8
	a0 = 0x4020267C
	v21 = a0
	a0 = 0x40231570
	call v21 (retsize: 0;)
	a12 = Mem0[a1 + 0x0000000C:word32]
	a13 = Mem0[a1 + 0x00000010:word32]
	a14 = Mem0[a1 + 0x00000014:word32]
	a15 = Mem0[a1 + 0x00000018:word32]
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 32
	return
	// succ:  sdk_SHA1Final_exit
sdk_SHA1Final_exit:


// sdk_rijndaelKeySetupDec
// Return size: 0
void sdk_rijndaelKeySetupDec()
sdk_rijndaelKeySetupDec_entry:
	// succ:  l40231588
l40231588:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2 | a2
	a0 = 0x40231597
	call sdk_rijndaelKeySetupEnc (retsize: 0;)
	a6 = a12
	a3 = 40
	a2 = 0
	a0 = 0x000000A0
	a0 = a12 + a0
	// succ:  l402315A2
l402315A2:
	a3 = a3 - 4
	a2 = a2 + 4
	a11 = Mem0[a6 + 0x00000000:word32]
	a4 = Mem0[a0 + 0x00000000:word32]
	a0 = a0 - 16
	Mem0[a6:word32] = a4
	a10 = Mem0[a0 + 0x00000014:word32]
	Mem0[a0 + 0x00000010:word32] = a11
	a9 = Mem0[a6 + 0x00000004:word32]
	Mem0[a6 + 0x00000004:word32] = a10
	a8 = Mem0[a0 + 0x00000018:word32]
	Mem0[a0 + 0x00000014:word32] = a9
	a7 = Mem0[a6 + 0x00000008:word32]
	Mem0[a6 + 0x00000008:word32] = a8
	a5 = Mem0[a0 + 0x0000001C:word32]
	Mem0[a0 + 0x00000018:word32] = a7
	a4 = Mem0[a6 + 0x0000000C:word32]
	Mem0[a6 + 0x0000000C:word32] = a5
	Mem0[a0 + 0x0000001C:word32] = a4
	a6 = a6 + 16
	branch a2 < a3 l402315A2
	// succ:  l402315D0 l402315A2
l402315D0:
	a2 = 1
	a9 = 0x40231580
	a8 = 0x40231584
	a12 = a12 + 16
	a0 = a12
	// succ:  l402315DD
l402315DD:
	a2 = a2 + 1
	a6 = a12 + 16
	a12 = a12 + 16
	// succ:  l402315E5
l402315E5:
	a10 = Mem0[a0 + 0x00000000:word32]
	SAR = 0x08
	a11 = a10 & 0x000000FF
	a7 = a10 >>u 0x00000008 & 0x000000FF
	a5 = a10 >>u 0x00000018 & 0x000000FF
	a5 = a9 + a5 * 0x00000004
	a7 = a9 + a7 * 0x00000004
	a11 = a9 + a11 * 0x00000004
	a11 = Mem0[a11 + 0x00000000:word32]
	a7 = Mem0[a7 + 0x00000000:word32]
	a5 = Mem0[a5 + 0x00000000:word32]
	a10 = a10 >>u 0x00000010 & 0x000000FF
	a5 = a5 >>u 0x00000008 & 0x000000FF
	a7 = a7 >>u 0x00000008 & 0x000000FF
	a11 = a11 >>u 0x00000008 & 0x000000FF
	a10 = a9 + a10 * 0x00000004
	a10 = Mem0[a10 + 0x00000000:word32]
	a11 = a8 + a11 * 0x00000004
	a7 = a8 + a7 * 0x00000004
	a5 = a8 + a5 * 0x00000004
	a5 = Mem0[a5 + 0x00000000:word32]
	a7 = Mem0[a7 + 0x00000000:word32]
	a11 = Mem0[a11 + 0x00000000:word32]
	a10 = a10 >>u 0x00000008 & 0x000000FF
	a11 = (word32) (a11_a11 >>u SAR)
	a10 = a8 + a10 * 0x00000004
	a10 = Mem0[a10 + 0x00000000:word32]
	SAR = 0x00
	a7 = (word32) (a7_a7 >>u SAR)
	a7 = a7 ^ a11
	SAR = 0x08
	a10 = (word32) (a10_a10 >>u SAR)
	a5 = a5 ^ a10
	a5 = a5 ^ a7
	Mem0[a0:word32] = a5
	a0 = a0 + 4
	branch a0 != a6 l402315E5
	// succ:  l40231649 l402315E5
l40231649:
	a0 = a12
	branch a2 != 10 l402315DD
	// succ:  l4023164E l402315DD
l4023164E:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rijndaelKeySetupDec_exit
sdk_rijndaelKeySetupDec_exit:


// sdk_aes_decrypt_init
// Return size: 0
void sdk_aes_decrypt_init()
sdk_aes_decrypt_init_entry:
	// succ:  l4023165C
l4023165C:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	branch a3 == 16 l40231669
	// succ:  l40231664 l40231669
l40231664:
	a2 = 0
	goto l40231674
	// succ:  l40231674
l40231669:
	a3 = a2
	a2 = 0x40231658
	a0 = 0x40231671
	call fn40331588 (retsize: 0;)
	a2 = 0x40231658
	// succ:  l40231674
l40231674:
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_aes_decrypt_init_exit
sdk_aes_decrypt_init_exit:


// sdk_aes_decrypt
// Return size: 0
void sdk_aes_decrypt()
sdk_aes_decrypt_entry:
	// succ:  l40231AB0
l40231AB0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40231AB8
	call fn40331680 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_aes_decrypt_exit
sdk_aes_decrypt_exit:


// sdk_aes_decrypt_deinit
// Return size: 0
void sdk_aes_decrypt_deinit()
sdk_aes_decrypt_deinit_entry:
	// succ:  l40231AC0
l40231AC0:
	a1 = fp
	a3 = 0
	a4 = 0x000000B0
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x4020267C
	v6 = a0
	a0 = 0x40231AD0
	call v6 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_aes_decrypt_deinit_exit
sdk_aes_decrypt_deinit_exit:


// sdk_rijndaelEncrypt
// Return size: 0
void sdk_rijndaelEncrypt()
sdk_rijndaelEncrypt_entry:
	// succ:  l40231AD8
l40231AD8:
	a1 = fp
	a6 = a4
	a1 = a1 - 32
	Mem0[a1 + 0x00000014:word32] = a15
	Mem0[a1 + 0x00000008:word32] = a12
	a5 = Mem0[a2 + 0x00000008:word32]
	a9 = Mem0[a2 + 0x00000000:word32]
	v11 = Mem0[a3 + 0x00000003:byte]
	a8 = (uint32) v11
	a10 = Mem0[a2 + 0x00000004:word32]
	v15 = Mem0[a3 + 0x00000007:byte]
	a7 = (uint32) v15
	v17 = Mem0[a3 + 0x00000000:byte]
	a11 = (uint32) v17
	Mem0[a1 + 0x00000010:word32] = a14
	Mem0[a1 + 0x00000004:word32] = a0
	Mem0[a1 + 0x0000000C:word32] = a13
	a0 = 5
	v21 = Mem0[a3 + 0x0000000B:byte]
	a4 = (uint32) v21
	v22 = Mem0[a3 + 0x00000001:byte]
	a13 = (uint32) v22
	v23 = Mem0[a3 + 0x0000000D:byte]
	a14 = (uint32) v23
	Mem0[a1:word32] = a6
	a11 = a11 << 8
	v24 = Mem0[a3 + 0x00000009:byte]
	a6 = (uint32) v24
	a14 = a14 << 16
	a7 = a7 ^ a10
	a13 = a13 << 16
	a8 = a8 ^ a9
	a4 = a4 ^ a5
	a6 = a6 << 16
	v25 = Mem0[a3 + 0x00000008:byte]
	a5 = (uint32) v25
	v26 = Mem0[a3 + 0x00000004:byte]
	a9 = (uint32) v26
	a11 = a11 ^ a13
	v27 = Mem0[a3 + 0x00000005:byte]
	a10 = (uint32) v27
	v28 = Mem0[a3 + 0x0000000E:byte]
	a13 = (uint32) v28
	a10 = a10 << 16
	a9 = a9 << 8
	a5 = a5 << 8
	a13 = a13 << 24
	a5 = a5 ^ a6
	a9 = a9 ^ a10
	v29 = Mem0[a3 + 0x0000000A:byte]
	a6 = (uint32) v29
	v30 = Mem0[a3 + 0x0000000C:byte]
	a10 = (uint32) v30
	a6 = a6 << 24
	a5 = a5 ^ a6
	a10 = a10 << 8
	a10 = a10 ^ a14
	a10 = a10 ^ a13
	v31 = Mem0[a3 + 0x00000006:byte]
	a14 = (uint32) v31
	v32 = Mem0[a3 + 0x00000002:byte]
	a13 = (uint32) v32
	a14 = a14 << 24
	a13 = a13 << 24
	a9 = a9 ^ a14
	a7 = a7 ^ a9
	a11 = a11 ^ a13
	a8 = a8 ^ a11
	v33 = Mem0[a3 + 0x0000000F:byte]
	a9 = (uint32) v33
	a11 = Mem0[a2 + 0x0000000C:word32]
	a4 = a4 ^ a5
	a9 = a9 ^ a11
	a3 = a9 ^ a10
	a9 = 0x40231580
	a0 = a0 - 1
	SAR = 0x08
	a11 = a7 & 0x000000FF
	a13 = a3 >>u 0x00000010 & 0x000000FF
	a12 = a8 & 0x000000FF
	a14 = a3 >>u 0x00000008 & 0x000000FF
	a15 = a3 & 0x000000FF
	a5 = a4 >>u 0x00000008 & 0x000000FF
	a10 = a7 >>u 0x00000010 & 0x000000FF
	a6 = a8 >>u 0x00000018 & 0x000000FF
	a6 = a9 + a6 * 0x00000004
	a10 = a9 + a10 * 0x00000004
	a5 = a9 + a5 * 0x00000004
	a15 = a9 + a15 * 0x00000004
	a14 = a9 + a14 * 0x00000004
	a12 = a9 + a12 * 0x00000004
	a13 = a9 + a13 * 0x00000004
	a11 = a9 + a11 * 0x00000004
	a11 = Mem0[a11 + 0x00000000:word32]
	a13 = Mem0[a13 + 0x00000000:word32]
	a12 = Mem0[a12 + 0x00000000:word32]
	a14 = Mem0[a14 + 0x00000000:word32]
	a15 = Mem0[a15 + 0x00000000:word32]
	a5 = Mem0[a5 + 0x00000000:word32]
	a10 = Mem0[a10 + 0x00000000:word32]
	a6 = Mem0[a6 + 0x00000000:word32]
	a10 = (word32) (a10_a10 >>u SAR)
	a6 = a6 ^ a10
	SAR = 0x00
	a10 = a8 >>u 0x00000008 & 0x000000FF
	a5 = (word32) (a5_a5 >>u SAR)
	a8 = a8 >>u 0x00000010 & 0x000000FF
	SAR = 0x08
	a5 = a5 ^ a6
	a10 = a9 + a10 * 0x00000004
	a10 = Mem0[a10 + 0x00000000:word32]
	a6 = a3 >>u 0x00000018 & 0x000000FF
	Mem0[a1 + 0x00000018:word32] = a5
	a15 = (word32) (a15_a15 >>u SAR)
	a8 = a9 + a8 * 0x00000004
	a8 = Mem0[a8 + 0x00000000:word32]
	SAR = 0x08
	a5 = a4 >>u 0x00000010 & 0x000000FF
	a3 = a7 >>u 0x00000018 & 0x000000FF
	a6 = a9 + a6 * 0x00000004
	a6 = Mem0[a6 + 0x00000000:word32]
	a3 = a9 + a3 * 0x00000004
	a5 = a9 + a5 * 0x00000004
	a5 = Mem0[a5 + 0x00000000:word32]
	a3 = Mem0[a3 + 0x00000000:word32]
	a5 = (word32) (a5_a5 >>u SAR)
	a3 = a3 ^ a5
	SAR = 0x00
	a5 = a7 >>u 0x00000008 & 0x000000FF
	a14 = (word32) (a14_a14 >>u SAR)
	a7 = Mem0[a2 + 0x00000014:word32]
	a5 = a9 + a5 * 0x00000004
	a14 = a14 ^ a3
	SAR = 0x08
	a3 = Mem0[a2 + 0x0000001C:word32]
	a12 = (word32) (a12_a12 >>u SAR)
	a5 = Mem0[a5 + 0x00000000:word32]
	SAR = 0x08
	a7 = a7 ^ a12
	a7 = a7 ^ a14
	a13 = (word32) (a13_a13 >>u SAR)
	a12 = a4 >>u 0x00000018 & 0x000000FF
	a12 = a9 + a12 * 0x00000004
	SAR = 0x00
	a10 = (word32) (a10_a10 >>u SAR)
	a12 = Mem0[a12 + 0x00000000:word32]
	SAR = 0x08
	a11 = (word32) (a11_a11 >>u SAR)
	a12 = a12 ^ a13
	a10 = a10 ^ a12
	SAR = 0x08
	a8 = (word32) (a8_a8 >>u SAR)
	a6 = a6 ^ a8
	SAR = 0x00
	a8 = Mem0[a2 + 0x00000010:word32]
	a5 = (word32) (a5_a5 >>u SAR)
	a5 = a5 ^ a6
	SAR = 0x08
	a6 = Mem0[a2 + 0x00000018:word32]
	a8 = a8 ^ a15
	a2 = a2 + 32
	a15 = Mem0[a1 + 0x00000018:word32]
	a6 = a6 ^ a11
	a6 = a6 ^ a10
	a10 = a4 & 0x000000FF
	a10 = a9 + a10 * 0x00000004
	a10 = Mem0[a10 + 0x00000000:word32]
	a8 = a8 ^ a15
	a10 = (word32) (a10_a10 >>u SAR)
	a3 = a3 ^ a10
	a3 = a3 ^ a5
	branch a0 == 0x00000000 l40231D8D
	// succ:  l40231C86 l40231D8D
l40231C86:
	SAR = 0x08
	a11 = a7 & 0x000000FF
	a10 = a8 >>u 0x00000008 & 0x000000FF
	a13 = a3 >>u 0x00000010 & 0x000000FF
	a12 = a8 & 0x000000FF
	a14 = a3 >>u 0x00000008 & 0x000000FF
	a5 = a6 >>u 0x00000010 & 0x000000FF
	a15 = a6 >>u 0x00000008 & 0x000000FF
	Mem0[a1 + 0x0000001C:word32] = a0
	a4 = a7 >>u 0x00000010 & 0x000000FF
	a0 = a8 >>u 0x00000018 & 0x000000FF
	a4 = a9 + a4 * 0x00000004
	a15 = a9 + a15 * 0x00000004
	a5 = a9 + a5 * 0x00000004
	a14 = a9 + a14 * 0x00000004
	a12 = a9 + a12 * 0x00000004
	a13 = a9 + a13 * 0x00000004
	a10 = a9 + a10 * 0x00000004
	a11 = a9 + a11 * 0x00000004
	a11 = Mem0[a11 + 0x00000000:word32]
	a10 = Mem0[a10 + 0x00000000:word32]
	a13 = Mem0[a13 + 0x00000000:word32]
	a12 = Mem0[a12 + 0x00000000:word32]
	a14 = Mem0[a14 + 0x00000000:word32]
	a5 = Mem0[a5 + 0x00000000:word32]
	a15 = Mem0[a15 + 0x00000000:word32]
	a4 = Mem0[a4 + 0x00000000:word32]
	a0 = a9 + a0 * 0x00000004
	a0 = Mem0[a0 + 0x00000000:word32]
	a4 = (word32) (a4_a4 >>u SAR)
	a0 = a0 ^ a4
	SAR = 0x00
	a4 = a8 >>u 0x00000010 & 0x000000FF
	a15 = (word32) (a15_a15 >>u SAR)
	a8 = Mem0[a2 + 0x00000000:word32]
	SAR = 0x08
	a15 = a15 ^ a0
	a4 = a9 + a4 * 0x00000004
	a0 = a3 & 0x000000FF
	a4 = Mem0[a4 + 0x00000000:word32]
	a3 = a3 >>u 0x00000018 & 0x000000FF
	a0 = a9 + a0 * 0x00000004
	a0 = Mem0[a0 + 0x00000000:word32]
	a3 = a9 + a3 * 0x00000004
	a3 = Mem0[a3 + 0x00000000:word32]
	a0 = (word32) (a0_a0 >>u SAR)
	a8 = a8 ^ a0
	SAR = 0x08
	a5 = (word32) (a5_a5 >>u SAR)
	a8 = a8 ^ a15
	SAR = 0x00
	a14 = (word32) (a14_a14 >>u SAR)
	SAR = 0x08
	a12 = (word32) (a12_a12 >>u SAR)
	a0 = Mem0[a1 + 0x0000001C:word32]
	SAR = 0x08
	a13 = (word32) (a13_a13 >>u SAR)
	SAR = 0x00
	a10 = (word32) (a10_a10 >>u SAR)
	SAR = 0x08
	a11 = (word32) (a11_a11 >>u SAR)
	SAR = 0x08
	a4 = (word32) (a4_a4 >>u SAR)
	a3 = a3 ^ a4
	a4 = a7 >>u 0x00000018 & 0x000000FF
	a4 = a9 + a4 * 0x00000004
	a4 = Mem0[a4 + 0x00000000:word32]
	SAR = 0x00
	a4 = a4 ^ a5
	a5 = a7 >>u 0x00000008 & 0x000000FF
	a14 = a14 ^ a4
	a7 = Mem0[a2 + 0x00000004:word32]
	a4 = Mem0[a2 + 0x00000008:word32]
	a5 = a9 + a5 * 0x00000004
	a5 = Mem0[a5 + 0x00000000:word32]
	a4 = a4 ^ a11
	a7 = a7 ^ a12
	a7 = a7 ^ a14
	a5 = (word32) (a5_a5 >>u SAR)
	a12 = a6 >>u 0x00000018 & 0x000000FF
	SAR = 0x08
	a12 = a9 + a12 * 0x00000004
	a12 = Mem0[a12 + 0x00000000:word32]
	a5 = a5 ^ a3
	a12 = a12 ^ a13
	a10 = a10 ^ a12
	a4 = a4 ^ a10
	a10 = a6 & 0x000000FF
	a10 = a9 + a10 * 0x00000004
	a10 = Mem0[a10 + 0x00000000:word32]
	a3 = Mem0[a2 + 0x0000000C:word32]
	a10 = (word32) (a10_a10 >>u SAR)
	a3 = a3 ^ a10
	a3 = a3 ^ a5
	goto l40271B7A
	// succ:  l40271B7A
l40231D8D:
	a11 = Mem0[a1 + 0x00000000:word32]
	a15 = 0x40204518
	a13 = Mem0[a2 + 0x00000000:word32]
	a0 = 0x40204510
	a5 = a7 >>u 0x00000010 & 0x000000FF
	a10 = a8 >>u 0x00000018 & 0x000000FF
	a4 = a6 >>u 0x00000008 & 0x000000FF
	a14 = a3 & 0x000000FF
	a12 = a8 & 0x000000FF
	a12 = a9 + a12 * 0x00000004
	a14 = a9 + a14 * 0x00000004
	a4 = a9 + a4 * 0x00000004
	a10 = a9 + a10 * 0x00000004
	a5 = a9 + a5 * 0x00000004
	a5 = Mem0[a5 + 0x00000000:word32]
	a10 = Mem0[a10 + 0x00000000:word32]
	a4 = Mem0[a4 + 0x00000000:word32]
	a14 = Mem0[a14 + 0x00000000:word32]
	a4 = a4 & a0
	a14 = a14 >>u 0x00000008 & 0x000000FF
	a10 = a10 << 24
	a13 = a13 ^ a14
	a14 = 0x40204514
	a10 = a10 & a15
	a5 = a5 & a14
	a5 = a5 ^ a10
	a4 = a4 ^ a5
	a13 = a13 ^ a4
	Mem0[a11 + 0x00000003:byte] = a13
	a5 = a13 >>u 0x00000018 & 0x000000FF
	a4 = a13 >>u 0x00000010 & 0x0000FFFF
	Mem0[a11 + 0x00000001:byte] = a4
	Mem0[a11:byte] = a5
	a4 = a7 >>u 0x00000018 & 0x000000FF
	a5 = a7 & 0x000000FF
	a5 = a9 + a5 * 0x00000004
	a4 = a9 + a4 * 0x00000004
	a13 = a13 >>u 8
	Mem0[a11 + 0x00000002:byte] = a13
	a10 = Mem0[a2 + 0x00000004:word32]
	a4 = Mem0[a4 + 0x00000000:word32]
	a12 = Mem0[a12 + 0x00000000:word32]
	a13 = a6 >>u 0x00000010 & 0x000000FF
	a13 = a9 + a13 * 0x00000004
	a13 = Mem0[a13 + 0x00000000:word32]
	a12 = a12 >>u 0x00000008 & 0x000000FF
	a4 = a4 << 24
	a4 = a4 & a15
	a10 = a10 ^ a12
	a13 = a13 & a14
	a12 = a3 >>u 0x00000008 & 0x000000FF
	a12 = a9 + a12 * 0x00000004
	a12 = Mem0[a12 + 0x00000000:word32]
	a13 = a13 ^ a4
	a12 = a12 & a0
	a12 = a12 ^ a13
	a10 = a10 ^ a12
	Mem0[a11 + 0x00000007:byte] = a10
	a13 = a10 >>u 0x00000018 & 0x000000FF
	a12 = a10 >>u 0x00000010 & 0x0000FFFF
	Mem0[a11 + 0x00000005:byte] = a12
	Mem0[a11 + 0x00000004:byte] = a13
	a12 = a6 >>u 0x00000018 & 0x000000FF
	a13 = a8 >>u 0x00000010 & 0x000000FF
	a13 = a9 + a13 * 0x00000004
	a12 = a9 + a12 * 0x00000004
	a10 = a10 >>u 8
	Mem0[a11 + 0x00000006:byte] = a10
	a4 = Mem0[a2 + 0x00000008:word32]
	a5 = Mem0[a5 + 0x00000000:word32]
	a12 = Mem0[a12 + 0x00000000:word32]
	a10 = a3 >>u 0x00000010 & 0x000000FF
	a10 = a9 + a10 * 0x00000004
	a10 = Mem0[a10 + 0x00000000:word32]
	a12 = a12 << 24
	a5 = a5 >>u 0x00000008 & 0x000000FF
	a4 = a4 ^ a5
	a12 = a12 & a15
	a5 = a8 >>u 0x00000008 & 0x000000FF
	a10 = a10 & a14
	a10 = a10 ^ a12
	a5 = a9 + a5 * 0x00000004
	a5 = Mem0[a5 + 0x00000000:word32]
	a12 = a7 >>u 0x00000008 & 0x000000FF
	a12 = a9 + a12 * 0x00000004
	a5 = a5 & a0
	a5 = a5 ^ a10
	a4 = a4 ^ a5
	Mem0[a11 + 0x0000000B:byte] = a4
	a10 = a4 >>u 0x00000018 & 0x000000FF
	a5 = a4 >>u 0x00000010 & 0x0000FFFF
	Mem0[a11 + 0x00000009:byte] = a5
	Mem0[a11 + 0x00000008:byte] = a10
	a4 = a4 >>u 8
	Mem0[a11 + 0x0000000A:byte] = a4
	a10 = Mem0[a2 + 0x0000000C:word32]
	a13 = Mem0[a13 + 0x00000000:word32]
	a12 = Mem0[a12 + 0x00000000:word32]
	a13 = a13 & a14
	a12 = a12 & a0
	a14 = a3 >>u 0x00000018 & 0x000000FF
	a0 = a6 & 0x000000FF
	a0 = a9 + a0 * 0x00000004
	a14 = a9 + a14 * 0x00000004
	a14 = Mem0[a14 + 0x00000000:word32]
	a0 = Mem0[a0 + 0x00000000:word32]
	a14 = a14 << 24
	a0 = a0 >>u 0x00000008 & 0x000000FF
	a10 = a10 ^ a0
	a14 = a14 & a15
	a0 = Mem0[a1 + 0x00000004:word32]
	a13 = a13 ^ a14
	a15 = Mem0[a1 + 0x00000014:word32]
	a14 = Mem0[a1 + 0x00000010:word32]
	a12 = a12 ^ a13
	a10 = a10 ^ a12
	Mem0[a11 + 0x0000000F:byte] = a10
	a13 = a10 >>u 0x00000018 & 0x000000FF
	a12 = a10 >>u 0x00000010 & 0x0000FFFF
	Mem0[a11 + 0x0000000D:byte] = a12
	Mem0[a11 + 0x0000000C:byte] = a13
	a12 = Mem0[a1 + 0x00000008:word32]
	a13 = Mem0[a1 + 0x0000000C:word32]
	a10 = a10 >>u 8
	Mem0[a11 + 0x0000000E:byte] = a10
	a1 = a1 + 32
	return
	// succ:  sdk_rijndaelEncrypt_exit
l40271B7A:
sdk_rijndaelEncrypt_exit:


// sdk_aes_encrypt_init
// Return size: 0
void sdk_aes_encrypt_init()
sdk_aes_encrypt_init_entry:
	// succ:  l40231EF0
l40231EF0:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1 + 0x00000008:word32] = a0
	Mem0[a1 + 0x00000004:word32] = a2
	branch a3 != 16 l40231F07
	// succ:  l40231EFA l40231F07
l40231EFA:
	a2 = 0x000000B0
	a0 = 0x402034C4
	v6 = a0
	a0 = 0x40231F03
	call v6 (retsize: 0;)
	Mem0[a1:word32] = a2
	branch a2 != 0x00000000 l40231F0C
	// succ:  l40231F07 l40231F0C
l40231F07:
	a2 = 0
	goto l40231F15
	// succ:  l40231F15
l40231F0C:
	a3 = Mem0[a1 + 0x00000004:word32]
	a0 = 0x40231F12
	call sdk_rijndaelKeySetupEnc (retsize: 0;)
	a2 = Mem0[a1 + 0x00000000:word32]
	// succ:  l40231F15
l40231F15:
	a0 = Mem0[a1 + 0x00000008:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_aes_encrypt_init_exit
sdk_aes_encrypt_init_exit:


// sdk_aes_encrypt
// Return size: 0
void sdk_aes_encrypt()
sdk_aes_encrypt_entry:
	// succ:  l40231F20
l40231F20:
	a1 = fp
	a1 = a1 - 16
	Mem0[a1:word32] = a0
	a0 = 0x40231F28
	call fn40331AD8 (retsize: 0;)
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_aes_encrypt_exit
sdk_aes_encrypt_exit:


// sdk_aes_encrypt_deinit
// Return size: 0
void sdk_aes_encrypt_deinit()
sdk_aes_encrypt_deinit_entry:
	// succ:  l40231F30
l40231F30:
	a1 = fp
	a3 = 0
	a4 = 0x000000B0
	a1 = a1 - 16
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	a12 = a2
	a0 = 0x4020267C
	v8 = a0
	a0 = 0x40231F44
	call v8 (retsize: 0;)
	a2 = a12
	a0 = 0x402034CC
	v9 = a0
	a0 = 0x40231F4C
	call v9 (retsize: 0;)
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_aes_encrypt_deinit_exit
sdk_aes_encrypt_deinit_exit:


// sdk_rijndaelKeySetupEnc
// Return size: 0
void sdk_rijndaelKeySetupEnc()
sdk_rijndaelKeySetupEnc_entry:
	// succ:  l40231F5C
l40231F5C:
	a1 = fp
	a8 = 0x40204514
	a7 = 0x40204510
	a6 = 0x40204518
	a1 = a1 - 16
	a11 = 0x40231580
	v8 = Mem0[a3 + 0x00000003:byte]
	a5 = (uint32) v8
	v11 = Mem0[a3 + 0x00000002:byte]
	a4 = (uint32) v11
	v13 = Mem0[a3 + 0x00000000:byte]
	a9 = (uint32) v13
	Mem0[a1 + 0x00000004:word32] = a12
	Mem0[a1:word32] = a0
	v16 = Mem0[a3 + 0x00000001:byte]
	a12 = (uint32) v16
	a0 = 0x40231F58
	a9 = a9 << 8
	a4 = a4 << 24
	a10 = a0 + 10
	a5 = a5 ^ a4
	a12 = a12 << 16
	a9 = a9 ^ a12
	a5 = a5 ^ a9
	Mem0[a2:word32] = a5
	v19 = Mem0[a3 + 0x00000007:byte]
	a9 = (uint32) v19
	v20 = Mem0[a3 + 0x00000006:byte]
	a5 = (uint32) v20
	v21 = Mem0[a3 + 0x00000005:byte]
	a4 = (uint32) v21
	v22 = Mem0[a3 + 0x00000004:byte]
	a12 = (uint32) v22
	a4 = a4 << 16
	a12 = a12 << 8
	a5 = a5 << 24
	a9 = a9 ^ a5
	a12 = a12 ^ a4
	a9 = a9 ^ a12
	Mem0[a2 + 0x00000004:word32] = a9
	v23 = Mem0[a3 + 0x0000000B:byte]
	a12 = (uint32) v23
	v24 = Mem0[a3 + 0x0000000A:byte]
	a9 = (uint32) v24
	v25 = Mem0[a3 + 0x00000009:byte]
	a5 = (uint32) v25
	v26 = Mem0[a3 + 0x00000008:byte]
	a4 = (uint32) v26
	a5 = a5 << 16
	a4 = a4 << 8
	a9 = a9 << 24
	a12 = a12 ^ a9
	a4 = a4 ^ a5
	a12 = a12 ^ a4
	Mem0[a2 + 0x00000008:word32] = a12
	v27 = Mem0[a3 + 0x0000000F:byte]
	a4 = (uint32) v27
	v28 = Mem0[a3 + 0x0000000E:byte]
	a12 = (uint32) v28
	v29 = Mem0[a3 + 0x0000000D:byte]
	a9 = (uint32) v29
	v30 = Mem0[a3 + 0x0000000C:byte]
	a5 = (uint32) v30
	a9 = a9 << 16
	a5 = a5 << 8
	a12 = a12 << 24
	a4 = a4 ^ a12
	a5 = a5 ^ a9
	a4 = a4 ^ a5
	Mem0[a2 + 0x0000000C:word32] = a4
	// succ:  l40231FF4
l40231FF4:
	a4 = Mem0[a2 + 0x0000000C:word32]
	v31 = Mem0[a0 + 0x00000000:byte]
	a9 = (uint32) v31
	a0 = a0 + 1
	a9 = a9 << 8
	a3 = a4 & 0x000000FF
	a12 = a4 >>u 0x00000018 & 0x000000FF
	a5 = a4 >>u 0x00000010 & 0x000000FF
	a5 = a11 + a5 * 0x00000004
	a12 = a11 + a12 * 0x00000004
	a3 = a11 + a3 * 0x00000004
	a3 = Mem0[a3 + 0x00000000:word32]
	a12 = Mem0[a12 + 0x00000000:word32]
	a5 = Mem0[a5 + 0x00000000:word32]
	a12 = a12 >>u 0x00000008 & 0x000000FF
	a5 = a5 << 24
	a9 = a9 ^ a12
	a12 = a4 >>u 0x00000008 & 0x000000FF
	a12 = a11 + a12 * 0x00000004
	a12 = Mem0[a12 + 0x00000000:word32]
	a3 = a3 & a7
	a12 = a12 & a8
	a3 = a3 ^ a12
	a12 = Mem0[a2 + 0x00000000:word32]
	a5 = a5 & a6
	a12 = a12 ^ a5
	a12 = a12 ^ a3
	a5 = Mem0[a2 + 0x00000004:word32]
	a3 = Mem0[a2 + 0x00000008:word32]
	a9 = a9 ^ a12
	Mem0[a2 + 0x00000010:word32] = a9
	a5 = a5 ^ a9
	a3 = a3 ^ a5
	Mem0[a2 + 0x00000014:word32] = a5
	Mem0[a2 + 0x00000018:word32] = a3
	a3 = a3 ^ a4
	Mem0[a2 + 0x0000001C:word32] = a3
	a2 = a2 + 16
	branch a0 != a10 l40231FF4
	// succ:  l40232059 l40231FF4
l40232059:
	a12 = Mem0[a1 + 0x00000004:word32]
	a0 = Mem0[a1 + 0x00000000:word32]
	a1 = a1 + 16
	return
	// succ:  sdk_rijndaelKeySetupEnc_exit
sdk_rijndaelKeySetupEnc_exit:


// sdk_eloop_cancel_timeout
// Return size: 0
void sdk_eloop_cancel_timeout()
sdk_eloop_cancel_timeout_entry:
	// succ:  l402323F0
l402323F0:
	a1 = fp
	a2 = 0
	return
	// succ:  sdk_eloop_cancel_timeout_exit
sdk_eloop_cancel_timeout_exit:


// sdk_eloop_register_timeout
// Return size: 0
void sdk_eloop_register_timeout()
sdk_eloop_register_timeout_entry:
	// succ:  l402323F4
l402323F4:
	a1 = fp
	a2 = 0
	return
	// succ:  sdk_eloop_register_timeout_exit
sdk_eloop_register_timeout_exit:


// sdk_rc4_skip
// Return size: 0
void sdk_rc4_skip()
sdk_rc4_skip_entry:
	// succ:  l402323F8
l402323F8:
	a1 = fp
	a10 = 0
	a9 = 0
	a7 = 0x00000120
	a1 = a1 - a7
	Mem0[a1 + 0x00000108:word32] = a12
	Mem0[a1 + 0x00000110:word32] = a14
	Mem0[a1 + 0x0000010C:word32] = a13
	Mem0[a1 + 0x00000100:word32] = a5
	Mem0[a1 + 0x00000104:word32] = a0
	a0 = a1
	// succ:  l40232413
l40232413:
	Mem0[a0:byte] = a10
	a0 = a0 + 1
	a10 = a10 + 1
	branch a10 != 256 l40232413
	// succ:  l4023241D l40232413
l4023241D:
	a5 = 0
	a13 = a1
	a14 = a1 + 0x00000100
	a0 = a1
	a10 = 0
	a12 = a2 + a10
	// succ:  l4023242A
l4023242A:
	v13 = Mem0[a0 + 0x00000000:byte]
	a11 = (uint32) v13
	v14 = Mem0[a12 + 0x00000000:byte]
	a12 = (uint32) v14
	a9 = a11 + a9
	a9 = a12 + a9
	a12 = a10 + 1
	a9 = a9 & 0x000000FF
	a10 = a5
	a7 = a9 + a13
	v16 = Mem0[a7 + 0x00000000:byte]
	a8 = (uint32) v16
	Mem0[a0:byte] = a8
	Mem0[a7:byte] = a11
	a0 = a0 + 1
	branch a12 >=u a3 l4023244D
	// succ:  l4023244B l4023244D
l4023244B:
	a10 = a12
	// succ:  l4023244D
l4023244D:
	a12 = a2 + a10
	branch a0 != a14 l4023242A
	// succ:  l40232452 l4023242A
l40232452:
	a5 = Mem0[a1 + 0x00000100:word32]
	branch a4 == 0x00000000 l4023247F
	// succ:  l40232457 l4023247F
l40232457:
	a10 = 0
	a9 = 0
	a0 = 0
	// succ:  l4023245D
l4023245D:
	a10 = a10 + 1
	a10 = a10 & 0x000000FF
	a2 = a10 + a13
	v19 = Mem0[a2 + 0x00000000:byte]
	a11 = (uint32) v19
	a0 = a0 + 1
	a9 = a11 + a9
	a9 = a9 & 0x000000FF
	a12 = a9 + a13
	v20 = Mem0[a12 + 0x00000000:byte]
	a14 = (uint32) v20
	Mem0[a2:byte] = a14
	Mem0[a12:byte] = a11
	branch a4 != a0 l4023245D
	// succ:  l4023247C l4023245D
l4023247C:
	goto l40232483
	// succ:  l40232483
l4023247F:
	a9 = 0
	a10 = 0
	// succ:  l40232483
l40232483:
	branch a6 == 0x00000000 l402324BE
	// succ:  l40232485 l402324BE
l40232485:
	a0 = 0
	// succ:  l40232487
l40232487:
	a10 = a10 + 1
	a10 = a10 & 0x000000FF
	a12 = a10 + a13
	v22 = Mem0[a12 + 0x00000000:byte]
	a14 = (uint32) v22
	a9 = a14 + a9
	a9 = a9 & 0x000000FF
	a2 = a9 + a13
	v23 = Mem0[a2 + 0x00000000:byte]
	a3 = (uint32) v23
	Mem0[a12:byte] = a3
	Mem0[a2:byte] = a14
	v24 = Mem0[a12 + 0x00000000:byte]
	a12 = (uint32) v24
	v25 = Mem0[a5 + 0x00000000:byte]
	a11 = (uint32) v25
	a12 = a12 + a14
	a12 = a12 & 0x000000FF
	a12 = a13 + a12
	v26 = Mem0[a12 + 0x00000000:byte]
	a12 = (uint32) v26
	a0 = a0 + 1
	a11 = a11 ^ a12
	Mem0[a5:byte] = a11
	a5 = a5 + 1
	branch a6 != a0 l40232487
	// succ:  l402324BE l40232487
l402324BE:
	a2 = 0
	a12 = Mem0[a1 + 0x00000108:word32]
	a13 = Mem0[a1 + 0x0000010C:word32]
	a14 = Mem0[a1 + 0x00000110:word32]
	a3 = 0x00000120
	a0 = Mem0[a1 + 0x00000104:word32]
	a1 = a1 + a3
	return
	// succ:  sdk_rc4_skip_exit
sdk_rc4_skip_exit:


// fn402426DC
// Return size: 0
void fn402426DC()
fn402426DC_entry:
	// succ:  l402426DC
l402426DC:
	a1 = v3
fn402426DC_exit:


