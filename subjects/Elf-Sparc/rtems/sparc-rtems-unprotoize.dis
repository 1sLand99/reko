// _start
// Return size: 0
define _start
_start_entry:
	// succ:  l00011498
l00011498:
	sp = fp
	i6 = 0x00000000 | 0x00000000
	l0 = Mem0[sp + 64:word32]
	l1 = sp + 0x00000044
	sp = sp - 0x00000020
	g0 = 0x00000000 | g1
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011498_ds_t
	// succ:  l00011498_ds_f l00011498_ds_t
l00011498_ds_f:
	o0 = 0x00000000 | g1
	goto l000114B4
	// succ:  l000114B4
l00011498_ds_t:
	o0 = 0x00000000 | g1
	goto l000114BC
	// succ:  l000114BC
l000114B4:
	call atexit (retsize: 0;)
l000114BC:
	o0 = 0x00016C00
	o0 = o0 | 0x000002E4
	call atexit (retsize: 0;)
	call _init (retsize: 0;)
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l1
	o2 = l0 << 0x00000002
	o2 = o2 + 0x00000004
	o2 = l1 + o2
	o3 = 0x0002B400
	o3 = o3 | 0x0000000C
	Mem0[o3:word32] = o2
	call main (retsize: 0;)
	call exit (retsize: 0;)
	call _exit (retsize: 0;)
_start_exit:


// fn0001150C
// Return size: 0
define fn0001150C
fn0001150C_entry:
	// succ:  l0001150C
l0001150C:
	sp = fp
	l7 = o7 + l7
	return
	// succ:  fn0001150C_exit
fn0001150C_exit:


// __do_global_dtors_aux
// Return size: 0
define __do_global_dtors_aux
__do_global_dtors_aux_entry:
	// succ:  l00011514
l00011514:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00000000
	l7 = 0x00016400
	l7 = l7 + 0x00000260
	call fn0001150C (retsize: 0;)
	o0 = o0 | 0x00000008
	o1 = Mem0[l7 + o0:word32]
	o2 = Mem0[o1:word32]
	g0 = o2 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011514_ds_t
	// succ:  l00011514_ds_f l00011514_ds_t
l00011514_ds_f:
	o0 = 0x00000000
	goto l00011540
	// succ:  l00011540
l00011514_ds_t:
	o0 = 0x00000000
	goto l000115C4
	// succ:  l000115C4
l00011540:
	o0 = o0 | 0x00000004
	o2 = Mem0[l7 + o0:word32]
	o1 = Mem0[o2:word32]
	o0 = Mem0[o1:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011540_ds_t
	// succ:  l00011540_ds_f l00011540_ds_t
l00011540_ds_f:
	o0 = 0x00000000
	goto l0001155C
	// succ:  l0001155C
l00011540_ds_t:
	o0 = 0x00000000
	goto l00011590
	// succ:  l00011590
l0001155C:
	l0 = 0x00000000 | o2
	o0 = Mem0[l0:word32]
	o0 = o0 + 0x00000004
	// succ:  l00011568
l00011568:
	Mem0[l0:word32] = o0
	o1 = Mem0[o0 + -4:word32]
	o7 = 0x00011570
	call o1 + 0x00000000 (retsize: 0;)
	o0 = Mem0[l0:word32]
	o1 = Mem0[o0:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011568_ds_t
	// succ:  l00011568_ds_f l00011568_ds_t
l00011568_ds_f:
	o0 = o0 + 0x00000004
	goto l0001158C
	// succ:  l0001158C
l00011568_ds_t:
	o0 = o0 + 0x00000004
	goto l00011568
	// succ:  l00011568
l0001158C:
	o0 = 0x00000000
	// succ:  l00011590
l00011590:
	o0 = o0 | 0x0000001C
	o1 = Mem0[l7 + o0:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011590_ds_t
	// succ:  l00011590_ds_f l00011590_ds_t
l00011590_ds_f:
	o1 = 0x00000000
	goto l000115A4
	// succ:  l000115A4
l00011590_ds_t:
	o1 = 0x00000000
	goto l000115B0
	// succ:  l000115B0
l000115A4:
	o1 = o1 | 0x0000000C
	o0 = Mem0[l7 + o1:word32]
	call fn00027C8C (retsize: 0;)
l000115B0:
	o0 = 0x00000000
	o0 = o0 | 0x00000008
	o2 = Mem0[l7 + o0:word32]
	o1 = 0x00000000 | 0x00000001
	Mem0[o2:word32] = o1
	// succ:  l000115C4
l000115C4:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  __do_global_dtors_aux_exit
__do_global_dtors_aux_exit:


// fini_dummy
// Return size: 0
define fini_dummy
fini_dummy_entry:
	// succ:  l000115CC
l000115CC:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  fini_dummy_exit
fini_dummy_exit:


// frame_dummy
// Return size: 0
define frame_dummy
frame_dummy_entry:
	// succ:  l000115D8
l000115D8:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00000000
	l7 = 0x00016400
	l7 = l7 + 0x0000019C
	call fn0001150C (retsize: 0;)
	o0 = o0 | 0x00000018
	o1 = Mem0[l7 + o0:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000115D8_ds_t
	// succ:  l000115D8_ds_f l000115D8_ds_t
l000115D8_ds_f:
	o1 = 0x00000000
	goto l00011600
	// succ:  l00011600
l000115D8_ds_t:
	o1 = 0x00000000
	goto l00011618
	// succ:  l00011618
l00011600:
	o1 = o1 | 0x0000000C
	o2 = 0x00000000
	o0 = Mem0[l7 + o1:word32]
	o2 = o2 | 0x00000010
	o1 = Mem0[l7 + o2:word32]
	call fn00027C98 (retsize: 0;)
l00011618:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  frame_dummy_exit
frame_dummy_exit:


// init_dummy
// Return size: 0
define init_dummy
init_dummy_entry:
	// succ:  l00011620
l00011620:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  init_dummy_exit
init_dummy_exit:


// notice
// Return size: 0
define notice
notice_entry:
	// succ:  l0001162C
l0001162C:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x0002B400
	Mem0[i6 + 72:word32] = i1
	Mem0[i6 + 76:word32] = i2
	Mem0[i6 + 80:word32] = i3
	Mem0[i6 + 84:word32] = i4
	Mem0[i6 + 88:word32] = i5
	o0 = o0 | 0x00000240
	o1 = 0x00000000 | i0
	o2 = i6 + 0x00000048
	call vfprintf (retsize: 0;)
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  notice_exit
notice_exit:


// xstrerror
// Return size: 0
define xstrerror
xstrerror_entry:
	// succ:  l00011660
l00011660:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00000000 | i0
	call strerror (retsize: 0;)
	v19 = 0x00000000 + o0
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	o0 = v19
	return
	// succ:  xstrerror_exit
xstrerror_exit:


// xmalloc
// Return size: 0
define xmalloc
xmalloc_entry:
	// succ:  l00011674
l00011674:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00000000 | i0
	call malloc (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011674_ds_t
	// succ:  l00011674_ds_f l00011674_ds_t
l00011674_ds_f:
	goto l0001168C
	// succ:  l0001168C
l00011674_ds_t:
	goto l000116A8
	// succ:  l000116A8
l0001168C:
	o0 = 0x00028000
	o1 = Mem0[o0 + 336:word32]
	o0 = 0x00017000
	o0 = o0 | 0x000000A8
	call notice (retsize: 0;)
	o0 = 0x00000000 | 0x00000021
	call exit (retsize: 0;)
l000116A8:
	v22 = 0x00000000 + o0
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	o0 = v22
	return
	// succ:  xmalloc_exit
xmalloc_exit:


// xrealloc
// Return size: 0
define xrealloc
xrealloc_entry:
	// succ:  l000116B0
l000116B0:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = i0 | 0x00000000
	NZVC = cond(o0)
	branch Test(EQ,Z) l000116B0_ds_t
	// succ:  l000116B0_ds_f l000116B0_ds_t
l000116B0_ds_f:
	o1 = 0x00000000 | i1
	goto l000116C0
	// succ:  l000116C0
l000116B0_ds_t:
	o1 = 0x00000000 | i1
	goto l000116D0
	// succ:  l000116D0
l000116C0:
	call realloc (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	goto l000116DC
	// succ:  l000116DC
l000116D0:
	o0 = 0x00000000 | o1
	call malloc (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	// succ:  l000116DC
l000116DC:
	branch Test(NE,Z) l000116DC_ds_t
	// succ:  l000116DC_ds_f l000116DC_ds_t
l000116DC_ds_f:
	goto l000116E4
	// succ:  l000116E4
l000116DC_ds_t:
	goto l00011700
	// succ:  l00011700
l000116E4:
	o0 = 0x00028000
	o1 = Mem0[o0 + 336:word32]
	o0 = 0x00017000
	o0 = o0 | 0x000000A8
	call notice (retsize: 0;)
	o0 = 0x00000000 | 0x00000021
	call exit (retsize: 0;)
l00011700:
	v22 = 0x00000000 + o0
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	o0 = v22
	return
	// succ:  xrealloc_exit
xrealloc_exit:


// xfree
// Return size: 0
define xfree
xfree_entry:
	// succ:  l00011708
l00011708:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = i0 | 0x00000000
	NZVC = cond(o0)
	branch Test(EQ,Z) l00011708_ds_t
	// succ:  l00011708_ds_f l00011708_ds_t
l00011708_ds_f:
	goto l00011718
	// succ:  l00011718
l00011708_ds_t:
	goto l00011720
	// succ:  l00011720
l00011718:
	call free (retsize: 0;)
l00011720:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  xfree_exit
xfree_exit:


// savestring
// Return size: 0
define savestring
savestring_entry:
	// succ:  l00011728
l00011728:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	l0 = 0x00000000 | i0
	o0 = i1 + 0x00000001
	call xmalloc (retsize: 0;)
	i0 = 0x00000000 | o0
	o1 = 0x00000000 | l0
	call strcpy (retsize: 0;)
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  savestring_exit
savestring_exit:


// savestring2
// Return size: 0
define savestring2
savestring2_entry:
	// succ:  l0001174C
l0001174C:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = i1 + i3
	l0 = 0x00000000 | i0
	o0 = o0 + 0x00000001
	call xmalloc (retsize: 0;)
	i0 = 0x00000000 | o0
	o1 = 0x00000000 | l0
	call strcpy (retsize: 0;)
	o0 = i0 + i1
	o1 = 0x00000000 | i2
	call strcpy (retsize: 0;)
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  savestring2_exit
savestring2_exit:


// fancy_abort
// Return size: 0
define fancy_abort
fancy_abort_entry:
	// succ:  l00011780
l00011780:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00028000
	o1 = Mem0[o0 + 336:word32]
	o0 = 0x00017000
	o0 = o0 | 0x000000C8
	call notice (retsize: 0;)
	o0 = 0x00000000 | 0x00000021
	call exit (retsize: 0;)
fancy_abort_exit:


// dupnstr
// Return size: 0
define dupnstr
dupnstr_entry:
	// succ:  l000117A0
l000117A0:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	l0 = 0x00000000 | i0
	o0 = i1 + 0x00000001
	call xmalloc (retsize: 0;)
	i0 = 0x00000000 | o0
	o1 = 0x00000000 | l0
	o2 = 0x00000000 | i1
	call strncpy (retsize: 0;)
	Mem0[i0 + i1:byte] = (byte) 0x00000000
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  dupnstr_exit
dupnstr_exit:


// substr
// Return size: 0
define substr
substr_entry:
	// succ:  l000117CC
l000117CC:
	sp = fp
	g2 = (int32) Mem0[o0:int8]
	goto l00011810
	// succ:  l00011810
l000117D4:
	g3 = (int32) Mem0[o3:int8]
	g0 = g3 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000117D4_ds_t
	// succ:  l000117D4_ds_f l000117D4_ds_t
l000117D4_ds_f:
	o2 = 0x00000000 | o0
	goto l000117E4
	// succ:  l000117E4
l000117D4_ds_t:
	o2 = 0x00000000 | o0
	goto l00011820
	// succ:  l00011820
l000117E4:
	g2 = (int32) Mem0[o2:int8]
	g0 = g2 - g3
	NZVC = cond(g0)
	branch Test(NE,Z) l000117E4_ds_t
	// succ:  l000117E4_ds_f l000117E4_ds_t
l000117E4_ds_f:
	o3 = o3 + 0x00000001
	goto l000117F4
	// succ:  l000117F4
l000117E4_ds_t:
	o3 = o3 + 0x00000001
	goto l00011808
	// succ:  l00011808
l000117F4:
	g3 = (int32) Mem0[o3:int8]
	g0 = g3 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000117F4_ds_t
	// succ:  l000117F4_ds_f l000117F4_ds_t
l000117F4_ds_f:
	o2 = o2 + 0x00000001
	goto l00011804
	// succ:  l00011804
l000117F4_ds_t:
	o2 = o2 + 0x00000001
	goto l000117E4
	// succ:  l000117E4
l00011804:
	o0 = o0 + 0x00000001
	goto l00011820
	// succ:  l00011820
l00011808:
	o0 = o0 + 0x00000001
l00011810:
	g0 = g2 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011810_ds_t
	// succ:  l00011810_ds_f l00011810_ds_t
l00011810_ds_f:
	o3 = 0x00000000 | o1
	goto l0001181C
	// succ:  l0001181C
l00011810_ds_t:
	o3 = 0x00000000 | o1
	goto l000117D4
	// succ:  l000117D4
l0001181C:
	o0 = 0x00000000 | 0x00000000
	// succ:  l00011820
l00011820:
	return
	// succ:  substr_exit
substr_exit:


// safe_read
// Return size: 0
define safe_read
safe_read_entry:
	// succ:  l00011828
l00011828:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	l2 = 0x00000000 | i0
	l0 = 0x00000000 | i2
	l1 = 0x0002B400
	goto l00011840
	// succ:  l00011840
l0001183C:
	i1 = i1 + i0
	// succ:  l00011840
l00011840:
	g0 = l0 - 0x00000000
	NZVC = cond(g0)
	goto l00011844
	// succ:  l00011844
l00011840_ds_f:
	o0 = 0x00000000 | l2
	goto l0001184C
	// succ:  l0001184C
l00011840_ds_t:
	o0 = 0x00000000 | l2
	goto l0001187C
	// succ:  l0001187C
l00011844:
	branch Test(LE,NZV) l00011840_ds_t
	goto l00011840_ds_f
	// succ:  l00011840_ds_f l00011840_ds_t
l0001184C:
	o1 = 0x00000000 | i1
	o2 = 0x00000000 | l0
	call read (retsize: 0;)
	i0 = o0 | 0x00000000
	NZVC = cond(i0)
	branch Test(GE,NV) l0001184C_ds_t
	// succ:  l0001184C_ds_f l0001184C_ds_t
l0001184C_ds_f:
	o0 = Mem0[l1 + 864:word32]
	goto l00011864
	// succ:  l00011864
l0001184C_ds_t:
	o0 = Mem0[l1 + 864:word32]
	goto l00011874
	// succ:  l00011874
l00011864:
	g0 = o0 - 0x00000004
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011864_ds_t
	// succ:  l00011864_ds_f l00011864_ds_t
l00011864_ds_f:
	g0 = l0 - 0x00000000
	NZVC = cond(g0)
	goto l00011870
	// succ:  l00011870
l00011864_ds_t:
	g0 = l0 - 0x00000000
	NZVC = cond(g0)
	goto l00011844
	// succ:  l00011844
l00011870:
	branch Test(NE,Z) l00011874_ds_t
l00011874:
	branch Test(NE,Z) l00011874_ds_t
	// succ:  l0001187C l00011874_ds_t l00011880 l00011874_ds_t
l00011874_ds_t:
	l0 = l0 - i0
	goto l0001183C
	// succ:  l0001183C
l00011874_ds_t:
	l0 = l0 - i0
	goto l0001183C
	// succ:  l0001183C
l0001187C:
	i0 = i2 - l0
	i0 = i2 - l0
	// succ:  l00011880
l00011880:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  safe_read_exit
safe_read_exit:


// safe_write
// Return size: 0
define safe_write
safe_write_entry:
	// succ:  l00011888
l00011888:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	g0 = i2 - 0x00000000
	NZVC = cond(g0)
	branch Test(LE,NZV) l00011888_ds_t
	// succ:  l00011888_ds_f l00011888_ds_t
l00011888_ds_f:
	l1 = 0x0002B400
	goto l00011898
	// succ:  l00011898
l00011888_ds_t:
	l1 = 0x0002B400
	goto l0001190C
	// succ:  l0001190C
l00011898:
	l3 = 0x00017000
	l0 = 0x00028000
	o0 = 0x00000000 | i0
	goto l000118A4
	// succ:  l000118A4
l00011898_ds_t:
	i2 = i2 - o0
	goto l000118FC
	// succ:  l000118FC
l000118A4:
	o1 = 0x00000000 | i1
	o2 = 0x00000000 | i2
	call write (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(GE,NV) l00011898_ds_t
	// succ:  l000118BC l00011898_ds_t
l000118BC:
	l2 = Mem0[l1 + 864:word32]
	g0 = l2 - 0x00000004
	NZVC = cond(g0)
	branch Test(EQ,Z) l000118BC_ds_t
	// succ:  l000118BC_ds_f l000118BC_ds_t
l000118BC_ds_f:
	o1 = 0x00000000 | i3
	goto l000118CC
	// succ:  l000118CC
l000118BC_ds_t:
	o1 = 0x00000000 | i3
	goto l00011900
	// succ:  l00011900
l000118CC:
	l1 = Mem0[l0 + 336:word32]
	o0 = 0x00000000 | 0x00000000
	call shortpath (retsize: 0;)
	l0 = 0x00000000 | o0
	o0 = 0x00000000 | l2
	call xstrerror (retsize: 0;)
	o3 = 0x00000000 | o0
	o0 = l3 | 0x000000E0
	o1 = 0x00000000 | l1
	o2 = 0x00000000 | l0
	call notice (retsize: 0;)
	i1 = i1 + o0
	goto l0001190C
	// succ:  l0001190C
l000118FC:
	i1 = i1 + o0
	// succ:  l00011900
l00011900:
	g0 = i2 - 0x00000000
	NZVC = cond(g0)
	branch Test(GT,NZV) l00011900_ds_t
	// succ:  l00011900_ds_f l00011900_ds_t
l00011900_ds_f:
	o0 = 0x00000000 | i0
	goto l0001190C
	// succ:  l0001190C
l00011900_ds_t:
	o0 = 0x00000000 | i0
	goto l000118A4
	// succ:  l000118A4
l0001190C:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  safe_write_exit safe_write_exit
safe_write_exit:


// save_pointers
// Return size: 0
define save_pointers
save_pointers_entry:
	// succ:  l00011914
l00011914:
	sp = fp
	g2 = 0x00028000
	o2 = Mem0[g2 + 480:word32]
	g3 = 0x00028000
	o1 = Mem0[g3 + 528:word32]
	o0 = 0x0002B000
	g2 = 0x0002B000
	Mem0[o0 + 640:word32] = o2
	Mem0[g2 + 656:word32] = o1
	return
	// succ:  save_pointers_exit
save_pointers_exit:


// restore_pointers
// Return size: 0
define restore_pointers
restore_pointers_entry:
	// succ:  l00011938
l00011938:
	sp = fp
	g2 = 0x0002B000
	o2 = Mem0[g2 + 640:word32]
	g3 = 0x0002B000
	o1 = Mem0[g3 + 656:word32]
	o0 = 0x00028000
	g2 = 0x00028000
	Mem0[o0 + 480:word32] = o2
	Mem0[g2 + 528:word32] = o1
	return
	// succ:  restore_pointers_exit
restore_pointers_exit:


// is_id_char
// Return size: 0
define is_id_char
is_id_char_entry:
	// succ:  l0001195C
l0001195C:
	sp = fp
	g2 = 0x0002B400
	g2 = g2 | 0x00000011
	o0 = o0 & 0x000000FF
	g3 = (word32) Mem0[o0 + g2:byte]
	g0 = g3 & 0x00000007
	NZVC = cond(g0)
	branch Test(NE,Z) l0001195C_ds_t
	// succ:  l0001195C_ds_f l0001195C_ds_t
l0001195C_ds_f:
	g2 = 0x00000000 | 0x00000000
	goto l00011978
	// succ:  l00011978
l0001195C_ds_t:
	g2 = 0x00000000 | 0x00000000
	goto l0001198C
	// succ:  l0001198C
l00011978:
	g0 = o0 - 0x0000005F
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011978_ds_t
	// succ:  l00011978_ds_f l00011978_ds_t
l00011978_ds_f:
	g0 = o0 - 0x00000024
	NZVC = cond(g0)
	goto l00011984
	// succ:  l00011984
l00011978_ds_t:
	g0 = o0 - 0x00000024
	NZVC = cond(g0)
	goto l0001198C
	// succ:  l0001198C
l00011984:
	branch Test(NE,Z) l00011984_ds_t
	// succ:  l00011984_ds_f l00011984_ds_t
l00011984_ds_f:
	goto l0001198C
	// succ:  l0001198C
l00011984_ds_t:
	goto l00011990
	// succ:  l00011990
l0001198C:
	g2 = 0x00000000 | 0x00000001
	// succ:  l00011990
l00011990:
	o0 = 0x00000000 | g2
	return
	// succ:  is_id_char_exit
is_id_char_exit:


// usage
// Return size: 0
define usage
usage_entry:
	// succ:  l00011998
l00011998:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00028000
	o1 = Mem0[o0 + 336:word32]
	o0 = 0x00017000
	o0 = o0 | 0x00000108
	o2 = 0x00000000 | o1
	call notice (retsize: 0;)
	o0 = 0x00000000 | 0x00000021
	call exit (retsize: 0;)
	v19 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v19
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011998_ds_t
	// succ:  l00011998_ds_f l00011998_ds_t
l00011998_ds_f:
	o0 = 0x00027C00
	goto l000119CC_thunk_fn000119D0
	// succ:  l000119CC_thunk_fn000119D0
l00011998_ds_t:
	o0 = 0x00027C00
	goto l000119CC_thunk_fn000119E0
	// succ:  l000119CC_thunk_fn000119E0
l000119CC_thunk_fn000119D0:
	call fn000119D0 (retsize: 0;)
	return
	// succ:  usage_exit
l000119CC_thunk_fn000119E0:
	call fn000119E0 (retsize: 0;)
	return
	// succ:  usage_exit
usage_exit:


// in_system_include_dir
// Return size: 0
define in_system_include_dir
in_system_include_dir_entry:
	// succ:  l000119BC
l000119BC:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	branch Test(EQ,Z) l000119BC_ds_t
	// succ:  l000119BC_ds_f l000119BC_ds_t
l000119BC_ds_f:
	o0 = 0x00027C00
	goto l000119CC_thunk_fn000119D0
	// succ:  l000119CC_thunk_fn000119D0
l000119BC_ds_t:
	o0 = 0x00027C00
	goto l000119CC_thunk_fn000119E0
	// succ:  l000119CC_thunk_fn000119E0
l000119CC_thunk_fn000119D0:
	call fn000119D0 (retsize: 0;)
	return
	// succ:  in_system_include_dir_exit l000119CC_thunk_fn000119D0
l000119CC_thunk_fn000119D0:
	call fn000119D0 (retsize: 0;)
	return
	// succ:  in_system_include_dir_exit
l000119CC_thunk_fn000119E0:
	call fn000119E0 (retsize: 0;)
	return
	// succ:  in_system_include_dir_exit
in_system_include_dir_exit:


// fn000119D0
// Return size: 0
define fn000119D0
fn000119D0_entry:
	// succ:  l000119D0
l000119D0:
	sp = v3
	call abort (retsize: 0;)
	// succ:  l000119D0_thunk_fn000119E0
l000119D0_thunk_fn000119E0:
	call fn000119E0 (retsize: 0;)
	return
	// succ:  fn000119D0_exit
fn000119D0_exit:


// fn000119E0
// Return size: 0
define fn000119E0
fn000119E0_entry:
	goto l000119E0
	// succ:  l000119E0
l000119D8:
	i0 = 0x00000000 | 0x00000001
	goto l00011A44
	// succ:  l00011A44
l000119E0:
	sp = v3
	o1 = Mem0[o0 + 720:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000119E0_ds_t
	// succ:  l000119E0_ds_f l000119E0_ds_t
l000119E0_ds_f:
	l1 = o0 | 0x000002D0
	goto l000119F0
	// succ:  l000119F0
l000119E0_ds_t:
	l1 = o0 | 0x000002D0
	goto l00011A40
	// succ:  l00011A40
l000119F0:
	l0 = Mem0[l1:word32]
	goto l000119F4
	// succ:  l000119F4
l000119F0_ds_t:
	l1 = l1 + 0x00000010
	goto l00011A30
	// succ:  l00011A30
l000119F4:
	o0 = 0x00000000 | l0
	call strlen (retsize: 0;)
	o2 = 0x00000000 | o0
	o1 = 0x00000000 | l0
	o0 = 0x00000000 | i0
	call strncmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000119F0_ds_t
	// succ:  l00011A18 l000119F0_ds_t
l00011A18:
	o0 = Mem0[l1:word32]
	call strlen (retsize: 0;)
	o1 = (int32) Mem0[i0 + o0:int8]
	g0 = o1 - 0x0000002F
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011A18_ds_t
	// succ:  l00011A18_ds_f l00011A18_ds_t
l00011A18_ds_f:
	l1 = l1 + 0x00000010
	goto l00011A30
	// succ:  l00011A30
l00011A18_ds_t:
	l1 = l1 + 0x00000010
	goto l000119D8
	// succ:  l000119D8
l00011A30:
	o0 = Mem0[l1:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011A30_ds_t
	goto l00011A40
	// succ:  l00011A40 l00011A30_ds_t
l00011A30_ds_t:
	l0 = Mem0[l1:word32]
	goto l000119F4
	// succ:  l000119F4
l00011A40:
	i0 = 0x00000000 | 0x00000000
	// succ:  l00011A44
l00011A44:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  fn000119E0_exit
fn000119E0_exit:


// needs_to_be_converted
// Return size: 0
define needs_to_be_converted
needs_to_be_converted_entry:
	// succ:  l00011A4C
l00011A4C:
	sp = fp
	g3 = Mem0[o0 + 4:word32]
	g0 = g3 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011A4C_ds_t
	// succ:  l00011A4C_ds_f l00011A4C_ds_t
l00011A4C_ds_f:
	o0 = 0x00000000 | 0x00000000
	goto l00011A5C
	// succ:  l00011A5C
l00011A4C_ds_t:
	o0 = 0x00000000 | 0x00000000
	goto l00011A80
	// succ:  l00011A80
l00011A5C:
	g2 = (int32) Mem0[g3 + 32:int8]
	goto l00011A60
	// succ:  l00011A60
l00011A5C_ds_f:
	o0 = 0x00000000 | 0xFFFFFFFF
	goto l00011A6C
	// succ:  l00011A6C
l00011A5C_ds_t:
	o0 = 0x00000000 | 0xFFFFFFFF
	goto l00011A80
	// succ:  l00011A80
l00011A60:
	g0 = g2 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011A5C_ds_t
	goto l00011A5C_ds_f
	// succ:  l00011A5C_ds_f l00011A5C_ds_t
l00011A6C:
	g3 = Mem0[g3:word32]
	g0 = g3 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011A6C_ds_t
	goto l00011A7C
	// succ:  l00011A7C l00011A6C_ds_t
l00011A6C_ds_t:
	g2 = (int32) Mem0[g3 + 32:int8]
	goto l00011A60
	// succ:  l00011A60
l00011A7C:
	o0 = 0x00000000 | 0x00000000
	// succ:  l00011A80
l00011A80:
	return
	// succ:  needs_to_be_converted_exit
needs_to_be_converted_exit:


// directory_specified_p
// Return size: 0
define directory_specified_p
directory_specified_p_entry:
	// succ:  l00011A88
l00011A88:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x0002B400
	l1 = Mem0[o0 + 868:word32]
	g0 = l1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011A88_ds_t
	goto l00011AA0
	// succ:  l00011AA0 l00011A88_ds_t
l00011A88_ds_t:
	i0 = 0x00000000 | 0x00000000
	goto l00011B38
	// succ:  l00011B38
l00011AA0:
	l0 = Mem0[l1:word32]
	goto l00011AA4
	// succ:  l00011AA4
l00011AA0_ds_t:
	l1 = Mem0[l1 + 4:word32]
	goto l00011B28
	// succ:  l00011B28
l00011AA4:
	o0 = 0x00000000 | l0
	call strlen (retsize: 0;)
	o2 = 0x00000000 | o0
	o1 = 0x00000000 | l0
	o0 = 0x00000000 | i0
	call strncmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011AA0_ds_t
	// succ:  l00011AC8 l00011AA0_ds_t
l00011AC8:
	o0 = Mem0[l1:word32]
	call strlen (retsize: 0;)
	o1 = (int32) Mem0[i0 + o0:int8]
	g0 = o1 - 0x0000002F
	NZVC = cond(g0)
	branch Test(NE,Z) l00011AC8_ds_t
	goto l00011AE0
	// succ:  l00011AE0 l00011AC8_ds_t
l00011AC8_ds_t:
	l1 = Mem0[l1 + 4:word32]
	goto l00011B28
	// succ:  l00011B28
l00011AE0:
	o0 = Mem0[l1:word32]
	call strlen (retsize: 0;)
	o0 = i0 + o0
	o1 = (int32) Mem0[o0 + 1:int8]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011AE0_ds_t
	// succ:  l00011AE0_ds_f l00011AE0_ds_t
l00011AE0_ds_f:
	o2 = o0 + 0x00000001
	goto l00011AFC
	// succ:  l00011AFC
l00011AE0_ds_t:
	o2 = o0 + 0x00000001
	goto l00011B1C
	// succ:  l00011B1C
l00011AFC:
	o0 = (int32) Mem0[o2:int8]
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	goto l00011B04
	// succ:  l00011B04
l00011AFC_ds_f:
	o2 = o2 + 0x00000001
	goto l00011B0C
	// succ:  l00011B0C
l00011AFC_ds_t:
	o2 = o2 + 0x00000001
	goto l00011B24
	// succ:  l00011B24
l00011B04:
	branch Test(EQ,Z) l00011AFC_ds_t
	goto l00011AFC_ds_f
	// succ:  l00011AFC_ds_f l00011AFC_ds_t
l00011B0C:
	o0 = (int32) Mem0[o2:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011B0C_ds_t
	// succ:  l00011B0C_ds_f l00011B0C_ds_t
l00011B0C_ds_f:
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	goto l00011B1C
	// succ:  l00011B1C
l00011B0C_ds_t:
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	goto l00011B04
	// succ:  l00011B04
l00011B1C:
	i0 = 0x00000000 | 0x00000001
	goto l00011B38
	// succ:  l00011B38
l00011B24:
	l1 = Mem0[l1 + 4:word32]
	// succ:  l00011B28
l00011B28:
	g0 = l1 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011B28_ds_t
	goto l00011B34
	// succ:  l00011B34 l00011B28_ds_t
l00011B28_ds_t:
	l0 = Mem0[l1:word32]
	goto l00011AA4
	// succ:  l00011AA4
l00011B34:
	i0 = 0x00000000 | 0x00000000
	// succ:  l00011B38
l00011B38:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  directory_specified_p_exit
directory_specified_p_exit:


// file_excluded_p
// Return size: 0
define file_excluded_p
file_excluded_p_entry:
	// succ:  l00011B40
l00011B40:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00000000 | i0
	call strlen (retsize: 0;)
	l1 = 0x00000000 | o0
	o0 = 0x0002B400
	l0 = Mem0[o0 + 8:word32]
	g0 = l0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011B40_ds_t
	goto l00011B64
	// succ:  l00011B64 l00011B40_ds_t
l00011B40_ds_t:
	i0 = 0x00000000 | 0x00000000
	goto l00011BC0
	// succ:  l00011BC0
l00011B64:
	l2 = i0 + l1
	goto l00011B68
	// succ:  l00011B68
l00011B64_ds_t:
	l0 = Mem0[l0 + 4:word32]
	goto l00011BB0
	// succ:  l00011BB0
l00011B68:
	o0 = Mem0[l0:word32]
	call strlen (retsize: 0;)
	o1 = Mem0[l0:word32]
	o0 = l2 - o0
	call strcmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011B64_ds_t
	// succ:  l00011B88 l00011B64_ds_t
l00011B88:
	o0 = Mem0[l0:word32]
	call strlen (retsize: 0;)
	o0 = l1 - o0
	o0 = o0 + i0
	o1 = (int32) Mem0[o0 + -1:int8]
	g0 = o1 - 0x0000002F
	NZVC = cond(g0)
	branch Test(NE,Z) l00011B88_ds_t
	goto l00011BA8
	// succ:  l00011BA8 l00011B88_ds_t
l00011B88_ds_t:
	l0 = Mem0[l0 + 4:word32]
	goto l00011BB0
	// succ:  l00011BB0
l00011BA8:
	i0 = 0x00000000 | 0x00000001
	goto l00011BC0
	// succ:  l00011BC0
l00011BB0:
	g0 = l0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011BB0_ds_t
	// succ:  l00011BB0_ds_f l00011BB0_ds_t
l00011BB0_ds_f:
	goto l00011BBC
	// succ:  l00011BBC
l00011BB0_ds_t:
	goto l00011B68
	// succ:  l00011B68
l00011BBC:
	i0 = 0x00000000 | 0x00000000
	// succ:  l00011BC0
l00011BC0:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  file_excluded_p_exit
file_excluded_p_exit:


// string_list_cons
// Return size: 0
define string_list_cons
string_list_cons_entry:
	// succ:  l00011BC8
l00011BC8:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00000000 | 0x00000008
	call xmalloc (retsize: 0;)
	Mem0[o0:word32] = i0
	Mem0[o0 + 4:word32] = i1
	v19 = 0x00000000 + o0
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	o0 = v19
	return
	// succ:  string_list_cons_exit
string_list_cons_exit:


// visit_each_hash_node
// Return size: 0
define visit_each_hash_node
visit_each_hash_node_entry:
	// succ:  l00011BE4
l00011BE4:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00001800
	o0 = i0 + o0
	g0 = i0 - o0
	NZVC = cond(g0)
	branch Test(UGE,C) l00011BE4_ds_t
	// succ:  l00011BE4_ds_f l00011BE4_ds_t
l00011BE4_ds_f:
	l1 = 0x00000000 | o0
	goto l00011BFC
	// succ:  l00011BFC
l00011BE4_ds_t:
	l1 = 0x00000000 | o0
	goto l00011C34
	// succ:  l00011C34
l00011BFC:
	o0 = Mem0[i0 + 4:word32]
	goto l00011C00
	// succ:  l00011C00
l00011BFC_ds_f:
	l0 = i0 + 0x0000000C
	goto l00011C0C
	// succ:  l00011C0C
l00011BFC_ds_t:
	l0 = i0 + 0x0000000C
	goto l00011C24
	// succ:  l00011C24
l00011C00:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011BFC_ds_t
	goto l00011BFC_ds_f
	// succ:  l00011BFC_ds_f l00011BFC_ds_t
l00011C0C:
	o7 = 0x00011C0C
	o0 = 0x00000000 | i0
	call i1 + 0x00000000 (retsize: 0;)
	i0 = Mem0[i0:word32]
	g0 = i0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011C0C_ds_t
	// succ:  l00011C0C_ds_f l00011C0C_ds_t
l00011C0C_ds_f:
	goto l00011C24
	// succ:  l00011C24
l00011C0C_ds_t:
	goto l00011C0C
	// succ:  l00011C0C
l00011C24:
	i0 = 0x00000000 | l0
	g0 = i0 - l1
	NZVC = cond(g0)
	branch Test(ULT,C) l00011C24_ds_t
	goto l00011C34
	// succ:  l00011C34 l00011C24_ds_t
l00011C24_ds_t:
	o0 = Mem0[i0 + 4:word32]
	goto l00011C00
	// succ:  l00011C00
l00011C34:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  visit_each_hash_node_exit
visit_each_hash_node_exit:


// add_symbol
// Return size: 0
define add_symbol
add_symbol_entry:
	// succ:  l00011C3C
l00011C3C:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	l0 = 0x00000000 | i0
	Mem0[l0:word32] = 0x00000000
	o0 = 0x00000000 | i1
	call strlen (retsize: 0;)
	o1 = 0x00000000 | o0
	o0 = 0x00000000 | i1
	call savestring (retsize: 0;)
	Mem0[l0 + 4:word32] = o0
	Mem0[l0 + 8:word32] = 0x00000000
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  add_symbol_exit
add_symbol_exit:


// lookup
// Return size: 0
define lookup
lookup_entry:
	// succ:  l00011C6C
l00011C6C:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = (int32) Mem0[i1:int8]
	l1 = 0x00000000 | i0
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	o3 = 0x00000000 | 0x00000000
	branch Test(EQ,Z) l00011C6C_ds_t
	// succ:  l00011C6C_ds_f l00011C6C_ds_t
l00011C6C_ds_f:
	o2 = 0x00000000 | i1
	goto l00011C88
	// succ:  l00011C88
l00011C6C_ds_t:
	o2 = 0x00000000 | i1
	goto l00011CA0
	// succ:  l00011CA0
l00011C88:
	o1 = (int32) Mem0[o2:int8]
	o2 = o2 + 0x00000001
	o0 = (int32) Mem0[o2:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011C88_ds_t
	// succ:  l00011C88_ds_f l00011C88_ds_t
l00011C88_ds_f:
	o3 = o3 + o1
	goto l00011CA0
	// succ:  l00011CA0
l00011C88_ds_t:
	o3 = o3 + o1
	goto l00011C88
	// succ:  l00011C88
l00011CA0:
	o3 = o3 & 0x000001FF
	o0 = o3 << 0x00000001
	o0 = o0 + o3
	l0 = o0 << 0x00000002
	i0 = l1 + l0
	o0 = Mem0[i0 + 4:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011CA0_ds_t
	// succ:  l00011CA0_ds_f l00011CA0_ds_t
l00011CA0_ds_f:
	goto l00011CC4
	// succ:  l00011CC4
l00011CA0_ds_t:
	goto l00011CCC
	// succ:  l00011CCC
l00011CC4:
	o0 = 0x00000000 | i0
	goto l00011D28
	// succ:  l00011D28
l00011CCC:
	o1 = 0x00000000 | i1
	call strcmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011CCC_ds_t
	// succ:  l00011CCC_ds_f l00011CCC_ds_t
l00011CCC_ds_f:
	goto l00011CE0
	// succ:  l00011CE0
l00011CCC_ds_t:
	goto l00011D34
	// succ:  l00011D34
l00011CE0:
	o0 = Mem0[l1 + l0:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011CE0_ds_t
	// succ:  l00011CE0_ds_f l00011CE0_ds_t
l00011CE0_ds_f:
	goto l00011CF0
	// succ:  l00011CF0
l00011CE0_ds_t:
	goto l00011D1C
	// succ:  l00011D1C
l00011CF0:
	i0 = Mem0[i0:word32]
	goto l00011CF4
	// succ:  l00011CF4
l00011CF0_ds_f:
	goto l00011D0C
	// succ:  l00011D0C
l00011CF0_ds_t:
	goto l00011D34
	// succ:  l00011D34
l00011CF4:
	o1 = 0x00000000 | i1
	o0 = Mem0[i0 + 4:word32]
	call strcmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011CF0_ds_t
	goto l00011CF0_ds_f
	// succ:  l00011CF0_ds_f l00011CF0_ds_t
l00011D0C:
	o0 = Mem0[i0:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011D0C_ds_t
	goto l00011D1C
	// succ:  l00011D1C l00011D0C_ds_t
l00011D0C_ds_t:
	i0 = Mem0[i0:word32]
	goto l00011CF4
	// succ:  l00011CF4
l00011D1C:
	o0 = 0x00000000 | 0x0000000C
	call xmalloc (retsize: 0;)
	Mem0[i0:word32] = o0
	// succ:  l00011D28
l00011D28:
	o1 = 0x00000000 | i1
	call add_symbol (retsize: 0;)
	i0 = 0x00000000 | o0
	// succ:  l00011D34
l00011D34:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  lookup_exit
lookup_exit:


// free_def_dec
// Return size: 0
define free_def_dec
free_def_dec_entry:
	// succ:  l00011D3C
l00011D3C:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = Mem0[i0 + 12:word32]
	call xfree (retsize: 0;)
	o0 = 0x00000000 | i0
	call xfree (retsize: 0;)
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  free_def_dec_exit
free_def_dec_exit:


// unexpand_if_needed
// Return size: 0
define unexpand_if_needed
unexpand_if_needed_entry:
	// succ:  l00011D58
l00011D58:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00027C00
	l1 = Mem0[o0 + 848:word32]
	l5 = 0x00000000 | o0
	g0 = l1 - 0x00000000
	NZVC = cond(g0)
	i1 = 0x00000000 | 0x00000000
	branch Test(NE,Z) l00011D58_ds_t
	// succ:  l00011D58_ds_f l00011D58_ds_t
l00011D58_ds_f:
	l6 = 0x00027C00
	goto l00011D78
	// succ:  l00011D78
l00011D58_ds_t:
	l6 = 0x00027C00
	goto l00011D88
	// succ:  l00011D88
l00011D78:
	o0 = 0x00000000 | 0x00000400
	Mem0[l6 + 852:word32] = o0
	call xmalloc (retsize: 0;)
	Mem0[l5 + 848:word32] = o0
	// succ:  l00011D88
l00011D88:
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x0000000A
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011D88_ds_t
	// succ:  l00011D88_ds_f l00011D88_ds_t
l00011D88_ds_f:
	l1 = Mem0[l5 + 848:word32]
	goto l00011D98
	// succ:  l00011D98
l00011D88_ds_t:
	l1 = Mem0[l5 + 848:word32]
	goto l00011EC8
	// succ:  l00011EC8
l00011D98:
	l7 = 0x00016C00
	o0 = Mem0[l7 + 788:word32]
	goto l00011DA0
	// succ:  l00011DA0
l00011D98_ds_f:
	l4 = l7 | 0x00000314
	goto l00011DAC
	// succ:  l00011DAC
l00011D98_ds_t:
	l4 = l7 | 0x00000314
	goto l00011E74
	// succ:  l00011E74
l00011DA0:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011D98_ds_t
	goto l00011D98_ds_f
	// succ:  l00011D98_ds_f l00011D98_ds_t
l00011DAC:
	l0 = Mem0[l4:word32]
	goto l00011DB0
	// succ:  l00011DB0
l00011DAC_ds_t:
	l4 = l4 + 0x00000008
	goto l00011E64
	// succ:  l00011E64
l00011DB0:
	o0 = 0x00000000 | l0
	call strlen (retsize: 0;)
	l3 = 0x00000000 | o0
	o1 = (int32) Mem0[i0:int8]
	o0 = (int32) Mem0[l0:int8]
	g0 = o1 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l00011DAC_ds_t
	// succ:  l00011DD0 l00011DAC_ds_t
l00011DD0:
	o1 = 0x00000000 | l0
	o0 = 0x00000000 | i0
	o2 = 0x00000000 | l3
	call strncmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011DD0_ds_t
	goto l00011DEC
	// succ:  l00011DEC l00011DD0_ds_t
l00011DD0_ds_t:
	l4 = l4 + 0x00000008
	goto l00011E64
	// succ:  l00011E64
l00011DEC:
	o0 = (int32) Mem0[i0 + l3:int8]
	call is_id_char (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011DEC_ds_t
	goto l00011E00
	// succ:  l00011E00 l00011DEC_ds_t
l00011DEC_ds_t:
	l4 = l4 + 0x00000008
	goto l00011E64
	// succ:  l00011E64
l00011E00:
	o0 = Mem0[l4 + 4:word32]
	i1 = 0x00000000 | 0x00000001
	call strlen (retsize: 0;)
	l2 = 0x00000000 | o0
	o1 = Mem0[l5 + 848:word32]
	o0 = l1 + l2
	o2 = Mem0[l6 + 852:word32]
	o0 = o0 - o1
	g0 = o0 - o2
	NZVC = cond(g0)
	branch Test(LT,NZV) l00011E00_ds_t
	// succ:  l00011E00_ds_f l00011E00_ds_t
l00011E00_ds_f:
	o2 = o2 << 0x00000001
	goto l00011E2C
	// succ:  l00011E2C
l00011E00_ds_t:
	o2 = o2 << 0x00000001
	goto l00011E4C
	// succ:  l00011E4C
l00011E2C:
	o2 = o2 + l2
	l0 = l1 - o1
	o0 = 0x00000000 | o1
	o1 = 0x00000000 | o2
	Mem0[l6 + 852:word32] = o2
	call xrealloc (retsize: 0;)
	l1 = o0 + l0
	Mem0[l5 + 848:word32] = o0
	// succ:  l00011E4C
l00011E4C:
	o1 = Mem0[l4 + 4:word32]
	o0 = 0x00000000 | l1
	call strcpy (retsize: 0;)
	l1 = l1 + l2
	i0 = i0 + l3
	goto l00011EB8
	// succ:  l00011EB8
l00011E64:
	o0 = Mem0[l4:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011E64_ds_t
	goto l00011E74
	// succ:  l00011E74 l00011E64_ds_t
l00011E64_ds_t:
	l0 = Mem0[l4:word32]
	goto l00011DB0
	// succ:  l00011DB0
l00011E74:
	o1 = Mem0[l5 + 848:word32]
	o0 = Mem0[l6 + 852:word32]
	l0 = l1 - o1
	g0 = l0 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l00011E74_ds_t
	o1 = Mem0[l5 + 848:word32]
	o0 = Mem0[l6 + 852:word32]
	l0 = l1 - o1
	g0 = l0 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l00011E74_ds_t
	// succ:  l00011E8C l00011E74_ds_t l00011E74_ds_t
l00011E74_ds_t:
	o0 = (word32) Mem0[i0:byte]
	goto l00011EAC
	// succ:  l00011EAC
l00011E74_ds_t:
	o0 = (word32) Mem0[i0:byte]
	goto l00011EAC
	// succ:  l00011EAC
l00011E8C:
	o2 = l0 << 0x00000001
	o0 = 0x00000000 | o1
	o1 = 0x00000000 | o2
	Mem0[l6 + 852:word32] = o2
	call xrealloc (retsize: 0;)
	l1 = o0 + l0
	Mem0[l5 + 848:word32] = o0
	o0 = (word32) Mem0[i0:byte]
	o2 = l0 << 0x00000001
	o0 = 0x00000000 | o1
	o1 = 0x00000000 | o2
	Mem0[l6 + 852:word32] = o2
	call xrealloc (retsize: 0;)
	l1 = o0 + l0
	Mem0[l5 + 848:word32] = o0
	o0 = (word32) Mem0[i0:byte]
	// succ:  l00011EAC
l00011EAC:
	Mem0[l1:byte] = (byte) o0
	i0 = i0 + 0x00000001
	l1 = l1 + 0x00000001
	// succ:  l00011EB8
l00011EB8:
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x0000000A
	NZVC = cond(g0)
	branch Test(NE,Z) l00011EB8_ds_t
	// succ:  l00011EB8_ds_f l00011EB8_ds_t
l00011EB8_ds_f:
	o0 = Mem0[l7 + 788:word32]
	goto l00011EC8
	// succ:  l00011EC8
l00011EB8_ds_t:
	o0 = Mem0[l7 + 788:word32]
	goto l00011DA0
	// succ:  l00011DA0
l00011EC8:
	o2 = Mem0[l5 + 848:word32]
	o1 = Mem0[l6 + 852:word32]
	o0 = o2 + 0xFFFFFFFE
	o0 = l1 - o0
	g0 = o0 - o1
	NZVC = cond(g0)
	branch Test(LT,NZV) l00011EC8_ds_t
	o2 = Mem0[l5 + 848:word32]
	o1 = Mem0[l6 + 852:word32]
	o0 = o2 + 0xFFFFFFFE
	o0 = l1 - o0
	g0 = o0 - o1
	NZVC = cond(g0)
	branch Test(LT,NZV) l00011EC8_ds_t
	// succ:  l00011EC8_ds_f l00011EC8_ds_t l00011EC8_ds_f l00011EC8_ds_t
l00011EC8_ds_f:
	o1 = o1 << 0x00000001
	goto l00011EE4
	// succ:  l00011EE4
l00011EC8_ds_f:
	o1 = o1 << 0x00000001
	goto l00011EE4
	// succ:  l00011EE4
l00011EC8_ds_t:
	o1 = o1 << 0x00000001
	goto l00011EFC
	// succ:  l00011EFC
l00011EC8_ds_t:
	o1 = o1 << 0x00000001
	goto l00011EFC
	// succ:  l00011EFC
l00011EE4:
	l0 = l1 - o2
	Mem0[l6 + 852:word32] = o1
	o0 = 0x00000000 | o2
	call xrealloc (retsize: 0;)
	l1 = o0 + l0
	Mem0[l5 + 848:word32] = o0
	l0 = l1 - o2
	Mem0[l6 + 852:word32] = o1
	o0 = 0x00000000 | o2
	call xrealloc (retsize: 0;)
	l1 = o0 + l0
	Mem0[l5 + 848:word32] = o0
	// succ:  l00011EFC
l00011EFC:
	o0 = 0x00000000 | 0x0000000A
	Mem0[l1:byte] = (byte) o0
	l1 = l1 + 0x00000001
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011EFC_ds_t
	// succ:  l00011EFC_ds_f l00011EFC_ds_t
l00011EFC_ds_f:
	Mem0[l1:byte] = (byte) 0x00000000
	goto l00011F14
	// succ:  l00011F14
l00011EFC_ds_t:
	Mem0[l1:byte] = (byte) 0x00000000
	goto l00011F1C
	// succ:  l00011F1C
l00011F14:
	i0 = 0x00000000 | 0x00000000
	goto l00011F2C
	// succ:  l00011F2C
l00011F1C:
	o0 = Mem0[l5 + 848:word32]
	o1 = l1 - o0
	call savestring (retsize: 0;)
	i0 = 0x00000000 | o0
	// succ:  l00011F2C
l00011F2C:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  unexpand_if_needed_exit
unexpand_if_needed_exit:


// abspath
// Return size: 0
define abspath
abspath_entry:
	// succ:  l00011F34
l00011F34:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	g0 = i0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00011F34_ds_t
	// succ:  l00011F34_ds_f l00011F34_ds_t
l00011F34_ds_f:
	goto l00011F44
	// succ:  l00011F44
l00011F34_ds_t:
	goto l00011F4C
	// succ:  l00011F4C
l00011F44:
	o0 = 0x0002B000
	i0 = Mem0[o0 + 624:word32]
	// succ:  l00011F4C
l00011F4C:
	o0 = 0x00000000 | i0
	call strlen (retsize: 0;)
	l0 = 0x00000000 | o0
	o0 = 0x00000000 | i1
	call strlen (retsize: 0;)
	l0 = l0 + o0
	l0 = l0 + 0x00000009
	l0 = l0 & 0xFFFFFFF8
	sp = sp - l0
	o0 = (int32) Mem0[i1:int8]
	o4 = sp + 0x00000060
	o3 = i1 + 0x00000001
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	branch Test(EQ,Z) l00011F4C_ds_t
	// succ:  l00011F4C_ds_f l00011F4C_ds_t
l00011F4C_ds_f:
	o2 = 0x00000000 | o4
	goto l00011F88
	// succ:  l00011F88
l00011F4C_ds_t:
	o2 = 0x00000000 | o4
	goto l00011FC8
	// succ:  l00011FC8
l00011F88:
	o1 = (word32) Mem0[i0:byte]
	o2 = o4 + 0x00000001
	o0 = o1 << 0x00000018
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	Mem0[o4:byte] = (byte) o1
	branch Test(EQ,Z) l00011F88_ds_t
	// succ:  l00011F88_ds_f l00011F88_ds_t
l00011F88_ds_f:
	i0 = i0 + 0x00000001
	goto l00011FA4
	// succ:  l00011FA4
l00011F88_ds_t:
	i0 = i0 + 0x00000001
	goto l00011FC0
	// succ:  l00011FC0
l00011FA4:
	o0 = (word32) Mem0[i0:byte]
	o1 = o0 << 0x00000018
	Mem0[o2:byte] = (byte) o0
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	i0 = i0 + 0x00000001
	branch Test(NE,Z) l00011FA4_ds_t
	// succ:  l00011FA4_ds_f l00011FA4_ds_t
l00011FA4_ds_f:
	o2 = o2 + 0x00000001
	goto l00011FC0
	// succ:  l00011FC0
l00011FA4_ds_t:
	o2 = o2 + 0x00000001
	goto l00011FA4
	// succ:  l00011FA4
l00011FC0:
	o0 = 0x00000000 | 0x0000002F
	Mem0[o2 + -1:byte] = (byte) o0
	// succ:  l00011FC8
l00011FC8:
	o0 = (word32) Mem0[i1:byte]
	i0 = 0x00000000 | o3
	o1 = o0 << 0x00000018
	Mem0[o2:byte] = (byte) o0
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	o2 = o2 + 0x00000001
	branch Test(EQ,Z) l00011FC8_ds_t
	// succ:  l00011FC8_ds_f l00011FC8_ds_t
l00011FC8_ds_f:
	o3 = o4 + 0x00000001
	goto l00011FE8
	// succ:  l00011FE8
l00011FC8_ds_t:
	o3 = o4 + 0x00000001
	goto l00012004
	// succ:  l00012004
l00011FE8:
	o0 = (word32) Mem0[i0:byte]
	o1 = o0 << 0x00000018
	Mem0[o2:byte] = (byte) o0
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	i0 = i0 + 0x00000001
	branch Test(NE,Z) l00011FE8_ds_t
	// succ:  l00011FE8_ds_f l00011FE8_ds_t
l00011FE8_ds_f:
	o2 = o2 + 0x00000001
	goto l00012004
	// succ:  l00012004
l00011FE8_ds_t:
	o2 = o2 + 0x00000001
	goto l00011FE8
	// succ:  l00011FE8
l00012004:
	o0 = (int32) Mem0[o4 + 1:int8]
	o2 = 0x00000000 | o3
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012004_ds_t
	// succ:  l00012004_ds_f l00012004_ds_t
l00012004_ds_f:
	o1 = 0x00000000 | o2
	goto l00012018
	// succ:  l00012018
l00012004_ds_t:
	o1 = 0x00000000 | o2
	goto l00012120
	// succ:  l00012120
l00012018:
	o5 = 0x00017000
	o0 = (int32) Mem0[o1:int8]
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	goto l00012024
	// succ:  l00012024
l00012018_ds_f:
	o3 = (word32) Mem0[o1:byte]
	goto l0001202C
	// succ:  l0001202C
l00012018_ds_t:
	o3 = (word32) Mem0[o1:byte]
	goto l00012044
	// succ:  l00012044
l00012024:
	branch Test(NE,Z) l00012018_ds_t
	goto l00012018_ds_f
	// succ:  l00012018_ds_f l00012018_ds_t
l0001202C:
	o0 = (int32) Mem0[o2 + -1:int8]
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	branch Test(NE,Z) l0001202C_ds_t
	// succ:  l0001202C_ds_f l0001202C_ds_t
l0001202C_ds_f:
	g0 = o3 - 0x0000002E
	NZVC = cond(g0)
	goto l0001203C
	// succ:  l0001203C
l0001202C_ds_t:
	g0 = o3 - 0x0000002E
	NZVC = cond(g0)
	goto l00012048
	// succ:  l00012048
l0001203C:
	o1 = o1 + 0x00000001
	goto l00012110
	// succ:  l00012110
l00012044:
	g0 = o3 - 0x0000002E
	NZVC = cond(g0)
	// succ:  l00012048
l00012048:
	branch Test(NE,Z) l00012048_ds_t
	goto l00012050
	// succ:  l00012050 l00012048_ds_t
l00012048_ds_t:
	o0 = (word32) Mem0[o1:byte]
	goto l00012104
	// succ:  l00012104
l00012050:
	o0 = (int32) Mem0[o2 + -1:int8]
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	branch Test(NE,Z) l00012050_ds_t
	goto l00012060
	// succ:  l00012060 l00012050_ds_t
l00012050_ds_t:
	o0 = (word32) Mem0[o1:byte]
	goto l00012104
	// succ:  l00012104
l00012060:
	o0 = (int32) Mem0[o1 + 1:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012060_ds_t
	// succ:  l00012060_ds_f l00012060_ds_t
l00012060_ds_f:
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	goto l00012070
	// succ:  l00012070
l00012060_ds_t:
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	goto l00012120
	// succ:  l00012120
l00012070:
	branch Test(NE,Z) l00012070_ds_t
	// succ:  l00012070_ds_f l00012070_ds_t
l00012070_ds_f:
	g0 = o0 - 0x0000002E
	NZVC = cond(g0)
	goto l00012078
	// succ:  l00012078
l00012070_ds_t:
	g0 = o0 - 0x0000002E
	NZVC = cond(g0)
	goto l00012080
	// succ:  l00012080
l00012078:
	o1 = o1 + 0x00000002
	goto l00012110
	// succ:  l00012110
l00012080:
	branch Test(NE,Z) l00012080_ds_t
	goto l00012088
	// succ:  l00012088 l00012080_ds_t
l00012080_ds_t:
	o0 = (word32) Mem0[o1:byte]
	goto l00012104
	// succ:  l00012104
l00012088:
	o0 = (int32) Mem0[o1 + 2:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012088_ds_t
	// succ:  l00012088_ds_f l00012088_ds_t
l00012088_ds_f:
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	goto l00012098
	// succ:  l00012098
l00012088_ds_t:
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	goto l000120A0
	// succ:  l000120A0
l00012098:
	branch Test(NE,Z) l00012098_ds_t
	goto l000120A0
	// succ:  l000120A0 l00012098_ds_t
l00012098_ds_t:
	o0 = (word32) Mem0[o1:byte]
	goto l00012104
	// succ:  l00012104
l000120A0:
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	branch Test(NE,Z) l000120A0_ds_t
	// succ:  l000120A0_ds_f l000120A0_ds_t
l000120A0_ds_f:
	o0 = o1 + 0x00000002
	goto l000120AC
	// succ:  l000120AC
l000120A0_ds_t:
	o0 = o1 + 0x00000002
	goto l000120B0
	// succ:  l000120B0
l000120AC:
	o0 = o1 + 0x00000003
	// succ:  l000120B0
l000120B0:
	o2 = o2 + 0xFFFFFFFE
	o1 = 0x00000000 | o0
	goto l000120B8
	// succ:  l000120B8
l000120B0_ds_f:
	goto l000120C4
	// succ:  l000120C4
l000120B0_ds_t:
	goto l000120D8
	// succ:  l000120D8
l000120B8:
	g0 = o2 - o4
	NZVC = cond(g0)
	branch Test(ULT,C) l000120B0_ds_t
	goto l000120B0_ds_f
	// succ:  l000120B0_ds_f l000120B0_ds_t
l000120C4:
	o0 = (int32) Mem0[o2:int8]
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	branch Test(NE,Z) l000120C4_ds_t
	goto l000120D4
	// succ:  l000120D4 l000120C4_ds_t
l000120C4_ds_t:
	o2 = o2 + 0xFFFFFFFF
	goto l000120B8
	// succ:  l000120B8
l000120D4:
	g0 = o2 - o4
	NZVC = cond(g0)
	// succ:  l000120D8
l000120D8:
	branch Test(UGE,C) l000120D8_ds_t
	// succ:  l000120D8_ds_f l000120D8_ds_t
l000120D8_ds_f:
	o2 = o2 + 0x00000001
	goto l000120E0
	// succ:  l000120E0
l000120D8_ds_t:
	o2 = o2 + 0x00000001
	goto l000120FC
	// succ:  l000120FC
l000120E0:
	o0 = 0x00028000
	o1 = Mem0[o0 + 336:word32]
	o2 = 0x00000000 | i1
	o0 = o5 | 0x00000148
	call notice (retsize: 0;)
	o0 = 0x00000000 | 0x00000021
	call exit (retsize: 0;)
l000120FC:
	Mem0[o2:byte] = (byte) 0x00000000
	goto l00012110
	// succ:  l00012110
l00012104:
	Mem0[o2:byte] = (byte) o0
	o1 = o1 + 0x00000001
	o2 = o2 + 0x00000001
	// succ:  l00012110
l00012110:
	o0 = (int32) Mem0[o1:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00012110_ds_t
	// succ:  l00012110_ds_f l00012110_ds_t
l00012110_ds_f:
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	goto l00012120
	// succ:  l00012120
l00012110_ds_t:
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	goto l00012024
	// succ:  l00012024
l00012120:
	o0 = (int32) Mem0[o2 + -1:int8]
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	branch Test(NE,Z) l00012120_ds_t
	// succ:  l00012120_ds_f l00012120_ds_t
l00012120_ds_f:
	Mem0[o2:byte] = (byte) 0x00000000
	goto l00012130
	// succ:  l00012130
l00012120_ds_t:
	Mem0[o2:byte] = (byte) 0x00000000
	goto l00012138
	// succ:  l00012138
l00012130:
	o2 = o2 + 0xFFFFFFFF
	Mem0[o2:byte] = (byte) 0x00000000
	// succ:  l00012138
l00012138:
	o0 = 0x00000000 | o4
	o1 = o2 - o0
	call savestring (retsize: 0;)
	v23 = 0x00000000 + o0
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	o0 = v23
	return
	// succ:  abspath_exit
abspath_exit:


// shortpath
// Return size: 0
define shortpath
shortpath_entry:
	// succ:  l0001214C
l0001214C:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x0002B000
	l0 = Mem0[o0 + 624:word32]
	l2 = 0x00000000 | 0x00000000
	o0 = 0x00000000 | i1
	call strlen (retsize: 0;)
	l3 = 0x00000000 | o0
	o1 = 0x00000000 | i1
	o0 = 0x00000000 | i0
	call abspath (retsize: 0;)
	i0 = 0x00000000 | o0
	o0 = 0x00000000 | l3
	call xmalloc (retsize: 0;)
	o1 = (int32) Mem0[l0:int8]
	l4 = 0x00000000 | o0
	l1 = 0x00000000 | l4
	goto l00012198
	// succ:  l00012198
l00012190:
	o1 = (int32) Mem0[l0:int8]
	i0 = i0 + 0x00000001
	// succ:  l00012198
l00012198:
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012198_ds_t
	goto l000121A4
	// succ:  l000121A4 l00012198_ds_t
l00012198_ds_t:
	o0 = (int32) Mem0[l0:int8]
	goto l000121B8
	// succ:  l000121B8
l000121A4:
	o0 = (int32) Mem0[i0:int8]
	g0 = o1 - o0
	NZVC = cond(g0)
	branch Test(EQ,Z) l000121A4_ds_t
	goto l000121B4
	// succ:  l000121B4 l000121A4_ds_t
l000121A4_ds_t:
	l0 = l0 + 0x00000001
	goto l00012190
	// succ:  l00012190
l000121B4:
	o0 = (int32) Mem0[l0:int8]
	// succ:  l000121B8
l000121B8:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000121B8_ds_t
	// succ:  l000121B8_ds_f l000121B8_ds_t
l000121B8_ds_f:
	o1 = (word32) Mem0[i0:byte]
	goto l000121C4
	// succ:  l000121C4
l000121B8_ds_t:
	o1 = (word32) Mem0[i0:byte]
	goto l000121F8
	// succ:  l000121F8
l000121C4:
	o0 = o1 << 0x00000018
	o0 = o0 >> 0x00000018
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000121C4_ds_t
	// succ:  l000121C4_ds_f l000121C4_ds_t
l000121C4_ds_f:
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	goto l000121D8
	// succ:  l000121D8
l000121C4_ds_t:
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	goto l000121E0
	// succ:  l000121E0
l000121D8:
	branch Test(NE,Z) l000121D8_ds_t
	// succ:  l000121D8_ds_f l000121D8_ds_t
l000121D8_ds_f:
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	goto l000121E0
	// succ:  l000121E0
l000121D8_ds_t:
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	goto l000121FC
	// succ:  l000121FC
l000121E0:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000121E0_ds_t
	goto l000121EC
	// succ:  l000121EC l000121E0_ds_t
l000121E0_ds_t:
	i0 = i0 + 0x00000001
	goto l000122FC
	// succ:  l000122FC
l000121EC:
	i0 = 0x00017000
	i0 = i0 | 0x00000168
	goto l000122FC
	// succ:  l000122FC
l000121F8:
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	// succ:  l000121FC
l000121FC:
	branch Test(EQ,Z) l000121FC_ds_t
	goto l00012204
	// succ:  l00012204 l000121FC_ds_t
l000121FC_ds_t:
	o0 = (int32) Mem0[l0:int8]
	goto l0001223C
	// succ:  l0001223C
l00012204:
	l0 = l0 + 0xFFFFFFFF
	o0 = (int32) Mem0[l0:int8]
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	branch Test(NE,Z) l00012204_ds_t
	// succ:  l00012204_ds_f l00012204_ds_t
l00012204_ds_f:
	i0 = i0 + 0xFFFFFFFF
	goto l00012218
	// succ:  l00012218
l00012204_ds_t:
	i0 = i0 + 0xFFFFFFFF
	goto l00012204
	// succ:  l00012204
l00012218:
	l0 = l0 + 0x00000001
	i0 = i0 + 0x00000001
	l2 = 0x00000000 | 0x00000001
	goto l00012238
	// succ:  l00012238
l00012228:
	g0 = o1 - 0x0000002F
	NZVC = cond(g0)
	branch Test(NE,Z) l00012228_ds_t
	// succ:  l00012228_ds_f l00012228_ds_t
l00012228_ds_f:
	l0 = l0 + 0x00000001
	goto l00012234
	// succ:  l00012234
l00012228_ds_t:
	l0 = l0 + 0x00000001
	goto l00012238
	// succ:  l00012238
l00012234:
	l2 = l2 + 0x00000001
	// succ:  l00012238
l00012238:
	o0 = (int32) Mem0[l0:int8]
	// succ:  l0001223C
l0001223C:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l0001223C_ds_t
	// succ:  l0001223C_ds_f l0001223C_ds_t
l0001223C_ds_f:
	o1 = (word32) Mem0[l0:byte]
	goto l00012248
	// succ:  l00012248
l0001223C_ds_t:
	o1 = (word32) Mem0[l0:byte]
	goto l00012228
	// succ:  l00012228
l00012248:
	l0 = l2 << 0x00000001
	l0 = l0 + l2
	o0 = 0x00000000 | i0
	call strlen (retsize: 0;)
	l0 = l0 + o0
	g0 = l0 - l3
	NZVC = cond(g0)
	branch Test(ULT,C) l00012248_ds_t
	// succ:  l00012248_ds_f l00012248_ds_t
l00012248_ds_f:
	l2 = l2 + 0xFFFFFFFF
	goto l00012268
	// succ:  l00012268
l00012248_ds_t:
	l2 = l2 + 0xFFFFFFFF
	goto l00012270
	// succ:  l00012270
l00012268:
	i0 = 0x00000000 | i1
	goto l000122FC
	// succ:  l000122FC
l00012270:
	g0 = l2 - 0xFFFFFFFF
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012270_ds_t
	// succ:  l00012270_ds_f l00012270_ds_t
l00012270_ds_f:
	o3 = l4 + l3
	goto l0001227C
	// succ:  l0001227C
l00012270_ds_t:
	o3 = l4 + l3
	goto l000122B8
	// succ:  l000122B8
l0001227C:
	o2 = 0x00000000 | o3
	o1 = 0x00000000 | 0x0000002E
	o4 = 0x00000000 | 0x0000002F
	goto l00012288
	// succ:  l00012288
l0001227C_ds_f:
	l2 = l2 + 0xFFFFFFFF
	goto l00012298
	// succ:  l00012298
l0001227C_ds_t:
	l2 = l2 + 0xFFFFFFFF
	goto l00012268
	// succ:  l00012268
l00012288:
	o0 = l1 + 0x00000003
	g0 = o2 - o0
	NZVC = cond(g0)
	branch Test(ULE,ZC) l0001227C_ds_t
	goto l0001227C_ds_f
	// succ:  l0001227C_ds_f l0001227C_ds_t
l00012298:
	Mem0[l1:byte] = (byte) o1
	l1 = l1 + 0x00000001
	Mem0[l1:byte] = (byte) o1
	l1 = l1 + 0x00000001
	Mem0[l1:byte] = (byte) o4
	g0 = l2 - 0xFFFFFFFF
	NZVC = cond(g0)
	branch Test(NE,Z) l00012298_ds_t
	// succ:  l00012298_ds_f l00012298_ds_t
l00012298_ds_f:
	l1 = l1 + 0x00000001
	goto l000122B8
	// succ:  l000122B8
l00012298_ds_t:
	l1 = l1 + 0x00000001
	goto l00012288
	// succ:  l00012288
l000122B8:
	o2 = 0x00000000 | o3
	goto l000122BC
	// succ:  l000122BC
l000122B8_ds_t:
	i0 = 0x00000000 | i1
	goto l000122FC
	// succ:  l000122FC
l000122BC:
	g0 = o2 - l1
	NZVC = cond(g0)
	branch Test(ULE,ZC) l000122B8_ds_t
	// succ:  l000122C8 l000122B8_ds_t
l000122C8:
	o0 = (word32) Mem0[i0:byte]
	o1 = o0 << 0x00000018
	Mem0[l1:byte] = (byte) o0
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	i0 = i0 + 0x00000001
	branch Test(NE,Z) l000122C8_ds_t
	// succ:  l000122C8_ds_f l000122C8_ds_t
l000122C8_ds_f:
	l1 = l1 + 0x00000001
	goto l000122E4
	// succ:  l000122E4
l000122C8_ds_t:
	l1 = l1 + 0x00000001
	goto l000122BC
	// succ:  l000122BC
l000122E4:
	l1 = l1 + 0xFFFFFFFF
	o0 = (int32) Mem0[l1 + -1:int8]
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	branch Test(EQ,Z) l000122E4_ds_t
	goto l000122F8
	// succ:  l000122F8 l000122E4_ds_t
l000122E4_ds_t:
	Mem0[l1 + -1:byte] = (byte) 0x00000000
	// succ:  l000122F8
l000122F8:
	i0 = 0x00000000 | l4
	// succ:  l000122FC
l000122FC:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  shortpath_exit
shortpath_exit:


// find_file
// Return size: 0
define find_file
find_file_entry:
	// succ:  l00012304
l00012304:
	sp = fp
	v3 = sp + 0xFFFFFF08
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	l1 = 0x00000000 | i0
	o0 = 0x00028000
	o0 = o0 | 0x00000240
	o1 = 0x00000000 | l1
	call lookup (retsize: 0;)
	l5 = 0x00000000 | o0
	i0 = Mem0[l5 + 8:word32]
	g0 = i0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00012304_ds_t
	// succ:  l00012304_ds_f l00012304_ds_t
l00012304_ds_f:
	goto l00012330
	// succ:  l00012330
l00012304_ds_t:
	goto l000123C8
	// succ:  l000123C8
l00012330:
	o0 = 0x00000000 | 0x0000000C
	call xmalloc (retsize: 0;)
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012330_ds_t
	// succ:  l00012330_ds_f l00012330_ds_t
l00012330_ds_f:
	l4 = 0x00000000 | o0
	goto l00012344
	// succ:  l00012344
l00012330_ds_t:
	l4 = 0x00000000 | o0
	goto l0001234C
	// succ:  l0001234C
l00012344:
	Mem0[i6 + -88:word32] = 0x00000000
	goto l000123B0
	// succ:  l000123B0
l0001234C:
	o0 = 0x00000000 | l1
	o1 = i6 + 0xFFFFFF68
	call stat (retsize: 0;)
	i0 = 0x00000000 | o0
	g0 = i0 - 0xFFFFFFFF
	NZVC = cond(g0)
	branch Test(NE,Z) l0001234C_ds_t
	goto l00012368
	// succ:  l00012368 l0001234C_ds_t
l0001234C_ds_t:
	Mem0[l5 + 8:word32] = l4
	goto l000123B4
	// succ:  l000123B4
l00012368:
	o0 = 0x0002B400
	o1 = 0x00028000
	l2 = Mem0[o0 + 864:word32]
	l0 = 0x00017000
	l3 = Mem0[o1 + 336:word32]
	l0 = l0 | 0x00000170
	o1 = 0x00000000 | l1
	o0 = 0x00000000 | 0x00000000
	call shortpath (retsize: 0;)
	l1 = 0x00000000 | o0
	o0 = 0x00000000 | l2
	call xstrerror (retsize: 0;)
	o3 = 0x00000000 | o0
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l3
	o2 = 0x00000000 | l1
	call notice (retsize: 0;)
	Mem0[i6 + -88:word32] = i0
	// succ:  l000123B0
l000123B0:
	Mem0[l5 + 8:word32] = l4
	// succ:  l000123B4
l000123B4:
	Mem0[l4:word32] = l5
	Mem0[l4 + 4:word32] = 0x00000000
	o0 = Mem0[i6 + -88:word32]
	i0 = 0x00000000 | l4
	Mem0[l4 + 8:word32] = o0
	// succ:  l000123C8
l000123C8:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  find_file_exit
find_file_exit:


// aux_info_corrupted
// Return size: 0
define aux_info_corrupted
aux_info_corrupted_entry:
	// succ:  l000123D0
l000123D0:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00028000
	o1 = Mem0[o0 + 336:word32]
	o3 = 0x00028000
	o2 = Mem0[o3 + 368:word32]
	o0 = 0x00017000
	o0 = o0 | 0x00000190
	call notice (retsize: 0;)
	o0 = 0x00000000 | 0x00000021
	call exit (retsize: 0;)
aux_info_corrupted_exit:


// check_aux_info
// Return size: 0
define check_aux_info
check_aux_info_entry:
	// succ:  l000123F8
l000123F8:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	g0 = i0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000123F8_ds_t
	// succ:  l000123F8_ds_f l000123F8_ds_t
l000123F8_ds_f:
	goto l00012408
	// succ:  l00012408
l000123F8_ds_t:
	goto l00012410
	// succ:  l00012410
l00012408:
	call aux_info_corrupted (retsize: 0;)
l00012410:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  check_aux_info_exit
check_aux_info_exit:


// find_corresponding_lparen
// Return size: 0
define find_corresponding_lparen
find_corresponding_lparen_entry:
	// succ:  l00012418
l00012418:
	sp = fp
	o0 = o0 + 0xFFFFFFFF
	g3 = 0x00000000 | 0x00000001
	g2 = (int32) Mem0[o0:int8]
	goto l00012424
	// succ:  l00012424
l00012418_ds_f:
	g0 = g2 - 0x00000029
	NZVC = cond(g0)
	goto l00012430
	// succ:  l00012430
l00012418_ds_t:
	g0 = g2 - 0x00000029
	NZVC = cond(g0)
	goto l00012440
	// succ:  l00012440
l00012424:
	g0 = g2 - 0x00000028
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012418_ds_t
	goto l00012418_ds_f
	// succ:  l00012418_ds_f l00012418_ds_t
l00012430:
	branch Test(EQ,Z) l00012430_ds_t
	goto l00012438
	// succ:  l00012438 l00012430_ds_t
l00012430_ds_t:
	g3 = g3 + 0x00000001
	goto l00012444
	// succ:  l00012444
l00012438:
	o0 = o0 + 0xFFFFFFFF
	goto l00012448
	// succ:  l00012448
l00012440:
	g3 = g3 + 0xFFFFFFFF
	// succ:  l00012444
l00012444:
	o0 = o0 + 0xFFFFFFFF
	// succ:  l00012448
l00012448:
	g0 = g3 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00012448_ds_t
	goto l00012454
	// succ:  l00012454 l00012448_ds_t
l00012448_ds_t:
	g2 = (int32) Mem0[o0:int8]
	goto l00012424
	// succ:  l00012424
l00012454:
	o0 = o0 + 0x00000001
	return
	// succ:  find_corresponding_lparen_exit
find_corresponding_lparen_exit:


// referenced_file_is_newer
// Return size: 0
define referenced_file_is_newer
referenced_file_is_newer_entry:
	// succ:  l0001245C
l0001245C:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = (int32) Mem0[i0:int8]
	o0 = o0 ^ 0x0000002F
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	o0 = (int32) Mem0[i0 + 1:int8]
	o0 = o0 ^ 0x0000002A
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	o0 = (int32) Mem0[i0 + 2:int8]
	o0 = o0 ^ 0x00000020
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	o0 = (int32) Mem0[i0 + 3:int8]
	o1 = i0 + 0x00000003
	g0 = o0 - 0x0000003A
	NZVC = cond(g0)
	branch Test(EQ,Z) l0001245C_ds_t
	// succ:  l0001245C_ds_f l0001245C_ds_t
l0001245C_ds_f:
	l1 = 0x00000000 | o1
	goto l000124B0
	// succ:  l000124B0
l0001245C_ds_t:
	l1 = 0x00000000 | o1
	goto l000124C4
	// succ:  l000124C4
l000124B0:
	l1 = l1 + 0x00000001
	// succ:  l000124B4
l000124B4:
	o0 = (int32) Mem0[l1:int8]
	g0 = o0 - 0x0000003A
	NZVC = cond(g0)
	branch Test(NE,Z) l000124B4_ds_t
	goto l000124C4
	// succ:  l000124C4 l000124B4_ds_t
l000124B4_ds_t:
	l1 = l1 + 0x00000001
	goto l000124B4
	// succ:  l000124B4
l000124C4:
	l1 = l1 - o1
	o0 = l1 + 0x00000008
	o0 = o0 & 0xFFFFFFF8
	sp = sp - o0
	l0 = sp + 0x00000060
	o2 = 0x00000000 | l1
	o0 = 0x00000000 | l0
	call strncpy (retsize: 0;)
	o1 = 0x00028000
	o0 = Mem0[o1 + 400:word32]
	Mem0[l0 + l1:byte] = (byte) 0x00000000
	o1 = 0x00000000 | l0
	call abspath (retsize: 0;)
	o1 = 0x00000000 | 0x00000000
	call find_file (retsize: 0;)
	o1 = Mem0[o0 + 8:word32]
	g0 = o1 - i1
	NZVC = cond(g0)
	branch Test(GT,NZV) l000124C4_ds_t
	// succ:  l000124C4_ds_f l000124C4_ds_t
l000124C4_ds_f:
	i0 = 0x00000000 | 0x00000001
	goto l00012510
	// succ:  l00012510
l000124C4_ds_t:
	i0 = 0x00000000 | 0x00000001
	goto l00012514
	// succ:  l00012514
l00012510:
	i0 = 0x00000000 | 0x00000000
	// succ:  l00012514
l00012514:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  referenced_file_is_newer_exit
referenced_file_is_newer_exit:


// save_def_or_dec
// Return size: 0
define save_def_or_dec
save_def_or_dec_entry:
	// succ:  l0001251C
l0001251C:
	sp = fp
	v3 = sp + 0xFFFFFF80
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00000000 | 0x0000002C
	call xmalloc (retsize: 0;)
	l2 = 0x00000000 | o0
	o0 = (int32) Mem0[i0:int8]
	o0 = o0 ^ 0x0000002F
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	o0 = (int32) Mem0[i0 + 1:int8]
	o0 = o0 ^ 0x0000002A
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	o0 = (int32) Mem0[i0 + 2:int8]
	o0 = o0 ^ 0x00000020
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	o0 = (int32) Mem0[i0 + 3:int8]
	l3 = i6 + 0xFFFFFFE0
	i0 = i0 + 0x00000003
	g0 = o0 - 0x0000003A
	NZVC = cond(g0)
	branch Test(EQ,Z) l0001251C_ds_t
	// succ:  l0001251C_ds_f l0001251C_ds_t
l0001251C_ds_f:
	o1 = 0x00000000 | i0
	goto l00012580
	// succ:  l00012580
l0001251C_ds_t:
	o1 = 0x00000000 | i0
	goto l00012594
	// succ:  l00012594
l00012580:
	i0 = i0 + 0x00000001
	// succ:  l00012584
l00012584:
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x0000003A
	NZVC = cond(g0)
	branch Test(NE,Z) l00012584_ds_t
	goto l00012594
	// succ:  l00012594 l00012584_ds_t
l00012584_ds_t:
	i0 = i0 + 0x00000001
	goto l00012584
	// succ:  l00012584
l00012594:
	l1 = i0 - o1
	o0 = l1 + 0x00000008
	o0 = o0 & 0xFFFFFFF8
	sp = sp - o0
	l0 = sp + 0x00000060
	o2 = 0x00000000 | l1
	o0 = 0x00000000 | l0
	call strncpy (retsize: 0;)
	o1 = 0x00028000
	o0 = Mem0[o1 + 400:word32]
	i0 = i0 + 0x00000001
	o1 = 0x00000000 | l0
	Mem0[l0 + l1:byte] = (byte) 0x00000000
	call abspath (retsize: 0;)
	o1 = 0x00000000 | i1
	call find_file (retsize: 0;)
	Mem0[l2 + 4:word32] = o0
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x0000003A
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012594_ds_t
	// succ:  l00012594_ds_f l00012594_ds_t
l00012594_ds_f:
	o1 = 0x00000000 | i0
	goto l000125E8
	// succ:  l000125E8
l00012594_ds_t:
	o1 = 0x00000000 | i0
	goto l000125FC
	// succ:  l000125FC
l000125E8:
	i0 = i0 + 0x00000001
	// succ:  l000125EC
l000125EC:
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x0000003A
	NZVC = cond(g0)
	branch Test(NE,Z) l000125EC_ds_t
	goto l000125FC
	// succ:  l000125FC l000125EC_ds_t
l000125EC_ds_t:
	i0 = i0 + 0x00000001
	goto l000125EC
	// succ:  l000125EC
l000125FC:
	l0 = i0 - o1
	o2 = 0x00000000 | l0
	o0 = 0x00000000 | l3
	call strncpy (retsize: 0;)
	Mem0[l3 + l0:byte] = (byte) 0x00000000
	o0 = 0x00000000 | l3
	call atoi (retsize: 0;)
	Mem0[l2 + 8:word32] = o0
	i0 = i0 + 0x00000001
	o1 = (word32) Mem0[i0:byte]
	o0 = o1 + 0xFFFFFFB2
	o0 = o0 & 0x000000FF
	g0 = o0 - 0x00000001
	NZVC = cond(g0)
	branch Test(ULE,ZC) l000125FC_ds_t
	// succ:  l000125FC_ds_f l000125FC_ds_t
l000125FC_ds_f:
	o2 = 0x00000000 | 0x00000000
	goto l00012638
	// succ:  l00012638
l000125FC_ds_t:
	o2 = 0x00000000 | 0x00000000
	goto l00012644
	// succ:  l00012644
l00012638:
	g0 = o1 - 0x00000049
	NZVC = cond(g0)
	branch Test(NE,Z) l00012638_ds_t
	// succ:  l00012638_ds_f l00012638_ds_t
l00012638_ds_f:
	goto l00012644
	// succ:  l00012644
l00012638_ds_t:
	goto l00012648
	// succ:  l00012648
l00012644:
	o2 = 0x00000000 | 0x00000001
	// succ:  l00012648
l00012648:
	o0 = 0x00000000 | o2
	call check_aux_info (retsize: 0;)
	o0 = (int32) Mem0[i0:int8]
	o0 = o0 ^ 0x0000004E
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o1 = 0x00000000 - 0xFFFFFFFF - C
	Mem0[l2 + 32:byte] = (byte) o1
	i0 = i0 + 0x00000001
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x00000043
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012648_ds_t
	// succ:  l00012648_ds_f l00012648_ds_t
l00012648_ds_f:
	o2 = 0x00000000 | 0x00000000
	goto l00012678
	// succ:  l00012678
l00012648_ds_t:
	o2 = 0x00000000 | 0x00000000
	goto l00012684
	// succ:  l00012684
l00012678:
	g0 = o0 - 0x00000046
	NZVC = cond(g0)
	branch Test(NE,Z) l00012678_ds_t
	// succ:  l00012678_ds_f l00012678_ds_t
l00012678_ds_f:
	goto l00012684
	// succ:  l00012684
l00012678_ds_t:
	goto l00012688
	// succ:  l00012688
l00012684:
	o2 = 0x00000000 | 0x00000001
	// succ:  l00012688
l00012688:
	o0 = 0x00000000 | o2
	call check_aux_info (retsize: 0;)
	o0 = (int32) Mem0[i0:int8]
	o1 = 0x00000000 | 0x00000000
	g0 = o0 - 0x00000046
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012688_ds_t
	// succ:  l00012688_ds_f l00012688_ds_t
l00012688_ds_f:
	i0 = i0 + 0x00000001
	goto l000126A4
	// succ:  l000126A4
l00012688_ds_t:
	i0 = i0 + 0x00000001
	goto l000126B0
	// succ:  l000126B0
l000126A4:
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000126A4_ds_t
	goto l000126B0
	// succ:  l000126B0 l000126A4_ds_t
l000126A4_ds_t:
	Mem0[l2 + 20:word32] = o1
	goto l000126B8
	// succ:  l000126B8
l000126B0:
	o1 = 0x00000000 | 0x00000001
	Mem0[l2 + 20:word32] = o1
	// succ:  l000126B8
l000126B8:
	o0 = (word32) Mem0[i0:byte]
	l0 = 0x00000000 | 0x00000000
	o0 = o0 << 0x00000018
	o0 = o0 >> 0x00000018
	o0 = o0 ^ 0x00000020
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	i0 = i0 + 0x00000001
	o0 = (word32) Mem0[i0:byte]
	o0 = o0 << 0x00000018
	o0 = o0 >> 0x00000018
	o0 = o0 ^ 0x0000002A
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	i0 = i0 + 0x00000001
	o0 = (word32) Mem0[i0:byte]
	o0 = o0 << 0x00000018
	o0 = o0 >> 0x00000018
	o0 = o0 ^ 0x0000002F
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	i0 = i0 + 0x00000001
	o0 = (word32) Mem0[i0:byte]
	o0 = o0 << 0x00000018
	o0 = o0 >> 0x00000018
	o0 = o0 ^ 0x00000020
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	i0 = i0 + 0x00000001
	o1 = 0x00017000
	o1 = o1 | 0x000001C8
	o0 = 0x00000000 | i0
	o2 = 0x00000000 | 0x00000006
	call strncmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000126B8_ds_t
	// succ:  l000126B8_ds_f l000126B8_ds_t
l000126B8_ds_f:
	o1 = 0x00017000
	goto l0001275C
	// succ:  l0001275C
l000126B8_ds_t:
	o1 = 0x00017000
	goto l00012778
	// succ:  l00012778
l0001275C:
	o1 = o1 | 0x000001D0
	o0 = 0x00000000 | i0
	o2 = 0x00000000 | 0x00000006
	call strncmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l0001275C_ds_t
	// succ:  l0001275C_ds_f l0001275C_ds_t
l0001275C_ds_f:
	o0 = 0x00000000 | l0
	goto l00012778
	// succ:  l00012778
l0001275C_ds_t:
	o0 = 0x00000000 | l0
	goto l00012780
	// succ:  l00012780
l00012778:
	l0 = 0x00000000 | 0x00000001
	o0 = 0x00000000 | l0
	// succ:  l00012780
l00012780:
	l0 = 0x00000000 | i0
	call check_aux_info (retsize: 0;)
	i0 = i0 + 0x00000007
	// succ:  l0001278C
l0001278C:
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x0000003B
	NZVC = cond(g0)
	branch Test(NE,Z) l0001278C_ds_t
	goto l0001279C
	// succ:  l0001279C l0001278C_ds_t
l0001278C_ds_t:
	i0 = i0 + 0x00000001
	goto l0001278C
	// succ:  l0001278C
l0001279C:
	o1 = l0 + 0xFFFFFFFF
	o1 = i0 - o1
	i1 = 0x00000000 | i0
	o0 = 0x00000000 | l0
	call dupnstr (retsize: 0;)
	i0 = i0 + 0xFFFFFFFF
	Mem0[l2 + 12:word32] = o0
	goto l000127B8
	// succ:  l000127B8
l0001279C_ds_t:
	o0 = (int32) Mem0[i0:int8]
	goto l000127E4
	// succ:  l000127E4
l000127B8:
	g0 = i0 - l0
	NZVC = cond(g0)
	branch Test(EQ,Z) l0001279C_ds_t
	// succ:  l000127C4 l0001279C_ds_t
l000127C4:
	o0 = (int32) Mem0[i0 + -1:int8]
	g0 = o0 - 0x00000020
	NZVC = cond(g0)
	branch Test(EQ,Z) l000127C4_ds_t
	goto l000127D4
	// succ:  l000127D4 l000127C4_ds_t
l000127C4_ds_t:
	i0 = i0 + 0xFFFFFFFF
	goto l000127B8
	// succ:  l000127B8
l000127D4:
	g0 = o0 - 0x00000009
	NZVC = cond(g0)
	branch Test(EQ,Z) l000127D4_ds_t
	goto l000127E0
	// succ:  l000127E0 l000127D4_ds_t
l000127D4_ds_t:
	i0 = i0 + 0xFFFFFFFF
	goto l000127B8
	// succ:  l000127B8
l000127E0:
	o0 = (int32) Mem0[i0:int8]
	// succ:  l000127E4
l000127E4:
	g0 = o0 - 0x00000029
	NZVC = cond(g0)
	branch Test(NE,Z) l000127E4_ds_t
	// succ:  l000127E4_ds_f l000127E4_ds_t
l000127E4_ds_f:
	l3 = 0x00029800
	goto l000127F0
	// succ:  l000127F0
l000127E4_ds_t:
	l3 = 0x00029800
	goto l00012AC0
	// succ:  l00012AC0
l000127F0:
	Mem0[l2 + 28:word32] = 0x00000000
	goto l00012810
	// succ:  l00012810
l000127F8:
	o0 = (int32) Mem0[l1 + -3:int8]
	i0 = l1 + 0xFFFFFFFD
	o0 = o0 ^ 0x00000029
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
l00012810:
	o0 = 0x00000000 | i0
	call find_corresponding_lparen (retsize: 0;)
	l1 = 0x00000000 | o0
	o0 = Mem0[l2 + 28:word32]
	o0 = o0 + 0x00000001
	Mem0[l2 + 28:word32] = o0
	o1 = (int32) Mem0[l1 + -2:int8]
	g0 = o1 - 0x00000029
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012810_ds_t
	// succ:  l00012810_ds_f l00012810_ds_t
l00012810_ds_f:
	i0 = l1 + 0xFFFFFFFE
	goto l00012838
	// succ:  l00012838
l00012810_ds_t:
	i0 = l1 + 0xFFFFFFFE
	goto l000127F8
	// succ:  l000127F8
l00012838:
	o0 = (int32) Mem0[i0 + 1:int8]
	l1 = l1 + 0xFFFFFFFF
	o0 = o0 ^ 0x00000020
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	// succ:  l00012850
l00012850:
	o0 = (int32) Mem0[i0:int8]
	call is_id_char (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00012850_ds_t
	goto l00012864
	// succ:  l00012864 l00012850_ds_t
l00012850_ds_t:
	i0 = i0 + 0xFFFFFFFF
	goto l00012850
	// succ:  l00012850
l00012864:
	i0 = i0 + 0x00000001
	l1 = l1 - i0
	o0 = l1 + 0x00000008
	o0 = o0 & 0xFFFFFFF8
	sp = sp - o0
	l0 = sp + 0x00000060
	o2 = 0x00000000 | l1
	o1 = 0x00000000 | i0
	o0 = 0x00000000 | l0
	call strncpy (retsize: 0;)
	Mem0[l0 + l1:byte] = (byte) 0x00000000
	o0 = l3 | 0x00000240
	o1 = 0x00000000 | l0
	call lookup (retsize: 0;)
	Mem0[l2 + 16:word32] = o0
	o2 = Mem0[o0 + 8:word32]
	g0 = o2 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012864_ds_t
	goto l000128B0
	// succ:  l000128B0 l00012864_ds_t
l00012864_ds_t:
	o0 = Mem0[l2 + 20:word32]
	goto l00012928
	// succ:  l00012928
l000128B0:
	l0 = 0x00017000
	o1 = Mem0[l2 + 8:word32]
	goto l000128B8
	// succ:  l000128B8
l000128B0_ds_t:
	o2 = Mem0[o2 + 24:word32]
	goto l00012918
	// succ:  l00012918
l000128B8:
	o0 = Mem0[o2 + 8:word32]
	g0 = o1 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l000128B0_ds_t
	// succ:  l000128C8 l000128B0_ds_t
l000128C8:
	o1 = Mem0[l2 + 4:word32]
	o0 = Mem0[o2 + 4:word32]
	g0 = o1 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l000128C8_ds_t
	goto l000128DC
	// succ:  l000128DC l000128C8_ds_t
l000128C8_ds_t:
	o2 = Mem0[o2 + 24:word32]
	goto l00012918
	// succ:  l00012918
l000128DC:
	o1 = Mem0[o2 + 12:word32]
	o0 = Mem0[l2 + 12:word32]
	call strcmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000128DC_ds_t
	// succ:  l000128DC_ds_f l000128DC_ds_t
l000128DC_ds_f:
	o0 = l0 | 0x000001D8
	goto l000128F4
	// succ:  l000128F4
l000128DC_ds_t:
	o0 = l0 | 0x000001D8
	goto l00012AC0
	// succ:  l00012AC0
l000128F4:
	o1 = Mem0[l2 + 4:word32]
	o2 = Mem0[l2 + 16:word32]
	o4 = Mem0[o1:word32]
	o3 = Mem0[o2 + 4:word32]
	o1 = Mem0[o4 + 4:word32]
	o2 = Mem0[l2 + 8:word32]
	call notice (retsize: 0;)
	o0 = 0x00000000 | 0x00000021
	call exit (retsize: 0;)
l00012918:
	g0 = o2 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00012918_ds_t
	goto l00012924
	// succ:  l00012924 l00012918_ds_t
l00012918_ds_t:
	o1 = Mem0[l2 + 8:word32]
	goto l000128B8
	// succ:  l000128B8
l00012924:
	o0 = Mem0[l2 + 20:word32]
	// succ:  l00012928
l00012928:
	Mem0[l2 + 36:word32] = 0x00000000
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012928_ds_t
	// succ:  l00012928_ds_f l00012928_ds_t
l00012928_ds_f:
	Mem0[l2 + 40:word32] = 0x00000000
	goto l00012938
	// succ:  l00012938
l00012928_ds_t:
	Mem0[l2 + 40:word32] = 0x00000000
	goto l00012AB0
	// succ:  l00012AB0
l00012938:
	i0 = i1 + 0x00000001
	o0 = (int32) Mem0[i0:int8]
	o0 = o0 ^ 0x00000020
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	i0 = i0 + 0x00000001
	o0 = (int32) Mem0[i0:int8]
	o0 = o0 ^ 0x0000002F
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	i0 = i0 + 0x00000001
	o0 = (int32) Mem0[i0:int8]
	o0 = o0 ^ 0x0000002A
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	i0 = i0 + 0x00000001
	o0 = (int32) Mem0[i0:int8]
	o0 = o0 ^ 0x00000020
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	i0 = i0 + 0x00000001
	o0 = (int32) Mem0[i0:int8]
	o0 = o0 ^ 0x00000028
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	i0 = i0 + 0x00000001
	o0 = (int32) Mem0[i0:int8]
	o1 = 0x00000000 | i0
	g0 = o0 - 0x00000029
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012938_ds_t
	// succ:  l00012938_ds_f l00012938_ds_t
l00012938_ds_f:
	i0 = i0 + 0x00000001
	goto l000129C8
	// succ:  l000129C8
l00012938_ds_t:
	i0 = i0 + 0x00000001
	goto l000129D8
	// succ:  l000129D8
l000129C8:
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x00000029
	NZVC = cond(g0)
	branch Test(NE,Z) l000129C8_ds_t
	// succ:  l000129C8_ds_f l000129C8_ds_t
l000129C8_ds_f:
	i0 = i0 + 0x00000001
	goto l000129D8
	// succ:  l000129D8
l000129C8_ds_t:
	i0 = i0 + 0x00000001
	goto l000129C8
	// succ:  l000129C8
l000129D8:
	o0 = 0x00000000 | o1
	i0 = i0 + 0xFFFFFFFF
	o1 = i0 - o0
	call dupnstr (retsize: 0;)
	Mem0[l2 + 36:word32] = o0
	i0 = i0 + 0x00000001
	o0 = (int32) Mem0[i0:int8]
	o0 = o0 ^ 0x00000020
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	i0 = i0 + 0x00000001
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x0000002A
	NZVC = cond(g0)
	branch Test(NE,Z) l000129D8_ds_t
	// succ:  l000129D8_ds_f l000129D8_ds_t
l000129D8_ds_f:
	l0 = 0x00000000 | i0
	goto l00012A18
	// succ:  l00012A18
l000129D8_ds_t:
	l0 = 0x00000000 | i0
	goto l00012A38
	// succ:  l00012A38
l00012A18:
	o0 = (int32) Mem0[i0 + 1:int8]
	o0 = o0 ^ 0x0000002F
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	o0 = 0x00017000
	o0 = o0 | 0x00000218
	goto l00012A80
	// succ:  l00012A80
l00012A38:
	i0 = i0 + 0x00000001
	// succ:  l00012A3C
l00012A3C:
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x0000002A
	NZVC = cond(g0)
	branch Test(NE,Z) l00012A3C_ds_t
	goto l00012A4C
	// succ:  l00012A4C l00012A3C_ds_t
l00012A3C_ds_t:
	i0 = i0 + 0x00000001
	goto l00012A3C
	// succ:  l00012A3C
l00012A4C:
	o0 = (int32) Mem0[i0 + 1:int8]
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	branch Test(NE,Z) l00012A4C_ds_t
	goto l00012A5C
	// succ:  l00012A5C l00012A4C_ds_t
l00012A4C_ds_t:
	i0 = i0 + 0x00000001
	goto l00012A3C
	// succ:  l00012A3C
l00012A5C:
	i0 = i0 + 0xFFFFFFFF
	o0 = (int32) Mem0[i0:int8]
	o0 = o0 ^ 0x00000020
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_aux_info (retsize: 0;)
	o0 = 0x00000000 | l0
	o1 = i0 - o0
	call dupnstr (retsize: 0;)
l00012A80:
	Mem0[l2 + 40:word32] = o0
	o0 = (int32) Mem0[l2 + 32:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00012A80_ds_t
	goto l00012A94
	// succ:  l00012A94 l00012A80_ds_t
l00012A80_ds_t:
	o1 = Mem0[l2 + 16:word32]
	goto l00012ACC
	// succ:  l00012ACC
l00012A94:
	o0 = Mem0[l2 + 36:word32]
	o1 = (int32) Mem0[o0:int8]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00012A94_ds_t
	goto l00012AA8
	// succ:  l00012AA8 l00012A94_ds_t
l00012A94_ds_t:
	o0 = (int32) Mem0[l2 + 32:int8]
	goto l00012AB4
	// succ:  l00012AB4
l00012AA8:
	o0 = 0x00000000 | 0x00000001
	Mem0[l2 + 32:byte] = (byte) o0
	// succ:  l00012AB0
l00012AB0:
	o0 = (int32) Mem0[l2 + 32:int8]
	// succ:  l00012AB4
l00012AB4:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00012AB4_ds_t
	goto l00012AC0
	// succ:  l00012AC0 l00012AB4_ds_t
l00012AB4_ds_t:
	o1 = Mem0[l2 + 16:word32]
	goto l00012ACC
	// succ:  l00012ACC
l00012AC0:
	o0 = 0x00000000 | l2
	call free_def_dec (retsize: 0;)
	o0 = Mem0[o1 + 8:word32]
	o0 = 0x00000000 | l2
	call free_def_dec (retsize: 0;)
	o0 = Mem0[o1 + 8:word32]
	goto l00012B5C
	// succ:  l00012B5C
l00012ACC:
	o0 = Mem0[o1 + 8:word32]
	// succ:  l00012B5C
l00012B5C:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  save_def_or_dec_exit
save_def_or_dec_exit:


// munge_compile_params
// Return size: 0
define munge_compile_params
munge_compile_params_entry:
	// succ:  l00012B64
l00012B64:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00000000 | i0
	call strlen (retsize: 0;)
	o0 = o0 << 0x00000002
	o0 = o0 + 0x00000027
	o0 = o0 & 0xFFFFFFF8
	sp = sp - o0
	o1 = 0x00027C00
	o0 = Mem0[o1 + 804:word32]
	l1 = sp + 0x00000060
	Mem0[l1:word32] = o0
	l0 = 0x00000000 | 0x00000001
	l2 = 0x0002B400
	goto l00012B98
	// succ:  l00012B98
l00012B64_ds_f:
	o3 = l0 + 0x00000001
	goto l00012BB4
	// succ:  l00012BB4
l00012B64_ds_t:
	o3 = l0 + 0x00000001
	goto l00012BCC
	// succ:  l00012BCC
l00012B98:
	o0 = (word32) Mem0[i0:byte]
	o2 = l2 | 0x00000011
	o1 = (word32) Mem0[o0 + o2:byte]
	g2 = l0 << 0x00000002
	g0 = o1 & 0x00000008
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012B64_ds_t
	goto l00012B64_ds_f
	// succ:  l00012B64_ds_f l00012B64_ds_t
l00012BB4:
	i0 = i0 + 0x00000001
	// succ:  l00012BB8
l00012BB8:
	o0 = (word32) Mem0[i0:byte]
	o1 = (word32) Mem0[o0 + o2:byte]
	g0 = o1 & 0x00000008
	NZVC = cond(g0)
	branch Test(NE,Z) l00012BB8_ds_t
	goto l00012BCC
	// succ:  l00012BCC l00012BB8_ds_t
l00012BB8_ds_t:
	i0 = i0 + 0x00000001
	goto l00012BB8
	// succ:  l00012BB8
l00012BCC:
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012BCC_ds_t
	// succ:  l00012BCC_ds_f l00012BCC_ds_t
l00012BCC_ds_f:
	o1 = (word32) Mem0[i0:byte]
	goto l00012BDC
	// succ:  l00012BDC
l00012BCC_ds_t:
	o1 = (word32) Mem0[i0:byte]
	goto l00012D00
	// succ:  l00012D00
l00012BDC:
	o2 = l2 | 0x00000011
	o0 = (word32) Mem0[o1 + o2:byte]
	g0 = o0 & 0x00000008
	NZVC = cond(g0)
	branch Test(NE,Z) l00012BDC_ds_t
	// succ:  l00012BDC_ds_f l00012BDC_ds_t
l00012BDC_ds_f:
	o3 = 0x00000000 | i0
	goto l00012BF0
	// succ:  l00012BF0
l00012BDC_ds_t:
	o3 = 0x00000000 | i0
	goto l00012C14
	// succ:  l00012C14
l00012BF0:
	i0 = i0 + 0x00000001
	goto l00012BF4
	// succ:  l00012BF4
l00012BF0_ds_f:
	o1 = (word32) Mem0[i0:byte]
	goto l00012C04
	// succ:  l00012C04
l00012BF0_ds_t:
	o1 = (word32) Mem0[i0:byte]
	goto l00012C14
	// succ:  l00012C14
l00012BF4:
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012BF0_ds_t
	goto l00012BF0_ds_f
	// succ:  l00012BF0_ds_f l00012BF0_ds_t
l00012C04:
	o0 = (word32) Mem0[o1 + o2:byte]
	g0 = o0 & 0x00000008
	NZVC = cond(g0)
	branch Test(EQ,Z) l00012C04_ds_t
	goto l00012C14
	// succ:  l00012C14 l00012C04_ds_t
l00012C04_ds_t:
	i0 = i0 + 0x00000001
	goto l00012BF4
	// succ:  l00012BF4
l00012C14:
	o0 = (int32) Mem0[o3:int8]
	g0 = o0 - 0x0000002D
	NZVC = cond(g0)
	branch Test(NE,Z) l00012C14_ds_t
	// succ:  l00012C14_ds_f l00012C14_ds_t
l00012C14_ds_f:
	o0 = 0x00000000 | o3
	goto l00012C24
	// succ:  l00012C24
l00012C14_ds_t:
	o0 = 0x00000000 | o3
	goto l00012CD8
	// succ:  l00012CD8
l00012C24:
	o0 = (word32) Mem0[o3 + 1:byte]
	o0 = o0 + 0xFFFFFFB1
	o0 = o0 << 0x00000018
	o1 = o0 >> 0x00000018
	g0 = o1 - 0x00000020
	NZVC = cond(g0)
	branch Test(UGE,ZC) l00012C24_ds_t
	// succ:  l00012C24_ds_f l00012C24_ds_t
l00012C24_ds_f:
	o0 = 0x00012C00
	goto l00012C40
	// succ:  l00012C40
l00012C24_ds_t:
	o0 = 0x00012C00
	goto l00012CD4
	// succ:  l00012CD4
l00012C40:
	o0 = o0 | 0x000001A8
	o1 = o1 << 0x00000002
	o2 = Mem0[o0 + o1:word32]
	return
	// succ:  munge_compile_params_exit
l00012CD4:
	o0 = 0x00000000 | o3
	// succ:  l00012CD8
l00012CD8:
	o1 = i0 - o0
	call dupnstr (retsize: 0;)
	o1 = l0 << 0x00000002
	Mem0[l1 + o1:word32] = o0
	l0 = l0 + 0x00000001
	o0 = (int32) Mem0[i0:int8]
	g2 = l0 << 0x00000002
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00012CD8_ds_t
	// succ:  l00012CD8_ds_f l00012CD8_ds_t
l00012CD8_ds_f:
	o3 = l0 + 0x00000001
	goto l00012D00
	// succ:  l00012D00
l00012CD8_ds_t:
	o3 = l0 + 0x00000001
	goto l00012B98
	// succ:  l00012B98
l00012D00:
	l0 = 0x00000000 | o3
	o0 = 0x00027C00
	Mem0[o0 + 840:word32] = l0
	o2 = l0 << 0x00000002
	l0 = l0 + 0x00000001
	o3 = l0 << 0x00000002
	l0 = l0 + 0x00000001
	o4 = l0 << 0x00000002
	l0 = l0 + 0x00000001
	o0 = 0x00017000
	o5 = l0 << 0x00000002
	o0 = o0 | 0x00000220
	Mem0[l1 + g2:word32] = o0
	l0 = l0 + 0x00000001
	o1 = 0x00027C00
	Mem0[o1 + 836:word32] = l0
	o0 = 0x00017000
	Mem0[l1 + o2:word32] = 0x00000000
	o0 = o0 | 0x00000230
	o1 = 0x00017000
	Mem0[l1 + o3:word32] = o0
	o2 = l0 << 0x00000002
	o1 = o1 | 0x00000238
	Mem0[l1 + o4:word32] = o1
	l0 = l0 + 0x00000001
	o0 = 0x00017000
	o1 = l0 << 0x00000002
	o0 = o0 | 0x00000240
	Mem0[l1 + o5:word32] = o0
	l0 = l0 + 0x00000001
	Mem0[l1 + o2:word32] = 0x00000000
	o0 = l0 + 0x00000001
	Mem0[l1 + o1:word32] = 0x00000000
	o0 = o0 << 0x00000002
	call xmalloc (retsize: 0;)
	o1 = 0x00027C00
	Mem0[o1 + 828:word32] = o0
	o1 = 0x00000000 | l1
	o2 = l0 << 0x00000002
	call memcpy (retsize: 0;)
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	l0 = 0x00000000 | o3
	o0 = 0x00027C00
	Mem0[o0 + 840:word32] = l0
	o2 = l0 << 0x00000002
	l0 = l0 + 0x00000001
	o3 = l0 << 0x00000002
	l0 = l0 + 0x00000001
	o4 = l0 << 0x00000002
	l0 = l0 + 0x00000001
	o0 = 0x00017000
	o5 = l0 << 0x00000002
	o0 = o0 | 0x00000220
	Mem0[l1 + g2:word32] = o0
	l0 = l0 + 0x00000001
	o1 = 0x00027C00
	Mem0[o1 + 836:word32] = l0
	o0 = 0x00017000
	Mem0[l1 + o2:word32] = 0x00000000
	o0 = o0 | 0x00000230
	o1 = 0x00017000
	Mem0[l1 + o3:word32] = o0
	o2 = l0 << 0x00000002
	o1 = o1 | 0x00000238
	Mem0[l1 + o4:word32] = o1
	l0 = l0 + 0x00000001
	o0 = 0x00017000
	o1 = l0 << 0x00000002
	o0 = o0 | 0x00000240
	Mem0[l1 + o5:word32] = o0
	l0 = l0 + 0x00000001
	Mem0[l1 + o2:word32] = 0x00000000
	o0 = l0 + 0x00000001
	Mem0[l1 + o1:word32] = 0x00000000
	o0 = o0 << 0x00000002
	call xmalloc (retsize: 0;)
	o1 = 0x00027C00
	Mem0[o1 + 828:word32] = o0
	o1 = 0x00000000 | l1
	o2 = l0 << 0x00000002
	call memcpy (retsize: 0;)
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  munge_compile_params_exit munge_compile_params_exit
munge_compile_params_exit:


// gen_aux_info_file
// Return size: 0
define gen_aux_info_file
gen_aux_info_file_entry:
	// succ:  l00012E2C
l00012E2C:
	sp = fp
	v3 = sp + 0xFFFFFF78
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	l2 = 0x00027C00
	o0 = Mem0[l2 + 836:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00012E2C_ds_t
	// succ:  l00012E2C_ds_f l00012E2C_ds_t
l00012E2C_ds_f:
	o1 = 0x00000000 | i0
	goto l00012E44
	// succ:  l00012E44
l00012E2C_ds_t:
	o1 = 0x00000000 | i0
	goto l00012E54
	// succ:  l00012E54
l00012E44:
	o0 = 0x00017000
	o0 = o0 | 0x00000218
	call munge_compile_params (retsize: 0;)
	o1 = 0x00000000 | i0
	// succ:  l00012E54
l00012E54:
	o0 = 0x00000000 | 0x00000000
	call shortpath (retsize: 0;)
	o1 = Mem0[l2 + 836:word32]
	l1 = 0x00027C00
	o2 = Mem0[l1 + 828:word32]
	l0 = 0x00000000 | o0
	o1 = o1 << 0x00000002
	Mem0[o2 + o1:word32] = l0
	call strlen (retsize: 0;)
	o1 = 0x00000000 | o0
	o2 = 0x00016C00
	o0 = 0x00000000 | l0
	o2 = o2 | 0x00000300
	o3 = 0x00000000 | 0x00000002
	call savestring2 (retsize: 0;)
	o1 = 0x00027C00
	o2 = Mem0[o1 + 840:word32]
	o3 = 0x00027C00
	o1 = Mem0[o3 + 812:word32]
	o2 = o2 << 0x00000002
	o4 = Mem0[l1 + 828:word32]
	i0 = 0x00000000 | l1
	Mem0[o4 + o2:word32] = o0
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00012E54_ds_t
	// succ:  l00012E54_ds_f l00012E54_ds_t
l00012E54_ds_f:
	l0 = 0x00028000
	goto l00012EBC
	// succ:  l00012EBC
l00012E54_ds_t:
	l0 = 0x00028000
	goto l00012ED8
	// succ:  l00012ED8
l00012EBC:
	o1 = Mem0[l2 + 836:word32]
	o0 = 0x00017000
	o1 = o1 << 0x00000002
	o2 = Mem0[o4 + o1:word32]
	o0 = o0 | 0x00000250
	o1 = Mem0[l0 + 336:word32]
	call notice (retsize: 0;)
l00012ED8:
	call choose_temp_base (retsize: 0;)
	o1 = Mem0[i0 + 828:word32]
	o3 = 0x00000000 | o0
	o0 = Mem0[o1:word32]
	o4 = 0x00000000 | 0x00000007
	o2 = Mem0[l0 + 336:word32]
	o5 = i6 + 0xFFFFFFE8
	Mem0[sp + 92:word32] = o4
	o4 = i6 + 0xFFFFFFEC
	call pexecute (retsize: 0;)
	g0 = o0 - 0xFFFFFFFF
	NZVC = cond(g0)
	branch Test(NE,Z) l00012ED8_ds_t
	// succ:  l00012ED8_ds_f l00012ED8_ds_t
l00012ED8_ds_f:
	o1 = i6 + 0xFFFFFFE4
	goto l00012F10
	// succ:  l00012F10
l00012ED8_ds_t:
	o1 = i6 + 0xFFFFFFE4
	goto l00012F6C
	// succ:  l00012F6C
l00012F10:
	o0 = 0x0002B400
	l2 = Mem0[o0 + 864:word32]
	l1 = 0x0002B400
	l1 = l1 | 0x00000240
	o2 = Mem0[l0 + 336:word32]
	o1 = 0x00017000
	o1 = o1 | 0x00000268
	o0 = 0x00000000 | l1
	call fprintf (retsize: 0;)
	o1 = Mem0[i6 + -20:word32]
	o0 = 0x00000000 | l1
	o2 = Mem0[i6 + -24:word32]
	i0 = 0x00000000 | 0x00000000
	call fprintf (retsize: 0;)
	l0 = 0x00017000
	l0 = l0 | 0x00000270
	o0 = 0x00000000 | l2
	call xstrerror (retsize: 0;)
	o2 = 0x00000000 | o0
	o0 = 0x00000000 | l1
	o1 = 0x00000000 | l0
	call fprintf (retsize: 0;)
	o2 = 0x00000000 | 0x00000000
	call pwait (retsize: 0;)
	goto l0001302C
	// succ:  l0001302C
l00012F6C:
	o2 = 0x00000000 | 0x00000000
	call pwait (retsize: 0;)
l0001302C:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  gen_aux_info_file_exit
gen_aux_info_file_exit:


// process_aux_info_file
// Return size: 0
define process_aux_info_file
process_aux_info_file_entry:
	// succ:  l00013034
l00013034:
	sp = fp
	v3 = sp + 0xFFFFFF08
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00000000 | i0
	call strlen (retsize: 0;)
	i3 = 0x00000000 | o0
	o0 = i3 + 0x0000000A
	o0 = o0 & 0xFFFFFFF8
	sp = sp - o0
	l4 = sp + 0x00000060
	o1 = 0x00000000 | i0
	o0 = 0x00000000 | l4
	call strcpy (retsize: 0;)
	o1 = 0x00016C00
	o1 = o1 | 0x00000300
	o0 = 0x00000000 | l4
	call strcat (retsize: 0;)
	l2 = 0x00000000 | 0x00000000
	goto l00013074
	// succ:  l00013074
l00013034_ds_f:
	g0 = l2 - 0x00000000
	NZVC = cond(g0)
	goto l0001308C
	// succ:  l0001308C
l00013034_ds_t:
	g0 = l2 - 0x00000000
	NZVC = cond(g0)
	goto l00013100
	// succ:  l00013100
l00013074:
	o0 = 0x00000000 | l4
	// succ:  l00013078
l00013078:
	o1 = 0x00000000 | 0x00000004
	call access (retsize: 0;)
	g0 = o0 - 0xFFFFFFFF
	NZVC = cond(g0)
	branch Test(NE,Z) l00013034_ds_t
	goto l00013034_ds_f
	// succ:  l00013034_ds_f l00013034_ds_t
l0001308C:
	o0 = 0x0002B400
	l3 = Mem0[o0 + 864:word32]
	g0 = l3 - 0x00000002
	NZVC = cond(g0)
	branch Test(NE,Z) l0001308C_ds_t
	// succ:  l0001308C_ds_f l0001308C_ds_t
l0001308C_ds_f:
	o0 = 0x00028000
	goto l000130A0
	// succ:  l000130A0
l0001308C_ds_t:
	o0 = 0x00028000
	goto l000130C8
	// succ:  l000130C8
l000130A0:
	g0 = i2 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000130A0_ds_t
	// succ:  l000130A0_ds_f l000130A0_ds_t
l000130A0_ds_f:
	o1 = Mem0[o0 + 336:word32]
	goto l000130AC
	// succ:  l000130AC
l000130A0_ds_t:
	o1 = Mem0[o0 + 336:word32]
	goto l000130C0
	// succ:  l000130C0
l000130AC:
	o2 = 0x00000000 | l4
	o0 = 0x00017000
	o0 = o0 | 0x000002D0
	call notice (retsize: 0;)
	l2 = 0x00000000 | 0x00000001
	// succ:  l000130FC l000135B8
l000130C0:
	l2 = 0x00000000 | 0x00000001
	goto l000130FC
	// succ:  l000130FC
l000130C8:
	l2 = Mem0[o0 + 336:word32]
	l0 = 0x00017000
	o1 = 0x00000000 | l4
	l0 = l0 | 0x00000300
	o0 = 0x00000000 | 0x00000000
	call shortpath (retsize: 0;)
	l1 = 0x00000000 | o0
	o0 = 0x00000000 | l3
	call xstrerror (retsize: 0;)
	o3 = 0x00000000 | o0
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l2
	goto l000131F0
	// succ:  l000131F0
l000130FC:
	g0 = l2 - 0x00000000
	NZVC = cond(g0)
	// succ:  l00013100
l00013100:
	branch Test(EQ,Z) l00013100_ds_t
	// succ:  l00013100_ds_f l00013100_ds_t
l00013100_ds_f:
	l1 = i6 + 0xFFFFFF68
	goto l00013108
	// succ:  l00013108
l00013100_ds_t:
	l1 = i6 + 0xFFFFFF68
	goto l00013150
	// succ:  l00013150
l00013108:
	o0 = 0x00000000 | i0
	call gen_aux_info_file (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013108_ds_t
	// succ:  l00013108_ds_f l00013108_ds_t
l00013108_ds_f:
	o0 = 0x00000000 | l4
	goto l0001311C
	// succ:  l0001311C
l00013108_ds_t:
	o0 = 0x00000000 | l4
	goto l000131F8
	// succ:  l000131F8
l0001311C:
	o1 = 0x00000000 | 0x00000004
	call access (retsize: 0;)
	g0 = o0 - 0xFFFFFFFF
	NZVC = cond(g0)
	branch Test(NE,Z) l0001311C_ds_t
	// succ:  l0001311C_ds_f l0001311C_ds_t
l0001311C_ds_f:
	l1 = i6 + 0xFFFFFF68
	goto l00013130
	// succ:  l00013130
l0001311C_ds_t:
	l1 = i6 + 0xFFFFFF68
	goto l00013150
	// succ:  l00013150
l00013130:
	o0 = 0x0002B400
	o1 = 0x00028000
	l2 = Mem0[o0 + 864:word32]
	l0 = 0x00017000
	l3 = Mem0[o1 + 336:word32]
	l0 = l0 | 0x00000300
	o1 = 0x00000000 | l4
	goto l000131D0
	// succ:  l000131D0
l00013150:
	o0 = 0x00000000 | l4
	o1 = 0x00000000 | l1
	call stat (retsize: 0;)
	g0 = o0 - 0xFFFFFFFF
	NZVC = cond(g0)
	branch Test(NE,Z) l00013150_ds_t
	// succ:  l00013150_ds_f l00013150_ds_t
l00013150_ds_f:
	l0 = Mem0[i6 + -104:word32]
	goto l00013168
	// succ:  l00013168
l00013150_ds_t:
	l0 = Mem0[i6 + -104:word32]
	goto l00013188
	// succ:  l00013188
l00013168:
	o0 = 0x0002B400
	o1 = 0x00028000
	l2 = Mem0[o0 + 864:word32]
	l0 = 0x00017000
	l3 = Mem0[o1 + 336:word32]
	l0 = l0 | 0x00000328
	o1 = 0x00000000 | l4
	goto l000131D0
	// succ:  l000131D0
l00013188:
	g0 = l0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013188_ds_t
	// succ:  l00013188_ds_f l00013188_ds_t
l00013188_ds_f:
	g0 = i2 - 0x00000000
	NZVC = cond(g0)
	goto l00013194
	// succ:  l00013194
l00013188_ds_t:
	g0 = i2 - 0x00000000
	NZVC = cond(g0)
	goto l000135B8
	// succ:  l000135B8
l00013194:
	branch Test(NE,Z) l00013194_ds_t
	// succ:  l00013194_ds_f l00013194_ds_t
l00013194_ds_f:
	l7 = Mem0[i6 + -88:word32]
	goto l0001319C
	// succ:  l0001319C
l00013194_ds_t:
	l7 = Mem0[i6 + -88:word32]
	goto l00013218
	// succ:  l00013218
l0001319C:
	o1 = 0x00000000 | l1
	o0 = 0x00000000 | i0
	call stat (retsize: 0;)
	g0 = o0 - 0xFFFFFFFF
	NZVC = cond(g0)
	branch Test(NE,Z) l0001319C_ds_t
	// succ:  l0001319C_ds_f l0001319C_ds_t
l0001319C_ds_f:
	o0 = Mem0[i6 + -88:word32]
	goto l000131B4
	// succ:  l000131B4
l0001319C_ds_t:
	o0 = Mem0[i6 + -88:word32]
	goto l0001320C
	// succ:  l0001320C
l000131B4:
	o0 = 0x0002B400
	o1 = 0x00028000
	l2 = Mem0[o0 + 864:word32]
	l0 = 0x00017000
	l3 = Mem0[o1 + 336:word32]
	l0 = l0 | 0x00000328
	o1 = 0x00000000 | i0
	// succ:  l000131D0
l000131D0:
	o0 = 0x00000000 | 0x00000000
	call shortpath (retsize: 0;)
	l1 = 0x00000000 | o0
	o0 = 0x00000000 | l2
	call xstrerror (retsize: 0;)
	o3 = 0x00000000 | o0
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l3
	// succ:  l000131F0
l000131F0:
	o2 = 0x00000000 | l1
	call notice (retsize: 0;)
l000131F8:
	o1 = 0x00027C00
	o0 = Mem0[o1 + 800:word32]
	o0 = o0 + 0x00000001
	Mem0[o1 + 800:word32] = o0
	goto l000135B8
	// succ:  l000135B8
l0001320C:
	g0 = o0 - l7
	NZVC = cond(g0)
	branch Test(GT,NZV) l0001320C_ds_t
	goto l00013218
	// succ:  l00013218 l0001320C_ds_t
l0001320C_ds_t:
	l2 = 0x00000000 | 0x00000001
	goto l00013074
	// succ:  l00013074
l00013218:
	o0 = 0x00000000 | l4
	o1 = 0x00000000 | 0x00000000
	o2 = 0x00000000 | 0x00000124
	call open (retsize: 0;)
	l5 = 0x00000000 | o0
	g0 = l5 - 0xFFFFFFFF
	NZVC = cond(g0)
	branch Test(NE,Z) l00013218_ds_t
	// succ:  l00013218_ds_f l00013218_ds_t
l00013218_ds_f:
	o0 = 0x0002B400
	goto l00013238
	// succ:  l00013238
l00013218_ds_t:
	o0 = 0x0002B400
	goto l00013250
	// succ:  l00013250
l00013238:
	o1 = 0x00028000
	l2 = Mem0[o0 + 864:word32]
	l0 = 0x00017000
	l3 = Mem0[o1 + 336:word32]
	l0 = l0 | 0x00000358
	goto l00013314
	// succ:  l00013314
l00013250:
	o0 = l0 + 0x00000001
	call xmalloc (retsize: 0;)
	l6 = 0x00000000 | o0
	Mem0[l6 + l0:byte] = (byte) 0x00000000
	o0 = 0x00000000 | l5
	o1 = 0x00000000 | l6
	o2 = 0x00000000 | l0
	call safe_read (retsize: 0;)
	g0 = o0 - l0
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013250_ds_t
	// succ:  l00013250_ds_f l00013250_ds_t
l00013250_ds_f:
	o0 = 0x0002B400
	goto l0001327C
	// succ:  l0001327C
l00013250_ds_t:
	o0 = 0x0002B400
	goto l00013294
	// succ:  l00013294
l0001327C:
	o1 = 0x00028000
	l2 = Mem0[o0 + 864:word32]
	l0 = 0x00017000
	l3 = Mem0[o1 + 336:word32]
	l0 = l0 | 0x00000390
	goto l000132BC
	// succ:  l000132BC
l00013294:
	o0 = 0x00000000 | l5
	call close (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013294_ds_t
	// succ:  l00013294_ds_f l00013294_ds_t
l00013294_ds_f:
	o0 = 0x0002B400
	goto l000132A8
	// succ:  l000132A8
l00013294_ds_t:
	o0 = 0x0002B400
	goto l00013344
	// succ:  l00013344
l000132A8:
	o1 = 0x00028000
	l2 = Mem0[o0 + 864:word32]
	l0 = 0x00017000
	l3 = Mem0[o1 + 336:word32]
	l0 = l0 | 0x000003C0
	// succ:  l000132BC
l000132BC:
	o1 = 0x00000000 | l4
	o0 = 0x00000000 | 0x00000000
	call shortpath (retsize: 0;)
	l1 = 0x00000000 | o0
	o0 = 0x00000000 | l2
	call xstrerror (retsize: 0;)
	o3 = 0x00000000 | o0
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l3
	o2 = 0x00000000 | l1
	call notice (retsize: 0;)
	o0 = 0x00000000 | l6
	call free (retsize: 0;)
	o0 = 0x00000000 | l5
	call close (retsize: 0;)
	o0 = 0x0002B400
l000132FC:
	o0 = 0x0002B400
	o1 = 0x00028000
	l2 = Mem0[o0 + 864:word32]
	l0 = 0x00017400
	l3 = Mem0[o1 + 336:word32]
	l0 = l0 | 0x00000020
	// succ:  l000135B8 l00013314
l00013314:
	o1 = 0x00000000 | l4
	o0 = 0x00000000 | 0x00000000
	call shortpath (retsize: 0;)
	l1 = 0x00000000 | o0
	o0 = 0x00000000 | l2
	call xstrerror (retsize: 0;)
	o3 = 0x00000000 | o0
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l3
	o2 = 0x00000000 | l1
	call notice (retsize: 0;)
	g0 = l2 - 0x00000000
	NZVC = cond(g0)
l00013344:
	g0 = l2 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013344_ds_t
	// succ:  l00013344_ds_f l00013344_ds_t
l00013344_ds_f:
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	goto l00013350
	// succ:  l00013350
l00013344_ds_t:
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	goto l000133B0
	// succ:  l000133B0
l00013350:
	branch Test(NE,Z) l00013350_ds_t
	goto l00013358
	// succ:  l00013358 l00013350_ds_t
l00013350_ds_t:
	o0 = (int32) Mem0[l6:int8]
	goto l000133B4
	// succ:  l000133B4
l00013358:
	o0 = 0x00000000 | l4
	call unlink (retsize: 0;)
	g0 = o0 - 0xFFFFFFFF
	NZVC = cond(g0)
	branch Test(NE,Z) l00013358_ds_t
	goto l0001336C
	// succ:  l0001336C l00013358_ds_t
l00013358_ds_t:
	o0 = (int32) Mem0[l6:int8]
	goto l000133B4
	// succ:  l000133B4
l0001336C:
	o0 = 0x0002B400
	o1 = 0x00028000
	l2 = Mem0[o0 + 864:word32]
	l0 = 0x00017000
	l3 = Mem0[o1 + 336:word32]
	l0 = l0 | 0x000003F0
	o1 = 0x00000000 | l4
	o0 = 0x00000000 | 0x00000000
	call shortpath (retsize: 0;)
	l1 = 0x00000000 | o0
	o0 = 0x00000000 | l2
	call xstrerror (retsize: 0;)
	o3 = 0x00000000 | o0
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l3
	o2 = 0x00000000 | l1
	call notice (retsize: 0;)
l000133B0:
	o0 = (int32) Mem0[l6:int8]
	// succ:  l000133B4
l000133B4:
	l1 = 0x00000000 | l6
	g0 = o0 - 0x0000003A
	NZVC = cond(g0)
	l0 = 0x00028000
	branch Test(EQ,Z) l000133B4_ds_t
	// succ:  l000133B4_ds_f l000133B4_ds_t
l000133B4_ds_f:
	l5 = 0x00028000
	goto l000133C8
	// succ:  l000133C8
l000133B4_ds_t:
	l5 = 0x00028000
	goto l000133DC
	// succ:  l000133DC
l000133C8:
	l1 = l1 + 0x00000001
	// succ:  l000133CC
l000133CC:
	o0 = (int32) Mem0[l1:int8]
	g0 = o0 - 0x0000003A
	NZVC = cond(g0)
	branch Test(NE,Z) l000133CC_ds_t
	goto l000133DC
	// succ:  l000133DC l000133CC_ds_t
l000133CC_ds_t:
	l1 = l1 + 0x00000001
	goto l000133CC
	// succ:  l000133CC
l000133DC:
	l1 = l1 + 0x00000001
	// succ:  l000133E0
l000133E0:
	o0 = (int32) Mem0[l1:int8]
	g0 = o0 - 0x00000020
	NZVC = cond(g0)
	branch Test(EQ,Z) l000133E0_ds_t
	goto l000133F0
	// succ:  l000133F0 l000133E0_ds_t
l000133E0_ds_t:
	l1 = l1 + 0x00000001
	goto l000133E0
	// succ:  l000133E0
l000133F0:
	Mem0[l0 + 400:word32] = l1
	// succ:  l000133F4
l000133F4:
	o0 = (int32) Mem0[l1:int8]
	g0 = o0 - 0x00000020
	NZVC = cond(g0)
	branch Test(NE,Z) l000133F4_ds_t
	goto l00013404
	// succ:  l00013404 l000133F4_ds_t
l000133F4_ds_t:
	l1 = l1 + 0x00000001
	goto l000133F4
	// succ:  l000133F4
l00013404:
	o0 = 0x00000000 | 0x0000002F
	Mem0[l1:byte] = (byte) o0
	l1 = l1 + 0x00000001
	Mem0[l1:byte] = (byte) 0x00000000
	l1 = l1 + 0x00000001
	// succ:  l00013418
l00013418:
	o0 = (int32) Mem0[l1:int8]
	g0 = o0 - 0x0000000A
	NZVC = cond(g0)
	branch Test(NE,Z) l00013418_ds_t
	// succ:  l00013418_ds_f l00013418_ds_t
l00013418_ds_f:
	l1 = l1 + 0x00000001
	goto l00013428
	// succ:  l00013428
l00013418_ds_t:
	l1 = l1 + 0x00000001
	goto l00013418
	// succ:  l00013418
l00013428:
	o1 = Mem0[l0 + 400:word32]
	o0 = (int32) Mem0[o1:int8]
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013428_ds_t
	// succ:  l00013428_ds_f l00013428_ds_t
l00013428_ds_f:
	l3 = 0x00000000 | 0x00000000
	goto l0001343C
	// succ:  l0001343C
l00013428_ds_t:
	l3 = 0x00000000 | 0x00000000
	goto l0001347C
	// succ:  l0001347C
l0001343C:
	o0 = l1 - o1
	o0 = i3 + o0
	call xmalloc (retsize: 0;)
	l3 = 0x00000000 | o0
	o1 = 0x00000000 | i0
	call strcpy (retsize: 0;)
	o0 = 0x00000000 | l3
	o1 = 0x00000000 | 0x0000002F
	call strrchr (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l0001343C_ds_t
	// succ:  l0001343C_ds_f l0001343C_ds_t
l0001343C_ds_f:
	o0 = o0 + 0x00000001
	goto l0001346C
	// succ:  l0001346C
l0001343C_ds_t:
	o0 = o0 + 0x00000001
	goto l00013470
	// succ:  l00013470
l0001346C:
	o0 = 0x00000000 | l3
	// succ:  l00013470
l00013470:
	o1 = Mem0[l0 + 400:word32]
	call strcpy (retsize: 0;)
	Mem0[l0 + 400:word32] = l3
	// succ:  l0001347C
l0001347C:
	g0 = i2 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l0001347C_ds_t
	// succ:  l0001347C_ds_f l0001347C_ds_t
l0001347C_ds_f:
	o0 = 0x00000000 | 0x00000002
	goto l00013488
	// succ:  l00013488
l0001347C_ds_t:
	o0 = 0x00000000 | 0x00000002
	goto l00013524
	// succ:  l00013524
l00013488:
	Mem0[l5 + 368:word32] = o0
	l0 = 0x00000000 | l1
	o0 = (int32) Mem0[l0:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013488_ds_t
	// succ:  l00013488_ds_f l00013488_ds_t
l00013488_ds_f:
	o0 = 0x00000000 | 0x00000002
	goto l000134A0
	// succ:  l000134A0
l00013488_ds_t:
	o0 = 0x00000000 | 0x00000002
	goto l00013524
	// succ:  l00013524
l000134A0:
	l2 = 0x00000000 | l5
	o0 = 0x00000000 | l0
	goto l000134A8
	// succ:  l000134A8
l000134A0_ds_t:
	o0 = (int32) Mem0[l0:int8]
	goto l000134F8
	// succ:  l000134F8
l000134A8:
	o1 = 0x00000000 | l7
	call referenced_file_is_newer (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000134A0_ds_t
	// succ:  l000134BC l000134A0_ds_t
l000134BC:
	o0 = 0x00000000 | l6
	call free (retsize: 0;)
	o0 = 0x00000000 | l3
	call xfree (retsize: 0;)
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000134BC_ds_t
	// succ:  l000134BC_ds_f l000134BC_ds_t
l000134BC_ds_f:
	l2 = 0x00000000 | 0x00000001
	goto l000134D8
	// succ:  l000134D8
l000134BC_ds_t:
	l2 = 0x00000000 | 0x00000001
	goto l00013074
	// succ:  l00013074
l000134D8:
	o0 = 0x00000000 | l4
	call unlink (retsize: 0;)
	g0 = o0 - 0xFFFFFFFF
	NZVC = cond(g0)
	branch Test(EQ,Z) l000134D8_ds_t
	// succ:  l000134D8_ds_f l000134D8_ds_t
l000134D8_ds_f:
	l2 = 0x00000000 | 0x00000001
	goto l000134EC
	// succ:  l000134EC
l000134D8_ds_t:
	l2 = 0x00000000 | 0x00000001
	goto l000132FC
	// succ:  l000132FC
l000134EC:
	o0 = 0x00000000 | l4
	goto l00013078
	// succ:  l00013078
l000134F4:
	o0 = (int32) Mem0[l0:int8]
	// succ:  l000134F8
l000134F8:
	g0 = o0 - 0x0000000A
	NZVC = cond(g0)
	branch Test(NE,Z) l000134F8_ds_t
	// succ:  l000134F8_ds_f l000134F8_ds_t
l000134F8_ds_f:
	l0 = l0 + 0x00000001
	goto l00013504
	// succ:  l00013504
l000134F8_ds_t:
	l0 = l0 + 0x00000001
	goto l000134F4
	// succ:  l000134F4
l00013504:
	o0 = Mem0[l2 + 368:word32]
	o0 = o0 + 0x00000001
	Mem0[l2 + 368:word32] = o0
	o1 = (int32) Mem0[l0:int8]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00013504_ds_t
	// succ:  l00013504_ds_f l00013504_ds_t
l00013504_ds_f:
	o0 = 0x00000000 | l0
	goto l00013520
	// succ:  l00013520
l00013504_ds_t:
	o0 = 0x00000000 | l0
	goto l000134A8
	// succ:  l000134A8
l00013520:
	o0 = 0x00000000 | 0x00000002
	// succ:  l00013524
l00013524:
	Mem0[l5 + 368:word32] = o0
	l0 = 0x00000000 | l1
	o0 = (int32) Mem0[l0:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013524_ds_t
	// succ:  l00013524_ds_f l00013524_ds_t
l00013524_ds_f:
	goto l0001353C
	// succ:  l0001353C
l00013524_ds_t:
	goto l000135A8
	// succ:  l000135A8
l0001353C:
	l2 = 0x00000000 | l5
	goto l00013540
	// succ:  l00013540
l0001353C_ds_t:
	o0 = 0x00000000 | l0
	goto l0001356C
	// succ:  l0001356C
l00013540:
	o0 = 0x00000000 | l0
	call unexpand_if_needed (retsize: 0;)
	l1 = o0 | 0x00000000
	NZVC = cond(l1)
	branch Test(EQ,Z) l0001353C_ds_t
	// succ:  l00013554 l0001353C_ds_t
l00013554:
	o1 = 0x00000000 | i2
	call save_def_or_dec (retsize: 0;)
	o0 = 0x00000000 | l1
	call free (retsize: 0;)
	o0 = (int32) Mem0[l0:int8]
	goto l00013580
	// succ:  l00013580
l0001356C:
	o1 = 0x00000000 | i2
	call save_def_or_dec (retsize: 0;)
	o0 = (int32) Mem0[l0:int8]
	goto l00013580
	// succ:  l00013580
l0001357C:
	o0 = (int32) Mem0[l0:int8]
	// succ:  l00013580
l00013580:
	g0 = o0 - 0x0000000A
	NZVC = cond(g0)
	branch Test(NE,Z) l00013580_ds_t
	// succ:  l00013580_ds_f l00013580_ds_t
l00013580_ds_f:
	l0 = l0 + 0x00000001
	goto l0001358C
	// succ:  l0001358C
l00013580_ds_t:
	l0 = l0 + 0x00000001
	goto l0001357C
	// succ:  l0001357C
l0001358C:
	o0 = Mem0[l2 + 368:word32]
	o0 = o0 + 0x00000001
	Mem0[l2 + 368:word32] = o0
	o1 = (int32) Mem0[l0:int8]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l0001358C_ds_t
	// succ:  l0001358C_ds_f l0001358C_ds_t
l0001358C_ds_f:
	goto l000135A8
	// succ:  l000135A8
l0001358C_ds_t:
	goto l00013540
	// succ:  l00013540
l000135A8:
	o0 = 0x00000000 | l6
	call free (retsize: 0;)
	o0 = 0x00000000 | l3
	call xfree (retsize: 0;)
	// succ:  l000135B8
l000135B8:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  process_aux_info_file_exit
process_aux_info_file_exit:


// reverse_def_dec_list
// Return size: 0
define reverse_def_dec_list
reverse_def_dec_list_entry:
	// succ:  l000135C0
l000135C0:
	sp = fp
	o1 = Mem0[o0 + 8:word32]
	g3 = Mem0[o1 + 4:word32]
	g0 = g3 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000135C0_ds_t
	// succ:  l000135C0_ds_f l000135C0_ds_t
l000135C0_ds_f:
	o0 = 0x00000000 | g3
	goto l000135D4
	// succ:  l000135D4
l000135C0_ds_t:
	o0 = 0x00000000 | g3
	goto l00013604
	// succ:  l00013604
l000135D4:
	g3 = Mem0[o0:word32]
	g0 = g3 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000135D4_ds_t
	// succ:  l000135D4_ds_f l000135D4_ds_t
l000135D4_ds_f:
	goto l000135E4
	// succ:  l000135E4
l000135D4_ds_t:
	goto l00013604
	// succ:  l00013604
l000135E4:
	Mem0[o0:word32] = 0x00000000
	g2 = Mem0[g3:word32]
	// succ:  l000135EC
l000135EC:
	Mem0[g3:word32] = o0
	o0 = 0x00000000 | g3
	g3 = g2 | 0x00000000
	NZVC = cond(g3)
	branch Test(NE,Z) l000135EC_ds_t
	goto l00013600
	// succ:  l00013600 l000135EC_ds_t
l000135EC_ds_t:
	g2 = Mem0[g3:word32]
	goto l000135EC
	// succ:  l000135EC
l00013600:
	Mem0[o1 + 4:word32] = o0
	// succ:  l00013604
l00013604:
	return
	// succ:  reverse_def_dec_list_exit
reverse_def_dec_list_exit:


// identify_lineno
// Return size: 0
define identify_lineno
identify_lineno_entry:
	// succ:  l0001360C
l0001360C:
	sp = fp
	g2 = 0x00028000
	g3 = Mem0[g2 + 448:word32]
	o1 = 0x00000000 | o0
	g0 = g3 - o1
	NZVC = cond(g0)
	branch Test(UGE,ZC) l0001360C_ds_t
	// succ:  l0001360C_ds_f l0001360C_ds_t
l0001360C_ds_f:
	o0 = 0x00000000 | 0x00000001
	goto l00013624
	// succ:  l00013624
l0001360C_ds_t:
	o0 = 0x00000000 | 0x00000001
	goto l00013644
	// succ:  l00013644
l00013624:
	g2 = (int32) Mem0[g3:int8]
	goto l00013628
	// succ:  l00013628
l00013624_ds_t:
	o0 = o0 + 0x00000001
	goto l00013634
	// succ:  l00013634
l00013628:
	g0 = g2 - 0x0000000A
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013624_ds_t
	// succ:  l00013634 l00013624_ds_t
l00013634:
	g3 = g3 + 0x00000001
	g0 = g3 - o1
	NZVC = cond(g0)
	branch Test(ULE,ZC) l00013634_ds_t
	goto l00013644
	// succ:  l00013644 l00013634_ds_t
l00013634_ds_t:
	g2 = (int32) Mem0[g3:int8]
	goto l00013628
	// succ:  l00013628
l00013644:
	return
	// succ:  identify_lineno_exit
identify_lineno_exit:


// declare_source_confusing
// Return size: 0
define declare_source_confusing
declare_source_confusing_entry:
	// succ:  l0001364C
l0001364C:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00027C00
	o1 = Mem0[o0 + 812:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l0001364C_ds_t
	goto l00013664
	// succ:  l00013664 l0001364C_ds_t
l0001364C_ds_t:
	o0 = 0x0002B000
	goto l000136D4
	// succ:  l000136D4
l00013664:
	g0 = i0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00013664_ds_t
	// succ:  l00013664_ds_f l00013664_ds_t
l00013664_ds_f:
	o0 = 0x00028000
	goto l00013670
	// succ:  l00013670
l00013664_ds_t:
	o0 = 0x00028000
	goto l000136A0
	// succ:  l000136A0
l00013670:
	o1 = Mem0[o0 + 384:word32]
	l0 = 0x00017400
	l0 = l0 | 0x00000040
	o0 = 0x00000000 | 0x00000000
	call shortpath (retsize: 0;)
	o3 = 0x00028000
	o1 = 0x00000000 | o0
	o2 = Mem0[o3 + 560:word32]
	o0 = 0x00000000 | l0
	call notice (retsize: 0;)
	o0 = 0x0002B000
	goto l000136D4
	// succ:  l000136D4
l000136A0:
	o1 = Mem0[o0 + 384:word32]
	l0 = 0x00017400
	l0 = l0 | 0x00000040
	o0 = 0x00000000 | 0x00000000
	call shortpath (retsize: 0;)
	l1 = 0x00000000 | o0
	o0 = 0x00000000 | i0
	call identify_lineno (retsize: 0;)
	o2 = 0x00000000 | o0
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l1
	call notice (retsize: 0;)
	o0 = 0x0002B000
	// succ:  l000136D4
l000136D4:
	o0 = o0 | 0x00000240
	o1 = 0x00000000 | 0x00000001
	call longjmp (retsize: 0;)
declare_source_confusing_exit:


// check_source
// Return size: 0
define check_source
check_source_entry:
	// succ:  l000136E0
l000136E0:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	g0 = i0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000136E0_ds_t
	// succ:  l000136E0_ds_f l000136E0_ds_t
l000136E0_ds_f:
	o0 = 0x00000000 | i1
	goto l000136F0
	// succ:  l000136F0
l000136E0_ds_t:
	o0 = 0x00000000 | i1
	goto l000136F8
	// succ:  l000136F8
l000136F0:
	call declare_source_confusing (retsize: 0;)
l000136F8:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  check_source_exit
check_source_exit:


// seek_to_line
// Return size: 0
define seek_to_line
seek_to_line_entry:
	// succ:  l00013700
l00013700:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o1 = 0x00028000
	o0 = Mem0[o1 + 560:word32]
	g0 = i0 - o0
	NZVC = cond(g0)
	branch Test(GE,NV) l00013700_ds_t
	// succ:  l00013700_ds_f l00013700_ds_t
l00013700_ds_f:
	goto l00013718
	// succ:  l00013718
l00013700_ds_t:
	goto l00013720
	// succ:  l00013720
l00013718:
	call abort (retsize: 0;)
l00013720:
	branch Test(LE,NZV) l00013720_ds_t
	// succ:  l00013720_ds_f l00013720_ds_t
l00013720_ds_f:
	l4 = 0x00028000
	goto l00013728
	// succ:  l00013728
l00013720_ds_t:
	l4 = 0x00028000
	goto l000137A0
	// succ:  l000137A0
l00013728:
	l3 = 0x00000000 | o1
	l2 = 0x00000000 | l4
	goto l00013730
	// succ:  l00013730
l00013728_ds_f:
	o1 = Mem0[l3 + 560:word32]
	goto l00013744
	// succ:  l00013744
l00013728_ds_t:
	o1 = Mem0[l3 + 560:word32]
	goto l00013788
	// succ:  l00013788
l00013730:
	o0 = Mem0[l2 + 544:word32]
	o1 = (int32) Mem0[o0:int8]
	g0 = o1 - 0x0000000A
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013728_ds_t
	goto l00013728_ds_f
	// succ:  l00013728_ds_f l00013728_ds_t
l00013744:
	l0 = 0x00028000
	l1 = 0x00028000
	o2 = Mem0[l0 + 544:word32]
	// succ:  l00013750
l00013750:
	o1 = 0x00000000 | 0x00000000
	o0 = Mem0[l1 + 464:word32]
	o2 = o2 + 0x00000001
	g0 = o2 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 + 0x00000000 + C
	Mem0[l0 + 544:word32] = o2
	call check_source (retsize: 0;)
	o0 = Mem0[l0 + 544:word32]
	o1 = (int32) Mem0[o0:int8]
	g0 = o1 - 0x0000000A
	NZVC = cond(g0)
	branch Test(NE,Z) l00013750_ds_t
	// succ:  l00013750_ds_f l00013750_ds_t
l00013750_ds_f:
	o2 = Mem0[l0 + 544:word32]
	goto l00013780
	// succ:  l00013780
l00013750_ds_t:
	o2 = Mem0[l0 + 544:word32]
	goto l00013750
	// succ:  l00013750
l00013780:
	o0 = Mem0[l2 + 544:word32]
	o1 = Mem0[l3 + 560:word32]
	// succ:  l00013788
l00013788:
	o0 = o0 + 0x00000001
	o1 = o1 + 0x00000001
	Mem0[l2 + 544:word32] = o0
	g0 = i0 - o1
	NZVC = cond(g0)
	branch Test(GT,NZV) l00013788_ds_t
	// succ:  l00013788_ds_f l00013788_ds_t
l00013788_ds_f:
	Mem0[l3 + 560:word32] = o1
	goto l000137A0
	// succ:  l000137A0
l00013788_ds_t:
	Mem0[l3 + 560:word32] = o1
	goto l00013730
	// succ:  l00013730
l000137A0:
	i0 = Mem0[l4 + 544:word32]
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	i0 = Mem0[l4 + 544:word32]
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  seek_to_line_exit seek_to_line_exit
seek_to_line_exit:


// forward_to_next_token_char
// Return size: 0
define forward_to_next_token_char
forward_to_next_token_char_entry:
	// succ:  l000137AC
l000137AC:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	i0 = i0 + 0x00000001
	o0 = (word32) Mem0[i0:byte]
	o1 = 0x0002B400
	o1 = o1 | 0x00000011
	o2 = (word32) Mem0[o0 + o1:byte]
	g0 = o2 & 0x00000008
	NZVC = cond(g0)
	branch Test(EQ,Z) l000137AC_ds_t
	// succ:  l000137AC_ds_f l000137AC_ds_t
l000137AC_ds_f:
	l1 = 0x00000000 | o1
	goto l000137D0
	// succ:  l000137D0
l000137AC_ds_t:
	l1 = 0x00000000 | o1
	goto l00013800
	// succ:  l00013800
l000137D0:
	l0 = 0x00028000
	o0 = Mem0[l0 + 464:word32]
	// succ:  l000137D8
l000137D8:
	i0 = i0 + 0x00000001
	g0 = i0 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 + 0x00000000 + C
	o1 = 0x00000000 | 0x00000000
	call check_source (retsize: 0;)
	o0 = (word32) Mem0[i0:byte]
	o1 = (word32) Mem0[o0 + l1:byte]
	g0 = o1 & 0x00000008
	NZVC = cond(g0)
	branch Test(NE,Z) l000137D8_ds_t
	// succ:  l000137D8_ds_f l000137D8_ds_t
l000137D8_ds_f:
	o0 = Mem0[l0 + 464:word32]
	goto l00013800
	// succ:  l00013800
l000137D8_ds_t:
	o0 = Mem0[l0 + 464:word32]
	goto l000137D8
	// succ:  l000137D8
l00013800:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  forward_to_next_token_char_exit
forward_to_next_token_char_exit:


// output_bytes
// Return size: 0
define output_bytes
output_bytes_entry:
	// succ:  l00013808
l00013808:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	l2 = 0x00028000
	o1 = Mem0[l2 + 528:word32]
	l3 = 0x00028000
	l0 = Mem0[l3 + 512:word32]
	o0 = i1 + 0x00000001
	o1 = o1 + o0
	g0 = o1 - l0
	NZVC = cond(g0)
	branch Test(ULT,C) l00013808_ds_t
	// succ:  l00013808_ds_f l00013808_ds_t
l00013808_ds_f:
	l1 = 0x00028000
	goto l00013830
	// succ:  l00013830
l00013808_ds_t:
	l1 = 0x00028000
	goto l00013864
	// succ:  l00013864
l00013830:
	o0 = Mem0[l1 + 496:word32]
	l0 = l0 - o0
	l0 = l0 << 0x00000001
	o1 = 0x00000000 | l0
	call xrealloc (retsize: 0;)
	o1 = Mem0[l2 + 528:word32]
	l0 = o0 + l0
	o2 = Mem0[l1 + 496:word32]
	Mem0[l3 + 512:word32] = l0
	o1 = o1 - o2
	o1 = o0 + o1
	Mem0[l2 + 528:word32] = o1
	Mem0[l1 + 496:word32] = o0
	// succ:  l00013864
l00013864:
	o0 = Mem0[l2 + 528:word32]
	o1 = 0x00000000 | i0
	o0 = o0 + 0x00000001
	o2 = 0x00000000 | i1
	call memcpy (retsize: 0;)
	o1 = Mem0[l2 + 528:word32]
	o1 = o1 + i1
	Mem0[l2 + 528:word32] = o1
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  output_bytes_exit
output_bytes_exit:


// output_string
// Return size: 0
define output_string
output_string_entry:
	// succ:  l0001388C
l0001388C:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00000000 | i0
	call strlen (retsize: 0;)
	o1 = 0x00000000 | o0
	o0 = 0x00000000 | i0
	call output_bytes (retsize: 0;)
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  output_string_exit
output_string_exit:


// output_up_to
// Return size: 0
define output_up_to
output_up_to_entry:
	// succ:  l000138AC
l000138AC:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00028000
	o1 = Mem0[o0 + 448:word32]
	l0 = 0x00028000
	o2 = Mem0[l0 + 480:word32]
	o3 = 0x00028000
	o0 = Mem0[o3 + 416:word32]
	o1 = o2 - o1
	o0 = o0 + o1
	o1 = i0 - o2
	NZVC = cond(o1)
	branch Test(EQ,Z) l000138AC_ds_t
	// succ:  l000138AC_ds_f l000138AC_ds_t
l000138AC_ds_f:
	o0 = o0 + 0x00000001
	goto l000138DC
	// succ:  l000138DC
l000138AC_ds_t:
	o0 = o0 + 0x00000001
	goto l000138E8
	// succ:  l000138E8
l000138DC:
	call output_bytes (retsize: 0;)
	Mem0[l0 + 480:word32] = i0
	// succ:  l000138E8
l000138E8:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  output_up_to_exit
output_up_to_exit:


// other_variable_style_function
// Return size: 0
define other_variable_style_function
other_variable_style_function_entry:
	// succ:  l000138F0
l000138F0:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o1 = 0x00017400
	o0 = 0x00000000 | i0
	o1 = o1 | 0x00000068
	call substr (retsize: 0;)
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	i0 = 0x00000000 + 0x00000000 + C
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  other_variable_style_function_exit
other_variable_style_function_exit:


// edit_fn_declaration
// Return size: 0
define edit_fn_declaration
edit_fn_declaration_entry:
	// succ:  l00013914
l00013914:
	sp = fp
	v3 = sp + 0xFFFFFF88
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	Mem0[i6 + 68:word32] = i0
	o0 = Mem0[i0 + 16:word32]
	o0 = Mem0[o0 + 4:word32]
	Mem0[i6 + 72:word32] = i1
	Mem0[i6 + -20:word32] = o0
	call strlen (retsize: 0;)
	Mem0[i6 + -24:word32] = o0
	call save_pointers (retsize: 0;)
	o0 = 0x0002B000
	o0 = o0 | 0x00000240
	call setjmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013914_ds_t
	// succ:  l00013914_ds_f l00013914_ds_t
l00013914_ds_f:
	goto l00013950
	// succ:  l00013950
l00013914_ds_t:
	goto l00013974
	// succ:  l00013974
l00013950:
	call restore_pointers (retsize: 0;)
	o0 = 0x00028000
	o1 = Mem0[o0 + 336:word32]
	o2 = Mem0[i6 + -20:word32]
	o0 = 0x00017400
	o0 = o0 | 0x00000070
	call notice (retsize: 0;)
	o0 = Mem0[i6 + 72:word32]
	goto l00013B60
	// succ:  l00013B60
l00013974:
	o0 = Mem0[i6 + 72:word32]
l00013B60:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  edit_fn_declaration_exit
edit_fn_declaration_exit:


// edit_formals_lists
// Return size: 0
define edit_formals_lists
edit_formals_lists_entry:
	// succ:  l00013B68
l00013B68:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	l1 = i0 + 0xFFFFFFFF
	l0 = 0x00000000 | 0x00000001
	l2 = 0x00028000
	o0 = (int32) Mem0[l1:int8]
	goto l00013B7C
	// succ:  l00013B7C
l00013B68_ds_f:
	g0 = o0 - 0x00000029
	NZVC = cond(g0)
	goto l00013B88
	// succ:  l00013B88
l00013B68_ds_t:
	g0 = o0 - 0x00000029
	NZVC = cond(g0)
	goto l00013B98
	// succ:  l00013B98
l00013B7C:
	g0 = o0 - 0x00000028
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013B68_ds_t
	goto l00013B68_ds_f
	// succ:  l00013B68_ds_f l00013B68_ds_t
l00013B88:
	branch Test(EQ,Z) l00013B88_ds_t
	// succ:  l00013B88_ds_f l00013B88_ds_t
l00013B88_ds_f:
	o0 = Mem0[l2 + 480:word32]
	goto l00013B90
	// succ:  l00013B90
l00013B88_ds_t:
	o0 = Mem0[l2 + 480:word32]
	goto l00013BA0
	// succ:  l00013BA0
l00013B90:
	l1 = l1 + 0xFFFFFFFF
	goto l00013BAC
	// succ:  l00013BAC
l00013B98:
	l0 = l0 + 0xFFFFFFFF
	goto l00013BA4
	// succ:  l00013BA4
l00013BA0:
	l0 = l0 + 0x00000001
	// succ:  l00013BA4
l00013BA4:
	o0 = Mem0[l2 + 480:word32]
	l1 = l1 + 0xFFFFFFFF
	// succ:  l00013BAC
l00013BAC:
	g0 = o0 - l1
	NZVC = cond(g0)
	o0 = 0x00000000 + 0x00000000 + C
	o1 = 0x00000000 | 0x00000000
	call check_source (retsize: 0;)
	g0 = l0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00013BAC_ds_t
	goto l00013BC8
	// succ:  l00013BC8 l00013BAC_ds_t
l00013BAC_ds_t:
	o0 = (int32) Mem0[l1:int8]
	goto l00013B7C
	// succ:  l00013B7C
l00013BC8:
	i1 = i1 + 0xFFFFFFFF
	NZVC = cond(i1)
	branch Test(EQ,Z) l00013BC8_ds_t
	// succ:  l00013BC8_ds_f l00013BC8_ds_t
l00013BC8_ds_f:
	l1 = l1 + 0x00000001
	goto l00013BD4
	// succ:  l00013BD4
l00013BC8_ds_t:
	l1 = l1 + 0x00000001
	goto l00013CA4
	// succ:  l00013CA4
l00013BD4:
	o0 = Mem0[l2 + 480:word32]
	l0 = l1 + 0xFFFFFFFF
	g0 = o0 - l0
	NZVC = cond(g0)
	o0 = 0x00000000 + 0x00000000 + C
	o1 = 0x00000000 | 0x00000000
	call check_source (retsize: 0;)
	o2 = (word32) Mem0[l1 + -1:byte]
	o0 = 0x0002B400
	o0 = o0 | 0x00000011
	o1 = (word32) Mem0[o2 + o0:byte]
	g0 = o1 & 0x00000008
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013BD4_ds_t
	goto l00013C08
	// succ:  l00013C08 l00013BD4_ds_t
l00013BD4_ds_t:
	o0 = (int32) Mem0[l0:int8]
	goto l00013C3C
	// succ:  l00013C3C
l00013C08:
	l3 = 0x00000000 | o0
	o0 = Mem0[l2 + 480:word32]
	// succ:  l00013C10
l00013C10:
	l0 = l0 + 0xFFFFFFFF
	g0 = o0 - l0
	NZVC = cond(g0)
	o0 = 0x00000000 + 0x00000000 + C
	o1 = 0x00000000 | 0x00000000
	call check_source (retsize: 0;)
	o0 = (word32) Mem0[l0:byte]
	o1 = (word32) Mem0[o0 + l3:byte]
	g0 = o1 & 0x00000008
	NZVC = cond(g0)
	branch Test(NE,Z) l00013C10_ds_t
	goto l00013C38
	// succ:  l00013C38 l00013C10_ds_t
l00013C10_ds_t:
	o0 = Mem0[l2 + 480:word32]
	goto l00013C10
	// succ:  l00013C10
l00013C38:
	o0 = (int32) Mem0[l0:int8]
	// succ:  l00013C3C
l00013C3C:
	o1 = 0x00000000 | l0
	o0 = o0 ^ 0x00000029
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_source (retsize: 0;)
	o0 = Mem0[l2 + 480:word32]
	l0 = l0 + 0xFFFFFFFF
	g0 = o0 - l0
	NZVC = cond(g0)
	o0 = 0x00000000 + 0x00000000 + C
	o1 = 0x00000000 | 0x00000000
	call check_source (retsize: 0;)
	o0 = (int32) Mem0[l0:int8]
	o1 = 0x00000000 | l0
	o0 = o0 ^ 0x00000029
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_source (retsize: 0;)
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | i1
	o2 = 0x00000000 | i2
	call edit_formals_lists (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013C3C_ds_t
	// succ:  l00013C3C_ds_f l00013C3C_ds_t
l00013C3C_ds_f:
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	goto l00013C9C
	// succ:  l00013C9C
l00013C3C_ds_t:
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	goto l00013CA8
	// succ:  l00013CA8
l00013C9C:
	i0 = 0x00000000 | 0x00000001
	goto l00013DFC
	// succ:  l00013DFC
l00013CA4:
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	// succ:  l00013CA8
l00013CA8:
	branch Test(NE,Z) l00013CA8_ds_t
	// succ:  l00013CA8_ds_f l00013CA8_ds_t
l00013CA8_ds_f:
	o0 = 0x0002B400
	goto l00013CB0
	// succ:  l00013CB0
l00013CA8_ds_t:
	o0 = 0x0002B400
	goto l00013DD4
	// succ:  l00013DD4
l00013CB0:
	o2 = (word32) Mem0[l1 + -1:byte]
	o3 = o0 | 0x00000011
	o1 = Mem0[i2 + 16:word32]
	l0 = l1 + 0xFFFFFFFF
	o0 = (word32) Mem0[o2 + o3:byte]
	g0 = o0 & 0x00000008
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013CB0_ds_t
	// succ:  l00013CB0_ds_f l00013CB0_ds_t
l00013CB0_ds_f:
	l5 = Mem0[o1 + 4:word32]
	goto l00013CD0
	// succ:  l00013CD0
l00013CB0_ds_t:
	l5 = Mem0[o1 + 4:word32]
	goto l00013D00
	// succ:  l00013D00
l00013CD0:
	l3 = 0x00000000 | o3
	o0 = Mem0[l2 + 480:word32]
	// succ:  l00013CD8
l00013CD8:
	l0 = l0 + 0xFFFFFFFF
	g0 = o0 - l0
	NZVC = cond(g0)
	o0 = 0x00000000 + 0x00000000 + C
	o1 = 0x00000000 | 0x00000000
	call check_source (retsize: 0;)
	o0 = (word32) Mem0[l0:byte]
	o1 = (word32) Mem0[o0 + l3:byte]
	g0 = o1 & 0x00000008
	NZVC = cond(g0)
	branch Test(NE,Z) l00013CD8_ds_t
	// succ:  l00013CD8_ds_f l00013CD8_ds_t
l00013CD8_ds_f:
	o0 = Mem0[l2 + 480:word32]
	goto l00013D00
	// succ:  l00013D00
l00013CD8_ds_t:
	o0 = Mem0[l2 + 480:word32]
	goto l00013CD8
	// succ:  l00013CD8
l00013D00:
	l3 = 0x00000000 | l0
	l0 = l3 + 0x00000001
	goto l00013D20
	// succ:  l00013D20
l00013D0C:
	o1 = 0x00000000 | 0x00000000
	g0 = o0 - l3
	NZVC = cond(g0)
	o0 = 0x00000000 + 0x00000000 + C
	call check_source (retsize: 0;)
	l3 = l3 + 0xFFFFFFFF
	// succ:  l00013D20
l00013D20:
	o0 = (int32) Mem0[l3:int8]
	call is_id_char (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00013D20_ds_t
	goto l00013D34
	// succ:  l00013D34 l00013D20_ds_t
l00013D20_ds_t:
	o0 = Mem0[l2 + 480:word32]
	goto l00013D0C
	// succ:  l00013D0C
l00013D34:
	l3 = l3 + 0x00000001
	l4 = l0 - l3
	NZVC = cond(l4)
	branch Test(NE,Z) l00013D34_ds_t
	// succ:  l00013D34_ds_f l00013D34_ds_t
l00013D34_ds_f:
	o0 = 0x00000000 | 0x00000000
	goto l00013D44
	// succ:  l00013D44
l00013D34_ds_t:
	o0 = 0x00000000 | 0x00000000
	goto l00013D4C
	// succ:  l00013D4C
l00013D44:
	o1 = 0x00000000 | l3
	call check_source (retsize: 0;)
l00013D4C:
	o0 = 0x00000000 | l5
	call strlen (retsize: 0;)
	g0 = l4 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l00013D4C_ds_t
	goto l00013D60
	// succ:  l00013D60 l00013D4C_ds_t
l00013D4C_ds_t:
	o0 = Mem0[i2 + 4:word32]
	goto l00013D80
	// succ:  l00013D80
l00013D60:
	o0 = 0x00000000 | l3
	o1 = 0x00000000 | l5
	o2 = 0x00000000 | l4
	call strncmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013D60_ds_t
	// succ:  l00013D60_ds_f l00013D60_ds_t
l00013D60_ds_f:
	goto l00013D7C
	// succ:  l00013D7C
l00013D60_ds_t:
	goto l00013DD4
	// succ:  l00013DD4
l00013D7C:
	o0 = Mem0[i2 + 4:word32]
	// succ:  l00013D80
l00013D80:
	l0 = 0x00017400
	o2 = Mem0[o0:word32]
	l0 = l0 | 0x000000A0
	o1 = Mem0[o2 + 4:word32]
	o0 = 0x00000000 | 0x00000000
	call shortpath (retsize: 0;)
	l2 = 0x00000000 | o0
	o0 = 0x00000000 | l3
	call identify_lineno (retsize: 0;)
	l1 = 0x00000000 | o0
	o1 = 0x00000000 | l4
	o0 = 0x00000000 | l3
	call dupnstr (retsize: 0;)
	o3 = 0x00000000 | o0
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l2
	o2 = 0x00000000 | l1
	o4 = 0x00000000 | l5
	call notice (retsize: 0;)
	i0 = 0x00000000 | 0x00000001
	goto l00013DFC
	// succ:  l00013DFC
l00013DD4:
	o0 = 0x00000000 | l1
	call output_up_to (retsize: 0;)
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00013DD4_ds_t
	// succ:  l00013DD4_ds_f l00013DD4_ds_t
l00013DD4_ds_f:
	o0 = i0 + 0xFFFFFFFF
	goto l00013DE8
	// succ:  l00013DE8
l00013DD4_ds_t:
	o0 = i0 + 0xFFFFFFFF
	goto l00013DF4
	// succ:  l00013DF4
l00013DE8:
	o0 = Mem0[i2 + 36:word32]
	call output_string (retsize: 0;)
	o0 = i0 + 0xFFFFFFFF
	// succ:  l00013DF4
l00013DF4:
	Mem0[l2 + 480:word32] = o0
	i0 = 0x00000000 | 0x00000000
	// succ:  l00013DFC
l00013DFC:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  edit_formals_lists_exit
edit_formals_lists_exit:


// find_rightmost_formals_list
// Return size: 0
define find_rightmost_formals_list
find_rightmost_formals_list_entry:
	// succ:  l00013E04
l00013E04:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = (int32) Mem0[i0:int8]
	goto l00013E14
	// succ:  l00013E14
l00013E10:
	o0 = (int32) Mem0[i0:int8]
	// succ:  l00013E14
l00013E14:
	g0 = o0 - 0x0000000A
	NZVC = cond(g0)
	branch Test(NE,Z) l00013E14_ds_t
	goto l00013E20
	// succ:  l00013E20 l00013E14_ds_t
l00013E14_ds_t:
	i0 = i0 + 0x00000001
	goto l00013E10
	// succ:  l00013E10
l00013E20:
	i0 = i0 + 0xFFFFFFFF
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x00000029
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013E20_ds_t
	// succ:  l00013E20_ds_f l00013E20_ds_t
l00013E20_ds_f:
	o1 = (word32) Mem0[i0:byte]
	goto l00013E34
	// succ:  l00013E34
l00013E20_ds_t:
	o1 = (word32) Mem0[i0:byte]
	goto l00013EB4
	// succ:  l00013EB4
l00013E34:
	o0 = 0x0002B400
	l4 = 0x00000000 | o0
	l3 = o0 | 0x00000011
	l2 = 0x00028000
	goto l00013E44
	// succ:  l00013E44
l00013E34_ds_f:
	l1 = 0x00028000
	goto l00013E54
	// succ:  l00013E54
l00013E34_ds_t:
	l1 = 0x00028000
	goto l00013E8C
	// succ:  l00013E8C
l00013E44:
	o0 = (word32) Mem0[o1 + l3:byte]
	g0 = o0 & 0x00000008
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013E34_ds_t
	goto l00013E34_ds_f
	// succ:  l00013E34_ds_f l00013E34_ds_t
l00013E54:
	l0 = l4 | 0x00000011
	o0 = Mem0[l1 + 480:word32]
	// succ:  l00013E5C
l00013E5C:
	i0 = i0 + 0xFFFFFFFF
	g0 = o0 - i0
	NZVC = cond(g0)
	o0 = 0x00000000 + 0x00000000 + C
	o1 = 0x00000000 | 0x00000000
	call check_source (retsize: 0;)
	o0 = (word32) Mem0[i0:byte]
	o1 = (word32) Mem0[o0 + l0:byte]
	g0 = o1 & 0x00000008
	NZVC = cond(g0)
	branch Test(NE,Z) l00013E5C_ds_t
	// succ:  l00013E5C_ds_f l00013E5C_ds_t
l00013E5C_ds_f:
	o0 = Mem0[l1 + 480:word32]
	goto l00013E84
	// succ:  l00013E84
l00013E5C_ds_t:
	o0 = Mem0[l1 + 480:word32]
	goto l00013E5C
	// succ:  l00013E5C
l00013E84:
	o0 = (int32) Mem0[i0:int8]
	goto l00013EA8
	// succ:  l00013EA8
l00013E8C:
	o0 = Mem0[l2 + 480:word32]
	i0 = i0 + 0xFFFFFFFF
	g0 = o0 - i0
	NZVC = cond(g0)
	o0 = 0x00000000 + 0x00000000 + C
	o1 = 0x00000000 | 0x00000000
	call check_source (retsize: 0;)
	o0 = (int32) Mem0[i0:int8]
	// succ:  l00013EA8
l00013EA8:
	g0 = o0 - 0x00000029
	NZVC = cond(g0)
	branch Test(NE,Z) l00013EA8_ds_t
	// succ:  l00013EA8_ds_f l00013EA8_ds_t
l00013EA8_ds_f:
	o1 = (word32) Mem0[i0:byte]
	goto l00013EB4
	// succ:  l00013EB4
l00013EA8_ds_t:
	o1 = (word32) Mem0[i0:byte]
	goto l00013E44
	// succ:  l00013E44
l00013EB4:
	o0 = 0x00000000 | i0
	call forward_to_next_token_char (retsize: 0;)
	o2 = (int32) Mem0[o0:int8]
	o1 = 0x00000000 | o0
	o2 = o2 ^ 0x0000007B
	g0 = 0x00000000 - o2
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_source (retsize: 0;)
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  find_rightmost_formals_list_exit
find_rightmost_formals_list_exit:


// edit_fn_definition
// Return size: 0
define edit_fn_definition
edit_fn_definition_entry:
	// succ:  l00013EDC
l00013EDC:
	sp = fp
	v3 = sp + 0xFFFFFF88
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	Mem0[i6 + 68:word32] = i0
	o0 = Mem0[i0 + 16:word32]
	o0 = Mem0[o0 + 4:word32]
	Mem0[i6 + 72:word32] = i1
	Mem0[i6 + -20:word32] = o0
	call save_pointers (retsize: 0;)
	o0 = 0x0002B000
	o0 = o0 | 0x00000240
	call setjmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00013EDC_ds_t
	// succ:  l00013EDC_ds_f l00013EDC_ds_t
l00013EDC_ds_f:
	goto l00013F10
	// succ:  l00013F10
l00013EDC_ds_t:
	goto l00013FB0
	// succ:  l00013FB0
l00013F10:
	o0 = Mem0[i6 + 72:word32]
	call find_rightmost_formals_list (retsize: 0;)
	o1 = Mem0[i6 + 68:word32]
	i1 = 0x00000000 | o0
	o0 = Mem0[o1 + 12:word32]
	call other_variable_style_function (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00013F10_ds_t
	// succ:  l00013F10_ds_f l00013F10_ds_t
l00013F10_ds_f:
	o0 = Mem0[i6 + 68:word32]
	goto l00013F34
	// succ:  l00013F34
l00013F10_ds_t:
	o0 = Mem0[i6 + 68:word32]
	goto l00013F94
	// succ:  l00013F94
l00013F34:
	o0 = 0x00027C00
	o1 = Mem0[o0 + 812:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00013F34_ds_t
	// succ:  l00013F34_ds_f l00013F34_ds_t
l00013F34_ds_f:
	o1 = Mem0[i6 + 68:word32]
	goto l00013F48
	// succ:  l00013F48
l00013F34_ds_t:
	o1 = Mem0[i6 + 68:word32]
	goto l00013F88
	// succ:  l00013F88
l00013F48:
	l0 = 0x00017400
	o0 = Mem0[o1 + 4:word32]
	l0 = l0 | 0x00000100
	o2 = Mem0[o0:word32]
	o1 = Mem0[o2 + 4:word32]
	o0 = 0x00000000 | 0x00000000
	call shortpath (retsize: 0;)
	l1 = 0x00000000 | o0
	o0 = 0x00000000 | i1
	call identify_lineno (retsize: 0;)
	o2 = 0x00000000 | o0
	o3 = 0x00017000
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l1
	o3 = o3 | 0x00000088
	call notice (retsize: 0;)
l00013F88:
	o0 = 0x00000000 | i1
	call output_up_to (retsize: 0;)
	o1 = Mem0[o0 + 28:word32]
	goto l000140AC
	// succ:  l000140AC
l00013F94:
	o1 = Mem0[o0 + 28:word32]
l00013FB0:
	call restore_pointers (retsize: 0;)
	o0 = 0x00028000
	o1 = Mem0[o0 + 336:word32]
	o2 = Mem0[i6 + -20:word32]
	o0 = 0x00017400
	o0 = o0 | 0x000000D0
	call notice (retsize: 0;)
	o0 = 0x00000000 | i1
	call output_up_to (retsize: 0;)
	// succ:  l000140AC
l000140AC:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  edit_fn_definition_exit
edit_fn_definition_exit:


// do_cleaning
// Return size: 0
define do_cleaning
do_cleaning_entry:
	// succ:  l000140B4
l000140B4:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	g0 = i0 - i1
	NZVC = cond(g0)
	branch Test(UGE,C) l000140B4_ds_t
	// succ:  l000140B4_ds_f l000140B4_ds_t
l000140B4_ds_f:
	o5 = 0x00000000 | 0x00000000
	goto l000140C4
	// succ:  l000140C4
l000140B4_ds_t:
	o5 = 0x00000000 | 0x00000000
	goto l000143BC
	// succ:  l000143BC
l000140C4:
	o1 = (word32) Mem0[i0:byte]
	goto l000140C8
	// succ:  l000140C8
l000140C4_ds_f:
	o3 = 0x00000000 | o1
	goto l000140E0
	// succ:  l000140E0
l000140C4_ds_t:
	o3 = 0x00000000 | o1
	goto l000143A8
	// succ:  l000143A8
l000140C8:
	o0 = o1 + 0xFFFFFFF8
	o0 = o0 << 0x00000018
	o2 = o0 >> 0x00000018
	g0 = o2 - 0x00000054
	NZVC = cond(g0)
	branch Test(UGE,ZC) l000140C4_ds_t
	goto l000140C4_ds_f
	// succ:  l000140C4_ds_f l000140C4_ds_t
l000140E0:
	o0 = 0x00014000
	o0 = o0 | 0x000003C4
	o1 = o2 << 0x00000002
	o2 = Mem0[o0 + o1:word32]
	return
	// succ:  do_cleaning_exit
l000143A8:
	o5 = 0x00000000 | 0x00000001
	i0 = i0 + 0x00000001
	g0 = i0 - i1
	NZVC = cond(g0)
	branch Test(ULT,C) l000143A8_ds_t
	goto l000143BC
	// succ:  l000143BC l000143A8_ds_t
l000143A8_ds_t:
	o1 = (word32) Mem0[i0:byte]
	goto l000140C8
	// succ:  l000140C8
l000143BC:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  do_cleaning_exit do_cleaning_exit
do_cleaning_exit:


// careful_find_l_paren
// Return size: 0
define careful_find_l_paren
careful_find_l_paren_entry:
	// succ:  l00014518
l00014518:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	i0 = i0 + 0xFFFFFFFF
	l0 = 0x00000000 | 0x00000001
	l1 = 0x00028000
	o0 = (int32) Mem0[i0:int8]
	goto l0001452C
	// succ:  l0001452C
l00014518_ds_f:
	g0 = o0 - 0x00000029
	NZVC = cond(g0)
	goto l00014538
	// succ:  l00014538
l00014518_ds_t:
	g0 = o0 - 0x00000029
	NZVC = cond(g0)
	goto l00014548
	// succ:  l00014548
l0001452C:
	g0 = o0 - 0x00000028
	NZVC = cond(g0)
	branch Test(EQ,Z) l00014518_ds_t
	goto l00014518_ds_f
	// succ:  l00014518_ds_f l00014518_ds_t
l00014538:
	branch Test(EQ,Z) l00014538_ds_t
	goto l00014540
	// succ:  l00014540 l00014538_ds_t
l00014538_ds_t:
	l0 = l0 + 0x00000001
	goto l0001454C
	// succ:  l0001454C
l00014540:
	o0 = Mem0[l1 + 448:word32]
	goto l00014550
	// succ:  l00014550
l00014548:
	l0 = l0 + 0xFFFFFFFF
	// succ:  l0001454C
l0001454C:
	o0 = Mem0[l1 + 448:word32]
	// succ:  l00014550
l00014550:
	i0 = i0 + 0xFFFFFFFF
	g0 = i0 - o0
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	o1 = 0x00000000 | 0x00000000
	call check_source (retsize: 0;)
	g0 = l0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00014550_ds_t
	goto l00014570
	// succ:  l00014570 l00014550_ds_t
l00014550_ds_t:
	o0 = (int32) Mem0[i0:int8]
	goto l0001452C
	// succ:  l0001452C
l00014570:
	v25 = i0 + 0x00000001
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	o0 = v25
	return
	// succ:  careful_find_l_paren_exit
careful_find_l_paren_exit:


// scan_for_missed_items
// Return size: 0
define scan_for_missed_items
scan_for_missed_items_entry:
	// succ:  l00014578
l00014578:
	sp = fp
	v3 = sp + 0xFFFFFF88
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00028000
	o1 = Mem0[o0 + 448:word32]
	o3 = 0x00028000
	o0 = Mem0[o3 + 464:word32]
	o4 = 0x00028000
	o0 = o0 + 0xFFFFFFFD
	o2 = o1 + 0xFFFFFFFF
	o3 = 0x00028000
	Mem0[i6 + -20:word32] = o0
	Mem0[o4 + 304:word32] = o2
	Mem0[i6 + 68:word32] = i0
	g0 = o1 - o0
	NZVC = cond(g0)
	branch Test(UGE,C) l00014578_ds_t
	// succ:  l00014578_ds_f l00014578_ds_t
l00014578_ds_f:
	Mem0[o3 + 288:word32] = o1
	goto l000145B4
	// succ:  l000145B4
l00014578_ds_t:
	Mem0[o3 + 288:word32] = o1
	goto l00014870
	// succ:  l00014870
l000145B4:
	o3 = Mem0[o3 + 288:word32]
	o0 = (int32) Mem0[o3:int8]
	g0 = o0 - 0x00000029
	NZVC = cond(g0)
	branch Test(NE,Z) l000145B4_ds_t
	// succ:  l000145B4_ds_f l000145B4_ds_t
l000145B4_ds_f:
	o1 = 0x00028000
	goto l000145C8
	// succ:  l000145C8
l000145B4_ds_t:
	o1 = 0x00028000
	goto l00014854
	// succ:  l00014854
l000145C8:
	o0 = 0x00028000
	Mem0[o0 + 320:word32] = o3
	o2 = (word32) Mem0[o3 + 1:byte]
	o0 = 0x0002B400
	o0 = o0 | 0x00000011
	o1 = (word32) Mem0[o2 + o0:byte]
	g0 = o1 & 0x00000008
	NZVC = cond(g0)
	branch Test(EQ,Z) l000145C8_ds_t
	// succ:  l000145C8_ds_f l000145C8_ds_t
l000145C8_ds_f:
	l0 = o3 + 0x00000001
	goto l000145EC
	// succ:  l000145EC
l000145C8_ds_t:
	l0 = o3 + 0x00000001
	goto l0001461C
	// succ:  l0001461C
l000145EC:
	l1 = 0x00000000 | o0
	o0 = Mem0[i6 + -20:word32]
	// succ:  l000145F4
l000145F4:
	l0 = l0 + 0x00000001
	g0 = l0 - o0
	NZVC = cond(g0)
	o1 = Mem0[i6 + -20:word32]
	o0 = 0x00000000 + 0x00000000 + C
	call check_source (retsize: 0;)
	o0 = (word32) Mem0[l0:byte]
	o1 = (word32) Mem0[o0 + l1:byte]
	g0 = o1 & 0x00000008
	NZVC = cond(g0)
	branch Test(NE,Z) l000145F4_ds_t
	// succ:  l000145F4_ds_f l000145F4_ds_t
l000145F4_ds_f:
	o0 = Mem0[i6 + -20:word32]
	goto l0001461C
	// succ:  l0001461C
l000145F4_ds_t:
	o0 = Mem0[i6 + -20:word32]
	goto l000145F4
	// succ:  l000145F4
l0001461C:
	o1 = 0x00028000
	o0 = l0 + 0xFFFFFFFF
	Mem0[o1 + 288:word32] = o0
	o2 = (word32) Mem0[l0:byte]
	o0 = 0x0002B400
	o0 = o0 | 0x00000011
	o1 = (word32) Mem0[o2 + o0:byte]
	g0 = o1 & 0x00000003
	NZVC = cond(g0)
	branch Test(NE,Z) l0001461C_ds_t
	// succ:  l0001461C_ds_f l0001461C_ds_t
l0001461C_ds_f:
	g0 = o2 - 0x0000007B
	NZVC = cond(g0)
	goto l00014644
	// succ:  l00014644
l0001461C_ds_t:
	g0 = o2 - 0x0000007B
	NZVC = cond(g0)
	goto l0001464C
	// succ:  l0001464C
l00014644:
	branch Test(NE,Z) l00014644_ds_t
	// succ:  l00014644_ds_f l00014644_ds_t
l00014644_ds_f:
	o1 = 0x00028000
	goto l0001464C
	// succ:  l0001464C
l00014644_ds_t:
	o1 = 0x00028000
	goto l00014854
	// succ:  l00014854
l0001464C:
	o0 = 0x00000000 | l0
	call identify_lineno (retsize: 0;)
	Mem0[i6 + -24:word32] = o0
	o0 = 0x0002B000
	o0 = o0 | 0x00000240
	call setjmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l0001464C_ds_t
	// succ:  l0001464C_ds_f l0001464C_ds_t
l0001464C_ds_f:
	o1 = 0x00028000
	goto l00014670
	// succ:  l00014670
l0001464C_ds_t:
	o1 = 0x00028000
	goto l00014854
	// succ:  l00014854
l00014670:
	o0 = 0x0002B400
	l4 = 0x00000000 | o0
	l3 = o0 | 0x00000011
	l1 = 0x00028000
	goto l00014680
	// succ:  l00014680
l00014670_ds_f:
	o0 = Mem0[l1 + 320:word32]
	goto l000146A4
	// succ:  l000146A4
l00014670_ds_t:
	o0 = Mem0[l1 + 320:word32]
	goto l000146E8
	// succ:  l000146E8
l00014680:
	o0 = Mem0[l1 + 320:word32]
	call careful_find_l_paren (retsize: 0;)
	o1 = o0 + 0xFFFFFFFF
	Mem0[l1 + 320:word32] = o1
	o2 = (word32) Mem0[o0 + -1:byte]
	o0 = (word32) Mem0[o2 + l3:byte]
	g0 = o0 & 0x00000008
	NZVC = cond(g0)
	branch Test(EQ,Z) l00014670_ds_t
	goto l00014670_ds_f
	// succ:  l00014670_ds_f l00014670_ds_t
l000146A4:
	l0 = 0x00028000
	i0 = 0x00028000
	l2 = l4 | 0x00000011
	o2 = Mem0[l0 + 320:word32]
	// succ:  l000146B4
l000146B4:
	o1 = Mem0[i0 + 304:word32]
	o2 = o2 + 0xFFFFFFFF
	g0 = o2 - o1
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	Mem0[l0 + 320:word32] = o2
	call check_source (retsize: 0;)
	o0 = Mem0[l0 + 320:word32]
	o1 = (word32) Mem0[o0:byte]
	o2 = (word32) Mem0[o1 + l2:byte]
	g0 = o2 & 0x00000008
	NZVC = cond(g0)
	branch Test(NE,Z) l000146B4_ds_t
	// succ:  l000146B4_ds_f l000146B4_ds_t
l000146B4_ds_f:
	o2 = Mem0[l0 + 320:word32]
	goto l000146E4
	// succ:  l000146E4
l000146B4_ds_t:
	o2 = Mem0[l0 + 320:word32]
	goto l000146B4
	// succ:  l000146B4
l000146E4:
	o0 = Mem0[l1 + 320:word32]
	// succ:  l000146E8
l000146E8:
	o1 = (int32) Mem0[o0:int8]
	g0 = o1 - 0x00000029
	NZVC = cond(g0)
	branch Test(EQ,Z) l000146E8_ds_t
	// succ:  l000146E8_ds_f l000146E8_ds_t
l000146E8_ds_f:
	goto l000146F8
	// succ:  l000146F8
l000146E8_ds_t:
	goto l00014680
	// succ:  l00014680
l000146F8:
	l0 = 0x00028000
	o1 = Mem0[l0 + 320:word32]
	o0 = (int32) Mem0[o1:int8]
	call is_id_char (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000146F8_ds_t
	// succ:  l000146F8_ds_f l000146F8_ds_t
l000146F8_ds_f:
	o0 = Mem0[l0 + 320:word32]
	goto l00014714
	// succ:  l00014714
l000146F8_ds_t:
	o0 = Mem0[l0 + 320:word32]
	goto l00014850
	// succ:  l00014850
l00014714:
	l1 = 0x00028000
	l0 = o0 + 0x00000001
	i0 = 0x00000000 | o0
	goto l00014734
	// succ:  l00014734
l00014724:
	i0 = i0 + 0xFFFFFFFF
	g0 = i0 - o1
	NZVC = cond(g0)
	o0 = 0x00000000 - 0xFFFFFFFF - C
	call check_source (retsize: 0;)
l00014734:
	o0 = (int32) Mem0[i0:int8]
	call is_id_char (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00014734_ds_t
	// succ:  l00014734_ds_f l00014734_ds_t
l00014734_ds_f:
	o1 = Mem0[l1 + 304:word32]
	goto l00014748
	// succ:  l00014748
l00014734_ds_t:
	o1 = Mem0[l1 + 304:word32]
	goto l00014724
	// succ:  l00014724
l00014748:
	i0 = i0 + 0x00000001
	o0 = 0x00028000
	l0 = l0 - i0
	NZVC = cond(l0)
	branch Test(EQ,Z) l00014748_ds_t
	// succ:  l00014748_ds_f l00014748_ds_t
l00014748_ds_f:
	Mem0[o0 + 304:word32] = i0
	goto l0001475C
	// succ:  l0001475C
l00014748_ds_t:
	Mem0[o0 + 304:word32] = i0
	goto l00014850
	// succ:  l00014850
l0001475C:
	o0 = l0 + 0x0000006B
	o0 = o0 & 0xFFFFFFF8
	sp = sp - o0
	l2 = sp + 0x00000060
	o1 = 0x00000000 | i0
	o2 = 0x00000000 | l0
	o0 = 0x00000000 | l2
	call strncpy (retsize: 0;)
	o1 = 0x00017400
	o0 = Mem0[o1 + 316:word32]
	Mem0[l2 + l0:byte] = (byte) 0x00000000
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l0001475C_ds_t
	// succ:  l0001475C_ds_f l0001475C_ds_t
l0001475C_ds_f:
	l0 = o1 | 0x0000013C
	goto l00014794
	// succ:  l00014794
l0001475C_ds_t:
	l0 = o1 | 0x0000013C
	goto l000147BC
	// succ:  l000147BC
l00014794:
	o1 = Mem0[l0:word32]
	goto l00014798
	// succ:  l00014798
l00014794_ds_f:
	l0 = l0 + 0x00000004
	goto l000147AC
	// succ:  l000147AC
l00014794_ds_t:
	l0 = l0 + 0x00000004
	goto l00014850
	// succ:  l00014850
l00014798:
	o0 = 0x00000000 | l2
	call strcmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00014794_ds_t
	goto l00014794_ds_f
	// succ:  l00014794_ds_f l00014794_ds_t
l000147AC:
	o0 = Mem0[l0:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000147AC_ds_t
	goto l000147BC
	// succ:  l000147BC l000147AC_ds_t
l000147AC_ds_t:
	o1 = Mem0[l0:word32]
	goto l00014798
	// succ:  l00014798
l000147BC:
	o2 = Mem0[i6 + 68:word32]
	o1 = Mem0[o2 + 4:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000147BC_ds_t
	goto l000147D0
	// succ:  l000147D0 l000147BC_ds_t
l000147BC_ds_t:
	o1 = Mem0[i6 + 68:word32]
	goto l00014804
	// succ:  l00014804
l000147D0:
	o0 = Mem0[o1 + 20:word32]
	goto l000147D4
	// succ:  l000147D4
l000147D0_ds_f:
	o2 = Mem0[i6 + -24:word32]
	goto l000147E0
	// succ:  l000147E0
l000147D0_ds_t:
	o2 = Mem0[i6 + -24:word32]
	goto l000147F0
	// succ:  l000147F0
l000147D4:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000147D0_ds_t
	goto l000147D0_ds_f
	// succ:  l000147D0_ds_f l000147D0_ds_t
l000147E0:
	o0 = Mem0[o1 + 8:word32]
	g0 = o0 - o2
	NZVC = cond(g0)
	branch Test(EQ,Z) l000147E0_ds_t
	goto l000147F0
	// succ:  l000147F0 l000147E0_ds_t
l000147E0_ds_t:
	o1 = 0x00028000
	goto l00014854
	// succ:  l00014854
l000147F0:
	o1 = Mem0[o1:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000147F0_ds_t
	goto l00014800
	// succ:  l00014800 l000147F0_ds_t
l000147F0_ds_t:
	o0 = Mem0[o1 + 20:word32]
	goto l000147D4
	// succ:  l000147D4
l00014800:
	o1 = Mem0[i6 + 68:word32]
	// succ:  l00014804
l00014804:
	l0 = 0x00017400
	o0 = Mem0[o1:word32]
	l0 = l0 | 0x000001A0
	o1 = Mem0[o0 + 4:word32]
	o0 = 0x00000000 | 0x00000000
	call shortpath (retsize: 0;)
	l1 = 0x00000000 | o0
	o0 = 0x00000000 | i0
	call identify_lineno (retsize: 0;)
	o2 = 0x00000000 | o0
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l1
	o3 = 0x00000000 | l2
	call notice (retsize: 0;)
	o0 = 0x00028000
	o1 = Mem0[o0 + 336:word32]
	o0 = 0x00017400
	o0 = o0 | 0x000001D8
	call notice (retsize: 0;)
l00014850:
	o1 = 0x00028000
	// succ:  l00014854
l00014854:
	o0 = Mem0[o1 + 288:word32]
	o3 = 0x00000000 | o1
	o2 = Mem0[i6 + -20:word32]
	o0 = o0 + 0x00000001
	g0 = o0 - o2
	NZVC = cond(g0)
	branch Test(ULT,C) l00014854_ds_t
	// succ:  l00014854_ds_f l00014854_ds_t
l00014854_ds_f:
	Mem0[o1 + 288:word32] = o0
	goto l00014870
	// succ:  l00014870
l00014854_ds_t:
	Mem0[o1 + 288:word32] = o0
	goto l000145B4
	// succ:  l000145B4
l00014870:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  scan_for_missed_items_exit scan_for_missed_items_exit
scan_for_missed_items_exit:


// edit_file
// Return size: 0
define edit_file
edit_file_entry:
	// succ:  l00014878
l00014878:
	sp = fp
	v3 = sp + 0xFFFFFF08
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	i0 = Mem0[i0 + 8:word32]
	o0 = 0x00000000 | i0
	call needs_to_be_converted (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00014878_ds_t
	// succ:  l00014878_ds_f l00014878_ds_t
l00014878_ds_f:
	o2 = 0x00028000
	goto l00014894
	// succ:  l00014894
l00014878_ds_t:
	o2 = 0x00028000
	goto l00014E1C
	// succ:  l00014E1C
l00014894:
	o0 = Mem0[i0:word32]
	o1 = Mem0[o0 + 4:word32]
	l5 = 0x00000000 | o2
	o0 = 0x00000000 | o1
	Mem0[o2 + 384:word32] = o1
	call directory_specified_p (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00014894_ds_t
	// succ:  l00014894_ds_f l00014894_ds_t
l00014894_ds_f:
	o0 = 0x00027C00
	goto l000148B8
	// succ:  l000148B8
l00014894_ds_t:
	o0 = 0x00027C00
	goto l000148CC
	// succ:  l000148CC
l000148B8:
	o0 = Mem0[l5 + 384:word32]
	call file_excluded_p (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000148B8_ds_t
	// succ:  l000148B8_ds_f l000148B8_ds_t
l000148B8_ds_f:
	o0 = 0x00027C00
	goto l000148CC
	// succ:  l000148CC
l000148B8_ds_t:
	o0 = 0x00027C00
	goto l0001491C
	// succ:  l0001491C
l000148CC:
	o1 = Mem0[o0 + 812:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000148CC_ds_t
	// succ:  l000148CC_ds_f l000148CC_ds_t
l000148CC_ds_f:
	goto l000148DC
	// succ:  l000148DC
l000148CC_ds_t:
	goto l00014E1C
	// succ:  l00014E1C
l000148DC:
	o0 = Mem0[l5 + 384:word32]
	call in_system_include_dir (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000148DC_ds_t
	// succ:  l000148DC_ds_f l000148DC_ds_t
l000148DC_ds_f:
	o0 = 0x00028000
	goto l000148F0
	// succ:  l000148F0
l000148DC_ds_t:
	o0 = 0x00028000
	goto l00014E1C
	// succ:  l00014E1C
l000148F0:
	l1 = Mem0[o0 + 336:word32]
	l0 = 0x00017400
	o1 = Mem0[l5 + 384:word32]
	l0 = l0 | 0x00000200
	o0 = 0x00000000 | 0x00000000
	call shortpath (retsize: 0;)
	o2 = 0x00000000 | o0
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l1
	call notice (retsize: 0;)
	o1 = 0x00027C00
	goto l00014E1C
	// succ:  l00014E1C
l0001491C:
	o1 = 0x00027C00
l00014E1C:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  edit_file_exit
edit_file_exit:


// do_processing
// Return size: 0
define do_processing
do_processing_entry:
	// succ:  l00014E24
l00014E24:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00027C00
	o1 = Mem0[o0 + 844:word32]
	o2 = 0x00028000
	o0 = Mem0[o2 + 352:word32]
	o1 = o1 << 0x00000002
	l1 = o0 + o1
	l0 = 0x00000000 | o0
	g0 = l0 - l1
	NZVC = cond(g0)
	branch Test(UGE,C) l00014E24_ds_t
	goto l00014E50
	// succ:  l00014E50 l00014E24_ds_t
l00014E24_ds_t:
	l0 = 0x00028000
	goto l00014E78
	// succ:  l00014E78
l00014E50:
	l2 = 0x00027C00
	o0 = Mem0[l0:word32]
	// succ:  l00014E58
l00014E58:
	o2 = 0x00000000 | 0x00000000
	o1 = Mem0[l2 + 824:word32]
	l0 = l0 + 0x00000004
	call process_aux_info_file (retsize: 0;)
	g0 = l0 - l1
	NZVC = cond(g0)
	branch Test(ULT,C) l00014E58_ds_t
	goto l00014E74
	// succ:  l00014E74 l00014E58_ds_t
l00014E58_ds_t:
	o0 = Mem0[l0:word32]
	goto l00014E58
	// succ:  l00014E58
l00014E74:
	l0 = 0x00028000
	// succ:  l00014E78
l00014E78:
	l0 = l0 | 0x00000240
	o1 = 0x00013400
	o1 = o1 | 0x000001C0
	o0 = 0x00000000 | l0
	call visit_each_hash_node (retsize: 0;)
	o1 = 0x00014800
	o0 = 0x00000000 | l0
	o1 = o1 | 0x00000078
	call visit_each_hash_node (retsize: 0;)
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  do_processing_exit
do_processing_exit:


// main
// Return size: 0
define main
main_entry:
	// succ:  l00014EA4
l00014EA4:
	sp = fp
	v3 = sp + 0xFFFFFF88
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	Mem0[i6 + 72:word32] = i1
	o0 = Mem0[i1:word32]
	o1 = 0x00017000
	o1 = o1 | 0x00000218
	Mem0[i6 + -24:word32] = o1
	o1 = 0x00000000 | 0x0000002F
	Mem0[i6 + 68:word32] = i0
	call strrchr (retsize: 0;)
	o1 = 0x00028000
	o2 = o0 + 0x00000001
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00014EA4_ds_t
	// succ:  l00014EA4_ds_f l00014EA4_ds_t
l00014EA4_ds_f:
	Mem0[o1 + 336:word32] = o0
	goto l00014EDC
	// succ:  l00014EDC
l00014EA4_ds_t:
	Mem0[o1 + 336:word32] = o0
	goto l00014EE8
	// succ:  l00014EE8
l00014EDC:
	o0 = Mem0[i6 + 72:word32]
	o2 = Mem0[o0:word32]
	o1 = 0x00028000
	// succ:  l00014EE8
l00014EE8:
	Mem0[o1 + 336:word32] = o2
	o1 = Mem0[i6 + -24:word32]
	o0 = 0x00000000 | 0x00000005
	call setlocale (retsize: 0;)
	call getpwd (retsize: 0;)
	o1 = 0x00000000 | o0
	o0 = 0x0002B000
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00014EE8_ds_t
	// succ:  l00014EE8_ds_f l00014EE8_ds_t
l00014EE8_ds_f:
	Mem0[o0 + 624:word32] = o1
	goto l00014F14
	// succ:  l00014F14
l00014EE8_ds_t:
	Mem0[o0 + 624:word32] = o1
	goto l00014F48
	// succ:  l00014F48
l00014F14:
	o1 = 0x0002B400
	o2 = 0x00028000
	l1 = Mem0[o2 + 336:word32]
	l0 = 0x00017800
	o0 = Mem0[o1 + 864:word32]
	l0 = l0 | 0x00000010
	call xstrerror (retsize: 0;)
	o2 = 0x00000000 | o0
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l1
	call notice (retsize: 0;)
	o0 = 0x00000000 | 0x00000021
	call exit (retsize: 0;)
l00014F48:
	o0 = 0x00000000 | o1
	o1 = 0x00000000 | 0x00000000
	call string_list_cons (retsize: 0;)
	o1 = 0x0002B400
	Mem0[o1 + 868:word32] = o0
	l5 = 0x00000000 | o1
	l1 = 0x00028000
	l4 = 0x0002B400
	i5 = 0x00027C00
	i4 = 0x00027C00
	l3 = 0x00027C00
	i3 = 0x00027C00
	i2 = 0x00027C00
	i1 = 0x00017800
	i0 = 0x00027C00
	l2 = i6 + 0xFFFFFFEC
	l6 = 0x00027C00
	l7 = 0x00028000
	goto l00015074
	// succ:  l00015074
l00014F94:
	branch Test(NE,Z) l00014F94_ds_t
	// succ:  l00014F94_ds_f l00014F94_ds_t
l00014F94_ds_f:
	o0 = o0 + 0xFFFFFFB2
	goto l00014F9C
	// succ:  l00014F9C
l00014F94_ds_t:
	o0 = o0 + 0xFFFFFFB2
	goto l00014FB0
	// succ:  l00014FB0
l00014F9C:
	o0 = Mem0[i6 + -20:word32]
	o1 = l0 + 0x0000000C
	o0 = o0 << 0x00000004
	o0 = Mem0[o1 + o0:word32]
	o0 = o0 + 0xFFFFFFB2
	// succ:  l00014FB0
l00014FB0:
	g0 = o0 - 0x0000002A
	NZVC = cond(g0)
	branch Test(UGE,ZC) l00014FB0_ds_t
	// succ:  l00014FB0_ds_f l00014FB0_ds_t
l00014FB0_ds_f:
	o3 = 0x00015000
	goto l00014FBC
	// succ:  l00014FBC
l00014FB0_ds_t:
	o3 = 0x00015000
	goto l0001506C
	// succ:  l0001506C
l00014FBC:
	o0 = o0 << 0x00000002
	o1 = o3 | 0x0000020C
	o2 = Mem0[o1 + o0:word32]
	return
	// succ:  main_exit
l0001506C:
	call usage (retsize: 0;)
l00015074:
	l0 = i0 | 0x00000358
	o0 = Mem0[i6 + 68:word32]
	o2 = i1 | 0x00000038
	o1 = Mem0[i6 + 72:word32]
	o3 = 0x00000000 | l0
	o4 = 0x00000000 | l2
	call getopt_long (retsize: 0;)
	g0 = o0 - 0xFFFFFFFF
	NZVC = cond(g0)
	branch Test(NE,Z) l00015074_ds_t
	// succ:  l00015074_ds_f l00015074_ds_t
l00015074_ds_f:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	goto l0001509C
	// succ:  l0001509C
l00015074_ds_t:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	goto l00014F94
	// succ:  l00014F94
l0001509C:
	o0 = Mem0[i6 + -24:word32]
	call munge_compile_params (retsize: 0;)
	o1 = Mem0[l7 + 104:word32]
	o3 = Mem0[i6 + 68:word32]
	o1 = o3 - o1
	o0 = o1 + 0x00000001
	Mem0[l6 + 844:word32] = o1
	o0 = o0 << 0x00000002
	call xmalloc (retsize: 0;)
	o4 = 0x00028000
	Mem0[o4 + 352:word32] = o0
	o1 = Mem0[l7 + 104:word32]
	Mem0[l6 + 844:word32] = 0x00000000
	o0 = Mem0[i6 + 68:word32]
	g0 = o1 - o0
	NZVC = cond(g0)
	branch Test(GE,NV) l0001509C_ds_t
	// succ:  l0001509C_ds_f l0001509C_ds_t
l0001509C_ds_f:
	o1 = 0x00027C00
	goto l000150E0
	// succ:  l000150E0
l0001509C_ds_t:
	o1 = 0x00027C00
	goto l0001519C
	// succ:  l0001519C
l000150E0:
	l4 = 0x00000000 | l6
	l3 = 0x00027C00
	l2 = 0x00000000 | l7
	goto l000150EC
	// succ:  l000150EC
l000150E0_ds_f:
	o0 = 0x00028000
	goto l00015120
	// succ:  l00015120
l000150E0_ds_t:
	o0 = 0x00028000
	goto l00015150
	// succ:  l00015150
l000150EC:
	o2 = Mem0[l7 + 104:word32]
	o0 = 0x00000000 | 0x00000000
	o3 = Mem0[i6 + 72:word32]
	o2 = o2 << 0x00000002
	o1 = Mem0[o3 + o2:word32]
	call abspath (retsize: 0;)
	l1 = 0x00000000 | o0
	call strlen (retsize: 0;)
	o1 = o0 + l1
	o0 = (int32) Mem0[o1 + -1:int8]
	g0 = o0 - 0x00000063
	NZVC = cond(g0)
	branch Test(NE,Z) l000150E0_ds_t
	goto l000150E0_ds_f
	// succ:  l000150E0_ds_f l000150E0_ds_t
l00015120:
	o0 = (int32) Mem0[o1 + -2:int8]
	g0 = o0 - 0x0000002E
	NZVC = cond(g0)
	branch Test(NE,Z) l00015120_ds_t
	// succ:  l00015120_ds_f l00015120_ds_t
l00015120_ds_f:
	o0 = 0x00028000
	goto l00015130
	// succ:  l00015130
l00015120_ds_t:
	o0 = 0x00028000
	goto l00015150
	// succ:  l00015150
l00015130:
	o0 = Mem0[l4 + 844:word32]
	o4 = 0x00028000
	o2 = Mem0[o4 + 352:word32]
	o1 = o0 << 0x00000002
	Mem0[o2 + o1:word32] = l1
	o0 = o0 + 0x00000001
	Mem0[l4 + 844:word32] = o0
	goto l00015180
	// succ:  l00015180
l00015150:
	l0 = Mem0[o0 + 336:word32]
	o1 = 0x00000000 | l1
	o0 = 0x00000000 | 0x00000000
	call shortpath (retsize: 0;)
	o2 = 0x00000000 | o0
	o3 = 0x00017800
	o0 = o3 | 0x00000050
	o1 = 0x00000000 | l0
	call notice (retsize: 0;)
	o0 = Mem0[l3 + 800:word32]
	o0 = o0 + 0x00000001
	Mem0[l3 + 800:word32] = o0
	// succ:  l00015180
l00015180:
	o0 = Mem0[l2 + 104:word32]
	o4 = Mem0[i6 + 68:word32]
	o0 = o0 + 0x00000001
	g0 = o0 - o4
	NZVC = cond(g0)
	branch Test(LT,NZV) l00015180_ds_t
	// succ:  l00015180_ds_f l00015180_ds_t
l00015180_ds_f:
	Mem0[l2 + 104:word32] = o0
	goto l00015198
	// succ:  l00015198
l00015180_ds_t:
	Mem0[l2 + 104:word32] = o0
	goto l000150EC
	// succ:  l000150EC
l00015198:
	o1 = 0x00027C00
	// succ:  l0001519C
l0001519C:
	o0 = Mem0[o1 + 800:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l0001519C_ds_t
	// succ:  l0001519C_ds_f l0001519C_ds_t
l0001519C_ds_f:
	o2 = 0x00027C00
	goto l000151AC
	// succ:  l000151AC
l0001519C_ds_t:
	o2 = 0x00027C00
	goto l000151B4
	// succ:  l000151B4
l000151AC:
	call usage (retsize: 0;)
l000151B4:
	o0 = Mem0[o2 + 808:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000151B4_ds_t
	// succ:  l000151B4_ds_f l000151B4_ds_t
l000151B4_ds_f:
	o3 = 0x00028000
	goto l000151C4
	// succ:  l000151C4
l000151B4_ds_t:
	o3 = 0x00028000
	goto l000151E4
	// succ:  l000151E4
l000151C4:
	o2 = Mem0[o3 + 336:word32]
	o4 = 0x0002B400
	o1 = 0x00028000
	o0 = o4 | 0x00000240
	o3 = Mem0[o1 + 40:word32]
	o4 = 0x00017800
	o1 = o4 | 0x00000080
	call fprintf (retsize: 0;)
l000151E4:
	call do_processing (retsize: 0;)
	o1 = 0x00027C00
	o0 = Mem0[o1 + 800:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000151E4_ds_t
	// succ:  l000151E4_ds_f l000151E4_ds_t
l000151E4_ds_f:
	o1 = 0x00000000 | 0x00000000
	goto l00015200
	// succ:  l00015200
l000151E4_ds_t:
	o1 = 0x00000000 | 0x00000000
	goto l00015204
	// succ:  l00015204
l00015200:
	o1 = 0x00000000 | 0x00000021
	// succ:  l00015204
l00015204:
	o0 = 0x00000000 | o1
	call exit (retsize: 0;)
main_exit:


// getpwd
// Return size: 0
define getpwd
getpwd_entry:
	// succ:  l000152B8
l000152B8:
	sp = fp
	v3 = sp + 0xFFFFFE80
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x0002B000
	i0 = Mem0[o0 + 672:word32]
	g0 = i0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000152B8_ds_t
	// succ:  l000152B8_ds_f l000152B8_ds_t
l000152B8_ds_f:
	l4 = 0x00000000 | o0
	goto l000152D0
	// succ:  l000152D0
l000152B8_ds_t:
	l4 = 0x00000000 | o0
	goto l000153BC
	// succ:  l000153BC
l000152D0:
	o0 = 0x0002B000
	o2 = Mem0[o0 + 688:word32]
	o1 = 0x0002B400
	l3 = 0x00000000 | o0
	l2 = 0x00000000 | o1
	g0 = o2 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000152D0_ds_t
	// succ:  l000152D0_ds_f l000152D0_ds_t
l000152D0_ds_f:
	Mem0[o1 + 864:word32] = o2
	goto l000152F0
	// succ:  l000152F0
l000152D0_ds_t:
	Mem0[o1 + 864:word32] = o2
	goto l000153BC
	// succ:  l000153BC
l000152F0:
	o0 = 0x00017800
	o0 = o0 | 0x00000088
	call getenv (retsize: 0;)
	i0 = o0 | 0x00000000
	NZVC = cond(i0)
	branch Test(EQ,Z) l000152F0_ds_t
	// succ:  l000152F0_ds_f l000152F0_ds_t
l000152F0_ds_f:
	l1 = 0x00000000 | 0x00000064
	goto l00015308
	// succ:  l00015308
l000152F0_ds_t:
	l1 = 0x00000000 | 0x00000064
	goto l0001537C
	// succ:  l0001537C
l00015308:
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x0000002F
	NZVC = cond(g0)
	branch Test(NE,Z) l00015308_ds_t
	// succ:  l00015308_ds_f l00015308_ds_t
l00015308_ds_f:
	o0 = 0x00000000 | i0
	goto l00015318
	// succ:  l00015318
l00015308_ds_t:
	o0 = 0x00000000 | i0
	goto l0001537C
	// succ:  l0001537C
l00015318:
	o1 = i6 + 0xFFFFFEE0
	call stat (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00015318_ds_t
	goto l0001532C
	// succ:  l0001532C l00015318_ds_t
l00015318_ds_t:
	l1 = 0x00000000 | 0x00000064
	goto l0001537C
	// succ:  l0001537C
l0001532C:
	o0 = 0x00017800
	o0 = o0 | 0x00000090
	o1 = i6 + 0xFFFFFF68
	call stat (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l0001532C_ds_t
	goto l00015348
	// succ:  l00015348 l0001532C_ds_t
l0001532C_ds_t:
	l1 = 0x00000000 | 0x00000064
	goto l0001537C
	// succ:  l0001537C
l00015348:
	o1 = Mem0[i6 + -136:word32]
	o0 = Mem0[i6 + -272:word32]
	g0 = o1 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l00015348_ds_t
	goto l0001535C
	// succ:  l0001535C l00015348_ds_t
l00015348_ds_t:
	l1 = 0x00000000 | 0x00000064
	goto l0001537C
	// succ:  l0001537C
l0001535C:
	o1 = Mem0[i6 + -152:word32]
	o0 = Mem0[i6 + -288:word32]
	g0 = o1 - o0
	NZVC = cond(g0)
	branch Test(EQ,Z) l0001535C_ds_t
	goto l00015370
	// succ:  l00015370 l0001535C_ds_t
l0001535C_ds_t:
	Mem0[l4 + 672:word32] = i0
	goto l000153BC
	// succ:  l000153BC
l00015370:
	l1 = 0x00000000 | 0x00000064
	goto l0001537C
	// succ:  l0001537C
l00015378:
	l1 = l1 << 0x00000001
	// succ:  l0001537C
l0001537C:
	o0 = 0x00000000 | l1
	call xmalloc (retsize: 0;)
	i0 = 0x00000000 | o0
	o1 = 0x00000000 | l1
	call getcwd (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l0001537C_ds_t
	// succ:  l0001537C_ds_f l0001537C_ds_t
l0001537C_ds_f:
	l0 = Mem0[l2 + 864:word32]
	goto l0001539C
	// succ:  l0001539C
l0001537C_ds_t:
	l0 = Mem0[l2 + 864:word32]
	goto l000153B8
	// succ:  l000153B8
l0001539C:
	o0 = 0x00000000 | i0
	call free (retsize: 0;)
	g0 = l0 - 0x00000022
	NZVC = cond(g0)
	branch Test(EQ,Z) l0001539C_ds_t
	// succ:  l0001539C_ds_f l0001539C_ds_t
l0001539C_ds_f:
	i0 = 0x00000000 | 0x00000000
	goto l000153B0
	// succ:  l000153B0
l0001539C_ds_t:
	i0 = 0x00000000 | 0x00000000
	goto l00015378
	// succ:  l00015378
l000153B0:
	Mem0[l2 + 864:word32] = l0
	Mem0[l3 + 688:word32] = l0
	// succ:  l000153B8
l000153B8:
	Mem0[l4 + 672:word32] = i0
	// succ:  l000153BC
l000153BC:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  getpwd_exit
getpwd_exit:


// _obstack_begin
// Return size: 0
define _obstack_begin
_obstack_begin_entry:
	// succ:  l000153C4
l000153C4:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	g0 = i2 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000153C4_ds_t
	goto l000153D4
	// succ:  l000153D4 l000153C4_ds_t
l000153C4_ds_t:
	i2 = 0x00000000 | 0x00000008
	// succ:  l000153D4
l000153D4:
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000153D4_ds_t
	goto l000153E0
	// succ:  l000153E0 l000153D4_ds_t
l000153D4_ds_t:
	i1 = 0x00000000 | 0x00000FE8
	// succ:  l000153E0
l000153E0:
	o0 = Mem0[i0 + 40:word32]
	o1 = 0x80000000
	o1 = o0 & ~o1
	o2 = i2 + 0xFFFFFFFF
	Mem0[i0 + 32:word32] = i4
	Mem0[i0 + 24:word32] = o2
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	Mem0[i0 + 28:word32] = i3
	Mem0[i0:word32] = i1
	branch Test(GE,NV) l000153E0_ds_t
	// succ:  l000153E0_ds_f l000153E0_ds_t
l000153E0_ds_f:
	Mem0[i0 + 40:word32] = o1
	goto l0001540C
	// succ:  l0001540C
l000153E0_ds_t:
	Mem0[i0 + 40:word32] = o1
	goto l00015420
	// succ:  l00015420
l0001540C:
	o0 = Mem0[i0 + 36:word32]
	o7 = 0x00015410
	o1 = 0x00000000 | i1
	call i3 + 0x00000000 (retsize: 0;)
	i1 = 0x00000000 | o0
	goto l0001542C
	// succ:  l0001542C
l00015420:
	o7 = 0x00015420
	o0 = 0x00000000 | i1
	call i3 + 0x00000000 (retsize: 0;)
	i1 = 0x00000000 | o0
	// succ:  l0001542C
l0001542C:
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l0001542C_ds_t
	// succ:  l0001542C_ds_f l0001542C_ds_t
l0001542C_ds_f:
	Mem0[i0 + 4:word32] = i1
	goto l00015438
	// succ:  l00015438
l0001542C_ds_t:
	Mem0[i0 + 4:word32] = i1
	goto l00015448
	// succ:  l00015448
l00015438:
	o0 = 0x00028000
	o1 = Mem0[o0 + 44:word32]
	o7 = 0x00015440
	call o1 + 0x00000000 (retsize: 0;)
l00015448:
	o0 = Mem0[i0:word32]
	o1 = i1 + 0x00000008
	Mem0[i0 + 12:word32] = o1
	Mem0[i0 + 8:word32] = o1
	o0 = i1 + o0
	Mem0[i1:word32] = o0
	Mem0[i0 + 16:word32] = o0
	Mem0[i1 + 4:word32] = 0x00000000
	o2 = Mem0[i0 + 40:word32]
	o1 = 0x40000000
	o1 = o2 & ~o1
	o0 = 0x20000000
	o0 = o1 & ~o0
	Mem0[i0 + 40:word32] = o0
	v23 = 0x00000000 + 0x00000001
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	o0 = v23
	return
	// succ:  _obstack_begin_exit
_obstack_begin_exit:


// _obstack_begin_1
// Return size: 0
define _obstack_begin_1
_obstack_begin_1_entry:
	// succ:  l00015488
l00015488:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	g0 = i2 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015488_ds_t
	goto l00015498
	// succ:  l00015498 l00015488_ds_t
l00015488_ds_t:
	i2 = 0x00000000 | 0x00000008
	// succ:  l00015498
l00015498:
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015498_ds_t
	goto l000154A4
	// succ:  l000154A4 l00015498_ds_t
l00015498_ds_t:
	i1 = 0x00000000 | 0x00000FE8
	// succ:  l000154A4
l000154A4:
	o0 = Mem0[i0 + 40:word32]
	o1 = 0x80000000
	o0 = o0 | o1
	o2 = i2 + 0xFFFFFFFF
	Mem0[i0 + 32:word32] = i4
	Mem0[i0 + 24:word32] = o2
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	Mem0[i0 + 28:word32] = i3
	Mem0[i0:word32] = i1
	Mem0[i0 + 36:word32] = i5
	branch Test(GE,NV) l000154A4_ds_t
	// succ:  l000154A4_ds_f l000154A4_ds_t
l000154A4_ds_f:
	Mem0[i0 + 40:word32] = o0
	goto l000154D4
	// succ:  l000154D4
l000154A4_ds_t:
	Mem0[i0 + 40:word32] = o0
	goto l000154E8
	// succ:  l000154E8
l000154D4:
	o1 = 0x00000000 | i1
	o7 = 0x000154D8
	o0 = 0x00000000 | i5
	call i3 + 0x00000000 (retsize: 0;)
	i1 = 0x00000000 | o0
	goto l000154F4
	// succ:  l000154F4
l000154E8:
	o7 = 0x000154E8
	o0 = 0x00000000 | i1
	call i3 + 0x00000000 (retsize: 0;)
	i1 = 0x00000000 | o0
	// succ:  l000154F4
l000154F4:
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000154F4_ds_t
	// succ:  l000154F4_ds_f l000154F4_ds_t
l000154F4_ds_f:
	Mem0[i0 + 4:word32] = i1
	goto l00015500
	// succ:  l00015500
l000154F4_ds_t:
	Mem0[i0 + 4:word32] = i1
	goto l00015510
	// succ:  l00015510
l00015500:
	o0 = 0x00028000
	o1 = Mem0[o0 + 44:word32]
	o7 = 0x00015508
	call o1 + 0x00000000 (retsize: 0;)
l00015510:
	o0 = Mem0[i0:word32]
	o1 = i1 + 0x00000008
	Mem0[i0 + 12:word32] = o1
	Mem0[i0 + 8:word32] = o1
	o0 = i1 + o0
	Mem0[i1:word32] = o0
	Mem0[i0 + 16:word32] = o0
	Mem0[i1 + 4:word32] = 0x00000000
	o2 = Mem0[i0 + 40:word32]
	o1 = 0x40000000
	o1 = o2 & ~o1
	o0 = 0x20000000
	o0 = o1 & ~o0
	Mem0[i0 + 40:word32] = o0
	v23 = 0x00000000 + 0x00000001
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	o0 = v23
	return
	// succ:  _obstack_begin_1_exit
_obstack_begin_1_exit:


// _obstack_newchunk
// Return size: 0
define _obstack_newchunk
_obstack_newchunk_entry:
	// succ:  l00015550
l00015550:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = Mem0[i0 + 8:word32]
	o1 = Mem0[i0 + 12:word32]
	l2 = o1 - o0
	i1 = l2 + i1
	o0 = l2 >> 0x00000003
	o2 = Mem0[i0:word32]
	i1 = i1 + o0
	i1 = i1 + 0x00000064
	g0 = i1 - o2
	NZVC = cond(g0)
	branch Test(GE,NV) l00015550_ds_t
	// succ:  l00015550_ds_f l00015550_ds_t
l00015550_ds_f:
	l1 = Mem0[i0 + 4:word32]
	goto l00015580
	// succ:  l00015580
l00015550_ds_t:
	l1 = Mem0[i0 + 4:word32]
	goto l00015584
	// succ:  l00015584
l00015580:
	i1 = 0x00000000 | o2
	// succ:  l00015584
l00015584:
	o0 = Mem0[i0 + 40:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(GE,NV) l00015584_ds_t
	goto l00015594
	// succ:  l00015594 l00015584_ds_t
l00015584_ds_t:
	o1 = Mem0[i0 + 28:word32]
	goto l000155AC
	// succ:  l000155AC
l00015594:
	o2 = Mem0[i0 + 28:word32]
	o1 = 0x00000000 | i1
	o7 = 0x0001559C
	o0 = Mem0[i0 + 36:word32]
	call o2 + 0x00000000 (retsize: 0;)
	l0 = 0x00000000 | o0
	goto l000155B8
	// succ:  l000155B8
l000155AC:
	o7 = 0x000155AC
	o0 = 0x00000000 | i1
	call o1 + 0x00000000 (retsize: 0;)
	l0 = 0x00000000 | o0
	// succ:  l000155B8
l000155B8:
	g0 = l0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000155B8_ds_t
	goto l000155C4
	// succ:  l000155C4 l000155B8_ds_t
l000155B8_ds_t:
	Mem0[i0 + 4:word32] = l0
	goto l000155D8
	// succ:  l000155D8
l000155C4:
	o0 = 0x00028000
	o1 = Mem0[o0 + 44:word32]
	o7 = 0x000155CC
	call o1 + 0x00000000 (retsize: 0;)
	Mem0[i0 + 4:word32] = l0
	// succ:  l000155D8
l000155D8:
	o1 = l0 + i1
	Mem0[l0 + 4:word32] = l1
	Mem0[i0 + 16:word32] = o1
	Mem0[l0:word32] = o1
	o0 = Mem0[i0 + 24:word32]
	o0 = o0 + 0x00000001
	g0 = o0 - 0x00000007
	NZVC = cond(g0)
	branch Test(LE,NZV) l000155D8_ds_t
	// succ:  l000155D8_ds_f l000155D8_ds_t
l000155D8_ds_f:
	o0 = l2 >>u 0x00000002
	goto l000155FC
	// succ:  l000155FC
l000155D8_ds_t:
	o0 = l2 >>u 0x00000002
	goto l00015654
	// succ:  l00015654
l000155FC:
	o5 = 0x00000000 | o0
	i1 = l0 + 0x00000008
	o3 = o0 + 0xFFFFFFFF
	NZVC = cond(o3)
	branch Test(LT,N) l000155FC_ds_t
	// succ:  l000155FC_ds_f l000155FC_ds_t
l000155FC_ds_f:
	g2 = l1 + 0x00000008
	goto l00015610
	// succ:  l00015610
l000155FC_ds_t:
	g2 = l1 + 0x00000008
	goto l00015638
	// succ:  l00015638
l00015610:
	o0 = o3 << 0x00000002
	o0 = o0 + 0x00000008
	o4 = o0 + l0
	// succ:  l0001561C
l0001561C:
	o0 = Mem0[i0 + 8:word32]
	o1 = o3 << 0x00000002
	o2 = Mem0[o0 + o1:word32]
	o3 = o3 + 0xFFFFFFFF
	NZVC = cond(o3)
	Mem0[o4:word32] = o2
	branch Test(GE,N) l0001561C_ds_t
	// succ:  l0001561C_ds_f l0001561C_ds_t
l0001561C_ds_f:
	o4 = o4 + 0xFFFFFFFC
	goto l00015638
	// succ:  l00015638
l0001561C_ds_t:
	o4 = o4 + 0xFFFFFFFC
	goto l0001561C
	// succ:  l0001561C
l00015638:
	o0 = o5 << 0x00000002
	goto l00015660
	// succ:  l00015660
l00015640:
	o1 = 0x00000000 | l1
	o7 = 0x00015644
	o0 = Mem0[i0 + 36:word32]
	call o2 + 0x00000000 (retsize: 0;)
	o0 = Mem0[i0 + 40:word32]
	goto l000156D0
	// succ:  l000156D0
l00015654:
	o0 = 0x00000000 | 0x00000000
	i1 = l0 + 0x00000008
	g2 = l1 + 0x00000008
	// succ:  l00015660
l00015660:
	o3 = 0x00000000 | o0
	g0 = o3 - l2
	NZVC = cond(g0)
	branch Test(GE,NV) l00015660_ds_t
	// succ:  l00015660_ds_f l00015660_ds_t
l00015660_ds_f:
	o0 = Mem0[i0 + 8:word32]
	goto l00015670
	// succ:  l00015670
l00015660_ds_t:
	o0 = Mem0[i0 + 8:word32]
	goto l0001568C
	// succ:  l0001568C
l00015670:
	o2 = 0x00000000 | i1
	// succ:  l00015674
l00015674:
	o1 = (word32) Mem0[o0 + o3:byte]
	Mem0[o2 + o3:byte] = (byte) o1
	o3 = o3 + 0x00000001
	g0 = o3 - l2
	NZVC = cond(g0)
	branch Test(LT,NZV) l00015674_ds_t
	// succ:  l00015674_ds_f l00015674_ds_t
l00015674_ds_f:
	o0 = Mem0[i0 + 8:word32]
	goto l0001568C
	// succ:  l0001568C
l00015674_ds_t:
	o0 = Mem0[i0 + 8:word32]
	goto l00015674
	// succ:  l00015674
l0001568C:
	g0 = o0 - g2
	NZVC = cond(g0)
	branch Test(NE,Z) l0001568C_ds_t
	// succ:  l0001568C_ds_f l0001568C_ds_t
l0001568C_ds_f:
	o0 = Mem0[i0 + 40:word32]
	goto l00015698
	// succ:  l00015698
l0001568C_ds_t:
	o0 = Mem0[i0 + 40:word32]
	goto l000156D0
	// succ:  l000156D0
l00015698:
	o0 = o0 >>u 0x0000001E
	g0 = o0 & 0x00000001
	NZVC = cond(g0)
	branch Test(NE,Z) l00015698_ds_t
	goto l000156A8
	// succ:  l000156A8 l00015698_ds_t
l00015698_ds_t:
	o0 = Mem0[i0 + 40:word32]
	goto l000156D0
	// succ:  l000156D0
l000156A8:
	o1 = Mem0[l1 + 4:word32]
	Mem0[l0 + 4:word32] = o1
	o0 = Mem0[i0 + 40:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(LT,NZV) l000156A8_ds_t
	goto l000156C0
	// succ:  l000156C0 l000156A8_ds_t
l000156A8_ds_t:
	o2 = Mem0[i0 + 32:word32]
	goto l00015640
	// succ:  l00015640
l000156C0:
	o1 = Mem0[i0 + 32:word32]
	o7 = 0x000156C4
	o0 = 0x00000000 | l1
	call o1 + 0x00000000 (retsize: 0;)
	o0 = Mem0[i0 + 40:word32]
	// succ:  l000156D0
l000156D0:
	o1 = 0x40000000
	o2 = i1 + l2
	o1 = o0 & ~o1
	Mem0[i0 + 40:word32] = o1
	Mem0[i0 + 12:word32] = o2
	Mem0[i0 + 8:word32] = i1
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  _obstack_newchunk_exit
_obstack_newchunk_exit:


// _obstack_allocated_p
// Return size: 0
define _obstack_allocated_p
_obstack_allocated_p_entry:
	// succ:  l000156F0
l000156F0:
	sp = fp
	g3 = Mem0[o0 + 4:word32]
	goto l000156F4
	// succ:  l000156F4
l000156F0_ds_f:
	g0 = g3 - o1
	NZVC = cond(g0)
	goto l00015700
	// succ:  l00015700
l000156F0_ds_t:
	g0 = g3 - o1
	NZVC = cond(g0)
	goto l00015718
	// succ:  l00015718
l000156F4:
	g0 = g3 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000156F0_ds_t
	goto l000156F0_ds_f
	// succ:  l000156F0_ds_f l000156F0_ds_t
l00015700:
	branch Test(UGE,C) l00015700_ds_t
	goto l00015708
	// succ:  l00015708 l00015700_ds_t
l00015700_ds_t:
	g3 = Mem0[g3 + 4:word32]
	goto l000156F4
	// succ:  l000156F4
l00015708:
	g2 = Mem0[g3:word32]
	g0 = g2 - o1
	NZVC = cond(g0)
	branch Test(ULT,C) l00015708_ds_t
	goto l00015718
	// succ:  l00015718 l00015708_ds_t
l00015708_ds_t:
	g3 = Mem0[g3 + 4:word32]
	goto l000156F4
	// succ:  l000156F4
l00015718:
	g0 = 0x00000000 - g3
	NZVC = cond(g0)
	o0 = 0x00000000 + 0x00000000 + C
	return
	// succ:  _obstack_allocated_p_exit
_obstack_allocated_p_exit:


// _obstack_free
// Return size: 0
define _obstack_free
_obstack_free_entry:
	// succ:  l00015724
l00015724:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o3 = Mem0[i0 + 4:word32]
	goto l00015774
	// succ:  l00015774
l00015730:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(GE,NV) l00015730_ds_t
	// succ:  l00015730_ds_f l00015730_ds_t
l00015730_ds_f:
	l0 = Mem0[o3 + 4:word32]
	goto l0001573C
	// succ:  l0001573C
l00015730_ds_t:
	l0 = Mem0[o3 + 4:word32]
	goto l00015754
	// succ:  l00015754
l0001573C:
	o2 = Mem0[i0 + 32:word32]
	o1 = 0x00000000 | o3
	o7 = 0x00015744
	o0 = Mem0[i0 + 36:word32]
	call o2 + 0x00000000 (retsize: 0;)
	o1 = Mem0[i0 + 40:word32]
	goto l00015764
	// succ:  l00015764
l00015754:
	o1 = Mem0[i0 + 32:word32]
	o7 = 0x00015758
	o0 = 0x00000000 | o3
	call o1 + 0x00000000 (retsize: 0;)
	o1 = Mem0[i0 + 40:word32]
	// succ:  l00015764
l00015764:
	o0 = 0x40000000
	o1 = o1 | o0
	o3 = 0x00000000 | l0
	Mem0[i0 + 40:word32] = o1
	// succ:  l00015774
l00015774:
	g0 = o3 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015774_ds_t
	// succ:  l00015774_ds_f l00015774_ds_t
l00015774_ds_f:
	g0 = o3 - i1
	NZVC = cond(g0)
	goto l00015780
	// succ:  l00015780
l00015774_ds_t:
	g0 = o3 - i1
	NZVC = cond(g0)
	goto l00015798
	// succ:  l00015798
l00015780:
	branch Test(UGE,C) l00015780_ds_t
	goto l00015788
	// succ:  l00015788 l00015780_ds_t
l00015780_ds_t:
	o0 = Mem0[i0 + 40:word32]
	goto l00015730
	// succ:  l00015730
l00015788:
	o0 = Mem0[o3:word32]
	g0 = o0 - i1
	NZVC = cond(g0)
	branch Test(ULT,C) l00015788_ds_t
	goto l00015798
	// succ:  l00015798 l00015788_ds_t
l00015788_ds_t:
	o0 = Mem0[i0 + 40:word32]
	goto l00015730
	// succ:  l00015730
l00015798:
	g0 = o3 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015798_ds_t
	// succ:  l00015798_ds_f l00015798_ds_t
l00015798_ds_f:
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	goto l000157A4
	// succ:  l000157A4
l00015798_ds_t:
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	goto l000157BC
	// succ:  l000157BC
l000157A4:
	Mem0[i0 + 8:word32] = i1
	Mem0[i0 + 12:word32] = i1
	o0 = Mem0[o3:word32]
	Mem0[i0 + 4:word32] = o3
	Mem0[i0 + 16:word32] = o0
	goto l000157CC
	// succ:  l000157CC
l000157BC:
	branch Test(EQ,Z) l000157BC_ds_t
	// succ:  l000157BC_ds_f l000157BC_ds_t
l000157BC_ds_f:
	goto l000157C4
	// succ:  l000157C4
l000157BC_ds_t:
	goto l000157CC
	// succ:  l000157CC
l000157C4:
	call abort (retsize: 0;)
l000157CC:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  _obstack_free_exit
_obstack_free_exit:


// obstack_free
// Return size: 0
define obstack_free
obstack_free_entry:
	// succ:  l000157D4
l000157D4:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o3 = Mem0[i0 + 4:word32]
	goto l00015824
	// succ:  l00015824
l000157E0:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(GE,NV) l000157E0_ds_t
	// succ:  l000157E0_ds_f l000157E0_ds_t
l000157E0_ds_f:
	l0 = Mem0[o3 + 4:word32]
	goto l000157EC
	// succ:  l000157EC
l000157E0_ds_t:
	l0 = Mem0[o3 + 4:word32]
	goto l00015804
	// succ:  l00015804
l000157EC:
	o2 = Mem0[i0 + 32:word32]
	o1 = 0x00000000 | o3
	o7 = 0x000157F4
	o0 = Mem0[i0 + 36:word32]
	call o2 + 0x00000000 (retsize: 0;)
	o1 = Mem0[i0 + 40:word32]
	goto l00015814
	// succ:  l00015814
l00015804:
	o1 = Mem0[i0 + 32:word32]
	o7 = 0x00015808
	o0 = 0x00000000 | o3
	call o1 + 0x00000000 (retsize: 0;)
	o1 = Mem0[i0 + 40:word32]
	// succ:  l00015814
l00015814:
	o0 = 0x40000000
	o1 = o1 | o0
	o3 = 0x00000000 | l0
	Mem0[i0 + 40:word32] = o1
	// succ:  l00015824
l00015824:
	g0 = o3 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015824_ds_t
	// succ:  l00015824_ds_f l00015824_ds_t
l00015824_ds_f:
	g0 = o3 - i1
	NZVC = cond(g0)
	goto l00015830
	// succ:  l00015830
l00015824_ds_t:
	g0 = o3 - i1
	NZVC = cond(g0)
	goto l00015848
	// succ:  l00015848
l00015830:
	branch Test(UGE,C) l00015830_ds_t
	goto l00015838
	// succ:  l00015838 l00015830_ds_t
l00015830_ds_t:
	o0 = Mem0[i0 + 40:word32]
	goto l000157E0
	// succ:  l000157E0
l00015838:
	o0 = Mem0[o3:word32]
	g0 = o0 - i1
	NZVC = cond(g0)
	branch Test(ULT,C) l00015838_ds_t
	goto l00015848
	// succ:  l00015848 l00015838_ds_t
l00015838_ds_t:
	o0 = Mem0[i0 + 40:word32]
	goto l000157E0
	// succ:  l000157E0
l00015848:
	g0 = o3 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015848_ds_t
	// succ:  l00015848_ds_f l00015848_ds_t
l00015848_ds_f:
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	goto l00015854
	// succ:  l00015854
l00015848_ds_t:
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	goto l0001586C
	// succ:  l0001586C
l00015854:
	Mem0[i0 + 8:word32] = i1
	Mem0[i0 + 12:word32] = i1
	o0 = Mem0[o3:word32]
	Mem0[i0 + 4:word32] = o3
	Mem0[i0 + 16:word32] = o0
	goto l0001587C
	// succ:  l0001587C
l0001586C:
	branch Test(EQ,Z) l0001586C_ds_t
	// succ:  l0001586C_ds_f l0001586C_ds_t
l0001586C_ds_f:
	goto l00015874
	// succ:  l00015874
l0001586C_ds_t:
	goto l0001587C
	// succ:  l0001587C
l00015874:
	call abort (retsize: 0;)
l0001587C:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  obstack_free_exit
obstack_free_exit:


// _obstack_memory_used
// Return size: 0
define _obstack_memory_used
_obstack_memory_used_entry:
	// succ:  l00015884
l00015884:
	sp = fp
	g3 = Mem0[o0 + 4:word32]
	g0 = g3 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015884_ds_t
	// succ:  l00015884_ds_f l00015884_ds_t
l00015884_ds_f:
	o0 = 0x00000000 | 0x00000000
	goto l00015894
	// succ:  l00015894
l00015884_ds_t:
	o0 = 0x00000000 | 0x00000000
	goto l000158AC
	// succ:  l000158AC
l00015894:
	g2 = Mem0[g3:word32]
	g2 = g2 - g3
	g3 = Mem0[g3 + 4:word32]
	g0 = g3 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00015894_ds_t
	// succ:  l00015894_ds_f l00015894_ds_t
l00015894_ds_f:
	o0 = o0 + g2
	goto l000158AC
	// succ:  l000158AC
l00015894_ds_t:
	o0 = o0 + g2
	goto l00015894
	// succ:  l00015894
l000158AC:
	return
	// succ:  _obstack_memory_used_exit
_obstack_memory_used_exit:


// print_and_abort
// Return size: 0
define print_and_abort
print_and_abort_entry:
	// succ:  l000158B4
l000158B4:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00017800
	o1 = 0x0002B400
	o1 = o1 | 0x00000240
	o0 = o0 | 0x000000D0
	call fputs (retsize: 0;)
	o1 = 0x00028000
	o0 = Mem0[o1 + 48:word32]
	call exit (retsize: 0;)
print_and_abort_exit:


// try
// Return size: 0
define try
try_entry:
	// succ:  l000158D8
l000158D8:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	g0 = i1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000158D8_ds_t
	// succ:  l000158D8_ds_f l000158D8_ds_t
l000158D8_ds_f:
	g0 = i0 - 0x00000000
	NZVC = cond(g0)
	goto l000158E8
	// succ:  l000158E8
l000158D8_ds_t:
	g0 = i0 - 0x00000000
	NZVC = cond(g0)
	goto l000158F0
	// succ:  l000158F0
l000158E8:
	i0 = 0x00000000 | i1
	goto l00015910
	// succ:  l00015910
l000158F0:
	branch Test(EQ,Z) l000158F0_ds_t
	// succ:  l000158F0_ds_f l000158F0_ds_t
l000158F0_ds_f:
	o0 = 0x00000000 | i0
	goto l000158F8
	// succ:  l000158F8
l000158F0_ds_t:
	o0 = 0x00000000 | i0
	goto l0001590C
	// succ:  l0001590C
l000158F8:
	o1 = 0x00000000 | 0x00000007
	call access (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000158F8_ds_t
	// succ:  l000158F8_ds_f l000158F8_ds_t
l000158F8_ds_f:
	goto l0001590C
	// succ:  l0001590C
l000158F8_ds_t:
	goto l00015910
	// succ:  l00015910
l0001590C:
	i0 = 0x00000000 | 0x00000000
	// succ:  l00015910
l00015910:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  try_exit
try_exit:


// choose_temp_base
// Return size: 0
define choose_temp_base
choose_temp_base_entry:
	// succ:  l00015918
l00015918:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00017800
	o0 = o0 | 0x000000E8
	call getenv (retsize: 0;)
	o1 = 0x00000000 | 0x00000000
	call try (retsize: 0;)
	l0 = 0x00000000 | o0
	o0 = 0x00017800
	o0 = o0 | 0x000000F0
	call getenv (retsize: 0;)
	o1 = 0x00000000 | l0
	call try (retsize: 0;)
	l0 = 0x00000000 | o0
	o0 = 0x00017800
	o0 = o0 | 0x000000F8
	call getenv (retsize: 0;)
	o1 = 0x00000000 | l0
	call try (retsize: 0;)
	l0 = 0x00000000 | o0
	o0 = 0x00017800
	o1 = 0x00000000 | l0
	o0 = o0 | 0x00000100
	call try (retsize: 0;)
	l0 = 0x00000000 | o0
	o0 = 0x00028000
	o1 = 0x00000000 | l0
	o0 = o0 | 0x00000040
	call try (retsize: 0;)
	l0 = 0x00000000 | o0
	o0 = 0x00028000
	o1 = 0x00000000 | l0
	o0 = o0 | 0x00000038
	call try (retsize: 0;)
	l0 = o0 | 0x00000000
	NZVC = cond(l0)
	branch Test(NE,Z) l00015918_ds_t
	// succ:  l00015918_ds_f l00015918_ds_t
l00015918_ds_f:
	goto l000159A8
	// succ:  l000159A8
l00015918_ds_t:
	goto l000159B0
	// succ:  l000159B0
l000159A8:
	o0 = 0x00017800
	l0 = o0 | 0x00000110
	// succ:  l000159B0
l000159B0:
	o0 = 0x00000000 | l0
	call strlen (retsize: 0;)
	l1 = 0x00000000 | o0
	o0 = l1 + 0x0000000A
	call xmalloc (retsize: 0;)
	i0 = 0x00000000 | o0
	o1 = 0x00000000 | l0
	call strcpy (retsize: 0;)
	g0 = l1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000159B0_ds_t
	// succ:  l000159B0_ds_f l000159B0_ds_t
l000159B0_ds_f:
	o3 = 0x00017800
	goto l000159DC
	// succ:  l000159DC
l000159B0_ds_t:
	o3 = 0x00017800
	goto l00015A00
	// succ:  l00015A00
l000159DC:
	o0 = l1 + i0
	o1 = (int32) Mem0[o0 + -1:int8]
	g0 = o1 - 0x0000002F
	NZVC = cond(g0)
	branch Test(EQ,Z) l000159DC_ds_t
	goto l000159F0
	// succ:  l000159F0 l000159DC_ds_t
l000159DC_ds_t:
	o0 = (word32) Mem0[o3 + 280:byte]
	goto l00015A04
	// succ:  l00015A04
l000159F0:
	o0 = 0x00000000 | 0x0000002F
	Mem0[l1 + i0:byte] = (byte) o0
	l1 = l1 + 0x00000001
	o3 = 0x00017800
	// succ:  l00015A00
l00015A00:
	o0 = (word32) Mem0[o3 + 280:byte]
	// succ:  l00015A04
l00015A04:
	o4 = i0 + l1
	Mem0[i0 + l1:byte] = (byte) o0
	o3 = o3 | 0x00000118
	o1 = (word32) Mem0[o3 + 1:byte]
	o0 = 0x00000000 | i0
	Mem0[o4 + 1:byte] = (byte) o1
	o2 = (word32) Mem0[o3 + 2:byte]
	Mem0[o4 + 2:byte] = (byte) o2
	o1 = (word32) Mem0[o3 + 3:byte]
	Mem0[o4 + 3:byte] = (byte) o1
	o2 = (word32) Mem0[o3 + 4:byte]
	Mem0[o4 + 4:byte] = (byte) o2
	o1 = (word32) Mem0[o3 + 5:byte]
	Mem0[o4 + 5:byte] = (byte) o1
	o2 = (word32) Mem0[o3 + 6:byte]
	Mem0[o4 + 6:byte] = (byte) o2
	o1 = (word32) Mem0[o3 + 7:byte]
	Mem0[o4 + 7:byte] = (byte) o1
	o2 = (word32) Mem0[o3 + 8:byte]
	Mem0[o4 + 8:byte] = (byte) o2
	call mktemp (retsize: 0;)
	o0 = 0x00000000 | i0
	call strlen (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00015A04_ds_t
	// succ:  l00015A04_ds_f l00015A04_ds_t
l00015A04_ds_f:
	goto l00015A6C
	// succ:  l00015A6C
l00015A04_ds_t:
	goto l00015A74
	// succ:  l00015A74
l00015A6C:
	call abort (retsize: 0;)
l00015A74:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  choose_temp_base_exit
choose_temp_base_exit:


// make_temp_file
// Return size: 0
define make_temp_file
make_temp_file_entry:
	// succ:  l00015A7C
l00015A7C:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00017800
	l3 = 0x00000000 | i0
	o0 = o0 | 0x000000E8
	call getenv (retsize: 0;)
	o1 = 0x00000000 | 0x00000000
	call try (retsize: 0;)
	l0 = 0x00000000 | o0
	o0 = 0x00017800
	o0 = o0 | 0x000000F0
	call getenv (retsize: 0;)
	o1 = 0x00000000 | l0
	call try (retsize: 0;)
	l0 = 0x00000000 | o0
	o0 = 0x00017800
	o0 = o0 | 0x000000F8
	call getenv (retsize: 0;)
	o1 = 0x00000000 | l0
	call try (retsize: 0;)
	l0 = 0x00000000 | o0
	o0 = 0x00017800
	o1 = 0x00000000 | l0
	o0 = o0 | 0x00000100
	call try (retsize: 0;)
	l0 = 0x00000000 | o0
	o0 = 0x00028000
	o1 = 0x00000000 | l0
	o0 = o0 | 0x00000058
	call try (retsize: 0;)
	l0 = 0x00000000 | o0
	o0 = 0x00028000
	o1 = 0x00000000 | l0
	o0 = o0 | 0x00000050
	call try (retsize: 0;)
	l0 = o0 | 0x00000000
	NZVC = cond(l0)
	branch Test(NE,Z) l00015A7C_ds_t
	// succ:  l00015A7C_ds_f l00015A7C_ds_t
l00015A7C_ds_f:
	o0 = 0x00017800
	goto l00015B10
	// succ:  l00015B10
l00015A7C_ds_t:
	o0 = 0x00017800
	goto l00015B14
	// succ:  l00015B14
l00015B10:
	l0 = o0 | 0x00000110
	// succ:  l00015B14
l00015B14:
	o0 = 0x00000000 | l0
	call strlen (retsize: 0;)
	g0 = l3 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015B14_ds_t
	// succ:  l00015B14_ds_f l00015B14_ds_t
l00015B14_ds_f:
	l1 = 0x00000000 | o0
	goto l00015B28
	// succ:  l00015B28
l00015B14_ds_t:
	l1 = 0x00000000 | o0
	goto l00015B38
	// succ:  l00015B38
l00015B28:
	o0 = 0x00000000 | l3
	call strlen (retsize: 0;)
	l2 = 0x00000000 | o0
	goto l00015B3C
	// succ:  l00015B3C
l00015B38:
	l2 = 0x00000000 | 0x00000000
	// succ:  l00015B3C
l00015B3C:
	o0 = l1 + l2
	o0 = o0 + 0x0000000A
	call xmalloc (retsize: 0;)
	i0 = 0x00000000 | o0
	o1 = 0x00000000 | l0
	call strcpy (retsize: 0;)
	g0 = l1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015B3C_ds_t
	// succ:  l00015B3C_ds_f l00015B3C_ds_t
l00015B3C_ds_f:
	o0 = l1 + i0
	goto l00015B60
	// succ:  l00015B60
l00015B3C_ds_t:
	o0 = l1 + i0
	goto l00015B78
	// succ:  l00015B78
l00015B60:
	o1 = (int32) Mem0[o0 + -1:int8]
	g0 = o1 - 0x0000002F
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015B60_ds_t
	// succ:  l00015B60_ds_f l00015B60_ds_t
l00015B60_ds_f:
	o0 = 0x00000000 | 0x0000002F
	goto l00015B70
	// succ:  l00015B70
l00015B60_ds_t:
	o0 = 0x00000000 | 0x0000002F
	goto l00015B78
	// succ:  l00015B78
l00015B70:
	Mem0[l1 + i0:byte] = (byte) o0
	l1 = l1 + 0x00000001
	// succ:  l00015B78
l00015B78:
	o2 = 0x00017800
	o0 = (word32) Mem0[o2 + 280:byte]
	o3 = i0 + l1
	Mem0[i0 + l1:byte] = (byte) o0
	o2 = o2 | 0x00000118
	o1 = (word32) Mem0[o2 + 1:byte]
	g0 = l3 - 0x00000000
	NZVC = cond(g0)
	Mem0[o3 + 1:byte] = (byte) o1
	o4 = (word32) Mem0[o2 + 2:byte]
	Mem0[o3 + 2:byte] = (byte) o4
	o0 = (word32) Mem0[o2 + 3:byte]
	Mem0[o3 + 3:byte] = (byte) o0
	o1 = (word32) Mem0[o2 + 4:byte]
	Mem0[o3 + 4:byte] = (byte) o1
	o0 = (word32) Mem0[o2 + 5:byte]
	Mem0[o3 + 5:byte] = (byte) o0
	o1 = (word32) Mem0[o2 + 6:byte]
	Mem0[o3 + 6:byte] = (byte) o1
	o0 = (word32) Mem0[o2 + 7:byte]
	Mem0[o3 + 7:byte] = (byte) o0
	o1 = (word32) Mem0[o2 + 8:byte]
	branch Test(EQ,Z) l00015B78_ds_t
	// succ:  l00015B78_ds_f l00015B78_ds_t
l00015B78_ds_f:
	Mem0[o3 + 8:byte] = (byte) o1
	goto l00015BD4
	// succ:  l00015BD4
l00015B78_ds_t:
	Mem0[o3 + 8:byte] = (byte) o1
	goto l00015BE0
	// succ:  l00015BE0
l00015BD4:
	o1 = 0x00000000 | l3
	o0 = 0x00000000 | i0
	call strcat (retsize: 0;)
l00015BE0:
	o1 = 0x00000000 | l2
	o0 = 0x00000000 | i0
	call mkstemps (retsize: 0;)
	g0 = o0 - 0xFFFFFFFF
	NZVC = cond(g0)
	branch Test(NE,Z) l00015BE0_ds_t
	// succ:  l00015BE0_ds_f l00015BE0_ds_t
l00015BE0_ds_f:
	goto l00015BF8
	// succ:  l00015BF8
l00015BE0_ds_t:
	goto l00015C00
	// succ:  l00015C00
l00015BF8:
	call abort (retsize: 0;)
l00015C00:
	call close (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015C00_ds_t
	// succ:  l00015C00_ds_f l00015C00_ds_t
l00015C00_ds_f:
	goto l00015C14
	// succ:  l00015C14
l00015C00_ds_t:
	goto l00015C1C
	// succ:  l00015C1C
l00015C14:
	call abort (retsize: 0;)
l00015C1C:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  make_temp_file_exit
make_temp_file_exit:


// my_index
// Return size: 0
define my_index
my_index_entry:
	// succ:  l00015C24
l00015C24:
	sp = fp
	g2 = (int32) Mem0[o0:int8]
	goto l00015C48
	// succ:  l00015C48
l00015C2C:
	g2 = g3 << 0x00000018
	g2 = g2 >> 0x00000018
	g0 = g2 - o1
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015C2C_ds_t
	// succ:  l00015C2C_ds_f l00015C2C_ds_t
l00015C2C_ds_f:
	goto l00015C40
	// succ:  l00015C40
l00015C2C_ds_t:
	goto l00015C58
	// succ:  l00015C58
l00015C40:
	o0 = o0 + 0x00000001
	g2 = (int32) Mem0[o0:int8]
	// succ:  l00015C48
l00015C48:
	g0 = g2 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00015C48_ds_t
	// succ:  l00015C48_ds_f l00015C48_ds_t
l00015C48_ds_f:
	g3 = (word32) Mem0[o0:byte]
	goto l00015C54
	// succ:  l00015C54
l00015C48_ds_t:
	g3 = (word32) Mem0[o0:byte]
	goto l00015C2C
	// succ:  l00015C2C
l00015C54:
	o0 = 0x00000000 | 0x00000000
	// succ:  l00015C58
l00015C58:
	return
	// succ:  my_index_exit
my_index_exit:


// exchange
// Return size: 0
define exchange
exchange_entry:
	// succ:  l00015C60
l00015C60:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	g2 = 0x0002B000
	i1 = 0x00028000
	g3 = 0x0002B000
	g1 = Mem0[g2 + 768:word32]
	o1 = 0x00000000 | g2
	i5 = Mem0[i1 + 104:word32]
	o2 = 0x00000000 | i1
	i4 = Mem0[g3 + 752:word32]
	g0 = i5 - g1
	NZVC = cond(g0)
	branch Test(LE,NZV) l00015C60_ds_t
	// succ:  l00015C60_ds_f l00015C60_ds_t
l00015C60_ds_f:
	o0 = 0x00000000 | g3
	goto l00015C90
	// succ:  l00015C90
l00015C60_ds_t:
	o0 = 0x00000000 | g3
	goto l00015D40
	// succ:  l00015D40
l00015C90:
	g0 = g1 - i4
	NZVC = cond(g0)
	branch Test(LE,NZV) l00015C90_ds_t
	// succ:  l00015C90_ds_f l00015C90_ds_t
l00015C90_ds_f:
	g2 = Mem0[o2 + 104:word32]
	goto l00015C9C
	// succ:  l00015C9C
l00015C90_ds_t:
	g2 = Mem0[o2 + 104:word32]
	goto l00015D44
	// succ:  l00015D44
l00015C9C:
	o7 = g1 << 0x00000002
	g3 = i5 - g1
	goto l00015CA4
	// succ:  l00015CA4
l00015C9C_ds_f:
	g0 = g2 - 0x00000000
	NZVC = cond(g0)
	goto l00015CB4
	// succ:  l00015CB4
l00015C9C_ds_t:
	g0 = g2 - 0x00000000
	NZVC = cond(g0)
	goto l00015CF0
	// succ:  l00015CF0
l00015CA4:
	g2 = g1 - i4
	g0 = g3 - g2
	NZVC = cond(g0)
	branch Test(LE,NZV) l00015C9C_ds_t
	goto l00015C9C_ds_f
	// succ:  l00015C9C_ds_f l00015C9C_ds_t
l00015CB4:
	branch Test(LE,NZV) l00015CB4_ds_t
	// succ:  l00015CB4_ds_f l00015CB4_ds_t
l00015CB4_ds_f:
	i5 = i5 - g2
	goto l00015CBC
	// succ:  l00015CBC
l00015CB4_ds_t:
	i5 = i5 - g2
	goto l00015D2C
	// succ:  l00015D2C
l00015CBC:
	i3 = 0x00000000 | g2
	i1 = i5 << 0x00000002
	g3 = i4 << 0x00000002
	// succ:  l00015CC8
l00015CC8:
	i2 = Mem0[g3 + i0:word32]
	i3 = i3 + 0xFFFFFFFF
	NZVC = cond(i3)
	g2 = Mem0[i1 + i0:word32]
	Mem0[g3 + i0:word32] = g2
	Mem0[i1 + i0:word32] = i2
	i1 = i1 + 0x00000004
	branch Test(NE,Z) l00015CC8_ds_t
	// succ:  l00015CC8_ds_f l00015CC8_ds_t
l00015CC8_ds_f:
	g3 = g3 + 0x00000004
	goto l00015CE8
	// succ:  l00015CE8
l00015CC8_ds_t:
	g3 = g3 + 0x00000004
	goto l00015CC8
	// succ:  l00015CC8
l00015CE8:
	g0 = i5 - g1
	NZVC = cond(g0)
	goto l00015D30
	// succ:  l00015D30
l00015CF0:
	g0 = g3 - 0x00000000
	NZVC = cond(g0)
	branch Test(LE,NZV) l00015CF0_ds_t
	// succ:  l00015CF0_ds_f l00015CF0_ds_t
l00015CF0_ds_f:
	g4 = i4 + g3
	goto l00015CFC
	// succ:  l00015CFC
l00015CF0_ds_t:
	g4 = i4 + g3
	goto l00015D28
	// succ:  l00015D28
l00015CFC:
	i3 = 0x00000000 | g3
	i1 = i4 << 0x00000002
	g3 = 0x00000000 | o7
	// succ:  l00015D08
l00015D08:
	i2 = Mem0[i1 + i0:word32]
	i3 = i3 + 0xFFFFFFFF
	NZVC = cond(i3)
	g2 = Mem0[g3 + i0:word32]
	Mem0[i1 + i0:word32] = g2
	Mem0[g3 + i0:word32] = i2
	g3 = g3 + 0x00000004
	branch Test(NE,Z) l00015D08_ds_t
	// succ:  l00015D08_ds_f l00015D08_ds_t
l00015D08_ds_f:
	i1 = i1 + 0x00000004
	goto l00015D28
	// succ:  l00015D28
l00015D08_ds_t:
	i1 = i1 + 0x00000004
	goto l00015D08
	// succ:  l00015D08
l00015D28:
	i4 = 0x00000000 | g4
	// succ:  l00015D2C
l00015D2C:
	g0 = i5 - g1
	NZVC = cond(g0)
	// succ:  l00015D30
l00015D30:
	branch Test(LE,NZV) l00015D30_ds_t
	// succ:  l00015D30_ds_f l00015D30_ds_t
l00015D30_ds_f:
	g0 = g1 - i4
	NZVC = cond(g0)
	goto l00015D38
	// succ:  l00015D38
l00015D30_ds_t:
	g0 = g1 - i4
	NZVC = cond(g0)
	goto l00015D40
	// succ:  l00015D40
l00015D38:
	branch Test(GT,NZV) l00015D38_ds_t
	// succ:  l00015D38_ds_f l00015D38_ds_t
l00015D38_ds_f:
	g3 = i5 - g1
	goto l00015D40
	// succ:  l00015D40
l00015D38_ds_t:
	g3 = i5 - g1
	goto l00015CA4
	// succ:  l00015CA4
l00015D40:
	g2 = Mem0[o2 + 104:word32]
	g2 = Mem0[o2 + 104:word32]
	// succ:  l00015D44
l00015D44:
	g3 = Mem0[o1 + 768:word32]
	i0 = Mem0[o0 + 752:word32]
	g3 = g2 - g3
	i0 = i0 + g3
	Mem0[o0 + 752:word32] = i0
	Mem0[o1 + 768:word32] = g2
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  exchange_exit
exchange_exit:


// _getopt_initialize
// Return size: 0
define _getopt_initialize
_getopt_initialize_entry:
	// succ:  l00015D64
l00015D64:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00028000
	o2 = Mem0[o0 + 104:word32]
	o1 = 0x0002B000
	o3 = 0x0002B000
	o4 = 0x0002B000
	o0 = 0x00017800
	Mem0[o1 + 752:word32] = o2
	i0 = 0x00000000 | i2
	Mem0[o3 + 768:word32] = o2
	Mem0[o4 + 704:word32] = 0x00000000
	o0 = o0 | 0x00000128
	call getenv (retsize: 0;)
	o1 = 0x00000000 | o0
	o0 = 0x0002B000
	Mem0[o0 + 736:word32] = o1
	o0 = (int32) Mem0[i0:int8]
	g0 = o0 - 0x0000002D
	NZVC = cond(g0)
	branch Test(NE,Z) l00015D64_ds_t
	// succ:  l00015D64_ds_f l00015D64_ds_t
l00015D64_ds_f:
	g0 = o0 - 0x0000002B
	NZVC = cond(g0)
	goto l00015DB4
	// succ:  l00015DB4
l00015D64_ds_t:
	g0 = o0 - 0x0000002B
	NZVC = cond(g0)
	goto l00015DC8
	// succ:  l00015DC8
l00015DB4:
	o1 = 0x0002B000
	o0 = 0x00000000 | 0x00000002
	Mem0[o1 + 720:word32] = o0
	i0 = i0 + 0x00000001
	goto l00015DFC
	// succ:  l00015DFC
l00015DC8:
	branch Test(NE,Z) l00015DC8_ds_t
	// succ:  l00015DC8_ds_f l00015DC8_ds_t
l00015DC8_ds_f:
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	goto l00015DD0
	// succ:  l00015DD0
l00015DC8_ds_t:
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	goto l00015DE0
	// succ:  l00015DE0
l00015DD0:
	o0 = 0x0002B000
	Mem0[o0 + 720:word32] = 0x00000000
	i0 = i0 + 0x00000001
	goto l00015DFC
	// succ:  l00015DFC
l00015DE0:
	branch Test(EQ,Z) l00015DE0_ds_t
	// succ:  l00015DE0_ds_f l00015DE0_ds_t
l00015DE0_ds_f:
	o0 = 0x0002B000
	goto l00015DE8
	// succ:  l00015DE8
l00015DE0_ds_t:
	o0 = 0x0002B000
	goto l00015DF0
	// succ:  l00015DF0
l00015DE8:
	Mem0[o0 + 720:word32] = 0x00000000
	goto l00015DFC
	// succ:  l00015DFC
l00015DF0:
	o1 = 0x0002B000
	o0 = 0x00000000 | 0x00000001
	Mem0[o1 + 720:word32] = o0
	// succ:  l00015DFC
l00015DFC:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  _getopt_initialize_exit
_getopt_initialize_exit:


// _getopt_internal
// Return size: 0
define _getopt_internal
_getopt_internal_entry:
	// succ:  l00015E04
l00015E04:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00028000
	o2 = Mem0[o0 + 104:word32]
	o1 = 0x00028000
	l5 = 0x00000000 | o0
	Mem0[i6 + 68:word32] = i0
	Mem0[i6 + 80:word32] = i3
	Mem0[o1 + 100:word32] = 0x00000000
	g0 = o2 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015E04_ds_t
	// succ:  l00015E04_ds_f l00015E04_ds_t
l00015E04_ds_f:
	l0 = 0x00028000
	goto l00015E30
	// succ:  l00015E30
l00015E04_ds_t:
	l0 = 0x00028000
	goto l00015E44
	// succ:  l00015E44
l00015E30:
	o0 = Mem0[l0 + 108:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00015E30_ds_t
	// succ:  l00015E30_ds_f l00015E30_ds_t
l00015E30_ds_f:
	o0 = 0x0002B000
	goto l00015E40
	// succ:  l00015E40
l00015E30_ds_t:
	o0 = 0x0002B000
	goto l00015E74
	// succ:  l00015E74
l00015E40:
	g0 = o2 - 0x00000000
	NZVC = cond(g0)
	// succ:  l00015E44
l00015E44:
	branch Test(NE,Z) l00015E44_ds_t
	// succ:  l00015E44_ds_f l00015E44_ds_t
l00015E44_ds_f:
	o0 = Mem0[i6 + 68:word32]
	goto l00015E4C
	// succ:  l00015E4C
l00015E44_ds_t:
	o0 = Mem0[i6 + 68:word32]
	goto l00015E58
	// succ:  l00015E58
l00015E4C:
	o0 = 0x00000000 | 0x00000001
	Mem0[l5 + 104:word32] = o0
	o0 = Mem0[i6 + 68:word32]
	// succ:  l00015E58
l00015E58:
	o2 = 0x00000000 | i2
	o1 = 0x00000000 | i1
	call _getopt_initialize (retsize: 0;)
	o1 = 0x00000000 | 0x00000001
	Mem0[l0 + 108:word32] = o1
	i2 = 0x00000000 | o0
	o0 = 0x0002B000
	// succ:  l00015E74
l00015E74:
	l6 = 0x00000000 | o0
	o0 = Mem0[o0 + 704:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015E74_ds_t
	goto l00015E88
	// succ:  l00015E88 l00015E74_ds_t
l00015E74_ds_t:
	o0 = 0x0002B000
	goto l00015E9C
	// succ:  l00015E9C
l00015E88:
	o0 = (int32) Mem0[o0:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00015E88_ds_t
	// succ:  l00015E88_ds_f l00015E88_ds_t
l00015E88_ds_f:
	o0 = Mem0[i6 + 80:word32]
	goto l00015E98
	// succ:  l00015E98
l00015E88_ds_t:
	o0 = Mem0[i6 + 80:word32]
	goto l000160C0
	// succ:  l000160C0
l00015E98:
	o0 = 0x0002B000
	// succ:  l00015E9C
l00015E9C:
	o1 = Mem0[o0 + 768:word32]
	o2 = Mem0[l5 + 104:word32]
	g0 = o1 - o2
	NZVC = cond(g0)
	branch Test(LE,NZV) l00015E9C_ds_t
	// succ:  l00015E9C_ds_f l00015E9C_ds_t
l00015E9C_ds_f:
	l0 = 0x00000000 | o0
	goto l00015EB0
	// succ:  l00015EB0
l00015E9C_ds_t:
	l0 = 0x00000000 | o0
	goto l00015EB4
	// succ:  l00015EB4
l00015EB0:
	Mem0[l0 + 768:word32] = o2
	// succ:  l00015EB4
l00015EB4:
	o1 = 0x0002B000
	o0 = Mem0[o1 + 752:word32]
	g0 = o0 - o2
	NZVC = cond(g0)
	branch Test(LE,NZV) l00015EB4_ds_t
	// succ:  l00015EB4_ds_f l00015EB4_ds_t
l00015EB4_ds_f:
	l1 = 0x00000000 | o1
	goto l00015EC8
	// succ:  l00015EC8
l00015EB4_ds_t:
	l1 = 0x00000000 | o1
	goto l00015ECC
	// succ:  l00015ECC
l00015EC8:
	Mem0[l1 + 752:word32] = o2
	// succ:  l00015ECC
l00015ECC:
	o1 = 0x0002B000
	o0 = Mem0[o1 + 720:word32]
	g0 = o0 - 0x00000001
	NZVC = cond(g0)
	branch Test(NE,Z) l00015ECC_ds_t
	// succ:  l00015ECC_ds_f l00015ECC_ds_t
l00015ECC_ds_f:
	l2 = 0x00000000 | o1
	goto l00015EE0
	// succ:  l00015EE0
l00015ECC_ds_t:
	l2 = 0x00000000 | o1
	goto l00015F78
	// succ:  l00015F78
l00015EE0:
	o0 = Mem0[l1 + 752:word32]
	o1 = Mem0[l0 + 768:word32]
	g0 = o0 - o1
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015EE0_ds_t
	// succ:  l00015EE0_ds_f l00015EE0_ds_t
l00015EE0_ds_f:
	g0 = o1 - o2
	NZVC = cond(g0)
	goto l00015EF4
	// succ:  l00015EF4
l00015EE0_ds_t:
	g0 = o1 - o2
	NZVC = cond(g0)
	goto l00015F0C
	// succ:  l00015F0C
l00015EF4:
	branch Test(EQ,Z) l00015EF4_ds_t
	// succ:  l00015EF4_ds_f l00015EF4_ds_t
l00015EF4_ds_f:
	o0 = Mem0[l0 + 768:word32]
	goto l00015EFC
	// succ:  l00015EFC
l00015EF4_ds_t:
	o0 = Mem0[l0 + 768:word32]
	goto l00015F10
	// succ:  l00015F10
l00015EFC:
	o0 = 0x00000000 | i1
	call exchange (retsize: 0;)
	o3 = 0x00028000
	goto l00015F24
	// succ:  l00015F24
l00015F0C:
	o0 = Mem0[l0 + 768:word32]
	// succ:  l00015F10
l00015F10:
	o1 = Mem0[l5 + 104:word32]
	g0 = o0 - o1
	NZVC = cond(g0)
	branch Test(NE,Z) l00015F10_ds_t
	goto l00015F20
	// succ:  l00015F20 l00015F10_ds_t
l00015F10_ds_t:
	Mem0[l1 + 752:word32] = o1
	// succ:  l00015F20
l00015F20:
	o3 = 0x00028000
	// succ:  l00015F24
l00015F24:
	o2 = Mem0[o3 + 104:word32]
	o0 = Mem0[i6 + 68:word32]
	g0 = o2 - o0
	NZVC = cond(g0)
	goto l00015F48
	// succ:  l00015F48
l00015F34:
	o1 = Mem0[i6 + 68:word32]
	o0 = o0 + 0x00000001
	o2 = 0x00000000 | o0
	Mem0[o3 + 104:word32] = o0
	g0 = o2 - o1
	NZVC = cond(g0)
	// succ:  l00015F48
l00015F48:
	branch Test(GE,NV) l00015F48_ds_t
	// succ:  l00015F48_ds_f l00015F48_ds_t
l00015F48_ds_f:
	o0 = o2 << 0x00000002
	goto l00015F50
	// succ:  l00015F50
l00015F48_ds_t:
	o0 = o2 << 0x00000002
	goto l00015F74
	// succ:  l00015F74
l00015F50:
	o0 = Mem0[i1 + o0:word32]
	o1 = (int32) Mem0[o0:int8]
	g0 = o1 - 0x0000002D
	NZVC = cond(g0)
	branch Test(NE,Z) l00015F50_ds_t
	goto l00015F64
	// succ:  l00015F64 l00015F50_ds_t
l00015F50_ds_t:
	o0 = Mem0[o3 + 104:word32]
	goto l00015F34
	// succ:  l00015F34
l00015F64:
	o0 = (int32) Mem0[o0 + 1:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015F64_ds_t
	// succ:  l00015F64_ds_f l00015F64_ds_t
l00015F64_ds_f:
	o0 = Mem0[o3 + 104:word32]
	goto l00015F74
	// succ:  l00015F74
l00015F64_ds_t:
	o0 = Mem0[o3 + 104:word32]
	goto l00015F34
	// succ:  l00015F34
l00015F74:
	Mem0[l0 + 768:word32] = o2
	// succ:  l00015F78
l00015F78:
	o1 = Mem0[l5 + 104:word32]
	o2 = Mem0[i6 + 68:word32]
	g0 = o1 - o2
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015F78_ds_t
	// succ:  l00015F78_ds_f l00015F78_ds_t
l00015F78_ds_f:
	o1 = o1 << 0x00000002
	goto l00015F8C
	// succ:  l00015F8C
l00015F78_ds_t:
	o1 = o1 << 0x00000002
	goto l00016008
	// succ:  l00016008
l00015F8C:
	o0 = Mem0[i1 + o1:word32]
	o1 = 0x00017800
	o1 = o1 | 0x00000138
	call strcmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00015F8C_ds_t
	// succ:  l00015F8C_ds_f l00015F8C_ds_t
l00015F8C_ds_f:
	o2 = Mem0[l5 + 104:word32]
	goto l00015FA8
	// succ:  l00015FA8
l00015F8C_ds_t:
	o2 = Mem0[l5 + 104:word32]
	goto l0001600C
	// succ:  l0001600C
l00015FA8:
	o0 = Mem0[l5 + 104:word32]
	o1 = Mem0[l1 + 752:word32]
	o0 = o0 + 0x00000001
	o2 = Mem0[l0 + 768:word32]
	g0 = o1 - o2
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015FA8_ds_t
	// succ:  l00015FA8_ds_f l00015FA8_ds_t
l00015FA8_ds_f:
	Mem0[l5 + 104:word32] = o0
	goto l00015FC4
	// succ:  l00015FC4
l00015FA8_ds_t:
	Mem0[l5 + 104:word32] = o0
	goto l00015FE0
	// succ:  l00015FE0
l00015FC4:
	g0 = o2 - o0
	NZVC = cond(g0)
	branch Test(EQ,Z) l00015FC4_ds_t
	// succ:  l00015FC4_ds_f l00015FC4_ds_t
l00015FC4_ds_f:
	o1 = Mem0[l1 + 752:word32]
	goto l00015FD0
	// succ:  l00015FD0
l00015FC4_ds_t:
	o1 = Mem0[l1 + 752:word32]
	goto l00015FE4
	// succ:  l00015FE4
l00015FD0:
	o0 = 0x00000000 | i1
	call exchange (retsize: 0;)
	o0 = Mem0[i6 + 68:word32]
	goto l00016000
	// succ:  l00016000
l00015FE0:
	o1 = Mem0[l1 + 752:word32]
	// succ:  l00015FE4
l00015FE4:
	o0 = Mem0[l0 + 768:word32]
	g0 = o1 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l00015FE4_ds_t
	// succ:  l00015FE4_ds_f l00015FE4_ds_t
l00015FE4_ds_f:
	o0 = Mem0[i6 + 68:word32]
	goto l00015FF4
	// succ:  l00015FF4
l00015FE4_ds_t:
	o0 = Mem0[i6 + 68:word32]
	goto l00016000
	// succ:  l00016000
l00015FF4:
	o0 = Mem0[l5 + 104:word32]
	Mem0[l1 + 752:word32] = o0
	o0 = Mem0[i6 + 68:word32]
	// succ:  l00016000
l00016000:
	Mem0[l0 + 768:word32] = o0
	Mem0[l5 + 104:word32] = o0
	// succ:  l00016008
l00016008:
	o2 = Mem0[l5 + 104:word32]
	// succ:  l0001600C
l0001600C:
	o1 = Mem0[i6 + 68:word32]
	g0 = o2 - o1
	NZVC = cond(g0)
	branch Test(NE,Z) l0001600C_ds_t
	// succ:  l0001600C_ds_f l0001600C_ds_t
l0001600C_ds_f:
	o0 = o2 << 0x00000002
	goto l0001601C
	// succ:  l0001601C
l0001600C_ds_t:
	o0 = o2 << 0x00000002
	goto l00016038
	// succ:  l00016038
l0001601C:
	o1 = Mem0[l1 + 752:word32]
	o0 = Mem0[l0 + 768:word32]
	g0 = o1 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l0001601C_ds_t
	goto l00016030
	// succ:  l00016030 l0001601C_ds_t
l0001601C_ds_t:
	Mem0[l5 + 104:word32] = o1
	goto l0001606C
	// succ:  l0001606C
l00016030:
	i0 = 0x00000000 | 0xFFFFFFFF
	goto l00016978
	// succ:  l00016978
l00016038:
	o3 = Mem0[i1 + o0:word32]
	o1 = (int32) Mem0[o3:int8]
	g0 = o1 - 0x0000002D
	NZVC = cond(g0)
	branch Test(NE,Z) l00016038_ds_t
	// succ:  l00016038_ds_f l00016038_ds_t
l00016038_ds_f:
	o0 = Mem0[l2 + 720:word32]
	goto l0001604C
	// succ:  l0001604C
l00016038_ds_t:
	o0 = Mem0[l2 + 720:word32]
	goto l00016060
	// succ:  l00016060
l0001604C:
	o0 = (int32) Mem0[o3 + 1:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l0001604C_ds_t
	goto l0001605C
	// succ:  l0001605C l0001604C_ds_t
l0001604C_ds_t:
	o2 = Mem0[i6 + 80:word32]
	goto l00016098
	// succ:  l00016098
l0001605C:
	o0 = Mem0[l2 + 720:word32]
	// succ:  l00016060
l00016060:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00016060_ds_t
	// succ:  l00016060_ds_f l00016060_ds_t
l00016060_ds_f:
	o0 = o2 + 0x00000001
	goto l0001606C
	// succ:  l0001606C
l00016060_ds_t:
	o0 = o2 + 0x00000001
	goto l00016074
	// succ:  l00016074
l0001606C:
	i0 = 0x00000000 | 0xFFFFFFFF
	i0 = 0x00000000 | 0xFFFFFFFF
	goto l00016978
	// succ:  l00016978
l00016074:
	o2 = 0x00028000
	Mem0[o2 + 100:word32] = o3
	Mem0[l5 + 104:word32] = o0
	i0 = 0x00000000 | 0x00000001
	goto l00016978
	// succ:  l00016978
l00016088:
	l3 = 0x00000000 | l1
	l7 = 0x00000000 | l4
	i3 = 0x00000000 | 0x00000001
	goto l000161B8
	// succ:  l000161B8
l00016098:
	g0 = o2 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016098_ds_t
	// succ:  l00016098_ds_f l00016098_ds_t
l00016098_ds_f:
	o1 = 0x00000000 | 0x00000000
	goto l000160A4
	// succ:  l000160A4
l00016098_ds_t:
	o1 = 0x00000000 | 0x00000000
	goto l000160B0
	// succ:  l000160B0
l000160A4:
	o0 = o0 ^ 0x0000002D
	g0 = 0x00000000 - o0
	NZVC = cond(g0)
	o1 = 0x00000000 - 0xFFFFFFFF - C
	// succ:  l000160B0
l000160B0:
	o0 = o1 + 0x00000001
	o0 = o3 + o0
	Mem0[l6 + 704:word32] = o0
	o0 = Mem0[i6 + 80:word32]
	// succ:  l000160C0
l000160C0:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000160C0_ds_t
	// succ:  l000160C0_ds_f l000160C0_ds_t
l000160C0_ds_f:
	o0 = Mem0[l5 + 104:word32]
	goto l000160CC
	// succ:  l000160CC
l000160C0_ds_t:
	o0 = Mem0[l5 + 104:word32]
	goto l0001649C
	// succ:  l0001649C
l000160CC:
	o0 = o0 << 0x00000002
	o0 = Mem0[i1 + o0:word32]
	o1 = (int32) Mem0[o0 + 1:int8]
	g0 = o1 - 0x0000002D
	NZVC = cond(g0)
	branch Test(EQ,Z) l000160CC_ds_t
	// succ:  l000160CC_ds_f l000160CC_ds_t
l000160CC_ds_f:
	g0 = i5 - 0x00000000
	NZVC = cond(g0)
	goto l000160E4
	// succ:  l000160E4
l000160CC_ds_t:
	g0 = i5 - 0x00000000
	NZVC = cond(g0)
	goto l00016110
	// succ:  l00016110
l000160E4:
	branch Test(EQ,Z) l000160E4_ds_t
	goto l000160EC
	// succ:  l000160EC l000160E4_ds_t
l000160E4_ds_t:
	o1 = Mem0[l6 + 704:word32]
	goto l000164A0
	// succ:  l000164A0
l000160EC:
	o0 = (int32) Mem0[o0 + 2:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000160EC_ds_t
	// succ:  l000160EC_ds_f l000160EC_ds_t
l000160EC_ds_f:
	l2 = Mem0[l6 + 704:word32]
	goto l000160FC
	// succ:  l000160FC
l000160EC_ds_t:
	l2 = Mem0[l6 + 704:word32]
	goto l00016114
	// succ:  l00016114
l000160FC:
	o0 = 0x00000000 | i2
	call my_index (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000160FC_ds_t
	// succ:  l000160FC_ds_f l000160FC_ds_t
l000160FC_ds_f:
	o1 = Mem0[l6 + 704:word32]
	goto l00016110
	// succ:  l00016110
l000160FC_ds_t:
	o1 = Mem0[l6 + 704:word32]
	goto l000164A0
	// succ:  l000164A0
l00016110:
	l2 = Mem0[l6 + 704:word32]
	// succ:  l00016114
l00016114:
	l3 = 0x00000000 | 0x00000000
	o2 = Mem0[i6 + 80:word32]
	i3 = 0x00000000 | 0x00000000
	o0 = (int32) Mem0[l2:int8]
	i0 = 0x00000000 | 0x00000000
	o1 = Mem0[o2:word32]
	l7 = 0x00000000 | 0xFFFFFFFF
	goto l00016138
	// succ:  l00016138
l00016134:
	o0 = (int32) Mem0[l2:int8]
	// succ:  l00016138
l00016138:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016138_ds_t
	// succ:  l00016138_ds_f l00016138_ds_t
l00016138_ds_f:
	g0 = o0 - 0x0000003D
	NZVC = cond(g0)
	goto l00016144
	// succ:  l00016144
l00016138_ds_t:
	g0 = o0 - 0x0000003D
	NZVC = cond(g0)
	goto l0001614C
	// succ:  l0001614C
l00016144:
	branch Test(NE,Z) l00016144_ds_t
	goto l0001614C
	// succ:  l0001614C l00016144_ds_t
l00016144_ds_t:
	l2 = l2 + 0x00000001
	goto l00016134
	// succ:  l00016134
l0001614C:
	l1 = Mem0[i6 + 80:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l0001614C_ds_t
	// succ:  l0001614C_ds_f l0001614C_ds_t
l0001614C_ds_f:
	l4 = 0x00000000 | 0x00000000
	goto l0001615C
	// succ:  l0001615C
l0001614C_ds_t:
	l4 = 0x00000000 | 0x00000000
	goto l000161B8
	// succ:  l000161B8
l0001615C:
	o1 = Mem0[l6 + 704:word32]
	o0 = Mem0[l1:word32]
	o2 = l2 - o1
	call strncmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l0001615C_ds_t
	goto l00016178
	// succ:  l00016178 l0001615C_ds_t
l0001615C_ds_t:
	l1 = l1 + 0x00000010
	goto l000161A8
	// succ:  l000161A8
l00016178:
	l0 = Mem0[l6 + 704:word32]
	o0 = Mem0[l1:word32]
	l0 = l2 - l0
	call strlen (retsize: 0;)
	g0 = l0 - o0
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016178_ds_t
	// succ:  l00016178_ds_f l00016178_ds_t
l00016178_ds_f:
	g0 = l3 - 0x00000000
	NZVC = cond(g0)
	goto l00016194
	// succ:  l00016194
l00016178_ds_t:
	g0 = l3 - 0x00000000
	NZVC = cond(g0)
	goto l00016088
	// succ:  l00016088
l00016194:
	branch Test(NE,Z) l00016194_ds_t
	goto l0001619C
	// succ:  l0001619C l00016194_ds_t
l00016194_ds_t:
	i0 = 0x00000000 | 0x00000001
	goto l000161A4
	// succ:  l000161A4
l0001619C:
	l3 = 0x00000000 | l1
	l7 = 0x00000000 | l4
	// succ:  l000161A4
l000161A4:
	l1 = l1 + 0x00000010
	// succ:  l000161A8
l000161A8:
	o0 = Mem0[l1:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000161A8_ds_t
	// succ:  l000161A8_ds_f l000161A8_ds_t
l000161A8_ds_f:
	l4 = l4 + 0x00000001
	goto l000161B8
	// succ:  l000161B8
l000161A8_ds_t:
	l4 = l4 + 0x00000001
	goto l0001615C
	// succ:  l0001615C
l000161B8:
	g0 = i0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000161B8_ds_t
	// succ:  l000161B8_ds_f l000161B8_ds_t
l000161B8_ds_f:
	g0 = i3 - 0x00000000
	NZVC = cond(g0)
	goto l000161C4
	// succ:  l000161C4
l000161B8_ds_t:
	g0 = i3 - 0x00000000
	NZVC = cond(g0)
	goto l00016230
	// succ:  l00016230
l000161C4:
	branch Test(NE,Z) l000161C4_ds_t
	// succ:  l000161C4_ds_f l000161C4_ds_t
l000161C4_ds_f:
	g0 = l3 - 0x00000000
	NZVC = cond(g0)
	goto l000161CC
	// succ:  l000161CC
l000161C4_ds_t:
	g0 = l3 - 0x00000000
	NZVC = cond(g0)
	goto l00016234
	// succ:  l00016234
l000161CC:
	o0 = 0x00028000
	o1 = Mem0[o0 + 112:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000161CC_ds_t
	// succ:  l000161CC_ds_f l000161CC_ds_t
l000161CC_ds_f:
	o1 = Mem0[l5 + 104:word32]
	goto l000161E0
	// succ:  l000161E0
l000161CC_ds_t:
	o1 = Mem0[l5 + 104:word32]
	goto l00016200
	// succ:  l00016200
l000161E0:
	o0 = 0x0002B400
	o1 = o1 << 0x00000002
	o3 = Mem0[i1 + o1:word32]
	o0 = o0 | 0x00000240
	o1 = 0x00017800
	o2 = Mem0[i1:word32]
	o1 = o1 | 0x00000140
	call fprintf (retsize: 0;)
l00016200:
	o0 = Mem0[l6 + 704:word32]
	i0 = 0x00000000 | 0x0000003F
	call strlen (retsize: 0;)
	o1 = Mem0[l6 + 704:word32]
	o3 = 0x00028000
	o2 = Mem0[l5 + 104:word32]
	o1 = o1 + o0
	o2 = o2 + 0x00000001
	Mem0[l6 + 704:word32] = o1
	Mem0[l5 + 104:word32] = o2
	Mem0[o3 + 116:word32] = 0x00000000
	goto l00016978
	// succ:  l00016978
l00016230:
	g0 = l3 - 0x00000000
	NZVC = cond(g0)
	// succ:  l00016234
l00016234:
	branch Test(EQ,Z) l00016234_ds_t
	// succ:  l00016234_ds_f l00016234_ds_t
l00016234_ds_f:
	o2 = Mem0[l5 + 104:word32]
	goto l0001623C
	// succ:  l0001623C
l00016234_ds_t:
	o2 = Mem0[l5 + 104:word32]
	goto l000163D0
	// succ:  l000163D0
l0001623C:
	o3 = o2 + 0x00000001
	Mem0[l5 + 104:word32] = o3
	o0 = (int32) Mem0[l2:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l0001623C_ds_t
	// succ:  l0001623C_ds_f l0001623C_ds_t
l0001623C_ds_f:
	o0 = Mem0[l3 + 4:word32]
	goto l00016254
	// succ:  l00016254
l0001623C_ds_t:
	o0 = Mem0[l3 + 4:word32]
	goto l000162FC
	// succ:  l000162FC
l00016254:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016254_ds_t
	// succ:  l00016254_ds_f l00016254_ds_t
l00016254_ds_f:
	o0 = l2 + 0x00000001
	goto l00016260
	// succ:  l00016260
l00016254_ds_t:
	o0 = l2 + 0x00000001
	goto l0001626C
	// succ:  l0001626C
l00016260:
	o1 = 0x00028000
	Mem0[o1 + 100:word32] = o0
	goto l00016398
	// succ:  l00016398
l0001626C:
	o0 = 0x00028000
	o1 = Mem0[o0 + 112:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l0001626C_ds_t
	// succ:  l0001626C_ds_f l0001626C_ds_t
l0001626C_ds_f:
	o0 = o3 << 0x00000002
	goto l00016280
	// succ:  l00016280
l0001626C_ds_t:
	o0 = o3 << 0x00000002
	goto l00016398
	// succ:  l00016398
l00016280:
	o0 = o0 + i1
	o3 = Mem0[o0 + -4:word32]
	o1 = (int32) Mem0[o3 + 1:int8]
	g0 = o1 - 0x0000002D
	NZVC = cond(g0)
	branch Test(NE,Z) l00016280_ds_t
	// succ:  l00016280_ds_f l00016280_ds_t
l00016280_ds_f:
	o0 = 0x0002B400
	goto l00016298
	// succ:  l00016298
l00016280_ds_t:
	o0 = 0x0002B400
	goto l000162B8
	// succ:  l000162B8
l00016298:
	o1 = 0x00017800
	o2 = Mem0[i1:word32]
	o0 = o0 | 0x00000240
	o3 = Mem0[l3:word32]
	o1 = o1 | 0x00000160
	call fprintf (retsize: 0;)
	o0 = Mem0[l6 + 704:word32]
	goto l000162D8
	// succ:  l000162D8
l000162B8:
	o1 = 0x00017800
	o2 = Mem0[i1:word32]
	o0 = o0 | 0x00000240
	o3 = (int32) Mem0[o3:int8]
	o1 = o1 | 0x00000190
	o4 = Mem0[l3:word32]
	call fprintf (retsize: 0;)
	o0 = Mem0[l6 + 704:word32]
	// succ:  l000162D8
l000162D8:
	i0 = 0x00000000 | 0x0000003F
	call strlen (retsize: 0;)
	o1 = Mem0[l6 + 704:word32]
	o3 = 0x00028000
	o2 = Mem0[l3 + 12:word32]
	o1 = o1 + o0
	Mem0[l6 + 704:word32] = o1
	Mem0[o3 + 116:word32] = o2
	goto l00016978
	// succ:  l00016978
l000162FC:
	g0 = o0 - 0x00000001
	NZVC = cond(g0)
	branch Test(NE,Z) l000162FC_ds_t
	// succ:  l000162FC_ds_f l000162FC_ds_t
l000162FC_ds_f:
	o0 = Mem0[i6 + 68:word32]
	goto l00016308
	// succ:  l00016308
l000162FC_ds_t:
	o0 = Mem0[i6 + 68:word32]
	goto l00016398
	// succ:  l00016398
l00016308:
	g0 = o3 - o0
	NZVC = cond(g0)
	branch Test(GE,NV) l00016308_ds_t
	// succ:  l00016308_ds_f l00016308_ds_t
l00016308_ds_f:
	o0 = 0x00028000
	goto l00016314
	// succ:  l00016314
l00016308_ds_t:
	o0 = 0x00028000
	goto l00016330
	// succ:  l00016330
l00016314:
	o0 = o3 << 0x00000002
	o1 = Mem0[i1 + o0:word32]
	o2 = o2 + 0x00000002
	o0 = 0x00028000
	Mem0[o0 + 100:word32] = o1
	Mem0[l5 + 104:word32] = o2
	goto l00016398
	// succ:  l00016398
l00016330:
	o1 = Mem0[o0 + 112:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016330_ds_t
	// succ:  l00016330_ds_f l00016330_ds_t
l00016330_ds_f:
	o1 = o3 << 0x00000002
	goto l00016340
	// succ:  l00016340
l00016330_ds_t:
	o1 = o3 << 0x00000002
	goto l00016360
	// succ:  l00016360
l00016340:
	o1 = o1 + i1
	o3 = Mem0[o1 + -4:word32]
	o0 = 0x0002B400
	o1 = 0x00017800
	o2 = Mem0[i1:word32]
	o0 = o0 | 0x00000240
	o1 = o1 | 0x000001C0
	call fprintf (retsize: 0;)
l00016360:
	o0 = Mem0[l6 + 704:word32]
	call strlen (retsize: 0;)
	o1 = Mem0[l6 + 704:word32]
	o3 = 0x00028000
	o2 = Mem0[l3 + 12:word32]
	o1 = o1 + o0
	Mem0[l6 + 704:word32] = o1
	Mem0[o3 + 116:word32] = o2
	o0 = (int32) Mem0[i2:int8]
	i0 = 0x00000000 | 0x0000003F
	goto l00016388
	// succ:  l00016388
l00016360_ds_t:
	i0 = 0x00000000 | 0x0000003A
	goto l00016978
	// succ:  l00016978
l00016388:
	g0 = o0 - 0x0000003A
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016360_ds_t
	// succ:  l00016394 l00016360_ds_t
l00016394:
	o0 = Mem0[l6 + 704:word32]
	call strlen (retsize: 0;)
	goto l00016978
	// succ:  l00016978
l00016398:
	o0 = Mem0[l6 + 704:word32]
	call strlen (retsize: 0;)
	o1 = Mem0[l6 + 704:word32]
	g0 = i4 - 0x00000000
	NZVC = cond(g0)
	o1 = o1 + o0
	branch Test(EQ,Z) l00016398_ds_t
	// succ:  l00016398_ds_f l00016398_ds_t
l00016398_ds_f:
	Mem0[l6 + 704:word32] = o1
	goto l000163B4
	// succ:  l000163B4
l00016398_ds_t:
	Mem0[l6 + 704:word32] = o1
	goto l000163B8
	// succ:  l000163B8
l000163B4:
	Mem0[i4:word32] = l7
	// succ:  l000163B8
l000163B8:
	o1 = Mem0[l3 + 8:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000163B8_ds_t
	goto l000163C8
	// succ:  l000163C8 l000163B8_ds_t
l000163B8_ds_t:
	o0 = Mem0[l3 + 12:word32]
	goto l00016874
	// succ:  l00016874
l000163C8:
	i0 = Mem0[l3 + 12:word32]
	goto l00016978
	// succ:  l00016978
l000163D0:
	g0 = i5 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000163D0_ds_t
	// succ:  l000163D0_ds_f l000163D0_ds_t
l000163D0_ds_f:
	o0 = Mem0[l5 + 104:word32]
	goto l000163DC
	// succ:  l000163DC
l000163D0_ds_t:
	o0 = Mem0[l5 + 104:word32]
	goto l0001640C
	// succ:  l0001640C
l000163DC:
	o0 = o0 << 0x00000002
	o1 = Mem0[i1 + o0:word32]
	o2 = (int32) Mem0[o1 + 1:int8]
	g0 = o2 - 0x0000002D
	NZVC = cond(g0)
	branch Test(EQ,Z) l000163DC_ds_t
	// succ:  l000163DC_ds_f l000163DC_ds_t
l000163DC_ds_f:
	o2 = Mem0[l6 + 704:word32]
	goto l000163F4
	// succ:  l000163F4
l000163DC_ds_t:
	o2 = Mem0[l6 + 704:word32]
	goto l0001640C
	// succ:  l0001640C
l000163F4:
	o0 = 0x00000000 | i2
	o1 = (int32) Mem0[o2:int8]
	call my_index (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000163F4_ds_t
	// succ:  l000163F4_ds_f l000163F4_ds_t
l000163F4_ds_f:
	o1 = Mem0[l6 + 704:word32]
	goto l0001640C
	// succ:  l0001640C
l000163F4_ds_t:
	o1 = Mem0[l6 + 704:word32]
	goto l000164A0
	// succ:  l000164A0
l0001640C:
	o0 = 0x00028000
	o1 = Mem0[o0 + 112:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l0001640C_ds_t
	// succ:  l0001640C_ds_f l0001640C_ds_t
l0001640C_ds_f:
	o0 = Mem0[l5 + 104:word32]
	goto l00016420
	// succ:  l00016420
l0001640C_ds_t:
	o0 = Mem0[l5 + 104:word32]
	goto l00016474
	// succ:  l00016474
l00016420:
	o0 = o0 << 0x00000002
	o3 = Mem0[i1 + o0:word32]
	o1 = (int32) Mem0[o3 + 1:int8]
	g0 = o1 - 0x0000002D
	NZVC = cond(g0)
	branch Test(NE,Z) l00016420_ds_t
	// succ:  l00016420_ds_f l00016420_ds_t
l00016420_ds_f:
	o0 = 0x0002B400
	goto l00016438
	// succ:  l00016438
l00016420_ds_t:
	o0 = 0x0002B400
	goto l00016458
	// succ:  l00016458
l00016438:
	o1 = 0x00017800
	o2 = Mem0[i1:word32]
	o0 = o0 | 0x00000240
	o3 = Mem0[l6 + 704:word32]
	o1 = o1 | 0x000001E8
	call fprintf (retsize: 0;)
	o0 = Mem0[l5 + 104:word32]
	goto l00016478
	// succ:  l00016478
l00016458:
	o1 = 0x00017800
	o2 = Mem0[i1:word32]
	o0 = o0 | 0x00000240
	o3 = (int32) Mem0[o3:int8]
	o1 = o1 | 0x00000208
	o4 = Mem0[l6 + 704:word32]
	call fprintf (retsize: 0;)
l00016474:
	o0 = Mem0[l5 + 104:word32]
	// succ:  l00016478
l00016478:
	o1 = 0x00017800
	o1 = o1 | 0x00000228
	o0 = o0 + 0x00000001
	o2 = 0x00028000
	Mem0[l6 + 704:word32] = o1
	Mem0[l5 + 104:word32] = o0
	Mem0[o2 + 116:word32] = 0x00000000
	i0 = 0x00000000 | 0x0000003F
	goto l00016978
	// succ:  l00016978
l0001649C:
	o1 = Mem0[l6 + 704:word32]
	// succ:  l000164A0
l000164A0:
	o0 = 0x00000000 | i2
	i0 = (word32) Mem0[o1:byte]
	o1 = o1 + 0x00000001
	o2 = i0 << 0x00000018
	l0 = o2 >> 0x00000018
	Mem0[l6 + 704:word32] = o1
	o1 = 0x00000000 | l0
	call my_index (retsize: 0;)
	o3 = Mem0[l6 + 704:word32]
	o2 = 0x00000000 | o0
	o0 = (int32) Mem0[o3:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000164A0_ds_t
	// succ:  l000164A0_ds_f l000164A0_ds_t
l000164A0_ds_f:
	g0 = o2 - 0x00000000
	NZVC = cond(g0)
	goto l000164D8
	// succ:  l000164D8
l000164A0_ds_t:
	g0 = o2 - 0x00000000
	NZVC = cond(g0)
	goto l000164E4
	// succ:  l000164E4
l000164D8:
	o0 = Mem0[l5 + 104:word32]
	o0 = o0 + 0x00000001
	Mem0[l5 + 104:word32] = o0
	// succ:  l000164E4
l000164E4:
	branch Test(EQ,Z) l000164E4_ds_t
	// succ:  l000164E4_ds_f l000164E4_ds_t
l000164E4_ds_f:
	g0 = l0 - 0x0000003A
	NZVC = cond(g0)
	goto l000164EC
	// succ:  l000164EC
l000164E4_ds_t:
	g0 = l0 - 0x0000003A
	NZVC = cond(g0)
	goto l000164F4
	// succ:  l000164F4
l000164EC:
	branch Test(NE,Z) l000164EC_ds_t
	goto l000164F4
	// succ:  l000164F4 l000164EC_ds_t
l000164EC_ds_t:
	o0 = (int32) Mem0[o2:int8]
	goto l00016568
	// succ:  l00016568
l000164F4:
	o0 = 0x00028000
	o1 = Mem0[o0 + 112:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000164F4_ds_t
	// succ:  l000164F4_ds_f l000164F4_ds_t
l000164F4_ds_f:
	o0 = 0x0002B000
	goto l00016508
	// succ:  l00016508
l000164F4_ds_t:
	o0 = 0x0002B000
	goto l00016550
	// succ:  l00016550
l00016508:
	o1 = Mem0[o0 + 736:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016508_ds_t
	// succ:  l00016508_ds_f l00016508_ds_t
l00016508_ds_f:
	o0 = 0x0002B400
	goto l00016518
	// succ:  l00016518
l00016508_ds_t:
	o0 = 0x0002B400
	goto l00016538
	// succ:  l00016538
l00016518:
	o1 = 0x00017800
	o2 = Mem0[i1:word32]
	o0 = o0 | 0x00000240
	o1 = o1 | 0x00000230
	o3 = 0x00000000 | l0
	call fprintf (retsize: 0;)
	o0 = i0 << 0x00000018
	goto l00016554
	// succ:  l00016554
l00016538:
	o1 = 0x00017800
	o2 = Mem0[i1:word32]
	o0 = o0 | 0x00000240
	o1 = o1 | 0x00000250
	o3 = 0x00000000 | l0
	call fprintf (retsize: 0;)
l00016550:
	o0 = i0 << 0x00000018
	// succ:  l00016554
l00016554:
	o0 = o0 >> 0x00000018
	o1 = 0x00028000
	Mem0[o1 + 116:word32] = o0
	i0 = 0x00000000 | 0x0000003F
	goto l00016978
	// succ:  l00016978
l00016568:
	g0 = o0 - 0x00000057
	NZVC = cond(g0)
	branch Test(NE,Z) l00016568_ds_t
	// succ:  l00016568_ds_f l00016568_ds_t
l00016568_ds_f:
	o1 = (word32) Mem0[o2 + 1:byte]
	goto l00016574
	// succ:  l00016574
l00016568_ds_t:
	o1 = (word32) Mem0[o2 + 1:byte]
	goto l00016888
	// succ:  l00016888
l00016574:
	g0 = o1 - 0x0000003B
	NZVC = cond(g0)
	branch Test(NE,Z) l00016574_ds_t
	// succ:  l00016574_ds_f l00016574_ds_t
l00016574_ds_f:
	o0 = o1 << 0x00000018
	goto l00016580
	// succ:  l00016580
l00016574_ds_t:
	o0 = o1 << 0x00000018
	goto l0001688C
	// succ:  l0001688C
l00016580:
	o0 = (int32) Mem0[o3:int8]
	l3 = 0x00000000 | 0x00000000
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	i0 = 0x00000000 | 0x00000000
	l4 = 0x00000000 | 0x00000000
	branch Test(EQ,Z) l00016580_ds_t
	// succ:  l00016580_ds_f l00016580_ds_t
l00016580_ds_f:
	l7 = 0x00000000 | 0x00000000
	goto l0001659C
	// succ:  l0001659C
l00016580_ds_t:
	l7 = 0x00000000 | 0x00000000
	goto l000165B4
	// succ:  l000165B4
l0001659C:
	o0 = Mem0[l5 + 104:word32]
	o1 = 0x00028000
	o0 = o0 + 0x00000001
	Mem0[o1 + 100:word32] = o3
	Mem0[l5 + 104:word32] = o0
	goto l0001663C
	// succ:  l0001663C
l000165B4:
	o2 = Mem0[l5 + 104:word32]
	o0 = Mem0[i6 + 68:word32]
	g0 = o2 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l000165B4_ds_t
	// succ:  l000165B4_ds_f l000165B4_ds_t
l000165B4_ds_f:
	o0 = o2 << 0x00000002
	goto l000165C8
	// succ:  l000165C8
l000165B4_ds_t:
	o0 = o2 << 0x00000002
	goto l00016624
	// succ:  l00016624
l000165C8:
	o0 = 0x00028000
	o1 = Mem0[o0 + 112:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000165C8_ds_t
	// succ:  l000165C8_ds_f l000165C8_ds_t
l000165C8_ds_f:
	o0 = 0x0002B400
	goto l000165DC
	// succ:  l000165DC
l000165C8_ds_t:
	o0 = 0x0002B400
	goto l000165F4
	// succ:  l000165F4
l000165DC:
	o1 = 0x00017800
	o2 = Mem0[i1:word32]
	o0 = o0 | 0x00000240
	o1 = o1 | 0x00000270
	o3 = 0x00000000 | l0
	call fprintf (retsize: 0;)
l000165F4:
	o0 = 0x00028000
	Mem0[o0 + 116:word32] = l0
	o1 = (int32) Mem0[i2:int8]
	g0 = o1 - 0x0000003A
	NZVC = cond(g0)
	branch Test(NE,Z) l000165F4_ds_t
	// succ:  l000165F4_ds_f l000165F4_ds_t
l000165F4_ds_f:
	i0 = 0x00000000 | 0x0000003F
	goto l0001660C
	// succ:  l0001660C
l000165F4_ds_t:
	i0 = 0x00000000 | 0x0000003F
	goto l00016970
	// succ:  l00016970
l0001660C:
	i0 = 0x00000000 | 0x0000003A
	goto l00016970
	// succ:  l00016970
l00016614:
	l3 = 0x00000000 | i3
	l7 = 0x00000000 | l2
	i0 = 0x00000000 | 0x00000001
	goto l000166CC
	// succ:  l000166CC
l00016624:
	o1 = Mem0[i1 + o0:word32]
	o2 = o2 + 0x00000001
	o0 = 0x00028000
	Mem0[o0 + 100:word32] = o1
	Mem0[l5 + 104:word32] = o2
	o1 = 0x00028000
	// succ:  l0001663C
l0001663C:
	l1 = Mem0[o1 + 100:word32]
	Mem0[l6 + 704:word32] = l1
	goto l00016644
	// succ:  l00016644
l0001663C_ds_f:
	g0 = o0 - 0x0000003D
	NZVC = cond(g0)
	goto l00016654
	// succ:  l00016654
l0001663C_ds_t:
	g0 = o0 - 0x0000003D
	NZVC = cond(g0)
	goto l0001665C
	// succ:  l0001665C
l00016644:
	o0 = (int32) Mem0[l1:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l0001663C_ds_t
	goto l0001663C_ds_f
	// succ:  l0001663C_ds_f l0001663C_ds_t
l00016654:
	branch Test(NE,Z) l00016654_ds_t
	goto l0001665C
	// succ:  l0001665C l00016654_ds_t
l00016654_ds_t:
	l1 = l1 + 0x00000001
	goto l00016644
	// succ:  l00016644
l0001665C:
	i3 = Mem0[i6 + 80:word32]
	o0 = Mem0[i3:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l0001665C_ds_t
	// succ:  l0001665C_ds_f l0001665C_ds_t
l0001665C_ds_f:
	l2 = 0x00000000 | 0x00000000
	goto l00016670
	// succ:  l00016670
l0001665C_ds_t:
	l2 = 0x00000000 | 0x00000000
	goto l000166CC
	// succ:  l000166CC
l00016670:
	o1 = Mem0[l6 + 704:word32]
	o0 = Mem0[i3:word32]
	o2 = l1 - o1
	call strncmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l00016670_ds_t
	goto l0001668C
	// succ:  l0001668C l00016670_ds_t
l00016670_ds_t:
	i3 = i3 + 0x00000010
	goto l000166BC
	// succ:  l000166BC
l0001668C:
	l0 = Mem0[l6 + 704:word32]
	o0 = Mem0[i3:word32]
	l0 = l1 - l0
	call strlen (retsize: 0;)
	g0 = l0 - o0
	NZVC = cond(g0)
	branch Test(EQ,Z) l0001668C_ds_t
	// succ:  l0001668C_ds_f l0001668C_ds_t
l0001668C_ds_f:
	g0 = l3 - 0x00000000
	NZVC = cond(g0)
	goto l000166A8
	// succ:  l000166A8
l0001668C_ds_t:
	g0 = l3 - 0x00000000
	NZVC = cond(g0)
	goto l00016614
	// succ:  l00016614
l000166A8:
	branch Test(NE,Z) l000166A8_ds_t
	goto l000166B0
	// succ:  l000166B0 l000166A8_ds_t
l000166A8_ds_t:
	l4 = 0x00000000 | 0x00000001
	goto l000166B8
	// succ:  l000166B8
l000166B0:
	l3 = 0x00000000 | i3
	l7 = 0x00000000 | l2
	// succ:  l000166B8
l000166B8:
	i3 = i3 + 0x00000010
	// succ:  l000166BC
l000166BC:
	o0 = Mem0[i3:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000166BC_ds_t
	// succ:  l000166BC_ds_f l000166BC_ds_t
l000166BC_ds_f:
	l2 = l2 + 0x00000001
	goto l000166CC
	// succ:  l000166CC
l000166BC_ds_t:
	l2 = l2 + 0x00000001
	goto l00016670
	// succ:  l00016670
l000166CC:
	g0 = l4 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000166CC_ds_t
	// succ:  l000166CC_ds_f l000166CC_ds_t
l000166CC_ds_f:
	g0 = i0 - 0x00000000
	NZVC = cond(g0)
	goto l000166D8
	// succ:  l000166D8
l000166CC_ds_t:
	g0 = i0 - 0x00000000
	NZVC = cond(g0)
	goto l0001673C
	// succ:  l0001673C
l000166D8:
	branch Test(NE,Z) l000166D8_ds_t
	// succ:  l000166D8_ds_f l000166D8_ds_t
l000166D8_ds_f:
	g0 = l3 - 0x00000000
	NZVC = cond(g0)
	goto l000166E0
	// succ:  l000166E0
l000166D8_ds_t:
	g0 = l3 - 0x00000000
	NZVC = cond(g0)
	goto l00016740
	// succ:  l00016740
l000166E0:
	o0 = 0x00028000
	o1 = Mem0[o0 + 112:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000166E0_ds_t
	// succ:  l000166E0_ds_f l000166E0_ds_t
l000166E0_ds_f:
	o1 = Mem0[l5 + 104:word32]
	goto l000166F4
	// succ:  l000166F4
l000166E0_ds_t:
	o1 = Mem0[l5 + 104:word32]
	goto l00016714
	// succ:  l00016714
l000166F4:
	o0 = 0x0002B400
	o1 = o1 << 0x00000002
	o3 = Mem0[i1 + o1:word32]
	o0 = o0 | 0x00000240
	o1 = 0x00017800
	o2 = Mem0[i1:word32]
	o1 = o1 | 0x00000298
	call fprintf (retsize: 0;)
l00016714:
	o0 = Mem0[l6 + 704:word32]
	i0 = 0x00000000 | 0x0000003F
	call strlen (retsize: 0;)
	o1 = Mem0[l6 + 704:word32]
	o2 = Mem0[l5 + 104:word32]
	o1 = o1 + o0
	o2 = o2 + 0x00000001
	Mem0[l6 + 704:word32] = o1
	Mem0[l5 + 104:word32] = o2
	goto l00016978
	// succ:  l00016978
l0001673C:
	g0 = l3 - 0x00000000
	NZVC = cond(g0)
	// succ:  l00016740
l00016740:
	branch Test(EQ,Z) l00016740_ds_t
	goto l00016748
	// succ:  l00016748 l00016740_ds_t
l00016740_ds_t:
	Mem0[l6 + 704:word32] = 0x00000000
	goto l00016880
	// succ:  l00016880
l00016748:
	o0 = (int32) Mem0[l1:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016748_ds_t
	// succ:  l00016748_ds_f l00016748_ds_t
l00016748_ds_f:
	o0 = Mem0[l3 + 4:word32]
	goto l00016758
	// succ:  l00016758
l00016748_ds_t:
	o0 = Mem0[l3 + 4:word32]
	goto l000167B8
	// succ:  l000167B8
l00016758:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016758_ds_t
	// succ:  l00016758_ds_f l00016758_ds_t
l00016758_ds_f:
	o0 = l1 + 0x00000001
	goto l00016764
	// succ:  l00016764
l00016758_ds_t:
	o0 = l1 + 0x00000001
	goto l00016770
	// succ:  l00016770
l00016764:
	o2 = 0x00028000
	Mem0[o2 + 100:word32] = o0
	goto l00016840
	// succ:  l00016840
l00016770:
	o0 = 0x00028000
	o1 = Mem0[o0 + 112:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016770_ds_t
	// succ:  l00016770_ds_f l00016770_ds_t
l00016770_ds_f:
	o0 = 0x0002B400
	goto l00016784
	// succ:  l00016784
l00016770_ds_t:
	o0 = 0x0002B400
	goto l0001679C
	// succ:  l0001679C
l00016784:
	o1 = 0x00017800
	o2 = Mem0[i1:word32]
	o0 = o0 | 0x00000240
	o3 = Mem0[l3:word32]
	o1 = o1 | 0x000002C0
	call fprintf (retsize: 0;)
l0001679C:
	o0 = Mem0[l6 + 704:word32]
	i0 = 0x00000000 | 0x0000003F
	call strlen (retsize: 0;)
	o1 = Mem0[l6 + 704:word32]
	o1 = o1 + o0
	Mem0[l6 + 704:word32] = o1
	goto l00016978
	// succ:  l00016978
l000167B8:
	g0 = o0 - 0x00000001
	NZVC = cond(g0)
	branch Test(NE,Z) l000167B8_ds_t
	// succ:  l000167B8_ds_f l000167B8_ds_t
l000167B8_ds_f:
	o2 = Mem0[l5 + 104:word32]
	goto l000167C4
	// succ:  l000167C4
l000167B8_ds_t:
	o2 = Mem0[l5 + 104:word32]
	goto l00016840
	// succ:  l00016840
l000167C4:
	o0 = Mem0[i6 + 68:word32]
	g0 = o2 - o0
	NZVC = cond(g0)
	branch Test(GE,NV) l000167C4_ds_t
	// succ:  l000167C4_ds_f l000167C4_ds_t
l000167C4_ds_f:
	o0 = 0x00028000
	goto l000167D4
	// succ:  l000167D4
l000167C4_ds_t:
	o0 = 0x00028000
	goto l000167F0
	// succ:  l000167F0
l000167D4:
	o0 = o2 << 0x00000002
	o1 = Mem0[i1 + o0:word32]
	o2 = o2 + 0x00000001
	o0 = 0x00028000
	Mem0[o0 + 100:word32] = o1
	Mem0[l5 + 104:word32] = o2
	goto l00016840
	// succ:  l00016840
l000167F0:
	o1 = Mem0[o0 + 112:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000167F0_ds_t
	// succ:  l000167F0_ds_f l000167F0_ds_t
l000167F0_ds_f:
	o1 = o2 << 0x00000002
	goto l00016800
	// succ:  l00016800
l000167F0_ds_t:
	o1 = o2 << 0x00000002
	goto l00016820
	// succ:  l00016820
l00016800:
	o1 = o1 + i1
	o3 = Mem0[o1 + -4:word32]
	o0 = 0x0002B400
	o1 = 0x00017800
	o2 = Mem0[i1:word32]
	o0 = o0 | 0x00000240
	o1 = o1 | 0x000001C0
	call fprintf (retsize: 0;)
l00016820:
	o0 = Mem0[l6 + 704:word32]
	call strlen (retsize: 0;)
	o1 = Mem0[l6 + 704:word32]
	i0 = 0x00000000 | 0x0000003F
	o1 = o1 + o0
	Mem0[l6 + 704:word32] = o1
	o0 = (int32) Mem0[i2:int8]
	goto l00016388
	// succ:  l00016388
l00016840:
	o0 = Mem0[l6 + 704:word32]
	call strlen (retsize: 0;)
	o1 = Mem0[l6 + 704:word32]
	g0 = i4 - 0x00000000
	NZVC = cond(g0)
	o1 = o1 + o0
	branch Test(EQ,Z) l00016840_ds_t
	// succ:  l00016840_ds_f l00016840_ds_t
l00016840_ds_f:
	Mem0[l6 + 704:word32] = o1
	goto l0001685C
	// succ:  l0001685C
l00016840_ds_t:
	Mem0[l6 + 704:word32] = o1
	goto l00016860
	// succ:  l00016860
l0001685C:
	Mem0[i4:word32] = l7
	// succ:  l00016860
l00016860:
	o1 = Mem0[l3 + 8:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016860_ds_t
	goto l00016870
	// succ:  l00016870 l00016860_ds_t
l00016860_ds_t:
	i0 = Mem0[l3 + 12:word32]
	goto l00016978
	// succ:  l00016978
l00016870:
	o0 = Mem0[l3 + 12:word32]
	// succ:  l00016874
l00016874:
	i0 = 0x00000000 | 0x00000000
	Mem0[o1:word32] = o0
	goto l00016978
	// succ:  l00016978
l00016880:
	i0 = 0x00000000 | 0x00000057
	goto l00016978
	// succ:  l00016978
l00016888:
	o0 = o1 << 0x00000018
	// succ:  l0001688C
l0001688C:
	o0 = o0 >> 0x00000018
	g0 = o0 - 0x0000003A
	NZVC = cond(g0)
	branch Test(NE,Z) l0001688C_ds_t
	goto l0001689C
	// succ:  l0001689C l0001688C_ds_t
l0001688C_ds_t:
	i0 = i0 << 0x00000018
	goto l00016974
	// succ:  l00016974
l0001689C:
	o0 = (int32) Mem0[o2 + 2:int8]
	g0 = o0 - 0x0000003A
	NZVC = cond(g0)
	branch Test(NE,Z) l0001689C_ds_t
	// succ:  l0001689C_ds_f l0001689C_ds_t
l0001689C_ds_f:
	o1 = Mem0[l6 + 704:word32]
	goto l000168AC
	// succ:  l000168AC
l0001689C_ds_t:
	o1 = Mem0[l6 + 704:word32]
	goto l000168C8
	// succ:  l000168C8
l000168AC:
	o0 = (int32) Mem0[o1:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(NE,Z) l000168AC_ds_t
	// succ:  l000168AC_ds_f l000168AC_ds_t
l000168AC_ds_f:
	o0 = Mem0[l5 + 104:word32]
	goto l000168BC
	// succ:  l000168BC
l000168AC_ds_t:
	o0 = Mem0[l5 + 104:word32]
	goto l000168D8
	// succ:  l000168D8
l000168BC:
	o0 = 0x00028000
	Mem0[o0 + 100:word32] = 0x00000000
	goto l0001696C
	// succ:  l0001696C
l000168C8:
	o0 = (int32) Mem0[o1:int8]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l000168C8_ds_t
	// succ:  l000168C8_ds_f l000168C8_ds_t
l000168C8_ds_f:
	o0 = Mem0[l5 + 104:word32]
	goto l000168D8
	// succ:  l000168D8
l000168C8_ds_t:
	o0 = Mem0[l5 + 104:word32]
	goto l000168EC
	// succ:  l000168EC
l000168D8:
	o2 = 0x00028000
	o0 = o0 + 0x00000001
	Mem0[o2 + 100:word32] = o1
	Mem0[l5 + 104:word32] = o0
	o2 = 0x00028000
	o0 = o0 + 0x00000001
	Mem0[o2 + 100:word32] = o1
	Mem0[l5 + 104:word32] = o0
	goto l0001696C
	// succ:  l0001696C
l000168EC:
	o2 = Mem0[l5 + 104:word32]
	o0 = Mem0[i6 + 68:word32]
	g0 = o2 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l000168EC_ds_t
	// succ:  l000168EC_ds_f l000168EC_ds_t
l000168EC_ds_f:
	o0 = o2 << 0x00000002
	goto l00016900
	// succ:  l00016900
l000168EC_ds_t:
	o0 = o2 << 0x00000002
	goto l00016958
	// succ:  l00016958
l00016900:
	o0 = 0x00028000
	o1 = Mem0[o0 + 112:word32]
	g0 = o1 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016900_ds_t
	// succ:  l00016900_ds_f l00016900_ds_t
l00016900_ds_f:
	o0 = 0x0002B400
	goto l00016914
	// succ:  l00016914
l00016900_ds_t:
	o0 = 0x0002B400
	goto l00016930
	// succ:  l00016930
l00016914:
	o1 = 0x00017800
	o3 = i0 << 0x00000018
	o2 = Mem0[i1:word32]
	o0 = o0 | 0x00000240
	o1 = o1 | 0x00000270
	o3 = o3 >> 0x00000018
	call fprintf (retsize: 0;)
l00016930:
	o0 = i0 << 0x00000018
	o0 = o0 >> 0x00000018
	o1 = 0x00028000
	Mem0[o1 + 116:word32] = o0
	o2 = (int32) Mem0[i2:int8]
	g0 = o2 - 0x0000003A
	NZVC = cond(g0)
	branch Test(NE,Z) l00016930_ds_t
	// succ:  l00016930_ds_f l00016930_ds_t
l00016930_ds_f:
	i0 = 0x00000000 | 0x0000003F
	goto l00016950
	// succ:  l00016950
l00016930_ds_t:
	i0 = 0x00000000 | 0x0000003F
	goto l0001696C
	// succ:  l0001696C
l00016950:
	i0 = 0x00000000 | 0x0000003A
	goto l0001696C
	// succ:  l0001696C
l00016958:
	o1 = Mem0[i1 + o0:word32]
	o2 = o2 + 0x00000001
	o0 = 0x00028000
	Mem0[o0 + 100:word32] = o1
	Mem0[l5 + 104:word32] = o2
	// succ:  l0001696C
l0001696C:
	Mem0[l6 + 704:word32] = 0x00000000
	// succ:  l00016970
l00016970:
	i0 = i0 << 0x00000018
	// succ:  l00016974
l00016974:
	i0 = i0 >> 0x00000018
	// succ:  l00016978
l00016978:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  _getopt_internal_exit
_getopt_internal_exit:


// getopt
// Return size: 0
define getopt
getopt_entry:
	// succ:  l00016980
l00016980:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00000000 | i0
	o1 = 0x00000000 | i1
	o2 = 0x00000000 | i2
	o3 = 0x00000000 | 0x00000000
	o4 = 0x00000000 | 0x00000000
	o5 = 0x00000000 | 0x00000000
	call _getopt_internal (retsize: 0;)
	v19 = 0x00000000 + o0
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	o0 = v19
	return
	// succ:  getopt_exit
getopt_exit:


// getopt_long
// Return size: 0
define getopt_long
getopt_long_entry:
	// succ:  l000169A8
l000169A8:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00000000 | i0
	o1 = 0x00000000 | i1
	o2 = 0x00000000 | i2
	o3 = 0x00000000 | i3
	o4 = 0x00000000 | i4
	o5 = 0x00000000 | 0x00000000
	call _getopt_internal (retsize: 0;)
	v19 = 0x00000000 + o0
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	o0 = v19
	return
	// succ:  getopt_long_exit
getopt_long_exit:


// getopt_long_only
// Return size: 0
define getopt_long_only
getopt_long_only_entry:
	// succ:  l000169D0
l000169D0:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00000000 | i0
	o1 = 0x00000000 | i1
	o2 = 0x00000000 | i2
	o3 = 0x00000000 | i3
	o4 = 0x00000000 | i4
	o5 = 0x00000000 | 0x00000001
	call _getopt_internal (retsize: 0;)
	v19 = 0x00000000 + o0
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	o0 = v19
	return
	// succ:  getopt_long_only_exit
getopt_long_only_exit:


// pexecute
// Return size: 0
define pexecute
pexecute_entry:
	// succ:  l000169F8
l000169F8:
	sp = fp
	v3 = sp + 0xFFFFFF70
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o1 = Mem0[i6 + 92:word32]
	Mem0[i6 + 68:word32] = i0
	Mem0[i6 + 72:word32] = i1
	Mem0[i6 + 76:word32] = i2
	Mem0[i6 + 84:word32] = i4
	g0 = o1 & 0x00000004
	NZVC = cond(g0)
	branch Test(EQ,Z) l000169F8_ds_t
	// succ:  l000169F8_ds_f l000169F8_ds_t
l000169F8_ds_f:
	Mem0[i6 + 88:word32] = i5
	goto l00016A1C
	// succ:  l00016A1C
l000169F8_ds_t:
	Mem0[i6 + 88:word32] = i5
	goto l00016A28
	// succ:  l00016A28
l00016A1C:
	o0 = 0x00027C00
	o0 = o0 | 0x0000023C
	goto l00016A30
	// succ:  l00016A30
l00016A28:
	o0 = 0x00027C00
	o0 = o0 | 0x00000248
	// succ:  l00016A30
l00016A30:
	g0 = o1 & 0x00000001
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016A30_ds_t
	// succ:  l00016A30_ds_f l00016A30_ds_t
l00016A30_ds_f:
	Mem0[i6 + -28:word32] = o0
	goto l00016A3C
	// succ:  l00016A3C
l00016A30_ds_t:
	Mem0[i6 + -28:word32] = o0
	goto l00016A44
	// succ:  l00016A44
l00016A3C:
	o0 = 0x0002B000
	Mem0[o0 + 784:word32] = 0x00000000
	// succ:  l00016A44
l00016A44:
	l0 = 0x0002B000
	o0 = Mem0[l0 + 784:word32]
	g0 = o1 & 0x00000002
	NZVC = cond(g0)
	branch Test(NE,Z) l00016A44_ds_t
	// succ:  l00016A44_ds_f l00016A44_ds_t
l00016A44_ds_f:
	Mem0[i6 + -32:word32] = o0
	goto l00016A58
	// succ:  l00016A58
l00016A44_ds_t:
	Mem0[i6 + -32:word32] = o0
	goto l00016A8C
	// succ:  l00016A8C
l00016A58:
	o0 = i6 + 0xFFFFFFE8
	call pipe (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(GE,NV) l00016A58_ds_t
	goto l00016A6C
	// succ:  l00016A6C l00016A58_ds_t
l00016A58_ds_t:
	o0 = Mem0[i6 + -24:word32]
	goto l00016A7C
	// succ:  l00016A7C
l00016A6C:
	o1 = Mem0[i6 + 84:word32]
	o0 = 0x00017800
	o0 = o0 | 0x00000318
	goto l00016B10
	// succ:  l00016B10
l00016A7C:
	o1 = Mem0[i6 + -20:word32]
	Mem0[l0 + 784:word32] = o0
	Mem0[i6 + -36:word32] = o1
	goto l00016A98
	// succ:  l00016A98
l00016A8C:
	o2 = 0x00000000 | 0x00000001
	Mem0[l0 + 784:word32] = 0x00000000
	Mem0[i6 + -36:word32] = o2
	// succ:  l00016A98
l00016A98:
	o0 = 0x00000000 | 0x00000001
	Mem0[i6 + -44:word32] = o0
	Mem0[i6 + -40:word32] = 0x00000000
l00016AA8:
	o0 = Mem0[i6 + -44:word32]
	call sleep (retsize: 0;)
	o1 = Mem0[i6 + -44:word32]
	o2 = Mem0[i6 + -40:word32]
	o1 = o1 << 0x00000001
	o2 = o2 + 0x00000001
	Mem0[i6 + -44:word32] = o1
	Mem0[i6 + -40:word32] = o2
	// succ:  l00016AC8
l00016AC8:
	o0 = Mem0[i6 + -40:word32]
	g0 = o0 - 0x00000003
	NZVC = cond(g0)
	branch Test(GT,NZV) l00016AC8_ds_t
	// succ:  l00016AC8_ds_f l00016AC8_ds_t
l00016AC8_ds_f:
	g0 = l1 - 0xFFFFFFFF
	NZVC = cond(g0)
	goto l00016AD8
	// succ:  l00016AD8
l00016AC8_ds_t:
	g0 = l1 - 0xFFFFFFFF
	NZVC = cond(g0)
	goto l00016AEC
	// succ:  l00016AEC
l00016AD8:
	call vfork (retsize: 0;)
	l1 = o0 | 0x00000000
	NZVC = cond(l1)
	branch Test(LT,NZV) l00016AD8_ds_t
	// succ:  l00016AD8_ds_f l00016AD8_ds_t
l00016AD8_ds_f:
	g0 = l1 - 0xFFFFFFFF
	NZVC = cond(g0)
	goto l00016AEC
	// succ:  l00016AEC
l00016AD8_ds_t:
	g0 = l1 - 0xFFFFFFFF
	NZVC = cond(g0)
	goto l00016AA8
	// succ:  l00016AA8
l00016AEC:
	branch Test(EQ,Z) l00016AEC_ds_t
	// succ:  l00016AEC_ds_f l00016AEC_ds_t
l00016AEC_ds_f:
	g0 = l1 - 0x00000000
	NZVC = cond(g0)
	goto l00016AF4
	// succ:  l00016AF4
l00016AEC_ds_t:
	g0 = l1 - 0x00000000
	NZVC = cond(g0)
	goto l00016B04
	// succ:  l00016B04
l00016AF4:
	branch Test(EQ,Z) l00016AF4_ds_t
	// succ:  l00016AF4_ds_f l00016AF4_ds_t
l00016AF4_ds_f:
	o0 = Mem0[i6 + -32:word32]
	goto l00016AFC
	// succ:  l00016AFC
l00016AF4_ds_t:
	o0 = Mem0[i6 + -32:word32]
	goto l00016B24
	// succ:  l00016B24
l00016AFC:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	goto l00016BF8
	// succ:  l00016BF8
l00016B04:
	o1 = Mem0[i6 + 84:word32]
	o0 = 0x00017800
	o0 = o0 | 0x00000320
	// succ:  l00016B10
l00016B10:
	Mem0[o1:word32] = o0
	o2 = Mem0[i6 + 88:word32]
	i0 = 0x00000000 | 0xFFFFFFFF
	Mem0[o2:word32] = 0x00000000
	goto l00016C24
	// succ:  l00016C24
l00016B24:
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016B24_ds_t
	// succ:  l00016B24_ds_f l00016B24_ds_t
l00016B24_ds_f:
	o1 = Mem0[i6 + -36:word32]
	goto l00016B30
	// succ:  l00016B30
l00016B24_ds_t:
	o1 = Mem0[i6 + -36:word32]
	goto l00016B4C
	// succ:  l00016B4C
l00016B30:
	o0 = 0x00000000 | 0x00000000
	call close (retsize: 0;)
	o0 = Mem0[i6 + -32:word32]
	call dup (retsize: 0;)
	o0 = Mem0[i6 + -32:word32]
	call close (retsize: 0;)
	o1 = Mem0[i6 + -36:word32]
	// succ:  l00016B4C
l00016B4C:
	g0 = o1 - 0x00000001
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016B4C_ds_t
	// succ:  l00016B4C_ds_f l00016B4C_ds_t
l00016B4C_ds_f:
	o0 = 0x0002B000
	goto l00016B58
	// succ:  l00016B58
l00016B4C_ds_t:
	o0 = 0x0002B000
	goto l00016B74
	// succ:  l00016B74
l00016B58:
	o0 = 0x00000000 | 0x00000001
	call close (retsize: 0;)
	o0 = Mem0[i6 + -36:word32]
	call dup (retsize: 0;)
	o0 = Mem0[i6 + -36:word32]
	call close (retsize: 0;)
	o0 = 0x0002B000
	// succ:  l00016B74
l00016B74:
	o0 = Mem0[o0 + 784:word32]
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016B74_ds_t
	goto l00016B84
	// succ:  l00016B84 l00016B74_ds_t
l00016B74_ds_t:
	o1 = Mem0[i6 + 72:word32]
	goto l00016B90
	// succ:  l00016B90
l00016B84:
	call close (retsize: 0;)
	o1 = Mem0[i6 + 72:word32]
	// succ:  l00016B90
l00016B90:
	o2 = Mem0[i6 + -28:word32]
	o7 = 0x00016B94
	o0 = Mem0[i6 + 68:word32]
	call o2 + 0x00000000 (retsize: 0;)
	l1 = 0x0002B400
	o2 = Mem0[i6 + 76:word32]
	l1 = l1 | 0x00000240
	o1 = 0x00017800
	o1 = o1 | 0x00000328
	o0 = 0x00000000 | l1
	call fprintf (retsize: 0;)
	o2 = 0x00028000
	o1 = Mem0[o2 + 120:word32]
	o0 = 0x00000000 | l1
	o2 = Mem0[i6 + 68:word32]
	call fprintf (retsize: 0;)
	o1 = 0x0002B400
	o0 = Mem0[o1 + 864:word32]
	l0 = 0x00017800
	l0 = l0 | 0x00000330
	call xstrerror (retsize: 0;)
	o2 = 0x00000000 | o0
	o0 = 0x00000000 | l1
	o1 = 0x00000000 | l0
	call fprintf (retsize: 0;)
	o0 = 0x00000000 | 0xFFFFFFFF
	call exit (retsize: 0;)
l00016BF8:
	branch Test(EQ,Z) l00016BF8_ds_t
	// succ:  l00016BF8_ds_f l00016BF8_ds_t
l00016BF8_ds_f:
	o1 = Mem0[i6 + -36:word32]
	goto l00016C00
	// succ:  l00016C00
l00016BF8_ds_t:
	o1 = Mem0[i6 + -36:word32]
	goto l00016C0C
	// succ:  l00016C0C
l00016C00:
	call close (retsize: 0;)
	o1 = Mem0[i6 + -36:word32]
	// succ:  l00016C0C
l00016C0C:
	g0 = o1 - 0x00000001
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016C0C_ds_t
	// succ:  l00016C0C_ds_f l00016C0C_ds_t
l00016C0C_ds_f:
	i0 = 0x00000000 | l1
	goto l00016C18
	// succ:  l00016C18
l00016C0C_ds_t:
	i0 = 0x00000000 | l1
	goto l00016C24
	// succ:  l00016C24
l00016C18:
	o0 = 0x00000000 | o1
	call close (retsize: 0;)
	i0 = 0x00000000 | l1
	// succ:  l00016C24
l00016C24:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  pexecute_exit
pexecute_exit:


// pwait
// Return size: 0
define pwait
pwait_entry:
	// succ:  l00016C2C
l00016C2C:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00000000 | i1
	call wait (retsize: 0;)
	v19 = 0x00000000 + o0
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	o0 = v19
	return
	// succ:  pwait_exit
pwait_exit:


// mkstemps
// Return size: 0
define mkstemps
mkstemps_entry:
	// succ:  l00016C40
l00016C40:
	sp = fp
	v3 = sp + 0xFFFFFF88
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00000000 | i0
	call strlen (retsize: 0;)
	o1 = 0x00000000 | o0
	o0 = i1 + 0x00000006
	g0 = o1 - o0
	NZVC = cond(g0)
	branch Test(LT,NZV) l00016C40_ds_t
	// succ:  l00016C40_ds_f l00016C40_ds_t
l00016C40_ds_f:
	o0 = o1 - o0
	goto l00016C60
	// succ:  l00016C60
l00016C40_ds_t:
	o0 = o1 - o0
	goto l00016E58
	// succ:  l00016E58
l00016C60:
	i1 = i0 + o0
	o1 = 0x00017800
	o1 = o1 | 0x00000378
	o0 = 0x00000000 | i1
	o2 = 0x00000000 | 0x00000006
	call strncmp (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016C60_ds_t
	// succ:  l00016C60_ds_f l00016C60_ds_t
l00016C60_ds_f:
	o1 = 0x00000000 | 0x00000000
	goto l00016C84
	// succ:  l00016C84
l00016C60_ds_t:
	o1 = 0x00000000 | 0x00000000
	goto l00016C94
	// succ:  l00016C94
l00016C84:
	i0 = 0x00000000 | 0xFFFFFFFF
	goto l00016E5C
	// succ:  l00016E5C
l00016C8C:
	i0 = 0x00000000 | o0
	goto l00016E5C
	// succ:  l00016E5C
l00016C94:
	o0 = i6 + 0xFFFFFFE8
	call gettimeofday (retsize: 0;)
	l3 = 0x00000000 | 0x00000000
	call getpid (retsize: 0;)
	o1 = Mem0[i6 + -20:word32]
	g3 = 0x00000000 | o0
	o3 = 0x00000000 | o1
	o7 = Mem0[i6 + -24:word32]
	o2 = o1 >> 0x0000001F
	g2 = o3 >>u 0x00000010
	o1 = o2 << 0x00000010
	l1 = 0x00000000 | o7
	o4 = g2 | o1
	l0 = o7 >> 0x0000001F
	o7 = 0x0002B400
	o5 = o3 << 0x00000010
	g2 = o0 >> 0x0000001F
	o0 = Mem0[o7:word64]
	o5 = o5 ^ l1
	o4 = o4 ^ l0
	o5 = o5 ^ g3
	o1 = o1 + o5
	NZVC = cond(o1)
	o4 = o4 ^ g2
	o0 = o0 + o4 + C
	o2 = 0x00004400
	o3 = 0x00017800
	l4 = 0x00000000 | o7
	l5 = o2 | 0x000000A7
	l2 = o3 | 0x00000338
	Mem0[o7:word64] = o0
	goto l00016D0C
	// succ:  l00016D0C
l00016C94_ds_f:
	o2 = Mem0[l4:word64]
	goto l00016E30
	// succ:  l00016E30
l00016C94_ds_t:
	o2 = Mem0[l4:word64]
	goto l00016C8C
	// succ:  l00016C8C
l00016D0C:
	l0 = Mem0[l4:word64]
	o2 = 0x00000000 | 0x00000000
	o3 = 0x00000000 | 0x0000003E
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l1
	call __urem64 (retsize: 0;)
	o2 = (word32) Mem0[l2 + o1:byte]
	Mem0[i1:byte] = (byte) o2
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l1
	o2 = 0x00000000 | 0x00000000
	o3 = 0x00000000 | 0x0000003E
	call __udiv64 (retsize: 0;)
	l0 = 0x00000000 | o0
	l1 = 0x00000000 | o1
	o2 = 0x00000000 | 0x00000000
	o3 = 0x00000000 | 0x0000003E
	call __urem64 (retsize: 0;)
	o2 = (word32) Mem0[l2 + o1:byte]
	Mem0[i1 + 1:byte] = (byte) o2
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l1
	o2 = 0x00000000 | 0x00000000
	o3 = 0x00000000 | 0x0000003E
	call __udiv64 (retsize: 0;)
	l0 = 0x00000000 | o0
	l1 = 0x00000000 | o1
	o2 = 0x00000000 | 0x00000000
	o3 = 0x00000000 | 0x0000003E
	call __urem64 (retsize: 0;)
	o2 = (word32) Mem0[l2 + o1:byte]
	Mem0[i1 + 2:byte] = (byte) o2
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l1
	o2 = 0x00000000 | 0x00000000
	o3 = 0x00000000 | 0x0000003E
	call __udiv64 (retsize: 0;)
	l0 = 0x00000000 | o0
	l1 = 0x00000000 | o1
	o2 = 0x00000000 | 0x00000000
	o3 = 0x00000000 | 0x0000003E
	call __urem64 (retsize: 0;)
	o2 = (word32) Mem0[l2 + o1:byte]
	Mem0[i1 + 3:byte] = (byte) o2
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l1
	o2 = 0x00000000 | 0x00000000
	o3 = 0x00000000 | 0x0000003E
	call __udiv64 (retsize: 0;)
	l0 = 0x00000000 | o0
	l1 = 0x00000000 | o1
	o2 = 0x00000000 | 0x00000000
	o3 = 0x00000000 | 0x0000003E
	call __urem64 (retsize: 0;)
	o2 = (word32) Mem0[l2 + o1:byte]
	Mem0[i1 + 4:byte] = (byte) o2
	o2 = 0x00000000 | 0x00000000
	o3 = 0x00000000 | 0x0000003E
	o0 = 0x00000000 | l0
	o1 = 0x00000000 | l1
	call __udiv64 (retsize: 0;)
	o2 = 0x00000000 | 0x00000000
	o3 = 0x00000000 | 0x0000003E
	call __urem64 (retsize: 0;)
	o2 = (word32) Mem0[l2 + o1:byte]
	Mem0[i1 + 5:byte] = (byte) o2
	o0 = 0x00000000 | i0
	o1 = 0x00000000 | 0x00000502
	o2 = 0x00000000 | 0x00000180
	call open (retsize: 0;)
	g0 = o0 - 0x00000000
	NZVC = cond(g0)
	branch Test(GE,NV) l00016C94_ds_t
	goto l00016C94_ds_f
	// succ:  l00016C94_ds_f l00016C94_ds_t
l00016E30:
	o1 = 0x00001C00
	o1 = o1 | 0x00000261
	o3 = o3 + o1
	NZVC = cond(o3)
	o0 = 0x00000000 | 0x00000000
	o2 = o2 + o0 + C
	l3 = l3 + 0x00000001
	g0 = l3 - l5
	NZVC = cond(g0)
	branch Test(LE,NZV) l00016E30_ds_t
	// succ:  l00016E30_ds_f l00016E30_ds_t
l00016E30_ds_f:
	Mem0[l4:word64] = o2
	goto l00016E54
	// succ:  l00016E54
l00016E30_ds_t:
	Mem0[l4:word64] = o2
	goto l00016D0C
	// succ:  l00016D0C
l00016E54:
	Mem0[i0:byte] = (byte) 0x00000000
	// succ:  l00016E58
l00016E58:
	i0 = 0x00000000 | 0xFFFFFFFF
	// succ:  l00016E5C
l00016E5C:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  mkstemps_exit
mkstemps_exit:


// fn00016E64
// Return size: 0
define fn00016E64
fn00016E64_entry:
	// succ:  l00016E64
l00016E64:
	sp = fp
	l7 = o7 + l7
	return
	// succ:  fn00016E64_exit
fn00016E64_exit:


// __do_global_ctors_aux
// Return size: 0
define __do_global_ctors_aux
__do_global_ctors_aux_entry:
	// succ:  l00016E6C
l00016E6C:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = 0x00000000
	l7 = 0x00010C00
	l7 = l7 + 0x00000108
	call fn00016E64 (retsize: 0;)
	o0 = o0 | 0x00000014
	o1 = Mem0[l7 + o0:word32]
	o2 = Mem0[o1 + -4:word32]
	g0 = o2 - 0xFFFFFFFF
	NZVC = cond(g0)
	branch Test(EQ,Z) l00016E6C_ds_t
	// succ:  l00016E6C_ds_f l00016E6C_ds_t
l00016E6C_ds_f:
	l0 = o1 + 0xFFFFFFFC
	goto l00016E98
	// succ:  l00016E98
l00016E6C_ds_t:
	l0 = o1 + 0xFFFFFFFC
	goto l00016EB4
	// succ:  l00016EB4
l00016E98:
	o0 = Mem0[l0:word32]
	o7 = 0x00016E9C
	l0 = l0 + 0xFFFFFFFC
	call o0 + 0x00000000 (retsize: 0;)
	o0 = Mem0[l0:word32]
	g0 = o0 - 0xFFFFFFFF
	NZVC = cond(g0)
	branch Test(NE,Z) l00016E98_ds_t
	// succ:  l00016E98_ds_f l00016E98_ds_t
l00016E98_ds_f:
	goto l00016EB4
	// succ:  l00016EB4
l00016E98_ds_t:
	goto l00016E98
	// succ:  l00016E98
l00016EB4:
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  __do_global_ctors_aux_exit
__do_global_ctors_aux_exit:


// init_dummy
// Return size: 0
define init_dummy
init_dummy_entry:
	// succ:  l00016EBC
l00016EBC:
	sp = fp
	v3 = sp + 0xFFFFFF90
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  init_dummy_exit
init_dummy_exit:


// _init
// Return size: 0
define _init
_init_entry:
	// succ:  l00016EC8
l00016EC8:
	sp = fp
	v3 = sp + 0xFFFFFFA0
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	call frame_dummy (retsize: 0;)
	call __do_global_ctors_aux (retsize: 0;)
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  _init_exit
_init_exit:


// _fini
// Return size: 0
define _fini
_fini_entry:
	// succ:  l00016EE4
l00016EE4:
	sp = fp
	v3 = sp + 0xFFFFFFA0
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v3
	call __do_global_dtors_aux (retsize: 0;)
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	return
	// succ:  _fini_exit
_fini_exit:


// _PROCEDURE_LINKAGE_TABLE_
// Return size: 0
define _PROCEDURE_LINKAGE_TABLE_
fn00027C38_entry:
	// succ:  l00027C38
l00027C38:
	sp = fp
l00027C38:
fn00027C38_exit:


// atexit
// Return size: 0
define atexit
fn00027C68_entry:
	// succ:  l00027C68
l00027C68:
	sp = fp
	g1 = 0x0000C000
	// succ:  l00027C6C_thunk__PROCEDURE_LINKAGE_TABLE_
l00027C6C_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027C68_exit
fn00027C68_exit:


// exit
// Return size: 0
define exit
fn00027C74_entry:
	// succ:  l00027C74
l00027C74:
	sp = fp
	g1 = 0x0000F000
	// succ:  l00027C78_thunk__PROCEDURE_LINKAGE_TABLE_
l00027C78_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027C74_exit
fn00027C74_exit:


// _exit
// Return size: 0
define _exit
fn00027C80_entry:
	// succ:  l00027C80
l00027C80:
	sp = fp
	g1 = 0x00012000
	// succ:  l00027C84_thunk__PROCEDURE_LINKAGE_TABLE_
l00027C84_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027C80_exit
fn00027C80_exit:


// fn00027C8C
// Return size: 0
define fn00027C8C
fn00027C8C_entry:
	// succ:  l00027C8C
l00027C8C:
	sp = fp
	g1 = 0x00015000
	// succ:  l00027C90_thunk__PROCEDURE_LINKAGE_TABLE_
l00027C90_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027C8C_exit
fn00027C8C_exit:


// fn00027C98
// Return size: 0
define fn00027C98
fn00027C98_entry:
	// succ:  l00027C98
l00027C98:
	sp = fp
	g1 = 0x00018000
	// succ:  l00027C9C_thunk__PROCEDURE_LINKAGE_TABLE_
l00027C9C_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027C98_exit
fn00027C98_exit:


// vfprintf
// Return size: 0
define vfprintf
fn00027CA4_entry:
	// succ:  l00027CA4
l00027CA4:
	sp = fp
	g1 = 0x0001B000
	// succ:  l00027CA8_thunk__PROCEDURE_LINKAGE_TABLE_
l00027CA8_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027CA4_exit
fn00027CA4_exit:


// strerror
// Return size: 0
define strerror
fn00027CB0_entry:
	// succ:  l00027CB0
l00027CB0:
	sp = fp
	g1 = 0x0001E000
	// succ:  l00027CB4_thunk__PROCEDURE_LINKAGE_TABLE_
l00027CB4_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027CB0_exit
fn00027CB0_exit:


// malloc
// Return size: 0
define malloc
fn00027CBC_entry:
	// succ:  l00027CBC
l00027CBC:
	sp = fp
	g1 = 0x00021000
	// succ:  l00027CC0_thunk__PROCEDURE_LINKAGE_TABLE_
l00027CC0_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027CBC_exit
fn00027CBC_exit:


// realloc
// Return size: 0
define realloc
fn00027CC8_entry:
	// succ:  l00027CC8
l00027CC8:
	sp = fp
	g1 = 0x00024000
	// succ:  l00027CCC_thunk__PROCEDURE_LINKAGE_TABLE_
l00027CCC_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027CC8_exit
fn00027CC8_exit:


// free
// Return size: 0
define free
fn00027CD4_entry:
	// succ:  l00027CD4
l00027CD4:
	sp = fp
	g1 = 0x00027000
	// succ:  l00027CD8_thunk__PROCEDURE_LINKAGE_TABLE_
l00027CD8_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027CD4_exit
fn00027CD4_exit:


// strcpy
// Return size: 0
define strcpy
fn00027CE0_entry:
	// succ:  l00027CE0
l00027CE0:
	sp = fp
	g1 = 0x0002A000
	// succ:  l00027CE4_thunk__PROCEDURE_LINKAGE_TABLE_
l00027CE4_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027CE0_exit
fn00027CE0_exit:


// strncpy
// Return size: 0
define strncpy
fn00027CEC_entry:
	// succ:  l00027CEC
l00027CEC:
	sp = fp
	g1 = 0x0002D000
	// succ:  l00027CF0_thunk__PROCEDURE_LINKAGE_TABLE_
l00027CF0_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027CEC_exit
fn00027CEC_exit:


// read
// Return size: 0
define read
fn00027CF8_entry:
	// succ:  l00027CF8
l00027CF8:
	sp = fp
	g1 = 0x00030000
	// succ:  l00027CFC_thunk__PROCEDURE_LINKAGE_TABLE_
l00027CFC_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027CF8_exit
fn00027CF8_exit:


// write
// Return size: 0
define write
fn00027D04_entry:
	// succ:  l00027D04
l00027D04:
	sp = fp
	g1 = 0x00033000
	// succ:  l00027D08_thunk__PROCEDURE_LINKAGE_TABLE_
l00027D08_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027D04_exit
fn00027D04_exit:


// abort
// Return size: 0
define abort
fn00027D10_entry:
	// succ:  l00027D10
l00027D10:
	sp = fp
	g1 = 0x00036000
	// succ:  l00027D14_thunk__PROCEDURE_LINKAGE_TABLE_
l00027D14_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027D10_exit
fn00027D10_exit:


// strlen
// Return size: 0
define strlen
fn00027D1C_entry:
	// succ:  l00027D1C
l00027D1C:
	sp = fp
	g1 = 0x00039000
	// succ:  l00027D20_thunk__PROCEDURE_LINKAGE_TABLE_
l00027D20_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027D1C_exit
fn00027D1C_exit:


// strncmp
// Return size: 0
define strncmp
fn00027D28_entry:
	// succ:  l00027D28
l00027D28:
	sp = fp
	g1 = 0x0003C000
	// succ:  l00027D2C_thunk__PROCEDURE_LINKAGE_TABLE_
l00027D2C_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027D28_exit
fn00027D28_exit:


// strcmp
// Return size: 0
define strcmp
fn00027D34_entry:
	// succ:  l00027D34
l00027D34:
	sp = fp
	g1 = 0x0003F000
	// succ:  l00027D38_thunk__PROCEDURE_LINKAGE_TABLE_
l00027D38_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027D34_exit
fn00027D34_exit:


// stat
// Return size: 0
define stat
fn00027D40_entry:
	// succ:  l00027D40
l00027D40:
	sp = fp
	g1 = 0x00042000
	// succ:  l00027D44_thunk__PROCEDURE_LINKAGE_TABLE_
l00027D44_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027D40_exit
fn00027D40_exit:


// atoi
// Return size: 0
define atoi
fn00027D4C_entry:
	// succ:  l00027D4C
l00027D4C:
	sp = fp
	g1 = 0x00045000
	// succ:  l00027D50_thunk__PROCEDURE_LINKAGE_TABLE_
l00027D50_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027D4C_exit
fn00027D4C_exit:


// memcpy
// Return size: 0
define memcpy
fn00027D58_entry:
	// succ:  l00027D58
l00027D58:
	sp = fp
	g1 = 0x00048000
	// succ:  l00027D5C_thunk__PROCEDURE_LINKAGE_TABLE_
l00027D5C_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027D58_exit
fn00027D58_exit:


// fprintf
// Return size: 0
define fprintf
fn00027D64_entry:
	// succ:  l00027D64
l00027D64:
	sp = fp
	g1 = 0x0004B000
	// succ:  l00027D68_thunk__PROCEDURE_LINKAGE_TABLE_
l00027D68_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027D64_exit
fn00027D64_exit:


// strcat
// Return size: 0
define strcat
fn00027D70_entry:
	// succ:  l00027D70
l00027D70:
	sp = fp
	g1 = 0x0004E000
	// succ:  l00027D74_thunk__PROCEDURE_LINKAGE_TABLE_
l00027D74_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027D70_exit
fn00027D70_exit:


// access
// Return size: 0
define access
fn00027D7C_entry:
	// succ:  l00027D7C
l00027D7C:
	sp = fp
	g1 = 0x00051000
	// succ:  l00027D80_thunk__PROCEDURE_LINKAGE_TABLE_
l00027D80_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027D7C_exit
fn00027D7C_exit:


// open
// Return size: 0
define open
fn00027D88_entry:
	// succ:  l00027D88
l00027D88:
	sp = fp
	g1 = 0x00054000
	// succ:  l00027D8C_thunk__PROCEDURE_LINKAGE_TABLE_
l00027D8C_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027D88_exit
fn00027D88_exit:


// close
// Return size: 0
define close
fn00027D94_entry:
	// succ:  l00027D94
l00027D94:
	sp = fp
	g1 = 0x00057000
	// succ:  l00027D98_thunk__PROCEDURE_LINKAGE_TABLE_
l00027D98_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027D94_exit
fn00027D94_exit:


// unlink
// Return size: 0
define unlink
fn00027DA0_entry:
	// succ:  l00027DA0
l00027DA0:
	sp = fp
	g1 = 0x0005A000
	// succ:  l00027DA4_thunk__PROCEDURE_LINKAGE_TABLE_
l00027DA4_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027DA0_exit
fn00027DA0_exit:


// strrchr
// Return size: 0
define strrchr
fn00027DAC_entry:
	// succ:  l00027DAC
l00027DAC:
	sp = fp
	g1 = 0x0005D000
	// succ:  l00027DB0_thunk__PROCEDURE_LINKAGE_TABLE_
l00027DB0_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027DAC_exit
fn00027DAC_exit:


// longjmp
// Return size: 0
define longjmp
fn00027DB8_entry:
	// succ:  l00027DB8
l00027DB8:
	sp = fp
	g1 = 0x00060000
	// succ:  l00027DBC_thunk__PROCEDURE_LINKAGE_TABLE_
l00027DBC_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027DB8_exit
fn00027DB8_exit:


// setjmp
// Return size: 0
define setjmp
fn00027DC4_entry:
	// succ:  l00027DC4
l00027DC4:
	sp = fp
	g1 = 0x00063000
	// succ:  l00027DC8_thunk__PROCEDURE_LINKAGE_TABLE_
l00027DC8_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027DC4_exit
fn00027DC4_exit:


// setlocale
// Return size: 0
define setlocale
fn00027E00_entry:
	// succ:  l00027E00
l00027E00:
	sp = fp
	g1 = 0x00072000
	// succ:  l00027E04_thunk__PROCEDURE_LINKAGE_TABLE_
l00027E04_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027E00_exit
fn00027E00_exit:


// getenv
// Return size: 0
define getenv
fn00027E0C_entry:
	// succ:  l00027E0C
l00027E0C:
	sp = fp
	g1 = 0x00075000
	// succ:  l00027E10_thunk__PROCEDURE_LINKAGE_TABLE_
l00027E10_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027E0C_exit
fn00027E0C_exit:


// getcwd
// Return size: 0
define getcwd
fn00027E18_entry:
	// succ:  l00027E18
l00027E18:
	sp = fp
	g1 = 0x00078000
	// succ:  l00027E1C_thunk__PROCEDURE_LINKAGE_TABLE_
l00027E1C_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027E18_exit
fn00027E18_exit:


// fputs
// Return size: 0
define fputs
fn00027E24_entry:
	// succ:  l00027E24
l00027E24:
	sp = fp
	g1 = 0x0007B000
	// succ:  l00027E28_thunk__PROCEDURE_LINKAGE_TABLE_
l00027E28_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027E24_exit
fn00027E24_exit:


// mktemp
// Return size: 0
define mktemp
fn00027E30_entry:
	// succ:  l00027E30
l00027E30:
	sp = fp
	g1 = 0x0007E000
	// succ:  l00027E34_thunk__PROCEDURE_LINKAGE_TABLE_
l00027E34_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027E30_exit
fn00027E30_exit:


// pipe
// Return size: 0
define pipe
fn00027E54_entry:
	// succ:  l00027E54
l00027E54:
	sp = fp
	g1 = 0x00087000
	// succ:  l00027E58_thunk__PROCEDURE_LINKAGE_TABLE_
l00027E58_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027E54_exit
fn00027E54_exit:


// sleep
// Return size: 0
define sleep
fn00027E60_entry:
	// succ:  l00027E60
l00027E60:
	sp = fp
	g1 = 0x0008A000
	// succ:  l00027E64_thunk__PROCEDURE_LINKAGE_TABLE_
l00027E64_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027E60_exit
fn00027E60_exit:


// vfork
// Return size: 0
define vfork
fn00027E6C_entry:
	// succ:  l00027E6C
l00027E6C:
	sp = fp
	g1 = 0x0008D000
	// succ:  l00027E70_thunk__PROCEDURE_LINKAGE_TABLE_
l00027E70_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027E6C_exit
fn00027E6C_exit:


// dup
// Return size: 0
define dup
fn00027E78_entry:
	// succ:  l00027E78
l00027E78:
	sp = fp
	g1 = 0x00090000
	// succ:  l00027E7C_thunk__PROCEDURE_LINKAGE_TABLE_
l00027E7C_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027E78_exit
fn00027E78_exit:


// wait
// Return size: 0
define wait
fn00027E84_entry:
	// succ:  l00027E84
l00027E84:
	sp = fp
	g1 = 0x00093000
	// succ:  l00027E88_thunk__PROCEDURE_LINKAGE_TABLE_
l00027E88_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027E84_exit
fn00027E84_exit:


// gettimeofday
// Return size: 0
define gettimeofday
fn00027E90_entry:
	// succ:  l00027E90
l00027E90:
	sp = fp
	g1 = 0x00096000
	// succ:  l00027E94_thunk__PROCEDURE_LINKAGE_TABLE_
l00027E94_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027E90_exit
fn00027E90_exit:


// getpid
// Return size: 0
define getpid
fn00027E9C_entry:
	// succ:  l00027E9C
l00027E9C:
	sp = fp
	g1 = 0x00099000
	// succ:  l00027EA0_thunk__PROCEDURE_LINKAGE_TABLE_
l00027EA0_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027E9C_exit
fn00027E9C_exit:


// __urem64
// Return size: 0
define __urem64
fn00027EA8_entry:
	// succ:  l00027EA8
l00027EA8:
	sp = fp
	g1 = 0x0009C000
	// succ:  l00027EAC_thunk__PROCEDURE_LINKAGE_TABLE_
l00027EAC_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027EA8_exit
fn00027EA8_exit:


// __udiv64
// Return size: 0
define __udiv64
fn00027EB4_entry:
	// succ:  l00027EB4
l00027EB4:
	sp = fp
	g1 = 0x0009F000
	// succ:  l00027EB8_thunk__PROCEDURE_LINKAGE_TABLE_
l00027EB8_thunk__PROCEDURE_LINKAGE_TABLE_:
	call _PROCEDURE_LINKAGE_TABLE_ (retsize: 0;)
	return
	// succ:  fn00027EB4_exit
fn00027EB4_exit:


