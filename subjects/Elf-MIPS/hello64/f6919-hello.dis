// main.main
// Return size: 0
void main.main()
main.main_entry:
	// succ:  l0000000000011000
l0000000000011000:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011000_ds_t
	// succ:  l0000000000011000_ds_f l0000000000011000_ds_t
l0000000000011000_ds_f:
	goto l0000000000011010
	// succ:  l0000000000011010
l0000000000011000_ds_t:
	goto l0000000000011024
	// succ:  l0000000000011024
l0000000000011010:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011000
	// succ:  l0000000000011000
l0000000000011024:
	sp = sp + -24
	Mem0[sp:word64] = ra
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
main.main_exit:


// main.init
// Return size: 0
void main.init()
main.init_entry:
	// succ:  l0000000000011078
l0000000000011078:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011078_ds_t
	// succ:  l0000000000011078_ds_f l0000000000011078_ds_t
l0000000000011078_ds_f:
	goto l0000000000011088
	// succ:  l0000000000011088
l0000000000011078_ds_t:
	goto l000000000001109C
	// succ:  l000000000001109C
l0000000000011088:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011078
	// succ:  l0000000000011078
l000000000001109C:
	sp = sp + -8
	Mem0[sp:word64] = ra
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000069A0:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r23 = (word64) (r2 <u r1)
	branch r23 == 0x0000000000000000 l000000000001109C_ds_t
	// succ:  l000000000001109C_ds_f l000000000001109C_ds_t
l000000000001109C_ds_f:
	goto l00000000000110CC
	// succ:  l00000000000110CC
l000000000001109C_ds_t:
	goto l00000000000110DC
	// succ:  l00000000000110DC
l00000000000110CC:
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  main.init_exit
l00000000000110DC:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000069A0:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l00000000000110DC_ds_t
	// succ:  l00000000000110DC_ds_f l00000000000110DC_ds_t
l00000000000110DC_ds_f:
	goto l0000000000011100
	// succ:  l0000000000011100
l00000000000110DC_ds_t:
	goto l000000000001110C
	// succ:  l000000000001110C
l0000000000011100:
	call runtime.throwinit (retsize: 0;)
l000000000001110C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x00000000000069A0:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x00000000000069A0:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  main.init_exit
main.init_exit:


// runtime.memhash0
// Return size: 0
void runtime.memhash0()
runtime.memhash0_entry:
	// succ:  l0000000000011148
l0000000000011148:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011148_ds_t
	// succ:  l0000000000011148_ds_f l0000000000011148_ds_t
l0000000000011148_ds_f:
	goto l0000000000011158
	// succ:  l0000000000011158
l0000000000011148_ds_t:
	goto l000000000001116C
	// succ:  l000000000001116C
l0000000000011158:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011148
	// succ:  l0000000000011148
l000000000001116C:
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	return
	// succ:  runtime.memhash0_exit
runtime.memhash0_exit:


// runtime.memhash8
// Return size: 0
void runtime.memhash8()
runtime.memhash8_entry:
	// succ:  l0000000000011180
l0000000000011180:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011180_ds_t
	// succ:  l0000000000011180_ds_f l0000000000011180_ds_t
l0000000000011180_ds_f:
	goto l0000000000011190
	// succ:  l0000000000011190
l0000000000011180_ds_t:
	goto l00000000000111A4
	// succ:  l00000000000111A4
l0000000000011190:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011180
	// succ:  l0000000000011180
l00000000000111A4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.memhash8_exit
runtime.memhash8_exit:


// runtime.memhash16
// Return size: 0
void runtime.memhash16()
runtime.memhash16_entry:
	// succ:  l00000000000111E8
l00000000000111E8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000111E8_ds_t
	// succ:  l00000000000111E8_ds_f l00000000000111E8_ds_t
l00000000000111E8_ds_f:
	goto l00000000000111F8
	// succ:  l00000000000111F8
l00000000000111E8_ds_t:
	goto l000000000001120C
	// succ:  l000000000001120C
l00000000000111F8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000111E8
	// succ:  l00000000000111E8
l000000000001120C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.memhash16_exit
runtime.memhash16_exit:


// runtime.memhash32
// Return size: 0
void runtime.memhash32()
runtime.memhash32_entry:
	// succ:  l0000000000011250
l0000000000011250:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011250_ds_t
	// succ:  l0000000000011250_ds_f l0000000000011250_ds_t
l0000000000011250_ds_f:
	goto l0000000000011260
	// succ:  l0000000000011260
l0000000000011250_ds_t:
	goto l0000000000011274
	// succ:  l0000000000011274
l0000000000011260:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011250
	// succ:  l0000000000011250
l0000000000011274:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.memhash32_exit
runtime.memhash32_exit:


// runtime.memhash64
// Return size: 0
void runtime.memhash64()
runtime.memhash64_entry:
	// succ:  l00000000000112B8
l00000000000112B8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000112B8_ds_t
	// succ:  l00000000000112B8_ds_f l00000000000112B8_ds_t
l00000000000112B8_ds_f:
	goto l00000000000112C8
	// succ:  l00000000000112C8
l00000000000112B8_ds_t:
	goto l00000000000112DC
	// succ:  l00000000000112DC
l00000000000112C8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000112B8
	// succ:  l00000000000112B8
l00000000000112DC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.memhash64_exit
runtime.memhash64_exit:


// runtime.memhash128
// Return size: 0
void runtime.memhash128()
runtime.memhash128_entry:
	// succ:  l0000000000011320
l0000000000011320:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011320_ds_t
	// succ:  l0000000000011320_ds_f l0000000000011320_ds_t
l0000000000011320_ds_f:
	goto l0000000000011330
	// succ:  l0000000000011330
l0000000000011320_ds_t:
	goto l0000000000011344
	// succ:  l0000000000011344
l0000000000011330:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011320
	// succ:  l0000000000011320
l0000000000011344:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.memhash128_exit
runtime.memhash128_exit:


// runtime.strhash
// Return size: 0
void runtime.strhash()
runtime.strhash_entry:
	// succ:  l0000000000011388
l0000000000011388:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011388_ds_t
	// succ:  l0000000000011388_ds_f l0000000000011388_ds_t
l0000000000011388_ds_f:
	goto l0000000000011398
	// succ:  l0000000000011398
l0000000000011388_ds_t:
	goto l00000000000113AC
	// succ:  l00000000000113AC
l0000000000011398:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011388
	// succ:  l0000000000011388
l00000000000113AC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000030:word64]
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = r3
	r2 = Mem0[r3 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.strhash_exit
runtime.strhash_exit:


// runtime.f32hash
// Return size: 0
void runtime.f32hash()
runtime.f32hash_entry:
	// succ:  l00000000000113F8
l00000000000113F8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000113F8_ds_t
	// succ:  l00000000000113F8_ds_f l00000000000113F8_ds_t
l00000000000113F8_ds_f:
	goto l0000000000011408
	// succ:  l0000000000011408
l00000000000113F8_ds_t:
	goto l000000000001141C
	// succ:  l000000000001141C
l0000000000011408:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000113F8
	// succ:  l00000000000113F8
l000000000001141C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = r2
runtime.f32hash_exit:


// runtime.f64hash
// Return size: 0
void runtime.f64hash()
runtime.f64hash_entry:
	// succ:  l0000000000011520
l0000000000011520:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011520_ds_t
	// succ:  l0000000000011520_ds_f l0000000000011520_ds_t
l0000000000011520_ds_f:
	goto l0000000000011530
	// succ:  l0000000000011530
l0000000000011520_ds_t:
	goto l0000000000011544
	// succ:  l0000000000011544
l0000000000011530:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011520
	// succ:  l0000000000011520
l0000000000011544:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = r2
	f2 = Mem0[r2:word64]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	f1 = Mem0[r23 + 0x00000000000010D8:word64]
runtime.f64hash_exit:


// runtime.c64hash
// Return size: 0
void runtime.c64hash()
runtime.c64hash_entry:
	// succ:  l0000000000011648
l0000000000011648:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011648_ds_t
	// succ:  l0000000000011648_ds_f l0000000000011648_ds_t
l0000000000011648_ds_f:
	goto l0000000000011658
	// succ:  l0000000000011658
l0000000000011648_ds_t:
	goto l000000000001166C
	// succ:  l000000000001166C
l0000000000011658:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011648
	// succ:  l0000000000011648
l000000000001166C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r2 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	branch r2 != 0x0000000000000000 l000000000001166C_ds_t
	// succ:  l000000000001166C_ds_f l000000000001166C_ds_t
l000000000001166C_ds_f:
	goto l0000000000011684
	// succ:  l0000000000011684
l000000000001166C_ds_t:
	goto l0000000000011688
	// succ:  l0000000000011688
l0000000000011684:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000011688
l0000000000011688:
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.f32hash (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000020:word64]
	branch r1 != 0x0000000000000000 l0000000000011688_ds_t
	// succ:  l0000000000011688_ds_f l0000000000011688_ds_t
l0000000000011688_ds_f:
	goto l00000000000116AC
	// succ:  l00000000000116AC
l0000000000011688_ds_t:
	goto l00000000000116B0
	// succ:  l00000000000116B0
l00000000000116AC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000116B0
l00000000000116B0:
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r2
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.f32hash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.c64hash_exit
runtime.c64hash_exit:


// runtime.c128hash
// Return size: 0
void runtime.c128hash()
runtime.c128hash_entry:
	// succ:  l00000000000116E0
l00000000000116E0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000116E0_ds_t
	// succ:  l00000000000116E0_ds_f l00000000000116E0_ds_t
l00000000000116E0_ds_f:
	goto l00000000000116F0
	// succ:  l00000000000116F0
l00000000000116E0_ds_t:
	goto l0000000000011704
	// succ:  l0000000000011704
l00000000000116F0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000116E0
	// succ:  l00000000000116E0
l0000000000011704:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r2 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	branch r2 != 0x0000000000000000 l0000000000011704_ds_t
	// succ:  l0000000000011704_ds_f l0000000000011704_ds_t
l0000000000011704_ds_f:
	goto l000000000001171C
	// succ:  l000000000001171C
l0000000000011704_ds_t:
	goto l0000000000011720
	// succ:  l0000000000011720
l000000000001171C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000011720
l0000000000011720:
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.f64hash (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000020:word64]
	branch r1 != 0x0000000000000000 l0000000000011720_ds_t
	// succ:  l0000000000011720_ds_f l0000000000011720_ds_t
l0000000000011720_ds_f:
	goto l0000000000011744
	// succ:  l0000000000011744
l0000000000011720_ds_t:
	goto l0000000000011748
	// succ:  l0000000000011748
l0000000000011744:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000011748
l0000000000011748:
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r2
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.f64hash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.c128hash_exit
runtime.c128hash_exit:


// runtime.interhash
// Return size: 0
void runtime.interhash()
runtime.interhash_entry:
	// succ:  l0000000000011778
l0000000000011778:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011778_ds_t
	// succ:  l0000000000011778_ds_f l0000000000011778_ds_t
l0000000000011778_ds_f:
	goto l0000000000011788
	// succ:  l0000000000011788
l0000000000011778_ds_t:
	goto l000000000001179C
	// succ:  l000000000001179C
l0000000000011788:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011778
	// succ:  l0000000000011778
l000000000001179C:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000070:word64]
	r5 = Mem0[sp + 0x0000000000000068:word64]
	r3 = Mem0[r5:word64]
	branch r3 != 0x0000000000000000 l000000000001179C_ds_t
	// succ:  l000000000001179C_ds_f l000000000001179C_ds_t
l000000000001179C_ds_f:
	goto l00000000000117B8
	// succ:  l00000000000117B8
l000000000001179C_ds_t:
	goto l00000000000117CC
	// succ:  l00000000000117CC
l00000000000117B8:
	Mem0[sp + 0x0000000000000078:word64] = r6
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.interhash_exit
l00000000000117CC:
	r4 = Mem0[r3 + 0x0000000000000008:word64]
	r2 = Mem0[r4 + 0x0000000000000018:word64]
	r3 = Mem0[r2:word64]
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l00000000000117CC_ds_t
	// succ:  l00000000000117CC_ds_f l00000000000117CC_ds_t
l00000000000117CC_ds_f:
	goto l00000000000117E4
	// succ:  l00000000000117E4
l00000000000117CC_ds_t:
	goto l00000000000118A8
	// succ:  l00000000000118A8
l00000000000117E4:
	r1 = r4
	Mem0[sp + 0x0000000000000008:word64] = r4
	call runtime.(*_type).string (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r2 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
l00000000000118A8:
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r4 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l00000000000118A8_ds_t
	// succ:  l00000000000118A8_ds_f l00000000000118A8_ds_t
l00000000000118A8_ds_f:
	goto l00000000000118D4
	// succ:  l00000000000118D4
l00000000000118A8_ds_t:
	goto l00000000000119C0
	// succ:  l00000000000119C0
l00000000000118D4:
	r2 = 0x0000000000000000
	goto l00000000000118D8
	// succ:  l00000000000118D8
l00000000000118D4_ds_f:
	goto l00000000000118EC
	// succ:  l00000000000118EC
l00000000000118D4_ds_t:
	goto l0000000000011964
	// succ:  l0000000000011964
l00000000000118D8:
	r1 = r2 + 0x00000000000000FF
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l00000000000118D4_ds_t
	goto l00000000000118D4_ds_f
	// succ:  l00000000000118D4_ds_f l00000000000118D4_ds_t
l00000000000118EC:
	Mem0[sp + 0x0000000000000008:word64] = r5
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l00000000000118EC_ds_t
	// succ:  l00000000000118EC_ds_f l00000000000118EC_ds_t
l00000000000118EC_ds_f:
	goto l00000000000118FC
	// succ:  l00000000000118FC
l00000000000118EC_ds_t:
	goto l0000000000011900
	// succ:  l0000000000011900
l00000000000118FC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000011900
l0000000000011900:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011D8:word64]
	r2 = r6
	r1 = r1 ^ r6
	Mem0[sp + 0x0000000000000010:word64] = r1
	r22 = r3
	r1 = Mem0[r3:word64]
	call r1 (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011D0:word64]
l0000000000011964:
	r2 = Mem0[r5 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011D8:word64]
	r2 = r6
	r1 = r1 ^ r6
	Mem0[sp + 0x0000000000000010:word64] = r1
	r22 = r3
	r1 = Mem0[r3:word64]
	call r1 (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011D0:word64]
l00000000000119C0:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l00000000000118D8
	// succ:  l00000000000118D8
runtime.interhash_exit:


// runtime.nilinterhash
// Return size: 0
void runtime.nilinterhash()
runtime.nilinterhash_entry:
	// succ:  l00000000000119D0
l00000000000119D0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000119D0_ds_t
	// succ:  l00000000000119D0_ds_f l00000000000119D0_ds_t
l00000000000119D0_ds_f:
	goto l00000000000119E0
	// succ:  l00000000000119E0
l00000000000119D0_ds_t:
	goto l00000000000119F4
	// succ:  l00000000000119F4
l00000000000119E0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000119D0
	// succ:  l00000000000119D0
l00000000000119F4:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000070:word64]
	r5 = Mem0[sp + 0x0000000000000068:word64]
	r3 = Mem0[r5:word64]
	branch r3 != 0x0000000000000000 l00000000000119F4_ds_t
	// succ:  l00000000000119F4_ds_f l00000000000119F4_ds_t
l00000000000119F4_ds_f:
	goto l0000000000011A10
	// succ:  l0000000000011A10
l00000000000119F4_ds_t:
	goto l0000000000011A24
	// succ:  l0000000000011A24
l0000000000011A10:
	Mem0[sp + 0x0000000000000078:word64] = r6
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.nilinterhash_exit
l0000000000011A24:
	r2 = Mem0[r3 + 0x0000000000000018:word64]
	r4 = Mem0[r2:word64]
	r2 = 0x0000000000000000
	branch r4 != 0x0000000000000000 l0000000000011A24_ds_t
	// succ:  l0000000000011A24_ds_f l0000000000011A24_ds_t
l0000000000011A24_ds_f:
	goto l0000000000011A38
	// succ:  l0000000000011A38
l0000000000011A24_ds_t:
	goto l0000000000011AFC
	// succ:  l0000000000011AFC
l0000000000011A38:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.(*_type).string (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r2 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
l0000000000011AFC:
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r3 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000011AFC_ds_t
	// succ:  l0000000000011AFC_ds_f l0000000000011AFC_ds_t
l0000000000011AFC_ds_f:
	goto l0000000000011B28
	// succ:  l0000000000011B28
l0000000000011AFC_ds_t:
	goto l0000000000011C14
	// succ:  l0000000000011C14
l0000000000011B28:
	r2 = 0x0000000000000000
	goto l0000000000011B2C
	// succ:  l0000000000011B2C
l0000000000011B28_ds_f:
	goto l0000000000011B40
	// succ:  l0000000000011B40
l0000000000011B28_ds_t:
	goto l0000000000011BB8
	// succ:  l0000000000011BB8
l0000000000011B2C:
	r1 = r2 + 0x00000000000000FF
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000011B28_ds_t
	goto l0000000000011B28_ds_f
	// succ:  l0000000000011B28_ds_f l0000000000011B28_ds_t
l0000000000011B40:
	Mem0[sp + 0x0000000000000008:word64] = r5
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000011B40_ds_t
	// succ:  l0000000000011B40_ds_f l0000000000011B40_ds_t
l0000000000011B40_ds_f:
	goto l0000000000011B50
	// succ:  l0000000000011B50
l0000000000011B40_ds_t:
	goto l0000000000011B54
	// succ:  l0000000000011B54
l0000000000011B50:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000011B54
l0000000000011B54:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011D8:word64]
	r2 = r6
	r1 = r1 ^ r6
	Mem0[sp + 0x0000000000000010:word64] = r1
	r22 = r4
	r1 = Mem0[r4:word64]
	call r1 (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011D0:word64]
l0000000000011BB8:
	r2 = Mem0[r5 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011D8:word64]
	r2 = r6
	r1 = r1 ^ r6
	Mem0[sp + 0x0000000000000010:word64] = r1
	r22 = r4
	r1 = Mem0[r4:word64]
	call r1 (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011D0:word64]
l0000000000011C14:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l0000000000011B2C
	// succ:  l0000000000011B2C
runtime.nilinterhash_exit:


// runtime.memequal0
// Return size: 0
void runtime.memequal0()
runtime.memequal0_entry:
	// succ:  l0000000000011C28
l0000000000011C28:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011C28_ds_t
	// succ:  l0000000000011C28_ds_f l0000000000011C28_ds_t
l0000000000011C28_ds_f:
	goto l0000000000011C38
	// succ:  l0000000000011C38
l0000000000011C28_ds_t:
	goto l0000000000011C4C
	// succ:  l0000000000011C4C
l0000000000011C38:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011C28
	// succ:  l0000000000011C28
l0000000000011C4C:
	r1 = 0x0000000000000000
runtime.memequal0_exit:


// runtime.memequal8
// Return size: 0
void runtime.memequal8()
runtime.memequal8_entry:
	// succ:  l0000000000011C68
l0000000000011C68:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011C68_ds_t
	// succ:  l0000000000011C68_ds_f l0000000000011C68_ds_t
l0000000000011C68_ds_f:
	goto l0000000000011C78
	// succ:  l0000000000011C78
l0000000000011C68_ds_t:
	goto l0000000000011C8C
	// succ:  l0000000000011C8C
l0000000000011C78:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011C68
	// succ:  l0000000000011C68
l0000000000011C8C:
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r1 = (word64) Mem0[r1:int8]
	r2 = Mem0[sp + 0x0000000000000010:word64]
	r2 = (word64) Mem0[r2:int8]
	r1 = r1 << 0x18
	r1 = r1 >> 0x18
	r2 = r2 << 0x18
	r2 = r2 >> 0x18
	branch r1 == r2 l0000000000011C8C_ds_t
	// succ:  l0000000000011C8C_ds_f l0000000000011C8C_ds_t
l0000000000011C8C_ds_f:
	goto l0000000000011CB8
	// succ:  l0000000000011CB8
l0000000000011C8C_ds_t:
	goto l0000000000011CC4
	// succ:  l0000000000011CC4
l0000000000011CB8:
	Mem0[sp + 0x0000000000000018:byte] = (byte) 0x0000000000000000
	return
	// succ:  runtime.memequal8_exit
l0000000000011CC4:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  runtime.memequal8_exit
runtime.memequal8_exit:


// runtime.memequal16
// Return size: 0
void runtime.memequal16()
runtime.memequal16_entry:
	// succ:  l0000000000011CD8
l0000000000011CD8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011CD8_ds_t
	// succ:  l0000000000011CD8_ds_f l0000000000011CD8_ds_t
l0000000000011CD8_ds_f:
	goto l0000000000011CE8
	// succ:  l0000000000011CE8
l0000000000011CD8_ds_t:
	goto l0000000000011CFC
	// succ:  l0000000000011CFC
l0000000000011CE8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011CD8
	// succ:  l0000000000011CD8
l0000000000011CFC:
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r1 = (word64) Mem0[r1:int16]
	r2 = Mem0[sp + 0x0000000000000010:word64]
	r2 = (word64) Mem0[r2:int16]
	r1 = r1 << 0x10
	r1 = r1 >> 0x10
	r2 = r2 << 0x10
	r2 = r2 >> 0x10
	branch r1 == r2 l0000000000011CFC_ds_t
	// succ:  l0000000000011CFC_ds_f l0000000000011CFC_ds_t
l0000000000011CFC_ds_f:
	goto l0000000000011D28
	// succ:  l0000000000011D28
l0000000000011CFC_ds_t:
	goto l0000000000011D34
	// succ:  l0000000000011D34
l0000000000011D28:
	Mem0[sp + 0x0000000000000018:byte] = (byte) 0x0000000000000000
	return
	// succ:  runtime.memequal16_exit
l0000000000011D34:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  runtime.memequal16_exit
runtime.memequal16_exit:


// runtime.memequal32
// Return size: 0
void runtime.memequal32()
runtime.memequal32_entry:
	// succ:  l0000000000011D48
l0000000000011D48:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011D48_ds_t
	// succ:  l0000000000011D48_ds_f l0000000000011D48_ds_t
l0000000000011D48_ds_f:
	goto l0000000000011D58
	// succ:  l0000000000011D58
l0000000000011D48_ds_t:
	goto l0000000000011D6C
	// succ:  l0000000000011D6C
l0000000000011D58:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011D48
	// succ:  l0000000000011D48
l0000000000011D6C:
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r1 = (word64) Mem0[r1:int32]
	r2 = Mem0[sp + 0x0000000000000010:word64]
	r2 = (word64) Mem0[r2:int32]
	r1 = r1
	r2 = r2
	branch r1 == r2 l0000000000011D6C_ds_t
	// succ:  l0000000000011D6C_ds_f l0000000000011D6C_ds_t
l0000000000011D6C_ds_f:
	goto l0000000000011D90
	// succ:  l0000000000011D90
l0000000000011D6C_ds_t:
	goto l0000000000011D9C
	// succ:  l0000000000011D9C
l0000000000011D90:
	Mem0[sp + 0x0000000000000018:byte] = (byte) 0x0000000000000000
	return
	// succ:  runtime.memequal32_exit
l0000000000011D9C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  runtime.memequal32_exit
runtime.memequal32_exit:


// runtime.memequal64
// Return size: 0
void runtime.memequal64()
runtime.memequal64_entry:
	// succ:  l0000000000011DB0
l0000000000011DB0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011DB0_ds_t
	// succ:  l0000000000011DB0_ds_f l0000000000011DB0_ds_t
l0000000000011DB0_ds_f:
	goto l0000000000011DC0
	// succ:  l0000000000011DC0
l0000000000011DB0_ds_t:
	goto l0000000000011DD4
	// succ:  l0000000000011DD4
l0000000000011DC0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011DB0
	// succ:  l0000000000011DB0
l0000000000011DD4:
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r1 = Mem0[r1:word64]
	r2 = Mem0[sp + 0x0000000000000010:word64]
	r2 = Mem0[r2:word64]
	branch r1 == r2 l0000000000011DD4_ds_t
	// succ:  l0000000000011DD4_ds_f l0000000000011DD4_ds_t
l0000000000011DD4_ds_f:
	goto l0000000000011DF0
	// succ:  l0000000000011DF0
l0000000000011DD4_ds_t:
	goto l0000000000011DFC
	// succ:  l0000000000011DFC
l0000000000011DF0:
	Mem0[sp + 0x0000000000000018:byte] = (byte) 0x0000000000000000
	return
	// succ:  runtime.memequal64_exit
l0000000000011DFC:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  runtime.memequal64_exit
runtime.memequal64_exit:


// runtime.memequal128
// Return size: 0
void runtime.memequal128()
runtime.memequal128_entry:
	// succ:  l0000000000011E10
l0000000000011E10:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011E10_ds_t
	// succ:  l0000000000011E10_ds_f l0000000000011E10_ds_t
l0000000000011E10_ds_f:
	goto l0000000000011E20
	// succ:  l0000000000011E20
l0000000000011E10_ds_t:
	goto l0000000000011E34
	// succ:  l0000000000011E34
l0000000000011E20:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011E10
	// succ:  l0000000000011E10
l0000000000011E34:
	r1 = 0x0000000000000000
	r4 = Mem0[sp + 0x0000000000000008:word64]
	branch r4 != 0x0000000000000000 l0000000000011E34_ds_t
	// succ:  l0000000000011E34_ds_f l0000000000011E34_ds_t
l0000000000011E34_ds_f:
	goto l0000000000011E44
	// succ:  l0000000000011E44
l0000000000011E34_ds_t:
	goto l0000000000011E48
	// succ:  l0000000000011E48
l0000000000011E44:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000011E48
l0000000000011E48:
	r3 = Mem0[sp + 0x0000000000000010:word64]
	branch r3 != 0x0000000000000000 l0000000000011E48_ds_t
	// succ:  l0000000000011E48_ds_f l0000000000011E48_ds_t
l0000000000011E48_ds_f:
	goto l0000000000011E54
	// succ:  l0000000000011E54
l0000000000011E48_ds_t:
	goto l0000000000011E58
	// succ:  l0000000000011E58
l0000000000011E54:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000011E58
l0000000000011E58:
	r1 = Mem0[r4:word64]
	r2 = Mem0[r3:word64]
	branch r1 != r2 l0000000000011E58_ds_t
	// succ:  l0000000000011E58_ds_f l0000000000011E58_ds_t
l0000000000011E58_ds_f:
	goto l0000000000011E68
	// succ:  l0000000000011E68
l0000000000011E58_ds_t:
	goto l0000000000011E88
	// succ:  l0000000000011E88
l0000000000011E68:
	r1 = Mem0[r4 + 0x0000000000000008:word64]
	r2 = Mem0[r3 + 0x0000000000000008:word64]
	branch r1 != r2 l0000000000011E68_ds_t
	// succ:  l0000000000011E68_ds_f l0000000000011E68_ds_t
l0000000000011E68_ds_f:
	goto l0000000000011E78
	// succ:  l0000000000011E78
l0000000000011E68_ds_t:
	goto l0000000000011E88
	// succ:  l0000000000011E88
l0000000000011E78:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  runtime.memequal128_exit
l0000000000011E88:
	Mem0[sp + 0x0000000000000018:byte] = (byte) 0x0000000000000000
	return
	// succ:  runtime.memequal128_exit
runtime.memequal128_exit:


// runtime.f32equal
// Return size: 0
void runtime.f32equal()
runtime.f32equal_entry:
	// succ:  l0000000000011E98
l0000000000011E98:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011E98_ds_t
	// succ:  l0000000000011E98_ds_f l0000000000011E98_ds_t
l0000000000011E98_ds_f:
	goto l0000000000011EA8
	// succ:  l0000000000011EA8
l0000000000011E98_ds_t:
	goto l0000000000011EBC
	// succ:  l0000000000011EBC
l0000000000011EA8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011E98
	// succ:  l0000000000011E98
l0000000000011EBC:
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000008:word64]
runtime.f32equal_exit:


// runtime.f64equal
// Return size: 0
void runtime.f64equal()
runtime.f64equal_entry:
	// succ:  l0000000000011EF8
l0000000000011EF8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011EF8_ds_t
	// succ:  l0000000000011EF8_ds_f l0000000000011EF8_ds_t
l0000000000011EF8_ds_f:
	goto l0000000000011F08
	// succ:  l0000000000011F08
l0000000000011EF8_ds_t:
	goto l0000000000011F1C
	// succ:  l0000000000011F1C
l0000000000011F08:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011EF8
	// succ:  l0000000000011EF8
l0000000000011F1C:
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000008:word64]
	f0 = Mem0[r1:word64]
	r1 = Mem0[sp + 0x0000000000000010:word64]
	f1 = Mem0[r1:word64]
runtime.f64equal_exit:


// runtime.c64equal
// Return size: 0
void runtime.c64equal()
runtime.c64equal_entry:
	// succ:  l0000000000011F58
l0000000000011F58:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011F58_ds_t
	// succ:  l0000000000011F58_ds_f l0000000000011F58_ds_t
l0000000000011F58_ds_f:
	goto l0000000000011F68
	// succ:  l0000000000011F68
l0000000000011F58_ds_t:
	goto l0000000000011F7C
	// succ:  l0000000000011F7C
l0000000000011F68:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011F58
	// succ:  l0000000000011F58
l0000000000011F7C:
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000010:word64]
runtime.c64equal_exit:


// runtime.c128equal
// Return size: 0
void runtime.c128equal()
runtime.c128equal_entry:
	// succ:  l0000000000011FD8
l0000000000011FD8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000011FD8_ds_t
	// succ:  l0000000000011FD8_ds_f l0000000000011FD8_ds_t
l0000000000011FD8_ds_f:
	goto l0000000000011FE8
	// succ:  l0000000000011FE8
l0000000000011FD8_ds_t:
	goto l0000000000011FFC
	// succ:  l0000000000011FFC
l0000000000011FE8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000011FD8
	// succ:  l0000000000011FD8
l0000000000011FFC:
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000010:word64]
	f4 = Mem0[r1:word64]
	f3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = Mem0[sp + 0x0000000000000008:word64]
	f0 = Mem0[r1:word64]
	f2 = Mem0[r1 + 0x0000000000000008:word64]
runtime.c128equal_exit:


// runtime.strequal
// Return size: 0
void runtime.strequal()
runtime.strequal_entry:
	// succ:  l0000000000012058
l0000000000012058:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000012058_ds_t
	// succ:  l0000000000012058_ds_f l0000000000012058_ds_t
l0000000000012058_ds_f:
	goto l0000000000012068
	// succ:  l0000000000012068
l0000000000012058_ds_t:
	goto l000000000001207C
	// succ:  l000000000001207C
l0000000000012068:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000012058
	// succ:  l0000000000012058
l000000000001207C:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000058:word64]
	branch r1 != 0x0000000000000000 l000000000001207C_ds_t
	// succ:  l000000000001207C_ds_f l000000000001207C_ds_t
l000000000001207C_ds_f:
	goto l0000000000012094
	// succ:  l0000000000012094
l000000000001207C_ds_t:
	goto l0000000000012098
	// succ:  l0000000000012098
l0000000000012094:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000012098
l0000000000012098:
	r6 = Mem0[r1:word64]
	r4 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = Mem0[sp + 0x0000000000000060:word64]
	branch r1 != 0x0000000000000000 l0000000000012098_ds_t
	// succ:  l0000000000012098_ds_f l0000000000012098_ds_t
l0000000000012098_ds_f:
	goto l00000000000120AC
	// succ:  l00000000000120AC
l0000000000012098_ds_t:
	goto l00000000000120B0
	// succ:  l00000000000120B0
l00000000000120AC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000120B0
l00000000000120B0:
	r5 = Mem0[r1:word64]
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r4
	branch r4 != r3 l00000000000120B0_ds_t
	// succ:  l00000000000120B0_ds_f l00000000000120B0_ds_t
l00000000000120B0_ds_f:
	goto l00000000000120C4
	// succ:  l00000000000120C4
l00000000000120B0_ds_t:
	goto l0000000000012114
	// succ:  l0000000000012114
l00000000000120C4:
	Mem0[sp + 0x0000000000000040:word64] = r6
	Mem0[sp + 0x0000000000000008:word64] = r6
	Mem0[sp + 0x0000000000000048:word64] = r4
	Mem0[sp + 0x0000000000000010:word64] = r4
	Mem0[sp + 0x0000000000000030:word64] = r5
	Mem0[sp + 0x0000000000000018:word64] = r5
	r2 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.eqstring (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 == 0x0000000000000000 l00000000000120C4_ds_t
	// succ:  l00000000000120C4_ds_f l00000000000120C4_ds_t
l00000000000120C4_ds_f:
	goto l00000000000120FC
	// succ:  l00000000000120FC
l00000000000120C4_ds_t:
	goto l0000000000012114
	// succ:  l0000000000012114
l00000000000120FC:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000068:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.strequal_exit
l0000000000012114:
	Mem0[sp + 0x0000000000000068:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.strequal_exit
runtime.strequal_exit:


// runtime.interequal
// Return size: 0
void runtime.interequal()
runtime.interequal_entry:
	// succ:  l0000000000012128
l0000000000012128:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000012128_ds_t
	// succ:  l0000000000012128_ds_f l0000000000012128_ds_t
l0000000000012128_ds_f:
	goto l0000000000012138
	// succ:  l0000000000012138
l0000000000012128_ds_t:
	goto l000000000001214C
	// succ:  l000000000001214C
l0000000000012138:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000012128
	// succ:  l0000000000012128
l000000000001214C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r2 = Mem0[sp + 0x0000000000000038:word64]
	branch r2 != 0x0000000000000000 l000000000001214C_ds_t
	// succ:  l000000000001214C_ds_f l000000000001214C_ds_t
l000000000001214C_ds_f:
	goto l0000000000012164
	// succ:  l0000000000012164
l000000000001214C_ds_t:
	goto l0000000000012168
	// succ:  l0000000000012168
l0000000000012164:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000012168
l0000000000012168:
	lo = r1 / sp
	hi = r1 % sp
	r2 = r2 + -8
	r1 = r1 + -8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	r2 = Mem0[sp + 0x0000000000000040:word64]
	branch r2 != 0x0000000000000000 l0000000000012168_ds_t
	// succ:  l0000000000012168_ds_f l0000000000012168_ds_t
l0000000000012168_ds_f:
	goto l00000000000121A0
	// succ:  l00000000000121A0
l0000000000012168_ds_t:
	goto l00000000000121A4
	// succ:  l00000000000121A4
l00000000000121A0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000121A4
l00000000000121A4:
	lo = r1 / sp
	hi = r1 % sp
	r2 = r2 + -8
	r1 = r1 + -8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	call runtime.ifaceeq (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000048:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.interequal_exit
runtime.interequal_exit:


// runtime.nilinterequal
// Return size: 0
void runtime.nilinterequal()
runtime.nilinterequal_entry:
	// succ:  l00000000000121F8
l00000000000121F8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000121F8_ds_t
	// succ:  l00000000000121F8_ds_f l00000000000121F8_ds_t
l00000000000121F8_ds_f:
	goto l0000000000012208
	// succ:  l0000000000012208
l00000000000121F8_ds_t:
	goto l000000000001221C
	// succ:  l000000000001221C
l0000000000012208:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000121F8
	// succ:  l00000000000121F8
l000000000001221C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r2 = Mem0[sp + 0x0000000000000038:word64]
	branch r2 != 0x0000000000000000 l000000000001221C_ds_t
	// succ:  l000000000001221C_ds_f l000000000001221C_ds_t
l000000000001221C_ds_f:
	goto l0000000000012234
	// succ:  l0000000000012234
l000000000001221C_ds_t:
	goto l0000000000012238
	// succ:  l0000000000012238
l0000000000012234:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000012238
l0000000000012238:
	lo = r1 / sp
	hi = r1 % sp
	r2 = r2 + -8
	r1 = r1 + -8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	r2 = Mem0[sp + 0x0000000000000040:word64]
	branch r2 != 0x0000000000000000 l0000000000012238_ds_t
	// succ:  l0000000000012238_ds_f l0000000000012238_ds_t
l0000000000012238_ds_f:
	goto l0000000000012270
	// succ:  l0000000000012270
l0000000000012238_ds_t:
	goto l0000000000012274
	// succ:  l0000000000012274
l0000000000012270:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000012274
l0000000000012274:
	lo = r1 / sp
	hi = r1 % sp
	r2 = r2 + -8
	r1 = r1 + -8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	call runtime.efaceeq (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000048:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.nilinterequal_exit
runtime.nilinterequal_exit:


// runtime.efaceeq
// Return size: 0
void runtime.efaceeq()
runtime.efaceeq_entry:
	// succ:  l00000000000122C8
l00000000000122C8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000122C8_ds_t
	// succ:  l00000000000122C8_ds_f l00000000000122C8_ds_t
l00000000000122C8_ds_f:
	goto l00000000000122D8
	// succ:  l00000000000122D8
l00000000000122C8_ds_t:
	goto l00000000000122EC
	// succ:  l00000000000122EC
l00000000000122D8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000122C8
	// succ:  l00000000000122C8
l00000000000122EC:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r3 = Mem0[sp + 0x0000000000000068:word64]
	r1 = Mem0[sp + 0x0000000000000078:word64]
	branch r1 == r3 l00000000000122EC_ds_t
	// succ:  l00000000000122EC_ds_f l00000000000122EC_ds_t
l00000000000122EC_ds_f:
	goto l0000000000012308
	// succ:  l0000000000012308
l00000000000122EC_ds_t:
	goto l0000000000012320
	// succ:  l0000000000012320
l0000000000012308:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000088:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.efaceeq_exit
l0000000000012320:
	branch r3 != 0x0000000000000000 l0000000000012320_ds_t
	// succ:  l0000000000012320_ds_f l0000000000012320_ds_t
l0000000000012320_ds_f:
	goto l0000000000012328
	// succ:  l0000000000012328
l0000000000012320_ds_t:
	goto l0000000000012344
	// succ:  l0000000000012344
l0000000000012328:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000088:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.efaceeq_exit
l0000000000012344:
	r2 = Mem0[r3 + 0x0000000000000018:word64]
	r4 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = 0x0000000000000000
	branch r4 != 0x0000000000000000 l0000000000012344_ds_t
	// succ:  l0000000000012344_ds_f l0000000000012344_ds_t
l0000000000012344_ds_f:
	goto l0000000000012358
	// succ:  l0000000000012358
l0000000000012344_ds_t:
	goto l000000000001241C
	// succ:  l000000000001241C
l0000000000012358:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.(*_type).string (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r2 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
l000000000001241C:
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r3 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000001241C_ds_t
	// succ:  l000000000001241C_ds_f l000000000001241C_ds_t
l000000000001241C_ds_f:
	goto l0000000000012448
	// succ:  l0000000000012448
l000000000001241C_ds_t:
	goto l00000000000124F8
	// succ:  l00000000000124F8
l0000000000012448:
	r2 = 0x0000000000000000
	goto l000000000001244C
	// succ:  l000000000001244C
l0000000000012448_ds_f:
	goto l0000000000012460
	// succ:  l0000000000012460
l0000000000012448_ds_t:
	goto l00000000000124B8
	// succ:  l00000000000124B8
l000000000001244C:
	r1 = r2 + 0x00000000000000FF
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000012448_ds_t
	goto l0000000000012448_ds_f
	// succ:  l0000000000012448_ds_f l0000000000012448_ds_t
l0000000000012460:
	lo = r1 / sp
	hi = r1 % sp
l00000000000124B8:
	r1 = Mem0[sp + 0x0000000000000070:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000080:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r22 = r4
	r1 = Mem0[r4:word64]
	call r1 (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000088:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.efaceeq_exit
l00000000000124F8:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l000000000001244C
	// succ:  l000000000001244C
runtime.efaceeq_exit:


// runtime.ifaceeq
// Return size: 0
void runtime.ifaceeq()
runtime.ifaceeq_entry:
	// succ:  l0000000000012508
l0000000000012508:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000012508_ds_t
	// succ:  l0000000000012508_ds_f l0000000000012508_ds_t
l0000000000012508_ds_f:
	goto l0000000000012518
	// succ:  l0000000000012518
l0000000000012508_ds_t:
	goto l000000000001252C
	// succ:  l000000000001252C
l0000000000012518:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000012508
	// succ:  l0000000000012508
l000000000001252C:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r3 = Mem0[sp + 0x0000000000000068:word64]
	r1 = Mem0[sp + 0x0000000000000078:word64]
	branch r1 == r3 l000000000001252C_ds_t
	// succ:  l000000000001252C_ds_f l000000000001252C_ds_t
l000000000001252C_ds_f:
	goto l0000000000012548
	// succ:  l0000000000012548
l000000000001252C_ds_t:
	goto l0000000000012560
	// succ:  l0000000000012560
l0000000000012548:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000088:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.ifaceeq_exit
l0000000000012560:
	branch r3 != 0x0000000000000000 l0000000000012560_ds_t
	// succ:  l0000000000012560_ds_f l0000000000012560_ds_t
l0000000000012560_ds_f:
	goto l0000000000012568
	// succ:  l0000000000012568
l0000000000012560_ds_t:
	goto l0000000000012584
	// succ:  l0000000000012584
l0000000000012568:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000088:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.ifaceeq_exit
l0000000000012584:
	r4 = Mem0[r3 + 0x0000000000000008:word64]
	r2 = Mem0[r4 + 0x0000000000000018:word64]
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000012584_ds_t
	// succ:  l0000000000012584_ds_f l0000000000012584_ds_t
l0000000000012584_ds_f:
	goto l000000000001259C
	// succ:  l000000000001259C
l0000000000012584_ds_t:
	goto l0000000000012660
	// succ:  l0000000000012660
l000000000001259C:
	r1 = r4
	Mem0[sp + 0x0000000000000008:word64] = r4
	call runtime.(*_type).string (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r2 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
l0000000000012660:
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r4 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000012660_ds_t
	// succ:  l0000000000012660_ds_f l0000000000012660_ds_t
l0000000000012660_ds_f:
	goto l000000000001268C
	// succ:  l000000000001268C
l0000000000012660_ds_t:
	goto l000000000001273C
	// succ:  l000000000001273C
l000000000001268C:
	r2 = 0x0000000000000000
	goto l0000000000012690
	// succ:  l0000000000012690
l000000000001268C_ds_f:
	goto l00000000000126A4
	// succ:  l00000000000126A4
l000000000001268C_ds_t:
	goto l00000000000126FC
	// succ:  l00000000000126FC
l0000000000012690:
	r1 = r2 + 0x00000000000000FF
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000001268C_ds_t
	goto l000000000001268C_ds_f
	// succ:  l000000000001268C_ds_f l000000000001268C_ds_t
l00000000000126A4:
	lo = r1 / sp
	hi = r1 % sp
l00000000000126FC:
	r1 = Mem0[sp + 0x0000000000000070:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000080:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r22 = r3
	r1 = Mem0[r3:word64]
	call r1 (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000088:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.ifaceeq_exit
l000000000001273C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l0000000000012690
	// succ:  l0000000000012690
runtime.ifaceeq_exit:


// runtime.alginit
// Return size: 0
void runtime.alginit()
runtime.alginit_entry:
	// succ:  l0000000000012750
l0000000000012750:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000012750_ds_t
	// succ:  l0000000000012750_ds_f l0000000000012750_ds_t
l0000000000012750_ds_f:
	goto l0000000000012760
	// succ:  l0000000000012760
l0000000000012750_ds_t:
	goto l0000000000012774
	// succ:  l0000000000012774
l0000000000012760:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000012750
	// succ:  l0000000000012750
l0000000000012774:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r2 = 0x00000000000F0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	branch r2 != 0x0000000000000000 l0000000000012774_ds_t
	// succ:  l0000000000012774_ds_f l0000000000012774_ds_t
l0000000000012774_ds_f:
	goto l0000000000012790
	// succ:  l0000000000012790
l0000000000012774_ds_t:
	goto l0000000000012794
	// succ:  l0000000000012794
l0000000000012790:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000012794
l0000000000012794:
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000028:word64] = r4
	Mem0[sp + 0x0000000000000010:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000030:word64] = r3
	Mem0[sp + 0x0000000000000018:word64] = r3
	call runtime.getRandomData (retsize: 0;)
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x00000000000067E0:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r1 | r2
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x00000000000067E0:word64] = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x00000000000067D8:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r1 | r2
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x00000000000067D8:word64] = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x00000000000067D0:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r1 | r2
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x00000000000067D0:word64] = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x00000000000067C8:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r1 | r2
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x00000000000067C8:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.alginit_exit
runtime.alginit_exit:


// runtime.atomicstorep
// Return size: 0
void runtime.atomicstorep()
runtime.atomicstorep_entry:
	// succ:  l0000000000012850
l0000000000012850:
	sp = fp
	sp = sp + -24
	Mem0[sp:word64] = ra
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r2 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime/internal/atomic.StorepNoWB (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr_nostore (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.atomicstorep_exit
runtime.atomicstorep_exit:


// runtime.casp
// Return size: 0
void runtime.casp()
runtime.casp_entry:
	// succ:  l00000000000128A0
l00000000000128A0:
	sp = fp
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r3 = Mem0[sp + 0x0000000000000030:word64]
	r3 = r3
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r2 = r2
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime/internal/atomic.Casp1 (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l00000000000128A0_ds_t
	// succ:  l00000000000128A0_ds_f l00000000000128A0_ds_t
l00000000000128A0_ds_f:
	goto l00000000000128E8
	// succ:  l00000000000128E8
l00000000000128A0_ds_t:
	goto l0000000000012900
	// succ:  l0000000000012900
l00000000000128E8:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.casp_exit
l0000000000012900:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr_nostore (retsize: 0;)
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000048:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.casp_exit
runtime.casp_exit:


// runtime.cgocall
// Return size: 0
void runtime.cgocall()
runtime.cgocall_entry:
	// succ:  l0000000000012938
l0000000000012938:
	sp = fp
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:word32] = (word32) r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006995:byte]
	branch r1 != 0x0000000000000000 l0000000000012938_ds_t
	// succ:  l0000000000012938_ds_f l0000000000012938_ds_t
l0000000000012938_ds_f:
	goto l000000000001295C
	// succ:  l000000000001295C
l0000000000012938_ds_t:
	goto l000000000001297C
	// succ:  l000000000001297C
l000000000001295C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000001297C:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000001297C_ds_t
	// succ:  l000000000001297C_ds_f l000000000001297C_ds_t
l000000000001297C_ds_f:
	goto l000000000001298C
	// succ:  l000000000001298C
l000000000001297C_ds_t:
	goto l00000000000129AC
	// succ:  l00000000000129AC
l000000000001298C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000129AC:
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000002C4:uint32]
runtime.cgocall_exit:


// runtime.endcgo
// Return size: 0
void runtime.endcgo()
runtime.endcgo_entry:
	// succ:  l0000000000012B80
l0000000000012B80:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000018:word64]
	r2 = (word64) Mem0[r4 + 0x0000000000000108:int32]
	r3 = r2
	r1 = r4
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r4 + 0x0000000000000108:word32] = (word32) r2
	call runtime.unlockOSThread (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.endcgo_exit
runtime.endcgo_exit:


// runtime.cgocallbackg
// Return size: 0
void runtime.cgocallbackg()
runtime.cgocallbackg_entry:
	// succ:  l0000000000012BC8
l0000000000012BC8:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = ra
	r3 = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A0:word64]
	Mem0[sp + 0x0000000000000058:word64] = r30
	r2 = r30
	branch r1 == r30 l0000000000012BC8_ds_t
	// succ:  l0000000000012BC8_ds_f l0000000000012BC8_ds_t
l0000000000012BC8_ds_f:
	goto l0000000000012BEC
	// succ:  l0000000000012BEC
l0000000000012BC8_ds_t:
	goto l0000000000012C3C
	// succ:  l0000000000012C3C
l0000000000012BEC:
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000012C3C:
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	branch r2 != 0x0000000000000000 l0000000000012C3C_ds_t
	// succ:  l0000000000012C3C_ds_f l0000000000012C3C_ds_t
l0000000000012C3C_ds_f:
	goto l0000000000012C48
	// succ:  l0000000000012C48
l0000000000012C3C_ds_t:
	goto l0000000000012C4C
	// succ:  l0000000000012C4C
l0000000000012C48:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000012C4C
l0000000000012C4C:
	r1 = Mem0[r2 + 0x0000000000000378:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r1 = Mem0[r2 + 0x0000000000000380:word64]
	Mem0[sp + 0x0000000000000028:word64] = r1
	r1 = Mem0[r2 + 0x0000000000000388:word64]
	Mem0[sp + 0x0000000000000030:word64] = r1
	r1 = Mem0[r2 + 0x0000000000000390:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r1 = Mem0[r2 + 0x0000000000000398:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r1 = Mem0[r2 + 0x00000000000003A0:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r2 = Mem0[r3 + 0x0000000000000078:word64]
	Mem0[sp + 0x0000000000000050:word64] = r2
	r2 = Mem0[r3 + 0x0000000000000080:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.exitsyscall (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000068:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.cgocallbackg1 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.reentersyscall (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000058:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[r2 + 0x0000000000000378:word64] = r1
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[r2 + 0x0000000000000380:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[r2 + 0x0000000000000388:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[r2 + 0x0000000000000390:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[r2 + 0x0000000000000398:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[r2 + 0x00000000000003A0:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgocallbackg_exit
runtime.cgocallbackg_exit:


// runtime.cgocallbackg1
// Return size: 0
void runtime.cgocallbackg1()
runtime.cgocallbackg1_entry:
	// succ:  l0000000000012D10
l0000000000012D10:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000012D10_ds_t
	// succ:  l0000000000012D10_ds_f l0000000000012D10_ds_t
l0000000000012D10_ds_f:
	goto l0000000000012D20
	// succ:  l0000000000012D20
l0000000000012D10_ds_t:
	goto l0000000000012D34
	// succ:  l0000000000012D34
l0000000000012D20:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000012D10
	// succ:  l0000000000012D10
l0000000000012D34:
	sp = sp + -120
	Mem0[sp:word64] = ra
	r8 = r30
	Mem0[sp + 0x0000000000000058:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000002F8:byte]
	branch r1 != 0x0000000000000000 l0000000000012D34_ds_t
	// succ:  l0000000000012D34_ds_f l0000000000012D34_ds_t
l0000000000012D34_ds_f:
	goto l0000000000012D54
	// succ:  l0000000000012D54
l0000000000012D34_ds_t:
	goto l0000000000013028
	// succ:  l0000000000013028
l0000000000012D54:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load (retsize: 0;)
	r8 = Mem0[sp + 0x0000000000000058:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
l0000000000012DA8:
	r1 = Mem0[sp + 0x0000000000000080:word64]
	branch r1 == 0x0000000000000000 l0000000000012DA8_ds_t
	// succ:  l0000000000012DA8_ds_f l0000000000012DA8_ds_t
l0000000000012DA8_ds_f:
	goto l0000000000012DB4
	// succ:  l0000000000012DB4
l0000000000012DA8_ds_t:
	goto l0000000000012F08
	// succ:  l0000000000012F08
l0000000000012DB4:
	r6 = Mem0[r8 + 0x0000000000000168:word64]
	r4 = Mem0[r8 + 0x0000000000000170:word64]
	r3 = Mem0[r8 + 0x0000000000000178:word64]
	lo = r2 / r4
	hi = r2 % r4
	r5 = r3
	r23 = (word64) (r3 <u r2)
	branch r23 == 0x0000000000000000 l0000000000012DB4_ds_t
	// succ:  l0000000000012DB4_ds_f l0000000000012DB4_ds_t
l0000000000012DB4_ds_f:
	goto l0000000000012DD4
	// succ:  l0000000000012DD4
l0000000000012DB4_ds_t:
	goto l0000000000012E10
	// succ:  l0000000000012E10
l0000000000012DD4:
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r6
	Mem0[sp + 0x0000000000000018:word64] = r4
	r1 = r5
	Mem0[sp + 0x0000000000000020:word64] = r5
	Mem0[sp + 0x0000000000000028:word64] = r2
	call runtime.growslice (retsize: 0;)
	r8 = Mem0[sp + 0x0000000000000058:word64]
	r6 = Mem0[sp + 0x0000000000000030:word64]
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r5 = Mem0[sp + 0x0000000000000040:word64]
	// succ:  l0000000000012E10
l0000000000012E10:
	lo = r1 / r4
	hi = r1 % r4
	r7 = r1
	Mem0[sp + 0x0000000000000070:word64] = r5
	r5 = r6
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
l0000000000012F08:
	r2 = Mem0[r8 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x0000000000000108:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000012F08_ds_t
	// succ:  l0000000000012F08_ds_f l0000000000012F08_ds_t
l0000000000012F08_ds_f:
	goto l0000000000012F24
	// succ:  l0000000000012F24
l0000000000012F08_ds_t:
	goto l0000000000012F54
	// succ:  l0000000000012F54
l0000000000012F24:
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010C8:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	call runtime.chanrecv1 (retsize: 0;)
l0000000000012F54:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000048:byte] = (byte) r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000018:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	r2 = 0x00000000000A0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.deferproc (retsize: 0;)
	r1 = r1
	r2 = 0x0000000000000000
	branch r1 == r2 l0000000000012F54_ds_t
	// succ:  l0000000000012F54_ds_f l0000000000012F54_ds_t
l0000000000012F54_ds_f:
	goto l0000000000012F98
	// succ:  l0000000000012F98
l0000000000012F54_ds_t:
	goto l0000000000012FB4
	// succ:  l0000000000012FB4
l0000000000012F98:
	0x0000000000000000 = ~0x0000000000000000
	call runtime.deferreturn (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 120
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgocallbackg1_exit
l0000000000012FB4:
	r1 = Mem0[sp + 0x0000000000000058:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	r3 = Mem0[r1 + 0x0000000000000040:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r3 / r3
	hi = r3 % r3
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000010:word64] = r2
	r2 = Mem0[r3 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	r1 = Mem0[r3 + 0x0000000000000010:word64]
l0000000000013028:
	r2 = Mem0[r8 + 0x0000000000000030:word64]
	r1 = 0x0000000000000000
	Mem0[r2 + 0x00000000000002F8:byte] = (byte) r1
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.systemstack (retsize: 0;)
	r8 = Mem0[sp + 0x0000000000000058:word64]
	goto l0000000000012DA8
	// succ:  l0000000000012DA8
runtime.cgocallbackg1_exit:


// runtime.unwindm
// Return size: 0
void runtime.unwindm()
runtime.unwindm_entry:
	// succ:  l0000000000013058
l0000000000013058:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000013058_ds_t
	// succ:  l0000000000013058_ds_f l0000000000013058_ds_t
l0000000000013058_ds_f:
	goto l0000000000013068
	// succ:  l0000000000013068
l0000000000013058_ds_t:
	goto l000000000001307C
	// succ:  l000000000001307C
l0000000000013068:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000013058
	// succ:  l0000000000013058
l000000000001307C:
	sp = sp + -24
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r1 = (word64) Mem0[r1:byte]
	branch r1 != 0x0000000000000000 l000000000001307C_ds_t
	// succ:  l000000000001307C_ds_f l000000000001307C_ds_t
l000000000001307C_ds_f:
	goto l0000000000013090
	// succ:  l0000000000013090
l000000000001307C_ds_t:
	goto l000000000001309C
	// succ:  l000000000001309C
l0000000000013090:
	sp = sp + 24
	return
	// succ:  runtime.unwindm_exit
l000000000001309C:
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r4 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r4:word64]
	branch r1 != 0x0000000000000000 l000000000001309C_ds_t
	// succ:  l000000000001309C_ds_f l000000000001309C_ds_t
l000000000001309C_ds_f:
	goto l00000000000130D0
	// succ:  l00000000000130D0
l000000000001309C_ds_t:
	goto l00000000000130D4
	// succ:  l00000000000130D4
l00000000000130D0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000130D4
l00000000000130D4:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	branch r1 != 0x0000000000000000 l00000000000130D4_ds_t
	// succ:  l00000000000130D4_ds_f l00000000000130D4_ds_t
l00000000000130D4_ds_f:
	goto l00000000000130E4
	// succ:  l00000000000130E4
l00000000000130D4_ds_t:
	goto l00000000000130E8
	// succ:  l00000000000130E8
l00000000000130E4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000130E8
l00000000000130E8:
	r2 = Mem0[r1:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	r3 = Mem0[r2:word64]
	Mem0[r1:word64] = r3
	r2 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r4 + 0x00000000000000E0:word32] = (word32) r2
	r1 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l00000000000130E8_ds_t
	// succ:  l00000000000130E8_ds_f l00000000000130E8_ds_t
l00000000000130E8_ds_f:
	goto l0000000000013134
	// succ:  l0000000000013134
l00000000000130E8_ds_t:
	goto l0000000000013148
	// succ:  l0000000000013148
l0000000000013134:
	r1 = (word64) Mem0[r30 + 0x00000000000000E8:byte]
	branch r1 == 0x0000000000000000 l0000000000013134_ds_t
	// succ:  l0000000000013134_ds_f l0000000000013134_ds_t
l0000000000013134_ds_f:
	goto l0000000000013140
	// succ:  l0000000000013140
l0000000000013134_ds_t:
	goto l0000000000013148
	// succ:  l0000000000013148
l0000000000013140:
l0000000000013148:
	sp = sp + 24
	return
	// succ:  runtime.unwindm_exit
runtime.unwindm_exit:


// runtime.cgoIsGoPointer
// Return size: 0
void runtime.cgoIsGoPointer()
runtime.cgoIsGoPointer_entry:
	// succ:  l0000000000013158
l0000000000013158:
	sp = fp
	sp = sp + -8
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	branch r5 != 0x0000000000000000 l0000000000013158_ds_t
	// succ:  l0000000000013158_ds_f l0000000000013158_ds_t
l0000000000013158_ds_f:
	goto l0000000000013170
	// succ:  l0000000000013170
l0000000000013158_ds_t:
	goto l0000000000013188
	// succ:  l0000000000013188
l0000000000013170:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoIsGoPointer_exit
l0000000000013188:
	r4 = r5
	r1 = 0x0000000000000000
	branch r5 == 0x0000000000000000 l0000000000013188_ds_t
	// succ:  l0000000000013188_ds_f l0000000000013188_ds_t
l0000000000013188_ds_f:
	goto l0000000000013198
	// succ:  l0000000000013198
l0000000000013188_ds_t:
	goto l0000000000013414
	// succ:  l0000000000013414
l0000000000013198:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 != 0x0000000000000000 l0000000000013198_ds_t
	// succ:  l0000000000013198_ds_f l0000000000013198_ds_t
l0000000000013198_ds_f:
	goto l00000000000131B0
	// succ:  l00000000000131B0
l0000000000013198_ds_t:
	goto l0000000000013414
	// succ:  l0000000000013414
l00000000000131B0:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F78:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 == 0x0000000000000000 l00000000000131B0_ds_t
	// succ:  l00000000000131B0_ds_f l00000000000131B0_ds_t
l00000000000131B0_ds_f:
	goto l00000000000131C8
	// succ:  l00000000000131C8
l00000000000131B0_ds_t:
	goto l0000000000013414
	// succ:  l0000000000013414
l00000000000131C8:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
l000000000001326C:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000001326C_ds_t
	// succ:  l000000000001326C_ds_f l000000000001326C_ds_t
l000000000001326C_ds_f:
	goto l0000000000013278
	// succ:  l0000000000013278
l000000000001326C_ds_t:
	goto l0000000000013294
	// succ:  l0000000000013294
l0000000000013278:
l0000000000013294:
	r3 = 0x00000000000D0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	branch r3 == 0x0000000000000000 l0000000000013294_ds_t
	// succ:  l0000000000013294_ds_f l0000000000013294_ds_t
l0000000000013294_ds_f:
	goto l00000000000132A8
	// succ:  l00000000000132A8
l0000000000013294_ds_t:
	goto l0000000000013334
	// succ:  l0000000000013334
l00000000000132A8:
	r7 = Mem0[r3 + 0x0000000000000080:word64]
	r6 = Mem0[r3 + 0x0000000000000088:word64]
	r1 = 0x0000000000000000
	r23 = (word64) (r5 <u r7)
	branch r23 != 0x0000000000000000 l00000000000132A8_ds_t
	// succ:  l00000000000132A8_ds_f l00000000000132A8_ds_t
l00000000000132A8_ds_f:
	goto l00000000000132C0
	// succ:  l00000000000132C0
l00000000000132A8_ds_t:
	goto l0000000000013374
	// succ:  l0000000000013374
l00000000000132C0:
	r23 = (word64) (r5 <u r6)
	branch r23 == 0x0000000000000000 l00000000000132C0_ds_t
	// succ:  l00000000000132C0_ds_f l00000000000132C0_ds_t
l00000000000132C0_ds_f:
	goto l00000000000132CC
	// succ:  l00000000000132CC
l00000000000132C0_ds_t:
	goto l0000000000013374
	// succ:  l0000000000013374
l00000000000132CC:
l00000000000132D4:
	r1 = r2 + 0x00000000000000FF
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l00000000000132D4_ds_t
	// succ:  l00000000000132D4_ds_f l00000000000132D4_ds_t
l00000000000132D4_ds_f:
	goto l00000000000132E8
	// succ:  l00000000000132E8
l00000000000132D4_ds_t:
	goto l000000000001334C
	// succ:  l000000000001334C
l00000000000132E8:
	r7 = Mem0[r3 + 0x0000000000000090:word64]
	r6 = Mem0[r3 + 0x0000000000000098:word64]
	r1 = 0x0000000000000000
	r23 = (word64) (r5 <u r7)
	branch r23 != 0x0000000000000000 l00000000000132E8_ds_t
	// succ:  l00000000000132E8_ds_f l00000000000132E8_ds_t
l00000000000132E8_ds_f:
	goto l0000000000013300
	// succ:  l0000000000013300
l00000000000132E8_ds_t:
	goto l0000000000013368
	// succ:  l0000000000013368
l0000000000013300:
	r23 = (word64) (r5 <u r6)
	branch r23 == 0x0000000000000000 l0000000000013300_ds_t
	// succ:  l0000000000013300_ds_f l0000000000013300_ds_t
l0000000000013300_ds_f:
	goto l000000000001330C
	// succ:  l000000000001330C
l0000000000013300_ds_t:
	goto l0000000000013368
	// succ:  l0000000000013368
l000000000001330C:
l0000000000013314:
	r1 = r2 + 0x00000000000000FF
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l0000000000013314_ds_t
	// succ:  l0000000000013314_ds_f l0000000000013314_ds_t
l0000000000013314_ds_f:
	goto l0000000000013328
	// succ:  l0000000000013328
l0000000000013314_ds_t:
	goto l000000000001334C
	// succ:  l000000000001334C
l0000000000013328:
	r3 = Mem0[r3 + 0x0000000000000158:word64]
	branch r3 != 0x0000000000000000 l0000000000013328_ds_t
	// succ:  l0000000000013328_ds_f l0000000000013328_ds_t
l0000000000013328_ds_f:
	goto l0000000000013334
	// succ:  l0000000000013334
l0000000000013328_ds_t:
	goto l00000000000132A8
	// succ:  l00000000000132A8
l0000000000013334:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoIsGoPointer_exit runtime.cgoIsGoPointer_exit
l000000000001334C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoIsGoPointer_exit
l0000000000013368:
	r2 = 0x0000000000000000
	goto l0000000000013314
	// succ:  l0000000000013314
l0000000000013374:
	r2 = 0x0000000000000000
	goto l00000000000132D4
	// succ:  l00000000000132D4
l0000000000013414:
	r1 = 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l000000000001326C
	// succ:  l000000000001326C
runtime.cgoIsGoPointer_exit:


// runtime.cgoCheckWriteBarrier
// Return size: 0
void runtime.cgoCheckWriteBarrier()
runtime.cgoCheckWriteBarrier_entry:
	// succ:  l0000000000013428
l0000000000013428:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.cgoIsGoPointer (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l0000000000013428_ds_t
	// succ:  l0000000000013428_ds_f l0000000000013428_ds_t
l0000000000013428_ds_f:
	goto l0000000000013454
	// succ:  l0000000000013454
l0000000000013428_ds_t:
	goto l0000000000013464
	// succ:  l0000000000013464
l0000000000013454:
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckWriteBarrier_exit
l0000000000013464:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.cgoIsGoPointer (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000013464_ds_t
	// succ:  l0000000000013464_ds_f l0000000000013464_ds_t
l0000000000013464_ds_f:
	goto l0000000000013488
	// succ:  l0000000000013488
l0000000000013464_ds_t:
	goto l0000000000013498
	// succ:  l0000000000013498
l0000000000013488:
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckWriteBarrier_exit
l0000000000013498:
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	branch r1 == r30 l0000000000013498_ds_t
	// succ:  l0000000000013498_ds_f l0000000000013498_ds_t
l0000000000013498_ds_f:
	goto l00000000000134A8
	// succ:  l00000000000134A8
l0000000000013498_ds_t:
	goto l0000000000013528
	// succ:  l0000000000013528
l00000000000134A8:
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000050:word64]
	branch r1 == r30 l00000000000134A8_ds_t
	// succ:  l00000000000134A8_ds_f l00000000000134A8_ds_t
l00000000000134A8_ds_f:
	goto l00000000000134B8
	// succ:  l00000000000134B8
l00000000000134A8_ds_t:
	goto l0000000000013528
	// succ:  l0000000000013528
l00000000000134B8:
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000C4:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l00000000000134B8_ds_t
	// succ:  l00000000000134B8_ds_f l00000000000134B8_ds_t
l00000000000134B8_ds_f:
	goto l00000000000134D4
	// succ:  l00000000000134D4
l00000000000134B8_ds_t:
	goto l00000000000134E4
	// succ:  l00000000000134E4
l00000000000134D4:
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckWriteBarrier_exit
l00000000000134E4:
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	r2 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[r3 + 0x0000000000000008:word64] = r2
	r2 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[r3 + 0x0000000000000010:word64] = r2
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckWriteBarrier_exit
l0000000000013528:
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckWriteBarrier_exit
runtime.cgoCheckWriteBarrier_exit:


// runtime.cgoCheckMemmove
// Return size: 0
void runtime.cgoCheckMemmove()
runtime.cgoCheckMemmove_entry:
	// succ:  l0000000000013538
l0000000000013538:
	sp = fp
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r1 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l0000000000013538_ds_t
	// succ:  l0000000000013538_ds_f l0000000000013538_ds_t
l0000000000013538_ds_f:
	goto l000000000001356C
	// succ:  l000000000001356C
l0000000000013538_ds_t:
	goto l000000000001357C
	// succ:  l000000000001357C
l000000000001356C:
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckMemmove_exit
l000000000001357C:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.cgoIsGoPointer (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l000000000001357C_ds_t
	// succ:  l000000000001357C_ds_f l000000000001357C_ds_t
l000000000001357C_ds_f:
	goto l00000000000135A0
	// succ:  l00000000000135A0
l000000000001357C_ds_t:
	goto l00000000000135B0
	// succ:  l00000000000135B0
l00000000000135A0:
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckMemmove_exit
l00000000000135B0:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.cgoIsGoPointer (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l00000000000135B0_ds_t
	// succ:  l00000000000135B0_ds_f l00000000000135B0_ds_t
l00000000000135B0_ds_f:
	goto l00000000000135D4
	// succ:  l00000000000135D4
l00000000000135B0_ds_t:
	goto l00000000000135E4
	// succ:  l00000000000135E4
l00000000000135D4:
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckMemmove_exit
l00000000000135E4:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	call runtime.cgoCheckTypedBlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckMemmove_exit
runtime.cgoCheckMemmove_exit:


// runtime.cgoCheckSliceCopy
// Return size: 0
void runtime.cgoCheckSliceCopy()
runtime.cgoCheckSliceCopy_entry:
	// succ:  l0000000000013620
l0000000000013620:
	sp = fp
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r1 = (word64) Mem0[r1 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l0000000000013620_ds_t
	// succ:  l0000000000013620_ds_f l0000000000013620_ds_t
l0000000000013620_ds_f:
	goto l0000000000013654
	// succ:  l0000000000013654
l0000000000013620_ds_t:
	goto l0000000000013664
	// succ:  l0000000000013664
l0000000000013654:
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckSliceCopy_exit
l0000000000013664:
	r1 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.cgoIsGoPointer (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l0000000000013664_ds_t
	// succ:  l0000000000013664_ds_f l0000000000013664_ds_t
l0000000000013664_ds_f:
	goto l0000000000013688
	// succ:  l0000000000013688
l0000000000013664_ds_t:
	goto l0000000000013698
	// succ:  l0000000000013698
l0000000000013688:
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckSliceCopy_exit
l0000000000013698:
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.cgoIsGoPointer (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000013698_ds_t
	// succ:  l0000000000013698_ds_f l0000000000013698_ds_t
l0000000000013698_ds_f:
	goto l00000000000136C0
	// succ:  l00000000000136C0
l0000000000013698_ds_t:
	goto l00000000000136D0
	// succ:  l00000000000136D0
l00000000000136C0:
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckSliceCopy_exit
l00000000000136D0:
	r3 = Mem0[sp + 0x0000000000000060:word64]
	r2 = 0x0000000000000000
	r1 = r2
	Mem0[sp + 0x0000000000000028:word64] = r2
	r2 = Mem0[sp + 0x0000000000000078:word64]
	r23 = (word64) (r1 < r2)
	branch r23 == 0x0000000000000000 l00000000000136D0_ds_t
	// succ:  l00000000000136D0_ds_f l00000000000136D0_ds_t
l00000000000136D0_ds_f:
	goto l00000000000136F0
	// succ:  l00000000000136F0
l00000000000136D0_ds_t:
	goto l0000000000013740
	// succ:  l0000000000013740
l00000000000136F0:
	Mem0[sp + 0x0000000000000008:word64] = r4
	Mem0[sp + 0x0000000000000030:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	r1 = r4
	r2 = Mem0[r4:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	call runtime.cgoCheckTypedBlock (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = Mem0[r4:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	lo = r1 / r1
	hi = r1 % r1
	r3 = r1
	r1 = Mem0[sp + 0x0000000000000028:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l0000000000013740:
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckSliceCopy_exit
runtime.cgoCheckSliceCopy_exit:


// runtime.cgoCheckTypedBlock
// Return size: 0
void runtime.cgoCheckTypedBlock()
runtime.cgoCheckTypedBlock_entry:
	// succ:  l0000000000013750
l0000000000013750:
	sp = fp
	sp = sp + -184
	Mem0[sp:word64] = ra
	r10 = Mem0[sp + 0x00000000000000C0:word64]
	r9 = Mem0[sp + 0x00000000000000D0:word64]
	r5 = Mem0[sp + 0x00000000000000C8:word64]
	r1 = Mem0[r10 + 0x0000000000000008:word64]
	r23 = (word64) (r9 <u r1)
	branch r23 != 0x0000000000000000 l0000000000013750_ds_t
	// succ:  l0000000000013750_ds_f l0000000000013750_ds_t
l0000000000013750_ds_f:
	goto l0000000000013774
	// succ:  l0000000000013774
l0000000000013750_ds_t:
	goto l0000000000013784
	// succ:  l0000000000013784
l0000000000013774:
	r4 = Mem0[sp:word64]
	sp = sp + 184
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckTypedBlock_exit
l0000000000013784:
	r3 = Mem0[r10 + 0x0000000000000008:word64]
runtime.cgoCheckTypedBlock_exit:


// runtime.cgoCheckBits
// Return size: 0
void runtime.cgoCheckBits()
runtime.cgoCheckBits_entry:
	// succ:  l0000000000013D60
l0000000000013D60:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000048:word64]
	r2 = r1
	r5 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000013D60_ds_t
	// succ:  l0000000000013D60_ds_f l0000000000013D60_ds_t
l0000000000013D60_ds_f:
	goto l0000000000013D80
	// succ:  l0000000000013D80
l0000000000013D60_ds_t:
	goto l0000000000013D8C
	// succ:  l0000000000013D8C
l0000000000013D80:
	call runtime.panicdivide (retsize: 0;)
l0000000000013D8C:
	lo = r1 / r3
	hi = r1 % r3
	r1 = lo
	r2 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000013D8C_ds_t
	// succ:  l0000000000013D8C_ds_f l0000000000013D8C_ds_t
l0000000000013D8C_ds_f:
	goto l0000000000013DA4
	// succ:  l0000000000013DA4
l0000000000013D8C_ds_t:
	goto l0000000000013DB0
	// succ:  l0000000000013DB0
l0000000000013DA4:
	call runtime.panicdivide (retsize: 0;)
l0000000000013DB0:
	lo = r1 / r3
	hi = r1 % r3
	r4 = lo
runtime.cgoCheckBits_exit:


// runtime.cgoCheckUsingType
// Return size: 0
void runtime.cgoCheckUsingType()
runtime.cgoCheckUsingType_entry:
	// succ:  l0000000000013F80
l0000000000013F80:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000018:word64]
	r2 = sp + -152
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000013F80_ds_t
	// succ:  l0000000000013F80_ds_f l0000000000013F80_ds_t
l0000000000013F80_ds_f:
	goto l0000000000013F94
	// succ:  l0000000000013F94
l0000000000013F80_ds_t:
	goto l0000000000013FA8
	// succ:  l0000000000013FA8
l0000000000013F94:
	r3 = ra
	call runtime.morestackc (retsize: 0;)
	goto l0000000000013F80
	// succ:  l0000000000013F80
l0000000000013FA8:
	sp = sp + -152
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x00000000000000A0:word64]
	r8 = Mem0[sp + 0x00000000000000A8:word64]
	r6 = Mem0[sp + 0x00000000000000B8:word64]
	r3 = Mem0[sp + 0x00000000000000B0:word64]
	r1 = (word64) Mem0[r4 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l0000000000013FA8_ds_t
	// succ:  l0000000000013FA8_ds_f l0000000000013FA8_ds_t
l0000000000013FA8_ds_f:
	goto l0000000000013FE8
	// succ:  l0000000000013FE8
l0000000000013FA8_ds_t:
	goto l0000000000013FF8
	// succ:  l0000000000013FF8
l0000000000013FE8:
	r4 = Mem0[sp:word64]
	sp = sp + 152
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckUsingType_exit
l0000000000013FF8:
	r1 = Mem0[r4 + 0x0000000000000008:word64]
	r23 = (word64) (r3 <u r1)
	branch r23 != 0x0000000000000000 l0000000000013FF8_ds_t
	// succ:  l0000000000013FF8_ds_f l0000000000013FF8_ds_t
l0000000000013FF8_ds_f:
	goto l0000000000014008
	// succ:  l0000000000014008
l0000000000013FF8_ds_t:
	goto l0000000000014018
	// succ:  l0000000000014018
l0000000000014008:
	r4 = Mem0[sp:word64]
	sp = sp + 152
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckUsingType_exit
l0000000000014018:
	r5 = Mem0[r4 + 0x0000000000000008:word64]
runtime.cgoCheckUsingType_exit:


// runtime.makechan
// Return size: 0
void runtime.makechan()
runtime.makechan_entry:
	// succ:  l0000000000014348
l0000000000014348:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000014348_ds_t
	// succ:  l0000000000014348_ds_f l0000000000014348_ds_t
l0000000000014348_ds_f:
	goto l0000000000014358
	// succ:  l0000000000014358
l0000000000014348_ds_t:
	goto l000000000001436C
	// succ:  l000000000001436C
l0000000000014358:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000014348
	// succ:  l0000000000014348
l000000000001436C:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000060:word64]
	r1 = Mem0[sp + 0x0000000000000058:word64]
	r5 = Mem0[r1 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000030:word64] = r5
	r1 = Mem0[r5:word64]
	r2 = 0x0000000000010000
	r23 = (word64) (r1 <u r2)
	branch r23 != 0x0000000000000000 l000000000001436C_ds_t
	// succ:  l000000000001436C_ds_f l000000000001436C_ds_t
l000000000001436C_ds_f:
	goto l0000000000014398
	// succ:  l0000000000014398
l000000000001436C_ds_t:
	goto l00000000000143C0
	// succ:  l00000000000143C0
l0000000000014398:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000143C0:
	r1 = (word64) Mem0[r5 + 0x0000000000000015:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l00000000000143C0_ds_t
	// succ:  l00000000000143C0_ds_f l00000000000143C0_ds_t
l00000000000143C0_ds_f:
	goto l00000000000143E0
	// succ:  l00000000000143E0
l00000000000143C0_ds_t:
	goto l0000000000014730
	// succ:  l0000000000014730
l00000000000143E0:
	r2 = 0x0000000000000000
	r23 = (word64) (r6 < 0x0000000000000000)
	branch r23 != 0x0000000000000000 l00000000000143E0_ds_t
	// succ:  l00000000000143E0_ds_f l00000000000143E0_ds_t
l00000000000143E0_ds_f:
	goto l00000000000143F0
	// succ:  l00000000000143F0
l00000000000143E0_ds_t:
	goto l0000000000014450
	// succ:  l0000000000014450
l00000000000143F0:
	r2 = r6
	branch r6 != r6 l00000000000143F0_ds_t
	// succ:  l00000000000143F0_ds_f l00000000000143F0_ds_t
l00000000000143F0_ds_f:
	goto l00000000000143FC
	// succ:  l00000000000143FC
l00000000000143F0_ds_t:
	goto l0000000000014450
	// succ:  l0000000000014450
l00000000000143FC:
	r1 = Mem0[r5:word64]
	r23 = (word64) (0x0000000000000000 <u r1)
	branch r23 == 0x0000000000000000 l00000000000143FC_ds_t
	// succ:  l00000000000143FC_ds_f l00000000000143FC_ds_t
l00000000000143FC_ds_f:
	goto l000000000001440C
	// succ:  l000000000001440C
l00000000000143FC_ds_t:
	goto l00000000000144CC
	// succ:  l00000000000144CC
l000000000001440C:
	r1 = r6
	r2 = Mem0[r5:word64]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000001198:word64]
	r4 = r2
	branch r2 != 0x0000000000000000 l000000000001440C_ds_t
	// succ:  l000000000001440C_ds_f l000000000001440C_ds_t
l000000000001440C_ds_f:
	goto l000000000001442C
	// succ:  l000000000001442C
l000000000001440C_ds_t:
	goto l0000000000014438
	// succ:  l0000000000014438
l000000000001442C:
	call runtime.panicdivide (retsize: 0;)
l0000000000014438:
	lo = r3 / r2
	hi = r3 % r2
	r3 = lo
	r2 = r3
	r23 = (word64) (r3 <u r6)
	branch r23 == 0x0000000000000000 l0000000000014438_ds_t
	// succ:  l0000000000014438_ds_f l0000000000014438_ds_t
l0000000000014438_ds_f:
	goto l0000000000014450
	// succ:  l0000000000014450
l0000000000014438_ds_t:
	goto l00000000000144CC
	// succ:  l00000000000144CC
l0000000000014450:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000040:word64] = r1
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000040:word64] = r1
l00000000000144CC:
	r1 = (word64) Mem0[r5 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l00000000000144CC_ds_t
	// succ:  l00000000000144CC_ds_f l00000000000144CC_ds_t
l00000000000144CC_ds_f:
	goto l00000000000144F4
	// succ:  l00000000000144F4
l00000000000144CC_ds_t:
	goto l000000000001461C
	// succ:  l000000000001461C
l00000000000144F4:
	r2 = 0x0000000000000000
	branch r6 == 0x0000000000000000 l00000000000144F4_ds_t
	// succ:  l00000000000144F4_ds_f l00000000000144F4_ds_t
l00000000000144F4_ds_f:
	goto l0000000000014500
	// succ:  l0000000000014500
l00000000000144F4_ds_t:
	goto l000000000001461C
	// succ:  l000000000001461C
l0000000000014500:
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.newobject (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.newarray (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[sp + 0x0000000000000018:word64]
	r1 = r5
	branch r5 != 0x0000000000000000 l0000000000014500_ds_t
	// succ:  l0000000000014500_ds_f l0000000000014500_ds_t
l0000000000014500_ds_f:
	goto l000000000001454C
	// succ:  l000000000001454C
l0000000000014500_ds_t:
	goto l0000000000014550
	// succ:  l0000000000014550
l000000000001454C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000014550
l0000000000014550:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000014550_ds_t
	// succ:  l0000000000014550_ds_f l0000000000014550_ds_t
l0000000000014550_ds_f:
	goto l0000000000014568
	// succ:  l0000000000014568
l0000000000014550_ds_t:
	goto l00000000000145FC
	// succ:  l00000000000145FC
l0000000000014568:
	Mem0[r1 + 0x0000000000000010:word64] = r2
	goto l000000000001456C
	// succ:  l000000000001456C
l0000000000014568_ds_f:
	goto l0000000000014574
	// succ:  l0000000000014574
l0000000000014568_ds_t:
	goto l0000000000014578
	// succ:  l0000000000014578
l000000000001456C:
	branch r5 != 0x0000000000000000 l0000000000014568_ds_t
	goto l0000000000014568_ds_f
	// succ:  l0000000000014568_ds_f l0000000000014568_ds_t
l0000000000014574:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000014578
l0000000000014578:
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r2 = Mem0[r2:word64]
	r2 = r2 + 0x000000000000FFFF
	Mem0[r5 + 0x0000000000000018:word16] = (word16) r2
	r1 = r5
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000014578_ds_t
	// succ:  l0000000000014578_ds_f l0000000000014578_ds_t
l0000000000014578_ds_f:
	goto l00000000000145A8
	// succ:  l00000000000145A8
l0000000000014578_ds_t:
	goto l00000000000145C8
	// succ:  l00000000000145C8
l00000000000145A8:
	Mem0[r1 + 0x0000000000000020:word64] = r2
	r2 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[r5 + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000068:word64] = r5
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.makechan_exit
l00000000000145C8:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[r5 + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000068:word64] = r5
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.makechan_exit
l00000000000145FC:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000038:word64]
	goto l000000000001456C
	// succ:  l000000000001456C
l000000000001461C:
	r2 = Mem0[r5:word64]
l0000000000014730:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.makechan_exit:


// runtime.chansend1
// Return size: 0
void runtime.chansend1()
runtime.chansend1_entry:
	// succ:  l0000000000014760
l0000000000014760:
	sp = fp
	sp = sp + -56
	Mem0[sp:word64] = ra
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.getcallerpc (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000010:word64]
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000020:byte] = (byte) r1
	r1 = r2
	Mem0[sp + 0x0000000000000028:word64] = r2
	call runtime.chansend (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.chansend1_exit
runtime.chansend1_exit:


// runtime.chansend
// Return size: 0
void runtime.chansend()
runtime.chansend_entry:
	// succ:  l00000000000147C0
l00000000000147C0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -136
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000147C0_ds_t
	// succ:  l00000000000147C0_ds_f l00000000000147C0_ds_t
l00000000000147C0_ds_f:
	goto l00000000000147D4
	// succ:  l00000000000147D4
l00000000000147C0_ds_t:
	goto l00000000000147E8
	// succ:  l00000000000147E8
l00000000000147D4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000147C0
	// succ:  l00000000000147C0
l00000000000147E8:
	sp = sp + -136
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000098:word64]
	r1 = 0x0000000000000000
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l00000000000147E8_ds_t
	// succ:  l00000000000147E8_ds_f l00000000000147E8_ds_t
l00000000000147E8_ds_f:
	goto l0000000000014804
	// succ:  l0000000000014804
l00000000000147E8_ds_t:
	goto l0000000000014888
	// succ:  l0000000000014888
l0000000000014804:
	r1 = (word64) Mem0[sp + 0x00000000000000A8:byte]
	branch r1 != 0x0000000000000000 l0000000000014804_ds_t
	// succ:  l0000000000014804_ds_f l0000000000014804_ds_t
l0000000000014804_ds_f:
	goto l0000000000014810
	// succ:  l0000000000014810
l0000000000014804_ds_t:
	goto l0000000000014828
	// succ:  l0000000000014828
l0000000000014810:
	r1 = 0x0000000000000000
	Mem0[sp + 0x00000000000000B8:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 136
	call r4 (retsize: 0;)
	return
	// succ:  runtime.chansend_exit
l0000000000014828:
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000018:word64] = r1
l0000000000014888:
	r1 = (word64) Mem0[sp + 0x00000000000000A8:byte]
	branch r1 != 0x0000000000000000 l0000000000014888_ds_t
	// succ:  l0000000000014888_ds_f l0000000000014888_ds_t
l0000000000014888_ds_f:
	goto l0000000000014894
	// succ:  l0000000000014894
l0000000000014888_ds_t:
	goto l0000000000014920
	// succ:  l0000000000014920
l0000000000014894:
	r1 = (word64) Mem0[r3 + 0x000000000000001C:uint32]
l0000000000014920:
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006940:word64]
	r2 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r1)
	branch r23 == 0x0000000000000000 l0000000000014920_ds_t
	// succ:  l0000000000014920_ds_f l0000000000014920_ds_t
l0000000000014920_ds_f:
	goto l0000000000014940
	// succ:  l0000000000014940
l0000000000014920_ds_t:
	goto l0000000000014954
	// succ:  l0000000000014954
l0000000000014940:
	call runtime.cputicks (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000098:word64]
	r1 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	// succ:  l0000000000014954
l0000000000014954:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000014954_ds_t
	// succ:  l0000000000014954_ds_f l0000000000014954_ds_t
l0000000000014954_ds_f:
	goto l0000000000014964
	// succ:  l0000000000014964
l0000000000014954_ds_t:
	goto l0000000000014968
	// succ:  l0000000000014968
l0000000000014964:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000014968
l0000000000014968:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000098:word64]
	r1 = (word64) Mem0[r3 + 0x000000000000001C:uint32]
runtime.chansend_exit:


// runtime.send
// Return size: 0
void runtime.send()
runtime.send_entry:
	// succ:  l0000000000015100
l0000000000015100:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000015100_ds_t
	// succ:  l0000000000015100_ds_f l0000000000015100_ds_t
l0000000000015100_ds_f:
	goto l0000000000015110
	// succ:  l0000000000015110
l0000000000015100_ds_t:
	goto l0000000000015124
	// succ:  l0000000000015124
l0000000000015110:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000015100
	// succ:  l0000000000015100
l0000000000015124:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = Mem0[r3 + 0x0000000000000020:word64]
	branch r1 == 0x0000000000000000 l0000000000015124_ds_t
	// succ:  l0000000000015124_ds_f l0000000000015124_ds_t
l0000000000015124_ds_f:
	goto l000000000001513C
	// succ:  l000000000001513C
l0000000000015124_ds_t:
	goto l0000000000015164
	// succ:  l0000000000015164
l000000000001513C:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r2 = Mem0[r1 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.sendDirect (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[r3 + 0x0000000000000020:word64] = 0x0000000000000000
	// succ:  l0000000000015164
l0000000000015164:
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	r22 = Mem0[sp + 0x0000000000000048:word64]
	r1 = Mem0[r22:word64]
	call r1 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	branch r1 != 0x0000000000000000 l0000000000015164_ds_t
	// succ:  l0000000000015164_ds_f l0000000000015164_ds_t
l0000000000015164_ds_f:
	goto l0000000000015188
	// succ:  l0000000000015188
l0000000000015164_ds_t:
	goto l000000000001518C
	// succ:  l000000000001518C
l0000000000015188:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001518C
l000000000001518C:
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000001518C_ds_t
	// succ:  l000000000001518C_ds_f l000000000001518C_ds_t
l000000000001518C_ds_f:
	goto l00000000000151A8
	// succ:  l00000000000151A8
l000000000001518C_ds_t:
	goto l0000000000015200
	// succ:  l0000000000015200
l00000000000151A8:
	Mem0[r1 + 0x00000000000000B0:word64] = r2
	goto l00000000000151AC
	// succ:  l00000000000151AC
l00000000000151A8_ds_f:
	goto l00000000000151C0
	// succ:  l00000000000151C0
l00000000000151A8_ds_t:
	goto l00000000000151D8
	// succ:  l00000000000151D8
l00000000000151AC:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r1 = Mem0[r1 + 0x0000000000000028:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l00000000000151A8_ds_t
	goto l00000000000151A8_ds_f
	// succ:  l00000000000151A8_ds_f l00000000000151A8_ds_t
l00000000000151C0:
	call runtime.cputicks (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000008:word64]
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = r3
	Mem0[r1 + 0x0000000000000028:word64] = r3
	// succ:  l00000000000151D8
l00000000000151D8:
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.goready (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.send_exit
l0000000000015200:
	lo = r3 / r1
	hi = r3 % r1
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	goto l00000000000151AC
	// succ:  l00000000000151AC
runtime.send_exit:


// runtime.sendDirect
// Return size: 0
void runtime.sendDirect()
runtime.sendDirect_entry:
	// succ:  l0000000000015220
l0000000000015220:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000015220_ds_t
	// succ:  l0000000000015220_ds_f l0000000000015220_ds_t
l0000000000015220_ds_f:
	goto l0000000000015230
	// succ:  l0000000000015230
l0000000000015220_ds_t:
	goto l0000000000015244
	// succ:  l0000000000015244
l0000000000015230:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000015220
	// succ:  l0000000000015220
l0000000000015244:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r3 = Mem0[r1 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000020:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.memmove (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = r2
	r2 = Mem0[r2:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.typeBitsBulkBarrier (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.sendDirect_exit
runtime.sendDirect_exit:


// runtime.closechan
// Return size: 0
void runtime.closechan()
runtime.closechan_entry:
	// succ:  l00000000000152B0
l00000000000152B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000152B0_ds_t
	// succ:  l00000000000152B0_ds_f l00000000000152B0_ds_t
l00000000000152B0_ds_f:
	goto l00000000000152C0
	// succ:  l00000000000152C0
l00000000000152B0_ds_t:
	goto l00000000000152D4
	// succ:  l00000000000152D4
l00000000000152C0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000152B0
	// succ:  l00000000000152B0
l00000000000152D4:
	sp = sp + -88
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l00000000000152D4_ds_t
	// succ:  l00000000000152D4_ds_f l00000000000152D4_ds_t
l00000000000152D4_ds_f:
	goto l00000000000152EC
	// succ:  l00000000000152EC
l00000000000152D4_ds_t:
	goto l0000000000015368
	// succ:  l0000000000015368
l00000000000152EC:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000048:word64] = r1
l0000000000015368:
	r1 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000015368_ds_t
	// succ:  l0000000000015368_ds_f l0000000000015368_ds_t
l0000000000015368_ds_f:
	goto l000000000001537C
	// succ:  l000000000001537C
l0000000000015368_ds_t:
	goto l0000000000015380
	// succ:  l0000000000015380
l000000000001537C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000015380
l0000000000015380:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r1 = (word64) Mem0[r1 + 0x000000000000001C:uint32]
runtime.closechan_exit:


// runtime.chanrecv1
// Return size: 0
void runtime.chanrecv1()
runtime.chanrecv1_entry:
	// succ:  l0000000000015650
l0000000000015650:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000020:byte] = (byte) r1
	call runtime.chanrecv (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.chanrecv1_exit
runtime.chanrecv1_exit:


// runtime.chanrecv
// Return size: 0
void runtime.chanrecv()
runtime.chanrecv_entry:
	// succ:  l0000000000015698
l0000000000015698:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -136
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000015698_ds_t
	// succ:  l0000000000015698_ds_f l0000000000015698_ds_t
l0000000000015698_ds_f:
	goto l00000000000156AC
	// succ:  l00000000000156AC
l0000000000015698_ds_t:
	goto l00000000000156C0
	// succ:  l00000000000156C0
l00000000000156AC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000015698
	// succ:  l0000000000015698
l00000000000156C0:
	sp = sp + -136
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000098:word64]
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	Mem0[sp + 0x00000000000000B1:byte] = (byte) r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x00000000000000B0:byte] = (byte) r1
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l00000000000156C0_ds_t
	// succ:  l00000000000156C0_ds_f l00000000000156C0_ds_t
l00000000000156C0_ds_f:
	goto l00000000000156F0
	// succ:  l00000000000156F0
l00000000000156C0_ds_t:
	goto l000000000001576C
	// succ:  l000000000001576C
l00000000000156F0:
	r1 = (word64) Mem0[sp + 0x00000000000000A8:byte]
	branch r1 != 0x0000000000000000 l00000000000156F0_ds_t
	// succ:  l00000000000156F0_ds_f l00000000000156F0_ds_t
l00000000000156F0_ds_f:
	goto l00000000000156FC
	// succ:  l00000000000156FC
l00000000000156F0_ds_t:
	goto l000000000001570C
	// succ:  l000000000001570C
l00000000000156FC:
	r4 = Mem0[sp:word64]
	sp = sp + 136
	call r4 (retsize: 0;)
	return
	// succ:  runtime.chanrecv_exit
l000000000001570C:
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000018:word64] = r1
l000000000001576C:
	r1 = (word64) Mem0[sp + 0x00000000000000A8:byte]
	branch r1 != 0x0000000000000000 l000000000001576C_ds_t
	// succ:  l000000000001576C_ds_f l000000000001576C_ds_t
l000000000001576C_ds_f:
	goto l0000000000015778
	// succ:  l0000000000015778
l000000000001576C_ds_t:
	goto l0000000000015804
	// succ:  l0000000000015804
l0000000000015778:
	r1 = Mem0[r3 + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000015778_ds_t
	// succ:  l0000000000015778_ds_f l0000000000015778_ds_t
l0000000000015778_ds_f:
	goto l0000000000015784
	// succ:  l0000000000015784
l0000000000015778_ds_t:
	goto l0000000000015F90
	// succ:  l0000000000015F90
l0000000000015784:
	r1 = Mem0[r3 + 0x0000000000000048:word64]
	branch r1 != 0x0000000000000000 l0000000000015784_ds_t
	// succ:  l0000000000015784_ds_f l0000000000015784_ds_t
l0000000000015784_ds_f:
	goto l0000000000015790
	// succ:  l0000000000015790
l0000000000015784_ds_t:
	goto l0000000000015F90
	// succ:  l0000000000015F90
l0000000000015790:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000015790_ds_t
	// succ:  l0000000000015790_ds_f l0000000000015790_ds_t
l0000000000015790_ds_f:
	goto l00000000000157A0
	// succ:  l00000000000157A0
l0000000000015790_ds_t:
	goto l00000000000157A4
	// succ:  l00000000000157A4
l00000000000157A0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000157A4
l00000000000157A4:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000098:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
l0000000000015804:
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006940:word64]
	r2 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r1)
	branch r23 == 0x0000000000000000 l0000000000015804_ds_t
	// succ:  l0000000000015804_ds_f l0000000000015804_ds_t
l0000000000015804_ds_f:
	goto l0000000000015824
	// succ:  l0000000000015824
l0000000000015804_ds_t:
	goto l0000000000015838
	// succ:  l0000000000015838
l0000000000015824:
	call runtime.cputicks (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000098:word64]
	r1 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	// succ:  l0000000000015838
l0000000000015838:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000015838_ds_t
	// succ:  l0000000000015838_ds_f l0000000000015838_ds_t
l0000000000015838_ds_f:
	goto l0000000000015848
	// succ:  l0000000000015848
l0000000000015838_ds_t:
	goto l000000000001584C
	// succ:  l000000000001584C
l0000000000015848:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001584C
l000000000001584C:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000098:word64]
	r1 = (word64) Mem0[r3 + 0x000000000000001C:uint32]
l0000000000015F90:
	r1 = Mem0[r3 + 0x0000000000000008:word64]
	r2 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r1)
	branch r23 == 0x0000000000000000 l0000000000015F90_ds_t
	// succ:  l0000000000015F90_ds_f l0000000000015F90_ds_t
l0000000000015F90_ds_f:
	goto l0000000000015FA4
	// succ:  l0000000000015FA4
l0000000000015F90_ds_t:
	goto l0000000000015804
	// succ:  l0000000000015804
l0000000000015FA4:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000015FA4_ds_t
	// succ:  l0000000000015FA4_ds_f l0000000000015FA4_ds_t
l0000000000015FA4_ds_f:
	goto l0000000000015FB4
	// succ:  l0000000000015FB4
l0000000000015FA4_ds_t:
	goto l0000000000015FB8
	// succ:  l0000000000015FB8
l0000000000015FB4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000015FB8
l0000000000015FB8:
	call runtime/internal/atomic.Loaduint (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000098:word64]
	r1 = Mem0[sp + 0x0000000000000010:word64]
	branch r1 != 0x0000000000000000 l0000000000015FB8_ds_t
	// succ:  l0000000000015FB8_ds_f l0000000000015FB8_ds_t
l0000000000015FB8_ds_f:
	goto l0000000000015FD0
	// succ:  l0000000000015FD0
l0000000000015FB8_ds_t:
	goto l0000000000015804
	// succ:  l0000000000015804
l0000000000015FD0:
	goto l0000000000015790
	// succ:  l0000000000015790
runtime.chanrecv_exit:


// runtime.recv
// Return size: 0
void runtime.recv()
runtime.recv_entry:
	// succ:  l0000000000015FD8
l0000000000015FD8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000015FD8_ds_t
	// succ:  l0000000000015FD8_ds_f l0000000000015FD8_ds_t
l0000000000015FD8_ds_f:
	goto l0000000000015FE8
	// succ:  l0000000000015FE8
l0000000000015FD8_ds_t:
	goto l0000000000015FFC
	// succ:  l0000000000015FFC
l0000000000015FE8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000015FD8
	// succ:  l0000000000015FD8
l0000000000015FFC:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000048:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = Mem0[r3 + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000015FFC_ds_t
	// succ:  l0000000000015FFC_ds_f l0000000000015FFC_ds_t
l0000000000015FFC_ds_f:
	goto l0000000000016018
	// succ:  l0000000000016018
l0000000000015FFC_ds_t:
	goto l0000000000016104
	// succ:  l0000000000016104
l0000000000016018:
	branch r5 == 0x0000000000000000 l0000000000016018_ds_t
	// succ:  l0000000000016018_ds_f l0000000000016018_ds_t
l0000000000016018_ds_f:
	goto l0000000000016020
	// succ:  l0000000000016020
l0000000000016018_ds_t:
	goto l0000000000016040
	// succ:  l0000000000016040
l0000000000016020:
	r2 = Mem0[r3 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r5
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r2 = Mem0[r1 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.typedmemmove (retsize: 0;)
l0000000000016040:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[r1 + 0x0000000000000020:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000028:word64] = r2
	r22 = Mem0[sp + 0x0000000000000050:word64]
	r1 = Mem0[r22:word64]
	call r1 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	branch r1 != 0x0000000000000000 l0000000000016040_ds_t
	// succ:  l0000000000016040_ds_f l0000000000016040_ds_t
l0000000000016040_ds_f:
	goto l0000000000016070
	// succ:  l0000000000016070
l0000000000016040_ds_t:
	goto l0000000000016074
	// succ:  l0000000000016074
l0000000000016070:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000016074
l0000000000016074:
	r2 = Mem0[sp + 0x0000000000000040:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000016074_ds_t
	// succ:  l0000000000016074_ds_f l0000000000016074_ds_t
l0000000000016074_ds_f:
	goto l0000000000016090
	// succ:  l0000000000016090
l0000000000016074_ds_t:
	goto l00000000000160E8
	// succ:  l00000000000160E8
l0000000000016090:
	Mem0[r1 + 0x00000000000000B0:word64] = r2
	goto l0000000000016094
	// succ:  l0000000000016094
l0000000000016090_ds_f:
	goto l00000000000160A8
	// succ:  l00000000000160A8
l0000000000016090_ds_t:
	goto l00000000000160C0
	// succ:  l00000000000160C0
l0000000000016094:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r1 = Mem0[r1 + 0x0000000000000028:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000016090_ds_t
	goto l0000000000016090_ds_f
	// succ:  l0000000000016090_ds_f l0000000000016090_ds_t
l00000000000160A8:
	call runtime.cputicks (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000008:word64]
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r2 = r3
	Mem0[r1 + 0x0000000000000028:word64] = r3
	// succ:  l00000000000160C0
l00000000000160C0:
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.goready (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.recv_exit
l00000000000160E8:
	lo = r3 / r1
	hi = r3 % r1
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	goto l0000000000016094
	// succ:  l0000000000016094
l0000000000016104:
	r4 = Mem0[r3 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r3 + 0x0000000000000018:uint16]
runtime.recv_exit:


// runtime.(*waitq).dequeue
// Return size: 0
void runtime.(*waitq).dequeue()
runtime.(*waitq).dequeue_entry:
	// succ:  l00000000000161B0
l00000000000161B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000161B0_ds_t
	// succ:  l00000000000161B0_ds_f l00000000000161B0_ds_t
l00000000000161B0_ds_f:
	goto l00000000000161C0
	// succ:  l00000000000161C0
l00000000000161B0_ds_t:
	goto l00000000000161D4
	// succ:  l00000000000161D4
l00000000000161C0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000161B0
	// succ:  l00000000000161B0
l00000000000161D4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000030:word64]
	r5 = Mem0[r6:word64]
	branch r5 != 0x0000000000000000 l00000000000161D4_ds_t
	// succ:  l00000000000161D4_ds_f l00000000000161D4_ds_t
l00000000000161D4_ds_f:
	goto l00000000000161EC
	// succ:  l00000000000161EC
l00000000000161D4_ds_t:
	goto l0000000000016200
	// succ:  l0000000000016200
l00000000000161EC:
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*waitq).dequeue_exit
l0000000000016200:
	Mem0[sp + 0x0000000000000020:word64] = r5
	r3 = Mem0[r5 + 0x0000000000000010:word64]
	branch r3 != 0x0000000000000000 l0000000000016200_ds_t
	// succ:  l0000000000016200_ds_f l0000000000016200_ds_t
l0000000000016200_ds_f:
	goto l0000000000016210
	// succ:  l0000000000016210
l0000000000016200_ds_t:
	goto l00000000000162C8
	// succ:  l00000000000162C8
l0000000000016210:
	Mem0[r6:word64] = 0x0000000000000000
	Mem0[r6 + 0x0000000000000008:word64] = 0x0000000000000000
	goto l0000000000016218
	// succ:  l0000000000016218
l0000000000016210_ds_f:
	goto l0000000000016224
	// succ:  l0000000000016224
l0000000000016210_ds_t:
	goto l0000000000016294
	// succ:  l0000000000016294
l0000000000016218:
	r1 = Mem0[r5 + 0x0000000000000008:word64]
	branch r1 == 0x0000000000000000 l0000000000016210_ds_t
	goto l0000000000016210_ds_f
	// succ:  l0000000000016210_ds_f l0000000000016210_ds_t
l0000000000016224:
	r2 = Mem0[r5 + 0x0000000000000008:word64]
	r1 = (word64) Mem0[r2:uint32]
l0000000000016294:
	Mem0[sp + 0x0000000000000038:word64] = r5
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*waitq).dequeue_exit
l00000000000162C8:
	Mem0[r3 + 0x0000000000000018:word64] = 0x0000000000000000
	r1 = r6
	r2 = r3
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l00000000000162C8_ds_t
	// succ:  l00000000000162C8_ds_f l00000000000162C8_ds_t
l00000000000162C8_ds_f:
	goto l00000000000162EC
	// succ:  l00000000000162EC
l00000000000162C8_ds_t:
	goto l00000000000162FC
	// succ:  l00000000000162FC
l00000000000162EC:
	Mem0[r1:word64] = r2
	Mem0[r5 + 0x0000000000000010:word64] = 0x0000000000000000
	goto l0000000000016218
	// succ:  l0000000000016218
l00000000000162FC:
	r3 = r6
	Mem0[sp + 0x0000000000000008:word64] = r6
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000030:word64]
	r5 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[r5 + 0x0000000000000010:word64] = 0x0000000000000000
	goto l0000000000016218
	// succ:  l0000000000016218
runtime.(*waitq).dequeue_exit:


// runtime.lostProfileData
// Return size: 0
void runtime.lostProfileData()
runtime.lostProfileData_entry:
	// succ:  l0000000000016328
l0000000000016328:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000016328_ds_t
	// succ:  l0000000000016328_ds_f l0000000000016328_ds_t
l0000000000016328_ds_f:
	goto l0000000000016338
	// succ:  l0000000000016338
l0000000000016328_ds_t:
	goto l000000000001634C
	// succ:  l000000000001634C
l0000000000016338:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000016328
	// succ:  l0000000000016328
l000000000001634C:
	return
	// succ:  runtime.lostProfileData_exit
runtime.lostProfileData_exit:


// runtime.(*cpuProfile).add
// Return size: 0
void runtime.(*cpuProfile).add()
runtime.(*cpuProfile).add_entry:
	// succ:  l0000000000016358
l0000000000016358:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000016358_ds_t
	// succ:  l0000000000016358_ds_f l0000000000016358_ds_t
l0000000000016358_ds_f:
	goto l0000000000016368
	// succ:  l0000000000016368
l0000000000016358_ds_t:
	goto l000000000001637C
	// succ:  l000000000001637C
l0000000000016368:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000016358
	// succ:  l0000000000016358
l000000000001637C:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000048:word64]
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	r2 = r4
	Mem0[r3 + 0x0000000000000008:word64] = r4
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	r1 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	call runtime.(*cpuProfile).addWithFlushlog (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 64
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*cpuProfile).add_exit
runtime.(*cpuProfile).add_exit:


// runtime.(*cpuProfile).addWithFlushlog
// Return size: 0
void runtime.(*cpuProfile).addWithFlushlog()
runtime.(*cpuProfile).addWithFlushlog_entry:
	// succ:  l00000000000163E0
l00000000000163E0:
	sp = fp
	sp = sp + -120
	Mem0[sp:word64] = ra
	r15 = Mem0[sp + 0x0000000000000098:word64]
	r14 = Mem0[sp + 0x0000000000000080:word64]
	r12 = Mem0[sp + 0x0000000000000088:word64]
	r9 = Mem0[sp + 0x0000000000000090:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r2 < r9)
	branch r23 == 0x0000000000000000 l00000000000163E0_ds_t
	// succ:  l00000000000163E0_ds_f l00000000000163E0_ds_t
l00000000000163E0_ds_f:
	goto l0000000000016408
	// succ:  l0000000000016408
l00000000000163E0_ds_t:
	goto l0000000000016848
	// succ:  l0000000000016848
l0000000000016408:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r15
	r23 = (word64) (r15 <u r2)
	branch r23 != 0x0000000000000000 l0000000000016408_ds_t
	// succ:  l0000000000016408_ds_f l0000000000016408_ds_t
l0000000000016408_ds_f:
	goto l000000000001641C
	// succ:  l000000000001641C
l0000000000016408_ds_t:
	goto l0000000000016834
	// succ:  l0000000000016834
l000000000001641C:
	lo = r9 / 0x0000000000000000
	hi = r9 % 0x0000000000000000
	goto l0000000000016420
	// succ:  l0000000000016420
l000000000001641C_ds_f:
	goto l0000000000016440
	// succ:  l0000000000016440
l000000000001641C_ds_t:
	goto l000000000001648C
	// succ:  l000000000001648C
l0000000000016420:
	r4 = 0x0000000000000000
	Mem0[sp + 0x0000000000000090:word64] = r9
	r5 = 0x0000000000000000
	r7 = r9
	r3 = r12
	r23 = (word64) (r5 < r7)
	branch r23 == 0x0000000000000000 l000000000001641C_ds_t
	goto l000000000001641C_ds_f
	// succ:  l000000000001641C_ds_f l000000000001641C_ds_t
l0000000000016440:
	r6 = Mem0[r3:word64]
l000000000001648C:
	r2 = Mem0[r14 + 0x0000000000000010:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r14 + 0x0000000000000010:word64] = r2
	r1 = r4
	r2 = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000001648C_ds_t
	// succ:  l000000000001648C_ds_f l000000000001648C_ds_t
l000000000001648C_ds_f:
	goto l00000000000164B0
	// succ:  l00000000000164B0
l000000000001648C_ds_t:
	goto l00000000000164BC
	// succ:  l00000000000164BC
l00000000000164B0:
	call runtime.panicdivide (retsize: 0;)
l00000000000164BC:
	lo = r4 / r3
	hi = r4 % r3
	r1 = hi
	lo = r10 / r14
	hi = r10 % r14
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
l0000000000016834:
	call runtime.panicslice (retsize: 0;)
l0000000000016848:
	goto l0000000000016420
	// succ:  l0000000000016420
runtime.(*cpuProfile).addWithFlushlog_exit:


// runtime.(*cpuProfile).evict
// Return size: 0
void runtime.(*cpuProfile).evict()
runtime.(*cpuProfile).evict_entry:
	// succ:  l0000000000016850
l0000000000016850:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = ra
	r10 = Mem0[sp + 0x00000000000000A0:word64]
	r5 = Mem0[sp + 0x0000000000000098:word64]
	r6 = 0x0000000000000000
	r7 = Mem0[r10 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000028:word64] = r7
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r6 / r7
	hi = r6 % r7
	branch r5 != 0x0000000000000000 l0000000000016850_ds_t
	// succ:  l0000000000016850_ds_f l0000000000016850_ds_t
l0000000000016850_ds_f:
	goto l000000000001687C
	// succ:  l000000000001687C
l0000000000016850_ds_t:
	goto l0000000000016880
	// succ:  l0000000000016880
l000000000001687C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000016880
l0000000000016880:
	r23 = 0x0000000000310000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 + 0x0000000000000030:int32]
	r3 = r2
	r23 = 0x0000000000210000
	r23 = r23 | 0x0000000000000028
	lo = r2 / r5
	hi = r2 % r5
	r1 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r1 <u r3)
	branch r23 != 0x0000000000000000 l0000000000016880_ds_t
	// succ:  l0000000000016880_ds_f l0000000000016880_ds_t
l0000000000016880_ds_f:
	goto l00000000000168B0
	// succ:  l00000000000168B0
l0000000000016880_ds_t:
	goto l00000000000168BC
	// succ:  l00000000000168BC
l00000000000168B0:
	call runtime.panicindex (retsize: 0;)
l00000000000168BC:
runtime.(*cpuProfile).evict_exit:


// runtime.(*cpuProfile).flushlog
// Return size: 0
void runtime.(*cpuProfile).flushlog()
runtime.(*cpuProfile).flushlog_entry:
	// succ:  l0000000000016B80
l0000000000016B80:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000016B80_ds_t
	// succ:  l0000000000016B80_ds_f l0000000000016B80_ds_t
l0000000000016B80_ds_f:
	goto l0000000000016B90
	// succ:  l0000000000016B90
l0000000000016B80_ds_t:
	goto l0000000000016BA4
	// succ:  l0000000000016BA4
l0000000000016B90:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000016B80
	// succ:  l0000000000016B80
l0000000000016BA4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000016BA4_ds_t
	// succ:  l0000000000016BA4_ds_f l0000000000016BA4_ds_t
l0000000000016BA4_ds_f:
	goto l0000000000016BC4
	// succ:  l0000000000016BC4
l0000000000016BA4_ds_t:
	goto l0000000000016BC8
	// succ:  l0000000000016BC8
l0000000000016BC4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000016BC8
l0000000000016BC8:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r2 = 0x0000000000310000
	r2 = r2 | 0x0000000000000034
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.(*cpuProfile).flushlog_exit:


// runtime.gogetenv
// Return size: 0
void runtime.gogetenv()
runtime.gogetenv_entry:
	// succ:  l0000000000016D98
l0000000000016D98:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -200
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000016D98_ds_t
	// succ:  l0000000000016D98_ds_f l0000000000016D98_ds_t
l0000000000016D98_ds_f:
	goto l0000000000016DAC
	// succ:  l0000000000016DAC
l0000000000016D98_ds_t:
	goto l0000000000016DC0
	// succ:  l0000000000016DC0
l0000000000016DAC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000016D98
	// succ:  l0000000000016D98
l0000000000016DC0:
	sp = sp + -200
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x00000000000000D8:word64]
	Mem0[sp + 0x00000000000000E0:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000E8:word64] = 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x0000000000001180:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r5 = Mem0[r23 + 0x0000000000001188:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000001190:word64]
	Mem0[sp + 0x0000000000000080:word64] = r2
	Mem0[sp + 0x0000000000000088:word64] = r5
	Mem0[sp + 0x00000000000000A0:word64] = r5
	Mem0[sp + 0x0000000000000090:word64] = r3
	Mem0[sp + 0x00000000000000A8:word64] = r3
	Mem0[sp + 0x0000000000000098:word64] = r2
	branch r2 != 0x0000000000000000 l0000000000016DC0_ds_t
	// succ:  l0000000000016DC0_ds_f l0000000000016DC0_ds_t
l0000000000016DC0_ds_f:
	goto l0000000000016E18
	// succ:  l0000000000016E18
l0000000000016DC0_ds_t:
	goto l0000000000016E3C
	// succ:  l0000000000016E3C
l0000000000016E18:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000016E3C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r7 = Mem0[r23 + 0x0000000000001180:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x0000000000001188:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r5 = Mem0[r23 + 0x0000000000001190:word64]
	Mem0[sp + 0x0000000000000068:word64] = r7
	Mem0[sp + 0x0000000000000070:word64] = r2
	Mem0[sp + 0x0000000000000078:word64] = r5
	Mem0[sp + 0x00000000000000C0:word64] = r5
	r8 = 0x0000000000000000
	Mem0[sp + 0x00000000000000B8:word64] = r2
	Mem0[sp + 0x0000000000000030:word64] = r2
	Mem0[sp + 0x00000000000000B0:word64] = r7
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r23 = (word64) (r8 < r2)
	branch r23 == 0x0000000000000000 l0000000000016E3C_ds_t
	// succ:  l0000000000016E3C_ds_f l0000000000016E3C_ds_t
l0000000000016E3C_ds_f:
	goto l0000000000016E90
	// succ:  l0000000000016E90
l0000000000016E3C_ds_t:
	goto l0000000000016FE8
	// succ:  l0000000000016FE8
l0000000000016E90:
	Mem0[sp + 0x0000000000000040:word64] = r7
	branch r7 != 0x0000000000000000 l0000000000016E90_ds_t
	// succ:  l0000000000016E90_ds_f l0000000000016E90_ds_t
l0000000000016E90_ds_f:
	goto l0000000000016E9C
	// succ:  l0000000000016E9C
l0000000000016E90_ds_t:
	goto l0000000000016EA0
	// succ:  l0000000000016EA0
l0000000000016E9C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000016EA0
l0000000000016EA0:
	r6 = Mem0[r7:word64]
	r5 = Mem0[r7 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000038:word64] = r8
	r23 = (word64) (r4 < r5)
	branch r23 == 0x0000000000000000 l0000000000016EA0_ds_t
	// succ:  l0000000000016EA0_ds_f l0000000000016EA0_ds_t
l0000000000016EA0_ds_f:
	goto l0000000000016EB8
	// succ:  l0000000000016EB8
l0000000000016EA0_ds_t:
	goto l0000000000016FC0
	// succ:  l0000000000016FC0
l0000000000016EB8:
	r1 = r6
	r3 = r5
	r2 = r4
	r23 = (word64) (r4 <u r5)
	branch r23 != 0x0000000000000000 l0000000000016EB8_ds_t
	// succ:  l0000000000016EB8_ds_f l0000000000016EB8_ds_t
l0000000000016EB8_ds_f:
	goto l0000000000016ED0
	// succ:  l0000000000016ED0
l0000000000016EB8_ds_t:
	goto l0000000000016EDC
	// succ:  l0000000000016EDC
l0000000000016ED0:
	call runtime.panicindex (retsize: 0;)
l0000000000016EDC:
	lo = r1 / r6
	hi = r1 % r6
	r1 = (word64) Mem0[r1:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000016EDC_ds_t
	// succ:  l0000000000016EDC_ds_f l0000000000016EDC_ds_t
l0000000000016EDC_ds_f:
	goto l0000000000016EFC
	// succ:  l0000000000016EFC
l0000000000016EDC_ds_t:
	goto l0000000000016FC0
	// succ:  l0000000000016FC0
l0000000000016EFC:
	Mem0[sp + 0x0000000000000050:word64] = r5
	r1 = r4
	r2 = r5
	r23 = (word64) (r5 <u r4)
	branch r23 != 0x0000000000000000 l0000000000016EFC_ds_t
	// succ:  l0000000000016EFC_ds_f l0000000000016EFC_ds_t
l0000000000016EFC_ds_f:
	goto l0000000000016F14
	// succ:  l0000000000016F14
l0000000000016EFC_ds_t:
	goto l0000000000017000
	// succ:  l0000000000017000
l0000000000016F14:
	Mem0[sp + 0x0000000000000048:word64] = r6
	r3 = r1
	r5 = r6
	branch r1 != r4 l0000000000016F14_ds_t
	// succ:  l0000000000016F14_ds_f l0000000000016F14_ds_t
l0000000000016F14_ds_f:
	goto l0000000000016F28
	// succ:  l0000000000016F28
l0000000000016F14_ds_t:
	goto l0000000000016FC0
	// succ:  l0000000000016FC0
l0000000000016F28:
	Mem0[sp + 0x0000000000000058:word64] = r6
	Mem0[sp + 0x0000000000000008:word64] = r6
	Mem0[sp + 0x0000000000000060:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	r2 = Mem0[sp + 0x00000000000000D0:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	r2 = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	call runtime.eqstring (retsize: 0;)
	r8 = Mem0[sp + 0x0000000000000038:word64]
	r7 = Mem0[sp + 0x0000000000000040:word64]
	r4 = Mem0[sp + 0x00000000000000D8:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 == 0x0000000000000000 l0000000000016F28_ds_t
	// succ:  l0000000000016F28_ds_f l0000000000016F28_ds_t
l0000000000016F28_ds_f:
	goto l0000000000016F68
	// succ:  l0000000000016F68
l0000000000016F28_ds_t:
	goto l0000000000016FC0
	// succ:  l0000000000016FC0
l0000000000016F68:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r2 = Mem0[sp + 0x0000000000000050:word64]
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l0000000000016F68_ds_t
	// succ:  l0000000000016F68_ds_f l0000000000016F68_ds_t
l0000000000016F68_ds_f:
	goto l0000000000016F80
	// succ:  l0000000000016F80
l0000000000016F68_ds_t:
	goto l0000000000016FAC
	// succ:  l0000000000016FAC
l0000000000016F80:
l0000000000016FAC:
	call runtime.panicslice (retsize: 0;)
l0000000000016FC0:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r7
	hi = r1 % r7
	r7 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r8
	hi = r1 % r8
	r8 = r1
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r23 = (word64) (r8 < r2)
	branch r23 != 0x0000000000000000 l0000000000016FC0_ds_t
	// succ:  l0000000000016FC0_ds_f l0000000000016FC0_ds_t
l0000000000016FC0_ds_f:
	goto l0000000000016FE8
	// succ:  l0000000000016FE8
l0000000000016FC0_ds_t:
	goto l0000000000016E90
	// succ:  l0000000000016E90
l0000000000016FE8:
	Mem0[sp + 0x00000000000000E0:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000E8:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 200
	call r4 (retsize: 0;)
	return
	Mem0[sp + 0x00000000000000E0:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000E8:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 200
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gogetenv_exit runtime.gogetenv_exit
l0000000000017000:
	call runtime.panicslice (retsize: 0;)
runtime.gogetenv_exit:


// runtime.(*TypeAssertionError).Error
// Return size: 0
void runtime.(*TypeAssertionError).Error()
runtime.(*TypeAssertionError).Error_entry:
	// succ:  l0000000000017018
l0000000000017018:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -232
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000017018_ds_t
	// succ:  l0000000000017018_ds_f l0000000000017018_ds_t
l0000000000017018_ds_f:
	goto l000000000001702C
	// succ:  l000000000001702C
l0000000000017018_ds_t:
	goto l0000000000017040
	// succ:  l0000000000017040
l000000000001702C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000017018
	// succ:  l0000000000017018
l0000000000017040:
	sp = sp + -232
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x00000000000000F0:word64]
	Mem0[sp + 0x00000000000000F8:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000100:word64] = 0x0000000000000000
	branch r5 != 0x0000000000000000 l0000000000017040_ds_t
	// succ:  l0000000000017040_ds_f l0000000000017040_ds_t
l0000000000017040_ds_f:
	goto l000000000001705C
	// succ:  l000000000001705C
l0000000000017040_ds_t:
	goto l0000000000017060
	// succ:  l0000000000017060
l000000000001705C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000017060
l0000000000017060:
	r8 = Mem0[r5:word64]
	Mem0[sp + 0x0000000000000060:word64] = r8
	r7 = Mem0[r5 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000068:word64] = r7
	branch r7 != 0x0000000000000000 l0000000000017060_ds_t
	// succ:  l0000000000017060_ds_f l0000000000017060_ds_t
l0000000000017060_ds_f:
	goto l0000000000017078
	// succ:  l0000000000017078
l0000000000017060_ds_t:
	goto l0000000000017090
	// succ:  l0000000000017090
l0000000000017078:
	r8 = 0x00000000000A0000
	lo = r8 / r8
	hi = r8 % r8
	lo = r8 / r8
	hi = r8 % r8
	Mem0[sp + 0x0000000000000060:word64] = r8
	lo = r7 / 0x0000000000000000
	hi = r7 % 0x0000000000000000
	Mem0[sp + 0x0000000000000068:word64] = r7
	// succ:  l0000000000017090
l0000000000017090:
	r1 = Mem0[r5 + 0x0000000000000018:word64]
	branch r1 != 0x0000000000000000 l0000000000017090_ds_t
	// succ:  l0000000000017090_ds_f l0000000000017090_ds_t
l0000000000017090_ds_f:
	goto l000000000001709C
	// succ:  l000000000001709C
l0000000000017090_ds_t:
	goto l0000000000017130
	// succ:  l0000000000017130
l000000000001709C:
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
l0000000000017130:
	r1 = Mem0[r5 + 0x0000000000000038:word64]
	branch r1 != 0x0000000000000000 l0000000000017130_ds_t
	// succ:  l0000000000017130_ds_f l0000000000017130_ds_t
l0000000000017130_ds_f:
	goto l000000000001713C
	// succ:  l000000000001713C
l0000000000017130_ds_t:
	goto l0000000000017244
	// succ:  l0000000000017244
l000000000001713C:
	lo = r6 / sp
	hi = r6 % sp
	branch r6 != 0x0000000000000000 l000000000001713C_ds_t
	// succ:  l000000000001713C_ds_f l000000000001713C_ds_t
l000000000001713C_ds_f:
	goto l0000000000017148
	// succ:  l0000000000017148
l000000000001713C_ds_t:
	goto l000000000001714C
	// succ:  l000000000001714C
l0000000000017148:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001714C
l000000000001714C:
	r2 = 0x00000000000A0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	r2 = r2 + -8
	r1 = r6 + -8
	lo = r4 / r2
	hi = r4 % r2
	// succ:  l0000000000017164
l0000000000017164:
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	branch r2 != r4 l0000000000017164_ds_t
	// succ:  l0000000000017164_ds_f l0000000000017164_ds_t
l0000000000017164_ds_f:
	goto l000000000001717C
	// succ:  l000000000001717C
l0000000000017164_ds_t:
	goto l0000000000017164
	// succ:  l0000000000017164
l000000000001717C:
	Mem0[r6 + 0x0000000000000010:word64] = r8
	Mem0[r6 + 0x0000000000000018:word64] = r7
	branch r5 != 0x0000000000000000 l000000000001717C_ds_t
	// succ:  l000000000001717C_ds_f l000000000001717C_ds_t
l000000000001717C_ds_f:
	goto l000000000001718C
	// succ:  l000000000001718C
l000000000001717C_ds_t:
	goto l0000000000017190
	// succ:  l0000000000017190
l000000000001718C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000017190
l0000000000017190:
	lo = r1 / r5
	hi = r1 % r5
	lo = r2 / r6
	hi = r2 % r6
	r1 = r1 + -8
	r2 = r2 + -8
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r1 + 8
	Mem0[r2 + 0x0000000000000008:word64] = r3
	r2 = r2 + 8
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r1 + 8
	Mem0[r2 + 0x0000000000000008:word64] = r3
	r2 = r2 + 8
	lo = r1 / r5
	hi = r1 % r5
	lo = r2 / r6
	hi = r2 % r6
	r1 = r1 + -8
	r2 = r2 + -8
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r1 + 8
	Mem0[r2 + 0x0000000000000008:word64] = r3
	r2 = r2 + 8
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r1 + 8
	Mem0[r2 + 0x0000000000000008:word64] = r3
	r2 = r2 + 8
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r6
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000070:word64] = r6
	Mem0[sp + 0x0000000000000010:word64] = r6
	Mem0[sp + 0x0000000000000078:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000080:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.concatstrings (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x00000000000000F8:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000100:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 232
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*TypeAssertionError).Error_exit
l0000000000017244:
	lo = r6 / sp
	hi = r6 % sp
	branch r6 != 0x0000000000000000 l0000000000017244_ds_t
	// succ:  l0000000000017244_ds_f l0000000000017244_ds_t
l0000000000017244_ds_f:
	goto l0000000000017250
	// succ:  l0000000000017250
l0000000000017244_ds_t:
	goto l0000000000017254
	// succ:  l0000000000017254
l0000000000017250:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000017254
l0000000000017254:
	r2 = 0x00000000000A0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	r2 = r2 + -8
	r1 = r6 + -8
	lo = r4 / r2
	hi = r4 % r2
	// succ:  l000000000001726C
l000000000001726C:
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	branch r2 != r4 l000000000001726C_ds_t
	// succ:  l000000000001726C_ds_f l000000000001726C_ds_t
l000000000001726C_ds_f:
	goto l0000000000017284
	// succ:  l0000000000017284
l000000000001726C_ds_t:
	goto l000000000001726C
	// succ:  l000000000001726C
l0000000000017284:
	branch r5 != 0x0000000000000000 l0000000000017284_ds_t
	// succ:  l0000000000017284_ds_f l0000000000017284_ds_t
l0000000000017284_ds_f:
	goto l000000000001728C
	// succ:  l000000000001728C
l0000000000017284_ds_t:
	goto l0000000000017290
	// succ:  l0000000000017290
l000000000001728C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000017290
l0000000000017290:
	lo = r1 / r5
	hi = r1 % r5
	branch r6 != 0x0000000000000000 l0000000000017290_ds_t
	// succ:  l0000000000017290_ds_f l0000000000017290_ds_t
l0000000000017290_ds_f:
	goto l000000000001729C
	// succ:  l000000000001729C
l0000000000017290_ds_t:
	goto l00000000000172A0
	// succ:  l00000000000172A0
l000000000001729C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000172A0
l00000000000172A0:
	lo = r2 / r6
	hi = r2 % r6
	r1 = r1 + -8
	r2 = r2 + -8
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r1 + 8
	Mem0[r2 + 0x0000000000000008:word64] = r3
	r2 = r2 + 8
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r1 + 8
	Mem0[r2 + 0x0000000000000008:word64] = r3
	r2 = r2 + 8
	lo = r1 / r5
	hi = r1 % r5
	lo = r2 / r6
	hi = r2 % r6
	r1 = r1 + -8
	r2 = r2 + -8
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r1 + 8
	Mem0[r2 + 0x0000000000000008:word64] = r3
	r2 = r2 + 8
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r1 + 8
	Mem0[r2 + 0x0000000000000008:word64] = r3
	r2 = r2 + 8
	lo = r1 / r5
	hi = r1 % r5
	lo = r2 / r6
	hi = r2 % r6
	r1 = r1 + -8
	r2 = r2 + -8
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r1 + 8
	Mem0[r2 + 0x0000000000000008:word64] = r3
	r2 = r2 + 8
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r1 + 8
	Mem0[r2 + 0x0000000000000008:word64] = r3
	r2 = r2 + 8
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r6
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000070:word64] = r6
	Mem0[sp + 0x0000000000000010:word64] = r6
	Mem0[sp + 0x0000000000000078:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000080:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.concatstrings (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x00000000000000F8:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000100:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 232
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*TypeAssertionError).Error_exit
runtime.(*TypeAssertionError).Error_exit:


// runtime.errorString.Error
// Return size: 0
void runtime.errorString.Error()
runtime.errorString.Error_entry:
	// succ:  l0000000000017380
l0000000000017380:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000017380_ds_t
	// succ:  l0000000000017380_ds_f l0000000000017380_ds_t
l0000000000017380_ds_f:
	goto l0000000000017390
	// succ:  l0000000000017390
l0000000000017380_ds_t:
	goto l00000000000173A4
	// succ:  l00000000000173A4
l0000000000017390:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000017380
	// succ:  l0000000000017380
l00000000000173A4:
	sp = sp + -64
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000060:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
runtime.errorString.Error_exit:


// runtime.plainError.Error
// Return size: 0
void runtime.plainError.Error()
runtime.plainError.Error_entry:
	// succ:  l0000000000017408
l0000000000017408:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000017408_ds_t
	// succ:  l0000000000017408_ds_f l0000000000017408_ds_t
l0000000000017408_ds_f:
	goto l0000000000017418
	// succ:  l0000000000017418
l0000000000017408_ds_t:
	goto l000000000001742C
	// succ:  l000000000001742C
l0000000000017418:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000017408
	// succ:  l0000000000017408
l000000000001742C:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	return
	// succ:  runtime.plainError.Error_exit
runtime.plainError.Error_exit:


// runtime.typestring
// Return size: 0
void runtime.typestring()
runtime.typestring_entry:
	// succ:  l0000000000017448
l0000000000017448:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000017448_ds_t
	// succ:  l0000000000017448_ds_f l0000000000017448_ds_t
l0000000000017448_ds_f:
	goto l0000000000017458
	// succ:  l0000000000017458
l0000000000017448_ds_t:
	goto l000000000001746C
	// succ:  l000000000001746C
l0000000000017458:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000017448
	// succ:  l0000000000017448
l000000000001746C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.(*_type).string (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r2 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000040:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typestring_exit
runtime.typestring_exit:


// runtime.printany
// Return size: 0
void runtime.printany()
runtime.printany_entry:
	// succ:  l00000000000174B0
l00000000000174B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -176
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000174B0_ds_t
	// succ:  l00000000000174B0_ds_f l00000000000174B0_ds_t
l00000000000174B0_ds_f:
	goto l00000000000174C4
	// succ:  l00000000000174C4
l00000000000174B0_ds_t:
	goto l00000000000174D8
	// succ:  l00000000000174D8
l00000000000174C4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000174B0
	// succ:  l00000000000174B0
l00000000000174D8:
	sp = sp + -176
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000070:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000078:word64] = 0x0000000000000000
	r3 = Mem0[sp + 0x00000000000000B8:word64]
	r4 = Mem0[sp + 0x00000000000000C0:word64]
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l00000000000174D8_ds_t
	// succ:  l00000000000174D8_ds_f l00000000000174D8_ds_t
l00000000000174D8_ds_f:
	goto l00000000000174FC
	// succ:  l00000000000174FC
l00000000000174D8_ds_t:
	goto l0000000000017550
	// succ:  l0000000000017550
l00000000000174FC:
	Mem0[sp + 0x0000000000000090:word64] = r3
	Mem0[sp + 0x0000000000000050:word64] = r3
	r1 = r4
	Mem0[sp + 0x0000000000000098:word64] = r4
	Mem0[sp + 0x0000000000000058:word64] = r4
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000017550:
	r2 = (word64) Mem0[r3 + 0x0000000000000010:uint32]
	Mem0[sp + 0x0000000000000030:word32] = (word32) r2
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000090:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	Mem0[sp + 0x0000000000000098:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000020:word64] = r1
	call runtime.assertE2I2 (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000017550_ds_t
	// succ:  l0000000000017550_ds_f l0000000000017550_ds_t
l0000000000017550_ds_f:
	goto l00000000000175A4
	// succ:  l00000000000175A4
l0000000000017550_ds_t:
	goto l0000000000017604
	// succ:  l0000000000017604
l00000000000175A4:
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r1 = Mem0[r1 + 0x0000000000000020:word64]
	call r1 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x00000000000000A0:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x00000000000000A8:word64] = r1
	call runtime.printlock (retsize: 0;)
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x00000000000000A8:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.printstring (retsize: 0;)
	call runtime.printunlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 176
	call r4 (retsize: 0;)
	return
	// succ:  runtime.printany_exit
l0000000000017604:
	Mem0[sp + 0x0000000000000080:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000088:word64] = 0x0000000000000000
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000090:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000098:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000020:word64] = r1
	call runtime.assertE2I2 (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000017604_ds_t
	// succ:  l0000000000017604_ds_f l0000000000017604_ds_t
l0000000000017604_ds_f:
	goto l0000000000017650
	// succ:  l0000000000017650
l0000000000017604_ds_t:
	goto l00000000000176B0
	// succ:  l00000000000176B0
l0000000000017650:
	r1 = Mem0[sp + 0x0000000000000088:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000080:word64]
	r1 = Mem0[r1 + 0x0000000000000020:word64]
	call r1 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x00000000000000A0:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x00000000000000A8:word64] = r1
	call runtime.printlock (retsize: 0;)
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x00000000000000A8:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.printstring (retsize: 0;)
	call runtime.printunlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 176
	call r4 (retsize: 0;)
	return
	// succ:  runtime.printany_exit
l00000000000176B0:
	r1 = (word64) Mem0[sp + 0x0000000000000030:uint32]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x0000000000001140:word64]
runtime.printany_exit:


// runtime.panicwrap
// Return size: 0
void runtime.panicwrap()
runtime.panicwrap_entry:
	// succ:  l00000000000178D8
l00000000000178D8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -240
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000178D8_ds_t
	// succ:  l00000000000178D8_ds_f l00000000000178D8_ds_t
l00000000000178D8_ds_f:
	goto l00000000000178EC
	// succ:  l00000000000178EC
l00000000000178D8_ds_t:
	goto l0000000000017900
	// succ:  l0000000000017900
l00000000000178EC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000178D8
	// succ:  l00000000000178D8
l0000000000017900:
	sp = sp + -240
	Mem0[sp:word64] = ra
	r7 = Mem0[sp + 0x0000000000000108:word64]
	r6 = Mem0[sp + 0x0000000000000110:word64]
	lo = r5 / sp
	hi = r5 % sp
	branch r5 != 0x0000000000000000 l0000000000017900_ds_t
	// succ:  l0000000000017900_ds_f l0000000000017900_ds_t
l0000000000017900_ds_f:
	goto l000000000001791C
	// succ:  l000000000001791C
l0000000000017900_ds_t:
	goto l0000000000017920
	// succ:  l0000000000017920
l000000000001791C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000017920
l0000000000017920:
	r2 = 0x00000000000A0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	r2 = r2 + -8
	r1 = r5 + -8
	lo = r4 / r2
	hi = r4 % r2
	// succ:  l0000000000017938
l0000000000017938:
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	branch r2 != r4 l0000000000017938_ds_t
	// succ:  l0000000000017938_ds_f l0000000000017938_ds_t
l0000000000017938_ds_f:
	goto l0000000000017950
	// succ:  l0000000000017950
l0000000000017938_ds_t:
	goto l0000000000017938
	// succ:  l0000000000017938
l0000000000017950:
	r2 = Mem0[sp + 0x00000000000000F8:word64]
	Mem0[r5 + 0x0000000000000010:word64] = r2
	r2 = Mem0[sp + 0x0000000000000100:word64]
	Mem0[r5 + 0x0000000000000018:word64] = r2
	Mem0[r5 + 0x0000000000000030:word64] = r7
	Mem0[r5 + 0x0000000000000038:word64] = r6
	r2 = Mem0[sp + 0x0000000000000118:word64]
	Mem0[r5 + 0x0000000000000050:word64] = r2
	r2 = Mem0[sp + 0x0000000000000120:word64]
	Mem0[r5 + 0x0000000000000058:word64] = r2
	Mem0[r5 + 0x0000000000000070:word64] = r7
	Mem0[r5 + 0x0000000000000078:word64] = r6
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r5
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:word64] = r5
	Mem0[sp + 0x0000000000000010:word64] = r5
	Mem0[sp + 0x0000000000000050:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000058:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.concatstrings (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	call runtime.convT2E (retsize: 0;)
	lo = r2 / sp
	hi = r2 % sp
	lo = r1 / sp
	hi = r1 % sp
	r2 = r2 + -8
	r1 = r1 + -8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	call runtime.gopanic (retsize: 0;)
runtime.panicwrap_exit:


// runtime.memhash
// Return size: 0
void runtime.memhash()
runtime.memhash_entry:
	// succ:  l0000000000017A38
l0000000000017A38:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000017A38_ds_t
	// succ:  l0000000000017A38_ds_f l0000000000017A38_ds_t
l0000000000017A38_ds_f:
	goto l0000000000017A48
	// succ:  l0000000000017A48
l0000000000017A38_ds_t:
	goto l0000000000017A5C
	// succ:  l0000000000017A5C
l0000000000017A48:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000017A38
	// succ:  l0000000000017A38
l0000000000017A5C:
	sp = sp + -40
	r10 = Mem0[sp + 0x0000000000000038:word64]
	r5 = Mem0[sp + 0x0000000000000030:word64]
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x00000000000067E0:word64]
runtime.memhash_exit:


// runtime.makemap
// Return size: 0
void runtime.makemap()
runtime.makemap_entry:
	// succ:  l00000000000183E0
l00000000000183E0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000183E0_ds_t
	// succ:  l00000000000183E0_ds_f l00000000000183E0_ds_t
l00000000000183E0_ds_f:
	goto l00000000000183F0
	// succ:  l00000000000183F0
l00000000000183E0_ds_t:
	goto l0000000000018404
	// succ:  l0000000000018404
l00000000000183F0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000183E0
	// succ:  l00000000000183E0
l0000000000018404:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000068:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = r3
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r2 <u r3)
	branch r23 != 0x0000000000000000 l0000000000018404_ds_t
	// succ:  l0000000000018404_ds_f l0000000000018404_ds_t
l0000000000018404_ds_f:
	goto l0000000000018428
	// succ:  l0000000000018428
l0000000000018404_ds_t:
	goto l0000000000018AD8
	// succ:  l0000000000018AD8
l0000000000018428:
	r2 = Mem0[r5 + 0x0000000000000048:word64]
	r1 = Mem0[r2:word64]
	branch r1 != r3 l0000000000018428_ds_t
	// succ:  l0000000000018428_ds_f l0000000000018428_ds_t
l0000000000018428_ds_f:
	goto l0000000000018438
	// succ:  l0000000000018438
l0000000000018428_ds_t:
	goto l0000000000018AD8
	// succ:  l0000000000018AD8
l0000000000018438:
	r1 = Mem0[sp + 0x0000000000000070:word64]
	r2 = 0x0000000000000000
	r23 = (word64) (r1 < 0x0000000000000000)
	branch r23 != 0x0000000000000000 l0000000000018438_ds_t
	// succ:  l0000000000018438_ds_f l0000000000018438_ds_t
l0000000000018438_ds_f:
	goto l000000000001844C
	// succ:  l000000000001844C
l0000000000018438_ds_t:
	goto l0000000000018A54
	// succ:  l0000000000018A54
l000000000001844C:
	r1 = Mem0[sp + 0x0000000000000070:word64]
	r1 = r1
	r1 = r1
	r2 = Mem0[sp + 0x0000000000000070:word64]
	branch r1 != r2 l000000000001844C_ds_t
	// succ:  l000000000001844C_ds_f l000000000001844C_ds_t
l000000000001844C_ds_f:
	goto l0000000000018464
	// succ:  l0000000000018464
l000000000001844C_ds_t:
	goto l0000000000018A54
	// succ:  l0000000000018A54
l0000000000018464:
	r3 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = 0x0000000000000000
	r2 = Mem0[r3 + 0x0000000000000018:word64]
	r1 = Mem0[r2:word64]
	branch r1 != 0x0000000000000000 l0000000000018464_ds_t
	// succ:  l0000000000018464_ds_f l0000000000018464_ds_t
l0000000000018464_ds_f:
	goto l000000000001847C
	// succ:  l000000000001847C
l0000000000018464_ds_t:
	goto l0000000000018A44
	// succ:  l0000000000018A44
l000000000001847C:
	r2 = 0x0000000000000000
	goto l0000000000018480
	// succ:  l0000000000018480
l000000000001847C_ds_f:
	goto l0000000000018494
	// succ:  l0000000000018494
l000000000001847C_ds_t:
	goto l00000000000184B8
	// succ:  l00000000000184B8
l0000000000018480:
	r1 = r2 + 0x00000000000000FF
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l000000000001847C_ds_t
	goto l000000000001847C_ds_f
	// succ:  l000000000001847C_ds_f l000000000001847C_ds_t
l0000000000018494:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000184B8:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r2 <u r1)
	branch r23 == 0x0000000000000000 l00000000000184B8_ds_t
	// succ:  l00000000000184B8_ds_f l00000000000184B8_ds_t
l00000000000184B8_ds_f:
	goto l00000000000184D0
	// succ:  l00000000000184D0
l00000000000184B8_ds_t:
	goto l00000000000184F8
	// succ:  l00000000000184F8
l00000000000184D0:
	r1 = (word64) Mem0[r5 + 0x0000000000000051:byte]
	branch r1 == 0x0000000000000000 l00000000000184D0_ds_t
	// succ:  l00000000000184D0_ds_f l00000000000184D0_ds_t
l00000000000184D0_ds_f:
	goto l00000000000184DC
	// succ:  l00000000000184DC
l00000000000184D0_ds_t:
	goto l0000000000018A18
	// succ:  l0000000000018A18
l00000000000184DC:
	r1 = (word64) Mem0[r5 + 0x0000000000000050:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l00000000000184DC_ds_t
	// succ:  l00000000000184DC_ds_f l00000000000184DC_ds_t
l00000000000184DC_ds_f:
	goto l00000000000184F8
	// succ:  l00000000000184F8
l00000000000184DC_ds_t:
	goto l0000000000018A18
	// succ:  l0000000000018A18
l00000000000184F8:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l00000000000184F8_ds_t
	// succ:  l00000000000184F8_ds_f l00000000000184F8_ds_t
l00000000000184F8_ds_f:
	goto l0000000000018510
	// succ:  l0000000000018510
l00000000000184F8_ds_t:
	goto l000000000001853C
	// succ:  l000000000001853C
l0000000000018510:
	r1 = (word64) Mem0[r5 + 0x0000000000000051:byte]
	branch r1 != 0x0000000000000000 l0000000000018510_ds_t
	// succ:  l0000000000018510_ds_f l0000000000018510_ds_t
l0000000000018510_ds_f:
	goto l000000000001851C
	// succ:  l000000000001851C
l0000000000018510_ds_t:
	goto l0000000000018A18
	// succ:  l0000000000018A18
l000000000001851C:
	r1 = (word64) Mem0[r5 + 0x0000000000000050:byte]
	r3 = Mem0[r5 + 0x0000000000000030:word64]
	r2 = Mem0[r3:word64]
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000001851C_ds_t
	// succ:  l000000000001851C_ds_f l000000000001851C_ds_t
l000000000001851C_ds_f:
	goto l000000000001853C
	// succ:  l000000000001853C
l000000000001851C_ds_t:
	goto l0000000000018A18
	// succ:  l0000000000018A18
l000000000001853C:
	r2 = Mem0[r5 + 0x0000000000000038:word64]
	r1 = Mem0[r2:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r2 <u r1)
	branch r23 == 0x0000000000000000 l000000000001853C_ds_t
	// succ:  l000000000001853C_ds_f l000000000001853C_ds_t
l000000000001853C_ds_f:
	goto l0000000000018554
	// succ:  l0000000000018554
l000000000001853C_ds_t:
	goto l000000000001857C
	// succ:  l000000000001857C
l0000000000018554:
	r1 = (word64) Mem0[r5 + 0x0000000000000053:byte]
	branch r1 == 0x0000000000000000 l0000000000018554_ds_t
	// succ:  l0000000000018554_ds_f l0000000000018554_ds_t
l0000000000018554_ds_f:
	goto l0000000000018560
	// succ:  l0000000000018560
l0000000000018554_ds_t:
	goto l00000000000189EC
	// succ:  l00000000000189EC
l0000000000018560:
	r1 = (word64) Mem0[r5 + 0x0000000000000052:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000018560_ds_t
	// succ:  l0000000000018560_ds_f l0000000000018560_ds_t
l0000000000018560_ds_f:
	goto l000000000001857C
	// succ:  l000000000001857C
l0000000000018560_ds_t:
	goto l00000000000189EC
	// succ:  l00000000000189EC
l000000000001857C:
	r2 = Mem0[r5 + 0x0000000000000038:word64]
	r1 = Mem0[r2:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l000000000001857C_ds_t
	// succ:  l000000000001857C_ds_f l000000000001857C_ds_t
l000000000001857C_ds_f:
	goto l0000000000018594
	// succ:  l0000000000018594
l000000000001857C_ds_t:
	goto l00000000000185C0
	// succ:  l00000000000185C0
l0000000000018594:
	r1 = (word64) Mem0[r5 + 0x0000000000000053:byte]
	branch r1 != 0x0000000000000000 l0000000000018594_ds_t
	// succ:  l0000000000018594_ds_f l0000000000018594_ds_t
l0000000000018594_ds_f:
	goto l00000000000185A0
	// succ:  l00000000000185A0
l0000000000018594_ds_t:
	goto l00000000000189EC
	// succ:  l00000000000189EC
l00000000000185A0:
	r1 = (word64) Mem0[r5 + 0x0000000000000052:byte]
	r3 = Mem0[r5 + 0x0000000000000038:word64]
	r2 = Mem0[r3:word64]
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l00000000000185A0_ds_t
	// succ:  l00000000000185A0_ds_f l00000000000185A0_ds_t
l00000000000185A0_ds_f:
	goto l00000000000185C0
	// succ:  l00000000000185C0
l00000000000185A0_ds_t:
	goto l00000000000189EC
	// succ:  l00000000000189EC
l00000000000185C0:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x0000000000000015:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r23 = (word64) (r2 <u r1)
	branch r23 == 0x0000000000000000 l00000000000185C0_ds_t
	// succ:  l00000000000185C0_ds_f l00000000000185C0_ds_t
l00000000000185C0_ds_f:
	goto l00000000000185E4
	// succ:  l00000000000185E4
l00000000000185C0_ds_t:
	goto l0000000000018608
	// succ:  l0000000000018608
l00000000000185E4:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000018608:
	r2 = Mem0[r5 + 0x0000000000000038:word64]
	r1 = (word64) Mem0[r2 + 0x0000000000000015:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r23 = (word64) (r2 <u r1)
	branch r23 == 0x0000000000000000 l0000000000018608_ds_t
	// succ:  l0000000000018608_ds_f l0000000000018608_ds_t
l0000000000018608_ds_f:
	goto l000000000001862C
	// succ:  l000000000001862C
l0000000000018608_ds_t:
	goto l0000000000018650
	// succ:  l0000000000018650
l000000000001862C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000018650:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	r4 = Mem0[r5 + 0x0000000000000030:word64]
	r3 = (word64) Mem0[r4 + 0x0000000000000015:byte]
	r2 = r1
	branch r3 != 0x0000000000000000 l0000000000018650_ds_t
	// succ:  l0000000000018650_ds_f l0000000000018650_ds_t
l0000000000018650_ds_f:
	goto l000000000001866C
	// succ:  l000000000001866C
l0000000000018650_ds_t:
	goto l0000000000018678
	// succ:  l0000000000018678
l000000000001866C:
	call runtime.panicdivide (retsize: 0;)
l0000000000018678:
	lo = r1 / r3
	hi = r1 % r3
	r1 = hi
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000018678_ds_t
	// succ:  l0000000000018678_ds_f l0000000000018678_ds_t
l0000000000018678_ds_f:
	goto l000000000001868C
	// succ:  l000000000001868C
l0000000000018678_ds_t:
	goto l00000000000186B0
	// succ:  l00000000000186B0
l000000000001868C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000186B0:
	r2 = Mem0[r5 + 0x0000000000000038:word64]
	r1 = Mem0[r2:word64]
	r4 = Mem0[r5 + 0x0000000000000038:word64]
	r3 = (word64) Mem0[r4 + 0x0000000000000015:byte]
	r2 = r1
	branch r3 != 0x0000000000000000 l00000000000186B0_ds_t
	// succ:  l00000000000186B0_ds_f l00000000000186B0_ds_t
l00000000000186B0_ds_f:
	goto l00000000000186CC
	// succ:  l00000000000186CC
l00000000000186B0_ds_t:
	goto l00000000000186D8
	// succ:  l00000000000186D8
l00000000000186CC:
	call runtime.panicdivide (retsize: 0;)
l00000000000186D8:
	lo = r1 / r3
	hi = r1 % r3
	r1 = hi
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l00000000000186D8_ds_t
	// succ:  l00000000000186D8_ds_f l00000000000186D8_ds_t
l00000000000186D8_ds_f:
	goto l00000000000186EC
	// succ:  l00000000000186EC
l00000000000186D8_ds_t:
	goto l0000000000018710
	// succ:  l0000000000018710
l00000000000186EC:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000018710:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x0000000000000015:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r3 = r1
	branch r1 != 0x0000000000000000 l0000000000018710_ds_t
	// succ:  l0000000000018710_ds_f l0000000000018710_ds_t
l0000000000018710_ds_f:
	goto l0000000000018728
	// succ:  l0000000000018728
l0000000000018710_ds_t:
	goto l0000000000018734
	// succ:  l0000000000018734
l0000000000018728:
	call runtime.panicdivide (retsize: 0;)
l0000000000018734:
	lo = r2 / r1
	hi = r2 % r1
	r1 = hi
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000018734_ds_t
	// succ:  l0000000000018734_ds_f l0000000000018734_ds_t
l0000000000018734_ds_f:
	goto l0000000000018748
	// succ:  l0000000000018748
l0000000000018734_ds_t:
	goto l000000000001876C
	// succ:  l000000000001876C
l0000000000018748:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000001876C:
	r2 = Mem0[r5 + 0x0000000000000038:word64]
	r1 = (word64) Mem0[r2 + 0x0000000000000015:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r3 = r1
	branch r1 != 0x0000000000000000 l000000000001876C_ds_t
	// succ:  l000000000001876C_ds_f l000000000001876C_ds_t
l000000000001876C_ds_f:
	goto l0000000000018784
	// succ:  l0000000000018784
l000000000001876C_ds_t:
	goto l0000000000018790
	// succ:  l0000000000018790
l0000000000018784:
	call runtime.panicdivide (retsize: 0;)
l0000000000018790:
	lo = r2 / r1
	hi = r2 % r1
	r1 = hi
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000018790_ds_t
	// succ:  l0000000000018790_ds_f l0000000000018790_ds_t
l0000000000018790_ds_f:
	goto l00000000000187A4
	// succ:  l00000000000187A4
l0000000000018790_ds_t:
	goto l00000000000187C8
	// succ:  l00000000000187C8
l00000000000187A4:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000187C8:
	r1 = 0x0000000000000000
	r4 = r1 + 0x00000000000000FF
	r1 = Mem0[sp + 0x0000000000000070:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l00000000000187C8_ds_t
	// succ:  l00000000000187C8_ds_f l00000000000187C8_ds_t
l00000000000187C8_ds_f:
	goto l00000000000187E4
	// succ:  l00000000000187E4
l00000000000187C8_ds_t:
	goto l0000000000018874
	// succ:  l0000000000018874
l00000000000187E4:
	r1 = Mem0[sp + 0x0000000000000070:word64]
l0000000000018874:
	r1 = Mem0[sp + 0x0000000000000080:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r1 = r4 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000030:byte] = (byte) r4
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l0000000000018874_ds_t
	// succ:  l0000000000018874_ds_f l0000000000018874_ds_t
l0000000000018874_ds_f:
	goto l0000000000018898
	// succ:  l0000000000018898
l0000000000018874_ds_t:
	goto l00000000000188E0
	// succ:  l00000000000188E0
l0000000000018898:
	r2 = Mem0[r5 + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r4 + 0x00000000000000FF
l00000000000188E0:
	r1 = Mem0[sp + 0x0000000000000078:word64]
	branch r1 != 0x0000000000000000 l00000000000188E0_ds_t
	// succ:  l00000000000188E0_ds_f l00000000000188E0_ds_t
l00000000000188E0_ds_f:
	goto l00000000000188EC
	// succ:  l00000000000188EC
l00000000000188E0_ds_t:
	goto l000000000001890C
	// succ:  l000000000001890C
l00000000000188EC:
	r1 = r5
	r2 = Mem0[r5 + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.newobject (retsize: 0;)
	r4 = (word64) Mem0[sp + 0x0000000000000030:byte]
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000078:word64] = r1
	// succ:  l000000000001890C
l000000000001890C:
	r1 = Mem0[sp + 0x0000000000000078:word64]
	Mem0[r1:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000078:word64]
	r2 = r4 + 0x00000000000000FF
	Mem0[r1 + 0x0000000000000009:byte] = (byte) r2
	r1 = Mem0[sp + 0x0000000000000078:word64]
	r2 = 0x0000000000000000
	Mem0[r1 + 0x0000000000000008:byte] = (byte) r2
	call runtime.fastrand1 (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000078:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000008:uint32]
l00000000000189EC:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000018A18:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000018A44:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l0000000000018480
	// succ:  l0000000000018480
l0000000000018A54:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000050:word64] = r1
l0000000000018AD8:
	r2 = Mem0[r5 + 0x0000000000000048:word64]
	r1 = Mem0[r2:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.makemap_exit:


// runtime.mapassign1
// Return size: 0
void runtime.mapassign1()
runtime.mapassign1_entry:
	// succ:  l0000000000018BA0
l0000000000018BA0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -256
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000018BA0_ds_t
	// succ:  l0000000000018BA0_ds_f l0000000000018BA0_ds_t
l0000000000018BA0_ds_f:
	goto l0000000000018BB4
	// succ:  l0000000000018BB4
l0000000000018BA0_ds_t:
	goto l0000000000018BC8
	// succ:  l0000000000018BC8
l0000000000018BB4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000018BA0
	// succ:  l0000000000018BA0
l0000000000018BC8:
	sp = sp + -256
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000110:word64]
	r2 = 0x0000000000000000
	branch r4 != 0x0000000000000000 l0000000000018BC8_ds_t
	// succ:  l0000000000018BC8_ds_f l0000000000018BC8_ds_t
l0000000000018BC8_ds_f:
	goto l0000000000018BE0
	// succ:  l0000000000018BE0
l0000000000018BC8_ds_t:
	goto l0000000000018C5C
	// succ:  l0000000000018C5C
l0000000000018BE0:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x00000000000000D8:word64] = r1
l0000000000018C5C:
	r1 = (word64) Mem0[r4 + 0x0000000000000008:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l0000000000018C5C_ds_t
	// succ:  l0000000000018C5C_ds_f l0000000000018C5C_ds_t
l0000000000018C5C_ds_f:
	goto l0000000000018C84
	// succ:  l0000000000018C84
l0000000000018C5C_ds_t:
	goto l0000000000018CA8
	// succ:  l0000000000018CA8
l0000000000018C84:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000018CA8:
	r2 = (word64) Mem0[r4 + 0x0000000000000008:byte]
	r3 = r2 + 0x00000000000000FF
	r2 = r3 + 0x00000000000000FF
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3 + 0x00000000000000FF
	r2 = r2 | r3
	Mem0[r4 + 0x0000000000000008:byte] = (byte) r2
	r1 = Mem0[sp + 0x0000000000000108:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000118:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r2 = (word64) Mem0[r4 + 0x000000000000000C:uint32]
	Mem0[sp + 0x0000000000000010:word64] = r2
	Mem0[sp + 0x00000000000000D0:word64] = r3
	r22 = Mem0[r3:word64]
	r1 = Mem0[r22:word64]
	call r1 (retsize: 0;)
	r7 = Mem0[sp + 0x0000000000000110:word64]
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
	r1 = Mem0[r7 + 0x0000000000000010:word64]
	branch r1 != 0x0000000000000000 l0000000000018CA8_ds_t
	// succ:  l0000000000018CA8_ds_f l0000000000018CA8_ds_t
l0000000000018CA8_ds_f:
	goto l0000000000018D0C
	// succ:  l0000000000018D0C
l0000000000018CA8_ds_t:
	goto l0000000000018D5C
	// succ:  l0000000000018D5C
l0000000000018D0C:
	r1 = Mem0[sp + 0x0000000000000108:word64]
	r2 = Mem0[r1 + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.newarray (retsize: 0;)
	r7 = Mem0[sp + 0x0000000000000110:word64]
	r2 = Mem0[sp + 0x0000000000000018:word64]
	r1 = r7
	branch r7 != 0x0000000000000000 l0000000000018D0C_ds_t
	// succ:  l0000000000018D0C_ds_f l0000000000018D0C_ds_t
l0000000000018D0C_ds_f:
	goto l0000000000018D3C
	// succ:  l0000000000018D3C
l0000000000018D0C_ds_t:
	goto l0000000000018D40
	// succ:  l0000000000018D40
l0000000000018D3C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000018D40
l0000000000018D40:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000018D40_ds_t
	// succ:  l0000000000018D40_ds_f l0000000000018D40_ds_t
l0000000000018D40_ds_f:
	goto l0000000000018D58
	// succ:  l0000000000018D58
l0000000000018D40_ds_t:
	goto l00000000000196EC
	// succ:  l00000000000196EC
l0000000000018D58:
	Mem0[r1 + 0x0000000000000010:word64] = r2
	// succ:  l0000000000018D5C
l0000000000018D5C:
	r2 = (word64) Mem0[r7 + 0x0000000000000009:byte]
l00000000000196EC:
	lo = r3 / r7
	hi = r3 % r7
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r7 = Mem0[sp + 0x0000000000000110:word64]
	goto l0000000000018D5C
	// succ:  l0000000000018D5C
runtime.mapassign1_exit:


// runtime.hashGrow
// Return size: 0
void runtime.hashGrow()
runtime.hashGrow_entry:
	// succ:  l0000000000019710
l0000000000019710:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000019710_ds_t
	// succ:  l0000000000019710_ds_f l0000000000019710_ds_t
l0000000000019710_ds_f:
	goto l0000000000019720
	// succ:  l0000000000019720
l0000000000019710_ds_t:
	goto l0000000000019734
	// succ:  l0000000000019734
l0000000000019720:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000019710
	// succ:  l0000000000019710
l0000000000019734:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000040:word64]
	r1 = Mem0[r3 + 0x0000000000000018:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000019734_ds_t
	// succ:  l0000000000019734_ds_f l0000000000019734_ds_t
l0000000000019734_ds_f:
	goto l0000000000019750
	// succ:  l0000000000019750
l0000000000019734_ds_t:
	goto l0000000000019774
	// succ:  l0000000000019774
l0000000000019750:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000019774:
	r2 = Mem0[r3 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[r1 + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = (word64) Mem0[r3 + 0x0000000000000009:byte]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3 + 0x00000000000000FF
	r1 = r1 + r3
	r1 = r1 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
runtime.hashGrow_exit:


// runtime.growWork
// Return size: 0
void runtime.growWork()
runtime.growWork_entry:
	// succ:  l00000000000199B0
l00000000000199B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000199B0_ds_t
	// succ:  l00000000000199B0_ds_f l00000000000199B0_ds_t
l00000000000199B0_ds_f:
	goto l00000000000199C0
	// succ:  l00000000000199C0
l00000000000199B0_ds_t:
	goto l00000000000199D4
	// succ:  l00000000000199D4
l00000000000199C0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000199B0
	// succ:  l00000000000199B0
l00000000000199D4:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r4 + 0x0000000000000009:byte]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3 + 0x00000000000000FF
	r1 = r1 - r3
	r1 = r1 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
runtime.growWork_exit:


// runtime.evacuate
// Return size: 0
void runtime.evacuate()
runtime.evacuate_entry:
	// succ:  l0000000000019A88
l0000000000019A88:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -328
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000019A88_ds_t
	// succ:  l0000000000019A88_ds_f l0000000000019A88_ds_t
l0000000000019A88_ds_f:
	goto l0000000000019A9C
	// succ:  l0000000000019A9C
l0000000000019A88_ds_t:
	goto l0000000000019AB0
	// succ:  l0000000000019AB0
l0000000000019A9C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000019A88
	// succ:  l0000000000019A88
l0000000000019AB0:
	sp = sp + -328
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000150:word64]
	r1 = (word64) Mem0[r1 + 0x0000000000000054:uint16]
	r2 = Mem0[sp + 0x0000000000000160:word64]
runtime.evacuate_exit:


// runtime.mapaccess1_fast32
// Return size: 0
void runtime.mapaccess1_fast32()
runtime.mapaccess1_fast32_entry:
	// succ:  l000000000001AA30
l000000000001AA30:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001AA30_ds_t
	// succ:  l000000000001AA30_ds_f l000000000001AA30_ds_t
l000000000001AA30_ds_f:
	goto l000000000001AA40
	// succ:  l000000000001AA40
l000000000001AA30_ds_t:
	goto l000000000001AA54
	// succ:  l000000000001AA54
l000000000001AA40:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001AA30
	// succ:  l000000000001AA30
l000000000001AA54:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000030:word64]
	branch r3 == 0x0000000000000000 l000000000001AA54_ds_t
	// succ:  l000000000001AA54_ds_f l000000000001AA54_ds_t
l000000000001AA54_ds_f:
	goto l000000000001AA68
	// succ:  l000000000001AA68
l000000000001AA54_ds_t:
	goto l000000000001AD14
	// succ:  l000000000001AD14
l000000000001AA68:
	r1 = Mem0[r3:word64]
	branch r1 == 0x0000000000000000 l000000000001AA68_ds_t
	// succ:  l000000000001AA68_ds_f l000000000001AA68_ds_t
l000000000001AA68_ds_f:
	goto l000000000001AA74
	// succ:  l000000000001AA74
l000000000001AA68_ds_t:
	goto l000000000001AD14
	// succ:  l000000000001AD14
l000000000001AA74:
	r1 = (word64) Mem0[r3 + 0x0000000000000008:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l000000000001AA74_ds_t
	// succ:  l000000000001AA74_ds_f l000000000001AA74_ds_t
l000000000001AA74_ds_f:
	goto l000000000001AA9C
	// succ:  l000000000001AA9C
l000000000001AA74_ds_t:
	goto l000000000001AAC0
	// succ:  l000000000001AAC0
l000000000001AA9C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000001AAC0:
	r1 = (word64) Mem0[r3 + 0x0000000000000009:byte]
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000001AAC0_ds_t
	// succ:  l000000000001AAC0_ds_f l000000000001AAC0_ds_t
l000000000001AAC0_ds_f:
	goto l000000000001AAD8
	// succ:  l000000000001AAD8
l000000000001AAC0_ds_t:
	goto l000000000001ABE8
	// succ:  l000000000001ABE8
l000000000001AAD8:
	r4 = Mem0[r3 + 0x0000000000000010:word64]
	r3 = 0x0000000000000000
l000000000001ABE8:
	lo = r1 / sp
	hi = r1 % sp
	r1 = r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r2 = (word64) Mem0[r3 + 0x000000000000000C:uint32]
	Mem0[sp + 0x0000000000000010:word64] = r2
	r1 = Mem0[sp + 0x0000000000000028:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x0000000000000018:word64]
	r22 = Mem0[r3:word64]
	r1 = Mem0[r22:word64]
	call r1 (retsize: 0;)
	r7 = Mem0[sp + 0x0000000000000030:word64]
	r6 = Mem0[sp + 0x0000000000000018:word64]
	r2 = (word64) Mem0[r7 + 0x0000000000000009:byte]
l000000000001AD14:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mapaccess1_fast32_exit
runtime.mapaccess1_fast32_exit:


// runtime.mapaccess2_fast32
// Return size: 0
void runtime.mapaccess2_fast32()
runtime.mapaccess2_fast32_entry:
	// succ:  l000000000001AD38
l000000000001AD38:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001AD38_ds_t
	// succ:  l000000000001AD38_ds_f l000000000001AD38_ds_t
l000000000001AD38_ds_f:
	goto l000000000001AD48
	// succ:  l000000000001AD48
l000000000001AD38_ds_t:
	goto l000000000001AD5C
	// succ:  l000000000001AD5C
l000000000001AD48:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001AD38
	// succ:  l000000000001AD38
l000000000001AD5C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000030:word64]
	r1 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l000000000001AD5C_ds_t
	// succ:  l000000000001AD5C_ds_f l000000000001AD5C_ds_t
l000000000001AD5C_ds_f:
	goto l000000000001AD74
	// succ:  l000000000001AD74
l000000000001AD5C_ds_t:
	goto l000000000001B034
	// succ:  l000000000001B034
l000000000001AD74:
	r1 = Mem0[r3:word64]
	branch r1 == 0x0000000000000000 l000000000001AD74_ds_t
	// succ:  l000000000001AD74_ds_f l000000000001AD74_ds_t
l000000000001AD74_ds_f:
	goto l000000000001AD80
	// succ:  l000000000001AD80
l000000000001AD74_ds_t:
	goto l000000000001B034
	// succ:  l000000000001B034
l000000000001AD80:
	r1 = (word64) Mem0[r3 + 0x0000000000000008:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l000000000001AD80_ds_t
	// succ:  l000000000001AD80_ds_f l000000000001AD80_ds_t
l000000000001AD80_ds_f:
	goto l000000000001ADA8
	// succ:  l000000000001ADA8
l000000000001AD80_ds_t:
	goto l000000000001ADCC
	// succ:  l000000000001ADCC
l000000000001ADA8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000001ADCC:
	r1 = (word64) Mem0[r3 + 0x0000000000000009:byte]
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000001ADCC_ds_t
	// succ:  l000000000001ADCC_ds_f l000000000001ADCC_ds_t
l000000000001ADCC_ds_f:
	goto l000000000001ADE4
	// succ:  l000000000001ADE4
l000000000001ADCC_ds_t:
	goto l000000000001AF08
	// succ:  l000000000001AF08
l000000000001ADE4:
	r4 = Mem0[r3 + 0x0000000000000010:word64]
	r3 = 0x0000000000000000
l000000000001AF08:
	lo = r1 / sp
	hi = r1 % sp
	r1 = r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r2 = (word64) Mem0[r3 + 0x000000000000000C:uint32]
	Mem0[sp + 0x0000000000000010:word64] = r2
	r1 = Mem0[sp + 0x0000000000000028:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x0000000000000018:word64]
	r22 = Mem0[r3:word64]
	r1 = Mem0[r22:word64]
	call r1 (retsize: 0;)
	r7 = Mem0[sp + 0x0000000000000030:word64]
	r6 = Mem0[sp + 0x0000000000000018:word64]
	r2 = (word64) Mem0[r7 + 0x0000000000000009:byte]
l000000000001B034:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000040:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mapaccess2_fast32_exit
runtime.mapaccess2_fast32_exit:


// runtime.getitab
// Return size: 0
void runtime.getitab()
runtime.getitab_entry:
	// succ:  l000000000001B060
l000000000001B060:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -152
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000001B060_ds_t
	// succ:  l000000000001B060_ds_f l000000000001B060_ds_t
l000000000001B060_ds_f:
	goto l000000000001B074
	// succ:  l000000000001B074
l000000000001B060_ds_t:
	goto l000000000001B088
	// succ:  l000000000001B088
l000000000001B074:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001B060
	// succ:  l000000000001B060
l000000000001B088:
	sp = sp + -152
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x00000000000000A0:word64]
	r3 = Mem0[r4 + 0x0000000000000040:word64]
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000001B088_ds_t
	// succ:  l000000000001B088_ds_f l000000000001B088_ds_t
l000000000001B088_ds_f:
	goto l000000000001B0A4
	// succ:  l000000000001B0A4
l000000000001B088_ds_t:
	goto l000000000001B6E4
	// succ:  l000000000001B6E4
l000000000001B0A4:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000001B0C8:
	r1 = Mem0[sp + 0x00000000000000A8:word64]
	r1 = (word64) Mem0[r1 + 0x0000000000000014:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000001B0C8_ds_t
	// succ:  l000000000001B0C8_ds_f l000000000001B0C8_ds_t
l000000000001B0C8_ds_f:
	goto l000000000001B0F4
	// succ:  l000000000001B0F4
l000000000001B0C8_ds_t:
	goto l000000000001B2D0
	// succ:  l000000000001B2D0
l000000000001B0F4:
	r1 = (word64) Mem0[sp + 0x00000000000000B0:byte]
	branch r1 == 0x0000000000000000 l000000000001B0F4_ds_t
	// succ:  l000000000001B0F4_ds_f l000000000001B0F4_ds_t
l000000000001B0F4_ds_f:
	goto l000000000001B100
	// succ:  l000000000001B100
l000000000001B0F4_ds_t:
	goto l000000000001B114
	// succ:  l000000000001B114
l000000000001B100:
	Mem0[sp + 0x00000000000000B8:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 152
	call r4 (retsize: 0;)
	return
	// succ:  runtime.getitab_exit
l000000000001B114:
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000001B114_ds_t
	// succ:  l000000000001B114_ds_f l000000000001B114_ds_t
l000000000001B114_ds_f:
	goto l000000000001B124
	// succ:  l000000000001B124
l000000000001B114_ds_t:
	goto l000000000001B128
	// succ:  l000000000001B128
l000000000001B124:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001B128
l000000000001B128:
	r1 = r4
	branch r4 != 0x0000000000000000 l000000000001B128_ds_t
	// succ:  l000000000001B128_ds_f l000000000001B128_ds_t
l000000000001B128_ds_f:
	goto l000000000001B134
	// succ:  l000000000001B134
l000000000001B128_ds_t:
	goto l000000000001B138
	// succ:  l000000000001B138
l000000000001B134:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001B138
l000000000001B138:
	r4 = Mem0[r4 + 0x0000000000000038:word64]
	r3 = Mem0[r1 + 0x0000000000000040:word64]
	r2 = Mem0[r1 + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000090:word64] = r2
	r1 = r4
	Mem0[sp + 0x0000000000000080:word64] = r4
	Mem0[sp + 0x0000000000000088:word64] = r3
	r2 = r3
	r3 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r2)
	branch r23 != 0x0000000000000000 l000000000001B138_ds_t
	// succ:  l000000000001B138_ds_f l000000000001B138_ds_t
l000000000001B138_ds_f:
	goto l000000000001B168
	// succ:  l000000000001B168
l000000000001B138_ds_t:
	goto l000000000001B174
	// succ:  l000000000001B174
l000000000001B168:
	call runtime.panicindex (retsize: 0;)
l000000000001B174:
	r2 = (word64) Mem0[r4:int32]
	Mem0[sp + 0x0000000000000010:word32] = (word32) r2
	call runtime.(*_type).nameOff (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r1 = Mem0[sp + 0x00000000000000A8:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.(*_type).string (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000070:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000078:word64] = r1
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000001B174_ds_t
	// succ:  l000000000001B174_ds_f l000000000001B174_ds_t
l000000000001B174_ds_f:
	goto l000000000001B1C0
	// succ:  l000000000001B1C0
l000000000001B174_ds_t:
	goto l000000000001B1C4
	// succ:  l000000000001B1C4
l000000000001B1C0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001B1C4
l000000000001B1C4:
	call runtime.(*_type).string (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000060:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000068:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.name.name (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000050:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.newobject (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[r5:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000008:word64] = 0x0000000000000000
	r1 = r5
	Mem0[sp + 0x0000000000000048:word64] = r5
	r2 = Mem0[sp + 0x0000000000000078:word64]
	Mem0[r5 + 0x0000000000000018:word64] = r2
	r2 = Mem0[sp + 0x0000000000000070:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000001B1C4_ds_t
	// succ:  l000000000001B1C4_ds_f l000000000001B1C4_ds_t
l000000000001B1C4_ds_f:
	goto l000000000001B24C
	// succ:  l000000000001B24C
l000000000001B1C4_ds_t:
	goto l000000000001B6C4
	// succ:  l000000000001B6C4
l000000000001B24C:
	Mem0[r1 + 0x0000000000000010:word64] = r2
	goto l000000000001B250
	// succ:  l000000000001B250
l000000000001B24C_ds_f:
	goto l000000000001B278
	// succ:  l000000000001B278
l000000000001B24C_ds_t:
	goto l000000000001B6A4
	// succ:  l000000000001B6A4
l000000000001B250:
	r1 = r5
	r2 = Mem0[sp + 0x0000000000000068:word64]
	Mem0[r5 + 0x0000000000000028:word64] = r2
	r2 = Mem0[sp + 0x0000000000000060:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000001B24C_ds_t
	goto l000000000001B24C_ds_f
	// succ:  l000000000001B24C_ds_f l000000000001B24C_ds_t
l000000000001B278:
	Mem0[r1 + 0x0000000000000020:word64] = r2
	goto l000000000001B27C
	// succ:  l000000000001B27C
l000000000001B278_ds_f:
	goto l000000000001B2A4
	// succ:  l000000000001B2A4
l000000000001B278_ds_t:
	goto l000000000001B684
	// succ:  l000000000001B684
l000000000001B27C:
	r1 = r5
	r2 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[r5 + 0x0000000000000038:word64] = r2
	r2 = Mem0[sp + 0x0000000000000050:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000001B278_ds_t
	goto l000000000001B278_ds_f
	// succ:  l000000000001B278_ds_f l000000000001B278_ds_t
l000000000001B2A4:
	Mem0[r1 + 0x0000000000000030:word64] = r2
	// succ:  l000000000001B2A8
l000000000001B2A8:
	r3 = r5
	r2 = 0x0000000000090000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = r5
	Mem0[sp + 0x0000000000000010:word64] = r5
	call runtime.gopanic (retsize: 0;)
l000000000001B2D0:
	r5 = Mem0[sp + 0x00000000000000A8:word64]
l000000000001B684:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000048:word64]
	goto l000000000001B2A8
	// succ:  l000000000001B2A8
l000000000001B6A4:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000048:word64]
	goto l000000000001B27C
	// succ:  l000000000001B27C
l000000000001B6C4:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000048:word64]
	goto l000000000001B250
	// succ:  l000000000001B250
l000000000001B6E4:
	goto l000000000001B0C8
	// succ:  l000000000001B0C8
runtime.getitab_exit:


// runtime.additab
// Return size: 0
void runtime.additab()
runtime.additab_entry:
	// succ:  l000000000001B6F0
l000000000001B6F0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -304
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000001B6F0_ds_t
	// succ:  l000000000001B6F0_ds_f l000000000001B6F0_ds_t
l000000000001B6F0_ds_f:
	goto l000000000001B704
	// succ:  l000000000001B704
l000000000001B6F0_ds_t:
	goto l000000000001B718
	// succ:  l000000000001B718
l000000000001B704:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001B6F0
	// succ:  l000000000001B6F0
l000000000001B718:
	sp = sp + -304
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000138:word64]
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000090:word64] = r2
	r3 = Mem0[r3 + 0x0000000000000008:word64]
	r1 = r3
	r2 = r3
	Mem0[sp + 0x0000000000000060:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.(*_type).uncommon (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000010:word64]
	r1 = Mem0[sp + 0x0000000000000090:word64]
	r2 = Mem0[r1 + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000040:word64] = r2
	r5 = (word64) Mem0[r4 + 0x0000000000000004:uint16]
	Mem0[sp + 0x0000000000000058:word64] = r4
	r3 = (word64) Mem0[r4 + 0x0000000000000008:uint32]
	lo = r1 / r4
	hi = r1 % r4
	r3 = r1
	Mem0[sp + 0x0000000000000038:word64] = r5
	r1 = r5
	r2 = 0x0000000000010000
	r23 = (word64) (r2 <u r5)
	branch r23 != 0x0000000000000000 l000000000001B718_ds_t
	// succ:  l000000000001B718_ds_f l000000000001B718_ds_t
l000000000001B718_ds_f:
	goto l000000000001B784
	// succ:  l000000000001B784
l000000000001B718_ds_t:
	goto l000000000001BF9C
	// succ:  l000000000001BF9C
l000000000001B784:
	branch r3 != 0x0000000000000000 l000000000001B784_ds_t
	// succ:  l000000000001B784_ds_f l000000000001B784_ds_t
l000000000001B784_ds_f:
	goto l000000000001B78C
	// succ:  l000000000001B78C
l000000000001B784_ds_t:
	goto l000000000001B790
	// succ:  l000000000001B790
l000000000001B78C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001B790
l000000000001B790:
	Mem0[sp + 0x0000000000000108:word64] = r1
	Mem0[sp + 0x0000000000000110:word64] = r1
	Mem0[sp + 0x0000000000000100:word64] = r3
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	r3 = 0x0000000000000000
	r2 = Mem0[sp + 0x0000000000000040:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l000000000001B790_ds_t
	// succ:  l000000000001B790_ds_f l000000000001B790_ds_t
l000000000001B790_ds_f:
	goto l000000000001B7B4
	// succ:  l000000000001B7B4
l000000000001B790_ds_t:
	goto l000000000001BB8C
	// succ:  l000000000001BB8C
l000000000001B7B4:
	r1 = Mem0[sp + 0x0000000000000090:word64]
	branch r1 != 0x0000000000000000 l000000000001B7B4_ds_t
	// succ:  l000000000001B7B4_ds_f l000000000001B7B4_ds_t
l000000000001B7B4_ds_f:
	goto l000000000001B7C0
	// succ:  l000000000001B7C0
l000000000001B7B4_ds_t:
	goto l000000000001B7C4
	// succ:  l000000000001B7C4
l000000000001B7C0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001B7C4
l000000000001B7C4:
	r5 = Mem0[r1 + 0x0000000000000038:word64]
	r4 = Mem0[r1 + 0x0000000000000040:word64]
	r2 = Mem0[r1 + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000128:word64] = r2
	r1 = r5
	Mem0[sp + 0x0000000000000118:word64] = r5
	Mem0[sp + 0x0000000000000048:word64] = r3
	r2 = r3
	Mem0[sp + 0x0000000000000120:word64] = r4
	r3 = r4
	r23 = (word64) (r2 <u r4)
	branch r23 != 0x0000000000000000 l000000000001B7C4_ds_t
	// succ:  l000000000001B7C4_ds_f l000000000001B7C4_ds_t
l000000000001B7C4_ds_f:
	goto l000000000001B7F8
	// succ:  l000000000001B7F8
l000000000001B7C4_ds_t:
	goto l000000000001B804
	// succ:  l000000000001B804
l000000000001B7F8:
	call runtime.panicindex (retsize: 0;)
l000000000001B804:
l000000000001BB8C:
	r1 = (word64) Mem0[sp + 0x0000000000000140:byte]
	branch r1 != 0x0000000000000000 l000000000001BB8C_ds_t
	// succ:  l000000000001BB8C_ds_f l000000000001BB8C_ds_t
l000000000001BB8C_ds_f:
	goto l000000000001BB98
	// succ:  l000000000001BB98
l000000000001BB8C_ds_t:
	goto l000000000001BBB8
	// succ:  l000000000001BBB8
l000000000001BB98:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000001BBB8:
	r2 = Mem0[sp + 0x0000000000000090:word64]
	r4 = Mem0[sp + 0x0000000000000060:word64]
l000000000001BF9C:
	call runtime.panicslice (retsize: 0;)
runtime.additab_exit:


// runtime.itabsinit
// Return size: 0
void runtime.itabsinit()
runtime.itabsinit_entry:
	// succ:  l000000000001BFB0
l000000000001BFB0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001BFB0_ds_t
	// succ:  l000000000001BFB0_ds_f l000000000001BFB0_ds_t
l000000000001BFB0_ds_f:
	goto l000000000001BFC0
	// succ:  l000000000001BFC0
l000000000001BFB0_ds_t:
	goto l000000000001BFD4
	// succ:  l000000000001BFD4
l000000000001BFC0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001BFB0
	// succ:  l000000000001BFB0
l000000000001BFD4:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r5 = 0x00000000000D0000
	lo = r5 / r5
	hi = r5 % r5
	lo = r5 / r5
	hi = r5 % r5
	r2 = 0x0000000000000000
	branch r5 == 0x0000000000000000 l000000000001BFD4_ds_t
	// succ:  l000000000001BFD4_ds_f l000000000001BFD4_ds_t
l000000000001BFD4_ds_f:
	goto l000000000001C00C
	// succ:  l000000000001C00C
l000000000001BFD4_ds_t:
	goto l000000000001C0BC
	// succ:  l000000000001C0BC
l000000000001C00C:
	Mem0[sp + 0x0000000000000028:word64] = r5
	branch r5 != 0x0000000000000000 l000000000001C00C_ds_t
	// succ:  l000000000001C00C_ds_f l000000000001C00C_ds_t
l000000000001C00C_ds_f:
	goto l000000000001C018
	// succ:  l000000000001C018
l000000000001C00C_ds_t:
	goto l000000000001C01C
	// succ:  l000000000001C01C
l000000000001C018:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001C01C
l000000000001C01C:
	r6 = Mem0[r5 + 0x00000000000000F0:word64]
	r3 = Mem0[r5 + 0x00000000000000F8:word64]
	r2 = Mem0[r5 + 0x0000000000000100:word64]
	Mem0[sp + 0x0000000000000048:word64] = r2
	r4 = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word64] = r3
	Mem0[sp + 0x0000000000000018:word64] = r3
	Mem0[sp + 0x0000000000000038:word64] = r6
	r3 = r6
	r2 = Mem0[sp + 0x0000000000000018:word64]
	r23 = (word64) (r4 < r2)
	branch r23 == 0x0000000000000000 l000000000001C01C_ds_t
	// succ:  l000000000001C01C_ds_f l000000000001C01C_ds_t
l000000000001C01C_ds_f:
	goto l000000000001C050
	// succ:  l000000000001C050
l000000000001C01C_ds_t:
	goto l000000000001C0AC
	// succ:  l000000000001C0AC
l000000000001C050:
	Mem0[sp + 0x0000000000000030:word64] = r3
	r3 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000020:word64] = r4
	r2 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000010:byte] = (byte) r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000011:byte] = (byte) r1
	call runtime.additab (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000028:word64]
	r3 = Mem0[sp + 0x0000000000000030:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r3 / r3
	hi = r3 % r3
	r4 = Mem0[sp + 0x0000000000000020:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l000000000001C0AC:
	r5 = Mem0[r5 + 0x0000000000000158:word64]
	r2 = 0x0000000000000000
	branch r5 != 0x0000000000000000 l000000000001C0AC_ds_t
	// succ:  l000000000001C0AC_ds_f l000000000001C0AC_ds_t
l000000000001C0AC_ds_f:
	goto l000000000001C0BC
	// succ:  l000000000001C0BC
l000000000001C0AC_ds_t:
	goto l000000000001C00C
	// succ:  l000000000001C00C
l000000000001C0BC:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.itabsinit_exit runtime.itabsinit_exit
runtime.itabsinit_exit:


// runtime.convT2E
// Return size: 0
void runtime.convT2E()
runtime.convT2E_entry:
	// succ:  l000000000001C0E8
l000000000001C0E8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001C0E8_ds_t
	// succ:  l000000000001C0E8_ds_f l000000000001C0E8_ds_t
l000000000001C0E8_ds_f:
	goto l000000000001C0F8
	// succ:  l000000000001C0F8
l000000000001C0E8_ds_t:
	goto l000000000001C10C
	// succ:  l000000000001C10C
l000000000001C0F8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001C0E8
	// succ:  l000000000001C0E8
l000000000001C10C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r2 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000001C10C_ds_t
	// succ:  l000000000001C10C_ds_f l000000000001C10C_ds_t
l000000000001C10C_ds_f:
	goto l000000000001C14C
	// succ:  l000000000001C14C
l000000000001C10C_ds_t:
	goto l000000000001C1EC
	// succ:  l000000000001C1EC
l000000000001C14C:
	r2 = 0x0000000000000000
	goto l000000000001C150
	// succ:  l000000000001C150
l000000000001C14C_ds_f:
	goto l000000000001C164
	// succ:  l000000000001C164
l000000000001C14C_ds_t:
	goto l000000000001C184
	// succ:  l000000000001C184
l000000000001C150:
	r1 = r2 + 0x00000000000000FF
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000001C14C_ds_t
	goto l000000000001C14C_ds_f
	// succ:  l000000000001C14C_ds_f l000000000001C14C_ds_t
l000000000001C164:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000001C184:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000001C184_ds_t
	// succ:  l000000000001C184_ds_f l000000000001C184_ds_t
l000000000001C184_ds_f:
	goto l000000000001C194
	// succ:  l000000000001C194
l000000000001C184_ds_t:
	goto l000000000001C1AC
	// succ:  l000000000001C1AC
l000000000001C194:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.newobject (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	// succ:  l000000000001C1AC
l000000000001C1AC:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.typedmemmove (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000050:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.convT2E_exit
l000000000001C1EC:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l000000000001C150
	// succ:  l000000000001C150
runtime.convT2E_exit:


// runtime.convT2I
// Return size: 0
void runtime.convT2I()
runtime.convT2I_entry:
	// succ:  l000000000001C200
l000000000001C200:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001C200_ds_t
	// succ:  l000000000001C200_ds_f l000000000001C200_ds_t
l000000000001C200_ds_f:
	goto l000000000001C210
	// succ:  l000000000001C210
l000000000001C200_ds_t:
	goto l000000000001C224
	// succ:  l000000000001C224
l000000000001C210:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001C200
	// succ:  l000000000001C200
l000000000001C224:
	sp = sp + -48
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000028:word64] = r3
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r3 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000001C224_ds_t
	// succ:  l000000000001C224_ds_f l000000000001C224_ds_t
l000000000001C224_ds_f:
	goto l000000000001C26C
	// succ:  l000000000001C26C
l000000000001C224_ds_t:
	goto l000000000001C310
	// succ:  l000000000001C310
l000000000001C26C:
	r2 = 0x0000000000000000
	goto l000000000001C270
	// succ:  l000000000001C270
l000000000001C26C_ds_f:
	goto l000000000001C284
	// succ:  l000000000001C284
l000000000001C26C_ds_t:
	goto l000000000001C2A8
	// succ:  l000000000001C2A8
l000000000001C270:
	r1 = r2 + 0x00000000000000FF
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000001C26C_ds_t
	goto l000000000001C26C_ds_f
	// succ:  l000000000001C26C_ds_f l000000000001C26C_ds_t
l000000000001C284:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000001C2A8:
	r1 = Mem0[sp + 0x0000000000000048:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000001C2A8_ds_t
	// succ:  l000000000001C2A8_ds_f l000000000001C2A8_ds_t
l000000000001C2A8_ds_f:
	goto l000000000001C2B8
	// succ:  l000000000001C2B8
l000000000001C2A8_ds_t:
	goto l000000000001C2D4
	// succ:  l000000000001C2D4
l000000000001C2B8:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.newobject (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000028:word64]
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	// succ:  l000000000001C2D4
l000000000001C2D4:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.typedmemmove (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000050:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.convT2I_exit
l000000000001C310:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l000000000001C270
	// succ:  l000000000001C270
runtime.convT2I_exit:


// runtime.assertI2T
// Return size: 0
void runtime.assertI2T()
runtime.assertI2T_entry:
	// succ:  l000000000001C320
l000000000001C320:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001C320_ds_t
	// succ:  l000000000001C320_ds_f l000000000001C320_ds_t
l000000000001C320_ds_f:
	goto l000000000001C330
	// succ:  l000000000001C330
l000000000001C320_ds_t:
	goto l000000000001C344
	// succ:  l000000000001C344
l000000000001C330:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001C320
	// succ:  l000000000001C320
l000000000001C344:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000078:word64]
	r5 = Mem0[sp + 0x0000000000000080:word64]
	r3 = Mem0[sp + 0x0000000000000068:word64]
	r4 = Mem0[sp + 0x0000000000000070:word64]
	r2 = 0x0000000000000000
	branch r4 != 0x0000000000000000 l000000000001C344_ds_t
	// succ:  l000000000001C344_ds_f l000000000001C344_ds_t
l000000000001C344_ds_f:
	goto l000000000001C368
	// succ:  l000000000001C368
l000000000001C344_ds_t:
	goto l000000000001C414
	// succ:  l000000000001C414
l000000000001C368:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.(*_type).string (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000050:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.newobject (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[r5:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000010:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000018:word64] = 0x0000000000000000
	r1 = r5
	Mem0[sp + 0x0000000000000028:word64] = r5
	r2 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[r5 + 0x0000000000000028:word64] = r2
	r2 = Mem0[sp + 0x0000000000000050:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000001C368_ds_t
	// succ:  l000000000001C368_ds_f l000000000001C368_ds_t
l000000000001C368_ds_f:
	goto l000000000001C3E0
	// succ:  l000000000001C3E0
l000000000001C368_ds_t:
	goto l000000000001C674
	// succ:  l000000000001C674
l000000000001C3E0:
	Mem0[r1 + 0x0000000000000020:word64] = r2
	// succ:  l000000000001C3E4
l000000000001C3E4:
	Mem0[r5 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000038:word64] = 0x0000000000000000
	r3 = r5
	r2 = 0x0000000000090000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = r5
	Mem0[sp + 0x0000000000000010:word64] = r5
	call runtime.gopanic (retsize: 0;)
l000000000001C414:
	r1 = Mem0[r4 + 0x0000000000000008:word64]
	branch r1 == r3 l000000000001C414_ds_t
	// succ:  l000000000001C414_ds_f l000000000001C414_ds_t
l000000000001C414_ds_f:
	goto l000000000001C420
	// succ:  l000000000001C420
l000000000001C414_ds_t:
	goto l000000000001C56C
	// succ:  l000000000001C56C
l000000000001C420:
	Mem0[sp + 0x0000000000000020:word64] = r4
	r2 = Mem0[r4:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000001C420_ds_t
	// succ:  l000000000001C420_ds_f l000000000001C420_ds_t
l000000000001C420_ds_f:
	goto l000000000001C438
	// succ:  l000000000001C438
l000000000001C420_ds_t:
	goto l000000000001C43C
	// succ:  l000000000001C43C
l000000000001C438:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001C43C
l000000000001C43C:
	call runtime.(*_type).string (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000050:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r2 = Mem0[r1 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.(*_type).string (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r1 = Mem0[sp + 0x0000000000000068:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.(*_type).string (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000030:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.newobject (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r1 = r5
	Mem0[sp + 0x0000000000000028:word64] = r5
	r2 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[r5 + 0x0000000000000008:word64] = r2
	r2 = Mem0[sp + 0x0000000000000050:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000001C43C_ds_t
	// succ:  l000000000001C43C_ds_f l000000000001C43C_ds_t
l000000000001C43C_ds_f:
	goto l000000000001C4E0
	// succ:  l000000000001C4E0
l000000000001C43C_ds_t:
	goto l000000000001C654
	// succ:  l000000000001C654
l000000000001C4E0:
	Mem0[r1:word64] = r2
	goto l000000000001C4E4
	// succ:  l000000000001C4E4
l000000000001C4E0_ds_f:
	goto l000000000001C50C
	// succ:  l000000000001C50C
l000000000001C4E0_ds_t:
	goto l000000000001C634
	// succ:  l000000000001C634
l000000000001C4E4:
	r1 = r5
	r2 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[r5 + 0x0000000000000018:word64] = r2
	r2 = Mem0[sp + 0x0000000000000040:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000001C4E0_ds_t
	goto l000000000001C4E0_ds_f
	// succ:  l000000000001C4E0_ds_f l000000000001C4E0_ds_t
l000000000001C50C:
	Mem0[r1 + 0x0000000000000010:word64] = r2
	goto l000000000001C510
	// succ:  l000000000001C510
l000000000001C50C_ds_f:
	goto l000000000001C538
	// succ:  l000000000001C538
l000000000001C50C_ds_t:
	goto l000000000001C614
	// succ:  l000000000001C614
l000000000001C510:
	r1 = r5
	r2 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[r5 + 0x0000000000000028:word64] = r2
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000001C50C_ds_t
	goto l000000000001C50C_ds_f
	// succ:  l000000000001C50C_ds_f l000000000001C50C_ds_t
l000000000001C538:
	Mem0[r1 + 0x0000000000000020:word64] = r2
	// succ:  l000000000001C53C
l000000000001C53C:
	Mem0[r5 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000038:word64] = 0x0000000000000000
	r3 = r5
	r2 = 0x0000000000090000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = r5
	Mem0[sp + 0x0000000000000010:word64] = r5
	call runtime.gopanic (retsize: 0;)
l000000000001C56C:
	branch r5 == 0x0000000000000000 l000000000001C56C_ds_t
	// succ:  l000000000001C56C_ds_f l000000000001C56C_ds_t
l000000000001C56C_ds_f:
	goto l000000000001C574
	// succ:  l000000000001C574
l000000000001C56C_ds_t:
	goto l000000000001C5CC
	// succ:  l000000000001C5CC
l000000000001C574:
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r3 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000001C574_ds_t
	// succ:  l000000000001C574_ds_f l000000000001C574_ds_t
l000000000001C574_ds_f:
	goto l000000000001C5A0
	// succ:  l000000000001C5A0
l000000000001C574_ds_t:
	goto l000000000001C604
	// succ:  l000000000001C604
l000000000001C5A0:
	r2 = 0x0000000000000000
	goto l000000000001C5A4
	// succ:  l000000000001C5A4
l000000000001C5A0_ds_f:
	goto l000000000001C5B8
	// succ:  l000000000001C5B8
l000000000001C5A0_ds_t:
	goto l000000000001C5DC
	// succ:  l000000000001C5DC
l000000000001C5A4:
	r1 = r2 + 0x00000000000000FF
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000001C5A0_ds_t
	goto l000000000001C5A0_ds_f
	// succ:  l000000000001C5A0_ds_f l000000000001C5A0_ds_t
l000000000001C5B8:
	Mem0[sp + 0x0000000000000008:word64] = r5
	r1 = r6
	Mem0[sp + 0x0000000000000010:word64] = r6
	call runtime.writebarrierptr (retsize: 0;)
l000000000001C5CC:
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.assertI2T_exit
l000000000001C5DC:
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r5
	r1 = r6
	Mem0[sp + 0x0000000000000018:word64] = r6
	call runtime.typedmemmove (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.assertI2T_exit
l000000000001C604:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l000000000001C5A4
	// succ:  l000000000001C5A4
l000000000001C614:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000028:word64]
	goto l000000000001C53C
	// succ:  l000000000001C53C
l000000000001C634:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000028:word64]
	goto l000000000001C510
	// succ:  l000000000001C510
l000000000001C654:
	r3 = r5
	Mem0[sp + 0x0000000000000008:word64] = r5
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000028:word64]
	goto l000000000001C4E4
	// succ:  l000000000001C4E4
l000000000001C674:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000028:word64]
	goto l000000000001C3E4
	// succ:  l000000000001C3E4
runtime.assertI2T_exit:


// runtime.assertE2T2
// Return size: 0
void runtime.assertE2T2()
runtime.assertE2T2_entry:
	// succ:  l000000000001C698
l000000000001C698:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001C698_ds_t
	// succ:  l000000000001C698_ds_f l000000000001C698_ds_t
l000000000001C698_ds_f:
	goto l000000000001C6A8
	// succ:  l000000000001C6A8
l000000000001C698_ds_t:
	goto l000000000001C6BC
	// succ:  l000000000001C6BC
l000000000001C6A8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001C698
	// succ:  l000000000001C698
l000000000001C6BC:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = Mem0[sp + 0x0000000000000028:word64]
	r1 = 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006991:byte]
	branch r1 == 0x0000000000000000 l000000000001C6BC_ds_t
	// succ:  l000000000001C6BC_ds_f l000000000001C6BC_ds_t
l000000000001C6BC_ds_f:
	goto l000000000001C6E4
	// succ:  l000000000001C6E4
l000000000001C6BC_ds_t:
	goto l000000000001C6F4
	// succ:  l000000000001C6F4
l000000000001C6E4:
	call runtime.GC (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = Mem0[sp + 0x0000000000000028:word64]
	// succ:  l000000000001C6F4
l000000000001C6F4:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	branch r1 == r3 l000000000001C6F4_ds_t
	// succ:  l000000000001C6F4_ds_f l000000000001C6F4_ds_t
l000000000001C6F4_ds_f:
	goto l000000000001C700
	// succ:  l000000000001C700
l000000000001C6F4_ds_t:
	goto l000000000001C730
	// succ:  l000000000001C730
l000000000001C700:
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = r3
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.memclr (retsize: 0;)
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.assertE2T2_exit
l000000000001C730:
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r3 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000001C730_ds_t
	// succ:  l000000000001C730_ds_f l000000000001C730_ds_t
l000000000001C730_ds_f:
	goto l000000000001C75C
	// succ:  l000000000001C75C
l000000000001C730_ds_t:
	goto l000000000001C7D8
	// succ:  l000000000001C7D8
l000000000001C75C:
	r2 = 0x0000000000000000
	goto l000000000001C760
	// succ:  l000000000001C760
l000000000001C75C_ds_f:
	goto l000000000001C774
	// succ:  l000000000001C774
l000000000001C75C_ds_t:
	goto l000000000001C7A4
	// succ:  l000000000001C7A4
l000000000001C760:
	r1 = r2 + 0x00000000000000FF
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000001C75C_ds_t
	goto l000000000001C75C_ds_f
	// succ:  l000000000001C75C_ds_f l000000000001C75C_ds_t
l000000000001C774:
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000048:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.assertE2T2_exit
l000000000001C7A4:
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r4
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.typedmemmove (retsize: 0;)
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000048:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.assertE2T2_exit
l000000000001C7D8:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l000000000001C760
	// succ:  l000000000001C760
runtime.assertE2T2_exit:


// runtime.convI2E
// Return size: 0
void runtime.convI2E()
runtime.convI2E_entry:
	// succ:  l000000000001C7E8
l000000000001C7E8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001C7E8_ds_t
	// succ:  l000000000001C7E8_ds_f l000000000001C7E8_ds_t
l000000000001C7E8_ds_f:
	goto l000000000001C7F8
	// succ:  l000000000001C7F8
l000000000001C7E8_ds_t:
	goto l000000000001C80C
	// succ:  l000000000001C80C
l000000000001C7F8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001C7E8
	// succ:  l000000000001C7E8
l000000000001C80C:
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	r3 = Mem0[sp + 0x0000000000000008:word64]
	branch r3 != 0x0000000000000000 l000000000001C80C_ds_t
	// succ:  l000000000001C80C_ds_f l000000000001C80C_ds_t
l000000000001C80C_ds_f:
	goto l000000000001C820
	// succ:  l000000000001C820
l000000000001C80C_ds_t:
	goto l000000000001C828
	// succ:  l000000000001C828
l000000000001C820:
	return
	// succ:  runtime.convI2E_exit
l000000000001C828:
	r2 = Mem0[r3 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	return
	// succ:  runtime.convI2E_exit
runtime.convI2E_exit:


// runtime.assertE2I
// Return size: 0
void runtime.assertE2I()
runtime.assertE2I_entry:
	// succ:  l000000000001C840
l000000000001C840:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001C840_ds_t
	// succ:  l000000000001C840_ds_f l000000000001C840_ds_t
l000000000001C840_ds_f:
	goto l000000000001C850
	// succ:  l000000000001C850
l000000000001C840_ds_t:
	goto l000000000001C864
	// succ:  l000000000001C864
l000000000001C850:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001C840
	// succ:  l000000000001C840
l000000000001C864:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000048:word64]
	r3 = Mem0[sp + 0x0000000000000050:word64]
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000001C864_ds_t
	// succ:  l000000000001C864_ds_f l000000000001C864_ds_t
l000000000001C864_ds_f:
	goto l000000000001C880
	// succ:  l000000000001C880
l000000000001C864_ds_t:
	goto l000000000001C938
	// succ:  l000000000001C938
l000000000001C880:
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000001C880_ds_t
	// succ:  l000000000001C880_ds_f l000000000001C880_ds_t
l000000000001C880_ds_f:
	goto l000000000001C890
	// succ:  l000000000001C890
l000000000001C880_ds_t:
	goto l000000000001C894
	// succ:  l000000000001C894
l000000000001C890:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001C894
l000000000001C894:
	call runtime.(*_type).string (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000030:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.newobject (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[r5:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000010:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000018:word64] = 0x0000000000000000
	r1 = r5
	Mem0[sp + 0x0000000000000028:word64] = r5
	r2 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[r5 + 0x0000000000000028:word64] = r2
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000001C894_ds_t
	// succ:  l000000000001C894_ds_f l000000000001C894_ds_t
l000000000001C894_ds_f:
	goto l000000000001C904
	// succ:  l000000000001C904
l000000000001C894_ds_t:
	goto l000000000001CA00
	// succ:  l000000000001CA00
l000000000001C904:
	Mem0[r1 + 0x0000000000000020:word64] = r2
	// succ:  l000000000001C908
l000000000001C908:
	Mem0[r5 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000038:word64] = 0x0000000000000000
	r3 = r5
	r2 = 0x0000000000090000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = r5
	Mem0[sp + 0x0000000000000010:word64] = r5
	call runtime.gopanic (retsize: 0;)
l000000000001C938:
	Mem0[sp + 0x0000000000000008:word64] = r4
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	call runtime.getitab (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000060:word64]
	branch r1 != 0x0000000000000000 l000000000001C938_ds_t
	// succ:  l000000000001C938_ds_f l000000000001C938_ds_t
l000000000001C938_ds_f:
	goto l000000000001C960
	// succ:  l000000000001C960
l000000000001C938_ds_t:
	goto l000000000001C964
	// succ:  l000000000001C964
l000000000001C960:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001C964
l000000000001C964:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000001C964_ds_t
	// succ:  l000000000001C964_ds_f l000000000001C964_ds_t
l000000000001C964_ds_f:
	goto l000000000001C97C
	// succ:  l000000000001C97C
l000000000001C964_ds_t:
	goto l000000000001C9E4
	// succ:  l000000000001C9E4
l000000000001C97C:
	Mem0[r1:word64] = r2
	goto l000000000001C980
	// succ:  l000000000001C980
l000000000001C97C_ds_f:
	goto l000000000001C98C
	// succ:  l000000000001C98C
l000000000001C97C_ds_t:
	goto l000000000001C990
	// succ:  l000000000001C990
l000000000001C980:
	r1 = Mem0[sp + 0x0000000000000060:word64]
	branch r1 != 0x0000000000000000 l000000000001C97C_ds_t
	goto l000000000001C97C_ds_f
	// succ:  l000000000001C97C_ds_f l000000000001C97C_ds_t
l000000000001C98C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001C990
l000000000001C990:
	r2 = Mem0[sp + 0x0000000000000058:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000001C990_ds_t
	// succ:  l000000000001C990_ds_f l000000000001C990_ds_t
l000000000001C990_ds_f:
	goto l000000000001C9AC
	// succ:  l000000000001C9AC
l000000000001C990_ds_t:
	goto l000000000001C9C0
	// succ:  l000000000001C9C0
l000000000001C9AC:
	Mem0[r1 + 0x0000000000000008:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 64
	call r4 (retsize: 0;)
	return
	// succ:  runtime.assertE2I_exit
l000000000001C9C0:
	lo = r3 / r1
	hi = r3 % r1
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 64
	call r4 (retsize: 0;)
	return
	// succ:  runtime.assertE2I_exit
l000000000001C9E4:
	r3 = r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	goto l000000000001C980
	// succ:  l000000000001C980
l000000000001CA00:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000028:word64]
	goto l000000000001C908
	// succ:  l000000000001C908
runtime.assertE2I_exit:


// runtime.assertE2I2
// Return size: 0
void runtime.assertE2I2()
runtime.assertE2I2_entry:
	// succ:  l000000000001CA20
l000000000001CA20:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001CA20_ds_t
	// succ:  l000000000001CA20_ds_f l000000000001CA20_ds_t
l000000000001CA20_ds_f:
	goto l000000000001CA30
	// succ:  l000000000001CA30
l000000000001CA20_ds_t:
	goto l000000000001CA44
	// succ:  l000000000001CA44
l000000000001CA30:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001CA20
	// succ:  l000000000001CA20
l000000000001CA44:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006992:byte]
	branch r1 == 0x0000000000000000 l000000000001CA44_ds_t
	// succ:  l000000000001CA44_ds_f l000000000001CA44_ds_t
l000000000001CA44_ds_f:
	goto l000000000001CA64
	// succ:  l000000000001CA64
l000000000001CA44_ds_t:
	goto l000000000001CA6C
	// succ:  l000000000001CA6C
l000000000001CA64:
	call runtime.GC (retsize: 0;)
l000000000001CA6C:
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000001CA6C_ds_t
	// succ:  l000000000001CA6C_ds_f l000000000001CA6C_ds_t
l000000000001CA6C_ds_f:
	goto l000000000001CA7C
	// succ:  l000000000001CA7C
l000000000001CA6C_ds_t:
	goto l000000000001CAAC
	// succ:  l000000000001CAAC
l000000000001CA7C:
	r1 = Mem0[sp + 0x0000000000000048:word64]
	branch r1 == 0x0000000000000000 l000000000001CA7C_ds_t
	// succ:  l000000000001CA7C_ds_f l000000000001CA7C_ds_t
l000000000001CA7C_ds_f:
	goto l000000000001CA88
	// succ:  l000000000001CA88
l000000000001CA7C_ds_t:
	goto l000000000001CA94
	// succ:  l000000000001CA94
l000000000001CA88:
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[r1:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000008:word64] = 0x0000000000000000
	// succ:  l000000000001CA94
l000000000001CA94:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.assertE2I2_exit
l000000000001CAAC:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	call runtime.getitab (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000048:word64]
	r3 = Mem0[sp + 0x0000000000000020:word64]
	branch r3 != 0x0000000000000000 l000000000001CAAC_ds_t
	// succ:  l000000000001CAAC_ds_f l000000000001CAAC_ds_t
l000000000001CAAC_ds_f:
	goto l000000000001CADC
	// succ:  l000000000001CADC
l000000000001CAAC_ds_t:
	goto l000000000001CB04
	// succ:  l000000000001CB04
l000000000001CADC:
	branch r5 == 0x0000000000000000 l000000000001CADC_ds_t
	// succ:  l000000000001CADC_ds_f l000000000001CADC_ds_t
l000000000001CADC_ds_f:
	goto l000000000001CAE4
	// succ:  l000000000001CAE4
l000000000001CADC_ds_t:
	goto l000000000001CAEC
	// succ:  l000000000001CAEC
l000000000001CAE4:
	Mem0[r5:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000008:word64] = 0x0000000000000000
	// succ:  l000000000001CAEC
l000000000001CAEC:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.assertE2I2_exit
l000000000001CB04:
	branch r5 == 0x0000000000000000 l000000000001CB04_ds_t
	// succ:  l000000000001CB04_ds_f l000000000001CB04_ds_t
l000000000001CB04_ds_f:
	goto l000000000001CB0C
	// succ:  l000000000001CB0C
l000000000001CB04_ds_t:
	goto l000000000001CB6C
	// succ:  l000000000001CB6C
l000000000001CB0C:
	r1 = r5
	branch r5 != 0x0000000000000000 l000000000001CB0C_ds_t
	// succ:  l000000000001CB0C_ds_f l000000000001CB0C_ds_t
l000000000001CB0C_ds_f:
	goto l000000000001CB18
	// succ:  l000000000001CB18
l000000000001CB0C_ds_t:
	goto l000000000001CB1C
	// succ:  l000000000001CB1C
l000000000001CB18:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001CB1C
l000000000001CB1C:
	r2 = r3
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000001CB1C_ds_t
	// succ:  l000000000001CB1C_ds_f l000000000001CB1C_ds_t
l000000000001CB1C_ds_f:
	goto l000000000001CB38
	// succ:  l000000000001CB38
l000000000001CB1C_ds_t:
	goto l000000000001CBB8
	// succ:  l000000000001CBB8
l000000000001CB38:
	Mem0[r1:word64] = r2
	goto l000000000001CB3C
	// succ:  l000000000001CB3C
l000000000001CB38_ds_f:
	goto l000000000001CB48
	// succ:  l000000000001CB48
l000000000001CB38_ds_t:
	goto l000000000001CB4C
	// succ:  l000000000001CB4C
l000000000001CB3C:
	r1 = r5
	branch r5 != 0x0000000000000000 l000000000001CB38_ds_t
	goto l000000000001CB38_ds_f
	// succ:  l000000000001CB38_ds_f l000000000001CB38_ds_t
l000000000001CB48:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001CB4C
l000000000001CB4C:
	r2 = Mem0[sp + 0x0000000000000040:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000001CB4C_ds_t
	// succ:  l000000000001CB4C_ds_f l000000000001CB4C_ds_t
l000000000001CB4C_ds_f:
	goto l000000000001CB68
	// succ:  l000000000001CB68
l000000000001CB4C_ds_t:
	goto l000000000001CB88
	// succ:  l000000000001CB88
l000000000001CB68:
	Mem0[r1 + 0x0000000000000008:word64] = r2
	// succ:  l000000000001CB6C
l000000000001CB6C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000050:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.assertE2I2_exit
l000000000001CB88:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000050:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.assertE2I2_exit
l000000000001CBB8:
	r3 = r5
	Mem0[sp + 0x0000000000000008:word64] = r5
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000048:word64]
	goto l000000000001CB3C
	// succ:  l000000000001CB3C
runtime.assertE2I2_exit:


// runtime.lfstackpush
// Return size: 0
void runtime.lfstackpush()
runtime.lfstackpush_entry:
	// succ:  l000000000001CBD8
l000000000001CBD8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001CBD8_ds_t
	// succ:  l000000000001CBD8_ds_f l000000000001CBD8_ds_t
l000000000001CBD8_ds_f:
	goto l000000000001CBE8
	// succ:  l000000000001CBE8
l000000000001CBD8_ds_t:
	goto l000000000001CBFC
	// succ:  l000000000001CBFC
l000000000001CBE8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001CBD8
	// succ:  l000000000001CBD8
l000000000001CBFC:
	sp = sp + -72
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000058:word64]
	r2 = Mem0[r4 + 0x0000000000000008:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4 + 0x0000000000000008:word64] = r2
	r2 = Mem0[r4 + 0x0000000000000008:word64]
runtime.lfstackpush_exit:


// runtime.lfstackpop
// Return size: 0
void runtime.lfstackpop()
runtime.lfstackpop_entry:
	// succ:  l000000000001CDD8
l000000000001CDD8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001CDD8_ds_t
	// succ:  l000000000001CDD8_ds_f l000000000001CDD8_ds_t
l000000000001CDD8_ds_f:
	goto l000000000001CDE8
	// succ:  l000000000001CDE8
l000000000001CDD8_ds_t:
	goto l000000000001CDFC
	// succ:  l000000000001CDFC
l000000000001CDE8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001CDD8
	// succ:  l000000000001CDD8
l000000000001CDFC:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load64 (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	branch r3 != 0x0000000000000000 l000000000001CDFC_ds_t
	// succ:  l000000000001CDFC_ds_f l000000000001CDFC_ds_t
l000000000001CDFC_ds_f:
	goto l000000000001CE20
	// succ:  l000000000001CE20
l000000000001CDFC_ds_t:
	goto l000000000001CE34
	// succ:  l000000000001CE34
l000000000001CE20:
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.lfstackpop_exit
l000000000001CE34:
	Mem0[sp + 0x0000000000000028:word64] = r3
runtime.lfstackpop_exit:


// runtime.lock
// Return size: 0
void runtime.lock()
runtime.lock_entry:
	// succ:  l000000000001CEC0
l000000000001CEC0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001CEC0_ds_t
	// succ:  l000000000001CEC0_ds_f l000000000001CEC0_ds_t
l000000000001CEC0_ds_f:
	goto l000000000001CED0
	// succ:  l000000000001CED0
l000000000001CEC0_ds_t:
	goto l000000000001CEE4
	// succ:  l000000000001CEE4
l000000000001CED0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001CEC0
	// succ:  l000000000001CEC0
l000000000001CEE4:
	sp = sp + -72
	Mem0[sp:word64] = ra
	r3 = r30
	Mem0[sp + 0x0000000000000040:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 == 0x0000000000000000 l000000000001CEE4_ds_t
	// succ:  l000000000001CEE4_ds_f l000000000001CEE4_ds_t
l000000000001CEE4_ds_f:
	goto l000000000001CF14
	// succ:  l000000000001CF14
l000000000001CEE4_ds_t:
	goto l000000000001CF38
	// succ:  l000000000001CF38
l000000000001CF14:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000001CF38:
	r1 = Mem0[r3 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r4 = r2
	r2 = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r2 = Mem0[sp + 0x0000000000000050:word64]
	branch r2 != 0x0000000000000000 l000000000001CF38_ds_t
	// succ:  l000000000001CF38_ds_f l000000000001CF38_ds_t
l000000000001CF38_ds_f:
	goto l000000000001CF68
	// succ:  l000000000001CF68
l000000000001CF38_ds_t:
	goto l000000000001CF6C
	// succ:  l000000000001CF6C
l000000000001CF68:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001CF6C
l000000000001CF6C:
	Mem0[sp + 0x0000000000000008:word64] = r2
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
runtime.lock_exit:


// runtime.unlock
// Return size: 0
void runtime.unlock()
runtime.unlock_entry:
	// succ:  l000000000001D238
l000000000001D238:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001D238_ds_t
	// succ:  l000000000001D238_ds_f l000000000001D238_ds_t
l000000000001D238_ds_f:
	goto l000000000001D248
	// succ:  l000000000001D248
l000000000001D238_ds_t:
	goto l000000000001D25C
	// succ:  l000000000001D25C
l000000000001D248:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001D238
	// succ:  l000000000001D238
l000000000001D25C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r2 = Mem0[sp + 0x0000000000000038:word64]
	branch r2 != 0x0000000000000000 l000000000001D25C_ds_t
	// succ:  l000000000001D25C_ds_f l000000000001D25C_ds_t
l000000000001D25C_ds_f:
	goto l000000000001D270
	// succ:  l000000000001D270
l000000000001D25C_ds_t:
	goto l000000000001D274
	// succ:  l000000000001D274
l000000000001D270:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001D274
l000000000001D274:
	Mem0[sp + 0x0000000000000008:word64] = r2
runtime.unlock_exit:


// runtime.notewakeup
// Return size: 0
void runtime.notewakeup()
runtime.notewakeup_entry:
	// succ:  l000000000001D3F0
l000000000001D3F0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001D3F0_ds_t
	// succ:  l000000000001D3F0_ds_f l000000000001D3F0_ds_t
l000000000001D3F0_ds_f:
	goto l000000000001D400
	// succ:  l000000000001D400
l000000000001D3F0_ds_t:
	goto l000000000001D414
	// succ:  l000000000001D414
l000000000001D400:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001D3F0
	// succ:  l000000000001D3F0
l000000000001D414:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r2 = Mem0[sp + 0x0000000000000030:word64]
	branch r2 != 0x0000000000000000 l000000000001D414_ds_t
	// succ:  l000000000001D414_ds_f l000000000001D414_ds_t
l000000000001D414_ds_f:
	goto l000000000001D428
	// succ:  l000000000001D428
l000000000001D414_ds_t:
	goto l000000000001D42C
	// succ:  l000000000001D42C
l000000000001D428:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001D42C
l000000000001D42C:
	Mem0[sp + 0x0000000000000008:word64] = r2
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
runtime.notewakeup_exit:


// runtime.notesleep
// Return size: 0
void runtime.notesleep()
runtime.notesleep_entry:
	// succ:  l000000000001D540
l000000000001D540:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001D540_ds_t
	// succ:  l000000000001D540_ds_f l000000000001D540_ds_t
l000000000001D540_ds_f:
	goto l000000000001D550
	// succ:  l000000000001D550
l000000000001D540_ds_t:
	goto l000000000001D564
	// succ:  l000000000001D564
l000000000001D550:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001D540
	// succ:  l000000000001D540
l000000000001D564:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r3 = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	Mem0[sp + 0x0000000000000020:word64] = r30
	r2 = r30
	branch r1 == r30 l000000000001D564_ds_t
	// succ:  l000000000001D564_ds_f l000000000001D564_ds_t
l000000000001D564_ds_f:
	goto l000000000001D588
	// succ:  l000000000001D588
l000000000001D564_ds_t:
	goto l000000000001D5A8
	// succ:  l000000000001D5A8
l000000000001D588:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000001D5A8:
	r2 = Mem0[sp + 0x0000000000000030:word64]
	branch r2 != 0x0000000000000000 l000000000001D5A8_ds_t
	// succ:  l000000000001D5A8_ds_f l000000000001D5A8_ds_t
l000000000001D5A8_ds_f:
	goto l000000000001D5B4
	// succ:  l000000000001D5B4
l000000000001D5A8_ds_t:
	goto l000000000001D5B8
	// succ:  l000000000001D5B8
l000000000001D5B4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001D5B8
l000000000001D5B8:
	r1 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime/internal/atomic.Load (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.notesleep_exit:


// runtime.notetsleep_internal
// Return size: 0
void runtime.notetsleep_internal()
runtime.notetsleep_internal_entry:
	// succ:  l000000000001D668
l000000000001D668:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = r30
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r23 = (word64) (r1 < 0x0000000000000000)
	branch r23 == 0x0000000000000000 l000000000001D668_ds_t
	// succ:  l000000000001D668_ds_f l000000000001D668_ds_t
l000000000001D668_ds_f:
	goto l000000000001D688
	// succ:  l000000000001D688
l000000000001D668_ds_t:
	goto l000000000001D754
	// succ:  l000000000001D754
l000000000001D688:
	r2 = Mem0[sp + 0x0000000000000038:word64]
	branch r2 != 0x0000000000000000 l000000000001D688_ds_t
	// succ:  l000000000001D688_ds_f l000000000001D688_ds_t
l000000000001D688_ds_f:
	goto l000000000001D694
	// succ:  l000000000001D694
l000000000001D688_ds_t:
	goto l000000000001D698
	// succ:  l000000000001D698
l000000000001D694:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001D698
l000000000001D698:
	r1 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime/internal/atomic.Load (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
l000000000001D754:
	r2 = Mem0[sp + 0x0000000000000038:word64]
	branch r2 != 0x0000000000000000 l000000000001D754_ds_t
	// succ:  l000000000001D754_ds_f l000000000001D754_ds_t
l000000000001D754_ds_f:
	goto l000000000001D760
	// succ:  l000000000001D760
l000000000001D754_ds_t:
	goto l000000000001D764
	// succ:  l000000000001D764
l000000000001D760:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001D764
l000000000001D764:
	r1 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime/internal/atomic.Load (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.notetsleep_internal_exit:


// runtime.notetsleep
// Return size: 0
void runtime.notetsleep()
runtime.notetsleep_entry:
	// succ:  l000000000001D940
l000000000001D940:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001D940_ds_t
	// succ:  l000000000001D940_ds_f l000000000001D940_ds_t
l000000000001D940_ds_f:
	goto l000000000001D950
	// succ:  l000000000001D950
l000000000001D940_ds_t:
	goto l000000000001D964
	// succ:  l000000000001D964
l000000000001D950:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001D940
	// succ:  l000000000001D940
l000000000001D964:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r3 = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	r2 = r30
	branch r1 == r30 l000000000001D964_ds_t
	// succ:  l000000000001D964_ds_f l000000000001D964_ds_t
l000000000001D964_ds_f:
	goto l000000000001D988
	// succ:  l000000000001D988
l000000000001D964_ds_t:
	goto l000000000001D9BC
	// succ:  l000000000001D9BC
l000000000001D988:
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000D8:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000001D988_ds_t
	// succ:  l000000000001D988_ds_f l000000000001D988_ds_t
l000000000001D988_ds_f:
	goto l000000000001D99C
	// succ:  l000000000001D99C
l000000000001D988_ds_t:
	goto l000000000001D9BC
	// succ:  l000000000001D9BC
l000000000001D99C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000001D9BC:
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.notetsleep_internal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000038:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.notetsleep_exit
runtime.notetsleep_exit:


// runtime.notetsleepg
// Return size: 0
void runtime.notetsleepg()
runtime.notetsleepg_entry:
	// succ:  l000000000001D9F8
l000000000001D9F8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001D9F8_ds_t
	// succ:  l000000000001D9F8_ds_f l000000000001D9F8_ds_t
l000000000001D9F8_ds_f:
	goto l000000000001DA08
	// succ:  l000000000001DA08
l000000000001D9F8_ds_t:
	goto l000000000001DA1C
	// succ:  l000000000001DA1C
l000000000001DA08:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001D9F8
	// succ:  l000000000001D9F8
l000000000001DA1C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r3 = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	r2 = r30
	branch r1 != r30 l000000000001DA1C_ds_t
	// succ:  l000000000001DA1C_ds_f l000000000001DA1C_ds_t
l000000000001DA1C_ds_f:
	goto l000000000001DA40
	// succ:  l000000000001DA40
l000000000001DA1C_ds_t:
	goto l000000000001DA60
	// succ:  l000000000001DA60
l000000000001DA40:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000001DA60:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.entersyscallblock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.notetsleep_internal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	Mem0[sp + 0x0000000000000020:byte] = (byte) r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.exitsyscall (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.notetsleepg_exit
runtime.notetsleepg_exit:


// runtime.mallocinit
// Return size: 0
void runtime.mallocinit()
runtime.mallocinit_entry:
	// succ:  l000000000001DAB8
l000000000001DAB8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -264
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000001DAB8_ds_t
	// succ:  l000000000001DAB8_ds_f l000000000001DAB8_ds_t
l000000000001DAB8_ds_f:
	goto l000000000001DACC
	// succ:  l000000000001DACC
l000000000001DAB8_ds_t:
	goto l000000000001DAE0
	// succ:  l000000000001DAE0
l000000000001DACC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001DAB8
	// succ:  l000000000001DAB8
l000000000001DAE0:
	sp = sp + -264
	Mem0[sp:word64] = ra
	call runtime.initSizes (retsize: 0;)
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006438:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 == r2 l000000000001DAE0_ds_t
	// succ:  l000000000001DAE0_ds_f l000000000001DAE0_ds_t
l000000000001DAE0_ds_f:
	goto l000000000001DB14
	// succ:  l000000000001DB14
l000000000001DAE0_ds_t:
	goto l000000000001DB34
	// succ:  l000000000001DB34
l000000000001DB14:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000001DB34:
	r5 = 0x0000000000000000
	Mem0[sp + 0x0000000000000060:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	r7 = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	// succ:  l000000000001E074
l000000000001E074:
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011A0:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.mallocinit_exit:


// runtime.(*mheap).sysAlloc
// Return size: 0
void runtime.(*mheap).sysAlloc()
runtime.(*mheap).sysAlloc_entry:
	// succ:  l000000000001E1C0
l000000000001E1C0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -136
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000001E1C0_ds_t
	// succ:  l000000000001E1C0_ds_f l000000000001E1C0_ds_t
l000000000001E1C0_ds_f:
	goto l000000000001E1D4
	// succ:  l000000000001E1D4
l000000000001E1C0_ds_t:
	goto l000000000001E1E8
	// succ:  l000000000001E1E8
l000000000001E1D4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001E1C0
	// succ:  l000000000001E1C0
l000000000001E1E8:
	sp = sp + -136
	Mem0[sp:word64] = ra
	r7 = Mem0[sp + 0x0000000000000098:word64]
	r5 = Mem0[sp + 0x0000000000000090:word64]
	branch r5 != 0x0000000000000000 l000000000001E1E8_ds_t
	// succ:  l000000000001E1E8_ds_f l000000000001E1E8_ds_t
l000000000001E1E8_ds_f:
	goto l000000000001E200
	// succ:  l000000000001E200
l000000000001E1E8_ds_t:
	goto l000000000001E204
	// succ:  l000000000001E204
l000000000001E200:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001E204
l000000000001E204:
	r1 = Mem0[r5 + 0x00000000000012C0:word64]
	r2 = Mem0[r5 + 0x00000000000012B8:word64]
runtime.(*mheap).sysAlloc_exit:


// runtime.(*mcache).nextFree
// Return size: 0
void runtime.(*mcache).nextFree()
runtime.(*mcache).nextFree_entry:
	// succ:  l000000000001E880
l000000000001E880:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001E880_ds_t
	// succ:  l000000000001E880_ds_f l000000000001E880_ds_t
l000000000001E880_ds_f:
	goto l000000000001E890
	// succ:  l000000000001E890
l000000000001E880_ds_t:
	goto l000000000001E8A4
	// succ:  l000000000001E8A4
l000000000001E890:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001E880
	// succ:  l000000000001E880
l000000000001E8A4:
	sp = sp + -72
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000050:word64]
	branch r1 != 0x0000000000000000 l000000000001E8A4_ds_t
	// succ:  l000000000001E8A4_ds_f l000000000001E8A4_ds_t
l000000000001E8A4_ds_f:
	goto l000000000001E8C0
	// succ:  l000000000001E8C0
l000000000001E8A4_ds_t:
	goto l000000000001E8C4
	// succ:  l000000000001E8C4
l000000000001E8C0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000001E8C4
l000000000001E8C4:
	lo = r2 / r1
	hi = r2 % r1
	r1 = (word64) Mem0[sp + 0x0000000000000058:int8]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r1 <u r3)
	branch r23 != 0x0000000000000000 l000000000001E8C4_ds_t
	// succ:  l000000000001E8C4_ds_f l000000000001E8C4_ds_t
l000000000001E8C4_ds_f:
	goto l000000000001E8DC
	// succ:  l000000000001E8DC
l000000000001E8C4_ds_t:
	goto l000000000001E8E8
	// succ:  l000000000001E8E8
l000000000001E8DC:
	call runtime.panicindex (retsize: 0;)
l000000000001E8E8:
runtime.(*mcache).nextFree_exit:


// runtime.mallocgc
// Return size: 0
void runtime.mallocgc()
runtime.mallocgc_entry:
	// succ:  l000000000001EBF8
l000000000001EBF8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -208
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000001EBF8_ds_t
	// succ:  l000000000001EBF8_ds_f l000000000001EBF8_ds_t
l000000000001EBF8_ds_f:
	goto l000000000001EC0C
	// succ:  l000000000001EC0C
l000000000001EBF8_ds_t:
	goto l000000000001EC20
	// succ:  l000000000001EC20
l000000000001EC0C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001EBF8
	// succ:  l000000000001EBF8
l000000000001EC20:
	sp = sp + -208
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006978:uint32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.mallocgc_exit:


// runtime.largeAlloc
// Return size: 0
void runtime.largeAlloc()
runtime.largeAlloc_entry:
	// succ:  l000000000001FB88
l000000000001FB88:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001FB88_ds_t
	// succ:  l000000000001FB88_ds_f l000000000001FB88_ds_t
l000000000001FB88_ds_f:
	goto l000000000001FB98
	// succ:  l000000000001FB98
l000000000001FB88_ds_t:
	goto l000000000001FBAC
	// succ:  l000000000001FBAC
l000000000001FB98:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001FB88
	// succ:  l000000000001FB88
l000000000001FBAC:
	sp = sp + -72
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000050:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r2 = r4
	r23 = (word64) (r1 <u r4)
	branch r23 == 0x0000000000000000 l000000000001FBAC_ds_t
	// succ:  l000000000001FBAC_ds_f l000000000001FBAC_ds_t
l000000000001FBAC_ds_f:
	goto l000000000001FBD0
	// succ:  l000000000001FBD0
l000000000001FBAC_ds_t:
	goto l000000000001FBF4
	// succ:  l000000000001FBF4
l000000000001FBD0:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000001FBF4:
runtime.largeAlloc_exit:


// runtime.newobject
// Return size: 0
void runtime.newobject()
runtime.newobject_entry:
	// succ:  l000000000001FD28
l000000000001FD28:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001FD28_ds_t
	// succ:  l000000000001FD28_ds_f l000000000001FD28_ds_t
l000000000001FD28_ds_f:
	goto l000000000001FD38
	// succ:  l000000000001FD38
l000000000001FD28_ds_t:
	goto l000000000001FD4C
	// succ:  l000000000001FD4C
l000000000001FD38:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001FD28
	// succ:  l000000000001FD28
l000000000001FD4C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000030:word64]
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	call runtime.mallocgc (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.newobject_exit
runtime.newobject_exit:


// runtime.newarray
// Return size: 0
void runtime.newarray()
runtime.newarray_entry:
	// succ:  l000000000001FD90
l000000000001FD90:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001FD90_ds_t
	// succ:  l000000000001FD90_ds_f l000000000001FD90_ds_t
l000000000001FD90_ds_f:
	goto l000000000001FDA0
	// succ:  l000000000001FDA0
l000000000001FD90_ds_t:
	goto l000000000001FDB4
	// succ:  l000000000001FDB4
l000000000001FDA0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001FD90
	// succ:  l000000000001FD90
l000000000001FDB4:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000050:word64]
	r5 = Mem0[sp + 0x0000000000000048:word64]
	r2 = 0x0000000000000000
	r23 = (word64) (r6 < 0x0000000000000000)
	branch r23 != 0x0000000000000000 l000000000001FDB4_ds_t
	// succ:  l000000000001FDB4_ds_f l000000000001FDB4_ds_t
l000000000001FDB4_ds_f:
	goto l000000000001FDD4
	// succ:  l000000000001FDD4
l000000000001FDB4_ds_t:
	goto l000000000001FE74
	// succ:  l000000000001FE74
l000000000001FDD4:
	r4 = Mem0[r5:word64]
l000000000001FE74:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000030:word64] = r1
runtime.newarray_exit:


// runtime.profilealloc
// Return size: 0
void runtime.profilealloc()
runtime.profilealloc_entry:
	// succ:  l000000000001FF30
l000000000001FF30:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001FF30_ds_t
	// succ:  l000000000001FF30_ds_f l000000000001FF30_ds_t
l000000000001FF30_ds_f:
	goto l000000000001FF40
	// succ:  l000000000001FF40
l000000000001FF30_ds_t:
	goto l000000000001FF54
	// succ:  l000000000001FF54
l000000000001FF40:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001FF30
	// succ:  l000000000001FF30
l000000000001FF54:
	sp = sp + -24
	Mem0[sp:word64] = ra
	call runtime.nextSample (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000008:int32]
	r3 = r1
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r2 = Mem0[r1 + 0x0000000000000130:word64]
	r1 = r3
	Mem0[r2:word32] = (word32) r1
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.mProf_Malloc (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.profilealloc_exit
runtime.profilealloc_exit:


// runtime.nextSample
// Return size: 0
void runtime.nextSample()
runtime.nextSample_entry:
	// succ:  l000000000001FFA8
l000000000001FFA8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000001FFA8_ds_t
	// succ:  l000000000001FFA8_ds_f l000000000001FFA8_ds_t
l000000000001FFA8_ds_f:
	goto l000000000001FFB8
	// succ:  l000000000001FFB8
l000000000001FFA8_ds_t:
	goto l000000000001FFCC
	// succ:  l000000000001FFCC
l000000000001FFB8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000001FFA8
	// succ:  l000000000001FFA8
l000000000001FFCC:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000000018:word64]
	r2 = 0x0000000007000000
	r23 = (word64) (r2 < r3)
	branch r23 == 0x0000000000000000 l000000000001FFCC_ds_t
	// succ:  l000000000001FFCC_ds_f l000000000001FFCC_ds_t
l000000000001FFCC_ds_f:
	goto l000000000001FFF4
	// succ:  l000000000001FFF4
l000000000001FFCC_ds_t:
	goto l0000000000020284
	// succ:  l0000000000020284
l000000000001FFF4:
	r1 = 0x0000000007000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	// succ:  l000000000001FFFC
l000000000001FFFC:
	call runtime.fastrand1 (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000008:uint32]
l0000000000020284:
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = r3
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000020284_ds_t
	// succ:  l0000000000020284_ds_f l0000000000020284_ds_t
l0000000000020284_ds_f:
	goto l0000000000020298
	// succ:  l0000000000020298
l0000000000020284_ds_t:
	goto l000000000001FFFC
	// succ:  l000000000001FFFC
l0000000000020298:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word32] = (word32) r1
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.nextSample_exit
runtime.nextSample_exit:


// runtime.persistentalloc
// Return size: 0
void runtime.persistentalloc()
runtime.persistentalloc_entry:
	// succ:  l00000000000202B0
l00000000000202B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000202B0_ds_t
	// succ:  l00000000000202B0_ds_f l00000000000202B0_ds_t
l00000000000202B0_ds_f:
	goto l00000000000202C0
	// succ:  l00000000000202C0
l00000000000202B0_ds_t:
	goto l00000000000202D4
	// succ:  l00000000000202D4
l00000000000202C0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000202B0
	// succ:  l00000000000202B0
l00000000000202D4:
	sp = sp + -64
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	lo = r2 / sp
	hi = r2 % sp
	Mem0[r3 + 0x0000000000000008:word64] = r2
	r2 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[r3 + 0x0000000000000010:word64] = r2
	r2 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[r3 + 0x0000000000000018:word64] = r2
	r2 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[r3 + 0x0000000000000020:word64] = r2
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000060:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 64
	call r4 (retsize: 0;)
	return
	// succ:  runtime.persistentalloc_exit
runtime.persistentalloc_exit:


// runtime.persistentalloc1
// Return size: 0
void runtime.persistentalloc1()
runtime.persistentalloc1_entry:
	// succ:  l0000000000020340
l0000000000020340:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000018:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000020340_ds_t
	// succ:  l0000000000020340_ds_f l0000000000020340_ds_t
l0000000000020340_ds_f:
	goto l0000000000020350
	// succ:  l0000000000020350
l0000000000020340_ds_t:
	goto l0000000000020364
	// succ:  l0000000000020364
l0000000000020350:
	r3 = ra
	call runtime.morestackc (retsize: 0;)
	goto l0000000000020340
	// succ:  l0000000000020340
l0000000000020364:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000020364_ds_t
	// succ:  l0000000000020364_ds_f l0000000000020364_ds_t
l0000000000020364_ds_f:
	goto l000000000002037C
	// succ:  l000000000002037C
l0000000000020364_ds_t:
	goto l000000000002039C
	// succ:  l000000000002039C
l000000000002037C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000002039C:
	r1 = Mem0[sp + 0x0000000000000048:word64]
	branch r1 == 0x0000000000000000 l000000000002039C_ds_t
	// succ:  l000000000002039C_ds_f l000000000002039C_ds_t
l000000000002039C_ds_f:
	goto l00000000000203A8
	// succ:  l00000000000203A8
l000000000002039C_ds_t:
	goto l0000000000020790
	// succ:  l0000000000020790
l00000000000203A8:
	r1 = Mem0[sp + 0x0000000000000048:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l000000000002041C:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r2 = 0x0000000000010000
	r23 = (word64) (r1 <u r2)
	branch r23 != 0x0000000000000000 l000000000002041C_ds_t
	// succ:  l000000000002041C_ds_f l000000000002041C_ds_t
l000000000002041C_ds_f:
	goto l0000000000020430
	// succ:  l0000000000020430
l000000000002041C_ds_t:
	goto l0000000000020460
	// succ:  l0000000000020460
l0000000000020430:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.sysAlloc (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.persistentalloc1_exit
l0000000000020460:
	r4 = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r3 = Mem0[r30 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000030:word64] = r3
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000020460_ds_t
	// succ:  l0000000000020460_ds_f l0000000000020460_ds_t
l0000000000020460_ds_f:
	goto l00000000000204A0
	// succ:  l00000000000204A0
l0000000000020460_ds_t:
	goto l000000000002075C
	// succ:  l000000000002075C
l00000000000204A0:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r1 = Mem0[r1 + 0x00000000000000B0:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l00000000000204A0_ds_t
	// succ:  l00000000000204A0_ds_f l00000000000204A0_ds_t
l00000000000204A0_ds_f:
	goto l00000000000204B4
	// succ:  l00000000000204B4
l00000000000204A0_ds_t:
	goto l000000000002075C
	// succ:  l000000000002075C
l00000000000204B4:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r5 = Mem0[r1 + 0x00000000000000B0:word64]
	branch r5 != 0x0000000000000000 l00000000000204B4_ds_t
	// succ:  l00000000000204B4_ds_f l00000000000204B4_ds_t
l00000000000204B4_ds_f:
	goto l00000000000204C4
	// succ:  l00000000000204C4
l00000000000204B4_ds_t:
	goto l00000000000204C8
	// succ:  l00000000000204C8
l00000000000204C4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000204C8
l00000000000204C8:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r5 / r5
	hi = r5 % r5
	// succ:  l00000000000204D0
l00000000000204D0:
	r1 = Mem0[r5 + 0x0000000000000008:word64]
	r3 = Mem0[sp + 0x0000000000000048:word64]
	lo = r1 / r1
	hi = r1 % r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l000000000002075C:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r5 = 0x00000000000D0000
	lo = r5 / r5
	hi = r5 % r5
	lo = r5 / r5
	hi = r5 % r5
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r5 / r5
	hi = r5 % r5
	goto l00000000000204D0
	// succ:  l00000000000204D0
l0000000000020790:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000048:word64] = r1
	goto l000000000002041C
	// succ:  l000000000002041C
runtime.persistentalloc1_exit:


// runtime.gcmarkwb_m
// Return size: 0
void runtime.gcmarkwb_m()
runtime.gcmarkwb_m_entry:
	// succ:  l00000000000207A0
l00000000000207A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000207A0_ds_t
	// succ:  l00000000000207A0_ds_f l00000000000207A0_ds_t
l00000000000207A0_ds_f:
	goto l00000000000207B0
	// succ:  l00000000000207B0
l00000000000207A0_ds_t:
	goto l00000000000207C4
	// succ:  l00000000000207C4
l00000000000207B0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000207A0
	// succ:  l00000000000207A0
l00000000000207C4:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000020:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000067FF:byte]
	branch r1 == 0x0000000000000000 l00000000000207C4_ds_t
	// succ:  l00000000000207C4_ds_f l00000000000207C4_ds_t
l00000000000207C4_ds_f:
	goto l00000000000207E4
	// succ:  l00000000000207E4
l00000000000207C4_ds_t:
	goto l00000000000208E4
	// succ:  l00000000000208E4
l00000000000207E4:
	branch r6 == 0x0000000000000000 l00000000000207E4_ds_t
	// succ:  l00000000000207E4_ds_f l00000000000207E4_ds_t
l00000000000207E4_ds_f:
	goto l00000000000207EC
	// succ:  l00000000000207EC
l00000000000207E4_ds_t:
	goto l00000000000208E4
	// succ:  l00000000000208E4
l00000000000207EC:
	r4 = r6
	r1 = 0x0000000000000000
	branch r6 == 0x0000000000000000 l00000000000207EC_ds_t
	// succ:  l00000000000207EC_ds_f l00000000000207EC_ds_t
l00000000000207EC_ds_f:
	goto l00000000000207FC
	// succ:  l00000000000207FC
l00000000000207EC_ds_t:
	goto l0000000000020904
	// succ:  l0000000000020904
l00000000000207FC:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
	r23 = (word64) (r4 <u r1)
	branch r23 != 0x0000000000000000 l00000000000207FC_ds_t
	// succ:  l00000000000207FC_ds_f l00000000000207FC_ds_t
l00000000000207FC_ds_f:
	goto l0000000000020814
	// succ:  l0000000000020814
l00000000000207FC_ds_t:
	goto l0000000000020904
	// succ:  l0000000000020904
l0000000000020814:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F78:word64]
	r23 = (word64) (r4 <u r1)
	branch r23 == 0x0000000000000000 l0000000000020814_ds_t
	// succ:  l0000000000020814_ds_f l0000000000020814_ds_t
l0000000000020814_ds_f:
	goto l000000000002082C
	// succ:  l000000000002082C
l0000000000020814_ds_t:
	goto l0000000000020904
	// succ:  l0000000000020904
l000000000002082C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
l00000000000208C8:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l00000000000208C8_ds_t
	// succ:  l00000000000208C8_ds_f l00000000000208C8_ds_t
l00000000000208C8_ds_f:
	goto l00000000000208D4
	// succ:  l00000000000208D4
l00000000000208C8_ds_t:
	goto l00000000000208E4
	// succ:  l00000000000208E4
l00000000000208D4:
	r1 = r6
	Mem0[sp + 0x0000000000000008:word64] = r6
	call runtime.shade (retsize: 0;)
l00000000000208E4:
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcmarkwb_m_exit
l0000000000020904:
	r1 = 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l00000000000208C8
	// succ:  l00000000000208C8
runtime.gcmarkwb_m_exit:


// runtime.writebarrierptr_nostore1
// Return size: 0
void runtime.writebarrierptr_nostore1()
runtime.writebarrierptr_nostore1_entry:
	// succ:  l0000000000020918
l0000000000020918:
	sp = fp
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r4 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r4 + 0x00000000000000F6:byte]
	branch r1 != 0x0000000000000000 l0000000000020918_ds_t
	// succ:  l0000000000020918_ds_f l0000000000020918_ds_t
l0000000000020918_ds_f:
	goto l0000000000020954
	// succ:  l0000000000020954
l0000000000020918_ds_t:
	goto l0000000000020A14
	// succ:  l0000000000020A14
l0000000000020954:
	r1 = (word64) Mem0[r4 + 0x00000000000000E8:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 != 0x0000000000000000 l0000000000020954_ds_t
	// succ:  l0000000000020954_ds_f l0000000000020954_ds_t
l0000000000020954_ds_f:
	goto l0000000000020970
	// succ:  l0000000000020970
l0000000000020954_ds_t:
	goto l0000000000020A14
	// succ:  l0000000000020A14
l0000000000020970:
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r4
	Mem0[r3 + 0x0000000000000008:word64] = r4
	r2 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[r3 + 0x0000000000000010:word64] = r2
	r2 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[r3 + 0x0000000000000018:word64] = r2
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000010:word64]
	r2 = 0x0000000000000000
	Mem0[r4 + 0x00000000000000F6:byte] = (byte) r2
	r2 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r4 + 0x00000000000000E0:word32] = (word32) r2
	r1 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000020970_ds_t
	// succ:  l0000000000020970_ds_f l0000000000020970_ds_t
l0000000000020970_ds_f:
	goto l00000000000209F0
	// succ:  l00000000000209F0
l0000000000020970_ds_t:
	goto l0000000000020A04
	// succ:  l0000000000020A04
l00000000000209F0:
	r1 = (word64) Mem0[r30 + 0x00000000000000E8:byte]
	branch r1 == 0x0000000000000000 l00000000000209F0_ds_t
	// succ:  l00000000000209F0_ds_f l00000000000209F0_ds_t
l00000000000209F0_ds_f:
	goto l00000000000209FC
	// succ:  l00000000000209FC
l00000000000209F0_ds_t:
	goto l0000000000020A04
	// succ:  l0000000000020A04
l00000000000209FC:
l0000000000020A04:
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.writebarrierptr_nostore1_exit
l0000000000020A14:
	r2 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r4 + 0x00000000000000E0:word32] = (word32) r2
	r1 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000020A14_ds_t
	// succ:  l0000000000020A14_ds_f l0000000000020A14_ds_t
l0000000000020A14_ds_f:
	goto l0000000000020A4C
	// succ:  l0000000000020A4C
l0000000000020A14_ds_t:
	goto l0000000000020A60
	// succ:  l0000000000020A60
l0000000000020A4C:
	r1 = (word64) Mem0[r30 + 0x00000000000000E8:byte]
	branch r1 == 0x0000000000000000 l0000000000020A4C_ds_t
	// succ:  l0000000000020A4C_ds_f l0000000000020A4C_ds_t
l0000000000020A4C_ds_f:
	goto l0000000000020A58
	// succ:  l0000000000020A58
l0000000000020A4C_ds_t:
	goto l0000000000020A60
	// succ:  l0000000000020A60
l0000000000020A58:
l0000000000020A60:
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.writebarrierptr_nostore1_exit
runtime.writebarrierptr_nostore1_exit:


// runtime.writebarrierptr
// Return size: 0
void runtime.writebarrierptr()
runtime.writebarrierptr_entry:
	// succ:  l0000000000020A70
l0000000000020A70:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r2 = r4
	Mem0[r5:word64] = r4
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000067FE:byte]
	branch r1 == 0x0000000000000000 l0000000000020A70_ds_t
	// succ:  l0000000000020A70_ds_f l0000000000020A70_ds_t
l0000000000020A70_ds_f:
	goto l0000000000020A9C
	// succ:  l0000000000020A9C
l0000000000020A70_ds_t:
	goto l0000000000020AB8
	// succ:  l0000000000020AB8
l0000000000020A9C:
	Mem0[sp + 0x0000000000000008:word64] = r5
	r1 = r4
	Mem0[sp + 0x0000000000000010:word64] = r4
	call runtime.cgoCheckWriteBarrier (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r4 = Mem0[sp + 0x0000000000000040:word64]
	// succ:  l0000000000020AB8
l0000000000020AB8:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000067FF:byte]
	branch r1 != 0x0000000000000000 l0000000000020AB8_ds_t
	// succ:  l0000000000020AB8_ds_f l0000000000020AB8_ds_t
l0000000000020AB8_ds_f:
	goto l0000000000020ACC
	// succ:  l0000000000020ACC
l0000000000020AB8_ds_t:
	goto l0000000000020ADC
	// succ:  l0000000000020ADC
l0000000000020ACC:
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.writebarrierptr_exit
l0000000000020ADC:
	r2 = 0x0000000000000000
	branch r4 == 0x0000000000000000 l0000000000020ADC_ds_t
	// succ:  l0000000000020ADC_ds_f l0000000000020ADC_ds_t
l0000000000020ADC_ds_f:
	goto l0000000000020AE8
	// succ:  l0000000000020AE8
l0000000000020ADC_ds_t:
	goto l0000000000020B30
	// succ:  l0000000000020B30
l0000000000020AE8:
l0000000000020B30:
	Mem0[sp + 0x0000000000000008:word64] = r5
	r1 = r4
	Mem0[sp + 0x0000000000000010:word64] = r4
	call runtime.writebarrierptr_nostore1 (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.writebarrierptr_exit
runtime.writebarrierptr_exit:


// runtime.writebarrierptr_nostore
// Return size: 0
void runtime.writebarrierptr_nostore()
runtime.writebarrierptr_nostore_entry:
	// succ:  l0000000000020B58
l0000000000020B58:
	sp = fp
	sp = sp + -24
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000028:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000067FE:byte]
	branch r1 == 0x0000000000000000 l0000000000020B58_ds_t
	// succ:  l0000000000020B58_ds_f l0000000000020B58_ds_t
l0000000000020B58_ds_f:
	goto l0000000000020B78
	// succ:  l0000000000020B78
l0000000000020B58_ds_t:
	goto l0000000000020B94
	// succ:  l0000000000020B94
l0000000000020B78:
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.cgoCheckWriteBarrier (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000028:word64]
	// succ:  l0000000000020B94
l0000000000020B94:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000067FF:byte]
	branch r1 != 0x0000000000000000 l0000000000020B94_ds_t
	// succ:  l0000000000020B94_ds_f l0000000000020B94_ds_t
l0000000000020B94_ds_f:
	goto l0000000000020BA8
	// succ:  l0000000000020BA8
l0000000000020B94_ds_t:
	goto l0000000000020BB8
	// succ:  l0000000000020BB8
l0000000000020BA8:
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.writebarrierptr_nostore_exit
l0000000000020BB8:
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l0000000000020BB8_ds_t
	// succ:  l0000000000020BB8_ds_f l0000000000020BB8_ds_t
l0000000000020BB8_ds_f:
	goto l0000000000020BC4
	// succ:  l0000000000020BC4
l0000000000020BB8_ds_t:
	goto l0000000000020BF0
	// succ:  l0000000000020BF0
l0000000000020BC4:
l0000000000020BF0:
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.writebarrierptr_nostore1 (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.writebarrierptr_nostore_exit
runtime.writebarrierptr_nostore_exit:


// runtime.typedmemmove
// Return size: 0
void runtime.typedmemmove()
runtime.typedmemmove_entry:
	// succ:  l0000000000020C18
l0000000000020C18:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.memmove (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000067FE:byte]
	branch r1 == 0x0000000000000000 l0000000000020C18_ds_t
	// succ:  l0000000000020C18_ds_f l0000000000020C18_ds_t
l0000000000020C18_ds_f:
	goto l0000000000020C5C
	// succ:  l0000000000020C5C
l0000000000020C18_ds_t:
	goto l0000000000020C8C
	// succ:  l0000000000020C8C
l0000000000020C5C:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	r1 = r3
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000028:word64] = r2
	call runtime.cgoCheckMemmove (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000038:word64]
	// succ:  l0000000000020C8C
l0000000000020C8C:
	r1 = (word64) Mem0[r3 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l0000000000020C8C_ds_t
	// succ:  l0000000000020C8C_ds_f l0000000000020C8C_ds_t
l0000000000020C8C_ds_f:
	goto l0000000000020CB4
	// succ:  l0000000000020CB4
l0000000000020C8C_ds_t:
	goto l0000000000020CC4
	// succ:  l0000000000020CC4
l0000000000020CB4:
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typedmemmove_exit
l0000000000020CC4:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.heapBitsBulkBarrier (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typedmemmove_exit
runtime.typedmemmove_exit:


// runtime.callwritebarrier
// Return size: 0
void runtime.callwritebarrier()
runtime.callwritebarrier_entry:
	// succ:  l0000000000020CF0
l0000000000020CF0:
	sp = fp
	sp = sp + -24
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r5 = Mem0[sp + 0x0000000000000030:word64]
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000067FF:byte]
	branch r1 == 0x0000000000000000 l0000000000020CF0_ds_t
	// succ:  l0000000000020CF0_ds_f l0000000000020CF0_ds_t
l0000000000020CF0_ds_f:
	goto l0000000000020D18
	// succ:  l0000000000020D18
l0000000000020CF0_ds_t:
	goto l0000000000020D90
	// succ:  l0000000000020D90
l0000000000020D18:
	branch r3 == 0x0000000000000000 l0000000000020D18_ds_t
	// succ:  l0000000000020D18_ds_f l0000000000020D18_ds_t
l0000000000020D18_ds_f:
	goto l0000000000020D20
	// succ:  l0000000000020D20
l0000000000020D18_ds_t:
	goto l0000000000020D90
	// succ:  l0000000000020D90
l0000000000020D20:
	r1 = (word64) Mem0[r3 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000020D20_ds_t
	// succ:  l0000000000020D20_ds_f l0000000000020D20_ds_t
l0000000000020D20_ds_f:
	goto l0000000000020D48
	// succ:  l0000000000020D48
l0000000000020D20_ds_t:
	goto l0000000000020D90
	// succ:  l0000000000020D90
l0000000000020D48:
l0000000000020D90:
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.callwritebarrier_exit
runtime.callwritebarrier_exit:


// runtime.typedslicecopy
// Return size: 0
void runtime.typedslicecopy()
runtime.typedslicecopy_entry:
	// succ:  l0000000000020DA0
l0000000000020DA0:
	sp = fp
	sp = sp + -136
	Mem0[sp:word64] = ra
	r7 = Mem0[sp + 0x00000000000000A0:word64]
	r6 = Mem0[sp + 0x0000000000000098:word64]
	r5 = Mem0[sp + 0x00000000000000B0:word64]
	r3 = Mem0[sp + 0x00000000000000B8:word64]
	r4 = r7
	r23 = (word64) (r3 < r7)
	branch r23 == 0x0000000000000000 l0000000000020DA0_ds_t
	// succ:  l0000000000020DA0_ds_f l0000000000020DA0_ds_t
l0000000000020DA0_ds_f:
	goto l0000000000020DC8
	// succ:  l0000000000020DC8
l0000000000020DA0_ds_t:
	goto l0000000000020DCC
	// succ:  l0000000000020DCC
l0000000000020DC8:
	r4 = r3
	// succ:  l0000000000020DCC
l0000000000020DCC:
	r2 = 0x0000000000000000
	branch r4 != 0x0000000000000000 l0000000000020DCC_ds_t
	// succ:  l0000000000020DCC_ds_f l0000000000020DCC_ds_t
l0000000000020DCC_ds_f:
	goto l0000000000020DD8
	// succ:  l0000000000020DD8
l0000000000020DCC_ds_t:
	goto l0000000000020DEC
	// succ:  l0000000000020DEC
l0000000000020DD8:
	Mem0[sp + 0x00000000000000C8:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 136
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typedslicecopy_exit
l0000000000020DEC:
	Mem0[sp + 0x0000000000000058:word64] = r6
	Mem0[sp + 0x0000000000000050:word64] = r5
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000067FE:byte]
	branch r1 == 0x0000000000000000 l0000000000020DEC_ds_t
	// succ:  l0000000000020DEC_ds_f l0000000000020DEC_ds_t
l0000000000020DEC_ds_f:
	goto l0000000000020E08
	// succ:  l0000000000020E08
l0000000000020DEC_ds_t:
	goto l0000000000020E48
	// succ:  l0000000000020E48
l0000000000020E08:
	r1 = Mem0[sp + 0x0000000000000090:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r6
	Mem0[sp + 0x0000000000000018:word64] = r7
	r1 = Mem0[sp + 0x00000000000000A8:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	Mem0[sp + 0x0000000000000028:word64] = r5
	Mem0[sp + 0x0000000000000030:word64] = r3
	r1 = Mem0[sp + 0x00000000000000C0:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r1 = r4
	Mem0[sp + 0x0000000000000048:word64] = r4
	Mem0[sp + 0x0000000000000040:word64] = r4
	call runtime.cgoCheckSliceCopy (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000048:word64]
	// succ:  l0000000000020E48
l0000000000020E48:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000067FF:byte]
	branch r1 != 0x0000000000000000 l0000000000020E48_ds_t
	// succ:  l0000000000020E48_ds_f l0000000000020E48_ds_t
l0000000000020E48_ds_f:
	goto l0000000000020E5C
	// succ:  l0000000000020E5C
l0000000000020E48_ds_t:
	goto l0000000000020EA4
	// succ:  l0000000000020EA4
l0000000000020E5C:
	r1 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	Mem0[sp + 0x0000000000000048:word64] = r4
	r2 = Mem0[sp + 0x0000000000000090:word64]
	r2 = Mem0[r2:word64]
l0000000000020EA4:
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	lo = r2 / sp
	hi = r2 % sp
	Mem0[r3 + 0x0000000000000008:word64] = r2
	lo = r2 / sp
	hi = r2 % sp
	Mem0[r3 + 0x0000000000000010:word64] = r2
	Mem0[sp + 0x0000000000000048:word64] = r4
	Mem0[r3 + 0x0000000000000018:word64] = r4
	lo = r2 / sp
	hi = r2 % sp
	Mem0[r3 + 0x0000000000000020:word64] = r2
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x00000000000000C8:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 136
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typedslicecopy_exit
runtime.typedslicecopy_exit:


// runtime.(*mheap).mapBits
// Return size: 0
void runtime.(*mheap).mapBits()
runtime.(*mheap).mapBits_entry:
	// succ:  l0000000000020F00
l0000000000020F00:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000020F00_ds_t
	// succ:  l0000000000020F00_ds_f l0000000000020F00_ds_t
l0000000000020F00_ds_f:
	goto l0000000000020F10
	// succ:  l0000000000020F10
l0000000000020F00_ds_t:
	goto l0000000000020F24
	// succ:  l0000000000020F24
l0000000000020F10:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000020F00
	// succ:  l0000000000020F00
l0000000000020F24:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
	r2 = Mem0[sp + 0x0000000000000040:word64]
runtime.(*mheap).mapBits_exit:


// runtime.(*mspan).refillAllocCache
// Return size: 0
void runtime.(*mspan).refillAllocCache()
runtime.(*mspan).refillAllocCache_entry:
	// succ:  l0000000000021058
l0000000000021058:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000021058_ds_t
	// succ:  l0000000000021058_ds_f l0000000000021058_ds_t
l0000000000021058_ds_f:
	goto l0000000000021068
	// succ:  l0000000000021068
l0000000000021058_ds_t:
	goto l000000000002107C
	// succ:  l000000000002107C
l0000000000021068:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000021058
	// succ:  l0000000000021058
l000000000002107C:
	r5 = Mem0[sp + 0x0000000000000008:word64]
	r1 = Mem0[r5 + 0x0000000000000048:word64]
	r3 = Mem0[sp + 0x0000000000000010:word64]
	lo = r1 / r1
	hi = r1 % r1
	r3 = r1
	r4 = (word64) Mem0[r1:byte]
	r4 = r4
	r1 = (word64) Mem0[r1 + 0x0000000000000001:byte]
runtime.(*mspan).refillAllocCache_exit:


// runtime.(*mspan).nextFreeIndex
// Return size: 0
void runtime.(*mspan).nextFreeIndex()
runtime.(*mspan).nextFreeIndex_entry:
	// succ:  l0000000000021118
l0000000000021118:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000021118_ds_t
	// succ:  l0000000000021118_ds_f l0000000000021118_ds_t
l0000000000021118_ds_f:
	goto l0000000000021128
	// succ:  l0000000000021128
l0000000000021118_ds_t:
	goto l000000000002113C
	// succ:  l000000000002113C
l0000000000021128:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000021118
	// succ:  l0000000000021118
l000000000002113C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r8 = Mem0[r5 + 0x0000000000000030:word64]
	r7 = Mem0[r5 + 0x0000000000000038:word64]
	branch r8 != r7 l000000000002113C_ds_t
	// succ:  l000000000002113C_ds_f l000000000002113C_ds_t
l000000000002113C_ds_f:
	goto l0000000000021158
	// succ:  l0000000000021158
l000000000002113C_ds_t:
	goto l000000000002116C
	// succ:  l000000000002116C
l0000000000021158:
	Mem0[sp + 0x0000000000000040:word64] = r8
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mspan).nextFreeIndex_exit
l000000000002116C:
	Mem0[sp + 0x0000000000000020:word64] = r8
	Mem0[sp + 0x0000000000000018:word64] = r7
	r2 = r7
	r23 = (word64) (r7 <u r8)
	branch r23 == 0x0000000000000000 l000000000002116C_ds_t
	// succ:  l000000000002116C_ds_f l000000000002116C_ds_t
l000000000002116C_ds_f:
	goto l0000000000021184
	// succ:  l0000000000021184
l000000000002116C_ds_t:
	goto l00000000000211B0
	// succ:  l00000000000211B0
l0000000000021184:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000211B0:
	r2 = Mem0[r5 + 0x0000000000000040:word64]
runtime.(*mspan).nextFreeIndex_exit:


// runtime.markBitsForAddr
// Return size: 0
void runtime.markBitsForAddr()
runtime.markBitsForAddr_entry:
	// succ:  l0000000000021430
l0000000000021430:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000021430_ds_t
	// succ:  l0000000000021430_ds_f l0000000000021430_ds_t
l0000000000021430_ds_f:
	goto l0000000000021440
	// succ:  l0000000000021440
l0000000000021430_ds_t:
	goto l0000000000021454
	// succ:  l0000000000021454
l0000000000021440:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000021430
	// succ:  l0000000000021430
l0000000000021454:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000038:byte] = (byte) 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	branch r6 == 0x0000000000000000 l0000000000021454_ds_t
	// succ:  l0000000000021454_ds_f l0000000000021454_ds_t
l0000000000021454_ds_f:
	goto l0000000000021474
	// succ:  l0000000000021474
l0000000000021454_ds_t:
	goto l0000000000021648
	// succ:  l0000000000021648
l0000000000021474:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
	r23 = (word64) (r6 <u r1)
	branch r23 != 0x0000000000000000 l0000000000021474_ds_t
	// succ:  l0000000000021474_ds_f l0000000000021474_ds_t
l0000000000021474_ds_f:
	goto l000000000002148C
	// succ:  l000000000002148C
l0000000000021474_ds_t:
	goto l0000000000021648
	// succ:  l0000000000021648
l000000000002148C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F78:word64]
	r23 = (word64) (r6 <u r1)
	branch r23 == 0x0000000000000000 l000000000002148C_ds_t
	// succ:  l000000000002148C_ds_f l000000000002148C_ds_t
l000000000002148C_ds_f:
	goto l00000000000214A4
	// succ:  l00000000000214A4
l000000000002148C_ds_t:
	goto l0000000000021648
	// succ:  l0000000000021648
l00000000000214A4:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000007F70:word64]
l00000000000214F8:
	r5 = r2
	r4 = r2
	r1 = Mem0[r2 + 0x0000000000000018:word64]
l0000000000021648:
	r2 = 0x0000000000000000
	goto l00000000000214F8
	// succ:  l00000000000214F8
runtime.markBitsForAddr_exit:


// runtime.markBits.setMarked
// Return size: 0
void runtime.markBits.setMarked()
runtime.markBits.setMarked_entry:
	// succ:  l0000000000021658
l0000000000021658:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000021658_ds_t
	// succ:  l0000000000021658_ds_f l0000000000021658_ds_t
l0000000000021658_ds_f:
	goto l0000000000021668
	// succ:  l0000000000021668
l0000000000021658_ds_t:
	goto l000000000002167C
	// succ:  l000000000002167C
l0000000000021668:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000021658
	// succ:  l0000000000021658
l000000000002167C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	Mem0[sp + 0x0000000000000010:byte] = (byte) r1
	call runtime/internal/atomic.Or8 (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.markBits.setMarked_exit
runtime.markBits.setMarked_exit:


// runtime.heapBitsForSpan
// Return size: 0
void runtime.heapBitsForSpan()
runtime.heapBitsForSpan_entry:
	// succ:  l00000000000216B0
l00000000000216B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000216B0_ds_t
	// succ:  l00000000000216B0_ds_f l00000000000216B0_ds_t
l00000000000216B0_ds_f:
	goto l00000000000216C0
	// succ:  l00000000000216C0
l00000000000216B0_ds_t:
	goto l00000000000216D4
	// succ:  l00000000000216D4
l00000000000216C0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000216B0
	// succ:  l00000000000216B0
l00000000000216D4:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:word32] = (word32) 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
	r2 = r3
	r23 = (word64) (r3 <u r1)
	branch r23 != 0x0000000000000000 l00000000000216D4_ds_t
	// succ:  l00000000000216D4_ds_f l00000000000216D4_ds_t
l00000000000216D4_ds_f:
	goto l0000000000021704
	// succ:  l0000000000021704
l00000000000216D4_ds_t:
	goto l00000000000217F0
	// succ:  l00000000000217F0
l0000000000021704:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F78:word64]
	r2 = r3
	r23 = (word64) (r3 <u r1)
	branch r23 == 0x0000000000000000 l0000000000021704_ds_t
	// succ:  l0000000000021704_ds_f l0000000000021704_ds_t
l0000000000021704_ds_f:
	goto l0000000000021720
	// succ:  l0000000000021720
l0000000000021704_ds_t:
	goto l00000000000217F0
	// succ:  l00000000000217F0
l0000000000021720:
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word32] = (word32) 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
l00000000000217F0:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.heapBitsForSpan_exit:


// runtime.heapBitsForObject
// Return size: 0
void runtime.heapBitsForObject()
runtime.heapBitsForObject_entry:
	// succ:  l0000000000021820
l0000000000021820:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000021820_ds_t
	// succ:  l0000000000021820_ds_f l0000000000021820_ds_t
l0000000000021820_ds_f:
	goto l0000000000021830
	// succ:  l0000000000021830
l0000000000021820_ds_t:
	goto l0000000000021844
	// succ:  l0000000000021844
l0000000000021830:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000021820
	// succ:  l0000000000021820
l0000000000021844:
	sp = sp + -112
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000078:word64]
	Mem0[sp + 0x00000000000000B0:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000A8:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000098:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000A0:word32] = (word32) 0x0000000000000000
	Mem0[sp + 0x0000000000000090:word64] = 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000007F70:word64]
	r23 = (word64) (r4 <u r3)
	branch r23 != 0x0000000000000000 l0000000000021844_ds_t
	// succ:  l0000000000021844_ds_f l0000000000021844_ds_t
l0000000000021844_ds_f:
	goto l000000000002187C
	// succ:  l000000000002187C
l0000000000021844_ds_t:
	goto l0000000000021E30
	// succ:  l0000000000021E30
l000000000002187C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F78:word64]
	r23 = (word64) (r4 <u r1)
	branch r23 == 0x0000000000000000 l000000000002187C_ds_t
	// succ:  l000000000002187C_ds_f l000000000002187C_ds_t
l000000000002187C_ds_f:
	goto l0000000000021894
	// succ:  l0000000000021894
l000000000002187C_ds_t:
	goto l0000000000021E30
	// succ:  l0000000000021E30
l0000000000021894:
l0000000000021E30:
	r4 = Mem0[sp:word64]
	sp = sp + 112
	call r4 (retsize: 0;)
	return
	// succ:  runtime.heapBitsForObject_exit
runtime.heapBitsForObject_exit:


// runtime.heapBits.setCheckmarked
// Return size: 0
void runtime.heapBits.setCheckmarked()
runtime.heapBits.setCheckmarked_entry:
	// succ:  l0000000000021E40
l0000000000021E40:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000021E40_ds_t
	// succ:  l0000000000021E40_ds_f l0000000000021E40_ds_t
l0000000000021E40_ds_f:
	goto l0000000000021E50
	// succ:  l0000000000021E50
l0000000000021E40_ds_t:
	goto l0000000000021E64
	// succ:  l0000000000021E64
l0000000000021E50:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000021E40
	// succ:  l0000000000021E40
l0000000000021E64:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r3 = (word64) Mem0[sp + 0x0000000000000028:uint32]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 != r2 l0000000000021E64_ds_t
	// succ:  l0000000000021E64_ds_f l0000000000021E64_ds_t
l0000000000021E64_ds_f:
	goto l0000000000021E84
	// succ:  l0000000000021E84
l0000000000021E64_ds_t:
	goto l0000000000021EC8
	// succ:  l0000000000021EC8
l0000000000021E84:
	Mem0[sp + 0x0000000000000008:word64] = r4
l0000000000021EC8:
	Mem0[sp + 0x0000000000000008:word64] = r4
runtime.heapBits.setCheckmarked_exit:


// runtime.heapBitsBulkBarrier
// Return size: 0
void runtime.heapBitsBulkBarrier()
runtime.heapBitsBulkBarrier_entry:
	// succ:  l0000000000021F30
l0000000000021F30:
	sp = fp
	sp = sp + -184
	Mem0[sp:word64] = ra
	r9 = Mem0[sp + 0x00000000000000C8:word64]
	r5 = Mem0[sp + 0x00000000000000C0:word64]
	r1 = r5 | r9
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r1 + r2
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000021F30_ds_t
	// succ:  l0000000000021F30_ds_f l0000000000021F30_ds_t
l0000000000021F30_ds_f:
	goto l0000000000021F58
	// succ:  l0000000000021F58
l0000000000021F30_ds_t:
	goto l0000000000021F80
	// succ:  l0000000000021F80
l0000000000021F58:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000021F80:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000067FF:byte]
	branch r1 != 0x0000000000000000 l0000000000021F80_ds_t
	// succ:  l0000000000021F80_ds_f l0000000000021F80_ds_t
l0000000000021F80_ds_f:
	goto l0000000000021F94
	// succ:  l0000000000021F94
l0000000000021F80_ds_t:
	goto l0000000000021FA4
	// succ:  l0000000000021FA4
l0000000000021F94:
	r4 = Mem0[sp:word64]
	sp = sp + 184
	call r4 (retsize: 0;)
	return
	// succ:  runtime.heapBitsBulkBarrier_exit
l0000000000021FA4:
	r4 = r5
	r1 = 0x0000000000000000
	branch r5 == 0x0000000000000000 l0000000000021FA4_ds_t
	// succ:  l0000000000021FA4_ds_f l0000000000021FA4_ds_t
l0000000000021FA4_ds_f:
	goto l0000000000021FB4
	// succ:  l0000000000021FB4
l0000000000021FA4_ds_t:
	goto l0000000000022520
	// succ:  l0000000000022520
l0000000000021FB4:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
	r23 = (word64) (r4 <u r1)
	branch r23 != 0x0000000000000000 l0000000000021FB4_ds_t
	// succ:  l0000000000021FB4_ds_f l0000000000021FB4_ds_t
l0000000000021FB4_ds_f:
	goto l0000000000021FCC
	// succ:  l0000000000021FCC
l0000000000021FB4_ds_t:
	goto l0000000000022520
	// succ:  l0000000000022520
l0000000000021FCC:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F78:word64]
	r23 = (word64) (r4 <u r1)
	branch r23 == 0x0000000000000000 l0000000000021FCC_ds_t
	// succ:  l0000000000021FCC_ds_f l0000000000021FCC_ds_t
l0000000000021FCC_ds_f:
	goto l0000000000021FE4
	// succ:  l0000000000021FE4
l0000000000021FCC_ds_t:
	goto l0000000000022520
	// succ:  l0000000000022520
l0000000000021FE4:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
l0000000000022080:
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l0000000000022080_ds_t
	// succ:  l0000000000022080_ds_f l0000000000022080_ds_t
l0000000000022080_ds_f:
	goto l000000000002208C
	// succ:  l000000000002208C
l0000000000022080_ds_t:
	goto l00000000000221FC
	// succ:  l00000000000221FC
l000000000002208C:
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r4 = Mem0[r2 + 0x00000000000000A0:word64]
	branch r4 == 0x0000000000000000 l000000000002208C_ds_t
	// succ:  l000000000002208C_ds_f l000000000002208C_ds_t
l000000000002208C_ds_f:
	goto l000000000002209C
	// succ:  l000000000002209C
l000000000002208C_ds_t:
	goto l00000000000220FC
	// succ:  l00000000000220FC
l000000000002209C:
	r1 = Mem0[r4:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 != 0x0000000000000000 l000000000002209C_ds_t
	// succ:  l000000000002209C_ds_f l000000000002209C_ds_t
l000000000002209C_ds_f:
	goto l00000000000220AC
	// succ:  l00000000000220AC
l000000000002209C_ds_t:
	goto l00000000000220FC
	// succ:  l00000000000220FC
l00000000000220AC:
	r1 = Mem0[r4 + 0x0000000000000008:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 == 0x0000000000000000 l00000000000220AC_ds_t
	// succ:  l00000000000220AC_ds_f l00000000000220AC_ds_t
l00000000000220AC_ds_f:
	goto l00000000000220BC
	// succ:  l00000000000220BC
l00000000000220AC_ds_t:
	goto l00000000000220FC
	// succ:  l00000000000220FC
l00000000000220BC:
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	Mem0[r3 + 0x0000000000000008:word64] = r4
	r2 = r5
	Mem0[r3 + 0x0000000000000010:word64] = r5
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 184
	call r4 (retsize: 0;)
	return
	// succ:  runtime.heapBitsBulkBarrier_exit
l00000000000220FC:
	r3 = 0x00000000000D0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	branch r3 == 0x0000000000000000 l00000000000220FC_ds_t
	// succ:  l00000000000220FC_ds_f l00000000000220FC_ds_t
l00000000000220FC_ds_f:
	goto l0000000000022110
	// succ:  l0000000000022110
l00000000000220FC_ds_t:
	goto l0000000000022174
	// succ:  l0000000000022174
l0000000000022110:
	r1 = Mem0[r3 + 0x0000000000000080:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 != 0x0000000000000000 l0000000000022110_ds_t
	// succ:  l0000000000022110_ds_f l0000000000022110_ds_t
l0000000000022110_ds_f:
	goto l0000000000022120
	// succ:  l0000000000022120
l0000000000022110_ds_t:
	goto l0000000000022168
	// succ:  l0000000000022168
l0000000000022120:
	r1 = Mem0[r3 + 0x0000000000000088:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 == 0x0000000000000000 l0000000000022120_ds_t
	// succ:  l0000000000022120_ds_f l0000000000022120_ds_t
l0000000000022120_ds_f:
	goto l0000000000022130
	// succ:  l0000000000022130
l0000000000022120_ds_t:
	goto l0000000000022168
	// succ:  l0000000000022168
l0000000000022130:
	Mem0[sp + 0x0000000000000008:word64] = r5
	Mem0[sp + 0x0000000000000010:word64] = r9
	r1 = Mem0[r3 + 0x0000000000000080:word64]
l0000000000022168:
	r3 = Mem0[r3 + 0x0000000000000158:word64]
	branch r3 != 0x0000000000000000 l0000000000022168_ds_t
	// succ:  l0000000000022168_ds_f l0000000000022168_ds_t
l0000000000022168_ds_f:
	goto l0000000000022174
	// succ:  l0000000000022174
l0000000000022168_ds_t:
	goto l0000000000022110
	// succ:  l0000000000022110
l0000000000022174:
	r3 = 0x00000000000D0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	branch r3 == 0x0000000000000000 l0000000000022174_ds_t
	// succ:  l0000000000022174_ds_f l0000000000022174_ds_t
l0000000000022174_ds_f:
	goto l0000000000022188
	// succ:  l0000000000022188
l0000000000022174_ds_t:
	goto l00000000000221EC
	// succ:  l00000000000221EC
l0000000000022188:
	r1 = Mem0[r3 + 0x0000000000000090:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 != 0x0000000000000000 l0000000000022188_ds_t
	// succ:  l0000000000022188_ds_f l0000000000022188_ds_t
l0000000000022188_ds_f:
	goto l0000000000022198
	// succ:  l0000000000022198
l0000000000022188_ds_t:
	goto l00000000000221E0
	// succ:  l00000000000221E0
l0000000000022198:
	r1 = Mem0[r3 + 0x0000000000000098:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 == 0x0000000000000000 l0000000000022198_ds_t
	// succ:  l0000000000022198_ds_f l0000000000022198_ds_t
l0000000000022198_ds_f:
	goto l00000000000221A8
	// succ:  l00000000000221A8
l0000000000022198_ds_t:
	goto l00000000000221E0
	// succ:  l00000000000221E0
l00000000000221A8:
	Mem0[sp + 0x0000000000000008:word64] = r5
	Mem0[sp + 0x0000000000000010:word64] = r9
	r1 = Mem0[r3 + 0x0000000000000090:word64]
l00000000000221E0:
	r3 = Mem0[r3 + 0x0000000000000158:word64]
	branch r3 != 0x0000000000000000 l00000000000221E0_ds_t
	// succ:  l00000000000221E0_ds_f l00000000000221E0_ds_t
l00000000000221E0_ds_f:
	goto l00000000000221EC
	// succ:  l00000000000221EC
l00000000000221E0_ds_t:
	goto l0000000000022188
	// succ:  l0000000000022188
l00000000000221EC:
	r4 = Mem0[sp:word64]
	sp = sp + 184
	call r4 (retsize: 0;)
	return
	r4 = Mem0[sp:word64]
	sp = sp + 184
	call r4 (retsize: 0;)
	return
	// succ:  runtime.heapBitsBulkBarrier_exit runtime.heapBitsBulkBarrier_exit
l00000000000221FC:
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word32] = (word32) 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
l0000000000022520:
	r1 = 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l0000000000022080
	// succ:  l0000000000022080
runtime.heapBitsBulkBarrier_exit:


// runtime.bulkBarrierBitmap
// Return size: 0
void runtime.bulkBarrierBitmap()
runtime.bulkBarrierBitmap_entry:
	// succ:  l0000000000022530
l0000000000022530:
	sp = fp
	sp = sp + -40
	Mem0[sp:word64] = ra
	r2 = Mem0[sp + 0x0000000000000040:word64]
	r1 = r2
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000022530_ds_t
	// succ:  l0000000000022530_ds_f l0000000000022530_ds_t
l0000000000022530_ds_f:
	goto l000000000002254C
	// succ:  l000000000002254C
l0000000000022530_ds_t:
	goto l0000000000022558
	// succ:  l0000000000022558
l000000000002254C:
	call runtime.panicdivide (retsize: 0;)
l0000000000022558:
	lo = r2 / r3
	hi = r2 % r3
	r4 = lo
	r1 = r4
	r2 = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000022558_ds_t
	// succ:  l0000000000022558_ds_f l0000000000022558_ds_t
l0000000000022558_ds_f:
	goto l0000000000022574
	// succ:  l0000000000022574
l0000000000022558_ds_t:
	goto l0000000000022580
	// succ:  l0000000000022580
l0000000000022574:
	call runtime.panicdivide (retsize: 0;)
l0000000000022580:
	lo = r4 / r3
	hi = r4 % r3
	r3 = lo
	r5 = Mem0[sp + 0x0000000000000048:word64]
	lo = r5 / r5
	hi = r5 % r5
	r2 = r5
	Mem0[sp + 0x0000000000000048:word64] = r5
	r3 = r4
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	branch r4 != 0x0000000000000000 l0000000000022580_ds_t
	// succ:  l0000000000022580_ds_f l0000000000022580_ds_t
l0000000000022580_ds_f:
	goto l00000000000225A8
	// succ:  l00000000000225A8
l0000000000022580_ds_t:
	goto l00000000000225B4
	// succ:  l00000000000225B4
l00000000000225A8:
	call runtime.panicdivide (retsize: 0;)
l00000000000225B4:
	lo = r3 / r4
	hi = r3 % r4
	r3 = hi
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
runtime.bulkBarrierBitmap_exit:


// runtime.typeBitsBulkBarrier
// Return size: 0
void runtime.typeBitsBulkBarrier()
runtime.typeBitsBulkBarrier_entry:
	// succ:  l00000000000226D8
l00000000000226D8:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000058:word64]
	r2 = 0x0000000000000000
	branch r6 != 0x0000000000000000 l00000000000226D8_ds_t
	// succ:  l00000000000226D8_ds_f l00000000000226D8_ds_t
l00000000000226D8_ds_f:
	goto l00000000000226F0
	// succ:  l00000000000226F0
l00000000000226D8_ds_t:
	goto l0000000000022714
	// succ:  l0000000000022714
l00000000000226F0:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000022714:
	r1 = Mem0[r6:word64]
	r2 = Mem0[sp + 0x0000000000000068:word64]
	branch r1 == r2 l0000000000022714_ds_t
	// succ:  l0000000000022714_ds_f l0000000000022714_ds_t
l0000000000022714_ds_f:
	goto l0000000000022724
	// succ:  l0000000000022724
l0000000000022714_ds_t:
	goto l000000000002284C
	// succ:  l000000000002284C
l0000000000022724:
	r1 = r6
	Mem0[sp + 0x0000000000000008:word64] = r6
	call runtime.(*_type).string (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r1 = Mem0[sp + 0x0000000000000058:word64]
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000030:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000002284C:
	r1 = (word64) Mem0[r6 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l000000000002284C_ds_t
	// succ:  l000000000002284C_ds_f l000000000002284C_ds_t
l000000000002284C_ds_f:
	goto l0000000000022874
	// succ:  l0000000000022874
l000000000002284C_ds_t:
	goto l0000000000022938
	// succ:  l0000000000022938
l0000000000022874:
	r1 = r6
	Mem0[sp + 0x0000000000000008:word64] = r6
	call runtime.(*_type).string (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000022938:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000067FF:byte]
	branch r1 != 0x0000000000000000 l0000000000022938_ds_t
	// succ:  l0000000000022938_ds_f l0000000000022938_ds_t
l0000000000022938_ds_f:
	goto l000000000002294C
	// succ:  l000000000002294C
l0000000000022938_ds_t:
	goto l000000000002295C
	// succ:  l000000000002295C
l000000000002294C:
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typeBitsBulkBarrier_exit
l000000000002295C:
	r5 = Mem0[r6 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000038:word64] = r5
runtime.typeBitsBulkBarrier_exit:


// runtime.heapBits.initSpan
// Return size: 0
void runtime.heapBits.initSpan()
runtime.heapBits.initSpan_entry:
	// succ:  l0000000000022A80
l0000000000022A80:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000022A80_ds_t
	// succ:  l0000000000022A80_ds_f l0000000000022A80_ds_t
l0000000000022A80_ds_f:
	goto l0000000000022A90
	// succ:  l0000000000022A90
l0000000000022A80_ds_t:
	goto l0000000000022AA4
	// succ:  l0000000000022AA4
l0000000000022A90:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000022A80
	// succ:  l0000000000022A80
l0000000000022AA4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = 0x0000000000000000
	r6 = Mem0[r4 + 0x0000000000000020:word64]
runtime.heapBits.initSpan_exit:


// runtime.heapBits.initCheckmarkSpan
// Return size: 0
void runtime.heapBits.initCheckmarkSpan()
runtime.heapBits.initCheckmarkSpan_entry:
	// succ:  l0000000000022CE8
l0000000000022CE8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000022CE8_ds_t
	// succ:  l0000000000022CE8_ds_f l0000000000022CE8_ds_t
l0000000000022CE8_ds_f:
	goto l0000000000022CF8
	// succ:  l0000000000022CF8
l0000000000022CE8_ds_t:
	goto l0000000000022D0C
	// succ:  l0000000000022D0C
l0000000000022CF8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000022CE8
	// succ:  l0000000000022CE8
l0000000000022D0C:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r11 = Mem0[sp + 0x0000000000000050:word64]
	r10 = Mem0[sp + 0x0000000000000058:word64]
	r9 = (word64) Mem0[sp + 0x0000000000000048:uint32]
	r8 = Mem0[sp + 0x0000000000000040:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r11 != r2 l0000000000022D0C_ds_t
	// succ:  l0000000000022D0C_ds_f l0000000000022D0C_ds_t
l0000000000022D0C_ds_f:
	goto l0000000000022D30
	// succ:  l0000000000022D30
l0000000000022D0C_ds_t:
	goto l0000000000022D94
	// succ:  l0000000000022D94
l0000000000022D30:
	r4 = r8
	r5 = 0x0000000000000000
	r23 = (word64) (r5 <u r10)
	branch r23 == 0x0000000000000000 l0000000000022D30_ds_t
	// succ:  l0000000000022D30_ds_f l0000000000022D30_ds_t
l0000000000022D30_ds_f:
	goto l0000000000022D44
	// succ:  l0000000000022D44
l0000000000022D30_ds_t:
	goto l0000000000022D84
	// succ:  l0000000000022D84
l0000000000022D44:
	r2 = (word64) Mem0[r4:byte]
	r3 = r2 + 0x00000000000000FF
	r2 = r3 + 0x00000000000000FF
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3 + 0x00000000000000FF
	r2 = r2 + r3
	Mem0[r4:byte] = (byte) r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l0000000000022D84:
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.heapBits.initCheckmarkSpan_exit
l0000000000022D94:
	r6 = 0x0000000000000000
	r23 = (word64) (r6 <u r10)
	branch r23 == 0x0000000000000000 l0000000000022D94_ds_t
	// succ:  l0000000000022D94_ds_f l0000000000022D94_ds_t
l0000000000022D94_ds_f:
	goto l0000000000022DA4
	// succ:  l0000000000022DA4
l0000000000022D94_ds_t:
	goto l0000000000022F5C
	// succ:  l0000000000022F5C
l0000000000022DA4:
	r2 = (word64) Mem0[r8:byte]
	r7 = r2 + 0x00000000000000FF
	r1 = r8
l0000000000022F5C:
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.heapBits.initCheckmarkSpan_exit
runtime.heapBits.initCheckmarkSpan_exit:


// runtime.heapBits.clearCheckmarkSpan
// Return size: 0
void runtime.heapBits.clearCheckmarkSpan()
runtime.heapBits.clearCheckmarkSpan_entry:
	// succ:  l0000000000022F70
l0000000000022F70:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000022F70_ds_t
	// succ:  l0000000000022F70_ds_f l0000000000022F70_ds_t
l0000000000022F70_ds_f:
	goto l0000000000022F80
	// succ:  l0000000000022F80
l0000000000022F70_ds_t:
	goto l0000000000022F94
	// succ:  l0000000000022F94
l0000000000022F80:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000022F70
	// succ:  l0000000000022F70
l0000000000022F94:
	r6 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000018:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 != r2 l0000000000022F94_ds_t
	// succ:  l0000000000022F94_ds_f l0000000000022F94_ds_t
l0000000000022F94_ds_f:
	goto l0000000000022FA8
	// succ:  l0000000000022FA8
l0000000000022F94_ds_t:
	goto l0000000000022FFC
	// succ:  l0000000000022FFC
l0000000000022FA8:
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r5 = 0x0000000000000000
	r23 = (word64) (r5 <u r6)
	branch r23 == 0x0000000000000000 l0000000000022FA8_ds_t
	// succ:  l0000000000022FA8_ds_f l0000000000022FA8_ds_t
l0000000000022FA8_ds_f:
	goto l0000000000022FBC
	// succ:  l0000000000022FBC
l0000000000022FA8_ds_t:
	goto l0000000000022FFC
	// succ:  l0000000000022FFC
l0000000000022FBC:
	r2 = (word64) Mem0[r4:byte]
	r3 = r2 + 0x00000000000000FF
	r2 = r3 + 0x00000000000000FF
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3 + 0x00000000000000FF
	r2 = r2 | r3
	Mem0[r4:byte] = (byte) r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l0000000000022FFC:
	return
	// succ:  runtime.heapBits.clearCheckmarkSpan_exit
runtime.heapBits.clearCheckmarkSpan_exit:


// runtime.(*mspan).countFree
// Return size: 0
void runtime.(*mspan).countFree()
runtime.(*mspan).countFree_entry:
	// succ:  l0000000000023008
l0000000000023008:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000023008_ds_t
	// succ:  l0000000000023008_ds_f l0000000000023008_ds_t
l0000000000023008_ds_f:
	goto l0000000000023018
	// succ:  l0000000000023018
l0000000000023008_ds_t:
	goto l000000000002302C
	// succ:  l000000000002302C
l0000000000023018:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000023008
	// succ:  l0000000000023008
l000000000002302C:
	sp = sp + -8
	Mem0[sp:word64] = ra
	r7 = Mem0[sp + 0x0000000000000010:word64]
	r4 = 0x0000000000000000
	r1 = Mem0[r7 + 0x0000000000000038:word64]
	r2 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000002302C_ds_t
	// succ:  l000000000002302C_ds_f l000000000002302C_ds_t
l000000000002302C_ds_f:
	goto l0000000000023050
	// succ:  l0000000000023050
l000000000002302C_ds_t:
	goto l000000000002305C
	// succ:  l000000000002305C
l0000000000023050:
	call runtime.panicdivide (retsize: 0;)
l000000000002305C:
	lo = r1 / r3
	hi = r1 % r3
	r8 = lo
	r3 = 0x0000000000000000
	r23 = (word64) (r3 <u r8)
	branch r23 == 0x0000000000000000 l000000000002305C_ds_t
	// succ:  l000000000002305C_ds_f l000000000002305C_ds_t
l000000000002305C_ds_f:
	goto l0000000000023074
	// succ:  l0000000000023074
l000000000002305C_ds_t:
	goto l00000000000230BC
	// succ:  l00000000000230BC
l0000000000023074:
	r6 = Mem0[r7 + 0x0000000000000050:word64]
	lo = r1 / r6
	hi = r1 % r6
	r2 = (word64) Mem0[r1:byte]
	r5 = r2 + 0x00000000000000FF
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	r2 = r5 + 0x00000000000000FF
	lo = r1 / r1
	hi = r1 % r1
	r1 = (word64) Mem0[r1:byte]
	lo = r1 / r1
	hi = r1 % r1
	r4 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r3 = r1
	r23 = (word64) (r3 <u r8)
	branch r23 != 0x0000000000000000 l0000000000023074_ds_t
	// succ:  l0000000000023074_ds_f l0000000000023074_ds_t
l0000000000023074_ds_f:
	goto l00000000000230BC
	// succ:  l00000000000230BC
l0000000000023074_ds_t:
	goto l0000000000023074
	// succ:  l0000000000023074
l00000000000230BC:
	r1 = Mem0[r7 + 0x0000000000000038:word64]
	r2 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l00000000000230BC_ds_t
	// succ:  l00000000000230BC_ds_f l00000000000230BC_ds_t
l00000000000230BC_ds_f:
	goto l00000000000230D0
	// succ:  l00000000000230D0
l00000000000230BC_ds_t:
	goto l00000000000230DC
	// succ:  l00000000000230DC
l00000000000230D0:
	call runtime.panicdivide (retsize: 0;)
l00000000000230DC:
	lo = r1 / r3
	hi = r1 % r3
	r3 = hi
	branch r3 == 0x0000000000000000 l00000000000230DC_ds_t
	// succ:  l00000000000230DC_ds_f l00000000000230DC_ds_t
l00000000000230DC_ds_f:
	goto l00000000000230EC
	// succ:  l00000000000230EC
l00000000000230DC_ds_t:
	goto l0000000000023164
	// succ:  l0000000000023164
l00000000000230EC:
	r1 = Mem0[r7 + 0x0000000000000050:word64]
	lo = r1 / r1
	hi = r1 % r1
	r2 = (word64) Mem0[r1:byte]
	r5 = r2 + 0x00000000000000FF
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r3
	r23 = (word64) (r3 <u 8)
	branch r23 != 0x0000000000000000 l00000000000230EC_ds_t
	// succ:  l00000000000230EC_ds_f l00000000000230EC_ds_t
l00000000000230EC_ds_f:
	goto l0000000000023114
	// succ:  l0000000000023114
l00000000000230EC_ds_t:
	goto l0000000000023118
	// succ:  l0000000000023118
l0000000000023114:
	r1 = 0x0000000000000000
	// succ:  l0000000000023118
l0000000000023118:
l0000000000023164:
	r1 = Mem0[r7 + 0x0000000000000038:word64]
runtime.(*mspan).countFree_exit:


// runtime.heapBitsSetType
// Return size: 0
void runtime.heapBitsSetType()
runtime.heapBitsSetType_entry:
	// succ:  l0000000000023180
l0000000000023180:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -224
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000023180_ds_t
	// succ:  l0000000000023180_ds_f l0000000000023180_ds_t
l0000000000023180_ds_f:
	goto l0000000000023194
	// succ:  l0000000000023194
l0000000000023180_ds_t:
	goto l00000000000231A8
	// succ:  l00000000000231A8
l0000000000023194:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000023180
	// succ:  l0000000000023180
l00000000000231A8:
	sp = sp + -224
	Mem0[sp:word64] = ra
	r16 = Mem0[sp + 0x00000000000000F0:word64]
	r10 = Mem0[sp + 0x00000000000000F8:word64]
	r5 = Mem0[sp + 0x0000000000000100:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r16 != r2 l00000000000231A8_ds_t
	// succ:  l00000000000231A8_ds_f l00000000000231A8_ds_t
l00000000000231A8_ds_f:
	goto l00000000000231C8
	// succ:  l00000000000231C8
l00000000000231A8_ds_t:
	goto l00000000000231D8
	// succ:  l00000000000231D8
l00000000000231C8:
	r4 = Mem0[sp:word64]
	sp = sp + 224
	call r4 (retsize: 0;)
	return
	// succ:  runtime.heapBitsSetType_exit
l00000000000231D8:
	r3 = Mem0[sp + 0x00000000000000E8:word64]
	Mem0[sp + 0x00000000000000A0:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000A8:word32] = (word32) 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
runtime.heapBitsSetType_exit:


// runtime.heapBitsSetTypeGCProg
// Return size: 0
void runtime.heapBitsSetTypeGCProg()
runtime.heapBitsSetTypeGCProg_entry:
	// succ:  l0000000000024030
l0000000000024030:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000024030_ds_t
	// succ:  l0000000000024030_ds_f l0000000000024030_ds_t
l0000000000024030_ds_f:
	goto l0000000000024040
	// succ:  l0000000000024040
l0000000000024030_ds_t:
	goto l0000000000024054
	// succ:  l0000000000024054
l0000000000024040:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000024030
	// succ:  l0000000000024030
l0000000000024054:
	sp = sp + -104
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000088:word64]
	r2 = Mem0[sp + 0x0000000000000098:word64]
	r1 = r2
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000024054_ds_t
	// succ:  l0000000000024054_ds_f l0000000000024054_ds_t
l0000000000024054_ds_f:
	goto l0000000000024074
	// succ:  l0000000000024074
l0000000000024054_ds_t:
	goto l0000000000024080
	// succ:  l0000000000024080
l0000000000024074:
	call runtime.panicdivide (retsize: 0;)
l0000000000024080:
	lo = r2 / r3
	hi = r2 % r3
	r1 = hi
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000024080_ds_t
	// succ:  l0000000000024080_ds_f l0000000000024080_ds_t
l0000000000024080_ds_f:
	goto l0000000000024094
	// succ:  l0000000000024094
l0000000000024080_ds_t:
	goto l00000000000240B8
	// succ:  l00000000000240B8
l0000000000024094:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000240B8:
	r2 = Mem0[sp + 0x0000000000000090:word64]
	branch r6 != r2 l00000000000240B8_ds_t
	// succ:  l00000000000240B8_ds_f l00000000000240B8_ds_t
l00000000000240B8_ds_f:
	goto l00000000000240C4
	// succ:  l00000000000240C4
l00000000000240B8_ds_t:
	goto l0000000000024248
	// succ:  l0000000000024248
l00000000000240C4:
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000070:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	call runtime.runGCProg (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000030:word64] = r3
l0000000000024248:
	r2 = Mem0[sp + 0x0000000000000090:word64]
	r1 = r2
	r3 = r6
	branch r6 != 0x0000000000000000 l0000000000024248_ds_t
	// succ:  l0000000000024248_ds_f l0000000000024248_ds_t
l0000000000024248_ds_f:
	goto l000000000002425C
	// succ:  l000000000002425C
l0000000000024248_ds_t:
	goto l0000000000024268
	// succ:  l0000000000024268
l000000000002425C:
	call runtime.panicdivide (retsize: 0;)
l0000000000024268:
	lo = r2 / r6
	hi = r2 % r6
	r7 = lo
	lo = r1 / sp
	hi = r1 % sp
	Mem0[r1:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000010:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000020:word64] = 0x0000000000000000
	r5 = 0x0000000000000000
	r1 = r6
	r2 = r6
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000024268_ds_t
	// succ:  l0000000000024268_ds_f l0000000000024268_ds_t
l0000000000024268_ds_f:
	goto l00000000000242A0
	// succ:  l00000000000242A0
l0000000000024268_ds_t:
	goto l00000000000242AC
	// succ:  l00000000000242AC
l00000000000242A0:
	call runtime.panicdivide (retsize: 0;)
l00000000000242AC:
	lo = r6 / r3
	hi = r6 % r3
	r1 = lo
	r3 = Mem0[sp + 0x0000000000000080:word64]
	r2 = r3
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	branch r4 != 0x0000000000000000 l00000000000242AC_ds_t
	// succ:  l00000000000242AC_ds_f l00000000000242AC_ds_t
l00000000000242AC_ds_f:
	goto l00000000000242C8
	// succ:  l00000000000242C8
l00000000000242AC_ds_t:
	goto l00000000000242D4
	// succ:  l00000000000242D4
l00000000000242C8:
	call runtime.panicdivide (retsize: 0;)
l00000000000242D4:
	lo = r3 / r4
	hi = r3 % r4
	r3 = lo
runtime.heapBitsSetTypeGCProg_exit:


// runtime.progToPointerMask
// Return size: 0
void runtime.progToPointerMask()
runtime.progToPointerMask_entry:
	// succ:  l00000000000246E8
l00000000000246E8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000246E8_ds_t
	// succ:  l00000000000246E8_ds_f l00000000000246E8_ds_t
l00000000000246E8_ds_f:
	goto l00000000000246F8
	// succ:  l00000000000246F8
l00000000000246E8_ds_t:
	goto l000000000002470C
	// succ:  l000000000002470C
l00000000000246F8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000246E8
	// succ:  l00000000000246E8
l000000000002470C:
	sp = sp + -80
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000068:word32] = (word32) 0x0000000000000000
	Mem0[sp + 0x0000000000000070:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r2 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000002470C_ds_t
	// succ:  l000000000002470C_ds_f l000000000002470C_ds_t
l000000000002470C_ds_f:
	goto l0000000000024730
	// succ:  l0000000000024730
l000000000002470C_ds_t:
	goto l000000000002473C
	// succ:  l000000000002473C
l0000000000024730:
	call runtime.panicdivide (retsize: 0;)
l000000000002473C:
	lo = r1 / r3
	hi = r1 % r3
	r1 = lo
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	r2 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000002473C_ds_t
	// succ:  l000000000002473C_ds_f l000000000002473C_ds_t
l000000000002473C_ds_f:
	goto l000000000002475C
	// succ:  l000000000002475C
l000000000002473C_ds_t:
	goto l0000000000024768
	// succ:  l0000000000024768
l000000000002475C:
	call runtime.panicdivide (retsize: 0;)
l0000000000024768:
	lo = r1 / r3
	hi = r1 % r3
	r3 = lo
	Mem0[sp + 0x0000000000000030:word64] = r3
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000018:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.persistentalloc (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	r2 = 0x0000000040000000
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l0000000000024768_ds_t
	// succ:  l0000000000024768_ds_f l0000000000024768_ds_t
l0000000000024768_ds_f:
	goto l00000000000247D0
	// succ:  l00000000000247D0
l0000000000024768_ds_t:
	goto l0000000000024944
	// succ:  l0000000000024944
l00000000000247D0:
	r5 = r3
	branch r3 != 0x0000000000000000 l00000000000247D0_ds_t
	// succ:  l00000000000247D0_ds_f l00000000000247D0_ds_t
l00000000000247D0_ds_f:
	goto l00000000000247DC
	// succ:  l00000000000247DC
l00000000000247D0_ds_t:
	goto l00000000000247E0
	// succ:  l00000000000247E0
l00000000000247DC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000247E0
l00000000000247E0:
	r4 = r1
	r3 = 0x0000000040000000
	Mem0[sp + 0x0000000000000048:word64] = r3
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l0000000000024944:
	call runtime.panicslice (retsize: 0;)
runtime.progToPointerMask_exit:


// runtime.runGCProg
// Return size: 0
void runtime.runGCProg()
runtime.runGCProg_entry:
	// succ:  l0000000000024958
l0000000000024958:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000024958_ds_t
	// succ:  l0000000000024958_ds_f l0000000000024958_ds_t
l0000000000024958_ds_f:
	goto l0000000000024968
	// succ:  l0000000000024968
l0000000000024958_ds_t:
	goto l000000000002497C
	// succ:  l000000000002497C
l0000000000024968:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000024958
	// succ:  l0000000000024958
l000000000002497C:
	sp = sp + -8
	Mem0[sp:word64] = ra
	r14 = Mem0[sp + 0x0000000000000018:word64]
	r12 = Mem0[sp + 0x0000000000000028:word64]
	r15 = Mem0[sp + 0x0000000000000020:word64]
	r6 = r15
	r4 = 0x0000000000000000
	r5 = 0x0000000000000000
	r8 = Mem0[sp + 0x0000000000000010:word64]
	goto l00000000000249A0
	// succ:  l00000000000249A0
l000000000002497C_ds_f:
	goto l00000000000249B0
	// succ:  l00000000000249B0
l000000000002497C_ds_t:
	goto l00000000000249F8
	// succ:  l00000000000249F8
l00000000000249A0:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r5 <u r2)
	branch r23 != 0x0000000000000000 l000000000002497C_ds_t
	goto l000000000002497C_ds_f
	// succ:  l000000000002497C_ds_f l000000000002497C_ds_t
l00000000000249B0:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r12 != r2 l00000000000249B0_ds_t
	// succ:  l00000000000249B0_ds_f l00000000000249B0_ds_t
l00000000000249B0_ds_f:
	goto l00000000000249BC
	// succ:  l00000000000249BC
l00000000000249B0_ds_t:
	goto l00000000000254E8
	// succ:  l00000000000254E8
l00000000000249BC:
	r2 = r4 + 0x00000000000000FF
	Mem0[r6:byte] = (byte) r2
l00000000000249F8:
	r3 = (word64) Mem0[r8:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r8
	hi = r1 % r8
	r8 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r3 + r2
	r10 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r3 + r2
	branch r1 != 0x0000000000000000 l00000000000249F8_ds_t
	// succ:  l00000000000249F8_ds_f l00000000000249F8_ds_t
l00000000000249F8_ds_f:
	goto l0000000000024A24
	// succ:  l0000000000024A24
l00000000000249F8_ds_t:
	goto l0000000000024CBC
	// succ:  l0000000000024CBC
l0000000000024A24:
	branch r10 != 0x0000000000000000 l0000000000024A24_ds_t
	// succ:  l0000000000024A24_ds_f l0000000000024A24_ds_t
l0000000000024A24_ds_f:
	goto l0000000000024A2C
	// succ:  l0000000000024A2C
l0000000000024A24_ds_t:
	goto l0000000000024B34
	// succ:  l0000000000024B34
l0000000000024A2C:
	branch r14 == 0x0000000000000000 l0000000000024A2C_ds_t
	// succ:  l0000000000024A2C_ds_f l0000000000024A2C_ds_t
l0000000000024A2C_ds_f:
	goto l0000000000024A34
	// succ:  l0000000000024A34
l0000000000024A2C_ds_t:
	goto l0000000000024A48
	// succ:  l0000000000024A48
l0000000000024A34:
	r8 = r14
	r14 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	goto l00000000000249A0
	// succ:  l00000000000249A0
l0000000000024A48:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r12 != r2 l0000000000024A48_ds_t
	// succ:  l0000000000024A48_ds_f l0000000000024A48_ds_t
l0000000000024A48_ds_f:
	goto l0000000000024A54
	// succ:  l0000000000024A54
l0000000000024A48_ds_t:
	goto l0000000000024AC8
	// succ:  l0000000000024AC8
l0000000000024A54:
l0000000000024AC8:
l0000000000024B34:
	r1 = r10
	r2 = r10
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000024B34_ds_t
	// succ:  l0000000000024B34_ds_f l0000000000024B34_ds_t
l0000000000024B34_ds_f:
	goto l0000000000024B48
	// succ:  l0000000000024B48
l0000000000024B34_ds_t:
	goto l0000000000024B54
	// succ:  l0000000000024B54
l0000000000024B48:
	call runtime.panicdivide (retsize: 0;)
l0000000000024B54:
	lo = r10 / r3
	hi = r10 % r3
	r9 = lo
	r7 = 0x0000000000000000
	r23 = (word64) (r7 <u r9)
	branch r23 == 0x0000000000000000 l0000000000024B54_ds_t
	// succ:  l0000000000024B54_ds_f l0000000000024B54_ds_t
l0000000000024B54_ds_f:
	goto l0000000000024B6C
	// succ:  l0000000000024B6C
l0000000000024B54_ds_t:
	goto l0000000000024BE4
	// succ:  l0000000000024BE4
l0000000000024B6C:
	r3 = r4
	r1 = (word64) Mem0[r8:byte]
	r2 = r5
	r23 = (word64) (r5 <u 64)
	branch r23 != 0x0000000000000000 l0000000000024B6C_ds_t
	// succ:  l0000000000024B6C_ds_f l0000000000024B6C_ds_t
l0000000000024B6C_ds_f:
	goto l0000000000024B84
	// succ:  l0000000000024B84
l0000000000024B6C_ds_t:
	goto l0000000000024B88
	// succ:  l0000000000024B88
l0000000000024B84:
	r1 = 0x0000000000000000
	// succ:  l0000000000024B88
l0000000000024B88:
l0000000000024BE4:
	r1 = r10
	r2 = r10
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000024BE4_ds_t
	// succ:  l0000000000024BE4_ds_f l0000000000024BE4_ds_t
l0000000000024BE4_ds_f:
	goto l0000000000024BF8
	// succ:  l0000000000024BF8
l0000000000024BE4_ds_t:
	goto l0000000000024C04
	// succ:  l0000000000024C04
l0000000000024BF8:
	call runtime.panicdivide (retsize: 0;)
l0000000000024C04:
	lo = r10 / r3
	hi = r10 % r3
	r3 = hi
	r23 = (word64) (0x0000000000000000 <u r3)
	branch r23 == 0x0000000000000000 l0000000000024C04_ds_t
	// succ:  l0000000000024C04_ds_f l0000000000024C04_ds_t
l0000000000024C04_ds_f:
	goto l0000000000024C18
	// succ:  l0000000000024C18
l0000000000024C04_ds_t:
	goto l00000000000249A0
	// succ:  l00000000000249A0
l0000000000024C18:
	r1 = (word64) Mem0[r8:byte]
	r2 = r5
	r23 = (word64) (r5 <u 64)
	branch r23 != 0x0000000000000000 l0000000000024C18_ds_t
	// succ:  l0000000000024C18_ds_f l0000000000024C18_ds_t
l0000000000024C18_ds_f:
	goto l0000000000024C2C
	// succ:  l0000000000024C2C
l0000000000024C18_ds_t:
	goto l0000000000024C30
	// succ:  l0000000000024C30
l0000000000024C2C:
	r1 = 0x0000000000000000
	// succ:  l0000000000024C30
l0000000000024C30:
l0000000000024CBC:
	branch r10 != 0x0000000000000000 l0000000000024CBC_ds_t
	// succ:  l0000000000024CBC_ds_f l0000000000024CBC_ds_t
l0000000000024CBC_ds_f:
	goto l0000000000024CC4
	// succ:  l0000000000024CC4
l0000000000024CBC_ds_t:
	goto l0000000000024D10
	// succ:  l0000000000024D10
l0000000000024CC4:
	r7 = 0x0000000000000000
	r9 = (word64) Mem0[r8:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r8
	hi = r1 % r8
	r8 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r1 = r9 + r3
	r2 = r7
	r23 = (word64) (r7 <u 64)
	branch r23 != 0x0000000000000000 l0000000000024CC4_ds_t
	// succ:  l0000000000024CC4_ds_f l0000000000024CC4_ds_t
l0000000000024CC4_ds_f:
	goto l0000000000024CF0
	// succ:  l0000000000024CF0
l0000000000024CC4_ds_t:
	goto l0000000000024CF4
	// succ:  l0000000000024CF4
l0000000000024CF0:
	r1 = 0x0000000000000000
	// succ:  l0000000000024CF4
l0000000000024CF4:
l0000000000024D10:
	r3 = 0x0000000000000000
	r7 = 0x0000000000000000
	r9 = (word64) Mem0[r8:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r8
	hi = r1 % r8
	r8 = r1
	r11 = r3
l00000000000254E8:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r4 + r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r1 | r2
	r2 = r1 + 0x00000000000000FF
	Mem0[r6:byte] = (byte) r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.runGCProg_exit:


// runtime.allocmcache
// Return size: 0
void runtime.allocmcache()
runtime.allocmcache_entry:
	// succ:  l0000000000025550
l0000000000025550:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000025550_ds_t
	// succ:  l0000000000025550_ds_f l0000000000025550_ds_t
l0000000000025550_ds_f:
	goto l0000000000025560
	// succ:  l0000000000025560
l0000000000025550_ds_t:
	goto l0000000000025574
	// succ:  l0000000000025574
l0000000000025560:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000025550
	// succ:  l0000000000025550
l0000000000025574:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.(*fixalloc).alloc (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.memclr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000018:word64]
	r4 = 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r4
	r23 = (word64) (r4 < r2)
	branch r23 == 0x0000000000000000 l0000000000025574_ds_t
	// succ:  l0000000000025574_ds_f l0000000000025574_ds_t
l0000000000025574_ds_f:
	goto l0000000000025610
	// succ:  l0000000000025610
l0000000000025574_ds_t:
	goto l0000000000025678
	// succ:  l0000000000025678
l0000000000025610:
	branch r5 != 0x0000000000000000 l0000000000025610_ds_t
	// succ:  l0000000000025610_ds_f l0000000000025610_ds_t
l0000000000025610_ds_f:
	goto l0000000000025618
	// succ:  l0000000000025618
l0000000000025610_ds_t:
	goto l000000000002561C
	// succ:  l000000000002561C
l0000000000025618:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000002561C
l000000000002561C:
	lo = r2 / r5
	hi = r2 % r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r1 = r4
	r23 = (word64) (r4 <u r3)
	branch r23 != 0x0000000000000000 l000000000002561C_ds_t
	// succ:  l000000000002561C_ds_f l000000000002561C_ds_t
l000000000002561C_ds_f:
	goto l0000000000025634
	// succ:  l0000000000025634
l000000000002561C_ds_t:
	goto l0000000000025640
	// succ:  l0000000000025640
l0000000000025634:
	call runtime.panicindex (retsize: 0;)
l0000000000025640:
l0000000000025678:
	call runtime.nextSample (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000018:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000008:int32]
	r3 = r1
	r2 = r3
	Mem0[r4:word32] = (word32) r2
	Mem0[sp + 0x0000000000000028:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.allocmcache_exit
runtime.allocmcache_exit:


// runtime.freemcache
// Return size: 0
void runtime.freemcache()
runtime.freemcache_entry:
	// succ:  l00000000000256A8
l00000000000256A8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000256A8_ds_t
	// succ:  l00000000000256A8_ds_f l00000000000256A8_ds_t
l00000000000256A8_ds_f:
	goto l00000000000256B8
	// succ:  l00000000000256B8
l00000000000256A8_ds_t:
	goto l00000000000256CC
	// succ:  l00000000000256CC
l00000000000256B8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000256A8
	// succ:  l00000000000256A8
l00000000000256CC:
	sp = sp + -32
	Mem0[sp:word64] = ra
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	r2 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[r3 + 0x0000000000000008:word64] = r2
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.freemcache_exit
runtime.freemcache_exit:


// runtime.(*mcache).refill
// Return size: 0
void runtime.(*mcache).refill()
runtime.(*mcache).refill_entry:
	// succ:  l0000000000025710
l0000000000025710:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000025710_ds_t
	// succ:  l0000000000025710_ds_f l0000000000025710_ds_t
l0000000000025710_ds_f:
	goto l0000000000025720
	// succ:  l0000000000025720
l0000000000025710_ds_t:
	goto l0000000000025734
	// succ:  l0000000000025734
l0000000000025720:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000025710
	// succ:  l0000000000025710
l0000000000025734:
	sp = sp + -40
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000020:word64] = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r4 = r2
	r2 = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r1 = Mem0[sp + 0x0000000000000030:word64]
	branch r1 != 0x0000000000000000 l0000000000025734_ds_t
	// succ:  l0000000000025734_ds_f l0000000000025734_ds_t
l0000000000025734_ds_f:
	goto l0000000000025770
	// succ:  l0000000000025770
l0000000000025734_ds_t:
	goto l0000000000025774
	// succ:  l0000000000025774
l0000000000025770:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000025774
l0000000000025774:
	lo = r2 / r1
	hi = r2 % r1
	r1 = (word64) Mem0[sp + 0x0000000000000038:int32]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r1 <u r3)
	branch r23 != 0x0000000000000000 l0000000000025774_ds_t
	// succ:  l0000000000025774_ds_f l0000000000025774_ds_t
l0000000000025774_ds_f:
	goto l000000000002578C
	// succ:  l000000000002578C
l0000000000025774_ds_t:
	goto l0000000000025798
	// succ:  l0000000000025798
l000000000002578C:
	call runtime.panicindex (retsize: 0;)
l0000000000025798:
runtime.(*mcache).refill_exit:


// runtime.(*mcache).releaseAll
// Return size: 0
void runtime.(*mcache).releaseAll()
runtime.(*mcache).releaseAll_entry:
	// succ:  l0000000000025968
l0000000000025968:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000025968_ds_t
	// succ:  l0000000000025968_ds_f l0000000000025968_ds_t
l0000000000025968_ds_f:
	goto l0000000000025978
	// succ:  l0000000000025978
l0000000000025968_ds_t:
	goto l000000000002598C
	// succ:  l000000000002598C
l0000000000025978:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000025968
	// succ:  l0000000000025968
l000000000002598C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000028:word64]
	r4 = 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r4 < r2)
	branch r23 == 0x0000000000000000 l000000000002598C_ds_t
	// succ:  l000000000002598C_ds_f l000000000002598C_ds_t
l000000000002598C_ds_f:
	goto l00000000000259AC
	// succ:  l00000000000259AC
l000000000002598C_ds_t:
	goto l0000000000025ABC
	// succ:  l0000000000025ABC
l00000000000259AC:
	branch r6 != 0x0000000000000000 l00000000000259AC_ds_t
	// succ:  l00000000000259AC_ds_f l00000000000259AC_ds_t
l00000000000259AC_ds_f:
	goto l00000000000259B4
	// succ:  l00000000000259B4
l00000000000259AC_ds_t:
	goto l00000000000259B8
	// succ:  l00000000000259B8
l00000000000259B4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000259B8
l00000000000259B8:
	lo = r2 / r6
	hi = r2 % r6
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r1 = r4
	r23 = (word64) (r4 <u r3)
	branch r23 != 0x0000000000000000 l00000000000259B8_ds_t
	// succ:  l00000000000259B8_ds_f l00000000000259B8_ds_t
l00000000000259B8_ds_f:
	goto l00000000000259D0
	// succ:  l00000000000259D0
l00000000000259B8_ds_t:
	goto l00000000000259DC
	// succ:  l00000000000259DC
l00000000000259D0:
	call runtime.panicindex (retsize: 0;)
l00000000000259DC:
l0000000000025ABC:
	Mem0[r6 + 0x0000000000000010:word64] = 0x0000000000000000
	Mem0[r6 + 0x0000000000000018:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mcache).releaseAll_exit
runtime.(*mcache).releaseAll_exit:


// runtime.(*mcentral).cacheSpan
// Return size: 0
void runtime.(*mcentral).cacheSpan()
runtime.(*mcentral).cacheSpan_entry:
	// succ:  l0000000000025AD8
l0000000000025AD8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000025AD8_ds_t
	// succ:  l0000000000025AD8_ds_f l0000000000025AD8_ds_t
l0000000000025AD8_ds_f:
	goto l0000000000025AE8
	// succ:  l0000000000025AE8
l0000000000025AD8_ds_t:
	goto l0000000000025AFC
	// succ:  l0000000000025AFC
l0000000000025AE8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000025AD8
	// succ:  l0000000000025AD8
l0000000000025AFC:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000048:word64]
	r2 = (word64) Mem0[r1 + 0x0000000000000008:int32]
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	r2 = r2
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r2 <u r3)
	branch r23 != 0x0000000000000000 l0000000000025AFC_ds_t
	// succ:  l0000000000025AFC_ds_f l0000000000025AFC_ds_t
l0000000000025AFC_ds_f:
	goto l0000000000025B2C
	// succ:  l0000000000025B2C
l0000000000025AFC_ds_t:
	goto l0000000000025B38
	// succ:  l0000000000025B38
l0000000000025B2C:
	call runtime.panicindex (retsize: 0;)
l0000000000025B38:
runtime.(*mcentral).cacheSpan_exit:


// runtime.(*mcentral).uncacheSpan
// Return size: 0
void runtime.(*mcentral).uncacheSpan()
runtime.(*mcentral).uncacheSpan_entry:
	// succ:  l00000000000263D0
l00000000000263D0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000263D0_ds_t
	// succ:  l00000000000263D0_ds_f l00000000000263D0_ds_t
l00000000000263D0_ds_f:
	goto l00000000000263E0
	// succ:  l00000000000263E0
l00000000000263D0_ds_t:
	goto l00000000000263F4
	// succ:  l00000000000263F4
l00000000000263E0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000263D0
	// succ:  l00000000000263D0
l00000000000263F4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l00000000000263F4_ds_t
	// succ:  l00000000000263F4_ds_f l00000000000263F4_ds_t
l00000000000263F4_ds_f:
	goto l0000000000026410
	// succ:  l0000000000026410
l00000000000263F4_ds_t:
	goto l0000000000026414
	// succ:  l0000000000026414
l0000000000026410:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000026414
l0000000000026414:
	call runtime.lock (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r2 = 0x0000000000000000
	Mem0[r4 + 0x0000000000000063:byte] = (byte) r2
	r1 = (word64) Mem0[r4 + 0x0000000000000060:uint16]
	r2 = 0x0000000000000000
	r1 = r1 + 0x000000000000FFFF
	r2 = r2 + 0x000000000000FFFF
	branch r1 != r2 l0000000000026414_ds_t
	// succ:  l0000000000026414_ds_f l0000000000026414_ds_t
l0000000000026414_ds_f:
	goto l0000000000026440
	// succ:  l0000000000026440
l0000000000026414_ds_t:
	goto l0000000000026464
	// succ:  l0000000000026464
l0000000000026440:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000026464:
	r1 = Mem0[r4 + 0x0000000000000020:word64]
runtime.(*mcentral).uncacheSpan_exit:


// runtime.(*mcentral).freeSpan
// Return size: 0
void runtime.(*mcentral).freeSpan()
runtime.(*mcentral).freeSpan_entry:
	// succ:  l00000000000265B8
l00000000000265B8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000265B8_ds_t
	// succ:  l00000000000265B8_ds_f l00000000000265B8_ds_t
l00000000000265B8_ds_f:
	goto l00000000000265C8
	// succ:  l00000000000265C8
l00000000000265B8_ds_t:
	goto l00000000000265DC
	// succ:  l00000000000265DC
l00000000000265C8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000265B8
	// succ:  l00000000000265B8
l00000000000265DC:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000030:word64]
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r3 + 0x0000000000000063:byte]
	branch r1 == 0x0000000000000000 l00000000000265DC_ds_t
	// succ:  l00000000000265DC_ds_f l00000000000265DC_ds_t
l00000000000265DC_ds_f:
	goto l00000000000265F8
	// succ:  l00000000000265F8
l00000000000265DC_ds_t:
	goto l000000000002661C
	// succ:  l000000000002661C
l00000000000265F8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000002661C:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	Mem0[r3 + 0x0000000000000065:byte] = (byte) r2
	r1 = (word64) Mem0[sp + 0x0000000000000038:byte]
	branch r1 == 0x0000000000000000 l000000000002661C_ds_t
	// succ:  l000000000002661C_ds_f l000000000002661C_ds_t
l000000000002661C_ds_f:
	goto l0000000000026634
	// succ:  l0000000000026634
l000000000002661C_ds_t:
	goto l00000000000266E4
	// succ:  l00000000000266E4
l0000000000026634:
	r1 = 0x0000000000000000
	r1 = Mem0[r3 + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000026634_ds_t
	// succ:  l0000000000026634_ds_f l0000000000026634_ds_t
l0000000000026634_ds_f:
	goto l0000000000026644
	// succ:  l0000000000026644
l0000000000026634_ds_t:
	goto l00000000000266D4
	// succ:  l00000000000266D4
l0000000000026644:
	r2 = 0x0000000000000000
	goto l0000000000026648
	// succ:  l0000000000026648
l0000000000026644_ds_f:
	goto l000000000002665C
	// succ:  l000000000002665C
l0000000000026644_ds_t:
	goto l0000000000026680
	// succ:  l0000000000026680
l0000000000026648:
	r1 = r2 + 0x00000000000000FF
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l0000000000026644_ds_t
	goto l0000000000026644_ds_f
	// succ:  l0000000000026644_ds_f l0000000000026644_ds_t
l000000000002665C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000026680:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000026680_ds_t
	// succ:  l0000000000026680_ds_f l0000000000026680_ds_t
l0000000000026680_ds_f:
	goto l0000000000026690
	// succ:  l0000000000026690
l0000000000026680_ds_t:
	goto l0000000000026694
	// succ:  l0000000000026694
l0000000000026690:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000026694
l0000000000026694:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000007CFC:uint32]
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
	call runtime/internal/atomic.Store (retsize: 0;)
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mcentral).freeSpan_exit
l00000000000266D4:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l0000000000026648
	// succ:  l0000000000026648
l00000000000266E4:
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l00000000000266E4_ds_t
	// succ:  l00000000000266E4_ds_f l00000000000266E4_ds_t
l00000000000266E4_ds_f:
	goto l00000000000266F8
	// succ:  l00000000000266F8
l00000000000266E4_ds_t:
	goto l00000000000266FC
	// succ:  l00000000000266FC
l00000000000266F8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000266FC
l00000000000266FC:
	call runtime.lock (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000039:byte]
	branch r1 == 0x0000000000000000 l00000000000266FC_ds_t
	// succ:  l00000000000266FC_ds_f l00000000000266FC_ds_t
l00000000000266FC_ds_f:
	goto l0000000000026710
	// succ:  l0000000000026710
l00000000000266FC_ds_t:
	goto l0000000000026780
	// succ:  l0000000000026780
l0000000000026710:
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000026710_ds_t
	// succ:  l0000000000026710_ds_f l0000000000026710_ds_t
l0000000000026710_ds_f:
	goto l0000000000026724
	// succ:  l0000000000026724
l0000000000026710_ds_t:
	goto l0000000000026728
	// succ:  l0000000000026728
l0000000000026724:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000026728
l0000000000026728:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.(*mSpanList).remove (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000026728_ds_t
	// succ:  l0000000000026728_ds_f l0000000000026728_ds_t
l0000000000026728_ds_f:
	goto l000000000002675C
	// succ:  l000000000002675C
l0000000000026728_ds_t:
	goto l0000000000026760
	// succ:  l0000000000026760
l000000000002675C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000026760
l0000000000026760:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.(*mSpanList).insert (retsize: 0;)
l0000000000026780:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000026780_ds_t
	// succ:  l0000000000026780_ds_f l0000000000026780_ds_t
l0000000000026780_ds_f:
	goto l0000000000026794
	// succ:  l0000000000026794
l0000000000026780_ds_t:
	goto l0000000000026798
	// succ:  l0000000000026798
l0000000000026794:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000026798
l0000000000026798:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000007CFC:uint32]
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
	call runtime/internal/atomic.Store (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000028:word64]
	r1 = (word64) Mem0[r4 + 0x0000000000000060:uint16]
	r2 = 0x0000000000000000
	r1 = r1 + 0x000000000000FFFF
	r2 = r2 + 0x000000000000FFFF
	branch r1 == r2 l0000000000026798_ds_t
	// succ:  l0000000000026798_ds_f l0000000000026798_ds_t
l0000000000026798_ds_f:
	goto l00000000000267E0
	// succ:  l00000000000267E0
l0000000000026798_ds_t:
	goto l0000000000026814
	// succ:  l0000000000026814
l00000000000267E0:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l00000000000267E0_ds_t
	// succ:  l00000000000267E0_ds_f l00000000000267E0_ds_t
l00000000000267E0_ds_f:
	goto l00000000000267F0
	// succ:  l00000000000267F0
l00000000000267E0_ds_t:
	goto l00000000000267F4
	// succ:  l00000000000267F4
l00000000000267F0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000267F4
l00000000000267F4:
	call runtime.unlock (retsize: 0;)
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mcentral).freeSpan_exit
l0000000000026814:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000026814_ds_t
	// succ:  l0000000000026814_ds_f l0000000000026814_ds_t
l0000000000026814_ds_f:
	goto l0000000000026824
	// succ:  l0000000000026824
l0000000000026814_ds_t:
	goto l0000000000026828
	// succ:  l0000000000026828
l0000000000026824:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000026828
l0000000000026828:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r4
	Mem0[sp + 0x0000000000000010:word64] = r4
	call runtime.(*mSpanList).remove (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000026828_ds_t
	// succ:  l0000000000026828_ds_f l0000000000026828_ds_t
l0000000000026828_ds_f:
	goto l000000000002685C
	// succ:  l000000000002685C
l0000000000026828_ds_t:
	goto l0000000000026860
	// succ:  l0000000000026860
l000000000002685C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000026860
l0000000000026860:
	call runtime.unlock (retsize: 0;)
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	call runtime.(*mheap).freeSpan (retsize: 0;)
runtime.(*mcentral).freeSpan_exit:


// runtime.(*mcentral).grow
// Return size: 0
void runtime.(*mcentral).grow()
runtime.(*mcentral).grow_entry:
	// succ:  l00000000000268B0
l00000000000268B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000268B0_ds_t
	// succ:  l00000000000268B0_ds_f l00000000000268B0_ds_t
l00000000000268B0_ds_f:
	goto l00000000000268C0
	// succ:  l00000000000268C0
l00000000000268B0_ds_t:
	goto l00000000000268D4
	// succ:  l00000000000268D4
l00000000000268C0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000268B0
	// succ:  l00000000000268B0
l00000000000268D4:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000058:word64]
	r2 = (word64) Mem0[r5 + 0x0000000000000008:int32]
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	r2 = r2
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r2 <u r3)
	branch r23 != 0x0000000000000000 l00000000000268D4_ds_t
	// succ:  l00000000000268D4_ds_f l00000000000268D4_ds_t
l00000000000268D4_ds_f:
	goto l0000000000026904
	// succ:  l0000000000026904
l00000000000268D4_ds_t:
	goto l0000000000026910
	// succ:  l0000000000026910
l0000000000026904:
	call runtime.panicindex (retsize: 0;)
l0000000000026910:
runtime.(*mcentral).grow_exit:


// runtime.addrspace_free
// Return size: 0
void runtime.addrspace_free()
runtime.addrspace_free_entry:
	// succ:  l0000000000026A68
l0000000000026A68:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000026A68_ds_t
	// succ:  l0000000000026A68_ds_f l0000000000026A68_ds_t
l0000000000026A68_ds_f:
	goto l0000000000026A78
	// succ:  l0000000000026A78
l0000000000026A68_ds_t:
	goto l0000000000026A8C
	// succ:  l0000000000026A8C
l0000000000026A78:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000026A68
	// succ:  l0000000000026A68
l0000000000026A8C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r3 = 0x0000000000000000
	r2 = Mem0[sp + 0x0000000000000040:word64]
	r23 = (word64) (r3 <u r2)
	branch r23 == 0x0000000000000000 l0000000000026A8C_ds_t
	// succ:  l0000000000026A8C_ds_f l0000000000026A8C_ds_t
l0000000000026A8C_ds_f:
	goto l0000000000026AAC
	// succ:  l0000000000026AAC
l0000000000026A8C_ds_t:
	goto l0000000000026B20
	// succ:  l0000000000026B20
l0000000000026AAC:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.mincore (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:int32]
	r3 = r1
	r1 = r3
l0000000000026B20:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000048:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.addrspace_free_exit
runtime.addrspace_free_exit:


// runtime.mmap_fixed
// Return size: 0
void runtime.mmap_fixed()
runtime.mmap_fixed_entry:
	// succ:  l0000000000026B70
l0000000000026B70:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000026B70_ds_t
	// succ:  l0000000000026B70_ds_f l0000000000026B70_ds_t
l0000000000026B70_ds_f:
	goto l0000000000026B80
	// succ:  l0000000000026B80
l0000000000026B70_ds_t:
	goto l0000000000026B94
	// succ:  l0000000000026B94
l0000000000026B80:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000026B70
	// succ:  l0000000000026B70
l0000000000026B94:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = (word64) Mem0[sp + 0x0000000000000050:int32]
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	r1 = (word64) Mem0[sp + 0x0000000000000054:int32]
	Mem0[sp + 0x000000000000001C:word32] = (word32) r1
	r1 = (word64) Mem0[sp + 0x0000000000000058:int32]
	Mem0[sp + 0x0000000000000020:word32] = (word32) r1
	r1 = (word64) Mem0[sp + 0x000000000000005C:uint32]
	Mem0[sp + 0x0000000000000024:word32] = (word32) r1
	call runtime.mmap (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000030:word64] = r3
	r2 = r4
	branch r3 == r4 l0000000000026B94_ds_t
	// succ:  l0000000000026B94_ds_f l0000000000026B94_ds_t
l0000000000026B94_ds_f:
	goto l0000000000026BEC
	// succ:  l0000000000026BEC
l0000000000026B94_ds_t:
	goto l0000000000026C98
	// succ:  l0000000000026C98
l0000000000026BEC:
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.addrspace_free (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000030:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000026BEC_ds_t
	// succ:  l0000000000026BEC_ds_f l0000000000026BEC_ds_t
l0000000000026BEC_ds_f:
	goto l0000000000026C18
	// succ:  l0000000000026C18
l0000000000026BEC_ds_t:
	goto l0000000000026C98
	// succ:  l0000000000026C98
l0000000000026C18:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r2 <u r3)
	branch r23 == 0x0000000000000000 l0000000000026C18_ds_t
	// succ:  l0000000000026C18_ds_f l0000000000026C18_ds_t
l0000000000026C18_ds_f:
	goto l0000000000026C28
	// succ:  l0000000000026C28
l0000000000026C18_ds_t:
	goto l0000000000026C3C
	// succ:  l0000000000026C3C
l0000000000026C28:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.munmap (retsize: 0;)
l0000000000026C3C:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = (word64) Mem0[sp + 0x0000000000000050:int32]
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	r1 = (word64) Mem0[sp + 0x0000000000000054:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 | r2
	Mem0[sp + 0x000000000000001C:word32] = (word32) r1
	r1 = (word64) Mem0[sp + 0x0000000000000058:int32]
	Mem0[sp + 0x0000000000000020:word32] = (word32) r1
	r1 = (word64) Mem0[sp + 0x000000000000005C:uint32]
	Mem0[sp + 0x0000000000000024:word32] = (word32) r1
	call runtime.mmap (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000060:word64] = r3
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mmap_fixed_exit
l0000000000026C98:
	Mem0[sp + 0x0000000000000060:word64] = r3
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mmap_fixed_exit
runtime.mmap_fixed_exit:


// runtime.sysAlloc
// Return size: 0
void runtime.sysAlloc()
runtime.sysAlloc_entry:
	// succ:  l0000000000026CB0
l0000000000026CB0:
	sp = fp
	sp = sp + -56
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x000000000000001C:word32] = (word32) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000020:word32] = (word32) r1
runtime.sysAlloc_exit:


// runtime.sysUnused
// Return size: 0
void runtime.sysUnused()
runtime.sysUnused_entry:
	// succ:  l0000000000026E08
l0000000000026E08:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000026E08_ds_t
	// succ:  l0000000000026E08_ds_f l0000000000026E08_ds_t
l0000000000026E08_ds_f:
	goto l0000000000026E18
	// succ:  l0000000000026E18
l0000000000026E08_ds_t:
	goto l0000000000026E2C
	// succ:  l0000000000026E2C
l0000000000026E18:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000026E08
	// succ:  l0000000000026E08
l0000000000026E2C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000028:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r1 + r2
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000026E2C_ds_t
	// succ:  l0000000000026E2C_ds_f l0000000000026E2C_ds_t
l0000000000026E2C_ds_f:
	goto l0000000000026E4C
	// succ:  l0000000000026E4C
l0000000000026E2C_ds_t:
	goto l0000000000026E98
	// succ:  l0000000000026E98
l0000000000026E4C:
	r1 = Mem0[sp + 0x0000000000000030:word64]
l0000000000026E98:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.sysUnused_exit:


// runtime.sysUsed
// Return size: 0
void runtime.sysUsed()
runtime.sysUsed_entry:
	// succ:  l0000000000026EC0
l0000000000026EC0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000026EC0_ds_t
	// succ:  l0000000000026EC0_ds_f l0000000000026EC0_ds_t
l0000000000026EC0_ds_f:
	goto l0000000000026ED0
	// succ:  l0000000000026ED0
l0000000000026EC0_ds_t:
	goto l0000000000026EE4
	// succ:  l0000000000026EE4
l0000000000026ED0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000026EC0
	// succ:  l0000000000026EC0
l0000000000026EE4:
	sp = sp + -32
	sp = sp + 32
	return
	// succ:  runtime.sysUsed_exit
runtime.sysUsed_exit:


// runtime.sysFree
// Return size: 0
void runtime.sysFree()
runtime.sysFree_entry:
	// succ:  l0000000000026EF8
l0000000000026EF8:
	sp = fp
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.mSysStatDec (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.munmap (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.sysFree_exit
runtime.sysFree_exit:


// runtime.sysFault
// Return size: 0
void runtime.sysFault()
runtime.sysFault_entry:
	// succ:  l0000000000026F40
l0000000000026F40:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000026F40_ds_t
	// succ:  l0000000000026F40_ds_f l0000000000026F40_ds_t
l0000000000026F40_ds_f:
	goto l0000000000026F50
	// succ:  l0000000000026F50
l0000000000026F40_ds_t:
	goto l0000000000026F64
	// succ:  l0000000000026F64
l0000000000026F50:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000026F40
	// succ:  l0000000000026F40
l0000000000026F64:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
runtime.sysFault_exit:


// runtime.sysReserve
// Return size: 0
void runtime.sysReserve()
runtime.sysReserve_entry:
	// succ:  l0000000000026FC0
l0000000000026FC0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000026FC0_ds_t
	// succ:  l0000000000026FC0_ds_f l0000000000026FC0_ds_t
l0000000000026FC0_ds_f:
	goto l0000000000026FD0
	// succ:  l0000000000026FD0
l0000000000026FC0_ds_t:
	goto l0000000000026FE4
	// succ:  l0000000000026FE4
l0000000000026FD0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000026FC0
	// succ:  l0000000000026FC0
l0000000000026FE4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x0000000000001178:word64]
	r23 = (word64) (r2 <u r4)
	branch r23 == 0x0000000000000000 l0000000000026FE4_ds_t
	// succ:  l0000000000026FE4_ds_f l0000000000026FE4_ds_t
l0000000000026FE4_ds_f:
	goto l000000000002700C
	// succ:  l000000000002700C
l0000000000026FE4_ds_t:
	goto l00000000000270CC
	// succ:  l00000000000270CC
l000000000002700C:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = 0x0000000000010000
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
l00000000000270CC:
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r4
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
runtime.sysReserve_exit:


// runtime.sysMap
// Return size: 0
void runtime.sysMap()
runtime.sysMap_entry:
	// succ:  l0000000000027158
l0000000000027158:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000027158_ds_t
	// succ:  l0000000000027158_ds_f l0000000000027158_ds_t
l0000000000027158_ds_f:
	goto l0000000000027168
	// succ:  l0000000000027168
l0000000000027158_ds_t:
	goto l000000000002717C
	// succ:  l000000000002717C
l0000000000027168:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000027158
	// succ:  l0000000000027158
l000000000002717C:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.mSysStatInc (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000050:word64]
	r2 = Mem0[sp + 0x0000000000000048:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000058:byte]
	branch r1 != 0x0000000000000000 l000000000002717C_ds_t
	// succ:  l000000000002717C_ds_f l000000000002717C_ds_t
l000000000002717C_ds_f:
	goto l00000000000271B0
	// succ:  l00000000000271B0
l000000000002717C_ds_t:
	goto l00000000000272F8
	// succ:  l00000000000272F8
l00000000000271B0:
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x000000000000001C:word32] = (word32) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000020:word32] = (word32) r1
l00000000000272F8:
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x000000000000001C:word32] = (word32) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000020:word32] = (word32) r1
runtime.sysMap_exit:


// runtime.queuefinalizer
// Return size: 0
void runtime.queuefinalizer()
runtime.queuefinalizer_entry:
	// succ:  l00000000000273B0
l00000000000273B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000273B0_ds_t
	// succ:  l00000000000273B0_ds_f l00000000000273B0_ds_t
l00000000000273B0_ds_f:
	goto l00000000000273C0
	// succ:  l00000000000273C0
l00000000000273B0_ds_t:
	goto l00000000000273D4
	// succ:  l00000000000273D4
l00000000000273C0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000273B0
	// succ:  l00000000000273B0
l00000000000273D4:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010C0:word64]
	branch r1 == 0x0000000000000000 l00000000000273D4_ds_t
	// succ:  l00000000000273D4_ds_f l00000000000273D4_ds_t
l00000000000273D4_ds_f:
	goto l0000000000027408
	// succ:  l0000000000027408
l00000000000273D4_ds_t:
	goto l0000000000027644
	// succ:  l0000000000027644
l0000000000027408:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010C0:word64]
	r1 = (word64) Mem0[r1 + 0x0000000000000010:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 == r2 l0000000000027408_ds_t
	// succ:  l0000000000027408_ds_f l0000000000027408_ds_t
l0000000000027408_ds_f:
	goto l0000000000027430
	// succ:  l0000000000027430
l0000000000027408_ds_t:
	goto l0000000000027644
	// succ:  l0000000000027644
l0000000000027430:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010C0:word64]
	r2 = (word64) Mem0[r1 + 0x0000000000000010:int32]
	r3 = r2
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010C0:word64]
	branch r1 != 0x0000000000000000 l0000000000027430_ds_t
	// succ:  l0000000000027430_ds_f l0000000000027430_ds_t
l0000000000027430_ds_f:
	goto l0000000000027458
	// succ:  l0000000000027458
l0000000000027430_ds_t:
	goto l000000000002745C
	// succ:  l000000000002745C
l0000000000027458:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000002745C
l000000000002745C:
	lo = r2 / r1
	hi = r2 % r1
	r1 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r1 <u r3)
	branch r23 != 0x0000000000000000 l000000000002745C_ds_t
	// succ:  l000000000002745C_ds_f l000000000002745C_ds_t
l000000000002745C_ds_f:
	goto l0000000000027474
	// succ:  l0000000000027474
l000000000002745C_ds_t:
	goto l0000000000027480
	// succ:  l0000000000027480
l0000000000027474:
	call runtime.panicindex (retsize: 0;)
l0000000000027480:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
l0000000000027644:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010B0:word64]
	branch r1 != 0x0000000000000000 l0000000000027644_ds_t
	// succ:  l0000000000027644_ds_f l0000000000027644_ds_t
l0000000000027644_ds_f:
	goto l0000000000027658
	// succ:  l0000000000027658
l0000000000027644_ds_t:
	goto l0000000000027800
	// succ:  l0000000000027800
l0000000000027658:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000018:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.persistentalloc (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l0000000000027658_ds_t
	// succ:  l0000000000027658_ds_f l0000000000027658_ds_t
l0000000000027658_ds_f:
	goto l00000000000276A8
	// succ:  l00000000000276A8
l0000000000027658_ds_t:
	goto l000000000002794C
	// succ:  l000000000002794C
l00000000000276A8:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000010B0:word64] = r1
	goto l00000000000276B4
	// succ:  l00000000000276B4
l00000000000276A8_ds_f:
	goto l00000000000276C8
	// succ:  l00000000000276C8
l00000000000276A8_ds_t:
	goto l00000000000276CC
	// succ:  l00000000000276CC
l00000000000276B4:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010B0:word64]
	branch r1 != 0x0000000000000000 l00000000000276A8_ds_t
	goto l00000000000276A8_ds_f
	// succ:  l00000000000276A8_ds_f l00000000000276A8_ds_t
l00000000000276C8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000276CC
l00000000000276CC:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x0000000000001068:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l00000000000276CC_ds_t
	// succ:  l00000000000276CC_ds_f l00000000000276CC_ds_t
l00000000000276CC_ds_f:
	goto l00000000000276F0
	// succ:  l00000000000276F0
l00000000000276CC_ds_t:
	goto l0000000000027930
	// succ:  l0000000000027930
l00000000000276F0:
	Mem0[r1:word64] = r2
	goto l00000000000276F4
	// succ:  l00000000000276F4
l00000000000276F0_ds_f:
	goto l0000000000027718
	// succ:  l0000000000027718
l00000000000276F0_ds_t:
	goto l000000000002790C
	// succ:  l000000000002790C
l00000000000276F4:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010B0:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l00000000000276F0_ds_t
	goto l00000000000276F0_ds_f
	// succ:  l00000000000276F0_ds_f l00000000000276F0_ds_t
l0000000000027718:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001068:word64] = r1
	goto l0000000000027724
	// succ:  l0000000000027724
l0000000000027718_ds_f:
	goto l0000000000027744
	// succ:  l0000000000027744
l0000000000027718_ds_t:
	goto l0000000000027800
	// succ:  l0000000000027800
l0000000000027724:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006780:byte]
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000027718_ds_t
	goto l0000000000027718_ds_f
	// succ:  l0000000000027718_ds_f l0000000000027718_ds_t
l0000000000027744:
	r5 = 0x0000000000000000
	lo = r6 / 0x0000000000000000
	hi = r6 % 0x0000000000000000
	r23 = (word64) (r5 < r6)
	branch r23 == 0x0000000000000000 l0000000000027744_ds_t
	// succ:  l0000000000027744_ds_f l0000000000027744_ds_t
l0000000000027744_ds_f:
	goto l0000000000027758
	// succ:  l0000000000027758
l0000000000027744_ds_t:
	goto l0000000000027800
	// succ:  l0000000000027800
l0000000000027758:
	r4 = r5
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
l0000000000027800:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r5 = Mem0[r23 + 0x00000000000010B0:word64]
	Mem0[sp + 0x0000000000000030:word64] = r5
	r2 = Mem0[r5 + 0x0000000000000008:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r1 != r3 l0000000000027800_ds_t
	// succ:  l0000000000027800_ds_f l0000000000027800_ds_t
l0000000000027800_ds_f:
	goto l000000000002782C
	// succ:  l000000000002782C
l0000000000027800_ds_t:
	goto l00000000000278E4
	// succ:  l00000000000278E4
l000000000002782C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000010B0:word64] = r2
	goto l0000000000027838
	// succ:  l0000000000027838
l000000000002782C_ds_f:
	goto l0000000000027844
	// succ:  l0000000000027844
l000000000002782C_ds_t:
	goto l0000000000027848
	// succ:  l0000000000027848
l0000000000027838:
	r1 = r5
	branch r5 != 0x0000000000000000 l000000000002782C_ds_t
	goto l000000000002782C_ds_f
	// succ:  l000000000002782C_ds_f l000000000002782C_ds_t
l0000000000027844:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000027848
l0000000000027848:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000010C0:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000027848_ds_t
	// succ:  l0000000000027848_ds_f l0000000000027848_ds_t
l0000000000027848_ds_f:
	goto l000000000002786C
	// succ:  l000000000002786C
l0000000000027848_ds_t:
	goto l00000000000278C4
	// succ:  l00000000000278C4
l000000000002786C:
	Mem0[r1 + 0x0000000000000008:word64] = r2
	goto l0000000000027870
	// succ:  l0000000000027870
l000000000002786C_ds_f:
	goto l000000000002788C
	// succ:  l000000000002788C
l000000000002786C_ds_t:
	goto l00000000000278A0
	// succ:  l00000000000278A0
l0000000000027870:
	r1 = r5
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l000000000002786C_ds_t
	goto l000000000002786C_ds_f
	// succ:  l000000000002786C_ds_f l000000000002786C_ds_t
l000000000002788C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000010C0:word64] = r1
	goto l0000000000027430
	// succ:  l0000000000027430
l00000000000278A0:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r5
	call runtime.writebarrierptr (retsize: 0;)
	goto l0000000000027430
	// succ:  l0000000000027430
l00000000000278C4:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000030:word64]
	goto l0000000000027870
	// succ:  l0000000000027870
l00000000000278E4:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000030:word64]
	goto l0000000000027838
	// succ:  l0000000000027838
l000000000002790C:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	goto l0000000000027724
	// succ:  l0000000000027724
l0000000000027930:
	r3 = r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	goto l00000000000276F4
	// succ:  l00000000000276F4
l000000000002794C:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	goto l00000000000276B4
	// succ:  l00000000000276B4
runtime.queuefinalizer_exit:


// runtime.wakefing
// Return size: 0
void runtime.wakefing()
runtime.wakefing_entry:
	// succ:  l0000000000027970
l0000000000027970:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000027970_ds_t
	// succ:  l0000000000027970_ds_f l0000000000027970_ds_t
l0000000000027970_ds_f:
	goto l0000000000027980
	// succ:  l0000000000027980
l0000000000027970_ds_t:
	goto l0000000000027994
	// succ:  l0000000000027994
l0000000000027980:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000027970
	// succ:  l0000000000027970
l0000000000027994:
	sp = sp + -24
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x000000000000699B:byte]
	branch r1 == 0x0000000000000000 l0000000000027994_ds_t
	// succ:  l0000000000027994_ds_f l0000000000027994_ds_t
l0000000000027994_ds_f:
	goto l00000000000279CC
	// succ:  l00000000000279CC
l0000000000027994_ds_t:
	goto l0000000000027A10
	// succ:  l0000000000027A10
l00000000000279CC:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x000000000000699A:byte]
	branch r1 == 0x0000000000000000 l00000000000279CC_ds_t
	// succ:  l00000000000279CC_ds_f l00000000000279CC_ds_t
l00000000000279CC_ds_f:
	goto l00000000000279E0
	// succ:  l00000000000279E0
l00000000000279CC_ds_t:
	goto l0000000000027A10
	// succ:  l0000000000027A10
l00000000000279E0:
	r1 = 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x000000000000699B:byte] = (byte) r1
	r1 = 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x000000000000699A:byte] = (byte) r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010B8:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	// succ:  l0000000000027A10
l0000000000027A10:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.wakefing_exit
runtime.wakefing_exit:


// runtime.runfinq
// Return size: 0
void runtime.runfinq()
runtime.runfinq_entry:
	// succ:  l0000000000027A40
l0000000000027A40:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000027A40_ds_t
	// succ:  l0000000000027A40_ds_f l0000000000027A40_ds_t
l0000000000027A40_ds_f:
	goto l0000000000027A50
	// succ:  l0000000000027A50
l0000000000027A40_ds_t:
	goto l0000000000027A64
	// succ:  l0000000000027A64
l0000000000027A50:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000027A40
	// succ:  l0000000000027A40
l0000000000027A64:
	sp = sp + -112
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	goto l0000000000027A74
	// succ:  l0000000000027A74
l0000000000027A64_ds_f:
	goto l0000000000027AB4
	// succ:  l0000000000027AB4
l0000000000027A64_ds_t:
	goto l0000000000027B60
	// succ:  l0000000000027B60
l0000000000027A74:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010C0:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000010C0:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000060:word64] = r1
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000027A64_ds_t
	goto l0000000000027A64_ds_f
	// succ:  l0000000000027A64_ds_f l0000000000027A64_ds_t
l0000000000027AB4:
	r1 = r30
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l0000000000027AB4_ds_t
	// succ:  l0000000000027AB4_ds_f l0000000000027AB4_ds_t
l0000000000027AB4_ds_f:
	goto l0000000000027AD0
	// succ:  l0000000000027AD0
l0000000000027AB4_ds_t:
	goto l0000000000027B3C
	// succ:  l0000000000027B3C
l0000000000027AD0:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000010B8:word64] = r1
	// succ:  l0000000000027ADC
l0000000000027ADC:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x000000000000699B:byte] = (byte) r1
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
l0000000000027B3C:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r30
	call runtime.writebarrierptr (retsize: 0;)
	goto l0000000000027ADC
	// succ:  l0000000000027ADC
l0000000000027B60:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000060:word64]
	goto l0000000000027B7C
	// succ:  l0000000000027B7C
l0000000000027B60_ds_f:
	goto l0000000000027B88
	// succ:  l0000000000027B88
l0000000000027B60_ds_t:
	goto l0000000000027A74
	// succ:  l0000000000027A74
l0000000000027B7C:
	r2 = 0x0000000000000000
	branch r4 == 0x0000000000000000 l0000000000027B60_ds_t
	goto l0000000000027B60_ds_f
	// succ:  l0000000000027B60_ds_f l0000000000027B60_ds_t
l0000000000027B88:
	r2 = (word64) Mem0[r4 + 0x0000000000000010:int32]
	r3 = r2
	r1 = r3
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l0000000000027B88_ds_t
	// succ:  l0000000000027B88_ds_f l0000000000027B88_ds_t
l0000000000027B88_ds_f:
	goto l0000000000027BAC
	// succ:  l0000000000027BAC
l0000000000027B88_ds_t:
	goto l0000000000027F50
	// succ:  l0000000000027F50
l0000000000027BAC:
	r1 = r3
	Mem0[sp + 0x0000000000000030:word32] = (word32) r3
l0000000000027F50:
	Mem0[sp + 0x0000000000000060:word64] = r4
	r2 = Mem0[r4 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000048:word64] = r2
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000060:word64]
	branch r1 != 0x0000000000000000 l0000000000027F50_ds_t
	// succ:  l0000000000027F50_ds_f l0000000000027F50_ds_t
l0000000000027F50_ds_f:
	goto l0000000000027F80
	// succ:  l0000000000027F80
l0000000000027F50_ds_t:
	goto l0000000000027F84
	// succ:  l0000000000027F84
l0000000000027F80:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000027F84
l0000000000027F84:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000010B0:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000027F84_ds_t
	// succ:  l0000000000027F84_ds_f l0000000000027F84_ds_t
l0000000000027F84_ds_f:
	goto l0000000000027FA8
	// succ:  l0000000000027FA8
l0000000000027F84_ds_t:
	goto l000000000002801C
	// succ:  l000000000002801C
l0000000000027FA8:
	Mem0[r1 + 0x0000000000000008:word64] = r2
	goto l0000000000027FAC
	// succ:  l0000000000027FAC
l0000000000027FA8_ds_f:
	goto l0000000000027FC8
	// succ:  l0000000000027FC8
l0000000000027FA8_ds_t:
	goto l0000000000027FF8
	// succ:  l0000000000027FF8
l0000000000027FAC:
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l0000000000027FA8_ds_t
	goto l0000000000027FA8_ds_f
	// succ:  l0000000000027FA8_ds_f l0000000000027FA8_ds_t
l0000000000027FC8:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000010B0:word64] = r1
	// succ:  l0000000000027FD4
l0000000000027FD4:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000048:word64]
	goto l0000000000027B7C
	// succ:  l0000000000027B7C
l0000000000027FF8:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	goto l0000000000027FD4
	// succ:  l0000000000027FD4
l000000000002801C:
	lo = r3 / r1
	hi = r3 % r1
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	goto l0000000000027FAC
	// succ:  l0000000000027FAC
runtime.runfinq_exit:


// runtime.(*fixalloc).alloc
// Return size: 0
void runtime.(*fixalloc).alloc()
runtime.(*fixalloc).alloc_entry:
	// succ:  l0000000000028038
l0000000000028038:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000028038_ds_t
	// succ:  l0000000000028038_ds_f l0000000000028038_ds_t
l0000000000028038_ds_f:
	goto l0000000000028048
	// succ:  l0000000000028048
l0000000000028038_ds_t:
	goto l000000000002805C
	// succ:  l000000000002805C
l0000000000028048:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000028038
	// succ:  l0000000000028038
l000000000002805C:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000040:word64]
	r1 = Mem0[r5:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000002805C_ds_t
	// succ:  l000000000002805C_ds_f l000000000002805C_ds_t
l000000000002805C_ds_f:
	goto l0000000000028078
	// succ:  l0000000000028078
l000000000002805C_ds_t:
	goto l00000000000280CC
	// succ:  l00000000000280CC
l0000000000028078:
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000280CC:
	r1 = Mem0[r5 + 0x0000000000000018:word64]
	branch r1 == 0x0000000000000000 l00000000000280CC_ds_t
	// succ:  l00000000000280CC_ds_f l00000000000280CC_ds_t
l00000000000280CC_ds_f:
	goto l00000000000280D8
	// succ:  l00000000000280D8
l00000000000280CC_ds_t:
	goto l0000000000028150
	// succ:  l0000000000028150
l00000000000280D8:
	r2 = Mem0[r5 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000030:word64] = r2
	r1 = r5
	r3 = Mem0[r5 + 0x0000000000000018:word64]
	r2 = Mem0[r3:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l00000000000280D8_ds_t
	// succ:  l00000000000280D8_ds_f l00000000000280D8_ds_t
l00000000000280D8_ds_f:
	goto l0000000000028104
	// succ:  l0000000000028104
l00000000000280D8_ds_t:
	goto l0000000000028130
	// succ:  l0000000000028130
l0000000000028104:
	Mem0[r1 + 0x0000000000000018:word64] = r2
	// succ:  l0000000000028108
l0000000000028108:
	r4 = Mem0[r5 + 0x0000000000000030:word64]
	r2 = Mem0[r5:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r5 + 0x0000000000000030:word64] = r2
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*fixalloc).alloc_exit
l0000000000028130:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000040:word64]
	goto l0000000000028108
	// succ:  l0000000000028108
l0000000000028150:
	r1 = (word64) Mem0[r5 + 0x0000000000000028:uint32]
	r2 = Mem0[r5:word64]
	r23 = (word64) (r1 <u r2)
	branch r23 == 0x0000000000000000 l0000000000028150_ds_t
	// succ:  l0000000000028150_ds_f l0000000000028150_ds_t
l0000000000028150_ds_f:
	goto l0000000000028164
	// succ:  l0000000000028164
l0000000000028150_ds_t:
	goto l00000000000281C8
	// succ:  l00000000000281C8
l0000000000028164:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	r1 = r5
	r2 = Mem0[r5 + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.persistentalloc (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r5 = r1
	branch r1 != 0x0000000000000000 l0000000000028164_ds_t
	// succ:  l0000000000028164_ds_f l0000000000028164_ds_t
l0000000000028164_ds_f:
	goto l0000000000028198
	// succ:  l0000000000028198
l0000000000028164_ds_t:
	goto l000000000002819C
	// succ:  l000000000002819C
l0000000000028198:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000002819C
l000000000002819C:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000002819C_ds_t
	// succ:  l000000000002819C_ds_f l000000000002819C_ds_t
l000000000002819C_ds_f:
	goto l00000000000281B4
	// succ:  l00000000000281B4
l000000000002819C_ds_t:
	goto l00000000000282A4
	// succ:  l00000000000282A4
l00000000000281B4:
	Mem0[r1 + 0x0000000000000020:word64] = r2
	// succ:  l00000000000281B8
l00000000000281B8:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l00000000000281C8:
	r2 = Mem0[r5 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000028:word64] = r2
	r1 = Mem0[r5 + 0x0000000000000008:word64]
	branch r1 == 0x0000000000000000 l00000000000281C8_ds_t
	// succ:  l00000000000281C8_ds_f l00000000000281C8_ds_t
l00000000000281C8_ds_f:
	goto l00000000000281DC
	// succ:  l00000000000281DC
l00000000000281C8_ds_t:
	goto l0000000000028200
	// succ:  l0000000000028200
l00000000000281DC:
	r2 = Mem0[r5 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r22 = Mem0[r5 + 0x0000000000000008:word64]
	r1 = Mem0[r22:word64]
	call r1 (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000040:word64]
	// succ:  l0000000000028200
l0000000000028200:
	r3 = Mem0[r5:word64]
	r2 = Mem0[r5 + 0x0000000000000020:word64]
	lo = r2 / r2
	hi = r2 % r2
	r1 = r5
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000028200_ds_t
	// succ:  l0000000000028200_ds_f l0000000000028200_ds_t
l0000000000028200_ds_f:
	goto l0000000000028228
	// succ:  l0000000000028228
l0000000000028200_ds_t:
	goto l0000000000028284
	// succ:  l0000000000028284
l0000000000028228:
	Mem0[r1 + 0x0000000000000020:word64] = r2
	// succ:  l000000000002822C
l000000000002822C:
	r2 = (word64) Mem0[r5 + 0x0000000000000028:uint32]
l0000000000028284:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000040:word64]
	goto l000000000002822C
	// succ:  l000000000002822C
l00000000000282A4:
	lo = r3 / r1
	hi = r3 % r1
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000040:word64]
	goto l00000000000281B8
	// succ:  l00000000000281B8
runtime.(*fixalloc).alloc_exit:


// runtime.gcinit
// Return size: 0
void runtime.gcinit()
runtime.gcinit_entry:
	// succ:  l00000000000282C8
l00000000000282C8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000282C8_ds_t
	// succ:  l00000000000282C8_ds_f l00000000000282C8_ds_t
l00000000000282C8_ds_f:
	goto l00000000000282D8
	// succ:  l00000000000282D8
l00000000000282C8_ds_t:
	goto l00000000000282EC
	// succ:  l00000000000282EC
l00000000000282D8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000282C8
	// succ:  l00000000000282C8
l00000000000282EC:
	sp = sp + -64
	Mem0[sp:word64] = ra
	call runtime.readgogc (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000008:int32]
	r2 = r1
	r1 = r2
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime/debug.setGCPercent (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:int32]
	r2 = r1
	r3 = 0x00000000000D0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	branch r3 == 0x0000000000000000 l00000000000282EC_ds_t
	// succ:  l00000000000282EC_ds_f l00000000000282EC_ds_t
l00000000000282EC_ds_f:
	goto l0000000000028330
	// succ:  l0000000000028330
l00000000000282EC_ds_t:
	goto l0000000000028420
	// succ:  l0000000000028420
l0000000000028330:
	r2 = Mem0[r3 + 0x00000000000000B8:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[r3 + 0x0000000000000088:word64]
	Mem0[sp + 0x0000000000000028:word64] = r3
	r2 = Mem0[r3 + 0x0000000000000080:word64]
l0000000000028420:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000000030:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x00000000000055F8:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
runtime.gcinit_exit:


// runtime.readgogc
// Return size: 0
void runtime.readgogc()
runtime.readgogc_entry:
	// succ:  l00000000000284B8
l00000000000284B8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000284B8_ds_t
	// succ:  l00000000000284B8_ds_f l00000000000284B8_ds_t
l00000000000284B8_ds_f:
	goto l00000000000284C8
	// succ:  l00000000000284C8
l00000000000284B8_ds_t:
	goto l00000000000284DC
	// succ:  l00000000000284DC
l00000000000284C8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000284B8
	// succ:  l00000000000284B8
l00000000000284DC:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.readgogc_exit:


// runtime.gcenable
// Return size: 0
void runtime.gcenable()
runtime.gcenable_entry:
	// succ:  l00000000000285E0
l00000000000285E0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000285E0_ds_t
	// succ:  l00000000000285E0_ds_f l00000000000285E0_ds_t
l00000000000285E0_ds_f:
	goto l00000000000285F0
	// succ:  l00000000000285F0
l00000000000285E0_ds_t:
	goto l0000000000028604
	// succ:  l0000000000028604
l00000000000285F0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000285E0
	// succ:  l00000000000285E0
l0000000000028604:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.gcenable_exit:


// runtime/debug.setGCPercent
// Return size: 0
void runtime/debug.setGCPercent()
runtime/debug.setGCPercent_entry:
	// succ:  l00000000000286A8
l00000000000286A8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000286A8_ds_t
	// succ:  l00000000000286A8_ds_f l00000000000286A8_ds_t
l00000000000286A8_ds_f:
	goto l00000000000286B8
	// succ:  l00000000000286B8
l00000000000286A8_ds_t:
	goto l00000000000286CC
	// succ:  l00000000000286CC
l00000000000286B8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000286A8
	// succ:  l00000000000286A8
l00000000000286CC:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r3 = (word64) Mem0[sp + 0x0000000000000018:int32]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x000000000000697C:int32]
	Mem0[sp + 0x0000000000000020:word32] = (word32) r1
	r1 = r3
	r2 = 0x0000000000000000
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 == 0x0000000000000000 l00000000000286CC_ds_t
	// succ:  l00000000000286CC_ds_f l00000000000286CC_ds_t
l00000000000286CC_ds_f:
	goto l0000000000028724
	// succ:  l0000000000028724
l00000000000286CC_ds_t:
	goto l0000000000028730
	// succ:  l0000000000028730
l0000000000028724:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	r3 = r1
	// succ:  l0000000000028730
l0000000000028730:
	r1 = r3
	Mem0[sp + 0x0000000000000018:word32] = (word32) r3
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x000000000000697C:word32] = (word32) r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x000000000000697C:int32]
runtime/debug.setGCPercent_exit:


// runtime.setGCPhase
// Return size: 0
void runtime.setGCPhase()
runtime.setGCPhase_entry:
	// succ:  l0000000000028830
l0000000000028830:
	sp = fp
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = (word64) Mem0[sp + 0x0000000000000020:uint32]
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
	call runtime/internal/atomic.Store (retsize: 0;)
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006978:uint32]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
runtime.setGCPhase_exit:


// runtime.(*gcControllerState).startCycle
// Return size: 0
void runtime.(*gcControllerState).startCycle()
runtime.(*gcControllerState).startCycle_entry:
	// succ:  l0000000000028948
l0000000000028948:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000028948_ds_t
	// succ:  l0000000000028948_ds_f l0000000000028948_ds_t
l0000000000028948_ds_f:
	goto l0000000000028958
	// succ:  l0000000000028958
l0000000000028948_ds_t:
	goto l000000000002896C
	// succ:  l000000000002896C
l0000000000028958:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000028948
	// succ:  l0000000000028948
l000000000002896C:
	sp = sp + -72
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[r6:word64] = 0x0000000000000000
	Mem0[r6 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[r6 + 0x0000000000000010:word64] = 0x0000000000000000
	Mem0[r6 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r6 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[r6 + 0x0000000000000028:word64] = 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x00000000000055F8:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x0000000000000030:word64]
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l000000000002896C_ds_t
	// succ:  l000000000002896C_ds_f l000000000002896C_ds_t
l000000000002896C_ds_f:
	goto l00000000000289B4
	// succ:  l00000000000289B4
l000000000002896C_ds_t:
	goto l0000000000028A78
	// succ:  l0000000000028A78
l00000000000289B4:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r4 = Mem0[r23 - 0x00000000000055F8:word64]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r23 = Mem0[r23 + 0x00000000000011F8:word64]
	r23 = r23 + r4
	branch r23 == 0x0000000000000000 l00000000000289B4_ds_t
	// succ:  l00000000000289B4_ds_f l00000000000289B4_ds_t
l00000000000289B4_ds_f:
	goto l00000000000289D8
	// succ:  l00000000000289D8
l00000000000289B4_ds_t:
	goto l00000000000289E4
	// succ:  l00000000000289E4
l00000000000289D8:
	r5 = r4 + 0x0000000000000001
l00000000000289E4:
l0000000000028A78:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000003F60:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x000000000000697C:int32]
runtime.(*gcControllerState).startCycle_exit:


// runtime.(*gcControllerState).endCycle
// Return size: 0
void runtime.(*gcControllerState).endCycle()
runtime.(*gcControllerState).endCycle_entry:
	// succ:  l0000000000028E68
l0000000000028E68:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -144
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000028E68_ds_t
	// succ:  l0000000000028E68_ds_f l0000000000028E68_ds_t
l0000000000028E68_ds_f:
	goto l0000000000028E7C
	// succ:  l0000000000028E7C
l0000000000028E68_ds_t:
	goto l0000000000028E90
	// succ:  l0000000000028E90
l0000000000028E7C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000028E68
	// succ:  l0000000000028E68
l0000000000028E90:
	sp = sp + -144
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000098:word64]
	f0 = Mem0[r1 + 0x0000000000000060:word64]
runtime.(*gcControllerState).endCycle_exit:


// runtime.(*gcControllerState).enlistWorker
// Return size: 0
void runtime.(*gcControllerState).enlistWorker()
runtime.(*gcControllerState).enlistWorker_entry:
	// succ:  l0000000000029448
l0000000000029448:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000029448_ds_t
	// succ:  l0000000000029448_ds_f l0000000000029448_ds_t
l0000000000029448_ds_f:
	goto l0000000000029458
	// succ:  l0000000000029458
l0000000000029448_ds_t:
	goto l000000000002946C
	// succ:  l000000000002946C
l0000000000029458:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000029448
	// succ:  l0000000000029448
l000000000002946C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000028:word64]
	r1 = Mem0[r1 + 0x0000000000000040:word64]
	r23 = (word64) (0x0000000000000000 < r1)
	branch r23 != 0x0000000000000000 l000000000002946C_ds_t
	// succ:  l000000000002946C_ds_f l000000000002946C_ds_t
l000000000002946C_ds_f:
	goto l0000000000029488
	// succ:  l0000000000029488
l000000000002946C_ds_t:
	goto l0000000000029498
	// succ:  l0000000000029498
l0000000000029488:
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*gcControllerState).enlistWorker_exit
l0000000000029498:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006974:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 != 0x0000000000000000 l0000000000029498_ds_t
	// succ:  l0000000000029498_ds_f l0000000000029498_ds_t
l0000000000029498_ds_f:
	goto l00000000000294C0
	// succ:  l00000000000294C0
l0000000000029498_ds_t:
	goto l00000000000294D0
	// succ:  l00000000000294D0
l00000000000294C0:
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*gcControllerState).enlistWorker_exit
l00000000000294D0:
	r3 = r30
	branch r30 == 0x0000000000000000 l00000000000294D0_ds_t
	// succ:  l00000000000294D0_ds_f l00000000000294D0_ds_t
l00000000000294D0_ds_f:
	goto l00000000000294DC
	// succ:  l00000000000294DC
l00000000000294D0_ds_t:
	goto l000000000002971C
	// succ:  l000000000002971C
l00000000000294DC:
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	branch r1 == 0x0000000000000000 l00000000000294DC_ds_t
	// succ:  l00000000000294DC_ds_f l00000000000294DC_ds_t
l00000000000294DC_ds_f:
	goto l00000000000294E8
	// succ:  l00000000000294E8
l00000000000294DC_ds_t:
	goto l000000000002971C
	// succ:  l000000000002971C
l00000000000294E8:
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000B0:word64]
	branch r1 == 0x0000000000000000 l00000000000294E8_ds_t
	// succ:  l00000000000294E8_ds_f l00000000000294E8_ds_t
l00000000000294E8_ds_f:
	goto l00000000000294F8
	// succ:  l00000000000294F8
l00000000000294E8_ds_t:
	goto l000000000002971C
	// succ:  l000000000002971C
l00000000000294F8:
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = (word64) Mem0[r2 + 0x0000000000000008:int32]
	Mem0[sp + 0x0000000000000010:word32] = (word32) r2
	r2 = 0x0000000000000000
	r1 = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
l000000000002971C:
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*gcControllerState).enlistWorker_exit
runtime.(*gcControllerState).enlistWorker_exit:


// runtime.(*gcControllerState).findRunnableGCWorker
// Return size: 0
void runtime.(*gcControllerState).findRunnableGCWorker()
runtime.(*gcControllerState).findRunnableGCWorker_entry:
	// succ:  l0000000000029730
l0000000000029730:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000029730_ds_t
	// succ:  l0000000000029730_ds_f l0000000000029730_ds_t
l0000000000029730_ds_f:
	goto l0000000000029740
	// succ:  l0000000000029740
l0000000000029730_ds_t:
	goto l0000000000029754
	// succ:  l0000000000029754
l0000000000029740:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000029730
	// succ:  l0000000000029730
l0000000000029754:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006980:uint32]
runtime.(*gcControllerState).findRunnableGCWorker_exit:


// runtime.GC
// Return size: 0
void runtime.GC()
runtime.GC_entry:
	// succ:  l0000000000029A30
l0000000000029A30:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000029A30_ds_t
	// succ:  l0000000000029A30_ds_f l0000000000029A30_ds_t
l0000000000029A30_ds_f:
	goto l0000000000029A40
	// succ:  l0000000000029A40
l0000000000029A30_ds_t:
	goto l0000000000029A54
	// succ:  l0000000000029A54
l0000000000029A40:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000029A30
	// succ:  l0000000000029A30
l0000000000029A54:
	sp = sp + -24
	Mem0[sp:word64] = ra
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:byte] = (byte) r1
	call runtime.gcStart (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.GC_exit
runtime.GC_exit:


// runtime.gcStart
// Return size: 0
void runtime.gcStart()
runtime.gcStart_entry:
	// succ:  l0000000000029A88
l0000000000029A88:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000029A88_ds_t
	// succ:  l0000000000029A88_ds_f l0000000000029A88_ds_t
l0000000000029A88_ds_f:
	goto l0000000000029A98
	// succ:  l0000000000029A98
l0000000000029A88_ds_t:
	goto l0000000000029AAC
	// succ:  l0000000000029AAC
l0000000000029A98:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000029A88
	// succ:  l0000000000029A88
l0000000000029AAC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r3 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r3:word64]
	branch r1 == r30 l0000000000029AAC_ds_t
	// succ:  l0000000000029AAC_ds_f l0000000000029AAC_ds_t
l0000000000029AAC_ds_f:
	goto l0000000000029AE8
	// succ:  l0000000000029AE8
l0000000000029AAC_ds_t:
	goto l000000000002A1C8
	// succ:  l000000000002A1C8
l0000000000029AE8:
	r1 = (word64) Mem0[r3 + 0x00000000000000E0:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 != 0x0000000000000000 l0000000000029AE8_ds_t
	// succ:  l0000000000029AE8_ds_f l0000000000029AE8_ds_t
l0000000000029AE8_ds_f:
	goto l0000000000029B08
	// succ:  l0000000000029B08
l0000000000029AE8_ds_t:
	goto l000000000002A1C8
	// succ:  l000000000002A1C8
l0000000000029B08:
	r1 = Mem0[r3 + 0x00000000000000D8:word64]
	branch r1 != 0x0000000000000000 l0000000000029B08_ds_t
	// succ:  l0000000000029B08_ds_f l0000000000029B08_ds_t
l0000000000029B08_ds_f:
	goto l0000000000029B14
	// succ:  l0000000000029B14
l0000000000029B08_ds_t:
	goto l000000000002A1C8
	// succ:  l000000000002A1C8
l0000000000029B14:
	r4 = r3
	r5 = r30
	r2 = (word64) Mem0[r3 + 0x00000000000000E0:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r4 + 0x00000000000000E0:word32] = (word32) r2
	r1 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000029B14_ds_t
	// succ:  l0000000000029B14_ds_f l0000000000029B14_ds_t
l0000000000029B14_ds_f:
	goto l0000000000029B54
	// succ:  l0000000000029B54
l0000000000029B14_ds_t:
	goto l0000000000029B68
	// succ:  l0000000000029B68
l0000000000029B54:
	r1 = (word64) Mem0[r5 + 0x00000000000000E8:byte]
	branch r1 == 0x0000000000000000 l0000000000029B54_ds_t
	// succ:  l0000000000029B54_ds_f l0000000000029B54_ds_t
l0000000000029B54_ds_f:
	goto l0000000000029B60
	// succ:  l0000000000029B60
l0000000000029B54_ds_t:
	goto l0000000000029B68
	// succ:  l0000000000029B68
l0000000000029B60:
l0000000000029B68:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000029B68_ds_t
	// succ:  l0000000000029B68_ds_f l0000000000029B68_ds_t
l0000000000029B68_ds_f:
	goto l0000000000029B78
	// succ:  l0000000000029B78
l0000000000029B68_ds_t:
	goto l000000000002A0F4
	// succ:  l000000000002A0F4
l0000000000029B78:
	r1 = (word64) Mem0[sp + 0x0000000000000038:byte]
	r3 = r1 + 0x00000000000000FF
	r1 = 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006978:uint32]
l0000000000029BF8:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	branch r1 == 0x0000000000000000 l0000000000029BF8_ds_t
	// succ:  l0000000000029BF8_ds_f l0000000000029BF8_ds_t
l0000000000029BF8_ds_f:
	goto l0000000000029C04
	// succ:  l0000000000029C04
l0000000000029BF8_ds_t:
	goto l000000000002A0E4
	// succ:  l000000000002A0E4
l0000000000029C04:
	r2 = 0x0000000000000000
	goto l0000000000029C08
	// succ:  l0000000000029C08
l0000000000029C04_ds_f:
	goto l0000000000029C18
	// succ:  l0000000000029C18
l0000000000029C04_ds_t:
	goto l0000000000029D00
	// succ:  l0000000000029D00
l0000000000029C08:
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r2
	branch r1 == 0x0000000000000000 l0000000000029C04_ds_t
	goto l0000000000029C04_ds_f
	// succ:  l0000000000029C04_ds_f l0000000000029C04_ds_t
l0000000000029C18:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
l0000000000029D00:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000029D00_ds_t
	// succ:  l0000000000029D00_ds_f l0000000000029D00_ds_t
l0000000000029D00_ds_f:
	goto l0000000000029D10
	// succ:  l0000000000029D10
l0000000000029D00_ds_t:
	goto l0000000000029D3C
	// succ:  l0000000000029D3C
l0000000000029D10:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000067A0:int32]
l0000000000029D3C:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:byte] = (byte) r1
	call runtime.semacquire (retsize: 0;)
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006A50:byte]
	branch r1 == 0x0000000000000000 l0000000000029D3C_ds_t
	// succ:  l0000000000029D3C_ds_f l0000000000029D3C_ds_t
l0000000000029D3C_ds_f:
	goto l0000000000029D70
	// succ:  l0000000000029D70
l0000000000029D3C_ds_t:
	goto l0000000000029D78
	// succ:  l0000000000029D78
l0000000000029D70:
	call runtime.traceGCStart (retsize: 0;)
l0000000000029D78:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000029D78_ds_t
	// succ:  l0000000000029D78_ds_f l0000000000029D78_ds_t
l0000000000029D78_ds_f:
	goto l0000000000029D88
	// succ:  l0000000000029D88
l0000000000029D78_ds_t:
	goto l0000000000029D90
	// succ:  l0000000000029D90
l0000000000029D88:
	call runtime.gcBgMarkStartWorkers (retsize: 0;)
l0000000000029D90:
	call runtime.gcResetMarkState (retsize: 0;)
	call runtime.nanotime (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	call runtime.gcprocs (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000008:int32]
	r3 = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006974:int32]
	r2 = r1
	r1 = r3
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001630:word32] = (word32) r1
	r1 = r2
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001634:word32] = (word32) r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001638:word64] = r4
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000003F78:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001668:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001658:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000015C0:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001660:word64] = r4
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.systemstack (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.systemstack (retsize: 0;)
	call runtime.clearpools (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000029D90_ds_t
	// succ:  l0000000000029D90_ds_f l0000000000029D90_ds_t
l0000000000029D90_ds_f:
	goto l0000000000029E80
	// succ:  l0000000000029E80
l0000000000029D90_ds_t:
	goto l0000000000029FF0
	// succ:  l0000000000029FF0
l0000000000029E80:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.(*gcControllerState).startCycle (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000000178:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001680:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
l0000000000029FAC:
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	branch r1 == 0x0000000000000000 l0000000000029FAC_ds_t
	// succ:  l0000000000029FAC_ds_f l0000000000029FAC_ds_t
l0000000000029FAC_ds_f:
	goto l0000000000029FB8
	// succ:  l0000000000029FB8
l0000000000029FAC_ds_t:
	goto l0000000000029FE0
	// succ:  l0000000000029FE0
l0000000000029FB8:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.semrelease (retsize: 0;)
l0000000000029FE0:
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcStart_exit
l0000000000029FF0:
	call runtime.nanotime (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000008:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001640:word64] = r2
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001648:word64] = r2
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001668:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001680:word64] = r1
	call runtime.gcMarkTermination (retsize: 0;)
	goto l0000000000029FAC
	// succ:  l0000000000029FAC
l000000000002A0E4:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l0000000000029C08
	// succ:  l0000000000029C08
l000000000002A0F4:
	call runtime.gosweepone (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000002A0F4_ds_t
	// succ:  l000000000002A0F4_ds_f l000000000002A0F4_ds_t
l000000000002A0F4_ds_f:
	goto l000000000002A10C
	// succ:  l000000000002A10C
l000000000002A0F4_ds_t:
	goto l0000000000029BF8
	// succ:  l0000000000029BF8
l000000000002A10C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001298:uint32]
l000000000002A1C8:
	r4 = r3
	r2 = (word64) Mem0[r3 + 0x00000000000000E0:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r4 + 0x00000000000000E0:word32] = (word32) r2
	r1 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000002A1C8_ds_t
	// succ:  l000000000002A1C8_ds_f l000000000002A1C8_ds_t
l000000000002A1C8_ds_f:
	goto l000000000002A204
	// succ:  l000000000002A204
l000000000002A1C8_ds_t:
	goto l000000000002A218
	// succ:  l000000000002A218
l000000000002A204:
	r1 = (word64) Mem0[r30 + 0x00000000000000E8:byte]
	branch r1 == 0x0000000000000000 l000000000002A204_ds_t
	// succ:  l000000000002A204_ds_f l000000000002A204_ds_t
l000000000002A204_ds_f:
	goto l000000000002A210
	// succ:  l000000000002A210
l000000000002A204_ds_t:
	goto l000000000002A218
	// succ:  l000000000002A218
l000000000002A210:
l000000000002A218:
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcStart_exit
runtime.gcStart_exit:


// runtime.gcMarkDone
// Return size: 0
void runtime.gcMarkDone()
runtime.gcMarkDone_entry:
	// succ:  l000000000002A228
l000000000002A228:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002A228_ds_t
	// succ:  l000000000002A228_ds_f l000000000002A228_ds_t
l000000000002A228_ds_f:
	goto l000000000002A238
	// succ:  l000000000002A238
l000000000002A228_ds_t:
	goto l000000000002A24C
	// succ:  l000000000002A24C
l000000000002A238:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002A228
	// succ:  l000000000002A228
l000000000002A24C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:byte] = (byte) r1
	call runtime.semacquire (retsize: 0;)
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006978:uint32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.gcMarkDone_exit:


// runtime.gcMarkTermination
// Return size: 0
void runtime.gcMarkTermination()
runtime.gcMarkTermination_entry:
	// succ:  l000000000002A668
l000000000002A668:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -560
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000002A668_ds_t
	// succ:  l000000000002A668_ds_f l000000000002A668_ds_t
l000000000002A668_ds_f:
	goto l000000000002A67C
	// succ:  l000000000002A67C
l000000000002A668_ds_t:
	goto l000000000002A690
	// succ:  l000000000002A690
l000000000002A67C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002A668
	// succ:  l000000000002A668
l000000000002A690:
	sp = sp + -560
	Mem0[sp:word64] = ra
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.gcMarkTermination_exit:


// runtime.gcBgMarkStartWorkers
// Return size: 0
void runtime.gcBgMarkStartWorkers()
runtime.gcBgMarkStartWorkers_entry:
	// succ:  l000000000002B550
l000000000002B550:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002B550_ds_t
	// succ:  l000000000002B550_ds_f l000000000002B550_ds_t
l000000000002B550_ds_f:
	goto l000000000002B560
	// succ:  l000000000002B560
l000000000002B550_ds_t:
	goto l000000000002B574
	// succ:  l000000000002B574
l000000000002B560:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002B550
	// succ:  l000000000002B550
l000000000002B574:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r4 = 0x00000000000D0000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	r5 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	branch r4 != 0x0000000000000000 l000000000002B574_ds_t
	// succ:  l000000000002B574_ds_f l000000000002B574_ds_t
l000000000002B574_ds_f:
	goto l000000000002B59C
	// succ:  l000000000002B59C
l000000000002B574_ds_t:
	goto l000000000002B5A0
	// succ:  l000000000002B5A0
l000000000002B59C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000002B5A0
l000000000002B5A0:
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r5 < r2)
	branch r23 == 0x0000000000000000 l000000000002B5A0_ds_t
	// succ:  l000000000002B5A0_ds_f l000000000002B5A0_ds_t
l000000000002B5A0_ds_f:
	goto l000000000002B5B0
	// succ:  l000000000002B5B0
l000000000002B5A0_ds_t:
	goto l000000000002B694
	// succ:  l000000000002B694
l000000000002B5B0:
	Mem0[sp + 0x0000000000000030:word64] = r4
	r3 = Mem0[r4:word64]
	Mem0[sp + 0x0000000000000028:word64] = r5
	branch r3 == 0x0000000000000000 l000000000002B5B0_ds_t
	// succ:  l000000000002B5B0_ds_f l000000000002B5B0_ds_t
l000000000002B5B0_ds_f:
	goto l000000000002B5C4
	// succ:  l000000000002B5C4
l000000000002B5B0_ds_t:
	goto l000000000002B694
	// succ:  l000000000002B694
l000000000002B5C4:
	r1 = (word64) Mem0[r3 + 0x000000000000000C:uint32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l000000000002B694:
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcBgMarkStartWorkers_exit
runtime.gcBgMarkStartWorkers_exit:


// runtime.gcBgMarkWorker
// Return size: 0
void runtime.gcBgMarkWorker()
runtime.gcBgMarkWorker_entry:
	// succ:  l000000000002B6A8
l000000000002B6A8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002B6A8_ds_t
	// succ:  l000000000002B6A8_ds_f l000000000002B6A8_ds_t
l000000000002B6A8_ds_f:
	goto l000000000002B6B8
	// succ:  l000000000002B6B8
l000000000002B6A8_ds_t:
	goto l000000000002B6CC
	// succ:  l000000000002B6CC
l000000000002B6B8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002B6A8
	// succ:  l000000000002B6A8
l000000000002B6CC:
	sp = sp + -112
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000068:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[r2 + 0x00000000000000D0:word64] = r1
runtime.gcBgMarkWorker_exit:


// runtime.gcMarkWorkAvailable
// Return size: 0
void runtime.gcMarkWorkAvailable()
runtime.gcMarkWorkAvailable_entry:
	// succ:  l000000000002BF20
l000000000002BF20:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002BF20_ds_t
	// succ:  l000000000002BF20_ds_f l000000000002BF20_ds_t
l000000000002BF20_ds_f:
	goto l000000000002BF30
	// succ:  l000000000002BF30
l000000000002BF20_ds_t:
	goto l000000000002BF44
	// succ:  l000000000002BF44
l000000000002BF30:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002BF20
	// succ:  l000000000002BF20
l000000000002BF44:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = 0x0000000000000000
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l000000000002BF44_ds_t
	// succ:  l000000000002BF44_ds_f l000000000002BF44_ds_t
l000000000002BF44_ds_f:
	goto l000000000002BF60
	// succ:  l000000000002BF60
l000000000002BF44_ds_t:
	goto l000000000002BFE0
	// succ:  l000000000002BFE0
l000000000002BF60:
	branch r3 != 0x0000000000000000 l000000000002BF60_ds_t
	// succ:  l000000000002BF60_ds_f l000000000002BF60_ds_t
l000000000002BF60_ds_f:
	goto l000000000002BF68
	// succ:  l000000000002BF68
l000000000002BF60_ds_t:
	goto l000000000002BF6C
	// succ:  l000000000002BF6C
l000000000002BF68:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000002BF6C
l000000000002BF6C:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r3 = r1
	r1 = 0x0000000000000000
	r1 = Mem0[r3:word64]
	branch r1 == 0x0000000000000000 l000000000002BF6C_ds_t
	// succ:  l000000000002BF6C_ds_f l000000000002BF6C_ds_t
l000000000002BF6C_ds_f:
	goto l000000000002BF88
	// succ:  l000000000002BF88
l000000000002BF6C_ds_t:
	goto l000000000002BFA8
	// succ:  l000000000002BFA8
l000000000002BF88:
	r4 = Mem0[r3:word64]
	r1 = Mem0[r4 + 0x0000000000000010:word64]
	branch r1 != 0x0000000000000000 l000000000002BF88_ds_t
	// succ:  l000000000002BF88_ds_f l000000000002BF88_ds_t
l000000000002BF88_ds_f:
	goto l000000000002BF98
	// succ:  l000000000002BF98
l000000000002BF88_ds_t:
	goto l000000000002C088
	// succ:  l000000000002C088
l000000000002BF98:
	r3 = Mem0[r3 + 0x0000000000000008:word64]
	r1 = Mem0[r3 + 0x0000000000000010:word64]
	branch r1 != 0x0000000000000000 l000000000002BF98_ds_t
	// succ:  l000000000002BF98_ds_f l000000000002BF98_ds_t
l000000000002BF98_ds_f:
	goto l000000000002BFA8
	// succ:  l000000000002BFA8
l000000000002BF98_ds_t:
	goto l000000000002C088
	// succ:  l000000000002C088
l000000000002BFA8:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l000000000002BFB0
	// succ:  l000000000002BFB0
l000000000002BFA8_ds_f:
	goto l000000000002BFC4
	// succ:  l000000000002BFC4
l000000000002BFA8_ds_t:
	goto l000000000002BFE0
	// succ:  l000000000002BFE0
l000000000002BFB0:
	r1 = r2 + 0x00000000000000FF
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l000000000002BFA8_ds_t
	goto l000000000002BFA8_ds_f
	// succ:  l000000000002BFA8_ds_f l000000000002BFA8_ds_t
l000000000002BFC4:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcMarkWorkAvailable_exit
l000000000002BFE0:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load64 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	branch r1 == 0x0000000000000000 l000000000002BFE0_ds_t
	// succ:  l000000000002BFE0_ds_f l000000000002BFE0_ds_t
l000000000002BFE0_ds_f:
	goto l000000000002C004
	// succ:  l000000000002C004
l000000000002BFE0_ds_t:
	goto l000000000002C020
	// succ:  l000000000002C020
l000000000002C004:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcMarkWorkAvailable_exit
l000000000002C020:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001550:uint32]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 + 0x0000000000001554:uint32]
l000000000002C088:
	r2 = 0x0000000000000000
	goto l000000000002BFB0
	// succ:  l000000000002BFB0
runtime.gcMarkWorkAvailable_exit:


// runtime.gcFlushGCWork
// Return size: 0
void runtime.gcFlushGCWork()
runtime.gcFlushGCWork_entry:
	// succ:  l000000000002C098
l000000000002C098:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002C098_ds_t
	// succ:  l000000000002C098_ds_f l000000000002C098_ds_t
l000000000002C098_ds_f:
	goto l000000000002C0A8
	// succ:  l000000000002C0A8
l000000000002C098_ds_t:
	goto l000000000002C0BC
	// succ:  l000000000002C0BC
l000000000002C0A8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002C098
	// succ:  l000000000002C098
l000000000002C0BC:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r3 = 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006974:int32]
	r23 = (word64) (r3 < r1)
	branch r23 == 0x0000000000000000 l000000000002C0BC_ds_t
	// succ:  l000000000002C0BC_ds_f l000000000002C0BC_ds_t
l000000000002C0BC_ds_f:
	goto l000000000002C0E0
	// succ:  l000000000002C0E0
l000000000002C0BC_ds_t:
	goto l000000000002C16C
	// succ:  l000000000002C16C
l000000000002C0E0:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r3
	r2 = r3
l000000000002C16C:
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcFlushGCWork_exit
runtime.gcFlushGCWork_exit:


// runtime.gcMark
// Return size: 0
void runtime.gcMark()
runtime.gcMark_entry:
	// succ:  l000000000002C180
l000000000002C180:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002C180_ds_t
	// succ:  l000000000002C180_ds_f l000000000002C180_ds_t
l000000000002C180_ds_f:
	goto l000000000002C190
	// succ:  l000000000002C190
l000000000002C180_ds_t:
	goto l000000000002C1A4
	// succ:  l000000000002C1A4
l000000000002C190:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002C180
	// succ:  l000000000002C180
l000000000002C1A4:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000067C0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l000000000002C1A4_ds_t
	// succ:  l000000000002C1A4_ds_f l000000000002C1A4_ds_t
l000000000002C1A4_ds_f:
	goto l000000000002C1D0
	// succ:  l000000000002C1D0
l000000000002C1A4_ds_t:
	goto l000000000002C1D8
	// succ:  l000000000002C1D8
l000000000002C1D0:
	call runtime.tracegc (retsize: 0;)
l000000000002C1D8:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006978:uint32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.gcMark_exit:


// runtime.gcSweep
// Return size: 0
void runtime.gcSweep()
runtime.gcSweep_entry:
	// succ:  l000000000002C938
l000000000002C938:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002C938_ds_t
	// succ:  l000000000002C938_ds_f l000000000002C938_ds_t
l000000000002C938_ds_f:
	goto l000000000002C948
	// succ:  l000000000002C948
l000000000002C938_ds_t:
	goto l000000000002C95C
	// succ:  l000000000002C95C
l000000000002C948:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002C938
	// succ:  l000000000002C938
l000000000002C95C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006978:uint32]
runtime.gcSweep_exit:


// runtime.gcCopySpans
// Return size: 0
void runtime.gcCopySpans()
runtime.gcCopySpans_entry:
	// succ:  l000000000002CCB8
l000000000002CCB8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002CCB8_ds_t
	// succ:  l000000000002CCB8_ds_f l000000000002CCB8_ds_t
l000000000002CCB8_ds_f:
	goto l000000000002CCC8
	// succ:  l000000000002CCC8
l000000000002CCB8_ds_t:
	goto l000000000002CCDC
	// succ:  l000000000002CCDC
l000000000002CCC8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002CCB8
	// succ:  l000000000002CCB8
l000000000002CCDC:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000015C8:word64]
	branch r1 == 0x0000000000000000 l000000000002CCDC_ds_t
	// succ:  l000000000002CCDC_ds_f l000000000002CCDC_ds_t
l000000000002CCDC_ds_f:
	goto l000000000002CD10
	// succ:  l000000000002CD10
l000000000002CCDC_ds_t:
	goto l000000000002CE34
	// succ:  l000000000002CE34
l000000000002CD10:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000015C8:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x00000000000015D0:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000015D8:word64]
	Mem0[sp + 0x0000000000000030:word64] = r1
	r1 = r2
	Mem0[sp + 0x0000000000000020:word64] = r2
	Mem0[sp + 0x0000000000000028:word64] = r3
	r2 = r3
	r3 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r2)
	branch r23 != 0x0000000000000000 l000000000002CD10_ds_t
	// succ:  l000000000002CD10_ds_f l000000000002CD10_ds_t
l000000000002CD10_ds_f:
	goto l000000000002CD58
	// succ:  l000000000002CD58
l000000000002CD10_ds_t:
	goto l000000000002CD64
	// succ:  l000000000002CD64
l000000000002CD58:
	call runtime.panicindex (retsize: 0;)
l000000000002CD64:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000011E0:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x00000000000011E8:word64]
	r4 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r3)
	branch r23 != 0x0000000000000000 l000000000002CD64_ds_t
	// succ:  l000000000002CD64_ds_f l000000000002CD64_ds_t
l000000000002CD64_ds_f:
	goto l000000000002CD8C
	// succ:  l000000000002CD8C
l000000000002CD64_ds_t:
	goto l000000000002CD98
	// succ:  l000000000002CD98
l000000000002CD8C:
	call runtime.panicindex (retsize: 0;)
l000000000002CD98:
	branch r1 == r2 l000000000002CD98_ds_t
	// succ:  l000000000002CD98_ds_f l000000000002CD98_ds_t
l000000000002CD98_ds_f:
	goto l000000000002CDA0
	// succ:  l000000000002CDA0
l000000000002CD98_ds_t:
	goto l000000000002CE34
	// succ:  l000000000002CE34
l000000000002CDA0:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r4 = Mem0[r23 + 0x00000000000015D0:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000015C8:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x00000000000015D0:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000015D8:word64]
	Mem0[sp + 0x0000000000000030:word64] = r1
	r1 = r2
	Mem0[sp + 0x0000000000000020:word64] = r2
	Mem0[sp + 0x0000000000000028:word64] = r3
	r2 = r3
	r3 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r2)
	branch r23 != 0x0000000000000000 l000000000002CDA0_ds_t
	// succ:  l000000000002CDA0_ds_f l000000000002CDA0_ds_t
l000000000002CDA0_ds_f:
	goto l000000000002CDF4
	// succ:  l000000000002CDF4
l000000000002CDA0_ds_t:
	goto l000000000002CE00
	// succ:  l000000000002CE00
l000000000002CDF4:
	call runtime.panicindex (retsize: 0;)
l000000000002CE00:
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000002CE34:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007CE8:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l000000000002CE34_ds_t
	// succ:  l000000000002CE34_ds_f l000000000002CE34_ds_t
l000000000002CE34_ds_f:
	goto l000000000002CE58
	// succ:  l000000000002CE58
l000000000002CE34_ds_t:
	goto l000000000002CF10
	// succ:  l000000000002CF10
l000000000002CE58:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000007CF0:word64] = r1
	goto l000000000002CE64
	// succ:  l000000000002CE64
l000000000002CE58_ds_f:
	goto l000000000002CEB8
	// succ:  l000000000002CEB8
l000000000002CE58_ds_t:
	goto l000000000002CEEC
	// succ:  l000000000002CEEC
l000000000002CE64:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011E8:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000015D0:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011F0:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000015D8:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011E0:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l000000000002CE58_ds_t
	goto l000000000002CE58_ds_f
	// succ:  l000000000002CE58_ds_f l000000000002CE58_ds_t
l000000000002CEB8:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000015C8:word64] = r1
	// succ:  l000000000002CEC4
l000000000002CEC4:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcCopySpans_exit
l000000000002CEEC:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	goto l000000000002CEC4
	// succ:  l000000000002CEC4
l000000000002CF10:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	goto l000000000002CE64
	// succ:  l000000000002CE64
runtime.gcCopySpans_exit:


// runtime.gcResetMarkState
// Return size: 0
void runtime.gcResetMarkState()
runtime.gcResetMarkState_entry:
	// succ:  l000000000002CF38
l000000000002CF38:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002CF38_ds_t
	// succ:  l000000000002CF38_ds_f l000000000002CF38_ds_t
l000000000002CF38_ds_f:
	goto l000000000002CF48
	// succ:  l000000000002CF48
l000000000002CF38_ds_t:
	goto l000000000002CF5C
	// succ:  l000000000002CF5C
l000000000002CF48:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002CF38
	// succ:  l000000000002CF38
l000000000002CF5C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006978:uint32]
runtime.gcResetMarkState_exit:


// runtime.clearpools
// Return size: 0
void runtime.clearpools()
runtime.clearpools_entry:
	// succ:  l000000000002D0F8
l000000000002D0F8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002D0F8_ds_t
	// succ:  l000000000002D0F8_ds_f l000000000002D0F8_ds_t
l000000000002D0F8_ds_f:
	goto l000000000002D108
	// succ:  l000000000002D108
l000000000002D0F8_ds_t:
	goto l000000000002D11C
	// succ:  l000000000002D11C
l000000000002D108:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002D0F8
	// succ:  l000000000002D0F8
l000000000002D11C:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010D8:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000002D11C_ds_t
	// succ:  l000000000002D11C_ds_f l000000000002D11C_ds_t
l000000000002D11C_ds_f:
	goto l000000000002D13C
	// succ:  l000000000002D13C
l000000000002D11C_ds_t:
	goto l000000000002D154
	// succ:  l000000000002D154
l000000000002D13C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r22 = Mem0[r23 + 0x00000000000010D8:word64]
	r1 = Mem0[r22:word64]
	call r1 (retsize: 0;)
l000000000002D154:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000001488:word64]
	branch r3 == 0x0000000000000000 l000000000002D154_ds_t
	// succ:  l000000000002D154_ds_f l000000000002D154_ds_t
l000000000002D154_ds_f:
	goto l000000000002D190
	// succ:  l000000000002D190
l000000000002D154_ds_t:
	goto l000000000002D1A4
	// succ:  l000000000002D1A4
l000000000002D190:
	r4 = Mem0[r3 + 0x0000000000000010:word64]
	Mem0[r3 + 0x0000000000000010:word64] = 0x0000000000000000
	r3 = r4
	branch r3 != 0x0000000000000000 l000000000002D190_ds_t
	// succ:  l000000000002D190_ds_f l000000000002D190_ds_t
l000000000002D190_ds_f:
	goto l000000000002D1A4
	// succ:  l000000000002D1A4
l000000000002D190_ds_t:
	goto l000000000002D190
	// succ:  l000000000002D190
l000000000002D1A4:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001488:word64] = 0x0000000000000000
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r4 = 0x0000000000000000
	lo = r7 / 0x0000000000000000
	hi = r7 % 0x0000000000000000
	r23 = (word64) (r4 < r7)
	branch r23 == 0x0000000000000000 l000000000002D1A4_ds_t
	// succ:  l000000000002D1A4_ds_f l000000000002D1A4_ds_t
l000000000002D1A4_ds_f:
	goto l000000000002D214
	// succ:  l000000000002D214
l000000000002D1A4_ds_t:
	goto l000000000002D2BC
	// succ:  l000000000002D2BC
l000000000002D214:
	r6 = r4
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r4
	r23 = (word64) (r4 <u r3)
	branch r23 != 0x0000000000000000 l000000000002D214_ds_t
	// succ:  l000000000002D214_ds_f l000000000002D214_ds_t
l000000000002D214_ds_f:
	goto l000000000002D238
	// succ:  l000000000002D238
l000000000002D214_ds_t:
	goto l000000000002D244
	// succ:  l000000000002D244
l000000000002D238:
	call runtime.panicindex (retsize: 0;)
l000000000002D244:
l000000000002D2BC:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.clearpools_exit
runtime.clearpools_exit:


// runtime.gchelper
// Return size: 0
void runtime.gchelper()
runtime.gchelper_entry:
	// succ:  l000000000002D2F8
l000000000002D2F8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002D2F8_ds_t
	// succ:  l000000000002D2F8_ds_f l000000000002D2F8_ds_t
l000000000002D2F8_ds_f:
	goto l000000000002D308
	// succ:  l000000000002D308
l000000000002D2F8_ds_t:
	goto l000000000002D31C
	// succ:  l000000000002D31C
l000000000002D308:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002D2F8
	// succ:  l000000000002D2F8
l000000000002D31C:
	sp = sp + -56
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000030:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[r2 + 0x00000000000002F9:byte] = (byte) r1
	call runtime.gchelperstart (retsize: 0;)
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006A50:byte]
	branch r1 == 0x0000000000000000 l000000000002D31C_ds_t
	// succ:  l000000000002D31C_ds_f l000000000002D31C_ds_t
l000000000002D31C_ds_f:
	goto l000000000002D354
	// succ:  l000000000002D354
l000000000002D31C_ds_t:
	goto l000000000002D35C
	// succ:  l000000000002D35C
l000000000002D354:
	call runtime.traceGCScanStart (retsize: 0;)
l000000000002D35C:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006978:uint32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.gchelper_exit:


// runtime.gchelperstart
// Return size: 0
void runtime.gchelperstart()
runtime.gchelperstart_entry:
	// succ:  l000000000002D4D0
l000000000002D4D0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002D4D0_ds_t
	// succ:  l000000000002D4D0_ds_f l000000000002D4D0_ds_t
l000000000002D4D0_ds_f:
	goto l000000000002D4E0
	// succ:  l000000000002D4E0
l000000000002D4D0_ds_t:
	goto l000000000002D4F4
	// succ:  l000000000002D4F4
l000000000002D4E0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002D4D0
	// succ:  l000000000002D4D0
l000000000002D4F4:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r3 = r30
	Mem0[sp + 0x0000000000000018:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000F0:int32]
	r2 = 0x0000000000000000
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 != 0x0000000000000000 l000000000002D4F4_ds_t
	// succ:  l000000000002D4F4_ds_f l000000000002D4F4_ds_t
l000000000002D4F4_ds_f:
	goto l000000000002D524
	// succ:  l000000000002D524
l000000000002D4F4_ds_t:
	goto l000000000002D58C
	// succ:  l000000000002D58C
l000000000002D524:
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000F0:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 == 0x0000000000000000 l000000000002D524_ds_t
	// succ:  l000000000002D524_ds_f l000000000002D524_ds_t
l000000000002D524_ds_f:
	goto l000000000002D548
	// succ:  l000000000002D548
l000000000002D524_ds_t:
	goto l000000000002D58C
	// succ:  l000000000002D58C
l000000000002D548:
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	r2 = r3
	branch r1 == r3 l000000000002D548_ds_t
	// succ:  l000000000002D548_ds_f l000000000002D548_ds_t
l000000000002D548_ds_f:
	goto l000000000002D55C
	// succ:  l000000000002D55C
l000000000002D548_ds_t:
	goto l000000000002D57C
	// succ:  l000000000002D57C
l000000000002D55C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000002D57C:
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gchelperstart_exit
l000000000002D58C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.gchelperstart_exit:


// runtime.itoaDiv
// Return size: 0
void runtime.itoaDiv()
runtime.itoaDiv_entry:
	// succ:  l000000000002D5B8
l000000000002D5B8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002D5B8_ds_t
	// succ:  l000000000002D5B8_ds_f l000000000002D5B8_ds_t
l000000000002D5B8_ds_f:
	goto l000000000002D5C8
	// succ:  l000000000002D5C8
l000000000002D5B8_ds_t:
	goto l000000000002D5DC
	// succ:  l000000000002D5DC
l000000000002D5C8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002D5B8
	// succ:  l000000000002D5B8
l000000000002D5DC:
	sp = sp + -8
	Mem0[sp:word64] = ra
	r8 = Mem0[sp + 0x0000000000000010:word64]
	r7 = Mem0[sp + 0x0000000000000018:word64]
	r6 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.itoaDiv_exit:


// runtime.fmtNSAsMS
// Return size: 0
void runtime.fmtNSAsMS()
runtime.fmtNSAsMS_entry:
	// succ:  l000000000002D7B0
l000000000002D7B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002D7B0_ds_t
	// succ:  l000000000002D7B0_ds_f l000000000002D7B0_ds_t
l000000000002D7B0_ds_f:
	goto l000000000002D7C0
	// succ:  l000000000002D7C0
l000000000002D7B0_ds_t:
	goto l000000000002D7D4
	// succ:  l000000000002D7D4
l000000000002D7C0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002D7B0
	// succ:  l000000000002D7B0
l000000000002D7D4:
	sp = sp + -72
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000068:word64]
	r7 = Mem0[sp + 0x0000000000000058:word64]
	r6 = Mem0[sp + 0x0000000000000060:word64]
	r5 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000070:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000078:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000080:word64] = 0x0000000000000000
	r2 = 0x0000000000980000
	r2 = r2 | 0x0000000000009680
	r23 = (word64) (r3 <u r2)
	branch r23 != 0x0000000000000000 l000000000002D7D4_ds_t
	// succ:  l000000000002D7D4_ds_f l000000000002D7D4_ds_t
l000000000002D7D4_ds_f:
	goto l000000000002D80C
	// succ:  l000000000002D80C
l000000000002D7D4_ds_t:
	goto l000000000002D880
	// succ:  l000000000002D880
l000000000002D80C:
	Mem0[sp + 0x0000000000000008:word64] = r5
	Mem0[sp + 0x0000000000000010:word64] = r7
	Mem0[sp + 0x0000000000000018:word64] = r6
	r1 = r3
	r2 = r3
	r3 = 0x00000000000F0000
	r3 = r3 | 0x0000000000004240
	branch r3 != 0x0000000000000000 l000000000002D80C_ds_t
	// succ:  l000000000002D80C_ds_f l000000000002D80C_ds_t
l000000000002D80C_ds_f:
	goto l000000000002D830
	// succ:  l000000000002D830
l000000000002D80C_ds_t:
	goto l000000000002D83C
	// succ:  l000000000002D83C
l000000000002D830:
	call runtime.panicdivide (retsize: 0;)
l000000000002D83C:
	lo = r2 / r3
	hi = r2 % r3
	r2 = lo
	Mem0[sp + 0x0000000000000020:word64] = r2
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	call runtime.itoaDiv (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000070:word64] = r4
	Mem0[sp + 0x0000000000000078:word64] = r3
	Mem0[sp + 0x0000000000000080:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 72
	call r4 (retsize: 0;)
	return
	// succ:  runtime.fmtNSAsMS_exit
l000000000002D880:
	r1 = r3
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000002D880_ds_t
	// succ:  l000000000002D880_ds_f l000000000002D880_ds_t
l000000000002D880_ds_f:
	goto l000000000002D894
	// succ:  l000000000002D894
l000000000002D880_ds_t:
	goto l000000000002D8A0
	// succ:  l000000000002D8A0
l000000000002D894:
	call runtime.panicdivide (retsize: 0;)
l000000000002D8A0:
	lo = r2 / r3
	hi = r2 % r3
	r3 = lo
	branch r3 != 0x0000000000000000 l000000000002D8A0_ds_t
	// succ:  l000000000002D8A0_ds_f l000000000002D8A0_ds_t
l000000000002D8A0_ds_f:
	goto l000000000002D8B0
	// succ:  l000000000002D8B0
l000000000002D8A0_ds_t:
	goto l000000000002D928
	// succ:  l000000000002D928
l000000000002D8B0:
	r1 = r5
	r2 = r7
	r3 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r7)
	branch r23 != 0x0000000000000000 l000000000002D8B0_ds_t
	// succ:  l000000000002D8B0_ds_f l000000000002D8B0_ds_t
l000000000002D8B0_ds_f:
	goto l000000000002D8C8
	// succ:  l000000000002D8C8
l000000000002D8B0_ds_t:
	goto l000000000002D8D4
	// succ:  l000000000002D8D4
l000000000002D8C8:
	call runtime.panicindex (retsize: 0;)
l000000000002D8D4:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	Mem0[r5:byte] = (byte) r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r6
	r23 = (word64) (r6 <u r2)
	branch r23 != 0x0000000000000000 l000000000002D8D4_ds_t
	// succ:  l000000000002D8D4_ds_f l000000000002D8D4_ds_t
l000000000002D8D4_ds_f:
	goto l000000000002D8F4
	// succ:  l000000000002D8F4
l000000000002D8D4_ds_t:
	goto l000000000002D914
	// succ:  l000000000002D914
l000000000002D8F4:
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	Mem0[sp + 0x0000000000000070:word64] = r5
	Mem0[sp + 0x0000000000000078:word64] = r4
	Mem0[sp + 0x0000000000000080:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 72
	call r4 (retsize: 0;)
	return
	// succ:  runtime.fmtNSAsMS_exit
l000000000002D914:
	call runtime.panicslice (retsize: 0;)
l000000000002D928:
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r3 <u r2)
	branch r23 != 0x0000000000000000 l000000000002D928_ds_t
	// succ:  l000000000002D928_ds_f l000000000002D928_ds_t
l000000000002D928_ds_f:
	goto l000000000002D93C
	// succ:  l000000000002D93C
l000000000002D928_ds_t:
	goto l000000000002D980
	// succ:  l000000000002D980
l000000000002D93C:
	r1 = r3
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000002D93C_ds_t
	// succ:  l000000000002D93C_ds_f l000000000002D93C_ds_t
l000000000002D93C_ds_f:
	goto l000000000002D950
	// succ:  l000000000002D950
l000000000002D93C_ds_t:
	goto l000000000002D95C
	// succ:  l000000000002D95C
l000000000002D950:
	call runtime.panicdivide (retsize: 0;)
l000000000002D95C:
	lo = r2 / r3
	hi = r2 % r3
	r3 = lo
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l000000000002D980:
	Mem0[sp + 0x0000000000000008:word64] = r5
	Mem0[sp + 0x0000000000000010:word64] = r7
	Mem0[sp + 0x0000000000000018:word64] = r6
	Mem0[sp + 0x0000000000000020:word64] = r3
	r1 = r4
	Mem0[sp + 0x0000000000000028:word64] = r4
	call runtime.itoaDiv (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000070:word64] = r4
	Mem0[sp + 0x0000000000000078:word64] = r3
	Mem0[sp + 0x0000000000000080:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 72
	call r4 (retsize: 0;)
	return
	// succ:  runtime.fmtNSAsMS_exit
runtime.fmtNSAsMS_exit:


// runtime.gcMarkRootPrepare
// Return size: 0
void runtime.gcMarkRootPrepare()
runtime.gcMarkRootPrepare_entry:
	// succ:  l000000000002D9C8
l000000000002D9C8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002D9C8_ds_t
	// succ:  l000000000002D9C8_ds_f l000000000002D9C8_ds_t
l000000000002D9C8_ds_f:
	goto l000000000002D9D8
	// succ:  l000000000002D9D8
l000000000002D9C8_ds_t:
	goto l000000000002D9EC
	// succ:  l000000000002D9EC
l000000000002D9D8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002D9C8
	// succ:  l000000000002D9C8
l000000000002D9EC:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000018:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001578:word64] = 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001580:word64] = 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x00000000000015A0:byte]
	branch r1 != 0x0000000000000000 l000000000002D9EC_ds_t
	// succ:  l000000000002D9EC_ds_f l000000000002D9EC_ds_t
l000000000002D9EC_ds_f:
	goto l000000000002DA30
	// succ:  l000000000002DA30
l000000000002D9EC_ds_t:
	goto l000000000002DB10
	// succ:  l000000000002DB10
l000000000002DA30:
	r3 = 0x00000000000D0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	branch r3 == 0x0000000000000000 l000000000002DA30_ds_t
	// succ:  l000000000002DA30_ds_f l000000000002DA30_ds_t
l000000000002DA30_ds_f:
	goto l000000000002DA44
	// succ:  l000000000002DA44
l000000000002DA30_ds_t:
	goto l000000000002DAA0
	// succ:  l000000000002DAA0
l000000000002DA44:
	r1 = Mem0[r3 + 0x0000000000000088:word64]
	Mem0[sp + 0x0000000000000028:word64] = r3
	r2 = Mem0[r3 + 0x0000000000000080:word64]
l000000000002DAA0:
	r3 = 0x00000000000D0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	branch r3 == 0x0000000000000000 l000000000002DAA0_ds_t
	// succ:  l000000000002DAA0_ds_f l000000000002DAA0_ds_t
l000000000002DAA0_ds_f:
	goto l000000000002DAB4
	// succ:  l000000000002DAB4
l000000000002DAA0_ds_t:
	goto l000000000002DB10
	// succ:  l000000000002DB10
l000000000002DAB4:
	r1 = Mem0[r3 + 0x0000000000000098:word64]
	Mem0[sp + 0x0000000000000020:word64] = r3
	r2 = Mem0[r3 + 0x0000000000000090:word64]
l000000000002DB10:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x00000000000015A0:byte]
	branch r1 != 0x0000000000000000 l000000000002DB10_ds_t
	// succ:  l000000000002DB10_ds_f l000000000002DB10_ds_t
l000000000002DB10_ds_f:
	goto l000000000002DB24
	// succ:  l000000000002DB24
l000000000002DB10_ds_t:
	goto l000000000002DC30
	// succ:  l000000000002DC30
l000000000002DB24:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000015D0:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l000000000002DBA4:
l000000000002DC30:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001588:word64] = 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001590:word64] = 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001620:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001598:word64] = r1
	goto l000000000002DBA4
	// succ:  l000000000002DBA4
runtime.gcMarkRootPrepare_exit:


// runtime.gcMarkRootCheck
// Return size: 0
void runtime.gcMarkRootCheck()
runtime.gcMarkRootCheck_entry:
	// succ:  l000000000002DC68
l000000000002DC68:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002DC68_ds_t
	// succ:  l000000000002DC68_ds_f l000000000002DC68_ds_t
l000000000002DC68_ds_f:
	goto l000000000002DC78
	// succ:  l000000000002DC78
l000000000002DC68_ds_t:
	goto l000000000002DC8C
	// succ:  l000000000002DC8C
l000000000002DC78:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002DC68
	// succ:  l000000000002DC68
l000000000002DC8C:
	sp = sp + -88
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001550:uint32]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 + 0x0000000000001554:uint32]
runtime.gcMarkRootCheck_exit:


// runtime.markroot
// Return size: 0
void runtime.markroot()
runtime.markroot_entry:
	// succ:  l000000000002E140
l000000000002E140:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -144
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000002E140_ds_t
	// succ:  l000000000002E140_ds_f l000000000002E140_ds_t
l000000000002E140_ds_f:
	goto l000000000002E154
	// succ:  l000000000002E154
l000000000002E140_ds_t:
	goto l000000000002E168
	// succ:  l000000000002E168
l000000000002E154:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002E140
	// succ:  l000000000002E140
l000000000002E168:
	sp = sp + -144
	Mem0[sp:word64] = ra
	r4 = (word64) Mem0[sp + 0x00000000000000A0:uint32]
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
runtime.markroot_exit:


// runtime.markrootBlock
// Return size: 0
void runtime.markrootBlock()
runtime.markrootBlock_entry:
	// succ:  l000000000002E9A8
l000000000002E9A8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002E9A8_ds_t
	// succ:  l000000000002E9A8_ds_f l000000000002E9A8_ds_t
l000000000002E9A8_ds_f:
	goto l000000000002E9B8
	// succ:  l000000000002E9B8
l000000000002E9A8_ds_t:
	goto l000000000002E9CC
	// succ:  l000000000002E9CC
l000000000002E9B8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002E9A8
	// succ:  l000000000002E9A8
l000000000002E9CC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000050:word64]
	r8 = Mem0[sp + 0x0000000000000038:word64]
	r6 = Mem0[sp + 0x0000000000000030:word64]
runtime.markrootBlock_exit:


// runtime.markrootFreeGStacks
// Return size: 0
void runtime.markrootFreeGStacks()
runtime.markrootFreeGStacks_entry:
	// succ:  l000000000002EA70
l000000000002EA70:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002EA70_ds_t
	// succ:  l000000000002EA70_ds_f l000000000002EA70_ds_t
l000000000002EA70_ds_f:
	goto l000000000002EA80
	// succ:  l000000000002EA80
l000000000002EA70_ds_t:
	goto l000000000002EA94
	// succ:  l000000000002EA94
l000000000002EA80:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002EA70
	// succ:  l000000000002EA70
l000000000002EA94:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001468:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001468:word64] = 0x0000000000000000
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	branch r3 != 0x0000000000000000 l000000000002EA94_ds_t
	// succ:  l000000000002EA94_ds_f l000000000002EA94_ds_t
l000000000002EA94_ds_f:
	goto l000000000002EB14
	// succ:  l000000000002EB14
l000000000002EA94_ds_t:
	goto l000000000002EB24
	// succ:  l000000000002EB24
l000000000002EB14:
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.markrootFreeGStacks_exit
l000000000002EB24:
	Mem0[sp + 0x0000000000000018:word64] = r3
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l000000000002EB24_ds_t
	// succ:  l000000000002EB24_ds_f l000000000002EB24_ds_t
l000000000002EB24_ds_f:
	goto l000000000002EB34
	// succ:  l000000000002EB34
l000000000002EB24_ds_t:
	goto l000000000002EB60
	// succ:  l000000000002EB60
l000000000002EB34:
	r1 = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.shrinkstack (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	r3 = Mem0[r2 + 0x00000000000000E0:word64]
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000002EB34_ds_t
	// succ:  l000000000002EB34_ds_f l000000000002EB34_ds_t
l000000000002EB34_ds_f:
	goto l000000000002EB60
	// succ:  l000000000002EB60
l000000000002EB34_ds_t:
	goto l000000000002EB34
	// succ:  l000000000002EB34
l000000000002EB60:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
runtime.markrootFreeGStacks_exit:


// runtime.markrootSpans
// Return size: 0
void runtime.markrootSpans()
runtime.markrootSpans_entry:
	// succ:  l000000000002EC38
l000000000002EC38:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -152
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000002EC38_ds_t
	// succ:  l000000000002EC38_ds_f l000000000002EC38_ds_t
l000000000002EC38_ds_f:
	goto l000000000002EC4C
	// succ:  l000000000002EC4C
l000000000002EC38_ds_t:
	goto l000000000002EC60
	// succ:  l000000000002EC60
l000000000002EC4C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002EC38
	// succ:  l000000000002EC38
l000000000002EC60:
	sp = sp + -152
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x00000000000015A0:byte]
	branch r1 == 0x0000000000000000 l000000000002EC60_ds_t
	// succ:  l000000000002EC60_ds_f l000000000002EC60_ds_t
l000000000002EC60_ds_f:
	goto l000000000002EC7C
	// succ:  l000000000002EC7C
l000000000002EC60_ds_t:
	goto l000000000002EC9C
	// succ:  l000000000002EC9C
l000000000002EC7C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000002EC9C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000007CFC:uint32]
	Mem0[sp + 0x0000000000000028:word32] = (word32) r1
	r5 = Mem0[sp + 0x00000000000000A8:word64]
runtime.markrootSpans_exit:


// runtime.gcAssistAlloc
// Return size: 0
void runtime.gcAssistAlloc()
runtime.gcAssistAlloc_entry:
	// succ:  l000000000002F058
l000000000002F058:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002F058_ds_t
	// succ:  l000000000002F058_ds_f l000000000002F058_ds_t
l000000000002F058_ds_f:
	goto l000000000002F068
	// succ:  l000000000002F068
l000000000002F058_ds_t:
	goto l000000000002F07C
	// succ:  l000000000002F07C
l000000000002F068:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002F058
	// succ:  l000000000002F058
l000000000002F07C:
	sp = sp + -128
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000088:word64]
	r3 = Mem0[r4 + 0x0000000000000030:word64]
	r2 = Mem0[r3:word64]
	branch r30 != r2 l000000000002F07C_ds_t
	// succ:  l000000000002F07C_ds_f l000000000002F07C_ds_t
l000000000002F07C_ds_f:
	goto l000000000002F098
	// succ:  l000000000002F098
l000000000002F07C_ds_t:
	goto l000000000002F0A8
	// succ:  l000000000002F0A8
l000000000002F098:
	r4 = Mem0[sp:word64]
	sp = sp + 128
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcAssistAlloc_exit
l000000000002F0A8:
	r3 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r3 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 != 0x0000000000000000 l000000000002F0A8_ds_t
	// succ:  l000000000002F0A8_ds_f l000000000002F0A8_ds_t
l000000000002F0A8_ds_f:
	goto l000000000002F0C8
	// succ:  l000000000002F0C8
l000000000002F0A8_ds_t:
	goto l000000000002F544
	// succ:  l000000000002F544
l000000000002F0C8:
	r1 = Mem0[r3 + 0x00000000000000D8:word64]
	branch r1 != 0x0000000000000000 l000000000002F0C8_ds_t
	// succ:  l000000000002F0C8_ds_f l000000000002F0C8_ds_t
l000000000002F0C8_ds_f:
	goto l000000000002F0D4
	// succ:  l000000000002F0D4
l000000000002F0C8_ds_t:
	goto l000000000002F544
	// succ:  l000000000002F544
l000000000002F0D4:
	r1 = Mem0[r4 + 0x0000000000000188:word64]
l000000000002F544:
	r4 = Mem0[sp:word64]
	sp = sp + 128
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcAssistAlloc_exit
runtime.gcAssistAlloc_exit:


// runtime.gcWakeAllAssists
// Return size: 0
void runtime.gcWakeAllAssists()
runtime.gcWakeAllAssists_entry:
	// succ:  l000000000002F558
l000000000002F558:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002F558_ds_t
	// succ:  l000000000002F558_ds_f l000000000002F558_ds_t
l000000000002F558_ds_f:
	goto l000000000002F568
	// succ:  l000000000002F568
l000000000002F558_ds_t:
	goto l000000000002F57C
	// succ:  l000000000002F57C
l000000000002F568:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002F558
	// succ:  l000000000002F558
l000000000002F57C:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001600:word64]
	r2 = r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.injectglist (retsize: 0;)
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[r1:word64] = 0x0000000000000000
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	r3 = 0x0000000000000000
	Mem0[r1:word64] = 0x0000000000000000
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcWakeAllAssists_exit
runtime.gcWakeAllAssists_exit:


// runtime.gcFlushBgCredit
// Return size: 0
void runtime.gcFlushBgCredit()
runtime.gcFlushBgCredit_entry:
	// succ:  l000000000002F648
l000000000002F648:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000002F648_ds_t
	// succ:  l000000000002F648_ds_f l000000000002F648_ds_t
l000000000002F648_ds_f:
	goto l000000000002F658
	// succ:  l000000000002F658
l000000000002F648_ds_t:
	goto l000000000002F66C
	// succ:  l000000000002F66C
l000000000002F658:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000002F648
	// succ:  l000000000002F648
l000000000002F66C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001600:word64]
	branch r1 != 0x0000000000000000 l000000000002F66C_ds_t
	// succ:  l000000000002F66C_ds_f l000000000002F66C_ds_t
l000000000002F66C_ds_f:
	goto l000000000002F68C
	// succ:  l000000000002F68C
l000000000002F66C_ds_t:
	goto l000000000002F6CC
	// succ:  l000000000002F6CC
l000000000002F68C:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime/internal/atomic.Xaddint64 (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcFlushBgCredit_exit
l000000000002F6CC:
runtime.gcFlushBgCredit_exit:


// runtime.scanstack
// Return size: 0
void runtime.scanstack()
runtime.scanstack_entry:
	// succ:  l000000000002F900
l000000000002F900:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000018:word64]
	r2 = sp + -504
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000002F900_ds_t
	// succ:  l000000000002F900_ds_f l000000000002F900_ds_t
l000000000002F900_ds_f:
	goto l000000000002F914
	// succ:  l000000000002F914
l000000000002F900_ds_t:
	goto l000000000002F928
	// succ:  l000000000002F928
l000000000002F914:
	r3 = ra
	call runtime.morestackc (retsize: 0;)
	goto l000000000002F900
	// succ:  l000000000002F900
l000000000002F928:
	sp = sp + -504
	Mem0[sp:word64] = ra
	r2 = Mem0[sp + 0x0000000000000200:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000EC:byte]
	branch r1 == 0x0000000000000000 l000000000002F928_ds_t
	// succ:  l000000000002F928_ds_f l000000000002F928_ds_t
l000000000002F928_ds_f:
	goto l000000000002F940
	// succ:  l000000000002F940
l000000000002F928_ds_t:
	goto l000000000002F950
	// succ:  l000000000002F950
l000000000002F940:
	r4 = Mem0[sp:word64]
	sp = sp + 504
	call r4 (retsize: 0;)
	return
	// succ:  runtime.scanstack_exit
l000000000002F950:
	r1 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.readgstatus (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.scanstack_exit:


// runtime.scanframeworker
// Return size: 0
void runtime.scanframeworker()
runtime.scanframeworker_entry:
	// succ:  l00000000000302A8
l00000000000302A8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -168
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000302A8_ds_t
	// succ:  l00000000000302A8_ds_f l00000000000302A8_ds_t
l00000000000302A8_ds_f:
	goto l00000000000302BC
	// succ:  l00000000000302BC
l00000000000302A8_ds_t:
	goto l00000000000302D0
	// succ:  l00000000000302D0
l00000000000302BC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000302A8
	// succ:  l00000000000302A8
l00000000000302D0:
	sp = sp + -168
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x00000000000000B0:word64]
	r4 = Mem0[r3:word64]
	r3 = Mem0[r3 + 0x0000000000000010:word64]
	branch r3 != 0x0000000000000000 l00000000000302D0_ds_t
	// succ:  l00000000000302D0_ds_f l00000000000302D0_ds_t
l00000000000302D0_ds_f:
	goto l00000000000302EC
	// succ:  l00000000000302EC
l00000000000302D0_ds_t:
	goto l00000000000302FC
	// succ:  l00000000000302FC
l00000000000302EC:
	r4 = Mem0[sp:word64]
	sp = sp + 168
	call r4 (retsize: 0;)
	return
	// succ:  runtime.scanframeworker_exit
l00000000000302FC:
	r1 = Mem0[r4:word64]
	r2 = r3
	branch r1 == r3 l00000000000302FC_ds_t
	// succ:  l00000000000302FC_ds_f l00000000000302FC_ds_t
l00000000000302FC_ds_f:
	goto l000000000003030C
	// succ:  l000000000003030C
l00000000000302FC_ds_t:
	goto l0000000000030318
	// succ:  l0000000000030318
l000000000003030C:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l0000000000030318:
	Mem0[sp + 0x0000000000000070:word64] = r4
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
	Mem0[sp + 0x0000000000000040:word64] = r3
	Mem0[sp + 0x0000000000000018:word64] = r3
	r1 = Mem0[sp + 0x00000000000000B8:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	call runtime.pcdatavalue (retsize: 0;)
	r3 = Mem0[sp + 0x00000000000000B0:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000028:int32]
	r2 = r1
	r1 = r2
	Mem0[sp + 0x0000000000000030:word32] = (word32) r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000030318_ds_t
	// succ:  l0000000000030318_ds_f l0000000000030318_ds_t
l0000000000030318_ds_f:
	goto l000000000003036C
	// succ:  l000000000003036C
l0000000000030318_ds_t:
	goto l0000000000030374
	// succ:  l0000000000030374
l000000000003036C:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word32] = (word32) r1
	// succ:  l0000000000030374
l0000000000030374:
	r1 = Mem0[r3 + 0x0000000000000030:word64]
	r2 = Mem0[r3 + 0x0000000000000020:word64]
runtime.scanframeworker_exit:


// runtime.queueRescan
// Return size: 0
void runtime.queueRescan()
runtime.queueRescan_entry:
	// succ:  l0000000000030AB0
l0000000000030AB0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000030AB0_ds_t
	// succ:  l0000000000030AB0_ds_f l0000000000030AB0_ds_t
l0000000000030AB0_ds_f:
	goto l0000000000030AC0
	// succ:  l0000000000030AC0
l0000000000030AB0_ds_t:
	goto l0000000000030AD4
	// succ:  l0000000000030AD4
l0000000000030AC0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000030AB0
	// succ:  l0000000000030AB0
l0000000000030AD4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006978:uint32]
runtime.queueRescan_exit:


// runtime.dequeueRescan
// Return size: 0
void runtime.dequeueRescan()
runtime.dequeueRescan_entry:
	// succ:  l0000000000030D38
l0000000000030D38:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000030D38_ds_t
	// succ:  l0000000000030D38_ds_f l0000000000030D38_ds_t
l0000000000030D38_ds_f:
	goto l0000000000030D48
	// succ:  l0000000000030D48
l0000000000030D38_ds_t:
	goto l0000000000030D5C
	// succ:  l0000000000030D5C
l0000000000030D48:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000030D38
	// succ:  l0000000000030D38
l0000000000030D5C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = (word64) Mem0[r3 + 0x0000000000000180:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000030D5C_ds_t
	// succ:  l0000000000030D5C_ds_f l0000000000030D5C_ds_t
l0000000000030D5C_ds_f:
	goto l0000000000030D84
	// succ:  l0000000000030D84
l0000000000030D5C_ds_t:
	goto l0000000000030D94
	// succ:  l0000000000030D94
l0000000000030D84:
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.dequeueRescan_exit
l0000000000030D94:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006978:uint32]
runtime.dequeueRescan_exit:


// runtime.gcDrain
// Return size: 0
void runtime.gcDrain()
runtime.gcDrain_entry:
	// succ:  l0000000000031018
l0000000000031018:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000031018_ds_t
	// succ:  l0000000000031018_ds_f l0000000000031018_ds_t
l0000000000031018_ds_f:
	goto l0000000000031028
	// succ:  l0000000000031028
l0000000000031018_ds_t:
	goto l000000000003103C
	// succ:  l000000000003103C
l0000000000031028:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000031018
	// succ:  l0000000000031018
l000000000003103C:
	sp = sp + -72
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000058:word64]
	r5 = Mem0[sp + 0x0000000000000050:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000067FF:byte]
	branch r1 != 0x0000000000000000 l000000000003103C_ds_t
	// succ:  l000000000003103C_ds_f l000000000003103C_ds_t
l000000000003103C_ds_f:
	goto l0000000000031060
	// succ:  l0000000000031060
l000000000003103C_ds_t:
	goto l0000000000031088
	// succ:  l0000000000031088
l0000000000031060:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000031088:
	Mem0[sp + 0x0000000000000040:word64] = r30
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r3 + r2
	branch r1 != 0x0000000000000000 l0000000000031088_ds_t
	// succ:  l0000000000031088_ds_f l0000000000031088_ds_t
l0000000000031088_ds_f:
	goto l000000000003109C
	// succ:  l000000000003109C
l0000000000031088_ds_t:
	goto l0000000000031438
	// succ:  l0000000000031438
l000000000003109C:
	Mem0[sp + 0x0000000000000020:byte] = (byte) 0x0000000000000000
	goto l00000000000310A0
	// succ:  l00000000000310A0
l000000000003109C_ds_f:
	goto l00000000000310B0
	// succ:  l00000000000310B0
l000000000003109C_ds_t:
	goto l0000000000031428
	// succ:  l0000000000031428
l00000000000310A0:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r3 + r2
	branch r1 == 0x0000000000000000 l000000000003109C_ds_t
	goto l000000000003109C_ds_f
	// succ:  l000000000003109C_ds_f l000000000003109C_ds_t
l00000000000310B0:
	Mem0[sp + 0x0000000000000030:byte] = (byte) 0x0000000000000000
	goto l00000000000310B4
	// succ:  l00000000000310B4
l00000000000310B0_ds_f:
	goto l00000000000310C4
	// succ:  l00000000000310C4
l00000000000310B0_ds_t:
	goto l0000000000031418
	// succ:  l0000000000031418
l00000000000310B4:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r3 + r2
	branch r1 != 0x0000000000000000 l00000000000310B0_ds_t
	goto l00000000000310B0_ds_f
	// succ:  l00000000000310B0_ds_f l00000000000310B0_ds_t
l00000000000310C4:
	Mem0[sp + 0x0000000000000028:byte] = (byte) 0x0000000000000000
	// succ:  l00000000000310C8
l00000000000310C8:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001550:uint32]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 + 0x0000000000001554:uint32]
l0000000000031418:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	goto l00000000000310C8
	// succ:  l00000000000310C8
l0000000000031428:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000030:byte] = (byte) r1
	goto l00000000000310B4
	// succ:  l00000000000310B4
l0000000000031438:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:byte] = (byte) r1
	goto l00000000000310A0
	// succ:  l00000000000310A0
runtime.gcDrain_exit:


// runtime.gcDrainN
// Return size: 0
void runtime.gcDrainN()
runtime.gcDrainN_entry:
	// succ:  l0000000000031448
l0000000000031448:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000031448_ds_t
	// succ:  l0000000000031448_ds_f l0000000000031448_ds_t
l0000000000031448_ds_f:
	goto l0000000000031458
	// succ:  l0000000000031458
l0000000000031448_ds_t:
	goto l000000000003146C
	// succ:  l000000000003146C
l0000000000031458:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000031448
	// succ:  l0000000000031448
l000000000003146C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000067FF:byte]
	branch r1 != 0x0000000000000000 l000000000003146C_ds_t
	// succ:  l000000000003146C_ds_f l000000000003146C_ds_t
l000000000003146C_ds_f:
	goto l000000000003148C
	// succ:  l000000000003148C
l000000000003146C_ds_t:
	goto l00000000000314B0
	// succ:  l00000000000314B0
l000000000003148C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000314B0:
	r1 = Mem0[r5 + 0x0000000000000018:word64]
runtime.gcDrainN_exit:


// runtime.scanblock
// Return size: 0
void runtime.scanblock()
runtime.scanblock_entry:
	// succ:  l0000000000031658
l0000000000031658:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -144
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000031658_ds_t
	// succ:  l0000000000031658_ds_f l0000000000031658_ds_t
l0000000000031658_ds_f:
	goto l000000000003166C
	// succ:  l000000000003166C
l0000000000031658_ds_t:
	goto l0000000000031680
	// succ:  l0000000000031680
l000000000003166C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000031658
	// succ:  l0000000000031658
l0000000000031680:
	sp = sp + -144
	Mem0[sp:word64] = ra
	r11 = Mem0[sp + 0x0000000000000098:word64]
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	Mem0[sp + 0x0000000000000050:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
	Mem0[sp + 0x0000000000000078:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F78:word64]
	Mem0[sp + 0x0000000000000070:word64] = r1
	r4 = 0x0000000000000000
	r2 = Mem0[sp + 0x0000000000000050:word64]
	r23 = (word64) (r4 <u r2)
	branch r23 == 0x0000000000000000 l0000000000031680_ds_t
	// succ:  l0000000000031680_ds_f l0000000000031680_ds_t
l0000000000031680_ds_f:
	goto l00000000000316C8
	// succ:  l00000000000316C8
l0000000000031680_ds_t:
	goto l0000000000031750
	// succ:  l0000000000031750
l00000000000316C8:
	r1 = r4
	r2 = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l00000000000316C8_ds_t
	// succ:  l00000000000316C8_ds_f l00000000000316C8_ds_t
l00000000000316C8_ds_f:
	goto l00000000000316DC
	// succ:  l00000000000316DC
l00000000000316C8_ds_t:
	goto l00000000000316E8
	// succ:  l00000000000316E8
l00000000000316DC:
	call runtime.panicdivide (retsize: 0;)
l00000000000316E8:
	lo = r4 / r3
	hi = r4 % r3
	r3 = lo
	r1 = Mem0[sp + 0x00000000000000A8:word64]
	lo = r1 / r1
	hi = r1 % r1
	r2 = (word64) Mem0[r1:byte]
l0000000000031750:
	r4 = Mem0[sp:word64]
	sp = sp + 144
	call r4 (retsize: 0;)
	return
	// succ:  runtime.scanblock_exit
runtime.scanblock_exit:


// runtime.scanobject
// Return size: 0
void runtime.scanobject()
runtime.scanobject_entry:
	// succ:  l00000000000318E8
l00000000000318E8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -264
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000318E8_ds_t
	// succ:  l00000000000318E8_ds_f l00000000000318E8_ds_t
l00000000000318E8_ds_f:
	goto l00000000000318FC
	// succ:  l00000000000318FC
l00000000000318E8_ds_t:
	goto l0000000000031910
	// succ:  l0000000000031910
l00000000000318FC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000318E8
	// succ:  l00000000000318E8
l0000000000031910:
	sp = sp + -264
	Mem0[sp:word64] = ra
	r7 = Mem0[sp + 0x0000000000000110:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
	Mem0[sp + 0x0000000000000060:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F78:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
	Mem0[sp + 0x0000000000000068:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000070:word32] = (word32) 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
runtime.scanobject_exit:


// runtime.shade
// Return size: 0
void runtime.shade()
runtime.shade_entry:
	// succ:  l0000000000031EE8
l0000000000031EE8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000031EE8_ds_t
	// succ:  l0000000000031EE8_ds_f l0000000000031EE8_ds_t
l0000000000031EE8_ds_f:
	goto l0000000000031EF8
	// succ:  l0000000000031EF8
l0000000000031EE8_ds_t:
	goto l0000000000031F0C
	// succ:  l0000000000031F0C
l0000000000031EF8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000031EE8
	// succ:  l0000000000031EE8
l0000000000031F0C:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000068:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	call runtime.heapBitsForObject (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r7 = Mem0[sp + 0x0000000000000028:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000030:uint32]
runtime.shade_exit:


// runtime.greyobject
// Return size: 0
void runtime.greyobject()
runtime.greyobject_entry:
	// succ:  l0000000000032028
l0000000000032028:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -224
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000032028_ds_t
	// succ:  l0000000000032028_ds_f l0000000000032028_ds_t
l0000000000032028_ds_f:
	goto l000000000003203C
	// succ:  l000000000003203C
l0000000000032028_ds_t:
	goto l0000000000032050
	// succ:  l0000000000032050
l000000000003203C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000032028
	// succ:  l0000000000032028
l0000000000032050:
	sp = sp + -224
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x00000000000000E8:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r1 + r2
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000032050_ds_t
	// succ:  l0000000000032050_ds_f l0000000000032050_ds_t
l0000000000032050_ds_f:
	goto l0000000000032070
	// succ:  l0000000000032070
l0000000000032050_ds_t:
	goto l0000000000032090
	// succ:  l0000000000032090
l0000000000032070:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000032090:
	r8 = Mem0[sp + 0x0000000000000110:word64]
	r1 = Mem0[sp + 0x0000000000000120:word64]
	Mem0[sp + 0x0000000000000068:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000070:byte] = (byte) 0x0000000000000000
	Mem0[sp + 0x0000000000000078:word64] = 0x0000000000000000
	r2 = r1
	r5 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000032090_ds_t
	// succ:  l0000000000032090_ds_f l0000000000032090_ds_t
l0000000000032090_ds_f:
	goto l00000000000320B8
	// succ:  l00000000000320B8
l0000000000032090_ds_t:
	goto l00000000000320C4
	// succ:  l00000000000320C4
l00000000000320B8:
	call runtime.panicdivide (retsize: 0;)
l00000000000320C4:
	lo = r1 / r3
	hi = r1 % r3
	r2 = lo
	r7 = r2
	r3 = r1
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	branch r4 != 0x0000000000000000 l00000000000320C4_ds_t
	// succ:  l00000000000320C4_ds_f l00000000000320C4_ds_t
l00000000000320C4_ds_f:
	goto l00000000000320E0
	// succ:  l00000000000320E0
l00000000000320C4_ds_t:
	goto l00000000000320EC
	// succ:  l00000000000320EC
l00000000000320E0:
	call runtime.panicdivide (retsize: 0;)
l00000000000320EC:
	lo = r1 / r4
	hi = r1 % r4
	r3 = hi
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
runtime.greyobject_exit:


// runtime.gcDumpObject
// Return size: 0
void runtime.gcDumpObject()
runtime.gcDumpObject_entry:
	// succ:  l0000000000032898
l0000000000032898:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000032898_ds_t
	// succ:  l0000000000032898_ds_f l0000000000032898_ds_t
l0000000000032898_ds_f:
	goto l00000000000328A8
	// succ:  l00000000000328A8
l0000000000032898_ds_t:
	goto l00000000000328BC
	// succ:  l00000000000328BC
l00000000000328A8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000032898
	// succ:  l0000000000032898
l00000000000328BC:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000068:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
	r2 = r4
	r23 = (word64) (r4 <u r1)
	branch r23 != 0x0000000000000000 l00000000000328BC_ds_t
	// succ:  l00000000000328BC_ds_f l00000000000328BC_ds_t
l00000000000328BC_ds_f:
	goto l00000000000328E4
	// succ:  l00000000000328E4
l00000000000328BC_ds_t:
	goto l0000000000032DC0
	// succ:  l0000000000032DC0
l00000000000328E4:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F78:word64]
	r2 = r4
	r23 = (word64) (r4 <u r1)
	branch r23 == 0x0000000000000000 l00000000000328E4_ds_t
	// succ:  l00000000000328E4_ds_f l00000000000328E4_ds_t
l00000000000328E4_ds_f:
	goto l0000000000032900
	// succ:  l0000000000032900
l00000000000328E4_ds_t:
	goto l0000000000032DC0
	// succ:  l0000000000032DC0
l0000000000032900:
l0000000000032DC0:
	r1 = r4
	Mem0[sp + 0x0000000000000038:word64] = r4
	call runtime.printlock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.printstring (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.gcDumpObject_exit:


// runtime.gcmarknewobject
// Return size: 0
void runtime.gcmarknewobject()
runtime.gcmarknewobject_entry:
	// succ:  l0000000000032E50
l0000000000032E50:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = ra
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006990:byte]
	branch r1 == 0x0000000000000000 l0000000000032E50_ds_t
	// succ:  l0000000000032E50_ds_f l0000000000032E50_ds_t
l0000000000032E50_ds_f:
	goto l0000000000032E6C
	// succ:  l0000000000032E6C
l0000000000032E50_ds_t:
	goto l0000000000032EA0
	// succ:  l0000000000032EA0
l0000000000032E6C:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006998:byte]
	branch r1 != 0x0000000000000000 l0000000000032E6C_ds_t
	// succ:  l0000000000032E6C_ds_f l0000000000032E6C_ds_t
l0000000000032E6C_ds_f:
	goto l0000000000032E80
	// succ:  l0000000000032E80
l0000000000032E6C_ds_t:
	goto l0000000000032EA0
	// succ:  l0000000000032EA0
l0000000000032E80:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000032EA0:
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.markBitsForAddr (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000010:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	r3 = r1 + 0x00000000000000FF
	r2 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000028:word64] = r4
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = r3 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000030:byte] = (byte) r3
	Mem0[sp + 0x0000000000000010:byte] = (byte) r1
	r1 = r2
	Mem0[sp + 0x0000000000000038:word64] = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.markBits.setMarked (retsize: 0;)
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r4 = Mem0[r2 + 0x00000000000000B0:word64]
	branch r4 != 0x0000000000000000 l0000000000032EA0_ds_t
	// succ:  l0000000000032EA0_ds_f l0000000000032EA0_ds_t
l0000000000032EA0_ds_f:
	goto l0000000000032EF8
	// succ:  l0000000000032EF8
l0000000000032EA0_ds_t:
	goto l0000000000032EFC
	// succ:  l0000000000032EFC
l0000000000032EF8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000032EFC
l0000000000032EFC:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r4 / r4
	hi = r4 % r4
	r5 = Mem0[r4 + 0x0000000000000010:word64]
	r2 = Mem0[sp + 0x0000000000000050:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4 + 0x0000000000000010:word64] = r2
	r5 = Mem0[r4 + 0x0000000000000018:word64]
	r2 = Mem0[sp + 0x0000000000000058:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4 + 0x0000000000000018:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 64
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcmarknewobject_exit
runtime.gcmarknewobject_exit:


// runtime.initCheckmarks
// Return size: 0
void runtime.initCheckmarks()
runtime.initCheckmarks_entry:
	// succ:  l0000000000032F38
l0000000000032F38:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000032F38_ds_t
	// succ:  l0000000000032F38_ds_f l0000000000032F38_ds_t
l0000000000032F38_ds_f:
	goto l0000000000032F48
	// succ:  l0000000000032F48
l0000000000032F38_ds_t:
	goto l0000000000032F5C
	// succ:  l0000000000032F5C
l0000000000032F48:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000032F38
	// succ:  l0000000000032F38
l0000000000032F5C:
	sp = sp + -120
	Mem0[sp:word64] = ra
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006990:byte] = (byte) r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r4 = Mem0[r23 + 0x00000000000015C8:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000015D0:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000015D8:word64]
	Mem0[sp + 0x0000000000000070:word64] = r1
	r5 = 0x0000000000000000
	Mem0[sp + 0x0000000000000068:word64] = r2
	Mem0[sp + 0x0000000000000030:word64] = r2
	Mem0[sp + 0x0000000000000060:word64] = r4
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r23 = (word64) (r5 < r2)
	branch r23 == 0x0000000000000000 l0000000000032F5C_ds_t
	// succ:  l0000000000032F5C_ds_f l0000000000032F5C_ds_t
l0000000000032F5C_ds_f:
	goto l0000000000032FC0
	// succ:  l0000000000032FC0
l0000000000032F5C_ds_t:
	goto l00000000000330C0
	// succ:  l00000000000330C0
l0000000000032FC0:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r3 = Mem0[r4:word64]
	Mem0[sp + 0x0000000000000038:word64] = r5
	r1 = (word64) Mem0[r3 + 0x0000000000000064:byte]
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000032FC0_ds_t
	// succ:  l0000000000032FC0_ds_f l0000000000032FC0_ds_t
l0000000000032FC0_ds_f:
	goto l0000000000032FE4
	// succ:  l0000000000032FE4
l0000000000032FC0_ds_t:
	goto l0000000000033098
	// succ:  l0000000000033098
l0000000000032FE4:
	Mem0[sp + 0x0000000000000040:word64] = r3
	r3 = Mem0[r3 + 0x0000000000000018:word64]
	r1 = r3
	r2 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.heapBitsForSpan (retsize: 0;)
	r7 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000050:word64] = r7
	r1 = (word64) Mem0[sp + 0x0000000000000018:uint32]
l0000000000033098:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r4 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r5
	hi = r1 % r5
	r5 = r1
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r23 = (word64) (r5 < r2)
	branch r23 != 0x0000000000000000 l0000000000033098_ds_t
	// succ:  l0000000000033098_ds_f l0000000000033098_ds_t
l0000000000033098_ds_f:
	goto l00000000000330C0
	// succ:  l00000000000330C0
l0000000000033098_ds_t:
	goto l0000000000032FC0
	// succ:  l0000000000032FC0
l00000000000330C0:
	r4 = Mem0[sp:word64]
	sp = sp + 120
	call r4 (retsize: 0;)
	return
	r4 = Mem0[sp:word64]
	sp = sp + 120
	call r4 (retsize: 0;)
	return
	// succ:  runtime.initCheckmarks_exit runtime.initCheckmarks_exit
runtime.initCheckmarks_exit:


// runtime.clearCheckmarks
// Return size: 0
void runtime.clearCheckmarks()
runtime.clearCheckmarks_entry:
	// succ:  l00000000000330D0
l00000000000330D0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000330D0_ds_t
	// succ:  l00000000000330D0_ds_f l00000000000330D0_ds_t
l00000000000330D0_ds_f:
	goto l00000000000330E0
	// succ:  l00000000000330E0
l00000000000330D0_ds_t:
	goto l00000000000330F4
	// succ:  l00000000000330F4
l00000000000330E0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000330D0
	// succ:  l00000000000330D0
l00000000000330F4:
	sp = sp + -120
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006990:byte] = (byte) r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r4 = Mem0[r23 + 0x00000000000015C8:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000015D0:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000015D8:word64]
	Mem0[sp + 0x0000000000000070:word64] = r1
	r5 = 0x0000000000000000
	Mem0[sp + 0x0000000000000068:word64] = r2
	Mem0[sp + 0x0000000000000030:word64] = r2
	Mem0[sp + 0x0000000000000060:word64] = r4
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r23 = (word64) (r5 < r2)
	branch r23 == 0x0000000000000000 l00000000000330F4_ds_t
	// succ:  l00000000000330F4_ds_f l00000000000330F4_ds_t
l00000000000330F4_ds_f:
	goto l0000000000033154
	// succ:  l0000000000033154
l00000000000330F4_ds_t:
	goto l0000000000033254
	// succ:  l0000000000033254
l0000000000033154:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r3 = Mem0[r4:word64]
	Mem0[sp + 0x0000000000000038:word64] = r5
	r1 = (word64) Mem0[r3 + 0x0000000000000064:byte]
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000033154_ds_t
	// succ:  l0000000000033154_ds_f l0000000000033154_ds_t
l0000000000033154_ds_f:
	goto l0000000000033178
	// succ:  l0000000000033178
l0000000000033154_ds_t:
	goto l000000000003322C
	// succ:  l000000000003322C
l0000000000033178:
	Mem0[sp + 0x0000000000000040:word64] = r3
	r3 = Mem0[r3 + 0x0000000000000018:word64]
	r1 = r3
	r2 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.heapBitsForSpan (retsize: 0;)
	r7 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000050:word64] = r7
	r1 = (word64) Mem0[sp + 0x0000000000000018:uint32]
l000000000003322C:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r4 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r5
	hi = r1 % r5
	r5 = r1
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r23 = (word64) (r5 < r2)
	branch r23 != 0x0000000000000000 l000000000003322C_ds_t
	// succ:  l000000000003322C_ds_f l000000000003322C_ds_t
l000000000003322C_ds_f:
	goto l0000000000033254
	// succ:  l0000000000033254
l000000000003322C_ds_t:
	goto l0000000000033154
	// succ:  l0000000000033154
l0000000000033254:
	r4 = Mem0[sp:word64]
	sp = sp + 120
	call r4 (retsize: 0;)
	return
	r4 = Mem0[sp:word64]
	sp = sp + 120
	call r4 (retsize: 0;)
	return
	// succ:  runtime.clearCheckmarks_exit runtime.clearCheckmarks_exit
runtime.clearCheckmarks_exit:


// runtime.finishsweep_m
// Return size: 0
void runtime.finishsweep_m()
runtime.finishsweep_m_entry:
	// succ:  l0000000000033268
l0000000000033268:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000033268_ds_t
	// succ:  l0000000000033268_ds_f l0000000000033268_ds_t
l0000000000033268_ds_f:
	goto l0000000000033278
	// succ:  l0000000000033278
l0000000000033268_ds_t:
	goto l000000000003328C
	// succ:  l000000000003328C
l0000000000033278:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000033268
	// succ:  l0000000000033268
l000000000003328C:
	sp = sp + -72
	Mem0[sp:word64] = ra
	call runtime.sweepone (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000003328C_ds_t
	// succ:  l000000000003328C_ds_f l000000000003328C_ds_t
l000000000003328C_ds_f:
	goto l00000000000332AC
	// succ:  l00000000000332AC
l000000000003328C_ds_t:
	goto l00000000000332F4
	// succ:  l00000000000332F4
l00000000000332AC:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x000000000000129C:uint32]
l00000000000332F4:
	r1 = (word64) Mem0[sp + 0x0000000000000050:byte]
	branch r1 != 0x0000000000000000 l00000000000332F4_ds_t
	// succ:  l00000000000332F4_ds_f l00000000000332F4_ds_t
l00000000000332F4_ds_f:
	goto l0000000000033300
	// succ:  l0000000000033300
l00000000000332F4_ds_t:
	goto l00000000000333E8
	// succ:  l00000000000333E8
l0000000000033300:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000007CFC:uint32]
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x00000000000015C8:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000015D0:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000015D8:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r5 = 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	Mem0[sp + 0x0000000000000030:word64] = r3
	r4 = r3
	r2 = Mem0[sp + 0x0000000000000018:word64]
	r1 = r5
	r23 = (word64) (r5 < r2)
	branch r23 == 0x0000000000000000 l0000000000033300_ds_t
	// succ:  l0000000000033300_ds_f l0000000000033300_ds_t
l0000000000033300_ds_f:
	goto l0000000000033360
	// succ:  l0000000000033360
l0000000000033300_ds_t:
	goto l00000000000333E8
	// succ:  l00000000000333E8
l0000000000033360:
	Mem0[sp + 0x0000000000000028:word64] = r4
	r3 = Mem0[r4:word64]
	Mem0[sp + 0x0000000000000020:word64] = r5
	r1 = (word64) Mem0[r3 + 0x0000000000000058:uint32]
	r2 = (word64) Mem0[sp + 0x0000000000000010:uint32]
l00000000000333E8:
	call runtime.nextMarkBitArenaEpoch (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 72
	call r4 (retsize: 0;)
	return
	// succ:  runtime.finishsweep_m_exit
runtime.finishsweep_m_exit:


// runtime.bgsweep
// Return size: 0
void runtime.bgsweep()
runtime.bgsweep_entry:
	// succ:  l0000000000033400
l0000000000033400:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000033400_ds_t
	// succ:  l0000000000033400_ds_f l0000000000033400_ds_t
l0000000000033400_ds_f:
	goto l0000000000033410
	// succ:  l0000000000033410
l0000000000033400_ds_t:
	goto l0000000000033424
	// succ:  l0000000000033424
l0000000000033410:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000033400
	// succ:  l0000000000033400
l0000000000033424:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = r30
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l0000000000033424_ds_t
	// succ:  l0000000000033424_ds_f l0000000000033424_ds_t
l0000000000033424_ds_f:
	goto l0000000000033448
	// succ:  l0000000000033448
l0000000000033424_ds_t:
	goto l000000000003364C
	// succ:  l000000000003364C
l0000000000033448:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001288:word64] = r1
	// succ:  l0000000000033454
l0000000000033454:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
l000000000003364C:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r30
	call runtime.writebarrierptr (retsize: 0;)
	goto l0000000000033454
	// succ:  l0000000000033454
runtime.bgsweep_exit:


// runtime.sweepone
// Return size: 0
void runtime.sweepone()
runtime.sweepone_entry:
	// succ:  l0000000000033670
l0000000000033670:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000033670_ds_t
	// succ:  l0000000000033670_ds_f l0000000000033670_ds_t
l0000000000033670_ds_f:
	goto l0000000000033680
	// succ:  l0000000000033680
l0000000000033670_ds_t:
	goto l0000000000033694
	// succ:  l0000000000033694
l0000000000033680:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000033670
	// succ:  l0000000000033670
l0000000000033694:
	sp = sp + -120
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000058:word64] = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r4 = r2
	r2 = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000007CFC:uint32]
	Mem0[sp + 0x0000000000000020:word32] = (word32) r1
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.sweepone_exit:


// runtime.gosweepone
// Return size: 0
void runtime.gosweepone()
runtime.gosweepone_entry:
	// succ:  l0000000000033B60
l0000000000033B60:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000033B60_ds_t
	// succ:  l0000000000033B60_ds_f l0000000000033B60_ds_t
l0000000000033B60_ds_f:
	goto l0000000000033B70
	// succ:  l0000000000033B70
l0000000000033B60_ds_t:
	goto l0000000000033B84
	// succ:  l0000000000033B84
l0000000000033B70:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000033B60
	// succ:  l0000000000033B60
l0000000000033B84:
	sp = sp + -40
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	lo = r2 / sp
	hi = r2 % sp
	Mem0[r3 + 0x0000000000000008:word64] = r2
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000030:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gosweepone_exit
runtime.gosweepone_exit:


// runtime.(*mspan).ensureSwept
// Return size: 0
void runtime.(*mspan).ensureSwept()
runtime.(*mspan).ensureSwept_entry:
	// succ:  l0000000000033BD8
l0000000000033BD8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000033BD8_ds_t
	// succ:  l0000000000033BD8_ds_f l0000000000033BD8_ds_t
l0000000000033BD8_ds_f:
	goto l0000000000033BE8
	// succ:  l0000000000033BE8
l0000000000033BD8_ds_t:
	goto l0000000000033BFC
	// succ:  l0000000000033BFC
l0000000000033BE8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000033BD8
	// succ:  l0000000000033BD8
l0000000000033BFC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r3 = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000033BFC_ds_t
	// succ:  l0000000000033BFC_ds_f l0000000000033BFC_ds_t
l0000000000033BFC_ds_f:
	goto l0000000000033C24
	// succ:  l0000000000033C24
l0000000000033BFC_ds_t:
	goto l0000000000033C74
	// succ:  l0000000000033C74
l0000000000033C24:
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000C4:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000033C24_ds_t
	// succ:  l0000000000033C24_ds_f l0000000000033C24_ds_t
l0000000000033C24_ds_f:
	goto l0000000000033C40
	// succ:  l0000000000033C40
l0000000000033C24_ds_t:
	goto l0000000000033C74
	// succ:  l0000000000033C74
l0000000000033C40:
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	r2 = r3
	branch r1 == r3 l0000000000033C40_ds_t
	// succ:  l0000000000033C40_ds_f l0000000000033C40_ds_t
l0000000000033C40_ds_f:
	goto l0000000000033C54
	// succ:  l0000000000033C54
l0000000000033C40_ds_t:
	goto l0000000000033C74
	// succ:  l0000000000033C74
l0000000000033C54:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000033C74:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000007CFC:uint32]
	Mem0[sp + 0x0000000000000020:word32] = (word32) r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000033C74_ds_t
	// succ:  l0000000000033C74_ds_f l0000000000033C74_ds_t
l0000000000033C74_ds_f:
	goto l0000000000033C98
	// succ:  l0000000000033C98
l0000000000033C74_ds_t:
	goto l0000000000033C9C
	// succ:  l0000000000033C9C
l0000000000033C98:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000033C9C
l0000000000033C9C:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load (retsize: 0;)
	r3 = (word64) Mem0[sp + 0x0000000000000020:uint32]
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.(*mspan).ensureSwept_exit:


// runtime.(*mspan).sweep
// Return size: 0
void runtime.(*mspan).sweep()
runtime.(*mspan).sweep_entry:
	// succ:  l0000000000033E30
l0000000000033E30:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -496
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000033E30_ds_t
	// succ:  l0000000000033E30_ds_f l0000000000033E30_ds_t
l0000000000033E30_ds_f:
	goto l0000000000033E44
	// succ:  l0000000000033E44
l0000000000033E30_ds_t:
	goto l0000000000033E58
	// succ:  l0000000000033E58
l0000000000033E44:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000033E30
	// succ:  l0000000000033E30
l0000000000033E58:
	sp = sp + -496
	Mem0[sp:word64] = ra
	Mem0[sp + 0x00000000000001D8:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000001E0:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000001E8:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000130:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000138:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000140:word64] = 0x0000000000000000
	r4 = Mem0[sp + 0x00000000000001F8:word64]
	r1 = 0x0000000000000000
	r3 = r30
	Mem0[sp + 0x00000000000000E0:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000033E58_ds_t
	// succ:  l0000000000033E58_ds_f l0000000000033E58_ds_t
l0000000000033E58_ds_f:
	goto l0000000000033EA4
	// succ:  l0000000000033EA4
l0000000000033E58_ds_t:
	goto l0000000000033EF8
	// succ:  l0000000000033EF8
l0000000000033EA4:
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000C4:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000033EA4_ds_t
	// succ:  l0000000000033EA4_ds_f l0000000000033EA4_ds_t
l0000000000033EA4_ds_f:
	goto l0000000000033EC0
	// succ:  l0000000000033EC0
l0000000000033EA4_ds_t:
	goto l0000000000033EF8
	// succ:  l0000000000033EF8
l0000000000033EC0:
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	r2 = r30
	branch r1 == r30 l0000000000033EC0_ds_t
	// succ:  l0000000000033EC0_ds_f l0000000000033EC0_ds_t
l0000000000033EC0_ds_f:
	goto l0000000000033ED4
	// succ:  l0000000000033ED4
l0000000000033EC0_ds_t:
	goto l0000000000033EF8
	// succ:  l0000000000033EF8
l0000000000033ED4:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000033EF8:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000007CFC:uint32]
runtime.(*mspan).sweep_exit:


// runtime.deductSweepCredit
// Return size: 0
void runtime.deductSweepCredit()
runtime.deductSweepCredit_entry:
	// succ:  l0000000000034ED0
l0000000000034ED0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000034ED0_ds_t
	// succ:  l0000000000034ED0_ds_f l0000000000034ED0_ds_t
l0000000000034ED0_ds_f:
	goto l0000000000034EE0
	// succ:  l0000000000034EE0
l0000000000034ED0_ds_t:
	goto l0000000000034EF4
	// succ:  l0000000000034EF4
l0000000000034EE0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000034ED0
	// succ:  l0000000000034ED0
l0000000000034EF4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	f0 = Mem0[r23 + 0x0000000000007D30:word64]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	f1 = Mem0[r23 + 0x00000000000010D8:word64]
runtime.deductSweepCredit_exit:


// runtime.reimburseSweepCredit
// Return size: 0
void runtime.reimburseSweepCredit()
runtime.reimburseSweepCredit_entry:
	// succ:  l0000000000035048
l0000000000035048:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000035048_ds_t
	// succ:  l0000000000035048_ds_f l0000000000035048_ds_t
l0000000000035048_ds_f:
	goto l0000000000035058
	// succ:  l0000000000035058
l0000000000035048_ds_t:
	goto l000000000003506C
	// succ:  l000000000003506C
l0000000000035058:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000035048
	// succ:  l0000000000035048
l000000000003506C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	f0 = Mem0[r23 + 0x0000000000007D30:word64]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	f1 = Mem0[r23 + 0x00000000000010D8:word64]
runtime.reimburseSweepCredit_exit:


// runtime.(*gcWork).init
// Return size: 0
void runtime.(*gcWork).init()
runtime.(*gcWork).init_entry:
	// succ:  l0000000000035130
l0000000000035130:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000035130_ds_t
	// succ:  l0000000000035130_ds_f l0000000000035130_ds_t
l0000000000035130_ds_f:
	goto l0000000000035140
	// succ:  l0000000000035140
l0000000000035130_ds_t:
	goto l0000000000035154
	// succ:  l0000000000035154
l0000000000035140:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000035130
	// succ:  l0000000000035130
l0000000000035154:
	sp = sp + -16
	Mem0[sp:word64] = ra
	call runtime.getempty (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000008:word64]
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r2 = r3
	Mem0[r1:word64] = r3
	call runtime.trygetfull (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000008:word64]
	r1 = r3
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000035154_ds_t
	// succ:  l0000000000035154_ds_f l0000000000035154_ds_t
l0000000000035154_ds_f:
	goto l0000000000035190
	// succ:  l0000000000035190
l0000000000035154_ds_t:
	goto l000000000003519C
	// succ:  l000000000003519C
l0000000000035190:
	call runtime.getempty (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000008:word64]
	// succ:  l000000000003519C
l000000000003519C:
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*gcWork).init_exit
runtime.(*gcWork).init_exit:


// runtime.(*gcWork).put
// Return size: 0
void runtime.(*gcWork).put()
runtime.(*gcWork).put_entry:
	// succ:  l00000000000351B8
l00000000000351B8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000351B8_ds_t
	// succ:  l00000000000351B8_ds_f l00000000000351B8_ds_t
l00000000000351B8_ds_f:
	goto l00000000000351C8
	// succ:  l00000000000351C8
l00000000000351B8_ds_t:
	goto l00000000000351DC
	// succ:  l00000000000351DC
l00000000000351C8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000351B8
	// succ:  l00000000000351B8
l00000000000351DC:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000018:word64]
	r3 = Mem0[r5:word64]
	r4 = r3
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l00000000000351DC_ds_t
	// succ:  l00000000000351DC_ds_f l00000000000351DC_ds_t
l00000000000351DC_ds_f:
	goto l00000000000351FC
	// succ:  l00000000000351FC
l00000000000351DC_ds_t:
	goto l0000000000035268
	// succ:  l0000000000035268
l00000000000351FC:
	r1 = r5
	Mem0[sp + 0x0000000000000008:word64] = r5
	call runtime.(*gcWork).init (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r4 = Mem0[r1:word64]
	goto l0000000000035214
	// succ:  l0000000000035214
l00000000000351FC_ds_f:
	goto l000000000003522C
	// succ:  l000000000003522C
l00000000000351FC_ds_t:
	goto l0000000000035238
	// succ:  l0000000000035238
l0000000000035214:
	r1 = Mem0[r4 + 0x0000000000000010:word64]
	lo = r2 / r4
	hi = r2 % r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r1 <u r3)
	branch r23 != 0x0000000000000000 l00000000000351FC_ds_t
	goto l00000000000351FC_ds_f
	// succ:  l00000000000351FC_ds_f l00000000000351FC_ds_t
l000000000003522C:
	call runtime.panicindex (retsize: 0;)
l0000000000035238:
l0000000000035268:
	r1 = Mem0[r3 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 != r2 l0000000000035268_ds_t
	// succ:  l0000000000035268_ds_f l0000000000035268_ds_t
l0000000000035268_ds_f:
	goto l0000000000035278
	// succ:  l0000000000035278
l0000000000035268_ds_t:
	goto l0000000000035214
	// succ:  l0000000000035214
l0000000000035278:
	r4 = Mem0[r5:word64]
	r3 = Mem0[r5 + 0x0000000000000008:word64]
	Mem0[r5:word64] = r3
	Mem0[r5 + 0x0000000000000008:word64] = r4
	r3 = Mem0[r5:word64]
	r4 = r3
	r1 = Mem0[r3 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 != r2 l0000000000035278_ds_t
	// succ:  l0000000000035278_ds_f l0000000000035278_ds_t
l0000000000035278_ds_f:
	goto l00000000000352A0
	// succ:  l00000000000352A0
l0000000000035278_ds_t:
	goto l0000000000035214
	// succ:  l0000000000035214
l00000000000352A0:
	r1 = r4
	Mem0[sp + 0x0000000000000008:word64] = r4
	call runtime.putfull (retsize: 0;)
	call runtime.getempty (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[r1:word64] = r4
	goto l0000000000035214
	// succ:  l0000000000035214
runtime.(*gcWork).put_exit:


// runtime.(*gcWork).tryGet
// Return size: 0
void runtime.(*gcWork).tryGet()
runtime.(*gcWork).tryGet_entry:
	// succ:  l00000000000352D0
l00000000000352D0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000352D0_ds_t
	// succ:  l00000000000352D0_ds_f l00000000000352D0_ds_t
l00000000000352D0_ds_f:
	goto l00000000000352E0
	// succ:  l00000000000352E0
l00000000000352D0_ds_t:
	goto l00000000000352F4
	// succ:  l00000000000352F4
l00000000000352E0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000352D0
	// succ:  l00000000000352D0
l00000000000352F4:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000028:word64]
	r3 = Mem0[r5:word64]
	r4 = r3
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l00000000000352F4_ds_t
	// succ:  l00000000000352F4_ds_f l00000000000352F4_ds_t
l00000000000352F4_ds_f:
	goto l0000000000035314
	// succ:  l0000000000035314
l00000000000352F4_ds_t:
	goto l000000000003532C
	// succ:  l000000000003532C
l0000000000035314:
	r1 = r5
	Mem0[sp + 0x0000000000000008:word64] = r5
	call runtime.(*gcWork).init (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000028:word64]
	r4 = Mem0[r5:word64]
	// succ:  l000000000003532C
l000000000003532C:
	r1 = Mem0[r4 + 0x0000000000000010:word64]
	branch r1 != 0x0000000000000000 l000000000003532C_ds_t
	// succ:  l000000000003532C_ds_f l000000000003532C_ds_t
l000000000003532C_ds_f:
	goto l0000000000035338
	// succ:  l0000000000035338
l000000000003532C_ds_t:
	goto l00000000000353B4
	// succ:  l00000000000353B4
l0000000000035338:
	r4 = Mem0[r5:word64]
	r3 = Mem0[r5 + 0x0000000000000008:word64]
	Mem0[r5:word64] = r3
	Mem0[r5 + 0x0000000000000008:word64] = r4
	r3 = Mem0[r5:word64]
	r4 = r3
	r1 = Mem0[r3 + 0x0000000000000010:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000035338_ds_t
	// succ:  l0000000000035338_ds_f l0000000000035338_ds_t
l0000000000035338_ds_f:
	goto l0000000000035360
	// succ:  l0000000000035360
l0000000000035338_ds_t:
	goto l00000000000353B4
	// succ:  l00000000000353B4
l0000000000035360:
	r1 = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	call runtime.trygetfull (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000035360_ds_t
	// succ:  l0000000000035360_ds_f l0000000000035360_ds_t
l0000000000035360_ds_f:
	goto l0000000000035384
	// succ:  l0000000000035384
l0000000000035360_ds_t:
	goto l0000000000035398
	// succ:  l0000000000035398
l0000000000035384:
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*gcWork).tryGet_exit
l0000000000035398:
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.putempty (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000010:word64]
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[r1:word64] = r4
	// succ:  l00000000000353B4
l00000000000353B4:
	r2 = Mem0[r4 + 0x0000000000000010:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
runtime.(*gcWork).tryGet_exit:


// runtime.(*gcWork).get
// Return size: 0
void runtime.(*gcWork).get()
runtime.(*gcWork).get_entry:
	// succ:  l0000000000035408
l0000000000035408:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000035408_ds_t
	// succ:  l0000000000035408_ds_f l0000000000035408_ds_t
l0000000000035408_ds_f:
	goto l0000000000035418
	// succ:  l0000000000035418
l0000000000035408_ds_t:
	goto l000000000003542C
	// succ:  l000000000003542C
l0000000000035418:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000035408
	// succ:  l0000000000035408
l000000000003542C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000028:word64]
	r3 = Mem0[r5:word64]
	r4 = r3
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000003542C_ds_t
	// succ:  l000000000003542C_ds_f l000000000003542C_ds_t
l000000000003542C_ds_f:
	goto l000000000003544C
	// succ:  l000000000003544C
l000000000003542C_ds_t:
	goto l0000000000035464
	// succ:  l0000000000035464
l000000000003544C:
	r1 = r5
	Mem0[sp + 0x0000000000000008:word64] = r5
	call runtime.(*gcWork).init (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000028:word64]
	r4 = Mem0[r5:word64]
	// succ:  l0000000000035464
l0000000000035464:
	r1 = Mem0[r4 + 0x0000000000000010:word64]
	branch r1 != 0x0000000000000000 l0000000000035464_ds_t
	// succ:  l0000000000035464_ds_f l0000000000035464_ds_t
l0000000000035464_ds_f:
	goto l0000000000035470
	// succ:  l0000000000035470
l0000000000035464_ds_t:
	goto l00000000000354EC
	// succ:  l00000000000354EC
l0000000000035470:
	r4 = Mem0[r5:word64]
	r3 = Mem0[r5 + 0x0000000000000008:word64]
	Mem0[r5:word64] = r3
	Mem0[r5 + 0x0000000000000008:word64] = r4
	r3 = Mem0[r5:word64]
	r4 = r3
	r1 = Mem0[r3 + 0x0000000000000010:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000035470_ds_t
	// succ:  l0000000000035470_ds_f l0000000000035470_ds_t
l0000000000035470_ds_f:
	goto l0000000000035498
	// succ:  l0000000000035498
l0000000000035470_ds_t:
	goto l00000000000354EC
	// succ:  l00000000000354EC
l0000000000035498:
	r1 = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	call runtime.getfull (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000035498_ds_t
	// succ:  l0000000000035498_ds_f l0000000000035498_ds_t
l0000000000035498_ds_f:
	goto l00000000000354BC
	// succ:  l00000000000354BC
l0000000000035498_ds_t:
	goto l00000000000354D0
	// succ:  l00000000000354D0
l00000000000354BC:
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*gcWork).get_exit
l00000000000354D0:
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.putempty (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000010:word64]
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[r1:word64] = r4
	// succ:  l00000000000354EC
l00000000000354EC:
	r2 = Mem0[r4 + 0x0000000000000010:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
runtime.(*gcWork).get_exit:


// runtime.(*gcWork).dispose
// Return size: 0
void runtime.(*gcWork).dispose()
runtime.(*gcWork).dispose_entry:
	// succ:  l0000000000035540
l0000000000035540:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000035540_ds_t
	// succ:  l0000000000035540_ds_f l0000000000035540_ds_t
l0000000000035540_ds_f:
	goto l0000000000035550
	// succ:  l0000000000035550
l0000000000035540_ds_t:
	goto l0000000000035564
	// succ:  l0000000000035564
l0000000000035550:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000035540
	// succ:  l0000000000035540
l0000000000035564:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000028:word64]
	r3 = Mem0[r4:word64]
	branch r3 == 0x0000000000000000 l0000000000035564_ds_t
	// succ:  l0000000000035564_ds_f l0000000000035564_ds_t
l0000000000035564_ds_f:
	goto l000000000003557C
	// succ:  l000000000003557C
l0000000000035564_ds_t:
	goto l00000000000355D4
	// succ:  l00000000000355D4
l000000000003557C:
	r1 = Mem0[r3 + 0x0000000000000010:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000003557C_ds_t
	// succ:  l000000000003557C_ds_f l000000000003557C_ds_t
l000000000003557C_ds_f:
	goto l000000000003558C
	// succ:  l000000000003558C
l000000000003557C_ds_t:
	goto l0000000000035680
	// succ:  l0000000000035680
l000000000003558C:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.putempty (retsize: 0;)
	goto l000000000003559C
	// succ:  l000000000003559C
l000000000003558C_ds_f:
	goto l00000000000355BC
	// succ:  l00000000000355BC
l000000000003558C_ds_t:
	goto l0000000000035664
	// succ:  l0000000000035664
l000000000003559C:
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[r1:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000028:word64]
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = Mem0[r3 + 0x0000000000000010:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000003558C_ds_t
	goto l000000000003558C_ds_f
	// succ:  l000000000003558C_ds_f l000000000003558C_ds_t
l00000000000355BC:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.putempty (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000028:word64]
	// succ:  l00000000000355D0
l00000000000355D0:
	Mem0[r4 + 0x0000000000000008:word64] = 0x0000000000000000
	// succ:  l00000000000355D4
l00000000000355D4:
	r1 = Mem0[r4 + 0x0000000000000010:word64]
	branch r1 == 0x0000000000000000 l00000000000355D4_ds_t
	// succ:  l00000000000355D4_ds_f l00000000000355D4_ds_t
l00000000000355D4_ds_f:
	goto l00000000000355E0
	// succ:  l00000000000355E0
l00000000000355D4_ds_t:
	goto l000000000003561C
	// succ:  l000000000003561C
l00000000000355E0:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r4
	r2 = Mem0[r4 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime/internal/atomic.Xadd64 (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[r4 + 0x0000000000000010:word64] = 0x0000000000000000
	// succ:  l000000000003561C
l000000000003561C:
	r1 = Mem0[r4 + 0x0000000000000018:word64]
	branch r1 == 0x0000000000000000 l000000000003561C_ds_t
	// succ:  l000000000003561C_ds_f l000000000003561C_ds_t
l000000000003561C_ds_f:
	goto l0000000000035628
	// succ:  l0000000000035628
l000000000003561C_ds_t:
	goto l0000000000035654
	// succ:  l0000000000035654
l0000000000035628:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r4
	r2 = Mem0[r4 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime/internal/atomic.Xaddint64 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[r1 + 0x0000000000000018:word64] = 0x0000000000000000
	// succ:  l0000000000035654
l0000000000035654:
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*gcWork).dispose_exit
l0000000000035664:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.putfull (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000028:word64]
	goto l00000000000355D0
	// succ:  l00000000000355D0
l0000000000035680:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.putfull (retsize: 0;)
	goto l000000000003559C
	// succ:  l000000000003559C
runtime.(*gcWork).dispose_exit:


// runtime.(*gcWork).balance
// Return size: 0
void runtime.(*gcWork).balance()
runtime.(*gcWork).balance_entry:
	// succ:  l0000000000035698
l0000000000035698:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000035698_ds_t
	// succ:  l0000000000035698_ds_f l0000000000035698_ds_t
l0000000000035698_ds_f:
	goto l00000000000356A8
	// succ:  l00000000000356A8
l0000000000035698_ds_t:
	goto l00000000000356BC
	// succ:  l00000000000356BC
l00000000000356A8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000035698
	// succ:  l0000000000035698
l00000000000356BC:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[r4:word64]
	branch r1 != 0x0000000000000000 l00000000000356BC_ds_t
	// succ:  l00000000000356BC_ds_f l00000000000356BC_ds_t
l00000000000356BC_ds_f:
	goto l00000000000356D4
	// succ:  l00000000000356D4
l00000000000356BC_ds_t:
	goto l00000000000356E4
	// succ:  l00000000000356E4
l00000000000356D4:
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*gcWork).balance_exit
l00000000000356E4:
	r3 = Mem0[r4 + 0x0000000000000008:word64]
	r1 = Mem0[r3 + 0x0000000000000010:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l00000000000356E4_ds_t
	// succ:  l00000000000356E4_ds_f l00000000000356E4_ds_t
l00000000000356E4_ds_f:
	goto l00000000000356F8
	// succ:  l00000000000356F8
l00000000000356E4_ds_t:
	goto l000000000003572C
	// succ:  l000000000003572C
l00000000000356F8:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.putfull (retsize: 0;)
	call runtime.getempty (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000008:word64]
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[r1 + 0x0000000000000008:word64] = r2
	// succ:  l000000000003571C
l000000000003571C:
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*gcWork).balance_exit
l000000000003572C:
	r3 = Mem0[r4:word64]
	r1 = Mem0[r3 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l000000000003572C_ds_t
	// succ:  l000000000003572C_ds_f l000000000003572C_ds_t
l000000000003572C_ds_f:
	goto l0000000000035744
	// succ:  l0000000000035744
l000000000003572C_ds_t:
	goto l000000000003571C
	// succ:  l000000000003571C
l0000000000035744:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.handoff (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000010:word64]
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[r1:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*gcWork).balance_exit
runtime.(*gcWork).balance_exit:


// runtime.(*workbuf).checknonempty
// Return size: 0
void runtime.(*workbuf).checknonempty()
runtime.(*workbuf).checknonempty_entry:
	// succ:  l0000000000035770
l0000000000035770:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000035770_ds_t
	// succ:  l0000000000035770_ds_f l0000000000035770_ds_t
l0000000000035770_ds_f:
	goto l0000000000035780
	// succ:  l0000000000035780
l0000000000035770_ds_t:
	goto l0000000000035794
	// succ:  l0000000000035794
l0000000000035780:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000035770
	// succ:  l0000000000035770
l0000000000035794:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[r1 + 0x0000000000000010:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000035794_ds_t
	// succ:  l0000000000035794_ds_f l0000000000035794_ds_t
l0000000000035794_ds_f:
	goto l00000000000357B0
	// succ:  l00000000000357B0
l0000000000035794_ds_t:
	goto l00000000000357D0
	// succ:  l00000000000357D0
l00000000000357B0:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000357D0:
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*workbuf).checknonempty_exit
runtime.(*workbuf).checknonempty_exit:


// runtime.(*workbuf).checkempty
// Return size: 0
void runtime.(*workbuf).checkempty()
runtime.(*workbuf).checkempty_entry:
	// succ:  l00000000000357E0
l00000000000357E0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000357E0_ds_t
	// succ:  l00000000000357E0_ds_f l00000000000357E0_ds_t
l00000000000357E0_ds_f:
	goto l00000000000357F0
	// succ:  l00000000000357F0
l00000000000357E0_ds_t:
	goto l0000000000035804
	// succ:  l0000000000035804
l00000000000357F0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000357E0
	// succ:  l00000000000357E0
l0000000000035804:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[r1 + 0x0000000000000010:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000035804_ds_t
	// succ:  l0000000000035804_ds_f l0000000000035804_ds_t
l0000000000035804_ds_f:
	goto l0000000000035820
	// succ:  l0000000000035820
l0000000000035804_ds_t:
	goto l0000000000035840
	// succ:  l0000000000035840
l0000000000035820:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000035840:
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*workbuf).checkempty_exit
runtime.(*workbuf).checkempty_exit:


// runtime.getempty
// Return size: 0
void runtime.getempty()
runtime.getempty_entry:
	// succ:  l0000000000035850
l0000000000035850:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000035850_ds_t
	// succ:  l0000000000035850_ds_f l0000000000035850_ds_t
l0000000000035850_ds_f:
	goto l0000000000035860
	// succ:  l0000000000035860
l0000000000035850_ds_t:
	goto l0000000000035874
	// succ:  l0000000000035874
l0000000000035860:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000035850
	// succ:  l0000000000035850
l0000000000035874:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r3 = 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001528:word64]
	branch r1 == 0x0000000000000000 l0000000000035874_ds_t
	// succ:  l0000000000035874_ds_f l0000000000035874_ds_t
l0000000000035874_ds_f:
	goto l0000000000035894
	// succ:  l0000000000035894
l0000000000035874_ds_t:
	goto l00000000000358E4
	// succ:  l00000000000358E4
l0000000000035894:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lfstackpop (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l0000000000035894_ds_t
	// succ:  l0000000000035894_ds_f l0000000000035894_ds_t
l0000000000035894_ds_f:
	goto l00000000000358CC
	// succ:  l00000000000358CC
l0000000000035894_ds_t:
	goto l00000000000358E4
	// succ:  l00000000000358E4
l00000000000358CC:
	r1 = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.(*workbuf).checkempty (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000028:word64]
	// succ:  l00000000000358E4
l00000000000358E4:
	branch r3 != 0x0000000000000000 l00000000000358E4_ds_t
	// succ:  l00000000000358E4_ds_f l00000000000358E4_ds_t
l00000000000358E4_ds_f:
	goto l00000000000358EC
	// succ:  l00000000000358EC
l00000000000358E4_ds_t:
	goto l0000000000035928
	// succ:  l0000000000035928
l00000000000358EC:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000018:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.persistentalloc (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	// succ:  l0000000000035928
l0000000000035928:
	Mem0[sp + 0x0000000000000038:word64] = r3
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.getempty_exit
runtime.getempty_exit:


// runtime.putempty
// Return size: 0
void runtime.putempty()
runtime.putempty_entry:
	// succ:  l0000000000035940
l0000000000035940:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000035940_ds_t
	// succ:  l0000000000035940_ds_f l0000000000035940_ds_t
l0000000000035940_ds_f:
	goto l0000000000035950
	// succ:  l0000000000035950
l0000000000035940_ds_t:
	goto l0000000000035964
	// succ:  l0000000000035964
l0000000000035950:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000035940
	// succ:  l0000000000035940
l0000000000035964:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.(*workbuf).checkempty (retsize: 0;)
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000010:word64]
	branch r1 != 0x0000000000000000 l0000000000035964_ds_t
	// succ:  l0000000000035964_ds_f l0000000000035964_ds_t
l0000000000035964_ds_f:
	goto l00000000000359B0
	// succ:  l00000000000359B0
l0000000000035964_ds_t:
	goto l00000000000359B4
	// succ:  l00000000000359B4
l00000000000359B0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000359B4
l00000000000359B4:
	call runtime.lfstackpush (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.putempty_exit
runtime.putempty_exit:


// runtime.putfull
// Return size: 0
void runtime.putfull()
runtime.putfull_entry:
	// succ:  l00000000000359D0
l00000000000359D0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000359D0_ds_t
	// succ:  l00000000000359D0_ds_f l00000000000359D0_ds_t
l00000000000359D0_ds_f:
	goto l00000000000359E0
	// succ:  l00000000000359E0
l00000000000359D0_ds_t:
	goto l00000000000359F4
	// succ:  l00000000000359F4
l00000000000359E0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000359D0
	// succ:  l00000000000359D0
l00000000000359F4:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.(*workbuf).checknonempty (retsize: 0;)
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000010:word64]
	branch r1 != 0x0000000000000000 l00000000000359F4_ds_t
	// succ:  l00000000000359F4_ds_f l00000000000359F4_ds_t
l00000000000359F4_ds_f:
	goto l0000000000035A30
	// succ:  l0000000000035A30
l00000000000359F4_ds_t:
	goto l0000000000035A34
	// succ:  l0000000000035A34
l0000000000035A30:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000035A34
l0000000000035A34:
	call runtime.lfstackpush (retsize: 0;)
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006978:uint32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.putfull_exit:


// runtime.trygetfull
// Return size: 0
void runtime.trygetfull()
runtime.trygetfull_entry:
	// succ:  l0000000000035A98
l0000000000035A98:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000035A98_ds_t
	// succ:  l0000000000035A98_ds_f l0000000000035A98_ds_t
l0000000000035A98_ds_f:
	goto l0000000000035AA8
	// succ:  l0000000000035AA8
l0000000000035A98_ds_t:
	goto l0000000000035ABC
	// succ:  l0000000000035ABC
l0000000000035AA8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000035A98
	// succ:  l0000000000035A98
l0000000000035ABC:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lfstackpop (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l0000000000035ABC_ds_t
	// succ:  l0000000000035ABC_ds_f l0000000000035ABC_ds_t
l0000000000035ABC_ds_f:
	goto l0000000000035AEC
	// succ:  l0000000000035AEC
l0000000000035ABC_ds_t:
	goto l0000000000035B18
	// succ:  l0000000000035B18
l0000000000035AEC:
	r1 = r3
	Mem0[sp + 0x0000000000000018:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.(*workbuf).checknonempty (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000028:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.trygetfull_exit
l0000000000035B18:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.trygetfull_exit
runtime.trygetfull_exit:


// runtime.getfull
// Return size: 0
void runtime.getfull()
runtime.getfull_entry:
	// succ:  l0000000000035B30
l0000000000035B30:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000035B30_ds_t
	// succ:  l0000000000035B30_ds_f l0000000000035B30_ds_t
l0000000000035B30_ds_f:
	goto l0000000000035B40
	// succ:  l0000000000035B40
l0000000000035B30_ds_t:
	goto l0000000000035B54
	// succ:  l0000000000035B54
l0000000000035B40:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000035B30
	// succ:  l0000000000035B30
l0000000000035B54:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lfstackpop (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l0000000000035B54_ds_t
	// succ:  l0000000000035B54_ds_f l0000000000035B54_ds_t
l0000000000035B54_ds_f:
	goto l0000000000035B84
	// succ:  l0000000000035B84
l0000000000035B54_ds_t:
	goto l0000000000035BB0
	// succ:  l0000000000035BB0
l0000000000035B84:
	r1 = r3
	Mem0[sp + 0x0000000000000048:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.(*workbuf).checknonempty (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.getfull_exit
l0000000000035BB0:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.getfull_exit:


// runtime.handoff
// Return size: 0
void runtime.handoff()
runtime.handoff_entry:
	// succ:  l00000000000360F0
l00000000000360F0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000360F0_ds_t
	// succ:  l00000000000360F0_ds_f l00000000000360F0_ds_t
l00000000000360F0_ds_f:
	goto l0000000000036100
	// succ:  l0000000000036100
l00000000000360F0_ds_t:
	goto l0000000000036114
	// succ:  l0000000000036114
l0000000000036100:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000360F0
	// succ:  l00000000000360F0
l0000000000036114:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	call runtime.getempty (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r6 = Mem0[sp + 0x0000000000000008:word64]
	r1 = Mem0[r4 + 0x0000000000000010:word64]
	r2 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000036114_ds_t
	// succ:  l0000000000036114_ds_f l0000000000036114_ds_t
l0000000000036114_ds_f:
	goto l0000000000036144
	// succ:  l0000000000036144
l0000000000036114_ds_t:
	goto l0000000000036150
	// succ:  l0000000000036150
l0000000000036144:
	call runtime.panicdivide (retsize: 0;)
l0000000000036150:
	lo = r1 / r3
	hi = r1 % r3
	r5 = lo
	r2 = Mem0[r4 + 0x0000000000000010:word64]
runtime.handoff_exit:


// runtime.recordspan
// Return size: 0
void runtime.recordspan()
runtime.recordspan_entry:
	// succ:  l0000000000036210
l0000000000036210:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -144
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000036210_ds_t
	// succ:  l0000000000036210_ds_f l0000000000036210_ds_t
l0000000000036210_ds_f:
	goto l0000000000036224
	// succ:  l0000000000036224
l0000000000036210_ds_t:
	goto l0000000000036238
	// succ:  l0000000000036238
l0000000000036224:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000036210
	// succ:  l0000000000036210
l0000000000036238:
	sp = sp + -144
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000078:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000080:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000088:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000098:word64]
	Mem0[sp + 0x0000000000000068:word64] = r1
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	Mem0[sp + 0x0000000000000060:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011E8:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x00000000000011F0:word64]
	r23 = (word64) (r1 < r3)
	branch r23 != 0x0000000000000000 l0000000000036238_ds_t
	// succ:  l0000000000036238_ds_f l0000000000036238_ds_t
l0000000000036238_ds_f:
	goto l0000000000036280
	// succ:  l0000000000036280
l0000000000036238_ds_t:
	goto l0000000000036730
	// succ:  l0000000000036730
l0000000000036280:
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011F0:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l0000000000036548:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r5 = Mem0[r23 + 0x00000000000011E0:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r4 = Mem0[r23 + 0x00000000000011E8:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x00000000000011F0:word64]
	lo = r1 / r4
	hi = r1 % r4
	r23 = (word64) (r3 <u r1)
	branch r23 == 0x0000000000000000 l0000000000036548_ds_t
	// succ:  l0000000000036548_ds_f l0000000000036548_ds_t
l0000000000036548_ds_f:
	goto l000000000003657C
	// succ:  l000000000003657C
l0000000000036548_ds_t:
	goto l00000000000366B0
	// succ:  l00000000000366B0
l000000000003657C:
	r2 = 0x0000000000090000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r5
	Mem0[sp + 0x0000000000000018:word64] = r4
	r2 = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	Mem0[sp + 0x0000000000000028:word64] = r1
	call runtime.growslice (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000030:word64]
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000050:word64] = r4
	lo = r1 / r4
	hi = r1 % r4
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000011E8:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000011F0:word64] = r2
	r1 = r5
	Mem0[sp + 0x0000000000000070:word64] = r5
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l000000000003657C_ds_t
	// succ:  l000000000003657C_ds_f l000000000003657C_ds_t
l000000000003657C_ds_f:
	goto l00000000000365F4
	// succ:  l00000000000365F4
l000000000003657C_ds_t:
	goto l0000000000036684
	// succ:  l0000000000036684
l00000000000365F4:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000011E0:word64] = r1
l0000000000036600:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
l0000000000036684:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r5
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000070:word64]
	r4 = Mem0[sp + 0x0000000000000050:word64]
	goto l0000000000036600
	// succ:  l0000000000036600
l00000000000366B0:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000011E8:word64] = r1
	goto l0000000000036600
	// succ:  l0000000000036600
l0000000000036730:
	goto l0000000000036548
	// succ:  l0000000000036548
runtime.recordspan_exit:


// runtime.(*mheap).init
// Return size: 0
void runtime.(*mheap).init()
runtime.(*mheap).init_entry:
	// succ:  l0000000000036738
l0000000000036738:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -160
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000036738_ds_t
	// succ:  l0000000000036738_ds_f l0000000000036738_ds_t
l0000000000036738_ds_f:
	goto l000000000003674C
	// succ:  l000000000003674C
l0000000000036738_ds_t:
	goto l0000000000036760
	// succ:  l0000000000036760
l000000000003674C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000036738
	// succ:  l0000000000036738
l0000000000036760:
	sp = sp + -160
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x00000000000000A8:word64]
	branch r5 != 0x0000000000000000 l0000000000036760_ds_t
	// succ:  l0000000000036760_ds_f l0000000000036760_ds_t
l0000000000036760_ds_f:
	goto l0000000000036774
	// succ:  l0000000000036774
l0000000000036760_ds_t:
	goto l0000000000036778
	// succ:  l0000000000036778
l0000000000036774:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000036778
l0000000000036778:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r5 / r5
	hi = r5 % r5
	r7 = Mem0[sp + 0x00000000000000A8:word64]
	r6 = 0x00000000000F0000
	lo = r6 / r6
	hi = r6 % r6
	lo = r6 / r6
	hi = r6 % r6
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r6 / r6
	hi = r6 % r6
	r2 = 0x00000000000A0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	Mem0[sp + 0x0000000000000098:word64] = r7
	Mem0[sp + 0x0000000000000048:word64] = r6
	Mem0[r5:word64] = r4
	r1 = r5
	Mem0[sp + 0x0000000000000060:word64] = r5
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000036778_ds_t
	// succ:  l0000000000036778_ds_f l0000000000036778_ds_t
l0000000000036778_ds_f:
	goto l00000000000367D4
	// succ:  l00000000000367D4
l0000000000036778_ds_t:
	goto l0000000000037034
	// succ:  l0000000000037034
l00000000000367D4:
	Mem0[r1 + 0x0000000000000008:word64] = r2
	goto l00000000000367D8
	// succ:  l00000000000367D8
l00000000000367D4_ds_f:
	goto l00000000000367E4
	// succ:  l00000000000367E4
l00000000000367D4_ds_t:
	goto l00000000000367E8
	// succ:  l00000000000367E8
l00000000000367D8:
	r1 = r5
	branch r5 != 0x0000000000000000 l00000000000367D4_ds_t
	goto l00000000000367D4_ds_f
	// succ:  l00000000000367D4_ds_f l00000000000367D4_ds_t
l00000000000367E4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000367E8
l00000000000367E8:
	r2 = Mem0[sp + 0x0000000000000098:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l00000000000367E8_ds_t
	// succ:  l00000000000367E8_ds_f l00000000000367E8_ds_t
l00000000000367E8_ds_f:
	goto l0000000000036804
	// succ:  l0000000000036804
l00000000000367E8_ds_t:
	goto l0000000000037014
	// succ:  l0000000000037014
l0000000000036804:
	Mem0[r1 + 0x0000000000000010:word64] = r2
	// succ:  l0000000000036808
l0000000000036808:
	Mem0[r5 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000020:word64] = 0x0000000000000000
l0000000000037014:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000060:word64]
	goto l0000000000036808
	// succ:  l0000000000036808
l0000000000037034:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000060:word64]
	goto l00000000000367D8
	// succ:  l00000000000367D8
runtime.(*mheap).init_exit:


// runtime.(*mheap).mapSpans
// Return size: 0
void runtime.(*mheap).mapSpans()
runtime.(*mheap).mapSpans_entry:
	// succ:  l0000000000037058
l0000000000037058:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000037058_ds_t
	// succ:  l0000000000037058_ds_f l0000000000037058_ds_t
l0000000000037058_ds_f:
	goto l0000000000037068
	// succ:  l0000000000037068
l0000000000037058_ds_t:
	goto l000000000003707C
	// succ:  l000000000003707C
l0000000000037068:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000037058
	// succ:  l0000000000037058
l000000000003707C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r3 = Mem0[sp + 0x0000000000000040:word64]
	branch r5 != 0x0000000000000000 l000000000003707C_ds_t
	// succ:  l000000000003707C_ds_f l000000000003707C_ds_t
l000000000003707C_ds_f:
	goto l0000000000037094
	// succ:  l0000000000037094
l000000000003707C_ds_t:
	goto l0000000000037098
	// succ:  l0000000000037098
l0000000000037094:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000037098
l0000000000037098:
	r1 = Mem0[r5 + 0x00000000000012B0:word64]
runtime.(*mheap).mapSpans_exit:


// runtime.(*mheap).reclaimList
// Return size: 0
void runtime.(*mheap).reclaimList()
runtime.(*mheap).reclaimList_entry:
	// succ:  l0000000000037188
l0000000000037188:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000037188_ds_t
	// succ:  l0000000000037188_ds_f l0000000000037188_ds_t
l0000000000037188_ds_f:
	goto l0000000000037198
	// succ:  l0000000000037198
l0000000000037188_ds_t:
	goto l00000000000371AC
	// succ:  l00000000000371AC
l0000000000037198:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000037188
	// succ:  l0000000000037188
l00000000000371AC:
	sp = sp + -64
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000007CFC:uint32]
runtime.(*mheap).reclaimList_exit:


// runtime.(*mheap).reclaim
// Return size: 0
void runtime.(*mheap).reclaim()
runtime.(*mheap).reclaim_entry:
	// succ:  l0000000000037400
l0000000000037400:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000037400_ds_t
	// succ:  l0000000000037400_ds_f l0000000000037400_ds_t
l0000000000037400_ds_f:
	goto l0000000000037410
	// succ:  l0000000000037410
l0000000000037400_ds_t:
	goto l0000000000037424
	// succ:  l0000000000037424
l0000000000037410:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000037400
	// succ:  l0000000000037400
l0000000000037424:
	sp = sp + -72
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000058:word64]
	r4 = Mem0[sp + 0x0000000000000050:word64]
	r3 = r5
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l0000000000037424_ds_t
	// succ:  l0000000000037424_ds_f l0000000000037424_ds_t
l0000000000037424_ds_f:
	goto l0000000000037448
	// succ:  l0000000000037448
l0000000000037424_ds_t:
	goto l00000000000374DC
	// succ:  l00000000000374DC
l0000000000037448:
	Mem0[sp + 0x0000000000000008:word64] = r4
	branch r4 != 0x0000000000000000 l0000000000037448_ds_t
	// succ:  l0000000000037448_ds_f l0000000000037448_ds_t
l0000000000037448_ds_f:
	goto l0000000000037454
	// succ:  l0000000000037454
l0000000000037448_ds_t:
	goto l0000000000037458
	// succ:  l0000000000037458
l0000000000037454:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000037458
l0000000000037458:
	lo = r2 / r4
	hi = r2 % r4
	Mem0[sp + 0x0000000000000038:word64] = r3
	r1 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r1 <u r3)
	branch r23 != 0x0000000000000000 l0000000000037458_ds_t
	// succ:  l0000000000037458_ds_f l0000000000037458_ds_t
l0000000000037458_ds_f:
	goto l0000000000037474
	// succ:  l0000000000037474
l0000000000037458_ds_t:
	goto l0000000000037480
	// succ:  l0000000000037480
l0000000000037474:
	call runtime.panicindex (retsize: 0;)
l0000000000037480:
l00000000000374DC:
	Mem0[sp + 0x0000000000000008:word64] = r4
	Mem0[sp + 0x0000000000000010:word64] = r4
	r1 = Mem0[sp + 0x0000000000000010:word64]
	branch r1 != 0x0000000000000000 l00000000000374DC_ds_t
	// succ:  l00000000000374DC_ds_f l00000000000374DC_ds_t
l00000000000374DC_ds_f:
	goto l00000000000374F0
	// succ:  l00000000000374F0
l00000000000374DC_ds_t:
	goto l00000000000374F4
	// succ:  l00000000000374F4
l00000000000374F0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000374F4
l00000000000374F4:
	r1 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = r5
	Mem0[sp + 0x0000000000000018:word64] = r5
	call runtime.(*mheap).reclaimList (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000050:word64]
	r5 = Mem0[sp + 0x0000000000000058:word64]
	r1 = Mem0[sp + 0x0000000000000020:word64]
	branch r1 == 0x0000000000000000 l00000000000374F4_ds_t
	// succ:  l00000000000374F4_ds_f l00000000000374F4_ds_t
l00000000000374F4_ds_f:
	goto l0000000000037528
	// succ:  l0000000000037528
l00000000000374F4_ds_t:
	goto l0000000000037538
	// succ:  l0000000000037538
l0000000000037528:
	r4 = Mem0[sp:word64]
	sp = sp + 72
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mheap).reclaim_exit
l0000000000037538:
	r4 = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	r3 = 0x0000000000000000
	r2 = r3
	r23 = (word64) (r3 < r5)
	branch r23 == 0x0000000000000000 l0000000000037538_ds_t
	// succ:  l0000000000037538_ds_f l0000000000037538_ds_t
l0000000000037538_ds_f:
	goto l0000000000037554
	// succ:  l0000000000037554
l0000000000037538_ds_t:
	goto l0000000000037610
	// succ:  l0000000000037610
l0000000000037554:
l0000000000037610:
	Mem0[sp + 0x0000000000000008:word64] = r6
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000037610_ds_t
	// succ:  l0000000000037610_ds_f l0000000000037610_ds_t
l0000000000037610_ds_f:
	goto l0000000000037620
	// succ:  l0000000000037620
l0000000000037610_ds_t:
	goto l0000000000037624
	// succ:  l0000000000037624
l0000000000037620:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000037624
l0000000000037624:
	call runtime.unlock (retsize: 0;)
	goto l000000000003762C
	// succ:  l000000000003762C
l0000000000037624_ds_f:
	goto l0000000000037644
	// succ:  l0000000000037644
l0000000000037624_ds_t:
	goto l0000000000037674
	// succ:  l0000000000037674
l000000000003762C:
	call runtime.sweepone (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r3 != r2 l0000000000037624_ds_t
	goto l0000000000037624_ds_f
	// succ:  l0000000000037624_ds_f l0000000000037624_ds_t
l0000000000037644:
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000037644_ds_t
	// succ:  l0000000000037644_ds_f l0000000000037644_ds_t
l0000000000037644_ds_f:
	goto l0000000000037658
	// succ:  l0000000000037658
l0000000000037644_ds_t:
	goto l000000000003765C
	// succ:  l000000000003765C
l0000000000037658:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003765C
l000000000003765C:
	call runtime.lock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 72
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mheap).reclaim_exit
l0000000000037674:
	r1 = Mem0[sp + 0x0000000000000028:word64]
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000028:word64] = r1
	r2 = Mem0[sp + 0x0000000000000058:word64]
	r23 = (word64) (r1 <u r2)
	branch r23 != 0x0000000000000000 l0000000000037674_ds_t
	// succ:  l0000000000037674_ds_f l0000000000037674_ds_t
l0000000000037674_ds_f:
	goto l0000000000037690
	// succ:  l0000000000037690
l0000000000037674_ds_t:
	goto l000000000003762C
	// succ:  l000000000003762C
l0000000000037690:
	goto l0000000000037644
	// succ:  l0000000000037644
runtime.(*mheap).reclaim_exit:


// runtime.(*mheap).alloc_m
// Return size: 0
void runtime.(*mheap).alloc_m()
runtime.(*mheap).alloc_m_entry:
	// succ:  l0000000000037698
l0000000000037698:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000037698_ds_t
	// succ:  l0000000000037698_ds_f l0000000000037698_ds_t
l0000000000037698_ds_f:
	goto l00000000000376A8
	// succ:  l00000000000376A8
l0000000000037698_ds_t:
	goto l00000000000376BC
	// succ:  l00000000000376BC
l00000000000376A8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000037698
	// succ:  l0000000000037698
l00000000000376BC:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r3 = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	Mem0[sp + 0x0000000000000028:word64] = r30
	r2 = r30
	branch r1 == r30 l00000000000376BC_ds_t
	// succ:  l00000000000376BC_ds_f l00000000000376BC_ds_t
l00000000000376BC_ds_f:
	goto l00000000000376E0
	// succ:  l00000000000376E0
l00000000000376BC_ds_t:
	goto l0000000000037700
	// succ:  l0000000000037700
l00000000000376E0:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000037700:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000037700_ds_t
	// succ:  l0000000000037700_ds_f l0000000000037700_ds_t
l0000000000037700_ds_f:
	goto l0000000000037714
	// succ:  l0000000000037714
l0000000000037700_ds_t:
	goto l0000000000037718
	// succ:  l0000000000037718
l0000000000037714:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000037718
l0000000000037718:
	call runtime.lock (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000038:word64]
	r5 = Mem0[sp + 0x0000000000000028:word64]
	branch r6 != 0x0000000000000000 l0000000000037718_ds_t
	// succ:  l0000000000037718_ds_f l0000000000037718_ds_t
l0000000000037718_ds_f:
	goto l0000000000037730
	// succ:  l0000000000037730
l0000000000037718_ds_t:
	goto l0000000000037734
	// succ:  l0000000000037734
l0000000000037730:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000037734
l0000000000037734:
	r1 = (word64) Mem0[r6 + 0x0000000000001040:uint32]
runtime.(*mheap).alloc_m_exit:


// runtime.(*mheap).alloc
// Return size: 0
void runtime.(*mheap).alloc()
runtime.(*mheap).alloc_entry:
	// succ:  l0000000000037B98
l0000000000037B98:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000037B98_ds_t
	// succ:  l0000000000037B98_ds_f l0000000000037B98_ds_t
l0000000000037B98_ds_f:
	goto l0000000000037BA8
	// succ:  l0000000000037BA8
l0000000000037B98_ds_t:
	goto l0000000000037BBC
	// succ:  l0000000000037BBC
l0000000000037BA8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000037B98
	// succ:  l0000000000037B98
l0000000000037BBC:
	sp = sp + -72
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	lo = r2 / sp
	hi = r2 % sp
	Mem0[r3 + 0x0000000000000008:word64] = r2
	r2 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[r3 + 0x0000000000000010:word64] = r2
	r2 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[r3 + 0x0000000000000018:word64] = r2
	r2 = (word64) Mem0[sp + 0x0000000000000060:int32]
	Mem0[r3 + 0x0000000000000020:word32] = (word32) r2
	r2 = (word64) Mem0[sp + 0x0000000000000064:byte]
	Mem0[r3 + 0x0000000000000024:byte] = (byte) r2
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	branch r1 == 0x0000000000000000 l0000000000037BBC_ds_t
	// succ:  l0000000000037BBC_ds_f l0000000000037BBC_ds_t
l0000000000037BBC_ds_f:
	goto l0000000000037C20
	// succ:  l0000000000037C20
l0000000000037BBC_ds_t:
	goto l0000000000037C7C
	// succ:  l0000000000037C7C
l0000000000037C20:
	r1 = (word64) Mem0[sp + 0x0000000000000065:byte]
	branch r1 == 0x0000000000000000 l0000000000037C20_ds_t
	// succ:  l0000000000037C20_ds_f l0000000000037C20_ds_t
l0000000000037C20_ds_f:
	goto l0000000000037C2C
	// succ:  l0000000000037C2C
l0000000000037C20_ds_t:
	goto l0000000000037C70
	// succ:  l0000000000037C70
l0000000000037C2C:
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r1 = (word64) Mem0[r1 + 0x0000000000000065:byte]
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l0000000000037C2C_ds_t
	// succ:  l0000000000037C2C_ds_f l0000000000037C2C_ds_t
l0000000000037C2C_ds_f:
	goto l0000000000037C48
	// succ:  l0000000000037C48
l0000000000037C2C_ds_t:
	goto l0000000000037C70
	// succ:  l0000000000037C70
l0000000000037C48:
	r2 = Mem0[sp + 0x0000000000000018:word64]
	r2 = Mem0[r2 + 0x0000000000000018:word64]
	r3 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[r1 + 0x0000000000000020:word64]
l0000000000037C70:
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r2 = 0x0000000000000000
	Mem0[r1 + 0x0000000000000065:byte] = (byte) r2
	// succ:  l0000000000037C7C
l0000000000037C7C:
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000068:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 72
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mheap).alloc_exit
runtime.(*mheap).alloc_exit:


// runtime.(*mheap).allocStack
// Return size: 0
void runtime.(*mheap).allocStack()
runtime.(*mheap).allocStack_entry:
	// succ:  l0000000000037C98
l0000000000037C98:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000037C98_ds_t
	// succ:  l0000000000037C98_ds_f l0000000000037C98_ds_t
l0000000000037C98_ds_f:
	goto l0000000000037CA8
	// succ:  l0000000000037CA8
l0000000000037C98_ds_t:
	goto l0000000000037CBC
	// succ:  l0000000000037CBC
l0000000000037CA8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000037C98
	// succ:  l0000000000037C98
l0000000000037CBC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r3 = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	r2 = r30
	branch r1 == r30 l0000000000037CBC_ds_t
	// succ:  l0000000000037CBC_ds_f l0000000000037CBC_ds_t
l0000000000037CBC_ds_f:
	goto l0000000000037CDC
	// succ:  l0000000000037CDC
l0000000000037CBC_ds_t:
	goto l0000000000037CFC
	// succ:  l0000000000037CFC
l0000000000037CDC:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000037CFC:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000037CFC_ds_t
	// succ:  l0000000000037CFC_ds_f l0000000000037CFC_ds_t
l0000000000037CFC_ds_f:
	goto l0000000000037D10
	// succ:  l0000000000037D10
l0000000000037CFC_ds_t:
	goto l0000000000037D14
	// succ:  l0000000000037D14
l0000000000037D10:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000037D14
l0000000000037D14:
	call runtime.lock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.(*mheap).allocSpanLocked (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000020:word64] = r3
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l0000000000037D14_ds_t
	// succ:  l0000000000037D14_ds_f l0000000000037D14_ds_t
l0000000000037D14_ds_f:
	goto l0000000000037D48
	// succ:  l0000000000037D48
l0000000000037D14_ds_t:
	goto l0000000000037D88
	// succ:  l0000000000037D88
l0000000000037D48:
l0000000000037D88:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000037D88_ds_t
	// succ:  l0000000000037D88_ds_f l0000000000037D88_ds_t
l0000000000037D88_ds_f:
	goto l0000000000037D9C
	// succ:  l0000000000037D9C
l0000000000037D88_ds_t:
	goto l0000000000037DA0
	// succ:  l0000000000037DA0
l0000000000037D9C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000037DA0
l0000000000037DA0:
	call runtime.unlock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mheap).allocStack_exit
runtime.(*mheap).allocStack_exit:


// runtime.(*mheap).allocSpanLocked
// Return size: 0
void runtime.(*mheap).allocSpanLocked()
runtime.(*mheap).allocSpanLocked_entry:
	// succ:  l0000000000037DC0
l0000000000037DC0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000037DC0_ds_t
	// succ:  l0000000000037DC0_ds_f l0000000000037DC0_ds_t
l0000000000037DC0_ds_f:
	goto l0000000000037DD0
	// succ:  l0000000000037DD0
l0000000000037DC0_ds_t:
	goto l0000000000037DE4
	// succ:  l0000000000037DE4
l0000000000037DD0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000037DC0
	// succ:  l0000000000037DC0
l0000000000037DE4:
	sp = sp + -88
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000060:word64]
	r4 = Mem0[sp + 0x0000000000000068:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r4 < r2)
	branch r23 == 0x0000000000000000 l0000000000037DE4_ds_t
	// succ:  l0000000000037DE4_ds_f l0000000000037DE4_ds_t
l0000000000037DE4_ds_f:
	goto l0000000000037E04
	// succ:  l0000000000037E04
l0000000000037DE4_ds_t:
	goto l0000000000038484
	// succ:  l0000000000038484
l0000000000037E04:
	branch r5 != 0x0000000000000000 l0000000000037E04_ds_t
	// succ:  l0000000000037E04_ds_f l0000000000037E04_ds_t
l0000000000037E04_ds_f:
	goto l0000000000037E0C
	// succ:  l0000000000037E0C
l0000000000037E04_ds_t:
	goto l0000000000037E10
	// succ:  l0000000000037E10
l0000000000037E0C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000037E10
l0000000000037E10:
	lo = r2 / r5
	hi = r2 % r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r1 = r4
	r23 = (word64) (r4 <u r3)
	branch r23 != 0x0000000000000000 l0000000000037E10_ds_t
	// succ:  l0000000000037E10_ds_f l0000000000037E10_ds_t
l0000000000037E10_ds_f:
	goto l0000000000037E28
	// succ:  l0000000000037E28
l0000000000037E10_ds_t:
	goto l0000000000037E34
	// succ:  l0000000000037E34
l0000000000037E28:
	call runtime.panicindex (retsize: 0;)
l0000000000037E34:
l0000000000037E70:
	Mem0[sp + 0x0000000000000048:word64] = r3
	r1 = (word64) Mem0[r3 + 0x0000000000000064:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l0000000000037E70_ds_t
	// succ:  l0000000000037E70_ds_f l0000000000037E70_ds_t
l0000000000037E70_ds_f:
	goto l0000000000037E90
	// succ:  l0000000000037E90
l0000000000037E70_ds_t:
	goto l0000000000037EB8
	// succ:  l0000000000037EB8
l0000000000037E90:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000037EB8:
	r1 = Mem0[r3 + 0x0000000000000020:word64]
	r2 = Mem0[sp + 0x0000000000000068:word64]
	r23 = (word64) (r1 <u r2)
	branch r23 == 0x0000000000000000 l0000000000037EB8_ds_t
	// succ:  l0000000000037EB8_ds_f l0000000000037EB8_ds_t
l0000000000037EB8_ds_f:
	goto l0000000000037ECC
	// succ:  l0000000000037ECC
l0000000000037EB8_ds_t:
	goto l0000000000037EF4
	// succ:  l0000000000037EF4
l0000000000037ECC:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000037EF4:
	Mem0[sp + 0x0000000000000008:word64] = r6
	r1 = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.(*mSpanList).remove (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000048:word64]
	r1 = 0x0000000000000000
	r1 = Mem0[r6 + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000037EF4_ds_t
	// succ:  l0000000000037EF4_ds_f l0000000000037EF4_ds_t
l0000000000037EF4_ds_f:
	goto l0000000000037F1C
	// succ:  l0000000000037F1C
l0000000000037EF4_ds_t:
	goto l0000000000038458
	// succ:  l0000000000038458
l0000000000037F1C:
	r2 = 0x0000000000000000
	goto l0000000000037F20
	// succ:  l0000000000037F20
l0000000000037F1C_ds_f:
	goto l0000000000037F34
	// succ:  l0000000000037F34
l0000000000037F1C_ds_t:
	goto l0000000000037F58
	// succ:  l0000000000037F58
l0000000000037F20:
	r1 = r2 + 0x00000000000000FF
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000037F1C_ds_t
	goto l0000000000037F1C_ds_f
	// succ:  l0000000000037F1C_ds_f l0000000000037F1C_ds_t
l0000000000037F34:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000037F58:
	r1 = Mem0[r6 + 0x0000000000000078:word64]
	r23 = (word64) (0x0000000000000000 <u r1)
	branch r23 == 0x0000000000000000 l0000000000037F58_ds_t
	// succ:  l0000000000037F58_ds_f l0000000000037F58_ds_t
l0000000000037F58_ds_f:
	goto l0000000000037F68
	// succ:  l0000000000037F68
l0000000000037F58_ds_t:
	goto l0000000000037FB4
	// succ:  l0000000000037FB4
l0000000000037F68:
	r2 = Mem0[r6 + 0x0000000000000018:word64]
	r3 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[r6 + 0x0000000000000020:word64]
l0000000000037FB4:
	r1 = Mem0[r6 + 0x0000000000000020:word64]
	r2 = Mem0[sp + 0x0000000000000068:word64]
	r23 = (word64) (r2 <u r1)
	branch r23 == 0x0000000000000000 l0000000000037FB4_ds_t
	// succ:  l0000000000037FB4_ds_f l0000000000037FB4_ds_t
l0000000000037FB4_ds_f:
	goto l0000000000037FC8
	// succ:  l0000000000037FC8
l0000000000037FB4_ds_t:
	goto l000000000003824C
	// succ:  l000000000003824C
l0000000000037FC8:
	r1 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000037FC8_ds_t
	// succ:  l0000000000037FC8_ds_f l0000000000037FC8_ds_t
l0000000000037FC8_ds_f:
	goto l0000000000037FDC
	// succ:  l0000000000037FDC
l0000000000037FC8_ds_t:
	goto l0000000000037FE0
	// succ:  l0000000000037FE0
l0000000000037FDC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000037FE0
l0000000000037FE0:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.(*fixalloc).alloc (retsize: 0;)
	r8 = Mem0[sp + 0x0000000000000068:word64]
	r6 = Mem0[sp + 0x0000000000000048:word64]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r7 = Mem0[r6 + 0x0000000000000018:word64]
l000000000003824C:
	Mem0[r6 + 0x0000000000000070:word64] = 0x0000000000000000
	r1 = Mem0[r6 + 0x0000000000000018:word64]
	r2 = Mem0[sp + 0x0000000000000060:word64]
	branch r2 != 0x0000000000000000 l000000000003824C_ds_t
	// succ:  l000000000003824C_ds_f l000000000003824C_ds_t
l000000000003824C_ds_f:
	goto l0000000000038260
	// succ:  l0000000000038260
l000000000003824C_ds_t:
	goto l0000000000038264
	// succ:  l0000000000038264
l0000000000038260:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000038264
l0000000000038264:
	r2 = Mem0[r2 + 0x00000000000012B0:word64]
l0000000000038458:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l0000000000037F20
	// succ:  l0000000000037F20
l0000000000038484:
	branch r5 != 0x0000000000000000 l0000000000038484_ds_t
	// succ:  l0000000000038484_ds_f l0000000000038484_ds_t
l0000000000038484_ds_f:
	goto l000000000003848C
	// succ:  l000000000003848C
l0000000000038484_ds_t:
	goto l0000000000038490
	// succ:  l0000000000038490
l000000000003848C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000038490
l0000000000038490:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r5
	hi = r1 % r5
	Mem0[sp + 0x0000000000000050:word64] = r1
	Mem0[sp + 0x0000000000000008:word64] = r5
	r1 = Mem0[sp + 0x0000000000000068:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.(*mheap).allocLarge (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000050:word64]
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000038490_ds_t
	// succ:  l0000000000038490_ds_f l0000000000038490_ds_t
l0000000000038490_ds_f:
	goto l00000000000384C4
	// succ:  l00000000000384C4
l0000000000038490_ds_t:
	goto l0000000000037E70
	// succ:  l0000000000037E70
l00000000000384C4:
	r1 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000068:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.(*mheap).grow (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l00000000000384C4_ds_t
	// succ:  l00000000000384C4_ds_f l00000000000384C4_ds_t
l00000000000384C4_ds_f:
	goto l00000000000384F0
	// succ:  l00000000000384F0
l00000000000384C4_ds_t:
	goto l0000000000038504
	// succ:  l0000000000038504
l00000000000384F0:
	Mem0[sp + 0x0000000000000070:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 88
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mheap).allocSpanLocked_exit
l0000000000038504:
	r1 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000068:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.(*mheap).allocLarge (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000050:word64]
	r3 = Mem0[sp + 0x0000000000000018:word64]
	branch r3 != 0x0000000000000000 l0000000000038504_ds_t
	// succ:  l0000000000038504_ds_f l0000000000038504_ds_t
l0000000000038504_ds_f:
	goto l000000000003852C
	// succ:  l000000000003852C
l0000000000038504_ds_t:
	goto l0000000000037E70
	// succ:  l0000000000037E70
l000000000003852C:
	Mem0[sp + 0x0000000000000070:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 88
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mheap).allocSpanLocked_exit
runtime.(*mheap).allocSpanLocked_exit:


// runtime.(*mheap).allocLarge
// Return size: 0
void runtime.(*mheap).allocLarge()
runtime.(*mheap).allocLarge_entry:
	// succ:  l0000000000038550
l0000000000038550:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000038550_ds_t
	// succ:  l0000000000038550_ds_f l0000000000038550_ds_t
l0000000000038550_ds_f:
	goto l0000000000038560
	// succ:  l0000000000038560
l0000000000038550_ds_t:
	goto l0000000000038574
	// succ:  l0000000000038574
l0000000000038560:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000038550
	// succ:  l0000000000038550
l0000000000038574:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000038574_ds_t
	// succ:  l0000000000038574_ds_f l0000000000038574_ds_t
l0000000000038574_ds_f:
	goto l0000000000038590
	// succ:  l0000000000038590
l0000000000038574_ds_t:
	goto l0000000000038594
	// succ:  l0000000000038594
l0000000000038590:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000038594
l0000000000038594:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	call runtime.bestFit (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mheap).allocLarge_exit
runtime.(*mheap).allocLarge_exit:


// runtime.bestFit
// Return size: 0
void runtime.bestFit()
runtime.bestFit_entry:
	// succ:  l00000000000385D8
l00000000000385D8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000385D8_ds_t
	// succ:  l00000000000385D8_ds_f l00000000000385D8_ds_t
l00000000000385D8_ds_f:
	goto l00000000000385E8
	// succ:  l00000000000385E8
l00000000000385D8_ds_t:
	goto l00000000000385FC
	// succ:  l00000000000385FC
l00000000000385E8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000385D8
	// succ:  l00000000000385D8
l00000000000385FC:
	r7 = Mem0[sp + 0x0000000000000010:word64]
	r4 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r3 = Mem0[r1:word64]
	branch r3 == 0x0000000000000000 l00000000000385FC_ds_t
	// succ:  l00000000000385FC_ds_f l00000000000385FC_ds_t
l00000000000385FC_ds_f:
	goto l0000000000038614
	// succ:  l0000000000038614
l00000000000385FC_ds_t:
	goto l0000000000038630
	// succ:  l0000000000038630
l0000000000038614:
	r1 = Mem0[r3 + 0x0000000000000020:word64]
	r23 = (word64) (r1 <u r7)
	branch r23 == 0x0000000000000000 l0000000000038614_ds_t
	// succ:  l0000000000038614_ds_f l0000000000038614_ds_t
l0000000000038614_ds_f:
	goto l0000000000038624
	// succ:  l0000000000038624
l0000000000038614_ds_t:
	goto l000000000003863C
	// succ:  l000000000003863C
l0000000000038624:
	r3 = Mem0[r3:word64]
	branch r3 != 0x0000000000000000 l0000000000038624_ds_t
	// succ:  l0000000000038624_ds_f l0000000000038624_ds_t
l0000000000038624_ds_f:
	goto l0000000000038630
	// succ:  l0000000000038630
l0000000000038624_ds_t:
	goto l0000000000038614
	// succ:  l0000000000038614
l0000000000038630:
	Mem0[sp + 0x0000000000000020:word64] = r4
	return
	// succ:  runtime.bestFit_exit
l000000000003863C:
	branch r4 == 0x0000000000000000 l000000000003863C_ds_t
	// succ:  l000000000003863C_ds_f l000000000003863C_ds_t
l000000000003863C_ds_f:
	goto l0000000000038644
	// succ:  l0000000000038644
l000000000003863C_ds_t:
	goto l000000000003867C
	// succ:  l000000000003867C
l0000000000038644:
	r1 = Mem0[r3 + 0x0000000000000020:word64]
	r2 = Mem0[r4 + 0x0000000000000020:word64]
	r23 = (word64) (r1 <u r2)
	branch r23 != 0x0000000000000000 l0000000000038644_ds_t
	// succ:  l0000000000038644_ds_f l0000000000038644_ds_t
l0000000000038644_ds_f:
	goto l0000000000038658
	// succ:  l0000000000038658
l0000000000038644_ds_t:
	goto l000000000003867C
	// succ:  l000000000003867C
l0000000000038658:
	r1 = Mem0[r3 + 0x0000000000000020:word64]
	r2 = Mem0[r4 + 0x0000000000000020:word64]
	branch r1 != r2 l0000000000038658_ds_t
	// succ:  l0000000000038658_ds_f l0000000000038658_ds_t
l0000000000038658_ds_f:
	goto l0000000000038668
	// succ:  l0000000000038668
l0000000000038658_ds_t:
	goto l0000000000038624
	// succ:  l0000000000038624
l0000000000038668:
	r6 = Mem0[r3 + 0x0000000000000018:word64]
	r2 = Mem0[r4 + 0x0000000000000018:word64]
	r23 = (word64) (r6 <u r2)
	branch r23 == 0x0000000000000000 l0000000000038668_ds_t
	// succ:  l0000000000038668_ds_f l0000000000038668_ds_t
l0000000000038668_ds_f:
	goto l000000000003867C
	// succ:  l000000000003867C
l0000000000038668_ds_t:
	goto l0000000000038624
	// succ:  l0000000000038624
l000000000003867C:
	r4 = r3
	r3 = Mem0[r3:word64]
	branch r3 != 0x0000000000000000 l000000000003867C_ds_t
	// succ:  l000000000003867C_ds_f l000000000003867C_ds_t
l000000000003867C_ds_f:
	goto l000000000003868C
	// succ:  l000000000003868C
l000000000003867C_ds_t:
	goto l0000000000038614
	// succ:  l0000000000038614
l000000000003868C:
	Mem0[sp + 0x0000000000000020:word64] = r4
	return
	// succ:  runtime.bestFit_exit
runtime.bestFit_exit:


// runtime.(*mheap).grow
// Return size: 0
void runtime.(*mheap).grow()
runtime.(*mheap).grow_entry:
	// succ:  l0000000000038698
l0000000000038698:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000038698_ds_t
	// succ:  l0000000000038698_ds_f l0000000000038698_ds_t
l0000000000038698_ds_f:
	goto l00000000000386A8
	// succ:  l00000000000386A8
l0000000000038698_ds_t:
	goto l00000000000386BC
	// succ:  l00000000000386BC
l00000000000386A8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000038698
	// succ:  l0000000000038698
l00000000000386BC:
	sp = sp + -88
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000068:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.(*mheap).grow_exit:


// runtime.(*mheap).freeSpan
// Return size: 0
void runtime.(*mheap).freeSpan()
runtime.(*mheap).freeSpan_entry:
	// succ:  l0000000000038A90
l0000000000038A90:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000038A90_ds_t
	// succ:  l0000000000038A90_ds_f l0000000000038A90_ds_t
l0000000000038A90_ds_f:
	goto l0000000000038AA0
	// succ:  l0000000000038AA0
l0000000000038A90_ds_t:
	goto l0000000000038AB4
	// succ:  l0000000000038AB4
l0000000000038AA0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000038A90
	// succ:  l0000000000038A90
l0000000000038AB4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	r2 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[r3 + 0x0000000000000008:word64] = r2
	r2 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[r3 + 0x0000000000000010:word64] = r2
	r2 = (word64) Mem0[sp + 0x0000000000000048:int32]
	Mem0[r3 + 0x0000000000000018:word32] = (word32) r2
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mheap).freeSpan_exit
runtime.(*mheap).freeSpan_exit:


// runtime.(*mheap).freeStack
// Return size: 0
void runtime.(*mheap).freeStack()
runtime.(*mheap).freeStack_entry:
	// succ:  l0000000000038B08
l0000000000038B08:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000038B08_ds_t
	// succ:  l0000000000038B08_ds_f l0000000000038B08_ds_t
l0000000000038B08_ds_f:
	goto l0000000000038B18
	// succ:  l0000000000038B18
l0000000000038B08_ds_t:
	goto l0000000000038B2C
	// succ:  l0000000000038B2C
l0000000000038B18:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000038B08
	// succ:  l0000000000038B08
l0000000000038B2C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r3 = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	r2 = r30
	branch r1 == r30 l0000000000038B2C_ds_t
	// succ:  l0000000000038B2C_ds_f l0000000000038B2C_ds_t
l0000000000038B2C_ds_f:
	goto l0000000000038B4C
	// succ:  l0000000000038B4C
l0000000000038B2C_ds_t:
	goto l0000000000038B6C
	// succ:  l0000000000038B6C
l0000000000038B4C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000038B6C:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	Mem0[r1 + 0x0000000000000065:byte] = (byte) r2
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000038B6C_ds_t
	// succ:  l0000000000038B6C_ds_f l0000000000038B6C_ds_t
l0000000000038B6C_ds_f:
	goto l0000000000038B90
	// succ:  l0000000000038B90
l0000000000038B6C_ds_t:
	goto l0000000000038B94
	// succ:  l0000000000038B94
l0000000000038B90:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000038B94
l0000000000038B94:
	call runtime.lock (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 - 0x0000000000005640:word64]
	r1 = Mem0[r4 + 0x0000000000000020:word64]
runtime.(*mheap).freeStack_exit:


// runtime.(*mheap).freeSpanLocked
// Return size: 0
void runtime.(*mheap).freeSpanLocked()
runtime.(*mheap).freeSpanLocked_entry:
	// succ:  l0000000000038C28
l0000000000038C28:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000038C28_ds_t
	// succ:  l0000000000038C28_ds_f l0000000000038C28_ds_t
l0000000000038C28_ds_f:
	goto l0000000000038C38
	// succ:  l0000000000038C38
l0000000000038C28_ds_t:
	goto l0000000000038C4C
	// succ:  l0000000000038C4C
l0000000000038C38:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000038C28
	// succ:  l0000000000038C28
l0000000000038C4C:
	sp = sp + -112
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000080:word64]
	r2 = (word64) Mem0[r5 + 0x0000000000000064:byte]
	r3 = r2 + 0x00000000000000FF
	r1 = r3 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000038C4C_ds_t
	// succ:  l0000000000038C4C_ds_f l0000000000038C4C_ds_t
l0000000000038C4C_ds_f:
	goto l0000000000038C78
	// succ:  l0000000000038C78
l0000000000038C4C_ds_t:
	goto l00000000000395F0
	// succ:  l00000000000395F0
l0000000000038C78:
	r1 = (word64) Mem0[r5 + 0x0000000000000060:uint16]
	r2 = 0x0000000000000000
	r1 = r1 + 0x000000000000FFFF
	r2 = r2 + 0x000000000000FFFF
	branch r1 != r2 l0000000000038C78_ds_t
	// succ:  l0000000000038C78_ds_f l0000000000038C78_ds_t
l0000000000038C78_ds_f:
	goto l0000000000038C90
	// succ:  l0000000000038C90
l0000000000038C78_ds_t:
	goto l0000000000039474
	// succ:  l0000000000039474
l0000000000038C90:
	r1 = (word64) Mem0[r5 + 0x0000000000000058:uint32]
	r2 = Mem0[sp + 0x0000000000000078:word64]
	branch r2 != 0x0000000000000000 l0000000000038C90_ds_t
	// succ:  l0000000000038C90_ds_f l0000000000038C90_ds_t
l0000000000038C90_ds_f:
	goto l0000000000038CA0
	// succ:  l0000000000038CA0
l0000000000038C90_ds_t:
	goto l0000000000038CA4
	// succ:  l0000000000038CA4
l0000000000038CA0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000038CA4
l0000000000038CA4:
	r2 = (word64) Mem0[r2 + 0x000000000000103C:uint32]
l0000000000038CF0:
	r1 = (word64) Mem0[sp + 0x0000000000000088:byte]
	branch r1 == 0x0000000000000000 l0000000000038CF0_ds_t
	// succ:  l0000000000038CF0_ds_f l0000000000038CF0_ds_t
l0000000000038CF0_ds_f:
	goto l0000000000038CFC
	// succ:  l0000000000038CFC
l0000000000038CF0_ds_t:
	goto l0000000000038D20
	// succ:  l0000000000038D20
l0000000000038CFC:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 - 0x0000000000005658:word64]
	r1 = Mem0[r5 + 0x0000000000000020:word64]
l0000000000038D20:
	r1 = (word64) Mem0[sp + 0x0000000000000089:byte]
	branch r1 == 0x0000000000000000 l0000000000038D20_ds_t
	// succ:  l0000000000038D20_ds_f l0000000000038D20_ds_t
l0000000000038D20_ds_f:
	goto l0000000000038D2C
	// succ:  l0000000000038D2C
l0000000000038D20_ds_t:
	goto l0000000000038D50
	// succ:  l0000000000038D50
l0000000000038D2C:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 - 0x0000000000005660:word64]
	r1 = Mem0[r5 + 0x0000000000000020:word64]
l0000000000038D50:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	Mem0[r5 + 0x0000000000000064:byte] = (byte) r2
	r1 = 0x0000000000000000
	r1 = Mem0[r5 + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000038D50_ds_t
	// succ:  l0000000000038D50_ds_f l0000000000038D50_ds_t
l0000000000038D50_ds_f:
	goto l0000000000038D6C
	// succ:  l0000000000038D6C
l0000000000038D50_ds_t:
	goto l0000000000039464
	// succ:  l0000000000039464
l0000000000038D6C:
	r2 = 0x0000000000000000
	goto l0000000000038D70
	// succ:  l0000000000038D70
l0000000000038D6C_ds_f:
	goto l0000000000038D84
	// succ:  l0000000000038D84
l0000000000038D6C_ds_t:
	goto l0000000000038DF0
	// succ:  l0000000000038DF0
l0000000000038D70:
	r1 = r2 + 0x00000000000000FF
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000038D6C_ds_t
	goto l0000000000038D6C_ds_f
	// succ:  l0000000000038D6C_ds_f l0000000000038D6C_ds_t
l0000000000038D84:
	r4 = Mem0[sp + 0x0000000000000078:word64]
	r3 = Mem0[r5 + 0x0000000000000020:word64]
l0000000000038DF0:
	r2 = Mem0[sp + 0x0000000000000090:word64]
	Mem0[r5 + 0x0000000000000070:word64] = r2
	r1 = Mem0[sp + 0x0000000000000090:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000038DF0_ds_t
	// succ:  l0000000000038DF0_ds_f l0000000000038DF0_ds_t
l0000000000038DF0_ds_f:
	goto l0000000000038E08
	// succ:  l0000000000038E08
l0000000000038DF0_ds_t:
	goto l0000000000038E1C
	// succ:  l0000000000038E1C
l0000000000038E08:
	call runtime.nanotime (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000080:word64]
	r3 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[r5 + 0x0000000000000070:word64] = r3
	// succ:  l0000000000038E1C
l0000000000038E1C:
	Mem0[r5 + 0x0000000000000078:word64] = 0x0000000000000000
	r7 = Mem0[r5 + 0x0000000000000018:word64]
	r2 = Mem0[sp + 0x0000000000000078:word64]
	branch r2 != 0x0000000000000000 l0000000000038E1C_ds_t
	// succ:  l0000000000038E1C_ds_f l0000000000038E1C_ds_t
l0000000000038E1C_ds_f:
	goto l0000000000038E30
	// succ:  l0000000000038E30
l0000000000038E1C_ds_t:
	goto l0000000000038E34
	// succ:  l0000000000038E34
l0000000000038E30:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000038E34
l0000000000038E34:
	r2 = Mem0[r2 + 0x00000000000012B0:word64]
l0000000000039464:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l0000000000038D70
	// succ:  l0000000000038D70
l0000000000039474:
	r3 = Mem0[r5 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000038:word64] = r3
	r2 = (word64) Mem0[r5 + 0x0000000000000060:uint16]
	Mem0[sp + 0x0000000000000018:word16] = (word16) r2
	r2 = (word64) Mem0[r5 + 0x0000000000000058:uint32]
	Mem0[sp + 0x0000000000000028:word32] = (word32) r2
	r1 = Mem0[sp + 0x0000000000000078:word64]
	branch r1 != 0x0000000000000000 l0000000000039474_ds_t
	// succ:  l0000000000039474_ds_f l0000000000039474_ds_t
l0000000000039474_ds_f:
	goto l0000000000039498
	// succ:  l0000000000039498
l0000000000039474_ds_t:
	goto l000000000003949C
	// succ:  l000000000003949C
l0000000000039498:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003949C
l000000000003949C:
	r2 = (word64) Mem0[r1 + 0x000000000000103C:uint32]
	Mem0[sp + 0x0000000000000020:word32] = (word32) r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000395F0:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l00000000000395F0_ds_t
	// succ:  l00000000000395F0_ds_f l00000000000395F0_ds_t
l00000000000395F0_ds_f:
	goto l000000000003960C
	// succ:  l000000000003960C
l00000000000395F0_ds_t:
	goto l0000000000039650
	// succ:  l0000000000039650
l000000000003960C:
	r1 = (word64) Mem0[r5 + 0x0000000000000060:uint16]
	r2 = 0x0000000000000000
	r1 = r1 + 0x000000000000FFFF
	r2 = r2 + 0x000000000000FFFF
	branch r1 == r2 l000000000003960C_ds_t
	// succ:  l000000000003960C_ds_f l000000000003960C_ds_t
l000000000003960C_ds_f:
	goto l0000000000039624
	// succ:  l0000000000039624
l000000000003960C_ds_t:
	goto l0000000000038CF0
	// succ:  l0000000000038CF0
l0000000000039624:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000039650:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.(*mheap).freeSpanLocked_exit:


// runtime.scavengelist
// Return size: 0
void runtime.scavengelist()
runtime.scavengelist_entry:
	// succ:  l0000000000039680
l0000000000039680:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000039680_ds_t
	// succ:  l0000000000039680_ds_f l0000000000039680_ds_t
l0000000000039680_ds_f:
	goto l0000000000039690
	// succ:  l0000000000039690
l0000000000039680_ds_t:
	goto l00000000000396A4
	// succ:  l00000000000396A4
l0000000000039690:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000039680
	// succ:  l0000000000039680
l00000000000396A4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000030:word64]
	r1 = 0x0000000000000000
	r1 = Mem0[r3:word64]
	branch r1 == 0x0000000000000000 l00000000000396A4_ds_t
	// succ:  l00000000000396A4_ds_f l00000000000396A4_ds_t
l00000000000396A4_ds_f:
	goto l00000000000396C0
	// succ:  l00000000000396C0
l00000000000396A4_ds_t:
	goto l0000000000039838
	// succ:  l0000000000039838
l00000000000396C0:
	r2 = 0x0000000000000000
	goto l00000000000396C4
	// succ:  l00000000000396C4
l00000000000396C0_ds_f:
	goto l00000000000396D8
	// succ:  l00000000000396D8
l00000000000396C0_ds_t:
	goto l00000000000396EC
	// succ:  l00000000000396EC
l00000000000396C4:
	r1 = r2 + 0x00000000000000FF
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l00000000000396C0_ds_t
	goto l00000000000396C0_ds_f
	// succ:  l00000000000396C0_ds_f l00000000000396C0_ds_t
l00000000000396D8:
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.scavengelist_exit
l00000000000396EC:
	r8 = 0x0000000000000000
	r3 = Mem0[r3:word64]
	branch r3 == 0x0000000000000000 l00000000000396EC_ds_t
	// succ:  l00000000000396EC_ds_f l00000000000396EC_ds_t
l00000000000396EC_ds_f:
	goto l00000000000396FC
	// succ:  l00000000000396FC
l00000000000396EC_ds_t:
	goto l0000000000039778
	// succ:  l0000000000039778
l00000000000396FC:
	r1 = Mem0[r3 + 0x0000000000000070:word64]
	r2 = Mem0[sp + 0x0000000000000038:word64]
l0000000000039778:
	Mem0[sp + 0x0000000000000048:word64] = r8
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.scavengelist_exit
l0000000000039838:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l00000000000396C4
	// succ:  l00000000000396C4
runtime.scavengelist_exit:


// runtime.(*mheap).scavenge
// Return size: 0
void runtime.(*mheap).scavenge()
runtime.(*mheap).scavenge_entry:
	// succ:  l0000000000039848
l0000000000039848:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000039848_ds_t
	// succ:  l0000000000039848_ds_f l0000000000039848_ds_t
l0000000000039848_ds_f:
	goto l0000000000039858
	// succ:  l0000000000039858
l0000000000039848_ds_t:
	goto l000000000003986C
	// succ:  l000000000003986C
l0000000000039858:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000039848
	// succ:  l0000000000039848
l000000000003986C:
	sp = sp + -104
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000070:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000003986C_ds_t
	// succ:  l000000000003986C_ds_f l000000000003986C_ds_t
l000000000003986C_ds_f:
	goto l0000000000039888
	// succ:  l0000000000039888
l000000000003986C_ds_t:
	goto l000000000003988C
	// succ:  l000000000003988C
l0000000000039888:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003988C
l000000000003988C:
	call runtime.lock (retsize: 0;)
	r3 = 0x0000000000000000
	r4 = 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r4 < r2)
	branch r23 == 0x0000000000000000 l000000000003988C_ds_t
	// succ:  l000000000003988C_ds_f l000000000003988C_ds_t
l000000000003988C_ds_f:
	goto l00000000000398AC
	// succ:  l00000000000398AC
l000000000003988C_ds_t:
	goto l0000000000039938
	// succ:  l0000000000039938
l00000000000398AC:
	Mem0[sp + 0x0000000000000060:word64] = r3
	r1 = Mem0[sp + 0x0000000000000070:word64]
	branch r1 != 0x0000000000000000 l00000000000398AC_ds_t
	// succ:  l00000000000398AC_ds_f l00000000000398AC_ds_t
l00000000000398AC_ds_f:
	goto l00000000000398BC
	// succ:  l00000000000398BC
l00000000000398AC_ds_t:
	goto l00000000000398C0
	// succ:  l00000000000398C0
l00000000000398BC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000398C0
l00000000000398C0:
	lo = r2 / r1
	hi = r2 % r1
	Mem0[sp + 0x0000000000000030:word64] = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r1 = r4
	r23 = (word64) (r4 <u r3)
	branch r23 != 0x0000000000000000 l00000000000398C0_ds_t
	// succ:  l00000000000398C0_ds_f l00000000000398C0_ds_t
l00000000000398C0_ds_f:
	goto l00000000000398DC
	// succ:  l00000000000398DC
l00000000000398C0_ds_t:
	goto l00000000000398E8
	// succ:  l00000000000398E8
l00000000000398DC:
	call runtime.panicindex (retsize: 0;)
l00000000000398E8:
l0000000000039938:
	Mem0[sp + 0x0000000000000060:word64] = r3
	r1 = Mem0[sp + 0x0000000000000070:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000039938_ds_t
	// succ:  l0000000000039938_ds_f l0000000000039938_ds_t
l0000000000039938_ds_f:
	goto l0000000000039950
	// succ:  l0000000000039950
l0000000000039938_ds_t:
	goto l0000000000039954
	// succ:  l0000000000039954
l0000000000039950:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000039954
l0000000000039954:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000080:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000088:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.scavengelist (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r2 = r3
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000028:word64] = r1
	r1 = Mem0[sp + 0x0000000000000070:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000039954_ds_t
	// succ:  l0000000000039954_ds_f l0000000000039954_ds_t
l0000000000039954_ds_f:
	goto l00000000000399A4
	// succ:  l00000000000399A4
l0000000000039954_ds_t:
	goto l00000000000399A8
	// succ:  l00000000000399A8
l00000000000399A4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000399A8
l00000000000399A8:
	call runtime.unlock (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000028:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x000000000000679C:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l00000000000399A8_ds_t
	// succ:  l00000000000399A8_ds_f l00000000000399A8_ds_t
l00000000000399A8_ds_f:
	goto l00000000000399D8
	// succ:  l00000000000399D8
l00000000000399A8_ds_t:
	goto l0000000000039C44
	// succ:  l0000000000039C44
l00000000000399D8:
	r2 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r3)
	branch r23 == 0x0000000000000000 l00000000000399D8_ds_t
	// succ:  l00000000000399D8_ds_f l00000000000399D8_ds_t
l00000000000399D8_ds_f:
	goto l00000000000399E8
	// succ:  l00000000000399E8
l00000000000399D8_ds_t:
	goto l0000000000039A80
	// succ:  l0000000000039A80
l00000000000399E8:
l0000000000039A80:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000005658:word64]
l0000000000039C44:
	r4 = Mem0[sp:word64]
	sp = sp + 104
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mheap).scavenge_exit
runtime.(*mheap).scavenge_exit:


// runtime.(*mSpanList).remove
// Return size: 0
void runtime.(*mSpanList).remove()
runtime.(*mSpanList).remove_entry:
	// succ:  l0000000000039C58
l0000000000039C58:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000039C58_ds_t
	// succ:  l0000000000039C58_ds_f l0000000000039C58_ds_t
l0000000000039C58_ds_f:
	goto l0000000000039C68
	// succ:  l0000000000039C68
l0000000000039C58_ds_t:
	goto l0000000000039C7C
	// succ:  l0000000000039C7C
l0000000000039C68:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000039C58
	// succ:  l0000000000039C58
l0000000000039C7C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r1 = Mem0[r5 + 0x0000000000000008:word64]
	branch r1 == 0x0000000000000000 l0000000000039C7C_ds_t
	// succ:  l0000000000039C7C_ds_f l0000000000039C7C_ds_t
l0000000000039C7C_ds_f:
	goto l0000000000039C94
	// succ:  l0000000000039C94
l0000000000039C7C_ds_t:
	goto l0000000000039DD8
	// succ:  l0000000000039DD8
l0000000000039C94:
	r1 = Mem0[r5 + 0x0000000000000010:word64]
	r2 = Mem0[sp + 0x0000000000000030:word64]
	branch r1 != r2 l0000000000039C94_ds_t
	// succ:  l0000000000039C94_ds_f l0000000000039C94_ds_t
l0000000000039C94_ds_f:
	goto l0000000000039CA4
	// succ:  l0000000000039CA4
l0000000000039C94_ds_t:
	goto l0000000000039DD8
	// succ:  l0000000000039DD8
l0000000000039CA4:
	r1 = Mem0[r5:word64]
	branch r1 == 0x0000000000000000 l0000000000039CA4_ds_t
	// succ:  l0000000000039CA4_ds_f l0000000000039CA4_ds_t
l0000000000039CA4_ds_f:
	goto l0000000000039CB0
	// succ:  l0000000000039CB0
l0000000000039CA4_ds_t:
	goto l0000000000039D80
	// succ:  l0000000000039D80
l0000000000039CB0:
	r2 = Mem0[r5:word64]
	branch r2 != 0x0000000000000000 l0000000000039CB0_ds_t
	// succ:  l0000000000039CB0_ds_f l0000000000039CB0_ds_t
l0000000000039CB0_ds_f:
	goto l0000000000039CBC
	// succ:  l0000000000039CBC
l0000000000039CB0_ds_t:
	goto l0000000000039CC0
	// succ:  l0000000000039CC0
l0000000000039CBC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000039CC0
l0000000000039CC0:
	r3 = Mem0[r5 + 0x0000000000000008:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r1 != r4 l0000000000039CC0_ds_t
	// succ:  l0000000000039CC0_ds_f l0000000000039CC0_ds_t
l0000000000039CC0_ds_f:
	goto l0000000000039CDC
	// succ:  l0000000000039CDC
l0000000000039CC0_ds_t:
	goto l0000000000039D60
	// succ:  l0000000000039D60
l0000000000039CDC:
	Mem0[r2 + 0x0000000000000008:word64] = r3
	goto l0000000000039CE0
	// succ:  l0000000000039CE0
l0000000000039CDC_ds_f:
	goto l0000000000039CEC
	// succ:  l0000000000039CEC
l0000000000039CDC_ds_t:
	goto l0000000000039CF0
	// succ:  l0000000000039CF0
l0000000000039CE0:
	r2 = Mem0[r5 + 0x0000000000000008:word64]
	branch r2 != 0x0000000000000000 l0000000000039CDC_ds_t
	goto l0000000000039CDC_ds_f
	// succ:  l0000000000039CDC_ds_f l0000000000039CDC_ds_t
l0000000000039CEC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000039CF0
l0000000000039CF0:
	r3 = Mem0[r5:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r1 != r4 l0000000000039CF0_ds_t
	// succ:  l0000000000039CF0_ds_f l0000000000039CF0_ds_t
l0000000000039CF0_ds_f:
	goto l0000000000039D0C
	// succ:  l0000000000039D0C
l0000000000039CF0_ds_t:
	goto l0000000000039D2C
	// succ:  l0000000000039D2C
l0000000000039D0C:
	Mem0[r2:word64] = r3
	Mem0[r5:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000010:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mSpanList).remove_exit
l0000000000039D2C:
	r1 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[r5:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000010:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mSpanList).remove_exit
l0000000000039D60:
	lo = r1 / r2
	hi = r1 % r2
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000038:word64]
	goto l0000000000039CE0
	// succ:  l0000000000039CE0
l0000000000039D80:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	branch r1 != 0x0000000000000000 l0000000000039D80_ds_t
	// succ:  l0000000000039D80_ds_f l0000000000039D80_ds_t
l0000000000039D80_ds_f:
	goto l0000000000039D8C
	// succ:  l0000000000039D8C
l0000000000039D80_ds_t:
	goto l0000000000039D90
	// succ:  l0000000000039D90
l0000000000039D8C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000039D90
l0000000000039D90:
	r3 = Mem0[r5 + 0x0000000000000008:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r2 != r4 l0000000000039D90_ds_t
	// succ:  l0000000000039D90_ds_f l0000000000039D90_ds_t
l0000000000039D90_ds_f:
	goto l0000000000039DAC
	// succ:  l0000000000039DAC
l0000000000039D90_ds_t:
	goto l0000000000039DB8
	// succ:  l0000000000039DB8
l0000000000039DAC:
	Mem0[r1 + 0x0000000000000008:word64] = r3
	goto l0000000000039CE0
	// succ:  l0000000000039CE0
l0000000000039DB8:
	lo = r2 / r1
	hi = r2 % r1
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000038:word64]
	goto l0000000000039CE0
	// succ:  l0000000000039CE0
l0000000000039DD8:
	r2 = Mem0[r5 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	r1 = r5
	r2 = Mem0[r5 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.(*mSpanList).remove_exit:


// runtime.(*mSpanList).insert
// Return size: 0
void runtime.(*mSpanList).insert()
runtime.(*mSpanList).insert_entry:
	// succ:  l0000000000039EB0
l0000000000039EB0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000039EB0_ds_t
	// succ:  l0000000000039EB0_ds_f l0000000000039EB0_ds_t
l0000000000039EB0_ds_f:
	goto l0000000000039EC0
	// succ:  l0000000000039EC0
l0000000000039EB0_ds_t:
	goto l0000000000039ED4
	// succ:  l0000000000039ED4
l0000000000039EC0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000039EB0
	// succ:  l0000000000039EB0
l0000000000039ED4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000040:word64]
	r1 = Mem0[r5:word64]
	branch r1 != 0x0000000000000000 l0000000000039ED4_ds_t
	// succ:  l0000000000039ED4_ds_f l0000000000039ED4_ds_t
l0000000000039ED4_ds_f:
	goto l0000000000039EEC
	// succ:  l0000000000039EEC
l0000000000039ED4_ds_t:
	goto l000000000003A13C
	// succ:  l000000000003A13C
l0000000000039EEC:
	r1 = Mem0[r5 + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000039EEC_ds_t
	// succ:  l0000000000039EEC_ds_f l0000000000039EEC_ds_t
l0000000000039EEC_ds_f:
	goto l0000000000039EF8
	// succ:  l0000000000039EF8
l0000000000039EEC_ds_t:
	goto l000000000003A13C
	// succ:  l000000000003A13C
l0000000000039EF8:
	r1 = Mem0[r5 + 0x0000000000000010:word64]
	branch r1 != 0x0000000000000000 l0000000000039EF8_ds_t
	// succ:  l0000000000039EF8_ds_f l0000000000039EF8_ds_t
l0000000000039EF8_ds_f:
	goto l0000000000039F04
	// succ:  l0000000000039F04
l0000000000039EF8_ds_t:
	goto l000000000003A13C
	// succ:  l000000000003A13C
l0000000000039F04:
	r1 = r5
	branch r5 != 0x0000000000000000 l0000000000039F04_ds_t
	// succ:  l0000000000039F04_ds_f l0000000000039F04_ds_t
l0000000000039F04_ds_f:
	goto l0000000000039F10
	// succ:  l0000000000039F10
l0000000000039F04_ds_t:
	goto l0000000000039F14
	// succ:  l0000000000039F14
l0000000000039F10:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000039F14
l0000000000039F14:
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r3 = Mem0[r2:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r2 != r4 l0000000000039F14_ds_t
	// succ:  l0000000000039F14_ds_f l0000000000039F14_ds_t
l0000000000039F14_ds_f:
	goto l0000000000039F34
	// succ:  l0000000000039F34
l0000000000039F14_ds_t:
	goto l000000000003A11C
	// succ:  l000000000003A11C
l0000000000039F34:
	Mem0[r1:word64] = r3
	goto l0000000000039F38
	// succ:  l0000000000039F38
l0000000000039F34_ds_f:
	goto l0000000000039F48
	// succ:  l0000000000039F48
l0000000000039F34_ds_t:
	goto l000000000003A0B8
	// succ:  l000000000003A0B8
l0000000000039F38:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r1 = Mem0[r1:word64]
	branch r1 == 0x0000000000000000 l0000000000039F34_ds_t
	goto l0000000000039F34_ds_f
	// succ:  l0000000000039F34_ds_f l0000000000039F34_ds_t
l0000000000039F48:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[r1:word64]
	branch r2 != 0x0000000000000000 l0000000000039F48_ds_t
	// succ:  l0000000000039F48_ds_f l0000000000039F48_ds_t
l0000000000039F48_ds_f:
	goto l0000000000039F58
	// succ:  l0000000000039F58
l0000000000039F48_ds_t:
	goto l0000000000039F5C
	// succ:  l0000000000039F5C
l0000000000039F58:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000039F5C
l0000000000039F5C:
	r1 = r5
	branch r5 != 0x0000000000000000 l0000000000039F5C_ds_t
	// succ:  l0000000000039F5C_ds_f l0000000000039F5C_ds_t
l0000000000039F5C_ds_f:
	goto l0000000000039F68
	// succ:  l0000000000039F68
l0000000000039F5C_ds_t:
	goto l0000000000039F6C
	// succ:  l0000000000039F6C
l0000000000039F68:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000039F6C
l0000000000039F6C:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000039F6C_ds_t
	// succ:  l0000000000039F6C_ds_f l0000000000039F6C_ds_t
l0000000000039F6C_ds_f:
	goto l0000000000039F84
	// succ:  l0000000000039F84
l0000000000039F6C_ds_t:
	goto l000000000003A098
	// succ:  l000000000003A098
l0000000000039F84:
	Mem0[r2 + 0x0000000000000008:word64] = r1
	goto l0000000000039F88
	// succ:  l0000000000039F88
l0000000000039F84_ds_f:
	goto l0000000000039F94
	// succ:  l0000000000039F94
l0000000000039F84_ds_t:
	goto l0000000000039F98
	// succ:  l0000000000039F98
l0000000000039F88:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	branch r1 != 0x0000000000000000 l0000000000039F84_ds_t
	goto l0000000000039F84_ds_f
	// succ:  l0000000000039F84_ds_f l0000000000039F84_ds_t
l0000000000039F94:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000039F98
l0000000000039F98:
	r2 = r5
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000039F98_ds_t
	// succ:  l0000000000039F98_ds_f l0000000000039F98_ds_t
l0000000000039F98_ds_f:
	goto l0000000000039FB4
	// succ:  l0000000000039FB4
l0000000000039F98_ds_t:
	goto l000000000003A078
	// succ:  l000000000003A078
l0000000000039FB4:
	Mem0[r1:word64] = r2
	goto l0000000000039FB8
	// succ:  l0000000000039FB8
l0000000000039FB4_ds_f:
	goto l0000000000039FC4
	// succ:  l0000000000039FC4
l0000000000039FB4_ds_t:
	goto l0000000000039FC8
	// succ:  l0000000000039FC8
l0000000000039FB8:
	r1 = r5
	branch r5 != 0x0000000000000000 l0000000000039FB4_ds_t
	goto l0000000000039FB4_ds_f
	// succ:  l0000000000039FB4_ds_f l0000000000039FB4_ds_t
l0000000000039FC4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000039FC8
l0000000000039FC8:
	r2 = Mem0[sp + 0x0000000000000038:word64]
	branch r2 != 0x0000000000000000 l0000000000039FC8_ds_t
	// succ:  l0000000000039FC8_ds_f l0000000000039FC8_ds_t
l0000000000039FC8_ds_f:
	goto l0000000000039FD4
	// succ:  l0000000000039FD4
l0000000000039FC8_ds_t:
	goto l0000000000039FD8
	// succ:  l0000000000039FD8
l0000000000039FD4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000039FD8
l0000000000039FD8:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000039FD8_ds_t
	// succ:  l0000000000039FD8_ds_f l0000000000039FD8_ds_t
l0000000000039FD8_ds_f:
	goto l0000000000039FF0
	// succ:  l0000000000039FF0
l0000000000039FD8_ds_t:
	goto l000000000003A058
	// succ:  l000000000003A058
l0000000000039FF0:
	Mem0[r1 + 0x0000000000000008:word64] = r2
	goto l0000000000039FF4
	// succ:  l0000000000039FF4
l0000000000039FF0_ds_f:
	goto l000000000003A000
	// succ:  l000000000003A000
l0000000000039FF0_ds_t:
	goto l000000000003A004
	// succ:  l000000000003A004
l0000000000039FF4:
	r1 = r5
	branch r5 != 0x0000000000000000 l0000000000039FF0_ds_t
	goto l0000000000039FF0_ds_f
	// succ:  l0000000000039FF0_ds_f l0000000000039FF0_ds_t
l000000000003A000:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003A004
l000000000003A004:
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000003A004_ds_t
	// succ:  l000000000003A004_ds_f l000000000003A004_ds_t
l000000000003A004_ds_f:
	goto l000000000003A020
	// succ:  l000000000003A020
l000000000003A004_ds_t:
	goto l000000000003A034
	// succ:  l000000000003A034
l000000000003A020:
	Mem0[r1 + 0x0000000000000010:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mSpanList).insert_exit
l000000000003A034:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mSpanList).insert_exit
l000000000003A058:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000040:word64]
	goto l0000000000039FF4
	// succ:  l0000000000039FF4
l000000000003A078:
	r3 = r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r5
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000040:word64]
	goto l0000000000039FB8
	// succ:  l0000000000039FB8
l000000000003A098:
	lo = r3 / r2
	hi = r3 % r2
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r5
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000040:word64]
	goto l0000000000039F88
	// succ:  l0000000000039F88
l000000000003A0B8:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	branch r1 != 0x0000000000000000 l000000000003A0B8_ds_t
	// succ:  l000000000003A0B8_ds_f l000000000003A0B8_ds_t
l000000000003A0B8_ds_f:
	goto l000000000003A0C4
	// succ:  l000000000003A0C4
l000000000003A0B8_ds_t:
	goto l000000000003A0C8
	// succ:  l000000000003A0C8
l000000000003A0C4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003A0C8
l000000000003A0C8:
	r2 = r5
	branch r5 != 0x0000000000000000 l000000000003A0C8_ds_t
	// succ:  l000000000003A0C8_ds_f l000000000003A0C8_ds_t
l000000000003A0C8_ds_f:
	goto l000000000003A0D4
	// succ:  l000000000003A0D4
l000000000003A0C8_ds_t:
	goto l000000000003A0D8
	// succ:  l000000000003A0D8
l000000000003A0D4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003A0D8
l000000000003A0D8:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000003A0D8_ds_t
	// succ:  l000000000003A0D8_ds_f l000000000003A0D8_ds_t
l000000000003A0D8_ds_f:
	goto l000000000003A0F0
	// succ:  l000000000003A0F0
l000000000003A0D8_ds_t:
	goto l000000000003A0FC
	// succ:  l000000000003A0FC
l000000000003A0F0:
	Mem0[r1 + 0x0000000000000008:word64] = r2
	goto l0000000000039F88
	// succ:  l0000000000039F88
l000000000003A0FC:
	lo = r3 / r1
	hi = r3 % r1
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r5
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000040:word64]
	goto l0000000000039F88
	// succ:  l0000000000039F88
l000000000003A11C:
	r2 = r5
	Mem0[sp + 0x0000000000000008:word64] = r5
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000040:word64]
	goto l0000000000039F38
	// succ:  l0000000000039F38
l000000000003A13C:
	r2 = Mem0[r5:word64]
	Mem0[sp + 0x0000000000000028:word64] = r2
	r2 = Mem0[r5 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	r1 = r5
	r2 = Mem0[r5 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.(*mSpanList).insert_exit:


// runtime.(*mSpanList).insertBack
// Return size: 0
void runtime.(*mSpanList).insertBack()
runtime.(*mSpanList).insertBack_entry:
	// succ:  l000000000003A220
l000000000003A220:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003A220_ds_t
	// succ:  l000000000003A220_ds_f l000000000003A220_ds_t
l000000000003A220_ds_f:
	goto l000000000003A230
	// succ:  l000000000003A230
l000000000003A220_ds_t:
	goto l000000000003A244
	// succ:  l000000000003A244
l000000000003A230:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003A220
	// succ:  l000000000003A220
l000000000003A244:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000040:word64]
	r1 = Mem0[r5:word64]
	branch r1 != 0x0000000000000000 l000000000003A244_ds_t
	// succ:  l000000000003A244_ds_f l000000000003A244_ds_t
l000000000003A244_ds_f:
	goto l000000000003A25C
	// succ:  l000000000003A25C
l000000000003A244_ds_t:
	goto l000000000003A3D4
	// succ:  l000000000003A3D4
l000000000003A25C:
	r1 = Mem0[r5 + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000003A25C_ds_t
	// succ:  l000000000003A25C_ds_f l000000000003A25C_ds_t
l000000000003A25C_ds_f:
	goto l000000000003A268
	// succ:  l000000000003A268
l000000000003A25C_ds_t:
	goto l000000000003A3D4
	// succ:  l000000000003A3D4
l000000000003A268:
	r1 = Mem0[r5 + 0x0000000000000010:word64]
	branch r1 != 0x0000000000000000 l000000000003A268_ds_t
	// succ:  l000000000003A268_ds_f l000000000003A268_ds_t
l000000000003A268_ds_f:
	goto l000000000003A274
	// succ:  l000000000003A274
l000000000003A268_ds_t:
	goto l000000000003A3D4
	// succ:  l000000000003A3D4
l000000000003A274:
	Mem0[r5:word64] = 0x0000000000000000
	r1 = r5
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r2 != r4 l000000000003A274_ds_t
	// succ:  l000000000003A274_ds_f l000000000003A274_ds_t
l000000000003A274_ds_f:
	goto l000000000003A29C
	// succ:  l000000000003A29C
l000000000003A274_ds_t:
	goto l000000000003A3B4
	// succ:  l000000000003A3B4
l000000000003A29C:
	Mem0[r1 + 0x0000000000000008:word64] = r3
	goto l000000000003A2A0
	// succ:  l000000000003A2A0
l000000000003A29C_ds_f:
	goto l000000000003A2B0
	// succ:  l000000000003A2B0
l000000000003A29C_ds_t:
	goto l000000000003A2B4
	// succ:  l000000000003A2B4
l000000000003A2A0:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[r1 + 0x0000000000000008:word64]
	branch r2 != 0x0000000000000000 l000000000003A29C_ds_t
	goto l000000000003A29C_ds_f
	// succ:  l000000000003A29C_ds_f l000000000003A29C_ds_t
l000000000003A2B0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003A2B4
l000000000003A2B4:
	r1 = r5
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000003A2B4_ds_t
	// succ:  l000000000003A2B4_ds_f l000000000003A2B4_ds_t
l000000000003A2B4_ds_f:
	goto l000000000003A2D0
	// succ:  l000000000003A2D0
l000000000003A2B4_ds_t:
	goto l000000000003A394
	// succ:  l000000000003A394
l000000000003A2D0:
	Mem0[r2:word64] = r1
	goto l000000000003A2D4
	// succ:  l000000000003A2D4
l000000000003A2D0_ds_f:
	goto l000000000003A2E0
	// succ:  l000000000003A2E0
l000000000003A2D0_ds_t:
	goto l000000000003A2E4
	// succ:  l000000000003A2E4
l000000000003A2D4:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	branch r1 != 0x0000000000000000 l000000000003A2D0_ds_t
	goto l000000000003A2D0_ds_f
	// succ:  l000000000003A2D0_ds_f l000000000003A2D0_ds_t
l000000000003A2E0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003A2E4
l000000000003A2E4:
	r2 = r5
	branch r5 != 0x0000000000000000 l000000000003A2E4_ds_t
	// succ:  l000000000003A2E4_ds_f l000000000003A2E4_ds_t
l000000000003A2E4_ds_f:
	goto l000000000003A2F0
	// succ:  l000000000003A2F0
l000000000003A2E4_ds_t:
	goto l000000000003A2F4
	// succ:  l000000000003A2F4
l000000000003A2F0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003A2F4
l000000000003A2F4:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000003A2F4_ds_t
	// succ:  l000000000003A2F4_ds_f l000000000003A2F4_ds_t
l000000000003A2F4_ds_f:
	goto l000000000003A30C
	// succ:  l000000000003A30C
l000000000003A2F4_ds_t:
	goto l000000000003A374
	// succ:  l000000000003A374
l000000000003A30C:
	Mem0[r1 + 0x0000000000000008:word64] = r2
	goto l000000000003A310
	// succ:  l000000000003A310
l000000000003A30C_ds_f:
	goto l000000000003A31C
	// succ:  l000000000003A31C
l000000000003A30C_ds_t:
	goto l000000000003A320
	// succ:  l000000000003A320
l000000000003A310:
	r1 = r5
	branch r5 != 0x0000000000000000 l000000000003A30C_ds_t
	goto l000000000003A30C_ds_f
	// succ:  l000000000003A30C_ds_f l000000000003A30C_ds_t
l000000000003A31C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003A320
l000000000003A320:
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000003A320_ds_t
	// succ:  l000000000003A320_ds_f l000000000003A320_ds_t
l000000000003A320_ds_f:
	goto l000000000003A33C
	// succ:  l000000000003A33C
l000000000003A320_ds_t:
	goto l000000000003A350
	// succ:  l000000000003A350
l000000000003A33C:
	Mem0[r1 + 0x0000000000000010:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mSpanList).insertBack_exit
l000000000003A350:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mSpanList).insertBack_exit
l000000000003A374:
	lo = r3 / r1
	hi = r3 % r1
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r5
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000040:word64]
	goto l000000000003A310
	// succ:  l000000000003A310
l000000000003A394:
	r3 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r5
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000040:word64]
	goto l000000000003A2D4
	// succ:  l000000000003A2D4
l000000000003A3B4:
	lo = r2 / r5
	hi = r2 % r5
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000040:word64]
	goto l000000000003A2A0
	// succ:  l000000000003A2A0
l000000000003A3D4:
	r2 = Mem0[r5:word64]
	Mem0[sp + 0x0000000000000028:word64] = r2
	r2 = Mem0[r5 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	r1 = r5
	r2 = Mem0[r5 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.(*mSpanList).insertBack_exit:


// runtime.addspecial
// Return size: 0
void runtime.addspecial()
runtime.addspecial_entry:
	// succ:  l000000000003A4B8
l000000000003A4B8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003A4B8_ds_t
	// succ:  l000000000003A4B8_ds_f l000000000003A4B8_ds_t
l000000000003A4B8_ds_f:
	goto l000000000003A4C8
	// succ:  l000000000003A4C8
l000000000003A4B8_ds_t:
	goto l000000000003A4DC
	// succ:  l000000000003A4DC
l000000000003A4C8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003A4B8
	// succ:  l000000000003A4B8
l000000000003A4DC:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r3 = 0x00000000000D0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	r4 = Mem0[sp + 0x0000000000000048:word64]
	branch r3 != 0x0000000000000000 l000000000003A4DC_ds_t
	// succ:  l000000000003A4DC_ds_f l000000000003A4DC_ds_t
l000000000003A4DC_ds_f:
	goto l000000000003A500
	// succ:  l000000000003A500
l000000000003A4DC_ds_t:
	goto l000000000003A504
	// succ:  l000000000003A504
l000000000003A500:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003A504
l000000000003A504:
	r2 = Mem0[r3 + 0x00000000000012B0:word64]
	r23 = (word64) (r4 <u r2)
	branch r23 != 0x0000000000000000 l000000000003A504_ds_t
	// succ:  l000000000003A504_ds_f l000000000003A504_ds_t
l000000000003A504_ds_f:
	goto l000000000003A514
	// succ:  l000000000003A514
l000000000003A504_ds_t:
	goto l000000000003A908
	// succ:  l000000000003A908
l000000000003A514:
	r2 = Mem0[r3 + 0x00000000000012B8:word64]
	r23 = (word64) (r4 <u r2)
	branch r23 == 0x0000000000000000 l000000000003A514_ds_t
	// succ:  l000000000003A514_ds_f l000000000003A514_ds_t
l000000000003A514_ds_f:
	goto l000000000003A524
	// succ:  l000000000003A524
l000000000003A514_ds_t:
	goto l000000000003A908
	// succ:  l000000000003A908
l000000000003A524:
	r2 = Mem0[r3 + 0x00000000000012B0:word64]
l000000000003A5B0:
	r6 = r2
	r1 = r2
	Mem0[sp + 0x0000000000000030:word64] = r2
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000003A5B0_ds_t
	// succ:  l000000000003A5B0_ds_f l000000000003A5B0_ds_t
l000000000003A5B0_ds_f:
	goto l000000000003A5C8
	// succ:  l000000000003A5C8
l000000000003A5B0_ds_t:
	goto l000000000003A5EC
	// succ:  l000000000003A5EC
l000000000003A5C8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000003A5EC:
	r4 = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r3 = r2
	Mem0[sp + 0x0000000000000038:word64] = r2
	r1 = r6
	Mem0[sp + 0x0000000000000008:word64] = r6
	call runtime.(*mspan).ensureSwept (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[r4 + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000048:word64]
l000000000003A908:
	r2 = 0x0000000000000000
	goto l000000000003A5B0
	// succ:  l000000000003A5B0
runtime.addspecial_exit:


// runtime.setprofilebucket
// Return size: 0
void runtime.setprofilebucket()
runtime.setprofilebucket_entry:
	// succ:  l000000000003A918
l000000000003A918:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003A918_ds_t
	// succ:  l000000000003A918_ds_f l000000000003A918_ds_t
l000000000003A918_ds_f:
	goto l000000000003A928
	// succ:  l000000000003A928
l000000000003A918_ds_t:
	goto l000000000003A93C
	// succ:  l000000000003A93C
l000000000003A928:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003A918
	// succ:  l000000000003A918
l000000000003A93C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.(*fixalloc).alloc (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000020:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	Mem0[r5 + 0x000000000000000A:byte] = (byte) r2
	r1 = r5
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000003A93C_ds_t
	// succ:  l000000000003A93C_ds_f l000000000003A93C_ds_t
l000000000003A93C_ds_f:
	goto l000000000003A9F4
	// succ:  l000000000003A9F4
l000000000003A93C_ds_t:
	goto l000000000003AA70
	// succ:  l000000000003AA70
l000000000003A9F4:
	Mem0[r1 + 0x0000000000000010:word64] = r2
	goto l000000000003A9F8
	// succ:  l000000000003A9F8
l000000000003A9F4_ds_f:
	goto l000000000003AA10
	// succ:  l000000000003AA10
l000000000003A9F4_ds_t:
	goto l000000000003AA14
	// succ:  l000000000003AA14
l000000000003A9F8:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r5
	r1 = Mem0[sp + 0x0000000000000010:word64]
	branch r1 != 0x0000000000000000 l000000000003A9F4_ds_t
	goto l000000000003A9F4_ds_f
	// succ:  l000000000003A9F4_ds_f l000000000003A9F4_ds_t
l000000000003AA10:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003AA14
l000000000003AA14:
	call runtime.addspecial (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l000000000003AA14_ds_t
	// succ:  l000000000003AA14_ds_f l000000000003AA14_ds_t
l000000000003AA14_ds_f:
	goto l000000000003AA30
	// succ:  l000000000003AA30
l000000000003AA14_ds_t:
	goto l000000000003AA60
	// succ:  l000000000003AA60
l000000000003AA30:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000003AA60:
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.setprofilebucket_exit
l000000000003AA70:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000020:word64]
	goto l000000000003A9F8
	// succ:  l000000000003A9F8
runtime.setprofilebucket_exit:


// runtime.freespecial
// Return size: 0
void runtime.freespecial()
runtime.freespecial_entry:
	// succ:  l000000000003AA90
l000000000003AA90:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003AA90_ds_t
	// succ:  l000000000003AA90_ds_f l000000000003AA90_ds_t
l000000000003AA90_ds_f:
	goto l000000000003AAA0
	// succ:  l000000000003AAA0
l000000000003AA90_ds_t:
	goto l000000000003AAB4
	// succ:  l000000000003AAB4
l000000000003AAA0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003AA90
	// succ:  l000000000003AA90
l000000000003AAB4:
	sp = sp + -112
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000078:word64]
	r2 = (word64) Mem0[r4 + 0x000000000000000A:byte]
	r3 = r2 + 0x00000000000000FF
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000003AAB4_ds_t
	// succ:  l000000000003AAB4_ds_f l000000000003AAB4_ds_t
l000000000003AAB4_ds_f:
	goto l000000000003AAE4
	// succ:  l000000000003AAE4
l000000000003AAB4_ds_t:
	goto l000000000003AC50
	// succ:  l000000000003AC50
l000000000003AAE4:
	r3 = r4
	r1 = Mem0[sp + 0x0000000000000080:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r2 = Mem0[r4 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000010:word64] = r2
	r2 = Mem0[r4 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	r2 = Mem0[r4 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	r1 = r4
	Mem0[sp + 0x0000000000000048:word64] = r4
	r2 = Mem0[r4 + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000028:word64] = r2
	call runtime.queuefinalizer (retsize: 0;)
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r5 = 0x00000000000D0000
	lo = r5 / r5
	hi = r5 % r5
	lo = r5 / r5
	hi = r5 % r5
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r5 / r5
	hi = r5 % r5
	r6 = Mem0[sp + 0x0000000000000048:word64]
	r4 = Mem0[r5 + 0x0000000000000030:word64]
	r2 = Mem0[r5:word64]
l000000000003AC50:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000003AC50_ds_t
	// succ:  l000000000003AC50_ds_f l000000000003AC50_ds_t
l000000000003AC50_ds_f:
	goto l000000000003AC6C
	// succ:  l000000000003AC6C
l000000000003AC50_ds_t:
	goto l000000000003ADB8
	// succ:  l000000000003ADB8
l000000000003AC6C:
	Mem0[sp + 0x0000000000000040:word64] = r4
	r2 = Mem0[r4 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000088:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.mProf_Free (retsize: 0;)
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r5 = 0x00000000000D0000
	lo = r5 / r5
	hi = r5 % r5
	lo = r5 / r5
	hi = r5 % r5
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r5 / r5
	hi = r5 % r5
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r6 = Mem0[r5 + 0x0000000000000030:word64]
	r2 = Mem0[r5:word64]
l000000000003ADB8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.freespecial_exit:


// runtime.newMarkBits
// Return size: 0
void runtime.newMarkBits()
runtime.newMarkBits_entry:
	// succ:  l000000000003AE68
l000000000003AE68:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003AE68_ds_t
	// succ:  l000000000003AE68_ds_f l000000000003AE68_ds_t
l000000000003AE68_ds_f:
	goto l000000000003AE78
	// succ:  l000000000003AE78
l000000000003AE68_ds_t:
	goto l000000000003AE8C
	// succ:  l000000000003AE8C
l000000000003AE78:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003AE68
	// succ:  l000000000003AE68
l000000000003AE8C:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000040:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	r2 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000003AE8C_ds_t
	// succ:  l000000000003AE8C_ds_f l000000000003AE8C_ds_t
l000000000003AE8C_ds_f:
	goto l000000000003AEC8
	// succ:  l000000000003AEC8
l000000000003AE8C_ds_t:
	goto l000000000003AED4
	// succ:  l000000000003AED4
l000000000003AEC8:
	call runtime.panicdivide (retsize: 0;)
l000000000003AED4:
	lo = r1 / r3
	hi = r1 % r3
	r3 = lo
runtime.newMarkBits_exit:


// runtime.newAllocBits
// Return size: 0
void runtime.newAllocBits()
runtime.newAllocBits_entry:
	// succ:  l000000000003B140
l000000000003B140:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003B140_ds_t
	// succ:  l000000000003B140_ds_f l000000000003B140_ds_t
l000000000003B140_ds_f:
	goto l000000000003B150
	// succ:  l000000000003B150
l000000000003B140_ds_t:
	goto l000000000003B164
	// succ:  l000000000003B164
l000000000003B150:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003B140
	// succ:  l000000000003B140
l000000000003B164:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.newMarkBits (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000028:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.newAllocBits_exit
runtime.newAllocBits_exit:


// runtime.nextMarkBitArenaEpoch
// Return size: 0
void runtime.nextMarkBitArenaEpoch()
runtime.nextMarkBitArenaEpoch_entry:
	// succ:  l000000000003B198
l000000000003B198:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003B198_ds_t
	// succ:  l000000000003B198_ds_f l000000000003B198_ds_t
l000000000003B198_ds_f:
	goto l000000000003B1A8
	// succ:  l000000000003B1A8
l000000000003B198_ds_t:
	goto l000000000003B1BC
	// succ:  l000000000003B1BC
l000000000003B1A8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003B198
	// succ:  l000000000003B198
l000000000003B1BC:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000012C0:word64]
	branch r1 == 0x0000000000000000 l000000000003B1BC_ds_t
	// succ:  l000000000003B1BC_ds_f l000000000003B1BC_ds_t
l000000000003B1BC_ds_f:
	goto l000000000003B1F0
	// succ:  l000000000003B1F0
l000000000003B1BC_ds_t:
	goto l000000000003B234
	// succ:  l000000000003B234
l000000000003B1F0:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000012A8:word64]
	branch r1 != 0x0000000000000000 l000000000003B1F0_ds_t
	// succ:  l000000000003B1F0_ds_f l000000000003B1F0_ds_t
l000000000003B1F0_ds_f:
	goto l000000000003B204
	// succ:  l000000000003B204
l000000000003B1F0_ds_t:
	goto l000000000003B334
	// succ:  l000000000003B334
l000000000003B204:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000012C0:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l000000000003B204_ds_t
	// succ:  l000000000003B204_ds_f l000000000003B204_ds_t
l000000000003B204_ds_f:
	goto l000000000003B228
	// succ:  l000000000003B228
l000000000003B204_ds_t:
	goto l000000000003B310
	// succ:  l000000000003B310
l000000000003B228:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000012A8:word64] = r1
	// succ:  l000000000003B234
l000000000003B234:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000012B8:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l000000000003B234_ds_t
	// succ:  l000000000003B234_ds_f l000000000003B234_ds_t
l000000000003B234_ds_f:
	goto l000000000003B258
	// succ:  l000000000003B258
l000000000003B234_ds_t:
	goto l000000000003B2EC
	// succ:  l000000000003B2EC
l000000000003B258:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000012C0:word64] = r1
	goto l000000000003B264
	// succ:  l000000000003B264
l000000000003B258_ds_f:
	goto l000000000003B288
	// succ:  l000000000003B288
l000000000003B258_ds_t:
	goto l000000000003B2C8
	// succ:  l000000000003B2C8
l000000000003B264:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000012B0:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l000000000003B258_ds_t
	goto l000000000003B258_ds_f
	// succ:  l000000000003B258_ds_f l000000000003B258_ds_t
l000000000003B288:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000012B8:word64] = r1
	// succ:  l000000000003B294
l000000000003B294:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000012B0:word64] = 0x0000000000000000
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.nextMarkBitArenaEpoch_exit
l000000000003B2C8:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	goto l000000000003B294
	// succ:  l000000000003B294
l000000000003B2EC:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	goto l000000000003B264
	// succ:  l000000000003B264
l000000000003B310:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	goto l000000000003B234
	// succ:  l000000000003B234
l000000000003B334:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000012C0:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x00000000000012C0:word64]
	r1 = Mem0[r3 + 0x0000000000000008:word64]
	branch r1 == 0x0000000000000000 l000000000003B334_ds_t
	// succ:  l000000000003B334_ds_f l000000000003B334_ds_t
l000000000003B334_ds_f:
	goto l000000000003B358
	// succ:  l000000000003B358
l000000000003B334_ds_t:
	goto l000000000003B368
	// succ:  l000000000003B368
l000000000003B358:
	r3 = Mem0[r3 + 0x0000000000000008:word64]
	r1 = Mem0[r3 + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000003B358_ds_t
	// succ:  l000000000003B358_ds_f l000000000003B358_ds_t
l000000000003B358_ds_f:
	goto l000000000003B368
	// succ:  l000000000003B368
l000000000003B358_ds_t:
	goto l000000000003B358
	// succ:  l000000000003B358
l000000000003B368:
	r1 = r3
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000012A8:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000003B368_ds_t
	// succ:  l000000000003B368_ds_f l000000000003B368_ds_t
l000000000003B368_ds_f:
	goto l000000000003B390
	// succ:  l000000000003B390
l000000000003B368_ds_t:
	goto l000000000003B3F0
	// succ:  l000000000003B3F0
l000000000003B390:
	Mem0[r1 + 0x0000000000000008:word64] = r2
	goto l000000000003B394
	// succ:  l000000000003B394
l000000000003B390_ds_f:
	goto l000000000003B3B8
	// succ:  l000000000003B3B8
l000000000003B390_ds_t:
	goto l000000000003B3CC
	// succ:  l000000000003B3CC
l000000000003B394:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000012C0:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l000000000003B390_ds_t
	goto l000000000003B390_ds_f
	// succ:  l000000000003B390_ds_f l000000000003B390_ds_t
l000000000003B3B8:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000012A8:word64] = r1
	goto l000000000003B234
	// succ:  l000000000003B234
l000000000003B3CC:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	goto l000000000003B234
	// succ:  l000000000003B234
l000000000003B3F0:
	lo = r3 / r1
	hi = r3 % r1
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	goto l000000000003B394
	// succ:  l000000000003B394
runtime.nextMarkBitArenaEpoch_exit:


// runtime.newArena
// Return size: 0
void runtime.newArena()
runtime.newArena_entry:
	// succ:  l000000000003B410
l000000000003B410:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003B410_ds_t
	// succ:  l000000000003B410_ds_f l000000000003B410_ds_t
l000000000003B410_ds_f:
	goto l000000000003B420
	// succ:  l000000000003B420
l000000000003B410_ds_t:
	goto l000000000003B434
	// succ:  l000000000003B434
l000000000003B420:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003B410
	// succ:  l000000000003B410
l000000000003B434:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000012A8:word64]
	branch r1 != 0x0000000000000000 l000000000003B434_ds_t
	// succ:  l000000000003B434_ds_f l000000000003B434_ds_t
l000000000003B434_ds_f:
	goto l000000000003B450
	// succ:  l000000000003B450
l000000000003B434_ds_t:
	goto l000000000003B4D4
	// succ:  l000000000003B4D4
l000000000003B450:
	r1 = 0x0000000000010000
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.sysAlloc (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000020:word64] = r3
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000003B450_ds_t
	// succ:  l000000000003B450_ds_f l000000000003B450_ds_t
l000000000003B450_ds_f:
	goto l000000000003B494
	// succ:  l000000000003B494
l000000000003B450_ds_t:
	goto l000000000003B4B8
	// succ:  l000000000003B4B8
l000000000003B494:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000003B4B8:
	Mem0[r3 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[r3:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word64] = r3
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.newArena_exit
l000000000003B4D4:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000012A8:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000012A8:word64]
	r2 = Mem0[r1 + 0x0000000000000008:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r1 != r3 l000000000003B4D4_ds_t
	// succ:  l000000000003B4D4_ds_f l000000000003B4D4_ds_t
l000000000003B4D4_ds_f:
	goto l000000000003B50C
	// succ:  l000000000003B50C
l000000000003B4D4_ds_t:
	goto l000000000003B550
	// succ:  l000000000003B550
l000000000003B50C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000012A8:word64] = r2
	// succ:  l000000000003B518
l000000000003B518:
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = 0x0000000000010000
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.memclr (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[r3 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[r3:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word64] = r3
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.newArena_exit
l000000000003B550:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	goto l000000000003B518
	// succ:  l000000000003B518
runtime.newArena_exit:


// runtime.newBucket
// Return size: 0
void runtime.newBucket()
runtime.newBucket_entry:
	// succ:  l000000000003B578
l000000000003B578:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003B578_ds_t
	// succ:  l000000000003B578_ds_f l000000000003B578_ds_t
l000000000003B578_ds_f:
	goto l000000000003B588
	// succ:  l000000000003B588
l000000000003B578_ds_t:
	goto l000000000003B59C
	// succ:  l000000000003B59C
l000000000003B588:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003B578
	// succ:  l000000000003B578
l000000000003B59C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
runtime.newBucket_exit:


// runtime.(*bucket).mp
// Return size: 0
void runtime.(*bucket).mp()
runtime.(*bucket).mp_entry:
	// succ:  l000000000003B6A0
l000000000003B6A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003B6A0_ds_t
	// succ:  l000000000003B6A0_ds_f l000000000003B6A0_ds_t
l000000000003B6A0_ds_f:
	goto l000000000003B6B0
	// succ:  l000000000003B6B0
l000000000003B6A0_ds_t:
	goto l000000000003B6C4
	// succ:  l000000000003B6C4
l000000000003B6B0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003B6A0
	// succ:  l000000000003B6A0
l000000000003B6C4:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[r3 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000003B6C4_ds_t
	// succ:  l000000000003B6C4_ds_f l000000000003B6C4_ds_t
l000000000003B6C4_ds_f:
	goto l000000000003B6E0
	// succ:  l000000000003B6E0
l000000000003B6C4_ds_t:
	goto l000000000003B704
	// succ:  l000000000003B704
l000000000003B6E0:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000003B704:
	r2 = Mem0[r3 + 0x0000000000000028:word64]
runtime.(*bucket).mp_exit:


// runtime.(*bucket).bp
// Return size: 0
void runtime.(*bucket).bp()
runtime.(*bucket).bp_entry:
	// succ:  l000000000003B730
l000000000003B730:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003B730_ds_t
	// succ:  l000000000003B730_ds_f l000000000003B730_ds_t
l000000000003B730_ds_f:
	goto l000000000003B740
	// succ:  l000000000003B740
l000000000003B730_ds_t:
	goto l000000000003B754
	// succ:  l000000000003B754
l000000000003B740:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003B730
	// succ:  l000000000003B730
l000000000003B754:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[r3 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000003B754_ds_t
	// succ:  l000000000003B754_ds_f l000000000003B754_ds_t
l000000000003B754_ds_f:
	goto l000000000003B770
	// succ:  l000000000003B770
l000000000003B754_ds_t:
	goto l000000000003B794
	// succ:  l000000000003B794
l000000000003B770:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000003B794:
	r2 = Mem0[r3 + 0x0000000000000028:word64]
runtime.(*bucket).bp_exit:


// runtime.stkbucket
// Return size: 0
void runtime.stkbucket()
runtime.stkbucket_entry:
	// succ:  l000000000003B7C0
l000000000003B7C0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -192
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000003B7C0_ds_t
	// succ:  l000000000003B7C0_ds_f l000000000003B7C0_ds_t
l000000000003B7C0_ds_f:
	goto l000000000003B7D4
	// succ:  l000000000003B7D4
l000000000003B7C0_ds_t:
	goto l000000000003B7E8
	// succ:  l000000000003B7E8
l000000000003B7D4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003B7C0
	// succ:  l000000000003B7C0
l000000000003B7E8:
	sp = sp + -192
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001088:word64]
	branch r1 != 0x0000000000000000 l000000000003B7E8_ds_t
	// succ:  l000000000003B7E8_ds_f l000000000003B7E8_ds_t
l000000000003B7E8_ds_f:
	goto l000000000003B804
	// succ:  l000000000003B804
l000000000003B7E8_ds_t:
	goto l000000000003B898
	// succ:  l000000000003B898
l000000000003B804:
	r1 = 0x0000000000150000
	r1 = r1 | 0x000000000000F8F8
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.sysAlloc (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l000000000003B804_ds_t
	// succ:  l000000000003B804_ds_f l000000000003B804_ds_t
l000000000003B804_ds_f:
	goto l000000000003B854
	// succ:  l000000000003B854
l000000000003B804_ds_t:
	goto l000000000003BE7C
	// succ:  l000000000003BE7C
l000000000003B854:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001088:word64] = r1
	goto l000000000003B860
	// succ:  l000000000003B860
l000000000003B854_ds_f:
	goto l000000000003B878
	// succ:  l000000000003B878
l000000000003B854_ds_t:
	goto l000000000003B898
	// succ:  l000000000003B898
l000000000003B860:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001088:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000003B854_ds_t
	goto l000000000003B854_ds_f
	// succ:  l000000000003B854_ds_f l000000000003B854_ds_t
l000000000003B878:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000003B898:
	r5 = 0x0000000000000000
	r3 = Mem0[sp + 0x00000000000000D8:word64]
	r7 = Mem0[sp + 0x00000000000000E0:word64]
	r1 = Mem0[sp + 0x00000000000000E8:word64]
	r4 = 0x0000000000000000
	r23 = (word64) (r4 < r7)
	branch r23 == 0x0000000000000000 l000000000003B898_ds_t
	// succ:  l000000000003B898_ds_f l000000000003B898_ds_t
l000000000003B898_ds_f:
	goto l000000000003B8B8
	// succ:  l000000000003B8B8
l000000000003B898_ds_t:
	goto l000000000003B900
	// succ:  l000000000003B900
l000000000003B8B8:
	r6 = Mem0[r3:word64]
	lo = r1 / r5
	hi = r1 % r5
	r5 = r1
l000000000003B900:
	r2 = Mem0[sp + 0x00000000000000D0:word64]
	lo = r1 / r5
	hi = r1 % r5
	r3 = r1
l000000000003BE7C:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	goto l000000000003B860
	// succ:  l000000000003B860
runtime.stkbucket_exit:


// runtime.eqslice
// Return size: 0
void runtime.eqslice()
runtime.eqslice_entry:
	// succ:  l000000000003BEA0
l000000000003BEA0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003BEA0_ds_t
	// succ:  l000000000003BEA0_ds_f l000000000003BEA0_ds_t
l000000000003BEA0_ds_f:
	goto l000000000003BEB0
	// succ:  l000000000003BEB0
l000000000003BEA0_ds_t:
	goto l000000000003BEC4
	// succ:  l000000000003BEC4
l000000000003BEB0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003BEA0
	// succ:  l000000000003BEA0
l000000000003BEC4:
	sp = sp + -8
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000018:word64]
	r9 = Mem0[sp + 0x0000000000000028:word64]
	r8 = Mem0[sp + 0x0000000000000030:word64]
	r1 = 0x0000000000000000
	branch r4 == r8 l000000000003BEC4_ds_t
	// succ:  l000000000003BEC4_ds_f l000000000003BEC4_ds_t
l000000000003BEC4_ds_f:
	goto l000000000003BEE4
	// succ:  l000000000003BEE4
l000000000003BEC4_ds_t:
	goto l000000000003BEFC
	// succ:  l000000000003BEFC
l000000000003BEE4:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.eqslice_exit
l000000000003BEFC:
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r7 = r4
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r4 = 0x0000000000000000
	r23 = (word64) (r4 < r7)
	branch r23 == 0x0000000000000000 l000000000003BEFC_ds_t
	// succ:  l000000000003BEFC_ds_f l000000000003BEFC_ds_t
l000000000003BEFC_ds_f:
	goto l000000000003BF18
	// succ:  l000000000003BF18
l000000000003BEFC_ds_t:
	goto l000000000003BF90
	// succ:  l000000000003BF90
l000000000003BF18:
	r6 = Mem0[r5:word64]
	r1 = r9
	r3 = r8
	r2 = r4
	r23 = (word64) (r4 <u r8)
	branch r23 != 0x0000000000000000 l000000000003BF18_ds_t
	// succ:  l000000000003BF18_ds_f l000000000003BF18_ds_t
l000000000003BF18_ds_f:
	goto l000000000003BF34
	// succ:  l000000000003BF34
l000000000003BF18_ds_t:
	goto l000000000003BF40
	// succ:  l000000000003BF40
l000000000003BF34:
	call runtime.panicindex (retsize: 0;)
l000000000003BF40:
l000000000003BF90:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.eqslice_exit
runtime.eqslice_exit:


// runtime.mprof_GC
// Return size: 0
void runtime.mprof_GC()
runtime.mprof_GC_entry:
	// succ:  l000000000003BFB0
l000000000003BFB0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003BFB0_ds_t
	// succ:  l000000000003BFB0_ds_f l000000000003BFB0_ds_t
l000000000003BFB0_ds_f:
	goto l000000000003BFC0
	// succ:  l000000000003BFC0
l000000000003BFB0_ds_t:
	goto l000000000003BFD4
	// succ:  l000000000003BFD4
l000000000003BFC0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003BFB0
	// succ:  l000000000003BFB0
l000000000003BFD4:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x00000000000010D0:word64]
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l000000000003BFD4_ds_t
	// succ:  l000000000003BFD4_ds_f l000000000003BFD4_ds_t
l000000000003BFD4_ds_f:
	goto l000000000003BFF4
	// succ:  l000000000003BFF4
l000000000003BFD4_ds_t:
	goto l000000000003C090
	// succ:  l000000000003C090
l000000000003BFF4:
	r1 = r3
	Mem0[sp + 0x0000000000000018:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.(*bucket).mp (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000010:word64]
	r5 = Mem0[r4:word64]
	r2 = Mem0[r4 + 0x0000000000000020:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4:word64] = r2
	r5 = Mem0[r4 + 0x0000000000000008:word64]
	r2 = Mem0[r4 + 0x0000000000000028:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4 + 0x0000000000000008:word64] = r2
	r5 = Mem0[r4 + 0x0000000000000010:word64]
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4 + 0x0000000000000010:word64] = r2
	r5 = Mem0[r4 + 0x0000000000000018:word64]
	r2 = Mem0[r4 + 0x0000000000000038:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4 + 0x0000000000000018:word64] = r2
	r3 = Mem0[r4 + 0x0000000000000040:word64]
	Mem0[r4 + 0x0000000000000020:word64] = r3
	r3 = Mem0[r4 + 0x0000000000000048:word64]
	Mem0[r4 + 0x0000000000000028:word64] = r3
	r3 = Mem0[r4 + 0x0000000000000050:word64]
	Mem0[r4 + 0x0000000000000030:word64] = r3
	r3 = Mem0[r4 + 0x0000000000000058:word64]
	Mem0[r4 + 0x0000000000000038:word64] = r3
	Mem0[r4 + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[r4 + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[r4 + 0x0000000000000050:word64] = 0x0000000000000000
	Mem0[r4 + 0x0000000000000058:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000003BFF4_ds_t
	// succ:  l000000000003BFF4_ds_f l000000000003BFF4_ds_t
l000000000003BFF4_ds_f:
	goto l000000000003C090
	// succ:  l000000000003C090
l000000000003BFF4_ds_t:
	goto l000000000003BFF4
	// succ:  l000000000003BFF4
l000000000003C090:
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mprof_GC_exit
runtime.mprof_GC_exit:


// runtime.mProf_GC
// Return size: 0
void runtime.mProf_GC()
runtime.mProf_GC_entry:
	// succ:  l000000000003C0A0
l000000000003C0A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003C0A0_ds_t
	// succ:  l000000000003C0A0_ds_f l000000000003C0A0_ds_t
l000000000003C0A0_ds_f:
	goto l000000000003C0B0
	// succ:  l000000000003C0B0
l000000000003C0A0_ds_t:
	goto l000000000003C0C4
	// succ:  l000000000003C0C4
l000000000003C0B0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003C0A0
	// succ:  l000000000003C0A0
l000000000003C0C4:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	call runtime.mprof_GC (retsize: 0;)
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mProf_GC_exit
runtime.mProf_GC_exit:


// runtime.mProf_Malloc
// Return size: 0
void runtime.mProf_Malloc()
runtime.mProf_Malloc_entry:
	// succ:  l000000000003C118
l000000000003C118:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -384
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000003C118_ds_t
	// succ:  l000000000003C118_ds_f l000000000003C118_ds_t
l000000000003C118_ds_f:
	goto l000000000003C12C
	// succ:  l000000000003C12C
l000000000003C118_ds_t:
	goto l000000000003C140
	// succ:  l000000000003C140
l000000000003C12C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003C118
	// succ:  l000000000003C118
l000000000003C140:
	sp = sp + -384
	Mem0[sp:word64] = ra
	lo = r1 / sp
	hi = r1 % sp
	Mem0[r1:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000010:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000028:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000050:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000060:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000068:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000070:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000078:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000080:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000088:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000090:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000098:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000A0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000A8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000B0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000B8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000C0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000C8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000D0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000D8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000E0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000E8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000F0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000F8:word64] = 0x0000000000000000
	lo = r2 / sp
	hi = r2 % sp
	branch r2 != 0x0000000000000000 l000000000003C140_ds_t
	// succ:  l000000000003C140_ds_f l000000000003C140_ds_t
l000000000003C140_ds_f:
	goto l000000000003C1D8
	// succ:  l000000000003C1D8
l000000000003C140_ds_t:
	goto l000000000003C1DC
	// succ:  l000000000003C1DC
l000000000003C1D8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003C1DC
l000000000003C1DC:
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000168:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r2
	Mem0[sp + 0x0000000000000170:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000178:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.callers (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000040:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l000000000003C1DC_ds_t
	// succ:  l000000000003C1DC_ds_f l000000000003C1DC_ds_t
l000000000003C1DC_ds_f:
	goto l000000000003C244
	// succ:  l000000000003C244
l000000000003C1DC_ds_t:
	goto l000000000003C334
	// succ:  l000000000003C334
l000000000003C244:
	lo = r2 / sp
	hi = r2 % sp
	branch r2 != 0x0000000000000000 l000000000003C244_ds_t
	// succ:  l000000000003C244_ds_f l000000000003C244_ds_t
l000000000003C244_ds_f:
	goto l000000000003C250
	// succ:  l000000000003C250
l000000000003C244_ds_t:
	goto l000000000003C254
	// succ:  l000000000003C254
l000000000003C250:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003C254
l000000000003C254:
	r5 = r1
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	r3 = r2
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000190:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	Mem0[sp + 0x0000000000000168:word64] = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	Mem0[sp + 0x0000000000000170:word64] = r5
	Mem0[sp + 0x0000000000000020:word64] = r5
	Mem0[sp + 0x0000000000000178:word64] = r4
	Mem0[sp + 0x0000000000000028:word64] = r4
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000030:byte] = (byte) r1
	call runtime.stkbucket (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r1 = r2
	Mem0[sp + 0x0000000000000148:word64] = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.(*bucket).mp (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000010:word64]
	r2 = Mem0[r4 + 0x0000000000000040:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4 + 0x0000000000000040:word64] = r2
	r2 = Mem0[r4 + 0x0000000000000050:word64]
	r3 = Mem0[sp + 0x0000000000000190:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4 + 0x0000000000000050:word64] = r2
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	r2 = Mem0[sp + 0x0000000000000188:word64]
	Mem0[r3 + 0x0000000000000008:word64] = r2
	r2 = Mem0[sp + 0x0000000000000148:word64]
	Mem0[r3 + 0x0000000000000010:word64] = r2
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 384
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mProf_Malloc_exit
l000000000003C334:
	call runtime.panicslice (retsize: 0;)
runtime.mProf_Malloc_exit:


// runtime.mProf_Free
// Return size: 0
void runtime.mProf_Free()
runtime.mProf_Free_entry:
	// succ:  l000000000003C348
l000000000003C348:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003C348_ds_t
	// succ:  l000000000003C348_ds_f l000000000003C348_ds_t
l000000000003C348_ds_f:
	goto l000000000003C358
	// succ:  l000000000003C358
l000000000003C348_ds_t:
	goto l000000000003C36C
	// succ:  l000000000003C36C
l000000000003C358:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003C348
	// succ:  l000000000003C348
l000000000003C36C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.(*bucket).mp (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000010:word64]
	r2 = Mem0[r4 + 0x0000000000000028:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4 + 0x0000000000000028:word64] = r2
	r2 = Mem0[r4 + 0x0000000000000038:word64]
	r3 = Mem0[sp + 0x0000000000000028:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4 + 0x0000000000000038:word64] = r2
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mProf_Free_exit
runtime.mProf_Free_exit:


// runtime.blockevent
// Return size: 0
void runtime.blockevent()
runtime.blockevent_entry:
	// succ:  l000000000003C3E8
l000000000003C3E8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -368
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000003C3E8_ds_t
	// succ:  l000000000003C3E8_ds_f l000000000003C3E8_ds_t
l000000000003C3E8_ds_f:
	goto l000000000003C3FC
	// succ:  l000000000003C3FC
l000000000003C3E8_ds_t:
	goto l000000000003C410
	// succ:  l000000000003C410
l000000000003C3FC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003C3E8
	// succ:  l000000000003C3E8
l000000000003C410:
	sp = sp + -368
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000178:word64]
	r2 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 < r1)
	branch r23 != 0x0000000000000000 l000000000003C410_ds_t
	// succ:  l000000000003C410_ds_f l000000000003C410_ds_t
l000000000003C410_ds_f:
	goto l000000000003C42C
	// succ:  l000000000003C42C
l000000000003C410_ds_t:
	goto l000000000003C434
	// succ:  l000000000003C434
l000000000003C42C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000178:word64] = r1
	// succ:  l000000000003C434
l000000000003C434:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load64 (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r23 = (word64) (0x0000000000000000 < r3)
	branch r23 == 0x0000000000000000 l000000000003C434_ds_t
	// succ:  l000000000003C434_ds_f l000000000003C434_ds_t
l000000000003C434_ds_f:
	goto l000000000003C45C
	// succ:  l000000000003C45C
l000000000003C434_ds_t:
	goto l000000000003C4C4
	// succ:  l000000000003C4C4
l000000000003C45C:
	Mem0[sp + 0x0000000000000040:word64] = r3
	r2 = Mem0[sp + 0x0000000000000178:word64]
	r1 = r3
	r23 = (word64) (r2 < r3)
	branch r23 == 0x0000000000000000 l000000000003C45C_ds_t
	// succ:  l000000000003C45C_ds_f l000000000003C45C_ds_t
l000000000003C45C_ds_f:
	goto l000000000003C474
	// succ:  l000000000003C474
l000000000003C45C_ds_t:
	goto l000000000003C4D4
	// succ:  l000000000003C4D4
l000000000003C474:
	call runtime.fastrand1 (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000008:uint32]
l000000000003C4C4:
	r4 = Mem0[sp:word64]
	sp = sp + 368
	call r4 (retsize: 0;)
	return
	// succ:  runtime.blockevent_exit
l000000000003C4D4:
	r3 = r30
	lo = r1 / sp
	hi = r1 % sp
	Mem0[r1:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000010:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000028:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000050:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000060:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000068:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000070:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000078:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000080:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000088:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000090:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000098:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000A0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000A8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000B0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000B8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000C0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000C8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000D0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000D8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000E0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000E8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000F0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000F8:word64] = 0x0000000000000000
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A0:word64]
	branch r1 == 0x0000000000000000 l000000000003C4D4_ds_t
	// succ:  l000000000003C4D4_ds_f l000000000003C4D4_ds_t
l000000000003C4D4_ds_f:
	goto l000000000003C56C
	// succ:  l000000000003C56C
l000000000003C4D4_ds_t:
	goto l000000000003C6E0
	// succ:  l000000000003C6E0
l000000000003C56C:
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A0:word64]
	branch r1 == r30 l000000000003C56C_ds_t
	// succ:  l000000000003C56C_ds_f l000000000003C56C_ds_t
l000000000003C56C_ds_f:
	goto l000000000003C57C
	// succ:  l000000000003C57C
l000000000003C56C_ds_t:
	goto l000000000003C6E0
	// succ:  l000000000003C6E0
l000000000003C57C:
	lo = r4 / sp
	hi = r4 % sp
	branch r4 != 0x0000000000000000 l000000000003C57C_ds_t
	// succ:  l000000000003C57C_ds_f l000000000003C57C_ds_t
l000000000003C57C_ds_f:
	goto l000000000003C588
	// succ:  l000000000003C588
l000000000003C57C_ds_t:
	goto l000000000003C58C
	// succ:  l000000000003C58C
l000000000003C588:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003C58C
l000000000003C58C:
	lo = r6 / 0x0000000000000000
	hi = r6 % 0x0000000000000000
	lo = r5 / 0x0000000000000000
	hi = r5 % 0x0000000000000000
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A0:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000180:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	Mem0[sp + 0x0000000000000158:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	Mem0[sp + 0x0000000000000160:word64] = r6
	Mem0[sp + 0x0000000000000020:word64] = r6
	r1 = r5
	Mem0[sp + 0x0000000000000168:word64] = r5
	Mem0[sp + 0x0000000000000028:word64] = r5
	call runtime.gcallers (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	goto l000000000003C5D4
	// succ:  l000000000003C5D4
l000000000003C58C_ds_f:
	goto l000000000003C600
	// succ:  l000000000003C600
l000000000003C58C_ds_t:
	goto l000000000003C6CC
	// succ:  l000000000003C6CC
l000000000003C5D4:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000048:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l000000000003C58C_ds_t
	goto l000000000003C58C_ds_f
	// succ:  l000000000003C58C_ds_f l000000000003C58C_ds_t
l000000000003C600:
	lo = r2 / sp
	hi = r2 % sp
	branch r2 != 0x0000000000000000 l000000000003C600_ds_t
	// succ:  l000000000003C600_ds_f l000000000003C600_ds_t
l000000000003C600_ds_f:
	goto l000000000003C60C
	// succ:  l000000000003C60C
l000000000003C600_ds_t:
	goto l000000000003C610
	// succ:  l000000000003C610
l000000000003C60C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003C610
l000000000003C610:
	r5 = r1
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	r3 = r2
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000158:word64] = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	Mem0[sp + 0x0000000000000160:word64] = r5
	Mem0[sp + 0x0000000000000020:word64] = r5
	Mem0[sp + 0x0000000000000168:word64] = r4
	Mem0[sp + 0x0000000000000028:word64] = r4
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000030:byte] = (byte) r1
	call runtime.stkbucket (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r1 = r2
	Mem0[sp + 0x0000000000000150:word64] = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.(*bucket).bp (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	r4 = Mem0[r1:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r4
	hi = r2 % r4
	Mem0[r1:word64] = r2
	r1 = Mem0[sp + 0x0000000000000150:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.(*bucket).bp (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	r4 = Mem0[r1 + 0x0000000000000008:word64]
	r3 = Mem0[sp + 0x0000000000000178:word64]
	lo = r2 / r4
	hi = r2 % r4
	Mem0[r1 + 0x0000000000000008:word64] = r2
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 368
	call r4 (retsize: 0;)
	return
	// succ:  runtime.blockevent_exit
l000000000003C6CC:
	call runtime.panicslice (retsize: 0;)
l000000000003C6E0:
	lo = r2 / sp
	hi = r2 % sp
	branch r2 != 0x0000000000000000 l000000000003C6E0_ds_t
	// succ:  l000000000003C6E0_ds_f l000000000003C6E0_ds_t
l000000000003C6E0_ds_f:
	goto l000000000003C6EC
	// succ:  l000000000003C6EC
l000000000003C6E0_ds_t:
	goto l000000000003C6F0
	// succ:  l000000000003C6F0
l000000000003C6EC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003C6F0
l000000000003C6F0:
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000180:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000158:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r2
	Mem0[sp + 0x0000000000000160:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000168:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.callers (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	goto l000000000003C5D4
	// succ:  l000000000003C5D4
runtime.blockevent_exit:


// runtime.tracealloc
// Return size: 0
void runtime.tracealloc()
runtime.tracealloc_entry:
	// succ:  l000000000003C738
l000000000003C738:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003C738_ds_t
	// succ:  l000000000003C738_ds_f l000000000003C738_ds_t
l000000000003C738_ds_f:
	goto l000000000003C748
	// succ:  l000000000003C748
l000000000003C738_ds_t:
	goto l000000000003C75C
	// succ:  l000000000003C75C
l000000000003C748:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003C738
	// succ:  l000000000003C738
l000000000003C75C:
	sp = sp + -112
	Mem0[sp:word64] = ra
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000088:word64]
	Mem0[sp + 0x0000000000000038:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
runtime.tracealloc_exit:


// runtime.tracefree
// Return size: 0
void runtime.tracefree()
runtime.tracefree_entry:
	// succ:  l000000000003CA88
l000000000003CA88:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003CA88_ds_t
	// succ:  l000000000003CA88_ds_f l000000000003CA88_ds_t
l000000000003CA88_ds_f:
	goto l000000000003CA98
	// succ:  l000000000003CA98
l000000000003CA88_ds_t:
	goto l000000000003CAAC
	// succ:  l000000000003CAAC
l000000000003CA98:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003CA88
	// succ:  l000000000003CA88
l000000000003CAAC:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	Mem0[sp + 0x0000000000000028:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
runtime.tracefree_exit:


// runtime.tracegc
// Return size: 0
void runtime.tracegc()
runtime.tracegc_entry:
	// succ:  l000000000003CC58
l000000000003CC58:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003CC58_ds_t
	// succ:  l000000000003CC58_ds_f l000000000003CC58_ds_t
l000000000003CC58_ds_f:
	goto l000000000003CC68
	// succ:  l000000000003CC68
l000000000003CC58_ds_t:
	goto l000000000003CC7C
	// succ:  l000000000003CC7C
l000000000003CC68:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003CC58
	// succ:  l000000000003CC58
l000000000003CC7C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	Mem0[sp + 0x0000000000000018:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
runtime.tracegc_exit:


// runtime.initSizes
// Return size: 0
void runtime.initSizes()
runtime.initSizes_entry:
	// succ:  l000000000003CD88
l000000000003CD88:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -384
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000003CD88_ds_t
	// succ:  l000000000003CD88_ds_f l000000000003CD88_ds_t
l000000000003CD88_ds_f:
	goto l000000000003CD9C
	// succ:  l000000000003CD9C
l000000000003CD88_ds_t:
	goto l000000000003CDB0
	// succ:  l000000000003CDB0
l000000000003CD9C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003CD88
	// succ:  l000000000003CD88
l000000000003CDB0:
	sp = sp + -384
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006440:word32] = (word32) r1
	lo = r7 / 0x0000000000000000
	hi = r7 % 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word64] = r7
	lo = r8 / 0x0000000000000000
	hi = r8 % 0x0000000000000000
	r5 = r8
	r2 = 0x0000000000008000
	r23 = (word64) (r2 < r5)
	branch r23 != 0x0000000000000000 l000000000003CDB0_ds_t
	// succ:  l000000000003CDB0_ds_f l000000000003CDB0_ds_t
l000000000003CDB0_ds_f:
	goto l000000000003CDE8
	// succ:  l000000000003CDE8
l000000000003CDB0_ds_t:
	goto l000000000003D018
	// succ:  l000000000003D018
l000000000003CDE8:
l000000000003D018:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r7
	branch r7 == r2 l000000000003D018_ds_t
	// succ:  l000000000003D018_ds_f l000000000003D018_ds_t
l000000000003D018_ds_f:
	goto l000000000003D028
	// succ:  l000000000003D028
l000000000003D018_ds_t:
	goto l000000000003D0D8
	// succ:  l000000000003D0D8
l000000000003D028:
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000003D0D8:
	r2 = 0x00000000000F0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	lo = r1 / sp
	hi = r1 % sp
	r2 = r2 + -4
	r1 = r1 + -4
	lo = r4 / r2
	hi = r4 % r2
	// succ:  l000000000003D0F4
l000000000003D0F4:
	r3 = (word64) Mem0[r2 + 0x0000000000000004:int32]
	r2 = r2 + 4
	Mem0[r1 + 0x0000000000000004:word32] = (word32) r3
	r1 = r1 + 4
	branch r2 != r4 l000000000003D0F4_ds_t
	// succ:  l000000000003D0F4_ds_f l000000000003D0F4_ds_t
l000000000003D0F4_ds_f:
	goto l000000000003D10C
	// succ:  l000000000003D10C
l000000000003D0F4_ds_t:
	goto l000000000003D0F4
	// succ:  l000000000003D0F4
l000000000003D10C:
	r5 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000050:word64] = r1
	lo = r7 / sp
	hi = r7 % sp
	r2 = Mem0[sp + 0x0000000000000050:word64]
	r23 = (word64) (r5 < r2)
	branch r23 == 0x0000000000000000 l000000000003D10C_ds_t
	// succ:  l000000000003D10C_ds_f l000000000003D10C_ds_t
l000000000003D10C_ds_f:
	goto l000000000003D12C
	// succ:  l000000000003D12C
l000000000003D10C_ds_t:
	goto l000000000003D2A0
	// succ:  l000000000003D2A0
l000000000003D12C:
	Mem0[sp + 0x0000000000000178:word64] = r7
	r2 = (word64) Mem0[r7:int32]
	r3 = r2
	Mem0[sp + 0x0000000000000058:word64] = r5
	r6 = r5
	r1 = r3
	r4 = r1
	r1 = r4
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l000000000003D12C_ds_t
	// succ:  l000000000003D12C_ds_f l000000000003D12C_ds_t
l000000000003D12C_ds_f:
	goto l000000000003D160
	// succ:  l000000000003D160
l000000000003D12C_ds_t:
	goto l000000000003D22C
	// succ:  l000000000003D22C
l000000000003D160:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000048:word64] = r6
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r6
	r23 = (word64) (r6 <u r3)
	branch r23 != 0x0000000000000000 l000000000003D160_ds_t
	// succ:  l000000000003D160_ds_f l000000000003D160_ds_t
l000000000003D160_ds_f:
	goto l000000000003D184
	// succ:  l000000000003D184
l000000000003D160_ds_t:
	goto l000000000003D190
	// succ:  l000000000003D190
l000000000003D184:
	call runtime.panicindex (retsize: 0;)
l000000000003D190:
l000000000003D22C:
	r1 = r4
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000003D22C_ds_t
	// succ:  l000000000003D22C_ds_f l000000000003D22C_ds_t
l000000000003D22C_ds_f:
	goto l000000000003D244
	// succ:  l000000000003D244
l000000000003D22C_ds_t:
	goto l000000000003D278
	// succ:  l000000000003D278
l000000000003D244:
	r2 = 0x0000000000000000
	branch r6 == 0x0000000000000000 l000000000003D244_ds_t
	// succ:  l000000000003D244_ds_f l000000000003D244_ds_t
l000000000003D244_ds_f:
	goto l000000000003D250
	// succ:  l000000000003D250
l000000000003D244_ds_t:
	goto l000000000003D278
	// succ:  l000000000003D278
l000000000003D250:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000003D278:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r7
	hi = r1 % r7
	r7 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r5
	hi = r1 % r5
	r5 = r1
	r2 = Mem0[sp + 0x0000000000000050:word64]
	r23 = (word64) (r5 < r2)
	branch r23 != 0x0000000000000000 l000000000003D278_ds_t
	// succ:  l000000000003D278_ds_f l000000000003D278_ds_t
l000000000003D278_ds_f:
	goto l000000000003D2A0
	// succ:  l000000000003D2A0
l000000000003D278_ds_t:
	goto l000000000003D12C
	// succ:  l000000000003D12C
l000000000003D2A0:
	r4 = 0x0000000000000000
	lo = r5 / 0x0000000000000000
	hi = r5 % 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r5
	r23 = (word64) (r5 < r2)
	branch r23 == 0x0000000000000000 l000000000003D2A0_ds_t
	r4 = 0x0000000000000000
	lo = r5 / 0x0000000000000000
	hi = r5 % 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r5
	r23 = (word64) (r5 < r2)
	branch r23 == 0x0000000000000000 l000000000003D2A0_ds_t
	// succ:  l000000000003D2A0_ds_f l000000000003D2A0_ds_t l000000000003D2A0_ds_f l000000000003D2A0_ds_t
l000000000003D2A0_ds_f:
	goto l000000000003D2BC
	// succ:  l000000000003D2BC
l000000000003D2A0_ds_f:
	goto l000000000003D2BC
	// succ:  l000000000003D2BC
l000000000003D2A0_ds_t:
	goto l000000000003D478
	// succ:  l000000000003D478
l000000000003D2A0_ds_t:
	goto l000000000003D478
	// succ:  l000000000003D478
l000000000003D2BC:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r4 < r2)
	branch r23 == 0x0000000000000000 l000000000003D2BC_ds_t
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r4 < r2)
	branch r23 == 0x0000000000000000 l000000000003D2BC_ds_t
	// succ:  l000000000003D2BC_ds_f l000000000003D2BC_ds_t l000000000003D2BC_ds_f l000000000003D2BC_ds_t
l000000000003D2BC_ds_f:
	goto l000000000003D2CC
	// succ:  l000000000003D2CC
l000000000003D2BC_ds_f:
	goto l000000000003D2CC
	// succ:  l000000000003D2CC
l000000000003D2BC_ds_t:
	goto l000000000003D38C
	// succ:  l000000000003D38C
l000000000003D2BC_ds_t:
	goto l000000000003D38C
	// succ:  l000000000003D38C
l000000000003D2CC:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r5
	r23 = (word64) (r5 <u r3)
	branch r23 != 0x0000000000000000 l000000000003D2CC_ds_t
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r5
	r23 = (word64) (r5 <u r3)
	branch r23 != 0x0000000000000000 l000000000003D2CC_ds_t
	// succ:  l000000000003D2CC_ds_f l000000000003D2CC_ds_t l000000000003D2CC_ds_f l000000000003D2CC_ds_t
l000000000003D2CC_ds_f:
	goto l000000000003D2EC
	// succ:  l000000000003D2EC
l000000000003D2CC_ds_f:
	goto l000000000003D2EC
	// succ:  l000000000003D2EC
l000000000003D2CC_ds_t:
	goto l000000000003D2F8
	// succ:  l000000000003D2F8
l000000000003D2CC_ds_t:
	goto l000000000003D2F8
	// succ:  l000000000003D2F8
l000000000003D2EC:
	call runtime.panicindex (retsize: 0;)
	call runtime.panicindex (retsize: 0;)
l000000000003D2F8:
l000000000003D38C:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r4 < r2)
	branch r23 != 0x0000000000000000 l000000000003D38C_ds_t
	// succ:  l000000000003D38C_ds_f l000000000003D38C_ds_t
l000000000003D38C_ds_f:
	goto l000000000003D39C
	// succ:  l000000000003D39C
l000000000003D38C_ds_t:
	goto l000000000003D458
	// succ:  l000000000003D458
l000000000003D39C:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r5
	r23 = (word64) (r5 <u r3)
	branch r23 != 0x0000000000000000 l000000000003D39C_ds_t
	// succ:  l000000000003D39C_ds_f l000000000003D39C_ds_t
l000000000003D39C_ds_f:
	goto l000000000003D3BC
	// succ:  l000000000003D3BC
l000000000003D39C_ds_t:
	goto l000000000003D3C8
	// succ:  l000000000003D3C8
l000000000003D3BC:
	call runtime.panicindex (retsize: 0;)
l000000000003D3C8:
l000000000003D458:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r5
	hi = r1 % r5
	r5 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r5
	r23 = (word64) (r5 < r2)
	branch r23 != 0x0000000000000000 l000000000003D458_ds_t
	// succ:  l000000000003D458_ds_f l000000000003D458_ds_t
l000000000003D458_ds_f:
	goto l000000000003D478
	// succ:  l000000000003D478
l000000000003D458_ds_t:
	goto l000000000003D2BC
	// succ:  l000000000003D2BC
l000000000003D478:
	call runtime.testdefersizes (retsize: 0;)
	r5 = 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r5 < r2)
	branch r23 == 0x0000000000000000 l000000000003D478_ds_t
	call runtime.testdefersizes (retsize: 0;)
	r5 = 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r5 < r2)
	branch r23 == 0x0000000000000000 l000000000003D478_ds_t
	// succ:  l000000000003D478_ds_f l000000000003D478_ds_t l000000000003D478_ds_f l000000000003D478_ds_t
l000000000003D478_ds_f:
	goto l000000000003D494
	// succ:  l000000000003D494
l000000000003D478_ds_f:
	goto l000000000003D494
	// succ:  l000000000003D494
l000000000003D478_ds_t:
	goto l000000000003D528
	// succ:  l000000000003D528
l000000000003D478_ds_t:
	goto l000000000003D528
	// succ:  l000000000003D528
l000000000003D494:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r5
	r23 = (word64) (r5 <u r3)
	branch r23 != 0x0000000000000000 l000000000003D494_ds_t
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r5
	r23 = (word64) (r5 <u r3)
	branch r23 != 0x0000000000000000 l000000000003D494_ds_t
	// succ:  l000000000003D494_ds_f l000000000003D494_ds_t l000000000003D494_ds_f l000000000003D494_ds_t
l000000000003D494_ds_f:
	goto l000000000003D4B4
	// succ:  l000000000003D4B4
l000000000003D494_ds_f:
	goto l000000000003D4B4
	// succ:  l000000000003D4B4
l000000000003D494_ds_t:
	goto l000000000003D4C0
	// succ:  l000000000003D4C0
l000000000003D494_ds_t:
	goto l000000000003D4C0
	// succ:  l000000000003D4C0
l000000000003D4B4:
	call runtime.panicindex (retsize: 0;)
	call runtime.panicindex (retsize: 0;)
l000000000003D4C0:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
l000000000003D528:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l000000000003D528_ds_t
	// succ:  l000000000003D528_ds_f l000000000003D528_ds_t
l000000000003D528_ds_f:
	goto l000000000003D53C
	// succ:  l000000000003D53C
l000000000003D528_ds_t:
	goto l000000000003D620
	// succ:  l000000000003D620
l000000000003D53C:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000040:word64] = r3
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r2 <u r3)
	branch r23 != 0x0000000000000000 l000000000003D53C_ds_t
	// succ:  l000000000003D53C_ds_f l000000000003D53C_ds_t
l000000000003D53C_ds_f:
	goto l000000000003D560
	// succ:  l000000000003D560
l000000000003D53C_ds_t:
	goto l000000000003D56C
	// succ:  l000000000003D56C
l000000000003D560:
	call runtime.panicindex (retsize: 0;)
l000000000003D56C:
l000000000003D620:
	r4 = Mem0[sp:word64]
	sp = sp + 384
	call r4 (retsize: 0;)
	return
	// succ:  runtime.initSizes_exit
runtime.initSizes_exit:


// runtime.computeDivMagic
// Return size: 0
void runtime.computeDivMagic()
runtime.computeDivMagic_entry:
	// succ:  l000000000003D720
l000000000003D720:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003D720_ds_t
	// succ:  l000000000003D720_ds_f l000000000003D720_ds_t
l000000000003D720_ds_f:
	goto l000000000003D730
	// succ:  l000000000003D730
l000000000003D720_ds_t:
	goto l000000000003D744
	// succ:  l000000000003D744
l000000000003D730:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003D720
	// succ:  l000000000003D720
l000000000003D744:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r3 = (word64) Mem0[sp + 0x0000000000000028:uint32]
	Mem0[sp + 0x0000000000000030:byte] = (byte) 0x0000000000000000
	Mem0[sp + 0x0000000000000034:word32] = (word32) 0x0000000000000000
	Mem0[sp + 0x0000000000000038:byte] = (byte) 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	r6 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:byte] = (byte) r6
	Mem0[sp + 0x000000000000000C:word32] = (word32) 0x0000000000000000
	Mem0[sp + 0x0000000000000010:byte] = (byte) 0x0000000000000000
runtime.computeDivMagic_exit:


// runtime.init.1
// Return size: 0
void runtime.init.1()
runtime.init.1_entry:
	// succ:  l000000000003D9C8
l000000000003D9C8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000003D9C8_ds_t
	// succ:  l000000000003D9C8_ds_f l000000000003D9C8_ds_t
l000000000003D9C8_ds_f:
	goto l000000000003D9D8
	// succ:  l000000000003D9D8
l000000000003D9C8_ds_t:
	goto l000000000003D9F0
	// succ:  l000000000003D9F0
l000000000003D9D8:
	r2 = sp + 720
l000000000003D9F0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003D9C8
	// succ:  l000000000003D9C8
runtime.init.1_exit:


// runtime.cachestats
// Return size: 0
void runtime.cachestats()
runtime.cachestats_entry:
	// succ:  l000000000003DAB8
l000000000003DAB8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003DAB8_ds_t
	// succ:  l000000000003DAB8_ds_f l000000000003DAB8_ds_t
l000000000003DAB8_ds_f:
	goto l000000000003DAC8
	// succ:  l000000000003DAC8
l000000000003DAB8_ds_t:
	goto l000000000003DADC
	// succ:  l000000000003DADC
l000000000003DAC8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003DAB8
	// succ:  l000000000003DAB8
l000000000003DADC:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r4 = 0x0000000000000000
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r4
	r23 = (word64) (r4 <u r3)
	branch r23 != 0x0000000000000000 l000000000003DADC_ds_t
	// succ:  l000000000003DADC_ds_f l000000000003DADC_ds_t
l000000000003DADC_ds_f:
	goto l000000000003DB0C
	// succ:  l000000000003DB0C
l000000000003DADC_ds_t:
	goto l000000000003DB18
	// succ:  l000000000003DB18
l000000000003DB0C:
	call runtime.panicindex (retsize: 0;)
l000000000003DB18:
runtime.cachestats_exit:


// runtime.flushallmcaches
// Return size: 0
void runtime.flushallmcaches()
runtime.flushallmcaches_entry:
	// succ:  l000000000003DB88
l000000000003DB88:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003DB88_ds_t
	// succ:  l000000000003DB88_ds_f l000000000003DB88_ds_t
l000000000003DB88_ds_f:
	goto l000000000003DB98
	// succ:  l000000000003DB98
l000000000003DB88_ds_t:
	goto l000000000003DBAC
	// succ:  l000000000003DBAC
l000000000003DB98:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003DB88
	// succ:  l000000000003DB88
l000000000003DBAC:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r4 = 0x0000000000000000
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r4
	r23 = (word64) (r4 <u r3)
	branch r23 != 0x0000000000000000 l000000000003DBAC_ds_t
	// succ:  l000000000003DBAC_ds_f l000000000003DBAC_ds_t
l000000000003DBAC_ds_f:
	goto l000000000003DBDC
	// succ:  l000000000003DBDC
l000000000003DBAC_ds_t:
	goto l000000000003DBE8
	// succ:  l000000000003DBE8
l000000000003DBDC:
	call runtime.panicindex (retsize: 0;)
l000000000003DBE8:
runtime.flushallmcaches_exit:


// runtime.purgecachedstats
// Return size: 0
void runtime.purgecachedstats()
runtime.purgecachedstats_entry:
	// succ:  l000000000003DC70
l000000000003DC70:
	sp = fp
	sp = sp + -8
	Mem0[sp:word64] = ra
	r7 = Mem0[sp + 0x0000000000000010:word64]
	r8 = 0x00000000000D0000
	lo = r8 / r8
	hi = r8 % r8
	lo = r8 / r8
	hi = r8 % r8
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 - 0x0000000000003F70:word64]
	r1 = Mem0[r7 + 0x0000000000000008:word64]
	lo = r1 / r1
	hi = r1 % r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000003F70:word64] = r1
	Mem0[r7 + 0x0000000000000008:word64] = 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 - 0x0000000000003F80:word64]
	r1 = Mem0[r7 + 0x0000000000000020:word64]
	lo = r1 / r1
	hi = r1 % r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000003F80:word64] = r1
	Mem0[r7 + 0x0000000000000020:word64] = 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 - 0x0000000000005688:word64]
	r1 = Mem0[r7 + 0x0000000000000280:word64]
	lo = r1 / r1
	hi = r1 % r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000005688:word64] = r1
	Mem0[r7 + 0x0000000000000280:word64] = 0x0000000000000000
	branch r8 != 0x0000000000000000 l000000000003DC70_ds_t
	// succ:  l000000000003DC70_ds_f l000000000003DC70_ds_t
l000000000003DC70_ds_f:
	goto l000000000003DCFC
	// succ:  l000000000003DCFC
l000000000003DC70_ds_t:
	goto l000000000003DD00
	// succ:  l000000000003DD00
l000000000003DCFC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003DD00
l000000000003DD00:
	r4 = Mem0[r8 + 0x0000000000001078:word64]
	r2 = Mem0[r7 + 0x0000000000000288:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r8 + 0x0000000000001078:word64] = r2
	Mem0[r7 + 0x0000000000000288:word64] = 0x0000000000000000
	r4 = Mem0[r8 + 0x0000000000001080:word64]
	r2 = Mem0[r7 + 0x0000000000000290:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r8 + 0x0000000000001080:word64] = r2
	Mem0[r7 + 0x0000000000000290:word64] = 0x0000000000000000
	r6 = 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r6 < r2)
	branch r23 == 0x0000000000000000 l000000000003DD00_ds_t
	// succ:  l000000000003DD00_ds_f l000000000003DD00_ds_t
l000000000003DD00_ds_f:
	goto l000000000003DD3C
	// succ:  l000000000003DD3C
l000000000003DD00_ds_t:
	goto l000000000003DE38
	// succ:  l000000000003DE38
l000000000003DD3C:
	branch r8 != 0x0000000000000000 l000000000003DD3C_ds_t
	// succ:  l000000000003DD3C_ds_f l000000000003DD3C_ds_t
l000000000003DD3C_ds_f:
	goto l000000000003DD44
	// succ:  l000000000003DD44
l000000000003DD3C_ds_t:
	goto l000000000003DD48
	// succ:  l000000000003DD48
l000000000003DD44:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003DD48
l000000000003DD48:
	lo = r2 / r8
	hi = r2 % r8
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r1 = r6
	r23 = (word64) (r6 <u r3)
	branch r23 != 0x0000000000000000 l000000000003DD48_ds_t
	// succ:  l000000000003DD48_ds_f l000000000003DD48_ds_t
l000000000003DD48_ds_f:
	goto l000000000003DD60
	// succ:  l000000000003DD60
l000000000003DD48_ds_t:
	goto l000000000003DD6C
	// succ:  l000000000003DD6C
l000000000003DD60:
	call runtime.panicindex (retsize: 0;)
l000000000003DD6C:
l000000000003DE38:
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.purgecachedstats_exit
runtime.purgecachedstats_exit:


// runtime.mSysStatInc
// Return size: 0
void runtime.mSysStatInc()
runtime.mSysStatInc_entry:
	// succ:  l000000000003DE48
l000000000003DE48:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime/internal/atomic.Xadd64 (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mSysStatInc_exit
runtime.mSysStatInc_exit:


// runtime.mSysStatDec
// Return size: 0
void runtime.mSysStatDec()
runtime.mSysStatDec_entry:
	// succ:  l000000000003DE78
l000000000003DE78:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
runtime.mSysStatDec_exit:


// runtime.gcMaxStackBarriers
// Return size: 0
void runtime.gcMaxStackBarriers()
runtime.gcMaxStackBarriers_entry:
	// succ:  l000000000003DEB0
l000000000003DEB0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003DEB0_ds_t
	// succ:  l000000000003DEB0_ds_f l000000000003DEB0_ds_t
l000000000003DEB0_ds_f:
	goto l000000000003DEC0
	// succ:  l000000000003DEC0
l000000000003DEB0_ds_t:
	goto l000000000003DED4
	// succ:  l000000000003DED4
l000000000003DEC0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003DEB0
	// succ:  l000000000003DEB0
l000000000003DED4:
	sp = sp + -8
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r4 = 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000000020:word64]
	branch r1 != 0x0000000000000000 l000000000003DED4_ds_t
	// succ:  l000000000003DED4_ds_f l000000000003DED4_ds_t
l000000000003DED4_ds_f:
	goto l000000000003DEF8
	// succ:  l000000000003DEF8
l000000000003DED4_ds_t:
	goto l000000000003DF58
	// succ:  l000000000003DF58
l000000000003DEF8:
	r1 = r5
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000003DEF8_ds_t
	// succ:  l000000000003DEF8_ds_f l000000000003DEF8_ds_t
l000000000003DEF8_ds_f:
	goto l000000000003DF0C
	// succ:  l000000000003DF0C
l000000000003DEF8_ds_t:
	goto l000000000003DF18
	// succ:  l000000000003DF18
l000000000003DF0C:
	call runtime.panicdivide (retsize: 0;)
l000000000003DF18:
	lo = r5 / r3
	hi = r5 % r3
	r1 = lo
	r2 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000003DF18_ds_t
	// succ:  l000000000003DF18_ds_f l000000000003DF18_ds_t
l000000000003DF18_ds_f:
	goto l000000000003DF30
	// succ:  l000000000003DF30
l000000000003DF18_ds_t:
	goto l000000000003DF3C
	// succ:  l000000000003DF3C
l000000000003DF30:
	call runtime.panicdivide (retsize: 0;)
l000000000003DF3C:
	lo = r1 / r3
	hi = r1 % r3
	r2 = lo
	Mem0[sp + 0x0000000000000018:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcMaxStackBarriers_exit
l000000000003DF58:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000000020:word64]
	r23 = (word64) (r3 < r5)
	branch r23 == 0x0000000000000000 l000000000003DF58_ds_t
	// succ:  l000000000003DF58_ds_f l000000000003DF58_ds_t
l000000000003DF58_ds_f:
	goto l000000000003DF70
	// succ:  l000000000003DF70
l000000000003DF58_ds_t:
	goto l000000000003DF90
	// succ:  l000000000003DF90
l000000000003DF70:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r4 = r1
l000000000003DF90:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	Mem0[sp + 0x0000000000000018:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcMaxStackBarriers_exit
runtime.gcMaxStackBarriers_exit:


// runtime.gcInstallStackBarrier
// Return size: 0
void runtime.gcInstallStackBarrier()
runtime.gcInstallStackBarrier_entry:
	// succ:  l000000000003DFB0
l000000000003DFB0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003DFB0_ds_t
	// succ:  l000000000003DFB0_ds_f l000000000003DFB0_ds_t
l000000000003DFB0_ds_f:
	goto l000000000003DFC0
	// succ:  l000000000003DFC0
l000000000003DFB0_ds_t:
	goto l000000000003DFD4
	// succ:  l000000000003DFD4
l000000000003DFC0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003DFB0
	// succ:  l000000000003DFB0
l000000000003DFD4:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000028:word64]
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r1 = 0x0000000000000000
	r1 = Mem0[r3 + 0x0000000000000018:word64]
	branch r1 != 0x0000000000000000 l000000000003DFD4_ds_t
	// succ:  l000000000003DFD4_ds_f l000000000003DFD4_ds_t
l000000000003DFD4_ds_f:
	goto l000000000003DFF4
	// succ:  l000000000003DFF4
l000000000003DFD4_ds_t:
	goto l000000000003E00C
	// succ:  l000000000003E00C
l000000000003DFF4:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000030:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcInstallStackBarrier_exit
l000000000003E00C:
	r2 = Mem0[r3:word64]
	r1 = Mem0[r2:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 - 0x0000000000006930:word64]
	branch r1 != r2 l000000000003E00C_ds_t
	// succ:  l000000000003E00C_ds_f l000000000003E00C_ds_t
l000000000003E00C_ds_f:
	goto l000000000003E028
	// succ:  l000000000003E028
l000000000003E00C_ds_t:
	goto l000000000003E040
	// succ:  l000000000003E040
l000000000003E028:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000030:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcInstallStackBarrier_exit
l000000000003E040:
	r6 = Mem0[r3 + 0x0000000000000020:word64]
	r5 = r6
	r3 = Mem0[r4 + 0x0000000000000090:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r3 / r3
	hi = r3 % r3
	r1 = r4
	r2 = r3
	r3 = Mem0[r4 + 0x0000000000000098:word64]
	r23 = (word64) (r3 <u r2)
	branch r23 != 0x0000000000000000 l000000000003E040_ds_t
	// succ:  l000000000003E040_ds_f l000000000003E040_ds_t
l000000000003E040_ds_f:
	goto l000000000003E06C
	// succ:  l000000000003E06C
l000000000003E040_ds_t:
	goto l000000000003E0F0
	// succ:  l000000000003E0F0
l000000000003E06C:
	Mem0[r1 + 0x0000000000000090:word64] = r2
	r7 = Mem0[r4 + 0x0000000000000090:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l000000000003E0F0:
	call runtime.panicslice (retsize: 0;)
runtime.gcInstallStackBarrier_exit:


// runtime.gcRemoveStackBarriers
// Return size: 0
void runtime.gcRemoveStackBarriers()
runtime.gcRemoveStackBarriers_entry:
	// succ:  l000000000003E108
l000000000003E108:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -136
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000003E108_ds_t
	// succ:  l000000000003E108_ds_f l000000000003E108_ds_t
l000000000003E108_ds_f:
	goto l000000000003E11C
	// succ:  l000000000003E11C
l000000000003E108_ds_t:
	goto l000000000003E130
	// succ:  l000000000003E130
l000000000003E11C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003E108
	// succ:  l000000000003E108
l000000000003E130:
	sp = sp + -136
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000090:word64]
	r2 = Mem0[r6 + 0x00000000000000A0:word64]
	r1 = r6
	r3 = Mem0[r6 + 0x0000000000000090:word64]
	r4 = Mem0[r6 + 0x0000000000000098:word64]
	r23 = (word64) (r3 <u r2)
	branch r23 != 0x0000000000000000 l000000000003E130_ds_t
	// succ:  l000000000003E130_ds_f l000000000003E130_ds_t
l000000000003E130_ds_f:
	goto l000000000003E158
	// succ:  l000000000003E158
l000000000003E130_ds_t:
	goto l000000000003E24C
	// succ:  l000000000003E24C
l000000000003E158:
l000000000003E24C:
	call runtime.panicslice (retsize: 0;)
runtime.gcRemoveStackBarriers_exit:


// runtime.gcRemoveStackBarrier
// Return size: 0
void runtime.gcRemoveStackBarrier()
runtime.gcRemoveStackBarrier_entry:
	// succ:  l000000000003E260
l000000000003E260:
	sp = fp
	sp = sp + -72
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[sp + 0x0000000000000040:word64] = r4
	r3 = Mem0[r4:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006868:word64]
	Mem0[sp + 0x0000000000000018:word64] = r3
	r2 = r3
	branch r1 == r3 l000000000003E260_ds_t
	// succ:  l000000000003E260_ds_f l000000000003E260_ds_t
l000000000003E260_ds_f:
	goto l000000000003E290
	// succ:  l000000000003E290
l000000000003E260_ds_t:
	goto l000000000003E4C8
	// succ:  l000000000003E4C8
l000000000003E290:
	call runtime.printlock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006868:word64]
	Mem0[sp + 0x0000000000000030:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	r2 = Mem0[r1 + 0x00000000000000C0:word64]
	Mem0[sp + 0x0000000000000028:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000003E4C8:
	r2 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[r4:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 72
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcRemoveStackBarrier_exit
runtime.gcRemoveStackBarrier_exit:


// runtime.gcTryRemoveAllStackBarriers
// Return size: 0
void runtime.gcTryRemoveAllStackBarriers()
runtime.gcTryRemoveAllStackBarriers_entry:
	// succ:  l000000000003E4E0
l000000000003E4E0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003E4E0_ds_t
	// succ:  l000000000003E4E0_ds_f l000000000003E4E0_ds_t
l000000000003E4E0_ds_f:
	goto l000000000003E4F0
	// succ:  l000000000003E4F0
l000000000003E4E0_ds_t:
	goto l000000000003E504
	// succ:  l000000000003E504
l000000000003E4F0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003E4E0
	// succ:  l000000000003E4E0
l000000000003E504:
	sp = sp + -88
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000060:word64]
	r2 = Mem0[sp + 0x0000000000000068:word64]
	r1 = Mem0[sp + 0x0000000000000070:word64]
	Mem0[sp + 0x0000000000000050:word64] = r1
	r4 = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:word64] = r2
	Mem0[sp + 0x0000000000000020:word64] = r2
	Mem0[sp + 0x0000000000000040:word64] = r3
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r4 < r2)
	branch r23 == 0x0000000000000000 l000000000003E504_ds_t
	// succ:  l000000000003E504_ds_f l000000000003E504_ds_t
l000000000003E504_ds_f:
	goto l000000000003E53C
	// succ:  l000000000003E53C
l000000000003E504_ds_t:
	goto l000000000003E668
	// succ:  l000000000003E668
l000000000003E53C:
	Mem0[sp + 0x0000000000000038:word64] = r3
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000028:word64] = r4
	r3 = r2
	r1 = r3
	Mem0[sp + 0x0000000000000030:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.readgstatus (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
l000000000003E668:
	r4 = Mem0[sp:word64]
	sp = sp + 88
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcTryRemoveAllStackBarriers_exit
runtime.gcTryRemoveAllStackBarriers_exit:


// runtime.gcPrintStkbars
// Return size: 0
void runtime.gcPrintStkbars()
runtime.gcPrintStkbars_entry:
	// succ:  l000000000003E6E0
l000000000003E6E0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003E6E0_ds_t
	// succ:  l000000000003E6E0_ds_f l000000000003E6E0_ds_t
l000000000003E6E0_ds_f:
	goto l000000000003E6F0
	// succ:  l000000000003E6F0
l000000000003E6E0_ds_t:
	goto l000000000003E704
	// succ:  l000000000003E704
l000000000003E6F0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003E6E0
	// succ:  l000000000003E6E0
l000000000003E704:
	sp = sp + -128
	Mem0[sp:word64] = ra
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.gcPrintStkbars_exit:


// runtime.gcUnwindBarriers
// Return size: 0
void runtime.gcUnwindBarriers()
runtime.gcUnwindBarriers_entry:
	// succ:  l000000000003EA00
l000000000003EA00:
	sp = fp
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.gcLockStackBarriers (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r2 = Mem0[r4 + 0x00000000000000A0:word64]
	r3 = Mem0[r4 + 0x0000000000000090:word64]
	r1 = Mem0[r4 + 0x00000000000000A0:word64]
	r2 = r3
	r23 = (word64) (r1 < r3)
	branch r23 == 0x0000000000000000 l000000000003EA00_ds_t
	// succ:  l000000000003EA00_ds_f l000000000003EA00_ds_t
l000000000003EA00_ds_f:
	goto l000000000003EA38
	// succ:  l000000000003EA38
l000000000003EA00_ds_t:
	goto l000000000003EB34
	// succ:  l000000000003EB34
l000000000003EA38:
	r5 = Mem0[r4 + 0x00000000000000A0:word64]
	r1 = Mem0[r4 + 0x0000000000000088:word64]
	r6 = Mem0[r4 + 0x0000000000000090:word64]
	r2 = Mem0[r4 + 0x0000000000000098:word64]
	Mem0[sp + 0x0000000000000030:word64] = r2
	Mem0[sp + 0x0000000000000020:word64] = r1
	Mem0[sp + 0x0000000000000028:word64] = r6
	r3 = r6
	r2 = r5
	r23 = (word64) (r5 <u r6)
	branch r23 != 0x0000000000000000 l000000000003EA38_ds_t
	// succ:  l000000000003EA38_ds_f l000000000003EA38_ds_t
l000000000003EA38_ds_f:
	goto l000000000003EA68
	// succ:  l000000000003EA68
l000000000003EA38_ds_t:
	goto l000000000003EA74
	// succ:  l000000000003EA74
l000000000003EA68:
	call runtime.panicindex (retsize: 0;)
l000000000003EA74:
l000000000003EB34:
	r1 = r4
	Mem0[sp + 0x0000000000000008:word64] = r4
	call runtime.gcUnlockStackBarriers (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcUnwindBarriers_exit
runtime.gcUnwindBarriers_exit:


// runtime.nextBarrierPC
// Return size: 0
void runtime.nextBarrierPC()
runtime.nextBarrierPC_entry:
	// succ:  l000000000003EB58
l000000000003EB58:
	sp = fp
	sp = sp + -8
	Mem0[sp:word64] = ra
	r5 = Mem0[r30 + 0x00000000000000A0:word64]
	r1 = Mem0[r30 + 0x0000000000000088:word64]
	r4 = Mem0[r30 + 0x0000000000000090:word64]
	r2 = Mem0[r30 + 0x0000000000000098:word64]
	r3 = r4
	r2 = r5
	r23 = (word64) (r5 <u r4)
	branch r23 != 0x0000000000000000 l000000000003EB58_ds_t
	// succ:  l000000000003EB58_ds_f l000000000003EB58_ds_t
l000000000003EB58_ds_f:
	goto l000000000003EB84
	// succ:  l000000000003EB84
l000000000003EB58_ds_t:
	goto l000000000003EB90
	// succ:  l000000000003EB90
l000000000003EB84:
	call runtime.panicindex (retsize: 0;)
l000000000003EB90:
runtime.nextBarrierPC_exit:


// runtime.gcLockStackBarriers
// Return size: 0
void runtime.gcLockStackBarriers()
runtime.gcLockStackBarriers_entry:
	// succ:  l000000000003EBB0
l000000000003EBB0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = ra
	r4 = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000003EBB0_ds_t
	// succ:  l000000000003EBB0_ds_f l000000000003EBB0_ds_t
l000000000003EBB0_ds_f:
	goto l000000000003EBF8
	// succ:  l000000000003EBF8
l000000000003EBB0_ds_t:
	goto l000000000003EBFC
	// succ:  l000000000003EBFC
l000000000003EBF8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003EBFC
l000000000003EBFC:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.gcLockStackBarriers_exit:


// runtime.gcTryLockStackBarriers
// Return size: 0
void runtime.gcTryLockStackBarriers()
runtime.gcTryLockStackBarriers_entry:
	// succ:  l000000000003EC68
l000000000003EC68:
	sp = fp
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r4 = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r3 = Mem0[r30 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000020:word64] = r3
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000003EC68_ds_t
	// succ:  l000000000003EC68_ds_f l000000000003EC68_ds_t
l000000000003EC68_ds_f:
	goto l000000000003ECB8
	// succ:  l000000000003ECB8
l000000000003EC68_ds_t:
	goto l000000000003ECBC
	// succ:  l000000000003ECBC
l000000000003ECB8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003ECBC
l000000000003ECBC:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.gcTryLockStackBarriers_exit:


// runtime.gcUnlockStackBarriers
// Return size: 0
void runtime.gcUnlockStackBarriers()
runtime.gcUnlockStackBarriers_entry:
	// succ:  l000000000003ED70
l000000000003ED70:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003ED70_ds_t
	// succ:  l000000000003ED70_ds_f l000000000003ED70_ds_t
l000000000003ED70_ds_f:
	goto l000000000003ED80
	// succ:  l000000000003ED80
l000000000003ED70_ds_t:
	goto l000000000003ED94
	// succ:  l000000000003ED94
l000000000003ED80:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003ED70
	// succ:  l000000000003ED70
l000000000003ED94:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000003ED94_ds_t
	// succ:  l000000000003ED94_ds_f l000000000003ED94_ds_t
l000000000003ED94_ds_f:
	goto l000000000003EDB0
	// succ:  l000000000003EDB0
l000000000003ED94_ds_t:
	goto l000000000003EDB4
	// succ:  l000000000003EDB4
l000000000003EDB0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003EDB4
l000000000003EDB4:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.gcUnlockStackBarriers_exit:


// runtime.netpollinited
// Return size: 0
void runtime.netpollinited()
runtime.netpollinited_entry:
	// succ:  l000000000003EE38
l000000000003EE38:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003EE38_ds_t
	// succ:  l000000000003EE38_ds_f l000000000003EE38_ds_t
l000000000003EE38_ds_f:
	goto l000000000003EE48
	// succ:  l000000000003EE48
l000000000003EE38_ds_t:
	goto l000000000003EE5C
	// succ:  l000000000003EE5C
l000000000003EE48:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003EE38
	// succ:  l000000000003EE38
l000000000003EE5C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.netpollinited_exit:


// runtime.netpollready
// Return size: 0
void runtime.netpollready()
runtime.netpollready_entry:
	// succ:  l000000000003EEE0
l000000000003EEE0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003EEE0_ds_t
	// succ:  l000000000003EEE0_ds_f l000000000003EEE0_ds_t
l000000000003EEE0_ds_f:
	goto l000000000003EEF0
	// succ:  l000000000003EEF0
l000000000003EEE0_ds_t:
	goto l000000000003EF04
	// succ:  l000000000003EF04
l000000000003EEF0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003EEE0
	// succ:  l000000000003EEE0
l000000000003EF04:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000048:word64]
	r4 = (word64) Mem0[sp + 0x0000000000000058:int32]
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	r1 = r4
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 == r2 l000000000003EF04_ds_t
	// succ:  l000000000003EF04_ds_f l000000000003EF04_ds_t
l000000000003EF04_ds_f:
	goto l000000000003EF38
	// succ:  l000000000003EF38
l000000000003EF04_ds_t:
	goto l000000000003F03C
	// succ:  l000000000003F03C
l000000000003EF38:
	r1 = r4
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 == r2 l000000000003EF38_ds_t
	// succ:  l000000000003EF38_ds_f l000000000003EF38_ds_t
l000000000003EF38_ds_f:
	goto l000000000003EF54
	// succ:  l000000000003EF54
l000000000003EF38_ds_t:
	goto l000000000003F03C
	// succ:  l000000000003F03C
l000000000003EF54:
	r1 = r4
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 == r2 l000000000003EF54_ds_t
	// succ:  l000000000003EF54_ds_f l000000000003EF54_ds_t
l000000000003EF54_ds_f:
	goto l000000000003EF70
	// succ:  l000000000003EF70
l000000000003EF54_ds_t:
	goto l000000000003EFF4
	// succ:  l000000000003EFF4
l000000000003EF70:
	r1 = r4
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 == r2 l000000000003EF70_ds_t
	// succ:  l000000000003EF70_ds_f l000000000003EF70_ds_t
l000000000003EF70_ds_f:
	goto l000000000003EF8C
	// succ:  l000000000003EF8C
l000000000003EF70_ds_t:
	goto l000000000003EFF4
	// succ:  l000000000003EFF4
l000000000003EF8C:
	r1 = Mem0[sp + 0x0000000000000028:word64]
	branch r1 == 0x0000000000000000 l000000000003EF8C_ds_t
	// succ:  l000000000003EF8C_ds_f l000000000003EF8C_ds_t
l000000000003EF8C_ds_f:
	goto l000000000003EF98
	// succ:  l000000000003EF98
l000000000003EF8C_ds_t:
	goto l000000000003EFB8
	// succ:  l000000000003EFB8
l000000000003EF98:
	r1 = Mem0[sp + 0x0000000000000028:word64]
	branch r1 != 0x0000000000000000 l000000000003EF98_ds_t
	// succ:  l000000000003EF98_ds_f l000000000003EF98_ds_t
l000000000003EF98_ds_f:
	goto l000000000003EFA4
	// succ:  l000000000003EFA4
l000000000003EF98_ds_t:
	goto l000000000003EFA8
	// succ:  l000000000003EFA8
l000000000003EFA4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003EFA8
l000000000003EFA8:
	r3 = Mem0[r5:word64]
	Mem0[r1 + 0x00000000000000E0:word64] = r3
	r2 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[r5:word64] = r2
	// succ:  l000000000003EFB8
l000000000003EFB8:
	r1 = Mem0[sp + 0x0000000000000020:word64]
	branch r1 == 0x0000000000000000 l000000000003EFB8_ds_t
	// succ:  l000000000003EFB8_ds_f l000000000003EFB8_ds_t
l000000000003EFB8_ds_f:
	goto l000000000003EFC4
	// succ:  l000000000003EFC4
l000000000003EFB8_ds_t:
	goto l000000000003EFE4
	// succ:  l000000000003EFE4
l000000000003EFC4:
	r1 = Mem0[sp + 0x0000000000000020:word64]
	branch r1 != 0x0000000000000000 l000000000003EFC4_ds_t
	// succ:  l000000000003EFC4_ds_f l000000000003EFC4_ds_t
l000000000003EFC4_ds_f:
	goto l000000000003EFD0
	// succ:  l000000000003EFD0
l000000000003EFC4_ds_t:
	goto l000000000003EFD4
	// succ:  l000000000003EFD4
l000000000003EFD0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003EFD4
l000000000003EFD4:
	r3 = Mem0[r5:word64]
	Mem0[r1 + 0x00000000000000E0:word64] = r3
	r2 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[r5:word64] = r2
	// succ:  l000000000003EFE4
l000000000003EFE4:
	r4 = Mem0[sp:word64]
	sp = sp + 64
	call r4 (retsize: 0;)
	return
	// succ:  runtime.netpollready_exit
l000000000003EFF4:
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000030:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000014:byte] = (byte) r1
	call runtime.netpollunblock (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000048:word64]
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[r1:word64] = r3
	goto l000000000003EF8C
	// succ:  l000000000003EF8C
l000000000003F03C:
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000038:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000014:byte] = (byte) r1
	call runtime.netpollunblock (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000048:word64]
	r4 = (word64) Mem0[sp + 0x0000000000000058:int32]
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[r1:word64] = r3
	goto l000000000003EF54
	// succ:  l000000000003EF54
runtime.netpollready_exit:


// runtime.netpollunblock
// Return size: 0
void runtime.netpollunblock()
runtime.netpollunblock_entry:
	// succ:  l000000000003F088
l000000000003F088:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003F088_ds_t
	// succ:  l000000000003F088_ds_f l000000000003F088_ds_t
l000000000003F088_ds_f:
	goto l000000000003F098
	// succ:  l000000000003F098
l000000000003F088_ds_t:
	goto l000000000003F0AC
	// succ:  l000000000003F0AC
l000000000003F098:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003F088
	// succ:  l000000000003F088
l000000000003F0AC:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000040:word64]
	r4 = (word64) Mem0[sp + 0x000000000000004C:byte]
	branch r3 != 0x0000000000000000 l000000000003F0AC_ds_t
	// succ:  l000000000003F0AC_ds_f l000000000003F0AC_ds_t
l000000000003F0AC_ds_f:
	goto l000000000003F0C4
	// succ:  l000000000003F0C4
l000000000003F0AC_ds_t:
	goto l000000000003F0C8
	// succ:  l000000000003F0C8
l000000000003F0C4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000003F0C8
l000000000003F0C8:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r5 = r1
	r1 = (word64) Mem0[sp + 0x0000000000000048:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000003F0C8_ds_t
	// succ:  l000000000003F0C8_ds_f l000000000003F0C8_ds_t
l000000000003F0C8_ds_f:
	goto l000000000003F0F0
	// succ:  l000000000003F0F0
l000000000003F0C8_ds_t:
	goto l000000000003F0FC
	// succ:  l000000000003F0FC
l000000000003F0F0:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r5 = r1
	// succ:  l000000000003F0FC
l000000000003F0FC:
	r3 = Mem0[r5:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r3 != r2 l000000000003F0FC_ds_t
	// succ:  l000000000003F0FC_ds_f l000000000003F0FC_ds_t
l000000000003F0FC_ds_f:
	goto l000000000003F10C
	// succ:  l000000000003F10C
l000000000003F0FC_ds_t:
	goto l000000000003F120
	// succ:  l000000000003F120
l000000000003F10C:
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.netpollunblock_exit
l000000000003F120:
	branch r3 != 0x0000000000000000 l000000000003F120_ds_t
	// succ:  l000000000003F120_ds_f l000000000003F120_ds_t
l000000000003F120_ds_f:
	goto l000000000003F128
	// succ:  l000000000003F128
l000000000003F120_ds_t:
	goto l000000000003F148
	// succ:  l000000000003F148
l000000000003F128:
	r1 = r4 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l000000000003F128_ds_t
	// succ:  l000000000003F128_ds_f l000000000003F128_ds_t
l000000000003F128_ds_f:
	goto l000000000003F134
	// succ:  l000000000003F134
l000000000003F128_ds_t:
	goto l000000000003F148
	// succ:  l000000000003F148
l000000000003F134:
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.netpollunblock_exit
l000000000003F148:
	r2 = 0x0000000000000000
	r1 = r4 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000003F148_ds_t
	// succ:  l000000000003F148_ds_f l000000000003F148_ds_t
l000000000003F148_ds_f:
	goto l000000000003F158
	// succ:  l000000000003F158
l000000000003F148_ds_t:
	goto l000000000003F15C
	// succ:  l000000000003F15C
l000000000003F158:
l000000000003F15C:
	Mem0[sp + 0x0000000000000030:word64] = r5
	Mem0[sp + 0x0000000000000008:word64] = r5
	Mem0[sp + 0x0000000000000028:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime/internal/atomic.Casuintptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000030:word64]
	r4 = (word64) Mem0[sp + 0x000000000000004C:byte]
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000003F15C_ds_t
	// succ:  l000000000003F15C_ds_f l000000000003F15C_ds_t
l000000000003F15C_ds_f:
	goto l000000000003F198
	// succ:  l000000000003F198
l000000000003F15C_ds_t:
	goto l000000000003F1EC
	// succ:  l000000000003F1EC
l000000000003F198:
	r1 = Mem0[sp + 0x0000000000000028:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000003F198_ds_t
	// succ:  l000000000003F198_ds_f l000000000003F198_ds_t
l000000000003F198_ds_f:
	goto l000000000003F1A8
	// succ:  l000000000003F1A8
l000000000003F198_ds_t:
	goto l000000000003F1D0
	// succ:  l000000000003F1D0
l000000000003F1A8:
	r1 = Mem0[sp + 0x0000000000000028:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000003F1A8_ds_t
	// succ:  l000000000003F1A8_ds_f l000000000003F1A8_ds_t
l000000000003F1A8_ds_f:
	goto l000000000003F1B8
	// succ:  l000000000003F1B8
l000000000003F1A8_ds_t:
	goto l000000000003F1D0
	// succ:  l000000000003F1D0
l000000000003F1B8:
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000050:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.netpollunblock_exit
l000000000003F1D0:
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000050:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.netpollunblock_exit
l000000000003F1EC:
	goto l000000000003F0FC
	// succ:  l000000000003F0FC
runtime.netpollunblock_exit:


// runtime.netpoll
// Return size: 0
void runtime.netpoll()
runtime.netpoll_entry:
	// succ:  l000000000003F1F8
l000000000003F1F8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -2128
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000003F1F8_ds_t
	// succ:  l000000000003F1F8_ds_f l000000000003F1F8_ds_t
l000000000003F1F8_ds_f:
	goto l000000000003F20C
	// succ:  l000000000003F20C
l000000000003F1F8_ds_t:
	goto l000000000003F220
	// succ:  l000000000003F220
l000000000003F20C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003F1F8
	// succ:  l000000000003F1F8
l000000000003F220:
	sp = sp + -2128
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000000004:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000003F220_ds_t
	// succ:  l000000000003F220_ds_f l000000000003F220_ds_t
l000000000003F220_ds_f:
	goto l000000000003F24C
	// succ:  l000000000003F24C
l000000000003F220_ds_t:
	goto l000000000003F260
	// succ:  l000000000003F260
l000000000003F24C:
	Mem0[sp + 0x0000000000000860:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 2128
	call r4 (retsize: 0;)
	return
	// succ:  runtime.netpoll_exit
l000000000003F260:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000028:word32] = (word32) r1
	r1 = (word64) Mem0[sp + 0x0000000000000858:byte]
	branch r1 != 0x0000000000000000 l000000000003F260_ds_t
	// succ:  l000000000003F260_ds_f l000000000003F260_ds_t
l000000000003F260_ds_f:
	goto l000000000003F278
	// succ:  l000000000003F278
l000000000003F260_ds_t:
	goto l000000000003F280
	// succ:  l000000000003F280
l000000000003F278:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word32] = (word32) r1
	// succ:  l000000000003F280
l000000000003F280:
	lo = r1 / sp
	hi = r1 % sp
	r1 = r1 + -8
	lo = r2 / r1
	hi = r2 % r1
	// succ:  l000000000003F28C
l000000000003F28C:
	Mem0[r1 + 0x0000000000000008:word64] = 0x0000000000000000
	r1 = r1 + 8
	branch r1 != r2 l000000000003F28C_ds_t
	// succ:  l000000000003F28C_ds_f l000000000003F28C_ds_t
l000000000003F28C_ds_f:
	goto l000000000003F29C
	// succ:  l000000000003F29C
l000000000003F28C_ds_t:
	goto l000000000003F28C
	// succ:  l000000000003F28C
l000000000003F29C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000000004:int32]
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	r1 = (word64) Mem0[sp + 0x0000000000000028:int32]
	Mem0[sp + 0x000000000000001C:word32] = (word32) r1
	call runtime.epollwait (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:int32]
	r6 = r1
	r1 = r6
	r2 = 0x0000000000000000
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 == 0x0000000000000000 l000000000003F29C_ds_t
	// succ:  l000000000003F29C_ds_f l000000000003F29C_ds_t
l000000000003F29C_ds_f:
	goto l000000000003F2F4
	// succ:  l000000000003F2F4
l000000000003F29C_ds_t:
	goto l000000000003F3E0
	// succ:  l000000000003F3E0
l000000000003F2F4:
	r1 = r6
l000000000003F3E0:
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	r1 = 0x0000000000000000
	r5 = r1
	r1 = r5
	r2 = r6
	Mem0[sp + 0x0000000000000030:word32] = (word32) r6
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 == 0x0000000000000000 l000000000003F3E0_ds_t
	// succ:  l000000000003F3E0_ds_f l000000000003F3E0_ds_t
l000000000003F3E0_ds_f:
	goto l000000000003F40C
	// succ:  l000000000003F40C
l000000000003F3E0_ds_t:
	goto l000000000003F5B4
	// succ:  l000000000003F5B4
l000000000003F40C:
	lo = r1 / sp
	hi = r1 % sp
	r2 = r5
	Mem0[sp + 0x0000000000000038:word32] = (word32) r5
	r2 = r2
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r2 <u r3)
	branch r23 != 0x0000000000000000 l000000000003F40C_ds_t
	// succ:  l000000000003F40C_ds_f l000000000003F40C_ds_t
l000000000003F40C_ds_f:
	goto l000000000003F42C
	// succ:  l000000000003F42C
l000000000003F40C_ds_t:
	goto l000000000003F438
	// succ:  l000000000003F438
l000000000003F42C:
	call runtime.panicindex (retsize: 0;)
l000000000003F438:
l000000000003F5B4:
	r1 = (word64) Mem0[sp + 0x0000000000000858:byte]
	branch r1 == 0x0000000000000000 l000000000003F5B4_ds_t
	// succ:  l000000000003F5B4_ds_f l000000000003F5B4_ds_t
l000000000003F5B4_ds_f:
	goto l000000000003F5C0
	// succ:  l000000000003F5C0
l000000000003F5B4_ds_t:
	goto l000000000003F5D8
	// succ:  l000000000003F5D8
l000000000003F5C0:
	r1 = Mem0[sp + 0x0000000000000048:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000003F5C0_ds_t
	// succ:  l000000000003F5C0_ds_f l000000000003F5C0_ds_t
l000000000003F5C0_ds_f:
	goto l000000000003F5D0
	// succ:  l000000000003F5D0
l000000000003F5C0_ds_t:
	goto l000000000003F5D8
	// succ:  l000000000003F5D8
l000000000003F5D0:
	goto l000000000003F29C
	// succ:  l000000000003F29C
l000000000003F5D8:
	r2 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000860:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 2128
	call r4 (retsize: 0;)
	return
	// succ:  runtime.netpoll_exit
runtime.netpoll_exit:


// runtime.cmpstring
// Return size: 0
void runtime.cmpstring()
runtime.cmpstring_entry:
	// succ:  l000000000003F5F0
l000000000003F5F0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003F5F0_ds_t
	// succ:  l000000000003F5F0_ds_f l000000000003F5F0_ds_t
l000000000003F5F0_ds_f:
	goto l000000000003F600
	// succ:  l000000000003F600
l000000000003F5F0_ds_t:
	goto l000000000003F614
	// succ:  l000000000003F614
l000000000003F600:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003F5F0
	// succ:  l000000000003F5F0
l000000000003F614:
	sp = sp + -8
	Mem0[sp:word64] = ra
	r11 = Mem0[sp + 0x0000000000000020:word64]
	r10 = Mem0[sp + 0x0000000000000010:word64]
	r9 = Mem0[sp + 0x0000000000000018:word64]
	r7 = Mem0[sp + 0x0000000000000028:word64]
	r8 = r9
	r23 = (word64) (r7 < r9)
	branch r23 == 0x0000000000000000 l000000000003F614_ds_t
	// succ:  l000000000003F614_ds_f l000000000003F614_ds_t
l000000000003F614_ds_f:
	goto l000000000003F63C
	// succ:  l000000000003F63C
l000000000003F614_ds_t:
	goto l000000000003F794
	// succ:  l000000000003F794
l000000000003F63C:
	r8 = r7
	goto l000000000003F640
	// succ:  l000000000003F640
l000000000003F63C_ds_f:
	goto l000000000003F650
	// succ:  l000000000003F650
l000000000003F63C_ds_t:
	goto l000000000003F738
	// succ:  l000000000003F738
l000000000003F640:
	r4 = 0x0000000000000000
	r23 = (word64) (r4 < r8)
	branch r23 == 0x0000000000000000 l000000000003F63C_ds_t
	goto l000000000003F63C_ds_f
	// succ:  l000000000003F63C_ds_f l000000000003F63C_ds_t
l000000000003F650:
	r1 = r11
	r3 = r7
	r2 = r4
	r23 = (word64) (r4 <u r7)
	branch r23 != 0x0000000000000000 l000000000003F650_ds_t
	// succ:  l000000000003F650_ds_f l000000000003F650_ds_t
l000000000003F650_ds_f:
	goto l000000000003F668
	// succ:  l000000000003F668
l000000000003F650_ds_t:
	goto l000000000003F674
	// succ:  l000000000003F674
l000000000003F668:
	call runtime.panicindex (retsize: 0;)
l000000000003F674:
	lo = r1 / r11
	hi = r1 % r11
	r2 = (word64) Mem0[r1:byte]
	r6 = r2 + 0x00000000000000FF
	r1 = r10
	r3 = r9
	r2 = r4
	r23 = (word64) (r4 <u r9)
	branch r23 != 0x0000000000000000 l000000000003F674_ds_t
	// succ:  l000000000003F674_ds_f l000000000003F674_ds_t
l000000000003F674_ds_f:
	goto l000000000003F698
	// succ:  l000000000003F698
l000000000003F674_ds_t:
	goto l000000000003F6A4
	// succ:  l000000000003F6A4
l000000000003F698:
	call runtime.panicindex (retsize: 0;)
l000000000003F6A4:
	lo = r1 / r10
	hi = r1 % r10
	r2 = (word64) Mem0[r1:byte]
	r5 = r2 + 0x00000000000000FF
	r1 = r6 + 0x00000000000000FF
	r3 = r1 + 0x00000000000000FF
	r1 = r5 + 0x00000000000000FF
	r2 = r3 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r23 = (word64) (r1 <u r2)
	branch r23 == 0x0000000000000000 l000000000003F6A4_ds_t
	// succ:  l000000000003F6A4_ds_f l000000000003F6A4_ds_t
l000000000003F6A4_ds_f:
	goto l000000000003F6D4
	// succ:  l000000000003F6D4
l000000000003F6A4_ds_t:
	goto l000000000003F6EC
	// succ:  l000000000003F6EC
l000000000003F6D4:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cmpstring_exit
l000000000003F6EC:
	r1 = r5 + 0x00000000000000FF
	r2 = r3 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r23 = (word64) (r2 <u r1)
	branch r23 == 0x0000000000000000 l000000000003F6EC_ds_t
	// succ:  l000000000003F6EC_ds_f l000000000003F6EC_ds_t
l000000000003F6EC_ds_f:
	goto l000000000003F708
	// succ:  l000000000003F708
l000000000003F6EC_ds_t:
	goto l000000000003F720
	// succ:  l000000000003F720
l000000000003F708:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cmpstring_exit
l000000000003F720:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r4 = r1
	r23 = (word64) (r4 < r8)
	branch r23 != 0x0000000000000000 l000000000003F720_ds_t
	// succ:  l000000000003F720_ds_f l000000000003F720_ds_t
l000000000003F720_ds_f:
	goto l000000000003F738
	// succ:  l000000000003F738
l000000000003F720_ds_t:
	goto l000000000003F650
	// succ:  l000000000003F650
l000000000003F738:
	r23 = (word64) (r9 < r7)
	branch r23 == 0x0000000000000000 l000000000003F738_ds_t
	r23 = (word64) (r9 < r7)
	branch r23 == 0x0000000000000000 l000000000003F738_ds_t
	// succ:  l000000000003F738_ds_f l000000000003F738_ds_t l000000000003F738_ds_f l000000000003F738_ds_t
l000000000003F738_ds_f:
	goto l000000000003F744
	// succ:  l000000000003F744
l000000000003F738_ds_f:
	goto l000000000003F744
	// succ:  l000000000003F744
l000000000003F738_ds_t:
	goto l000000000003F75C
	// succ:  l000000000003F75C
l000000000003F738_ds_t:
	goto l000000000003F75C
	// succ:  l000000000003F75C
l000000000003F744:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cmpstring_exit runtime.cmpstring_exit
l000000000003F75C:
	r23 = (word64) (r7 < r9)
	branch r23 == 0x0000000000000000 l000000000003F75C_ds_t
	// succ:  l000000000003F75C_ds_f l000000000003F75C_ds_t
l000000000003F75C_ds_f:
	goto l000000000003F768
	// succ:  l000000000003F768
l000000000003F75C_ds_t:
	goto l000000000003F780
	// succ:  l000000000003F780
l000000000003F768:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cmpstring_exit
l000000000003F780:
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cmpstring_exit
l000000000003F794:
	goto l000000000003F640
	// succ:  l000000000003F640
runtime.cmpstring_exit:


// runtime.futexsleep
// Return size: 0
void runtime.futexsleep()
runtime.futexsleep_entry:
	// succ:  l000000000003F7A0
l000000000003F7A0:
	sp = fp
	sp = sp + -72
	Mem0[sp:word64] = ra
	r7 = Mem0[sp + 0x0000000000000050:word64]
	r6 = (word64) Mem0[sp + 0x0000000000000058:uint32]
	r5 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	r2 = 0x0000000000000000
	r23 = (word64) (r5 < 0x0000000000000000)
	branch r23 == 0x0000000000000000 l000000000003F7A0_ds_t
	// succ:  l000000000003F7A0_ds_f l000000000003F7A0_ds_t
l000000000003F7A0_ds_f:
	goto l000000000003F7CC
	// succ:  l000000000003F7CC
l000000000003F7A0_ds_t:
	goto l000000000003F810
	// succ:  l000000000003F810
l000000000003F7CC:
	Mem0[sp + 0x0000000000000008:word64] = r7
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
l000000000003F810:
	lo = r4 / sp
	hi = r4 % sp
	r1 = r5
	r2 = r5
	r3 = 0x000000003B9A0000
	r3 = r3 | 0x000000000000CA00
	branch r3 != 0x0000000000000000 l000000000003F810_ds_t
	// succ:  l000000000003F810_ds_f l000000000003F810_ds_t
l000000000003F810_ds_f:
	goto l000000000003F82C
	// succ:  l000000000003F82C
l000000000003F810_ds_t:
	goto l000000000003F838
	// succ:  l000000000003F838
l000000000003F82C:
	call runtime.panicdivide (retsize: 0;)
l000000000003F838:
	lo = r5 / r3
	hi = r5 % r3
	r2 = lo
	Mem0[r4:word64] = r2
	lo = r4 / sp
	hi = r4 % sp
	r1 = r5
	r2 = r5
	r3 = 0x000000003B9A0000
	r3 = r3 | 0x000000000000CA00
	branch r3 != 0x0000000000000000 l000000000003F838_ds_t
	// succ:  l000000000003F838_ds_f l000000000003F838_ds_t
l000000000003F838_ds_f:
	goto l000000000003F860
	// succ:  l000000000003F860
l000000000003F838_ds_t:
	goto l000000000003F86C
	// succ:  l000000000003F86C
l000000000003F860:
	call runtime.panicdivide (retsize: 0;)
l000000000003F86C:
	lo = r5 / r3
	hi = r5 % r3
	r2 = hi
	r1 = r2
	r2 = r1
	r1 = r2
	r3 = r1
	r2 = r3
	Mem0[r4 + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000008:word64] = r7
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
runtime.futexsleep_exit:


// runtime.futexwakeup
// Return size: 0
void runtime.futexwakeup()
runtime.futexwakeup_entry:
	// succ:  l000000000003F8D8
l000000000003F8D8:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
	r1 = (word64) Mem0[sp + 0x0000000000000060:uint32]
	Mem0[sp + 0x0000000000000014:word32] = (word32) r1
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
runtime.futexwakeup_exit:


// runtime.getproccount
// Return size: 0
void runtime.getproccount()
runtime.getproccount_entry:
	// succ:  l000000000003F9A0
l000000000003F9A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000003F9A0_ds_t
	// succ:  l000000000003F9A0_ds_f l000000000003F9A0_ds_t
l000000000003F9A0_ds_f:
	goto l000000000003F9B0
	// succ:  l000000000003F9B0
l000000000003F9A0_ds_t:
	goto l000000000003F9C8
	// succ:  l000000000003F9C8
l000000000003F9B0:
	r2 = sp + 720
l000000000003F9C8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003F9A0
	// succ:  l000000000003F9A0
runtime.getproccount_exit:


// runtime.newosproc
// Return size: 0
void runtime.newosproc()
runtime.newosproc_entry:
	// succ:  l000000000003FB60
l000000000003FB60:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003FB60_ds_t
	// succ:  l000000000003FB60_ds_f l000000000003FB60_ds_t
l000000000003FB60_ds_f:
	goto l000000000003FB70
	// succ:  l000000000003FB70
l000000000003FB60_ds_t:
	goto l000000000003FB84
	// succ:  l000000000003FB84
l000000000003FB70:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003FB60
	// succ:  l000000000003FB60
l000000000003FB84:
	sp = sp + -128
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
runtime.newosproc_exit:


// runtime.sysargs
// Return size: 0
void runtime.sysargs()
runtime.sysargs_entry:
	// succ:  l000000000003FDE0
l000000000003FDE0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000003FDE0_ds_t
	// succ:  l000000000003FDE0_ds_f l000000000003FDE0_ds_t
l000000000003FDE0_ds_f:
	goto l000000000003FDF0
	// succ:  l000000000003FDF0
l000000000003FDE0_ds_t:
	goto l000000000003FE04
	// succ:  l000000000003FE04
l000000000003FDF0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000003FDE0
	// succ:  l000000000003FDE0
l000000000003FE04:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000048:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000040:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 + r2
	r1 = r1
	r3 = r1
	r1 = r3
	r2 = r1
	r4 = r2
runtime.sysargs_exit:


// runtime.osinit
// Return size: 0
void runtime.osinit()
runtime.osinit_entry:
	// succ:  l0000000000040348
l0000000000040348:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000040348_ds_t
	// succ:  l0000000000040348_ds_f l0000000000040348_ds_t
l0000000000040348_ds_f:
	goto l0000000000040358
	// succ:  l0000000000040358
l0000000000040348_ds_t:
	goto l000000000004036C
	// succ:  l000000000004036C
l0000000000040358:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000040348
	// succ:  l0000000000040348
l000000000004036C:
	sp = sp + -16
	Mem0[sp:word64] = ra
	call runtime.getproccount (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000008:int32]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006970:word32] = (word32) r1
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.osinit_exit
runtime.osinit_exit:


// runtime.getRandomData
// Return size: 0
void runtime.getRandomData()
runtime.getRandomData_entry:
	// succ:  l00000000000403A0
l00000000000403A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000403A0_ds_t
	// succ:  l00000000000403A0_ds_f l00000000000403A0_ds_t
l00000000000403A0_ds_f:
	goto l00000000000403B0
	// succ:  l00000000000403B0
l00000000000403A0_ds_t:
	goto l00000000000403C4
	// succ:  l00000000000403C4
l00000000000403B0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000403A0
	// succ:  l00000000000403A0
l00000000000403C4:
	sp = sp + -112
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001220:word64]
	branch r1 == 0x0000000000000000 l00000000000403C4_ds_t
	// succ:  l00000000000403C4_ds_f l00000000000403C4_ds_t
l00000000000403C4_ds_f:
	goto l00000000000403E0
	// succ:  l00000000000403E0
l00000000000403C4_ds_t:
	goto l0000000000040494
	// succ:  l0000000000040494
l00000000000403E0:
	r6 = Mem0[sp + 0x0000000000000078:word64]
	r3 = Mem0[sp + 0x0000000000000080:word64]
	r1 = Mem0[sp + 0x0000000000000088:word64]
	Mem0[sp + 0x0000000000000068:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r5 = Mem0[r23 + 0x0000000000001220:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r4 = Mem0[r23 + 0x0000000000001228:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001230:word64]
	Mem0[sp + 0x0000000000000050:word64] = r1
	Mem0[sp + 0x0000000000000060:word64] = r3
	Mem0[sp + 0x0000000000000048:word64] = r4
	r23 = (word64) (r4 < r3)
	branch r23 == 0x0000000000000000 l00000000000403E0_ds_t
	// succ:  l00000000000403E0_ds_f l00000000000403E0_ds_t
l00000000000403E0_ds_f:
	goto l000000000004042C
	// succ:  l000000000004042C
l00000000000403E0_ds_t:
	goto l0000000000040430
	// succ:  l0000000000040430
l000000000004042C:
	r3 = r4
	// succ:  l0000000000040430
l0000000000040430:
	Mem0[sp + 0x0000000000000038:word64] = r3
	r2 = r3
	Mem0[sp + 0x0000000000000058:word64] = r6
	Mem0[sp + 0x0000000000000008:word64] = r6
	Mem0[sp + 0x0000000000000040:word64] = r5
	Mem0[sp + 0x0000000000000010:word64] = r5
	r1 = r3
	Mem0[sp + 0x0000000000000018:word64] = r3
	call runtime.memmove (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r1 = Mem0[sp + 0x0000000000000078:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000080:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000088:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	r1 = r2
	Mem0[sp + 0x0000000000000020:word64] = r2
	call runtime.extendRandom (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 112
	call r4 (retsize: 0;)
	return
	// succ:  runtime.getRandomData_exit
l0000000000040494:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000006F0:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000006F8:word64]
	r3 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r2)
	branch r23 != 0x0000000000000000 l0000000000040494_ds_t
	// succ:  l0000000000040494_ds_f l0000000000040494_ds_t
l0000000000040494_ds_f:
	goto l00000000000404BC
	// succ:  l00000000000404BC
l0000000000040494_ds_t:
	goto l00000000000404C8
	// succ:  l00000000000404C8
l00000000000404BC:
	call runtime.panicindex (retsize: 0;)
l00000000000404C8:
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000014:word32] = (word32) r1
	call runtime.open (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000080:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000018:int32]
	r2 = r1
	r1 = r2
	Mem0[sp + 0x0000000000000030:word32] = (word32) r2
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	r1 = Mem0[sp + 0x0000000000000078:word64]
	r2 = r4
	r3 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r4)
	branch r23 != 0x0000000000000000 l00000000000404C8_ds_t
	// succ:  l00000000000404C8_ds_f l00000000000404C8_ds_t
l00000000000404C8_ds_f:
	goto l0000000000040514
	// succ:  l0000000000040514
l00000000000404C8_ds_t:
	goto l0000000000040520
	// succ:  l0000000000040520
l0000000000040514:
	call runtime.panicindex (retsize: 0;)
l0000000000040520:
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = r4
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	call runtime.read (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:int32]
	Mem0[sp + 0x0000000000000028:word32] = (word32) r1
	r1 = (word64) Mem0[sp + 0x0000000000000030:int32]
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.closefd (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000078:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000080:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000088:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	r1 = (word64) Mem0[sp + 0x0000000000000028:int32]
	Mem0[sp + 0x0000000000000020:word64] = r1
	call runtime.extendRandom (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 112
	call r4 (retsize: 0;)
	return
	// succ:  runtime.getRandomData_exit
runtime.getRandomData_exit:


// runtime.goenvs
// Return size: 0
void runtime.goenvs()
runtime.goenvs_entry:
	// succ:  l0000000000040588
l0000000000040588:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000040588_ds_t
	// succ:  l0000000000040588_ds_f l0000000000040588_ds_t
l0000000000040588_ds_f:
	goto l0000000000040598
	// succ:  l0000000000040598
l0000000000040588_ds_t:
	goto l00000000000405AC
	// succ:  l00000000000405AC
l0000000000040598:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000040588
	// succ:  l0000000000040588
l00000000000405AC:
	sp = sp + -8
	Mem0[sp:word64] = ra
	call runtime.goenvs_unix (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.goenvs_exit
runtime.goenvs_exit:


// runtime.mpreinit
// Return size: 0
void runtime.mpreinit()
runtime.mpreinit_entry:
	// succ:  l00000000000405D0
l00000000000405D0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000405D0_ds_t
	// succ:  l00000000000405D0_ds_f l00000000000405D0_ds_t
l00000000000405D0_ds_f:
	goto l00000000000405E0
	// succ:  l00000000000405E0
l00000000000405D0_ds_t:
	goto l00000000000405F4
	// succ:  l00000000000405F4
l00000000000405E0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000405D0
	// succ:  l00000000000405D0
l00000000000405F4:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x0000000000008000
	r1 = r1
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.malg (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000020:word64]
	r2 = Mem0[sp + 0x0000000000000010:word64]
	r1 = r5
	branch r5 != 0x0000000000000000 l00000000000405F4_ds_t
	// succ:  l00000000000405F4_ds_f l00000000000405F4_ds_t
l00000000000405F4_ds_f:
	goto l0000000000040624
	// succ:  l0000000000040624
l00000000000405F4_ds_t:
	goto l0000000000040628
	// succ:  l0000000000040628
l0000000000040624:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000040628
l0000000000040628:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000040628_ds_t
	// succ:  l0000000000040628_ds_f l0000000000040628_ds_t
l0000000000040628_ds_f:
	goto l0000000000040640
	// succ:  l0000000000040640
l0000000000040628_ds_t:
	goto l00000000000406A8
	// succ:  l00000000000406A8
l0000000000040640:
	Mem0[r1 + 0x0000000000000050:word64] = r2
	goto l0000000000040644
	// succ:  l0000000000040644
l0000000000040640_ds_f:
	goto l0000000000040650
	// succ:  l0000000000040650
l0000000000040640_ds_t:
	goto l0000000000040654
	// succ:  l0000000000040654
l0000000000040644:
	r2 = Mem0[r5 + 0x0000000000000050:word64]
	branch r2 != 0x0000000000000000 l0000000000040640_ds_t
	goto l0000000000040640_ds_f
	// succ:  l0000000000040640_ds_f l0000000000040640_ds_t
l0000000000040650:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000040654
l0000000000040654:
	r1 = r5
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000040654_ds_t
	// succ:  l0000000000040654_ds_f l0000000000040654_ds_t
l0000000000040654_ds_f:
	goto l0000000000040670
	// succ:  l0000000000040670
l0000000000040654_ds_t:
	goto l0000000000040684
	// succ:  l0000000000040684
l0000000000040670:
	Mem0[r2 + 0x0000000000000030:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mpreinit_exit
l0000000000040684:
	lo = r3 / r2
	hi = r3 % r2
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r5
	call runtime.writebarrierptr (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mpreinit_exit
l00000000000406A8:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000020:word64]
	goto l0000000000040644
	// succ:  l0000000000040644
runtime.mpreinit_exit:


// runtime.msigsave
// Return size: 0
void runtime.msigsave()
runtime.msigsave_entry:
	// succ:  l00000000000406C8
l00000000000406C8:
	sp = fp
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	branch r1 != 0x0000000000000000 l00000000000406C8_ds_t
	// succ:  l00000000000406C8_ds_f l00000000000406C8_ds_t
l00000000000406C8_ds_f:
	goto l00000000000406DC
	// succ:  l00000000000406DC
l00000000000406C8_ds_t:
	goto l00000000000406E0
	// succ:  l00000000000406E0
l00000000000406DC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000406E0
l00000000000406E0:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	r2 = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
runtime.msigsave_exit:


// runtime.msigrestore
// Return size: 0
void runtime.msigrestore()
runtime.msigrestore_entry:
	// succ:  l0000000000040728
l0000000000040728:
	sp = fp
	sp = sp + -40
	Mem0[sp:word64] = ra
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
runtime.msigrestore_exit:


// runtime.sigblock
// Return size: 0
void runtime.sigblock()
runtime.sigblock_entry:
	// succ:  l0000000000040770
l0000000000040770:
	sp = fp
	sp = sp + -40
	Mem0[sp:word64] = ra
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
runtime.sigblock_exit:


// runtime.minit
// Return size: 0
void runtime.minit()
runtime.minit_entry:
	// succ:  l00000000000407C0
l00000000000407C0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000407C0_ds_t
	// succ:  l00000000000407C0_ds_f l00000000000407C0_ds_t
l00000000000407C0_ds_f:
	goto l00000000000407D0
	// succ:  l00000000000407D0
l00000000000407C0_ds_t:
	goto l00000000000407E4
	// succ:  l00000000000407E4
l00000000000407D0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000407C0
	// succ:  l00000000000407C0
l00000000000407E4:
	sp = sp + -88
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000038:word64] = r30
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:word32] = (word32) 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.sigaltstack (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000050:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 + r2
	r1 = r1
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l00000000000407E4_ds_t
	// succ:  l00000000000407E4_ds_f l00000000000407E4_ds_t
l00000000000407E4_ds_f:
	goto l000000000004083C
	// succ:  l000000000004083C
l00000000000407E4_ds_t:
	goto l0000000000040A88
	// succ:  l0000000000040A88
l000000000004083C:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000004083C_ds_t
	// succ:  l000000000004083C_ds_f l000000000004083C_ds_t
l000000000004083C_ds_f:
	goto l0000000000040854
	// succ:  l0000000000040854
l000000000004083C_ds_t:
	goto l0000000000040858
	// succ:  l0000000000040858
l0000000000040854:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000040858
l0000000000040858:
	call runtime.signalstack (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[r2 + 0x00000000000000F7:byte] = (byte) r1
	// succ:  l0000000000040874
l0000000000040874:
	call runtime.gettid (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000008:uint32]
l0000000000040A88:
	r5 = Mem0[sp + 0x0000000000000040:word64]
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000050:word64]
	Mem0[r1:word64] = r5
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000050:word64]
	r2 = Mem0[sp + 0x0000000000000048:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r1 + 0x0000000000000008:word64] = r2
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000050:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r5
	hi = r2 % r5
	Mem0[r1 + 0x0000000000000010:word64] = r2
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000050:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r5
	hi = r2 % r5
	Mem0[r1 + 0x0000000000000018:word64] = r2
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000050:word64]
	r2 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[r1 + 0x0000000000000038:word64] = r2
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = 0x0000000000000000
	Mem0[r2 + 0x00000000000000F7:byte] = (byte) r1
	goto l0000000000040874
	// succ:  l0000000000040874
runtime.minit_exit:


// runtime.unminit
// Return size: 0
void runtime.unminit()
runtime.unminit_entry:
	// succ:  l0000000000040AF8
l0000000000040AF8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = ra
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000F7:byte]
	branch r1 == 0x0000000000000000 l0000000000040AF8_ds_t
	// succ:  l0000000000040AF8_ds_f l0000000000040AF8_ds_t
l0000000000040AF8_ds_f:
	goto l0000000000040B10
	// succ:  l0000000000040B10
l0000000000040AF8_ds_t:
	goto l0000000000040B20
	// succ:  l0000000000040B20
l0000000000040B10:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	call runtime.signalstack (retsize: 0;)
l0000000000040B20:
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.unminit_exit
runtime.unminit_exit:


// runtime.setsig
// Return size: 0
void runtime.setsig()
runtime.setsig_entry:
	// succ:  l0000000000040B30
l0000000000040B30:
	sp = fp
	sp = sp + -152
	Mem0[sp:word64] = ra
	r1 = sp + 80
	r2 = r1 + 48
	// succ:  l0000000000040B40
l0000000000040B40:
	Mem0[r1 + 0x0000000000000008:word64] = 0x0000000000000000
	r1 = r1 + 8
	branch r1 != r2 l0000000000040B40_ds_t
	// succ:  l0000000000040B40_ds_f l0000000000040B40_ds_t
l0000000000040B40_ds_f:
	goto l0000000000040B50
	// succ:  l0000000000040B50
l0000000000040B40_ds_t:
	goto l0000000000040B40
	// succ:  l0000000000040B40
l0000000000040B50:
	Mem0[sp + 0x0000000000000030:word32] = (word32) 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.memclr (retsize: 0;)
	r4 = Mem0[sp + 0x00000000000000A8:word64]
	r1 = 0x0000000008000000
	r1 = r1 | 0x0000000000000008
runtime.setsig_exit:


// runtime.setsigstack
// Return size: 0
void runtime.setsigstack()
runtime.setsigstack_entry:
	// succ:  l0000000000040D10
l0000000000040D10:
	sp = fp
	sp = sp + -88
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000030:word32] = (word32) 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	r1 = (word64) Mem0[sp + 0x0000000000000060:int32]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000018:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	call runtime.rt_sigaction (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:int32]
	r2 = r1
	r1 = r2
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l0000000000040D10_ds_t
	// succ:  l0000000000040D10_ds_f l0000000000040D10_ds_t
l0000000000040D10_ds_f:
	goto l0000000000040D70
	// succ:  l0000000000040D70
l0000000000040D10_ds_t:
	goto l0000000000040EB0
	// succ:  l0000000000040EB0
l0000000000040D70:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000040D90:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	branch r1 == 0x0000000000000000 l0000000000040D90_ds_t
	// succ:  l0000000000040D90_ds_f l0000000000040D90_ds_t
l0000000000040D90_ds_f:
	goto l0000000000040D9C
	// succ:  l0000000000040D9C
l0000000000040D90_ds_t:
	goto l0000000000040EA0
	// succ:  l0000000000040EA0
l0000000000040D9C:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	branch r1 == 0x0000000000000000 l0000000000040D9C_ds_t
	// succ:  l0000000000040D9C_ds_f l0000000000040D9C_ds_t
l0000000000040D9C_ds_f:
	goto l0000000000040DA8
	// succ:  l0000000000040DA8
l0000000000040D9C_ds_t:
	goto l0000000000040EA0
	// succ:  l0000000000040EA0
l0000000000040DA8:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l0000000000040DA8_ds_t
	// succ:  l0000000000040DA8_ds_f l0000000000040DA8_ds_t
l0000000000040DA8_ds_f:
	goto l0000000000040DB8
	// succ:  l0000000000040DB8
l0000000000040DA8_ds_t:
	goto l0000000000040EA0
	// succ:  l0000000000040EA0
l0000000000040DB8:
	r1 = (word64) Mem0[sp + 0x0000000000000030:uint32]
	r2 = 0x0000000008000000
l0000000000040EA0:
	r4 = Mem0[sp:word64]
	sp = sp + 88
	call r4 (retsize: 0;)
	return
	// succ:  runtime.setsigstack_exit
l0000000000040EB0:
	goto l0000000000040D90
	// succ:  l0000000000040D90
runtime.setsigstack_exit:


// runtime.getsig
// Return size: 0
void runtime.getsig()
runtime.getsig_entry:
	// succ:  l0000000000040EB8
l0000000000040EB8:
	sp = fp
	sp = sp + -136
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000030:word32] = (word32) 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.memclr (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000090:int32]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000018:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	call runtime.rt_sigaction (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:int32]
	r2 = r1
	r1 = r2
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l0000000000040EB8_ds_t
	// succ:  l0000000000040EB8_ds_f l0000000000040EB8_ds_t
l0000000000040EB8_ds_f:
	goto l0000000000040F30
	// succ:  l0000000000040F30
l0000000000040EB8_ds_t:
	goto l0000000000041030
	// succ:  l0000000000041030
l0000000000040F30:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000040F50:
	r3 = 0x00000000000A0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000068:word64] = r1
	Mem0[sp + 0x0000000000000070:word64] = r3
	lo = r1 / sp
	hi = r1 % sp
l0000000000041030:
	goto l0000000000040F50
	// succ:  l0000000000040F50
runtime.getsig_exit:


// runtime.signalstack
// Return size: 0
void runtime.signalstack()
runtime.signalstack_entry:
	// succ:  l0000000000041038
l0000000000041038:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word32] = (word32) 0x0000000000000000
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000041038_ds_t
	// succ:  l0000000000041038_ds_f l0000000000041038_ds_t
l0000000000041038_ds_f:
	goto l000000000004105C
	// succ:  l000000000004105C
l0000000000041038_ds_t:
	goto l0000000000041090
	// succ:  l0000000000041090
l000000000004105C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000028:word32] = (word32) r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	call runtime.sigaltstack (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.signalstack_exit
l0000000000041090:
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	r1 = Mem0[r3 + 0x0000000000000008:word64]
	r2 = Mem0[r3:word64]
runtime.signalstack_exit:


// runtime.updatesigmask
// Return size: 0
void runtime.updatesigmask()
runtime.updatesigmask_entry:
	// succ:  l00000000000410B8
l00000000000410B8:
	sp = fp
	sp = sp + -72
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	lo = r3 / sp
	hi = r3 % sp
	r1 = (word64) Mem0[sp + 0x0000000000000050:uint32]
runtime.updatesigmask_exit:


// runtime.unblocksig
// Return size: 0
void runtime.unblocksig()
runtime.unblocksig_entry:
	// succ:  l0000000000041158
l0000000000041158:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000041158_ds_t
	// succ:  l0000000000041158_ds_f l0000000000041158_ds_t
l0000000000041158_ds_f:
	goto l0000000000041168
	// succ:  l0000000000041168
l0000000000041158_ds_t:
	goto l000000000004117C
	// succ:  l000000000004117C
l0000000000041168:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000041158
	// succ:  l0000000000041158
l000000000004117C:
	sp = sp + -56
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	lo = r5 / sp
	hi = r5 % sp
	r4 = (word64) Mem0[sp + 0x0000000000000040:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.unblocksig_exit:


// runtime.cputicks
// Return size: 0
void runtime.cputicks()
runtime.cputicks_entry:
	// succ:  l00000000000412B8
l00000000000412B8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	call runtime.nanotime (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000008:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006960:uint32]
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000018:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cputicks_exit
runtime.cputicks_exit:


// runtime.panicCheckMalloc
// Return size: 0
void runtime.panicCheckMalloc()
runtime.panicCheckMalloc_entry:
	// succ:  l00000000000412F8
l00000000000412F8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000412F8_ds_t
	// succ:  l00000000000412F8_ds_f l00000000000412F8_ds_t
l00000000000412F8_ds_f:
	goto l0000000000041308
	// succ:  l0000000000041308
l00000000000412F8_ds_t:
	goto l000000000004131C
	// succ:  l000000000004131C
l0000000000041308:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000412F8
	// succ:  l00000000000412F8
l000000000004131C:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r3 = r30
	branch r30 == 0x0000000000000000 l000000000004131C_ds_t
	// succ:  l000000000004131C_ds_f l000000000004131C_ds_t
l000000000004131C_ds_f:
	goto l0000000000041330
	// succ:  l0000000000041330
l000000000004131C_ds_t:
	goto l00000000000413A8
	// succ:  l00000000000413A8
l0000000000041330:
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	branch r1 == 0x0000000000000000 l0000000000041330_ds_t
	// succ:  l0000000000041330_ds_f l0000000000041330_ds_t
l0000000000041330_ds_f:
	goto l000000000004133C
	// succ:  l000000000004133C
l0000000000041330_ds_t:
	goto l00000000000413A8
	// succ:  l00000000000413A8
l000000000004133C:
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000C4:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l000000000004133C_ds_t
	// succ:  l000000000004133C_ds_f l000000000004133C_ds_t
l000000000004133C_ds_f:
	goto l0000000000041358
	// succ:  l0000000000041358
l000000000004133C_ds_t:
	goto l00000000000413A8
	// succ:  l00000000000413A8
l0000000000041358:
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000020:word64] = r1
	call runtime.assertI2T (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.throw (retsize: 0;)
l00000000000413A8:
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.panicCheckMalloc_exit
runtime.panicCheckMalloc_exit:


// runtime.panicindex
// Return size: 0
void runtime.panicindex()
runtime.panicindex_entry:
	// succ:  l00000000000413B8
l00000000000413B8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000413B8_ds_t
	// succ:  l00000000000413B8_ds_f l00000000000413B8_ds_t
l00000000000413B8_ds_f:
	goto l00000000000413C8
	// succ:  l00000000000413C8
l00000000000413B8_ds_t:
	goto l00000000000413DC
	// succ:  l00000000000413DC
l00000000000413C8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000413B8
	// succ:  l00000000000413B8
l00000000000413DC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001100:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001108:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.panicCheckMalloc (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001100:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001108:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.convI2E (retsize: 0;)
	lo = r2 / sp
	hi = r2 % sp
	lo = r1 / sp
	hi = r1 % sp
	r2 = r2 + -8
	r1 = r1 + -8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	call runtime.gopanic (retsize: 0;)
runtime.panicindex_exit:


// runtime.panicslice
// Return size: 0
void runtime.panicslice()
runtime.panicslice_entry:
	// succ:  l0000000000041480
l0000000000041480:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000041480_ds_t
	// succ:  l0000000000041480_ds_f l0000000000041480_ds_t
l0000000000041480_ds_f:
	goto l0000000000041490
	// succ:  l0000000000041490
l0000000000041480_ds_t:
	goto l00000000000414A4
	// succ:  l00000000000414A4
l0000000000041490:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000041480
	// succ:  l0000000000041480
l00000000000414A4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001130:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001138:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.panicCheckMalloc (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001130:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001138:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.convI2E (retsize: 0;)
	lo = r2 / sp
	hi = r2 % sp
	lo = r1 / sp
	hi = r1 % sp
	r2 = r2 + -8
	r1 = r1 + -8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	call runtime.gopanic (retsize: 0;)
runtime.panicslice_exit:


// runtime.panicdivide
// Return size: 0
void runtime.panicdivide()
runtime.panicdivide_entry:
	// succ:  l0000000000041548
l0000000000041548:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000041548_ds_t
	// succ:  l0000000000041548_ds_f l0000000000041548_ds_t
l0000000000041548_ds_f:
	goto l0000000000041558
	// succ:  l0000000000041558
l0000000000041548_ds_t:
	goto l000000000004156C
	// succ:  l000000000004156C
l0000000000041558:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000041548
	// succ:  l0000000000041548
l000000000004156C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010E0:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010E8:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.panicCheckMalloc (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010E0:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010E8:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.convI2E (retsize: 0;)
	lo = r2 / sp
	hi = r2 % sp
	lo = r1 / sp
	hi = r1 % sp
	r2 = r2 + -8
	r1 = r1 + -8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	call runtime.gopanic (retsize: 0;)
runtime.panicdivide_exit:


// runtime.panicoverflow
// Return size: 0
void runtime.panicoverflow()
runtime.panicoverflow_entry:
	// succ:  l0000000000041610
l0000000000041610:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000041610_ds_t
	// succ:  l0000000000041610_ds_f l0000000000041610_ds_t
l0000000000041610_ds_f:
	goto l0000000000041620
	// succ:  l0000000000041620
l0000000000041610_ds_t:
	goto l0000000000041634
	// succ:  l0000000000041634
l0000000000041620:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000041610
	// succ:  l0000000000041610
l0000000000041634:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001120:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001128:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.panicCheckMalloc (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001120:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001128:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.convI2E (retsize: 0;)
	lo = r2 / sp
	hi = r2 % sp
	lo = r1 / sp
	hi = r1 % sp
	r2 = r2 + -8
	r1 = r1 + -8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	call runtime.gopanic (retsize: 0;)
runtime.panicoverflow_exit:


// runtime.panicfloat
// Return size: 0
void runtime.panicfloat()
runtime.panicfloat_entry:
	// succ:  l00000000000416D8
l00000000000416D8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000416D8_ds_t
	// succ:  l00000000000416D8_ds_f l00000000000416D8_ds_t
l00000000000416D8_ds_f:
	goto l00000000000416E8
	// succ:  l00000000000416E8
l00000000000416D8_ds_t:
	goto l00000000000416FC
	// succ:  l00000000000416FC
l00000000000416E8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000416D8
	// succ:  l00000000000416D8
l00000000000416FC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010F0:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010F8:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.panicCheckMalloc (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010F0:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010F8:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.convI2E (retsize: 0;)
	lo = r2 / sp
	hi = r2 % sp
	lo = r1 / sp
	hi = r1 % sp
	r2 = r2 + -8
	r1 = r1 + -8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	call runtime.gopanic (retsize: 0;)
runtime.panicfloat_exit:


// runtime.panicmem
// Return size: 0
void runtime.panicmem()
runtime.panicmem_entry:
	// succ:  l00000000000417A0
l00000000000417A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000417A0_ds_t
	// succ:  l00000000000417A0_ds_f l00000000000417A0_ds_t
l00000000000417A0_ds_f:
	goto l00000000000417B0
	// succ:  l00000000000417B0
l00000000000417A0_ds_t:
	goto l00000000000417C4
	// succ:  l00000000000417C4
l00000000000417B0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000417A0
	// succ:  l00000000000417A0
l00000000000417C4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001110:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001118:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.panicCheckMalloc (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001110:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001118:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.convI2E (retsize: 0;)
	lo = r2 / sp
	hi = r2 % sp
	lo = r1 / sp
	hi = r1 % sp
	r2 = r2 + -8
	r1 = r1 + -8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	call runtime.gopanic (retsize: 0;)
runtime.panicmem_exit:


// runtime.throwinit
// Return size: 0
void runtime.throwinit()
runtime.throwinit_entry:
	// succ:  l0000000000041868
l0000000000041868:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000041868_ds_t
	// succ:  l0000000000041868_ds_f l0000000000041868_ds_t
l0000000000041868_ds_f:
	goto l0000000000041878
	// succ:  l0000000000041878
l0000000000041868_ds_t:
	goto l000000000004188C
	// succ:  l000000000004188C
l0000000000041878:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000041868
	// succ:  l0000000000041868
l000000000004188C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.throwinit_exit:


// runtime.deferproc
// Return size: 0
void runtime.deferproc()
runtime.deferproc_entry:
	// succ:  l00000000000418C8
l00000000000418C8:
	sp = fp
	sp = sp + -88
	Mem0[sp:word64] = ra
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A0:word64]
	r2 = r30
	branch r1 == r30 l00000000000418C8_ds_t
	// succ:  l00000000000418C8_ds_f l00000000000418C8_ds_t
l00000000000418C8_ds_f:
	goto l00000000000418E4
	// succ:  l00000000000418E4
l00000000000418C8_ds_t:
	goto l0000000000041904
	// succ:  l0000000000041904
l00000000000418E4:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000041904:
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.getcallersp (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	lo = r1 / sp
	hi = r1 % sp
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000020:word64] = r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.getcallerpc (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000010:word64]
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	lo = r2 / sp
	hi = r2 % sp
	Mem0[r3 + 0x0000000000000008:word64] = r2
	lo = r2 / sp
	hi = r2 % sp
	Mem0[r3 + 0x0000000000000010:word64] = r2
	Mem0[r3 + 0x0000000000000018:word64] = r4
	r2 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[r3 + 0x0000000000000020:word64] = r2
	r2 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[r3 + 0x0000000000000028:word64] = r2
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	call runtime.return0 (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 88
	call r4 (retsize: 0;)
	return
	// succ:  runtime.deferproc_exit
runtime.deferproc_exit:


// runtime.testdefersizes
// Return size: 0
void runtime.testdefersizes()
runtime.testdefersizes_entry:
	// succ:  l00000000000419A0
l00000000000419A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000419A0_ds_t
	// succ:  l00000000000419A0_ds_f l00000000000419A0_ds_t
l00000000000419A0_ds_f:
	goto l00000000000419B0
	// succ:  l00000000000419B0
l00000000000419A0_ds_t:
	goto l00000000000419C4
	// succ:  l00000000000419C4
l00000000000419B0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000419A0
	// succ:  l00000000000419A0
l00000000000419C4:
	sp = sp + -72
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000030:word32] = (word32) 0x0000000000000000
	Mem0[sp + 0x0000000000000034:word32] = (word32) 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word32] = (word32) 0x0000000000000000
	Mem0[sp + 0x000000000000003C:word32] = (word32) 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word32] = (word32) 0x0000000000000000
	r4 = 0x0000000000000000
	lo = r5 / 0x0000000000000000
	hi = r5 % 0x0000000000000000
	r23 = (word64) (r4 < r5)
	branch r23 == 0x0000000000000000 l00000000000419C4_ds_t
	// succ:  l00000000000419C4_ds_f l00000000000419C4_ds_t
l00000000000419C4_ds_f:
	goto l00000000000419F4
	// succ:  l00000000000419F4
l00000000000419C4_ds_t:
	goto l0000000000041A44
	// succ:  l0000000000041A44
l00000000000419F4:
	lo = r1 / sp
	hi = r1 % sp
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r4
	r23 = (word64) (r4 <u r3)
	branch r23 != 0x0000000000000000 l00000000000419F4_ds_t
	// succ:  l00000000000419F4_ds_f l00000000000419F4_ds_t
l00000000000419F4_ds_f:
	goto l0000000000041A0C
	// succ:  l0000000000041A0C
l00000000000419F4_ds_t:
	goto l0000000000041A18
	// succ:  l0000000000041A18
l0000000000041A0C:
	call runtime.panicindex (retsize: 0;)
l0000000000041A18:
l0000000000041A44:
	r6 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r6)
	branch r23 != 0x0000000000000000 l0000000000041A44_ds_t
	// succ:  l0000000000041A44_ds_f l0000000000041A44_ds_t
l0000000000041A44_ds_f:
	goto l0000000000041A54
	// succ:  l0000000000041A54
l0000000000041A44_ds_t:
	goto l0000000000041BCC
	// succ:  l0000000000041BCC
l0000000000041A54:
	r2 = 0x0000000000000000
	r5 = r2
	r1 = r2
l0000000000041BCC:
runtime.testdefersizes_exit:


// runtime.init.2
// Return size: 0
void runtime.init.2()
runtime.init.2_entry:
	// succ:  l0000000000041E30
l0000000000041E30:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000041E30_ds_t
	// succ:  l0000000000041E30_ds_f l0000000000041E30_ds_t
l0000000000041E30_ds_f:
	goto l0000000000041E40
	// succ:  l0000000000041E40
l0000000000041E30_ds_t:
	goto l0000000000041E54
	// succ:  l0000000000041E54
l0000000000041E40:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000041E30
	// succ:  l0000000000041E30
l0000000000041E54:
	sp = sp + -40
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	r1 = 0x0000000000080000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000018:word64] = r1
	lo = r1 / sp
	hi = r1 % sp
	r1 = Mem0[r1:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r1 != r3 l0000000000041E54_ds_t
	// succ:  l0000000000041E54_ds_f l0000000000041E54_ds_t
l0000000000041E54_ds_f:
	goto l0000000000041E9C
	// succ:  l0000000000041E9C
l0000000000041E54_ds_t:
	goto l0000000000041EB8
	// succ:  l0000000000041EB8
l0000000000041E9C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000010A8:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.init.2_exit
l0000000000041EB8:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.init.2_exit
runtime.init.2_exit:


// runtime.newdefer
// Return size: 0
void runtime.newdefer()
runtime.newdefer_entry:
	// succ:  l0000000000041EE8
l0000000000041EE8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -160
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000041EE8_ds_t
	// succ:  l0000000000041EE8_ds_f l0000000000041EE8_ds_t
l0000000000041EE8_ds_f:
	goto l0000000000041EFC
	// succ:  l0000000000041EFC
l0000000000041EE8_ds_t:
	goto l0000000000041F10
	// succ:  l0000000000041F10
l0000000000041EFC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000041EE8
	// succ:  l0000000000041EE8
l0000000000041F10:
	sp = sp + -160
	Mem0[sp:word64] = ra
	r7 = 0x0000000000000000
	Mem0[sp + 0x0000000000000070:word64] = 0x0000000000000000
	r3 = (word64) Mem0[sp + 0x00000000000000A8:int32]
	r23 = (word64) (0x0000000000000000 <u r3)
	branch r23 != 0x0000000000000000 l0000000000041F10_ds_t
	// succ:  l0000000000041F10_ds_f l0000000000041F10_ds_t
l0000000000041F10_ds_f:
	goto l0000000000041F30
	// succ:  l0000000000041F30
l0000000000041F10_ds_t:
	goto l0000000000042888
	// succ:  l0000000000042888
l0000000000041F30:
	r2 = 0x0000000000000000
	r5 = r2
	r4 = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r6 = r2
	r2 = r6
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000060:word64] = r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r5 <u r2)
	branch r23 == 0x0000000000000000 l0000000000041F30_ds_t
	// succ:  l0000000000041F30_ds_f l0000000000041F30_ds_t
l0000000000041F30_ds_f:
	goto l0000000000041F78
	// succ:  l0000000000041F78
l0000000000041F30_ds_t:
	goto l0000000000042580
	// succ:  l0000000000042580
l0000000000041F78:
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r6 = Mem0[r1 + 0x00000000000000B0:word64]
	Mem0[sp + 0x0000000000000058:word64] = r6
	branch r6 != 0x0000000000000000 l0000000000041F78_ds_t
	// succ:  l0000000000041F78_ds_f l0000000000041F78_ds_t
l0000000000041F78_ds_f:
	goto l0000000000041F8C
	// succ:  l0000000000041F8C
l0000000000041F78_ds_t:
	goto l0000000000041F90
	// succ:  l0000000000041F90
l0000000000041F8C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000041F90
l0000000000041F90:
	lo = r2 / r6
	hi = r2 % r6
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r1 = r5
	r23 = (word64) (r5 <u r3)
	branch r23 != 0x0000000000000000 l0000000000041F90_ds_t
	// succ:  l0000000000041F90_ds_f l0000000000041F90_ds_t
l0000000000041F90_ds_f:
	goto l0000000000041FA8
	// succ:  l0000000000041FA8
l0000000000041F90_ds_t:
	goto l0000000000041FB4
	// succ:  l0000000000041FB4
l0000000000041FA8:
	call runtime.panicindex (retsize: 0;)
l0000000000041FB4:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
l0000000000042580:
	branch r7 != 0x0000000000000000 l0000000000042580_ds_t
	// succ:  l0000000000042580_ds_f l0000000000042580_ds_t
l0000000000042580_ds_f:
	goto l0000000000042588
	// succ:  l0000000000042588
l0000000000042580_ds_t:
	goto l0000000000042668
	// succ:  l0000000000042668
l0000000000042588:
	r3 = (word64) Mem0[sp + 0x00000000000000A8:int32]
	r23 = (word64) (0x0000000000000000 <u r3)
	branch r23 != 0x0000000000000000 l0000000000042588_ds_t
	// succ:  l0000000000042588_ds_f l0000000000042588_ds_t
l0000000000042588_ds_f:
	goto l0000000000042598
	// succ:  l0000000000042598
l0000000000042588_ds_t:
	goto l0000000000042858
	// succ:  l0000000000042858
l0000000000042598:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	goto l000000000004259C
	// succ:  l000000000004259C
l0000000000042598_ds_f:
	goto l00000000000425B4
	// succ:  l00000000000425B4
l0000000000042598_ds_t:
	goto l0000000000042804
	// succ:  l0000000000042804
l000000000004259C:
	r3 = r2
	r1 = r2
	r2 = 0x0000000000008000
	r23 = (word64) (r1 <u r2)
	branch r23 == 0x0000000000000000 l0000000000042598_ds_t
	goto l0000000000042598_ds_f
	// succ:  l0000000000042598_ds_f l0000000000042598_ds_t
l00000000000425B4:
l000000000004263C:
	Mem0[sp + 0x0000000000000008:word64] = r2
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000010A8:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	call runtime.mallocgc (retsize: 0;)
	r7 = Mem0[sp + 0x0000000000000020:word64]
	// succ:  l0000000000042668
l0000000000042668:
	r2 = (word64) Mem0[sp + 0x00000000000000A8:int32]
	Mem0[r7:word32] = (word32) r2
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r5 = Mem0[r1 + 0x00000000000000A0:word64]
	r1 = r7
	Mem0[sp + 0x0000000000000070:word64] = r7
	Mem0[sp + 0x0000000000000068:word64] = r5
	r3 = Mem0[r5 + 0x0000000000000028:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r2 != r4 l0000000000042668_ds_t
	// succ:  l0000000000042668_ds_f l0000000000042668_ds_t
l0000000000042668_ds_f:
	goto l00000000000426A0
	// succ:  l00000000000426A0
l0000000000042668_ds_t:
	goto l0000000000042758
	// succ:  l0000000000042758
l00000000000426A0:
	Mem0[r1 + 0x0000000000000028:word64] = r3
	goto l00000000000426A4
	// succ:  l00000000000426A4
l00000000000426A0_ds_f:
	goto l00000000000426B0
	// succ:  l00000000000426B0
l00000000000426A0_ds_t:
	goto l00000000000426B4
	// succ:  l00000000000426B4
l00000000000426A4:
	r1 = r5
	branch r5 != 0x0000000000000000 l00000000000426A0_ds_t
	goto l00000000000426A0_ds_f
	// succ:  l00000000000426A0_ds_f l00000000000426A0_ds_t
l00000000000426B0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000426B4
l00000000000426B4:
	r2 = r7
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l00000000000426B4_ds_t
	// succ:  l00000000000426B4_ds_f l00000000000426B4_ds_t
l00000000000426B4_ds_f:
	goto l00000000000426D0
	// succ:  l00000000000426D0
l00000000000426B4_ds_t:
	goto l0000000000042738
	// succ:  l0000000000042738
l00000000000426D0:
	Mem0[r1 + 0x0000000000000028:word64] = r2
	goto l00000000000426D4
	// succ:  l00000000000426D4
l00000000000426D0_ds_f:
	goto l0000000000042710
	// succ:  l0000000000042710
l00000000000426D0_ds_t:
	goto l0000000000042724
	// succ:  l0000000000042724
l00000000000426D4:
	r4 = Mem0[sp + 0x0000000000000060:word64]
	r2 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r4 + 0x00000000000000E0:word32] = (word32) r2
	r1 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l00000000000426D0_ds_t
	goto l00000000000426D0_ds_f
	// succ:  l00000000000426D0_ds_f l00000000000426D0_ds_t
l0000000000042710:
	r1 = (word64) Mem0[r30 + 0x00000000000000E8:byte]
	branch r1 == 0x0000000000000000 l0000000000042710_ds_t
	// succ:  l0000000000042710_ds_f l0000000000042710_ds_t
l0000000000042710_ds_f:
	goto l000000000004271C
	// succ:  l000000000004271C
l0000000000042710_ds_t:
	goto l0000000000042724
	// succ:  l0000000000042724
l000000000004271C:
l0000000000042724:
	Mem0[sp + 0x00000000000000B0:word64] = r7
	r4 = Mem0[sp:word64]
	sp = sp + 160
	call r4 (retsize: 0;)
	return
	// succ:  runtime.newdefer_exit
l0000000000042738:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r7
	call runtime.writebarrierptr (retsize: 0;)
	r7 = Mem0[sp + 0x0000000000000070:word64]
	goto l00000000000426D4
	// succ:  l00000000000426D4
l0000000000042758:
	lo = r2 / r7
	hi = r2 % r7
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000068:word64]
	r7 = Mem0[sp + 0x0000000000000070:word64]
	goto l00000000000426A4
	// succ:  l00000000000426A4
l0000000000042804:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r23 = (word64) (r1 <u r3)
	branch r23 == 0x0000000000000000 l0000000000042804_ds_t
	// succ:  l0000000000042804_ds_f l0000000000042804_ds_t
l0000000000042804_ds_f:
	goto l0000000000042818
	// succ:  l0000000000042818
l0000000000042804_ds_t:
	goto l0000000000042824
	// succ:  l0000000000042824
l0000000000042818:
	r2 = r3
	goto l000000000004263C
	// succ:  l000000000004263C
l0000000000042824:
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l0000000000042858:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r2 = r1
	goto l000000000004259C
	// succ:  l000000000004259C
l0000000000042888:
runtime.newdefer_exit:


// runtime.freedefer
// Return size: 0
void runtime.freedefer()
runtime.freedefer_entry:
	// succ:  l00000000000428C0
l00000000000428C0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -160
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000428C0_ds_t
	// succ:  l00000000000428C0_ds_f l00000000000428C0_ds_t
l00000000000428C0_ds_f:
	goto l00000000000428D4
	// succ:  l00000000000428D4
l00000000000428C0_ds_t:
	goto l00000000000428E8
	// succ:  l00000000000428E8
l00000000000428D4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000428C0
	// succ:  l00000000000428C0
l00000000000428E8:
	sp = sp + -160
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x00000000000000A8:word64]
	r1 = Mem0[r1 + 0x0000000000000020:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l00000000000428E8_ds_t
	// succ:  l00000000000428E8_ds_f l00000000000428E8_ds_t
l00000000000428E8_ds_f:
	goto l0000000000042904
	// succ:  l0000000000042904
l00000000000428E8_ds_t:
	goto l000000000004290C
	// succ:  l000000000004290C
l0000000000042904:
	call runtime.freedeferpanic (retsize: 0;)
l000000000004290C:
	r1 = Mem0[sp + 0x00000000000000A8:word64]
	r1 = Mem0[r1 + 0x0000000000000018:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000004290C_ds_t
	// succ:  l000000000004290C_ds_f l000000000004290C_ds_t
l000000000004290C_ds_f:
	goto l0000000000042920
	// succ:  l0000000000042920
l000000000004290C_ds_t:
	goto l0000000000042928
	// succ:  l0000000000042928
l0000000000042920:
	call runtime.freedeferfn (retsize: 0;)
l0000000000042928:
	r1 = Mem0[sp + 0x00000000000000A8:word64]
	r3 = (word64) Mem0[r1:int32]
	r23 = (word64) (0x0000000000000000 <u r3)
	branch r23 != 0x0000000000000000 l0000000000042928_ds_t
	// succ:  l0000000000042928_ds_f l0000000000042928_ds_t
l0000000000042928_ds_f:
	goto l000000000004293C
	// succ:  l000000000004293C
l0000000000042928_ds_t:
	goto l0000000000043070
	// succ:  l0000000000043070
l000000000004293C:
	r2 = 0x0000000000000000
	r5 = r2
	r1 = r2
l0000000000043070:
runtime.freedefer_exit:


// runtime.freedeferpanic
// Return size: 0
void runtime.freedeferpanic()
runtime.freedeferpanic_entry:
	// succ:  l00000000000430A8
l00000000000430A8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000430A8_ds_t
	// succ:  l00000000000430A8_ds_f l00000000000430A8_ds_t
l00000000000430A8_ds_f:
	goto l00000000000430B8
	// succ:  l00000000000430B8
l00000000000430A8_ds_t:
	goto l00000000000430CC
	// succ:  l00000000000430CC
l00000000000430B8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000430A8
	// succ:  l00000000000430A8
l00000000000430CC:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.freedeferpanic_exit:


// runtime.freedeferfn
// Return size: 0
void runtime.freedeferfn()
runtime.freedeferfn_entry:
	// succ:  l0000000000043108
l0000000000043108:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000043108_ds_t
	// succ:  l0000000000043108_ds_f l0000000000043108_ds_t
l0000000000043108_ds_f:
	goto l0000000000043118
	// succ:  l0000000000043118
l0000000000043108_ds_t:
	goto l000000000004312C
	// succ:  l000000000004312C
l0000000000043118:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000043108
	// succ:  l0000000000043108
l000000000004312C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.freedeferfn_exit:


// runtime.deferreturn
// Return size: 0
void runtime.deferreturn()
runtime.deferreturn_entry:
	// succ:  l0000000000043168
l0000000000043168:
	sp = fp
	sp = sp + -88
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000028:word64] = r30
	r3 = Mem0[r30 + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000038:word64] = r3
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000043168_ds_t
	// succ:  l0000000000043168_ds_f l0000000000043168_ds_t
l0000000000043168_ds_f:
	goto l0000000000043188
	// succ:  l0000000000043188
l0000000000043168_ds_t:
	goto l0000000000043198
	// succ:  l0000000000043198
l0000000000043188:
	r4 = Mem0[sp:word64]
	sp = sp + 88
	call r4 (retsize: 0;)
	return
	// succ:  runtime.deferreturn_exit
l0000000000043198:
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.getcallersp (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000038:word64]
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r1 = Mem0[r6 + 0x0000000000000008:word64]
	branch r1 == r3 l0000000000043198_ds_t
	// succ:  l0000000000043198_ds_f l0000000000043198_ds_t
l0000000000043198_ds_f:
	goto l00000000000431BC
	// succ:  l00000000000431BC
l0000000000043198_ds_t:
	goto l00000000000431CC
	// succ:  l00000000000431CC
l00000000000431BC:
	r4 = Mem0[sp:word64]
	sp = sp + 88
	call r4 (retsize: 0;)
	return
	// succ:  runtime.deferreturn_exit
l00000000000431CC:
	r4 = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r1 / r6
	hi = r1 % r6
	r2 = r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r2
	r1 = r6
	r2 = (word64) Mem0[r6:int32]
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.memmove (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[r5 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000030:word64] = r2
	Mem0[r5 + 0x0000000000000018:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000028:word64]
	branch r1 != 0x0000000000000000 l00000000000431CC_ds_t
	// succ:  l00000000000431CC_ds_f l00000000000431CC_ds_t
l00000000000431CC_ds_f:
	goto l0000000000043244
	// succ:  l0000000000043244
l00000000000431CC_ds_t:
	goto l0000000000043248
	// succ:  l0000000000043248
l0000000000043244:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000043248
l0000000000043248:
	r3 = Mem0[r5 + 0x0000000000000028:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r2 != r4 l0000000000043248_ds_t
	// succ:  l0000000000043248_ds_f l0000000000043248_ds_t
l0000000000043248_ds_f:
	goto l0000000000043264
	// succ:  l0000000000043264
l0000000000043248_ds_t:
	goto l0000000000043318
	// succ:  l0000000000043318
l0000000000043264:
	Mem0[r1 + 0x0000000000000028:word64] = r3
	goto l0000000000043268
	// succ:  l0000000000043268
l0000000000043264_ds_f:
	goto l00000000000432D4
	// succ:  l00000000000432D4
l0000000000043264_ds_t:
	goto l00000000000432E8
	// succ:  l00000000000432E8
l0000000000043268:
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	r2 = r5
	Mem0[r3 + 0x0000000000000008:word64] = r5
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r5 = r30
	r2 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r4 + 0x00000000000000E0:word32] = (word32) r2
	r1 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000043264_ds_t
	goto l0000000000043264_ds_f
	// succ:  l0000000000043264_ds_f l0000000000043264_ds_t
l00000000000432D4:
	r1 = (word64) Mem0[r5 + 0x00000000000000E8:byte]
	branch r1 == 0x0000000000000000 l00000000000432D4_ds_t
	// succ:  l00000000000432D4_ds_f l00000000000432D4_ds_t
l00000000000432D4_ds_f:
	goto l00000000000432E0
	// succ:  l00000000000432E0
l00000000000432D4_ds_t:
	goto l00000000000432E8
	// succ:  l00000000000432E8
l00000000000432E0:
l00000000000432E8:
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000040:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.jmpdefer (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 88
	call r4 (retsize: 0;)
	return
	// succ:  runtime.deferreturn_exit
l0000000000043318:
	lo = r2 / r1
	hi = r2 % r1
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000038:word64]
	goto l0000000000043268
	// succ:  l0000000000043268
runtime.deferreturn_exit:


// runtime.preprintpanics
// Return size: 0
void runtime.preprintpanics()
runtime.preprintpanics_entry:
	// succ:  l0000000000043338
l0000000000043338:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000043338_ds_t
	// succ:  l0000000000043338_ds_f l0000000000043338_ds_t
l0000000000043338_ds_f:
	goto l0000000000043348
	// succ:  l0000000000043348
l0000000000043338_ds_t:
	goto l000000000004335C
	// succ:  l000000000004335C
l0000000000043348:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000043338
	// succ:  l0000000000043338
l000000000004335C:
	sp = sp + -112
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000078:word64]
	branch r1 == 0x0000000000000000 l000000000004335C_ds_t
	// succ:  l000000000004335C_ds_f l000000000004335C_ds_t
l000000000004335C_ds_f:
	goto l0000000000043378
	// succ:  l0000000000043378
l000000000004335C_ds_t:
	goto l00000000000433B0
	// succ:  l00000000000433B0
l0000000000043378:
	r1 = Mem0[sp + 0x0000000000000078:word64]
	branch r1 != 0x0000000000000000 l0000000000043378_ds_t
	// succ:  l0000000000043378_ds_f l0000000000043378_ds_t
l0000000000043378_ds_f:
	goto l0000000000043384
	// succ:  l0000000000043384
l0000000000043378_ds_t:
	goto l0000000000043388
	// succ:  l0000000000043388
l0000000000043384:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000043388
l0000000000043388:
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r4 = Mem0[r1 + 0x0000000000000010:word64]
	branch r3 != 0x0000000000000000 l0000000000043388_ds_t
	// succ:  l0000000000043388_ds_f l0000000000043388_ds_t
l0000000000043388_ds_f:
	goto l0000000000043398
	// succ:  l0000000000043398
l0000000000043388_ds_t:
	goto l00000000000433C0
	// succ:  l00000000000433C0
l0000000000043398:
	r1 = Mem0[sp + 0x0000000000000078:word64]
	r2 = Mem0[r1 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000078:word64] = r2
	r1 = Mem0[sp + 0x0000000000000078:word64]
	branch r1 != 0x0000000000000000 l0000000000043398_ds_t
	// succ:  l0000000000043398_ds_f l0000000000043398_ds_t
l0000000000043398_ds_f:
	goto l00000000000433B0
	// succ:  l00000000000433B0
l0000000000043398_ds_t:
	goto l0000000000043378
	// succ:  l0000000000043378
l00000000000433B0:
	r4 = Mem0[sp:word64]
	sp = sp + 112
	call r4 (retsize: 0;)
	return
	r4 = Mem0[sp:word64]
	sp = sp + 112
	call r4 (retsize: 0;)
	return
	// succ:  runtime.preprintpanics_exit runtime.preprintpanics_exit
l00000000000433C0:
	r2 = (word64) Mem0[r3 + 0x0000000000000010:uint32]
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000050:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	Mem0[sp + 0x0000000000000058:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000020:word64] = r1
	call runtime.assertE2I2 (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l00000000000433C0_ds_t
	// succ:  l00000000000433C0_ds_f l00000000000433C0_ds_t
l00000000000433C0_ds_f:
	goto l0000000000043410
	// succ:  l0000000000043410
l00000000000433C0_ds_t:
	goto l00000000000434C4
	// succ:  l00000000000434C4
l0000000000043410:
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r1 = Mem0[r1 + 0x0000000000000020:word64]
	call r1 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000060:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000068:word64] = r1
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	call runtime.convT2E (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r2 = Mem0[sp + 0x0000000000000028:word64]
	r1 = Mem0[sp + 0x0000000000000078:word64]
	branch r1 != 0x0000000000000000 l0000000000043410_ds_t
	// succ:  l0000000000043410_ds_f l0000000000043410_ds_t
l0000000000043410_ds_f:
	goto l0000000000043474
	// succ:  l0000000000043474
l0000000000043410_ds_t:
	goto l0000000000043478
	// succ:  l0000000000043478
l0000000000043474:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000043478
l0000000000043478:
	Mem0[sp + 0x0000000000000050:word64] = r4
	Mem0[r1 + 0x0000000000000008:word64] = r4
	Mem0[sp + 0x0000000000000058:word64] = r2
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000043478_ds_t
	// succ:  l0000000000043478_ds_f l0000000000043478_ds_t
l0000000000043478_ds_f:
	goto l000000000004349C
	// succ:  l000000000004349C
l0000000000043478_ds_t:
	goto l00000000000434A8
	// succ:  l00000000000434A8
l000000000004349C:
	Mem0[r1 + 0x0000000000000010:word64] = r2
	goto l0000000000043398
	// succ:  l0000000000043398
l00000000000434A8:
	lo = r3 / r1
	hi = r3 % r1
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	goto l0000000000043398
	// succ:  l0000000000043398
l00000000000434C4:
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000020:word64] = r1
	call runtime.assertE2I2 (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l00000000000434C4_ds_t
	// succ:  l00000000000434C4_ds_f l00000000000434C4_ds_t
l00000000000434C4_ds_f:
	goto l0000000000043510
	// succ:  l0000000000043510
l00000000000434C4_ds_t:
	goto l0000000000043398
	// succ:  l0000000000043398
l0000000000043510:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r1 = Mem0[r1 + 0x0000000000000020:word64]
	call r1 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000060:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000068:word64] = r1
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	call runtime.convT2E (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r2 = Mem0[sp + 0x0000000000000028:word64]
	r1 = Mem0[sp + 0x0000000000000078:word64]
	branch r1 != 0x0000000000000000 l0000000000043510_ds_t
	// succ:  l0000000000043510_ds_f l0000000000043510_ds_t
l0000000000043510_ds_f:
	goto l0000000000043574
	// succ:  l0000000000043574
l0000000000043510_ds_t:
	goto l0000000000043578
	// succ:  l0000000000043578
l0000000000043574:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000043578
l0000000000043578:
	Mem0[sp + 0x0000000000000050:word64] = r4
	Mem0[r1 + 0x0000000000000008:word64] = r4
	Mem0[sp + 0x0000000000000058:word64] = r2
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000043578_ds_t
	// succ:  l0000000000043578_ds_f l0000000000043578_ds_t
l0000000000043578_ds_f:
	goto l000000000004359C
	// succ:  l000000000004359C
l0000000000043578_ds_t:
	goto l00000000000435A8
	// succ:  l00000000000435A8
l000000000004359C:
	Mem0[r1 + 0x0000000000000010:word64] = r2
	goto l0000000000043398
	// succ:  l0000000000043398
l00000000000435A8:
	lo = r3 / r1
	hi = r3 % r1
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	goto l0000000000043398
	// succ:  l0000000000043398
runtime.preprintpanics_exit:


// runtime.printpanics
// Return size: 0
void runtime.printpanics()
runtime.printpanics_entry:
	// succ:  l00000000000435C8
l00000000000435C8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000435C8_ds_t
	// succ:  l00000000000435C8_ds_f l00000000000435C8_ds_t
l00000000000435C8_ds_f:
	goto l00000000000435D8
	// succ:  l00000000000435D8
l00000000000435C8_ds_t:
	goto l00000000000435EC
	// succ:  l00000000000435EC
l00000000000435D8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000435C8
	// succ:  l00000000000435C8
l00000000000435EC:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[r3 + 0x0000000000000018:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l00000000000435EC_ds_t
	// succ:  l00000000000435EC_ds_f l00000000000435EC_ds_t
l00000000000435EC_ds_f:
	goto l0000000000043608
	// succ:  l0000000000043608
l00000000000435EC_ds_t:
	goto l000000000004364C
	// succ:  l000000000004364C
l0000000000043608:
	r1 = r3
	r2 = Mem0[r3 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.printpanics (retsize: 0;)
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004364C:
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.printpanics_exit:


// runtime.gopanic
// Return size: 0
void runtime.gopanic()
runtime.gopanic_entry:
	// succ:  l0000000000043748
l0000000000043748:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000043748_ds_t
	// succ:  l0000000000043748_ds_f l0000000000043748_ds_t
l0000000000043748_ds_f:
	goto l0000000000043758
	// succ:  l0000000000043758
l0000000000043748_ds_t:
	goto l000000000004376C
	// succ:  l000000000004376C
l0000000000043758:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000043748
	// succ:  l0000000000043748
l000000000004376C:
	sp = sp + -128
	Mem0[sp:word64] = ra
	r5 = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A0:word64]
	Mem0[sp + 0x0000000000000038:word64] = r30
	r2 = r30
	branch r1 == r30 l000000000004376C_ds_t
	// succ:  l000000000004376C_ds_f l000000000004376C_ds_t
l000000000004376C_ds_f:
	goto l0000000000043790
	// succ:  l0000000000043790
l000000000004376C_ds_t:
	goto l000000000004382C
	// succ:  l000000000004382C
l0000000000043790:
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004382C:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000E4:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l000000000004382C_ds_t
	// succ:  l000000000004382C_ds_f l000000000004382C_ds_t
l000000000004382C_ds_f:
	goto l0000000000043848
	// succ:  l0000000000043848
l000000000004382C_ds_t:
	goto l000000000004389C
	// succ:  l000000000004389C
l0000000000043848:
	r1 = Mem0[r5 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r4 = r2
	r2 = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = 0x0000000000000000
	Mem0[r2 + 0x00000000000000E4:word32] = (word32) r1
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004389C:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000C4:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l000000000004389C_ds_t
	// succ:  l000000000004389C_ds_f l000000000004389C_ds_t
l000000000004389C_ds_f:
	goto l00000000000438B8
	// succ:  l00000000000438B8
l000000000004389C_ds_t:
	goto l0000000000043954
	// succ:  l0000000000043954
l00000000000438B8:
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000043954:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000D8:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000043954_ds_t
	// succ:  l0000000000043954_ds_f l0000000000043954_ds_t
l0000000000043954_ds_f:
	goto l0000000000043968
	// succ:  l0000000000043968
l0000000000043954_ds_t:
	goto l0000000000043AB0
	// succ:  l0000000000043AB0
l0000000000043968:
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000043AB0:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l0000000000043AB0_ds_t
	// succ:  l0000000000043AB0_ds_f l0000000000043AB0_ds_t
l0000000000043AB0_ds_f:
	goto l0000000000043ACC
	// succ:  l0000000000043ACC
l0000000000043AB0_ds_t:
	goto l0000000000043B68
	// succ:  l0000000000043B68
l0000000000043ACC:
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000043B68:
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000060:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000068:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000070:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000078:byte] = (byte) 0x0000000000000000
	Mem0[sp + 0x0000000000000079:byte] = (byte) 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000088:word64]
	Mem0[sp + 0x0000000000000060:word64] = r1
	r1 = Mem0[sp + 0x0000000000000090:word64]
	Mem0[sp + 0x0000000000000068:word64] = r1
	r2 = Mem0[r5 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000070:word64] = r2
	lo = r2 / sp
	hi = r2 % sp
	r2 = r2
	r1 = r5
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000043B68_ds_t
	// succ:  l0000000000043B68_ds_f l0000000000043B68_ds_t
l0000000000043B68_ds_f:
	goto l0000000000043BBC
	// succ:  l0000000000043BBC
l0000000000043B68_ds_t:
	goto l0000000000043F68
	// succ:  l0000000000043F68
l0000000000043BBC:
	Mem0[r1 + 0x0000000000000020:word64] = r2
	goto l0000000000043BC0
	// succ:  l0000000000043BC0
l0000000000043BBC_ds_f:
	goto l0000000000043BCC
	// succ:  l0000000000043BCC
l0000000000043BBC_ds_t:
	goto l0000000000043C2C
	// succ:  l0000000000043C2C
l0000000000043BC0:
	r6 = Mem0[r5 + 0x0000000000000028:word64]
	branch r6 != 0x0000000000000000 l0000000000043BBC_ds_t
	goto l0000000000043BBC_ds_f
	// succ:  l0000000000043BBC_ds_f l0000000000043BBC_ds_t
l0000000000043BCC:
	r1 = r5
	r2 = Mem0[r5 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.preprintpanics (retsize: 0;)
	call runtime.startpanic (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[r1 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.printpanics (retsize: 0;)
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	call runtime.dopanic (retsize: 0;)
	branch 0x0000000000000000 != 0x0000000000000000 l0000000000043BCC_ds_t
	// succ:  l0000000000043BCC_ds_f l0000000000043BCC_ds_t
l0000000000043BCC_ds_f:
	goto l0000000000043C14
	// succ:  l0000000000043C14
l0000000000043BCC_ds_t:
	goto l0000000000043C18
	// succ:  l0000000000043C18
l0000000000043C14:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000043C18
l0000000000043C18:
	Mem0[r0:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 128
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gopanic_exit
l0000000000043C2C:
	r1 = (word64) Mem0[r6 + 0x0000000000000004:byte]
	branch r1 == 0x0000000000000000 l0000000000043C2C_ds_t
	// succ:  l0000000000043C2C_ds_f l0000000000043C2C_ds_t
l0000000000043C2C_ds_f:
	goto l0000000000043C38
	// succ:  l0000000000043C38
l0000000000043C2C_ds_t:
	goto l0000000000043CCC
	// succ:  l0000000000043CCC
l0000000000043C38:
	r1 = Mem0[r6 + 0x0000000000000020:word64]
	branch r1 == 0x0000000000000000 l0000000000043C38_ds_t
	// succ:  l0000000000043C38_ds_f l0000000000043C38_ds_t
l0000000000043C38_ds_f:
	goto l0000000000043C44
	// succ:  l0000000000043C44
l0000000000043C38_ds_t:
	goto l0000000000043C54
	// succ:  l0000000000043C54
l0000000000043C44:
	r2 = Mem0[r6 + 0x0000000000000020:word64]
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[r2 + 0x0000000000000021:byte] = (byte) r1
	// succ:  l0000000000043C54
l0000000000043C54:
	Mem0[r6 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[r6 + 0x0000000000000018:word64] = 0x0000000000000000
	r1 = r5
	branch r5 != 0x0000000000000000 l0000000000043C54_ds_t
	// succ:  l0000000000043C54_ds_f l0000000000043C54_ds_t
l0000000000043C54_ds_f:
	goto l0000000000043C68
	// succ:  l0000000000043C68
l0000000000043C54_ds_t:
	goto l0000000000043C6C
	// succ:  l0000000000043C6C
l0000000000043C68:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000043C6C
l0000000000043C6C:
	Mem0[sp + 0x0000000000000040:word64] = r6
	r3 = Mem0[r6 + 0x0000000000000028:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r2 != r4 l0000000000043C6C_ds_t
	// succ:  l0000000000043C6C_ds_f l0000000000043C6C_ds_t
l0000000000043C6C_ds_f:
	goto l0000000000043C8C
	// succ:  l0000000000043C8C
l0000000000043C6C_ds_t:
	goto l0000000000043CAC
	// succ:  l0000000000043CAC
l0000000000043C8C:
	Mem0[r1 + 0x0000000000000028:word64] = r3
	// succ:  l0000000000043C90
l0000000000043C90:
	r1 = r6
	Mem0[sp + 0x0000000000000008:word64] = r6
	call runtime.freedefer (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000038:word64]
	goto l0000000000043BC0
	// succ:  l0000000000043BC0
l0000000000043CAC:
	lo = r2 / r5
	hi = r2 % r5
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.writebarrierptr (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000040:word64]
	goto l0000000000043C90
	// succ:  l0000000000043C90
l0000000000043CCC:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	Mem0[r6 + 0x0000000000000004:byte] = (byte) r2
	lo = r2 / sp
	hi = r2 % sp
	r2 = r2
	r1 = r6
	Mem0[sp + 0x0000000000000040:word64] = r6
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000043CCC_ds_t
	// succ:  l0000000000043CCC_ds_f l0000000000043CCC_ds_t
l0000000000043CCC_ds_f:
	goto l0000000000043D00
	// succ:  l0000000000043D00
l0000000000043CCC_ds_t:
	goto l0000000000043F4C
	// succ:  l0000000000043F4C
l0000000000043D00:
	Mem0[r1 + 0x0000000000000020:word64] = r2
	// succ:  l0000000000043D04
l0000000000043D04:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	call runtime.getargp (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000040:word64]
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
l0000000000043F4C:
	lo = r3 / r6
	hi = r3 % r6
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	goto l0000000000043D04
	// succ:  l0000000000043D04
l0000000000043F68:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000038:word64]
	goto l0000000000043BC0
	// succ:  l0000000000043BC0
runtime.gopanic_exit:


// runtime.getargp
// Return size: 0
void runtime.getargp()
runtime.getargp_entry:
	// succ:  l0000000000043F88
l0000000000043F88:
	sp = fp
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r2 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 < r1)
	branch r23 == 0x0000000000000000 l0000000000043F88_ds_t
	// succ:  l0000000000043F88_ds_f l0000000000043F88_ds_t
l0000000000043F88_ds_f:
	goto l0000000000043FA4
	// succ:  l0000000000043FA4
l0000000000043F88_ds_t:
	goto l0000000000043FCC
	// succ:  l0000000000043FCC
l0000000000043FA4:
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.getcallersp (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.getargp_exit
l0000000000043FCC:
	lo = r1 / sp
	hi = r1 % sp
	r1 = r1
	Mem0[sp + 0x0000000000000028:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.getargp_exit
runtime.getargp_exit:


// runtime.startpanic
// Return size: 0
void runtime.startpanic()
runtime.startpanic_entry:
	// succ:  l0000000000043FE8
l0000000000043FE8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.systemstack (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.startpanic_exit
runtime.startpanic_exit:


// runtime.dopanic
// Return size: 0
void runtime.dopanic()
runtime.dopanic_entry:
	// succ:  l0000000000044018
l0000000000044018:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = ra
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.getcallerpc (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.getcallersp (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r4 = r30
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	Mem0[r3 + 0x0000000000000008:word64] = r30
	r2 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[r3 + 0x0000000000000010:word64] = r2
	r2 = r5
	Mem0[r3 + 0x0000000000000018:word64] = r5
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	branch 0x0000000000000000 != 0x0000000000000000 l0000000000044018_ds_t
	// succ:  l0000000000044018_ds_f l0000000000044018_ds_t
l0000000000044018_ds_f:
	goto l0000000000044090
	// succ:  l0000000000044090
l0000000000044018_ds_t:
	goto l0000000000044094
	// succ:  l0000000000044094
l0000000000044090:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000044094
l0000000000044094:
	Mem0[r0:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 64
	call r4 (retsize: 0;)
	return
	// succ:  runtime.dopanic_exit
runtime.dopanic_exit:


// runtime.throw
// Return size: 0
void runtime.throw()
runtime.throw_entry:
	// succ:  l00000000000440A8
l00000000000440A8:
	sp = fp
	sp = sp + -24
	Mem0[sp:word64] = ra
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.throw_exit:


// runtime.recovery
// Return size: 0
void runtime.recovery()
runtime.recovery_entry:
	// succ:  l0000000000044180
l0000000000044180:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000044180_ds_t
	// succ:  l0000000000044180_ds_f l0000000000044180_ds_t
l0000000000044180_ds_f:
	goto l0000000000044190
	// succ:  l0000000000044190
l0000000000044180_ds_t:
	goto l00000000000441A4
	// succ:  l00000000000441A4
l0000000000044190:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000044180
	// succ:  l0000000000044180
l00000000000441A4:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000048:word64]
	r4 = Mem0[r3 + 0x0000000000000130:word64]
	r2 = Mem0[r3 + 0x0000000000000138:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	r2 = 0x0000000000000000
	branch r4 == 0x0000000000000000 l00000000000441A4_ds_t
	// succ:  l00000000000441A4_ds_f l00000000000441A4_ds_t
l00000000000441A4_ds_f:
	goto l00000000000441C8
	// succ:  l00000000000441C8
l00000000000441A4_ds_t:
	goto l00000000000441EC
	// succ:  l00000000000441EC
l00000000000441C8:
	r1 = Mem0[r3:word64]
	r23 = (word64) (r4 <u r1)
	branch r23 != 0x0000000000000000 l00000000000441C8_ds_t
	// succ:  l00000000000441C8_ds_f l00000000000441C8_ds_t
l00000000000441C8_ds_f:
	goto l00000000000441D8
	// succ:  l00000000000441D8
l00000000000441C8_ds_t:
	goto l0000000000044260
	// succ:  l0000000000044260
l00000000000441D8:
	r1 = Mem0[r3 + 0x0000000000000008:word64]
	r2 = r4
	r23 = (word64) (r1 <u r4)
	branch r23 != 0x0000000000000000 l00000000000441D8_ds_t
	// succ:  l00000000000441D8_ds_f l00000000000441D8_ds_t
l00000000000441D8_ds_f:
	goto l00000000000441EC
	// succ:  l00000000000441EC
l00000000000441D8_ds_t:
	goto l0000000000044260
	// succ:  l0000000000044260
l00000000000441EC:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	Mem0[sp + 0x0000000000000010:word64] = r4
	call runtime.gcUnwindBarriers (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000048:word64]
	r2 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[r3 + 0x0000000000000040:word64] = r2
	r2 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[r3 + 0x0000000000000048:word64] = r2
	Mem0[r3 + 0x0000000000000068:word64] = 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	Mem0[r3 + 0x0000000000000060:word64] = r2
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l00000000000441EC_ds_t
	// succ:  l00000000000441EC_ds_f l00000000000441EC_ds_t
l00000000000441EC_ds_f:
	goto l0000000000044234
	// succ:  l0000000000044234
l00000000000441EC_ds_t:
	goto l0000000000044238
	// succ:  l0000000000044238
l0000000000044234:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000044238
l0000000000044238:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.gogo (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 64
	call r4 (retsize: 0;)
	return
	// succ:  runtime.recovery_exit
l0000000000044260:
	Mem0[sp + 0x0000000000000018:word64] = r4
	Mem0[sp + 0x0000000000000038:word64] = r4
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000030:word64] = r2
	r1 = r3
	r2 = Mem0[r3 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000028:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.recovery_exit:


// runtime.startpanic_m
// Return size: 0
void runtime.startpanic_m()
runtime.startpanic_m_entry:
	// succ:  l0000000000044370
l0000000000044370:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000044370_ds_t
	// succ:  l0000000000044370_ds_f l0000000000044370_ds_t
l0000000000044370_ds_f:
	goto l0000000000044380
	// succ:  l0000000000044380
l0000000000044370_ds_t:
	goto l0000000000044394
	// succ:  l0000000000044394
l0000000000044380:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000044370
	// succ:  l0000000000044370
l0000000000044394:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r5 = r30
	Mem0[sp + 0x0000000000000020:word64] = r30
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006B40:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000044394_ds_t
	// succ:  l0000000000044394_ds_f l0000000000044394_ds_t
l0000000000044394_ds_f:
	goto l00000000000443BC
	// succ:  l00000000000443BC
l0000000000044394_ds_t:
	goto l000000000004462C
	// succ:  l000000000004462C
l00000000000443BC:
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000044400:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000E8:int32]
	r3 = r1
	r1 = r3
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000044400_ds_t
	// succ:  l0000000000044400_ds_f l0000000000044400_ds_t
l0000000000044400_ds_f:
	goto l0000000000044424
	// succ:  l0000000000044424
l0000000000044400_ds_t:
	goto l000000000004450C
	// succ:  l000000000004450C
l0000000000044424:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[r2 + 0x00000000000000E8:word32] = (word32) r1
	r2 = 0x0000000000000000
	Mem0[r5 + 0x0000000000000118:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000120:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000128:word64] = 0x0000000000000000
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004450C:
	r1 = r3
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000004450C_ds_t
	// succ:  l000000000004450C_ds_f l000000000004450C_ds_t
l000000000004450C_ds_f:
	goto l0000000000044528
	// succ:  l0000000000044528
l000000000004450C_ds_t:
	goto l0000000000044608
	// succ:  l0000000000044608
l0000000000044528:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[r2 + 0x00000000000000E8:word32] = (word32) r1
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000044590:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[r2 + 0x00000000000000E8:word32] = (word32) r1
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000445E4:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.exit (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.startpanic_m_exit
l0000000000044608:
	r1 = r3
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000044608_ds_t
	// succ:  l0000000000044608_ds_f l0000000000044608_ds_t
l0000000000044608_ds_f:
	goto l0000000000044624
	// succ:  l0000000000044624
l0000000000044608_ds_t:
	goto l00000000000445E4
	// succ:  l00000000000445E4
l0000000000044624:
	goto l0000000000044590
	// succ:  l0000000000044590
l000000000004462C:
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000130:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000004462C_ds_t
	// succ:  l000000000004462C_ds_f l000000000004462C_ds_t
l000000000004462C_ds_f:
	goto l0000000000044640
	// succ:  l0000000000044640
l000000000004462C_ds_t:
	goto l0000000000044400
	// succ:  l0000000000044400
l0000000000044640:
	call runtime.allocmcache (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	branch r2 != 0x0000000000000000 l0000000000044640_ds_t
	// succ:  l0000000000044640_ds_f l0000000000044640_ds_t
l0000000000044640_ds_f:
	goto l000000000004465C
	// succ:  l000000000004465C
l0000000000044640_ds_t:
	goto l0000000000044660
	// succ:  l0000000000044660
l000000000004465C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000044660
l0000000000044660:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000044660_ds_t
	// succ:  l0000000000044660_ds_f l0000000000044660_ds_t
l0000000000044660_ds_f:
	goto l0000000000044678
	// succ:  l0000000000044678
l0000000000044660_ds_t:
	goto l0000000000044684
	// succ:  l0000000000044684
l0000000000044678:
	Mem0[r2 + 0x0000000000000130:word64] = r1
	goto l0000000000044400
	// succ:  l0000000000044400
l0000000000044684:
	lo = r3 / r2
	hi = r3 % r2
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000020:word64]
	goto l0000000000044400
	// succ:  l0000000000044400
runtime.startpanic_m_exit:


// runtime.dopanic_m
// Return size: 0
void runtime.dopanic_m()
runtime.dopanic_m_entry:
	// succ:  l00000000000446A8
l00000000000446A8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000446A8_ds_t
	// succ:  l00000000000446A8_ds_f l00000000000446A8_ds_t
l00000000000446A8_ds_f:
	goto l00000000000446B8
	// succ:  l00000000000446B8
l00000000000446A8_ds_t:
	goto l00000000000446CC
	// succ:  l00000000000446CC
l00000000000446B8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000446A8
	// succ:  l00000000000446A8
l00000000000446CC:
	sp = sp + -112
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000078:word64]
	r1 = (word64) Mem0[r5 + 0x0000000000000110:uint32]
runtime.dopanic_m_exit:


// runtime.canpanic
// Return size: 0
void runtime.canpanic()
runtime.canpanic_entry:
	// succ:  l0000000000044BD8
l0000000000044BD8:
	sp = fp
	sp = sp + -24
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r1 = 0x0000000000000000
	r3 = Mem0[r30 + 0x0000000000000030:word64]
	branch r4 == 0x0000000000000000 l0000000000044BD8_ds_t
	// succ:  l0000000000044BD8_ds_f l0000000000044BD8_ds_t
l0000000000044BD8_ds_f:
	goto l0000000000044BF4
	// succ:  l0000000000044BF4
l0000000000044BD8_ds_t:
	goto l0000000000044D3C
	// succ:  l0000000000044D3C
l0000000000044BF4:
	r1 = Mem0[r3 + 0x00000000000000A0:word64]
	branch r1 != r4 l0000000000044BF4_ds_t
	// succ:  l0000000000044BF4_ds_f l0000000000044BF4_ds_t
l0000000000044BF4_ds_f:
	goto l0000000000044C00
	// succ:  l0000000000044C00
l0000000000044BF4_ds_t:
	goto l0000000000044D3C
	// succ:  l0000000000044D3C
l0000000000044C00:
	r1 = (word64) Mem0[r3 + 0x00000000000000E0:int32]
	r2 = (word64) Mem0[r3 + 0x00000000000000E4:int32]
	r1 = r1 - r2
	r1 = r1
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000044C00_ds_t
	// succ:  l0000000000044C00_ds_f l0000000000044C00_ds_t
l0000000000044C00_ds_f:
	goto l0000000000044C24
	// succ:  l0000000000044C24
l0000000000044C00_ds_t:
	goto l0000000000044D24
	// succ:  l0000000000044D24
l0000000000044C24:
	r1 = (word64) Mem0[r3 + 0x00000000000000C4:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000044C24_ds_t
	// succ:  l0000000000044C24_ds_f l0000000000044C24_ds_t
l0000000000044C24_ds_f:
	goto l0000000000044C3C
	// succ:  l0000000000044C3C
l0000000000044C24_ds_t:
	goto l0000000000044D24
	// succ:  l0000000000044D24
l0000000000044C3C:
	r1 = (word64) Mem0[r3 + 0x00000000000000C8:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000044C3C_ds_t
	// succ:  l0000000000044C3C_ds_f l0000000000044C3C_ds_t
l0000000000044C3C_ds_f:
	goto l0000000000044C54
	// succ:  l0000000000044C54
l0000000000044C3C_ds_t:
	goto l0000000000044D24
	// succ:  l0000000000044D24
l0000000000044C54:
	r1 = Mem0[r3 + 0x00000000000000D8:word64]
	branch r1 != 0x0000000000000000 l0000000000044C54_ds_t
	// succ:  l0000000000044C54_ds_f l0000000000044C54_ds_t
l0000000000044C54_ds_f:
	goto l0000000000044C60
	// succ:  l0000000000044C60
l0000000000044C54_ds_t:
	goto l0000000000044D24
	// succ:  l0000000000044D24
l0000000000044C60:
	r1 = (word64) Mem0[r3 + 0x00000000000000E8:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000044C60_ds_t
	// succ:  l0000000000044C60_ds_f l0000000000044C60_ds_t
l0000000000044C60_ds_f:
	goto l0000000000044C78
	// succ:  l0000000000044C78
l0000000000044C60_ds_t:
	goto l0000000000044D24
	// succ:  l0000000000044D24
l0000000000044C78:
	r1 = r4
	Mem0[sp + 0x0000000000000008:word64] = r4
	call runtime.readgstatus (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
l0000000000044D24:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.canpanic_exit
l0000000000044D3C:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.canpanic_exit
runtime.canpanic_exit:


// runtime.printlock
// Return size: 0
void runtime.printlock()
runtime.printlock_entry:
	// succ:  l0000000000044D58
l0000000000044D58:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000044D58_ds_t
	// succ:  l0000000000044D58_ds_f l0000000000044D58_ds_t
l0000000000044D58_ds_f:
	goto l0000000000044D68
	// succ:  l0000000000044D68
l0000000000044D58_ds_t:
	goto l0000000000044D7C
	// succ:  l0000000000044D7C
l0000000000044D68:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000044D58
	// succ:  l0000000000044D58
l0000000000044D7C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r4 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r4 + 0x00000000000000E0:word32] = (word32) r2
	r2 = (word64) Mem0[r4 + 0x00000000000000F8:int8]
	r3 = r2 << 0x18
	r3 = r3 >> 0x18
	r2 = r3 << 0x18
	r2 = r2 >> 0x18
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3 << 0x18
	r3 = r3 >> 0x18
	r2 = r2 + r3
	r2 = r2 << 0x18
	r2 = r2 >> 0x18
	Mem0[r4 + 0x00000000000000F8:byte] = (byte) r2
	Mem0[sp + 0x0000000000000010:word64] = r4
	r1 = (word64) Mem0[r4 + 0x00000000000000F8:int8]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 << 0x18
	r2 = r2 >> 0x18
	r1 = r1 << 0x18
	r1 = r1 >> 0x18
	r2 = r2 << 0x18
	r2 = r2 >> 0x18
	branch r1 != r2 l0000000000044D7C_ds_t
	// succ:  l0000000000044D7C_ds_f l0000000000044D7C_ds_t
l0000000000044D7C_ds_f:
	goto l0000000000044E04
	// succ:  l0000000000044E04
l0000000000044D7C_ds_t:
	goto l0000000000044E20
	// succ:  l0000000000044E20
l0000000000044E04:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000010:word64]
	// succ:  l0000000000044E20
l0000000000044E20:
	r2 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r4 + 0x00000000000000E0:word32] = (word32) r2
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.printlock_exit
runtime.printlock_exit:


// runtime.printunlock
// Return size: 0
void runtime.printunlock()
runtime.printunlock_entry:
	// succ:  l0000000000044E50
l0000000000044E50:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000044E50_ds_t
	// succ:  l0000000000044E50_ds_f l0000000000044E50_ds_t
l0000000000044E50_ds_f:
	goto l0000000000044E60
	// succ:  l0000000000044E60
l0000000000044E50_ds_t:
	goto l0000000000044E74
	// succ:  l0000000000044E74
l0000000000044E60:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000044E50
	// succ:  l0000000000044E50
l0000000000044E74:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r4 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r4 + 0x00000000000000F8:int8]
	r3 = r2 << 0x18
	r3 = r3 >> 0x18
	r2 = r3 << 0x18
	r2 = r2 >> 0x18
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3 << 0x18
	r3 = r3 >> 0x18
	r2 = r2 - r3
	r2 = r2 << 0x18
	r2 = r2 >> 0x18
	Mem0[r4 + 0x00000000000000F8:byte] = (byte) r2
	r1 = (word64) Mem0[r4 + 0x00000000000000F8:int8]
	r2 = 0x0000000000000000 << 0x18
	r2 = r2 >> 0x18
	r1 = r1 << 0x18
	r1 = r1 >> 0x18
	r2 = r2 << 0x18
	r2 = r2 >> 0x18
	branch r1 != r2 l0000000000044E74_ds_t
	// succ:  l0000000000044E74_ds_f l0000000000044E74_ds_t
l0000000000044E74_ds_f:
	goto l0000000000044ED4
	// succ:  l0000000000044ED4
l0000000000044E74_ds_t:
	goto l0000000000044EEC
	// succ:  l0000000000044EEC
l0000000000044ED4:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
l0000000000044EEC:
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.printunlock_exit
runtime.printunlock_exit:


// runtime.gwrite
// Return size: 0
void runtime.gwrite()
runtime.gwrite_entry:
	// succ:  l0000000000044F00
l0000000000044F00:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000044F00_ds_t
	// succ:  l0000000000044F00_ds_f l0000000000044F00_ds_t
l0000000000044F00_ds_f:
	goto l0000000000044F10
	// succ:  l0000000000044F10
l0000000000044F00_ds_t:
	goto l0000000000044F24
	// succ:  l0000000000044F24
l0000000000044F10:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000044F00
	// succ:  l0000000000044F00
l0000000000044F24:
	sp = sp + -120
	Mem0[sp:word64] = ra
	r10 = Mem0[sp + 0x0000000000000080:word64]
	r9 = Mem0[sp + 0x0000000000000090:word64]
	r6 = Mem0[sp + 0x0000000000000088:word64]
	branch r6 != 0x0000000000000000 l0000000000044F24_ds_t
	// succ:  l0000000000044F24_ds_f l0000000000044F24_ds_t
l0000000000044F24_ds_f:
	goto l0000000000044F40
	// succ:  l0000000000044F40
l0000000000044F24_ds_t:
	goto l0000000000044F50
	// succ:  l0000000000044F50
l0000000000044F40:
	r4 = Mem0[sp:word64]
	sp = sp + 120
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gwrite_exit
l0000000000044F50:
	r3 = r30
	r2 = 0x0000000000000000
	branch r30 == 0x0000000000000000 l0000000000044F50_ds_t
	// succ:  l0000000000044F50_ds_f l0000000000044F50_ds_t
l0000000000044F50_ds_f:
	goto l0000000000044F60
	// succ:  l0000000000044F60
l0000000000044F50_ds_t:
	goto l000000000004508C
	// succ:  l000000000004508C
l0000000000044F60:
	r2 = Mem0[r3 + 0x0000000000000118:word64]
	branch r2 == 0x0000000000000000 l0000000000044F60_ds_t
	// succ:  l0000000000044F60_ds_f l0000000000044F60_ds_t
l0000000000044F60_ds_f:
	goto l0000000000044F6C
	// succ:  l0000000000044F6C
l0000000000044F60_ds_t:
	goto l000000000004508C
	// succ:  l000000000004508C
l0000000000044F6C:
	r2 = Mem0[r3 + 0x0000000000000120:word64]
	r4 = Mem0[r3 + 0x0000000000000128:word64]
	r1 = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	r5 = r2
	r3 = r4
	r4 = Mem0[r1 + 0x0000000000000128:word64]
	r23 = (word64) (r4 <u r3)
	branch r23 != 0x0000000000000000 l0000000000044F6C_ds_t
	// succ:  l0000000000044F6C_ds_f l0000000000044F6C_ds_t
l0000000000044F6C_ds_f:
	goto l0000000000044F94
	// succ:  l0000000000044F94
l0000000000044F6C_ds_t:
	goto l0000000000045078
	// succ:  l0000000000045078
l0000000000044F94:
	r23 = (word64) (r3 <u r2)
	branch r23 != 0x0000000000000000 l0000000000044F94_ds_t
	// succ:  l0000000000044F94_ds_f l0000000000044F94_ds_t
l0000000000044F94_ds_f:
	goto l0000000000044FA0
	// succ:  l0000000000044FA0
l0000000000044F94_ds_t:
	goto l0000000000045078
	// succ:  l0000000000045078
l0000000000044FA0:
l0000000000045078:
	call runtime.panicslice (retsize: 0;)
l000000000004508C:
	Mem0[sp + 0x0000000000000008:word64] = r10
	Mem0[sp + 0x0000000000000010:word64] = r6
	r1 = r9
	Mem0[sp + 0x0000000000000018:word64] = r9
	call runtime.writeErr (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 120
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gwrite_exit
runtime.gwrite_exit:


// runtime.printsp
// Return size: 0
void runtime.printsp()
runtime.printsp_entry:
	// succ:  l00000000000450B8
l00000000000450B8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000450B8_ds_t
	// succ:  l00000000000450B8_ds_f l00000000000450B8_ds_t
l00000000000450B8_ds_f:
	goto l00000000000450C8
	// succ:  l00000000000450C8
l00000000000450B8_ds_t:
	goto l00000000000450DC
	// succ:  l00000000000450DC
l00000000000450C8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000450B8
	// succ:  l00000000000450B8
l00000000000450DC:
	sp = sp + -24
	Mem0[sp:word64] = ra
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.printsp_exit:


// runtime.printnl
// Return size: 0
void runtime.printnl()
runtime.printnl_entry:
	// succ:  l0000000000045128
l0000000000045128:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000045128_ds_t
	// succ:  l0000000000045128_ds_f l0000000000045128_ds_t
l0000000000045128_ds_f:
	goto l0000000000045138
	// succ:  l0000000000045138
l0000000000045128_ds_t:
	goto l000000000004514C
	// succ:  l000000000004514C
l0000000000045138:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000045128
	// succ:  l0000000000045128
l000000000004514C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.printnl_exit:


// runtime.printbool
// Return size: 0
void runtime.printbool()
runtime.printbool_entry:
	// succ:  l0000000000045198
l0000000000045198:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000045198_ds_t
	// succ:  l0000000000045198_ds_f l0000000000045198_ds_t
l0000000000045198_ds_f:
	goto l00000000000451A8
	// succ:  l00000000000451A8
l0000000000045198_ds_t:
	goto l00000000000451BC
	// succ:  l00000000000451BC
l00000000000451A8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000045198
	// succ:  l0000000000045198
l00000000000451BC:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	branch r1 == 0x0000000000000000 l00000000000451BC_ds_t
	// succ:  l00000000000451BC_ds_f l00000000000451BC_ds_t
l00000000000451BC_ds_f:
	goto l00000000000451D0
	// succ:  l00000000000451D0
l00000000000451BC_ds_t:
	goto l0000000000045210
	// succ:  l0000000000045210
l00000000000451D0:
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000045210:
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.printbool_exit:


// runtime.printfloat
// Return size: 0
void runtime.printfloat()
runtime.printfloat_entry:
	// succ:  l0000000000045250
l0000000000045250:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000045250_ds_t
	// succ:  l0000000000045250_ds_f l0000000000045250_ds_t
l0000000000045250_ds_f:
	goto l0000000000045260
	// succ:  l0000000000045260
l0000000000045250_ds_t:
	goto l0000000000045274
	// succ:  l0000000000045274
l0000000000045260:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000045250
	// succ:  l0000000000045250
l0000000000045274:
	sp = sp + -72
	Mem0[sp:word64] = ra
	f2 = Mem0[sp + 0x0000000000000050:word64]
runtime.printfloat_exit:


// runtime.printuint
// Return size: 0
void runtime.printuint()
runtime.printuint_entry:
	// succ:  l00000000000457C0
l00000000000457C0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -160
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000457C0_ds_t
	// succ:  l00000000000457C0_ds_f l00000000000457C0_ds_t
l00000000000457C0_ds_f:
	goto l00000000000457D4
	// succ:  l00000000000457D4
l00000000000457C0_ds_t:
	goto l00000000000457E8
	// succ:  l00000000000457E8
l00000000000457D4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000457C0
	// succ:  l00000000000457C0
l00000000000457E8:
	sp = sp + -160
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x00000000000000A8:word64]
	lo = r1 / sp
	hi = r1 % sp
	Mem0[r1:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000010:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000028:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000050:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000060:byte] = (byte) 0x0000000000000000
	Mem0[r1 + 0x0000000000000061:byte] = (byte) 0x0000000000000000
	Mem0[r1 + 0x0000000000000062:byte] = (byte) 0x0000000000000000
	Mem0[r1 + 0x0000000000000063:byte] = (byte) 0x0000000000000000
	lo = r5 / 0x0000000000000000
	hi = r5 % 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.printuint_exit:


// runtime.printint
// Return size: 0
void runtime.printint()
runtime.printint_entry:
	// succ:  l0000000000045990
l0000000000045990:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000045990_ds_t
	// succ:  l0000000000045990_ds_f l0000000000045990_ds_t
l0000000000045990_ds_f:
	goto l00000000000459A0
	// succ:  l00000000000459A0
l0000000000045990_ds_t:
	goto l00000000000459B4
	// succ:  l00000000000459B4
l00000000000459A0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000045990
	// succ:  l0000000000045990
l00000000000459B4:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r2 = 0x0000000000000000
	r1 = r3
	r23 = (word64) (r3 < 0x0000000000000000)
	branch r23 == 0x0000000000000000 l00000000000459B4_ds_t
	// succ:  l00000000000459B4_ds_f l00000000000459B4_ds_t
l00000000000459B4_ds_f:
	goto l00000000000459D4
	// succ:  l00000000000459D4
l00000000000459B4_ds_t:
	goto l0000000000045A0C
	// succ:  l0000000000045A0C
l00000000000459D4:
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000045A0C:
	r1 = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.printuint (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.printint_exit
runtime.printint_exit:


// runtime.printhex
// Return size: 0
void runtime.printhex()
runtime.printhex_entry:
	// succ:  l0000000000045A30
l0000000000045A30:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -160
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000045A30_ds_t
	// succ:  l0000000000045A30_ds_f l0000000000045A30_ds_t
l0000000000045A30_ds_f:
	goto l0000000000045A44
	// succ:  l0000000000045A44
l0000000000045A30_ds_t:
	goto l0000000000045A58
	// succ:  l0000000000045A58
l0000000000045A44:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000045A30
	// succ:  l0000000000045A30
l0000000000045A58:
	sp = sp + -160
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x00000000000000A8:word64]
	lo = r1 / sp
	hi = r1 % sp
	Mem0[r1:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000010:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000028:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000050:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000060:byte] = (byte) 0x0000000000000000
	Mem0[r1 + 0x0000000000000061:byte] = (byte) 0x0000000000000000
	Mem0[r1 + 0x0000000000000062:byte] = (byte) 0x0000000000000000
	Mem0[r1 + 0x0000000000000063:byte] = (byte) 0x0000000000000000
	lo = r5 / 0x0000000000000000
	hi = r5 % 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.printhex_exit:


// runtime.printpointer
// Return size: 0
void runtime.printpointer()
runtime.printpointer_entry:
	// succ:  l0000000000045C88
l0000000000045C88:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000045C88_ds_t
	// succ:  l0000000000045C88_ds_f l0000000000045C88_ds_t
l0000000000045C88_ds_f:
	goto l0000000000045C98
	// succ:  l0000000000045C98
l0000000000045C88_ds_t:
	goto l0000000000045CAC
	// succ:  l0000000000045CAC
l0000000000045C98:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000045C88
	// succ:  l0000000000045C88
l0000000000045CAC:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.printhex (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.printpointer_exit
runtime.printpointer_exit:


// runtime.printstring
// Return size: 0
void runtime.printstring()
runtime.printstring_entry:
	// succ:  l0000000000045CD8
l0000000000045CD8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -144
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000045CD8_ds_t
	// succ:  l0000000000045CD8_ds_f l0000000000045CD8_ds_t
l0000000000045CD8_ds_f:
	goto l0000000000045CEC
	// succ:  l0000000000045CEC
l0000000000045CD8_ds_t:
	goto l0000000000045D00
	// succ:  l0000000000045D00
l0000000000045CEC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000045CD8
	// succ:  l0000000000045CD8
l0000000000045D00:
	sp = sp + -144
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x00000000000000A0:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x0000000000000048:word64]
	r23 = (word64) (r2 <u r3)
	branch r23 == 0x0000000000000000 l0000000000045D00_ds_t
	// succ:  l0000000000045D00_ds_f l0000000000045D00_ds_t
l0000000000045D00_ds_f:
	goto l0000000000045D24
	// succ:  l0000000000045D24
l0000000000045D00_ds_t:
	goto l0000000000045DFC
	// succ:  l0000000000045DFC
l0000000000045D24:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000040:word64] = r1
l0000000000045DFC:
	r1 = Mem0[sp + 0x0000000000000098:word64]
	Mem0[sp + 0x0000000000000050:word64] = r1
	Mem0[sp + 0x0000000000000058:word64] = r3
	Mem0[sp + 0x0000000000000078:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000080:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000088:word64] = 0x0000000000000000
	lo = r6 / sp
	hi = r6 % sp
	lo = r5 / sp
	hi = r5 % sp
	r1 = r6
	Mem0[sp + 0x0000000000000030:word64] = r6
	branch r6 != 0x0000000000000000 l0000000000045DFC_ds_t
	// succ:  l0000000000045DFC_ds_f l0000000000045DFC_ds_t
l0000000000045DFC_ds_f:
	goto l0000000000045E2C
	// succ:  l0000000000045E2C
l0000000000045DFC_ds_t:
	goto l0000000000045E30
	// succ:  l0000000000045E30
l0000000000045E2C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000045E30
l0000000000045E30:
	Mem0[sp + 0x0000000000000028:word64] = r5
	r3 = Mem0[r5:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r2 != r4 l0000000000045E30_ds_t
	// succ:  l0000000000045E30_ds_f l0000000000045E30_ds_t
l0000000000045E30_ds_f:
	goto l0000000000045E50
	// succ:  l0000000000045E50
l0000000000045E30_ds_t:
	goto l0000000000045EA4
	// succ:  l0000000000045EA4
l0000000000045E50:
	Mem0[r1:word64] = r3
	goto l0000000000045E54
	// succ:  l0000000000045E54
l0000000000045E50_ds_f:
	goto l0000000000045E5C
	// succ:  l0000000000045E5C
l0000000000045E50_ds_t:
	goto l0000000000045E60
	// succ:  l0000000000045E60
l0000000000045E54:
	branch r6 != 0x0000000000000000 l0000000000045E50_ds_t
	goto l0000000000045E50_ds_f
	// succ:  l0000000000045E50_ds_f l0000000000045E50_ds_t
l0000000000045E5C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000045E60
l0000000000045E60:
	r3 = Mem0[r5 + 0x0000000000000008:word64]
	Mem0[r6 + 0x0000000000000008:word64] = r3
	r2 = r5
	r3 = Mem0[r5 + 0x0000000000000008:word64]
	Mem0[r6 + 0x0000000000000010:word64] = r3
	r1 = Mem0[sp + 0x0000000000000078:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000080:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000088:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.gwrite (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 144
	call r4 (retsize: 0;)
	return
	// succ:  runtime.printstring_exit
l0000000000045EA4:
	r2 = r6
	Mem0[sp + 0x0000000000000008:word64] = r6
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.writebarrierptr (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000030:word64]
	r5 = Mem0[sp + 0x0000000000000028:word64]
	goto l0000000000045E54
	// succ:  l0000000000045E54
runtime.printstring_exit:


// runtime.printslice
// Return size: 0
void runtime.printslice()
runtime.printslice_entry:
	// succ:  l0000000000045EC8
l0000000000045EC8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000045EC8_ds_t
	// succ:  l0000000000045EC8_ds_f l0000000000045EC8_ds_t
l0000000000045EC8_ds_f:
	goto l0000000000045ED8
	// succ:  l0000000000045ED8
l0000000000045EC8_ds_t:
	goto l0000000000045EEC
	// succ:  l0000000000045EEC
l0000000000045ED8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000045EC8
	// succ:  l0000000000045EC8
l0000000000045EEC:
	sp = sp + -48
	Mem0[sp:word64] = ra
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000028:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.printslice_exit:


// runtime.printeface
// Return size: 0
void runtime.printeface()
runtime.printeface_entry:
	// succ:  l0000000000045FC0
l0000000000045FC0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000045FC0_ds_t
	// succ:  l0000000000045FC0_ds_f l0000000000045FC0_ds_t
l0000000000045FC0_ds_f:
	goto l0000000000045FD0
	// succ:  l0000000000045FD0
l0000000000045FC0_ds_t:
	goto l0000000000045FE4
	// succ:  l0000000000045FE4
l0000000000045FD0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000045FC0
	// succ:  l0000000000045FC0
l0000000000045FE4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.printeface_exit:


// runtime.main
// Return size: 0
void runtime.main()
runtime.main_entry:
	// succ:  l00000000000460A0
l00000000000460A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000460A0_ds_t
	// succ:  l00000000000460A0_ds_f l00000000000460A0_ds_t
l00000000000460A0_ds_f:
	goto l00000000000460B0
	// succ:  l00000000000460B0
l00000000000460A0_ds_t:
	goto l00000000000460C4
	// succ:  l00000000000460C4
l00000000000460B0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000460A0
	// succ:  l00000000000460A0
l00000000000460C4:
	sp = sp + -80
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000040:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	r2 = 0x0000000000000000
	Mem0[r1 + 0x0000000000000158:word64] = 0x0000000000000000
	r1 = 0x000000003B9A0000
	r1 = r1 | 0x000000000000CA00
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000000040:word64] = r1
	call runtime.nanotime (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006878:word64] = r1
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.systemstack (retsize: 0;)
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000002C4:uint32]
runtime.main_exit:


// runtime.init.3
// Return size: 0
void runtime.init.3()
runtime.init.3_entry:
	// succ:  l0000000000046538
l0000000000046538:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000046538_ds_t
	// succ:  l0000000000046538_ds_f l0000000000046538_ds_t
l0000000000046538_ds_f:
	goto l0000000000046548
	// succ:  l0000000000046548
l0000000000046538_ds_t:
	goto l000000000004655C
	// succ:  l000000000004655C
l0000000000046548:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000046538
	// succ:  l0000000000046538
l000000000004655C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word32] = (word32) 0x0000000000000000
	r2 = 0x00000000000A0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.newproc (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.init.3_exit
runtime.init.3_exit:


// runtime.forcegchelper
// Return size: 0
void runtime.forcegchelper()
runtime.forcegchelper_entry:
	// succ:  l0000000000046598
l0000000000046598:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000046598_ds_t
	// succ:  l0000000000046598_ds_f l0000000000046598_ds_t
l0000000000046598_ds_f:
	goto l00000000000465A8
	// succ:  l00000000000465A8
l0000000000046598_ds_t:
	goto l00000000000465BC
	// succ:  l00000000000465BC
l00000000000465A8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000046598
	// succ:  l0000000000046598
l00000000000465BC:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = r30
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l00000000000465BC_ds_t
	// succ:  l00000000000465BC_ds_f l00000000000465BC_ds_t
l00000000000465BC_ds_f:
	goto l00000000000465E0
	// succ:  l00000000000465E0
l00000000000465BC_ds_t:
	goto l0000000000046748
	// succ:  l0000000000046748
l00000000000465E0:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000011A8:word64] = r1
	// succ:  l00000000000465EC
l00000000000465EC:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x00000000000011B0:uint32]
l0000000000046748:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r30
	call runtime.writebarrierptr (retsize: 0;)
	goto l00000000000465EC
	// succ:  l00000000000465EC
runtime.forcegchelper_exit:


// runtime.Gosched
// Return size: 0
void runtime.Gosched()
runtime.Gosched_entry:
	// succ:  l0000000000046770
l0000000000046770:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.mcall (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.Gosched_exit
runtime.Gosched_exit:


// runtime.gopark
// Return size: 0
void runtime.gopark()
runtime.gopark_entry:
	// succ:  l00000000000467A0
l00000000000467A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000467A0_ds_t
	// succ:  l00000000000467A0_ds_f l00000000000467A0_ds_t
l00000000000467A0_ds_f:
	goto l00000000000467B0
	// succ:  l00000000000467B0
l00000000000467A0_ds_t:
	goto l00000000000467C4
	// succ:  l00000000000467C4
l00000000000467B0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000467A0
	// succ:  l00000000000467A0
l00000000000467C4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r4 = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	r3 = Mem0[r2 + 0x00000000000000A0:word64]
	r1 = r3
	r2 = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.readgstatus (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.gopark_exit:


// runtime.goparkunlock
// Return size: 0
void runtime.goparkunlock()
runtime.goparkunlock_entry:
	// succ:  l0000000000046A18
l0000000000046A18:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000046A18_ds_t
	// succ:  l0000000000046A18_ds_f l0000000000046A18_ds_t
l0000000000046A18_ds_f:
	goto l0000000000046A28
	// succ:  l0000000000046A28
l0000000000046A18_ds_t:
	goto l0000000000046A3C
	// succ:  l0000000000046A3C
l0000000000046A28:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000046A18
	// succ:  l0000000000046A18
l0000000000046A3C:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r1 = (word64) Mem0[sp + 0x0000000000000058:byte]
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	r1 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[sp + 0x0000000000000030:word64] = r1
	call runtime.gopark (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.goparkunlock_exit
runtime.goparkunlock_exit:


// runtime.goready
// Return size: 0
void runtime.goready()
runtime.goready_entry:
	// succ:  l0000000000046A98
l0000000000046A98:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000046A98_ds_t
	// succ:  l0000000000046A98_ds_f l0000000000046A98_ds_t
l0000000000046A98_ds_f:
	goto l0000000000046AA8
	// succ:  l0000000000046AA8
l0000000000046A98_ds_t:
	goto l0000000000046ABC
	// succ:  l0000000000046ABC
l0000000000046AA8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000046A98
	// succ:  l0000000000046A98
l0000000000046ABC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	r2 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[r3 + 0x0000000000000008:word64] = r2
	r2 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[r3 + 0x0000000000000010:word64] = r2
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.goready_exit
runtime.goready_exit:


// runtime.acquireSudog
// Return size: 0
void runtime.acquireSudog()
runtime.acquireSudog_entry:
	// succ:  l0000000000046B08
l0000000000046B08:
	sp = fp
	sp = sp + -152
	Mem0[sp:word64] = ra
	r4 = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000068:word64] = r2
	r1 = Mem0[sp + 0x0000000000000068:word64]
	r7 = Mem0[r1 + 0x00000000000000B0:word64]
	Mem0[sp + 0x0000000000000060:word64] = r7
	r3 = Mem0[r7 + 0x0000000000000DE8:word64]
	branch r3 != 0x0000000000000000 l0000000000046B08_ds_t
	// succ:  l0000000000046B08_ds_f l0000000000046B08_ds_t
l0000000000046B08_ds_f:
	goto l0000000000046B58
	// succ:  l0000000000046B58
l0000000000046B08_ds_t:
	goto l000000000004705C
	// succ:  l000000000004705C
l0000000000046B58:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r4 = Mem0[r1 + 0x0000000000000DE8:word64]
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r1 = Mem0[r1 + 0x0000000000000DF0:word64]
	r2 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000046B58_ds_t
	// succ:  l0000000000046B58_ds_f l0000000000046B58_ds_t
l0000000000046B58_ds_f:
	goto l0000000000046BA0
	// succ:  l0000000000046BA0
l0000000000046B58_ds_t:
	goto l0000000000046BAC
	// succ:  l0000000000046BAC
l0000000000046BA0:
	call runtime.panicdivide (retsize: 0;)
l0000000000046BAC:
	lo = r1 / r3
	hi = r1 % r3
	r1 = lo
	r23 = (word64) (r4 < r1)
	branch r23 == 0x0000000000000000 l0000000000046BAC_ds_t
	// succ:  l0000000000046BAC_ds_f l0000000000046BAC_ds_t
l0000000000046BAC_ds_f:
	goto l0000000000046BC0
	// succ:  l0000000000046BC0
l0000000000046BAC_ds_t:
	goto l0000000000046D60
	// succ:  l0000000000046D60
l0000000000046BC0:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001488:word64]
	branch r1 == 0x0000000000000000 l0000000000046BC0_ds_t
	// succ:  l0000000000046BC0_ds_f l0000000000046BC0_ds_t
l0000000000046BC0_ds_f:
	goto l0000000000046BD4
	// succ:  l0000000000046BD4
l0000000000046BC0_ds_t:
	goto l0000000000046D60
	// succ:  l0000000000046D60
l0000000000046BD4:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001488:word64]
	Mem0[sp + 0x0000000000000050:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	r2 = Mem0[r1 + 0x0000000000000010:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r1 != r3 l0000000000046BD4_ds_t
	// succ:  l0000000000046BD4_ds_f l0000000000046BD4_ds_t
l0000000000046BD4_ds_f:
	goto l0000000000046C04
	// succ:  l0000000000046C04
l0000000000046BD4_ds_t:
	goto l0000000000046D3C
	// succ:  l0000000000046D3C
l0000000000046C04:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001488:word64] = r2
	goto l0000000000046C10
	// succ:  l0000000000046C10
l0000000000046C04_ds_f:
	goto l0000000000046C3C
	// succ:  l0000000000046C3C
l0000000000046C04_ds_t:
	goto l0000000000046D30
	// succ:  l0000000000046D30
l0000000000046C10:
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[r1 + 0x0000000000000010:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r6 = Mem0[r1 + 0x0000000000000DE0:word64]
	r5 = Mem0[r1 + 0x0000000000000DE8:word64]
	r4 = Mem0[r1 + 0x0000000000000DF0:word64]
	lo = r2 / r5
	hi = r2 % r5
	r3 = r4
	r23 = (word64) (r4 <u r2)
	branch r23 == 0x0000000000000000 l0000000000046C04_ds_t
	goto l0000000000046C04_ds_f
	// succ:  l0000000000046C04_ds_f l0000000000046C04_ds_t
l0000000000046C3C:
	r1 = 0x0000000000080000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r6
	Mem0[sp + 0x0000000000000018:word64] = r5
	r1 = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	Mem0[sp + 0x0000000000000028:word64] = r2
	call runtime.growslice (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000030:word64]
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r3 = Mem0[sp + 0x0000000000000040:word64]
	r1 = Mem0[sp + 0x0000000000000060:word64]
	branch r1 != 0x0000000000000000 l0000000000046C3C_ds_t
	// succ:  l0000000000046C3C_ds_f l0000000000046C3C_ds_t
l0000000000046C3C_ds_f:
	goto l0000000000046C80
	// succ:  l0000000000046C80
l0000000000046C3C_ds_t:
	goto l0000000000046C84
	// succ:  l0000000000046C84
l0000000000046C80:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000046C84
l0000000000046C84:
	Mem0[sp + 0x0000000000000048:word64] = r5
	lo = r2 / r5
	hi = r2 % r5
	Mem0[r1 + 0x0000000000000DE8:word64] = r2
	Mem0[r1 + 0x0000000000000DF0:word64] = r3
	r2 = r6
	Mem0[sp + 0x0000000000000070:word64] = r6
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000046C84_ds_t
	// succ:  l0000000000046C84_ds_f l0000000000046C84_ds_t
l0000000000046C84_ds_f:
	goto l0000000000046CB4
	// succ:  l0000000000046CB4
l0000000000046C84_ds_t:
	goto l0000000000046D0C
	// succ:  l0000000000046D0C
l0000000000046CB4:
	Mem0[r1 + 0x0000000000000DE0:word64] = r2
	// succ:  l0000000000046CB8
l0000000000046CB8:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
l0000000000046D0C:
	lo = r3 / r1
	hi = r3 % r1
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r6
	call runtime.writebarrierptr (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000070:word64]
	r5 = Mem0[sp + 0x0000000000000048:word64]
	goto l0000000000046CB8
	// succ:  l0000000000046CB8
l0000000000046D30:
	Mem0[r1 + 0x0000000000000DE8:word64] = r2
	goto l0000000000046CB8
	// succ:  l0000000000046CB8
l0000000000046D3C:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	goto l0000000000046C10
	// succ:  l0000000000046C10
l0000000000046D60:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r7 = Mem0[sp + 0x0000000000000060:word64]
	r3 = Mem0[r7 + 0x0000000000000DE8:word64]
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000046D60_ds_t
	// succ:  l0000000000046D60_ds_f l0000000000046D60_ds_t
l0000000000046D60_ds_f:
	goto l0000000000046D9C
	// succ:  l0000000000046D9C
l0000000000046D60_ds_t:
	goto l0000000000047054
	// succ:  l0000000000047054
l0000000000046D9C:
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.newobject (retsize: 0;)
	r7 = Mem0[sp + 0x0000000000000060:word64]
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000078:word64] = r1
	r6 = Mem0[r7 + 0x0000000000000DE0:word64]
	r5 = Mem0[r7 + 0x0000000000000DE8:word64]
	r4 = Mem0[r7 + 0x0000000000000DF0:word64]
	lo = r2 / r5
	hi = r2 % r5
	r3 = r4
	r23 = (word64) (r4 <u r2)
	branch r23 == 0x0000000000000000 l0000000000046D9C_ds_t
	// succ:  l0000000000046D9C_ds_f l0000000000046D9C_ds_t
l0000000000046D9C_ds_f:
	goto l0000000000046DE0
	// succ:  l0000000000046DE0
l0000000000046D9C_ds_t:
	goto l0000000000047048
	// succ:  l0000000000047048
l0000000000046DE0:
	r1 = 0x0000000000080000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r6
	Mem0[sp + 0x0000000000000018:word64] = r5
	r1 = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	Mem0[sp + 0x0000000000000028:word64] = r2
	call runtime.growslice (retsize: 0;)
	r7 = Mem0[sp + 0x0000000000000060:word64]
	r6 = Mem0[sp + 0x0000000000000030:word64]
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r3 = Mem0[sp + 0x0000000000000040:word64]
	r1 = r7
	branch r7 != 0x0000000000000000 l0000000000046DE0_ds_t
	// succ:  l0000000000046DE0_ds_f l0000000000046DE0_ds_t
l0000000000046DE0_ds_f:
	goto l0000000000046E28
	// succ:  l0000000000046E28
l0000000000046DE0_ds_t:
	goto l0000000000046E2C
	// succ:  l0000000000046E2C
l0000000000046E28:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000046E2C
l0000000000046E2C:
	Mem0[sp + 0x0000000000000048:word64] = r5
	lo = r2 / r5
	hi = r2 % r5
	Mem0[r7 + 0x0000000000000DE8:word64] = r2
	Mem0[r7 + 0x0000000000000DF0:word64] = r3
	r2 = r6
	Mem0[sp + 0x0000000000000070:word64] = r6
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000046E2C_ds_t
	// succ:  l0000000000046E2C_ds_f l0000000000046E2C_ds_t
l0000000000046E2C_ds_f:
	goto l0000000000046E5C
	// succ:  l0000000000046E5C
l0000000000046E2C_ds_t:
	goto l0000000000047020
	// succ:  l0000000000047020
l0000000000046E5C:
	Mem0[r1 + 0x0000000000000DE0:word64] = r2
	// succ:  l0000000000046E60
l0000000000046E60:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
l0000000000046E90:
	r4 = Mem0[r7 + 0x0000000000000DE8:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l0000000000047020:
	lo = r3 / r7
	hi = r3 % r7
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r6
	call runtime.writebarrierptr (retsize: 0;)
	r7 = Mem0[sp + 0x0000000000000060:word64]
	r6 = Mem0[sp + 0x0000000000000070:word64]
	r5 = Mem0[sp + 0x0000000000000048:word64]
	goto l0000000000046E60
	// succ:  l0000000000046E60
l0000000000047048:
	Mem0[r7 + 0x0000000000000DE8:word64] = r2
	goto l0000000000046E60
	// succ:  l0000000000046E60
l0000000000047054:
	goto l0000000000046E90
	// succ:  l0000000000046E90
l000000000004705C:
	goto l0000000000046E90
	// succ:  l0000000000046E90
runtime.acquireSudog_exit:


// runtime.releaseSudog
// Return size: 0
void runtime.releaseSudog()
runtime.releaseSudog_entry:
	// succ:  l0000000000047068
l0000000000047068:
	sp = fp
	sp = sp + -152
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	r1 = Mem0[r1 + 0x0000000000000020:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000047068_ds_t
	// succ:  l0000000000047068_ds_f l0000000000047068_ds_t
l0000000000047068_ds_f:
	goto l0000000000047084
	// succ:  l0000000000047084
l0000000000047068_ds_t:
	goto l00000000000470A4
	// succ:  l00000000000470A4
l0000000000047084:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000470A4:
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	r1 = Mem0[r1 + 0x0000000000000008:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l00000000000470A4_ds_t
	// succ:  l00000000000470A4_ds_f l00000000000470A4_ds_t
l00000000000470A4_ds_f:
	goto l00000000000470B8
	// succ:  l00000000000470B8
l00000000000470A4_ds_t:
	goto l00000000000470D8
	// succ:  l00000000000470D8
l00000000000470B8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000470D8:
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	r1 = Mem0[r1 + 0x0000000000000010:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l00000000000470D8_ds_t
	// succ:  l00000000000470D8_ds_f l00000000000470D8_ds_t
l00000000000470D8_ds_f:
	goto l00000000000470EC
	// succ:  l00000000000470EC
l00000000000470D8_ds_t:
	goto l000000000004710C
	// succ:  l000000000004710C
l00000000000470EC:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004710C:
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	r1 = Mem0[r1 + 0x0000000000000018:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000004710C_ds_t
	// succ:  l000000000004710C_ds_f l000000000004710C_ds_t
l000000000004710C_ds_f:
	goto l0000000000047120
	// succ:  l0000000000047120
l000000000004710C_ds_t:
	goto l0000000000047140
	// succ:  l0000000000047140
l0000000000047120:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000047140:
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	r1 = Mem0[r1 + 0x0000000000000038:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000047140_ds_t
	// succ:  l0000000000047140_ds_f l0000000000047140_ds_t
l0000000000047140_ds_f:
	goto l0000000000047154
	// succ:  l0000000000047154
l0000000000047140_ds_t:
	goto l0000000000047174
	// succ:  l0000000000047174
l0000000000047154:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000047174:
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	r1 = Mem0[r1 + 0x0000000000000040:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000047174_ds_t
	// succ:  l0000000000047174_ds_f l0000000000047174_ds_t
l0000000000047174_ds_f:
	goto l0000000000047188
	// succ:  l0000000000047188
l0000000000047174_ds_t:
	goto l00000000000471A8
	// succ:  l00000000000471A8
l0000000000047188:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000471A8:
	r1 = Mem0[r30 + 0x00000000000000B0:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l00000000000471A8_ds_t
	// succ:  l00000000000471A8_ds_f l00000000000471A8_ds_t
l00000000000471A8_ds_f:
	goto l00000000000471B8
	// succ:  l00000000000471B8
l00000000000471A8_ds_t:
	goto l00000000000471D8
	// succ:  l00000000000471D8
l00000000000471B8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000471D8:
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000060:word64] = r2
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r5 = Mem0[r1 + 0x00000000000000B0:word64]
	r4 = Mem0[r5 + 0x0000000000000DE8:word64]
	r2 = Mem0[r5 + 0x0000000000000DF0:word64]
	branch r4 != r2 l00000000000471D8_ds_t
	// succ:  l00000000000471D8_ds_f l00000000000471D8_ds_t
l00000000000471D8_ds_f:
	goto l000000000004721C
	// succ:  l000000000004721C
l00000000000471D8_ds_t:
	goto l000000000004763C
	// succ:  l000000000004763C
l000000000004721C:
	Mem0[sp + 0x0000000000000070:word64] = 0x0000000000000000
	r9 = 0x0000000000000000
	Mem0[sp + 0x0000000000000068:word64] = 0x0000000000000000
	r4 = Mem0[r5 + 0x0000000000000DE8:word64]
	Mem0[sp + 0x0000000000000050:word64] = r5
	r1 = Mem0[r5 + 0x0000000000000DF0:word64]
	r2 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000004721C_ds_t
	// succ:  l000000000004721C_ds_f l000000000004721C_ds_t
l000000000004721C_ds_f:
	goto l0000000000047244
	// succ:  l0000000000047244
l000000000004721C_ds_t:
	goto l0000000000047250
	// succ:  l0000000000047250
l0000000000047244:
	call runtime.panicdivide (retsize: 0;)
l0000000000047250:
	lo = r1 / r3
	hi = r1 % r3
	r1 = lo
	r23 = (word64) (r1 < r4)
	branch r23 == 0x0000000000000000 l0000000000047250_ds_t
	// succ:  l0000000000047250_ds_f l0000000000047250_ds_t
l0000000000047250_ds_f:
	goto l0000000000047264
	// succ:  l0000000000047264
l0000000000047250_ds_t:
	goto l00000000000473C8
	// succ:  l00000000000473C8
l0000000000047264:
	r4 = Mem0[r5 + 0x0000000000000DE8:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l00000000000473C8:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000068:word64]
	branch r1 != 0x0000000000000000 l00000000000473C8_ds_t
	// succ:  l00000000000473C8_ds_f l00000000000473C8_ds_t
l00000000000473C8_ds_f:
	goto l00000000000473FC
	// succ:  l00000000000473FC
l00000000000473C8_ds_t:
	goto l0000000000047400
	// succ:  l0000000000047400
l00000000000473FC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000047400
l0000000000047400:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x0000000000001488:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000047400_ds_t
	// succ:  l0000000000047400_ds_f l0000000000047400_ds_t
l0000000000047400_ds_f:
	goto l0000000000047424
	// succ:  l0000000000047424
l0000000000047400_ds_t:
	goto l0000000000047620
	// succ:  l0000000000047620
l0000000000047424:
	Mem0[r1 + 0x0000000000000010:word64] = r2
	goto l0000000000047428
	// succ:  l0000000000047428
l0000000000047424_ds_f:
	goto l0000000000047444
	// succ:  l0000000000047444
l0000000000047424_ds_t:
	goto l00000000000475FC
	// succ:  l00000000000475FC
l0000000000047428:
	r1 = Mem0[sp + 0x0000000000000070:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l0000000000047424_ds_t
	goto l0000000000047424_ds_f
	// succ:  l0000000000047424_ds_f l0000000000047424_ds_t
l0000000000047444:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001488:word64] = r1
	// succ:  l0000000000047450
l0000000000047450:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000050:word64]
	// succ:  l000000000004747C
l000000000004747C:
	r1 = r5
	Mem0[sp + 0x0000000000000050:word64] = r5
	r6 = Mem0[r5 + 0x0000000000000DE0:word64]
	r5 = Mem0[r5 + 0x0000000000000DE8:word64]
	r4 = Mem0[r1 + 0x0000000000000DF0:word64]
	lo = r2 / r5
	hi = r2 % r5
	r3 = r4
	r23 = (word64) (r4 <u r2)
	branch r23 == 0x0000000000000000 l000000000004747C_ds_t
	// succ:  l000000000004747C_ds_f l000000000004747C_ds_t
l000000000004747C_ds_f:
	goto l00000000000474A4
	// succ:  l00000000000474A4
l000000000004747C_ds_t:
	goto l00000000000475F0
	// succ:  l00000000000475F0
l00000000000474A4:
	r1 = 0x0000000000080000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r6
	Mem0[sp + 0x0000000000000018:word64] = r5
	r1 = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	Mem0[sp + 0x0000000000000028:word64] = r2
	call runtime.growslice (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000030:word64]
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r3 = Mem0[sp + 0x0000000000000040:word64]
	r1 = Mem0[sp + 0x0000000000000050:word64]
	branch r1 != 0x0000000000000000 l00000000000474A4_ds_t
	// succ:  l00000000000474A4_ds_f l00000000000474A4_ds_t
l00000000000474A4_ds_f:
	goto l00000000000474E8
	// succ:  l00000000000474E8
l00000000000474A4_ds_t:
	goto l00000000000474EC
	// succ:  l00000000000474EC
l00000000000474E8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000474EC
l00000000000474EC:
	Mem0[sp + 0x0000000000000048:word64] = r5
	lo = r2 / r5
	hi = r2 % r5
	Mem0[r1 + 0x0000000000000DE8:word64] = r2
	Mem0[r1 + 0x0000000000000DF0:word64] = r3
	r2 = r6
	Mem0[sp + 0x0000000000000078:word64] = r6
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l00000000000474EC_ds_t
	// succ:  l00000000000474EC_ds_f l00000000000474EC_ds_t
l00000000000474EC_ds_f:
	goto l000000000004751C
	// succ:  l000000000004751C
l00000000000474EC_ds_t:
	goto l00000000000475CC
	// succ:  l00000000000475CC
l000000000004751C:
	Mem0[r1 + 0x0000000000000DE0:word64] = r2
	// succ:  l0000000000047520
l0000000000047520:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
l00000000000475CC:
	lo = r3 / r1
	hi = r3 % r1
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r6
	call runtime.writebarrierptr (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000078:word64]
	r5 = Mem0[sp + 0x0000000000000048:word64]
	goto l0000000000047520
	// succ:  l0000000000047520
l00000000000475F0:
	Mem0[r1 + 0x0000000000000DE8:word64] = r2
	goto l0000000000047520
	// succ:  l0000000000047520
l00000000000475FC:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	goto l0000000000047450
	// succ:  l0000000000047450
l0000000000047620:
	lo = r3 / r1
	hi = r3 % r1
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	goto l0000000000047428
	// succ:  l0000000000047428
l000000000004763C:
	goto l000000000004747C
	// succ:  l000000000004747C
runtime.releaseSudog_exit:


// runtime.funcPC
// Return size: 0
void runtime.funcPC()
runtime.funcPC_entry:
	// succ:  l0000000000047648
l0000000000047648:
	sp = fp
	lo = r1 / sp
	hi = r1 % sp
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	r1 = Mem0[r1:word64]
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	return
	// succ:  runtime.funcPC_exit
runtime.funcPC_exit:


// runtime.badmcall
// Return size: 0
void runtime.badmcall()
runtime.badmcall_entry:
	// succ:  l0000000000047668
l0000000000047668:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000047668_ds_t
	// succ:  l0000000000047668_ds_f l0000000000047668_ds_t
l0000000000047668_ds_f:
	goto l0000000000047678
	// succ:  l0000000000047678
l0000000000047668_ds_t:
	goto l000000000004768C
	// succ:  l000000000004768C
l0000000000047678:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000047668
	// succ:  l0000000000047668
l000000000004768C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.badmcall_exit:


// runtime.badmcall2
// Return size: 0
void runtime.badmcall2()
runtime.badmcall2_entry:
	// succ:  l00000000000476C8
l00000000000476C8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000476C8_ds_t
	// succ:  l00000000000476C8_ds_f l00000000000476C8_ds_t
l00000000000476C8_ds_f:
	goto l00000000000476D8
	// succ:  l00000000000476D8
l00000000000476C8_ds_t:
	goto l00000000000476EC
	// succ:  l00000000000476EC
l00000000000476D8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000476C8
	// succ:  l00000000000476C8
l00000000000476EC:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.badmcall2_exit:


// runtime.badreflectcall
// Return size: 0
void runtime.badreflectcall()
runtime.badreflectcall_entry:
	// succ:  l0000000000047728
l0000000000047728:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000047728_ds_t
	// succ:  l0000000000047728_ds_f l0000000000047728_ds_t
l0000000000047728_ds_f:
	goto l0000000000047738
	// succ:  l0000000000047738
l0000000000047728_ds_t:
	goto l000000000004774C
	// succ:  l000000000004774C
l0000000000047738:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000047728
	// succ:  l0000000000047728
l000000000004774C:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000030:word64] = r1
runtime.badreflectcall_exit:


// runtime.allgadd
// Return size: 0
void runtime.allgadd()
runtime.allgadd_entry:
	// succ:  l00000000000477E0
l00000000000477E0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -184
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000477E0_ds_t
	// succ:  l00000000000477E0_ds_f l00000000000477E0_ds_t
l00000000000477E0_ds_f:
	goto l00000000000477F4
	// succ:  l00000000000477F4
l00000000000477E0_ds_t:
	goto l0000000000047808
	// succ:  l0000000000047808
l00000000000477F4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000477E0
	// succ:  l00000000000477E0
l0000000000047808:
	sp = sp + -184
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x00000000000000C0:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.readgstatus (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.allgadd_exit:


// runtime.schedinit
// Return size: 0
void runtime.schedinit()
runtime.schedinit_entry:
	// succ:  l0000000000047C28
l0000000000047C28:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000047C28_ds_t
	// succ:  l0000000000047C28_ds_f l0000000000047C28_ds_t
l0000000000047C28_ds_f:
	goto l0000000000047C38
	// succ:  l0000000000047C38
l0000000000047C28_ds_t:
	goto l0000000000047C4C
	// succ:  l0000000000047C4C
l0000000000047C38:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000047C28
	// succ:  l0000000000047C28
l0000000000047C4C:
	sp = sp + -72
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000030:word64] = r30
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x000000000000142C:word32] = (word32) r1
	call runtime.tracebackinit (retsize: 0;)
	call runtime.moduledataverify (retsize: 0;)
	call runtime.stackinit (retsize: 0;)
	call runtime.mallocinit (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.mcommoninit (retsize: 0;)
	call runtime.alginit (retsize: 0;)
	call runtime.typelinksinit (retsize: 0;)
	call runtime.itabsinit (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.msigsave (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000058:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006810:word64] = r1
	r1 = Mem0[r2 + 0x0000000000000060:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006808:word64] = r1
	call runtime.goargs (retsize: 0;)
	call runtime.goenvs (retsize: 0;)
	call runtime.parsedebugvars (retsize: 0;)
	call runtime.gcinit (retsize: 0;)
	call runtime.nanotime (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001408:word64] = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006970:int32]
	Mem0[sp + 0x0000000000000028:word64] = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l0000000000047C4C_ds_t
	// succ:  l0000000000047C4C_ds_f l0000000000047C4C_ds_t
l0000000000047C4C_ds_f:
	goto l0000000000047D4C
	// succ:  l0000000000047D4C
l0000000000047C4C_ds_t:
	goto l0000000000047D54
	// succ:  l0000000000047D54
l0000000000047D4C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = r1
	// succ:  l0000000000047D54
l0000000000047D54:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.schedinit_exit:


// runtime.dumpgstatus
// Return size: 0
void runtime.dumpgstatus()
runtime.dumpgstatus_entry:
	// succ:  l0000000000047E60
l0000000000047E60:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000047E60_ds_t
	// succ:  l0000000000047E60_ds_f l0000000000047E60_ds_t
l0000000000047E60_ds_f:
	goto l0000000000047E70
	// succ:  l0000000000047E70
l0000000000047E60_ds_t:
	goto l0000000000047E84
	// succ:  l0000000000047E84
l0000000000047E70:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000047E60
	// succ:  l0000000000047E60
l0000000000047E84:
	sp = sp + -48
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000028:word64] = r30
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.readgstatus (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[r1 + 0x00000000000000C0:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.dumpgstatus_exit:


// runtime.checkmcount
// Return size: 0
void runtime.checkmcount()
runtime.checkmcount_entry:
	// succ:  l0000000000048068
l0000000000048068:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000048068_ds_t
	// succ:  l0000000000048068_ds_f l0000000000048068_ds_t
l0000000000048068_ds_f:
	goto l0000000000048078
	// succ:  l0000000000048078
l0000000000048068_ds_t:
	goto l000000000004808C
	// succ:  l000000000004808C
l0000000000048078:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000048068
	// succ:  l0000000000048068
l000000000004808C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001428:int32]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 + 0x000000000000142C:int32]
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l000000000004808C_ds_t
	// succ:  l000000000004808C_ds_f l000000000004808C_ds_t
l000000000004808C_ds_f:
	goto l00000000000480C0
	// succ:  l00000000000480C0
l000000000004808C_ds_t:
	goto l0000000000048150
	// succ:  l0000000000048150
l00000000000480C0:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x000000000000142C:int32]
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000048150:
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.checkmcount_exit
runtime.checkmcount_exit:


// runtime.mcommoninit
// Return size: 0
void runtime.mcommoninit()
runtime.mcommoninit_entry:
	// succ:  l0000000000048160
l0000000000048160:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000048160_ds_t
	// succ:  l0000000000048160_ds_f l0000000000048160_ds_t
l0000000000048160_ds_f:
	goto l0000000000048170
	// succ:  l0000000000048170
l0000000000048160_ds_t:
	goto l0000000000048184
	// succ:  l0000000000048184
l0000000000048170:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000048160
	// succ:  l0000000000048160
l0000000000048184:
	sp = sp + -72
	Mem0[sp:word64] = ra
	r3 = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	r2 = r30
	branch r1 == r30 l0000000000048184_ds_t
	// succ:  l0000000000048184_ds_f l0000000000048184_ds_t
l0000000000048184_ds_f:
	goto l00000000000481A4
	// succ:  l00000000000481A4
l0000000000048184_ds_t:
	goto l00000000000481FC
	// succ:  l00000000000481FC
l00000000000481A4:
	r1 = Mem0[sp + 0x0000000000000050:word64]
	branch r1 != 0x0000000000000000 l00000000000481A4_ds_t
	// succ:  l00000000000481A4_ds_f l00000000000481A4_ds_t
l00000000000481A4_ds_f:
	goto l00000000000481B0
	// succ:  l00000000000481B0
l00000000000481A4_ds_t:
	goto l00000000000481B4
	// succ:  l00000000000481B4
l00000000000481B0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000481B4
l00000000000481B4:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r1
	hi = r2 % r1
	branch r2 != 0x0000000000000000 l00000000000481B4_ds_t
	// succ:  l00000000000481B4_ds_f l00000000000481B4_ds_t
l00000000000481B4_ds_f:
	goto l00000000000481C4
	// succ:  l00000000000481C4
l00000000000481B4_ds_t:
	goto l00000000000481C8
	// succ:  l00000000000481C8
l00000000000481C4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000481C8
l00000000000481C8:
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000030:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r2
	Mem0[sp + 0x0000000000000038:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000040:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.callers (retsize: 0;)
l00000000000481FC:
	call runtime.cputicks (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000050:word64]
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r1 = (word64) Mem0[r3 + 0x00000000000000C0:uint32]
	r2 = 0x0000000049F60000
	r2 = r2 | 0x000000000000428A
runtime.mcommoninit_exit:


// runtime.ready
// Return size: 0
void runtime.ready()
runtime.ready_entry:
	// succ:  l0000000000048478
l0000000000048478:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000048478_ds_t
	// succ:  l0000000000048478_ds_f l0000000000048478_ds_t
l0000000000048478_ds_f:
	goto l0000000000048488
	// succ:  l0000000000048488
l0000000000048478_ds_t:
	goto l000000000004849C
	// succ:  l000000000004849C
l0000000000048488:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000048478
	// succ:  l0000000000048478
l000000000004849C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006A50:byte]
	branch r1 == 0x0000000000000000 l000000000004849C_ds_t
	// succ:  l000000000004849C_ds_f l000000000004849C_ds_t
l000000000004849C_ds_f:
	goto l00000000000484B8
	// succ:  l00000000000484B8
l000000000004849C_ds_t:
	goto l00000000000484D0
	// succ:  l00000000000484D0
l00000000000484B8:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.traceGoUnpark (retsize: 0;)
l00000000000484D0:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.readgstatus (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.ready_exit:


// runtime.gcprocs
// Return size: 0
void runtime.gcprocs()
runtime.gcprocs_entry:
	// succ:  l0000000000048720
l0000000000048720:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000048720_ds_t
	// succ:  l0000000000048720_ds_f l0000000000048720_ds_t
l0000000000048720_ds_f:
	goto l0000000000048730
	// succ:  l0000000000048730
l0000000000048720_ds_t:
	goto l0000000000048744
	// succ:  l0000000000048744
l0000000000048730:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000048720
	// succ:  l0000000000048720
l0000000000048744:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006974:int32]
	r3 = r1
	r1 = r3
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006970:int32]
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l0000000000048744_ds_t
	// succ:  l0000000000048744_ds_f l0000000000048744_ds_t
l0000000000048744_ds_f:
	goto l00000000000487AC
	// succ:  l00000000000487AC
l0000000000048744_ds_t:
	goto l00000000000487BC
	// succ:  l00000000000487BC
l00000000000487AC:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006970:int32]
	r3 = r1
	// succ:  l00000000000487BC
l00000000000487BC:
	r1 = r3
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l00000000000487BC_ds_t
	// succ:  l00000000000487BC_ds_f l00000000000487BC_ds_t
l00000000000487BC_ds_f:
	goto l00000000000487DC
	// succ:  l00000000000487DC
l00000000000487BC_ds_t:
	goto l00000000000487E8
	// succ:  l00000000000487E8
l00000000000487DC:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	r3 = r1
	// succ:  l00000000000487E8
l00000000000487E8:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001420:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 + r2
	r1 = r1
	r2 = r3
	Mem0[sp + 0x0000000000000010:word32] = (word32) r3
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 == 0x0000000000000000 l00000000000487E8_ds_t
	// succ:  l00000000000487E8_ds_f l00000000000487E8_ds_t
l00000000000487E8_ds_f:
	goto l0000000000048820
	// succ:  l0000000000048820
l00000000000487E8_ds_t:
	goto l0000000000048840
	// succ:  l0000000000048840
l0000000000048820:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001420:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 + r2
	r1 = r1
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
	// succ:  l0000000000048840
l0000000000048840:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:int32]
	Mem0[sp + 0x0000000000000020:word32] = (word32) r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcprocs_exit
runtime.gcprocs_exit:


// runtime.needaddgcproc
// Return size: 0
void runtime.needaddgcproc()
runtime.needaddgcproc_entry:
	// succ:  l0000000000048880
l0000000000048880:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000048880_ds_t
	// succ:  l0000000000048880_ds_f l0000000000048880_ds_t
l0000000000048880_ds_f:
	goto l0000000000048890
	// succ:  l0000000000048890
l0000000000048880_ds_t:
	goto l00000000000488A4
	// succ:  l00000000000488A4
l0000000000048890:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000048880
	// succ:  l0000000000048880
l00000000000488A4:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006974:int32]
	r3 = r1
	r1 = r3
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006970:int32]
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l00000000000488A4_ds_t
	// succ:  l00000000000488A4_ds_f l00000000000488A4_ds_t
l00000000000488A4_ds_f:
	goto l000000000004890C
	// succ:  l000000000004890C
l00000000000488A4_ds_t:
	goto l000000000004891C
	// succ:  l000000000004891C
l000000000004890C:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006970:int32]
	r3 = r1
	// succ:  l000000000004891C
l000000000004891C:
	r1 = r3
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l000000000004891C_ds_t
	// succ:  l000000000004891C_ds_f l000000000004891C_ds_t
l000000000004891C_ds_f:
	goto l000000000004893C
	// succ:  l000000000004893C
l000000000004891C_ds_t:
	goto l0000000000048948
	// succ:  l0000000000048948
l000000000004893C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	r3 = r1
	// succ:  l0000000000048948
l0000000000048948:
	r1 = r3
	r3 = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001420:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 + r2
	r1 = r1
	r2 = r3
	r2 = r2 - r1
	r2 = r2
	Mem0[sp + 0x0000000000000010:word32] = (word32) r2
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 != 0x0000000000000000 l0000000000048948_ds_t
	// succ:  l0000000000048948_ds_f l0000000000048948_ds_t
l0000000000048948_ds_f:
	goto l00000000000489C0
	// succ:  l00000000000489C0
l0000000000048948_ds_t:
	goto l00000000000489D4
	// succ:  l00000000000489D4
l00000000000489C0:
	Mem0[sp + 0x0000000000000020:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.needaddgcproc_exit
l00000000000489D4:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.needaddgcproc_exit
runtime.needaddgcproc_exit:


// runtime.helpgc
// Return size: 0
void runtime.helpgc()
runtime.helpgc_entry:
	// succ:  l00000000000489F0
l00000000000489F0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000489F0_ds_t
	// succ:  l00000000000489F0_ds_f l00000000000489F0_ds_t
l00000000000489F0_ds_f:
	goto l0000000000048A00
	// succ:  l0000000000048A00
l00000000000489F0_ds_t:
	goto l0000000000048A14
	// succ:  l0000000000048A14
l0000000000048A00:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000489F0
	// succ:  l00000000000489F0
l0000000000048A14:
	sp = sp + -56
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000030:word64] = r30
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r6 = 0x0000000000000000
runtime.helpgc_exit:


// runtime.freezetheworld
// Return size: 0
void runtime.freezetheworld()
runtime.freezetheworld_entry:
	// succ:  l0000000000048CE0
l0000000000048CE0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000048CE0_ds_t
	// succ:  l0000000000048CE0_ds_f l0000000000048CE0_ds_t
l0000000000048CE0_ds_f:
	goto l0000000000048CF0
	// succ:  l0000000000048CF0
l0000000000048CE0_ds_t:
	goto l0000000000048D04
	// succ:  l0000000000048D04
l0000000000048CF0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000048CE0
	// succ:  l0000000000048CE0
l0000000000048D04:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r2 = 0x0000000000000000
	r1 = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
runtime.freezetheworld_exit:


// runtime.readgstatus
// Return size: 0
void runtime.readgstatus()
runtime.readgstatus_entry:
	// succ:  l0000000000048E10
l0000000000048E10:
	sp = fp
	sp = sp + -24
	Mem0[sp:word64] = ra
runtime.readgstatus_exit:


// runtime.casfrom_Gscanstatus
// Return size: 0
void runtime.casfrom_Gscanstatus()
runtime.casfrom_Gscanstatus_entry:
	// succ:  l0000000000048E78
l0000000000048E78:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000048E78_ds_t
	// succ:  l0000000000048E78_ds_f l0000000000048E78_ds_t
l0000000000048E78_ds_f:
	goto l0000000000048E88
	// succ:  l0000000000048E88
l0000000000048E78_ds_t:
	goto l0000000000048E9C
	// succ:  l0000000000048E9C
l0000000000048E88:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000048E78
	// succ:  l0000000000048E78
l0000000000048E9C:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r5 = (word64) Mem0[sp + 0x000000000000004C:uint32]
	r4 = (word64) Mem0[sp + 0x0000000000000048:uint32]
	r1 = 0x0000000000000000
	r6 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000020:byte] = (byte) r6
runtime.casfrom_Gscanstatus_exit:


// runtime.castogscanstatus
// Return size: 0
void runtime.castogscanstatus()
runtime.castogscanstatus_entry:
	// succ:  l00000000000492A0
l00000000000492A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000492A0_ds_t
	// succ:  l00000000000492A0_ds_f l00000000000492A0_ds_t
l00000000000492A0_ds_f:
	goto l00000000000492B0
	// succ:  l00000000000492B0
l00000000000492A0_ds_t:
	goto l00000000000492C4
	// succ:  l00000000000492C4
l00000000000492B0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000492A0
	// succ:  l00000000000492A0
l00000000000492C4:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r5 = (word64) Mem0[sp + 0x0000000000000064:uint32]
	r4 = (word64) Mem0[sp + 0x0000000000000060:uint32]
	r1 = 0x0000000000000000
runtime.castogscanstatus_exit:


// runtime.casgstatus
// Return size: 0
void runtime.casgstatus()
runtime.casgstatus_entry:
	// succ:  l00000000000495E0
l00000000000495E0:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = ra
	r1 = (word64) Mem0[sp + 0x0000000000000080:uint32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.casgstatus_exit:


// runtime.scang
// Return size: 0
void runtime.scang()
runtime.scang_entry:
	// succ:  l0000000000049A20
l0000000000049A20:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000049A20_ds_t
	// succ:  l0000000000049A20_ds_f l0000000000049A20_ds_t
l0000000000049A20_ds_f:
	goto l0000000000049A30
	// succ:  l0000000000049A30
l0000000000049A20_ds_t:
	goto l0000000000049A44
	// succ:  l0000000000049A44
l0000000000049A30:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000049A20
	// succ:  l0000000000049A20
l0000000000049A44:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r2 = 0x0000000000000000
	Mem0[r4 + 0x00000000000000EB:byte] = (byte) r2
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	r1 = (word64) Mem0[r4 + 0x00000000000000EB:byte]
	branch r1 != 0x0000000000000000 l0000000000049A44_ds_t
	// succ:  l0000000000049A44_ds_f l0000000000049A44_ds_t
l0000000000049A44_ds_f:
	goto l0000000000049A6C
	// succ:  l0000000000049A6C
l0000000000049A44_ds_t:
	goto l0000000000049B8C
	// succ:  l0000000000049B8C
l0000000000049A6C:
	r1 = r4
	Mem0[sp + 0x0000000000000008:word64] = r4
	call runtime.readgstatus (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
l0000000000049B8C:
	r2 = 0x0000000000000000
	Mem0[r4 + 0x00000000000000EA:byte] = (byte) r2
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.scang_exit
runtime.scang_exit:


// runtime.restartg
// Return size: 0
void runtime.restartg()
runtime.restartg_entry:
	// succ:  l0000000000049ED8
l0000000000049ED8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000049ED8_ds_t
	// succ:  l0000000000049ED8_ds_f l0000000000049ED8_ds_t
l0000000000049ED8_ds_f:
	goto l0000000000049EE8
	// succ:  l0000000000049EE8
l0000000000049ED8_ds_t:
	goto l0000000000049EFC
	// succ:  l0000000000049EFC
l0000000000049EE8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000049ED8
	// succ:  l0000000000049ED8
l0000000000049EFC:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.readgstatus (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000020:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.restartg_exit:


// runtime.stopTheWorldWithSema
// Return size: 0
void runtime.stopTheWorldWithSema()
runtime.stopTheWorldWithSema_entry:
	// succ:  l000000000004A0C0
l000000000004A0C0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004A0C0_ds_t
	// succ:  l000000000004A0C0_ds_f l000000000004A0C0_ds_t
l000000000004A0C0_ds_f:
	goto l000000000004A0D0
	// succ:  l000000000004A0D0
l000000000004A0C0_ds_t:
	goto l000000000004A0E4
	// succ:  l000000000004A0E4
l000000000004A0D0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004A0C0
	// succ:  l000000000004A0C0
l000000000004A0E4:
	sp = sp + -72
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000040:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l000000000004A0E4_ds_t
	// succ:  l000000000004A0E4_ds_f l000000000004A0E4_ds_t
l000000000004A0E4_ds_f:
	goto l000000000004A110
	// succ:  l000000000004A110
l000000000004A0E4_ds_t:
	goto l000000000004A130
	// succ:  l000000000004A130
l000000000004A110:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004A130:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006974:int32]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000014C4:word32] = (word32) r1
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.stopTheWorldWithSema_exit:


// runtime.mhelpgc
// Return size: 0
void runtime.mhelpgc()
runtime.mhelpgc_entry:
	// succ:  l000000000004A618
l000000000004A618:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004A618_ds_t
	// succ:  l000000000004A618_ds_f l000000000004A618_ds_t
l000000000004A618_ds_f:
	goto l000000000004A628
	// succ:  l000000000004A628
l000000000004A618_ds_t:
	goto l000000000004A63C
	// succ:  l000000000004A63C
l000000000004A628:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004A618
	// succ:  l000000000004A618
l000000000004A63C:
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[r2 + 0x00000000000000F0:word32] = (word32) r1
	return
	// succ:  runtime.mhelpgc_exit
runtime.mhelpgc_exit:


// runtime.startTheWorldWithSema
// Return size: 0
void runtime.startTheWorldWithSema()
runtime.startTheWorldWithSema_entry:
	// succ:  l000000000004A658
l000000000004A658:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004A658_ds_t
	// succ:  l000000000004A658_ds_f l000000000004A658_ds_t
l000000000004A658_ds_f:
	goto l000000000004A668
	// succ:  l000000000004A668
l000000000004A658_ds_t:
	goto l000000000004A67C
	// succ:  l000000000004A67C
l000000000004A668:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004A658
	// succ:  l000000000004A658
l000000000004A67C:
	sp = sp + -64
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000038:word64] = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r4 = r2
	r2 = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	call runtime.netpoll (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	r2 = r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.injectglist (retsize: 0;)
	call runtime.needaddgcproc (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000008:byte]
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006974:int32]
	r3 = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006968:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l000000000004A67C_ds_t
	// succ:  l000000000004A67C_ds_f l000000000004A67C_ds_t
l000000000004A67C_ds_f:
	goto l000000000004A738
	// succ:  l000000000004A738
l000000000004A67C_ds_t:
	goto l000000000004A758
	// succ:  l000000000004A758
l000000000004A738:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006968:int32]
	r3 = r1
	r1 = 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006968:word32] = (word32) r1
	// succ:  l000000000004A758
l000000000004A758:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.procresize (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
runtime.startTheWorldWithSema_exit:


// runtime.mstart
// Return size: 0
void runtime.mstart()
runtime.mstart_entry:
	// succ:  l000000000004AA68
l000000000004AA68:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = ra
	r4 = r30
	r1 = Mem0[r30:word64]
	branch r1 != 0x0000000000000000 l000000000004AA68_ds_t
	// succ:  l000000000004AA68_ds_f l000000000004AA68_ds_t
l000000000004AA68_ds_f:
	goto l000000000004AA80
	// succ:  l000000000004AA80
l000000000004AA68_ds_t:
	goto l000000000004AAC0
	// succ:  l000000000004AAC0
l000000000004AA80:
	r2 = Mem0[r4 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000004AA80_ds_t
	// succ:  l000000000004AA80_ds_f l000000000004AA80_ds_t
l000000000004AA80_ds_f:
	goto l000000000004AA94
	// succ:  l000000000004AA94
l000000000004AA80_ds_t:
	goto l000000000004AA9C
	// succ:  l000000000004AA9C
l000000000004AA94:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r1
	// succ:  l000000000004AA9C
l000000000004AA9C:
	lo = r3 / sp
	hi = r3 % sp
	r3 = r3
	Mem0[r4 + 0x0000000000000008:word64] = r3
	r2 = Mem0[r4 + 0x0000000000000008:word64]
	r3 = Mem0[sp + 0x0000000000000008:word64]
l000000000004AAC0:
	branch r4 != 0x0000000000000000 l000000000004AAC0_ds_t
	// succ:  l000000000004AAC0_ds_f l000000000004AAC0_ds_t
l000000000004AAC0_ds_f:
	goto l000000000004AAC8
	// succ:  l000000000004AAC8
l000000000004AAC0_ds_t:
	goto l000000000004AACC
	// succ:  l000000000004AACC
l000000000004AAC8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004AACC
l000000000004AACC:
	r2 = Mem0[r4:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4 + 0x0000000000000010:word64] = r2
	r1 = r4
	r2 = r4
	r3 = Mem0[r4 + 0x0000000000000010:word64]
	Mem0[r4 + 0x0000000000000018:word64] = r3
	call runtime.mstart1 (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mstart_exit
runtime.mstart_exit:


// runtime.mstart1
// Return size: 0
void runtime.mstart1()
runtime.mstart1_entry:
	// succ:  l000000000004AB08
l000000000004AB08:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004AB08_ds_t
	// succ:  l000000000004AB08_ds_f l000000000004AB08_ds_t
l000000000004AB08_ds_f:
	goto l000000000004AB18
	// succ:  l000000000004AB18
l000000000004AB08_ds_t:
	goto l000000000004AB2C
	// succ:  l000000000004AB2C
l000000000004AB18:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004AB08
	// succ:  l000000000004AB08
l000000000004AB2C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r3 = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	Mem0[sp + 0x0000000000000018:word64] = r30
	r2 = r30
	branch r1 == r30 l000000000004AB2C_ds_t
	// succ:  l000000000004AB2C_ds_f l000000000004AB2C_ds_t
l000000000004AB2C_ds_f:
	goto l000000000004AB50
	// succ:  l000000000004AB50
l000000000004AB2C_ds_t:
	goto l000000000004AB74
	// succ:  l000000000004AB74
l000000000004AB50:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004AB74:
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000004AB74_ds_t
	// succ:  l000000000004AB74_ds_f l000000000004AB74_ds_t
l000000000004AB74_ds_f:
	goto l000000000004AB8C
	// succ:  l000000000004AB8C
l000000000004AB74_ds_t:
	goto l000000000004AB90
	// succ:  l000000000004AB90
l000000000004AB8C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004AB90
l000000000004AB90:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.gosave (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	Mem0[r1 + 0x0000000000000048:word64] = r2
	call runtime.asminit (retsize: 0;)
	call runtime.minit (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[r4 + 0x0000000000000030:word64]
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	branch r1 != r2 l000000000004AB90_ds_t
	// succ:  l000000000004AB90_ds_f l000000000004AB90_ds_t
l000000000004AB90_ds_f:
	goto l000000000004ABE8
	// succ:  l000000000004ABE8
l000000000004AB90_ds_t:
	goto l000000000004AC40
	// succ:  l000000000004AC40
l000000000004ABE8:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006995:byte]
	branch r1 == 0x0000000000000000 l000000000004ABE8_ds_t
	// succ:  l000000000004ABE8_ds_f l000000000004ABE8_ds_t
l000000000004ABE8_ds_f:
	goto l000000000004ABFC
	// succ:  l000000000004ABFC
l000000000004ABE8_ds_t:
	goto l000000000004AC2C
	// succ:  l000000000004AC2C
l000000000004ABFC:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x000000000000699E:byte]
	branch r1 != 0x0000000000000000 l000000000004ABFC_ds_t
	// succ:  l000000000004ABFC_ds_f l000000000004ABFC_ds_t
l000000000004ABFC_ds_f:
	goto l000000000004AC10
	// succ:  l000000000004AC10
l000000000004ABFC_ds_t:
	goto l000000000004AC2C
	// succ:  l000000000004AC2C
l000000000004AC10:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x000000000000699E:byte] = (byte) r1
	call runtime.newextram (retsize: 0;)
l000000000004AC2C:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	call runtime.initsig (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000018:word64]
	// succ:  l000000000004AC40
l000000000004AC40:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x0000000000000098:word64]
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l000000000004AC40_ds_t
	// succ:  l000000000004AC40_ds_f l000000000004AC40_ds_t
l000000000004AC40_ds_f:
	goto l000000000004AC54
	// succ:  l000000000004AC54
l000000000004AC40_ds_t:
	goto l000000000004AC68
	// succ:  l000000000004AC68
l000000000004AC54:
	r22 = r3
	r1 = Mem0[r3:word64]
	call r1 (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000018:word64]
	// succ:  l000000000004AC68
l000000000004AC68:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000F0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l000000000004AC68_ds_t
	// succ:  l000000000004AC68_ds_f l000000000004AC68_ds_t
l000000000004AC68_ds_f:
	goto l000000000004AC84
	// succ:  l000000000004AC84
l000000000004AC68_ds_t:
	goto l000000000004ACB0
	// succ:  l000000000004ACB0
l000000000004AC84:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = 0x0000000000000000
	Mem0[r2 + 0x00000000000000F0:word32] = (word32) r1
	call runtime.stopm (retsize: 0;)
	// succ:  l000000000004AC98
l000000000004AC98:
	call runtime.schedule (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mstart1_exit
l000000000004ACB0:
	r1 = Mem0[r4 + 0x0000000000000030:word64]
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	branch r1 == r2 l000000000004ACB0_ds_t
	// succ:  l000000000004ACB0_ds_f l000000000004ACB0_ds_t
l000000000004ACB0_ds_f:
	goto l000000000004ACC8
	// succ:  l000000000004ACC8
l000000000004ACB0_ds_t:
	goto l000000000004AC98
	// succ:  l000000000004AC98
l000000000004ACC8:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r2 = Mem0[r2 + 0x00000000000000B8:word64]
	r1 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.acquirep (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = 0x0000000000000000
	Mem0[r2 + 0x00000000000000B8:word64] = 0x0000000000000000
	call runtime.schedule (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mstart1_exit
runtime.mstart1_exit:


// runtime.forEachP
// Return size: 0
void runtime.forEachP()
runtime.forEachP_entry:
	// succ:  l000000000004AD08
l000000000004AD08:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000018:word64]
	r2 = sp + -160
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000004AD08_ds_t
	// succ:  l000000000004AD08_ds_f l000000000004AD08_ds_t
l000000000004AD08_ds_f:
	goto l000000000004AD1C
	// succ:  l000000000004AD1C
l000000000004AD08_ds_t:
	goto l000000000004AD30
	// succ:  l000000000004AD30
l000000000004AD1C:
	r3 = ra
	call runtime.morestackc (retsize: 0;)
	goto l000000000004AD08
	// succ:  l000000000004AD08
l000000000004AD30:
	sp = sp + -160
	Mem0[sp:word64] = ra
	r4 = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r3 = Mem0[r30 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000058:word64] = r3
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = Mem0[r2 + 0x00000000000000B0:word64]
	Mem0[sp + 0x0000000000000068:word64] = r2
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x00000000000014E8:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l000000000004AD30_ds_t
	// succ:  l000000000004AD30_ds_f l000000000004AD30_ds_t
l000000000004AD30_ds_f:
	goto l000000000004ADBC
	// succ:  l000000000004ADBC
l000000000004AD30_ds_t:
	goto l000000000004ADDC
	// succ:  l000000000004ADDC
l000000000004ADBC:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004ADDC:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006974:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 - r2
	r1 = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000014E8:word32] = (word32) r1
	r1 = Mem0[sp + 0x00000000000000A8:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l000000000004ADDC_ds_t
	// succ:  l000000000004ADDC_ds_f l000000000004ADDC_ds_t
l000000000004ADDC_ds_f:
	goto l000000000004AE20
	// succ:  l000000000004AE20
l000000000004ADDC_ds_t:
	goto l000000000004B498
	// succ:  l000000000004B498
l000000000004AE20:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000014E0:word64] = r1
	goto l000000000004AE2C
	// succ:  l000000000004AE2C
l000000000004AE20_ds_f:
	goto l000000000004AE48
	// succ:  l000000000004AE48
l000000000004AE20_ds_t:
	goto l000000000004B484
	// succ:  l000000000004B484
l000000000004AE2C:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006974:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l000000000004AE20_ds_t
	goto l000000000004AE20_ds_f
	// succ:  l000000000004AE20_ds_f l000000000004AE20_ds_t
l000000000004AE48:
	r3 = 0x00000000000D0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	branch r3 != 0x0000000000000000 l000000000004AE48_ds_t
	// succ:  l000000000004AE48_ds_f l000000000004AE48_ds_t
l000000000004AE48_ds_f:
	goto l000000000004AE5C
	// succ:  l000000000004AE5C
l000000000004AE48_ds_t:
	goto l000000000004AE60
	// succ:  l000000000004AE60
l000000000004AE5C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004AE60
l000000000004AE60:
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	Mem0[sp + 0x0000000000000088:word64] = r3
	Mem0[sp + 0x0000000000000090:word64] = r1
	Mem0[sp + 0x0000000000000098:word64] = r4
	Mem0[sp + 0x0000000000000080:word64] = r4
	r5 = 0x0000000000000000
	Mem0[sp + 0x0000000000000078:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r1
	Mem0[sp + 0x0000000000000070:word64] = r3
	r4 = r3
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r1 = r5
	r23 = (word64) (r5 < r2)
	branch r23 == 0x0000000000000000 l000000000004AE60_ds_t
	// succ:  l000000000004AE60_ds_f l000000000004AE60_ds_t
l000000000004AE60_ds_f:
	goto l000000000004AE9C
	// succ:  l000000000004AE9C
l000000000004AE60_ds_t:
	goto l000000000004AF24
	// succ:  l000000000004AF24
l000000000004AE9C:
	Mem0[sp + 0x0000000000000060:word64] = r4
	r3 = Mem0[r4:word64]
	Mem0[sp + 0x0000000000000040:word64] = r5
	r2 = Mem0[sp + 0x0000000000000068:word64]
	branch r3 == r2 l000000000004AE9C_ds_t
	// succ:  l000000000004AE9C_ds_f l000000000004AE9C_ds_t
l000000000004AE9C_ds_f:
	goto l000000000004AEB4
	// succ:  l000000000004AEB4
l000000000004AE9C_ds_t:
	goto l000000000004AEF8
	// succ:  l000000000004AEF8
l000000000004AEB4:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000004AEB4_ds_t
	// succ:  l000000000004AEB4_ds_f l000000000004AEB4_ds_t
l000000000004AEB4_ds_f:
	goto l000000000004AEC4
	// succ:  l000000000004AEC4
l000000000004AEB4_ds_t:
	goto l000000000004AEC8
	// succ:  l000000000004AEC8
l000000000004AEC4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004AEC8
l000000000004AEC8:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
l000000000004AEF8:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r4 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r5
	hi = r1 % r5
	r5 = r1
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r1 = r5
	r23 = (word64) (r5 < r2)
	branch r23 != 0x0000000000000000 l000000000004AEF8_ds_t
	// succ:  l000000000004AEF8_ds_f l000000000004AEF8_ds_t
l000000000004AEF8_ds_f:
	goto l000000000004AF24
	// succ:  l000000000004AF24
l000000000004AEF8_ds_t:
	goto l000000000004AE9C
	// succ:  l000000000004AE9C
l000000000004AF24:
	call runtime.preemptall (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000001438:word64]
	branch r3 == 0x0000000000000000 l000000000004AF24_ds_t
	call runtime.preemptall (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000001438:word64]
	branch r3 == 0x0000000000000000 l000000000004AF24_ds_t
	// succ:  l000000000004AF24_ds_f l000000000004AF24_ds_t l000000000004AF24_ds_f l000000000004AF24_ds_t
l000000000004AF24_ds_f:
	goto l000000000004AF40
	// succ:  l000000000004AF40
l000000000004AF24_ds_f:
	goto l000000000004AF40
	// succ:  l000000000004AF40
l000000000004AF24_ds_t:
	goto l000000000004AFF8
	// succ:  l000000000004AFF8
l000000000004AF24_ds_t:
	goto l000000000004AFF8
	// succ:  l000000000004AFF8
l000000000004AF40:
	Mem0[sp + 0x0000000000000050:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000004AF40_ds_t
	Mem0[sp + 0x0000000000000050:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000004AF40_ds_t
	// succ:  l000000000004AF40_ds_f l000000000004AF40_ds_t l000000000004AF40_ds_f l000000000004AF40_ds_t
l000000000004AF40_ds_f:
	goto l000000000004AF54
	// succ:  l000000000004AF54
l000000000004AF40_ds_f:
	goto l000000000004AF54
	// succ:  l000000000004AF54
l000000000004AF40_ds_t:
	goto l000000000004AF58
	// succ:  l000000000004AF58
l000000000004AF40_ds_t:
	goto l000000000004AF58
	// succ:  l000000000004AF58
l000000000004AF54:
	Mem0[r0:word64] = 0x0000000000000000
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004AF58
l000000000004AF58:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
l000000000004AFF8:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x00000000000014E8:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 != 0x0000000000000000 l000000000004AFF8_ds_t
	// succ:  l000000000004AFF8_ds_f l000000000004AFF8_ds_t
l000000000004AFF8_ds_f:
	goto l000000000004B01C
	// succ:  l000000000004B01C
l000000000004AFF8_ds_t:
	goto l000000000004B46C
	// succ:  l000000000004B46C
l000000000004B01C:
	Mem0[sp + 0x0000000000000020:byte] = (byte) 0x0000000000000000
	// succ:  l000000000004B020
l000000000004B020:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
l000000000004B46C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:byte] = (byte) r1
	goto l000000000004B020
	// succ:  l000000000004B020
l000000000004B484:
	call runtime.panicslice (retsize: 0;)
l000000000004B498:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	goto l000000000004AE2C
	// succ:  l000000000004AE2C
runtime.forEachP_exit:


// runtime.runSafePointFn
// Return size: 0
void runtime.runSafePointFn()
runtime.runSafePointFn_entry:
	// succ:  l000000000004B4C0
l000000000004B4C0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004B4C0_ds_t
	// succ:  l000000000004B4C0_ds_f l000000000004B4C0_ds_t
l000000000004B4C0_ds_f:
	goto l000000000004B4D0
	// succ:  l000000000004B4D0
l000000000004B4C0_ds_t:
	goto l000000000004B4E4
	// succ:  l000000000004B4E4
l000000000004B4D0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004B4C0
	// succ:  l000000000004B4C0
l000000000004B4E4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = Mem0[r2 + 0x00000000000000B0:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000004B4E4_ds_t
	// succ:  l000000000004B4E4_ds_f l000000000004B4E4_ds_t
l000000000004B4E4_ds_f:
	goto l000000000004B508
	// succ:  l000000000004B508
l000000000004B4E4_ds_t:
	goto l000000000004B50C
	// succ:  l000000000004B50C
l000000000004B508:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004B50C
l000000000004B50C:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
runtime.runSafePointFn_exit:


// runtime.allocm
// Return size: 0
void runtime.allocm()
runtime.allocm_entry:
	// succ:  l000000000004B660
l000000000004B660:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004B660_ds_t
	// succ:  l000000000004B660_ds_f l000000000004B660_ds_t
l000000000004B660_ds_f:
	goto l000000000004B670
	// succ:  l000000000004B670
l000000000004B660_ds_t:
	goto l000000000004B684
	// succ:  l000000000004B684
l000000000004B670:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004B660
	// succ:  l000000000004B660
l000000000004B684:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r5 = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r4 = r2
	r2 = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	Mem0[sp + 0x0000000000000020:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000004B684_ds_t
	// succ:  l000000000004B684_ds_f l000000000004B684_ds_t
l000000000004B684_ds_f:
	goto l000000000004B6CC
	// succ:  l000000000004B6CC
l000000000004B684_ds_t:
	goto l000000000004B6DC
	// succ:  l000000000004B6DC
l000000000004B6CC:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.acquirep (retsize: 0;)
l000000000004B6DC:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.newobject (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r1 = r5
	Mem0[sp + 0x0000000000000018:word64] = r5
	branch r5 != 0x0000000000000000 l000000000004B6DC_ds_t
	// succ:  l000000000004B6DC_ds_f l000000000004B6DC_ds_t
l000000000004B6DC_ds_f:
	goto l000000000004B708
	// succ:  l000000000004B708
l000000000004B6DC_ds_t:
	goto l000000000004B70C
	// succ:  l000000000004B70C
l000000000004B708:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004B70C
l000000000004B70C:
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000004B70C_ds_t
	// succ:  l000000000004B70C_ds_f l000000000004B70C_ds_t
l000000000004B70C_ds_f:
	goto l000000000004B728
	// succ:  l000000000004B728
l000000000004B70C_ds_t:
	goto l000000000004B904
	// succ:  l000000000004B904
l000000000004B728:
	Mem0[r1 + 0x0000000000000098:word64] = r2
	goto l000000000004B72C
	// succ:  l000000000004B72C
l000000000004B728_ds_f:
	goto l000000000004B750
	// succ:  l000000000004B750
l000000000004B728_ds_t:
	goto l000000000004B89C
	// succ:  l000000000004B89C
l000000000004B72C:
	r1 = r5
	Mem0[sp + 0x0000000000000008:word64] = r5
	call runtime.mcommoninit (retsize: 0;)
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006995:byte]
	branch r1 != 0x0000000000000000 l000000000004B728_ds_t
	goto l000000000004B728_ds_f
	// succ:  l000000000004B728_ds_f l000000000004B728_ds_t
l000000000004B750:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.malg (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000010:word64]
	r1 = Mem0[sp + 0x0000000000000018:word64]
	branch r1 != 0x0000000000000000 l000000000004B750_ds_t
	// succ:  l000000000004B750_ds_f l000000000004B750_ds_t
l000000000004B750_ds_f:
	goto l000000000004B774
	// succ:  l000000000004B774
l000000000004B750_ds_t:
	goto l000000000004B778
	// succ:  l000000000004B778
l000000000004B774:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004B778
l000000000004B778:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000004B778_ds_t
	// succ:  l000000000004B778_ds_f l000000000004B778_ds_t
l000000000004B778_ds_f:
	goto l000000000004B790
	// succ:  l000000000004B790
l000000000004B778_ds_t:
	goto l000000000004B880
	// succ:  l000000000004B880
l000000000004B790:
	Mem0[r1:word64] = r2
	goto l000000000004B794
	// succ:  l000000000004B794
l000000000004B790_ds_f:
	goto l000000000004B7A4
	// succ:  l000000000004B7A4
l000000000004B790_ds_t:
	goto l000000000004B7A8
	// succ:  l000000000004B7A8
l000000000004B794:
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r2 = Mem0[r1:word64]
	branch r2 != 0x0000000000000000 l000000000004B790_ds_t
	goto l000000000004B790_ds_f
	// succ:  l000000000004B790_ds_f l000000000004B790_ds_t
l000000000004B7A4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004B7A8
l000000000004B7A8:
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000004B7A8_ds_t
	// succ:  l000000000004B7A8_ds_f l000000000004B7A8_ds_t
l000000000004B7A8_ds_f:
	goto l000000000004B7C4
	// succ:  l000000000004B7C4
l000000000004B7A8_ds_t:
	goto l000000000004B864
	// succ:  l000000000004B864
l000000000004B7C4:
	Mem0[r2 + 0x0000000000000030:word64] = r1
	goto l000000000004B7C8
	// succ:  l000000000004B7C8
l000000000004B7C4_ds_f:
	goto l000000000004B7E0
	// succ:  l000000000004B7E0
l000000000004B7C4_ds_t:
	goto l000000000004B7E8
	// succ:  l000000000004B7E8
l000000000004B7C8:
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = Mem0[sp + 0x0000000000000030:word64]
	branch r1 != r2 l000000000004B7C4_ds_t
	goto l000000000004B7C4_ds_f
	// succ:  l000000000004B7C4_ds_f l000000000004B7C4_ds_t
l000000000004B7E0:
	call runtime.releasep (retsize: 0;)
l000000000004B7E8:
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[r1 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r4 = r2
	r2 = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000004B7E8_ds_t
	// succ:  l000000000004B7E8_ds_f l000000000004B7E8_ds_t
l000000000004B7E8_ds_f:
	goto l000000000004B830
	// succ:  l000000000004B830
l000000000004B7E8_ds_t:
	goto l000000000004B84C
	// succ:  l000000000004B84C
l000000000004B830:
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r1 = (word64) Mem0[r1 + 0x00000000000000E8:byte]
	branch r1 == 0x0000000000000000 l000000000004B830_ds_t
	// succ:  l000000000004B830_ds_f l000000000004B830_ds_t
l000000000004B830_ds_f:
	goto l000000000004B840
	// succ:  l000000000004B840
l000000000004B830_ds_t:
	goto l000000000004B84C
	// succ:  l000000000004B84C
l000000000004B840:
	r1 = Mem0[sp + 0x0000000000000020:word64]
l000000000004B84C:
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.allocm_exit
l000000000004B864:
	lo = r3 / r2
	hi = r3 % r2
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	goto l000000000004B7C8
	// succ:  l000000000004B7C8
l000000000004B880:
	r3 = r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	goto l000000000004B794
	// succ:  l000000000004B794
l000000000004B89C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.malg (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000010:word64]
	r1 = Mem0[sp + 0x0000000000000018:word64]
	branch r1 != 0x0000000000000000 l000000000004B89C_ds_t
	// succ:  l000000000004B89C_ds_f l000000000004B89C_ds_t
l000000000004B89C_ds_f:
	goto l000000000004B8C0
	// succ:  l000000000004B8C0
l000000000004B89C_ds_t:
	goto l000000000004B8C4
	// succ:  l000000000004B8C4
l000000000004B8C0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004B8C4
l000000000004B8C4:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l000000000004B8C4_ds_t
	// succ:  l000000000004B8C4_ds_f l000000000004B8C4_ds_t
l000000000004B8C4_ds_f:
	goto l000000000004B8DC
	// succ:  l000000000004B8DC
l000000000004B8C4_ds_t:
	goto l000000000004B8E8
	// succ:  l000000000004B8E8
l000000000004B8DC:
	Mem0[r1:word64] = r2
	goto l000000000004B794
	// succ:  l000000000004B794
l000000000004B8E8:
	r3 = r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	goto l000000000004B794
	// succ:  l000000000004B794
l000000000004B904:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000018:word64]
	goto l000000000004B72C
	// succ:  l000000000004B72C
runtime.allocm_exit:


// runtime.needm
// Return size: 0
void runtime.needm()
runtime.needm_entry:
	// succ:  l000000000004B928
l000000000004B928:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = ra
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006995:byte]
	branch r1 == 0x0000000000000000 l000000000004B928_ds_t
	// succ:  l000000000004B928_ds_f l000000000004B928_ds_t
l000000000004B928_ds_f:
	goto l000000000004B944
	// succ:  l000000000004B944
l000000000004B928_ds_t:
	goto l000000000004B9C8
	// succ:  l000000000004B9C8
l000000000004B944:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x000000000000699E:byte]
	branch r1 != 0x0000000000000000 l000000000004B944_ds_t
	// succ:  l000000000004B944_ds_f l000000000004B944_ds_t
l000000000004B944_ds_f:
	goto l000000000004B958
	// succ:  l000000000004B958
l000000000004B944_ds_t:
	goto l000000000004B9C8
	// succ:  l000000000004B9C8
l000000000004B958:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r4 = Mem0[r23 + 0x00000000000006D8:word64]
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000006D0:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000006D8:word64]
	r3 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r2)
	branch r23 != 0x0000000000000000 l000000000004B958_ds_t
	// succ:  l000000000004B958_ds_f l000000000004B958_ds_t
l000000000004B958_ds_f:
	goto l000000000004B994
	// succ:  l000000000004B994
l000000000004B958_ds_t:
	goto l000000000004B9A0
	// succ:  l000000000004B9A0
l000000000004B994:
	call runtime.panicindex (retsize: 0;)
l000000000004B9A0:
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = r4
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	call runtime.write (retsize: 0;)
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.exit (retsize: 0;)
l000000000004B9C8:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	call runtime.lockextra (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000010:word64]
	branch r4 != 0x0000000000000000 l000000000004B9C8_ds_t
	// succ:  l000000000004B9C8_ds_f l000000000004B9C8_ds_t
l000000000004B9C8_ds_f:
	goto l000000000004B9E4
	// succ:  l000000000004B9E4
l000000000004B9C8_ds_t:
	goto l000000000004B9E8
	// succ:  l000000000004B9E8
l000000000004B9E4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004B9E8
l000000000004B9E8:
	r2 = Mem0[r4 + 0x0000000000000128:word64]
	branch r2 == 0x0000000000000000 l000000000004B9E8_ds_t
	// succ:  l000000000004B9E8_ds_f l000000000004B9E8_ds_t
l000000000004B9E8_ds_f:
	goto l000000000004B9F4
	// succ:  l000000000004B9F4
l000000000004B9E8_ds_t:
	goto l000000000004BAA0
	// succ:  l000000000004BAA0
l000000000004B9F4:
	Mem0[r4 + 0x00000000000002F8:byte] = (byte) 0x0000000000000000
	// succ:  l000000000004B9F8
l000000000004B9F8:
	Mem0[sp + 0x0000000000000028:word64] = r4
	r2 = Mem0[r4 + 0x0000000000000128:word64]
	r1 = r2
	r3 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.unlockextra (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.msigsave (retsize: 0;)
	call runtime.sigblock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.setg (retsize: 0;)
	r4 = r30
	lo = r2 / sp
	hi = r2 % sp
	r2 = r2
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r30 + 0x0000000000000008:word64] = r2
	lo = r2 / sp
	hi = r2 % sp
	r2 = r2
	r3 = 0x0000000000008000
l000000000004BAA0:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	Mem0[r4 + 0x00000000000002F8:byte] = (byte) r2
	goto l000000000004B9F8
	// succ:  l000000000004B9F8
runtime.needm_exit:


// runtime.newextram
// Return size: 0
void runtime.newextram()
runtime.newextram_entry:
	// succ:  l000000000004BAB0
l000000000004BAB0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004BAB0_ds_t
	// succ:  l000000000004BAB0_ds_f l000000000004BAB0_ds_t
l000000000004BAB0_ds_f:
	goto l000000000004BAC0
	// succ:  l000000000004BAC0
l000000000004BAB0_ds_t:
	goto l000000000004BAD4
	// succ:  l000000000004BAD4
l000000000004BAC0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004BAB0
	// succ:  l000000000004BAB0
l000000000004BAD4:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.newextram_exit:


// runtime.oneNewExtraM
// Return size: 0
void runtime.oneNewExtraM()
runtime.oneNewExtraM_entry:
	// succ:  l000000000004BC18
l000000000004BC18:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004BC18_ds_t
	// succ:  l000000000004BC18_ds_f l000000000004BC18_ds_t
l000000000004BC18_ds_f:
	goto l000000000004BC28
	// succ:  l000000000004BC28
l000000000004BC18_ds_t:
	goto l000000000004BC3C
	// succ:  l000000000004BC3C
l000000000004BC28:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004BC18
	// succ:  l000000000004BC18
l000000000004BC3C:
	sp = sp + -80
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	call runtime.allocm (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.malg (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000010:word64]
	r3 = 0x00000000000A0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	r2 = 0x0000000000090000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000040:word64] = r2
	Mem0[sp + 0x0000000000000030:word64] = r2
	Mem0[sp + 0x0000000000000048:word64] = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	lo = r1 / sp
	hi = r1 % sp
runtime.oneNewExtraM_exit:


// runtime.dropm
// Return size: 0
void runtime.dropm()
runtime.dropm_entry:
	// succ:  l000000000004BF18
l000000000004BF18:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004BF18_ds_t
	// succ:  l000000000004BF18_ds_f l000000000004BF18_ds_t
l000000000004BF18_ds_f:
	goto l000000000004BF28
	// succ:  l000000000004BF28
l000000000004BF18_ds_t:
	goto l000000000004BF3C
	// succ:  l000000000004BF3C
l000000000004BF28:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004BF18
	// succ:  l000000000004BF18
l000000000004BF3C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r3 = r1
	Mem0[sp + 0x0000000000000028:word64] = r1
	branch r1 != 0x0000000000000000 l000000000004BF3C_ds_t
	// succ:  l000000000004BF3C_ds_f l000000000004BF3C_ds_t
l000000000004BF3C_ds_f:
	goto l000000000004BF58
	// succ:  l000000000004BF58
l000000000004BF3C_ds_t:
	goto l000000000004BF5C
	// succ:  l000000000004BF5C
l000000000004BF58:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004BF5C
l000000000004BF5C:
	r2 = Mem0[r1 + 0x0000000000000058:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	r2 = Mem0[r1 + 0x0000000000000060:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	call runtime.sigblock (retsize: 0;)
	call runtime.unminit (retsize: 0;)
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	call runtime.lockextra (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r1 = Mem0[sp + 0x0000000000000028:word64]
	branch r1 != 0x0000000000000000 l000000000004BF5C_ds_t
	// succ:  l000000000004BF5C_ds_f l000000000004BF5C_ds_t
l000000000004BF5C_ds_f:
	goto l000000000004BFA0
	// succ:  l000000000004BFA0
l000000000004BF5C_ds_t:
	goto l000000000004BFA4
	// succ:  l000000000004BFA4
l000000000004BFA0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004BFA4
l000000000004BFA4:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	r2 = r3
	Mem0[r1:word64] = r3
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	call runtime.setg (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlockextra (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.msigrestore (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.dropm_exit
runtime.dropm_exit:


// runtime.lockextra
// Return size: 0
void runtime.lockextra()
runtime.lockextra_entry:
	// succ:  l000000000004C000
l000000000004C000:
	sp = fp
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	goto l000000000004C010
	// succ:  l000000000004C010
l000000000004C000_ds_f:
	goto l000000000004C038
	// succ:  l000000000004C038
l000000000004C000_ds_t:
	goto l000000000004C05C
	// succ:  l000000000004C05C
l000000000004C010:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Loaduintptr (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r3 != r2 l000000000004C000_ds_t
	goto l000000000004C000_ds_f
	// succ:  l000000000004C000_ds_f l000000000004C000_ds_t
l000000000004C038:
	r2 = 0x00000000000A0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	r22 = r2
	r1 = Mem0[r2:word64]
	call r1 (retsize: 0;)
	goto l000000000004C010
	// succ:  l000000000004C010
l000000000004C05C:
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000004C05C_ds_t
	// succ:  l000000000004C05C_ds_f l000000000004C05C_ds_t
l000000000004C05C_ds_f:
	goto l000000000004C068
	// succ:  l000000000004C068
l000000000004C05C_ds_t:
	goto l000000000004C0D0
	// succ:  l000000000004C0D0
l000000000004C068:
	r1 = (word64) Mem0[sp + 0x0000000000000040:byte]
	branch r1 != 0x0000000000000000 l000000000004C068_ds_t
	// succ:  l000000000004C068_ds_f l000000000004C068_ds_t
l000000000004C068_ds_f:
	goto l000000000004C074
	// succ:  l000000000004C074
l000000000004C068_ds_t:
	goto l000000000004C0D0
	// succ:  l000000000004C0D0
l000000000004C074:
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 != 0x0000000000000000 l000000000004C074_ds_t
	// succ:  l000000000004C074_ds_f l000000000004C074_ds_t
l000000000004C074_ds_f:
	goto l000000000004C080
	// succ:  l000000000004C080
l000000000004C074_ds_t:
	goto l000000000004C0B0
	// succ:  l000000000004C0B0
l000000000004C080:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004C0B0:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
l000000000004C0D0:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000030:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
runtime.lockextra_exit:


// runtime.unlockextra
// Return size: 0
void runtime.unlockextra()
runtime.unlockextra_entry:
	// succ:  l000000000004C148
l000000000004C148:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime/internal/atomic.Storeuintptr (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.unlockextra_exit
runtime.unlockextra_exit:


// runtime.newm
// Return size: 0
void runtime.newm()
runtime.newm_entry:
	// succ:  l000000000004C188
l000000000004C188:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004C188_ds_t
	// succ:  l000000000004C188_ds_f l000000000004C188_ds_t
l000000000004C188_ds_f:
	goto l000000000004C198
	// succ:  l000000000004C198
l000000000004C188_ds_t:
	goto l000000000004C1AC
	// succ:  l000000000004C1AC
l000000000004C198:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004C188
	// succ:  l000000000004C188
l000000000004C1AC:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000070:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000068:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.allocm (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	branch r3 != 0x0000000000000000 l000000000004C1AC_ds_t
	// succ:  l000000000004C1AC_ds_f l000000000004C1AC_ds_t
l000000000004C1AC_ds_f:
	goto l000000000004C1D8
	// succ:  l000000000004C1D8
l000000000004C1AC_ds_t:
	goto l000000000004C1DC
	// succ:  l000000000004C1DC
l000000000004C1D8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004C1DC
l000000000004C1DC:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r4 = Mem0[sp + 0x0000000000000070:word64]
	Mem0[r1:word64] = r4
	Mem0[sp + 0x0000000000000020:word64] = r3
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 - 0x0000000000006810:word64]
	Mem0[r3 + 0x0000000000000058:word64] = r2
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 - 0x0000000000006808:word64]
	Mem0[r3 + 0x0000000000000060:word64] = r2
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006995:byte]
	branch r1 == 0x0000000000000000 l000000000004C1DC_ds_t
	// succ:  l000000000004C1DC_ds_f l000000000004C1DC_ds_t
l000000000004C1DC_ds_f:
	goto l000000000004C224
	// succ:  l000000000004C224
l000000000004C1DC_ds_t:
	goto l000000000004C2F4
	// succ:  l000000000004C2F4
l000000000004C224:
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001050:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000004C224_ds_t
	// succ:  l000000000004C224_ds_f l000000000004C224_ds_t
l000000000004C224_ds_f:
	goto l000000000004C248
	// succ:  l000000000004C248
l000000000004C224_ds_t:
	goto l000000000004C26C
	// succ:  l000000000004C26C
l000000000004C248:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004C26C:
	lo = r5 / sp
	hi = r5 % sp
	r4 = Mem0[r3:word64]
	Mem0[r5:word64] = r4
	lo = r2 / r3
	hi = r2 % r3
	Mem0[sp + 0x0000000000000050:word64] = r2
	r3 = 0x00000000000A0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	r2 = 0x0000000000090000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000038:word64] = r2
	Mem0[sp + 0x0000000000000028:word64] = r2
	Mem0[sp + 0x0000000000000040:word64] = r3
	Mem0[sp + 0x0000000000000030:word64] = r3
	lo = r1 / sp
	hi = r1 % sp
l000000000004C2F4:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r2 = Mem0[r3:word64]
	r1 = Mem0[r2 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.newosproc (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.newm_exit
runtime.newm_exit:


// runtime.stopm
// Return size: 0
void runtime.stopm()
runtime.stopm_entry:
	// succ:  l000000000004C320
l000000000004C320:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004C320_ds_t
	// succ:  l000000000004C320_ds_f l000000000004C320_ds_t
l000000000004C320_ds_f:
	goto l000000000004C330
	// succ:  l000000000004C330
l000000000004C320_ds_t:
	goto l000000000004C344
	// succ:  l000000000004C344
l000000000004C330:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004C320
	// succ:  l000000000004C320
l000000000004C344:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r3 = r30
	Mem0[sp + 0x0000000000000018:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l000000000004C344_ds_t
	// succ:  l000000000004C344_ds_f l000000000004C344_ds_t
l000000000004C344_ds_f:
	goto l000000000004C370
	// succ:  l000000000004C370
l000000000004C344_ds_t:
	goto l000000000004C394
	// succ:  l000000000004C394
l000000000004C370:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004C394:
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000004C394_ds_t
	// succ:  l000000000004C394_ds_f l000000000004C394_ds_t
l000000000004C394_ds_f:
	goto l000000000004C3A8
	// succ:  l000000000004C3A8
l000000000004C394_ds_t:
	goto l000000000004C3CC
	// succ:  l000000000004C3CC
l000000000004C3A8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004C3CC:
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000F4:byte]
	branch r1 == 0x0000000000000000 l000000000004C3CC_ds_t
	// succ:  l000000000004C3CC_ds_f l000000000004C3CC_ds_t
l000000000004C3CC_ds_f:
	goto l000000000004C3DC
	// succ:  l000000000004C3DC
l000000000004C3CC_ds_t:
	goto l000000000004C3FC
	// succ:  l000000000004C3FC
l000000000004C3DC:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004C3FC:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.mput (retsize: 0;)
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000004C3FC_ds_t
	// succ:  l000000000004C3FC_ds_f l000000000004C3FC_ds_t
l000000000004C3FC_ds_f:
	goto l000000000004C478
	// succ:  l000000000004C478
l000000000004C3FC_ds_t:
	goto l000000000004C47C
	// succ:  l000000000004C47C
l000000000004C478:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004C47C
l000000000004C47C:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.notesleep (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000018:word64]
	r3 = Mem0[r4 + 0x0000000000000030:word64]
	branch r3 != 0x0000000000000000 l000000000004C47C_ds_t
	// succ:  l000000000004C47C_ds_f l000000000004C47C_ds_t
l000000000004C47C_ds_f:
	goto l000000000004C4A4
	// succ:  l000000000004C4A4
l000000000004C47C_ds_t:
	goto l000000000004C4A8
	// succ:  l000000000004C4A8
l000000000004C4A4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004C4A8
l000000000004C4A8:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	Mem0[r1:word64] = 0x0000000000000000
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000F0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l000000000004C4A8_ds_t
	// succ:  l000000000004C4A8_ds_f l000000000004C4A8_ds_t
l000000000004C4A8_ds_f:
	goto l000000000004C4D0
	// succ:  l000000000004C4D0
l000000000004C4A8_ds_t:
	goto l000000000004C500
	// succ:  l000000000004C500
l000000000004C4D0:
	call runtime.gchelper (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = 0x0000000000000000
	Mem0[r2 + 0x00000000000000F0:word32] = (word32) r1
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	Mem0[r2 + 0x0000000000000130:word64] = 0x0000000000000000
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	Mem0[r2 + 0x00000000000000B0:word64] = 0x0000000000000000
	goto l000000000004C3FC
	// succ:  l000000000004C3FC
l000000000004C500:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r2 = Mem0[r2 + 0x00000000000000B8:word64]
	r1 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.acquirep (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	Mem0[r2 + 0x00000000000000B8:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.stopm_exit
runtime.stopm_exit:


// runtime.mspinning
// Return size: 0
void runtime.mspinning()
runtime.mspinning_entry:
	// succ:  l000000000004C538
l000000000004C538:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004C538_ds_t
	// succ:  l000000000004C538_ds_f l000000000004C538_ds_t
l000000000004C538_ds_f:
	goto l000000000004C548
	// succ:  l000000000004C548
l000000000004C538_ds_t:
	goto l000000000004C55C
	// succ:  l000000000004C55C
l000000000004C548:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004C538
	// succ:  l000000000004C538
l000000000004C55C:
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[r2 + 0x00000000000000F4:byte] = (byte) r1
	return
	// succ:  runtime.mspinning_exit
runtime.mspinning_exit:


// runtime.startm
// Return size: 0
void runtime.startm()
runtime.startm_entry:
	// succ:  l000000000004C578
l000000000004C578:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004C578_ds_t
	// succ:  l000000000004C578_ds_f l000000000004C578_ds_t
l000000000004C578_ds_f:
	goto l000000000004C588
	// succ:  l000000000004C588
l000000000004C578_ds_t:
	goto l000000000004C59C
	// succ:  l000000000004C59C
l000000000004C588:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004C578
	// succ:  l000000000004C578
l000000000004C59C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000004C59C_ds_t
	// succ:  l000000000004C59C_ds_f l000000000004C59C_ds_t
l000000000004C59C_ds_f:
	goto l000000000004C5DC
	// succ:  l000000000004C5DC
l000000000004C59C_ds_t:
	goto l000000000004C6C4
	// succ:  l000000000004C6C4
l000000000004C5DC:
	call runtime.pidleget (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000030:word64] = r1
	branch r1 != 0x0000000000000000 l000000000004C5DC_ds_t
	// succ:  l000000000004C5DC_ds_f l000000000004C5DC_ds_t
l000000000004C5DC_ds_f:
	goto l000000000004C5F4
	// succ:  l000000000004C5F4
l000000000004C5DC_ds_t:
	goto l000000000004C6C4
	// succ:  l000000000004C6C4
l000000000004C5F4:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
l000000000004C6C4:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000001418:word64]
	branch r3 == 0x0000000000000000 l000000000004C6C4_ds_t
	// succ:  l000000000004C6C4_ds_f l000000000004C6C4_ds_t
l000000000004C6C4_ds_f:
	goto l000000000004C6D8
	// succ:  l000000000004C6D8
l000000000004C6C4_ds_t:
	goto l000000000004C718
	// succ:  l000000000004C718
l000000000004C6D8:
	r2 = Mem0[r3 + 0x0000000000000128:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001418:word64] = r2
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001420:int32]
	r2 = r1
	r1 = r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 - r2
	r1 = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001420:word32] = (word32) r1
	// succ:  l000000000004C718
l000000000004C718:
	Mem0[sp + 0x0000000000000020:word64] = r3
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r2 = 0x0000000000000000
	branch r4 != 0x0000000000000000 l000000000004C718_ds_t
	// succ:  l000000000004C718_ds_f l000000000004C718_ds_t
l000000000004C718_ds_f:
	goto l000000000004C754
	// succ:  l000000000004C754
l000000000004C718_ds_t:
	goto l000000000004C794
	// succ:  l000000000004C794
l000000000004C754:
	r2 = 0x0000000000000000
	r1 = (word64) Mem0[sp + 0x0000000000000038:byte]
	branch r1 == 0x0000000000000000 l000000000004C754_ds_t
	// succ:  l000000000004C754_ds_f l000000000004C754_ds_t
l000000000004C754_ds_f:
	goto l000000000004C764
	// succ:  l000000000004C764
l000000000004C754_ds_t:
	goto l000000000004C770
	// succ:  l000000000004C770
l000000000004C764:
	r2 = 0x00000000000A0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	// succ:  l000000000004C770
l000000000004C770:
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.newm (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.startm_exit
l000000000004C794:
	r1 = (word64) Mem0[r4 + 0x00000000000000F4:byte]
	branch r1 == 0x0000000000000000 l000000000004C794_ds_t
	// succ:  l000000000004C794_ds_f l000000000004C794_ds_t
l000000000004C794_ds_f:
	goto l000000000004C7A0
	// succ:  l000000000004C7A0
l000000000004C794_ds_t:
	goto l000000000004C7C4
	// succ:  l000000000004C7C4
l000000000004C7A0:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004C7C4:
	r1 = Mem0[r4 + 0x00000000000000B8:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000004C7C4_ds_t
	// succ:  l000000000004C7C4_ds_f l000000000004C7C4_ds_t
l000000000004C7C4_ds_f:
	goto l000000000004C7D4
	// succ:  l000000000004C7D4
l000000000004C7C4_ds_t:
	goto l000000000004C7F8
	// succ:  l000000000004C7F8
l000000000004C7D4:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004C7F8:
	r1 = (word64) Mem0[sp + 0x0000000000000038:byte]
	branch r1 == 0x0000000000000000 l000000000004C7F8_ds_t
	// succ:  l000000000004C7F8_ds_f l000000000004C7F8_ds_t
l000000000004C7F8_ds_f:
	goto l000000000004C804
	// succ:  l000000000004C804
l000000000004C7F8_ds_t:
	goto l000000000004C8A4
	// succ:  l000000000004C8A4
l000000000004C804:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.runqempty (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l000000000004C804_ds_t
	// succ:  l000000000004C804_ds_f l000000000004C804_ds_t
l000000000004C804_ds_f:
	goto l000000000004C82C
	// succ:  l000000000004C82C
l000000000004C804_ds_t:
	goto l000000000004C8A4
	// succ:  l000000000004C8A4
l000000000004C82C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004C850:
	r2 = (word64) Mem0[sp + 0x0000000000000038:byte]
	Mem0[r4 + 0x00000000000000F4:byte] = (byte) r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r3 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[r1:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000004C850_ds_t
	// succ:  l000000000004C850_ds_f l000000000004C850_ds_t
l000000000004C850_ds_f:
	goto l000000000004C878
	// succ:  l000000000004C878
l000000000004C850_ds_t:
	goto l000000000004C87C
	// succ:  l000000000004C87C
l000000000004C878:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004C87C
l000000000004C87C:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.notewakeup (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.startm_exit
l000000000004C8A4:
	goto l000000000004C850
	// succ:  l000000000004C850
runtime.startm_exit:


// runtime.handoffp
// Return size: 0
void runtime.handoffp()
runtime.handoffp_entry:
	// succ:  l000000000004C8B0
l000000000004C8B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004C8B0_ds_t
	// succ:  l000000000004C8B0_ds_f l000000000004C8B0_ds_t
l000000000004C8B0_ds_f:
	goto l000000000004C8C0
	// succ:  l000000000004C8C0
l000000000004C8B0_ds_t:
	goto l000000000004C8D4
	// succ:  l000000000004C8D4
l000000000004C8C0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004C8B0
	// succ:  l000000000004C8B0
l000000000004C8D4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.runqempty (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000030:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000004C8D4_ds_t
	// succ:  l000000000004C8D4_ds_f l000000000004C8D4_ds_t
l000000000004C8D4_ds_f:
	goto l000000000004C904
	// succ:  l000000000004C904
l000000000004C8D4_ds_t:
	goto l000000000004CE90
	// succ:  l000000000004CE90
l000000000004C904:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001458:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000004C904_ds_t
	// succ:  l000000000004C904_ds_f l000000000004C904_ds_t
l000000000004C904_ds_f:
	goto l000000000004C924
	// succ:  l000000000004C924
l000000000004C904_ds_t:
	goto l000000000004CE90
	// succ:  l000000000004CE90
l000000000004C924:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006980:uint32]
l000000000004CE90:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:byte] = (byte) r1
	call runtime.startm (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.handoffp_exit
runtime.handoffp_exit:


// runtime.wakep
// Return size: 0
void runtime.wakep()
runtime.wakep_entry:
	// succ:  l000000000004CEB8
l000000000004CEB8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004CEB8_ds_t
	// succ:  l000000000004CEB8_ds_f l000000000004CEB8_ds_t
l000000000004CEB8_ds_f:
	goto l000000000004CEC8
	// succ:  l000000000004CEC8
l000000000004CEB8_ds_t:
	goto l000000000004CEDC
	// succ:  l000000000004CEDC
l000000000004CEC8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004CEB8
	// succ:  l000000000004CEB8
l000000000004CEDC:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.wakep_exit:


// runtime.stoplockedm
// Return size: 0
void runtime.stoplockedm()
runtime.stoplockedm_entry:
	// succ:  l000000000004CF78
l000000000004CF78:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004CF78_ds_t
	// succ:  l000000000004CF78_ds_f l000000000004CF78_ds_t
l000000000004CF78_ds_f:
	goto l000000000004CF88
	// succ:  l000000000004CF88
l000000000004CF78_ds_t:
	goto l000000000004CF9C
	// succ:  l000000000004CF9C
l000000000004CF88:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004CF78
	// succ:  l000000000004CF78
l000000000004CF9C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r4 = r30
	Mem0[sp + 0x0000000000000018:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000138:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000004CF9C_ds_t
	// succ:  l000000000004CF9C_ds_f l000000000004CF9C_ds_t
l000000000004CF9C_ds_f:
	goto l000000000004CFC0
	// succ:  l000000000004CFC0
l000000000004CF9C_ds_t:
	goto l000000000004D174
	// succ:  l000000000004D174
l000000000004CFC0:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x0000000000000138:word64]
	r1 = Mem0[r3 + 0x0000000000000108:word64]
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	branch r1 != r2 l000000000004CFC0_ds_t
	// succ:  l000000000004CFC0_ds_f l000000000004CFC0_ds_t
l000000000004CFC0_ds_f:
	goto l000000000004CFD8
	// succ:  l000000000004CFD8
l000000000004CFC0_ds_t:
	goto l000000000004D174
	// succ:  l000000000004D174
l000000000004CFD8:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000004CFD8_ds_t
	// succ:  l000000000004CFD8_ds_f l000000000004CFD8_ds_t
l000000000004CFD8_ds_f:
	goto l000000000004CFEC
	// succ:  l000000000004CFEC
l000000000004CFD8_ds_t:
	goto l000000000004D008
	// succ:  l000000000004D008
l000000000004CFEC:
	call runtime.releasep (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000008:word64]
	r1 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.handoffp (retsize: 0;)
l000000000004D008:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.incidlelocked (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000004D008_ds_t
	// succ:  l000000000004D008_ds_f l000000000004D008_ds_t
l000000000004D008_ds_f:
	goto l000000000004D034
	// succ:  l000000000004D034
l000000000004D008_ds_t:
	goto l000000000004D038
	// succ:  l000000000004D038
l000000000004D034:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004D038
l000000000004D038:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.notesleep (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000018:word64]
	r3 = Mem0[r4 + 0x0000000000000030:word64]
	branch r3 != 0x0000000000000000 l000000000004D038_ds_t
	// succ:  l000000000004D038_ds_f l000000000004D038_ds_t
l000000000004D038_ds_f:
	goto l000000000004D060
	// succ:  l000000000004D060
l000000000004D038_ds_t:
	goto l000000000004D064
	// succ:  l000000000004D064
l000000000004D060:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004D064
l000000000004D064:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	Mem0[r1:word64] = 0x0000000000000000
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000138:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.readgstatus (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
l000000000004D174:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.stoplockedm_exit:


// runtime.startlockedm
// Return size: 0
void runtime.startlockedm()
runtime.startlockedm_entry:
	// succ:  l000000000004D1A0
l000000000004D1A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004D1A0_ds_t
	// succ:  l000000000004D1A0_ds_f l000000000004D1A0_ds_t
l000000000004D1A0_ds_f:
	goto l000000000004D1B0
	// succ:  l000000000004D1B0
l000000000004D1A0_ds_t:
	goto l000000000004D1C4
	// succ:  l000000000004D1C4
l000000000004D1B0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004D1A0
	// succ:  l000000000004D1A0
l000000000004D1C4:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r3 = r30
	r1 = Mem0[sp + 0x0000000000000028:word64]
	r2 = Mem0[r1 + 0x0000000000000108:word64]
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	r4 = r2
	branch r1 != r2 l000000000004D1C4_ds_t
	// succ:  l000000000004D1C4_ds_f l000000000004D1C4_ds_t
l000000000004D1C4_ds_f:
	goto l000000000004D1EC
	// succ:  l000000000004D1EC
l000000000004D1C4_ds_t:
	goto l000000000004D210
	// succ:  l000000000004D210
l000000000004D1EC:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004D210:
	r1 = Mem0[r4 + 0x00000000000000B8:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000004D210_ds_t
	// succ:  l000000000004D210_ds_f l000000000004D210_ds_t
l000000000004D210_ds_f:
	goto l000000000004D220
	// succ:  l000000000004D220
l000000000004D210_ds_t:
	goto l000000000004D240
	// succ:  l000000000004D240
l000000000004D220:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004D240:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.incidlelocked (retsize: 0;)
	call runtime.releasep (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000018:word64]
	r3 = Mem0[sp + 0x0000000000000008:word64]
	branch r4 != 0x0000000000000000 l000000000004D240_ds_t
	// succ:  l000000000004D240_ds_f l000000000004D240_ds_t
l000000000004D240_ds_f:
	goto l000000000004D26C
	// succ:  l000000000004D26C
l000000000004D240_ds_t:
	goto l000000000004D270
	// succ:  l000000000004D270
l000000000004D26C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004D270
l000000000004D270:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	Mem0[r1:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000004D270_ds_t
	// succ:  l000000000004D270_ds_f l000000000004D270_ds_t
l000000000004D270_ds_f:
	goto l000000000004D28C
	// succ:  l000000000004D28C
l000000000004D270_ds_t:
	goto l000000000004D290
	// succ:  l000000000004D290
l000000000004D28C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004D290
l000000000004D290:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.notewakeup (retsize: 0;)
	call runtime.stopm (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.startlockedm_exit
runtime.startlockedm_exit:


// runtime.gcstopm
// Return size: 0
void runtime.gcstopm()
runtime.gcstopm_entry:
	// succ:  l000000000004D2C0
l000000000004D2C0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004D2C0_ds_t
	// succ:  l000000000004D2C0_ds_f l000000000004D2C0_ds_t
l000000000004D2C0_ds_f:
	goto l000000000004D2D0
	// succ:  l000000000004D2D0
l000000000004D2C0_ds_t:
	goto l000000000004D2E4
	// succ:  l000000000004D2E4
l000000000004D2D0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004D2C0
	// succ:  l000000000004D2C0
l000000000004D2E4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r3 = r30
	Mem0[sp + 0x0000000000000028:word64] = r30
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x00000000000014C0:uint32]
runtime.gcstopm_exit:


// runtime.execute
// Return size: 0
void runtime.execute()
runtime.execute_entry:
	// succ:  l000000000004D4E8
l000000000004D4E8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004D4E8_ds_t
	// succ:  l000000000004D4E8_ds_f l000000000004D4E8_ds_t
l000000000004D4E8_ds_f:
	goto l000000000004D4F8
	// succ:  l000000000004D4F8
l000000000004D4E8_ds_t:
	goto l000000000004D50C
	// succ:  l000000000004D50C
l000000000004D4F8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004D4E8
	// succ:  l000000000004D4E8
l000000000004D50C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000018:word64] = r30
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
runtime.execute_exit:


// runtime.findrunnable
// Return size: 0
void runtime.findrunnable()
runtime.findrunnable_entry:
	// succ:  l000000000004D728
l000000000004D728:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -224
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000004D728_ds_t
	// succ:  l000000000004D728_ds_f l000000000004D728_ds_t
l000000000004D728_ds_f:
	goto l000000000004D73C
	// succ:  l000000000004D73C
l000000000004D728_ds_t:
	goto l000000000004D750
	// succ:  l000000000004D750
l000000000004D73C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004D728
	// succ:  l000000000004D728
l000000000004D750:
	sp = sp + -224
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	Mem0[sp + 0x00000000000000C0:word64] = r30
	r1 = Mem0[sp + 0x00000000000000C0:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r2 = Mem0[r2 + 0x00000000000000B0:word64]
	Mem0[sp + 0x00000000000000B8:word64] = r2
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x00000000000014C0:uint32]
runtime.findrunnable_exit:


// runtime.resetspinning
// Return size: 0
void runtime.resetspinning()
runtime.resetspinning_entry:
	// succ:  l000000000004E740
l000000000004E740:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004E740_ds_t
	// succ:  l000000000004E740_ds_f l000000000004E740_ds_t
l000000000004E740_ds_f:
	goto l000000000004E750
	// succ:  l000000000004E750
l000000000004E740_ds_t:
	goto l000000000004E764
	// succ:  l000000000004E764
l000000000004E750:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004E740
	// succ:  l000000000004E740
l000000000004E764:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r3 = r30
	Mem0[sp + 0x0000000000000028:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000F4:byte]
	branch r1 != 0x0000000000000000 l000000000004E764_ds_t
	// succ:  l000000000004E764_ds_f l000000000004E764_ds_t
l000000000004E764_ds_f:
	goto l000000000004E784
	// succ:  l000000000004E784
l000000000004E764_ds_t:
	goto l000000000004E7A8
	// succ:  l000000000004E7A8
l000000000004E784:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004E7A8:
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = 0x0000000000000000
	Mem0[r2 + 0x00000000000000F4:byte] = (byte) r1
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.resetspinning_exit:


// runtime.injectglist
// Return size: 0
void runtime.injectglist()
runtime.injectglist_entry:
	// succ:  l000000000004E8E8
l000000000004E8E8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004E8E8_ds_t
	// succ:  l000000000004E8E8_ds_f l000000000004E8E8_ds_t
l000000000004E8E8_ds_f:
	goto l000000000004E8F8
	// succ:  l000000000004E8F8
l000000000004E8E8_ds_t:
	goto l000000000004E90C
	// succ:  l000000000004E90C
l000000000004E8F8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004E8E8
	// succ:  l000000000004E8E8
l000000000004E90C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000038:word64]
	branch r3 != 0x0000000000000000 l000000000004E90C_ds_t
	// succ:  l000000000004E90C_ds_f l000000000004E90C_ds_t
l000000000004E90C_ds_f:
	goto l000000000004E920
	// succ:  l000000000004E920
l000000000004E90C_ds_t:
	goto l000000000004E930
	// succ:  l000000000004E930
l000000000004E920:
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.injectglist_exit
l000000000004E930:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006A50:byte]
	branch r1 == 0x0000000000000000 l000000000004E930_ds_t
	// succ:  l000000000004E930_ds_f l000000000004E930_ds_t
l000000000004E930_ds_f:
	goto l000000000004E944
	// succ:  l000000000004E944
l000000000004E930_ds_t:
	goto l000000000004E97C
	// succ:  l000000000004E97C
l000000000004E944:
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l000000000004E944_ds_t
	// succ:  l000000000004E944_ds_f l000000000004E944_ds_t
l000000000004E944_ds_f:
	goto l000000000004E950
	// succ:  l000000000004E950
l000000000004E944_ds_t:
	goto l000000000004E97C
	// succ:  l000000000004E97C
l000000000004E950:
	Mem0[sp + 0x0000000000000028:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	call runtime.traceGoUnpark (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	r3 = Mem0[r1 + 0x00000000000000E0:word64]
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000004E950_ds_t
	// succ:  l000000000004E950_ds_f l000000000004E950_ds_t
l000000000004E950_ds_f:
	goto l000000000004E97C
	// succ:  l000000000004E97C
l000000000004E950_ds_t:
	goto l000000000004E950
	// succ:  l000000000004E950
l000000000004E97C:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
runtime.injectglist_exit:


// runtime.schedule
// Return size: 0
void runtime.schedule()
runtime.schedule_entry:
	// succ:  l000000000004EB68
l000000000004EB68:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004EB68_ds_t
	// succ:  l000000000004EB68_ds_f l000000000004EB68_ds_t
l000000000004EB68_ds_f:
	goto l000000000004EB78
	// succ:  l000000000004EB78
l000000000004EB68_ds_t:
	goto l000000000004EB8C
	// succ:  l000000000004EB8C
l000000000004EB78:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004EB68
	// succ:  l000000000004EB68
l000000000004EB8C:
	sp = sp + -56
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000030:word64] = r30
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l000000000004EB8C_ds_t
	// succ:  l000000000004EB8C_ds_f l000000000004EB8C_ds_t
l000000000004EB8C_ds_f:
	goto l000000000004EBB8
	// succ:  l000000000004EBB8
l000000000004EB8C_ds_t:
	goto l000000000004EBD8
	// succ:  l000000000004EBD8
l000000000004EBB8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000004EBD8:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000138:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000004EBD8_ds_t
	// succ:  l000000000004EBD8_ds_f l000000000004EBD8_ds_t
l000000000004EBD8_ds_f:
	goto l000000000004EBF0
	// succ:  l000000000004EBF0
l000000000004EBD8_ds_t:
	goto l000000000004EC18
	// succ:  l000000000004EC18
l000000000004EBF0:
	call runtime.stoplockedm (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000138:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:byte] = (byte) r1
	call runtime.execute (retsize: 0;)
l000000000004EC18:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x00000000000014C0:uint32]
runtime.schedule_exit:


// runtime.parkunlock_c
// Return size: 0
void runtime.parkunlock_c()
runtime.parkunlock_c_entry:
	// succ:  l000000000004EFD0
l000000000004EFD0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004EFD0_ds_t
	// succ:  l000000000004EFD0_ds_f l000000000004EFD0_ds_t
l000000000004EFD0_ds_f:
	goto l000000000004EFE0
	// succ:  l000000000004EFE0
l000000000004EFD0_ds_t:
	goto l000000000004EFF4
	// succ:  l000000000004EFF4
l000000000004EFE0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004EFD0
	// succ:  l000000000004EFD0
l000000000004EFF4:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.parkunlock_c_exit
runtime.parkunlock_c_exit:


// runtime.park_m
// Return size: 0
void runtime.park_m()
runtime.park_m_entry:
	// succ:  l000000000004F030
l000000000004F030:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004F030_ds_t
	// succ:  l000000000004F030_ds_f l000000000004F030_ds_t
l000000000004F030_ds_f:
	goto l000000000004F040
	// succ:  l000000000004F040
l000000000004F030_ds_t:
	goto l000000000004F054
	// succ:  l000000000004F054
l000000000004F040:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004F030
	// succ:  l000000000004F030
l000000000004F054:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r3 = r30
	Mem0[sp + 0x0000000000000020:word64] = r30
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006A50:byte]
	branch r1 == 0x0000000000000000 l000000000004F054_ds_t
	// succ:  l000000000004F054_ds_f l000000000004F054_ds_t
l000000000004F054_ds_f:
	goto l000000000004F078
	// succ:  l000000000004F078
l000000000004F054_ds_t:
	goto l000000000004F0A0
	// succ:  l000000000004F0A0
l000000000004F078:
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x0000000000000310:byte]
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000318:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.traceGoPark (retsize: 0;)
l000000000004F0A0:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
runtime.park_m_exit:


// runtime.goschedImpl
// Return size: 0
void runtime.goschedImpl()
runtime.goschedImpl_entry:
	// succ:  l000000000004F1F8
l000000000004F1F8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004F1F8_ds_t
	// succ:  l000000000004F1F8_ds_f l000000000004F1F8_ds_t
l000000000004F1F8_ds_f:
	goto l000000000004F208
	// succ:  l000000000004F208
l000000000004F1F8_ds_t:
	goto l000000000004F21C
	// succ:  l000000000004F21C
l000000000004F208:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004F1F8
	// succ:  l000000000004F1F8
l000000000004F21C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.readgstatus (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.goschedImpl_exit:


// runtime.gosched_m
// Return size: 0
void runtime.gosched_m()
runtime.gosched_m_entry:
	// succ:  l000000000004F420
l000000000004F420:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004F420_ds_t
	// succ:  l000000000004F420_ds_f l000000000004F420_ds_t
l000000000004F420_ds_f:
	goto l000000000004F430
	// succ:  l000000000004F430
l000000000004F420_ds_t:
	goto l000000000004F444
	// succ:  l000000000004F444
l000000000004F430:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004F420
	// succ:  l000000000004F420
l000000000004F444:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006A50:byte]
	branch r1 == 0x0000000000000000 l000000000004F444_ds_t
	// succ:  l000000000004F444_ds_f l000000000004F444_ds_t
l000000000004F444_ds_f:
	goto l000000000004F460
	// succ:  l000000000004F460
l000000000004F444_ds_t:
	goto l000000000004F468
	// succ:  l000000000004F468
l000000000004F460:
	call runtime.traceGoSched (retsize: 0;)
l000000000004F468:
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.goschedImpl (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gosched_m_exit
runtime.gosched_m_exit:


// runtime.gopreempt_m
// Return size: 0
void runtime.gopreempt_m()
runtime.gopreempt_m_entry:
	// succ:  l000000000004F488
l000000000004F488:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004F488_ds_t
	// succ:  l000000000004F488_ds_f l000000000004F488_ds_t
l000000000004F488_ds_f:
	goto l000000000004F498
	// succ:  l000000000004F498
l000000000004F488_ds_t:
	goto l000000000004F4AC
	// succ:  l000000000004F4AC
l000000000004F498:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004F488
	// succ:  l000000000004F488
l000000000004F4AC:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006A50:byte]
	branch r1 == 0x0000000000000000 l000000000004F4AC_ds_t
	// succ:  l000000000004F4AC_ds_f l000000000004F4AC_ds_t
l000000000004F4AC_ds_f:
	goto l000000000004F4C8
	// succ:  l000000000004F4C8
l000000000004F4AC_ds_t:
	goto l000000000004F4D0
	// succ:  l000000000004F4D0
l000000000004F4C8:
	call runtime.traceGoPreempt (retsize: 0;)
l000000000004F4D0:
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.goschedImpl (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gopreempt_m_exit
runtime.gopreempt_m_exit:


// runtime.goexit1
// Return size: 0
void runtime.goexit1()
runtime.goexit1_entry:
	// succ:  l000000000004F4F0
l000000000004F4F0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004F4F0_ds_t
	// succ:  l000000000004F4F0_ds_f l000000000004F4F0_ds_t
l000000000004F4F0_ds_f:
	goto l000000000004F500
	// succ:  l000000000004F500
l000000000004F4F0_ds_t:
	goto l000000000004F514
	// succ:  l000000000004F514
l000000000004F500:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004F4F0
	// succ:  l000000000004F4F0
l000000000004F514:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006A50:byte]
	branch r1 == 0x0000000000000000 l000000000004F514_ds_t
	// succ:  l000000000004F514_ds_f l000000000004F514_ds_t
l000000000004F514_ds_f:
	goto l000000000004F530
	// succ:  l000000000004F530
l000000000004F514_ds_t:
	goto l000000000004F538
	// succ:  l000000000004F538
l000000000004F530:
	call runtime.traceGoEnd (retsize: 0;)
l000000000004F538:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.mcall (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.goexit1_exit
runtime.goexit1_exit:


// runtime.goexit0
// Return size: 0
void runtime.goexit0()
runtime.goexit0_entry:
	// succ:  l000000000004F560
l000000000004F560:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004F560_ds_t
	// succ:  l000000000004F560_ds_f l000000000004F560_ds_t
l000000000004F560_ds_f:
	goto l000000000004F570
	// succ:  l000000000004F570
l000000000004F560_ds_t:
	goto l000000000004F584
	// succ:  l000000000004F584
l000000000004F570:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004F560
	// succ:  l000000000004F560
l000000000004F584:
	sp = sp + -48
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000028:word64] = r30
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
runtime.goexit0_exit:


// runtime.reentersyscall
// Return size: 0
void runtime.reentersyscall()
runtime.reentersyscall_entry:
	// succ:  l000000000004F828
l000000000004F828:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = ra
	r8 = Mem0[sp + 0x0000000000000038:word64]
	r7 = Mem0[sp + 0x0000000000000040:word64]
	r4 = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	Mem0[r30 + 0x0000000000000010:word64] = r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	Mem0[r30 + 0x00000000000000ED:byte] = (byte) r2
	r6 = r8
	r5 = r7
	r3 = r30
	Mem0[r30 + 0x0000000000000048:word64] = r8
	Mem0[r30 + 0x0000000000000040:word64] = r7
	Mem0[r30 + 0x0000000000000068:word64] = 0x0000000000000000
	Mem0[r30 + 0x0000000000000060:word64] = 0x0000000000000000
	Mem0[r30 + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[r30 + 0x0000000000000050:word64] = r30
	Mem0[r30 + 0x0000000000000078:word64] = r7
	r2 = r8
	Mem0[r30 + 0x0000000000000080:word64] = r8
	Mem0[sp + 0x0000000000000018:word64] = r30
	Mem0[sp + 0x0000000000000008:word64] = r30
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
runtime.reentersyscall_exit:


// runtime.entersyscall
// Return size: 0
void runtime.entersyscall()
runtime.entersyscall_entry:
	// succ:  l000000000004FBD0
l000000000004FBD0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = ra
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.getcallerpc (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.getcallersp (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000010:word64]
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r2
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.reentersyscall (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.entersyscall_exit
runtime.entersyscall_exit:


// runtime.entersyscall_sysmon
// Return size: 0
void runtime.entersyscall_sysmon()
runtime.entersyscall_sysmon_entry:
	// succ:  l000000000004FC30
l000000000004FC30:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004FC30_ds_t
	// succ:  l000000000004FC30_ds_f l000000000004FC30_ds_t
l000000000004FC30_ds_f:
	goto l000000000004FC40
	// succ:  l000000000004FC40
l000000000004FC30_ds_t:
	goto l000000000004FC54
	// succ:  l000000000004FC54
l000000000004FC40:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004FC30
	// succ:  l000000000004FC30
l000000000004FC54:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.entersyscall_sysmon_exit:


// runtime.entersyscall_gcwait
// Return size: 0
void runtime.entersyscall_gcwait()
runtime.entersyscall_gcwait_entry:
	// succ:  l000000000004FD80
l000000000004FD80:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000004FD80_ds_t
	// succ:  l000000000004FD80_ds_f l000000000004FD80_ds_t
l000000000004FD80_ds_f:
	goto l000000000004FD90
	// succ:  l000000000004FD90
l000000000004FD80_ds_t:
	goto l000000000004FDA4
	// succ:  l000000000004FDA4
l000000000004FD90:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000004FD80
	// succ:  l000000000004FD80
l000000000004FDA4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = Mem0[r2 + 0x00000000000000B0:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x00000000000014C4:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l000000000004FDA4_ds_t
	// succ:  l000000000004FDA4_ds_f l000000000004FDA4_ds_t
l000000000004FDA4_ds_f:
	goto l000000000004FE04
	// succ:  l000000000004FE04
l000000000004FDA4_ds_t:
	goto l000000000004FF84
	// succ:  l000000000004FF84
l000000000004FE04:
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000004FE04_ds_t
	// succ:  l000000000004FE04_ds_f l000000000004FE04_ds_t
l000000000004FE04_ds_f:
	goto l000000000004FE18
	// succ:  l000000000004FE18
l000000000004FE04_ds_t:
	goto l000000000004FE1C
	// succ:  l000000000004FE1C
l000000000004FE18:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004FE1C
l000000000004FE1C:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
l000000000004FF4C:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.entersyscall_gcwait_exit
l000000000004FF84:
	goto l000000000004FF4C
	// succ:  l000000000004FF4C
runtime.entersyscall_gcwait_exit:


// runtime.entersyscallblock
// Return size: 0
void runtime.entersyscallblock()
runtime.entersyscallblock_entry:
	// succ:  l000000000004FF90
l000000000004FF90:
	sp = fp
	sp = sp + -120
	Mem0[sp:word64] = ra
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	Mem0[r30 + 0x00000000000000ED:byte] = (byte) r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	Mem0[r30 + 0x0000000000000010:word64] = r2
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	branch r2 != 0x0000000000000000 l000000000004FF90_ds_t
	// succ:  l000000000004FF90_ds_f l000000000004FF90_ds_t
l000000000004FF90_ds_f:
	goto l000000000004FFE4
	// succ:  l000000000004FFE4
l000000000004FF90_ds_t:
	goto l000000000004FFE8
	// succ:  l000000000004FFE8
l000000000004FFE4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000004FFE8
l000000000004FFE8:
	r3 = (word64) Mem0[r3 + 0x000000000000001C:uint32]
	Mem0[r2 + 0x0000000000000324:word32] = (word32) r3
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	Mem0[r30 + 0x00000000000000EF:byte] = (byte) r2
	Mem0[sp + 0x0000000000000030:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = (word64) Mem0[r1 + 0x000000000000001C:uint32]
runtime.entersyscallblock_exit:


// runtime.entersyscallblock_handoff
// Return size: 0
void runtime.entersyscallblock_handoff()
runtime.entersyscallblock_handoff_entry:
	// succ:  l0000000000050248
l0000000000050248:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000050248_ds_t
	// succ:  l0000000000050248_ds_f l0000000000050248_ds_t
l0000000000050248_ds_f:
	goto l0000000000050258
	// succ:  l0000000000050258
l0000000000050248_ds_t:
	goto l000000000005026C
	// succ:  l000000000005026C
l0000000000050258:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000050248
	// succ:  l0000000000050248
l000000000005026C:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006A50:byte]
	branch r1 == 0x0000000000000000 l000000000005026C_ds_t
	// succ:  l000000000005026C_ds_f l000000000005026C_ds_t
l000000000005026C_ds_f:
	goto l0000000000050288
	// succ:  l0000000000050288
l000000000005026C_ds_t:
	goto l00000000000502A8
	// succ:  l00000000000502A8
l0000000000050288:
	call runtime.traceGoSysCall (retsize: 0;)
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = Mem0[r2 + 0x00000000000000B0:word64]
	r1 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.traceGoSysBlock (retsize: 0;)
l00000000000502A8:
	call runtime.releasep (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000008:word64]
	r1 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.handoffp (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.entersyscallblock_handoff_exit
runtime.entersyscallblock_handoff_exit:


// runtime.exitsyscall
// Return size: 0
void runtime.exitsyscall()
runtime.exitsyscall_entry:
	// succ:  l00000000000502D8
l00000000000502D8:
	sp = fp
	sp = sp + -40
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000020:word64] = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r4 = r2
	r2 = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.getcallersp (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r1 = Mem0[r4 + 0x0000000000000078:word64]
	r2 = r3
	r23 = (word64) (r1 <u r3)
	branch r23 == 0x0000000000000000 l00000000000502D8_ds_t
	// succ:  l00000000000502D8_ds_f l00000000000502D8_ds_t
l00000000000502D8_ds_f:
	goto l0000000000050334
	// succ:  l0000000000050334
l00000000000502D8_ds_t:
	goto l000000000005066C
	// succ:  l000000000005066C
l0000000000050334:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.systemstack (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000020:word64]
	goto l0000000000050350
	// succ:  l0000000000050350
l0000000000050334_ds_f:
	goto l0000000000050388
	// succ:  l0000000000050388
l0000000000050334_ds_t:
	goto l0000000000050520
	// succ:  l0000000000050520
l0000000000050350:
	Mem0[r4 + 0x00000000000000C8:word64] = 0x0000000000000000
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r2 = Mem0[r2 + 0x00000000000000B0:word64]
	r1 = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.exitsyscallfast (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000008:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000050334_ds_t
	goto l0000000000050334_ds_f
	// succ:  l0000000000050334_ds_f l0000000000050334_ds_t
l0000000000050388:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000130:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000050388_ds_t
	// succ:  l0000000000050388_ds_f l0000000000050388_ds_t
l0000000000050388_ds_f:
	goto l000000000005039C
	// succ:  l000000000005039C
l0000000000050388_ds_t:
	goto l00000000000503C4
	// succ:  l00000000000503C4
l000000000005039C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000503C4:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006A50:byte]
	branch r1 == 0x0000000000000000 l00000000000503C4_ds_t
	// succ:  l00000000000503C4_ds_f l00000000000503C4_ds_t
l00000000000503C4_ds_f:
	goto l00000000000503D8
	// succ:  l00000000000503D8
l00000000000503C4_ds_t:
	goto l0000000000050418
	// succ:  l0000000000050418
l00000000000503D8:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = r3
	branch r1 != r3 l00000000000503D8_ds_t
	// succ:  l00000000000503D8_ds_f l00000000000503D8_ds_t
l00000000000503D8_ds_f:
	goto l00000000000503EC
	// succ:  l00000000000503EC
l00000000000503D8_ds_t:
	goto l00000000000504FC
	// succ:  l00000000000504FC
l00000000000503EC:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x0000000000000324:uint32]
	r2 = (word64) Mem0[r3 + 0x000000000000001C:uint32]
l0000000000050418:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = (word64) Mem0[r1 + 0x000000000000001C:uint32]
l00000000000504FC:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.systemstack (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000020:word64]
	goto l0000000000050418
	// succ:  l0000000000050418
l0000000000050520:
	Mem0[r4 + 0x00000000000000F0:word64] = 0x0000000000000000
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006A50:byte]
	branch r1 == 0x0000000000000000 l0000000000050520_ds_t
	// succ:  l0000000000050520_ds_f l0000000000050520_ds_t
l0000000000050520_ds_f:
	goto l0000000000050538
	// succ:  l0000000000050538
l0000000000050520_ds_t:
	goto l00000000000505A0
	// succ:  l00000000000505A0
l0000000000050538:
	r1 = r3
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l0000000000050538_ds_t
	// succ:  l0000000000050538_ds_f l0000000000050538_ds_t
l0000000000050538_ds_f:
	goto l0000000000050548
	// succ:  l0000000000050548
l0000000000050538_ds_t:
	goto l000000000005058C
	// succ:  l000000000005058C
l0000000000050548:
	r1 = (word64) Mem0[r3 + 0x000000000000001C:uint32]
	r3 = Mem0[r4 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r3 + 0x0000000000000324:uint32]
l000000000005058C:
	call runtime.cputicks (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r3 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[r4 + 0x00000000000000F0:word64] = r3
	// succ:  l00000000000505A0
l00000000000505A0:
	r1 = Mem0[r4 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r4 = r2
	r2 = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.mcall (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000020:word64]
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000130:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l00000000000505A0_ds_t
	// succ:  l00000000000505A0_ds_f l00000000000505A0_ds_t
l00000000000505A0_ds_f:
	goto l00000000000505F4
	// succ:  l00000000000505F4
l00000000000505A0_ds_t:
	goto l0000000000050618
	// succ:  l0000000000050618
l00000000000505F4:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000050618:
	Mem0[r5 + 0x0000000000000078:word64] = 0x0000000000000000
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = (word64) Mem0[r1 + 0x000000000000001C:uint32]
l000000000005066C:
	goto l0000000000050350
	// succ:  l0000000000050350
runtime.exitsyscall_exit:


// runtime.exitsyscallfast
// Return size: 0
void runtime.exitsyscallfast()
runtime.exitsyscallfast_entry:
	// succ:  l0000000000050678
l0000000000050678:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r5 = r30
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x00000000000014C4:int32]
	r2 = 0x000000007FFF0000
	r2 = r2 | 0x000000000000FFFF
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000050678_ds_t
	// succ:  l0000000000050678_ds_f l0000000000050678_ds_t
l0000000000050678_ds_f:
	goto l00000000000506B0
	// succ:  l00000000000506B0
l0000000000050678_ds_t:
	goto l00000000000506D8
	// succ:  l00000000000506D8
l00000000000506B0:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	Mem0[r2 + 0x0000000000000130:word64] = 0x0000000000000000
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	Mem0[r2 + 0x00000000000000B0:word64] = 0x0000000000000000
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000068:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.exitsyscallfast_exit
l00000000000506D8:
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000B0:word64]
	branch r1 == 0x0000000000000000 l00000000000506D8_ds_t
	// succ:  l00000000000506D8_ds_f l00000000000506D8_ds_t
l00000000000506D8_ds_f:
	goto l00000000000506E8
	// succ:  l00000000000506E8
l00000000000506D8_ds_t:
	goto l00000000000508C8
	// succ:  l00000000000508C8
l00000000000506E8:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r2 = Mem0[r2 + 0x00000000000000B0:word64]
	r1 = (word64) Mem0[r2 + 0x000000000000000C:uint32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l00000000000508C8:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r4 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	Mem0[r2 + 0x0000000000000130:word64] = 0x0000000000000000
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	Mem0[r2 + 0x00000000000000B0:word64] = 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001438:word64]
	branch r1 == 0x0000000000000000 l00000000000508C8_ds_t
	// succ:  l00000000000508C8_ds_f l00000000000508C8_ds_t
l00000000000508C8_ds_f:
	goto l00000000000508F4
	// succ:  l00000000000508F4
l00000000000508C8_ds_t:
	goto l000000000005095C
	// succ:  l000000000005095C
l00000000000508F4:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:byte] = (byte) r1
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	lo = r2 / sp
	hi = r2 % sp
	Mem0[r3 + 0x0000000000000008:word64] = r2
	Mem0[r3 + 0x0000000000000010:word64] = r4
	r2 = r5
	Mem0[r3 + 0x0000000000000018:word64] = r5
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	branch r1 == 0x0000000000000000 l00000000000508F4_ds_t
	// succ:  l00000000000508F4_ds_f l00000000000508F4_ds_t
l00000000000508F4_ds_f:
	goto l0000000000050940
	// succ:  l0000000000050940
l00000000000508F4_ds_t:
	goto l000000000005095C
	// succ:  l000000000005095C
l0000000000050940:
l000000000005095C:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000068:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.exitsyscallfast_exit
runtime.exitsyscallfast_exit:


// runtime.exitsyscallfast_pidle
// Return size: 0
void runtime.exitsyscallfast_pidle()
runtime.exitsyscallfast_pidle_entry:
	// succ:  l0000000000050978
l0000000000050978:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000050978_ds_t
	// succ:  l0000000000050978_ds_f l0000000000050978_ds_t
l0000000000050978_ds_f:
	goto l0000000000050988
	// succ:  l0000000000050988
l0000000000050978_ds_t:
	goto l000000000005099C
	// succ:  l000000000005099C
l0000000000050988:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000050978
	// succ:  l0000000000050978
l000000000005099C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	call runtime.pidleget (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	branch r1 == 0x0000000000000000 l000000000005099C_ds_t
	// succ:  l000000000005099C_ds_f l000000000005099C_ds_t
l000000000005099C_ds_f:
	goto l00000000000509E8
	// succ:  l00000000000509E8
l000000000005099C_ds_t:
	goto l0000000000050B1C
	// succ:  l0000000000050B1C
l00000000000509E8:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
l0000000000050AA0:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l0000000000050AA0_ds_t
	// succ:  l0000000000050AA0_ds_f l0000000000050AA0_ds_t
l0000000000050AA0_ds_f:
	goto l0000000000050AD8
	// succ:  l0000000000050AD8
l0000000000050AA0_ds_t:
	goto l0000000000050B04
	// succ:  l0000000000050B04
l0000000000050AD8:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.acquirep (retsize: 0;)
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.exitsyscallfast_pidle_exit
l0000000000050B04:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.exitsyscallfast_pidle_exit
l0000000000050B1C:
	goto l0000000000050AA0
	// succ:  l0000000000050AA0
runtime.exitsyscallfast_pidle_exit:


// runtime.exitsyscall0
// Return size: 0
void runtime.exitsyscall0()
runtime.exitsyscall0_entry:
	// succ:  l0000000000050B28
l0000000000050B28:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000050B28_ds_t
	// succ:  l0000000000050B28_ds_f l0000000000050B28_ds_t
l0000000000050B28_ds_f:
	goto l0000000000050B38
	// succ:  l0000000000050B38
l0000000000050B28_ds_t:
	goto l0000000000050B4C
	// succ:  l0000000000050B4C
l0000000000050B38:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000050B28
	// succ:  l0000000000050B28
l0000000000050B4C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000020:word64] = r30
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
runtime.exitsyscall0_exit:


// runtime.malg
// Return size: 0
void runtime.malg()
runtime.malg_entry:
	// succ:  l0000000000050E10
l0000000000050E10:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000050E10_ds_t
	// succ:  l0000000000050E10_ds_f l0000000000050E10_ds_t
l0000000000050E10_ds_f:
	goto l0000000000050E20
	// succ:  l0000000000050E20
l0000000000050E10_ds_t:
	goto l0000000000050E34
	// succ:  l0000000000050E34
l0000000000050E20:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000050E10
	// succ:  l0000000000050E10
l0000000000050E34:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.newobject (retsize: 0;)
	r3 = (word64) Mem0[sp + 0x0000000000000040:int32]
	r4 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000018:word64] = r4
	r1 = r3
	r2 = 0x0000000000000000
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 != 0x0000000000000000 l0000000000050E34_ds_t
	// succ:  l0000000000050E34_ds_f l0000000000050E34_ds_t
l0000000000050E34_ds_f:
	goto l0000000000050E7C
	// succ:  l0000000000050E7C
l0000000000050E34_ds_t:
	goto l0000000000050F08
	// succ:  l0000000000050F08
l0000000000050E7C:
	r1 = r3
	r2 = 0x0000000000000000
	r1 = r1 + r2
	r1 = r1
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.round2 (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:int32]
	r4 = r1
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	r2 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[r3 + 0x0000000000000008:word64] = r2
	r2 = r4
	Mem0[sp + 0x0000000000000040:word32] = (word32) r4
	Mem0[r3 + 0x0000000000000010:word32] = (word32) r2
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000018:word64]
	branch r4 != 0x0000000000000000 l0000000000050E7C_ds_t
	// succ:  l0000000000050E7C_ds_f l0000000000050E7C_ds_t
l0000000000050E7C_ds_f:
	goto l0000000000050EE4
	// succ:  l0000000000050EE4
l0000000000050E7C_ds_t:
	goto l0000000000050EE8
	// succ:  l0000000000050EE8
l0000000000050EE4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000050EE8
l0000000000050EE8:
	r2 = Mem0[r4:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4 + 0x0000000000000010:word64] = r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	Mem0[r4 + 0x0000000000000018:word64] = r2
	r2 = (word64) Mem0[sp + 0x0000000000000040:int32]
	Mem0[r4 + 0x0000000000000038:word64] = r2
	// succ:  l0000000000050F08
l0000000000050F08:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.malg_exit
runtime.malg_exit:


// runtime.newproc
// Return size: 0
void runtime.newproc()
runtime.newproc_entry:
	// succ:  l0000000000050F20
l0000000000050F20:
	sp = fp
	sp = sp + -72
	Mem0[sp:word64] = ra
	lo = r2 / sp
	hi = r2 % sp
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.getcallerpc (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000010:word64]
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	lo = r2 / sp
	hi = r2 % sp
	Mem0[r3 + 0x0000000000000008:word64] = r2
	r2 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[r3 + 0x0000000000000010:word64] = r2
	lo = r2 / sp
	hi = r2 % sp
	Mem0[r3 + 0x0000000000000018:word64] = r2
	r2 = r4
	Mem0[r3 + 0x0000000000000020:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 72
	call r4 (retsize: 0;)
	return
	// succ:  runtime.newproc_exit
runtime.newproc_exit:


// runtime.newproc1
// Return size: 0
void runtime.newproc1()
runtime.newproc1_entry:
	// succ:  l0000000000050FA0
l0000000000050FA0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000050FA0_ds_t
	// succ:  l0000000000050FA0_ds_f l0000000000050FA0_ds_t
l0000000000050FA0_ds_f:
	goto l0000000000050FB0
	// succ:  l0000000000050FB0
l0000000000050FA0_ds_t:
	goto l0000000000050FC4
	// succ:  l0000000000050FC4
l0000000000050FB0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000050FA0
	// succ:  l0000000000050FA0
l0000000000050FC4:
	sp = sp + -120
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000040:word64] = r30
	r1 = Mem0[sp + 0x0000000000000080:word64]
	branch r1 != 0x0000000000000000 l0000000000050FC4_ds_t
	// succ:  l0000000000050FC4_ds_f l0000000000050FC4_ds_t
l0000000000050FC4_ds_f:
	goto l0000000000050FDC
	// succ:  l0000000000050FDC
l0000000000050FC4_ds_t:
	goto l0000000000051010
	// succ:  l0000000000051010
l0000000000050FDC:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[r2 + 0x00000000000000C8:word32] = (word32) r1
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000051010:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r1 = Mem0[r1 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r4 = r2
	r2 = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r1 = (word64) Mem0[sp + 0x0000000000000090:int32]
	r2 = (word64) Mem0[sp + 0x0000000000000094:int32]
	r1 = r1 + r2
	r1 = r1
	r2 = r1
	r1 = r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 + r2
	r1 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 + r2
	r2 = r1
	r1 = r2
	Mem0[sp + 0x0000000000000020:word32] = (word32) r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 != 0x0000000000000000 l0000000000051010_ds_t
	// succ:  l0000000000051010_ds_f l0000000000051010_ds_t
l0000000000051010_ds_f:
	goto l0000000000051094
	// succ:  l0000000000051094
l0000000000051010_ds_t:
	goto l00000000000510B4
	// succ:  l00000000000510B4
l0000000000051094:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000510B4:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = r1
	Mem0[sp + 0x0000000000000038:word64] = r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.gfget (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l00000000000510B4_ds_t
	// succ:  l00000000000510B4_ds_f l00000000000510B4_ds_t
l00000000000510B4_ds_f:
	goto l00000000000510E4
	// succ:  l00000000000510E4
l00000000000510B4_ds_t:
	goto l000000000005114C
	// succ:  l000000000005114C
l00000000000510E4:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.malg (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000030:word64] = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
l000000000005114C:
	Mem0[sp + 0x0000000000000030:word64] = r3
	r1 = Mem0[r3 + 0x0000000000000008:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000005114C_ds_t
	// succ:  l000000000005114C_ds_f l000000000005114C_ds_t
l000000000005114C_ds_f:
	goto l0000000000051160
	// succ:  l0000000000051160
l000000000005114C_ds_t:
	goto l0000000000051184
	// succ:  l0000000000051184
l0000000000051160:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000051184:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.readgstatus (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.newproc1_exit:


// runtime.gfput
// Return size: 0
void runtime.gfput()
runtime.gfput_entry:
	// succ:  l00000000000516F0
l00000000000516F0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000516F0_ds_t
	// succ:  l00000000000516F0_ds_f l00000000000516F0_ds_t
l00000000000516F0_ds_f:
	goto l0000000000051700
	// succ:  l0000000000051700
l00000000000516F0_ds_t:
	goto l0000000000051714
	// succ:  l0000000000051714
l0000000000051700:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000516F0
	// succ:  l00000000000516F0
l0000000000051714:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.readgstatus (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000028:word64]
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.gfput_exit:


// runtime.gfget
// Return size: 0
void runtime.gfget()
runtime.gfget_entry:
	// succ:  l0000000000051AD8
l0000000000051AD8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000051AD8_ds_t
	// succ:  l0000000000051AD8_ds_f l0000000000051AD8_ds_t
l0000000000051AD8_ds_f:
	goto l0000000000051AE8
	// succ:  l0000000000051AE8
l0000000000051AD8_ds_t:
	goto l0000000000051AFC
	// succ:  l0000000000051AFC
l0000000000051AE8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000051AD8
	// succ:  l0000000000051AD8
l0000000000051AFC:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000038:word64]
	goto l0000000000051B08
	// succ:  l0000000000051B08
l0000000000051AFC_ds_f:
	goto l0000000000051B14
	// succ:  l0000000000051B14
l0000000000051AFC_ds_t:
	goto l0000000000051B3C
	// succ:  l0000000000051B3C
l0000000000051B08:
	r5 = Mem0[r6 + 0x0000000000000DD0:word64]
	branch r5 != 0x0000000000000000 l0000000000051AFC_ds_t
	goto l0000000000051AFC_ds_f
	// succ:  l0000000000051AFC_ds_f l0000000000051AFC_ds_t
l0000000000051B14:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001468:word64]
	branch r1 != 0x0000000000000000 l0000000000051B14_ds_t
	// succ:  l0000000000051B14_ds_f l0000000000051B14_ds_t
l0000000000051B14_ds_f:
	goto l0000000000051B28
	// succ:  l0000000000051B28
l0000000000051B14_ds_t:
	goto l0000000000051C30
	// succ:  l0000000000051C30
l0000000000051B28:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001470:word64]
	branch r1 != 0x0000000000000000 l0000000000051B28_ds_t
	// succ:  l0000000000051B28_ds_f l0000000000051B28_ds_t
l0000000000051B28_ds_f:
	goto l0000000000051B3C
	// succ:  l0000000000051B3C
l0000000000051B28_ds_t:
	goto l0000000000051C30
	// succ:  l0000000000051C30
l0000000000051B3C:
	branch r5 == 0x0000000000000000 l0000000000051B3C_ds_t
	// succ:  l0000000000051B3C_ds_f l0000000000051B3C_ds_t
l0000000000051B3C_ds_f:
	goto l0000000000051B44
	// succ:  l0000000000051B44
l0000000000051B3C_ds_t:
	goto l0000000000051BF8
	// succ:  l0000000000051BF8
l0000000000051B44:
	Mem0[sp + 0x0000000000000018:word64] = r5
	r2 = Mem0[r5 + 0x00000000000000E0:word64]
	r1 = r6
	branch r6 != 0x0000000000000000 l0000000000051B44_ds_t
	// succ:  l0000000000051B44_ds_f l0000000000051B44_ds_t
l0000000000051B44_ds_f:
	goto l0000000000051B58
	// succ:  l0000000000051B58
l0000000000051B44_ds_t:
	goto l0000000000051B5C
	// succ:  l0000000000051B5C
l0000000000051B58:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000051B5C
l0000000000051B5C:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000051B5C_ds_t
	// succ:  l0000000000051B5C_ds_f l0000000000051B5C_ds_t
l0000000000051B5C_ds_f:
	goto l0000000000051B74
	// succ:  l0000000000051B74
l0000000000051B5C_ds_t:
	goto l0000000000051C0C
	// succ:  l0000000000051C0C
l0000000000051B74:
	Mem0[r1 + 0x0000000000000DD0:word64] = r2
	goto l0000000000051B78
	// succ:  l0000000000051B78
l0000000000051B74_ds_f:
	goto l0000000000051BA4
	// succ:  l0000000000051BA4
l0000000000051B74_ds_t:
	goto l0000000000051BF8
	// succ:  l0000000000051BF8
l0000000000051B78:
	r2 = (word64) Mem0[r6 + 0x0000000000000DD8:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r6 + 0x0000000000000DD8:word32] = (word32) r2
	r1 = Mem0[r5:word64]
	branch r1 != 0x0000000000000000 l0000000000051B74_ds_t
	goto l0000000000051B74_ds_f
	// succ:  l0000000000051B74_ds_f l0000000000051B74_ds_t
l0000000000051BA4:
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	r2 = r5
	Mem0[r3 + 0x0000000000000008:word64] = r5
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000018:word64]
	branch r5 != 0x0000000000000000 l0000000000051BA4_ds_t
	// succ:  l0000000000051BA4_ds_f l0000000000051BA4_ds_t
l0000000000051BA4_ds_f:
	goto l0000000000051BDC
	// succ:  l0000000000051BDC
l0000000000051BA4_ds_t:
	goto l0000000000051BE0
	// succ:  l0000000000051BE0
l0000000000051BDC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000051BE0
l0000000000051BE0:
	r2 = Mem0[r5:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r5 + 0x0000000000000010:word64] = r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	Mem0[r5 + 0x0000000000000038:word64] = r2
	// succ:  l0000000000051BF8
l0000000000051BF8:
	Mem0[sp + 0x0000000000000040:word64] = r5
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gfget_exit
l0000000000051C0C:
	lo = r3 / r6
	hi = r3 % r6
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000038:word64]
	r5 = Mem0[sp + 0x0000000000000018:word64]
	goto l0000000000051B78
	// succ:  l0000000000051B78
l0000000000051C30:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000038:word64]
	goto l0000000000051C5C
	// succ:  l0000000000051C5C
l0000000000051C30_ds_f:
	goto l0000000000051C7C
	// succ:  l0000000000051C7C
l0000000000051C30_ds_t:
	goto l0000000000051E2C
	// succ:  l0000000000051E2C
l0000000000051C5C:
	r1 = (word64) Mem0[r6 + 0x0000000000000DD8:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 == 0x0000000000000000 l0000000000051C30_ds_t
	goto l0000000000051C30_ds_f
	// succ:  l0000000000051C30_ds_f l0000000000051C30_ds_t
l0000000000051C7C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001468:word64]
	branch r1 == 0x0000000000000000 l0000000000051C7C_ds_t
	// succ:  l0000000000051C7C_ds_f l0000000000051C7C_ds_t
l0000000000051C7C_ds_f:
	goto l0000000000051C90
	// succ:  l0000000000051C90
l0000000000051C7C_ds_t:
	goto l0000000000051DAC
	// succ:  l0000000000051DAC
l0000000000051C90:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r5 = Mem0[r23 + 0x0000000000001468:word64]
	Mem0[sp + 0x0000000000000018:word64] = r5
	r1 = Mem0[r5 + 0x00000000000000E0:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l0000000000051C90_ds_t
	// succ:  l0000000000051C90_ds_f l0000000000051C90_ds_t
l0000000000051C90_ds_f:
	goto l0000000000051CBC
	// succ:  l0000000000051CBC
l0000000000051C90_ds_t:
	goto l0000000000051D80
	// succ:  l0000000000051D80
l0000000000051CBC:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001468:word64] = r1
	goto l0000000000051CC8
	// succ:  l0000000000051CC8
l0000000000051CBC_ds_f:
	goto l0000000000051D20
	// succ:  l0000000000051D20
l0000000000051CBC_ds_t:
	goto l0000000000051D24
	// succ:  l0000000000051D24
l0000000000051CC8:
	r2 = (word64) Mem0[r6 + 0x0000000000000DD8:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r6 + 0x0000000000000DD8:word32] = (word32) r2
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001478:int32]
	r2 = r1
	r1 = r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 - r2
	r4 = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001478:word32] = (word32) r4
	branch r5 != 0x0000000000000000 l0000000000051CBC_ds_t
	goto l0000000000051CBC_ds_f
	// succ:  l0000000000051CBC_ds_f l0000000000051CBC_ds_t
l0000000000051D20:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000051D24
l0000000000051D24:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r4 / r5
	hi = r4 % r5
	r2 = Mem0[r6 + 0x0000000000000DD0:word64]
	Mem0[r4:word64] = r2
	r1 = r6
	r2 = r5
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000051D24_ds_t
	// succ:  l0000000000051D24_ds_f l0000000000051D24_ds_t
l0000000000051D24_ds_f:
	goto l0000000000051D54
	// succ:  l0000000000051D54
l0000000000051D24_ds_t:
	goto l0000000000051D60
	// succ:  l0000000000051D60
l0000000000051D54:
	Mem0[r1 + 0x0000000000000DD0:word64] = r2
	goto l0000000000051C5C
	// succ:  l0000000000051C5C
l0000000000051D60:
	lo = r3 / r6
	hi = r3 % r6
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r5
	call runtime.writebarrierptr (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000038:word64]
	goto l0000000000051C5C
	// succ:  l0000000000051C5C
l0000000000051D80:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000038:word64]
	r5 = Mem0[sp + 0x0000000000000018:word64]
	goto l0000000000051CC8
	// succ:  l0000000000051CC8
l0000000000051DAC:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001470:word64]
	branch r1 == 0x0000000000000000 l0000000000051DAC_ds_t
	// succ:  l0000000000051DAC_ds_f l0000000000051DAC_ds_t
l0000000000051DAC_ds_f:
	goto l0000000000051DC0
	// succ:  l0000000000051DC0
l0000000000051DAC_ds_t:
	goto l0000000000051E2C
	// succ:  l0000000000051E2C
l0000000000051DC0:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r5 = Mem0[r23 + 0x0000000000001470:word64]
	Mem0[sp + 0x0000000000000018:word64] = r5
	r1 = Mem0[r5 + 0x00000000000000E0:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l0000000000051DC0_ds_t
	// succ:  l0000000000051DC0_ds_f l0000000000051DC0_ds_t
l0000000000051DC0_ds_f:
	goto l0000000000051DEC
	// succ:  l0000000000051DEC
l0000000000051DC0_ds_t:
	goto l0000000000051E00
	// succ:  l0000000000051E00
l0000000000051DEC:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001470:word64] = r1
	goto l0000000000051CC8
	// succ:  l0000000000051CC8
l0000000000051E00:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000038:word64]
	r5 = Mem0[sp + 0x0000000000000018:word64]
	goto l0000000000051CC8
	// succ:  l0000000000051CC8
l0000000000051E2C:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000038:word64]
	goto l0000000000051B08
	// succ:  l0000000000051B08
runtime.gfget_exit:


// runtime.gfpurge
// Return size: 0
void runtime.gfpurge()
runtime.gfpurge_entry:
	// succ:  l0000000000051E60
l0000000000051E60:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000051E60_ds_t
	// succ:  l0000000000051E60_ds_f l0000000000051E60_ds_t
l0000000000051E60_ds_f:
	goto l0000000000051E70
	// succ:  l0000000000051E70
l0000000000051E60_ds_t:
	goto l0000000000051E84
	// succ:  l0000000000051E84
l0000000000051E70:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000051E60
	// succ:  l0000000000051E60
l0000000000051E84:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000028:word64]
	goto l0000000000051EB8
	// succ:  l0000000000051EB8
l0000000000051E84_ds_f:
	goto l0000000000051ED0
	// succ:  l0000000000051ED0
l0000000000051E84_ds_t:
	goto l000000000005205C
	// succ:  l000000000005205C
l0000000000051EB8:
	r1 = (word64) Mem0[r6 + 0x0000000000000DD8:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l0000000000051E84_ds_t
	goto l0000000000051E84_ds_f
	// succ:  l0000000000051E84_ds_f l0000000000051E84_ds_t
l0000000000051ED0:
	r2 = (word64) Mem0[r6 + 0x0000000000000DD8:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r6 + 0x0000000000000DD8:word32] = (word32) r2
	r5 = Mem0[r6 + 0x0000000000000DD0:word64]
	Mem0[sp + 0x0000000000000018:word64] = r5
	r2 = Mem0[r5 + 0x00000000000000E0:word64]
	r1 = r6
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000051ED0_ds_t
	// succ:  l0000000000051ED0_ds_f l0000000000051ED0_ds_t
l0000000000051ED0_ds_f:
	goto l0000000000051F18
	// succ:  l0000000000051F18
l0000000000051ED0_ds_t:
	goto l0000000000052038
	// succ:  l0000000000052038
l0000000000051F18:
	Mem0[r1 + 0x0000000000000DD0:word64] = r2
	goto l0000000000051F1C
	// succ:  l0000000000051F1C
l0000000000051F18_ds_f:
	goto l0000000000051F28
	// succ:  l0000000000051F28
l0000000000051F18_ds_t:
	goto l0000000000051FC8
	// succ:  l0000000000051FC8
l0000000000051F1C:
	r1 = Mem0[r5:word64]
	branch r1 != 0x0000000000000000 l0000000000051F18_ds_t
	goto l0000000000051F18_ds_f
	// succ:  l0000000000051F18_ds_f l0000000000051F18_ds_t
l0000000000051F28:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r5
	hi = r1 % r5
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000001470:word64]
	Mem0[r1:word64] = r3
	r1 = r5
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l0000000000051F28_ds_t
	// succ:  l0000000000051F28_ds_f l0000000000051F28_ds_t
l0000000000051F28_ds_f:
	goto l0000000000051F5C
	// succ:  l0000000000051F5C
l0000000000051F28_ds_t:
	goto l0000000000051FA0
	// succ:  l0000000000051FA0
l0000000000051F5C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001470:word64] = r1
	// succ:  l0000000000051F68
l0000000000051F68:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001478:int32]
	r2 = r1
	r1 = r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 + r2
	r1 = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001478:word32] = (word32) r1
	goto l0000000000051EB8
	// succ:  l0000000000051EB8
l0000000000051FA0:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r5
	call runtime.writebarrierptr (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000028:word64]
	goto l0000000000051F68
	// succ:  l0000000000051F68
l0000000000051FC8:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r5
	hi = r1 % r5
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000001468:word64]
	Mem0[r1:word64] = r3
	r1 = r5
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l0000000000051FC8_ds_t
	// succ:  l0000000000051FC8_ds_f l0000000000051FC8_ds_t
l0000000000051FC8_ds_f:
	goto l0000000000051FFC
	// succ:  l0000000000051FFC
l0000000000051FC8_ds_t:
	goto l0000000000052010
	// succ:  l0000000000052010
l0000000000051FFC:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001468:word64] = r1
	goto l0000000000051F68
	// succ:  l0000000000051F68
l0000000000052010:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r5
	call runtime.writebarrierptr (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000028:word64]
	goto l0000000000051F68
	// succ:  l0000000000051F68
l0000000000052038:
	lo = r3 / r6
	hi = r3 % r6
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000028:word64]
	r5 = Mem0[sp + 0x0000000000000018:word64]
	goto l0000000000051F1C
	// succ:  l0000000000051F1C
l000000000005205C:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gfpurge_exit
runtime.gfpurge_exit:


// runtime.unlockOSThread
// Return size: 0
void runtime.unlockOSThread()
runtime.unlockOSThread_entry:
	// succ:  l0000000000052098
l0000000000052098:
	sp = fp
	sp = sp + -24
	Mem0[sp:word64] = ra
	r3 = r30
	Mem0[sp + 0x0000000000000010:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000002C4:uint32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.unlockOSThread_exit:


// runtime.badunlockosthread
// Return size: 0
void runtime.badunlockosthread()
runtime.badunlockosthread_entry:
	// succ:  l0000000000052180
l0000000000052180:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000052180_ds_t
	// succ:  l0000000000052180_ds_f l0000000000052180_ds_t
l0000000000052180_ds_f:
	goto l0000000000052190
	// succ:  l0000000000052190
l0000000000052180_ds_t:
	goto l00000000000521A4
	// succ:  l00000000000521A4
l0000000000052190:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000052180
	// succ:  l0000000000052180
l00000000000521A4:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.badunlockosthread_exit:


// runtime._System
// Return size: 0
void runtime._System()
runtime._System_entry:
	// succ:  l00000000000521E0
l00000000000521E0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000521E0_ds_t
	// succ:  l00000000000521E0_ds_f l00000000000521E0_ds_t
l00000000000521E0_ds_f:
	goto l00000000000521F0
	// succ:  l00000000000521F0
l00000000000521E0_ds_t:
	goto l0000000000052204
	// succ:  l0000000000052204
l00000000000521F0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000521E0
	// succ:  l00000000000521E0
l0000000000052204:
	sp = sp + -8
	Mem0[sp:word64] = ra
	call runtime._System (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime._System_exit
runtime._System_exit:


// runtime._ExternalCode
// Return size: 0
void runtime._ExternalCode()
runtime._ExternalCode_entry:
	// succ:  l0000000000052228
l0000000000052228:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000052228_ds_t
	// succ:  l0000000000052228_ds_f l0000000000052228_ds_t
l0000000000052228_ds_f:
	goto l0000000000052238
	// succ:  l0000000000052238
l0000000000052228_ds_t:
	goto l000000000005224C
	// succ:  l000000000005224C
l0000000000052238:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000052228
	// succ:  l0000000000052228
l000000000005224C:
	sp = sp + -8
	Mem0[sp:word64] = ra
	call runtime._ExternalCode (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime._ExternalCode_exit
runtime._ExternalCode_exit:


// runtime._GC
// Return size: 0
void runtime._GC()
runtime._GC_entry:
	// succ:  l0000000000052270
l0000000000052270:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000052270_ds_t
	// succ:  l0000000000052270_ds_f l0000000000052270_ds_t
l0000000000052270_ds_f:
	goto l0000000000052280
	// succ:  l0000000000052280
l0000000000052270_ds_t:
	goto l0000000000052294
	// succ:  l0000000000052294
l0000000000052280:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000052270
	// succ:  l0000000000052270
l0000000000052294:
	sp = sp + -8
	Mem0[sp:word64] = ra
	call runtime._GC (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime._GC_exit
runtime._GC_exit:


// runtime.sigprof
// Return size: 0
void runtime.sigprof()
runtime.sigprof_entry:
	// succ:  l00000000000522B8
l00000000000522B8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -808
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000522B8_ds_t
	// succ:  l00000000000522B8_ds_f l00000000000522B8_ds_t
l00000000000522B8_ds_f:
	goto l00000000000522CC
	// succ:  l00000000000522CC
l00000000000522B8_ds_t:
	goto l00000000000522E0
	// succ:  l00000000000522E0
l00000000000522CC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000522B8
	// succ:  l00000000000522B8
l00000000000522E0:
	sp = sp + -808
	Mem0[sp:word64] = ra
	r1 = sp + 640
	r2 = r1 + 48
	// succ:  l00000000000522F0
l00000000000522F0:
	Mem0[r1 + 0x0000000000000008:word64] = 0x0000000000000000
	r1 = r1 + 8
	branch r1 != r2 l00000000000522F0_ds_t
	// succ:  l00000000000522F0_ds_f l00000000000522F0_ds_t
l00000000000522F0_ds_f:
	goto l0000000000052300
	// succ:  l0000000000052300
l00000000000522F0_ds_t:
	goto l00000000000522F0
	// succ:  l00000000000522F0
l0000000000052300:
	r5 = Mem0[sp + 0x0000000000000348:word64]
	r4 = Mem0[sp + 0x0000000000000350:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006894:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000052300_ds_t
	// succ:  l0000000000052300_ds_f l0000000000052300_ds_t
l0000000000052300_ds_f:
	goto l0000000000052328
	// succ:  l0000000000052328
l0000000000052300_ds_t:
	goto l0000000000052338
	// succ:  l0000000000052338
l0000000000052328:
	r4 = Mem0[sp:word64]
	sp = sp + 808
	call r4 (retsize: 0;)
	return
	// succ:  runtime.sigprof_exit
l0000000000052338:
	r2 = (word64) Mem0[r4 + 0x00000000000000C4:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r4 + 0x00000000000000C4:word32] = (word32) r2
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000060:byte] = (byte) r1
	branch r5 == 0x0000000000000000 l0000000000052338_ds_t
	// succ:  l0000000000052338_ds_f l0000000000052338_ds_t
l0000000000052338_ds_f:
	goto l000000000005236C
	// succ:  l000000000005236C
l0000000000052338_ds_t:
	goto l0000000000052B88
	// succ:  l0000000000052B88
l000000000005236C:
	r1 = Mem0[r5:word64]
	r2 = Mem0[sp + 0x0000000000000338:word64]
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l000000000005236C_ds_t
	// succ:  l000000000005236C_ds_f l000000000005236C_ds_t
l000000000005236C_ds_f:
	goto l0000000000052380
	// succ:  l0000000000052380
l000000000005236C_ds_t:
	goto l0000000000052B88
	// succ:  l0000000000052B88
l0000000000052380:
	r1 = Mem0[r5 + 0x0000000000000008:word64]
	r2 = Mem0[sp + 0x0000000000000338:word64]
	r23 = (word64) (r1 <u r2)
	branch r23 != 0x0000000000000000 l0000000000052380_ds_t
	// succ:  l0000000000052380_ds_f l0000000000052380_ds_t
l0000000000052380_ds_f:
	goto l0000000000052394
	// succ:  l0000000000052394
l0000000000052380_ds_t:
	goto l0000000000052B88
	// succ:  l0000000000052B88
l0000000000052394:
	r1 = Mem0[sp + 0x0000000000000330:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.setsSP (retsize: 0;)
	r3 = (word64) Mem0[sp + 0x0000000000000060:byte]
	r5 = Mem0[sp + 0x0000000000000348:word64]
	r4 = Mem0[sp + 0x0000000000000350:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l0000000000052394_ds_t
	// succ:  l0000000000052394_ds_f l0000000000052394_ds_t
l0000000000052394_ds_f:
	goto l00000000000523C4
	// succ:  l00000000000523C4
l0000000000052394_ds_t:
	goto l0000000000052B88
	// succ:  l0000000000052B88
l00000000000523C4:
	lo = r1 / sp
	hi = r1 % sp
	Mem0[r1:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000010:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000028:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000050:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000060:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000068:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000070:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000078:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000080:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000088:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000090:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000098:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000A0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000A8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000B0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000B8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000C0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000C8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000D0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000D8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000E0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000E8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000F0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000F8:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000100:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000108:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000110:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000118:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000120:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000128:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000130:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000138:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000140:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000148:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000150:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000158:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000160:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000168:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000170:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000178:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000180:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000188:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000190:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000198:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000001A0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000001A8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000001B0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000001B8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000001C0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000001C8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000001D0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000001D8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000001E0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000001E8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000001F0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000001F8:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000280:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000068:word64] = 0x0000000000000000
	r1 = (word64) Mem0[r4 + 0x0000000000000108:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l00000000000523C4_ds_t
	// succ:  l00000000000523C4_ds_f l00000000000523C4_ds_t
l00000000000523C4_ds_f:
	goto l00000000000524EC
	// succ:  l00000000000524EC
l00000000000523C4_ds_t:
	goto l0000000000052A88
	// succ:  l0000000000052A88
l00000000000524EC:
	r1 = Mem0[r4 + 0x00000000000000A0:word64]
	branch r1 == 0x0000000000000000 l00000000000524EC_ds_t
	// succ:  l00000000000524EC_ds_f l00000000000524EC_ds_t
l00000000000524EC_ds_f:
	goto l00000000000524F8
	// succ:  l00000000000524F8
l00000000000524EC_ds_t:
	goto l0000000000052A88
	// succ:  l0000000000052A88
l00000000000524F8:
	r2 = Mem0[r4 + 0x00000000000000A0:word64]
	r1 = Mem0[r2 + 0x0000000000000080:word64]
	branch r1 == 0x0000000000000000 l00000000000524F8_ds_t
	// succ:  l00000000000524F8_ds_f l00000000000524F8_ds_t
l00000000000524F8_ds_f:
	goto l0000000000052508
	// succ:  l0000000000052508
l00000000000524F8_ds_t:
	goto l0000000000052A88
	// succ:  l0000000000052A88
l0000000000052508:
	r2 = Mem0[r4 + 0x00000000000000A0:word64]
	r1 = Mem0[r2 + 0x0000000000000078:word64]
	branch r1 == 0x0000000000000000 l0000000000052508_ds_t
	// succ:  l0000000000052508_ds_f l0000000000052508_ds_t
l0000000000052508_ds_f:
	goto l0000000000052518
	// succ:  l0000000000052518
l0000000000052508_ds_t:
	goto l0000000000052A88
	// succ:  l0000000000052A88
l0000000000052518:
	Mem0[sp + 0x0000000000000078:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000052518_ds_t
	// succ:  l0000000000052518_ds_f l0000000000052518_ds_t
l0000000000052518_ds_f:
	goto l000000000005252C
	// succ:  l000000000005252C
l0000000000052518_ds_t:
	goto l0000000000052530
	// succ:  l0000000000052530
l000000000005252C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000052530
l0000000000052530:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000350:word64]
	r5 = Mem0[sp + 0x0000000000000078:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
l0000000000052794:
	r1 = Mem0[sp + 0x0000000000000280:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000052794_ds_t
	// succ:  l0000000000052794_ds_f l0000000000052794_ds_t
l0000000000052794_ds_f:
	goto l00000000000527A4
	// succ:  l00000000000527A4
l0000000000052794_ds_t:
	goto l00000000000527B8
	// succ:  l00000000000527B8
l00000000000527A4:
	r1 = Mem0[sp + 0x0000000000000280:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.gcUnlockStackBarriers (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000350:word64]
	// succ:  l00000000000527B8
l00000000000527B8:
	r1 = Mem0[sp + 0x0000000000000068:word64]
	r23 = (word64) (0x0000000000000000 < r1)
	branch r23 != 0x0000000000000000 l00000000000527B8_ds_t
	// succ:  l00000000000527B8_ds_f l00000000000527B8_ds_t
l00000000000527B8_ds_f:
	goto l00000000000527C8
	// succ:  l00000000000527C8
l00000000000527B8_ds_t:
	goto l00000000000528AC
	// succ:  l00000000000528AC
l00000000000527C8:
	Mem0[sp + 0x0000000000000068:word64] = 0x0000000000000000
	branch 0x0000000000000000 != 0x0000000000000000 l00000000000527C8_ds_t
	// succ:  l00000000000527C8_ds_f l00000000000527C8_ds_t
l00000000000527C8_ds_f:
	goto l00000000000527D4
	// succ:  l00000000000527D4
l00000000000527C8_ds_t:
	goto l00000000000528AC
	// succ:  l00000000000528AC
l00000000000527D4:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000068:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000005A8:word64]
	r2 = Mem0[sp + 0x0000000000000330:word64]
	r23 = (word64) (r1 <u r2)
	branch r23 == 0x0000000000000000 l00000000000527D4_ds_t
	// succ:  l00000000000527D4_ds_f l00000000000527D4_ds_t
l00000000000527D4_ds_f:
	goto l00000000000527F8
	// succ:  l00000000000527F8
l00000000000527D4_ds_t:
	goto l0000000000052838
	// succ:  l0000000000052838
l00000000000527F8:
	r3 = 0x00000000000A0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x00000000000002A8:word64] = r1
	Mem0[sp + 0x00000000000002B0:word64] = r3
	lo = r1 / sp
	hi = r1 % sp
l0000000000052838:
	r1 = Mem0[sp + 0x0000000000000330:word64]
	Mem0[sp + 0x0000000000000080:word64] = r1
	r1 = Mem0[r4 + 0x00000000000000D8:word64]
	branch r1 != 0x0000000000000000 l0000000000052838_ds_t
	// succ:  l0000000000052838_ds_f l0000000000052838_ds_t
l0000000000052838_ds_f:
	goto l000000000005284C
	// succ:  l000000000005284C
l0000000000052838_ds_t:
	goto l0000000000052A14
	// succ:  l0000000000052A14
l000000000005284C:
	r1 = (word64) Mem0[r4 + 0x00000000000000F0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000005284C_ds_t
	// succ:  l000000000005284C_ds_f l000000000005284C_ds_t
l000000000005284C_ds_f:
	goto l0000000000052864
	// succ:  l0000000000052864
l000000000005284C_ds_t:
	goto l0000000000052A14
	// succ:  l0000000000052A14
l0000000000052864:
	r3 = 0x00000000000A0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	r2 = 0x0000000000090000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x00000000000002B8:word64] = r2
	Mem0[sp + 0x0000000000000298:word64] = r2
	Mem0[sp + 0x00000000000002C0:word64] = r3
	Mem0[sp + 0x00000000000002A0:word64] = r3
	lo = r1 / sp
	hi = r1 % sp
l00000000000528AC:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006894:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l00000000000528AC_ds_t
	// succ:  l00000000000528AC_ds_f l00000000000528AC_ds_t
l00000000000528AC_ds_f:
	goto l00000000000528CC
	// succ:  l00000000000528CC
l00000000000528AC_ds_t:
	goto l00000000000529D0
	// succ:  l00000000000529D0
l00000000000528CC:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000529D0:
	r2 = (word64) Mem0[r4 + 0x00000000000000C4:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r4 + 0x00000000000000C4:word32] = (word32) r2
	r4 = Mem0[sp:word64]
	sp = sp + 808
	call r4 (retsize: 0;)
	return
	// succ:  runtime.sigprof_exit
l0000000000052A14:
	r3 = 0x00000000000A0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	r2 = 0x0000000000090000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x00000000000002B8:word64] = r2
	Mem0[sp + 0x0000000000000288:word64] = r2
	Mem0[sp + 0x00000000000002C0:word64] = r3
	Mem0[sp + 0x0000000000000290:word64] = r3
	lo = r1 / sp
	hi = r1 % sp
l0000000000052A88:
	r1 = r3 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000052A88_ds_t
	// succ:  l0000000000052A88_ds_f l0000000000052A88_ds_t
l0000000000052A88_ds_f:
	goto l0000000000052A94
	// succ:  l0000000000052A94
l0000000000052A88_ds_t:
	goto l0000000000052794
	// succ:  l0000000000052794
l0000000000052A94:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	Mem0[sp + 0x0000000000000070:word64] = r3
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A0:word64]
	branch r1 == 0x0000000000000000 l0000000000052A94_ds_t
	// succ:  l0000000000052A94_ds_f l0000000000052A94_ds_t
l0000000000052A94_ds_f:
	goto l0000000000052AAC
	// succ:  l0000000000052AAC
l0000000000052A94_ds_t:
	goto l0000000000052B80
	// succ:  l0000000000052B80
l0000000000052AAC:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A0:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.gcTryLockStackBarriers (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000070:word64]
	r5 = Mem0[sp + 0x0000000000000348:word64]
	r4 = Mem0[sp + 0x0000000000000350:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000052AAC_ds_t
	// succ:  l0000000000052AAC_ds_f l0000000000052AAC_ds_t
l0000000000052AAC_ds_f:
	goto l0000000000052AE0
	// succ:  l0000000000052AE0
l0000000000052AAC_ds_t:
	goto l0000000000052B80
	// succ:  l0000000000052B80
l0000000000052AE0:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A0:word64]
	Mem0[sp + 0x0000000000000280:word64] = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r3 | r2
	r3 = r1
	goto l0000000000052AF8
	// succ:  l0000000000052AF8
l0000000000052AE0_ds_f:
	goto l0000000000052B0C
	// succ:  l0000000000052B0C
l0000000000052AE0_ds_t:
	goto l0000000000052B24
	// succ:  l0000000000052B24
l0000000000052AF8:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A0:word64]
	r2 = r5
	branch r1 != r5 l0000000000052AE0_ds_t
	goto l0000000000052AE0_ds_f
	// succ:  l0000000000052AE0_ds_f l0000000000052AE0_ds_t
l0000000000052B0C:
	r1 = Mem0[sp + 0x0000000000000280:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000052B0C_ds_t
	// succ:  l0000000000052B0C_ds_f l0000000000052B0C_ds_t
l0000000000052B0C_ds_f:
	goto l0000000000052B1C
	// succ:  l0000000000052B1C
l0000000000052B0C_ds_t:
	goto l0000000000052B24
	// succ:  l0000000000052B24
l0000000000052B1C:
	goto l0000000000052794
	// succ:  l0000000000052794
l0000000000052B24:
	r1 = Mem0[sp + 0x0000000000000330:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000338:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000340:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	Mem0[sp + 0x0000000000000020:word64] = r5
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000030:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = r1
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	r1 = r3
	Mem0[sp + 0x0000000000000050:word64] = r3
	call runtime.gentraceback (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000350:word64]
	r1 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[sp + 0x0000000000000068:word64] = r1
	goto l0000000000052794
	// succ:  l0000000000052794
l0000000000052B80:
	goto l0000000000052AF8
	// succ:  l0000000000052AF8
l0000000000052B88:
	r1 = 0x0000000000000000
	r3 = r1 + 0x00000000000000FF
	goto l00000000000523C4
	// succ:  l00000000000523C4
runtime.sigprof_exit:


// runtime.setsSP
// Return size: 0
void runtime.setsSP()
runtime.setsSP_entry:
	// succ:  l0000000000052B98
l0000000000052B98:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000052B98_ds_t
	// succ:  l0000000000052B98_ds_f l0000000000052B98_ds_t
l0000000000052B98_ds_f:
	goto l0000000000052BA8
	// succ:  l0000000000052BA8
l0000000000052B98_ds_t:
	goto l0000000000052BBC
	// succ:  l0000000000052BBC
l0000000000052BA8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000052B98
	// succ:  l0000000000052B98
l0000000000052BBC:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.findfunc (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	branch r3 != 0x0000000000000000 l0000000000052BBC_ds_t
	// succ:  l0000000000052BBC_ds_f l0000000000052BBC_ds_t
l0000000000052BBC_ds_f:
	goto l0000000000052BE4
	// succ:  l0000000000052BE4
l0000000000052BBC_ds_t:
	goto l0000000000052C00
	// succ:  l0000000000052C00
l0000000000052BE4:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.setsSP_exit
l0000000000052C00:
	r3 = Mem0[r3:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 - 0x00000000000068D0:word64]
	branch r3 != r2 l0000000000052C00_ds_t
	// succ:  l0000000000052C00_ds_f l0000000000052C00_ds_t
l0000000000052C00_ds_f:
	goto l0000000000052C18
	// succ:  l0000000000052C18
l0000000000052C00_ds_t:
	goto l0000000000052C34
	// succ:  l0000000000052C34
l0000000000052C18:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.setsSP_exit
l0000000000052C34:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 - 0x0000000000006850:word64]
	branch r3 != r2 l0000000000052C34_ds_t
	// succ:  l0000000000052C34_ds_f l0000000000052C34_ds_t
l0000000000052C34_ds_f:
	goto l0000000000052C48
	// succ:  l0000000000052C48
l0000000000052C34_ds_t:
	goto l0000000000052C64
	// succ:  l0000000000052C64
l0000000000052C48:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.setsSP_exit
l0000000000052C64:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 - 0x00000000000068B8:word64]
	branch r3 != r2 l0000000000052C64_ds_t
	// succ:  l0000000000052C64_ds_f l0000000000052C64_ds_t
l0000000000052C64_ds_f:
	goto l0000000000052C78
	// succ:  l0000000000052C78
l0000000000052C64_ds_t:
	goto l0000000000052C94
	// succ:  l0000000000052C94
l0000000000052C78:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.setsSP_exit
l0000000000052C94:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 - 0x00000000000068B0:word64]
	branch r3 != r2 l0000000000052C94_ds_t
	// succ:  l0000000000052C94_ds_f l0000000000052C94_ds_t
l0000000000052C94_ds_f:
	goto l0000000000052CA8
	// succ:  l0000000000052CA8
l0000000000052C94_ds_t:
	goto l0000000000052CC4
	// succ:  l0000000000052CC4
l0000000000052CA8:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.setsSP_exit
l0000000000052CC4:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.setsSP_exit
runtime.setsSP_exit:


// runtime.procresize
// Return size: 0
void runtime.procresize()
runtime.procresize_entry:
	// succ:  l0000000000052CE0
l0000000000052CE0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -176
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000052CE0_ds_t
	// succ:  l0000000000052CE0_ds_f l0000000000052CE0_ds_t
l0000000000052CE0_ds_f:
	goto l0000000000052CF4
	// succ:  l0000000000052CF4
l0000000000052CE0_ds_t:
	goto l0000000000052D08
	// succ:  l0000000000052D08
l0000000000052CF4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000052CE0
	// succ:  l0000000000052CE0
l0000000000052D08:
	sp = sp + -176
	Mem0[sp:word64] = ra
	r4 = (word64) Mem0[sp + 0x00000000000000B8:int32]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006974:int32]
	r3 = r1
	r1 = r3
	Mem0[sp + 0x0000000000000018:word32] = (word32) r3
	r2 = 0x0000000000000000
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 != 0x0000000000000000 l0000000000052D08_ds_t
	// succ:  l0000000000052D08_ds_f l0000000000052D08_ds_t
l0000000000052D08_ds_f:
	goto l0000000000052D44
	// succ:  l0000000000052D44
l0000000000052D08_ds_t:
	goto l0000000000053B48
	// succ:  l0000000000053B48
l0000000000052D44:
	r1 = r3
l0000000000053B48:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.procresize_exit:


// runtime.acquirep
// Return size: 0
void runtime.acquirep()
runtime.acquirep_entry:
	// succ:  l0000000000053B78
l0000000000053B78:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000053B78_ds_t
	// succ:  l0000000000053B78_ds_f l0000000000053B78_ds_t
l0000000000053B78_ds_f:
	goto l0000000000053B88
	// succ:  l0000000000053B88
l0000000000053B78_ds_t:
	goto l0000000000053B9C
	// succ:  l0000000000053B9C
l0000000000053B88:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000053B78
	// succ:  l0000000000053B78
l0000000000053B9C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.acquirep1 (retsize: 0;)
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	branch r2 != 0x0000000000000000 l0000000000053B9C_ds_t
	// succ:  l0000000000053B9C_ds_f l0000000000053B9C_ds_t
l0000000000053B9C_ds_f:
	goto l0000000000053BC0
	// succ:  l0000000000053BC0
l0000000000053B9C_ds_t:
	goto l0000000000053BC4
	// succ:  l0000000000053BC4
l0000000000053BC0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000053BC4
l0000000000053BC4:
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r3 = Mem0[r1 + 0x0000000000000028:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r1 != r4 l0000000000053BC4_ds_t
	// succ:  l0000000000053BC4_ds_f l0000000000053BC4_ds_t
l0000000000053BC4_ds_f:
	goto l0000000000053BE4
	// succ:  l0000000000053BE4
l0000000000053BC4_ds_t:
	goto l0000000000053C14
	// succ:  l0000000000053C14
l0000000000053BE4:
	Mem0[r2 + 0x0000000000000130:word64] = r3
	goto l0000000000053BE8
	// succ:  l0000000000053BE8
l0000000000053BE4_ds_f:
	goto l0000000000053BFC
	// succ:  l0000000000053BFC
l0000000000053BE4_ds_t:
	goto l0000000000053C04
	// succ:  l0000000000053C04
l0000000000053BE8:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006A50:byte]
	branch r1 == 0x0000000000000000 l0000000000053BE4_ds_t
	goto l0000000000053BE4_ds_f
	// succ:  l0000000000053BE4_ds_f l0000000000053BE4_ds_t
l0000000000053BFC:
	call runtime.traceProcStart (retsize: 0;)
l0000000000053C04:
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.acquirep_exit
l0000000000053C14:
	lo = r1 / r2
	hi = r1 % r2
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.writebarrierptr (retsize: 0;)
	goto l0000000000053BE8
	// succ:  l0000000000053BE8
runtime.acquirep_exit:


// runtime.acquirep1
// Return size: 0
void runtime.acquirep1()
runtime.acquirep1_entry:
	// succ:  l0000000000053C30
l0000000000053C30:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000053C30_ds_t
	// succ:  l0000000000053C30_ds_f l0000000000053C30_ds_t
l0000000000053C30_ds_f:
	goto l0000000000053C40
	// succ:  l0000000000053C40
l0000000000053C30_ds_t:
	goto l0000000000053C54
	// succ:  l0000000000053C54
l0000000000053C40:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000053C30
	// succ:  l0000000000053C30
l0000000000053C54:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000040:word64]
	r6 = r30
	Mem0[sp + 0x0000000000000030:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000053C54_ds_t
	// succ:  l0000000000053C54_ds_f l0000000000053C54_ds_t
l0000000000053C54_ds_f:
	goto l0000000000053C7C
	// succ:  l0000000000053C7C
l0000000000053C54_ds_t:
	goto l0000000000053E3C
	// succ:  l0000000000053E3C
l0000000000053C7C:
	r2 = Mem0[r6 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000130:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000053C7C_ds_t
	// succ:  l0000000000053C7C_ds_f l0000000000053C7C_ds_t
l0000000000053C7C_ds_f:
	goto l0000000000053C90
	// succ:  l0000000000053C90
l0000000000053C7C_ds_t:
	goto l0000000000053E3C
	// succ:  l0000000000053E3C
l0000000000053C90:
	r1 = Mem0[r3 + 0x0000000000000020:word64]
	branch r1 != 0x0000000000000000 l0000000000053C90_ds_t
	// succ:  l0000000000053C90_ds_f l0000000000053C90_ds_t
l0000000000053C90_ds_f:
	goto l0000000000053C9C
	// succ:  l0000000000053C9C
l0000000000053C90_ds_t:
	goto l0000000000053D18
	// succ:  l0000000000053D18
l0000000000053C9C:
	r1 = (word64) Mem0[r3 + 0x000000000000000C:uint32]
l0000000000053D18:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	r1 = Mem0[r3 + 0x0000000000000020:word64]
	branch r1 == 0x0000000000000000 l0000000000053D18_ds_t
	// succ:  l0000000000053D18_ds_f l0000000000053D18_ds_t
l0000000000053D18_ds_f:
	goto l0000000000053D2C
	// succ:  l0000000000053D2C
l0000000000053D18_ds_t:
	goto l0000000000053D38
	// succ:  l0000000000053D38
l0000000000053D2C:
	r4 = Mem0[r3 + 0x0000000000000020:word64]
	r2 = (word64) Mem0[r4 + 0x00000000000000C0:int32]
	Mem0[sp + 0x0000000000000018:word32] = (word32) r2
	// succ:  l0000000000053D38
l0000000000053D38:
	r2 = Mem0[r3 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000028:word64] = r2
	r1 = r3
	r2 = (word64) Mem0[r3 + 0x000000000000000C:uint32]
	Mem0[sp + 0x0000000000000020:word32] = (word32) r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000053E3C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.acquirep1_exit:


// runtime.releasep
// Return size: 0
void runtime.releasep()
runtime.releasep_entry:
	// succ:  l0000000000053E70
l0000000000053E70:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000053E70_ds_t
	// succ:  l0000000000053E70_ds_f l0000000000053E70_ds_t
l0000000000053E70_ds_f:
	goto l0000000000053E80
	// succ:  l0000000000053E80
l0000000000053E70_ds_t:
	goto l0000000000053E94
	// succ:  l0000000000053E94
l0000000000053E80:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000053E70
	// succ:  l0000000000053E70
l0000000000053E94:
	sp = sp + -88
	Mem0[sp:word64] = ra
	r4 = r30
	Mem0[sp + 0x0000000000000050:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000053E94_ds_t
	// succ:  l0000000000053E94_ds_f l0000000000053E94_ds_t
l0000000000053E94_ds_f:
	goto l0000000000053EB8
	// succ:  l0000000000053EB8
l0000000000053E94_ds_t:
	goto l000000000005414C
	// succ:  l000000000005414C
l0000000000053EB8:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000130:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000053EB8_ds_t
	// succ:  l0000000000053EB8_ds_f l0000000000053EB8_ds_t
l0000000000053EB8_ds_f:
	goto l0000000000053ECC
	// succ:  l0000000000053ECC
l0000000000053EB8_ds_t:
	goto l000000000005414C
	// succ:  l000000000005414C
l0000000000053ECC:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r5 = Mem0[r2 + 0x00000000000000B0:word64]
	r1 = Mem0[r5 + 0x0000000000000020:word64]
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	branch r1 != r2 l0000000000053ECC_ds_t
	// succ:  l0000000000053ECC_ds_f l0000000000053ECC_ds_t
l0000000000053ECC_ds_f:
	goto l0000000000053EE4
	// succ:  l0000000000053EE4
l0000000000053ECC_ds_t:
	goto l0000000000053F8C
	// succ:  l0000000000053F8C
l0000000000053EE4:
	r1 = Mem0[r5 + 0x0000000000000028:word64]
	r3 = Mem0[r4 + 0x0000000000000030:word64]
	r2 = Mem0[r3 + 0x0000000000000130:word64]
	branch r1 != r2 l0000000000053EE4_ds_t
	// succ:  l0000000000053EE4_ds_f l0000000000053EE4_ds_t
l0000000000053EE4_ds_f:
	goto l0000000000053EF8
	// succ:  l0000000000053EF8
l0000000000053EE4_ds_t:
	goto l0000000000053F8C
	// succ:  l0000000000053F8C
l0000000000053EF8:
	Mem0[sp + 0x0000000000000048:word64] = r5
	r1 = (word64) Mem0[r5 + 0x000000000000000C:uint32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l0000000000053F8C:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000038:word64] = r2
	Mem0[sp + 0x0000000000000040:word64] = r3
	r2 = Mem0[r5 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000130:word64]
	Mem0[sp + 0x0000000000000030:word64] = r1
	r2 = Mem0[r5 + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000028:word64] = r2
	r1 = r5
	Mem0[sp + 0x0000000000000048:word64] = r5
	r2 = (word64) Mem0[r5 + 0x000000000000000C:uint32]
	Mem0[sp + 0x0000000000000018:word32] = (word32) r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000005414C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.releasep_exit:


// runtime.incidlelocked
// Return size: 0
void runtime.incidlelocked()
runtime.incidlelocked_entry:
	// succ:  l0000000000054178
l0000000000054178:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000054178_ds_t
	// succ:  l0000000000054178_ds_f l0000000000054178_ds_t
l0000000000054178_ds_f:
	goto l0000000000054188
	// succ:  l0000000000054188
l0000000000054178_ds_t:
	goto l000000000005419C
	// succ:  l000000000005419C
l0000000000054188:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000054178
	// succ:  l0000000000054178
l000000000005419C:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r3 = (word64) Mem0[sp + 0x0000000000000018:int32]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001424:int32]
	r2 = r1
	r1 = r2
	r2 = r3
	r1 = r1 + r2
	r1 = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001424:word32] = (word32) r1
	r1 = r3
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l000000000005419C_ds_t
	// succ:  l000000000005419C_ds_f l000000000005419C_ds_t
l000000000005419C_ds_f:
	goto l0000000000054218
	// succ:  l0000000000054218
l000000000005419C_ds_t:
	goto l0000000000054220
	// succ:  l0000000000054220
l0000000000054218:
	call runtime.checkdead (retsize: 0;)
l0000000000054220:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.incidlelocked_exit
runtime.incidlelocked_exit:


// runtime.checkdead
// Return size: 0
void runtime.checkdead()
runtime.checkdead_entry:
	// succ:  l0000000000054258
l0000000000054258:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000054258_ds_t
	// succ:  l0000000000054258_ds_f l0000000000054258_ds_t
l0000000000054258_ds_f:
	goto l0000000000054268
	// succ:  l0000000000054268
l0000000000054258_ds_t:
	goto l000000000005427C
	// succ:  l000000000005427C
l0000000000054268:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000054258
	// succ:  l0000000000054258
l000000000005427C:
	sp = sp + -112
	Mem0[sp:word64] = ra
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006994:byte]
	branch r1 != 0x0000000000000000 l000000000005427C_ds_t
	// succ:  l000000000005427C_ds_f l000000000005427C_ds_t
l000000000005427C_ds_f:
	goto l0000000000054298
	// succ:  l0000000000054298
l000000000005427C_ds_t:
	goto l0000000000054AB8
	// succ:  l0000000000054AB8
l0000000000054298:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006996:byte]
	branch r1 != 0x0000000000000000 l0000000000054298_ds_t
	// succ:  l0000000000054298_ds_f l0000000000054298_ds_t
l0000000000054298_ds_f:
	goto l00000000000542AC
	// succ:  l00000000000542AC
l0000000000054298_ds_t:
	goto l0000000000054AB8
	// succ:  l0000000000054AB8
l00000000000542AC:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006964:uint32]
l0000000000054AB8:
	r4 = Mem0[sp:word64]
	sp = sp + 112
	call r4 (retsize: 0;)
	return
	// succ:  runtime.checkdead_exit
runtime.checkdead_exit:


// runtime.sysmon
// Return size: 0
void runtime.sysmon()
runtime.sysmon_entry:
	// succ:  l0000000000054AC8
l0000000000054AC8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000054AC8_ds_t
	// succ:  l0000000000054AC8_ds_f l0000000000054AC8_ds_t
l0000000000054AC8_ds_f:
	goto l0000000000054AD8
	// succ:  l0000000000054AD8
l0000000000054AC8_ds_t:
	goto l0000000000054AEC
	// succ:  l0000000000054AEC
l0000000000054AD8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000054AC8
	// succ:  l0000000000054AC8
l0000000000054AEC:
	sp = sp + -120
	Mem0[sp:word64] = ra
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001190:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006790:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l0000000000054AEC_ds_t
	// succ:  l0000000000054AEC_ds_f l0000000000054AEC_ds_t
l0000000000054AEC_ds_f:
	goto l0000000000054B28
	// succ:  l0000000000054B28
l0000000000054AEC_ds_t:
	goto l0000000000054B48
	// succ:  l0000000000054B48
l0000000000054B28:
	r1 = 0x0000000000980000
	r1 = r1 | 0x0000000000009680
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000000028:word64] = r1
	r1 = 0x0000000001310000
	r1 = r1 | 0x0000000000002D00
	Mem0[sp + 0x0000000000000038:word64] = r1
	// succ:  l0000000000054B48
l0000000000054B48:
	call runtime.nanotime (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000068:word64] = 0x0000000000000000
runtime.sysmon_exit:


// runtime.retake
// Return size: 0
void runtime.retake()
runtime.retake_entry:
	// succ:  l00000000000553A0
l00000000000553A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000553A0_ds_t
	// succ:  l00000000000553A0_ds_f l00000000000553A0_ds_t
l00000000000553A0_ds_f:
	goto l00000000000553B0
	// succ:  l00000000000553B0
l00000000000553A0_ds_t:
	goto l00000000000553C4
	// succ:  l00000000000553C4
l00000000000553B0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000553A0
	// succ:  l00000000000553A0
l00000000000553C4:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r7 = Mem0[sp + 0x0000000000000058:word64]
runtime.retake_exit:


// runtime.preemptall
// Return size: 0
void runtime.preemptall()
runtime.preemptall_entry:
	// succ:  l0000000000055848
l0000000000055848:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000055848_ds_t
	// succ:  l0000000000055848_ds_f l0000000000055848_ds_t
l0000000000055848_ds_f:
	goto l0000000000055858
	// succ:  l0000000000055858
l0000000000055848_ds_t:
	goto l000000000005586C
	// succ:  l000000000005586C
l0000000000055858:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000055848
	// succ:  l0000000000055848
l000000000005586C:
	sp = sp + -8
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	r6 = r1 + 0x00000000000000FF
	r1 = 0x0000000000000000
	r5 = r1
	r1 = r5
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006974:int32]
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 == 0x0000000000000000 l000000000005586C_ds_t
	// succ:  l000000000005586C_ds_f l000000000005586C_ds_t
l000000000005586C_ds_f:
	goto l00000000000558AC
	// succ:  l00000000000558AC
l000000000005586C_ds_t:
	goto l00000000000559C8
	// succ:  l00000000000559C8
l00000000000558AC:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r2 <u r3)
	branch r23 != 0x0000000000000000 l00000000000558AC_ds_t
	// succ:  l00000000000558AC_ds_f l00000000000558AC_ds_t
l00000000000558AC_ds_f:
	goto l00000000000558CC
	// succ:  l00000000000558CC
l00000000000558AC_ds_t:
	goto l00000000000558D8
	// succ:  l00000000000558D8
l00000000000558CC:
	call runtime.panicindex (retsize: 0;)
l00000000000558D8:
l00000000000559C8:
	r1 = r6 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000010:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.preemptall_exit
runtime.preemptall_exit:


// runtime.schedtrace
// Return size: 0
void runtime.schedtrace()
runtime.schedtrace_entry:
	// succ:  l00000000000559E0
l00000000000559E0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -264
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000559E0_ds_t
	// succ:  l00000000000559E0_ds_f l00000000000559E0_ds_t
l00000000000559E0_ds_f:
	goto l00000000000559F4
	// succ:  l00000000000559F4
l00000000000559E0_ds_t:
	goto l0000000000055A08
	// succ:  l0000000000055A08
l00000000000559F4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000559E0
	// succ:  l00000000000559E0
l0000000000055A08:
	sp = sp + -264
	Mem0[sp:word64] = ra
	call runtime.nanotime (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[sp + 0x00000000000000B0:word64] = r3
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006858:word64]
	branch r1 != 0x0000000000000000 l0000000000055A08_ds_t
	// succ:  l0000000000055A08_ds_f l0000000000055A08_ds_t
l0000000000055A08_ds_f:
	goto l0000000000055A34
	// succ:  l0000000000055A34
l0000000000055A08_ds_t:
	goto l0000000000055A40
	// succ:  l0000000000055A40
l0000000000055A34:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006858:word64] = r3
	// succ:  l0000000000055A40
l0000000000055A40:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = Mem0[sp + 0x00000000000000B0:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 - 0x0000000000006858:word64]
runtime.schedtrace_exit:


// runtime.mput
// Return size: 0
void runtime.mput()
runtime.mput_entry:
	// succ:  l0000000000056808
l0000000000056808:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000056808_ds_t
	// succ:  l0000000000056808_ds_f l0000000000056808_ds_t
l0000000000056808_ds_f:
	goto l0000000000056818
	// succ:  l0000000000056818
l0000000000056808_ds_t:
	goto l000000000005682C
	// succ:  l000000000005682C
l0000000000056818:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000056808
	// succ:  l0000000000056808
l000000000005682C:
	sp = sp + -8
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x0000000000001418:word64]
	Mem0[r3 + 0x0000000000000128:word64] = r2
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[r1:word64] = r3
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001420:int32]
	r2 = r1
	r1 = r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 + r2
	r1 = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001420:word32] = (word32) r1
	call runtime.checkdead (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mput_exit
runtime.mput_exit:


// runtime.globrunqget
// Return size: 0
void runtime.globrunqget()
runtime.globrunqget_entry:
	// succ:  l00000000000568A8
l00000000000568A8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000568A8_ds_t
	// succ:  l00000000000568A8_ds_f l00000000000568A8_ds_t
l00000000000568A8_ds_f:
	goto l00000000000568B8
	// succ:  l00000000000568B8
l00000000000568A8_ds_t:
	goto l00000000000568CC
	// succ:  l00000000000568CC
l00000000000568B8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000568A8
	// succ:  l00000000000568A8
l00000000000568CC:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = (word64) Mem0[sp + 0x0000000000000040:int32]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001458:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l00000000000568CC_ds_t
	// succ:  l00000000000568CC_ds_f l00000000000568CC_ds_t
l00000000000568CC_ds_f:
	goto l00000000000568F8
	// succ:  l00000000000568F8
l00000000000568CC_ds_t:
	goto l000000000005690C
	// succ:  l000000000005690C
l00000000000568F8:
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.globrunqget_exit
l000000000005690C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001458:int32]
	r2 = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006974:int32]
	r2 = r2
	r3 = r3
	branch r3 != 0x0000000000000000 l000000000005690C_ds_t
	// succ:  l000000000005690C_ds_f l000000000005690C_ds_t
l000000000005690C_ds_f:
	goto l0000000000056938
	// succ:  l0000000000056938
l000000000005690C_ds_t:
	goto l0000000000056944
	// succ:  l0000000000056944
l0000000000056938:
	call runtime.panicdivide (retsize: 0;)
l0000000000056944:
	lo = r2 / r3
	hi = r2 % r3
	r2 = lo
	r1 = r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 + r2
	r1 = r1
	r3 = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001458:int32]
	r2 = r3
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 == 0x0000000000000000 l0000000000056944_ds_t
	// succ:  l0000000000056944_ds_f l0000000000056944_ds_t
l0000000000056944_ds_f:
	goto l0000000000056988
	// succ:  l0000000000056988
l0000000000056944_ds_t:
	goto l0000000000056998
	// succ:  l0000000000056998
l0000000000056988:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001458:int32]
	r3 = r1
	// succ:  l0000000000056998
l0000000000056998:
	r1 = r4
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l0000000000056998_ds_t
	// succ:  l0000000000056998_ds_f l0000000000056998_ds_t
l0000000000056998_ds_f:
	goto l00000000000569B4
	// succ:  l00000000000569B4
l0000000000056998_ds_t:
	goto l00000000000569D8
	// succ:  l00000000000569D8
l00000000000569B4:
	r1 = r3
	r2 = r4
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l00000000000569B4_ds_t
	// succ:  l00000000000569B4_ds_f l00000000000569B4_ds_t
l00000000000569B4_ds_f:
	goto l00000000000569D0
	// succ:  l00000000000569D0
l00000000000569B4_ds_t:
	goto l00000000000569D8
	// succ:  l00000000000569D8
l00000000000569D0:
	r1 = r4
	r3 = r1
	// succ:  l00000000000569D8
l00000000000569D8:
	r1 = r3
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l00000000000569D8_ds_t
	// succ:  l00000000000569D8_ds_f l00000000000569D8_ds_t
l00000000000569D8_ds_f:
	goto l00000000000569F8
	// succ:  l00000000000569F8
l00000000000569D8_ds_t:
	goto l0000000000056A04
	// succ:  l0000000000056A04
l00000000000569F8:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	r3 = r1
	// succ:  l0000000000056A04
l0000000000056A04:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001458:int32]
	r2 = r1
	r1 = r2
	r2 = r3
	r1 = r1 - r2
	r1 = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001458:word32] = (word32) r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001458:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000056A04_ds_t
	// succ:  l0000000000056A04_ds_f l0000000000056A04_ds_t
l0000000000056A04_ds_f:
	goto l0000000000056A50
	// succ:  l0000000000056A50
l0000000000056A04_ds_t:
	goto l0000000000056A5C
	// succ:  l0000000000056A5C
l0000000000056A50:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001450:word64] = 0x0000000000000000
	// succ:  l0000000000056A5C
l0000000000056A5C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x0000000000001448:word64]
	Mem0[sp + 0x0000000000000028:word64] = r2
	r1 = Mem0[sp + 0x0000000000000028:word64]
	r2 = Mem0[r1 + 0x00000000000000E0:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001448:word64] = r2
	r1 = r3
	r2 = r1
	r1 = r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 - r2
	r1 = r1
	r2 = r1
	goto l0000000000056AA0
	// succ:  l0000000000056AA0
l0000000000056A5C_ds_f:
	goto l0000000000056AC0
	// succ:  l0000000000056AC0
l0000000000056A5C_ds_t:
	goto l0000000000056B20
	// succ:  l0000000000056B20
l0000000000056AA0:
	r1 = r2
	Mem0[sp + 0x0000000000000020:word32] = (word32) r2
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l0000000000056A5C_ds_t
	goto l0000000000056A5C_ds_f
	// succ:  l0000000000056A5C_ds_f l0000000000056A5C_ds_t
l0000000000056AC0:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000001448:word64]
	r2 = Mem0[r3 + 0x00000000000000E0:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001448:word64] = r2
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	call runtime.runqput (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:int32]
	r2 = r1
	r1 = r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 - r2
	r1 = r1
	r2 = r1
	goto l0000000000056AA0
	// succ:  l0000000000056AA0
l0000000000056B20:
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.globrunqget_exit
runtime.globrunqget_exit:


// runtime.pidleput
// Return size: 0
void runtime.pidleput()
runtime.pidleput_entry:
	// succ:  l0000000000056B38
l0000000000056B38:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000056B38_ds_t
	// succ:  l0000000000056B38_ds_f l0000000000056B38_ds_t
l0000000000056B38_ds_f:
	goto l0000000000056B48
	// succ:  l0000000000056B48
l0000000000056B38_ds_t:
	goto l0000000000056B5C
	// succ:  l0000000000056B5C
l0000000000056B48:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000056B38
	// succ:  l0000000000056B38
l0000000000056B5C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.runqempty (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l0000000000056B5C_ds_t
	// succ:  l0000000000056B5C_ds_f l0000000000056B5C_ds_t
l0000000000056B5C_ds_f:
	goto l0000000000056B88
	// succ:  l0000000000056B88
l0000000000056B5C_ds_t:
	goto l0000000000056C1C
	// succ:  l0000000000056C1C
l0000000000056B88:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000056BA8:
	r1 = Mem0[sp + 0x0000000000000028:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x0000000000001438:word64]
	Mem0[r1 + 0x0000000000000010:word64] = r2
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	r3 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[r1:word64] = r3
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000056C1C:
	goto l0000000000056BA8
	// succ:  l0000000000056BA8
runtime.pidleput_exit:


// runtime.pidleget
// Return size: 0
void runtime.pidleget()
runtime.pidleget_entry:
	// succ:  l0000000000056C28
l0000000000056C28:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000056C28_ds_t
	// succ:  l0000000000056C28_ds_f l0000000000056C28_ds_t
l0000000000056C28_ds_f:
	goto l0000000000056C38
	// succ:  l0000000000056C38
l0000000000056C28_ds_t:
	goto l0000000000056C4C
	// succ:  l0000000000056C4C
l0000000000056C38:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000056C28
	// succ:  l0000000000056C28
l0000000000056C4C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000001438:word64]
	branch r3 == 0x0000000000000000 l0000000000056C4C_ds_t
	// succ:  l0000000000056C4C_ds_f l0000000000056C4C_ds_t
l0000000000056C4C_ds_f:
	goto l0000000000056C68
	// succ:  l0000000000056C68
l0000000000056C4C_ds_t:
	goto l0000000000056CB4
	// succ:  l0000000000056CB4
l0000000000056C68:
	Mem0[sp + 0x0000000000000020:word64] = r3
	r2 = Mem0[r3 + 0x0000000000000010:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001438:word64] = r2
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000056CB4:
	Mem0[sp + 0x0000000000000030:word64] = r3
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.pidleget_exit
runtime.pidleget_exit:


// runtime.runqempty
// Return size: 0
void runtime.runqempty()
runtime.runqempty_entry:
	// succ:  l0000000000056CC8
l0000000000056CC8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000056CC8_ds_t
	// succ:  l0000000000056CC8_ds_f l0000000000056CC8_ds_t
l0000000000056CC8_ds_f:
	goto l0000000000056CD8
	// succ:  l0000000000056CD8
l0000000000056CC8_ds_t:
	goto l0000000000056CEC
	// succ:  l0000000000056CEC
l0000000000056CD8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000056CC8
	// succ:  l0000000000056CC8
l0000000000056CEC:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000056CEC_ds_t
	// succ:  l0000000000056CEC_ds_f l0000000000056CEC_ds_t
l0000000000056CEC_ds_f:
	goto l0000000000056D0C
	// succ:  l0000000000056D0C
l0000000000056CEC_ds_t:
	goto l0000000000056D10
	// succ:  l0000000000056D10
l0000000000056D0C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000056D10
l0000000000056D10:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
	Mem0[sp + 0x0000000000000020:word32] = (word32) r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000056D10_ds_t
	// succ:  l0000000000056D10_ds_f l0000000000056D10_ds_t
l0000000000056D10_ds_f:
	goto l0000000000056D44
	// succ:  l0000000000056D44
l0000000000056D10_ds_t:
	goto l0000000000056D48
	// succ:  l0000000000056D48
l0000000000056D44:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000056D48
l0000000000056D48:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000056D48_ds_t
	// succ:  l0000000000056D48_ds_f l0000000000056D48_ds_t
l0000000000056D48_ds_f:
	goto l0000000000056D7C
	// succ:  l0000000000056D7C
l0000000000056D48_ds_t:
	goto l0000000000056D80
	// succ:  l0000000000056D80
l0000000000056D7C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000056D80
l0000000000056D80:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Loaduintptr (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000028:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000056D80_ds_t
	// succ:  l0000000000056D80_ds_f l0000000000056D80_ds_t
l0000000000056D80_ds_f:
	goto l0000000000056DB4
	// succ:  l0000000000056DB4
l0000000000056D80_ds_t:
	goto l0000000000056DB8
	// succ:  l0000000000056DB8
l0000000000056DB4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000056DB8
l0000000000056DB8:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load (retsize: 0;)
	r4 = (word64) Mem0[sp + 0x0000000000000018:uint32]
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.runqempty_exit:


// runtime.runqput
// Return size: 0
void runtime.runqput()
runtime.runqput_entry:
	// succ:  l0000000000056E70
l0000000000056E70:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000056E70_ds_t
	// succ:  l0000000000056E70_ds_f l0000000000056E70_ds_t
l0000000000056E70_ds_f:
	goto l0000000000056E80
	// succ:  l0000000000056E80
l0000000000056E70_ds_t:
	goto l0000000000056E94
	// succ:  l0000000000056E94
l0000000000056E80:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000056E70
	// succ:  l0000000000056E70
l0000000000056E94:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000048:byte]
	branch r1 == 0x0000000000000000 l0000000000056E94_ds_t
	// succ:  l0000000000056E94_ds_f l0000000000056E94_ds_t
l0000000000056E94_ds_f:
	goto l0000000000056EAC
	// succ:  l0000000000056EAC
l0000000000056E94_ds_t:
	goto l0000000000056F30
	// succ:  l0000000000056F30
l0000000000056EAC:
	r3 = Mem0[r4 + 0x0000000000000DC8:word64]
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000056EAC_ds_t
	// succ:  l0000000000056EAC_ds_f l0000000000056EAC_ds_t
l0000000000056EAC_ds_f:
	goto l0000000000056EC0
	// succ:  l0000000000056EC0
l0000000000056EAC_ds_t:
	goto l0000000000056EC4
	// succ:  l0000000000056EC4
l0000000000056EC0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000056EC4
l0000000000056EC4:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000028:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.(*guintptr).cas (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l0000000000056EC4_ds_t
	// succ:  l0000000000056EC4_ds_f l0000000000056EC4_ds_t
l0000000000056EC4_ds_f:
	goto l0000000000056F04
	// succ:  l0000000000056F04
l0000000000056EC4_ds_t:
	goto l0000000000056F0C
	// succ:  l0000000000056F0C
l0000000000056F04:
	goto l0000000000056EAC
	// succ:  l0000000000056EAC
l0000000000056F0C:
	r1 = Mem0[sp + 0x0000000000000028:word64]
	branch r1 != 0x0000000000000000 l0000000000056F0C_ds_t
	// succ:  l0000000000056F0C_ds_f l0000000000056F0C_ds_t
l0000000000056F0C_ds_f:
	goto l0000000000056F18
	// succ:  l0000000000056F18
l0000000000056F0C_ds_t:
	goto l0000000000056F28
	// succ:  l0000000000056F28
l0000000000056F18:
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.runqput_exit
l0000000000056F28:
	r2 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000040:word64] = r2
	// succ:  l0000000000056F30
l0000000000056F30:
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000056F30_ds_t
	// succ:  l0000000000056F30_ds_f l0000000000056F30_ds_t
l0000000000056F30_ds_f:
	goto l0000000000056F40
	// succ:  l0000000000056F40
l0000000000056F30_ds_t:
	goto l0000000000056F44
	// succ:  l0000000000056F44
l0000000000056F40:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000056F44
l0000000000056F44:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load (retsize: 0;)
	r7 = Mem0[sp + 0x0000000000000040:word64]
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.runqput_exit:


// runtime.runqputslow
// Return size: 0
void runtime.runqputslow()
runtime.runqputslow_entry:
	// succ:  l00000000000570E8
l00000000000570E8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -1072
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000570E8_ds_t
	// succ:  l00000000000570E8_ds_f l00000000000570E8_ds_t
l00000000000570E8_ds_f:
	goto l00000000000570FC
	// succ:  l00000000000570FC
l00000000000570E8_ds_t:
	goto l0000000000057110
	// succ:  l0000000000057110
l00000000000570FC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000570E8
	// succ:  l00000000000570E8
l0000000000057110:
	sp = sp + -1072
	Mem0[sp:word64] = ra
	r8 = Mem0[sp + 0x0000000000000438:word64]
	r7 = (word64) Mem0[sp + 0x0000000000000448:uint32]
	r1 = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	r1 = r1 + -8
	lo = r2 / r1
	hi = r2 % r1
	// succ:  l0000000000057130
l0000000000057130:
	Mem0[r1 + 0x0000000000000008:word64] = 0x0000000000000000
	r1 = r1 + 8
	branch r1 != r2 l0000000000057130_ds_t
	// succ:  l0000000000057130_ds_f l0000000000057130_ds_t
l0000000000057130_ds_f:
	goto l0000000000057140
	// succ:  l0000000000057140
l0000000000057130_ds_t:
	goto l0000000000057130
	// succ:  l0000000000057130
l0000000000057140:
	r1 = (word64) Mem0[sp + 0x000000000000044C:uint32]
runtime.runqputslow_exit:


// runtime.runqget
// Return size: 0
void runtime.runqget()
runtime.runqget_entry:
	// succ:  l00000000000576A0
l00000000000576A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000576A0_ds_t
	// succ:  l00000000000576A0_ds_f l00000000000576A0_ds_t
l00000000000576A0_ds_f:
	goto l00000000000576B0
	// succ:  l00000000000576B0
l00000000000576A0_ds_t:
	goto l00000000000576C4
	// succ:  l00000000000576C4
l00000000000576B0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000576A0
	// succ:  l00000000000576A0
l00000000000576C4:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	goto l00000000000576D8
	// succ:  l00000000000576D8
l00000000000576C4_ds_f:
	goto l00000000000576E4
	// succ:  l00000000000576E4
l00000000000576C4_ds_t:
	goto l0000000000057878
	// succ:  l0000000000057878
l00000000000576D8:
	r3 = Mem0[r4 + 0x0000000000000DC8:word64]
	branch r3 != 0x0000000000000000 l00000000000576C4_ds_t
	goto l00000000000576C4_ds_f
	// succ:  l00000000000576C4_ds_f l00000000000576C4_ds_t
l00000000000576E4:
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l00000000000576E4_ds_t
	// succ:  l00000000000576E4_ds_f l00000000000576E4_ds_t
l00000000000576E4_ds_f:
	goto l00000000000576F4
	// succ:  l00000000000576F4
l00000000000576E4_ds_t:
	goto l00000000000576F8
	// succ:  l00000000000576F8
l00000000000576F4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000576F8
l00000000000576F8:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000040:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
l0000000000057878:
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000057878_ds_t
	// succ:  l0000000000057878_ds_f l0000000000057878_ds_t
l0000000000057878_ds_f:
	goto l0000000000057888
	// succ:  l0000000000057888
l0000000000057878_ds_t:
	goto l000000000005788C
	// succ:  l000000000005788C
l0000000000057888:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000005788C
l000000000005788C:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000028:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	call runtime.(*guintptr).cas (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000005788C_ds_t
	// succ:  l000000000005788C_ds_f l000000000005788C_ds_t
l000000000005788C_ds_f:
	goto l00000000000578CC
	// succ:  l00000000000578CC
l000000000005788C_ds_t:
	goto l00000000000578F0
	// succ:  l00000000000578F0
l00000000000578CC:
	r2 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000048:word64] = r2
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000050:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.runqget_exit
l00000000000578F0:
	goto l00000000000576D8
	// succ:  l00000000000576D8
runtime.runqget_exit:


// runtime.runqgrab
// Return size: 0
void runtime.runqgrab()
runtime.runqgrab_entry:
	// succ:  l00000000000578F8
l00000000000578F8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000578F8_ds_t
	// succ:  l00000000000578F8_ds_f l00000000000578F8_ds_t
l00000000000578F8_ds_f:
	goto l0000000000057908
	// succ:  l0000000000057908
l00000000000578F8_ds_t:
	goto l000000000005791C
	// succ:  l000000000005791C
l0000000000057908:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000578F8
	// succ:  l00000000000578F8
l000000000005791C:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r8 = Mem0[sp + 0x0000000000000048:word64]
runtime.runqgrab_exit:


// runtime.runqsteal
// Return size: 0
void runtime.runqsteal()
runtime.runqsteal_entry:
	// succ:  l0000000000057E08
l0000000000057E08:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000057E08_ds_t
	// succ:  l0000000000057E08_ds_f l0000000000057E08_ds_t
l0000000000057E08_ds_f:
	goto l0000000000057E18
	// succ:  l0000000000057E18
l0000000000057E08_ds_t:
	goto l0000000000057E2C
	// succ:  l0000000000057E2C
l0000000000057E18:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000057E08
	// succ:  l0000000000057E08
l0000000000057E2C:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000048:word64]
	r2 = (word64) Mem0[r4 + 0x00000000000005C4:uint32]
runtime.runqsteal_exit:


// runtime.(*randomOrder).reset
// Return size: 0
void runtime.(*randomOrder).reset()
runtime.(*randomOrder).reset_entry:
	// succ:  l00000000000580E8
l00000000000580E8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000580E8_ds_t
	// succ:  l00000000000580E8_ds_f l00000000000580E8_ds_t
l00000000000580E8_ds_f:
	goto l00000000000580F8
	// succ:  l00000000000580F8
l00000000000580E8_ds_t:
	goto l000000000005810C
	// succ:  l000000000005810C
l00000000000580F8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000580E8
	// succ:  l00000000000580E8
l000000000005810C:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000068:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000070:uint32]
	Mem0[r3:word32] = (word32) r2
	r2 = Mem0[r3 + 0x0000000000000018:word64]
	Mem0[r3 + 0x0000000000000010:word64] = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
runtime.(*randomOrder).reset_exit:


// runtime.gcd
// Return size: 0
void runtime.gcd()
runtime.gcd_entry:
	// succ:  l00000000000582F8
l00000000000582F8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000582F8_ds_t
	// succ:  l00000000000582F8_ds_f l00000000000582F8_ds_t
l00000000000582F8_ds_f:
	goto l0000000000058308
	// succ:  l0000000000058308
l00000000000582F8_ds_t:
	goto l000000000005831C
	// succ:  l000000000005831C
l0000000000058308:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000582F8
	// succ:  l00000000000582F8
l000000000005831C:
	sp = sp + -8
	Mem0[sp:word64] = ra
	r5 = (word64) Mem0[sp + 0x0000000000000010:uint32]
	r4 = (word64) Mem0[sp + 0x0000000000000014:uint32]
runtime.gcd_exit:


// runtime.gotraceback
// Return size: 0
void runtime.gotraceback()
runtime.gotraceback_entry:
	// succ:  l00000000000583F8
l00000000000583F8:
	sp = fp
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000025:byte] = (byte) r1
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	r3 = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000C8:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 != 0x0000000000000000 l00000000000583F8_ds_t
	// succ:  l00000000000583F8_ds_f l00000000000583F8_ds_t
l00000000000583F8_ds_f:
	goto l0000000000058440
	// succ:  l0000000000058440
l00000000000583F8_ds_t:
	goto l0000000000058590
	// succ:  l0000000000058590
l0000000000058440:
	Mem0[sp + 0x0000000000000024:byte] = (byte) 0x0000000000000000
	goto l0000000000058444
	// succ:  l0000000000058444
l0000000000058440_ds_f:
	goto l0000000000058460
	// succ:  l0000000000058460
l0000000000058440_ds_t:
	goto l0000000000058480
	// succ:  l0000000000058480
l0000000000058444:
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000002F9:byte]
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l0000000000058440_ds_t
	goto l0000000000058440_ds_f
	// succ:  l0000000000058440_ds_f l0000000000058440_ds_t
l0000000000058460:
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000002F9:byte]
	r1 = r1
	Mem0[sp + 0x0000000000000020:word32] = (word32) r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gotraceback_exit
l0000000000058480:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
l0000000000058590:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000024:byte] = (byte) r1
	goto l0000000000058444
	// succ:  l0000000000058444
runtime.gotraceback_exit:


// runtime.args
// Return size: 0
void runtime.args()
runtime.args_entry:
	// succ:  l00000000000585A0
l00000000000585A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000585A0_ds_t
	// succ:  l00000000000585A0_ds_f l00000000000585A0_ds_t
l00000000000585A0_ds_f:
	goto l00000000000585B0
	// succ:  l00000000000585B0
l00000000000585A0_ds_t:
	goto l00000000000585C4
	// succ:  l00000000000585C4
l00000000000585B0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000585A0
	// succ:  l00000000000585A0
l00000000000585C4:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = (word64) Mem0[sp + 0x0000000000000020:int32]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x000000000000698C:word32] = (word32) r1
	r1 = Mem0[sp + 0x0000000000000028:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l00000000000585C4_ds_t
	// succ:  l00000000000585C4_ds_f l00000000000585C4_ds_t
l00000000000585C4_ds_f:
	goto l00000000000585F8
	// succ:  l00000000000585F8
l00000000000585C4_ds_t:
	goto l000000000005862C
	// succ:  l000000000005862C
l00000000000585F8:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001078:word64] = r1
	// succ:  l0000000000058604
l0000000000058604:
	r1 = (word64) Mem0[sp + 0x0000000000000020:int32]
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.sysargs (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.args_exit
l000000000005862C:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	goto l0000000000058604
	// succ:  l0000000000058604
runtime.args_exit:


// runtime.goargs
// Return size: 0
void runtime.goargs()
runtime.goargs_entry:
	// succ:  l0000000000058650
l0000000000058650:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000058650_ds_t
	// succ:  l0000000000058650_ds_f l0000000000058650_ds_t
l0000000000058650_ds_f:
	goto l0000000000058660
	// succ:  l0000000000058660
l0000000000058650_ds_t:
	goto l0000000000058674
	// succ:  l0000000000058674
l0000000000058660:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000058650
	// succ:  l0000000000058650
l0000000000058674:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x000000000000698C:int32]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x000000000000698C:int32]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.makeslice (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001168:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001170:word64] = r1
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l0000000000058674_ds_t
	// succ:  l0000000000058674_ds_f l0000000000058674_ds_t
l0000000000058674_ds_f:
	goto l00000000000586F0
	// succ:  l00000000000586F0
l0000000000058674_ds_t:
	goto l0000000000058828
	// succ:  l0000000000058828
l00000000000586F0:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001160:word64] = r1
	goto l00000000000586FC
	// succ:  l00000000000586FC
l00000000000586F0_ds_f:
	goto l0000000000058728
	// succ:  l0000000000058728
l00000000000586F0_ds_t:
	goto l0000000000058818
	// succ:  l0000000000058818
l00000000000586FC:
	r1 = 0x0000000000000000
	r3 = r1
	r1 = r3
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x000000000000698C:int32]
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 == 0x0000000000000000 l00000000000586F0_ds_t
	goto l00000000000586F0_ds_f
	// succ:  l00000000000586F0_ds_f l00000000000586F0_ds_t
l0000000000058728:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r4 = Mem0[r23 + 0x0000000000001078:word64]
	r1 = r3
	Mem0[sp + 0x0000000000000038:word32] = (word32) r3
	r2 = r1
	r3 = r2
l0000000000058818:
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.goargs_exit
l0000000000058828:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	goto l00000000000586FC
	// succ:  l00000000000586FC
runtime.goargs_exit:


// runtime.goenvs_unix
// Return size: 0
void runtime.goenvs_unix()
runtime.goenvs_unix_entry:
	// succ:  l0000000000058850
l0000000000058850:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000058850_ds_t
	// succ:  l0000000000058850_ds_f l0000000000058850_ds_t
l0000000000058850_ds_f:
	goto l0000000000058860
	// succ:  l0000000000058860
l0000000000058850_ds_t:
	goto l0000000000058874
	// succ:  l0000000000058874
l0000000000058860:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000058850
	// succ:  l0000000000058850
l0000000000058874:
	sp = sp + -88
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r3 = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x000000000000698C:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 + r2
	r1 = r1
	r2 = r3
	r1 = r1 + r2
	r1 = r1
	r2 = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r5 = Mem0[r23 + 0x0000000000001078:word64]
	r1 = r2
	r2 = r1
	r4 = r2
runtime.goenvs_unix_exit:


// runtime.testAtomic64
// Return size: 0
void runtime.testAtomic64()
runtime.testAtomic64_entry:
	// succ:  l0000000000058AF0
l0000000000058AF0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000058AF0_ds_t
	// succ:  l0000000000058AF0_ds_f l0000000000058AF0_ds_t
l0000000000058AF0_ds_f:
	goto l0000000000058B00
	// succ:  l0000000000058B00
l0000000000058AF0_ds_t:
	goto l0000000000058B14
	// succ:  l0000000000058B14
l0000000000058B00:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000058AF0
	// succ:  l0000000000058AF0
l0000000000058B14:
	sp = sp + -48
	Mem0[sp:word64] = ra
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006838:word64] = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006840:word64] = 0x0000000000000000
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000028:word64] = r1
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.prefetcht0 (retsize: 0;)
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000028:word64] = r1
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.prefetcht1 (retsize: 0;)
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000028:word64] = r1
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.prefetcht2 (retsize: 0;)
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000028:word64] = r1
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.prefetchnta (retsize: 0;)
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006840:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime/internal/atomic.Cas64 (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000058B14_ds_t
	// succ:  l0000000000058B14_ds_f l0000000000058B14_ds_t
l0000000000058B14_ds_f:
	goto l0000000000058BFC
	// succ:  l0000000000058BFC
l0000000000058B14_ds_t:
	goto l0000000000058F90
	// succ:  l0000000000058F90
l0000000000058BFC:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000058C1C:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006840:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000058C1C_ds_t
	// succ:  l0000000000058C1C_ds_f l0000000000058C1C_ds_t
l0000000000058C1C_ds_f:
	goto l0000000000058C34
	// succ:  l0000000000058C34
l0000000000058C1C_ds_t:
	goto l0000000000058C54
	// succ:  l0000000000058C54
l0000000000058C34:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000058C54:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006840:word64] = r1
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006840:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime/internal/atomic.Cas64 (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l0000000000058C54_ds_t
	// succ:  l0000000000058C54_ds_f l0000000000058C54_ds_t
l0000000000058C54_ds_f:
	goto l0000000000058CA8
	// succ:  l0000000000058CA8
l0000000000058C54_ds_t:
	goto l0000000000058F88
	// succ:  l0000000000058F88
l0000000000058CA8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000058CC8:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006840:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 != r2 l0000000000058CC8_ds_t
	// succ:  l0000000000058CC8_ds_f l0000000000058CC8_ds_t
l0000000000058CC8_ds_f:
	goto l0000000000058CE0
	// succ:  l0000000000058CE0
l0000000000058CC8_ds_t:
	goto l0000000000058F60
	// succ:  l0000000000058F60
l0000000000058CE0:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006838:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 != r2 l0000000000058CE0_ds_t
	// succ:  l0000000000058CE0_ds_f l0000000000058CE0_ds_t
l0000000000058CE0_ds_f:
	goto l0000000000058CF8
	// succ:  l0000000000058CF8
l0000000000058CE0_ds_t:
	goto l0000000000058F60
	// succ:  l0000000000058F60
l0000000000058CF8:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load64 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l0000000000058CF8_ds_t
	// succ:  l0000000000058CF8_ds_f l0000000000058CF8_ds_t
l0000000000058CF8_ds_f:
	goto l0000000000058D20
	// succ:  l0000000000058D20
l0000000000058CF8_ds_t:
	goto l0000000000058F58
	// succ:  l0000000000058F58
l0000000000058D20:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000058D40:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011B0:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime/internal/atomic.Store64 (retsize: 0;)
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load64 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000011B0:word64]
	branch r1 == r2 l0000000000058D40_ds_t
	// succ:  l0000000000058D40_ds_f l0000000000058D40_ds_t
l0000000000058D40_ds_f:
	goto l0000000000058D98
	// succ:  l0000000000058D98
l0000000000058D40_ds_t:
	goto l0000000000058F50
	// succ:  l0000000000058F50
l0000000000058D98:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000058DB8:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011B0:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime/internal/atomic.Xadd64 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000011B8:word64]
	branch r1 == r2 l0000000000058DB8_ds_t
	// succ:  l0000000000058DB8_ds_f l0000000000058DB8_ds_t
l0000000000058DB8_ds_f:
	goto l0000000000058DF8
	// succ:  l0000000000058DF8
l0000000000058DB8_ds_t:
	goto l0000000000058F48
	// succ:  l0000000000058F48
l0000000000058DF8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000058E18:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load64 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000011B8:word64]
	branch r1 == r2 l0000000000058E18_ds_t
	// succ:  l0000000000058E18_ds_f l0000000000058E18_ds_t
l0000000000058E18_ds_f:
	goto l0000000000058E48
	// succ:  l0000000000058E48
l0000000000058E18_ds_t:
	goto l0000000000058F40
	// succ:  l0000000000058F40
l0000000000058E48:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000058E68:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011C0:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime/internal/atomic.Xchg64 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000011B8:word64]
	branch r1 == r2 l0000000000058E68_ds_t
	// succ:  l0000000000058E68_ds_f l0000000000058E68_ds_t
l0000000000058E68_ds_f:
	goto l0000000000058EA8
	// succ:  l0000000000058EA8
l0000000000058E68_ds_t:
	goto l0000000000058F38
	// succ:  l0000000000058F38
l0000000000058EA8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000058EC8:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load64 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000011C0:word64]
	branch r1 == r2 l0000000000058EC8_ds_t
	// succ:  l0000000000058EC8_ds_f l0000000000058EC8_ds_t
l0000000000058EC8_ds_f:
	goto l0000000000058EF8
	// succ:  l0000000000058EF8
l0000000000058EC8_ds_t:
	goto l0000000000058F28
	// succ:  l0000000000058F28
l0000000000058EF8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000058F28:
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.testAtomic64_exit
l0000000000058F38:
	goto l0000000000058EC8
	// succ:  l0000000000058EC8
l0000000000058F40:
	goto l0000000000058E68
	// succ:  l0000000000058E68
l0000000000058F48:
	goto l0000000000058E18
	// succ:  l0000000000058E18
l0000000000058F50:
	goto l0000000000058DB8
	// succ:  l0000000000058DB8
l0000000000058F58:
	goto l0000000000058D40
	// succ:  l0000000000058D40
l0000000000058F60:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000058F88:
	goto l0000000000058CC8
	// succ:  l0000000000058CC8
l0000000000058F90:
	goto l0000000000058C1C
	// succ:  l0000000000058C1C
runtime.testAtomic64_exit:


// runtime.check
// Return size: 0
void runtime.check()
runtime.check_entry:
	// succ:  l0000000000058F98
l0000000000058F98:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000058F98_ds_t
	// succ:  l0000000000058F98_ds_f l0000000000058F98_ds_t
l0000000000058F98_ds_f:
	goto l0000000000058FA8
	// succ:  l0000000000058FA8
l0000000000058F98_ds_t:
	goto l0000000000058FBC
	// succ:  l0000000000058FBC
l0000000000058FA8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000058F98
	// succ:  l0000000000058F98
l0000000000058FBC:
	sp = sp + -128
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000 << 0x18
	r1 = r1 >> 0x18
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000 << 0x10
	r1 = r1 >> 0x10
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000058:word32] = (word32) r1
runtime.check_exit:


// runtime.parsedebugvars
// Return size: 0
void runtime.parsedebugvars()
runtime.parsedebugvars_entry:
	// succ:  l0000000000059848
l0000000000059848:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -224
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000059848_ds_t
	// succ:  l0000000000059848_ds_f l0000000000059848_ds_t
l0000000000059848_ds_f:
	goto l000000000005985C
	// succ:  l000000000005985C
l0000000000059848_ds_t:
	goto l0000000000059870
	// succ:  l0000000000059870
l000000000005985C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000059848
	// succ:  l0000000000059848
l0000000000059870:
	sp = sp + -224
	Mem0[sp:word64] = ra
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x00000000000067BC:word32] = (word32) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006798:word32] = (word32) r1
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.parsedebugvars_exit:


// runtime/debug.SetTraceback
// Return size: 0
void runtime/debug.SetTraceback()
runtime/debug.SetTraceback_entry:
	// succ:  l0000000000059D58
l0000000000059D58:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000059D58_ds_t
	// succ:  l0000000000059D58_ds_f l0000000000059D58_ds_t
l0000000000059D58_ds_f:
	goto l0000000000059D68
	// succ:  l0000000000059D68
l0000000000059D58_ds_t:
	goto l0000000000059D7C
	// succ:  l0000000000059D7C
l0000000000059D68:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000059D58
	// succ:  l0000000000059D58
l0000000000059D7C:
	sp = sp + -64
	Mem0[sp:word64] = ra
runtime/debug.SetTraceback_exit:


// runtime.timediv
// Return size: 0
void runtime.timediv()
runtime.timediv_entry:
	// succ:  l000000000005A120
l000000000005A120:
	sp = fp
	r7 = Mem0[sp + 0x0000000000000018:word64]
	r6 = (word64) Mem0[sp + 0x0000000000000010:int32]
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	r5 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r3 < 0x0000000000000000)
	branch r23 != 0x0000000000000000 l000000000005A120_ds_t
	// succ:  l000000000005A120_ds_f l000000000005A120_ds_t
l000000000005A120_ds_f:
	goto l000000000005A148
	// succ:  l000000000005A148
l000000000005A120_ds_t:
	goto l000000000005A1E8
	// succ:  l000000000005A1E8
l000000000005A148:
	r1 = r6
	r2 = r3
	r23 = (word64) (r3 <u 64)
	branch r23 != 0x0000000000000000 l000000000005A148_ds_t
	// succ:  l000000000005A148_ds_f l000000000005A148_ds_t
l000000000005A148_ds_f:
	goto l000000000005A15C
	// succ:  l000000000005A15C
l000000000005A148_ds_t:
	goto l000000000005A160
	// succ:  l000000000005A160
l000000000005A15C:
	r1 = 0x0000000000000000
	// succ:  l000000000005A160
l000000000005A160:
l000000000005A1E8:
	r1 = r6
	r23 = (word64) (r4 < r1)
	branch r23 != 0x0000000000000000 l000000000005A1E8_ds_t
	// succ:  l000000000005A1E8_ds_f l000000000005A1E8_ds_t
l000000000005A1E8_ds_f:
	goto l000000000005A1F8
	// succ:  l000000000005A1F8
l000000000005A1E8_ds_t:
	goto l000000000005A220
	// succ:  l000000000005A220
l000000000005A1F8:
	branch r7 == 0x0000000000000000 l000000000005A1F8_ds_t
	// succ:  l000000000005A1F8_ds_f l000000000005A1F8_ds_t
l000000000005A1F8_ds_f:
	goto l000000000005A200
	// succ:  l000000000005A200
l000000000005A1F8_ds_t:
	goto l000000000005A208
	// succ:  l000000000005A208
l000000000005A200:
	r2 = 0x0000000000000000
	Mem0[r7:word32] = (word32) r2
	// succ:  l000000000005A208
l000000000005A208:
	r1 = 0x000000007FFF0000
	r1 = r1 | 0x000000000000FFFF
	r1 = r1
	Mem0[sp + 0x0000000000000020:word32] = (word32) r1
	return
	// succ:  runtime.timediv_exit
l000000000005A220:
	branch r7 == 0x0000000000000000 l000000000005A220_ds_t
	// succ:  l000000000005A220_ds_f l000000000005A220_ds_t
l000000000005A220_ds_f:
	goto l000000000005A228
	// succ:  l000000000005A228
l000000000005A220_ds_t:
	goto l000000000005A230
	// succ:  l000000000005A230
l000000000005A228:
	r2 = r4
	Mem0[r7:word32] = (word32) r2
	// succ:  l000000000005A230
l000000000005A230:
	r1 = r5
	Mem0[sp + 0x0000000000000020:word32] = (word32) r1
	return
	// succ:  runtime.timediv_exit
runtime.timediv_exit:


// runtime.(*guintptr).cas
// Return size: 0
void runtime.(*guintptr).cas()
runtime.(*guintptr).cas_entry:
	// succ:  l000000000005A240
l000000000005A240:
	sp = fp
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime/internal/atomic.Casuintptr (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000048:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*guintptr).cas_exit
runtime.(*guintptr).cas_exit:


// runtime.extendRandom
// Return size: 0
void runtime.extendRandom()
runtime.extendRandom_entry:
	// succ:  l000000000005A290
l000000000005A290:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005A290_ds_t
	// succ:  l000000000005A290_ds_f l000000000005A290_ds_t
l000000000005A290_ds_f:
	goto l000000000005A2A0
	// succ:  l000000000005A2A0
l000000000005A290_ds_t:
	goto l000000000005A2B4
	// succ:  l000000000005A2B4
l000000000005A2A0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005A290
	// succ:  l000000000005A290
l000000000005A2B4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r7 = Mem0[sp + 0x0000000000000040:word64]
	r4 = Mem0[sp + 0x0000000000000050:word64]
	r23 = (word64) (r4 < 0x0000000000000000)
	branch r23 == 0x0000000000000000 l000000000005A2B4_ds_t
	// succ:  l000000000005A2B4_ds_f l000000000005A2B4_ds_t
l000000000005A2B4_ds_f:
	goto l000000000005A2D0
	// succ:  l000000000005A2D0
l000000000005A2B4_ds_t:
	goto l000000000005A2D4
	// succ:  l000000000005A2D4
l000000000005A2D0:
	r4 = 0x0000000000000000
	// succ:  l000000000005A2D4
l000000000005A2D4:
	r3 = r7
	r23 = (word64) (r4 < r7)
	branch r23 == 0x0000000000000000 l000000000005A2D4_ds_t
	// succ:  l000000000005A2D4_ds_f l000000000005A2D4_ds_t
l000000000005A2D4_ds_f:
	goto l000000000005A2E4
	// succ:  l000000000005A2E4
l000000000005A2D4_ds_t:
	goto l000000000005A3FC
	// succ:  l000000000005A3FC
l000000000005A2E4:
	Mem0[sp + 0x0000000000000050:word64] = r4
	Mem0[sp + 0x0000000000000028:word64] = r4
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r4
	r23 = (word64) (r2 < r4)
	branch r23 == 0x0000000000000000 l000000000005A2E4_ds_t
	// succ:  l000000000005A2E4_ds_f l000000000005A2E4_ds_t
l000000000005A2E4_ds_f:
	goto l000000000005A300
	// succ:  l000000000005A300
l000000000005A2E4_ds_t:
	goto l000000000005A308
	// succ:  l000000000005A308
l000000000005A300:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = r1
	// succ:  l000000000005A308
l000000000005A308:
	call runtime.nanotime (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000028:word64]
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r1 = Mem0[sp + 0x0000000000000050:word64]
l000000000005A3FC:
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.extendRandom_exit
runtime.extendRandom_exit:


// runtime.readyWithTime
// Return size: 0
void runtime.readyWithTime()
runtime.readyWithTime_entry:
	// succ:  l000000000005A410
l000000000005A410:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005A410_ds_t
	// succ:  l000000000005A410_ds_f l000000000005A410_ds_t
l000000000005A410_ds_f:
	goto l000000000005A420
	// succ:  l000000000005A420
l000000000005A410_ds_t:
	goto l000000000005A434
	// succ:  l000000000005A434
l000000000005A420:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005A410
	// succ:  l000000000005A410
l000000000005A434:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[r4 + 0x0000000000000028:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000005A434_ds_t
	// succ:  l000000000005A434_ds_f l000000000005A434_ds_t
l000000000005A434_ds_f:
	goto l000000000005A450
	// succ:  l000000000005A450
l000000000005A434_ds_t:
	goto l000000000005A464
	// succ:  l000000000005A464
l000000000005A450:
	call runtime.cputicks (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r3 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[r4 + 0x0000000000000028:word64] = r3
	// succ:  l000000000005A464
l000000000005A464:
	r2 = Mem0[r4:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.goready (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.readyWithTime_exit
runtime.readyWithTime_exit:


// runtime.semacquire
// Return size: 0
void runtime.semacquire()
runtime.semacquire_entry:
	// succ:  l000000000005A490
l000000000005A490:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005A490_ds_t
	// succ:  l000000000005A490_ds_f l000000000005A490_ds_t
l000000000005A490_ds_f:
	goto l000000000005A4A0
	// succ:  l000000000005A4A0
l000000000005A490_ds_t:
	goto l000000000005A4B4
	// succ:  l000000000005A4B4
l000000000005A4A0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005A490
	// succ:  l000000000005A490
l000000000005A4B4:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r3 = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A0:word64]
	r2 = r30
	branch r1 == r30 l000000000005A4B4_ds_t
	// succ:  l000000000005A4B4_ds_f l000000000005A4B4_ds_t
l000000000005A4B4_ds_f:
	goto l000000000005A4D4
	// succ:  l000000000005A4D4
l000000000005A4B4_ds_t:
	goto l000000000005A4F4
	// succ:  l000000000005A4F4
l000000000005A4D4:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000005A4F4:
	r1 = Mem0[sp + 0x0000000000000068:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.cansemacquire (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000005A4F4_ds_t
	// succ:  l000000000005A4F4_ds_f l000000000005A4F4_ds_t
l000000000005A4F4_ds_f:
	goto l000000000005A518
	// succ:  l000000000005A518
l000000000005A4F4_ds_t:
	goto l000000000005A528
	// succ:  l000000000005A528
l000000000005A518:
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.semacquire_exit
l000000000005A528:
	call runtime.acquireSudog (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r2 = Mem0[sp + 0x0000000000000068:word64]
runtime.semacquire_exit:


// runtime.semrelease
// Return size: 0
void runtime.semrelease()
runtime.semrelease_entry:
	// succ:  l000000000005A9A0
l000000000005A9A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005A9A0_ds_t
	// succ:  l000000000005A9A0_ds_f l000000000005A9A0_ds_t
l000000000005A9A0_ds_f:
	goto l000000000005A9B0
	// succ:  l000000000005A9B0
l000000000005A9A0_ds_t:
	goto l000000000005A9C4
	// succ:  l000000000005A9C4
l000000000005A9B0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005A9A0
	// succ:  l000000000005A9A0
l000000000005A9C4:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000048:word64]
runtime.semrelease_exit:


// runtime.cansemacquire
// Return size: 0
void runtime.cansemacquire()
runtime.cansemacquire_entry:
	// succ:  l000000000005ADB0
l000000000005ADB0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005ADB0_ds_t
	// succ:  l000000000005ADB0_ds_f l000000000005ADB0_ds_t
l000000000005ADB0_ds_f:
	goto l000000000005ADC0
	// succ:  l000000000005ADC0
l000000000005ADB0_ds_t:
	goto l000000000005ADD4
	// succ:  l000000000005ADD4
l000000000005ADC0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005ADB0
	// succ:  l000000000005ADB0
l000000000005ADD4:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.cansemacquire_exit:


// runtime.init.4
// Return size: 0
void runtime.init.4()
runtime.init.4_entry:
	// succ:  l000000000005AEB8
l000000000005AEB8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005AEB8_ds_t
	// succ:  l000000000005AEB8_ds_f l000000000005AEB8_ds_t
l000000000005AEB8_ds_f:
	goto l000000000005AEC8
	// succ:  l000000000005AEC8
l000000000005AEB8_ds_t:
	goto l000000000005AEDC
	// succ:  l000000000005AEDC
l000000000005AEC8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005AEB8
	// succ:  l000000000005AEB8
l000000000005AEDC:
	sp = sp + -24
	sp = sp + 24
	return
	// succ:  runtime.init.4_exit
runtime.init.4_exit:


// runtime.initsig
// Return size: 0
void runtime.initsig()
runtime.initsig_entry:
	// succ:  l000000000005AEF0
l000000000005AEF0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	r2 = (word64) Mem0[sp + 0x0000000000000058:byte]
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l000000000005AEF0_ds_t
	// succ:  l000000000005AEF0_ds_f l000000000005AEF0_ds_t
l000000000005AEF0_ds_f:
	goto l000000000005AF10
	// succ:  l000000000005AF10
l000000000005AEF0_ds_t:
	goto l000000000005AF24
	// succ:  l000000000005AF24
l000000000005AF10:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006993:byte] = (byte) r1
	// succ:  l000000000005AF24
l000000000005AF24:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006996:byte]
	branch r1 != 0x0000000000000000 l000000000005AF24_ds_t
	// succ:  l000000000005AF24_ds_f l000000000005AF24_ds_t
l000000000005AF24_ds_f:
	goto l000000000005AF38
	// succ:  l000000000005AF38
l000000000005AF24_ds_t:
	goto l000000000005B340
	// succ:  l000000000005B340
l000000000005AF38:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006994:byte]
	branch r1 != 0x0000000000000000 l000000000005AF38_ds_t
	// succ:  l000000000005AF38_ds_f l000000000005AF38_ds_t
l000000000005AF38_ds_f:
	goto l000000000005AF4C
	// succ:  l000000000005AF4C
l000000000005AF38_ds_t:
	goto l000000000005B340
	// succ:  l000000000005B340
l000000000005AF4C:
	r1 = 0x0000000000000000
	r4 = r1
	r1 = r4
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 == 0x0000000000000000 l000000000005AF4C_ds_t
	// succ:  l000000000005AF4C_ds_f l000000000005AF4C_ds_t
l000000000005AF4C_ds_f:
	goto l000000000005AF74
	// succ:  l000000000005AF74
l000000000005AF4C_ds_t:
	goto l000000000005B330
	// succ:  l000000000005B330
l000000000005AF74:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	r2 = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r2 <u r3)
	branch r23 != 0x0000000000000000 l000000000005AF74_ds_t
	// succ:  l000000000005AF74_ds_f l000000000005AF74_ds_t
l000000000005AF74_ds_f:
	goto l000000000005AF94
	// succ:  l000000000005AF94
l000000000005AF74_ds_t:
	goto l000000000005AFA0
	// succ:  l000000000005AFA0
l000000000005AF94:
	call runtime.panicindex (retsize: 0;)
l000000000005AFA0:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
l000000000005B330:
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.initsig_exit
l000000000005B340:
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l000000000005B340_ds_t
	// succ:  l000000000005B340_ds_f l000000000005B340_ds_t
l000000000005B340_ds_f:
	goto l000000000005B34C
	// succ:  l000000000005B34C
l000000000005B340_ds_t:
	goto l000000000005AF4C
	// succ:  l000000000005AF4C
l000000000005B34C:
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.initsig_exit
runtime.initsig_exit:


// runtime.resetcpuprofiler
// Return size: 0
void runtime.resetcpuprofiler()
runtime.resetcpuprofiler_entry:
	// succ:  l000000000005B360
l000000000005B360:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005B360_ds_t
	// succ:  l000000000005B360_ds_f l000000000005B360_ds_t
l000000000005B360_ds_f:
	goto l000000000005B370
	// succ:  l000000000005B370
l000000000005B360_ds_t:
	goto l000000000005B384
	// succ:  l000000000005B384
l000000000005B370:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005B360
	// succ:  l000000000005B360
l000000000005B384:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r5 = (word64) Mem0[sp + 0x0000000000000048:int32]
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	r1 = r5
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000005B384_ds_t
	// succ:  l000000000005B384_ds_f l000000000005B384_ds_t
l000000000005B384_ds_f:
	goto l000000000005B3B8
	// succ:  l000000000005B3B8
l000000000005B384_ds_t:
	goto l000000000005B3F8
	// succ:  l000000000005B3F8
l000000000005B3B8:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	call runtime.setitimer (retsize: 0;)
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000048:int32]
	Mem0[r2 + 0x00000000000000EC:word32] = (word32) r1
	r4 = Mem0[sp:word64]
	sp = sp + 64
	call r4 (retsize: 0;)
	return
	// succ:  runtime.resetcpuprofiler_exit
l000000000005B3F8:
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	lo = r4 / sp
	hi = r4 % sp
	r1 = 0x00000000000F0000
	r1 = r1 | 0x0000000000004240
	r1 = r1
	r2 = r1
	r3 = r5
	r2 = r2
	r3 = r3
	branch r3 != 0x0000000000000000 l000000000005B3F8_ds_t
	// succ:  l000000000005B3F8_ds_f l000000000005B3F8_ds_t
l000000000005B3F8_ds_f:
	goto l000000000005B424
	// succ:  l000000000005B424
l000000000005B3F8_ds_t:
	goto l000000000005B430
	// succ:  l000000000005B430
l000000000005B424:
	call runtime.panicdivide (retsize: 0;)
l000000000005B430:
	lo = r2 / r3
	hi = r2 % r3
	r2 = lo
	r3 = r2
	r1 = r3
	r3 = r1
	r2 = r3
	Mem0[r4 + 0x0000000000000008:word64] = r2
	lo = r2 / sp
	hi = r2 % sp
	lo = r1 / sp
	hi = r1 % sp
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / r1
	hi = r3 % r1
	r2 = r2 + -8
	r1 = r3 + -8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	call runtime.setitimer (retsize: 0;)
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000048:int32]
	Mem0[r2 + 0x00000000000000EC:word32] = (word32) r1
	r4 = Mem0[sp:word64]
	sp = sp + 64
	call r4 (retsize: 0;)
	return
	// succ:  runtime.resetcpuprofiler_exit
runtime.resetcpuprofiler_exit:


// runtime.dieFromSignal
// Return size: 0
void runtime.dieFromSignal()
runtime.dieFromSignal_entry:
	// succ:  l000000000005B4C8
l000000000005B4C8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = (word64) Mem0[sp + 0x0000000000000028:int32]
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	call runtime.setsig (retsize: 0;)
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001728:uint32]
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x000000000000172C:uint32]
	Mem0[sp + 0x000000000000000C:word32] = (word32) r1
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x0000000000001730:uint32]
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
	call runtime.updatesigmask (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:int32]
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.raise (retsize: 0;)
	call runtime.osyield (retsize: 0;)
	call runtime.osyield (retsize: 0;)
	call runtime.osyield (retsize: 0;)
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.exit (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.dieFromSignal_exit
runtime.dieFromSignal_exit:


// runtime.raisebadsignal
// Return size: 0
void runtime.raisebadsignal()
runtime.raisebadsignal_entry:
	// succ:  l000000000005B570
l000000000005B570:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005B570_ds_t
	// succ:  l000000000005B570_ds_f l000000000005B570_ds_t
l000000000005B570_ds_f:
	goto l000000000005B580
	// succ:  l000000000005B580
l000000000005B570_ds_t:
	goto l000000000005B594
	// succ:  l000000000005B594
l000000000005B580:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005B570
	// succ:  l000000000005B570
l000000000005B594:
	sp = sp + -72
	Mem0[sp:word64] = ra
	r4 = (word64) Mem0[sp + 0x0000000000000050:int32]
	r1 = r4
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000005B594_ds_t
	// succ:  l000000000005B594_ds_f l000000000005B594_ds_t
l000000000005B594_ds_f:
	goto l000000000005B5BC
	// succ:  l000000000005B5BC
l000000000005B594_ds_t:
	goto l000000000005B5CC
	// succ:  l000000000005B5CC
l000000000005B5BC:
	r4 = Mem0[sp:word64]
	sp = sp + 72
	call r4 (retsize: 0;)
	return
	// succ:  runtime.raisebadsignal_exit
l000000000005B5CC:
	r1 = r4
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 != 0x0000000000000000 l000000000005B5CC_ds_t
	// succ:  l000000000005B5CC_ds_f l000000000005B5CC_ds_t
l000000000005B5CC_ds_f:
	goto l000000000005B5EC
	// succ:  l000000000005B5EC
l000000000005B5CC_ds_t:
	goto l000000000005B73C
	// succ:  l000000000005B73C
l000000000005B5EC:
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	r1 = r4
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.unblocksig (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000050:int32]
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	call runtime.setsig (retsize: 0;)
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006996:byte]
	branch r1 != 0x0000000000000000 l000000000005B5EC_ds_t
	// succ:  l000000000005B5EC_ds_f l000000000005B5EC_ds_t
l000000000005B5EC_ds_f:
	goto l000000000005B634
	// succ:  l000000000005B634
l000000000005B5EC_ds_t:
	goto l000000000005B6C8
	// succ:  l000000000005B6C8
l000000000005B634:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006994:byte]
	branch r1 != 0x0000000000000000 l000000000005B634_ds_t
	// succ:  l000000000005B634_ds_f l000000000005B634_ds_t
l000000000005B634_ds_f:
	goto l000000000005B648
	// succ:  l000000000005B648
l000000000005B634_ds_t:
	goto l000000000005B6C8
	// succ:  l000000000005B6C8
l000000000005B648:
	r1 = (word64) Mem0[sp + 0x0000000000000050:int32]
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.raise (retsize: 0;)
	r3 = 0x00000000000A0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	r2 = 0x0000000000090000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000038:word64] = r2
	Mem0[sp + 0x0000000000000028:word64] = r2
	Mem0[sp + 0x0000000000000040:word64] = r3
	Mem0[sp + 0x0000000000000030:word64] = r3
	lo = r1 / sp
	hi = r1 % sp
l000000000005B6C8:
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000005B6C8_ds_t
	// succ:  l000000000005B6C8_ds_f l000000000005B6C8_ds_t
l000000000005B6C8_ds_f:
	goto l000000000005B6D8
	// succ:  l000000000005B6D8
l000000000005B6C8_ds_t:
	goto l000000000005B648
	// succ:  l000000000005B648
l000000000005B6D8:
	r2 = Mem0[sp + 0x0000000000000058:word64]
l000000000005B73C:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	r2 = r4
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r2 <u r3)
	branch r23 != 0x0000000000000000 l000000000005B73C_ds_t
	// succ:  l000000000005B73C_ds_f l000000000005B73C_ds_t
l000000000005B73C_ds_f:
	goto l000000000005B75C
	// succ:  l000000000005B75C
l000000000005B73C_ds_t:
	goto l000000000005B768
	// succ:  l000000000005B768
l000000000005B75C:
	call runtime.panicindex (retsize: 0;)
l000000000005B768:
runtime.raisebadsignal_exit:


// runtime.crash
// Return size: 0
void runtime.crash()
runtime.crash_entry:
	// succ:  l000000000005B780
l000000000005B780:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005B780_ds_t
	// succ:  l000000000005B780_ds_f l000000000005B780_ds_t
l000000000005B780_ds_f:
	goto l000000000005B790
	// succ:  l000000000005B790
l000000000005B780_ds_t:
	goto l000000000005B7A4
	// succ:  l000000000005B7A4
l000000000005B790:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005B780
	// succ:  l000000000005B780
l000000000005B7A4:
	sp = sp + -16
	Mem0[sp:word64] = ra
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.dieFromSignal (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.crash_exit
runtime.crash_exit:


// runtime.noSignalStack
// Return size: 0
void runtime.noSignalStack()
runtime.noSignalStack_entry:
	// succ:  l000000000005B7D0
l000000000005B7D0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005B7D0_ds_t
	// succ:  l000000000005B7D0_ds_f l000000000005B7D0_ds_t
l000000000005B7D0_ds_f:
	goto l000000000005B7E0
	// succ:  l000000000005B7E0
l000000000005B7D0_ds_t:
	goto l000000000005B7F4
	// succ:  l000000000005B7F4
l000000000005B7E0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005B7D0
	// succ:  l000000000005B7D0
l000000000005B7F4:
	sp = sp + -24
	Mem0[sp:word64] = ra
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.noSignalStack_exit:


// runtime.sigNotOnStack
// Return size: 0
void runtime.sigNotOnStack()
runtime.sigNotOnStack_entry:
	// succ:  l000000000005B8A8
l000000000005B8A8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005B8A8_ds_t
	// succ:  l000000000005B8A8_ds_f l000000000005B8A8_ds_t
l000000000005B8A8_ds_f:
	goto l000000000005B8B8
	// succ:  l000000000005B8B8
l000000000005B8A8_ds_t:
	goto l000000000005B8CC
	// succ:  l000000000005B8CC
l000000000005B8B8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005B8A8
	// succ:  l000000000005B8A8
l000000000005B8CC:
	sp = sp + -24
	Mem0[sp:word64] = ra
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.sigNotOnStack_exit:


// runtime.badsignal
// Return size: 0
void runtime.badsignal()
runtime.badsignal_entry:
	// succ:  l000000000005B980
l000000000005B980:
	sp = fp
	sp = sp + -72
	Mem0[sp:word64] = ra
	r3 = 0x00000000000A0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	r2 = 0x0000000000090000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000038:word64] = r2
	Mem0[sp + 0x0000000000000028:word64] = r2
	Mem0[sp + 0x0000000000000040:word64] = r3
	Mem0[sp + 0x0000000000000030:word64] = r3
	lo = r1 / sp
	hi = r1 % sp
runtime.badsignal_exit:


// runtime.badsignalgo
// Return size: 0
void runtime.badsignalgo()
runtime.badsignalgo_entry:
	// succ:  l000000000005BA00
l000000000005BA00:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005BA00_ds_t
	// succ:  l000000000005BA00_ds_f l000000000005BA00_ds_t
l000000000005BA00_ds_f:
	goto l000000000005BA10
	// succ:  l000000000005BA10
l000000000005BA00_ds_t:
	goto l000000000005BA24
	// succ:  l000000000005BA24
l000000000005BA10:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005BA00
	// succ:  l000000000005BA00
l000000000005BA24:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000020:word64]
runtime.badsignalgo_exit:


// runtime.sigfwdgo
// Return size: 0
void runtime.sigfwdgo()
runtime.sigfwdgo_entry:
	// succ:  l000000000005BA98
l000000000005BA98:
	sp = fp
	sp = sp + -56
	Mem0[sp:word64] = ra
	r8 = Mem0[sp + 0x0000000000000048:word64]
	r7 = Mem0[sp + 0x0000000000000050:word64]
	r5 = (word64) Mem0[sp + 0x0000000000000040:uint32]
	r1 = 0x0000000000000000
runtime.sigfwdgo_exit:


// runtime.dumpregs
// Return size: 0
void runtime.dumpregs()
runtime.dumpregs_entry:
	// succ:  l000000000005BDD8
l000000000005BDD8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -184
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000005BDD8_ds_t
	// succ:  l000000000005BDD8_ds_f l000000000005BDD8_ds_t
l000000000005BDD8_ds_f:
	goto l000000000005BDEC
	// succ:  l000000000005BDEC
l000000000005BDD8_ds_t:
	goto l000000000005BE00
	// succ:  l000000000005BE00
l000000000005BDEC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005BDD8
	// succ:  l000000000005BDD8
l000000000005BE00:
	sp = sp + -184
	Mem0[sp:word64] = ra
	r2 = Mem0[sp + 0x00000000000000C0:word64]
	r1 = Mem0[r2 + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000005BE00_ds_t
	// succ:  l000000000005BE00_ds_f l000000000005BE00_ds_t
l000000000005BE00_ds_f:
	goto l000000000005BE18
	// succ:  l000000000005BE18
l000000000005BE00_ds_t:
	goto l000000000005BE1C
	// succ:  l000000000005BE1C
l000000000005BE18:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000005BE1C
l000000000005BE1C:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	r3 = Mem0[r1:word64]
	r1 = r3
	r2 = r3
	Mem0[sp + 0x0000000000000040:word64] = r3
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.dumpregs_exit:


// runtime.sighandler
// Return size: 0
void runtime.sighandler()
runtime.sighandler_entry:
	// succ:  l000000000005D260
l000000000005D260:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -152
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000005D260_ds_t
	// succ:  l000000000005D260_ds_f l000000000005D260_ds_t
l000000000005D260_ds_f:
	goto l000000000005D274
	// succ:  l000000000005D274
l000000000005D260_ds_t:
	goto l000000000005D288
	// succ:  l000000000005D288
l000000000005D274:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005D260
	// succ:  l000000000005D260
l000000000005D288:
	sp = sp + -152
	Mem0[sp:word64] = ra
	r7 = Mem0[sp + 0x00000000000000B8:word64]
	r5 = (word64) Mem0[sp + 0x00000000000000A0:uint32]
	r9 = r30
	Mem0[sp + 0x0000000000000060:word64] = r30
	Mem0[sp + 0x0000000000000088:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000090:word64] = 0x0000000000000000
	lo = r4 / sp
	hi = r4 % sp
	r2 = Mem0[sp + 0x00000000000000A8:word64]
	Mem0[r4:word64] = r2
	r2 = Mem0[sp + 0x00000000000000B0:word64]
	Mem0[r4 + 0x0000000000000008:word64] = r2
	r3 = r4
runtime.sighandler_exit:


// runtime.sigtrampgo
// Return size: 0
void runtime.sigtrampgo()
runtime.sigtrampgo_entry:
	// succ:  l000000000005DF88
l000000000005DF88:
	sp = fp
	sp = sp + -152
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000080:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000088:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000090:word64] = 0x0000000000000000
	r1 = sp + 56
	r2 = r1 + 32
	// succ:  l000000000005DFA4
l000000000005DFA4:
	Mem0[r1 + 0x0000000000000008:word64] = 0x0000000000000000
	r1 = r1 + 8
	branch r1 != r2 l000000000005DFA4_ds_t
	// succ:  l000000000005DFA4_ds_f l000000000005DFA4_ds_t
l000000000005DFA4_ds_f:
	goto l000000000005DFB4
	// succ:  l000000000005DFB4
l000000000005DFA4_ds_t:
	goto l000000000005DFA4
	// succ:  l000000000005DFA4
l000000000005DFB4:
	r1 = (word64) Mem0[sp + 0x00000000000000A0:uint32]
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	r1 = Mem0[sp + 0x00000000000000A8:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x00000000000000B0:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.sigfwdgo (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000005DFB4_ds_t
	// succ:  l000000000005DFB4_ds_f l000000000005DFB4_ds_t
l000000000005DFB4_ds_f:
	goto l000000000005DFE8
	// succ:  l000000000005DFE8
l000000000005DFB4_ds_t:
	goto l000000000005DFF8
	// succ:  l000000000005DFF8
l000000000005DFE8:
	r4 = Mem0[sp:word64]
	sp = sp + 152
	call r4 (retsize: 0;)
	return
	// succ:  runtime.sigtrampgo_exit
l000000000005DFF8:
	r4 = r30
	branch r30 != 0x0000000000000000 l000000000005DFF8_ds_t
	// succ:  l000000000005DFF8_ds_f l000000000005DFF8_ds_t
l000000000005DFF8_ds_f:
	goto l000000000005E004
	// succ:  l000000000005E004
l000000000005DFF8_ds_t:
	goto l000000000005E080
	// succ:  l000000000005E080
l000000000005E004:
	r1 = (word64) Mem0[sp + 0x00000000000000A0:uint32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l000000000005E080:
	lo = r5 / sp
	hi = r5 % sp
	Mem0[sp + 0x0000000000000038:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x0000000000000050:word64]
	r1 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000030:word64] = r5
	r2 = r5
	r23 = (word64) (r5 <u r1)
	branch r23 != 0x0000000000000000 l000000000005E080_ds_t
	// succ:  l000000000005E080_ds_f l000000000005E080_ds_t
l000000000005E080_ds_f:
	goto l000000000005E0A8
	// succ:  l000000000005E0A8
l000000000005E080_ds_t:
	goto l000000000005E120
	// succ:  l000000000005E120
l000000000005E0A8:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x0000000000000050:word64]
	r1 = Mem0[r3 + 0x0000000000000008:word64]
	r2 = r5
	r23 = (word64) (r5 <u r1)
	branch r23 == 0x0000000000000000 l000000000005E0A8_ds_t
	// succ:  l000000000005E0A8_ds_f l000000000005E0A8_ds_t
l000000000005E0A8_ds_f:
	goto l000000000005E0C4
	// succ:  l000000000005E0C4
l000000000005E0A8_ds_t:
	goto l000000000005E120
	// succ:  l000000000005E120
l000000000005E0C4:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.setg (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x00000000000000A0:uint32]
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	r1 = Mem0[sp + 0x00000000000000A8:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x00000000000000B0:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	call runtime.sighandler (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.setg (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 152
	call r4 (retsize: 0;)
	return
	// succ:  runtime.sigtrampgo_exit
l000000000005E120:
	Mem0[sp + 0x0000000000000080:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000088:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000090:word32] = (word32) 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.sigaltstack (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000090:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 + r2
	r1 = r1
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l000000000005E120_ds_t
	// succ:  l000000000005E120_ds_f l000000000005E120_ds_t
l000000000005E120_ds_f:
	goto l000000000005E16C
	// succ:  l000000000005E16C
l000000000005E120_ds_t:
	goto l000000000005E1E4
	// succ:  l000000000005E1E4
l000000000005E16C:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	call runtime.setg (retsize: 0;)
	r3 = 0x00000000000A0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	r2 = 0x0000000000090000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000060:word64] = r2
	Mem0[sp + 0x0000000000000050:word64] = r2
	Mem0[sp + 0x0000000000000068:word64] = r3
	Mem0[sp + 0x0000000000000058:word64] = r3
	lo = r1 / sp
	hi = r1 % sp
l000000000005E1E4:
	r4 = Mem0[sp + 0x0000000000000080:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000028:word64] = r4
	r2 = r4
	r23 = (word64) (r1 <u r4)
	branch r23 != 0x0000000000000000 l000000000005E1E4_ds_t
	// succ:  l000000000005E1E4_ds_f l000000000005E1E4_ds_t
l000000000005E1E4_ds_f:
	goto l000000000005E200
	// succ:  l000000000005E200
l000000000005E1E4_ds_t:
	goto l000000000005E29C
	// succ:  l000000000005E29C
l000000000005E200:
	r1 = Mem0[sp + 0x0000000000000088:word64]
	lo = r1 / r1
	hi = r1 % r1
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r23 = (word64) (r2 <u r1)
	branch r23 == 0x0000000000000000 l000000000005E200_ds_t
	// succ:  l000000000005E200_ds_f l000000000005E200_ds_t
l000000000005E200_ds_f:
	goto l000000000005E218
	// succ:  l000000000005E218
l000000000005E200_ds_t:
	goto l000000000005E29C
	// succ:  l000000000005E29C
l000000000005E218:
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000050:word64]
	Mem0[r1:word64] = r4
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000050:word64]
	r2 = Mem0[sp + 0x0000000000000088:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r1 + 0x0000000000000008:word64] = r2
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000050:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r4
	hi = r2 % r4
	Mem0[r1 + 0x0000000000000010:word64] = r2
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000050:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r4
	hi = r2 % r4
	Mem0[r1 + 0x0000000000000018:word64] = r2
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000050:word64]
	r2 = Mem0[sp + 0x0000000000000088:word64]
	Mem0[r1 + 0x0000000000000038:word64] = r2
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.getcallersp (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000050:word64]
	Mem0[r1 + 0x00000000000000A8:word64] = r3
	goto l000000000005E0C4
	// succ:  l000000000005E0C4
l000000000005E29C:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	call runtime.setg (retsize: 0;)
	r3 = 0x00000000000A0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	r2 = 0x0000000000090000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000060:word64] = r2
	Mem0[sp + 0x0000000000000040:word64] = r2
	Mem0[sp + 0x0000000000000068:word64] = r3
	Mem0[sp + 0x0000000000000048:word64] = r3
	lo = r1 / sp
	hi = r1 % sp
runtime.sigtrampgo_exit:


// runtime.sigpanic
// Return size: 0
void runtime.sigpanic()
runtime.sigpanic_entry:
	// succ:  l000000000005E320
l000000000005E320:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005E320_ds_t
	// succ:  l000000000005E320_ds_f l000000000005E320_ds_t
l000000000005E320_ds_f:
	goto l000000000005E330
	// succ:  l000000000005E330
l000000000005E320_ds_t:
	goto l000000000005E344
	// succ:  l000000000005E344
l000000000005E330:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005E320
	// succ:  l000000000005E320
l000000000005E344:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r2 = r30
	r1 = r30
	Mem0[sp + 0x0000000000000038:word64] = r30
	Mem0[sp + 0x0000000000000008:word64] = r30
	call runtime.canpanic (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l000000000005E344_ds_t
	// succ:  l000000000005E344_ds_f l000000000005E344_ds_t
l000000000005E344_ds_f:
	goto l000000000005E37C
	// succ:  l000000000005E37C
l000000000005E344_ds_t:
	goto l000000000005E774
	// succ:  l000000000005E774
l000000000005E37C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000005E3A0:
	r2 = (word64) Mem0[r3 + 0x0000000000000110:uint32]
l000000000005E774:
	goto l000000000005E3A0
	// succ:  l000000000005E3A0
runtime.sigpanic_exit:


// runtime.sigsend
// Return size: 0
void runtime.sigsend()
runtime.sigsend_entry:
	// succ:  l000000000005E780
l000000000005E780:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005E780_ds_t
	// succ:  l000000000005E780_ds_f l000000000005E780_ds_t
l000000000005E780_ds_f:
	goto l000000000005E790
	// succ:  l000000000005E790
l000000000005E780_ds_t:
	goto l000000000005E7A4
	// succ:  l000000000005E7A4
l000000000005E790:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005E780
	// succ:  l000000000005E780
l000000000005E7A4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r5 = (word64) Mem0[sp + 0x0000000000000030:uint32]
	r1 = 0x0000000000000000
runtime.sigsend_exit:


// runtime.makeslice
// Return size: 0
void runtime.makeslice()
runtime.makeslice_entry:
	// succ:  l000000000005ED00
l000000000005ED00:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005ED00_ds_t
	// succ:  l000000000005ED00_ds_f l000000000005ED00_ds_t
l000000000005ED00_ds_f:
	goto l000000000005ED10
	// succ:  l000000000005ED10
l000000000005ED00_ds_t:
	goto l000000000005ED24
	// succ:  l000000000005ED24
l000000000005ED10:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005ED00
	// succ:  l000000000005ED00
l000000000005ED24:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r8 = Mem0[sp + 0x0000000000000068:word64]
	r7 = Mem0[sp + 0x0000000000000058:word64]
	r6 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[sp + 0x0000000000000070:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000078:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000080:word64] = 0x0000000000000000
	r4 = Mem0[r7:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r4 <u r2)
	branch r23 == 0x0000000000000000 l000000000005ED24_ds_t
	// succ:  l000000000005ED24_ds_f l000000000005ED24_ds_t
l000000000005ED24_ds_f:
	goto l000000000005ED58
	// succ:  l000000000005ED58
l000000000005ED24_ds_t:
	goto l000000000005EF58
	// succ:  l000000000005EF58
l000000000005ED58:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r4
	r23 = (word64) (r4 <u r3)
	branch r23 != 0x0000000000000000 l000000000005ED58_ds_t
	// succ:  l000000000005ED58_ds_f l000000000005ED58_ds_t
l000000000005ED58_ds_f:
	goto l000000000005ED78
	// succ:  l000000000005ED78
l000000000005ED58_ds_t:
	goto l000000000005ED84
	// succ:  l000000000005ED84
l000000000005ED78:
	call runtime.panicindex (retsize: 0;)
l000000000005ED84:
l000000000005ED90:
	r5 = r3
	r4 = r6
	r2 = 0x0000000000000000
	r23 = (word64) (r6 < 0x0000000000000000)
	branch r23 != 0x0000000000000000 l000000000005ED90_ds_t
	// succ:  l000000000005ED90_ds_f l000000000005ED90_ds_t
l000000000005ED90_ds_f:
	goto l000000000005EDA8
	// succ:  l000000000005EDA8
l000000000005ED90_ds_t:
	goto l000000000005EED4
	// succ:  l000000000005EED4
l000000000005EDA8:
	r2 = r6
	branch r4 != r6 l000000000005EDA8_ds_t
	// succ:  l000000000005EDA8_ds_f l000000000005EDA8_ds_t
l000000000005EDA8_ds_f:
	goto l000000000005EDB4
	// succ:  l000000000005EDB4
l000000000005EDA8_ds_t:
	goto l000000000005EED4
	// succ:  l000000000005EED4
l000000000005EDB4:
	r2 = r5
	r23 = (word64) (r5 <u r4)
	branch r23 != 0x0000000000000000 l000000000005EDB4_ds_t
	// succ:  l000000000005EDB4_ds_f l000000000005EDB4_ds_t
l000000000005EDB4_ds_f:
	goto l000000000005EDC4
	// succ:  l000000000005EDC4
l000000000005EDB4_ds_t:
	goto l000000000005EED4
	// succ:  l000000000005EED4
l000000000005EDC4:
	r3 = r8
	Mem0[sp + 0x0000000000000030:word64] = r4
	r2 = r4
	r23 = (word64) (r8 < r4)
	branch r23 != 0x0000000000000000 l000000000005EDC4_ds_t
	// succ:  l000000000005EDC4_ds_f l000000000005EDC4_ds_t
l000000000005EDC4_ds_f:
	goto l000000000005EDDC
	// succ:  l000000000005EDDC
l000000000005EDC4_ds_t:
	goto l000000000005EE50
	// succ:  l000000000005EE50
l000000000005EDDC:
	r2 = r8
	branch r3 != r8 l000000000005EDDC_ds_t
	// succ:  l000000000005EDDC_ds_f l000000000005EDDC_ds_t
l000000000005EDDC_ds_f:
	goto l000000000005EDE8
	// succ:  l000000000005EDE8
l000000000005EDDC_ds_t:
	goto l000000000005EE50
	// succ:  l000000000005EE50
l000000000005EDE8:
	r2 = r5
	r23 = (word64) (r5 <u r3)
	branch r23 != 0x0000000000000000 l000000000005EDE8_ds_t
	// succ:  l000000000005EDE8_ds_f l000000000005EDE8_ds_t
l000000000005EDE8_ds_f:
	goto l000000000005EDF8
	// succ:  l000000000005EDF8
l000000000005EDE8_ds_t:
	goto l000000000005EE50
	// succ:  l000000000005EE50
l000000000005EDF8:
	r1 = Mem0[r7:word64]
	r2 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
l000000000005EE50:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000040:word64] = r1
l000000000005EED4:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000040:word64] = r1
l000000000005EF58:
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000011A0:word64]
	r2 = r1
	r3 = r4
	branch r4 != 0x0000000000000000 l000000000005EF58_ds_t
	// succ:  l000000000005EF58_ds_f l000000000005EF58_ds_t
l000000000005EF58_ds_f:
	goto l000000000005EF74
	// succ:  l000000000005EF74
l000000000005EF58_ds_t:
	goto l000000000005EF80
	// succ:  l000000000005EF80
l000000000005EF74:
	call runtime.panicdivide (retsize: 0;)
l000000000005EF80:
	lo = r1 / r4
	hi = r1 % r4
	r3 = lo
	goto l000000000005ED90
	// succ:  l000000000005ED90
runtime.makeslice_exit:


// runtime.growslice
// Return size: 0
void runtime.growslice()
runtime.growslice_entry:
	// succ:  l000000000005EF90
l000000000005EF90:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005EF90_ds_t
	// succ:  l000000000005EF90_ds_f l000000000005EF90_ds_t
l000000000005EF90_ds_f:
	goto l000000000005EFA0
	// succ:  l000000000005EFA0
l000000000005EF90_ds_t:
	goto l000000000005EFB4
	// succ:  l000000000005EFB4
l000000000005EFA0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005EF90
	// succ:  l000000000005EF90
l000000000005EFB4:
	sp = sp + -104
	Mem0[sp:word64] = ra
	r7 = Mem0[sp + 0x0000000000000088:word64]
	r6 = Mem0[sp + 0x0000000000000080:word64]
	r5 = Mem0[sp + 0x0000000000000090:word64]
	Mem0[sp + 0x0000000000000098:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000A0:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000A8:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000070:word64]
	r1 = Mem0[r1:word64]
	branch r1 != 0x0000000000000000 l000000000005EFB4_ds_t
	// succ:  l000000000005EFB4_ds_f l000000000005EFB4_ds_t
l000000000005EFB4_ds_f:
	goto l000000000005EFE4
	// succ:  l000000000005EFE4
l000000000005EFB4_ds_t:
	goto l000000000005F098
	// succ:  l000000000005F098
l000000000005EFE4:
	r2 = r5
	r23 = (word64) (r5 < r7)
	branch r23 == 0x0000000000000000 l000000000005EFE4_ds_t
	// succ:  l000000000005EFE4_ds_f l000000000005EFE4_ds_t
l000000000005EFE4_ds_f:
	goto l000000000005EFF4
	// succ:  l000000000005EFF4
l000000000005EFE4_ds_t:
	goto l000000000005F070
	// succ:  l000000000005F070
l000000000005EFF4:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000058:word64] = r1
l000000000005F070:
	r4 = 0x00000000000F0000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	Mem0[sp + 0x0000000000000098:word64] = r4
	Mem0[sp + 0x00000000000000A0:word64] = r6
	Mem0[sp + 0x00000000000000A8:word64] = r5
	r4 = Mem0[sp:word64]
	sp = sp + 104
	call r4 (retsize: 0;)
	return
	// succ:  runtime.growslice_exit
l000000000005F098:
	r3 = r7
	lo = r1 / r7
	hi = r1 % r7
	r23 = (word64) (r1 < r5)
	branch r23 == 0x0000000000000000 l000000000005F098_ds_t
	// succ:  l000000000005F098_ds_f l000000000005F098_ds_t
l000000000005F098_ds_f:
	goto l000000000005F0AC
	// succ:  l000000000005F0AC
l000000000005F098_ds_t:
	goto l000000000005F884
	// succ:  l000000000005F884
l000000000005F0AC:
	r3 = r5
	goto l000000000005F0B0
	// succ:  l000000000005F0B0
l000000000005F0AC_ds_f:
	goto l000000000005F0C4
	// succ:  l000000000005F0C4
l000000000005F0AC_ds_t:
	goto l000000000005F4F8
	// succ:  l000000000005F4F8
l000000000005F0B0:
	r1 = Mem0[sp + 0x0000000000000070:word64]
	r4 = Mem0[r1:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r4 != r2 l000000000005F0AC_ds_t
	goto l000000000005F0AC_ds_f
	// succ:  l000000000005F0AC_ds_f l000000000005F0AC_ds_t
l000000000005F0C4:
	Mem0[sp + 0x0000000000000038:word64] = r6
	r2 = 0x0000000000008000
	r23 = (word64) (r3 <u r2)
	branch r23 == 0x0000000000000000 l000000000005F0C4_ds_t
	// succ:  l000000000005F0C4_ds_f l000000000005F0C4_ds_t
l000000000005F0C4_ds_f:
	goto l000000000005F0D8
	// succ:  l000000000005F0D8
l000000000005F0C4_ds_t:
	goto l000000000005F4A4
	// succ:  l000000000005F4A4
l000000000005F0D8:
l000000000005F160:
	r4 = r2
	r6 = r2
	r2 = r5
	r23 = (word64) (r5 < r7)
	branch r23 != 0x0000000000000000 l000000000005F160_ds_t
	// succ:  l000000000005F160_ds_f l000000000005F160_ds_t
l000000000005F160_ds_f:
	goto l000000000005F178
	// succ:  l000000000005F178
l000000000005F160_ds_t:
	goto l000000000005F360
	// succ:  l000000000005F360
l000000000005F178:
	r1 = Mem0[sp + 0x0000000000000070:word64]
	r5 = Mem0[r1:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r5 <u r2)
	branch r23 == 0x0000000000000000 l000000000005F178_ds_t
	// succ:  l000000000005F178_ds_f l000000000005F178_ds_t
l000000000005F178_ds_f:
	goto l000000000005F190
	// succ:  l000000000005F190
l000000000005F178_ds_t:
	goto l000000000005F3E4
	// succ:  l000000000005F3E4
l000000000005F190:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r5
	r23 = (word64) (r5 <u r3)
	branch r23 != 0x0000000000000000 l000000000005F190_ds_t
	// succ:  l000000000005F190_ds_f l000000000005F190_ds_t
l000000000005F190_ds_f:
	goto l000000000005F1B0
	// succ:  l000000000005F1B0
l000000000005F190_ds_t:
	goto l000000000005F1BC
	// succ:  l000000000005F1BC
l000000000005F1B0:
	call runtime.panicindex (retsize: 0;)
l000000000005F1BC:
l000000000005F1C8:
	Mem0[sp + 0x0000000000000030:word64] = r6
	r2 = r3
	r23 = (word64) (r3 <u r6)
	branch r23 != 0x0000000000000000 l000000000005F1C8_ds_t
	// succ:  l000000000005F1C8_ds_f l000000000005F1C8_ds_t
l000000000005F1C8_ds_f:
	goto l000000000005F1DC
	// succ:  l000000000005F1DC
l000000000005F1C8_ds_t:
	goto l000000000005F360
	// succ:  l000000000005F360
l000000000005F1DC:
	r1 = Mem0[sp + 0x0000000000000070:word64]
	r1 = (word64) Mem0[r1 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l000000000005F1DC_ds_t
	// succ:  l000000000005F1DC_ds_f l000000000005F1DC_ds_t
l000000000005F1DC_ds_f:
	goto l000000000005F208
	// succ:  l000000000005F208
l000000000005F1DC_ds_t:
	goto l000000000005F29C
	// succ:  l000000000005F29C
l000000000005F208:
	Mem0[sp + 0x0000000000000048:word64] = r4
	Mem0[sp + 0x0000000000000008:word64] = r4
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	call runtime.mallocgc (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000050:word64] = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000078:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memmove (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r1 = Mem0[sp + 0x0000000000000050:word64]
	r3 = r4
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	r2 = r4
l000000000005F274:
	r4 = Mem0[sp + 0x0000000000000050:word64]
	r3 = Mem0[sp + 0x0000000000000080:word64]
	r2 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000098:word64] = r4
	Mem0[sp + 0x00000000000000A0:word64] = r3
	Mem0[sp + 0x00000000000000A8:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 104
	call r4 (retsize: 0;)
	return
	// succ:  runtime.growslice_exit
l000000000005F29C:
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000070:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	call runtime.mallocgc (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000050:word64] = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	branch r1 != 0x0000000000000000 l000000000005F29C_ds_t
	// succ:  l000000000005F29C_ds_f l000000000005F29C_ds_t
l000000000005F29C_ds_f:
	goto l000000000005F2D8
	// succ:  l000000000005F2D8
l000000000005F29C_ds_t:
	goto l000000000005F300
	// succ:  l000000000005F300
l000000000005F2D8:
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000078:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memmove (retsize: 0;)
	goto l000000000005F274
	// succ:  l000000000005F274
l000000000005F300:
	r3 = 0x0000000000000000
	goto l000000000005F304
	// succ:  l000000000005F304
l000000000005F300_ds_f:
	goto l000000000005F314
	// succ:  l000000000005F314
l000000000005F300_ds_t:
	goto l000000000005F274
	// succ:  l000000000005F274
l000000000005F304:
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r23 = (word64) (r3 <u r2)
	branch r23 == 0x0000000000000000 l000000000005F300_ds_t
	goto l000000000005F300_ds_f
	// succ:  l000000000005F300_ds_f l000000000005F300_ds_t
l000000000005F314:
	r4 = Mem0[sp + 0x0000000000000050:word64]
	lo = r4 / r4
	hi = r4 % r4
	r2 = Mem0[sp + 0x0000000000000078:word64]
	Mem0[sp + 0x0000000000000040:word64] = r3
	lo = r2 / r2
	hi = r2 % r2
	r1 = Mem0[sp + 0x0000000000000070:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r4
	r1 = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.typedmemmove (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000040:word64]
	r1 = Mem0[sp + 0x0000000000000070:word64]
	r1 = Mem0[r1:word64]
	lo = r1 / r1
	hi = r1 % r1
	r3 = r1
	goto l000000000005F304
	// succ:  l000000000005F304
l000000000005F360:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000058:word64] = r1
l000000000005F3E4:
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x00000000000011A0:word64]
	r1 = r2
	r3 = r5
	branch r5 != 0x0000000000000000 l000000000005F3E4_ds_t
	// succ:  l000000000005F3E4_ds_f l000000000005F3E4_ds_t
l000000000005F3E4_ds_f:
	goto l000000000005F400
	// succ:  l000000000005F400
l000000000005F3E4_ds_t:
	goto l000000000005F40C
	// succ:  l000000000005F40C
l000000000005F400:
	call runtime.panicdivide (retsize: 0;)
l000000000005F40C:
	lo = r2 / r5
	hi = r2 % r5
	r3 = lo
	goto l000000000005F1C8
	// succ:  l000000000005F1C8
l000000000005F4A4:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r23 = (word64) (r1 <u r3)
	branch r23 == 0x0000000000000000 l000000000005F4A4_ds_t
	// succ:  l000000000005F4A4_ds_f l000000000005F4A4_ds_t
l000000000005F4A4_ds_f:
	goto l000000000005F4B8
	// succ:  l000000000005F4B8
l000000000005F4A4_ds_t:
	goto l000000000005F4C4
	// succ:  l000000000005F4C4
l000000000005F4B8:
	r2 = r3
	goto l000000000005F160
	// succ:  l000000000005F160
l000000000005F4C4:
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l000000000005F4F8:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r4 != r2 l000000000005F4F8_ds_t
	// succ:  l000000000005F4F8_ds_f l000000000005F4F8_ds_t
l000000000005F4F8_ds_f:
	goto l000000000005F504
	// succ:  l000000000005F504
l000000000005F4F8_ds_t:
	goto l000000000005F6B8
	// succ:  l000000000005F6B8
l000000000005F504:
l000000000005F6B8:
	r2 = Mem0[sp + 0x0000000000000070:word64]
	r2 = Mem0[r2:word64]
l000000000005F884:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r6 < r2)
	branch r23 == 0x0000000000000000 l000000000005F884_ds_t
	// succ:  l000000000005F884_ds_f l000000000005F884_ds_t
l000000000005F884_ds_f:
	goto l000000000005F894
	// succ:  l000000000005F894
l000000000005F884_ds_t:
	goto l000000000005F8A0
	// succ:  l000000000005F8A0
l000000000005F894:
	r3 = r1
	goto l000000000005F0B0
	// succ:  l000000000005F0B0
l000000000005F8A0:
	r23 = (word64) (r3 < r5)
	branch r23 == 0x0000000000000000 l000000000005F8A0_ds_t
	// succ:  l000000000005F8A0_ds_f l000000000005F8A0_ds_t
l000000000005F8A0_ds_f:
	goto l000000000005F8AC
	// succ:  l000000000005F8AC
l000000000005F8A0_ds_t:
	goto l000000000005F0B0
	// succ:  l000000000005F0B0
l000000000005F8AC:
	r4 = r3
	r1 = r3
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000005F8AC_ds_t
	// succ:  l000000000005F8AC_ds_f l000000000005F8AC_ds_t
l000000000005F8AC_ds_f:
	goto l000000000005F8C4
	// succ:  l000000000005F8C4
l000000000005F8AC_ds_t:
	goto l000000000005F8D0
	// succ:  l000000000005F8D0
l000000000005F8C4:
	call runtime.panicdivide (retsize: 0;)
l000000000005F8D0:
	lo = r2 / r3
	hi = r2 % r3
	r3 = lo
	lo = r3 / r3
	hi = r3 % r3
	goto l000000000005F8A0
	// succ:  l000000000005F8A0
runtime.growslice_exit:


// runtime.stackinit
// Return size: 0
void runtime.stackinit()
runtime.stackinit_entry:
	// succ:  l000000000005F8E8
l000000000005F8E8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005F8E8_ds_t
	// succ:  l000000000005F8E8_ds_f l000000000005F8E8_ds_t
l000000000005F8E8_ds_f:
	goto l000000000005F8F8
	// succ:  l000000000005F8F8
l000000000005F8E8_ds_t:
	goto l000000000005F90C
	// succ:  l000000000005F90C
l000000000005F8F8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005F8E8
	// succ:  l000000000005F8E8
l000000000005F90C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r5 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	r2 = Mem0[sp + 0x0000000000000018:word64]
	r23 = (word64) (r5 < r2)
	branch r23 == 0x0000000000000000 l000000000005F90C_ds_t
	// succ:  l000000000005F90C_ds_f l000000000005F90C_ds_t
l000000000005F90C_ds_f:
	goto l000000000005F930
	// succ:  l000000000005F930
l000000000005F90C_ds_t:
	goto l000000000005F9A8
	// succ:  l000000000005F9A8
l000000000005F930:
	Mem0[sp + 0x0000000000000020:word64] = r5
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r5
	r23 = (word64) (r5 <u r3)
	branch r23 != 0x0000000000000000 l000000000005F930_ds_t
	// succ:  l000000000005F930_ds_f l000000000005F930_ds_t
l000000000005F930_ds_f:
	goto l000000000005F954
	// succ:  l000000000005F954
l000000000005F930_ds_t:
	goto l000000000005F960
	// succ:  l000000000005F960
l000000000005F954:
	call runtime.panicindex (retsize: 0;)
l000000000005F960:
l000000000005F9A8:
	r5 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	r2 = Mem0[sp + 0x0000000000000018:word64]
	r23 = (word64) (r5 < r2)
	branch r23 == 0x0000000000000000 l000000000005F9A8_ds_t
	// succ:  l000000000005F9A8_ds_f l000000000005F9A8_ds_t
l000000000005F9A8_ds_f:
	goto l000000000005F9C4
	// succ:  l000000000005F9C4
l000000000005F9A8_ds_t:
	goto l000000000005FA3C
	// succ:  l000000000005FA3C
l000000000005F9C4:
	Mem0[sp + 0x0000000000000020:word64] = r5
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r5
	r23 = (word64) (r5 <u r3)
	branch r23 != 0x0000000000000000 l000000000005F9C4_ds_t
	// succ:  l000000000005F9C4_ds_f l000000000005F9C4_ds_t
l000000000005F9C4_ds_f:
	goto l000000000005F9E8
	// succ:  l000000000005F9E8
l000000000005F9C4_ds_t:
	goto l000000000005F9F4
	// succ:  l000000000005F9F4
l000000000005F9E8:
	call runtime.panicindex (retsize: 0;)
l000000000005F9F4:
l000000000005FA3C:
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.stackinit_exit
runtime.stackinit_exit:


// runtime.stacklog2
// Return size: 0
void runtime.stacklog2()
runtime.stacklog2_entry:
	// succ:  l000000000005FA90
l000000000005FA90:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005FA90_ds_t
	// succ:  l000000000005FA90_ds_f l000000000005FA90_ds_t
l000000000005FA90_ds_f:
	goto l000000000005FAA0
	// succ:  l000000000005FAA0
l000000000005FA90_ds_t:
	goto l000000000005FAB4
	// succ:  l000000000005FAB4
l000000000005FAA0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005FA90
	// succ:  l000000000005FA90
l000000000005FAB4:
	r3 = Mem0[sp + 0x0000000000000008:word64]
	r4 = 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r2 <u r3)
	branch r23 == 0x0000000000000000 l000000000005FAB4_ds_t
	// succ:  l000000000005FAB4_ds_f l000000000005FAB4_ds_t
l000000000005FAB4_ds_f:
	goto l000000000005FACC
	// succ:  l000000000005FACC
l000000000005FAB4_ds_t:
	goto l000000000005FAF0
	// succ:  l000000000005FAF0
l000000000005FACC:
l000000000005FAF0:
	Mem0[sp + 0x0000000000000010:word64] = r4
	return
	// succ:  runtime.stacklog2_exit
runtime.stacklog2_exit:


// runtime.stackpoolalloc
// Return size: 0
void runtime.stackpoolalloc()
runtime.stackpoolalloc_entry:
	// succ:  l000000000005FB00
l000000000005FB00:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005FB00_ds_t
	// succ:  l000000000005FB00_ds_f l000000000005FB00_ds_t
l000000000005FB00_ds_f:
	goto l000000000005FB10
	// succ:  l000000000005FB10
l000000000005FB00_ds_t:
	goto l000000000005FB24
	// succ:  l000000000005FB24
l000000000005FB10:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005FB00
	// succ:  l000000000005FB00
l000000000005FB24:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	r2 = (word64) Mem0[sp + 0x0000000000000040:byte]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r2 <u r3)
	branch r23 != 0x0000000000000000 l000000000005FB24_ds_t
	// succ:  l000000000005FB24_ds_f l000000000005FB24_ds_t
l000000000005FB24_ds_f:
	goto l000000000005FB4C
	// succ:  l000000000005FB4C
l000000000005FB24_ds_t:
	goto l000000000005FB58
	// succ:  l000000000005FB58
l000000000005FB4C:
	call runtime.panicindex (retsize: 0;)
l000000000005FB58:
runtime.stackpoolalloc_exit:


// runtime.stackpoolfree
// Return size: 0
void runtime.stackpoolfree()
runtime.stackpoolfree_entry:
	// succ:  l000000000005FD88
l000000000005FD88:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005FD88_ds_t
	// succ:  l000000000005FD88_ds_f l000000000005FD88_ds_t
l000000000005FD88_ds_f:
	goto l000000000005FD98
	// succ:  l000000000005FD98
l000000000005FD88_ds_t:
	goto l000000000005FDAC
	// succ:  l000000000005FDAC
l000000000005FD98:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000005FD88
	// succ:  l000000000005FD88
l000000000005FDAC:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r4 = 0x00000000000D0000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	r2 = Mem0[sp + 0x0000000000000028:word64]
	branch r4 != 0x0000000000000000 l000000000005FDAC_ds_t
	// succ:  l000000000005FDAC_ds_f l000000000005FDAC_ds_t
l000000000005FDAC_ds_f:
	goto l000000000005FDCC
	// succ:  l000000000005FDCC
l000000000005FDAC_ds_t:
	goto l000000000005FDD0
	// succ:  l000000000005FDD0
l000000000005FDCC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000005FDD0
l000000000005FDD0:
	r3 = Mem0[r4 + 0x00000000000012B0:word64]
runtime.stackpoolfree_exit:


// runtime.stackcacherefill
// Return size: 0
void runtime.stackcacherefill()
runtime.stackcacherefill_entry:
	// succ:  l000000000005FFC8
l000000000005FFC8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000018:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000005FFC8_ds_t
	// succ:  l000000000005FFC8_ds_f l000000000005FFC8_ds_t
l000000000005FFC8_ds_f:
	goto l000000000005FFD8
	// succ:  l000000000005FFD8
l000000000005FFC8_ds_t:
	goto l000000000005FFEC
	// succ:  l000000000005FFEC
l000000000005FFD8:
	r3 = ra
	call runtime.morestackc (retsize: 0;)
	goto l000000000005FFC8
	// succ:  l000000000005FFC8
l000000000005FFEC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000018:word64]
	r4 = (word64) Mem0[sp + 0x0000000000000038:byte]
	r1 = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
runtime.stackcacherefill_exit:


// runtime.stackcacherelease
// Return size: 0
void runtime.stackcacherelease()
runtime.stackcacherelease_entry:
	// succ:  l0000000000060138
l0000000000060138:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000018:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000060138_ds_t
	// succ:  l0000000000060138_ds_f l0000000000060138_ds_t
l0000000000060138_ds_f:
	goto l0000000000060148
	// succ:  l0000000000060148
l0000000000060138_ds_t:
	goto l000000000006015C
	// succ:  l000000000006015C
l0000000000060148:
	r3 = ra
	call runtime.morestackc (retsize: 0;)
	goto l0000000000060138
	// succ:  l0000000000060138
l000000000006015C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r4 = (word64) Mem0[sp + 0x0000000000000040:byte]
	branch r5 != 0x0000000000000000 l000000000006015C_ds_t
	// succ:  l000000000006015C_ds_f l000000000006015C_ds_t
l000000000006015C_ds_f:
	goto l0000000000060174
	// succ:  l0000000000060174
l000000000006015C_ds_t:
	goto l0000000000060178
	// succ:  l0000000000060178
l0000000000060174:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000060178
l0000000000060178:
	lo = r2 / r5
	hi = r2 % r5
	r1 = r4 + 0x00000000000000FF
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r1 <u r3)
	branch r23 != 0x0000000000000000 l0000000000060178_ds_t
	// succ:  l0000000000060178_ds_f l0000000000060178_ds_t
l0000000000060178_ds_f:
	goto l0000000000060190
	// succ:  l0000000000060190
l0000000000060178_ds_t:
	goto l000000000006019C
	// succ:  l000000000006019C
l0000000000060190:
	call runtime.panicindex (retsize: 0;)
l000000000006019C:
runtime.stackcacherelease_exit:


// runtime.stackcache_clear
// Return size: 0
void runtime.stackcache_clear()
runtime.stackcache_clear_entry:
	// succ:  l0000000000060328
l0000000000060328:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000018:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000060328_ds_t
	// succ:  l0000000000060328_ds_f l0000000000060328_ds_t
l0000000000060328_ds_f:
	goto l0000000000060338
	// succ:  l0000000000060338
l0000000000060328_ds_t:
	goto l000000000006034C
	// succ:  l000000000006034C
l0000000000060338:
	r3 = ra
	call runtime.morestackc (retsize: 0;)
	goto l0000000000060328
	// succ:  l0000000000060328
l000000000006034C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000030:word64]
	r1 = 0x0000000000000000
	r4 = r1 + 0x00000000000000FF
	r1 = r4 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r23 = (word64) (r1 <u r2)
	branch r23 == 0x0000000000000000 l000000000006034C_ds_t
	// succ:  l000000000006034C_ds_f l000000000006034C_ds_t
l000000000006034C_ds_f:
	goto l0000000000060398
	// succ:  l0000000000060398
l000000000006034C_ds_t:
	goto l00000000000604A4
	// succ:  l00000000000604A4
l0000000000060398:
	branch r5 != 0x0000000000000000 l0000000000060398_ds_t
	// succ:  l0000000000060398_ds_f l0000000000060398_ds_t
l0000000000060398_ds_f:
	goto l00000000000603A0
	// succ:  l00000000000603A0
l0000000000060398_ds_t:
	goto l00000000000603A4
	// succ:  l00000000000603A4
l00000000000603A0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000603A4
l00000000000603A4:
	lo = r2 / r5
	hi = r2 % r5
	r1 = r4 + 0x00000000000000FF
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r23 = (word64) (r1 <u r3)
	branch r23 != 0x0000000000000000 l00000000000603A4_ds_t
	// succ:  l00000000000603A4_ds_f l00000000000603A4_ds_t
l00000000000603A4_ds_f:
	goto l00000000000603BC
	// succ:  l00000000000603BC
l00000000000603A4_ds_t:
	goto l00000000000603C8
	// succ:  l00000000000603C8
l00000000000603BC:
	call runtime.panicindex (retsize: 0;)
l00000000000603C8:
l00000000000604A4:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.stackcache_clear_exit
runtime.stackcache_clear_exit:


// runtime.stackalloc
// Return size: 0
void runtime.stackalloc()
runtime.stackalloc_entry:
	// succ:  l00000000000604D0
l00000000000604D0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000018:word64]
	r2 = sp + -160
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000604D0_ds_t
	// succ:  l00000000000604D0_ds_f l00000000000604D0_ds_t
l00000000000604D0_ds_f:
	goto l00000000000604E4
	// succ:  l00000000000604E4
l00000000000604D0_ds_t:
	goto l00000000000604F8
	// succ:  l00000000000604F8
l00000000000604E4:
	r3 = ra
	call runtime.morestackc (retsize: 0;)
	goto l00000000000604D0
	// succ:  l00000000000604D0
l00000000000604F8:
	sp = sp + -160
	Mem0[sp:word64] = ra
	Mem0[sp + 0x00000000000000B0:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000B8:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000C0:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000C8:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000D0:word64] = 0x0000000000000000
	r3 = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	Mem0[sp + 0x0000000000000058:word64] = r30
	r2 = r30
	branch r1 == r30 l00000000000604F8_ds_t
	// succ:  l00000000000604F8_ds_f l00000000000604F8_ds_t
l00000000000604F8_ds_f:
	goto l0000000000060530
	// succ:  l0000000000060530
l00000000000604F8_ds_t:
	goto l0000000000060550
	// succ:  l0000000000060550
l0000000000060530:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000060550:
	r1 = (word64) Mem0[sp + 0x00000000000000A8:uint32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.stackalloc_exit:


// runtime.stackfree
// Return size: 0
void runtime.stackfree()
runtime.stackfree_entry:
	// succ:  l0000000000060C48
l0000000000060C48:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000018:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000060C48_ds_t
	// succ:  l0000000000060C48_ds_f l0000000000060C48_ds_t
l0000000000060C48_ds_f:
	goto l0000000000060C58
	// succ:  l0000000000060C58
l0000000000060C48_ds_t:
	goto l0000000000060C6C
	// succ:  l0000000000060C6C
l0000000000060C58:
	r3 = ra
	call runtime.morestackc (retsize: 0;)
	goto l0000000000060C48
	// succ:  l0000000000060C48
l0000000000060C6C:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r7 = Mem0[sp + 0x0000000000000078:word64]
	r9 = r30
	Mem0[sp + 0x0000000000000050:word64] = r30
	r4 = Mem0[sp + 0x0000000000000068:word64]
	Mem0[sp + 0x0000000000000040:word64] = r4
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.stackfree_exit:


// runtime.adjustpointers
// Return size: 0
void runtime.adjustpointers()
runtime.adjustpointers_entry:
	// succ:  l0000000000061240
l0000000000061240:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -264
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000061240_ds_t
	// succ:  l0000000000061240_ds_f l0000000000061240_ds_t
l0000000000061240_ds_f:
	goto l0000000000061254
	// succ:  l0000000000061254
l0000000000061240_ds_t:
	goto l0000000000061268
	// succ:  l0000000000061268
l0000000000061254:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000061240
	// succ:  l0000000000061240
l0000000000061268:
	sp = sp + -264
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000120:word64]
	r1 = Mem0[sp + 0x0000000000000118:word64]
	branch r1 != 0x0000000000000000 l0000000000061268_ds_t
	// succ:  l0000000000061268_ds_f l0000000000061268_ds_t
l0000000000061268_ds_f:
	goto l0000000000061280
	// succ:  l0000000000061280
l0000000000061268_ds_t:
	goto l0000000000061284
	// succ:  l0000000000061284
l0000000000061280:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000061284
l0000000000061284:
	r2 = (word64) Mem0[r1:int32]
	r5 = r2
	r6 = Mem0[r1 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000078:word64] = r6
	Mem0[sp + 0x00000000000000A8:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000B0:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000B8:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000C0:word64] = 0x0000000000000000
	r1 = r5
	Mem0[sp + 0x0000000000000070:word32] = (word32) r5
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 + r2
	r1 = r1
	r2 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2
	r3 = r3
	branch r3 != 0x0000000000000000 l0000000000061284_ds_t
	// succ:  l0000000000061284_ds_f l0000000000061284_ds_t
l0000000000061284_ds_f:
	goto l00000000000612D8
	// succ:  l00000000000612D8
l0000000000061284_ds_t:
	goto l00000000000612E4
	// succ:  l00000000000612E4
l00000000000612D8:
	call runtime.panicdivide (retsize: 0;)
l00000000000612E4:
	lo = r2 / r3
	hi = r2 % r3
	r2 = lo
	r3 = r2
	r1 = r3
	r2 = 0x0000000040000000
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l00000000000612E4_ds_t
	// succ:  l00000000000612E4_ds_f l00000000000612E4_ds_t
l00000000000612E4_ds_f:
	goto l0000000000061304
	// succ:  l0000000000061304
l00000000000612E4_ds_t:
	goto l00000000000616DC
	// succ:  l00000000000616DC
l0000000000061304:
	branch r6 != 0x0000000000000000 l0000000000061304_ds_t
	// succ:  l0000000000061304_ds_f l0000000000061304_ds_t
l0000000000061304_ds_f:
	goto l000000000006130C
	// succ:  l000000000006130C
l0000000000061304_ds_t:
	goto l0000000000061310
	// succ:  l0000000000061310
l000000000006130C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000061310
l0000000000061310:
	r7 = 0x0000000040000000
	r3 = r6
	r6 = r5
	Mem0[sp + 0x0000000000000090:word64] = r3
	Mem0[sp + 0x0000000000000098:word64] = r1
	Mem0[sp + 0x00000000000000A0:word64] = r7
	Mem0[sp + 0x00000000000000E8:word64] = r6
	Mem0[sp + 0x00000000000000F0:word64] = r3
	Mem0[sp + 0x00000000000000F8:word64] = r1
	Mem0[sp + 0x0000000000000100:word64] = r7
	Mem0[sp + 0x00000000000000A8:word64] = r6
	Mem0[sp + 0x00000000000000C8:word64] = r6
	Mem0[sp + 0x00000000000000B0:word64] = r3
	Mem0[sp + 0x00000000000000D0:word64] = r3
	Mem0[sp + 0x00000000000000B8:word64] = r1
	Mem0[sp + 0x00000000000000D8:word64] = r1
	Mem0[sp + 0x00000000000000C0:word64] = r7
	Mem0[sp + 0x00000000000000E0:word64] = r7
	r2 = Mem0[r4:word64]
	Mem0[sp + 0x0000000000000040:word64] = r2
	r2 = Mem0[r4 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000048:word64] = r2
	r2 = Mem0[r4 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000058:word64] = r2
	r1 = Mem0[sp + 0x00000000000000C8:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r1 = Mem0[sp + 0x0000000000000110:word64]
	r2 = Mem0[r4 + 0x0000000000000118:word64]
	r23 = (word64) (r1 <u r2)
	branch r23 != 0x0000000000000000 l0000000000061310_ds_t
	// succ:  l0000000000061310_ds_f l0000000000061310_ds_t
l0000000000061310_ds_f:
	goto l000000000006138C
	// succ:  l000000000006138C
l0000000000061310_ds_t:
	goto l00000000000616CC
	// succ:  l00000000000616CC
l000000000006138C:
	Mem0[sp + 0x0000000000000028:byte] = (byte) 0x0000000000000000
	goto l0000000000061390
	// succ:  l0000000000061390
l000000000006138C_ds_f:
	goto l00000000000613A4
	// succ:  l00000000000613A4
l000000000006138C_ds_t:
	goto l00000000000616A4
	// succ:  l00000000000616A4
l0000000000061390:
	r8 = 0x0000000000000000
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r23 = (word64) (r8 <u r2)
	branch r23 == 0x0000000000000000 l000000000006138C_ds_t
	goto l000000000006138C_ds_f
	// succ:  l000000000006138C_ds_f l000000000006138C_ds_t
l00000000000613A4:
	lo = r2 / sp
	hi = r2 % sp
	r6 = r8
	r1 = 0x0000000000000000
	r3 = r8
	r4 = r8
	lo = r5 / 0x0000000000000000
	hi = r5 % 0x0000000000000000
	branch r5 != 0x0000000000000000 l00000000000613A4_ds_t
	// succ:  l00000000000613A4_ds_f l00000000000613A4_ds_t
l00000000000613A4_ds_f:
	goto l00000000000613C4
	// succ:  l00000000000613C4
l00000000000613A4_ds_t:
	goto l00000000000613D0
	// succ:  l00000000000613D0
l00000000000613C4:
	call runtime.panicdivide (retsize: 0;)
l00000000000613D0:
	lo = r8 / r5
	hi = r8 % r5
	r5 = lo
	branch r2 != 0x0000000000000000 l00000000000613D0_ds_t
	// succ:  l00000000000613D0_ds_f l00000000000613D0_ds_t
l00000000000613D0_ds_f:
	goto l00000000000613E0
	// succ:  l00000000000613E0
l00000000000613D0_ds_t:
	goto l00000000000613E4
	// succ:  l00000000000613E4
l00000000000613E0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000613E4
l00000000000613E4:
	r1 = Mem0[r2 + 0x0000000000000008:word64]
	r7 = Mem0[r2 + 0x0000000000000010:word64]
	r4 = Mem0[r2 + 0x0000000000000018:word64]
	Mem0[sp + 0x00000000000000A0:word64] = r4
	r2 = r1
	Mem0[sp + 0x0000000000000090:word64] = r1
	Mem0[sp + 0x0000000000000098:word64] = r7
	r4 = r7
	r3 = r5
	r23 = (word64) (r5 <u r7)
	branch r23 != 0x0000000000000000 l00000000000613E4_ds_t
	// succ:  l00000000000613E4_ds_f l00000000000613E4_ds_t
l00000000000613E4_ds_f:
	goto l0000000000061414
	// succ:  l0000000000061414
l00000000000613E4_ds_t:
	goto l0000000000061420
	// succ:  l0000000000061420
l0000000000061414:
	call runtime.panicindex (retsize: 0;)
l0000000000061420:
	lo = r1 / r1
	hi = r1 % r1
	r1 = (word64) Mem0[r1:byte]
	r2 = r8
	r3 = r8
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	branch r4 != 0x0000000000000000 l0000000000061420_ds_t
	// succ:  l0000000000061420_ds_f l0000000000061420_ds_t
l0000000000061420_ds_f:
	goto l000000000006143C
	// succ:  l000000000006143C
l0000000000061420_ds_t:
	goto l0000000000061448
	// succ:  l0000000000061448
l000000000006143C:
	call runtime.panicdivide (retsize: 0;)
l0000000000061448:
	lo = r8 / r4
	hi = r8 % r4
	r3 = hi
l00000000000616A4:
	r4 = Mem0[sp:word64]
	sp = sp + 264
	call r4 (retsize: 0;)
	return
	// succ:  runtime.adjustpointers_exit
l00000000000616CC:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	goto l0000000000061390
	// succ:  l0000000000061390
l00000000000616DC:
	call runtime.panicslice (retsize: 0;)
runtime.adjustpointers_exit:


// runtime.adjustframe
// Return size: 0
void runtime.adjustframe()
runtime.adjustframe_entry:
	// succ:  l00000000000616F0
l00000000000616F0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -192
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000616F0_ds_t
	// succ:  l00000000000616F0_ds_f l00000000000616F0_ds_t
l00000000000616F0_ds_f:
	goto l0000000000061704
	// succ:  l0000000000061704
l00000000000616F0_ds_t:
	goto l0000000000061718
	// succ:  l0000000000061718
l0000000000061704:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000616F0
	// succ:  l00000000000616F0
l0000000000061718:
	sp = sp + -192
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000090:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000098:word64] = 0x0000000000000000
	r4 = Mem0[sp + 0x00000000000000C8:word64]
	r1 = 0x0000000000000000
	r5 = Mem0[sp + 0x00000000000000D0:word64]
	r3 = Mem0[r4 + 0x0000000000000010:word64]
	branch r3 != 0x0000000000000000 l0000000000061718_ds_t
	// succ:  l0000000000061718_ds_f l0000000000061718_ds_t
l0000000000061718_ds_f:
	goto l0000000000061740
	// succ:  l0000000000061740
l0000000000061718_ds_t:
	goto l000000000006175C
	// succ:  l000000000006175C
l0000000000061740:
l000000000006175C:
	r4 = Mem0[r4:word64]
	r1 = Mem0[r4:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 - 0x0000000000006848:word64]
	branch r1 != r2 l000000000006175C_ds_t
	// succ:  l000000000006175C_ds_f l000000000006175C_ds_t
l000000000006175C_ds_f:
	goto l0000000000061778
	// succ:  l0000000000061778
l000000000006175C_ds_t:
	goto l0000000000061794
	// succ:  l0000000000061794
l0000000000061778:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x00000000000000D8:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 192
	call r4 (retsize: 0;)
	return
	// succ:  runtime.adjustframe_exit
l0000000000061794:
	r1 = Mem0[r4:word64]
	branch r1 == r3 l0000000000061794_ds_t
	// succ:  l0000000000061794_ds_f l0000000000061794_ds_t
l0000000000061794_ds_f:
	goto l00000000000617A0
	// succ:  l00000000000617A0
l0000000000061794_ds_t:
	goto l00000000000617AC
	// succ:  l00000000000617AC
l00000000000617A0:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l00000000000617AC:
	Mem0[sp + 0x0000000000000080:word64] = r4
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
	Mem0[sp + 0x0000000000000040:word64] = r3
	Mem0[sp + 0x0000000000000018:word64] = r3
	Mem0[sp + 0x0000000000000088:word64] = r5
	Mem0[sp + 0x0000000000000020:word64] = r5
	r1 = Mem0[sp + 0x0000000000000020:word64]
	branch r1 != 0x0000000000000000 l00000000000617AC_ds_t
	// succ:  l00000000000617AC_ds_f l00000000000617AC_ds_t
l00000000000617AC_ds_f:
	goto l00000000000617D8
	// succ:  l00000000000617D8
l00000000000617AC_ds_t:
	goto l00000000000617DC
	// succ:  l00000000000617DC
l00000000000617D8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000617DC
l00000000000617DC:
	r1 = Mem0[sp + 0x0000000000000020:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000020:word64] = r1
	call runtime.pcdatavalue (retsize: 0;)
	r3 = Mem0[sp + 0x00000000000000C8:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000028:int32]
	r2 = r1
	r1 = r2
	Mem0[sp + 0x0000000000000030:word32] = (word32) r2
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 != r2 l00000000000617DC_ds_t
	// succ:  l00000000000617DC_ds_f l00000000000617DC_ds_t
l00000000000617DC_ds_f:
	goto l0000000000061820
	// succ:  l0000000000061820
l00000000000617DC_ds_t:
	goto l0000000000061828
	// succ:  l0000000000061828
l0000000000061820:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word32] = (word32) r1
	// succ:  l0000000000061828
l0000000000061828:
	r1 = Mem0[r3 + 0x0000000000000030:word64]
	r2 = Mem0[r3 + 0x0000000000000020:word64]
runtime.adjustframe_exit:


// runtime.adjustdefers
// Return size: 0
void runtime.adjustdefers()
runtime.adjustdefers_entry:
	// succ:  l0000000000061F78
l0000000000061F78:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000061F78_ds_t
	// succ:  l0000000000061F78_ds_f l0000000000061F78_ds_t
l0000000000061F78_ds_f:
	goto l0000000000061F88
	// succ:  l0000000000061F88
l0000000000061F78_ds_t:
	goto l0000000000061F9C
	// succ:  l0000000000061F9C
l0000000000061F88:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000061F78
	// succ:  l0000000000061F78
l0000000000061F9C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r2 = r2
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.tracebackdefers (retsize: 0;)
	r7 = Mem0[sp + 0x0000000000000030:word64]
	r1 = Mem0[sp + 0x0000000000000028:word64]
	r4 = Mem0[r1 + 0x0000000000000028:word64]
	branch r4 == 0x0000000000000000 l0000000000061F9C_ds_t
	// succ:  l0000000000061F9C_ds_f l0000000000061F9C_ds_t
l0000000000061F9C_ds_f:
	goto l0000000000061FE8
	// succ:  l0000000000061FE8
l0000000000061F9C_ds_t:
	goto l00000000000620F0
	// succ:  l00000000000620F0
l0000000000061FE8:
	branch r4 != 0x0000000000000000 l0000000000061FE8_ds_t
	// succ:  l0000000000061FE8_ds_f l0000000000061FE8_ds_t
l0000000000061FE8_ds_f:
	goto l0000000000061FF0
	// succ:  l0000000000061FF0
l0000000000061FE8_ds_t:
	goto l0000000000061FF4
	// succ:  l0000000000061FF4
l0000000000061FF0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000061FF4
l0000000000061FF4:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r6 = r1
	r5 = Mem0[r1:word64]
	r1 = Mem0[r7:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 != 0x0000000000000000 l0000000000061FF4_ds_t
	// succ:  l0000000000061FF4_ds_f l0000000000061FF4_ds_t
l0000000000061FF4_ds_f:
	goto l0000000000062014
	// succ:  l0000000000062014
l0000000000061FF4_ds_t:
	goto l000000000006203C
	// succ:  l000000000006203C
l0000000000062014:
	r1 = Mem0[r7 + 0x0000000000000008:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 == 0x0000000000000000 l0000000000062014_ds_t
	// succ:  l0000000000062014_ds_f l0000000000062014_ds_t
l0000000000062014_ds_f:
	goto l0000000000062024
	// succ:  l0000000000062024
l0000000000062014_ds_t:
	goto l000000000006203C
	// succ:  l000000000006203C
l0000000000062024:
	branch r6 != 0x0000000000000000 l0000000000062024_ds_t
	// succ:  l0000000000062024_ds_f l0000000000062024_ds_t
l0000000000062024_ds_f:
	goto l000000000006202C
	// succ:  l000000000006202C
l0000000000062024_ds_t:
	goto l0000000000062030
	// succ:  l0000000000062030
l000000000006202C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000062030
l0000000000062030:
	r2 = Mem0[r7 + 0x0000000000000010:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r6:word64] = r2
	// succ:  l000000000006203C
l000000000006203C:
	branch r4 != 0x0000000000000000 l000000000006203C_ds_t
	// succ:  l000000000006203C_ds_f l000000000006203C_ds_t
l000000000006203C_ds_f:
	goto l0000000000062044
	// succ:  l0000000000062044
l000000000006203C_ds_t:
	goto l0000000000062048
	// succ:  l0000000000062048
l0000000000062044:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000062048
l0000000000062048:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r6 = r1
	r5 = Mem0[r1:word64]
	r1 = Mem0[r7:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 != 0x0000000000000000 l0000000000062048_ds_t
	// succ:  l0000000000062048_ds_f l0000000000062048_ds_t
l0000000000062048_ds_f:
	goto l0000000000062068
	// succ:  l0000000000062068
l0000000000062048_ds_t:
	goto l0000000000062090
	// succ:  l0000000000062090
l0000000000062068:
	r1 = Mem0[r7 + 0x0000000000000008:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 == 0x0000000000000000 l0000000000062068_ds_t
	// succ:  l0000000000062068_ds_f l0000000000062068_ds_t
l0000000000062068_ds_f:
	goto l0000000000062078
	// succ:  l0000000000062078
l0000000000062068_ds_t:
	goto l0000000000062090
	// succ:  l0000000000062090
l0000000000062078:
	branch r6 != 0x0000000000000000 l0000000000062078_ds_t
	// succ:  l0000000000062078_ds_f l0000000000062078_ds_t
l0000000000062078_ds_f:
	goto l0000000000062080
	// succ:  l0000000000062080
l0000000000062078_ds_t:
	goto l0000000000062084
	// succ:  l0000000000062084
l0000000000062080:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000062084
l0000000000062084:
	r2 = Mem0[r7 + 0x0000000000000010:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r6:word64] = r2
	// succ:  l0000000000062090
l0000000000062090:
	branch r4 != 0x0000000000000000 l0000000000062090_ds_t
	// succ:  l0000000000062090_ds_f l0000000000062090_ds_t
l0000000000062090_ds_f:
	goto l0000000000062098
	// succ:  l0000000000062098
l0000000000062090_ds_t:
	goto l000000000006209C
	// succ:  l000000000006209C
l0000000000062098:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006209C
l000000000006209C:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r6 = r1
	r5 = Mem0[r1:word64]
	r1 = Mem0[r7:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 != 0x0000000000000000 l000000000006209C_ds_t
	// succ:  l000000000006209C_ds_f l000000000006209C_ds_t
l000000000006209C_ds_f:
	goto l00000000000620BC
	// succ:  l00000000000620BC
l000000000006209C_ds_t:
	goto l00000000000620E4
	// succ:  l00000000000620E4
l00000000000620BC:
	r1 = Mem0[r7 + 0x0000000000000008:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 == 0x0000000000000000 l00000000000620BC_ds_t
	// succ:  l00000000000620BC_ds_f l00000000000620BC_ds_t
l00000000000620BC_ds_f:
	goto l00000000000620CC
	// succ:  l00000000000620CC
l00000000000620BC_ds_t:
	goto l00000000000620E4
	// succ:  l00000000000620E4
l00000000000620CC:
	branch r6 != 0x0000000000000000 l00000000000620CC_ds_t
	// succ:  l00000000000620CC_ds_f l00000000000620CC_ds_t
l00000000000620CC_ds_f:
	goto l00000000000620D4
	// succ:  l00000000000620D4
l00000000000620CC_ds_t:
	goto l00000000000620D8
	// succ:  l00000000000620D8
l00000000000620D4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000620D8
l00000000000620D8:
	r2 = Mem0[r7 + 0x0000000000000010:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r6:word64] = r2
	// succ:  l00000000000620E4
l00000000000620E4:
	r4 = Mem0[r4 + 0x0000000000000028:word64]
	branch r4 != 0x0000000000000000 l00000000000620E4_ds_t
	// succ:  l00000000000620E4_ds_f l00000000000620E4_ds_t
l00000000000620E4_ds_f:
	goto l00000000000620F0
	// succ:  l00000000000620F0
l00000000000620E4_ds_t:
	goto l0000000000061FE8
	// succ:  l0000000000061FE8
l00000000000620F0:
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.adjustdefers_exit runtime.adjustdefers_exit
runtime.adjustdefers_exit:


// runtime.adjustsudogs
// Return size: 0
void runtime.adjustsudogs()
runtime.adjustsudogs_entry:
	// succ:  l0000000000062100
l0000000000062100:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000062100_ds_t
	// succ:  l0000000000062100_ds_f l0000000000062100_ds_t
l0000000000062100_ds_f:
	goto l0000000000062110
	// succ:  l0000000000062110
l0000000000062100_ds_t:
	goto l0000000000062124
	// succ:  l0000000000062124
l0000000000062110:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000062100
	// succ:  l0000000000062100
l0000000000062124:
	sp = sp + -24
	r7 = Mem0[sp + 0x0000000000000028:word64]
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r4 = Mem0[r1 + 0x0000000000000160:word64]
	branch r4 == 0x0000000000000000 l0000000000062124_ds_t
	// succ:  l0000000000062124_ds_f l0000000000062124_ds_t
l0000000000062124_ds_f:
	goto l000000000006213C
	// succ:  l000000000006213C
l0000000000062124_ds_t:
	goto l00000000000621F0
	// succ:  l00000000000621F0
l000000000006213C:
	branch r4 != 0x0000000000000000 l000000000006213C_ds_t
	// succ:  l000000000006213C_ds_f l000000000006213C_ds_t
l000000000006213C_ds_f:
	goto l0000000000062144
	// succ:  l0000000000062144
l000000000006213C_ds_t:
	goto l0000000000062148
	// succ:  l0000000000062148
l0000000000062144:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000062148
l0000000000062148:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r6 = r1
	r5 = Mem0[r1:word64]
	r1 = Mem0[r7:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 != 0x0000000000000000 l0000000000062148_ds_t
	// succ:  l0000000000062148_ds_f l0000000000062148_ds_t
l0000000000062148_ds_f:
	goto l0000000000062168
	// succ:  l0000000000062168
l0000000000062148_ds_t:
	goto l0000000000062190
	// succ:  l0000000000062190
l0000000000062168:
	r1 = Mem0[r7 + 0x0000000000000008:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 == 0x0000000000000000 l0000000000062168_ds_t
	// succ:  l0000000000062168_ds_f l0000000000062168_ds_t
l0000000000062168_ds_f:
	goto l0000000000062178
	// succ:  l0000000000062178
l0000000000062168_ds_t:
	goto l0000000000062190
	// succ:  l0000000000062190
l0000000000062178:
	branch r6 != 0x0000000000000000 l0000000000062178_ds_t
	// succ:  l0000000000062178_ds_f l0000000000062178_ds_t
l0000000000062178_ds_f:
	goto l0000000000062180
	// succ:  l0000000000062180
l0000000000062178_ds_t:
	goto l0000000000062184
	// succ:  l0000000000062184
l0000000000062180:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000062184
l0000000000062184:
	r2 = Mem0[r7 + 0x0000000000000010:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r6:word64] = r2
	// succ:  l0000000000062190
l0000000000062190:
	branch r4 != 0x0000000000000000 l0000000000062190_ds_t
	// succ:  l0000000000062190_ds_f l0000000000062190_ds_t
l0000000000062190_ds_f:
	goto l0000000000062198
	// succ:  l0000000000062198
l0000000000062190_ds_t:
	goto l000000000006219C
	// succ:  l000000000006219C
l0000000000062198:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006219C
l000000000006219C:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r6 = r1
	r5 = Mem0[r1:word64]
	r1 = Mem0[r7:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 != 0x0000000000000000 l000000000006219C_ds_t
	// succ:  l000000000006219C_ds_f l000000000006219C_ds_t
l000000000006219C_ds_f:
	goto l00000000000621BC
	// succ:  l00000000000621BC
l000000000006219C_ds_t:
	goto l00000000000621E4
	// succ:  l00000000000621E4
l00000000000621BC:
	r1 = Mem0[r7 + 0x0000000000000008:word64]
	r23 = (word64) (r5 <u r1)
	branch r23 == 0x0000000000000000 l00000000000621BC_ds_t
	// succ:  l00000000000621BC_ds_f l00000000000621BC_ds_t
l00000000000621BC_ds_f:
	goto l00000000000621CC
	// succ:  l00000000000621CC
l00000000000621BC_ds_t:
	goto l00000000000621E4
	// succ:  l00000000000621E4
l00000000000621CC:
	branch r6 != 0x0000000000000000 l00000000000621CC_ds_t
	// succ:  l00000000000621CC_ds_f l00000000000621CC_ds_t
l00000000000621CC_ds_f:
	goto l00000000000621D4
	// succ:  l00000000000621D4
l00000000000621CC_ds_t:
	goto l00000000000621D8
	// succ:  l00000000000621D8
l00000000000621D4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000621D8
l00000000000621D8:
	r2 = Mem0[r7 + 0x0000000000000010:word64]
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r6:word64] = r2
	// succ:  l00000000000621E4
l00000000000621E4:
	r4 = Mem0[r4 + 0x0000000000000038:word64]
	branch r4 != 0x0000000000000000 l00000000000621E4_ds_t
	// succ:  l00000000000621E4_ds_f l00000000000621E4_ds_t
l00000000000621E4_ds_f:
	goto l00000000000621F0
	// succ:  l00000000000621F0
l00000000000621E4_ds_t:
	goto l000000000006213C
	// succ:  l000000000006213C
l00000000000621F0:
	sp = sp + 24
	return
	sp = sp + 24
	return
	// succ:  runtime.adjustsudogs_exit runtime.adjustsudogs_exit
runtime.adjustsudogs_exit:


// runtime.adjuststkbar
// Return size: 0
void runtime.adjuststkbar()
runtime.adjuststkbar_entry:
	// succ:  l0000000000062200
l0000000000062200:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000062200_ds_t
	// succ:  l0000000000062200_ds_f l0000000000062200_ds_t
l0000000000062200_ds_f:
	goto l0000000000062210
	// succ:  l0000000000062210
l0000000000062200_ds_t:
	goto l0000000000062224
	// succ:  l0000000000062224
l0000000000062210:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000062200
	// succ:  l0000000000062200
l0000000000062224:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r8 = Mem0[sp + 0x0000000000000028:word64]
	r7 = Mem0[sp + 0x0000000000000020:word64]
	r4 = Mem0[r7 + 0x00000000000000A0:word64]
	r2 = Mem0[r7 + 0x0000000000000090:word64]
	r23 = (word64) (r4 < r2)
	branch r23 == 0x0000000000000000 l0000000000062224_ds_t
	// succ:  l0000000000062224_ds_f l0000000000062224_ds_t
l0000000000062224_ds_f:
	goto l0000000000062248
	// succ:  l0000000000062248
l0000000000062224_ds_t:
	goto l00000000000622D8
	// succ:  l00000000000622D8
l0000000000062248:
	r1 = Mem0[r7 + 0x0000000000000088:word64]
	r5 = Mem0[r7 + 0x0000000000000090:word64]
	r2 = Mem0[r7 + 0x0000000000000098:word64]
	r3 = r5
	r2 = r4
	r23 = (word64) (r4 <u r5)
	branch r23 != 0x0000000000000000 l0000000000062248_ds_t
	// succ:  l0000000000062248_ds_f l0000000000062248_ds_t
l0000000000062248_ds_f:
	goto l0000000000062268
	// succ:  l0000000000062268
l0000000000062248_ds_t:
	goto l0000000000062274
	// succ:  l0000000000062274
l0000000000062268:
	call runtime.panicindex (retsize: 0;)
l0000000000062274:
l00000000000622D8:
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.adjuststkbar_exit
runtime.adjuststkbar_exit:


// runtime.findsghi
// Return size: 0
void runtime.findsghi()
runtime.findsghi_entry:
	// succ:  l00000000000622E8
l00000000000622E8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000622E8_ds_t
	// succ:  l00000000000622E8_ds_f l00000000000622E8_ds_t
l00000000000622E8_ds_f:
	goto l00000000000622F8
	// succ:  l00000000000622F8
l00000000000622E8_ds_t:
	goto l000000000006230C
	// succ:  l000000000006230C
l00000000000622F8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000622E8
	// succ:  l00000000000622E8
l000000000006230C:
	r7 = Mem0[sp + 0x0000000000000010:word64]
	r6 = Mem0[sp + 0x0000000000000018:word64]
	r5 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r4 = Mem0[r1 + 0x0000000000000160:word64]
	branch r4 == 0x0000000000000000 l000000000006230C_ds_t
	// succ:  l000000000006230C_ds_f l000000000006230C_ds_t
l000000000006230C_ds_f:
	goto l0000000000062328
	// succ:  l0000000000062328
l000000000006230C_ds_t:
	goto l00000000000623A0
	// succ:  l00000000000623A0
l0000000000062328:
	r1 = Mem0[r4 + 0x0000000000000020:word64]
	r3 = Mem0[r4 + 0x0000000000000040:word64]
	r2 = (word64) Mem0[r3 + 0x0000000000000018:uint16]
	lo = r1 / r1
	hi = r1 % r1
	r23 = (word64) (r1 <u r7)
	branch r23 != 0x0000000000000000 l0000000000062328_ds_t
	// succ:  l0000000000062328_ds_f l0000000000062328_ds_t
l0000000000062328_ds_f:
	goto l0000000000062344
	// succ:  l0000000000062344
l0000000000062328_ds_t:
	goto l0000000000062360
	// succ:  l0000000000062360
l0000000000062344:
	r23 = (word64) (r1 <u r6)
	branch r23 == 0x0000000000000000 l0000000000062344_ds_t
	// succ:  l0000000000062344_ds_f l0000000000062344_ds_t
l0000000000062344_ds_f:
	goto l0000000000062350
	// succ:  l0000000000062350
l0000000000062344_ds_t:
	goto l0000000000062360
	// succ:  l0000000000062360
l0000000000062350:
	r23 = (word64) (r5 <u r1)
	branch r23 == 0x0000000000000000 l0000000000062350_ds_t
	// succ:  l0000000000062350_ds_f l0000000000062350_ds_t
l0000000000062350_ds_f:
	goto l000000000006235C
	// succ:  l000000000006235C
l0000000000062350_ds_t:
	goto l0000000000062360
	// succ:  l0000000000062360
l000000000006235C:
	r5 = r1
	// succ:  l0000000000062360
l0000000000062360:
	r3 = Mem0[r4 + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r3 / r3
	hi = r3 % r3
	r23 = (word64) (r3 <u r7)
	branch r23 != 0x0000000000000000 l0000000000062360_ds_t
	// succ:  l0000000000062360_ds_f l0000000000062360_ds_t
l0000000000062360_ds_f:
	goto l0000000000062378
	// succ:  l0000000000062378
l0000000000062360_ds_t:
	goto l0000000000062394
	// succ:  l0000000000062394
l0000000000062378:
	r23 = (word64) (r3 <u r6)
	branch r23 == 0x0000000000000000 l0000000000062378_ds_t
	// succ:  l0000000000062378_ds_f l0000000000062378_ds_t
l0000000000062378_ds_f:
	goto l0000000000062384
	// succ:  l0000000000062384
l0000000000062378_ds_t:
	goto l0000000000062394
	// succ:  l0000000000062394
l0000000000062384:
	r23 = (word64) (r5 <u r3)
	branch r23 == 0x0000000000000000 l0000000000062384_ds_t
	// succ:  l0000000000062384_ds_f l0000000000062384_ds_t
l0000000000062384_ds_f:
	goto l0000000000062390
	// succ:  l0000000000062390
l0000000000062384_ds_t:
	goto l0000000000062394
	// succ:  l0000000000062394
l0000000000062390:
	r5 = r3
	// succ:  l0000000000062394
l0000000000062394:
	r4 = Mem0[r4 + 0x0000000000000038:word64]
	branch r4 != 0x0000000000000000 l0000000000062394_ds_t
	// succ:  l0000000000062394_ds_f l0000000000062394_ds_t
l0000000000062394_ds_f:
	goto l00000000000623A0
	// succ:  l00000000000623A0
l0000000000062394_ds_t:
	goto l0000000000062328
	// succ:  l0000000000062328
l00000000000623A0:
	Mem0[sp + 0x0000000000000020:word64] = r5
	return
	Mem0[sp + 0x0000000000000020:word64] = r5
	return
	// succ:  runtime.findsghi_exit runtime.findsghi_exit
runtime.findsghi_exit:


// runtime.syncadjustsudogs
// Return size: 0
void runtime.syncadjustsudogs()
runtime.syncadjustsudogs_entry:
	// succ:  l00000000000623B0
l00000000000623B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000623B0_ds_t
	// succ:  l00000000000623B0_ds_f l00000000000623B0_ds_t
l00000000000623B0_ds_f:
	goto l00000000000623C0
	// succ:  l00000000000623C0
l00000000000623B0_ds_t:
	goto l00000000000623D4
	// succ:  l00000000000623D4
l00000000000623C0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000623B0
	// succ:  l00000000000623B0
l00000000000623D4:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r1 = Mem0[r1 + 0x0000000000000160:word64]
	branch r1 != 0x0000000000000000 l00000000000623D4_ds_t
	// succ:  l00000000000623D4_ds_f l00000000000623D4_ds_t
l00000000000623D4_ds_f:
	goto l00000000000623EC
	// succ:  l00000000000623EC
l00000000000623D4_ds_t:
	goto l0000000000062400
	// succ:  l0000000000062400
l00000000000623EC:
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.syncadjustsudogs_exit
l0000000000062400:
	r4 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r3 = Mem0[r1 + 0x0000000000000160:word64]
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l0000000000062400_ds_t
	// succ:  l0000000000062400_ds_f l0000000000062400_ds_t
l0000000000062400_ds_f:
	goto l0000000000062418
	// succ:  l0000000000062418
l0000000000062400_ds_t:
	goto l0000000000062470
	// succ:  l0000000000062470
l0000000000062418:
	r1 = Mem0[r3 + 0x0000000000000040:word64]
	branch r1 == r4 l0000000000062418_ds_t
	// succ:  l0000000000062418_ds_f l0000000000062418_ds_t
l0000000000062418_ds_f:
	goto l0000000000062424
	// succ:  l0000000000062424
l0000000000062418_ds_t:
	goto l000000000006245C
	// succ:  l000000000006245C
l0000000000062424:
	Mem0[sp + 0x0000000000000030:word64] = r3
	r2 = Mem0[r3 + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000062424_ds_t
	// succ:  l0000000000062424_ds_f l0000000000062424_ds_t
l0000000000062424_ds_f:
	goto l000000000006243C
	// succ:  l000000000006243C
l0000000000062424_ds_t:
	goto l0000000000062440
	// succ:  l0000000000062440
l000000000006243C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000062440
l0000000000062440:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000030:word64]
	// succ:  l000000000006245C
l000000000006245C:
	r4 = Mem0[r3 + 0x0000000000000040:word64]
	r3 = Mem0[r3 + 0x0000000000000038:word64]
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000006245C_ds_t
	// succ:  l000000000006245C_ds_f l000000000006245C_ds_t
l000000000006245C_ds_f:
	goto l0000000000062470
	// succ:  l0000000000062470
l000000000006245C_ds_t:
	goto l0000000000062418
	// succ:  l0000000000062418
l0000000000062470:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.adjustsudogs (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	r1 = Mem0[r4 + 0x0000000000000118:word64]
	branch r1 == 0x0000000000000000 l0000000000062470_ds_t
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.adjustsudogs (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	r1 = Mem0[r4 + 0x0000000000000118:word64]
	branch r1 == 0x0000000000000000 l0000000000062470_ds_t
	// succ:  l0000000000062470_ds_f l0000000000062470_ds_t l0000000000062470_ds_f l0000000000062470_ds_t
l0000000000062470_ds_f:
	goto l000000000006249C
	// succ:  l000000000006249C
l0000000000062470_ds_f:
	goto l000000000006249C
	// succ:  l000000000006249C
l0000000000062470_ds_t:
	goto l00000000000624D4
	// succ:  l00000000000624D4
l0000000000062470_ds_t:
	goto l00000000000624D4
	// succ:  l00000000000624D4
l000000000006249C:
	r3 = Mem0[r4 + 0x0000000000000008:word64]
	r2 = Mem0[sp + 0x0000000000000048:word64]
	r3 = Mem0[r4 + 0x0000000000000008:word64]
	r2 = Mem0[sp + 0x0000000000000048:word64]
l00000000000624D4:
	r4 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r3 = Mem0[r1 + 0x0000000000000160:word64]
	branch r3 == 0x0000000000000000 l00000000000624D4_ds_t
	// succ:  l00000000000624D4_ds_f l00000000000624D4_ds_t
l00000000000624D4_ds_f:
	goto l00000000000624E8
	// succ:  l00000000000624E8
l00000000000624D4_ds_t:
	goto l000000000006253C
	// succ:  l000000000006253C
l00000000000624E8:
	r1 = Mem0[r3 + 0x0000000000000040:word64]
	branch r1 == r4 l00000000000624E8_ds_t
	// succ:  l00000000000624E8_ds_f l00000000000624E8_ds_t
l00000000000624E8_ds_f:
	goto l00000000000624F4
	// succ:  l00000000000624F4
l00000000000624E8_ds_t:
	goto l000000000006252C
	// succ:  l000000000006252C
l00000000000624F4:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r2 = Mem0[r3 + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l00000000000624F4_ds_t
	// succ:  l00000000000624F4_ds_f l00000000000624F4_ds_t
l00000000000624F4_ds_f:
	goto l000000000006250C
	// succ:  l000000000006250C
l00000000000624F4_ds_t:
	goto l0000000000062510
	// succ:  l0000000000062510
l000000000006250C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000062510
l0000000000062510:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000028:word64]
	// succ:  l000000000006252C
l000000000006252C:
	r4 = Mem0[r3 + 0x0000000000000040:word64]
	r3 = Mem0[r3 + 0x0000000000000038:word64]
	branch r3 != 0x0000000000000000 l000000000006252C_ds_t
	// succ:  l000000000006252C_ds_f l000000000006252C_ds_t
l000000000006252C_ds_f:
	goto l000000000006253C
	// succ:  l000000000006253C
l000000000006252C_ds_t:
	goto l00000000000624E8
	// succ:  l00000000000624E8
l000000000006253C:
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.syncadjustsudogs_exit
runtime.syncadjustsudogs_exit:


// runtime.copystack
// Return size: 0
void runtime.copystack()
runtime.copystack_entry:
	// succ:  l0000000000062558
l0000000000062558:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -520
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000062558_ds_t
	// succ:  l0000000000062558_ds_f l0000000000062558_ds_t
l0000000000062558_ds_f:
	goto l000000000006256C
	// succ:  l000000000006256C
l0000000000062558_ds_t:
	goto l0000000000062580
	// succ:  l0000000000062580
l000000000006256C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000062558
	// succ:  l0000000000062558
l0000000000062580:
	sp = sp + -520
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000210:word64]
	r1 = Mem0[r1 + 0x0000000000000078:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000062580_ds_t
	// succ:  l0000000000062580_ds_f l0000000000062580_ds_t
l0000000000062580_ds_f:
	goto l000000000006259C
	// succ:  l000000000006259C
l0000000000062580_ds_t:
	goto l00000000000625BC
	// succ:  l00000000000625BC
l000000000006259C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000625BC:
	r1 = Mem0[sp + 0x0000000000000210:word64]
	branch r1 != 0x0000000000000000 l00000000000625BC_ds_t
	// succ:  l00000000000625BC_ds_f l00000000000625BC_ds_t
l00000000000625BC_ds_f:
	goto l00000000000625C8
	// succ:  l00000000000625C8
l00000000000625BC_ds_t:
	goto l00000000000625CC
	// succ:  l00000000000625CC
l00000000000625C8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000625CC
l00000000000625CC:
	r3 = Mem0[r1:word64]
	r2 = Mem0[r1 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000088:word64] = r2
	Mem0[sp + 0x0000000000000080:word64] = r3
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l00000000000625CC_ds_t
	// succ:  l00000000000625CC_ds_f l00000000000625CC_ds_t
l00000000000625CC_ds_f:
	goto l00000000000625E8
	// succ:  l00000000000625E8
l00000000000625CC_ds_t:
	goto l0000000000062608
	// succ:  l0000000000062608
l00000000000625E8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000062608:
	r1 = Mem0[sp + 0x0000000000000088:word64]
	r2 = Mem0[sp + 0x0000000000000210:word64]
	r2 = Mem0[r2 + 0x0000000000000040:word64]
runtime.copystack_exit:


// runtime.round2
// Return size: 0
void runtime.round2()
runtime.round2_entry:
	// succ:  l0000000000062AC8
l0000000000062AC8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000062AC8_ds_t
	// succ:  l0000000000062AC8_ds_f l0000000000062AC8_ds_t
l0000000000062AC8_ds_f:
	goto l0000000000062AD8
	// succ:  l0000000000062AD8
l0000000000062AC8_ds_t:
	goto l0000000000062AEC
	// succ:  l0000000000062AEC
l0000000000062AD8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000062AC8
	// succ:  l0000000000062AC8
l0000000000062AEC:
	r4 = (word64) Mem0[sp + 0x0000000000000008:int32]
	r1 = 0x0000000000000000
	r3 = 0x0000000000000000
runtime.round2_exit:


// runtime.newstack
// Return size: 0
void runtime.newstack()
runtime.newstack_entry:
	// succ:  l0000000000062B78
l0000000000062B78:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -376
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000062B78_ds_t
	// succ:  l0000000000062B78_ds_f l0000000000062B78_ds_t
l0000000000062B78_ds_f:
	goto l0000000000062B8C
	// succ:  l0000000000062B8C
l0000000000062B78_ds_t:
	goto l0000000000062BA0
	// succ:  l0000000000062BA0
l0000000000062B8C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000062B78
	// succ:  l0000000000062B78
l0000000000062BA0:
	sp = sp + -376
	Mem0[sp:word64] = ra
	r4 = r30
	Mem0[sp + 0x0000000000000088:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = Mem0[r2 + 0x0000000000000018:word64]
	r1 = Mem0[r2 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 != r2 l0000000000062BA0_ds_t
	// succ:  l0000000000062BA0_ds_f l0000000000062BA0_ds_t
l0000000000062BA0_ds_f:
	goto l0000000000062BC8
	// succ:  l0000000000062BC8
l0000000000062BA0_ds_t:
	goto l0000000000062BEC
	// succ:  l0000000000062BEC
l0000000000062BC8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000062BEC:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000018:word64]
	r3 = Mem0[r4 + 0x0000000000000030:word64]
	r2 = Mem0[r3 + 0x00000000000000A0:word64]
	branch r1 == r2 l0000000000062BEC_ds_t
	// succ:  l0000000000062BEC_ds_f l0000000000062BEC_ds_t
l0000000000062BEC_ds_f:
	goto l0000000000062C04
	// succ:  l0000000000062C04
l0000000000062BEC_ds_t:
	goto l0000000000062DEC
	// succ:  l0000000000062DEC
l0000000000062C04:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000080:word64] = r1
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	Mem0[sp + 0x00000000000000C0:word64] = r2
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A0:word64]
	Mem0[sp + 0x00000000000000C8:word64] = r1
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	Mem0[sp + 0x00000000000000B8:word64] = r1
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000050:word64]
	Mem0[sp + 0x00000000000000B0:word64] = r1
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000062DEC:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x00000000000000A0:word64]
	r1 = (word64) Mem0[r3 + 0x00000000000000ED:byte]
	branch r1 == 0x0000000000000000 l0000000000062DEC_ds_t
	// succ:  l0000000000062DEC_ds_f l0000000000062DEC_ds_t
l0000000000062DEC_ds_f:
	goto l0000000000062E00
	// succ:  l0000000000062E00
l0000000000062DEC_ds_t:
	goto l0000000000063140
	// succ:  l0000000000063140
l0000000000062E00:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x00000000000000A0:word64]
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	branch r2 != 0x0000000000000000 l0000000000062E00_ds_t
	// succ:  l0000000000062E00_ds_f l0000000000062E00_ds_t
l0000000000062E00_ds_f:
	goto l0000000000062E14
	// succ:  l0000000000062E14
l0000000000062E00_ds_t:
	goto l0000000000062E18
	// succ:  l0000000000062E18
l0000000000062E14:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000062E18
l0000000000062E18:
	r5 = Mem0[r2 + 0x0000000000000008:word64]
	r4 = Mem0[r2 + 0x0000000000000010:word64]
	r1 = Mem0[r2 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000118:word64] = r1
	r1 = Mem0[r2 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000120:word64] = r1
	r1 = Mem0[r2 + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000128:word64] = r1
	r6 = Mem0[r2 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000138:word64] = r1
	Mem0[r3 + 0x0000000000000078:word64] = r5
	Mem0[r3 + 0x0000000000000080:word64] = r4
	r2 = Mem0[r3 + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000080:word64] = r2
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000078:word64] = r2
	r2 = Mem0[r3 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000070:word64] = r2
	Mem0[sp + 0x0000000000000110:word64] = r4
	Mem0[sp + 0x0000000000000068:word64] = r4
	Mem0[sp + 0x0000000000000108:word64] = r5
	Mem0[sp + 0x0000000000000060:word64] = r5
	Mem0[sp + 0x0000000000000130:word64] = r6
	Mem0[sp + 0x0000000000000058:word64] = r6
	r2 = Mem0[r3 + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000050:word64] = r2
	r2 = Mem0[r3 + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000048:word64] = r2
	r2 = Mem0[r3 + 0x0000000000000068:word64]
	Mem0[sp + 0x0000000000000040:word64] = r2
	r1 = r3
	Mem0[sp + 0x0000000000000098:word64] = r3
	r2 = Mem0[r3 + 0x0000000000000058:word64]
	Mem0[sp + 0x00000000000000A8:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000063140:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x00000000000000A0:word64]
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	branch r2 != 0x0000000000000000 l0000000000063140_ds_t
	// succ:  l0000000000063140_ds_f l0000000000063140_ds_t
l0000000000063140_ds_f:
	goto l0000000000063154
	// succ:  l0000000000063154
l0000000000063140_ds_t:
	goto l0000000000063158
	// succ:  l0000000000063158
l0000000000063154:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000063158
l0000000000063158:
	r1 = Mem0[r2 + 0x0000000000000008:word64]
	Mem0[sp + 0x00000000000000D0:word64] = r1
	r1 = Mem0[r2 + 0x0000000000000010:word64]
	Mem0[sp + 0x00000000000000D8:word64] = r1
	r1 = Mem0[r2 + 0x0000000000000018:word64]
	Mem0[sp + 0x00000000000000E0:word64] = r1
	r1 = Mem0[r2 + 0x0000000000000020:word64]
	Mem0[sp + 0x00000000000000E8:word64] = r1
	r1 = Mem0[r2 + 0x0000000000000028:word64]
	Mem0[sp + 0x00000000000000F0:word64] = r1
	r1 = Mem0[r2 + 0x0000000000000030:word64]
	Mem0[sp + 0x00000000000000F8:word64] = r1
	r1 = Mem0[r2 + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000100:word64] = r1
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	Mem0[r2 + 0x0000000000000010:word64] = 0x0000000000000000
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	Mem0[r2 + 0x0000000000000030:word64] = 0x0000000000000000
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	Mem0[r2 + 0x0000000000000008:word64] = 0x0000000000000000
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	Mem0[r2 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000090:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000063158_ds_t
	// succ:  l0000000000063158_ds_f l0000000000063158_ds_t
l0000000000063158_ds_f:
	goto l00000000000631C4
	// succ:  l00000000000631C4
l0000000000063158_ds_t:
	goto l00000000000631C8
	// succ:  l00000000000631C8
l00000000000631C4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000631C8
l00000000000631C8:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.rewindmorestack (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000090:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l00000000000631C8_ds_t
	// succ:  l00000000000631C8_ds_f l00000000000631C8_ds_t
l00000000000631C8_ds_f:
	goto l00000000000631F4
	// succ:  l00000000000631F4
l00000000000631C8_ds_t:
	goto l00000000000631F8
	// succ:  l00000000000631F8
l00000000000631F4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000631F8
l00000000000631F8:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Loaduintptr (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000090:word64]
	r1 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l00000000000631F8_ds_t
	// succ:  l00000000000631F8_ds_f l00000000000631F8_ds_t
l00000000000631F8_ds_f:
	goto l0000000000063224
	// succ:  l0000000000063224
l00000000000631F8_ds_t:
	goto l0000000000063C0C
	// succ:  l0000000000063C0C
l0000000000063224:
	Mem0[sp + 0x0000000000000028:byte] = (byte) 0x0000000000000000
	goto l0000000000063228
	// succ:  l0000000000063228
l0000000000063224_ds_f:
	goto l0000000000063234
	// succ:  l0000000000063234
l0000000000063224_ds_t:
	goto l00000000000632BC
	// succ:  l00000000000632BC
l0000000000063228:
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 == 0x0000000000000000 l0000000000063224_ds_t
	goto l0000000000063224_ds_f
	// succ:  l0000000000063224_ds_f l0000000000063224_ds_t
l0000000000063234:
	r1 = Mem0[sp + 0x0000000000000088:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000063234_ds_t
	// succ:  l0000000000063234_ds_f l0000000000063234_ds_t
l0000000000063234_ds_f:
	goto l0000000000063254
	// succ:  l0000000000063254
l0000000000063234_ds_t:
	goto l0000000000063BB8
	// succ:  l0000000000063BB8
l0000000000063254:
	r1 = Mem0[sp + 0x0000000000000088:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000C4:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000063254_ds_t
	// succ:  l0000000000063254_ds_f l0000000000063254_ds_t
l0000000000063254_ds_f:
	goto l0000000000063274
	// succ:  l0000000000063274
l0000000000063254_ds_t:
	goto l0000000000063BB8
	// succ:  l0000000000063BB8
l0000000000063274:
	r1 = Mem0[sp + 0x0000000000000088:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000D8:word64]
	branch r1 != 0x0000000000000000 l0000000000063274_ds_t
	// succ:  l0000000000063274_ds_f l0000000000063274_ds_t
l0000000000063274_ds_f:
	goto l0000000000063288
	// succ:  l0000000000063288
l0000000000063274_ds_t:
	goto l0000000000063BB8
	// succ:  l0000000000063BB8
l0000000000063288:
	r1 = Mem0[sp + 0x0000000000000088:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r2 = Mem0[r2 + 0x00000000000000B0:word64]
	r1 = (word64) Mem0[r2 + 0x000000000000000C:uint32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l00000000000632BC:
	r1 = Mem0[r4:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l00000000000632BC_ds_t
	// succ:  l00000000000632BC_ds_f l00000000000632BC_ds_t
l00000000000632BC_ds_f:
	goto l00000000000632CC
	// succ:  l00000000000632CC
l00000000000632BC_ds_t:
	goto l00000000000632F0
	// succ:  l00000000000632F0
l00000000000632CC:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000632F0:
	r3 = Mem0[r4 + 0x0000000000000040:word64]
	r1 = Mem0[r4:word64]
	r23 = (word64) (r3 <u r1)
	branch r23 != 0x0000000000000000 l00000000000632F0_ds_t
	// succ:  l00000000000632F0_ds_f l00000000000632F0_ds_t
l00000000000632F0_ds_f:
	goto l0000000000063304
	// succ:  l0000000000063304
l00000000000632F0_ds_t:
	goto l0000000000063904
	// succ:  l0000000000063904
l0000000000063304:
	r1 = Mem0[r4:word64]
	Mem0[sp + 0x0000000000000030:word64] = r3
	r2 = r3
	r23 = (word64) (r3 <u r1)
	branch r23 == 0x0000000000000000 l0000000000063304_ds_t
	// succ:  l0000000000063304_ds_f l0000000000063304_ds_t
l0000000000063304_ds_f:
	goto l000000000006331C
	// succ:  l000000000006331C
l0000000000063304_ds_t:
	goto l000000000006349C
	// succ:  l000000000006349C
l000000000006331C:
	r1 = r4
	Mem0[sp + 0x0000000000000008:word64] = r4
	call runtime.readgstatus (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
l000000000006349C:
	r1 = Mem0[r4 + 0x0000000000000058:word64]
	branch r1 == 0x0000000000000000 l000000000006349C_ds_t
	// succ:  l000000000006349C_ds_f l000000000006349C_ds_t
l000000000006349C_ds_f:
	goto l00000000000634A8
	// succ:  l00000000000634A8
l000000000006349C_ds_t:
	goto l00000000000634F4
	// succ:  l00000000000634F4
l00000000000634A8:
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l00000000000634A8_ds_t
	// succ:  l00000000000634A8_ds_f l00000000000634A8_ds_t
l00000000000634A8_ds_f:
	goto l00000000000634B8
	// succ:  l00000000000634B8
l00000000000634A8_ds_t:
	goto l00000000000634BC
	// succ:  l00000000000634BC
l00000000000634B8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000634BC
l00000000000634BC:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r4
	r2 = Mem0[r4 + 0x0000000000000058:word64]
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr_nostore (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000090:word64]
	// succ:  l00000000000634F4
l00000000000634F4:
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 == 0x0000000000000000 l00000000000634F4_ds_t
	// succ:  l00000000000634F4_ds_f l00000000000634F4_ds_t
l00000000000634F4_ds_f:
	goto l0000000000063500
	// succ:  l0000000000063500
l00000000000634F4_ds_t:
	goto l0000000000063794
	// succ:  l0000000000063794
l0000000000063500:
	r1 = Mem0[sp + 0x0000000000000088:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = Mem0[r2:word64]
	r2 = r4
	branch r1 != r4 l0000000000063500_ds_t
	// succ:  l0000000000063500_ds_f l0000000000063500_ds_t
l0000000000063500_ds_f:
	goto l0000000000063518
	// succ:  l0000000000063518
l0000000000063500_ds_t:
	goto l000000000006353C
	// succ:  l000000000006353C
l0000000000063518:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000006353C:
	r1 = Mem0[sp + 0x0000000000000088:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000006353C_ds_t
	// succ:  l000000000006353C_ds_f l000000000006353C_ds_t
l000000000006353C_ds_f:
	goto l0000000000063554
	// succ:  l0000000000063554
l000000000006353C_ds_t:
	goto l0000000000063598
	// succ:  l0000000000063598
l0000000000063554:
	r1 = Mem0[sp + 0x0000000000000088:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000063554_ds_t
	// succ:  l0000000000063554_ds_f l0000000000063554_ds_t
l0000000000063554_ds_f:
	goto l0000000000063574
	// succ:  l0000000000063574
l0000000000063554_ds_t:
	goto l0000000000063598
	// succ:  l0000000000063598
l0000000000063574:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000063598:
	Mem0[sp + 0x0000000000000008:word64] = r4
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
l0000000000063794:
	r3 = Mem0[r4 + 0x0000000000000038:word64]
l0000000000063904:
	Mem0[sp + 0x0000000000000030:word64] = r3
	Mem0[sp + 0x0000000000000040:word64] = r3
	r2 = Mem0[r4:word64]
	Mem0[sp + 0x0000000000000048:word64] = r2
	r2 = Mem0[r4 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000050:word64] = r2
	r1 = Mem0[sp + 0x00000000000000D8:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
	r1 = Mem0[sp + 0x00000000000000D0:word64]
	Mem0[sp + 0x0000000000000060:word64] = r1
	r1 = Mem0[sp + 0x00000000000000F8:word64]
	Mem0[sp + 0x0000000000000068:word64] = r1
	r2 = Mem0[r4 + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000070:word64] = r2
	r2 = Mem0[r4 + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000078:word64] = r2
	r2 = Mem0[r4 + 0x0000000000000068:word64]
	Mem0[sp + 0x0000000000000080:word64] = r2
	r1 = r4
	r2 = Mem0[r4 + 0x0000000000000058:word64]
	Mem0[sp + 0x00000000000000A8:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000063BB8:
	branch r4 != 0x0000000000000000 l0000000000063BB8_ds_t
	// succ:  l0000000000063BB8_ds_f l0000000000063BB8_ds_t
l0000000000063BB8_ds_f:
	goto l0000000000063BC0
	// succ:  l0000000000063BC0
l0000000000063BB8_ds_t:
	goto l0000000000063BC4
	// succ:  l0000000000063BC4
l0000000000063BC0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000063BC4
l0000000000063BC4:
	r2 = Mem0[r4:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4 + 0x0000000000000010:word64] = r2
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000063BC4_ds_t
	// succ:  l0000000000063BC4_ds_f l0000000000063BC4_ds_t
l0000000000063BC4_ds_f:
	goto l0000000000063BE4
	// succ:  l0000000000063BE4
l0000000000063BC4_ds_t:
	goto l0000000000063BE8
	// succ:  l0000000000063BE8
l0000000000063BE4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000063BE8
l0000000000063BE8:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.gogo (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000090:word64]
	goto l00000000000632BC
	// succ:  l00000000000632BC
l0000000000063C0C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	goto l0000000000063228
	// succ:  l0000000000063228
runtime.newstack_exit:


// runtime.nilfunc
// Return size: 0
void runtime.nilfunc()
runtime.nilfunc_entry:
	// succ:  l0000000000063C20
l0000000000063C20:
	sp = fp
	branch 0x0000000000000000 != 0x0000000000000000 l0000000000063C20_ds_t
	// succ:  l0000000000063C20_ds_f l0000000000063C20_ds_t
l0000000000063C20_ds_f:
	goto l0000000000063C28
	// succ:  l0000000000063C28
l0000000000063C20_ds_t:
	goto l0000000000063C2C
	// succ:  l0000000000063C2C
l0000000000063C28:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000063C2C
l0000000000063C2C:
	r2 = 0x0000000000000000
	Mem0[r0:byte] = (byte) r2
	return
	// succ:  runtime.nilfunc_exit
runtime.nilfunc_exit:


// runtime.gostartcallfn
// Return size: 0
void runtime.gostartcallfn()
runtime.gostartcallfn_entry:
	// succ:  l0000000000063C40
l0000000000063C40:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000063C40_ds_t
	// succ:  l0000000000063C40_ds_f l0000000000063C40_ds_t
l0000000000063C40_ds_f:
	goto l0000000000063C50
	// succ:  l0000000000063C50
l0000000000063C40_ds_t:
	goto l0000000000063C64
	// succ:  l0000000000063C64
l0000000000063C50:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000063C40
	// succ:  l0000000000063C40
l0000000000063C64:
	sp = sp + -64
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	r4 = Mem0[sp + 0x0000000000000050:word64]
	branch r4 == 0x0000000000000000 l0000000000063C64_ds_t
	// succ:  l0000000000063C64_ds_f l0000000000063C64_ds_t
l0000000000063C64_ds_f:
	goto l0000000000063C80
	// succ:  l0000000000063C80
l0000000000063C64_ds_t:
	goto l0000000000063CB4
	// succ:  l0000000000063CB4
l0000000000063C80:
	r2 = Mem0[r4:word64]
	r3 = r2
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	call runtime.gostartcall (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 64
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gostartcallfn_exit
l0000000000063CB4:
	r3 = 0x00000000000A0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	r2 = 0x0000000000090000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000030:word64] = r2
	Mem0[sp + 0x0000000000000020:word64] = r2
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	lo = r1 / sp
	hi = r1 % sp
runtime.gostartcallfn_exit:


// runtime.shrinkstack
// Return size: 0
void runtime.shrinkstack()
runtime.shrinkstack_entry:
	// succ:  l0000000000063D00
l0000000000063D00:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000063D00_ds_t
	// succ:  l0000000000063D00_ds_f l0000000000063D00_ds_t
l0000000000063D00_ds_f:
	goto l0000000000063D10
	// succ:  l0000000000063D10
l0000000000063D00_ds_t:
	goto l0000000000063D24
	// succ:  l0000000000063D24
l0000000000063D10:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000063D00
	// succ:  l0000000000063D00
l0000000000063D24:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.readgstatus (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.shrinkstack_exit:


// runtime.freeStackSpans
// Return size: 0
void runtime.freeStackSpans()
runtime.freeStackSpans_entry:
	// succ:  l0000000000063FD8
l0000000000063FD8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000063FD8_ds_t
	// succ:  l0000000000063FD8_ds_f l0000000000063FD8_ds_t
l0000000000063FD8_ds_f:
	goto l0000000000063FE8
	// succ:  l0000000000063FE8
l0000000000063FD8_ds_t:
	goto l0000000000063FFC
	// succ:  l0000000000063FFC
l0000000000063FE8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000063FD8
	// succ:  l0000000000063FD8
l0000000000063FFC:
	sp = sp + -88
	Mem0[sp:word64] = ra
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r4 = 0x0000000000000000
runtime.freeStackSpans_exit:


// runtime.morestackc
// Return size: 0
void runtime.morestackc()
runtime.morestackc_entry:
	// succ:  l0000000000064280
l0000000000064280:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.systemstack (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.morestackc_exit
runtime.morestackc_exit:


// runtime.concatstrings
// Return size: 0
void runtime.concatstrings()
runtime.concatstrings_entry:
	// succ:  l00000000000642B0
l00000000000642B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -312
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000642B0_ds_t
	// succ:  l00000000000642B0_ds_f l00000000000642B0_ds_t
l00000000000642B0_ds_f:
	goto l00000000000642C4
	// succ:  l00000000000642C4
l00000000000642B0_ds_t:
	goto l00000000000642D8
	// succ:  l00000000000642D8
l00000000000642C4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000642B0
	// succ:  l00000000000642B0
l00000000000642D8:
	sp = sp + -312
	Mem0[sp:word64] = ra
	Mem0[sp + 0x00000000000000A8:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000B0:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000160:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000168:word64] = 0x0000000000000000
	r6 = 0x0000000000000000
	r4 = 0x0000000000000000
	r9 = 0x0000000000000000
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	r5 = Mem0[sp + 0x0000000000000148:word64]
	r2 = Mem0[sp + 0x0000000000000150:word64]
	r1 = Mem0[sp + 0x0000000000000158:word64]
	Mem0[sp + 0x0000000000000130:word64] = r1
	r3 = 0x0000000000000000
	Mem0[sp + 0x0000000000000128:word64] = r2
	Mem0[sp + 0x0000000000000060:word64] = r2
	Mem0[sp + 0x0000000000000120:word64] = r5
	r7 = r5
	r2 = Mem0[sp + 0x0000000000000060:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l00000000000642D8_ds_t
	// succ:  l00000000000642D8_ds_f l00000000000642D8_ds_t
l00000000000642D8_ds_f:
	goto l0000000000064334
	// succ:  l0000000000064334
l00000000000642D8_ds_t:
	goto l0000000000064394
	// succ:  l0000000000064394
l0000000000064334:
	Mem0[sp + 0x0000000000000080:word64] = r7
	branch r7 != 0x0000000000000000 l0000000000064334_ds_t
	// succ:  l0000000000064334_ds_f l0000000000064334_ds_t
l0000000000064334_ds_f:
	goto l0000000000064340
	// succ:  l0000000000064340
l0000000000064334_ds_t:
	goto l0000000000064344
	// succ:  l0000000000064344
l0000000000064340:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000064344
l0000000000064344:
	r8 = Mem0[r7:word64]
	r5 = Mem0[r7 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000068:word64] = r3
	Mem0[sp + 0x0000000000000050:word64] = r3
	Mem0[sp + 0x00000000000000C8:word64] = r8
	Mem0[sp + 0x0000000000000088:word64] = r8
	Mem0[sp + 0x00000000000000D0:word64] = r5
	Mem0[sp + 0x0000000000000090:word64] = r5
	branch r5 != 0x0000000000000000 l0000000000064344_ds_t
	// succ:  l0000000000064344_ds_f l0000000000064344_ds_t
l0000000000064344_ds_f:
	goto l000000000006436C
	// succ:  l000000000006436C
l0000000000064344_ds_t:
	goto l0000000000064654
	// succ:  l0000000000064654
l000000000006436C:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r7
	hi = r1 % r7
	r7 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r3 = r1
	r2 = Mem0[sp + 0x0000000000000060:word64]
	r23 = (word64) (r3 < r2)
	branch r23 != 0x0000000000000000 l000000000006436C_ds_t
	// succ:  l000000000006436C_ds_f l000000000006436C_ds_t
l000000000006436C_ds_f:
	goto l0000000000064394
	// succ:  l0000000000064394
l000000000006436C_ds_t:
	goto l0000000000064334
	// succ:  l0000000000064334
l0000000000064394:
	branch r9 != 0x0000000000000000 l0000000000064394_ds_t
	branch r9 != 0x0000000000000000 l0000000000064394_ds_t
	// succ:  l0000000000064394_ds_f l0000000000064394_ds_t l0000000000064394_ds_f l0000000000064394_ds_t
l0000000000064394_ds_f:
	goto l000000000006439C
	// succ:  l000000000006439C
l0000000000064394_ds_f:
	goto l000000000006439C
	// succ:  l000000000006439C
l0000000000064394_ds_t:
	goto l00000000000643B4
	// succ:  l00000000000643B4
l0000000000064394_ds_t:
	goto l00000000000643B4
	// succ:  l00000000000643B4
l000000000006439C:
	Mem0[sp + 0x0000000000000160:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000168:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 312
	call r4 (retsize: 0;)
	return
	Mem0[sp + 0x0000000000000160:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000168:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 312
	call r4 (retsize: 0;)
	return
	// succ:  runtime.concatstrings_exit runtime.concatstrings_exit
l00000000000643B4:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r9 != r2 l00000000000643B4_ds_t
	// succ:  l00000000000643B4_ds_f l00000000000643B4_ds_t
l00000000000643B4_ds_f:
	goto l00000000000643C0
	// succ:  l00000000000643C0
l00000000000643B4_ds_t:
	goto l0000000000064464
	// succ:  l0000000000064464
l00000000000643C0:
	r1 = Mem0[sp + 0x0000000000000140:word64]
	branch r1 != 0x0000000000000000 l00000000000643C0_ds_t
	// succ:  l00000000000643C0_ds_f l00000000000643C0_ds_t
l00000000000643C0_ds_f:
	goto l00000000000643CC
	// succ:  l00000000000643CC
l00000000000643C0_ds_t:
	goto l00000000000645FC
	// succ:  l00000000000645FC
l00000000000643CC:
	r1 = Mem0[sp + 0x0000000000000148:word64]
	r3 = Mem0[sp + 0x0000000000000150:word64]
	r2 = r6
	r23 = (word64) (r6 <u r3)
	branch r23 != 0x0000000000000000 l00000000000643CC_ds_t
	// succ:  l00000000000643CC_ds_f l00000000000643CC_ds_t
l00000000000643CC_ds_f:
	goto l00000000000643E4
	// succ:  l00000000000643E4
l00000000000643CC_ds_t:
	goto l00000000000643F0
	// succ:  l00000000000643F0
l00000000000643E4:
	call runtime.panicindex (retsize: 0;)
l00000000000643F0:
l0000000000064464:
	r1 = Mem0[sp + 0x0000000000000140:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r4
	Mem0[sp + 0x0000000000000010:word64] = r4
	call runtime.rawstringtmp (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x00000000000000B8:word64] = r1
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x00000000000000C0:word64] = r1
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x00000000000000D8:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x00000000000000E0:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x00000000000000E8:word64] = r1
	r6 = 0x0000000000000000
	r3 = Mem0[sp + 0x0000000000000148:word64]
	r2 = Mem0[sp + 0x0000000000000150:word64]
	r1 = Mem0[sp + 0x0000000000000158:word64]
	Mem0[sp + 0x0000000000000130:word64] = r1
	r5 = 0x0000000000000000
	Mem0[sp + 0x0000000000000128:word64] = r2
	Mem0[sp + 0x0000000000000060:word64] = r2
	Mem0[sp + 0x0000000000000120:word64] = r3
	r2 = Mem0[sp + 0x0000000000000060:word64]
	r23 = (word64) (r5 < r2)
	branch r23 == 0x0000000000000000 l0000000000064464_ds_t
	// succ:  l0000000000064464_ds_f l0000000000064464_ds_t
l0000000000064464_ds_f:
	goto l00000000000644D8
	// succ:  l00000000000644D8
l0000000000064464_ds_t:
	goto l00000000000645C8
	// succ:  l00000000000645C8
l00000000000644D8:
	Mem0[sp + 0x0000000000000080:word64] = r3
	branch r3 != 0x0000000000000000 l00000000000644D8_ds_t
	// succ:  l00000000000644D8_ds_f l00000000000644D8_ds_t
l00000000000644D8_ds_f:
	goto l00000000000644E4
	// succ:  l00000000000644E4
l00000000000644D8_ds_t:
	goto l00000000000644E8
	// succ:  l00000000000644E8
l00000000000644E4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000644E8
l00000000000644E8:
	r4 = Mem0[r3:word64]
	r8 = Mem0[r3 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000068:word64] = r5
	r9 = r4
	Mem0[sp + 0x0000000000000048:word64] = r6
	r2 = Mem0[sp + 0x00000000000000E0:word64]
	r3 = Mem0[sp + 0x00000000000000E8:word64]
	r1 = r6
	r23 = (word64) (r2 <u r6)
	branch r23 != 0x0000000000000000 l00000000000644E8_ds_t
	// succ:  l00000000000644E8_ds_f l00000000000644E8_ds_t
l00000000000644E8_ds_f:
	goto l0000000000064514
	// succ:  l0000000000064514
l00000000000644E8_ds_t:
	goto l00000000000645E8
	// succ:  l00000000000645E8
l0000000000064514:
l00000000000645C8:
	r1 = Mem0[sp + 0x00000000000000B8:word64]
	Mem0[sp + 0x0000000000000160:word64] = r1
	r1 = Mem0[sp + 0x00000000000000C0:word64]
	Mem0[sp + 0x0000000000000168:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 312
	call r4 (retsize: 0;)
	return
	// succ:  runtime.concatstrings_exit
l00000000000645E8:
	call runtime.panicslice (retsize: 0;)
l00000000000645FC:
	r1 = Mem0[sp + 0x0000000000000148:word64]
	r3 = Mem0[sp + 0x0000000000000150:word64]
	r2 = r6
	r23 = (word64) (r6 <u r3)
	branch r23 != 0x0000000000000000 l00000000000645FC_ds_t
	// succ:  l00000000000645FC_ds_f l00000000000645FC_ds_t
l00000000000645FC_ds_f:
	goto l0000000000064614
	// succ:  l0000000000064614
l00000000000645FC_ds_t:
	goto l0000000000064620
	// succ:  l0000000000064620
l0000000000064614:
	call runtime.panicindex (retsize: 0;)
l0000000000064620:
l0000000000064654:
	Mem0[sp + 0x0000000000000040:word64] = r5
	lo = r1 / r4
	hi = r1 % r4
	Mem0[sp + 0x0000000000000048:word64] = r4
	r2 = r4
	r23 = (word64) (r1 < r4)
	branch r23 == 0x0000000000000000 l0000000000064654_ds_t
	// succ:  l0000000000064654_ds_f l0000000000064654_ds_t
l0000000000064654_ds_f:
	goto l0000000000064670
	// succ:  l0000000000064670
l0000000000064654_ds_t:
	goto l00000000000646A4
	// succ:  l00000000000646A4
l0000000000064670:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000646A4:
	lo = r1 / r4
	hi = r1 % r4
	r4 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r9
	hi = r1 % r9
	r9 = r1
	Mem0[sp + 0x0000000000000058:word64] = r1
	r6 = Mem0[sp + 0x0000000000000050:word64]
	goto l000000000006436C
	// succ:  l000000000006436C
runtime.concatstrings_exit:


// runtime.concatstring2
// Return size: 0
void runtime.concatstring2()
runtime.concatstring2_entry:
	// succ:  l00000000000646C8
l00000000000646C8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000646C8_ds_t
	// succ:  l00000000000646C8_ds_f l00000000000646C8_ds_t
l00000000000646C8_ds_f:
	goto l00000000000646D8
	// succ:  l00000000000646D8
l00000000000646C8_ds_t:
	goto l00000000000646EC
	// succ:  l00000000000646EC
l00000000000646D8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000646C8
	// succ:  l00000000000646C8
l00000000000646EC:
	sp = sp + -80
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000080:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000088:word64] = 0x0000000000000000
	lo = r2 / sp
	hi = r2 % sp
	branch r2 != 0x0000000000000000 l00000000000646EC_ds_t
	// succ:  l00000000000646EC_ds_f l00000000000646EC_ds_t
l00000000000646EC_ds_f:
	goto l0000000000064708
	// succ:  l0000000000064708
l00000000000646EC_ds_t:
	goto l000000000006470C
	// succ:  l000000000006470C
l0000000000064708:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006470C
l000000000006470C:
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r2
	Mem0[sp + 0x0000000000000040:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000048:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.concatstrings (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000028:word64]
	r2 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000080:word64] = r3
	Mem0[sp + 0x0000000000000088:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.concatstring2_exit
runtime.concatstring2_exit:


// runtime.concatstring4
// Return size: 0
void runtime.concatstring4()
runtime.concatstring4_entry:
	// succ:  l0000000000064760
l0000000000064760:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000064760_ds_t
	// succ:  l0000000000064760_ds_f l0000000000064760_ds_t
l0000000000064760_ds_f:
	goto l0000000000064770
	// succ:  l0000000000064770
l0000000000064760_ds_t:
	goto l0000000000064784
	// succ:  l0000000000064784
l0000000000064770:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000064760
	// succ:  l0000000000064760
l0000000000064784:
	sp = sp + -80
	Mem0[sp:word64] = ra
	Mem0[sp + 0x00000000000000A0:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000A8:word64] = 0x0000000000000000
	lo = r2 / sp
	hi = r2 % sp
	branch r2 != 0x0000000000000000 l0000000000064784_ds_t
	// succ:  l0000000000064784_ds_f l0000000000064784_ds_t
l0000000000064784_ds_f:
	goto l00000000000647A0
	// succ:  l00000000000647A0
l0000000000064784_ds_t:
	goto l00000000000647A4
	// succ:  l00000000000647A4
l00000000000647A0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000647A4
l00000000000647A4:
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r2
	Mem0[sp + 0x0000000000000040:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000048:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.concatstrings (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000028:word64]
	r2 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x00000000000000A0:word64] = r3
	Mem0[sp + 0x00000000000000A8:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.concatstring4_exit
runtime.concatstring4_exit:


// runtime.slicebytetostring
// Return size: 0
void runtime.slicebytetostring()
runtime.slicebytetostring_entry:
	// succ:  l00000000000647F8
l00000000000647F8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -152
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000647F8_ds_t
	// succ:  l00000000000647F8_ds_f l00000000000647F8_ds_t
l00000000000647F8_ds_f:
	goto l000000000006480C
	// succ:  l000000000006480C
l00000000000647F8_ds_t:
	goto l0000000000064820
	// succ:  l0000000000064820
l000000000006480C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000647F8
	// succ:  l00000000000647F8
l0000000000064820:
	sp = sp + -152
	Mem0[sp:word64] = ra
	Mem0[sp + 0x00000000000000C0:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000C8:word64] = 0x0000000000000000
	r3 = Mem0[sp + 0x00000000000000B0:word64]
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000064820_ds_t
	// succ:  l0000000000064820_ds_f l0000000000064820_ds_t
l0000000000064820_ds_f:
	goto l0000000000064840
	// succ:  l0000000000064840
l0000000000064820_ds_t:
	goto l0000000000064858
	// succ:  l0000000000064858
l0000000000064840:
	Mem0[sp + 0x00000000000000C0:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000C8:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 152
	call r4 (retsize: 0;)
	return
	// succ:  runtime.slicebytetostring_exit
l0000000000064858:
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.rawstringtmp (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r6 = Mem0[sp + 0x0000000000000028:word64]
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000050:word64] = r6
	Mem0[sp + 0x0000000000000058:word64] = r2
	Mem0[sp + 0x0000000000000060:word64] = r3
	Mem0[sp + 0x0000000000000090:word64] = r3
	r5 = Mem0[sp + 0x00000000000000A8:word64]
	r4 = Mem0[sp + 0x00000000000000B0:word64]
	r1 = Mem0[sp + 0x00000000000000B8:word64]
	Mem0[sp + 0x0000000000000078:word64] = r1
	Mem0[sp + 0x0000000000000088:word64] = r2
	r3 = r2
	Mem0[sp + 0x0000000000000070:word64] = r4
	r23 = (word64) (r4 < r2)
	branch r23 == 0x0000000000000000 l0000000000064858_ds_t
	// succ:  l0000000000064858_ds_f l0000000000064858_ds_t
l0000000000064858_ds_f:
	goto l00000000000648C4
	// succ:  l00000000000648C4
l0000000000064858_ds_t:
	goto l00000000000648C8
	// succ:  l00000000000648C8
l00000000000648C4:
	r3 = r4
	// succ:  l00000000000648C8
l00000000000648C8:
	r2 = r3
	Mem0[sp + 0x0000000000000080:word64] = r6
	Mem0[sp + 0x0000000000000008:word64] = r6
	Mem0[sp + 0x0000000000000068:word64] = r5
	Mem0[sp + 0x0000000000000010:word64] = r5
	r1 = r3
	Mem0[sp + 0x0000000000000018:word64] = r3
	call runtime.memmove (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x00000000000000C0:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x00000000000000C8:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 152
	call r4 (retsize: 0;)
	return
	// succ:  runtime.slicebytetostring_exit
runtime.slicebytetostring_exit:


// runtime.rawstringtmp
// Return size: 0
void runtime.rawstringtmp()
runtime.rawstringtmp_entry:
	// succ:  l0000000000064910
l0000000000064910:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000064910_ds_t
	// succ:  l0000000000064910_ds_f l0000000000064910_ds_t
l0000000000064910_ds_f:
	goto l0000000000064920
	// succ:  l0000000000064920
l0000000000064910_ds_t:
	goto l0000000000064934
	// succ:  l0000000000064934
l0000000000064920:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000064910
	// succ:  l0000000000064910
l0000000000064934:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000060:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000068:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000070:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	r2 = 0x0000000000000000
	branch r4 == 0x0000000000000000 l0000000000064934_ds_t
	// succ:  l0000000000064934_ds_f l0000000000064934_ds_t
l0000000000064934_ds_f:
	goto l0000000000064964
	// succ:  l0000000000064964
l0000000000064934_ds_t:
	goto l00000000000649FC
	// succ:  l00000000000649FC
l0000000000064964:
l00000000000649FC:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.rawstring (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000050:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000060:word64] = r1
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000068:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000070:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.rawstringtmp_exit
runtime.rawstringtmp_exit:


// runtime.slicebytetostringtmp
// Return size: 0
void runtime.slicebytetostringtmp()
runtime.slicebytetostringtmp_entry:
	// succ:  l0000000000064A48
l0000000000064A48:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000064A48_ds_t
	// succ:  l0000000000064A48_ds_f l0000000000064A48_ds_t
l0000000000064A48_ds_f:
	goto l0000000000064A58
	// succ:  l0000000000064A58
l0000000000064A48_ds_t:
	goto l0000000000064A6C
	// succ:  l0000000000064A6C
l0000000000064A58:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000064A48
	// succ:  l0000000000064A48
l0000000000064A6C:
	sp = sp + -40
	lo = r1 / sp
	hi = r1 % sp
	branch r1 != 0x0000000000000000 l0000000000064A6C_ds_t
	// succ:  l0000000000064A6C_ds_f l0000000000064A6C_ds_t
l0000000000064A6C_ds_f:
	goto l0000000000064A7C
	// succ:  l0000000000064A7C
l0000000000064A6C_ds_t:
	goto l0000000000064A80
	// succ:  l0000000000064A80
l0000000000064A7C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000064A80
l0000000000064A80:
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000048:word64] = r2
	r2 = Mem0[r1 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000050:word64] = r2
	sp = sp + 40
	return
	// succ:  runtime.slicebytetostringtmp_exit
runtime.slicebytetostringtmp_exit:


// runtime.rawstring
// Return size: 0
void runtime.rawstring()
runtime.rawstring_entry:
	// succ:  l0000000000064AA0
l0000000000064AA0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000064AA0_ds_t
	// succ:  l0000000000064AA0_ds_f l0000000000064AA0_ds_t
l0000000000064AA0_ds_f:
	goto l0000000000064AB0
	// succ:  l0000000000064AB0
l0000000000064AA0_ds_t:
	goto l0000000000064AC4
	// succ:  l0000000000064AC4
l0000000000064AB0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000064AA0
	// succ:  l0000000000064AA0
l0000000000064AC4:
	sp = sp + -72
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000060:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000068:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000070:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000078:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000068:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000070:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000078:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000060:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	call runtime.mallocgc (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000050:word64]
	r6 = Mem0[sp + 0x0000000000000020:word64]
	lo = r1 / sp
	hi = r1 % sp
	branch r1 != 0x0000000000000000 l0000000000064AC4_ds_t
	// succ:  l0000000000064AC4_ds_f l0000000000064AC4_ds_t
l0000000000064AC4_ds_f:
	goto l0000000000064B24
	// succ:  l0000000000064B24
l0000000000064AC4_ds_t:
	goto l0000000000064B28
	// succ:  l0000000000064B28
l0000000000064B24:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000064B28
l0000000000064B28:
	r2 = r6
	Mem0[sp + 0x0000000000000028:word64] = r6
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000064B28_ds_t
	// succ:  l0000000000064B28_ds_f l0000000000064B28_ds_t
l0000000000064B28_ds_f:
	goto l0000000000064B48
	// succ:  l0000000000064B48
l0000000000064B28_ds_t:
	goto l0000000000064C3C
	// succ:  l0000000000064C3C
l0000000000064B48:
	Mem0[r1:word64] = r2
	goto l0000000000064B4C
	// succ:  l0000000000064B4C
l0000000000064B48_ds_f:
	goto l0000000000064B60
	// succ:  l0000000000064B60
l0000000000064B48_ds_t:
	goto l0000000000064B64
	// succ:  l0000000000064B64
l0000000000064B4C:
	lo = r1 / sp
	hi = r1 % sp
	Mem0[r1 + 0x0000000000000008:word64] = r5
	lo = r1 / sp
	hi = r1 % sp
	branch r1 != 0x0000000000000000 l0000000000064B48_ds_t
	goto l0000000000064B48_ds_f
	// succ:  l0000000000064B48_ds_f l0000000000064B48_ds_t
l0000000000064B60:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000064B64
l0000000000064B64:
	Mem0[sp + 0x0000000000000038:word64] = r5
	Mem0[r1 + 0x0000000000000008:word64] = r5
	Mem0[sp + 0x0000000000000040:word64] = r5
	Mem0[r1 + 0x0000000000000010:word64] = r5
	r2 = r6
	Mem0[sp + 0x0000000000000030:word64] = r6
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000064B64_ds_t
	// succ:  l0000000000064B64_ds_f l0000000000064B64_ds_t
l0000000000064B64_ds_f:
	goto l0000000000064B94
	// succ:  l0000000000064B94
l0000000000064B64_ds_t:
	goto l0000000000064C1C
	// succ:  l0000000000064C1C
l0000000000064B94:
	Mem0[r1:word64] = r2
	goto l0000000000064B98
	// succ:  l0000000000064B98
l0000000000064B94_ds_f:
	goto l0000000000064BB4
	// succ:  l0000000000064BB4
l0000000000064B94_ds_t:
	goto l0000000000064C0C
	// succ:  l0000000000064C0C
l0000000000064B98:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000000048:word64]
	r2 = r3
	r23 = (word64) (r3 <u r5)
	branch r23 == 0x0000000000000000 l0000000000064B94_ds_t
	goto l0000000000064B94_ds_f
	// succ:  l0000000000064B94_ds_f l0000000000064B94_ds_t
l0000000000064BB4:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = r5
	Mem0[sp + 0x0000000000000018:word64] = r5
	call runtime/internal/atomic.Casuintptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000050:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l0000000000064BB4_ds_t
	// succ:  l0000000000064BB4_ds_f l0000000000064BB4_ds_t
l0000000000064BB4_ds_f:
	goto l0000000000064BF0
	// succ:  l0000000000064BF0
l0000000000064BB4_ds_t:
	goto l0000000000064C0C
	// succ:  l0000000000064C0C
l0000000000064BF0:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000000048:word64]
	r2 = r3
	r23 = (word64) (r3 <u r5)
	branch r23 != 0x0000000000000000 l0000000000064BF0_ds_t
	// succ:  l0000000000064BF0_ds_f l0000000000064BF0_ds_t
l0000000000064BF0_ds_f:
	goto l0000000000064C0C
	// succ:  l0000000000064C0C
l0000000000064BF0_ds_t:
	goto l0000000000064BB4
	// succ:  l0000000000064BB4
l0000000000064C0C:
	r4 = Mem0[sp:word64]
	sp = sp + 72
	call r4 (retsize: 0;)
	return
	// succ:  runtime.rawstring_exit
l0000000000064C1C:
	r3 = r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r6
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000050:word64]
	goto l0000000000064B98
	// succ:  l0000000000064B98
l0000000000064C3C:
	r3 = r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r6
	call runtime.writebarrierptr (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000028:word64]
	r5 = Mem0[sp + 0x0000000000000050:word64]
	goto l0000000000064B4C
	// succ:  l0000000000064B4C
runtime.rawstring_exit:


// runtime.gostring
// Return size: 0
void runtime.gostring()
runtime.gostring_entry:
	// succ:  l0000000000064C60
l0000000000064C60:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000064C60_ds_t
	// succ:  l0000000000064C60_ds_f l0000000000064C60_ds_t
l0000000000064C60_ds_f:
	goto l0000000000064C70
	// succ:  l0000000000064C70
l0000000000064C60_ds_t:
	goto l0000000000064C84
	// succ:  l0000000000064C84
l0000000000064C70:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000064C60
	// succ:  l0000000000064C60
l0000000000064C84:
	sp = sp + -104
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000078:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000080:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000070:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.findnull (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000064C84_ds_t
	// succ:  l0000000000064C84_ds_f l0000000000064C84_ds_t
l0000000000064C84_ds_f:
	goto l0000000000064CB4
	// succ:  l0000000000064CB4
l0000000000064C84_ds_t:
	goto l0000000000064CCC
	// succ:  l0000000000064CCC
l0000000000064CB4:
	Mem0[sp + 0x0000000000000078:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000080:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 104
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gostring_exit
l0000000000064CCC:
	r1 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.rawstring (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r3 = Mem0[sp + 0x0000000000000028:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000060:word64] = r1
	r1 = r2
	Mem0[sp + 0x0000000000000050:word64] = r2
	Mem0[sp + 0x0000000000000058:word64] = r3
	r2 = r3
	r3 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r2)
	branch r23 != 0x0000000000000000 l0000000000064CCC_ds_t
	// succ:  l0000000000064CCC_ds_f l0000000000064CCC_ds_t
l0000000000064CCC_ds_f:
	goto l0000000000064D20
	// succ:  l0000000000064D20
l0000000000064CCC_ds_t:
	goto l0000000000064D2C
	// succ:  l0000000000064D2C
l0000000000064D20:
	call runtime.panicindex (retsize: 0;)
l0000000000064D2C:
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000070:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memmove (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000078:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000080:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 104
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gostring_exit
runtime.gostring_exit:


// runtime.index
// Return size: 0
void runtime.index()
runtime.index_entry:
	// succ:  l0000000000064D68
l0000000000064D68:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000064D68_ds_t
	// succ:  l0000000000064D68_ds_f l0000000000064D68_ds_t
l0000000000064D68_ds_f:
	goto l0000000000064D78
	// succ:  l0000000000064D78
l0000000000064D68_ds_t:
	goto l0000000000064D8C
	// succ:  l0000000000064D8C
l0000000000064D78:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000064D68
	// succ:  l0000000000064D68
l0000000000064D8C:
	sp = sp + -104
	Mem0[sp:word64] = ra
	r12 = Mem0[sp + 0x0000000000000070:word64]
	r11 = Mem0[sp + 0x0000000000000080:word64]
	r10 = Mem0[sp + 0x0000000000000088:word64]
	r7 = Mem0[sp + 0x0000000000000078:word64]
	branch r10 != 0x0000000000000000 l0000000000064D8C_ds_t
	// succ:  l0000000000064D8C_ds_f l0000000000064D8C_ds_t
l0000000000064D8C_ds_f:
	goto l0000000000064DAC
	// succ:  l0000000000064DAC
l0000000000064D8C_ds_t:
	goto l0000000000064DC0
	// succ:  l0000000000064DC0
l0000000000064DAC:
	Mem0[sp + 0x0000000000000090:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 104
	call r4 (retsize: 0;)
	return
	// succ:  runtime.index_exit
l0000000000064DC0:
	r5 = 0x0000000000000000
	r23 = (word64) (r5 < r7)
	branch r23 == 0x0000000000000000 l0000000000064DC0_ds_t
	// succ:  l0000000000064DC0_ds_f l0000000000064DC0_ds_t
l0000000000064DC0_ds_f:
	goto l0000000000064DD0
	// succ:  l0000000000064DD0
l0000000000064DC0_ds_t:
	goto l0000000000064F44
	// succ:  l0000000000064F44
l0000000000064DD0:
	r1 = r12
	r3 = r7
	r2 = r5
	r23 = (word64) (r5 <u r7)
	branch r23 != 0x0000000000000000 l0000000000064DD0_ds_t
	// succ:  l0000000000064DD0_ds_f l0000000000064DD0_ds_t
l0000000000064DD0_ds_f:
	goto l0000000000064DE8
	// succ:  l0000000000064DE8
l0000000000064DD0_ds_t:
	goto l0000000000064DF4
	// succ:  l0000000000064DF4
l0000000000064DE8:
	call runtime.panicindex (retsize: 0;)
l0000000000064DF4:
	lo = r1 / r12
	hi = r1 % r12
	r1 = (word64) Mem0[r1:byte]
	r2 = r11
	r3 = r10
	r4 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r10)
	branch r23 != 0x0000000000000000 l0000000000064DF4_ds_t
	// succ:  l0000000000064DF4_ds_f l0000000000064DF4_ds_t
l0000000000064DF4_ds_f:
	goto l0000000000064E14
	// succ:  l0000000000064E14
l0000000000064DF4_ds_t:
	goto l0000000000064E20
	// succ:  l0000000000064E20
l0000000000064E14:
	call runtime.panicindex (retsize: 0;)
l0000000000064E20:
	r2 = (word64) Mem0[r11:byte]
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000064E20_ds_t
	// succ:  l0000000000064E20_ds_f l0000000000064E20_ds_t
l0000000000064E20_ds_f:
	goto l0000000000064E34
	// succ:  l0000000000064E34
l0000000000064E20_ds_t:
	goto l0000000000064F2C
	// succ:  l0000000000064F2C
l0000000000064E34:
	Mem0[sp + 0x0000000000000030:word64] = r5
	r1 = r5
	r2 = r7
	r23 = (word64) (r7 <u r5)
	branch r23 != 0x0000000000000000 l0000000000064E34_ds_t
	// succ:  l0000000000064E34_ds_f l0000000000064E34_ds_t
l0000000000064E34_ds_f:
	goto l0000000000064E4C
	// succ:  l0000000000064E4C
l0000000000064E34_ds_t:
	goto l0000000000064F7C
	// succ:  l0000000000064F7C
l0000000000064E4C:
l0000000000064F2C:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r5
	hi = r1 % r5
	r5 = r1
	r23 = (word64) (r5 < r7)
	branch r23 != 0x0000000000000000 l0000000000064F2C_ds_t
	// succ:  l0000000000064F2C_ds_f l0000000000064F2C_ds_t
l0000000000064F2C_ds_f:
	goto l0000000000064F44
	// succ:  l0000000000064F44
l0000000000064F2C_ds_t:
	goto l0000000000064DD0
	// succ:  l0000000000064DD0
l0000000000064F44:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000090:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 104
	call r4 (retsize: 0;)
	return
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000090:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 104
	call r4 (retsize: 0;)
	return
	// succ:  runtime.index_exit runtime.index_exit
l0000000000064F7C:
	call runtime.panicslice (retsize: 0;)
runtime.index_exit:


// runtime.contains
// Return size: 0
void runtime.contains()
runtime.contains_entry:
	// succ:  l0000000000064F90
l0000000000064F90:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000064F90_ds_t
	// succ:  l0000000000064F90_ds_f l0000000000064F90_ds_t
l0000000000064F90_ds_f:
	goto l0000000000064FA0
	// succ:  l0000000000064FA0
l0000000000064F90_ds_t:
	goto l0000000000064FB4
	// succ:  l0000000000064FB4
l0000000000064FA0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000064F90
	// succ:  l0000000000064F90
l0000000000064FB4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	call runtime.index (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	r23 = (word64) (r1 < 0x0000000000000000)
	branch r23 == 0x0000000000000000 l0000000000064FB4_ds_t
	// succ:  l0000000000064FB4_ds_f l0000000000064FB4_ds_t
l0000000000064FB4_ds_f:
	goto l0000000000064FF8
	// succ:  l0000000000064FF8
l0000000000064FB4_ds_t:
	goto l000000000006500C
	// succ:  l000000000006500C
l0000000000064FF8:
	Mem0[sp + 0x0000000000000058:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.contains_exit
l000000000006500C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000058:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.contains_exit
runtime.contains_exit:


// runtime.atoi
// Return size: 0
void runtime.atoi()
runtime.atoi_entry:
	// succ:  l0000000000065028
l0000000000065028:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000065028_ds_t
	// succ:  l0000000000065028_ds_f l0000000000065028_ds_t
l0000000000065028_ds_f:
	goto l0000000000065038
	// succ:  l0000000000065038
l0000000000065028_ds_t:
	goto l000000000006504C
	// succ:  l000000000006504C
l0000000000065038:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000065028
	// succ:  l0000000000065028
l000000000006504C:
	sp = sp + -8
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000010:word64]
	r5 = Mem0[sp + 0x0000000000000018:word64]
	r4 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 < r5)
	branch r23 == 0x0000000000000000 l000000000006504C_ds_t
	// succ:  l000000000006504C_ds_f l000000000006504C_ds_t
l000000000006504C_ds_f:
	goto l000000000006506C
	// succ:  l000000000006506C
l000000000006504C_ds_t:
	goto l0000000000065174
	// succ:  l0000000000065174
l000000000006506C:
	r1 = r6
	r2 = r5
	r3 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r5)
	branch r23 != 0x0000000000000000 l000000000006506C_ds_t
	// succ:  l000000000006506C_ds_f l000000000006506C_ds_t
l000000000006506C_ds_f:
	goto l0000000000065084
	// succ:  l0000000000065084
l000000000006506C_ds_t:
	goto l0000000000065090
	// succ:  l0000000000065090
l0000000000065084:
	call runtime.panicindex (retsize: 0;)
l0000000000065090:
	r1 = (word64) Mem0[r6:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r23 = (word64) (r1 <u r2)
	branch r23 != 0x0000000000000000 l0000000000065090_ds_t
	// succ:  l0000000000065090_ds_f l0000000000065090_ds_t
l0000000000065090_ds_f:
	goto l00000000000650B0
	// succ:  l00000000000650B0
l0000000000065090_ds_t:
	goto l0000000000065174
	// succ:  l0000000000065174
l00000000000650B0:
	r1 = r6
	r2 = r5
	r3 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r5)
	branch r23 != 0x0000000000000000 l00000000000650B0_ds_t
	// succ:  l00000000000650B0_ds_f l00000000000650B0_ds_t
l00000000000650B0_ds_f:
	goto l00000000000650C8
	// succ:  l00000000000650C8
l00000000000650B0_ds_t:
	goto l00000000000650D4
	// succ:  l00000000000650D4
l00000000000650C8:
	call runtime.panicindex (retsize: 0;)
l00000000000650D4:
	r1 = (word64) Mem0[r6:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l00000000000650D4_ds_t
	// succ:  l00000000000650D4_ds_f l00000000000650D4_ds_t
l00000000000650D4_ds_f:
	goto l00000000000650F4
	// succ:  l00000000000650F4
l00000000000650D4_ds_t:
	goto l0000000000065174
	// succ:  l0000000000065174
l00000000000650F4:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l0000000000065174:
	Mem0[sp + 0x0000000000000020:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.atoi_exit
runtime.atoi_exit:


// runtime.findnull
// Return size: 0
void runtime.findnull()
runtime.findnull_entry:
	// succ:  l00000000000651A0
l00000000000651A0:
	sp = fp
	sp = sp + -8
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000010:word64]
	branch r3 != 0x0000000000000000 l00000000000651A0_ds_t
	// succ:  l00000000000651A0_ds_f l00000000000651A0_ds_t
l00000000000651A0_ds_f:
	goto l00000000000651B4
	// succ:  l00000000000651B4
l00000000000651A0_ds_t:
	goto l00000000000651C8
	// succ:  l00000000000651C8
l00000000000651B4:
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.findnull_exit
l00000000000651C8:
	r5 = r3
	r4 = 0x0000000000000000
	r1 = r5
	branch r5 != 0x0000000000000000 l00000000000651C8_ds_t
	// succ:  l00000000000651C8_ds_f l00000000000651C8_ds_t
l00000000000651C8_ds_f:
	goto l00000000000651DC
	// succ:  l00000000000651DC
l00000000000651C8_ds_t:
	goto l00000000000651E0
	// succ:  l00000000000651E0
l00000000000651DC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000651E0
l00000000000651E0:
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000001188:word64]
	r2 = r4
	r23 = (word64) (r4 <u r3)
	branch r23 != 0x0000000000000000 l00000000000651E0_ds_t
	// succ:  l00000000000651E0_ds_f l00000000000651E0_ds_t
l00000000000651E0_ds_f:
	goto l00000000000651FC
	// succ:  l00000000000651FC
l00000000000651E0_ds_t:
	goto l0000000000065208
	// succ:  l0000000000065208
l00000000000651FC:
	call runtime.panicindex (retsize: 0;)
l0000000000065208:
	lo = r1 / r5
	hi = r1 % r5
	r1 = (word64) Mem0[r1:byte]
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l0000000000065208_ds_t
	// succ:  l0000000000065208_ds_f l0000000000065208_ds_t
l0000000000065208_ds_f:
	goto l0000000000065224
	// succ:  l0000000000065224
l0000000000065208_ds_t:
	goto l0000000000065238
	// succ:  l0000000000065238
l0000000000065224:
l0000000000065238:
	Mem0[sp + 0x0000000000000018:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.findnull_exit
runtime.findnull_exit:


// runtime.gostringnocopy
// Return size: 0
void runtime.gostringnocopy()
runtime.gostringnocopy_entry:
	// succ:  l0000000000065250
l0000000000065250:
	sp = fp
	sp = sp + -72
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000060:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.findnull (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000028:word64] = r1
	Mem0[sp + 0x0000000000000030:word64] = r2
	lo = r1 / sp
	hi = r1 % sp
	branch r1 != 0x0000000000000000 l0000000000065250_ds_t
	// succ:  l0000000000065250_ds_f l0000000000065250_ds_t
l0000000000065250_ds_f:
	goto l0000000000065294
	// succ:  l0000000000065294
l0000000000065250_ds_t:
	goto l0000000000065298
	// succ:  l0000000000065298
l0000000000065294:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000065298
l0000000000065298:
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000038:word64] = r2
	r4 = Mem0[r1 + 0x0000000000000008:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000000048:word64]
	r23 = (word64) (r3 <u r4)
	branch r23 == 0x0000000000000000 l0000000000065298_ds_t
	// succ:  l0000000000065298_ds_f l0000000000065298_ds_t
l0000000000065298_ds_f:
	goto l00000000000652BC
	// succ:  l00000000000652BC
l0000000000065298_ds_t:
	goto l0000000000065318
	// succ:  l0000000000065318
l00000000000652BC:
	Mem0[sp + 0x0000000000000040:word64] = r4
	r2 = r4
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	call runtime/internal/atomic.Casuintptr (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l00000000000652BC_ds_t
	// succ:  l00000000000652BC_ds_f l00000000000652BC_ds_t
l00000000000652BC_ds_f:
	goto l0000000000065300
	// succ:  l0000000000065300
l00000000000652BC_ds_t:
	goto l0000000000065318
	// succ:  l0000000000065318
l0000000000065300:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000000048:word64]
	r23 = (word64) (r3 <u r4)
	branch r23 != 0x0000000000000000 l0000000000065300_ds_t
	// succ:  l0000000000065300_ds_f l0000000000065300_ds_t
l0000000000065300_ds_f:
	goto l0000000000065318
	// succ:  l0000000000065318
l0000000000065300_ds_t:
	goto l00000000000652BC
	// succ:  l00000000000652BC
l0000000000065318:
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
	Mem0[sp + 0x0000000000000060:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 72
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gostringnocopy_exit
runtime.gostringnocopy_exit:


// runtime.badsystemstack
// Return size: 0
void runtime.badsystemstack()
runtime.badsystemstack_entry:
	// succ:  l0000000000065338
l0000000000065338:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000065338_ds_t
	// succ:  l0000000000065338_ds_f l0000000000065338_ds_t
l0000000000065338_ds_f:
	goto l0000000000065348
	// succ:  l0000000000065348
l0000000000065338_ds_t:
	goto l000000000006535C
	// succ:  l000000000006535C
l0000000000065348:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000065338
	// succ:  l0000000000065338
l000000000006535C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.badsystemstack_exit:


// runtime.unixnanotime
// Return size: 0
void runtime.unixnanotime()
runtime.unixnanotime_entry:
	// succ:  l0000000000065398
l0000000000065398:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000065398_ds_t
	// succ:  l0000000000065398_ds_f l0000000000065398_ds_t
l0000000000065398_ds_f:
	goto l00000000000653A8
	// succ:  l00000000000653A8
l0000000000065398_ds_t:
	goto l00000000000653BC
	// succ:  l00000000000653BC
l00000000000653A8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000065398
	// succ:  l0000000000065398
l00000000000653BC:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	call time.now (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000008:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:int32]
	r3 = r1
	r1 = r2
	r2 = 0x000000003B9A0000
	r2 = r2 | 0x000000000000CA00
runtime.unixnanotime_exit:


// runtime.moduledataverify
// Return size: 0
void runtime.moduledataverify()
runtime.moduledataverify_entry:
	// succ:  l0000000000065410
l0000000000065410:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000065410_ds_t
	// succ:  l0000000000065410_ds_f l0000000000065410_ds_t
l0000000000065410_ds_f:
	goto l0000000000065420
	// succ:  l0000000000065420
l0000000000065410_ds_t:
	goto l0000000000065434
	// succ:  l0000000000065434
l0000000000065420:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000065410
	// succ:  l0000000000065410
l0000000000065434:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r3 = 0x00000000000D0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l0000000000065434_ds_t
	// succ:  l0000000000065434_ds_f l0000000000065434_ds_t
l0000000000065434_ds_f:
	goto l0000000000065454
	// succ:  l0000000000065454
l0000000000065434_ds_t:
	goto l000000000006547C
	// succ:  l000000000006547C
l0000000000065454:
	r1 = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.moduledataverify1 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	r3 = Mem0[r1 + 0x0000000000000158:word64]
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000065454_ds_t
	// succ:  l0000000000065454_ds_f l0000000000065454_ds_t
l0000000000065454_ds_f:
	goto l000000000006547C
	// succ:  l000000000006547C
l0000000000065454_ds_t:
	goto l0000000000065454
	// succ:  l0000000000065454
l000000000006547C:
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.moduledataverify_exit
runtime.moduledataverify_exit:


// runtime.moduledataverify1
// Return size: 0
void runtime.moduledataverify1()
runtime.moduledataverify1_entry:
	// succ:  l0000000000065490
l0000000000065490:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -624
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000065490_ds_t
	// succ:  l0000000000065490_ds_f l0000000000065490_ds_t
l0000000000065490_ds_f:
	goto l00000000000654A4
	// succ:  l00000000000654A4
l0000000000065490_ds_t:
	goto l00000000000654B8
	// succ:  l00000000000654B8
l00000000000654A4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000065490
	// succ:  l0000000000065490
l00000000000654B8:
	sp = sp + -624
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000278:word64]
	branch r6 != 0x0000000000000000 l00000000000654B8_ds_t
	// succ:  l00000000000654B8_ds_f l00000000000654B8_ds_t
l00000000000654B8_ds_f:
	goto l00000000000654CC
	// succ:  l00000000000654CC
l00000000000654B8_ds_t:
	goto l00000000000654D0
	// succ:  l00000000000654D0
l00000000000654CC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000654D0
l00000000000654D0:
	r3 = Mem0[r6:word64]
	r4 = Mem0[r6:word64]
	r1 = (word64) Mem0[r4:uint32]
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x0000000000001160:word64]
runtime.moduledataverify1_exit:


// runtime.findmoduledatap
// Return size: 0
void runtime.findmoduledatap()
runtime.findmoduledatap_entry:
	// succ:  l0000000000066200
l0000000000066200:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000066200_ds_t
	// succ:  l0000000000066200_ds_f l0000000000066200_ds_t
l0000000000066200_ds_f:
	goto l0000000000066210
	// succ:  l0000000000066210
l0000000000066200_ds_t:
	goto l0000000000066224
	// succ:  l0000000000066224
l0000000000066210:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000066200
	// succ:  l0000000000066200
l0000000000066224:
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r3 = 0x00000000000D0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	branch r3 == 0x0000000000000000 l0000000000066224_ds_t
	// succ:  l0000000000066224_ds_f l0000000000066224_ds_t
l0000000000066224_ds_f:
	goto l000000000006623C
	// succ:  l000000000006623C
l0000000000066224_ds_t:
	goto l0000000000066274
	// succ:  l0000000000066274
l000000000006623C:
	r1 = Mem0[r3 + 0x0000000000000050:word64]
	r23 = (word64) (r4 <u r1)
	branch r23 != 0x0000000000000000 l000000000006623C_ds_t
	// succ:  l000000000006623C_ds_f l000000000006623C_ds_t
l000000000006623C_ds_f:
	goto l000000000006624C
	// succ:  l000000000006624C
l000000000006623C_ds_t:
	goto l0000000000066268
	// succ:  l0000000000066268
l000000000006624C:
	r1 = Mem0[r3 + 0x0000000000000058:word64]
	r23 = (word64) (r4 <u r1)
	branch r23 == 0x0000000000000000 l000000000006624C_ds_t
	// succ:  l000000000006624C_ds_f l000000000006624C_ds_t
l000000000006624C_ds_f:
	goto l000000000006625C
	// succ:  l000000000006625C
l000000000006624C_ds_t:
	goto l0000000000066268
	// succ:  l0000000000066268
l000000000006625C:
	Mem0[sp + 0x0000000000000010:word64] = r3
	return
	// succ:  runtime.findmoduledatap_exit
l0000000000066268:
	r3 = Mem0[r3 + 0x0000000000000158:word64]
	branch r3 != 0x0000000000000000 l0000000000066268_ds_t
	// succ:  l0000000000066268_ds_f l0000000000066268_ds_t
l0000000000066268_ds_f:
	goto l0000000000066274
	// succ:  l0000000000066274
l0000000000066268_ds_t:
	goto l000000000006623C
	// succ:  l000000000006623C
l0000000000066274:
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	return
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	return
	// succ:  runtime.findmoduledatap_exit runtime.findmoduledatap_exit
runtime.findmoduledatap_exit:


// runtime.findfunc
// Return size: 0
void runtime.findfunc()
runtime.findfunc_entry:
	// succ:  l0000000000066280
l0000000000066280:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000066280_ds_t
	// succ:  l0000000000066280_ds_f l0000000000066280_ds_t
l0000000000066280_ds_f:
	goto l0000000000066290
	// succ:  l0000000000066290
l0000000000066280_ds_t:
	goto l00000000000662A4
	// succ:  l00000000000662A4
l0000000000066290:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000066280
	// succ:  l0000000000066280
l00000000000662A4:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.findmoduledatap (retsize: 0;)
	r8 = Mem0[sp + 0x0000000000000048:word64]
	r6 = Mem0[sp + 0x0000000000000010:word64]
	branch r6 != 0x0000000000000000 l00000000000662A4_ds_t
	// succ:  l00000000000662A4_ds_f l00000000000662A4_ds_t
l00000000000662A4_ds_f:
	goto l00000000000662CC
	// succ:  l00000000000662CC
l00000000000662A4_ds_t:
	goto l00000000000662E0
	// succ:  l00000000000662E0
l00000000000662CC:
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 64
	call r4 (retsize: 0;)
	return
	// succ:  runtime.findfunc_exit
l00000000000662E0:
	r1 = Mem0[r6 + 0x0000000000000050:word64]
runtime.findfunc_exit:


// runtime.pcvalue
// Return size: 0
void runtime.pcvalue()
runtime.pcvalue_entry:
	// succ:  l00000000000665A0
l00000000000665A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -456
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000665A0_ds_t
	// succ:  l00000000000665A0_ds_f l00000000000665A0_ds_t
l00000000000665A0_ds_f:
	goto l00000000000665B4
	// succ:  l00000000000665B4
l00000000000665A0_ds_t:
	goto l00000000000665C8
	// succ:  l00000000000665C8
l00000000000665B4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000665A0
	// succ:  l00000000000665A0
l00000000000665C8:
	sp = sp + -456
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x00000000000001E8:word64]
	r10 = Mem0[sp + 0x00000000000001E0:word64]
	r9 = (word64) Mem0[sp + 0x00000000000001D8:int32]
	r1 = 0x0000000000000000
	r1 = r9
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l00000000000665C8_ds_t
	// succ:  l00000000000665C8_ds_f l00000000000665C8_ds_t
l00000000000665C8_ds_f:
	goto l00000000000665F8
	// succ:  l00000000000665F8
l00000000000665C8_ds_t:
	goto l0000000000066614
	// succ:  l0000000000066614
l00000000000665F8:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x00000000000001F8:word32] = (word32) r1
	r4 = Mem0[sp:word64]
	sp = sp + 456
	call r4 (retsize: 0;)
	return
	// succ:  runtime.pcvalue_exit
l0000000000066614:
	branch r3 == 0x0000000000000000 l0000000000066614_ds_t
	// succ:  l0000000000066614_ds_f l0000000000066614_ds_t
l0000000000066614_ds_f:
	goto l000000000006661C
	// succ:  l000000000006661C
l0000000000066614_ds_t:
	goto l000000000006670C
	// succ:  l000000000006670C
l000000000006661C:
	branch r3 != 0x0000000000000000 l000000000006661C_ds_t
	// succ:  l000000000006661C_ds_f l000000000006661C_ds_t
l000000000006661C_ds_f:
	goto l0000000000066624
	// succ:  l0000000000066624
l000000000006661C_ds_t:
	goto l0000000000066628
	// succ:  l0000000000066628
l0000000000066624:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000066628
l0000000000066628:
	lo = r2 / sp
	hi = r2 % sp
	r1 = r3 + -8
	r2 = r2 + -8
	lo = r4 / r1
	hi = r4 % r1
	// succ:  l0000000000066638
l0000000000066638:
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r1 + 8
	Mem0[r2 + 0x0000000000000008:word64] = r3
	r2 = r2 + 8
	branch r1 != r4 l0000000000066638_ds_t
	// succ:  l0000000000066638_ds_f l0000000000066638_ds_t
l0000000000066638_ds_f:
	goto l0000000000066650
	// succ:  l0000000000066650
l0000000000066638_ds_t:
	goto l0000000000066638
	// succ:  l0000000000066638
l0000000000066650:
	r4 = 0x0000000000000000
	lo = r5 / 0x0000000000000000
	hi = r5 % 0x0000000000000000
	lo = r3 / sp
	hi = r3 % sp
	r23 = (word64) (r4 < r5)
	branch r23 == 0x0000000000000000 l0000000000066650_ds_t
	// succ:  l0000000000066650_ds_f l0000000000066650_ds_t
l0000000000066650_ds_f:
	goto l0000000000066668
	// succ:  l0000000000066668
l0000000000066650_ds_t:
	goto l000000000006670C
	// succ:  l000000000006670C
l0000000000066668:
	branch r3 != 0x0000000000000000 l0000000000066668_ds_t
	// succ:  l0000000000066668_ds_f l0000000000066668_ds_t
l0000000000066668_ds_f:
	goto l0000000000066670
	// succ:  l0000000000066670
l0000000000066668_ds_t:
	goto l0000000000066674
	// succ:  l0000000000066674
l0000000000066670:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000066674
l0000000000066674:
	r6 = Mem0[r3:word64]
	r2 = (word64) Mem0[r3 + 0x0000000000000008:int32]
	r8 = r2
	r2 = (word64) Mem0[r3 + 0x000000000000000C:int32]
	r7 = r2
	Mem0[sp + 0x0000000000000088:word64] = r6
	Mem0[sp + 0x0000000000000078:word64] = r6
	r1 = r8
	Mem0[sp + 0x0000000000000090:word32] = (word32) r8
	r2 = r1
	r1 = r7
	Mem0[sp + 0x0000000000000094:word32] = (word32) r7
	r7 = r1
	Mem0[sp + 0x0000000000000084:word32] = (word32) r7
	r1 = r2
	Mem0[sp + 0x0000000000000080:word32] = (word32) r2
	r2 = r9
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000066674_ds_t
	// succ:  l0000000000066674_ds_f l0000000000066674_ds_t
l0000000000066674_ds_f:
	goto l00000000000666C8
	// succ:  l00000000000666C8
l0000000000066674_ds_t:
	goto l00000000000666E8
	// succ:  l00000000000666E8
l00000000000666C8:
	branch r6 != r10 l00000000000666C8_ds_t
	// succ:  l00000000000666C8_ds_f l00000000000666C8_ds_t
l00000000000666C8_ds_f:
	goto l00000000000666D0
	// succ:  l00000000000666D0
l00000000000666C8_ds_t:
	goto l00000000000666E8
	// succ:  l00000000000666E8
l00000000000666D0:
	r1 = r7
	Mem0[sp + 0x00000000000001F8:word32] = (word32) r1
	r4 = Mem0[sp:word64]
	sp = sp + 456
	call r4 (retsize: 0;)
	return
	// succ:  runtime.pcvalue_exit
l00000000000666E8:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r3 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r4 = r1
	r23 = (word64) (r4 < r5)
	branch r23 != 0x0000000000000000 l00000000000666E8_ds_t
	// succ:  l00000000000666E8_ds_f l00000000000666E8_ds_t
l00000000000666E8_ds_f:
	goto l000000000006670C
	// succ:  l000000000006670C
l00000000000666E8_ds_t:
	goto l0000000000066668
	// succ:  l0000000000066668
l000000000006670C:
	r1 = Mem0[sp + 0x00000000000001D0:word64]
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.findmoduledatap (retsize: 0;)
	r6 = Mem0[sp + 0x00000000000001D0:word64]
	r3 = Mem0[sp + 0x0000000000000010:word64]
	branch r3 != 0x0000000000000000 l000000000006670C_ds_t
	r1 = Mem0[sp + 0x00000000000001D0:word64]
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.findmoduledatap (retsize: 0;)
	r6 = Mem0[sp + 0x00000000000001D0:word64]
	r3 = Mem0[sp + 0x0000000000000010:word64]
	branch r3 != 0x0000000000000000 l000000000006670C_ds_t
	// succ:  l000000000006670C_ds_f l000000000006670C_ds_t l000000000006670C_ds_f l000000000006670C_ds_t
l000000000006670C_ds_f:
	goto l0000000000066730
	// succ:  l0000000000066730
l000000000006670C_ds_f:
	goto l0000000000066730
	// succ:  l0000000000066730
l000000000006670C_ds_t:
	goto l0000000000066810
	// succ:  l0000000000066810
l000000000006670C_ds_t:
	goto l0000000000066810
	// succ:  l0000000000066810
l0000000000066730:
	r1 = (word64) Mem0[sp + 0x00000000000001F0:byte]
	branch r1 == 0x0000000000000000 l0000000000066730_ds_t
	r1 = (word64) Mem0[sp + 0x00000000000001F0:byte]
	branch r1 == 0x0000000000000000 l0000000000066730_ds_t
	// succ:  l0000000000066730_ds_f l0000000000066730_ds_t l0000000000066730_ds_f l0000000000066730_ds_t
l0000000000066730_ds_f:
	goto l000000000006673C
	// succ:  l000000000006673C
l0000000000066730_ds_f:
	goto l000000000006673C
	// succ:  l000000000006673C
l0000000000066730_ds_t:
	goto l00000000000667F4
	// succ:  l00000000000667F4
l0000000000066730_ds_t:
	goto l00000000000667F4
	// succ:  l00000000000667F4
l000000000006673C:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006964:uint32]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006964:uint32]
l00000000000667F4:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x00000000000001F8:word32] = (word32) r1
	r4 = Mem0[sp:word64]
	sp = sp + 456
	call r4 (retsize: 0;)
	return
	// succ:  runtime.pcvalue_exit
l0000000000066810:
	r1 = r3
	Mem0[sp + 0x0000000000000198:word64] = r3
	r2 = (word64) Mem0[sp + 0x00000000000001D8:int32]
	r3 = Mem0[r3 + 0x0000000000000008:word64]
	r4 = Mem0[r1 + 0x0000000000000010:word64]
	r23 = (word64) (r3 <u r2)
	branch r23 != 0x0000000000000000 l0000000000066810_ds_t
	// succ:  l0000000000066810_ds_f l0000000000066810_ds_t
l0000000000066810_ds_f:
	goto l0000000000066830
	// succ:  l0000000000066830
l0000000000066810_ds_t:
	goto l0000000000066D58
	// succ:  l0000000000066D58
l0000000000066830:
l0000000000066D58:
	call runtime.panicslice (retsize: 0;)
runtime.pcvalue_exit:


// runtime.cfuncname
// Return size: 0
void runtime.cfuncname()
runtime.cfuncname_entry:
	// succ:  l0000000000066D70
l0000000000066D70:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000066D70_ds_t
	// succ:  l0000000000066D70_ds_f l0000000000066D70_ds_t
l0000000000066D70_ds_f:
	goto l0000000000066D80
	// succ:  l0000000000066D80
l0000000000066D70_ds_t:
	goto l0000000000066D94
	// succ:  l0000000000066D94
l0000000000066D80:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000066D70
	// succ:  l0000000000066D70
l0000000000066D94:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000020:word64]
	branch r3 == 0x0000000000000000 l0000000000066D94_ds_t
	// succ:  l0000000000066D94_ds_f l0000000000066D94_ds_t
l0000000000066D94_ds_f:
	goto l0000000000066DA8
	// succ:  l0000000000066DA8
l0000000000066D94_ds_t:
	goto l0000000000066E58
	// succ:  l0000000000066E58
l0000000000066DA8:
	r1 = (word64) Mem0[r3 + 0x0000000000000008:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l0000000000066DA8_ds_t
	// succ:  l0000000000066DA8_ds_f l0000000000066DA8_ds_t
l0000000000066DA8_ds_f:
	goto l0000000000066DC0
	// succ:  l0000000000066DC0
l0000000000066DA8_ds_t:
	goto l0000000000066E58
	// succ:  l0000000000066E58
l0000000000066DC0:
	r1 = r3
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.findmoduledatap (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	branch r3 != 0x0000000000000000 l0000000000066DC0_ds_t
	// succ:  l0000000000066DC0_ds_f l0000000000066DC0_ds_t
l0000000000066DC0_ds_f:
	goto l0000000000066DE0
	// succ:  l0000000000066DE0
l0000000000066DC0_ds_t:
	goto l0000000000066DF4
	// succ:  l0000000000066DF4
l0000000000066DE0:
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cfuncname_exit
l0000000000066DF4:
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r2 = (word64) Mem0[r1 + 0x0000000000000008:int32]
	r5 = r2
	r1 = r3
	branch r3 != 0x0000000000000000 l0000000000066DF4_ds_t
	// succ:  l0000000000066DF4_ds_f l0000000000066DF4_ds_t
l0000000000066DF4_ds_f:
	goto l0000000000066E0C
	// succ:  l0000000000066E0C
l0000000000066DF4_ds_t:
	goto l0000000000066E10
	// succ:  l0000000000066E10
l0000000000066E0C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000066E10
l0000000000066E10:
	r3 = Mem0[r3:word64]
	r4 = Mem0[r1 + 0x0000000000000008:word64]
	r2 = Mem0[r1 + 0x0000000000000010:word64]
	r1 = r3
	r2 = r5
	r3 = r4
	r23 = (word64) (r2 <u r4)
	branch r23 != 0x0000000000000000 l0000000000066E10_ds_t
	// succ:  l0000000000066E10_ds_f l0000000000066E10_ds_t
l0000000000066E10_ds_f:
	goto l0000000000066E34
	// succ:  l0000000000066E34
l0000000000066E10_ds_t:
	goto l0000000000066E40
	// succ:  l0000000000066E40
l0000000000066E34:
	call runtime.panicindex (retsize: 0;)
l0000000000066E40:
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000028:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cfuncname_exit
l0000000000066E58:
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cfuncname_exit
runtime.cfuncname_exit:


// runtime.funcname
// Return size: 0
void runtime.funcname()
runtime.funcname_entry:
	// succ:  l0000000000066E70
l0000000000066E70:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000066E70_ds_t
	// succ:  l0000000000066E70_ds_f l0000000000066E70_ds_t
l0000000000066E70_ds_f:
	goto l0000000000066E80
	// succ:  l0000000000066E80
l0000000000066E70_ds_t:
	goto l0000000000066E94
	// succ:  l0000000000066E94
l0000000000066E80:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000066E70
	// succ:  l0000000000066E70
l0000000000066E94:
	sp = sp + -32
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.cfuncname (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000010:word64]
	r1 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.gostringnocopy (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r2 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000030:word64] = r3
	Mem0[sp + 0x0000000000000038:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.funcname_exit
runtime.funcname_exit:


// runtime.funcline1
// Return size: 0
void runtime.funcline1()
runtime.funcline1_entry:
	// succ:  l0000000000066EE8
l0000000000066EE8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000066EE8_ds_t
	// succ:  l0000000000066EE8_ds_f l0000000000066EE8_ds_t
l0000000000066EE8_ds_f:
	goto l0000000000066EF8
	// succ:  l0000000000066EF8
l0000000000066EE8_ds_t:
	goto l0000000000066F0C
	// succ:  l0000000000066F0C
l0000000000066EF8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000066EE8
	// succ:  l0000000000066EE8
l0000000000066F0C:
	sp = sp + -120
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000098:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000A0:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000080:word64]
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.findmoduledatap (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000080:word64]
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	branch r1 != 0x0000000000000000 l0000000000066F0C_ds_t
	// succ:  l0000000000066F0C_ds_f l0000000000066F0C_ds_t
l0000000000066F0C_ds_f:
	goto l0000000000066F4C
	// succ:  l0000000000066F4C
l0000000000066F0C_ds_t:
	goto l0000000000066F7C
	// succ:  l0000000000066F7C
l0000000000066F4C:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000098:word64] = r1
l0000000000066F7C:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r2 = (word64) Mem0[r3 + 0x0000000000000018:int32]
	Mem0[sp + 0x0000000000000010:word32] = (word32) r2
	r1 = Mem0[sp + 0x0000000000000088:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	r1 = (word64) Mem0[sp + 0x0000000000000090:byte]
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	call runtime.pcvalue (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000080:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000030:int32]
	r2 = r1
	r1 = r2
	Mem0[sp + 0x0000000000000038:word64] = r1
	Mem0[sp + 0x0000000000000008:word64] = r3
	r2 = (word64) Mem0[r3 + 0x000000000000001C:int32]
	Mem0[sp + 0x0000000000000010:word32] = (word32) r2
	r1 = Mem0[sp + 0x0000000000000088:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	r1 = (word64) Mem0[sp + 0x0000000000000090:byte]
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	call runtime.pcvalue (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000040:word64]
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000030:int32]
	r3 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r4 == r2 l0000000000066F7C_ds_t
	// succ:  l0000000000066F7C_ds_f l0000000000066F7C_ds_t
l0000000000066F7C_ds_f:
	goto l0000000000066FFC
	// succ:  l0000000000066FFC
l0000000000066F7C_ds_t:
	goto l00000000000670EC
	// succ:  l00000000000670EC
l0000000000066FFC:
	r1 = r3
	Mem0[sp + 0x00000000000000A8:word32] = (word32) r3
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 == r2 l0000000000066FFC_ds_t
	// succ:  l0000000000066FFC_ds_f l0000000000066FFC_ds_t
l0000000000066FFC_ds_f:
	goto l000000000006701C
	// succ:  l000000000006701C
l0000000000066FFC_ds_t:
	goto l00000000000670EC
	// succ:  l00000000000670EC
l000000000006701C:
	r2 = Mem0[r5 + 0x0000000000000038:word64]
	r23 = (word64) (r4 < r2)
	branch r23 == 0x0000000000000000 l000000000006701C_ds_t
	// succ:  l000000000006701C_ds_f l000000000006701C_ds_t
l000000000006701C_ds_f:
	goto l000000000006702C
	// succ:  l000000000006702C
l000000000006701C_ds_t:
	goto l00000000000670EC
	// succ:  l00000000000670EC
l000000000006702C:
	r1 = Mem0[r5 + 0x0000000000000030:word64]
	r6 = Mem0[r5 + 0x0000000000000038:word64]
	r2 = Mem0[r5 + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000070:word64] = r2
	Mem0[sp + 0x0000000000000060:word64] = r1
	Mem0[sp + 0x0000000000000068:word64] = r6
	r3 = r6
	r2 = r4
	r23 = (word64) (r4 <u r6)
	branch r23 != 0x0000000000000000 l000000000006702C_ds_t
	// succ:  l000000000006702C_ds_f l000000000006702C_ds_t
l000000000006702C_ds_f:
	goto l0000000000067058
	// succ:  l0000000000067058
l000000000006702C_ds_t:
	goto l0000000000067064
	// succ:  l0000000000067064
l0000000000067058:
	call runtime.panicindex (retsize: 0;)
l0000000000067064:
l00000000000670EC:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000098:word64] = r1
runtime.funcline1_exit:


// runtime.funcline
// Return size: 0
void runtime.funcline()
runtime.funcline_entry:
	// succ:  l0000000000067120
l0000000000067120:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000067120_ds_t
	// succ:  l0000000000067120_ds_f l0000000000067120_ds_t
l0000000000067120_ds_f:
	goto l0000000000067130
	// succ:  l0000000000067130
l0000000000067120_ds_t:
	goto l0000000000067144
	// succ:  l0000000000067144
l0000000000067130:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000067120
	// succ:  l0000000000067120
l0000000000067144:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	call runtime.funcline1 (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r3 = Mem0[sp + 0x0000000000000028:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000030:int32]
	r2 = r1
	Mem0[sp + 0x0000000000000050:word64] = r4
	Mem0[sp + 0x0000000000000058:word64] = r3
	r1 = r2
	Mem0[sp + 0x0000000000000060:word32] = (word32) r1
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.funcline_exit
runtime.funcline_exit:


// runtime.funcspdelta
// Return size: 0
void runtime.funcspdelta()
runtime.funcspdelta_entry:
	// succ:  l00000000000671B0
l00000000000671B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000671B0_ds_t
	// succ:  l00000000000671B0_ds_f l00000000000671B0_ds_t
l00000000000671B0_ds_f:
	goto l00000000000671C0
	// succ:  l00000000000671C0
l00000000000671B0_ds_t:
	goto l00000000000671D4
	// succ:  l00000000000671D4
l00000000000671C0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000671B0
	// succ:  l00000000000671B0
l00000000000671D4:
	sp = sp + -104
	Mem0[sp:word64] = ra
	r2 = Mem0[sp + 0x0000000000000070:word64]
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r2
	r2 = (word64) Mem0[r2 + 0x0000000000000014:int32]
	Mem0[sp + 0x0000000000000010:word32] = (word32) r2
	r1 = Mem0[sp + 0x0000000000000078:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	r1 = Mem0[sp + 0x0000000000000080:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	call runtime.pcvalue (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000030:int32]
	r3 = r1
	r1 = r3
	Mem0[sp + 0x0000000000000038:word32] = (word32) r3
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 + r2
	r1 = r1
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l00000000000671D4_ds_t
	// succ:  l00000000000671D4_ds_f l00000000000671D4_ds_t
l00000000000671D4_ds_f:
	goto l0000000000067248
	// succ:  l0000000000067248
l00000000000671D4_ds_t:
	goto l00000000000673B4
	// succ:  l00000000000673B4
l0000000000067248:
	r1 = Mem0[sp + 0x0000000000000070:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.funcname (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000070:word64]
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000060:word64] = r1
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000050:word64] = r2
	r1 = Mem0[sp + 0x0000000000000078:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r1 = r3
	r2 = (word64) Mem0[r3 + 0x0000000000000014:int32]
	Mem0[sp + 0x0000000000000040:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000673B4:
	r1 = r3
	Mem0[sp + 0x0000000000000088:word32] = (word32) r1
	r4 = Mem0[sp:word64]
	sp = sp + 104
	call r4 (retsize: 0;)
	return
	// succ:  runtime.funcspdelta_exit
runtime.funcspdelta_exit:


// runtime.pcdatavalue
// Return size: 0
void runtime.pcdatavalue()
runtime.pcdatavalue_entry:
	// succ:  l00000000000673D0
l00000000000673D0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000673D0_ds_t
	// succ:  l00000000000673D0_ds_f l00000000000673D0_ds_t
l00000000000673D0_ds_f:
	goto l00000000000673E0
	// succ:  l00000000000673E0
l00000000000673D0_ds_t:
	goto l00000000000673F4
	// succ:  l00000000000673F4
l00000000000673E0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000673D0
	// succ:  l00000000000673D0
l00000000000673F4:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r3 = (word64) Mem0[sp + 0x0000000000000048:int32]
	r5 = Mem0[sp + 0x0000000000000040:word64]
	r1 = 0x0000000000000000
	r1 = r3
	r2 = 0x0000000000000000
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 != 0x0000000000000000 l00000000000673F4_ds_t
	// succ:  l00000000000673F4_ds_f l00000000000673F4_ds_t
l00000000000673F4_ds_f:
	goto l0000000000067424
	// succ:  l0000000000067424
l00000000000673F4_ds_t:
	goto l00000000000674B8
	// succ:  l00000000000674B8
l0000000000067424:
	r1 = (word64) Mem0[r5 + 0x0000000000000020:int32]
	r2 = r3
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l0000000000067424_ds_t
	// succ:  l0000000000067424_ds_f l0000000000067424_ds_t
l0000000000067424_ds_f:
	goto l0000000000067440
	// succ:  l0000000000067440
l0000000000067424_ds_t:
	goto l00000000000674B8
	// succ:  l00000000000674B8
l0000000000067440:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r5
	hi = r1 % r5
	r4 = r1
	r3 = r3
l00000000000674B8:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1
	Mem0[sp + 0x0000000000000060:word32] = (word32) r1
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.pcdatavalue_exit
runtime.pcdatavalue_exit:


// runtime.funcdata
// Return size: 0
void runtime.funcdata()
runtime.funcdata_entry:
	// succ:  l00000000000674D8
l00000000000674D8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000674D8_ds_t
	// succ:  l00000000000674D8_ds_f l00000000000674D8_ds_t
l00000000000674D8_ds_f:
	goto l00000000000674E8
	// succ:  l00000000000674E8
l00000000000674D8_ds_t:
	goto l00000000000674FC
	// succ:  l00000000000674FC
l00000000000674E8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000674D8
	// succ:  l00000000000674D8
l00000000000674FC:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r6 = (word64) Mem0[sp + 0x0000000000000030:int32]
	r4 = Mem0[sp + 0x0000000000000028:word64]
	r1 = r6
	r2 = 0x0000000000000000
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 != 0x0000000000000000 l00000000000674FC_ds_t
	// succ:  l00000000000674FC_ds_f l00000000000674FC_ds_t
l00000000000674FC_ds_f:
	goto l0000000000067528
	// succ:  l0000000000067528
l00000000000674FC_ds_t:
	goto l000000000006761C
	// succ:  l000000000006761C
l0000000000067528:
	r1 = (word64) Mem0[r4 + 0x0000000000000024:int32]
	r2 = r6
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l0000000000067528_ds_t
	// succ:  l0000000000067528_ds_f l0000000000067528_ds_t
l0000000000067528_ds_f:
	goto l0000000000067544
	// succ:  l0000000000067544
l0000000000067528_ds_t:
	goto l000000000006761C
	// succ:  l000000000006761C
l0000000000067544:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r5 = r1
	r2 = (word64) Mem0[r4 + 0x0000000000000020:int32]
l000000000006761C:
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.funcdata_exit
runtime.funcdata_exit:


// runtime.step
// Return size: 0
void runtime.step()
runtime.step_entry:
	// succ:  l0000000000067630
l0000000000067630:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000067630_ds_t
	// succ:  l0000000000067630_ds_f l0000000000067630_ds_t
l0000000000067630_ds_f:
	goto l0000000000067640
	// succ:  l0000000000067640
l0000000000067630_ds_t:
	goto l0000000000067654
	// succ:  l0000000000067654
l0000000000067640:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000067630
	// succ:  l0000000000067630
l0000000000067654:
	sp = sp + -72
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000080:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000088:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000090:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.readvarint (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000020:word64]
	r5 = Mem0[sp + 0x0000000000000028:word64]
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000038:uint32]
runtime.step_exit:


// runtime.readvarint
// Return size: 0
void runtime.readvarint()
runtime.readvarint_entry:
	// succ:  l0000000000067850
l0000000000067850:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000067850_ds_t
	// succ:  l0000000000067850_ds_f l0000000000067850_ds_t
l0000000000067850_ds_f:
	goto l0000000000067860
	// succ:  l0000000000067860
l0000000000067850_ds_t:
	goto l0000000000067874
	// succ:  l0000000000067874
l0000000000067860:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000067850
	// succ:  l0000000000067850
l0000000000067874:
	sp = sp + -8
	Mem0[sp:word64] = ra
	r9 = Mem0[sp + 0x0000000000000020:word64]
	r7 = Mem0[sp + 0x0000000000000010:word64]
	r4 = Mem0[sp + 0x0000000000000018:word64]
runtime.readvarint_exit:


// runtime.stackmapdata
// Return size: 0
void runtime.stackmapdata()
runtime.stackmapdata_entry:
	// succ:  l0000000000067A38
l0000000000067A38:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000067A38_ds_t
	// succ:  l0000000000067A38_ds_f l0000000000067A38_ds_t
l0000000000067A38_ds_f:
	goto l0000000000067A48
	// succ:  l0000000000067A48
l0000000000067A38_ds_t:
	goto l0000000000067A5C
	// succ:  l0000000000067A5C
l0000000000067A48:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000067A38
	// succ:  l0000000000067A38
l0000000000067A5C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r6 = (word64) Mem0[sp + 0x0000000000000028:int32]
	r5 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000030:word32] = (word32) 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	r1 = r6
	r2 = 0x0000000000000000
	r2 = r2
	r1 = r1
	r23 = (word64) (r1 < r2)
	branch r23 != 0x0000000000000000 l0000000000067A5C_ds_t
	// succ:  l0000000000067A5C_ds_f l0000000000067A5C_ds_t
l0000000000067A5C_ds_f:
	goto l0000000000067A90
	// succ:  l0000000000067A90
l0000000000067A5C_ds_t:
	goto l0000000000067B58
	// succ:  l0000000000067B58
l0000000000067A90:
	r1 = (word64) Mem0[r5:int32]
	r2 = r6
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l0000000000067A90_ds_t
	// succ:  l0000000000067A90_ds_f l0000000000067A90_ds_t
l0000000000067A90_ds_f:
	goto l0000000000067AAC
	// succ:  l0000000000067AAC
l0000000000067A90_ds_t:
	goto l0000000000067B58
	// succ:  l0000000000067B58
l0000000000067AAC:
	branch r5 != 0x0000000000000000 l0000000000067AAC_ds_t
	// succ:  l0000000000067AAC_ds_f l0000000000067AAC_ds_t
l0000000000067AAC_ds_f:
	goto l0000000000067AB4
	// succ:  l0000000000067AB4
l0000000000067AAC_ds_t:
	goto l0000000000067AB8
	// succ:  l0000000000067AB8
l0000000000067AB4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000067AB8
l0000000000067AB8:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r5
	hi = r1 % r5
	r4 = r1
	r1 = (word64) Mem0[r5 + 0x0000000000000004:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1 + r2
	r1 = r1
	r2 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2
	r3 = r3
	branch r3 != 0x0000000000000000 l0000000000067AB8_ds_t
	// succ:  l0000000000067AB8_ds_f l0000000000067AB8_ds_t
l0000000000067AB8_ds_f:
	goto l0000000000067AF4
	// succ:  l0000000000067AF4
l0000000000067AB8_ds_t:
	goto l0000000000067B00
	// succ:  l0000000000067B00
l0000000000067AF4:
	call runtime.panicdivide (retsize: 0;)
l0000000000067B00:
	lo = r2 / r3
	hi = r2 % r3
	r2 = lo
	r3 = r2
	r1 = r3
l0000000000067B58:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.stackmapdata_exit:


// runtime.gostartcall
// Return size: 0
void runtime.gostartcall()
runtime.gostartcall_entry:
	// succ:  l0000000000067B88
l0000000000067B88:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000067B88_ds_t
	// succ:  l0000000000067B88_ds_f l0000000000067B88_ds_t
l0000000000067B88_ds_f:
	goto l0000000000067B98
	// succ:  l0000000000067B98
l0000000000067B88_ds_t:
	goto l0000000000067BAC
	// succ:  l0000000000067BAC
l0000000000067B98:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000067B88
	// succ:  l0000000000067B88
l0000000000067BAC:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[r4 + 0x0000000000000028:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000067BAC_ds_t
	// succ:  l0000000000067BAC_ds_f l0000000000067BAC_ds_t
l0000000000067BAC_ds_f:
	goto l0000000000067BC8
	// succ:  l0000000000067BC8
l0000000000067BAC_ds_t:
	goto l0000000000067BEC
	// succ:  l0000000000067BEC
l0000000000067BC8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000067BEC:
	branch r4 != 0x0000000000000000 l0000000000067BEC_ds_t
	// succ:  l0000000000067BEC_ds_f l0000000000067BEC_ds_t
l0000000000067BEC_ds_f:
	goto l0000000000067BF4
	// succ:  l0000000000067BF4
l0000000000067BEC_ds_t:
	goto l0000000000067BF8
	// succ:  l0000000000067BF8
l0000000000067BF4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000067BF8
l0000000000067BF8:
	r3 = Mem0[r4 + 0x0000000000000008:word64]
	Mem0[r4 + 0x0000000000000028:word64] = r3
	r2 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[r4 + 0x0000000000000008:word64] = r2
	r1 = r4
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000067BF8_ds_t
	// succ:  l0000000000067BF8_ds_f l0000000000067BF8_ds_t
l0000000000067BF8_ds_f:
	goto l0000000000067C28
	// succ:  l0000000000067C28
l0000000000067BF8_ds_t:
	goto l0000000000067C3C
	// succ:  l0000000000067C3C
l0000000000067C28:
	Mem0[r1 + 0x0000000000000018:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gostartcall_exit
l0000000000067C3C:
	lo = r3 / r1
	hi = r3 % r1
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gostartcall_exit
runtime.gostartcall_exit:


// runtime.rewindmorestack
// Return size: 0
void runtime.rewindmorestack()
runtime.rewindmorestack_entry:
	// succ:  l0000000000067C60
l0000000000067C60:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000067C60_ds_t
	// succ:  l0000000000067C60_ds_f l0000000000067C60_ds_t
l0000000000067C60_ds_f:
	goto l0000000000067C70
	// succ:  l0000000000067C70
l0000000000067C60_ds_t:
	goto l0000000000067C84
	// succ:  l0000000000067C84
l0000000000067C70:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000067C60
	// succ:  l0000000000067C60
l0000000000067C84:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000030:word64]
runtime.rewindmorestack_exit:


// runtime.timerproc
// Return size: 0
void runtime.timerproc()
runtime.timerproc_entry:
	// succ:  l0000000000067EE0
l0000000000067EE0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -136
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000067EE0_ds_t
	// succ:  l0000000000067EE0_ds_f l0000000000067EE0_ds_t
l0000000000067EE0_ds_f:
	goto l0000000000067EF4
	// succ:  l0000000000067EF4
l0000000000067EE0_ds_t:
	goto l0000000000067F08
	// succ:  l0000000000067F08
l0000000000067EF4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000067EE0
	// succ:  l0000000000067EE0
l0000000000067F08:
	sp = sp + -136
	Mem0[sp:word64] = ra
	r1 = r30
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r3 = 0x0000000000000000
	branch r2 != r3 l0000000000067F08_ds_t
	// succ:  l0000000000067F08_ds_f l0000000000067F08_ds_t
l0000000000067F08_ds_f:
	goto l0000000000067F2C
	// succ:  l0000000000067F2C
l0000000000067F08_ds_t:
	goto l0000000000068434
	// succ:  l0000000000068434
l0000000000067F2C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000012E8:word64] = r1
	// succ:  l0000000000067F38
l0000000000067F38:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000012F1:byte] = (byte) r1
	call runtime.nanotime (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
l0000000000068434:
	r2 = 0x00000000000D0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r30
	call runtime.writebarrierptr (retsize: 0;)
	goto l0000000000067F38
	// succ:  l0000000000067F38
runtime.timerproc_exit:


// runtime.timejump
// Return size: 0
void runtime.timejump()
runtime.timejump_entry:
	// succ:  l0000000000068458
l0000000000068458:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000068458_ds_t
	// succ:  l0000000000068458_ds_f l0000000000068458_ds_t
l0000000000068458_ds_f:
	goto l0000000000068468
	// succ:  l0000000000068468
l0000000000068458_ds_t:
	goto l000000000006847C
	// succ:  l000000000006847C
l0000000000068468:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000068458
	// succ:  l0000000000068458
l000000000006847C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x00000000000068F8:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000006847C_ds_t
	// succ:  l000000000006847C_ds_f l000000000006847C_ds_t
l000000000006847C_ds_f:
	goto l000000000006849C
	// succ:  l000000000006849C
l000000000006847C_ds_t:
	goto l00000000000684B0
	// succ:  l00000000000684B0
l000000000006849C:
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.timejump_exit
l00000000000684B0:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x00000000000012F0:byte]
	branch r1 == 0x0000000000000000 l00000000000684B0_ds_t
	// succ:  l00000000000684B0_ds_f l00000000000684B0_ds_t
l00000000000684B0_ds_f:
	goto l00000000000684DC
	// succ:  l00000000000684DC
l00000000000684B0_ds_t:
	goto l0000000000068638
	// succ:  l0000000000068638
l00000000000684DC:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001308:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l00000000000684DC_ds_t
	// succ:  l00000000000684DC_ds_f l00000000000684DC_ds_t
l00000000000684DC_ds_f:
	goto l00000000000684F4
	// succ:  l00000000000684F4
l00000000000684DC_ds_t:
	goto l0000000000068638
	// succ:  l0000000000068638
l00000000000684F4:
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x0000000000001300:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000001308:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001310:word64]
	Mem0[sp + 0x0000000000000028:word64] = r1
	r1 = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	Mem0[sp + 0x0000000000000020:word64] = r3
	r2 = r3
	r3 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r2)
	branch r23 != 0x0000000000000000 l00000000000684F4_ds_t
	// succ:  l00000000000684F4_ds_f l00000000000684F4_ds_t
l00000000000684F4_ds_f:
	goto l0000000000068540
	// succ:  l0000000000068540
l00000000000684F4_ds_t:
	goto l000000000006854C
	// succ:  l000000000006854C
l0000000000068540:
	call runtime.panicindex (retsize: 0;)
l000000000006854C:
	r2 = Mem0[r1:word64]
	r1 = Mem0[r2 + 0x0000000000000008:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 - 0x00000000000068F8:word64]
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l000000000006854C_ds_t
	// succ:  l000000000006854C_ds_f l000000000006854C_ds_t
l000000000006854C_ds_f:
	goto l000000000006856C
	// succ:  l000000000006856C
l000000000006854C_ds_t:
	goto l0000000000068608
	// succ:  l0000000000068608
l000000000006856C:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x0000000000001300:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000001308:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001310:word64]
	Mem0[sp + 0x0000000000000028:word64] = r1
	r1 = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	Mem0[sp + 0x0000000000000020:word64] = r3
	r2 = r3
	r3 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r2)
	branch r23 != 0x0000000000000000 l000000000006856C_ds_t
	// succ:  l000000000006856C_ds_f l000000000006856C_ds_t
l000000000006856C_ds_f:
	goto l00000000000685B4
	// succ:  l00000000000685B4
l000000000006856C_ds_t:
	goto l00000000000685C0
	// succ:  l00000000000685C0
l00000000000685B4:
	call runtime.panicindex (retsize: 0;)
l00000000000685C0:
	r2 = Mem0[r1:word64]
	r1 = Mem0[r2 + 0x0000000000000008:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x00000000000068F8:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 + 0x00000000000012F2:byte]
	branch r1 == 0x0000000000000000 l00000000000685C0_ds_t
	// succ:  l00000000000685C0_ds_f l00000000000685C0_ds_t
l00000000000685C0_ds_f:
	goto l00000000000685E8
	// succ:  l00000000000685E8
l00000000000685C0_ds_t:
	goto l0000000000068608
	// succ:  l0000000000068608
l00000000000685E8:
	r1 = 0x0000000000000000
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x00000000000012F2:byte] = (byte) r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000012E8:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	// succ:  l0000000000068608
l0000000000068608:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.timejump_exit
l0000000000068638:
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.timejump_exit
runtime.timejump_exit:


// runtime.siftdownTimer
// Return size: 0
void runtime.siftdownTimer()
runtime.siftdownTimer_entry:
	// succ:  l0000000000068668
l0000000000068668:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000068668_ds_t
	// succ:  l0000000000068668_ds_f l0000000000068668_ds_t
l0000000000068668_ds_f:
	goto l0000000000068678
	// succ:  l0000000000068678
l0000000000068668_ds_t:
	goto l000000000006868C
	// succ:  l000000000006868C
l0000000000068678:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000068668
	// succ:  l0000000000068668
l000000000006868C:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r10 = Mem0[sp + 0x0000000000000058:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r7 = Mem0[r23 + 0x0000000000001300:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r11 = Mem0[r23 + 0x0000000000001308:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001310:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r3 = r11
	r1 = r7
	r6 = r11
	r2 = r10
	r23 = (word64) (r10 <u r11)
	branch r23 != 0x0000000000000000 l000000000006868C_ds_t
	// succ:  l000000000006868C_ds_f l000000000006868C_ds_t
l000000000006868C_ds_f:
	goto l00000000000686DC
	// succ:  l00000000000686DC
l000000000006868C_ds_t:
	goto l00000000000686E8
	// succ:  l00000000000686E8
l00000000000686DC:
	call runtime.panicindex (retsize: 0;)
l00000000000686E8:
runtime.siftdownTimer_exit:


// runtime.traceReader
// Return size: 0
void runtime.traceReader()
runtime.traceReader_entry:
	// succ:  l0000000000068AF0
l0000000000068AF0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000068AF0_ds_t
	// succ:  l0000000000068AF0_ds_f l0000000000068AF0_ds_t
l0000000000068AF0_ds_f:
	goto l0000000000068B00
	// succ:  l0000000000068B00
l0000000000068AF0_ds_t:
	goto l0000000000068B14
	// succ:  l0000000000068B14
l0000000000068B00:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000068AF0
	// succ:  l0000000000068AF0
l0000000000068B14:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x00000000000069F8:word64]
	branch r1 == 0x0000000000000000 l0000000000068B14_ds_t
	// succ:  l0000000000068B14_ds_f l0000000000068B14_ds_t
l0000000000068B14_ds_f:
	goto l0000000000068B30
	// succ:  l0000000000068B30
l0000000000068B14_ds_t:
	goto l0000000000068B5C
	// succ:  l0000000000068B5C
l0000000000068B30:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006A08:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000068B30_ds_t
	// succ:  l0000000000068B30_ds_f l0000000000068B30_ds_t
l0000000000068B30_ds_f:
	goto l0000000000068B48
	// succ:  l0000000000068B48
l0000000000068B30_ds_t:
	goto l0000000000068B70
	// succ:  l0000000000068B70
l0000000000068B48:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006A4F:byte]
	branch r1 != 0x0000000000000000 l0000000000068B48_ds_t
	// succ:  l0000000000068B48_ds_f l0000000000068B48_ds_t
l0000000000068B48_ds_f:
	goto l0000000000068B5C
	// succ:  l0000000000068B5C
l0000000000068B48_ds_t:
	goto l0000000000068B70
	// succ:  l0000000000068B70
l0000000000068B5C:
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceReader_exit
l0000000000068B70:
	r1 = 0x00000000000E0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x00000000000069F8:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000068B70_ds_t
	// succ:  l0000000000068B70_ds_f l0000000000068B70_ds_t
l0000000000068B70_ds_f:
	goto l0000000000068BA0
	// succ:  l0000000000068BA0
l0000000000068B70_ds_t:
	goto l0000000000068BCC
	// succ:  l0000000000068BCC
l0000000000068BA0:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006A08:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000068BA0_ds_t
	// succ:  l0000000000068BA0_ds_f l0000000000068BA0_ds_t
l0000000000068BA0_ds_f:
	goto l0000000000068BB8
	// succ:  l0000000000068BB8
l0000000000068BA0_ds_t:
	goto l0000000000068BF8
	// succ:  l0000000000068BF8
l0000000000068BB8:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006A4F:byte]
	branch r1 != 0x0000000000000000 l0000000000068BB8_ds_t
	// succ:  l0000000000068BB8_ds_f l0000000000068BB8_ds_t
l0000000000068BB8_ds_f:
	goto l0000000000068BCC
	// succ:  l0000000000068BCC
l0000000000068BB8_ds_t:
	goto l0000000000068BF8
	// succ:  l0000000000068BF8
l0000000000068BCC:
	r1 = 0x00000000000E0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceReader_exit
l0000000000068BF8:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x00000000000069F8:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x00000000000069F8:word64] = 0x0000000000000000
	r1 = 0x00000000000E0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceReader_exit
runtime.traceReader_exit:


// runtime.traceProcFree
// Return size: 0
void runtime.traceProcFree()
runtime.traceProcFree_entry:
	// succ:  l0000000000068C48
l0000000000068C48:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000068C48_ds_t
	// succ:  l0000000000068C48_ds_f l0000000000068C48_ds_t
l0000000000068C48_ds_f:
	goto l0000000000068C58
	// succ:  l0000000000068C58
l0000000000068C48_ds_t:
	goto l0000000000068C6C
	// succ:  l0000000000068C6C
l0000000000068C58:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000068C48
	// succ:  l0000000000068C48
l0000000000068C6C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000020:word64]
	branch r4 != 0x0000000000000000 l0000000000068C6C_ds_t
	// succ:  l0000000000068C6C_ds_f l0000000000068C6C_ds_t
l0000000000068C6C_ds_f:
	goto l0000000000068C80
	// succ:  l0000000000068C80
l0000000000068C6C_ds_t:
	goto l0000000000068C84
	// succ:  l0000000000068C84
l0000000000068C80:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000068C84
l0000000000068C84:
	r3 = Mem0[r4 + 0x00000000000011F8:word64]
	Mem0[r4 + 0x00000000000011F8:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r3
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000068C84_ds_t
	// succ:  l0000000000068C84_ds_f l0000000000068C84_ds_t
l0000000000068C84_ds_f:
	goto l0000000000068C9C
	// succ:  l0000000000068C9C
l0000000000068C84_ds_t:
	goto l0000000000068CAC
	// succ:  l0000000000068CAC
l0000000000068C9C:
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceProcFree_exit
l0000000000068CAC:
	r1 = 0x00000000000E0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[r3:word64] = 0x0000000000000000
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006A08:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000068CAC_ds_t
	// succ:  l0000000000068CAC_ds_f l0000000000068CAC_ds_t
l0000000000068CAC_ds_f:
	goto l0000000000068CE4
	// succ:  l0000000000068CE4
l0000000000068CAC_ds_t:
	goto l0000000000068D24
	// succ:  l0000000000068D24
l0000000000068CE4:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006A08:word64] = r3
	// succ:  l0000000000068CF0
l0000000000068CF0:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006A00:word64] = r3
	r1 = 0x00000000000E0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceProcFree_exit
l0000000000068D24:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006A00:word64]
	r2 = r3
	Mem0[r1:word64] = r3
	goto l0000000000068CF0
	// succ:  l0000000000068CF0
runtime.traceProcFree_exit:


// runtime.traceEvent
// Return size: 0
void runtime.traceEvent()
runtime.traceEvent_entry:
	// succ:  l0000000000068D40
l0000000000068D40:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -216
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000068D40_ds_t
	// succ:  l0000000000068D40_ds_f l0000000000068D40_ds_t
l0000000000068D40_ds_f:
	goto l0000000000068D54
	// succ:  l0000000000068D54
l0000000000068D40_ds_t:
	goto l0000000000068D68
	// succ:  l0000000000068D68
l0000000000068D54:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000068D40
	// succ:  l0000000000068D40
l0000000000068D68:
	sp = sp + -216
	Mem0[sp:word64] = ra
	call runtime.traceAcquireBuffer (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000078:word64] = r4
	r1 = (word64) Mem0[sp + 0x0000000000000010:int32]
	r3 = r1
	Mem0[sp + 0x0000000000000038:word32] = (word32) r3
	r2 = Mem0[sp + 0x0000000000000018:word64]
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006A50:byte]
	branch r1 != 0x0000000000000000 l0000000000068D68_ds_t
	// succ:  l0000000000068D68_ds_f l0000000000068D68_ds_t
l0000000000068D68_ds_f:
	goto l0000000000068DA4
	// succ:  l0000000000068DA4
l0000000000068D68_ds_t:
	goto l0000000000068DD0
	// succ:  l0000000000068DD0
l0000000000068DA4:
	r1 = (word64) Mem0[r4 + 0x0000000000000320:byte]
	branch r1 != 0x0000000000000000 l0000000000068DA4_ds_t
	// succ:  l0000000000068DA4_ds_f l0000000000068DA4_ds_t
l0000000000068DA4_ds_f:
	goto l0000000000068DB0
	// succ:  l0000000000068DB0
l0000000000068DA4_ds_t:
	goto l0000000000068DD0
	// succ:  l0000000000068DD0
l0000000000068DB0:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.traceReleaseBuffer (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 216
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceEvent_exit
l0000000000068DD0:
	Mem0[sp + 0x0000000000000090:word64] = r2
	r3 = Mem0[r2:word64]
	branch r3 == 0x0000000000000000 l0000000000068DD0_ds_t
	// succ:  l0000000000068DD0_ds_f l0000000000068DD0_ds_t
l0000000000068DD0_ds_f:
	goto l0000000000068DE0
	// succ:  l0000000000068DE0
l0000000000068DD0_ds_t:
	goto l00000000000693D4
	// succ:  l00000000000693D4
l0000000000068DE0:
	Mem0[sp + 0x0000000000000098:word64] = r3
	r1 = Mem0[r3 + 0x0000000000000010:word64]
	r2 = 0x000000000000FBE8
l0000000000068E04:
	call runtime.cputicks (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000098:word64]
	r2 = Mem0[sp + 0x0000000000000008:word64]
	r1 = r2
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	branch r3 != 0x0000000000000000 l0000000000068E04_ds_t
	// succ:  l0000000000068E04_ds_f l0000000000068E04_ds_t
l0000000000068E04_ds_f:
	goto l0000000000068E24
	// succ:  l0000000000068E24
l0000000000068E04_ds_t:
	goto l0000000000068E30
	// succ:  l0000000000068E30
l0000000000068E24:
	call runtime.panicdivide (retsize: 0;)
l0000000000068E30:
	lo = r2 / r3
	hi = r2 % r3
	r3 = lo
	r1 = Mem0[r4 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000040:word64] = r3
l00000000000693D4:
	r2 = r3
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.traceFlush (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000010:word64]
	r1 = Mem0[sp + 0x0000000000000090:word64]
	branch r1 != 0x0000000000000000 l00000000000693D4_ds_t
	// succ:  l00000000000693D4_ds_f l00000000000693D4_ds_t
l00000000000693D4_ds_f:
	goto l00000000000693F8
	// succ:  l00000000000693F8
l00000000000693D4_ds_t:
	goto l00000000000693FC
	// succ:  l00000000000693FC
l00000000000693F8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000693FC
l00000000000693FC:
	Mem0[sp + 0x0000000000000098:word64] = r2
	r3 = r2
	Mem0[r1:word64] = r2
	goto l0000000000068E04
	// succ:  l0000000000068E04
runtime.traceEvent_exit:


// runtime.traceAcquireBuffer
// Return size: 0
void runtime.traceAcquireBuffer()
runtime.traceAcquireBuffer_entry:
	// succ:  l0000000000069410
l0000000000069410:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000069410_ds_t
	// succ:  l0000000000069410_ds_f l0000000000069410_ds_t
l0000000000069410_ds_f:
	goto l0000000000069420
	// succ:  l0000000000069420
l0000000000069410_ds_t:
	goto l0000000000069434
	// succ:  l0000000000069434
l0000000000069420:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000069410
	// succ:  l0000000000069410
l0000000000069434:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	r4 = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	r3 = Mem0[r2 + 0x00000000000000B0:word64]
	branch r3 == 0x0000000000000000 l0000000000069434_ds_t
	// succ:  l0000000000069434_ds_f l0000000000069434_ds_t
l0000000000069434_ds_f:
	goto l0000000000069480
	// succ:  l0000000000069480
l0000000000069434_ds_t:
	goto l00000000000694B0
	// succ:  l00000000000694B0
l0000000000069480:
	branch r3 != 0x0000000000000000 l0000000000069480_ds_t
	// succ:  l0000000000069480_ds_f l0000000000069480_ds_t
l0000000000069480_ds_f:
	goto l0000000000069488
	// succ:  l0000000000069488
l0000000000069480_ds_t:
	goto l000000000006948C
	// succ:  l000000000006948C
l0000000000069488:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006948C
l000000000006948C:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r2 = (word64) Mem0[r3 + 0x0000000000000008:int32]
	Mem0[sp + 0x0000000000000020:word32] = (word32) r2
	Mem0[sp + 0x0000000000000028:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceAcquireBuffer_exit
l00000000000694B0:
	r1 = 0x00000000000E0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r2 = 0x0000000000010000
	r2 = r2 | 0x00000000000000A0
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = 0x00000000000E0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	r2 = 0x0000000000010000
	r2 = r2 | 0x00000000000000A8
	lo = r1 / r1
	hi = r1 % r1
	r2 = r1
runtime.traceAcquireBuffer_exit:


// runtime.traceReleaseBuffer
// Return size: 0
void runtime.traceReleaseBuffer()
runtime.traceReleaseBuffer_entry:
	// succ:  l0000000000069518
l0000000000069518:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000069518_ds_t
	// succ:  l0000000000069518_ds_f l0000000000069518_ds_t
l0000000000069518_ds_f:
	goto l0000000000069528
	// succ:  l0000000000069528
l0000000000069518_ds_t:
	goto l000000000006953C
	// succ:  l000000000006953C
l0000000000069528:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000069518
	// succ:  l0000000000069518
l000000000006953C:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = (word64) Mem0[sp + 0x0000000000000018:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000006953C_ds_t
	// succ:  l000000000006953C_ds_f l000000000006953C_ds_t
l000000000006953C_ds_f:
	goto l0000000000069560
	// succ:  l0000000000069560
l000000000006953C_ds_t:
	goto l000000000006958C
	// succ:  l000000000006958C
l0000000000069560:
	r1 = 0x00000000000E0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r2 = 0x0000000000010000
	r2 = r2 | 0x00000000000000A0
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
l000000000006958C:
	r4 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r4 + 0x00000000000000E0:word32] = (word32) r2
	r1 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000006958C_ds_t
	// succ:  l000000000006958C_ds_f l000000000006958C_ds_t
l000000000006958C_ds_f:
	goto l00000000000695C8
	// succ:  l00000000000695C8
l000000000006958C_ds_t:
	goto l00000000000695DC
	// succ:  l00000000000695DC
l00000000000695C8:
	r1 = (word64) Mem0[r30 + 0x00000000000000E8:byte]
	branch r1 == 0x0000000000000000 l00000000000695C8_ds_t
	// succ:  l00000000000695C8_ds_f l00000000000695C8_ds_t
l00000000000695C8_ds_f:
	goto l00000000000695D4
	// succ:  l00000000000695D4
l00000000000695C8_ds_t:
	goto l00000000000695DC
	// succ:  l00000000000695DC
l00000000000695D4:
l00000000000695DC:
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceReleaseBuffer_exit
runtime.traceReleaseBuffer_exit:


// runtime.traceFlush
// Return size: 0
void runtime.traceFlush()
runtime.traceFlush_entry:
	// succ:  l00000000000695F0
l00000000000695F0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000695F0_ds_t
	// succ:  l00000000000695F0_ds_f l00000000000695F0_ds_t
l00000000000695F0_ds_f:
	goto l0000000000069600
	// succ:  l0000000000069600
l00000000000695F0_ds_t:
	goto l0000000000069614
	// succ:  l0000000000069614
l0000000000069600:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000695F0
	// succ:  l00000000000695F0
l0000000000069614:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 - 0x0000000000006A58:word64]
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l0000000000069614_ds_t
	// succ:  l0000000000069614_ds_f l0000000000069614_ds_t
l0000000000069614_ds_f:
	goto l0000000000069634
	// succ:  l0000000000069634
l0000000000069614_ds_t:
	goto l00000000000697CC
	// succ:  l00000000000697CC
l0000000000069634:
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A0:word64]
	r2 = r3
	branch r1 != r3 l0000000000069634_ds_t
	// succ:  l0000000000069634_ds_f l0000000000069634_ds_t
l0000000000069634_ds_f:
	goto l0000000000069648
	// succ:  l0000000000069648
l0000000000069634_ds_t:
	goto l00000000000697CC
	// succ:  l00000000000697CC
l0000000000069648:
	Mem0[sp + 0x0000000000000020:byte] = (byte) 0x0000000000000000
	goto l000000000006964C
	// succ:  l000000000006964C
l0000000000069648_ds_f:
	goto l0000000000069658
	// succ:  l0000000000069658
l0000000000069648_ds_t:
	goto l0000000000069670
	// succ:  l0000000000069670
l000000000006964C:
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	branch r1 == 0x0000000000000000 l0000000000069648_ds_t
	goto l0000000000069648_ds_f
	// succ:  l0000000000069648_ds_f l0000000000069648_ds_t
l0000000000069658:
	r1 = 0x00000000000E0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
l0000000000069670:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	branch r1 == 0x0000000000000000 l0000000000069670_ds_t
	// succ:  l0000000000069670_ds_f l0000000000069670_ds_t
l0000000000069670_ds_f:
	goto l000000000006967C
	// succ:  l000000000006967C
l0000000000069670_ds_t:
	goto l00000000000696B0
	// succ:  l00000000000696B0
l000000000006967C:
	r3 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[r3:word64] = 0x0000000000000000
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006A08:word64]
	branch r1 != 0x0000000000000000 l000000000006967C_ds_t
	// succ:  l000000000006967C_ds_f l000000000006967C_ds_t
l000000000006967C_ds_f:
	goto l0000000000069698
	// succ:  l0000000000069698
l000000000006967C_ds_t:
	goto l00000000000697B4
	// succ:  l00000000000697B4
l0000000000069698:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006A08:word64] = r3
	// succ:  l00000000000696A4
l00000000000696A4:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006A00:word64] = r3
	// succ:  l00000000000696B0
l00000000000696B0:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006A10:word64]
	branch r1 == 0x0000000000000000 l00000000000696B0_ds_t
	// succ:  l00000000000696B0_ds_f l00000000000696B0_ds_t
l00000000000696B0_ds_f:
	goto l00000000000696C4
	// succ:  l00000000000696C4
l00000000000696B0_ds_t:
	goto l0000000000069744
	// succ:  l0000000000069744
l00000000000696C4:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r5 = Mem0[r23 - 0x0000000000006A10:word64]
	r2 = Mem0[r5:word64]
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006A10:word64] = r2
	goto l00000000000696E0
	// succ:  l00000000000696E0
l00000000000696C4_ds_f:
	goto l00000000000696F0
	// succ:  l00000000000696F0
l00000000000696C4_ds_t:
	goto l00000000000696F4
	// succ:  l00000000000696F4
l00000000000696E0:
	Mem0[sp + 0x0000000000000030:word64] = r5
	r3 = r5
	branch r5 != 0x0000000000000000 l00000000000696C4_ds_t
	goto l00000000000696C4_ds_f
	// succ:  l00000000000696C4_ds_f l00000000000696C4_ds_t
l00000000000696F0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000696F4
l00000000000696F4:
	r4 = 0x0000000000000000
	Mem0[r5:word64] = 0x0000000000000000
	Mem0[r5 + 0x0000000000000010:word64] = 0x0000000000000000
	r2 = 0x0000000000000000
	Mem0[r5 + 0x0000000000000008:word64] = 0x0000000000000000
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	branch r1 == 0x0000000000000000 l00000000000696F4_ds_t
	// succ:  l00000000000696F4_ds_f l00000000000696F4_ds_t
l00000000000696F4_ds_f:
	goto l0000000000069714
	// succ:  l0000000000069714
l00000000000696F4_ds_t:
	goto l0000000000069730
	// succ:  l0000000000069730
l0000000000069714:
	r1 = 0x00000000000E0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000030:word64]
	// succ:  l0000000000069730
l0000000000069730:
	Mem0[sp + 0x0000000000000038:word64] = r5
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceFlush_exit
l0000000000069744:
	r1 = 0x0000000000010000
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.sysAlloc (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000030:word64] = r5
	r2 = 0x0000000000000000
	branch r5 != 0x0000000000000000 l0000000000069744_ds_t
	// succ:  l0000000000069744_ds_f l0000000000069744_ds_t
l0000000000069744_ds_f:
	goto l0000000000069788
	// succ:  l0000000000069788
l0000000000069744_ds_t:
	goto l00000000000696E0
	// succ:  l00000000000696E0
l0000000000069788:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000697B4:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006A00:word64]
	Mem0[r1:word64] = r3
	goto l00000000000696A4
	// succ:  l00000000000696A4
l00000000000697CC:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:byte] = (byte) r1
	goto l000000000006964C
	// succ:  l000000000006964C
runtime.traceFlush_exit:


// runtime.(*traceBuf).varint
// Return size: 0
void runtime.(*traceBuf).varint()
runtime.(*traceBuf).varint_entry:
	// succ:  l00000000000697E0
l00000000000697E0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000697E0_ds_t
	// succ:  l00000000000697E0_ds_f l00000000000697E0_ds_t
l00000000000697E0_ds_f:
	goto l00000000000697F0
	// succ:  l00000000000697F0
l00000000000697E0_ds_t:
	goto l0000000000069804
	// succ:  l0000000000069804
l00000000000697F0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000697E0
	// succ:  l00000000000697E0
l0000000000069804:
	sp = sp + -8
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000010:word64]
	r4 = Mem0[sp + 0x0000000000000018:word64]
	r5 = Mem0[r6 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r23 = (word64) (r4 <u r2)
	branch r23 != 0x0000000000000000 l0000000000069804_ds_t
	// succ:  l0000000000069804_ds_f l0000000000069804_ds_t
l0000000000069804_ds_f:
	goto l0000000000069828
	// succ:  l0000000000069828
l0000000000069804_ds_t:
	goto l0000000000069894
	// succ:  l0000000000069894
l0000000000069828:
	branch r6 != 0x0000000000000000 l0000000000069828_ds_t
	// succ:  l0000000000069828_ds_f l0000000000069828_ds_t
l0000000000069828_ds_f:
	goto l0000000000069830
	// succ:  l0000000000069830
l0000000000069828_ds_t:
	goto l0000000000069834
	// succ:  l0000000000069834
l0000000000069830:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000069834
l0000000000069834:
	lo = r2 / r6
	hi = r2 % r6
	r3 = 0x000000000000FBE8
	r1 = r5
	r23 = (word64) (r5 <u r3)
	branch r23 != 0x0000000000000000 l0000000000069834_ds_t
	// succ:  l0000000000069834_ds_f l0000000000069834_ds_t
l0000000000069834_ds_f:
	goto l000000000006984C
	// succ:  l000000000006984C
l0000000000069834_ds_t:
	goto l0000000000069858
	// succ:  l0000000000069858
l000000000006984C:
	call runtime.panicindex (retsize: 0;)
l0000000000069858:
	lo = r2 / r2
	hi = r2 % r2
	r1 = r4 + 0x00000000000000FF
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3 + 0x00000000000000FF
	r1 = r1 | r3
	Mem0[r2:byte] = (byte) r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r5
	hi = r1 % r5
	r5 = r1
l0000000000069894:
	branch r6 != 0x0000000000000000 l0000000000069894_ds_t
	// succ:  l0000000000069894_ds_f l0000000000069894_ds_t
l0000000000069894_ds_f:
	goto l000000000006989C
	// succ:  l000000000006989C
l0000000000069894_ds_t:
	goto l00000000000698A0
	// succ:  l00000000000698A0
l000000000006989C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000698A0
l00000000000698A0:
	lo = r2 / r6
	hi = r2 % r6
	r3 = 0x000000000000FBE8
	r1 = r5
	r23 = (word64) (r5 <u r3)
	branch r23 != 0x0000000000000000 l00000000000698A0_ds_t
	// succ:  l00000000000698A0_ds_f l00000000000698A0_ds_t
l00000000000698A0_ds_f:
	goto l00000000000698B8
	// succ:  l00000000000698B8
l00000000000698A0_ds_t:
	goto l00000000000698C4
	// succ:  l00000000000698C4
l00000000000698B8:
	call runtime.panicindex (retsize: 0;)
l00000000000698C4:
	lo = r2 / r2
	hi = r2 % r2
	r3 = r4 + 0x00000000000000FF
	Mem0[r2:byte] = (byte) r3
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r3 / r5
	hi = r3 % r5
	Mem0[r6 + 0x0000000000000010:word64] = r3
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*traceBuf).varint_exit
runtime.(*traceBuf).varint_exit:


// runtime.(*traceStackTable).put
// Return size: 0
void runtime.(*traceStackTable).put()
runtime.(*traceStackTable).put_entry:
	// succ:  l00000000000698F0
l00000000000698F0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000698F0_ds_t
	// succ:  l00000000000698F0_ds_f l00000000000698F0_ds_t
l00000000000698F0_ds_f:
	goto l0000000000069900
	// succ:  l0000000000069900
l00000000000698F0_ds_t:
	goto l0000000000069914
	// succ:  l0000000000069914
l0000000000069900:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000698F0
	// succ:  l00000000000698F0
l0000000000069914:
	sp = sp + -128
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000098:word64]
runtime.(*traceStackTable).put_exit:


// runtime.(*traceStackTable).find
// Return size: 0
void runtime.(*traceStackTable).find()
runtime.(*traceStackTable).find_entry:
	// succ:  l0000000000069D20
l0000000000069D20:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000069D20_ds_t
	// succ:  l0000000000069D20_ds_f l0000000000069D20_ds_t
l0000000000069D20_ds_f:
	goto l0000000000069D30
	// succ:  l0000000000069D30
l0000000000069D20_ds_t:
	goto l0000000000069D44
	// succ:  l0000000000069D44
l0000000000069D30:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000069D20
	// succ:  l0000000000069D20
l0000000000069D44:
	sp = sp + -8
	Mem0[sp:word64] = ra
	r11 = Mem0[sp + 0x0000000000000030:word64]
	r10 = Mem0[sp + 0x0000000000000018:word64]
	r9 = Mem0[sp + 0x0000000000000020:word64]
runtime.(*traceStackTable).find_exit:


// runtime.(*traceStackTable).newStack
// Return size: 0
void runtime.(*traceStackTable).newStack()
runtime.(*traceStackTable).newStack_entry:
	// succ:  l0000000000069F00
l0000000000069F00:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000069F00_ds_t
	// succ:  l0000000000069F00_ds_f l0000000000069F00_ds_t
l0000000000069F00_ds_f:
	goto l0000000000069F10
	// succ:  l0000000000069F10
l0000000000069F00_ds_t:
	goto l0000000000069F24
	// succ:  l0000000000069F24
l0000000000069F10:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000069F00
	// succ:  l0000000000069F00
l0000000000069F24:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000030:word64]
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000069F24_ds_t
	// succ:  l0000000000069F24_ds_f l0000000000069F24_ds_t
l0000000000069F24_ds_f:
	goto l0000000000069F44
	// succ:  l0000000000069F44
l0000000000069F24_ds_t:
	goto l0000000000069F48
	// succ:  l0000000000069F48
l0000000000069F44:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000069F48
l0000000000069F48:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.(*traceStackTable).newStack_exit:


// runtime.(*traceAlloc).alloc
// Return size: 0
void runtime.(*traceAlloc).alloc()
runtime.(*traceAlloc).alloc_entry:
	// succ:  l0000000000069F88
l0000000000069F88:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000069F88_ds_t
	// succ:  l0000000000069F88_ds_f l0000000000069F88_ds_t
l0000000000069F88_ds_f:
	goto l0000000000069F98
	// succ:  l0000000000069F98
l0000000000069F88_ds_t:
	goto l0000000000069FAC
	// succ:  l0000000000069FAC
l0000000000069F98:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000069F88
	// succ:  l0000000000069F88
l0000000000069FAC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000030:word64]
	r7 = Mem0[sp + 0x0000000000000038:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r7 / r7
	hi = r7 % r7
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.(*traceAlloc).alloc_exit:


// runtime.traceGomaxprocs
// Return size: 0
void runtime.traceGomaxprocs()
runtime.traceGomaxprocs_entry:
	// succ:  l000000000006A148
l000000000006A148:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006A148_ds_t
	// succ:  l000000000006A148_ds_f l000000000006A148_ds_t
l000000000006A148_ds_f:
	goto l000000000006A158
	// succ:  l000000000006A158
l000000000006A148_ds_t:
	goto l000000000006A16C
	// succ:  l000000000006A16C
l000000000006A158:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006A148
	// succ:  l000000000006A148
l000000000006A16C:
	sp = sp + -80
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	r2 = (word64) Mem0[sp + 0x0000000000000058:int32]
	Mem0[r1:word64] = r2
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	Mem0[sp + 0x0000000000000040:word64] = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000048:word64] = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGomaxprocs_exit
runtime.traceGomaxprocs_exit:


// runtime.traceProcStart
// Return size: 0
void runtime.traceProcStart()
runtime.traceProcStart_entry:
	// succ:  l000000000006A1D8
l000000000006A1D8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006A1D8_ds_t
	// succ:  l000000000006A1D8_ds_f l000000000006A1D8_ds_t
l000000000006A1D8_ds_f:
	goto l000000000006A1E8
	// succ:  l000000000006A1E8
l000000000006A1D8_ds_t:
	goto l000000000006A1FC
	// succ:  l000000000006A1FC
l000000000006A1E8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006A1D8
	// succ:  l000000000006A1D8
l000000000006A1FC:
	sp = sp + -80
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	branch r1 != 0x0000000000000000 l000000000006A1FC_ds_t
	// succ:  l000000000006A1FC_ds_f l000000000006A1FC_ds_t
l000000000006A1FC_ds_f:
	goto l000000000006A214
	// succ:  l000000000006A214
l000000000006A1FC_ds_t:
	goto l000000000006A218
	// succ:  l000000000006A218
l000000000006A214:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006A218
l000000000006A218:
	r3 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r3 + 0x00000000000000C0:int32]
	Mem0[r1:word64] = r2
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	Mem0[sp + 0x0000000000000040:word64] = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000048:word64] = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceProcStart_exit
runtime.traceProcStart_exit:


// runtime.traceProcStop
// Return size: 0
void runtime.traceProcStop()
runtime.traceProcStop_entry:
	// succ:  l000000000006A278
l000000000006A278:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006A278_ds_t
	// succ:  l000000000006A278_ds_f l000000000006A278_ds_t
l000000000006A278_ds_f:
	goto l000000000006A288
	// succ:  l000000000006A288
l000000000006A278_ds_t:
	goto l000000000006A29C
	// succ:  l000000000006A29C
l000000000006A288:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006A278
	// succ:  l000000000006A278
l000000000006A29C:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r4 = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r3 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = Mem0[r3 + 0x00000000000000B0:word64]
	Mem0[sp + 0x0000000000000030:word64] = r2
	Mem0[sp + 0x0000000000000038:word64] = r3
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r2 = Mem0[sp + 0x0000000000000048:word64]
	r3 = r2
	Mem0[r1:word64] = r2
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[r4 + 0x00000000000000B0:word64] = r2
	r2 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r4 + 0x00000000000000E0:word32] = (word32) r2
	r1 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000006A29C_ds_t
	// succ:  l000000000006A29C_ds_f l000000000006A29C_ds_t
l000000000006A29C_ds_f:
	goto l000000000006A360
	// succ:  l000000000006A360
l000000000006A29C_ds_t:
	goto l000000000006A374
	// succ:  l000000000006A374
l000000000006A360:
	r1 = (word64) Mem0[r30 + 0x00000000000000E8:byte]
	branch r1 == 0x0000000000000000 l000000000006A360_ds_t
	// succ:  l000000000006A360_ds_f l000000000006A360_ds_t
l000000000006A360_ds_f:
	goto l000000000006A36C
	// succ:  l000000000006A36C
l000000000006A360_ds_t:
	goto l000000000006A374
	// succ:  l000000000006A374
l000000000006A36C:
l000000000006A374:
	r4 = Mem0[sp:word64]
	sp = sp + 64
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceProcStop_exit
runtime.traceProcStop_exit:


// runtime.traceGCStart
// Return size: 0
void runtime.traceGCStart()
runtime.traceGCStart_entry:
	// succ:  l000000000006A388
l000000000006A388:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006A388_ds_t
	// succ:  l000000000006A388_ds_f l000000000006A388_ds_t
l000000000006A388_ds_f:
	goto l000000000006A398
	// succ:  l000000000006A398
l000000000006A388_ds_t:
	goto l000000000006A3AC
	// succ:  l000000000006A3AC
l000000000006A398:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006A388
	// succ:  l000000000006A388
l000000000006A3AC:
	sp = sp + -80
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 - 0x0000000000006A20:word64]
	Mem0[r1:word64] = r2
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	Mem0[sp + 0x0000000000000040:word64] = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000048:word64] = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	call runtime.traceEvent (retsize: 0;)
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006A20:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006A20:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGCStart_exit
runtime.traceGCStart_exit:


// runtime.traceGCDone
// Return size: 0
void runtime.traceGCDone()
runtime.traceGCDone_entry:
	// succ:  l000000000006A440
l000000000006A440:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006A440_ds_t
	// succ:  l000000000006A440_ds_f l000000000006A440_ds_t
l000000000006A440_ds_f:
	goto l000000000006A450
	// succ:  l000000000006A450
l000000000006A440_ds_t:
	goto l000000000006A464
	// succ:  l000000000006A464
l000000000006A450:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006A440
	// succ:  l000000000006A440
l000000000006A464:
	sp = sp + -48
	Mem0[sp:word64] = ra
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGCDone_exit
runtime.traceGCDone_exit:


// runtime.traceGCScanStart
// Return size: 0
void runtime.traceGCScanStart()
runtime.traceGCScanStart_entry:
	// succ:  l000000000006A4A8
l000000000006A4A8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006A4A8_ds_t
	// succ:  l000000000006A4A8_ds_f l000000000006A4A8_ds_t
l000000000006A4A8_ds_f:
	goto l000000000006A4B8
	// succ:  l000000000006A4B8
l000000000006A4A8_ds_t:
	goto l000000000006A4CC
	// succ:  l000000000006A4CC
l000000000006A4B8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006A4A8
	// succ:  l000000000006A4A8
l000000000006A4CC:
	sp = sp + -48
	Mem0[sp:word64] = ra
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGCScanStart_exit
runtime.traceGCScanStart_exit:


// runtime.traceGCScanDone
// Return size: 0
void runtime.traceGCScanDone()
runtime.traceGCScanDone_entry:
	// succ:  l000000000006A510
l000000000006A510:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006A510_ds_t
	// succ:  l000000000006A510_ds_f l000000000006A510_ds_t
l000000000006A510_ds_f:
	goto l000000000006A520
	// succ:  l000000000006A520
l000000000006A510_ds_t:
	goto l000000000006A534
	// succ:  l000000000006A534
l000000000006A520:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006A510
	// succ:  l000000000006A510
l000000000006A534:
	sp = sp + -48
	Mem0[sp:word64] = ra
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGCScanDone_exit
runtime.traceGCScanDone_exit:


// runtime.traceGCSweepStart
// Return size: 0
void runtime.traceGCSweepStart()
runtime.traceGCSweepStart_entry:
	// succ:  l000000000006A578
l000000000006A578:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006A578_ds_t
	// succ:  l000000000006A578_ds_f l000000000006A578_ds_t
l000000000006A578_ds_f:
	goto l000000000006A588
	// succ:  l000000000006A588
l000000000006A578_ds_t:
	goto l000000000006A59C
	// succ:  l000000000006A59C
l000000000006A588:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006A578
	// succ:  l000000000006A578
l000000000006A59C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGCSweepStart_exit
runtime.traceGCSweepStart_exit:


// runtime.traceGCSweepDone
// Return size: 0
void runtime.traceGCSweepDone()
runtime.traceGCSweepDone_entry:
	// succ:  l000000000006A5E0
l000000000006A5E0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006A5E0_ds_t
	// succ:  l000000000006A5E0_ds_f l000000000006A5E0_ds_t
l000000000006A5E0_ds_f:
	goto l000000000006A5F0
	// succ:  l000000000006A5F0
l000000000006A5E0_ds_t:
	goto l000000000006A604
	// succ:  l000000000006A604
l000000000006A5F0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006A5E0
	// succ:  l000000000006A5E0
l000000000006A604:
	sp = sp + -48
	Mem0[sp:word64] = ra
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGCSweepDone_exit
runtime.traceGCSweepDone_exit:


// runtime.traceGoCreate
// Return size: 0
void runtime.traceGoCreate()
runtime.traceGoCreate_entry:
	// succ:  l000000000006A648
l000000000006A648:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006A648_ds_t
	// succ:  l000000000006A648_ds_f l000000000006A648_ds_t
l000000000006A648_ds_f:
	goto l000000000006A658
	// succ:  l000000000006A658
l000000000006A648_ds_t:
	goto l000000000006A66C
	// succ:  l000000000006A66C
l000000000006A658:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006A648
	// succ:  l000000000006A648
l000000000006A66C:
	sp = sp + -112
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000078:word64]
	Mem0[r1 + 0x00000000000000F8:word64] = 0x0000000000000000
	r3 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = Mem0[r3 + 0x00000000000000B0:word64]
	Mem0[r1 + 0x0000000000000100:word64] = r2
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.newobject (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	r2 = Mem0[sp + 0x0000000000000080:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r1:word64] = r2
	lo = r5 / 0x0000000000000000
	hi = r5 % 0x0000000000000000
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	r3 = r1
	r1 = 0x00000000000E0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000058:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	Mem0[sp + 0x0000000000000060:word64] = r5
	Mem0[sp + 0x0000000000000018:word64] = r5
	r1 = r4
	Mem0[sp + 0x0000000000000068:word64] = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	call runtime.(*traceStackTable).put (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:uint32]
runtime.traceGoCreate_exit:


// runtime.traceGoStart
// Return size: 0
void runtime.traceGoStart()
runtime.traceGoStart_entry:
	// succ:  l000000000006A798
l000000000006A798:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006A798_ds_t
	// succ:  l000000000006A798_ds_f l000000000006A798_ds_t
l000000000006A798_ds_f:
	goto l000000000006A7A8
	// succ:  l000000000006A7A8
l000000000006A798_ds_t:
	goto l000000000006A7BC
	// succ:  l000000000006A7BC
l000000000006A7A8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006A798
	// succ:  l000000000006A798
l000000000006A7BC:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r4 = Mem0[r2 + 0x00000000000000A0:word64]
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r5 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = Mem0[r4 + 0x00000000000000F8:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4 + 0x00000000000000F8:word64] = r2
	r1 = Mem0[r4 + 0x0000000000000100:word64]
	branch r1 != r5 l000000000006A7BC_ds_t
	// succ:  l000000000006A7BC_ds_f l000000000006A7BC_ds_t
l000000000006A7BC_ds_f:
	goto l000000000006A7F0
	// succ:  l000000000006A7F0
l000000000006A7BC_ds_t:
	goto l000000000006A860
	// succ:  l000000000006A860
l000000000006A7F0:
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	lo = r5 / sp
	hi = r5 % sp
	branch r5 != 0x0000000000000000 l000000000006A7F0_ds_t
	// succ:  l000000000006A7F0_ds_f l000000000006A7F0_ds_t
l000000000006A7F0_ds_f:
	goto l000000000006A800
	// succ:  l000000000006A800
l000000000006A7F0_ds_t:
	goto l000000000006A804
	// succ:  l000000000006A804
l000000000006A800:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006A804
l000000000006A804:
	r3 = Mem0[r4 + 0x00000000000000C0:word64]
	Mem0[r5:word64] = r3
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r5
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	Mem0[sp + 0x0000000000000048:word64] = r5
	Mem0[sp + 0x0000000000000018:word64] = r5
	Mem0[sp + 0x0000000000000050:word64] = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000058:word64] = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGoStart_exit
l000000000006A860:
	Mem0[r4 + 0x0000000000000100:word64] = r5
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	lo = r5 / sp
	hi = r5 % sp
	branch r5 != 0x0000000000000000 l000000000006A860_ds_t
	// succ:  l000000000006A860_ds_f l000000000006A860_ds_t
l000000000006A860_ds_f:
	goto l000000000006A878
	// succ:  l000000000006A878
l000000000006A860_ds_t:
	goto l000000000006A87C
	// succ:  l000000000006A87C
l000000000006A878:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006A87C
l000000000006A87C:
	r3 = Mem0[r4 + 0x00000000000000C0:word64]
	Mem0[r5:word64] = r3
	r3 = Mem0[r4 + 0x00000000000000F8:word64]
	Mem0[r5 + 0x0000000000000008:word64] = r3
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r5
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	Mem0[sp + 0x0000000000000048:word64] = r5
	Mem0[sp + 0x0000000000000018:word64] = r5
	Mem0[sp + 0x0000000000000050:word64] = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000058:word64] = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGoStart_exit
runtime.traceGoStart_exit:


// runtime.traceGoEnd
// Return size: 0
void runtime.traceGoEnd()
runtime.traceGoEnd_entry:
	// succ:  l000000000006A8E0
l000000000006A8E0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006A8E0_ds_t
	// succ:  l000000000006A8E0_ds_f l000000000006A8E0_ds_t
l000000000006A8E0_ds_f:
	goto l000000000006A8F0
	// succ:  l000000000006A8F0
l000000000006A8E0_ds_t:
	goto l000000000006A904
	// succ:  l000000000006A904
l000000000006A8F0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006A8E0
	// succ:  l000000000006A8E0
l000000000006A904:
	sp = sp + -48
	Mem0[sp:word64] = ra
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGoEnd_exit
runtime.traceGoEnd_exit:


// runtime.traceGoSched
// Return size: 0
void runtime.traceGoSched()
runtime.traceGoSched_entry:
	// succ:  l000000000006A948
l000000000006A948:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006A948_ds_t
	// succ:  l000000000006A948_ds_f l000000000006A948_ds_t
l000000000006A948_ds_f:
	goto l000000000006A958
	// succ:  l000000000006A958
l000000000006A948_ds_t:
	goto l000000000006A96C
	// succ:  l000000000006A96C
l000000000006A958:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006A948
	// succ:  l000000000006A948
l000000000006A96C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	branch r30 != 0x0000000000000000 l000000000006A96C_ds_t
	// succ:  l000000000006A96C_ds_f l000000000006A96C_ds_t
l000000000006A96C_ds_f:
	goto l000000000006A97C
	// succ:  l000000000006A97C
l000000000006A96C_ds_t:
	goto l000000000006A980
	// succ:  l000000000006A980
l000000000006A97C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006A980
l000000000006A980:
	r3 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = Mem0[r3 + 0x00000000000000B0:word64]
	Mem0[r30 + 0x0000000000000100:word64] = r2
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGoSched_exit
runtime.traceGoSched_exit:


// runtime.traceGoPreempt
// Return size: 0
void runtime.traceGoPreempt()
runtime.traceGoPreempt_entry:
	// succ:  l000000000006A9C8
l000000000006A9C8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006A9C8_ds_t
	// succ:  l000000000006A9C8_ds_f l000000000006A9C8_ds_t
l000000000006A9C8_ds_f:
	goto l000000000006A9D8
	// succ:  l000000000006A9D8
l000000000006A9C8_ds_t:
	goto l000000000006A9EC
	// succ:  l000000000006A9EC
l000000000006A9D8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006A9C8
	// succ:  l000000000006A9C8
l000000000006A9EC:
	sp = sp + -48
	Mem0[sp:word64] = ra
	branch r30 != 0x0000000000000000 l000000000006A9EC_ds_t
	// succ:  l000000000006A9EC_ds_f l000000000006A9EC_ds_t
l000000000006A9EC_ds_f:
	goto l000000000006A9FC
	// succ:  l000000000006A9FC
l000000000006A9EC_ds_t:
	goto l000000000006AA00
	// succ:  l000000000006AA00
l000000000006A9FC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006AA00
l000000000006AA00:
	r3 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = Mem0[r3 + 0x00000000000000B0:word64]
	Mem0[r30 + 0x0000000000000100:word64] = r2
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGoPreempt_exit
runtime.traceGoPreempt_exit:


// runtime.traceGoPark
// Return size: 0
void runtime.traceGoPark()
runtime.traceGoPark_entry:
	// succ:  l000000000006AA48
l000000000006AA48:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006AA48_ds_t
	// succ:  l000000000006AA48_ds_f l000000000006AA48_ds_t
l000000000006AA48_ds_f:
	goto l000000000006AA58
	// succ:  l000000000006AA58
l000000000006AA48_ds_t:
	goto l000000000006AA6C
	// succ:  l000000000006AA6C
l000000000006AA58:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006AA48
	// succ:  l000000000006AA48
l000000000006AA6C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = (word64) Mem0[sp + 0x0000000000000038:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l000000000006AA6C_ds_t
	// succ:  l000000000006AA6C_ds_f l000000000006AA6C_ds_t
l000000000006AA6C_ds_f:
	goto l000000000006AA9C
	// succ:  l000000000006AA9C
l000000000006AA6C_ds_t:
	goto l000000000006AAC8
	// succ:  l000000000006AAC8
l000000000006AA9C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	call runtime.traceEvent (retsize: 0;)
l000000000006AAC8:
	r1 = (word64) Mem0[sp + 0x0000000000000038:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGoPark_exit
runtime.traceGoPark_exit:


// runtime.traceGoUnpark
// Return size: 0
void runtime.traceGoUnpark()
runtime.traceGoUnpark_entry:
	// succ:  l000000000006AB10
l000000000006AB10:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006AB10_ds_t
	// succ:  l000000000006AB10_ds_f l000000000006AB10_ds_t
l000000000006AB10_ds_f:
	goto l000000000006AB20
	// succ:  l000000000006AB20
l000000000006AB10_ds_t:
	goto l000000000006AB34
	// succ:  l000000000006AB34
l000000000006AB20:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006AB10
	// succ:  l000000000006AB10
l000000000006AB34:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000070:word64]
	r4 = Mem0[sp + 0x0000000000000068:word64]
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r5 = Mem0[r2 + 0x00000000000000B0:word64]
	r2 = Mem0[r4 + 0x00000000000000F8:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4 + 0x00000000000000F8:word64] = r2
	r1 = Mem0[r4 + 0x0000000000000100:word64]
	branch r1 != r5 l000000000006AB34_ds_t
	// succ:  l000000000006AB34_ds_f l000000000006AB34_ds_t
l000000000006AB34_ds_f:
	goto l000000000006AB68
	// succ:  l000000000006AB68
l000000000006AB34_ds_t:
	goto l000000000006ABD4
	// succ:  l000000000006ABD4
l000000000006AB68:
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	lo = r5 / sp
	hi = r5 % sp
	branch r5 != 0x0000000000000000 l000000000006AB68_ds_t
	// succ:  l000000000006AB68_ds_f l000000000006AB68_ds_t
l000000000006AB68_ds_f:
	goto l000000000006AB78
	// succ:  l000000000006AB78
l000000000006AB68_ds_t:
	goto l000000000006AB7C
	// succ:  l000000000006AB7C
l000000000006AB78:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006AB7C
l000000000006AB7C:
	r3 = Mem0[r4 + 0x00000000000000C0:word64]
	Mem0[r5:word64] = r3
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r5
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	Mem0[sp + 0x0000000000000010:word64] = r6
	Mem0[sp + 0x0000000000000048:word64] = r5
	Mem0[sp + 0x0000000000000018:word64] = r5
	Mem0[sp + 0x0000000000000050:word64] = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000058:word64] = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGoUnpark_exit
l000000000006ABD4:
	Mem0[r4 + 0x0000000000000100:word64] = r5
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	lo = r5 / sp
	hi = r5 % sp
	branch r5 != 0x0000000000000000 l000000000006ABD4_ds_t
	// succ:  l000000000006ABD4_ds_f l000000000006ABD4_ds_t
l000000000006ABD4_ds_f:
	goto l000000000006ABEC
	// succ:  l000000000006ABEC
l000000000006ABD4_ds_t:
	goto l000000000006ABF0
	// succ:  l000000000006ABF0
l000000000006ABEC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006ABF0
l000000000006ABF0:
	r3 = Mem0[r4 + 0x00000000000000C0:word64]
	Mem0[r5:word64] = r3
	r3 = Mem0[r4 + 0x00000000000000F8:word64]
	Mem0[r5 + 0x0000000000000008:word64] = r3
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r5
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	Mem0[sp + 0x0000000000000010:word64] = r6
	Mem0[sp + 0x0000000000000048:word64] = r5
	Mem0[sp + 0x0000000000000018:word64] = r5
	Mem0[sp + 0x0000000000000050:word64] = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000058:word64] = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGoUnpark_exit
runtime.traceGoUnpark_exit:


// runtime.traceGoSysCall
// Return size: 0
void runtime.traceGoSysCall()
runtime.traceGoSysCall_entry:
	// succ:  l000000000006AC50
l000000000006AC50:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006AC50_ds_t
	// succ:  l000000000006AC50_ds_f l000000000006AC50_ds_t
l000000000006AC50_ds_f:
	goto l000000000006AC60
	// succ:  l000000000006AC60
l000000000006AC50_ds_t:
	goto l000000000006AC74
	// succ:  l000000000006AC74
l000000000006AC60:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006AC50
	// succ:  l000000000006AC50
l000000000006AC74:
	sp = sp + -48
	Mem0[sp:word64] = ra
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGoSysCall_exit
runtime.traceGoSysCall_exit:


// runtime.traceGoSysExit
// Return size: 0
void runtime.traceGoSysExit()
runtime.traceGoSysExit_entry:
	// succ:  l000000000006ACB8
l000000000006ACB8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006ACB8_ds_t
	// succ:  l000000000006ACB8_ds_f l000000000006ACB8_ds_t
l000000000006ACB8_ds_f:
	goto l000000000006ACC8
	// succ:  l000000000006ACC8
l000000000006ACB8_ds_t:
	goto l000000000006ACDC
	// succ:  l000000000006ACDC
l000000000006ACC8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006ACB8
	// succ:  l000000000006ACB8
l000000000006ACDC:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000068:word64]
	branch r6 == 0x0000000000000000 l000000000006ACDC_ds_t
	// succ:  l000000000006ACDC_ds_f l000000000006ACDC_ds_t
l000000000006ACDC_ds_f:
	goto l000000000006ACF0
	// succ:  l000000000006ACF0
l000000000006ACDC_ds_t:
	goto l000000000006AD0C
	// succ:  l000000000006AD0C
l000000000006ACF0:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000006A40:word64]
	r23 = (word64) (r6 < r1)
	branch r23 == 0x0000000000000000 l000000000006ACF0_ds_t
	// succ:  l000000000006ACF0_ds_f l000000000006ACF0_ds_t
l000000000006ACF0_ds_f:
	goto l000000000006AD08
	// succ:  l000000000006AD08
l000000000006ACF0_ds_t:
	goto l000000000006AD0C
	// succ:  l000000000006AD0C
l000000000006AD08:
	r6 = 0x0000000000000000
	// succ:  l000000000006AD0C
l000000000006AD0C:
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r4 = Mem0[r2 + 0x00000000000000A0:word64]
	r2 = Mem0[r4 + 0x00000000000000F8:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r4 + 0x00000000000000F8:word64] = r2
	r3 = Mem0[r4 + 0x0000000000000030:word64]
	r2 = Mem0[r3 + 0x00000000000000B0:word64]
	Mem0[r4 + 0x0000000000000100:word64] = r2
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	lo = r5 / sp
	hi = r5 % sp
	branch r5 != 0x0000000000000000 l000000000006AD0C_ds_t
	// succ:  l000000000006AD0C_ds_f l000000000006AD0C_ds_t
l000000000006AD0C_ds_f:
	goto l000000000006AD48
	// succ:  l000000000006AD48
l000000000006AD0C_ds_t:
	goto l000000000006AD4C
	// succ:  l000000000006AD4C
l000000000006AD48:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006AD4C
l000000000006AD4C:
	r3 = Mem0[r4 + 0x00000000000000C0:word64]
	Mem0[r5:word64] = r3
	r3 = Mem0[r4 + 0x00000000000000F8:word64]
	Mem0[r5 + 0x0000000000000008:word64] = r3
	r1 = r5
	r2 = r6
	Mem0[sp + 0x0000000000000068:word64] = r6
	r3 = r6
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	branch r4 != 0x0000000000000000 l000000000006AD4C_ds_t
	// succ:  l000000000006AD4C_ds_f l000000000006AD4C_ds_t
l000000000006AD4C_ds_f:
	goto l000000000006AD78
	// succ:  l000000000006AD78
l000000000006AD4C_ds_t:
	goto l000000000006AD84
	// succ:  l000000000006AD84
l000000000006AD78:
	call runtime.panicdivide (retsize: 0;)
l000000000006AD84:
	lo = r6 / r4
	hi = r6 % r4
	r3 = lo
	Mem0[r5 + 0x0000000000000010:word64] = r3
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r5
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	Mem0[sp + 0x0000000000000048:word64] = r5
	Mem0[sp + 0x0000000000000018:word64] = r5
	Mem0[sp + 0x0000000000000050:word64] = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000058:word64] = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGoSysExit_exit
runtime.traceGoSysExit_exit:


// runtime.traceGoSysBlock
// Return size: 0
void runtime.traceGoSysBlock()
runtime.traceGoSysBlock_entry:
	// succ:  l000000000006ADE8
l000000000006ADE8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006ADE8_ds_t
	// succ:  l000000000006ADE8_ds_f l000000000006ADE8_ds_t
l000000000006ADE8_ds_f:
	goto l000000000006ADF8
	// succ:  l000000000006ADF8
l000000000006ADE8_ds_t:
	goto l000000000006AE0C
	// succ:  l000000000006AE0C
l000000000006ADF8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006ADE8
	// succ:  l000000000006ADE8
l000000000006AE0C:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r4 = r30
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r1 + 0x00000000000000E0:int32]
	r5 = r2
	r2 = r5
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 + r3
	r2 = r2
	Mem0[r1 + 0x00000000000000E0:word32] = (word32) r2
	r3 = Mem0[r30 + 0x0000000000000030:word64]
	r2 = Mem0[r3 + 0x00000000000000B0:word64]
	Mem0[sp + 0x0000000000000030:word64] = r2
	Mem0[sp + 0x0000000000000038:word64] = r3
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r2 = Mem0[sp + 0x0000000000000048:word64]
	r3 = r2
	Mem0[r1:word64] = r2
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[r4 + 0x00000000000000B0:word64] = r2
	r2 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r4 + 0x00000000000000E0:word32] = (word32) r2
	r1 = (word64) Mem0[r4 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000006AE0C_ds_t
	// succ:  l000000000006AE0C_ds_f l000000000006AE0C_ds_t
l000000000006AE0C_ds_f:
	goto l000000000006AED0
	// succ:  l000000000006AED0
l000000000006AE0C_ds_t:
	goto l000000000006AEE4
	// succ:  l000000000006AEE4
l000000000006AED0:
	r1 = (word64) Mem0[r30 + 0x00000000000000E8:byte]
	branch r1 == 0x0000000000000000 l000000000006AED0_ds_t
	// succ:  l000000000006AED0_ds_f l000000000006AED0_ds_t
l000000000006AED0_ds_f:
	goto l000000000006AEDC
	// succ:  l000000000006AEDC
l000000000006AED0_ds_t:
	goto l000000000006AEE4
	// succ:  l000000000006AEE4
l000000000006AEDC:
l000000000006AEE4:
	r4 = Mem0[sp:word64]
	sp = sp + 64
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceGoSysBlock_exit
runtime.traceGoSysBlock_exit:


// runtime.traceHeapAlloc
// Return size: 0
void runtime.traceHeapAlloc()
runtime.traceHeapAlloc_entry:
	// succ:  l000000000006AEF8
l000000000006AEF8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006AEF8_ds_t
	// succ:  l000000000006AEF8_ds_f l000000000006AEF8_ds_t
l000000000006AEF8_ds_f:
	goto l000000000006AF08
	// succ:  l000000000006AF08
l000000000006AEF8_ds_t:
	goto l000000000006AF1C
	// succ:  l000000000006AF1C
l000000000006AF08:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006AEF8
	// succ:  l000000000006AEF8
l000000000006AF1C:
	sp = sp + -80
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 - 0x0000000000003F78:word64]
	Mem0[r1:word64] = r2
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	Mem0[sp + 0x0000000000000040:word64] = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000048:word64] = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceHeapAlloc_exit
runtime.traceHeapAlloc_exit:


// runtime.traceNextGC
// Return size: 0
void runtime.traceNextGC()
runtime.traceNextGC_entry:
	// succ:  l000000000006AF90
l000000000006AF90:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006AF90_ds_t
	// succ:  l000000000006AF90_ds_f l000000000006AF90_ds_t
l000000000006AF90_ds_f:
	goto l000000000006AFA0
	// succ:  l000000000006AFA0
l000000000006AF90_ds_t:
	goto l000000000006AFB4
	// succ:  l000000000006AFB4
l000000000006AFA0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006AF90
	// succ:  l000000000006AF90
l000000000006AFB4:
	sp = sp + -80
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000030:word64] = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 - 0x00000000000055F8:word64]
	Mem0[r1:word64] = r2
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r2 = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	Mem0[sp + 0x0000000000000040:word64] = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000048:word64] = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	call runtime.traceEvent (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceNextGC_exit
runtime.traceNextGC_exit:


// runtime.tracebackinit
// Return size: 0
void runtime.tracebackinit()
runtime.tracebackinit_entry:
	// succ:  l000000000006B028
l000000000006B028:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -312
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000006B028_ds_t
	// succ:  l000000000006B028_ds_f l000000000006B028_ds_t
l000000000006B028_ds_f:
	goto l000000000006B03C
	// succ:  l000000000006B03C
l000000000006B028_ds_t:
	goto l000000000006B050
	// succ:  l000000000006B050
l000000000006B03C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006B028
	// succ:  l000000000006B028
l000000000006B050:
	sp = sp + -312
	r3 = 0x00000000000A0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x00000000000000C8:word64] = r1
	Mem0[sp + 0x00000000000000D0:word64] = r3
	lo = r1 / sp
	hi = r1 % sp
runtime.tracebackinit_exit:


// runtime.tracebackdefers
// Return size: 0
void runtime.tracebackdefers()
runtime.tracebackdefers_entry:
	// succ:  l000000000006B4C8
l000000000006B4C8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -152
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000006B4C8_ds_t
	// succ:  l000000000006B4C8_ds_f l000000000006B4C8_ds_t
l000000000006B4C8_ds_f:
	goto l000000000006B4DC
	// succ:  l000000000006B4DC
l000000000006B4C8_ds_t:
	goto l000000000006B4F0
	// succ:  l000000000006B4F0
l000000000006B4DC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006B4C8
	// succ:  l000000000006B4C8
l000000000006B4F0:
	sp = sp + -152
	Mem0[sp:word64] = ra
	lo = r1 / sp
	hi = r1 % sp
	Mem0[r1:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000010:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000028:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000048:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	r3 = Mem0[r1 + 0x0000000000000028:word64]
	branch r3 == 0x0000000000000000 l000000000006B4F0_ds_t
	// succ:  l000000000006B4F0_ds_f l000000000006B4F0_ds_t
l000000000006B4F0_ds_f:
	goto l000000000006B534
	// succ:  l000000000006B534
l000000000006B4F0_ds_t:
	goto l000000000006B5B8
	// succ:  l000000000006B5B8
l000000000006B534:
	Mem0[sp + 0x0000000000000040:word64] = r3
	r3 = Mem0[r3 + 0x0000000000000018:word64]
	branch r3 != 0x0000000000000000 l000000000006B534_ds_t
	// succ:  l000000000006B534_ds_f l000000000006B534_ds_t
l000000000006B534_ds_f:
	goto l000000000006B544
	// succ:  l000000000006B544
l000000000006B534_ds_t:
	goto l000000000006B5C8
	// succ:  l000000000006B5C8
l000000000006B544:
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000080:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000088:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000090:word64] = 0x0000000000000000
	goto l000000000006B558
	// succ:  l000000000006B558
l000000000006B544_ds_f:
	goto l000000000006B598
	// succ:  l000000000006B598
l000000000006B544_ds_t:
	goto l000000000006B5A8
	// succ:  l000000000006B5A8
l000000000006B558:
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
	lo = r2 / sp
	hi = r2 % sp
	r2 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x00000000000000B0:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r22 = Mem0[sp + 0x00000000000000A8:word64]
	r1 = Mem0[r22:word64]
	call r1 (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l000000000006B544_ds_t
	goto l000000000006B544_ds_f
	// succ:  l000000000006B544_ds_f l000000000006B544_ds_t
l000000000006B598:
	r4 = Mem0[sp:word64]
	sp = sp + 152
	call r4 (retsize: 0;)
	return
	// succ:  runtime.tracebackdefers_exit
l000000000006B5A8:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r3 = Mem0[r1 + 0x0000000000000028:word64]
	branch r3 != 0x0000000000000000 l000000000006B5A8_ds_t
	// succ:  l000000000006B5A8_ds_f l000000000006B5A8_ds_t
l000000000006B5A8_ds_f:
	goto l000000000006B5B8
	// succ:  l000000000006B5B8
l000000000006B5A8_ds_t:
	goto l000000000006B534
	// succ:  l000000000006B534
l000000000006B5B8:
	r4 = Mem0[sp:word64]
	sp = sp + 152
	call r4 (retsize: 0;)
	return
	r4 = Mem0[sp:word64]
	sp = sp + 152
	call r4 (retsize: 0;)
	return
	// succ:  runtime.tracebackdefers_exit runtime.tracebackdefers_exit
l000000000006B5C8:
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000050:word64] = r2
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.findfunc (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000038:word64] = r4
	r2 = 0x0000000000000000
	branch r4 != 0x0000000000000000 l000000000006B5C8_ds_t
	// succ:  l000000000006B5C8_ds_f l000000000006B5C8_ds_t
l000000000006B5C8_ds_f:
	goto l000000000006B5F4
	// succ:  l000000000006B5F4
l000000000006B5C8_ds_t:
	goto l000000000006B680
	// succ:  l000000000006B680
l000000000006B5F4:
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000030:word64] = r1
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000006B680:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r2 = Mem0[sp + 0x0000000000000040:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000080:word64] = r2
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r4
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	call runtime.getArgInfo (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000088:word64] = r1
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000090:word64] = r1
	goto l000000000006B558
	// succ:  l000000000006B558
runtime.tracebackdefers_exit:


// runtime.gentraceback
// Return size: 0
void runtime.gentraceback()
runtime.gentraceback_entry:
	// succ:  l000000000006B6D0
l000000000006B6D0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -672
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000006B6D0_ds_t
	// succ:  l000000000006B6D0_ds_f l000000000006B6D0_ds_t
l000000000006B6D0_ds_f:
	goto l000000000006B6E4
	// succ:  l000000000006B6E4
l000000000006B6D0_ds_t:
	goto l000000000006B6F8
	// succ:  l000000000006B6F8
l000000000006B6E4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006B6D0
	// succ:  l000000000006B6D0
l000000000006B6F8:
	sp = sp + -672
	Mem0[sp:word64] = ra
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x00000000000068D8:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000006B6F8_ds_t
	// succ:  l000000000006B6F8_ds_f l000000000006B6F8_ds_t
l000000000006B6F8_ds_f:
	goto l000000000006B718
	// succ:  l000000000006B718
l000000000006B6F8_ds_t:
	goto l000000000006B738
	// succ:  l000000000006B738
l000000000006B718:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000006B738:
	r3 = r30
	Mem0[sp + 0x00000000000001B0:word64] = r30
	r2 = Mem0[sp + 0x00000000000002C0:word64]
	r1 = r30
	branch r30 != r2 l000000000006B738_ds_t
	// succ:  l000000000006B738_ds_f l000000000006B738_ds_t
l000000000006B738_ds_f:
	goto l000000000006B750
	// succ:  l000000000006B750
l000000000006B738_ds_t:
	goto l000000000006B784
	// succ:  l000000000006B784
l000000000006B750:
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A0:word64]
	r2 = r3
	branch r1 != r3 l000000000006B750_ds_t
	// succ:  l000000000006B750_ds_f l000000000006B750_ds_t
l000000000006B750_ds_f:
	goto l000000000006B764
	// succ:  l000000000006B764
l000000000006B750_ds_t:
	goto l000000000006B784
	// succ:  l000000000006B784
l000000000006B764:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000006B784:
	call runtime.gotraceback (retsize: 0;)
	r9 = Mem0[sp + 0x00000000000002B8:word64]
	r8 = Mem0[sp + 0x00000000000002A8:word64]
	r7 = Mem0[sp + 0x00000000000002B0:word64]
	r6 = Mem0[sp + 0x00000000000002C0:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000008:int32]
	Mem0[sp + 0x0000000000000050:word32] = (word32) r1
	r2 = Mem0[r6 + 0x00000000000000A0:word64]
	r1 = r6
	Mem0[sp + 0x00000000000001A8:word64] = r6
	r3 = Mem0[r6 + 0x0000000000000090:word64]
	r4 = Mem0[r6 + 0x0000000000000098:word64]
	r23 = (word64) (r3 <u r2)
	branch r23 != 0x0000000000000000 l000000000006B784_ds_t
	// succ:  l000000000006B784_ds_f l000000000006B784_ds_t
l000000000006B784_ds_f:
	goto l000000000006B7C4
	// succ:  l000000000006B7C4
l000000000006B784_ds_t:
	goto l000000000006D244
	// succ:  l000000000006D244
l000000000006B7C4:
l000000000006D244:
	call runtime.panicslice (retsize: 0;)
runtime.gentraceback_exit:


// runtime.getArgInfo
// Return size: 0
void runtime.getArgInfo()
runtime.getArgInfo_entry:
	// succ:  l000000000006D258
l000000000006D258:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006D258_ds_t
	// succ:  l000000000006D258_ds_f l000000000006D258_ds_t
l000000000006D258_ds_f:
	goto l000000000006D268
	// succ:  l000000000006D268
l000000000006D258_ds_t:
	goto l000000000006D27C
	// succ:  l000000000006D27C
l000000000006D268:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006D258
	// succ:  l000000000006D258
l000000000006D27C:
	sp = sp + -88
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000068:word64]
	Mem0[sp + 0x0000000000000080:word64] = 0x0000000000000000
	r2 = (word64) Mem0[r3 + 0x000000000000000C:int32]
	Mem0[sp + 0x0000000000000078:word64] = r2
	r1 = (word64) Mem0[sp + 0x0000000000000070:byte]
	branch r1 == 0x0000000000000000 l000000000006D27C_ds_t
	// succ:  l000000000006D27C_ds_f l000000000006D27C_ds_t
l000000000006D27C_ds_f:
	goto l000000000006D2A0
	// succ:  l000000000006D2A0
l000000000006D27C_ds_t:
	goto l000000000006D428
	// succ:  l000000000006D428
l000000000006D2A0:
	r1 = (word64) Mem0[r3 + 0x000000000000000C:int32]
	r2 = 0xFFFFFFFF80000000
	r2 = r2
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000006D2A0_ds_t
	// succ:  l000000000006D2A0_ds_f l000000000006D2A0_ds_t
l000000000006D2A0_ds_f:
	goto l000000000006D2BC
	// succ:  l000000000006D2BC
l000000000006D2A0_ds_t:
	goto l000000000006D428
	// succ:  l000000000006D428
l000000000006D2BC:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.funcname (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000048:word64] = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000050:word64] = r1
	r3 = r1
l000000000006D428:
	r4 = Mem0[sp:word64]
	sp = sp + 88
	call r4 (retsize: 0;)
	return
	// succ:  runtime.getArgInfo_exit
runtime.getArgInfo_exit:


// runtime.tracebackCgoContext
// Return size: 0
void runtime.tracebackCgoContext()
runtime.tracebackCgoContext_entry:
	// succ:  l000000000006D490
l000000000006D490:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -672
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000006D490_ds_t
	// succ:  l000000000006D490_ds_f l000000000006D490_ds_t
l000000000006D490_ds_f:
	goto l000000000006D4A4
	// succ:  l000000000006D4A4
l000000000006D490_ds_t:
	goto l000000000006D4B8
	// succ:  l000000000006D4B8
l000000000006D4A4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006D490
	// succ:  l000000000006D490
l000000000006D4B8:
	sp = sp + -672
	Mem0[sp:word64] = ra
	lo = r1 / sp
	hi = r1 % sp
	Mem0[r1:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000010:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000028:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000050:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000060:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000068:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000070:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000078:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000080:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000088:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000090:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000098:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000A0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000A8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000B0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000B8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000C0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000C8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000D0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000D8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000E0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000E8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000F0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000F8:word64] = 0x0000000000000000
	lo = r2 / sp
	hi = r2 % sp
	branch r2 != 0x0000000000000000 l000000000006D4B8_ds_t
	// succ:  l000000000006D4B8_ds_f l000000000006D4B8_ds_t
l000000000006D4B8_ds_f:
	goto l000000000006D550
	// succ:  l000000000006D550
l000000000006D4B8_ds_t:
	goto l000000000006D554
	// succ:  l000000000006D554
l000000000006D550:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006D554
l000000000006D554:
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r1 = Mem0[sp + 0x00000000000002B8:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000250:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r2
	Mem0[sp + 0x0000000000000258:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000260:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.cgoContextPCs (retsize: 0;)
	r5 = Mem0[sp + 0x00000000000002C0:word64]
	Mem0[sp + 0x0000000000000268:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000270:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000278:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000280:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000288:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000290:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000298:word64] = 0x0000000000000000
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:byte] = (byte) r1
	lo = r2 / sp
	hi = r2 % sp
	lo = r1 / sp
	hi = r1 % sp
	r2 = r2 + -8
	r1 = r1 + -8
	lo = r4 / r2
	hi = r4 % r2
	// succ:  l000000000006D5C4
l000000000006D5C4:
	r3 = Mem0[r2 + 0x0000000000000008:word64]
	r2 = r2 + 8
	Mem0[r1 + 0x0000000000000008:word64] = r3
	r1 = r1 + 8
	branch r2 != r4 l000000000006D5C4_ds_t
	// succ:  l000000000006D5C4_ds_f l000000000006D5C4_ds_t
l000000000006D5C4_ds_f:
	goto l000000000006D5DC
	// succ:  l000000000006D5DC
l000000000006D5C4_ds_t:
	goto l000000000006D5C4
	// succ:  l000000000006D5C4
l000000000006D5DC:
	r7 = 0x0000000000000000
runtime.tracebackCgoContext_exit:


// runtime.printcreatedby
// Return size: 0
void runtime.printcreatedby()
runtime.printcreatedby_entry:
	// succ:  l000000000006D7D0
l000000000006D7D0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006D7D0_ds_t
	// succ:  l000000000006D7D0_ds_f l000000000006D7D0_ds_t
l000000000006D7D0_ds_f:
	goto l000000000006D7E0
	// succ:  l000000000006D7E0
l000000000006D7D0_ds_t:
	goto l000000000006D7F4
	// succ:  l000000000006D7F4
l000000000006D7E0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006D7D0
	// succ:  l000000000006D7D0
l000000000006D7F4:
	sp = sp + -112
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000078:word64]
	r3 = Mem0[r1 + 0x0000000000000148:word64]
	r1 = r3
	r2 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.findfunc (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l000000000006D7F4_ds_t
	// succ:  l000000000006D7F4_ds_f l000000000006D7F4_ds_t
l000000000006D7F4_ds_f:
	goto l000000000006D82C
	// succ:  l000000000006D82C
l000000000006D7F4_ds_t:
	goto l000000000006DA6C
	// succ:  l000000000006DA6C
l000000000006D82C:
	Mem0[sp + 0x0000000000000048:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000078:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.showframe (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000006D82C_ds_t
	// succ:  l000000000006D82C_ds_f l000000000006D82C_ds_t
l000000000006D82C_ds_f:
	goto l000000000006D858
	// succ:  l000000000006D858
l000000000006D82C_ds_t:
	goto l000000000006DA6C
	// succ:  l000000000006DA6C
l000000000006D858:
	r1 = Mem0[sp + 0x0000000000000078:word64]
	r1 = Mem0[r1 + 0x00000000000000C0:word64]
l000000000006DA6C:
	r4 = Mem0[sp:word64]
	sp = sp + 112
	call r4 (retsize: 0;)
	return
	// succ:  runtime.printcreatedby_exit
runtime.printcreatedby_exit:


// runtime.traceback
// Return size: 0
void runtime.traceback()
runtime.traceback_entry:
	// succ:  l000000000006DA80
l000000000006DA80:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006DA80_ds_t
	// succ:  l000000000006DA80_ds_f l000000000006DA80_ds_t
l000000000006DA80_ds_f:
	goto l000000000006DA90
	// succ:  l000000000006DA90
l000000000006DA80_ds_t:
	goto l000000000006DAA4
	// succ:  l000000000006DAA4
l000000000006DA90:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006DA80
	// succ:  l000000000006DA80
l000000000006DAA4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	call runtime.traceback1 (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.traceback_exit
runtime.traceback_exit:


// runtime.tracebacktrap
// Return size: 0
void runtime.tracebacktrap()
runtime.tracebacktrap_entry:
	// succ:  l000000000006DAF0
l000000000006DAF0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006DAF0_ds_t
	// succ:  l000000000006DAF0_ds_f l000000000006DAF0_ds_t
l000000000006DAF0_ds_f:
	goto l000000000006DB00
	// succ:  l000000000006DB00
l000000000006DAF0_ds_t:
	goto l000000000006DB14
	// succ:  l000000000006DB14
l000000000006DB00:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006DAF0
	// succ:  l000000000006DAF0
l000000000006DB14:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000028:word64] = r1
	call runtime.traceback1 (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.tracebacktrap_exit
runtime.tracebacktrap_exit:


// runtime.traceback1
// Return size: 0
void runtime.traceback1()
runtime.traceback1_entry:
	// succ:  l000000000006DB60
l000000000006DB60:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -352
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000006DB60_ds_t
	// succ:  l000000000006DB60_ds_f l000000000006DB60_ds_t
l000000000006DB60_ds_f:
	goto l000000000006DB74
	// succ:  l000000000006DB74
l000000000006DB60_ds_t:
	goto l000000000006DB88
	// succ:  l000000000006DB88
l000000000006DB74:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006DB60
	// succ:  l000000000006DB60
l000000000006DB88:
	sp = sp + -352
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000180:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006995:byte]
	branch r1 == 0x0000000000000000 l000000000006DB88_ds_t
	// succ:  l000000000006DB88_ds_f l000000000006DB88_ds_t
l000000000006DB88_ds_f:
	goto l000000000006DBA8
	// succ:  l000000000006DBA8
l000000000006DB88_ds_t:
	goto l000000000006DCF0
	// succ:  l000000000006DCF0
l000000000006DBA8:
	r1 = Mem0[r4 + 0x0000000000000030:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000006DBA8_ds_t
	// succ:  l000000000006DBA8_ds_f l000000000006DBA8_ds_t
l000000000006DBA8_ds_f:
	goto l000000000006DBB8
	// succ:  l000000000006DBB8
l000000000006DBA8_ds_t:
	goto l000000000006DCF0
	// succ:  l000000000006DCF0
l000000000006DBB8:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x0000000000000108:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l000000000006DBB8_ds_t
	// succ:  l000000000006DBB8_ds_f l000000000006DBB8_ds_t
l000000000006DBB8_ds_f:
	goto l000000000006DBD8
	// succ:  l000000000006DBD8
l000000000006DBB8_ds_t:
	goto l000000000006DCF0
	// succ:  l000000000006DCF0
l000000000006DBD8:
	r1 = Mem0[r4 + 0x0000000000000078:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000006DBD8_ds_t
	// succ:  l000000000006DBD8_ds_f l000000000006DBD8_ds_t
l000000000006DBD8_ds_f:
	goto l000000000006DBE8
	// succ:  l000000000006DBE8
l000000000006DBD8_ds_t:
	goto l000000000006DCF0
	// succ:  l000000000006DCF0
l000000000006DBE8:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x0000000000000110:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000006DBE8_ds_t
	// succ:  l000000000006DBE8_ds_f l000000000006DBE8_ds_t
l000000000006DBE8_ds_f:
	goto l000000000006DBFC
	// succ:  l000000000006DBFC
l000000000006DBE8_ds_t:
	goto l000000000006DCF0
	// succ:  l000000000006DCF0
l000000000006DBFC:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x0000000000000110:word64]
	r1 = Mem0[r3:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000006DBFC_ds_t
	// succ:  l000000000006DBFC_ds_f l000000000006DBFC_ds_t
l000000000006DBFC_ds_f:
	goto l000000000006DC14
	// succ:  l000000000006DC14
l000000000006DBFC_ds_t:
	goto l000000000006DCF0
	// succ:  l000000000006DCF0
l000000000006DC14:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l000000000006DC14_ds_t
	// succ:  l000000000006DC14_ds_f l000000000006DC14_ds_t
l000000000006DC14_ds_f:
	goto l000000000006DC28
	// succ:  l000000000006DC28
l000000000006DC14_ds_t:
	goto l000000000006DC2C
	// succ:  l000000000006DC2C
l000000000006DC28:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006DC2C
l000000000006DC2C:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
l000000000006DCF0:
	r1 = r4
	Mem0[sp + 0x0000000000000008:word64] = r4
	call runtime.readgstatus (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000188:word64]
	r4 = Mem0[sp + 0x0000000000000180:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.traceback1_exit:


// runtime.callers
// Return size: 0
void runtime.callers()
runtime.callers_entry:
	// succ:  l000000000006DEA0
l000000000006DEA0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006DEA0_ds_t
	// succ:  l000000000006DEA0_ds_f l000000000006DEA0_ds_t
l000000000006DEA0_ds_f:
	goto l000000000006DEB0
	// succ:  l000000000006DEB0
l000000000006DEA0_ds_t:
	goto l000000000006DEC4
	// succ:  l000000000006DEC4
l000000000006DEB0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006DEA0
	// succ:  l000000000006DEA0
l000000000006DEC4:
	sp = sp + -112
	Mem0[sp:word64] = ra
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.getcallersp (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.getcallerpc (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r4 = r30
	Mem0[sp + 0x0000000000000020:word64] = 0x0000000000000000
	lo = r3 / sp
	hi = r3 % sp
	r2 = 0x0000000000070000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r3:word64] = r2
	lo = r2 / sp
	hi = r2 % sp
	Mem0[r3 + 0x0000000000000008:word64] = r2
	Mem0[r3 + 0x0000000000000010:word64] = r5
	r2 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[r3 + 0x0000000000000018:word64] = r2
	Mem0[r3 + 0x0000000000000020:word64] = r30
	lo = r2 / sp
	hi = r2 % sp
	Mem0[r3 + 0x0000000000000028:word64] = r2
	r2 = Mem0[sp + 0x0000000000000080:word64]
	Mem0[r3 + 0x0000000000000030:word64] = r2
	r2 = Mem0[sp + 0x0000000000000088:word64]
	Mem0[r3 + 0x0000000000000038:word64] = r2
	r2 = Mem0[sp + 0x0000000000000090:word64]
	Mem0[r3 + 0x0000000000000040:word64] = r2
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.systemstack (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000098:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 112
	call r4 (retsize: 0;)
	return
	// succ:  runtime.callers_exit
runtime.callers_exit:


// runtime.gcallers
// Return size: 0
void runtime.gcallers()
runtime.gcallers_entry:
	// succ:  l000000000006DF78
l000000000006DF78:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006DF78_ds_t
	// succ:  l000000000006DF78_ds_f l000000000006DF78_ds_t
l000000000006DF78_ds_f:
	goto l000000000006DF88
	// succ:  l000000000006DF88
l000000000006DF78_ds_t:
	goto l000000000006DF9C
	// succ:  l000000000006DF9C
l000000000006DF88:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006DF78
	// succ:  l000000000006DF78
l000000000006DF9C:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000080:word64]
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000068:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r1 = Mem0[sp + 0x0000000000000070:word64]
	Mem0[sp + 0x0000000000000028:word64] = r1
	r1 = Mem0[sp + 0x0000000000000078:word64]
	r2 = r4
	r3 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r4)
	branch r23 != 0x0000000000000000 l000000000006DF9C_ds_t
	// succ:  l000000000006DF9C_ds_f l000000000006DF9C_ds_t
l000000000006DF9C_ds_f:
	goto l000000000006DFE4
	// succ:  l000000000006DFE4
l000000000006DF9C_ds_t:
	goto l000000000006DFF0
	// succ:  l000000000006DFF0
l000000000006DFE4:
	call runtime.panicindex (retsize: 0;)
l000000000006DFF0:
	Mem0[sp + 0x0000000000000030:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r4
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	call runtime.gentraceback (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[sp + 0x0000000000000090:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcallers_exit
runtime.gcallers_exit:


// runtime.showframe
// Return size: 0
void runtime.showframe()
runtime.showframe_entry:
	// succ:  l000000000006E028
l000000000006E028:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -136
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000006E028_ds_t
	// succ:  l000000000006E028_ds_f l000000000006E028_ds_t
l000000000006E028_ds_f:
	goto l000000000006E03C
	// succ:  l000000000006E03C
l000000000006E028_ds_t:
	goto l000000000006E050
	// succ:  l000000000006E050
l000000000006E03C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006E028
	// succ:  l000000000006E028
l000000000006E050:
	sp = sp + -136
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000098:word64]
	r1 = 0x0000000000000000
	r3 = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000C8:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l000000000006E050_ds_t
	// succ:  l000000000006E050_ds_f l000000000006E050_ds_t
l000000000006E050_ds_f:
	goto l000000000006E084
	// succ:  l000000000006E084
l000000000006E050_ds_t:
	goto l000000000006E0B8
	// succ:  l000000000006E0B8
l000000000006E084:
	r1 = r4
	r2 = 0x0000000000000000
	branch r4 == 0x0000000000000000 l000000000006E084_ds_t
	// succ:  l000000000006E084_ds_f l000000000006E084_ds_t
l000000000006E084_ds_f:
	goto l000000000006E094
	// succ:  l000000000006E094
l000000000006E084_ds_t:
	goto l000000000006E0B8
	// succ:  l000000000006E0B8
l000000000006E094:
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A0:word64]
	branch r1 == r4 l000000000006E094_ds_t
	// succ:  l000000000006E094_ds_f l000000000006E094_ds_t
l000000000006E094_ds_f:
	goto l000000000006E0A4
	// succ:  l000000000006E0A4
l000000000006E094_ds_t:
	goto l000000000006E45C
	// succ:  l000000000006E45C
l000000000006E0A4:
	r2 = Mem0[r3 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A8:word64]
	r2 = r4
	branch r1 == r4 l000000000006E0A4_ds_t
	// succ:  l000000000006E0A4_ds_f l000000000006E0A4_ds_t
l000000000006E0A4_ds_f:
	goto l000000000006E0B8
	// succ:  l000000000006E0B8
l000000000006E0A4_ds_t:
	goto l000000000006E45C
	// succ:  l000000000006E45C
l000000000006E0B8:
	call runtime.gotraceback (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000008:int32]
	Mem0[sp + 0x0000000000000030:word32] = (word32) r1
	r1 = Mem0[sp + 0x0000000000000090:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.funcname (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000058:word64] = r1
	r3 = Mem0[sp + 0x0000000000000018:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r1 = r3
	branch r3 != r2 l000000000006E0B8_ds_t
	// succ:  l000000000006E0B8_ds_f l000000000006E0B8_ds_t
l000000000006E0B8_ds_f:
	goto l000000000006E0F4
	// succ:  l000000000006E0F4
l000000000006E0B8_ds_t:
	goto l000000000006E150
	// succ:  l000000000006E150
l000000000006E0F4:
	r2 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000060:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	r2 = 0x00000000000A0000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000018:word64] = r2
l000000000006E150:
	r1 = (word64) Mem0[sp + 0x0000000000000030:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 != 0x0000000000000000 l000000000006E150_ds_t
	// succ:  l000000000006E150_ds_f l000000000006E150_ds_t
l000000000006E150_ds_f:
	goto l000000000006E170
	// succ:  l000000000006E170
l000000000006E150_ds_t:
	goto l000000000006E3EC
	// succ:  l000000000006E3EC
l000000000006E170:
	r1 = Mem0[sp + 0x0000000000000090:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000006E170_ds_t
	// succ:  l000000000006E170_ds_f l000000000006E170_ds_t
l000000000006E170_ds_f:
	goto l000000000006E180
	// succ:  l000000000006E180
l000000000006E170_ds_t:
	goto l000000000006E3D8
	// succ:  l000000000006E3D8
l000000000006E180:
	r1 = Mem0[sp + 0x0000000000000058:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000060:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000018:word64] = r1
l000000000006E3D8:
	Mem0[sp + 0x00000000000000A0:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 136
	call r4 (retsize: 0;)
	return
	// succ:  runtime.showframe_exit
l000000000006E3EC:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x00000000000000A0:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 136
	call r4 (retsize: 0;)
	return
	// succ:  runtime.showframe_exit
l000000000006E45C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x00000000000000A0:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 136
	call r4 (retsize: 0;)
	return
	// succ:  runtime.showframe_exit
runtime.showframe_exit:


// runtime.goroutineheader
// Return size: 0
void runtime.goroutineheader()
runtime.goroutineheader_entry:
	// succ:  l000000000006E478
l000000000006E478:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006E478_ds_t
	// succ:  l000000000006E478_ds_f l000000000006E478_ds_t
l000000000006E478_ds_f:
	goto l000000000006E488
	// succ:  l000000000006E488
l000000000006E478_ds_t:
	goto l000000000006E49C
	// succ:  l000000000006E49C
l000000000006E488:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006E478
	// succ:  l000000000006E478
l000000000006E49C:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.readgstatus (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000048:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.goroutineheader_exit:


// runtime.tracebackothers
// Return size: 0
void runtime.tracebackothers()
runtime.tracebackothers_entry:
	// succ:  l000000000006E8D0
l000000000006E8D0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006E8D0_ds_t
	// succ:  l000000000006E8D0_ds_f l000000000006E8D0_ds_t
l000000000006E8D0_ds_f:
	goto l000000000006E8E0
	// succ:  l000000000006E8E0
l000000000006E8D0_ds_t:
	goto l000000000006E8F4
	// succ:  l000000000006E8F4
l000000000006E8E0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006E8D0
	// succ:  l000000000006E8D0
l000000000006E8F4:
	sp = sp + -120
	Mem0[sp:word64] = ra
	call runtime.gotraceback (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000008:int32]
	Mem0[sp + 0x0000000000000028:word32] = (word32) r1
	Mem0[sp + 0x0000000000000050:word64] = r30
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x00000000000000A0:word64]
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l000000000006E8F4_ds_t
	// succ:  l000000000006E8F4_ds_f l000000000006E8F4_ds_t
l000000000006E8F4_ds_f:
	goto l000000000006E924
	// succ:  l000000000006E924
l000000000006E8F4_ds_t:
	goto l000000000006E99C
	// succ:  l000000000006E99C
l000000000006E924:
	Mem0[sp + 0x0000000000000048:word64] = r3
	r2 = Mem0[sp + 0x0000000000000080:word64]
	r1 = r3
	branch r3 == r2 l000000000006E924_ds_t
	// succ:  l000000000006E924_ds_f l000000000006E924_ds_t
l000000000006E924_ds_f:
	goto l000000000006E938
	// succ:  l000000000006E938
l000000000006E924_ds_t:
	goto l000000000006E99C
	// succ:  l000000000006E99C
l000000000006E938:
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000006E99C:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = Mem0[r23 + 0x0000000000001140:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 + 0x0000000000001148:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001150:word64]
	Mem0[sp + 0x0000000000000070:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000068:word64] = r2
	Mem0[sp + 0x0000000000000030:word64] = r2
	Mem0[sp + 0x0000000000000060:word64] = r3
	Mem0[sp + 0x0000000000000058:word64] = r3
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r23 = (word64) (r1 < r2)
	branch r23 == 0x0000000000000000 l000000000006E99C_ds_t
	// succ:  l000000000006E99C_ds_f l000000000006E99C_ds_t
l000000000006E99C_ds_f:
	goto l000000000006EA04
	// succ:  l000000000006EA04
l000000000006E99C_ds_t:
	goto l000000000006EB20
	// succ:  l000000000006EB20
l000000000006EA04:
	r1 = Mem0[sp + 0x0000000000000058:word64]
	r3 = Mem0[r1:word64]
	r2 = Mem0[sp + 0x0000000000000080:word64]
	branch r3 == r2 l000000000006EA04_ds_t
	// succ:  l000000000006EA04_ds_f l000000000006EA04_ds_t
l000000000006EA04_ds_f:
	goto l000000000006EA18
	// succ:  l000000000006EA18
l000000000006EA04_ds_t:
	goto l000000000006EAEC
	// succ:  l000000000006EAEC
l000000000006EA18:
	r1 = Mem0[sp + 0x0000000000000050:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r1 = Mem0[r2 + 0x00000000000000A0:word64]
	r2 = r3
	branch r1 == r3 l000000000006EA18_ds_t
	// succ:  l000000000006EA18_ds_f l000000000006EA18_ds_t
l000000000006EA18_ds_f:
	goto l000000000006EA30
	// succ:  l000000000006EA30
l000000000006EA18_ds_t:
	goto l000000000006EAEC
	// succ:  l000000000006EAEC
l000000000006EA30:
	r1 = r3
	Mem0[sp + 0x0000000000000040:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.readgstatus (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
l000000000006EAEC:
	r1 = Mem0[sp + 0x0000000000000058:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000058:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000038:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r23 = (word64) (r1 < r2)
	branch r23 != 0x0000000000000000 l000000000006EAEC_ds_t
	// succ:  l000000000006EAEC_ds_f l000000000006EAEC_ds_t
l000000000006EAEC_ds_f:
	goto l000000000006EB20
	// succ:  l000000000006EB20
l000000000006EAEC_ds_t:
	goto l000000000006EA04
	// succ:  l000000000006EA04
l000000000006EB20:
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 120
	call r4 (retsize: 0;)
	return
	// succ:  runtime.tracebackothers_exit
runtime.tracebackothers_exit:


// runtime.printCgoTraceback
// Return size: 0
void runtime.printCgoTraceback()
runtime.printCgoTraceback_entry:
	// succ:  l000000000006ECE0
l000000000006ECE0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006ECE0_ds_t
	// succ:  l000000000006ECE0_ds_f l000000000006ECE0_ds_t
l000000000006ECE0_ds_f:
	goto l000000000006ECF0
	// succ:  l000000000006ECF0
l000000000006ECE0_ds_t:
	goto l000000000006ED04
	// succ:  l000000000006ED04
l000000000006ECF0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006ECE0
	// succ:  l000000000006ECE0
l000000000006ED04:
	sp = sp + -128
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000088:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001090:word64]
	branch r1 != 0x0000000000000000 l000000000006ED04_ds_t
	// succ:  l000000000006ED04_ds_f l000000000006ED04_ds_t
l000000000006ED04_ds_f:
	goto l000000000006ED24
	// succ:  l000000000006ED24
l000000000006ED04_ds_t:
	goto l000000000006EDFC
	// succ:  l000000000006EDFC
l000000000006ED24:
	r4 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word64] = r1
	branch r3 != 0x0000000000000000 l000000000006ED24_ds_t
	// succ:  l000000000006ED24_ds_f l000000000006ED24_ds_t
l000000000006ED24_ds_f:
	goto l000000000006ED38
	// succ:  l000000000006ED38
l000000000006ED24_ds_t:
	goto l000000000006ED3C
	// succ:  l000000000006ED3C
l000000000006ED38:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006ED3C
l000000000006ED3C:
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r23 = (word64) (r4 < r2)
	branch r23 == 0x0000000000000000 l000000000006ED3C_ds_t
	// succ:  l000000000006ED3C_ds_f l000000000006ED3C_ds_t
l000000000006ED3C_ds_f:
	goto l000000000006ED4C
	// succ:  l000000000006ED4C
l000000000006ED3C_ds_t:
	goto l000000000006ED64
	// succ:  l000000000006ED64
l000000000006ED4C:
	Mem0[sp + 0x0000000000000040:word64] = r3
	r3 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000038:word64] = r4
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000006ED4C_ds_t
	// succ:  l000000000006ED4C_ds_f l000000000006ED4C_ds_t
l000000000006ED4C_ds_f:
	goto l000000000006ED64
	// succ:  l000000000006ED64
l000000000006ED4C_ds_t:
	goto l000000000006ED74
	// succ:  l000000000006ED74
l000000000006ED64:
	r4 = Mem0[sp:word64]
	sp = sp + 128
	call r4 (retsize: 0;)
	return
	// succ:  runtime.printCgoTraceback_exit
l000000000006ED74:
	r1 = r3
	Mem0[sp + 0x0000000000000028:word64] = r3
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000006EDFC:
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000060:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000068:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000070:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000078:word64] = 0x0000000000000000
	r4 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word64] = r1
	branch r3 != 0x0000000000000000 l000000000006EDFC_ds_t
	// succ:  l000000000006EDFC_ds_f l000000000006EDFC_ds_t
l000000000006EDFC_ds_f:
	goto l000000000006EE2C
	// succ:  l000000000006EE2C
l000000000006EDFC_ds_t:
	goto l000000000006EE30
	// succ:  l000000000006EE30
l000000000006EE2C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006EE30
l000000000006EE30:
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r23 = (word64) (r4 < r2)
	branch r23 == 0x0000000000000000 l000000000006EE30_ds_t
	// succ:  l000000000006EE30_ds_f l000000000006EE30_ds_t
l000000000006EE30_ds_f:
	goto l000000000006EE40
	// succ:  l000000000006EE40
l000000000006EE30_ds_t:
	goto l000000000006EE58
	// succ:  l000000000006EE58
l000000000006EE40:
	Mem0[sp + 0x0000000000000040:word64] = r3
	r3 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000038:word64] = r4
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000006EE40_ds_t
	// succ:  l000000000006EE40_ds_f l000000000006EE40_ds_t
l000000000006EE40_ds_f:
	goto l000000000006EE58
	// succ:  l000000000006EE58
l000000000006EE40_ds_t:
	goto l000000000006EE7C
	// succ:  l000000000006EE7C
l000000000006EE58:
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.callCgoSymbolizer (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 128
	call r4 (retsize: 0;)
	return
	// succ:  runtime.printCgoTraceback_exit
l000000000006EE7C:
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = 0x000000007FFF0000
	r1 = r1 | 0x000000000000FFFF
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.printOneCgoTraceback (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000040:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r3 / r3
	hi = r3 % r3
	r4 = Mem0[sp + 0x0000000000000038:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r4 / r4
	hi = r4 % r4
	goto l000000000006EE30
	// succ:  l000000000006EE30
runtime.printCgoTraceback_exit:


// runtime.printOneCgoTraceback
// Return size: 0
void runtime.printOneCgoTraceback()
runtime.printOneCgoTraceback_entry:
	// succ:  l000000000006EEC0
l000000000006EEC0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006EEC0_ds_t
	// succ:  l000000000006EEC0_ds_f l000000000006EEC0_ds_t
l000000000006EEC0_ds_f:
	goto l000000000006EED0
	// succ:  l000000000006EED0
l000000000006EEC0_ds_t:
	goto l000000000006EEE4
	// succ:  l000000000006EEE4
l000000000006EED0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006EEC0
	// succ:  l000000000006EEC0
l000000000006EEE4:
	sp = sp + -72
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000060:word64]
	r3 = 0x0000000000000000
	r2 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[r4:word64] = r2
	Mem0[sp + 0x0000000000000020:word64] = r3
	r2 = Mem0[sp + 0x0000000000000058:word64]
	r23 = (word64) (r2 < r3)
	branch r23 == 0x0000000000000000 l000000000006EEE4_ds_t
	// succ:  l000000000006EEE4_ds_f l000000000006EEE4_ds_t
l000000000006EEE4_ds_f:
	goto l000000000006EF10
	// succ:  l000000000006EF10
l000000000006EEE4_ds_t:
	goto l000000000006EF24
	// succ:  l000000000006EF24
l000000000006EF10:
	Mem0[sp + 0x0000000000000068:word64] = r3
	r4 = Mem0[sp:word64]
	sp = sp + 72
	call r4 (retsize: 0;)
	return
	// succ:  runtime.printOneCgoTraceback_exit
l000000000006EF24:
	r1 = r4
	Mem0[sp + 0x0000000000000008:word64] = r4
	call runtime.callCgoSymbolizer (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000060:word64]
	r1 = Mem0[r3 + 0x0000000000000018:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l000000000006EF24_ds_t
	// succ:  l000000000006EF24_ds_f l000000000006EF24_ds_t
l000000000006EF24_ds_f:
	goto l000000000006EF48
	// succ:  l000000000006EF48
l000000000006EF24_ds_t:
	goto l000000000006F120
	// succ:  l000000000006F120
l000000000006EF48:
	r1 = r3
	r2 = Mem0[r3 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.gostringnocopy (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	call runtime.printlock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.printstring (retsize: 0;)
	call runtime.printnl (retsize: 0;)
	call runtime.printunlock (retsize: 0;)
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000006F120:
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.printOneCgoTraceback_exit:


// runtime.callCgoSymbolizer
// Return size: 0
void runtime.callCgoSymbolizer()
runtime.callCgoSymbolizer_entry:
	// succ:  l000000000006F160
l000000000006F160:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006F160_ds_t
	// succ:  l000000000006F160_ds_f l000000000006F160_ds_t
l000000000006F160_ds_f:
	goto l000000000006F170
	// succ:  l000000000006F170
l000000000006F160_ds_t:
	goto l000000000006F184
	// succ:  l000000000006F184
l000000000006F170:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006F160
	// succ:  l000000000006F160
l000000000006F184:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r3 = 0x00000000000A0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006964:uint32]
runtime.callCgoSymbolizer_exit:


// runtime.cgoContextPCs
// Return size: 0
void runtime.cgoContextPCs()
runtime.cgoContextPCs_entry:
	// succ:  l000000000006F228
l000000000006F228:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006F228_ds_t
	// succ:  l000000000006F228_ds_f l000000000006F228_ds_t
l000000000006F228_ds_f:
	goto l000000000006F238
	// succ:  l000000000006F238
l000000000006F228_ds_t:
	goto l000000000006F24C
	// succ:  l000000000006F24C
l000000000006F238:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006F228
	// succ:  l000000000006F228
l000000000006F24C:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000058:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001098:word64]
	branch r1 != 0x0000000000000000 l000000000006F24C_ds_t
	// succ:  l000000000006F24C_ds_f l000000000006F24C_ds_t
l000000000006F24C_ds_f:
	goto l000000000006F26C
	// succ:  l000000000006F26C
l000000000006F24C_ds_t:
	goto l000000000006F27C
	// succ:  l000000000006F27C
l000000000006F26C:
	r4 = Mem0[sp:word64]
	sp = sp + 64
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoContextPCs_exit
l000000000006F27C:
	r4 = 0x00000000000A0000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006964:uint32]
runtime.cgoContextPCs_exit:


// runtime.(*_type).string
// Return size: 0
void runtime.(*_type).string()
runtime.(*_type).string_entry:
	// succ:  l000000000006F360
l000000000006F360:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006F360_ds_t
	// succ:  l000000000006F360_ds_f l000000000006F360_ds_t
l000000000006F360_ds_f:
	goto l000000000006F370
	// succ:  l000000000006F370
l000000000006F360_ds_t:
	goto l000000000006F384
	// succ:  l000000000006F384
l000000000006F370:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006F360
	// succ:  l000000000006F360
l000000000006F384:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r1
	r2 = (word64) Mem0[r1 + 0x0000000000000028:int32]
	Mem0[sp + 0x0000000000000010:word32] = (word32) r2
	call runtime.(*_type).nameOff (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r2 = r1
	Mem0[sp + 0x0000000000000020:word64] = r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.name.name (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000010:word64]
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r1 + 0x0000000000000014:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l000000000006F384_ds_t
	// succ:  l000000000006F384_ds_f l000000000006F384_ds_t
l000000000006F384_ds_f:
	goto l000000000006F3F8
	// succ:  l000000000006F3F8
l000000000006F384_ds_t:
	goto l000000000006F44C
	// succ:  l000000000006F44C
l000000000006F3F8:
l000000000006F44C:
	Mem0[sp + 0x0000000000000038:word64] = r4
	Mem0[sp + 0x0000000000000040:word64] = r3
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*_type).string_exit
runtime.(*_type).string_exit:


// runtime.(*_type).uncommon
// Return size: 0
void runtime.(*_type).uncommon()
runtime.(*_type).uncommon_entry:
	// succ:  l000000000006F468
l000000000006F468:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006F468_ds_t
	// succ:  l000000000006F468_ds_f l000000000006F468_ds_t
l000000000006F468_ds_f:
	goto l000000000006F478
	// succ:  l000000000006F478
l000000000006F468_ds_t:
	goto l000000000006F48C
	// succ:  l000000000006F48C
l000000000006F478:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006F468
	// succ:  l000000000006F468
l000000000006F48C:
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r1 = (word64) Mem0[r4 + 0x0000000000000014:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000006F48C_ds_t
	// succ:  l000000000006F48C_ds_f l000000000006F48C_ds_t
l000000000006F48C_ds_f:
	goto l000000000006F4B8
	// succ:  l000000000006F4B8
l000000000006F48C_ds_t:
	goto l000000000006F4C4
	// succ:  l000000000006F4C4
l000000000006F4B8:
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	return
	// succ:  runtime.(*_type).uncommon_exit
l000000000006F4C4:
	r1 = (word64) Mem0[r4 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r3 = r1 + 0x00000000000000FF
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l000000000006F4C4_ds_t
	// succ:  l000000000006F4C4_ds_f l000000000006F4C4_ds_t
l000000000006F4C4_ds_f:
	goto l000000000006F4F8
	// succ:  l000000000006F4F8
l000000000006F4C4_ds_t:
	goto l000000000006F5F8
	// succ:  l000000000006F5F8
l000000000006F4F8:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l000000000006F4F8_ds_t
	// succ:  l000000000006F4F8_ds_f l000000000006F4F8_ds_t
l000000000006F4F8_ds_f:
	goto l000000000006F518
	// succ:  l000000000006F518
l000000000006F4F8_ds_t:
	goto l000000000006F598
	// succ:  l000000000006F598
l000000000006F518:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000006F518_ds_t
	// succ:  l000000000006F518_ds_f l000000000006F518_ds_t
l000000000006F518_ds_f:
	goto l000000000006F534
	// succ:  l000000000006F534
l000000000006F518_ds_t:
	goto l000000000006F548
	// succ:  l000000000006F548
l000000000006F534:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	Mem0[sp + 0x0000000000000010:word64] = r1
	return
	// succ:  runtime.(*_type).uncommon_exit
l000000000006F548:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000006F548_ds_t
	// succ:  l000000000006F548_ds_f l000000000006F548_ds_t
l000000000006F548_ds_f:
	goto l000000000006F564
	// succ:  l000000000006F564
l000000000006F548_ds_t:
	goto l000000000006F578
	// succ:  l000000000006F578
l000000000006F564:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	Mem0[sp + 0x0000000000000010:word64] = r1
	return
	// succ:  runtime.(*_type).uncommon_exit
l000000000006F578:
	branch r4 != 0x0000000000000000 l000000000006F578_ds_t
	// succ:  l000000000006F578_ds_f l000000000006F578_ds_t
l000000000006F578_ds_f:
	goto l000000000006F580
	// succ:  l000000000006F580
l000000000006F578_ds_t:
	goto l000000000006F584
	// succ:  l000000000006F584
l000000000006F580:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000006F584
l000000000006F584:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	Mem0[sp + 0x0000000000000010:word64] = r1
	return
	// succ:  runtime.(*_type).uncommon_exit
l000000000006F598:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000006F598_ds_t
	// succ:  l000000000006F598_ds_f l000000000006F598_ds_t
l000000000006F598_ds_f:
	goto l000000000006F5B4
	// succ:  l000000000006F5B4
l000000000006F598_ds_t:
	goto l000000000006F5C8
	// succ:  l000000000006F5C8
l000000000006F5B4:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	Mem0[sp + 0x0000000000000010:word64] = r1
	return
	// succ:  runtime.(*_type).uncommon_exit
l000000000006F5C8:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000006F5C8_ds_t
	// succ:  l000000000006F5C8_ds_f l000000000006F5C8_ds_t
l000000000006F5C8_ds_f:
	goto l000000000006F5E4
	// succ:  l000000000006F5E4
l000000000006F5C8_ds_t:
	goto l000000000006F578
	// succ:  l000000000006F578
l000000000006F5E4:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	Mem0[sp + 0x0000000000000010:word64] = r1
	return
	// succ:  runtime.(*_type).uncommon_exit
l000000000006F5F8:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l000000000006F5F8_ds_t
	// succ:  l000000000006F5F8_ds_f l000000000006F5F8_ds_t
l000000000006F5F8_ds_f:
	goto l000000000006F618
	// succ:  l000000000006F618
l000000000006F5F8_ds_t:
	goto l000000000006F678
	// succ:  l000000000006F678
l000000000006F618:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000006F618_ds_t
	// succ:  l000000000006F618_ds_f l000000000006F618_ds_t
l000000000006F618_ds_f:
	goto l000000000006F634
	// succ:  l000000000006F634
l000000000006F618_ds_t:
	goto l000000000006F648
	// succ:  l000000000006F648
l000000000006F634:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	Mem0[sp + 0x0000000000000010:word64] = r1
	return
	// succ:  runtime.(*_type).uncommon_exit
l000000000006F648:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000006F648_ds_t
	// succ:  l000000000006F648_ds_f l000000000006F648_ds_t
l000000000006F648_ds_f:
	goto l000000000006F664
	// succ:  l000000000006F664
l000000000006F648_ds_t:
	goto l000000000006F578
	// succ:  l000000000006F578
l000000000006F664:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	Mem0[sp + 0x0000000000000010:word64] = r1
	return
	// succ:  runtime.(*_type).uncommon_exit
l000000000006F678:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000006F678_ds_t
	// succ:  l000000000006F678_ds_f l000000000006F678_ds_t
l000000000006F678_ds_f:
	goto l000000000006F694
	// succ:  l000000000006F694
l000000000006F678_ds_t:
	goto l000000000006F6A8
	// succ:  l000000000006F6A8
l000000000006F694:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	Mem0[sp + 0x0000000000000010:word64] = r1
	return
	// succ:  runtime.(*_type).uncommon_exit
l000000000006F6A8:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000006F6A8_ds_t
	// succ:  l000000000006F6A8_ds_f l000000000006F6A8_ds_t
l000000000006F6A8_ds_f:
	goto l000000000006F6C4
	// succ:  l000000000006F6C4
l000000000006F6A8_ds_t:
	goto l000000000006F578
	// succ:  l000000000006F578
l000000000006F6C4:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	Mem0[sp + 0x0000000000000010:word64] = r1
	return
	// succ:  runtime.(*_type).uncommon_exit
runtime.(*_type).uncommon_exit:


// runtime.reflectOffsLock
// Return size: 0
void runtime.reflectOffsLock()
runtime.reflectOffsLock_entry:
	// succ:  l000000000006F6D8
l000000000006F6D8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006F6D8_ds_t
	// succ:  l000000000006F6D8_ds_f l000000000006F6D8_ds_t
l000000000006F6D8_ds_f:
	goto l000000000006F6E8
	// succ:  l000000000006F6E8
l000000000006F6D8_ds_t:
	goto l000000000006F6FC
	// succ:  l000000000006F6FC
l000000000006F6E8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006F6D8
	// succ:  l000000000006F6D8
l000000000006F6FC:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectOffsLock_exit
runtime.reflectOffsLock_exit:


// runtime.reflectOffsUnlock
// Return size: 0
void runtime.reflectOffsUnlock()
runtime.reflectOffsUnlock_entry:
	// succ:  l000000000006F730
l000000000006F730:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006F730_ds_t
	// succ:  l000000000006F730_ds_f l000000000006F730_ds_t
l000000000006F730_ds_f:
	goto l000000000006F740
	// succ:  l000000000006F740
l000000000006F730_ds_t:
	goto l000000000006F754
	// succ:  l000000000006F754
l000000000006F740:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006F730
	// succ:  l000000000006F730
l000000000006F754:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectOffsUnlock_exit
runtime.reflectOffsUnlock_exit:


// runtime.resolveNameOff
// Return size: 0
void runtime.resolveNameOff()
runtime.resolveNameOff_entry:
	// succ:  l000000000006F788
l000000000006F788:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006F788_ds_t
	// succ:  l000000000006F788_ds_f l000000000006F788_ds_t
l000000000006F788_ds_f:
	goto l000000000006F798
	// succ:  l000000000006F798
l000000000006F788_ds_t:
	goto l000000000006F7AC
	// succ:  l000000000006F7AC
l000000000006F798:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006F788
	// succ:  l000000000006F788
l000000000006F7AC:
	sp = sp + -112
	Mem0[sp:word64] = ra
	r5 = (word64) Mem0[sp + 0x0000000000000080:int32]
	Mem0[sp + 0x0000000000000088:word64] = 0x0000000000000000
	r1 = r5
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000006F7AC_ds_t
	// succ:  l000000000006F7AC_ds_f l000000000006F7AC_ds_t
l000000000006F7AC_ds_f:
	goto l000000000006F7D4
	// succ:  l000000000006F7D4
l000000000006F7AC_ds_t:
	goto l000000000006F7F4
	// succ:  l000000000006F7F4
l000000000006F7D4:
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001508:word64]
	Mem0[sp + 0x0000000000000088:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 112
	call r4 (retsize: 0;)
	return
	// succ:  runtime.resolveNameOff_exit
l000000000006F7F4:
	r4 = Mem0[sp + 0x0000000000000078:word64]
	Mem0[sp + 0x0000000000000040:word64] = r4
	r3 = 0x00000000000D0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	r1 = r3
	r2 = 0x0000000000000000
	branch r3 == 0x0000000000000000 l000000000006F7F4_ds_t
	// succ:  l000000000006F7F4_ds_f l000000000006F7F4_ds_t
l000000000006F7F4_ds_f:
	goto l000000000006F818
	// succ:  l000000000006F818
l000000000006F7F4_ds_t:
	goto l000000000006F990
	// succ:  l000000000006F990
l000000000006F818:
	r1 = Mem0[r3 + 0x00000000000000C8:word64]
	r23 = (word64) (r4 <u r1)
	branch r23 != 0x0000000000000000 l000000000006F818_ds_t
	// succ:  l000000000006F818_ds_f l000000000006F818_ds_t
l000000000006F818_ds_f:
	goto l000000000006F828
	// succ:  l000000000006F828
l000000000006F818_ds_t:
	goto l000000000006F97C
	// succ:  l000000000006F97C
l000000000006F828:
	r1 = Mem0[r3 + 0x00000000000000D0:word64]
	r23 = (word64) (r4 <u r1)
	branch r23 == 0x0000000000000000 l000000000006F828_ds_t
	// succ:  l000000000006F828_ds_f l000000000006F828_ds_t
l000000000006F828_ds_f:
	goto l000000000006F838
	// succ:  l000000000006F838
l000000000006F828_ds_t:
	goto l000000000006F97C
	// succ:  l000000000006F97C
l000000000006F838:
	r4 = Mem0[r3 + 0x00000000000000C8:word64]
	r2 = r5
	lo = r4 / r4
	hi = r4 % r4
	r1 = Mem0[r3 + 0x00000000000000D0:word64]
	Mem0[sp + 0x0000000000000038:word64] = r4
	r23 = (word64) (r1 <u r4)
	branch r23 == 0x0000000000000000 l000000000006F838_ds_t
	// succ:  l000000000006F838_ds_f l000000000006F838_ds_t
l000000000006F838_ds_f:
	goto l000000000006F858
	// succ:  l000000000006F858
l000000000006F838_ds_t:
	goto l000000000006F968
	// succ:  l000000000006F968
l000000000006F858:
	r1 = r5
	Mem0[sp + 0x0000000000000058:word64] = r1
	r2 = Mem0[r3 + 0x00000000000000C8:word64]
	Mem0[sp + 0x0000000000000050:word64] = r2
	r1 = r3
	r2 = Mem0[r3 + 0x00000000000000D0:word64]
	Mem0[sp + 0x0000000000000048:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000006F968:
	Mem0[sp + 0x0000000000000088:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 112
	call r4 (retsize: 0;)
	return
	// succ:  runtime.resolveNameOff_exit
l000000000006F97C:
	r3 = Mem0[r3 + 0x0000000000000158:word64]
	r1 = r3
	r2 = 0x0000000000000000
	branch r3 != 0x0000000000000000 l000000000006F97C_ds_t
	// succ:  l000000000006F97C_ds_f l000000000006F97C_ds_t
l000000000006F97C_ds_f:
	goto l000000000006F990
	// succ:  l000000000006F990
l000000000006F97C_ds_t:
	goto l000000000006F818
	// succ:  l000000000006F818
l000000000006F990:
	call runtime.reflectOffsLock (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000080:int32]
	r2 = r1
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001250:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = r2
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	call runtime.mapaccess2_fast32 (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	Mem0[sp + 0x0000000000000030:byte] = (byte) r1
	r1 = r2
	r2 = Mem0[r2:word64]
	Mem0[sp + 0x0000000000000060:word64] = r2
	call runtime.reflectOffsUnlock (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000030:byte]
	branch r1 != 0x0000000000000000 l000000000006F990_ds_t
	call runtime.reflectOffsLock (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000080:int32]
	r2 = r1
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001250:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = r2
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	call runtime.mapaccess2_fast32 (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	Mem0[sp + 0x0000000000000030:byte] = (byte) r1
	r1 = r2
	r2 = Mem0[r2:word64]
	Mem0[sp + 0x0000000000000060:word64] = r2
	call runtime.reflectOffsUnlock (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000030:byte]
	branch r1 != 0x0000000000000000 l000000000006F990_ds_t
	// succ:  l000000000006F990_ds_f l000000000006F990_ds_t l000000000006F990_ds_f l000000000006F990_ds_t
l000000000006F990_ds_f:
	goto l000000000006F9FC
	// succ:  l000000000006F9FC
l000000000006F990_ds_f:
	goto l000000000006F9FC
	// succ:  l000000000006F9FC
l000000000006F990_ds_t:
	goto l000000000006FBB8
	// succ:  l000000000006FBB8
l000000000006F990_ds_t:
	goto l000000000006FBB8
	// succ:  l000000000006FBB8
l000000000006F9FC:
	r1 = (word64) Mem0[sp + 0x0000000000000080:int32]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000050:word64] = r1
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = (word64) Mem0[sp + 0x0000000000000080:int32]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000050:word64] = r1
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000006FBB8:
	r1 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[sp + 0x0000000000000088:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 112
	call r4 (retsize: 0;)
	return
	// succ:  runtime.resolveNameOff_exit
runtime.resolveNameOff_exit:


// runtime.(*_type).nameOff
// Return size: 0
void runtime.(*_type).nameOff()
runtime.(*_type).nameOff_entry:
	// succ:  l000000000006FBD0
l000000000006FBD0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006FBD0_ds_t
	// succ:  l000000000006FBD0_ds_f l000000000006FBD0_ds_t
l000000000006FBD0_ds_f:
	goto l000000000006FBE0
	// succ:  l000000000006FBE0
l000000000006FBD0_ds_t:
	goto l000000000006FBF4
	// succ:  l000000000006FBF4
l000000000006FBE0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006FBD0
	// succ:  l000000000006FBD0
l000000000006FBF4:
	sp = sp + -32
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000038:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = (word64) Mem0[sp + 0x0000000000000030:int32]
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
	call runtime.resolveNameOff (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*_type).nameOff_exit
runtime.(*_type).nameOff_exit:


// runtime.(*_type).typeOff
// Return size: 0
void runtime.(*_type).typeOff()
runtime.(*_type).typeOff_entry:
	// succ:  l000000000006FC30
l000000000006FC30:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000006FC30_ds_t
	// succ:  l000000000006FC30_ds_f l000000000006FC30_ds_t
l000000000006FC30_ds_f:
	goto l000000000006FC40
	// succ:  l000000000006FC40
l000000000006FC30_ds_t:
	goto l000000000006FC54
	// succ:  l000000000006FC54
l000000000006FC40:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000006FC30
	// succ:  l000000000006FC30
l000000000006FC54:
	sp = sp + -104
	Mem0[sp:word64] = ra
	r6 = (word64) Mem0[sp + 0x0000000000000078:int32]
	r1 = r6
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000006FC54_ds_t
	// succ:  l000000000006FC54_ds_f l000000000006FC54_ds_t
l000000000006FC54_ds_f:
	goto l000000000006FC78
	// succ:  l000000000006FC78
l000000000006FC54_ds_t:
	goto l000000000006FC8C
	// succ:  l000000000006FC8C
l000000000006FC78:
	Mem0[sp + 0x0000000000000080:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 104
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*_type).typeOff_exit
l000000000006FC8C:
	r4 = Mem0[sp + 0x0000000000000070:word64]
	Mem0[sp + 0x0000000000000030:word64] = r4
	r5 = 0x0000000000000000
	r3 = 0x00000000000D0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	goto l000000000006FCA4
	// succ:  l000000000006FCA4
l000000000006FC8C_ds_f:
	goto l000000000006FCAC
	// succ:  l000000000006FCAC
l000000000006FC8C_ds_t:
	goto l000000000006FCD0
	// succ:  l000000000006FCD0
l000000000006FCA4:
	branch r3 == 0x0000000000000000 l000000000006FC8C_ds_t
	goto l000000000006FC8C_ds_f
	// succ:  l000000000006FC8C_ds_f l000000000006FC8C_ds_t
l000000000006FCAC:
	r1 = Mem0[r3 + 0x00000000000000C8:word64]
	r23 = (word64) (r4 <u r1)
	branch r23 != 0x0000000000000000 l000000000006FCAC_ds_t
	// succ:  l000000000006FCAC_ds_f l000000000006FCAC_ds_t
l000000000006FCAC_ds_f:
	goto l000000000006FCBC
	// succ:  l000000000006FCBC
l000000000006FCAC_ds_t:
	goto l00000000000700C4
	// succ:  l00000000000700C4
l000000000006FCBC:
	r1 = Mem0[r3 + 0x00000000000000D0:word64]
	r23 = (word64) (r4 <u r1)
	branch r23 == 0x0000000000000000 l000000000006FCBC_ds_t
	// succ:  l000000000006FCBC_ds_f l000000000006FCBC_ds_t
l000000000006FCBC_ds_f:
	goto l000000000006FCCC
	// succ:  l000000000006FCCC
l000000000006FCBC_ds_t:
	goto l00000000000700C4
	// succ:  l00000000000700C4
l000000000006FCCC:
	r5 = r3
	// succ:  l000000000006FCD0
l000000000006FCD0:
	r1 = r5
	r2 = 0x0000000000000000
	branch r5 != 0x0000000000000000 l000000000006FCD0_ds_t
	// succ:  l000000000006FCD0_ds_f l000000000006FCD0_ds_t
l000000000006FCD0_ds_f:
	goto l000000000006FCE0
	// succ:  l000000000006FCE0
l000000000006FCD0_ds_t:
	goto l000000000006FF20
	// succ:  l000000000006FF20
l000000000006FCE0:
	call runtime.reflectOffsLock (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000078:int32]
	r2 = r1
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001250:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = r2
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	call runtime.mapaccess1_fast32 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r3 = Mem0[r1:word64]
	r1 = r3
	r2 = r3
	Mem0[sp + 0x0000000000000050:word64] = r3
	call runtime.reflectOffsUnlock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000050:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l000000000006FCE0_ds_t
	// succ:  l000000000006FCE0_ds_f l000000000006FCE0_ds_t
l000000000006FCE0_ds_f:
	goto l000000000006FD4C
	// succ:  l000000000006FD4C
l000000000006FCE0_ds_t:
	goto l000000000006FF08
	// succ:  l000000000006FF08
l000000000006FD4C:
	r1 = (word64) Mem0[sp + 0x0000000000000078:int32]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000006FF08:
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000080:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 104
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*_type).typeOff_exit
l000000000006FF20:
	r1 = r6
	r3 = r1
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000060:word64] = r5
	r2 = Mem0[r5 + 0x0000000000000150:word64]
	Mem0[sp + 0x0000000000000010:word64] = r2
	r1 = r3
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	call runtime.mapaccess1_fast32 (retsize: 0;)
	r5 = (word64) Mem0[sp + 0x0000000000000078:int32]
	r4 = Mem0[sp + 0x0000000000000060:word64]
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r3 = Mem0[r1:word64]
	branch r3 == 0x0000000000000000 l000000000006FF20_ds_t
	// succ:  l000000000006FF20_ds_f l000000000006FF20_ds_t
l000000000006FF20_ds_f:
	goto l000000000006FF6C
	// succ:  l000000000006FF6C
l000000000006FF20_ds_t:
	goto l000000000006FF80
	// succ:  l000000000006FF80
l000000000006FF6C:
	Mem0[sp + 0x0000000000000080:word64] = r3
	r4 = Mem0[sp:word64]
	sp = sp + 104
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*_type).typeOff_exit
l000000000006FF80:
	r3 = Mem0[r4 + 0x00000000000000C8:word64]
	r2 = r5
	lo = r3 / r3
	hi = r3 % r3
	r1 = Mem0[r4 + 0x00000000000000D0:word64]
	Mem0[sp + 0x0000000000000028:word64] = r3
	r23 = (word64) (r1 <u r3)
	branch r23 == 0x0000000000000000 l000000000006FF80_ds_t
	// succ:  l000000000006FF80_ds_f l000000000006FF80_ds_t
l000000000006FF80_ds_f:
	goto l000000000006FFA0
	// succ:  l000000000006FFA0
l000000000006FF80_ds_t:
	goto l00000000000700B0
	// succ:  l00000000000700B0
l000000000006FFA0:
	r1 = r5
	Mem0[sp + 0x0000000000000048:word64] = r1
	r2 = Mem0[r4 + 0x00000000000000C8:word64]
	Mem0[sp + 0x0000000000000040:word64] = r2
	r1 = r4
	r2 = Mem0[r4 + 0x00000000000000D0:word64]
	Mem0[sp + 0x0000000000000038:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000700B0:
	Mem0[sp + 0x0000000000000080:word64] = r3
	r4 = Mem0[sp:word64]
	sp = sp + 104
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*_type).typeOff_exit
l00000000000700C4:
	r3 = Mem0[r3 + 0x0000000000000158:word64]
	goto l000000000006FCA4
	// succ:  l000000000006FCA4
runtime.(*_type).typeOff_exit:


// runtime.(*_type).textOff
// Return size: 0
void runtime.(*_type).textOff()
runtime.(*_type).textOff_entry:
	// succ:  l00000000000700D0
l00000000000700D0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000700D0_ds_t
	// succ:  l00000000000700D0_ds_f l00000000000700D0_ds_t
l00000000000700D0_ds_f:
	goto l00000000000700E0
	// succ:  l00000000000700E0
l00000000000700D0_ds_t:
	goto l00000000000700F4
	// succ:  l00000000000700F4
l00000000000700E0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000700D0
	// succ:  l00000000000700D0
l00000000000700F4:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r6 = (word64) Mem0[sp + 0x0000000000000070:int32]
	r4 = Mem0[sp + 0x0000000000000068:word64]
	Mem0[sp + 0x0000000000000030:word64] = r4
	r5 = 0x0000000000000000
	r3 = 0x00000000000D0000
	lo = r3 / r3
	hi = r3 % r3
	lo = r3 / r3
	hi = r3 % r3
	goto l0000000000070118
	// succ:  l0000000000070118
l00000000000700F4_ds_f:
	goto l0000000000070120
	// succ:  l0000000000070120
l00000000000700F4_ds_t:
	goto l0000000000070144
	// succ:  l0000000000070144
l0000000000070118:
	branch r3 == 0x0000000000000000 l00000000000700F4_ds_t
	goto l00000000000700F4_ds_f
	// succ:  l00000000000700F4_ds_f l00000000000700F4_ds_t
l0000000000070120:
	r1 = Mem0[r3 + 0x00000000000000C8:word64]
	r23 = (word64) (r4 <u r1)
	branch r23 != 0x0000000000000000 l0000000000070120_ds_t
	// succ:  l0000000000070120_ds_f l0000000000070120_ds_t
l0000000000070120_ds_f:
	goto l0000000000070130
	// succ:  l0000000000070130
l0000000000070120_ds_t:
	goto l00000000000704D8
	// succ:  l00000000000704D8
l0000000000070130:
	r1 = Mem0[r3 + 0x00000000000000D0:word64]
	r23 = (word64) (r4 <u r1)
	branch r23 == 0x0000000000000000 l0000000000070130_ds_t
	// succ:  l0000000000070130_ds_f l0000000000070130_ds_t
l0000000000070130_ds_f:
	goto l0000000000070140
	// succ:  l0000000000070140
l0000000000070130_ds_t:
	goto l00000000000704D8
	// succ:  l00000000000704D8
l0000000000070140:
	r5 = r3
	// succ:  l0000000000070144
l0000000000070144:
	r1 = r5
	r2 = 0x0000000000000000
	branch r5 != 0x0000000000000000 l0000000000070144_ds_t
	// succ:  l0000000000070144_ds_f l0000000000070144_ds_t
l0000000000070144_ds_f:
	goto l0000000000070154
	// succ:  l0000000000070154
l0000000000070144_ds_t:
	goto l0000000000070394
	// succ:  l0000000000070394
l0000000000070154:
	call runtime.reflectOffsLock (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000070:int32]
	r2 = r1
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000001250:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = r2
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	call runtime.mapaccess1_fast32 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r3 = Mem0[r1:word64]
	r1 = r3
	r2 = r3
	Mem0[sp + 0x0000000000000050:word64] = r3
	call runtime.reflectOffsUnlock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000050:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000070154_ds_t
	// succ:  l0000000000070154_ds_f l0000000000070154_ds_t
l0000000000070154_ds_f:
	goto l00000000000701C0
	// succ:  l00000000000701C0
l0000000000070154_ds_t:
	goto l000000000007037C
	// succ:  l000000000007037C
l00000000000701C0:
	r1 = (word64) Mem0[sp + 0x0000000000000070:int32]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l000000000007037C:
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000078:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*_type).textOff_exit
l0000000000070394:
	r3 = Mem0[r5 + 0x0000000000000060:word64]
	r2 = r6
	lo = r3 / r3
	hi = r3 % r3
	r1 = Mem0[r5 + 0x0000000000000068:word64]
	Mem0[sp + 0x0000000000000028:word64] = r3
	r23 = (word64) (r1 <u r3)
	branch r23 == 0x0000000000000000 l0000000000070394_ds_t
	// succ:  l0000000000070394_ds_f l0000000000070394_ds_t
l0000000000070394_ds_f:
	goto l00000000000703B4
	// succ:  l00000000000703B4
l0000000000070394_ds_t:
	goto l00000000000704C4
	// succ:  l00000000000704C4
l00000000000703B4:
	r1 = r6
	Mem0[sp + 0x0000000000000048:word64] = r1
	r2 = Mem0[r5 + 0x0000000000000060:word64]
	Mem0[sp + 0x0000000000000040:word64] = r2
	r1 = r5
	r2 = Mem0[r5 + 0x0000000000000068:word64]
	Mem0[sp + 0x0000000000000038:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000704C4:
	Mem0[sp + 0x0000000000000078:word64] = r3
	r4 = Mem0[sp:word64]
	sp = sp + 96
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*_type).textOff_exit
l00000000000704D8:
	r3 = Mem0[r3 + 0x0000000000000158:word64]
	goto l0000000000070118
	// succ:  l0000000000070118
runtime.(*_type).textOff_exit:


// runtime.name.tagLen
// Return size: 0
void runtime.name.tagLen()
runtime.name.tagLen_entry:
	// succ:  l00000000000704E8
l00000000000704E8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000704E8_ds_t
	// succ:  l00000000000704E8_ds_f l00000000000704E8_ds_t
l00000000000704E8_ds_f:
	goto l00000000000704F8
	// succ:  l00000000000704F8
l00000000000704E8_ds_t:
	goto l000000000007050C
	// succ:  l000000000007050C
l00000000000704F8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000704E8
	// succ:  l00000000000704E8
l000000000007050C:
	r4 = Mem0[sp + 0x0000000000000008:word64]
	lo = r1 / r4
	hi = r1 % r4
	r1 = (word64) Mem0[r1:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000007050C_ds_t
	// succ:  l000000000007050C_ds_f l000000000007050C_ds_t
l000000000007050C_ds_f:
	goto l000000000007053C
	// succ:  l000000000007053C
l000000000007050C_ds_t:
	goto l0000000000070548
	// succ:  l0000000000070548
l000000000007053C:
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	return
	// succ:  runtime.name.tagLen_exit
l0000000000070548:
	lo = r5 / 0x0000000000000000
	hi = r5 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r5 = r1
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r3 = r1
	r1 = (word64) Mem0[r5:byte]
	r1 = r1 + 0x000000000000FFFF
runtime.name.tagLen_exit:


// runtime.name.name
// Return size: 0
void runtime.name.name()
runtime.name.name_entry:
	// succ:  l00000000000705D0
l00000000000705D0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000705D0_ds_t
	// succ:  l00000000000705D0_ds_f l00000000000705D0_ds_t
l00000000000705D0_ds_f:
	goto l00000000000705E0
	// succ:  l00000000000705E0
l00000000000705D0_ds_t:
	goto l00000000000705F4
	// succ:  l00000000000705F4
l00000000000705E0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000705D0
	// succ:  l00000000000705D0
l00000000000705F4:
	sp = sp + -72
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000060:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000060:word64] = 0x0000000000000000
	branch r6 != 0x0000000000000000 l00000000000705F4_ds_t
	// succ:  l00000000000705F4_ds_f l00000000000705F4_ds_t
l00000000000705F4_ds_f:
	goto l0000000000070618
	// succ:  l0000000000070618
l00000000000705F4_ds_t:
	goto l0000000000070630
	// succ:  l0000000000070630
l0000000000070618:
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000060:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 72
	call r4 (retsize: 0;)
	return
	// succ:  runtime.name.name_exit
l0000000000070630:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r6
	lo = r1 / r6
	hi = r1 % r6
	r5 = r1
	Mem0[sp + 0x0000000000000030:word64] = r6
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = r6
	lo = r1 / r6
	hi = r1 % r6
	r3 = r1
	r1 = (word64) Mem0[r5:byte]
	r1 = r1 + 0x000000000000FFFF
runtime.name.name_exit:


// runtime.name.tag
// Return size: 0
void runtime.name.tag()
runtime.name.tag_entry:
	// succ:  l0000000000070728
l0000000000070728:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000070728_ds_t
	// succ:  l0000000000070728_ds_f l0000000000070728_ds_t
l0000000000070728_ds_f:
	goto l0000000000070738
	// succ:  l0000000000070738
l0000000000070728_ds_t:
	goto l000000000007074C
	// succ:  l000000000007074C
l0000000000070738:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000070728
	// succ:  l0000000000070728
l000000000007074C:
	sp = sp + -72
	Mem0[sp:word64] = ra
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000060:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000060:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.name.tagLen (retsize: 0;)
	r7 = Mem0[sp + 0x0000000000000050:word64]
	r6 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000018:word64] = r6
	branch r6 != 0x0000000000000000 l000000000007074C_ds_t
	// succ:  l000000000007074C_ds_f l000000000007074C_ds_t
l000000000007074C_ds_f:
	goto l0000000000070788
	// succ:  l0000000000070788
l000000000007074C_ds_t:
	goto l00000000000707A0
	// succ:  l00000000000707A0
l0000000000070788:
	Mem0[sp + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000060:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 72
	call r4 (retsize: 0;)
	return
	// succ:  runtime.name.tag_exit
l00000000000707A0:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	Mem0[sp + 0x0000000000000030:word64] = r7
	lo = r1 / r7
	hi = r1 % r7
	r5 = r1
	Mem0[sp + 0x0000000000000020:word64] = r7
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = r7
	lo = r1 / r7
	hi = r1 % r7
	r3 = r1
	r1 = (word64) Mem0[r5:byte]
	r1 = r1 + 0x000000000000FFFF
runtime.name.tag_exit:


// runtime.name.pkgPath
// Return size: 0
void runtime.name.pkgPath()
runtime.name.pkgPath_entry:
	// succ:  l0000000000070878
l0000000000070878:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -192
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000070878_ds_t
	// succ:  l0000000000070878_ds_f l0000000000070878_ds_t
l0000000000070878_ds_f:
	goto l000000000007088C
	// succ:  l000000000007088C
l0000000000070878_ds_t:
	goto l00000000000708A0
	// succ:  l00000000000708A0
l000000000007088C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000070878
	// succ:  l0000000000070878
l00000000000708A0:
	sp = sp + -192
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x00000000000000C8:word64]
	Mem0[sp + 0x00000000000000D0:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000D8:word64] = 0x0000000000000000
	branch r3 == 0x0000000000000000 l00000000000708A0_ds_t
	// succ:  l00000000000708A0_ds_f l00000000000708A0_ds_t
l00000000000708A0_ds_f:
	goto l00000000000708BC
	// succ:  l00000000000708BC
l00000000000708A0_ds_t:
	goto l0000000000070A64
	// succ:  l0000000000070A64
l00000000000708BC:
	Mem0[sp + 0x0000000000000050:word64] = r3
	lo = r1 / r3
	hi = r1 % r3
	r1 = (word64) Mem0[r1:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l00000000000708BC_ds_t
	// succ:  l00000000000708BC_ds_f l00000000000708BC_ds_t
l00000000000708BC_ds_f:
	goto l00000000000708EC
	// succ:  l00000000000708EC
l00000000000708BC_ds_t:
	goto l0000000000070A64
	// succ:  l0000000000070A64
l00000000000708EC:
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	Mem0[sp + 0x0000000000000038:word64] = r3
	lo = r1 / r3
	hi = r1 % r3
	r5 = r1
	Mem0[sp + 0x0000000000000048:word64] = r3
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:word64] = r3
	r6 = r3
	lo = r1 / r3
	hi = r1 % r3
	r4 = r1
	r1 = (word64) Mem0[r5:byte]
	r1 = r1 + 0x000000000000FFFF
l0000000000070A64:
	Mem0[sp + 0x00000000000000D0:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000D8:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 192
	call r4 (retsize: 0;)
	return
	// succ:  runtime.name.pkgPath_exit
runtime.name.pkgPath_exit:


// runtime.typelinksinit
// Return size: 0
void runtime.typelinksinit()
runtime.typelinksinit_entry:
	// succ:  l0000000000070A80
l0000000000070A80:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -632
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l0000000000070A80_ds_t
	// succ:  l0000000000070A80_ds_f l0000000000070A80_ds_t
l0000000000070A80_ds_f:
	goto l0000000000070A94
	// succ:  l0000000000070A94
l0000000000070A80_ds_t:
	goto l0000000000070AA8
	// succ:  l0000000000070AA8
l0000000000070A94:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000070A80
	// succ:  l0000000000070A80
l0000000000070AA8:
	sp = sp + -632
	Mem0[sp:word64] = ra
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000000698:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000070AA8_ds_t
	// succ:  l0000000000070AA8_ds_f l0000000000070AA8_ds_t
l0000000000070AA8_ds_f:
	goto l0000000000070AC8
	// succ:  l0000000000070AC8
l0000000000070AA8_ds_t:
	goto l0000000000070AD8
	// succ:  l0000000000070AD8
l0000000000070AC8:
	r4 = Mem0[sp:word64]
	sp = sp + 632
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typelinksinit_exit
l0000000000070AD8:
	Mem0[sp + 0x0000000000000158:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000160:byte] = (byte) 0x0000000000000000
	Mem0[sp + 0x0000000000000161:byte] = (byte) 0x0000000000000000
	Mem0[sp + 0x0000000000000164:word32] = (word32) 0x0000000000000000
	Mem0[sp + 0x0000000000000168:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000170:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000178:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000180:word64] = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	Mem0[r1:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000010:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000028:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000038:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000050:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000058:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000060:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000068:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000070:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000078:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000080:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000088:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000090:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000098:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000A0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000A8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000B0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000B8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000C0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000C8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000D0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000D8:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000E0:word64] = 0x0000000000000000
	Mem0[r1 + 0x00000000000000E8:word64] = 0x0000000000000000
	r1 = 0x0000000000090000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000018:word64] = r1
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000020:word64] = r1
	call runtime.makemap (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000078:word64] = r1
	lo = r1 / sp
	hi = r1 % sp
	branch r1 != 0x0000000000000000 l0000000000070AD8_ds_t
	// succ:  l0000000000070AD8_ds_f l0000000000070AD8_ds_t
l0000000000070AD8_ds_f:
	goto l0000000000070BB4
	// succ:  l0000000000070BB4
l0000000000070AD8_ds_t:
	goto l0000000000070BB8
	// succ:  l0000000000070BB8
l0000000000070BB4:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000070BB8
l0000000000070BB8:
	Mem0[sp + 0x00000000000000E8:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000F0:word64] = 0x0000000000000000
	Mem0[sp + 0x00000000000000E0:word64] = r1
	r6 = 0x00000000000D0000
	lo = r6 / r6
	hi = r6 % r6
	lo = r6 / r6
	hi = r6 % r6
	Mem0[sp + 0x0000000000000098:word64] = r6
	branch r6 == 0x0000000000000000 l0000000000070BB8_ds_t
	// succ:  l0000000000070BB8_ds_f l0000000000070BB8_ds_t
l0000000000070BB8_ds_f:
	goto l0000000000070BDC
	// succ:  l0000000000070BDC
l0000000000070BB8_ds_t:
	goto l0000000000070C88
	// succ:  l0000000000070C88
l0000000000070BDC:
	r4 = Mem0[sp + 0x00000000000000E0:word64]
	r3 = Mem0[sp + 0x00000000000000E8:word64]
	r5 = Mem0[sp + 0x00000000000000F0:word64]
	lo = r1 / r3
	hi = r1 % r3
	r23 = (word64) (r5 <u r1)
	branch r23 == 0x0000000000000000 l0000000000070BDC_ds_t
	// succ:  l0000000000070BDC_ds_f l0000000000070BDC_ds_t
l0000000000070BDC_ds_f:
	goto l0000000000070BF8
	// succ:  l0000000000070BF8
l0000000000070BDC_ds_t:
	goto l00000000000712B4
	// succ:  l00000000000712B4
l0000000000070BF8:
	r2 = 0x0000000000080000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r3
	r2 = r5
	Mem0[sp + 0x0000000000000020:word64] = r5
	Mem0[sp + 0x0000000000000028:word64] = r1
	call runtime.growslice (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000098:word64]
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[sp + 0x0000000000000040:word64]
	lo = r1 / r3
	hi = r1 % r3
	Mem0[sp + 0x00000000000000E8:word64] = r1
	Mem0[sp + 0x00000000000000F0:word64] = r2
	Mem0[sp + 0x00000000000000E0:word64] = r4
	// succ:  l0000000000070C44
l0000000000070C44:
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
l0000000000070C88:
	r7 = Mem0[sp + 0x00000000000000E8:word64]
	r1 = Mem0[sp + 0x00000000000000E8:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l00000000000712B4:
	Mem0[sp + 0x00000000000000E8:word64] = r1
	goto l0000000000070C44
	// succ:  l0000000000070C44
runtime.typelinksinit_exit:


// runtime.typesEqual
// Return size: 0
void runtime.typesEqual()
runtime.typesEqual_entry:
	// succ:  l00000000000712C0
l00000000000712C0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -600
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l00000000000712C0_ds_t
	// succ:  l00000000000712C0_ds_f l00000000000712C0_ds_t
l00000000000712C0_ds_f:
	goto l00000000000712D4
	// succ:  l00000000000712D4
l00000000000712C0_ds_t:
	goto l00000000000712E8
	// succ:  l00000000000712E8
l00000000000712D4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000712C0
	// succ:  l00000000000712C0
l00000000000712E8:
	sp = sp + -600
	Mem0[sp:word64] = ra
	r5 = Mem0[sp + 0x0000000000000268:word64]
	r3 = Mem0[sp + 0x0000000000000260:word64]
	r1 = 0x0000000000000000
	branch r3 != r5 l00000000000712E8_ds_t
	// succ:  l00000000000712E8_ds_f l00000000000712E8_ds_t
l00000000000712E8_ds_f:
	goto l0000000000071304
	// succ:  l0000000000071304
l00000000000712E8_ds_t:
	goto l0000000000071320
	// succ:  l0000000000071320
l0000000000071304:
l0000000000071320:
	r1 = (word64) Mem0[r3 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r4 = r1 + 0x00000000000000FF
	r1 = (word64) Mem0[r5 + 0x0000000000000017:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = r4 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000030:byte] = (byte) r4
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l0000000000071320_ds_t
	// succ:  l0000000000071320_ds_f l0000000000071320_ds_t
l0000000000071320_ds_f:
	goto l0000000000071360
	// succ:  l0000000000071360
l0000000000071320_ds_t:
	goto l0000000000071378
	// succ:  l0000000000071378
l0000000000071360:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l0000000000071378:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.(*_type).string (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000128:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000130:word64] = r1
	r1 = Mem0[sp + 0x0000000000000268:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.(*_type).string (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000130:word64]
	r4 = Mem0[sp + 0x0000000000000010:word64]
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r5 = r1
	branch r1 != r3 l0000000000071378_ds_t
	// succ:  l0000000000071378_ds_f l0000000000071378_ds_t
l0000000000071378_ds_f:
	goto l00000000000713C0
	// succ:  l00000000000713C0
l0000000000071378_ds_t:
	goto l0000000000072844
	// succ:  l0000000000072844
l00000000000713C0:
	r2 = Mem0[sp + 0x0000000000000128:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	Mem0[sp + 0x0000000000000118:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	r2 = r3
	Mem0[sp + 0x0000000000000120:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.eqstring (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 == 0x0000000000000000 l00000000000713C0_ds_t
	// succ:  l00000000000713C0_ds_f l00000000000713C0_ds_t
l00000000000713C0_ds_f:
	goto l00000000000713F4
	// succ:  l00000000000713F4
l00000000000713C0_ds_t:
	goto l0000000000072844
	// succ:  l0000000000072844
l00000000000713F4:
	r1 = Mem0[sp + 0x0000000000000260:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.(*_type).uncommon (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000078:word64] = r1
	r1 = Mem0[sp + 0x0000000000000268:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.(*_type).uncommon (retsize: 0;)
	r7 = (word64) Mem0[sp + 0x0000000000000030:byte]
	r6 = Mem0[sp + 0x0000000000000078:word64]
	r5 = Mem0[sp + 0x0000000000000268:word64]
	r4 = Mem0[sp + 0x0000000000000260:word64]
	r3 = Mem0[sp + 0x0000000000000010:word64]
	branch r6 != 0x0000000000000000 l00000000000713F4_ds_t
	// succ:  l00000000000713F4_ds_f l00000000000713F4_ds_t
l00000000000713F4_ds_f:
	goto l0000000000071438
	// succ:  l0000000000071438
l00000000000713F4_ds_t:
	goto l000000000007272C
	// succ:  l000000000007272C
l0000000000071438:
	branch r3 != 0x0000000000000000 l0000000000071438_ds_t
	// succ:  l0000000000071438_ds_f l0000000000071438_ds_t
l0000000000071438_ds_f:
	goto l0000000000071440
	// succ:  l0000000000071440
l0000000000071438_ds_t:
	goto l000000000007272C
	// succ:  l000000000007272C
l0000000000071440:
	r1 = r7 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r23 = (word64) (r1 <u r2)
	branch r23 != 0x0000000000000000 l0000000000071440_ds_t
	// succ:  l0000000000071440_ds_f l0000000000071440_ds_t
l0000000000071440_ds_f:
	goto l0000000000071460
	// succ:  l0000000000071460
l0000000000071440_ds_t:
	goto l000000000007149C
	// succ:  l000000000007149C
l0000000000071460:
	r1 = r7 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l0000000000071460_ds_t
	// succ:  l0000000000071460_ds_f l0000000000071460_ds_t
l0000000000071460_ds_f:
	goto l0000000000071480
	// succ:  l0000000000071480
l0000000000071460_ds_t:
	goto l000000000007149C
	// succ:  l000000000007149C
l0000000000071480:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l000000000007149C:
	r1 = r7 + 0x00000000000000FF
	r3 = r1 + 0x00000000000000FF
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l000000000007149C_ds_t
	// succ:  l000000000007149C_ds_f l000000000007149C_ds_t
l000000000007149C_ds_f:
	goto l00000000000714C4
	// succ:  l00000000000714C4
l000000000007149C_ds_t:
	goto l000000000007216C
	// succ:  l000000000007216C
l00000000000714C4:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l00000000000714C4_ds_t
	// succ:  l00000000000714C4_ds_f l00000000000714C4_ds_t
l00000000000714C4_ds_f:
	goto l00000000000714E4
	// succ:  l00000000000714E4
l00000000000714C4_ds_t:
	goto l0000000000071694
	// succ:  l0000000000071694
l00000000000714E4:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l00000000000714E4_ds_t
	// succ:  l00000000000714E4_ds_f l00000000000714E4_ds_t
l00000000000714E4_ds_f:
	goto l0000000000071500
	// succ:  l0000000000071500
l00000000000714E4_ds_t:
	goto l0000000000071580
	// succ:  l0000000000071580
l0000000000071500:
	r3 = r5
	Mem0[sp + 0x00000000000000F0:word64] = r4
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = r5
	Mem0[sp + 0x00000000000000D8:word64] = r5
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.typesEqual (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000071500_ds_t
	// succ:  l0000000000071500_ds_f l0000000000071500_ds_t
l0000000000071500_ds_f:
	goto l000000000007153C
	// succ:  l000000000007153C
l0000000000071500_ds_t:
	goto l000000000007156C
	// succ:  l000000000007156C
l000000000007153C:
	r1 = Mem0[sp + 0x00000000000000F0:word64]
	r1 = Mem0[r1 + 0x0000000000000040:word64]
	r2 = Mem0[sp + 0x00000000000000D8:word64]
	r2 = Mem0[r2 + 0x0000000000000040:word64]
	branch r1 != r2 l000000000007153C_ds_t
	// succ:  l000000000007153C_ds_f l000000000007153C_ds_t
l000000000007153C_ds_f:
	goto l0000000000071554
	// succ:  l0000000000071554
l000000000007153C_ds_t:
	goto l000000000007156C
	// succ:  l000000000007156C
l0000000000071554:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l000000000007156C:
	Mem0[sp + 0x0000000000000270:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l0000000000071580:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000071580_ds_t
	// succ:  l0000000000071580_ds_f l0000000000071580_ds_t
l0000000000071580_ds_f:
	goto l000000000007159C
	// succ:  l000000000007159C
l0000000000071580_ds_t:
	goto l000000000007160C
	// succ:  l000000000007160C
l000000000007159C:
	r3 = r5
	r1 = Mem0[r4 + 0x0000000000000038:word64]
	r2 = Mem0[r5 + 0x0000000000000038:word64]
	branch r1 != r2 l000000000007159C_ds_t
	// succ:  l000000000007159C_ds_f l000000000007159C_ds_t
l000000000007159C_ds_f:
	goto l00000000000715B0
	// succ:  l00000000000715B0
l000000000007159C_ds_t:
	goto l00000000000715F8
	// succ:  l00000000000715F8
l00000000000715B0:
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = r5
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.typesEqual (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l00000000000715B0_ds_t
	// succ:  l00000000000715B0_ds_f l00000000000715B0_ds_t
l00000000000715B0_ds_f:
	goto l00000000000715E0
	// succ:  l00000000000715E0
l00000000000715B0_ds_t:
	goto l00000000000715F8
	// succ:  l00000000000715F8
l00000000000715E0:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l00000000000715F8:
	Mem0[sp + 0x0000000000000270:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l000000000007160C:
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000071694:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000071694_ds_t
	// succ:  l0000000000071694_ds_f l0000000000071694_ds_t
l0000000000071694_ds_f:
	goto l00000000000716B0
	// succ:  l00000000000716B0
l0000000000071694_ds_t:
	goto l0000000000071C4C
	// succ:  l0000000000071C4C
l00000000000716B0:
	Mem0[sp + 0x00000000000000D0:word64] = r4
	Mem0[sp + 0x00000000000000C8:word64] = r5
	r1 = Mem0[sp + 0x00000000000000D0:word64]
	r1 = (word64) Mem0[r1 + 0x0000000000000032:uint16]
	r2 = Mem0[sp + 0x00000000000000C8:word64]
	r2 = (word64) Mem0[r2 + 0x0000000000000032:uint16]
	r1 = r1 + 0x000000000000FFFF
	r2 = r2 + 0x000000000000FFFF
	branch r1 != r2 l00000000000716B0_ds_t
	// succ:  l00000000000716B0_ds_f l00000000000716B0_ds_t
l00000000000716B0_ds_f:
	goto l00000000000716D8
	// succ:  l00000000000716D8
l00000000000716B0_ds_t:
	goto l0000000000071C34
	// succ:  l0000000000071C34
l00000000000716D8:
	r1 = Mem0[sp + 0x00000000000000D0:word64]
	r1 = (word64) Mem0[r1 + 0x0000000000000030:uint16]
	r2 = Mem0[sp + 0x00000000000000C8:word64]
	r2 = (word64) Mem0[r2 + 0x0000000000000030:uint16]
	r1 = r1 + 0x000000000000FFFF
	r2 = r2 + 0x000000000000FFFF
	branch r1 != r2 l00000000000716D8_ds_t
	// succ:  l00000000000716D8_ds_f l00000000000716D8_ds_t
l00000000000716D8_ds_f:
	goto l00000000000716F8
	// succ:  l00000000000716F8
l00000000000716D8_ds_t:
	goto l0000000000071C34
	// succ:  l0000000000071C34
l00000000000716F8:
	r4 = Mem0[sp + 0x00000000000000D0:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r1 = (word64) Mem0[r4 + 0x0000000000000014:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l00000000000716F8_ds_t
	// succ:  l00000000000716F8_ds_f l00000000000716F8_ds_t
l00000000000716F8_ds_f:
	goto l0000000000071728
	// succ:  l0000000000071728
l00000000000716F8_ds_t:
	goto l0000000000071734
	// succ:  l0000000000071734
l0000000000071728:
l0000000000071734:
	lo = r1 / r4
	hi = r1 % r4
	r5 = r1
	r2 = (word64) Mem0[r4 + 0x0000000000000030:uint16]
	r3 = r2 + 0x000000000000FFFF
	r1 = r3 + 0x000000000000FFFF
	r2 = 0x0000000000100000
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l0000000000071734_ds_t
	// succ:  l0000000000071734_ds_f l0000000000071734_ds_t
l0000000000071734_ds_f:
	goto l0000000000071758
	// succ:  l0000000000071758
l0000000000071734_ds_t:
	goto l0000000000071C20
	// succ:  l0000000000071C20
l0000000000071758:
	r9 = r5
	branch r5 != 0x0000000000000000 l0000000000071758_ds_t
	// succ:  l0000000000071758_ds_f l0000000000071758_ds_t
l0000000000071758_ds_f:
	goto l0000000000071764
	// succ:  l0000000000071764
l0000000000071758_ds_t:
	goto l0000000000071768
	// succ:  l0000000000071768
l0000000000071764:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000071768
l0000000000071768:
	r8 = r1
	r7 = 0x0000000000100000
	r5 = r1
	r4 = Mem0[sp + 0x00000000000000C8:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r1 = (word64) Mem0[r4 + 0x0000000000000014:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l0000000000071768_ds_t
	// succ:  l0000000000071768_ds_f l0000000000071768_ds_t
l0000000000071768_ds_f:
	goto l00000000000717A4
	// succ:  l00000000000717A4
l0000000000071768_ds_t:
	goto l00000000000717B0
	// succ:  l00000000000717B0
l00000000000717A4:
l00000000000717B0:
	lo = r1 / r4
	hi = r1 % r4
	r3 = r1
	r2 = (word64) Mem0[r4 + 0x0000000000000030:uint16]
	r4 = r2 + 0x000000000000FFFF
	r1 = r4 + 0x000000000000FFFF
	r2 = 0x0000000000100000
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l00000000000717B0_ds_t
	// succ:  l00000000000717B0_ds_f l00000000000717B0_ds_t
l00000000000717B0_ds_f:
	goto l00000000000717D4
	// succ:  l00000000000717D4
l00000000000717B0_ds_t:
	goto l0000000000071C0C
	// succ:  l0000000000071C0C
l00000000000717D4:
	r6 = r3
	branch r3 != 0x0000000000000000 l00000000000717D4_ds_t
	// succ:  l00000000000717D4_ds_f l00000000000717D4_ds_t
l00000000000717D4_ds_f:
	goto l00000000000717E0
	// succ:  l00000000000717E0
l00000000000717D4_ds_t:
	goto l00000000000717E4
	// succ:  l00000000000717E4
l00000000000717E0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000717E4
l00000000000717E4:
	r2 = 0x0000000000100000
	Mem0[sp + 0x0000000000000138:word64] = r9
	Mem0[sp + 0x0000000000000140:word64] = r8
	Mem0[sp + 0x0000000000000148:word64] = r7
	Mem0[sp + 0x0000000000000168:word64] = r3
	Mem0[sp + 0x0000000000000170:word64] = r1
	Mem0[sp + 0x0000000000000178:word64] = r2
	Mem0[sp + 0x0000000000000240:word64] = r9
	Mem0[sp + 0x00000000000001E0:word64] = r9
	Mem0[sp + 0x0000000000000248:word64] = r8
	r5 = r8
	Mem0[sp + 0x0000000000000250:word64] = r7
	Mem0[sp + 0x00000000000001F0:word64] = r7
	Mem0[sp + 0x0000000000000228:word64] = r3
	Mem0[sp + 0x00000000000001B0:word64] = r3
	Mem0[sp + 0x0000000000000230:word64] = r1
	Mem0[sp + 0x00000000000001B8:word64] = r1
	Mem0[sp + 0x0000000000000238:word64] = r2
	Mem0[sp + 0x00000000000001C0:word64] = r2
	r4 = 0x0000000000000000
	Mem0[sp + 0x00000000000001E8:word64] = r5
	r23 = (word64) (r4 < r5)
	branch r23 == 0x0000000000000000 l00000000000717E4_ds_t
	// succ:  l00000000000717E4_ds_f l00000000000717E4_ds_t
l00000000000717E4_ds_f:
	goto l0000000000071844
	// succ:  l0000000000071844
l00000000000717E4_ds_t:
	goto l0000000000071904
	// succ:  l0000000000071904
l0000000000071844:
	r1 = Mem0[sp + 0x00000000000001E0:word64]
	r3 = r5
	r2 = r4
	r23 = (word64) (r4 <u r5)
	branch r23 != 0x0000000000000000 l0000000000071844_ds_t
	// succ:  l0000000000071844_ds_f l0000000000071844_ds_t
l0000000000071844_ds_f:
	goto l000000000007185C
	// succ:  l000000000007185C
l0000000000071844_ds_t:
	goto l0000000000071868
	// succ:  l0000000000071868
l000000000007185C:
	call runtime.panicindex (retsize: 0;)
l0000000000071868:
l0000000000071904:
	r3 = Mem0[sp + 0x00000000000000D0:word64]
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	r1 = (word64) Mem0[r3 + 0x0000000000000014:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + r2
	r1 = r1 + 0x00000000000000FF
	r2 = 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 == r2 l0000000000071904_ds_t
	// succ:  l0000000000071904_ds_f l0000000000071904_ds_t
l0000000000071904_ds_f:
	goto l0000000000071934
	// succ:  l0000000000071934
l0000000000071904_ds_t:
	goto l0000000000071940
	// succ:  l0000000000071940
l0000000000071934:
l0000000000071940:
	r5 = (word64) Mem0[r3 + 0x0000000000000032:uint16]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x000000000000FFFF
	r5 = r5 + r2
	r6 = r5 + 0x000000000000FFFF
	lo = r5 / r3
	hi = r5 % r3
	r2 = (word64) Mem0[r3 + 0x0000000000000030:uint16]
	r4 = r2 + 0x000000000000FFFF
	r1 = (word64) Mem0[r3 + 0x0000000000000030:uint16]
	r2 = r6 + 0x000000000000FFFF
	r1 = r1 + r2
	r1 = r1 + 0x000000000000FFFF
	r3 = r1 + 0x000000000000FFFF
	r1 = r4 + 0x000000000000FFFF
	r2 = r3 + 0x000000000000FFFF
	r3 = 0x0000000000100000
	r23 = (word64) (r3 <u r2)
	branch r23 != 0x0000000000000000 l0000000000071940_ds_t
	// succ:  l0000000000071940_ds_f l0000000000071940_ds_t
l0000000000071940_ds_f:
	goto l000000000007198C
	// succ:  l000000000007198C
l0000000000071940_ds_t:
	goto l0000000000071BF8
	// succ:  l0000000000071BF8
l000000000007198C:
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l000000000007198C_ds_t
	// succ:  l000000000007198C_ds_f l000000000007198C_ds_t
l000000000007198C_ds_f:
	goto l0000000000071998
	// succ:  l0000000000071998
l000000000007198C_ds_t:
	goto l0000000000071BF8
	// succ:  l0000000000071BF8
l0000000000071998:
l0000000000071BF8:
	call runtime.panicslice (retsize: 0;)
l0000000000071C0C:
	call runtime.panicslice (retsize: 0;)
l0000000000071C20:
	call runtime.panicslice (retsize: 0;)
l0000000000071C34:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l0000000000071C4C:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000071C4C_ds_t
	// succ:  l0000000000071C4C_ds_f l0000000000071C4C_ds_t
l0000000000071C4C_ds_f:
	goto l0000000000071C68
	// succ:  l0000000000071C68
l0000000000071C4C_ds_t:
	goto l00000000000720B4
	// succ:  l00000000000720B4
l0000000000071C68:
	Mem0[sp + 0x00000000000000B8:word64] = r5
	Mem0[sp + 0x00000000000000C0:word64] = r4
	branch r4 != 0x0000000000000000 l0000000000071C68_ds_t
	// succ:  l0000000000071C68_ds_f l0000000000071C68_ds_t
l0000000000071C68_ds_f:
	goto l0000000000071C78
	// succ:  l0000000000071C78
l0000000000071C68_ds_t:
	goto l0000000000071C7C
	// succ:  l0000000000071C7C
l0000000000071C78:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000071C7C
l0000000000071C7C:
	lo = r1 / r4
	hi = r1 % r4
	lo = r2 / sp
	hi = r2 % sp
	r1 = r1 + -8
	r2 = r2 + -8
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r1 + 8
	Mem0[r2 + 0x0000000000000008:word64] = r3
	r2 = r2 + 8
	call runtime.name.name (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000128:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000130:word64] = r1
	r1 = Mem0[sp + 0x00000000000000B8:word64]
	branch r1 != 0x0000000000000000 l0000000000071C7C_ds_t
	// succ:  l0000000000071C7C_ds_f l0000000000071C7C_ds_t
l0000000000071C7C_ds_f:
	goto l0000000000071CC0
	// succ:  l0000000000071CC0
l0000000000071C7C_ds_t:
	goto l0000000000071CC4
	// succ:  l0000000000071CC4
l0000000000071CC0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000071CC4
l0000000000071CC4:
	lo = r1 / r1
	hi = r1 % r1
	lo = r2 / sp
	hi = r2 % sp
	r1 = r1 + -8
	r2 = r2 + -8
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r1 + 8
	Mem0[r2 + 0x0000000000000008:word64] = r3
	r2 = r2 + 8
	call runtime.name.name (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000130:word64]
	r4 = Mem0[sp + 0x0000000000000010:word64]
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r5 = r1
	branch r1 != r3 l0000000000071CC4_ds_t
	// succ:  l0000000000071CC4_ds_f l0000000000071CC4_ds_t
l0000000000071CC4_ds_f:
	goto l0000000000071D04
	// succ:  l0000000000071D04
l0000000000071CC4_ds_t:
	goto l000000000007209C
	// succ:  l000000000007209C
l0000000000071D04:
	r2 = Mem0[sp + 0x0000000000000128:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	Mem0[sp + 0x0000000000000118:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	r2 = r3
	Mem0[sp + 0x0000000000000120:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.eqstring (retsize: 0;)
	r6 = Mem0[sp + 0x00000000000000C0:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 == 0x0000000000000000 l0000000000071D04_ds_t
	// succ:  l0000000000071D04_ds_f l0000000000071D04_ds_t
l0000000000071D04_ds_f:
	goto l0000000000071D3C
	// succ:  l0000000000071D3C
l0000000000071D04_ds_t:
	goto l000000000007209C
	// succ:  l000000000007209C
l0000000000071D3C:
	r4 = Mem0[r6 + 0x0000000000000040:word64]
	r1 = Mem0[sp + 0x00000000000000B8:word64]
	r2 = Mem0[r1 + 0x0000000000000040:word64]
	branch r4 == r2 l0000000000071D3C_ds_t
	// succ:  l0000000000071D3C_ds_f l0000000000071D3C_ds_t
l0000000000071D3C_ds_f:
	goto l0000000000071D50
	// succ:  l0000000000071D50
l0000000000071D3C_ds_t:
	goto l0000000000071D68
	// succ:  l0000000000071D68
l0000000000071D50:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l0000000000071D68:
	r3 = 0x0000000000000000
	r2 = Mem0[r6 + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000048:word64] = r2
	r2 = Mem0[sp + 0x0000000000000048:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l0000000000071D68_ds_t
	// succ:  l0000000000071D68_ds_f l0000000000071D68_ds_t
l0000000000071D68_ds_f:
	goto l0000000000071D84
	// succ:  l0000000000071D84
l0000000000071D68_ds_t:
	goto l0000000000072050
	// succ:  l0000000000072050
l0000000000071D84:
	Mem0[sp + 0x0000000000000050:word64] = r3
	r4 = r3
	branch r6 != 0x0000000000000000 l0000000000071D84_ds_t
	// succ:  l0000000000071D84_ds_f l0000000000071D84_ds_t
l0000000000071D84_ds_f:
	goto l0000000000071D94
	// succ:  l0000000000071D94
l0000000000071D84_ds_t:
	goto l0000000000071D98
	// succ:  l0000000000071D98
l0000000000071D94:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000071D98
l0000000000071D98:
	r1 = Mem0[r6 + 0x0000000000000038:word64]
	r3 = Mem0[r6 + 0x0000000000000040:word64]
	r2 = Mem0[r6 + 0x0000000000000048:word64]
	r5 = r3
	r2 = r4
	r23 = (word64) (r4 <u r3)
	branch r23 != 0x0000000000000000 l0000000000071D98_ds_t
	// succ:  l0000000000071D98_ds_f l0000000000071D98_ds_t
l0000000000071D98_ds_f:
	goto l0000000000071DB8
	// succ:  l0000000000071DB8
l0000000000071D98_ds_t:
	goto l0000000000071DC4
	// succ:  l0000000000071DC4
l0000000000071DB8:
	call runtime.panicindex (retsize: 0;)
l0000000000071DC4:
l0000000000072050:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l000000000007209C:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l00000000000720B4:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l00000000000720B4_ds_t
	// succ:  l00000000000720B4_ds_f l00000000000720B4_ds_t
l00000000000720B4_ds_f:
	goto l00000000000720D0
	// succ:  l00000000000720D0
l00000000000720B4_ds_t:
	goto l000000000007160C
	// succ:  l000000000007160C
l00000000000720D0:
	r3 = r5
	Mem0[sp + 0x00000000000000B0:word64] = r4
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = r5
	Mem0[sp + 0x00000000000000A8:word64] = r5
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.typesEqual (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l00000000000720D0_ds_t
	// succ:  l00000000000720D0_ds_f l00000000000720D0_ds_t
l00000000000720D0_ds_f:
	goto l000000000007210C
	// succ:  l000000000007210C
l00000000000720D0_ds_t:
	goto l0000000000072158
	// succ:  l0000000000072158
l000000000007210C:
	r1 = Mem0[sp + 0x00000000000000B0:word64]
	r2 = Mem0[r1 + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x00000000000000A8:word64]
	r2 = Mem0[r1 + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.typesEqual (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000007210C_ds_t
	// succ:  l000000000007210C_ds_f l000000000007210C_ds_t
l000000000007210C_ds_f:
	goto l0000000000072140
	// succ:  l0000000000072140
l000000000007210C_ds_t:
	goto l0000000000072158
	// succ:  l0000000000072158
l0000000000072140:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l0000000000072158:
	Mem0[sp + 0x0000000000000270:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l000000000007216C:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r23 = (word64) (r2 <u r1)
	branch r23 != 0x0000000000000000 l000000000007216C_ds_t
	// succ:  l000000000007216C_ds_f l000000000007216C_ds_t
l000000000007216C_ds_f:
	goto l000000000007218C
	// succ:  l000000000007218C
l000000000007216C_ds_t:
	goto l0000000000072244
	// succ:  l0000000000072244
l000000000007218C:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000007218C_ds_t
	// succ:  l000000000007218C_ds_f l000000000007218C_ds_t
l000000000007218C_ds_f:
	goto l00000000000721A8
	// succ:  l00000000000721A8
l000000000007218C_ds_t:
	goto l00000000000721E8
	// succ:  l00000000000721E8
l00000000000721A8:
	r3 = r5
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = r5
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.typesEqual (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l00000000000721E8:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l00000000000721E8_ds_t
	// succ:  l00000000000721E8_ds_f l00000000000721E8_ds_t
l00000000000721E8_ds_f:
	goto l0000000000072204
	// succ:  l0000000000072204
l00000000000721E8_ds_t:
	goto l000000000007160C
	// succ:  l000000000007160C
l0000000000072204:
	r3 = r5
	r2 = Mem0[r4 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = r5
	r2 = Mem0[r5 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.typesEqual (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l0000000000072244:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000072244_ds_t
	// succ:  l0000000000072244_ds_f l0000000000072244_ds_t
l0000000000072244_ds_f:
	goto l0000000000072260
	// succ:  l0000000000072260
l0000000000072244_ds_t:
	goto l000000000007227C
	// succ:  l000000000007227C
l0000000000072260:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l000000000007227C:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000007227C_ds_t
	// succ:  l000000000007227C_ds_f l000000000007227C_ds_t
l000000000007227C_ds_f:
	goto l0000000000072298
	// succ:  l0000000000072298
l000000000007227C_ds_t:
	goto l00000000000726F4
	// succ:  l00000000000726F4
l0000000000072298:
	Mem0[sp + 0x00000000000000A0:word64] = r4
	Mem0[sp + 0x0000000000000098:word64] = r5
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	r3 = Mem0[r1 + 0x0000000000000040:word64]
	r1 = Mem0[sp + 0x0000000000000098:word64]
	r2 = Mem0[r1 + 0x0000000000000040:word64]
	branch r3 == r2 l0000000000072298_ds_t
	// succ:  l0000000000072298_ds_f l0000000000072298_ds_t
l0000000000072298_ds_f:
	goto l00000000000722B8
	// succ:  l00000000000722B8
l0000000000072298_ds_t:
	goto l00000000000722D0
	// succ:  l00000000000722D0
l00000000000722B8:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l00000000000722D0:
	r3 = 0x0000000000000000
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	r2 = Mem0[r1 + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000050:word64] = r2
	r2 = Mem0[sp + 0x0000000000000050:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l00000000000722D0_ds_t
	// succ:  l00000000000722D0_ds_f l00000000000722D0_ds_t
l00000000000722D0_ds_f:
	goto l00000000000722F0
	// succ:  l00000000000722F0
l00000000000722D0_ds_t:
	goto l0000000000072690
	// succ:  l0000000000072690
l00000000000722F0:
	Mem0[sp + 0x0000000000000048:word64] = r3
	r4 = r3
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	branch r1 != 0x0000000000000000 l00000000000722F0_ds_t
	// succ:  l00000000000722F0_ds_f l00000000000722F0_ds_t
l00000000000722F0_ds_f:
	goto l0000000000072304
	// succ:  l0000000000072304
l00000000000722F0_ds_t:
	goto l0000000000072308
	// succ:  l0000000000072308
l0000000000072304:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000072308
l0000000000072308:
	r3 = Mem0[r1 + 0x0000000000000038:word64]
	r5 = Mem0[r1 + 0x0000000000000040:word64]
	r2 = Mem0[r1 + 0x0000000000000048:word64]
	r1 = r3
	r3 = r5
	r2 = r4
	r23 = (word64) (r4 <u r5)
	branch r23 != 0x0000000000000000 l0000000000072308_ds_t
	// succ:  l0000000000072308_ds_f l0000000000072308_ds_t
l0000000000072308_ds_f:
	goto l000000000007232C
	// succ:  l000000000007232C
l0000000000072308_ds_t:
	goto l0000000000072338
	// succ:  l0000000000072338
l000000000007232C:
	call runtime.panicindex (retsize: 0;)
l0000000000072338:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
l0000000000072690:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l00000000000726F4:
	r1 = r3 + 0x00000000000000FF
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l00000000000726F4_ds_t
	// succ:  l00000000000726F4_ds_f l00000000000726F4_ds_t
l00000000000726F4_ds_f:
	goto l0000000000072710
	// succ:  l0000000000072710
l00000000000726F4_ds_t:
	goto l000000000007160C
	// succ:  l000000000007160C
l0000000000072710:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l000000000007272C:
	branch r6 == 0x0000000000000000 l000000000007272C_ds_t
	// succ:  l000000000007272C_ds_f l000000000007272C_ds_t
l000000000007272C_ds_f:
	goto l0000000000072734
	// succ:  l0000000000072734
l000000000007272C_ds_t:
	goto l000000000007282C
	// succ:  l000000000007282C
l0000000000072734:
	Mem0[sp + 0x0000000000000070:word64] = r3
	branch r3 == 0x0000000000000000 l0000000000072734_ds_t
	// succ:  l0000000000072734_ds_f l0000000000072734_ds_t
l0000000000072734_ds_f:
	goto l0000000000072740
	// succ:  l0000000000072740
l0000000000072734_ds_t:
	goto l000000000007282C
	// succ:  l000000000007282C
l0000000000072740:
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = r6
	r2 = (word64) Mem0[r6:int32]
	Mem0[sp + 0x0000000000000010:word32] = (word32) r2
	call runtime.(*_type).nameOff (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r2 = r1
	Mem0[sp + 0x00000000000000E8:word64] = r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.name.name (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000108:word64] = r1
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000110:word64] = r1
	r1 = Mem0[sp + 0x0000000000000268:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000070:word64]
	r2 = (word64) Mem0[r1:int32]
	Mem0[sp + 0x0000000000000010:word32] = (word32) r2
	call runtime.(*_type).nameOff (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r2 = r1
	Mem0[sp + 0x00000000000000E8:word64] = r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.name.name (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000110:word64]
	r4 = Mem0[sp + 0x0000000000000010:word64]
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r5 = r1
	branch r1 != r3 l0000000000072740_ds_t
	// succ:  l0000000000072740_ds_f l0000000000072740_ds_t
l0000000000072740_ds_f:
	goto l00000000000727CC
	// succ:  l00000000000727CC
l0000000000072740_ds_t:
	goto l0000000000072814
	// succ:  l0000000000072814
l00000000000727CC:
	r2 = Mem0[sp + 0x0000000000000108:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	Mem0[sp + 0x00000000000000F8:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r4
	r2 = r3
	Mem0[sp + 0x0000000000000100:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.eqstring (retsize: 0;)
	r7 = (word64) Mem0[sp + 0x0000000000000030:byte]
	r5 = Mem0[sp + 0x0000000000000268:word64]
	r4 = Mem0[sp + 0x0000000000000260:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 == 0x0000000000000000 l00000000000727CC_ds_t
	// succ:  l00000000000727CC_ds_f l00000000000727CC_ds_t
l00000000000727CC_ds_f:
	goto l000000000007280C
	// succ:  l000000000007280C
l00000000000727CC_ds_t:
	goto l0000000000072814
	// succ:  l0000000000072814
l000000000007280C:
	goto l0000000000071440
	// succ:  l0000000000071440
l0000000000072814:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l000000000007282C:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
l0000000000072844:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000270:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 600
	call r4 (retsize: 0;)
	return
	// succ:  runtime.typesEqual_exit
runtime.typesEqual_exit:


// runtime.writeErr
// Return size: 0
void runtime.writeErr()
runtime.writeErr_entry:
	// succ:  l0000000000072860
l0000000000072860:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000072860_ds_t
	// succ:  l0000000000072860_ds_f l0000000000072860_ds_t
l0000000000072860_ds_f:
	goto l0000000000072870
	// succ:  l0000000000072870
l0000000000072860_ds_t:
	goto l0000000000072884
	// succ:  l0000000000072884
l0000000000072870:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000072860
	// succ:  l0000000000072860
l0000000000072884:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000038:word64]
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r2 = r4
	r3 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r4)
	branch r23 != 0x0000000000000000 l0000000000072884_ds_t
	// succ:  l0000000000072884_ds_f l0000000000072884_ds_t
l0000000000072884_ds_f:
	goto l00000000000728B0
	// succ:  l00000000000728B0
l0000000000072884_ds_t:
	goto l00000000000728BC
	// succ:  l00000000000728BC
l00000000000728B0:
	call runtime.panicindex (retsize: 0;)
l00000000000728BC:
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = r4
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	call runtime.write (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.writeErr_exit
runtime.writeErr_exit:


// runtime.cgocallbackg1.func1
// Return size: 0
void runtime.cgocallbackg1.func1()
runtime.cgocallbackg1.func1_entry:
	// succ:  l00000000000728E0
l00000000000728E0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000728E0_ds_t
	// succ:  l00000000000728E0_ds_f l00000000000728E0_ds_t
l00000000000728E0_ds_f:
	goto l00000000000728F0
	// succ:  l00000000000728F0
l00000000000728E0_ds_t:
	goto l0000000000072904
	// succ:  l0000000000072904
l00000000000728F0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000728E0
	// succ:  l00000000000728E0
l0000000000072904:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000072904_ds_t
	// succ:  l0000000000072904_ds_f l0000000000072904_ds_t
l0000000000072904_ds_f:
	goto l0000000000072910
	// succ:  l0000000000072910
l0000000000072904_ds_t:
	goto l0000000000072914
	// succ:  l0000000000072914
l0000000000072910:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000072914
l0000000000072914:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	r2 = Mem0[r1 + 0x0000000000000008:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
runtime.cgocallbackg1.func1_exit:


// runtime.cgoCheckWriteBarrier.func1
// Return size: 0
void runtime.cgoCheckWriteBarrier.func1()
runtime.cgoCheckWriteBarrier.func1_entry:
	// succ:  l0000000000072938
l0000000000072938:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000072938_ds_t
	// succ:  l0000000000072938_ds_f l0000000000072938_ds_t
l0000000000072938_ds_f:
	goto l0000000000072948
	// succ:  l0000000000072948
l0000000000072938_ds_t:
	goto l000000000007295C
	// succ:  l000000000007295C
l0000000000072948:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000072938
	// succ:  l0000000000072938
l000000000007295C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r3 = Mem0[r22 + 0x0000000000000008:word64]
	r2 = Mem0[r22 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000020:word64] = r3
	r1 = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.cgoCheckWriteBarrier.func1_exit:


// runtime.cgoCheckTypedBlock.func1
// Return size: 0
void runtime.cgoCheckTypedBlock.func1()
runtime.cgoCheckTypedBlock.func1_entry:
	// succ:  l0000000000072A38
l0000000000072A38:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000072A38_ds_t
	// succ:  l0000000000072A38_ds_f l0000000000072A38_ds_t
l0000000000072A38_ds_f:
	goto l0000000000072A48
	// succ:  l0000000000072A48
l0000000000072A38_ds_t:
	goto l0000000000072A5C
	// succ:  l0000000000072A5C
l0000000000072A48:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000072A38
	// succ:  l0000000000072A38
l0000000000072A5C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r5 = Mem0[r22 + 0x0000000000000008:word64]
	r4 = Mem0[r22 + 0x0000000000000010:word64]
	r3 = Mem0[r22 + 0x0000000000000018:word64]
	r2 = Mem0[r22 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r5
	Mem0[sp + 0x0000000000000010:word64] = r4
	Mem0[sp + 0x0000000000000018:word64] = r3
	r1 = r2
	Mem0[sp + 0x0000000000000020:word64] = r2
	call runtime.cgoCheckUsingType (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgoCheckTypedBlock.func1_exit
runtime.cgoCheckTypedBlock.func1_exit:


// runtime.cgoCheckTypedBlock.func2
// Return size: 0
void runtime.cgoCheckTypedBlock.func2()
runtime.cgoCheckTypedBlock.func2_entry:
	// succ:  l0000000000072AA0
l0000000000072AA0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000072AA0_ds_t
	// succ:  l0000000000072AA0_ds_f l0000000000072AA0_ds_t
l0000000000072AA0_ds_f:
	goto l0000000000072AB0
	// succ:  l0000000000072AB0
l0000000000072AA0_ds_t:
	goto l0000000000072AC4
	// succ:  l0000000000072AC4
l0000000000072AB0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000072AA0
	// succ:  l0000000000072AA0
l0000000000072AC4:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.cgoCheckTypedBlock.func2_exit:


// runtime.cgoCheckBits.func1
// Return size: 0
void runtime.cgoCheckBits.func1()
runtime.cgoCheckBits.func1_entry:
	// succ:  l0000000000072B00
l0000000000072B00:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000072B00_ds_t
	// succ:  l0000000000072B00_ds_f l0000000000072B00_ds_t
l0000000000072B00_ds_f:
	goto l0000000000072B10
	// succ:  l0000000000072B10
l0000000000072B00_ds_t:
	goto l0000000000072B24
	// succ:  l0000000000072B24
l0000000000072B10:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000072B00
	// succ:  l0000000000072B00
l0000000000072B24:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.cgoCheckBits.func1_exit:


// runtime.chansend.func1
// Return size: 0
void runtime.chansend.func1()
runtime.chansend.func1_entry:
	// succ:  l0000000000072B60
l0000000000072B60:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000072B60_ds_t
	// succ:  l0000000000072B60_ds_f l0000000000072B60_ds_t
l0000000000072B60_ds_f:
	goto l0000000000072B70
	// succ:  l0000000000072B70
l0000000000072B60_ds_t:
	goto l0000000000072B84
	// succ:  l0000000000072B84
l0000000000072B70:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000072B60
	// succ:  l0000000000072B60
l0000000000072B84:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000072B84_ds_t
	// succ:  l0000000000072B84_ds_f l0000000000072B84_ds_t
l0000000000072B84_ds_f:
	goto l0000000000072BA0
	// succ:  l0000000000072BA0
l0000000000072B84_ds_t:
	goto l0000000000072BA4
	// succ:  l0000000000072BA4
l0000000000072BA0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000072BA4
l0000000000072BA4:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.chansend.func1_exit
runtime.chansend.func1_exit:


// runtime.chanrecv.func1
// Return size: 0
void runtime.chanrecv.func1()
runtime.chanrecv.func1_entry:
	// succ:  l0000000000072BD0
l0000000000072BD0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000072BD0_ds_t
	// succ:  l0000000000072BD0_ds_f l0000000000072BD0_ds_t
l0000000000072BD0_ds_f:
	goto l0000000000072BE0
	// succ:  l0000000000072BE0
l0000000000072BD0_ds_t:
	goto l0000000000072BF4
	// succ:  l0000000000072BF4
l0000000000072BE0:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000072BD0
	// succ:  l0000000000072BD0
l0000000000072BF4:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000072BF4_ds_t
	// succ:  l0000000000072BF4_ds_f l0000000000072BF4_ds_t
l0000000000072BF4_ds_f:
	goto l0000000000072C10
	// succ:  l0000000000072C10
l0000000000072BF4_ds_t:
	goto l0000000000072C14
	// succ:  l0000000000072C14
l0000000000072C10:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000072C14
l0000000000072C14:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.unlock (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.chanrecv.func1_exit
runtime.chanrecv.func1_exit:


// runtime.(*cpuProfile).(runtime.flushlog)-fm
// Return size: 0
void runtime.(*cpuProfile).(runtime.flushlog)-fm()
runtime.(*cpuProfile).(runtime.flushlog)-fm_entry:
	// succ:  l0000000000072C40
l0000000000072C40:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000072C40_ds_t
	// succ:  l0000000000072C40_ds_f l0000000000072C40_ds_t
l0000000000072C40_ds_f:
	goto l0000000000072C50
	// succ:  l0000000000072C50
l0000000000072C40_ds_t:
	goto l0000000000072C64
	// succ:  l0000000000072C64
l0000000000072C50:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000072C40
	// succ:  l0000000000072C40
l0000000000072C64:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = 0x0000000000000000
	r2 = Mem0[r22 + 0x0000000000000008:word64]
	r1 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.(*cpuProfile).flushlog (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000020:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*cpuProfile).(runtime.flushlog)-fm_exit
runtime.(*cpuProfile).(runtime.flushlog)-fm_exit:


// runtime.(*mcache).nextFree.func1
// Return size: 0
void runtime.(*mcache).nextFree.func1()
runtime.(*mcache).nextFree.func1_entry:
	// succ:  l0000000000072CA8
l0000000000072CA8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000072CA8_ds_t
	// succ:  l0000000000072CA8_ds_f l0000000000072CA8_ds_t
l0000000000072CA8_ds_f:
	goto l0000000000072CB8
	// succ:  l0000000000072CB8
l0000000000072CA8_ds_t:
	goto l0000000000072CCC
	// succ:  l0000000000072CCC
l0000000000072CB8:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000072CA8
	// succ:  l0000000000072CA8
l0000000000072CCC:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r3 = Mem0[r22 + 0x0000000000000008:word64]
	r1 = (word64) Mem0[r22 + 0x0000000000000010:int8]
	r2 = r1 << 0x18
	r2 = r2 >> 0x18
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = r2 << 0x18
	r1 = r1 >> 0x18
	r1 = r1
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
	call runtime.(*mcache).refill (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mcache).nextFree.func1_exit
runtime.(*mcache).nextFree.func1_exit:


// runtime.mallocgc.func1
// Return size: 0
void runtime.mallocgc.func1()
runtime.mallocgc.func1_entry:
	// succ:  l0000000000072D10
l0000000000072D10:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000072D10_ds_t
	// succ:  l0000000000072D10_ds_f l0000000000072D10_ds_t
l0000000000072D10_ds_f:
	goto l0000000000072D20
	// succ:  l0000000000072D20
l0000000000072D10_ds_t:
	goto l0000000000072D34
	// succ:  l0000000000072D34
l0000000000072D20:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000072D10
	// succ:  l0000000000072D10
l0000000000072D34:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r3 = Mem0[r22 + 0x0000000000000010:word64]
	r1 = (word64) Mem0[r22 + 0x0000000000000018:byte]
	r4 = r1 + 0x00000000000000FF
	r3 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000008:word64] = r3
	r2 = r4 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000010:byte] = (byte) r2
	call runtime.largeAlloc (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r2 = Mem0[sp + 0x0000000000000020:word64]
	branch r2 != 0x0000000000000000 l0000000000072D34_ds_t
	// succ:  l0000000000072D34_ds_f l0000000000072D34_ds_t
l0000000000072D34_ds_f:
	goto l0000000000072D78
	// succ:  l0000000000072D78
l0000000000072D34_ds_t:
	goto l0000000000072D7C
	// succ:  l0000000000072D7C
l0000000000072D78:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000072D7C
l0000000000072D7C:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000072D7C_ds_t
	// succ:  l0000000000072D7C_ds_f l0000000000072D7C_ds_t
l0000000000072D7C_ds_f:
	goto l0000000000072D94
	// succ:  l0000000000072D94
l0000000000072D7C_ds_t:
	goto l0000000000072DA8
	// succ:  l0000000000072DA8
l0000000000072D94:
	Mem0[r2:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mallocgc.func1_exit
l0000000000072DA8:
	r3 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mallocgc.func1_exit
runtime.mallocgc.func1_exit:


// runtime.persistentalloc.func1
// Return size: 0
void runtime.persistentalloc.func1()
runtime.persistentalloc.func1_entry:
	// succ:  l0000000000072DD0
l0000000000072DD0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000072DD0_ds_t
	// succ:  l0000000000072DD0_ds_f l0000000000072DD0_ds_t
l0000000000072DD0_ds_f:
	goto l0000000000072DE0
	// succ:  l0000000000072DE0
l0000000000072DD0_ds_t:
	goto l0000000000072DF4
	// succ:  l0000000000072DF4
l0000000000072DE0:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000072DD0
	// succ:  l0000000000072DD0
l0000000000072DF4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000028:word64] = r1
	r5 = Mem0[r22 + 0x0000000000000010:word64]
	r4 = Mem0[r22 + 0x0000000000000018:word64]
	r3 = Mem0[r22 + 0x0000000000000020:word64]
	r2 = r3
	Mem0[sp + 0x0000000000000008:word64] = r5
	Mem0[sp + 0x0000000000000010:word64] = r4
	r1 = r3
	Mem0[sp + 0x0000000000000018:word64] = r3
	call runtime.persistentalloc1 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r2 = Mem0[sp + 0x0000000000000028:word64]
	branch r2 != 0x0000000000000000 l0000000000072DF4_ds_t
	// succ:  l0000000000072DF4_ds_f l0000000000072DF4_ds_t
l0000000000072DF4_ds_f:
	goto l0000000000072E3C
	// succ:  l0000000000072E3C
l0000000000072DF4_ds_t:
	goto l0000000000072E40
	// succ:  l0000000000072E40
l0000000000072E3C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000072E40
l0000000000072E40:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000072E40_ds_t
	// succ:  l0000000000072E40_ds_f l0000000000072E40_ds_t
l0000000000072E40_ds_f:
	goto l0000000000072E58
	// succ:  l0000000000072E58
l0000000000072E40_ds_t:
	goto l0000000000072E6C
	// succ:  l0000000000072E6C
l0000000000072E58:
	Mem0[r2:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.persistentalloc.func1_exit
l0000000000072E6C:
	r3 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.persistentalloc.func1_exit
runtime.persistentalloc.func1_exit:


// runtime.writebarrierptr_nostore1.func1
// Return size: 0
void runtime.writebarrierptr_nostore1.func1()
runtime.writebarrierptr_nostore1.func1_entry:
	// succ:  l0000000000072E90
l0000000000072E90:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000072E90_ds_t
	// succ:  l0000000000072E90_ds_f l0000000000072E90_ds_t
l0000000000072E90_ds_f:
	goto l0000000000072EA0
	// succ:  l0000000000072EA0
l0000000000072E90_ds_t:
	goto l0000000000072EB4
	// succ:  l0000000000072EB4
l0000000000072EA0:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000072E90
	// succ:  l0000000000072E90
l0000000000072EB4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r6 = Mem0[r22 + 0x0000000000000008:word64]
	r7 = Mem0[r22 + 0x0000000000000010:word64]
	r1 = Mem0[r22 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000028:word64] = r1
	r1 = Mem0[r6 + 0x00000000000000B0:word64]
	branch r1 != 0x0000000000000000 l0000000000072EB4_ds_t
	// succ:  l0000000000072EB4_ds_f l0000000000072EB4_ds_t
l0000000000072EB4_ds_f:
	goto l0000000000072ED8
	// succ:  l0000000000072ED8
l0000000000072EB4_ds_t:
	goto l0000000000073010
	// succ:  l0000000000073010
l0000000000072ED8:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000045D0:byte]
	branch r1 == 0x0000000000000000 l0000000000072ED8_ds_t
	// succ:  l0000000000072ED8_ds_f l0000000000072ED8_ds_t
l0000000000072ED8_ds_f:
	goto l0000000000072EEC
	// succ:  l0000000000072EEC
l0000000000072ED8_ds_t:
	goto l0000000000073010
	// succ:  l0000000000073010
l0000000000072EEC:
	Mem0[sp + 0x0000000000000020:word64] = r6
	r1 = (word64) Mem0[r6 + 0x00000000000000F6:byte]
	branch r1 != 0x0000000000000000 l0000000000072EEC_ds_t
	// succ:  l0000000000072EEC_ds_f l0000000000072EEC_ds_t
l0000000000072EEC_ds_f:
	goto l0000000000072EFC
	// succ:  l0000000000072EFC
l0000000000072EEC_ds_t:
	goto l0000000000073010
	// succ:  l0000000000073010
l0000000000072EFC:
	Mem0[sp + 0x0000000000000018:word64] = r7
	r4 = r7
	r1 = 0x0000000000000000
	branch r7 == 0x0000000000000000 l0000000000072EFC_ds_t
	// succ:  l0000000000072EFC_ds_f l0000000000072EFC_ds_t
l0000000000072EFC_ds_f:
	goto l0000000000072F10
	// succ:  l0000000000072F10
l0000000000072EFC_ds_t:
	goto l0000000000073054
	// succ:  l0000000000073054
l0000000000072F10:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
	r23 = (word64) (r4 <u r1)
	branch r23 != 0x0000000000000000 l0000000000072F10_ds_t
	// succ:  l0000000000072F10_ds_f l0000000000072F10_ds_t
l0000000000072F10_ds_f:
	goto l0000000000072F28
	// succ:  l0000000000072F28
l0000000000072F10_ds_t:
	goto l0000000000073054
	// succ:  l0000000000073054
l0000000000072F28:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F78:word64]
	r23 = (word64) (r4 <u r1)
	branch r23 == 0x0000000000000000 l0000000000072F28_ds_t
	// succ:  l0000000000072F28_ds_f l0000000000072F28_ds_t
l0000000000072F28_ds_f:
	goto l0000000000072F40
	// succ:  l0000000000072F40
l0000000000072F28_ds_t:
	goto l0000000000073054
	// succ:  l0000000000073054
l0000000000072F40:
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x0000000000007F70:word64]
l0000000000072FDC:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000072FDC_ds_t
	// succ:  l0000000000072FDC_ds_f l0000000000072FDC_ds_t
l0000000000072FDC_ds_f:
	goto l0000000000072FE8
	// succ:  l0000000000072FE8
l0000000000072FDC_ds_t:
	goto l0000000000073010
	// succ:  l0000000000073010
l0000000000072FE8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000073010:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	Mem0[r6 + 0x00000000000000F6:byte] = (byte) r2
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r7
	Mem0[sp + 0x0000000000000010:word64] = r7
	call runtime.gcmarkwb_m (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.writebarrierptr_nostore1.func1_exit
l0000000000073054:
	r1 = 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l0000000000072FDC
	// succ:  l0000000000072FDC
runtime.writebarrierptr_nostore1.func1_exit:


// runtime.writebarrierptr.func1
// Return size: 0
void runtime.writebarrierptr.func1()
runtime.writebarrierptr.func1_entry:
	// succ:  l0000000000073068
l0000000000073068:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000073068_ds_t
	// succ:  l0000000000073068_ds_f l0000000000073068_ds_t
l0000000000073068_ds_f:
	goto l0000000000073078
	// succ:  l0000000000073078
l0000000000073068_ds_t:
	goto l000000000007308C
	// succ:  l000000000007308C
l0000000000073078:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000073068
	// succ:  l0000000000073068
l000000000007308C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r2 = Mem0[r22 + 0x0000000000000010:word64]
	r1 = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.writebarrierptr.func1_exit:


// runtime.writebarrierptr_nostore.func1
// Return size: 0
void runtime.writebarrierptr_nostore.func1()
runtime.writebarrierptr_nostore.func1_entry:
	// succ:  l0000000000073168
l0000000000073168:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000073168_ds_t
	// succ:  l0000000000073168_ds_f l0000000000073168_ds_t
l0000000000073168_ds_f:
	goto l0000000000073178
	// succ:  l0000000000073178
l0000000000073168_ds_t:
	goto l000000000007318C
	// succ:  l000000000007318C
l0000000000073178:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000073168
	// succ:  l0000000000073168
l000000000007318C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.writebarrierptr_nostore.func1_exit:


// runtime.typedslicecopy.func1
// Return size: 0
void runtime.typedslicecopy.func1()
runtime.typedslicecopy.func1_entry:
	// succ:  l00000000000731C8
l00000000000731C8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000731C8_ds_t
	// succ:  l00000000000731C8_ds_f l00000000000731C8_ds_t
l00000000000731C8_ds_f:
	goto l00000000000731D8
	// succ:  l00000000000731D8
l00000000000731C8_ds_t:
	goto l00000000000731EC
	// succ:  l00000000000731EC
l00000000000731D8:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l00000000000731C8
	// succ:  l00000000000731C8
l00000000000731EC:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r1 = Mem0[r22 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r5 = Mem0[r22 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000020:word64] = r5
	r1 = Mem0[r22 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r1 = Mem0[r1:word64]
	r2 = Mem0[sp + 0x0000000000000048:word64]
	r2 = Mem0[r2:word64]
	r23 = (word64) (r1 <u r2)
	branch r23 == 0x0000000000000000 l00000000000731EC_ds_t
	// succ:  l00000000000731EC_ds_f l00000000000731EC_ds_t
l00000000000731EC_ds_f:
	goto l0000000000073230
	// succ:  l0000000000073230
l00000000000731EC_ds_t:
	goto l0000000000073478
	// succ:  l0000000000073478
l0000000000073230:
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[r2:word64]
	r2 = Mem0[r2:word64]
l0000000000073478:
	Mem0[sp + 0x0000000000000028:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	r1 = Mem0[sp + 0x0000000000000048:word64]
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000010:word64] = r2
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.typedmemmove (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
runtime.typedslicecopy.func1_exit:


// runtime.heapBitsBulkBarrier.func1
// Return size: 0
void runtime.heapBitsBulkBarrier.func1()
runtime.heapBitsBulkBarrier.func1_entry:
	// succ:  l00000000000735A0
l00000000000735A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000735A0_ds_t
	// succ:  l00000000000735A0_ds_f l00000000000735A0_ds_t
l00000000000735A0_ds_f:
	goto l00000000000735B0
	// succ:  l00000000000735B0
l00000000000735A0_ds_t:
	goto l00000000000735C4
	// succ:  l00000000000735C4
l00000000000735B0:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l00000000000735A0
	// succ:  l00000000000735A0
l00000000000735C4:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r3 = Mem0[r22 + 0x0000000000000008:word64]
	r2 = Mem0[r22 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = r2
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.gcUnwindBarriers (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.heapBitsBulkBarrier.func1_exit
runtime.heapBitsBulkBarrier.func1_exit:


// runtime.freemcache.func1
// Return size: 0
void runtime.freemcache.func1()
runtime.freemcache.func1_entry:
	// succ:  l00000000000735F8
l00000000000735F8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000735F8_ds_t
	// succ:  l00000000000735F8_ds_f l00000000000735F8_ds_t
l00000000000735F8_ds_f:
	goto l0000000000073608
	// succ:  l0000000000073608
l00000000000735F8_ds_t:
	goto l000000000007361C
	// succ:  l000000000007361C
l0000000000073608:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l00000000000735F8
	// succ:  l00000000000735F8
l000000000007361C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r2 = Mem0[r22 + 0x0000000000000008:word64]
	r1 = r2
	Mem0[sp + 0x0000000000000028:word64] = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.(*mcache).releaseAll (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.stackcache_clear (retsize: 0;)
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.lock (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.purgecachedstats (retsize: 0;)
	r5 = 0x00000000000D0000
	lo = r5 / r5
	hi = r5 % r5
	lo = r5 / r5
	hi = r5 % r5
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r5 / r5
	hi = r5 % r5
	r6 = Mem0[sp + 0x0000000000000028:word64]
	r4 = Mem0[r5 + 0x0000000000000030:word64]
	r2 = Mem0[r5:word64]
runtime.freemcache.func1_exit:


// runtime.(*gcControllerState).findRunnableGCWorker.func1
// Return size: 0
void runtime.(*gcControllerState).findRunnableGCWorker.func1()
runtime.(*gcControllerState).findRunnableGCWorker.func1_entry:
	// succ:  l0000000000073770
l0000000000073770:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000073770_ds_t
	// succ:  l0000000000073770_ds_f l0000000000073770_ds_t
l0000000000073770_ds_f:
	goto l0000000000073780
	// succ:  l0000000000073780
l0000000000073770_ds_t:
	goto l0000000000073794
	// succ:  l0000000000073794
l0000000000073780:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000073770
	// succ:  l0000000000073770
l0000000000073794:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r3 = Mem0[sp + 0x0000000000000028:word64]
	r1 = 0x0000000000000000
	r1 = Mem0[r3:word64]
	r2 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 < r1)
	branch r23 == 0x0000000000000000 l0000000000073794_ds_t
	// succ:  l0000000000073794_ds_f l0000000000073794_ds_t
l0000000000073794_ds_f:
	goto l00000000000737B8
	// succ:  l00000000000737B8
l0000000000073794_ds_t:
	goto l0000000000073814
	// succ:  l0000000000073814
l00000000000737B8:
	Mem0[sp + 0x0000000000000008:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime/internal/atomic.Xaddint64 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	r2 = 0x0000000000000000
	r23 = (word64) (r1 < 0x0000000000000000)
	branch r23 != 0x0000000000000000 l00000000000737B8_ds_t
	// succ:  l00000000000737B8_ds_f l00000000000737B8_ds_t
l00000000000737B8_ds_f:
	goto l00000000000737E0
	// succ:  l00000000000737E0
l00000000000737B8_ds_t:
	goto l00000000000737FC
	// succ:  l00000000000737FC
l00000000000737E0:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000030:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*gcControllerState).findRunnableGCWorker.func1_exit
l00000000000737FC:
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime/internal/atomic.Xaddint64 (retsize: 0;)
l0000000000073814:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000030:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*gcControllerState).findRunnableGCWorker.func1_exit
runtime.(*gcControllerState).findRunnableGCWorker.func1_exit:


// runtime.gcStart.func1
// Return size: 0
void runtime.gcStart.func1()
runtime.gcStart.func1_entry:
	// succ:  l0000000000073830
l0000000000073830:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000073830_ds_t
	// succ:  l0000000000073830_ds_f l0000000000073830_ds_t
l0000000000073830_ds_f:
	goto l0000000000073840
	// succ:  l0000000000073840
l0000000000073830_ds_t:
	goto l0000000000073854
	// succ:  l0000000000073854
l0000000000073840:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000073830
	// succ:  l0000000000073830
l0000000000073854:
	sp = sp + -16
	Mem0[sp:word64] = ra
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	call runtime.finishsweep_m (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcStart.func1_exit
runtime.gcStart.func1_exit:


// runtime.gcMarkDone.func1.1
// Return size: 0
void runtime.gcMarkDone.func1.1()
runtime.gcMarkDone.func1.1_entry:
	// succ:  l0000000000073880
l0000000000073880:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000073880_ds_t
	// succ:  l0000000000073880_ds_f l0000000000073880_ds_t
l0000000000073880_ds_f:
	goto l0000000000073890
	// succ:  l0000000000073890
l0000000000073880_ds_t:
	goto l00000000000738A4
	// succ:  l00000000000738A4
l0000000000073890:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000073880
	// succ:  l0000000000073880
l00000000000738A4:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l00000000000738A4_ds_t
	// succ:  l00000000000738A4_ds_f l00000000000738A4_ds_t
l00000000000738A4_ds_f:
	goto l00000000000738C0
	// succ:  l00000000000738C0
l00000000000738A4_ds_t:
	goto l00000000000738C4
	// succ:  l00000000000738C4
l00000000000738C0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000738C4
l00000000000738C4:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.(*gcWork).dispose (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcMarkDone.func1.1_exit
runtime.gcMarkDone.func1.1_exit:


// runtime.gcMarkDone.func1
// Return size: 0
void runtime.gcMarkDone.func1()
runtime.gcMarkDone.func1_entry:
	// succ:  l00000000000738F0
l00000000000738F0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000738F0_ds_t
	// succ:  l00000000000738F0_ds_f l00000000000738F0_ds_t
l00000000000738F0_ds_f:
	goto l0000000000073900
	// succ:  l0000000000073900
l00000000000738F0_ds_t:
	goto l0000000000073914
	// succ:  l0000000000073914
l0000000000073900:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000738F0
	// succ:  l00000000000738F0
l0000000000073914:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime.forEachP (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcMarkDone.func1_exit
runtime.gcMarkDone.func1_exit:


// runtime.gcMarkTermination.func1
// Return size: 0
void runtime.gcMarkTermination.func1()
runtime.gcMarkTermination.func1_entry:
	// succ:  l0000000000073948
l0000000000073948:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000073948_ds_t
	// succ:  l0000000000073948_ds_f l0000000000073948_ds_t
l0000000000073948_ds_f:
	goto l0000000000073958
	// succ:  l0000000000073958
l0000000000073948_ds_t:
	goto l000000000007396C
	// succ:  l000000000007396C
l0000000000073958:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000073948
	// succ:  l0000000000073948
l000000000007396C:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.gcMark (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcMarkTermination.func1_exit
runtime.gcMarkTermination.func1_exit:


// runtime.gcMarkTermination.func2
// Return size: 0
void runtime.gcMarkTermination.func2()
runtime.gcMarkTermination.func2_entry:
	// succ:  l0000000000073998
l0000000000073998:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000073998_ds_t
	// succ:  l0000000000073998_ds_f l0000000000073998_ds_t
l0000000000073998_ds_f:
	goto l00000000000739A8
	// succ:  l00000000000739A8
l0000000000073998_ds_t:
	goto l00000000000739BC
	// succ:  l00000000000739BC
l00000000000739A8:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000073998
	// succ:  l0000000000073998
l00000000000739BC:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 + 0x00000000000015E8:word64]
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 + 0x0000000000001678:word64] = r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x00000000000067B4:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	r23 = (word64) (r2 < r1)
	branch r23 == 0x0000000000000000 l00000000000739BC_ds_t
	// succ:  l00000000000739BC_ds_f l00000000000739BC_ds_t
l00000000000739BC_ds_f:
	goto l0000000000073A08
	// succ:  l0000000000073A08
l00000000000739BC_ds_t:
	goto l0000000000073A34
	// succ:  l0000000000073A34
l0000000000073A08:
	call runtime.gcResetMarkState (retsize: 0;)
	call runtime.initCheckmarks (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000010:word64]
	r2 = Mem0[r1:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.gcMark (retsize: 0;)
	call runtime.clearCheckmarks (retsize: 0;)
l0000000000073A34:
runtime.gcMarkTermination.func2_exit:


// runtime.gcBgMarkWorker.func1
// Return size: 0
void runtime.gcBgMarkWorker.func1()
runtime.gcBgMarkWorker.func1_entry:
	// succ:  l0000000000073B20
l0000000000073B20:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000073B20_ds_t
	// succ:  l0000000000073B20_ds_f l0000000000073B20_ds_t
l0000000000073B20_ds_f:
	goto l0000000000073B30
	// succ:  l0000000000073B30
l0000000000073B20_ds_t:
	goto l0000000000073B44
	// succ:  l0000000000073B44
l0000000000073B30:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000073B20
	// succ:  l0000000000073B20
l0000000000073B44:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r4 = Mem0[sp + 0x0000000000000038:word64]
	r5 = Mem0[r4:word64]
	r6 = r30
	r2 = (word64) Mem0[r5 + 0x00000000000000E0:int32]
	r3 = r2
	r2 = r3
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3
	r2 = r2 - r3
	r2 = r2
	Mem0[r5 + 0x00000000000000E0:word32] = (word32) r2
	r1 = (word64) Mem0[r5 + 0x00000000000000E0:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000073B44_ds_t
	// succ:  l0000000000073B44_ds_f l0000000000073B44_ds_t
l0000000000073B44_ds_f:
	goto l0000000000073B94
	// succ:  l0000000000073B94
l0000000000073B44_ds_t:
	goto l0000000000073BA8
	// succ:  l0000000000073BA8
l0000000000073B94:
	r1 = (word64) Mem0[r6 + 0x00000000000000E8:byte]
	branch r1 == 0x0000000000000000 l0000000000073B94_ds_t
	// succ:  l0000000000073B94_ds_f l0000000000073B94_ds_t
l0000000000073B94_ds_f:
	goto l0000000000073BA0
	// succ:  l0000000000073BA0
l0000000000073B94_ds_t:
	goto l0000000000073BA8
	// succ:  l0000000000073BA8
l0000000000073BA0:
l0000000000073BA8:
	r1 = Mem0[r4 + 0x0000000000000008:word64]
	branch r1 == 0x0000000000000000 l0000000000073BA8_ds_t
	// succ:  l0000000000073BA8_ds_f l0000000000073BA8_ds_t
l0000000000073BA8_ds_f:
	goto l0000000000073BB4
	// succ:  l0000000000073BB4
l0000000000073BA8_ds_t:
	goto l0000000000073C2C
	// succ:  l0000000000073C2C
l0000000000073BB4:
	r5 = Mem0[r4 + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r3 = 0x0000000000000000
	Mem0[r1:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = r5
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000073BB4_ds_t
	// succ:  l0000000000073BB4_ds_f l0000000000073BB4_ds_t
l0000000000073BB4_ds_f:
	goto l0000000000073BD8
	// succ:  l0000000000073BD8
l0000000000073BB4_ds_t:
	goto l0000000000073BDC
	// succ:  l0000000000073BDC
l0000000000073BD8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000073BDC
l0000000000073BDC:
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.(*guintptr).cas (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 != 0x0000000000000000 l0000000000073BDC_ds_t
	// succ:  l0000000000073BDC_ds_f l0000000000073BDC_ds_t
l0000000000073BDC_ds_f:
	goto l0000000000073C14
	// succ:  l0000000000073C14
l0000000000073BDC_ds_t:
	goto l0000000000073C2C
	// succ:  l0000000000073C2C
l0000000000073C14:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcBgMarkWorker.func1_exit
l0000000000073C2C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gcBgMarkWorker.func1_exit
runtime.gcBgMarkWorker.func1_exit:


// runtime.gcMarkRootPrepare.func1
// Return size: 0
void runtime.gcMarkRootPrepare.func1()
runtime.gcMarkRootPrepare.func1_entry:
	// succ:  l0000000000073C48
l0000000000073C48:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000073C48_ds_t
	// succ:  l0000000000073C48_ds_f l0000000000073C48_ds_t
l0000000000073C48_ds_f:
	goto l0000000000073C58
	// succ:  l0000000000073C58
l0000000000073C48_ds_t:
	goto l0000000000073C6C
	// succ:  l0000000000073C6C
l0000000000073C58:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000073C48
	// succ:  l0000000000073C48
l0000000000073C6C:
	sp = sp + -8
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000010:word64]
	r2 = 0x0000000000040000
	lo = r1 / r1
	hi = r1 % r1
runtime.gcMarkRootPrepare.func1_exit:


// runtime.markroot.func1
// Return size: 0
void runtime.markroot.func1()
runtime.markroot.func1_entry:
	// succ:  l0000000000073CC0
l0000000000073CC0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000073CC0_ds_t
	// succ:  l0000000000073CC0_ds_f l0000000000073CC0_ds_t
l0000000000073CC0_ds_f:
	goto l0000000000073CD0
	// succ:  l0000000000073CD0
l0000000000073CC0_ds_t:
	goto l0000000000073CE4
	// succ:  l0000000000073CE4
l0000000000073CD0:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000073CC0
	// succ:  l0000000000073CC0
l0000000000073CE4:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000028:word64] = r1
	r1 = Mem0[r22 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000030:word64] = r1
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x00000000000000A0:word64]
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000020:word64] = r3
	r2 = r3
	branch r1 != r3 l0000000000073CE4_ds_t
	// succ:  l0000000000073CE4_ds_f l0000000000073CE4_ds_t
l0000000000073CE4_ds_f:
	goto l0000000000073D18
	// succ:  l0000000000073D18
l0000000000073CE4_ds_t:
	goto l0000000000073E28
	// succ:  l0000000000073E28
l0000000000073D18:
	r1 = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	call runtime.readgstatus (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
l0000000000073D6C:
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r2
	branch r1 == 0x0000000000000000 l0000000000073D6C_ds_t
	// succ:  l0000000000073D6C_ds_f l0000000000073D6C_ds_t
l0000000000073D6C_ds_f:
	goto l0000000000073D7C
	// succ:  l0000000000073D7C
l0000000000073D6C_ds_t:
	goto l0000000000073DC4
	// succ:  l0000000000073DC4
l0000000000073D7C:
	Mem0[sp + 0x0000000000000008:word64] = r3
l0000000000073DC4:
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.scang (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	branch r1 == 0x0000000000000000 l0000000000073DC4_ds_t
	// succ:  l0000000000073DC4_ds_f l0000000000073DC4_ds_t
l0000000000073DC4_ds_f:
	goto l0000000000073DE8
	// succ:  l0000000000073DE8
l0000000000073DC4_ds_t:
	goto l0000000000073E18
	// succ:  l0000000000073E18
l0000000000073DE8:
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
l0000000000073E18:
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.markroot.func1_exit
l0000000000073E28:
	r2 = 0x0000000000000000
	goto l0000000000073D6C
	// succ:  l0000000000073D6C
runtime.markroot.func1_exit:


// runtime.gcAssistAlloc.func1
// Return size: 0
void runtime.gcAssistAlloc.func1()
runtime.gcAssistAlloc.func1_entry:
	// succ:  l0000000000073E38
l0000000000073E38:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000073E38_ds_t
	// succ:  l0000000000073E38_ds_f l0000000000073E38_ds_t
l0000000000073E38_ds_f:
	goto l0000000000073E48
	// succ:  l0000000000073E48
l0000000000073E38_ds_t:
	goto l0000000000073E5C
	// succ:  l0000000000073E5C
l0000000000073E48:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000073E38
	// succ:  l0000000000073E38
l0000000000073E5C:
	sp = sp + -112
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r1 = Mem0[r22 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000060:word64] = r1
	r1 = Mem0[r22 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000068:word64] = r1
	r1 = 0x00000000000F0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	call runtime/internal/atomic.Load (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000010:uint32]
runtime.gcAssistAlloc.func1_exit:


// runtime.scanstack.func1
// Return size: 0
void runtime.scanstack.func1()
runtime.scanstack.func1_entry:
	// succ:  l0000000000074360
l0000000000074360:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074360_ds_t
	// succ:  l0000000000074360_ds_f l0000000000074360_ds_t
l0000000000074360_ds_f:
	goto l0000000000074370
	// succ:  l0000000000074370
l0000000000074360_ds_t:
	goto l0000000000074384
	// succ:  l0000000000074384
l0000000000074370:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000074360
	// succ:  l0000000000074360
l0000000000074384:
	sp = sp + -72
	Mem0[sp:word64] = ra
	r3 = Mem0[r22 + 0x0000000000000008:word64]
	r2 = Mem0[r22 + 0x0000000000000010:word64]
	r1 = Mem0[r22 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000030:word64] = r1
	r1 = Mem0[r22 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r1 = Mem0[r22 + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000028:word64] = r1
	r1 = Mem0[r22 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r1 = Mem0[r22 + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000050:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = Mem0[sp + 0x0000000000000010:word64]
	branch r1 != 0x0000000000000000 l0000000000074384_ds_t
	// succ:  l0000000000074384_ds_f l0000000000074384_ds_t
l0000000000074384_ds_f:
	goto l00000000000743D8
	// succ:  l00000000000743D8
l0000000000074384_ds_t:
	goto l00000000000743DC
	// succ:  l00000000000743DC
l00000000000743D8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000743DC
l00000000000743DC:
	r1 = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.scanframeworker (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r3 = Mem0[sp + 0x0000000000000050:word64]
	r1 = Mem0[r3 + 0x0000000000000028:word64]
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r2 = Mem0[r2:word64]
	r23 = (word64) (r2 <u r1)
	branch r23 == 0x0000000000000000 l00000000000743DC_ds_t
	// succ:  l00000000000743DC_ds_f l00000000000743DC_ds_t
l00000000000743DC_ds_f:
	goto l000000000007440C
	// succ:  l000000000007440C
l00000000000743DC_ds_t:
	goto l00000000000744AC
	// succ:  l00000000000744AC
l000000000007440C:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006978:uint32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
l00000000000744AC:
	r2 = Mem0[r5:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r5:word64] = r2
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000060:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 72
	call r4 (retsize: 0;)
	return
	// succ:  runtime.scanstack.func1_exit
runtime.scanstack.func1_exit:


// runtime.gosweepone.func1
// Return size: 0
void runtime.gosweepone.func1()
runtime.gosweepone.func1_entry:
	// succ:  l0000000000074528
l0000000000074528:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074528_ds_t
	// succ:  l0000000000074528_ds_f l0000000000074528_ds_t
l0000000000074528_ds_f:
	goto l0000000000074538
	// succ:  l0000000000074538
l0000000000074528_ds_t:
	goto l000000000007454C
	// succ:  l000000000007454C
l0000000000074538:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000074528
	// succ:  l0000000000074528
l000000000007454C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.sweepone (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r2 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[r2:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gosweepone.func1_exit
runtime.gosweepone.func1_exit:


// runtime.(*mheap).alloc.func1
// Return size: 0
void runtime.(*mheap).alloc.func1()
runtime.(*mheap).alloc.func1_entry:
	// succ:  l0000000000074580
l0000000000074580:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074580_ds_t
	// succ:  l0000000000074580_ds_f l0000000000074580_ds_t
l0000000000074580_ds_f:
	goto l0000000000074590
	// succ:  l0000000000074590
l0000000000074580_ds_t:
	goto l00000000000745A4
	// succ:  l00000000000745A4
l0000000000074590:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000074580
	// succ:  l0000000000074580
l00000000000745A4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000028:word64] = r1
	r6 = Mem0[r22 + 0x0000000000000010:word64]
	r5 = Mem0[r22 + 0x0000000000000018:word64]
	r1 = (word64) Mem0[r22 + 0x0000000000000020:int32]
	r4 = r1
	r1 = (word64) Mem0[r22 + 0x0000000000000024:byte]
	r3 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000008:word64] = r6
	Mem0[sp + 0x0000000000000010:word64] = r5
	r2 = r4
	Mem0[sp + 0x0000000000000018:word32] = (word32) r2
	r2 = r3 + 0x00000000000000FF
	Mem0[sp + 0x000000000000001C:byte] = (byte) r2
	call runtime.(*mheap).alloc_m (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	r2 = Mem0[sp + 0x0000000000000028:word64]
	branch r2 != 0x0000000000000000 l00000000000745A4_ds_t
	// succ:  l00000000000745A4_ds_f l00000000000745A4_ds_t
l00000000000745A4_ds_f:
	goto l00000000000745FC
	// succ:  l00000000000745FC
l00000000000745A4_ds_t:
	goto l0000000000074600
	// succ:  l0000000000074600
l00000000000745FC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000074600
l0000000000074600:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000074600_ds_t
	// succ:  l0000000000074600_ds_f l0000000000074600_ds_t
l0000000000074600_ds_f:
	goto l0000000000074618
	// succ:  l0000000000074618
l0000000000074600_ds_t:
	goto l000000000007462C
	// succ:  l000000000007462C
l0000000000074618:
	Mem0[r2:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mheap).alloc.func1_exit
l000000000007462C:
	r3 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.writebarrierptr (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*mheap).alloc.func1_exit
runtime.(*mheap).alloc.func1_exit:


// runtime.(*mheap).freeSpan.func1
// Return size: 0
void runtime.(*mheap).freeSpan.func1()
runtime.(*mheap).freeSpan.func1_entry:
	// succ:  l0000000000074650
l0000000000074650:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074650_ds_t
	// succ:  l0000000000074650_ds_f l0000000000074650_ds_t
l0000000000074650_ds_f:
	goto l0000000000074660
	// succ:  l0000000000074660
l0000000000074650_ds_t:
	goto l0000000000074674
	// succ:  l0000000000074674
l0000000000074660:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000074650
	// succ:  l0000000000074650
l0000000000074674:
	sp = sp + -72
	Mem0[sp:word64] = ra
	r3 = Mem0[r22 + 0x0000000000000008:word64]
	r1 = Mem0[r22 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000030:word64] = r1
	r1 = (word64) Mem0[r22 + 0x0000000000000018:int32]
	Mem0[sp + 0x0000000000000028:word32] = (word32) r1
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000038:word64] = r2
	Mem0[sp + 0x0000000000000040:word64] = r3
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = Mem0[sp + 0x0000000000000008:word64]
	branch r1 != 0x0000000000000000 l0000000000074674_ds_t
	// succ:  l0000000000074674_ds_f l0000000000074674_ds_t
l0000000000074674_ds_f:
	goto l00000000000746AC
	// succ:  l00000000000746AC
l0000000000074674_ds_t:
	goto l00000000000746B0
	// succ:  l00000000000746B0
l00000000000746AC:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000746B0
l00000000000746B0:
	call runtime.lock (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r4 = Mem0[r23 - 0x0000000000003F70:word64]
	r2 = Mem0[r3 + 0x0000000000000130:word64]
	r1 = Mem0[r2 + 0x0000000000000008:word64]
	lo = r1 / r1
	hi = r1 % r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000003F70:word64] = r1
	r2 = Mem0[r3 + 0x0000000000000130:word64]
	Mem0[r2 + 0x0000000000000008:word64] = 0x0000000000000000
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r4 = Mem0[r23 - 0x0000000000003F80:word64]
	r2 = Mem0[r3 + 0x0000000000000130:word64]
	r1 = Mem0[r2 + 0x0000000000000020:word64]
	lo = r1 / r1
	hi = r1 % r1
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000003F80:word64] = r1
	r2 = Mem0[r3 + 0x0000000000000130:word64]
	Mem0[r2 + 0x0000000000000020:word64] = 0x0000000000000000
	r1 = (word64) Mem0[sp + 0x0000000000000028:int32]
	r2 = 0x0000000000000000
	r1 = r1
	r2 = r2
	branch r1 == r2 l00000000000746B0_ds_t
	// succ:  l00000000000746B0_ds_f l00000000000746B0_ds_t
l00000000000746B0_ds_f:
	goto l000000000007472C
	// succ:  l000000000007472C
l00000000000746B0_ds_t:
	goto l000000000007474C
	// succ:  l000000000007474C
l000000000007472C:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = Mem0[r23 - 0x0000000000005648:word64]
l000000000007474C:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006980:uint32]
runtime.(*mheap).freeSpan.func1_exit:


// runtime.mProf_Malloc.func1
// Return size: 0
void runtime.mProf_Malloc.func1()
runtime.mProf_Malloc.func1_entry:
	// succ:  l0000000000074870
l0000000000074870:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074870_ds_t
	// succ:  l0000000000074870_ds_f l0000000000074870_ds_t
l0000000000074870_ds_f:
	goto l0000000000074880
	// succ:  l0000000000074880
l0000000000074870_ds_t:
	goto l0000000000074894
	// succ:  l0000000000074894
l0000000000074880:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000074870
	// succ:  l0000000000074870
l0000000000074894:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r3 = Mem0[r22 + 0x0000000000000008:word64]
	r2 = Mem0[r22 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000008:word64] = r3
	r1 = r2
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.setprofilebucket (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.mProf_Malloc.func1_exit
runtime.mProf_Malloc.func1_exit:


// runtime.tracealloc.func1
// Return size: 0
void runtime.tracealloc.func1()
runtime.tracealloc.func1_entry:
	// succ:  l00000000000748C8
l00000000000748C8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000748C8_ds_t
	// succ:  l00000000000748C8_ds_f l00000000000748C8_ds_t
l00000000000748C8_ds_f:
	goto l00000000000748D8
	// succ:  l00000000000748D8
l00000000000748C8_ds_t:
	goto l00000000000748EC
	// succ:  l00000000000748EC
l00000000000748D8:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l00000000000748C8
	// succ:  l00000000000748C8
l00000000000748EC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r4 = Mem0[r22 + 0x0000000000000008:word64]
	r3 = Mem0[r22 + 0x0000000000000010:word64]
	r2 = Mem0[r22 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = r4
	Mem0[sp + 0x0000000000000010:word64] = r3
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	r1 = r2
	Mem0[sp + 0x0000000000000020:word64] = r2
	call runtime.traceback (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.tracealloc.func1_exit
runtime.tracealloc.func1_exit:


// runtime.tracefree.func1
// Return size: 0
void runtime.tracefree.func1()
runtime.tracefree.func1_entry:
	// succ:  l0000000000074930
l0000000000074930:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074930_ds_t
	// succ:  l0000000000074930_ds_f l0000000000074930_ds_t
l0000000000074930_ds_f:
	goto l0000000000074940
	// succ:  l0000000000074940
l0000000000074930_ds_t:
	goto l0000000000074954
	// succ:  l0000000000074954
l0000000000074940:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000074930
	// succ:  l0000000000074930
l0000000000074954:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r4 = Mem0[r22 + 0x0000000000000008:word64]
	r3 = Mem0[r22 + 0x0000000000000010:word64]
	r2 = Mem0[r22 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = r4
	Mem0[sp + 0x0000000000000010:word64] = r3
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	r1 = r2
	Mem0[sp + 0x0000000000000020:word64] = r2
	call runtime.traceback (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.tracefree.func1_exit
runtime.tracefree.func1_exit:


// runtime.futexwakeup.func1
// Return size: 0
void runtime.futexwakeup.func1()
runtime.futexwakeup.func1_entry:
	// succ:  l0000000000074998
l0000000000074998:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074998_ds_t
	// succ:  l0000000000074998_ds_f l0000000000074998_ds_t
l0000000000074998_ds_f:
	goto l00000000000749A8
	// succ:  l00000000000749A8
l0000000000074998_ds_t:
	goto l00000000000749BC
	// succ:  l00000000000749BC
l00000000000749A8:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000074998
	// succ:  l0000000000074998
l00000000000749BC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r1 = (word64) Mem0[r22 + 0x0000000000000010:int32]
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.futexwakeup.func1_exit:


// runtime.deferproc.func1
// Return size: 0
void runtime.deferproc.func1()
runtime.deferproc.func1_entry:
	// succ:  l0000000000074A78
l0000000000074A78:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074A78_ds_t
	// succ:  l0000000000074A78_ds_f l0000000000074A78_ds_t
l0000000000074A78_ds_f:
	goto l0000000000074A88
	// succ:  l0000000000074A88
l0000000000074A78_ds_t:
	goto l0000000000074A9C
	// succ:  l0000000000074A9C
l0000000000074A88:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000074A78
	// succ:  l0000000000074A78
l0000000000074A9C:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r2 = Mem0[r22 + 0x0000000000000008:word64]
	r1 = Mem0[r22 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r1 = Mem0[r22 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000028:word64] = r1
	r1 = Mem0[r22 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r1 = Mem0[r22 + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000030:word64] = r1
	r1 = r2
	Mem0[sp + 0x0000000000000040:word64] = r2
	r2 = (word64) Mem0[r2:int32]
	Mem0[sp + 0x0000000000000008:word32] = (word32) r2
	call runtime.newdefer (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000038:word64] = r5
	r1 = Mem0[r5 + 0x0000000000000020:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000074A9C_ds_t
	// succ:  l0000000000074A9C_ds_f l0000000000074A9C_ds_t
l0000000000074A9C_ds_f:
	goto l0000000000074AF8
	// succ:  l0000000000074AF8
l0000000000074A9C_ds_t:
	goto l0000000000074B1C
	// succ:  l0000000000074B1C
l0000000000074AF8:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l0000000000074B1C:
	r1 = r5
	branch r5 != 0x0000000000000000 l0000000000074B1C_ds_t
	// succ:  l0000000000074B1C_ds_f l0000000000074B1C_ds_t
l0000000000074B1C_ds_f:
	goto l0000000000074B28
	// succ:  l0000000000074B28
l0000000000074B1C_ds_t:
	goto l0000000000074B2C
	// succ:  l0000000000074B2C
l0000000000074B28:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l0000000000074B2C
l0000000000074B2C:
	r2 = Mem0[sp + 0x0000000000000048:word64]
	r2 = Mem0[r2:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l0000000000074B2C_ds_t
	// succ:  l0000000000074B2C_ds_f l0000000000074B2C_ds_t
l0000000000074B2C_ds_f:
	goto l0000000000074B4C
	// succ:  l0000000000074B4C
l0000000000074B2C_ds_t:
	goto l0000000000074B98
	// succ:  l0000000000074B98
l0000000000074B4C:
	Mem0[r1 + 0x0000000000000018:word64] = r2
	// succ:  l0000000000074B50
l0000000000074B50:
	r2 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[r5 + 0x0000000000000010:word64] = r2
	r2 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[r5 + 0x0000000000000008:word64] = r2
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	lo = r1 / r5
	hi = r1 % r5
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r2 = (word64) Mem0[r1:int32]
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.memmove (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.deferproc.func1_exit
l0000000000074B98:
	lo = r3 / r5
	hi = r3 % r5
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	call runtime.writebarrierptr (retsize: 0;)
	r5 = Mem0[sp + 0x0000000000000038:word64]
	goto l0000000000074B50
	// succ:  l0000000000074B50
runtime.deferproc.func1_exit:


// runtime.deferreturn.func1
// Return size: 0
void runtime.deferreturn.func1()
runtime.deferreturn.func1_entry:
	// succ:  l0000000000074BB8
l0000000000074BB8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074BB8_ds_t
	// succ:  l0000000000074BB8_ds_f l0000000000074BB8_ds_t
l0000000000074BB8_ds_f:
	goto l0000000000074BC8
	// succ:  l0000000000074BC8
l0000000000074BB8_ds_t:
	goto l0000000000074BDC
	// succ:  l0000000000074BDC
l0000000000074BC8:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000074BB8
	// succ:  l0000000000074BB8
l0000000000074BDC:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r2 = Mem0[r22 + 0x0000000000000008:word64]
	r1 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.freedefer (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.deferreturn.func1_exit
runtime.deferreturn.func1_exit:


// runtime.dopanic.func1
// Return size: 0
void runtime.dopanic.func1()
runtime.dopanic.func1_entry:
	// succ:  l0000000000074C08
l0000000000074C08:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074C08_ds_t
	// succ:  l0000000000074C08_ds_f l0000000000074C08_ds_t
l0000000000074C08_ds_f:
	goto l0000000000074C18
	// succ:  l0000000000074C18
l0000000000074C08_ds_t:
	goto l0000000000074C2C
	// succ:  l0000000000074C2C
l0000000000074C18:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000074C08
	// succ:  l0000000000074C08
l0000000000074C2C:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r4 = Mem0[r22 + 0x0000000000000008:word64]
	r3 = Mem0[r22 + 0x0000000000000010:word64]
	r2 = Mem0[r22 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000008:word64] = r4
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = r2
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.dopanic_m (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.dopanic.func1_exit
runtime.dopanic.func1_exit:


// runtime.main.func1
// Return size: 0
void runtime.main.func1()
runtime.main.func1_entry:
	// succ:  l0000000000074C68
l0000000000074C68:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074C68_ds_t
	// succ:  l0000000000074C68_ds_f l0000000000074C68_ds_t
l0000000000074C68_ds_f:
	goto l0000000000074C78
	// succ:  l0000000000074C78
l0000000000074C68_ds_t:
	goto l0000000000074C8C
	// succ:  l0000000000074C8C
l0000000000074C78:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000074C68
	// succ:  l0000000000074C68
l0000000000074C8C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000010:word64] = 0x0000000000000000
	call runtime.newm (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.main.func1_exit
runtime.main.func1_exit:


// runtime.main.func2
// Return size: 0
void runtime.main.func2()
runtime.main.func2_entry:
	// succ:  l0000000000074CC8
l0000000000074CC8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074CC8_ds_t
	// succ:  l0000000000074CC8_ds_f l0000000000074CC8_ds_t
l0000000000074CC8_ds_f:
	goto l0000000000074CD8
	// succ:  l0000000000074CD8
l0000000000074CC8_ds_t:
	goto l0000000000074CEC
	// succ:  l0000000000074CEC
l0000000000074CD8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000074CC8
	// succ:  l0000000000074CC8
l0000000000074CEC:
	sp = sp + -8
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000010:word64]
	r1 = (word64) Mem0[r1:byte]
	branch r1 == 0x0000000000000000 l0000000000074CEC_ds_t
	// succ:  l0000000000074CEC_ds_f l0000000000074CEC_ds_t
l0000000000074CEC_ds_f:
	goto l0000000000074D04
	// succ:  l0000000000074D04
l0000000000074CEC_ds_t:
	goto l0000000000074D0C
	// succ:  l0000000000074D0C
l0000000000074D04:
	call runtime.unlockOSThread (retsize: 0;)
l0000000000074D0C:
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.main.func2_exit
runtime.main.func2_exit:


// runtime.goready.func1
// Return size: 0
void runtime.goready.func1()
runtime.goready.func1_entry:
	// succ:  l0000000000074D20
l0000000000074D20:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074D20_ds_t
	// succ:  l0000000000074D20_ds_f l0000000000074D20_ds_t
l0000000000074D20_ds_f:
	goto l0000000000074D30
	// succ:  l0000000000074D30
l0000000000074D20_ds_t:
	goto l0000000000074D44
	// succ:  l0000000000074D44
l0000000000074D30:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000074D20
	// succ:  l0000000000074D20
l0000000000074D44:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r3 = Mem0[r22 + 0x0000000000000008:word64]
	r2 = Mem0[r22 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r2
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	call runtime.ready (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  runtime.goready.func1_exit
runtime.goready.func1_exit:


// runtime.casgstatus.func1
// Return size: 0
void runtime.casgstatus.func1()
runtime.casgstatus.func1_entry:
	// succ:  l0000000000074D80
l0000000000074D80:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074D80_ds_t
	// succ:  l0000000000074D80_ds_f l0000000000074D80_ds_t
l0000000000074D80_ds_f:
	goto l0000000000074D90
	// succ:  l0000000000074D90
l0000000000074D80_ds_t:
	goto l0000000000074DA4
	// succ:  l0000000000074DA4
l0000000000074D90:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000074D80
	// succ:  l0000000000074D80
l0000000000074DA4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = (word64) Mem0[r22 + 0x0000000000000008:uint32]
runtime.casgstatus.func1_exit:


// runtime.casgstatus.func2
// Return size: 0
void runtime.casgstatus.func2()
runtime.casgstatus.func2_entry:
	// succ:  l0000000000074EA0
l0000000000074EA0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074EA0_ds_t
	// succ:  l0000000000074EA0_ds_f l0000000000074EA0_ds_t
l0000000000074EA0_ds_f:
	goto l0000000000074EB0
	// succ:  l0000000000074EB0
l0000000000074EA0_ds_t:
	goto l0000000000074EC4
	// succ:  l0000000000074EC4
l0000000000074EB0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000074EA0
	// succ:  l0000000000074EA0
l0000000000074EC4:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.casgstatus.func2_exit:


// runtime.casgstatus.func3
// Return size: 0
void runtime.casgstatus.func3()
runtime.casgstatus.func3_entry:
	// succ:  l0000000000074F00
l0000000000074F00:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074F00_ds_t
	// succ:  l0000000000074F00_ds_f l0000000000074F00_ds_t
l0000000000074F00_ds_f:
	goto l0000000000074F10
	// succ:  l0000000000074F10
l0000000000074F00_ds_t:
	goto l0000000000074F24
	// succ:  l0000000000074F24
l0000000000074F10:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000074F00
	// succ:  l0000000000074F00
l0000000000074F24:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r2 = Mem0[r22 + 0x0000000000000008:word64]
	r1 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.queueRescan (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.casgstatus.func3_exit
runtime.casgstatus.func3_exit:


// runtime.reentersyscall.func1
// Return size: 0
void runtime.reentersyscall.func1()
runtime.reentersyscall.func1_entry:
	// succ:  l0000000000074F50
l0000000000074F50:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000074F50_ds_t
	// succ:  l0000000000074F50_ds_f l0000000000074F50_ds_t
l0000000000074F50_ds_f:
	goto l0000000000074F60
	// succ:  l0000000000074F60
l0000000000074F50_ds_t:
	goto l0000000000074F74
	// succ:  l0000000000074F74
l0000000000074F60:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000074F50
	// succ:  l0000000000074F50
l0000000000074F74:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r3 = Mem0[r22 + 0x0000000000000008:word64]
	r2 = Mem0[r3 + 0x0000000000000078:word64]
	Mem0[sp + 0x0000000000000028:word64] = r2
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	r1 = r3
	r2 = Mem0[r3 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.reentersyscall.func1_exit:


// runtime.entersyscallblock.func1
// Return size: 0
void runtime.entersyscallblock.func1()
runtime.entersyscallblock.func1_entry:
	// succ:  l0000000000075090
l0000000000075090:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000075090_ds_t
	// succ:  l0000000000075090_ds_f l0000000000075090_ds_t
l0000000000075090_ds_f:
	goto l00000000000750A0
	// succ:  l00000000000750A0
l0000000000075090_ds_t:
	goto l00000000000750B4
	// succ:  l00000000000750B4
l00000000000750A0:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000075090
	// succ:  l0000000000075090
l00000000000750B4:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r5 = Mem0[r22 + 0x0000000000000008:word64]
	r4 = Mem0[r22 + 0x0000000000000010:word64]
	r2 = Mem0[r22 + 0x0000000000000018:word64]
	r3 = Mem0[r22 + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000038:word64] = r5
	Mem0[sp + 0x0000000000000030:word64] = r4
	Mem0[sp + 0x0000000000000028:word64] = r2
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	r1 = r3
	r2 = Mem0[r3 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.entersyscallblock.func1_exit:


// runtime.entersyscallblock.func2
// Return size: 0
void runtime.entersyscallblock.func2()
runtime.entersyscallblock.func2_entry:
	// succ:  l0000000000075240
l0000000000075240:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000075240_ds_t
	// succ:  l0000000000075240_ds_f l0000000000075240_ds_t
l0000000000075240_ds_f:
	goto l0000000000075250
	// succ:  l0000000000075250
l0000000000075240_ds_t:
	goto l0000000000075264
	// succ:  l0000000000075264
l0000000000075250:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000075240
	// succ:  l0000000000075240
l0000000000075264:
	sp = sp + -64
	Mem0[sp:word64] = ra
	r2 = Mem0[r22 + 0x0000000000000008:word64]
	r3 = Mem0[r22 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000038:word64] = r2
	r2 = Mem0[r3 + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000030:word64] = r2
	r2 = Mem0[r3 + 0x0000000000000078:word64]
	Mem0[sp + 0x0000000000000028:word64] = r2
	r2 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000020:word64] = r2
	r1 = r3
	r2 = Mem0[r3 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.printlock (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.entersyscallblock.func2_exit:


// runtime.exitsyscall.func1
// Return size: 0
void runtime.exitsyscall.func1()
runtime.exitsyscall.func1_entry:
	// succ:  l00000000000753F0
l00000000000753F0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000753F0_ds_t
	// succ:  l00000000000753F0_ds_f l00000000000753F0_ds_t
l00000000000753F0_ds_f:
	goto l0000000000075400
	// succ:  l0000000000075400
l00000000000753F0_ds_t:
	goto l0000000000075414
	// succ:  l0000000000075414
l0000000000075400:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000753F0
	// succ:  l00000000000753F0
l0000000000075414:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.exitsyscall.func1_exit:


// runtime.exitsyscallfast.func1
// Return size: 0
void runtime.exitsyscallfast.func1()
runtime.exitsyscallfast.func1_entry:
	// succ:  l0000000000075450
l0000000000075450:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000075450_ds_t
	// succ:  l0000000000075450_ds_f l0000000000075450_ds_t
l0000000000075450_ds_f:
	goto l0000000000075460
	// succ:  l0000000000075460
l0000000000075450_ds_t:
	goto l0000000000075474
	// succ:  l0000000000075474
l0000000000075460:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000075450
	// succ:  l0000000000075450
l0000000000075474:
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	r2 = Mem0[r1 + 0x0000000000000030:word64]
	r2 = Mem0[r2 + 0x00000000000000B0:word64]
	r1 = r2
	Mem0[sp + 0x0000000000000008:word64] = r2
	call runtime.traceGoSysBlock (retsize: 0;)
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	call runtime.traceGoSysExit (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.exitsyscallfast.func1_exit
runtime.exitsyscallfast.func1_exit:


// runtime.exitsyscallfast.func2
// Return size: 0
void runtime.exitsyscallfast.func2()
runtime.exitsyscallfast.func2_entry:
	// succ:  l00000000000754B8
l00000000000754B8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000754B8_ds_t
	// succ:  l00000000000754B8_ds_f l00000000000754B8_ds_t
l00000000000754B8_ds_f:
	goto l00000000000754C8
	// succ:  l00000000000754C8
l00000000000754B8_ds_t:
	goto l00000000000754DC
	// succ:  l00000000000754DC
l00000000000754C8:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l00000000000754B8
	// succ:  l00000000000754B8
l00000000000754DC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r1 = Mem0[r22 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[r22 + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.exitsyscallfast_pidle (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000008:byte]
	Mem0[r3:byte] = (byte) r1
	r1 = (word64) Mem0[r3:byte]
	branch r1 == 0x0000000000000000 l00000000000754DC_ds_t
	// succ:  l00000000000754DC_ds_f l00000000000754DC_ds_t
l00000000000754DC_ds_f:
	goto l000000000007551C
	// succ:  l000000000007551C
l00000000000754DC_ds_t:
	goto l000000000007558C
	// succ:  l000000000007558C
l000000000007551C:
	r23 = 0x00000000000E0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006A50:byte]
	branch r1 == 0x0000000000000000 l000000000007551C_ds_t
	// succ:  l000000000007551C_ds_f l000000000007551C_ds_t
l000000000007551C_ds_f:
	goto l0000000000075530
	// succ:  l0000000000075530
l000000000007551C_ds_t:
	goto l000000000007558C
	// succ:  l000000000007558C
l0000000000075530:
	r1 = Mem0[sp + 0x0000000000000010:word64]
	r2 = 0x0000000000000000
	branch r1 == 0x0000000000000000 l0000000000075530_ds_t
	// succ:  l0000000000075530_ds_f l0000000000075530_ds_t
l0000000000075530_ds_f:
	goto l0000000000075540
	// succ:  l0000000000075540
l0000000000075530_ds_t:
	goto l000000000007557C
	// succ:  l000000000007557C
l0000000000075540:
	r1 = Mem0[sp + 0x0000000000000010:word64]
	r1 = (word64) Mem0[r1 + 0x000000000000001C:uint32]
	r2 = Mem0[sp + 0x0000000000000018:word64]
	r3 = Mem0[r2 + 0x0000000000000030:word64]
	r2 = (word64) Mem0[r3 + 0x0000000000000324:uint32]
l000000000007557C:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	call runtime.traceGoSysExit (retsize: 0;)
l000000000007558C:
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.exitsyscallfast.func2_exit
runtime.exitsyscallfast.func2_exit:


// runtime.malg.func1
// Return size: 0
void runtime.malg.func1()
runtime.malg.func1_entry:
	// succ:  l00000000000755A0
l00000000000755A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000755A0_ds_t
	// succ:  l00000000000755A0_ds_f l00000000000755A0_ds_t
l00000000000755A0_ds_f:
	goto l00000000000755B0
	// succ:  l00000000000755B0
l00000000000755A0_ds_t:
	goto l00000000000755C4
	// succ:  l00000000000755C4
l00000000000755B0:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l00000000000755A0
	// succ:  l00000000000755A0
l00000000000755C4:
	sp = sp + -88
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r1 = (word64) Mem0[r22 + 0x0000000000000010:int32]
	r2 = r1
	r1 = r2
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	call runtime.stackalloc (retsize: 0;)
	r6 = Mem0[sp + 0x0000000000000038:word64]
	branch r6 != 0x0000000000000000 l00000000000755C4_ds_t
	// succ:  l00000000000755C4_ds_f l00000000000755C4_ds_t
l00000000000755C4_ds_f:
	goto l00000000000755F8
	// succ:  l00000000000755F8
l00000000000755C4_ds_t:
	goto l00000000000755FC
	// succ:  l00000000000755FC
l00000000000755F8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000755FC
l00000000000755FC:
	lo = r1 / sp
	hi = r1 % sp
	r1 = r1 + -8
	r2 = r6 + -8
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r1 + 8
	Mem0[r2 + 0x0000000000000008:word64] = r3
	r2 = r2 + 8
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r1 + 8
	Mem0[r2 + 0x0000000000000008:word64] = r3
	r2 = r2 + 8
	r5 = Mem0[sp + 0x0000000000000020:word64]
	r4 = Mem0[sp + 0x0000000000000028:word64]
	r3 = Mem0[sp + 0x0000000000000030:word64]
	r1 = r6
	Mem0[sp + 0x0000000000000048:word64] = r4
	Mem0[r6 + 0x0000000000000090:word64] = r4
	Mem0[sp + 0x0000000000000050:word64] = r3
	Mem0[r6 + 0x0000000000000098:word64] = r3
	r2 = r5
	Mem0[sp + 0x0000000000000040:word64] = r5
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r3 = (word64) Mem0[r23 - 0x0000000000006800:byte]
	r4 = 0x0000000000000000
	branch r3 != r4 l00000000000755FC_ds_t
	// succ:  l00000000000755FC_ds_f l00000000000755FC_ds_t
l00000000000755FC_ds_f:
	goto l0000000000075668
	// succ:  l0000000000075668
l00000000000755FC_ds_t:
	goto l000000000007567C
	// succ:  l000000000007567C
l0000000000075668:
	Mem0[r1 + 0x0000000000000088:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 88
	call r4 (retsize: 0;)
	return
	// succ:  runtime.malg.func1_exit
l000000000007567C:
	lo = r3 / r6
	hi = r3 % r6
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r5
	call runtime.writebarrierptr (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 88
	call r4 (retsize: 0;)
	return
	// succ:  runtime.malg.func1_exit
runtime.malg.func1_exit:


// runtime.newproc.func1
// Return size: 0
void runtime.newproc.func1()
runtime.newproc.func1_entry:
	// succ:  l00000000000756A0
l00000000000756A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000756A0_ds_t
	// succ:  l00000000000756A0_ds_f l00000000000756A0_ds_t
l00000000000756A0_ds_f:
	goto l00000000000756B0
	// succ:  l00000000000756B0
l00000000000756A0_ds_t:
	goto l00000000000756C4
	// succ:  l00000000000756C4
l00000000000756B0:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l00000000000756A0
	// succ:  l00000000000756A0
l00000000000756C4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r2 = Mem0[r22 + 0x0000000000000008:word64]
	r5 = Mem0[r22 + 0x0000000000000010:word64]
	r4 = Mem0[r22 + 0x0000000000000018:word64]
	r3 = Mem0[r22 + 0x0000000000000020:word64]
	r2 = Mem0[r2:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[sp + 0x0000000000000010:word64] = r5
	r2 = (word64) Mem0[r4:int32]
	Mem0[sp + 0x0000000000000018:word32] = (word32) r2
	r1 = 0x0000000000000000
	Mem0[sp + 0x000000000000001C:word32] = (word32) r1
	r1 = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.newproc1 (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.newproc.func1_exit
runtime.newproc.func1_exit:


// runtime.gfget.func1
// Return size: 0
void runtime.gfget.func1()
runtime.gfget.func1_entry:
	// succ:  l0000000000075718
l0000000000075718:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000075718_ds_t
	// succ:  l0000000000075718_ds_f l0000000000075718_ds_t
l0000000000075718_ds_f:
	goto l0000000000075728
	// succ:  l0000000000075728
l0000000000075718_ds_t:
	goto l000000000007573C
	// succ:  l000000000007573C
l0000000000075728:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000075718
	// succ:  l0000000000075718
l000000000007573C:
	sp = sp + -88
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
runtime.gfget.func1_exit:


// runtime.morestackc.func1
// Return size: 0
void runtime.morestackc.func1()
runtime.morestackc.func1_entry:
	// succ:  l0000000000075818
l0000000000075818:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000075818_ds_t
	// succ:  l0000000000075818_ds_f l0000000000075818_ds_t
l0000000000075818_ds_f:
	goto l0000000000075828
	// succ:  l0000000000075828
l0000000000075818_ds_t:
	goto l000000000007583C
	// succ:  l000000000007583C
l0000000000075828:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000075818
	// succ:  l0000000000075818
l000000000007583C:
	sp = sp + -24
	Mem0[sp:word64] = ra
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
runtime.morestackc.func1_exit:


// runtime.callers.func1
// Return size: 0
void runtime.callers.func1()
runtime.callers.func1_entry:
	// succ:  l0000000000075878
l0000000000075878:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000075878_ds_t
	// succ:  l0000000000075878_ds_f l0000000000075878_ds_t
l0000000000075878_ds_f:
	goto l0000000000075888
	// succ:  l0000000000075888
l0000000000075878_ds_t:
	goto l000000000007589C
	// succ:  l000000000007589C
l0000000000075888:
	r3 = ra
	call runtime.morestack (retsize: 0;)
	goto l0000000000075878
	// succ:  l0000000000075878
l000000000007589C:
	sp = sp + -128
	Mem0[sp:word64] = ra
	r1 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000060:word64] = r1
	r7 = Mem0[r22 + 0x0000000000000010:word64]
	r6 = Mem0[r22 + 0x0000000000000018:word64]
	r5 = Mem0[r22 + 0x0000000000000020:word64]
	r3 = Mem0[r22 + 0x0000000000000028:word64]
	lo = r2 / r22
	hi = r2 % r22
	r1 = Mem0[r2 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000008:word64] = r7
	Mem0[sp + 0x0000000000000010:word64] = r6
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r5
	r3 = Mem0[r3:word64]
	Mem0[sp + 0x0000000000000028:word64] = r3
	r5 = Mem0[r2:word64]
	r4 = Mem0[r2 + 0x0000000000000008:word64]
	r3 = Mem0[r2 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000078:word64] = r3
	r2 = r5
	Mem0[sp + 0x0000000000000068:word64] = r5
	Mem0[sp + 0x0000000000000070:word64] = r4
	r3 = r4
	r4 = 0x0000000000000000
	r23 = (word64) (0x0000000000000000 <u r3)
	branch r23 != 0x0000000000000000 l000000000007589C_ds_t
	// succ:  l000000000007589C_ds_f l000000000007589C_ds_t
l000000000007589C_ds_f:
	goto l000000000007590C
	// succ:  l000000000007590C
l000000000007589C_ds_t:
	goto l0000000000075918
	// succ:  l0000000000075918
l000000000007590C:
	call runtime.panicindex (retsize: 0;)
l0000000000075918:
	Mem0[sp + 0x0000000000000030:word64] = r5
	Mem0[sp + 0x0000000000000038:word64] = r1
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	r2 = 0x0000000000000000
	Mem0[sp + 0x0000000000000050:word64] = 0x0000000000000000
	call runtime.gentraceback (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000058:word64]
	r2 = Mem0[sp + 0x0000000000000060:word64]
	Mem0[r2:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 128
	call r4 (retsize: 0;)
	return
	// succ:  runtime.callers.func1_exit
runtime.callers.func1_exit:


// runtime.init
// Return size: 0
void runtime.init()
runtime.init_entry:
	// succ:  l0000000000075958
l0000000000075958:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000075958_ds_t
	// succ:  l0000000000075958_ds_f l0000000000075958_ds_t
l0000000000075958_ds_f:
	goto l0000000000075968
	// succ:  l0000000000075968
l0000000000075958_ds_t:
	goto l000000000007597C
	// succ:  l000000000007597C
l0000000000075968:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000075958
	// succ:  l0000000000075958
l000000000007597C:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006997:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	r23 = (word64) (r2 <u r1)
	branch r23 == 0x0000000000000000 l000000000007597C_ds_t
	// succ:  l000000000007597C_ds_f l000000000007597C_ds_t
l000000000007597C_ds_f:
	goto l00000000000759AC
	// succ:  l00000000000759AC
l000000000007597C_ds_t:
	goto l00000000000759BC
	// succ:  l00000000000759BC
l00000000000759AC:
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  runtime.init_exit
l00000000000759BC:
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006997:byte]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	r2 = r2 + 0x00000000000000FF
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l00000000000759BC_ds_t
	// succ:  l00000000000759BC_ds_f l00000000000759BC_ds_t
l00000000000759BC_ds_f:
	goto l00000000000759E0
	// succ:  l00000000000759E0
l00000000000759BC_ds_t:
	goto l00000000000759EC
	// succ:  l00000000000759EC
l00000000000759E0:
	call runtime.throwinit (retsize: 0;)
l00000000000759EC:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	Mem0[r23 - 0x0000000000006997:byte] = (byte) r1
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000040:word64] = r1
runtime.init_exit:


// type..hash.[2]float32
// Return size: 0
void type..hash.[2]float32()
type..hash.[2]float32_entry:
	// succ:  l0000000000075E78
l0000000000075E78:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000075E78_ds_t
	// succ:  l0000000000075E78_ds_f l0000000000075E78_ds_t
l0000000000075E78_ds_f:
	goto l0000000000075E88
	// succ:  l0000000000075E88
l0000000000075E78_ds_t:
	goto l0000000000075E9C
	// succ:  l0000000000075E9C
l0000000000075E88:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000075E78
	// succ:  l0000000000075E78
l0000000000075E9C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l0000000000075E9C_ds_t
	// succ:  l0000000000075E9C_ds_f l0000000000075E9C_ds_t
l0000000000075E9C_ds_f:
	goto l0000000000075EC4
	// succ:  l0000000000075EC4
l0000000000075E9C_ds_t:
	goto l0000000000075F0C
	// succ:  l0000000000075F0C
l0000000000075EC4:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r1 = Mem0[sp + 0x0000000000000038:word64]
l0000000000075F0C:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.[2]float32_exit
type..hash.[2]float32_exit:


// type..eq.[2]float32
// Return size: 0
void type..eq.[2]float32()
type..eq.[2]float32_entry:
	// succ:  l0000000000075F20
l0000000000075F20:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000075F20_ds_t
	// succ:  l0000000000075F20_ds_f l0000000000075F20_ds_t
l0000000000075F20_ds_f:
	goto l0000000000075F30
	// succ:  l0000000000075F30
l0000000000075F20_ds_t:
	goto l0000000000075F44
	// succ:  l0000000000075F44
l0000000000075F30:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000075F20
	// succ:  l0000000000075F20
l0000000000075F44:
	r7 = Mem0[sp + 0x0000000000000008:word64]
	r6 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r3 = 0x0000000000000000
	lo = r5 / 0x0000000000000000
	hi = r5 % 0x0000000000000000
	r23 = (word64) (r3 < r5)
	branch r23 == 0x0000000000000000 l0000000000075F44_ds_t
	// succ:  l0000000000075F44_ds_f l0000000000075F44_ds_t
l0000000000075F44_ds_f:
	goto l0000000000075F64
	// succ:  l0000000000075F64
l0000000000075F44_ds_t:
	goto l0000000000075FA0
	// succ:  l0000000000075FA0
l0000000000075F64:
l0000000000075FA0:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  type..eq.[2]float32_exit
type..eq.[2]float32_exit:


// type..hash.[2]float64
// Return size: 0
void type..hash.[2]float64()
type..hash.[2]float64_entry:
	// succ:  l0000000000075FC8
l0000000000075FC8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000075FC8_ds_t
	// succ:  l0000000000075FC8_ds_f l0000000000075FC8_ds_t
l0000000000075FC8_ds_f:
	goto l0000000000075FD8
	// succ:  l0000000000075FD8
l0000000000075FC8_ds_t:
	goto l0000000000075FEC
	// succ:  l0000000000075FEC
l0000000000075FD8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000075FC8
	// succ:  l0000000000075FC8
l0000000000075FEC:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l0000000000075FEC_ds_t
	// succ:  l0000000000075FEC_ds_f l0000000000075FEC_ds_t
l0000000000075FEC_ds_f:
	goto l0000000000076014
	// succ:  l0000000000076014
l0000000000075FEC_ds_t:
	goto l000000000007605C
	// succ:  l000000000007605C
l0000000000076014:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r1 = Mem0[sp + 0x0000000000000038:word64]
l000000000007605C:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.[2]float64_exit
type..hash.[2]float64_exit:


// type..eq.[2]float64
// Return size: 0
void type..eq.[2]float64()
type..eq.[2]float64_entry:
	// succ:  l0000000000076070
l0000000000076070:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076070_ds_t
	// succ:  l0000000000076070_ds_f l0000000000076070_ds_t
l0000000000076070_ds_f:
	goto l0000000000076080
	// succ:  l0000000000076080
l0000000000076070_ds_t:
	goto l0000000000076094
	// succ:  l0000000000076094
l0000000000076080:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076070
	// succ:  l0000000000076070
l0000000000076094:
	r7 = Mem0[sp + 0x0000000000000008:word64]
	r6 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r3 = 0x0000000000000000
	lo = r5 / 0x0000000000000000
	hi = r5 % 0x0000000000000000
	r23 = (word64) (r3 < r5)
	branch r23 == 0x0000000000000000 l0000000000076094_ds_t
	// succ:  l0000000000076094_ds_f l0000000000076094_ds_t
l0000000000076094_ds_f:
	goto l00000000000760B4
	// succ:  l00000000000760B4
l0000000000076094_ds_t:
	goto l00000000000760F0
	// succ:  l00000000000760F0
l00000000000760B4:
l00000000000760F0:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  type..eq.[2]float64_exit
type..eq.[2]float64_exit:


// runtime.(*errorString).Error
// Return size: 0
void runtime.(*errorString).Error()
runtime.(*errorString).Error_entry:
	// succ:  l0000000000076118
l0000000000076118:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076118_ds_t
	// succ:  l0000000000076118_ds_f l0000000000076118_ds_t
l0000000000076118_ds_f:
	goto l0000000000076128
	// succ:  l0000000000076128
l0000000000076118_ds_t:
	goto l000000000007613C
	// succ:  l000000000007613C
l0000000000076128:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076118
	// succ:  l0000000000076118
l000000000007613C:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r1 = Mem0[r30 + 0x0000000000000020:word64]
	branch r1 == 0x0000000000000000 l000000000007613C_ds_t
	// succ:  l000000000007613C_ds_f l000000000007613C_ds_t
l000000000007613C_ds_f:
	goto l0000000000076150
	// succ:  l0000000000076150
l000000000007613C_ds_t:
	goto l0000000000076168
	// succ:  l0000000000076168
l0000000000076150:
	r2 = Mem0[r1:word64]
	r3 = sp + 104
	branch r2 != r3 l0000000000076150_ds_t
	// succ:  l0000000000076150_ds_f l0000000000076150_ds_t
l0000000000076150_ds_f:
	goto l0000000000076160
	// succ:  l0000000000076160
l0000000000076150_ds_t:
	goto l0000000000076168
	// succ:  l0000000000076168
l0000000000076160:
	r2 = sp + 8
	Mem0[r1:word64] = r2
	// succ:  l0000000000076168
l0000000000076168:
	Mem0[sp + 0x0000000000000070:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000078:word64] = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000068:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000076168_ds_t
	// succ:  l0000000000076168_ds_f l0000000000076168_ds_t
l0000000000076168_ds_f:
	goto l0000000000076180
	// succ:  l0000000000076180
l0000000000076168_ds_t:
	goto l00000000000761D4
	// succ:  l00000000000761D4
l0000000000076180:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000761D4:
	r1 = Mem0[sp + 0x0000000000000068:word64]
	branch r1 != 0x0000000000000000 l00000000000761D4_ds_t
	// succ:  l00000000000761D4_ds_f l00000000000761D4_ds_t
l00000000000761D4_ds_f:
	goto l00000000000761E0
	// succ:  l00000000000761E0
l00000000000761D4_ds_t:
	goto l00000000000761E4
	// succ:  l00000000000761E4
l00000000000761E0:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000761E4
l00000000000761E4:
	r4 = Mem0[r1:word64]
	r2 = Mem0[r1 + 0x0000000000000008:word64]
	r3 = r2
	Mem0[sp + 0x0000000000000040:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000048:word64] = 0x0000000000000000
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
runtime.(*errorString).Error_exit:


// type..hash.runtime.uncommontype
// Return size: 0
void type..hash.runtime.uncommontype()
type..hash.runtime.uncommontype_entry:
	// succ:  l0000000000076250
l0000000000076250:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076250_ds_t
	// succ:  l0000000000076250_ds_f l0000000000076250_ds_t
l0000000000076250_ds_f:
	goto l0000000000076260
	// succ:  l0000000000076260
l0000000000076250_ds_t:
	goto l0000000000076274
	// succ:  l0000000000076274
l0000000000076260:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076250
	// succ:  l0000000000076250
l0000000000076274:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.uncommontype_exit
type..hash.runtime.uncommontype_exit:


// type..eq.runtime.uncommontype
// Return size: 0
void type..eq.runtime.uncommontype()
type..eq.runtime.uncommontype_entry:
	// succ:  l00000000000762E8
l00000000000762E8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000762E8_ds_t
	// succ:  l00000000000762E8_ds_f l00000000000762E8_ds_t
l00000000000762E8_ds_f:
	goto l00000000000762F8
	// succ:  l00000000000762F8
l00000000000762E8_ds_t:
	goto l000000000007630C
	// succ:  l000000000007630C
l00000000000762F8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000762E8
	// succ:  l00000000000762E8
l000000000007630C:
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r4:int32]
	r2 = (word64) Mem0[r3:int32]
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000007630C_ds_t
	// succ:  l000000000007630C_ds_f l000000000007630C_ds_t
l000000000007630C_ds_f:
	goto l0000000000076330
	// succ:  l0000000000076330
l000000000007630C_ds_t:
	goto l0000000000076378
	// succ:  l0000000000076378
l0000000000076330:
	r1 = (word64) Mem0[r4 + 0x0000000000000004:uint16]
	r2 = (word64) Mem0[r3 + 0x0000000000000004:uint16]
	r1 = r1 + 0x000000000000FFFF
	r2 = r2 + 0x000000000000FFFF
	branch r1 != r2 l0000000000076330_ds_t
	// succ:  l0000000000076330_ds_f l0000000000076330_ds_t
l0000000000076330_ds_f:
	goto l0000000000076348
	// succ:  l0000000000076348
l0000000000076330_ds_t:
	goto l0000000000076378
	// succ:  l0000000000076378
l0000000000076348:
	r1 = (word64) Mem0[r4 + 0x0000000000000008:uint32]
	r2 = (word64) Mem0[r3 + 0x0000000000000008:uint32]
l0000000000076378:
	Mem0[sp + 0x0000000000000018:byte] = (byte) 0x0000000000000000
	return
	// succ:  type..eq.runtime.uncommontype_exit
type..eq.runtime.uncommontype_exit:


// type..hash.runtime._panic
// Return size: 0
void type..hash.runtime._panic()
type..hash.runtime._panic_entry:
	// succ:  l0000000000076388
l0000000000076388:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076388_ds_t
	// succ:  l0000000000076388_ds_f l0000000000076388_ds_t
l0000000000076388_ds_f:
	goto l0000000000076398
	// succ:  l0000000000076398
l0000000000076388_ds_t:
	goto l00000000000763AC
	// succ:  l00000000000763AC
l0000000000076398:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076388
	// succ:  l0000000000076388
l00000000000763AC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.nilinterhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime._panic_exit
type..hash.runtime._panic_exit:


// type..eq.runtime._panic
// Return size: 0
void type..eq.runtime._panic()
type..eq.runtime._panic_entry:
	// succ:  l0000000000076450
l0000000000076450:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076450_ds_t
	// succ:  l0000000000076450_ds_f l0000000000076450_ds_t
l0000000000076450_ds_f:
	goto l0000000000076460
	// succ:  l0000000000076460
l0000000000076450_ds_t:
	goto l0000000000076474
	// succ:  l0000000000076474
l0000000000076460:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076450
	// succ:  l0000000000076450
l0000000000076474:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r8 = Mem0[sp + 0x0000000000000058:word64]
	r7 = Mem0[sp + 0x0000000000000060:word64]
	r1 = 0x0000000000000000
	r1 = Mem0[r8:word64]
	r2 = Mem0[r7:word64]
	branch r1 != r2 l0000000000076474_ds_t
	// succ:  l0000000000076474_ds_f l0000000000076474_ds_t
l0000000000076474_ds_f:
	goto l0000000000076498
	// succ:  l0000000000076498
l0000000000076474_ds_t:
	goto l0000000000076580
	// succ:  l0000000000076580
l0000000000076498:
	r4 = Mem0[r7 + 0x0000000000000008:word64]
	r6 = Mem0[r7 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000048:word64] = r6
	r3 = Mem0[r8 + 0x0000000000000008:word64]
	r5 = Mem0[r8 + 0x0000000000000010:word64]
	Mem0[sp + 0x0000000000000038:word64] = r5
	Mem0[sp + 0x0000000000000030:word64] = r3
	Mem0[sp + 0x0000000000000040:word64] = r4
	r1 = r3
	branch r3 != r4 l0000000000076498_ds_t
	// succ:  l0000000000076498_ds_f l0000000000076498_ds_t
l0000000000076498_ds_f:
	goto l00000000000764C4
	// succ:  l00000000000764C4
l0000000000076498_ds_t:
	goto l0000000000076580
	// succ:  l0000000000076580
l00000000000764C4:
	Mem0[sp + 0x0000000000000008:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r5
	Mem0[sp + 0x0000000000000018:word64] = r4
	r2 = r6
	Mem0[sp + 0x0000000000000020:word64] = r6
	call runtime.efaceeq (retsize: 0;)
	r8 = Mem0[sp + 0x0000000000000058:word64]
	r7 = Mem0[sp + 0x0000000000000060:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 == 0x0000000000000000 l00000000000764C4_ds_t
	// succ:  l00000000000764C4_ds_f l00000000000764C4_ds_t
l00000000000764C4_ds_f:
	goto l00000000000764F4
	// succ:  l00000000000764F4
l00000000000764C4_ds_t:
	goto l0000000000076580
	// succ:  l0000000000076580
l00000000000764F4:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l00000000000764FC
	// succ:  l00000000000764FC
l00000000000764F4_ds_f:
	goto l0000000000076508
	// succ:  l0000000000076508
l00000000000764F4_ds_t:
	goto l000000000007656C
	// succ:  l000000000007656C
l00000000000764FC:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l00000000000764F4_ds_t
	goto l00000000000764F4_ds_f
	// succ:  l00000000000764F4_ds_f l00000000000764F4_ds_t
l0000000000076508:
	Mem0[sp + 0x0000000000000008:word64] = r8
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r7
	r1 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000076508_ds_t
	// succ:  l0000000000076508_ds_f l0000000000076508_ds_t
l0000000000076508_ds_f:
	goto l0000000000076554
	// succ:  l0000000000076554
l0000000000076508_ds_t:
	goto l000000000007656C
	// succ:  l000000000007656C
l0000000000076554:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000068:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime._panic_exit
l000000000007656C:
	Mem0[sp + 0x0000000000000068:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime._panic_exit
l0000000000076580:
	r2 = 0x0000000000000000
	goto l00000000000764FC
	// succ:  l00000000000764FC
type..eq.runtime._panic_exit:


// type..hash.runtime._defer
// Return size: 0
void type..hash.runtime._defer()
type..hash.runtime._defer_entry:
	// succ:  l0000000000076590
l0000000000076590:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076590_ds_t
	// succ:  l0000000000076590_ds_f l0000000000076590_ds_t
l0000000000076590_ds_f:
	goto l00000000000765A0
	// succ:  l00000000000765A0
l0000000000076590_ds_t:
	goto l00000000000765B4
	// succ:  l00000000000765B4
l00000000000765A0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076590
	// succ:  l0000000000076590
l00000000000765B4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime._defer_exit
type..hash.runtime._defer_exit:


// type..eq.runtime._defer
// Return size: 0
void type..eq.runtime._defer()
type..eq.runtime._defer_entry:
	// succ:  l0000000000076628
l0000000000076628:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076628_ds_t
	// succ:  l0000000000076628_ds_f l0000000000076628_ds_t
l0000000000076628_ds_f:
	goto l0000000000076638
	// succ:  l0000000000076638
l0000000000076628_ds_t:
	goto l000000000007664C
	// succ:  l000000000007664C
l0000000000076638:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076628
	// succ:  l0000000000076628
l000000000007664C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r4:int32]
	r2 = (word64) Mem0[r3:int32]
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000007664C_ds_t
	// succ:  l000000000007664C_ds_f l000000000007664C_ds_t
l000000000007664C_ds_f:
	goto l0000000000076678
	// succ:  l0000000000076678
l000000000007664C_ds_t:
	goto l00000000000766F4
	// succ:  l00000000000766F4
l0000000000076678:
	r1 = (word64) Mem0[r4 + 0x0000000000000004:byte]
	r2 = (word64) Mem0[r3 + 0x0000000000000004:byte]
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000076678_ds_t
	// succ:  l0000000000076678_ds_f l0000000000076678_ds_t
l0000000000076678_ds_f:
	goto l0000000000076690
	// succ:  l0000000000076690
l0000000000076678_ds_t:
	goto l00000000000766F4
	// succ:  l00000000000766F4
l0000000000076690:
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000076690_ds_t
	// succ:  l0000000000076690_ds_f l0000000000076690_ds_t
l0000000000076690_ds_f:
	goto l00000000000766DC
	// succ:  l00000000000766DC
l0000000000076690_ds_t:
	goto l00000000000766F4
	// succ:  l00000000000766F4
l00000000000766DC:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime._defer_exit
l00000000000766F4:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime._defer_exit
type..eq.runtime._defer_exit:


// type..hash.runtime.special
// Return size: 0
void type..hash.runtime.special()
type..hash.runtime.special_entry:
	// succ:  l0000000000076708
l0000000000076708:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076708_ds_t
	// succ:  l0000000000076708_ds_f l0000000000076708_ds_t
l0000000000076708_ds_f:
	goto l0000000000076718
	// succ:  l0000000000076718
l0000000000076708_ds_t:
	goto l000000000007672C
	// succ:  l000000000007672C
l0000000000076718:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076708
	// succ:  l0000000000076708
l000000000007672C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.special_exit
type..hash.runtime.special_exit:


// type..eq.runtime.special
// Return size: 0
void type..eq.runtime.special()
type..eq.runtime.special_entry:
	// succ:  l0000000000076770
l0000000000076770:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076770_ds_t
	// succ:  l0000000000076770_ds_f l0000000000076770_ds_t
l0000000000076770_ds_f:
	goto l0000000000076780
	// succ:  l0000000000076780
l0000000000076770_ds_t:
	goto l0000000000076794
	// succ:  l0000000000076794
l0000000000076780:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076770
	// succ:  l0000000000076770
l0000000000076794:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.special_exit
type..eq.runtime.special_exit:


// type..hash.runtime.markBits
// Return size: 0
void type..hash.runtime.markBits()
type..hash.runtime.markBits_entry:
	// succ:  l00000000000767E0
l00000000000767E0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000767E0_ds_t
	// succ:  l00000000000767E0_ds_f l00000000000767E0_ds_t
l00000000000767E0_ds_f:
	goto l00000000000767F0
	// succ:  l00000000000767F0
l00000000000767E0_ds_t:
	goto l0000000000076804
	// succ:  l0000000000076804
l00000000000767F0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000767E0
	// succ:  l00000000000767E0
l0000000000076804:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.markBits_exit
type..hash.runtime.markBits_exit:


// type..eq.runtime.markBits
// Return size: 0
void type..eq.runtime.markBits()
type..eq.runtime.markBits_entry:
	// succ:  l0000000000076878
l0000000000076878:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076878_ds_t
	// succ:  l0000000000076878_ds_f l0000000000076878_ds_t
l0000000000076878_ds_f:
	goto l0000000000076888
	// succ:  l0000000000076888
l0000000000076878_ds_t:
	goto l000000000007689C
	// succ:  l000000000007689C
l0000000000076888:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076878
	// succ:  l0000000000076878
l000000000007689C:
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r1 = Mem0[r4:word64]
	r2 = Mem0[r3:word64]
	branch r1 != r2 l000000000007689C_ds_t
	// succ:  l000000000007689C_ds_f l000000000007689C_ds_t
l000000000007689C_ds_f:
	goto l00000000000768B8
	// succ:  l00000000000768B8
l000000000007689C_ds_t:
	goto l00000000000768F0
	// succ:  l00000000000768F0
l00000000000768B8:
	r1 = (word64) Mem0[r4 + 0x0000000000000008:byte]
	r2 = (word64) Mem0[r3 + 0x0000000000000008:byte]
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l00000000000768B8_ds_t
	// succ:  l00000000000768B8_ds_f l00000000000768B8_ds_t
l00000000000768B8_ds_f:
	goto l00000000000768D0
	// succ:  l00000000000768D0
l00000000000768B8_ds_t:
	goto l00000000000768F0
	// succ:  l00000000000768F0
l00000000000768D0:
	r1 = Mem0[r4 + 0x0000000000000010:word64]
	r2 = Mem0[r3 + 0x0000000000000010:word64]
	branch r1 != r2 l00000000000768D0_ds_t
	// succ:  l00000000000768D0_ds_f l00000000000768D0_ds_t
l00000000000768D0_ds_f:
	goto l00000000000768E0
	// succ:  l00000000000768E0
l00000000000768D0_ds_t:
	goto l00000000000768F0
	// succ:  l00000000000768F0
l00000000000768E0:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  type..eq.runtime.markBits_exit
l00000000000768F0:
	Mem0[sp + 0x0000000000000018:byte] = (byte) 0x0000000000000000
	return
	// succ:  type..eq.runtime.markBits_exit
type..eq.runtime.markBits_exit:


// type..hash.runtime.mcache
// Return size: 0
void type..hash.runtime.mcache()
type..hash.runtime.mcache_entry:
	// succ:  l0000000000076900
l0000000000076900:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076900_ds_t
	// succ:  l0000000000076900_ds_f l0000000000076900_ds_t
l0000000000076900_ds_f:
	goto l0000000000076910
	// succ:  l0000000000076910
l0000000000076900_ds_t:
	goto l0000000000076924
	// succ:  l0000000000076924
l0000000000076910:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076900
	// succ:  l0000000000076900
l0000000000076924:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.mcache_exit
type..hash.runtime.mcache_exit:


// type..eq.runtime.mcache
// Return size: 0
void type..eq.runtime.mcache()
type..eq.runtime.mcache_entry:
	// succ:  l0000000000076998
l0000000000076998:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076998_ds_t
	// succ:  l0000000000076998_ds_f l0000000000076998_ds_t
l0000000000076998_ds_f:
	goto l00000000000769A8
	// succ:  l00000000000769A8
l0000000000076998_ds_t:
	goto l00000000000769BC
	// succ:  l00000000000769BC
l00000000000769A8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076998
	// succ:  l0000000000076998
l00000000000769BC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r4:int32]
	r2 = (word64) Mem0[r3:int32]
	r1 = r1
	r2 = r2
	branch r1 != r2 l00000000000769BC_ds_t
	// succ:  l00000000000769BC_ds_f l00000000000769BC_ds_t
l00000000000769BC_ds_f:
	goto l00000000000769E8
	// succ:  l00000000000769E8
l00000000000769BC_ds_t:
	goto l0000000000076A4C
	// succ:  l0000000000076A4C
l00000000000769E8:
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l00000000000769E8_ds_t
	// succ:  l00000000000769E8_ds_f l00000000000769E8_ds_t
l00000000000769E8_ds_f:
	goto l0000000000076A34
	// succ:  l0000000000076A34
l00000000000769E8_ds_t:
	goto l0000000000076A4C
	// succ:  l0000000000076A4C
l0000000000076A34:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.mcache_exit
l0000000000076A4C:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.mcache_exit
type..eq.runtime.mcache_exit:


// type..hash.runtime.hchan
// Return size: 0
void type..hash.runtime.hchan()
type..hash.runtime.hchan_entry:
	// succ:  l0000000000076A60
l0000000000076A60:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076A60_ds_t
	// succ:  l0000000000076A60_ds_f l0000000000076A60_ds_t
l0000000000076A60_ds_f:
	goto l0000000000076A70
	// succ:  l0000000000076A70
l0000000000076A60_ds_t:
	goto l0000000000076A84
	// succ:  l0000000000076A84
l0000000000076A70:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076A60
	// succ:  l0000000000076A60
l0000000000076A84:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.hchan_exit
type..hash.runtime.hchan_exit:


// type..eq.runtime.hchan
// Return size: 0
void type..eq.runtime.hchan()
type..eq.runtime.hchan_entry:
	// succ:  l0000000000076AF8
l0000000000076AF8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076AF8_ds_t
	// succ:  l0000000000076AF8_ds_f l0000000000076AF8_ds_t
l0000000000076AF8_ds_f:
	goto l0000000000076B08
	// succ:  l0000000000076B08
l0000000000076AF8_ds_t:
	goto l0000000000076B1C
	// succ:  l0000000000076B1C
l0000000000076B08:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076AF8
	// succ:  l0000000000076AF8
l0000000000076B1C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000076B1C_ds_t
	// succ:  l0000000000076B1C_ds_f l0000000000076B1C_ds_t
l0000000000076B1C_ds_f:
	goto l0000000000076B5C
	// succ:  l0000000000076B5C
l0000000000076B1C_ds_t:
	goto l0000000000076BC8
	// succ:  l0000000000076BC8
l0000000000076B5C:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000076B5C_ds_t
	// succ:  l0000000000076B5C_ds_f l0000000000076B5C_ds_t
l0000000000076B5C_ds_f:
	goto l0000000000076BB0
	// succ:  l0000000000076BB0
l0000000000076B5C_ds_t:
	goto l0000000000076BC8
	// succ:  l0000000000076BC8
l0000000000076BB0:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.hchan_exit
l0000000000076BC8:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.hchan_exit
type..eq.runtime.hchan_exit:


// type..hash.runtime.sudog
// Return size: 0
void type..hash.runtime.sudog()
type..hash.runtime.sudog_entry:
	// succ:  l0000000000076BE0
l0000000000076BE0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076BE0_ds_t
	// succ:  l0000000000076BE0_ds_f l0000000000076BE0_ds_t
l0000000000076BE0_ds_f:
	goto l0000000000076BF0
	// succ:  l0000000000076BF0
l0000000000076BE0_ds_t:
	goto l0000000000076C04
	// succ:  l0000000000076C04
l0000000000076BF0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076BE0
	// succ:  l0000000000076BE0
l0000000000076C04:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.sudog_exit
type..hash.runtime.sudog_exit:


// type..eq.runtime.sudog
// Return size: 0
void type..eq.runtime.sudog()
type..eq.runtime.sudog_entry:
	// succ:  l0000000000076C78
l0000000000076C78:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076C78_ds_t
	// succ:  l0000000000076C78_ds_f l0000000000076C78_ds_t
l0000000000076C78_ds_f:
	goto l0000000000076C88
	// succ:  l0000000000076C88
l0000000000076C78_ds_t:
	goto l0000000000076C9C
	// succ:  l0000000000076C9C
l0000000000076C88:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076C78
	// succ:  l0000000000076C78
l0000000000076C9C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000076C9C_ds_t
	// succ:  l0000000000076C9C_ds_f l0000000000076C9C_ds_t
l0000000000076C9C_ds_f:
	goto l0000000000076CE4
	// succ:  l0000000000076CE4
l0000000000076C9C_ds_t:
	goto l0000000000076D44
	// succ:  l0000000000076D44
l0000000000076CE4:
	r1 = Mem0[r4 + 0x0000000000000038:word64]
	r2 = Mem0[r3 + 0x0000000000000038:word64]
	branch r1 != r2 l0000000000076CE4_ds_t
	// succ:  l0000000000076CE4_ds_f l0000000000076CE4_ds_t
l0000000000076CE4_ds_f:
	goto l0000000000076CF4
	// succ:  l0000000000076CF4
l0000000000076CE4_ds_t:
	goto l0000000000076D44
	// succ:  l0000000000076D44
l0000000000076CF4:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l0000000000076CFC
	// succ:  l0000000000076CFC
l0000000000076CF4_ds_f:
	goto l0000000000076D08
	// succ:  l0000000000076D08
l0000000000076CF4_ds_t:
	goto l0000000000076D30
	// succ:  l0000000000076D30
l0000000000076CFC:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000076CF4_ds_t
	goto l0000000000076CF4_ds_f
	// succ:  l0000000000076CF4_ds_f l0000000000076CF4_ds_t
l0000000000076D08:
	r1 = Mem0[r4 + 0x0000000000000040:word64]
	r2 = Mem0[r3 + 0x0000000000000040:word64]
	branch r1 != r2 l0000000000076D08_ds_t
	// succ:  l0000000000076D08_ds_f l0000000000076D08_ds_t
l0000000000076D08_ds_f:
	goto l0000000000076D18
	// succ:  l0000000000076D18
l0000000000076D08_ds_t:
	goto l0000000000076D30
	// succ:  l0000000000076D30
l0000000000076D18:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.sudog_exit
l0000000000076D30:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.sudog_exit
l0000000000076D44:
	r2 = 0x0000000000000000
	goto l0000000000076CFC
	// succ:  l0000000000076CFC
type..eq.runtime.sudog_exit:


// type..hash.runtime.heapBits
// Return size: 0
void type..hash.runtime.heapBits()
type..hash.runtime.heapBits_entry:
	// succ:  l0000000000076D50
l0000000000076D50:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076D50_ds_t
	// succ:  l0000000000076D50_ds_f l0000000000076D50_ds_t
l0000000000076D50_ds_f:
	goto l0000000000076D60
	// succ:  l0000000000076D60
l0000000000076D50_ds_t:
	goto l0000000000076D74
	// succ:  l0000000000076D74
l0000000000076D60:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076D50
	// succ:  l0000000000076D50
l0000000000076D74:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.heapBits_exit
type..hash.runtime.heapBits_exit:


// type..eq.runtime.heapBits
// Return size: 0
void type..eq.runtime.heapBits()
type..eq.runtime.heapBits_entry:
	// succ:  l0000000000076DB8
l0000000000076DB8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076DB8_ds_t
	// succ:  l0000000000076DB8_ds_f l0000000000076DB8_ds_t
l0000000000076DB8_ds_f:
	goto l0000000000076DC8
	// succ:  l0000000000076DC8
l0000000000076DB8_ds_t:
	goto l0000000000076DDC
	// succ:  l0000000000076DDC
l0000000000076DC8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076DB8
	// succ:  l0000000000076DB8
l0000000000076DDC:
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r1 = Mem0[r4:word64]
	r2 = Mem0[r3:word64]
	branch r1 != r2 l0000000000076DDC_ds_t
	// succ:  l0000000000076DDC_ds_f l0000000000076DDC_ds_t
l0000000000076DDC_ds_f:
	goto l0000000000076DF8
	// succ:  l0000000000076DF8
l0000000000076DDC_ds_t:
	goto l0000000000076E28
	// succ:  l0000000000076E28
l0000000000076DF8:
	r1 = (word64) Mem0[r4 + 0x0000000000000008:uint32]
	r2 = (word64) Mem0[r3 + 0x0000000000000008:uint32]
l0000000000076E28:
	Mem0[sp + 0x0000000000000018:byte] = (byte) 0x0000000000000000
	return
	// succ:  type..eq.runtime.heapBits_exit
type..eq.runtime.heapBits_exit:


// type..hash.runtime.modulehash
// Return size: 0
void type..hash.runtime.modulehash()
type..hash.runtime.modulehash_entry:
	// succ:  l0000000000076E38
l0000000000076E38:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076E38_ds_t
	// succ:  l0000000000076E38_ds_f l0000000000076E38_ds_t
l0000000000076E38_ds_f:
	goto l0000000000076E48
	// succ:  l0000000000076E48
l0000000000076E38_ds_t:
	goto l0000000000076E5C
	// succ:  l0000000000076E5C
l0000000000076E48:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076E38
	// succ:  l0000000000076E38
l0000000000076E5C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.strhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.strhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.modulehash_exit
type..hash.runtime.modulehash_exit:


// type..eq.runtime.modulehash
// Return size: 0
void type..eq.runtime.modulehash()
type..eq.runtime.modulehash_entry:
	// succ:  l0000000000076EF8
l0000000000076EF8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000076EF8_ds_t
	// succ:  l0000000000076EF8_ds_f l0000000000076EF8_ds_t
l0000000000076EF8_ds_f:
	goto l0000000000076F08
	// succ:  l0000000000076F08
l0000000000076EF8_ds_t:
	goto l0000000000076F1C
	// succ:  l0000000000076F1C
l0000000000076F08:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000076EF8
	// succ:  l0000000000076EF8
l0000000000076F1C:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000058:word64]
	r6 = Mem0[r1:word64]
	r4 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r5 = Mem0[r1:word64]
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r4
	branch r4 != r3 l0000000000076F1C_ds_t
	// succ:  l0000000000076F1C_ds_f l0000000000076F1C_ds_t
l0000000000076F1C_ds_f:
	goto l0000000000076F4C
	// succ:  l0000000000076F4C
l0000000000076F1C_ds_t:
	goto l0000000000077010
	// succ:  l0000000000077010
l0000000000076F4C:
	Mem0[sp + 0x0000000000000040:word64] = r6
	Mem0[sp + 0x0000000000000008:word64] = r6
	Mem0[sp + 0x0000000000000048:word64] = r4
	Mem0[sp + 0x0000000000000010:word64] = r4
	Mem0[sp + 0x0000000000000030:word64] = r5
	Mem0[sp + 0x0000000000000018:word64] = r5
	r2 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.eqstring (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 == 0x0000000000000000 l0000000000076F4C_ds_t
	// succ:  l0000000000076F4C_ds_f l0000000000076F4C_ds_t
l0000000000076F4C_ds_f:
	goto l0000000000076F84
	// succ:  l0000000000076F84
l0000000000076F4C_ds_t:
	goto l0000000000077010
	// succ:  l0000000000077010
l0000000000076F84:
	r1 = Mem0[sp + 0x0000000000000058:word64]
	r5 = Mem0[r1 + 0x0000000000000010:word64]
	r3 = Mem0[r1 + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r6 = Mem0[r1 + 0x0000000000000010:word64]
	r4 = Mem0[r1 + 0x0000000000000018:word64]
	r1 = r3
	branch r3 != r4 l0000000000076F84_ds_t
	// succ:  l0000000000076F84_ds_f l0000000000076F84_ds_t
l0000000000076F84_ds_f:
	goto l0000000000076FA8
	// succ:  l0000000000076FA8
l0000000000076F84_ds_t:
	goto l0000000000077010
	// succ:  l0000000000077010
l0000000000076FA8:
	Mem0[sp + 0x0000000000000030:word64] = r5
	Mem0[sp + 0x0000000000000008:word64] = r5
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	Mem0[sp + 0x0000000000000040:word64] = r6
	Mem0[sp + 0x0000000000000018:word64] = r6
	r2 = r4
	Mem0[sp + 0x0000000000000048:word64] = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	call runtime.eqstring (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 == 0x0000000000000000 l0000000000076FA8_ds_t
	// succ:  l0000000000076FA8_ds_f l0000000000076FA8_ds_t
l0000000000076FA8_ds_f:
	goto l0000000000076FE0
	// succ:  l0000000000076FE0
l0000000000076FA8_ds_t:
	goto l0000000000077010
	// succ:  l0000000000077010
l0000000000076FE0:
	r1 = Mem0[sp + 0x0000000000000058:word64]
	r1 = Mem0[r1 + 0x0000000000000020:word64]
	r2 = Mem0[sp + 0x0000000000000060:word64]
	r2 = Mem0[r2 + 0x0000000000000020:word64]
	branch r1 != r2 l0000000000076FE0_ds_t
	// succ:  l0000000000076FE0_ds_f l0000000000076FE0_ds_t
l0000000000076FE0_ds_f:
	goto l0000000000076FF8
	// succ:  l0000000000076FF8
l0000000000076FE0_ds_t:
	goto l0000000000077010
	// succ:  l0000000000077010
l0000000000076FF8:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000068:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.modulehash_exit
l0000000000077010:
	Mem0[sp + 0x0000000000000068:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.modulehash_exit
type..eq.runtime.modulehash_exit:


// type..hash.runtime.bitvector
// Return size: 0
void type..hash.runtime.bitvector()
type..hash.runtime.bitvector_entry:
	// succ:  l0000000000077028
l0000000000077028:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077028_ds_t
	// succ:  l0000000000077028_ds_f l0000000000077028_ds_t
l0000000000077028_ds_f:
	goto l0000000000077038
	// succ:  l0000000000077038
l0000000000077028_ds_t:
	goto l000000000007704C
	// succ:  l000000000007704C
l0000000000077038:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077028
	// succ:  l0000000000077028
l000000000007704C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.bitvector_exit
type..hash.runtime.bitvector_exit:


// type..eq.runtime.bitvector
// Return size: 0
void type..eq.runtime.bitvector()
type..eq.runtime.bitvector_entry:
	// succ:  l00000000000770C0
l00000000000770C0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000770C0_ds_t
	// succ:  l00000000000770C0_ds_f l00000000000770C0_ds_t
l00000000000770C0_ds_f:
	goto l00000000000770D0
	// succ:  l00000000000770D0
l00000000000770C0_ds_t:
	goto l00000000000770E4
	// succ:  l00000000000770E4
l00000000000770D0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000770C0
	// succ:  l00000000000770C0
l00000000000770E4:
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r4:int32]
	r2 = (word64) Mem0[r3:int32]
	r1 = r1
	r2 = r2
	branch r1 != r2 l00000000000770E4_ds_t
	// succ:  l00000000000770E4_ds_f l00000000000770E4_ds_t
l00000000000770E4_ds_f:
	goto l0000000000077108
	// succ:  l0000000000077108
l00000000000770E4_ds_t:
	goto l0000000000077128
	// succ:  l0000000000077128
l0000000000077108:
	r1 = Mem0[r4 + 0x0000000000000008:word64]
	r2 = Mem0[r3 + 0x0000000000000008:word64]
	branch r1 != r2 l0000000000077108_ds_t
	// succ:  l0000000000077108_ds_f l0000000000077108_ds_t
l0000000000077108_ds_f:
	goto l0000000000077118
	// succ:  l0000000000077118
l0000000000077108_ds_t:
	goto l0000000000077128
	// succ:  l0000000000077128
l0000000000077118:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  type..eq.runtime.bitvector_exit
l0000000000077128:
	Mem0[sp + 0x0000000000000018:byte] = (byte) 0x0000000000000000
	return
	// succ:  type..eq.runtime.bitvector_exit
type..eq.runtime.bitvector_exit:


// runtime.(*plainError).Error
// Return size: 0
void runtime.(*plainError).Error()
runtime.(*plainError).Error_entry:
	// succ:  l0000000000077138
l0000000000077138:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077138_ds_t
	// succ:  l0000000000077138_ds_f l0000000000077138_ds_t
l0000000000077138_ds_f:
	goto l0000000000077148
	// succ:  l0000000000077148
l0000000000077138_ds_t:
	goto l000000000007715C
	// succ:  l000000000007715C
l0000000000077148:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077138
	// succ:  l0000000000077138
l000000000007715C:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = Mem0[r30 + 0x0000000000000020:word64]
	branch r1 == 0x0000000000000000 l000000000007715C_ds_t
	// succ:  l000000000007715C_ds_f l000000000007715C_ds_t
l000000000007715C_ds_f:
	goto l0000000000077170
	// succ:  l0000000000077170
l000000000007715C_ds_t:
	goto l0000000000077188
	// succ:  l0000000000077188
l0000000000077170:
	r2 = Mem0[r1:word64]
	r3 = sp + 64
	branch r2 != r3 l0000000000077170_ds_t
	// succ:  l0000000000077170_ds_f l0000000000077170_ds_t
l0000000000077170_ds_f:
	goto l0000000000077180
	// succ:  l0000000000077180
l0000000000077170_ds_t:
	goto l0000000000077188
	// succ:  l0000000000077188
l0000000000077180:
	r2 = sp + 8
	Mem0[r1:word64] = r2
	// succ:  l0000000000077188
l0000000000077188:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r2 = 0x0000000000000000
	branch r1 != 0x0000000000000000 l0000000000077188_ds_t
	// succ:  l0000000000077188_ds_f l0000000000077188_ds_t
l0000000000077188_ds_f:
	goto l0000000000077198
	// succ:  l0000000000077198
l0000000000077188_ds_t:
	goto l00000000000771EC
	// succ:  l00000000000771EC
l0000000000077198:
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
l00000000000771EC:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	branch r1 != 0x0000000000000000 l00000000000771EC_ds_t
	// succ:  l00000000000771EC_ds_f l00000000000771EC_ds_t
l00000000000771EC_ds_f:
	goto l00000000000771F8
	// succ:  l00000000000771F8
l00000000000771EC_ds_t:
	goto l00000000000771FC
	// succ:  l00000000000771FC
l00000000000771F8:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l00000000000771FC
l00000000000771FC:
	r3 = Mem0[r1:word64]
	r2 = Mem0[r1 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000048:word64] = r3
	Mem0[sp + 0x0000000000000050:word64] = r2
	r4 = Mem0[sp:word64]
	sp = sp + 56
	call r4 (retsize: 0;)
	return
	// succ:  runtime.(*plainError).Error_exit
runtime.(*plainError).Error_exit:


// type..hash.runtime.cpuProfile
// Return size: 0
void type..hash.runtime.cpuProfile()
type..hash.runtime.cpuProfile_entry:
	// succ:  l0000000000077220
l0000000000077220:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077220_ds_t
	// succ:  l0000000000077220_ds_f l0000000000077220_ds_t
l0000000000077220_ds_f:
	goto l0000000000077230
	// succ:  l0000000000077230
l0000000000077220_ds_t:
	goto l0000000000077244
	// succ:  l0000000000077244
l0000000000077230:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077220
	// succ:  l0000000000077220
l0000000000077244:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = 0x0000000000310000
	r1 = r1 | 0x0000000000000037
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.cpuProfile_exit
type..hash.runtime.cpuProfile_exit:


// type..eq.runtime.cpuProfile
// Return size: 0
void type..eq.runtime.cpuProfile()
type..eq.runtime.cpuProfile_entry:
	// succ:  l00000000000772C0
l00000000000772C0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000772C0_ds_t
	// succ:  l00000000000772C0_ds_f l00000000000772C0_ds_t
l00000000000772C0_ds_f:
	goto l00000000000772D0
	// succ:  l00000000000772D0
l00000000000772C0_ds_t:
	goto l00000000000772E4
	// succ:  l00000000000772E4
l00000000000772D0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000772C0
	// succ:  l00000000000772C0
l00000000000772E4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r4:byte]
	r2 = (word64) Mem0[r3:byte]
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l00000000000772E4_ds_t
	// succ:  l00000000000772E4_ds_f l00000000000772E4_ds_t
l00000000000772E4_ds_f:
	goto l0000000000077310
	// succ:  l0000000000077310
l00000000000772E4_ds_t:
	goto l0000000000077378
	// succ:  l0000000000077378
l0000000000077310:
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = 0x0000000000310000
	r1 = r1 | 0x0000000000000037
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000077310_ds_t
	// succ:  l0000000000077310_ds_f l0000000000077310_ds_t
l0000000000077310_ds_f:
	goto l0000000000077360
	// succ:  l0000000000077360
l0000000000077310_ds_t:
	goto l0000000000077378
	// succ:  l0000000000077378
l0000000000077360:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.cpuProfile_exit
l0000000000077378:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.cpuProfile_exit
type..eq.runtime.cpuProfile_exit:


// type..hash.runtime.TypeAssertionError
// Return size: 0
void type..hash.runtime.TypeAssertionError()
type..hash.runtime.TypeAssertionError_entry:
	// succ:  l0000000000077390
l0000000000077390:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077390_ds_t
	// succ:  l0000000000077390_ds_f l0000000000077390_ds_t
l0000000000077390_ds_f:
	goto l00000000000773A0
	// succ:  l00000000000773A0
l0000000000077390_ds_t:
	goto l00000000000773B4
	// succ:  l00000000000773B4
l00000000000773A0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077390
	// succ:  l0000000000077390
l00000000000773B4:
	sp = sp + -32
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.strhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000030:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.strhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000030:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.strhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000030:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.strhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000038:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 32
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.TypeAssertionError_exit
type..hash.runtime.TypeAssertionError_exit:


// type..eq.runtime.TypeAssertionError
// Return size: 0
void type..eq.runtime.TypeAssertionError()
type..eq.runtime.TypeAssertionError_entry:
	// succ:  l0000000000077480
l0000000000077480:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077480_ds_t
	// succ:  l0000000000077480_ds_f l0000000000077480_ds_t
l0000000000077480_ds_f:
	goto l0000000000077490
	// succ:  l0000000000077490
l0000000000077480_ds_t:
	goto l00000000000774A4
	// succ:  l00000000000774A4
l0000000000077490:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077480
	// succ:  l0000000000077480
l00000000000774A4:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000058:word64]
	r6 = Mem0[r1:word64]
	r4 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r5 = Mem0[r1:word64]
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r4
	branch r4 != r3 l00000000000774A4_ds_t
	// succ:  l00000000000774A4_ds_f l00000000000774A4_ds_t
l00000000000774A4_ds_f:
	goto l00000000000774D4
	// succ:  l00000000000774D4
l00000000000774A4_ds_t:
	goto l00000000000776A0
	// succ:  l00000000000776A0
l00000000000774D4:
	Mem0[sp + 0x0000000000000040:word64] = r6
	Mem0[sp + 0x0000000000000008:word64] = r6
	Mem0[sp + 0x0000000000000048:word64] = r4
	Mem0[sp + 0x0000000000000010:word64] = r4
	Mem0[sp + 0x0000000000000030:word64] = r5
	Mem0[sp + 0x0000000000000018:word64] = r5
	r2 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.eqstring (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 == 0x0000000000000000 l00000000000774D4_ds_t
	// succ:  l00000000000774D4_ds_f l00000000000774D4_ds_t
l00000000000774D4_ds_f:
	goto l000000000007750C
	// succ:  l000000000007750C
l00000000000774D4_ds_t:
	goto l00000000000776A0
	// succ:  l00000000000776A0
l000000000007750C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l0000000000077514
	// succ:  l0000000000077514
l000000000007750C_ds_f:
	goto l0000000000077520
	// succ:  l0000000000077520
l000000000007750C_ds_t:
	goto l0000000000077694
	// succ:  l0000000000077694
l0000000000077514:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000007750C_ds_t
	goto l000000000007750C_ds_f
	// succ:  l000000000007750C_ds_f l000000000007750C_ds_t
l0000000000077520:
	r1 = Mem0[sp + 0x0000000000000058:word64]
	r5 = Mem0[r1 + 0x0000000000000010:word64]
	r3 = Mem0[r1 + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r6 = Mem0[r1 + 0x0000000000000010:word64]
	r4 = Mem0[r1 + 0x0000000000000018:word64]
	r1 = r3
	branch r3 != r4 l0000000000077520_ds_t
	// succ:  l0000000000077520_ds_f l0000000000077520_ds_t
l0000000000077520_ds_f:
	goto l0000000000077544
	// succ:  l0000000000077544
l0000000000077520_ds_t:
	goto l0000000000077694
	// succ:  l0000000000077694
l0000000000077544:
	Mem0[sp + 0x0000000000000030:word64] = r5
	Mem0[sp + 0x0000000000000008:word64] = r5
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	Mem0[sp + 0x0000000000000040:word64] = r6
	Mem0[sp + 0x0000000000000018:word64] = r6
	r2 = r4
	Mem0[sp + 0x0000000000000048:word64] = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	call runtime.eqstring (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 == 0x0000000000000000 l0000000000077544_ds_t
	// succ:  l0000000000077544_ds_f l0000000000077544_ds_t
l0000000000077544_ds_f:
	goto l000000000007757C
	// succ:  l000000000007757C
l0000000000077544_ds_t:
	goto l0000000000077694
	// succ:  l0000000000077694
l000000000007757C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l0000000000077584
	// succ:  l0000000000077584
l000000000007757C_ds_f:
	goto l0000000000077590
	// succ:  l0000000000077590
l000000000007757C_ds_t:
	goto l0000000000077688
	// succ:  l0000000000077688
l0000000000077584:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000007757C_ds_t
	goto l000000000007757C_ds_f
	// succ:  l000000000007757C_ds_f l000000000007757C_ds_t
l0000000000077590:
	r1 = Mem0[sp + 0x0000000000000058:word64]
	r5 = Mem0[r1 + 0x0000000000000020:word64]
	r3 = Mem0[r1 + 0x0000000000000028:word64]
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r6 = Mem0[r1 + 0x0000000000000020:word64]
	r4 = Mem0[r1 + 0x0000000000000028:word64]
	r1 = r3
	branch r3 != r4 l0000000000077590_ds_t
	// succ:  l0000000000077590_ds_f l0000000000077590_ds_t
l0000000000077590_ds_f:
	goto l00000000000775B4
	// succ:  l00000000000775B4
l0000000000077590_ds_t:
	goto l0000000000077688
	// succ:  l0000000000077688
l00000000000775B4:
	Mem0[sp + 0x0000000000000030:word64] = r5
	Mem0[sp + 0x0000000000000008:word64] = r5
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	Mem0[sp + 0x0000000000000040:word64] = r6
	Mem0[sp + 0x0000000000000018:word64] = r6
	r2 = r4
	Mem0[sp + 0x0000000000000048:word64] = r4
	Mem0[sp + 0x0000000000000020:word64] = r4
	call runtime.eqstring (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 == 0x0000000000000000 l00000000000775B4_ds_t
	// succ:  l00000000000775B4_ds_f l00000000000775B4_ds_t
l00000000000775B4_ds_f:
	goto l00000000000775EC
	// succ:  l00000000000775EC
l00000000000775B4_ds_t:
	goto l0000000000077688
	// succ:  l0000000000077688
l00000000000775EC:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l00000000000775F4
	// succ:  l00000000000775F4
l00000000000775EC_ds_f:
	goto l0000000000077600
	// succ:  l0000000000077600
l00000000000775EC_ds_t:
	goto l0000000000077674
	// succ:  l0000000000077674
l00000000000775F4:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l00000000000775EC_ds_t
	goto l00000000000775EC_ds_f
	// succ:  l00000000000775EC_ds_f l00000000000775EC_ds_t
l0000000000077600:
	r1 = Mem0[sp + 0x0000000000000058:word64]
	r6 = Mem0[r1 + 0x0000000000000030:word64]
	r4 = Mem0[r1 + 0x0000000000000038:word64]
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r5 = Mem0[r1 + 0x0000000000000030:word64]
	r3 = Mem0[r1 + 0x0000000000000038:word64]
	r1 = r4
	branch r4 != r3 l0000000000077600_ds_t
	// succ:  l0000000000077600_ds_f l0000000000077600_ds_t
l0000000000077600_ds_f:
	goto l0000000000077624
	// succ:  l0000000000077624
l0000000000077600_ds_t:
	goto l0000000000077674
	// succ:  l0000000000077674
l0000000000077624:
	Mem0[sp + 0x0000000000000040:word64] = r6
	Mem0[sp + 0x0000000000000008:word64] = r6
	Mem0[sp + 0x0000000000000048:word64] = r4
	Mem0[sp + 0x0000000000000010:word64] = r4
	Mem0[sp + 0x0000000000000030:word64] = r5
	Mem0[sp + 0x0000000000000018:word64] = r5
	r2 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.eqstring (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 == 0x0000000000000000 l0000000000077624_ds_t
	// succ:  l0000000000077624_ds_f l0000000000077624_ds_t
l0000000000077624_ds_f:
	goto l000000000007765C
	// succ:  l000000000007765C
l0000000000077624_ds_t:
	goto l0000000000077674
	// succ:  l0000000000077674
l000000000007765C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000068:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.TypeAssertionError_exit
l0000000000077674:
	Mem0[sp + 0x0000000000000068:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.TypeAssertionError_exit
l0000000000077688:
	r2 = 0x0000000000000000
	goto l00000000000775F4
	// succ:  l00000000000775F4
l0000000000077694:
	r2 = 0x0000000000000000
	goto l0000000000077584
	// succ:  l0000000000077584
l00000000000776A0:
	r2 = 0x0000000000000000
	goto l0000000000077514
	// succ:  l0000000000077514
type..eq.runtime.TypeAssertionError_exit:


// type..hash.[6]string
// Return size: 0
void type..hash.[6]string()
type..hash.[6]string_entry:
	// succ:  l00000000000776B0
l00000000000776B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000776B0_ds_t
	// succ:  l00000000000776B0_ds_f l00000000000776B0_ds_t
l00000000000776B0_ds_f:
	goto l00000000000776C0
	// succ:  l00000000000776C0
l00000000000776B0_ds_t:
	goto l00000000000776D4
	// succ:  l00000000000776D4
l00000000000776C0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000776B0
	// succ:  l00000000000776B0
l00000000000776D4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l00000000000776D4_ds_t
	// succ:  l00000000000776D4_ds_f l00000000000776D4_ds_t
l00000000000776D4_ds_f:
	goto l00000000000776FC
	// succ:  l00000000000776FC
l00000000000776D4_ds_t:
	goto l0000000000077744
	// succ:  l0000000000077744
l00000000000776FC:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r1 = Mem0[sp + 0x0000000000000038:word64]
l0000000000077744:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.[6]string_exit
type..hash.[6]string_exit:


// type..eq.[6]string
// Return size: 0
void type..eq.[6]string()
type..eq.[6]string_entry:
	// succ:  l0000000000077758
l0000000000077758:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077758_ds_t
	// succ:  l0000000000077758_ds_f l0000000000077758_ds_t
l0000000000077758_ds_f:
	goto l0000000000077768
	// succ:  l0000000000077768
l0000000000077758_ds_t:
	goto l000000000007777C
	// succ:  l000000000007777C
l0000000000077768:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077758
	// succ:  l0000000000077758
l000000000007777C:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r3 = 0x0000000000000000
type..eq.[6]string_exit:


// type..hash.[9]string
// Return size: 0
void type..hash.[9]string()
type..hash.[9]string_entry:
	// succ:  l0000000000077868
l0000000000077868:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077868_ds_t
	// succ:  l0000000000077868_ds_f l0000000000077868_ds_t
l0000000000077868_ds_f:
	goto l0000000000077878
	// succ:  l0000000000077878
l0000000000077868_ds_t:
	goto l000000000007788C
	// succ:  l000000000007788C
l0000000000077878:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077868
	// succ:  l0000000000077868
l000000000007788C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l000000000007788C_ds_t
	// succ:  l000000000007788C_ds_f l000000000007788C_ds_t
l000000000007788C_ds_f:
	goto l00000000000778B4
	// succ:  l00000000000778B4
l000000000007788C_ds_t:
	goto l00000000000778FC
	// succ:  l00000000000778FC
l00000000000778B4:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r1 = Mem0[sp + 0x0000000000000038:word64]
l00000000000778FC:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.[9]string_exit
type..hash.[9]string_exit:


// type..eq.[9]string
// Return size: 0
void type..eq.[9]string()
type..eq.[9]string_entry:
	// succ:  l0000000000077910
l0000000000077910:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077910_ds_t
	// succ:  l0000000000077910_ds_f l0000000000077910_ds_t
l0000000000077910_ds_f:
	goto l0000000000077920
	// succ:  l0000000000077920
l0000000000077910_ds_t:
	goto l0000000000077934
	// succ:  l0000000000077934
l0000000000077920:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077910
	// succ:  l0000000000077910
l0000000000077934:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r3 = 0x0000000000000000
type..eq.[9]string_exit:


// type..hash.runtime._func
// Return size: 0
void type..hash.runtime._func()
type..hash.runtime._func_entry:
	// succ:  l0000000000077A20
l0000000000077A20:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077A20_ds_t
	// succ:  l0000000000077A20_ds_f l0000000000077A20_ds_t
l0000000000077A20_ds_f:
	goto l0000000000077A30
	// succ:  l0000000000077A30
l0000000000077A20_ds_t:
	goto l0000000000077A44
	// succ:  l0000000000077A44
l0000000000077A30:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077A20
	// succ:  l0000000000077A20
l0000000000077A44:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime._func_exit
type..hash.runtime._func_exit:


// type..eq.runtime._func
// Return size: 0
void type..eq.runtime._func()
type..eq.runtime._func_entry:
	// succ:  l0000000000077AB8
l0000000000077AB8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077AB8_ds_t
	// succ:  l0000000000077AB8_ds_f l0000000000077AB8_ds_t
l0000000000077AB8_ds_f:
	goto l0000000000077AC8
	// succ:  l0000000000077AC8
l0000000000077AB8_ds_t:
	goto l0000000000077ADC
	// succ:  l0000000000077ADC
l0000000000077AC8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077AB8
	// succ:  l0000000000077AB8
l0000000000077ADC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.memequal128 (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000077ADC_ds_t
	// succ:  l0000000000077ADC_ds_f l0000000000077ADC_ds_t
l0000000000077ADC_ds_f:
	goto l0000000000077B14
	// succ:  l0000000000077B14
l0000000000077ADC_ds_t:
	goto l0000000000077B80
	// succ:  l0000000000077B80
l0000000000077B14:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000077B14_ds_t
	// succ:  l0000000000077B14_ds_f l0000000000077B14_ds_t
l0000000000077B14_ds_f:
	goto l0000000000077B68
	// succ:  l0000000000077B68
l0000000000077B14_ds_t:
	goto l0000000000077B80
	// succ:  l0000000000077B80
l0000000000077B68:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime._func_exit
l0000000000077B80:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime._func_exit
type..eq.runtime._func_exit:


// type..hash.runtime.hmap
// Return size: 0
void type..hash.runtime.hmap()
type..hash.runtime.hmap_entry:
	// succ:  l0000000000077B98
l0000000000077B98:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077B98_ds_t
	// succ:  l0000000000077B98_ds_f l0000000000077B98_ds_t
l0000000000077B98_ds_f:
	goto l0000000000077BA8
	// succ:  l0000000000077BA8
l0000000000077B98_ds_t:
	goto l0000000000077BBC
	// succ:  l0000000000077BBC
l0000000000077BA8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077B98
	// succ:  l0000000000077B98
l0000000000077BBC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.hmap_exit
type..hash.runtime.hmap_exit:


// type..eq.runtime.hmap
// Return size: 0
void type..eq.runtime.hmap()
type..eq.runtime.hmap_entry:
	// succ:  l0000000000077C30
l0000000000077C30:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077C30_ds_t
	// succ:  l0000000000077C30_ds_f l0000000000077C30_ds_t
l0000000000077C30_ds_f:
	goto l0000000000077C40
	// succ:  l0000000000077C40
l0000000000077C30_ds_t:
	goto l0000000000077C54
	// succ:  l0000000000077C54
l0000000000077C40:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077C30
	// succ:  l0000000000077C30
l0000000000077C54:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000077C54_ds_t
	// succ:  l0000000000077C54_ds_f l0000000000077C54_ds_t
l0000000000077C54_ds_f:
	goto l0000000000077C94
	// succ:  l0000000000077C94
l0000000000077C54_ds_t:
	goto l0000000000077D00
	// succ:  l0000000000077D00
l0000000000077C94:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000077C94_ds_t
	// succ:  l0000000000077C94_ds_f l0000000000077C94_ds_t
l0000000000077C94_ds_f:
	goto l0000000000077CE8
	// succ:  l0000000000077CE8
l0000000000077C94_ds_t:
	goto l0000000000077D00
	// succ:  l0000000000077D00
l0000000000077CE8:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.hmap_exit
l0000000000077D00:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.hmap_exit
type..eq.runtime.hmap_exit:


// type..hash.runtime.stackmap
// Return size: 0
void type..hash.runtime.stackmap()
type..hash.runtime.stackmap_entry:
	// succ:  l0000000000077D18
l0000000000077D18:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077D18_ds_t
	// succ:  l0000000000077D18_ds_f l0000000000077D18_ds_t
l0000000000077D18_ds_f:
	goto l0000000000077D28
	// succ:  l0000000000077D28
l0000000000077D18_ds_t:
	goto l0000000000077D3C
	// succ:  l0000000000077D3C
l0000000000077D28:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077D18
	// succ:  l0000000000077D18
l0000000000077D3C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.stackmap_exit
type..hash.runtime.stackmap_exit:


// type..eq.runtime.stackmap
// Return size: 0
void type..eq.runtime.stackmap()
type..eq.runtime.stackmap_entry:
	// succ:  l0000000000077D80
l0000000000077D80:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077D80_ds_t
	// succ:  l0000000000077D80_ds_f l0000000000077D80_ds_t
l0000000000077D80_ds_f:
	goto l0000000000077D90
	// succ:  l0000000000077D90
l0000000000077D80_ds_t:
	goto l0000000000077DA4
	// succ:  l0000000000077DA4
l0000000000077D90:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077D80
	// succ:  l0000000000077D80
l0000000000077DA4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.stackmap_exit
type..eq.runtime.stackmap_exit:


// type..hash.runtime.specialfinalizer
// Return size: 0
void type..hash.runtime.specialfinalizer()
type..hash.runtime.specialfinalizer_entry:
	// succ:  l0000000000077DF0
l0000000000077DF0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077DF0_ds_t
	// succ:  l0000000000077DF0_ds_f l0000000000077DF0_ds_t
l0000000000077DF0_ds_f:
	goto l0000000000077E00
	// succ:  l0000000000077E00
l0000000000077DF0_ds_t:
	goto l0000000000077E14
	// succ:  l0000000000077E14
l0000000000077E00:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077DF0
	// succ:  l0000000000077DF0
l0000000000077E14:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call type..hash.runtime.special (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.specialfinalizer_exit
type..hash.runtime.specialfinalizer_exit:


// type..eq.runtime.specialfinalizer
// Return size: 0
void type..eq.runtime.specialfinalizer()
type..eq.runtime.specialfinalizer_entry:
	// succ:  l0000000000077E80
l0000000000077E80:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077E80_ds_t
	// succ:  l0000000000077E80_ds_f l0000000000077E80_ds_t
l0000000000077E80_ds_f:
	goto l0000000000077E90
	// succ:  l0000000000077E90
l0000000000077E80_ds_t:
	goto l0000000000077EA4
	// succ:  l0000000000077EA4
l0000000000077E90:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077E80
	// succ:  l0000000000077E80
l0000000000077EA4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000030:word64]
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r1 = 0x0000000000000000
	r4 = r6
	r3 = r5
	r1 = Mem0[r6:word64]
	r2 = Mem0[r5:word64]
	branch r1 != r2 l0000000000077EA4_ds_t
	// succ:  l0000000000077EA4_ds_f l0000000000077EA4_ds_t
l0000000000077EA4_ds_f:
	goto l0000000000077ED0
	// succ:  l0000000000077ED0
l0000000000077EA4_ds_t:
	goto l0000000000077F64
	// succ:  l0000000000077F64
l0000000000077ED0:
	r1 = (word64) Mem0[r6 + 0x0000000000000008:uint16]
	r2 = (word64) Mem0[r5 + 0x0000000000000008:uint16]
	r1 = r1 + 0x000000000000FFFF
	r2 = r2 + 0x000000000000FFFF
	branch r1 != r2 l0000000000077ED0_ds_t
	// succ:  l0000000000077ED0_ds_f l0000000000077ED0_ds_t
l0000000000077ED0_ds_f:
	goto l0000000000077EE8
	// succ:  l0000000000077EE8
l0000000000077ED0_ds_t:
	goto l0000000000077F64
	// succ:  l0000000000077F64
l0000000000077EE8:
	r1 = (word64) Mem0[r6 + 0x000000000000000A:byte]
	r2 = (word64) Mem0[r5 + 0x000000000000000A:byte]
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000077EE8_ds_t
	// succ:  l0000000000077EE8_ds_f l0000000000077EE8_ds_t
l0000000000077EE8_ds_f:
	goto l0000000000077F00
	// succ:  l0000000000077F00
l0000000000077EE8_ds_t:
	goto l0000000000077F64
	// succ:  l0000000000077F64
l0000000000077F00:
	Mem0[sp + 0x0000000000000008:word64] = r6
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r5
	r1 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000077F00_ds_t
	// succ:  l0000000000077F00_ds_f l0000000000077F00_ds_t
l0000000000077F00_ds_f:
	goto l0000000000077F4C
	// succ:  l0000000000077F4C
l0000000000077F00_ds_t:
	goto l0000000000077F64
	// succ:  l0000000000077F64
l0000000000077F4C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.specialfinalizer_exit
l0000000000077F64:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.specialfinalizer_exit
type..eq.runtime.specialfinalizer_exit:


// type..hash.runtime.specialprofile
// Return size: 0
void type..hash.runtime.specialprofile()
type..hash.runtime.specialprofile_entry:
	// succ:  l0000000000077F78
l0000000000077F78:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000077F78_ds_t
	// succ:  l0000000000077F78_ds_f l0000000000077F78_ds_t
l0000000000077F78_ds_f:
	goto l0000000000077F88
	// succ:  l0000000000077F88
l0000000000077F78_ds_t:
	goto l0000000000077F9C
	// succ:  l0000000000077F9C
l0000000000077F88:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000077F78
	// succ:  l0000000000077F78
l0000000000077F9C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call type..hash.runtime.special (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.specialprofile_exit
type..hash.runtime.specialprofile_exit:


// type..eq.runtime.specialprofile
// Return size: 0
void type..eq.runtime.specialprofile()
type..eq.runtime.specialprofile_entry:
	// succ:  l0000000000078008
l0000000000078008:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078008_ds_t
	// succ:  l0000000000078008_ds_f l0000000000078008_ds_t
l0000000000078008_ds_f:
	goto l0000000000078018
	// succ:  l0000000000078018
l0000000000078008_ds_t:
	goto l000000000007802C
	// succ:  l000000000007802C
l0000000000078018:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078008
	// succ:  l0000000000078008
l000000000007802C:
	r6 = Mem0[sp + 0x0000000000000008:word64]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r1 = Mem0[r6:word64]
	r2 = Mem0[r5:word64]
	branch r1 != r2 l000000000007802C_ds_t
	// succ:  l000000000007802C_ds_f l000000000007802C_ds_t
l000000000007802C_ds_f:
	goto l0000000000078048
	// succ:  l0000000000078048
l000000000007802C_ds_t:
	goto l0000000000078098
	// succ:  l0000000000078098
l0000000000078048:
	r1 = (word64) Mem0[r6 + 0x0000000000000008:uint16]
	r2 = (word64) Mem0[r5 + 0x0000000000000008:uint16]
	r1 = r1 + 0x000000000000FFFF
	r2 = r2 + 0x000000000000FFFF
	branch r1 != r2 l0000000000078048_ds_t
	// succ:  l0000000000078048_ds_f l0000000000078048_ds_t
l0000000000078048_ds_f:
	goto l0000000000078060
	// succ:  l0000000000078060
l0000000000078048_ds_t:
	goto l0000000000078098
	// succ:  l0000000000078098
l0000000000078060:
	r1 = (word64) Mem0[r6 + 0x000000000000000A:byte]
	r2 = (word64) Mem0[r5 + 0x000000000000000A:byte]
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000078060_ds_t
	// succ:  l0000000000078060_ds_f l0000000000078060_ds_t
l0000000000078060_ds_f:
	goto l0000000000078078
	// succ:  l0000000000078078
l0000000000078060_ds_t:
	goto l0000000000078098
	// succ:  l0000000000078098
l0000000000078078:
	r1 = Mem0[r6 + 0x0000000000000010:word64]
	r2 = Mem0[r5 + 0x0000000000000010:word64]
	branch r1 != r2 l0000000000078078_ds_t
	// succ:  l0000000000078078_ds_f l0000000000078078_ds_t
l0000000000078078_ds_f:
	goto l0000000000078088
	// succ:  l0000000000078088
l0000000000078078_ds_t:
	goto l0000000000078098
	// succ:  l0000000000078098
l0000000000078088:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  type..eq.runtime.specialprofile_exit
l0000000000078098:
	Mem0[sp + 0x0000000000000018:byte] = (byte) 0x0000000000000000
	return
	// succ:  type..eq.runtime.specialprofile_exit
type..eq.runtime.specialprofile_exit:


// type..hash.runtime.mcentral
// Return size: 0
void type..hash.runtime.mcentral()
type..hash.runtime.mcentral_entry:
	// succ:  l00000000000780A8
l00000000000780A8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000780A8_ds_t
	// succ:  l00000000000780A8_ds_f l00000000000780A8_ds_t
l00000000000780A8_ds_f:
	goto l00000000000780B8
	// succ:  l00000000000780B8
l00000000000780A8_ds_t:
	goto l00000000000780CC
	// succ:  l00000000000780CC
l00000000000780B8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000780A8
	// succ:  l00000000000780A8
l00000000000780CC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.mcentral_exit
type..hash.runtime.mcentral_exit:


// type..eq.runtime.mcentral
// Return size: 0
void type..eq.runtime.mcentral()
type..eq.runtime.mcentral_entry:
	// succ:  l0000000000078140
l0000000000078140:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078140_ds_t
	// succ:  l0000000000078140_ds_f l0000000000078140_ds_t
l0000000000078140_ds_f:
	goto l0000000000078150
	// succ:  l0000000000078150
l0000000000078140_ds_t:
	goto l0000000000078164
	// succ:  l0000000000078164
l0000000000078150:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078140
	// succ:  l0000000000078140
l0000000000078164:
	r6 = Mem0[sp + 0x0000000000000008:word64]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r1 = Mem0[r6:word64]
	r2 = Mem0[r5:word64]
	branch r1 != r2 l0000000000078164_ds_t
	// succ:  l0000000000078164_ds_f l0000000000078164_ds_t
l0000000000078164_ds_f:
	goto l0000000000078180
	// succ:  l0000000000078180
l0000000000078164_ds_t:
	goto l0000000000078238
	// succ:  l0000000000078238
l0000000000078180:
	r1 = (word64) Mem0[r6 + 0x0000000000000008:int32]
	r2 = (word64) Mem0[r5 + 0x0000000000000008:int32]
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000078180_ds_t
	// succ:  l0000000000078180_ds_f l0000000000078180_ds_t
l0000000000078180_ds_f:
	goto l0000000000078198
	// succ:  l0000000000078198
l0000000000078180_ds_t:
	goto l0000000000078238
	// succ:  l0000000000078238
l0000000000078198:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r6
	hi = r1 % r6
	r4 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r5
	hi = r1 % r5
	r3 = r1
	r1 = Mem0[r4:word64]
	r2 = Mem0[r3:word64]
	branch r1 != r2 l0000000000078198_ds_t
	// succ:  l0000000000078198_ds_f l0000000000078198_ds_t
l0000000000078198_ds_f:
	goto l00000000000781C0
	// succ:  l00000000000781C0
l0000000000078198_ds_t:
	goto l0000000000078238
	// succ:  l0000000000078238
l00000000000781C0:
	r1 = Mem0[r4 + 0x0000000000000008:word64]
	r2 = Mem0[r3 + 0x0000000000000008:word64]
	branch r1 != r2 l00000000000781C0_ds_t
	// succ:  l00000000000781C0_ds_f l00000000000781C0_ds_t
l00000000000781C0_ds_f:
	goto l00000000000781D0
	// succ:  l00000000000781D0
l00000000000781C0_ds_t:
	goto l0000000000078238
	// succ:  l0000000000078238
l00000000000781D0:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l00000000000781D8
	// succ:  l00000000000781D8
l00000000000781D0_ds_f:
	goto l00000000000781E4
	// succ:  l00000000000781E4
l00000000000781D0_ds_t:
	goto l000000000007822C
	// succ:  l000000000007822C
l00000000000781D8:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l00000000000781D0_ds_t
	goto l00000000000781D0_ds_f
	// succ:  l00000000000781D0_ds_f l00000000000781D0_ds_t
l00000000000781E4:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r6
	hi = r1 % r6
	r3 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r5
	hi = r1 % r5
	r4 = r1
	r1 = Mem0[r3:word64]
	r2 = Mem0[r4:word64]
	branch r1 != r2 l00000000000781E4_ds_t
	// succ:  l00000000000781E4_ds_f l00000000000781E4_ds_t
l00000000000781E4_ds_f:
	goto l000000000007820C
	// succ:  l000000000007820C
l00000000000781E4_ds_t:
	goto l000000000007822C
	// succ:  l000000000007822C
l000000000007820C:
	r1 = Mem0[r3 + 0x0000000000000008:word64]
	r2 = Mem0[r4 + 0x0000000000000008:word64]
	branch r1 != r2 l000000000007820C_ds_t
	// succ:  l000000000007820C_ds_f l000000000007820C_ds_t
l000000000007820C_ds_f:
	goto l000000000007821C
	// succ:  l000000000007821C
l000000000007820C_ds_t:
	goto l000000000007822C
	// succ:  l000000000007822C
l000000000007821C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  type..eq.runtime.mcentral_exit
l000000000007822C:
	Mem0[sp + 0x0000000000000018:byte] = (byte) 0x0000000000000000
	return
	// succ:  type..eq.runtime.mcentral_exit
l0000000000078238:
	r2 = 0x0000000000000000
	goto l00000000000781D8
	// succ:  l00000000000781D8
type..eq.runtime.mcentral_exit:


// type..hash.struct { mcentral runtime.mcentral; pad [32]uint8 }
// Return size: 0
void type..hash.struct { mcentral runtime.mcentral; pad [32]uint8 }()
type..hash.struct { mcentral runtime.mcentral; pad [32]uint8 }_entry:
	// succ:  l0000000000078248
l0000000000078248:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078248_ds_t
	// succ:  l0000000000078248_ds_f l0000000000078248_ds_t
l0000000000078248_ds_f:
	goto l0000000000078258
	// succ:  l0000000000078258
l0000000000078248_ds_t:
	goto l000000000007826C
	// succ:  l000000000007826C
l0000000000078258:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078248
	// succ:  l0000000000078248
l000000000007826C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call type..hash.runtime.mcentral (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.struct { mcentral runtime.mcentral; pad [32]uint8 }_exit
type..hash.struct { mcentral runtime.mcentral; pad [32]uint8 }_exit:


// type..eq.struct { mcentral runtime.mcentral; pad [32]uint8 }
// Return size: 0
void type..eq.struct { mcentral runtime.mcentral; pad [32]uint8 }()
type..eq.struct { mcentral runtime.mcentral; pad [32]uint8 }_entry:
	// succ:  l00000000000782D8
l00000000000782D8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000782D8_ds_t
	// succ:  l00000000000782D8_ds_f l00000000000782D8_ds_t
l00000000000782D8_ds_f:
	goto l00000000000782E8
	// succ:  l00000000000782E8
l00000000000782D8_ds_t:
	goto l00000000000782FC
	// succ:  l00000000000782FC
l00000000000782E8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000782D8
	// succ:  l00000000000782D8
l00000000000782FC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r8 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = 0x0000000000000000
	r4 = r8
	r5 = r3
	r7 = r3
	r1 = Mem0[r8:word64]
	r2 = Mem0[r3:word64]
	branch r1 != r2 l00000000000782FC_ds_t
	// succ:  l00000000000782FC_ds_f l00000000000782FC_ds_t
l00000000000782FC_ds_f:
	goto l000000000007832C
	// succ:  l000000000007832C
l00000000000782FC_ds_t:
	goto l0000000000078450
	// succ:  l0000000000078450
l000000000007832C:
	r1 = (word64) Mem0[r4 + 0x0000000000000008:int32]
	r2 = (word64) Mem0[r3 + 0x0000000000000008:int32]
	r1 = r1
	r2 = r2
	branch r1 != r2 l000000000007832C_ds_t
	// succ:  l000000000007832C_ds_f l000000000007832C_ds_t
l000000000007832C_ds_f:
	goto l0000000000078344
	// succ:  l0000000000078344
l000000000007832C_ds_t:
	goto l0000000000078450
	// succ:  l0000000000078450
l0000000000078344:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r6 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r5 = r1
	r1 = Mem0[r6:word64]
	r2 = Mem0[r5:word64]
	branch r1 != r2 l0000000000078344_ds_t
	// succ:  l0000000000078344_ds_f l0000000000078344_ds_t
l0000000000078344_ds_f:
	goto l000000000007836C
	// succ:  l000000000007836C
l0000000000078344_ds_t:
	goto l0000000000078450
	// succ:  l0000000000078450
l000000000007836C:
	r1 = Mem0[r6 + 0x0000000000000008:word64]
	r2 = Mem0[r5 + 0x0000000000000008:word64]
	branch r1 != r2 l000000000007836C_ds_t
	// succ:  l000000000007836C_ds_f l000000000007836C_ds_t
l000000000007836C_ds_f:
	goto l000000000007837C
	// succ:  l000000000007837C
l000000000007836C_ds_t:
	goto l0000000000078450
	// succ:  l0000000000078450
l000000000007837C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l0000000000078384
	// succ:  l0000000000078384
l000000000007837C_ds_f:
	goto l0000000000078390
	// succ:  l0000000000078390
l000000000007837C_ds_t:
	goto l0000000000078444
	// succ:  l0000000000078444
l0000000000078384:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000007837C_ds_t
	goto l000000000007837C_ds_f
	// succ:  l000000000007837C_ds_f l000000000007837C_ds_t
l0000000000078390:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r4 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r3 = r1
	r1 = Mem0[r4:word64]
	r2 = Mem0[r3:word64]
	branch r1 != r2 l0000000000078390_ds_t
	// succ:  l0000000000078390_ds_f l0000000000078390_ds_t
l0000000000078390_ds_f:
	goto l00000000000783B8
	// succ:  l00000000000783B8
l0000000000078390_ds_t:
	goto l0000000000078444
	// succ:  l0000000000078444
l00000000000783B8:
	r1 = Mem0[r4 + 0x0000000000000008:word64]
	r2 = Mem0[r3 + 0x0000000000000008:word64]
	branch r1 != r2 l00000000000783B8_ds_t
	// succ:  l00000000000783B8_ds_f l00000000000783B8_ds_t
l00000000000783B8_ds_f:
	goto l00000000000783C8
	// succ:  l00000000000783C8
l00000000000783B8_ds_t:
	goto l0000000000078444
	// succ:  l0000000000078444
l00000000000783C8:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l00000000000783D0
	// succ:  l00000000000783D0
l00000000000783C8_ds_f:
	goto l00000000000783DC
	// succ:  l00000000000783DC
l00000000000783C8_ds_t:
	goto l0000000000078430
	// succ:  l0000000000078430
l00000000000783D0:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l00000000000783C8_ds_t
	goto l00000000000783C8_ds_f
	// succ:  l00000000000783C8_ds_f l00000000000783C8_ds_t
l00000000000783DC:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r8
	hi = r1 % r8
	r4 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r7
	hi = r1 % r7
	r3 = r1
	Mem0[sp + 0x0000000000000008:word64] = r4
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	branch r1 == 0x0000000000000000 l00000000000783DC_ds_t
	// succ:  l00000000000783DC_ds_f l00000000000783DC_ds_t
l00000000000783DC_ds_f:
	goto l0000000000078418
	// succ:  l0000000000078418
l00000000000783DC_ds_t:
	goto l0000000000078430
	// succ:  l0000000000078430
l0000000000078418:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.struct { mcentral runtime.mcentral; pad [32]uint8 }_exit
l0000000000078430:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.struct { mcentral runtime.mcentral; pad [32]uint8 }_exit
l0000000000078444:
	r2 = 0x0000000000000000
	goto l00000000000783D0
	// succ:  l00000000000783D0
l0000000000078450:
	r2 = 0x0000000000000000
	goto l0000000000078384
	// succ:  l0000000000078384
type..eq.struct { mcentral runtime.mcentral; pad [32]uint8 }_exit:


// type..hash.[67]struct { mcentral runtime.mcentral; pad [32]uint8 }
// Return size: 0
void type..hash.[67]struct { mcentral runtime.mcentral; pad [32]uint8 }()
type..hash.[67]struct { mcentral runtime.mcentral; pad [32]uint8 }_entry:
	// succ:  l0000000000078460
l0000000000078460:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078460_ds_t
	// succ:  l0000000000078460_ds_f l0000000000078460_ds_t
l0000000000078460_ds_f:
	goto l0000000000078470
	// succ:  l0000000000078470
l0000000000078460_ds_t:
	goto l0000000000078484
	// succ:  l0000000000078484
l0000000000078470:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078460
	// succ:  l0000000000078460
l0000000000078484:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l0000000000078484_ds_t
	// succ:  l0000000000078484_ds_f l0000000000078484_ds_t
l0000000000078484_ds_f:
	goto l00000000000784AC
	// succ:  l00000000000784AC
l0000000000078484_ds_t:
	goto l0000000000078500
	// succ:  l0000000000078500
l00000000000784AC:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = r3
l0000000000078500:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.[67]struct { mcentral runtime.mcentral; pad [32]uint8 }_exit
type..hash.[67]struct { mcentral runtime.mcentral; pad [32]uint8 }_exit:


// type..eq.[67]struct { mcentral runtime.mcentral; pad [32]uint8 }
// Return size: 0
void type..eq.[67]struct { mcentral runtime.mcentral; pad [32]uint8 }()
type..eq.[67]struct { mcentral runtime.mcentral; pad [32]uint8 }_entry:
	// succ:  l0000000000078518
l0000000000078518:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078518_ds_t
	// succ:  l0000000000078518_ds_f l0000000000078518_ds_t
l0000000000078518_ds_f:
	goto l0000000000078528
	// succ:  l0000000000078528
l0000000000078518_ds_t:
	goto l000000000007853C
	// succ:  l000000000007853C
l0000000000078528:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078518
	// succ:  l0000000000078518
l000000000007853C:
	sp = sp + -56
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r3 = 0x0000000000000000
type..eq.[67]struct { mcentral runtime.mcentral; pad [32]uint8 }_exit:


// type..hash.struct { F uintptr; c *runtime.mcache; sizeclass int8 }
// Return size: 0
void type..hash.struct { F uintptr; c *runtime.mcache; sizeclass int8 }()
type..hash.struct { F uintptr; c *runtime.mcache; sizeclass int8 }_entry:
	// succ:  l00000000000786C0
l00000000000786C0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000786C0_ds_t
	// succ:  l00000000000786C0_ds_f l00000000000786C0_ds_t
l00000000000786C0_ds_f:
	goto l00000000000786D0
	// succ:  l00000000000786D0
l00000000000786C0_ds_t:
	goto l00000000000786E4
	// succ:  l00000000000786E4
l00000000000786D0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000786C0
	// succ:  l00000000000786C0
l00000000000786E4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.struct { F uintptr; c *runtime.mcache; sizeclass int8 }_exit
type..hash.struct { F uintptr; c *runtime.mcache; sizeclass int8 }_exit:


// type..eq.struct { F uintptr; c *runtime.mcache; sizeclass int8 }
// Return size: 0
void type..eq.struct { F uintptr; c *runtime.mcache; sizeclass int8 }()
type..eq.struct { F uintptr; c *runtime.mcache; sizeclass int8 }_entry:
	// succ:  l0000000000078728
l0000000000078728:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078728_ds_t
	// succ:  l0000000000078728_ds_f l0000000000078728_ds_t
l0000000000078728_ds_f:
	goto l0000000000078738
	// succ:  l0000000000078738
l0000000000078728_ds_t:
	goto l000000000007874C
	// succ:  l000000000007874C
l0000000000078738:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078728
	// succ:  l0000000000078728
l000000000007874C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.struct { F uintptr; c *runtime.mcache; sizeclass int8 }_exit
type..eq.struct { F uintptr; c *runtime.mcache; sizeclass int8 }_exit:


// type..hash.struct { F uintptr; s **runtime.mspan; size *uintptr; needzero bool }
// Return size: 0
void type..hash.struct { F uintptr; s **runtime.mspan; size *uintptr; needzero bool }()
type..hash.struct { F uintptr; s **runtime.mspan; size *uintptr; needzero bool }_entry:
	// succ:  l0000000000078798
l0000000000078798:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078798_ds_t
	// succ:  l0000000000078798_ds_f l0000000000078798_ds_t
l0000000000078798_ds_f:
	goto l00000000000787A8
	// succ:  l00000000000787A8
l0000000000078798_ds_t:
	goto l00000000000787BC
	// succ:  l00000000000787BC
l00000000000787A8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078798
	// succ:  l0000000000078798
l00000000000787BC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.struct { F uintptr; s **runtime.mspan; size *uintptr; needzero bool }_exit
type..hash.struct { F uintptr; s **runtime.mspan; size *uintptr; needzero bool }_exit:


// type..eq.struct { F uintptr; s **runtime.mspan; size *uintptr; needzero bool }
// Return size: 0
void type..eq.struct { F uintptr; s **runtime.mspan; size *uintptr; needzero bool }()
type..eq.struct { F uintptr; s **runtime.mspan; size *uintptr; needzero bool }_entry:
	// succ:  l0000000000078800
l0000000000078800:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078800_ds_t
	// succ:  l0000000000078800_ds_f l0000000000078800_ds_t
l0000000000078800_ds_f:
	goto l0000000000078810
	// succ:  l0000000000078810
l0000000000078800_ds_t:
	goto l0000000000078824
	// succ:  l0000000000078824
l0000000000078810:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078800
	// succ:  l0000000000078800
l0000000000078824:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.struct { F uintptr; s **runtime.mspan; size *uintptr; needzero bool }_exit
type..eq.struct { F uintptr; s **runtime.mspan; size *uintptr; needzero bool }_exit:


// type..hash.runtime.gcControllerState
// Return size: 0
void type..hash.runtime.gcControllerState()
type..hash.runtime.gcControllerState_entry:
	// succ:  l0000000000078870
l0000000000078870:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078870_ds_t
	// succ:  l0000000000078870_ds_f l0000000000078870_ds_t
l0000000000078870_ds_f:
	goto l0000000000078880
	// succ:  l0000000000078880
l0000000000078870_ds_t:
	goto l0000000000078894
	// succ:  l0000000000078894
l0000000000078880:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078870
	// succ:  l0000000000078870
l0000000000078894:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.f64hash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.f64hash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.f64hash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.f64hash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.gcControllerState_exit
type..hash.runtime.gcControllerState_exit:


// type..eq.runtime.gcControllerState
// Return size: 0
void type..eq.runtime.gcControllerState()
type..eq.runtime.gcControllerState_entry:
	// succ:  l00000000000789C8
l00000000000789C8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000789C8_ds_t
	// succ:  l00000000000789C8_ds_f l00000000000789C8_ds_t
l00000000000789C8_ds_f:
	goto l00000000000789D8
	// succ:  l00000000000789D8
l00000000000789C8_ds_t:
	goto l00000000000789EC
	// succ:  l00000000000789EC
l00000000000789D8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000789C8
	// succ:  l00000000000789C8
l00000000000789EC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r2 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r4 = r1 + 0x00000000000000FF
	r1 = r4 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l00000000000789EC_ds_t
	// succ:  l00000000000789EC_ds_f l00000000000789EC_ds_t
l00000000000789EC_ds_f:
	goto l0000000000078A34
	// succ:  l0000000000078A34
l00000000000789EC_ds_t:
	goto l0000000000078A48
	// succ:  l0000000000078A48
l0000000000078A34:
	f0 = Mem0[r2 + 0x0000000000000048:word64]
	f1 = Mem0[r3 + 0x0000000000000048:word64]
l0000000000078A48:
	r4 = 0x0000000000000000
	r1 = r4 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000078A48_ds_t
	// succ:  l0000000000078A48_ds_f l0000000000078A48_ds_t
l0000000000078A48_ds_f:
	goto l0000000000078A58
	// succ:  l0000000000078A58
l0000000000078A48_ds_t:
	goto l0000000000078A6C
	// succ:  l0000000000078A6C
l0000000000078A58:
	f0 = Mem0[r2 + 0x0000000000000050:word64]
	f1 = Mem0[r3 + 0x0000000000000050:word64]
l0000000000078A6C:
	r4 = 0x0000000000000000
	r1 = r4 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000078A6C_ds_t
	// succ:  l0000000000078A6C_ds_f l0000000000078A6C_ds_t
l0000000000078A6C_ds_f:
	goto l0000000000078A7C
	// succ:  l0000000000078A7C
l0000000000078A6C_ds_t:
	goto l0000000000078A90
	// succ:  l0000000000078A90
l0000000000078A7C:
	f0 = Mem0[r2 + 0x0000000000000058:word64]
	f1 = Mem0[r3 + 0x0000000000000058:word64]
l0000000000078A90:
	r4 = 0x0000000000000000
	r1 = r4 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000078A90_ds_t
	// succ:  l0000000000078A90_ds_f l0000000000078A90_ds_t
l0000000000078A90_ds_f:
	goto l0000000000078AA0
	// succ:  l0000000000078AA0
l0000000000078A90_ds_t:
	goto l0000000000078AB4
	// succ:  l0000000000078AB4
l0000000000078AA0:
	f0 = Mem0[r2 + 0x0000000000000060:word64]
	f1 = Mem0[r3 + 0x0000000000000060:word64]
l0000000000078AB4:
	r4 = 0x0000000000000000
	r1 = r4 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000078AB4_ds_t
	// succ:  l0000000000078AB4_ds_f l0000000000078AB4_ds_t
l0000000000078AB4_ds_f:
	goto l0000000000078AC4
	// succ:  l0000000000078AC4
l0000000000078AB4_ds_t:
	goto l0000000000078AEC
	// succ:  l0000000000078AEC
l0000000000078AC4:
	r1 = Mem0[r2 + 0x0000000000000088:word64]
	r2 = Mem0[r3 + 0x0000000000000088:word64]
	branch r1 != r2 l0000000000078AC4_ds_t
	// succ:  l0000000000078AC4_ds_f l0000000000078AC4_ds_t
l0000000000078AC4_ds_f:
	goto l0000000000078AD4
	// succ:  l0000000000078AD4
l0000000000078AC4_ds_t:
	goto l0000000000078AEC
	// succ:  l0000000000078AEC
l0000000000078AD4:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.gcControllerState_exit
l0000000000078AEC:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.gcControllerState_exit
type..eq.runtime.gcControllerState_exit:


// type..hash.runtime.finblock
// Return size: 0
void type..hash.runtime.finblock()
type..hash.runtime.finblock_entry:
	// succ:  l0000000000078B40
l0000000000078B40:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078B40_ds_t
	// succ:  l0000000000078B40_ds_f l0000000000078B40_ds_t
l0000000000078B40_ds_f:
	goto l0000000000078B50
	// succ:  l0000000000078B50
l0000000000078B40_ds_t:
	goto l0000000000078B64
	// succ:  l0000000000078B64
l0000000000078B50:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078B40
	// succ:  l0000000000078B40
l0000000000078B64:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.finblock_exit
type..hash.runtime.finblock_exit:


// type..eq.runtime.finblock
// Return size: 0
void type..eq.runtime.finblock()
type..eq.runtime.finblock_entry:
	// succ:  l0000000000078BD8
l0000000000078BD8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078BD8_ds_t
	// succ:  l0000000000078BD8_ds_f l0000000000078BD8_ds_t
l0000000000078BD8_ds_f:
	goto l0000000000078BE8
	// succ:  l0000000000078BE8
l0000000000078BD8_ds_t:
	goto l0000000000078BFC
	// succ:  l0000000000078BFC
l0000000000078BE8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078BD8
	// succ:  l0000000000078BD8
l0000000000078BFC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000078BFC_ds_t
	// succ:  l0000000000078BFC_ds_f l0000000000078BFC_ds_t
l0000000000078BFC_ds_f:
	goto l0000000000078C3C
	// succ:  l0000000000078C3C
l0000000000078BFC_ds_t:
	goto l0000000000078C94
	// succ:  l0000000000078C94
l0000000000078C3C:
	r4 = Mem0[sp + 0x0000000000000030:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r4 / r4
	hi = r4 % r4
	r1 = Mem0[sp + 0x0000000000000038:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	r3 = r1
	Mem0[sp + 0x0000000000000008:word64] = r4
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r2
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	branch r1 == 0x0000000000000000 l0000000000078C3C_ds_t
	// succ:  l0000000000078C3C_ds_f l0000000000078C3C_ds_t
l0000000000078C3C_ds_f:
	goto l0000000000078C7C
	// succ:  l0000000000078C7C
l0000000000078C3C_ds_t:
	goto l0000000000078C94
	// succ:  l0000000000078C94
l0000000000078C7C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.finblock_exit
l0000000000078C94:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.finblock_exit
type..eq.runtime.finblock_exit:


// type..hash.runtime.functype
// Return size: 0
void type..hash.runtime.functype()
type..hash.runtime.functype_entry:
	// succ:  l0000000000078CA8
l0000000000078CA8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078CA8_ds_t
	// succ:  l0000000000078CA8_ds_f l0000000000078CA8_ds_t
l0000000000078CA8_ds_f:
	goto l0000000000078CB8
	// succ:  l0000000000078CB8
l0000000000078CA8_ds_t:
	goto l0000000000078CCC
	// succ:  l0000000000078CCC
l0000000000078CB8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078CA8
	// succ:  l0000000000078CA8
l0000000000078CCC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.functype_exit
type..hash.runtime.functype_exit:


// type..eq.runtime.functype
// Return size: 0
void type..eq.runtime.functype()
type..eq.runtime.functype_entry:
	// succ:  l0000000000078D10
l0000000000078D10:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078D10_ds_t
	// succ:  l0000000000078D10_ds_f l0000000000078D10_ds_t
l0000000000078D10_ds_f:
	goto l0000000000078D20
	// succ:  l0000000000078D20
l0000000000078D10_ds_t:
	goto l0000000000078D34
	// succ:  l0000000000078D34
l0000000000078D20:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078D10
	// succ:  l0000000000078D10
l0000000000078D34:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.functype_exit
type..eq.runtime.functype_exit:


// type..hash.runtime.divMagic
// Return size: 0
void type..hash.runtime.divMagic()
type..hash.runtime.divMagic_entry:
	// succ:  l0000000000078D80
l0000000000078D80:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078D80_ds_t
	// succ:  l0000000000078D80_ds_f l0000000000078D80_ds_t
l0000000000078D80_ds_f:
	goto l0000000000078D90
	// succ:  l0000000000078D90
l0000000000078D80_ds_t:
	goto l0000000000078DA4
	// succ:  l0000000000078DA4
l0000000000078D90:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078D80
	// succ:  l0000000000078D80
l0000000000078DA4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.divMagic_exit
type..hash.runtime.divMagic_exit:


// type..eq.runtime.divMagic
// Return size: 0
void type..eq.runtime.divMagic()
type..eq.runtime.divMagic_entry:
	// succ:  l0000000000078E50
l0000000000078E50:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078E50_ds_t
	// succ:  l0000000000078E50_ds_f l0000000000078E50_ds_t
l0000000000078E50_ds_f:
	goto l0000000000078E60
	// succ:  l0000000000078E60
l0000000000078E50_ds_t:
	goto l0000000000078E74
	// succ:  l0000000000078E74
l0000000000078E60:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078E50
	// succ:  l0000000000078E50
l0000000000078E74:
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r4:byte]
	r2 = (word64) Mem0[r3:byte]
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000078E74_ds_t
	// succ:  l0000000000078E74_ds_f l0000000000078E74_ds_t
l0000000000078E74_ds_f:
	goto l0000000000078E98
	// succ:  l0000000000078E98
l0000000000078E74_ds_t:
	goto l0000000000078EF0
	// succ:  l0000000000078EF0
l0000000000078E98:
	r1 = (word64) Mem0[r4 + 0x0000000000000004:uint32]
	r2 = (word64) Mem0[r3 + 0x0000000000000004:uint32]
l0000000000078EF0:
	Mem0[sp + 0x0000000000000018:byte] = (byte) 0x0000000000000000
	return
	// succ:  type..eq.runtime.divMagic_exit
type..eq.runtime.divMagic_exit:


// type..hash.struct { F uintptr; s **runtime.mspan; h *runtime.mheap; npage uintptr; sizeclass int32; large bool }
// Return size: 0
void type..hash.struct { F uintptr; s **runtime.mspan; h *runtime.mheap; npage uintptr; sizeclass int32; large bool }()
type..hash.struct { F uintptr; s **runtime.mspan; h *runtime.mheap; npage uintptr; sizeclass int32; large bool }_entry:
	// succ:  l0000000000078F00
l0000000000078F00:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078F00_ds_t
	// succ:  l0000000000078F00_ds_f l0000000000078F00_ds_t
l0000000000078F00_ds_f:
	goto l0000000000078F10
	// succ:  l0000000000078F10
l0000000000078F00_ds_t:
	goto l0000000000078F24
	// succ:  l0000000000078F24
l0000000000078F10:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078F00
	// succ:  l0000000000078F00
l0000000000078F24:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.struct { F uintptr; s **runtime.mspan; h *runtime.mheap; npage uintptr; sizeclass int32; large bool }_exit
type..hash.struct { F uintptr; s **runtime.mspan; h *runtime.mheap; npage uintptr; sizeclass int32; large bool }_exit:


// type..eq.struct { F uintptr; s **runtime.mspan; h *runtime.mheap; npage uintptr; sizeclass int32; large bool }
// Return size: 0
void type..eq.struct { F uintptr; s **runtime.mspan; h *runtime.mheap; npage uintptr; sizeclass int32; large bool }()
type..eq.struct { F uintptr; s **runtime.mspan; h *runtime.mheap; npage uintptr; sizeclass int32; large bool }_entry:
	// succ:  l0000000000078F68
l0000000000078F68:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078F68_ds_t
	// succ:  l0000000000078F68_ds_f l0000000000078F68_ds_t
l0000000000078F68_ds_f:
	goto l0000000000078F78
	// succ:  l0000000000078F78
l0000000000078F68_ds_t:
	goto l0000000000078F8C
	// succ:  l0000000000078F8C
l0000000000078F78:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078F68
	// succ:  l0000000000078F68
l0000000000078F8C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.struct { F uintptr; s **runtime.mspan; h *runtime.mheap; npage uintptr; sizeclass int32; large bool }_exit
type..eq.struct { F uintptr; s **runtime.mspan; h *runtime.mheap; npage uintptr; sizeclass int32; large bool }_exit:


// type..hash.struct { F uintptr; h *runtime.mheap; s *runtime.mspan; acct int32 }
// Return size: 0
void type..hash.struct { F uintptr; h *runtime.mheap; s *runtime.mspan; acct int32 }()
type..hash.struct { F uintptr; h *runtime.mheap; s *runtime.mspan; acct int32 }_entry:
	// succ:  l0000000000078FD8
l0000000000078FD8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000078FD8_ds_t
	// succ:  l0000000000078FD8_ds_f l0000000000078FD8_ds_t
l0000000000078FD8_ds_f:
	goto l0000000000078FE8
	// succ:  l0000000000078FE8
l0000000000078FD8_ds_t:
	goto l0000000000078FFC
	// succ:  l0000000000078FFC
l0000000000078FE8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000078FD8
	// succ:  l0000000000078FD8
l0000000000078FFC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.struct { F uintptr; h *runtime.mheap; s *runtime.mspan; acct int32 }_exit
type..hash.struct { F uintptr; h *runtime.mheap; s *runtime.mspan; acct int32 }_exit:


// type..eq.struct { F uintptr; h *runtime.mheap; s *runtime.mspan; acct int32 }
// Return size: 0
void type..eq.struct { F uintptr; h *runtime.mheap; s *runtime.mspan; acct int32 }()
type..eq.struct { F uintptr; h *runtime.mheap; s *runtime.mspan; acct int32 }_entry:
	// succ:  l0000000000079040
l0000000000079040:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079040_ds_t
	// succ:  l0000000000079040_ds_f l0000000000079040_ds_t
l0000000000079040_ds_f:
	goto l0000000000079050
	// succ:  l0000000000079050
l0000000000079040_ds_t:
	goto l0000000000079064
	// succ:  l0000000000079064
l0000000000079050:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079040
	// succ:  l0000000000079040
l0000000000079064:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.struct { F uintptr; h *runtime.mheap; s *runtime.mspan; acct int32 }_exit
type..eq.struct { F uintptr; h *runtime.mheap; s *runtime.mspan; acct int32 }_exit:


// type..hash.struct { Size uint32; Mallocs uint64; Frees uint64 }
// Return size: 0
void type..hash.struct { Size uint32; Mallocs uint64; Frees uint64 }()
type..hash.struct { Size uint32; Mallocs uint64; Frees uint64 }_entry:
	// succ:  l00000000000790B0
l00000000000790B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000790B0_ds_t
	// succ:  l00000000000790B0_ds_f l00000000000790B0_ds_t
l00000000000790B0_ds_f:
	goto l00000000000790C0
	// succ:  l00000000000790C0
l00000000000790B0_ds_t:
	goto l00000000000790D4
	// succ:  l00000000000790D4
l00000000000790C0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000790B0
	// succ:  l00000000000790B0
l00000000000790D4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.struct { Size uint32; Mallocs uint64; Frees uint64 }_exit
type..hash.struct { Size uint32; Mallocs uint64; Frees uint64 }_exit:


// type..eq.struct { Size uint32; Mallocs uint64; Frees uint64 }
// Return size: 0
void type..eq.struct { Size uint32; Mallocs uint64; Frees uint64 }()
type..eq.struct { Size uint32; Mallocs uint64; Frees uint64 }_entry:
	// succ:  l0000000000079148
l0000000000079148:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079148_ds_t
	// succ:  l0000000000079148_ds_f l0000000000079148_ds_t
l0000000000079148_ds_f:
	goto l0000000000079158
	// succ:  l0000000000079158
l0000000000079148_ds_t:
	goto l000000000007916C
	// succ:  l000000000007916C
l0000000000079158:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079148
	// succ:  l0000000000079148
l000000000007916C:
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r4:uint32]
	r2 = (word64) Mem0[r3:uint32]
type..eq.struct { Size uint32; Mallocs uint64; Frees uint64 }_exit:


// type..hash.[61]struct { Size uint32; Mallocs uint64; Frees uint64 }
// Return size: 0
void type..hash.[61]struct { Size uint32; Mallocs uint64; Frees uint64 }()
type..hash.[61]struct { Size uint32; Mallocs uint64; Frees uint64 }_entry:
	// succ:  l00000000000791D8
l00000000000791D8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000791D8_ds_t
	// succ:  l00000000000791D8_ds_f l00000000000791D8_ds_t
l00000000000791D8_ds_f:
	goto l00000000000791E8
	// succ:  l00000000000791E8
l00000000000791D8_ds_t:
	goto l00000000000791FC
	// succ:  l00000000000791FC
l00000000000791E8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000791D8
	// succ:  l00000000000791D8
l00000000000791FC:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l00000000000791FC_ds_t
	// succ:  l00000000000791FC_ds_f l00000000000791FC_ds_t
l00000000000791FC_ds_f:
	goto l0000000000079224
	// succ:  l0000000000079224
l00000000000791FC_ds_t:
	goto l0000000000079278
	// succ:  l0000000000079278
l0000000000079224:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = r3
l0000000000079278:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.[61]struct { Size uint32; Mallocs uint64; Frees uint64 }_exit
type..hash.[61]struct { Size uint32; Mallocs uint64; Frees uint64 }_exit:


// type..eq.[61]struct { Size uint32; Mallocs uint64; Frees uint64 }
// Return size: 0
void type..eq.[61]struct { Size uint32; Mallocs uint64; Frees uint64 }()
type..eq.[61]struct { Size uint32; Mallocs uint64; Frees uint64 }_entry:
	// succ:  l0000000000079290
l0000000000079290:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079290_ds_t
	// succ:  l0000000000079290_ds_f l0000000000079290_ds_t
l0000000000079290_ds_f:
	goto l00000000000792A0
	// succ:  l00000000000792A0
l0000000000079290_ds_t:
	goto l00000000000792B4
	// succ:  l00000000000792B4
l00000000000792A0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079290
	// succ:  l0000000000079290
l00000000000792B4:
	r9 = Mem0[sp + 0x0000000000000008:word64]
	r8 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r4 = 0x0000000000000000
	lo = r7 / 0x0000000000000000
	hi = r7 % 0x0000000000000000
	r23 = (word64) (r4 < r7)
	branch r23 == 0x0000000000000000 l00000000000792B4_ds_t
	// succ:  l00000000000792B4_ds_f l00000000000792B4_ds_t
l00000000000792B4_ds_f:
	goto l00000000000792D4
	// succ:  l00000000000792D4
l00000000000792B4_ds_t:
	goto l0000000000079354
	// succ:  l0000000000079354
l00000000000792D4:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
l0000000000079354:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  type..eq.[61]struct { Size uint32; Mallocs uint64; Frees uint64 }_exit
type..eq.[61]struct { Size uint32; Mallocs uint64; Frees uint64 }_exit:


// type..hash.runtime.MemStats
// Return size: 0
void type..hash.runtime.MemStats()
type..hash.runtime.MemStats_entry:
	// succ:  l0000000000079378
l0000000000079378:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079378_ds_t
	// succ:  l0000000000079378_ds_f l0000000000079378_ds_t
l0000000000079378_ds_f:
	goto l0000000000079388
	// succ:  l0000000000079388
l0000000000079378_ds_t:
	goto l000000000007939C
	// succ:  l000000000007939C
l0000000000079388:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079378
	// succ:  l0000000000079378
l000000000007939C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.f64hash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call type..hash.[61]struct { Size uint32; Mallocs uint64; Frees uint64 } (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.MemStats_exit
type..hash.runtime.MemStats_exit:


// type..eq.runtime.MemStats
// Return size: 0
void type..eq.runtime.MemStats()
type..eq.runtime.MemStats_entry:
	// succ:  l0000000000079470
l0000000000079470:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079470_ds_t
	// succ:  l0000000000079470_ds_f l0000000000079470_ds_t
l0000000000079470_ds_f:
	goto l0000000000079480
	// succ:  l0000000000079480
l0000000000079470_ds_t:
	goto l0000000000079494
	// succ:  l0000000000079494
l0000000000079480:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079470
	// succ:  l0000000000079470
l0000000000079494:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000079494_ds_t
	// succ:  l0000000000079494_ds_f l0000000000079494_ds_t
l0000000000079494_ds_f:
	goto l00000000000794DC
	// succ:  l00000000000794DC
l0000000000079494_ds_t:
	goto l00000000000794F0
	// succ:  l00000000000794F0
l00000000000794DC:
	f0 = Mem0[r4 + 0x00000000000010C8:word64]
	f1 = Mem0[r3 + 0x00000000000010C8:word64]
l00000000000794F0:
	r2 = 0x0000000000000000
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l00000000000794F0_ds_t
	// succ:  l00000000000794F0_ds_f l00000000000794F0_ds_t
l00000000000794F0_ds_f:
	goto l0000000000079500
	// succ:  l0000000000079500
l00000000000794F0_ds_t:
	goto l00000000000795C8
	// succ:  l00000000000795C8
l0000000000079500:
	r1 = (word64) Mem0[r4 + 0x00000000000010D0:byte]
	r2 = (word64) Mem0[r3 + 0x00000000000010D0:byte]
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l0000000000079500_ds_t
	// succ:  l0000000000079500_ds_f l0000000000079500_ds_t
l0000000000079500_ds_f:
	goto l0000000000079518
	// succ:  l0000000000079518
l0000000000079500_ds_t:
	goto l00000000000795C8
	// succ:  l00000000000795C8
l0000000000079518:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l0000000000079520
	// succ:  l0000000000079520
l0000000000079518_ds_f:
	goto l000000000007952C
	// succ:  l000000000007952C
l0000000000079518_ds_t:
	goto l00000000000795BC
	// succ:  l00000000000795BC
l0000000000079520:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000079518_ds_t
	goto l0000000000079518_ds_f
	// succ:  l0000000000079518_ds_f l0000000000079518_ds_t
l000000000007952C:
	r1 = (word64) Mem0[r4 + 0x00000000000010D1:byte]
	r2 = (word64) Mem0[r3 + 0x00000000000010D1:byte]
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000007952C_ds_t
	// succ:  l000000000007952C_ds_f l000000000007952C_ds_t
l000000000007952C_ds_f:
	goto l0000000000079544
	// succ:  l0000000000079544
l000000000007952C_ds_t:
	goto l00000000000795BC
	// succ:  l00000000000795BC
l0000000000079544:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l000000000007954C
	// succ:  l000000000007954C
l0000000000079544_ds_f:
	goto l0000000000079558
	// succ:  l0000000000079558
l0000000000079544_ds_t:
	goto l00000000000795A8
	// succ:  l00000000000795A8
l000000000007954C:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l0000000000079544_ds_t
	goto l0000000000079544_ds_f
	// succ:  l0000000000079544_ds_f l0000000000079544_ds_t
l0000000000079558:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r4 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r3 = r1
	Mem0[sp + 0x0000000000000008:word64] = r4
	r2 = r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	call type..eq.[61]struct { Size uint32; Mallocs uint64; Frees uint64 } (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	branch r1 == 0x0000000000000000 l0000000000079558_ds_t
	// succ:  l0000000000079558_ds_f l0000000000079558_ds_t
l0000000000079558_ds_f:
	goto l0000000000079590
	// succ:  l0000000000079590
l0000000000079558_ds_t:
	goto l00000000000795A8
	// succ:  l00000000000795A8
l0000000000079590:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.MemStats_exit
l00000000000795A8:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.MemStats_exit
l00000000000795BC:
	r2 = 0x0000000000000000
	goto l000000000007954C
	// succ:  l000000000007954C
l00000000000795C8:
	r2 = 0x0000000000000000
	goto l0000000000079520
	// succ:  l0000000000079520
type..eq.runtime.MemStats_exit:


// type..hash.struct { F uintptr; addr *uint32; ret int32 }
// Return size: 0
void type..hash.struct { F uintptr; addr *uint32; ret int32 }()
type..hash.struct { F uintptr; addr *uint32; ret int32 }_entry:
	// succ:  l00000000000795E8
l00000000000795E8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000795E8_ds_t
	// succ:  l00000000000795E8_ds_f l00000000000795E8_ds_t
l00000000000795E8_ds_f:
	goto l00000000000795F8
	// succ:  l00000000000795F8
l00000000000795E8_ds_t:
	goto l000000000007960C
	// succ:  l000000000007960C
l00000000000795F8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000795E8
	// succ:  l00000000000795E8
l000000000007960C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.struct { F uintptr; addr *uint32; ret int32 }_exit
type..hash.struct { F uintptr; addr *uint32; ret int32 }_exit:


// type..eq.struct { F uintptr; addr *uint32; ret int32 }
// Return size: 0
void type..eq.struct { F uintptr; addr *uint32; ret int32 }()
type..eq.struct { F uintptr; addr *uint32; ret int32 }_entry:
	// succ:  l0000000000079650
l0000000000079650:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079650_ds_t
	// succ:  l0000000000079650_ds_f l0000000000079650_ds_t
l0000000000079650_ds_f:
	goto l0000000000079660
	// succ:  l0000000000079660
l0000000000079650_ds_t:
	goto l0000000000079674
	// succ:  l0000000000079674
l0000000000079660:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079650
	// succ:  l0000000000079650
l0000000000079674:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.struct { F uintptr; addr *uint32; ret int32 }_exit
type..eq.struct { F uintptr; addr *uint32; ret int32 }_exit:


// type..hash.runtime.sigaltstackt
// Return size: 0
void type..hash.runtime.sigaltstackt()
type..hash.runtime.sigaltstackt_entry:
	// succ:  l00000000000796C0
l00000000000796C0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000796C0_ds_t
	// succ:  l00000000000796C0_ds_f l00000000000796C0_ds_t
l00000000000796C0_ds_f:
	goto l00000000000796D0
	// succ:  l00000000000796D0
l00000000000796C0_ds_t:
	goto l00000000000796E4
	// succ:  l00000000000796E4
l00000000000796D0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000796C0
	// succ:  l00000000000796C0
l00000000000796E4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.sigaltstackt_exit
type..hash.runtime.sigaltstackt_exit:


// type..eq.runtime.sigaltstackt
// Return size: 0
void type..eq.runtime.sigaltstackt()
type..eq.runtime.sigaltstackt_entry:
	// succ:  l0000000000079728
l0000000000079728:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079728_ds_t
	// succ:  l0000000000079728_ds_f l0000000000079728_ds_t
l0000000000079728_ds_f:
	goto l0000000000079738
	// succ:  l0000000000079738
l0000000000079728_ds_t:
	goto l000000000007974C
	// succ:  l000000000007974C
l0000000000079738:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079728
	// succ:  l0000000000079728
l000000000007974C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.sigaltstackt_exit
type..eq.runtime.sigaltstackt_exit:


// type..hash.runtime.sigactiont
// Return size: 0
void type..hash.runtime.sigactiont()
type..hash.runtime.sigactiont_entry:
	// succ:  l0000000000079798
l0000000000079798:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079798_ds_t
	// succ:  l0000000000079798_ds_f l0000000000079798_ds_t
l0000000000079798_ds_f:
	goto l00000000000797A8
	// succ:  l00000000000797A8
l0000000000079798_ds_t:
	goto l00000000000797BC
	// succ:  l00000000000797BC
l00000000000797A8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079798
	// succ:  l0000000000079798
l00000000000797BC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.sigactiont_exit
type..hash.runtime.sigactiont_exit:


// type..eq.runtime.sigactiont
// Return size: 0
void type..eq.runtime.sigactiont()
type..eq.runtime.sigactiont_entry:
	// succ:  l0000000000079830
l0000000000079830:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079830_ds_t
	// succ:  l0000000000079830_ds_f l0000000000079830_ds_t
l0000000000079830_ds_f:
	goto l0000000000079840
	// succ:  l0000000000079840
l0000000000079830_ds_t:
	goto l0000000000079854
	// succ:  l0000000000079854
l0000000000079840:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079830
	// succ:  l0000000000079830
l0000000000079854:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r4:uint32]
	r2 = (word64) Mem0[r3:uint32]
type..eq.runtime.sigactiont_exit:


// type..hash.struct { F uintptr; newg *runtime.g; stacksize int32 }
// Return size: 0
void type..hash.struct { F uintptr; newg *runtime.g; stacksize int32 }()
type..hash.struct { F uintptr; newg *runtime.g; stacksize int32 }_entry:
	// succ:  l0000000000079900
l0000000000079900:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079900_ds_t
	// succ:  l0000000000079900_ds_f l0000000000079900_ds_t
l0000000000079900_ds_f:
	goto l0000000000079910
	// succ:  l0000000000079910
l0000000000079900_ds_t:
	goto l0000000000079924
	// succ:  l0000000000079924
l0000000000079910:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079900
	// succ:  l0000000000079900
l0000000000079924:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.struct { F uintptr; newg *runtime.g; stacksize int32 }_exit
type..hash.struct { F uintptr; newg *runtime.g; stacksize int32 }_exit:


// type..eq.struct { F uintptr; newg *runtime.g; stacksize int32 }
// Return size: 0
void type..eq.struct { F uintptr; newg *runtime.g; stacksize int32 }()
type..eq.struct { F uintptr; newg *runtime.g; stacksize int32 }_entry:
	// succ:  l0000000000079968
l0000000000079968:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079968_ds_t
	// succ:  l0000000000079968_ds_f l0000000000079968_ds_t
l0000000000079968_ds_f:
	goto l0000000000079978
	// succ:  l0000000000079978
l0000000000079968_ds_t:
	goto l000000000007998C
	// succ:  l000000000007998C
l0000000000079978:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079968
	// succ:  l0000000000079968
l000000000007998C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.struct { F uintptr; newg *runtime.g; stacksize int32 }_exit
type..eq.struct { F uintptr; newg *runtime.g; stacksize int32 }_exit:


// type..hash.struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }
// Return size: 0
void type..hash.struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }()
type..hash.struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }_entry:
	// succ:  l00000000000799D8
l00000000000799D8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l00000000000799D8_ds_t
	// succ:  l00000000000799D8_ds_f l00000000000799D8_ds_t
l00000000000799D8_ds_f:
	goto l00000000000799E8
	// succ:  l00000000000799E8
l00000000000799D8_ds_t:
	goto l00000000000799FC
	// succ:  l00000000000799FC
l00000000000799E8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l00000000000799D8
	// succ:  l00000000000799D8
l00000000000799FC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }_exit
type..hash.struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }_exit:


// type..eq.struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }
// Return size: 0
void type..eq.struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }()
type..eq.struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }_entry:
	// succ:  l0000000000079AA8
l0000000000079AA8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079AA8_ds_t
	// succ:  l0000000000079AA8_ds_f l0000000000079AA8_ds_t
l0000000000079AA8_ds_f:
	goto l0000000000079AB8
	// succ:  l0000000000079AB8
l0000000000079AA8_ds_t:
	goto l0000000000079ACC
	// succ:  l0000000000079ACC
l0000000000079AB8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079AA8
	// succ:  l0000000000079AA8
l0000000000079ACC:
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r4:uint32]
	r2 = (word64) Mem0[r3:uint32]
type..eq.struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }_exit:


// type..hash.runtime.dbgVar
// Return size: 0
void type..hash.runtime.dbgVar()
type..hash.runtime.dbgVar_entry:
	// succ:  l0000000000079B58
l0000000000079B58:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079B58_ds_t
	// succ:  l0000000000079B58_ds_f l0000000000079B58_ds_t
l0000000000079B58_ds_f:
	goto l0000000000079B68
	// succ:  l0000000000079B68
l0000000000079B58_ds_t:
	goto l0000000000079B7C
	// succ:  l0000000000079B7C
l0000000000079B68:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079B58
	// succ:  l0000000000079B58
l0000000000079B7C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call runtime.strhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.dbgVar_exit
type..hash.runtime.dbgVar_exit:


// type..eq.runtime.dbgVar
// Return size: 0
void type..eq.runtime.dbgVar()
type..eq.runtime.dbgVar_entry:
	// succ:  l0000000000079BE8
l0000000000079BE8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079BE8_ds_t
	// succ:  l0000000000079BE8_ds_f l0000000000079BE8_ds_t
l0000000000079BE8_ds_f:
	goto l0000000000079BF8
	// succ:  l0000000000079BF8
l0000000000079BE8_ds_t:
	goto l0000000000079C0C
	// succ:  l0000000000079C0C
l0000000000079BF8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079BE8
	// succ:  l0000000000079BE8
l0000000000079C0C:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000058:word64]
	r6 = Mem0[r1:word64]
	r4 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r5 = Mem0[r1:word64]
	r3 = Mem0[r1 + 0x0000000000000008:word64]
	r1 = r4
	branch r4 != r3 l0000000000079C0C_ds_t
	// succ:  l0000000000079C0C_ds_f l0000000000079C0C_ds_t
l0000000000079C0C_ds_f:
	goto l0000000000079C3C
	// succ:  l0000000000079C3C
l0000000000079C0C_ds_t:
	goto l0000000000079CA4
	// succ:  l0000000000079CA4
l0000000000079C3C:
	Mem0[sp + 0x0000000000000040:word64] = r6
	Mem0[sp + 0x0000000000000008:word64] = r6
	Mem0[sp + 0x0000000000000048:word64] = r4
	Mem0[sp + 0x0000000000000010:word64] = r4
	Mem0[sp + 0x0000000000000030:word64] = r5
	Mem0[sp + 0x0000000000000018:word64] = r5
	r2 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.eqstring (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 == 0x0000000000000000 l0000000000079C3C_ds_t
	// succ:  l0000000000079C3C_ds_f l0000000000079C3C_ds_t
l0000000000079C3C_ds_f:
	goto l0000000000079C74
	// succ:  l0000000000079C74
l0000000000079C3C_ds_t:
	goto l0000000000079CA4
	// succ:  l0000000000079CA4
l0000000000079C74:
	r1 = Mem0[sp + 0x0000000000000058:word64]
	r1 = Mem0[r1 + 0x0000000000000010:word64]
	r2 = Mem0[sp + 0x0000000000000060:word64]
	r2 = Mem0[r2 + 0x0000000000000010:word64]
	branch r1 != r2 l0000000000079C74_ds_t
	// succ:  l0000000000079C74_ds_f l0000000000079C74_ds_t
l0000000000079C74_ds_f:
	goto l0000000000079C8C
	// succ:  l0000000000079C8C
l0000000000079C74_ds_t:
	goto l0000000000079CA4
	// succ:  l0000000000079CA4
l0000000000079C8C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000068:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.dbgVar_exit
l0000000000079CA4:
	Mem0[sp + 0x0000000000000068:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.dbgVar_exit
type..eq.runtime.dbgVar_exit:


// type..hash.runtime.semaRoot
// Return size: 0
void type..hash.runtime.semaRoot()
type..hash.runtime.semaRoot_entry:
	// succ:  l0000000000079CB8
l0000000000079CB8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079CB8_ds_t
	// succ:  l0000000000079CB8_ds_f l0000000000079CB8_ds_t
l0000000000079CB8_ds_f:
	goto l0000000000079CC8
	// succ:  l0000000000079CC8
l0000000000079CB8_ds_t:
	goto l0000000000079CDC
	// succ:  l0000000000079CDC
l0000000000079CC8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079CB8
	// succ:  l0000000000079CB8
l0000000000079CDC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.semaRoot_exit
type..hash.runtime.semaRoot_exit:


// type..eq.runtime.semaRoot
// Return size: 0
void type..eq.runtime.semaRoot()
type..eq.runtime.semaRoot_entry:
	// succ:  l0000000000079D20
l0000000000079D20:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079D20_ds_t
	// succ:  l0000000000079D20_ds_f l0000000000079D20_ds_t
l0000000000079D20_ds_f:
	goto l0000000000079D30
	// succ:  l0000000000079D30
l0000000000079D20_ds_t:
	goto l0000000000079D44
	// succ:  l0000000000079D44
l0000000000079D30:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079D20
	// succ:  l0000000000079D20
l0000000000079D44:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.semaRoot_exit
type..eq.runtime.semaRoot_exit:


// type..hash.runtime.sigTabT
// Return size: 0
void type..hash.runtime.sigTabT()
type..hash.runtime.sigTabT_entry:
	// succ:  l0000000000079D90
l0000000000079D90:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079D90_ds_t
	// succ:  l0000000000079D90_ds_f l0000000000079D90_ds_t
l0000000000079D90_ds_f:
	goto l0000000000079DA0
	// succ:  l0000000000079DA0
l0000000000079D90_ds_t:
	goto l0000000000079DB4
	// succ:  l0000000000079DB4
l0000000000079DA0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079D90
	// succ:  l0000000000079D90
l0000000000079DB4:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.strhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000018:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.sigTabT_exit
type..hash.runtime.sigTabT_exit:


// type..eq.runtime.sigTabT
// Return size: 0
void type..eq.runtime.sigTabT()
type..eq.runtime.sigTabT_entry:
	// succ:  l0000000000079E28
l0000000000079E28:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079E28_ds_t
	// succ:  l0000000000079E28_ds_f l0000000000079E28_ds_t
l0000000000079E28_ds_f:
	goto l0000000000079E38
	// succ:  l0000000000079E38
l0000000000079E28_ds_t:
	goto l0000000000079E4C
	// succ:  l0000000000079E4C
l0000000000079E38:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079E28
	// succ:  l0000000000079E28
l0000000000079E4C:
	sp = sp + -80
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000058:word64]
	r3 = Mem0[sp + 0x0000000000000060:word64]
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r4:int32]
	r2 = (word64) Mem0[r3:int32]
	r1 = r1
	r2 = r2
	branch r1 != r2 l0000000000079E4C_ds_t
	// succ:  l0000000000079E4C_ds_f l0000000000079E4C_ds_t
l0000000000079E4C_ds_f:
	goto l0000000000079E78
	// succ:  l0000000000079E78
l0000000000079E4C_ds_t:
	goto l0000000000079EE4
	// succ:  l0000000000079EE4
l0000000000079E78:
	r6 = Mem0[r4 + 0x0000000000000008:word64]
	r4 = Mem0[r4 + 0x0000000000000010:word64]
	r5 = Mem0[r3 + 0x0000000000000008:word64]
	r3 = Mem0[r3 + 0x0000000000000010:word64]
	r1 = r4
	branch r4 != r3 l0000000000079E78_ds_t
	// succ:  l0000000000079E78_ds_f l0000000000079E78_ds_t
l0000000000079E78_ds_f:
	goto l0000000000079E94
	// succ:  l0000000000079E94
l0000000000079E78_ds_t:
	goto l0000000000079EE4
	// succ:  l0000000000079EE4
l0000000000079E94:
	Mem0[sp + 0x0000000000000040:word64] = r6
	Mem0[sp + 0x0000000000000008:word64] = r6
	Mem0[sp + 0x0000000000000048:word64] = r4
	Mem0[sp + 0x0000000000000010:word64] = r4
	Mem0[sp + 0x0000000000000030:word64] = r5
	Mem0[sp + 0x0000000000000018:word64] = r5
	r2 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000020:word64] = r3
	call runtime.eqstring (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000028:byte]
	branch r1 == 0x0000000000000000 l0000000000079E94_ds_t
	// succ:  l0000000000079E94_ds_f l0000000000079E94_ds_t
l0000000000079E94_ds_f:
	goto l0000000000079ECC
	// succ:  l0000000000079ECC
l0000000000079E94_ds_t:
	goto l0000000000079EE4
	// succ:  l0000000000079EE4
l0000000000079ECC:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000068:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.sigTabT_exit
l0000000000079EE4:
	Mem0[sp + 0x0000000000000068:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 80
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.sigTabT_exit
type..eq.runtime.sigTabT_exit:


// type..hash.[2]string
// Return size: 0
void type..hash.[2]string()
type..hash.[2]string_entry:
	// succ:  l0000000000079EF8
l0000000000079EF8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079EF8_ds_t
	// succ:  l0000000000079EF8_ds_f l0000000000079EF8_ds_t
l0000000000079EF8_ds_f:
	goto l0000000000079F08
	// succ:  l0000000000079F08
l0000000000079EF8_ds_t:
	goto l0000000000079F1C
	// succ:  l0000000000079F1C
l0000000000079F08:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079EF8
	// succ:  l0000000000079EF8
l0000000000079F1C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l0000000000079F1C_ds_t
	// succ:  l0000000000079F1C_ds_f l0000000000079F1C_ds_t
l0000000000079F1C_ds_f:
	goto l0000000000079F44
	// succ:  l0000000000079F44
l0000000000079F1C_ds_t:
	goto l0000000000079F8C
	// succ:  l0000000000079F8C
l0000000000079F44:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r1 = Mem0[sp + 0x0000000000000038:word64]
l0000000000079F8C:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.[2]string_exit
type..hash.[2]string_exit:


// type..eq.[2]string
// Return size: 0
void type..eq.[2]string()
type..eq.[2]string_entry:
	// succ:  l0000000000079FA0
l0000000000079FA0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l0000000000079FA0_ds_t
	// succ:  l0000000000079FA0_ds_f l0000000000079FA0_ds_t
l0000000000079FA0_ds_f:
	goto l0000000000079FB0
	// succ:  l0000000000079FB0
l0000000000079FA0_ds_t:
	goto l0000000000079FC4
	// succ:  l0000000000079FC4
l0000000000079FB0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l0000000000079FA0
	// succ:  l0000000000079FA0
l0000000000079FC4:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r3 = 0x0000000000000000
type..eq.[2]string_exit:


// type..hash.[4]string
// Return size: 0
void type..hash.[4]string()
type..hash.[4]string_entry:
	// succ:  l000000000007A0B0
l000000000007A0B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007A0B0_ds_t
	// succ:  l000000000007A0B0_ds_f l000000000007A0B0_ds_t
l000000000007A0B0_ds_f:
	goto l000000000007A0C0
	// succ:  l000000000007A0C0
l000000000007A0B0_ds_t:
	goto l000000000007A0D4
	// succ:  l000000000007A0D4
l000000000007A0C0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007A0B0
	// succ:  l000000000007A0B0
l000000000007A0D4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l000000000007A0D4_ds_t
	// succ:  l000000000007A0D4_ds_f l000000000007A0D4_ds_t
l000000000007A0D4_ds_f:
	goto l000000000007A0FC
	// succ:  l000000000007A0FC
l000000000007A0D4_ds_t:
	goto l000000000007A144
	// succ:  l000000000007A144
l000000000007A0FC:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r1 = Mem0[sp + 0x0000000000000038:word64]
l000000000007A144:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.[4]string_exit
type..hash.[4]string_exit:


// type..eq.[4]string
// Return size: 0
void type..eq.[4]string()
type..eq.[4]string_entry:
	// succ:  l000000000007A158
l000000000007A158:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007A158_ds_t
	// succ:  l000000000007A158_ds_f l000000000007A158_ds_t
l000000000007A158_ds_f:
	goto l000000000007A168
	// succ:  l000000000007A168
l000000000007A158_ds_t:
	goto l000000000007A17C
	// succ:  l000000000007A17C
l000000000007A168:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007A158
	// succ:  l000000000007A158
l000000000007A17C:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r3 = 0x0000000000000000
type..eq.[4]string_exit:


// type..hash.runtime.traceStack
// Return size: 0
void type..hash.runtime.traceStack()
type..hash.runtime.traceStack_entry:
	// succ:  l000000000007A268
l000000000007A268:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007A268_ds_t
	// succ:  l000000000007A268_ds_f l000000000007A268_ds_t
l000000000007A268_ds_f:
	goto l000000000007A278
	// succ:  l000000000007A278
l000000000007A268_ds_t:
	goto l000000000007A28C
	// succ:  l000000000007A28C
l000000000007A278:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007A268
	// succ:  l000000000007A268
l000000000007A28C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.traceStack_exit
type..hash.runtime.traceStack_exit:


// type..eq.runtime.traceStack
// Return size: 0
void type..eq.runtime.traceStack()
type..eq.runtime.traceStack_entry:
	// succ:  l000000000007A300
l000000000007A300:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007A300_ds_t
	// succ:  l000000000007A300_ds_f l000000000007A300_ds_t
l000000000007A300_ds_f:
	goto l000000000007A310
	// succ:  l000000000007A310
l000000000007A300_ds_t:
	goto l000000000007A324
	// succ:  l000000000007A324
l000000000007A310:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007A300
	// succ:  l000000000007A300
l000000000007A324:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000007A324_ds_t
	// succ:  l000000000007A324_ds_f l000000000007A324_ds_t
l000000000007A324_ds_f:
	goto l000000000007A36C
	// succ:  l000000000007A36C
l000000000007A324_ds_t:
	goto l000000000007A3CC
	// succ:  l000000000007A3CC
l000000000007A36C:
	r1 = Mem0[r4 + 0x0000000000000018:word64]
	r2 = Mem0[r3 + 0x0000000000000018:word64]
	branch r1 != r2 l000000000007A36C_ds_t
	// succ:  l000000000007A36C_ds_f l000000000007A36C_ds_t
l000000000007A36C_ds_f:
	goto l000000000007A37C
	// succ:  l000000000007A37C
l000000000007A36C_ds_t:
	goto l000000000007A3CC
	// succ:  l000000000007A3CC
l000000000007A37C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l000000000007A384
	// succ:  l000000000007A384
l000000000007A37C_ds_f:
	goto l000000000007A390
	// succ:  l000000000007A390
l000000000007A37C_ds_t:
	goto l000000000007A3B8
	// succ:  l000000000007A3B8
l000000000007A384:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000007A37C_ds_t
	goto l000000000007A37C_ds_f
	// succ:  l000000000007A37C_ds_f l000000000007A37C_ds_t
l000000000007A390:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.traceStack_exit
l000000000007A3B8:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.traceStack_exit
l000000000007A3CC:
	r2 = 0x0000000000000000
	goto l000000000007A384
	// succ:  l000000000007A384
type..eq.runtime.traceStack_exit:


// type..hash.runtime.traceStackTable
// Return size: 0
void type..hash.runtime.traceStackTable()
type..hash.runtime.traceStackTable_entry:
	// succ:  l000000000007A3D8
l000000000007A3D8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007A3D8_ds_t
	// succ:  l000000000007A3D8_ds_f l000000000007A3D8_ds_t
l000000000007A3D8_ds_f:
	goto l000000000007A3E8
	// succ:  l000000000007A3E8
l000000000007A3D8_ds_t:
	goto l000000000007A3FC
	// succ:  l000000000007A3FC
l000000000007A3E8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007A3D8
	// succ:  l000000000007A3D8
l000000000007A3FC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = 0x0000000000010000
	r1 = r1 | 0x0000000000000010
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.traceStackTable_exit
type..hash.runtime.traceStackTable_exit:


// type..eq.runtime.traceStackTable
// Return size: 0
void type..eq.runtime.traceStackTable()
type..eq.runtime.traceStackTable_entry:
	// succ:  l000000000007A478
l000000000007A478:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007A478_ds_t
	// succ:  l000000000007A478_ds_f l000000000007A478_ds_t
l000000000007A478_ds_f:
	goto l000000000007A488
	// succ:  l000000000007A488
l000000000007A478_ds_t:
	goto l000000000007A49C
	// succ:  l000000000007A49C
l000000000007A488:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007A478
	// succ:  l000000000007A478
l000000000007A49C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r6 = Mem0[sp + 0x0000000000000030:word64]
	r5 = Mem0[sp + 0x0000000000000038:word64]
	r1 = 0x0000000000000000
	r1 = Mem0[r6:word64]
	r2 = Mem0[r5:word64]
	branch r1 != r2 l000000000007A49C_ds_t
	// succ:  l000000000007A49C_ds_f l000000000007A49C_ds_t
l000000000007A49C_ds_f:
	goto l000000000007A4C0
	// succ:  l000000000007A4C0
l000000000007A49C_ds_t:
	goto l000000000007A594
	// succ:  l000000000007A594
l000000000007A4C0:
	r1 = (word64) Mem0[r6 + 0x0000000000000008:uint32]
	r2 = (word64) Mem0[r5 + 0x0000000000000008:uint32]
l000000000007A520:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000007A520_ds_t
	// succ:  l000000000007A520_ds_f l000000000007A520_ds_t
l000000000007A520_ds_f:
	goto l000000000007A52C
	// succ:  l000000000007A52C
l000000000007A520_ds_t:
	goto l000000000007A580
	// succ:  l000000000007A580
l000000000007A52C:
l000000000007A580:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.traceStackTable_exit
l000000000007A594:
	r2 = 0x0000000000000000
	goto l000000000007A520
	// succ:  l000000000007A520
type..eq.runtime.traceStackTable_exit:


// type..hash.[33]float64
// Return size: 0
void type..hash.[33]float64()
type..hash.[33]float64_entry:
	// succ:  l000000000007A5A0
l000000000007A5A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007A5A0_ds_t
	// succ:  l000000000007A5A0_ds_f l000000000007A5A0_ds_t
l000000000007A5A0_ds_f:
	goto l000000000007A5B0
	// succ:  l000000000007A5B0
l000000000007A5A0_ds_t:
	goto l000000000007A5C4
	// succ:  l000000000007A5C4
l000000000007A5B0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007A5A0
	// succ:  l000000000007A5A0
l000000000007A5C4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l000000000007A5C4_ds_t
	// succ:  l000000000007A5C4_ds_f l000000000007A5C4_ds_t
l000000000007A5C4_ds_f:
	goto l000000000007A5EC
	// succ:  l000000000007A5EC
l000000000007A5C4_ds_t:
	goto l000000000007A634
	// succ:  l000000000007A634
l000000000007A5EC:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r1 = Mem0[sp + 0x0000000000000038:word64]
l000000000007A634:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.[33]float64_exit
type..hash.[33]float64_exit:


// type..eq.[33]float64
// Return size: 0
void type..eq.[33]float64()
type..eq.[33]float64_entry:
	// succ:  l000000000007A648
l000000000007A648:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007A648_ds_t
	// succ:  l000000000007A648_ds_f l000000000007A648_ds_t
l000000000007A648_ds_f:
	goto l000000000007A658
	// succ:  l000000000007A658
l000000000007A648_ds_t:
	goto l000000000007A66C
	// succ:  l000000000007A66C
l000000000007A658:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007A648
	// succ:  l000000000007A648
l000000000007A66C:
	r7 = Mem0[sp + 0x0000000000000008:word64]
	r6 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r3 = 0x0000000000000000
	lo = r5 / 0x0000000000000000
	hi = r5 % 0x0000000000000000
	r23 = (word64) (r3 < r5)
	branch r23 == 0x0000000000000000 l000000000007A66C_ds_t
	// succ:  l000000000007A66C_ds_f l000000000007A66C_ds_t
l000000000007A66C_ds_f:
	goto l000000000007A68C
	// succ:  l000000000007A68C
l000000000007A66C_ds_t:
	goto l000000000007A6C8
	// succ:  l000000000007A6C8
l000000000007A68C:
l000000000007A6C8:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  type..eq.[33]float64_exit
type..eq.[33]float64_exit:


// type..hash.struct { enabled bool; needed bool; cgo bool; alignme uint64 }
// Return size: 0
void type..hash.struct { enabled bool; needed bool; cgo bool; alignme uint64 }()
type..hash.struct { enabled bool; needed bool; cgo bool; alignme uint64 }_entry:
	// succ:  l000000000007A6F0
l000000000007A6F0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007A6F0_ds_t
	// succ:  l000000000007A6F0_ds_f l000000000007A6F0_ds_t
l000000000007A6F0_ds_f:
	goto l000000000007A700
	// succ:  l000000000007A700
l000000000007A6F0_ds_t:
	goto l000000000007A714
	// succ:  l000000000007A714
l000000000007A700:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007A6F0
	// succ:  l000000000007A6F0
l000000000007A714:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.struct { enabled bool; needed bool; cgo bool; alignme uint64 }_exit
type..hash.struct { enabled bool; needed bool; cgo bool; alignme uint64 }_exit:


// type..eq.struct { enabled bool; needed bool; cgo bool; alignme uint64 }
// Return size: 0
void type..eq.struct { enabled bool; needed bool; cgo bool; alignme uint64 }()
type..eq.struct { enabled bool; needed bool; cgo bool; alignme uint64 }_entry:
	// succ:  l000000000007A788
l000000000007A788:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007A788_ds_t
	// succ:  l000000000007A788_ds_f l000000000007A788_ds_t
l000000000007A788_ds_f:
	goto l000000000007A798
	// succ:  l000000000007A798
l000000000007A788_ds_t:
	goto l000000000007A7AC
	// succ:  l000000000007A7AC
l000000000007A798:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007A788
	// succ:  l000000000007A788
l000000000007A7AC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000007A7AC_ds_t
	// succ:  l000000000007A7AC_ds_f l000000000007A7AC_ds_t
l000000000007A7AC_ds_f:
	goto l000000000007A7EC
	// succ:  l000000000007A7EC
l000000000007A7AC_ds_t:
	goto l000000000007A81C
	// succ:  l000000000007A81C
l000000000007A7EC:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	r1 = Mem0[r1 + 0x0000000000000008:word64]
	r2 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[r2 + 0x0000000000000008:word64]
	branch r1 != r2 l000000000007A7EC_ds_t
	// succ:  l000000000007A7EC_ds_f l000000000007A7EC_ds_t
l000000000007A7EC_ds_f:
	goto l000000000007A804
	// succ:  l000000000007A804
l000000000007A7EC_ds_t:
	goto l000000000007A81C
	// succ:  l000000000007A81C
l000000000007A804:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.struct { enabled bool; needed bool; cgo bool; alignme uint64 }_exit
l000000000007A81C:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.struct { enabled bool; needed bool; cgo bool; alignme uint64 }_exit
type..eq.struct { enabled bool; needed bool; cgo bool; alignme uint64 }_exit:


// type..hash.runtime.sweepdata
// Return size: 0
void type..hash.runtime.sweepdata()
type..hash.runtime.sweepdata_entry:
	// succ:  l000000000007A830
l000000000007A830:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007A830_ds_t
	// succ:  l000000000007A830_ds_f l000000000007A830_ds_t
l000000000007A830_ds_f:
	goto l000000000007A840
	// succ:  l000000000007A840
l000000000007A830_ds_t:
	goto l000000000007A854
	// succ:  l000000000007A854
l000000000007A840:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007A830
	// succ:  l000000000007A830
l000000000007A854:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.sweepdata_exit
type..hash.runtime.sweepdata_exit:


// type..eq.runtime.sweepdata
// Return size: 0
void type..eq.runtime.sweepdata()
type..eq.runtime.sweepdata_entry:
	// succ:  l000000000007A8C8
l000000000007A8C8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007A8C8_ds_t
	// succ:  l000000000007A8C8_ds_f l000000000007A8C8_ds_t
l000000000007A8C8_ds_f:
	goto l000000000007A8D8
	// succ:  l000000000007A8D8
l000000000007A8C8_ds_t:
	goto l000000000007A8EC
	// succ:  l000000000007A8EC
l000000000007A8D8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007A8C8
	// succ:  l000000000007A8C8
l000000000007A8EC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000007A8EC_ds_t
	// succ:  l000000000007A8EC_ds_f l000000000007A8EC_ds_t
l000000000007A8EC_ds_f:
	goto l000000000007A92C
	// succ:  l000000000007A92C
l000000000007A8EC_ds_t:
	goto l000000000007A998
	// succ:  l000000000007A998
l000000000007A92C:
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000007A92C_ds_t
	// succ:  l000000000007A92C_ds_f l000000000007A92C_ds_t
l000000000007A92C_ds_f:
	goto l000000000007A980
	// succ:  l000000000007A980
l000000000007A92C_ds_t:
	goto l000000000007A998
	// succ:  l000000000007A998
l000000000007A980:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.sweepdata_exit
l000000000007A998:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.sweepdata_exit
type..eq.runtime.sweepdata_exit:


// type..hash.[67]runtime.divMagic
// Return size: 0
void type..hash.[67]runtime.divMagic()
type..hash.[67]runtime.divMagic_entry:
	// succ:  l000000000007A9B0
l000000000007A9B0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007A9B0_ds_t
	// succ:  l000000000007A9B0_ds_f l000000000007A9B0_ds_t
l000000000007A9B0_ds_f:
	goto l000000000007A9C0
	// succ:  l000000000007A9C0
l000000000007A9B0_ds_t:
	goto l000000000007A9D4
	// succ:  l000000000007A9D4
l000000000007A9C0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007A9B0
	// succ:  l000000000007A9B0
l000000000007A9D4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l000000000007A9D4_ds_t
	// succ:  l000000000007A9D4_ds_f l000000000007A9D4_ds_t
l000000000007A9D4_ds_f:
	goto l000000000007A9FC
	// succ:  l000000000007A9FC
l000000000007A9D4_ds_t:
	goto l000000000007AA50
	// succ:  l000000000007AA50
l000000000007A9FC:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = r3
l000000000007AA50:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.[67]runtime.divMagic_exit
type..hash.[67]runtime.divMagic_exit:


// type..eq.[67]runtime.divMagic
// Return size: 0
void type..eq.[67]runtime.divMagic()
type..eq.[67]runtime.divMagic_entry:
	// succ:  l000000000007AA68
l000000000007AA68:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007AA68_ds_t
	// succ:  l000000000007AA68_ds_f l000000000007AA68_ds_t
l000000000007AA68_ds_f:
	goto l000000000007AA78
	// succ:  l000000000007AA78
l000000000007AA68_ds_t:
	goto l000000000007AA8C
	// succ:  l000000000007AA8C
l000000000007AA78:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007AA68
	// succ:  l000000000007AA68
l000000000007AA8C:
	r9 = Mem0[sp + 0x0000000000000008:word64]
	r8 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r5 = 0x0000000000000000
	lo = r7 / 0x0000000000000000
	hi = r7 % 0x0000000000000000
	r23 = (word64) (r5 < r7)
	branch r23 == 0x0000000000000000 l000000000007AA8C_ds_t
	// succ:  l000000000007AA8C_ds_f l000000000007AA8C_ds_t
l000000000007AA8C_ds_f:
	goto l000000000007AAAC
	// succ:  l000000000007AAAC
l000000000007AA8C_ds_t:
	goto l000000000007AB4C
	// succ:  l000000000007AB4C
l000000000007AAAC:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
l000000000007AB4C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  type..eq.[67]runtime.divMagic_exit
type..eq.[67]runtime.divMagic_exit:


// type..hash.struct { size uint32; nmalloc uint64; nfree uint64 }
// Return size: 0
void type..hash.struct { size uint32; nmalloc uint64; nfree uint64 }()
type..hash.struct { size uint32; nmalloc uint64; nfree uint64 }_entry:
	// succ:  l000000000007AB70
l000000000007AB70:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007AB70_ds_t
	// succ:  l000000000007AB70_ds_f l000000000007AB70_ds_t
l000000000007AB70_ds_f:
	goto l000000000007AB80
	// succ:  l000000000007AB80
l000000000007AB70_ds_t:
	goto l000000000007AB94
	// succ:  l000000000007AB94
l000000000007AB80:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007AB70
	// succ:  l000000000007AB70
l000000000007AB94:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.struct { size uint32; nmalloc uint64; nfree uint64 }_exit
type..hash.struct { size uint32; nmalloc uint64; nfree uint64 }_exit:


// type..eq.struct { size uint32; nmalloc uint64; nfree uint64 }
// Return size: 0
void type..eq.struct { size uint32; nmalloc uint64; nfree uint64 }()
type..eq.struct { size uint32; nmalloc uint64; nfree uint64 }_entry:
	// succ:  l000000000007AC08
l000000000007AC08:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007AC08_ds_t
	// succ:  l000000000007AC08_ds_f l000000000007AC08_ds_t
l000000000007AC08_ds_f:
	goto l000000000007AC18
	// succ:  l000000000007AC18
l000000000007AC08_ds_t:
	goto l000000000007AC2C
	// succ:  l000000000007AC2C
l000000000007AC18:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007AC08
	// succ:  l000000000007AC08
l000000000007AC2C:
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r1 = (word64) Mem0[r4:uint32]
	r2 = (word64) Mem0[r3:uint32]
type..eq.struct { size uint32; nmalloc uint64; nfree uint64 }_exit:


// type..hash.[67]struct { size uint32; nmalloc uint64; nfree uint64 }
// Return size: 0
void type..hash.[67]struct { size uint32; nmalloc uint64; nfree uint64 }()
type..hash.[67]struct { size uint32; nmalloc uint64; nfree uint64 }_entry:
	// succ:  l000000000007AC98
l000000000007AC98:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007AC98_ds_t
	// succ:  l000000000007AC98_ds_f l000000000007AC98_ds_t
l000000000007AC98_ds_f:
	goto l000000000007ACA8
	// succ:  l000000000007ACA8
l000000000007AC98_ds_t:
	goto l000000000007ACBC
	// succ:  l000000000007ACBC
l000000000007ACA8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007AC98
	// succ:  l000000000007AC98
l000000000007ACBC:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l000000000007ACBC_ds_t
	// succ:  l000000000007ACBC_ds_f l000000000007ACBC_ds_t
l000000000007ACBC_ds_f:
	goto l000000000007ACE4
	// succ:  l000000000007ACE4
l000000000007ACBC_ds_t:
	goto l000000000007AD38
	// succ:  l000000000007AD38
l000000000007ACE4:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = r3
l000000000007AD38:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.[67]struct { size uint32; nmalloc uint64; nfree uint64 }_exit
type..hash.[67]struct { size uint32; nmalloc uint64; nfree uint64 }_exit:


// type..eq.[67]struct { size uint32; nmalloc uint64; nfree uint64 }
// Return size: 0
void type..eq.[67]struct { size uint32; nmalloc uint64; nfree uint64 }()
type..eq.[67]struct { size uint32; nmalloc uint64; nfree uint64 }_entry:
	// succ:  l000000000007AD50
l000000000007AD50:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007AD50_ds_t
	// succ:  l000000000007AD50_ds_f l000000000007AD50_ds_t
l000000000007AD50_ds_f:
	goto l000000000007AD60
	// succ:  l000000000007AD60
l000000000007AD50_ds_t:
	goto l000000000007AD74
	// succ:  l000000000007AD74
l000000000007AD60:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007AD50
	// succ:  l000000000007AD50
l000000000007AD74:
	r9 = Mem0[sp + 0x0000000000000008:word64]
	r8 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r4 = 0x0000000000000000
	lo = r7 / 0x0000000000000000
	hi = r7 % 0x0000000000000000
	r23 = (word64) (r4 < r7)
	branch r23 == 0x0000000000000000 l000000000007AD74_ds_t
	// succ:  l000000000007AD74_ds_f l000000000007AD74_ds_t
l000000000007AD74_ds_f:
	goto l000000000007AD94
	// succ:  l000000000007AD94
l000000000007AD74_ds_t:
	goto l000000000007AE14
	// succ:  l000000000007AE14
l000000000007AD94:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
l000000000007AE14:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  type..eq.[67]struct { size uint32; nmalloc uint64; nfree uint64 }_exit
type..eq.[67]struct { size uint32; nmalloc uint64; nfree uint64 }_exit:


// type..hash.runtime.mstats
// Return size: 0
void type..hash.runtime.mstats()
type..hash.runtime.mstats_entry:
	// succ:  l000000000007AE38
l000000000007AE38:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007AE38_ds_t
	// succ:  l000000000007AE38_ds_f l000000000007AE38_ds_t
l000000000007AE38_ds_f:
	goto l000000000007AE48
	// succ:  l000000000007AE48
l000000000007AE38_ds_t:
	goto l000000000007AE5C
	// succ:  l000000000007AE5C
l000000000007AE48:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007AE38
	// succ:  l000000000007AE38
l000000000007AE5C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call runtime.f64hash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000020:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = r3
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	call type..hash.[67]struct { size uint32; nmalloc uint64; nfree uint64 } (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.mstats_exit
type..hash.runtime.mstats_exit:


// type..eq.runtime.mstats
// Return size: 0
void type..eq.runtime.mstats()
type..eq.runtime.mstats_entry:
	// succ:  l000000000007AF68
l000000000007AF68:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007AF68_ds_t
	// succ:  l000000000007AF68_ds_f l000000000007AF68_ds_t
l000000000007AF68_ds_f:
	goto l000000000007AF78
	// succ:  l000000000007AF78
l000000000007AF68_ds_t:
	goto l000000000007AF8C
	// succ:  l000000000007AF8C
l000000000007AF78:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007AF68
	// succ:  l000000000007AF68
l000000000007AF8C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000007AF8C_ds_t
	// succ:  l000000000007AF8C_ds_f l000000000007AF8C_ds_t
l000000000007AF8C_ds_f:
	goto l000000000007AFD4
	// succ:  l000000000007AFD4
l000000000007AF8C_ds_t:
	goto l000000000007AFE8
	// succ:  l000000000007AFE8
l000000000007AFD4:
	f0 = Mem0[r4 + 0x00000000000010C8:word64]
	f1 = Mem0[r3 + 0x00000000000010C8:word64]
l000000000007AFE8:
	r2 = 0x0000000000000000
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000007AFE8_ds_t
	// succ:  l000000000007AFE8_ds_f l000000000007AFE8_ds_t
l000000000007AFE8_ds_f:
	goto l000000000007AFF8
	// succ:  l000000000007AFF8
l000000000007AFE8_ds_t:
	goto l000000000007B134
	// succ:  l000000000007B134
l000000000007AFF8:
	r1 = (word64) Mem0[r4 + 0x00000000000010D0:byte]
	r2 = (word64) Mem0[r3 + 0x00000000000010D0:byte]
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000007AFF8_ds_t
	// succ:  l000000000007AFF8_ds_f l000000000007AFF8_ds_t
l000000000007AFF8_ds_f:
	goto l000000000007B010
	// succ:  l000000000007B010
l000000000007AFF8_ds_t:
	goto l000000000007B134
	// succ:  l000000000007B134
l000000000007B010:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l000000000007B018
	// succ:  l000000000007B018
l000000000007B010_ds_f:
	goto l000000000007B024
	// succ:  l000000000007B024
l000000000007B010_ds_t:
	goto l000000000007B128
	// succ:  l000000000007B128
l000000000007B018:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000007B010_ds_t
	goto l000000000007B010_ds_f
	// succ:  l000000000007B010_ds_f l000000000007B010_ds_t
l000000000007B024:
	r1 = (word64) Mem0[r4 + 0x00000000000010D1:byte]
	r2 = (word64) Mem0[r3 + 0x00000000000010D1:byte]
	r1 = r1 + 0x00000000000000FF
	r2 = r2 + 0x00000000000000FF
	branch r1 != r2 l000000000007B024_ds_t
	// succ:  l000000000007B024_ds_f l000000000007B024_ds_t
l000000000007B024_ds_f:
	goto l000000000007B03C
	// succ:  l000000000007B03C
l000000000007B024_ds_t:
	goto l000000000007B128
	// succ:  l000000000007B128
l000000000007B03C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l000000000007B044
	// succ:  l000000000007B044
l000000000007B03C_ds_f:
	goto l000000000007B050
	// succ:  l000000000007B050
l000000000007B03C_ds_t:
	goto l000000000007B11C
	// succ:  l000000000007B11C
l000000000007B044:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000007B03C_ds_t
	goto l000000000007B03C_ds_f
	// succ:  l000000000007B03C_ds_f l000000000007B03C_ds_t
l000000000007B050:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r4
	hi = r1 % r4
	r4 = r1
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r3
	hi = r1 % r3
	r3 = r1
	Mem0[sp + 0x0000000000000008:word64] = r4
	r2 = r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	call type..eq.[67]struct { size uint32; nmalloc uint64; nfree uint64 } (retsize: 0;)
	r4 = Mem0[sp + 0x0000000000000030:word64]
	r3 = Mem0[sp + 0x0000000000000038:word64]
	r1 = (word64) Mem0[sp + 0x0000000000000018:byte]
	branch r1 == 0x0000000000000000 l000000000007B050_ds_t
	// succ:  l000000000007B050_ds_f l000000000007B050_ds_t
l000000000007B050_ds_f:
	goto l000000000007B090
	// succ:  l000000000007B090
l000000000007B050_ds_t:
	goto l000000000007B11C
	// succ:  l000000000007B11C
l000000000007B090:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r2 = r1 + 0x00000000000000FF
	goto l000000000007B098
	// succ:  l000000000007B098
l000000000007B090_ds_f:
	goto l000000000007B0A4
	// succ:  l000000000007B0A4
l000000000007B090_ds_t:
	goto l000000000007B108
	// succ:  l000000000007B108
l000000000007B098:
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000007B090_ds_t
	goto l000000000007B090_ds_f
	// succ:  l000000000007B090_ds_f l000000000007B090_ds_t
l000000000007B0A4:
	Mem0[sp + 0x0000000000000008:word64] = r4
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	branch r1 == 0x0000000000000000 l000000000007B0A4_ds_t
	// succ:  l000000000007B0A4_ds_f l000000000007B0A4_ds_t
l000000000007B0A4_ds_f:
	goto l000000000007B0F0
	// succ:  l000000000007B0F0
l000000000007B0A4_ds_t:
	goto l000000000007B108
	// succ:  l000000000007B108
l000000000007B0F0:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.mstats_exit
l000000000007B108:
	Mem0[sp + 0x0000000000000040:byte] = (byte) 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.mstats_exit
l000000000007B11C:
	r2 = 0x0000000000000000
	goto l000000000007B098
	// succ:  l000000000007B098
l000000000007B128:
	r2 = 0x0000000000000000
	goto l000000000007B044
	// succ:  l000000000007B044
l000000000007B134:
	r2 = 0x0000000000000000
	goto l000000000007B018
	// succ:  l000000000007B018
type..eq.runtime.mstats_exit:


// type..hash.[256]struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }
// Return size: 0
void type..hash.[256]struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }()
type..hash.[256]struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }_entry:
	// succ:  l000000000007B150
l000000000007B150:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007B150_ds_t
	// succ:  l000000000007B150_ds_f l000000000007B150_ds_t
l000000000007B150_ds_f:
	goto l000000000007B160
	// succ:  l000000000007B160
l000000000007B150_ds_t:
	goto l000000000007B174
	// succ:  l000000000007B174
l000000000007B160:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007B150
	// succ:  l000000000007B150
l000000000007B174:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l000000000007B174_ds_t
	// succ:  l000000000007B174_ds_f l000000000007B174_ds_t
l000000000007B174_ds_f:
	goto l000000000007B19C
	// succ:  l000000000007B19C
l000000000007B174_ds_t:
	goto l000000000007B1E4
	// succ:  l000000000007B1E4
l000000000007B19C:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r1 = Mem0[sp + 0x0000000000000038:word64]
l000000000007B1E4:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.[256]struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }_exit
type..hash.[256]struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }_exit:


// type..eq.[256]struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }
// Return size: 0
void type..eq.[256]struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }()
type..eq.[256]struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }_entry:
	// succ:  l000000000007B1F8
l000000000007B1F8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007B1F8_ds_t
	// succ:  l000000000007B1F8_ds_f l000000000007B1F8_ds_t
l000000000007B1F8_ds_f:
	goto l000000000007B208
	// succ:  l000000000007B208
l000000000007B1F8_ds_t:
	goto l000000000007B21C
	// succ:  l000000000007B21C
l000000000007B208:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007B1F8
	// succ:  l000000000007B1F8
l000000000007B21C:
	r8 = Mem0[sp + 0x0000000000000008:word64]
	r7 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r5 = 0x0000000000000000
	lo = r6 / 0x0000000000000000
	hi = r6 % 0x0000000000000000
	r23 = (word64) (r5 < r6)
	branch r23 == 0x0000000000000000 l000000000007B21C_ds_t
	// succ:  l000000000007B21C_ds_f l000000000007B21C_ds_t
l000000000007B21C_ds_f:
	goto l000000000007B23C
	// succ:  l000000000007B23C
l000000000007B21C_ds_t:
	goto l000000000007B2CC
	// succ:  l000000000007B2CC
l000000000007B23C:
l000000000007B2CC:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  type..eq.[256]struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }_exit
type..eq.[256]struct { schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64 }_exit:


// type..hash.runtime.forcegcstate
// Return size: 0
void type..hash.runtime.forcegcstate()
type..hash.runtime.forcegcstate_entry:
	// succ:  l000000000007B2F0
l000000000007B2F0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007B2F0_ds_t
	// succ:  l000000000007B2F0_ds_f l000000000007B2F0_ds_t
l000000000007B2F0_ds_f:
	goto l000000000007B300
	// succ:  l000000000007B300
l000000000007B2F0_ds_t:
	goto l000000000007B314
	// succ:  l000000000007B314
l000000000007B300:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007B2F0
	// succ:  l000000000007B2F0
l000000000007B314:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.runtime.forcegcstate_exit
type..hash.runtime.forcegcstate_exit:


// type..eq.runtime.forcegcstate
// Return size: 0
void type..eq.runtime.forcegcstate()
type..eq.runtime.forcegcstate_entry:
	// succ:  l000000000007B358
l000000000007B358:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007B358_ds_t
	// succ:  l000000000007B358_ds_f l000000000007B358_ds_t
l000000000007B358_ds_f:
	goto l000000000007B368
	// succ:  l000000000007B368
l000000000007B358_ds_t:
	goto l000000000007B37C
	// succ:  l000000000007B37C
l000000000007B368:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007B358
	// succ:  l000000000007B358
l000000000007B37C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.runtime.forcegcstate_exit
type..eq.runtime.forcegcstate_exit:


// type..hash.struct { root runtime.semaRoot; pad [0]uint8 }
// Return size: 0
void type..hash.struct { root runtime.semaRoot; pad [0]uint8 }()
type..hash.struct { root runtime.semaRoot; pad [0]uint8 }_entry:
	// succ:  l000000000007B3C8
l000000000007B3C8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007B3C8_ds_t
	// succ:  l000000000007B3C8_ds_f l000000000007B3C8_ds_t
l000000000007B3C8_ds_f:
	goto l000000000007B3D8
	// succ:  l000000000007B3D8
l000000000007B3C8_ds_t:
	goto l000000000007B3EC
	// succ:  l000000000007B3EC
l000000000007B3D8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007B3C8
	// succ:  l000000000007B3C8
l000000000007B3EC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	call type..hash.runtime.semaRoot (retsize: 0;)
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000008:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	lo = r1 / r1
	hi = r1 % r1
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000038:word64] = r3
	Mem0[sp + 0x0000000000000010:word64] = r3
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = 0x0000000000000000
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.struct { root runtime.semaRoot; pad [0]uint8 }_exit
type..hash.struct { root runtime.semaRoot; pad [0]uint8 }_exit:


// type..eq.struct { root runtime.semaRoot; pad [0]uint8 }
// Return size: 0
void type..eq.struct { root runtime.semaRoot; pad [0]uint8 }()
type..eq.struct { root runtime.semaRoot; pad [0]uint8 }_entry:
	// succ:  l000000000007B458
l000000000007B458:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007B458_ds_t
	// succ:  l000000000007B458_ds_f l000000000007B458_ds_t
l000000000007B458_ds_f:
	goto l000000000007B468
	// succ:  l000000000007B468
l000000000007B458_ds_t:
	goto l000000000007B47C
	// succ:  l000000000007B47C
l000000000007B468:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007B458
	// succ:  l000000000007B458
l000000000007B47C:
	r7 = Mem0[sp + 0x0000000000000008:word64]
	r6 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r1 = Mem0[r7:word64]
	r2 = Mem0[r6:word64]
	branch r1 != r2 l000000000007B47C_ds_t
	// succ:  l000000000007B47C_ds_f l000000000007B47C_ds_t
l000000000007B47C_ds_f:
	goto l000000000007B498
	// succ:  l000000000007B498
l000000000007B47C_ds_t:
	goto l000000000007B4F8
	// succ:  l000000000007B4F8
l000000000007B498:
	r1 = Mem0[r7 + 0x0000000000000008:word64]
	r2 = Mem0[r6 + 0x0000000000000008:word64]
	branch r1 != r2 l000000000007B498_ds_t
	// succ:  l000000000007B498_ds_f l000000000007B498_ds_t
l000000000007B498_ds_f:
	goto l000000000007B4A8
	// succ:  l000000000007B4A8
l000000000007B498_ds_t:
	goto l000000000007B4F8
	// succ:  l000000000007B4F8
l000000000007B4A8:
	r1 = Mem0[r7 + 0x0000000000000010:word64]
	r2 = Mem0[r6 + 0x0000000000000010:word64]
	branch r1 != r2 l000000000007B4A8_ds_t
	// succ:  l000000000007B4A8_ds_f l000000000007B4A8_ds_t
l000000000007B4A8_ds_f:
	goto l000000000007B4B8
	// succ:  l000000000007B4B8
l000000000007B4A8_ds_t:
	goto l000000000007B4F8
	// succ:  l000000000007B4F8
l000000000007B4B8:
	r1 = (word64) Mem0[r7 + 0x0000000000000018:uint32]
	r2 = (word64) Mem0[r6 + 0x0000000000000018:uint32]
l000000000007B4F8:
	Mem0[sp + 0x0000000000000018:byte] = (byte) 0x0000000000000000
	return
	// succ:  type..eq.struct { root runtime.semaRoot; pad [0]uint8 }_exit
type..eq.struct { root runtime.semaRoot; pad [0]uint8 }_exit:


// type..hash.[251]struct { root runtime.semaRoot; pad [0]uint8 }
// Return size: 0
void type..hash.[251]struct { root runtime.semaRoot; pad [0]uint8 }()
type..hash.[251]struct { root runtime.semaRoot; pad [0]uint8 }_entry:
	// succ:  l000000000007B508
l000000000007B508:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007B508_ds_t
	// succ:  l000000000007B508_ds_f l000000000007B508_ds_t
l000000000007B508_ds_f:
	goto l000000000007B518
	// succ:  l000000000007B518
l000000000007B508_ds_t:
	goto l000000000007B52C
	// succ:  l000000000007B52C
l000000000007B518:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007B508
	// succ:  l000000000007B508
l000000000007B52C:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l000000000007B52C_ds_t
	// succ:  l000000000007B52C_ds_f l000000000007B52C_ds_t
l000000000007B52C_ds_f:
	goto l000000000007B554
	// succ:  l000000000007B554
l000000000007B52C_ds_t:
	goto l000000000007B5A8
	// succ:  l000000000007B5A8
l000000000007B554:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = r3
l000000000007B5A8:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.[251]struct { root runtime.semaRoot; pad [0]uint8 }_exit
type..hash.[251]struct { root runtime.semaRoot; pad [0]uint8 }_exit:


// type..eq.[251]struct { root runtime.semaRoot; pad [0]uint8 }
// Return size: 0
void type..eq.[251]struct { root runtime.semaRoot; pad [0]uint8 }()
type..eq.[251]struct { root runtime.semaRoot; pad [0]uint8 }_entry:
	// succ:  l000000000007B5C0
l000000000007B5C0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007B5C0_ds_t
	// succ:  l000000000007B5C0_ds_f l000000000007B5C0_ds_t
l000000000007B5C0_ds_f:
	goto l000000000007B5D0
	// succ:  l000000000007B5D0
l000000000007B5C0_ds_t:
	goto l000000000007B5E4
	// succ:  l000000000007B5E4
l000000000007B5D0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007B5C0
	// succ:  l000000000007B5C0
l000000000007B5E4:
	r11 = Mem0[sp + 0x0000000000000008:word64]
	r10 = Mem0[sp + 0x0000000000000010:word64]
	r1 = 0x0000000000000000
	r5 = 0x0000000000000000
	lo = r9 / 0x0000000000000000
	hi = r9 % 0x0000000000000000
	r23 = (word64) (r5 < r9)
	branch r23 == 0x0000000000000000 l000000000007B5E4_ds_t
	// succ:  l000000000007B5E4_ds_f l000000000007B5E4_ds_t
l000000000007B5E4_ds_f:
	goto l000000000007B604
	// succ:  l000000000007B604
l000000000007B5E4_ds_t:
	goto l000000000007B6A4
	// succ:  l000000000007B6A4
l000000000007B604:
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
l000000000007B6A4:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	r1 = r1 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	return
	// succ:  type..eq.[251]struct { root runtime.semaRoot; pad [0]uint8 }_exit
type..eq.[251]struct { root runtime.semaRoot; pad [0]uint8 }_exit:


// type..hash.struct { note runtime.note; mask [3]uint32; wanted [3]uint32; ignored [3]uint32; recv [3]uint32; state uint32; inuse bool }
// Return size: 0
void type..hash.struct { note runtime.note; mask [3]uint32; wanted [3]uint32; ignored [3]uint32; recv [3]uint32; state uint32; inuse bool }()
type..hash.struct { note runtime.note; mask [3]uint32; wanted [3]uint32; ignored [3]uint32; recv [3]uint32; state uint32; inuse bool }_entry:
	// succ:  l000000000007B6C8
l000000000007B6C8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007B6C8_ds_t
	// succ:  l000000000007B6C8_ds_f l000000000007B6C8_ds_t
l000000000007B6C8_ds_f:
	goto l000000000007B6D8
	// succ:  l000000000007B6D8
l000000000007B6C8_ds_t:
	goto l000000000007B6EC
	// succ:  l000000000007B6EC
l000000000007B6D8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007B6C8
	// succ:  l000000000007B6C8
l000000000007B6EC:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000040:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.struct { note runtime.note; mask [3]uint32; wanted [3]uint32; ignored [3]uint32; recv [3]uint32; state uint32; inuse bool }_exit
type..hash.struct { note runtime.note; mask [3]uint32; wanted [3]uint32; ignored [3]uint32; recv [3]uint32; state uint32; inuse bool }_exit:


// type..eq.struct { note runtime.note; mask [3]uint32; wanted [3]uint32; ignored [3]uint32; recv [3]uint32; state uint32; inuse bool }
// Return size: 0
void type..eq.struct { note runtime.note; mask [3]uint32; wanted [3]uint32; ignored [3]uint32; recv [3]uint32; state uint32; inuse bool }()
type..eq.struct { note runtime.note; mask [3]uint32; wanted [3]uint32; ignored [3]uint32; recv [3]uint32; state uint32; inuse bool }_entry:
	// succ:  l000000000007B730
l000000000007B730:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007B730_ds_t
	// succ:  l000000000007B730_ds_f l000000000007B730_ds_t
l000000000007B730_ds_f:
	goto l000000000007B740
	// succ:  l000000000007B740
l000000000007B730_ds_t:
	goto l000000000007B754
	// succ:  l000000000007B754
l000000000007B740:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007B730
	// succ:  l000000000007B730
l000000000007B754:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r1 = Mem0[sp + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:word64] = r1
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	r2 = r1 + 0x00000000000000FF
	r1 = r2 + 0x00000000000000FF
	Mem0[sp + 0x0000000000000040:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  type..eq.struct { note runtime.note; mask [3]uint32; wanted [3]uint32; ignored [3]uint32; recv [3]uint32; state uint32; inuse bool }_exit
type..eq.struct { note runtime.note; mask [3]uint32; wanted [3]uint32; ignored [3]uint32; recv [3]uint32; state uint32; inuse bool }_exit:


// type..hash.[65]runtime.sigTabT
// Return size: 0
void type..hash.[65]runtime.sigTabT()
type..hash.[65]runtime.sigTabT_entry:
	// succ:  l000000000007B7A0
l000000000007B7A0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007B7A0_ds_t
	// succ:  l000000000007B7A0_ds_f l000000000007B7A0_ds_t
l000000000007B7A0_ds_f:
	goto l000000000007B7B0
	// succ:  l000000000007B7B0
l000000000007B7A0_ds_t:
	goto l000000000007B7C4
	// succ:  l000000000007B7C4
l000000000007B7B0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007B7A0
	// succ:  l000000000007B7A0
l000000000007B7C4:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l000000000007B7C4_ds_t
	// succ:  l000000000007B7C4_ds_f l000000000007B7C4_ds_t
l000000000007B7C4_ds_f:
	goto l000000000007B7EC
	// succ:  l000000000007B7EC
l000000000007B7C4_ds_t:
	goto l000000000007B840
	// succ:  l000000000007B840
l000000000007B7EC:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = r3
l000000000007B840:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.[65]runtime.sigTabT_exit
type..hash.[65]runtime.sigTabT_exit:


// type..eq.[65]runtime.sigTabT
// Return size: 0
void type..eq.[65]runtime.sigTabT()
type..eq.[65]runtime.sigTabT_entry:
	// succ:  l000000000007B858
l000000000007B858:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007B858_ds_t
	// succ:  l000000000007B858_ds_f l000000000007B858_ds_t
l000000000007B858_ds_f:
	goto l000000000007B868
	// succ:  l000000000007B868
l000000000007B858_ds_t:
	goto l000000000007B87C
	// succ:  l000000000007B87C
l000000000007B868:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007B858
	// succ:  l000000000007B858
l000000000007B87C:
	sp = sp + -96
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r3 = 0x0000000000000000
type..eq.[65]runtime.sigTabT_exit:


// type..hash.[16]runtime.dbgVar
// Return size: 0
void type..hash.[16]runtime.dbgVar()
type..hash.[16]runtime.dbgVar_entry:
	// succ:  l000000000007B998
l000000000007B998:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007B998_ds_t
	// succ:  l000000000007B998_ds_f l000000000007B998_ds_t
l000000000007B998_ds_f:
	goto l000000000007B9A8
	// succ:  l000000000007B9A8
l000000000007B998_ds_t:
	goto l000000000007B9BC
	// succ:  l000000000007B9BC
l000000000007B9A8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007B998
	// succ:  l000000000007B998
l000000000007B9BC:
	sp = sp + -48
	Mem0[sp:word64] = ra
	r4 = Mem0[sp + 0x0000000000000040:word64]
	r3 = 0x0000000000000000
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:word64] = r1
	r2 = Mem0[sp + 0x0000000000000020:word64]
	r23 = (word64) (r3 < r2)
	branch r23 == 0x0000000000000000 l000000000007B9BC_ds_t
	// succ:  l000000000007B9BC_ds_f l000000000007B9BC_ds_t
l000000000007B9BC_ds_f:
	goto l000000000007B9E4
	// succ:  l000000000007B9E4
l000000000007B9BC_ds_t:
	goto l000000000007BA38
	// succ:  l000000000007BA38
l000000000007B9E4:
	Mem0[sp + 0x0000000000000028:word64] = r3
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = r3
l000000000007BA38:
	Mem0[sp + 0x0000000000000048:word64] = r4
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  type..hash.[16]runtime.dbgVar_exit
type..hash.[16]runtime.dbgVar_exit:


// type..eq.[16]runtime.dbgVar
// Return size: 0
void type..eq.[16]runtime.dbgVar()
type..eq.[16]runtime.dbgVar_entry:
	// succ:  l000000000007BA50
l000000000007BA50:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007BA50_ds_t
	// succ:  l000000000007BA50_ds_f l000000000007BA50_ds_t
l000000000007BA50_ds_f:
	goto l000000000007BA60
	// succ:  l000000000007BA60
l000000000007BA50_ds_t:
	goto l000000000007BA74
	// succ:  l000000000007BA74
l000000000007BA60:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007BA50
	// succ:  l000000000007BA50
l000000000007BA74:
	sp = sp + -112
	Mem0[sp:word64] = ra
	r1 = 0x0000000000000000
	r3 = 0x0000000000000000
type..eq.[16]runtime.dbgVar_exit:


// runtime.rt0_go
// Return size: 0
void runtime.rt0_go()
runtime.rt0_go_entry:
	// succ:  l000000000007BB98
l000000000007BB98:
	sp = fp
	sp = sp + -8
	Mem0[sp:word64] = ra
	call runtime.reginit (retsize: 0;)
	sp = sp + -24
	Mem0[sp + 0x0000000000000008:word32] = (word32) r4
	Mem0[sp + 0x0000000000000010:word64] = r5
	r30 = 0x00000000000D0000
	lo = r30 / r30
	hi = r30 % r30
	lo = r30 / r30
	hi = r30 % r30
	r23 = 0xFFFFFFFFFFFF0000
	r1 = sp + r23
	Mem0[r30 + 0x0000000000000010:word64] = r1
	Mem0[r30 + 0x0000000000000018:word64] = r1
	Mem0[r30:word64] = r1
	Mem0[r30 + 0x0000000000000008:word64] = sp
	r23 = 0x00000000000D0000
	lo = r23 / r23
	hi = r23 % r23
	r25 = Mem0[r23 + 0x0000000000001040:word64]
	branch r25 == 0x0000000000000000 l000000000007BB98_ds_t
	// succ:  l000000000007BB98_ds_f l000000000007BB98_ds_t
l000000000007BB98_ds_f:
	goto l000000000007BBEC
	// succ:  l000000000007BBEC
l000000000007BB98_ds_t:
	goto l000000000007BC0C
	// succ:  l000000000007BC0C
l000000000007BBEC:
	r7 = 0x0000000000000000
	r6 = 0x0000000000000000
	r5 = 0x0000000000080000
	lo = r5 / r5
	hi = r5 % r5
	lo = r5 / r5
	hi = r5 % r5
	r4 = r30
	call r25 (retsize: 0;)
l000000000007BC0C:
	r1 = Mem0[r30:word64]
	r1 = r1 + 720
	Mem0[r30 + 0x0000000000000010:word64] = r1
	Mem0[r30 + 0x0000000000000018:word64] = r1
	r1 = 0x00000000000D0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	Mem0[r1:word64] = r30
	Mem0[r30 + 0x0000000000000030:word64] = r1
	call runtime.check (retsize: 0;)
	call runtime.args (retsize: 0;)
	call runtime.osinit (retsize: 0;)
	call runtime.schedinit (retsize: 0;)
	r1 = 0x00000000000A0000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	sp = sp + -24
	Mem0[sp + 0x0000000000000010:word64] = r1
	Mem0[sp + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[sp:word64] = 0x0000000000000000
	call runtime.newproc (retsize: 0;)
	sp = sp + 24
	call runtime.mstart (retsize: 0;)
	Mem0[r0 + 0x0000000000000001:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.rt0_go_exit
runtime.rt0_go_exit:


// runtime.asminit
// Return size: 0
void runtime.asminit()
runtime.asminit_entry:
	// succ:  l000000000007BC98
l000000000007BC98:
	sp = fp
	return
	// succ:  runtime.asminit_exit
runtime.asminit_exit:


// runtime.reginit
// Return size: 0
void runtime.reginit()
runtime.reginit_entry:
	// succ:  l000000000007BCA8
l000000000007BCA8:
	sp = fp
	r23 = 0x00000000000A0000
	lo = r23 / r23
	hi = r23 % r23
	f26 = Mem0[r23 + 0x00000000000010F0:word64]
runtime.reginit_exit:


// runtime.gosave
// Return size: 0
void runtime.gosave()
runtime.gosave_entry:
	// succ:  l000000000007BCC8
l000000000007BCC8:
	sp = fp
	r1 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[r1:word64] = sp
	Mem0[r1 + 0x0000000000000008:word64] = ra
	Mem0[r1 + 0x0000000000000010:word64] = r30
	Mem0[r1 + 0x0000000000000028:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[r1 + 0x0000000000000018:word64] = 0x0000000000000000
	return
	// succ:  runtime.gosave_exit
runtime.gosave_exit:


// runtime.gogo
// Return size: 0
void runtime.gogo()
runtime.gogo_entry:
	// succ:  l000000000007BCF0
l000000000007BCF0:
	sp = fp
	r3 = Mem0[sp + 0x0000000000000008:word64]
	r30 = Mem0[r3 + 0x0000000000000010:word64]
	call runtime.save_g (retsize: 0;)
	r2 = Mem0[r30:word64]
	sp = Mem0[r3:word64]
	ra = Mem0[r3 + 0x0000000000000028:word64]
	r1 = Mem0[r3 + 0x0000000000000020:word64]
	r22 = Mem0[r3 + 0x0000000000000018:word64]
	Mem0[r3:word64] = 0x0000000000000000
	Mem0[r3 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem0[r3 + 0x0000000000000028:word64] = 0x0000000000000000
	Mem0[r3 + 0x0000000000000018:word64] = 0x0000000000000000
	r4 = Mem0[r3 + 0x0000000000000008:word64]
	call r4 (retsize: 0;)
	return
	// succ:  runtime.gogo_exit
runtime.gogo_exit:


// runtime.mcall
// Return size: 0
void runtime.mcall()
runtime.mcall_entry:
	// succ:  l000000000007BD30
l000000000007BD30:
	sp = fp
	Mem0[r30 + 0x0000000000000040:word64] = sp
	Mem0[r30 + 0x0000000000000048:word64] = ra
	Mem0[r30 + 0x0000000000000068:word64] = 0x0000000000000000
	Mem0[r30 + 0x0000000000000050:word64] = r30
	r1 = r30
	r3 = Mem0[r30 + 0x0000000000000030:word64]
	r30 = Mem0[r3:word64]
	call runtime.save_g (retsize: 0;)
	branch r30 != r1 l000000000007BD30_ds_t
	// succ:  l000000000007BD30_ds_f l000000000007BD30_ds_t
l000000000007BD30_ds_f:
	goto l000000000007BD5C
	// succ:  l000000000007BD5C
l000000000007BD30_ds_t:
	goto l000000000007BD64
	// succ:  l000000000007BD64
l000000000007BD5C:
	call runtime.badmcall (retsize: 0;)
	return
	// succ:  l0000000000047668 runtime.mcall_exit
l000000000007BD64:
	r22 = Mem0[sp + 0x0000000000000008:word64]
	r4 = Mem0[r22:word64]
	sp = Mem0[r30 + 0x0000000000000040:word64]
	sp = sp + -16
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp:word64] = 0x0000000000000000
	call r4 (retsize: 0;)
	// succ:  l000000000007BD7C_thunk_runtime.badmcall2
l000000000007BD7C_thunk_runtime.badmcall2:
	call runtime.badmcall2 (retsize: 0;)
	return
	// succ:  runtime.mcall_exit
runtime.mcall_exit:


// runtime.systemstack_switch
// Return size: 0
void runtime.systemstack_switch()
runtime.systemstack_switch_entry:
	// succ:  l000000000007BD90
l000000000007BD90:
	sp = fp
	sp = sp + -8
	Mem0[sp:word64] = ra
runtime.systemstack_switch_exit:


// runtime.systemstack
// Return size: 0
void runtime.systemstack()
runtime.systemstack_entry:
	// succ:  l000000000007BDB8
l000000000007BDB8:
	sp = fp
	sp = sp + -8
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000010:word64]
	r22 = r1
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r3 = Mem0[r2 + 0x0000000000000050:word64]
	branch r30 == r3 l000000000007BDB8_ds_t
	// succ:  l000000000007BDB8_ds_f l000000000007BDB8_ds_t
l000000000007BDB8_ds_f:
	goto l000000000007BDD8
	// succ:  l000000000007BDD8
l000000000007BDB8_ds_t:
	goto l000000000007BE80
	// succ:  l000000000007BE80
l000000000007BDD8:
	r3 = Mem0[r2:word64]
	branch r30 == r3 l000000000007BDD8_ds_t
	// succ:  l000000000007BDD8_ds_f l000000000007BDD8_ds_t
l000000000007BDD8_ds_f:
	goto l000000000007BDE4
	// succ:  l000000000007BDE4
l000000000007BDD8_ds_t:
	goto l000000000007BE80
	// succ:  l000000000007BE80
l000000000007BDE4:
	r4 = Mem0[r2 + 0x00000000000000A0:word64]
	branch r30 == r4 l000000000007BDE4_ds_t
	// succ:  l000000000007BDE4_ds_f l000000000007BDE4_ds_t
l000000000007BDE4_ds_f:
	goto l000000000007BDF0
	// succ:  l000000000007BDF0
l000000000007BDE4_ds_t:
	goto l000000000007BE04
	// succ:  l000000000007BE04
l000000000007BDF0:
	r4 = 0x0000000000060000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
l000000000007BE04:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	r4 = r4 + 8
	Mem0[r30 + 0x0000000000000048:word64] = r4
	Mem0[r30 + 0x0000000000000040:word64] = sp
	Mem0[r30 + 0x0000000000000068:word64] = 0x0000000000000000
	Mem0[r30 + 0x0000000000000050:word64] = r30
	r30 = r3
	call runtime.save_g (retsize: 0;)
	r1 = Mem0[r30 + 0x0000000000000040:word64]
	r1 = r1 + -8
	r2 = 0x0000000000050000
	lo = r2 / r2
	hi = r2 % r2
	lo = r2 / r2
	hi = r2 % r2
	Mem0[r1:word64] = r2
	sp = r1
	r4 = Mem0[r22:word64]
	call r4 (retsize: 0;)
	r1 = Mem0[r30 + 0x0000000000000030:word64]
	r30 = Mem0[r1 + 0x00000000000000A0:word64]
	call runtime.save_g (retsize: 0;)
	sp = Mem0[r30 + 0x0000000000000040:word64]
	Mem0[r30 + 0x0000000000000040:word64] = 0x0000000000000000
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.systemstack_exit
l000000000007BE80:
	r4 = Mem0[r22:word64]
	call r4 (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.systemstack_exit
runtime.systemstack_exit:


// runtime.morestack
// Return size: 0
void runtime.morestack()
runtime.morestack_entry:
	// succ:  l000000000007BEA0
l000000000007BEA0:
	sp = fp
	r7 = Mem0[r30 + 0x0000000000000030:word64]
	r8 = Mem0[r7:word64]
	branch r30 != r8 l000000000007BEA0_ds_t
	goto l000000000007BEA0_ds_f
	// succ:  l000000000007BEA0_ds_f l000000000007BEA0_ds_t
l000000000007BEA0:
l000000000007BEA0_ds_f:
	goto l000000000007BEB0
	// succ:  l000000000007BEB0
l000000000007BEA0_ds_t:
	goto l000000000007BEB8
	// succ:  l000000000007BEB8
l000000000007BEB0:
	call runtime.abort (retsize: 0;)
l000000000007BEB8:
	r8 = Mem0[r7 + 0x0000000000000050:word64]
	branch r30 != r8 l000000000007BEB8_ds_t
	// succ:  l000000000007BEB8_ds_f l000000000007BEB8_ds_t
l000000000007BEB8_ds_f:
	goto l000000000007BEC4
	// succ:  l000000000007BEC4
l000000000007BEB8_ds_t:
	goto l000000000007BECC
	// succ:  l000000000007BECC
l000000000007BEC4:
	call runtime.abort (retsize: 0;)
l000000000007BECC:
	Mem0[r30 + 0x0000000000000058:word64] = r22
	Mem0[r30 + 0x0000000000000040:word64] = sp
	Mem0[r30 + 0x0000000000000048:word64] = ra
	Mem0[r30 + 0x0000000000000068:word64] = r3
	Mem0[r7 + 0x0000000000000010:word64] = r3
	Mem0[r7 + 0x0000000000000008:word64] = sp
	Mem0[r7 + 0x0000000000000018:word64] = r30
	r30 = Mem0[r7:word64]
	call runtime.save_g (retsize: 0;)
	sp = Mem0[r30 + 0x0000000000000040:word64]
	call runtime.newstack (retsize: 0;)
runtime.morestack_exit:


// runtime.morestack_noctxt
// Return size: 0
void runtime.morestack_noctxt()
runtime.morestack_noctxt_entry:
	// succ:  l000000000007BF08
l000000000007BF08:
	sp = fp
	r22 = 0x0000000000000000
	// succ:  l000000000007BF0C_thunk_runtime.morestack
l000000000007BF0C_thunk_runtime.morestack:
	call runtime.morestack (retsize: 0;)
	return
	// succ:  runtime.morestack_noctxt_exit
runtime.morestack_noctxt_exit:


// runtime.stackBarrier
// Return size: 0
void runtime.stackBarrier()
runtime.stackBarrier_entry:
	// succ:  l000000000007BF18
l000000000007BF18:
	sp = fp
	r2 = Mem0[r30 + 0x0000000000000088:word64]
	r3 = Mem0[r30 + 0x00000000000000A0:word64]
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
runtime.stackBarrier_exit:


// runtime.reflectcall
// Return size: 0
void runtime.reflectcall()
runtime.reflectcall_entry:
	// succ:  l000000000007BF48
l000000000007BF48:
	sp = fp
	r1 = (word64) Mem0[sp + 0x0000000000000020:uint32]
	lo = r23 / 0x0000000000000000
	hi = r23 % 0x0000000000000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007BF48_ds_t
	// succ:  l000000000007BF48_ds_f l000000000007BF48_ds_t
l000000000007BF48_ds_f:
	goto l000000000007BF5C
	// succ:  l000000000007BF5C
l000000000007BF48_ds_t:
	goto l000000000007BF70
	// succ:  l000000000007BF70
l000000000007BF5C:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007BF70:
	lo = r23 / 0x0000000000000000
	hi = r23 % 0x0000000000000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007BF70_ds_t
	// succ:  l000000000007BF70_ds_f l000000000007BF70_ds_t
l000000000007BF70_ds_f:
	goto l000000000007BF80
	// succ:  l000000000007BF80
l000000000007BF70_ds_t:
	goto l000000000007BF94
	// succ:  l000000000007BF94
l000000000007BF80:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007BF94:
	lo = r23 / 0x0000000000000000
	hi = r23 % 0x0000000000000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007BF94_ds_t
	// succ:  l000000000007BF94_ds_f l000000000007BF94_ds_t
l000000000007BF94_ds_f:
	goto l000000000007BFA4
	// succ:  l000000000007BFA4
l000000000007BF94_ds_t:
	goto l000000000007BFB8
	// succ:  l000000000007BFB8
l000000000007BFA4:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007BFB8:
	lo = r23 / 0x0000000000000000
	hi = r23 % 0x0000000000000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007BFB8_ds_t
	// succ:  l000000000007BFB8_ds_f l000000000007BFB8_ds_t
l000000000007BFB8_ds_f:
	goto l000000000007BFC8
	// succ:  l000000000007BFC8
l000000000007BFB8_ds_t:
	goto l000000000007BFDC
	// succ:  l000000000007BFDC
l000000000007BFC8:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007BFDC:
	lo = r23 / 0x0000000000000000
	hi = r23 % 0x0000000000000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007BFDC_ds_t
	// succ:  l000000000007BFDC_ds_f l000000000007BFDC_ds_t
l000000000007BFDC_ds_f:
	goto l000000000007BFEC
	// succ:  l000000000007BFEC
l000000000007BFDC_ds_t:
	goto l000000000007C000
	// succ:  l000000000007C000
l000000000007BFEC:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C000:
	lo = r23 / 0x0000000000000000
	hi = r23 % 0x0000000000000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C000_ds_t
	// succ:  l000000000007C000_ds_f l000000000007C000_ds_t
l000000000007C000_ds_f:
	goto l000000000007C010
	// succ:  l000000000007C010
l000000000007C000_ds_t:
	goto l000000000007C024
	// succ:  l000000000007C024
l000000000007C010:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C024:
	lo = r23 / 0x0000000000000000
	hi = r23 % 0x0000000000000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C024_ds_t
	// succ:  l000000000007C024_ds_f l000000000007C024_ds_t
l000000000007C024_ds_f:
	goto l000000000007C034
	// succ:  l000000000007C034
l000000000007C024_ds_t:
	goto l000000000007C048
	// succ:  l000000000007C048
l000000000007C034:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C048:
	lo = r23 / 0x0000000000000000
	hi = r23 % 0x0000000000000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C048_ds_t
	// succ:  l000000000007C048_ds_f l000000000007C048_ds_t
l000000000007C048_ds_f:
	goto l000000000007C058
	// succ:  l000000000007C058
l000000000007C048_ds_t:
	goto l000000000007C06C
	// succ:  l000000000007C06C
l000000000007C058:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C06C:
	lo = r23 / 0x0000000000000000
	hi = r23 % 0x0000000000000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C06C_ds_t
	// succ:  l000000000007C06C_ds_f l000000000007C06C_ds_t
l000000000007C06C_ds_f:
	goto l000000000007C07C
	// succ:  l000000000007C07C
l000000000007C06C_ds_t:
	goto l000000000007C090
	// succ:  l000000000007C090
l000000000007C07C:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C090:
	lo = r23 / 0x0000000000000000
	hi = r23 % 0x0000000000000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C090_ds_t
	// succ:  l000000000007C090_ds_f l000000000007C090_ds_t
l000000000007C090_ds_f:
	goto l000000000007C0A0
	// succ:  l000000000007C0A0
l000000000007C090_ds_t:
	goto l000000000007C0B4
	// succ:  l000000000007C0B4
l000000000007C0A0:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C0B4:
	r23 = 0x0000000000008000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C0B4_ds_t
	// succ:  l000000000007C0B4_ds_f l000000000007C0B4_ds_t
l000000000007C0B4_ds_f:
	goto l000000000007C0C4
	// succ:  l000000000007C0C4
l000000000007C0B4_ds_t:
	goto l000000000007C0D8
	// succ:  l000000000007C0D8
l000000000007C0C4:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C0D8:
	r23 = 0x0000000000010000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C0D8_ds_t
	// succ:  l000000000007C0D8_ds_f l000000000007C0D8_ds_t
l000000000007C0D8_ds_f:
	goto l000000000007C0E8
	// succ:  l000000000007C0E8
l000000000007C0D8_ds_t:
	goto l000000000007C0FC
	// succ:  l000000000007C0FC
l000000000007C0E8:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C0FC:
	r23 = 0x0000000000020000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C0FC_ds_t
	// succ:  l000000000007C0FC_ds_f l000000000007C0FC_ds_t
l000000000007C0FC_ds_f:
	goto l000000000007C10C
	// succ:  l000000000007C10C
l000000000007C0FC_ds_t:
	goto l000000000007C120
	// succ:  l000000000007C120
l000000000007C10C:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C120:
	r23 = 0x0000000000040000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C120_ds_t
	// succ:  l000000000007C120_ds_f l000000000007C120_ds_t
l000000000007C120_ds_f:
	goto l000000000007C130
	// succ:  l000000000007C130
l000000000007C120_ds_t:
	goto l000000000007C144
	// succ:  l000000000007C144
l000000000007C130:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C144:
	r23 = 0x0000000000080000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C144_ds_t
	// succ:  l000000000007C144_ds_f l000000000007C144_ds_t
l000000000007C144_ds_f:
	goto l000000000007C154
	// succ:  l000000000007C154
l000000000007C144_ds_t:
	goto l000000000007C168
	// succ:  l000000000007C168
l000000000007C154:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C168:
	r23 = 0x0000000000100000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C168_ds_t
	// succ:  l000000000007C168_ds_f l000000000007C168_ds_t
l000000000007C168_ds_f:
	goto l000000000007C178
	// succ:  l000000000007C178
l000000000007C168_ds_t:
	goto l000000000007C18C
	// succ:  l000000000007C18C
l000000000007C178:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C18C:
	r23 = 0x0000000000200000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C18C_ds_t
	// succ:  l000000000007C18C_ds_f l000000000007C18C_ds_t
l000000000007C18C_ds_f:
	goto l000000000007C19C
	// succ:  l000000000007C19C
l000000000007C18C_ds_t:
	goto l000000000007C1B0
	// succ:  l000000000007C1B0
l000000000007C19C:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C1B0:
	r23 = 0x0000000000400000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C1B0_ds_t
	// succ:  l000000000007C1B0_ds_f l000000000007C1B0_ds_t
l000000000007C1B0_ds_f:
	goto l000000000007C1C0
	// succ:  l000000000007C1C0
l000000000007C1B0_ds_t:
	goto l000000000007C1D4
	// succ:  l000000000007C1D4
l000000000007C1C0:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C1D4:
	r23 = 0x0000000000800000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C1D4_ds_t
	// succ:  l000000000007C1D4_ds_f l000000000007C1D4_ds_t
l000000000007C1D4_ds_f:
	goto l000000000007C1E4
	// succ:  l000000000007C1E4
l000000000007C1D4_ds_t:
	goto l000000000007C1F8
	// succ:  l000000000007C1F8
l000000000007C1E4:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C1F8:
	r23 = 0x0000000001000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C1F8_ds_t
	// succ:  l000000000007C1F8_ds_f l000000000007C1F8_ds_t
l000000000007C1F8_ds_f:
	goto l000000000007C208
	// succ:  l000000000007C208
l000000000007C1F8_ds_t:
	goto l000000000007C21C
	// succ:  l000000000007C21C
l000000000007C208:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C21C:
	r23 = 0x0000000002000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C21C_ds_t
	// succ:  l000000000007C21C_ds_f l000000000007C21C_ds_t
l000000000007C21C_ds_f:
	goto l000000000007C22C
	// succ:  l000000000007C22C
l000000000007C21C_ds_t:
	goto l000000000007C240
	// succ:  l000000000007C240
l000000000007C22C:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C240:
	r23 = 0x0000000004000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C240_ds_t
	// succ:  l000000000007C240_ds_f l000000000007C240_ds_t
l000000000007C240_ds_f:
	goto l000000000007C250
	// succ:  l000000000007C250
l000000000007C240_ds_t:
	goto l000000000007C264
	// succ:  l000000000007C264
l000000000007C250:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C264:
	r23 = 0x0000000008000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C264_ds_t
	// succ:  l000000000007C264_ds_f l000000000007C264_ds_t
l000000000007C264_ds_f:
	goto l000000000007C274
	// succ:  l000000000007C274
l000000000007C264_ds_t:
	goto l000000000007C288
	// succ:  l000000000007C288
l000000000007C274:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C288:
	r23 = 0x0000000010000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C288_ds_t
	// succ:  l000000000007C288_ds_f l000000000007C288_ds_t
l000000000007C288_ds_f:
	goto l000000000007C298
	// succ:  l000000000007C298
l000000000007C288_ds_t:
	goto l000000000007C2AC
	// succ:  l000000000007C2AC
l000000000007C298:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C2AC:
	r23 = 0x0000000020000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C2AC_ds_t
	// succ:  l000000000007C2AC_ds_f l000000000007C2AC_ds_t
l000000000007C2AC_ds_f:
	goto l000000000007C2BC
	// succ:  l000000000007C2BC
l000000000007C2AC_ds_t:
	goto l000000000007C2D0
	// succ:  l000000000007C2D0
l000000000007C2BC:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C2D0:
	r23 = 0x0000000040000000
	r23 = (word64) (r23 <u r1)
	branch r23 != 0x0000000000000000 l000000000007C2D0_ds_t
	// succ:  l000000000007C2D0_ds_f l000000000007C2D0_ds_t
l000000000007C2D0_ds_f:
	goto l000000000007C2E0
	// succ:  l000000000007C2E0
l000000000007C2D0_ds_t:
	goto l000000000007C2F4
	// succ:  l000000000007C2F4
l000000000007C2E0:
	r4 = 0x0000000000080000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
l000000000007C2F4:
	r4 = 0x0000000000040000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	return
	// succ:  runtime.reflectcall_exit
runtime.reflectcall_exit:


// runtime.call32
// Return size: 0
void runtime.call32()
runtime.call32_entry:
	// succ:  l000000000007C308
l000000000007C308:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007C308_ds_t
	// succ:  l000000000007C308_ds_f l000000000007C308_ds_t
l000000000007C308_ds_f:
	goto l000000000007C318
	// succ:  l000000000007C318
l000000000007C308_ds_t:
	goto l000000000007C32C
	// succ:  l000000000007C32C
l000000000007C318:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007C308
	// succ:  l000000000007C308
l000000000007C32C:
	sp = sp + -40
	Mem0[sp:word64] = ra
	r1 = Mem0[r30 + 0x0000000000000020:word64]
	branch r1 == 0x0000000000000000 l000000000007C32C_ds_t
	// succ:  l000000000007C32C_ds_f l000000000007C32C_ds_t
l000000000007C32C_ds_f:
	goto l000000000007C340
	// succ:  l000000000007C340
l000000000007C32C_ds_t:
	goto l000000000007C358
	// succ:  l000000000007C358
l000000000007C340:
	r2 = Mem0[r1:word64]
	r3 = sp + 48
	branch r2 != r3 l000000000007C340_ds_t
	// succ:  l000000000007C340_ds_f l000000000007C340_ds_t
l000000000007C340_ds_f:
	goto l000000000007C350
	// succ:  l000000000007C350
l000000000007C340_ds_t:
	goto l000000000007C358
	// succ:  l000000000007C358
l000000000007C350:
	r2 = sp + 8
	Mem0[r1:word64] = r2
	// succ:  l000000000007C358
l000000000007C358:
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000048:uint32]
	r3 = sp
	r3 = r3 + 8
	r2 = r2 + r3
	branch r3 == r2 l000000000007C358_ds_t
	// succ:  l000000000007C358_ds_f l000000000007C358_ds_t
l000000000007C358_ds_f:
	goto l000000000007C374
	// succ:  l000000000007C374
l000000000007C358_ds_t:
	goto l000000000007C38C
	// succ:  l000000000007C38C
l000000000007C374:
	r4 = (word64) Mem0[r1:byte]
	r1 = r1 + 1
	Mem0[r3:byte] = (byte) r4
	r3 = r3 + 1
	branch r3 != r2 l000000000007C374_ds_t
	// succ:  l000000000007C374_ds_f l000000000007C374_ds_t
l000000000007C374_ds_f:
	goto l000000000007C38C
	// succ:  l000000000007C38C
l000000000007C374_ds_t:
	goto l000000000007C374
	// succ:  l000000000007C374
l000000000007C38C:
	r22 = Mem0[sp + 0x0000000000000038:word64]
	r4 = Mem0[r22:word64]
	call r4 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000040:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000048:uint32]
	r4 = (word64) Mem0[sp + 0x000000000000004C:uint32]
	r3 = sp
	r3 = r3 + r4
	r1 = r1 + r4
runtime.call32_exit:


// runtime.call64
// Return size: 0
void runtime.call64()
runtime.call64_entry:
	// succ:  l000000000007C418
l000000000007C418:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r1 = (word64) (r1 <u sp)
	branch r1 != 0x0000000000000000 l000000000007C418_ds_t
	// succ:  l000000000007C418_ds_f l000000000007C418_ds_t
l000000000007C418_ds_f:
	goto l000000000007C428
	// succ:  l000000000007C428
l000000000007C418_ds_t:
	goto l000000000007C43C
	// succ:  l000000000007C43C
l000000000007C428:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007C418
	// succ:  l000000000007C418
l000000000007C43C:
	sp = sp + -72
	Mem0[sp:word64] = ra
	r1 = Mem0[r30 + 0x0000000000000020:word64]
	branch r1 == 0x0000000000000000 l000000000007C43C_ds_t
	// succ:  l000000000007C43C_ds_f l000000000007C43C_ds_t
l000000000007C43C_ds_f:
	goto l000000000007C450
	// succ:  l000000000007C450
l000000000007C43C_ds_t:
	goto l000000000007C468
	// succ:  l000000000007C468
l000000000007C450:
	r2 = Mem0[r1:word64]
	r3 = sp + 80
	branch r2 != r3 l000000000007C450_ds_t
	// succ:  l000000000007C450_ds_f l000000000007C450_ds_t
l000000000007C450_ds_f:
	goto l000000000007C460
	// succ:  l000000000007C460
l000000000007C450_ds_t:
	goto l000000000007C468
	// succ:  l000000000007C468
l000000000007C460:
	r2 = sp + 8
	Mem0[r1:word64] = r2
	// succ:  l000000000007C468
l000000000007C468:
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000068:uint32]
	r3 = sp
	r3 = r3 + 8
	r2 = r2 + r3
	branch r3 == r2 l000000000007C468_ds_t
	// succ:  l000000000007C468_ds_f l000000000007C468_ds_t
l000000000007C468_ds_f:
	goto l000000000007C484
	// succ:  l000000000007C484
l000000000007C468_ds_t:
	goto l000000000007C49C
	// succ:  l000000000007C49C
l000000000007C484:
	r4 = (word64) Mem0[r1:byte]
	r1 = r1 + 1
	Mem0[r3:byte] = (byte) r4
	r3 = r3 + 1
	branch r3 != r2 l000000000007C484_ds_t
	// succ:  l000000000007C484_ds_f l000000000007C484_ds_t
l000000000007C484_ds_f:
	goto l000000000007C49C
	// succ:  l000000000007C49C
l000000000007C484_ds_t:
	goto l000000000007C484
	// succ:  l000000000007C484
l000000000007C49C:
	r22 = Mem0[sp + 0x0000000000000058:word64]
	r4 = Mem0[r22:word64]
	call r4 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000060:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000068:uint32]
	r4 = (word64) Mem0[sp + 0x000000000000006C:uint32]
	r3 = sp
	r3 = r3 + r4
	r1 = r1 + r4
runtime.call64_exit:


// runtime.call128
// Return size: 0
void runtime.call128()
runtime.call128_entry:
	// succ:  l000000000007C528
l000000000007C528:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -136
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000007C528_ds_t
	// succ:  l000000000007C528_ds_f l000000000007C528_ds_t
l000000000007C528_ds_f:
	goto l000000000007C53C
	// succ:  l000000000007C53C
l000000000007C528_ds_t:
	goto l000000000007C550
	// succ:  l000000000007C550
l000000000007C53C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007C528
	// succ:  l000000000007C528
l000000000007C550:
	sp = sp + -136
	Mem0[sp:word64] = ra
	r1 = Mem0[r30 + 0x0000000000000020:word64]
	branch r1 == 0x0000000000000000 l000000000007C550_ds_t
	// succ:  l000000000007C550_ds_f l000000000007C550_ds_t
l000000000007C550_ds_f:
	goto l000000000007C564
	// succ:  l000000000007C564
l000000000007C550_ds_t:
	goto l000000000007C57C
	// succ:  l000000000007C57C
l000000000007C564:
	r2 = Mem0[r1:word64]
	r3 = sp + 144
	branch r2 != r3 l000000000007C564_ds_t
	// succ:  l000000000007C564_ds_f l000000000007C564_ds_t
l000000000007C564_ds_f:
	goto l000000000007C574
	// succ:  l000000000007C574
l000000000007C564_ds_t:
	goto l000000000007C57C
	// succ:  l000000000007C57C
l000000000007C574:
	r2 = sp + 8
	Mem0[r1:word64] = r2
	// succ:  l000000000007C57C
l000000000007C57C:
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	r2 = (word64) Mem0[sp + 0x00000000000000A8:uint32]
	r3 = sp
	r3 = r3 + 8
	r2 = r2 + r3
	branch r3 == r2 l000000000007C57C_ds_t
	// succ:  l000000000007C57C_ds_f l000000000007C57C_ds_t
l000000000007C57C_ds_f:
	goto l000000000007C598
	// succ:  l000000000007C598
l000000000007C57C_ds_t:
	goto l000000000007C5B0
	// succ:  l000000000007C5B0
l000000000007C598:
	r4 = (word64) Mem0[r1:byte]
	r1 = r1 + 1
	Mem0[r3:byte] = (byte) r4
	r3 = r3 + 1
	branch r3 != r2 l000000000007C598_ds_t
	// succ:  l000000000007C598_ds_f l000000000007C598_ds_t
l000000000007C598_ds_f:
	goto l000000000007C5B0
	// succ:  l000000000007C5B0
l000000000007C598_ds_t:
	goto l000000000007C598
	// succ:  l000000000007C598
l000000000007C5B0:
	r22 = Mem0[sp + 0x0000000000000098:word64]
	r4 = Mem0[r22:word64]
	call r4 (retsize: 0;)
	r1 = Mem0[sp + 0x00000000000000A0:word64]
	r2 = (word64) Mem0[sp + 0x00000000000000A8:uint32]
	r4 = (word64) Mem0[sp + 0x00000000000000AC:uint32]
	r3 = sp
	r3 = r3 + r4
	r1 = r1 + r4
runtime.call128_exit:


// runtime.call256
// Return size: 0
void runtime.call256()
runtime.call256_entry:
	// succ:  l000000000007C640
l000000000007C640:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -264
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000007C640_ds_t
	// succ:  l000000000007C640_ds_f l000000000007C640_ds_t
l000000000007C640_ds_f:
	goto l000000000007C654
	// succ:  l000000000007C654
l000000000007C640_ds_t:
	goto l000000000007C668
	// succ:  l000000000007C668
l000000000007C654:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007C640
	// succ:  l000000000007C640
l000000000007C668:
	sp = sp + -264
	Mem0[sp:word64] = ra
	r1 = Mem0[r30 + 0x0000000000000020:word64]
	branch r1 == 0x0000000000000000 l000000000007C668_ds_t
	// succ:  l000000000007C668_ds_f l000000000007C668_ds_t
l000000000007C668_ds_f:
	goto l000000000007C67C
	// succ:  l000000000007C67C
l000000000007C668_ds_t:
	goto l000000000007C694
	// succ:  l000000000007C694
l000000000007C67C:
	r2 = Mem0[r1:word64]
	r3 = sp + 272
	branch r2 != r3 l000000000007C67C_ds_t
	// succ:  l000000000007C67C_ds_f l000000000007C67C_ds_t
l000000000007C67C_ds_f:
	goto l000000000007C68C
	// succ:  l000000000007C68C
l000000000007C67C_ds_t:
	goto l000000000007C694
	// succ:  l000000000007C694
l000000000007C68C:
	r2 = sp + 8
	Mem0[r1:word64] = r2
	// succ:  l000000000007C694
l000000000007C694:
	r1 = Mem0[sp + 0x0000000000000120:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000128:uint32]
	r3 = sp
	r3 = r3 + 8
	r2 = r2 + r3
	branch r3 == r2 l000000000007C694_ds_t
	// succ:  l000000000007C694_ds_f l000000000007C694_ds_t
l000000000007C694_ds_f:
	goto l000000000007C6B0
	// succ:  l000000000007C6B0
l000000000007C694_ds_t:
	goto l000000000007C6C8
	// succ:  l000000000007C6C8
l000000000007C6B0:
	r4 = (word64) Mem0[r1:byte]
	r1 = r1 + 1
	Mem0[r3:byte] = (byte) r4
	r3 = r3 + 1
	branch r3 != r2 l000000000007C6B0_ds_t
	// succ:  l000000000007C6B0_ds_f l000000000007C6B0_ds_t
l000000000007C6B0_ds_f:
	goto l000000000007C6C8
	// succ:  l000000000007C6C8
l000000000007C6B0_ds_t:
	goto l000000000007C6B0
	// succ:  l000000000007C6B0
l000000000007C6C8:
	r22 = Mem0[sp + 0x0000000000000118:word64]
	r4 = Mem0[r22:word64]
	call r4 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000120:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000128:uint32]
	r4 = (word64) Mem0[sp + 0x000000000000012C:uint32]
	r3 = sp
	r3 = r3 + r4
	r1 = r1 + r4
runtime.call256_exit:


// runtime.call512
// Return size: 0
void runtime.call512()
runtime.call512_entry:
	// succ:  l000000000007C758
l000000000007C758:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -520
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000007C758_ds_t
	// succ:  l000000000007C758_ds_f l000000000007C758_ds_t
l000000000007C758_ds_f:
	goto l000000000007C76C
	// succ:  l000000000007C76C
l000000000007C758_ds_t:
	goto l000000000007C780
	// succ:  l000000000007C780
l000000000007C76C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007C758
	// succ:  l000000000007C758
l000000000007C780:
	sp = sp + -520
	Mem0[sp:word64] = ra
	r1 = Mem0[r30 + 0x0000000000000020:word64]
	branch r1 == 0x0000000000000000 l000000000007C780_ds_t
	// succ:  l000000000007C780_ds_f l000000000007C780_ds_t
l000000000007C780_ds_f:
	goto l000000000007C794
	// succ:  l000000000007C794
l000000000007C780_ds_t:
	goto l000000000007C7AC
	// succ:  l000000000007C7AC
l000000000007C794:
	r2 = Mem0[r1:word64]
	r3 = sp + 528
	branch r2 != r3 l000000000007C794_ds_t
	// succ:  l000000000007C794_ds_f l000000000007C794_ds_t
l000000000007C794_ds_f:
	goto l000000000007C7A4
	// succ:  l000000000007C7A4
l000000000007C794_ds_t:
	goto l000000000007C7AC
	// succ:  l000000000007C7AC
l000000000007C7A4:
	r2 = sp + 8
	Mem0[r1:word64] = r2
	// succ:  l000000000007C7AC
l000000000007C7AC:
	r1 = Mem0[sp + 0x0000000000000220:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000228:uint32]
	r3 = sp
	r3 = r3 + 8
	r2 = r2 + r3
	branch r3 == r2 l000000000007C7AC_ds_t
	// succ:  l000000000007C7AC_ds_f l000000000007C7AC_ds_t
l000000000007C7AC_ds_f:
	goto l000000000007C7C8
	// succ:  l000000000007C7C8
l000000000007C7AC_ds_t:
	goto l000000000007C7E0
	// succ:  l000000000007C7E0
l000000000007C7C8:
	r4 = (word64) Mem0[r1:byte]
	r1 = r1 + 1
	Mem0[r3:byte] = (byte) r4
	r3 = r3 + 1
	branch r3 != r2 l000000000007C7C8_ds_t
	// succ:  l000000000007C7C8_ds_f l000000000007C7C8_ds_t
l000000000007C7C8_ds_f:
	goto l000000000007C7E0
	// succ:  l000000000007C7E0
l000000000007C7C8_ds_t:
	goto l000000000007C7C8
	// succ:  l000000000007C7C8
l000000000007C7E0:
	r22 = Mem0[sp + 0x0000000000000218:word64]
	r4 = Mem0[r22:word64]
	call r4 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000220:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000228:uint32]
	r4 = (word64) Mem0[sp + 0x000000000000022C:uint32]
	r3 = sp
	r3 = r3 + r4
	r1 = r1 + r4
runtime.call512_exit:


// runtime.call1024
// Return size: 0
void runtime.call1024()
runtime.call1024_entry:
	// succ:  l000000000007C870
l000000000007C870:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -1032
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000007C870_ds_t
	// succ:  l000000000007C870_ds_f l000000000007C870_ds_t
l000000000007C870_ds_f:
	goto l000000000007C884
	// succ:  l000000000007C884
l000000000007C870_ds_t:
	goto l000000000007C898
	// succ:  l000000000007C898
l000000000007C884:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007C870
	// succ:  l000000000007C870
l000000000007C898:
	sp = sp + -1032
	Mem0[sp:word64] = ra
	r1 = Mem0[r30 + 0x0000000000000020:word64]
	branch r1 == 0x0000000000000000 l000000000007C898_ds_t
	// succ:  l000000000007C898_ds_f l000000000007C898_ds_t
l000000000007C898_ds_f:
	goto l000000000007C8AC
	// succ:  l000000000007C8AC
l000000000007C898_ds_t:
	goto l000000000007C8C4
	// succ:  l000000000007C8C4
l000000000007C8AC:
	r2 = Mem0[r1:word64]
	r3 = sp + 1040
	branch r2 != r3 l000000000007C8AC_ds_t
	// succ:  l000000000007C8AC_ds_f l000000000007C8AC_ds_t
l000000000007C8AC_ds_f:
	goto l000000000007C8BC
	// succ:  l000000000007C8BC
l000000000007C8AC_ds_t:
	goto l000000000007C8C4
	// succ:  l000000000007C8C4
l000000000007C8BC:
	r2 = sp + 8
	Mem0[r1:word64] = r2
	// succ:  l000000000007C8C4
l000000000007C8C4:
	r1 = Mem0[sp + 0x0000000000000420:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000428:uint32]
	r3 = sp
	r3 = r3 + 8
	r2 = r2 + r3
	branch r3 == r2 l000000000007C8C4_ds_t
	// succ:  l000000000007C8C4_ds_f l000000000007C8C4_ds_t
l000000000007C8C4_ds_f:
	goto l000000000007C8E0
	// succ:  l000000000007C8E0
l000000000007C8C4_ds_t:
	goto l000000000007C8F8
	// succ:  l000000000007C8F8
l000000000007C8E0:
	r4 = (word64) Mem0[r1:byte]
	r1 = r1 + 1
	Mem0[r3:byte] = (byte) r4
	r3 = r3 + 1
	branch r3 != r2 l000000000007C8E0_ds_t
	// succ:  l000000000007C8E0_ds_f l000000000007C8E0_ds_t
l000000000007C8E0_ds_f:
	goto l000000000007C8F8
	// succ:  l000000000007C8F8
l000000000007C8E0_ds_t:
	goto l000000000007C8E0
	// succ:  l000000000007C8E0
l000000000007C8F8:
	r22 = Mem0[sp + 0x0000000000000418:word64]
	r4 = Mem0[r22:word64]
	call r4 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000420:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000428:uint32]
	r4 = (word64) Mem0[sp + 0x000000000000042C:uint32]
	r3 = sp
	r3 = r3 + r4
	r1 = r1 + r4
runtime.call1024_exit:


// runtime.call2048
// Return size: 0
void runtime.call2048()
runtime.call2048_entry:
	// succ:  l000000000007C988
l000000000007C988:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	r2 = sp + -2056
	r1 = (word64) (r1 <u r2)
	branch r1 != 0x0000000000000000 l000000000007C988_ds_t
	// succ:  l000000000007C988_ds_f l000000000007C988_ds_t
l000000000007C988_ds_f:
	goto l000000000007C99C
	// succ:  l000000000007C99C
l000000000007C988_ds_t:
	goto l000000000007C9B0
	// succ:  l000000000007C9B0
l000000000007C99C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007C988
	// succ:  l000000000007C988
l000000000007C9B0:
	sp = sp + -2056
	Mem0[sp:word64] = ra
	r1 = Mem0[r30 + 0x0000000000000020:word64]
	branch r1 == 0x0000000000000000 l000000000007C9B0_ds_t
	// succ:  l000000000007C9B0_ds_f l000000000007C9B0_ds_t
l000000000007C9B0_ds_f:
	goto l000000000007C9C4
	// succ:  l000000000007C9C4
l000000000007C9B0_ds_t:
	goto l000000000007C9DC
	// succ:  l000000000007C9DC
l000000000007C9C4:
	r2 = Mem0[r1:word64]
	r3 = sp + 2064
	branch r2 != r3 l000000000007C9C4_ds_t
	// succ:  l000000000007C9C4_ds_f l000000000007C9C4_ds_t
l000000000007C9C4_ds_f:
	goto l000000000007C9D4
	// succ:  l000000000007C9D4
l000000000007C9C4_ds_t:
	goto l000000000007C9DC
	// succ:  l000000000007C9DC
l000000000007C9D4:
	r2 = sp + 8
	Mem0[r1:word64] = r2
	// succ:  l000000000007C9DC
l000000000007C9DC:
	r1 = Mem0[sp + 0x0000000000000820:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000828:uint32]
	r3 = sp
	r3 = r3 + 8
	r2 = r2 + r3
	branch r3 == r2 l000000000007C9DC_ds_t
	// succ:  l000000000007C9DC_ds_f l000000000007C9DC_ds_t
l000000000007C9DC_ds_f:
	goto l000000000007C9F8
	// succ:  l000000000007C9F8
l000000000007C9DC_ds_t:
	goto l000000000007CA10
	// succ:  l000000000007CA10
l000000000007C9F8:
	r4 = (word64) Mem0[r1:byte]
	r1 = r1 + 1
	Mem0[r3:byte] = (byte) r4
	r3 = r3 + 1
	branch r3 != r2 l000000000007C9F8_ds_t
	// succ:  l000000000007C9F8_ds_f l000000000007C9F8_ds_t
l000000000007C9F8_ds_f:
	goto l000000000007CA10
	// succ:  l000000000007CA10
l000000000007C9F8_ds_t:
	goto l000000000007C9F8
	// succ:  l000000000007C9F8
l000000000007CA10:
	r22 = Mem0[sp + 0x0000000000000818:word64]
	r4 = Mem0[r22:word64]
	call r4 (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000820:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000828:uint32]
	r4 = (word64) Mem0[sp + 0x000000000000082C:uint32]
	r3 = sp
	r3 = r3 + r4
	r1 = r1 + r4
runtime.call2048_exit:


// runtime.call4096
// Return size: 0
void runtime.call4096()
runtime.call4096_entry:
	// succ:  l000000000007CAA0
l000000000007CAA0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007CAA0_ds_t
	// succ:  l000000000007CAA0_ds_f l000000000007CAA0_ds_t
l000000000007CAA0_ds_f:
	goto l000000000007CAB0
	// succ:  l000000000007CAB0
l000000000007CAA0_ds_t:
	goto l000000000007CAC8
	// succ:  l000000000007CAC8
l000000000007CAB0:
	r2 = sp + 720
l000000000007CAC8:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007CAA0
	// succ:  l000000000007CAA0
runtime.call4096_exit:


// runtime.call8192
// Return size: 0
void runtime.call8192()
runtime.call8192_entry:
	// succ:  l000000000007CBC8
l000000000007CBC8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007CBC8_ds_t
	// succ:  l000000000007CBC8_ds_f l000000000007CBC8_ds_t
l000000000007CBC8_ds_f:
	goto l000000000007CBD8
	// succ:  l000000000007CBD8
l000000000007CBC8_ds_t:
	goto l000000000007CBF0
	// succ:  l000000000007CBF0
l000000000007CBD8:
	r2 = sp + 720
l000000000007CBF0:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007CBC8
	// succ:  l000000000007CBC8
runtime.call8192_exit:


// runtime.call16384
// Return size: 0
void runtime.call16384()
runtime.call16384_entry:
	// succ:  l000000000007CCF0
l000000000007CCF0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007CCF0_ds_t
	// succ:  l000000000007CCF0_ds_f l000000000007CCF0_ds_t
l000000000007CCF0_ds_f:
	goto l000000000007CD00
	// succ:  l000000000007CD00
l000000000007CCF0_ds_t:
	goto l000000000007CD18
	// succ:  l000000000007CD18
l000000000007CD00:
	r2 = sp + 720
l000000000007CD18:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007CCF0
	// succ:  l000000000007CCF0
runtime.call16384_exit:


// runtime.call32768
// Return size: 0
void runtime.call32768()
runtime.call32768_entry:
	// succ:  l000000000007CE18
l000000000007CE18:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007CE18_ds_t
	// succ:  l000000000007CE18_ds_f l000000000007CE18_ds_t
l000000000007CE18_ds_f:
	goto l000000000007CE28
	// succ:  l000000000007CE28
l000000000007CE18_ds_t:
	goto l000000000007CE40
	// succ:  l000000000007CE40
l000000000007CE28:
	r2 = sp + 720
l000000000007CE40:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007CE18
	// succ:  l000000000007CE18
runtime.call32768_exit:


// runtime.call65536
// Return size: 0
void runtime.call65536()
runtime.call65536_entry:
	// succ:  l000000000007CFA0
l000000000007CFA0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007CFA0_ds_t
	// succ:  l000000000007CFA0_ds_f l000000000007CFA0_ds_t
l000000000007CFA0_ds_f:
	goto l000000000007CFB0
	// succ:  l000000000007CFB0
l000000000007CFA0_ds_t:
	goto l000000000007CFCC
	// succ:  l000000000007CFCC
l000000000007CFB0:
	r2 = sp + 720
l000000000007CFCC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007CFA0
	// succ:  l000000000007CFA0
runtime.call65536_exit:


// runtime.call131072
// Return size: 0
void runtime.call131072()
runtime.call131072_entry:
	// succ:  l000000000007D138
l000000000007D138:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007D138_ds_t
	// succ:  l000000000007D138_ds_f l000000000007D138_ds_t
l000000000007D138_ds_f:
	goto l000000000007D148
	// succ:  l000000000007D148
l000000000007D138_ds_t:
	goto l000000000007D164
	// succ:  l000000000007D164
l000000000007D148:
	r2 = sp + 720
l000000000007D164:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007D138
	// succ:  l000000000007D138
runtime.call131072_exit:


// runtime.call262144
// Return size: 0
void runtime.call262144()
runtime.call262144_entry:
	// succ:  l000000000007D2D0
l000000000007D2D0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007D2D0_ds_t
	// succ:  l000000000007D2D0_ds_f l000000000007D2D0_ds_t
l000000000007D2D0_ds_f:
	goto l000000000007D2E0
	// succ:  l000000000007D2E0
l000000000007D2D0_ds_t:
	goto l000000000007D2FC
	// succ:  l000000000007D2FC
l000000000007D2E0:
	r2 = sp + 720
l000000000007D2FC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007D2D0
	// succ:  l000000000007D2D0
runtime.call262144_exit:


// runtime.call524288
// Return size: 0
void runtime.call524288()
runtime.call524288_entry:
	// succ:  l000000000007D468
l000000000007D468:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007D468_ds_t
	// succ:  l000000000007D468_ds_f l000000000007D468_ds_t
l000000000007D468_ds_f:
	goto l000000000007D478
	// succ:  l000000000007D478
l000000000007D468_ds_t:
	goto l000000000007D494
	// succ:  l000000000007D494
l000000000007D478:
	r2 = sp + 720
l000000000007D494:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007D468
	// succ:  l000000000007D468
runtime.call524288_exit:


// runtime.call1048576
// Return size: 0
void runtime.call1048576()
runtime.call1048576_entry:
	// succ:  l000000000007D600
l000000000007D600:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007D600_ds_t
	// succ:  l000000000007D600_ds_f l000000000007D600_ds_t
l000000000007D600_ds_f:
	goto l000000000007D610
	// succ:  l000000000007D610
l000000000007D600_ds_t:
	goto l000000000007D62C
	// succ:  l000000000007D62C
l000000000007D610:
	r2 = sp + 720
l000000000007D62C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007D600
	// succ:  l000000000007D600
runtime.call1048576_exit:


// runtime.call2097152
// Return size: 0
void runtime.call2097152()
runtime.call2097152_entry:
	// succ:  l000000000007D798
l000000000007D798:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007D798_ds_t
	// succ:  l000000000007D798_ds_f l000000000007D798_ds_t
l000000000007D798_ds_f:
	goto l000000000007D7A8
	// succ:  l000000000007D7A8
l000000000007D798_ds_t:
	goto l000000000007D7C4
	// succ:  l000000000007D7C4
l000000000007D7A8:
	r2 = sp + 720
l000000000007D7C4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007D798
	// succ:  l000000000007D798
runtime.call2097152_exit:


// runtime.call4194304
// Return size: 0
void runtime.call4194304()
runtime.call4194304_entry:
	// succ:  l000000000007D930
l000000000007D930:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007D930_ds_t
	// succ:  l000000000007D930_ds_f l000000000007D930_ds_t
l000000000007D930_ds_f:
	goto l000000000007D940
	// succ:  l000000000007D940
l000000000007D930_ds_t:
	goto l000000000007D95C
	// succ:  l000000000007D95C
l000000000007D940:
	r2 = sp + 720
l000000000007D95C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007D930
	// succ:  l000000000007D930
runtime.call4194304_exit:


// runtime.call8388608
// Return size: 0
void runtime.call8388608()
runtime.call8388608_entry:
	// succ:  l000000000007DAC8
l000000000007DAC8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007DAC8_ds_t
	// succ:  l000000000007DAC8_ds_f l000000000007DAC8_ds_t
l000000000007DAC8_ds_f:
	goto l000000000007DAD8
	// succ:  l000000000007DAD8
l000000000007DAC8_ds_t:
	goto l000000000007DAF4
	// succ:  l000000000007DAF4
l000000000007DAD8:
	r2 = sp + 720
l000000000007DAF4:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007DAC8
	// succ:  l000000000007DAC8
runtime.call8388608_exit:


// runtime.call16777216
// Return size: 0
void runtime.call16777216()
runtime.call16777216_entry:
	// succ:  l000000000007DC60
l000000000007DC60:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007DC60_ds_t
	// succ:  l000000000007DC60_ds_f l000000000007DC60_ds_t
l000000000007DC60_ds_f:
	goto l000000000007DC70
	// succ:  l000000000007DC70
l000000000007DC60_ds_t:
	goto l000000000007DC8C
	// succ:  l000000000007DC8C
l000000000007DC70:
	r2 = sp + 720
l000000000007DC8C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007DC60
	// succ:  l000000000007DC60
runtime.call16777216_exit:


// runtime.call33554432
// Return size: 0
void runtime.call33554432()
runtime.call33554432_entry:
	// succ:  l000000000007DDF8
l000000000007DDF8:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007DDF8_ds_t
	// succ:  l000000000007DDF8_ds_f l000000000007DDF8_ds_t
l000000000007DDF8_ds_f:
	goto l000000000007DE08
	// succ:  l000000000007DE08
l000000000007DDF8_ds_t:
	goto l000000000007DE24
	// succ:  l000000000007DE24
l000000000007DE08:
	r2 = sp + 720
l000000000007DE24:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007DDF8
	// succ:  l000000000007DDF8
runtime.call33554432_exit:


// runtime.call67108864
// Return size: 0
void runtime.call67108864()
runtime.call67108864_entry:
	// succ:  l000000000007DF90
l000000000007DF90:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007DF90_ds_t
	// succ:  l000000000007DF90_ds_f l000000000007DF90_ds_t
l000000000007DF90_ds_f:
	goto l000000000007DFA0
	// succ:  l000000000007DFA0
l000000000007DF90_ds_t:
	goto l000000000007DFBC
	// succ:  l000000000007DFBC
l000000000007DFA0:
	r2 = sp + 720
l000000000007DFBC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007DF90
	// succ:  l000000000007DF90
runtime.call67108864_exit:


// runtime.call134217728
// Return size: 0
void runtime.call134217728()
runtime.call134217728_entry:
	// succ:  l000000000007E128
l000000000007E128:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007E128_ds_t
	// succ:  l000000000007E128_ds_f l000000000007E128_ds_t
l000000000007E128_ds_f:
	goto l000000000007E138
	// succ:  l000000000007E138
l000000000007E128_ds_t:
	goto l000000000007E154
	// succ:  l000000000007E154
l000000000007E138:
	r2 = sp + 720
l000000000007E154:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007E128
	// succ:  l000000000007E128
runtime.call134217728_exit:


// runtime.call268435456
// Return size: 0
void runtime.call268435456()
runtime.call268435456_entry:
	// succ:  l000000000007E2C0
l000000000007E2C0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007E2C0_ds_t
	// succ:  l000000000007E2C0_ds_f l000000000007E2C0_ds_t
l000000000007E2C0_ds_f:
	goto l000000000007E2D0
	// succ:  l000000000007E2D0
l000000000007E2C0_ds_t:
	goto l000000000007E2EC
	// succ:  l000000000007E2EC
l000000000007E2D0:
	r2 = sp + 720
l000000000007E2EC:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007E2C0
	// succ:  l000000000007E2C0
runtime.call268435456_exit:


// runtime.call536870912
// Return size: 0
void runtime.call536870912()
runtime.call536870912_entry:
	// succ:  l000000000007E458
l000000000007E458:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007E458_ds_t
	// succ:  l000000000007E458_ds_f l000000000007E458_ds_t
l000000000007E458_ds_f:
	goto l000000000007E468
	// succ:  l000000000007E468
l000000000007E458_ds_t:
	goto l000000000007E484
	// succ:  l000000000007E484
l000000000007E468:
	r2 = sp + 720
l000000000007E484:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007E458
	// succ:  l000000000007E458
runtime.call536870912_exit:


// runtime.call1073741824
// Return size: 0
void runtime.call1073741824()
runtime.call1073741824_entry:
	// succ:  l000000000007E5F0
l000000000007E5F0:
	sp = fp
	r1 = Mem0[r30 + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	branch r1 == r2 l000000000007E5F0_ds_t
	// succ:  l000000000007E5F0_ds_f l000000000007E5F0_ds_t
l000000000007E5F0_ds_f:
	goto l000000000007E600
	// succ:  l000000000007E600
l000000000007E5F0_ds_t:
	goto l000000000007E61C
	// succ:  l000000000007E61C
l000000000007E600:
	r2 = sp + 720
l000000000007E61C:
	r3 = ra
	call runtime.morestack_noctxt (retsize: 0;)
	goto l000000000007E5F0
	// succ:  l000000000007E5F0
runtime.call1073741824_exit:


// runtime.procyield
// Return size: 0
void runtime.procyield()
runtime.procyield_entry:
	// succ:  l000000000007E788
l000000000007E788:
	sp = fp
	return
	// succ:  runtime.procyield_exit
runtime.procyield_exit:


// runtime.jmpdefer
// Return size: 0
void runtime.jmpdefer()
runtime.jmpdefer_entry:
	// succ:  l000000000007E798
l000000000007E798:
	sp = fp
	ra = Mem0[sp:word64]
	ra = ra + -8
	r22 = Mem0[sp + 0x0000000000000008:word64]
	sp = Mem0[sp + 0x0000000000000010:word64]
	sp = sp + -8
	0x0000000000000000 = ~0x0000000000000000
	r4 = Mem0[r22:word64]
	call r4 (retsize: 0;)
	return
	// succ:  runtime.jmpdefer_exit
runtime.jmpdefer_exit:


// gosave
// Return size: 0
void gosave()
gosave_entry:
	// succ:  l000000000007E7C0
l000000000007E7C0:
	sp = fp
	Mem0[r30 + 0x0000000000000048:word64] = ra
	Mem0[r30 + 0x0000000000000040:word64] = sp
	Mem0[r30 + 0x0000000000000068:word64] = 0x0000000000000000
	Mem0[r30 + 0x0000000000000060:word64] = 0x0000000000000000
	Mem0[r30 + 0x0000000000000058:word64] = 0x0000000000000000
	return
	// succ:  gosave_exit
gosave_exit:


// runtime.asmcgocall
// Return size: 0
void runtime.asmcgocall()
runtime.asmcgocall_entry:
	// succ:  l000000000007E7E0
l000000000007E7E0:
	sp = fp
	sp = sp + -8
	Mem0[sp:word64] = ra
	r25 = Mem0[sp + 0x0000000000000010:word64]
	r4 = Mem0[sp + 0x0000000000000018:word64]
	r3 = sp
	r2 = r30
	r5 = Mem0[r30 + 0x0000000000000030:word64]
	r6 = Mem0[r5:word64]
	branch r6 == r30 l000000000007E7E0_ds_t
	// succ:  l000000000007E7E0_ds_f l000000000007E7E0_ds_t
l000000000007E7E0_ds_f:
	goto l000000000007E808
	// succ:  l000000000007E808
l000000000007E7E0_ds_t:
	goto l000000000007E820
	// succ:  l000000000007E820
l000000000007E808:
	call gosave (retsize: 0;)
	r30 = r6
	call runtime.save_g (retsize: 0;)
	sp = Mem0[r30 + 0x0000000000000040:word64]
	// succ:  l000000000007E820
l000000000007E820:
	sp = sp + -16
	Mem0[sp:word64] = r2
	r2 = Mem0[r2 + 0x0000000000000008:word64]
runtime.asmcgocall_exit:


// runtime.cgocallback
// Return size: 0
void runtime.cgocallback()
runtime.cgocallback_entry:
	// succ:  l000000000007E870
l000000000007E870:
	sp = fp
	sp = sp + -40
	Mem0[sp:word64] = ra
	lo = r1 / sp
	hi = r1 % sp
	Mem0[sp + 0x0000000000000008:word64] = r1
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[sp + 0x0000000000000010:word64] = r1
	r1 = Mem0[sp + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000018:word64] = r1
	r1 = Mem0[sp + 0x0000000000000048:word64]
	Mem0[sp + 0x0000000000000020:word64] = r1
	r1 = 0x0000000000080000
	lo = r1 / r1
	hi = r1 % r1
	lo = r1 / r1
	hi = r1 % r1
	call r1 (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 40
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgocallback_exit
runtime.cgocallback_exit:


// runtime.cgocallback_gofunc
// Return size: 0
void runtime.cgocallback_gofunc()
runtime.cgocallback_gofunc_entry:
	// succ:  l000000000007E8C0
l000000000007E8C0:
	sp = fp
	sp = sp + -24
	Mem0[sp:word64] = ra
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r1 = (word64) Mem0[r23 - 0x0000000000006995:int8]
	branch r1 == 0x0000000000000000 l000000000007E8C0_ds_t
	// succ:  l000000000007E8C0_ds_f l000000000007E8C0_ds_t
l000000000007E8C0_ds_f:
	goto l000000000007E8DC
	// succ:  l000000000007E8DC
l000000000007E8C0_ds_t:
	goto l000000000007E8E4
	// succ:  l000000000007E8E4
l000000000007E8DC:
	call runtime.load_g (retsize: 0;)
l000000000007E8E4:
	branch r30 == 0x0000000000000000 l000000000007E8E4_ds_t
	// succ:  l000000000007E8E4_ds_f l000000000007E8E4_ds_t
l000000000007E8E4_ds_f:
	goto l000000000007E8EC
	// succ:  l000000000007E8EC
l000000000007E8E4_ds_t:
	goto l000000000007E98C
	// succ:  l000000000007E98C
l000000000007E8EC:
	r3 = Mem0[r30 + 0x0000000000000030:word64]
	Mem0[sp + 0x0000000000000010:word64] = r3
	goto l000000000007E8F4
	// succ:  l000000000007E8F4
l000000000007E8EC_ds_f:
	goto l000000000007E968
	// succ:  l000000000007E968
l000000000007E8EC_ds_t:
	goto l000000000007E97C
	// succ:  l000000000007E97C
l000000000007E8F4:
	r1 = Mem0[r3:word64]
	r2 = Mem0[r1 + 0x0000000000000040:word64]
	Mem0[sp + 0x0000000000000008:word64] = r2
	Mem0[r1 + 0x0000000000000040:word64] = sp
	r30 = Mem0[r3 + 0x00000000000000A0:word64]
	call runtime.save_g (retsize: 0;)
	r2 = Mem0[r30 + 0x0000000000000040:word64]
	r4 = Mem0[r30 + 0x0000000000000048:word64]
	Mem0[r2 - 0x0000000000000018:word64] = r4
	r1 = Mem0[sp + 0x0000000000000038:word64]
	Mem0[r2 - 0x0000000000000010:word64] = r1
	lo = sp / r2
	hi = sp % r2
	call runtime.cgocallbackg (retsize: 0;)
	r4 = Mem0[sp:word64]
	Mem0[r30 + 0x0000000000000048:word64] = r4
	lo = r2 / sp
	hi = r2 % sp
	Mem0[r30 + 0x0000000000000040:word64] = r2
	r3 = Mem0[r30 + 0x0000000000000030:word64]
	r30 = Mem0[r3:word64]
	call runtime.save_g (retsize: 0;)
	sp = Mem0[r30 + 0x0000000000000040:word64]
	r2 = Mem0[sp + 0x0000000000000008:word64]
	Mem0[r30 + 0x0000000000000040:word64] = r2
	r3 = Mem0[sp + 0x0000000000000010:word64]
	branch r3 != 0x0000000000000000 l000000000007E8EC_ds_t
	goto l000000000007E8EC_ds_f
	// succ:  l000000000007E8EC_ds_f l000000000007E8EC_ds_t
l000000000007E968:
	r4 = 0x0000000000050000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
l000000000007E97C:
	r4 = Mem0[sp:word64]
	sp = sp + 24
	call r4 (retsize: 0;)
	return
	// succ:  runtime.cgocallback_gofunc_exit
l000000000007E98C:
	Mem0[sp + 0x0000000000000010:word64] = r30
	r4 = 0x0000000000050000
	lo = r4 / r4
	hi = r4 % r4
	lo = r4 / r4
	hi = r4 % r4
	call r4 (retsize: 0;)
	r3 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = Mem0[r3:word64]
	Mem0[r1 + 0x0000000000000040:word64] = sp
	goto l000000000007E8F4
	// succ:  l000000000007E8F4
runtime.cgocallback_gofunc_exit:


// runtime.setg
// Return size: 0
void runtime.setg()
runtime.setg_entry:
	// succ:  l000000000007E9B8
l000000000007E9B8:
	sp = fp
	sp = sp + -8
	Mem0[sp:word64] = ra
	r30 = Mem0[sp + 0x0000000000000010:word64]
	call runtime.save_g (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.setg_exit
runtime.setg_exit:


// setg_gcc
// Return size: 0
void setg_gcc()
setg_gcc_entry:
	// succ:  l000000000007E9E0
l000000000007E9E0:
	sp = fp
	sp = sp + -8
	Mem0[sp:word64] = ra
	r30 = r1
	call runtime.save_g (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  setg_gcc_exit
setg_gcc_exit:


// runtime.getcallerpc
// Return size: 0
void runtime.getcallerpc()
runtime.getcallerpc_entry:
	// succ:  l000000000007EA08
l000000000007EA08:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000010:word64]
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r2 = Mem0[r23 - 0x0000000000006868:word64]
	branch r1 != r2 l000000000007EA08_ds_t
	// succ:  l000000000007EA08_ds_f l000000000007EA08_ds_t
l000000000007EA08_ds_f:
	goto l000000000007EA28
	// succ:  l000000000007EA28
l000000000007EA08_ds_t:
	goto l000000000007EA34
	// succ:  l000000000007EA34
l000000000007EA28:
	call runtime.nextBarrierPC (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000008:word64]
	// succ:  l000000000007EA34
l000000000007EA34:
	Mem0[sp + 0x0000000000000020:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 16
	call r4 (retsize: 0;)
	return
	// succ:  runtime.getcallerpc_exit
runtime.getcallerpc_exit:


// runtime.getcallersp
// Return size: 0
void runtime.getcallersp()
runtime.getcallersp_entry:
	// succ:  l000000000007EA48
l000000000007EA48:
	sp = fp
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r1 = r1 + -8
	Mem0[sp + 0x0000000000000010:word64] = r1
	return
	// succ:  runtime.getcallersp_exit
runtime.getcallersp_exit:


// runtime.abort
// Return size: 0
void runtime.abort()
runtime.abort_entry:
	// succ:  l000000000007EA60
l000000000007EA60:
	sp = fp
	0x0000000000000000 = (word64) Mem0[r0:int32]
runtime.abort_exit:


// runtime.memhash_varlen
// Return size: 0
void runtime.memhash_varlen()
runtime.memhash_varlen_entry:
	// succ:  l000000000007EA70
l000000000007EA70:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[sp + 0x0000000000000040:word64]
	r3 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r2
	Mem0[sp + 0x0000000000000018:word64] = r3
	call runtime.memhash (retsize: 0;)
	r1 = Mem0[sp + 0x0000000000000020:word64]
	Mem0[sp + 0x0000000000000048:word64] = r1
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.memhash_varlen_exit
runtime.memhash_varlen_exit:


// runtime.memequal
// Return size: 0
void runtime.memequal()
runtime.memequal_entry:
	// succ:  l000000000007EAB0
l000000000007EAB0:
	sp = fp
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r2 = Mem0[sp + 0x0000000000000010:word64]
	branch r1 == r2 l000000000007EAB0_ds_t
	// succ:  l000000000007EAB0_ds_f l000000000007EAB0_ds_t
l000000000007EAB0_ds_f:
	goto l000000000007EAC0
	// succ:  l000000000007EAC0
l000000000007EAB0_ds_t:
	goto l000000000007EB04
	// succ:  l000000000007EB04
l000000000007EAC0:
	r3 = Mem0[sp + 0x0000000000000018:word64]
	r4 = r3 + r1
	goto l000000000007EAC8
	// succ:  l000000000007EAC8
l000000000007EAC0_ds_f:
	goto l000000000007EAD0
	// succ:  l000000000007EAD0
l000000000007EAC0_ds_t:
	goto l000000000007EAE0
	// succ:  l000000000007EAE0
l000000000007EAC8:
	branch r1 != r4 l000000000007EAC0_ds_t
	goto l000000000007EAC0_ds_f
	// succ:  l000000000007EAC0_ds_f l000000000007EAC0_ds_t
l000000000007EAD0:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:byte] = (byte) r1
	return
	// succ:  runtime.memequal_exit
l000000000007EAE0:
	r6 = (word64) Mem0[r1:byte]
	r1 = r1 + 1
	r7 = (word64) Mem0[r2:byte]
	r2 = r2 + 1
	branch r6 == r7 l000000000007EAE0_ds_t
	// succ:  l000000000007EAE0_ds_f l000000000007EAE0_ds_t
l000000000007EAE0_ds_f:
	goto l000000000007EAF8
	// succ:  l000000000007EAF8
l000000000007EAE0_ds_t:
	goto l000000000007EAC8
	// succ:  l000000000007EAC8
l000000000007EAF8:
	Mem0[sp + 0x0000000000000020:byte] = (byte) 0x0000000000000000
	return
	// succ:  runtime.memequal_exit
l000000000007EB04:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:byte] = (byte) r1
	return
	// succ:  runtime.memequal_exit
runtime.memequal_exit:


// runtime.memequal_varlen
// Return size: 0
void runtime.memequal_varlen()
runtime.memequal_varlen_entry:
	// succ:  l000000000007EB18
l000000000007EB18:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = ra
	r1 = Mem0[sp + 0x0000000000000038:word64]
	r2 = Mem0[sp + 0x0000000000000040:word64]
	branch r1 == r2 l000000000007EB18_ds_t
	// succ:  l000000000007EB18_ds_f l000000000007EB18_ds_t
l000000000007EB18_ds_f:
	goto l000000000007EB30
	// succ:  l000000000007EB30
l000000000007EB18_ds_t:
	goto l000000000007EB60
	// succ:  l000000000007EB60
l000000000007EB30:
	r3 = Mem0[r22 + 0x0000000000000008:word64]
	Mem0[sp + 0x0000000000000008:word64] = r1
	Mem0[sp + 0x0000000000000010:word64] = r2
	Mem0[sp + 0x0000000000000018:word64] = r3
	call runtime.memequal (retsize: 0;)
	r1 = (word64) Mem0[sp + 0x0000000000000020:byte]
	Mem0[sp + 0x0000000000000048:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.memequal_varlen_exit
l000000000007EB60:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000048:byte] = (byte) r1
	r4 = Mem0[sp:word64]
	sp = sp + 48
	call r4 (retsize: 0;)
	return
	// succ:  runtime.memequal_varlen_exit
runtime.memequal_varlen_exit:


// runtime.eqstring
// Return size: 0
void runtime.eqstring()
runtime.eqstring_entry:
	// succ:  l000000000007EB78
l000000000007EB78:
	sp = fp
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r2 = Mem0[sp + 0x0000000000000018:word64]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	Mem0[sp + 0x0000000000000028:byte] = (byte) r3
	branch r1 != r2 l000000000007EB78_ds_t
	// succ:  l000000000007EB78_ds_f l000000000007EB78_ds_t
l000000000007EB78_ds_f:
	goto l000000000007EB90
	// succ:  l000000000007EB90
l000000000007EB78_ds_t:
	goto l000000000007EB98
	// succ:  l000000000007EB98
l000000000007EB90:
	return
	// succ:  runtime.eqstring_exit
l000000000007EB98:
	r3 = Mem0[sp + 0x0000000000000010:word64]
	r4 = r3 + r1
	goto l000000000007EBA0
	// succ:  l000000000007EBA0
l000000000007EB98_ds_f:
	goto l000000000007EBA8
	// succ:  l000000000007EBA8
l000000000007EB98_ds_t:
	goto l000000000007EBB0
	// succ:  l000000000007EBB0
l000000000007EBA0:
	branch r1 != r4 l000000000007EB98_ds_t
	goto l000000000007EB98_ds_f
	// succ:  l000000000007EB98_ds_f l000000000007EB98_ds_t
l000000000007EBA8:
	return
	// succ:  runtime.eqstring_exit
l000000000007EBB0:
	r6 = (word64) Mem0[r1:byte]
	r1 = r1 + 1
	r7 = (word64) Mem0[r2:byte]
	r2 = r2 + 1
	branch r6 == r7 l000000000007EBB0_ds_t
	// succ:  l000000000007EBB0_ds_f l000000000007EBB0_ds_t
l000000000007EBB0_ds_f:
	goto l000000000007EBC8
	// succ:  l000000000007EBC8
l000000000007EBB0_ds_t:
	goto l000000000007EBA0
	// succ:  l000000000007EBA0
l000000000007EBC8:
	Mem0[sp + 0x0000000000000028:byte] = (byte) 0x0000000000000000
	return
	// succ:  runtime.eqstring_exit
runtime.eqstring_exit:


// runtime.fastrand1
// Return size: 0
void runtime.fastrand1()
runtime.fastrand1_entry:
	// succ:  l000000000007EBD8
l000000000007EBD8:
	sp = fp
	r2 = Mem0[r30 + 0x0000000000000030:word64]
	r1 = (word64) Mem0[r2 + 0x00000000000000FC:uint32]
	r1 = r1 + r1
	branch r1 >= 0x0000000000000000 l000000000007EBD8_ds_t
	// succ:  l000000000007EBD8_ds_f l000000000007EBD8_ds_t
l000000000007EBD8_ds_f:
	goto l000000000007EBEC
	// succ:  l000000000007EBEC
l000000000007EBD8_ds_t:
	goto l000000000007EBF8
	// succ:  l000000000007EBF8
l000000000007EBEC:
	r23 = 0xFFFFFFFF88880000
	r23 = r23 | 0x0000000000008EEF
	r1 = r1 ^ r23
	// succ:  l000000000007EBF8
l000000000007EBF8:
	Mem0[r2 + 0x00000000000000FC:word32] = (word32) r1
	Mem0[sp + 0x0000000000000008:word32] = (word32) r1
	return
	// succ:  runtime.fastrand1_exit
runtime.fastrand1_exit:


// runtime.return0
// Return size: 0
void runtime.return0()
runtime.return0_entry:
	// succ:  l000000000007EC08
l000000000007EC08:
	sp = fp
	r1 = 0x0000000000000000
	return
	// succ:  runtime.return0_exit
runtime.return0_exit:


// runtime.goexit
// Return size: 0
void runtime.goexit()
runtime.goexit_entry:
	// succ:  l000000000007EC18
l000000000007EC18:
	sp = fp
	0x0000000000000000 = ~0x0000000000000000
	call runtime.goexit1 (retsize: 0;)
	0x0000000000000000 = ~0x0000000000000000
	// succ:  l000000000007EC24_thunk_runtime.prefetcht0
l000000000007EC24_thunk_runtime.prefetcht0:
	call runtime.prefetcht0 (retsize: 0;)
	return
	// succ:  runtime.goexit_exit
runtime.goexit_exit:


// runtime.prefetcht0
// Return size: 0
void runtime.prefetcht0()
runtime.prefetcht0_entry:
	// succ:  l000000000007EC28
l000000000007EC28:
	sp = fp
	return
	// succ:  runtime.prefetcht0_exit
runtime.prefetcht0_exit:


// runtime.prefetcht1
// Return size: 0
void runtime.prefetcht1()
runtime.prefetcht1_entry:
	// succ:  l000000000007EC38
l000000000007EC38:
	sp = fp
	return
	// succ:  runtime.prefetcht1_exit
runtime.prefetcht1_exit:


// runtime.prefetcht2
// Return size: 0
void runtime.prefetcht2()
runtime.prefetcht2_entry:
	// succ:  l000000000007EC48
l000000000007EC48:
	sp = fp
	return
	// succ:  runtime.prefetcht2_exit
runtime.prefetcht2_exit:


// runtime.prefetchnta
// Return size: 0
void runtime.prefetchnta()
runtime.prefetchnta_entry:
	// succ:  l000000000007EC58
l000000000007EC58:
	sp = fp
	return
	// succ:  runtime.prefetchnta_exit
runtime.prefetchnta_exit:


// runtime.checkASM
// Return size: 0
void runtime.checkASM()
runtime.checkASM_entry:
	// succ:  l000000000007EC68
l000000000007EC68:
	sp = fp
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000008:byte] = (byte) r1
	return
	// succ:  runtime.checkASM_exit
runtime.checkASM_exit:


// runtime.publicationBarrier
// Return size: 0
void runtime.publicationBarrier()
runtime.publicationBarrier_entry:
	// succ:  l000000000007EC78
l000000000007EC78:
	sp = fp
	__sync(0x00)
	return
	// succ:  runtime.publicationBarrier_exit
runtime.publicationBarrier_exit:


// runtime.memclr
// Return size: 0
void runtime.memclr()
runtime.memclr_entry:
	// succ:  l000000000007EC88
l000000000007EC88:
	sp = fp
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r2 = Mem0[sp + 0x0000000000000010:word64]
	r4 = r2 + r1
	r3 = (word64) (r2 <u 8)
	branch r3 != 0x0000000000000000 l000000000007EC88_ds_t
	// succ:  l000000000007EC88_ds_f l000000000007EC88_ds_t
l000000000007EC88_ds_f:
	goto l000000000007ECA0
	// succ:  l000000000007ECA0
l000000000007EC88_ds_t:
	goto l000000000007ECE4
	// succ:  l000000000007ECE4
l000000000007ECA0:
	r3 = r1 + 0x0000000000000007
	branch r3 == 0x0000000000000000 l000000000007ECA0_ds_t
	// succ:  l000000000007ECA0_ds_f l000000000007ECA0_ds_t
l000000000007ECA0_ds_f:
	goto l000000000007ECAC
	// succ:  l000000000007ECAC
l000000000007ECA0_ds_t:
	goto l000000000007ECC0
	// succ:  l000000000007ECC0
l000000000007ECAC:
	Mem0[r1:byte] = (byte) 0x0000000000000000
	r1 = r1 + 1
	r3 = r1 + 0x0000000000000007
	branch r3 != 0x0000000000000000 l000000000007ECAC_ds_t
	// succ:  l000000000007ECAC_ds_f l000000000007ECAC_ds_t
l000000000007ECAC_ds_f:
	goto l000000000007ECC0
	// succ:  l000000000007ECC0
l000000000007ECAC_ds_t:
	goto l000000000007ECAC
	// succ:  l000000000007ECAC
l000000000007ECC0:
	r2 = r4 + -7
	r3 = (word64) (r1 <u r2)
	branch r3 == 0x0000000000000000 l000000000007ECC0_ds_t
	// succ:  l000000000007ECC0_ds_f l000000000007ECC0_ds_t
l000000000007ECC0_ds_f:
	goto l000000000007ECD0
	// succ:  l000000000007ECD0
l000000000007ECC0_ds_t:
	goto l000000000007ECE4
	// succ:  l000000000007ECE4
l000000000007ECD0:
	Mem0[r1:word64] = 0x0000000000000000
	r1 = r1 + 8
	r3 = (word64) (r1 <u r2)
	branch r3 != 0x0000000000000000 l000000000007ECD0_ds_t
	// succ:  l000000000007ECD0_ds_f l000000000007ECD0_ds_t
l000000000007ECD0_ds_f:
	goto l000000000007ECE4
	// succ:  l000000000007ECE4
l000000000007ECD0_ds_t:
	goto l000000000007ECD0
	// succ:  l000000000007ECD0
l000000000007ECE4:
	branch r1 == r4 l000000000007ECE4_ds_t
	// succ:  l000000000007ECE4_ds_f l000000000007ECE4_ds_t
l000000000007ECE4_ds_f:
	goto l000000000007ECEC
	// succ:  l000000000007ECEC
l000000000007ECE4_ds_t:
	goto l000000000007ECFC
	// succ:  l000000000007ECFC
l000000000007ECEC:
	Mem0[r1:byte] = (byte) 0x0000000000000000
	r1 = r1 + 1
	branch r1 != r4 l000000000007ECEC_ds_t
	// succ:  l000000000007ECEC_ds_f l000000000007ECEC_ds_t
l000000000007ECEC_ds_f:
	goto l000000000007ECFC
	// succ:  l000000000007ECFC
l000000000007ECEC_ds_t:
	goto l000000000007ECEC
	// succ:  l000000000007ECEC
l000000000007ECFC:
	return
	// succ:  runtime.memclr_exit
runtime.memclr_exit:


// runtime.memmove
// Return size: 0
void runtime.memmove()
runtime.memmove_entry:
	// succ:  l000000000007ED08
l000000000007ED08:
	sp = fp
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r2 = Mem0[sp + 0x0000000000000010:word64]
	r3 = Mem0[sp + 0x0000000000000018:word64]
	branch r3 != 0x0000000000000000 l000000000007ED08_ds_t
	// succ:  l000000000007ED08_ds_f l000000000007ED08_ds_t
l000000000007ED08_ds_f:
	goto l000000000007ED1C
	// succ:  l000000000007ED1C
l000000000007ED08_ds_t:
	goto l000000000007ED24
	// succ:  l000000000007ED24
l000000000007ED1C:
	return
	// succ:  runtime.memmove_exit
l000000000007ED24:
	r4 = (word64) (r2 <u r1)
	branch r4 != 0x0000000000000000 l000000000007ED24_ds_t
	// succ:  l000000000007ED24_ds_f l000000000007ED24_ds_t
l000000000007ED24_ds_f:
	goto l000000000007ED30
	// succ:  l000000000007ED30
l000000000007ED24_ds_t:
	goto l000000000007EDCC
	// succ:  l000000000007EDCC
l000000000007ED30:
	r6 = r3 + r1
l000000000007EDCC:
	r2 = r2 + r3
	r6 = r3 + r1
runtime.memmove_exit:


// _rt0_mips64_linux
// Return size: 0
void _rt0_mips64_linux()
_rt0_mips64_linux_entry:
	// succ:  l000000000007EE70
l000000000007EE70:
	sp = fp
	// succ:  l000000000007EE70_thunk__main
l000000000007EE70_thunk__main:
	call _main (retsize: 0;)
	return
	// succ:  _rt0_mips64_linux_exit
_rt0_mips64_linux_exit:


// _main
// Return size: 0
void _main()
_main_entry:
	// succ:  l000000000007EE80
l000000000007EE80:
	sp = fp
	r4 = (word64) Mem0[sp + 0x0000000000000004:int32]
	r5 = sp + 8
	// succ:  l000000000007EE84_thunk_main
l000000000007EE84_thunk_main:
	call main (retsize: 0;)
	return
	// succ:  _main_exit
_main_exit:


// main
// Return size: 0
void main()
main_entry:
	// succ:  l000000000007EE90
l000000000007EE90:
	sp = fp
	branch 0x0000000000000000 >= 0x0000000000000000 l000000000007EE90_ds_t
	// succ:  l000000000007EE90_ds_f l000000000007EE90_ds_t
l000000000007EE90_ds_f:
	goto l000000000007EE98
	// succ:  l000000000007EE98
l000000000007EE90_ds_t:
	// succ:  l000000000007EE98
l000000000007EE98:
main_exit:


// runtime.exit
// Return size: 0
void runtime.exit()
runtime.exit_entry:
	// succ:  l000000000007EEB8
l000000000007EEB8:
	sp = fp
	r4 = (word64) Mem0[sp + 0x0000000000000008:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	return
	// succ:  runtime.exit_exit
runtime.exit_exit:


// runtime.open
// Return size: 0
void runtime.open()
runtime.open_entry:
	// succ:  l000000000007EED0
l000000000007EED0:
	sp = fp
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r5 = (word64) Mem0[sp + 0x0000000000000010:int32]
	r6 = (word64) Mem0[sp + 0x0000000000000014:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	branch r7 == 0x0000000000000000 l000000000007EED0_ds_t
	// succ:  l000000000007EED0_ds_f l000000000007EED0_ds_t
l000000000007EED0_ds_f:
	goto l000000000007EEEC
	// succ:  l000000000007EEEC
l000000000007EED0_ds_t:
	goto l000000000007EEF0
	// succ:  l000000000007EEF0
l000000000007EEEC:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	// succ:  l000000000007EEF0
l000000000007EEF0:
	Mem0[sp + 0x0000000000000018:word32] = (word32) r2
	return
	// succ:  runtime.open_exit
runtime.open_exit:


// runtime.closefd
// Return size: 0
void runtime.closefd()
runtime.closefd_entry:
	// succ:  l000000000007EF00
l000000000007EF00:
	sp = fp
	r4 = (word64) Mem0[sp + 0x0000000000000008:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	branch r7 == 0x0000000000000000 l000000000007EF00_ds_t
	// succ:  l000000000007EF00_ds_f l000000000007EF00_ds_t
l000000000007EF00_ds_f:
	goto l000000000007EF14
	// succ:  l000000000007EF14
l000000000007EF00_ds_t:
	goto l000000000007EF18
	// succ:  l000000000007EF18
l000000000007EF14:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	// succ:  l000000000007EF18
l000000000007EF18:
	Mem0[sp + 0x0000000000000010:word32] = (word32) r2
	return
	// succ:  runtime.closefd_exit
runtime.closefd_exit:


// runtime.write
// Return size: 0
void runtime.write()
runtime.write_entry:
	// succ:  l000000000007EF28
l000000000007EF28:
	sp = fp
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r6 = (word64) Mem0[sp + 0x0000000000000018:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	branch r7 == 0x0000000000000000 l000000000007EF28_ds_t
	// succ:  l000000000007EF28_ds_f l000000000007EF28_ds_t
l000000000007EF28_ds_f:
	goto l000000000007EF44
	// succ:  l000000000007EF44
l000000000007EF28_ds_t:
	goto l000000000007EF48
	// succ:  l000000000007EF48
l000000000007EF44:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	// succ:  l000000000007EF48
l000000000007EF48:
	Mem0[sp + 0x0000000000000020:word32] = (word32) r2
	return
	// succ:  runtime.write_exit
runtime.write_exit:


// runtime.read
// Return size: 0
void runtime.read()
runtime.read_entry:
	// succ:  l000000000007EF58
l000000000007EF58:
	sp = fp
	r4 = (word64) Mem0[sp + 0x0000000000000008:int32]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r6 = (word64) Mem0[sp + 0x0000000000000018:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	branch r7 == 0x0000000000000000 l000000000007EF58_ds_t
	// succ:  l000000000007EF58_ds_f l000000000007EF58_ds_t
l000000000007EF58_ds_f:
	goto l000000000007EF74
	// succ:  l000000000007EF74
l000000000007EF58_ds_t:
	goto l000000000007EF78
	// succ:  l000000000007EF78
l000000000007EF74:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	// succ:  l000000000007EF78
l000000000007EF78:
	Mem0[sp + 0x0000000000000020:word32] = (word32) r2
	return
	// succ:  runtime.read_exit
runtime.read_exit:


// runtime.usleep
// Return size: 0
void runtime.usleep()
runtime.usleep_entry:
	// succ:  l000000000007EF88
l000000000007EF88:
	sp = fp
	sp = sp + -24
	r3 = (word64) Mem0[sp + 0x0000000000000020:uint32]
	r5 = r3
	r4 = 0x00000000000F0000
	r4 = r4 | 0x0000000000004240
	lo = r3 / r4
	hi = r3 % r4
	r3 = lo
	Mem0[sp + 0x0000000000000008:word64] = r3
runtime.usleep_exit:


// runtime.gettid
// Return size: 0
void runtime.gettid()
runtime.gettid_entry:
	// succ:  l000000000007EFE0
l000000000007EFE0:
	sp = fp
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	Mem0[sp + 0x0000000000000008:word32] = (word32) r2
	return
	// succ:  runtime.gettid_exit
runtime.gettid_exit:


// runtime.raise
// Return size: 0
void runtime.raise()
runtime.raise_entry:
	// succ:  l000000000007EFF8
l000000000007EFF8:
	sp = fp
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	r4 = r2
	r5 = (word64) Mem0[sp + 0x0000000000000008:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	return
	// succ:  runtime.raise_exit
runtime.raise_exit:


// runtime.raiseproc
// Return size: 0
void runtime.raiseproc()
runtime.raiseproc_entry:
	// succ:  l000000000007F018
l000000000007F018:
	sp = fp
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	r4 = r2
	r5 = (word64) Mem0[sp + 0x0000000000000008:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	return
	// succ:  runtime.raiseproc_exit
runtime.raiseproc_exit:


// runtime.setitimer
// Return size: 0
void runtime.setitimer()
runtime.setitimer_entry:
	// succ:  l000000000007F038
l000000000007F038:
	sp = fp
	r4 = (word64) Mem0[sp + 0x0000000000000008:int32]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r6 = Mem0[sp + 0x0000000000000018:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	return
	// succ:  runtime.setitimer_exit
runtime.setitimer_exit:


// runtime.mincore
// Return size: 0
void runtime.mincore()
runtime.mincore_entry:
	// succ:  l000000000007F058
l000000000007F058:
	sp = fp
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r6 = Mem0[sp + 0x0000000000000018:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
runtime.mincore_exit:


// time.now
// Return size: 0
void time.now()
time.now_entry:
	// succ:  l000000000007F080
l000000000007F080:
	sp = fp
	sp = sp + -24
	lo = r4 / sp
	hi = r4 % sp
	r5 = 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	r3 = Mem0[sp:word64]
	r5 = Mem0[sp + 0x0000000000000008:word64]
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
time.now_exit:


// runtime.nanotime
// Return size: 0
void runtime.nanotime()
runtime.nanotime_entry:
	// succ:  l000000000007F0C0
l000000000007F0C0:
	sp = fp
	sp = sp + -24
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r5 / sp
	hi = r5 % sp
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	r3 = Mem0[sp:word64]
	r5 = Mem0[sp + 0x0000000000000008:word64]
	r4 = 0x000000003B9A0000
	r4 = r4 | 0x000000000000CA00
runtime.nanotime_exit:


// runtime.rtsigprocmask
// Return size: 0
void runtime.rtsigprocmask()
runtime.rtsigprocmask_entry:
	// succ:  l000000000007F100
l000000000007F100:
	sp = fp
	r4 = (word64) Mem0[sp + 0x0000000000000008:int32]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r6 = Mem0[sp + 0x0000000000000018:word64]
	r7 = (word64) Mem0[sp + 0x0000000000000020:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	branch r7 == 0x0000000000000000 l000000000007F100_ds_t
	// succ:  l000000000007F100_ds_f l000000000007F100_ds_t
l000000000007F100_ds_f:
	goto l000000000007F120
	// succ:  l000000000007F120
l000000000007F100_ds_t:
	goto l000000000007F124
	// succ:  l000000000007F124
l000000000007F120:
	Mem0[r0 + 0x00000000000000F1:word64] = 0x0000000000000000
	// succ:  l000000000007F124
l000000000007F124:
	return
	// succ:  runtime.rtsigprocmask_exit
runtime.rtsigprocmask_exit:


// runtime.rt_sigaction
// Return size: 0
void runtime.rt_sigaction()
runtime.rt_sigaction_entry:
	// succ:  l000000000007F130
l000000000007F130:
	sp = fp
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r6 = Mem0[sp + 0x0000000000000018:word64]
	r7 = Mem0[sp + 0x0000000000000020:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	Mem0[sp + 0x0000000000000028:word32] = (word32) r2
	return
	// succ:  runtime.rt_sigaction_exit
runtime.rt_sigaction_exit:


// runtime.sigfwd
// Return size: 0
void runtime.sigfwd()
runtime.sigfwd_entry:
	// succ:  l000000000007F158
l000000000007F158:
	sp = fp
	sp = sp + -8
	Mem0[sp:word64] = ra
	r4 = (word64) Mem0[sp + 0x0000000000000018:int32]
	r5 = Mem0[sp + 0x0000000000000020:word64]
	r6 = Mem0[sp + 0x0000000000000028:word64]
	r25 = Mem0[sp + 0x0000000000000010:word64]
	call r25 (retsize: 0;)
	r4 = Mem0[sp:word64]
	sp = sp + 8
	call r4 (retsize: 0;)
	return
	// succ:  runtime.sigfwd_exit
runtime.sigfwd_exit:


// runtime.sigtramp
// Return size: 0
void runtime.sigtramp()
runtime.sigtramp_entry:
	// succ:  l000000000007F188
l000000000007F188:
	sp = fp
	sp = sp + -72
	Mem0[sp:word64] = ra
	branch 0x0000000000000000 >= 0x0000000000000000 l000000000007F188_ds_t
	goto l000000000007F188_ds_f
	// succ:  l000000000007F188_ds_f l000000000007F188_ds_t
l000000000007F188:
l000000000007F188_ds_f:
	goto l000000000007F198
	// succ:  l000000000007F198
l000000000007F188_ds_t:
	// succ:  l000000000007F198
l000000000007F198:
runtime.sigtramp_exit:


// runtime.cgoSigtramp
// Return size: 0
void runtime.cgoSigtramp()
runtime.cgoSigtramp_entry:
	// succ:  l000000000007F1F8
l000000000007F1F8:
	sp = fp
	// succ:  l000000000007F1F8_thunk_runtime.sigtramp
l000000000007F1F8_thunk_runtime.sigtramp:
	call runtime.sigtramp (retsize: 0;)
	return
	// succ:  runtime.cgoSigtramp_exit
runtime.cgoSigtramp_exit:


// runtime.mmap
// Return size: 0
void runtime.mmap()
runtime.mmap_entry:
	// succ:  l000000000007F208
l000000000007F208:
	sp = fp
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r6 = (word64) Mem0[sp + 0x0000000000000018:int32]
	r7 = (word64) Mem0[sp + 0x000000000000001C:int32]
	r8 = (word64) Mem0[sp + 0x0000000000000020:int32]
	r9 = (word64) Mem0[sp + 0x0000000000000024:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	Mem0[sp + 0x0000000000000028:word64] = r2
	return
	// succ:  runtime.mmap_exit
runtime.mmap_exit:


// runtime.munmap
// Return size: 0
void runtime.munmap()
runtime.munmap_entry:
	// succ:  l000000000007F238
l000000000007F238:
	sp = fp
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	branch r7 == 0x0000000000000000 l000000000007F238_ds_t
	// succ:  l000000000007F238_ds_f l000000000007F238_ds_t
l000000000007F238_ds_f:
	goto l000000000007F250
	// succ:  l000000000007F250
l000000000007F238_ds_t:
	goto l000000000007F254
	// succ:  l000000000007F254
l000000000007F250:
	Mem0[r0 + 0x00000000000000F3:word64] = 0x0000000000000000
	// succ:  l000000000007F254
l000000000007F254:
	return
	// succ:  runtime.munmap_exit
runtime.munmap_exit:


// runtime.madvise
// Return size: 0
void runtime.madvise()
runtime.madvise_entry:
	// succ:  l000000000007F260
l000000000007F260:
	sp = fp
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r6 = (word64) Mem0[sp + 0x0000000000000018:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	return
	// succ:  runtime.madvise_exit
runtime.madvise_exit:


// runtime.futex
// Return size: 0
void runtime.futex()
runtime.futex_entry:
	// succ:  l000000000007F280
l000000000007F280:
	sp = fp
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r5 = (word64) Mem0[sp + 0x0000000000000010:int32]
	r6 = (word64) Mem0[sp + 0x0000000000000014:int32]
	r7 = Mem0[sp + 0x0000000000000018:word64]
	r8 = Mem0[sp + 0x0000000000000020:word64]
	r9 = (word64) Mem0[sp + 0x0000000000000028:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	Mem0[sp + 0x0000000000000030:word32] = (word32) r2
	return
	// succ:  runtime.futex_exit
runtime.futex_exit:


// runtime.clone
// Return size: 0
void runtime.clone()
runtime.clone_entry:
	// succ:  l000000000007F2B0
l000000000007F2B0:
	sp = fp
	r4 = (word64) Mem0[sp + 0x0000000000000008:int32]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r16 = Mem0[sp + 0x0000000000000018:word64]
	r17 = Mem0[sp + 0x0000000000000020:word64]
	r18 = Mem0[sp + 0x0000000000000028:word64]
	Mem0[r5 - 0x0000000000000008:word64] = r16
	Mem0[r5 - 0x0000000000000010:word64] = r17
	Mem0[r5 - 0x0000000000000018:word64] = r18
	lo = r16 / 0x0000000000000000
	hi = r16 % 0x0000000000000000
	Mem0[r5 - 0x0000000000000020:word64] = r16
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	branch r2 == 0x0000000000000000 l000000000007F2B0_ds_t
	// succ:  l000000000007F2B0_ds_f l000000000007F2B0_ds_t
l000000000007F2B0_ds_f:
	goto l000000000007F2E8
	// succ:  l000000000007F2E8
l000000000007F2B0_ds_t:
	goto l000000000007F2F4
	// succ:  l000000000007F2F4
l000000000007F2E8:
	Mem0[sp + 0x0000000000000030:word32] = (word32) r2
	return
	// succ:  runtime.clone_exit
l000000000007F2F4:
	call runtime.reginit (retsize: 0;)
	r16 = Mem0[sp - 0x0000000000000020:word64]
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	branch r16 == r1 l000000000007F2F4_ds_t
	// succ:  l000000000007F2F4_ds_f l000000000007F2F4_ds_t
l000000000007F2F4_ds_f:
	goto l000000000007F30C
	// succ:  l000000000007F30C
l000000000007F2F4_ds_t:
	goto l000000000007F310
	// succ:  l000000000007F310
l000000000007F30C:
	Mem0[r0:word64] = 0x0000000000000000
	// succ:  l000000000007F310
l000000000007F310:
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	r18 = Mem0[sp - 0x0000000000000018:word64]
	r17 = Mem0[sp - 0x0000000000000010:word64]
	r16 = Mem0[sp - 0x0000000000000008:word64]
	branch r16 == 0x0000000000000000 l000000000007F310_ds_t
	// succ:  l000000000007F310_ds_f l000000000007F310_ds_t
l000000000007F310_ds_f:
	goto l000000000007F32C
	// succ:  l000000000007F32C
l000000000007F310_ds_t:
	goto l000000000007F340
	// succ:  l000000000007F340
l000000000007F32C:
	branch r17 == 0x0000000000000000 l000000000007F32C_ds_t
	// succ:  l000000000007F32C_ds_f l000000000007F32C_ds_t
l000000000007F32C_ds_f:
	goto l000000000007F334
	// succ:  l000000000007F334
l000000000007F32C_ds_t:
	goto l000000000007F340
	// succ:  l000000000007F340
l000000000007F334:
	Mem0[r16 + 0x0000000000000048:word64] = r2
	Mem0[r17 + 0x0000000000000030:word64] = r16
	r30 = r17
	// succ:  l000000000007F340
l000000000007F340:
	call r18 (retsize: 0;)
	// succ:  l000000000007F348
l000000000007F348:
	lo = r4 / 0x0000000000000000
	hi = r4 % 0x0000000000000000
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	goto l000000000007F348
	// succ:  l000000000007F348
runtime.clone_exit:


// runtime.sigaltstack
// Return size: 0
void runtime.sigaltstack()
runtime.sigaltstack_entry:
	// succ:  l000000000007F360
l000000000007F360:
	sp = fp
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	branch r7 == 0x0000000000000000 l000000000007F360_ds_t
	// succ:  l000000000007F360_ds_f l000000000007F360_ds_t
l000000000007F360_ds_f:
	goto l000000000007F378
	// succ:  l000000000007F378
l000000000007F360_ds_t:
	goto l000000000007F37C
	// succ:  l000000000007F37C
l000000000007F378:
	Mem0[r0 + 0x00000000000000F1:word64] = 0x0000000000000000
	// succ:  l000000000007F37C
l000000000007F37C:
	return
	// succ:  runtime.sigaltstack_exit
runtime.sigaltstack_exit:


// runtime.osyield
// Return size: 0
void runtime.osyield()
runtime.osyield_entry:
	// succ:  l000000000007F388
l000000000007F388:
	sp = fp
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	return
	// succ:  runtime.osyield_exit
runtime.osyield_exit:


// runtime.sched_getaffinity
// Return size: 0
void runtime.sched_getaffinity()
runtime.sched_getaffinity_entry:
	// succ:  l000000000007F398
l000000000007F398:
	sp = fp
	r4 = Mem0[sp + 0x0000000000000008:word64]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r6 = Mem0[sp + 0x0000000000000018:word64]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	Mem0[sp + 0x0000000000000020:word32] = (word32) r2
	return
	// succ:  runtime.sched_getaffinity_exit
runtime.sched_getaffinity_exit:


// runtime.epollwait
// Return size: 0
void runtime.epollwait()
runtime.epollwait_entry:
	// succ:  l000000000007F3B8
l000000000007F3B8:
	sp = fp
	r4 = (word64) Mem0[sp + 0x0000000000000008:int32]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	r6 = (word64) Mem0[sp + 0x0000000000000018:int32]
	r7 = (word64) Mem0[sp + 0x000000000000001C:int32]
	lo = r2 / 0x0000000000000000
	hi = r2 % 0x0000000000000000
	__syscall(0x00000000)
	Mem0[sp + 0x0000000000000020:word32] = (word32) r2
	return
	// succ:  runtime.epollwait_exit
runtime.epollwait_exit:


// runtime.save_g
// Return size: 0
void runtime.save_g()
runtime.save_g_entry:
	// succ:  l000000000007F3E0
l000000000007F3E0:
	sp = fp
	r23 = 0x00000000000F0000
	lo = r23 / r23
	hi = r23 % r23
	r23 = (word64) Mem0[r23 - 0x0000000000006995:int8]
	branch r23 == 0x0000000000000000 l000000000007F3E0_ds_t
	// succ:  l000000000007F3E0_ds_f l000000000007F3E0_ds_t
l000000000007F3E0_ds_f:
	goto l000000000007F3F4
	// succ:  l000000000007F3F4
l000000000007F3E0_ds_t:
	goto l000000000007F404
	// succ:  l000000000007F404
l000000000007F3F4:
	r23 = r3
	r3 = __read_hardware_register(0x1D)
	Mem0[r3 - 0x0000000000007000:word64] = r30
	r3 = r23
	// succ:  l000000000007F404
l000000000007F404:
	return
	// succ:  runtime.save_g_exit
runtime.save_g_exit:


// runtime.load_g
// Return size: 0
void runtime.load_g()
runtime.load_g_entry:
	// succ:  l000000000007F410
l000000000007F410:
	sp = fp
	r3 = __read_hardware_register(0x1D)
	r30 = Mem0[r3 - 0x0000000000007000:word64]
	return
	// succ:  runtime.load_g_exit
runtime.load_g_exit:


// runtime/internal/atomic.Cas
// Return size: 0
void runtime/internal/atomic.Cas()
runtime/internal/atomic.Cas_entry:
	// succ:  l000000000007F420
l000000000007F420:
	sp = fp
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000010:int32]
	r5 = (word64) Mem0[sp + 0x0000000000000014:int32]
	__sync(0x00)
	goto l000000000007F430
	// succ:  l000000000007F430
l000000000007F420_ds_f:
	goto l000000000007F440
	// succ:  l000000000007F440
l000000000007F420_ds_t:
	goto l000000000007F460
	// succ:  l000000000007F460
l000000000007F430:
	r3 = r5
	r4 = __load_linked_32(Mem0[r1:word32])
	branch r2 != r4 l000000000007F420_ds_t
	goto l000000000007F420_ds_f
	// succ:  l000000000007F420_ds_f l000000000007F420_ds_t
l000000000007F440:
	r3 = __store_conditional_32(Mem0[r1:word32], r3)
	branch r3 == 0x0000000000000000 l000000000007F440_ds_t
	// succ:  l000000000007F440_ds_f l000000000007F440_ds_t
l000000000007F440_ds_f:
	goto l000000000007F44C
	// succ:  l000000000007F44C
l000000000007F440_ds_t:
	goto l000000000007F430
	// succ:  l000000000007F430
l000000000007F44C:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	__sync(0x00)
	return
	// succ:  runtime/internal/atomic.Cas_exit
l000000000007F460:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000018:byte] = (byte) r1
	__sync(0x00)
	return
	// succ:  runtime/internal/atomic.Cas_exit
runtime/internal/atomic.Cas_exit:


// runtime/internal/atomic.Cas64
// Return size: 0
void runtime/internal/atomic.Cas64()
runtime/internal/atomic.Cas64_entry:
	// succ:  l000000000007F478 l000000000007F478
l000000000007F478:
	sp = fp
	sp = v3
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r2 = Mem0[sp + 0x0000000000000010:word64]
	r5 = Mem0[sp + 0x0000000000000018:word64]
	__sync(0x00)
	goto l000000000007F488
	// succ:  l000000000007F488
l000000000007F478_ds_f:
	goto l000000000007F498
	// succ:  l000000000007F498
l000000000007F478_ds_t:
	goto l000000000007F4B8
	// succ:  l000000000007F4B8
l000000000007F488:
	r3 = r5
	r4 = __load_linked_64(Mem0[r1:word64])
	branch r2 != r4 l000000000007F478_ds_t
	goto l000000000007F478_ds_f
	// succ:  l000000000007F478_ds_f l000000000007F478_ds_t
l000000000007F498:
	r3 = __store_conditional_64(Mem0[r1:word64], r3)
	branch r3 == 0x0000000000000000 l000000000007F498_ds_t
	// succ:  l000000000007F498_ds_f l000000000007F498_ds_t
l000000000007F498_ds_f:
	goto l000000000007F4A4
	// succ:  l000000000007F4A4
l000000000007F498_ds_t:
	goto l000000000007F488
	// succ:  l000000000007F488
l000000000007F4A4:
	lo = r1 / 0x0000000000000000
	hi = r1 % 0x0000000000000000
	Mem0[sp + 0x0000000000000020:byte] = (byte) r1
	__sync(0x00)
	return
	// succ:  runtime/internal/atomic.Cas64_exit
l000000000007F4B8:
	r1 = 0x0000000000000000
	Mem0[sp + 0x0000000000000020:byte] = (byte) r1
	__sync(0x00)
	return
	// succ:  runtime/internal/atomic.Cas64_exit
runtime/internal/atomic.Cas64_exit:


// runtime/internal/atomic.Casuintptr
// Return size: 0
void runtime/internal/atomic.Casuintptr()
runtime/internal/atomic.Casuintptr_entry:
	// succ:  l000000000007F4D0
l000000000007F4D0:
	sp = fp
	// succ:  l000000000007F4D0_thunk_runtime/internal/atomic.Cas64
l000000000007F4D0_thunk_runtime/internal/atomic.Cas64:
	call runtime/internal/atomic.Cas64 (retsize: 0;)
	return
	// succ:  runtime/internal/atomic.Casuintptr_exit
runtime/internal/atomic.Casuintptr_exit:


// runtime/internal/atomic.Loaduintptr
// Return size: 0
void runtime/internal/atomic.Loaduintptr()
runtime/internal/atomic.Loaduintptr_entry:
	// succ:  l000000000007F4E0
l000000000007F4E0:
	sp = fp
	// succ:  l000000000007F4E0_thunk_runtime/internal/atomic.Load64
l000000000007F4E0_thunk_runtime/internal/atomic.Load64:
	call runtime/internal/atomic.Load64 (retsize: 0;)
	return
	// succ:  runtime/internal/atomic.Loaduintptr_exit
runtime/internal/atomic.Loaduintptr_exit:


// runtime/internal/atomic.Loaduint
// Return size: 0
void runtime/internal/atomic.Loaduint()
runtime/internal/atomic.Loaduint_entry:
	// succ:  l000000000007F4F0
l000000000007F4F0:
	sp = fp
	// succ:  l000000000007F4F0_thunk_runtime/internal/atomic.Load64
l000000000007F4F0_thunk_runtime/internal/atomic.Load64:
	call runtime/internal/atomic.Load64 (retsize: 0;)
	return
	// succ:  runtime/internal/atomic.Loaduint_exit
runtime/internal/atomic.Loaduint_exit:


// runtime/internal/atomic.Storeuintptr
// Return size: 0
void runtime/internal/atomic.Storeuintptr()
runtime/internal/atomic.Storeuintptr_entry:
	// succ:  l000000000007F500
l000000000007F500:
	sp = fp
	// succ:  l000000000007F500_thunk_runtime/internal/atomic.Store64
l000000000007F500_thunk_runtime/internal/atomic.Store64:
	call runtime/internal/atomic.Store64 (retsize: 0;)
	return
	// succ:  runtime/internal/atomic.Storeuintptr_exit
runtime/internal/atomic.Storeuintptr_exit:


// runtime/internal/atomic.Loadint64
// Return size: 0
void runtime/internal/atomic.Loadint64()
runtime/internal/atomic.Loadint64_entry:
	// succ:  l000000000007F510
l000000000007F510:
	sp = fp
	// succ:  l000000000007F510_thunk_runtime/internal/atomic.Load64
l000000000007F510_thunk_runtime/internal/atomic.Load64:
	call runtime/internal/atomic.Load64 (retsize: 0;)
	return
	// succ:  runtime/internal/atomic.Loadint64_exit
runtime/internal/atomic.Loadint64_exit:


// runtime/internal/atomic.Xaddint64
// Return size: 0
void runtime/internal/atomic.Xaddint64()
runtime/internal/atomic.Xaddint64_entry:
	// succ:  l000000000007F520
l000000000007F520:
	sp = fp
	// succ:  l000000000007F520_thunk_runtime/internal/atomic.Xadd64
l000000000007F520_thunk_runtime/internal/atomic.Xadd64:
	call runtime/internal/atomic.Xadd64 (retsize: 0;)
	return
	// succ:  runtime/internal/atomic.Xaddint64_exit
runtime/internal/atomic.Xaddint64_exit:


// runtime/internal/atomic.Casp1
// Return size: 0
void runtime/internal/atomic.Casp1()
runtime/internal/atomic.Casp1_entry:
	// succ:  l000000000007F530
l000000000007F530:
	sp = fp
	// succ:  l000000000007F530_thunk_runtime/internal/atomic.Cas64
l000000000007F530_thunk_runtime/internal/atomic.Cas64:
	call runtime/internal/atomic.Cas64 (retsize: 0;)
	return
	// succ:  runtime/internal/atomic.Casp1_exit
runtime/internal/atomic.Casp1_exit:


// runtime/internal/atomic.Xadd
// Return size: 0
void runtime/internal/atomic.Xadd()
runtime/internal/atomic.Xadd_entry:
	// succ:  l000000000007F540
l000000000007F540:
	sp = fp
	r2 = Mem0[sp + 0x0000000000000008:word64]
	r3 = (word64) Mem0[sp + 0x0000000000000010:int32]
	__sync(0x00)
	// succ:  l000000000007F54C
l000000000007F54C:
	r1 = __load_linked_32(Mem0[r2:word32])
	r4 = r3 + r1
	r1 = r4
	r4 = __store_conditional_32(Mem0[r2:word32], r4)
	branch r4 == 0x0000000000000000 l000000000007F54C_ds_t
	// succ:  l000000000007F54C_ds_f l000000000007F54C_ds_t
l000000000007F54C_ds_f:
	goto l000000000007F564
	// succ:  l000000000007F564
l000000000007F54C_ds_t:
	goto l000000000007F54C
	// succ:  l000000000007F54C
l000000000007F564:
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	__sync(0x00)
	return
	// succ:  runtime/internal/atomic.Xadd_exit
runtime/internal/atomic.Xadd_exit:


// runtime/internal/atomic.Xadd64
// Return size: 0
void runtime/internal/atomic.Xadd64()
runtime/internal/atomic.Xadd64_entry:
	// succ:  l000000000007F578
l000000000007F578:
	sp = fp
	r2 = Mem0[sp + 0x0000000000000008:word64]
	r3 = Mem0[sp + 0x0000000000000010:word64]
	__sync(0x00)
	// succ:  l000000000007F584
l000000000007F584:
	r1 = __load_linked_64(Mem0[r2:word64])
	lo = r4 / r3
	hi = r4 % r3
	r1 = r4
	r4 = __store_conditional_64(Mem0[r2:word64], r4)
	branch r4 == 0x0000000000000000 l000000000007F584_ds_t
	// succ:  l000000000007F584_ds_f l000000000007F584_ds_t
l000000000007F584_ds_f:
	goto l000000000007F59C
	// succ:  l000000000007F59C
l000000000007F584_ds_t:
	goto l000000000007F584
	// succ:  l000000000007F584
l000000000007F59C:
	Mem0[sp + 0x0000000000000018:word64] = r1
	__sync(0x00)
	return
	// succ:  runtime/internal/atomic.Xadd64_exit
runtime/internal/atomic.Xadd64_exit:


// runtime/internal/atomic.Xchg
// Return size: 0
void runtime/internal/atomic.Xchg()
runtime/internal/atomic.Xchg_entry:
	// succ:  l000000000007F5B0
l000000000007F5B0:
	sp = fp
	r2 = Mem0[sp + 0x0000000000000008:word64]
	r5 = (word64) Mem0[sp + 0x0000000000000010:int32]
	__sync(0x00)
	// succ:  l000000000007F5BC
l000000000007F5BC:
	r3 = r5
	r1 = __load_linked_32(Mem0[r2:word32])
	r3 = __store_conditional_32(Mem0[r2:word32], r3)
	branch r3 == 0x0000000000000000 l000000000007F5BC_ds_t
	// succ:  l000000000007F5BC_ds_f l000000000007F5BC_ds_t
l000000000007F5BC_ds_f:
	goto l000000000007F5D0
	// succ:  l000000000007F5D0
l000000000007F5BC_ds_t:
	goto l000000000007F5BC
	// succ:  l000000000007F5BC
l000000000007F5D0:
	Mem0[sp + 0x0000000000000018:word32] = (word32) r1
	__sync(0x00)
	return
	// succ:  runtime/internal/atomic.Xchg_exit
runtime/internal/atomic.Xchg_exit:


// runtime/internal/atomic.Xchg64
// Return size: 0
void runtime/internal/atomic.Xchg64()
runtime/internal/atomic.Xchg64_entry:
	// succ:  l000000000007F5E0
l000000000007F5E0:
	sp = fp
	r2 = Mem0[sp + 0x0000000000000008:word64]
	r5 = Mem0[sp + 0x0000000000000010:word64]
	__sync(0x00)
	// succ:  l000000000007F5EC
l000000000007F5EC:
	r3 = r5
	r1 = __load_linked_64(Mem0[r2:word64])
	r3 = __store_conditional_64(Mem0[r2:word64], r3)
	branch r3 == 0x0000000000000000 l000000000007F5EC_ds_t
	// succ:  l000000000007F5EC_ds_f l000000000007F5EC_ds_t
l000000000007F5EC_ds_f:
	goto l000000000007F600
	// succ:  l000000000007F600
l000000000007F5EC_ds_t:
	goto l000000000007F5EC
	// succ:  l000000000007F5EC
l000000000007F600:
	Mem0[sp + 0x0000000000000018:word64] = r1
	__sync(0x00)
	return
	// succ:  runtime/internal/atomic.Xchg64_exit
runtime/internal/atomic.Xchg64_exit:


// runtime/internal/atomic.StorepNoWB
// Return size: 0
void runtime/internal/atomic.StorepNoWB()
runtime/internal/atomic.StorepNoWB_entry:
	// succ:  l000000000007F610
l000000000007F610:
	sp = fp
	// succ:  l000000000007F610_thunk_runtime/internal/atomic.Store64
l000000000007F610_thunk_runtime/internal/atomic.Store64:
	call runtime/internal/atomic.Store64 (retsize: 0;)
	return
	// succ:  runtime/internal/atomic.StorepNoWB_exit
runtime/internal/atomic.StorepNoWB_exit:


// runtime/internal/atomic.Store
// Return size: 0
void runtime/internal/atomic.Store()
runtime/internal/atomic.Store_entry:
	// succ:  l000000000007F620
l000000000007F620:
	sp = fp
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000010:int32]
	__sync(0x00)
	Mem0[r1:word32] = (word32) r2
	__sync(0x00)
	return
	// succ:  runtime/internal/atomic.Store_exit
runtime/internal/atomic.Store_exit:


// runtime/internal/atomic.Store64
// Return size: 0
void runtime/internal/atomic.Store64()
runtime/internal/atomic.Store64_entry:
	// succ:  l000000000007F640
l000000000007F640:
	sp = fp
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r2 = Mem0[sp + 0x0000000000000010:word64]
	__sync(0x00)
	Mem0[r1:word64] = r2
	__sync(0x00)
	return
	// succ:  runtime/internal/atomic.Store64_exit
runtime/internal/atomic.Store64_exit:


// runtime/internal/atomic.Or8
// Return size: 0
void runtime/internal/atomic.Or8()
runtime/internal/atomic.Or8_entry:
	// succ:  l000000000007F660
l000000000007F660:
	sp = fp
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000010:byte]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3 + r1
	r1 = r1 ^ 0x0000000000000003
	r4 = r1 + 0x0000000000000003
runtime/internal/atomic.Or8_exit:


// runtime/internal/atomic.And8
// Return size: 0
void runtime/internal/atomic.And8()
runtime/internal/atomic.And8_entry:
	// succ:  l000000000007F6A8
l000000000007F6A8:
	sp = fp
	r1 = Mem0[sp + 0x0000000000000008:word64]
	r2 = (word64) Mem0[sp + 0x0000000000000010:byte]
	lo = r3 / 0x0000000000000000
	hi = r3 % 0x0000000000000000
	r3 = r3 + r1
	r1 = r1 ^ 0x0000000000000003
	r4 = r1 + 0x0000000000000003
runtime/internal/atomic.And8_exit:


// runtime/internal/atomic.Load
// Return size: 0
void runtime/internal/atomic.Load()
runtime/internal/atomic.Load_entry:
	// succ:  l000000000007F700
l000000000007F700:
	sp = fp
	r1 = Mem0[sp + 0x0000000000000008:word64]
	__sync(0x00)
	r1 = (word64) Mem0[r1:uint32]
	__sync(0x00)
	Mem0[sp + 0x0000000000000010:word32] = (word32) r1
	return
	// succ:  runtime/internal/atomic.Load_exit
runtime/internal/atomic.Load_exit:


// runtime/internal/atomic.Load64
// Return size: 0
void runtime/internal/atomic.Load64()
runtime/internal/atomic.Load64_entry:
	// succ:  l000000000007F720
l000000000007F720:
	sp = fp
	r1 = Mem0[sp + 0x0000000000000008:word64]
	__sync(0x00)
	r1 = Mem0[r1:word64]
	__sync(0x00)
	Mem0[sp + 0x0000000000000010:word64] = r1
	return
	// succ:  runtime/internal/atomic.Load64_exit
runtime/internal/atomic.Load64_exit:


// runtime/internal/atomic.Loadp
// Return size: 0
void runtime/internal/atomic.Loadp()
runtime/internal/atomic.Loadp_entry:
	// succ:  l000000000007F740
l000000000007F740:
	sp = fp
	r1 = Mem0[sp + 0x0000000000000008:word64]
	__sync(0x00)
	r1 = Mem0[r1:word64]
	__sync(0x00)
	Mem0[sp + 0x0000000000000010:word64] = r1
	return
	// succ:  runtime/internal/atomic.Loadp_exit
runtime/internal/atomic.Loadp_exit:


// runtime.etext
// Return size: 0
void runtime.etext()
runtime.etext_entry:
runtime.etext_exit:


