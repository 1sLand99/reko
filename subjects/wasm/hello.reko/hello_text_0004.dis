// fn00110287
// Return size: 0
word32 fn00110287(word32 arg0, word32 arg1, word32 arg2)
fn00110287_entry:
	// succ:  l00110287
l00110287:
	v46 = Mem0[0x00140030<p32>:word32]
	loc45 = v46
	v46 = arg1
	loc26 = v46
	v46 = arg0
	v47 = 8<32>
	v46 = v46 + v47
	loc36 = v46
	v46 = loc36
	v47 = 3<32>
	v46 = v46 + v47
	loc37 = v46
	v46 = loc37
	v48 = Mem0[v46:int8]
	v46 = CONVERT(v48, int8, word32)
	loc38 = v46
	v46 = loc38
	v47 = 0x18<32>
	v46 = v46 << v47
	v47 = 0x18<32>
	v46 = v46 >> v47
	v47 = 0<32>
	v49 = v46 < v47
	loc39 = v49
	v46 = loc39
	branch !v46 l001102E7
	// succ:  l001102B7 l001102E7
l001102B7:
	v46 = arg0
	v47 = 4<32>
	v46 = v46 + v47
	loc41 = v46
	v46 = loc41
	v46 = Mem0[v46:word32]
	loc6 = v46
	v46 = loc36
	v46 = Mem0[v46:word32]
	loc7 = v46
	v46 = loc7
	v47 = 0x7FFFFFFF<32>
	v46 = v46 & v47
	loc8 = v46
	v46 = loc8
	v47 = 0xFFFFFFFF<32>
	v46 = v46 + v47
	loc42 = v46
	v46 = loc42
	loc14 = v46
	v46 = loc6
	loc15 = v46
	goto l001102F7
	// succ:  l001102F7
l001102E7:
	v46 = loc38
	v47 = 0xFF<32>
	v46 = v46 & v47
	loc40 = v46
	v46 = 1<32>
	loc14 = v46
	v46 = loc40
	loc15 = v46
	// succ:  l001102F7
l001102F7:
	v46 = arg2
	loc9 = v46
	v46 = loc9
	v47 = loc26
	v46 = v46 - v47
	loc10 = v46
	v46 = loc10
	v47 = 2<32>
	v46 = v46 >> v47
	loc11 = v46
	v46 = loc11
	v47 = 0<32>
	v49 = v46 == v47
	loc12 = v49
	// succ:  l00110311
l00110311:
	v46 = loc12
	v49 = v46 == 0<32>
	branch !v49 l00110421
	// succ:  l00110318 l00110421
l00110318:
	v46 = loc14
	v47 = loc15
	v46 = v46 - v47
	loc13 = v46
	v46 = loc13
	v47 = loc11
	v49 = v46 <u v47
	loc16 = v49
	v46 = loc16
	branch !v46 l00110355
	// succ:  l0011032A l00110355
l0011032A:
	v46 = loc15
	v47 = loc11
	v46 = v46 + v47
	loc17 = v46
	v46 = loc17
	v47 = loc14
	v46 = v46 - v47
	loc18 = v46
	v46 = arg0
	v47 = loc14
	v50 = loc18
	v51 = loc15
	v52 = loc15
	v53 = 0<32>
	v54 = 0<32>
	fn0011CDB7(v46, v47, v50, v51, v52, v53, v54)
	v46 = loc37
	v55 = Mem0[v46:int8]
	v46 = CONVERT(v55, int8, word32)
	loc5 = v46
	v46 = loc5
	loc20 = v46
	goto l00110359
	// succ:  l00110359
l00110355:
	v46 = loc38
	loc20 = v46
	// succ:  l00110359
l00110359:
	v46 = loc20
	v47 = 0x18<32>
	v46 = v46 << v47
	v47 = 0x18<32>
	v46 = v46 >> v47
	v47 = 0<32>
	v49 = v46 < v47
	loc19 = v49
	v46 = loc19
	branch !v46 l00110377
	// succ:  l0011036B l00110377
l0011036B:
	v46 = arg0
	v46 = Mem0[v46:word32]
	loc21 = v46
	v46 = loc21
	loc23 = v46
	goto l0011037B
	// succ:  l0011037B
l00110377:
	v46 = arg0
	loc23 = v46
	// succ:  l0011037B
l0011037B:
	v46 = loc23
	v47 = loc15
	v50 = 2<32>
	v47 = v47 << v50
	v46 = v46 + v47
	loc22 = v46
	v46 = arg2
	loc24 = v46
	v46 = loc24
	v47 = loc26
	v46 = v46 - v47
	loc25 = v46
	v46 = loc25
	v47 = 2<32>
	v46 = v46 >>u v47
	loc27 = v46
	v46 = loc15
	v47 = loc27
	v46 = v46 + v47
	loc28 = v46
	v46 = loc22
	loc3 = v46
	v46 = arg1
	loc4 = v46
	// succ:  l001103A9
l001103A9:
	v46 = loc4
	v47 = arg2
	v49 = v46 == v47
	loc29 = v49
	v46 = loc29
	branch !v46 l001103B9
	// succ:  l001103B6 l001103B9
l001103B6:
	goto l001103DF
	// succ:  l001103DF
l001103B9:
	v46 = loc4
	v46 = Mem0[v46:word32]
	loc30 = v46
	v46 = loc3
	v47 = loc30
	Mem0[v46:word32] = v47
	v46 = loc3
	v47 = 4<32>
	v46 = v46 + v47
	loc31 = v46
	v46 = loc4
	v47 = 4<32>
	v46 = v46 + v47
	loc32 = v46
	v46 = loc31
	loc3 = v46
	v46 = loc32
	loc4 = v46
	goto l0011037B
	// succ:  l0011037B
l001103DF:
	v46 = loc23
	v47 = loc28
	v50 = 2<32>
	v47 = v47 << v50
	v46 = v46 + v47
	loc43 = v46
	v46 = loc43
	v47 = 0<32>
	Mem0[v46:word32] = v47
	v46 = loc15
	v47 = loc11
	v46 = v46 + v47
	loc33 = v46
	v46 = loc19
	branch !v46 l0011040E
	// succ:  l001103FD l0011040E
l001103FD:
	v46 = arg0
	v47 = 4<32>
	v46 = v46 + v47
	loc34 = v46
	v46 = loc34
	v47 = loc33
	Mem0[v46:word32] = v47
	goto l00110421
	// succ:  l00110421
l0011040E:
	v46 = loc33
	v47 = 0xFF<32>
	v46 = v46 & v47
	loc35 = v46
	v46 = loc37
	v47 = loc35
	v56 = SLICE(v47, byte, 0)
	Mem0[v46:byte] = v56
	goto l00110421
	// succ:  l00110421
l0011041F:
	// succ:  l00110421
l00110421:
	// succ:  l00110421
l00110421:
	v46 = arg0
	return v46
	// succ:  fn00110287_exit
l00110425:
	return v46
	// succ:  fn00110287_exit
fn00110287_exit:


// fn00110427
// Return size: 0
void fn00110427(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7, word32 arg8, word32 arg9)
fn00110427_entry:
	// succ:  l00110427
l00110427:
	v184 = Mem0[0x00140030<p32>:word32]
	loc190 = v184
	v184 = Mem0[0x00140030<p32>:word32]
	v185 = 0x70<32>
	v184 = v184 + v185
	Mem0[0x00140030<p32>:word32] = v184
	v184 = Mem0[0x00140030<p32>:word32]
	v185 = Mem0[0x00140034<p32>:word32]
	v186 = v184 >= v185
	branch !v186 l00110443
	// succ:  l0011043D l00110443
l0011043D:
	v184 = 0x70<32>
	abortStackOverflow(v184)
	// succ:  l00110443
l00110443:
	v184 = loc190
	v185 = 0x64<32>
	v184 = v184 + v185
	loc18 = v184
	v184 = loc190
	v185 = 0x58<32>
	v184 = v184 + v185
	loc29 = v184
	v184 = loc190
	v185 = 0x4C<32>
	v184 = v184 + v185
	loc40 = v184
	v184 = loc190
	v185 = 0x40<32>
	v184 = v184 + v185
	loc51 = v184
	v184 = loc190
	v185 = 0x34<32>
	v184 = v184 + v185
	loc62 = v184
	v184 = loc190
	v185 = 0x30<32>
	v184 = v184 + v185
	loc73 = v184
	v184 = loc190
	v185 = 0x24<32>
	v184 = v184 + v185
	loc84 = v184
	v184 = loc190
	v185 = 0x18<32>
	v184 = v184 + v185
	loc95 = v184
	v184 = loc190
	v185 = 0xC<32>
	v184 = v184 + v185
	loc98 = v184
	v184 = loc190
	loc99 = v184
	v184 = arg0
	v184 = v184
	// succ:  l00110498
l00110498:
	v184 = arg1
	v185 = 0x5338<32>
	v184 = fn000EA9F7(v184, v185)
	loc100 = v184
	v184 = loc100
	v184 = Mem0[v184:word32]
	loc101 = v184
	v184 = loc101
	v185 = 0x2C<32>
	v184 = v184 + v185
	loc102 = v184
	v184 = loc102
	v184 = Mem0[v184:word32]
	loc103 = v184
	v184 = loc18
	v185 = loc100
	v187 = loc103
	v188 = 0x1FF<32>
	v187 = v187 & v188
	v188 = 0x700<32>
	v187 = v187 + v188
fn00110427_exit:


// fn00110E8A
// Return size: 0
void fn00110E8A(word32 arg0, word32 arg1, word32 arg2)
fn00110E8A_entry:
	// succ:  l00110E8A
l00110E8A:
	v38 = Mem0[0x00140030<p32>:word32]
	loc37 = v38
	v38 = arg0
	v39 = 4<32>
	v38 = v38 + v39
	loc27 = v38
	v38 = loc27
	v38 = Mem0[v38:word32]
	loc29 = v38
	v38 = loc29
	v39 = 0x1A4<32>
	v40 = v38 != v39
	loc30 = v40
	v38 = arg2
	v38 = Mem0[v38:word32]
	loc31 = v38
	v38 = arg0
	v38 = Mem0[v38:word32]
	loc32 = v38
	v38 = loc31
	v39 = loc32
	v38 = v38 - v39
	loc33 = v38
	v38 = loc33
	v39 = 0x7FFFFFFF<32>
	v40 = v38 <u v39
	loc34 = v40
	v38 = loc33
	v39 = 1<32>
	v38 = v38 << v39
	loc7 = v38
	v38 = loc34
	branch !v38 l00110ED4
	// succ:  l00110ED1 l00110ED4
l00110ED1:
	v38 = loc7
	goto l00110ED6
	// succ:  l00110ED6
l00110ED4:
	v38 = 0xFFFFFFFF<32>
	// succ:  l00110ED6
l00110ED6:
	loc4 = v38
	v38 = loc4
	v39 = 0<32>
	v40 = v38 == v39
	loc8 = v40
	v38 = loc8
	branch !v38 l00110EE7
	// succ:  l00110EE4 l00110EE7
l00110EE4:
	v38 = 4<32>
	goto l00110EE9
	// succ:  l00110EE9
l00110EE7:
	v38 = loc4
	// succ:  l00110EE9
l00110EE9:
	loc3 = v38
	v38 = arg1
	v38 = Mem0[v38:word32]
	loc9 = v38
	v38 = loc9
	v39 = loc32
	v38 = v38 - v39
	loc10 = v38
	v38 = loc10
	v39 = 2<32>
	v38 = v38 >> v39
	loc11 = v38
	v38 = loc32
	loc35 = v38
	v38 = loc30
	branch !v38 l00110F0C
	// succ:  l00110F09 l00110F0C
l00110F09:
	v38 = loc35
	goto l00110F0E
	// succ:  l00110F0E
l00110F0C:
	v38 = 0<32>
	// succ:  l00110F0E
l00110F0E:
	loc12 = v38
	v38 = loc12
	v39 = loc3
	v38 = fn000E3E00(v38, v39)
	loc13 = v38
	v38 = loc13
	v39 = 0<32>
	v40 = v38 == v39
	loc14 = v40
	v38 = loc14
	branch !v38 l00110F29
	// succ:  l00110F25 l00110F29
l00110F25:
	fn0011B725()
	// succ:  l00110F29
l00110F29:
	v38 = loc30
	branch !v38 l00110F3F
	// succ:  l00110F2F l00110F3F
l00110F2F:
	v38 = loc13
	loc15 = v38
	v38 = arg0
	v39 = loc15
	Mem0[v38:word32] = v39
	v38 = loc13
	loc25 = v38
	goto l00110FA3
	// succ:  l00110FA3
l00110F3F:
	v38 = arg0
	v38 = Mem0[v38:word32]
	loc5 = v38
	v38 = loc13
	loc16 = v38
	v38 = arg0
	v39 = loc16
	Mem0[v38:word32] = v39
	v38 = loc5
	v39 = 0<32>
	v40 = v38 == v39
	loc17 = v40
	v38 = loc17
	branch !v38 l00110F61
	// succ:  l00110F5C l00110F61
l00110F5C:
	v38 = loc13
	loc25 = v38
	goto l00110FA2
	// succ:  l00110FA2
l00110F61:
	v38 = loc27
	v38 = Mem0[v38:word32]
	loc18 = v38
	v38 = 0<32>
	Mem0[0x00140048<p32>:word32] = v38
	v38 = loc18
	v39 = loc5
	invoke_vi(v38, v39)
	v38 = Mem0[0x00140048<p32>:word32]
	loc19 = v38
	v38 = 0<32>
	Mem0[0x00140048<p32>:word32] = v38
	v38 = loc19
	v39 = 1<32>
	v38 = v38 & v39
	loc20 = v38
	v38 = loc20
	branch !v38 l00110F94
	// succ:  l00110F85 l00110F94
l00110F85:
	v38 = 0<32>
	v38 = ___cxa_find_matching_catch_3(v38)
	loc21 = v38
	v38 = Mem0[0x00140094<p32>:word32]
	loc22 = v38
	v38 = loc21
	fn000D0E65(v38)
	goto l00110FA1
	// succ:  l00110FA1
l00110F94:
	v38 = arg0
	v38 = Mem0[v38:word32]
	loc6 = v38
	v38 = loc6
	loc25 = v38
	goto l00110FA4
	// succ:  l00110FA4
l00110FA1:
	// succ:  l00110FA2
l00110FA2:
	// succ:  l00110FA3
l00110FA3:
	// succ:  l00110FA4
l00110FA4:
	v38 = loc27
	v39 = 0x1AD<32>
	Mem0[v38:word32] = v39
	v38 = loc3
	v39 = 2<32>
	v38 = v38 >>u v39
	loc23 = v38
	v38 = loc25
	v39 = loc11
	v41 = 2<32>
	v39 = v39 << v41
	v38 = v38 + v39
	loc24 = v38
	v38 = arg1
	v39 = loc24
	Mem0[v38:word32] = v39
	v38 = arg0
	v38 = Mem0[v38:word32]
	loc26 = v38
	v38 = loc26
	v39 = loc23
	v41 = 2<32>
	v39 = v39 << v41
	v38 = v38 + v39
	loc28 = v38
	v38 = arg2
	v39 = loc28
	Mem0[v38:word32] = v39
	return
	// succ:  fn00110E8A_exit
l00110FDE:
	return
	// succ:  fn00110E8A_exit
fn00110E8A_exit:


// fn00110FE0
// Return size: 0
void fn00110FE0(word32 arg0)
fn00110FE0_entry:
	// succ:  l00110FE0
l00110FE0:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	return
	// succ:  fn00110FE0_exit
l00110FE7:
	return
	// succ:  fn00110FE0_exit
fn00110FE0_exit:


// fn00110FE9
// Return size: 0
void fn00110FE9(word32 arg0)
fn00110FE9_entry:
	// succ:  l00110FE9
l00110FE9:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn00110FE9_exit
l00110FF5:
	return
	// succ:  fn00110FE9_exit
fn00110FE9_exit:


// fn00110FF7
// Return size: 0
word32 fn00110FF7(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, real64 arg5)
fn00110FF7_entry:
	// succ:  l00110FF7
l00110FF7:
	v181 = Mem0[0x00140030<p32>:word32]
	loc183 = v181
	v181 = Mem0[0x00140030<p32>:word32]
	v182 = 0x190<32>
	v181 = v181 + v182
	Mem0[0x00140030<p32>:word32] = v181
	v181 = Mem0[0x00140030<p32>:word32]
	v182 = Mem0[0x00140034<p32>:word32]
	v183 = v181 >= v182
	branch !v183 l00111013
	// succ:  l0011100D l00111013
l0011100D:
	v181 = 0x190<32>
	abortStackOverflow(v181)
	// succ:  l00111013
l00111013:
	v181 = loc183
	v182 = 0x4C<32>
	v181 = v181 + v182
	loc20 = v181
	v181 = loc183
	v182 = 8<32>
	v181 = v181 + v182
	loc181 = v181
	v181 = loc183
	loc180 = v181
	v181 = loc183
	v182 = 0x120<32>
	v181 = v181 + v182
	loc133 = v181
	v181 = loc183
	v182 = 0x48<32>
	v181 = v181 + v182
	loc144 = v181
	v181 = loc183
	v182 = 0xBC<32>
	v181 = v181 + v182
	loc155 = v181
	v181 = loc183
	v182 = 0x44<32>
	v181 = v181 + v182
	loc166 = v181
	v181 = loc183
	v182 = 0xB8<32>
	v181 = v181 + v182
	loc33 = v181
	v181 = loc183
	v182 = 0xB5<32>
	v181 = v181 + v182
	loc44 = v181
	v181 = loc183
	v182 = 0xB4<32>
	v181 = v181 + v182
	loc55 = v181
	v181 = loc183
	v182 = 0x38<32>
	v181 = v181 + v182
	loc66 = v181
	v181 = loc183
	v182 = 0x2C<32>
	v181 = v181 + v182
	loc77 = v181
	v181 = loc183
	v182 = 0x20<32>
	v181 = v181 + v182
	loc88 = v181
	v181 = loc183
	v182 = 0x1C<32>
	v181 = v181 + v182
	loc89 = v181
	v181 = loc183
	v182 = 0x50<32>
	v181 = v181 + v182
	loc90 = v181
	v181 = loc183
	v182 = 0x18<32>
	v181 = v181 + v182
	loc91 = v181
	v181 = loc183
	v182 = 0x14<32>
	v181 = v181 + v182
	loc92 = v181
	v181 = loc183
	v182 = 0x10<32>
	v181 = v181 + v182
	loc93 = v181
	v181 = loc144
	v182 = loc133
	Mem0[v181:word32] = v182
	v181 = loc180
	v184 = arg5
	Mem0[v181:real64] = v184
	v181 = loc133
	v182 = 0x64<32>
	v185 = 0x3DC0<32>
	v186 = loc180
	v181 = fn000DB3DF(v181, v182, v185, v186)
	loc94 = v181
	v181 = loc94
	v182 = 0x63<32>
	v183 = v181 >u v182
	loc95 = v183
	// succ:  l001110DA
l001110DA:
	v181 = loc95
	branch !v181 l00111211
	// succ:  l001110E0 l00111211
l001110E0:
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = 0x17B<32>
	v181 = invoke_i(v181)
	loc96 = v181
	v181 = Mem0[0x00140048<p32>:word32]
	loc97 = v181
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = loc97
	v182 = 1<32>
	v181 = v181 & v182
	loc98 = v181
	v181 = loc98
	branch !v181 l0011110C
	// succ:  l001110FE l0011110C
l001110FE:
	v181 = 0<32>
	loc27 = v181
	v181 = 0<32>
	loc30 = v181
	v181 = 8<32>
	loc182 = v181
	goto l0011120F
	// succ:  l0011120F
l0011110C:
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = loc181
	v184 = arg5
	Mem0[v181:real64] = v184
	v181 = 0x18D<32>
	v182 = loc144
	v185 = loc96
	v186 = 0x3DC0<32>
	v187 = loc181
	v181 = invoke_iiiii(v181, v182, v185, v186, v187)
	loc99 = v181
	v181 = Mem0[0x00140048<p32>:word32]
	loc100 = v181
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = loc100
	v182 = 1<32>
	v181 = v181 & v182
	loc101 = v181
	v181 = loc101
	branch !v181 l0011114C
	// succ:  l0011113E l0011114C
l0011113E:
	v181 = 0<32>
	loc27 = v181
	v181 = 0<32>
	loc30 = v181
	v181 = 8<32>
	loc182 = v181
	goto l0011120E
	// succ:  l0011120E
l0011114C:
	v181 = loc144
	v181 = Mem0[v181:word32]
	loc102 = v181
	v181 = loc102
	v182 = 0<32>
	v183 = v181 == v182
	loc103 = v183
	v181 = loc103
	branch !v181 l00111198
	// succ:  l0011115F l00111198
l0011115F:
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = 0x18A<32>
	invoke_v(v181)
	v181 = Mem0[0x00140048<p32>:word32]
	loc105 = v181
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = loc105
	v182 = 1<32>
	v181 = v181 & v182
	loc106 = v181
	v181 = loc106
	branch !v181 l0011118B
	// succ:  l0011117B l0011118B
l0011117B:
	v181 = 0<32>
	loc27 = v181
	v181 = 0<32>
	loc30 = v181
	v181 = 8<32>
	loc182 = v181
	goto l00111228
	// succ:  l00111228
l0011118B:
	v181 = loc144
	v181 = Mem0[v181:word32]
	loc22 = v181
	v181 = loc22
	loc87 = v181
	goto l001111A0
	// succ:  l001111A0
l00111198:
	v181 = loc102
	loc104 = v181
	v181 = loc104
	loc87 = v181
	// succ:  l001111A0
l001111A0:
	v181 = loc99
	v181 = _malloc(v181)
	loc109 = v181
	v181 = loc109
	loc110 = v181
	v181 = loc109
	v182 = 0<32>
	v183 = v181 == v182
	loc111 = v183
	v181 = loc111
	branch !v181 l001111F8
	// succ:  l001111B7 l001111F8
l001111B7:
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = 0x18A<32>
	invoke_v(v181)
	v181 = Mem0[0x00140048<p32>:word32]
	loc112 = v181
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = loc112
	v182 = 1<32>
	v181 = v181 & v182
	loc113 = v181
	v181 = loc113
	branch !v181 l001111E1
	// succ:  l001111D3 l001111E1
l001111D3:
	v181 = loc110
	loc27 = v181
	v181 = loc87
	loc30 = v181
	v181 = 8<32>
	loc182 = v181
	goto l001111F6
	// succ:  l001111F6
l001111E1:
	v181 = 0<32>
	loc6 = v181
	v181 = loc99
	loc11 = v181
	v181 = loc110
	loc28 = v181
	v181 = loc87
	loc31 = v181
	v181 = 0xB<32>
	loc182 = v181
	// succ:  l001111F6
l001111F6:
	goto l0011120D
	// succ:  l0011120D
l001111F8:
	v181 = loc109
	loc6 = v181
	v181 = loc99
	loc11 = v181
	v181 = loc110
	loc28 = v181
	v181 = loc87
	loc31 = v181
	v181 = 0xB<32>
	loc182 = v181
	// succ:  l0011120D
l0011120D:
	// succ:  l0011120E
l0011120E:
	// succ:  l0011120F
l0011120F:
	goto l00111227
	// succ:  l00111227
l00111211:
	v181 = loc155
	loc6 = v181
	v181 = loc94
	loc11 = v181
	v181 = 0<32>
	loc28 = v181
	v181 = 0<32>
	loc31 = v181
	v181 = 0xB<32>
	loc182 = v181
	// succ:  l00111227
l00111227:
	// succ:  l00111228
l00111228:
	v181 = loc182
	v182 = 0xB<32>
	v183 = v181 == v182
	branch !v183 l00111826
	// succ:  l00111231 l00111826
l00111231:
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = 0x167<32>
	v182 = arg3
	v181 = invoke_ii(v181, v182)
	loc114 = v181
	v181 = Mem0[0x00140048<p32>:word32]
	loc115 = v181
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = loc115
	v182 = 1<32>
	v181 = v181 & v182
	loc116 = v181
	v181 = loc116
	branch !v181 l0011125F
	// succ:  l00111251 l0011125F
l00111251:
	v181 = loc28
	loc27 = v181
	v181 = loc31
	loc30 = v181
	v181 = 8<32>
	loc182 = v181
	goto l00111824
	// succ:  l00111824
l0011125F:
	v181 = loc166
	v182 = loc114
	Mem0[v181:word32] = v182
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = 0x164<32>
	v182 = loc166
	v185 = 0x4C70<32>
	v181 = invoke_iii(v181, v182, v185)
	loc117 = v181
	v181 = Mem0[0x00140048<p32>:word32]
	loc118 = v181
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = loc118
	v182 = 1<32>
	v181 = v181 & v182
	loc119 = v181
	// succ:  l00111288
l00111288:
	v181 = loc119
	branch !v181 l001112A3
	// succ:  l0011128E l001112A3
l0011128E:
	v181 = ___cxa_find_matching_catch_2()
	loc46 = v181
	v181 = Mem0[0x00140094<p32>:word32]
	loc47 = v181
	v181 = loc46
	loc16 = v181
	v181 = loc47
	loc17 = v181
	v181 = loc114
	loc82 = v181
	goto l0011180C
	// succ:  l0011180C
l001112A3:
	v181 = loc144
	v181 = Mem0[v181:word32]
	loc120 = v181
	v181 = loc120
	v182 = loc11
	v181 = v181 + v182
	loc121 = v181
	v181 = loc117
	v181 = Mem0[v181:word32]
	loc122 = v181
	v181 = loc122
	v182 = 0x20<32>
	v181 = v181 + v182
	loc123 = v181
	v181 = loc123
	v181 = Mem0[v181:word32]
	loc124 = v181
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = loc124
	v182 = loc117
	v185 = loc120
	v186 = loc121
	v187 = loc6
	v181 = invoke_iiiii(v181, v182, v185, v186, v187)
	v181 = Mem0[0x00140048<p32>:word32]
	loc125 = v181
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = loc125
	v182 = 1<32>
	v181 = v181 & v182
	loc126 = v181
	v181 = loc126
	branch !v181 l00111302
	// succ:  l001112EB l00111302
l001112EB:
	v181 = ___cxa_find_matching_catch_2()
	loc48 = v181
	v181 = Mem0[0x00140094<p32>:word32]
	loc49 = v181
	v181 = loc48
	loc16 = v181
	v181 = loc49
	loc17 = v181
	v181 = loc114
	loc82 = v181
	goto l0011180D
	// succ:  l0011180D
l00111302:
	v181 = loc11
	v182 = 0<32>
	v183 = v181 == v182
	loc127 = v183
	v181 = loc127
	branch !v181 l00111313
	// succ:  l0011130D l00111313
l0011130D:
	v181 = 0<32>
	loc138 = v181
	goto l0011133A
	// succ:  l0011133A
l00111313:
	v181 = loc144
	v181 = Mem0[v181:word32]
	loc128 = v181
	v181 = loc128
	v188 = Mem0[v181:int8]
	v181 = CONVERT(v188, int8, word32)
	loc129 = v181
	v181 = loc129
	v182 = 0x18<32>
	v181 = v181 << v182
	v182 = 0x18<32>
	v181 = v181 >> v182
	v182 = 0x2D<32>
	v183 = v181 == v182
	loc130 = v183
	v181 = loc130
	loc138 = v181
	// succ:  l0011133A
l0011133A:
	v181 = loc66
	v189 = 0<64>
	Mem0[v181:word64] = v189
	v181 = loc66
	v182 = 8<32>
	v181 = v181 + v182
	v182 = 0<32>
	Mem0[v181:word32] = v182
	v181 = 0<32>
	loc7 = v181
	// succ:  l00111352
l00111352:
	v181 = loc7
	v182 = 3<32>
	v183 = v181 == v182
	loc177 = v183
	v181 = loc177
	branch !v181 l00111364
	// succ:  l00111361 l00111364
l00111361:
	goto l00111386
	// succ:  l00111386
l00111364:
	v181 = loc66
	v182 = loc7
	v185 = 2<32>
	v182 = v182 << v185
	v181 = v181 + v182
	loc131 = v181
	v181 = loc131
	v182 = 0<32>
	Mem0[v181:word32] = v182
	v181 = loc7
	v182 = 1<32>
	v181 = v181 + v182
	loc132 = v181
	v181 = loc132
	loc7 = v181
	goto l0011133A
	// succ:  l0011133A
l00111386:
	v181 = loc77
	v189 = 0<64>
	Mem0[v181:word64] = v189
	v181 = loc77
	v182 = 8<32>
	v181 = v181 + v182
	v182 = 0<32>
	Mem0[v181:word32] = v182
	v181 = 0<32>
	loc8 = v181
	// succ:  l0011139F
l0011139F:
	v181 = loc8
	v182 = 3<32>
	v183 = v181 == v182
	loc178 = v183
	v181 = loc178
	branch !v181 l001113B1
	// succ:  l001113AE l001113B1
l001113AE:
	goto l001113D3
	// succ:  l001113D3
l001113B1:
	v181 = loc77
	v182 = loc8
	v185 = 2<32>
	v182 = v182 << v185
	v181 = v181 + v182
	loc134 = v181
	v181 = loc134
	v182 = 0<32>
	Mem0[v181:word32] = v182
	v181 = loc8
	v182 = 1<32>
	v181 = v181 + v182
	loc135 = v181
	v181 = loc135
	loc8 = v181
	goto l00111386
	// succ:  l00111386
l001113D3:
	v181 = loc88
	v189 = 0<64>
	Mem0[v181:word64] = v189
	v181 = loc88
	v182 = 8<32>
	v181 = v181 + v182
	v182 = 0<32>
	Mem0[v181:word32] = v182
	v181 = 0<32>
	loc9 = v181
	// succ:  l001113EC
l001113EC:
	v181 = loc9
	v182 = 3<32>
	v183 = v181 == v182
	loc179 = v183
	v181 = loc179
	branch !v181 l001113FE
	// succ:  l001113FB l001113FE
l001113FB:
	goto l00111420
	// succ:  l00111420
l001113FE:
	v181 = loc88
	v182 = loc9
	v185 = 2<32>
	v182 = v182 << v185
	v181 = v181 + v182
	loc136 = v181
	v181 = loc136
	v182 = 0<32>
	Mem0[v181:word32] = v182
	v181 = loc9
	v182 = 1<32>
	v181 = v181 + v182
	loc137 = v181
	v181 = loc137
	loc9 = v181
	goto l001113D3
	// succ:  l001113D3
l00111420:
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = 0x1B4<32>
	v182 = arg2
	v185 = loc138
	v186 = loc166
	v187 = loc33
	v190 = loc44
	v191 = loc55
	v192 = loc66
	v193 = loc77
	v194 = loc88
	v195 = loc89
	invoke_viiiiiiiiii(v181, v182, v185, v186, v187, v190, v191, v192, v193, v194, v195)
	v181 = Mem0[0x00140048<p32>:word32]
	loc139 = v181
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = loc139
	v182 = 1<32>
	v181 = v181 & v182
	loc140 = v181
	v181 = loc140
	branch !v181 l00111469
	// succ:  l00111458 l00111469
l00111458:
	v181 = ___cxa_find_matching_catch_2()
	loc50 = v181
	v181 = Mem0[0x00140094<p32>:word32]
	loc51 = v181
	v181 = loc50
	loc14 = v181
	v181 = loc51
	loc15 = v181
	goto l001117E8
	// succ:  l001117E8
l00111469:
	v181 = loc89
	v181 = Mem0[v181:word32]
	loc141 = v181
	v181 = loc11
	v182 = loc141
	v183 = v181 > v182
	loc142 = v183
	v181 = loc142
	branch !v181 l0011154A
	// succ:  l0011147F l0011154A
l0011147F:
	v181 = loc11
	v182 = loc141
	v181 = v181 - v182
	loc143 = v181
	v181 = loc143
	v182 = 1<32>
	v181 = v181 << v182
	loc145 = v181
	v181 = loc88
	v182 = 0xB<32>
	v181 = v181 + v182
	loc146 = v181
	v181 = loc146
	v196 = Mem0[v181:int8]
	v181 = CONVERT(v196, int8, word32)
	loc147 = v181
	v181 = loc147
	v182 = 0x18<32>
	v181 = v181 << v182
	v182 = 0x18<32>
	v181 = v181 >> v182
	v182 = 0<32>
	v183 = v181 < v182
	loc148 = v183
	v181 = loc88
	v182 = 4<32>
	v181 = v181 + v182
	loc149 = v181
	v181 = loc149
	v181 = Mem0[v181:word32]
	loc150 = v181
	v181 = loc147
	v182 = 0xFF<32>
	v181 = v181 & v182
	loc151 = v181
	v181 = loc148
	branch !v181 l001114D5
	// succ:  l001114D1 l001114D5
l001114D1:
	v181 = loc150
	goto l001114D8
	// succ:  l001114D8
l001114D5:
	v181 = loc151
	// succ:  l001114D8
l001114D8:
	loc152 = v181
	v181 = loc77
	v182 = 0xB<32>
	v181 = v181 + v182
	loc153 = v181
	v181 = loc153
	v197 = Mem0[v181:int8]
	v181 = CONVERT(v197, int8, word32)
	loc154 = v181
	v181 = loc154
	v182 = 0x18<32>
	v181 = v181 << v182
	v182 = 0x18<32>
	v181 = v181 >> v182
	v182 = 0<32>
	v183 = v181 < v182
	loc156 = v183
	v181 = loc77
	v182 = 4<32>
	v181 = v181 + v182
	loc157 = v181
	v181 = loc157
	v181 = Mem0[v181:word32]
	loc158 = v181
	v181 = loc154
	v182 = 0xFF<32>
	v181 = v181 & v182
	loc159 = v181
	v181 = loc156
	branch !v181 l00111520
	// succ:  l0011151C l00111520
l0011151C:
	v181 = loc158
	goto l00111523
	// succ:  l00111523
l00111520:
	v181 = loc159
	// succ:  l00111523
l00111523:
	loc160 = v181
	v181 = loc145
	v182 = 1<32>
	v181 = v181 | v182
	loc161 = v181
	v181 = loc152
	v182 = loc161
	v181 = v181 + v182
	loc162 = v181
	v181 = loc162
	v182 = loc160
	v181 = v181 + v182
	loc163 = v181
	v181 = loc163
	loc21 = v181
	goto l001115F0
	// succ:  l001115F0
l0011154A:
	v181 = loc88
	v182 = 0xB<32>
	v181 = v181 + v182
	loc164 = v181
	v181 = loc164
	v198 = Mem0[v181:int8]
	v181 = CONVERT(v198, int8, word32)
	loc165 = v181
	v181 = loc165
	v182 = 0x18<32>
	v181 = v181 << v182
	v182 = 0x18<32>
	v181 = v181 >> v182
	v182 = 0<32>
	v183 = v181 < v182
	loc167 = v183
	v181 = loc88
	v182 = 4<32>
	v181 = v181 + v182
	loc168 = v181
	v181 = loc168
	v181 = Mem0[v181:word32]
	loc169 = v181
	v181 = loc165
	v182 = 0xFF<32>
	v181 = v181 & v182
	loc170 = v181
	v181 = loc167
	branch !v181 l0011158E
	// succ:  l0011158A l0011158E
l0011158A:
	v181 = loc169
	goto l00111591
	// succ:  l00111591
l0011158E:
	v181 = loc170
	// succ:  l00111591
l00111591:
	loc171 = v181
	v181 = loc77
	v182 = 0xB<32>
	v181 = v181 + v182
	loc172 = v181
	v181 = loc172
	v199 = Mem0[v181:int8]
	v181 = CONVERT(v199, int8, word32)
	loc173 = v181
	v181 = loc173
	v182 = 0x18<32>
	v181 = v181 << v182
	v182 = 0x18<32>
	v181 = v181 >> v182
	v182 = 0<32>
	v183 = v181 < v182
	loc174 = v183
	v181 = loc77
	v182 = 4<32>
	v181 = v181 + v182
	loc175 = v181
	v181 = loc175
	v181 = Mem0[v181:word32]
	loc176 = v181
	v181 = loc173
	v182 = 0xFF<32>
	v181 = v181 & v182
	loc34 = v181
	v181 = loc174
	branch !v181 l001115D8
	// succ:  l001115D4 l001115D8
l001115D4:
	v181 = loc176
	goto l001115DA
	// succ:  l001115DA
l001115D8:
	v181 = loc34
	// succ:  l001115DA
l001115DA:
	loc35 = v181
	v181 = loc171
	v182 = 2<32>
	v181 = v181 + v182
	loc36 = v181
	v181 = loc36
	v182 = loc35
	v181 = v181 + v182
	loc37 = v181
	v181 = loc37
	loc21 = v181
	// succ:  l001115F0
l001115F0:
	v181 = loc21
	v182 = loc141
	v181 = v181 + v182
	loc38 = v181
	v181 = loc38
	v182 = 0x64<32>
	v183 = v181 >u v182
	loc39 = v183
	// succ:  l00111601
l00111601:
	v181 = loc39
	branch !v181 l00111680
	// succ:  l00111607 l00111680
l00111607:
	v181 = loc38
	v181 = _malloc(v181)
	loc40 = v181
	v181 = loc40
	loc41 = v181
	v181 = loc40
	v182 = 0<32>
	v183 = v181 == v182
	loc42 = v183
	v181 = loc42
	branch !v181 l0011166C
	// succ:  l0011161D l0011166C
l0011161D:
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = 0x18A<32>
	invoke_v(v181)
	v181 = Mem0[0x00140048<p32>:word32]
	loc43 = v181
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = loc43
	v182 = 1<32>
	v181 = v181 & v182
	loc45 = v181
	v181 = loc45
	branch !v181 l00111650
	// succ:  l00111639 l00111650
l00111639:
	v181 = ___cxa_find_matching_catch_2()
	loc52 = v181
	v181 = Mem0[0x00140094<p32>:word32]
	loc53 = v181
	v181 = loc52
	loc12 = v181
	v181 = loc53
	loc13 = v181
	v181 = loc41
	loc26 = v181
	goto l00111693
	// succ:  l00111693
l00111650:
	v181 = loc89
	v181 = Mem0[v181:word32]
	loc23 = v181
	v181 = 0<32>
	loc10 = v181
	v181 = loc41
	loc25 = v181
	v181 = loc23
	loc60 = v181
	v181 = 0x25<32>
	loc182 = v181
	goto l00111693
	// succ:  l00111693
l0011166A:
	goto l0011167E
	// succ:  l0011167E
l0011166C:
	v181 = loc40
	loc10 = v181
	v181 = loc41
	loc25 = v181
	v181 = loc141
	loc60 = v181
	v181 = 0x25<32>
	loc182 = v181
	// succ:  l0011167E
l0011167E:
	goto l00111692
	// succ:  l00111692
l00111680:
	v181 = loc90
	loc10 = v181
	v181 = 0<32>
	loc25 = v181
	v181 = loc141
	loc60 = v181
	v181 = 0x25<32>
	loc182 = v181
	// succ:  l00111692
l00111692:
	// succ:  l00111693
l00111693:
	v181 = loc182
	v182 = 0x25<32>
	v183 = v181 == v182
	branch !v183 l001117CA
	// succ:  l0011169C l001117CA
l0011169C:
	v181 = arg3
	v182 = 4<32>
	v181 = v181 + v182
	loc54 = v181
	v181 = loc54
	v181 = Mem0[v181:word32]
	loc56 = v181
	v181 = loc6
	v182 = loc11
	v181 = v181 + v182
	loc57 = v181
	v181 = loc44
	v200 = Mem0[v181:int8]
	v181 = CONVERT(v200, int8, word32)
	loc58 = v181
	v181 = loc55
	v201 = Mem0[v181:int8]
	v181 = CONVERT(v201, int8, word32)
	loc59 = v181
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = 0x1B5<32>
	v182 = loc10
	v185 = loc91
	v186 = loc92
	v187 = loc56
	v190 = loc6
	v191 = loc57
	v192 = loc117
	v193 = loc138
	v194 = loc33
	v195 = loc58
	v202 = loc59
	v203 = loc66
	v204 = loc77
	v205 = loc88
	v206 = loc60
	invoke_viiiiiiiiiiiiiii(v181, v182, v185, v186, v187, v190, v191, v192, v193, v194, v195, v202, v203, v204, v205, v206)
	v181 = Mem0[0x00140048<p32>:word32]
	loc61 = v181
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = loc61
	v182 = 1<32>
	v181 = v181 & v182
	loc62 = v181
	v181 = loc62
	v183 = v181 == 0<32>
	branch !v183 l001117B5
	// succ:  l001116FB l001117B5
l001116FB:
	v181 = arg1
	v181 = Mem0[v181:word32]
	loc63 = v181
	v181 = loc93
	v182 = loc63
	Mem0[v181:word32] = v182
	v181 = loc91
	v181 = Mem0[v181:word32]
	loc64 = v181
	v181 = loc92
	v181 = Mem0[v181:word32]
	loc65 = v181
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = loc20
	v182 = loc93
	v182 = Mem0[v182:word32]
	Mem0[v181:word32] = v182
	v181 = 0x168<32>
	v182 = loc20
	v185 = loc10
	v186 = loc64
	v187 = loc65
	v190 = arg3
	v191 = arg4
	v181 = invoke_iiiiiii(v181, v182, v185, v186, v187, v190, v191)
	loc67 = v181
	v181 = Mem0[0x00140048<p32>:word32]
	loc68 = v181
	v181 = 0<32>
	Mem0[0x00140048<p32>:word32] = v181
	v181 = loc68
	v182 = 1<32>
	v181 = v181 & v182
	loc69 = v181
	v181 = loc69
	v183 = v181 == 0<32>
	branch !v183 l001117B4
	// succ:  l0011174C l001117B4
l0011174C:
	v181 = loc25
	v182 = 0<32>
	v183 = v181 == v182
	loc70 = v183
	v181 = loc70
	v183 = v181 == 0<32>
	branch !v183 l00111762
	// succ:  l00111758 l00111762
l00111758:
	v181 = loc25
	loc71 = v181
	v181 = loc71
	_free(v181)
	// succ:  l00111762
l00111762:
	v181 = loc88
	fn0011BAF7(v181)
	v181 = loc77
	fn0011BAF7(v181)
	v181 = loc66
	fn0011BAF7(v181)
	v181 = loc166
	v181 = Mem0[v181:word32]
	loc72 = v181
	v181 = loc72
	v181 = fn0011B43F(v181)
	v181 = loc28
	v182 = 0<32>
	v183 = v181 == v182
	loc73 = v183
	v181 = loc73
	v183 = v181 == 0<32>
	branch !v183 l00111795
	// succ:  l0011178B l00111795
l0011178B:
	v181 = loc28
	loc74 = v181
	v181 = loc74
	_free(v181)
	// succ:  l00111795
l00111795:
	v181 = loc31
	v182 = 0<32>
	v183 = v181 == v182
	loc75 = v183
	v181 = loc75
	v183 = v181 == 0<32>
	branch !v183 l001117AB
	// succ:  l001117A1 l001117AB
l001117A1:
	v181 = loc31
	loc76 = v181
	v181 = loc76
	_free(v181)
	// succ:  l001117AB
l001117AB:
	v181 = loc183
	Mem0[0x00140030<p32>:word32] = v181
	v181 = loc67
	return v181
	// succ:  fn00110FF7_exit
l001117B4:
	// succ:  l001117B5
l001117B5:
	v181 = ___cxa_find_matching_catch_2()
	loc78 = v181
	v181 = Mem0[0x00140094<p32>:word32]
	loc79 = v181
	v181 = loc78
	loc12 = v181
	v181 = loc79
	loc13 = v181
	v181 = loc25
	loc26 = v181
	// succ:  l001117CA
l001117CA:
	v181 = loc26
	v182 = 0<32>
	v183 = v181 == v182
	loc80 = v183
	v181 = loc80
	v183 = v181 == 0<32>
	branch !v183 l001117E0
	// succ:  l001117D6 l001117E0
l001117D6:
	v181 = loc26
	loc81 = v181
	v181 = loc81
	_free(v181)
	// succ:  l001117E0
l001117E0:
	v181 = loc12
	loc14 = v181
	v181 = loc13
	loc15 = v181
	// succ:  l001117E8
l001117E8:
	v181 = loc88
	fn0011BAF7(v181)
	v181 = loc77
	fn0011BAF7(v181)
	v181 = loc66
	fn0011BAF7(v181)
	v181 = loc166
	v181 = Mem0[v181:word32]
	loc24 = v181
	v181 = loc14
	loc16 = v181
	v181 = loc15
	loc17 = v181
	v181 = loc24
	loc82 = v181
	// succ:  l0011180C
l0011180C:
	// succ:  l0011180D
l0011180D:
	v181 = loc82
	v181 = fn0011B43F(v181)
	v181 = loc16
	loc18 = v181
	v181 = loc17
	loc19 = v181
	v181 = loc28
	loc29 = v181
	v181 = loc31
	loc32 = v181
	// succ:  l00111824
l00111824:
	// succ:  l00111826
l00111826:
	v181 = loc182
	v182 = 8<32>
	v183 = v181 == v182
	branch !v183 l00111847
	// succ:  l0011182E l00111847
l0011182E:
	v181 = ___cxa_find_matching_catch_2()
	loc107 = v181
	v181 = Mem0[0x00140094<p32>:word32]
	loc108 = v181
	v181 = loc107
	loc18 = v181
	v181 = loc108
	loc19 = v181
	v181 = loc27
	loc29 = v181
	v181 = loc30
	loc32 = v181
	// succ:  l00111847
l00111847:
	v181 = loc29
	v182 = 0<32>
	v183 = v181 == v182
	loc83 = v183
	v181 = loc83
	v183 = v181 == 0<32>
	branch !v183 l0011185D
	// succ:  l00111853 l0011185D
l00111853:
	v181 = loc29
	loc84 = v181
	v181 = loc84
	_free(v181)
	// succ:  l0011185D
l0011185D:
	v181 = loc32
	v182 = 0<32>
	v183 = v181 == v182
	loc85 = v183
	v181 = loc85
	v183 = v181 == 0<32>
	branch !v183 l00111873
	// succ:  l00111869 l00111873
l00111869:
	v181 = loc32
	loc86 = v181
	v181 = loc86
	_free(v181)
	// succ:  l00111873
l00111873:
	v181 = loc18
	___resumeException(v181)
	v181 = 0<32>
	return v181
	// succ:  fn00110FF7_exit
l0011187A:
	return v181
	// succ:  fn00110FF7_exit
fn00110FF7_exit:


// fn0011187C
// Return size: 0
word32 fn0011187C(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn0011187C_entry:
	// succ:  l0011187C
l0011187C:
	v154 = Mem0[0x00140030<p32>:word32]
	loc156 = v154
	v154 = Mem0[0x00140030<p32>:word32]
	v155 = 0xB0<32>
	v154 = v154 + v155
	Mem0[0x00140030<p32>:word32] = v154
	v154 = Mem0[0x00140030<p32>:word32]
	v155 = Mem0[0x00140034<p32>:word32]
	v156 = v154 >= v155
	branch !v156 l00111898
	// succ:  l00111892 l00111898
l00111892:
	v154 = 0xB0<32>
	abortStackOverflow(v154)
	// succ:  l00111898
l00111898:
	v154 = loc156
	v155 = 0x38<32>
	v154 = v154 + v155
	loc16 = v154
	v154 = loc156
	v155 = 0x34<32>
	v154 = v154 + v155
	loc108 = v154
	v154 = loc156
	v155 = 0xA4<32>
	v154 = v154 + v155
	loc119 = v154
	v154 = loc156
	v155 = 0xA1<32>
	v154 = v154 + v155
	loc130 = v154
	v154 = loc156
	v155 = 0xA0<32>
	v154 = v154 + v155
	loc141 = v154
	v154 = loc156
	v155 = 0x28<32>
	v154 = v154 + v155
	loc23 = v154
	v154 = loc156
	v155 = 0x1C<32>
	v154 = v154 + v155
	loc34 = v154
	v154 = loc156
	v155 = 0x10<32>
	v154 = v154 + v155
	loc45 = v154
	v154 = loc156
	v155 = 0xC<32>
	v154 = v154 + v155
	loc56 = v154
	v154 = loc156
	v155 = 0x3C<32>
	v154 = v154 + v155
	loc62 = v154
	v154 = loc156
	v155 = 8<32>
	v154 = v154 + v155
	loc63 = v154
	v154 = loc156
	v155 = 4<32>
	v154 = v154 + v155
	loc64 = v154
	v154 = loc156
	loc65 = v154
	v154 = arg3
	v154 = fn000E64CA(v154)
	loc66 = v154
	v154 = loc108
	v155 = loc66
	Mem0[v154:word32] = v155
	v154 = 0<32>
	Mem0[0x00140048<p32>:word32] = v154
	v154 = 0x164<32>
	v155 = loc108
	v157 = 0x4C70<32>
	v154 = invoke_iii(v154, v155, v157)
	loc67 = v154
	v154 = Mem0[0x00140048<p32>:word32]
	loc68 = v154
	v154 = 0<32>
	Mem0[0x00140048<p32>:word32] = v154
	v154 = loc68
	v155 = 1<32>
	v154 = v154 & v155
	loc69 = v154
	// succ:  l00111930
l00111930:
	v154 = loc69
	branch !v154 l0011194B
	// succ:  l00111936 l0011194B
l00111936:
	v154 = ___cxa_find_matching_catch_2()
	loc150 = v154
	v154 = Mem0[0x00140094<p32>:word32]
	loc151 = v154
	v154 = loc150
	loc14 = v154
	v154 = loc151
	loc15 = v154
	goto l00111F0F
	// succ:  l00111F0F
l0011194B:
	v154 = arg5
	v155 = 0xB<32>
	v154 = v154 + v155
	loc70 = v154
	v154 = loc70
	v158 = Mem0[v154:int8]
	v154 = CONVERT(v158, int8, word32)
	loc71 = v154
	v154 = loc71
	v155 = 0x18<32>
	v154 = v154 << v155
	v155 = 0x18<32>
	v154 = v154 >> v155
	v155 = 0<32>
	v156 = v154 < v155
	loc72 = v156
	v154 = arg5
	v155 = 4<32>
	v154 = v154 + v155
	loc73 = v154
	v154 = loc73
	v154 = Mem0[v154:word32]
	loc74 = v154
	v154 = loc71
	v155 = 0xFF<32>
	v154 = v154 & v155
	loc75 = v154
	v154 = loc72
	branch !v154 l00111983
	// succ:  l00111980 l00111983
l00111980:
	v154 = loc74
	goto l00111985
	// succ:  l00111985
l00111983:
	v154 = loc75
	// succ:  l00111985
l00111985:
	loc76 = v154
	v154 = loc76
	v155 = 0<32>
	v156 = v154 == v155
	loc77 = v156
	// succ:  l0011198F
l0011198F:
	v154 = loc77
	branch !v154 l0011199A
	// succ:  l00111995 l0011199A
l00111995:
	v154 = 0<32>
	loc94 = v154
	goto l00111A17
	// succ:  l00111A17
l0011199A:
	v154 = arg5
	v154 = Mem0[v154:word32]
	loc78 = v154
	v154 = loc72
	branch !v154 l001119A8
	// succ:  l001119A5 l001119A8
l001119A5:
	v154 = loc78
	goto l001119AA
	// succ:  l001119AA
l001119A8:
	v154 = arg5
	// succ:  l001119AA
l001119AA:
	loc79 = v154
	v154 = loc79
	v159 = Mem0[v154:int8]
	v154 = CONVERT(v159, int8, word32)
	loc80 = v154
	v154 = loc67
	v154 = Mem0[v154:word32]
	loc81 = v154
	v154 = loc81
	v155 = 0x1C<32>
	v154 = v154 + v155
	loc82 = v154
	v154 = loc82
	v154 = Mem0[v154:word32]
	loc83 = v154
	v154 = 0<32>
	Mem0[0x00140048<p32>:word32] = v154
	v154 = loc83
	v155 = loc67
	v157 = 0x2D<32>
	v154 = invoke_iii(v154, v155, v157)
	loc84 = v154
	v154 = Mem0[0x00140048<p32>:word32]
	loc85 = v154
	v154 = 0<32>
	Mem0[0x00140048<p32>:word32] = v154
	v154 = loc85
	v155 = 1<32>
	v154 = v154 & v155
	loc86 = v154
	v154 = loc86
	branch !v154 l001119FD
	// succ:  l001119EA l001119FD
l001119EA:
	v154 = ___cxa_find_matching_catch_2()
	loc24 = v154
	v154 = Mem0[0x00140094<p32>:word32]
	loc25 = v154
	v154 = loc24
	loc14 = v154
	v154 = loc25
	loc15 = v154
	goto l00111F10
	// succ:  l00111F10
l001119FD:
	v154 = loc80
	v155 = 0x18<32>
	v154 = v154 << v155
	v155 = 0x18<32>
	v154 = v154 >> v155
	v155 = loc84
	v157 = 0x18<32>
	v155 = v155 << v157
	v157 = 0x18<32>
	v155 = v155 >> v157
	v156 = v154 == v155
	loc87 = v156
	v154 = loc87
	loc94 = v154
	goto l00111A18
	// succ:  l00111A18
l00111A16:
	// succ:  l00111A17
l00111A17:
	// succ:  l00111A18
l00111A18:
	v154 = loc23
	v160 = 0<64>
	Mem0[v154:word64] = v160
	v154 = loc23
	v155 = 8<32>
	v154 = v154 + v155
	v155 = 0<32>
	Mem0[v154:word32] = v155
	v154 = 0<32>
	loc7 = v154
	// succ:  l00111A30
l00111A30:
	v154 = loc7
	v155 = 3<32>
	v156 = v154 == v155
	loc152 = v156
	v154 = loc152
	branch !v154 l00111A42
	// succ:  l00111A3F l00111A42
l00111A3F:
	goto l00111A60
	// succ:  l00111A60
l00111A42:
	v154 = loc23
	v155 = loc7
	v157 = 2<32>
	v155 = v155 << v157
	v154 = v154 + v155
	loc88 = v154
	v154 = loc88
	v155 = 0<32>
	Mem0[v154:word32] = v155
	v154 = loc7
	v155 = 1<32>
	v154 = v154 + v155
	loc89 = v154
	v154 = loc89
	loc7 = v154
	goto l00111A18
	// succ:  l00111A18
l00111A60:
	v154 = loc34
	v160 = 0<64>
	Mem0[v154:word64] = v160
	v154 = loc34
	v155 = 8<32>
	v154 = v154 + v155
	v155 = 0<32>
	Mem0[v154:word32] = v155
	v154 = 0<32>
	loc8 = v154
	// succ:  l00111A79
l00111A79:
	v154 = loc8
	v155 = 3<32>
	v156 = v154 == v155
	loc153 = v156
	v154 = loc153
	branch !v154 l00111A8B
	// succ:  l00111A88 l00111A8B
l00111A88:
	goto l00111AA9
	// succ:  l00111AA9
l00111A8B:
	v154 = loc34
	v155 = loc8
	v157 = 2<32>
	v155 = v155 << v157
	v154 = v154 + v155
	loc90 = v154
	v154 = loc90
	v155 = 0<32>
	Mem0[v154:word32] = v155
	v154 = loc8
	v155 = 1<32>
	v154 = v154 + v155
	loc91 = v154
	v154 = loc91
	loc8 = v154
	goto l00111A60
	// succ:  l00111A60
l00111AA9:
	v154 = loc45
	v160 = 0<64>
	Mem0[v154:word64] = v160
	v154 = loc45
	v155 = 8<32>
	v154 = v154 + v155
	v155 = 0<32>
	Mem0[v154:word32] = v155
	v154 = 0<32>
	loc9 = v154
	// succ:  l00111AC2
l00111AC2:
	v154 = loc9
	v155 = 3<32>
	v156 = v154 == v155
	loc154 = v156
	v154 = loc154
	branch !v154 l00111AD4
	// succ:  l00111AD1 l00111AD4
l00111AD1:
	goto l00111AF2
	// succ:  l00111AF2
l00111AD4:
	v154 = loc45
	v155 = loc9
	v157 = 2<32>
	v155 = v155 << v157
	v154 = v154 + v155
	loc92 = v154
	v154 = loc92
	v155 = 0<32>
	Mem0[v154:word32] = v155
	v154 = loc9
	v155 = 1<32>
	v154 = v154 + v155
	loc93 = v154
	v154 = loc93
	loc9 = v154
	goto l00111AA9
	// succ:  l00111AA9
l00111AF2:
	v154 = 0<32>
	Mem0[0x00140048<p32>:word32] = v154
	v154 = 0x1B4<32>
	v155 = arg2
	v157 = loc94
	v161 = loc108
	v162 = loc119
	v163 = loc130
	v164 = loc141
	v165 = loc23
	v166 = loc34
	v167 = loc45
	v168 = loc56
	invoke_viiiiiiiiii(v154, v155, v157, v161, v162, v163, v164, v165, v166, v167, v168)
	v154 = Mem0[0x00140048<p32>:word32]
	loc95 = v154
	v154 = 0<32>
	Mem0[0x00140048<p32>:word32] = v154
	v154 = loc95
	v155 = 1<32>
	v154 = v154 & v155
	loc96 = v154
	v154 = loc96
	branch !v154 l00111B37
	// succ:  l00111B26 l00111B37
l00111B26:
	v154 = ___cxa_find_matching_catch_2()
	loc26 = v154
	v154 = Mem0[0x00140094<p32>:word32]
	loc27 = v154
	v154 = loc26
	loc12 = v154
	v154 = loc27
	loc13 = v154
	goto l00111EF7
	// succ:  l00111EF7
l00111B37:
	v154 = loc70
	v169 = Mem0[v154:int8]
	v154 = CONVERT(v169, int8, word32)
	loc97 = v154
	v154 = loc97
	v155 = 0x18<32>
	v154 = v154 << v155
	v155 = 0x18<32>
	v154 = v154 >> v155
	v155 = 0<32>
	v156 = v154 < v155
	loc98 = v156
	v154 = loc73
	v154 = Mem0[v154:word32]
	loc99 = v154
	v154 = loc97
	v155 = 0xFF<32>
	v154 = v154 & v155
	loc100 = v154
	v154 = loc98
	branch !v154 l00111B61
	// succ:  l00111B5E l00111B61
l00111B5E:
	v154 = loc99
	goto l00111B63
	// succ:  l00111B63
l00111B61:
	v154 = loc100
	// succ:  l00111B63
l00111B63:
	loc101 = v154
	v154 = loc56
	v154 = Mem0[v154:word32]
	loc102 = v154
	v154 = loc101
	v155 = loc102
	v156 = v154 > v155
	loc103 = v156
	v154 = loc103
	branch !v154 l00111C1A
	// succ:  l00111B78 l00111C1A
l00111B78:
	v154 = loc101
	v155 = loc102
	v154 = v154 - v155
	loc104 = v154
	v154 = loc104
	v155 = 1<32>
	v154 = v154 << v155
	loc105 = v154
	v154 = loc45
	v155 = 0xB<32>
	v154 = v154 + v155
	loc106 = v154
	v154 = loc106
	v170 = Mem0[v154:int8]
	v154 = CONVERT(v170, int8, word32)
	loc107 = v154
	v154 = loc107
	v155 = 0x18<32>
	v154 = v154 << v155
	v155 = 0x18<32>
	v154 = v154 >> v155
	v155 = 0<32>
	v156 = v154 < v155
	loc109 = v156
	v154 = loc45
	v155 = 4<32>
	v154 = v154 + v155
	loc110 = v154
	v154 = loc110
	v154 = Mem0[v154:word32]
	loc111 = v154
	v154 = loc107
	v155 = 0xFF<32>
	v154 = v154 & v155
	loc112 = v154
	v154 = loc109
	branch !v154 l00111BBE
	// succ:  l00111BBB l00111BBE
l00111BBB:
	v154 = loc111
	goto l00111BC0
	// succ:  l00111BC0
l00111BBE:
	v154 = loc112
	// succ:  l00111BC0
l00111BC0:
	loc113 = v154
	v154 = loc34
	v155 = 0xB<32>
	v154 = v154 + v155
	loc114 = v154
	v154 = loc114
	v171 = Mem0[v154:int8]
	v154 = CONVERT(v171, int8, word32)
	loc115 = v154
	v154 = loc115
	v155 = 0x18<32>
	v154 = v154 << v155
	v155 = 0x18<32>
	v154 = v154 >> v155
	v155 = 0<32>
	v156 = v154 < v155
	loc116 = v156
	v154 = loc34
	v155 = 4<32>
	v154 = v154 + v155
	loc117 = v154
	v154 = loc117
	v154 = Mem0[v154:word32]
	loc118 = v154
	v154 = loc115
	v155 = 0xFF<32>
	v154 = v154 & v155
	loc120 = v154
	v154 = loc116
	branch !v154 l00111BFB
	// succ:  l00111BF8 l00111BFB
l00111BF8:
	v154 = loc118
	goto l00111BFD
	// succ:  l00111BFD
l00111BFB:
	v154 = loc120
	// succ:  l00111BFD
l00111BFD:
	loc121 = v154
	v154 = loc105
	v155 = 1<32>
	v154 = v154 | v155
	loc122 = v154
	v154 = loc113
	v155 = loc122
	v154 = v154 + v155
	loc123 = v154
	v154 = loc123
	v155 = loc121
	v154 = v154 + v155
	loc124 = v154
	v154 = loc124
	loc17 = v154
	goto l00111CC1
	// succ:  l00111CC1
l00111C1A:
	v154 = loc45
	v155 = 0xB<32>
	v154 = v154 + v155
	loc125 = v154
	v154 = loc125
	v172 = Mem0[v154:int8]
	v154 = CONVERT(v172, int8, word32)
	loc126 = v154
	v154 = loc126
	v155 = 0x18<32>
	v154 = v154 << v155
	v155 = 0x18<32>
	v154 = v154 >> v155
	v155 = 0<32>
	v156 = v154 < v155
	loc127 = v156
	v154 = loc45
	v155 = 4<32>
	v154 = v154 + v155
	loc128 = v154
	v154 = loc128
	v154 = Mem0[v154:word32]
	loc129 = v154
	v154 = loc126
	v155 = 0xFF<32>
	v154 = v154 & v155
	loc131 = v154
	v154 = loc127
	branch !v154 l00111C57
	// succ:  l00111C53 l00111C57
l00111C53:
	v154 = loc129
	goto l00111C5A
	// succ:  l00111C5A
l00111C57:
	v154 = loc131
	// succ:  l00111C5A
l00111C5A:
	loc132 = v154
	v154 = loc34
	v155 = 0xB<32>
	v154 = v154 + v155
	loc133 = v154
	v154 = loc133
	v173 = Mem0[v154:int8]
	v154 = CONVERT(v173, int8, word32)
	loc134 = v154
	v154 = loc134
	v155 = 0x18<32>
	v154 = v154 << v155
	v155 = 0x18<32>
	v154 = v154 >> v155
	v155 = 0<32>
	v156 = v154 < v155
	loc135 = v156
	v154 = loc34
	v155 = 4<32>
	v154 = v154 + v155
	loc136 = v154
	v154 = loc136
	v154 = Mem0[v154:word32]
	loc137 = v154
	v154 = loc134
	v155 = 0xFF<32>
	v154 = v154 & v155
	loc138 = v154
	v154 = loc135
	branch !v154 l00111CA2
	// succ:  l00111C9E l00111CA2
l00111C9E:
	v154 = loc137
	goto l00111CA5
	// succ:  l00111CA5
l00111CA2:
	v154 = loc138
	// succ:  l00111CA5
l00111CA5:
	loc139 = v154
	v154 = loc132
	v155 = 2<32>
	v154 = v154 + v155
	loc140 = v154
	v154 = loc140
	v155 = loc139
	v154 = v154 + v155
	loc142 = v154
	v154 = loc142
	loc17 = v154
	// succ:  l00111CC1
l00111CC1:
	v154 = loc17
	v155 = loc102
	v154 = v154 + v155
	loc143 = v154
	v154 = loc143
	v155 = 0x64<32>
	v156 = v154 >u v155
	loc144 = v156
	// succ:  l00111CD4
l00111CD4:
	v154 = loc144
	branch !v154 l00111D80
	// succ:  l00111CDB l00111D80
l00111CDB:
	v154 = loc143
	v154 = _malloc(v154)
	loc145 = v154
	v154 = loc145
	loc146 = v154
	v154 = loc145
	v155 = 0<32>
	v156 = v154 == v155
	loc147 = v156
	v154 = loc147
	branch !v154 l00111D63
	// succ:  l00111CF8 l00111D63
l00111CF8:
	v154 = 0<32>
	Mem0[0x00140048<p32>:word32] = v154
	v154 = 0x18A<32>
	invoke_v(v154)
	v154 = Mem0[0x00140048<p32>:word32]
	loc148 = v154
	v154 = 0<32>
	Mem0[0x00140048<p32>:word32] = v154
	v154 = loc148
	v155 = 1<32>
	v154 = v154 & v155
	loc149 = v154
	v154 = loc149
	branch !v154 l00111D30
	// succ:  l00111D18 l00111D30
l00111D18:
	v154 = ___cxa_find_matching_catch_2()
	loc28 = v154
	v154 = Mem0[0x00140094<p32>:word32]
	loc29 = v154
	v154 = loc28
	loc6 = v154
	v154 = loc29
	loc11 = v154
	v154 = loc146
	loc22 = v154
	goto l00111D9A
	// succ:  l00111D9A
l00111D30:
	v154 = loc70
	v174 = Mem0[v154:int8]
	v154 = CONVERT(v174, int8, word32)
	loc18 = v154
	v154 = loc73
	v154 = Mem0[v154:word32]
	loc19 = v154
	v154 = loc56
	v154 = Mem0[v154:word32]
	loc20 = v154
	v154 = 0<32>
	loc10 = v154
	v154 = loc146
	loc21 = v154
	v154 = loc18
	loc33 = v154
	v154 = loc19
	loc39 = v154
	v154 = loc20
	loc43 = v154
	v154 = 0x1A<32>
	loc155 = v154
	goto l00111D9A
	// succ:  l00111D9A
l00111D61:
	goto l00111D7E
	// succ:  l00111D7E
l00111D63:
	v154 = loc145
	loc10 = v154
	v154 = loc146
	loc21 = v154
	v154 = loc97
	loc33 = v154
	v154 = loc99
	loc39 = v154
	v154 = loc102
	loc43 = v154
	v154 = 0x1A<32>
	loc155 = v154
	// succ:  l00111D7E
l00111D7E:
	goto l00111D99
	// succ:  l00111D99
l00111D80:
	v154 = loc62
	loc10 = v154
	v154 = 0<32>
	loc21 = v154
	v154 = loc97
	loc33 = v154
	v154 = loc99
	loc39 = v154
	v154 = loc102
	loc43 = v154
	v154 = 0x1A<32>
	loc155 = v154
	// succ:  l00111D99
l00111D99:
	// succ:  l00111D9A
l00111D9A:
	v154 = loc155
	v155 = 0x1A<32>
	v156 = v154 == v155
	branch !v156 l00111ED9
	// succ:  l00111DA3 l00111ED9
l00111DA3:
	v154 = arg3
	v155 = 4<32>
	v154 = v154 + v155
	loc30 = v154
	v154 = loc30
	v154 = Mem0[v154:word32]
	loc31 = v154
	v154 = loc33
	v155 = 0x18<32>
	v154 = v154 << v155
	v155 = 0x18<32>
	v154 = v154 >> v155
	v155 = 0<32>
	v156 = v154 < v155
	loc32 = v156
	v154 = arg5
	v154 = Mem0[v154:word32]
	loc35 = v154
	v154 = loc32
	branch !v154 l00111DCC
	// succ:  l00111DC9 l00111DCC
l00111DC9:
	v154 = loc35
	goto l00111DCE
	// succ:  l00111DCE
l00111DCC:
	v154 = arg5
	// succ:  l00111DCE
l00111DCE:
	loc36 = v154
	v154 = loc33
	v155 = 0xFF<32>
	v154 = v154 & v155
	loc37 = v154
	v154 = loc32
	branch !v154 l00111DE0
	// succ:  l00111DDD l00111DE0
l00111DDD:
	v154 = loc39
	goto l00111DE2
	// succ:  l00111DE2
l00111DE0:
	v154 = loc37
	// succ:  l00111DE2
l00111DE2:
	loc38 = v154
	v154 = loc36
	v155 = loc38
	v154 = v154 + v155
	loc40 = v154
	v154 = loc130
	v175 = Mem0[v154:int8]
	v154 = CONVERT(v175, int8, word32)
	loc41 = v154
	v154 = loc141
	v176 = Mem0[v154:int8]
	v154 = CONVERT(v176, int8, word32)
	loc42 = v154
	v154 = 0<32>
	Mem0[0x00140048<p32>:word32] = v154
	v154 = 0x1B5<32>
	v155 = loc10
	v157 = loc63
	v161 = loc64
	v162 = loc31
	v163 = loc36
	v164 = loc40
	v165 = loc67
	v166 = loc94
	v167 = loc119
	v168 = loc41
	v177 = loc42
	v178 = loc23
	v179 = loc34
	v180 = loc45
	v181 = loc43
	invoke_viiiiiiiiiiiiiii(v154, v155, v157, v161, v162, v163, v164, v165, v166, v167, v168, v177, v178, v179, v180, v181)
	v154 = Mem0[0x00140048<p32>:word32]
	loc44 = v154
	v154 = 0<32>
	Mem0[0x00140048<p32>:word32] = v154
	v154 = loc44
	v155 = 1<32>
	v154 = v154 & v155
	loc46 = v154
	v154 = loc46
	v156 = v154 == 0<32>
	branch !v156 l00111EC4
	// succ:  l00111E37 l00111EC4
l00111E37:
	v154 = arg1
	v154 = Mem0[v154:word32]
	loc47 = v154
	v154 = loc65
	v155 = loc47
	Mem0[v154:word32] = v155
	v154 = loc63
	v154 = Mem0[v154:word32]
	loc48 = v154
	v154 = loc64
	v154 = Mem0[v154:word32]
	loc49 = v154
	v154 = 0<32>
	Mem0[0x00140048<p32>:word32] = v154
	v154 = loc16
	v155 = loc65
	v155 = Mem0[v155:word32]
	Mem0[v154:word32] = v155
	v154 = 0x168<32>
	v155 = loc16
	v157 = loc10
	v161 = loc48
	v162 = loc49
	v163 = arg3
	v164 = arg4
	v154 = invoke_iiiiiii(v154, v155, v157, v161, v162, v163, v164)
	loc50 = v154
	v154 = Mem0[0x00140048<p32>:word32]
	loc51 = v154
	v154 = 0<32>
	Mem0[0x00140048<p32>:word32] = v154
	v154 = loc51
	v155 = 1<32>
	v154 = v154 & v155
	loc52 = v154
	v154 = loc52
	v156 = v154 == 0<32>
	branch !v156 l00111EC3
	// succ:  l00111E88 l00111EC3
l00111E88:
	v154 = loc21
	v155 = 0<32>
	v156 = v154 == v155
	loc53 = v156
	v154 = loc53
	v156 = v154 == 0<32>
	branch !v156 l00111E9E
	// succ:  l00111E94 l00111E9E
l00111E94:
	v154 = loc21
	loc54 = v154
	v154 = loc54
	_free(v154)
	// succ:  l00111E9E
l00111E9E:
	v154 = loc45
	fn0011BAF7(v154)
	v154 = loc34
	fn0011BAF7(v154)
	v154 = loc23
	fn0011BAF7(v154)
	v154 = loc108
	v154 = Mem0[v154:word32]
	loc55 = v154
	v154 = loc55
	v154 = fn0011B43F(v154)
	v154 = loc156
	Mem0[0x00140030<p32>:word32] = v154
	v154 = loc50
	return v154
	// succ:  fn0011187C_exit
l00111EC3:
	// succ:  l00111EC4
l00111EC4:
	v154 = ___cxa_find_matching_catch_2()
	loc57 = v154
	v154 = Mem0[0x00140094<p32>:word32]
	loc58 = v154
	v154 = loc57
	loc6 = v154
	v154 = loc58
	loc11 = v154
	v154 = loc21
	loc22 = v154
	// succ:  l00111ED9
l00111ED9:
	v154 = loc22
	v155 = 0<32>
	v156 = v154 == v155
	loc59 = v156
	v154 = loc59
	v156 = v154 == 0<32>
	branch !v156 l00111EEF
	// succ:  l00111EE5 l00111EEF
l00111EE5:
	v154 = loc22
	loc60 = v154
	v154 = loc60
	_free(v154)
	// succ:  l00111EEF
l00111EEF:
	v154 = loc6
	loc12 = v154
	v154 = loc11
	loc13 = v154
	// succ:  l00111EF7
l00111EF7:
	v154 = loc45
	fn0011BAF7(v154)
	v154 = loc34
	fn0011BAF7(v154)
	v154 = loc23
	fn0011BAF7(v154)
	v154 = loc12
	loc14 = v154
	v154 = loc13
	loc15 = v154
	// succ:  l00111F0F
l00111F0F:
	// succ:  l00111F10
l00111F10:
	v154 = loc108
	v154 = Mem0[v154:word32]
	loc61 = v154
	v154 = loc61
	v154 = fn0011B43F(v154)
	v154 = loc14
	___resumeException(v154)
	v154 = 0<32>
	return v154
	// succ:  fn0011187C_exit
l00111F25:
	return v154
	// succ:  fn0011187C_exit
fn0011187C_exit:


// fn00111F27
// Return size: 0
void fn00111F27(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7, word32 arg8, word32 arg9)
fn00111F27_entry:
	// succ:  l00111F27
l00111F27:
	v190 = Mem0[0x00140030<p32>:word32]
	loc196 = v190
	v190 = Mem0[0x00140030<p32>:word32]
	v191 = 0x70<32>
	v190 = v190 + v191
	Mem0[0x00140030<p32>:word32] = v190
	v190 = Mem0[0x00140030<p32>:word32]
	v191 = Mem0[0x00140034<p32>:word32]
	v192 = v190 >= v191
	branch !v192 l00111F43
	// succ:  l00111F3D l00111F43
l00111F3D:
	v190 = 0x70<32>
	abortStackOverflow(v190)
	// succ:  l00111F43
l00111F43:
	v190 = loc196
	v191 = 0x6C<32>
	v190 = v190 + v191
	loc20 = v190
	v190 = loc196
	v191 = 0x60<32>
	v190 = v190 + v191
	loc31 = v190
	v190 = loc196
	v191 = 0x5C<32>
	v190 = v190 + v191
	loc42 = v190
	v190 = loc196
	v191 = 0x50<32>
	v190 = v190 + v191
	loc53 = v190
	v190 = loc196
	v191 = 0x44<32>
	v190 = v190 + v191
	loc64 = v190
	v190 = loc196
	v191 = 0x38<32>
	v190 = v190 + v191
	loc75 = v190
	v190 = loc196
	v191 = 0x34<32>
	v190 = v190 + v191
	loc86 = v190
	v190 = loc196
	v191 = 0x28<32>
	v190 = v190 + v191
	loc97 = v190
	v190 = loc196
	v191 = 0x24<32>
	v190 = v190 + v191
	loc104 = v190
	v190 = loc196
	v191 = 0x18<32>
	v190 = v190 + v191
	loc105 = v190
	v190 = loc196
	v191 = 0xC<32>
	v190 = v190 + v191
	loc106 = v190
	v190 = loc196
	loc107 = v190
	v190 = arg0
	v190 = v190
	// succ:  l00111FA9
l00111FA9:
	v190 = arg2
	v191 = 0x5328<32>
	v190 = fn000EA9F7(v190, v191)
	loc108 = v190
	v190 = arg1
	v190 = v190
	// succ:  l00111FB8
l00111FB8:
	v190 = loc108
	v190 = Mem0[v190:word32]
	loc109 = v190
	v190 = loc109
	v191 = 0x2C<32>
	v190 = v190 + v191
	loc110 = v190
	v190 = loc110
	v190 = Mem0[v190:word32]
	loc111 = v190
	v190 = loc20
	v191 = loc108
	v193 = loc111
	v194 = 0x1FF<32>
	v193 = v193 & v194
	v194 = 0x700<32>
	v193 = v193 + v194
fn00111F27_exit:


// fn00112A04
// Return size: 0
void fn00112A04(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7, word32 arg8, word32 arg9, word32 arg10, word32 arg11, word32 arg12, word32 arg13, word32 arg14)
fn00112A04_entry:
	// succ:  l00112A04
l00112A04:
	v169 = Mem0[0x00140030<p32>:word32]
	loc180 = v169
	v169 = arg2
	v170 = arg0
	Mem0[v169:word32] = v170
	v169 = arg13
	v170 = 0xB<32>
	v169 = v169 + v170
	loc89 = v169
	v169 = arg13
	v170 = 4<32>
	v169 = v169 + v170
	loc91 = v169
	v169 = arg12
	v170 = 0xB<32>
	v169 = v169 + v170
	loc92 = v169
	v169 = arg12
	v170 = 4<32>
	v169 = v169 + v170
	loc93 = v169
	v169 = arg3
	v170 = 0x200<32>
	v169 = v169 & v170
	loc94 = v169
	v169 = loc94
	v170 = 0<32>
	v171 = v169 == v170
	loc95 = v171
	v169 = arg6
	v170 = 8<32>
	v169 = v169 + v170
	loc96 = v169
	v169 = arg14
	v170 = 0<32>
	v171 = v169 > v170
	loc97 = v171
	v169 = arg11
	v170 = 0xB<32>
	v169 = v169 + v170
	loc98 = v169
	v169 = arg11
	v170 = 4<32>
	v169 = v169 + v170
	loc99 = v169
	v169 = 0<32>
	loc22 = v169
	v169 = arg4
	loc26 = v169
	// succ:  l00112A63
l00112A63:
	v169 = loc22
	v170 = 4<32>
	v171 = v169 == v170
	loc175 = v171
	v169 = loc175
	branch !v169 l00112A75
	// succ:  l00112A72 l00112A75
l00112A72:
l00112A75:
	v169 = arg8
	v170 = loc22
	v169 = v169 + v170
	loc106 = v169
	v169 = loc106
	v172 = Mem0[v169:int8]
	v169 = CONVERT(v172, int8, word32)
	loc107 = v169
	v169 = loc107
	v170 = 0x18<32>
	v169 = v169 << v170
	v170 = 0x18<32>
	v169 = v169 >> v170
	loc108 = v169
	// succ:  l00112A8D
l00112A8D:
	v169 = loc108
	v170 = 0<32>
	v169 = v169 - v170
	switch (v169) { l00112AAA l00112AC2 <null> <null> <null> }
	// succ:  l00112AAA l00112AC2
l00112AAA:
	v169 = arg2
	v169 = Mem0[v169:word32]
	loc109 = v169
	v169 = arg1
	v170 = loc109
	Mem0[v169:word32] = v170
	v169 = loc26
	loc33 = v169
l00112AC1:
	// succ:  l00112AC2
l00112AC2:
	v169 = arg2
	v169 = Mem0[v169:word32]
	loc110 = v169
	v169 = arg1
	v170 = loc110
	Mem0[v169:word32] = v170
	v169 = arg6
	v169 = Mem0[v169:word32]
	loc111 = v169
	v169 = loc111
	v170 = 0x1C<32>
	v169 = v169 + v170
	loc112 = v169
	v169 = loc112
	v169 = Mem0[v169:word32]
	loc113 = v169
	v169 = arg6
	v170 = 0x20<32>
	v173 = loc113
	v174 = 0x1FF<32>
	v173 = v173 & v174
	v174 = 0x1B20<32>
	v173 = v173 + v174
fn00112A04_exit:


// fn001131DC
// Return size: 0
void fn001131DC(word32 arg0)
fn001131DC_entry:
	// succ:  l001131DC
l001131DC:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	return
	// succ:  fn001131DC_exit
l001131E3:
	return
	// succ:  fn001131DC_exit
fn001131DC_exit:


// fn001131E5
// Return size: 0
void fn001131E5(word32 arg0)
fn001131E5_entry:
	// succ:  l001131E5
l001131E5:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn001131E5_exit
l001131F1:
	return
	// succ:  fn001131E5_exit
fn001131E5_exit:


// fn001131F3
// Return size: 0
word32 fn001131F3(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, real64 arg5)
fn001131F3_entry:
	// succ:  l001131F3
l001131F3:
	v187 = Mem0[0x00140030<p32>:word32]
	loc189 = v187
	v187 = Mem0[0x00140030<p32>:word32]
	v188 = 0x3F0<32>
	v187 = v187 + v188
	Mem0[0x00140030<p32>:word32] = v187
	v187 = Mem0[0x00140030<p32>:word32]
	v188 = Mem0[0x00140034<p32>:word32]
	v189 = v187 >= v188
	branch !v189 l0011320F
	// succ:  l00113209 l0011320F
l00113209:
	v187 = 0x3F0<32>
	abortStackOverflow(v187)
	// succ:  l0011320F
l0011320F:
	v187 = loc189
	v188 = 0x37C<32>
	v187 = v187 + v188
	loc20 = v187
	v187 = loc189
	v188 = 8<32>
	v187 = v187 + v188
	loc187 = v187
	v187 = loc189
	loc186 = v187
	v187 = loc189
	v188 = 0x384<32>
	v187 = v187 + v188
	loc139 = v187
	v187 = loc189
	v188 = 0x378<32>
	v187 = v187 + v188
	loc150 = v187
	v187 = loc189
	v188 = 0x1E8<32>
	v187 = v187 + v188
	loc161 = v187
	v187 = loc189
	v188 = 0x1E0<32>
	v187 = v187 + v188
	loc172 = v187
	v187 = loc189
	v188 = 0x380<32>
	v187 = v187 + v188
	loc33 = v187
	v187 = loc189
	v188 = 0x1DC<32>
	v187 = v187 + v188
	loc44 = v187
	v187 = loc189
	v188 = 0x1D8<32>
	v187 = v187 + v188
	loc55 = v187
	v187 = loc189
	v188 = 0x1CC<32>
	v187 = v187 + v188
	loc66 = v187
	v187 = loc189
	v188 = 0x1C0<32>
	v187 = v187 + v188
	loc77 = v187
	v187 = loc189
	v188 = 0x1B4<32>
	v187 = v187 + v188
	loc88 = v187
	v187 = loc189
	v188 = 0x1B0<32>
	v187 = v187 + v188
	loc95 = v187
	v187 = loc189
	v188 = 0x20<32>
	v187 = v187 + v188
	loc96 = v187
	v187 = loc189
	v188 = 0x18<32>
	v187 = v187 + v188
	loc97 = v187
	v187 = loc189
	v188 = 0x14<32>
	v187 = v187 + v188
	loc98 = v187
	v187 = loc189
	v188 = 0x10<32>
	v187 = v187 + v188
	loc99 = v187
	v187 = loc150
	v188 = loc139
	Mem0[v187:word32] = v188
	v187 = loc186
	v190 = arg5
	Mem0[v187:real64] = v190
	v187 = loc139
	v188 = 0x64<32>
	v191 = 0x3DC0<32>
	v192 = loc186
	v187 = fn000DB3DF(v187, v188, v191, v192)
	loc100 = v187
	v187 = loc100
	v188 = 0x63<32>
	v189 = v187 >u v188
	loc101 = v189
	// succ:  l001132D9
l001132D9:
	v187 = loc101
	branch !v187 l00113417
	// succ:  l001132DF l00113417
l001132DF:
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = 0x17B<32>
	v187 = invoke_i(v187)
	loc102 = v187
	v187 = Mem0[0x00140048<p32>:word32]
	loc103 = v187
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = loc103
	v188 = 1<32>
	v187 = v187 & v188
	loc104 = v187
	v187 = loc104
	branch !v187 l0011330B
	// succ:  l001132FD l0011330B
l001132FD:
	v187 = 0<32>
	loc27 = v187
	v187 = 0<32>
	loc30 = v187
	v187 = 8<32>
	loc188 = v187
	goto l00113415
	// succ:  l00113415
l0011330B:
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = loc187
	v190 = arg5
	Mem0[v187:real64] = v190
	v187 = 0x18D<32>
	v188 = loc150
	v191 = loc102
	v192 = 0x3DC0<32>
	v193 = loc187
	v187 = invoke_iiiii(v187, v188, v191, v192, v193)
	loc105 = v187
	v187 = Mem0[0x00140048<p32>:word32]
	loc106 = v187
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = loc106
	v188 = 1<32>
	v187 = v187 & v188
	loc107 = v187
	v187 = loc107
	branch !v187 l0011334B
	// succ:  l0011333D l0011334B
l0011333D:
	v187 = 0<32>
	loc27 = v187
	v187 = 0<32>
	loc30 = v187
	v187 = 8<32>
	loc188 = v187
	goto l00113414
	// succ:  l00113414
l0011334B:
	v187 = loc150
	v187 = Mem0[v187:word32]
	loc108 = v187
	v187 = loc108
	v188 = 0<32>
	v189 = v187 == v188
	loc109 = v189
	v187 = loc109
	branch !v187 l00113397
	// succ:  l0011335E l00113397
l0011335E:
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = 0x18A<32>
	invoke_v(v187)
	v187 = Mem0[0x00140048<p32>:word32]
	loc111 = v187
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = loc111
	v188 = 1<32>
	v187 = v187 & v188
	loc112 = v187
	v187 = loc112
	branch !v187 l0011338A
	// succ:  l0011337A l0011338A
l0011337A:
	v187 = 0<32>
	loc27 = v187
	v187 = 0<32>
	loc30 = v187
	v187 = 8<32>
	loc188 = v187
	goto l0011342E
	// succ:  l0011342E
l0011338A:
	v187 = loc150
	v187 = Mem0[v187:word32]
	loc22 = v187
	v187 = loc22
	loc94 = v187
	goto l0011339F
	// succ:  l0011339F
l00113397:
	v187 = loc108
	loc110 = v187
	v187 = loc110
	loc94 = v187
	// succ:  l0011339F
l0011339F:
	v187 = loc105
	v188 = 2<32>
	v187 = v187 << v188
	loc115 = v187
	v187 = loc115
	v187 = _malloc(v187)
	loc116 = v187
	v187 = loc116
	loc117 = v187
	v187 = loc116
	v188 = 0<32>
	v189 = v187 == v188
	loc118 = v189
	v187 = loc118
	branch !v187 l001133FE
	// succ:  l001133BD l001133FE
l001133BD:
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = 0x18A<32>
	invoke_v(v187)
	v187 = Mem0[0x00140048<p32>:word32]
	loc119 = v187
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = loc119
	v188 = 1<32>
	v187 = v187 & v188
	loc120 = v187
	v187 = loc120
	branch !v187 l001133E7
	// succ:  l001133D9 l001133E7
l001133D9:
	v187 = loc117
	loc27 = v187
	v187 = loc94
	loc30 = v187
	v187 = 8<32>
	loc188 = v187
	goto l001133FC
	// succ:  l001133FC
l001133E7:
	v187 = 0<32>
	loc6 = v187
	v187 = loc105
	loc11 = v187
	v187 = loc117
	loc28 = v187
	v187 = loc94
	loc31 = v187
	v187 = 0xB<32>
	loc188 = v187
	// succ:  l001133FC
l001133FC:
	goto l00113413
	// succ:  l00113413
l001133FE:
	v187 = loc116
	loc6 = v187
	v187 = loc105
	loc11 = v187
	v187 = loc117
	loc28 = v187
	v187 = loc94
	loc31 = v187
	v187 = 0xB<32>
	loc188 = v187
	// succ:  l00113413
l00113413:
	// succ:  l00113414
l00113414:
	// succ:  l00113415
l00113415:
	goto l0011342D
	// succ:  l0011342D
l00113417:
	v187 = loc161
	loc6 = v187
	v187 = loc100
	loc11 = v187
	v187 = 0<32>
	loc28 = v187
	v187 = 0<32>
	loc31 = v187
	v187 = 0xB<32>
	loc188 = v187
	// succ:  l0011342D
l0011342D:
	// succ:  l0011342E
l0011342E:
	v187 = loc188
	v188 = 0xB<32>
	v189 = v187 == v188
	branch !v189 l00113A5D
	// succ:  l00113437 l00113A5D
l00113437:
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = 0x167<32>
	v188 = arg3
	v187 = invoke_ii(v187, v188)
	loc121 = v187
	v187 = Mem0[0x00140048<p32>:word32]
	loc122 = v187
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = loc122
	v188 = 1<32>
	v187 = v187 & v188
	loc123 = v187
	v187 = loc123
	branch !v187 l00113465
	// succ:  l00113457 l00113465
l00113457:
	v187 = loc28
	loc27 = v187
	v187 = loc31
	loc30 = v187
	v187 = 8<32>
	loc188 = v187
	goto l00113A5B
	// succ:  l00113A5B
l00113465:
	v187 = loc172
	v188 = loc121
	Mem0[v187:word32] = v188
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = 0x164<32>
	v188 = loc172
	v191 = 0x4C90<32>
	v187 = invoke_iii(v187, v188, v191)
	loc124 = v187
	v187 = Mem0[0x00140048<p32>:word32]
	loc125 = v187
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = loc125
	v188 = 1<32>
	v187 = v187 & v188
	loc126 = v187
	// succ:  l0011348E
l0011348E:
	v187 = loc126
	branch !v187 l001134A9
	// succ:  l00113494 l001134A9
l00113494:
	v187 = ___cxa_find_matching_catch_2()
	loc52 = v187
	v187 = Mem0[0x00140094<p32>:word32]
	loc53 = v187
	v187 = loc52
	loc16 = v187
	v187 = loc53
	loc17 = v187
	v187 = loc121
	loc89 = v187
	goto l00113A43
	// succ:  l00113A43
l001134A9:
	v187 = loc150
	v187 = Mem0[v187:word32]
	loc127 = v187
	v187 = loc127
	v188 = loc11
	v187 = v187 + v188
	loc128 = v187
	v187 = loc124
	v187 = Mem0[v187:word32]
	loc129 = v187
	v187 = loc129
	v188 = 0x30<32>
	v187 = v187 + v188
	loc130 = v187
	v187 = loc130
	v187 = Mem0[v187:word32]
	loc131 = v187
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = loc131
	v188 = loc124
	v191 = loc127
	v192 = loc128
	v193 = loc6
	v187 = invoke_iiiii(v187, v188, v191, v192, v193)
	v187 = Mem0[0x00140048<p32>:word32]
	loc132 = v187
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = loc132
	v188 = 1<32>
	v187 = v187 & v188
	loc133 = v187
	v187 = loc133
	branch !v187 l00113514
	// succ:  l001134FD l00113514
l001134FD:
	v187 = ___cxa_find_matching_catch_2()
	loc54 = v187
	v187 = Mem0[0x00140094<p32>:word32]
	loc56 = v187
	v187 = loc54
	loc16 = v187
	v187 = loc56
	loc17 = v187
	v187 = loc121
	loc89 = v187
	goto l00113A44
	// succ:  l00113A44
l00113514:
	v187 = loc11
	v188 = 0<32>
	v189 = v187 == v188
	loc134 = v189
	v187 = loc134
	branch !v187 l00113527
	// succ:  l00113521 l00113527
l00113521:
	v187 = 0<32>
	loc145 = v187
	goto l0011354E
	// succ:  l0011354E
l00113527:
	v187 = loc150
	v187 = Mem0[v187:word32]
	loc135 = v187
	v187 = loc135
	v194 = Mem0[v187:int8]
	v187 = CONVERT(v194, int8, word32)
	loc136 = v187
	v187 = loc136
	v188 = 0x18<32>
	v187 = v187 << v188
	v188 = 0x18<32>
	v187 = v187 >> v188
	v188 = 0x2D<32>
	v189 = v187 == v188
	loc137 = v189
	v187 = loc137
	loc145 = v187
	// succ:  l0011354E
l0011354E:
	v187 = loc66
	v195 = 0<64>
	Mem0[v187:word64] = v195
	v187 = loc66
	v188 = 8<32>
	v187 = v187 + v188
	v188 = 0<32>
	Mem0[v187:word32] = v188
	v187 = 0<32>
	loc7 = v187
	// succ:  l00113566
l00113566:
	v187 = loc7
	v188 = 3<32>
	v189 = v187 == v188
	loc183 = v189
	v187 = loc183
	branch !v187 l00113578
	// succ:  l00113575 l00113578
l00113575:
	goto l0011359A
	// succ:  l0011359A
l00113578:
	v187 = loc66
	v188 = loc7
	v191 = 2<32>
	v188 = v188 << v191
	v187 = v187 + v188
	loc138 = v187
	v187 = loc138
	v188 = 0<32>
	Mem0[v187:word32] = v188
	v187 = loc7
	v188 = 1<32>
	v187 = v187 + v188
	loc140 = v187
	v187 = loc140
	loc7 = v187
	goto l0011354E
	// succ:  l0011354E
l0011359A:
	v187 = loc77
	v195 = 0<64>
	Mem0[v187:word64] = v195
	v187 = loc77
	v188 = 8<32>
	v187 = v187 + v188
	v188 = 0<32>
	Mem0[v187:word32] = v188
	v187 = 0<32>
	loc8 = v187
	// succ:  l001135B3
l001135B3:
	v187 = loc8
	v188 = 3<32>
	v189 = v187 == v188
	loc184 = v189
	v187 = loc184
	branch !v187 l001135C5
	// succ:  l001135C2 l001135C5
l001135C2:
	goto l001135E7
	// succ:  l001135E7
l001135C5:
	v187 = loc77
	v188 = loc8
	v191 = 2<32>
	v188 = v188 << v191
	v187 = v187 + v188
	loc141 = v187
	v187 = loc141
	v188 = 0<32>
	Mem0[v187:word32] = v188
	v187 = loc8
	v188 = 1<32>
	v187 = v187 + v188
	loc142 = v187
	v187 = loc142
	loc8 = v187
	goto l0011359A
	// succ:  l0011359A
l001135E7:
	v187 = loc88
	v195 = 0<64>
	Mem0[v187:word64] = v195
	v187 = loc88
	v188 = 8<32>
	v187 = v187 + v188
	v188 = 0<32>
	Mem0[v187:word32] = v188
	v187 = 0<32>
	loc9 = v187
	// succ:  l00113600
l00113600:
	v187 = loc9
	v188 = 3<32>
	v189 = v187 == v188
	loc185 = v189
	v187 = loc185
	branch !v187 l00113612
	// succ:  l0011360F l00113612
l0011360F:
	goto l00113634
	// succ:  l00113634
l00113612:
	v187 = loc88
	v188 = loc9
	v191 = 2<32>
	v188 = v188 << v191
	v187 = v187 + v188
	loc143 = v187
	v187 = loc143
	v188 = 0<32>
	Mem0[v187:word32] = v188
	v187 = loc9
	v188 = 1<32>
	v187 = v187 + v188
	loc144 = v187
	v187 = loc144
	loc9 = v187
	goto l001135E7
	// succ:  l001135E7
l00113634:
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = 0x1B6<32>
	v188 = arg2
	v191 = loc145
	v192 = loc172
	v193 = loc33
	v196 = loc44
	v197 = loc55
	v198 = loc66
	v199 = loc77
	v200 = loc88
	v201 = loc95
	invoke_viiiiiiiiii(v187, v188, v191, v192, v193, v196, v197, v198, v199, v200, v201)
	v187 = Mem0[0x00140048<p32>:word32]
	loc146 = v187
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = loc146
	v188 = 1<32>
	v187 = v187 & v188
	loc147 = v187
	v187 = loc147
	branch !v187 l0011367D
	// succ:  l0011366C l0011367D
l0011366C:
	v187 = ___cxa_find_matching_catch_2()
	loc57 = v187
	v187 = Mem0[0x00140094<p32>:word32]
	loc58 = v187
	v187 = loc57
	loc14 = v187
	v187 = loc58
	loc15 = v187
	goto l00113A1F
	// succ:  l00113A1F
l0011367D:
	v187 = loc95
	v187 = Mem0[v187:word32]
	loc148 = v187
	v187 = loc11
	v188 = loc148
	v189 = v187 > v188
	loc149 = v189
	v187 = loc149
	branch !v187 l00113770
	// succ:  l00113693 l00113770
l00113693:
	v187 = loc11
	v188 = loc148
	v187 = v187 - v188
	loc151 = v187
	v187 = loc151
	v188 = 1<32>
	v187 = v187 << v188
	loc152 = v187
	v187 = loc88
	v188 = 8<32>
	v187 = v187 + v188
	loc153 = v187
	v187 = loc153
	v188 = 3<32>
	v187 = v187 + v188
	loc154 = v187
	v187 = loc154
	v202 = Mem0[v187:int8]
	v187 = CONVERT(v202, int8, word32)
	loc155 = v187
	v187 = loc155
	v188 = 0x18<32>
	v187 = v187 << v188
	v188 = 0x18<32>
	v187 = v187 >> v188
	v188 = 0<32>
	v189 = v187 < v188
	loc156 = v189
	v187 = loc88
	v188 = 4<32>
	v187 = v187 + v188
	loc157 = v187
	v187 = loc157
	v187 = Mem0[v187:word32]
	loc158 = v187
	v187 = loc155
	v188 = 0xFF<32>
	v187 = v187 & v188
	loc159 = v187
	v187 = loc156
	branch !v187 l001136F2
	// succ:  l001136EE l001136F2
l001136EE:
	v187 = loc158
	goto l001136F5
	// succ:  l001136F5
l001136F2:
	v187 = loc159
	// succ:  l001136F5
l001136F5:
	loc160 = v187
	v187 = loc77
	v188 = 8<32>
	v187 = v187 + v188
	loc162 = v187
	v187 = loc162
	v188 = 3<32>
	v187 = v187 + v188
	loc163 = v187
	v187 = loc163
	v203 = Mem0[v187:int8]
	v187 = CONVERT(v203, int8, word32)
	loc164 = v187
	v187 = loc164
	v188 = 0x18<32>
	v187 = v187 << v188
	v188 = 0x18<32>
	v187 = v187 >> v188
	v188 = 0<32>
	v189 = v187 < v188
	loc165 = v189
	v187 = loc77
	v188 = 4<32>
	v187 = v187 + v188
	loc166 = v187
	v187 = loc166
	v187 = Mem0[v187:word32]
	loc167 = v187
	v187 = loc164
	v188 = 0xFF<32>
	v187 = v187 & v188
	loc168 = v187
	v187 = loc165
	branch !v187 l00113746
	// succ:  l00113742 l00113746
l00113742:
	v187 = loc167
	goto l00113749
	// succ:  l00113749
l00113746:
	v187 = loc168
	// succ:  l00113749
l00113749:
	loc169 = v187
	v187 = loc152
	v188 = 1<32>
	v187 = v187 | v188
	loc170 = v187
	v187 = loc160
	v188 = loc170
	v187 = v187 + v188
	loc171 = v187
	v187 = loc171
	v188 = loc169
	v187 = v187 + v188
	loc173 = v187
	v187 = loc173
	loc21 = v187
	goto l0011381D
	// succ:  l0011381D
l00113770:
	v187 = loc88
	v188 = 8<32>
	v187 = v187 + v188
	loc174 = v187
	v187 = loc174
	v188 = 3<32>
	v187 = v187 + v188
	loc175 = v187
	v187 = loc175
	v204 = Mem0[v187:int8]
	v187 = CONVERT(v204, int8, word32)
	loc176 = v187
	v187 = loc176
	v188 = 0x18<32>
	v187 = v187 << v188
	v188 = 0x18<32>
	v187 = v187 >> v188
	v188 = 0<32>
	v189 = v187 < v188
	loc177 = v189
	v187 = loc88
	v188 = 4<32>
	v187 = v187 + v188
	loc178 = v187
	v187 = loc178
	v187 = Mem0[v187:word32]
	loc179 = v187
	v187 = loc176
	v188 = 0xFF<32>
	v187 = v187 & v188
	loc180 = v187
	v187 = loc177
	branch !v187 l001137BD
	// succ:  l001137B9 l001137BD
l001137B9:
	v187 = loc179
	goto l001137C0
	// succ:  l001137C0
l001137BD:
	v187 = loc180
	// succ:  l001137C0
l001137C0:
	loc181 = v187
	v187 = loc77
	v188 = 8<32>
	v187 = v187 + v188
	loc182 = v187
	v187 = loc182
	v188 = 3<32>
	v187 = v187 + v188
	loc34 = v187
	v187 = loc34
	v205 = Mem0[v187:int8]
	v187 = CONVERT(v205, int8, word32)
	loc35 = v187
	v187 = loc35
	v188 = 0x18<32>
	v187 = v187 << v188
	v188 = 0x18<32>
	v187 = v187 >> v188
	v188 = 0<32>
	v189 = v187 < v188
	loc36 = v189
	v187 = loc77
	v188 = 4<32>
	v187 = v187 + v188
	loc37 = v187
	v187 = loc37
	v187 = Mem0[v187:word32]
	loc38 = v187
	v187 = loc35
	v188 = 0xFF<32>
	v187 = v187 & v188
	loc39 = v187
	v187 = loc36
	branch !v187 l00113805
	// succ:  l00113802 l00113805
l00113802:
	v187 = loc38
	goto l00113807
	// succ:  l00113807
l00113805:
	v187 = loc39
	// succ:  l00113807
l00113807:
	loc40 = v187
	v187 = loc181
	v188 = 2<32>
	v187 = v187 + v188
	loc41 = v187
	v187 = loc41
	v188 = loc40
	v187 = v187 + v188
	loc42 = v187
	v187 = loc42
	loc21 = v187
	// succ:  l0011381D
l0011381D:
	v187 = loc21
	v188 = loc148
	v187 = v187 + v188
	loc43 = v187
	v187 = loc43
	v188 = 0x64<32>
	v189 = v187 >u v188
	loc45 = v189
	// succ:  l0011382E
l0011382E:
	v187 = loc45
	branch !v187 l001138B4
	// succ:  l00113834 l001138B4
l00113834:
	v187 = loc43
	v188 = 2<32>
	v187 = v187 << v188
	loc46 = v187
	v187 = loc46
	v187 = _malloc(v187)
	loc47 = v187
	v187 = loc47
	loc48 = v187
	v187 = loc47
	v188 = 0<32>
	v189 = v187 == v188
	loc49 = v189
	v187 = loc49
	branch !v187 l001138A0
	// succ:  l00113851 l001138A0
l00113851:
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = 0x18A<32>
	invoke_v(v187)
	v187 = Mem0[0x00140048<p32>:word32]
	loc50 = v187
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = loc50
	v188 = 1<32>
	v187 = v187 & v188
	loc51 = v187
	v187 = loc51
	branch !v187 l00113884
	// succ:  l0011386D l00113884
l0011386D:
	v187 = ___cxa_find_matching_catch_2()
	loc59 = v187
	v187 = Mem0[0x00140094<p32>:word32]
	loc60 = v187
	v187 = loc59
	loc12 = v187
	v187 = loc60
	loc13 = v187
	v187 = loc48
	loc26 = v187
	goto l001138C7
	// succ:  l001138C7
l00113884:
	v187 = loc95
	v187 = Mem0[v187:word32]
	loc23 = v187
	v187 = 0<32>
	loc10 = v187
	v187 = loc48
	loc25 = v187
	v187 = loc23
	loc67 = v187
	v187 = 0x25<32>
	loc188 = v187
	goto l001138C7
	// succ:  l001138C7
l0011389E:
	goto l001138B2
	// succ:  l001138B2
l001138A0:
	v187 = loc47
	loc10 = v187
	v187 = loc48
	loc25 = v187
	v187 = loc148
	loc67 = v187
	v187 = 0x25<32>
	loc188 = v187
	// succ:  l001138B2
l001138B2:
	goto l001138C6
	// succ:  l001138C6
l001138B4:
	v187 = loc96
	loc10 = v187
	v187 = 0<32>
	loc25 = v187
	v187 = loc148
	loc67 = v187
	v187 = 0x25<32>
	loc188 = v187
	// succ:  l001138C6
l001138C6:
	// succ:  l001138C7
l001138C7:
	v187 = loc188
	v188 = 0x25<32>
	v189 = v187 == v188
	branch !v189 l00113A01
	// succ:  l001138D0 l00113A01
l001138D0:
	v187 = arg3
	v188 = 4<32>
	v187 = v187 + v188
	loc61 = v187
	v187 = loc61
	v187 = Mem0[v187:word32]
	loc62 = v187
	v187 = loc6
	v188 = loc11
	v191 = 2<32>
	v188 = v188 << v191
	v187 = v187 + v188
	loc63 = v187
	v187 = loc44
	v187 = Mem0[v187:word32]
	loc64 = v187
	v187 = loc55
	v187 = Mem0[v187:word32]
	loc65 = v187
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = 0x1B7<32>
	v188 = loc10
	v191 = loc97
	v192 = loc98
	v193 = loc62
	v196 = loc6
	v197 = loc63
	v198 = loc124
	v199 = loc145
	v200 = loc33
	v201 = loc64
	v206 = loc65
	v207 = loc66
	v208 = loc77
	v209 = loc88
	v210 = loc67
	invoke_viiiiiiiiiiiiiii(v187, v188, v191, v192, v193, v196, v197, v198, v199, v200, v201, v206, v207, v208, v209, v210)
	v187 = Mem0[0x00140048<p32>:word32]
	loc68 = v187
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = loc68
	v188 = 1<32>
	v187 = v187 & v188
	loc69 = v187
	v187 = loc69
	v189 = v187 == 0<32>
	branch !v189 l001139EC
	// succ:  l00113932 l001139EC
l00113932:
	v187 = arg1
	v187 = Mem0[v187:word32]
	loc70 = v187
	v187 = loc99
	v188 = loc70
	Mem0[v187:word32] = v188
	v187 = loc97
	v187 = Mem0[v187:word32]
	loc71 = v187
	v187 = loc98
	v187 = Mem0[v187:word32]
	loc72 = v187
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = loc20
	v188 = loc99
	v188 = Mem0[v188:word32]
	Mem0[v187:word32] = v188
	v187 = 0x194<32>
	v188 = loc20
	v191 = loc10
	v192 = loc71
	v193 = loc72
	v196 = arg3
	v197 = arg4
	v187 = invoke_iiiiiii(v187, v188, v191, v192, v193, v196, v197)
	loc73 = v187
	v187 = Mem0[0x00140048<p32>:word32]
	loc74 = v187
	v187 = 0<32>
	Mem0[0x00140048<p32>:word32] = v187
	v187 = loc74
	v188 = 1<32>
	v187 = v187 & v188
	loc75 = v187
	v187 = loc75
	v189 = v187 == 0<32>
	branch !v189 l001139EB
	// succ:  l00113983 l001139EB
l00113983:
	v187 = loc25
	v188 = 0<32>
	v189 = v187 == v188
	loc76 = v189
	v187 = loc76
	v189 = v187 == 0<32>
	branch !v189 l00113999
	// succ:  l0011398F l00113999
l0011398F:
	v187 = loc25
	loc78 = v187
	v187 = loc78
	_free(v187)
	// succ:  l00113999
l00113999:
	v187 = loc88
	fn0011C7BA(v187)
	v187 = loc77
	fn0011C7BA(v187)
	v187 = loc66
	fn0011BAF7(v187)
	v187 = loc172
	v187 = Mem0[v187:word32]
	loc79 = v187
	v187 = loc79
	v187 = fn0011B43F(v187)
	v187 = loc28
	v188 = 0<32>
	v189 = v187 == v188
	loc80 = v189
	v187 = loc80
	v189 = v187 == 0<32>
	branch !v189 l001139CC
	// succ:  l001139C2 l001139CC
l001139C2:
	v187 = loc28
	loc81 = v187
	v187 = loc81
	_free(v187)
	// succ:  l001139CC
l001139CC:
	v187 = loc31
	v188 = 0<32>
	v189 = v187 == v188
	loc82 = v189
	v187 = loc82
	v189 = v187 == 0<32>
	branch !v189 l001139E2
	// succ:  l001139D8 l001139E2
l001139D8:
	v187 = loc31
	loc83 = v187
	v187 = loc83
	_free(v187)
	// succ:  l001139E2
l001139E2:
	v187 = loc189
	Mem0[0x00140030<p32>:word32] = v187
	v187 = loc73
	return v187
	// succ:  fn001131F3_exit
l001139EB:
	// succ:  l001139EC
l001139EC:
	v187 = ___cxa_find_matching_catch_2()
	loc84 = v187
	v187 = Mem0[0x00140094<p32>:word32]
	loc85 = v187
	v187 = loc84
	loc12 = v187
	v187 = loc85
	loc13 = v187
	v187 = loc25
	loc26 = v187
	// succ:  l00113A01
l00113A01:
	v187 = loc26
	v188 = 0<32>
	v189 = v187 == v188
	loc86 = v189
	v187 = loc86
	v189 = v187 == 0<32>
	branch !v189 l00113A17
	// succ:  l00113A0D l00113A17
l00113A0D:
	v187 = loc26
	loc87 = v187
	v187 = loc87
	_free(v187)
	// succ:  l00113A17
l00113A17:
	v187 = loc12
	loc14 = v187
	v187 = loc13
	loc15 = v187
	// succ:  l00113A1F
l00113A1F:
	v187 = loc88
	fn0011C7BA(v187)
	v187 = loc77
	fn0011C7BA(v187)
	v187 = loc66
	fn0011BAF7(v187)
	v187 = loc172
	v187 = Mem0[v187:word32]
	loc24 = v187
	v187 = loc14
	loc16 = v187
	v187 = loc15
	loc17 = v187
	v187 = loc24
	loc89 = v187
	// succ:  l00113A43
l00113A43:
	// succ:  l00113A44
l00113A44:
	v187 = loc89
	v187 = fn0011B43F(v187)
	v187 = loc16
	loc18 = v187
	v187 = loc17
	loc19 = v187
	v187 = loc28
	loc29 = v187
	v187 = loc31
	loc32 = v187
	// succ:  l00113A5B
l00113A5B:
	// succ:  l00113A5D
l00113A5D:
	v187 = loc188
	v188 = 8<32>
	v189 = v187 == v188
	branch !v189 l00113A7E
	// succ:  l00113A65 l00113A7E
l00113A65:
	v187 = ___cxa_find_matching_catch_2()
	loc113 = v187
	v187 = Mem0[0x00140094<p32>:word32]
	loc114 = v187
	v187 = loc113
	loc18 = v187
	v187 = loc114
	loc19 = v187
	v187 = loc27
	loc29 = v187
	v187 = loc30
	loc32 = v187
	// succ:  l00113A7E
l00113A7E:
	v187 = loc29
	v188 = 0<32>
	v189 = v187 == v188
	loc90 = v189
	v187 = loc90
	v189 = v187 == 0<32>
	branch !v189 l00113A94
	// succ:  l00113A8A l00113A94
l00113A8A:
	v187 = loc29
	loc91 = v187
	v187 = loc91
	_free(v187)
	// succ:  l00113A94
l00113A94:
	v187 = loc32
	v188 = 0<32>
	v189 = v187 == v188
	loc92 = v189
	v187 = loc92
	v189 = v187 == 0<32>
	branch !v189 l00113AAA
	// succ:  l00113AA0 l00113AAA
l00113AA0:
	v187 = loc32
	loc93 = v187
	v187 = loc93
	_free(v187)
	// succ:  l00113AAA
l00113AAA:
	v187 = loc18
	___resumeException(v187)
	v187 = 0<32>
	return v187
	// succ:  fn001131F3_exit
l00113AB1:
	return v187
	// succ:  fn001131F3_exit
fn001131F3_exit:


// fn00113AB3
// Return size: 0
word32 fn00113AB3(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn00113AB3_entry:
	// succ:  l00113AB3
l00113AB3:
	v160 = Mem0[0x00140030<p32>:word32]
	loc162 = v160
	v160 = Mem0[0x00140030<p32>:word32]
	v161 = 0x1E0<32>
	v160 = v160 + v161
	Mem0[0x00140030<p32>:word32] = v160
	v160 = Mem0[0x00140030<p32>:word32]
	v161 = Mem0[0x00140034<p32>:word32]
	v162 = v160 >= v161
	branch !v162 l00113ACF
	// succ:  l00113AC9 l00113ACF
l00113AC9:
	v160 = 0x1E0<32>
	abortStackOverflow(v160)
	// succ:  l00113ACF
l00113ACF:
	v160 = loc162
	v161 = 0x1D4<32>
	v160 = v160 + v161
	loc16 = v160
	v160 = loc162
	v161 = 0x1D0<32>
	v160 = v160 + v161
	loc114 = v160
	v160 = loc162
	v161 = 0x1D8<32>
	v160 = v160 + v161
	loc125 = v160
	v160 = loc162
	v161 = 0x1CC<32>
	v160 = v160 + v161
	loc136 = v160
	v160 = loc162
	v161 = 0x1C8<32>
	v160 = v160 + v161
	loc147 = v160
	v160 = loc162
	v161 = 0x1BC<32>
	v160 = v160 + v161
	loc23 = v160
	v160 = loc162
	v161 = 0x1B0<32>
	v160 = v160 + v161
	loc34 = v160
	v160 = loc162
	v161 = 0x1A4<32>
	v160 = v160 + v161
	loc45 = v160
	v160 = loc162
	v161 = 0x1A0<32>
	v160 = v160 + v161
	loc56 = v160
	v160 = loc162
	v161 = 0x10<32>
	v160 = v160 + v161
	loc67 = v160
	v160 = loc162
	v161 = 8<32>
	v160 = v160 + v161
	loc69 = v160
	v160 = loc162
	v161 = 4<32>
	v160 = v160 + v161
	loc70 = v160
	v160 = loc162
	loc71 = v160
	v160 = arg3
	v160 = fn000E64CA(v160)
	loc72 = v160
	v160 = loc114
	v161 = loc72
	Mem0[v160:word32] = v161
	v160 = 0<32>
	Mem0[0x00140048<p32>:word32] = v160
	v160 = 0x164<32>
	v161 = loc114
	v163 = 0x4C90<32>
	v160 = invoke_iii(v160, v161, v163)
	loc73 = v160
	v160 = Mem0[0x00140048<p32>:word32]
	loc74 = v160
	v160 = 0<32>
	Mem0[0x00140048<p32>:word32] = v160
	v160 = loc74
	v161 = 1<32>
	v160 = v160 & v161
	loc75 = v160
	// succ:  l00113B6D
l00113B6D:
	v160 = loc75
	branch !v160 l00113B84
	// succ:  l00113B73 l00113B84
l00113B73:
	v160 = ___cxa_find_matching_catch_2()
	loc28 = v160
	v160 = Mem0[0x00140094<p32>:word32]
	loc29 = v160
	v160 = loc28
	loc14 = v160
	v160 = loc29
	loc15 = v160
	goto l00114178
	// succ:  l00114178
l00113B84:
	v160 = arg5
	v161 = 8<32>
	v160 = v160 + v161
	loc76 = v160
	v160 = loc76
	v161 = 3<32>
	v160 = v160 + v161
	loc77 = v160
	v160 = loc77
	v164 = Mem0[v160:int8]
	v160 = CONVERT(v164, int8, word32)
	loc78 = v160
	v160 = loc78
	v161 = 0x18<32>
	v160 = v160 << v161
	v161 = 0x18<32>
	v160 = v160 >> v161
	v161 = 0<32>
	v162 = v160 < v161
	loc79 = v162
	v160 = arg5
	v161 = 4<32>
	v160 = v160 + v161
	loc80 = v160
	v160 = loc80
	v160 = Mem0[v160:word32]
	loc81 = v160
	v160 = loc78
	v161 = 0xFF<32>
	v160 = v160 & v161
	loc82 = v160
	v160 = loc79
	branch !v160 l00113BC3
	// succ:  l00113BC0 l00113BC3
l00113BC0:
	v160 = loc81
	goto l00113BC5
	// succ:  l00113BC5
l00113BC3:
	v160 = loc82
	// succ:  l00113BC5
l00113BC5:
	loc83 = v160
	v160 = loc83
	v161 = 0<32>
	v162 = v160 == v161
	loc84 = v162
	// succ:  l00113BCF
l00113BCF:
	v160 = loc84
	branch !v160 l00113BDA
	// succ:  l00113BD5 l00113BDA
l00113BD5:
	v160 = 0<32>
	loc101 = v160
	goto l00113C4B
	// succ:  l00113C4B
l00113BDA:
	v160 = arg5
	v160 = Mem0[v160:word32]
	loc85 = v160
	v160 = loc79
	branch !v160 l00113BE8
	// succ:  l00113BE5 l00113BE8
l00113BE5:
	v160 = loc85
	goto l00113BEA
	// succ:  l00113BEA
l00113BE8:
	v160 = arg5
	// succ:  l00113BEA
l00113BEA:
	loc86 = v160
	v160 = loc86
	v160 = Mem0[v160:word32]
	loc87 = v160
	v160 = loc73
	v160 = Mem0[v160:word32]
	loc88 = v160
	v160 = loc88
	v161 = 0x2C<32>
	v160 = v160 + v161
	loc89 = v160
	v160 = loc89
	v160 = Mem0[v160:word32]
	loc90 = v160
	v160 = 0<32>
	Mem0[0x00140048<p32>:word32] = v160
	v160 = loc90
	v161 = loc73
	v163 = 0x2D<32>
	v160 = invoke_iii(v160, v161, v163)
	loc91 = v160
	v160 = Mem0[0x00140048<p32>:word32]
	loc92 = v160
	v160 = 0<32>
	Mem0[0x00140048<p32>:word32] = v160
	v160 = loc92
	v161 = 1<32>
	v160 = v160 & v161
	loc93 = v160
	v160 = loc93
	branch !v160 l00113C3D
	// succ:  l00113C2A l00113C3D
l00113C2A:
	v160 = ___cxa_find_matching_catch_2()
	loc30 = v160
	v160 = Mem0[0x00140094<p32>:word32]
	loc31 = v160
	v160 = loc30
	loc14 = v160
	v160 = loc31
	loc15 = v160
	goto l00114179
	// succ:  l00114179
l00113C3D:
	v160 = loc87
	v161 = loc91
	v162 = v160 == v161
	loc94 = v162
	v160 = loc94
	loc101 = v160
	goto l00113C4C
	// succ:  l00113C4C
l00113C4A:
	// succ:  l00113C4B
l00113C4B:
	// succ:  l00113C4C
l00113C4C:
	v160 = loc23
	v165 = 0<64>
	Mem0[v160:word64] = v165
	v160 = loc23
	v161 = 8<32>
	v160 = v160 + v161
	v161 = 0<32>
	Mem0[v160:word32] = v161
	v160 = 0<32>
	loc7 = v160
	// succ:  l00113C64
l00113C64:
	v160 = loc7
	v161 = 3<32>
	v162 = v160 == v161
	loc158 = v162
	v160 = loc158
	branch !v160 l00113C76
	// succ:  l00113C73 l00113C76
l00113C73:
	goto l00113C94
	// succ:  l00113C94
l00113C76:
	v160 = loc23
	v161 = loc7
	v163 = 2<32>
	v161 = v161 << v163
	v160 = v160 + v161
	loc95 = v160
	v160 = loc95
	v161 = 0<32>
	Mem0[v160:word32] = v161
	v160 = loc7
	v161 = 1<32>
	v160 = v160 + v161
	loc96 = v160
	v160 = loc96
	loc7 = v160
	goto l00113C4C
	// succ:  l00113C4C
l00113C94:
	v160 = loc34
	v165 = 0<64>
	Mem0[v160:word64] = v165
	v160 = loc34
	v161 = 8<32>
	v160 = v160 + v161
	v161 = 0<32>
	Mem0[v160:word32] = v161
	v160 = 0<32>
	loc8 = v160
	// succ:  l00113CAD
l00113CAD:
	v160 = loc8
	v161 = 3<32>
	v162 = v160 == v161
	loc159 = v162
	v160 = loc159
	branch !v160 l00113CBF
	// succ:  l00113CBC l00113CBF
l00113CBC:
	goto l00113CDD
	// succ:  l00113CDD
l00113CBF:
	v160 = loc34
	v161 = loc8
	v163 = 2<32>
	v161 = v161 << v163
	v160 = v160 + v161
	loc97 = v160
	v160 = loc97
	v161 = 0<32>
	Mem0[v160:word32] = v161
	v160 = loc8
	v161 = 1<32>
	v160 = v160 + v161
	loc98 = v160
	v160 = loc98
	loc8 = v160
	goto l00113C94
	// succ:  l00113C94
l00113CDD:
	v160 = loc45
	v165 = 0<64>
	Mem0[v160:word64] = v165
	v160 = loc45
	v161 = 8<32>
	v160 = v160 + v161
	v161 = 0<32>
	Mem0[v160:word32] = v161
	v160 = 0<32>
	loc9 = v160
	// succ:  l00113CF6
l00113CF6:
	v160 = loc9
	v161 = 3<32>
	v162 = v160 == v161
	loc160 = v162
	v160 = loc160
	branch !v160 l00113D08
	// succ:  l00113D05 l00113D08
l00113D05:
	goto l00113D26
	// succ:  l00113D26
l00113D08:
	v160 = loc45
	v161 = loc9
	v163 = 2<32>
	v161 = v161 << v163
	v160 = v160 + v161
	loc99 = v160
	v160 = loc99
	v161 = 0<32>
	Mem0[v160:word32] = v161
	v160 = loc9
	v161 = 1<32>
	v160 = v160 + v161
	loc100 = v160
	v160 = loc100
	loc9 = v160
	goto l00113CDD
	// succ:  l00113CDD
l00113D26:
	v160 = 0<32>
	Mem0[0x00140048<p32>:word32] = v160
	v160 = 0x1B6<32>
	v161 = arg2
	v163 = loc101
	v166 = loc114
	v167 = loc125
	v168 = loc136
	v169 = loc147
	v170 = loc23
	v171 = loc34
	v172 = loc45
	v173 = loc56
	invoke_viiiiiiiiii(v160, v161, v163, v166, v167, v168, v169, v170, v171, v172, v173)
	v160 = Mem0[0x00140048<p32>:word32]
	loc102 = v160
	v160 = 0<32>
	Mem0[0x00140048<p32>:word32] = v160
	v160 = loc102
	v161 = 1<32>
	v160 = v160 & v161
	loc103 = v160
	v160 = loc103
	branch !v160 l00113D6B
	// succ:  l00113D5A l00113D6B
l00113D5A:
	v160 = ___cxa_find_matching_catch_2()
	loc32 = v160
	v160 = Mem0[0x00140094<p32>:word32]
	loc33 = v160
	v160 = loc32
	loc12 = v160
	v160 = loc33
	loc13 = v160
	goto l00114160
	// succ:  l00114160
l00113D6B:
	v160 = loc77
	v174 = Mem0[v160:int8]
	v160 = CONVERT(v174, int8, word32)
	loc104 = v160
	v160 = loc104
	v161 = 0x18<32>
	v160 = v160 << v161
	v161 = 0x18<32>
	v160 = v160 >> v161
	v161 = 0<32>
	v162 = v160 < v161
	loc105 = v162
	v160 = loc80
	v160 = Mem0[v160:word32]
	loc106 = v160
	v160 = loc104
	v161 = 0xFF<32>
	v160 = v160 & v161
	loc107 = v160
	v160 = loc105
	branch !v160 l00113D95
	// succ:  l00113D92 l00113D95
l00113D92:
	v160 = loc106
	goto l00113D97
	// succ:  l00113D97
l00113D95:
	v160 = loc107
	// succ:  l00113D97
l00113D97:
	loc108 = v160
	v160 = loc56
	v160 = Mem0[v160:word32]
	loc109 = v160
	v160 = loc108
	v161 = loc109
	v162 = v160 > v161
	loc110 = v162
	v160 = loc110
	branch !v160 l00113E68
	// succ:  l00113DAC l00113E68
l00113DAC:
	v160 = loc108
	v161 = loc109
	v160 = v160 - v161
	loc111 = v160
	v160 = loc111
	v161 = 1<32>
	v160 = v160 << v161
	loc112 = v160
	v160 = loc45
	v161 = 8<32>
	v160 = v160 + v161
	loc113 = v160
	v160 = loc113
	v161 = 3<32>
	v160 = v160 + v161
	loc115 = v160
	v160 = loc115
	v175 = Mem0[v160:int8]
	v160 = CONVERT(v175, int8, word32)
	loc116 = v160
	v160 = loc116
	v161 = 0x18<32>
	v160 = v160 << v161
	v161 = 0x18<32>
	v160 = v160 >> v161
	v161 = 0<32>
	v162 = v160 < v161
	loc117 = v162
	v160 = loc45
	v161 = 4<32>
	v160 = v160 + v161
	loc118 = v160
	v160 = loc118
	v160 = Mem0[v160:word32]
	loc119 = v160
	v160 = loc116
	v161 = 0xFF<32>
	v160 = v160 & v161
	loc120 = v160
	v160 = loc117
	branch !v160 l00113DF9
	// succ:  l00113DF6 l00113DF9
l00113DF6:
	v160 = loc119
	goto l00113DFB
	// succ:  l00113DFB
l00113DF9:
	v160 = loc120
	// succ:  l00113DFB
l00113DFB:
	loc121 = v160
	v160 = loc34
	v161 = 8<32>
	v160 = v160 + v161
	loc122 = v160
	v160 = loc122
	v161 = 3<32>
	v160 = v160 + v161
	loc123 = v160
	v160 = loc123
	v176 = Mem0[v160:int8]
	v160 = CONVERT(v176, int8, word32)
	loc124 = v160
	v160 = loc124
	v161 = 0x18<32>
	v160 = v160 << v161
	v161 = 0x18<32>
	v160 = v160 >> v161
	v161 = 0<32>
	v162 = v160 < v161
	loc126 = v162
	v160 = loc34
	v161 = 4<32>
	v160 = v160 + v161
	loc127 = v160
	v160 = loc127
	v160 = Mem0[v160:word32]
	loc128 = v160
	v160 = loc124
	v161 = 0xFF<32>
	v160 = v160 & v161
	loc129 = v160
	v160 = loc126
	branch !v160 l00113E40
	// succ:  l00113E3C l00113E40
l00113E3C:
	v160 = loc128
	goto l00113E43
	// succ:  l00113E43
l00113E40:
	v160 = loc129
	// succ:  l00113E43
l00113E43:
	loc130 = v160
	v160 = loc112
	v161 = 1<32>
	v160 = v160 | v161
	loc131 = v160
	v160 = loc121
	v161 = loc131
	v160 = v160 + v161
	loc132 = v160
	v160 = loc132
	v161 = loc130
	v160 = v160 + v161
	loc133 = v160
	v160 = loc133
	loc17 = v160
	goto l00113F28
	// succ:  l00113F28
l00113E68:
	v160 = loc45
	v161 = 8<32>
	v160 = v160 + v161
	loc134 = v160
	v160 = loc134
	v161 = 3<32>
	v160 = v160 + v161
	loc135 = v160
	v160 = loc135
	v177 = Mem0[v160:int8]
	v160 = CONVERT(v177, int8, word32)
	loc137 = v160
	v160 = loc137
	v161 = 0x18<32>
	v160 = v160 << v161
	v161 = 0x18<32>
	v160 = v160 >> v161
	v161 = 0<32>
	v162 = v160 < v161
	loc138 = v162
	v160 = loc45
	v161 = 4<32>
	v160 = v160 + v161
	loc139 = v160
	v160 = loc139
	v160 = Mem0[v160:word32]
	loc140 = v160
	v160 = loc137
	v161 = 0xFF<32>
	v160 = v160 & v161
	loc141 = v160
	v160 = loc138
	branch !v160 l00113EB5
	// succ:  l00113EB1 l00113EB5
l00113EB1:
	v160 = loc140
	goto l00113EB8
	// succ:  l00113EB8
l00113EB5:
	v160 = loc141
	// succ:  l00113EB8
l00113EB8:
	loc142 = v160
	v160 = loc34
	v161 = 8<32>
	v160 = v160 + v161
	loc143 = v160
	v160 = loc143
	v161 = 3<32>
	v160 = v160 + v161
	loc144 = v160
	v160 = loc144
	v178 = Mem0[v160:int8]
	v160 = CONVERT(v178, int8, word32)
	loc145 = v160
	v160 = loc145
	v161 = 0x18<32>
	v160 = v160 << v161
	v161 = 0x18<32>
	v160 = v160 >> v161
	v161 = 0<32>
	v162 = v160 < v161
	loc146 = v162
	v160 = loc34
	v161 = 4<32>
	v160 = v160 + v161
	loc148 = v160
	v160 = loc148
	v160 = Mem0[v160:word32]
	loc149 = v160
	v160 = loc145
	v161 = 0xFF<32>
	v160 = v160 & v161
	loc150 = v160
	v160 = loc146
	branch !v160 l00113F09
	// succ:  l00113F05 l00113F09
l00113F05:
	v160 = loc149
	goto l00113F0C
	// succ:  l00113F0C
l00113F09:
	v160 = loc150
	// succ:  l00113F0C
l00113F0C:
	loc151 = v160
	v160 = loc142
	v161 = 2<32>
	v160 = v160 + v161
	loc152 = v160
	v160 = loc152
	v161 = loc151
	v160 = v160 + v161
	loc153 = v160
	v160 = loc153
	loc17 = v160
	// succ:  l00113F28
l00113F28:
	v160 = loc17
	v161 = loc109
	v160 = v160 + v161
	loc154 = v160
	v160 = loc154
	v161 = 0x64<32>
	v162 = v160 >u v161
	loc155 = v162
	// succ:  l00113F3B
l00113F3B:
	v160 = loc155
	branch !v160 l00113FE6
	// succ:  l00113F42 l00113FE6
l00113F42:
	v160 = loc154
	v161 = 2<32>
	v160 = v160 << v161
	loc156 = v160
	v160 = loc156
	v160 = _malloc(v160)
	loc157 = v160
	v160 = loc157
	loc24 = v160
	v160 = loc157
	v161 = 0<32>
	v162 = v160 == v161
	loc25 = v162
	v160 = loc25
	branch !v160 l00113FCA
	// succ:  l00113F65 l00113FCA
l00113F65:
	v160 = 0<32>
	Mem0[0x00140048<p32>:word32] = v160
	v160 = 0x18A<32>
	invoke_v(v160)
	v160 = Mem0[0x00140048<p32>:word32]
	loc26 = v160
	v160 = 0<32>
	Mem0[0x00140048<p32>:word32] = v160
	v160 = loc26
	v161 = 1<32>
	v160 = v160 & v161
	loc27 = v160
	v160 = loc27
	branch !v160 l00113F98
	// succ:  l00113F81 l00113F98
l00113F81:
	v160 = ___cxa_find_matching_catch_2()
	loc35 = v160
	v160 = Mem0[0x00140094<p32>:word32]
	loc36 = v160
	v160 = loc35
	loc6 = v160
	v160 = loc36
	loc11 = v160
	v160 = loc24
	loc22 = v160
	goto l00114000
	// succ:  l00114000
l00113F98:
	v160 = loc77
	v179 = Mem0[v160:int8]
	v160 = CONVERT(v179, int8, word32)
	loc18 = v160
	v160 = loc80
	v160 = Mem0[v160:word32]
	loc19 = v160
	v160 = loc56
	v160 = Mem0[v160:word32]
	loc20 = v160
	v160 = 0<32>
	loc10 = v160
	v160 = loc24
	loc21 = v160
	v160 = loc18
	loc40 = v160
	v160 = loc19
	loc46 = v160
	v160 = loc20
	loc50 = v160
	v160 = 0x1A<32>
	loc161 = v160
	goto l00114000
	// succ:  l00114000
l00113FC8:
	goto l00113FE4
	// succ:  l00113FE4
l00113FCA:
	v160 = loc157
	loc10 = v160
	v160 = loc24
	loc21 = v160
	v160 = loc104
	loc40 = v160
	v160 = loc106
	loc46 = v160
	v160 = loc109
	loc50 = v160
	v160 = 0x1A<32>
	loc161 = v160
	// succ:  l00113FE4
l00113FE4:
	goto l00113FFF
	// succ:  l00113FFF
l00113FE6:
	v160 = loc67
	loc10 = v160
	v160 = 0<32>
	loc21 = v160
	v160 = loc104
	loc40 = v160
	v160 = loc106
	loc46 = v160
	v160 = loc109
	loc50 = v160
	v160 = 0x1A<32>
	loc161 = v160
	// succ:  l00113FFF
l00113FFF:
	// succ:  l00114000
l00114000:
	v160 = loc161
	v161 = 0x1A<32>
	v162 = v160 == v161
	branch !v162 l00114142
	// succ:  l00114009 l00114142
l00114009:
	v160 = arg3
	v161 = 4<32>
	v160 = v160 + v161
	loc37 = v160
	v160 = loc37
	v160 = Mem0[v160:word32]
	loc38 = v160
	v160 = loc40
	v161 = 0x18<32>
	v160 = v160 << v161
	v161 = 0x18<32>
	v160 = v160 >> v161
	v161 = 0<32>
	v162 = v160 < v161
	loc39 = v162
	v160 = arg5
	v160 = Mem0[v160:word32]
	loc41 = v160
	v160 = loc39
	branch !v160 l00114032
	// succ:  l0011402F l00114032
l0011402F:
	v160 = loc41
	goto l00114034
	// succ:  l00114034
l00114032:
	v160 = arg5
	// succ:  l00114034
l00114034:
	loc42 = v160
	v160 = loc40
	v161 = 0xFF<32>
	v160 = v160 & v161
	loc43 = v160
	v160 = loc39
	branch !v160 l00114046
	// succ:  l00114043 l00114046
l00114043:
	v160 = loc46
	goto l00114048
	// succ:  l00114048
l00114046:
	v160 = loc43
	// succ:  l00114048
l00114048:
	loc44 = v160
	v160 = loc42
	v161 = loc44
	v163 = 2<32>
	v161 = v161 << v163
	v160 = v160 + v161
	loc47 = v160
	v160 = loc136
	v160 = Mem0[v160:word32]
	loc48 = v160
	v160 = loc147
	v160 = Mem0[v160:word32]
	loc49 = v160
	v160 = 0<32>
	Mem0[0x00140048<p32>:word32] = v160
	v160 = 0x1B7<32>
	v161 = loc10
	v163 = loc69
	v166 = loc70
	v167 = loc38
	v168 = loc42
	v169 = loc47
	v170 = loc73
	v171 = loc101
	v172 = loc125
	v173 = loc48
	v180 = loc49
	v181 = loc23
	v182 = loc34
	v183 = loc45
	v184 = loc50
	invoke_viiiiiiiiiiiiiii(v160, v161, v163, v166, v167, v168, v169, v170, v171, v172, v173, v180, v181, v182, v183, v184)
	v160 = Mem0[0x00140048<p32>:word32]
	loc51 = v160
	v160 = 0<32>
	Mem0[0x00140048<p32>:word32] = v160
	v160 = loc51
	v161 = 1<32>
	v160 = v160 & v161
	loc52 = v160
	v160 = loc52
	v162 = v160 == 0<32>
	branch !v162 l0011412D
	// succ:  l001140A0 l0011412D
l001140A0:
	v160 = arg1
	v160 = Mem0[v160:word32]
	loc53 = v160
	v160 = loc71
	v161 = loc53
	Mem0[v160:word32] = v161
	v160 = loc69
	v160 = Mem0[v160:word32]
	loc54 = v160
	v160 = loc70
	v160 = Mem0[v160:word32]
	loc55 = v160
	v160 = 0<32>
	Mem0[0x00140048<p32>:word32] = v160
	v160 = loc16
	v161 = loc71
	v161 = Mem0[v161:word32]
	Mem0[v160:word32] = v161
	v160 = 0x194<32>
	v161 = loc16
	v163 = loc10
	v166 = loc54
	v167 = loc55
	v168 = arg3
	v169 = arg4
	v160 = invoke_iiiiiii(v160, v161, v163, v166, v167, v168, v169)
	loc57 = v160
	v160 = Mem0[0x00140048<p32>:word32]
	loc58 = v160
	v160 = 0<32>
	Mem0[0x00140048<p32>:word32] = v160
	v160 = loc58
	v161 = 1<32>
	v160 = v160 & v161
	loc59 = v160
	v160 = loc59
	v162 = v160 == 0<32>
	branch !v162 l0011412C
	// succ:  l001140F1 l0011412C
l001140F1:
	v160 = loc21
	v161 = 0<32>
	v162 = v160 == v161
	loc60 = v162
	v160 = loc60
	v162 = v160 == 0<32>
	branch !v162 l00114107
	// succ:  l001140FD l00114107
l001140FD:
	v160 = loc21
	loc61 = v160
	v160 = loc61
	_free(v160)
	// succ:  l00114107
l00114107:
	v160 = loc45
	fn0011C7BA(v160)
	v160 = loc34
	fn0011C7BA(v160)
	v160 = loc23
	fn0011BAF7(v160)
	v160 = loc114
	v160 = Mem0[v160:word32]
	loc62 = v160
	v160 = loc62
	v160 = fn0011B43F(v160)
	v160 = loc162
	Mem0[0x00140030<p32>:word32] = v160
	v160 = loc57
	return v160
	// succ:  fn00113AB3_exit
l0011412C:
	// succ:  l0011412D
l0011412D:
	v160 = ___cxa_find_matching_catch_2()
	loc63 = v160
	v160 = Mem0[0x00140094<p32>:word32]
	loc64 = v160
	v160 = loc63
	loc6 = v160
	v160 = loc64
	loc11 = v160
	v160 = loc21
	loc22 = v160
	// succ:  l00114142
l00114142:
	v160 = loc22
	v161 = 0<32>
	v162 = v160 == v161
	loc65 = v162
	v160 = loc65
	v162 = v160 == 0<32>
	branch !v162 l00114158
	// succ:  l0011414E l00114158
l0011414E:
	v160 = loc22
	loc66 = v160
	v160 = loc66
	_free(v160)
	// succ:  l00114158
l00114158:
	v160 = loc6
	loc12 = v160
	v160 = loc11
	loc13 = v160
	// succ:  l00114160
l00114160:
	v160 = loc45
	fn0011C7BA(v160)
	v160 = loc34
	fn0011C7BA(v160)
	v160 = loc23
	fn0011BAF7(v160)
	v160 = loc12
	loc14 = v160
	v160 = loc13
	loc15 = v160
	// succ:  l00114178
l00114178:
	// succ:  l00114179
l00114179:
	v160 = loc114
	v160 = Mem0[v160:word32]
	loc68 = v160
	v160 = loc68
	v160 = fn0011B43F(v160)
	v160 = loc14
	___resumeException(v160)
	v160 = 0<32>
	return v160
	// succ:  fn00113AB3_exit
l0011418E:
	return v160
	// succ:  fn00113AB3_exit
fn00113AB3_exit:


// fn00114190
// Return size: 0
void fn00114190(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7, word32 arg8, word32 arg9)
fn00114190_entry:
	// succ:  l00114190
l00114190:
	v194 = Mem0[0x00140030<p32>:word32]
	loc200 = v194
	v194 = Mem0[0x00140030<p32>:word32]
	v195 = 0x70<32>
	v194 = v194 + v195
	Mem0[0x00140030<p32>:word32] = v194
	v194 = Mem0[0x00140030<p32>:word32]
	v195 = Mem0[0x00140034<p32>:word32]
	v196 = v194 >= v195
	branch !v196 l001141AC
	// succ:  l001141A6 l001141AC
l001141A6:
	v194 = 0x70<32>
	abortStackOverflow(v194)
	// succ:  l001141AC
l001141AC:
	v194 = loc200
	v195 = 0x6C<32>
	v194 = v194 + v195
	loc18 = v194
	v194 = loc200
	v195 = 0x60<32>
	v194 = v194 + v195
	loc29 = v194
	v194 = loc200
	v195 = 0x5C<32>
	v194 = v194 + v195
	loc40 = v194
	v194 = loc200
	v195 = 0x50<32>
	v194 = v194 + v195
	loc51 = v194
	v194 = loc200
	v195 = 0x44<32>
	v194 = v194 + v195
	loc62 = v194
	v194 = loc200
	v195 = 0x38<32>
	v194 = v194 + v195
	loc73 = v194
	v194 = loc200
	v195 = 0x34<32>
	v194 = v194 + v195
	loc84 = v194
	v194 = loc200
	v195 = 0x28<32>
	v194 = v194 + v195
	loc95 = v194
	v194 = loc200
	v195 = 0x24<32>
	v194 = v194 + v195
	loc106 = v194
	v194 = loc200
	v195 = 0x18<32>
	v194 = v194 + v195
	loc109 = v194
	v194 = loc200
	v195 = 0xC<32>
	v194 = v194 + v195
	loc110 = v194
	v194 = loc200
	loc111 = v194
	v194 = arg0
	v194 = v194
	// succ:  l00114212
l00114212:
	v194 = arg2
	v195 = 0x5338<32>
	v194 = fn000EA9F7(v194, v195)
	loc112 = v194
	v194 = arg1
	v194 = v194
	// succ:  l00114221
l00114221:
	v194 = loc112
	v194 = Mem0[v194:word32]
	loc113 = v194
	v194 = loc113
	v195 = 0x2C<32>
	v194 = v194 + v195
	loc114 = v194
	v194 = loc114
	v194 = Mem0[v194:word32]
	loc115 = v194
	v194 = loc18
	v195 = loc112
	v197 = loc115
	v198 = 0x1FF<32>
	v197 = v197 & v198
	v198 = 0x700<32>
	v197 = v197 + v198
fn00114190_exit:


// fn00114C7D
// Return size: 0
void fn00114C7D(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7, word32 arg8, word32 arg9, word32 arg10, word32 arg11, word32 arg12, word32 arg13, word32 arg14)
fn00114C7D_entry:
	// succ:  l00114C7D
l00114C7D:
	v171 = Mem0[0x00140030<p32>:word32]
	loc182 = v171
	v171 = arg2
	v172 = arg0
	Mem0[v171:word32] = v172
	v171 = arg13
	v172 = 8<32>
	v171 = v171 + v172
	loc88 = v171
	v171 = loc88
	v172 = 3<32>
	v171 = v171 + v172
	loc92 = v171
	v171 = arg13
	v172 = 4<32>
	v171 = v171 + v172
	loc93 = v171
	v171 = arg12
	v172 = 8<32>
	v171 = v171 + v172
	loc94 = v171
	v171 = loc94
	v172 = 3<32>
	v171 = v171 + v172
	loc95 = v171
	v171 = arg12
	v172 = 4<32>
	v171 = v171 + v172
	loc96 = v171
	v171 = arg3
	v172 = 0x200<32>
	v171 = v171 & v172
	loc97 = v171
	v171 = loc97
	v172 = 0<32>
	v173 = v171 == v172
	loc98 = v173
	v171 = arg14
	v172 = 0<32>
	v173 = v171 > v172
	loc99 = v173
	v171 = arg11
	v172 = 0xB<32>
	v171 = v171 + v172
	loc100 = v171
	v171 = arg11
	v172 = 4<32>
	v171 = v171 + v172
	loc101 = v171
	v171 = 0<32>
	loc23 = v171
	v171 = arg4
	loc27 = v171
	// succ:  l00114CE3
l00114CE3:
	v171 = loc23
	v172 = 4<32>
	v173 = v171 == v172
	loc176 = v173
	v171 = loc176
	branch !v171 l00114CF5
	// succ:  l00114CF2 l00114CF5
l00114CF2:
l00114CF5:
	v171 = arg8
	v172 = loc23
	v171 = v171 + v172
	loc108 = v171
	v171 = loc108
	v174 = Mem0[v171:int8]
	v171 = CONVERT(v174, int8, word32)
	loc109 = v171
	v171 = loc109
	v172 = 0x18<32>
	v171 = v171 << v172
	v172 = 0x18<32>
	v171 = v171 >> v172
	loc110 = v171
	// succ:  l00114D0D
l00114D0D:
	v171 = loc110
	v172 = 0<32>
	v171 = v171 - v172
	switch (v171) { l00114D2A l00114D42 <null> <null> <null> }
	// succ:  l00114D2A l00114D42
l00114D2A:
	v171 = arg2
	v171 = Mem0[v171:word32]
	loc111 = v171
	v171 = arg1
	v172 = loc111
	Mem0[v171:word32] = v172
	v171 = loc27
	loc33 = v171
l00114D41:
	// succ:  l00114D42
l00114D42:
	v171 = arg2
	v171 = Mem0[v171:word32]
	loc112 = v171
	v171 = arg1
	v172 = loc112
	Mem0[v171:word32] = v172
	v171 = arg6
	v171 = Mem0[v171:word32]
	loc113 = v171
	v171 = loc113
	v172 = 0x2C<32>
	v171 = v171 + v172
	loc114 = v171
	v171 = loc114
	v171 = Mem0[v171:word32]
	loc115 = v171
	v171 = arg6
	v172 = 0x20<32>
	v175 = loc115
	v176 = 0x1FF<32>
	v175 = v175 & v176
	v176 = 0x1B20<32>
	v175 = v175 + v176
fn00114C7D_exit:


// fn00115464
// Return size: 0
void fn00115464(word32 arg0)
fn00115464_entry:
	// succ:  l00115464
l00115464:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	return
	// succ:  fn00115464_exit
l0011546B:
	return
	// succ:  fn00115464_exit
fn00115464_exit:


// fn0011546D
// Return size: 0
void fn0011546D(word32 arg0)
fn0011546D_entry:
	// succ:  l0011546D
l0011546D:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn0011546D_exit
l00115479:
	return
	// succ:  fn0011546D_exit
fn0011546D_exit:


// fn0011547B
// Return size: 0
word32 fn0011547B(word32 arg0, word32 arg1, word32 arg2)
fn0011547B_entry:
	// succ:  l0011547B
l0011547B:
	v15 = Mem0[0x00140030<p32>:word32]
	loc14 = v15
	v15 = arg1
	v16 = 0xB<32>
	v15 = v15 + v16
	loc5 = v15
	v15 = loc5
	v17 = Mem0[v15:int8]
	v15 = CONVERT(v17, int8, word32)
	loc6 = v15
	v15 = loc6
	v16 = 0x18<32>
	v15 = v15 << v16
	v16 = 0x18<32>
	v15 = v15 >> v16
	v16 = 0<32>
	v18 = v15 < v16
	loc7 = v18
	v15 = arg1
	v15 = Mem0[v15:word32]
	loc8 = v15
	v15 = loc7
	branch !v15 l001154AA
	// succ:  l001154A7 l001154AA
l001154A7:
	v15 = loc8
	goto l001154AC
	// succ:  l001154AC
l001154AA:
	v15 = arg1
	// succ:  l001154AC
l001154AC:
	loc9 = v15
	v15 = loc9
	v16 = 1<32>
	v15 = fn000DAF17(v15, v16)
	loc10 = v15
	v15 = loc10
	loc11 = v15
	v15 = loc10
	v16 = 0xFFFFFFFF<32>
	v18 = v15 != v16
	loc12 = v18
	v15 = loc12
	v16 = 1<32>
	v15 = v15 & v16
	loc4 = v15
	v15 = loc11
	v16 = loc4
	v15 = v15 >>u v16
	loc3 = v15
	v15 = loc3
	return v15
	// succ:  fn0011547B_exit
l001154D4:
	return v15
	// succ:  fn0011547B_exit
fn0011547B_exit:


// fn001154D6
// Return size: 0
void fn001154D6(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn001154D6_entry:
	// succ:  l001154D6
l001154D6:
	v58 = Mem0[0x00140030<p32>:word32]
	loc60 = v58
	v58 = Mem0[0x00140030<p32>:word32]
	v59 = 0x10<32>
	v58 = v58 + v59
	Mem0[0x00140030<p32>:word32] = v58
	v58 = Mem0[0x00140030<p32>:word32]
	v59 = Mem0[0x00140034<p32>:word32]
	v60 = v58 >= v59
	branch !v60 l001154EF
	// succ:  l001154EA l001154EF
l001154EA:
	v58 = 0x10<32>
	abortStackOverflow(v58)
	// succ:  l001154EF
l001154EF:
	v58 = loc60
	loc53 = v58
	v58 = loc53
	v61 = 0<64>
	Mem0[v58:word64] = v61
	v58 = loc53
	v59 = 8<32>
	v58 = v58 + v59
	v59 = 0<32>
	Mem0[v58:word32] = v59
	v58 = 0<32>
	loc7 = v58
	// succ:  l0011550A
l0011550A:
	v58 = loc7
	v59 = 3<32>
	v60 = v58 == v59
	loc57 = v60
	v58 = loc57
	branch !v58 l0011551A
	// succ:  l00115517 l0011551A
l00115517:
	goto l00115538
	// succ:  l00115538
l0011551A:
	v58 = loc53
	v59 = loc7
	v62 = 2<32>
	v59 = v59 << v62
	v58 = v58 + v59
	loc54 = v58
	v58 = loc54
	v59 = 0<32>
	Mem0[v58:word32] = v59
	v58 = loc7
	v59 = 1<32>
	v58 = v58 + v59
	loc55 = v58
	v58 = loc55
	loc7 = v58
	goto l001154EF
	// succ:  l001154EF
l00115538:
	v58 = arg5
	v59 = 0xB<32>
	v58 = v58 + v59
	loc56 = v58
	v58 = loc56
	v63 = Mem0[v58:int8]
	v58 = CONVERT(v63, int8, word32)
	loc12 = v58
	v58 = loc12
	v59 = 0x18<32>
	v58 = v58 << v59
	v59 = 0x18<32>
	v58 = v58 >> v59
	v59 = 0<32>
	v60 = v58 < v59
	loc13 = v60
	v58 = arg5
	v58 = Mem0[v58:word32]
	loc14 = v58
	v58 = loc13
	branch !v58 l00115563
	// succ:  l00115560 l00115563
l00115560:
	v58 = loc14
	goto l00115565
	// succ:  l00115565
l00115563:
	v58 = arg5
	// succ:  l00115565
l00115565:
	loc15 = v58
	v58 = arg5
	v59 = 4<32>
	v58 = v58 + v59
	loc16 = v58
	v58 = loc16
	v58 = Mem0[v58:word32]
	loc17 = v58
	v58 = loc12
	v59 = 0xFF<32>
	v58 = v58 & v59
	loc18 = v58
	v58 = loc13
	branch !v58 l00115585
	// succ:  l00115582 l00115585
l00115582:
	v58 = loc17
	goto l00115587
	// succ:  l00115587
l00115585:
	v58 = loc18
	// succ:  l00115587
l00115587:
	loc19 = v58
	v58 = loc15
	v59 = loc19
	v58 = v58 + v59
	loc20 = v58
	v58 = loc15
	loc9 = v58
	// succ:  l00115597
l00115597:
	v58 = loc9
	v59 = loc20
	v60 = v58 <u v59
	loc21 = v60
	v58 = loc21
	v60 = v58 == 0<32>
	branch !v60 l001155AC
	// succ:  l001155A5 l001155AC
l001155A5:
	v58 = 8<32>
	loc59 = v58
	goto l001155E7
	// succ:  l001155E7
l001155AC:
	v58 = loc9
	v64 = Mem0[v58:int8]
	v58 = CONVERT(v64, int8, word32)
	loc22 = v58
	v58 = 0<32>
	Mem0[0x00140048<p32>:word32] = v58
	v58 = 0x1A7<32>
	v59 = loc53
	v62 = loc22
	invoke_vii(v58, v59, v62)
	v58 = Mem0[0x00140048<p32>:word32]
	loc23 = v58
	v58 = 0<32>
	Mem0[0x00140048<p32>:word32] = v58
	v58 = loc23
	v59 = 1<32>
	v58 = v58 & v59
	loc24 = v58
	v58 = loc24
	branch !v58 l001155DA
	// succ:  l001155D3 l001155DA
l001155D3:
	v58 = 9<32>
	loc59 = v58
	goto l001155E7
	// succ:  l001155E7
l001155DA:
	v58 = loc9
	v59 = 1<32>
	v58 = v58 + v59
	loc25 = v58
	v58 = loc25
	loc9 = v58
	goto l00115587
	// succ:  l00115587
l001155E7:
	v58 = loc59
	v59 = 8<32>
	v60 = v58 == v59
	branch !v60 l00115757
	// succ:  l001155F2 l00115757
l001155F2:
	v58 = arg2
	v59 = 0xFFFFFFFF<32>
	v60 = v58 == v59
	loc26 = v60
	v58 = arg2
	v59 = 1<32>
	v58 = v58 << v59
	loc27 = v58
	v58 = loc27
	loc28 = v58
	v58 = loc26
	branch !v58 l0011560B
	// succ:  l00115608 l0011560B
l00115608:
	v58 = 0xFFFFFFFF<32>
	goto l0011560D
	// succ:  l0011560D
l0011560B:
	v58 = loc28
	// succ:  l0011560D
l0011560D:
	loc29 = v58
	v58 = loc53
	v59 = 0xB<32>
	v58 = v58 + v59
	loc30 = v58
	v58 = loc30
	v65 = Mem0[v58:int8]
	v58 = CONVERT(v65, int8, word32)
	loc31 = v58
	v58 = loc31
	v59 = 0x18<32>
	v58 = v58 << v59
	v59 = 0x18<32>
	v58 = v58 >> v59
	v59 = 0<32>
	v60 = v58 < v59
	loc32 = v60
	v58 = loc53
	v58 = Mem0[v58:word32]
	loc33 = v58
	v58 = loc32
	branch !v58 l00115639
	// succ:  l00115636 l00115639
l00115636:
	v58 = loc33
	goto l0011563B
	// succ:  l0011563B
l00115639:
	v58 = loc53
	// succ:  l0011563B
l0011563B:
	loc34 = v58
	v58 = 0<32>
	Mem0[0x00140048<p32>:word32] = v58
	v58 = 0x1B8<32>
	v59 = loc29
	v62 = arg3
	v66 = arg4
	v67 = loc34
	v58 = invoke_iiiii(v58, v59, v62, v66, v67)
	loc35 = v58
	v58 = Mem0[0x00140048<p32>:word32]
	loc36 = v58
	v58 = 0<32>
	Mem0[0x00140048<p32>:word32] = v58
	v58 = loc36
	v59 = 1<32>
	v58 = v58 & v59
	loc37 = v58
	v58 = loc37
	branch !v58 l00115677
	// succ:  l00115664 l00115677
l00115664:
	v58 = ___cxa_find_matching_catch_2()
	loc49 = v58
	v58 = Mem0[0x00140094<p32>:word32]
	loc50 = v58
	v58 = loc49
	loc10 = v58
	v58 = loc50
	loc11 = v58
	goto l00115770
	// succ:  l00115770
l00115677:
	v58 = arg0
	v61 = 0<64>
	Mem0[v58:word64] = v61
	v58 = arg0
	v59 = 8<32>
	v58 = v58 + v59
	v59 = 0<32>
	Mem0[v58:word32] = v59
	v58 = 0<32>
	loc8 = v58
	// succ:  l0011568E
l0011568E:
	v58 = loc8
	v59 = 3<32>
	v60 = v58 == v59
	loc58 = v60
	v58 = loc58
	branch !v58 l0011569E
	// succ:  l0011569B l0011569E
l0011569B:
	goto l001156BC
	// succ:  l001156BC
l0011569E:
	v58 = arg0
	v59 = loc8
	v62 = 2<32>
	v59 = v59 << v62
	v58 = v58 + v59
	loc40 = v58
	v58 = loc40
	v59 = 0<32>
	Mem0[v58:word32] = v59
	v58 = loc8
	v59 = 1<32>
	v58 = v58 + v59
	loc41 = v58
	v58 = loc41
	loc8 = v58
	goto l00115677
	// succ:  l00115677
l001156BC:
	v58 = loc35
	v58 = fn000DAF30(v58)
	loc42 = v58
	v58 = loc35
	v59 = loc42
	v58 = v58 + v59
	loc43 = v58
	v58 = loc35
	loc6 = v58
	// succ:  l001156D2
l001156D2:
	v58 = loc6
	v59 = loc43
	v60 = v58 <u v59
	loc44 = v60
	v58 = loc44
	v60 = v58 == 0<32>
	branch !v60 l001156E7
	// succ:  l001156E0 l001156E7
l001156E0:
	v58 = 0x13<32>
	loc59 = v58
	goto l00115722
	// succ:  l00115722
l001156E7:
	v58 = loc6
	v68 = Mem0[v58:int8]
	v58 = CONVERT(v68, int8, word32)
	loc45 = v58
	v58 = 0<32>
	Mem0[0x00140048<p32>:word32] = v58
	v58 = 0x1A7<32>
	v59 = arg0
	v62 = loc45
	invoke_vii(v58, v59, v62)
	v58 = Mem0[0x00140048<p32>:word32]
	loc46 = v58
	v58 = 0<32>
	Mem0[0x00140048<p32>:word32] = v58
	v58 = loc46
	v59 = 1<32>
	v58 = v58 & v59
	loc47 = v58
	v58 = loc47
	branch !v58 l00115715
	// succ:  l0011570E l00115715
l0011570E:
	v58 = 0x12<32>
	loc59 = v58
	goto l00115722
	// succ:  l00115722
l00115715:
	v58 = loc6
	v59 = 1<32>
	v58 = v58 + v59
	loc48 = v58
	v58 = loc48
	loc6 = v58
	goto l001156BC
	// succ:  l001156BC
l00115722:
	v58 = loc59
	v59 = 0x12<32>
	v60 = v58 == v59
	branch !v60 l00115743
	// succ:  l0011572B l00115743
l0011572B:
	v58 = ___cxa_find_matching_catch_2()
	loc51 = v58
	v58 = Mem0[0x00140094<p32>:word32]
	loc52 = v58
	v58 = arg0
	fn0011BAF7(v58)
	v58 = loc51
	loc10 = v58
	v58 = loc52
	loc11 = v58
	goto l00115770
	// succ:  l00115770
l00115743:
	v58 = loc59
	v59 = 0x13<32>
	v60 = v58 == v59
	branch !v60 l00115755
	// succ:  l0011574A l00115755
l0011574A:
	v58 = loc53
	fn0011BAF7(v58)
	v58 = loc60
	Mem0[0x00140030<p32>:word32] = v58
	return
	// succ:  fn001154D6_exit
l00115755:
	// succ:  l00115755
l00115755:
	goto l0011576F
	// succ:  l0011576F
l00115757:
	v58 = loc59
	v59 = 9<32>
	v60 = v58 == v59
	branch !v60 l0011576F
	// succ:  l0011575E l0011576F
l0011575E:
	v58 = ___cxa_find_matching_catch_2()
	loc38 = v58
	v58 = Mem0[0x00140094<p32>:word32]
	loc39 = v58
	v58 = loc38
	loc10 = v58
	v58 = loc39
	loc11 = v58
	// succ:  l0011576F
l0011576F:
	// succ:  l0011576F
l0011576F:
	// succ:  l00115770
l00115770:
	v58 = loc53
	fn0011BAF7(v58)
	v58 = loc10
	___resumeException(v58)
	// succ:  l0011577A
l0011577A:
	return
	// succ:  fn001154D6_exit
fn001154D6_exit:


// fn0011577C
// Return size: 0
void fn0011577C(word32 arg0, word32 arg1)
fn0011577C_entry:
	// succ:  l0011577C
l0011577C:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	return
	// succ:  fn0011577C_exit
l00115783:
	return
	// succ:  fn0011577C_exit
fn0011577C_exit:


// fn00115785
// Return size: 0
void fn00115785(word32 arg0)
fn00115785_entry:
	// succ:  l00115785
l00115785:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	return
	// succ:  fn00115785_exit
l0011578C:
	return
	// succ:  fn00115785_exit
fn00115785_exit:


// fn0011578E
// Return size: 0
void fn0011578E(word32 arg0)
fn0011578E_entry:
	// succ:  l0011578E
l0011578E:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn0011578E_exit
l0011579A:
	return
	// succ:  fn0011578E_exit
fn0011578E_exit:


// fn0011579C
// Return size: 0
word32 fn0011579C(word32 arg0, word32 arg1, word32 arg2)
fn0011579C_entry:
	// succ:  l0011579C
l0011579C:
	v15 = Mem0[0x00140030<p32>:word32]
	loc14 = v15
	v15 = arg1
	v16 = 0xB<32>
	v15 = v15 + v16
	loc5 = v15
	v15 = loc5
	v17 = Mem0[v15:int8]
	v15 = CONVERT(v17, int8, word32)
	loc6 = v15
	v15 = loc6
	v16 = 0x18<32>
	v15 = v15 << v16
	v16 = 0x18<32>
	v15 = v15 >> v16
	v16 = 0<32>
	v18 = v15 < v16
	loc7 = v18
	v15 = arg1
	v15 = Mem0[v15:word32]
	loc8 = v15
	v15 = loc7
	branch !v15 l001157CB
	// succ:  l001157C8 l001157CB
l001157C8:
	v15 = loc8
	goto l001157CD
	// succ:  l001157CD
l001157CB:
	v15 = arg1
	// succ:  l001157CD
l001157CD:
	loc9 = v15
	v15 = loc9
	v16 = 1<32>
	v15 = fn000DAF17(v15, v16)
	loc10 = v15
	v15 = loc10
	loc11 = v15
	v15 = loc10
	v16 = 0xFFFFFFFF<32>
	v18 = v15 != v16
	loc12 = v18
	v15 = loc12
	v16 = 1<32>
	v15 = v15 & v16
	loc4 = v15
	v15 = loc11
	v16 = loc4
	v15 = v15 >>u v16
	loc3 = v15
	v15 = loc3
	return v15
	// succ:  fn0011579C_exit
l001157F5:
	return v15
	// succ:  fn0011579C_exit
fn0011579C_exit:


// fn001157F7
// Return size: 0
void fn001157F7(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn001157F7_entry:
	// succ:  l001157F7
l001157F7:
	v127 = Mem0[0x00140030<p32>:word32]
	loc129 = v127
	v127 = Mem0[0x00140030<p32>:word32]
	v128 = 0xE0<32>
	v127 = v127 + v128
	Mem0[0x00140030<p32>:word32] = v127
	v127 = Mem0[0x00140030<p32>:word32]
	v128 = Mem0[0x00140034<p32>:word32]
	v129 = v127 >= v128
	branch !v129 l00115813
	// succ:  l0011580D l00115813
l0011580D:
	v127 = 0xE0<32>
	abortStackOverflow(v127)
	// succ:  l00115813
l00115813:
	v127 = loc129
	v128 = 0xB8<32>
	v127 = v127 + v128
	loc76 = v127
	v127 = loc129
	v128 = 0xC0<32>
	v127 = v127 + v128
	loc87 = v127
	v127 = loc129
	v128 = 0xB4<32>
	v127 = v127 + v128
	loc98 = v127
	v127 = loc129
	v128 = 0xB0<32>
	v127 = v127 + v128
	loc109 = v127
	v127 = loc129
	v128 = 0xA8<32>
	v127 = v127 + v128
	loc16 = v127
	v127 = loc129
	v128 = 0x28<32>
	v127 = v127 + v128
	loc27 = v127
	v127 = loc129
	v128 = 0x20<32>
	v127 = v127 + v128
	loc28 = v127
	v127 = loc129
	v128 = 0x1C<32>
	v127 = v127 + v128
	loc29 = v127
	v127 = loc129
	v128 = 0x10<32>
	v127 = v127 + v128
	loc30 = v127
	v127 = loc129
	v128 = 8<32>
	v127 = v127 + v128
	loc31 = v127
	v127 = loc129
	loc32 = v127
	v127 = loc30
	v130 = 0<64>
	Mem0[v127:word64] = v130
	v127 = loc30
	v128 = 8<32>
	v127 = v127 + v128
	v128 = 0<32>
	Mem0[v127:word32] = v128
	v127 = 0<32>
	loc7 = v127
	// succ:  l00115884
l00115884:
	v127 = loc7
	v128 = 3<32>
	v129 = v127 == v128
	loc120 = v129
	v127 = loc120
	branch !v127 l00115894
	// succ:  l00115891 l00115894
l00115891:
	goto l001158B2
	// succ:  l001158B2
l00115894:
	v127 = loc30
	v128 = loc7
	v131 = 2<32>
	v128 = v128 << v131
	v127 = v127 + v128
	loc33 = v127
	v127 = loc33
	v128 = 0<32>
	Mem0[v127:word32] = v128
	v127 = loc7
	v128 = 1<32>
	v127 = v127 + v128
	loc34 = v127
	v127 = loc34
	loc7 = v127
	goto l00115813
	// succ:  l00115813
l001158B2:
	v127 = loc31
	v128 = 4<32>
	v127 = v127 + v128
	loc35 = v127
	v127 = loc35
	v128 = 0<32>
	Mem0[v127:word32] = v128
	v127 = loc31
	v128 = 0x2418<32>
	Mem0[v127:word32] = v128
	v127 = arg5
	v128 = 8<32>
	v127 = v127 + v128
	loc36 = v127
	v127 = loc36
	v128 = 3<32>
	v127 = v127 + v128
	loc37 = v127
	v127 = loc37
	v132 = Mem0[v127:int8]
	v127 = CONVERT(v132, int8, word32)
	loc38 = v127
	v127 = loc38
	v128 = 0x18<32>
	v127 = v127 << v128
	v128 = 0x18<32>
	v127 = v127 >> v128
	v128 = 0<32>
	v129 = v127 < v128
	loc39 = v129
	v127 = arg5
	v127 = Mem0[v127:word32]
	loc40 = v127
	v127 = loc39
	branch !v127 l001158FB
	// succ:  l001158F8 l001158FB
l001158F8:
	v127 = loc40
	goto l001158FD
	// succ:  l001158FD
l001158FB:
	v127 = arg5
	// succ:  l001158FD
l001158FD:
	loc41 = v127
	v127 = arg5
	v128 = 4<32>
	v127 = v127 + v128
	loc42 = v127
	v127 = loc42
	v127 = Mem0[v127:word32]
	loc43 = v127
	v127 = loc38
	v128 = 0xFF<32>
	v127 = v127 & v128
	loc44 = v127
	v127 = loc39
	branch !v127 l0011591D
	// succ:  l0011591A l0011591D
l0011591A:
	v127 = loc43
	goto l0011591F
	// succ:  l0011591F
l0011591D:
	v127 = loc44
	// succ:  l0011591F
l0011591F:
	loc45 = v127
	v127 = loc41
	v128 = loc45
	v131 = 2<32>
	v128 = v128 << v131
	v127 = v127 + v128
	loc46 = v127
	v127 = loc87
	v128 = 0x20<32>
	v127 = v127 + v128
	loc47 = v127
	v127 = loc41
	loc10 = v127
	v127 = 0<32>
	loc11 = v127
	// succ:  l0011593D
l0011593D:
	v127 = loc10
	v128 = loc46
	v129 = v127 <u v128
	loc48 = v129
	v127 = loc11
	v128 = 2<32>
	v129 = v127 != v128
	loc49 = v129
	v127 = loc49
	v128 = loc48
	v127 = v127 & v128
	loc50 = v127
	v127 = loc50
	v129 = v127 == 0<32>
	branch !v129 l00115961
	// succ:  l00115959 l00115961
l00115959:
	v127 = 0xD<32>
	loc128 = v127
	goto l00115A48
	// succ:  l00115A48
l00115961:
	v127 = loc109
	v128 = loc10
	Mem0[v127:word32] = v128
	v127 = loc31
	v127 = Mem0[v127:word32]
	loc51 = v127
	v127 = loc51
	v128 = 0xC<32>
	v127 = v127 + v128
	loc52 = v127
	v127 = loc52
	v127 = Mem0[v127:word32]
	loc53 = v127
	v127 = 0<32>
	Mem0[0x00140048<p32>:word32] = v127
	v127 = loc53
	v128 = loc31
	v131 = loc76
	v133 = loc10
	v134 = loc46
	v135 = loc109
	v136 = loc87
	v137 = loc47
	v138 = loc98
	v127 = invoke_iiiiiiiii(v127, v128, v131, v133, v134, v135, v136, v137, v138)
	loc54 = v127
	v127 = Mem0[0x00140048<p32>:word32]
	loc55 = v127
	v127 = 0<32>
	Mem0[0x00140048<p32>:word32] = v127
	v127 = loc55
	v128 = 1<32>
	v127 = v127 & v128
	loc56 = v127
	v127 = loc56
	branch !v127 l001159B2
	// succ:  l001159AA l001159B2
l001159AA:
	v127 = 0xF<32>
	loc128 = v127
	goto l00115A48
	// succ:  l00115A48
l001159B2:
	v127 = loc54
	v128 = 2<32>
	v129 = v127 == v128
	loc57 = v129
	v127 = loc109
	v127 = Mem0[v127:word32]
	loc58 = v127
	v127 = loc58
	v128 = loc10
	v129 = v127 == v128
	loc59 = v129
	v127 = loc57
	v128 = loc59
	v127 = v127 | v128
	loc127 = v127
	v127 = loc127
	branch !v127 l001159DA
	// succ:  l001159D2 l001159DA
l001159D2:
	v127 = 8<32>
	loc128 = v127
	goto l00115A48
	// succ:  l00115A48
l001159DA:
	v127 = loc87
	loc9 = v127
	// succ:  l001159DE
l001159DE:
	v127 = loc98
	v127 = Mem0[v127:word32]
	loc63 = v127
	v127 = loc9
	v128 = loc63
	v129 = v127 <u v128
	loc64 = v129
	v127 = loc64
	v129 = v127 == 0<32>
	branch !v129 l001159F9
	// succ:  l001159F6 l001159F9
l001159F6:
	goto l00115A35
	// succ:  l00115A35
l001159F9:
	v127 = loc9
	v139 = Mem0[v127:int8]
	v127 = CONVERT(v139, int8, word32)
	loc66 = v127
	v127 = 0<32>
	Mem0[0x00140048<p32>:word32] = v127
	v127 = 0x1A7<32>
	v128 = loc30
	v131 = loc66
	invoke_vii(v127, v128, v131)
	v127 = Mem0[0x00140048<p32>:word32]
	loc67 = v127
	v127 = 0<32>
	Mem0[0x00140048<p32>:word32] = v127
	v127 = loc67
	v128 = 1<32>
	v127 = v127 & v128
	loc68 = v127
	v127 = loc68
	branch !v127 l00115A28
	// succ:  l00115A20 l00115A28
l00115A20:
	v127 = 0xE<32>
	loc128 = v127
	goto l00115A48
	// succ:  l00115A48
l00115A28:
	v127 = loc9
	v128 = 1<32>
	v127 = v127 + v128
	loc69 = v127
	v127 = loc69
	loc9 = v127
	goto l001159DE
	// succ:  l001159DE
l00115A35:
	v127 = loc109
	v127 = Mem0[v127:word32]
	loc65 = v127
	v127 = loc65
	loc10 = v127
	v127 = loc54
	loc11 = v127
	goto l0011591F
	// succ:  l0011591F
l00115A48:
	v127 = loc128
	v128 = 8<32>
	v129 = v127 == v128
	branch !v129 l00115A7F
	// succ:  l00115A54 l00115A7F
l00115A54:
	v127 = 0<32>
	Mem0[0x00140048<p32>:word32] = v127
	v127 = 0x1A6<32>
	v128 = 0x3BF9<32>
	invoke_vi(v127, v128)
	v127 = Mem0[0x00140048<p32>:word32]
	loc60 = v127
	v127 = 0<32>
	Mem0[0x00140048<p32>:word32] = v127
	v127 = ___cxa_find_matching_catch_2()
	loc61 = v127
	v127 = Mem0[0x00140094<p32>:word32]
	loc62 = v127
	v127 = loc61
	loc124 = v127
	v127 = loc62
	loc125 = v127
	v127 = 0x10<32>
	loc128 = v127
	goto l00115D83
	// succ:  l00115D83
l00115A7F:
	v127 = loc128
	v128 = 0xD<32>
	v129 = v127 == v128
	branch !v129 l00115D45
	// succ:  l00115A87 l00115D45
l00115A87:
	v127 = arg2
	v128 = 0xFFFFFFFF<32>
	v129 = v127 == v128
	loc70 = v129
	v127 = arg2
	v128 = 1<32>
	v127 = v127 << v128
	loc71 = v127
	v127 = loc71
	loc72 = v127
	v127 = loc70
	branch !v127 l00115AA0
	// succ:  l00115A9D l00115AA0
l00115A9D:
	v127 = 0xFFFFFFFF<32>
	goto l00115AA2
	// succ:  l00115AA2
l00115AA0:
	v127 = loc72
	// succ:  l00115AA2
l00115AA2:
	loc73 = v127
	v127 = loc30
	v128 = 0xB<32>
	v127 = v127 + v128
	loc74 = v127
	v127 = loc74
	v140 = Mem0[v127:int8]
	v127 = CONVERT(v140, int8, word32)
	loc75 = v127
	v127 = loc75
	v128 = 0x18<32>
	v127 = v127 << v128
	v128 = 0x18<32>
	v127 = v127 >> v128
	v128 = 0<32>
	v129 = v127 < v128
	loc77 = v129
	v127 = loc30
	v127 = Mem0[v127:word32]
	loc78 = v127
	v127 = loc77
	branch !v127 l00115ACE
	// succ:  l00115ACB l00115ACE
l00115ACB:
	v127 = loc78
	goto l00115AD0
	// succ:  l00115AD0
l00115ACE:
	v127 = loc30
	// succ:  l00115AD0
l00115AD0:
	loc79 = v127
	v127 = 0<32>
	Mem0[0x00140048<p32>:word32] = v127
	v127 = 0x1B8<32>
	v128 = loc73
	v131 = arg3
	v133 = arg4
	v134 = loc79
	v127 = invoke_iiiii(v127, v128, v131, v133, v134)
	loc80 = v127
	v127 = Mem0[0x00140048<p32>:word32]
	loc81 = v127
	v127 = 0<32>
	Mem0[0x00140048<p32>:word32] = v127
	v127 = loc81
	v128 = 1<32>
	v127 = v127 & v128
	loc82 = v127
	v127 = loc82
	branch !v127 l00115B0C
	// succ:  l00115AF9 l00115B0C
l00115AF9:
	v127 = ___cxa_find_matching_catch_2()
	loc21 = v127
	v127 = Mem0[0x00140094<p32>:word32]
	loc22 = v127
	v127 = loc21
	loc14 = v127
	v127 = loc22
	loc15 = v127
	goto l00115D84
	// succ:  l00115D84
l00115B0C:
	v127 = arg0
	v130 = 0<64>
	Mem0[v127:word64] = v130
	v127 = arg0
	v128 = 8<32>
	v127 = v127 + v128
	v128 = 0<32>
	Mem0[v127:word32] = v128
	v127 = 0<32>
	loc8 = v127
	// succ:  l00115B23
l00115B23:
	v127 = loc8
	v128 = 3<32>
	v129 = v127 == v128
	loc121 = v129
	v127 = loc121
	branch !v127 l00115B33
	// succ:  l00115B30 l00115B33
l00115B30:
	goto l00115B51
	// succ:  l00115B51
l00115B33:
	v127 = arg0
	v128 = loc8
	v131 = 2<32>
	v128 = v128 << v131
	v127 = v127 + v128
	loc88 = v127
	v127 = loc88
	v128 = 0<32>
	Mem0[v127:word32] = v128
	v127 = loc8
	v128 = 1<32>
	v127 = v127 + v128
	loc89 = v127
	v127 = loc89
	loc8 = v127
	goto l00115B0C
	// succ:  l00115B0C
l00115B51:
	v127 = loc32
	v128 = 4<32>
	v127 = v127 + v128
	loc90 = v127
	v127 = loc90
	v128 = 0<32>
	Mem0[v127:word32] = v128
	v127 = loc32
	v128 = 0x2448<32>
	Mem0[v127:word32] = v128
	v127 = loc80
	v127 = fn000DAF30(v127)
	loc91 = v127
	v127 = loc80
	v128 = loc91
	v127 = v127 + v128
	loc92 = v127
	v127 = loc92
	loc93 = v127
	v127 = loc27
	v128 = 0x80<32>
	v127 = v127 + v128
	loc94 = v127
	v127 = loc80
	loc12 = v127
	v127 = 0<32>
	loc13 = v127
	// succ:  l00115B8E
l00115B8E:
	v127 = loc12
	v128 = loc92
	v129 = v127 <u v128
	loc95 = v129
	v127 = loc13
	v128 = 2<32>
	v129 = v127 != v128
	loc96 = v129
	v127 = loc96
	v128 = loc95
	v127 = v127 & v128
	loc97 = v127
	v127 = loc97
	v129 = v127 == 0<32>
	branch !v129 l00115BB2
	// succ:  l00115BAA l00115BB2
l00115BAA:
	v127 = 0x1D<32>
	loc128 = v127
	goto l00115CBE
	// succ:  l00115CBE
l00115BB2:
	v127 = loc29
	v128 = loc12
	Mem0[v127:word32] = v128
	v127 = loc32
	v127 = Mem0[v127:word32]
	loc99 = v127
	v127 = loc99
	v128 = 0x10<32>
	v127 = v127 + v128
	loc100 = v127
	v127 = loc100
	v127 = Mem0[v127:word32]
	loc101 = v127
	v127 = loc12
	loc102 = v127
	v127 = loc93
	v128 = loc102
	v127 = v127 - v128
	loc103 = v127
	v127 = loc103
	v128 = 0x20<32>
	v129 = v127 > v128
	loc104 = v129
	v127 = loc12
	v128 = 0x20<32>
	v127 = v127 + v128
	loc105 = v127
	v127 = loc104
	branch !v127 l00115BEE
	// succ:  l00115BEB l00115BEE
l00115BEB:
	v127 = loc105
	goto l00115BF0
	// succ:  l00115BF0
l00115BEE:
	v127 = loc92
	// succ:  l00115BF0
l00115BF0:
	loc106 = v127
	v127 = 0<32>
	Mem0[0x00140048<p32>:word32] = v127
	v127 = loc101
	v128 = loc32
	v131 = loc16
	v133 = loc12
	v134 = loc106
	v135 = loc29
	v136 = loc27
	v137 = loc94
	v138 = loc28
	v127 = invoke_iiiiiiiii(v127, v128, v131, v133, v134, v135, v136, v137, v138)
	loc107 = v127
	v127 = Mem0[0x00140048<p32>:word32]
	loc108 = v127
	v127 = 0<32>
	Mem0[0x00140048<p32>:word32] = v127
	v127 = loc108
	v128 = 1<32>
	v127 = v127 & v128
	loc110 = v127
	v127 = loc110
	branch !v127 l00115C28
	// succ:  l00115C20 l00115C28
l00115C20:
	v127 = 0x20<32>
	loc128 = v127
	goto l00115CBE
	// succ:  l00115CBE
l00115C28:
	v127 = loc107
	v128 = 2<32>
	v129 = v127 == v128
	loc111 = v129
	v127 = loc29
	v127 = Mem0[v127:word32]
	loc112 = v127
	v127 = loc112
	v128 = loc12
	v129 = v127 == v128
	loc113 = v129
	v127 = loc111
	v128 = loc113
	v127 = v127 | v128
	loc126 = v127
	v127 = loc126
	branch !v127 l00115C50
	// succ:  l00115C48 l00115C50
l00115C48:
	v127 = 0x18<32>
	loc128 = v127
	goto l00115CBE
	// succ:  l00115CBE
l00115C50:
	v127 = loc27
	loc6 = v127
	// succ:  l00115C54
l00115C54:
	v127 = loc28
	v127 = Mem0[v127:word32]
	loc117 = v127
	v127 = loc6
	v128 = loc117
	v129 = v127 <u v128
	loc118 = v129
	v127 = loc118
	v129 = v127 == 0<32>
	branch !v129 l00115C6F
	// succ:  l00115C6C l00115C6F
l00115C6C:
	goto l00115CAB
	// succ:  l00115CAB
l00115C6F:
	v127 = loc6
	v127 = Mem0[v127:word32]
	loc17 = v127
	v127 = 0<32>
	Mem0[0x00140048<p32>:word32] = v127
	v127 = 0x1AF<32>
	v128 = arg0
	v131 = loc17
	invoke_vii(v127, v128, v131)
	v127 = Mem0[0x00140048<p32>:word32]
	loc18 = v127
	v127 = 0<32>
	Mem0[0x00140048<p32>:word32] = v127
	v127 = loc18
	v128 = 1<32>
	v127 = v127 & v128
	loc19 = v127
	v127 = loc19
	branch !v127 l00115C9E
	// succ:  l00115C96 l00115C9E
l00115C96:
	v127 = 0x1F<32>
	loc128 = v127
	goto l00115CBE
	// succ:  l00115CBE
l00115C9E:
	v127 = loc6
	v128 = 4<32>
	v127 = v127 + v128
	loc20 = v127
	v127 = loc20
	loc6 = v127
	goto l00115C54
	// succ:  l00115C54
l00115CAB:
	v127 = loc29
	v127 = Mem0[v127:word32]
	loc119 = v127
	v127 = loc119
	loc12 = v127
	v127 = loc107
	loc13 = v127
	goto l00115B51
	// succ:  l00115B51
l00115CBE:
	v127 = loc128
	v128 = 0x18<32>
	v129 = v127 == v128
	branch !v129 l00115CEE
	// succ:  l00115CC8 l00115CEE
l00115CC8:
	v127 = 0<32>
	Mem0[0x00140048<p32>:word32] = v127
	v127 = 0x1A6<32>
	v128 = 0x3BF9<32>
	invoke_vi(v127, v128)
	v127 = Mem0[0x00140048<p32>:word32]
	loc114 = v127
	v127 = 0<32>
	Mem0[0x00140048<p32>:word32] = v127
	v127 = ___cxa_find_matching_catch_2()
	loc115 = v127
	v127 = Mem0[0x00140094<p32>:word32]
	loc116 = v127
	v127 = loc115
	loc122 = v127
	v127 = loc116
	loc123 = v127
	goto l00115D36
	// succ:  l00115D36
l00115CEE:
	v127 = loc128
	v128 = 0x1D<32>
	v129 = v127 == v128
	branch !v129 l00115D02
	// succ:  l00115CF6 l00115D02
l00115CF6:
	v127 = loc30
	fn0011BAF7(v127)
	v127 = loc129
	Mem0[0x00140030<p32>:word32] = v127
	return
	// succ:  fn001157F7_exit
l00115D02:
	v127 = loc128
	v128 = 0x1F<32>
	v129 = v127 == v128
	branch !v129 l00115D1B
	// succ:  l00115D0A l00115D1B
l00115D0A:
	v127 = ___cxa_find_matching_catch_2()
	loc23 = v127
	v127 = Mem0[0x00140094<p32>:word32]
	loc24 = v127
	v127 = loc23
	loc122 = v127
	v127 = loc24
	loc123 = v127
	goto l00115D34
	// succ:  l00115D34
l00115D1B:
	v127 = loc128
	v128 = 0x20<32>
	v129 = v127 == v128
	branch !v129 l00115D34
	// succ:  l00115D23 l00115D34
l00115D23:
	v127 = ___cxa_find_matching_catch_2()
	loc25 = v127
	v127 = Mem0[0x00140094<p32>:word32]
	loc26 = v127
	v127 = loc25
	loc122 = v127
	v127 = loc26
	loc123 = v127
	// succ:  l00115D34
l00115D34:
	// succ:  l00115D34
l00115D34:
	// succ:  l00115D35
l00115D35:
	// succ:  l00115D36
l00115D36:
	v127 = arg0
	fn0011C7BA(v127)
	v127 = loc122
	loc14 = v127
	v127 = loc123
	loc15 = v127
	goto l00115D82
	// succ:  l00115D82
l00115D45:
	v127 = loc128
	v128 = 0xE<32>
	v129 = v127 == v128
	branch !v129 l00115D63
	// succ:  l00115D4D l00115D63
l00115D4D:
	v127 = ___cxa_find_matching_catch_2()
	loc83 = v127
	v127 = Mem0[0x00140094<p32>:word32]
	loc84 = v127
	v127 = loc83
	loc124 = v127
	v127 = loc84
	loc125 = v127
	v127 = 0x10<32>
	loc128 = v127
	goto l00115D81
	// succ:  l00115D81
l00115D63:
	v127 = loc128
	v128 = 0xF<32>
	v129 = v127 == v128
	branch !v129 l00115D81
	// succ:  l00115D6B l00115D81
l00115D6B:
	v127 = ___cxa_find_matching_catch_2()
	loc85 = v127
	v127 = Mem0[0x00140094<p32>:word32]
	loc86 = v127
	v127 = loc85
	loc124 = v127
	v127 = loc86
	loc125 = v127
	v127 = 0x10<32>
	loc128 = v127
	// succ:  l00115D81
l00115D81:
	// succ:  l00115D81
l00115D81:
	// succ:  l00115D82
l00115D82:
	// succ:  l00115D83
l00115D83:
	// succ:  l00115D84
l00115D84:
	v127 = loc128
	v128 = 0x10<32>
	v129 = v127 == v128
	branch !v129 l00115D96
	// succ:  l00115D8D l00115D96
l00115D8D:
	v127 = loc124
	loc14 = v127
	v127 = loc125
	loc15 = v127
	// succ:  l00115D96
l00115D96:
	v127 = loc30
	fn0011BAF7(v127)
	v127 = loc14
	___resumeException(v127)
	// succ:  l00115D9F
l00115D9F:
	return
	// succ:  fn001157F7_exit
fn001157F7_exit:


// fn00115DA1
// Return size: 0
void fn00115DA1(word32 arg0, word32 arg1)
fn00115DA1_entry:
	// succ:  l00115DA1
l00115DA1:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	return
	// succ:  fn00115DA1_exit
l00115DA8:
	return
	// succ:  fn00115DA1_exit
fn00115DA1_exit:


// fn00115DAA
// Return size: 0
void fn00115DAA(word32 arg0)
fn00115DAA_entry:
	// succ:  l00115DAA
l00115DAA:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	return
	// succ:  fn00115DAA_exit
l00115DB1:
	return
	// succ:  fn00115DAA_exit
fn00115DAA_exit:


// fn00115DB3
// Return size: 0
void fn00115DB3(word32 arg0)
fn00115DB3_entry:
	// succ:  l00115DB3
l00115DB3:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn00115DB3_exit
l00115DBF:
	return
	// succ:  fn00115DB3_exit
fn00115DB3_exit:


// fn00115DC1
// Return size: 0
word32 fn00115DC1(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn00115DC1_entry:
	// succ:  l00115DC1
l00115DC1:
	v10 = Mem0[0x00140030<p32>:word32]
	loc14 = v10
	v10 = Mem0[0x00140030<p32>:word32]
	v11 = 0x10<32>
	v10 = v10 + v11
	Mem0[0x00140030<p32>:word32] = v10
	v10 = Mem0[0x00140030<p32>:word32]
	v11 = Mem0[0x00140034<p32>:word32]
	v12 = v10 >= v11
	branch !v12 l00115DDA
	// succ:  l00115DD5 l00115DDA
l00115DD5:
	v10 = 0x10<32>
	abortStackOverflow(v10)
	// succ:  l00115DDA
l00115DDA:
	v10 = loc14
	v11 = 4<32>
	v10 = v10 + v11
	loc11 = v10
	v10 = loc14
	loc12 = v10
	v10 = loc11
	v11 = arg2
	Mem0[v10:word32] = v11
	v10 = loc12
	v11 = arg5
	Mem0[v10:word32] = v11
	v10 = arg2
	v11 = arg3
	v13 = loc11
	v14 = arg5
	v15 = arg6
	v16 = loc12
	v17 = 0x10FFFF<32>
	v18 = 0<32>
	v10 = fn00116A09(v10, v11, v13, v14, v15, v16, v17, v18)
	loc8 = v10
	v10 = loc11
	v10 = Mem0[v10:word32]
	loc9 = v10
	v10 = arg4
	v11 = loc9
	Mem0[v10:word32] = v11
	v10 = loc12
	v10 = Mem0[v10:word32]
	loc10 = v10
	v10 = arg7
	v11 = loc10
	Mem0[v10:word32] = v11
	v10 = loc14
	Mem0[0x00140030<p32>:word32] = v10
	v10 = loc8
	return v10
	// succ:  fn00115DC1_exit
l00115E2E:
	return v10
	// succ:  fn00115DC1_exit
fn00115DC1_exit:


// fn00115E30
// Return size: 0
word32 fn00115E30(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn00115E30_entry:
	// succ:  l00115E30
l00115E30:
	v10 = Mem0[0x00140030<p32>:word32]
	loc14 = v10
	v10 = Mem0[0x00140030<p32>:word32]
	v11 = 0x10<32>
	v10 = v10 + v11
	Mem0[0x00140030<p32>:word32] = v10
	v10 = Mem0[0x00140030<p32>:word32]
	v11 = Mem0[0x00140034<p32>:word32]
	v12 = v10 >= v11
	branch !v12 l00115E49
	// succ:  l00115E44 l00115E49
l00115E44:
	v10 = 0x10<32>
	abortStackOverflow(v10)
	// succ:  l00115E49
l00115E49:
	v10 = loc14
	v11 = 4<32>
	v10 = v10 + v11
	loc11 = v10
	v10 = loc14
	loc12 = v10
	v10 = loc11
	v11 = arg2
	Mem0[v10:word32] = v11
	v10 = loc12
	v11 = arg5
	Mem0[v10:word32] = v11
	v10 = arg2
	v11 = arg3
	v13 = loc11
	v14 = arg5
	v15 = arg6
	v16 = loc12
	v17 = 0x10FFFF<32>
	v18 = 0<32>
	v10 = fn001164A4(v10, v11, v13, v14, v15, v16, v17, v18)
	loc8 = v10
	v10 = loc11
	v10 = Mem0[v10:word32]
	loc9 = v10
	v10 = arg4
	v11 = loc9
	Mem0[v10:word32] = v11
	v10 = loc12
	v10 = Mem0[v10:word32]
	loc10 = v10
	v10 = arg7
	v11 = loc10
	Mem0[v10:word32] = v11
	v10 = loc14
	Mem0[0x00140030<p32>:word32] = v10
	v10 = loc8
	return v10
	// succ:  fn00115E30_exit
l00115E9D:
	return v10
	// succ:  fn00115E30_exit
fn00115E30_exit:


// fn00115E9F
// Return size: 0
word32 fn00115E9F(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn00115E9F_entry:
	// succ:  l00115E9F
l00115E9F:
	v5 = Mem0[0x00140030<p32>:word32]
	loc6 = v5
	v5 = arg4
	v6 = arg2
	Mem0[v5:word32] = v6
	v5 = 3<32>
	return v5
	// succ:  fn00115E9F_exit
l00115EAF:
	return v5
	// succ:  fn00115E9F_exit
fn00115E9F_exit:


// fn00115EB1
// Return size: 0
word32 fn00115EB1(word32 arg0)
fn00115EB1_entry:
	// succ:  l00115EB1
l00115EB1:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = 0<32>
	return v5
	// succ:  fn00115EB1_exit
l00115EBA:
	return v5
	// succ:  fn00115EB1_exit
fn00115EB1_exit:


// fn00115EBC
// Return size: 0
word32 fn00115EBC(word32 arg0)
fn00115EBC_entry:
	// succ:  l00115EBC
l00115EBC:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = 0<32>
	return v5
	// succ:  fn00115EBC_exit
l00115EC5:
	return v5
	// succ:  fn00115EBC_exit
fn00115EBC_exit:


// fn00115EC7
// Return size: 0
word32 fn00115EC7(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn00115EC7_entry:
	// succ:  l00115EC7
l00115EC7:
	v6 = Mem0[0x00140030<p32>:word32]
	loc7 = v6
	v6 = arg2
	v7 = arg3
	v8 = arg4
	v9 = 0x10FFFF<32>
	v10 = 0<32>
	v6 = fn00115EEF(v6, v7, v8, v9, v10)
	loc5 = v6
	v6 = loc5
	return v6
	// succ:  fn00115EC7_exit
l00115EE2:
	return v6
	// succ:  fn00115EC7_exit
fn00115EC7_exit:


// fn00115EE4
// Return size: 0
word32 fn00115EE4(word32 arg0)
fn00115EE4_entry:
	// succ:  l00115EE4
l00115EE4:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = 4<32>
	return v5
	// succ:  fn00115EE4_exit
l00115EED:
	return v5
	// succ:  fn00115EE4_exit
fn00115EE4_exit:


// fn00115EEF
// Return size: 0
word32 fn00115EEF(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn00115EEF_entry:
	// succ:  l00115EEF
l00115EEF:
	v127 = Mem0[0x00140030<p32>:word32]
	loc128 = v127
	v127 = arg4
	v128 = 4<32>
	v127 = v127 & v128
	loc71 = v127
	v127 = loc71
	v128 = 0<32>
	v129 = v127 == v128
	loc82 = v129
	v127 = arg1
	loc14 = v127
	v127 = loc82
	branch !v127 l00115F15
	// succ:  l00115F0C l00115F15
l00115F0C:
	v127 = 0<32>
	loc6 = v127
	v127 = arg0
	loc7 = v127
	goto l00115FB8
	// succ:  l00115FB8
l00115F15:
	v127 = arg0
	loc93 = v127
	v127 = loc14
	v128 = loc93
	v127 = v127 - v128
	loc104 = v127
	v127 = loc104
	v128 = 2<32>
	v129 = v127 > v128
	loc115 = v129
	v127 = loc115
	branch !v127 l00115FAF
	// succ:  l00115F2B l00115FAF
l00115F2B:
	v127 = arg0
	v130 = Mem0[v127:int8]
	v127 = CONVERT(v130, int8, word32)
	loc15 = v127
	v127 = loc15
	v128 = 0x18<32>
	v127 = v127 << v128
	v128 = 0x18<32>
	v127 = v127 >> v128
	v128 = 0xFFFFFFEF<32>
	v129 = v127 == v128
	loc26 = v129
	v127 = loc26
	branch !v127 l00115FA5
	// succ:  l00115F43 l00115FA5
l00115F43:
	v127 = arg0
	v128 = 1<32>
	v127 = v127 + v128
	loc33 = v127
	v127 = loc33
	v131 = Mem0[v127:int8]
	v127 = CONVERT(v131, int8, word32)
	loc34 = v127
	v127 = loc34
	v128 = 0x18<32>
	v127 = v127 << v128
	v128 = 0x18<32>
	v127 = v127 >> v128
	v128 = 0xFFFFFFBB<32>
	v129 = v127 == v128
	loc35 = v129
	v127 = loc35
	branch !v127 l00115F9B
	// succ:  l00115F63 l00115F9B
l00115F63:
	v127 = arg0
	v128 = 2<32>
	v127 = v127 + v128
	loc36 = v127
	v127 = loc36
	v132 = Mem0[v127:int8]
	v127 = CONVERT(v132, int8, word32)
	loc37 = v127
	v127 = loc37
	v128 = 0x18<32>
	v127 = v127 << v128
	v128 = 0x18<32>
	v127 = v127 >> v128
	v128 = 0xFFFFFFBF<32>
	v129 = v127 == v128
	loc38 = v129
	v127 = arg0
	v128 = 3<32>
	v127 = v127 + v128
	loc39 = v127
	v127 = loc38
	branch !v127 l00115F8D
	// succ:  l00115F8A l00115F8D
l00115F8A:
	v127 = loc39
	goto l00115F8F
	// succ:  l00115F8F
l00115F8D:
	v127 = arg0
	// succ:  l00115F8F
l00115F8F:
	loc5 = v127
	v127 = 0<32>
	loc6 = v127
	v127 = loc5
	loc7 = v127
	goto l00115FA3
	// succ:  l00115FA3
l00115F9B:
	v127 = 0<32>
	loc6 = v127
	v127 = arg0
	loc7 = v127
	// succ:  l00115FA3
l00115FA3:
	goto l00115FAD
	// succ:  l00115FAD
l00115FA5:
	v127 = 0<32>
	loc6 = v127
	v127 = arg0
	loc7 = v127
	// succ:  l00115FAD
l00115FAD:
	goto l00115FB7
	// succ:  l00115FB7
l00115FAF:
	v127 = 0<32>
	loc6 = v127
	v127 = arg0
	loc7 = v127
	// succ:  l00115FB7
l00115FB7:
	// succ:  l00115FB8
l00115FB8:
	v127 = loc7
	v128 = arg1
	v129 = v127 <u v128
	loc40 = v129
	v127 = loc6
	v128 = arg2
	v129 = v127 <u v128
	loc41 = v129
	v127 = loc41
	v128 = loc40
	v127 = v127 & v128
	loc126 = v127
	v127 = loc126
	v129 = v127 == 0<32>
	branch !v129 l00115FDE
	// succ:  l00115FD7 l00115FDE
l00115FD7:
	v127 = 0x28<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l00115FDE:
	v127 = loc7
	v133 = Mem0[v127:int8]
	v127 = CONVERT(v133, int8, word32)
	loc42 = v127
	v127 = loc42
	v128 = 0xFF<32>
	v127 = v127 & v128
	loc43 = v127
	v127 = loc42
	v128 = 0x18<32>
	v127 = v127 << v128
	v128 = 0x18<32>
	v127 = v127 >> v128
	v128 = 0xFFFFFFFF<32>
	v129 = v127 > v128
	loc44 = v129
	// succ:  l00115FFA
l00115FFA:
	v127 = loc44
	branch !v127 l0011601E
	// succ:  l00116000 l0011601E
l00116000:
	v127 = loc43
	v128 = arg3
	v129 = v127 >u v128
	loc45 = v129
	v127 = loc45
	branch !v127 l00116012
	// succ:  l0011600B l00116012
l0011600B:
	v127 = 0x28<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l00116012:
	v127 = loc7
	v128 = 1<32>
	v127 = v127 + v128
	loc46 = v127
	v127 = loc46
	loc9 = v127
	goto l001163DF
	// succ:  l001163DF
l0011601E:
	v127 = loc42
	v128 = 0xFF<32>
	v127 = v127 & v128
	v128 = 0xC2<32>
	v129 = v127 < v128
	loc47 = v129
	v127 = loc47
	branch !v127 l00116035
	// succ:  l0011602E l00116035
l0011602E:
	v127 = 0x28<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l00116035:
	v127 = loc42
	v128 = 0xFF<32>
	v127 = v127 & v128
	v128 = 0xE0<32>
	v129 = v127 < v128
	loc48 = v129
	v127 = loc48
	branch !v127 l001160D1
	// succ:  l00116045 l001160D1
l00116045:
	v127 = loc7
	loc49 = v127
	v127 = loc14
	v128 = loc49
	v127 = v127 - v128
	loc50 = v127
	v127 = loc50
	v128 = 2<32>
	v129 = v127 < v128
	loc51 = v129
	v127 = loc51
	branch !v127 l00116062
	// succ:  l0011605B l00116062
l0011605B:
	v127 = 0x28<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l00116062:
	v127 = loc7
	v128 = 1<32>
	v127 = v127 + v128
	loc52 = v127
	v127 = loc52
	v134 = Mem0[v127:int8]
	v127 = CONVERT(v134, int8, word32)
	loc53 = v127
	v127 = loc53
	v128 = 0xFF<32>
	v127 = v127 & v128
	loc54 = v127
	v127 = loc54
	v128 = 0xC0<32>
	v127 = v127 & v128
	loc55 = v127
	v127 = loc55
	v128 = 0x80<32>
	v129 = v127 == v128
	loc56 = v129
	v127 = loc56
	v129 = v127 == 0<32>
	branch !v129 l00116094
	// succ:  l0011608D l00116094
l0011608D:
	v127 = 0x28<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l00116094:
	v127 = loc43
	v128 = 6<32>
	v127 = v127 << v128
	loc57 = v127
	v127 = loc57
	v128 = 0x7C0<32>
	v127 = v127 & v128
	loc58 = v127
	v127 = loc54
	v128 = 0x3F<32>
	v127 = v127 & v128
	loc59 = v127
	v127 = loc59
	v128 = loc58
	v127 = v127 | v128
	loc60 = v127
	v127 = loc60
	v128 = arg3
	v129 = v127 >u v128
	loc61 = v129
	v127 = loc61
	branch !v127 l001160C3
	// succ:  l001160BC l001160C3
l001160BC:
	v127 = 0x28<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l001160C3:
	v127 = loc7
	v128 = 2<32>
	v127 = v127 + v128
	loc62 = v127
	v127 = loc62
	loc9 = v127
	goto l001163E0
	// succ:  l001163E0
l001160D1:
	v127 = loc42
	v128 = 0xFF<32>
	v127 = v127 & v128
	v128 = 0xF0<32>
	v129 = v127 < v128
	loc63 = v129
	v127 = loc63
	branch !v127 l00116233
	// succ:  l001160E1 l00116233
l001160E1:
	v127 = loc7
	loc64 = v127
	v127 = loc14
	v128 = loc64
	v127 = v127 - v128
	loc65 = v127
	v127 = loc65
	v128 = 3<32>
	v129 = v127 < v128
	loc66 = v129
	v127 = loc66
	branch !v127 l001160FE
	// succ:  l001160F7 l001160FE
l001160F7:
	v127 = 0x28<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l001160FE:
	v127 = loc7
	v128 = 1<32>
	v127 = v127 + v128
	loc67 = v127
	v127 = loc67
	v135 = Mem0[v127:int8]
	v127 = CONVERT(v135, int8, word32)
	loc68 = v127
	v127 = loc7
	v128 = 2<32>
	v127 = v127 + v128
	loc69 = v127
	v127 = loc69
	v136 = Mem0[v127:int8]
	v127 = CONVERT(v136, int8, word32)
	loc70 = v127
	// succ:  l0011611A
l0011611A:
	v127 = loc42
	v128 = 0x18<32>
	v127 = v127 << v128
	v128 = 0x18<32>
	v127 = v127 >> v128
	v128 = 0xFFFFFFE0<32>
	v127 = v127 - v128
	switch (v127) { l0011613E l0011618C l0011618C l0011618C l0011618C l0011618C l0011618C l0011618C l0011618C l0011618C l0011618C l0011618C l0011618C l00116165 }
	// succ:  l0011613E l00116165 l0011618C l0011618C l0011618C l0011618C l0011618C l0011618C l0011618C l0011618C l0011618C l0011618C l0011618C l0011618C
l0011613E:
	v127 = loc68
	v128 = 0xFFFFFFE0<32>
	v127 = v127 & v128
	loc72 = v127
	v127 = loc72
	v128 = 0x18<32>
	v127 = v127 << v128
	v128 = 0x18<32>
	v127 = v127 >> v128
	v128 = 0xFFFFFFA0<32>
	v129 = v127 == v128
	loc73 = v129
	v127 = loc73
	v129 = v127 == 0<32>
	branch !v129 l00116162
	// succ:  l0011615B l00116162
l0011615B:
	v127 = 0x14<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l00116162:
	goto l001161B1
	// succ:  l001161B1
l00116164:
	// succ:  l00116165
l00116165:
	v127 = loc68
	v128 = 0xFFFFFFE0<32>
	v127 = v127 & v128
	loc76 = v127
	v127 = loc76
	v128 = 0x18<32>
	v127 = v127 << v128
	v128 = 0x18<32>
	v127 = v127 >> v128
	v128 = 0xFFFFFF80<32>
	v129 = v127 == v128
	loc77 = v129
	v127 = loc77
	v129 = v127 == 0<32>
	branch !v129 l00116189
	// succ:  l00116182 l00116189
l00116182:
	v127 = 0x16<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l00116189:
	goto l001161B1
	// succ:  l001161B1
l0011618B:
	// succ:  l0011618C
l0011618C:
	v127 = loc68
	v128 = 0xFFFFFFC0<32>
	v127 = v127 & v128
	loc80 = v127
	v127 = loc80
	v128 = 0x18<32>
	v127 = v127 << v128
	v128 = 0x18<32>
	v127 = v127 >> v128
	v128 = 0xFFFFFF80<32>
	v129 = v127 == v128
	loc81 = v129
	v127 = loc81
	v129 = v127 == 0<32>
	branch !v129 l001161B0
	// succ:  l001161A9 l001161B0
l001161A9:
	v127 = 0x18<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l001161B0:
	// succ:  l001161B0
l001161B0:
	// succ:  l001161B1
l001161B1:
	v127 = loc70
	v128 = 0xFF<32>
	v127 = v127 & v128
	loc85 = v127
	v127 = loc85
	v128 = 0xC0<32>
	v127 = v127 & v128
	loc86 = v127
	v127 = loc86
	v128 = 0x80<32>
	v129 = v127 == v128
	loc87 = v129
	v127 = loc87
	v129 = v127 == 0<32>
	branch !v129 l001161D6
	// succ:  l001161CF l001161D6
l001161CF:
	v127 = 0x28<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l001161D6:
	v127 = loc43
	v128 = 0xC<32>
	v127 = v127 << v128
	loc88 = v127
	v127 = loc88
	v128 = 0xF000<32>
	v127 = v127 & v128
	loc89 = v127
	v127 = loc68
	v128 = 0xFF<32>
	v127 = v127 & v128
	loc90 = v127
	v127 = loc90
	v128 = 6<32>
	v127 = v127 << v128
	loc91 = v127
	v127 = loc91
	v128 = 0xFC0<32>
	v127 = v127 & v128
	loc92 = v127
	v127 = loc92
	v128 = loc89
	v127 = v127 | v128
	loc94 = v127
	v127 = loc85
	v128 = 0x3F<32>
	v127 = v127 & v128
	loc95 = v127
	v127 = loc94
	v128 = loc95
	v127 = v127 | v128
	loc96 = v127
	v127 = loc96
	v128 = arg3
	v129 = v127 >u v128
	loc97 = v129
	v127 = loc7
	v128 = 3<32>
	v127 = v127 + v128
	loc98 = v127
	v127 = loc97
	branch !v127 l0011622B
	// succ:  l00116224 l0011622B
l00116224:
	v127 = 0x28<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l0011622B:
	v127 = loc98
	loc9 = v127
	goto l001163E0
	// succ:  l001163E0
l00116231:
	// succ:  l00116233
l00116233:
	v127 = loc42
	v128 = 0xFF<32>
	v127 = v127 & v128
	v128 = 0xF5<32>
	v129 = v127 < v128
	loc99 = v129
	v127 = loc99
	v129 = v127 == 0<32>
	branch !v129 l0011624B
	// succ:  l00116244 l0011624B
l00116244:
	v127 = 0x28<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l0011624B:
	v127 = loc7
	loc100 = v127
	v127 = loc14
	v128 = loc100
	v127 = v127 - v128
	loc101 = v127
	v127 = loc101
	v128 = 4<32>
	v129 = v127 < v128
	loc102 = v129
	v127 = loc102
	branch !v127 l00116268
	// succ:  l00116261 l00116268
l00116261:
	v127 = 0x28<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l00116268:
	v127 = loc7
	v128 = 1<32>
	v127 = v127 + v128
	loc103 = v127
	v127 = loc103
	v137 = Mem0[v127:int8]
	v127 = CONVERT(v137, int8, word32)
	loc105 = v127
	v127 = loc7
	v128 = 2<32>
	v127 = v127 + v128
	loc106 = v127
	v127 = loc106
	v138 = Mem0[v127:int8]
	v127 = CONVERT(v138, int8, word32)
	loc107 = v127
	v127 = loc7
	v128 = 3<32>
	v127 = v127 + v128
	loc108 = v127
	v127 = loc108
	v139 = Mem0[v127:int8]
	v127 = CONVERT(v139, int8, word32)
	loc109 = v127
	// succ:  l00116292
l00116292:
	v127 = loc42
	v128 = 0x18<32>
	v127 = v127 << v128
	v128 = 0x18<32>
	v127 = v127 >> v128
	v128 = 0xFFFFFFF0<32>
	v127 = v127 - v128
	switch (v127) { l001162AD l001162FF l001162FF l001162FF l001162D8 }
	// succ:  l001162AD l001162D8 l001162FF l001162FF l001162FF
l001162AD:
	v127 = loc105
	v128 = 0x70<32>
	v127 = v127 + v128
	v128 = 0x18<32>
	v127 = v127 << v128
	v128 = 0x18<32>
	v127 = v127 >> v128
	loc10 = v127
	v127 = loc10
	v128 = 0xFF<32>
	v127 = v127 & v128
	v128 = 0x30<32>
	v129 = v127 < v128
	loc110 = v129
	v127 = loc110
	v129 = v127 == 0<32>
	branch !v129 l001162D5
	// succ:  l001162CE l001162D5
l001162CE:
	v127 = 0x1F<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l001162D5:
	goto l00116324
	// succ:  l00116324
l001162D7:
	// succ:  l001162D8
l001162D8:
	v127 = loc105
	v128 = 0xFFFFFFF0<32>
	v127 = v127 & v128
	loc113 = v127
	v127 = loc113
	v128 = 0x18<32>
	v127 = v127 << v128
	v128 = 0x18<32>
	v127 = v127 >> v128
	v128 = 0xFFFFFF80<32>
	v129 = v127 == v128
	loc114 = v129
	v127 = loc114
	v129 = v127 == 0<32>
	branch !v129 l001162FC
	// succ:  l001162F5 l001162FC
l001162F5:
	v127 = 0x21<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l001162FC:
	goto l00116324
	// succ:  l00116324
l001162FE:
	// succ:  l001162FF
l001162FF:
	v127 = loc105
	v128 = 0xFFFFFFC0<32>
	v127 = v127 & v128
	loc118 = v127
	v127 = loc118
	v128 = 0x18<32>
	v127 = v127 << v128
	v128 = 0x18<32>
	v127 = v127 >> v128
	v128 = 0xFFFFFF80<32>
	v129 = v127 == v128
	loc119 = v129
	v127 = loc119
	v129 = v127 == 0<32>
	branch !v129 l00116323
	// succ:  l0011631C l00116323
l0011631C:
	v127 = 0x23<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l00116323:
	// succ:  l00116323
l00116323:
	// succ:  l00116324
l00116324:
	v127 = loc107
	v128 = 0xFF<32>
	v127 = v127 & v128
	loc122 = v127
	v127 = loc122
	v128 = 0xC0<32>
	v127 = v127 & v128
	loc123 = v127
	v127 = loc123
	v128 = 0x80<32>
	v129 = v127 == v128
	loc124 = v129
	v127 = loc124
	v129 = v127 == 0<32>
	branch !v129 l00116349
	// succ:  l00116342 l00116349
l00116342:
	v127 = 0x28<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l00116349:
	v127 = loc109
	v128 = 0xFF<32>
	v127 = v127 & v128
	loc125 = v127
	v127 = loc125
	v128 = 0xC0<32>
	v127 = v127 & v128
	loc16 = v127
	v127 = loc16
	v128 = 0x80<32>
	v129 = v127 == v128
	loc17 = v129
	v127 = loc17
	v129 = v127 == 0<32>
	branch !v129 l0011636D
	// succ:  l00116366 l0011636D
l00116366:
	v127 = 0x28<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l0011636D:
	v127 = loc43
	v128 = 0x12<32>
	v127 = v127 << v128
	loc18 = v127
	v127 = loc18
	v128 = 0x1C0000<32>
	v127 = v127 & v128
	loc19 = v127
	v127 = loc105
	v128 = 0xFF<32>
	v127 = v127 & v128
	loc20 = v127
	v127 = loc20
	v128 = 0xC<32>
	v127 = v127 << v128
	loc21 = v127
	v127 = loc21
	v128 = 0x3F000<32>
	v127 = v127 & v128
	loc22 = v127
	v127 = loc22
	v128 = loc19
	v127 = v127 | v128
	loc23 = v127
	v127 = loc122
	v128 = 6<32>
	v127 = v127 << v128
	loc24 = v127
	v127 = loc24
	v128 = 0xFC0<32>
	v127 = v127 & v128
	loc25 = v127
	v127 = loc23
	v128 = loc25
	v127 = v127 | v128
	loc27 = v127
	v127 = loc125
	v128 = 0x3F<32>
	v127 = v127 & v128
	loc28 = v127
	v127 = loc27
	v128 = loc28
	v127 = v127 | v128
	loc29 = v127
	v127 = loc29
	v128 = arg3
	v129 = v127 >u v128
	loc30 = v129
	v127 = loc7
	v128 = 4<32>
	v127 = v127 + v128
	loc31 = v127
	v127 = loc30
	branch !v127 l001163DA
	// succ:  l001163D3 l001163DA
l001163D3:
	v127 = 0x28<32>
	loc127 = v127
	goto l001163F2
	// succ:  l001163F2
l001163DA:
	v127 = loc31
	loc9 = v127
	// succ:  l001163DE
l001163DE:
	// succ:  l001163DF
l001163DF:
	// succ:  l001163E0
l001163E0:
	v127 = loc6
	v128 = 1<32>
	v127 = v127 + v128
	loc32 = v127
	v127 = loc32
	loc6 = v127
	v127 = loc9
	loc7 = v127
	goto l00115FB8
	// succ:  l00115FB8
l001163F2:
	v127 = loc127
	v128 = 0x14<32>
	v129 = v127 == v128
	branch !v129 l0011640B
	// succ:  l001163FB l0011640B
l001163FB:
	v127 = arg0
	loc74 = v127
	v127 = loc64
	v128 = loc74
	v127 = v127 - v128
	loc75 = v127
	v127 = loc75
	loc8 = v127
	goto l0011649E
	// succ:  l0011649E
l0011640B:
	v127 = loc127
	v128 = 0x16<32>
	v129 = v127 == v128
	branch !v129 l00116422
	// succ:  l00116412 l00116422
l00116412:
	v127 = arg0
	loc78 = v127
	v127 = loc64
	v128 = loc78
	v127 = v127 - v128
	loc79 = v127
	v127 = loc79
	loc8 = v127
	goto l0011649D
	// succ:  l0011649D
l00116422:
	v127 = loc127
	v128 = 0x18<32>
	v129 = v127 == v128
	branch !v129 l00116439
	// succ:  l00116429 l00116439
l00116429:
	v127 = arg0
	loc83 = v127
	v127 = loc64
	v128 = loc83
	v127 = v127 - v128
	loc84 = v127
	v127 = loc84
	loc8 = v127
	goto l0011649C
	// succ:  l0011649C
l00116439:
	v127 = loc127
	v128 = 0x1F<32>
	v129 = v127 == v128
	branch !v129 l00116450
	// succ:  l00116440 l00116450
l00116440:
	v127 = arg0
	loc111 = v127
	v127 = loc100
	v128 = loc111
	v127 = v127 - v128
	loc112 = v127
	v127 = loc112
	loc8 = v127
	goto l0011649B
	// succ:  l0011649B
l00116450:
	v127 = loc127
	v128 = 0x21<32>
	v129 = v127 == v128
	branch !v129 l00116467
	// succ:  l00116457 l00116467
l00116457:
	v127 = arg0
	loc116 = v127
	v127 = loc100
	v128 = loc116
	v127 = v127 - v128
	loc117 = v127
	v127 = loc117
	loc8 = v127
	goto l0011649A
	// succ:  l0011649A
l00116467:
	v127 = loc127
	v128 = 0x23<32>
	v129 = v127 == v128
	branch !v129 l0011647E
	// succ:  l0011646E l0011647E
l0011646E:
	v127 = arg0
	loc120 = v127
	v127 = loc100
	v128 = loc120
	v127 = v127 - v128
	loc121 = v127
	v127 = loc121
	loc8 = v127
	goto l00116499
	// succ:  l00116499
l0011647E:
	v127 = loc127
	v128 = 0x28<32>
	v129 = v127 == v128
	branch !v129 l00116499
	// succ:  l00116485 l00116499
l00116485:
	v127 = loc7
	loc11 = v127
	v127 = arg0
	loc12 = v127
	v127 = loc11
	v128 = loc12
	v127 = v127 - v128
	loc13 = v127
	v127 = loc13
	loc8 = v127
	// succ:  l00116499
l00116499:
	// succ:  l00116499
l00116499:
	// succ:  l0011649A
l0011649A:
	// succ:  l0011649B
l0011649B:
	// succ:  l0011649C
l0011649C:
	// succ:  l0011649D
l0011649D:
	// succ:  l0011649E
l0011649E:
	v127 = loc8
	return v127
	// succ:  fn00115EEF_exit
l001164A2:
	return v127
	// succ:  fn00115EEF_exit
fn00115EEF_exit:


// fn001164A4
// Return size: 0
word32 fn001164A4(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn001164A4_entry:
	// succ:  l001164A4
l001164A4:
	v114 = Mem0[0x00140030<p32>:word32]
	loc118 = v114
	v114 = arg2
	v115 = arg0
	Mem0[v114:word32] = v115
	v114 = arg5
	v115 = arg3
	Mem0[v114:word32] = v115
	v114 = arg7
	v115 = 4<32>
	v114 = v114 & v115
	loc95 = v114
	v114 = loc95
	v115 = 0<32>
	v116 = v114 == v115
	loc106 = v116
	v114 = loc106
	branch !v114 l001164D3
	// succ:  l001164CA l001164D3
l001164CA:
	v114 = arg1
	loc10 = v114
	v114 = loc10
	loc11 = v114
	goto l00116576
	// succ:  l00116576
l001164D3:
	v114 = arg2
	v114 = Mem0[v114:word32]
	loc12 = v114
	v114 = arg1
	loc23 = v114
	v114 = loc12
	loc27 = v114
	v114 = loc23
	v115 = loc27
	v114 = v114 - v115
	loc28 = v114
	v114 = loc28
	v115 = 2<32>
	v116 = v114 > v115
	loc29 = v116
	v114 = loc29
	branch !v114 l00116571
	// succ:  l001164F4 l00116571
l001164F4:
	v114 = loc12
	v117 = Mem0[v114:int8]
	v114 = CONVERT(v117, int8, word32)
	loc30 = v114
	v114 = loc30
	v115 = 0x18<32>
	v114 = v114 << v115
	v115 = 0x18<32>
	v114 = v114 >> v115
	v115 = 0xFFFFFFEF<32>
	v116 = v114 == v115
	loc31 = v116
	v114 = loc31
	branch !v114 l0011656B
	// succ:  l0011650C l0011656B
l0011650C:
	v114 = loc12
	v115 = 1<32>
	v114 = v114 + v115
	loc32 = v114
	v114 = loc32
	v118 = Mem0[v114:int8]
	v114 = CONVERT(v118, int8, word32)
	loc33 = v114
	v114 = loc33
	v115 = 0x18<32>
	v114 = v114 << v115
	v115 = 0x18<32>
	v114 = v114 >> v115
	v115 = 0xFFFFFFBB<32>
	v116 = v114 == v115
	loc34 = v116
	v114 = loc34
	branch !v114 l00116565
	// succ:  l0011652C l00116565
l0011652C:
	v114 = loc12
	v115 = 2<32>
	v114 = v114 + v115
	loc35 = v114
	v114 = loc35
	v119 = Mem0[v114:int8]
	v114 = CONVERT(v119, int8, word32)
	loc36 = v114
	v114 = loc36
	v115 = 0x18<32>
	v114 = v114 << v115
	v115 = 0x18<32>
	v114 = v114 >> v115
	v115 = 0xFFFFFFBF<32>
	v116 = v114 == v115
	loc37 = v116
	v114 = loc37
	branch !v114 l0011655F
	// succ:  l0011654C l0011655F
l0011654C:
	v114 = loc12
	v115 = 3<32>
	v114 = v114 + v115
	loc38 = v114
	v114 = arg2
	v115 = loc38
	Mem0[v114:word32] = v115
	v114 = loc23
	loc11 = v114
	goto l00116563
	// succ:  l00116563
l0011655F:
	v114 = loc23
	loc11 = v114
	// succ:  l00116563
l00116563:
	goto l00116569
	// succ:  l00116569
l00116565:
	v114 = loc23
	loc11 = v114
	// succ:  l00116569
l00116569:
	goto l0011656F
	// succ:  l0011656F
l0011656B:
	v114 = loc23
	loc11 = v114
	// succ:  l0011656F
l0011656F:
	goto l00116575
	// succ:  l00116575
l00116571:
	v114 = loc23
	loc11 = v114
	// succ:  l00116575
l00116575:
	// succ:  l00116576
l00116576:
	v114 = arg2
	v114 = Mem0[v114:word32]
	loc39 = v114
	v114 = loc39
	v115 = arg1
	v116 = v114 <u v115
	loc40 = v116
	v114 = loc40
	v116 = v114 == 0<32>
	branch !v116 l00116595
	// succ:  l0011658E l00116595
l0011658E:
	v114 = 0x28<32>
	loc117 = v114
	goto l001169EF
	// succ:  l001169EF
l00116595:
	v114 = arg5
	v114 = Mem0[v114:word32]
	loc41 = v114
	v114 = loc41
	v115 = arg4
	v116 = v114 <u v115
	loc42 = v116
	v114 = loc42
	v116 = v114 == 0<32>
	branch !v116 l001165AF
	// succ:  l001165A8 l001165AF
l001165A8:
	v114 = 0x28<32>
	loc117 = v114
	goto l001169EF
	// succ:  l001169EF
l001165AF:
	v114 = loc39
	v120 = Mem0[v114:int8]
	v114 = CONVERT(v120, int8, word32)
	loc43 = v114
	v114 = loc43
	v115 = 0xFF<32>
	v114 = v114 & v115
	loc44 = v114
	v114 = loc43
	v115 = 0x18<32>
	v114 = v114 << v115
	v115 = 0x18<32>
	v114 = v114 >> v115
	v115 = 0xFFFFFFFF<32>
	v116 = v114 > v115
	loc45 = v116
	// succ:  l001165CB
l001165CB:
	v114 = loc45
	branch !v114 l001165F9
	// succ:  l001165D1 l001165F9
l001165D1:
	v114 = loc44
	v115 = arg6
	v116 = v114 >u v115
	loc46 = v116
	v114 = loc46
	branch !v114 l001165E3
	// succ:  l001165DC l001165E3
l001165DC:
	v114 = 2<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l001165E3:
	v114 = loc41
	v115 = loc44
	Mem0[v114:word32] = v115
	v114 = loc39
	v115 = 1<32>
	v114 = v114 + v115
	loc47 = v114
	v114 = arg2
	v115 = loc47
	Mem0[v114:word32] = v115
	goto l001169D6
	// succ:  l001169D6
l001165F9:
	v114 = loc43
	v115 = 0xFF<32>
	v114 = v114 & v115
	v115 = 0xC2<32>
	v116 = v114 < v115
	loc48 = v116
	v114 = loc48
	branch !v114 l00116610
	// succ:  l00116609 l00116610
l00116609:
	v114 = 2<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l00116610:
	v114 = loc43
	v115 = 0xFF<32>
	v114 = v114 & v115
	v115 = 0xE0<32>
	v116 = v114 < v115
	loc49 = v116
	v114 = loc49
	branch !v114 l001166B6
	// succ:  l00116620 l001166B6
l00116620:
	v114 = loc39
	loc50 = v114
	v114 = loc11
	v115 = loc50
	v114 = v114 - v115
	loc51 = v114
	v114 = loc51
	v115 = 2<32>
	v116 = v114 < v115
	loc52 = v116
	v114 = loc52
	branch !v114 l0011663D
	// succ:  l00116636 l0011663D
l00116636:
	v114 = 1<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l0011663D:
	v114 = loc39
	v115 = 1<32>
	v114 = v114 + v115
	loc53 = v114
	v114 = loc53
	v121 = Mem0[v114:int8]
	v114 = CONVERT(v121, int8, word32)
	loc54 = v114
	v114 = loc54
	v115 = 0xFF<32>
	v114 = v114 & v115
	loc55 = v114
	v114 = loc55
	v115 = 0xC0<32>
	v114 = v114 & v115
	loc56 = v114
	v114 = loc56
	v115 = 0x80<32>
	v116 = v114 == v115
	loc57 = v116
	v114 = loc57
	v116 = v114 == 0<32>
	branch !v116 l0011666F
	// succ:  l00116668 l0011666F
l00116668:
	v114 = 2<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l0011666F:
	v114 = loc44
	v115 = 6<32>
	v114 = v114 << v115
	loc58 = v114
	v114 = loc58
	v115 = 0x7C0<32>
	v114 = v114 & v115
	loc59 = v114
	v114 = loc55
	v115 = 0x3F<32>
	v114 = v114 & v115
	loc60 = v114
	v114 = loc60
	v115 = loc59
	v114 = v114 | v115
	loc61 = v114
	v114 = loc61
	v115 = arg6
	v116 = v114 >u v115
	loc62 = v116
	v114 = loc62
	branch !v114 l0011669E
	// succ:  l00116697 l0011669E
l00116697:
	v114 = 2<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l0011669E:
	v114 = loc41
	v115 = loc61
	Mem0[v114:word32] = v115
	v114 = loc39
	v115 = 2<32>
	v114 = v114 + v115
	loc63 = v114
	v114 = arg2
	v115 = loc63
	Mem0[v114:word32] = v115
	goto l001169D7
	// succ:  l001169D7
l001166B6:
	v114 = loc43
	v115 = 0xFF<32>
	v114 = v114 & v115
	v115 = 0xF0<32>
	v116 = v114 < v115
	loc64 = v116
	v114 = loc64
	branch !v114 l00116821
	// succ:  l001166C6 l00116821
l001166C6:
	v114 = loc39
	loc65 = v114
	v114 = loc11
	v115 = loc65
	v114 = v114 - v115
	loc66 = v114
	v114 = loc66
	v115 = 3<32>
	v116 = v114 < v115
	loc67 = v116
	v114 = loc67
	branch !v114 l001166E3
	// succ:  l001166DC l001166E3
l001166DC:
	v114 = 1<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l001166E3:
	v114 = loc39
	v115 = 1<32>
	v114 = v114 + v115
	loc68 = v114
	v114 = loc68
	v122 = Mem0[v114:int8]
	v114 = CONVERT(v122, int8, word32)
	loc69 = v114
	v114 = loc39
	v115 = 2<32>
	v114 = v114 + v115
	loc70 = v114
	v114 = loc70
	v123 = Mem0[v114:int8]
	v114 = CONVERT(v123, int8, word32)
	loc71 = v114
	// succ:  l001166FF
l001166FF:
	v114 = loc43
	v115 = 0x18<32>
	v114 = v114 << v115
	v115 = 0x18<32>
	v114 = v114 >> v115
	v115 = 0xFFFFFFE0<32>
	v114 = v114 - v115
	switch (v114) { l00116723 l00116771 l00116771 l00116771 l00116771 l00116771 l00116771 l00116771 l00116771 l00116771 l00116771 l00116771 l00116771 l0011674A }
	// succ:  l00116723 l0011674A l00116771 l00116771 l00116771 l00116771 l00116771 l00116771 l00116771 l00116771 l00116771 l00116771 l00116771 l00116771
l00116723:
	v114 = loc69
	v115 = 0xFFFFFFE0<32>
	v114 = v114 & v115
	loc72 = v114
	v114 = loc72
	v115 = 0x18<32>
	v114 = v114 << v115
	v115 = 0x18<32>
	v114 = v114 >> v115
	v115 = 0xFFFFFFA0<32>
	v116 = v114 == v115
	loc73 = v116
	v114 = loc73
	v116 = v114 == 0<32>
	branch !v116 l00116747
	// succ:  l00116740 l00116747
l00116740:
	v114 = 2<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l00116747:
	goto l00116796
	// succ:  l00116796
l00116749:
	// succ:  l0011674A
l0011674A:
	v114 = loc69
	v115 = 0xFFFFFFE0<32>
	v114 = v114 & v115
	loc74 = v114
	v114 = loc74
	v115 = 0x18<32>
	v114 = v114 << v115
	v115 = 0x18<32>
	v114 = v114 >> v115
	v115 = 0xFFFFFF80<32>
	v116 = v114 == v115
	loc75 = v116
	v114 = loc75
	v116 = v114 == 0<32>
	branch !v116 l0011676E
	// succ:  l00116767 l0011676E
l00116767:
	v114 = 2<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l0011676E:
	goto l00116796
	// succ:  l00116796
l00116770:
	// succ:  l00116771
l00116771:
	v114 = loc69
	v115 = 0xFFFFFFC0<32>
	v114 = v114 & v115
	loc76 = v114
	v114 = loc76
	v115 = 0x18<32>
	v114 = v114 << v115
	v115 = 0x18<32>
	v114 = v114 >> v115
	v115 = 0xFFFFFF80<32>
	v116 = v114 == v115
	loc77 = v116
	v114 = loc77
	v116 = v114 == 0<32>
	branch !v116 l00116795
	// succ:  l0011678E l00116795
l0011678E:
	v114 = 2<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l00116795:
	// succ:  l00116795
l00116795:
	// succ:  l00116796
l00116796:
	v114 = loc71
	v115 = 0xFF<32>
	v114 = v114 & v115
	loc78 = v114
	v114 = loc78
	v115 = 0xC0<32>
	v114 = v114 & v115
	loc79 = v114
	v114 = loc79
	v115 = 0x80<32>
	v116 = v114 == v115
	loc80 = v116
	v114 = loc80
	v116 = v114 == 0<32>
	branch !v116 l001167BB
	// succ:  l001167B4 l001167BB
l001167B4:
	v114 = 2<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l001167BB:
	v114 = loc44
	v115 = 0xC<32>
	v114 = v114 << v115
	loc81 = v114
	v114 = loc81
	v115 = 0xF000<32>
	v114 = v114 & v115
	loc82 = v114
	v114 = loc69
	v115 = 0xFF<32>
	v114 = v114 & v115
	loc83 = v114
	v114 = loc83
	v115 = 6<32>
	v114 = v114 << v115
	loc84 = v114
	v114 = loc84
	v115 = 0xFC0<32>
	v114 = v114 & v115
	loc85 = v114
	v114 = loc85
	v115 = loc82
	v114 = v114 | v115
	loc86 = v114
	v114 = loc78
	v115 = 0x3F<32>
	v114 = v114 & v115
	loc87 = v114
	v114 = loc86
	v115 = loc87
	v114 = v114 | v115
	loc88 = v114
	v114 = loc88
	v115 = arg6
	v116 = v114 >u v115
	loc89 = v116
	v114 = loc89
	branch !v114 l00116809
	// succ:  l00116802 l00116809
l00116802:
	v114 = 2<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l00116809:
	v114 = loc41
	v115 = loc88
	Mem0[v114:word32] = v115
	v114 = loc39
	v115 = 3<32>
	v114 = v114 + v115
	loc90 = v114
	v114 = arg2
	v115 = loc90
	Mem0[v114:word32] = v115
	goto l001169D7
	// succ:  l001169D7
l00116821:
	v114 = loc43
	v115 = 0xFF<32>
	v114 = v114 & v115
	v115 = 0xF5<32>
	v116 = v114 < v115
	loc91 = v116
	v114 = loc91
	v116 = v114 == 0<32>
	branch !v116 l00116839
	// succ:  l00116832 l00116839
l00116832:
	v114 = 2<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l00116839:
	v114 = loc39
	loc92 = v114
	v114 = loc11
	v115 = loc92
	v114 = v114 - v115
	loc93 = v114
	v114 = loc93
	v115 = 4<32>
	v116 = v114 < v115
	loc94 = v116
	v114 = loc94
	branch !v114 l00116856
	// succ:  l0011684F l00116856
l0011684F:
	v114 = 1<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l00116856:
	v114 = loc39
	v115 = 1<32>
	v114 = v114 + v115
	loc96 = v114
	v114 = loc96
	v124 = Mem0[v114:int8]
	v114 = CONVERT(v124, int8, word32)
	loc97 = v114
	v114 = loc39
	v115 = 2<32>
	v114 = v114 + v115
	loc98 = v114
	v114 = loc98
	v125 = Mem0[v114:int8]
	v114 = CONVERT(v125, int8, word32)
	loc99 = v114
	v114 = loc39
	v115 = 3<32>
	v114 = v114 + v115
	loc100 = v114
	v114 = loc100
	v126 = Mem0[v114:int8]
	v114 = CONVERT(v126, int8, word32)
	loc101 = v114
	// succ:  l00116880
l00116880:
	v114 = loc43
	v115 = 0x18<32>
	v114 = v114 << v115
	v115 = 0x18<32>
	v114 = v114 >> v115
	v115 = 0xFFFFFFF0<32>
	v114 = v114 - v115
	switch (v114) { l0011689B l001168ED l001168ED l001168ED l001168C6 }
	// succ:  l0011689B l001168C6 l001168ED l001168ED l001168ED
l0011689B:
	v114 = loc97
	v115 = 0x70<32>
	v114 = v114 + v115
	v115 = 0x18<32>
	v114 = v114 << v115
	v115 = 0x18<32>
	v114 = v114 >> v115
	loc9 = v114
	v114 = loc9
	v115 = 0xFF<32>
	v114 = v114 & v115
	v115 = 0x30<32>
	v116 = v114 < v115
	loc102 = v116
	v114 = loc102
	v116 = v114 == 0<32>
	branch !v116 l001168C3
	// succ:  l001168BC l001168C3
l001168BC:
	v114 = 2<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l001168C3:
	goto l00116912
	// succ:  l00116912
l001168C5:
	// succ:  l001168C6
l001168C6:
	v114 = loc97
	v115 = 0xFFFFFFF0<32>
	v114 = v114 & v115
	loc103 = v114
	v114 = loc103
	v115 = 0x18<32>
	v114 = v114 << v115
	v115 = 0x18<32>
	v114 = v114 >> v115
	v115 = 0xFFFFFF80<32>
	v116 = v114 == v115
	loc104 = v116
	v114 = loc104
	v116 = v114 == 0<32>
	branch !v116 l001168EA
	// succ:  l001168E3 l001168EA
l001168E3:
	v114 = 2<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l001168EA:
	goto l00116912
	// succ:  l00116912
l001168EC:
	// succ:  l001168ED
l001168ED:
	v114 = loc97
	v115 = 0xFFFFFFC0<32>
	v114 = v114 & v115
	loc105 = v114
	v114 = loc105
	v115 = 0x18<32>
	v114 = v114 << v115
	v115 = 0x18<32>
	v114 = v114 >> v115
	v115 = 0xFFFFFF80<32>
	v116 = v114 == v115
	loc107 = v116
	v114 = loc107
	v116 = v114 == 0<32>
	branch !v116 l00116911
	// succ:  l0011690A l00116911
l0011690A:
	v114 = 2<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l00116911:
	// succ:  l00116911
l00116911:
	// succ:  l00116912
l00116912:
	v114 = loc99
	v115 = 0xFF<32>
	v114 = v114 & v115
	loc108 = v114
	v114 = loc108
	v115 = 0xC0<32>
	v114 = v114 & v115
	loc109 = v114
	v114 = loc109
	v115 = 0x80<32>
	v116 = v114 == v115
	loc110 = v116
	v114 = loc110
	v116 = v114 == 0<32>
	branch !v116 l00116937
	// succ:  l00116930 l00116937
l00116930:
	v114 = 2<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l00116937:
	v114 = loc101
	v115 = 0xFF<32>
	v114 = v114 & v115
	loc111 = v114
	v114 = loc111
	v115 = 0xC0<32>
	v114 = v114 & v115
	loc112 = v114
	v114 = loc112
	v115 = 0x80<32>
	v116 = v114 == v115
	loc113 = v116
	v114 = loc113
	v116 = v114 == 0<32>
	branch !v116 l0011695B
	// succ:  l00116954 l0011695B
l00116954:
	v114 = 2<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l0011695B:
	v114 = loc44
	v115 = 0x12<32>
	v114 = v114 << v115
	loc114 = v114
	v114 = loc114
	v115 = 0x1C0000<32>
	v114 = v114 & v115
	loc115 = v114
	v114 = loc97
	v115 = 0xFF<32>
	v114 = v114 & v115
	loc116 = v114
	v114 = loc116
	v115 = 0xC<32>
	v114 = v114 << v115
	loc13 = v114
	v114 = loc13
	v115 = 0x3F000<32>
	v114 = v114 & v115
	loc14 = v114
	v114 = loc14
	v115 = loc115
	v114 = v114 | v115
	loc15 = v114
	v114 = loc108
	v115 = 6<32>
	v114 = v114 << v115
	loc16 = v114
	v114 = loc16
	v115 = 0xFC0<32>
	v114 = v114 & v115
	loc17 = v114
	v114 = loc15
	v115 = loc17
	v114 = v114 | v115
	loc18 = v114
	v114 = loc111
	v115 = 0x3F<32>
	v114 = v114 & v115
	loc19 = v114
	v114 = loc18
	v115 = loc19
	v114 = v114 | v115
	loc20 = v114
	v114 = loc20
	v115 = arg6
	v116 = v114 >u v115
	loc21 = v116
	v114 = loc21
	branch !v114 l001169C1
	// succ:  l001169BA l001169C1
l001169BA:
	v114 = 2<32>
	loc8 = v114
	goto l001169EF
	// succ:  l001169EF
l001169C1:
	v114 = loc41
	v115 = loc20
	Mem0[v114:word32] = v115
	v114 = loc39
	v115 = 4<32>
	v114 = v114 + v115
	loc22 = v114
	v114 = arg2
	v115 = loc22
	Mem0[v114:word32] = v115
	// succ:  l001169D6
l001169D6:
	// succ:  l001169D7
l001169D7:
	v114 = arg5
	v114 = Mem0[v114:word32]
	loc24 = v114
	v114 = loc24
	v115 = 4<32>
	v114 = v114 + v115
	loc25 = v114
	v114 = arg5
	v115 = loc25
	Mem0[v114:word32] = v115
	goto l00116576
	// succ:  l00116576
l001169EF:
	v114 = loc117
	v115 = 0x28<32>
	v116 = v114 == v115
	branch !v116 l00116A04
	// succ:  l001169F8 l00116A04
l001169F8:
	v114 = loc40
	v115 = 1<32>
	v114 = v114 & v115
	loc26 = v114
	v114 = loc26
	loc8 = v114
	// succ:  l00116A04
l00116A04:
	v114 = loc8
	return v114
	// succ:  fn001164A4_exit
l00116A07:
	return v114
	// succ:  fn001164A4_exit
fn001164A4_exit:


// fn00116A09
// Return size: 0
word32 fn00116A09(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn00116A09_entry:
	// succ:  l00116A09
l00116A09:
	v90 = Mem0[0x00140030<p32>:word32]
	loc94 = v90
	v90 = arg2
	v91 = arg0
	Mem0[v90:word32] = v91
	v90 = arg5
	v91 = arg3
	Mem0[v90:word32] = v91
	v90 = arg7
	v91 = 2<32>
	v90 = v90 & v91
	loc81 = v90
	v90 = loc81
	v91 = 0<32>
	v92 = v90 == v91
	loc91 = v92
	v90 = arg4
	loc10 = v90
	v90 = loc91
	branch !v90 l00116A38
	// succ:  l00116A33 l00116A38
l00116A33:
	v90 = 4<32>
	loc93 = v90
	goto l00116AA7
	// succ:  l00116AA7
l00116A38:
	v90 = arg3
	loc11 = v90
	v90 = loc10
	v91 = loc11
	v90 = v90 - v91
	loc12 = v90
	v90 = loc12
	v91 = 3<32>
	v92 = v90 < v91
	loc13 = v92
	v90 = loc13
	branch !v90 l00116A53
	// succ:  l00116A4E l00116A53
l00116A4E:
	v90 = 1<32>
	loc8 = v90
	goto l00116AA6
	// succ:  l00116AA6
l00116A53:
	v90 = arg3
	v91 = 1<32>
	v90 = v90 + v91
	loc14 = v90
	v90 = arg5
	v91 = loc14
	Mem0[v90:word32] = v91
	v90 = arg3
	v91 = 0xFFFFFFEF<32>
	v93 = SLICE(v91, byte, 0)
	Mem0[v90:byte] = v93
	v90 = arg5
	v90 = Mem0[v90:word32]
	loc15 = v90
	v90 = loc15
	v91 = 1<32>
	v90 = v90 + v91
	loc16 = v90
	v90 = arg5
	v91 = loc16
	Mem0[v90:word32] = v91
	v90 = loc15
	v91 = 0xFFFFFFBB<32>
	v94 = SLICE(v91, byte, 0)
	Mem0[v90:byte] = v94
	v90 = arg5
	v90 = Mem0[v90:word32]
	loc17 = v90
	v90 = loc17
	v91 = 1<32>
	v90 = v90 + v91
	loc18 = v90
	v90 = arg5
	v91 = loc18
	Mem0[v90:word32] = v91
	v90 = loc17
	v91 = 0xFFFFFFBF<32>
	v95 = SLICE(v91, byte, 0)
	Mem0[v90:byte] = v95
	v90 = 4<32>
	loc93 = v90
	// succ:  l00116AA6
l00116AA6:
	// succ:  l00116AA7
l00116AA7:
	v90 = loc93
	v91 = 4<32>
	v92 = v90 == v91
	branch !v92 l00116DB8
	// succ:  l00116AB1 l00116DB8
l00116AB1:
	v90 = arg2
	v90 = Mem0[v90:word32]
	loc9 = v90
	v90 = loc9
	loc20 = v90
	v90 = loc20
	v91 = arg1
	v92 = v90 <u v91
	loc19 = v92
	v90 = loc19
	v92 = v90 == 0<32>
	branch !v92 l00116AD1
	// succ:  l00116ACA l00116AD1
l00116ACA:
	v90 = 0<32>
	loc8 = v90
	goto l00116DB8
	// succ:  l00116DB8
l00116AD1:
	v90 = loc20
	v90 = Mem0[v90:word32]
	loc21 = v90
	v90 = loc21
	v91 = 0xFFFFF800<32>
	v90 = v90 & v91
	loc22 = v90
	v90 = loc22
	v91 = 0xD800<32>
	v92 = v90 == v91
	loc23 = v92
	v90 = loc21
	v91 = arg6
	v92 = v90 >u v91
	loc24 = v92
	v90 = loc24
	v91 = loc23
	v90 = v90 | v91
	loc92 = v90
	v90 = loc92
	branch !v90 l00116B02
	// succ:  l00116AFB l00116B02
l00116AFB:
	v90 = 2<32>
	loc8 = v90
	goto l00116DB8
	// succ:  l00116DB8
l00116B02:
	v90 = loc21
	v91 = 0x80<32>
	v92 = v90 <u v91
	loc25 = v92
	// succ:  l00116B0A
l00116B0A:
	v90 = loc25
	branch !v90 l00116B52
	// succ:  l00116B10 l00116B52
l00116B10:
	v90 = arg5
	v90 = Mem0[v90:word32]
	loc26 = v90
	v90 = loc26
	loc27 = v90
	v90 = loc10
	v91 = loc27
	v90 = v90 - v91
	loc28 = v90
	v90 = loc28
	v91 = 1<32>
	v92 = v90 < v91
	loc29 = v92
	v90 = loc29
	branch !v90 l00116B34
	// succ:  l00116B2D l00116B34
l00116B2D:
	v90 = 1<32>
	loc8 = v90
	goto l00116DB8
	// succ:  l00116DB8
l00116B34:
	v90 = loc21
	v91 = 0xFF<32>
	v90 = v90 & v91
	loc30 = v90
	v90 = loc26
	v91 = 1<32>
	v90 = v90 + v91
	loc31 = v90
	v90 = arg5
	v91 = loc31
	Mem0[v90:word32] = v91
	v90 = loc26
	v91 = loc30
	v96 = SLICE(v91, byte, 0)
	Mem0[v90:byte] = v96
	goto l00116D99
	// succ:  l00116D99
l00116B52:
	v90 = loc21
	v91 = 0x800<32>
	v92 = v90 <u v91
	loc32 = v92
	v90 = loc32
	branch !v90 l00116BE4
	// succ:  l00116B5E l00116BE4
l00116B5E:
	v90 = arg5
	v90 = Mem0[v90:word32]
	loc33 = v90
	v90 = loc33
	loc34 = v90
	v90 = loc10
	v91 = loc34
	v90 = v90 - v91
	loc35 = v90
	v90 = loc35
	v91 = 2<32>
	v92 = v90 < v91
	loc36 = v92
	v90 = loc36
	branch !v90 l00116B82
	// succ:  l00116B7B l00116B82
l00116B7B:
	v90 = 1<32>
	loc8 = v90
	goto l00116DB8
	// succ:  l00116DB8
l00116B82:
	v90 = loc21
	v91 = 6<32>
	v90 = v90 >>u v91
	loc37 = v90
	v90 = loc37
	v91 = 0xC0<32>
	v90 = v90 | v91
	loc38 = v90
	v90 = loc38
	v91 = 0xFF<32>
	v90 = v90 & v91
	loc39 = v90
	v90 = loc33
	v91 = 1<32>
	v90 = v90 + v91
	loc40 = v90
	v90 = arg5
	v91 = loc40
	Mem0[v90:word32] = v91
	v90 = loc33
	v91 = loc39
	v97 = SLICE(v91, byte, 0)
	Mem0[v90:byte] = v97
	v90 = loc21
	v91 = 0x3F<32>
	v90 = v90 & v91
	loc41 = v90
	v90 = loc41
	v91 = 0x80<32>
	v90 = v90 | v91
	loc42 = v90
	v90 = loc42
	v91 = 0xFF<32>
	v90 = v90 & v91
	loc43 = v90
	v90 = arg5
	v90 = Mem0[v90:word32]
	loc44 = v90
	v90 = loc44
	v91 = 1<32>
	v90 = v90 + v91
	loc45 = v90
	v90 = arg5
	v91 = loc45
	Mem0[v90:word32] = v91
	v90 = loc44
	v91 = loc43
	v98 = SLICE(v91, byte, 0)
	Mem0[v90:byte] = v98
	goto l00116D9A
	// succ:  l00116D9A
l00116BE4:
	v90 = loc21
	v91 = 0x10000<32>
	v92 = v90 <u v91
	loc46 = v92
	v90 = arg5
	v90 = Mem0[v90:word32]
	loc47 = v90
	v90 = loc47
	loc48 = v90
	v90 = loc10
	v91 = loc48
	v90 = v90 - v91
	loc49 = v90
	v90 = loc46
	branch !v90 l00116CB1
	// succ:  l00116C03 l00116CB1
l00116C03:
	v90 = loc49
	v91 = 3<32>
	v92 = v90 < v91
	loc50 = v92
	v90 = loc50
	branch !v90 l00116C15
	// succ:  l00116C0E l00116C15
l00116C0E:
	v90 = 1<32>
	loc8 = v90
	goto l00116DB8
	// succ:  l00116DB8
l00116C15:
	v90 = loc21
	v91 = 0xC<32>
	v90 = v90 >>u v91
	loc51 = v90
	v90 = loc51
	v91 = 0xE0<32>
	v90 = v90 | v91
	loc52 = v90
	v90 = loc52
	v91 = 0xFF<32>
	v90 = v90 & v91
	loc53 = v90
	v90 = loc47
	v91 = 1<32>
	v90 = v90 + v91
	loc54 = v90
	v90 = arg5
	v91 = loc54
	Mem0[v90:word32] = v91
	v90 = loc47
	v91 = loc53
	v99 = SLICE(v91, byte, 0)
	Mem0[v90:byte] = v99
	v90 = loc21
	v91 = 6<32>
	v90 = v90 >>u v91
	loc55 = v90
	v90 = loc55
	v91 = 0x3F<32>
	v90 = v90 & v91
	loc56 = v90
	v90 = loc56
	v91 = 0x80<32>
	v90 = v90 | v91
	loc57 = v90
	v90 = loc57
	v91 = 0xFF<32>
	v90 = v90 & v91
	loc58 = v90
	v90 = arg5
	v90 = Mem0[v90:word32]
	loc59 = v90
	v90 = loc59
	v91 = 1<32>
	v90 = v90 + v91
	loc60 = v90
	v90 = arg5
	v91 = loc60
	Mem0[v90:word32] = v91
	v90 = loc59
	v91 = loc58
	v100 = SLICE(v91, byte, 0)
	Mem0[v90:byte] = v100
	v90 = loc21
	v91 = 0x3F<32>
	v90 = v90 & v91
	loc61 = v90
	v90 = loc61
	v91 = 0x80<32>
	v90 = v90 | v91
	loc62 = v90
	v90 = loc62
	v91 = 0xFF<32>
	v90 = v90 & v91
	loc63 = v90
	v90 = arg5
	v90 = Mem0[v90:word32]
	loc64 = v90
	v90 = loc64
	v91 = 1<32>
	v90 = v90 + v91
	loc65 = v90
	v90 = arg5
	v91 = loc65
	Mem0[v90:word32] = v91
	v90 = loc64
	v91 = loc63
	v101 = SLICE(v91, byte, 0)
	Mem0[v90:byte] = v101
	goto l00116D9A
	// succ:  l00116D9A
l00116CB1:
	v90 = loc49
	v91 = 4<32>
	v92 = v90 < v91
	loc66 = v92
	v90 = loc66
	branch !v90 l00116CC3
	// succ:  l00116CBC l00116CC3
l00116CBC:
	v90 = 1<32>
	loc8 = v90
	goto l00116DB8
	// succ:  l00116DB8
l00116CC3:
	v90 = loc21
	v91 = 0x12<32>
	v90 = v90 >>u v91
	loc67 = v90
	v90 = loc67
	v91 = 0xF0<32>
	v90 = v90 | v91
	loc68 = v90
	v90 = loc68
	v91 = 0xFF<32>
	v90 = v90 & v91
	loc69 = v90
	v90 = loc47
	v91 = 1<32>
	v90 = v90 + v91
	loc70 = v90
	v90 = arg5
	v91 = loc70
	Mem0[v90:word32] = v91
	v90 = loc47
	v91 = loc69
	v102 = SLICE(v91, byte, 0)
	Mem0[v90:byte] = v102
	v90 = loc21
	v91 = 0xC<32>
	v90 = v90 >>u v91
	loc71 = v90
	v90 = loc71
	v91 = 0x3F<32>
	v90 = v90 & v91
	loc72 = v90
	v90 = loc72
	v91 = 0x80<32>
	v90 = v90 | v91
	loc73 = v90
	v90 = loc73
	v91 = 0xFF<32>
	v90 = v90 & v91
	loc74 = v90
	v90 = arg5
	v90 = Mem0[v90:word32]
	loc75 = v90
	v90 = loc75
	v91 = 1<32>
	v90 = v90 + v91
	loc76 = v90
	v90 = arg5
	v91 = loc76
	Mem0[v90:word32] = v91
	v90 = loc75
	v91 = loc74
	v103 = SLICE(v91, byte, 0)
	Mem0[v90:byte] = v103
	v90 = loc21
	v91 = 6<32>
	v90 = v90 >>u v91
	loc77 = v90
	v90 = loc77
	v91 = 0x3F<32>
	v90 = v90 & v91
	loc78 = v90
	v90 = loc78
	v91 = 0x80<32>
	v90 = v90 | v91
	loc79 = v90
	v90 = loc79
	v91 = 0xFF<32>
	v90 = v90 & v91
	loc80 = v90
	v90 = arg5
	v90 = Mem0[v90:word32]
	loc82 = v90
	v90 = loc82
	v91 = 1<32>
	v90 = v90 + v91
	loc83 = v90
	v90 = arg5
	v91 = loc83
	Mem0[v90:word32] = v91
	v90 = loc82
	v91 = loc80
	v104 = SLICE(v91, byte, 0)
	Mem0[v90:byte] = v104
	v90 = loc21
	v91 = 0x3F<32>
	v90 = v90 & v91
	loc84 = v90
	v90 = loc84
	v91 = 0x80<32>
	v90 = v90 | v91
	loc85 = v90
	v90 = loc85
	v91 = 0xFF<32>
	v90 = v90 & v91
	loc86 = v90
	v90 = arg5
	v90 = Mem0[v90:word32]
	loc87 = v90
	v90 = loc87
	v91 = 1<32>
	v90 = v90 + v91
	loc88 = v90
	v90 = arg5
	v91 = loc88
	Mem0[v90:word32] = v91
	v90 = loc87
	v91 = loc86
	v105 = SLICE(v91, byte, 0)
	Mem0[v90:byte] = v105
	goto l00116D9A
	// succ:  l00116D9A
l00116D98:
	// succ:  l00116D99
l00116D99:
	// succ:  l00116D9A
l00116D9A:
	v90 = arg2
	v90 = Mem0[v90:word32]
	loc89 = v90
	v90 = loc89
	v91 = 4<32>
	v90 = v90 + v91
	loc90 = v90
	v90 = arg2
	v91 = loc90
	Mem0[v90:word32] = v91
	v90 = loc90
	loc20 = v90
	goto l00116AB1
	// succ:  l00116AB1
l00116DB8:
	// succ:  l00116DB8
l00116DB8:
	v90 = loc8
	return v90
	// succ:  fn00116A09_exit
l00116DBC:
	return v90
	// succ:  fn00116A09_exit
fn00116A09_exit:


// fn00116DBE
// Return size: 0
void fn00116DBE(word32 arg0)
fn00116DBE_entry:
	// succ:  l00116DBE
l00116DBE:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn00116DBE_exit
l00116DCA:
	return
	// succ:  fn00116DBE_exit
fn00116DBE_exit:


// fn00116DCC
// Return size: 0
word32 fn00116DCC(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn00116DCC_entry:
	// succ:  l00116DCC
l00116DCC:
	v5 = Mem0[0x00140030<p32>:word32]
	loc9 = v5
	v5 = arg4
	v6 = arg2
	Mem0[v5:word32] = v6
	v5 = arg7
	v6 = arg5
	Mem0[v5:word32] = v6
	v5 = 3<32>
	return v5
	// succ:  fn00116DCC_exit
l00116DE3:
	return v5
	// succ:  fn00116DCC_exit
fn00116DCC_exit:


// fn00116DE5
// Return size: 0
word32 fn00116DE5(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn00116DE5_entry:
	// succ:  l00116DE5
l00116DE5:
	v5 = Mem0[0x00140030<p32>:word32]
	loc9 = v5
	v5 = arg4
	v6 = arg2
	Mem0[v5:word32] = v6
	v5 = arg7
	v6 = arg5
	Mem0[v5:word32] = v6
	v5 = 3<32>
	return v5
	// succ:  fn00116DE5_exit
l00116DFC:
	return v5
	// succ:  fn00116DE5_exit
fn00116DE5_exit:


// fn00116DFE
// Return size: 0
word32 fn00116DFE(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn00116DFE_entry:
	// succ:  l00116DFE
l00116DFE:
	v5 = Mem0[0x00140030<p32>:word32]
	loc6 = v5
	v5 = arg4
	v6 = arg2
	Mem0[v5:word32] = v6
	v5 = 3<32>
	return v5
	// succ:  fn00116DFE_exit
l00116E0E:
	return v5
	// succ:  fn00116DFE_exit
fn00116DFE_exit:


// fn00116E10
// Return size: 0
word32 fn00116E10(word32 arg0)
fn00116E10_entry:
	// succ:  l00116E10
l00116E10:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = 1<32>
	return v5
	// succ:  fn00116E10_exit
l00116E19:
	return v5
	// succ:  fn00116E10_exit
fn00116E10_exit:


// fn00116E1B
// Return size: 0
word32 fn00116E1B(word32 arg0)
fn00116E1B_entry:
	// succ:  l00116E1B
l00116E1B:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = 1<32>
	return v5
	// succ:  fn00116E1B_exit
l00116E24:
	return v5
	// succ:  fn00116E1B_exit
fn00116E1B_exit:


// fn00116E26
// Return size: 0
word32 fn00116E26(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn00116E26_entry:
	// succ:  l00116E26
l00116E26:
	v10 = Mem0[0x00140030<p32>:word32]
	loc11 = v10
	v10 = arg3
	loc6 = v10
	v10 = arg2
	loc7 = v10
	v10 = loc6
	v11 = loc7
	v10 = v10 - v11
	loc8 = v10
	v10 = loc8
	v11 = arg4
	v12 = v10 <u v11
	loc9 = v12
	v10 = loc9
	branch !v10 l00116E49
	// succ:  l00116E46 l00116E49
l00116E46:
	v10 = loc8
	goto l00116E4B
	// succ:  l00116E4B
l00116E49:
	v10 = arg4
	// succ:  l00116E4B
l00116E4B:
	loc5 = v10
	v10 = loc5
	return v10
	// succ:  fn00116E26_exit
l00116E51:
	return v10
	// succ:  fn00116E26_exit
fn00116E26_exit:


// fn00116E53
// Return size: 0
word32 fn00116E53(word32 arg0)
fn00116E53_entry:
	// succ:  l00116E53
l00116E53:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = 1<32>
	return v5
	// succ:  fn00116E53_exit
l00116E5C:
	return v5
	// succ:  fn00116E53_exit
fn00116E53_exit:


// fn00116E5E
// Return size: 0
word32 fn00116E5E(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn00116E5E_entry:
	// succ:  l00116E5E
l00116E5E:
	v124 = Mem0[0x00140030<p32>:word32]
	loc127 = v124
	v124 = Mem0[0x00140030<p32>:word32]
	v125 = 0x10<32>
	v124 = v124 + v125
	Mem0[0x00140030<p32>:word32] = v124
	v124 = Mem0[0x00140030<p32>:word32]
	v125 = Mem0[0x00140034<p32>:word32]
	v126 = v124 >= v125
	branch !v126 l00116E77
	// succ:  l00116E72 l00116E77
l00116E72:
	v124 = 0x10<32>
	abortStackOverflow(v124)
	// succ:  l00116E77
l00116E77:
	v124 = loc127
	loc102 = v124
	v124 = loc127
	v125 = 8<32>
	v124 = v124 + v125
	loc113 = v124
	v124 = arg2
	loc10 = v124
	// succ:  l00116E88
l00116E88:
	v124 = loc10
	v125 = arg3
	v126 = v124 == v125
	loc25 = v126
	v124 = loc25
	branch !v124 l00116E9C
	// succ:  l00116E95 l00116E9C
l00116E95:
	v124 = arg3
	loc11 = v124
	goto l00116EC2
	// succ:  l00116EC2
l00116E9C:
	v124 = loc10
	v124 = Mem0[v124:word32]
	loc34 = v124
	v124 = loc34
	v125 = 0<32>
	v126 = v124 == v125
	loc35 = v126
	v124 = loc35
	branch !v124 l00116EB5
	// succ:  l00116EAE l00116EB5
l00116EAE:
	v124 = loc10
	loc11 = v124
	goto l00116EC2
	// succ:  l00116EC2
l00116EB5:
	v124 = loc10
	v125 = 4<32>
	v124 = v124 + v125
	loc36 = v124
	v124 = loc36
	loc10 = v124
	goto l00116E77
	// succ:  l00116E77
l00116EC2:
	v124 = arg7
	v125 = arg5
	Mem0[v124:word32] = v125
	v124 = arg4
	v125 = arg2
	Mem0[v124:word32] = v125
	v124 = arg6
	loc37 = v124
	v124 = arg0
	v125 = 8<32>
	v124 = v124 + v125
	loc38 = v124
	v124 = arg2
	loc12 = v124
	v124 = arg5
	loc13 = v124
	v124 = loc11
	loc14 = v124
	// succ:  l00116EEB
l00116EEB:
	v124 = loc12
	v125 = arg3
	v126 = v124 == v125
	loc39 = v126
	v124 = loc13
	v125 = arg6
	v126 = v124 == v125
	loc40 = v126
	v124 = loc40
	v125 = loc39
	v124 = v124 | v125
	loc125 = v124
	v124 = loc125
	branch !v124 l00116F11
	// succ:  l00116F06 l00116F11
l00116F06:
	v124 = loc12
	loc30 = v124
	v124 = 0x35<32>
	loc126 = v124
	goto l001171A0
	// succ:  l001171A0
l00116F11:
	v124 = arg1
	v127 = Mem0[v124:word64]
	loc128 = v127
	v124 = loc102
	v128 = loc128
	Mem0[v124:word64] = v128
	v124 = loc14
	loc41 = v124
	v124 = loc12
	loc42 = v124
	v124 = loc41
	v125 = loc42
	v124 = v124 - v125
	loc43 = v124
	v124 = loc43
	v125 = 2<32>
	v124 = v124 >> v125
	loc44 = v124
	v124 = loc13
	loc45 = v124
	v124 = loc37
	v125 = loc45
	v124 = v124 - v125
	loc46 = v124
	v124 = loc38
	v124 = Mem0[v124:word32]
	loc47 = v124
	v124 = loc47
	v124 = fn000DB419(v124)
	loc48 = v124
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = 0x1B9<32>
	v125 = loc13
	v129 = arg4
	v130 = loc44
	v131 = loc46
	v132 = arg1
	v124 = invoke_iiiiii(v124, v125, v129, v130, v131, v132)
	loc49 = v124
	v124 = Mem0[0x00140048<p32>:word32]
	loc50 = v124
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = loc50
	v125 = 1<32>
	v124 = v124 & v125
	loc51 = v124
	v124 = loc51
	branch !v124 l00116F7F
	// succ:  l00116F78 l00116F7F
l00116F78:
	v124 = 0xB<32>
	loc126 = v124
	goto l001171A0
	// succ:  l001171A0
l00116F7F:
	v124 = loc48
	v125 = 0<32>
	v126 = v124 == v125
	loc52 = v126
	v124 = loc52
	v126 = v124 == 0<32>
	branch !v126 l00116FB2
	// succ:  l00116F8B l00116FB2
l00116F8B:
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = 0x17E<32>
	v125 = loc48
	v124 = invoke_ii(v124, v125)
	v124 = Mem0[0x00140048<p32>:word32]
	loc53 = v124
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = loc53
	v125 = 1<32>
	v124 = v124 & v125
	loc54 = v124
	v124 = loc54
	branch !v124 l00116FB1
	// succ:  l00116FAA l00116FB1
l00116FAA:
	v124 = 0xA<32>
	loc126 = v124
	goto l001171A0
	// succ:  l001171A0
l00116FB1:
	// succ:  l00116FB2
l00116FB2:
	v124 = loc49
	v125 = 0xFFFFFFFF<32>
	v124 = v124 - v125
	switch (v124) { l00116FC4 l00116FD0 }
	// succ:  l00116FC4 l00116FD0
l00116FC4:
	v124 = 0x10<32>
	loc126 = v124
	goto l001171A0
	// succ:  l001171A0
l00116FCF:
	// succ:  l00116FD0
l00116FD0:
	v124 = 1<32>
	loc19 = v124
	v124 = 0x32<32>
	loc126 = v124
	goto l001171A0
	// succ:  l001171A0
l00116FDF:
	// succ:  l00116FE0
l00116FE0:
	// succ:  l00116FE2
l00116FE2:
	v124 = arg7
	v124 = Mem0[v124:word32]
	loc89 = v124
	v124 = loc89
	v125 = loc49
	v124 = v124 + v125
	loc90 = v124
	v124 = arg7
	v125 = loc90
	Mem0[v124:word32] = v125
	v124 = loc90
	v125 = arg6
	v126 = v124 == v125
	loc91 = v126
	v124 = loc91
	branch !v124 l0011700A
	// succ:  l00117003 l0011700A
l00117003:
	v124 = 0x33<32>
	loc126 = v124
	goto l001171A0
	// succ:  l001171A0
l0011700A:
	v124 = loc14
	v125 = arg3
	v126 = v124 == v125
	loc92 = v126
	v124 = loc92
	branch !v124 l00117029
	// succ:  l00117015 l00117029
l00117015:
	v124 = arg4
	v124 = Mem0[v124:word32]
	loc22 = v124
	v124 = arg3
	loc21 = v124
	v124 = loc90
	loc32 = v124
	v124 = loc22
	loc33 = v124
	goto l00117191
	// succ:  l00117191
l00117029:
	v124 = loc38
	v124 = Mem0[v124:word32]
	loc93 = v124
	v124 = loc93
	v124 = fn000DB419(v124)
	loc94 = v124
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = 0x1BA<32>
	v125 = loc113
	v129 = 0<32>
	v130 = arg1
	v124 = invoke_iiii(v124, v125, v129, v130)
	loc95 = v124
	v124 = Mem0[0x00140048<p32>:word32]
	loc96 = v124
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = loc96
	v125 = 1<32>
	v124 = v124 & v125
	loc97 = v124
	v124 = loc97
	branch !v124 l00117062
	// succ:  l0011705B l00117062
l0011705B:
	v124 = 0x24<32>
	loc126 = v124
	goto l001171A0
	// succ:  l001171A0
l00117062:
	v124 = loc94
	v125 = 0<32>
	v126 = v124 == v125
	loc98 = v126
	v124 = loc98
	v126 = v124 == 0<32>
	branch !v126 l00117095
	// succ:  l0011706E l00117095
l0011706E:
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = 0x17E<32>
	v125 = loc94
	v124 = invoke_ii(v124, v125)
	v124 = Mem0[0x00140048<p32>:word32]
	loc99 = v124
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = loc99
	v125 = 1<32>
	v124 = v124 & v125
	loc100 = v124
	v124 = loc100
	branch !v124 l00117094
	// succ:  l0011708D l00117094
l0011708D:
	v124 = 0x23<32>
	loc126 = v124
	goto l001171A0
	// succ:  l001171A0
l00117094:
	// succ:  l00117095
l00117095:
	v124 = loc95
	v125 = 0xFFFFFFFF<32>
	v126 = v124 == v125
	loc111 = v126
	v124 = loc111
	branch !v124 l001170AB
	// succ:  l001170A0 l001170AB
l001170A0:
	v124 = 2<32>
	loc15 = v124
	v124 = 0x31<32>
	loc126 = v124
	goto l001171A0
	// succ:  l001171A0
l001170AB:
	v124 = arg7
	v124 = Mem0[v124:word32]
	loc112 = v124
	v124 = loc37
	v125 = loc112
	v124 = v124 - v125
	loc114 = v124
	v124 = loc95
	v125 = loc114
	v126 = v124 >u v125
	loc115 = v126
	v124 = loc115
	branch !v124 l001170CF
	// succ:  l001170C4 l001170CF
l001170C4:
	v124 = 1<32>
	loc15 = v124
	v124 = 0x31<32>
	loc126 = v124
	goto l001171A0
	// succ:  l001171A0
l001170CF:
	v124 = loc113
	loc8 = v124
	v124 = loc95
	loc9 = v124
	// succ:  l001170D7
l001170D7:
	v124 = loc9
	v125 = 0<32>
	v126 = v124 == v125
	loc116 = v126
	v124 = loc116
	branch !v124 l001170EA
	// succ:  l001170E7 l001170EA
l001170E7:
	goto l00117125
	// succ:  l00117125
l001170EA:
	v124 = loc8
	v125 = 1<32>
	v124 = v124 + v125
	loc119 = v124
	v124 = loc8
	v133 = Mem0[v124:int8]
	v124 = CONVERT(v133, int8, word32)
	loc120 = v124
	v124 = arg7
	v124 = Mem0[v124:word32]
	loc121 = v124
	v124 = loc121
	v125 = 1<32>
	v124 = v124 + v125
	loc122 = v124
	v124 = arg7
	v125 = loc122
	Mem0[v124:word32] = v125
	v124 = loc121
	v125 = loc120
	v134 = SLICE(v125, byte, 0)
	Mem0[v124:byte] = v134
	v124 = loc9
	v125 = 0xFFFFFFFF<32>
	v124 = v124 + v125
	loc123 = v124
	v124 = loc119
	loc8 = v124
	v124 = loc123
	loc9 = v124
	goto l001170D7
	// succ:  l001170D7
l00117125:
	v124 = arg4
	v124 = Mem0[v124:word32]
	loc117 = v124
	v124 = loc117
	v125 = 4<32>
	v124 = v124 + v125
	loc118 = v124
	v124 = arg4
	v125 = loc118
	Mem0[v124:word32] = v125
	v124 = loc118
	loc17 = v124
	// succ:  l00117142
l00117142:
	v124 = loc17
	v125 = arg3
	v126 = v124 == v125
	loc26 = v126
	v124 = loc26
	branch !v124 l00117156
	// succ:  l0011714F l00117156
l0011714F:
	v124 = arg3
	loc18 = v124
	goto l0011717C
	// succ:  l0011717C
l00117156:
	v124 = loc17
	v124 = Mem0[v124:word32]
	loc27 = v124
	v124 = loc27
	v125 = 0<32>
	v126 = v124 == v125
	loc28 = v126
	v124 = loc28
	branch !v124 l0011716F
	// succ:  l00117168 l0011716F
l00117168:
	v124 = loc17
	loc18 = v124
	goto l0011717C
	// succ:  l0011717C
l0011716F:
	v124 = loc17
	v125 = 4<32>
	v124 = v124 + v125
	loc29 = v124
	v124 = loc29
	loc17 = v124
	goto l00117125
	// succ:  l00117125
l0011717C:
	v124 = arg7
	v124 = Mem0[v124:word32]
	loc23 = v124
	v124 = loc18
	loc21 = v124
	v124 = loc23
	loc32 = v124
	v124 = loc118
	loc33 = v124
	// succ:  l00117191
l00117191:
	v124 = loc33
	loc12 = v124
	v124 = loc32
	loc13 = v124
	v124 = loc21
	loc14 = v124
	goto l00116EC2
	// succ:  l00116EC2
l001171A0:
	v124 = loc126
	v125 = 0xA<32>
	v126 = v124 == v125
	branch !v126 l001171BA
	// succ:  l001171AB l001171BA
l001171AB:
	v124 = 0<32>
	v124 = ___cxa_find_matching_catch_3(v124)
	loc55 = v124
	v124 = Mem0[0x00140094<p32>:word32]
	loc56 = v124
	v124 = loc55
	fn000D0E65(v124)
	goto l001173FB
	// succ:  l001173FB
l001171BA:
	v124 = loc126
	v125 = 0xB<32>
	v126 = v124 == v125
	branch !v126 l00117209
	// succ:  l001171C1 l00117209
l001171C1:
	v124 = ___cxa_find_matching_catch_2()
	loc57 = v124
	v124 = Mem0[0x00140094<p32>:word32]
	loc58 = v124
	v124 = loc48
	v125 = 0<32>
	v126 = v124 == v125
	loc59 = v126
	v124 = loc59
	v126 = v124 == 0<32>
	branch !v126 l00117204
	// succ:  l001171D5 l00117204
l001171D5:
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = 0x17E<32>
	v125 = loc48
	v124 = invoke_ii(v124, v125)
	v124 = Mem0[0x00140048<p32>:word32]
	loc60 = v124
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = loc60
	v125 = 1<32>
	v124 = v124 & v125
	loc61 = v124
	v124 = loc61
	branch !v124 l00117203
	// succ:  l001171F4 l00117203
l001171F4:
	v124 = 0<32>
	v124 = ___cxa_find_matching_catch_3(v124)
	loc62 = v124
	v124 = Mem0[0x00140094<p32>:word32]
	loc63 = v124
	v124 = loc62
	fn000D0E65(v124)
	// succ:  l00117203
l00117203:
	// succ:  l00117204
l00117204:
	v124 = loc57
	___resumeException(v124)
	goto l001173FA
	// succ:  l001173FA
l00117209:
	v124 = loc126
	v125 = 0x10<32>
	v126 = v124 == v125
	branch !v126 l0011736A
	// succ:  l00117210 l0011736A
l00117210:
	v124 = arg7
	v125 = loc13
	Mem0[v124:word32] = v125
	v124 = loc12
	loc16 = v124
	v124 = loc13
	loc69 = v124
	// succ:  l00117221
l00117221:
	v124 = arg4
	v124 = Mem0[v124:word32]
	loc64 = v124
	v124 = loc16
	v125 = loc64
	v126 = v124 == v125
	loc65 = v126
	v124 = loc65
	branch !v124 l0011723C
	// succ:  l00117235 l0011723C
l00117235:
	v124 = 0x1C<32>
	loc126 = v124
	goto l001172E7
	// succ:  l001172E7
l0011723C:
	v124 = loc16
	v124 = Mem0[v124:word32]
	loc66 = v124
	v124 = loc38
	v124 = Mem0[v124:word32]
	loc67 = v124
	v124 = loc67
	v124 = fn000DB419(v124)
	loc68 = v124
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = 0x1BA<32>
	v125 = loc69
	v129 = loc66
	v130 = loc102
	v124 = invoke_iiii(v124, v125, v129, v130)
	loc70 = v124
	v124 = Mem0[0x00140048<p32>:word32]
	loc71 = v124
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = loc71
	v125 = 1<32>
	v124 = v124 & v125
	loc72 = v124
	v124 = loc72
	branch !v124 l0011727C
	// succ:  l00117275 l0011727C
l00117275:
	v124 = 0x16<32>
	loc126 = v124
	goto l001172E7
	// succ:  l001172E7
l0011727C:
	v124 = loc68
	v125 = 0<32>
	v126 = v124 == v125
	loc73 = v126
	v124 = loc73
	v126 = v124 == 0<32>
	branch !v126 l001172AF
	// succ:  l00117288 l001172AF
l00117288:
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = 0x17E<32>
	v125 = loc68
	v124 = invoke_ii(v124, v125)
	v124 = Mem0[0x00140048<p32>:word32]
	loc74 = v124
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = loc74
	v125 = 1<32>
	v124 = v124 & v125
	loc75 = v124
	v124 = loc75
	branch !v124 l001172AE
	// succ:  l001172A7 l001172AE
l001172A7:
	v124 = 0x15<32>
	loc126 = v124
	goto l001172E7
	// succ:  l001172E7
l001172AE:
	// succ:  l001172AF
l001172AF:
	v124 = loc70
	v125 = 0xFFFFFFFF<32>
	v126 = v124 == v125
	loc85 = v126
	v124 = loc85
	branch !v124 l001172C1
	// succ:  l001172BA l001172C1
l001172BA:
	v124 = 0x1C<32>
	loc126 = v124
	goto l001172E7
	// succ:  l001172E7
l001172C1:
	v124 = arg7
	v124 = Mem0[v124:word32]
	loc86 = v124
	v124 = loc86
	v125 = loc70
	v124 = v124 + v125
	loc87 = v124
	v124 = arg7
	v125 = loc87
	Mem0[v124:word32] = v125
	v124 = loc16
	v125 = 4<32>
	v124 = v124 + v125
	loc88 = v124
	v124 = loc88
	loc16 = v124
	v124 = loc87
	loc69 = v124
	goto l00117210
	// succ:  l00117210
l001172E7:
	v124 = loc126
	v125 = 0x15<32>
	v126 = v124 == v125
	branch !v126 l001172FF
	// succ:  l001172F0 l001172FF
l001172F0:
	v124 = 0<32>
	v124 = ___cxa_find_matching_catch_3(v124)
	loc76 = v124
	v124 = Mem0[0x00140094<p32>:word32]
	loc77 = v124
	v124 = loc76
	fn000D0E65(v124)
	goto l00117368
	// succ:  l00117368
l001172FF:
	v124 = loc126
	v125 = 0x16<32>
	v126 = v124 == v125
	branch !v126 l0011734E
	// succ:  l00117306 l0011734E
l00117306:
	v124 = ___cxa_find_matching_catch_2()
	loc78 = v124
	v124 = Mem0[0x00140094<p32>:word32]
	loc79 = v124
	v124 = loc68
	v125 = 0<32>
	v126 = v124 == v125
	loc80 = v126
	v124 = loc80
	v126 = v124 == 0<32>
	branch !v126 l00117349
	// succ:  l0011731A l00117349
l0011731A:
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = 0x17E<32>
	v125 = loc68
	v124 = invoke_ii(v124, v125)
	v124 = Mem0[0x00140048<p32>:word32]
	loc81 = v124
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = loc81
	v125 = 1<32>
	v124 = v124 & v125
	loc82 = v124
	v124 = loc82
	branch !v124 l00117348
	// succ:  l00117339 l00117348
l00117339:
	v124 = 0<32>
	v124 = ___cxa_find_matching_catch_3(v124)
	loc83 = v124
	v124 = Mem0[0x00140094<p32>:word32]
	loc84 = v124
	v124 = loc83
	fn000D0E65(v124)
	// succ:  l00117348
l00117348:
	// succ:  l00117349
l00117349:
	v124 = loc78
	___resumeException(v124)
	goto l00117367
	// succ:  l00117367
l0011734E:
	v124 = loc126
	v125 = 0x1C<32>
	v126 = v124 == v125
	branch !v126 l00117367
	// succ:  l00117355 l00117367
l00117355:
	v124 = arg4
	v125 = loc16
	Mem0[v124:word32] = v125
	v124 = 2<32>
	loc19 = v124
	v124 = 0x32<32>
	loc126 = v124
	goto l001173FC
	// succ:  l001173FC
l00117367:
	// succ:  l00117367
l00117367:
	// succ:  l00117368
l00117368:
	goto l001173F9
	// succ:  l001173F9
l0011736A:
	v124 = loc126
	v125 = 0x23<32>
	v126 = v124 == v125
	branch !v126 l00117380
	// succ:  l00117371 l00117380
l00117371:
	v124 = 0<32>
	v124 = ___cxa_find_matching_catch_3(v124)
	loc101 = v124
	v124 = Mem0[0x00140094<p32>:word32]
	loc103 = v124
	v124 = loc101
	fn000D0E65(v124)
	goto l001173F8
	// succ:  l001173F8
l00117380:
	v124 = loc126
	v125 = 0x24<32>
	v126 = v124 == v125
	branch !v126 l001173CF
	// succ:  l00117387 l001173CF
l00117387:
	v124 = ___cxa_find_matching_catch_2()
	loc104 = v124
	v124 = Mem0[0x00140094<p32>:word32]
	loc105 = v124
	v124 = loc94
	v125 = 0<32>
	v126 = v124 == v125
	loc106 = v126
	v124 = loc106
	v126 = v124 == 0<32>
	branch !v126 l001173CA
	// succ:  l0011739B l001173CA
l0011739B:
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = 0x17E<32>
	v125 = loc94
	v124 = invoke_ii(v124, v125)
	v124 = Mem0[0x00140048<p32>:word32]
	loc107 = v124
	v124 = 0<32>
	Mem0[0x00140048<p32>:word32] = v124
	v124 = loc107
	v125 = 1<32>
	v124 = v124 & v125
	loc108 = v124
	v124 = loc108
	branch !v124 l001173C9
	// succ:  l001173BA l001173C9
l001173BA:
	v124 = 0<32>
	v124 = ___cxa_find_matching_catch_3(v124)
	loc109 = v124
	v124 = Mem0[0x00140094<p32>:word32]
	loc110 = v124
	v124 = loc109
	fn000D0E65(v124)
	// succ:  l001173C9
l001173C9:
	// succ:  l001173CA
l001173CA:
	v124 = loc104
	___resumeException(v124)
	goto l001173F7
	// succ:  l001173F7
l001173CF:
	v124 = loc126
	v125 = 0x31<32>
	v126 = v124 == v125
	branch !v126 l001173DF
	// succ:  l001173D6 l001173DF
l001173D6:
	v124 = loc15
	loc19 = v124
	v124 = 0x32<32>
	loc126 = v124
	goto l001173F6
	// succ:  l001173F6
l001173DF:
	v124 = loc126
	v125 = 0x33<32>
	v126 = v124 == v125
	branch !v126 l001173F6
	// succ:  l001173E6 l001173F6
l001173E6:
	v124 = arg4
	v124 = Mem0[v124:word32]
	loc24 = v124
	v124 = loc24
	loc30 = v124
	v124 = 0x35<32>
	loc126 = v124
	// succ:  l001173F6
l001173F6:
	// succ:  l001173F6
l001173F6:
	// succ:  l001173F7
l001173F7:
	// succ:  l001173F8
l001173F8:
	// succ:  l001173F9
l001173F9:
	// succ:  l001173FA
l001173FA:
	// succ:  l001173FB
l001173FB:
	// succ:  l001173FC
l001173FC:
	v124 = loc126
	v125 = 0x32<32>
	v126 = v124 == v125
	branch !v126 l00117409
	// succ:  l00117404 l00117409
l00117404:
	v124 = loc19
	loc20 = v124
	goto l00117423
	// succ:  l00117423
l00117409:
	v124 = loc126
	v125 = 0x35<32>
	v126 = v124 == v125
	branch !v126 l00117423
	// succ:  l00117410 l00117423
l00117410:
	v124 = loc30
	v125 = arg3
	v126 = v124 != v125
	loc124 = v126
	v124 = loc124
	v125 = 1<32>
	v124 = v124 & v125
	loc31 = v124
	v124 = loc31
	loc20 = v124
	// succ:  l00117423
l00117423:
	// succ:  l00117423
l00117423:
	v124 = loc127
	Mem0[0x00140030<p32>:word32] = v124
	v124 = loc20
	return v124
	// succ:  fn00116E5E_exit
l0011742B:
	return v124
	// succ:  fn00116E5E_exit
fn00116E5E_exit:


// fn0011742D
// Return size: 0
word32 fn0011742D(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn0011742D_entry:
	// succ:  l0011742D
l0011742D:
	v118 = Mem0[0x00140030<p32>:word32]
	loc121 = v118
	v118 = Mem0[0x00140030<p32>:word32]
	v119 = 0x10<32>
	v118 = v118 + v119
	Mem0[0x00140030<p32>:word32] = v118
	v118 = Mem0[0x00140030<p32>:word32]
	v119 = Mem0[0x00140034<p32>:word32]
	v120 = v118 >= v119
	branch !v120 l00117446
	// succ:  l00117441 l00117446
l00117441:
	v118 = 0x10<32>
	abortStackOverflow(v118)
	// succ:  l00117446
l00117446:
	v118 = loc121
	loc94 = v118
	v118 = arg2
	loc8 = v118
	// succ:  l00117450
l00117450:
	v118 = loc8
	v119 = arg3
	v120 = v118 == v119
	loc105 = v120
	v118 = loc105
	branch !v118 l00117464
	// succ:  l0011745D l00117464
l0011745D:
	v118 = arg3
	loc9 = v118
	goto l00117490
	// succ:  l00117490
l00117464:
	v118 = loc8
	v121 = Mem0[v118:int8]
	v118 = CONVERT(v121, int8, word32)
	loc23 = v118
	v118 = loc23
	v119 = 0x18<32>
	v118 = v118 << v119
	v119 = 0x18<32>
	v118 = v118 >> v119
	v119 = 0<32>
	v120 = v118 == v119
	loc26 = v120
	v118 = loc26
	branch !v118 l00117483
	// succ:  l0011747C l00117483
l0011747C:
	v118 = loc8
	loc9 = v118
	goto l00117490
	// succ:  l00117490
l00117483:
	v118 = loc8
	v119 = 1<32>
	v118 = v118 + v119
	loc27 = v118
	v118 = loc27
	loc8 = v118
	goto l00117446
	// succ:  l00117446
l00117490:
	v118 = arg7
	v119 = arg5
	Mem0[v118:word32] = v119
	v118 = arg4
	v119 = arg2
	Mem0[v118:word32] = v119
	v118 = arg6
	loc28 = v118
	v118 = arg0
	v119 = 8<32>
	v118 = v118 + v119
	loc29 = v118
	v118 = arg2
	loc10 = v118
	v118 = arg5
	loc11 = v118
	v118 = loc9
	loc12 = v118
	// succ:  l001174B9
l001174B9:
	v118 = loc10
	v119 = arg3
	v120 = v118 == v119
	loc30 = v120
	v118 = loc11
	v119 = arg6
	v120 = v118 == v119
	loc31 = v120
	v118 = loc31
	v119 = loc30
	v118 = v118 | v119
	loc118 = v118
	v118 = loc118
	branch !v118 l001174DF
	// succ:  l001174D4 l001174DF
l001174D4:
	v118 = loc10
	loc114 = v118
	v118 = 0x33<32>
	loc120 = v118
	goto l001176FA
	// succ:  l001176FA
l001174DF:
	v118 = arg1
	v122 = Mem0[v118:word64]
	loc122 = v122
	v118 = loc94
	v123 = loc122
	Mem0[v118:word64] = v123
	v118 = loc12
	loc32 = v118
	v118 = loc10
	loc33 = v118
	v118 = loc32
	v119 = loc33
	v118 = v118 - v119
	loc34 = v118
	v118 = loc11
	loc35 = v118
	v118 = loc28
	v119 = loc35
	v118 = v118 - v119
	loc36 = v118
	v118 = loc36
	v119 = 2<32>
	v118 = v118 >> v119
	loc37 = v118
	v118 = loc29
	v118 = Mem0[v118:word32]
	loc38 = v118
	v118 = loc38
	v118 = fn000DB419(v118)
	loc39 = v118
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = 0x1BB<32>
	v119 = loc11
	v124 = arg4
	v125 = loc34
	v126 = loc37
	v127 = arg1
	v118 = invoke_iiiiii(v118, v119, v124, v125, v126, v127)
	loc40 = v118
	v118 = Mem0[0x00140048<p32>:word32]
	loc41 = v118
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = loc41
	v119 = 1<32>
	v118 = v118 & v119
	loc42 = v118
	v118 = loc42
	branch !v118 l0011754B
	// succ:  l00117544 l0011754B
l00117544:
	v118 = 0xB<32>
	loc120 = v118
	goto l001176FA
	// succ:  l001176FA
l0011754B:
	v118 = loc39
	v119 = 0<32>
	v120 = v118 == v119
	loc43 = v120
	v118 = loc43
	v120 = v118 == 0<32>
	branch !v120 l0011757E
	// succ:  l00117557 l0011757E
l00117557:
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = 0x17E<32>
	v119 = loc39
	v118 = invoke_ii(v118, v119)
	v118 = Mem0[0x00140048<p32>:word32]
	loc44 = v118
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = loc44
	v119 = 1<32>
	v118 = v118 & v119
	loc45 = v118
	v118 = loc45
	branch !v118 l0011757D
	// succ:  l00117576 l0011757D
l00117576:
	v118 = 0xA<32>
	loc120 = v118
	goto l001176FA
	// succ:  l001176FA
l0011757D:
	// succ:  l0011757E
l0011757E:
	v118 = loc40
	v119 = 0xFFFFFFFF<32>
	v120 = v118 == v119
	loc55 = v120
	v118 = loc55
	branch !v118 l00117598
	// succ:  l00117589 l00117598
l00117589:
	v118 = loc10
	loc14 = v118
	v118 = loc11
	loc119 = v118
	v118 = 0x10<32>
	loc120 = v118
	goto l001176FA
	// succ:  l001176FA
l00117598:
	v118 = arg7
	v118 = Mem0[v118:word32]
	loc82 = v118
	v118 = loc82
	v119 = loc40
	v124 = 2<32>
	v119 = v119 << v124
	v118 = v118 + v119
	loc83 = v118
	v118 = arg7
	v119 = loc83
	Mem0[v118:word32] = v119
	v118 = loc83
	v119 = arg6
	v120 = v118 == v119
	loc84 = v120
	v118 = loc84
	branch !v118 l001175C2
	// succ:  l001175BB l001175C2
l001175BB:
	v118 = 0x30<32>
	loc120 = v118
	goto l001176FA
	// succ:  l001176FA
l001175C2:
	v118 = loc12
	v119 = arg3
	v120 = v118 == v119
	loc85 = v120
	v118 = arg4
	v118 = Mem0[v118:word32]
	loc20 = v118
	v118 = loc85
	branch !v118 l001175E1
	// succ:  l001175D4 l001175E1
l001175D4:
	v118 = arg3
	loc19 = v118
	v118 = loc83
	loc24 = v118
	v118 = loc20
	loc25 = v118
	goto l001176EB
	// succ:  l001176EB
l001175E1:
	v118 = loc29
	v118 = Mem0[v118:word32]
	loc86 = v118
	v118 = loc86
	v118 = fn000DB419(v118)
	loc87 = v118
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = 0x1BC<32>
	v119 = loc83
	v124 = loc20
	v125 = 1<32>
	v126 = arg1
	v118 = invoke_iiiii(v118, v119, v124, v125, v126)
	loc88 = v118
	v118 = Mem0[0x00140048<p32>:word32]
	loc89 = v118
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = loc89
	v119 = 1<32>
	v118 = v118 & v119
	loc90 = v118
	v118 = loc90
	branch !v118 l0011761C
	// succ:  l00117615 l0011761C
l00117615:
	v118 = 0x26<32>
	loc120 = v118
	goto l001176FA
	// succ:  l001176FA
l0011761C:
	v118 = loc87
	v119 = 0<32>
	v120 = v118 == v119
	loc91 = v120
	v118 = loc91
	v120 = v118 == 0<32>
	branch !v120 l0011764F
	// succ:  l00117628 l0011764F
l00117628:
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = 0x17E<32>
	v119 = loc87
	v118 = invoke_ii(v118, v119)
	v118 = Mem0[0x00140048<p32>:word32]
	loc92 = v118
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = loc92
	v119 = 1<32>
	v118 = v118 & v119
	loc93 = v118
	v118 = loc93
	branch !v118 l0011764E
	// succ:  l00117647 l0011764E
l00117647:
	v118 = 0x25<32>
	loc120 = v118
	goto l001176FA
	// succ:  l001176FA
l0011764E:
	// succ:  l0011764F
l0011764F:
	v118 = loc88
	v119 = 0<32>
	v120 = v118 == v119
	loc104 = v120
	v118 = loc104
	v120 = v118 == 0<32>
	branch !v120 l00117666
	// succ:  l0011765B l00117666
l0011765B:
	v118 = 2<32>
	loc13 = v118
	v118 = 0x2F<32>
	loc120 = v118
	goto l001176FA
	// succ:  l001176FA
l00117666:
	v118 = arg7
	v118 = Mem0[v118:word32]
	loc106 = v118
	v118 = loc106
	v119 = 4<32>
	v118 = v118 + v119
	loc107 = v118
	v118 = arg7
	v119 = loc107
	Mem0[v118:word32] = v119
	v118 = arg4
	v118 = Mem0[v118:word32]
	loc108 = v118
	v118 = loc108
	v119 = 1<32>
	v118 = v118 + v119
	loc109 = v118
	v118 = arg4
	v119 = loc109
	Mem0[v118:word32] = v119
	v118 = loc109
	loc15 = v118
	// succ:  l00117696
l00117696:
	v118 = loc15
	v119 = arg3
	v120 = v118 == v119
	loc110 = v120
	v118 = loc110
	branch !v118 l001176AA
	// succ:  l001176A3 l001176AA
l001176A3:
	v118 = arg3
	loc16 = v118
	goto l001176D6
	// succ:  l001176D6
l001176AA:
	v118 = loc15
	v128 = Mem0[v118:int8]
	v118 = CONVERT(v128, int8, word32)
	loc111 = v118
	v118 = loc111
	v119 = 0x18<32>
	v118 = v118 << v119
	v119 = 0x18<32>
	v118 = v118 >> v119
	v119 = 0<32>
	v120 = v118 == v119
	loc112 = v120
	v118 = loc112
	branch !v118 l001176C9
	// succ:  l001176C2 l001176C9
l001176C2:
	v118 = loc15
	loc16 = v118
	goto l001176D6
	// succ:  l001176D6
l001176C9:
	v118 = loc15
	v119 = 1<32>
	v118 = v118 + v119
	loc113 = v118
	v118 = loc113
	loc15 = v118
	goto l00117666
	// succ:  l00117666
l001176D6:
	v118 = arg7
	v118 = Mem0[v118:word32]
	loc21 = v118
	v118 = loc16
	loc19 = v118
	v118 = loc21
	loc24 = v118
	v118 = loc109
	loc25 = v118
	// succ:  l001176EB
l001176EB:
	v118 = loc25
	loc10 = v118
	v118 = loc24
	loc11 = v118
	v118 = loc19
	loc12 = v118
	goto l00117490
	// succ:  l00117490
l001176FA:
	v118 = loc120
	v119 = 0xA<32>
	v120 = v118 == v119
	branch !v120 l00117714
	// succ:  l00117705 l00117714
l00117705:
	v118 = 0<32>
	v118 = ___cxa_find_matching_catch_3(v118)
	loc46 = v118
	v118 = Mem0[0x00140094<p32>:word32]
	loc47 = v118
	v118 = loc46
	fn000D0E65(v118)
	goto l001179BA
	// succ:  l001179BA
l00117714:
	v118 = loc120
	v119 = 0xB<32>
	v120 = v118 == v119
	branch !v120 l00117763
	// succ:  l0011771B l00117763
l0011771B:
	v118 = ___cxa_find_matching_catch_2()
	loc48 = v118
	v118 = Mem0[0x00140094<p32>:word32]
	loc49 = v118
	v118 = loc39
	v119 = 0<32>
	v120 = v118 == v119
	loc50 = v120
	v118 = loc50
	v120 = v118 == 0<32>
	branch !v120 l0011775E
	// succ:  l0011772F l0011775E
l0011772F:
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = 0x17E<32>
	v119 = loc39
	v118 = invoke_ii(v118, v119)
	v118 = Mem0[0x00140048<p32>:word32]
	loc51 = v118
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = loc51
	v119 = 1<32>
	v118 = v118 & v119
	loc52 = v118
	v118 = loc52
	branch !v118 l0011775D
	// succ:  l0011774E l0011775D
l0011774E:
	v118 = 0<32>
	v118 = ___cxa_find_matching_catch_3(v118)
	loc53 = v118
	v118 = Mem0[0x00140094<p32>:word32]
	loc54 = v118
	v118 = loc53
	fn000D0E65(v118)
	// succ:  l0011775D
l0011775D:
	// succ:  l0011775E
l0011775E:
	v118 = loc48
	___resumeException(v118)
	goto l001179B9
	// succ:  l001179B9
l00117763:
	v118 = loc120
	v119 = 0x10<32>
	v120 = v118 == v119
	branch !v120 l0011793A
	// succ:  l0011776A l0011793A
l0011776A:
	v118 = 0<32>
	loc120 = v118
	v118 = arg7
	v119 = loc119
	Mem0[v118:word32] = v119
	v118 = arg4
	v118 = Mem0[v118:word32]
	loc56 = v118
	v118 = loc14
	v119 = loc56
	v120 = v118 == v119
	loc57 = v120
	v118 = loc57
	branch !v118 l00117792
	// succ:  l0011778B l00117792
l0011778B:
	v118 = 0x1F<32>
	loc120 = v118
	goto l00117875
	// succ:  l00117875
l00117792:
	v118 = loc14
	loc58 = v118
	v118 = loc32
	v119 = loc58
	v118 = v118 - v119
	loc59 = v118
	v118 = loc29
	v118 = Mem0[v118:word32]
	loc60 = v118
	v118 = loc60
	v118 = fn000DB419(v118)
	loc61 = v118
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = 0x1BC<32>
	v119 = loc119
	v124 = loc14
	v125 = loc59
	v126 = loc94
	v118 = invoke_iiiii(v118, v119, v124, v125, v126)
	loc62 = v118
	v118 = Mem0[0x00140048<p32>:word32]
	loc63 = v118
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = loc63
	v119 = 1<32>
	v118 = v118 & v119
	loc64 = v118
	v118 = loc64
	branch !v118 l001177D8
	// succ:  l001177D1 l001177D8
l001177D1:
	v118 = 0x15<32>
	loc120 = v118
	goto l00117875
	// succ:  l00117875
l001177D8:
	v118 = loc61
	v119 = 0<32>
	v120 = v118 == v119
	loc65 = v120
	v118 = loc65
	v120 = v118 == 0<32>
	branch !v120 l0011780B
	// succ:  l001177E4 l0011780B
l001177E4:
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = 0x17E<32>
	v119 = loc61
	v118 = invoke_ii(v118, v119)
	v118 = Mem0[0x00140048<p32>:word32]
	loc66 = v118
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = loc66
	v119 = 1<32>
	v118 = v118 & v119
	loc67 = v118
	v118 = loc67
	branch !v118 l0011780A
	// succ:  l00117803 l0011780A
l00117803:
	v118 = 0x14<32>
	loc120 = v118
	goto l00117875
	// succ:  l00117875
l0011780A:
	// succ:  l0011780B
l0011780B:
	v118 = loc62
	v119 = 0xFFFFFFFE<32>
	v118 = v118 - v119
	switch (v118) { l0011782C l00117820 l00117838 }
	// succ:  l00117820 l0011782C l00117838
l00117820:
	v118 = 0x1B<32>
	loc120 = v118
	goto l00117875
	// succ:  l00117875
l0011782B:
	// succ:  l0011782C
l0011782C:
	v118 = 0x1C<32>
	loc120 = v118
	goto l00117875
	// succ:  l00117875
l00117837:
	// succ:  l00117838
l00117838:
	v118 = loc14
	v119 = 1<32>
	v118 = v118 + v119
	loc77 = v118
	v118 = loc77
	loc18 = v118
	goto l00117858
	// succ:  l00117858
l00117848:
	// succ:  l00117849
l00117849:
	v118 = loc14
	v119 = loc62
	v118 = v118 + v119
	loc78 = v118
	v118 = loc78
	loc18 = v118
	// succ:  l00117857
l00117857:
	// succ:  l00117858
l00117858:
	v118 = arg7
	v118 = Mem0[v118:word32]
	loc79 = v118
	v118 = loc79
	v119 = 4<32>
	v118 = v118 + v119
	loc80 = v118
	v118 = loc18
	loc14 = v118
	v118 = loc80
	loc119 = v118
	v118 = 0x10<32>
	loc120 = v118
	goto l0011776A
	// succ:  l0011776A
l00117875:
	v118 = loc120
	v119 = 0x14<32>
	v120 = v118 == v119
	branch !v120 l0011788D
	// succ:  l0011787E l0011788D
l0011787E:
	v118 = 0<32>
	v118 = ___cxa_find_matching_catch_3(v118)
	loc68 = v118
	v118 = Mem0[0x00140094<p32>:word32]
	loc69 = v118
	v118 = loc68
	fn000D0E65(v118)
	goto l00117938
	// succ:  l00117938
l0011788D:
	v118 = loc120
	v119 = 0x15<32>
	v120 = v118 == v119
	branch !v120 l001178DC
	// succ:  l00117894 l001178DC
l00117894:
	v118 = ___cxa_find_matching_catch_2()
	loc70 = v118
	v118 = Mem0[0x00140094<p32>:word32]
	loc71 = v118
	v118 = loc61
	v119 = 0<32>
	v120 = v118 == v119
	loc72 = v120
	v118 = loc72
	v120 = v118 == 0<32>
	branch !v120 l001178D7
	// succ:  l001178A8 l001178D7
l001178A8:
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = 0x17E<32>
	v119 = loc61
	v118 = invoke_ii(v118, v119)
	v118 = Mem0[0x00140048<p32>:word32]
	loc73 = v118
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = loc73
	v119 = 1<32>
	v118 = v118 & v119
	loc74 = v118
	v118 = loc74
	branch !v118 l001178D6
	// succ:  l001178C7 l001178D6
l001178C7:
	v118 = 0<32>
	v118 = ___cxa_find_matching_catch_3(v118)
	loc75 = v118
	v118 = Mem0[0x00140094<p32>:word32]
	loc76 = v118
	v118 = loc75
	fn000D0E65(v118)
	// succ:  l001178D6
l001178D6:
	// succ:  l001178D7
l001178D7:
	v118 = loc70
	___resumeException(v118)
	goto l00117937
	// succ:  l00117937
l001178DC:
	v118 = loc120
	v119 = 0x1B<32>
	v120 = v118 == v119
	branch !v120 l001178F5
	// succ:  l001178E3 l001178F5
l001178E3:
	v118 = arg4
	v119 = loc14
	Mem0[v118:word32] = v119
	v118 = 2<32>
	loc13 = v118
	v118 = 0x2F<32>
	loc120 = v118
	goto l001179BB
	// succ:  l001179BB
l001178F5:
	v118 = loc120
	v119 = 0x1C<32>
	v120 = v118 == v119
	branch !v120 l0011790E
	// succ:  l001178FC l0011790E
l001178FC:
	v118 = arg4
	v119 = loc14
	Mem0[v118:word32] = v119
	v118 = 1<32>
	loc13 = v118
	v118 = 0x2F<32>
	loc120 = v118
	goto l001179BB
	// succ:  l001179BB
l0011790E:
	v118 = loc120
	v119 = 0x1F<32>
	v120 = v118 == v119
	branch !v120 l00117935
	// succ:  l00117915 l00117935
l00117915:
	v118 = arg4
	v119 = loc14
	Mem0[v118:word32] = v119
	v118 = loc14
	v119 = arg3
	v120 = v118 != v119
	loc117 = v120
	v118 = loc117
	v119 = 1<32>
	v118 = v118 & v119
	loc81 = v118
	v118 = loc81
	loc13 = v118
	v118 = 0x2F<32>
	loc120 = v118
	goto l001179BB
	// succ:  l001179BB
l00117935:
	// succ:  l00117935
l00117935:
	// succ:  l00117936
l00117936:
	// succ:  l00117937
l00117937:
	// succ:  l00117938
l00117938:
	goto l001179B8
	// succ:  l001179B8
l0011793A:
	v118 = loc120
	v119 = 0x25<32>
	v120 = v118 == v119
	branch !v120 l00117950
	// succ:  l00117941 l00117950
l00117941:
	v118 = 0<32>
	v118 = ___cxa_find_matching_catch_3(v118)
	loc95 = v118
	v118 = Mem0[0x00140094<p32>:word32]
	loc96 = v118
	v118 = loc95
	fn000D0E65(v118)
	goto l001179B7
	// succ:  l001179B7
l00117950:
	v118 = loc120
	v119 = 0x26<32>
	v120 = v118 == v119
	branch !v120 l0011799F
	// succ:  l00117957 l0011799F
l00117957:
	v118 = ___cxa_find_matching_catch_2()
	loc97 = v118
	v118 = Mem0[0x00140094<p32>:word32]
	loc98 = v118
	v118 = loc87
	v119 = 0<32>
	v120 = v118 == v119
	loc99 = v120
	v118 = loc99
	v120 = v118 == 0<32>
	branch !v120 l0011799A
	// succ:  l0011796B l0011799A
l0011796B:
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = 0x17E<32>
	v119 = loc87
	v118 = invoke_ii(v118, v119)
	v118 = Mem0[0x00140048<p32>:word32]
	loc100 = v118
	v118 = 0<32>
	Mem0[0x00140048<p32>:word32] = v118
	v118 = loc100
	v119 = 1<32>
	v118 = v118 & v119
	loc101 = v118
	v118 = loc101
	branch !v118 l00117999
	// succ:  l0011798A l00117999
l0011798A:
	v118 = 0<32>
	v118 = ___cxa_find_matching_catch_3(v118)
	loc102 = v118
	v118 = Mem0[0x00140094<p32>:word32]
	loc103 = v118
	v118 = loc102
	fn000D0E65(v118)
	// succ:  l00117999
l00117999:
	// succ:  l0011799A
l0011799A:
	v118 = loc97
	___resumeException(v118)
	goto l001179B6
	// succ:  l001179B6
l0011799F:
	v118 = loc120
	v119 = 0x30<32>
	v120 = v118 == v119
	branch !v120 l001179B6
	// succ:  l001179A6 l001179B6
l001179A6:
	v118 = arg4
	v118 = Mem0[v118:word32]
	loc22 = v118
	v118 = loc22
	loc114 = v118
	v118 = 0x33<32>
	loc120 = v118
	// succ:  l001179B6
l001179B6:
	// succ:  l001179B6
l001179B6:
	// succ:  l001179B7
l001179B7:
	// succ:  l001179B8
l001179B8:
	// succ:  l001179B9
l001179B9:
	// succ:  l001179BA
l001179BA:
	// succ:  l001179BB
l001179BB:
	v118 = loc120
	v119 = 0x2F<32>
	v120 = v118 == v119
	branch !v120 l001179C8
	// succ:  l001179C3 l001179C8
l001179C3:
	v118 = loc13
	loc17 = v118
	goto l001179E2
	// succ:  l001179E2
l001179C8:
	v118 = loc120
	v119 = 0x33<32>
	v120 = v118 == v119
	branch !v120 l001179E2
	// succ:  l001179CF l001179E2
l001179CF:
	v118 = loc114
	v119 = arg3
	v120 = v118 != v119
	loc116 = v120
	v118 = loc116
	v119 = 1<32>
	v118 = v118 & v119
	loc115 = v118
	v118 = loc115
	loc17 = v118
	// succ:  l001179E2
l001179E2:
	// succ:  l001179E2
l001179E2:
	v118 = loc121
	Mem0[0x00140030<p32>:word32] = v118
	v118 = loc17
	return v118
	// succ:  fn0011742D_exit
l001179EA:
	return v118
	// succ:  fn0011742D_exit
fn0011742D_exit:


// fn001179EC
// Return size: 0
word32 fn001179EC(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn001179EC_entry:
	// succ:  l001179EC
l001179EC:
	v38 = Mem0[0x00140030<p32>:word32]
	loc39 = v38
	v38 = Mem0[0x00140030<p32>:word32]
	v39 = 0x10<32>
	v38 = v38 + v39
	Mem0[0x00140030<p32>:word32] = v38
	v38 = Mem0[0x00140030<p32>:word32]
	v39 = Mem0[0x00140034<p32>:word32]
	v40 = v38 >= v39
	branch !v40 l00117A05
	// succ:  l00117A00 l00117A05
l00117A00:
	v38 = 0x10<32>
	abortStackOverflow(v38)
	// succ:  l00117A05
l00117A05:
	v38 = loc39
	loc33 = v38
	v38 = arg4
	v39 = arg2
	Mem0[v38:word32] = v39
	v38 = arg0
	v39 = 8<32>
	v38 = v38 + v39
	loc34 = v38
	v38 = loc34
	v38 = Mem0[v38:word32]
	loc35 = v38
	v38 = loc35
	v38 = fn000DB419(v38)
	loc36 = v38
	v38 = 0<32>
	Mem0[0x00140048<p32>:word32] = v38
	v38 = 0x1BA<32>
	v39 = loc33
	v41 = 0<32>
	v42 = arg1
	v38 = invoke_iiii(v38, v39, v41, v42)
	loc37 = v38
	v38 = Mem0[0x00140048<p32>:word32]
	loc8 = v38
	v38 = 0<32>
	Mem0[0x00140048<p32>:word32] = v38
	v38 = loc8
	v39 = 1<32>
	v38 = v38 & v39
	loc9 = v38
	v38 = loc9
	branch !v38 l00117A91
	// succ:  l00117A49 l00117A91
l00117A49:
	v38 = ___cxa_find_matching_catch_2()
	loc15 = v38
	v38 = Mem0[0x00140094<p32>:word32]
	loc16 = v38
	v38 = loc36
	v39 = 0<32>
	v40 = v38 == v39
	loc17 = v40
	v38 = loc17
	v40 = v38 == 0<32>
	branch !v40 l00117A8C
	// succ:  l00117A5D l00117A8C
l00117A5D:
	v38 = 0<32>
	Mem0[0x00140048<p32>:word32] = v38
	v38 = 0x17E<32>
	v39 = loc36
	v38 = invoke_ii(v38, v39)
	v38 = Mem0[0x00140048<p32>:word32]
	loc18 = v38
	v38 = 0<32>
	Mem0[0x00140048<p32>:word32] = v38
	v38 = loc18
	v39 = 1<32>
	v38 = v38 & v39
	loc19 = v38
	v38 = loc19
	branch !v38 l00117A8B
	// succ:  l00117A7C l00117A8B
l00117A7C:
	v38 = 0<32>
	v38 = ___cxa_find_matching_catch_3(v38)
	loc20 = v38
	v38 = Mem0[0x00140094<p32>:word32]
	loc21 = v38
	v38 = loc20
	fn000D0E65(v38)
	// succ:  l00117A8B
l00117A8B:
	// succ:  l00117A8C
l00117A8C:
	v38 = loc15
	___resumeException(v38)
	// succ:  l00117A91
l00117A91:
	v38 = loc36
	v39 = 0<32>
	v40 = v38 == v39
	loc10 = v40
	v38 = loc10
	v40 = v38 == 0<32>
	branch !v40 l00117ACC
	// succ:  l00117A9D l00117ACC
l00117A9D:
	v38 = 0<32>
	Mem0[0x00140048<p32>:word32] = v38
	v38 = 0x17E<32>
	v39 = loc36
	v38 = invoke_ii(v38, v39)
	v38 = Mem0[0x00140048<p32>:word32]
	loc11 = v38
	v38 = 0<32>
	Mem0[0x00140048<p32>:word32] = v38
	v38 = loc11
	v39 = 1<32>
	v38 = v38 & v39
	loc12 = v38
	v38 = loc12
	branch !v38 l00117ACB
	// succ:  l00117ABC l00117ACB
l00117ABC:
	v38 = 0<32>
	v38 = ___cxa_find_matching_catch_3(v38)
	loc13 = v38
	v38 = Mem0[0x00140094<p32>:word32]
	loc14 = v38
	v38 = loc13
	fn000D0E65(v38)
	// succ:  l00117ACB
l00117ACB:
	// succ:  l00117ACC
l00117ACC:
	v38 = loc37
	v39 = 0xFFFFFFFF<32>
	v38 = v38 - v39
	switch (v38) { l00117AE2 l00117AE0 }
	// succ:  l00117AE0 l00117AE2
l00117AE0:
	// succ:  l00117AE2
l00117AE2:
	v38 = 2<32>
	loc7 = v38
	goto l00117B72
	// succ:  l00117B72
l00117AEB:
	// succ:  l00117AEC
l00117AEC:
	v38 = loc37
	v39 = 0xFFFFFFFF<32>
	v38 = v38 + v39
	loc22 = v38
	v38 = arg4
	v38 = Mem0[v38:word32]
	loc23 = v38
	v38 = arg3
	loc24 = v38
	v38 = loc24
	v39 = loc23
	v38 = v38 - v39
	loc25 = v38
	v38 = loc22
	v39 = loc25
	v40 = v38 >u v39
	loc26 = v40
	v38 = loc26
	branch !v38 l00117B18
	// succ:  l00117B13 l00117B18
l00117B13:
	v38 = 1<32>
	loc7 = v38
	goto l00117B70
	// succ:  l00117B70
l00117B18:
	v38 = loc33
	loc5 = v38
	v38 = loc22
	loc6 = v38
	v38 = loc6
	v39 = 0<32>
	v40 = v38 == v39
	loc27 = v40
	v38 = loc27
	branch !v38 l00117B34
	// succ:  l00117B2D l00117B34
l00117B2D:
	v38 = 0<32>
	loc7 = v38
	goto l00117B73
	// succ:  l00117B73
l00117B34:
	v38 = loc5
	v39 = 1<32>
	v38 = v38 + v39
	loc28 = v38
	v38 = loc5
	v43 = Mem0[v38:int8]
	v38 = CONVERT(v43, int8, word32)
	loc29 = v38
	v38 = arg4
	v38 = Mem0[v38:word32]
	loc30 = v38
	v38 = loc30
	v39 = 1<32>
	v38 = v38 + v39
	loc31 = v38
	v38 = arg4
	v39 = loc31
	Mem0[v38:word32] = v39
	v38 = loc30
	v39 = loc29
	v44 = SLICE(v39, byte, 0)
	Mem0[v38:byte] = v44
	v38 = loc6
	v39 = 0xFFFFFFFF<32>
	v38 = v38 + v39
	loc32 = v38
	v38 = loc28
	loc5 = v38
	v38 = loc32
	loc6 = v38
	goto l00117B18
	// succ:  l00117B18
l00117B70:
	// succ:  l00117B71
l00117B71:
	// succ:  l00117B72
l00117B72:
	// succ:  l00117B73
l00117B73:
	v38 = loc39
	Mem0[0x00140030<p32>:word32] = v38
	v38 = loc7
	return v38
	// succ:  fn001179EC_exit
l00117B7B:
	return v38
	// succ:  fn001179EC_exit
fn001179EC_exit:


// fn00117B7D
// Return size: 0
word32 fn00117B7D(word32 arg0)
fn00117B7D_entry:
	// succ:  l00117B7D
l00117B7D:
	v40 = Mem0[0x00140030<p32>:word32]
	loc37 = v40
	v40 = arg0
	v41 = 8<32>
	v40 = v40 + v41
	loc1 = v40
	v40 = loc1
	v40 = Mem0[v40:word32]
	loc12 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = 0x17E<32>
	v41 = loc12
	v40 = invoke_ii(v40, v41)
	loc23 = v40
	v40 = Mem0[0x00140048<p32>:word32]
	loc28 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = loc28
	v41 = 1<32>
	v40 = v40 & v41
	loc29 = v40
	// succ:  l00117BAD
l00117BAD:
	v40 = loc29
	branch !v40 l00117BB8
	// succ:  l00117BB3 l00117BB8
l00117BB3:
	v40 = 0x10<32>
	loc36 = v40
	goto l00117D00
	// succ:  l00117D00
l00117BB8:
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = 0x1BD<32>
	v41 = 0<32>
	v42 = 0<32>
	v43 = 4<32>
	v40 = invoke_iiii(v40, v41, v42, v43)
	loc30 = v40
	v40 = Mem0[0x00140048<p32>:word32]
	loc31 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = loc31
	v41 = 1<32>
	v40 = v40 & v41
	loc32 = v40
	v40 = loc32
	branch !v40 l00117C2E
	// succ:  l00117BDC l00117C2E
l00117BDC:
	v40 = 0<32>
	v40 = ___cxa_find_matching_catch_3(v40)
	loc6 = v40
	v40 = Mem0[0x00140094<p32>:word32]
	loc7 = v40
	v40 = loc23
	v41 = 0<32>
	v44 = v40 == v41
	loc8 = v44
	v40 = loc8
	branch !v40 l00117BF8
	// succ:  l00117BF1 l00117BF8
l00117BF1:
	v40 = loc6
	loc34 = v40
	goto l00117D01
	// succ:  l00117D01
l00117BF8:
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = 0x17E<32>
	v41 = loc23
	v40 = invoke_ii(v40, v41)
	v40 = Mem0[0x00140048<p32>:word32]
	loc9 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = loc9
	v41 = 1<32>
	v40 = v40 & v41
	loc10 = v40
	v40 = loc10
	v44 = v40 == 0<32>
	branch !v44 l00117C1F
	// succ:  l00117C18 l00117C1F
l00117C18:
	v40 = loc6
	loc34 = v40
	goto l00117D01
	// succ:  l00117D01
l00117C1F:
	v40 = 0<32>
	v40 = ___cxa_find_matching_catch_3(v40)
	loc11 = v40
	v40 = Mem0[0x00140094<p32>:word32]
	loc13 = v40
	v40 = loc11
	fn000D0E65(v40)
	// succ:  l00117C2E
l00117C2E:
	v40 = loc23
	v41 = 0<32>
	v44 = v40 == v41
	loc33 = v44
	v40 = loc33
	v44 = v40 == 0<32>
	branch !v44 l00117C69
	// succ:  l00117C3A l00117C69
l00117C3A:
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = 0x17E<32>
	v41 = loc23
	v40 = invoke_ii(v40, v41)
	v40 = Mem0[0x00140048<p32>:word32]
	loc2 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = loc2
	v41 = 1<32>
	v40 = v40 & v41
	loc3 = v40
	v40 = loc3
	branch !v40 l00117C68
	// succ:  l00117C59 l00117C68
l00117C59:
	v40 = 0<32>
	v40 = ___cxa_find_matching_catch_3(v40)
	loc4 = v40
	v40 = Mem0[0x00140094<p32>:word32]
	loc5 = v40
	v40 = loc4
	fn000D0E65(v40)
	// succ:  l00117C68
l00117C68:
	// succ:  l00117C69
l00117C69:
	v40 = loc30
	v41 = 0<32>
	v44 = v40 == v41
	loc14 = v44
	v40 = loc14
	branch !v40 l00117CF8
	// succ:  l00117C74 l00117CF8
l00117C74:
	v40 = loc1
	v40 = Mem0[v40:word32]
	loc15 = v40
	v40 = loc15
	v41 = 0<32>
	v44 = v40 == v41
	loc16 = v44
	v40 = loc16
	branch !v40 l00117C8B
	// succ:  l00117C86 l00117C8B
l00117C86:
	v40 = 1<32>
	loc35 = v40
	goto l00117CF6
	// succ:  l00117CF6
l00117C8B:
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = 0x17E<32>
	v41 = loc15
	v40 = invoke_ii(v40, v41)
	loc17 = v40
	v40 = Mem0[0x00140048<p32>:word32]
	loc18 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = loc18
	v41 = 1<32>
	v40 = v40 & v41
	loc19 = v40
	v40 = loc19
	branch !v40 l00117CB2
	// succ:  l00117CAB l00117CB2
l00117CAB:
	v40 = 0x10<32>
	loc36 = v40
	goto l00117D01
	// succ:  l00117D01
l00117CB2:
	v40 = loc17
	v41 = 0<32>
	v44 = v40 == v41
	loc20 = v44
	v40 = loc20
	branch !v40 l00117CC2
	// succ:  l00117CBD l00117CC2
l00117CBD:
	v40 = 0<32>
	loc35 = v40
	goto l00117CF5
	// succ:  l00117CF5
l00117CC2:
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = 0x17E<32>
	v41 = loc17
	v40 = invoke_ii(v40, v41)
	v40 = Mem0[0x00140048<p32>:word32]
	loc21 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = loc21
	v41 = 1<32>
	v40 = v40 & v41
	loc22 = v40
	v40 = loc22
	branch !v40 l00117CF0
	// succ:  l00117CE1 l00117CF0
l00117CE1:
	v40 = 0<32>
	v40 = ___cxa_find_matching_catch_3(v40)
	loc24 = v40
	v40 = Mem0[0x00140094<p32>:word32]
	loc25 = v40
	v40 = loc24
	fn000D0E65(v40)
	goto l00117CF4
	// succ:  l00117CF4
l00117CF0:
	v40 = 0<32>
	loc35 = v40
	// succ:  l00117CF4
l00117CF4:
	// succ:  l00117CF5
l00117CF5:
	// succ:  l00117CF6
l00117CF6:
	goto l00117CFC
	// succ:  l00117CFC
l00117CF8:
	v40 = 0xFFFFFFFF<32>
	loc35 = v40
	// succ:  l00117CFC
l00117CFC:
	v40 = loc35
	return v40
	// succ:  fn00117B7D_exit
l00117D00:
	// succ:  l00117D01
l00117D01:
	v40 = loc36
	v41 = 0x10<32>
	v44 = v40 == v41
	branch !v44 l00117D18
	// succ:  l00117D09 l00117D18
l00117D09:
	v40 = 0<32>
	v40 = ___cxa_find_matching_catch_3(v40)
	loc26 = v40
	v40 = Mem0[0x00140094<p32>:word32]
	loc27 = v40
	v40 = loc26
	loc34 = v40
	// succ:  l00117D18
l00117D18:
	v40 = loc34
	fn000D0E65(v40)
	v40 = 0<32>
	return v40
	// succ:  fn00117B7D_exit
l00117D1F:
	return v40
	// succ:  fn00117B7D_exit
fn00117B7D_exit:


// fn00117D21
// Return size: 0
word32 fn00117D21(word32 arg0)
fn00117D21_entry:
	// succ:  l00117D21
l00117D21:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = 0<32>
	return v5
	// succ:  fn00117D21_exit
l00117D2A:
	return v5
	// succ:  fn00117D21_exit
fn00117D21_exit:


// fn00117D2C
// Return size: 0
word32 fn00117D2C(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn00117D2C_entry:
	// succ:  l00117D2C
l00117D2C:
	v38 = Mem0[0x00140030<p32>:word32]
	loc39 = v38
	v38 = arg3
	loc32 = v38
	v38 = arg0
	v39 = 8<32>
	v38 = v38 + v39
	loc33 = v38
	v38 = 0<32>
	loc5 = v38
	v38 = 0<32>
	loc6 = v38
	v38 = arg2
	loc7 = v38
	// succ:  l00117D4B
l00117D4B:
	v38 = loc5
	v39 = arg4
	v40 = v38 >=u v39
	loc34 = v40
	v38 = loc7
	v39 = arg3
	v40 = v38 == v39
	loc35 = v40
	v38 = loc35
	v39 = loc34
	v38 = v38 | v39
	loc37 = v38
	v38 = loc37
	branch !v38 l00117D6D
	// succ:  l00117D66 l00117D6D
l00117D66:
	v38 = 0xF<32>
	loc38 = v38
	goto l00117E4C
	// succ:  l00117E4C
l00117D6D:
	v38 = loc7
	loc36 = v38
	v38 = loc32
	v39 = loc36
	v38 = v38 - v39
	loc11 = v38
	v38 = loc33
	v38 = Mem0[v38:word32]
	loc12 = v38
	v38 = loc12
	v38 = fn000DB419(v38)
	loc13 = v38
	v38 = 0<32>
	Mem0[0x00140048<p32>:word32] = v38
	v38 = 0x1BE<32>
	v39 = loc7
	v41 = loc11
	v42 = arg1
	v38 = invoke_iiii(v38, v39, v41, v42)
	loc14 = v38
	v38 = Mem0[0x00140048<p32>:word32]
	loc15 = v38
	v38 = 0<32>
	Mem0[0x00140048<p32>:word32] = v38
	v38 = loc15
	v39 = 1<32>
	v38 = v38 & v39
	loc16 = v38
	v38 = loc16
	branch !v38 l00117DB1
	// succ:  l00117DAA l00117DB1
l00117DAA:
	v38 = 7<32>
	loc38 = v38
	goto l00117E4C
	// succ:  l00117E4C
l00117DB1:
	v38 = loc13
	v39 = 0<32>
	v40 = v38 == v39
	loc17 = v40
	v38 = loc17
	v40 = v38 == 0<32>
	branch !v40 l00117DE4
	// succ:  l00117DBD l00117DE4
l00117DBD:
	v38 = 0<32>
	Mem0[0x00140048<p32>:word32] = v38
	v38 = 0x17E<32>
	v39 = loc13
	v38 = invoke_ii(v38, v39)
	v38 = Mem0[0x00140048<p32>:word32]
	loc18 = v38
	v38 = 0<32>
	Mem0[0x00140048<p32>:word32] = v38
	v38 = loc18
	v39 = 1<32>
	v38 = v38 & v39
	loc19 = v38
	v38 = loc19
	branch !v38 l00117DE3
	// succ:  l00117DDC l00117DE3
l00117DDC:
	v38 = 6<32>
	loc38 = v38
	goto l00117E4C
	// succ:  l00117E4C
l00117DE3:
	// succ:  l00117DE4
l00117DE4:
	v38 = loc14
	v39 = 0xFFFFFFFE<32>
	v38 = v38 - v39
	switch (v38) { l00117DF9 l00117DFB l00117E07 }
	// succ:  l00117DF9 l00117DFB l00117E07
l00117DF9:
	// succ:  l00117DFB
l00117DFB:
	v38 = 0xF<32>
	loc38 = v38
	goto l00117E4C
	// succ:  l00117E4C
l00117E06:
	// succ:  l00117E07
l00117E07:
	v38 = loc7
	v39 = 1<32>
	v38 = v38 + v39
	loc29 = v38
	v38 = loc29
	loc9 = v38
	v38 = 1<32>
	loc10 = v38
	goto l00117E2F
	// succ:  l00117E2F
l00117E1B:
	// succ:  l00117E1C
l00117E1C:
	v38 = loc7
	v39 = loc14
	v38 = v38 + v39
	loc30 = v38
	v38 = loc30
	loc9 = v38
	v38 = loc14
	loc10 = v38
	// succ:  l00117E2E
l00117E2E:
	// succ:  l00117E2F
l00117E2F:
	v38 = loc10
	v39 = loc6
	v38 = v38 + v39
	loc8 = v38
	v38 = loc5
	v39 = 1<32>
	v38 = v38 + v39
	loc31 = v38
	v38 = loc31
	loc5 = v38
	v38 = loc8
	loc6 = v38
	v38 = loc9
	loc7 = v38
	goto l00117D2C
	// succ:  l00117D2C
l00117E4C:
	v38 = loc38
	v39 = 6<32>
	v40 = v38 == v39
	branch !v40 l00117E64
	// succ:  l00117E55 l00117E64
l00117E55:
	v38 = 0<32>
	v38 = ___cxa_find_matching_catch_3(v38)
	loc20 = v38
	v38 = Mem0[0x00140094<p32>:word32]
	loc21 = v38
	v38 = loc20
	fn000D0E65(v38)
	goto l00117EBF
	// succ:  l00117EBF
l00117E64:
	v38 = loc38
	v39 = 7<32>
	v40 = v38 == v39
	branch !v40 l00117EB3
	// succ:  l00117E6B l00117EB3
l00117E6B:
	v38 = ___cxa_find_matching_catch_2()
	loc22 = v38
	v38 = Mem0[0x00140094<p32>:word32]
	loc23 = v38
	v38 = loc13
	v39 = 0<32>
	v40 = v38 == v39
	loc24 = v40
	v38 = loc24
	v40 = v38 == 0<32>
	branch !v40 l00117EAE
	// succ:  l00117E7F l00117EAE
l00117E7F:
	v38 = 0<32>
	Mem0[0x00140048<p32>:word32] = v38
	v38 = 0x17E<32>
	v39 = loc13
	v38 = invoke_ii(v38, v39)
	v38 = Mem0[0x00140048<p32>:word32]
	loc25 = v38
	v38 = 0<32>
	Mem0[0x00140048<p32>:word32] = v38
	v38 = loc25
	v39 = 1<32>
	v38 = v38 & v39
	loc26 = v38
	v38 = loc26
	branch !v38 l00117EAD
	// succ:  l00117E9E l00117EAD
l00117E9E:
	v38 = 0<32>
	v38 = ___cxa_find_matching_catch_3(v38)
	loc27 = v38
	v38 = Mem0[0x00140094<p32>:word32]
	loc28 = v38
	v38 = loc27
	fn000D0E65(v38)
	// succ:  l00117EAD
l00117EAD:
	// succ:  l00117EAE
l00117EAE:
	v38 = loc22
	___resumeException(v38)
	goto l00117EBE
	// succ:  l00117EBE
l00117EB3:
	v38 = loc38
	v39 = 0xF<32>
	v40 = v38 == v39
	branch !v40 l00117EBE
	// succ:  l00117EBA l00117EBE
l00117EBA:
	v38 = loc6
	return v38
	// succ:  fn00117D2C_exit
l00117EBE:
	// succ:  l00117EBE
l00117EBE:
	// succ:  l00117EBF
l00117EBF:
	v38 = 0<32>
	return v38
	// succ:  fn00117D2C_exit
l00117EC3:
	return v38
	// succ:  fn00117D2C_exit
fn00117D2C_exit:


// fn00117EC5
// Return size: 0
word32 fn00117EC5(word32 arg0)
fn00117EC5_entry:
	// succ:  l00117EC5
l00117EC5:
	v19 = Mem0[0x00140030<p32>:word32]
	loc16 = v19
	v19 = arg0
	v20 = 8<32>
	v19 = v19 + v20
	loc1 = v19
	v19 = loc1
	v19 = Mem0[v19:word32]
	loc7 = v19
	v19 = loc7
	v20 = 0<32>
	v21 = v19 == v20
	loc8 = v21
	v19 = loc8
	branch !v19 l00117EE9
	// succ:  l00117EE4 l00117EE9
l00117EE4:
	v19 = 1<32>
	loc4 = v19
	goto l00117F5C
	// succ:  l00117F5C
l00117EE9:
	v19 = 0<32>
	Mem0[0x00140048<p32>:word32] = v19
	v19 = 0x17E<32>
	v20 = loc7
	v19 = invoke_ii(v19, v20)
	loc9 = v19
	v19 = Mem0[0x00140048<p32>:word32]
	loc10 = v19
	v19 = 0<32>
	Mem0[0x00140048<p32>:word32] = v19
	v19 = loc10
	v20 = 1<32>
	v19 = v19 & v20
	loc11 = v19
	v19 = loc11
	branch !v19 l00117F18
	// succ:  l00117F09 l00117F18
l00117F09:
	v19 = 0<32>
	v19 = ___cxa_find_matching_catch_3(v19)
	loc5 = v19
	v19 = Mem0[0x00140094<p32>:word32]
	loc6 = v19
	v19 = loc5
	fn000D0E65(v19)
	// succ:  l00117F18
l00117F18:
	v19 = loc9
	v20 = 0<32>
	v21 = v19 == v20
	loc12 = v21
	v19 = loc12
	branch !v19 l00117F28
	// succ:  l00117F23 l00117F28
l00117F23:
	v19 = 4<32>
	loc4 = v19
	goto l00117F5B
	// succ:  l00117F5B
l00117F28:
	v19 = 0<32>
	Mem0[0x00140048<p32>:word32] = v19
	v19 = 0x17E<32>
	v20 = loc9
	v19 = invoke_ii(v19, v20)
	v19 = Mem0[0x00140048<p32>:word32]
	loc13 = v19
	v19 = 0<32>
	Mem0[0x00140048<p32>:word32] = v19
	v19 = loc13
	v20 = 1<32>
	v19 = v19 & v20
	loc14 = v19
	v19 = loc14
	branch !v19 l00117F56
	// succ:  l00117F47 l00117F56
l00117F47:
	v19 = 0<32>
	v19 = ___cxa_find_matching_catch_3(v19)
	loc2 = v19
	v19 = Mem0[0x00140094<p32>:word32]
	loc3 = v19
	v19 = loc2
	fn000D0E65(v19)
	goto l00117F5A
	// succ:  l00117F5A
l00117F56:
	v19 = 4<32>
	loc4 = v19
	// succ:  l00117F5A
l00117F5A:
	// succ:  l00117F5B
l00117F5B:
	// succ:  l00117F5C
l00117F5C:
	v19 = loc4
	return v19
	// succ:  fn00117EC5_exit
l00117F60:
	return v19
	// succ:  fn00117EC5_exit
fn00117EC5_exit:


// fn00117F62
// Return size: 0
void fn00117F62(word32 arg0)
fn00117F62_entry:
	// succ:  l00117F62
l00117F62:
	v16 = Mem0[0x00140030<p32>:word32]
	loc13 = v16
	v16 = arg0
	v17 = 0x2478<32>
	Mem0[v16:word32] = v17
	v16 = arg0
	v17 = 8<32>
	v16 = v16 + v17
	loc1 = v16
	v16 = loc1
	v16 = Mem0[v16:word32]
	loc4 = v16
	v16 = 0<32>
	Mem0[0x00140048<p32>:word32] = v16
	v16 = 0x17B<32>
	v16 = invoke_i(v16)
	loc5 = v16
	v16 = Mem0[0x00140048<p32>:word32]
	loc6 = v16
	v16 = 0<32>
	Mem0[0x00140048<p32>:word32] = v16
	v16 = loc6
	v17 = 1<32>
	v16 = v16 & v17
	loc7 = v16
	// succ:  l00117F99
l00117F99:
	v16 = loc7
	v18 = v16 == 0<32>
	branch !v18 l00117FD7
	// succ:  l00117FA0 l00117FD7
l00117FA0:
	v16 = loc4
	v17 = loc5
	v18 = v16 == v17
	loc8 = v18
	v16 = loc8
	v18 = v16 == 0<32>
	branch !v18 l00117FD5
	// succ:  l00117FAC l00117FD5
l00117FAC:
	v16 = loc1
	v16 = Mem0[v16:word32]
	loc9 = v16
	v16 = 0<32>
	Mem0[0x00140048<p32>:word32] = v16
	v16 = 0x1A1<32>
	v17 = loc9
	invoke_vi(v16, v17)
	v16 = Mem0[0x00140048<p32>:word32]
	loc10 = v16
	v16 = 0<32>
	Mem0[0x00140048<p32>:word32] = v16
	v16 = loc10
	v17 = 1<32>
	v16 = v16 & v17
	loc11 = v16
	v16 = loc11
	branch !v16 l00117FD4
	// succ:  l00117FD1 l00117FD4
l00117FD1:
	goto l00117FD7
	// succ:  l00117FD7
l00117FD4:
	// succ:  l00117FD5
l00117FD5:
	return
	// succ:  fn00117F62_exit
l00117FD7:
	// succ:  l00117FD7
l00117FD7:
	v16 = 0<32>
	v16 = ___cxa_find_matching_catch_3(v16)
	loc2 = v16
	v16 = Mem0[0x00140094<p32>:word32]
	loc3 = v16
	v16 = arg0
	fn00115DAA(v16)
	v16 = loc2
	fn000D0E65(v16)
	// succ:  l00117FEB
l00117FEB:
	return
	// succ:  fn00117F62_exit
fn00117F62_exit:


// fn00117FED
// Return size: 0
void fn00117FED(word32 arg0)
fn00117FED_entry:
	// succ:  l00117FED
l00117FED:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn00117F62(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn00117FED_exit
l00117FFE:
	return
	// succ:  fn00117FED_exit
fn00117FED_exit:


// fn00118000
// Return size: 0
word32 fn00118000(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn00118000_entry:
	// succ:  l00118000
l00118000:
	v10 = Mem0[0x00140030<p32>:word32]
	loc14 = v10
	v10 = Mem0[0x00140030<p32>:word32]
	v11 = 0x10<32>
	v10 = v10 + v11
	Mem0[0x00140030<p32>:word32] = v10
	v10 = Mem0[0x00140030<p32>:word32]
	v11 = Mem0[0x00140034<p32>:word32]
	v12 = v10 >= v11
	branch !v12 l00118019
	// succ:  l00118014 l00118019
l00118014:
	v10 = 0x10<32>
	abortStackOverflow(v10)
	// succ:  l00118019
l00118019:
	v10 = loc14
	v11 = 4<32>
	v10 = v10 + v11
	loc11 = v10
	v10 = loc14
	loc12 = v10
	v10 = loc11
	v11 = arg2
	Mem0[v10:word32] = v11
	v10 = loc12
	v11 = arg5
	Mem0[v10:word32] = v11
	v10 = arg2
	v11 = arg3
	v13 = loc11
	v14 = arg5
	v15 = arg6
	v16 = loc12
	v17 = 0x10FFFF<32>
	v18 = 0<32>
	v10 = fn00118DA0(v10, v11, v13, v14, v15, v16, v17, v18)
	loc8 = v10
	v10 = loc11
	v10 = Mem0[v10:word32]
	loc9 = v10
	v10 = arg4
	v11 = loc9
	Mem0[v10:word32] = v11
	v10 = loc12
	v10 = Mem0[v10:word32]
	loc10 = v10
	v10 = arg7
	v11 = loc10
	Mem0[v10:word32] = v11
	v10 = loc14
	Mem0[0x00140030<p32>:word32] = v10
	v10 = loc8
	return v10
	// succ:  fn00118000_exit
l0011806D:
	return v10
	// succ:  fn00118000_exit
fn00118000_exit:


// fn0011806F
// Return size: 0
word32 fn0011806F(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn0011806F_entry:
	// succ:  l0011806F
l0011806F:
	v10 = Mem0[0x00140030<p32>:word32]
	loc14 = v10
	v10 = Mem0[0x00140030<p32>:word32]
	v11 = 0x10<32>
	v10 = v10 + v11
	Mem0[0x00140030<p32>:word32] = v10
	v10 = Mem0[0x00140030<p32>:word32]
	v11 = Mem0[0x00140034<p32>:word32]
	v12 = v10 >= v11
	branch !v12 l00118088
	// succ:  l00118083 l00118088
l00118083:
	v10 = 0x10<32>
	abortStackOverflow(v10)
	// succ:  l00118088
l00118088:
	v10 = loc14
	v11 = 4<32>
	v10 = v10 + v11
	loc11 = v10
	v10 = loc14
	loc12 = v10
	v10 = loc11
	v11 = arg2
	Mem0[v10:word32] = v11
	v10 = loc12
	v11 = arg5
	Mem0[v10:word32] = v11
	v10 = arg2
	v11 = arg3
	v13 = loc11
	v14 = arg5
	v15 = arg6
	v16 = loc12
	v17 = 0x10FFFF<32>
	v18 = 0<32>
	v10 = fn00118734(v10, v11, v13, v14, v15, v16, v17, v18)
	loc8 = v10
	v10 = loc11
	v10 = Mem0[v10:word32]
	loc9 = v10
	v10 = arg4
	v11 = loc9
	Mem0[v10:word32] = v11
	v10 = loc12
	v10 = Mem0[v10:word32]
	loc10 = v10
	v10 = arg7
	v11 = loc10
	Mem0[v10:word32] = v11
	v10 = loc14
	Mem0[0x00140030<p32>:word32] = v10
	v10 = loc8
	return v10
	// succ:  fn0011806F_exit
l001180DC:
	return v10
	// succ:  fn0011806F_exit
fn0011806F_exit:


// fn001180DE
// Return size: 0
word32 fn001180DE(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn001180DE_entry:
	// succ:  l001180DE
l001180DE:
	v5 = Mem0[0x00140030<p32>:word32]
	loc6 = v5
	v5 = arg4
	v6 = arg2
	Mem0[v5:word32] = v6
	v5 = 3<32>
	return v5
	// succ:  fn001180DE_exit
l001180EE:
	return v5
	// succ:  fn001180DE_exit
fn001180DE_exit:


// fn001180F0
// Return size: 0
word32 fn001180F0(word32 arg0)
fn001180F0_entry:
	// succ:  l001180F0
l001180F0:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = 0<32>
	return v5
	// succ:  fn001180F0_exit
l001180F9:
	return v5
	// succ:  fn001180F0_exit
fn001180F0_exit:


// fn001180FB
// Return size: 0
word32 fn001180FB(word32 arg0)
fn001180FB_entry:
	// succ:  l001180FB
l001180FB:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = 0<32>
	return v5
	// succ:  fn001180FB_exit
l00118104:
	return v5
	// succ:  fn001180FB_exit
fn001180FB_exit:


// fn00118106
// Return size: 0
word32 fn00118106(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn00118106_entry:
	// succ:  l00118106
l00118106:
	v6 = Mem0[0x00140030<p32>:word32]
	loc7 = v6
	v6 = arg2
	v7 = arg3
	v8 = arg4
	v9 = 0x10FFFF<32>
	v10 = 0<32>
	v6 = fn0011812E(v6, v7, v8, v9, v10)
	loc5 = v6
	v6 = loc5
	return v6
	// succ:  fn00118106_exit
l00118121:
	return v6
	// succ:  fn00118106_exit
fn00118106_exit:


// fn00118123
// Return size: 0
word32 fn00118123(word32 arg0)
fn00118123_entry:
	// succ:  l00118123
l00118123:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = 4<32>
	return v5
	// succ:  fn00118123_exit
l0011812C:
	return v5
	// succ:  fn00118123_exit
fn00118123_exit:


// fn0011812E
// Return size: 0
word32 fn0011812E(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn0011812E_entry:
	// succ:  l0011812E
l0011812E:
	v132 = Mem0[0x00140030<p32>:word32]
	loc133 = v132
	v132 = arg4
	v133 = 4<32>
	v132 = v132 & v133
	loc75 = v132
	v132 = loc75
	v133 = 0<32>
	v134 = v132 == v133
	loc86 = v134
	v132 = arg1
	loc12 = v132
	v132 = loc86
	branch !v132 l00118154
	// succ:  l0011814B l00118154
l0011814B:
	v132 = 0<32>
	loc6 = v132
	v132 = arg0
	loc7 = v132
	goto l001181F7
	// succ:  l001181F7
l00118154:
	v132 = arg0
	loc97 = v132
	v132 = loc12
	v133 = loc97
	v132 = v132 - v133
	loc108 = v132
	v132 = loc108
	v133 = 2<32>
	v134 = v132 > v133
	loc119 = v134
	v132 = loc119
	branch !v132 l001181EE
	// succ:  l0011816A l001181EE
l0011816A:
	v132 = arg0
	v135 = Mem0[v132:int8]
	v132 = CONVERT(v135, int8, word32)
	loc13 = v132
	v132 = loc13
	v133 = 0x18<32>
	v132 = v132 << v133
	v133 = 0x18<32>
	v132 = v132 >> v133
	v133 = 0xFFFFFFEF<32>
	v134 = v132 == v133
	loc24 = v134
	v132 = loc24
	branch !v132 l001181E4
	// succ:  l00118182 l001181E4
l00118182:
	v132 = arg0
	v133 = 1<32>
	v132 = v132 + v133
	loc35 = v132
	v132 = loc35
	v136 = Mem0[v132:int8]
	v132 = CONVERT(v136, int8, word32)
	loc38 = v132
	v132 = loc38
	v133 = 0x18<32>
	v132 = v132 << v133
	v133 = 0x18<32>
	v132 = v132 >> v133
	v133 = 0xFFFFFFBB<32>
	v134 = v132 == v133
	loc39 = v134
	v132 = loc39
	branch !v132 l001181DA
	// succ:  l001181A2 l001181DA
l001181A2:
	v132 = arg0
	v133 = 2<32>
	v132 = v132 + v133
	loc40 = v132
	v132 = loc40
	v137 = Mem0[v132:int8]
	v132 = CONVERT(v137, int8, word32)
	loc41 = v132
	v132 = loc41
	v133 = 0x18<32>
	v132 = v132 << v133
	v133 = 0x18<32>
	v132 = v132 >> v133
	v133 = 0xFFFFFFBF<32>
	v134 = v132 == v133
	loc42 = v134
	v132 = arg0
	v133 = 3<32>
	v132 = v132 + v133
	loc43 = v132
	v132 = loc42
	branch !v132 l001181CC
	// succ:  l001181C9 l001181CC
l001181C9:
	v132 = loc43
	goto l001181CE
	// succ:  l001181CE
l001181CC:
	v132 = arg0
	// succ:  l001181CE
l001181CE:
	loc5 = v132
	v132 = 0<32>
	loc6 = v132
	v132 = loc5
	loc7 = v132
	goto l001181E2
	// succ:  l001181E2
l001181DA:
	v132 = 0<32>
	loc6 = v132
	v132 = arg0
	loc7 = v132
	// succ:  l001181E2
l001181E2:
	goto l001181EC
	// succ:  l001181EC
l001181E4:
	v132 = 0<32>
	loc6 = v132
	v132 = arg0
	loc7 = v132
	// succ:  l001181EC
l001181EC:
	goto l001181F6
	// succ:  l001181F6
l001181EE:
	v132 = 0<32>
	loc6 = v132
	v132 = arg0
	loc7 = v132
	// succ:  l001181F6
l001181F6:
	// succ:  l001181F7
l001181F7:
	v132 = loc7
	v133 = arg1
	v134 = v132 <u v133
	loc44 = v134
	v132 = loc6
	v133 = arg2
	v134 = v132 <u v133
	loc45 = v134
	v132 = loc45
	v133 = loc44
	v132 = v132 & v133
	loc130 = v132
	v132 = loc130
	v134 = v132 == 0<32>
	branch !v134 l00118220
	// succ:  l00118218 l00118220
l00118218:
	v132 = 0x27<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l00118220:
	v132 = loc7
	v138 = Mem0[v132:int8]
	v132 = CONVERT(v138, int8, word32)
	loc46 = v132
	v132 = loc46
	v133 = 0xFF<32>
	v132 = v132 & v133
	loc47 = v132
	v132 = loc47
	v133 = arg3
	v134 = v132 >u v133
	loc48 = v134
	v132 = loc48
	branch !v132 l00118242
	// succ:  l0011823A l00118242
l0011823A:
	v132 = 0x27<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l00118242:
	v132 = loc46
	v133 = 0x18<32>
	v132 = v132 << v133
	v133 = 0x18<32>
	v132 = v132 >> v133
	v133 = 0xFFFFFFFF<32>
	v134 = v132 > v133
	loc49 = v134
	// succ:  l0011824F
l0011824F:
	v132 = loc49
	branch !v132 l00118265
	// succ:  l00118255 l00118265
l00118255:
	v132 = loc7
	v133 = 1<32>
	v132 = v132 + v133
	loc50 = v132
	v132 = loc6
	loc8 = v132
	v132 = loc50
	loc9 = v132
	goto l00118668
	// succ:  l00118668
l00118265:
	v132 = loc46
	v133 = 0xFF<32>
	v132 = v132 & v133
	v133 = 0xC2<32>
	v134 = v132 < v133
	loc51 = v134
	v132 = loc51
	branch !v132 l0011827D
	// succ:  l00118275 l0011827D
l00118275:
	v132 = 0x27<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l0011827D:
	v132 = loc46
	v133 = 0xFF<32>
	v132 = v132 & v133
	v133 = 0xE0<32>
	v134 = v132 < v133
	loc52 = v134
	v132 = loc52
	branch !v132 l00118321
	// succ:  l0011828D l00118321
l0011828D:
	v132 = loc7
	loc53 = v132
	v132 = loc12
	v133 = loc53
	v132 = v132 - v133
	loc54 = v132
	v132 = loc54
	v133 = 2<32>
	v134 = v132 < v133
	loc55 = v134
	v132 = loc55
	branch !v132 l001182AB
	// succ:  l001182A3 l001182AB
l001182A3:
	v132 = 0x27<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l001182AB:
	v132 = loc7
	v133 = 1<32>
	v132 = v132 + v133
	loc56 = v132
	v132 = loc56
	v139 = Mem0[v132:int8]
	v132 = CONVERT(v139, int8, word32)
	loc57 = v132
	v132 = loc57
	v133 = 0xFF<32>
	v132 = v132 & v133
	loc58 = v132
	v132 = loc58
	v133 = 0xC0<32>
	v132 = v132 & v133
	loc59 = v132
	v132 = loc59
	v133 = 0x80<32>
	v134 = v132 == v133
	loc60 = v134
	v132 = loc60
	v134 = v132 == 0<32>
	branch !v134 l001182DE
	// succ:  l001182D6 l001182DE
l001182D6:
	v132 = 0x27<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l001182DE:
	v132 = loc47
	v133 = 6<32>
	v132 = v132 << v133
	loc61 = v132
	v132 = loc61
	v133 = 0x7C0<32>
	v132 = v132 & v133
	loc62 = v132
	v132 = loc58
	v133 = 0x3F<32>
	v132 = v132 & v133
	loc63 = v132
	v132 = loc63
	v133 = loc62
	v132 = v132 | v133
	loc64 = v132
	v132 = loc64
	v133 = arg3
	v134 = v132 >u v133
	loc65 = v134
	v132 = loc7
	v133 = 2<32>
	v132 = v132 + v133
	loc66 = v132
	v132 = loc65
	branch !v132 l00118315
	// succ:  l0011830D l00118315
l0011830D:
	v132 = 0x27<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l00118315:
	v132 = loc6
	loc8 = v132
	v132 = loc66
	loc9 = v132
	goto l00118669
	// succ:  l00118669
l0011831F:
	// succ:  l00118321
l00118321:
	v132 = loc46
	v133 = 0xFF<32>
	v132 = v132 & v133
	v133 = 0xF0<32>
	v134 = v132 < v133
	loc67 = v134
	v132 = loc67
	branch !v132 l0011848D
	// succ:  l00118331 l0011848D
l00118331:
	v132 = loc7
	loc68 = v132
	v132 = loc12
	v133 = loc68
	v132 = v132 - v133
	loc69 = v132
	v132 = loc69
	v133 = 3<32>
	v134 = v132 < v133
	loc70 = v134
	v132 = loc70
	branch !v132 l0011834F
	// succ:  l00118347 l0011834F
l00118347:
	v132 = 0x27<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l0011834F:
	v132 = loc7
	v133 = 1<32>
	v132 = v132 + v133
	loc71 = v132
	v132 = loc71
	v140 = Mem0[v132:int8]
	v132 = CONVERT(v140, int8, word32)
	loc72 = v132
	v132 = loc7
	v133 = 2<32>
	v132 = v132 + v133
	loc73 = v132
	v132 = loc73
	v141 = Mem0[v132:int8]
	v132 = CONVERT(v141, int8, word32)
	loc74 = v132
	// succ:  l0011836B
l0011836B:
	v132 = loc46
	v133 = 0x18<32>
	v132 = v132 << v133
	v133 = 0x18<32>
	v132 = v132 >> v133
	v133 = 0xFFFFFFE0<32>
	v132 = v132 - v133
	switch (v132) { l0011838F l001183DF l001183DF l001183DF l001183DF l001183DF l001183DF l001183DF l001183DF l001183DF l001183DF l001183DF l001183DF l001183B7 }
	// succ:  l0011838F l001183B7 l001183DF l001183DF l001183DF l001183DF l001183DF l001183DF l001183DF l001183DF l001183DF l001183DF l001183DF l001183DF
l0011838F:
	v132 = loc72
	v133 = 0xFFFFFFE0<32>
	v132 = v132 & v133
	loc76 = v132
	v132 = loc76
	v133 = 0x18<32>
	v132 = v132 << v133
	v133 = 0x18<32>
	v132 = v132 >> v133
	v133 = 0xFFFFFFA0<32>
	v134 = v132 == v133
	loc77 = v134
	v132 = loc77
	v134 = v132 == 0<32>
	branch !v134 l001183B4
	// succ:  l001183AC l001183B4
l001183AC:
	v132 = 0x13<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l001183B4:
	goto l00118405
	// succ:  l00118405
l001183B6:
	// succ:  l001183B7
l001183B7:
	v132 = loc72
	v133 = 0xFFFFFFE0<32>
	v132 = v132 & v133
	loc80 = v132
	v132 = loc80
	v133 = 0x18<32>
	v132 = v132 << v133
	v133 = 0x18<32>
	v132 = v132 >> v133
	v133 = 0xFFFFFF80<32>
	v134 = v132 == v133
	loc81 = v134
	v132 = loc81
	v134 = v132 == 0<32>
	branch !v134 l001183DC
	// succ:  l001183D4 l001183DC
l001183D4:
	v132 = 0x15<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l001183DC:
	goto l00118405
	// succ:  l00118405
l001183DE:
	// succ:  l001183DF
l001183DF:
	v132 = loc72
	v133 = 0xFFFFFFC0<32>
	v132 = v132 & v133
	loc84 = v132
	v132 = loc84
	v133 = 0x18<32>
	v132 = v132 << v133
	v133 = 0x18<32>
	v132 = v132 >> v133
	v133 = 0xFFFFFF80<32>
	v134 = v132 == v133
	loc85 = v134
	v132 = loc85
	v134 = v132 == 0<32>
	branch !v134 l00118404
	// succ:  l001183FC l00118404
l001183FC:
	v132 = 0x17<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l00118404:
	// succ:  l00118404
l00118404:
	// succ:  l00118405
l00118405:
	v132 = loc74
	v133 = 0xFF<32>
	v132 = v132 & v133
	loc89 = v132
	v132 = loc89
	v133 = 0xC0<32>
	v132 = v132 & v133
	loc90 = v132
	v132 = loc90
	v133 = 0x80<32>
	v134 = v132 == v133
	loc91 = v134
	v132 = loc91
	v134 = v132 == 0<32>
	branch !v134 l0011842B
	// succ:  l00118423 l0011842B
l00118423:
	v132 = 0x27<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l0011842B:
	v132 = loc47
	v133 = 0xC<32>
	v132 = v132 << v133
	loc92 = v132
	v132 = loc92
	v133 = 0xF000<32>
	v132 = v132 & v133
	loc93 = v132
	v132 = loc72
	v133 = 0xFF<32>
	v132 = v132 & v133
	loc94 = v132
	v132 = loc94
	v133 = 6<32>
	v132 = v132 << v133
	loc95 = v132
	v132 = loc95
	v133 = 0xFC0<32>
	v132 = v132 & v133
	loc96 = v132
	v132 = loc96
	v133 = loc93
	v132 = v132 | v133
	loc98 = v132
	v132 = loc89
	v133 = 0x3F<32>
	v132 = v132 & v133
	loc99 = v132
	v132 = loc98
	v133 = loc99
	v132 = v132 | v133
	loc100 = v132
	v132 = loc100
	v133 = arg3
	v134 = v132 >u v133
	loc101 = v134
	v132 = loc7
	v133 = 3<32>
	v132 = v132 + v133
	loc102 = v132
	v132 = loc101
	branch !v132 l00118481
	// succ:  l00118479 l00118481
l00118479:
	v132 = 0x27<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l00118481:
	v132 = loc6
	loc8 = v132
	v132 = loc102
	loc9 = v132
	goto l00118669
	// succ:  l00118669
l0011848B:
	// succ:  l0011848D
l0011848D:
	v132 = loc46
	v133 = 0xFF<32>
	v132 = v132 & v133
	v133 = 0xF5<32>
	v134 = v132 < v133
	loc103 = v134
	v132 = loc103
	v134 = v132 == 0<32>
	branch !v134 l001184A6
	// succ:  l0011849E l001184A6
l0011849E:
	v132 = 0x27<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l001184A6:
	v132 = loc7
	loc104 = v132
	v132 = loc12
	v133 = loc104
	v132 = v132 - v133
	loc105 = v132
	v132 = loc105
	v133 = 4<32>
	v134 = v132 < v133
	loc106 = v134
	v132 = arg2
	v133 = loc6
	v132 = v132 - v133
	loc107 = v132
	v132 = loc107
	v133 = 2<32>
	v134 = v132 <u v133
	loc109 = v134
	v132 = loc109
	v133 = loc106
	v132 = v132 | v133
	loc131 = v132
	v132 = loc131
	branch !v132 l001184DB
	// succ:  l001184D3 l001184DB
l001184D3:
	v132 = 0x27<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l001184DB:
	v132 = loc7
	v133 = 1<32>
	v132 = v132 + v133
	loc110 = v132
	v132 = loc110
	v142 = Mem0[v132:int8]
	v132 = CONVERT(v142, int8, word32)
	loc111 = v132
	v132 = loc7
	v133 = 2<32>
	v132 = v132 + v133
	loc112 = v132
	v132 = loc112
	v143 = Mem0[v132:int8]
	v132 = CONVERT(v143, int8, word32)
	loc113 = v132
	v132 = loc7
	v133 = 3<32>
	v132 = v132 + v133
	loc114 = v132
	v132 = loc114
	v144 = Mem0[v132:int8]
	v132 = CONVERT(v144, int8, word32)
	loc115 = v132
	// succ:  l00118505
l00118505:
	v132 = loc46
	v133 = 0x18<32>
	v132 = v132 << v133
	v133 = 0x18<32>
	v132 = v132 >> v133
	v133 = 0xFFFFFFF0<32>
	v132 = v132 - v133
	switch (v132) { l00118520 l00118574 l00118574 l00118574 l0011854C }
	// succ:  l00118520 l0011854C l00118574 l00118574 l00118574
l00118520:
	v132 = loc111
	v133 = 0x70<32>
	v132 = v132 + v133
	v133 = 0x18<32>
	v132 = v132 << v133
	v133 = 0x18<32>
	v132 = v132 >> v133
	loc10 = v132
	v132 = loc10
	v133 = 0xFF<32>
	v132 = v132 & v133
	v133 = 0x30<32>
	v134 = v132 < v133
	loc116 = v134
	v132 = loc116
	v134 = v132 == 0<32>
	branch !v134 l00118549
	// succ:  l00118541 l00118549
l00118541:
	v132 = 0x1E<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l00118549:
	goto l0011859A
	// succ:  l0011859A
l0011854B:
	// succ:  l0011854C
l0011854C:
	v132 = loc111
	v133 = 0xFFFFFFF0<32>
	v132 = v132 & v133
	loc120 = v132
	v132 = loc120
	v133 = 0x18<32>
	v132 = v132 << v133
	v133 = 0x18<32>
	v132 = v132 >> v133
	v133 = 0xFFFFFF80<32>
	v134 = v132 == v133
	loc121 = v134
	v132 = loc121
	v134 = v132 == 0<32>
	branch !v134 l00118571
	// succ:  l00118569 l00118571
l00118569:
	v132 = 0x20<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l00118571:
	goto l0011859A
	// succ:  l0011859A
l00118573:
	// succ:  l00118574
l00118574:
	v132 = loc111
	v133 = 0xFFFFFFC0<32>
	v132 = v132 & v133
	loc124 = v132
	v132 = loc124
	v133 = 0x18<32>
	v132 = v132 << v133
	v133 = 0x18<32>
	v132 = v132 >> v133
	v133 = 0xFFFFFF80<32>
	v134 = v132 == v133
	loc125 = v134
	v132 = loc125
	v134 = v132 == 0<32>
	branch !v134 l00118599
	// succ:  l00118591 l00118599
l00118591:
	v132 = 0x22<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l00118599:
	// succ:  l00118599
l00118599:
	// succ:  l0011859A
l0011859A:
	v132 = loc113
	v133 = 0xFF<32>
	v132 = v132 & v133
	loc128 = v132
	v132 = loc128
	v133 = 0xC0<32>
	v132 = v132 & v133
	loc129 = v132
	v132 = loc129
	v133 = 0x80<32>
	v134 = v132 == v133
	loc14 = v134
	v132 = loc14
	v134 = v132 == 0<32>
	branch !v134 l001185C4
	// succ:  l001185BC l001185C4
l001185BC:
	v132 = 0x27<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l001185C4:
	v132 = loc115
	v133 = 0xFF<32>
	v132 = v132 & v133
	loc15 = v132
	v132 = loc15
	v133 = 0xC0<32>
	v132 = v132 & v133
	loc16 = v132
	v132 = loc16
	v133 = 0x80<32>
	v134 = v132 == v133
	loc17 = v134
	v132 = loc17
	v134 = v132 == 0<32>
	branch !v134 l001185E9
	// succ:  l001185E1 l001185E9
l001185E1:
	v132 = 0x27<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l001185E9:
	v132 = loc47
	v133 = 0x12<32>
	v132 = v132 << v133
	loc18 = v132
	v132 = loc18
	v133 = 0x1C0000<32>
	v132 = v132 & v133
	loc19 = v132
	v132 = loc111
	v133 = 0xFF<32>
	v132 = v132 & v133
	loc20 = v132
	v132 = loc20
	v133 = 0xC<32>
	v132 = v132 << v133
	loc21 = v132
	v132 = loc21
	v133 = 0x3F000<32>
	v132 = v132 & v133
	loc22 = v132
	v132 = loc22
	v133 = loc19
	v132 = v132 | v133
	loc23 = v132
	v132 = loc128
	v133 = 6<32>
	v132 = v132 << v133
	loc25 = v132
	v132 = loc25
	v133 = 0xFC0<32>
	v132 = v132 & v133
	loc26 = v132
	v132 = loc23
	v133 = loc26
	v132 = v132 | v133
	loc27 = v132
	v132 = loc15
	v133 = 0x3F<32>
	v132 = v132 & v133
	loc28 = v132
	v132 = loc27
	v133 = loc28
	v132 = v132 | v133
	loc29 = v132
	v132 = loc29
	v133 = arg3
	v134 = v132 >u v133
	loc30 = v134
	v132 = loc6
	v133 = 1<32>
	v132 = v132 + v133
	loc31 = v132
	v132 = loc7
	v133 = 4<32>
	v132 = v132 + v133
	loc32 = v132
	v132 = loc30
	branch !v132 l0011865F
	// succ:  l00118657 l0011865F
l00118657:
	v132 = 0x27<32>
	loc132 = v132
	goto l0011867B
	// succ:  l0011867B
l0011865F:
	v132 = loc31
	loc8 = v132
	v132 = loc32
	loc9 = v132
	// succ:  l00118667
l00118667:
	// succ:  l00118668
l00118668:
	// succ:  l00118669
l00118669:
	v132 = loc8
	v133 = 1<32>
	v132 = v132 + v133
	loc33 = v132
	v132 = loc33
	loc6 = v132
	v132 = loc9
	loc7 = v132
	goto l001181F7
	// succ:  l001181F7
l0011867B:
	v132 = loc132
	v133 = 0x13<32>
	v134 = v132 == v133
	branch !v134 l00118695
	// succ:  l00118685 l00118695
l00118685:
	v132 = arg0
	loc78 = v132
	v132 = loc68
	v133 = loc78
	v132 = v132 - v133
	loc79 = v132
	v132 = loc79
	loc37 = v132
	goto l0011872E
	// succ:  l0011872E
l00118695:
	v132 = loc132
	v133 = 0x15<32>
	v134 = v132 == v133
	branch !v134 l001186AD
	// succ:  l0011869D l001186AD
l0011869D:
	v132 = arg0
	loc82 = v132
	v132 = loc68
	v133 = loc82
	v132 = v132 - v133
	loc83 = v132
	v132 = loc83
	loc37 = v132
	goto l0011872D
	// succ:  l0011872D
l001186AD:
	v132 = loc132
	v133 = 0x17<32>
	v134 = v132 == v133
	branch !v134 l001186C5
	// succ:  l001186B5 l001186C5
l001186B5:
	v132 = arg0
	loc87 = v132
	v132 = loc68
	v133 = loc87
	v132 = v132 - v133
	loc88 = v132
	v132 = loc88
	loc37 = v132
	goto l0011872C
	// succ:  l0011872C
l001186C5:
	v132 = loc132
	v133 = 0x1E<32>
	v134 = v132 == v133
	branch !v134 l001186DD
	// succ:  l001186CD l001186DD
l001186CD:
	v132 = arg0
	loc117 = v132
	v132 = loc104
	v133 = loc117
	v132 = v132 - v133
	loc118 = v132
	v132 = loc118
	loc37 = v132
	goto l0011872B
	// succ:  l0011872B
l001186DD:
	v132 = loc132
	v133 = 0x20<32>
	v134 = v132 == v133
	branch !v134 l001186F5
	// succ:  l001186E5 l001186F5
l001186E5:
	v132 = arg0
	loc122 = v132
	v132 = loc104
	v133 = loc122
	v132 = v132 - v133
	loc123 = v132
	v132 = loc123
	loc37 = v132
	goto l0011872A
	// succ:  l0011872A
l001186F5:
	v132 = loc132
	v133 = 0x22<32>
	v134 = v132 == v133
	branch !v134 l0011870D
	// succ:  l001186FD l0011870D
l001186FD:
	v132 = arg0
	loc126 = v132
	v132 = loc104
	v133 = loc126
	v132 = v132 - v133
	loc127 = v132
	v132 = loc127
	loc37 = v132
	goto l00118729
	// succ:  l00118729
l0011870D:
	v132 = loc132
	v133 = 0x27<32>
	v134 = v132 == v133
	branch !v134 l00118729
	// succ:  l00118715 l00118729
l00118715:
	v132 = arg0
	loc11 = v132
	v132 = loc7
	loc34 = v132
	v132 = loc34
	v133 = loc11
	v132 = v132 - v133
	loc36 = v132
	v132 = loc36
	loc37 = v132
	// succ:  l00118729
l00118729:
	// succ:  l00118729
l00118729:
	// succ:  l0011872A
l0011872A:
	// succ:  l0011872B
l0011872B:
	// succ:  l0011872C
l0011872C:
	// succ:  l0011872D
l0011872D:
	// succ:  l0011872E
l0011872E:
	v132 = loc37
	return v132
	// succ:  fn0011812E_exit
l00118732:
	return v132
	// succ:  fn0011812E_exit
fn0011812E_exit:


// fn00118734
// Return size: 0
word32 fn00118734(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn00118734_entry:
	// succ:  l00118734
l00118734:
	v141 = Mem0[0x00140030<p32>:word32]
	loc145 = v141
	v141 = arg2
	v142 = arg0
	Mem0[v141:word32] = v142
	v141 = arg5
	v142 = arg3
	Mem0[v141:word32] = v142
	v141 = arg7
	v142 = 4<32>
	v141 = v141 & v142
	loc122 = v141
	v141 = loc122
	v142 = 0<32>
	v143 = v141 == v142
	loc133 = v143
	v141 = loc133
	branch !v141 l00118766
	// succ:  l0011875D l00118766
l0011875D:
	v141 = arg1
	loc10 = v141
	v141 = loc10
	loc11 = v141
	goto l00118809
	// succ:  l00118809
l00118766:
	v141 = arg2
	v141 = Mem0[v141:word32]
	loc12 = v141
	v141 = arg1
	loc23 = v141
	v141 = loc12
	loc34 = v141
	v141 = loc23
	v142 = loc34
	v141 = v141 - v142
	loc45 = v141
	v141 = loc45
	v142 = 2<32>
	v143 = v141 > v142
	loc56 = v143
	v141 = loc56
	branch !v141 l00118804
	// succ:  l00118787 l00118804
l00118787:
	v141 = loc12
	v144 = Mem0[v141:int8]
	v141 = CONVERT(v144, int8, word32)
	loc57 = v141
	v141 = loc57
	v142 = 0x18<32>
	v141 = v141 << v142
	v142 = 0x18<32>
	v141 = v141 >> v142
	v142 = 0xFFFFFFEF<32>
	v143 = v141 == v142
	loc58 = v143
	v141 = loc58
	branch !v141 l001187FE
	// succ:  l0011879F l001187FE
l0011879F:
	v141 = loc12
	v142 = 1<32>
	v141 = v141 + v142
	loc59 = v141
	v141 = loc59
	v145 = Mem0[v141:int8]
	v141 = CONVERT(v145, int8, word32)
	loc60 = v141
	v141 = loc60
	v142 = 0x18<32>
	v141 = v141 << v142
	v142 = 0x18<32>
	v141 = v141 >> v142
	v142 = 0xFFFFFFBB<32>
	v143 = v141 == v142
	loc61 = v143
	v141 = loc61
	branch !v141 l001187F8
	// succ:  l001187BF l001187F8
l001187BF:
	v141 = loc12
	v142 = 2<32>
	v141 = v141 + v142
	loc62 = v141
	v141 = loc62
	v146 = Mem0[v141:int8]
	v141 = CONVERT(v146, int8, word32)
	loc63 = v141
	v141 = loc63
	v142 = 0x18<32>
	v141 = v141 << v142
	v142 = 0x18<32>
	v141 = v141 >> v142
	v142 = 0xFFFFFFBF<32>
	v143 = v141 == v142
	loc64 = v143
	v141 = loc64
	branch !v141 l001187F2
	// succ:  l001187DF l001187F2
l001187DF:
	v141 = loc12
	v142 = 3<32>
	v141 = v141 + v142
	loc65 = v141
	v141 = arg2
	v142 = loc65
	Mem0[v141:word32] = v142
	v141 = loc23
	loc11 = v141
	goto l001187F6
	// succ:  l001187F6
l001187F2:
	v141 = loc23
	loc11 = v141
	// succ:  l001187F6
l001187F6:
	goto l001187FC
	// succ:  l001187FC
l001187F8:
	v141 = loc23
	loc11 = v141
	// succ:  l001187FC
l001187FC:
	goto l00118802
	// succ:  l00118802
l001187FE:
	v141 = loc23
	loc11 = v141
	// succ:  l00118802
l00118802:
	goto l00118808
	// succ:  l00118808
l00118804:
	v141 = loc23
	loc11 = v141
	// succ:  l00118808
l00118808:
	// succ:  l00118809
l00118809:
	v141 = arg4
	loc66 = v141
	// succ:  l00118810
l00118810:
	v141 = arg2
	v141 = Mem0[v141:word32]
	loc67 = v141
	v141 = loc67
	v142 = arg1
	v143 = v141 <u v142
	loc68 = v143
	v141 = loc68
	v143 = v141 == 0<32>
	branch !v143 l0011882D
	// succ:  l00118825 l0011882D
l00118825:
	v141 = 0x29<32>
	loc144 = v141
	goto l00118D85
	// succ:  l00118D85
l0011882D:
	v141 = arg5
	v141 = Mem0[v141:word32]
	loc69 = v141
	v141 = loc69
	v142 = arg4
	v143 = v141 <u v142
	loc70 = v143
	v141 = loc70
	v143 = v141 == 0<32>
	branch !v143 l00118848
	// succ:  l00118840 l00118848
l00118840:
	v141 = 0x29<32>
	loc144 = v141
	goto l00118D85
	// succ:  l00118D85
l00118848:
	v141 = loc67
	v147 = Mem0[v141:int8]
	v141 = CONVERT(v147, int8, word32)
	loc71 = v141
	v141 = loc71
	v142 = 0xFF<32>
	v141 = v141 & v142
	loc72 = v141
	v141 = loc72
	v142 = arg6
	v143 = v141 >u v142
	loc73 = v143
	v141 = loc73
	branch !v141 l00118869
	// succ:  l00118862 l00118869
l00118862:
	v141 = 2<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l00118869:
	v141 = loc71
	v142 = 0x18<32>
	v141 = v141 << v142
	v142 = 0x18<32>
	v141 = v141 >> v142
	v142 = 0xFFFFFFFF<32>
	v143 = v141 > v142
	loc74 = v143
	// succ:  l00118876
l00118876:
	v141 = loc74
	branch !v141 l0011889A
	// succ:  l0011887C l0011889A
l0011887C:
	v141 = loc71
	v142 = 0xFF<32>
	v141 = v141 & v142
	loc75 = v141
	v141 = loc69
	v142 = loc75
	v148 = SLICE(v142, word16, 0)
	Mem0[v141:word16] = v148
	v141 = loc67
	v142 = 1<32>
	v141 = v141 + v142
	loc76 = v141
	v141 = arg2
	v142 = loc76
	Mem0[v141:word32] = v142
	goto l00118D6C
	// succ:  l00118D6C
l0011889A:
	v141 = loc71
	v142 = 0xFF<32>
	v141 = v141 & v142
	v142 = 0xC2<32>
	v143 = v141 < v142
	loc77 = v143
	v141 = loc77
	branch !v141 l001188B1
	// succ:  l001188AA l001188B1
l001188AA:
	v141 = 2<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l001188B1:
	v141 = loc71
	v142 = 0xFF<32>
	v141 = v141 & v142
	v142 = 0xE0<32>
	v143 = v141 < v142
	loc78 = v143
	v141 = loc78
	branch !v141 l00118960
	// succ:  l001188C1 l00118960
l001188C1:
	v141 = loc67
	loc79 = v141
	v141 = loc11
	v142 = loc79
	v141 = v141 - v142
	loc80 = v141
	v141 = loc80
	v142 = 2<32>
	v143 = v141 < v142
	loc81 = v143
	v141 = loc81
	branch !v141 l001188DE
	// succ:  l001188D7 l001188DE
l001188D7:
	v141 = 1<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l001188DE:
	v141 = loc67
	v142 = 1<32>
	v141 = v141 + v142
	loc82 = v141
	v141 = loc82
	v149 = Mem0[v141:int8]
	v141 = CONVERT(v149, int8, word32)
	loc83 = v141
	v141 = loc83
	v142 = 0xFF<32>
	v141 = v141 & v142
	loc84 = v141
	v141 = loc84
	v142 = 0xC0<32>
	v141 = v141 & v142
	loc85 = v141
	v141 = loc85
	v142 = 0x80<32>
	v143 = v141 == v142
	loc86 = v143
	v141 = loc86
	v143 = v141 == 0<32>
	branch !v143 l00118910
	// succ:  l00118909 l00118910
l00118909:
	v141 = 2<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l00118910:
	v141 = loc72
	v142 = 6<32>
	v141 = v141 << v142
	loc87 = v141
	v141 = loc87
	v142 = 0x7C0<32>
	v141 = v141 & v142
	loc88 = v141
	v141 = loc84
	v142 = 0x3F<32>
	v141 = v141 & v142
	loc89 = v141
	v141 = loc89
	v142 = loc88
	v141 = v141 | v142
	loc90 = v141
	v141 = loc90
	v142 = arg6
	v143 = v141 >u v142
	loc91 = v143
	v141 = loc91
	branch !v141 l0011893F
	// succ:  l00118938 l0011893F
l00118938:
	v141 = 2<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l0011893F:
	v141 = loc90
	v142 = 0xFFFF<32>
	v141 = v141 & v142
	loc92 = v141
	v141 = loc69
	v142 = loc92
	v150 = SLICE(v142, word16, 0)
	Mem0[v141:word16] = v150
	v141 = loc67
	v142 = 2<32>
	v141 = v141 + v142
	loc93 = v141
	v141 = arg2
	v142 = loc93
	Mem0[v141:word32] = v142
	goto l00118D6D
	// succ:  l00118D6D
l00118960:
	v141 = loc71
	v142 = 0xFF<32>
	v141 = v141 & v142
	v142 = 0xF0<32>
	v143 = v141 < v142
	loc94 = v143
	v141 = loc94
	branch !v141 l00118AD4
	// succ:  l00118970 l00118AD4
l00118970:
	v141 = loc67
	loc95 = v141
	v141 = loc11
	v142 = loc95
	v141 = v141 - v142
	loc96 = v141
	v141 = loc96
	v142 = 3<32>
	v143 = v141 < v142
	loc97 = v143
	v141 = loc97
	branch !v141 l0011898D
	// succ:  l00118986 l0011898D
l00118986:
	v141 = 1<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l0011898D:
	v141 = loc67
	v142 = 1<32>
	v141 = v141 + v142
	loc98 = v141
	v141 = loc98
	v151 = Mem0[v141:int8]
	v141 = CONVERT(v151, int8, word32)
	loc99 = v141
	v141 = loc67
	v142 = 2<32>
	v141 = v141 + v142
	loc100 = v141
	v141 = loc100
	v152 = Mem0[v141:int8]
	v141 = CONVERT(v152, int8, word32)
	loc101 = v141
	// succ:  l001189A9
l001189A9:
	v141 = loc71
	v142 = 0x18<32>
	v141 = v141 << v142
	v142 = 0x18<32>
	v141 = v141 >> v142
	v142 = 0xFFFFFFE0<32>
	v141 = v141 - v142
	switch (v141) { l001189CD l00118A1B l00118A1B l00118A1B l00118A1B l00118A1B l00118A1B l00118A1B l00118A1B l00118A1B l00118A1B l00118A1B l00118A1B l001189F4 }
	// succ:  l001189CD l001189F4 l00118A1B l00118A1B l00118A1B l00118A1B l00118A1B l00118A1B l00118A1B l00118A1B l00118A1B l00118A1B l00118A1B l00118A1B
l001189CD:
	v141 = loc99
	v142 = 0xFFFFFFE0<32>
	v141 = v141 & v142
	loc102 = v141
	v141 = loc102
	v142 = 0x18<32>
	v141 = v141 << v142
	v142 = 0x18<32>
	v141 = v141 >> v142
	v142 = 0xFFFFFFA0<32>
	v143 = v141 == v142
	loc103 = v143
	v141 = loc103
	v143 = v141 == 0<32>
	branch !v143 l001189F1
	// succ:  l001189EA l001189F1
l001189EA:
	v141 = 2<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l001189F1:
	goto l00118A40
	// succ:  l00118A40
l001189F3:
	// succ:  l001189F4
l001189F4:
	v141 = loc99
	v142 = 0xFFFFFFE0<32>
	v141 = v141 & v142
	loc104 = v141
	v141 = loc104
	v142 = 0x18<32>
	v141 = v141 << v142
	v142 = 0x18<32>
	v141 = v141 >> v142
	v142 = 0xFFFFFF80<32>
	v143 = v141 == v142
	loc105 = v143
	v141 = loc105
	v143 = v141 == 0<32>
	branch !v143 l00118A18
	// succ:  l00118A11 l00118A18
l00118A11:
	v141 = 2<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l00118A18:
	goto l00118A40
	// succ:  l00118A40
l00118A1A:
	// succ:  l00118A1B
l00118A1B:
	v141 = loc99
	v142 = 0xFFFFFFC0<32>
	v141 = v141 & v142
	loc106 = v141
	v141 = loc106
	v142 = 0x18<32>
	v141 = v141 << v142
	v142 = 0x18<32>
	v141 = v141 >> v142
	v142 = 0xFFFFFF80<32>
	v143 = v141 == v142
	loc107 = v143
	v141 = loc107
	v143 = v141 == 0<32>
	branch !v143 l00118A3F
	// succ:  l00118A38 l00118A3F
l00118A38:
	v141 = 2<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l00118A3F:
	// succ:  l00118A3F
l00118A3F:
	// succ:  l00118A40
l00118A40:
	v141 = loc101
	v142 = 0xFF<32>
	v141 = v141 & v142
	loc108 = v141
	v141 = loc108
	v142 = 0xC0<32>
	v141 = v141 & v142
	loc109 = v141
	v141 = loc109
	v142 = 0x80<32>
	v143 = v141 == v142
	loc110 = v143
	v141 = loc110
	v143 = v141 == 0<32>
	branch !v143 l00118A65
	// succ:  l00118A5E l00118A65
l00118A5E:
	v141 = 2<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l00118A65:
	v141 = loc72
	v142 = 0xC<32>
	v141 = v141 << v142
	loc111 = v141
	v141 = loc99
	v142 = 0xFF<32>
	v141 = v141 & v142
	loc112 = v141
	v141 = loc112
	v142 = 6<32>
	v141 = v141 << v142
	loc113 = v141
	v141 = loc113
	v142 = 0xFC0<32>
	v141 = v141 & v142
	loc114 = v141
	v141 = loc114
	v142 = loc111
	v141 = v141 | v142
	loc115 = v141
	v141 = loc108
	v142 = 0x3F<32>
	v141 = v141 & v142
	loc116 = v141
	v141 = loc115
	v142 = loc116
	v141 = v141 | v142
	loc117 = v141
	v141 = loc117
	v142 = 0xFFFF<32>
	v141 = v141 & v142
	loc118 = v141
	v141 = loc118
	v142 = arg6
	v143 = v141 >u v142
	loc119 = v143
	v141 = loc119
	branch !v141 l00118AB3
	// succ:  l00118AAC l00118AB3
l00118AAC:
	v141 = 2<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l00118AB3:
	v141 = loc117
	v142 = 0xFFFF<32>
	v141 = v141 & v142
	loc120 = v141
	v141 = loc69
	v142 = loc120
	v153 = SLICE(v142, word16, 0)
	Mem0[v141:word16] = v153
	v141 = loc67
	v142 = 3<32>
	v141 = v141 + v142
	loc121 = v141
	v141 = arg2
	v142 = loc121
	Mem0[v141:word32] = v142
	goto l00118D6D
	// succ:  l00118D6D
l00118AD4:
	v141 = loc71
	v142 = 0xFF<32>
	v141 = v141 & v142
	v142 = 0xF5<32>
	v143 = v141 < v142
	loc123 = v143
	v141 = loc123
	v143 = v141 == 0<32>
	branch !v143 l00118AEC
	// succ:  l00118AE5 l00118AEC
l00118AE5:
	v141 = 2<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l00118AEC:
	v141 = loc67
	loc124 = v141
	v141 = loc11
	v142 = loc124
	v141 = v141 - v142
	loc125 = v141
	v141 = loc125
	v142 = 4<32>
	v143 = v141 < v142
	loc126 = v143
	v141 = loc126
	branch !v141 l00118B09
	// succ:  l00118B02 l00118B09
l00118B02:
	v141 = 1<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l00118B09:
	v141 = loc67
	v142 = 1<32>
	v141 = v141 + v142
	loc127 = v141
	v141 = loc127
	v154 = Mem0[v141:int8]
	v141 = CONVERT(v154, int8, word32)
	loc128 = v141
	v141 = loc67
	v142 = 2<32>
	v141 = v141 + v142
	loc129 = v141
	v141 = loc129
	v155 = Mem0[v141:int8]
	v141 = CONVERT(v155, int8, word32)
	loc130 = v141
	v141 = loc67
	v142 = 3<32>
	v141 = v141 + v142
	loc131 = v141
	v141 = loc131
	v156 = Mem0[v141:int8]
	v141 = CONVERT(v156, int8, word32)
	loc132 = v141
	// succ:  l00118B3A
l00118B3A:
	v141 = loc71
	v142 = 0x18<32>
	v141 = v141 << v142
	v142 = 0x18<32>
	v141 = v141 >> v142
	v142 = 0xFFFFFFF0<32>
	v141 = v141 - v142
	switch (v141) { l00118B55 l00118BAF l00118BAF l00118BAF l00118B83 }
	// succ:  l00118B55 l00118B83 l00118BAF l00118BAF l00118BAF
l00118B55:
	v141 = loc128
	v142 = 0x70<32>
	v141 = v141 + v142
	v142 = 0x18<32>
	v141 = v141 << v142
	v142 = 0x18<32>
	v141 = v141 >> v142
	loc9 = v141
	v141 = loc9
	v142 = 0xFF<32>
	v141 = v141 & v142
	v142 = 0x30<32>
	v143 = v141 < v142
	loc134 = v143
	v141 = loc134
	v143 = v141 == 0<32>
	branch !v143 l00118B80
	// succ:  l00118B79 l00118B80
l00118B79:
	v141 = 2<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l00118B80:
	goto l00118BD9
	// succ:  l00118BD9
l00118B82:
	// succ:  l00118B83
l00118B83:
	v141 = loc128
	v142 = 0xFFFFFFF0<32>
	v141 = v141 & v142
	loc135 = v141
	v141 = loc135
	v142 = 0x18<32>
	v141 = v141 << v142
	v142 = 0x18<32>
	v141 = v141 >> v142
	v142 = 0xFFFFFF80<32>
	v143 = v141 == v142
	loc136 = v143
	v141 = loc136
	v143 = v141 == 0<32>
	branch !v143 l00118BAC
	// succ:  l00118BA5 l00118BAC
l00118BA5:
	v141 = 2<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l00118BAC:
	goto l00118BD9
	// succ:  l00118BD9
l00118BAE:
	// succ:  l00118BAF
l00118BAF:
	v141 = loc128
	v142 = 0xFFFFFFC0<32>
	v141 = v141 & v142
	loc137 = v141
	v141 = loc137
	v142 = 0x18<32>
	v141 = v141 << v142
	v142 = 0x18<32>
	v141 = v141 >> v142
	v142 = 0xFFFFFF80<32>
	v143 = v141 == v142
	loc138 = v143
	v141 = loc138
	v143 = v141 == 0<32>
	branch !v143 l00118BD8
	// succ:  l00118BD1 l00118BD8
l00118BD1:
	v141 = 2<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l00118BD8:
	// succ:  l00118BD8
l00118BD8:
	// succ:  l00118BD9
l00118BD9:
	v141 = loc130
	v142 = 0xFF<32>
	v141 = v141 & v142
	loc139 = v141
	v141 = loc139
	v142 = 0xC0<32>
	v141 = v141 & v142
	loc140 = v141
	v141 = loc140
	v142 = 0x80<32>
	v143 = v141 == v142
	loc141 = v143
	v141 = loc141
	v143 = v141 == 0<32>
	branch !v143 l00118C05
	// succ:  l00118BFE l00118C05
l00118BFE:
	v141 = 2<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l00118C05:
	v141 = loc132
	v142 = 0xFF<32>
	v141 = v141 & v142
	loc142 = v141
	v141 = loc142
	v142 = 0xC0<32>
	v141 = v141 & v142
	loc143 = v141
	v141 = loc143
	v142 = 0x80<32>
	v143 = v141 == v142
	loc13 = v143
	v141 = loc13
	v143 = v141 == 0<32>
	branch !v143 l00118C2E
	// succ:  l00118C27 l00118C2E
l00118C27:
	v141 = 2<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l00118C2E:
	v141 = loc69
	loc14 = v141
	v141 = loc66
	v142 = loc14
	v141 = v141 - v142
	loc15 = v141
	v141 = loc15
	v142 = 4<32>
	v143 = v141 < v142
	loc16 = v143
	v141 = loc16
	branch !v141 l00118C4B
	// succ:  l00118C44 l00118C4B
l00118C44:
	v141 = 1<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l00118C4B:
	v141 = loc72
	v142 = 7<32>
	v141 = v141 & v142
	loc17 = v141
	v141 = loc17
	v142 = 0x12<32>
	v141 = v141 << v142
	loc18 = v141
	v141 = loc128
	v142 = 0xFF<32>
	v141 = v141 & v142
	loc19 = v141
	v141 = loc19
	v142 = 0xC<32>
	v141 = v141 << v142
	loc20 = v141
	v141 = loc20
	v142 = 0x3F000<32>
	v141 = v141 & v142
	loc21 = v141
	v141 = loc21
	v142 = loc18
	v141 = v141 | v142
	loc22 = v141
	v141 = loc139
	v142 = 6<32>
	v141 = v141 << v142
	loc24 = v141
	v141 = loc24
	v142 = 0xFC0<32>
	v141 = v141 & v142
	loc25 = v141
	v141 = loc22
	v142 = loc25
	v141 = v141 | v142
	loc26 = v141
	v141 = loc142
	v142 = 0x3F<32>
	v141 = v141 & v142
	loc27 = v141
	v141 = loc26
	v142 = loc27
	v141 = v141 | v142
	loc28 = v141
	v141 = loc28
	v142 = arg6
	v143 = v141 >u v142
	loc29 = v143
	v141 = loc29
	branch !v141 l00118CB1
	// succ:  l00118CAA l00118CB1
l00118CAA:
	v141 = 2<32>
	loc8 = v141
	goto l00118D85
	// succ:  l00118D85
l00118CB1:
	v141 = loc17
	v142 = 2<32>
	v141 = v141 << v142
	loc30 = v141
	v141 = loc19
	v142 = 4<32>
	v141 = v141 >>u v142
	loc31 = v141
	v141 = loc31
	v142 = 3<32>
	v141 = v141 & v142
	loc32 = v141
	v141 = loc32
	v142 = loc30
	v141 = v141 | v142
	loc33 = v141
	v141 = loc33
	v142 = 6<32>
	v141 = v141 << v142
	loc35 = v141
	v141 = loc35
	v142 = 0x3FC0<32>
	v141 = v141 + v142
	loc36 = v141
	v141 = loc19
	v142 = 2<32>
	v141 = v141 << v142
	loc37 = v141
	v141 = loc37
	v142 = 0x3C<32>
	v141 = v141 & v142
	loc38 = v141
	v141 = loc139
	v142 = 4<32>
	v141 = v141 >>u v142
	loc39 = v141
	v141 = loc39
	v142 = 3<32>
	v141 = v141 & v142
	loc40 = v141
	v141 = loc38
	v142 = loc40
	v141 = v141 | v142
	loc41 = v141
	v141 = loc41
	v142 = loc36
	v141 = v141 | v142
	loc42 = v141
	v141 = loc42
	v142 = 0xD800<32>
	v141 = v141 | v142
	loc43 = v141
	v141 = loc43
	v142 = 0xFFFF<32>
	v141 = v141 & v142
	loc44 = v141
	v141 = loc69
	v142 = loc44
	v157 = SLICE(v142, word16, 0)
	Mem0[v141:word16] = v157
	v141 = loc24
	v142 = 0x3C0<32>
	v141 = v141 & v142
	loc46 = v141
	v141 = loc27
	v142 = loc46
	v141 = v141 | v142
	loc47 = v141
	v141 = loc47
	v142 = 0xDC00<32>
	v141 = v141 | v142
	loc48 = v141
	v141 = loc48
	v142 = 0xFFFF<32>
	v141 = v141 & v142
	loc49 = v141
	v141 = loc69
	v142 = 2<32>
	v141 = v141 + v142
	loc50 = v141
	v141 = arg5
	v142 = loc50
	Mem0[v141:word32] = v142
	v141 = loc50
	v142 = loc49
	v158 = SLICE(v142, word16, 0)
	Mem0[v141:word16] = v158
	v141 = arg2
	v141 = Mem0[v141:word32]
	loc51 = v141
	v141 = loc51
	v142 = 4<32>
	v141 = v141 + v142
	loc52 = v141
	v141 = arg2
	v142 = loc52
	Mem0[v141:word32] = v142
	// succ:  l00118D6C
l00118D6C:
	// succ:  l00118D6D
l00118D6D:
	v141 = arg5
	v141 = Mem0[v141:word32]
	loc53 = v141
	v141 = loc53
	v142 = 2<32>
	v141 = v141 + v142
	loc54 = v141
	v141 = arg5
	v142 = loc54
	Mem0[v141:word32] = v142
	goto l00118809
	// succ:  l00118809
l00118D85:
	v141 = loc144
	v142 = 0x29<32>
	v143 = v141 == v142
	branch !v143 l00118D9B
	// succ:  l00118D8F l00118D9B
l00118D8F:
	v141 = loc68
	v142 = 1<32>
	v141 = v141 & v142
	loc55 = v141
	v141 = loc55
	loc8 = v141
	// succ:  l00118D9B
l00118D9B:
	v141 = loc8
	return v141
	// succ:  fn00118734_exit
l00118D9E:
	return v141
	// succ:  fn00118734_exit
fn00118734_exit:


// fn00118DA0
// Return size: 0
word32 fn00118DA0(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn00118DA0_entry:
	// succ:  l00118DA0
l00118DA0:
	v138 = Mem0[0x00140030<p32>:word32]
	loc142 = v138
	v138 = arg2
	v139 = arg0
	Mem0[v138:word32] = v139
	v138 = arg5
	v139 = arg3
	Mem0[v138:word32] = v139
	v138 = arg7
	v139 = 2<32>
	v138 = v138 & v139
	loc119 = v138
	v138 = loc119
	v139 = 0<32>
	v140 = v138 == v139
	loc130 = v140
	v138 = arg4
	loc10 = v138
	v138 = loc130
	branch !v138 l00118DD3
	// succ:  l00118DCD l00118DD3
l00118DCD:
	v138 = 4<32>
	loc141 = v138
	goto l00118E43
	// succ:  l00118E43
l00118DD3:
	v138 = arg3
	loc11 = v138
	v138 = loc10
	v139 = loc11
	v138 = v138 - v139
	loc22 = v138
	v138 = loc22
	v139 = 3<32>
	v140 = v138 < v139
	loc33 = v140
	v138 = loc33
	branch !v138 l00118DEE
	// succ:  l00118DE9 l00118DEE
l00118DE9:
	v138 = 1<32>
	loc8 = v138
	goto l00118E42
	// succ:  l00118E42
l00118DEE:
	v138 = arg3
	v139 = 1<32>
	v138 = v138 + v139
	loc44 = v138
	v138 = arg5
	v139 = loc44
	Mem0[v138:word32] = v139
	v138 = arg3
	v139 = 0xFFFFFFEF<32>
	v141 = SLICE(v139, byte, 0)
	Mem0[v138:byte] = v141
	v138 = arg5
	v138 = Mem0[v138:word32]
	loc53 = v138
	v138 = loc53
	v139 = 1<32>
	v138 = v138 + v139
	loc54 = v138
	v138 = arg5
	v139 = loc54
	Mem0[v138:word32] = v139
	v138 = loc53
	v139 = 0xFFFFFFBB<32>
	v142 = SLICE(v139, byte, 0)
	Mem0[v138:byte] = v142
	v138 = arg5
	v138 = Mem0[v138:word32]
	loc55 = v138
	v138 = loc55
	v139 = 1<32>
	v138 = v138 + v139
	loc56 = v138
	v138 = arg5
	v139 = loc56
	Mem0[v138:word32] = v139
	v138 = loc55
	v139 = 0xFFFFFFBF<32>
	v143 = SLICE(v139, byte, 0)
	Mem0[v138:byte] = v143
	v138 = 4<32>
	loc141 = v138
	// succ:  l00118E42
l00118E42:
	// succ:  l00118E43
l00118E43:
	v138 = loc141
	v139 = 4<32>
	v140 = v138 == v139
	branch !v140 l00119351
	// succ:  l00118E4E l00119351
l00118E4E:
	v138 = arg1
	loc57 = v138
	v138 = arg2
	v138 = Mem0[v138:word32]
	loc9 = v138
	v138 = loc9
	loc59 = v138
	v138 = loc59
	v139 = arg1
	v140 = v138 <u v139
	loc58 = v140
	v138 = loc58
	v140 = v138 == 0<32>
	branch !v140 l00118E72
	// succ:  l00118E6B l00118E72
l00118E6B:
	v138 = 0<32>
	loc8 = v138
	goto l00119351
	// succ:  l00119351
l00118E72:
	v138 = loc59
	v144 = Mem0[v138:int16]
	v138 = CONVERT(v144, int16, word32)
	loc60 = v138
	v138 = loc60
	v139 = 0xFFFF<32>
	v138 = v138 & v139
	loc61 = v138
	v138 = loc61
	v139 = arg6
	v140 = v138 >u v139
	loc62 = v140
	v138 = loc62
	branch !v138 l00118E94
	// succ:  l00118E8D l00118E94
l00118E8D:
	v138 = 2<32>
	loc8 = v138
	goto l00119351
	// succ:  l00119351
l00118E94:
	v138 = loc60
	v139 = 0xFFFF<32>
	v138 = v138 & v139
	v139 = 0x80<32>
	v140 = v138 < v139
	loc63 = v140
	// succ:  l00118EA1
l00118EA1:
	v138 = loc63
	branch !v138 l00118EE9
	// succ:  l00118EA7 l00118EE9
l00118EA7:
	v138 = arg5
	v138 = Mem0[v138:word32]
	loc64 = v138
	v138 = loc64
	loc65 = v138
	v138 = loc10
	v139 = loc65
	v138 = v138 - v139
	loc66 = v138
	v138 = loc66
	v139 = 1<32>
	v140 = v138 < v139
	loc67 = v140
	v138 = loc67
	branch !v138 l00118ECB
	// succ:  l00118EC4 l00118ECB
l00118EC4:
	v138 = 1<32>
	loc8 = v138
	goto l00119351
	// succ:  l00119351
l00118ECB:
	v138 = loc60
	v139 = 0xFF<32>
	v138 = v138 & v139
	loc68 = v138
	v138 = loc64
	v139 = 1<32>
	v138 = v138 + v139
	loc69 = v138
	v138 = arg5
	v139 = loc69
	Mem0[v138:word32] = v139
	v138 = loc64
	v139 = loc68
	v145 = SLICE(v139, byte, 0)
	Mem0[v138:byte] = v145
	goto l00119332
	// succ:  l00119332
l00118EE9:
	v138 = loc60
	v139 = 0xFFFF<32>
	v138 = v138 & v139
	v139 = 0x800<32>
	v140 = v138 < v139
	loc70 = v140
	v138 = loc70
	branch !v138 l00118F80
	// succ:  l00118EFA l00118F80
l00118EFA:
	v138 = arg5
	v138 = Mem0[v138:word32]
	loc71 = v138
	v138 = loc71
	loc72 = v138
	v138 = loc10
	v139 = loc72
	v138 = v138 - v139
	loc73 = v138
	v138 = loc73
	v139 = 2<32>
	v140 = v138 < v139
	loc74 = v140
	v138 = loc74
	branch !v138 l00118F1E
	// succ:  l00118F17 l00118F1E
l00118F17:
	v138 = 1<32>
	loc8 = v138
	goto l00119351
	// succ:  l00119351
l00118F1E:
	v138 = loc61
	v139 = 6<32>
	v138 = v138 >>u v139
	loc75 = v138
	v138 = loc75
	v139 = 0xC0<32>
	v138 = v138 | v139
	loc76 = v138
	v138 = loc76
	v139 = 0xFF<32>
	v138 = v138 & v139
	loc77 = v138
	v138 = loc71
	v139 = 1<32>
	v138 = v138 + v139
	loc78 = v138
	v138 = arg5
	v139 = loc78
	Mem0[v138:word32] = v139
	v138 = loc71
	v139 = loc77
	v146 = SLICE(v139, byte, 0)
	Mem0[v138:byte] = v146
	v138 = loc61
	v139 = 0x3F<32>
	v138 = v138 & v139
	loc79 = v138
	v138 = loc79
	v139 = 0x80<32>
	v138 = v138 | v139
	loc80 = v138
	v138 = loc80
	v139 = 0xFF<32>
	v138 = v138 & v139
	loc81 = v138
	v138 = arg5
	v138 = Mem0[v138:word32]
	loc82 = v138
	v138 = loc82
	v139 = 1<32>
	v138 = v138 + v139
	loc83 = v138
	v138 = arg5
	v139 = loc83
	Mem0[v138:word32] = v139
	v138 = loc82
	v139 = loc81
	v147 = SLICE(v139, byte, 0)
	Mem0[v138:byte] = v147
	goto l00119333
	// succ:  l00119333
l00118F80:
	v138 = loc60
	v139 = 0xFFFF<32>
	v138 = v138 & v139
	v139 = 0xD800<32>
	v140 = v138 < v139
	loc84 = v140
	v138 = loc84
	branch !v138 l00119052
	// succ:  l00118F92 l00119052
l00118F92:
	v138 = arg5
	v138 = Mem0[v138:word32]
	loc85 = v138
	v138 = loc85
	loc86 = v138
	v138 = loc10
	v139 = loc86
	v138 = v138 - v139
	loc87 = v138
	v138 = loc87
	v139 = 3<32>
	v140 = v138 < v139
	loc88 = v140
	v138 = loc88
	branch !v138 l00118FB6
	// succ:  l00118FAF l00118FB6
l00118FAF:
	v138 = 1<32>
	loc8 = v138
	goto l00119351
	// succ:  l00119351
l00118FB6:
	v138 = loc61
	v139 = 0xC<32>
	v138 = v138 >>u v139
	loc89 = v138
	v138 = loc89
	v139 = 0xE0<32>
	v138 = v138 | v139
	loc90 = v138
	v138 = loc90
	v139 = 0xFF<32>
	v138 = v138 & v139
	loc91 = v138
	v138 = loc85
	v139 = 1<32>
	v138 = v138 + v139
	loc92 = v138
	v138 = arg5
	v139 = loc92
	Mem0[v138:word32] = v139
	v138 = loc85
	v139 = loc91
	v148 = SLICE(v139, byte, 0)
	Mem0[v138:byte] = v148
	v138 = loc61
	v139 = 6<32>
	v138 = v138 >>u v139
	loc93 = v138
	v138 = loc93
	v139 = 0x3F<32>
	v138 = v138 & v139
	loc94 = v138
	v138 = loc94
	v139 = 0x80<32>
	v138 = v138 | v139
	loc95 = v138
	v138 = loc95
	v139 = 0xFF<32>
	v138 = v138 & v139
	loc96 = v138
	v138 = arg5
	v138 = Mem0[v138:word32]
	loc97 = v138
	v138 = loc97
	v139 = 1<32>
	v138 = v138 + v139
	loc98 = v138
	v138 = arg5
	v139 = loc98
	Mem0[v138:word32] = v139
	v138 = loc97
	v139 = loc96
	v149 = SLICE(v139, byte, 0)
	Mem0[v138:byte] = v149
	v138 = loc61
	v139 = 0x3F<32>
	v138 = v138 & v139
	loc99 = v138
	v138 = loc99
	v139 = 0x80<32>
	v138 = v138 | v139
	loc100 = v138
	v138 = loc100
	v139 = 0xFF<32>
	v138 = v138 & v139
	loc101 = v138
	v138 = arg5
	v138 = Mem0[v138:word32]
	loc102 = v138
	v138 = loc102
	v139 = 1<32>
	v138 = v138 + v139
	loc103 = v138
	v138 = arg5
	v139 = loc103
	Mem0[v138:word32] = v139
	v138 = loc102
	v139 = loc101
	v150 = SLICE(v139, byte, 0)
	Mem0[v138:byte] = v150
	goto l00119333
	// succ:  l00119333
l00119052:
	v138 = loc60
	v139 = 0xFFFF<32>
	v138 = v138 & v139
	v139 = 0xDC00<32>
	v140 = v138 < v139
	loc104 = v140
	v138 = loc104
	v140 = v138 == 0<32>
	branch !v140 l0011913E
	// succ:  l00119065 l0011913E
l00119065:
	v138 = loc60
	v139 = 0xFFFF<32>
	v138 = v138 & v139
	v139 = 0xE000<32>
	v140 = v138 < v139
	loc29 = v140
	v138 = loc29
	branch !v138 l0011907E
	// succ:  l00119077 l0011907E
l00119077:
	v138 = 2<32>
	loc8 = v138
	goto l00119351
	// succ:  l00119351
l0011907E:
	v138 = arg5
	v138 = Mem0[v138:word32]
	loc30 = v138
	v138 = loc30
	loc31 = v138
	v138 = loc10
	v139 = loc31
	v138 = v138 - v139
	loc32 = v138
	v138 = loc32
	v139 = 3<32>
	v140 = v138 < v139
	loc34 = v140
	v138 = loc34
	branch !v138 l001190A2
	// succ:  l0011909B l001190A2
l0011909B:
	v138 = 1<32>
	loc8 = v138
	goto l00119351
	// succ:  l00119351
l001190A2:
	v138 = loc61
	v139 = 0xC<32>
	v138 = v138 >>u v139
	loc35 = v138
	v138 = loc35
	v139 = 0xE0<32>
	v138 = v138 | v139
	loc36 = v138
	v138 = loc36
	v139 = 0xFF<32>
	v138 = v138 & v139
	loc37 = v138
	v138 = loc30
	v139 = 1<32>
	v138 = v138 + v139
	loc38 = v138
	v138 = arg5
	v139 = loc38
	Mem0[v138:word32] = v139
	v138 = loc30
	v139 = loc37
	v151 = SLICE(v139, byte, 0)
	Mem0[v138:byte] = v151
	v138 = loc61
	v139 = 6<32>
	v138 = v138 >>u v139
	loc39 = v138
	v138 = loc39
	v139 = 0x3F<32>
	v138 = v138 & v139
	loc40 = v138
	v138 = loc40
	v139 = 0x80<32>
	v138 = v138 | v139
	loc41 = v138
	v138 = loc41
	v139 = 0xFF<32>
	v138 = v138 & v139
	loc42 = v138
	v138 = arg5
	v138 = Mem0[v138:word32]
	loc43 = v138
	v138 = loc43
	v139 = 1<32>
	v138 = v138 + v139
	loc45 = v138
	v138 = arg5
	v139 = loc45
	Mem0[v138:word32] = v139
	v138 = loc43
	v139 = loc42
	v152 = SLICE(v139, byte, 0)
	Mem0[v138:byte] = v152
	v138 = loc61
	v139 = 0x3F<32>
	v138 = v138 & v139
	loc46 = v138
	v138 = loc46
	v139 = 0x80<32>
	v138 = v138 | v139
	loc47 = v138
	v138 = loc47
	v139 = 0xFF<32>
	v138 = v138 & v139
	loc48 = v138
	v138 = arg5
	v138 = Mem0[v138:word32]
	loc49 = v138
	v138 = loc49
	v139 = 1<32>
	v138 = v138 + v139
	loc50 = v138
	v138 = arg5
	v139 = loc50
	Mem0[v138:word32] = v139
	v138 = loc49
	v139 = loc48
	v153 = SLICE(v139, byte, 0)
	Mem0[v138:byte] = v153
	goto l00119333
	// succ:  l00119333
l0011913E:
	v138 = loc59
	loc105 = v138
	v138 = loc57
	v139 = loc105
	v138 = v138 - v139
	loc106 = v138
	v138 = loc106
	v139 = 4<32>
	v140 = v138 < v139
	loc107 = v140
	v138 = loc107
	branch !v138 l0011915B
	// succ:  l00119154 l0011915B
l00119154:
	v138 = 1<32>
	loc8 = v138
	goto l00119351
	// succ:  l00119351
l0011915B:
	v138 = loc59
	v139 = 2<32>
	v138 = v138 + v139
	loc108 = v138
	v138 = loc108
	v154 = Mem0[v138:int16]
	v138 = CONVERT(v154, int16, word32)
	loc109 = v138
	v138 = loc109
	v139 = 0xFFFF<32>
	v138 = v138 & v139
	loc110 = v138
	v138 = loc110
	v139 = 0xFC00<32>
	v138 = v138 & v139
	loc111 = v138
	v138 = loc111
	v139 = 0xDC00<32>
	v140 = v138 == v139
	loc112 = v140
	v138 = loc112
	v140 = v138 == 0<32>
	branch !v140 l00119190
	// succ:  l00119189 l00119190
l00119189:
	v138 = 2<32>
	loc8 = v138
	goto l00119351
	// succ:  l00119351
l00119190:
	v138 = arg5
	v138 = Mem0[v138:word32]
	loc113 = v138
	v138 = loc10
	v139 = loc113
	v138 = v138 - v139
	loc114 = v138
	v138 = loc114
	v139 = 4<32>
	v140 = v138 < v139
	loc115 = v140
	v138 = loc115
	branch !v138 l001191B0
	// succ:  l001191A9 l001191B0
l001191A9:
	v138 = 1<32>
	loc8 = v138
	goto l00119351
	// succ:  l00119351
l001191B0:
	v138 = loc61
	v139 = 0x3C0<32>
	v138 = v138 & v139
	loc116 = v138
	v138 = loc116
	v139 = 0xA<32>
	v138 = v138 << v139
	loc117 = v138
	v138 = loc117
	v139 = 0x10000<32>
	v138 = v138 + v139
	loc118 = v138
	v138 = loc61
	v139 = 0xA<32>
	v138 = v138 << v139
	loc120 = v138
	v138 = loc120
	v139 = 0xFC00<32>
	v138 = v138 & v139
	loc121 = v138
	v138 = loc118
	v139 = loc121
	v138 = v138 | v139
	loc122 = v138
	v138 = loc110
	v139 = 0x3FF<32>
	v138 = v138 & v139
	loc123 = v138
	v138 = loc122
	v139 = loc123
	v138 = v138 | v139
	loc124 = v138
	v138 = loc124
	v139 = arg6
	v140 = v138 >u v139
	loc125 = v140
	v138 = loc125
	branch !v138 l00119200
	// succ:  l001191F9 l00119200
l001191F9:
	v138 = 2<32>
	loc8 = v138
	goto l00119351
	// succ:  l00119351
l00119200:
	v138 = arg2
	v139 = loc108
	Mem0[v138:word32] = v139
	v138 = loc116
	v139 = 6<32>
	v138 = v138 >>u v139
	loc126 = v138
	v138 = loc126
	v139 = 1<32>
	v138 = v138 + v139
	loc127 = v138
	v138 = loc127
	v139 = 2<32>
	v138 = v138 >>u v139
	loc128 = v138
	v138 = loc128
	v139 = 0xF0<32>
	v138 = v138 | v139
	loc129 = v138
	v138 = loc129
	v139 = 0xFF<32>
	v138 = v138 & v139
	loc131 = v138
	v138 = arg5
	v138 = Mem0[v138:word32]
	loc132 = v138
	v138 = loc132
	v139 = 1<32>
	v138 = v138 + v139
	loc133 = v138
	v138 = arg5
	v139 = loc133
	Mem0[v138:word32] = v139
	v138 = loc132
	v139 = loc131
	v155 = SLICE(v139, byte, 0)
	Mem0[v138:byte] = v155
	v138 = loc127
	v139 = 4<32>
	v138 = v138 << v139
	loc134 = v138
	v138 = loc134
	v139 = 0x30<32>
	v138 = v138 & v139
	loc135 = v138
	v138 = loc61
	v139 = 2<32>
	v138 = v138 >>u v139
	loc136 = v138
	v138 = loc136
	v139 = 0xF<32>
	v138 = v138 & v139
	loc137 = v138
	v138 = loc137
	v139 = loc135
	v138 = v138 | v139
	loc138 = v138
	v138 = loc138
	v139 = 0x80<32>
	v138 = v138 | v139
	loc139 = v138
	v138 = loc139
	v139 = 0xFF<32>
	v138 = v138 & v139
	loc140 = v138
	v138 = arg5
	v138 = Mem0[v138:word32]
	loc12 = v138
	v138 = loc12
	v139 = 1<32>
	v138 = v138 + v139
	loc13 = v138
	v138 = arg5
	v139 = loc13
	Mem0[v138:word32] = v139
	v138 = loc12
	v139 = loc140
	v156 = SLICE(v139, byte, 0)
	Mem0[v138:byte] = v156
	v138 = loc61
	v139 = 4<32>
	v138 = v138 << v139
	loc14 = v138
	v138 = loc14
	v139 = 0x30<32>
	v138 = v138 & v139
	loc15 = v138
	v138 = loc110
	v139 = 6<32>
	v138 = v138 >>u v139
	loc16 = v138
	v138 = loc16
	v139 = 0xF<32>
	v138 = v138 & v139
	loc17 = v138
	v138 = loc15
	v139 = loc17
	v138 = v138 | v139
	loc18 = v138
	v138 = loc18
	v139 = 0x80<32>
	v138 = v138 | v139
	loc19 = v138
	v138 = loc19
	v139 = 0xFF<32>
	v138 = v138 & v139
	loc20 = v138
	v138 = arg5
	v138 = Mem0[v138:word32]
	loc21 = v138
	v138 = loc21
	v139 = 1<32>
	v138 = v138 + v139
	loc23 = v138
	v138 = arg5
	v139 = loc23
	Mem0[v138:word32] = v139
	v138 = loc21
	v139 = loc20
	v157 = SLICE(v139, byte, 0)
	Mem0[v138:byte] = v157
	v138 = loc110
	v139 = 0x3F<32>
	v138 = v138 & v139
	loc24 = v138
	v138 = loc24
	v139 = 0x80<32>
	v138 = v138 | v139
	loc25 = v138
	v138 = loc25
	v139 = 0xFF<32>
	v138 = v138 & v139
	loc26 = v138
	v138 = arg5
	v138 = Mem0[v138:word32]
	loc27 = v138
	v138 = loc27
	v139 = 1<32>
	v138 = v138 + v139
	loc28 = v138
	v138 = arg5
	v139 = loc28
	Mem0[v138:word32] = v139
	v138 = loc27
	v139 = loc26
	v158 = SLICE(v139, byte, 0)
	Mem0[v138:byte] = v158
	// succ:  l00119332
l00119332:
	// succ:  l00119333
l00119333:
	v138 = arg2
	v138 = Mem0[v138:word32]
	loc51 = v138
	v138 = loc51
	v139 = 2<32>
	v138 = v138 + v139
	loc52 = v138
	v138 = arg2
	v139 = loc52
	Mem0[v138:word32] = v139
	v138 = loc52
	loc59 = v138
	goto l00118E4E
	// succ:  l00118E4E
l00119351:
	// succ:  l00119351
l00119351:
	v138 = loc8
	return v138
	// succ:  fn00118DA0_exit
l00119355:
	return v138
	// succ:  fn00118DA0_exit
fn00118DA0_exit:


// fn00119357
// Return size: 0
void fn00119357(word32 arg0)
fn00119357_entry:
	// succ:  l00119357
l00119357:
	v19 = Mem0[0x00140030<p32>:word32]
	loc16 = v19
	v19 = arg0
	v20 = 0x24A8<32>
	Mem0[v19:word32] = v20
	v19 = arg0
	v20 = 8<32>
	v19 = v19 + v20
	loc2 = v19
	v19 = arg0
	v20 = 0xC<32>
	v19 = v19 + v20
	loc7 = v19
	v19 = 0<32>
	loc1 = v19
	// succ:  l0011937A
l0011937A:
	v19 = loc7
	v19 = Mem0[v19:word32]
	loc8 = v19
	v19 = loc2
	v19 = Mem0[v19:word32]
	loc9 = v19
	v19 = loc8
	v20 = loc9
	v19 = v19 - v20
	loc10 = v19
	v19 = loc10
	v20 = 2<32>
	v19 = v19 >> v20
	loc11 = v19
	v19 = loc1
	v20 = loc11
	v21 = v19 <u v20
	loc12 = v21
	v19 = loc12
	v21 = v19 == 0<32>
	branch !v21 l001193A7
	// succ:  l001193A4 l001193A7
l001193A4:
	goto l001193DC
	// succ:  l001193DC
l001193A7:
	v19 = loc9
	loc14 = v19
	v19 = loc14
	v20 = loc1
	v22 = 2<32>
	v20 = v20 << v22
	v19 = v19 + v20
	loc3 = v19
	v19 = loc3
	v19 = Mem0[v19:word32]
	loc4 = v19
	v19 = loc4
	v20 = 0<32>
	v21 = v19 == v20
	loc5 = v21
	v19 = loc5
	v21 = v19 == 0<32>
	branch !v21 l001193CF
	// succ:  l001193C8 l001193CF
l001193C8:
	v19 = loc4
	v19 = fn0011B43F(v19)
	// succ:  l001193CF
l001193CF:
	v19 = loc1
	v20 = 1<32>
	v19 = v19 + v20
	loc6 = v19
	v19 = loc6
	loc1 = v19
	goto l00119357
	// succ:  l00119357
l001193DC:
	v19 = arg0
	v20 = 0x90<32>
	v19 = v19 + v20
	loc13 = v19
	v19 = loc13
	fn0011BAF7(v19)
	v19 = loc2
	fn00119406(v19)
	return
	// succ:  fn00119357_exit
l001193F1:
	return
	// succ:  fn00119357_exit
fn00119357_exit:


// fn001193F3
// Return size: 0
void fn001193F3(word32 arg0)
fn001193F3_entry:
	// succ:  l001193F3
l001193F3:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn00119357(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn001193F3_exit
l00119404:
	return
	// succ:  fn001193F3_exit
fn001193F3_exit:


// fn00119406
// Return size: 0
void fn00119406(word32 arg0)
fn00119406_entry:
	// succ:  l00119406
l00119406:
	v15 = Mem0[0x00140030<p32>:word32]
	loc12 = v15
	v15 = arg0
	v15 = Mem0[v15:word32]
	loc2 = v15
	v15 = loc2
	v16 = 0<32>
	v17 = v15 == v16
	loc3 = v17
	// succ:  l0011941A
l0011941A:
	v15 = loc3
	v17 = v15 == 0<32>
	branch !v17 l00119488
	// succ:  l00119421 l00119488
l00119421:
	v15 = arg0
	v16 = 4<32>
	v15 = v15 + v16
	loc4 = v15
	v15 = loc4
	v15 = Mem0[v15:word32]
	loc1 = v15
	v15 = loc1
	loc6 = v15
	// succ:  l00119435
l00119435:
	v15 = loc6
	v16 = loc2
	v17 = v15 == v16
	loc5 = v17
	v15 = loc5
	branch !v15 l00119445
	// succ:  l00119442 l00119445
l00119442:
	goto l00119459
	// succ:  l00119459
l00119445:
	v15 = loc6
	v16 = 0xFFFFFFFC<32>
	v15 = v15 + v16
	loc7 = v15
	v15 = loc4
	v16 = loc7
	Mem0[v15:word32] = v16
	v15 = loc7
	loc6 = v15
	goto l00119421
	// succ:  l00119421
l00119459:
	v15 = arg0
	v16 = 0x10<32>
	v15 = v15 + v16
	loc8 = v15
	v15 = loc8
	v16 = loc2
	v17 = v15 == v16
	loc9 = v17
	v15 = loc9
	branch !v15 l0011947F
	// succ:  l0011946D l0011947F
l0011946D:
	v15 = arg0
	v16 = 0x80<32>
	v15 = v15 + v16
	loc10 = v15
	v15 = loc10
	v16 = 0<32>
	v18 = SLICE(v16, byte, 0)
	Mem0[v15:byte] = v18
	goto l00119488
	// succ:  l00119488
l0011947F:
	v15 = loc2
	fn0011B709(v15)
	goto l00119488
	// succ:  l00119488
l00119486:
	// succ:  l00119488
l00119488:
	// succ:  l00119488
l00119488:
	return
	// succ:  fn00119406_exit
l0011948A:
	return
	// succ:  fn00119406_exit
fn00119406_exit:


// fn0011948C
// Return size: 0
void fn0011948C(word32 arg0)
fn0011948C_entry:
	// succ:  l0011948C
l0011948C:
	v11 = Mem0[0x00140030<p32>:word32]
	loc8 = v11
	v11 = arg0
	v12 = 0x24BC<32>
	Mem0[v11:word32] = v12
	v11 = arg0
	v12 = 8<32>
	v11 = v11 + v12
	loc1 = v11
	v11 = loc1
	v11 = Mem0[v11:word32]
	loc2 = v11
	v11 = loc2
	v12 = 0<32>
	v13 = v11 == v12
	loc3 = v13
	v11 = loc3
	v13 = v11 == 0<32>
	branch !v13 l001194DC
	// succ:  l001194B5 l001194DC
l001194B5:
	v11 = arg0
	v12 = 0xC<32>
	v11 = v11 + v12
	loc4 = v11
	v11 = loc4
	v14 = Mem0[v11:int8]
	v11 = CONVERT(v14, int8, word32)
	loc5 = v11
	v11 = loc5
	v12 = 0x18<32>
	v11 = v11 << v12
	v12 = 0x18<32>
	v11 = v11 >> v12
	v12 = 0<32>
	v13 = v11 == v12
	loc6 = v13
	v11 = loc6
	v13 = v11 == 0<32>
	branch !v13 l001194DB
	// succ:  l001194D5 l001194DB
l001194D5:
	v11 = loc2
	fn0011B717(v11)
	// succ:  l001194DB
l001194DB:
	// succ:  l001194DC
l001194DC:
	return
	// succ:  fn0011948C_exit
l001194DD:
	return
	// succ:  fn0011948C_exit
fn0011948C_exit:


// fn001194DF
// Return size: 0
void fn001194DF(word32 arg0)
fn001194DF_entry:
	// succ:  l001194DF
l001194DF:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011948C(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn001194DF_exit
l001194F0:
	return
	// succ:  fn001194DF_exit
fn001194DF_exit:


// fn001194F2
// Return size: 0
word32 fn001194F2(word32 arg0, word32 arg1)
fn001194F2_entry:
	// succ:  l001194F2
l001194F2:
	v12 = Mem0[0x00140030<p32>:word32]
	loc10 = v12
	v12 = arg1
	v13 = 0x18<32>
	v12 = v12 << v13
	v13 = 0x18<32>
	v12 = v12 >> v13
	v13 = 0xFFFFFFFF<32>
	v14 = v12 > v13
	loc8 = v14
	v12 = loc8
	branch !v12 l00119534
	// succ:  l00119509 l00119534
l00119509:
	v12 = arg1
	v13 = 0xFF<32>
	v12 = v12 & v13
	loc2 = v12
	v12 = fn001197B3()
	loc3 = v12
	v12 = loc3
	v13 = loc2
	v15 = 2<32>
	v13 = v13 << v15
	v12 = v12 + v13
	loc4 = v12
	v12 = loc4
	v12 = Mem0[v12:word32]
	loc5 = v12
	v12 = loc5
	v13 = 0xFF<32>
	v12 = v12 & v13
	loc6 = v12
	v12 = loc6
	loc7 = v12
	goto l00119538
	// succ:  l00119538
l00119534:
	v12 = arg1
	loc7 = v12
	// succ:  l00119538
l00119538:
	v12 = loc7
	return v12
	// succ:  fn001194F2_exit
l0011953C:
	return v12
	// succ:  fn001194F2_exit
fn001194F2_exit:


// fn0011953E
// Return size: 0
word32 fn0011953E(word32 arg0, word32 arg1, word32 arg2)
fn0011953E_entry:
	// succ:  l0011953E
l0011953E:
	v16 = Mem0[0x00140030<p32>:word32]
	loc15 = v16
	v16 = arg1
	loc3 = v16
	// succ:  l0011954A
l0011954A:
	v16 = loc3
	v17 = arg2
	v18 = v16 == v17
	loc6 = v18
	v16 = loc6
	branch !v16 l0011955A
	// succ:  l00119557 l0011955A
l00119557:
	goto l001195B8
	// succ:  l001195B8
l0011955A:
	v16 = loc3
	v19 = Mem0[v16:int8]
	v16 = CONVERT(v19, int8, word32)
	loc7 = v16
	v16 = loc7
	v17 = 0x18<32>
	v16 = v16 << v17
	v17 = 0x18<32>
	v16 = v16 >> v17
	v17 = 0xFFFFFFFF<32>
	v18 = v16 > v17
	loc13 = v18
	v16 = loc13
	branch !v16 l0011959F
	// succ:  l00119572 l0011959F
l00119572:
	v16 = loc7
	v17 = 0x18<32>
	v16 = v16 << v17
	v17 = 0x18<32>
	v16 = v16 >> v17
	loc8 = v16
	v16 = fn001197B3()
	loc9 = v16
	v16 = loc9
	v17 = loc8
	v20 = 2<32>
	v17 = v17 << v20
	v16 = v16 + v17
	loc10 = v16
	v16 = loc10
	v16 = Mem0[v16:word32]
	loc11 = v16
	v16 = loc11
	v17 = 0xFF<32>
	v16 = v16 & v17
	loc12 = v16
	v16 = loc12
	loc4 = v16
	goto l001195A3
	// succ:  l001195A3
l0011959F:
	v16 = loc7
	loc4 = v16
	// succ:  l001195A3
l001195A3:
	v16 = loc3
	v17 = loc4
	v21 = SLICE(v17, byte, 0)
	Mem0[v16:byte] = v21
	v16 = loc3
	v17 = 1<32>
	v16 = v16 + v17
	loc5 = v16
	v16 = loc5
	loc3 = v16
	goto l0011953E
	// succ:  l0011953E
l001195B8:
	v16 = arg2
	return v16
	// succ:  fn0011953E_exit
l001195BD:
	return v16
	// succ:  fn0011953E_exit
fn0011953E_exit:


// fn001195BF
// Return size: 0
word32 fn001195BF(word32 arg0, word32 arg1)
fn001195BF_entry:
	// succ:  l001195BF
l001195BF:
	v12 = Mem0[0x00140030<p32>:word32]
	loc10 = v12
	v12 = arg1
	v13 = 0x18<32>
	v12 = v12 << v13
	v13 = 0x18<32>
	v12 = v12 >> v13
	v13 = 0xFFFFFFFF<32>
	v14 = v12 > v13
	loc8 = v14
	v12 = loc8
	branch !v12 l00119603
	// succ:  l001195D6 l00119603
l001195D6:
	v12 = arg1
	v13 = 0x18<32>
	v12 = v12 << v13
	v13 = 0x18<32>
	v12 = v12 >> v13
	loc2 = v12
	v12 = fn00119770()
	loc3 = v12
	v12 = loc3
	v13 = loc2
	v15 = 2<32>
	v13 = v13 << v15
	v12 = v12 + v13
	loc4 = v12
	v12 = loc4
	v12 = Mem0[v12:word32]
	loc5 = v12
	v12 = loc5
	v13 = 0xFF<32>
	v12 = v12 & v13
	loc6 = v12
	v12 = loc6
	loc7 = v12
	goto l00119607
	// succ:  l00119607
l00119603:
	v12 = arg1
	loc7 = v12
	// succ:  l00119607
l00119607:
	v12 = loc7
	return v12
	// succ:  fn001195BF_exit
l0011960B:
	return v12
	// succ:  fn001195BF_exit
fn001195BF_exit:


// fn0011960D
// Return size: 0
word32 fn0011960D(word32 arg0, word32 arg1, word32 arg2)
fn0011960D_entry:
	// succ:  l0011960D
l0011960D:
	v16 = Mem0[0x00140030<p32>:word32]
	loc15 = v16
	v16 = arg1
	loc3 = v16
	// succ:  l00119619
l00119619:
	v16 = loc3
	v17 = arg2
	v18 = v16 == v17
	loc6 = v18
	v16 = loc6
	branch !v16 l00119629
	// succ:  l00119626 l00119629
l00119626:
	goto l00119687
	// succ:  l00119687
l00119629:
	v16 = loc3
	v19 = Mem0[v16:int8]
	v16 = CONVERT(v19, int8, word32)
	loc7 = v16
	v16 = loc7
	v17 = 0x18<32>
	v16 = v16 << v17
	v17 = 0x18<32>
	v16 = v16 >> v17
	v17 = 0xFFFFFFFF<32>
	v18 = v16 > v17
	loc13 = v18
	v16 = loc13
	branch !v16 l0011966E
	// succ:  l00119641 l0011966E
l00119641:
	v16 = loc7
	v17 = 0x18<32>
	v16 = v16 << v17
	v17 = 0x18<32>
	v16 = v16 >> v17
	loc8 = v16
	v16 = fn00119770()
	loc9 = v16
	v16 = loc9
	v17 = loc8
	v20 = 2<32>
	v17 = v17 << v20
	v16 = v16 + v17
	loc10 = v16
	v16 = loc10
	v16 = Mem0[v16:word32]
	loc11 = v16
	v16 = loc11
	v17 = 0xFF<32>
	v16 = v16 & v17
	loc12 = v16
	v16 = loc12
	loc4 = v16
	goto l00119672
	// succ:  l00119672
l0011966E:
	v16 = loc7
	loc4 = v16
	// succ:  l00119672
l00119672:
	v16 = loc3
	v17 = loc4
	v21 = SLICE(v17, byte, 0)
	Mem0[v16:byte] = v21
	v16 = loc3
	v17 = 1<32>
	v16 = v16 + v17
	loc5 = v16
	v16 = loc5
	loc3 = v16
	goto l0011960D
	// succ:  l0011960D
l00119687:
	v16 = arg2
	return v16
	// succ:  fn0011960D_exit
l0011968C:
	return v16
	// succ:  fn0011960D_exit
fn0011960D_exit:


// fn0011968E
// Return size: 0
word32 fn0011968E(word32 arg0, word32 arg1)
fn0011968E_entry:
	// succ:  l0011968E
l0011968E:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg1
	return v5
	// succ:  fn0011968E_exit
l00119697:
	return v5
	// succ:  fn0011968E_exit
fn0011968E_exit:


// fn00119699
// Return size: 0
word32 fn00119699(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn00119699_entry:
	// succ:  l00119699
l00119699:
	v11 = Mem0[0x00140030<p32>:word32]
	loc11 = v11
	v11 = arg3
	loc4 = v11
	v11 = arg1
	loc5 = v11
	// succ:  l001196A9
l001196A9:
	v11 = loc5
	v12 = arg2
	v13 = v11 == v12
	loc6 = v13
	v11 = loc6
	branch !v11 l001196B9
	// succ:  l001196B6 l001196B9
l001196B6:
	goto l001196DF
	// succ:  l001196DF
l001196B9:
	v11 = loc5
	v14 = Mem0[v11:int8]
	v11 = CONVERT(v14, int8, word32)
	loc7 = v11
	v11 = loc4
	v12 = loc7
	v15 = SLICE(v12, byte, 0)
	Mem0[v11:byte] = v15
	v11 = loc5
	v12 = 1<32>
	v11 = v11 + v12
	loc8 = v11
	v11 = loc4
	v12 = 1<32>
	v11 = v11 + v12
	loc9 = v11
	v11 = loc9
	loc4 = v11
	v11 = loc8
	loc5 = v11
	goto l00119699
	// succ:  l00119699
l001196DF:
	v11 = arg2
	return v11
	// succ:  fn00119699_exit
l001196E4:
	return v11
	// succ:  fn00119699_exit
fn00119699_exit:


// fn001196E6
// Return size: 0
word32 fn001196E6(word32 arg0, word32 arg1, word32 arg2)
fn001196E6_entry:
	// succ:  l001196E6
l001196E6:
	v7 = Mem0[0x00140030<p32>:word32]
	loc6 = v7
	v7 = arg1
	v8 = 0x18<32>
	v7 = v7 << v8
	v8 = 0x18<32>
	v7 = v7 >> v8
	v8 = 0xFFFFFFFF<32>
	v9 = v7 > v8
	loc4 = v9
	v7 = loc4
	branch !v7 l00119700
	// succ:  l001196FD l00119700
l001196FD:
	v7 = arg1
	goto l00119702
	// succ:  l00119702
l00119700:
	v7 = arg2
	// succ:  l00119702
l00119702:
	loc3 = v7
	v7 = loc3
	return v7
	// succ:  fn001196E6_exit
l00119708:
	return v7
	// succ:  fn001196E6_exit
fn001196E6_exit:


// fn0011970A
// Return size: 0
word32 fn0011970A(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn0011970A_entry:
	// succ:  l0011970A
l0011970A:
	v13 = Mem0[0x00140030<p32>:word32]
	loc14 = v13
	v13 = arg4
	loc6 = v13
	v13 = arg1
	loc7 = v13
	// succ:  l0011971A
l0011971A:
	v13 = loc7
	v14 = arg2
	v15 = v13 == v14
	loc8 = v15
	v13 = loc8
	branch !v13 l0011972A
	// succ:  l00119727 l0011972A
l00119727:
	goto l00119769
	// succ:  l00119769
l0011972A:
	v13 = loc7
	v16 = Mem0[v13:int8]
	v13 = CONVERT(v16, int8, word32)
	loc9 = v13
	v13 = loc9
	v14 = 0x18<32>
	v13 = v13 << v14
	v14 = 0x18<32>
	v13 = v13 >> v14
	v14 = 0xFFFFFFFF<32>
	v15 = v13 > v14
	loc12 = v15
	v13 = loc12
	branch !v13 l00119745
	// succ:  l00119742 l00119745
l00119742:
	v13 = loc9
	goto l00119747
	// succ:  l00119747
l00119745:
	v13 = arg3
	// succ:  l00119747
l00119747:
	loc5 = v13
	v13 = loc6
	v14 = loc5
	v17 = SLICE(v14, byte, 0)
	Mem0[v13:byte] = v17
	v13 = loc7
	v14 = 1<32>
	v13 = v13 + v14
	loc10 = v13
	v13 = loc6
	v14 = 1<32>
	v13 = v13 + v14
	loc11 = v13
	v13 = loc11
	loc6 = v13
	v13 = loc10
	loc7 = v13
	goto l0011970A
	// succ:  l0011970A
l00119769:
	v13 = arg2
	return v13
	// succ:  fn0011970A_exit
l0011976E:
	return v13
	// succ:  fn0011970A_exit
fn0011970A_exit:


// fn00119770
// Return size: 0
word32 fn00119770()
fn00119770_entry:
	// succ:  l00119770
l00119770:
	v11 = Mem0[0x00140030<p32>:word32]
	loc7 = v11
	v11 = 0<32>
	Mem0[0x00140048<p32>:word32] = v11
	v11 = 0x1BF<32>
	v11 = invoke_i(v11)
	loc0 = v11
	v11 = Mem0[0x00140048<p32>:word32]
	loc1 = v11
	v11 = 0<32>
	Mem0[0x00140048<p32>:word32] = v11
	v11 = loc1
	v12 = 1<32>
	v11 = v11 & v12
	loc2 = v11
	v11 = loc2
	branch !v11 l001197A3
	// succ:  l00119794 l001197A3
l00119794:
	v11 = 0<32>
	v11 = ___cxa_find_matching_catch_3(v11)
	loc4 = v11
	v11 = Mem0[0x00140094<p32>:word32]
	loc5 = v11
	v11 = loc4
	fn000D0E65(v11)
	goto l001197AD
	// succ:  l001197AD
l001197A3:
	v11 = loc0
	v11 = Mem0[v11:word32]
	loc3 = v11
	v11 = loc3
	return v11
	// succ:  fn00119770_exit
l001197AD:
	v11 = 0<32>
	return v11
	// succ:  fn00119770_exit
l001197B1:
	return v11
	// succ:  fn00119770_exit
fn00119770_exit:


// fn001197B3
// Return size: 0
word32 fn001197B3()
fn001197B3_entry:
	// succ:  l001197B3
l001197B3:
	v11 = Mem0[0x00140030<p32>:word32]
	loc7 = v11
	v11 = 0<32>
	Mem0[0x00140048<p32>:word32] = v11
	v11 = 0x1C0<32>
	v11 = invoke_i(v11)
	loc0 = v11
	v11 = Mem0[0x00140048<p32>:word32]
	loc1 = v11
	v11 = 0<32>
	Mem0[0x00140048<p32>:word32] = v11
	v11 = loc1
	v12 = 1<32>
	v11 = v11 & v12
	loc2 = v11
	v11 = loc2
	branch !v11 l001197E6
	// succ:  l001197D7 l001197E6
l001197D7:
	v11 = 0<32>
	v11 = ___cxa_find_matching_catch_3(v11)
	loc4 = v11
	v11 = Mem0[0x00140094<p32>:word32]
	loc5 = v11
	v11 = loc4
	fn000D0E65(v11)
	goto l001197F0
	// succ:  l001197F0
l001197E6:
	v11 = loc0
	v11 = Mem0[v11:word32]
	loc3 = v11
	v11 = loc3
	return v11
	// succ:  fn001197B3_exit
l001197F0:
	v11 = 0<32>
	return v11
	// succ:  fn001197B3_exit
l001197F4:
	return v11
	// succ:  fn001197B3_exit
fn001197B3_exit:


// fn001197F6
// Return size: 0
word32 fn001197F6()
fn001197F6_entry:
	// succ:  l001197F6
l001197F6:
	v11 = Mem0[0x00140030<p32>:word32]
	loc7 = v11
	v11 = 0<32>
	Mem0[0x00140048<p32>:word32] = v11
	v11 = 0x1C1<32>
	v11 = invoke_i(v11)
	loc0 = v11
	v11 = Mem0[0x00140048<p32>:word32]
	loc1 = v11
	v11 = 0<32>
	Mem0[0x00140048<p32>:word32] = v11
	v11 = loc1
	v12 = 1<32>
	v11 = v11 & v12
	loc2 = v11
	v11 = loc2
	branch !v11 l00119829
	// succ:  l0011981A l00119829
l0011981A:
	v11 = 0<32>
	v11 = ___cxa_find_matching_catch_3(v11)
	loc4 = v11
	v11 = Mem0[0x00140094<p32>:word32]
	loc5 = v11
	v11 = loc4
	fn000D0E65(v11)
	goto l00119833
	// succ:  l00119833
l00119829:
	v11 = loc0
	v11 = Mem0[v11:word32]
	loc3 = v11
	v11 = loc3
	return v11
	// succ:  fn001197F6_exit
l00119833:
	v11 = 0<32>
	return v11
	// succ:  fn001197F6_exit
l00119837:
	return v11
	// succ:  fn001197F6_exit
fn001197F6_exit:


// fn00119839
// Return size: 0
void fn00119839(word32 arg0)
fn00119839_entry:
	// succ:  l00119839
l00119839:
	v6 = Mem0[0x00140030<p32>:word32]
	loc3 = v6
	v6 = arg0
	v7 = 0x24F0<32>
	Mem0[v6:word32] = v7
	v6 = arg0
	v7 = 0xC<32>
	v6 = v6 + v7
	loc1 = v6
	v6 = loc1
	fn0011BAF7(v6)
	return
	// succ:  fn00119839_exit
l00119855:
	return
	// succ:  fn00119839_exit
fn00119839_exit:


// fn00119857
// Return size: 0
void fn00119857(word32 arg0)
fn00119857_entry:
	// succ:  l00119857
l00119857:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn00119839(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn00119857_exit
l00119868:
	return
	// succ:  fn00119857_exit
fn00119857_exit:


// fn0011986A
// Return size: 0
word32 fn0011986A(word32 arg0)
fn0011986A_entry:
	// succ:  l0011986A
l0011986A:
	v7 = Mem0[0x00140030<p32>:word32]
	loc4 = v7
	v7 = arg0
	v8 = 8<32>
	v7 = v7 + v8
	loc1 = v7
	v7 = loc1
	v9 = Mem0[v7:int8]
	v7 = CONVERT(v9, int8, word32)
	loc2 = v7
	v7 = loc2
	return v7
	// succ:  fn0011986A_exit
l00119881:
	return v7
	// succ:  fn0011986A_exit
fn0011986A_exit:


// fn00119883
// Return size: 0
word32 fn00119883(word32 arg0)
fn00119883_entry:
	// succ:  l00119883
l00119883:
	v7 = Mem0[0x00140030<p32>:word32]
	loc4 = v7
	v7 = arg0
	v8 = 9<32>
	v7 = v7 + v8
	loc1 = v7
	v7 = loc1
	v9 = Mem0[v7:int8]
	v7 = CONVERT(v9, int8, word32)
	loc2 = v7
	v7 = loc2
	return v7
	// succ:  fn00119883_exit
l0011989A:
	return v7
	// succ:  fn00119883_exit
fn00119883_exit:


// fn0011989C
// Return size: 0
void fn0011989C(word32 arg0, word32 arg1)
fn0011989C_entry:
	// succ:  l0011989C
l0011989C:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = arg1
	v7 = 0xC<32>
	v6 = v6 + v7
	loc2 = v6
	v6 = arg0
	v7 = loc2
	fn0011B8FA(v6, v7)
	return
	// succ:  fn0011989C_exit
l001198B1:
	return
	// succ:  fn0011989C_exit
fn0011989C_exit:


// fn001198B3
// Return size: 0
void fn001198B3(word32 arg0, word32 arg1)
fn001198B3_entry:
	// succ:  l001198B3
l001198B3:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 0<64>
	Mem0[v5:word64] = v6
	v5 = arg0
	v7 = 8<32>
	v5 = v5 + v7
	v7 = 0<32>
	Mem0[v5:word32] = v7
	v5 = arg0
	v7 = 0x4001<32>
	v8 = 4<32>
	fn0011B96D(v5, v7, v8)
	return
	// succ:  fn001198B3_exit
l001198D6:
	return
	// succ:  fn001198B3_exit
fn001198B3_exit:


// fn001198D8
// Return size: 0
void fn001198D8(word32 arg0, word32 arg1)
fn001198D8_entry:
	// succ:  l001198D8
l001198D8:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 0<64>
	Mem0[v5:word64] = v6
	v5 = arg0
	v7 = 8<32>
	v5 = v5 + v7
	v7 = 0<32>
	Mem0[v5:word32] = v7
	v5 = arg0
	v7 = 0x3FFB<32>
	v8 = 5<32>
	fn0011B96D(v5, v7, v8)
	return
	// succ:  fn001198D8_exit
l001198FB:
	return
	// succ:  fn001198D8_exit
fn001198D8_exit:


// fn001198FD
// Return size: 0
void fn001198FD(word32 arg0)
fn001198FD_entry:
	// succ:  l001198FD
l001198FD:
	v6 = Mem0[0x00140030<p32>:word32]
	loc3 = v6
	v6 = arg0
	v7 = 0x2518<32>
	Mem0[v6:word32] = v7
	v6 = arg0
	v7 = 0x10<32>
	v6 = v6 + v7
	loc1 = v6
	v6 = loc1
	fn0011BAF7(v6)
	return
	// succ:  fn001198FD_exit
l00119919:
	return
	// succ:  fn001198FD_exit
fn001198FD_exit:


// fn0011991B
// Return size: 0
void fn0011991B(word32 arg0)
fn0011991B_entry:
	// succ:  l0011991B
l0011991B:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn001198FD(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn0011991B_exit
l0011992C:
	return
	// succ:  fn0011991B_exit
fn0011991B_exit:


// fn0011992E
// Return size: 0
word32 fn0011992E(word32 arg0)
fn0011992E_entry:
	// succ:  l0011992E
l0011992E:
	v7 = Mem0[0x00140030<p32>:word32]
	loc4 = v7
	v7 = arg0
	v8 = 8<32>
	v7 = v7 + v8
	loc1 = v7
	v7 = loc1
	v7 = Mem0[v7:word32]
	loc2 = v7
	v7 = loc2
	return v7
	// succ:  fn0011992E_exit
l00119945:
	return v7
	// succ:  fn0011992E_exit
fn0011992E_exit:


// fn00119947
// Return size: 0
word32 fn00119947(word32 arg0)
fn00119947_entry:
	// succ:  l00119947
l00119947:
	v7 = Mem0[0x00140030<p32>:word32]
	loc4 = v7
	v7 = arg0
	v8 = 0xC<32>
	v7 = v7 + v8
	loc1 = v7
	v7 = loc1
	v7 = Mem0[v7:word32]
	loc2 = v7
	v7 = loc2
	return v7
	// succ:  fn00119947_exit
l0011995E:
	return v7
	// succ:  fn00119947_exit
fn00119947_exit:


// fn00119960
// Return size: 0
void fn00119960(word32 arg0, word32 arg1)
fn00119960_entry:
	// succ:  l00119960
l00119960:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = arg1
	v7 = 0x10<32>
	v6 = v6 + v7
	loc2 = v6
	v6 = arg0
	v7 = loc2
	fn0011B8FA(v6, v7)
	return
	// succ:  fn00119960_exit
l00119975:
	return
	// succ:  fn00119960_exit
fn00119960_exit:


// fn00119977
// Return size: 0
void fn00119977(word32 arg0, word32 arg1)
fn00119977_entry:
	// succ:  l00119977
l00119977:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = arg0
	v7 = 0<64>
	Mem0[v6:word64] = v7
	v6 = arg0
	v8 = 8<32>
	v6 = v6 + v8
	v8 = 0<32>
	Mem0[v6:word32] = v8
	v6 = 0x2550<32>
	v6 = fn000D7B05(v6)
	loc2 = v6
	v6 = arg0
	v8 = 0x2550<32>
	v9 = loc2
	fn0011C5CF(v6, v8, v9)
	return
	// succ:  fn00119977_exit
l001199A3:
	return
	// succ:  fn00119977_exit
fn00119977_exit:


// fn001199A5
// Return size: 0
void fn001199A5(word32 arg0, word32 arg1)
fn001199A5_entry:
	// succ:  l001199A5
l001199A5:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = arg0
	v7 = 0<64>
	Mem0[v6:word64] = v7
	v6 = arg0
	v8 = 8<32>
	v6 = v6 + v8
	v8 = 0<32>
	Mem0[v6:word32] = v8
	v6 = 0x2538<32>
	v6 = fn000D7B05(v6)
	loc2 = v6
	v6 = arg0
	v8 = 0x2538<32>
	v9 = loc2
	fn0011C5CF(v6, v8, v9)
	return
	// succ:  fn001199A5_exit
l001199D1:
	return
	// succ:  fn001199A5_exit
fn001199A5_exit:


// fn001199D3
// Return size: 0
void fn001199D3(word32 arg0)
fn001199D3_entry:
	// succ:  l001199D3
l001199D3:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn001199D3_exit
l001199DF:
	return
	// succ:  fn001199D3_exit
fn001199D3_exit:


// fn001199E1
// Return size: 0
void fn001199E1(word32 arg0)
fn001199E1_entry:
	// succ:  l001199E1
l001199E1:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn001199E1_exit
l001199ED:
	return
	// succ:  fn001199E1_exit
fn001199E1_exit:


// fn001199EF
// Return size: 0
word32 fn001199EF(word32 arg0, word32 arg1, word32 arg2)
fn001199EF_entry:
	// succ:  l001199EF
l001199EF:
	v12 = Mem0[0x00140030<p32>:word32]
	loc11 = v12
	v12 = arg2
	v13 = 0x80<32>
	v14 = v12 <u v13
	loc9 = v14
	v12 = loc9
	branch !v12 l00119A30
	// succ:  l00119A01 l00119A30
l00119A01:
	v12 = fn001197F6()
	loc3 = v12
	v12 = loc3
	v13 = arg2
	v15 = 1<32>
	v13 = v13 << v15
	v12 = v12 + v13
	loc4 = v12
	v12 = loc4
	v16 = Mem0[v12:int16]
	v12 = CONVERT(v16, int16, word32)
	loc5 = v12
	v12 = loc5
	v13 = arg1
	v12 = v12 & v13
	loc6 = v12
	v12 = loc6
	v13 = 0x10<32>
	v12 = v12 << v13
	v13 = 0x10<32>
	v12 = v12 >> v13
	v13 = 0<32>
	v14 = v12 != v13
	loc7 = v14
	v12 = loc7
	loc8 = v12
	goto l00119A34
	// succ:  l00119A34
l00119A30:
	v12 = 0<32>
	loc8 = v12
	// succ:  l00119A34
l00119A34:
	v12 = loc8
	return v12
	// succ:  fn001199EF_exit
l00119A38:
	return v12
	// succ:  fn001199EF_exit
fn001199EF_exit:


// fn00119A3A
// Return size: 0
word32 fn00119A3A(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn00119A3A_entry:
	// succ:  l00119A3A
l00119A3A:
	v18 = Mem0[0x00140030<p32>:word32]
	loc18 = v18
	v18 = arg3
	loc4 = v18
	v18 = arg1
	loc5 = v18
	// succ:  l00119A4A
l00119A4A:
	v18 = loc5
	v19 = arg2
	v20 = v18 == v19
	loc10 = v20
	v18 = loc10
	branch !v18 l00119A5A
	// succ:  l00119A57 l00119A5A
l00119A57:
	goto l00119ABE
	// succ:  l00119ABE
l00119A5A:
	v18 = loc5
	v18 = Mem0[v18:word32]
	loc11 = v18
	v18 = loc11
	v19 = 0x80<32>
	v20 = v18 <u v19
	loc16 = v20
	v18 = loc16
	branch !v18 l00119A91
	// succ:  l00119A6D l00119A91
l00119A6D:
	v18 = fn001197F6()
	loc12 = v18
	v18 = loc12
	v19 = loc11
	v21 = 1<32>
	v19 = v19 << v21
	v18 = v18 + v19
	loc13 = v18
	v18 = loc13
	v22 = Mem0[v18:int16]
	v18 = CONVERT(v22, int16, word32)
	loc14 = v18
	v18 = loc14
	v19 = 0xFFFF<32>
	v18 = v18 & v19
	loc15 = v18
	v18 = loc15
	loc7 = v18
	goto l00119A95
	// succ:  l00119A95
l00119A91:
	v18 = 0<32>
	loc7 = v18
	// succ:  l00119A95
l00119A95:
	v18 = loc7
	v19 = 0xFFFF<32>
	v18 = v18 & v19
	loc6 = v18
	v18 = loc4
	v19 = loc6
	v23 = SLICE(v19, word16, 0)
	Mem0[v18:word16] = v23
	v18 = loc5
	v19 = 4<32>
	v18 = v18 + v19
	loc8 = v18
	v18 = loc4
	v19 = 2<32>
	v18 = v18 + v19
	loc9 = v18
	v18 = loc9
	loc4 = v18
	v18 = loc8
	loc5 = v18
	goto l00119A3A
	// succ:  l00119A3A
l00119ABE:
	v18 = arg2
	return v18
	// succ:  fn00119A3A_exit
l00119AC3:
	return v18
	// succ:  fn00119A3A_exit
fn00119A3A_exit:


// fn00119AC5
// Return size: 0
word32 fn00119AC5(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn00119AC5_entry:
	// succ:  l00119AC5
l00119AC5:
	v16 = Mem0[0x00140030<p32>:word32]
	loc16 = v16
	v16 = arg2
	loc4 = v16
	// succ:  l00119AD1
l00119AD1:
	v16 = loc4
	v17 = arg3
	v18 = v16 == v17
	loc8 = v18
	v16 = loc8
	branch !v16 l00119AE5
	// succ:  l00119ADE l00119AE5
l00119ADE:
	v16 = arg3
	loc5 = v16
	goto l00119B3C
	// succ:  l00119B3C
l00119AE5:
	v16 = loc4
	v16 = Mem0[v16:word32]
	loc9 = v16
	v16 = loc9
	v17 = 0x80<32>
	v18 = v16 <u v17
	loc14 = v18
	v16 = loc14
	branch !v16 l00119B2F
	// succ:  l00119AF8 l00119B2F
l00119AF8:
	v16 = fn001197F6()
	loc10 = v16
	v16 = loc10
	v17 = loc9
	v19 = 1<32>
	v17 = v17 << v19
	v16 = v16 + v17
	loc11 = v16
	v16 = loc11
	v20 = Mem0[v16:int16]
	v16 = CONVERT(v20, int16, word32)
	loc12 = v16
	v16 = loc12
	v17 = arg1
	v16 = v16 & v17
	loc13 = v16
	v16 = loc13
	v17 = 0x10<32>
	v16 = v16 << v17
	v17 = 0x10<32>
	v16 = v16 >> v17
	v17 = 0<32>
	v18 = v16 == v17
	loc6 = v18
	v16 = loc6
	v18 = v16 == 0<32>
	branch !v18 l00119B2E
	// succ:  l00119B27 l00119B2E
l00119B27:
	v16 = loc4
	loc5 = v16
	goto l00119B3C
	// succ:  l00119B3C
l00119B2E:
	// succ:  l00119B2F
l00119B2F:
	v16 = loc4
	v17 = 4<32>
	v16 = v16 + v17
	loc7 = v16
	v16 = loc7
	loc4 = v16
	goto l00119AC5
	// succ:  l00119AC5
l00119B3C:
	v16 = loc5
	return v16
	// succ:  fn00119AC5_exit
l00119B41:
	return v16
	// succ:  fn00119AC5_exit
fn00119AC5_exit:


// fn00119B43
// Return size: 0
word32 fn00119B43(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn00119B43_entry:
	// succ:  l00119B43
l00119B43:
	v16 = Mem0[0x00140030<p32>:word32]
	loc16 = v16
	v16 = arg2
	loc4 = v16
	// succ:  l00119B4F
l00119B4F:
	v16 = loc4
	v17 = arg3
	v18 = v16 == v17
	loc8 = v18
	v16 = loc8
	branch !v16 l00119B63
	// succ:  l00119B5C l00119B63
l00119B5C:
	v16 = arg3
	loc5 = v16
	goto l00119BC0
	// succ:  l00119BC0
l00119B63:
	v16 = loc4
	v16 = Mem0[v16:word32]
	loc9 = v16
	v16 = loc9
	v17 = 0x80<32>
	v18 = v16 <u v17
	loc14 = v18
	v16 = loc14
	v18 = v16 == 0<32>
	branch !v18 l00119B7E
	// succ:  l00119B77 l00119B7E
l00119B77:
	v16 = loc4
	loc5 = v16
	goto l00119BC0
	// succ:  l00119BC0
l00119B7E:
	v16 = fn001197F6()
	loc10 = v16
	v16 = loc10
	v17 = loc9
	v19 = 1<32>
	v17 = v17 << v19
	v16 = v16 + v17
	loc11 = v16
	v16 = loc11
	v20 = Mem0[v16:int16]
	v16 = CONVERT(v20, int16, word32)
	loc12 = v16
	v16 = loc12
	v17 = arg1
	v16 = v16 & v17
	loc13 = v16
	v16 = loc13
	v17 = 0x10<32>
	v16 = v16 << v17
	v17 = 0x10<32>
	v16 = v16 >> v17
	v17 = 0<32>
	v18 = v16 == v17
	loc6 = v18
	v16 = loc6
	branch !v16 l00119BB3
	// succ:  l00119BAC l00119BB3
l00119BAC:
	v16 = loc4
	loc5 = v16
	goto l00119BC0
	// succ:  l00119BC0
l00119BB3:
	v16 = loc4
	v17 = 4<32>
	v16 = v16 + v17
	loc7 = v16
	v16 = loc7
	loc4 = v16
	goto l00119B43
	// succ:  l00119B43
l00119BC0:
	v16 = loc5
	return v16
	// succ:  fn00119B43_exit
l00119BC5:
	return v16
	// succ:  fn00119B43_exit
fn00119B43_exit:


// fn00119BC7
// Return size: 0
word32 fn00119BC7(word32 arg0, word32 arg1)
fn00119BC7_entry:
	// succ:  l00119BC7
l00119BC7:
	v10 = Mem0[0x00140030<p32>:word32]
	loc8 = v10
	v10 = arg1
	v11 = 0x80<32>
	v12 = v10 <u v11
	loc6 = v12
	v10 = loc6
	branch !v10 l00119BF4
	// succ:  l00119BD9 l00119BF4
l00119BD9:
	v10 = fn001197B3()
	loc2 = v10
	v10 = loc2
	v11 = arg1
	v13 = 2<32>
	v11 = v11 << v13
	v10 = v10 + v11
	loc3 = v10
	v10 = loc3
	v10 = Mem0[v10:word32]
	loc4 = v10
	v10 = loc4
	loc5 = v10
	goto l00119BF8
	// succ:  l00119BF8
l00119BF4:
	v10 = arg1
	loc5 = v10
	// succ:  l00119BF8
l00119BF8:
	v10 = loc5
	return v10
	// succ:  fn00119BC7_exit
l00119BFC:
	return v10
	// succ:  fn00119BC7_exit
fn00119BC7_exit:


// fn00119BFE
// Return size: 0
word32 fn00119BFE(word32 arg0, word32 arg1, word32 arg2)
fn00119BFE_entry:
	// succ:  l00119BFE
l00119BFE:
	v14 = Mem0[0x00140030<p32>:word32]
	loc13 = v14
	v14 = arg1
	loc3 = v14
	// succ:  l00119C0A
l00119C0A:
	v14 = loc3
	v15 = arg2
	v16 = v14 == v15
	loc4 = v16
	v14 = loc4
	branch !v14 l00119C1A
	// succ:  l00119C17 l00119C1A
l00119C17:
	goto l00119C61
	// succ:  l00119C61
l00119C1A:
	v14 = loc3
	v14 = Mem0[v14:word32]
	loc5 = v14
	v14 = loc5
	v15 = 0x80<32>
	v16 = v14 <u v15
	loc11 = v16
	v14 = loc11
	branch !v14 l00119C48
	// succ:  l00119C2D l00119C48
l00119C2D:
	v14 = fn001197B3()
	loc6 = v14
	v14 = loc6
	v15 = loc5
	v17 = 2<32>
	v15 = v15 << v17
	v14 = v14 + v15
	loc7 = v14
	v14 = loc7
	v14 = Mem0[v14:word32]
	loc8 = v14
	v14 = loc8
	loc9 = v14
	goto l00119C4C
	// succ:  l00119C4C
l00119C48:
	v14 = loc5
	loc9 = v14
	// succ:  l00119C4C
l00119C4C:
	v14 = loc3
	v15 = loc9
	Mem0[v14:word32] = v15
	v14 = loc3
	v15 = 4<32>
	v14 = v14 + v15
	loc10 = v14
	v14 = loc10
	loc3 = v14
	goto l00119BFE
	// succ:  l00119BFE
l00119C61:
	v14 = arg2
	return v14
	// succ:  fn00119BFE_exit
l00119C66:
	return v14
	// succ:  fn00119BFE_exit
fn00119BFE_exit:


// fn00119C68
// Return size: 0
word32 fn00119C68(word32 arg0, word32 arg1)
fn00119C68_entry:
	// succ:  l00119C68
l00119C68:
	v10 = Mem0[0x00140030<p32>:word32]
	loc8 = v10
	v10 = arg1
	v11 = 0x80<32>
	v12 = v10 <u v11
	loc6 = v12
	v10 = loc6
	branch !v10 l00119C95
	// succ:  l00119C7A l00119C95
l00119C7A:
	v10 = fn00119770()
	loc2 = v10
	v10 = loc2
	v11 = arg1
	v13 = 2<32>
	v11 = v11 << v13
	v10 = v10 + v11
	loc3 = v10
	v10 = loc3
	v10 = Mem0[v10:word32]
	loc4 = v10
	v10 = loc4
	loc5 = v10
	goto l00119C99
	// succ:  l00119C99
l00119C95:
	v10 = arg1
	loc5 = v10
	// succ:  l00119C99
l00119C99:
	v10 = loc5
	return v10
	// succ:  fn00119C68_exit
l00119C9D:
	return v10
	// succ:  fn00119C68_exit
fn00119C68_exit:


// fn00119C9F
// Return size: 0
word32 fn00119C9F(word32 arg0, word32 arg1, word32 arg2)
fn00119C9F_entry:
	// succ:  l00119C9F
l00119C9F:
	v14 = Mem0[0x00140030<p32>:word32]
	loc13 = v14
	v14 = arg1
	loc3 = v14
	// succ:  l00119CAB
l00119CAB:
	v14 = loc3
	v15 = arg2
	v16 = v14 == v15
	loc4 = v16
	v14 = loc4
	branch !v14 l00119CBB
	// succ:  l00119CB8 l00119CBB
l00119CB8:
	goto l00119D02
	// succ:  l00119D02
l00119CBB:
	v14 = loc3
	v14 = Mem0[v14:word32]
	loc5 = v14
	v14 = loc5
	v15 = 0x80<32>
	v16 = v14 <u v15
	loc11 = v16
	v14 = loc11
	branch !v14 l00119CE9
	// succ:  l00119CCE l00119CE9
l00119CCE:
	v14 = fn00119770()
	loc6 = v14
	v14 = loc6
	v15 = loc5
	v17 = 2<32>
	v15 = v15 << v17
	v14 = v14 + v15
	loc7 = v14
	v14 = loc7
	v14 = Mem0[v14:word32]
	loc8 = v14
	v14 = loc8
	loc9 = v14
	goto l00119CED
	// succ:  l00119CED
l00119CE9:
	v14 = loc5
	loc9 = v14
	// succ:  l00119CED
l00119CED:
	v14 = loc3
	v15 = loc9
	Mem0[v14:word32] = v15
	v14 = loc3
	v15 = 4<32>
	v14 = v14 + v15
	loc10 = v14
	v14 = loc10
	loc3 = v14
	goto l00119C9F
	// succ:  l00119C9F
l00119D02:
	v14 = arg2
	return v14
	// succ:  fn00119C9F_exit
l00119D07:
	return v14
	// succ:  fn00119C9F_exit
fn00119C9F_exit:


// fn00119D09
// Return size: 0
word32 fn00119D09(word32 arg0, word32 arg1)
fn00119D09_entry:
	// succ:  l00119D09
l00119D09:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = arg1
	v7 = 0x18<32>
	v6 = v6 << v7
	v7 = 0x18<32>
	v6 = v6 >> v7
	loc2 = v6
	v6 = loc2
	return v6
	// succ:  fn00119D09_exit
l00119D1C:
	return v6
	// succ:  fn00119D09_exit
fn00119D09_exit:


// fn00119D1E
// Return size: 0
word32 fn00119D1E(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn00119D1E_entry:
	// succ:  l00119D1E
l00119D1E:
	v12 = Mem0[0x00140030<p32>:word32]
	loc12 = v12
	v12 = arg3
	loc4 = v12
	v12 = arg1
	loc5 = v12
	// succ:  l00119D2E
l00119D2E:
	v12 = loc5
	v13 = arg2
	v14 = v12 == v13
	loc6 = v14
	v12 = loc6
	branch !v12 l00119D3E
	// succ:  l00119D3B l00119D3E
l00119D3B:
	goto l00119D6E
	// succ:  l00119D6E
l00119D3E:
	v12 = loc5
	v15 = Mem0[v12:int8]
	v12 = CONVERT(v15, int8, word32)
	loc7 = v12
	v12 = loc7
	v13 = 0x18<32>
	v12 = v12 << v13
	v13 = 0x18<32>
	v12 = v12 >> v13
	loc8 = v12
	v12 = loc4
	v13 = loc8
	Mem0[v12:word32] = v13
	v12 = loc5
	v13 = 1<32>
	v12 = v12 + v13
	loc9 = v12
	v12 = loc4
	v13 = 4<32>
	v12 = v12 + v13
	loc10 = v12
	v12 = loc10
	loc4 = v12
	v12 = loc9
	loc5 = v12
	goto l00119D1E
	// succ:  l00119D1E
l00119D6E:
	v12 = arg2
	return v12
	// succ:  fn00119D1E_exit
l00119D73:
	return v12
	// succ:  fn00119D1E_exit
fn00119D1E_exit:


// fn00119D75
// Return size: 0
word32 fn00119D75(word32 arg0, word32 arg1, word32 arg2)
fn00119D75_entry:
	// succ:  l00119D75
l00119D75:
	v8 = Mem0[0x00140030<p32>:word32]
	loc7 = v8
	v8 = arg1
	v9 = 0x80<32>
	v10 = v8 <u v9
	loc5 = v10
	v8 = arg1
	v9 = 0xFF<32>
	v8 = v8 & v9
	loc4 = v8
	v8 = loc5
	branch !v8 l00119D92
	// succ:  l00119D8F l00119D92
l00119D8F:
	v8 = loc4
	goto l00119D94
	// succ:  l00119D94
l00119D92:
	v8 = arg2
	// succ:  l00119D94
l00119D94:
	loc3 = v8
	v8 = loc3
	return v8
	// succ:  fn00119D75_exit
l00119D9A:
	return v8
	// succ:  fn00119D75_exit
fn00119D75_exit:


// fn00119D9C
// Return size: 0
word32 fn00119D9C(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn00119D9C_entry:
	// succ:  l00119D9C
l00119D9C:
	v19 = Mem0[0x00140030<p32>:word32]
	loc20 = v19
	v19 = arg1
	loc12 = v19
	v19 = arg2
	loc13 = v19
	v19 = loc13
	v20 = loc12
	v19 = v19 - v20
	loc14 = v19
	v19 = loc14
	v20 = 2<32>
	v19 = v19 >>u v20
	loc15 = v19
	v19 = arg4
	loc6 = v19
	v19 = arg1
	loc7 = v19
	// succ:  l00119DC2
l00119DC2:
	v19 = loc7
	v20 = arg2
	v21 = v19 == v20
	loc16 = v21
	v19 = loc16
	branch !v19 l00119DD2
	// succ:  l00119DCF l00119DD2
l00119DCF:
	goto l00119E14
	// succ:  l00119E14
l00119DD2:
	v19 = loc7
	v19 = Mem0[v19:word32]
	loc8 = v19
	v19 = loc8
	v20 = 0x80<32>
	v21 = v19 <u v20
	loc17 = v21
	v19 = loc8
	v20 = 0xFF<32>
	v19 = v19 & v20
	loc9 = v19
	v19 = loc17
	branch !v19 l00119DF0
	// succ:  l00119DED l00119DF0
l00119DED:
	v19 = loc9
	goto l00119DF2
	// succ:  l00119DF2
l00119DF0:
	v19 = arg3
	// succ:  l00119DF2
l00119DF2:
	loc5 = v19
	v19 = loc6
	v20 = loc5
	v22 = SLICE(v20, byte, 0)
	Mem0[v19:byte] = v22
	v19 = loc7
	v20 = 4<32>
	v19 = v19 + v20
	loc10 = v19
	v19 = loc6
	v20 = 1<32>
	v19 = v19 + v20
	loc11 = v19
	v19 = loc11
	loc6 = v19
	v19 = loc10
	loc7 = v19
	goto l00119D9C
	// succ:  l00119D9C
l00119E14:
	v19 = arg1
	v20 = loc15
	v23 = 2<32>
	v20 = v20 << v23
	v19 = v19 + v20
	loc18 = v19
	v19 = loc18
	return v19
	// succ:  fn00119D9C_exit
l00119E23:
	return v19
	// succ:  fn00119D9C_exit
fn00119D9C_exit:


// fn00119E25
// Return size: 0
void fn00119E25(word32 arg0)
fn00119E25_entry:
	// succ:  l00119E25
l00119E25:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn00119E25_exit
l00119E31:
	return
	// succ:  fn00119E25_exit
fn00119E25_exit:


// fn00119E33
// Return size: 0
void fn00119E33(word32 arg0)
fn00119E33_entry:
	// succ:  l00119E33
l00119E33:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn00119E33_exit
l00119E3F:
	return
	// succ:  fn00119E33_exit
fn00119E33_exit:


// fn00119E41
// Return size: 0
void fn00119E41(word32 arg0)
fn00119E41_entry:
	// succ:  l00119E41
l00119E41:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn00119E41_exit
l00119E4D:
	return
	// succ:  fn00119E41_exit
fn00119E41_exit:


// fn00119E4F
// Return size: 0
void fn00119E4F(word32 arg0)
fn00119E4F_entry:
	// succ:  l00119E4F
l00119E4F:
	v10 = Mem0[0x00140030<p32>:word32]
	loc7 = v10
	v10 = 8<32>
	v10 = ___cxa_allocate_exception(v10)
	loc1 = v10
	v10 = 0<32>
	Mem0[0x00140048<p32>:word32] = v10
	v10 = 0x1C2<32>
	v11 = loc1
	v12 = 0x4030<32>
	invoke_vii(v10, v11, v12)
	v10 = Mem0[0x00140048<p32>:word32]
	loc2 = v10
	v10 = 0<32>
	Mem0[0x00140048<p32>:word32] = v10
	v10 = loc2
	v11 = 1<32>
	v10 = v10 & v11
	loc3 = v10
	v10 = loc3
	branch !v10 l00119E8E
	// succ:  l00119E7D l00119E8E
l00119E7D:
	v10 = ___cxa_find_matching_catch_2()
	loc4 = v10
	v10 = Mem0[0x00140094<p32>:word32]
	loc5 = v10
	v10 = loc1
	___cxa_free_exception(v10)
	v10 = loc4
	___resumeException(v10)
	goto l00119EA1
	// succ:  l00119EA1
l00119E8E:
	v10 = loc1
	v11 = 0x26FC<32>
	Mem0[v10:word32] = v11
	v10 = loc1
	v11 = 0x9F8<32>
	v12 = 0x156<32>
	___cxa_throw(v10, v11, v12)
	// succ:  l00119EA1
l00119EA1:
	// succ:  l00119EA2
l00119EA2:
	return
	// succ:  fn00119E4F_exit
fn00119E4F_exit:


// fn00119EA4
// Return size: 0
void fn00119EA4(word32 arg0, word32 arg1)
fn00119EA4_entry:
	// succ:  l00119EA4
l00119EA4:
	v100 = Mem0[0x00140030<p32>:word32]
	loc98 = v100
	v100 = arg1
	v101 = 0xFFFFFFFF<32>
	v100 = v100 + v101
	loc17 = v100
	v100 = arg0
	v101 = 4<32>
	v100 = v100 + v101
	loc28 = v100
	v100 = loc28
	v101 = loc17
	Mem0[v100:word32] = v101
	v100 = arg0
	v101 = 0x24A8<32>
	Mem0[v100:word32] = v101
	v100 = arg0
	v101 = 8<32>
	v100 = v100 + v101
	loc39 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1C3<32>
	v101 = loc39
	v102 = 0x1C<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc50 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc50
	v101 = 1<32>
	v100 = v100 & v101
	loc61 = v100
	v100 = loc61
	branch !v100 l00119F00
	// succ:  l00119EEF l00119F00
l00119EEF:
	v100 = ___cxa_find_matching_catch_2()
	loc88 = v100
	v100 = Mem0[0x00140094<p32>:word32]
	loc89 = v100
	v100 = loc89
	loc4 = v100
	v100 = loc88
	loc5 = v100
	goto l0011A718
	// succ:  l0011A718
l00119F00:
	v100 = arg0
	v101 = 0x90<32>
	v100 = v100 + v101
	loc72 = v100
	v100 = loc72
	v103 = 0<64>
	Mem0[v100:word64] = v103
	v100 = loc72
	v101 = 8<32>
	v100 = v100 + v101
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x199<32>
	v101 = loc72
	v102 = 0x37CF<32>
	v104 = 1<32>
	invoke_viii(v100, v101, v102, v104)
	v100 = Mem0[0x00140048<p32>:word32]
	loc83 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc83
	v101 = 1<32>
	v100 = v100 & v101
	loc94 = v100
	v100 = loc94
	branch !v100 l00119F4E
	// succ:  l00119F3D l00119F4E
l00119F3D:
	v100 = ___cxa_find_matching_catch_2()
	loc90 = v100
	v100 = Mem0[0x00140094<p32>:word32]
	loc91 = v100
	v100 = loc91
	loc2 = v100
	v100 = loc90
	loc3 = v100
	goto l0011A70A
	// succ:  l0011A70A
l00119F4E:
	v100 = loc39
	v100 = Mem0[v100:word32]
	loc7 = v100
	v100 = arg0
	v101 = 0xC<32>
	v100 = v100 + v101
	loc8 = v100
	v100 = loc8
	v100 = Mem0[v100:word32]
	loc6 = v100
	v100 = loc6
	loc10 = v100
	// succ:  l00119F69
l00119F69:
	v100 = loc10
	v101 = loc7
	v105 = v100 == v101
	loc9 = v105
	v100 = loc9
	branch !v100 l00119F79
	// succ:  l00119F76 l00119F79
l00119F76:
	goto l00119F8D
	// succ:  l00119F8D
l00119F79:
	v100 = loc10
	v101 = 0xFFFFFFFC<32>
	v100 = v100 + v101
	loc11 = v100
	v100 = loc8
	v101 = loc11
	Mem0[v100:word32] = v101
	v100 = loc11
	loc10 = v100
	goto l00119F4E
	// succ:  l00119F4E
l00119F8D:
	v100 = 0x443C<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4438<32>
	v101 = 0x1B88<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1C4<32>
	v101 = arg0
	v102 = 0x4438<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc12 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc12
	v101 = 1<32>
	v100 = v100 & v101
	loc13 = v100
	// succ:  l00119FC0
l00119FC0:
	v100 = loc13
	branch !v100 l00119FCB
	// succ:  l00119FC6 l00119FCB
l00119FC6:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E3
	// succ:  l0011A6E3
l00119FCB:
	v100 = 0x4444<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4440<32>
	v101 = 0x1BA8<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1C5<32>
	v101 = arg0
	v102 = 0x4440<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc14 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc14
	v101 = 1<32>
	v100 = v100 & v101
	loc15 = v100
	v100 = loc15
	branch !v100 l0011A005
	// succ:  l0011A000 l0011A005
l0011A000:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E2
	// succ:  l0011A6E2
l0011A005:
	v100 = 0x444C<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4448<32>
	v101 = 0x24BC<32>
	Mem0[v100:word32] = v101
	v100 = 0x4450<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4454<32>
	v101 = 0<32>
	v106 = SLICE(v101, byte, 0)
	Mem0[v100:byte] = v106
	v100 = fn001197F6()
	loc16 = v100
	v100 = 0x4450<32>
	v101 = loc16
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1C6<32>
	v101 = arg0
	v102 = 0x4448<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc18 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc18
	v101 = 1<32>
	v100 = v100 & v101
	loc19 = v100
	v100 = loc19
	branch !v100 l0011A060
	// succ:  l0011A05B l0011A060
l0011A05B:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E1
	// succ:  l0011A6E1
l0011A060:
	v100 = 0x445C<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4458<32>
	v101 = 0x2580<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1C7<32>
	v101 = arg0
	v102 = 0x4458<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc20 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc20
	v101 = 1<32>
	v100 = v100 & v101
	loc21 = v100
	v100 = loc21
	branch !v100 l0011A09B
	// succ:  l0011A096 l0011A09B
l0011A096:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E0
	// succ:  l0011A6E0
l0011A09B:
	v100 = 0x4464<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4460<32>
	v101 = 0x25C4<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1C8<32>
	v101 = arg0
	v102 = 0x4460<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc22 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc22
	v101 = 1<32>
	v100 = v100 & v101
	loc23 = v100
	v100 = loc23
	branch !v100 l0011A0D6
	// succ:  l0011A0D1 l0011A0D6
l0011A0D1:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6DF
	// succ:  l0011A6DF
l0011A0D6:
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1C9<32>
	v101 = 0x4468<32>
	v102 = 1<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc24 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc24
	v101 = 1<32>
	v100 = v100 & v101
	loc25 = v100
	v100 = loc25
	branch !v100 l0011A0FD
	// succ:  l0011A0F8 l0011A0FD
l0011A0F8:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6DE
	// succ:  l0011A6DE
l0011A0FD:
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1CA<32>
	v101 = arg0
	v102 = 0x4468<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc26 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc26
	v101 = 1<32>
	v100 = v100 & v101
	loc27 = v100
	v100 = loc27
	branch !v100 l0011A124
	// succ:  l0011A11F l0011A124
l0011A11F:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6DD
	// succ:  l0011A6DD
l0011A124:
	v100 = 0x447C<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4478<32>
	v101 = 0x25F4<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1CB<32>
	v101 = arg0
	v102 = 0x4478<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc29 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc29
	v101 = 1<32>
	v100 = v100 & v101
	loc30 = v100
	v100 = loc30
	branch !v100 l0011A15F
	// succ:  l0011A15A l0011A15F
l0011A15A:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6DC
	// succ:  l0011A6DC
l0011A15F:
	v100 = 0x4484<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4480<32>
	v101 = 0x2624<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1CC<32>
	v101 = arg0
	v102 = 0x4480<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc31 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc31
	v101 = 1<32>
	v100 = v100 & v101
	loc32 = v100
	v100 = loc32
	branch !v100 l0011A19A
	// succ:  l0011A195 l0011A19A
l0011A195:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6DB
	// succ:  l0011A6DB
l0011A19A:
	v100 = 0x4488<32>
	v101 = 1<32>
	fn0011A8DF(v100, v101)
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1CD<32>
	v101 = arg0
	v102 = 0x4488<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc33 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc33
	v101 = 1<32>
	v100 = v100 & v101
	loc34 = v100
	v100 = loc34
	branch !v100 l0011A1CA
	// succ:  l0011A1C5 l0011A1CA
l0011A1C5:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6DA
	// succ:  l0011A6DA
l0011A1CA:
	v100 = 0x44A0<32>
	v101 = 1<32>
	fn0011A98B(v100, v101)
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1CE<32>
	v101 = arg0
	v102 = 0x44A0<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc35 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc35
	v101 = 1<32>
	v100 = v100 & v101
	loc36 = v100
	v100 = loc36
	branch !v100 l0011A1FA
	// succ:  l0011A1F5 l0011A1FA
l0011A1F5:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6D9
	// succ:  l0011A6D9
l0011A1FA:
	v100 = 0x44C4<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x44C0<32>
	v101 = 0x1BC8<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1CF<32>
	v101 = arg0
	v102 = 0x44C0<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc37 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc37
	v101 = 1<32>
	v100 = v100 & v101
	loc38 = v100
	v100 = loc38
	branch !v100 l0011A234
	// succ:  l0011A22F l0011A234
l0011A22F:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6D8
	// succ:  l0011A6D8
l0011A234:
	v100 = 0x44CC<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x44C8<32>
	v101 = 0x1C08<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1D0<32>
	v101 = arg0
	v102 = 0x44C8<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc40 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc40
	v101 = 1<32>
	v100 = v100 & v101
	loc41 = v100
	v100 = loc41
	branch !v100 l0011A26E
	// succ:  l0011A269 l0011A26E
l0011A269:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6D7
	// succ:  l0011A6D7
l0011A26E:
	v100 = 0x44D4<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x44D0<32>
	v101 = 0x1C48<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1D1<32>
	v101 = arg0
	v102 = 0x44D0<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc42 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc42
	v101 = 1<32>
	v100 = v100 & v101
	loc43 = v100
	v100 = loc43
	branch !v100 l0011A2A8
	// succ:  l0011A2A3 l0011A2A8
l0011A2A3:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6D6
	// succ:  l0011A6D6
l0011A2A8:
	v100 = 0x44DC<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x44D8<32>
	v101 = 0x1C7C<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1D2<32>
	v101 = arg0
	v102 = 0x44D8<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc44 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc44
	v101 = 1<32>
	v100 = v100 & v101
	loc45 = v100
	v100 = loc45
	branch !v100 l0011A2E2
	// succ:  l0011A2DD l0011A2E2
l0011A2DD:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6D5
	// succ:  l0011A6D5
l0011A2E2:
	v100 = 0x44E4<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x44E0<32>
	v101 = 0x2288<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1D3<32>
	v101 = arg0
	v102 = 0x44E0<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc46 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc46
	v101 = 1<32>
	v100 = v100 & v101
	loc47 = v100
	v100 = loc47
	branch !v100 l0011A31F
	// succ:  l0011A318 l0011A31F
l0011A318:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E4
	// succ:  l0011A6E4
l0011A31F:
	v100 = 0x44EC<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x44E8<32>
	v101 = 0x22C0<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1D4<32>
	v101 = arg0
	v102 = 0x44E8<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc48 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc48
	v101 = 1<32>
	v100 = v100 & v101
	loc49 = v100
	v100 = loc49
	branch !v100 l0011A35C
	// succ:  l0011A355 l0011A35C
l0011A355:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E4
	// succ:  l0011A6E4
l0011A35C:
	v100 = 0x44F4<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x44F0<32>
	v101 = 0x22F8<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1D5<32>
	v101 = arg0
	v102 = 0x44F0<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc51 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc51
	v101 = 1<32>
	v100 = v100 & v101
	loc52 = v100
	v100 = loc52
	branch !v100 l0011A399
	// succ:  l0011A392 l0011A399
l0011A392:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E4
	// succ:  l0011A6E4
l0011A399:
	v100 = 0x44FC<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x44F8<32>
	v101 = 0x2330<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1D6<32>
	v101 = arg0
	v102 = 0x44F8<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc53 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc53
	v101 = 1<32>
	v100 = v100 & v101
	loc54 = v100
	v100 = loc54
	branch !v100 l0011A3D6
	// succ:  l0011A3CF l0011A3D6
l0011A3CF:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E4
	// succ:  l0011A6E4
l0011A3D6:
	v100 = 0x4504<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4500<32>
	v101 = 0x2368<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1D7<32>
	v101 = arg0
	v102 = 0x4500<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc55 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc55
	v101 = 1<32>
	v100 = v100 & v101
	loc56 = v100
	v100 = loc56
	branch !v100 l0011A413
	// succ:  l0011A40C l0011A413
l0011A40C:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E4
	// succ:  l0011A6E4
l0011A413:
	v100 = 0x450C<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4508<32>
	v101 = 0x2384<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1D8<32>
	v101 = arg0
	v102 = 0x4508<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc57 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc57
	v101 = 1<32>
	v100 = v100 & v101
	loc58 = v100
	v100 = loc58
	branch !v100 l0011A450
	// succ:  l0011A449 l0011A450
l0011A449:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E4
	// succ:  l0011A6E4
l0011A450:
	v100 = 0x4514<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4510<32>
	v101 = 0x23A0<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1D9<32>
	v101 = arg0
	v102 = 0x4510<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc59 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc59
	v101 = 1<32>
	v100 = v100 & v101
	loc60 = v100
	v100 = loc60
	branch !v100 l0011A48D
	// succ:  l0011A486 l0011A48D
l0011A486:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E4
	// succ:  l0011A6E4
l0011A48D:
	v100 = 0x451C<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4518<32>
	v101 = 0x23BC<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1DA<32>
	v101 = arg0
	v102 = 0x4518<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc62 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc62
	v101 = 1<32>
	v100 = v100 & v101
	loc63 = v100
	v100 = loc63
	branch !v100 l0011A4CA
	// succ:  l0011A4C3 l0011A4CA
l0011A4C3:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E4
	// succ:  l0011A6E4
l0011A4CA:
	v100 = 0x4524<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4520<32>
	v101 = 0x1CB0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4528<32>
	v101 = 0x1CE0<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1DB<32>
	v101 = arg0
	v102 = 0x4520<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc64 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc64
	v101 = 1<32>
	v100 = v100 & v101
	loc65 = v100
	v100 = loc65
	branch !v100 l0011A510
	// succ:  l0011A509 l0011A510
l0011A509:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E4
	// succ:  l0011A6E4
l0011A510:
	v100 = 0x4534<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4530<32>
	v101 = 0x1D04<32>
	Mem0[v100:word32] = v101
	v100 = 0x4538<32>
	v101 = 0x1D34<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1DC<32>
	v101 = arg0
	v102 = 0x4530<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc66 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc66
	v101 = 1<32>
	v100 = v100 & v101
	loc67 = v100
	v100 = loc67
	branch !v100 l0011A556
	// succ:  l0011A54F l0011A556
l0011A54F:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E4
	// succ:  l0011A6E4
l0011A556:
	v100 = 0x4544<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4540<32>
	v101 = 0x256C<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x17B<32>
	v100 = invoke_i(v100)
	loc68 = v100
	v100 = Mem0[0x00140048<p32>:word32]
	loc69 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc69
	v101 = 1<32>
	v100 = v100 & v101
	loc70 = v100
	v100 = loc70
	branch !v100 l0011A59B
	// succ:  l0011A588 l0011A59B
l0011A588:
	v100 = ___cxa_find_matching_catch_2()
	loc71 = v100
	v100 = Mem0[0x00140094<p32>:word32]
	loc73 = v100
	v100 = loc73
	loc95 = v100
	v100 = loc71
	loc96 = v100
	goto l0011A6E4
	// succ:  l0011A6E4
l0011A59B:
	v100 = 0x4548<32>
	v101 = loc68
	Mem0[v100:word32] = v101
	v100 = 0x4540<32>
	v101 = 0x2258<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1DD<32>
	v101 = arg0
	v102 = 0x4540<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc74 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc74
	v101 = 1<32>
	v100 = v100 & v101
	loc75 = v100
	v100 = loc75
	branch !v100 l0011A5D8
	// succ:  l0011A5D1 l0011A5D8
l0011A5D1:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E4
	// succ:  l0011A6E4
l0011A5D8:
	v100 = 0x4554<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4550<32>
	v101 = 0x256C<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x17B<32>
	v100 = invoke_i(v100)
	loc76 = v100
	v100 = Mem0[0x00140048<p32>:word32]
	loc77 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc77
	v101 = 1<32>
	v100 = v100 & v101
	loc78 = v100
	v100 = loc78
	branch !v100 l0011A61D
	// succ:  l0011A60A l0011A61D
l0011A60A:
	v100 = ___cxa_find_matching_catch_2()
	loc79 = v100
	v100 = Mem0[0x00140094<p32>:word32]
	loc80 = v100
	v100 = loc80
	loc95 = v100
	v100 = loc79
	loc96 = v100
	goto l0011A6E4
	// succ:  l0011A6E4
l0011A61D:
	v100 = 0x4558<32>
	v101 = loc76
	Mem0[v100:word32] = v101
	v100 = 0x4550<32>
	v101 = 0x2270<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1DE<32>
	v101 = arg0
	v102 = 0x4550<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc81 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc81
	v101 = 1<32>
	v100 = v100 & v101
	loc82 = v100
	v100 = loc82
	branch !v100 l0011A65A
	// succ:  l0011A653 l0011A65A
l0011A653:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E4
	// succ:  l0011A6E4
l0011A65A:
	v100 = 0x4564<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4560<32>
	v101 = 0x23D8<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1DF<32>
	v101 = arg0
	v102 = 0x4560<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc84 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc84
	v101 = 1<32>
	v100 = v100 & v101
	loc85 = v100
	v100 = loc85
	branch !v100 l0011A697
	// succ:  l0011A690 l0011A697
l0011A690:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E4
	// succ:  l0011A6E4
l0011A697:
	v100 = 0x456C<32>
	v101 = 0<32>
	Mem0[v100:word32] = v101
	v100 = 0x4568<32>
	v101 = 0x23F8<32>
	Mem0[v100:word32] = v101
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = 0x1E0<32>
	v101 = arg0
	v102 = 0x4568<32>
	invoke_vii(v100, v101, v102)
	v100 = Mem0[0x00140048<p32>:word32]
	loc86 = v100
	v100 = 0<32>
	Mem0[0x00140048<p32>:word32] = v100
	v100 = loc86
	v101 = 1<32>
	v100 = v100 & v101
	loc87 = v100
	v100 = loc87
	branch !v100 l0011A6D4
	// succ:  l0011A6CD l0011A6D4
l0011A6CD:
	v100 = 0x2A<32>
	loc97 = v100
	goto l0011A6E4
	// succ:  l0011A6E4
l0011A6D4:
	return
	// succ:  fn00119EA4_exit
l0011A6D5:
	// succ:  l0011A6D6
l0011A6D6:
	// succ:  l0011A6D7
l0011A6D7:
	// succ:  l0011A6D8
l0011A6D8:
	// succ:  l0011A6D9
l0011A6D9:
	// succ:  l0011A6DA
l0011A6DA:
	// succ:  l0011A6DB
l0011A6DB:
	// succ:  l0011A6DC
l0011A6DC:
	// succ:  l0011A6DD
l0011A6DD:
	// succ:  l0011A6DE
l0011A6DE:
	// succ:  l0011A6DF
l0011A6DF:
	// succ:  l0011A6E0
l0011A6E0:
	// succ:  l0011A6E1
l0011A6E1:
	// succ:  l0011A6E2
l0011A6E2:
	// succ:  l0011A6E3
l0011A6E3:
	// succ:  l0011A6E4
l0011A6E4:
	v100 = loc97
	v101 = 0x2A<32>
	v105 = v100 == v101
	branch !v105 l0011A6FD
	// succ:  l0011A6EC l0011A6FD
l0011A6EC:
	v100 = ___cxa_find_matching_catch_2()
	loc92 = v100
	v100 = Mem0[0x00140094<p32>:word32]
	loc93 = v100
	v100 = loc93
	loc95 = v100
	v100 = loc92
	loc96 = v100
	// succ:  l0011A6FD
l0011A6FD:
	v100 = loc72
	fn0011BAF7(v100)
	v100 = loc95
	loc2 = v100
	v100 = loc96
	loc3 = v100
	// succ:  l0011A70A
l0011A70A:
	v100 = loc39
	fn00119406(v100)
	v100 = loc2
	loc4 = v100
	v100 = loc3
	loc5 = v100
	// succ:  l0011A718
l0011A718:
	v100 = loc5
	___resumeException(v100)
	// succ:  l0011A71D
l0011A71D:
	return
	// succ:  fn00119EA4_exit
fn00119EA4_exit:


// fn0011A71F
// Return size: 0
void fn0011A71F(word32 arg0, word32 arg1)
fn0011A71F_entry:
	// succ:  l0011A71F
l0011A71F:
	v13 = Mem0[0x00140030<p32>:word32]
	loc11 = v13
	v13 = arg0
	v14 = 0<32>
	Mem0[v13:word32] = v14
	v13 = arg0
	v14 = 4<32>
	v13 = v13 + v14
	loc2 = v13
	v13 = loc2
	v14 = 0<32>
	Mem0[v13:word32] = v14
	v13 = arg0
	v14 = 8<32>
	v13 = v13 + v14
	loc3 = v13
	v13 = loc3
	v14 = 0<32>
	Mem0[v13:word32] = v14
	v13 = arg0
	v14 = 0x80<32>
	v13 = v13 + v14
	loc4 = v13
	v13 = loc4
	v14 = 0<32>
	v15 = SLICE(v14, byte, 0)
	Mem0[v13:byte] = v15
	v13 = arg1
	v14 = 0<32>
	v16 = v13 == v14
	loc5 = v16
	// succ:  l0011A75E
l0011A75E:
	v13 = loc5
	v16 = v13 == 0<32>
	branch !v16 l0011A7A2
	// succ:  l0011A765 l0011A7A2
l0011A765:
	v13 = 0<32>
	Mem0[0x00140048<p32>:word32] = v13
	v13 = 0x1E1<32>
	v14 = arg0
	v17 = arg1
	invoke_vii(v13, v14, v17)
	v13 = Mem0[0x00140048<p32>:word32]
	loc6 = v13
	v13 = 0<32>
	Mem0[0x00140048<p32>:word32] = v13
	v13 = loc6
	v14 = 1<32>
	v13 = v13 & v14
	loc7 = v13
	v13 = loc7
	branch !v13 l0011A797
	// succ:  l0011A785 l0011A797
l0011A785:
	v13 = ___cxa_find_matching_catch_2()
	loc8 = v13
	v13 = Mem0[0x00140094<p32>:word32]
	loc9 = v13
	v13 = arg0
	fn00119406(v13)
	v13 = loc8
	___resumeException(v13)
	goto l0011A7A0
	// succ:  l0011A7A0
l0011A797:
	v13 = arg0
	v14 = arg1
	fn0011AEEB(v13, v14)
	goto l0011A7A2
	// succ:  l0011A7A2
l0011A7A0:
	// succ:  l0011A7A2
l0011A7A2:
	// succ:  l0011A7A2
l0011A7A2:
	return
	// succ:  fn0011A71F_exit
l0011A7A4:
	return
	// succ:  fn0011A71F_exit
fn0011A71F_exit:


// fn0011A7A6
// Return size: 0
void fn0011A7A6(word32 arg0, word32 arg1)
fn0011A7A6_entry:
	// succ:  l0011A7A6
l0011A7A6:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x4C60<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011A7A6_exit
l0011A7BF:
	return
	// succ:  fn0011A7A6_exit
fn0011A7A6_exit:


// fn0011A7C1
// Return size: 0
void fn0011A7C1(word32 arg0, word32 arg1)
fn0011A7C1_entry:
	// succ:  l0011A7C1
l0011A7C1:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x4C68<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011A7C1_exit
l0011A7DA:
	return
	// succ:  fn0011A7C1_exit
fn0011A7C1_exit:


// fn0011A7DC
// Return size: 0
void fn0011A7DC(word32 arg0, word32 arg1)
fn0011A7DC_entry:
	// succ:  l0011A7DC
l0011A7DC:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x4C70<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011A7DC_exit
l0011A7F5:
	return
	// succ:  fn0011A7DC_exit
fn0011A7DC_exit:


// fn0011A7F7
// Return size: 0
void fn0011A7F7(word32 arg0, word32 arg1)
fn0011A7F7_entry:
	// succ:  l0011A7F7
l0011A7F7:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x4C90<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011A7F7_exit
l0011A810:
	return
	// succ:  fn0011A7F7_exit
fn0011A7F7_exit:


// fn0011A812
// Return size: 0
void fn0011A812(word32 arg0, word32 arg1)
fn0011A812_entry:
	// succ:  l0011A812
l0011A812:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5370<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011A812_exit
l0011A82B:
	return
	// succ:  fn0011A812_exit
fn0011A812_exit:


// fn0011A82D
// Return size: 0
void fn0011A82D(word32 arg0, word32 arg1)
fn0011A82D_entry:
	// succ:  l0011A82D
l0011A82D:
	v13 = Mem0[0x00140030<p32>:word32]
	loc11 = v13
	v13 = arg1
	v14 = 0xFFFFFFFF<32>
	v13 = v13 + v14
	loc2 = v13
	v13 = arg0
	v14 = 4<32>
	v13 = v13 + v14
	loc3 = v13
	v13 = loc3
	v14 = loc2
	Mem0[v13:word32] = v14
	v13 = arg0
	v14 = 0x2478<32>
	Mem0[v13:word32] = v14
	v13 = 0<32>
	Mem0[0x00140048<p32>:word32] = v13
	v13 = 0x17B<32>
	v13 = invoke_i(v13)
	loc4 = v13
	v13 = Mem0[0x00140048<p32>:word32]
	loc5 = v13
	v13 = 0<32>
	Mem0[0x00140048<p32>:word32] = v13
	v13 = loc5
	v14 = 1<32>
	v13 = v13 & v14
	loc6 = v13
	v13 = loc6
	branch !v13 l0011A87C
	// succ:  l0011A86F l0011A87C
l0011A86F:
	v13 = ___cxa_find_matching_catch_2()
	loc8 = v13
	v13 = Mem0[0x00140094<p32>:word32]
	loc9 = v13
	v13 = loc8
	___resumeException(v13)
	goto l0011A88B
	// succ:  l0011A88B
l0011A87C:
	v13 = arg0
	v14 = 8<32>
	v13 = v13 + v14
	loc7 = v13
	v13 = loc7
	v14 = loc4
	Mem0[v13:word32] = v14
	return
	// succ:  fn0011A82D_exit
l0011A88B:
	// succ:  l0011A88C
l0011A88C:
	return
	// succ:  fn0011A82D_exit
fn0011A82D_exit:


// fn0011A88E
// Return size: 0
void fn0011A88E(word32 arg0, word32 arg1)
fn0011A88E_entry:
	// succ:  l0011A88E
l0011A88E:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5378<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011A88E_exit
l0011A8A7:
	return
	// succ:  fn0011A88E_exit
fn0011A88E_exit:


// fn0011A8A9
// Return size: 0
void fn0011A8A9(word32 arg0, word32 arg1)
fn0011A8A9_entry:
	// succ:  l0011A8A9
l0011A8A9:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5380<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011A8A9_exit
l0011A8C2:
	return
	// succ:  fn0011A8A9_exit
fn0011A8A9_exit:


// fn0011A8C4
// Return size: 0
void fn0011A8C4(word32 arg0, word32 arg1)
fn0011A8C4_entry:
	// succ:  l0011A8C4
l0011A8C4:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5388<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011A8C4_exit
l0011A8DD:
	return
	// succ:  fn0011A8C4_exit
fn0011A8C4_exit:


// fn0011A8DF
// Return size: 0
void fn0011A8DF(word32 arg0, word32 arg1)
fn0011A8DF_entry:
	// succ:  l0011A8DF
l0011A8DF:
	v14 = Mem0[0x00140030<p32>:word32]
	loc12 = v14
	v14 = arg1
	v15 = 0xFFFFFFFF<32>
	v14 = v14 + v15
	loc3 = v14
	v14 = arg0
	v15 = 4<32>
	v14 = v14 + v15
	loc4 = v14
	v14 = loc4
	v15 = loc3
	Mem0[v14:word32] = v15
	v14 = arg0
	v15 = 0x24F0<32>
	Mem0[v14:word32] = v15
	v14 = arg0
	v15 = 8<32>
	v14 = v14 + v15
	loc5 = v14
	v14 = loc5
	v15 = 0x2E<32>
	v16 = SLICE(v15, byte, 0)
	Mem0[v14:byte] = v16
	v14 = arg0
	v15 = 9<32>
	v14 = v14 + v15
	loc6 = v14
	v14 = loc6
	v15 = 0x2C<32>
	v17 = SLICE(v15, byte, 0)
	Mem0[v14:byte] = v17
	v14 = arg0
	v15 = 0xC<32>
	v14 = v14 + v15
	loc7 = v14
	v14 = loc7
	v18 = 0<64>
	Mem0[v14:word64] = v18
	v14 = loc7
	v15 = 8<32>
	v14 = v14 + v15
	v15 = 0<32>
	Mem0[v14:word32] = v15
	v14 = 0<32>
	loc2 = v14
	// succ:  l0011A93D
l0011A93D:
	v14 = loc2
	v15 = 3<32>
	v19 = v14 == v15
	loc10 = v19
	v14 = loc10
	branch !v14 l0011A94D
	// succ:  l0011A94A l0011A94D
l0011A94A:
	goto l0011A96B
	// succ:  l0011A96B
l0011A94D:
	v14 = loc7
	v15 = loc2
	v20 = 2<32>
	v15 = v15 << v20
	v14 = v14 + v15
	loc8 = v14
	v14 = loc8
	v15 = 0<32>
	Mem0[v14:word32] = v15
	v14 = loc2
	v15 = 1<32>
	v14 = v14 + v15
	loc9 = v14
	v14 = loc9
	loc2 = v14
	goto l0011A8DF
	// succ:  l0011A8DF
l0011A96B:
	return
	// succ:  fn0011A8DF_exit
l0011A96E:
	return
	// succ:  fn0011A8DF_exit
fn0011A8DF_exit:


// fn0011A970
// Return size: 0
void fn0011A970(word32 arg0, word32 arg1)
fn0011A970_entry:
	// succ:  l0011A970
l0011A970:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x4C80<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011A970_exit
l0011A989:
	return
	// succ:  fn0011A970_exit
fn0011A970_exit:


// fn0011A98B
// Return size: 0
void fn0011A98B(word32 arg0, word32 arg1)
fn0011A98B_entry:
	// succ:  l0011A98B
l0011A98B:
	v14 = Mem0[0x00140030<p32>:word32]
	loc12 = v14
	v14 = arg1
	v15 = 0xFFFFFFFF<32>
	v14 = v14 + v15
	loc3 = v14
	v14 = arg0
	v15 = 4<32>
	v14 = v14 + v15
	loc4 = v14
	v14 = loc4
	v15 = loc3
	Mem0[v14:word32] = v15
	v14 = arg0
	v15 = 0x2518<32>
	Mem0[v14:word32] = v15
	v14 = arg0
	v15 = 8<32>
	v14 = v14 + v15
	loc5 = v14
	v14 = loc5
	v15 = 0x2E<32>
	Mem0[v14:word32] = v15
	v14 = arg0
	v15 = 0xC<32>
	v14 = v14 + v15
	loc6 = v14
	v14 = loc6
	v15 = 0x2C<32>
	Mem0[v14:word32] = v15
	v14 = arg0
	v15 = 0x10<32>
	v14 = v14 + v15
	loc7 = v14
	v14 = loc7
	v16 = 0<64>
	Mem0[v14:word64] = v16
	v14 = loc7
	v15 = 8<32>
	v14 = v14 + v15
	v15 = 0<32>
	Mem0[v14:word32] = v15
	v14 = 0<32>
	loc2 = v14
	// succ:  l0011A9E9
l0011A9E9:
	v14 = loc2
	v15 = 3<32>
	v17 = v14 == v15
	loc10 = v17
	v14 = loc10
	branch !v14 l0011A9F9
	// succ:  l0011A9F6 l0011A9F9
l0011A9F6:
	goto l0011AA17
	// succ:  l0011AA17
l0011A9F9:
	v14 = loc7
	v15 = loc2
	v18 = 2<32>
	v15 = v15 << v18
	v14 = v14 + v15
	loc8 = v14
	v14 = loc8
	v15 = 0<32>
	Mem0[v14:word32] = v15
	v14 = loc2
	v15 = 1<32>
	v14 = v14 + v15
	loc9 = v14
	v14 = loc9
	loc2 = v14
	goto l0011A98B
	// succ:  l0011A98B
l0011AA17:
	return
	// succ:  fn0011A98B_exit
l0011AA1A:
	return
	// succ:  fn0011A98B_exit
fn0011A98B_exit:


// fn0011AA1C
// Return size: 0
void fn0011AA1C(word32 arg0, word32 arg1)
fn0011AA1C_entry:
	// succ:  l0011AA1C
l0011AA1C:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x4C98<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011AA1C_exit
l0011AA35:
	return
	// succ:  fn0011AA1C_exit
fn0011AA1C_exit:


// fn0011AA37
// Return size: 0
void fn0011AA37(word32 arg0, word32 arg1)
fn0011AA37_entry:
	// succ:  l0011AA37
l0011AA37:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x4C88<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011AA37_exit
l0011AA50:
	return
	// succ:  fn0011AA37_exit
fn0011AA37_exit:


// fn0011AA52
// Return size: 0
void fn0011AA52(word32 arg0, word32 arg1)
fn0011AA52_entry:
	// succ:  l0011AA52
l0011AA52:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x4CA0<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011AA52_exit
l0011AA6B:
	return
	// succ:  fn0011AA52_exit
fn0011AA52_exit:


// fn0011AA6D
// Return size: 0
void fn0011AA6D(word32 arg0, word32 arg1)
fn0011AA6D_entry:
	// succ:  l0011AA6D
l0011AA6D:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x4CA8<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011AA6D_exit
l0011AA86:
	return
	// succ:  fn0011AA6D_exit
fn0011AA6D_exit:


// fn0011AA88
// Return size: 0
void fn0011AA88(word32 arg0, word32 arg1)
fn0011AA88_entry:
	// succ:  l0011AA88
l0011AA88:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x4CB0<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011AA88_exit
l0011AAA1:
	return
	// succ:  fn0011AA88_exit
fn0011AA88_exit:


// fn0011AAA3
// Return size: 0
void fn0011AAA3(word32 arg0, word32 arg1)
fn0011AAA3_entry:
	// succ:  l0011AAA3
l0011AAA3:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5320<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011AAA3_exit
l0011AABC:
	return
	// succ:  fn0011AAA3_exit
fn0011AAA3_exit:


// fn0011AABE
// Return size: 0
void fn0011AABE(word32 arg0, word32 arg1)
fn0011AABE_entry:
	// succ:  l0011AABE
l0011AABE:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5328<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011AABE_exit
l0011AAD7:
	return
	// succ:  fn0011AABE_exit
fn0011AABE_exit:


// fn0011AAD9
// Return size: 0
void fn0011AAD9(word32 arg0, word32 arg1)
fn0011AAD9_entry:
	// succ:  l0011AAD9
l0011AAD9:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5330<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011AAD9_exit
l0011AAF2:
	return
	// succ:  fn0011AAD9_exit
fn0011AAD9_exit:


// fn0011AAF4
// Return size: 0
void fn0011AAF4(word32 arg0, word32 arg1)
fn0011AAF4_entry:
	// succ:  l0011AAF4
l0011AAF4:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5338<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011AAF4_exit
l0011AB0D:
	return
	// succ:  fn0011AAF4_exit
fn0011AAF4_exit:


// fn0011AB0F
// Return size: 0
void fn0011AB0F(word32 arg0, word32 arg1)
fn0011AB0F_entry:
	// succ:  l0011AB0F
l0011AB0F:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5340<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011AB0F_exit
l0011AB28:
	return
	// succ:  fn0011AB0F_exit
fn0011AB0F_exit:


// fn0011AB2A
// Return size: 0
void fn0011AB2A(word32 arg0, word32 arg1)
fn0011AB2A_entry:
	// succ:  l0011AB2A
l0011AB2A:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5348<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011AB2A_exit
l0011AB43:
	return
	// succ:  fn0011AB2A_exit
fn0011AB2A_exit:


// fn0011AB45
// Return size: 0
void fn0011AB45(word32 arg0, word32 arg1)
fn0011AB45_entry:
	// succ:  l0011AB45
l0011AB45:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5350<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011AB45_exit
l0011AB5E:
	return
	// succ:  fn0011AB45_exit
fn0011AB45_exit:


// fn0011AB60
// Return size: 0
void fn0011AB60(word32 arg0, word32 arg1)
fn0011AB60_entry:
	// succ:  l0011AB60
l0011AB60:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5358<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011AB60_exit
l0011AB79:
	return
	// succ:  fn0011AB60_exit
fn0011AB60_exit:


// fn0011AB7B
// Return size: 0
void fn0011AB7B(word32 arg0, word32 arg1)
fn0011AB7B_entry:
	// succ:  l0011AB7B
l0011AB7B:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x4FDC<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011AB7B_exit
l0011AB94:
	return
	// succ:  fn0011AB7B_exit
fn0011AB7B_exit:


// fn0011AB96
// Return size: 0
void fn0011AB96(word32 arg0, word32 arg1)
fn0011AB96_entry:
	// succ:  l0011AB96
l0011AB96:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5308<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011AB96_exit
l0011ABAF:
	return
	// succ:  fn0011AB96_exit
fn0011AB96_exit:


// fn0011ABB1
// Return size: 0
void fn0011ABB1(word32 arg0, word32 arg1)
fn0011ABB1_entry:
	// succ:  l0011ABB1
l0011ABB1:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5310<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011ABB1_exit
l0011ABCA:
	return
	// succ:  fn0011ABB1_exit
fn0011ABB1_exit:


// fn0011ABCC
// Return size: 0
void fn0011ABCC(word32 arg0, word32 arg1)
fn0011ABCC_entry:
	// succ:  l0011ABCC
l0011ABCC:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5318<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011ABCC_exit
l0011ABE5:
	return
	// succ:  fn0011ABCC_exit
fn0011ABCC_exit:


// fn0011ABE7
// Return size: 0
void fn0011ABE7(word32 arg0, word32 arg1)
fn0011ABE7_entry:
	// succ:  l0011ABE7
l0011ABE7:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5360<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011ABE7_exit
l0011AC00:
	return
	// succ:  fn0011ABE7_exit
fn0011ABE7_exit:


// fn0011AC02
// Return size: 0
void fn0011AC02(word32 arg0, word32 arg1)
fn0011AC02_entry:
	// succ:  l0011AC02
l0011AC02:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = 0x5368<32>
	v6 = fn000EAE12(v6)
	loc2 = v6
	v6 = arg0
	v7 = arg1
	v8 = loc2
	fn0011AC1D(v6, v7, v8)
	return
	// succ:  fn0011AC02_exit
l0011AC1B:
	return
	// succ:  fn0011AC02_exit
fn0011AC02_exit:


// fn0011AC1D
// Return size: 0
void fn0011AC1D(word32 arg0, word32 arg1, word32 arg2)
fn0011AC1D_entry:
	// succ:  l0011AC1D
l0011AC1D:
	v28 = Mem0[0x00140030<p32>:word32]
	loc27 = v28
	v28 = arg1
	fn0011B41A(v28)
	v28 = arg0
	v29 = 8<32>
	v28 = v28 + v29
	loc19 = v28
	v28 = arg0
	v29 = 0xC<32>
	v28 = v28 + v29
	loc20 = v28
	v28 = loc20
	v28 = Mem0[v28:word32]
	loc21 = v28
	v28 = loc19
	v28 = Mem0[v28:word32]
	loc22 = v28
	v28 = loc21
	v29 = loc22
	v28 = v28 - v29
	loc23 = v28
	v28 = loc23
	v29 = 2<32>
	v28 = v28 >> v29
	loc24 = v28
	v28 = loc24
	v29 = arg2
	v30 = v28 >u v29
	loc25 = v30
	// succ:  l0011AC59
l0011AC59:
	v28 = loc25
	branch !v28 l0011AC6C
	// succ:  l0011AC5F l0011AC6C
l0011AC5F:
	v28 = loc22
	loc6 = v28
	v28 = loc19
	loc4 = v28
	v28 = loc6
	loc14 = v28
	goto l0011ACC5
	// succ:  l0011ACC5
l0011AC6C:
	v28 = arg2
	v29 = 1<32>
	v28 = v28 + v29
	loc7 = v28
	v28 = 0<32>
	Mem0[0x00140048<p32>:word32] = v28
	v28 = 0x1E2<32>
	v29 = loc19
	v31 = loc7
	invoke_vii(v28, v29, v31)
	v28 = Mem0[0x00140048<p32>:word32]
	loc8 = v28
	v28 = 0<32>
	Mem0[0x00140048<p32>:word32] = v28
	v28 = loc8
	v29 = 1<32>
	v28 = v28 & v29
	loc9 = v28
	v28 = loc9
	v30 = v28 == 0<32>
	branch !v30 l0011ACA6
	// succ:  l0011AC94 l0011ACA6
l0011AC94:
	v28 = loc19
	v28 = Mem0[v28:word32]
	loc3 = v28
	v28 = loc19
	loc4 = v28
	v28 = loc3
	loc14 = v28
	goto l0011ACC6
	// succ:  l0011ACC6
l0011ACA6:
	v28 = ___cxa_find_matching_catch_2()
	loc10 = v28
	v28 = Mem0[0x00140094<p32>:word32]
	loc11 = v28
	v28 = arg1
	v29 = 0<32>
	v30 = v28 == v29
	loc12 = v30
	v28 = loc12
	v30 = v28 == 0<32>
	branch !v30 l0011ACC1
	// succ:  l0011ACBA l0011ACC1
l0011ACBA:
	v28 = arg1
	v28 = fn0011B43F(v28)
	// succ:  l0011ACC1
l0011ACC1:
	v28 = loc10
	___resumeException(v28)
	// succ:  l0011ACC5
l0011ACC5:
	// succ:  l0011ACC6
l0011ACC6:
	v28 = loc14
	v29 = arg2
	v31 = 2<32>
	v29 = v29 << v31
	v28 = v28 + v29
	loc13 = v28
	v28 = loc13
	v28 = Mem0[v28:word32]
	loc15 = v28
	v28 = loc15
	v29 = 0<32>
	v30 = v28 == v29
	loc16 = v30
	v28 = loc16
	branch !v28 l0011ACE8
	// succ:  l0011ACE3 l0011ACE8
l0011ACE3:
	v28 = loc14
	loc18 = v28
	goto l0011ACF9
	// succ:  l0011ACF9
l0011ACE8:
	v28 = loc15
	v28 = fn0011B43F(v28)
	v28 = loc4
	v28 = Mem0[v28:word32]
	loc5 = v28
	v28 = loc5
	loc18 = v28
	// succ:  l0011ACF9
l0011ACF9:
	v28 = loc18
	v29 = arg2
	v31 = 2<32>
	v29 = v29 << v31
	v28 = v28 + v29
	loc17 = v28
	v28 = loc17
	v29 = arg1
	Mem0[v28:word32] = v29
	return
	// succ:  fn0011AC1D_exit
l0011AD0C:
	return
	// succ:  fn0011AC1D_exit
fn0011AC1D_exit:


// fn0011AD0E
// Return size: 0
void fn0011AD0E(word32 arg0, word32 arg1)
fn0011AD0E_entry:
	// succ:  l0011AD0E
l0011AD0E:
	v19 = Mem0[0x00140030<p32>:word32]
	loc17 = v19
	v19 = arg0
	v20 = 4<32>
	v19 = v19 + v20
	loc8 = v19
	v19 = loc8
	v19 = Mem0[v19:word32]
	loc9 = v19
	v19 = arg0
	v19 = Mem0[v19:word32]
	loc10 = v19
	v19 = loc9
	v20 = loc10
	v19 = v19 - v20
	loc11 = v19
	v19 = loc11
	v20 = 2<32>
	v19 = v19 >> v20
	loc12 = v19
	v19 = loc12
	v20 = arg1
	v21 = v19 <u v20
	loc13 = v21
	v19 = loc10
	loc14 = v19
	v19 = loc9
	loc15 = v19
	// succ:  l0011AD46
l0011AD46:
	v19 = loc13
	branch !v19 l0011AD5B
	// succ:  l0011AD4C l0011AD5B
l0011AD4C:
	v19 = arg1
	v20 = loc12
	v19 = v19 - v20
	loc2 = v19
	v19 = arg0
	v20 = loc2
	fn0011AD9F(v19, v20)
	goto l0011AD9A
	// succ:  l0011AD9A
l0011AD5B:
	v19 = loc12
	v20 = arg1
	v21 = v19 >u v20
	loc3 = v21
	v19 = loc3
	branch !v19 l0011AD9A
	// succ:  l0011AD66 l0011AD9A
l0011AD66:
	v19 = loc14
	v20 = arg1
	v22 = 2<32>
	v20 = v20 << v22
	v19 = v19 + v20
	loc4 = v19
	v19 = loc15
	loc6 = v19
	v19 = loc6
	v20 = loc4
	v21 = v19 == v20
	loc5 = v21
	v19 = loc5
	branch !v19 l0011AD84
	// succ:  l0011AD81 l0011AD84
l0011AD81:
	goto l0011AD9B
	// succ:  l0011AD9B
l0011AD84:
	v19 = loc6
	v20 = 0xFFFFFFFC<32>
	v19 = v19 + v20
	loc7 = v19
	v19 = loc8
	v20 = loc7
	Mem0[v19:word32] = v20
	v19 = loc7
	loc6 = v19
	goto l0011AD66
	// succ:  l0011AD66
l0011AD9A:
	// succ:  l0011AD9A
l0011AD9A:
	// succ:  l0011AD9B
l0011AD9B:
	return
	// succ:  fn0011AD0E_exit
l0011AD9D:
	return
	// succ:  fn0011AD0E_exit
fn0011AD0E_exit:


// fn0011AD9F
// Return size: 0
void fn0011AD9F(word32 arg0, word32 arg1)
fn0011AD9F_entry:
	// succ:  l0011AD9F
l0011AD9F:
	v34 = Mem0[0x00140030<p32>:word32]
	loc32 = v34
	v34 = Mem0[0x00140030<p32>:word32]
	v35 = 0x20<32>
	v34 = v34 + v35
	Mem0[0x00140030<p32>:word32] = v34
	v34 = Mem0[0x00140030<p32>:word32]
	v35 = Mem0[0x00140034<p32>:word32]
	v36 = v34 >= v35
	branch !v36 l0011ADB8
	// succ:  l0011ADB3 l0011ADB8
l0011ADB3:
	v34 = 0x20<32>
	abortStackOverflow(v34)
	// succ:  l0011ADB8
l0011ADB8:
	v34 = loc32
	loc16 = v34
	v34 = arg0
	v35 = 8<32>
	v34 = v34 + v35
	loc24 = v34
	v34 = loc24
	v34 = Mem0[v34:word32]
	loc25 = v34
	v34 = arg0
	v35 = 4<32>
	v34 = v34 + v35
	loc26 = v34
	v34 = loc26
	v34 = Mem0[v34:word32]
	loc27 = v34
	v34 = loc25
	v35 = loc27
	v34 = v34 - v35
	loc28 = v34
	v34 = loc28
	v35 = 2<32>
	v34 = v34 >> v35
	loc29 = v34
	v34 = loc29
	v35 = arg1
	v36 = v34 <u v35
	loc30 = v36
	v34 = loc30
	branch !v34 l0011AEDC
	// succ:  l0011ADF1 l0011AEDC
l0011ADF1:
	v34 = arg0
	v34 = Mem0[v34:word32]
	loc6 = v34
	v34 = loc27
	v35 = loc6
	v34 = v34 - v35
	loc7 = v34
	v34 = loc7
	v35 = 2<32>
	v34 = v34 >> v35
	loc8 = v34
	v34 = loc8
	v35 = arg1
	v34 = v34 + v35
	loc9 = v34
	v34 = loc9
	v35 = 0x3FFFFFFF<32>
	v36 = v34 >u v35
	loc10 = v36
	v34 = loc10
	branch !v34 l0011AE22
	// succ:  l0011AE1C l0011AE22
l0011AE1C:
	v34 = arg0
	fn00119E4F(v34)
	// succ:  l0011AE22
l0011AE22:
	v34 = arg0
	v35 = 0x10<32>
	v34 = v34 + v35
	loc11 = v34
	v34 = loc25
	v35 = loc6
	v34 = v34 - v35
	loc12 = v34
	v34 = loc12
	v35 = 2<32>
	v34 = v34 >> v35
	loc13 = v34
	v34 = loc13
	v35 = 0x1FFFFFFF<32>
	v36 = v34 <u v35
	loc14 = v36
	v34 = loc12
	v35 = 1<32>
	v34 = v34 >> v35
	loc15 = v34
	v34 = loc15
	v35 = loc9
	v36 = v34 <u v35
	loc17 = v36
	v34 = loc17
	branch !v34 l0011AE57
	// succ:  l0011AE54 l0011AE57
l0011AE54:
	v34 = loc9
	goto l0011AE59
	// succ:  l0011AE59
l0011AE57:
	v34 = loc15
	// succ:  l0011AE59
l0011AE59:
	loc5 = v34
	v34 = loc14
	branch !v34 l0011AE63
	// succ:  l0011AE60 l0011AE63
l0011AE60:
	v34 = loc5
	goto l0011AE69
	// succ:  l0011AE69
l0011AE63:
	v34 = 0x3FFFFFFF<32>
	// succ:  l0011AE69
l0011AE69:
	loc3 = v34
	v34 = loc16
	v35 = loc3
	v37 = loc8
	v38 = loc11
	fn0011AF4C(v34, v35, v37, v38)
	v34 = loc16
	v35 = 8<32>
	v34 = v34 + v35
	loc18 = v34
	v34 = loc18
	v34 = Mem0[v34:word32]
	loc4 = v34
	v34 = arg1
	loc2 = v34
	v34 = loc4
	loc19 = v34
	// succ:  l0011AE8F
l0011AE8F:
	v34 = loc19
	v35 = 0<32>
	Mem0[v34:word32] = v35
	v34 = loc18
	v34 = Mem0[v34:word32]
	loc20 = v34
	v34 = loc20
	v35 = 4<32>
	v34 = v34 + v35
	loc21 = v34
	v34 = loc18
	v35 = loc21
	Mem0[v34:word32] = v35
	v34 = loc2
	v35 = 0xFFFFFFFF<32>
	v34 = v34 + v35
	loc22 = v34
	v34 = loc22
	v35 = 0<32>
	v36 = v34 == v35
	loc23 = v36
	v34 = loc23
	branch !v34 l0011AEC2
	// succ:  l0011AEBF l0011AEC2
l0011AEBF:
	goto l0011AECD
	// succ:  l0011AECD
l0011AEC2:
	v34 = loc22
	loc2 = v34
	v34 = loc21
	loc19 = v34
	// succ:  l0011AECA
l0011AECA:
	goto l0011AE69
	// succ:  l0011AE69
l0011AECD:
	v34 = arg0
	v35 = loc16
	fn0011B01B(v34, v35)
	v34 = loc16
	fn0011B113(v34)
	goto l0011AEE3
	// succ:  l0011AEE3
l0011AEDC:
	v34 = arg0
	v35 = arg1
	fn0011AEEB(v34, v35)
	// succ:  l0011AEE3
l0011AEE3:
	v34 = loc32
	Mem0[0x00140030<p32>:word32] = v34
	return
	// succ:  fn0011AD9F_exit
l0011AEE9:
	return
	// succ:  fn0011AD9F_exit
fn0011AD9F_exit:


// fn0011AEEB
// Return size: 0
void fn0011AEEB(word32 arg0, word32 arg1)
fn0011AEEB_entry:
	// succ:  l0011AEEB
l0011AEEB:
	v13 = Mem0[0x00140030<p32>:word32]
	loc11 = v13
	v13 = arg0
	v14 = 4<32>
	v13 = v13 + v14
	loc4 = v13
	v13 = loc4
	v13 = Mem0[v13:word32]
	loc3 = v13
	v13 = arg1
	loc2 = v13
	v13 = loc3
	loc5 = v13
	// succ:  l0011AF09
l0011AF09:
	v13 = loc5
	v14 = 0<32>
	Mem0[v13:word32] = v14
	v13 = loc4
	v13 = Mem0[v13:word32]
	loc6 = v13
	v13 = loc6
	v14 = 4<32>
	v13 = v13 + v14
	loc7 = v13
	v13 = loc4
	v14 = loc7
	Mem0[v13:word32] = v14
	v13 = loc2
	v14 = 0xFFFFFFFF<32>
	v13 = v13 + v14
	loc8 = v13
	v13 = loc8
	v14 = 0<32>
	v15 = v13 == v14
	loc9 = v15
	v13 = loc9
	branch !v13 l0011AF3C
	// succ:  l0011AF39 l0011AF3C
l0011AF39:
	goto l0011AF47
	// succ:  l0011AF47
l0011AF3C:
	v13 = loc8
	loc2 = v13
	v13 = loc7
	loc5 = v13
	// succ:  l0011AF44
l0011AF44:
	goto l0011AEEB
	// succ:  l0011AEEB
l0011AF47:
	return
	// succ:  fn0011AEEB_exit
l0011AF4A:
	return
	// succ:  fn0011AEEB_exit
fn0011AEEB_exit:


// fn0011AF4C
// Return size: 0
void fn0011AF4C(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn0011AF4C_entry:
	// succ:  l0011AF4C
l0011AF4C:
	v21 = Mem0[0x00140030<p32>:word32]
	loc21 = v21
	v21 = arg0
	v22 = 0xC<32>
	v21 = v21 + v22
	loc13 = v21
	v21 = loc13
	v22 = 0<32>
	Mem0[v21:word32] = v22
	v21 = arg0
	v22 = 0x10<32>
	v21 = v21 + v22
	loc14 = v21
	v21 = loc14
	v22 = arg3
	Mem0[v21:word32] = v22
	v21 = arg1
	v22 = 0<32>
	v23 = v21 == v22
	loc15 = v23
	// succ:  l0011AF75
l0011AF75:
	v21 = loc15
	branch !v21 l0011AF80
	// succ:  l0011AF7B l0011AF80
l0011AF7B:
	v21 = 0<32>
	loc7 = v21
	goto l0011AFD1
	// succ:  l0011AFD1
l0011AF80:
	v21 = arg3
	v22 = 0x70<32>
	v21 = v21 + v22
	loc16 = v21
	v21 = loc16
	v24 = Mem0[v21:int8]
	v21 = CONVERT(v24, int8, word32)
	loc17 = v21
	v21 = loc17
	v22 = 0x18<32>
	v21 = v21 << v22
	v22 = 0x18<32>
	v21 = v21 >> v22
	v22 = 0<32>
	v23 = v21 == v22
	loc4 = v23
	v21 = arg1
	v22 = 0x1D<32>
	v23 = v21 <u v22
	loc18 = v23
	v21 = loc18
	v22 = loc4
	v21 = v21 & v22
	loc19 = v21
	v21 = loc19
	branch !v21 l0011AFBC
	// succ:  l0011AFAE l0011AFBC
l0011AFAE:
	v21 = loc16
	v22 = 1<32>
	v25 = SLICE(v22, byte, 0)
	Mem0[v21:byte] = v25
	v21 = arg3
	loc7 = v21
	goto l0011AFD2
	// succ:  l0011AFD2
l0011AFBC:
	v21 = arg1
	v22 = 2<32>
	v21 = v21 << v22
	loc5 = v21
	v21 = loc5
	v21 = fn0011B67B(v21)
	loc6 = v21
	v21 = loc6
	loc7 = v21
	goto l0011AFD2
	// succ:  l0011AFD2
l0011AFD0:
	// succ:  l0011AFD1
l0011AFD1:
	// succ:  l0011AFD2
l0011AFD2:
	v21 = arg0
	v22 = loc7
	Mem0[v21:word32] = v22
	v21 = loc7
	v22 = arg2
	v26 = 2<32>
	v22 = v22 << v26
	v21 = v21 + v22
	loc8 = v21
	v21 = arg0
	v22 = 8<32>
	v21 = v21 + v22
	loc9 = v21
	v21 = loc9
	v22 = loc8
	Mem0[v21:word32] = v22
	v21 = arg0
	v22 = 4<32>
	v21 = v21 + v22
	loc10 = v21
	v21 = loc10
	v22 = loc8
	Mem0[v21:word32] = v22
	v21 = loc7
	v22 = arg1
	v26 = 2<32>
	v22 = v22 << v26
	v21 = v21 + v22
	loc11 = v21
	v21 = arg0
	v22 = 0xC<32>
	v21 = v21 + v22
	loc12 = v21
	v21 = loc12
	v22 = loc11
	Mem0[v21:word32] = v22
	return
	// succ:  fn0011AF4C_exit
l0011B019:
	return
	// succ:  fn0011AF4C_exit
fn0011AF4C_exit:


// fn0011B01B
// Return size: 0
void fn0011B01B(word32 arg0, word32 arg1)
fn0011B01B_entry:
	// succ:  l0011B01B
l0011B01B:
	v29 = Mem0[0x00140030<p32>:word32]
	loc27 = v29
	v29 = arg0
	v29 = Mem0[v29:word32]
	loc14 = v29
	v29 = arg0
	v30 = 4<32>
	v29 = v29 + v30
	loc19 = v29
	v29 = loc19
	v29 = Mem0[v29:word32]
	loc20 = v29
	v29 = arg1
	v30 = 4<32>
	v29 = v29 + v30
	loc21 = v29
	v29 = loc14
	loc22 = v29
	v29 = loc20
	v30 = loc22
	v29 = v29 - v30
	loc23 = v29
	v29 = loc23
	v30 = 2<32>
	v29 = v29 >> v30
	loc24 = v29
	v29 = loc21
	v29 = Mem0[v29:word32]
	loc25 = v29
	v29 = 0<32>
	v30 = loc24
	v29 = v29 - v30
	loc4 = v29
	v29 = loc25
	v30 = loc4
	v31 = 2<32>
	v30 = v30 << v31
	v29 = v29 + v30
	loc5 = v29
	v29 = loc21
	v30 = loc5
	Mem0[v29:word32] = v30
	v29 = loc23
	v30 = 0<32>
	v32 = v29 > v30
	loc6 = v32
	v29 = loc6
	branch !v29 l0011B093
	// succ:  l0011B079 l0011B093
l0011B079:
	v29 = loc5
	v30 = loc14
	v31 = loc23
	v29 = _memcpy(v29, v30, v31)
	v29 = loc21
	v29 = Mem0[v29:word32]
	loc2 = v29
	v29 = loc21
	loc3 = v29
	v29 = loc2
	loc9 = v29
	goto l0011B09F
	// succ:  l0011B09F
l0011B093:
	v29 = loc5
	loc7 = v29
	v29 = loc21
	loc3 = v29
	v29 = loc7
	loc9 = v29
	// succ:  l0011B09F
l0011B09F:
	v29 = arg0
	v29 = Mem0[v29:word32]
	loc8 = v29
	v29 = arg0
	v30 = loc9
	Mem0[v29:word32] = v30
	v29 = loc3
	v30 = loc8
	Mem0[v29:word32] = v30
	v29 = arg1
	v30 = 8<32>
	v29 = v29 + v30
	loc10 = v29
	v29 = loc19
	v29 = Mem0[v29:word32]
	loc11 = v29
	v29 = loc10
	v29 = Mem0[v29:word32]
	loc12 = v29
	v29 = loc19
	v30 = loc12
	Mem0[v29:word32] = v30
	v29 = loc10
	v30 = loc11
	Mem0[v29:word32] = v30
	v29 = arg0
	v30 = 8<32>
	v29 = v29 + v30
	loc13 = v29
	v29 = arg1
	v30 = 0xC<32>
	v29 = v29 + v30
	loc15 = v29
	v29 = loc13
	v29 = Mem0[v29:word32]
	loc16 = v29
	v29 = loc15
	v29 = Mem0[v29:word32]
	loc17 = v29
	v29 = loc13
	v30 = loc17
	Mem0[v29:word32] = v30
	v29 = loc15
	v30 = loc16
	Mem0[v29:word32] = v30
	v29 = loc3
	v29 = Mem0[v29:word32]
	loc18 = v29
	v29 = arg1
	v30 = loc18
	Mem0[v29:word32] = v30
	return
	// succ:  fn0011B01B_exit
l0011B111:
	return
	// succ:  fn0011B01B_exit
fn0011B01B_exit:


// fn0011B113
// Return size: 0
void fn0011B113(word32 arg0)
fn0011B113_entry:
	// succ:  l0011B113
l0011B113:
	v18 = Mem0[0x00140030<p32>:word32]
	loc15 = v18
	v18 = arg0
	v19 = 4<32>
	v18 = v18 + v19
	loc2 = v18
	v18 = loc2
	v18 = Mem0[v18:word32]
	loc6 = v18
	v18 = arg0
	v19 = 8<32>
	v18 = v18 + v19
	loc7 = v18
	v18 = loc7
	v18 = Mem0[v18:word32]
	loc1 = v18
	v18 = loc1
	loc9 = v18
	// succ:  l0011B13B
l0011B13B:
	v18 = loc9
	v19 = loc6
	v20 = v18 == v19
	loc8 = v20
	v18 = loc8
	branch !v18 l0011B14B
	// succ:  l0011B148 l0011B14B
l0011B148:
	goto l0011B15F
	// succ:  l0011B15F
l0011B14B:
	v18 = loc9
	v19 = 0xFFFFFFFC<32>
	v18 = v18 + v19
	loc10 = v18
	v18 = loc7
	v19 = loc10
	Mem0[v18:word32] = v19
	v18 = loc10
	loc9 = v18
	goto l0011B113
	// succ:  l0011B113
l0011B15F:
	v18 = arg0
	v18 = Mem0[v18:word32]
	loc11 = v18
	v18 = loc11
	v19 = 0<32>
	v20 = v18 == v19
	loc12 = v20
	// succ:  l0011B16F
l0011B16F:
	v18 = loc12
	v20 = v18 == 0<32>
	branch !v20 l0011B1AA
	// succ:  l0011B176 l0011B1AA
l0011B176:
	v18 = arg0
	v19 = 0x10<32>
	v18 = v18 + v19
	loc13 = v18
	v18 = loc13
	v18 = Mem0[v18:word32]
	loc3 = v18
	v18 = loc3
	v19 = loc11
	v20 = v18 == v19
	loc4 = v20
	v18 = loc4
	branch !v18 l0011B1A1
	// succ:  l0011B18F l0011B1A1
l0011B18F:
	v18 = loc3
	v19 = 0x70<32>
	v18 = v18 + v19
	loc5 = v18
	v18 = loc5
	v19 = 0<32>
	v21 = SLICE(v19, byte, 0)
	Mem0[v18:byte] = v21
	goto l0011B1AA
	// succ:  l0011B1AA
l0011B1A1:
	v18 = loc11
	fn0011B709(v18)
	goto l0011B1AA
	// succ:  l0011B1AA
l0011B1A8:
	// succ:  l0011B1AA
l0011B1AA:
	// succ:  l0011B1AA
l0011B1AA:
	return
	// succ:  fn0011B113_exit
l0011B1AC:
	return
	// succ:  fn0011B113_exit
fn0011B113_exit:


// fn0011B1AE
// Return size: 0
void fn0011B1AE(word32 arg0, word32 arg1)
fn0011B1AE_entry:
	// succ:  l0011B1AE
l0011B1AE:
	v18 = Mem0[0x00140030<p32>:word32]
	loc16 = v18
	v18 = arg1
	v19 = 0x3FFFFFFF<32>
	v20 = v18 >u v19
	loc6 = v20
	v18 = loc6
	branch !v18 l0011B1C9
	// succ:  l0011B1C3 l0011B1C9
l0011B1C3:
	v18 = arg0
	fn00119E4F(v18)
	// succ:  l0011B1C9
l0011B1C9:
	v18 = arg0
	v19 = 0x80<32>
	v18 = v18 + v19
	loc7 = v18
	v18 = loc7
	v21 = Mem0[v18:int8]
	v18 = CONVERT(v21, int8, word32)
	loc8 = v18
	v18 = loc8
	v19 = 0x18<32>
	v18 = v18 << v19
	v19 = 0x18<32>
	v18 = v18 >> v19
	v19 = 0<32>
	v20 = v18 == v19
	loc3 = v20
	v18 = arg1
	v19 = 0x1D<32>
	v20 = v18 <u v19
	loc9 = v20
	v18 = loc9
	v19 = loc3
	v18 = v18 & v19
	loc14 = v18
	v18 = loc14
	branch !v18 l0011B20A
	// succ:  l0011B1F7 l0011B20A
l0011B1F7:
	v18 = arg0
	v19 = 0x10<32>
	v18 = v18 + v19
	loc10 = v18
	v18 = loc7
	v19 = 1<32>
	v22 = SLICE(v19, byte, 0)
	Mem0[v18:byte] = v22
	v18 = loc10
	loc2 = v18
	goto l0011B21C
	// succ:  l0011B21C
l0011B20A:
	v18 = arg1
	v19 = 2<32>
	v18 = v18 << v19
	loc11 = v18
	v18 = loc11
	v18 = fn0011B67B(v18)
	loc12 = v18
	v18 = loc12
	loc2 = v18
	// succ:  l0011B21C
l0011B21C:
	v18 = arg0
	v19 = 4<32>
	v18 = v18 + v19
	loc13 = v18
	v18 = loc13
	v19 = loc2
	Mem0[v18:word32] = v19
	v18 = arg0
	v19 = loc2
	Mem0[v18:word32] = v19
	v18 = loc2
	v19 = arg1
	v23 = 2<32>
	v19 = v19 << v23
	v18 = v18 + v19
	loc4 = v18
	v18 = arg0
	v19 = 8<32>
	v18 = v18 + v19
	loc5 = v18
	v18 = loc5
	v19 = loc4
	Mem0[v18:word32] = v19
	return
	// succ:  fn0011B1AE_exit
l0011B24B:
	return
	// succ:  fn0011B1AE_exit
fn0011B1AE_exit:


// fn0011B24D
// Return size: 0
word32 fn0011B24D()
fn0011B24D_entry:
	// succ:  l0011B24D
l0011B24D:
	v14 = Mem0[0x00140030<p32>:word32]
	loc10 = v14
	v14 = 0x4570<32>
	v15 = Mem0[v14:int8]
	v14 = CONVERT(v15, int8, word32)
	loc0 = v14
	v14 = loc0
	v16 = 0x18<32>
	v14 = v14 << v16
	v16 = 0x18<32>
	v14 = v14 >> v16
	v16 = 0<32>
	v17 = v14 == v16
	loc1 = v17
	// succ:  l0011B269
l0011B269:
	v14 = loc1
	branch !v14 l0011B2BE
	// succ:  l0011B26F l0011B2BE
l0011B26F:
	v14 = 0x4570<32>
	v14 = fn0011EE46(v14)
	loc2 = v14
	v14 = loc2
	v16 = 0<32>
	v17 = v14 == v16
	loc3 = v17
	v14 = loc3
	v17 = v14 == 0<32>
	branch !v17 l0011B2BD
	// succ:  l0011B284 l0011B2BD
l0011B284:
	v14 = 0<32>
	Mem0[0x00140048<p32>:word32] = v14
	v14 = 0x1E3<32>
	v14 = invoke_i(v14)
	v14 = Mem0[0x00140048<p32>:word32]
	loc4 = v14
	v14 = 0<32>
	Mem0[0x00140048<p32>:word32] = v14
	v14 = loc4
	v16 = 1<32>
	v14 = v14 & v16
	loc5 = v14
	v14 = loc5
	branch !v14 l0011B2AE
	// succ:  l0011B2A1 l0011B2AE
l0011B2A1:
	v14 = ___cxa_find_matching_catch_2()
	loc7 = v14
	v14 = Mem0[0x00140094<p32>:word32]
	loc8 = v14
	v14 = loc7
	___resumeException(v14)
	goto l0011B2BB
	// succ:  l0011B2BB
l0011B2AE:
	v14 = 0x5394<32>
	v16 = 0x5390<32>
	Mem0[v14:word32] = v16
	goto l0011B2BE
	// succ:  l0011B2BE
l0011B2BB:
	// succ:  l0011B2BD
l0011B2BD:
	// succ:  l0011B2BE
l0011B2BE:
	// succ:  l0011B2BE
l0011B2BE:
	v14 = 0x5394<32>
	v14 = Mem0[v14:word32]
	loc6 = v14
	v14 = loc6
	return v14
	// succ:  fn0011B24D_exit
l0011B2CB:
	return v14
	// succ:  fn0011B24D_exit
fn0011B24D_exit:


// fn0011B2CD
// Return size: 0
word32 fn0011B2CD()
fn0011B2CD_entry:
	// succ:  l0011B2CD
l0011B2CD:
	v5 = Mem0[0x00140030<p32>:word32]
	loc1 = v5
	v5 = 0x4578<32>
	v6 = 1<32>
	fn00119EA4(v5, v6)
	v5 = 0x5390<32>
	v6 = 0x4578<32>
	Mem0[v5:word32] = v6
	v5 = 0x5390<32>
	return v5
	// succ:  fn0011B2CD_exit
l0011B2EC:
	return v5
	// succ:  fn0011B2CD_exit
fn0011B2CD_exit:


// fn0011B2EE
// Return size: 0
word32 fn0011B2EE()
fn0011B2EE_entry:
	// succ:  l0011B2EE
l0011B2EE:
	v7 = Mem0[0x00140030<p32>:word32]
	loc3 = v7
	v7 = fn0011B24D()
	loc0 = v7
	v7 = loc0
	v7 = Mem0[v7:word32]
	loc1 = v7
	v7 = 0x5398<32>
	v8 = loc1
	Mem0[v7:word32] = v8
	v7 = loc1
	fn0011B41A(v7)
	v7 = 0x5398<32>
	return v7
	// succ:  fn0011B2EE_exit
l0011B313:
	return v7
	// succ:  fn0011B2EE_exit
fn0011B2EE_exit:


// fn0011B315
// Return size: 0
word32 fn0011B315()
fn0011B315_entry:
	// succ:  l0011B315
l0011B315:
	v14 = Mem0[0x00140030<p32>:word32]
	loc10 = v14
	v14 = 0x4618<32>
	v15 = Mem0[v14:int8]
	v14 = CONVERT(v15, int8, word32)
	loc0 = v14
	v14 = loc0
	v16 = 0x18<32>
	v14 = v14 << v16
	v16 = 0x18<32>
	v14 = v14 >> v16
	v16 = 0<32>
	v17 = v14 == v16
	loc1 = v17
	// succ:  l0011B331
l0011B331:
	v14 = loc1
	branch !v14 l0011B386
	// succ:  l0011B337 l0011B386
l0011B337:
	v14 = 0x4618<32>
	v14 = fn0011EE46(v14)
	loc2 = v14
	v14 = loc2
	v16 = 0<32>
	v17 = v14 == v16
	loc3 = v17
	v14 = loc3
	v17 = v14 == 0<32>
	branch !v17 l0011B385
	// succ:  l0011B34C l0011B385
l0011B34C:
	v14 = 0<32>
	Mem0[0x00140048<p32>:word32] = v14
	v14 = 0x1E4<32>
	v14 = invoke_i(v14)
	v14 = Mem0[0x00140048<p32>:word32]
	loc4 = v14
	v14 = 0<32>
	Mem0[0x00140048<p32>:word32] = v14
	v14 = loc4
	v16 = 1<32>
	v14 = v14 & v16
	loc5 = v14
	v14 = loc5
	branch !v14 l0011B376
	// succ:  l0011B369 l0011B376
l0011B369:
	v14 = ___cxa_find_matching_catch_2()
	loc7 = v14
	v14 = Mem0[0x00140094<p32>:word32]
	loc8 = v14
	v14 = loc7
	___resumeException(v14)
	goto l0011B383
	// succ:  l0011B383
l0011B376:
	v14 = 0x539C<32>
	v16 = 0x5398<32>
	Mem0[v14:word32] = v16
	goto l0011B386
	// succ:  l0011B386
l0011B383:
	// succ:  l0011B385
l0011B385:
	// succ:  l0011B386
l0011B386:
	// succ:  l0011B386
l0011B386:
	v14 = 0x539C<32>
	v14 = Mem0[v14:word32]
	loc6 = v14
	v14 = loc6
	return v14
	// succ:  fn0011B315_exit
l0011B393:
	return v14
	// succ:  fn0011B315_exit
fn0011B315_exit:


// fn0011B395
// Return size: 0
void fn0011B395(word32 arg0)
fn0011B395_entry:
	// succ:  l0011B395
l0011B395:
	v11 = Mem0[0x00140030<p32>:word32]
	loc8 = v11
	v11 = 0<32>
	Mem0[0x00140048<p32>:word32] = v11
	v11 = 0x1E5<32>
	v11 = invoke_i(v11)
	loc1 = v11
	v11 = Mem0[0x00140048<p32>:word32]
	loc2 = v11
	v11 = 0<32>
	Mem0[0x00140048<p32>:word32] = v11
	v11 = loc2
	v12 = 1<32>
	v11 = v11 & v12
	loc3 = v11
	v11 = loc3
	branch !v11 l0011B3C8
	// succ:  l0011B3B9 l0011B3C8
l0011B3B9:
	v11 = 0<32>
	v11 = ___cxa_find_matching_catch_3(v11)
	loc5 = v11
	v11 = Mem0[0x00140094<p32>:word32]
	loc6 = v11
	v11 = loc5
	fn000D0E65(v11)
	goto l0011B3DC
	// succ:  l0011B3DC
l0011B3C8:
	v11 = loc1
	v11 = Mem0[v11:word32]
	loc4 = v11
	v11 = arg0
	v12 = loc4
	Mem0[v11:word32] = v12
	v11 = loc4
	fn0011B41A(v11)
	return
	// succ:  fn0011B395_exit
l0011B3DC:
	// succ:  l0011B3DD
l0011B3DD:
	return
	// succ:  fn0011B395_exit
fn0011B395_exit:


// fn0011B3DF
// Return size: 0
void fn0011B3DF(word32 arg0, word32 arg1)
fn0011B3DF_entry:
	// succ:  l0011B3DF
l0011B3DF:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = arg1
	v6 = Mem0[v6:word32]
	loc2 = v6
	v6 = arg0
	v7 = loc2
	Mem0[v6:word32] = v7
	v6 = loc2
	fn0011B41A(v6)
	return
	// succ:  fn0011B3DF_exit
l0011B3F9:
	return
	// succ:  fn0011B3DF_exit
fn0011B3DF_exit:


// fn0011B3FB
// Return size: 0
void fn0011B3FB(word32 arg0)
fn0011B3FB_entry:
	// succ:  l0011B3FB
l0011B3FB:
	v6 = Mem0[0x00140030<p32>:word32]
	loc3 = v6
	v6 = arg0
	v6 = Mem0[v6:word32]
	loc1 = v6
	v6 = loc1
	v6 = fn0011B43F(v6)
	return
	// succ:  fn0011B3FB_exit
l0011B40F:
	return
	// succ:  fn0011B3FB_exit
fn0011B3FB_exit:


// fn0011B411
// Return size: 0
void fn0011B411(word32 arg0)
fn0011B411_entry:
	// succ:  l0011B411
l0011B411:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	return
	// succ:  fn0011B411_exit
l0011B418:
	return
	// succ:  fn0011B411_exit
fn0011B411_exit:


// fn0011B41A
// Return size: 0
void fn0011B41A(word32 arg0)
fn0011B41A_entry:
	// succ:  l0011B41A
l0011B41A:
	v8 = Mem0[0x00140030<p32>:word32]
	loc5 = v8
	v8 = arg0
	v9 = 4<32>
	v8 = v8 + v9
	loc1 = v8
	v8 = loc1
	v8 = Mem0[v8:word32]
	loc2 = v8
	v8 = loc2
	v9 = 1<32>
	v8 = v8 + v9
	loc3 = v8
	v8 = loc1
	v9 = loc3
	Mem0[v8:word32] = v9
	return
	// succ:  fn0011B41A_exit
l0011B43D:
	return
	// succ:  fn0011B41A_exit
fn0011B41A_exit:


// fn0011B43F
// Return size: 0
word32 fn0011B43F(word32 arg0)
fn0011B43F_entry:
	// succ:  l0011B43F
l0011B43F:
	v13 = Mem0[0x00140030<p32>:word32]
	loc10 = v13
	v13 = arg0
	v14 = 4<32>
	v13 = v13 + v14
	loc2 = v13
	v13 = loc2
	v13 = Mem0[v13:word32]
	loc3 = v13
	v13 = loc3
	v14 = 0xFFFFFFFF<32>
	v13 = v13 + v14
	loc4 = v13
	v13 = loc2
	v14 = loc4
	Mem0[v13:word32] = v14
	v13 = loc3
	v14 = 0<32>
	v15 = v13 == v14
	loc5 = v15
	v13 = loc5
	v13 = v13
	// succ:  l0011B46C
l0011B46C:
	v13 = arg0
	v13 = Mem0[v13:word32]
	loc6 = v13
	v13 = loc6
	v14 = 8<32>
	v13 = v13 + v14
	loc7 = v13
	v13 = loc7
	v13 = Mem0[v13:word32]
	loc8 = v13
	v13 = arg0
	v14 = loc8
	v16 = 0x1FF<32>
	v14 = v14 & v16
	v16 = 0x500<32>
	v14 = v14 + v16
fn0011B43F_exit:


// fn0011B49F
// Return size: 0
void fn0011B49F(word32 arg0, word32 arg1, word32 arg2)
fn0011B49F_entry:
	// succ:  l0011B49F
l0011B49F:
	v34 = Mem0[0x00140030<p32>:word32]
	loc33 = v34
	v34 = 0x53A0<32>
	v34 = _pthread_mutex_lock(v34)
	// succ:  l0011B4AF
l0011B4AF:
	v34 = arg0
	v34 = Mem0[v34:word32]
	loc23 = v34
	v34 = loc23
	v35 = 1<32>
	v36 = v34 == v35
	loc26 = v36
	v34 = loc26
	v36 = v34 == 0<32>
	branch !v36 l0011B4C7
	// succ:  l0011B4C4 l0011B4C7
l0011B4C4:
	goto l0011B4D4
	// succ:  l0011B4D4
l0011B4C7:
	v34 = 0x53BC<32>
	v35 = 0x53A0<32>
	v34 = _pthread_cond_wait(v34, v35)
	goto l0011B49F
	// succ:  l0011B49F
l0011B4D4:
	v34 = arg0
	v34 = Mem0[v34:word32]
	loc27 = v34
	v34 = loc27
	v35 = 0<32>
	v36 = v34 == v35
	loc28 = v36
	// succ:  l0011B4E4
l0011B4E4:
	v34 = loc28
	branch !v34 l0011B66E
	// succ:  l0011B4EA l0011B66E
l0011B4EA:
	v34 = arg0
	v35 = 1<32>
	Mem0[v34:word32] = v35
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = 0x1E6<32>
	v35 = 0x53A0<32>
	v34 = invoke_ii(v34, v35)
	v34 = Mem0[0x00140048<p32>:word32]
	loc29 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc29
	v35 = 1<32>
	v34 = v34 & v35
	loc30 = v34
	v34 = loc30
	v36 = v34 == 0<32>
	branch !v36 l0011B5A5
	// succ:  l0011B513 l0011B5A5
l0011B513:
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = arg2
	v35 = arg1
	invoke_vi(v34, v35)
	v34 = Mem0[0x00140048<p32>:word32]
	loc31 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc31
	v35 = 1<32>
	v34 = v34 & v35
	loc3 = v34
	v34 = loc3
	v36 = v34 == 0<32>
	branch !v36 l0011B5A4
	// succ:  l0011B531 l0011B5A4
l0011B531:
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = 0x1E7<32>
	v35 = 0x53A0<32>
	v34 = invoke_ii(v34, v35)
	v34 = Mem0[0x00140048<p32>:word32]
	loc4 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc4
	v35 = 1<32>
	v34 = v34 & v35
	loc5 = v34
	v34 = loc5
	v36 = v34 == 0<32>
	branch !v36 l0011B5A3
	// succ:  l0011B553 l0011B5A3
l0011B553:
	v34 = arg0
	v35 = 0xFFFFFFFF<32>
	Mem0[v34:word32] = v35
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = 0x1E6<32>
	v35 = 0x53A0<32>
	v34 = invoke_ii(v34, v35)
	v34 = Mem0[0x00140048<p32>:word32]
	loc6 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc6
	v35 = 1<32>
	v34 = v34 & v35
	loc7 = v34
	v34 = loc7
	v36 = v34 == 0<32>
	branch !v36 l0011B5A2
	// succ:  l0011B57C l0011B5A2
l0011B57C:
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = 0x1E8<32>
	v35 = 0x53BC<32>
	v34 = invoke_ii(v34, v35)
	v34 = Mem0[0x00140048<p32>:word32]
	loc8 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc8
	v35 = 1<32>
	v34 = v34 & v35
	loc9 = v34
	v34 = loc9
	v36 = v34 == 0<32>
	branch !v36 l0011B5A1
	// succ:  l0011B59E l0011B5A1
l0011B59E:
	goto l0011B677
	// succ:  l0011B677
l0011B5A1:
	// succ:  l0011B5A2
l0011B5A2:
	// succ:  l0011B5A3
l0011B5A3:
	// succ:  l0011B5A4
l0011B5A4:
	// succ:  l0011B5A5
l0011B5A5:
	v34 = 0<32>
	v34 = ___cxa_find_matching_catch_3(v34)
	loc10 = v34
	v34 = Mem0[0x00140094<p32>:word32]
	loc11 = v34
	v34 = loc10
	v34 = ___cxa_begin_catch(v34)
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = 0x1E7<32>
	v35 = 0x53A0<32>
	v34 = invoke_ii(v34, v35)
	v34 = Mem0[0x00140048<p32>:word32]
	loc12 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc12
	v35 = 1<32>
	v34 = v34 & v35
	loc13 = v34
	v34 = loc13
	v36 = v34 == 0<32>
	branch !v36 l0011B635
	// succ:  l0011B5D6 l0011B635
l0011B5D6:
	v34 = arg0
	v35 = 0<32>
	Mem0[v34:word32] = v35
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = 0x1E6<32>
	v35 = 0x53A0<32>
	v34 = invoke_ii(v34, v35)
	v34 = Mem0[0x00140048<p32>:word32]
	loc14 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc14
	v35 = 1<32>
	v34 = v34 & v35
	loc15 = v34
	v34 = loc15
	v36 = v34 == 0<32>
	branch !v36 l0011B634
	// succ:  l0011B5FF l0011B634
l0011B5FF:
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = 0x1E8<32>
	v35 = 0x53BC<32>
	v34 = invoke_ii(v34, v35)
	v34 = Mem0[0x00140048<p32>:word32]
	loc16 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc16
	v35 = 1<32>
	v34 = v34 & v35
	loc17 = v34
	v34 = loc17
	v36 = v34 == 0<32>
	branch !v36 l0011B633
	// succ:  l0011B621 l0011B633
l0011B621:
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = 0x1E9<32>
	invoke_v(v34)
	v34 = Mem0[0x00140048<p32>:word32]
	loc18 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	// succ:  l0011B633
l0011B633:
	// succ:  l0011B634
l0011B634:
	// succ:  l0011B635
l0011B635:
	v34 = ___cxa_find_matching_catch_2()
	loc19 = v34
	v34 = Mem0[0x00140094<p32>:word32]
	loc20 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = 0x16C<32>
	invoke_v(v34)
	v34 = Mem0[0x00140048<p32>:word32]
	loc21 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc21
	v35 = 1<32>
	v34 = v34 & v35
	loc22 = v34
	v34 = loc22
	branch !v34 l0011B668
	// succ:  l0011B659 l0011B668
l0011B659:
	v34 = 0<32>
	v34 = ___cxa_find_matching_catch_3(v34)
	loc24 = v34
	v34 = Mem0[0x00140094<p32>:word32]
	loc25 = v34
	v34 = loc24
	fn000D0E65(v34)
	goto l0011B66C
	// succ:  l0011B66C
l0011B668:
	v34 = loc19
	___resumeException(v34)
	// succ:  l0011B66C
l0011B66C:
	goto l0011B676
	// succ:  l0011B676
l0011B66E:
	v34 = 0x53A0<32>
	v34 = _pthread_mutex_unlock(v34)
	// succ:  l0011B676
l0011B676:
	// succ:  l0011B677
l0011B677:
	return
	// succ:  fn0011B49F_exit
l0011B679:
	return
	// succ:  fn0011B49F_exit
fn0011B49F_exit:


// fn0011B67B
// Return size: 0
word32 fn0011B67B(word32 arg0)
fn0011B67B_entry:
	// succ:  l0011B67B
l0011B67B:
	v12 = Mem0[0x00140030<p32>:word32]
	loc9 = v12
	v12 = arg0
	v13 = 0<32>
	v14 = v12 == v13
	loc2 = v14
	v12 = loc2
	branch !v12 l0011B68F
	// succ:  l0011B68C l0011B68F
l0011B68C:
	v12 = 1<32>
	goto l0011B691
	// succ:  l0011B691
l0011B68F:
	v12 = arg0
	// succ:  l0011B691
l0011B691:
	loc1 = v12
	// succ:  l0011B696
l0011B696:
	v12 = loc1
	v12 = _malloc(v12)
	loc3 = v12
	v12 = loc3
	v13 = 0<32>
	v14 = v12 == v13
	loc4 = v14
	v12 = loc4
	v14 = v12 == 0<32>
	branch !v14 l0011B6B2
	// succ:  l0011B6AB l0011B6B2
l0011B6AB:
	v12 = 6<32>
	loc8 = v12
l0011B6B2:
	v12 = fn0011EE9E()
	loc5 = v12
	v12 = loc5
	v13 = 0<32>
	v14 = v12 == v13
	loc6 = v14
	v12 = loc6
	branch !v12 l0011B6C9
	// succ:  l0011B6C2 l0011B6C9
l0011B6C2:
	v12 = 5<32>
	loc8 = v12
l0011B6C9:
	v12 = loc5
	v13 = 0x1FF<32>
	v12 = v12 & v13
	v13 = 0x2A20<32>
	v12 = v12 + v13
fn0011B67B_exit:


// fn0011B709
// Return size: 0
void fn0011B709(word32 arg0)
fn0011B709_entry:
	// succ:  l0011B709
l0011B709:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	_free(v5)
	return
	// succ:  fn0011B709_exit
l0011B715:
	return
	// succ:  fn0011B709_exit
fn0011B709_exit:


// fn0011B717
// Return size: 0
void fn0011B717(word32 arg0)
fn0011B717_entry:
	// succ:  l0011B717
l0011B717:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn0011B717_exit
l0011B723:
	return
	// succ:  fn0011B717_exit
fn0011B717_exit:


// fn0011B725
// Return size: 0
void fn0011B725()
fn0011B725_entry:
	// succ:  l0011B725
l0011B725:
	v6 = Mem0[0x00140030<p32>:word32]
	loc2 = v6
	v6 = 4<32>
	v6 = ___cxa_allocate_exception(v6)
	loc0 = v6
	v6 = loc0
	fn0011EE8C(v6)
	v6 = loc0
	v7 = 0x9C8<32>
	v8 = 0x153<32>
	___cxa_throw(v6, v7, v8)
	// succ:  l0011B740
l0011B740:
	return
	// succ:  fn0011B725_exit
fn0011B725_exit:


// fn0011B742
// Return size: 0
void fn0011B742(word32 arg0, word32 arg1)
fn0011B742_entry:
	// succ:  l0011B742
l0011B742:
	v12 = Mem0[0x00140030<p32>:word32]
	loc10 = v12
	v12 = arg1
	v12 = fn000DAF30(v12)
	loc2 = v12
	v12 = loc2
	v13 = 0xD<32>
	v12 = v12 + v13
	loc3 = v12
	v12 = loc3
	v12 = fn0011B67B(v12)
	loc4 = v12
	v12 = loc4
	v13 = loc2
	Mem0[v12:word32] = v13
	v12 = loc4
	v13 = 4<32>
	v12 = v12 + v13
	loc5 = v12
	v12 = loc5
	v13 = loc2
	Mem0[v12:word32] = v13
	v12 = loc4
	v13 = 8<32>
	v12 = v12 + v13
	loc6 = v12
	v12 = loc6
	v13 = 0<32>
	Mem0[v12:word32] = v13
	v12 = loc4
	v13 = 0xC<32>
	v12 = v12 + v13
	loc7 = v12
	v12 = loc2
	v13 = 1<32>
	v12 = v12 + v13
	loc8 = v12
	v12 = loc7
	v13 = arg1
	v14 = loc8
	v12 = _memcpy(v12, v13, v14)
	v12 = arg0
	v13 = loc7
	Mem0[v12:word32] = v13
	return
	// succ:  fn0011B742_exit
l0011B7A0:
	return
	// succ:  fn0011B742_exit
fn0011B742_exit:


// fn0011B7A2
// Return size: 0
void fn0011B7A2(word32 arg0, word32 arg1)
fn0011B7A2_entry:
	// succ:  l0011B7A2
l0011B7A2:
	v10 = Mem0[0x00140030<p32>:word32]
	loc8 = v10
	v10 = arg0
	v11 = 0x26D4<32>
	Mem0[v10:word32] = v11
	v10 = arg0
	v11 = 4<32>
	v10 = v10 + v11
	loc2 = v10
	v10 = 0<32>
	Mem0[0x00140048<p32>:word32] = v10
	v10 = 0x1EA<32>
	v11 = loc2
	v12 = arg1
	invoke_vii(v10, v11, v12)
	v10 = Mem0[0x00140048<p32>:word32]
	loc3 = v10
	v10 = 0<32>
	Mem0[0x00140048<p32>:word32] = v10
	v10 = loc3
	v11 = 1<32>
	v10 = v10 & v11
	loc4 = v10
	v10 = loc4
	branch !v10 l0011B7E5
	// succ:  l0011B7D8 l0011B7E5
l0011B7D8:
	v10 = ___cxa_find_matching_catch_2()
	loc5 = v10
	v10 = Mem0[0x00140094<p32>:word32]
	loc6 = v10
	v10 = loc5
	___resumeException(v10)
	goto l0011B7E6
	// succ:  l0011B7E6
l0011B7E5:
	return
	// succ:  fn0011B7A2_exit
l0011B7E6:
	// succ:  l0011B7E7
l0011B7E7:
	return
	// succ:  fn0011B7A2_exit
fn0011B7A2_exit:


// fn0011B7E9
// Return size: 0
void fn0011B7E9(word32 arg0, word32 arg1)
fn0011B7E9_entry:
	// succ:  l0011B7E9
l0011B7E9:
	v15 = Mem0[0x00140030<p32>:word32]
	loc13 = v15
	v15 = arg0
	v16 = 0x26E8<32>
	Mem0[v15:word32] = v16
	v15 = arg0
	v16 = 4<32>
	v15 = v15 + v16
	loc4 = v15
	v15 = arg1
	v16 = 0xB<32>
	v15 = v15 + v16
	loc5 = v15
	v15 = loc5
	v17 = Mem0[v15:int8]
	v15 = CONVERT(v17, int8, word32)
	loc6 = v15
	v15 = loc6
	v16 = 0x18<32>
	v15 = v15 << v16
	v16 = 0x18<32>
	v15 = v15 >> v16
	v16 = 0<32>
	v18 = v15 < v16
	loc7 = v18
	v15 = arg1
	v15 = Mem0[v15:word32]
	loc8 = v15
	v15 = loc7
	branch !v15 l0011B828
	// succ:  l0011B825 l0011B828
l0011B825:
	v15 = loc8
	goto l0011B82A
	// succ:  l0011B82A
l0011B828:
	v15 = arg1
	// succ:  l0011B82A
l0011B82A:
	loc9 = v15
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = 0x1EA<32>
	v16 = loc4
	v19 = loc9
	invoke_vii(v15, v16, v19)
	v15 = Mem0[0x00140048<p32>:word32]
	loc10 = v15
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = loc10
	v16 = 1<32>
	v15 = v15 & v16
	loc11 = v15
	v15 = loc11
	branch !v15 l0011B85A
	// succ:  l0011B84D l0011B85A
l0011B84D:
	v15 = ___cxa_find_matching_catch_2()
	loc2 = v15
	v15 = Mem0[0x00140094<p32>:word32]
	loc3 = v15
	v15 = loc2
	___resumeException(v15)
	goto l0011B85B
	// succ:  l0011B85B
l0011B85A:
	return
	// succ:  fn0011B7E9_exit
l0011B85B:
	// succ:  l0011B85C
l0011B85C:
	return
	// succ:  fn0011B7E9_exit
fn0011B7E9_exit:


// fn0011B85E
// Return size: 0
void fn0011B85E(word32 arg0, word32 arg1)
fn0011B85E_entry:
	// succ:  l0011B85E
l0011B85E:
	v10 = Mem0[0x00140030<p32>:word32]
	loc8 = v10
	v10 = arg0
	v11 = 0x26E8<32>
	Mem0[v10:word32] = v11
	v10 = arg0
	v11 = 4<32>
	v10 = v10 + v11
	loc2 = v10
	v10 = 0<32>
	Mem0[0x00140048<p32>:word32] = v10
	v10 = 0x1EA<32>
	v11 = loc2
	v12 = arg1
	invoke_vii(v10, v11, v12)
	v10 = Mem0[0x00140048<p32>:word32]
	loc3 = v10
	v10 = 0<32>
	Mem0[0x00140048<p32>:word32] = v10
	v10 = loc3
	v11 = 1<32>
	v10 = v10 & v11
	loc4 = v10
	v10 = loc4
	branch !v10 l0011B8A1
	// succ:  l0011B894 l0011B8A1
l0011B894:
	v10 = ___cxa_find_matching_catch_2()
	loc5 = v10
	v10 = Mem0[0x00140094<p32>:word32]
	loc6 = v10
	v10 = loc5
	___resumeException(v10)
	goto l0011B8A2
	// succ:  l0011B8A2
l0011B8A1:
	return
	// succ:  fn0011B85E_exit
l0011B8A2:
	// succ:  l0011B8A3
l0011B8A3:
	return
	// succ:  fn0011B85E_exit
fn0011B85E_exit:


// fn0011B8A5
// Return size: 0
void fn0011B8A5(word32 arg0)
fn0011B8A5_entry:
	// succ:  l0011B8A5
l0011B8A5:
	v10 = Mem0[0x00140030<p32>:word32]
	loc7 = v10
	v10 = 8<32>
	v10 = ___cxa_allocate_exception(v10)
	loc1 = v10
	v10 = 0<32>
	Mem0[0x00140048<p32>:word32] = v10
	v10 = 0x1C2<32>
	v11 = loc1
	v12 = 0x4050<32>
	invoke_vii(v10, v11, v12)
	v10 = Mem0[0x00140048<p32>:word32]
	loc2 = v10
	v10 = 0<32>
	Mem0[0x00140048<p32>:word32] = v10
	v10 = loc2
	v11 = 1<32>
	v10 = v10 & v11
	loc3 = v10
	v10 = loc3
	branch !v10 l0011B8E4
	// succ:  l0011B8D3 l0011B8E4
l0011B8D3:
	v10 = ___cxa_find_matching_catch_2()
	loc4 = v10
	v10 = Mem0[0x00140094<p32>:word32]
	loc5 = v10
	v10 = loc1
	___cxa_free_exception(v10)
	v10 = loc4
	___resumeException(v10)
	goto l0011B8F7
	// succ:  l0011B8F7
l0011B8E4:
	v10 = loc1
	v11 = 0x26FC<32>
	Mem0[v10:word32] = v11
	v10 = loc1
	v11 = 0x9F8<32>
	v12 = 0x156<32>
	___cxa_throw(v10, v11, v12)
	// succ:  l0011B8F7
l0011B8F7:
	// succ:  l0011B8F8
l0011B8F8:
	return
	// succ:  fn0011B8A5_exit
fn0011B8A5_exit:


// fn0011B8FA
// Return size: 0
void fn0011B8FA(word32 arg0, word32 arg1)
fn0011B8FA_entry:
	// succ:  l0011B8FA
l0011B8FA:
	v11 = Mem0[0x00140030<p32>:word32]
	loc9 = v11
	v11 = arg0
	v12 = 0<64>
	Mem0[v11:word64] = v12
	v11 = arg0
	v13 = 8<32>
	v11 = v11 + v13
	v13 = 0<32>
	Mem0[v11:word32] = v13
	v11 = arg1
	v13 = 0xB<32>
	v11 = v11 + v13
	loc2 = v11
	v11 = loc2
	v14 = Mem0[v11:int8]
	v11 = CONVERT(v14, int8, word32)
	loc3 = v11
	v11 = loc3
	v13 = 0x18<32>
	v11 = v11 << v13
	v13 = 0x18<32>
	v11 = v11 >> v13
	v13 = 0<32>
	v15 = v11 < v13
	loc4 = v15
	v11 = loc4
	branch !v11 l0011B94F
	// succ:  l0011B930 l0011B94F
l0011B930:
	v11 = arg1
	v11 = Mem0[v11:word32]
	loc5 = v11
	v11 = arg1
	v13 = 4<32>
	v11 = v11 + v13
	loc6 = v11
	v11 = loc6
	v11 = Mem0[v11:word32]
	loc7 = v11
	v11 = arg0
	v13 = loc5
	v16 = loc7
	fn0011B96D(v11, v13, v16)
	goto l0011B969
	// succ:  l0011B969
l0011B94F:
	v11 = arg0
	v13 = arg1
	v12 = Mem0[v13:word64]
	Mem0[v11:word64] = v12
	v11 = arg0
	v13 = 8<32>
	v11 = v11 + v13
	v13 = arg1
	v16 = 8<32>
	v13 = v13 + v16
	v13 = Mem0[v13:word32]
	Mem0[v11:word32] = v13
	// succ:  l0011B969
l0011B969:
	return
	// succ:  fn0011B8FA_exit
l0011B96B:
	return
	// succ:  fn0011B8FA_exit
fn0011B8FA_exit:


// fn0011B96D
// Return size: 0
void fn0011B96D(word32 arg0, word32 arg1, word32 arg2)
fn0011B96D_entry:
	// succ:  l0011B96D
l0011B96D:
	v19 = Mem0[0x00140030<p32>:word32]
	loc18 = v19
	v19 = arg2
	v20 = 0xFFFFFFEF<32>
	v21 = v19 >u v20
	loc10 = v21
	v19 = loc10
	branch !v19 l0011B984
	// succ:  l0011B97E l0011B984
l0011B97E:
	v19 = arg0
	fn0011B8A5(v19)
	// succ:  l0011B984
l0011B984:
	v19 = arg2
	v20 = 0xB<32>
	v21 = v19 <u v20
	loc11 = v21
	v19 = loc11
	branch !v19 l0011B9BF
	// succ:  l0011B98F l0011B9BF
l0011B98F:
	v19 = arg2
	v20 = 0xFF<32>
	v19 = v19 & v20
	loc6 = v19
	v19 = arg0
	v20 = 0xB<32>
	v19 = v19 + v20
	loc7 = v19
	v19 = loc7
	v20 = loc6
	v22 = SLICE(v20, byte, 0)
	Mem0[v19:byte] = v22
	v19 = arg2
	v20 = 0<32>
	v21 = v19 == v20
	loc8 = v21
	v19 = loc8
	branch !v19 l0011B9B5
	// succ:  l0011B9B0 l0011B9B5
l0011B9B0:
	v19 = arg0
	loc4 = v19
	goto l0011B9BD
	// succ:  l0011B9BD
l0011B9B5:
	v19 = arg0
	loc3 = v19
	v19 = 6<32>
	loc17 = v19
	// succ:  l0011B9BD
l0011B9BD:
	goto l0011BA0A
	// succ:  l0011BA0A
l0011B9BF:
	v19 = arg2
	v20 = 0x10<32>
	v19 = v19 + v20
	loc12 = v19
	v19 = loc12
	v20 = 0xFFFFFFF0<32>
	v19 = v19 & v20
	loc13 = v19
	v19 = loc13
	v19 = fn0011B67B(v19)
	loc14 = v19
	v19 = arg0
	v20 = loc14
	Mem0[v19:word32] = v20
	v19 = loc13
	v20 = 0x80000000<32>
	v19 = v19 | v20
	loc15 = v19
	v19 = arg0
	v20 = 8<32>
	v19 = v19 + v20
	loc16 = v19
	v19 = loc16
	v20 = loc15
	Mem0[v19:word32] = v20
	v19 = arg0
	v20 = 4<32>
	v19 = v19 + v20
	loc5 = v19
	v19 = loc5
	v20 = arg2
	Mem0[v19:word32] = v20
	v19 = loc14
	loc3 = v19
	v19 = 6<32>
	loc17 = v19
	// succ:  l0011BA0A
l0011BA0A:
	v19 = loc17
	v20 = 6<32>
	v21 = v19 == v20
	branch !v21 l0011BA21
	// succ:  l0011BA12 l0011BA21
l0011BA12:
	v19 = loc3
	v20 = arg1
	v23 = arg2
	v19 = _memcpy(v19, v20, v23)
	v19 = loc3
	loc4 = v19
	// succ:  l0011BA21
l0011BA21:
	v19 = loc4
	v20 = arg2
	v19 = v19 + v20
	loc9 = v19
	v19 = loc9
	v20 = 0<32>
	v24 = SLICE(v20, byte, 0)
	Mem0[v19:byte] = v24
	return
	// succ:  fn0011B96D_exit
l0011BA30:
	return
	// succ:  fn0011B96D_exit
fn0011B96D_exit:


// fn0011BA32
// Return size: 0
void fn0011BA32(word32 arg0, word32 arg1, word32 arg2)
fn0011BA32_entry:
	// succ:  l0011BA32
l0011BA32:
	v19 = Mem0[0x00140030<p32>:word32]
	loc18 = v19
	v19 = arg1
	v20 = 0xFFFFFFEF<32>
	v21 = v19 >u v20
	loc10 = v21
	v19 = loc10
	branch !v19 l0011BA49
	// succ:  l0011BA43 l0011BA49
l0011BA43:
	v19 = arg0
	fn0011B8A5(v19)
	// succ:  l0011BA49
l0011BA49:
	v19 = arg1
	v20 = 0xB<32>
	v21 = v19 <u v20
	loc11 = v21
	v19 = loc11
	branch !v19 l0011BA84
	// succ:  l0011BA54 l0011BA84
l0011BA54:
	v19 = arg1
	v20 = 0xFF<32>
	v19 = v19 & v20
	loc6 = v19
	v19 = arg0
	v20 = 0xB<32>
	v19 = v19 + v20
	loc7 = v19
	v19 = loc7
	v20 = loc6
	v22 = SLICE(v20, byte, 0)
	Mem0[v19:byte] = v22
	v19 = arg1
	v20 = 0<32>
	v21 = v19 == v20
	loc8 = v21
	v19 = loc8
	branch !v19 l0011BA7A
	// succ:  l0011BA75 l0011BA7A
l0011BA75:
	v19 = arg0
	loc4 = v19
	goto l0011BA82
	// succ:  l0011BA82
l0011BA7A:
	v19 = arg0
	loc3 = v19
	v19 = 6<32>
	loc17 = v19
	// succ:  l0011BA82
l0011BA82:
	goto l0011BACF
	// succ:  l0011BACF
l0011BA84:
	v19 = arg1
	v20 = 0x10<32>
	v19 = v19 + v20
	loc12 = v19
	v19 = loc12
	v20 = 0xFFFFFFF0<32>
	v19 = v19 & v20
	loc13 = v19
	v19 = loc13
	v19 = fn0011B67B(v19)
	loc14 = v19
	v19 = arg0
	v20 = loc14
	Mem0[v19:word32] = v20
	v19 = loc13
	v20 = 0x80000000<32>
	v19 = v19 | v20
	loc15 = v19
	v19 = arg0
	v20 = 8<32>
	v19 = v19 + v20
	loc16 = v19
	v19 = loc16
	v20 = loc15
	Mem0[v19:word32] = v20
	v19 = arg0
	v20 = 4<32>
	v19 = v19 + v20
	loc5 = v19
	v19 = loc5
	v20 = arg1
	Mem0[v19:word32] = v20
	v19 = loc14
	loc3 = v19
	v19 = 6<32>
	loc17 = v19
	// succ:  l0011BACF
l0011BACF:
	v19 = loc17
	v20 = 6<32>
	v21 = v19 == v20
	branch !v21 l0011BAE6
	// succ:  l0011BAD7 l0011BAE6
l0011BAD7:
	v19 = loc3
	v20 = arg2
	v23 = arg1
	v19 = _memset(v19, v20, v23)
	v19 = loc3
	loc4 = v19
	// succ:  l0011BAE6
l0011BAE6:
	v19 = loc4
	v20 = arg1
	v19 = v19 + v20
	loc9 = v19
	v19 = loc9
	v20 = 0<32>
	v24 = SLICE(v20, byte, 0)
	Mem0[v19:byte] = v24
	return
	// succ:  fn0011BA32_exit
l0011BAF5:
	return
	// succ:  fn0011BA32_exit
fn0011BA32_exit:


// fn0011BAF7
// Return size: 0
void fn0011BAF7(word32 arg0)
fn0011BAF7_entry:
	// succ:  l0011BAF7
l0011BAF7:
	v9 = Mem0[0x00140030<p32>:word32]
	loc6 = v9
	v9 = arg0
	v10 = 0xB<32>
	v9 = v9 + v10
	loc1 = v9
	v9 = loc1
	v11 = Mem0[v9:int8]
	v9 = CONVERT(v11, int8, word32)
	loc2 = v9
	v9 = loc2
	v10 = 0x18<32>
	v9 = v9 << v10
	v10 = 0x18<32>
	v9 = v9 >> v10
	v10 = 0<32>
	v12 = v9 < v10
	loc3 = v12
	v9 = loc3
	branch !v9 l0011BB29
	// succ:  l0011BB1C l0011BB29
l0011BB1C:
	v9 = arg0
	v9 = Mem0[v9:word32]
	loc4 = v9
	v9 = loc4
	fn0011B709(v9)
	// succ:  l0011BB29
l0011BB29:
	return
	// succ:  fn0011BAF7_exit
l0011BB2A:
	return
	// succ:  fn0011BAF7_exit
fn0011BAF7_exit:


// fn0011BB2C
// Return size: 0
word32 fn0011BB2C(word32 arg0, word32 arg1, word32 arg2)
fn0011BB2C_entry:
	// succ:  l0011BB2C
l0011BB2C:
	v27 = Mem0[0x00140030<p32>:word32]
	loc26 = v27
	v27 = arg0
	v28 = 0xB<32>
	v27 = v27 + v28
	loc17 = v27
	v27 = loc17
	v29 = Mem0[v27:int8]
	v27 = CONVERT(v29, int8, word32)
	loc18 = v27
	v27 = loc18
	v28 = 0x18<32>
	v27 = v27 << v28
	v28 = 0x18<32>
	v27 = v27 >> v28
	v28 = 0<32>
	v30 = v27 < v28
	loc19 = v30
	v27 = loc19
	branch !v27 l0011BB76
	// succ:  l0011BB51 l0011BB76
l0011BB51:
	v27 = arg0
	v28 = 8<32>
	v27 = v27 + v28
	loc20 = v27
	v27 = loc20
	v27 = Mem0[v27:word32]
	loc21 = v27
	v27 = loc21
	v28 = 0x7FFFFFFF<32>
	v27 = v27 & v28
	loc22 = v27
	v27 = loc22
	v28 = 0xFFFFFFFF<32>
	v27 = v27 + v28
	loc24 = v27
	v27 = loc24
	loc3 = v27
	goto l0011BB7A
	// succ:  l0011BB7A
l0011BB76:
	v27 = 0xA<32>
	loc3 = v27
	// succ:  l0011BB7A
l0011BB7A:
	v27 = loc3
	v28 = arg2
	v30 = v27 <u v28
	loc23 = v30
	// succ:  l0011BB82
l0011BB82:
	v27 = loc23
	branch !v27 l0011BBC7
	// succ:  l0011BB88 l0011BBC7
l0011BB88:
	v27 = loc19
	branch !v27 l0011BB9F
	// succ:  l0011BB8C l0011BB9F
l0011BB8C:
	v27 = arg0
	v28 = 4<32>
	v27 = v27 + v28
	loc12 = v27
	v27 = loc12
	v27 = Mem0[v27:word32]
	loc13 = v27
	v27 = loc13
	loc16 = v27
	goto l0011BBAB
	// succ:  l0011BBAB
l0011BB9F:
	v27 = loc18
	v28 = 0xFF<32>
	v27 = v27 & v28
	loc14 = v27
	v27 = loc14
	loc16 = v27
	// succ:  l0011BBAB
l0011BBAB:
	v27 = arg2
	v28 = loc3
	v27 = v27 - v28
	loc15 = v27
	v27 = arg0
	v28 = loc3
	v31 = loc15
	v32 = loc16
	v33 = 0<32>
	v34 = loc16
	v35 = arg2
	v36 = arg1
	fn0011BC43(v27, v28, v31, v32, v33, v34, v35, v36)
	goto l0011BC3C
	// succ:  l0011BC3C
l0011BBC7:
	v27 = loc19
	branch !v27 l0011BBD7
	// succ:  l0011BBCB l0011BBD7
l0011BBCB:
	v27 = arg0
	v27 = Mem0[v27:word32]
	loc4 = v27
	v27 = loc4
	loc6 = v27
	goto l0011BBDB
	// succ:  l0011BBDB
l0011BBD7:
	v27 = arg0
	loc6 = v27
	// succ:  l0011BBDB
l0011BBDB:
	v27 = arg2
	v28 = 0<32>
	v30 = v27 == v28
	loc5 = v30
	v27 = loc5
	v30 = v27 == 0<32>
	branch !v30 l0011BBF3
	// succ:  l0011BBE8 l0011BBF3
l0011BBE8:
	v27 = loc6
	v28 = arg1
	v31 = arg2
	v27 = _memmove(v27, v28, v31)
	// succ:  l0011BBF3
l0011BBF3:
	v27 = loc6
	v28 = arg2
	v27 = v27 + v28
	loc7 = v27
	v27 = loc7
	v28 = 0<32>
	v37 = SLICE(v28, byte, 0)
	Mem0[v27:byte] = v37
	v27 = loc17
	v38 = Mem0[v27:int8]
	v27 = CONVERT(v38, int8, word32)
	loc8 = v27
	v27 = loc8
	v28 = 0x18<32>
	v27 = v27 << v28
	v28 = 0x18<32>
	v27 = v27 >> v28
	v28 = 0<32>
	v30 = v27 < v28
	loc9 = v30
	v27 = loc9
	branch !v27 l0011BC2A
	// succ:  l0011BC19 l0011BC2A
l0011BC19:
	v27 = arg0
	v28 = 4<32>
	v27 = v27 + v28
	loc10 = v27
	v27 = loc10
	v28 = arg2
	Mem0[v27:word32] = v28
	goto l0011BC3D
	// succ:  l0011BC3D
l0011BC2A:
	v27 = arg2
	v28 = 0xFF<32>
	v27 = v27 & v28
	loc11 = v27
	v27 = loc17
	v28 = loc11
	v39 = SLICE(v28, byte, 0)
	Mem0[v27:byte] = v39
	goto l0011BC3D
	// succ:  l0011BC3D
l0011BC3B:
	// succ:  l0011BC3C
l0011BC3C:
	// succ:  l0011BC3D
l0011BC3D:
	v27 = arg0
	return v27
	// succ:  fn0011BB2C_exit
l0011BC41:
	return v27
	// succ:  fn0011BB2C_exit
fn0011BB2C_exit:


// fn0011BC43
// Return size: 0
void fn0011BC43(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn0011BC43_entry:
	// succ:  l0011BC43
l0011BC43:
	v39 = Mem0[0x00140030<p32>:word32]
	loc43 = v39
	v39 = 0xFFFFFFEE<32>
	v40 = arg1
	v39 = v39 - v40
	loc39 = v39
	v39 = loc39
	v40 = arg2
	v41 = v39 <u v40
	loc40 = v41
	v39 = loc40
	branch !v39 l0011BC61
	// succ:  l0011BC5B l0011BC61
l0011BC5B:
	v39 = arg0
	fn0011B8A5(v39)
	// succ:  l0011BC61
l0011BC61:
	v39 = arg0
	v40 = 0xB<32>
	v39 = v39 + v40
	loc9 = v39
	v39 = loc9
	v42 = Mem0[v39:int8]
	v39 = CONVERT(v42, int8, word32)
	loc10 = v39
	v39 = loc10
	v40 = 0x18<32>
	v39 = v39 << v40
	v40 = 0x18<32>
	v39 = v39 >> v40
	v40 = 0<32>
	v41 = v39 < v40
	loc11 = v41
	v39 = loc11
	branch !v39 l0011BC8C
	// succ:  l0011BC80 l0011BC8C
l0011BC80:
	v39 = arg0
	v39 = Mem0[v39:word32]
	loc12 = v39
	v39 = loc12
	loc23 = v39
	goto l0011BC90
	// succ:  l0011BC90
l0011BC8C:
	v39 = arg0
	loc23 = v39
	// succ:  l0011BC90
l0011BC90:
	v39 = arg1
	v40 = 0x7FFFFFE7<32>
	v41 = v39 <u v40
	loc13 = v41
	v39 = loc13
	branch !v39 l0011BCE7
	// succ:  l0011BCA0 l0011BCE7
l0011BCA0:
	v39 = arg2
	v40 = arg1
	v39 = v39 + v40
	loc14 = v39
	v39 = arg1
	v40 = 1<32>
	v39 = v39 << v40
	loc15 = v39
	v39 = loc14
	v40 = loc15
	v41 = v39 <u v40
	loc16 = v41
	v39 = loc16
	branch !v39 l0011BCBC
	// succ:  l0011BCB9 l0011BCBC
l0011BCB9:
	v39 = loc15
	goto l0011BCBE
	// succ:  l0011BCBE
l0011BCBC:
	v39 = loc14
	// succ:  l0011BCBE
l0011BCBE:
	loc8 = v39
	v39 = loc8
	v40 = 0xB<32>
	v41 = v39 <u v40
	loc17 = v41
	v39 = loc8
	v40 = 0x10<32>
	v39 = v39 + v40
	loc18 = v39
	v39 = loc18
	v40 = 0xFFFFFFF0<32>
	v39 = v39 & v40
	loc19 = v39
	v39 = loc17
	branch !v39 l0011BCDD
	// succ:  l0011BCDA l0011BCDD
l0011BCDA:
	v39 = 0xB<32>
	goto l0011BCDF
	// succ:  l0011BCDF
l0011BCDD:
	v39 = loc19
	// succ:  l0011BCDF
l0011BCDF:
	loc41 = v39
	v39 = loc41
	loc20 = v39
	goto l0011BCEB
	// succ:  l0011BCEB
l0011BCE7:
	v39 = 0xFFFFFFEF<32>
	loc20 = v39
	// succ:  l0011BCEB
l0011BCEB:
	v39 = loc20
	v39 = fn0011B67B(v39)
	loc21 = v39
	v39 = arg4
	v40 = 0<32>
	v41 = v39 == v40
	loc22 = v41
	v39 = loc22
	v41 = v39 == 0<32>
	branch !v41 l0011BD0A
	// succ:  l0011BCFF l0011BD0A
l0011BCFF:
	v39 = loc21
	v40 = loc23
	v43 = arg4
	v39 = _memcpy(v39, v40, v43)
	// succ:  l0011BD0A
l0011BD0A:
	v39 = arg6
	v40 = 0<32>
	v41 = v39 == v40
	loc24 = v41
	v39 = loc24
	v41 = v39 == 0<32>
	branch !v41 l0011BD28
	// succ:  l0011BD16 l0011BD28
l0011BD16:
	v39 = loc21
	v40 = arg4
	v39 = v39 + v40
	loc25 = v39
	v39 = loc25
	v40 = arg7
	v43 = arg6
	v39 = _memcpy(v39, v40, v43)
	// succ:  l0011BD28
l0011BD28:
	v39 = arg3
	v40 = arg5
	v39 = v39 - v40
	loc26 = v39
	v39 = loc26
	v40 = arg4
	v39 = v39 - v40
	loc27 = v39
	v39 = loc27
	v40 = 0<32>
	v41 = v39 == v40
	loc28 = v41
	v39 = loc28
	v41 = v39 == 0<32>
	branch !v41 l0011BD69
	// succ:  l0011BD42 l0011BD69
l0011BD42:
	v39 = loc21
	v40 = arg4
	v39 = v39 + v40
	loc29 = v39
	v39 = loc29
	v40 = arg6
	v39 = v39 + v40
	loc30 = v39
	v39 = loc23
	v40 = arg4
	v39 = v39 + v40
	loc31 = v39
	v39 = loc31
	v40 = arg5
	v39 = v39 + v40
	loc32 = v39
	v39 = loc30
	v40 = loc32
	v43 = loc27
	v39 = _memcpy(v39, v40, v43)
	// succ:  l0011BD69
l0011BD69:
	v39 = arg1
	v40 = 0xA<32>
	v41 = v39 == v40
	loc33 = v41
	v39 = loc33
	v41 = v39 == 0<32>
	branch !v41 l0011BD7B
	// succ:  l0011BD75 l0011BD7B
l0011BD75:
	v39 = loc23
	fn0011B709(v39)
	// succ:  l0011BD7B
l0011BD7B:
	v39 = arg0
	v40 = loc21
	Mem0[v39:word32] = v40
	v39 = loc20
	v40 = 0x80000000<32>
	v39 = v39 | v40
	loc34 = v39
	v39 = arg0
	v40 = 8<32>
	v39 = v39 + v40
	loc35 = v39
	v39 = loc35
	v40 = loc34
	Mem0[v39:word32] = v40
	v39 = loc26
	v40 = arg6
	v39 = v39 + v40
	loc36 = v39
	v39 = arg0
	v40 = 4<32>
	v39 = v39 + v40
	loc37 = v39
	v39 = loc37
	v40 = loc36
	Mem0[v39:word32] = v40
	v39 = loc21
	v40 = loc36
	v39 = v39 + v40
	loc38 = v39
	v39 = loc38
	v40 = 0<32>
	v44 = SLICE(v40, byte, 0)
	Mem0[v39:byte] = v44
	return
	// succ:  fn0011BC43_exit
l0011BDBF:
	return
	// succ:  fn0011BC43_exit
fn0011BC43_exit:


// fn0011BDC1
// Return size: 0
void fn0011BDC1(word32 arg0, word32 arg1)
fn0011BDC1_entry:
	// succ:  l0011BDC1
l0011BDC1:
	v59 = Mem0[0x00140030<p32>:word32]
	loc57 = v59
	v59 = arg1
	v60 = 0xFFFFFFEF<32>
	v61 = v59 >u v60
	loc26 = v61
	v59 = loc26
	branch !v59 l0011BDD8
	// succ:  l0011BDD2 l0011BDD8
l0011BDD2:
	v59 = arg0
	fn0011B8A5(v59)
	// succ:  l0011BDD8
l0011BDD8:
	v59 = arg0
	v60 = 0xB<32>
	v59 = v59 + v60
	loc37 = v59
	v59 = loc37
	v62 = Mem0[v59:int8]
	v59 = CONVERT(v62, int8, word32)
	loc48 = v59
	v59 = loc48
	v60 = 0x18<32>
	v59 = v59 << v60
	v60 = 0x18<32>
	v59 = v59 >> v60
	v60 = 0<32>
	v61 = v59 < v60
	loc49 = v61
	v59 = loc49
	branch !v59 l0011BE2E
	// succ:  l0011BDF7 l0011BE2E
l0011BDF7:
	v59 = arg0
	v60 = 8<32>
	v59 = v59 + v60
	loc50 = v59
	v59 = loc50
	v59 = Mem0[v59:word32]
	loc51 = v59
	v59 = loc51
	v60 = 0x7FFFFFFF<32>
	v59 = v59 & v60
	loc52 = v59
	v59 = loc52
	v60 = 0xFFFFFFFF<32>
	v59 = v59 + v60
	loc54 = v59
	v59 = arg0
	v60 = 4<32>
	v59 = v59 + v60
	loc53 = v59
	v59 = loc53
	v59 = Mem0[v59:word32]
	loc16 = v59
	v59 = loc16
	loc19 = v59
	v59 = loc54
	loc24 = v59
	goto l0011BE3E
	// succ:  l0011BE3E
l0011BE2E:
	v59 = loc48
	v60 = 0xFF<32>
	v59 = v59 & v60
	loc17 = v59
	v59 = loc17
	loc19 = v59
	v59 = 0xA<32>
	loc24 = v59
	// succ:  l0011BE3E
l0011BE3E:
	v59 = loc19
	v60 = arg1
	v61 = v59 >u v60
	loc18 = v61
	v59 = loc18
	branch !v59 l0011BE4D
	// succ:  l0011BE4A l0011BE4D
l0011BE4A:
	v59 = loc19
	goto l0011BE4F
	// succ:  l0011BE4F
l0011BE4D:
	v59 = arg1
	// succ:  l0011BE4F
l0011BE4F:
	loc15 = v59
	v59 = loc15
	v60 = 0xB<32>
	v61 = v59 <u v60
	loc20 = v61
	v59 = loc15
	v60 = 0x10<32>
	v59 = v59 + v60
	loc21 = v59
	v59 = loc21
	v60 = 0xFFFFFFF0<32>
	v59 = v59 & v60
	loc22 = v59
	v59 = loc22
	v60 = 0xFFFFFFFF<32>
	v59 = v59 + v60
	loc55 = v59
	v59 = loc20
	branch !v59 l0011BE75
	// succ:  l0011BE72 l0011BE75
l0011BE72:
	v59 = 0xA<32>
	goto l0011BE77
	// succ:  l0011BE77
l0011BE75:
	v59 = loc55
	// succ:  l0011BE77
l0011BE77:
	loc14 = v59
	v59 = loc14
	v60 = loc24
	v61 = v59 == v60
	loc23 = v61
	// succ:  l0011BE81
l0011BE81:
	v59 = loc23
	v61 = v59 == 0<32>
	branch !v61 l0011C015
	// succ:  l0011BE88 l0011C015
l0011BE88:
	v59 = loc20
	branch !v59 l0011BEC0
	// succ:  l0011BE8E l0011BEC0
l0011BE8E:
	v59 = arg0
	v59 = Mem0[v59:word32]
	loc35 = v59
	v59 = loc49
	branch !v59 l0011BEAA
	// succ:  l0011BE99 l0011BEAA
l0011BE99:
	v59 = loc35
	loc4 = v59
	v59 = 0<32>
	loc7 = v59
	v59 = arg0
	loc12 = v59
	v59 = 0x10<32>
	loc56 = v59
	goto l0011BEBE
	// succ:  l0011BEBE
l0011BEAA:
	v59 = loc35
	loc5 = v59
	v59 = 0<32>
	loc8 = v59
	v59 = 1<32>
	loc10 = v59
	v59 = arg0
	loc13 = v59
	v59 = 0x11<32>
	loc56 = v59
	// succ:  l0011BEBE
l0011BEBE:
	goto l0011BF4D
	// succ:  l0011BF4D
l0011BEC0:
	v59 = loc14
	v60 = loc24
	v61 = v59 >u v60
	loc25 = v61
	v59 = loc14
	v60 = 1<32>
	v59 = v59 + v60
	loc27 = v59
	v59 = loc25
	branch !v59 l0011BEDE
	// succ:  l0011BED2 l0011BEDE
l0011BED2:
	v59 = loc27
	v59 = fn0011B67B(v59)
	loc28 = v59
	v59 = loc28
	loc2 = v59
	goto l0011BF17
	// succ:  l0011BF17
l0011BEDE:
	v59 = 0<32>
	Mem0[0x00140048<p32>:word32] = v59
	v59 = 0x1EB<32>
	v60 = loc27
	v59 = invoke_ii(v59, v60)
	loc29 = v59
	v59 = Mem0[0x00140048<p32>:word32]
	loc30 = v59
	v59 = 0<32>
	Mem0[0x00140048<p32>:word32] = v59
	v59 = loc30
	v60 = 1<32>
	v59 = v59 & v60
	loc31 = v59
	v59 = loc31
	branch !v59 l0011BF12
	// succ:  l0011BEFE l0011BF12
l0011BEFE:
	v59 = 0<32>
	v59 = ___cxa_find_matching_catch_3(v59)
	loc32 = v59
	v59 = Mem0[0x00140094<p32>:word32]
	loc33 = v59
	v59 = loc32
	v59 = ___cxa_begin_catch(v59)
	___cxa_end_catch()
	goto l0011C015
	// succ:  l0011C015
l0011BF12:
	v59 = loc29
	loc2 = v59
	// succ:  l0011BF16
l0011BF16:
	// succ:  l0011BF17
l0011BF17:
	v59 = loc49
	branch !v59 l0011BF36
	// succ:  l0011BF1C l0011BF36
l0011BF1C:
	v59 = arg0
	v59 = Mem0[v59:word32]
	loc34 = v59
	v59 = loc34
	loc4 = v59
	v59 = 1<32>
	loc7 = v59
	v59 = loc2
	loc12 = v59
	v59 = 0x10<32>
	loc56 = v59
	goto l0011BF4E
	// succ:  l0011BF4E
l0011BF36:
	v59 = arg0
	loc5 = v59
	v59 = 1<32>
	loc8 = v59
	v59 = 0<32>
	loc10 = v59
	v59 = loc2
	loc13 = v59
	v59 = 0x11<32>
	loc56 = v59
	goto l0011BF4E
	// succ:  l0011BF4E
l0011BF4C:
	// succ:  l0011BF4D
l0011BF4D:
	// succ:  l0011BF4E
l0011BF4E:
	v59 = loc56
	v60 = 0x10<32>
	v61 = v59 == v60
	branch !v61 l0011BF79
	// succ:  l0011BF56 l0011BF79
l0011BF56:
	v59 = arg0
	v60 = 4<32>
	v59 = v59 + v60
	loc36 = v59
	v59 = loc36
	v59 = Mem0[v59:word32]
	loc38 = v59
	v59 = loc4
	loc3 = v59
	v59 = loc7
	loc6 = v59
	v59 = 1<32>
	loc9 = v59
	v59 = loc12
	loc11 = v59
	v59 = loc38
	loc41 = v59
	goto l0011BF9D
	// succ:  l0011BF9D
l0011BF79:
	v59 = loc56
	v60 = 0x11<32>
	v61 = v59 == v60
	branch !v61 l0011BF9D
	// succ:  l0011BF80 l0011BF9D
l0011BF80:
	v59 = loc48
	v60 = 0xFF<32>
	v59 = v59 & v60
	loc39 = v59
	v59 = loc5
	loc3 = v59
	v59 = loc8
	loc6 = v59
	v59 = loc10
	loc9 = v59
	v59 = loc13
	loc11 = v59
	v59 = loc39
	loc41 = v59
	// succ:  l0011BF9D
l0011BF9D:
	// succ:  l0011BF9D
l0011BF9D:
	v59 = loc41
	v60 = 1<32>
	v59 = v59 + v60
	loc40 = v59
	v59 = loc40
	v60 = 0<32>
	v61 = v59 == v60
	loc42 = v61
	v59 = loc42
	v61 = v59 == 0<32>
	branch !v61 l0011BFBC
	// succ:  l0011BFB1 l0011BFBC
l0011BFB1:
	v59 = loc11
	v60 = loc3
	v63 = loc40
	v59 = _memcpy(v59, v60, v63)
	// succ:  l0011BFBC
l0011BFBC:
	v59 = loc9
	branch !v59 l0011BFC6
	// succ:  l0011BFC0 l0011BFC6
l0011BFC0:
	v59 = loc3
	fn0011B709(v59)
	// succ:  l0011BFC6
l0011BFC6:
	v59 = loc6
	branch !v59 l0011C002
	// succ:  l0011BFCA l0011C002
l0011BFCA:
	v59 = loc14
	v60 = 1<32>
	v59 = v59 + v60
	loc43 = v59
	v59 = loc43
	v60 = 0x80000000<32>
	v59 = v59 | v60
	loc44 = v59
	v59 = arg0
	v60 = 8<32>
	v59 = v59 + v60
	loc45 = v59
	v59 = loc45
	v60 = loc44
	Mem0[v59:word32] = v60
	v59 = arg0
	v60 = 4<32>
	v59 = v59 + v60
	loc46 = v59
	v59 = loc46
	v60 = loc19
	Mem0[v59:word32] = v60
	v59 = arg0
	v60 = loc11
	Mem0[v59:word32] = v60
	goto l0011C015
	// succ:  l0011C015
l0011C002:
	v59 = loc19
	v60 = 0xFF<32>
	v59 = v59 & v60
	loc47 = v59
	v59 = loc37
	v60 = loc47
	v64 = SLICE(v60, byte, 0)
	Mem0[v59:byte] = v64
	goto l0011C015
	// succ:  l0011C015
l0011C013:
	// succ:  l0011C015
l0011C015:
	// succ:  l0011C015
l0011C015:
	return
	// succ:  fn0011BDC1_exit
l0011C017:
	return
	// succ:  fn0011BDC1_exit
fn0011BDC1_exit:


// fn0011C019
// Return size: 0
word32 fn0011C019(word32 arg0, word32 arg1)
fn0011C019_entry:
	// succ:  l0011C019
l0011C019:
	v7 = Mem0[0x00140030<p32>:word32]
	loc5 = v7
	v7 = arg1
	v7 = fn000DAF30(v7)
	loc2 = v7
	v7 = arg0
	v8 = arg1
	v9 = loc2
	v7 = fn0011BB2C(v7, v8, v9)
	loc3 = v7
	v7 = loc3
	return v7
	// succ:  fn0011C019_exit
l0011C034:
	return v7
	// succ:  fn0011C019_exit
fn0011C019_exit:


// fn0011C036
// Return size: 0
void fn0011C036(word32 arg0, word32 arg1, word32 arg2)
fn0011C036_entry:
	// succ:  l0011C036
l0011C036:
	v19 = Mem0[0x00140030<p32>:word32]
	loc18 = v19
	v19 = arg0
	v20 = 0xB<32>
	v19 = v19 + v20
	loc10 = v19
	v19 = loc10
	v21 = Mem0[v19:int8]
	v19 = CONVERT(v21, int8, word32)
	loc11 = v19
	v19 = loc11
	v20 = 0x18<32>
	v19 = v19 << v20
	v20 = 0x18<32>
	v19 = v19 >> v20
	v20 = 0<32>
	v22 = v19 < v20
	loc12 = v22
	v19 = loc12
	branch !v19 l0011C06E
	// succ:  l0011C05B l0011C06E
l0011C05B:
	v19 = arg0
	v20 = 4<32>
	v19 = v19 + v20
	loc13 = v19
	v19 = loc13
	v19 = Mem0[v19:word32]
	loc14 = v19
	v19 = loc14
	loc3 = v19
	goto l0011C07A
	// succ:  l0011C07A
l0011C06E:
	v19 = loc11
	v20 = 0xFF<32>
	v19 = v19 & v20
	loc15 = v19
	v19 = loc15
	loc3 = v19
	// succ:  l0011C07A
l0011C07A:
	v19 = loc3
	v20 = arg1
	v22 = v19 <u v20
	loc16 = v22
	// succ:  l0011C082
l0011C082:
	v19 = loc16
	branch !v19 l0011C09A
	// succ:  l0011C088 l0011C09A
l0011C088:
	v19 = arg1
	v20 = loc3
	v19 = v19 - v20
	loc4 = v19
	v19 = arg0
	v20 = loc4
	v23 = arg2
	v19 = fn0011C0EA(v19, v20, v23)
	goto l0011C0E4
	// succ:  l0011C0E4
l0011C09A:
	v19 = loc12
	branch !v19 l0011C0C4
	// succ:  l0011C09E l0011C0C4
l0011C09E:
	v19 = arg0
	v19 = Mem0[v19:word32]
	loc5 = v19
	v19 = loc5
	v20 = arg1
	v19 = v19 + v20
	loc6 = v19
	v19 = loc6
	v20 = 0<32>
	v24 = SLICE(v20, byte, 0)
	Mem0[v19:byte] = v24
	v19 = arg0
	v20 = 4<32>
	v19 = v19 + v20
	loc7 = v19
	v19 = loc7
	v20 = arg1
	Mem0[v19:word32] = v20
	goto l0011C0E6
	// succ:  l0011C0E6
l0011C0C4:
	v19 = arg0
	v20 = arg1
	v19 = v19 + v20
	loc8 = v19
	v19 = loc8
	v20 = 0<32>
	v25 = SLICE(v20, byte, 0)
	Mem0[v19:byte] = v25
	v19 = arg1
	v20 = 0xFF<32>
	v19 = v19 & v20
	loc9 = v19
	v19 = loc10
	v20 = loc9
	v26 = SLICE(v20, byte, 0)
	Mem0[v19:byte] = v26
	goto l0011C0E6
	// succ:  l0011C0E6
l0011C0E3:
	// succ:  l0011C0E4
l0011C0E4:
	// succ:  l0011C0E6
l0011C0E6:
	return
	// succ:  fn0011C036_exit
l0011C0E8:
	return
	// succ:  fn0011C036_exit
fn0011C036_exit:


// fn0011C0EA
// Return size: 0
word32 fn0011C0EA(word32 arg0, word32 arg1, word32 arg2)
fn0011C0EA_entry:
	// succ:  l0011C0EA
l0011C0EA:
	v34 = Mem0[0x00140030<p32>:word32]
	loc33 = v34
	v34 = arg1
	v35 = 0<32>
	v36 = v34 == v35
	loc24 = v36
	v34 = loc24
	v36 = v34 == 0<32>
	branch !v36 l0011C225
	// succ:  l0011C0FC l0011C225
l0011C0FC:
	v34 = arg0
	v35 = 0xB<32>
	v34 = v34 + v35
	loc25 = v34
	v34 = loc25
	v37 = Mem0[v34:int8]
	v34 = CONVERT(v37, int8, word32)
	loc26 = v34
	v34 = loc26
	v35 = 0x18<32>
	v34 = v34 << v35
	v35 = 0x18<32>
	v34 = v34 >> v35
	v35 = 0<32>
	v36 = v34 < v35
	loc27 = v36
	v34 = loc27
	branch !v34 l0011C152
	// succ:  l0011C11B l0011C152
l0011C11B:
	v34 = arg0
	v35 = 8<32>
	v34 = v34 + v35
	loc28 = v34
	v34 = loc28
	v34 = Mem0[v34:word32]
	loc29 = v34
	v34 = loc29
	v35 = 0x7FFFFFFF<32>
	v34 = v34 & v35
	loc30 = v34
	v34 = loc30
	v35 = 0xFFFFFFFF<32>
	v34 = v34 + v35
	loc31 = v34
	v34 = arg0
	v35 = 4<32>
	v34 = v34 + v35
	loc4 = v34
	v34 = loc4
	v34 = Mem0[v34:word32]
	loc5 = v34
	v34 = loc31
	loc8 = v34
	v34 = loc5
	loc9 = v34
	goto l0011C162
	// succ:  l0011C162
l0011C152:
	v34 = loc26
	v35 = 0xFF<32>
	v34 = v34 & v35
	loc6 = v34
	v34 = 0xA<32>
	loc8 = v34
	v34 = loc6
	loc9 = v34
	// succ:  l0011C162
l0011C162:
	v34 = loc8
	v35 = loc9
	v34 = v34 - v35
	loc7 = v34
	v34 = loc7
	v35 = arg1
	v36 = v34 <u v35
	loc10 = v36
	v34 = loc10
	branch !v34 l0011C1A0
	// succ:  l0011C175 l0011C1A0
l0011C175:
	v34 = arg1
	v35 = loc8
	v34 = v34 - v35
	loc11 = v34
	v34 = loc11
	v35 = loc9
	v34 = v34 + v35
	loc12 = v34
	v34 = arg0
	v35 = loc8
	v38 = loc12
	v39 = loc9
	v40 = loc9
	v41 = 0<32>
	v42 = 0<32>
	fn0011C22A(v34, v35, v38, v39, v40, v41, v42)
	v34 = loc25
	v43 = Mem0[v34:int8]
	v34 = CONVERT(v43, int8, word32)
	loc3 = v34
	v34 = loc3
	loc14 = v34
	goto l0011C1A4
	// succ:  l0011C1A4
l0011C1A0:
	v34 = loc26
	loc14 = v34
	// succ:  l0011C1A4
l0011C1A4:
	v34 = loc14
	v35 = 0x18<32>
	v34 = v34 << v35
	v35 = 0x18<32>
	v34 = v34 >> v35
	v35 = 0<32>
	v36 = v34 < v35
	loc13 = v36
	v34 = loc13
	branch !v34 l0011C1C2
	// succ:  l0011C1B6 l0011C1C2
l0011C1B6:
	v34 = arg0
	v34 = Mem0[v34:word32]
	loc15 = v34
	v34 = loc15
	loc17 = v34
	goto l0011C1C6
	// succ:  l0011C1C6
l0011C1C2:
	v34 = arg0
	loc17 = v34
	// succ:  l0011C1C6
l0011C1C6:
	v34 = loc17
	v35 = loc9
	v34 = v34 + v35
	loc16 = v34
	v34 = loc16
	v35 = arg2
	v38 = arg1
	v34 = _memset(v34, v35, v38)
	v34 = loc9
	v35 = arg1
	v34 = v34 + v35
	loc18 = v34
	v34 = loc25
	v44 = Mem0[v34:int8]
	v34 = CONVERT(v44, int8, word32)
	loc19 = v34
	v34 = loc19
	v35 = 0x18<32>
	v34 = v34 << v35
	v35 = 0x18<32>
	v34 = v34 >> v35
	v35 = 0<32>
	v36 = v34 < v35
	loc20 = v36
	v34 = loc20
	branch !v34 l0011C206
	// succ:  l0011C1F7 l0011C206
l0011C1F7:
	v34 = arg0
	v35 = 4<32>
	v34 = v34 + v35
	loc21 = v34
	v34 = loc21
	v35 = loc18
	Mem0[v34:word32] = v35
	goto l0011C215
	// succ:  l0011C215
l0011C206:
	v34 = loc18
	v35 = 0xFF<32>
	v34 = v34 & v35
	loc22 = v34
	v34 = loc25
	v35 = loc22
	v45 = SLICE(v35, byte, 0)
	Mem0[v34:byte] = v45
	// succ:  l0011C215
l0011C215:
	v34 = loc17
	v35 = loc18
	v34 = v34 + v35
	loc23 = v34
	v34 = loc23
	v35 = 0<32>
	v46 = SLICE(v35, byte, 0)
	Mem0[v34:byte] = v46
	// succ:  l0011C225
l0011C225:
	v34 = arg0
	return v34
	// succ:  fn0011C0EA_exit
l0011C228:
	return v34
	// succ:  fn0011C0EA_exit
fn0011C0EA_exit:


// fn0011C22A
// Return size: 0
void fn0011C22A(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6)
fn0011C22A_entry:
	// succ:  l0011C22A
l0011C22A:
	v34 = Mem0[0x00140030<p32>:word32]
	loc37 = v34
	v34 = 0xFFFFFFEF<32>
	v35 = arg1
	v34 = v34 - v35
	loc32 = v34
	v34 = loc32
	v35 = arg2
	v36 = v34 <u v35
	loc33 = v36
	v34 = loc33
	branch !v34 l0011C248
	// succ:  l0011C242 l0011C248
l0011C242:
	v34 = arg0
	fn0011B8A5(v34)
	// succ:  l0011C248
l0011C248:
	v34 = arg0
	v35 = 0xB<32>
	v34 = v34 + v35
	loc34 = v34
	v34 = loc34
	v37 = Mem0[v34:int8]
	v34 = CONVERT(v37, int8, word32)
	loc8 = v34
	v34 = loc8
	v35 = 0x18<32>
	v34 = v34 << v35
	v35 = 0x18<32>
	v34 = v34 >> v35
	v35 = 0<32>
	v36 = v34 < v35
	loc9 = v36
	v34 = loc9
	branch !v34 l0011C273
	// succ:  l0011C267 l0011C273
l0011C267:
	v34 = arg0
	v34 = Mem0[v34:word32]
	loc10 = v34
	v34 = loc10
	loc21 = v34
	goto l0011C277
	// succ:  l0011C277
l0011C273:
	v34 = arg0
	loc21 = v34
	// succ:  l0011C277
l0011C277:
	v34 = arg1
	v35 = 0x7FFFFFE7<32>
	v36 = v34 <u v35
	loc11 = v36
	v34 = loc11
	branch !v34 l0011C2CE
	// succ:  l0011C287 l0011C2CE
l0011C287:
	v34 = arg2
	v35 = arg1
	v34 = v34 + v35
	loc12 = v34
	v34 = arg1
	v35 = 1<32>
	v34 = v34 << v35
	loc13 = v34
	v34 = loc12
	v35 = loc13
	v36 = v34 <u v35
	loc14 = v36
	v34 = loc14
	branch !v34 l0011C2A3
	// succ:  l0011C2A0 l0011C2A3
l0011C2A0:
	v34 = loc13
	goto l0011C2A5
	// succ:  l0011C2A5
l0011C2A3:
	v34 = loc12
	// succ:  l0011C2A5
l0011C2A5:
	loc7 = v34
	v34 = loc7
	v35 = 0xB<32>
	v36 = v34 <u v35
	loc15 = v36
	v34 = loc7
	v35 = 0x10<32>
	v34 = v34 + v35
	loc16 = v34
	v34 = loc16
	v35 = 0xFFFFFFF0<32>
	v34 = v34 & v35
	loc17 = v34
	v34 = loc15
	branch !v34 l0011C2C4
	// succ:  l0011C2C1 l0011C2C4
l0011C2C1:
	v34 = 0xB<32>
	goto l0011C2C6
	// succ:  l0011C2C6
l0011C2C4:
	v34 = loc17
	// succ:  l0011C2C6
l0011C2C6:
	loc35 = v34
	v34 = loc35
	loc18 = v34
	goto l0011C2D2
	// succ:  l0011C2D2
l0011C2CE:
	v34 = 0xFFFFFFEF<32>
	loc18 = v34
	// succ:  l0011C2D2
l0011C2D2:
	v34 = loc18
	v34 = fn0011B67B(v34)
	loc19 = v34
	v34 = arg4
	v35 = 0<32>
	v36 = v34 == v35
	loc20 = v36
	v34 = loc20
	v36 = v34 == 0<32>
	branch !v36 l0011C2F1
	// succ:  l0011C2E6 l0011C2F1
l0011C2E6:
	v34 = loc19
	v35 = loc21
	v38 = arg4
	v34 = _memcpy(v34, v35, v38)
	// succ:  l0011C2F1
l0011C2F1:
	v34 = arg3
	v35 = arg5
	v34 = v34 - v35
	loc22 = v34
	v34 = loc22
	v35 = arg4
	v34 = v34 - v35
	loc23 = v34
	v34 = loc23
	v35 = 0<32>
	v36 = v34 == v35
	loc24 = v36
	v34 = loc24
	v36 = v34 == 0<32>
	branch !v36 l0011C332
	// succ:  l0011C30B l0011C332
l0011C30B:
	v34 = loc19
	v35 = arg4
	v34 = v34 + v35
	loc25 = v34
	v34 = loc25
	v35 = arg6
	v34 = v34 + v35
	loc26 = v34
	v34 = loc21
	v35 = arg4
	v34 = v34 + v35
	loc27 = v34
	v34 = loc27
	v35 = arg5
	v34 = v34 + v35
	loc28 = v34
	v34 = loc26
	v35 = loc28
	v38 = loc23
	v34 = _memcpy(v34, v35, v38)
	// succ:  l0011C332
l0011C332:
	v34 = arg1
	v35 = 0xA<32>
	v36 = v34 == v35
	loc29 = v36
	v34 = loc29
	v36 = v34 == 0<32>
	branch !v36 l0011C344
	// succ:  l0011C33E l0011C344
l0011C33E:
	v34 = loc21
	fn0011B709(v34)
	// succ:  l0011C344
l0011C344:
	v34 = arg0
	v35 = loc19
	Mem0[v34:word32] = v35
	v34 = loc18
	v35 = 0x80000000<32>
	v34 = v34 | v35
	loc30 = v34
	v34 = arg0
	v35 = 8<32>
	v34 = v34 + v35
	loc31 = v34
	v34 = loc31
	v35 = loc30
	Mem0[v34:word32] = v35
	return
	// succ:  fn0011C22A_exit
l0011C365:
	return
	// succ:  fn0011C22A_exit
fn0011C22A_exit:


// fn0011C367
// Return size: 0
word32 fn0011C367(word32 arg0, word32 arg1, word32 arg2)
fn0011C367_entry:
	// succ:  l0011C367
l0011C367:
	v31 = Mem0[0x00140030<p32>:word32]
	loc30 = v31
	v31 = arg0
	v32 = 0xB<32>
	v31 = v31 + v32
	loc21 = v31
	v31 = loc21
	v33 = Mem0[v31:int8]
	v31 = CONVERT(v33, int8, word32)
	loc22 = v31
	v31 = loc22
	v32 = 0x18<32>
	v31 = v31 << v32
	v32 = 0x18<32>
	v31 = v31 >> v32
	v32 = 0<32>
	v34 = v31 < v32
	loc23 = v34
	v31 = loc23
	branch !v31 l0011C3C3
	// succ:  l0011C38C l0011C3C3
l0011C38C:
	v31 = arg0
	v32 = 8<32>
	v31 = v31 + v32
	loc24 = v31
	v31 = loc24
	v31 = Mem0[v31:word32]
	loc25 = v31
	v31 = loc25
	v32 = 0x7FFFFFFF<32>
	v31 = v31 & v32
	loc26 = v31
	v31 = loc26
	v32 = 0xFFFFFFFF<32>
	v31 = v31 + v32
	loc28 = v31
	v31 = arg0
	v32 = 4<32>
	v31 = v31 + v32
	loc27 = v31
	v31 = loc27
	v31 = Mem0[v31:word32]
	loc3 = v31
	v31 = loc28
	loc6 = v31
	v31 = loc3
	loc7 = v31
	goto l0011C3D3
	// succ:  l0011C3D3
l0011C3C3:
	v31 = loc22
	v32 = 0xFF<32>
	v31 = v31 & v32
	loc4 = v31
	v31 = 0xA<32>
	loc6 = v31
	v31 = loc4
	loc7 = v31
	// succ:  l0011C3D3
l0011C3D3:
	v31 = loc6
	v32 = loc7
	v31 = v31 - v32
	loc5 = v31
	v31 = loc5
	v32 = arg2
	v34 = v31 <u v32
	loc8 = v34
	v31 = loc8
	branch !v31 l0011C408
	// succ:  l0011C3E6 l0011C408
l0011C3E6:
	v31 = arg2
	v32 = loc6
	v31 = v31 - v32
	loc19 = v31
	v31 = loc19
	v32 = loc7
	v31 = v31 + v32
	loc20 = v31
	v31 = arg0
	v32 = loc6
	v35 = loc20
	v36 = loc7
	v37 = loc7
	v38 = 0<32>
	v39 = arg2
	v40 = arg1
	fn0011BC43(v31, v32, v35, v36, v37, v38, v39, v40)
	goto l0011C487
	// succ:  l0011C487
l0011C408:
	v31 = arg2
	v32 = 0<32>
	v34 = v31 == v32
	loc9 = v34
	v31 = loc9
	v34 = v31 == 0<32>
	branch !v34 l0011C487
	// succ:  l0011C414 l0011C487
l0011C414:
	v31 = loc23
	branch !v31 l0011C424
	// succ:  l0011C418 l0011C424
l0011C418:
	v31 = arg0
	v31 = Mem0[v31:word32]
	loc10 = v31
	v31 = loc10
	loc12 = v31
	goto l0011C428
	// succ:  l0011C428
l0011C424:
	v31 = arg0
	loc12 = v31
	// succ:  l0011C428
l0011C428:
	v31 = loc12
	v32 = loc7
	v31 = v31 + v32
	loc11 = v31
	v31 = loc11
	v32 = arg1
	v35 = arg2
	v31 = _memcpy(v31, v32, v35)
	v31 = loc7
	v32 = arg2
	v31 = v31 + v32
	loc13 = v31
	v31 = loc21
	v41 = Mem0[v31:int8]
	v31 = CONVERT(v41, int8, word32)
	loc14 = v31
	v31 = loc14
	v32 = 0x18<32>
	v31 = v31 << v32
	v32 = 0x18<32>
	v31 = v31 >> v32
	v32 = 0<32>
	v34 = v31 < v32
	loc15 = v34
	v31 = loc15
	branch !v31 l0011C468
	// succ:  l0011C459 l0011C468
l0011C459:
	v31 = arg0
	v32 = 4<32>
	v31 = v31 + v32
	loc16 = v31
	v31 = loc16
	v32 = loc13
	Mem0[v31:word32] = v32
	goto l0011C477
	// succ:  l0011C477
l0011C468:
	v31 = loc13
	v32 = 0xFF<32>
	v31 = v31 & v32
	loc17 = v31
	v31 = loc21
	v32 = loc17
	v42 = SLICE(v32, byte, 0)
	Mem0[v31:byte] = v42
	// succ:  l0011C477
l0011C477:
	v31 = loc12
	v32 = loc13
	v31 = v31 + v32
	loc18 = v31
	v31 = loc18
	v32 = 0<32>
	v43 = SLICE(v32, byte, 0)
	Mem0[v31:byte] = v43
	// succ:  l0011C487
l0011C487:
	// succ:  l0011C487
l0011C487:
	v31 = arg0
	return v31
	// succ:  fn0011C367_exit
l0011C48B:
	return v31
	// succ:  fn0011C367_exit
fn0011C367_exit:


// fn0011C48D
// Return size: 0
word32 fn0011C48D(word32 arg0, word32 arg1)
fn0011C48D_entry:
	// succ:  l0011C48D
l0011C48D:
	v7 = Mem0[0x00140030<p32>:word32]
	loc5 = v7
	v7 = arg1
	v7 = fn000DAF30(v7)
	loc2 = v7
	v7 = arg0
	v8 = arg1
	v9 = loc2
	v7 = fn0011C367(v7, v8, v9)
	loc3 = v7
	v7 = loc3
	return v7
	// succ:  fn0011C48D_exit
l0011C4A8:
	return v7
	// succ:  fn0011C48D_exit
fn0011C48D_exit:


// fn0011C4AA
// Return size: 0
void fn0011C4AA(word32 arg0, word32 arg1)
fn0011C4AA_entry:
	// succ:  l0011C4AA
l0011C4AA:
	v28 = Mem0[0x00140030<p32>:word32]
	loc26 = v28
	v28 = arg0
	v29 = 0xB<32>
	v28 = v28 + v29
	loc16 = v28
	v28 = loc16
	v30 = Mem0[v28:int8]
	v28 = CONVERT(v30, int8, word32)
	loc18 = v28
	v28 = loc18
	v29 = 0x18<32>
	v28 = v28 << v29
	v29 = 0x18<32>
	v28 = v28 >> v29
	v29 = 0<32>
	v31 = v28 < v29
	loc19 = v31
	v28 = loc19
	branch !v28 l0011C506
	// succ:  l0011C4CF l0011C506
l0011C4CF:
	v28 = arg0
	v29 = 8<32>
	v28 = v28 + v29
	loc21 = v28
	v28 = loc21
	v28 = Mem0[v28:word32]
	loc22 = v28
	v28 = loc22
	v29 = 0x7FFFFFFF<32>
	v28 = v28 & v29
	loc23 = v28
	v28 = loc23
	v29 = 0xFFFFFFFF<32>
	v28 = v28 + v29
	loc24 = v28
	v28 = arg0
	v29 = 4<32>
	v28 = v28 + v29
	loc6 = v28
	v28 = loc6
	v28 = Mem0[v28:word32]
	loc7 = v28
	v28 = loc7
	loc3 = v28
	v28 = loc24
	loc4 = v28
	goto l0011C516
	// succ:  l0011C516
l0011C506:
	v28 = loc18
	v29 = 0xFF<32>
	v28 = v28 & v29
	loc20 = v28
	v28 = loc20
	loc3 = v28
	v28 = 0xA<32>
	loc4 = v28
	// succ:  l0011C516
l0011C516:
	v28 = loc3
	v29 = loc4
	v31 = v28 == v29
	loc8 = v31
	v28 = loc8
	branch !v28 l0011C556
	// succ:  l0011C522 l0011C556
l0011C522:
	v28 = arg0
	v29 = loc4
	v32 = 1<32>
	v33 = loc4
	v34 = loc4
	v35 = 0<32>
	v36 = 0<32>
	fn0011C22A(v28, v29, v32, v33, v34, v35, v36)
	v28 = loc16
	v37 = Mem0[v28:int8]
	v28 = CONVERT(v37, int8, word32)
	loc9 = v28
	v28 = loc9
	v29 = 0x18<32>
	v28 = v28 << v29
	v29 = 0x18<32>
	v28 = v28 >> v29
	v29 = 0xFFFFFFFF<32>
	v31 = v28 > v29
	loc10 = v31
	v28 = loc10
	branch !v28 l0011C550
	// succ:  l0011C54B l0011C550
l0011C54B:
	v28 = 7<32>
	loc25 = v28
	goto l0011C554
	// succ:  l0011C554
l0011C550:
	v28 = 8<32>
	loc25 = v28
	// succ:  l0011C554
l0011C554:
	goto l0011C564
	// succ:  l0011C564
l0011C556:
	v28 = loc19
	branch !v28 l0011C55F
	// succ:  l0011C55A l0011C55F
l0011C55A:
	v28 = 8<32>
	loc25 = v28
	goto l0011C563
	// succ:  l0011C563
l0011C55F:
	v28 = 7<32>
	loc25 = v28
	// succ:  l0011C563
l0011C563:
	// succ:  l0011C564
l0011C564:
	v28 = loc25
	v29 = 7<32>
	v31 = v28 == v29
	branch !v31 l0011C587
	// succ:  l0011C56C l0011C587
l0011C56C:
	v28 = loc3
	v29 = 1<32>
	v28 = v28 + v29
	loc11 = v28
	v28 = loc11
	v29 = 0xFF<32>
	v28 = v28 & v29
	loc12 = v28
	v28 = loc16
	v29 = loc12
	v38 = SLICE(v29, byte, 0)
	Mem0[v28:byte] = v38
	v28 = arg0
	loc5 = v28
	goto l0011C5AF
	// succ:  l0011C5AF
l0011C587:
	v28 = loc25
	v29 = 8<32>
	v31 = v28 == v29
	branch !v31 l0011C5AF
	// succ:  l0011C58E l0011C5AF
l0011C58E:
	v28 = arg0
	v28 = Mem0[v28:word32]
	loc13 = v28
	v28 = loc3
	v29 = 1<32>
	v28 = v28 + v29
	loc14 = v28
	v28 = arg0
	v29 = 4<32>
	v28 = v28 + v29
	loc15 = v28
	v28 = loc15
	v29 = loc14
	Mem0[v28:word32] = v29
	v28 = loc13
	loc5 = v28
	// succ:  l0011C5AF
l0011C5AF:
	// succ:  l0011C5AF
l0011C5AF:
	v28 = loc5
	v29 = loc3
	v28 = v28 + v29
	loc2 = v28
	v28 = loc2
	v29 = arg1
	v39 = SLICE(v29, byte, 0)
	Mem0[v28:byte] = v39
	v28 = loc2
	v29 = 1<32>
	v28 = v28 + v29
	loc17 = v28
	v28 = loc17
	v29 = 0<32>
	v40 = SLICE(v29, byte, 0)
	Mem0[v28:byte] = v40
	return
	// succ:  fn0011C4AA_exit
l0011C5CD:
	return
	// succ:  fn0011C4AA_exit
fn0011C4AA_exit:


// fn0011C5CF
// Return size: 0
void fn0011C5CF(word32 arg0, word32 arg1, word32 arg2)
fn0011C5CF_entry:
	// succ:  l0011C5CF
l0011C5CF:
	v21 = Mem0[0x00140030<p32>:word32]
	loc20 = v21
	v21 = arg2
	v22 = 0x3FFFFFEF<32>
	v23 = v21 >u v22
	loc12 = v23
	v21 = loc12
	branch !v21 l0011C5EA
	// succ:  l0011C5E4 l0011C5EA
l0011C5E4:
	v21 = arg0
	fn0011B8A5(v21)
	// succ:  l0011C5EA
l0011C5EA:
	v21 = arg2
	v22 = 2<32>
	v23 = v21 <u v22
	loc13 = v23
	// succ:  l0011C5F1
l0011C5F1:
	v21 = loc13
	branch !v21 l0011C619
	// succ:  l0011C5F7 l0011C619
l0011C5F7:
	v21 = arg2
	v22 = 0xFF<32>
	v21 = v21 & v22
	loc14 = v21
	v21 = arg0
	v22 = 8<32>
	v21 = v21 + v22
	loc15 = v21
	v21 = loc15
	v22 = 3<32>
	v21 = v21 + v22
	loc16 = v21
	v21 = loc16
	v22 = loc14
	v24 = SLICE(v22, byte, 0)
	Mem0[v21:byte] = v24
	v21 = arg0
	loc3 = v21
	goto l0011C68F
	// succ:  l0011C68F
l0011C619:
	v21 = arg2
	v22 = 4<32>
	v21 = v21 + v22
	loc17 = v21
	v21 = loc17
	v22 = 0xFFFFFFFC<32>
	v21 = v21 & v22
	loc18 = v21
	v21 = loc18
	v22 = 0x3FFFFFFF<32>
	v23 = v21 >u v22
	loc4 = v23
	v21 = loc4
	branch !v21 l0011C64C
	// succ:  l0011C636 l0011C64C
l0011C636:
	v21 = 4<32>
	v21 = ___cxa_allocate_exception(v21)
	loc5 = v21
	v21 = loc5
	fn0011EE8C(v21)
	v21 = loc5
	v22 = 0x9C8<32>
	v25 = 0x153<32>
	___cxa_throw(v21, v22, v25)
	goto l0011C68E
	// succ:  l0011C68E
l0011C64C:
	v21 = loc18
	v22 = 2<32>
	v21 = v21 << v22
	loc6 = v21
	v21 = loc6
	v21 = fn0011B67B(v21)
	loc7 = v21
	v21 = arg0
	v22 = loc7
	Mem0[v21:word32] = v22
	v21 = loc18
	v22 = 0x80000000<32>
	v21 = v21 | v22
	loc8 = v21
	v21 = arg0
	v22 = 8<32>
	v21 = v21 + v22
	loc9 = v21
	v21 = loc9
	v22 = loc8
	Mem0[v21:word32] = v22
	v21 = arg0
	v22 = 4<32>
	v21 = v21 + v22
	loc10 = v21
	v21 = loc10
	v22 = arg2
	Mem0[v21:word32] = v22
	v21 = loc7
	loc3 = v21
	goto l0011C690
	// succ:  l0011C690
l0011C68E:
	// succ:  l0011C68F
l0011C68F:
	// succ:  l0011C690
l0011C690:
	v21 = loc3
	v22 = arg1
	v25 = arg2
	v21 = fn000E5F91(v21, v22, v25)
	v21 = loc3
	v22 = arg2
	v25 = 2<32>
	v22 = v22 << v25
	v21 = v21 + v22
	loc11 = v21
	v21 = loc11
	v22 = 0<32>
	Mem0[v21:word32] = v22
	return
	// succ:  fn0011C5CF_exit
l0011C6AD:
	return
	// succ:  fn0011C5CF_exit
fn0011C5CF_exit:


// fn0011C6AF
// Return size: 0
void fn0011C6AF(word32 arg0, word32 arg1, word32 arg2)
fn0011C6AF_entry:
	// succ:  l0011C6AF
l0011C6AF:
	v21 = Mem0[0x00140030<p32>:word32]
	loc20 = v21
	v21 = arg1
	v22 = 0x3FFFFFEF<32>
	v23 = v21 >u v22
	loc12 = v23
	v21 = loc12
	branch !v21 l0011C6CA
	// succ:  l0011C6C4 l0011C6CA
l0011C6C4:
	v21 = arg0
	fn0011B8A5(v21)
	// succ:  l0011C6CA
l0011C6CA:
	v21 = arg1
	v22 = 2<32>
	v23 = v21 <u v22
	loc13 = v23
	// succ:  l0011C6D1
l0011C6D1:
	v21 = loc13
	branch !v21 l0011C6F9
	// succ:  l0011C6D7 l0011C6F9
l0011C6D7:
	v21 = arg1
	v22 = 0xFF<32>
	v21 = v21 & v22
	loc14 = v21
	v21 = arg0
	v22 = 8<32>
	v21 = v21 + v22
	loc15 = v21
	v21 = loc15
	v22 = 3<32>
	v21 = v21 + v22
	loc16 = v21
	v21 = loc16
	v22 = loc14
	v24 = SLICE(v22, byte, 0)
	Mem0[v21:byte] = v24
	v21 = arg0
	loc3 = v21
	goto l0011C76F
	// succ:  l0011C76F
l0011C6F9:
	v21 = arg1
	v22 = 4<32>
	v21 = v21 + v22
	loc17 = v21
	v21 = loc17
	v22 = 0xFFFFFFFC<32>
	v21 = v21 & v22
	loc18 = v21
	v21 = loc18
	v22 = 0x3FFFFFFF<32>
	v23 = v21 >u v22
	loc4 = v23
	v21 = loc4
	branch !v21 l0011C72C
	// succ:  l0011C716 l0011C72C
l0011C716:
	v21 = 4<32>
	v21 = ___cxa_allocate_exception(v21)
	loc5 = v21
	v21 = loc5
	fn0011EE8C(v21)
	v21 = loc5
	v22 = 0x9C8<32>
	v25 = 0x153<32>
	___cxa_throw(v21, v22, v25)
	goto l0011C76E
	// succ:  l0011C76E
l0011C72C:
	v21 = loc18
	v22 = 2<32>
	v21 = v21 << v22
	loc6 = v21
	v21 = loc6
	v21 = fn0011B67B(v21)
	loc7 = v21
	v21 = arg0
	v22 = loc7
	Mem0[v21:word32] = v22
	v21 = loc18
	v22 = 0x80000000<32>
	v21 = v21 | v22
	loc8 = v21
	v21 = arg0
	v22 = 8<32>
	v21 = v21 + v22
	loc9 = v21
	v21 = loc9
	v22 = loc8
	Mem0[v21:word32] = v22
	v21 = arg0
	v22 = 4<32>
	v21 = v21 + v22
	loc10 = v21
	v21 = loc10
	v22 = arg1
	Mem0[v21:word32] = v22
	v21 = loc7
	loc3 = v21
	goto l0011C770
	// succ:  l0011C770
l0011C76E:
	// succ:  l0011C76F
l0011C76F:
	// succ:  l0011C770
l0011C770:
	v21 = loc3
	v22 = arg1
	v25 = arg2
	v21 = fn0011C78F(v21, v22, v25)
	v21 = loc3
	v22 = arg1
	v25 = 2<32>
	v22 = v22 << v25
	v21 = v21 + v22
	loc11 = v21
	v21 = loc11
	v22 = 0<32>
	Mem0[v21:word32] = v22
	return
	// succ:  fn0011C6AF_exit
l0011C78D:
	return
	// succ:  fn0011C6AF_exit
fn0011C6AF_exit:


// fn0011C78F
// Return size: 0
word32 fn0011C78F(word32 arg0, word32 arg1, word32 arg2)
fn0011C78F_entry:
	// succ:  l0011C78F
l0011C78F:
	v8 = Mem0[0x00140030<p32>:word32]
	loc7 = v8
	v8 = arg1
	v9 = 0<32>
	v10 = v8 == v9
	loc3 = v10
	v8 = loc3
	branch !v8 l0011C7A5
	// succ:  l0011C7A0 l0011C7A5
l0011C7A0:
	v8 = arg0
	loc5 = v8
	goto l0011C7B4
	// succ:  l0011C7B4
l0011C7A5:
	v8 = arg0
	v9 = arg2
	v11 = arg1
	v8 = fn000DF09C(v8, v9, v11)
	loc4 = v8
	v8 = loc4
	loc5 = v8
	// succ:  l0011C7B4
l0011C7B4:
	v8 = loc5
	return v8
	// succ:  fn0011C78F_exit
l0011C7B8:
	return v8
	// succ:  fn0011C78F_exit
fn0011C78F_exit:


// fn0011C7BA
// Return size: 0
void fn0011C7BA(word32 arg0)
fn0011C7BA_entry:
	// succ:  l0011C7BA
l0011C7BA:
	v10 = Mem0[0x00140030<p32>:word32]
	loc7 = v10
	v10 = arg0
	v11 = 8<32>
	v10 = v10 + v11
	loc1 = v10
	v10 = loc1
	v11 = 3<32>
	v10 = v10 + v11
	loc2 = v10
	v10 = loc2
	v12 = Mem0[v10:int8]
	v10 = CONVERT(v12, int8, word32)
	loc3 = v10
	v10 = loc3
	v11 = 0x18<32>
	v10 = v10 << v11
	v11 = 0x18<32>
	v10 = v10 >> v11
	v11 = 0<32>
	v13 = v10 < v11
	loc4 = v13
	v10 = loc4
	branch !v10 l0011C7F3
	// succ:  l0011C7E6 l0011C7F3
l0011C7E6:
	v10 = arg0
	v10 = Mem0[v10:word32]
	loc5 = v10
	v10 = loc5
	fn0011B709(v10)
	// succ:  l0011C7F3
l0011C7F3:
	return
	// succ:  fn0011C7BA_exit
l0011C7F4:
	return
	// succ:  fn0011C7BA_exit
fn0011C7BA_exit:


// fn0011C7F6
// Return size: 0
word32 fn0011C7F6(word32 arg0, word32 arg1, word32 arg2)
fn0011C7F6_entry:
	// succ:  l0011C7F6
l0011C7F6:
	v26 = Mem0[0x00140030<p32>:word32]
	loc25 = v26
	v26 = arg0
	v27 = 8<32>
	v26 = v26 + v27
	loc16 = v26
	v26 = loc16
	v27 = 3<32>
	v26 = v26 + v27
	loc17 = v26
	v26 = loc17
	v28 = Mem0[v26:int8]
	v26 = CONVERT(v28, int8, word32)
	loc18 = v26
	v26 = loc18
	v27 = 0x18<32>
	v26 = v26 << v27
	v27 = 0x18<32>
	v26 = v26 >> v27
	v27 = 0<32>
	v29 = v26 < v27
	loc19 = v29
	v26 = loc19
	branch !v26 l0011C840
	// succ:  l0011C822 l0011C840
l0011C822:
	v26 = loc16
	v26 = Mem0[v26:word32]
	loc20 = v26
	v26 = loc20
	v27 = 0x7FFFFFFF<32>
	v26 = v26 & v27
	loc21 = v26
	v26 = loc21
	v27 = 0xFFFFFFFF<32>
	v26 = v26 + v27
	loc23 = v26
	v26 = loc23
	loc3 = v26
	goto l0011C844
	// succ:  l0011C844
l0011C840:
	v26 = 1<32>
	loc3 = v26
	// succ:  l0011C844
l0011C844:
	v26 = loc3
	v27 = arg2
	v29 = v26 <u v27
	loc22 = v29
	// succ:  l0011C84C
l0011C84C:
	v26 = loc22
	branch !v26 l0011C891
	// succ:  l0011C852 l0011C891
l0011C852:
	v26 = loc19
	branch !v26 l0011C869
	// succ:  l0011C856 l0011C869
l0011C856:
	v26 = arg0
	v27 = 4<32>
	v26 = v26 + v27
	loc11 = v26
	v26 = loc11
	v26 = Mem0[v26:word32]
	loc12 = v26
	v26 = loc12
	loc15 = v26
	goto l0011C875
	// succ:  l0011C875
l0011C869:
	v26 = loc18
	v27 = 0xFF<32>
	v26 = v26 & v27
	loc13 = v26
	v26 = loc13
	loc15 = v26
	// succ:  l0011C875
l0011C875:
	v26 = arg2
	v27 = loc3
	v26 = v26 - v27
	loc14 = v26
	v26 = arg0
	v27 = loc3
	v30 = loc14
	v31 = loc15
	v32 = 0<32>
	v33 = loc15
	v34 = arg2
	v35 = arg1
	fn0011C92E(v26, v27, v30, v31, v32, v33, v34, v35)
	goto l0011C8FC
	// succ:  l0011C8FC
l0011C891:
	v26 = loc19
	branch !v26 l0011C8A1
	// succ:  l0011C895 l0011C8A1
l0011C895:
	v26 = arg0
	v26 = Mem0[v26:word32]
	loc4 = v26
	v26 = loc4
	loc5 = v26
	goto l0011C8A5
	// succ:  l0011C8A5
l0011C8A1:
	v26 = arg0
	loc5 = v26
	// succ:  l0011C8A5
l0011C8A5:
	v26 = loc5
	v27 = arg1
	v30 = arg2
	v26 = fn0011C903(v26, v27, v30)
	v26 = loc5
	v27 = arg2
	v30 = 2<32>
	v27 = v27 << v30
	v26 = v26 + v27
	loc6 = v26
	v26 = loc6
	v27 = 0<32>
	Mem0[v26:word32] = v27
	v26 = loc17
	v36 = Mem0[v26:int8]
	v26 = CONVERT(v36, int8, word32)
	loc7 = v26
	v26 = loc7
	v27 = 0x18<32>
	v26 = v26 << v27
	v27 = 0x18<32>
	v26 = v26 >> v27
	v27 = 0<32>
	v29 = v26 < v27
	loc8 = v29
	v26 = loc8
	branch !v26 l0011C8EA
	// succ:  l0011C8D9 l0011C8EA
l0011C8D9:
	v26 = arg0
	v27 = 4<32>
	v26 = v26 + v27
	loc9 = v26
	v26 = loc9
	v27 = arg2
	Mem0[v26:word32] = v27
	goto l0011C8FD
	// succ:  l0011C8FD
l0011C8EA:
	v26 = arg2
	v27 = 0xFF<32>
	v26 = v26 & v27
	loc10 = v26
	v26 = loc17
	v27 = loc10
	v37 = SLICE(v27, byte, 0)
	Mem0[v26:byte] = v37
	goto l0011C8FD
	// succ:  l0011C8FD
l0011C8FB:
	// succ:  l0011C8FC
l0011C8FC:
	// succ:  l0011C8FD
l0011C8FD:
	v26 = arg0
	return v26
	// succ:  fn0011C7F6_exit
l0011C901:
	return v26
	// succ:  fn0011C7F6_exit
fn0011C7F6_exit:


// fn0011C903
// Return size: 0
word32 fn0011C903(word32 arg0, word32 arg1, word32 arg2)
fn0011C903_entry:
	// succ:  l0011C903
l0011C903:
	v8 = Mem0[0x00140030<p32>:word32]
	loc7 = v8
	v8 = arg2
	v9 = 0<32>
	v10 = v8 == v9
	loc3 = v10
	v8 = loc3
	branch !v8 l0011C919
	// succ:  l0011C914 l0011C919
l0011C914:
	v8 = arg0
	loc5 = v8
	goto l0011C928
	// succ:  l0011C928
l0011C919:
	v8 = arg0
	v9 = arg1
	v11 = arg2
	v8 = fn000DF0F0(v8, v9, v11)
	loc4 = v8
	v8 = loc4
	loc5 = v8
	// succ:  l0011C928
l0011C928:
	v8 = loc5
	return v8
	// succ:  fn0011C903_exit
l0011C92C:
	return v8
	// succ:  fn0011C903_exit
fn0011C903_exit:


// fn0011C92E
// Return size: 0
void fn0011C92E(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn0011C92E_entry:
	// succ:  l0011C92E
l0011C92E:
	v42 = Mem0[0x00140030<p32>:word32]
	loc46 = v42
	v42 = 0x3FFFFFEE<32>
	v43 = arg1
	v42 = v42 - v43
	loc43 = v42
	v42 = loc43
	v43 = arg2
	v44 = v42 <u v43
	loc44 = v44
	v42 = loc44
	branch !v42 l0011C950
	// succ:  l0011C94A l0011C950
l0011C94A:
	v42 = arg0
	fn0011B8A5(v42)
	// succ:  l0011C950
l0011C950:
	v42 = arg0
	v43 = 8<32>
	v42 = v42 + v43
	loc9 = v42
	v42 = loc9
	v43 = 3<32>
	v42 = v42 + v43
	loc10 = v42
	v42 = loc10
	v45 = Mem0[v42:int8]
	v42 = CONVERT(v45, int8, word32)
	loc11 = v42
	v42 = loc11
	v43 = 0x18<32>
	v42 = v42 << v43
	v43 = 0x18<32>
	v42 = v42 >> v43
	v43 = 0<32>
	v44 = v42 < v43
	loc12 = v44
	v42 = loc12
	branch !v42 l0011C982
	// succ:  l0011C976 l0011C982
l0011C976:
	v42 = arg0
	v42 = Mem0[v42:word32]
	loc13 = v42
	v42 = loc13
	loc28 = v42
	goto l0011C986
	// succ:  l0011C986
l0011C982:
	v42 = arg0
	loc28 = v42
	// succ:  l0011C986
l0011C986:
	v42 = arg1
	v43 = 0x1FFFFFE7<32>
	v44 = v42 <u v43
	loc14 = v44
	v42 = loc14
	branch !v42 l0011CA03
	// succ:  l0011C996 l0011CA03
l0011C996:
	v42 = arg2
	v43 = arg1
	v42 = v42 + v43
	loc15 = v42
	v42 = arg1
	v43 = 1<32>
	v42 = v42 << v43
	loc16 = v42
	v42 = loc15
	v43 = loc16
	v44 = v42 <u v43
	loc17 = v44
	v42 = loc17
	branch !v42 l0011C9B2
	// succ:  l0011C9AF l0011C9B2
l0011C9AF:
	v42 = loc16
	goto l0011C9B4
	// succ:  l0011C9B4
l0011C9B2:
	v42 = loc15
	// succ:  l0011C9B4
l0011C9B4:
	loc8 = v42
	v42 = loc8
	v43 = 2<32>
	v44 = v42 <u v43
	loc18 = v44
	v42 = loc8
	v43 = 4<32>
	v42 = v42 + v43
	loc19 = v42
	v42 = loc19
	v43 = 0xFFFFFFFC<32>
	v42 = v42 & v43
	loc20 = v42
	v42 = loc18
	branch !v42 l0011C9D3
	// succ:  l0011C9D0 l0011C9D3
l0011C9D0:
	v42 = 2<32>
	goto l0011C9D5
	// succ:  l0011C9D5
l0011C9D3:
	v42 = loc20
	// succ:  l0011C9D5
l0011C9D5:
	loc21 = v42
	v42 = loc21
	v43 = 0x3FFFFFFF<32>
	v44 = v42 >u v43
	loc22 = v44
	v42 = loc22
	branch !v42 l0011C9FD
	// succ:  l0011C9E7 l0011C9FD
l0011C9E7:
	v42 = 4<32>
	v42 = ___cxa_allocate_exception(v42)
	loc23 = v42
	v42 = loc23
	fn0011EE8C(v42)
	v42 = loc23
	v43 = 0x9C8<32>
	v46 = 0x153<32>
	___cxa_throw(v42, v43, v46)
	goto l0011CA01
	// succ:  l0011CA01
l0011C9FD:
	v42 = loc21
	loc25 = v42
	// succ:  l0011CA01
l0011CA01:
	goto l0011CA0B
	// succ:  l0011CA0B
l0011CA03:
	v42 = 0x3FFFFFEF<32>
	loc25 = v42
	// succ:  l0011CA0B
l0011CA0B:
	v42 = loc25
	v43 = 2<32>
	v42 = v42 << v43
	loc24 = v42
	v42 = loc24
	v42 = fn0011B67B(v42)
	loc26 = v42
	v42 = arg4
	v43 = 0<32>
	v44 = v42 == v43
	loc27 = v44
	v42 = loc27
	v44 = v42 == 0<32>
	branch !v44 l0011CA31
	// succ:  l0011CA26 l0011CA31
l0011CA26:
	v42 = loc26
	v43 = loc28
	v46 = arg4
	v42 = fn000E5F91(v42, v43, v46)
	// succ:  l0011CA31
l0011CA31:
	v42 = arg6
	v43 = 0<32>
	v44 = v42 == v43
	loc29 = v44
	v42 = loc29
	v44 = v42 == 0<32>
	branch !v44 l0011CA52
	// succ:  l0011CA3D l0011CA52
l0011CA3D:
	v42 = loc26
	v43 = arg4
	v46 = 2<32>
	v43 = v43 << v46
	v42 = v42 + v43
	loc30 = v42
	v42 = loc30
	v43 = arg7
	v46 = arg6
	v42 = fn000E5F91(v42, v43, v46)
	// succ:  l0011CA52
l0011CA52:
	v42 = arg3
	v43 = arg5
	v42 = v42 - v43
	loc31 = v42
	v42 = loc31
	v43 = arg4
	v42 = v42 - v43
	loc32 = v42
	v42 = loc32
	v43 = 0<32>
	v44 = v42 == v43
	loc33 = v44
	v42 = loc33
	v44 = v42 == 0<32>
	branch !v44 l0011CA9F
	// succ:  l0011CA6C l0011CA9F
l0011CA6C:
	v42 = loc28
	v43 = arg4
	v46 = 2<32>
	v43 = v43 << v46
	v42 = v42 + v43
	loc34 = v42
	v42 = loc34
	v43 = arg5
	v46 = 2<32>
	v43 = v43 << v46
	v42 = v42 + v43
	loc35 = v42
	v42 = loc26
	v43 = arg4
	v46 = 2<32>
	v43 = v43 << v46
	v42 = v42 + v43
	loc36 = v42
	v42 = loc36
	v43 = arg6
	v46 = 2<32>
	v43 = v43 << v46
	v42 = v42 + v43
	loc37 = v42
	v42 = loc37
	v43 = loc35
	v46 = loc32
	v42 = fn000E5F91(v42, v43, v46)
	// succ:  l0011CA9F
l0011CA9F:
	v42 = arg1
	v43 = 1<32>
	v44 = v42 == v43
	loc38 = v44
	v42 = loc38
	v44 = v42 == 0<32>
	branch !v44 l0011CAB1
	// succ:  l0011CAAB l0011CAB1
l0011CAAB:
	v42 = loc28
	fn0011B709(v42)
	// succ:  l0011CAB1
l0011CAB1:
	v42 = arg0
	v43 = loc26
	Mem0[v42:word32] = v43
	v42 = loc25
	v43 = 0x80000000<32>
	v42 = v42 | v43
	loc39 = v42
	v42 = loc9
	v43 = loc39
	Mem0[v42:word32] = v43
	v42 = loc31
	v43 = arg6
	v42 = v42 + v43
	loc40 = v42
	v42 = arg0
	v43 = 4<32>
	v42 = v42 + v43
	loc41 = v42
	v42 = loc41
	v43 = loc40
	Mem0[v42:word32] = v43
	v42 = loc26
	v43 = loc40
	v46 = 2<32>
	v43 = v43 << v46
	v42 = v42 + v43
	loc42 = v42
	v42 = loc42
	v43 = 0<32>
	Mem0[v42:word32] = v43
	return
	// succ:  fn0011C92E_exit
l0011CAF1:
	return
	// succ:  fn0011C92E_exit
fn0011C92E_exit:


// fn0011CAF3
// Return size: 0
void fn0011CAF3(word32 arg0, word32 arg1)
fn0011CAF3_entry:
	// succ:  l0011CAF3
l0011CAF3:
	v58 = Mem0[0x00140030<p32>:word32]
	loc56 = v58
	v58 = arg1
	v59 = 0x3FFFFFEF<32>
	v60 = v58 >u v59
	loc19 = v60
	v58 = loc19
	branch !v58 l0011CB0E
	// succ:  l0011CB08 l0011CB0E
l0011CB08:
	v58 = arg0
	fn0011B8A5(v58)
	// succ:  l0011CB0E
l0011CB0E:
	v58 = arg0
	v59 = 8<32>
	v58 = v58 + v59
	loc30 = v58
	v58 = loc30
	v59 = 3<32>
	v58 = v58 + v59
	loc41 = v58
	v58 = loc41
	v61 = Mem0[v58:int8]
	v58 = CONVERT(v61, int8, word32)
	loc48 = v58
	v58 = loc48
	v59 = 0x18<32>
	v58 = v58 << v59
	v59 = 0x18<32>
	v58 = v58 >> v59
	v59 = 0<32>
	v60 = v58 < v59
	loc49 = v60
	v58 = loc49
	branch !v58 l0011CB64
	// succ:  l0011CB34 l0011CB64
l0011CB34:
	v58 = loc30
	v58 = Mem0[v58:word32]
	loc50 = v58
	v58 = loc50
	v59 = 0x7FFFFFFF<32>
	v58 = v58 & v59
	loc51 = v58
	v58 = loc51
	v59 = 0xFFFFFFFF<32>
	v58 = v58 + v59
	loc53 = v58
	v58 = arg0
	v59 = 4<32>
	v58 = v58 + v59
	loc52 = v58
	v58 = loc52
	v58 = Mem0[v58:word32]
	loc9 = v58
	v58 = loc9
	loc12 = v58
	v58 = loc53
	loc17 = v58
	goto l0011CB74
	// succ:  l0011CB74
l0011CB64:
	v58 = loc48
	v59 = 0xFF<32>
	v58 = v58 & v59
	loc10 = v58
	v58 = loc10
	loc12 = v58
	v58 = 1<32>
	loc17 = v58
	// succ:  l0011CB74
l0011CB74:
	v58 = loc12
	v59 = arg1
	v60 = v58 >u v59
	loc11 = v60
	v58 = loc11
	branch !v58 l0011CB83
	// succ:  l0011CB80 l0011CB83
l0011CB80:
	v58 = loc12
	goto l0011CB85
	// succ:  l0011CB85
l0011CB83:
	v58 = arg1
	// succ:  l0011CB85
l0011CB85:
	loc8 = v58
	v58 = loc8
	v59 = 2<32>
	v60 = v58 <u v59
	loc13 = v60
	v58 = loc8
	v59 = 4<32>
	v58 = v58 + v59
	loc14 = v58
	v58 = loc14
	v59 = 0xFFFFFFFC<32>
	v58 = v58 & v59
	loc15 = v58
	v58 = loc15
	v59 = 0xFFFFFFFF<32>
	v58 = v58 + v59
	loc54 = v58
	v58 = loc13
	branch !v58 l0011CBAB
	// succ:  l0011CBA8 l0011CBAB
l0011CBA8:
	v58 = 1<32>
	goto l0011CBAD
	// succ:  l0011CBAD
l0011CBAB:
	v58 = loc54
	// succ:  l0011CBAD
l0011CBAD:
	loc6 = v58
	v58 = loc6
	v59 = loc17
	v60 = v58 == v59
	loc16 = v60
	// succ:  l0011CBB7
l0011CBB7:
	v58 = loc16
	v60 = v58 == 0<32>
	branch !v60 l0011CD96
	// succ:  l0011CBBE l0011CD96
l0011CBBE:
	v58 = loc13
	branch !v58 l0011CC04
	// succ:  l0011CBC4 l0011CC04
l0011CBC4:
	v58 = arg0
	v58 = Mem0[v58:word32]
	loc35 = v58
	v58 = loc49
	branch !v58 l0011CBE0
	// succ:  l0011CBCF l0011CBE0
l0011CBCF:
	v58 = loc35
	loc2 = v58
	v58 = 0<32>
	loc3 = v58
	v58 = arg0
	loc5 = v58
	v58 = 0x15<32>
	loc55 = v58
	goto l0011CC02
	// succ:  l0011CC02
l0011CBE0:
	v58 = loc48
	v59 = 0xFF<32>
	v58 = v58 & v59
	loc36 = v58
	v58 = loc36
	v59 = 1<32>
	v58 = v58 + v59
	loc37 = v58
	v58 = arg0
	v59 = loc35
	v62 = loc37
	v58 = fn000E5F91(v58, v59, v62)
	v58 = loc35
	fn0011B709(v58)
	v58 = 0x17<32>
	loc55 = v58
	// succ:  l0011CC02
l0011CC02:
	goto l0011CD03
	// succ:  l0011CD03
l0011CC04:
	v58 = loc6
	v59 = loc17
	v60 = v58 >u v59
	loc18 = v60
	v58 = loc6
	v59 = 1<32>
	v58 = v58 + v59
	loc20 = v58
	v58 = loc20
	v59 = 0x3FFFFFFF<32>
	v60 = v58 >u v59
	loc21 = v60
	// succ:  l0011CC1D
l0011CC1D:
	v58 = loc18
	branch !v58 l0011CC53
	// succ:  l0011CC23 l0011CC53
l0011CC23:
	v58 = loc21
	branch !v58 l0011CC3D
	// succ:  l0011CC27 l0011CC3D
l0011CC27:
	v58 = 4<32>
	v58 = ___cxa_allocate_exception(v58)
	loc22 = v58
	v58 = loc22
	fn0011EE8C(v58)
	v58 = loc22
	v59 = 0x9C8<32>
	v62 = 0x153<32>
	___cxa_throw(v58, v59, v62)
	goto l0011CC51
	// succ:  l0011CC51
l0011CC3D:
	v58 = loc20
	v59 = 2<32>
	v58 = v58 << v59
	loc23 = v58
	v58 = loc23
	v58 = fn0011B67B(v58)
	loc24 = v58
	v58 = loc24
	loc7 = v58
	goto l0011CCC0
	// succ:  l0011CCC0
l0011CC51:
	goto l0011CCBF
	// succ:  l0011CCBF
l0011CC53:
	v58 = loc21
	branch !v58 l0011CC7C
	// succ:  l0011CC57 l0011CC7C
l0011CC57:
	v58 = 4<32>
	v58 = ___cxa_allocate_exception(v58)
	loc25 = v58
	v58 = loc25
	fn0011EE8C(v58)
	v58 = 0<32>
	Mem0[0x00140048<p32>:word32] = v58
	v58 = 0x173<32>
	v59 = loc25
	v62 = 0x9C8<32>
	v63 = 0x153<32>
	invoke_viii(v58, v59, v62, v63)
	v58 = Mem0[0x00140048<p32>:word32]
	loc26 = v58
	v58 = 0<32>
	Mem0[0x00140048<p32>:word32] = v58
	goto l0011CCAB
	// succ:  l0011CCAB
l0011CC7C:
	v58 = loc20
	v59 = 2<32>
	v58 = v58 << v59
	loc27 = v58
	v58 = 0<32>
	Mem0[0x00140048<p32>:word32] = v58
	v58 = 0x1EB<32>
	v59 = loc27
	v58 = invoke_ii(v58, v59)
	loc28 = v58
	v58 = Mem0[0x00140048<p32>:word32]
	loc29 = v58
	v58 = 0<32>
	Mem0[0x00140048<p32>:word32] = v58
	v58 = loc29
	v59 = 1<32>
	v58 = v58 & v59
	loc31 = v58
	v58 = loc31
	v60 = v58 == 0<32>
	branch !v60 l0011CCAB
	// succ:  l0011CCA4 l0011CCAB
l0011CCA4:
	v58 = loc28
	loc7 = v58
	goto l0011CCC0
	// succ:  l0011CCC0
l0011CCAB:
	// succ:  l0011CCAB
l0011CCAB:
	v58 = 0<32>
	v58 = ___cxa_find_matching_catch_3(v58)
	loc32 = v58
	v58 = Mem0[0x00140094<p32>:word32]
	loc33 = v58
	v58 = loc32
	v58 = ___cxa_begin_catch(v58)
	___cxa_end_catch()
	goto l0011CD96
	// succ:  l0011CD96
l0011CCBF:
	// succ:  l0011CCC0
l0011CCC0:
	v58 = loc49
	branch !v58 l0011CCDF
	// succ:  l0011CCC5 l0011CCDF
l0011CCC5:
	v58 = arg0
	v58 = Mem0[v58:word32]
	loc34 = v58
	v58 = loc34
	loc2 = v58
	v58 = 1<32>
	loc3 = v58
	v58 = loc7
	loc5 = v58
	v58 = 0x15<32>
	loc55 = v58
	goto l0011CD04
	// succ:  l0011CD04
l0011CCDF:
	v58 = loc48
	v59 = 0xFF<32>
	v58 = v58 & v59
	loc38 = v58
	v58 = loc38
	v59 = 1<32>
	v58 = v58 + v59
	loc39 = v58
	v58 = loc7
	v59 = arg0
	v62 = loc39
	v58 = fn000E5F91(v58, v59, v62)
	v58 = loc7
	loc4 = v58
	v58 = 0x16<32>
	loc55 = v58
	goto l0011CD04
	// succ:  l0011CD04
l0011CD02:
	// succ:  l0011CD03
l0011CD03:
	// succ:  l0011CD04
l0011CD04:
	v58 = loc55
	v59 = 0x15<32>
	v60 = v58 == v59
	branch !v60 l0011CD43
	// succ:  l0011CD0C l0011CD43
l0011CD0C:
	v58 = arg0
	v59 = 4<32>
	v58 = v58 + v59
	loc40 = v58
	v58 = loc40
	v58 = Mem0[v58:word32]
	loc42 = v58
	v58 = loc42
	v59 = 1<32>
	v58 = v58 + v59
	loc43 = v58
	v58 = loc5
	v59 = loc2
	v62 = loc43
	v58 = fn000E5F91(v58, v59, v62)
	v58 = loc2
	fn0011B709(v58)
	v58 = loc3
	branch !v58 l0011CD3D
	// succ:  l0011CD34 l0011CD3D
l0011CD34:
	v58 = loc5
	loc4 = v58
	v58 = 0x16<32>
	loc55 = v58
	goto l0011CD41
	// succ:  l0011CD41
l0011CD3D:
	v58 = 0x17<32>
	loc55 = v58
	// succ:  l0011CD41
l0011CD41:
	// succ:  l0011CD43
l0011CD43:
	v58 = loc55
	v59 = 0x16<32>
	v60 = v58 == v59
	branch !v60 l0011CD7B
	// succ:  l0011CD4A l0011CD7B
l0011CD4A:
	v58 = loc6
	v59 = 1<32>
	v58 = v58 + v59
	loc44 = v58
	v58 = loc44
	v59 = 0x80000000<32>
	v58 = v58 | v59
	loc45 = v58
	v58 = loc30
	v59 = loc45
	Mem0[v58:word32] = v59
	v58 = arg0
	v59 = 4<32>
	v58 = v58 + v59
	loc46 = v58
	v58 = loc46
	v59 = loc12
	Mem0[v58:word32] = v59
	v58 = arg0
	v59 = loc4
	Mem0[v58:word32] = v59
	goto l0011CD96
	// succ:  l0011CD96
l0011CD7B:
	v58 = loc55
	v59 = 0x17<32>
	v60 = v58 == v59
	branch !v60 l0011CD94
	// succ:  l0011CD82 l0011CD94
l0011CD82:
	v58 = loc12
	v59 = 0xFF<32>
	v58 = v58 & v59
	loc47 = v58
	v58 = loc41
	v59 = loc47
	v64 = SLICE(v59, byte, 0)
	Mem0[v58:byte] = v64
	goto l0011CD96
	// succ:  l0011CD96
l0011CD94:
	// succ:  l0011CD94
l0011CD94:
	// succ:  l0011CD96
l0011CD96:
	// succ:  l0011CD96
l0011CD96:
	return
	// succ:  fn0011CAF3_exit
l0011CD98:
	return
	// succ:  fn0011CAF3_exit
fn0011CAF3_exit:


// fn0011CD9A
// Return size: 0
word32 fn0011CD9A(word32 arg0, word32 arg1)
fn0011CD9A_entry:
	// succ:  l0011CD9A
l0011CD9A:
	v7 = Mem0[0x00140030<p32>:word32]
	loc5 = v7
	v7 = arg1
	v7 = fn000D7B05(v7)
	loc2 = v7
	v7 = arg0
	v8 = arg1
	v9 = loc2
	v7 = fn0011C7F6(v7, v8, v9)
	loc3 = v7
	v7 = loc3
	return v7
	// succ:  fn0011CD9A_exit
l0011CDB5:
	return v7
	// succ:  fn0011CD9A_exit
fn0011CD9A_exit:


// fn0011CDB7
// Return size: 0
void fn0011CDB7(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6)
fn0011CDB7_entry:
	// succ:  l0011CDB7
l0011CDB7:
	v37 = Mem0[0x00140030<p32>:word32]
	loc40 = v37
	v37 = 0x3FFFFFEF<32>
	v38 = arg1
	v37 = v37 - v38
	loc36 = v37
	v37 = loc36
	v38 = arg2
	v39 = v37 <u v38
	loc37 = v39
	v37 = loc37
	branch !v37 l0011CDD9
	// succ:  l0011CDD3 l0011CDD9
l0011CDD3:
	v37 = arg0
	fn0011B8A5(v37)
	// succ:  l0011CDD9
l0011CDD9:
	v37 = arg0
	v38 = 8<32>
	v37 = v37 + v38
	loc38 = v37
	v37 = loc38
	v38 = 3<32>
	v37 = v37 + v38
	loc8 = v37
	v37 = loc8
	v40 = Mem0[v37:int8]
	v37 = CONVERT(v40, int8, word32)
	loc9 = v37
	v37 = loc9
	v38 = 0x18<32>
	v37 = v37 << v38
	v38 = 0x18<32>
	v37 = v37 >> v38
	v38 = 0<32>
	v39 = v37 < v38
	loc10 = v39
	v37 = loc10
	branch !v37 l0011CE0B
	// succ:  l0011CDFF l0011CE0B
l0011CDFF:
	v37 = arg0
	v37 = Mem0[v37:word32]
	loc11 = v37
	v37 = loc11
	loc26 = v37
	goto l0011CE0F
	// succ:  l0011CE0F
l0011CE0B:
	v37 = arg0
	loc26 = v37
	// succ:  l0011CE0F
l0011CE0F:
	v37 = arg1
	v38 = 0x1FFFFFE7<32>
	v39 = v37 <u v38
	loc12 = v39
	v37 = loc12
	branch !v37 l0011CE8C
	// succ:  l0011CE1F l0011CE8C
l0011CE1F:
	v37 = arg2
	v38 = arg1
	v37 = v37 + v38
	loc13 = v37
	v37 = arg1
	v38 = 1<32>
	v37 = v37 << v38
	loc14 = v37
	v37 = loc13
	v38 = loc14
	v39 = v37 <u v38
	loc15 = v39
	v37 = loc15
	branch !v37 l0011CE3B
	// succ:  l0011CE38 l0011CE3B
l0011CE38:
	v37 = loc14
	goto l0011CE3D
	// succ:  l0011CE3D
l0011CE3B:
	v37 = loc13
	// succ:  l0011CE3D
l0011CE3D:
	loc7 = v37
	v37 = loc7
	v38 = 2<32>
	v39 = v37 <u v38
	loc16 = v39
	v37 = loc7
	v38 = 4<32>
	v37 = v37 + v38
	loc17 = v37
	v37 = loc17
	v38 = 0xFFFFFFFC<32>
	v37 = v37 & v38
	loc18 = v37
	v37 = loc16
	branch !v37 l0011CE5C
	// succ:  l0011CE59 l0011CE5C
l0011CE59:
	v37 = 2<32>
	goto l0011CE5E
	// succ:  l0011CE5E
l0011CE5C:
	v37 = loc18
	// succ:  l0011CE5E
l0011CE5E:
	loc19 = v37
	v37 = loc19
	v38 = 0x3FFFFFFF<32>
	v39 = v37 >u v38
	loc20 = v39
	v37 = loc20
	branch !v37 l0011CE86
	// succ:  l0011CE70 l0011CE86
l0011CE70:
	v37 = 4<32>
	v37 = ___cxa_allocate_exception(v37)
	loc21 = v37
	v37 = loc21
	fn0011EE8C(v37)
	v37 = loc21
	v38 = 0x9C8<32>
	v41 = 0x153<32>
	___cxa_throw(v37, v38, v41)
	goto l0011CE8A
	// succ:  l0011CE8A
l0011CE86:
	v37 = loc19
	loc23 = v37
	// succ:  l0011CE8A
l0011CE8A:
	goto l0011CE94
	// succ:  l0011CE94
l0011CE8C:
	v37 = 0x3FFFFFEF<32>
	loc23 = v37
	// succ:  l0011CE94
l0011CE94:
	v37 = loc23
	v38 = 2<32>
	v37 = v37 << v38
	loc22 = v37
	v37 = loc22
	v37 = fn0011B67B(v37)
	loc24 = v37
	v37 = arg4
	v38 = 0<32>
	v39 = v37 == v38
	loc25 = v39
	v37 = loc25
	v39 = v37 == 0<32>
	branch !v39 l0011CEBA
	// succ:  l0011CEAF l0011CEBA
l0011CEAF:
	v37 = loc24
	v38 = loc26
	v41 = arg4
	v37 = fn000E5F91(v37, v38, v41)
	// succ:  l0011CEBA
l0011CEBA:
	v37 = arg3
	v38 = arg5
	v37 = v37 - v38
	loc27 = v37
	v37 = loc27
	v38 = arg4
	v37 = v37 - v38
	loc28 = v37
	v37 = loc28
	v38 = 0<32>
	v39 = v37 == v38
	loc29 = v39
	v37 = loc29
	v39 = v37 == 0<32>
	branch !v39 l0011CF07
	// succ:  l0011CED4 l0011CF07
l0011CED4:
	v37 = loc26
	v38 = arg4
	v41 = 2<32>
	v38 = v38 << v41
	v37 = v37 + v38
	loc30 = v37
	v37 = loc30
	v38 = arg5
	v41 = 2<32>
	v38 = v38 << v41
	v37 = v37 + v38
	loc31 = v37
	v37 = loc24
	v38 = arg4
	v41 = 2<32>
	v38 = v38 << v41
	v37 = v37 + v38
	loc32 = v37
	v37 = loc32
	v38 = arg6
	v41 = 2<32>
	v38 = v38 << v41
	v37 = v37 + v38
	loc33 = v37
	v37 = loc33
	v38 = loc31
	v41 = loc28
	v37 = fn000E5F91(v37, v38, v41)
	// succ:  l0011CF07
l0011CF07:
	v37 = arg1
	v38 = 1<32>
	v39 = v37 == v38
	loc34 = v39
	v37 = loc34
	v39 = v37 == 0<32>
	branch !v39 l0011CF19
	// succ:  l0011CF13 l0011CF19
l0011CF13:
	v37 = loc26
	fn0011B709(v37)
	// succ:  l0011CF19
l0011CF19:
	v37 = arg0
	v38 = loc24
	Mem0[v37:word32] = v38
	v37 = loc23
	v38 = 0x80000000<32>
	v37 = v37 | v38
	loc35 = v37
	v37 = loc38
	v38 = loc35
	Mem0[v37:word32] = v38
	return
	// succ:  fn0011CDB7_exit
l0011CF33:
	return
	// succ:  fn0011CDB7_exit
fn0011CDB7_exit:


// fn0011CF35
// Return size: 0
void fn0011CF35(word32 arg0, word32 arg1)
fn0011CF35_entry:
	// succ:  l0011CF35
l0011CF35:
	v28 = Mem0[0x00140030<p32>:word32]
	loc26 = v28
	v28 = arg0
	v29 = 8<32>
	v28 = v28 + v29
	loc16 = v28
	v28 = loc16
	v29 = 3<32>
	v28 = v28 + v29
	loc18 = v28
	v28 = loc18
	v30 = Mem0[v28:int8]
	v28 = CONVERT(v30, int8, word32)
	loc19 = v28
	v28 = loc19
	v29 = 0x18<32>
	v28 = v28 << v29
	v29 = 0x18<32>
	v28 = v28 >> v29
	v29 = 0<32>
	v31 = v28 < v29
	loc20 = v31
	v28 = loc20
	branch !v28 l0011CF91
	// succ:  l0011CF61 l0011CF91
l0011CF61:
	v28 = loc16
	v28 = Mem0[v28:word32]
	loc22 = v28
	v28 = loc22
	v29 = 0x7FFFFFFF<32>
	v28 = v28 & v29
	loc23 = v28
	v28 = loc23
	v29 = 0xFFFFFFFF<32>
	v28 = v28 + v29
	loc24 = v28
	v28 = arg0
	v29 = 4<32>
	v28 = v28 + v29
	loc6 = v28
	v28 = loc6
	v28 = Mem0[v28:word32]
	loc7 = v28
	v28 = loc7
	loc3 = v28
	v28 = loc24
	loc4 = v28
	goto l0011CFA1
	// succ:  l0011CFA1
l0011CF91:
	v28 = loc19
	v29 = 0xFF<32>
	v28 = v28 & v29
	loc21 = v28
	v28 = loc21
	loc3 = v28
	v28 = 1<32>
	loc4 = v28
	// succ:  l0011CFA1
l0011CFA1:
	v28 = loc3
	v29 = loc4
	v31 = v28 == v29
	loc8 = v31
	v28 = loc8
	branch !v28 l0011CFE1
	// succ:  l0011CFAD l0011CFE1
l0011CFAD:
	v28 = arg0
	v29 = loc4
	v32 = 1<32>
	v33 = loc4
	v34 = loc4
	v35 = 0<32>
	v36 = 0<32>
	fn0011CDB7(v28, v29, v32, v33, v34, v35, v36)
	v28 = loc18
	v37 = Mem0[v28:int8]
	v28 = CONVERT(v37, int8, word32)
	loc9 = v28
	v28 = loc9
	v29 = 0x18<32>
	v28 = v28 << v29
	v29 = 0x18<32>
	v28 = v28 >> v29
	v29 = 0xFFFFFFFF<32>
	v31 = v28 > v29
	loc10 = v31
	v28 = loc10
	branch !v28 l0011CFDB
	// succ:  l0011CFD6 l0011CFDB
l0011CFD6:
	v28 = 7<32>
	loc25 = v28
	goto l0011CFDF
	// succ:  l0011CFDF
l0011CFDB:
	v28 = 8<32>
	loc25 = v28
	// succ:  l0011CFDF
l0011CFDF:
	goto l0011CFEF
	// succ:  l0011CFEF
l0011CFE1:
	v28 = loc20
	branch !v28 l0011CFEA
	// succ:  l0011CFE5 l0011CFEA
l0011CFE5:
	v28 = 8<32>
	loc25 = v28
	goto l0011CFEE
	// succ:  l0011CFEE
l0011CFEA:
	v28 = 7<32>
	loc25 = v28
	// succ:  l0011CFEE
l0011CFEE:
	// succ:  l0011CFEF
l0011CFEF:
	v28 = loc25
	v29 = 7<32>
	v31 = v28 == v29
	branch !v31 l0011D012
	// succ:  l0011CFF7 l0011D012
l0011CFF7:
	v28 = loc3
	v29 = 1<32>
	v28 = v28 + v29
	loc11 = v28
	v28 = loc11
	v29 = 0xFF<32>
	v28 = v28 & v29
	loc12 = v28
	v28 = loc18
	v29 = loc12
	v38 = SLICE(v29, byte, 0)
	Mem0[v28:byte] = v38
	v28 = arg0
	loc5 = v28
	goto l0011D03A
	// succ:  l0011D03A
l0011D012:
	v28 = loc25
	v29 = 8<32>
	v31 = v28 == v29
	branch !v31 l0011D03A
	// succ:  l0011D019 l0011D03A
l0011D019:
	v28 = arg0
	v28 = Mem0[v28:word32]
	loc13 = v28
	v28 = loc3
	v29 = 1<32>
	v28 = v28 + v29
	loc14 = v28
	v28 = arg0
	v29 = 4<32>
	v28 = v28 + v29
	loc15 = v28
	v28 = loc15
	v29 = loc14
	Mem0[v28:word32] = v29
	v28 = loc13
	loc5 = v28
	// succ:  l0011D03A
l0011D03A:
	// succ:  l0011D03A
l0011D03A:
	v28 = loc5
	v29 = loc3
	v32 = 2<32>
	v29 = v29 << v32
	v28 = v28 + v29
	loc2 = v28
	v28 = loc2
	v29 = arg1
	Mem0[v28:word32] = v29
	v28 = loc2
	v29 = 4<32>
	v28 = v28 + v29
	loc17 = v28
	v28 = loc17
	v29 = 0<32>
	Mem0[v28:word32] = v29
	return
	// succ:  fn0011CF35_exit
l0011D05B:
	return
	// succ:  fn0011CF35_exit
fn0011CF35_exit:


// fn0011D05D
// Return size: 0
void fn0011D05D(word32 arg0)
fn0011D05D_entry:
	// succ:  l0011D05D
l0011D05D:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	return
	// succ:  fn0011D05D_exit
l0011D064:
	return
	// succ:  fn0011D05D_exit
fn0011D05D_exit:


// fn0011D066
// Return size: 0
void fn0011D066(word32 arg0, word32 arg1, word32 arg2)
fn0011D066_entry:
	// succ:  l0011D066
l0011D066:
	v6 = Mem0[0x00140030<p32>:word32]
	loc5 = v6
	v6 = arg0
	v7 = arg2
	Mem0[v6:word32] = v7
	v6 = arg0
	v7 = 4<32>
	v6 = v6 + v7
	loc3 = v6
	v6 = loc3
	v7 = arg1
	Mem0[v6:word32] = v7
	return
	// succ:  fn0011D066_exit
l0011D082:
	return
	// succ:  fn0011D066_exit
fn0011D066_exit:


// fn0011D084
// Return size: 0
word32 fn0011D084(word32 arg0, word32 arg1, word32 arg2)
fn0011D084_entry:
	// succ:  l0011D084
l0011D084:
	v18 = Mem0[0x00140030<p32>:word32]
	loc17 = v18
	v18 = Mem0[0x00140030<p32>:word32]
	v19 = 0x10<32>
	v18 = v18 + v19
	Mem0[0x00140030<p32>:word32] = v18
	v18 = Mem0[0x00140030<p32>:word32]
	v19 = Mem0[0x00140034<p32>:word32]
	v20 = v18 >= v19
	branch !v20 l0011D09D
	// succ:  l0011D098 l0011D09D
l0011D098:
	v18 = 0x10<32>
	abortStackOverflow(v18)
	// succ:  l0011D09D
l0011D09D:
	v18 = loc17
	loc9 = v18
	v18 = arg0
	v18 = Mem0[v18:word32]
	loc10 = v18
	v18 = loc10
	v19 = 0xC<32>
	v18 = v18 + v19
	loc11 = v18
	v18 = loc11
	v18 = Mem0[v18:word32]
	loc12 = v18
	v18 = loc9
	v19 = arg0
	v21 = arg1
	v22 = loc12
	v23 = 0x1FF<32>
	v22 = v22 & v23
	v23 = 0x2820<32>
	v22 = v22 + v23
fn0011D084_exit:


// fn0011D119
// Return size: 0
word32 fn0011D119(word32 arg0, word32 arg1, word32 arg2)
fn0011D119_entry:
	// succ:  l0011D119
l0011D119:
	v11 = Mem0[0x00140030<p32>:word32]
	loc10 = v11
	v11 = arg1
	v12 = 4<32>
	v11 = v11 + v12
	loc3 = v11
	v11 = loc3
	v11 = Mem0[v11:word32]
	loc4 = v11
	v11 = loc4
	v12 = arg0
	v13 = v11 == v12
	loc5 = v13
	v11 = arg1
	v11 = Mem0[v11:word32]
	loc6 = v11
	v11 = loc6
	v12 = arg2
	v13 = v11 == v12
	loc7 = v13
	v11 = loc5
	v12 = loc7
	v11 = v11 & v12
	loc8 = v11
	v11 = loc8
	return v11
	// succ:  fn0011D119_exit
l0011D14C:
	return v11
	// succ:  fn0011D119_exit
fn0011D119_exit:


// fn0011D14E
// Return size: 0
void fn0011D14E(word32 arg0)
fn0011D14E_entry:
	// succ:  l0011D14E
l0011D14E:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011E468(v5)
	return
	// succ:  fn0011D14E_exit
l0011D15A:
	return
	// succ:  fn0011D14E_exit
fn0011D14E_exit:


// fn0011D15C
// Return size: 0
void fn0011D15C(word32 arg0)
fn0011D15C_entry:
	// succ:  l0011D15C
l0011D15C:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011E468(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn0011D15C_exit
l0011D16D:
	return
	// succ:  fn0011D15C_exit
fn0011D15C_exit:


// fn0011D16F
// Return size: 0
void fn0011D16F(word32 arg0, word32 arg1, word32 arg2)
fn0011D16F_entry:
	// succ:  l0011D16F
l0011D16F:
	v7 = Mem0[0x00140030<p32>:word32]
	loc6 = v7
	v7 = arg2
	v7 = fn000D69BF(v7)
	loc3 = v7
	v7 = arg0
	v8 = 0<64>
	Mem0[v7:word64] = v8
	v7 = arg0
	v9 = 8<32>
	v7 = v7 + v9
	v9 = 0<32>
	Mem0[v7:word32] = v9
	v7 = loc3
	v7 = fn000DAF30(v7)
	loc4 = v7
	v7 = arg0
	v9 = loc3
	v10 = loc4
	fn0011B96D(v7, v9, v10)
	return
	// succ:  fn0011D16F_exit
l0011D19E:
	return
	// succ:  fn0011D16F_exit
fn0011D16F_exit:


// fn0011D1A0
// Return size: 0
void fn0011D1A0(word32 arg0, word32 arg1, word32 arg2)
fn0011D1A0_entry:
	// succ:  l0011D1A0
l0011D1A0:
	v40 = Mem0[0x00140030<p32>:word32]
	loc39 = v40
	v40 = Mem0[0x00140030<p32>:word32]
	v41 = 0x10<32>
	v40 = v40 + v41
	Mem0[0x00140030<p32>:word32] = v40
	v40 = Mem0[0x00140030<p32>:word32]
	v41 = Mem0[0x00140034<p32>:word32]
	v42 = v40 >= v41
	branch !v42 l0011D1B9
	// succ:  l0011D1B4 l0011D1B9
l0011D1B4:
	v40 = 0x10<32>
	abortStackOverflow(v40)
	// succ:  l0011D1B9
l0011D1B9:
	v40 = loc39
	loc25 = v40
	v40 = arg1
	v40 = Mem0[v40:word32]
	loc31 = v40
	v40 = loc31
	v41 = 0<32>
	v42 = v40 == v41
	loc32 = v42
	// succ:  l0011D1CB
l0011D1CB:
	v40 = loc32
	v42 = v40 == 0<32>
	v42 = v42
	// succ:  l0011D1D2
l0011D1D2:
	v40 = arg2
	v41 = 0xB<32>
	v40 = v40 + v41
	loc33 = v40
	v40 = loc33
	v43 = Mem0[v40:int8]
	v40 = CONVERT(v43, int8, word32)
	loc34 = v40
	v40 = loc34
	v41 = 0x18<32>
	v40 = v40 << v41
	v41 = 0x18<32>
	v40 = v40 >> v41
	v41 = 0<32>
	v42 = v40 < v41
	loc35 = v42
	v40 = loc35
	branch !v40 l0011D204
	// succ:  l0011D1F1 l0011D204
l0011D1F1:
	v40 = arg2
	v41 = 4<32>
	v40 = v40 + v41
	loc36 = v40
	v40 = loc36
	v40 = Mem0[v40:word32]
	loc5 = v40
	v40 = loc5
	loc8 = v40
	goto l0011D210
	// succ:  l0011D210
l0011D204:
	v40 = loc34
	v41 = 0xFF<32>
	v40 = v40 & v41
	loc6 = v40
	v40 = loc6
	loc8 = v40
	// succ:  l0011D210
l0011D210:
	v40 = loc8
	v41 = 0<32>
	v42 = v40 == v41
	loc7 = v42
	v40 = loc7
	branch !v40 l0011D221
	// succ:  l0011D21C l0011D221
l0011D21C:
	v40 = loc31
	loc14 = v40
	goto l0011D236
	// succ:  l0011D236
l0011D221:
	v40 = arg2
	v41 = 0x40A4<32>
	v40 = fn0011C48D(v40, v41)
	v40 = arg1
	v40 = Mem0[v40:word32]
	loc4 = v40
	v40 = loc4
	loc14 = v40
	// succ:  l0011D236
l0011D236:
	v40 = arg1
	v41 = 4<32>
	v40 = v40 + v41
	loc9 = v40
	v40 = loc9
	v40 = Mem0[v40:word32]
	loc10 = v40
	v40 = loc10
	v40 = Mem0[v40:word32]
	loc11 = v40
	v40 = loc11
	v41 = 0x18<32>
	v40 = v40 + v41
	loc12 = v40
	v40 = loc12
	v40 = Mem0[v40:word32]
	loc13 = v40
	v40 = loc25
	v41 = loc10
	v44 = loc14
	v45 = loc13
	v46 = 0x1FF<32>
	v45 = v45 & v46
	v46 = 0x2820<32>
	v45 = v45 + v46
fn0011D1A0_exit:


// fn0011D354
// Return size: 0
void fn0011D354(word32 arg0, word32 arg1, word32 arg2)
fn0011D354_entry:
	// succ:  l0011D354
l0011D354:
	v20 = Mem0[0x00140030<p32>:word32]
	loc18 = v20
	v20 = Mem0[0x00140030<p32>:word32]
	v21 = 0x20<32>
	v20 = v20 + v21
	Mem0[0x00140030<p32>:word32] = v20
	v20 = Mem0[0x00140030<p32>:word32]
	v21 = Mem0[0x00140034<p32>:word32]
	v22 = v20 >= v21
	branch !v22 l0011D36D
	// succ:  l0011D368 l0011D36D
l0011D368:
	v20 = 0x20<32>
	abortStackOverflow(v20)
	// succ:  l0011D36D
l0011D36D:
	v20 = loc18
	v21 = 0xC<32>
	v20 = v20 + v21
	loc10 = v20
	v20 = loc18
	loc11 = v20
	v20 = loc11
	v23 = 0<64>
	Mem0[v20:word64] = v23
	v20 = loc11
	v21 = 8<32>
	v20 = v20 + v21
	v21 = 0<32>
	Mem0[v20:word32] = v21
	v20 = arg2
	v20 = fn000DAF30(v20)
	loc12 = v20
	v20 = loc11
	v21 = arg2
	v24 = loc12
	fn0011B96D(v20, v21, v24)
	v20 = 0<32>
	Mem0[0x00140048<p32>:word32] = v20
	v20 = 0x1ED<32>
	v21 = loc10
	v24 = arg1
	v25 = loc11
	invoke_viii(v20, v21, v24, v25)
	v20 = Mem0[0x00140048<p32>:word32]
	loc13 = v20
	v20 = 0<32>
	Mem0[0x00140048<p32>:word32] = v20
	v20 = loc13
	v21 = 1<32>
	v20 = v20 & v21
	loc14 = v20
	// succ:  l0011D3B7
l0011D3B7:
	v20 = loc14
	branch !v20 l0011D3CE
	// succ:  l0011D3BD l0011D3CE
l0011D3BD:
	v20 = ___cxa_find_matching_catch_2()
	loc6 = v20
	v20 = Mem0[0x00140094<p32>:word32]
	loc7 = v20
	v20 = loc7
	loc3 = v20
	v20 = loc6
	loc4 = v20
	goto l0011D434
	// succ:  l0011D434
l0011D3CE:
	v20 = 0<32>
	Mem0[0x00140048<p32>:word32] = v20
	v20 = 0x1EE<32>
	v21 = arg0
	v24 = loc10
	invoke_vii(v20, v21, v24)
	v20 = Mem0[0x00140048<p32>:word32]
	loc15 = v20
	v20 = 0<32>
	Mem0[0x00140048<p32>:word32] = v20
	v20 = loc15
	v21 = 1<32>
	v20 = v20 & v21
	loc16 = v20
	v20 = loc16
	branch !v20 l0011D406
	// succ:  l0011D3EE l0011D406
l0011D3EE:
	v20 = ___cxa_find_matching_catch_2()
	loc8 = v20
	v20 = Mem0[0x00140094<p32>:word32]
	loc9 = v20
	v20 = loc10
	fn0011BAF7(v20)
	v20 = loc9
	loc3 = v20
	v20 = loc8
	loc4 = v20
	goto l0011D435
	// succ:  l0011D435
l0011D406:
	v20 = loc10
	fn0011BAF7(v20)
	v20 = loc11
	fn0011BAF7(v20)
	v20 = arg0
	v21 = 0x2654<32>
	Mem0[v20:word32] = v21
	v20 = arg0
	v21 = 8<32>
	v20 = v20 + v21
	loc5 = v20
	v20 = arg1
	v26 = Mem0[v20:word64]
	loc19 = v26
	v20 = loc5
	v23 = loc19
	Mem0[v20:word64] = v23
	v20 = loc18
	Mem0[0x00140030<p32>:word32] = v20
	return
	// succ:  fn0011D354_exit
l0011D433:
	// succ:  l0011D434
l0011D434:
	// succ:  l0011D435
l0011D435:
	v20 = loc11
	fn0011BAF7(v20)
	v20 = loc4
	___resumeException(v20)
	// succ:  l0011D43F
l0011D43F:
	return
	// succ:  fn0011D354_exit
fn0011D354_exit:


// fn0011D441
// Return size: 0
void fn0011D441()
fn0011D441_entry:
	// succ:  l0011D441
l0011D441:
	v41 = Mem0[0x00140030<p32>:word32]
	loc35 = v41
	v41 = Mem0[0x00140030<p32>:word32]
	v42 = 0x30<32>
	v41 = v41 + v42
	Mem0[0x00140030<p32>:word32] = v41
	v41 = Mem0[0x00140030<p32>:word32]
	v42 = Mem0[0x00140034<p32>:word32]
	v43 = v41 >= v42
	branch !v43 l0011D45A
	// succ:  l0011D455 l0011D45A
l0011D455:
	v41 = 0x30<32>
	abortStackOverflow(v41)
	// succ:  l0011D45A
l0011D45A:
	v41 = loc35
	v42 = 0x20<32>
	v41 = v41 + v42
	loc28 = v41
	v41 = loc35
	v42 = 0x18<32>
	v41 = v41 + v42
	loc30 = v41
	v41 = loc35
	v42 = 0x10<32>
	v41 = v41 + v42
	loc29 = v41
	v41 = loc35
	loc27 = v41
	v41 = loc35
	v42 = 0x24<32>
	v41 = v41 + v42
	loc0 = v41
	v41 = fn0011D5FB()
	loc1 = v41
	v41 = loc1
	v42 = 0<32>
	v43 = v41 == v42
	loc12 = v43
	v41 = loc12
	v43 = v41 == 0<32>
	v43 = v43
	// succ:  l0011D48B
l0011D48B:
	v41 = loc1
	v41 = Mem0[v41:word32]
	loc22 = v41
	v41 = loc22
	v42 = 0<32>
	v43 = v41 == v42
	loc23 = v43
	v41 = loc23
	v43 = v41 == 0<32>
	v43 = v43
	// succ:  l0011D49E
l0011D49E:
	v41 = loc22
	v42 = 0x50<32>
	v41 = v41 + v42
	loc24 = v41
	v41 = loc22
	v42 = 0x30<32>
	v41 = v41 + v42
	loc25 = v41
	v41 = loc25
	v44 = Mem0[v41:word64]
	loc36 = v44
	v44 = loc36
	v45 = 0xFFFFFFFFFFFFFF00<64>
	v44 = v44 & v45
	loc37 = v44
	v44 = loc37
	v45 = 0x436F6F40<64>
	v43 = v44 == v45
	loc26 = v43
	v41 = loc26
	v43 = v41 == 0<32>
	branch !v43 l0011D4EB
	// succ:  l0011D4D1 l0011D4EB
l0011D4D1:
	v41 = 0x2664<32>
	v41 = Mem0[v41:word32]
	loc21 = v41
	v41 = loc30
	v42 = loc21
	Mem0[v41:word32] = v42
	v41 = 0x40FD<32>
	v42 = loc30
	fn0011D654(v41, v42)
	// succ:  l0011D4EB
l0011D4EB:
	v44 = loc36
	v45 = 0x436F6F41<64>
	v43 = v44 == v45
	loc2 = v43
	v41 = loc2
	branch !v41 l0011D512
	// succ:  l0011D4FF l0011D512
l0011D4FF:
	v41 = loc22
	v42 = 0x2C<32>
	v41 = v41 + v42
	loc3 = v41
	v41 = loc3
	v41 = Mem0[v41:word32]
	loc4 = v41
	v41 = loc4
	loc5 = v41
	goto l0011D516
	// succ:  l0011D516
l0011D512:
	v41 = loc24
	loc5 = v41
	// succ:  l0011D516
l0011D516:
	v41 = loc0
	v42 = loc5
	Mem0[v41:word32] = v42
	v41 = loc22
	v41 = Mem0[v41:word32]
	loc6 = v41
	v41 = loc6
	v42 = 4<32>
	v41 = v41 + v42
	loc7 = v41
	v41 = loc7
	v41 = Mem0[v41:word32]
	loc8 = v41
	v41 = 0x988<32>
	v41 = Mem0[v41:word32]
	loc9 = v41
	v41 = loc9
	v42 = 0x10<32>
	v41 = v41 + v42
	loc10 = v41
	v41 = loc10
	v41 = Mem0[v41:word32]
	loc11 = v41
	v41 = 0x988<32>
	v42 = loc6
	v46 = loc0
	v47 = loc11
	v48 = 0x1FF<32>
	v47 = v47 & v48
	v48 = 0xF20<32>
	v47 = v47 + v48
fn0011D441_exit:


// fn0011D5FB
// Return size: 0
word32 fn0011D5FB()
fn0011D5FB_entry:
	// succ:  l0011D5FB
l0011D5FB:
	v10 = Mem0[0x00140030<p32>:word32]
	loc6 = v10
	v10 = Mem0[0x00140030<p32>:word32]
	v11 = 0x10<32>
	v10 = v10 + v11
	Mem0[0x00140030<p32>:word32] = v10
	v10 = Mem0[0x00140030<p32>:word32]
	v11 = Mem0[0x00140034<p32>:word32]
	v12 = v10 >= v11
	branch !v12 l0011D614
	// succ:  l0011D60F l0011D614
l0011D60F:
	v10 = 0x10<32>
	abortStackOverflow(v10)
	// succ:  l0011D614
l0011D614:
	v10 = loc6
	loc4 = v10
	v10 = 0x53EC<32>
	v11 = 0x1EF<32>
	v10 = _pthread_once(v10, v11)
	loc0 = v10
	v10 = loc0
	v11 = 0<32>
	v12 = v10 == v11
	loc1 = v12
	v10 = loc1
	branch !v10 l0011D645
	// succ:  l0011D62E l0011D645
l0011D62E:
	v10 = 0x53F0<32>
	v10 = Mem0[v10:word32]
	loc2 = v10
	v10 = loc2
	v10 = _pthread_getspecific(v10)
	loc3 = v10
	v10 = loc6
	Mem0[0x00140030<p32>:word32] = v10
	v10 = loc3
	return v10
	// succ:  fn0011D5FB_exit
l0011D645:
	v10 = 0x41BA<32>
	v11 = loc4
	fn0011D654(v10, v11)
	// succ:  l0011D64E
l0011D64E:
	v10 = 0<32>
	return v10
	// succ:  fn0011D5FB_exit
l0011D652:
	return v10
	// succ:  fn0011D5FB_exit
fn0011D5FB_exit:


// fn0011D654
// Return size: 0
void fn0011D654(word32 arg0, word32 arg1)
fn0011D654_entry:
	// succ:  l0011D654
l0011D654:
	v7 = Mem0[0x00140030<p32>:word32]
	loc5 = v7
	v7 = Mem0[0x00140030<p32>:word32]
	v8 = 0x10<32>
	v7 = v7 + v8
	Mem0[0x00140030<p32>:word32] = v7
	v7 = Mem0[0x00140030<p32>:word32]
	v8 = Mem0[0x00140034<p32>:word32]
	v9 = v7 >= v8
	branch !v9 l0011D66D
	// succ:  l0011D668 l0011D66D
l0011D668:
	v7 = 0x10<32>
	abortStackOverflow(v7)
	// succ:  l0011D66D
l0011D66D:
	v7 = loc5
	loc2 = v7
	v7 = loc2
	v8 = arg1
	Mem0[v7:word32] = v8
	v7 = 0xB14<32>
	v7 = Mem0[v7:word32]
	loc3 = v7
	v7 = loc3
	v8 = arg0
	v10 = loc2
	v7 = fn000D2BD4(v7, v8, v10)
	v7 = 0xA<32>
	v8 = loc3
	v7 = fn000DEC35(v7, v8)
	_abort()
	// succ:  l0011D694
l0011D694:
	return
	// succ:  fn0011D654_exit
fn0011D654_exit:


// fn0011D696
// Return size: 0
void fn0011D696(word32 arg0)
fn0011D696_entry:
	// succ:  l0011D696
l0011D696:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	return
	// succ:  fn0011D696_exit
l0011D69D:
	return
	// succ:  fn0011D696_exit
fn0011D696_exit:


// fn0011D69F
// Return size: 0
void fn0011D69F(word32 arg0)
fn0011D69F_entry:
	// succ:  l0011D69F
l0011D69F:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn0011D69F_exit
l0011D6AB:
	return
	// succ:  fn0011D69F_exit
fn0011D69F_exit:


// fn0011D6AD
// Return size: 0
void fn0011D6AD(word32 arg0)
fn0011D6AD_entry:
	// succ:  l0011D6AD
l0011D6AD:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	return
	// succ:  fn0011D6AD_exit
l0011D6B4:
	return
	// succ:  fn0011D6AD_exit
fn0011D6AD_exit:


// fn0011D6B6
// Return size: 0
void fn0011D6B6(word32 arg0)
fn0011D6B6_entry:
	// succ:  l0011D6B6
l0011D6B6:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	return
	// succ:  fn0011D6B6_exit
l0011D6BD:
	return
	// succ:  fn0011D6B6_exit
fn0011D6B6_exit:


// fn0011D6BF
// Return size: 0
word32 fn0011D6BF(word32 arg0, word32 arg1, word32 arg2)
fn0011D6BF_entry:
	// succ:  l0011D6BF
l0011D6BF:
	v25 = Mem0[0x00140030<p32>:word32]
	loc24 = v25
	v25 = Mem0[0x00140030<p32>:word32]
	v26 = 0x40<32>
	v25 = v25 + v26
	Mem0[0x00140030<p32>:word32] = v25
	v25 = Mem0[0x00140030<p32>:word32]
	v26 = Mem0[0x00140034<p32>:word32]
	v27 = v25 >= v26
	branch !v27 l0011D6DA
	// succ:  l0011D6D4 l0011D6DA
l0011D6D4:
	v25 = 0x40<32>
	abortStackOverflow(v25)
	// succ:  l0011D6DA
l0011D6DA:
	v25 = loc24
	loc16 = v25
	v25 = arg0
	v26 = arg1
	v27 = v25 == v26
	loc17 = v27
	v25 = loc17
	branch !v25 l0011D6EE
	// succ:  l0011D6E9 l0011D6EE
l0011D6E9:
	v25 = 1<32>
	loc4 = v25
l0011D6EE:
	v25 = arg1
	v26 = 0<32>
	v27 = v25 == v26
	loc18 = v27
	v25 = loc18
	branch !v25 l0011D6FE
	// succ:  l0011D6F9 l0011D6FE
l0011D6F9:
	v25 = 0<32>
	loc4 = v25
l0011D6FE:
	v25 = arg1
	v26 = 0x9A0<32>
	v28 = 0x990<32>
	v29 = 0<32>
	v25 = fn0011DBBE(v25, v26, v28, v29)
	loc19 = v25
	v25 = loc19
	v26 = 0<32>
	v27 = v25 == v26
	loc20 = v27
	v25 = loc20
	branch !v25 l0011D71D
	// succ:  l0011D718 l0011D71D
l0011D718:
	v25 = 0<32>
	loc4 = v25
l0011D71D:
	v25 = loc16
	v26 = 4<32>
	v25 = v25 + v26
	loc21 = v25
	v25 = loc21
	v30 = 0<64>
	Mem0[v25:word64] = v30
	v25 = loc21
	v26 = 8<32>
	v25 = v25 + v26
	v30 = 0<64>
	Mem0[v25:word64] = v30
	v25 = loc21
	v26 = 0x10<32>
	v25 = v25 + v26
	v30 = 0<64>
	Mem0[v25:word64] = v30
	v25 = loc21
	v26 = 0x18<32>
	v25 = v25 + v26
	v30 = 0<64>
	Mem0[v25:word64] = v30
	v25 = loc21
	v26 = 0x20<32>
	v25 = v25 + v26
	v30 = 0<64>
	Mem0[v25:word64] = v30
	v25 = loc21
	v26 = 0x28<32>
	v25 = v25 + v26
	v30 = 0<64>
	Mem0[v25:word64] = v30
	v25 = loc21
	v26 = 0x30<32>
	v25 = v25 + v26
	v26 = 0<32>
	Mem0[v25:word32] = v26
	v25 = loc16
	v26 = loc19
	Mem0[v25:word32] = v26
	v25 = loc16
	v26 = 8<32>
	v25 = v25 + v26
	loc22 = v25
	v25 = loc22
	v26 = arg0
	Mem0[v25:word32] = v26
	v25 = loc16
	v26 = 0xC<32>
	v25 = v25 + v26
	loc5 = v25
	v25 = loc5
	v26 = 0xFFFFFFFF<32>
	Mem0[v25:word32] = v26
	v25 = loc16
	v26 = 0x30<32>
	v25 = v25 + v26
	loc6 = v25
	v25 = loc6
	v26 = 1<32>
	Mem0[v25:word32] = v26
	v25 = loc19
	v25 = Mem0[v25:word32]
	loc7 = v25
	v25 = loc7
	v26 = 0x1C<32>
	v25 = v25 + v26
	loc8 = v25
	v25 = loc8
	v25 = Mem0[v25:word32]
	loc9 = v25
	v25 = arg2
	v25 = Mem0[v25:word32]
	loc10 = v25
	v25 = loc19
	v26 = loc16
	v28 = loc10
	v29 = 1<32>
	v31 = loc9
	v32 = 0x1FF<32>
	v31 = v31 & v32
	v32 = 0x2F20<32>
	v31 = v31 + v32
fn0011D6BF_exit:


// fn0011D812
// Return size: 0
void fn0011D812(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn0011D812_entry:
	// succ:  l0011D812
l0011D812:
	v8 = Mem0[0x00140030<p32>:word32]
	loc10 = v8
	v8 = arg1
	v9 = 8<32>
	v8 = v8 + v9
	loc6 = v8
	v8 = loc6
	v8 = Mem0[v8:word32]
	loc7 = v8
	v8 = arg0
	v9 = loc7
	v10 = v8 == v9
	loc8 = v10
	v8 = loc8
	branch !v8 l0011D83F
	// succ:  l0011D831 l0011D83F
l0011D831:
	v8 = 0<32>
	v9 = arg1
	v11 = arg2
	v12 = arg3
	v13 = arg4
	fn0011DA6B(v8, v9, v11, v12, v13)
	// succ:  l0011D83F
l0011D83F:
	return
	// succ:  fn0011D812_exit
l0011D840:
	return
	// succ:  fn0011D812_exit
fn0011D812_exit:


// fn0011D842
// Return size: 0
void fn0011D842(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn0011D842_entry:
	// succ:  l0011D842
l0011D842:
	v36 = Mem0[0x00140030<p32>:word32]
	loc37 = v36
	v36 = arg1
	v37 = 8<32>
	v36 = v36 + v37
	loc31 = v36
	v36 = loc31
	v36 = Mem0[v36:word32]
	loc32 = v36
	v36 = arg0
	v37 = loc32
	v38 = v36 == v37
	loc33 = v38
	// succ:  l0011D85D
l0011D85D:
	v36 = loc33
	branch !v36 l0011D8A0
	// succ:  l0011D863 l0011D8A0
l0011D863:
	v36 = arg1
	v37 = 4<32>
	v36 = v36 + v37
	loc34 = v36
	v36 = loc34
	v36 = Mem0[v36:word32]
	loc35 = v36
	v36 = loc35
	v37 = arg2
	v38 = v36 == v37
	loc5 = v38
	v36 = loc5
	branch !v36 l0011D89F
	// succ:  l0011D87C l0011D89F
l0011D87C:
	v36 = arg1
	v37 = 0x1C<32>
	v36 = v36 + v37
	loc6 = v36
	v36 = loc6
	v36 = Mem0[v36:word32]
	loc7 = v36
	v36 = loc7
	v37 = 1<32>
	v38 = v36 == v37
	loc8 = v38
	v36 = loc8
	v38 = v36 == 0<32>
	branch !v38 l0011D89E
	// succ:  l0011D896 l0011D89E
l0011D896:
	v36 = loc6
	v37 = arg3
	Mem0[v36:word32] = v37
	// succ:  l0011D89E
l0011D89E:
	// succ:  l0011D89F
l0011D89F:
	goto l0011D986
	// succ:  l0011D986
l0011D8A0:
	v36 = arg1
	v36 = Mem0[v36:word32]
	loc9 = v36
	v36 = arg0
	v37 = loc9
	v38 = v36 == v37
	loc10 = v38
	v36 = loc10
	branch !v36 l0011D986
	// succ:  l0011D8B2 l0011D986
l0011D8B2:
	v36 = arg1
	v37 = 0x10<32>
	v36 = v36 + v37
	loc11 = v36
	v36 = loc11
	v36 = Mem0[v36:word32]
	loc12 = v36
	v36 = loc12
	v37 = arg2
	v38 = v36 == v37
	loc13 = v38
	v36 = loc13
	v38 = v36 == 0<32>
	branch !v38 l0011D96B
	// succ:  l0011D8CC l0011D96B
l0011D8CC:
	v36 = arg1
	v37 = 0x14<32>
	v36 = v36 + v37
	loc14 = v36
	v36 = loc14
	v36 = Mem0[v36:word32]
	loc15 = v36
	v36 = loc15
	v37 = arg2
	v38 = v36 == v37
	loc16 = v38
	v36 = loc16
	v38 = v36 == 0<32>
	branch !v38 l0011D96A
	// succ:  l0011D8E6 l0011D96A
l0011D8E6:
	v36 = arg1
	v37 = 0x20<32>
	v36 = v36 + v37
	loc19 = v36
	v36 = loc19
	v37 = arg3
	Mem0[v36:word32] = v37
	v36 = loc14
	v37 = arg2
	Mem0[v36:word32] = v37
	v36 = arg1
	v37 = 0x28<32>
	v36 = v36 + v37
	loc20 = v36
	v36 = loc20
	v36 = Mem0[v36:word32]
	loc21 = v36
	v36 = loc21
	v37 = 1<32>
	v36 = v36 + v37
	loc22 = v36
	v36 = loc20
	v37 = loc22
	Mem0[v36:word32] = v37
	v36 = arg1
	v37 = 0x24<32>
	v36 = v36 + v37
	loc23 = v36
	v36 = loc23
	v36 = Mem0[v36:word32]
	loc24 = v36
	v36 = loc24
	v37 = 1<32>
	v38 = v36 == v37
	loc25 = v38
	v36 = loc25
	branch !v36 l0011D959
	// succ:  l0011D930 l0011D959
l0011D930:
	v36 = arg1
	v37 = 0x18<32>
	v36 = v36 + v37
	loc26 = v36
	v36 = loc26
	v36 = Mem0[v36:word32]
	loc27 = v36
	v36 = loc27
	v37 = 2<32>
	v38 = v36 == v37
	loc28 = v38
	v36 = loc28
	branch !v36 l0011D958
	// succ:  l0011D949 l0011D958
l0011D949:
	v36 = arg1
	v37 = 0x36<32>
	v36 = v36 + v37
	loc29 = v36
	v36 = loc29
	v37 = 1<32>
	v39 = SLICE(v37, byte, 0)
	Mem0[v36:byte] = v39
	// succ:  l0011D958
l0011D958:
	// succ:  l0011D959
l0011D959:
	v36 = arg1
	v37 = 0x2C<32>
	v36 = v36 + v37
	loc30 = v36
	v36 = loc30
	v37 = 4<32>
	Mem0[v36:word32] = v37
	goto l0011D987
	// succ:  l0011D987
l0011D96A:
	// succ:  l0011D96B
l0011D96B:
	v36 = arg3
	v37 = 1<32>
	v38 = v36 == v37
	loc17 = v38
	v36 = loc17
	branch !v36 l0011D985
	// succ:  l0011D976 l0011D985
l0011D976:
	v36 = arg1
	v37 = 0x20<32>
	v36 = v36 + v37
	loc18 = v36
	v36 = loc18
	v37 = 1<32>
	Mem0[v36:word32] = v37
	// succ:  l0011D985
l0011D985:
	// succ:  l0011D986
l0011D986:
	// succ:  l0011D986
l0011D986:
	// succ:  l0011D987
l0011D987:
	return
	// succ:  fn0011D842_exit
l0011D989:
	return
	// succ:  fn0011D842_exit
fn0011D842_exit:


// fn0011D98B
// Return size: 0
void fn0011D98B(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn0011D98B_entry:
	// succ:  l0011D98B
l0011D98B:
	v8 = Mem0[0x00140030<p32>:word32]
	loc8 = v8
	v8 = arg1
	v9 = 8<32>
	v8 = v8 + v9
	loc4 = v8
	v8 = loc4
	v8 = Mem0[v8:word32]
	loc5 = v8
	v8 = arg0
	v9 = loc5
	v10 = v8 == v9
	loc6 = v10
	v8 = loc6
	branch !v8 l0011D9B6
	// succ:  l0011D9AA l0011D9B6
l0011D9AA:
	v8 = 0<32>
	v9 = arg1
	v11 = arg2
	v12 = arg3
	fn0011D9B9(v8, v9, v11, v12)
	// succ:  l0011D9B6
l0011D9B6:
	return
	// succ:  fn0011D98B_exit
l0011D9B7:
	return
	// succ:  fn0011D98B_exit
fn0011D98B_exit:


// fn0011D9B9
// Return size: 0
void fn0011D9B9(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn0011D9B9_entry:
	// succ:  l0011D9B9
l0011D9B9:
	v19 = Mem0[0x00140030<p32>:word32]
	loc19 = v19
	v19 = arg1
	v20 = 0x10<32>
	v19 = v19 + v20
	loc12 = v19
	v19 = loc12
	v19 = Mem0[v19:word32]
	loc13 = v19
	v19 = loc13
	v20 = 0<32>
	v21 = v19 == v20
	loc14 = v21
	// succ:  l0011D9D4
l0011D9D4:
	v19 = loc14
	branch !v19 l0011D9FE
	// succ:  l0011D9DA l0011D9FE
l0011D9DA:
	v19 = loc12
	v20 = arg2
	Mem0[v19:word32] = v20
	v19 = arg1
	v20 = 0x18<32>
	v19 = v19 + v20
	loc15 = v19
	v19 = loc15
	v20 = arg3
	Mem0[v19:word32] = v20
	v19 = arg1
	v20 = 0x24<32>
	v19 = v19 + v20
	loc16 = v19
	v19 = loc16
	v20 = 1<32>
	Mem0[v19:word32] = v20
	goto l0011DA66
	// succ:  l0011DA66
l0011D9FE:
	v19 = loc13
	v20 = arg2
	v21 = v19 == v20
	loc17 = v21
	v19 = loc17
	v21 = v19 == 0<32>
	branch !v21 l0011DA45
	// succ:  l0011DA0A l0011DA45
l0011DA0A:
	v19 = arg1
	v20 = 0x24<32>
	v19 = v19 + v20
	loc7 = v19
	v19 = loc7
	v19 = Mem0[v19:word32]
	loc8 = v19
	v19 = loc8
	v20 = 1<32>
	v19 = v19 + v20
	loc9 = v19
	v19 = loc7
	v20 = loc9
	Mem0[v19:word32] = v20
	v19 = arg1
	v20 = 0x18<32>
	v19 = v19 + v20
	loc10 = v19
	v19 = loc10
	v20 = 2<32>
	Mem0[v19:word32] = v20
	v19 = arg1
	v20 = 0x36<32>
	v19 = v19 + v20
	loc11 = v19
	v19 = loc11
	v20 = 1<32>
	v22 = SLICE(v20, byte, 0)
	Mem0[v19:byte] = v22
	goto l0011DA67
	// succ:  l0011DA67
l0011DA45:
	v19 = arg1
	v20 = 0x18<32>
	v19 = v19 + v20
	loc4 = v19
	v19 = loc4
	v19 = Mem0[v19:word32]
	loc5 = v19
	v19 = loc5
	v20 = 2<32>
	v21 = v19 == v20
	loc6 = v21
	v19 = loc6
	branch !v19 l0011DA66
	// succ:  l0011DA5E l0011DA66
l0011DA5E:
	v19 = loc4
	v20 = arg3
	Mem0[v19:word32] = v20
	// succ:  l0011DA66
l0011DA66:
	// succ:  l0011DA66
l0011DA66:
	// succ:  l0011DA67
l0011DA67:
	return
	// succ:  fn0011D9B9_exit
l0011DA69:
	return
	// succ:  fn0011D9B9_exit
fn0011D9B9_exit:


// fn0011DA6B
// Return size: 0
void fn0011DA6B(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn0011DA6B_entry:
	// succ:  l0011DA6B
l0011DA6B:
	v36 = Mem0[0x00140030<p32>:word32]
	loc37 = v36
	v36 = arg1
	v37 = 0x35<32>
	v36 = v36 + v37
	loc29 = v36
	v36 = loc29
	v37 = 1<32>
	v38 = SLICE(v37, byte, 0)
	Mem0[v36:byte] = v38
	v36 = arg1
	v37 = 4<32>
	v36 = v36 + v37
	loc30 = v36
	v36 = loc30
	v36 = Mem0[v36:word32]
	loc31 = v36
	v36 = loc31
	v37 = arg3
	v39 = v36 == v37
	loc32 = v39
	// succ:  l0011DA94
l0011DA94:
	v36 = loc32
	branch !v36 l0011DBBA
	// succ:  l0011DA9A l0011DBBA
l0011DA9A:
	v36 = arg1
	v37 = 0x34<32>
	v36 = v36 + v37
	loc33 = v36
	v36 = loc33
	v37 = 1<32>
	v40 = SLICE(v37, byte, 0)
	Mem0[v36:byte] = v40
	v36 = arg1
	v37 = 0x10<32>
	v36 = v36 + v37
	loc5 = v36
	v36 = loc5
	v36 = Mem0[v36:word32]
	loc6 = v36
	v36 = loc6
	v37 = 0<32>
	v39 = v36 == v37
	loc7 = v39
	v36 = loc7
	branch !v36 l0011DB20
	// succ:  l0011DAC1 l0011DB20
l0011DAC1:
	v36 = loc5
	v37 = arg2
	Mem0[v36:word32] = v37
	v36 = arg1
	v37 = 0x18<32>
	v36 = v36 + v37
	loc8 = v36
	v36 = loc8
	v37 = arg4
	Mem0[v36:word32] = v37
	v36 = arg1
	v37 = 0x24<32>
	v36 = v36 + v37
	loc9 = v36
	v36 = loc9
	v37 = 1<32>
	Mem0[v36:word32] = v37
	v36 = arg1
	v37 = 0x30<32>
	v36 = v36 + v37
	loc10 = v36
	v36 = loc10
	v36 = Mem0[v36:word32]
	loc11 = v36
	v36 = loc11
	v37 = 1<32>
	v39 = v36 == v37
	loc12 = v39
	v36 = arg4
	v37 = 1<32>
	v39 = v36 == v37
	loc13 = v39
	v36 = loc12
	v37 = loc13
	v36 = v36 & v37
	loc34 = v36
	v36 = loc34
	v39 = v36 == 0<32>
	branch !v39 l0011DB0F
	// succ:  l0011DB0C l0011DB0F
l0011DB0C:
	goto l0011DBBA
	// succ:  l0011DBBA
l0011DB0F:
	v36 = arg1
	v37 = 0x36<32>
	v36 = v36 + v37
	loc14 = v36
	v36 = loc14
	v37 = 1<32>
	v41 = SLICE(v37, byte, 0)
	Mem0[v36:byte] = v41
	goto l0011DBBA
	// succ:  l0011DBBA
l0011DB20:
	v36 = loc6
	v37 = arg2
	v39 = v36 == v37
	loc15 = v39
	v36 = loc15
	v39 = v36 == 0<32>
	branch !v39 l0011DB59
	// succ:  l0011DB2C l0011DB59
l0011DB2C:
	v36 = arg1
	v37 = 0x24<32>
	v36 = v36 + v37
	loc25 = v36
	v36 = loc25
	v36 = Mem0[v36:word32]
	loc26 = v36
	v36 = loc26
	v37 = 1<32>
	v36 = v36 + v37
	loc27 = v36
	v36 = loc25
	v37 = loc27
	Mem0[v36:word32] = v37
	v36 = arg1
	v37 = 0x36<32>
	v36 = v36 + v37
	loc28 = v36
	v36 = loc28
	v37 = 1<32>
	v42 = SLICE(v37, byte, 0)
	Mem0[v36:byte] = v42
	goto l0011DBBA
	// succ:  l0011DBBA
l0011DB59:
	v36 = arg1
	v37 = 0x18<32>
	v36 = v36 + v37
	loc16 = v36
	v36 = loc16
	v36 = Mem0[v36:word32]
	loc17 = v36
	v36 = loc17
	v37 = 2<32>
	v39 = v36 == v37
	loc18 = v39
	v36 = loc18
	branch !v36 l0011DB7E
	// succ:  l0011DB72 l0011DB7E
l0011DB72:
	v36 = loc16
	v37 = arg4
	Mem0[v36:word32] = v37
	v36 = arg4
	loc23 = v36
	goto l0011DB82
	// succ:  l0011DB82
l0011DB7E:
	v36 = loc17
	loc23 = v36
	// succ:  l0011DB82
l0011DB82:
	v36 = arg1
	v37 = 0x30<32>
	v36 = v36 + v37
	loc19 = v36
	v36 = loc19
	v36 = Mem0[v36:word32]
	loc20 = v36
	v36 = loc20
	v37 = 1<32>
	v39 = v36 == v37
	loc21 = v39
	v36 = loc23
	v37 = 1<32>
	v39 = v36 == v37
	loc22 = v39
	v36 = loc21
	v37 = loc22
	v36 = v36 & v37
	loc35 = v36
	v36 = loc35
	branch !v36 l0011DBB9
	// succ:  l0011DBAA l0011DBB9
l0011DBAA:
	v36 = arg1
	v37 = 0x36<32>
	v36 = v36 + v37
	loc24 = v36
	v36 = loc24
	v37 = 1<32>
	v43 = SLICE(v37, byte, 0)
	Mem0[v36:byte] = v43
	// succ:  l0011DBB9
l0011DBB9:
	// succ:  l0011DBBA
l0011DBBA:
	// succ:  l0011DBBA
l0011DBBA:
	return
	// succ:  fn0011DA6B_exit
l0011DBBC:
	return
	// succ:  fn0011DA6B_exit
fn0011DA6B_exit:


// fn0011DBBE
// Return size: 0
word32 fn0011DBBE(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn0011DBBE_entry:
	// succ:  l0011DBBE
l0011DBBE:
	v56 = Mem0[0x00140030<p32>:word32]
	loc56 = v56
	v56 = Mem0[0x00140030<p32>:word32]
	v57 = 0x40<32>
	v56 = v56 + v57
	Mem0[0x00140030<p32>:word32] = v56
	v56 = Mem0[0x00140030<p32>:word32]
	v57 = Mem0[0x00140034<p32>:word32]
	v58 = v56 >= v57
	branch !v58 l0011DBD9
	// succ:  l0011DBD3 l0011DBD9
l0011DBD3:
	v56 = 0x40<32>
	abortStackOverflow(v56)
	// succ:  l0011DBD9
l0011DBD9:
	v56 = loc56
	loc37 = v56
	v56 = arg0
	v56 = Mem0[v56:word32]
	loc46 = v56
	v56 = loc46
	v57 = 0xFFFFFFF8<32>
	v56 = v56 + v57
	loc47 = v56
	v56 = loc47
	v56 = Mem0[v56:word32]
	loc48 = v56
	v56 = arg0
	v57 = loc48
	v56 = v56 + v57
	loc49 = v56
	v56 = loc46
	v57 = 0xFFFFFFFC<32>
	v56 = v56 + v57
	loc50 = v56
	v56 = loc50
	v56 = Mem0[v56:word32]
	loc7 = v56
	v56 = loc37
	v57 = arg2
	Mem0[v56:word32] = v57
	v56 = loc37
	v57 = 4<32>
	v56 = v56 + v57
	loc8 = v56
	v56 = loc8
	v57 = arg0
	Mem0[v56:word32] = v57
	v56 = loc37
	v57 = 8<32>
	v56 = v56 + v57
	loc9 = v56
	v56 = loc9
	v57 = arg1
	Mem0[v56:word32] = v57
	v56 = loc37
	v57 = 0xC<32>
	v56 = v56 + v57
	loc10 = v56
	v56 = loc10
	v57 = arg3
	Mem0[v56:word32] = v57
	v56 = loc37
	v57 = 0x10<32>
	v56 = v56 + v57
	loc11 = v56
	v56 = loc37
	v57 = 0x14<32>
	v56 = v56 + v57
	loc12 = v56
	v56 = loc37
	v57 = 0x18<32>
	v56 = v56 + v57
	loc13 = v56
	v56 = loc37
	v57 = 0x1C<32>
	v56 = v56 + v57
	loc14 = v56
	v56 = loc37
	v57 = 0x20<32>
	v56 = v56 + v57
	loc15 = v56
	v56 = loc37
	v57 = 0x28<32>
	v56 = v56 + v57
	loc16 = v56
	v56 = loc7
	v57 = arg2
	v58 = v56 == v57
	loc17 = v58
	v56 = loc11
	v59 = 0<64>
	Mem0[v56:word64] = v59
	v56 = loc11
	v57 = 8<32>
	v56 = v56 + v57
	v59 = 0<64>
	Mem0[v56:word64] = v59
	v56 = loc11
	v57 = 0x10<32>
	v56 = v56 + v57
	v59 = 0<64>
	Mem0[v56:word64] = v59
	v56 = loc11
	v57 = 0x18<32>
	v56 = v56 + v57
	v59 = 0<64>
	Mem0[v56:word64] = v59
	v56 = loc11
	v57 = 0x20<32>
	v56 = v56 + v57
	v57 = 0<32>
	Mem0[v56:word32] = v57
	v56 = loc11
	v57 = 0x24<32>
	v56 = v56 + v57
	v57 = 0<32>
	v60 = SLICE(v57, word16, 0)
	Mem0[v56:word16] = v60
	v56 = loc11
	v57 = 0x26<32>
	v56 = v56 + v57
	v57 = 0<32>
	v61 = SLICE(v57, byte, 0)
	Mem0[v56:byte] = v61
	// succ:  l0011DCAC
l0011DCAC:
	v56 = loc17
	v56 = v56
	// succ:  l0011DCB2
l0011DCB2:
	v56 = loc37
	v57 = 0x30<32>
	v56 = v56 + v57
	loc18 = v56
	v56 = loc18
	v57 = 1<32>
	Mem0[v56:word32] = v57
	v56 = arg2
	v56 = Mem0[v56:word32]
	loc19 = v56
	v56 = loc19
	v57 = 0x14<32>
	v56 = v56 + v57
	loc20 = v56
	v56 = loc20
	v56 = Mem0[v56:word32]
	loc21 = v56
	v56 = arg2
	v57 = loc37
	v62 = loc49
	v63 = loc49
	v64 = 1<32>
	v65 = 0<32>
	v66 = loc21
	v67 = 0x1FF<32>
	v66 = v66 & v67
	v67 = 0x1320<32>
	v66 = v66 + v67
fn0011DBBE_exit:


// fn0011DE2C
// Return size: 0
void fn0011DE2C(word32 arg0)
fn0011DE2C_entry:
	// succ:  l0011DE2C
l0011DE2C:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn0011DE2C_exit
l0011DE38:
	return
	// succ:  fn0011DE2C_exit
fn0011DE2C_exit:


// fn0011DE3A
// Return size: 0
void fn0011DE3A(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn0011DE3A_entry:
	// succ:  l0011DE3A
l0011DE3A:
	v13 = Mem0[0x00140030<p32>:word32]
	loc15 = v13
	v13 = arg1
	v14 = 8<32>
	v13 = v13 + v14
	loc10 = v13
	v13 = loc10
	v13 = Mem0[v13:word32]
	loc11 = v13
	v13 = arg0
	v14 = loc11
	v15 = v13 == v14
	loc12 = v15
	v13 = loc12
	branch !v13 l0011DE67
	// succ:  l0011DE59 l0011DE67
l0011DE59:
	v13 = 0<32>
	v14 = arg1
	v16 = arg2
	v17 = arg3
	v18 = arg4
	fn0011DA6B(v13, v14, v16, v17, v18)
l0011DE67:
	v13 = arg0
	v14 = 8<32>
	v13 = v13 + v14
	loc13 = v13
	v13 = loc13
	v13 = Mem0[v13:word32]
	loc6 = v13
	v13 = loc6
	v13 = Mem0[v13:word32]
	loc7 = v13
	v13 = loc7
	v14 = 0x14<32>
	v13 = v13 + v14
	loc8 = v13
	v13 = loc8
	v13 = Mem0[v13:word32]
	loc9 = v13
	v13 = loc6
	v14 = arg1
	v16 = arg2
	v17 = arg3
	v18 = arg4
	v19 = arg5
	v20 = loc9
	v21 = 0x1FF<32>
	v20 = v20 & v21
	v21 = 0x1320<32>
	v20 = v20 + v21
fn0011DE3A_exit:


// fn0011DEA7
// Return size: 0
void fn0011DEA7(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn0011DEA7_entry:
	// succ:  l0011DEA7
l0011DEA7:
	v56 = Mem0[0x00140030<p32>:word32]
	loc57 = v56
	v56 = arg1
	v57 = 8<32>
	v56 = v56 + v57
	loc46 = v56
	v56 = loc46
	v56 = Mem0[v56:word32]
	loc51 = v56
	v56 = arg0
	v57 = loc51
	v58 = v56 == v57
	loc52 = v58
	// succ:  l0011DEC2
l0011DEC2:
	v56 = loc52
	branch !v56 l0011DF05
	// succ:  l0011DEC8 l0011DF05
l0011DEC8:
	v56 = arg1
	v57 = 4<32>
	v56 = v56 + v57
	loc53 = v56
	v56 = loc53
	v56 = Mem0[v56:word32]
	loc54 = v56
	v56 = loc54
	v57 = arg2
	v58 = v56 == v57
	loc6 = v58
	v56 = loc6
	branch !v56 l0011DF04
	// succ:  l0011DEE1 l0011DF04
l0011DEE1:
	v56 = arg1
	v57 = 0x1C<32>
	v56 = v56 + v57
	loc7 = v56
	v56 = loc7
	v56 = Mem0[v56:word32]
	loc8 = v56
	v56 = loc8
	v57 = 1<32>
	v58 = v56 == v57
	loc9 = v58
	v56 = loc9
	v58 = v56 == 0<32>
	branch !v58 l0011DF03
	// succ:  l0011DEFB l0011DF03
l0011DEFB:
	v56 = loc7
	v57 = arg3
	Mem0[v56:word32] = v57
	// succ:  l0011DF03
l0011DF03:
	// succ:  l0011DF04
l0011DF04:
l0011DF05:
	v56 = arg1
	v56 = Mem0[v56:word32]
	loc10 = v56
	v56 = arg0
	v57 = loc10
	v58 = v56 == v57
	loc11 = v58
	v56 = loc11
	v58 = v56 == 0<32>
	v58 = v58
	// succ:  l0011DF18
l0011DF18:
	v56 = arg0
	v57 = 8<32>
	v56 = v56 + v57
	loc45 = v56
	v56 = loc45
	v56 = Mem0[v56:word32]
	loc47 = v56
	v56 = loc47
	v56 = Mem0[v56:word32]
	loc48 = v56
	v56 = loc48
	v57 = 0x18<32>
	v56 = v56 + v57
	loc49 = v56
	v56 = loc49
	v56 = Mem0[v56:word32]
	loc50 = v56
	v56 = loc47
	v57 = arg1
	v59 = arg2
	v60 = arg3
	v61 = arg4
	v62 = loc50
	v63 = 0x1FF<32>
	v62 = v62 & v63
	v63 = 0x200<32>
	v62 = v62 + v63
fn0011DEA7_exit:


// fn0011E119
// Return size: 0
void fn0011E119(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn0011E119_entry:
	// succ:  l0011E119
l0011E119:
	v13 = Mem0[0x00140030<p32>:word32]
	loc13 = v13
	v13 = arg1
	v14 = 8<32>
	v13 = v13 + v14
	loc6 = v13
	v13 = loc6
	v13 = Mem0[v13:word32]
	loc7 = v13
	v13 = arg0
	v14 = loc7
	v15 = v13 == v14
	loc8 = v15
	v13 = loc8
	branch !v13 l0011E144
	// succ:  l0011E138 l0011E144
l0011E138:
	v13 = 0<32>
	v14 = arg1
	v16 = arg2
	v17 = arg3
	fn0011D9B9(v13, v14, v16, v17)
l0011E144:
	v13 = arg0
	v14 = 8<32>
	v13 = v13 + v14
	loc9 = v13
	v13 = loc9
	v13 = Mem0[v13:word32]
	loc10 = v13
	v13 = loc10
	v13 = Mem0[v13:word32]
	loc11 = v13
	v13 = loc11
	v14 = 0x1C<32>
	v13 = v13 + v14
	loc4 = v13
	v13 = loc4
	v13 = Mem0[v13:word32]
	loc5 = v13
	v13 = loc10
	v14 = arg1
	v16 = arg2
	v17 = arg3
	v18 = loc5
	v19 = 0x1FF<32>
	v18 = v18 & v19
	v19 = 0x2F20<32>
	v18 = v18 + v19
fn0011E119_exit:


// fn0011E181
// Return size: 0
void fn0011E181(word32 arg0)
fn0011E181_entry:
	// succ:  l0011E181
l0011E181:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	return
	// succ:  fn0011E181_exit
l0011E188:
	return
	// succ:  fn0011E181_exit
fn0011E181_exit:


// fn0011E18A
// Return size: 0
void fn0011E18A()
fn0011E18A_entry:
	// succ:  l0011E18A
l0011E18A:
	v8 = Mem0[0x00140030<p32>:word32]
	loc4 = v8
	v8 = Mem0[0x00140030<p32>:word32]
	v9 = 0x10<32>
	v8 = v8 + v9
	Mem0[0x00140030<p32>:word32] = v8
	v8 = Mem0[0x00140030<p32>:word32]
	v9 = Mem0[0x00140034<p32>:word32]
	v10 = v8 >= v9
	branch !v10 l0011E1A3
	// succ:  l0011E19E l0011E1A3
l0011E19E:
	v8 = 0x10<32>
	abortStackOverflow(v8)
	// succ:  l0011E1A3
l0011E1A3:
	v8 = loc4
	loc2 = v8
	v8 = 0x53F0<32>
	v9 = 0x1F0<32>
	v8 = _pthread_key_create(v8, v9)
	loc0 = v8
	v8 = loc0
	v9 = 0<32>
	v10 = v8 == v9
	loc1 = v10
	v8 = loc1
	branch !v8 l0011E1C3
	// succ:  l0011E1BD l0011E1C3
l0011E1BD:
	v8 = loc4
	Mem0[0x00140030<p32>:word32] = v8
	return
	// succ:  fn0011E18A_exit
l0011E1C3:
	v8 = 0x41EB<32>
	v9 = loc2
	fn0011D654(v8, v9)
	// succ:  l0011E1CC
l0011E1CC:
	// succ:  l0011E1CD
l0011E1CD:
	return
	// succ:  fn0011E18A_exit
fn0011E18A_exit:


// fn0011E1CF
// Return size: 0
void fn0011E1CF(word32 arg0)
fn0011E1CF_entry:
	// succ:  l0011E1CF
l0011E1CF:
	v9 = Mem0[0x00140030<p32>:word32]
	loc6 = v9
	v9 = Mem0[0x00140030<p32>:word32]
	v10 = 0x10<32>
	v9 = v9 + v10
	Mem0[0x00140030<p32>:word32] = v9
	v9 = Mem0[0x00140030<p32>:word32]
	v10 = Mem0[0x00140034<p32>:word32]
	v11 = v9 >= v10
	branch !v11 l0011E1E8
	// succ:  l0011E1E3 l0011E1E8
l0011E1E3:
	v9 = 0x10<32>
	abortStackOverflow(v9)
	// succ:  l0011E1E8
l0011E1E8:
	v9 = loc6
	loc4 = v9
	v9 = arg0
	_free(v9)
	v9 = 0x53F0<32>
	v9 = Mem0[v9:word32]
	loc1 = v9
	v9 = loc1
	v10 = 0<32>
	v9 = _pthread_setspecific(v9, v10)
	loc2 = v9
	v9 = loc2
	v10 = 0<32>
	v11 = v9 == v10
	loc3 = v11
	v9 = loc3
	branch !v9 l0011E213
	// succ:  l0011E20D l0011E213
l0011E20D:
	v9 = loc6
	Mem0[0x00140030<p32>:word32] = v9
	return
	// succ:  fn0011E1CF_exit
l0011E213:
	v9 = 0x421D<32>
	v10 = loc4
	fn0011D654(v9, v10)
	// succ:  l0011E21C
l0011E21C:
	// succ:  l0011E21D
l0011E21D:
	return
	// succ:  fn0011E1CF_exit
fn0011E1CF_exit:


// fn0011E21F
// Return size: 0
void fn0011E21F()
fn0011E21F_entry:
	// succ:  l0011E21F
l0011E21F:
	v20 = Mem0[0x00140030<p32>:word32]
	loc14 = v20
	v20 = 0<32>
	Mem0[0x00140048<p32>:word32] = v20
	v20 = 0x1F1<32>
	v20 = invoke_i(v20)
	loc0 = v20
	v20 = Mem0[0x00140048<p32>:word32]
	loc1 = v20
	v20 = 0<32>
	Mem0[0x00140048<p32>:word32] = v20
	v20 = loc1
	v21 = 1<32>
	v20 = v20 & v21
	loc7 = v20
	v20 = loc7
	branch !v20 l0011E252
	// succ:  l0011E243 l0011E252
l0011E243:
	v20 = 0<32>
	v20 = ___cxa_find_matching_catch_3(v20)
	loc5 = v20
	v20 = Mem0[0x00140094<p32>:word32]
	loc6 = v20
	v20 = loc5
	fn000D0E65(v20)
	// succ:  l0011E252
l0011E252:
	v20 = loc0
	v21 = 0<32>
	v22 = v20 == v21
	loc8 = v22
	v20 = loc8
	v22 = v20 == 0<32>
	branch !v22 l0011E2B1
	// succ:  l0011E25E l0011E2B1
l0011E25E:
	v20 = loc0
	v20 = Mem0[v20:word32]
	loc9 = v20
	v20 = loc9
	v21 = 0<32>
	v22 = v20 == v21
	loc10 = v22
	v20 = loc10
	v22 = v20 == 0<32>
	branch !v22 l0011E2B0
	// succ:  l0011E271 l0011E2B0
l0011E271:
	v20 = loc9
	v21 = 0x30<32>
	v20 = v20 + v21
	loc11 = v20
	v20 = loc11
	v23 = Mem0[v20:word64]
	loc15 = v23
	v23 = loc15
	v24 = 0xFFFFFFFFFFFFFF00<64>
	v23 = v23 & v24
	loc16 = v23
	v23 = loc16
	v24 = 0x436F6F40<64>
	v22 = v23 == v24
	loc12 = v22
	v20 = loc12
	branch !v20 l0011E2AF
	// succ:  l0011E29B l0011E2AF
l0011E29B:
	v20 = loc9
	v21 = 0xC<32>
	v20 = v20 + v21
	loc2 = v20
	v20 = loc2
	v20 = Mem0[v20:word32]
	loc3 = v20
	v20 = loc3
	fn0011E2BD(v20)
	// succ:  l0011E2AF
l0011E2AF:
	// succ:  l0011E2B0
l0011E2B0:
	// succ:  l0011E2B1
l0011E2B1:
	v20 = fn0011E377()
	loc4 = v20
	v20 = loc4
	fn0011E2BD(v20)
	// succ:  l0011E2BB
l0011E2BB:
	return
	// succ:  fn0011E21F_exit
fn0011E21F_exit:


// fn0011E2BD
// Return size: 0
void fn0011E2BD(word32 arg0)
fn0011E2BD_entry:
	// succ:  l0011E2BD
l0011E2BD:
	v19 = Mem0[0x00140030<p32>:word32]
	loc16 = v19
	v19 = Mem0[0x00140030<p32>:word32]
	v20 = 0x10<32>
	v19 = v19 + v20
	Mem0[0x00140030<p32>:word32] = v19
	v19 = Mem0[0x00140030<p32>:word32]
	v20 = Mem0[0x00140034<p32>:word32]
	v21 = v19 >= v20
	branch !v21 l0011E2D6
	// succ:  l0011E2D1 l0011E2D6
l0011E2D1:
	v19 = 0x10<32>
	abortStackOverflow(v19)
	// succ:  l0011E2D6
l0011E2D6:
	v19 = loc16
	v20 = 8<32>
	v19 = v19 + v20
	loc14 = v19
	v19 = loc16
	loc13 = v19
	v19 = 0<32>
	Mem0[0x00140048<p32>:word32] = v19
	v19 = arg0
	invoke_v(v19)
	v19 = Mem0[0x00140048<p32>:word32]
	loc1 = v19
	v19 = 0<32>
	Mem0[0x00140048<p32>:word32] = v19
	v19 = loc1
	v20 = 1<32>
	v19 = v19 & v20
	loc5 = v19
	v19 = loc5
	v21 = v19 == 0<32>
	branch !v21 l0011E315
	// succ:  l0011E2FD l0011E315
l0011E2FD:
	v19 = 0<32>
	Mem0[0x00140048<p32>:word32] = v19
	v19 = 0x1F2<32>
	v20 = 0x4252<32>
	v22 = loc13
	invoke_vii(v19, v20, v22)
	v19 = Mem0[0x00140048<p32>:word32]
	loc6 = v19
	v19 = 0<32>
	Mem0[0x00140048<p32>:word32] = v19
	// succ:  l0011E315
l0011E315:
	v19 = 0<32>
	v19 = ___cxa_find_matching_catch_3(v19)
	loc7 = v19
	v19 = Mem0[0x00140094<p32>:word32]
	loc8 = v19
	v19 = loc7
	v19 = ___cxa_begin_catch(v19)
	v19 = 0<32>
	Mem0[0x00140048<p32>:word32] = v19
	v19 = 0x1F2<32>
	v20 = 0x427A<32>
	v22 = loc14
	invoke_vii(v19, v20, v22)
	v19 = Mem0[0x00140048<p32>:word32]
	loc9 = v19
	v19 = 0<32>
	Mem0[0x00140048<p32>:word32] = v19
	v19 = 0<32>
	v19 = ___cxa_find_matching_catch_3(v19)
	loc10 = v19
	v19 = Mem0[0x00140094<p32>:word32]
	loc11 = v19
	v19 = 0<32>
	Mem0[0x00140048<p32>:word32] = v19
	v19 = 0x16C<32>
	invoke_v(v19)
	v19 = Mem0[0x00140048<p32>:word32]
	loc12 = v19
	v19 = 0<32>
	Mem0[0x00140048<p32>:word32] = v19
	v19 = loc12
	v20 = 1<32>
	v19 = v19 & v20
	loc2 = v19
	v19 = loc2
	branch !v19 l0011E370
	// succ:  l0011E361 l0011E370
l0011E361:
	v19 = 0<32>
	v19 = ___cxa_find_matching_catch_3(v19)
	loc3 = v19
	v19 = Mem0[0x00140094<p32>:word32]
	loc4 = v19
	v19 = loc3
	fn000D0E65(v19)
	goto l0011E374
	// succ:  l0011E374
l0011E370:
	v19 = loc10
	fn000D0E65(v19)
	// succ:  l0011E374
l0011E374:
	// succ:  l0011E375
l0011E375:
	return
	// succ:  fn0011E2BD_exit
fn0011E2BD_exit:


// fn0011E377
// Return size: 0
word32 fn0011E377()
fn0011E377_entry:
	// succ:  l0011E377
l0011E377:
	v8 = Mem0[0x00140030<p32>:word32]
	loc4 = v8
	v8 = 0x2660<32>
	v8 = Mem0[v8:word32]
	loc0 = v8
	v8 = loc0
	v9 = 0<32>
	v8 = v8 + v9
	loc1 = v8
	v8 = 0x2660<32>
	v9 = loc1
	Mem0[v8:word32] = v9
	v8 = loc0
	loc2 = v8
	v8 = loc2
	return v8
	// succ:  fn0011E377_exit
l0011E39D:
	return v8
	// succ:  fn0011E377_exit
fn0011E377_exit:


// fn0011E39F
// Return size: 0
void fn0011E39F(word32 arg0)
fn0011E39F_entry:
	// succ:  l0011E39F
l0011E39F:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	return
	// succ:  fn0011E39F_exit
l0011E3A6:
	return
	// succ:  fn0011E39F_exit
fn0011E39F_exit:


// fn0011E3A8
// Return size: 0
void fn0011E3A8(word32 arg0)
fn0011E3A8_entry:
	// succ:  l0011E3A8
l0011E3A8:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn0011E3A8_exit
l0011E3B4:
	return
	// succ:  fn0011E3A8_exit
fn0011E3A8_exit:


// fn0011E3B6
// Return size: 0
word32 fn0011E3B6(word32 arg0)
fn0011E3B6_entry:
	// succ:  l0011E3B6
l0011E3B6:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = 0x42AC<32>
	return v5
	// succ:  fn0011E3B6_exit
l0011E3C1:
	return v5
	// succ:  fn0011E3B6_exit
fn0011E3B6_exit:


// fn0011E3C3
// Return size: 0
void fn0011E3C3(word32 arg0)
fn0011E3C3_entry:
	// succ:  l0011E3C3
l0011E3C3:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	return
	// succ:  fn0011E3C3_exit
l0011E3CA:
	return
	// succ:  fn0011E3C3_exit
fn0011E3C3_exit:


// fn0011E3CC
// Return size: 0
void fn0011E3CC(word32 arg0)
fn0011E3CC_entry:
	// succ:  l0011E3CC
l0011E3CC:
	v6 = Mem0[0x00140030<p32>:word32]
	loc3 = v6
	v6 = arg0
	v7 = 0x26D4<32>
	Mem0[v6:word32] = v7
	v6 = arg0
	v7 = 4<32>
	v6 = v6 + v7
	loc1 = v6
	v6 = loc1
	fn0011E416(v6)
	return
	// succ:  fn0011E3CC_exit
l0011E3E8:
	return
	// succ:  fn0011E3CC_exit
fn0011E3CC_exit:


// fn0011E3EA
// Return size: 0
void fn0011E3EA(word32 arg0)
fn0011E3EA_entry:
	// succ:  l0011E3EA
l0011E3EA:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011E3CC(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn0011E3EA_exit
l0011E3FB:
	return
	// succ:  fn0011E3EA_exit
fn0011E3EA_exit:


// fn0011E3FD
// Return size: 0
word32 fn0011E3FD(word32 arg0)
fn0011E3FD_entry:
	// succ:  l0011E3FD
l0011E3FD:
	v7 = Mem0[0x00140030<p32>:word32]
	loc4 = v7
	v7 = arg0
	v8 = 4<32>
	v7 = v7 + v8
	loc1 = v7
	v7 = loc1
	v7 = Mem0[v7:word32]
	loc2 = v7
	v7 = loc2
	return v7
	// succ:  fn0011E3FD_exit
l0011E414:
	return v7
	// succ:  fn0011E3FD_exit
fn0011E3FD_exit:


// fn0011E416
// Return size: 0
void fn0011E416(word32 arg0)
fn0011E416_entry:
	// succ:  l0011E416
l0011E416:
	v13 = Mem0[0x00140030<p32>:word32]
	loc10 = v13
	v13 = arg0
	v13 = Mem0[v13:word32]
	loc1 = v13
	v13 = loc1
	v14 = 0xFFFFFFFC<32>
	v13 = v13 + v14
	loc2 = v13
	v13 = loc2
	v13 = Mem0[v13:word32]
	loc3 = v13
	v13 = loc3
	v14 = 0xFFFFFFFF<32>
	v13 = v13 + v14
	loc4 = v13
	v13 = loc2
	v14 = loc4
	Mem0[v13:word32] = v14
	v13 = loc3
	v14 = 0xFFFFFFFF<32>
	v13 = v13 + v14
	loc5 = v13
	v13 = loc5
	v14 = 0<32>
	v15 = v13 < v14
	loc6 = v15
	v13 = loc6
	branch !v13 l0011E465
	// succ:  l0011E451 l0011E465
l0011E451:
	v13 = arg0
	v13 = Mem0[v13:word32]
	loc7 = v13
	v13 = loc7
	v14 = 0xFFFFFFF4<32>
	v13 = v13 + v14
	loc8 = v13
	v13 = loc8
	fn0011B709(v13)
	// succ:  l0011E465
l0011E465:
	return
	// succ:  fn0011E416_exit
l0011E466:
	return
	// succ:  fn0011E416_exit
fn0011E416_exit:


// fn0011E468
// Return size: 0
void fn0011E468(word32 arg0)
fn0011E468_entry:
	// succ:  l0011E468
l0011E468:
	v6 = Mem0[0x00140030<p32>:word32]
	loc3 = v6
	v6 = arg0
	v7 = 0x26E8<32>
	Mem0[v6:word32] = v7
	v6 = arg0
	v7 = 4<32>
	v6 = v6 + v7
	loc1 = v6
	v6 = loc1
	fn0011E416(v6)
	return
	// succ:  fn0011E468_exit
l0011E484:
	return
	// succ:  fn0011E468_exit
fn0011E468_exit:


// fn0011E486
// Return size: 0
void fn0011E486(word32 arg0)
fn0011E486_entry:
	// succ:  l0011E486
l0011E486:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011E468(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn0011E486_exit
l0011E497:
	return
	// succ:  fn0011E486_exit
fn0011E486_exit:


// fn0011E499
// Return size: 0
word32 fn0011E499(word32 arg0)
fn0011E499_entry:
	// succ:  l0011E499
l0011E499:
	v7 = Mem0[0x00140030<p32>:word32]
	loc4 = v7
	v7 = arg0
	v8 = 4<32>
	v7 = v7 + v8
	loc1 = v7
	v7 = loc1
	v7 = Mem0[v7:word32]
	loc2 = v7
	v7 = loc2
	return v7
	// succ:  fn0011E499_exit
l0011E4B0:
	return v7
	// succ:  fn0011E499_exit
fn0011E499_exit:


// fn0011E4B2
// Return size: 0
void fn0011E4B2(word32 arg0)
fn0011E4B2_entry:
	// succ:  l0011E4B2
l0011E4B2:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011E3CC(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn0011E4B2_exit
l0011E4C3:
	return
	// succ:  fn0011E4B2_exit
fn0011E4B2_exit:


// fn0011E4C5
// Return size: 0
void fn0011E4C5(word32 arg0)
fn0011E4C5_entry:
	// succ:  l0011E4C5
l0011E4C5:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	return
	// succ:  fn0011E4C5_exit
l0011E4CC:
	return
	// succ:  fn0011E4C5_exit
fn0011E4C5_exit:


// fn0011E4CE
// Return size: 0
void fn0011E4CE(word32 arg0)
fn0011E4CE_entry:
	// succ:  l0011E4CE
l0011E4CE:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn0011E4CE_exit
l0011E4DA:
	return
	// succ:  fn0011E4CE_exit
fn0011E4CE_exit:


// fn0011E4DC
// Return size: 0
word32 fn0011E4DC(word32 arg0)
fn0011E4DC_entry:
	// succ:  l0011E4DC
l0011E4DC:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = 0x42FB<32>
	return v5
	// succ:  fn0011E4DC_exit
l0011E4E7:
	return v5
	// succ:  fn0011E4DC_exit
fn0011E4DC_exit:


// fn0011E4E9
// Return size: 0
void fn0011E4E9(word32 arg0)
fn0011E4E9_entry:
	// succ:  l0011E4E9
l0011E4E9:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn0011E4E9_exit
l0011E4F5:
	return
	// succ:  fn0011E4E9_exit
fn0011E4E9_exit:


// fn0011E4F7
// Return size: 0
void fn0011E4F7(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn0011E4F7_entry:
	// succ:  l0011E4F7
l0011E4F7:
	v40 = Mem0[0x00140030<p32>:word32]
	loc42 = v40
	v40 = arg1
	v41 = 8<32>
	v40 = v40 + v41
	loc37 = v40
	v40 = loc37
	v40 = Mem0[v40:word32]
	loc38 = v40
	v40 = arg0
	v41 = loc38
	v42 = v40 == v41
	loc39 = v42
	v40 = loc39
	branch !v40 l0011E524
	// succ:  l0011E516 l0011E524
l0011E516:
	v40 = 0<32>
	v41 = arg1
	v43 = arg2
	v44 = arg3
	v45 = arg4
	fn0011DA6B(v40, v41, v43, v44, v45)
	goto l0011E6AE
	// succ:  l0011E6AE
l0011E524:
	v40 = arg1
	v41 = 0x34<32>
	v40 = v40 + v41
	loc40 = v40
	v40 = loc40
	v46 = Mem0[v40:int16]
	v40 = CONVERT(v46, int16, word32)
	loc7 = v40
	v40 = loc7
	v41 = 0xFF<32>
	v40 = v40 & v41
	loc8 = v40
	v40 = arg1
	v41 = 0x35<32>
	v40 = v40 + v41
	loc9 = v40
	v40 = loc7
	v41 = 0xFFFF<32>
	v40 = v40 & v41
	v41 = 8<32>
	v40 = v40 >>u v41
	loc10 = v40
	v40 = loc10
	v41 = 0xFF<32>
	v40 = v40 & v41
	loc11 = v40
	v40 = arg0
	v41 = 0x10<32>
	v40 = v40 + v41
	loc12 = v40
	v40 = arg0
	v41 = 0xC<32>
	v40 = v40 + v41
	loc13 = v40
	v40 = loc13
	v40 = Mem0[v40:word32]
	loc14 = v40
	v40 = arg0
	v41 = 0x10<32>
	v40 = v40 + v41
	v41 = loc14
	v43 = 3<32>
	v41 = v41 << v43
	v40 = v40 + v41
	loc15 = v40
	v40 = loc40
	v41 = 0<32>
	v47 = SLICE(v41, byte, 0)
	Mem0[v40:byte] = v47
	v40 = loc9
	v41 = 0<32>
	v48 = SLICE(v41, byte, 0)
	Mem0[v40:byte] = v48
	v40 = loc12
	v41 = arg1
	v43 = arg2
	v44 = arg3
	v45 = arg4
	v49 = arg5
	fn0011ECEC(v40, v41, v43, v44, v45, v49)
	v40 = loc14
	v41 = 1<32>
	v42 = v40 > v41
	loc16 = v42
	// succ:  l0011E59B
l0011E59B:
	v40 = loc16
	branch !v40 l0011E69F
	// succ:  l0011E5A1 l0011E69F
l0011E5A1:
	v40 = arg0
	v41 = 0x18<32>
	v40 = v40 + v41
	loc17 = v40
	v40 = arg1
	v41 = 0x18<32>
	v40 = v40 + v41
	loc18 = v40
	v40 = arg0
	v41 = 8<32>
	v40 = v40 + v41
	loc19 = v40
	v40 = arg1
	v41 = 0x36<32>
	v40 = v40 + v41
	loc20 = v40
	v40 = loc17
	loc6 = v40
	// succ:  l0011E5C3
l0011E5C3:
	v40 = loc20
	v50 = Mem0[v40:int8]
	v40 = CONVERT(v50, int8, word32)
	loc21 = v40
	v40 = loc21
	v41 = 0x18<32>
	v40 = v40 << v41
	v41 = 0x18<32>
	v40 = v40 >> v41
	v41 = 0<32>
	v42 = v40 == v41
	loc22 = v42
	v40 = loc22
	v42 = v40 == 0<32>
	branch !v42 l0011E5E1
	// succ:  l0011E5DE l0011E5E1
l0011E5DE:
	goto l0011E69F
	// succ:  l0011E69F
l0011E5E1:
	v40 = loc40
	v51 = Mem0[v40:int16]
	v40 = CONVERT(v51, int16, word32)
	loc23 = v40
	v40 = loc23
	v41 = 0xFF<32>
	v40 = v40 & v41
	loc24 = v40
	v40 = loc24
	v41 = 0x18<32>
	v40 = v40 << v41
	v41 = 0x18<32>
	v40 = v40 >> v41
	v41 = 0<32>
	v42 = v40 == v41
	loc25 = v42
	v40 = loc25
	branch !v40 l0011E631
	// succ:  l0011E601 l0011E631
l0011E601:
	v40 = loc23
	v41 = 0xFFFF<32>
	v40 = v40 & v41
	v41 = 0x100<32>
	v42 = v40 < v41
	loc31 = v42
	v40 = loc31
	v42 = v40 == 0<32>
	branch !v42 l0011E630
	// succ:  l0011E613 l0011E630
l0011E613:
	v40 = loc19
	v40 = Mem0[v40:word32]
	loc32 = v40
	v40 = loc32
	v41 = 1<32>
	v40 = v40 & v41
	loc33 = v40
	v40 = loc33
	v41 = 0<32>
	v42 = v40 == v41
	loc34 = v42
	v40 = loc34
	branch !v40 l0011E62F
	// succ:  l0011E62C l0011E62F
l0011E62C:
	goto l0011E69F
	// succ:  l0011E69F
l0011E62F:
	// succ:  l0011E630
l0011E630:
	goto l0011E662
	// succ:  l0011E662
l0011E631:
	v40 = loc18
	v40 = Mem0[v40:word32]
	loc26 = v40
	v40 = loc26
	v41 = 1<32>
	v42 = v40 == v41
	loc27 = v42
	v40 = loc27
	branch !v40 l0011E646
	// succ:  l0011E643 l0011E646
l0011E643:
	goto l0011E69F
	// succ:  l0011E69F
l0011E646:
	v40 = loc19
	v40 = Mem0[v40:word32]
	loc28 = v40
	v40 = loc28
	v41 = 2<32>
	v40 = v40 & v41
	loc29 = v40
	v40 = loc29
	v41 = 0<32>
	v42 = v40 == v41
	loc30 = v42
	v40 = loc30
	branch !v40 l0011E662
	// succ:  l0011E65F l0011E662
l0011E65F:
	goto l0011E69F
	// succ:  l0011E69F
l0011E662:
	// succ:  l0011E662
l0011E662:
	v40 = loc40
	v41 = 0<32>
	v52 = SLICE(v41, byte, 0)
	Mem0[v40:byte] = v52
	v40 = loc9
	v41 = 0<32>
	v53 = SLICE(v41, byte, 0)
	Mem0[v40:byte] = v53
	v40 = loc6
	v41 = arg1
	v43 = arg2
	v44 = arg3
	v45 = arg4
	v49 = arg5
	fn0011ECEC(v40, v41, v43, v44, v45, v49)
	v40 = loc6
	v41 = 8<32>
	v40 = v40 + v41
	loc35 = v40
	v40 = loc35
	v41 = loc15
	v42 = v40 <u v41
	loc36 = v42
	v40 = loc36
	branch !v40 l0011E697
	// succ:  l0011E692 l0011E697
l0011E692:
	v40 = loc35
	loc6 = v40
	goto l0011E699
	// succ:  l0011E699
l0011E697:
	goto l0011E69C
	// succ:  l0011E69C
l0011E699:
	goto l0011E5A1
	// succ:  l0011E5A1
l0011E69C:
	// succ:  l0011E69F
l0011E69F:
	// succ:  l0011E69F
l0011E69F:
	v40 = loc40
	v41 = loc8
	v54 = SLICE(v41, byte, 0)
	Mem0[v40:byte] = v54
	v40 = loc9
	v41 = loc11
	v55 = SLICE(v41, byte, 0)
	Mem0[v40:byte] = v55
	// succ:  l0011E6AE
l0011E6AE:
	return
	// succ:  fn0011E4F7_exit
l0011E6B0:
	return
	// succ:  fn0011E4F7_exit
fn0011E4F7_exit:


// fn0011E6B2
// Return size: 0
void fn0011E6B2(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn0011E6B2_entry:
	// succ:  l0011E6B2
l0011E6B2:
	v108 = Mem0[0x00140030<p32>:word32]
	loc109 = v108
	v108 = arg1
	v109 = 8<32>
	v108 = v108 + v109
	loc54 = v108
	v108 = loc54
	v108 = Mem0[v108:word32]
	loc65 = v108
	v108 = arg0
	v109 = loc65
	v110 = v108 == v109
	loc76 = v110
	// succ:  l0011E6CD
l0011E6CD:
	v108 = loc76
	branch !v108 l0011E710
	// succ:  l0011E6D3 l0011E710
l0011E6D3:
	v108 = arg1
	v109 = 4<32>
	v108 = v108 + v109
	loc87 = v108
	v108 = loc87
	v108 = Mem0[v108:word32]
	loc98 = v108
	v108 = loc98
	v109 = arg2
	v110 = v108 == v109
	loc14 = v110
	v108 = loc14
	branch !v108 l0011E70F
	// succ:  l0011E6EC l0011E70F
l0011E6EC:
	v108 = arg1
	v109 = 0x1C<32>
	v108 = v108 + v109
	loc15 = v108
	v108 = loc15
	v108 = Mem0[v108:word32]
	loc16 = v108
	v108 = loc16
	v109 = 1<32>
	v110 = v108 == v109
	loc17 = v110
	v108 = loc17
	v110 = v108 == 0<32>
	branch !v110 l0011E70E
	// succ:  l0011E706 l0011E70E
l0011E706:
	v108 = loc15
	v109 = arg3
	Mem0[v108:word32] = v109
	// succ:  l0011E70E
l0011E70E:
	// succ:  l0011E70F
l0011E70F:
	goto l0011EB7F
	// succ:  l0011EB7F
l0011E710:
	v108 = arg1
	v108 = Mem0[v108:word32]
	loc18 = v108
	v108 = arg0
	v109 = loc18
	v110 = v108 == v109
	loc19 = v110
	v108 = loc19
	v110 = v108 == 0<32>
	branch !v110 l0011E8F5
	// succ:  l0011E723 l0011E8F5
l0011E723:
	v108 = arg0
	v109 = 0x10<32>
	v108 = v108 + v109
	loc68 = v108
	v108 = arg0
	v109 = 0xC<32>
	v108 = v108 + v109
	loc69 = v108
	v108 = loc69
	v108 = Mem0[v108:word32]
	loc70 = v108
	v108 = arg0
	v109 = 0x10<32>
	v108 = v108 + v109
	v109 = loc70
	v111 = 3<32>
	v109 = v109 << v111
	v108 = v108 + v109
	loc71 = v108
	v108 = loc68
	v109 = arg1
	v111 = arg2
	v112 = arg3
	v113 = arg4
	fn0011ED91(v108, v109, v111, v112, v113)
	v108 = arg0
	v109 = 0x18<32>
	v108 = v108 + v109
	loc72 = v108
	v108 = loc70
	v109 = 1<32>
	v110 = v108 > v109
	loc73 = v110
	v108 = loc73
	v110 = v108 == 0<32>
	branch !v110 l0011E768
	// succ:  l0011E765 l0011E768
l0011E765:
	goto l0011EB80
	// succ:  l0011EB80
l0011E768:
	v108 = arg0
	v109 = 8<32>
	v108 = v108 + v109
	loc74 = v108
	v108 = loc74
	v108 = Mem0[v108:word32]
	loc75 = v108
	v108 = loc75
	v109 = 2<32>
	v108 = v108 & v109
	loc77 = v108
	v108 = loc77
	v109 = 0<32>
	v110 = v108 == v109
	loc78 = v110
	v108 = loc78
	branch !v108 l0011E8A1
	// succ:  l0011E788 l0011E8A1
l0011E788:
	v108 = arg1
	v109 = 0x24<32>
	v108 = v108 + v109
	loc79 = v108
	v108 = loc79
	v108 = Mem0[v108:word32]
	loc80 = v108
	v108 = loc80
	v109 = 1<32>
	v110 = v108 == v109
	loc81 = v110
	v108 = loc81
	v110 = v108 == 0<32>
	branch !v110 l0011E8A0
	// succ:  l0011E7A2 l0011E8A0
l0011E7A2:
	v108 = loc75
	v109 = 1<32>
	v108 = v108 & v109
	loc88 = v108
	v108 = loc88
	v109 = 0<32>
	v110 = v108 == v109
	loc89 = v110
	v108 = loc89
	branch !v108 l0011E81D
	// succ:  l0011E7B4 l0011E81D
l0011E7B4:
	v108 = arg1
	v109 = 0x36<32>
	v108 = v108 + v109
	loc92 = v108
	v108 = loc72
	loc12 = v108
	v108 = loc92
	v114 = Mem0[v108:int8]
	v108 = CONVERT(v114, int8, word32)
	loc102 = v108
	v108 = loc102
	v109 = 0x18<32>
	v108 = v108 << v109
	v109 = 0x18<32>
	v108 = v108 >> v109
	v109 = 0<32>
	v110 = v108 == v109
	loc103 = v110
	v108 = loc103
	v110 = v108 == 0<32>
	branch !v110 l0011E7DD
	// succ:  l0011E7DA l0011E7DD
l0011E7DA:
	goto l0011EB80
	// succ:  l0011EB80
l0011E7DD:
	v108 = loc79
	v108 = Mem0[v108:word32]
	loc104 = v108
	v108 = loc104
	v109 = 1<32>
	v110 = v108 == v109
	loc105 = v110
	v108 = loc105
	branch !v108 l0011E7F2
	// succ:  l0011E7EF l0011E7F2
l0011E7EF:
	goto l0011EB80
	// succ:  l0011EB80
l0011E7F2:
	v108 = loc12
	v109 = arg1
	v111 = arg2
	v112 = arg3
	v113 = arg4
	fn0011ED91(v108, v109, v111, v112, v113)
	v108 = loc12
	v109 = 8<32>
	v108 = v108 + v109
	loc106 = v108
	v108 = loc106
	v109 = loc71
	v110 = v108 <u v109
	loc107 = v110
	v108 = loc107
	branch !v108 l0011E816
	// succ:  l0011E811 l0011E816
l0011E811:
	v108 = loc106
	loc12 = v108
	goto l0011E818
	// succ:  l0011E818
l0011E816:
	goto l0011EB80
	// succ:  l0011EB80
l0011E818:
	goto l0011E7B4
	// succ:  l0011E7B4
l0011E81D:
	v108 = arg1
	v109 = 0x18<32>
	v108 = v108 + v109
	loc90 = v108
	v108 = arg1
	v109 = 0x36<32>
	v108 = v108 + v109
	loc91 = v108
	v108 = loc72
	loc9 = v108
	v108 = loc91
	v115 = Mem0[v108:int8]
	v108 = CONVERT(v115, int8, word32)
	loc93 = v108
	v108 = loc93
	v109 = 0x18<32>
	v108 = v108 << v109
	v109 = 0x18<32>
	v108 = v108 >> v109
	v109 = 0<32>
	v110 = v108 == v109
	loc94 = v110
	v108 = loc94
	v110 = v108 == 0<32>
	branch !v110 l0011E84D
	// succ:  l0011E84A l0011E84D
l0011E84A:
	goto l0011EB80
	// succ:  l0011EB80
l0011E84D:
	v108 = loc79
	v108 = Mem0[v108:word32]
	loc95 = v108
	v108 = loc95
	v109 = 1<32>
	v110 = v108 == v109
	loc96 = v110
	v108 = loc96
	branch !v108 l0011E875
	// succ:  l0011E85F l0011E875
l0011E85F:
	v108 = loc90
	v108 = Mem0[v108:word32]
	loc97 = v108
	v108 = loc97
	v109 = 1<32>
	v110 = v108 == v109
	loc99 = v110
	v108 = loc99
	branch !v108 l0011E874
	// succ:  l0011E871 l0011E874
l0011E871:
	goto l0011EB80
	// succ:  l0011EB80
l0011E874:
	// succ:  l0011E875
l0011E875:
	v108 = loc9
	v109 = arg1
	v111 = arg2
	v112 = arg3
	v113 = arg4
	fn0011ED91(v108, v109, v111, v112, v113)
	v108 = loc9
	v109 = 8<32>
	v108 = v108 + v109
	loc100 = v108
	v108 = loc100
	v109 = loc71
	v110 = v108 <u v109
	loc101 = v110
	v108 = loc101
	branch !v108 l0011E899
	// succ:  l0011E894 l0011E899
l0011E894:
	v108 = loc100
	loc9 = v108
	goto l0011E89B
	// succ:  l0011E89B
l0011E899:
	goto l0011EB80
	// succ:  l0011EB80
l0011E89B:
	goto l0011E81D
	// succ:  l0011E81D
l0011E8A0:
	// succ:  l0011E8A1
l0011E8A1:
	v108 = arg1
	v109 = 0x36<32>
	v108 = v108 + v109
	loc82 = v108
	v108 = loc72
	loc5 = v108
	v108 = loc82
	v116 = Mem0[v108:int8]
	v108 = CONVERT(v116, int8, word32)
	loc83 = v108
	v108 = loc83
	v109 = 0x18<32>
	v108 = v108 << v109
	v109 = 0x18<32>
	v108 = v108 >> v109
	v109 = 0<32>
	v110 = v108 == v109
	loc84 = v110
	v108 = loc84
	v110 = v108 == 0<32>
	branch !v110 l0011E8CA
	// succ:  l0011E8C7 l0011E8CA
l0011E8C7:
	goto l0011EB80
	// succ:  l0011EB80
l0011E8CA:
	v108 = loc5
	v109 = arg1
	v111 = arg2
	v112 = arg3
	v113 = arg4
	fn0011ED91(v108, v109, v111, v112, v113)
	v108 = loc5
	v109 = 8<32>
	v108 = v108 + v109
	loc85 = v108
	v108 = loc85
	v109 = loc71
	v110 = v108 <u v109
	loc86 = v110
	v108 = loc86
	branch !v108 l0011E8EE
	// succ:  l0011E8E9 l0011E8EE
l0011E8E9:
	v108 = loc85
	loc5 = v108
	goto l0011E8F0
	// succ:  l0011E8F0
l0011E8EE:
	goto l0011EB80
	// succ:  l0011EB80
l0011E8F0:
	goto l0011E8A1
	// succ:  l0011E8A1
l0011E8F5:
	v108 = arg1
	v109 = 0x10<32>
	v108 = v108 + v109
	loc20 = v108
	v108 = loc20
	v108 = Mem0[v108:word32]
	loc21 = v108
	v108 = loc21
	v109 = arg2
	v110 = v108 == v109
	loc22 = v110
	v108 = loc22
	v110 = v108 == 0<32>
	branch !v110 l0011EB65
	// succ:  l0011E90F l0011EB65
l0011E90F:
	v108 = arg1
	v109 = 0x14<32>
	v108 = v108 + v109
	loc23 = v108
	v108 = loc23
	v108 = Mem0[v108:word32]
	loc24 = v108
	v108 = loc24
	v109 = arg2
	v110 = v108 == v109
	loc25 = v110
	v108 = loc25
	v110 = v108 == 0<32>
	branch !v110 l0011EB64
	// succ:  l0011E929 l0011EB64
l0011E929:
	v108 = arg1
	v109 = 0x20<32>
	v108 = v108 + v109
	loc28 = v108
	v108 = loc28
	v109 = arg3
	Mem0[v108:word32] = v109
	v108 = arg1
	v109 = 0x2C<32>
	v108 = v108 + v109
	loc29 = v108
	v108 = loc29
	v108 = Mem0[v108:word32]
	loc30 = v108
	v108 = loc30
	v109 = 4<32>
	v110 = v108 == v109
	loc31 = v110
	v108 = loc31
	branch !v108 l0011E953
	// succ:  l0011E950 l0011E953
l0011E950:
	goto l0011EB80
	// succ:  l0011EB80
l0011E953:
	v108 = arg0
	v109 = 0x10<32>
	v108 = v108 + v109
	loc32 = v108
	v108 = arg0
	v109 = 0xC<32>
	v108 = v108 + v109
	loc33 = v108
	v108 = loc33
	v108 = Mem0[v108:word32]
	loc34 = v108
	v108 = arg0
	v109 = 0x10<32>
	v108 = v108 + v109
	v109 = loc34
	v111 = 3<32>
	v109 = v109 << v111
	v108 = v108 + v109
	loc35 = v108
	v108 = arg1
	v109 = 0x34<32>
	v108 = v108 + v109
	loc36 = v108
	v108 = arg1
	v109 = 0x35<32>
	v108 = v108 + v109
	loc37 = v108
	v108 = arg1
	v109 = 0x36<32>
	v108 = v108 + v109
	loc38 = v108
	v108 = arg0
	v109 = 8<32>
	v108 = v108 + v109
	loc39 = v108
	v108 = arg1
	v109 = 0x18<32>
	v108 = v108 + v109
	loc40 = v108
	v108 = 0<32>
	loc6 = v108
	v108 = loc32
	loc7 = v108
	v108 = 0<32>
	loc8 = v108
	// succ:  l0011E9A6
l0011E9A6:
	v108 = loc7
	v109 = loc35
	v110 = v108 <u v109
	loc41 = v110
	v108 = loc41
	v110 = v108 == 0<32>
	branch !v110 l0011E9BF
	// succ:  l0011E9B4 l0011E9BF
l0011E9B4:
	v108 = loc6
	loc13 = v108
	v108 = 0x14<32>
	loc108 = v108
	goto l0011EAC4
	// succ:  l0011EAC4
l0011E9BF:
	v108 = loc36
	v109 = 0<32>
	v117 = SLICE(v109, byte, 0)
	Mem0[v108:byte] = v117
	v108 = loc37
	v109 = 0<32>
	v118 = SLICE(v109, byte, 0)
	Mem0[v108:byte] = v118
	v108 = loc7
	v109 = arg1
	v111 = arg2
	v112 = arg2
	v113 = 1<32>
	v119 = arg4
	fn0011ECEC(v108, v109, v111, v112, v113, v119)
	v108 = loc38
	v120 = Mem0[v108:int8]
	v108 = CONVERT(v120, int8, word32)
	loc42 = v108
	v108 = loc42
	v109 = 0x18<32>
	v108 = v108 << v109
	v109 = 0x18<32>
	v108 = v108 >> v109
	v109 = 0<32>
	v110 = v108 == v109
	loc43 = v110
	v108 = loc43
	v110 = v108 == 0<32>
	branch !v110 l0011EA00
	// succ:  l0011E9F5 l0011EA00
l0011E9F5:
	v108 = loc6
	loc13 = v108
	v108 = 0x14<32>
	loc108 = v108
	goto l0011EAC4
	// succ:  l0011EAC4
l0011EA00:
	v108 = loc37
	v121 = Mem0[v108:int8]
	v108 = CONVERT(v121, int8, word32)
	loc44 = v108
	v108 = loc44
	v109 = 0x18<32>
	v108 = v108 << v109
	v109 = 0x18<32>
	v108 = v108 >> v109
	v109 = 0<32>
	v110 = v108 == v109
	loc45 = v110
	// succ:  l0011EA14
l0011EA14:
	v108 = loc45
	branch !v108 l0011EA23
	// succ:  l0011EA1A l0011EA23
l0011EA1A:
	v108 = loc6
	loc10 = v108
	v108 = loc8
	loc11 = v108
	goto l0011EAAD
	// succ:  l0011EAAD
l0011EA23:
	v108 = loc36
	v122 = Mem0[v108:int8]
	v108 = CONVERT(v122, int8, word32)
	loc46 = v108
	v108 = loc46
	v109 = 0x18<32>
	v108 = v108 << v109
	v109 = 0x18<32>
	v108 = v108 >> v109
	v109 = 0<32>
	v110 = v108 == v109
	loc47 = v110
	v108 = loc47
	branch !v108 l0011EA6B
	// succ:  l0011EA3B l0011EA6B
l0011EA3B:
	v108 = loc39
	v108 = Mem0[v108:word32]
	loc53 = v108
	v108 = loc53
	v109 = 1<32>
	v108 = v108 & v109
	loc55 = v108
	v108 = loc55
	v109 = 0<32>
	v110 = v108 == v109
	loc56 = v110
	v108 = loc56
	branch !v108 l0011EA5F
	// succ:  l0011EA54 l0011EA5F
l0011EA54:
	v108 = 1<32>
	loc13 = v108
	v108 = 0x14<32>
	loc108 = v108
	goto l0011EAC4
	// succ:  l0011EAC4
l0011EA5F:
	v108 = 1<32>
	loc10 = v108
	v108 = loc8
	loc11 = v108
	goto l0011EAAE
	// succ:  l0011EAAE
l0011EA69:
	// succ:  l0011EA6B
l0011EA6B:
	v108 = loc40
	v108 = Mem0[v108:word32]
	loc48 = v108
	v108 = loc48
	v109 = 1<32>
	v110 = v108 == v109
	loc49 = v110
	v108 = loc49
	branch !v108 l0011EA84
	// succ:  l0011EA7D l0011EA84
l0011EA7D:
	v108 = 0x19<32>
	loc108 = v108
	goto l0011EAC4
	// succ:  l0011EAC4
l0011EA84:
	v108 = loc39
	v108 = Mem0[v108:word32]
	loc50 = v108
	v108 = loc50
	v109 = 2<32>
	v108 = v108 & v109
	loc51 = v108
	v108 = loc51
	v109 = 0<32>
	v110 = v108 == v109
	loc52 = v110
	v108 = loc52
	branch !v108 l0011EAA4
	// succ:  l0011EA9D l0011EAA4
l0011EA9D:
	v108 = 0x19<32>
	loc108 = v108
	goto l0011EAC4
	// succ:  l0011EAC4
l0011EAA4:
	v108 = 1<32>
	loc10 = v108
	v108 = 1<32>
	loc11 = v108
	// succ:  l0011EAAC
l0011EAAC:
	// succ:  l0011EAAD
l0011EAAD:
	// succ:  l0011EAAE
l0011EAAE:
	v108 = loc7
	v109 = 8<32>
	v108 = v108 + v109
	loc57 = v108
	v108 = loc10
	loc6 = v108
	v108 = loc57
	loc7 = v108
	v108 = loc11
	loc8 = v108
	goto l0011E953
	// succ:  l0011E953
l0011EAC4:
	v108 = loc108
	v109 = 0x14<32>
	v110 = v108 == v109
	branch !v110 l0011EB4D
	// succ:  l0011EACF l0011EB4D
l0011EACF:
	v108 = loc8
	v110 = v108 == 0<32>
	branch !v110 l0011EB3E
	// succ:  l0011EAD4 l0011EB3E
l0011EAD4:
	v108 = loc23
	v109 = arg2
	Mem0[v108:word32] = v109
	v108 = arg1
	v109 = 0x28<32>
	v108 = v108 + v109
	loc58 = v108
	v108 = loc58
	v108 = Mem0[v108:word32]
	loc59 = v108
	v108 = loc59
	v109 = 1<32>
	v108 = v108 + v109
	loc60 = v108
	v108 = loc58
	v109 = loc60
	Mem0[v108:word32] = v109
	v108 = arg1
	v109 = 0x24<32>
	v108 = v108 + v109
	loc61 = v108
	v108 = loc61
	v108 = Mem0[v108:word32]
	loc62 = v108
	v108 = loc62
	v109 = 1<32>
	v110 = v108 == v109
	loc63 = v110
	v108 = loc63
	branch !v108 l0011EB3D
	// succ:  l0011EB10 l0011EB3D
l0011EB10:
	v108 = loc40
	v108 = Mem0[v108:word32]
	loc64 = v108
	v108 = loc64
	v109 = 2<32>
	v110 = v108 == v109
	loc66 = v110
	v108 = loc66
	branch !v108 l0011EB3C
	// succ:  l0011EB22 l0011EB3C
l0011EB22:
	v108 = loc38
	v109 = 1<32>
	v123 = SLICE(v109, byte, 0)
	Mem0[v108:byte] = v123
	v108 = loc13
	branch !v108 l0011EB34
	// succ:  l0011EB2D l0011EB34
l0011EB2D:
	v108 = 0x19<32>
	loc108 = v108
	goto l0011EB4D
	// succ:  l0011EB4D
l0011EB34:
	v108 = 4<32>
	loc67 = v108
	goto l0011EB4D
	// succ:  l0011EB4D
l0011EB3A:
	// succ:  l0011EB3C
l0011EB3C:
	// succ:  l0011EB3D
l0011EB3D:
	// succ:  l0011EB3E
l0011EB3E:
	v108 = loc13
	branch !v108 l0011EB47
	// succ:  l0011EB42 l0011EB47
l0011EB42:
	v108 = 0x19<32>
	loc108 = v108
	goto l0011EB4B
	// succ:  l0011EB4B
l0011EB47:
	v108 = 4<32>
	loc67 = v108
	// succ:  l0011EB4B
l0011EB4B:
	// succ:  l0011EB4D
l0011EB4D:
	// succ:  l0011EB4D
l0011EB4D:
	v108 = loc108
	v109 = 0x19<32>
	v110 = v108 == v109
	branch !v110 l0011EB5A
	// succ:  l0011EB55 l0011EB5A
l0011EB55:
	v108 = 3<32>
	loc67 = v108
	// succ:  l0011EB5A
l0011EB5A:
	v108 = loc29
	v109 = loc67
	Mem0[v108:word32] = v109
	goto l0011EB80
	// succ:  l0011EB80
l0011EB64:
	// succ:  l0011EB65
l0011EB65:
	v108 = arg3
	v109 = 1<32>
	v110 = v108 == v109
	loc26 = v110
	v108 = loc26
	branch !v108 l0011EB7F
	// succ:  l0011EB70 l0011EB7F
l0011EB70:
	v108 = arg1
	v109 = 0x20<32>
	v108 = v108 + v109
	loc27 = v108
	v108 = loc27
	v109 = 1<32>
	Mem0[v108:word32] = v109
	// succ:  l0011EB7F
l0011EB7F:
	// succ:  l0011EB7F
l0011EB7F:
	// succ:  l0011EB80
l0011EB80:
	return
	// succ:  fn0011E6B2_exit
l0011EB82:
	return
	// succ:  fn0011E6B2_exit
fn0011E6B2_exit:


// fn0011EB84
// Return size: 0
void fn0011EB84(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn0011EB84_entry:
	// succ:  l0011EB84
l0011EB84:
	v20 = Mem0[0x00140030<p32>:word32]
	loc20 = v20
	v20 = arg1
	v21 = 8<32>
	v20 = v20 + v21
	loc13 = v20
	v20 = loc13
	v20 = Mem0[v20:word32]
	loc14 = v20
	v20 = arg0
	v21 = loc14
	v22 = v20 == v21
	loc15 = v22
	// succ:  l0011EB9F
l0011EB9F:
	v20 = loc15
	branch !v20 l0011EBB1
	// succ:  l0011EBA5 l0011EBB1
l0011EBA5:
	v20 = 0<32>
	v21 = arg1
	v23 = arg2
	v24 = arg3
	fn0011D9B9(v20, v21, v23, v24)
	goto l0011EC45
	// succ:  l0011EC45
l0011EBB1:
	v20 = arg0
	v21 = 0x10<32>
	v20 = v20 + v21
	loc16 = v20
	v20 = arg0
	v21 = 0xC<32>
	v20 = v20 + v21
	loc17 = v20
	v20 = loc17
	v20 = Mem0[v20:word32]
	loc18 = v20
	v20 = arg0
	v21 = 0x10<32>
	v20 = v20 + v21
	v21 = loc18
	v23 = 3<32>
	v21 = v21 << v23
	v20 = v20 + v21
	loc5 = v20
	v20 = loc16
	v21 = arg1
	v23 = arg2
	v24 = arg3
	fn0011EC4A(v20, v21, v23, v24)
	v20 = loc18
	v21 = 1<32>
	v22 = v20 > v21
	loc6 = v22
	v20 = loc6
	branch !v20 l0011EC45
	// succ:  l0011EBE9 l0011EC45
l0011EBE9:
	v20 = arg0
	v21 = 0x18<32>
	v20 = v20 + v21
	loc7 = v20
	v20 = arg1
	v21 = 0x36<32>
	v20 = v20 + v21
	loc8 = v20
	v20 = loc7
	loc4 = v20
	// succ:  l0011EBFD
l0011EBFD:
	v20 = loc4
	v21 = arg1
	v23 = arg2
	v24 = arg3
	fn0011EC4A(v20, v21, v23, v24)
	v20 = loc8
	v25 = Mem0[v20:int8]
	v20 = CONVERT(v25, int8, word32)
	loc9 = v20
	v20 = loc9
	v21 = 0x18<32>
	v20 = v20 << v21
	v21 = 0x18<32>
	v20 = v20 >> v21
	v21 = 0<32>
	v22 = v20 == v21
	loc10 = v22
	v20 = loc10
	v22 = v20 == 0<32>
	branch !v22 l0011EC26
	// succ:  l0011EC23 l0011EC26
l0011EC23:
	goto l0011EC46
	// succ:  l0011EC46
l0011EC26:
	v20 = loc4
	v21 = 8<32>
	v20 = v20 + v21
	loc11 = v20
	v20 = loc11
	v21 = loc5
	v22 = v20 <u v21
	loc12 = v22
	v20 = loc12
	branch !v20 l0011EC3D
	// succ:  l0011EC38 l0011EC3D
l0011EC38:
	v20 = loc11
	loc4 = v20
	goto l0011EC3F
	// succ:  l0011EC3F
l0011EC3D:
	goto l0011EC42
	// succ:  l0011EC42
l0011EC3F:
	goto l0011EBE9
	// succ:  l0011EBE9
l0011EC42:
	// succ:  l0011EC45
l0011EC45:
	// succ:  l0011EC45
l0011EC45:
	// succ:  l0011EC46
l0011EC46:
	return
	// succ:  fn0011EB84_exit
l0011EC48:
	return
	// succ:  fn0011EB84_exit
fn0011EB84_exit:


// fn0011EC4A
// Return size: 0
void fn0011EC4A(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn0011EC4A_entry:
	// succ:  l0011EC4A
l0011EC4A:
	v22 = Mem0[0x00140030<p32>:word32]
	loc22 = v22
	v22 = arg0
	v23 = 4<32>
	v22 = v22 + v23
	loc15 = v22
	v22 = loc15
	v22 = Mem0[v22:word32]
	loc16 = v22
	v22 = loc16
	v23 = 8<32>
	v22 = v22 >> v23
	loc17 = v22
	v22 = loc16
	v23 = 1<32>
	v22 = v22 & v23
	loc18 = v22
	v22 = loc18
	v23 = 0<32>
	v24 = v22 == v23
	loc19 = v24
	v22 = loc19
	branch !v22 l0011EC7C
	// succ:  l0011EC77 l0011EC7C
l0011EC77:
	v22 = loc17
	loc4 = v22
	goto l0011EC95
	// succ:  l0011EC95
l0011EC7C:
	v22 = arg2
	v22 = Mem0[v22:word32]
	loc20 = v22
	v22 = loc20
	v23 = loc17
	v22 = v22 + v23
	loc5 = v22
	v22 = loc5
	v22 = Mem0[v22:word32]
	loc6 = v22
	v22 = loc6
	loc4 = v22
	// succ:  l0011EC95
l0011EC95:
	v22 = arg0
	v22 = Mem0[v22:word32]
	loc7 = v22
	v22 = loc7
	v22 = Mem0[v22:word32]
	loc8 = v22
	v22 = loc8
	v23 = 0x1C<32>
	v22 = v22 + v23
	loc9 = v22
	v22 = loc9
	v22 = Mem0[v22:word32]
	loc10 = v22
	v22 = arg2
	v23 = loc4
	v22 = v22 + v23
	loc11 = v22
	v22 = loc16
	v23 = 2<32>
	v22 = v22 & v23
	loc12 = v22
	v22 = loc12
	v23 = 0<32>
	v24 = v22 != v23
	loc13 = v24
	v22 = loc13
	branch !v22 l0011ECCE
	// succ:  l0011ECCB l0011ECCE
l0011ECCB:
	v22 = arg3
	goto l0011ECD0
	// succ:  l0011ECD0
l0011ECCE:
	v22 = 2<32>
	// succ:  l0011ECD0
l0011ECD0:
	loc14 = v22
	v22 = loc7
	v23 = arg1
	v25 = loc11
	v26 = loc14
	v27 = loc10
	v28 = 0x1FF<32>
	v27 = v27 & v28
	v28 = 0x2F20<32>
	v27 = v27 + v28
fn0011EC4A_exit:


// fn0011ECEC
// Return size: 0
void fn0011ECEC(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn0011ECEC_entry:
	// succ:  l0011ECEC
l0011ECEC:
	v22 = Mem0[0x00140030<p32>:word32]
	loc24 = v22
	v22 = arg0
	v23 = 4<32>
	v22 = v22 + v23
	loc19 = v22
	v22 = loc19
	v22 = Mem0[v22:word32]
	loc20 = v22
	v22 = loc20
	v23 = 8<32>
	v22 = v22 >> v23
	loc21 = v22
	v22 = loc20
	v23 = 1<32>
	v22 = v22 & v23
	loc22 = v22
	v22 = loc22
	v23 = 0<32>
	v24 = v22 == v23
	loc7 = v24
	v22 = loc7
	branch !v22 l0011ED1E
	// succ:  l0011ED19 l0011ED1E
l0011ED19:
	v22 = loc21
	loc6 = v22
	goto l0011ED37
	// succ:  l0011ED37
l0011ED1E:
	v22 = arg3
	v22 = Mem0[v22:word32]
	loc8 = v22
	v22 = loc8
	v23 = loc21
	v22 = v22 + v23
	loc9 = v22
	v22 = loc9
	v22 = Mem0[v22:word32]
	loc10 = v22
	v22 = loc10
	loc6 = v22
	// succ:  l0011ED37
l0011ED37:
	v22 = arg0
	v22 = Mem0[v22:word32]
	loc11 = v22
	v22 = loc11
	v22 = Mem0[v22:word32]
	loc12 = v22
	v22 = loc12
	v23 = 0x14<32>
	v22 = v22 + v23
	loc13 = v22
	v22 = loc13
	v22 = Mem0[v22:word32]
	loc14 = v22
	v22 = arg3
	v23 = loc6
	v22 = v22 + v23
	loc15 = v22
	v22 = loc20
	v23 = 2<32>
	v22 = v22 & v23
	loc16 = v22
	v22 = loc16
	v23 = 0<32>
	v24 = v22 != v23
	loc17 = v24
	v22 = loc17
	branch !v22 l0011ED70
	// succ:  l0011ED6D l0011ED70
l0011ED6D:
	v22 = arg4
	goto l0011ED72
	// succ:  l0011ED72
l0011ED70:
	v22 = 2<32>
	// succ:  l0011ED72
l0011ED72:
	loc18 = v22
	v22 = loc11
	v23 = arg1
	v25 = arg2
	v26 = loc15
	v27 = loc18
	v28 = arg5
	v29 = loc14
	v30 = 0x1FF<32>
	v29 = v29 & v30
	v30 = 0x1320<32>
	v29 = v29 + v30
fn0011ECEC_exit:


// fn0011ED91
// Return size: 0
void fn0011ED91(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn0011ED91_entry:
	// succ:  l0011ED91
l0011ED91:
	v22 = Mem0[0x00140030<p32>:word32]
	loc23 = v22
	v22 = arg0
	v23 = 4<32>
	v22 = v22 + v23
	loc17 = v22
	v22 = loc17
	v22 = Mem0[v22:word32]
	loc18 = v22
	v22 = loc18
	v23 = 8<32>
	v22 = v22 >> v23
	loc19 = v22
	v22 = loc18
	v23 = 1<32>
	v22 = v22 & v23
	loc20 = v22
	v22 = loc20
	v23 = 0<32>
	v24 = v22 == v23
	loc21 = v24
	v22 = loc21
	branch !v22 l0011EDC3
	// succ:  l0011EDBE l0011EDC3
l0011EDBE:
	v22 = loc19
	loc5 = v22
	goto l0011EDDC
	// succ:  l0011EDDC
l0011EDC3:
	v22 = arg2
	v22 = Mem0[v22:word32]
	loc6 = v22
	v22 = loc6
	v23 = loc19
	v22 = v22 + v23
	loc7 = v22
	v22 = loc7
	v22 = Mem0[v22:word32]
	loc8 = v22
	v22 = loc8
	loc5 = v22
	// succ:  l0011EDDC
l0011EDDC:
	v22 = arg0
	v22 = Mem0[v22:word32]
	loc9 = v22
	v22 = loc9
	v22 = Mem0[v22:word32]
	loc10 = v22
	v22 = loc10
	v23 = 0x18<32>
	v22 = v22 + v23
	loc11 = v22
	v22 = loc11
	v22 = Mem0[v22:word32]
	loc12 = v22
	v22 = arg2
	v23 = loc5
	v22 = v22 + v23
	loc13 = v22
	v22 = loc18
	v23 = 2<32>
	v22 = v22 & v23
	loc14 = v22
	v22 = loc14
	v23 = 0<32>
	v24 = v22 != v23
	loc15 = v24
	v22 = loc15
	branch !v22 l0011EE15
	// succ:  l0011EE12 l0011EE15
l0011EE12:
	v22 = arg3
	goto l0011EE17
	// succ:  l0011EE17
l0011EE15:
	v22 = 2<32>
	// succ:  l0011EE17
l0011EE17:
	loc16 = v22
	v22 = loc9
	v23 = arg1
	v25 = loc13
	v26 = loc16
	v27 = arg4
	v28 = loc12
	v29 = 0x1FF<32>
	v28 = v28 & v29
	v29 = 0x200<32>
	v28 = v28 + v29
fn0011ED91_exit:


// fn0011EE34
// Return size: 0
void fn0011EE34(word32 arg0)
fn0011EE34_entry:
	// succ:  l0011EE34
l0011EE34:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	v6 = 0x2710<32>
	Mem0[v5:word32] = v6
	return
	// succ:  fn0011EE34_exit
l0011EE44:
	return
	// succ:  fn0011EE34_exit
fn0011EE34_exit:


// fn0011EE46
// Return size: 0
word32 fn0011EE46(word32 arg0)
fn0011EE46_entry:
	// succ:  l0011EE46
l0011EE46:
	v8 = Mem0[0x00140030<p32>:word32]
	loc5 = v8
	v8 = arg0
	v9 = Mem0[v8:int8]
	v8 = CONVERT(v9, int8, word32)
	loc2 = v8
	v8 = loc2
	v10 = 0x18<32>
	v8 = v8 << v10
	v10 = 0x18<32>
	v8 = v8 >> v10
	v10 = 1<32>
	v11 = v8 == v10
	loc3 = v11
	v8 = loc3
	branch !v8 l0011EE69
	// succ:  l0011EE64 l0011EE69
l0011EE64:
	v8 = 0<32>
	loc1 = v8
	goto l0011EE74
	// succ:  l0011EE74
l0011EE69:
	v8 = arg0
	v10 = 1<32>
	v12 = SLICE(v10, byte, 0)
	Mem0[v8:byte] = v12
	v8 = 1<32>
	loc1 = v8
	// succ:  l0011EE74
l0011EE74:
	v8 = loc1
	return v8
	// succ:  fn0011EE46_exit
l0011EE78:
	return v8
	// succ:  fn0011EE46_exit
fn0011EE46_exit:


// fn0011EE7A
// Return size: 0
void fn0011EE7A(word32 arg0)
fn0011EE7A_entry:
	// succ:  l0011EE7A
l0011EE7A:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	return
	// succ:  fn0011EE7A_exit
l0011EE81:
	return
	// succ:  fn0011EE7A_exit
fn0011EE7A_exit:


// fn0011EE83
// Return size: 0
void fn0011EE83(word32 arg0)
fn0011EE83_entry:
	// succ:  l0011EE83
l0011EE83:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	return
	// succ:  fn0011EE83_exit
l0011EE8A:
	return
	// succ:  fn0011EE83_exit
fn0011EE83_exit:


// fn0011EE8C
// Return size: 0
void fn0011EE8C(word32 arg0)
fn0011EE8C_entry:
	// succ:  l0011EE8C
l0011EE8C:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v5 = arg0
	v6 = 0x26C0<32>
	Mem0[v5:word32] = v6
	return
	// succ:  fn0011EE8C_exit
l0011EE9C:
	return
	// succ:  fn0011EE8C_exit
fn0011EE8C_exit:


// fn0011EE9E
// Return size: 0
word32 fn0011EE9E()
fn0011EE9E_entry:
	// succ:  l0011EE9E
l0011EE9E:
	v8 = Mem0[0x00140030<p32>:word32]
	loc4 = v8
	v8 = 0x53F4<32>
	v8 = Mem0[v8:word32]
	loc0 = v8
	v8 = loc0
	v9 = 0<32>
	v8 = v8 + v9
	loc1 = v8
	v8 = 0x53F4<32>
	v9 = loc1
	Mem0[v8:word32] = v9
	v8 = loc0
	loc2 = v8
	v8 = loc2
	return v8
	// succ:  fn0011EE9E_exit
l0011EEC4:
	return v8
	// succ:  fn0011EE9E_exit
fn0011EE9E_exit:


// ___cxa_can_catch
// Return size: 0
word32 ___cxa_can_catch(word32 arg0, word32 arg1, word32 arg2)
___cxa_can_catch_entry:
	// succ:  l0011EEC6
l0011EEC6:
	v13 = Mem0[0x00140030<p32>:word32]
	loc12 = v13
	v13 = Mem0[0x00140030<p32>:word32]
	v14 = 0x10<32>
	v13 = v13 + v14
	Mem0[0x00140030<p32>:word32] = v13
	v13 = Mem0[0x00140030<p32>:word32]
	v14 = Mem0[0x00140034<p32>:word32]
	v15 = v13 >= v14
	branch !v15 l0011EEDF
	// succ:  l0011EEDA l0011EEDF
l0011EEDA:
	v13 = 0x10<32>
	abortStackOverflow(v13)
	// succ:  l0011EEDF
l0011EEDF:
	v13 = loc12
	loc4 = v13
	v13 = arg2
	v13 = Mem0[v13:word32]
	loc5 = v13
	v13 = loc4
	v14 = loc5
	Mem0[v13:word32] = v14
	v13 = arg0
	v13 = Mem0[v13:word32]
	loc6 = v13
	v13 = loc6
	v14 = 0x10<32>
	v13 = v13 + v14
	loc7 = v13
	v13 = loc7
	v13 = Mem0[v13:word32]
	loc8 = v13
	v13 = arg0
	v14 = arg1
	v16 = loc4
	v17 = loc8
	v18 = 0x1FF<32>
	v17 = v17 & v18
	v18 = 0xF20<32>
	v17 = v17 + v18
___cxa_can_catch_exit:


// ___cxa_is_pointer_type
// Return size: 0
word32 ___cxa_is_pointer_type(word32 arg0)
___cxa_is_pointer_type_entry:
	// succ:  l0011EF3E
l0011EF3E:
	v10 = Mem0[0x00140030<p32>:word32]
	loc7 = v10
	v10 = arg0
	v11 = 0<32>
	v12 = v10 == v11
	loc1 = v12
	v10 = loc1
	branch !v10 l0011EF54
	// succ:  l0011EF4F l0011EF54
l0011EF4F:
	v10 = 0<32>
	loc4 = v10
	goto l0011EF6E
	// succ:  l0011EF6E
l0011EF54:
	v10 = arg0
	v11 = 0x9A0<32>
	v13 = 0xA28<32>
	v14 = 0<32>
	v10 = fn0011DBBE(v10, v11, v13, v14)
	loc2 = v10
	v10 = loc2
	v11 = 0<32>
	v12 = v10 != v11
	loc5 = v12
	v10 = loc5
	loc4 = v10
	// succ:  l0011EF6E
l0011EF6E:
	v10 = loc4
	v11 = 1<32>
	v10 = v10 & v11
	loc3 = v10
	v10 = loc3
	return v10
	// succ:  ___cxa_is_pointer_type_exit
l0011EF79:
	return v10
	// succ:  ___cxa_is_pointer_type_exit
___cxa_is_pointer_type_exit:


// runPostSets
// Return size: 0
void runPostSets()
runPostSets_entry:
	// succ:  l0011EF7B
l0011EF7B:
	return
	// succ:  runPostSets_exit
runPostSets_exit:


// _memset
// Return size: 0
word32 _memset(word32 arg0, word32 arg1, word32 arg2)
_memset_entry:
	// succ:  l0011EF7D
l0011EF7D:
	v7 = arg0
	v8 = arg2
	v7 = v7 + v8
	loc3 = v7
	v7 = arg2
	v8 = 0x14<32>
	v9 = v7 >= v8
	branch !v9 l0011F014
	// succ:  l0011EF8D l0011F014
l0011EF8D:
	v7 = arg1
	v8 = 0xFF<32>
	v7 = v7 & v8
	arg1 = v7
	v7 = arg0
	v8 = 3<32>
	v7 = v7 & v8
	loc6 = v7
	v7 = arg1
	v8 = arg1
	v10 = 8<32>
	v8 = v8 << v10
	v7 = v7 | v8
	v8 = arg1
	v10 = 0x10<32>
	v8 = v8 << v10
	v7 = v7 | v8
	v8 = arg1
	v10 = 0x18<32>
	v8 = v8 << v10
	v7 = v7 | v8
	loc4 = v7
	v7 = loc3
	v8 = 3<32>
	v10 = 0xFFFFFFFF<32>
	v8 = v8 ^ v10
	v7 = v7 & v8
	loc5 = v7
	v7 = loc6
	branch !v7 l0011EFEF
	// succ:  l0011EFC0 l0011EFEF
l0011EFC0:
	v7 = arg0
	v8 = 4<32>
	v7 = v7 + v8
	v8 = loc6
	v7 = v7 - v8
	loc6 = v7
	// succ:  l0011EFCC
l0011EFCC:
	v7 = arg0
	v8 = loc6
	v9 = v7 < v8
	v9 = v9 == 0<32>
	branch !v9 l0011EFD9
	// succ:  l0011EFD6 l0011EFD9
l0011EFD6:
	goto l0011EFEC
	// succ:  l0011EFEC
l0011EFD9:
	v7 = arg0
	v8 = arg1
	v11 = SLICE(v8, byte, 0)
	Mem0[v7:byte] = v11
	v7 = arg0
	v8 = 1<32>
	v7 = v7 + v8
	arg0 = v7
	// succ:  l0011EFE9
l0011EFE9:
	goto l0011EFC0
	// succ:  l0011EFC0
l0011EFEC:
	// succ:  l0011EFEF
l0011EFEF:
	v7 = arg0
	v8 = loc5
	v9 = v7 < v8
	v9 = v9 == 0<32>
	branch !v9 l0011EFFE
	// succ:  l0011EFFB l0011EFFE
l0011EFFB:
	goto l0011F011
	// succ:  l0011F011
l0011EFFE:
	v7 = arg0
	v8 = loc4
	Mem0[v7:word32] = v8
	v7 = arg0
	v8 = 4<32>
	v7 = v7 + v8
	arg0 = v7
	// succ:  l0011F00E
l0011F00E:
	goto l0011EFEF
	// succ:  l0011EFEF
l0011F011:
	// succ:  l0011F014
l0011F014:
	v7 = arg0
	v8 = loc3
	v9 = v7 < v8
	v9 = v9 == 0<32>
	branch !v9 l0011F023
	// succ:  l0011F020 l0011F023
l0011F020:
	goto l0011F036
	// succ:  l0011F036
l0011F023:
	v7 = arg0
	v8 = arg1
	v12 = SLICE(v8, byte, 0)
	Mem0[v7:byte] = v12
	v7 = arg0
	v8 = 1<32>
	v7 = v7 + v8
	arg0 = v7
	// succ:  l0011F033
l0011F033:
	goto l0011F014
	// succ:  l0011F014
l0011F036:
	v7 = arg0
	v8 = arg2
	v7 = v7 - v8
	return v7
	// succ:  _memset_exit
l0011F03E:
	return v7
	// succ:  _memset_exit
_memset_exit:


// _pthread_mutex_lock
// Return size: 0
word32 _pthread_mutex_lock(word32 arg0)
_pthread_mutex_lock_entry:
	// succ:  l0011F040
l0011F040:
	v3 = 0<32>
	return v3
	// succ:  _pthread_mutex_lock_exit
_pthread_mutex_lock_exit:


// _pthread_cond_broadcast
// Return size: 0
word32 _pthread_cond_broadcast(word32 arg0)
_pthread_cond_broadcast_entry:
	// succ:  l0011F044
l0011F044:
	v3 = 0<32>
	return v3
	// succ:  _pthread_cond_broadcast_exit
_pthread_cond_broadcast_exit:


// _memcpy
// Return size: 0
word32 _memcpy(word32 arg0, word32 arg1, word32 arg2)
_memcpy_entry:
	// succ:  l0011F048
l0011F048:
	v4 = arg2
	v5 = 0x1000<32>
	v6 = v4 >= v5
	branch !v6 l0011F05C
	// succ:  l0011F052 l0011F05C
l0011F052:
	v4 = arg0
	v5 = arg1
	v7 = arg2
	v4 = _emscripten_memcpy_big(v4, v5, v7)
	return v4
	// succ:  _memcpy_exit
l0011F05C:
	v4 = arg0
	loc3 = v4
	v4 = arg0
	v5 = 3<32>
	v4 = v4 & v5
	v5 = arg1
	v7 = 3<32>
	v5 = v5 & v7
	v6 = v4 == v5
	branch !v6 l0011F0E3
	// succ:  l0011F06D l0011F0E3
l0011F06D:
	v4 = arg0
	v5 = 3<32>
	v4 = v4 & v5
	v6 = v4 == 0<32>
	branch !v6 l0011F07C
	// succ:  l0011F079 l0011F07C
l0011F079:
	goto l0011F0AB
	// succ:  l0011F0AB
l0011F07C:
	v4 = arg2
	v5 = 0<32>
	v6 = v4 == v5
	branch !v6 l0011F089
	// succ:  l0011F085 l0011F089
l0011F085:
	v4 = loc3
	return v4
	// succ:  _memcpy_exit
l0011F089:
	v4 = arg0
	v5 = arg1
	v8 = Mem0[v5:int8]
	v5 = CONVERT(v8, int8, word32)
	v9 = SLICE(v5, byte, 0)
	Mem0[v4:byte] = v9
	v4 = arg0
	v5 = 1<32>
	v4 = v4 + v5
	arg0 = v4
	v4 = arg1
	v5 = 1<32>
	v4 = v4 + v5
	arg1 = v4
	v4 = arg2
	v5 = 1<32>
	v4 = v4 - v5
	arg2 = v4
	// succ:  l0011F0A8
l0011F0A8:
	goto l0011F06D
	// succ:  l0011F06D
l0011F0AB:
	v4 = arg2
	v5 = 4<32>
	v6 = v4 >= v5
	v6 = v6 == 0<32>
	branch !v6 l0011F0BC
	// succ:  l0011F0B9 l0011F0BC
l0011F0B9:
	goto l0011F0E0
	// succ:  l0011F0E0
l0011F0BC:
	v4 = arg0
	v5 = arg1
	v5 = Mem0[v5:word32]
	Mem0[v4:word32] = v5
	v4 = arg0
	v5 = 4<32>
	v4 = v4 + v5
	arg0 = v4
	v4 = arg1
	v5 = 4<32>
	v4 = v4 + v5
	arg1 = v4
	v4 = arg2
	v5 = 4<32>
	v4 = v4 - v5
	arg2 = v4
	// succ:  l0011F0DD
l0011F0DD:
	goto l0011F0AB
	// succ:  l0011F0AB
l0011F0E0:
	// succ:  l0011F0E3
l0011F0E3:
	v4 = arg2
	v5 = 0<32>
	v6 = v4 > v5
	v6 = v6 == 0<32>
	branch !v6 l0011F0F2
	// succ:  l0011F0EF l0011F0F2
l0011F0EF:
	goto l0011F116
	// succ:  l0011F116
l0011F0F2:
	v4 = arg0
	v5 = arg1
	v10 = Mem0[v5:int8]
	v5 = CONVERT(v10, int8, word32)
	v11 = SLICE(v5, byte, 0)
	Mem0[v4:byte] = v11
	v4 = arg0
	v5 = 1<32>
	v4 = v4 + v5
	arg0 = v4
	v4 = arg1
	v5 = 1<32>
	v4 = v4 + v5
	arg1 = v4
	v4 = arg2
	v5 = 1<32>
	v4 = v4 - v5
	arg2 = v4
	// succ:  l0011F113
l0011F113:
	goto l0011F0E3
	// succ:  l0011F0E3
l0011F116:
	v4 = loc3
	return v4
	// succ:  _memcpy_exit
l0011F11B:
	return v4
	// succ:  _memcpy_exit
_memcpy_exit:


// _sbrk
// Return size: 0
word32 _sbrk(word32 arg0)
_sbrk_entry:
	// succ:  l0011F11D
l0011F11D:
	v7 = arg0
	v8 = 0xF<32>
	v7 = v7 + v8
	v8 = 0xFFFFFFF0<32>
	v7 = v7 & v8
	arg0 = v7
	v7 = Mem0[0x00140038<p32>:word32]
	v7 = Mem0[v7:word32]
	loc1 = v7
	v7 = loc1
	v8 = arg0
	v7 = v7 + v8
	loc3 = v7
	v7 = arg0
	v8 = 0<32>
	v9 = v7 > v8
	v8 = loc3
	v10 = loc1
	v11 = v8 < v10
	v7 = v9 & v11
	v8 = loc3
	v10 = 0<32>
	v11 = v8 < v10
	v7 = v7 | v11
	branch !v7 l0011F155
	// succ:  l0011F14A l0011F155
l0011F14A:
	v7 = abortOnCannotGrowMemory()
	v7 = 0xC<32>
	___setErrNo(v7)
	v7 = 0xFFFFFFFF<32>
	return v7
	// succ:  _sbrk_exit
l0011F155:
	v7 = Mem0[0x00140038<p32>:word32]
	v8 = loc3
	Mem0[v7:word32] = v8
	v7 = getTotalMemory()
	loc4 = v7
	v7 = loc3
	v8 = loc4
	v9 = v7 > v8
	branch !v9 l0011F17E
	// succ:  l0011F167 l0011F17E
l0011F167:
	v7 = enlargeMemory()
	v8 = 0<32>
	v9 = v7 == v8
	branch !v9 l0011F17D
	// succ:  l0011F16E l0011F17D
l0011F16E:
	v7 = 0xC<32>
	___setErrNo(v7)
	v7 = Mem0[0x00140038<p32>:word32]
	v8 = loc1
	Mem0[v7:word32] = v8
	v7 = 0xFFFFFFFF<32>
	return v7
	// succ:  _sbrk_exit
l0011F17D:
	// succ:  l0011F17E
l0011F17E:
	v7 = loc1
	return v7
	// succ:  _sbrk_exit
l0011F181:
	return v7
	// succ:  _sbrk_exit
_sbrk_exit:


// _memmove
// Return size: 0
word32 _memmove(word32 arg0, word32 arg1, word32 arg2)
_memmove_entry:
	// succ:  l0011F183
l0011F183:
	v4 = arg1
	v5 = arg0
	v6 = v4 < v5
	v5 = arg0
	v7 = arg1
	v8 = arg2
	v7 = v7 + v8
	v9 = v5 < v7
	v4 = v6 & v9
	branch !v4 l0011F1E1
	// succ:  l0011F195 l0011F1E1
l0011F195:
	v4 = arg0
	loc3 = v4
	v4 = arg1
	v5 = arg2
	v4 = v4 + v5
	arg1 = v4
	v4 = arg0
	v5 = arg2
	v4 = v4 + v5
	arg0 = v4
	// succ:  l0011F1A9
l0011F1A9:
	v4 = arg2
	v5 = 0<32>
	v6 = v4 > v5
	v6 = v6 == 0<32>
	branch !v6 l0011F1B6
	// succ:  l0011F1B3 l0011F1B6
l0011F1B3:
	goto l0011F1DA
	// succ:  l0011F1DA
l0011F1B6:
	v4 = arg0
	v5 = 1<32>
	v4 = v4 - v5
	arg0 = v4
	v4 = arg1
	v5 = 1<32>
	v4 = v4 - v5
	arg1 = v4
	v4 = arg2
	v5 = 1<32>
	v4 = v4 - v5
	arg2 = v4
	v4 = arg0
	v5 = arg1
	v10 = Mem0[v5:int8]
	v5 = CONVERT(v10, int8, word32)
	v11 = SLICE(v5, byte, 0)
	Mem0[v4:byte] = v11
	// succ:  l0011F1D7
l0011F1D7:
	goto l0011F195
	// succ:  l0011F195
l0011F1DA:
	v4 = loc3
	arg0 = v4
	goto l0011F1EB
	// succ:  l0011F1EB
l0011F1E1:
	v4 = arg0
	v5 = arg1
	v7 = arg2
	v4 = _memcpy(v4, v5, v7)
	// succ:  l0011F1EB
l0011F1EB:
	v4 = arg0
	return v4
	// succ:  _memmove_exit
l0011F1EF:
	return v4
	// succ:  _memmove_exit
_memmove_exit:


// _pthread_mutex_unlock
// Return size: 0
word32 _pthread_mutex_unlock(word32 arg0)
_pthread_mutex_unlock_entry:
	// succ:  l0011F1F1
l0011F1F1:
	v3 = 0<32>
	return v3
	// succ:  _pthread_mutex_unlock_exit
_pthread_mutex_unlock_exit:


// _pthread_self
// Return size: 0
word32 _pthread_self()
_pthread_self_entry:
	// succ:  l0011F1F5
l0011F1F5:
	v3 = 0<32>
	return v3
	// succ:  _pthread_self_exit
_pthread_self_exit:


// dynCall_iiiiiiii
// Return size: 0
word32 dynCall_iiiiiiii(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
dynCall_iiiiiiii_entry:
	// succ:  l0011F1F9
l0011F1F9:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg5
	v8 = arg6
	v9 = arg7
	v10 = arg0
	v11 = 0x1FF<32>
	v10 = v10 & v11
	v11 = 0<32>
	v10 = v10 + v11
dynCall_iiiiiiii_exit:


// dynCall_viiiii
// Return size: 0
void dynCall_viiiii(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
dynCall_viiiii_entry:
	// succ:  l0011F215
l0011F215:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg5
	v8 = arg0
	v9 = 0x1FF<32>
	v8 = v8 & v9
	v9 = 0x200<32>
	v8 = v8 + v9
dynCall_viiiii_exit:


// dynCall_iiiiiid
// Return size: 0
word32 dynCall_iiiiiid(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, real64 arg6)
dynCall_iiiiiid_entry:
	// succ:  l0011F22D
l0011F22D:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg5
	v8 = arg6
	v9 = arg0
	v10 = 0xFF<32>
	v9 = v9 & v10
	v10 = 0x400<32>
	v9 = v9 + v10
dynCall_iiiiiid_exit:


// dynCall_vi
// Return size: 0
void dynCall_vi(word32 arg0, word32 arg1)
dynCall_vi_entry:
	// succ:  l0011F248
l0011F248:
	v3 = arg1
	v4 = arg0
	v5 = 0x1FF<32>
	v4 = v4 & v5
	v5 = 0x500<32>
	v4 = v4 + v5
dynCall_vi_exit:


// dynCall_vii
// Return size: 0
void dynCall_vii(word32 arg0, word32 arg1, word32 arg2)
dynCall_vii_entry:
	// succ:  l0011F258
l0011F258:
	v3 = arg1
	v4 = arg2
	v5 = arg0
	v6 = 0x1FF<32>
	v5 = v5 & v6
	v6 = 0x700<32>
	v5 = v5 + v6
dynCall_vii_exit:


// dynCall_iiiiiii
// Return size: 0
word32 dynCall_iiiiiii(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6)
dynCall_iiiiiii_entry:
	// succ:  l0011F26A
l0011F26A:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg5
	v8 = arg6
	v9 = arg0
	v10 = 0x1FF<32>
	v9 = v9 & v10
	v10 = 0x900<32>
	v9 = v9 + v10
dynCall_iiiiiii_exit:


// dynCall_ii
// Return size: 0
word32 dynCall_ii(word32 arg0, word32 arg1)
dynCall_ii_entry:
	// succ:  l0011F285
l0011F285:
	v3 = arg1
	v4 = arg0
	v5 = 0x1FF<32>
	v4 = v4 & v5
	v5 = 0xB00<32>
	v4 = v4 + v5
dynCall_ii_exit:


// fn0011F296
// Return size: 0
void fn0011F296(word32 arg0, word32 arg1, word32 arg2, word64 arg3, word32 arg4, word32 arg5)
fn0011F296_entry:
	// succ:  l0011F296
l0011F296:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg5
	v8 = arg0
	v9 = 0x1F<32>
	v8 = v8 & v9
	v9 = 0xD00<32>
	v8 = v8 + v9
fn0011F296_exit:


// dynCall_iiiiiiiiiiii
// Return size: 0
word32 dynCall_iiiiiiiiiiii(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7, word32 arg8, word32 arg9, word32 arg10, word32 arg11)
dynCall_iiiiiiiiiiii_entry:
	// succ:  l0011F2AD
l0011F2AD:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg5
	v8 = arg6
	v9 = arg7
	v10 = arg8
	v11 = arg9
	v12 = arg10
	v13 = arg11
	v14 = arg0
	v15 = 0x1FF<32>
	v14 = v14 & v15
	v15 = 0xD20<32>
	v14 = v14 + v15
dynCall_iiiiiiiiiiii_exit:


// dynCall_iiii
// Return size: 0
word32 dynCall_iiii(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
dynCall_iiii_entry:
	// succ:  l0011F2D2
l0011F2D2:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg0
	v7 = 0x1FF<32>
	v6 = v6 & v7
	v7 = 0xF20<32>
	v6 = v6 + v7
dynCall_iiii_exit:


// dynCall_viiiiiiiiiiiiiii
// Return size: 0
void dynCall_viiiiiiiiiiiiiii(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7, word32 arg8, word32 arg9, word32 arg10, word32 arg11, word32 arg12, word32 arg13, word32 arg14, word32 arg15)
dynCall_viiiiiiiiiiiiiii_entry:
	// succ:  l0011F2E7
l0011F2E7:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg5
	v8 = arg6
	v9 = arg7
	v10 = arg8
	v11 = arg9
	v12 = arg10
	v13 = arg11
	v14 = arg12
	v15 = arg13
	v16 = arg14
	v17 = arg15
	v18 = arg0
	v19 = 0x1FF<32>
	v18 = v18 & v19
	v19 = 0x1120<32>
	v18 = v18 + v19
dynCall_viiiiiiiiiiiiiii_exit:


// dynCall_viiiiii
// Return size: 0
void dynCall_viiiiii(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6)
dynCall_viiiiii_entry:
	// succ:  l0011F313
l0011F313:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg5
	v8 = arg6
	v9 = arg0
	v10 = 0x1FF<32>
	v9 = v9 & v10
	v10 = 0x1320<32>
	v9 = v9 + v10
dynCall_viiiiii_exit:


// dynCall_fiii
// Return size: 0
real32 dynCall_fiii(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
dynCall_fiii_entry:
	// succ:  l0011F32D
l0011F32D:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg0
	v7 = 0x1FF<32>
	v6 = v6 & v7
	v7 = 0x1520<32>
	v6 = v6 + v7
dynCall_fiii_exit:


// dynCall_viiiiiii
// Return size: 0
void dynCall_viiiiiii(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
dynCall_viiiiiii_entry:
	// succ:  l0011F342
l0011F342:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg5
	v8 = arg6
	v9 = arg7
	v10 = arg0
	v11 = 0x1FF<32>
	v10 = v10 & v11
	v11 = 0x1720<32>
	v10 = v10 + v11
dynCall_viiiiiii_exit:


// dynCall_viiiiiiiiii
// Return size: 0
void dynCall_viiiiiiiiii(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7, word32 arg8, word32 arg9, word32 arg10)
dynCall_viiiiiiiiii_entry:
	// succ:  l0011F35E
l0011F35E:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg5
	v8 = arg6
	v9 = arg7
	v10 = arg8
	v11 = arg9
	v12 = arg10
	v13 = arg0
	v14 = 0x1FF<32>
	v13 = v13 & v14
	v14 = 0x1920<32>
	v13 = v13 + v14
dynCall_viiiiiiiiii_exit:


// dynCall_iii
// Return size: 0
word32 dynCall_iii(word32 arg0, word32 arg1, word32 arg2)
dynCall_iii_entry:
	// succ:  l0011F380
l0011F380:
	v3 = arg1
	v4 = arg2
	v5 = arg0
	v6 = 0x1FF<32>
	v5 = v5 & v6
	v6 = 0x1B20<32>
	v5 = v5 + v6
dynCall_iii_exit:


// dynCall_iiiiii
// Return size: 0
word32 dynCall_iiiiii(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
dynCall_iiiiii_entry:
	// succ:  l0011F393
l0011F393:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg5
	v8 = arg0
	v9 = 0x1FF<32>
	v8 = v8 & v9
	v9 = 0x1D20<32>
	v8 = v8 + v9
dynCall_iiiiii_exit:


// dynCall_diii
// Return size: 0
real64 dynCall_diii(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
dynCall_diii_entry:
	// succ:  l0011F3AC
l0011F3AC:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg0
	v7 = 0x1FF<32>
	v6 = v6 & v7
	v7 = 0x1F20<32>
	v6 = v6 + v7
dynCall_diii_exit:


// dynCall_i
// Return size: 0
word32 dynCall_i(word32 arg0)
dynCall_i_entry:
	// succ:  l0011F3C1
l0011F3C1:
	v3 = arg0
	v4 = 0x1FF<32>
	v3 = v3 & v4
	v4 = 0x2120<32>
	v3 = v3 + v4
dynCall_i_exit:


// fn0011F3D1
// Return size: 0
word64 fn0011F3D1(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn0011F3D1_entry:
	// succ:  l0011F3D1
l0011F3D1:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg0
	v8 = 0x1FF<32>
	v7 = v7 & v8
	v8 = 0x2320<32>
	v7 = v7 + v8
fn0011F3D1_exit:


// dynCall_iiiii
// Return size: 0
word32 dynCall_iiiii(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
dynCall_iiiii_entry:
	// succ:  l0011F3E9
l0011F3E9:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg0
	v8 = 0x1FF<32>
	v7 = v7 & v8
	v8 = 0x2520<32>
	v7 = v7 + v8
dynCall_iiiii_exit:


// fn0011F401
// Return size: 0
word32 fn0011F401(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word64 arg5)
fn0011F401_entry:
	// succ:  l0011F401
l0011F401:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg5
	v8 = arg0
	v9 = 0xFF<32>
	v8 = v8 & v9
	v9 = 0x2720<32>
	v8 = v8 + v9
fn0011F401_exit:


// dynCall_viii
// Return size: 0
void dynCall_viii(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
dynCall_viii_entry:
	// succ:  l0011F41B
l0011F41B:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg0
	v7 = 0x1FF<32>
	v6 = v6 & v7
	v7 = 0x2820<32>
	v6 = v6 + v7
dynCall_viii_exit:


// dynCall_v
// Return size: 0
void dynCall_v(word32 arg0)
dynCall_v_entry:
	// succ:  l0011F430
l0011F430:
	v3 = arg0
	v4 = 0x1FF<32>
	v3 = v3 & v4
	v4 = 0x2A20<32>
	v3 = v3 + v4
dynCall_v_exit:


// dynCall_iiiiiiiii
// Return size: 0
word32 dynCall_iiiiiiiii(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7, word32 arg8)
dynCall_iiiiiiiii_entry:
	// succ:  l0011F43F
l0011F43F:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg5
	v8 = arg6
	v9 = arg7
	v10 = arg8
	v11 = arg0
	v12 = 0x1FF<32>
	v11 = v11 & v12
	v12 = 0x2C20<32>
	v11 = v11 + v12
dynCall_iiiiiiiii_exit:


// dynCall_iiiiid
// Return size: 0
word32 dynCall_iiiiid(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, real64 arg5)
dynCall_iiiiid_entry:
	// succ:  l0011F45F
l0011F45F:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg5
	v8 = arg0
	v9 = 0xFF<32>
	v8 = v8 & v9
	v9 = 0x2E20<32>
	v8 = v8 + v9
dynCall_iiiiid_exit:


// dynCall_viiii
// Return size: 0
void dynCall_viiii(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
dynCall_viiii_entry:
	// succ:  l0011F479
l0011F479:
	v3 = arg1
	v4 = arg2
	v5 = arg3
	v6 = arg4
	v7 = arg0
	v8 = 0x1FF<32>
	v7 = v7 & v8
	v8 = 0x2F20<32>
	v7 = v7 + v8
dynCall_viiii_exit:


// fn0011F490
// Return size: 0
word32 fn0011F490(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6)
fn0011F490_entry:
	// succ:  l0011F490
l0011F490:
	v3 = 0<32>
	nullFunc_iiiiiiii(v3)
	v3 = 0<32>
	return v3
	// succ:  fn0011F490_exit
l0011F499:
	return v3
	// succ:  fn0011F490_exit
fn0011F490_exit:


// fn0011F49B
// Return size: 0
void fn0011F49B(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn0011F49B_entry:
	// succ:  l0011F49B
l0011F49B:
	v3 = 1<32>
	nullFunc_viiiii(v3)
	return
	// succ:  fn0011F49B_exit
fn0011F49B_exit:


// fn0011F4A0
// Return size: 0
word32 fn0011F4A0(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, real64 arg5)
fn0011F4A0_entry:
	// succ:  l0011F4A0
l0011F4A0:
	v3 = 2<32>
	nullFunc_iiiiiid(v3)
	v3 = 0<32>
	return v3
	// succ:  fn0011F4A0_exit
l0011F4A9:
	return v3
	// succ:  fn0011F4A0_exit
fn0011F4A0_exit:


// fn0011F4AB
// Return size: 0
void fn0011F4AB(word32 arg0)
fn0011F4AB_entry:
	// succ:  l0011F4AB
l0011F4AB:
	v3 = 3<32>
	nullFunc_vi(v3)
	return
	// succ:  fn0011F4AB_exit
fn0011F4AB_exit:


// fn0011F4B0
// Return size: 0
void fn0011F4B0(word32 arg0, word32 arg1)
fn0011F4B0_entry:
	// succ:  l0011F4B0
l0011F4B0:
	v3 = 4<32>
	nullFunc_vii(v3)
	return
	// succ:  fn0011F4B0_exit
fn0011F4B0_exit:


// fn0011F4B5
// Return size: 0
word32 fn0011F4B5(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn0011F4B5_entry:
	// succ:  l0011F4B5
l0011F4B5:
	v3 = 5<32>
	nullFunc_iiiiiii(v3)
	v3 = 0<32>
	return v3
	// succ:  fn0011F4B5_exit
l0011F4BE:
	return v3
	// succ:  fn0011F4B5_exit
fn0011F4B5_exit:


// fn0011F4C0
// Return size: 0
word32 fn0011F4C0(word32 arg0)
fn0011F4C0_entry:
	// succ:  l0011F4C0
l0011F4C0:
	v3 = 6<32>
	nullFunc_ii(v3)
	v3 = 0<32>
	return v3
	// succ:  fn0011F4C0_exit
l0011F4C9:
	return v3
	// succ:  fn0011F4C0_exit
fn0011F4C0_exit:


// fn0011F4CB
// Return size: 0
word32 fn0011F4CB(word32 arg0)
fn0011F4CB_entry:
	// succ:  l0011F4CB
l0011F4CB:
	v3 = arg0
	v3 = _pthread_mutex_unlock(v3)
	return v3
	// succ:  fn0011F4CB_exit
fn0011F4CB_exit:


// fn0011F4D2
// Return size: 0
word32 fn0011F4D2(word32 arg0)
fn0011F4D2_entry:
	// succ:  l0011F4D2
l0011F4D2:
	v3 = arg0
	v3 = _pthread_mutex_lock(v3)
	return v3
	// succ:  fn0011F4D2_exit
fn0011F4D2_exit:


// fn0011F4D9
// Return size: 0
word32 fn0011F4D9(word32 arg0)
fn0011F4D9_entry:
	// succ:  l0011F4D9
l0011F4D9:
	v3 = arg0
	v3 = _pthread_cond_broadcast(v3)
	return v3
	// succ:  fn0011F4D9_exit
fn0011F4D9_exit:


// fn0011F4E0
// Return size: 0
void fn0011F4E0(word32 arg0, word32 arg1, word64 arg2, word32 arg3, word32 arg4)
fn0011F4E0_entry:
	// succ:  l0011F4E0
l0011F4E0:
	v3 = 7<32>
	nullFunc_viijii(v3)
	return
	// succ:  fn0011F4E0_exit
fn0011F4E0_exit:


// fn0011F4E5
// Return size: 0
word32 fn0011F4E5(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7, word32 arg8, word32 arg9, word32 arg10)
fn0011F4E5_entry:
	// succ:  l0011F4E5
l0011F4E5:
	v3 = 8<32>
	nullFunc_iiiiiiiiiiii(v3)
	v3 = 0<32>
	return v3
	// succ:  fn0011F4E5_exit
l0011F4EE:
	return v3
	// succ:  fn0011F4E5_exit
fn0011F4E5_exit:


// fn0011F4F0
// Return size: 0
word32 fn0011F4F0(word32 arg0, word32 arg1, word32 arg2)
fn0011F4F0_entry:
	// succ:  l0011F4F0
l0011F4F0:
	v3 = 9<32>
	nullFunc_iiii(v3)
	v3 = 0<32>
	return v3
	// succ:  fn0011F4F0_exit
l0011F4F9:
	return v3
	// succ:  fn0011F4F0_exit
fn0011F4F0_exit:


// fn0011F4FB
// Return size: 0
void fn0011F4FB(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7, word32 arg8, word32 arg9, word32 arg10, word32 arg11, word32 arg12, word32 arg13, word32 arg14)
fn0011F4FB_entry:
	// succ:  l0011F4FB
l0011F4FB:
	v3 = 0xA<32>
	nullFunc_viiiiiiiiiiiiiii(v3)
	return
	// succ:  fn0011F4FB_exit
fn0011F4FB_exit:


// fn0011F500
// Return size: 0
void fn0011F500(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn0011F500_entry:
	// succ:  l0011F500
l0011F500:
	v3 = 0xB<32>
	nullFunc_viiiiii(v3)
	return
	// succ:  fn0011F500_exit
fn0011F500_exit:


// fn0011F505
// Return size: 0
real32 fn0011F505(word32 arg0, word32 arg1, word32 arg2)
fn0011F505_entry:
	// succ:  l0011F505
l0011F505:
	v3 = 0xC<32>
	nullFunc_fiii(v3)
	v4 = 0.0F
	return v4
	// succ:  fn0011F505_exit
l0011F511:
	return v4
	// succ:  fn0011F505_exit
fn0011F505_exit:


// fn0011F513
// Return size: 0
void fn0011F513(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6)
fn0011F513_entry:
	// succ:  l0011F513
l0011F513:
	v3 = 0xD<32>
	nullFunc_viiiiiii(v3)
	return
	// succ:  fn0011F513_exit
fn0011F513_exit:


// fn0011F518
// Return size: 0
void fn0011F518(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7, word32 arg8, word32 arg9)
fn0011F518_entry:
	// succ:  l0011F518
l0011F518:
	v3 = 0xE<32>
	nullFunc_viiiiiiiiii(v3)
	return
	// succ:  fn0011F518_exit
fn0011F518_exit:


// fn0011F51D
// Return size: 0
word32 fn0011F51D(word32 arg0, word32 arg1)
fn0011F51D_entry:
	// succ:  l0011F51D
l0011F51D:
	v3 = 0xF<32>
	nullFunc_iii(v3)
	v3 = 0<32>
	return v3
	// succ:  fn0011F51D_exit
l0011F526:
	return v3
	// succ:  fn0011F51D_exit
fn0011F51D_exit:


// fn0011F528
// Return size: 0
word32 fn0011F528(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn0011F528_entry:
	// succ:  l0011F528
l0011F528:
	v3 = 0x10<32>
	nullFunc_iiiiii(v3)
	v3 = 0<32>
	return v3
	// succ:  fn0011F528_exit
l0011F531:
	return v3
	// succ:  fn0011F528_exit
fn0011F528_exit:


// fn0011F533
// Return size: 0
real64 fn0011F533(word32 arg0, word32 arg1, word32 arg2)
fn0011F533_entry:
	// succ:  l0011F533
l0011F533:
	v3 = 0x11<32>
	nullFunc_diii(v3)
	v4 = 0.0
	return v4
	// succ:  fn0011F533_exit
l0011F543:
	return v4
	// succ:  fn0011F533_exit
fn0011F533_exit:


// fn0011F545
// Return size: 0
word32 fn0011F545()
fn0011F545_entry:
	// succ:  l0011F545
l0011F545:
	v3 = 0x12<32>
	nullFunc_i(v3)
	v3 = 0<32>
	return v3
	// succ:  fn0011F545_exit
l0011F54E:
	return v3
	// succ:  fn0011F545_exit
fn0011F545_exit:


// fn0011F550
// Return size: 0
word64 fn0011F550(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn0011F550_entry:
	// succ:  l0011F550
l0011F550:
	v3 = 0x13<32>
	nullFunc_jiiii(v3)
	v4 = 0<64>
	return v4
	// succ:  fn0011F550_exit
l0011F559:
	return v4
	// succ:  fn0011F550_exit
fn0011F550_exit:


// fn0011F55B
// Return size: 0
word32 fn0011F55B(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn0011F55B_entry:
	// succ:  l0011F55B
l0011F55B:
	v3 = 0x14<32>
	nullFunc_iiiii(v3)
	v3 = 0<32>
	return v3
	// succ:  fn0011F55B_exit
l0011F564:
	return v3
	// succ:  fn0011F55B_exit
fn0011F55B_exit:


// fn0011F566
// Return size: 0
word32 fn0011F566(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word64 arg4)
fn0011F566_entry:
	// succ:  l0011F566
l0011F566:
	v3 = 0x15<32>
	nullFunc_iiiiij(v3)
	v3 = 0<32>
	return v3
	// succ:  fn0011F566_exit
l0011F56F:
	return v3
	// succ:  fn0011F566_exit
fn0011F566_exit:


// fn0011F571
// Return size: 0
void fn0011F571(word32 arg0, word32 arg1, word32 arg2)
fn0011F571_entry:
	// succ:  l0011F571
l0011F571:
	v3 = 0x16<32>
	nullFunc_viii(v3)
	return
	// succ:  fn0011F571_exit
fn0011F571_exit:


// fn0011F576
// Return size: 0
void fn0011F576(word32 arg0, word32 arg1, word32 arg2)
fn0011F576_entry:
	// succ:  l0011F576
l0011F576:
	v3 = arg0
	v4 = arg1
	v5 = arg2
	___cxa_throw(v3, v4, v5)
	return
	// succ:  fn0011F576_exit
fn0011F576_exit:


// fn0011F57F
// Return size: 0
void fn0011F57F()
fn0011F57F_entry:
	// succ:  l0011F57F
l0011F57F:
	v3 = 0x17<32>
	nullFunc_v(v3)
	return
	// succ:  fn0011F57F_exit
fn0011F57F_exit:


// fn0011F584
// Return size: 0
void fn0011F584()
fn0011F584_entry:
	// succ:  l0011F584
l0011F584:
	___cxa_end_catch()
	return
	// succ:  fn0011F584_exit
fn0011F584_exit:


// fn0011F587
// Return size: 0
void fn0011F587()
fn0011F587_entry:
	// succ:  l0011F587
l0011F587:
	___cxa_rethrow()
	return
	// succ:  fn0011F587_exit
fn0011F587_exit:


// fn0011F58A
// Return size: 0
word32 fn0011F58A(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn0011F58A_entry:
	// succ:  l0011F58A
l0011F58A:
	v3 = 0x18<32>
	nullFunc_iiiiiiiii(v3)
	v3 = 0<32>
	return v3
	// succ:  fn0011F58A_exit
l0011F593:
	return v3
	// succ:  fn0011F58A_exit
fn0011F58A_exit:


// fn0011F595
// Return size: 0
word32 fn0011F595(word32 arg0, word32 arg1, word32 arg2, word32 arg3, real64 arg4)
fn0011F595_entry:
	// succ:  l0011F595
l0011F595:
	v3 = 0x19<32>
	nullFunc_iiiiid(v3)
	v3 = 0<32>
	return v3
	// succ:  fn0011F595_exit
l0011F59E:
	return v3
	// succ:  fn0011F595_exit
fn0011F595_exit:


// fn0011F5A0
// Return size: 0
void fn0011F5A0(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn0011F5A0_entry:
	// succ:  l0011F5A0
l0011F5A0:
	v3 = 0x1A<32>
	nullFunc_viiii(v3)
	return
	// succ:  fn0011F5A0_exit
fn0011F5A0_exit:


// dynCall_viijii
// Return size: 0
void dynCall_viijii(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6)
dynCall_viijii_entry:
	// succ:  l0011F5A5
l0011F5A5:
	v3 = arg0
	v4 = arg1
	v5 = arg2
	v6 = arg3
	v7 = CONVERT(v6, word32, uint64)
	v8 = arg4
	v9 = CONVERT(v8, word32, uint64)
	v10 = 0x20<64>
	v11 = v9 << v10
	v12 = v7 | v11
	v8 = arg5
	v13 = arg6
	fn0011F296(v3, v4, v5, v12, v8, v13)
	return
	// succ:  dynCall_viijii_exit
dynCall_viijii_exit:


// dynCall_jiiii
// Return size: 0
word32 dynCall_jiiii(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
dynCall_jiiii_entry:
	// succ:  l0011F5BD
l0011F5BD:
	v4 = arg0
	v5 = arg1
	v6 = arg2
	v7 = arg3
	v8 = arg4
	v9 = fn0011F3D1(v4, v5, v6, v7, v8)
	loc5 = v9
	v9 = loc5
	v10 = 0x20<64>
	v9 = v9 >>u v10
	v4 = SLICE(v9, word64, 0)
	Mem0[0x00140094<p32>:word32] = v4
	v9 = loc5
	v4 = SLICE(v9, word64, 0)
	// succ:  l0011F5D9
l0011F5D9:
	return v4
	// succ:  dynCall_jiiii_exit
dynCall_jiiii_exit:


// dynCall_iiiiij
// Return size: 0
word32 dynCall_iiiiij(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6)
dynCall_iiiiij_entry:
	// succ:  l0011F5DB
l0011F5DB:
	v3 = arg0
	v4 = arg1
	v5 = arg2
	v6 = arg3
	v7 = arg4
	v8 = arg5
	v9 = CONVERT(v8, word32, uint64)
	v10 = arg6
	v11 = CONVERT(v10, word32, uint64)
	v12 = 0x20<64>
	v13 = v11 << v12
	v14 = v9 | v13
	v3 = fn0011F401(v3, v4, v5, v6, v7, v14)
	return v3
	// succ:  dynCall_iiiiij_exit
dynCall_iiiiij_exit:


// fn0011F5F3
// Return size: 0
word64 fn0011F5F3(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn0011F5F3_entry:
	// succ:  l0011F5F3
l0011F5F3:
	v3 = arg0
	v4 = arg1
	v5 = arg2
	v6 = arg3
	v7 = arg4
	v3 = invoke_jiiii(v3, v4, v5, v6, v7)
	v8 = CONVERT(v3, word32, uint64)
	v4 = Mem0[0x00140094<p32>:word32]
	v9 = CONVERT(v4, word32, uint64)
	v10 = 0x20<64>
	v11 = v9 << v10
	v12 = v8 | v11
	return v12
	// succ:  fn0011F5F3_exit
fn0011F5F3_exit:


