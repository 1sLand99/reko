// fn00100050
// Return size: 0
word32 fn00100050(word32 arg0)
fn00100050_entry:
	// succ:  l00100050
l00100050:
	v12 = Mem0[0x00140030<p32>:word32]
	loc10 = v12
	v12 = 0x43A0<32>
	v13 = Mem0[v12:int8]
	v12 = CONVERT(v13, int8, word32)
	loc1 = v12
	v12 = loc1
	v14 = 0x18<32>
	v12 = v12 << v14
	v14 = 0x18<32>
	v12 = v12 >> v14
	v14 = 0<32>
	v15 = v12 == v14
	loc2 = v15
	// succ:  l0010006C
l0010006C:
	v12 = loc2
	branch !v12 l001000E0
	// succ:  l00100072 l001000E0
l00100072:
	v12 = 0x43A0<32>
	v12 = fn0011EE46(v12)
	loc3 = v12
	v12 = loc3
	v14 = 0<32>
	v15 = v12 == v14
	loc4 = v15
	v12 = loc4
	v15 = v12 == 0<32>
	branch !v15 l001000DF
	// succ:  l00100087 l001000DF
l00100087:
	v12 = 0x4CC4<32>
	v16 = 0<64>
	Mem0[v12:word64] = v16
	v12 = 0x4CC4<32>
	v14 = 8<32>
	v12 = v12 + v14
	v14 = 0<32>
	Mem0[v12:word32] = v14
	v12 = 0<32>
	Mem0[0x00140048<p32>:word32] = v12
	v12 = 0x199<32>
	v14 = 0x4CC4<32>
	v17 = 0x3987<32>
	v18 = 8<32>
	invoke_viii(v12, v14, v17, v18)
	v12 = Mem0[0x00140048<p32>:word32]
	loc5 = v12
	v12 = 0<32>
	Mem0[0x00140048<p32>:word32] = v12
	v12 = loc5
	v14 = 1<32>
	v12 = v12 & v14
	loc6 = v12
	v12 = loc6
	branch !v12 l001000CF
	// succ:  l001000C2 l001000CF
l001000C2:
	v12 = ___cxa_find_matching_catch_2()
	loc7 = v12
	v12 = Mem0[0x00140094<p32>:word32]
	loc8 = v12
	v12 = loc7
	___resumeException(v12)
	goto l001000DD
	// succ:  l001000DD
l001000CF:
	v12 = 0x16D<32>
	v14 = 0x4CC4<32>
	v17 = Mem0[0x00140044<p32>:word32]
	v12 = ___cxa_atexit(v12, v14, v17)
	goto l001000E0
	// succ:  l001000E0
l001000DD:
	// succ:  l001000DF
l001000DF:
	// succ:  l001000E0
l001000E0:
	// succ:  l001000E0
l001000E0:
	v12 = 0x4CC4<32>
	return v12
	// succ:  fn00100050_exit
l001000E6:
	return v12
	// succ:  fn00100050_exit
fn00100050_exit:


// fn001000E8
// Return size: 0
word32 fn001000E8(word32 arg0)
fn001000E8_entry:
	// succ:  l001000E8
l001000E8:
	v12 = Mem0[0x00140030<p32>:word32]
	loc10 = v12
	v12 = 0x4398<32>
	v13 = Mem0[v12:int8]
	v12 = CONVERT(v13, int8, word32)
	loc1 = v12
	v12 = loc1
	v14 = 0x18<32>
	v12 = v12 << v14
	v14 = 0x18<32>
	v12 = v12 >> v14
	v14 = 0<32>
	v15 = v12 == v14
	loc2 = v15
	// succ:  l00100104
l00100104:
	v12 = loc2
	branch !v12 l00100178
	// succ:  l0010010A l00100178
l0010010A:
	v12 = 0x4398<32>
	v12 = fn0011EE46(v12)
	loc3 = v12
	v12 = loc3
	v14 = 0<32>
	v15 = v12 == v14
	loc4 = v15
	v12 = loc4
	v15 = v12 == 0<32>
	branch !v15 l00100177
	// succ:  l0010011F l00100177
l0010011F:
	v12 = 0x4CB8<32>
	v16 = 0<64>
	Mem0[v12:word64] = v16
	v12 = 0x4CB8<32>
	v14 = 8<32>
	v12 = v12 + v14
	v14 = 0<32>
	Mem0[v12:word32] = v14
	v12 = 0<32>
	Mem0[0x00140048<p32>:word32] = v12
	v12 = 0x199<32>
	v14 = 0x4CB8<32>
	v17 = 0x397E<32>
	v18 = 8<32>
	invoke_viii(v12, v14, v17, v18)
	v12 = Mem0[0x00140048<p32>:word32]
	loc5 = v12
	v12 = 0<32>
	Mem0[0x00140048<p32>:word32] = v12
	v12 = loc5
	v14 = 1<32>
	v12 = v12 & v14
	loc6 = v12
	v12 = loc6
	branch !v12 l00100167
	// succ:  l0010015A l00100167
l0010015A:
	v12 = ___cxa_find_matching_catch_2()
	loc7 = v12
	v12 = Mem0[0x00140094<p32>:word32]
	loc8 = v12
	v12 = loc7
	___resumeException(v12)
	goto l00100175
	// succ:  l00100175
l00100167:
	v12 = 0x16D<32>
	v14 = 0x4CB8<32>
	v17 = Mem0[0x00140044<p32>:word32]
	v12 = ___cxa_atexit(v12, v14, v17)
	goto l00100178
	// succ:  l00100178
l00100175:
	// succ:  l00100177
l00100177:
	// succ:  l00100178
l00100178:
	// succ:  l00100178
l00100178:
	v12 = 0x4CB8<32>
	return v12
	// succ:  fn001000E8_exit
l0010017E:
	return v12
	// succ:  fn001000E8_exit
fn001000E8_exit:


// fn00100228
// Return size: 0
void fn00100228(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn00100228_entry:
	// succ:  l00100228
l00100228:
	v19 = Mem0[0x00140030<p32>:word32]
	loc22 = v19
	v19 = Mem0[0x00140030<p32>:word32]
	v20 = 0x10<32>
	v19 = v19 + v20
	Mem0[0x00140030<p32>:word32] = v19
	v19 = Mem0[0x00140030<p32>:word32]
	v20 = Mem0[0x00140034<p32>:word32]
	v21 = v19 >= v20
	branch !v21 l00100241
	// succ:  l0010023C l00100241
l0010023C:
	v19 = 0x10<32>
	abortStackOverflow(v19)
	// succ:  l00100241
l00100241:
	v19 = loc22
	v20 = 4<32>
	v19 = v19 + v20
	loc6 = v19
	v19 = loc22
	loc17 = v19
	v19 = arg0
	v20 = 8<32>
	v19 = v19 + v20
	loc18 = v19
	v19 = loc18
	v19 = Mem0[v19:word32]
	loc19 = v19
	v19 = loc19
	v19 = Mem0[v19:word32]
	loc20 = v19
	v19 = loc18
	v20 = loc20
	v22 = 0x1FF<32>
	v20 = v20 & v22
	v22 = 0xB00<32>
	v20 = v20 + v22
fn00100228_exit:


// fn001002E5
// Return size: 0
void fn001002E5(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn001002E5_entry:
	// succ:  l001002E5
l001002E5:
	v20 = Mem0[0x00140030<p32>:word32]
	loc23 = v20
	v20 = Mem0[0x00140030<p32>:word32]
	v21 = 0x10<32>
	v20 = v20 + v21
	Mem0[0x00140030<p32>:word32] = v20
	v20 = Mem0[0x00140030<p32>:word32]
	v21 = Mem0[0x00140034<p32>:word32]
	v22 = v20 >= v21
	branch !v22 l001002FE
	// succ:  l001002F9 l001002FE
l001002F9:
	v20 = 0x10<32>
	abortStackOverflow(v20)
	// succ:  l001002FE
l001002FE:
	v20 = loc23
	v21 = 4<32>
	v20 = v20 + v21
	loc6 = v20
	v20 = loc23
	loc18 = v20
	v20 = arg0
	v21 = 8<32>
	v20 = v20 + v21
	loc19 = v20
	v20 = loc19
	v20 = Mem0[v20:word32]
	loc20 = v20
	v20 = loc20
	v21 = 4<32>
	v20 = v20 + v21
	loc21 = v20
	v20 = loc21
	v20 = Mem0[v20:word32]
	loc7 = v20
	v20 = loc19
	v21 = loc7
	v23 = 0x1FF<32>
	v21 = v21 & v23
	v23 = 0xB00<32>
	v21 = v21 + v23
fn001002E5_exit:


// fn001003A9
// Return size: 0
word32 fn001003A9(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn001003A9_entry:
	// succ:  l001003A9
l001003A9:
	v222 = Mem0[0x00140030<p32>:word32]
	loc227 = v222
	v222 = Mem0[0x00140030<p32>:word32]
	v223 = 0x20<32>
	v222 = v222 + v223
	Mem0[0x00140030<p32>:word32] = v222
	v222 = Mem0[0x00140030<p32>:word32]
	v223 = Mem0[0x00140034<p32>:word32]
	v224 = v222 >= v223
	branch !v224 l001003C3
	// succ:  l001003BE l001003C3
l001003BE:
	v222 = 0x20<32>
	abortStackOverflow(v222)
	// succ:  l001003C3
l001003C3:
	v222 = loc227
	v223 = 0x10<32>
	v222 = v222 + v223
	loc18 = v222
	v222 = loc227
	v223 = 0xC<32>
	v222 = v222 + v223
	loc17 = v222
	v222 = loc227
	v223 = 8<32>
	v222 = v222 + v223
	loc198 = v222
	v222 = loc227
	v223 = 4<32>
	v222 = v222 + v223
	loc209 = v222
	v222 = loc227
	loc27 = v222
	v222 = arg3
	v222 = fn000E64CA(v222)
	loc38 = v222
	v222 = loc198
	v223 = loc38
	Mem0[v222:word32] = v223
	v222 = 0<32>
	Mem0[0x00140048<p32>:word32] = v222
	v222 = 0x164<32>
	v223 = loc198
	v225 = 0x4C70<32>
	v222 = invoke_iii(v222, v223, v225)
	loc49 = v222
	v222 = Mem0[0x00140048<p32>:word32]
	loc60 = v222
	v222 = 0<32>
	Mem0[0x00140048<p32>:word32] = v222
	v222 = loc60
	v223 = 1<32>
	v222 = v222 & v223
	loc71 = v222
	v222 = loc71
	branch !v222 l00100434
	// succ:  l0010041E l00100434
l0010041E:
	v222 = ___cxa_find_matching_catch_2()
	loc165 = v222
	v222 = Mem0[0x00140094<p32>:word32]
	loc166 = v222
	v222 = loc38
	v222 = fn0011B43F(v222)
	v222 = loc165
	___resumeException(v222)
	// succ:  l00100434
l00100434:
	v222 = loc38
	v222 = fn0011B43F(v222)
	v222 = arg4
	v223 = 0<32>
	Mem0[v222:word32] = v223
	v222 = loc49
	v223 = 8<32>
	v222 = v222 + v223
	loc82 = v222
	v222 = arg6
	loc10 = v222
	v222 = 0<32>
	loc19 = v222
	// succ:  l00100452
l00100452:
	v222 = loc10
	v223 = arg7
	v224 = v222 != v223
	loc93 = v224
	v222 = loc19
	loc115 = v222
	// succ:  l00100461
l00100461:
	v222 = loc115
	v223 = 0<32>
	v224 = v222 == v223
	loc104 = v224
	v222 = loc93
	v223 = loc104
	v222 = v222 & v223
	loc223 = v222
	v222 = arg1
	v222 = Mem0[v222:word32]
	loc126 = v222
	v222 = loc223
	v224 = v222 == 0<32>
	branch !v224 l00100486
	// succ:  l0010047F l00100486
l0010047F:
	v222 = loc126
	loc20 = v222
l00100486:
	v222 = loc126
	v223 = 0<32>
	v224 = v222 == v223
	loc137 = v224
	v222 = loc126
	loc139 = v222
	v222 = loc137
	branch !v222 l001004A4
	// succ:  l00100498 l001004A4
l00100498:
	v222 = 0<32>
	loc151 = v222
	v222 = loc139
	loc190 = v222
l001004A4:
	v222 = loc126
	v223 = 0xC<32>
	v222 = v222 + v223
	loc140 = v222
	v222 = loc140
	v222 = Mem0[v222:word32]
	loc141 = v222
	v222 = loc126
	v223 = 0x10<32>
	v222 = v222 + v223
	loc142 = v222
	v222 = loc142
	v222 = Mem0[v222:word32]
	loc143 = v222
	v222 = loc141
	v223 = loc143
	v224 = v222 == v223
	loc144 = v224
	v222 = loc144
	v222 = v222
	// succ:  l001004D5 l001004D5
l001004D5:
	v222 = loc126
	v222 = Mem0[v222:word32]
	loc145 = v222
	v222 = loc145
	v223 = 0x24<32>
	v222 = v222 + v223
	loc146 = v222
	v222 = loc146
	v222 = Mem0[v222:word32]
	loc147 = v222
	v222 = loc126
	v223 = loc147
	v225 = 0x1FF<32>
	v223 = v223 & v225
	v225 = 0xB00<32>
	v223 = v223 + v225
fn001003A9_exit:


// fn00100F28
// Return size: 0
void fn00100F28(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn00100F28_entry:
	// succ:  l00100F28
l00100F28:
	v15 = Mem0[0x00140030<p32>:word32]
	loc18 = v15
	v15 = Mem0[0x00140030<p32>:word32]
	v16 = 0x10<32>
	v15 = v15 + v16
	Mem0[0x00140030<p32>:word32] = v15
	v15 = Mem0[0x00140030<p32>:word32]
	v16 = Mem0[0x00140034<p32>:word32]
	v17 = v15 >= v16
	branch !v17 l00100F41
	// succ:  l00100F3C l00100F41
l00100F3C:
	v15 = 0x10<32>
	abortStackOverflow(v15)
	// succ:  l00100F41
l00100F41:
	v15 = loc18
	v16 = 4<32>
	v15 = v15 + v16
	loc6 = v15
	v15 = loc18
	loc13 = v15
	v15 = arg3
	v15 = Mem0[v15:word32]
	loc14 = v15
	v15 = loc13
	v16 = loc14
	Mem0[v15:word32] = v16
	v15 = loc6
	v16 = loc13
	v16 = Mem0[v16:word32]
	Mem0[v15:word32] = v16
	v15 = arg2
	v16 = loc6
	v18 = arg4
	v19 = arg5
	v20 = 2<32>
	v15 = fn00101E90(v15, v16, v18, v19, v20)
	loc15 = v15
	v15 = arg4
	v15 = Mem0[v15:word32]
	loc16 = v15
	v15 = loc16
	v16 = 4<32>
	v15 = v15 & v16
	loc8 = v15
	v15 = loc8
	v16 = 0<32>
	v17 = v15 == v16
	loc9 = v17
	v15 = loc15
	v16 = 0xFFFFFFFF<32>
	v15 = v15 + v16
	loc7 = v15
	v15 = loc7
	v16 = 0x1F<32>
	v17 = v15 <u v16
	loc10 = v17
	v15 = loc10
	v16 = loc9
	v15 = v15 & v16
	loc11 = v15
	v15 = loc11
	branch !v15 l00100FA9
	// succ:  l00100FA1 l00100FA9
l00100FA1:
	v15 = arg1
	v16 = loc15
	Mem0[v15:word32] = v16
	goto l00100FB7
	// succ:  l00100FB7
l00100FA9:
	v15 = loc16
	v16 = 4<32>
	v15 = v15 | v16
	loc12 = v15
	v15 = arg4
	v16 = loc12
	Mem0[v15:word32] = v16
	// succ:  l00100FB7
l00100FB7:
	v15 = loc18
	Mem0[0x00140030<p32>:word32] = v15
	return
	// succ:  fn00100F28_exit
l00100FBD:
	return
	// succ:  fn00100F28_exit
fn00100F28_exit:


// fn00100FBF
// Return size: 0
void fn00100FBF(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn00100FBF_entry:
	// succ:  l00100FBF
l00100FBF:
	v14 = Mem0[0x00140030<p32>:word32]
	loc17 = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = 0x10<32>
	v14 = v14 + v15
	Mem0[0x00140030<p32>:word32] = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = Mem0[0x00140034<p32>:word32]
	v16 = v14 >= v15
	branch !v16 l00100FD8
	// succ:  l00100FD3 l00100FD8
l00100FD3:
	v14 = 0x10<32>
	abortStackOverflow(v14)
	// succ:  l00100FD8
l00100FD8:
	v14 = loc17
	v15 = 4<32>
	v14 = v14 + v15
	loc6 = v14
	v14 = loc17
	loc11 = v14
	v14 = arg3
	v14 = Mem0[v14:word32]
	loc12 = v14
	v14 = loc11
	v15 = loc12
	Mem0[v14:word32] = v15
	v14 = loc6
	v15 = loc11
	v15 = Mem0[v15:word32]
	Mem0[v14:word32] = v15
	v14 = arg2
	v15 = loc6
	v17 = arg4
	v18 = arg5
	v19 = 2<32>
	v14 = fn00101E90(v14, v15, v17, v18, v19)
	loc13 = v14
	v14 = arg4
	v14 = Mem0[v14:word32]
	loc14 = v14
	v14 = loc14
	v15 = 4<32>
	v14 = v14 & v15
	loc7 = v14
	v14 = loc7
	v15 = 0<32>
	v16 = v14 == v15
	loc8 = v16
	v14 = loc13
	v15 = 0x18<32>
	v16 = v14 < v15
	loc9 = v16
	v14 = loc9
	v15 = loc8
	v14 = v14 & v15
	loc15 = v14
	v14 = loc15
	branch !v14 l00101039
	// succ:  l00101031 l00101039
l00101031:
	v14 = arg1
	v15 = loc13
	Mem0[v14:word32] = v15
	goto l00101047
	// succ:  l00101047
l00101039:
	v14 = loc14
	v15 = 4<32>
	v14 = v14 | v15
	loc10 = v14
	v14 = arg4
	v15 = loc10
	Mem0[v14:word32] = v15
	// succ:  l00101047
l00101047:
	v14 = loc17
	Mem0[0x00140030<p32>:word32] = v14
	return
	// succ:  fn00100FBF_exit
l0010104D:
	return
	// succ:  fn00100FBF_exit
fn00100FBF_exit:


// fn0010104F
// Return size: 0
void fn0010104F(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn0010104F_entry:
	// succ:  l0010104F
l0010104F:
	v15 = Mem0[0x00140030<p32>:word32]
	loc18 = v15
	v15 = Mem0[0x00140030<p32>:word32]
	v16 = 0x10<32>
	v15 = v15 + v16
	Mem0[0x00140030<p32>:word32] = v15
	v15 = Mem0[0x00140030<p32>:word32]
	v16 = Mem0[0x00140034<p32>:word32]
	v17 = v15 >= v16
	branch !v17 l00101068
	// succ:  l00101063 l00101068
l00101063:
	v15 = 0x10<32>
	abortStackOverflow(v15)
	// succ:  l00101068
l00101068:
	v15 = loc18
	v16 = 4<32>
	v15 = v15 + v16
	loc6 = v15
	v15 = loc18
	loc13 = v15
	v15 = arg3
	v15 = Mem0[v15:word32]
	loc14 = v15
	v15 = loc13
	v16 = loc14
	Mem0[v15:word32] = v16
	v15 = loc6
	v16 = loc13
	v16 = Mem0[v16:word32]
	Mem0[v15:word32] = v16
	v15 = arg2
	v16 = loc6
	v18 = arg4
	v19 = arg5
	v20 = 2<32>
	v15 = fn00101E90(v15, v16, v18, v19, v20)
	loc15 = v15
	v15 = arg4
	v15 = Mem0[v15:word32]
	loc16 = v15
	v15 = loc16
	v16 = 4<32>
	v15 = v15 & v16
	loc8 = v15
	v15 = loc8
	v16 = 0<32>
	v17 = v15 == v16
	loc9 = v17
	v15 = loc15
	v16 = 0xFFFFFFFF<32>
	v15 = v15 + v16
	loc7 = v15
	v15 = loc7
	v16 = 0xC<32>
	v17 = v15 <u v16
	loc10 = v17
	v15 = loc10
	v16 = loc9
	v15 = v15 & v16
	loc11 = v15
	v15 = loc11
	branch !v15 l001010D0
	// succ:  l001010C8 l001010D0
l001010C8:
	v15 = arg1
	v16 = loc15
	Mem0[v15:word32] = v16
	goto l001010DE
	// succ:  l001010DE
l001010D0:
	v15 = loc16
	v16 = 4<32>
	v15 = v15 | v16
	loc12 = v15
	v15 = arg4
	v16 = loc12
	Mem0[v15:word32] = v16
	// succ:  l001010DE
l001010DE:
	v15 = loc18
	Mem0[0x00140030<p32>:word32] = v15
	return
	// succ:  fn0010104F_exit
l001010E4:
	return
	// succ:  fn0010104F_exit
fn0010104F_exit:


// fn001010E6
// Return size: 0
void fn001010E6(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn001010E6_entry:
	// succ:  l001010E6
l001010E6:
	v14 = Mem0[0x00140030<p32>:word32]
	loc17 = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = 0x10<32>
	v14 = v14 + v15
	Mem0[0x00140030<p32>:word32] = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = Mem0[0x00140034<p32>:word32]
	v16 = v14 >= v15
	branch !v16 l001010FF
	// succ:  l001010FA l001010FF
l001010FA:
	v14 = 0x10<32>
	abortStackOverflow(v14)
	// succ:  l001010FF
l001010FF:
	v14 = loc17
	v15 = 4<32>
	v14 = v14 + v15
	loc6 = v14
	v14 = loc17
	loc11 = v14
	v14 = arg3
	v14 = Mem0[v14:word32]
	loc12 = v14
	v14 = loc11
	v15 = loc12
	Mem0[v14:word32] = v15
	v14 = loc6
	v15 = loc11
	v15 = Mem0[v15:word32]
	Mem0[v14:word32] = v15
	v14 = arg2
	v15 = loc6
	v17 = arg4
	v18 = arg5
	v19 = 3<32>
	v14 = fn00101E90(v14, v15, v17, v18, v19)
	loc13 = v14
	v14 = arg4
	v14 = Mem0[v14:word32]
	loc14 = v14
	v14 = loc14
	v15 = 4<32>
	v14 = v14 & v15
	loc7 = v14
	v14 = loc7
	v15 = 0<32>
	v16 = v14 == v15
	loc8 = v16
	v14 = loc13
	v15 = 0x16E<32>
	v16 = v14 < v15
	loc9 = v16
	v14 = loc9
	v15 = loc8
	v14 = v14 & v15
	loc15 = v14
	v14 = loc15
	branch !v14 l00101161
	// succ:  l00101159 l00101161
l00101159:
	v14 = arg1
	v15 = loc13
	Mem0[v14:word32] = v15
	goto l0010116F
	// succ:  l0010116F
l00101161:
	v14 = loc14
	v15 = 4<32>
	v14 = v14 | v15
	loc10 = v14
	v14 = arg4
	v15 = loc10
	Mem0[v14:word32] = v15
	// succ:  l0010116F
l0010116F:
	v14 = loc17
	Mem0[0x00140030<p32>:word32] = v14
	return
	// succ:  fn001010E6_exit
l00101175:
	return
	// succ:  fn001010E6_exit
fn001010E6_exit:


// fn00101177
// Return size: 0
void fn00101177(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn00101177_entry:
	// succ:  l00101177
l00101177:
	v15 = Mem0[0x00140030<p32>:word32]
	loc18 = v15
	v15 = Mem0[0x00140030<p32>:word32]
	v16 = 0x10<32>
	v15 = v15 + v16
	Mem0[0x00140030<p32>:word32] = v15
	v15 = Mem0[0x00140030<p32>:word32]
	v16 = Mem0[0x00140034<p32>:word32]
	v17 = v15 >= v16
	branch !v17 l00101190
	// succ:  l0010118B l00101190
l0010118B:
	v15 = 0x10<32>
	abortStackOverflow(v15)
	// succ:  l00101190
l00101190:
	v15 = loc18
	v16 = 4<32>
	v15 = v15 + v16
	loc6 = v15
	v15 = loc18
	loc12 = v15
	v15 = arg3
	v15 = Mem0[v15:word32]
	loc13 = v15
	v15 = loc12
	v16 = loc13
	Mem0[v15:word32] = v16
	v15 = loc6
	v16 = loc12
	v16 = Mem0[v16:word32]
	Mem0[v15:word32] = v16
	v15 = arg2
	v16 = loc6
	v18 = arg4
	v19 = arg5
	v20 = 2<32>
	v15 = fn00101E90(v15, v16, v18, v19, v20)
	loc14 = v15
	v15 = arg4
	v15 = Mem0[v15:word32]
	loc15 = v15
	v15 = loc15
	v16 = 4<32>
	v15 = v15 & v16
	loc7 = v15
	v15 = loc7
	v16 = 0<32>
	v17 = v15 == v16
	loc8 = v17
	v15 = loc14
	v16 = 0xD<32>
	v17 = v15 < v16
	loc9 = v17
	v15 = loc9
	v16 = loc8
	v15 = v15 & v16
	loc16 = v15
	v15 = loc16
	branch !v15 l001011F8
	// succ:  l001011E9 l001011F8
l001011E9:
	v15 = loc14
	v16 = 0xFFFFFFFF<32>
	v15 = v15 + v16
	loc10 = v15
	v15 = arg1
	v16 = loc10
	Mem0[v15:word32] = v16
	goto l00101206
	// succ:  l00101206
l001011F8:
	v15 = loc15
	v16 = 4<32>
	v15 = v15 | v16
	loc11 = v15
	v15 = arg4
	v16 = loc11
	Mem0[v15:word32] = v16
	// succ:  l00101206
l00101206:
	v15 = loc18
	Mem0[0x00140030<p32>:word32] = v15
	return
	// succ:  fn00101177_exit
l0010120C:
	return
	// succ:  fn00101177_exit
fn00101177_exit:


// fn0010120E
// Return size: 0
void fn0010120E(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn0010120E_entry:
	// succ:  l0010120E
l0010120E:
	v14 = Mem0[0x00140030<p32>:word32]
	loc17 = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = 0x10<32>
	v14 = v14 + v15
	Mem0[0x00140030<p32>:word32] = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = Mem0[0x00140034<p32>:word32]
	v16 = v14 >= v15
	branch !v16 l00101227
	// succ:  l00101222 l00101227
l00101222:
	v14 = 0x10<32>
	abortStackOverflow(v14)
	// succ:  l00101227
l00101227:
	v14 = loc17
	v15 = 4<32>
	v14 = v14 + v15
	loc6 = v14
	v14 = loc17
	loc11 = v14
	v14 = arg3
	v14 = Mem0[v14:word32]
	loc12 = v14
	v14 = loc11
	v15 = loc12
	Mem0[v14:word32] = v15
	v14 = loc6
	v15 = loc11
	v15 = Mem0[v15:word32]
	Mem0[v14:word32] = v15
	v14 = arg2
	v15 = loc6
	v17 = arg4
	v18 = arg5
	v19 = 2<32>
	v14 = fn00101E90(v14, v15, v17, v18, v19)
	loc13 = v14
	v14 = arg4
	v14 = Mem0[v14:word32]
	loc14 = v14
	v14 = loc14
	v15 = 4<32>
	v14 = v14 & v15
	loc7 = v14
	v14 = loc7
	v15 = 0<32>
	v16 = v14 == v15
	loc8 = v16
	v14 = loc13
	v15 = 0x3C<32>
	v16 = v14 < v15
	loc9 = v16
	v14 = loc9
	v15 = loc8
	v14 = v14 & v15
	loc15 = v14
	v14 = loc15
	branch !v14 l00101288
	// succ:  l00101280 l00101288
l00101280:
	v14 = arg1
	v15 = loc13
	Mem0[v14:word32] = v15
	goto l00101296
	// succ:  l00101296
l00101288:
	v14 = loc14
	v15 = 4<32>
	v14 = v14 | v15
	loc10 = v14
	v14 = arg4
	v15 = loc10
	Mem0[v14:word32] = v15
	// succ:  l00101296
l00101296:
	v14 = loc17
	Mem0[0x00140030<p32>:word32] = v14
	return
	// succ:  fn0010120E_exit
l0010129C:
	return
	// succ:  fn0010120E_exit
fn0010120E_exit:


// fn0010129E
// Return size: 0
void fn0010129E(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn0010129E_entry:
	// succ:  l0010129E
l0010129E:
	v94 = Mem0[0x00140030<p32>:word32]
	loc96 = v94
	v94 = arg4
	v95 = 8<32>
	v94 = v94 + v95
	loc49 = v94
	// succ:  l001012AD
l001012AD:
	v94 = arg1
	v94 = Mem0[v94:word32]
	loc60 = v94
	v94 = loc60
	v95 = 0<32>
	v96 = v94 == v95
	loc71 = v96
	// succ:  l001012BD
l001012BD:
	v94 = loc71
	branch !v94 l001012C8
	// succ:  l001012C3 l001012C8
l001012C3:
	v94 = 0<32>
	loc18 = v94
l001012C8:
	v94 = loc60
	v95 = 0xC<32>
	v94 = v94 + v95
	loc82 = v94
	v94 = loc82
	v94 = Mem0[v94:word32]
	loc92 = v94
	v94 = loc60
	v95 = 0x10<32>
	v94 = v94 + v95
	loc9 = v94
	v94 = loc9
	v94 = Mem0[v94:word32]
	loc10 = v94
	v94 = loc92
	v95 = loc10
	v96 = v94 == v95
	loc11 = v96
	v94 = loc11
	v94 = v94
	// succ:  l001012EF l001012EF
l001012EF:
	v94 = loc60
	v94 = Mem0[v94:word32]
	loc12 = v94
	v94 = loc12
	v95 = 0x24<32>
	v94 = v94 + v95
	loc13 = v94
	v94 = loc13
	v94 = Mem0[v94:word32]
	loc14 = v94
	v94 = loc60
	v95 = loc14
	v97 = 0x1FF<32>
	v95 = v95 & v97
	v97 = 0xB00<32>
	v95 = v95 + v97
fn0010129E_exit:


// fn001016A1
// Return size: 0
void fn001016A1(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn001016A1_entry:
	// succ:  l001016A1
l001016A1:
	v44 = Mem0[0x00140030<p32>:word32]
	loc47 = v44
	v44 = Mem0[0x00140030<p32>:word32]
	v45 = 0x10<32>
	v44 = v44 + v45
	Mem0[0x00140030<p32>:word32] = v44
	v44 = Mem0[0x00140030<p32>:word32]
	v45 = Mem0[0x00140034<p32>:word32]
	v46 = v44 >= v45
	branch !v46 l001016BA
	// succ:  l001016B5 l001016BA
l001016B5:
	v44 = 0x10<32>
	abortStackOverflow(v44)
	// succ:  l001016BA
l001016BA:
	v44 = loc47
	v45 = 4<32>
	v44 = v44 + v45
	loc6 = v44
	v44 = loc47
	loc40 = v44
	v44 = arg0
	v45 = 8<32>
	v44 = v44 + v45
	loc41 = v44
	v44 = loc41
	v44 = Mem0[v44:word32]
	loc42 = v44
	v44 = loc42
	v45 = 8<32>
	v44 = v44 + v45
	loc43 = v44
	v44 = loc43
	v44 = Mem0[v44:word32]
	loc7 = v44
	v44 = loc41
	v45 = loc7
	v47 = 0x1FF<32>
	v45 = v45 & v47
	v47 = 0xB00<32>
	v45 = v45 + v47
fn001016A1_exit:


// fn0010183D
// Return size: 0
void fn0010183D(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn0010183D_entry:
	// succ:  l0010183D
l0010183D:
	v14 = Mem0[0x00140030<p32>:word32]
	loc17 = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = 0x10<32>
	v14 = v14 + v15
	Mem0[0x00140030<p32>:word32] = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = Mem0[0x00140034<p32>:word32]
	v16 = v14 >= v15
	branch !v16 l00101856
	// succ:  l00101851 l00101856
l00101851:
	v14 = 0x10<32>
	abortStackOverflow(v14)
	// succ:  l00101856
l00101856:
	v14 = loc17
	v15 = 4<32>
	v14 = v14 + v15
	loc6 = v14
	v14 = loc17
	loc11 = v14
	v14 = arg3
	v14 = Mem0[v14:word32]
	loc12 = v14
	v14 = loc11
	v15 = loc12
	Mem0[v14:word32] = v15
	v14 = loc6
	v15 = loc11
	v15 = Mem0[v15:word32]
	Mem0[v14:word32] = v15
	v14 = arg2
	v15 = loc6
	v17 = arg4
	v18 = arg5
	v19 = 2<32>
	v14 = fn00101E90(v14, v15, v17, v18, v19)
	loc13 = v14
	v14 = arg4
	v14 = Mem0[v14:word32]
	loc14 = v14
	v14 = loc14
	v15 = 4<32>
	v14 = v14 & v15
	loc7 = v14
	v14 = loc7
	v15 = 0<32>
	v16 = v14 == v15
	loc8 = v16
	v14 = loc13
	v15 = 0x3D<32>
	v16 = v14 < v15
	loc9 = v16
	v14 = loc9
	v15 = loc8
	v14 = v14 & v15
	loc15 = v14
	v14 = loc15
	branch !v14 l001018B7
	// succ:  l001018AF l001018B7
l001018AF:
	v14 = arg1
	v15 = loc13
	Mem0[v14:word32] = v15
	goto l001018C5
	// succ:  l001018C5
l001018B7:
	v14 = loc14
	v15 = 4<32>
	v14 = v14 | v15
	loc10 = v14
	v14 = arg4
	v15 = loc10
	Mem0[v14:word32] = v15
	// succ:  l001018C5
l001018C5:
	v14 = loc17
	Mem0[0x00140030<p32>:word32] = v14
	return
	// succ:  fn0010183D_exit
l001018CB:
	return
	// succ:  fn0010183D_exit
fn0010183D_exit:


// fn001018CD
// Return size: 0
void fn001018CD(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn001018CD_entry:
	// succ:  l001018CD
l001018CD:
	v14 = Mem0[0x00140030<p32>:word32]
	loc17 = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = 0x10<32>
	v14 = v14 + v15
	Mem0[0x00140030<p32>:word32] = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = Mem0[0x00140034<p32>:word32]
	v16 = v14 >= v15
	branch !v16 l001018E6
	// succ:  l001018E1 l001018E6
l001018E1:
	v14 = 0x10<32>
	abortStackOverflow(v14)
	// succ:  l001018E6
l001018E6:
	v14 = loc17
	v15 = 4<32>
	v14 = v14 + v15
	loc6 = v14
	v14 = loc17
	loc11 = v14
	v14 = arg3
	v14 = Mem0[v14:word32]
	loc12 = v14
	v14 = loc11
	v15 = loc12
	Mem0[v14:word32] = v15
	v14 = loc6
	v15 = loc11
	v15 = Mem0[v15:word32]
	Mem0[v14:word32] = v15
	v14 = arg2
	v15 = loc6
	v17 = arg4
	v18 = arg5
	v19 = 1<32>
	v14 = fn00101E90(v14, v15, v17, v18, v19)
	loc13 = v14
	v14 = arg4
	v14 = Mem0[v14:word32]
	loc14 = v14
	v14 = loc14
	v15 = 4<32>
	v14 = v14 & v15
	loc7 = v14
	v14 = loc7
	v15 = 0<32>
	v16 = v14 == v15
	loc8 = v16
	v14 = loc13
	v15 = 7<32>
	v16 = v14 < v15
	loc9 = v16
	v14 = loc9
	v15 = loc8
	v14 = v14 & v15
	loc15 = v14
	v14 = loc15
	branch !v14 l00101947
	// succ:  l0010193F l00101947
l0010193F:
	v14 = arg1
	v15 = loc13
	Mem0[v14:word32] = v15
	goto l00101955
	// succ:  l00101955
l00101947:
	v14 = loc14
	v15 = 4<32>
	v14 = v14 | v15
	loc10 = v14
	v14 = arg4
	v15 = loc10
	Mem0[v14:word32] = v15
	// succ:  l00101955
l00101955:
	v14 = loc17
	Mem0[0x00140030<p32>:word32] = v14
	return
	// succ:  fn001018CD_exit
l0010195B:
	return
	// succ:  fn001018CD_exit
fn001018CD_exit:


// fn0010195D
// Return size: 0
void fn0010195D(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn0010195D_entry:
	// succ:  l0010195D
l0010195D:
	v18 = Mem0[0x00140030<p32>:word32]
	loc21 = v18
	v18 = Mem0[0x00140030<p32>:word32]
	v19 = 0x10<32>
	v18 = v18 + v19
	Mem0[0x00140030<p32>:word32] = v18
	v18 = Mem0[0x00140030<p32>:word32]
	v19 = Mem0[0x00140034<p32>:word32]
	v20 = v18 >= v19
	branch !v20 l00101976
	// succ:  l00101971 l00101976
l00101971:
	v18 = 0x10<32>
	abortStackOverflow(v18)
	// succ:  l00101976
l00101976:
	v18 = loc21
	v19 = 4<32>
	v18 = v18 + v19
	loc8 = v18
	v18 = loc21
	loc16 = v18
	v18 = arg3
	v18 = Mem0[v18:word32]
	loc17 = v18
	v18 = loc16
	v19 = loc17
	Mem0[v18:word32] = v19
	v18 = loc8
	v19 = loc16
	v19 = Mem0[v19:word32]
	Mem0[v18:word32] = v19
	v18 = arg2
	v19 = loc8
	v21 = arg4
	v22 = arg5
	v23 = 4<32>
	v18 = fn00101E90(v18, v19, v21, v22, v23)
	loc18 = v18
	v18 = arg4
	v18 = Mem0[v18:word32]
	loc19 = v18
	v18 = loc19
	v19 = 4<32>
	v18 = v18 & v19
	loc9 = v18
	v18 = loc9
	v19 = 0<32>
	v20 = v18 == v19
	loc10 = v20
	v18 = loc10
	branch !v18 l00101A0B
	// succ:  l001019C1 l00101A0B
l001019C1:
	v18 = loc18
	v19 = 0x45<32>
	v20 = v18 < v19
	loc11 = v20
	v18 = loc11
	branch !v18 l001019DA
	// succ:  l001019CD l001019DA
l001019CD:
	v18 = loc18
	v19 = 0x7D0<32>
	v18 = v18 + v19
	loc12 = v18
	v18 = loc12
	loc7 = v18
	goto l001019FA
	// succ:  l001019FA
l001019DA:
	v18 = loc18
	v19 = 0x64<32>
	v20 = v18 < v19
	loc13 = v20
	v18 = loc18
	v19 = 0x76C<32>
	v18 = v18 + v19
	loc14 = v18
	v18 = loc13
	branch !v18 l001019F1
	// succ:  l001019EE l001019F1
l001019EE:
	v18 = loc14
	goto l001019F3
	// succ:  l001019F3
l001019F1:
	v18 = loc18
	// succ:  l001019F3
l001019F3:
	loc6 = v18
	v18 = loc6
	loc7 = v18
	// succ:  l001019FA
l001019FA:
	v18 = loc7
	v19 = 0xFFFFF894<32>
	v18 = v18 + v19
	loc15 = v18
	v18 = arg1
	v19 = loc15
	Mem0[v18:word32] = v19
	// succ:  l00101A0B
l00101A0B:
	v18 = loc21
	Mem0[0x00140030<p32>:word32] = v18
	return
	// succ:  fn0010195D_exit
l00101A10:
	return
	// succ:  fn0010195D_exit
fn0010195D_exit:


// fn00101A12
// Return size: 0
void fn00101A12(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn00101A12_entry:
	// succ:  l00101A12
l00101A12:
	v12 = Mem0[0x00140030<p32>:word32]
	loc15 = v12
	v12 = Mem0[0x00140030<p32>:word32]
	v13 = 0x10<32>
	v12 = v12 + v13
	Mem0[0x00140030<p32>:word32] = v12
	v12 = Mem0[0x00140030<p32>:word32]
	v13 = Mem0[0x00140034<p32>:word32]
	v14 = v12 >= v13
	branch !v14 l00101A2B
	// succ:  l00101A26 l00101A2B
l00101A26:
	v12 = 0x10<32>
	abortStackOverflow(v12)
	// succ:  l00101A2B
l00101A2B:
	v12 = loc15
	v13 = 4<32>
	v12 = v12 + v13
	loc6 = v12
	v12 = loc15
	loc10 = v12
	v12 = arg3
	v12 = Mem0[v12:word32]
	loc11 = v12
	v12 = loc10
	v13 = loc11
	Mem0[v12:word32] = v13
	v12 = loc6
	v13 = loc10
	v13 = Mem0[v13:word32]
	Mem0[v12:word32] = v13
	v12 = arg2
	v13 = loc6
	v15 = arg4
	v16 = arg5
	v17 = 4<32>
	v12 = fn00101E90(v12, v13, v15, v16, v17)
	loc12 = v12
	v12 = arg4
	v12 = Mem0[v12:word32]
	loc13 = v12
	v12 = loc13
	v13 = 4<32>
	v12 = v12 & v13
	loc7 = v12
	v12 = loc7
	v13 = 0<32>
	v14 = v12 == v13
	loc8 = v14
	v12 = loc8
	branch !v12 l00101A86
	// succ:  l00101A76 l00101A86
l00101A76:
	v12 = loc12
	v13 = 0xFFFFF894<32>
	v12 = v12 + v13
	loc9 = v12
	v12 = arg1
	v13 = loc9
	Mem0[v12:word32] = v13
	// succ:  l00101A86
l00101A86:
	v12 = loc15
	Mem0[0x00140030<p32>:word32] = v12
	return
	// succ:  fn00101A12_exit
l00101A8B:
	return
	// succ:  fn00101A12_exit
fn00101A12_exit:


// fn00101A8D
// Return size: 0
void fn00101A8D(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn00101A8D_entry:
	// succ:  l00101A8D
l00101A8D:
	v94 = Mem0[0x00140030<p32>:word32]
	loc96 = v94
	v94 = arg1
	v94 = Mem0[v94:word32]
	loc50 = v94
	v94 = loc50
	v95 = 0<32>
	v96 = v94 == v95
	loc61 = v96
	// succ:  l00101AA1
l00101AA1:
	v94 = loc61
	branch !v94 l00101AAC
	// succ:  l00101AA7 l00101AAC
l00101AA7:
	v94 = 0<32>
	loc18 = v94
l00101AAC:
	v94 = loc50
	v95 = 0xC<32>
	v94 = v94 + v95
	loc72 = v94
	v94 = loc72
	v94 = Mem0[v94:word32]
	loc83 = v94
	v94 = loc50
	v95 = 0x10<32>
	v94 = v94 + v95
	loc94 = v94
	v94 = loc94
	v94 = Mem0[v94:word32]
	loc10 = v94
	v94 = loc83
	v95 = loc10
	v96 = v94 == v95
	loc11 = v96
	v94 = loc11
	v94 = v94
	// succ:  l00101AD3 l00101AD3
l00101AD3:
	v94 = loc50
	v94 = Mem0[v94:word32]
	loc12 = v94
	v94 = loc12
	v95 = 0x24<32>
	v94 = v94 + v95
	loc13 = v94
	v94 = loc13
	v94 = Mem0[v94:word32]
	loc14 = v94
	v94 = loc50
	v95 = loc14
	v97 = 0x1FF<32>
	v95 = v95 & v97
	v97 = 0xB00<32>
	v95 = v95 + v97
fn00101A8D_exit:


// fn00101E90
// Return size: 0
word32 fn00101E90(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn00101E90_entry:
	// succ:  l00101E90
l00101E90:
	v179 = Mem0[0x00140030<p32>:word32]
	loc181 = v179
	v179 = arg0
	v179 = Mem0[v179:word32]
	loc120 = v179
	v179 = loc120
	v180 = 0<32>
	v181 = v179 == v180
	loc131 = v181
	// succ:  l00101EA6
l00101EA6:
	v179 = loc131
	branch !v179 l00101EB2
	// succ:  l00101EAD l00101EB2
l00101EAD:
	v179 = 0<32>
	loc88 = v179
l00101EB2:
	v179 = loc120
	v180 = 0xC<32>
	v179 = v179 + v180
	loc142 = v179
	v179 = loc142
	v179 = Mem0[v179:word32]
	loc153 = v179
	v179 = loc120
	v180 = 0x10<32>
	v179 = v179 + v180
	loc164 = v179
	v179 = loc164
	v179 = Mem0[v179:word32]
	loc17 = v179
	v179 = loc153
	v180 = loc17
	v181 = v179 == v180
	loc28 = v181
	v179 = loc28
	v179 = v179
	// succ:  l00101EDF l00101EDF
l00101EDF:
	v179 = loc120
	v179 = Mem0[v179:word32]
	loc39 = v179
	v179 = loc39
	v180 = 0x24<32>
	v179 = v179 + v180
	loc50 = v179
	v179 = loc50
	v179 = Mem0[v179:word32]
	loc61 = v179
	v179 = loc120
	v180 = loc61
	v182 = 0x1FF<32>
	v180 = v180 & v182
	v182 = 0xB00<32>
	v180 = v180 + v182
fn00101E90_exit:


// fn0010268E
// Return size: 0
void fn0010268E(word32 arg0)
fn0010268E_entry:
	// succ:  l0010268E
l0010268E:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	return
	// succ:  fn0010268E_exit
l00102695:
	return
	// succ:  fn0010268E_exit
fn0010268E_exit:


// fn00102697
// Return size: 0
void fn00102697(word32 arg0)
fn00102697_entry:
	// succ:  l00102697
l00102697:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn00102697_exit
l001026A3:
	return
	// succ:  fn00102697_exit
fn00102697_exit:


// fn001026A5
// Return size: 0
word32 fn001026A5(word32 arg0)
fn001026A5_entry:
	// succ:  l001026A5
l001026A5:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 2<32>
	return v4
	// succ:  fn001026A5_exit
l001026AE:
	return v4
	// succ:  fn001026A5_exit
fn001026A5_exit:


// fn001026B0
// Return size: 0
word32 fn001026B0(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn001026B0_entry:
	// succ:  l001026B0
l001026B0:
	v11 = Mem0[0x00140030<p32>:word32]
	loc14 = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = 0x10<32>
	v11 = v11 + v12
	Mem0[0x00140030<p32>:word32] = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = Mem0[0x00140034<p32>:word32]
	v13 = v11 >= v12
	branch !v13 l001026C9
	// succ:  l001026C4 l001026C9
l001026C4:
	v11 = 0x10<32>
	abortStackOverflow(v11)
	// succ:  l001026C9
l001026C9:
	v11 = loc14
	v12 = 0xC<32>
	v11 = v11 + v12
	loc7 = v11
	v11 = loc14
	v12 = 8<32>
	v11 = v11 + v12
	loc6 = v11
	v11 = loc14
	v12 = 4<32>
	v11 = v11 + v12
	loc9 = v11
	v11 = loc14
	loc10 = v11
	v11 = arg1
	v11 = Mem0[v11:word32]
	loc11 = v11
	v11 = loc9
	v12 = loc11
	Mem0[v11:word32] = v12
	v11 = arg2
	v11 = Mem0[v11:word32]
	loc12 = v11
	v11 = loc10
	v12 = loc12
	Mem0[v11:word32] = v12
	v11 = loc6
	v12 = loc9
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = loc7
	v12 = loc10
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = arg0
	v12 = loc6
	v14 = loc7
	v15 = arg3
	v16 = arg4
	v17 = arg5
	v18 = 0x2230<32>
	v19 = 0x2250<32>
	v11 = fn001043BA(v11, v12, v14, v15, v16, v17, v18, v19)
	loc8 = v11
	v11 = loc14
	Mem0[0x00140030<p32>:word32] = v11
	v11 = loc8
	return v11
	// succ:  fn001026B0_exit
l00102732:
	return v11
	// succ:  fn001026B0_exit
fn001026B0_exit:


// fn00102734
// Return size: 0
word32 fn00102734(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn00102734_entry:
	// succ:  l00102734
l00102734:
	v27 = Mem0[0x00140030<p32>:word32]
	loc30 = v27
	v27 = Mem0[0x00140030<p32>:word32]
	v28 = 0x10<32>
	v27 = v27 + v28
	Mem0[0x00140030<p32>:word32] = v27
	v27 = Mem0[0x00140030<p32>:word32]
	v28 = Mem0[0x00140034<p32>:word32]
	v29 = v27 >= v28
	branch !v29 l0010274D
	// succ:  l00102748 l0010274D
l00102748:
	v27 = 0x10<32>
	abortStackOverflow(v27)
	// succ:  l0010274D
l0010274D:
	v27 = loc30
	v28 = 0xC<32>
	v27 = v27 + v28
	loc7 = v27
	v27 = loc30
	v28 = 8<32>
	v27 = v27 + v28
	loc6 = v27
	v27 = loc30
	v28 = 4<32>
	v27 = v27 + v28
	loc25 = v27
	v27 = loc30
	loc26 = v27
	v27 = arg0
	v28 = 8<32>
	v27 = v27 + v28
	loc27 = v27
	v27 = loc27
	v27 = Mem0[v27:word32]
	loc28 = v27
	v27 = loc28
	v28 = 0x14<32>
	v27 = v27 + v28
	loc8 = v27
	v27 = loc8
	v27 = Mem0[v27:word32]
	loc9 = v27
	v27 = loc27
	v28 = loc9
	v30 = 0x1FF<32>
	v28 = v28 & v30
	v30 = 0xB00<32>
	v28 = v28 + v30
fn00102734_exit:


// fn00102842
// Return size: 0
word32 fn00102842(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn00102842_entry:
	// succ:  l00102842
l00102842:
	v16 = Mem0[0x00140030<p32>:word32]
	loc19 = v16
	v16 = Mem0[0x00140030<p32>:word32]
	v17 = 0x10<32>
	v16 = v16 + v17
	Mem0[0x00140030<p32>:word32] = v16
	v16 = Mem0[0x00140030<p32>:word32]
	v17 = Mem0[0x00140034<p32>:word32]
	v18 = v16 >= v17
	branch !v18 l0010285B
	// succ:  l00102856 l0010285B
l00102856:
	v16 = 0x10<32>
	abortStackOverflow(v16)
	// succ:  l0010285B
l0010285B:
	v16 = loc19
	v17 = 8<32>
	v16 = v16 + v17
	loc6 = v16
	v16 = loc19
	v17 = 4<32>
	v16 = v16 + v17
	loc14 = v16
	v16 = loc19
	loc15 = v16
	v16 = arg3
	v16 = fn000E64CA(v16)
	loc16 = v16
	v16 = loc14
	v17 = loc16
	Mem0[v16:word32] = v17
	v16 = 0<32>
	Mem0[0x00140048<p32>:word32] = v16
	v16 = 0x164<32>
	v17 = loc14
	v19 = 0x4C90<32>
	v16 = invoke_iii(v16, v17, v19)
	loc17 = v16
	v16 = Mem0[0x00140048<p32>:word32]
	loc8 = v16
	v16 = 0<32>
	Mem0[0x00140048<p32>:word32] = v16
	v16 = loc8
	v17 = 1<32>
	v16 = v16 & v17
	loc9 = v16
	v16 = loc9
	branch !v16 l001028B2
	// succ:  l0010289F l001028B2
l0010289F:
	v16 = ___cxa_find_matching_catch_2()
	loc12 = v16
	v16 = Mem0[0x00140094<p32>:word32]
	loc13 = v16
	v16 = loc16
	v16 = fn0011B43F(v16)
	v16 = loc12
	___resumeException(v16)
	goto l001028F4
	// succ:  l001028F4
l001028B2:
	v16 = loc16
	v16 = fn0011B43F(v16)
	v16 = arg5
	v17 = 0x18<32>
	v16 = v16 + v17
	loc10 = v16
	v16 = arg2
	v16 = Mem0[v16:word32]
	loc11 = v16
	v16 = loc15
	v17 = loc11
	Mem0[v16:word32] = v17
	v16 = loc6
	v17 = loc15
	v17 = Mem0[v17:word32]
	Mem0[v16:word32] = v17
	v16 = arg0
	v17 = loc10
	v19 = arg1
	v20 = loc6
	v21 = arg4
	v22 = loc17
	fn00104239(v16, v17, v19, v20, v21, v22)
	v16 = arg1
	v16 = Mem0[v16:word32]
	loc7 = v16
	v16 = loc19
	Mem0[0x00140030<p32>:word32] = v16
	v16 = loc7
	return v16
	// succ:  fn00102842_exit
l001028F4:
	v16 = 0<32>
	return v16
	// succ:  fn00102842_exit
l001028F8:
	return v16
	// succ:  fn00102842_exit
fn00102842_exit:


// fn001028FA
// Return size: 0
word32 fn001028FA(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn001028FA_entry:
	// succ:  l001028FA
l001028FA:
	v16 = Mem0[0x00140030<p32>:word32]
	loc19 = v16
	v16 = Mem0[0x00140030<p32>:word32]
	v17 = 0x10<32>
	v16 = v16 + v17
	Mem0[0x00140030<p32>:word32] = v16
	v16 = Mem0[0x00140030<p32>:word32]
	v17 = Mem0[0x00140034<p32>:word32]
	v18 = v16 >= v17
	branch !v18 l00102913
	// succ:  l0010290E l00102913
l0010290E:
	v16 = 0x10<32>
	abortStackOverflow(v16)
	// succ:  l00102913
l00102913:
	v16 = loc19
	v17 = 8<32>
	v16 = v16 + v17
	loc6 = v16
	v16 = loc19
	v17 = 4<32>
	v16 = v16 + v17
	loc14 = v16
	v16 = loc19
	loc15 = v16
	v16 = arg3
	v16 = fn000E64CA(v16)
	loc16 = v16
	v16 = loc14
	v17 = loc16
	Mem0[v16:word32] = v17
	v16 = 0<32>
	Mem0[0x00140048<p32>:word32] = v16
	v16 = 0x164<32>
	v17 = loc14
	v19 = 0x4C90<32>
	v16 = invoke_iii(v16, v17, v19)
	loc17 = v16
	v16 = Mem0[0x00140048<p32>:word32]
	loc8 = v16
	v16 = 0<32>
	Mem0[0x00140048<p32>:word32] = v16
	v16 = loc8
	v17 = 1<32>
	v16 = v16 & v17
	loc9 = v16
	v16 = loc9
	branch !v16 l0010296A
	// succ:  l00102957 l0010296A
l00102957:
	v16 = ___cxa_find_matching_catch_2()
	loc12 = v16
	v16 = Mem0[0x00140094<p32>:word32]
	loc13 = v16
	v16 = loc16
	v16 = fn0011B43F(v16)
	v16 = loc12
	___resumeException(v16)
	goto l001029AC
	// succ:  l001029AC
l0010296A:
	v16 = loc16
	v16 = fn0011B43F(v16)
	v16 = arg5
	v17 = 0x10<32>
	v16 = v16 + v17
	loc10 = v16
	v16 = arg2
	v16 = Mem0[v16:word32]
	loc11 = v16
	v16 = loc15
	v17 = loc11
	Mem0[v16:word32] = v17
	v16 = loc6
	v17 = loc15
	v17 = Mem0[v17:word32]
	Mem0[v16:word32] = v17
	v16 = arg0
	v17 = loc10
	v19 = arg1
	v20 = loc6
	v21 = arg4
	v22 = loc17
	fn001042F6(v16, v17, v19, v20, v21, v22)
	v16 = arg1
	v16 = Mem0[v16:word32]
	loc7 = v16
	v16 = loc19
	Mem0[0x00140030<p32>:word32] = v16
	v16 = loc7
	return v16
	// succ:  fn001028FA_exit
l001029AC:
	v16 = 0<32>
	return v16
	// succ:  fn001028FA_exit
l001029B0:
	return v16
	// succ:  fn001028FA_exit
fn001028FA_exit:


// fn001029B2
// Return size: 0
word32 fn001029B2(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn001029B2_entry:
	// succ:  l001029B2
l001029B2:
	v16 = Mem0[0x00140030<p32>:word32]
	loc19 = v16
	v16 = Mem0[0x00140030<p32>:word32]
	v17 = 0x10<32>
	v16 = v16 + v17
	Mem0[0x00140030<p32>:word32] = v16
	v16 = Mem0[0x00140030<p32>:word32]
	v17 = Mem0[0x00140034<p32>:word32]
	v18 = v16 >= v17
	branch !v18 l001029CB
	// succ:  l001029C6 l001029CB
l001029C6:
	v16 = 0x10<32>
	abortStackOverflow(v16)
	// succ:  l001029CB
l001029CB:
	v16 = loc19
	v17 = 8<32>
	v16 = v16 + v17
	loc6 = v16
	v16 = loc19
	v17 = 4<32>
	v16 = v16 + v17
	loc14 = v16
	v16 = loc19
	loc15 = v16
	v16 = arg3
	v16 = fn000E64CA(v16)
	loc16 = v16
	v16 = loc14
	v17 = loc16
	Mem0[v16:word32] = v17
	v16 = 0<32>
	Mem0[0x00140048<p32>:word32] = v16
	v16 = 0x164<32>
	v17 = loc14
	v19 = 0x4C90<32>
	v16 = invoke_iii(v16, v17, v19)
	loc17 = v16
	v16 = Mem0[0x00140048<p32>:word32]
	loc8 = v16
	v16 = 0<32>
	Mem0[0x00140048<p32>:word32] = v16
	v16 = loc8
	v17 = 1<32>
	v16 = v16 & v17
	loc9 = v16
	v16 = loc9
	branch !v16 l00102A22
	// succ:  l00102A0F l00102A22
l00102A0F:
	v16 = ___cxa_find_matching_catch_2()
	loc12 = v16
	v16 = Mem0[0x00140094<p32>:word32]
	loc13 = v16
	v16 = loc16
	v16 = fn0011B43F(v16)
	v16 = loc12
	___resumeException(v16)
	goto l00102A64
	// succ:  l00102A64
l00102A22:
	v16 = loc16
	v16 = fn0011B43F(v16)
	v16 = arg5
	v17 = 0x14<32>
	v16 = v16 + v17
	loc10 = v16
	v16 = arg2
	v16 = Mem0[v16:word32]
	loc11 = v16
	v16 = loc15
	v17 = loc11
	Mem0[v16:word32] = v17
	v16 = loc6
	v17 = loc15
	v17 = Mem0[v17:word32]
	Mem0[v16:word32] = v17
	v16 = arg0
	v17 = loc10
	v19 = arg1
	v20 = loc6
	v21 = arg4
	v22 = loc17
	fn00105903(v16, v17, v19, v20, v21, v22)
	v16 = arg1
	v16 = Mem0[v16:word32]
	loc7 = v16
	v16 = loc19
	Mem0[0x00140030<p32>:word32] = v16
	v16 = loc7
	return v16
	// succ:  fn001029B2_exit
l00102A64:
	v16 = 0<32>
	return v16
	// succ:  fn001029B2_exit
l00102A68:
	return v16
	// succ:  fn001029B2_exit
fn001029B2_exit:


// fn00102A6A
// Return size: 0
word32 fn00102A6A(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn00102A6A_entry:
	// succ:  l00102A6A
l00102A6A:
	v164 = Mem0[0x00140030<p32>:word32]
	loc169 = v164
	v164 = Mem0[0x00140030<p32>:word32]
	v165 = 0x100<32>
	v164 = v164 + v165
	Mem0[0x00140030<p32>:word32] = v164
	v164 = Mem0[0x00140030<p32>:word32]
	v165 = Mem0[0x00140034<p32>:word32]
	v166 = v164 >= v165
	branch !v166 l00102A86
	// succ:  l00102A80 l00102A86
l00102A80:
	v164 = 0x100<32>
	abortStackOverflow(v164)
	// succ:  l00102A86
l00102A86:
	v164 = loc169
	v165 = 0xF8<32>
	v164 = v164 + v165
	loc32 = v164
	v164 = loc169
	v165 = 0xF4<32>
	v164 = v164 + v165
	loc30 = v164
	v164 = loc169
	v165 = 0xF0<32>
	v164 = v164 + v165
	loc29 = v164
	v164 = loc169
	v165 = 0xEC<32>
	v164 = v164 + v165
	loc28 = v164
	v164 = loc169
	v165 = 0xE8<32>
	v164 = v164 + v165
	loc27 = v164
	v164 = loc169
	v165 = 0xE4<32>
	v164 = v164 + v165
	loc26 = v164
	v164 = loc169
	v165 = 0xE0<32>
	v164 = v164 + v165
	loc25 = v164
	v164 = loc169
	v165 = 0xDC<32>
	v164 = v164 + v165
	loc24 = v164
	v164 = loc169
	v165 = 0xD8<32>
	v164 = v164 + v165
	loc23 = v164
	v164 = loc169
	v165 = 0xD4<32>
	v164 = v164 + v165
	loc22 = v164
	v164 = loc169
	v165 = 0xD0<32>
	v164 = v164 + v165
	loc21 = v164
	v164 = loc169
	v165 = 0xCC<32>
	v164 = v164 + v165
	loc19 = v164
	v164 = loc169
	v165 = 0xC8<32>
	v164 = v164 + v165
	loc18 = v164
	v164 = loc169
	v165 = 0xC4<32>
	v164 = v164 + v165
	loc17 = v164
	v164 = loc169
	v165 = 0xC0<32>
	v164 = v164 + v165
	loc16 = v164
	v164 = loc169
	v165 = 0xBC<32>
	v164 = v164 + v165
	loc15 = v164
	v164 = loc169
	v165 = 0xB8<32>
	v164 = v164 + v165
	loc14 = v164
	v164 = loc169
	v165 = 0xB4<32>
	v164 = v164 + v165
	loc13 = v164
	v164 = loc169
	v165 = 0xB0<32>
	v164 = v164 + v165
	loc12 = v164
	v164 = loc169
	v165 = 0xAC<32>
	v164 = v164 + v165
	loc11 = v164
	v164 = loc169
	v165 = 0xA8<32>
	v164 = v164 + v165
	loc10 = v164
	v164 = loc169
	v165 = 0xA4<32>
	v164 = v164 + v165
	loc38 = v164
	v164 = loc169
	v165 = 0xA0<32>
	v164 = v164 + v165
	loc37 = v164
	v164 = loc169
	v165 = 0x9C<32>
	v164 = v164 + v165
	loc36 = v164
	v164 = loc169
	v165 = 0x98<32>
	v164 = v164 + v165
	loc35 = v164
	v164 = loc169
	v165 = 0x94<32>
	v164 = v164 + v165
	loc34 = v164
	v164 = loc169
	v165 = 0x90<32>
	v164 = v164 + v165
	loc33 = v164
	v164 = loc169
	v165 = 0x8C<32>
	v164 = v164 + v165
	loc31 = v164
	v164 = loc169
	v165 = 0x88<32>
	v164 = v164 + v165
	loc20 = v164
	v164 = loc169
	v165 = 0x84<32>
	v164 = v164 + v165
	loc9 = v164
	v164 = loc169
	v165 = 0x80<32>
	v164 = v164 + v165
	loc8 = v164
	v164 = loc169
	v165 = 0x7C<32>
	v164 = v164 + v165
	loc146 = v164
	v164 = loc169
	v165 = 0x78<32>
	v164 = v164 + v165
	loc157 = v164
	v164 = loc169
	v165 = 0x74<32>
	v164 = v164 + v165
	loc41 = v164
	v164 = loc169
	v165 = 0x70<32>
	v164 = v164 + v165
	loc52 = v164
	v164 = loc169
	v165 = 0x6C<32>
	v164 = v164 + v165
	loc63 = v164
	v164 = loc169
	v165 = 0x68<32>
	v164 = v164 + v165
	loc74 = v164
	v164 = loc169
	v165 = 0x64<32>
	v164 = v164 + v165
	loc80 = v164
	v164 = loc169
	v165 = 0x60<32>
	v164 = v164 + v165
	loc81 = v164
	v164 = loc169
	v165 = 0x5C<32>
	v164 = v164 + v165
	loc82 = v164
	v164 = loc169
	v165 = 0x58<32>
	v164 = v164 + v165
	loc83 = v164
	v164 = loc169
	v165 = 0x54<32>
	v164 = v164 + v165
	loc84 = v164
	v164 = loc169
	v165 = 0x50<32>
	v164 = v164 + v165
	loc85 = v164
	v164 = loc169
	v165 = 0x4C<32>
	v164 = v164 + v165
	loc86 = v164
	v164 = loc169
	v165 = 0x48<32>
	v164 = v164 + v165
	loc87 = v164
	v164 = loc169
	v165 = 0x44<32>
	v164 = v164 + v165
	loc88 = v164
	v164 = loc169
	v165 = 0x40<32>
	v164 = v164 + v165
	loc89 = v164
	v164 = loc169
	v165 = 0x3C<32>
	v164 = v164 + v165
	loc90 = v164
	v164 = loc169
	v165 = 0x38<32>
	v164 = v164 + v165
	loc91 = v164
	v164 = loc169
	v165 = 0x34<32>
	v164 = v164 + v165
	loc92 = v164
	v164 = loc169
	v165 = 0x30<32>
	v164 = v164 + v165
	loc93 = v164
	v164 = loc169
	v165 = 0x2C<32>
	v164 = v164 + v165
	loc94 = v164
	v164 = loc169
	v165 = 0x28<32>
	v164 = v164 + v165
	loc95 = v164
	v164 = loc169
	v165 = 0x24<32>
	v164 = v164 + v165
	loc96 = v164
	v164 = loc169
	v165 = 0x20<32>
	v164 = v164 + v165
	loc97 = v164
	v164 = loc169
	v165 = 0x1C<32>
	v164 = v164 + v165
	loc98 = v164
	v164 = loc169
	v165 = 0x18<32>
	v164 = v164 + v165
	loc99 = v164
	v164 = loc169
	v165 = 0x14<32>
	v164 = v164 + v165
	loc100 = v164
	v164 = loc169
	v165 = 0x10<32>
	v164 = v164 + v165
	loc101 = v164
	v164 = loc169
	v165 = 0xC<32>
	v164 = v164 + v165
	loc102 = v164
	v164 = loc169
	v165 = 8<32>
	v164 = v164 + v165
	loc103 = v164
	v164 = loc169
	v165 = 4<32>
	v164 = v164 + v165
	loc104 = v164
	v164 = loc169
	loc105 = v164
	v164 = arg4
	v165 = 0<32>
	Mem0[v164:word32] = v165
	v164 = arg3
	v164 = fn000E64CA(v164)
	loc106 = v164
	v164 = loc146
	v165 = loc106
	Mem0[v164:word32] = v165
	v164 = 0<32>
	Mem0[0x00140048<p32>:word32] = v164
	v164 = 0x164<32>
	v165 = loc146
	v167 = 0x4C90<32>
	v164 = invoke_iii(v164, v165, v167)
	loc107 = v164
	v164 = Mem0[0x00140048<p32>:word32]
	loc108 = v164
	v164 = 0<32>
	Mem0[0x00140048<p32>:word32] = v164
	v164 = loc108
	v165 = 1<32>
	v164 = v164 & v165
	loc109 = v164
	v164 = loc109
	branch !v164 l00102CFA
	// succ:  l00102CE7 l00102CFA
l00102CE7:
	v164 = ___cxa_find_matching_catch_2()
	loc111 = v164
	v164 = Mem0[0x00140094<p32>:word32]
	loc112 = v164
	v164 = loc106
	v164 = fn0011B43F(v164)
	v164 = loc111
	___resumeException(v164)
	// succ:  l00102CFA
l00102CFA:
	v164 = loc106
	v164 = fn0011B43F(v164)
	v164 = arg6
	v165 = 0x18<32>
	v164 = v164 << v165
	v165 = 0x18<32>
	v164 = v164 >> v165
	loc110 = v164
	// succ:  l00102D0A
l00102D0A:
	v164 = loc110
	v165 = 0x25<32>
	v164 = v164 - v165
	switch (v164) { <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> l00102DA5 l00102DE4 <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> l00102DA7 l00102DE6 l00102E1F <null> <null> <null> <null> l00102DE2 <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> <null> }
	// succ:  l00102DA5 l00102DA7 l00102DE2 l00102DE4 l00102DE6 l00102E1F
l00102DA5:
	// succ:  l00102DA7
l00102DA7:
	v164 = arg5
	v165 = 0x18<32>
	v164 = v164 + v165
	loc113 = v164
	v164 = arg2
	v164 = Mem0[v164:word32]
	loc114 = v164
	v164 = loc157
	v165 = loc114
	Mem0[v164:word32] = v165
	v164 = loc8
	v165 = loc157
	v165 = Mem0[v165:word32]
	Mem0[v164:word32] = v165
	v164 = arg0
	v165 = loc113
	v167 = arg1
	v168 = loc8
	v169 = arg4
	v170 = loc107
	fn00104239(v164, v165, v167, v168, v169, v170)
	v164 = 0x1C<32>
	loc168 = v164
l00102DE1:
	// succ:  l00102DE2
l00102DE2:
	// succ:  l00102DE4
l00102DE4:
	// succ:  l00102DE6
l00102DE6:
	v164 = arg5
	v165 = 0x10<32>
	v164 = v164 + v165
	loc115 = v164
	v164 = arg2
	v164 = Mem0[v164:word32]
	loc116 = v164
	v164 = loc41
	v165 = loc116
	Mem0[v164:word32] = v165
	v164 = loc9
	v165 = loc41
	v165 = Mem0[v165:word32]
	Mem0[v164:word32] = v165
	v164 = arg0
	v165 = loc115
	v167 = arg1
	v168 = loc9
	v169 = arg4
	v170 = loc107
	fn001042F6(v164, v165, v167, v168, v169, v170)
	v164 = 0x1C<32>
	loc168 = v164
l00102E1E:
	// succ:  l00102E1F
l00102E1F:
	v164 = arg0
	v165 = 8<32>
	v164 = v164 + v165
	loc117 = v164
	v164 = loc117
	v164 = Mem0[v164:word32]
	loc118 = v164
	v164 = loc118
	v165 = 0xC<32>
	v164 = v164 + v165
	loc119 = v164
	v164 = loc119
	v164 = Mem0[v164:word32]
	loc120 = v164
	v164 = loc117
	v165 = loc120
	v167 = 0x1FF<32>
	v165 = v165 & v167
	v167 = 0xB00<32>
	v165 = v165 + v167
fn00102A6A_exit:


// fn00103EA9
// Return size: 0
word32 fn00103EA9(word32 arg0)
fn00103EA9_entry:
	// succ:  l00103EA9
l00103EA9:
	v15 = Mem0[0x00140030<p32>:word32]
	loc13 = v15
	v15 = 0x4400<32>
	v16 = Mem0[v15:int8]
	v15 = CONVERT(v16, int8, word32)
	loc1 = v15
	v15 = loc1
	v17 = 0x18<32>
	v15 = v15 << v17
	v17 = 0x18<32>
	v15 = v15 >> v17
	v17 = 0<32>
	v18 = v15 == v17
	loc4 = v18
	// succ:  l00103EC5
l00103EC5:
	v15 = loc4
	branch !v15 l00103F5B
	// succ:  l00103ECB l00103F5B
l00103ECB:
	v15 = 0x4400<32>
	v15 = fn0011EE46(v15)
	loc5 = v15
	v15 = loc5
	v17 = 0<32>
	v18 = v15 == v17
	loc6 = v18
	v15 = loc6
	v18 = v15 == 0<32>
	branch !v18 l00103F5A
	// succ:  l00103EE0 l00103F5A
l00103EE0:
	v15 = 0x5008<32>
	v19 = 0<64>
	Mem0[v15:word64] = v19
	v15 = 0x5008<32>
	v17 = 8<32>
	v15 = v15 + v17
	v17 = 0<32>
	Mem0[v15:word32] = v17
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = 0x19E<32>
	v17 = 0x1DC8<32>
	v15 = invoke_ii(v15, v17)
	loc7 = v15
	v15 = Mem0[0x00140048<p32>:word32]
	loc8 = v15
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = loc8
	v17 = 1<32>
	v15 = v15 & v17
	loc9 = v15
	v15 = loc9
	v18 = v15 == 0<32>
	branch !v18 l00103F4D
	// succ:  l00103F17 l00103F4D
l00103F17:
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = 0x19F<32>
	v17 = 0x5008<32>
	v20 = 0x1DC8<32>
	v21 = loc7
	invoke_viii(v15, v17, v20, v21)
	v15 = Mem0[0x00140048<p32>:word32]
	loc10 = v15
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = loc10
	v17 = 1<32>
	v15 = v15 & v17
	loc11 = v15
	v15 = loc11
	v18 = v15 == 0<32>
	branch !v18 l00103F4C
	// succ:  l00103F3D l00103F4C
l00103F3D:
	v15 = 0x1A0<32>
	v17 = 0x5008<32>
	v20 = Mem0[0x00140044<p32>:word32]
	v15 = ___cxa_atexit(v15, v17, v20)
	goto l00103F5B
	// succ:  l00103F5B
l00103F4C:
	// succ:  l00103F4D
l00103F4D:
	v15 = ___cxa_find_matching_catch_2()
	loc2 = v15
	v15 = Mem0[0x00140094<p32>:word32]
	loc3 = v15
	v15 = loc2
	___resumeException(v15)
	// succ:  l00103F5A
l00103F5A:
	// succ:  l00103F5B
l00103F5B:
	// succ:  l00103F5B
l00103F5B:
	v15 = 0x5008<32>
	return v15
	// succ:  fn00103EA9_exit
l00103F61:
	return v15
	// succ:  fn00103EA9_exit
fn00103EA9_exit:


// fn00103F63
// Return size: 0
word32 fn00103F63(word32 arg0)
fn00103F63_entry:
	// succ:  l00103F63
l00103F63:
	v15 = Mem0[0x00140030<p32>:word32]
	loc13 = v15
	v15 = 0x43F8<32>
	v16 = Mem0[v15:int8]
	v15 = CONVERT(v16, int8, word32)
	loc1 = v15
	v15 = loc1
	v17 = 0x18<32>
	v15 = v15 << v17
	v17 = 0x18<32>
	v15 = v15 >> v17
	v17 = 0<32>
	v18 = v15 == v17
	loc4 = v18
	// succ:  l00103F7F
l00103F7F:
	v15 = loc4
	branch !v15 l00104015
	// succ:  l00103F85 l00104015
l00103F85:
	v15 = 0x43F8<32>
	v15 = fn0011EE46(v15)
	loc5 = v15
	v15 = loc5
	v17 = 0<32>
	v18 = v15 == v17
	loc6 = v18
	v15 = loc6
	v18 = v15 == 0<32>
	branch !v18 l00104014
	// succ:  l00103F9A l00104014
l00103F9A:
	v15 = 0x4FFC<32>
	v19 = 0<64>
	Mem0[v15:word64] = v19
	v15 = 0x4FFC<32>
	v17 = 8<32>
	v15 = v15 + v17
	v17 = 0<32>
	Mem0[v15:word32] = v17
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = 0x19E<32>
	v17 = 0x1D98<32>
	v15 = invoke_ii(v15, v17)
	loc7 = v15
	v15 = Mem0[0x00140048<p32>:word32]
	loc8 = v15
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = loc8
	v17 = 1<32>
	v15 = v15 & v17
	loc9 = v15
	v15 = loc9
	v18 = v15 == 0<32>
	branch !v18 l00104007
	// succ:  l00103FD1 l00104007
l00103FD1:
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = 0x19F<32>
	v17 = 0x4FFC<32>
	v20 = 0x1D98<32>
	v21 = loc7
	invoke_viii(v15, v17, v20, v21)
	v15 = Mem0[0x00140048<p32>:word32]
	loc10 = v15
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = loc10
	v17 = 1<32>
	v15 = v15 & v17
	loc11 = v15
	v15 = loc11
	v18 = v15 == 0<32>
	branch !v18 l00104006
	// succ:  l00103FF7 l00104006
l00103FF7:
	v15 = 0x1A0<32>
	v17 = 0x4FFC<32>
	v20 = Mem0[0x00140044<p32>:word32]
	v15 = ___cxa_atexit(v15, v17, v20)
	goto l00104015
	// succ:  l00104015
l00104006:
	// succ:  l00104007
l00104007:
	v15 = ___cxa_find_matching_catch_2()
	loc2 = v15
	v15 = Mem0[0x00140094<p32>:word32]
	loc3 = v15
	v15 = loc2
	___resumeException(v15)
	// succ:  l00104014
l00104014:
	// succ:  l00104015
l00104015:
	// succ:  l00104015
l00104015:
	v15 = 0x4FFC<32>
	return v15
	// succ:  fn00103F63_exit
l0010401B:
	return v15
	// succ:  fn00103F63_exit
fn00103F63_exit:


// fn0010401D
// Return size: 0
word32 fn0010401D(word32 arg0)
fn0010401D_entry:
	// succ:  l0010401D
l0010401D:
	v15 = Mem0[0x00140030<p32>:word32]
	loc13 = v15
	v15 = 0x43F0<32>
	v16 = Mem0[v15:int8]
	v15 = CONVERT(v16, int8, word32)
	loc1 = v15
	v15 = loc1
	v17 = 0x18<32>
	v15 = v15 << v17
	v17 = 0x18<32>
	v15 = v15 >> v17
	v17 = 0<32>
	v18 = v15 == v17
	loc4 = v18
	// succ:  l00104039
l00104039:
	v15 = loc4
	branch !v15 l001040CF
	// succ:  l0010403F l001040CF
l0010403F:
	v15 = 0x43F0<32>
	v15 = fn0011EE46(v15)
	loc5 = v15
	v15 = loc5
	v17 = 0<32>
	v18 = v15 == v17
	loc6 = v18
	v15 = loc6
	v18 = v15 == 0<32>
	branch !v18 l001040CE
	// succ:  l00104054 l001040CE
l00104054:
	v15 = 0x4FF0<32>
	v19 = 0<64>
	Mem0[v15:word64] = v19
	v15 = 0x4FF0<32>
	v17 = 8<32>
	v15 = v15 + v17
	v17 = 0<32>
	Mem0[v15:word32] = v17
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = 0x19E<32>
	v17 = 0x1D74<32>
	v15 = invoke_ii(v15, v17)
	loc7 = v15
	v15 = Mem0[0x00140048<p32>:word32]
	loc8 = v15
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = loc8
	v17 = 1<32>
	v15 = v15 & v17
	loc9 = v15
	v15 = loc9
	v18 = v15 == 0<32>
	branch !v18 l001040C1
	// succ:  l0010408B l001040C1
l0010408B:
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = 0x19F<32>
	v17 = 0x4FF0<32>
	v20 = 0x1D74<32>
	v21 = loc7
	invoke_viii(v15, v17, v20, v21)
	v15 = Mem0[0x00140048<p32>:word32]
	loc10 = v15
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = loc10
	v17 = 1<32>
	v15 = v15 & v17
	loc11 = v15
	v15 = loc11
	v18 = v15 == 0<32>
	branch !v18 l001040C0
	// succ:  l001040B1 l001040C0
l001040B1:
	v15 = 0x1A0<32>
	v17 = 0x4FF0<32>
	v20 = Mem0[0x00140044<p32>:word32]
	v15 = ___cxa_atexit(v15, v17, v20)
	goto l001040CF
	// succ:  l001040CF
l001040C0:
	// succ:  l001040C1
l001040C1:
	v15 = ___cxa_find_matching_catch_2()
	loc2 = v15
	v15 = Mem0[0x00140094<p32>:word32]
	loc3 = v15
	v15 = loc2
	___resumeException(v15)
	// succ:  l001040CE
l001040CE:
	// succ:  l001040CF
l001040CF:
	// succ:  l001040CF
l001040CF:
	v15 = 0x4FF0<32>
	return v15
	// succ:  fn0010401D_exit
l001040D5:
	return v15
	// succ:  fn0010401D_exit
fn0010401D_exit:


// fn001040D7
// Return size: 0
word32 fn001040D7(word32 arg0)
fn001040D7_entry:
	// succ:  l001040D7
l001040D7:
	v15 = Mem0[0x00140030<p32>:word32]
	loc13 = v15
	v15 = 0x43E8<32>
	v16 = Mem0[v15:int8]
	v15 = CONVERT(v16, int8, word32)
	loc1 = v15
	v15 = loc1
	v17 = 0x18<32>
	v15 = v15 << v17
	v17 = 0x18<32>
	v15 = v15 >> v17
	v17 = 0<32>
	v18 = v15 == v17
	loc4 = v18
	// succ:  l001040F3
l001040F3:
	v15 = loc4
	branch !v15 l00104189
	// succ:  l001040F9 l00104189
l001040F9:
	v15 = 0x43E8<32>
	v15 = fn0011EE46(v15)
	loc5 = v15
	v15 = loc5
	v17 = 0<32>
	v18 = v15 == v17
	loc6 = v18
	v15 = loc6
	v18 = v15 == 0<32>
	branch !v18 l00104188
	// succ:  l0010410E l00104188
l0010410E:
	v15 = 0x4FE4<32>
	v19 = 0<64>
	Mem0[v15:word64] = v19
	v15 = 0x4FE4<32>
	v17 = 8<32>
	v15 = v15 + v17
	v17 = 0<32>
	Mem0[v15:word32] = v17
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = 0x19E<32>
	v17 = 0x1D50<32>
	v15 = invoke_ii(v15, v17)
	loc7 = v15
	v15 = Mem0[0x00140048<p32>:word32]
	loc8 = v15
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = loc8
	v17 = 1<32>
	v15 = v15 & v17
	loc9 = v15
	v15 = loc9
	v18 = v15 == 0<32>
	branch !v18 l0010417B
	// succ:  l00104145 l0010417B
l00104145:
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = 0x19F<32>
	v17 = 0x4FE4<32>
	v20 = 0x1D50<32>
	v21 = loc7
	invoke_viii(v15, v17, v20, v21)
	v15 = Mem0[0x00140048<p32>:word32]
	loc10 = v15
	v15 = 0<32>
	Mem0[0x00140048<p32>:word32] = v15
	v15 = loc10
	v17 = 1<32>
	v15 = v15 & v17
	loc11 = v15
	v15 = loc11
	v18 = v15 == 0<32>
	branch !v18 l0010417A
	// succ:  l0010416B l0010417A
l0010416B:
	v15 = 0x1A0<32>
	v17 = 0x4FE4<32>
	v20 = Mem0[0x00140044<p32>:word32]
	v15 = ___cxa_atexit(v15, v17, v20)
	goto l00104189
	// succ:  l00104189
l0010417A:
	// succ:  l0010417B
l0010417B:
	v15 = ___cxa_find_matching_catch_2()
	loc2 = v15
	v15 = Mem0[0x00140094<p32>:word32]
	loc3 = v15
	v15 = loc2
	___resumeException(v15)
	// succ:  l00104188
l00104188:
	// succ:  l00104189
l00104189:
	// succ:  l00104189
l00104189:
	v15 = 0x4FE4<32>
	return v15
	// succ:  fn001040D7_exit
l0010418F:
	return v15
	// succ:  fn001040D7_exit
fn001040D7_exit:


// fn00104239
// Return size: 0
void fn00104239(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn00104239_entry:
	// succ:  l00104239
l00104239:
	v19 = Mem0[0x00140030<p32>:word32]
	loc22 = v19
	v19 = Mem0[0x00140030<p32>:word32]
	v20 = 0x10<32>
	v19 = v19 + v20
	Mem0[0x00140030<p32>:word32] = v19
	v19 = Mem0[0x00140030<p32>:word32]
	v20 = Mem0[0x00140034<p32>:word32]
	v21 = v19 >= v20
	branch !v21 l00104252
	// succ:  l0010424D l00104252
l0010424D:
	v19 = 0x10<32>
	abortStackOverflow(v19)
	// succ:  l00104252
l00104252:
	v19 = loc22
	v20 = 4<32>
	v19 = v19 + v20
	loc6 = v19
	v19 = loc22
	loc17 = v19
	v19 = arg0
	v20 = 8<32>
	v19 = v19 + v20
	loc18 = v19
	v19 = loc18
	v19 = Mem0[v19:word32]
	loc19 = v19
	v19 = loc19
	v19 = Mem0[v19:word32]
	loc20 = v19
	v19 = loc18
	v20 = loc20
	v22 = 0x1FF<32>
	v20 = v20 & v22
	v22 = 0xB00<32>
	v20 = v20 + v22
fn00104239_exit:


// fn001042F6
// Return size: 0
void fn001042F6(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn001042F6_entry:
	// succ:  l001042F6
l001042F6:
	v20 = Mem0[0x00140030<p32>:word32]
	loc23 = v20
	v20 = Mem0[0x00140030<p32>:word32]
	v21 = 0x10<32>
	v20 = v20 + v21
	Mem0[0x00140030<p32>:word32] = v20
	v20 = Mem0[0x00140030<p32>:word32]
	v21 = Mem0[0x00140034<p32>:word32]
	v22 = v20 >= v21
	branch !v22 l0010430F
	// succ:  l0010430A l0010430F
l0010430A:
	v20 = 0x10<32>
	abortStackOverflow(v20)
	// succ:  l0010430F
l0010430F:
	v20 = loc23
	v21 = 4<32>
	v20 = v20 + v21
	loc6 = v20
	v20 = loc23
	loc18 = v20
	v20 = arg0
	v21 = 8<32>
	v20 = v20 + v21
	loc19 = v20
	v20 = loc19
	v20 = Mem0[v20:word32]
	loc20 = v20
	v20 = loc20
	v21 = 4<32>
	v20 = v20 + v21
	loc21 = v20
	v20 = loc21
	v20 = Mem0[v20:word32]
	loc7 = v20
	v20 = loc19
	v21 = loc7
	v23 = 0x1FF<32>
	v21 = v21 & v23
	v23 = 0xB00<32>
	v21 = v21 + v23
fn001042F6_exit:


// fn001043BA
// Return size: 0
word32 fn001043BA(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7)
fn001043BA_entry:
	// succ:  l001043BA
l001043BA:
	v220 = Mem0[0x00140030<p32>:word32]
	loc225 = v220
	v220 = Mem0[0x00140030<p32>:word32]
	v221 = 0x20<32>
	v220 = v220 + v221
	Mem0[0x00140030<p32>:word32] = v220
	v220 = Mem0[0x00140030<p32>:word32]
	v221 = Mem0[0x00140034<p32>:word32]
	v222 = v220 >= v221
	branch !v222 l001043D4
	// succ:  l001043CF l001043D4
l001043CF:
	v220 = 0x20<32>
	abortStackOverflow(v220)
	// succ:  l001043D4
l001043D4:
	v220 = loc225
	v221 = 0x10<32>
	v220 = v220 + v221
	loc24 = v220
	v220 = loc225
	v221 = 0xC<32>
	v220 = v220 + v221
	loc23 = v220
	v220 = loc225
	v221 = 8<32>
	v220 = v220 + v221
	loc199 = v220
	v220 = loc225
	v221 = 4<32>
	v220 = v220 + v221
	loc210 = v220
	v220 = loc225
	loc34 = v220
	v220 = arg3
	v220 = fn000E64CA(v220)
	loc45 = v220
	v220 = loc199
	v221 = loc45
	Mem0[v220:word32] = v221
	v220 = 0<32>
	Mem0[0x00140048<p32>:word32] = v220
	v220 = 0x164<32>
	v221 = loc199
	v223 = 0x4C90<32>
	v220 = invoke_iii(v220, v221, v223)
	loc56 = v220
	v220 = Mem0[0x00140048<p32>:word32]
	loc67 = v220
	v220 = 0<32>
	Mem0[0x00140048<p32>:word32] = v220
	v220 = loc67
	v221 = 1<32>
	v220 = v220 & v221
	loc78 = v220
	v220 = loc78
	branch !v220 l00104445
	// succ:  l0010442F l00104445
l0010442F:
	v220 = ___cxa_find_matching_catch_2()
	loc165 = v220
	v220 = Mem0[0x00140094<p32>:word32]
	loc166 = v220
	v220 = loc45
	v220 = fn0011B43F(v220)
	v220 = loc165
	___resumeException(v220)
	// succ:  l00104445
l00104445:
	v220 = loc45
	v220 = fn0011B43F(v220)
	v220 = arg4
	v221 = 0<32>
	Mem0[v220:word32] = v221
	v220 = arg6
	loc16 = v220
	v220 = 0<32>
	loc26 = v220
	// succ:  l0010445C
l0010445C:
	v220 = loc16
	v221 = arg7
	v222 = v220 != v221
	loc89 = v222
	v220 = loc26
	loc111 = v220
	// succ:  l0010446B
l0010446B:
	v220 = loc111
	v221 = 0<32>
	v222 = v220 == v221
	loc100 = v222
	v220 = loc89
	v221 = loc100
	v220 = v220 & v221
	loc221 = v220
	v220 = arg1
	v220 = Mem0[v220:word32]
	loc122 = v220
	v220 = loc221
	v222 = v220 == 0<32>
	branch !v222 l00104490
	// succ:  l00104489 l00104490
l00104489:
	v220 = loc122
	loc28 = v220
l00104490:
	v220 = loc122
	v221 = 0<32>
	v222 = v220 == v221
	loc133 = v222
	v220 = loc122
	loc139 = v220
	v220 = loc133
	branch !v220 l001044B2
	// succ:  l001044A2 l001044B2
l001044A2:
	v220 = 0<32>
	loc74 = v220
	v220 = 1<32>
	loc135 = v220
	v220 = loc139
	loc190 = v220
l001044B2:
	v220 = loc122
	v221 = 0xC<32>
	v220 = v220 + v221
	loc140 = v220
	v220 = loc140
	v220 = Mem0[v220:word32]
	loc141 = v220
	v220 = loc122
	v221 = 0x10<32>
	v220 = v220 + v221
	loc142 = v220
	v220 = loc142
	v220 = Mem0[v220:word32]
	loc143 = v220
	v220 = loc141
	v221 = loc143
	v222 = v220 == v221
	loc144 = v222
	v220 = loc144
	v220 = v220
	// succ:  l001044E3 l001044E3
l001044E3:
	v220 = loc122
	v220 = Mem0[v220:word32]
	loc145 = v220
	v220 = loc145
	v221 = 0x24<32>
	v220 = v220 + v221
	loc146 = v220
	v220 = loc146
	v220 = Mem0[v220:word32]
	loc147 = v220
	v220 = loc122
	v221 = loc147
	v223 = 0x1FF<32>
	v221 = v221 & v223
	v223 = 0xB00<32>
	v221 = v221 + v223
fn001043BA_exit:


// fn00104EDE
// Return size: 0
void fn00104EDE(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn00104EDE_entry:
	// succ:  l00104EDE
l00104EDE:
	v15 = Mem0[0x00140030<p32>:word32]
	loc18 = v15
	v15 = Mem0[0x00140030<p32>:word32]
	v16 = 0x10<32>
	v15 = v15 + v16
	Mem0[0x00140030<p32>:word32] = v15
	v15 = Mem0[0x00140030<p32>:word32]
	v16 = Mem0[0x00140034<p32>:word32]
	v17 = v15 >= v16
	branch !v17 l00104EF7
	// succ:  l00104EF2 l00104EF7
l00104EF2:
	v15 = 0x10<32>
	abortStackOverflow(v15)
	// succ:  l00104EF7
l00104EF7:
	v15 = loc18
	v16 = 4<32>
	v15 = v15 + v16
	loc6 = v15
	v15 = loc18
	loc13 = v15
	v15 = arg3
	v15 = Mem0[v15:word32]
	loc14 = v15
	v15 = loc13
	v16 = loc14
	Mem0[v15:word32] = v16
	v15 = loc6
	v16 = loc13
	v16 = Mem0[v16:word32]
	Mem0[v15:word32] = v16
	v15 = arg2
	v16 = loc6
	v18 = arg4
	v19 = arg5
	v20 = 2<32>
	v15 = fn00105E65(v15, v16, v18, v19, v20)
	loc15 = v15
	v15 = arg4
	v15 = Mem0[v15:word32]
	loc16 = v15
	v15 = loc16
	v16 = 4<32>
	v15 = v15 & v16
	loc8 = v15
	v15 = loc8
	v16 = 0<32>
	v17 = v15 == v16
	loc9 = v17
	v15 = loc15
	v16 = 0xFFFFFFFF<32>
	v15 = v15 + v16
	loc7 = v15
	v15 = loc7
	v16 = 0x1F<32>
	v17 = v15 <u v16
	loc10 = v17
	v15 = loc10
	v16 = loc9
	v15 = v15 & v16
	loc11 = v15
	v15 = loc11
	branch !v15 l00104F5F
	// succ:  l00104F57 l00104F5F
l00104F57:
	v15 = arg1
	v16 = loc15
	Mem0[v15:word32] = v16
	goto l00104F6D
	// succ:  l00104F6D
l00104F5F:
	v15 = loc16
	v16 = 4<32>
	v15 = v15 | v16
	loc12 = v15
	v15 = arg4
	v16 = loc12
	Mem0[v15:word32] = v16
	// succ:  l00104F6D
l00104F6D:
	v15 = loc18
	Mem0[0x00140030<p32>:word32] = v15
	return
	// succ:  fn00104EDE_exit
l00104F73:
	return
	// succ:  fn00104EDE_exit
fn00104EDE_exit:


// fn00104F75
// Return size: 0
void fn00104F75(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn00104F75_entry:
	// succ:  l00104F75
l00104F75:
	v14 = Mem0[0x00140030<p32>:word32]
	loc17 = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = 0x10<32>
	v14 = v14 + v15
	Mem0[0x00140030<p32>:word32] = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = Mem0[0x00140034<p32>:word32]
	v16 = v14 >= v15
	branch !v16 l00104F8E
	// succ:  l00104F89 l00104F8E
l00104F89:
	v14 = 0x10<32>
	abortStackOverflow(v14)
	// succ:  l00104F8E
l00104F8E:
	v14 = loc17
	v15 = 4<32>
	v14 = v14 + v15
	loc6 = v14
	v14 = loc17
	loc11 = v14
	v14 = arg3
	v14 = Mem0[v14:word32]
	loc12 = v14
	v14 = loc11
	v15 = loc12
	Mem0[v14:word32] = v15
	v14 = loc6
	v15 = loc11
	v15 = Mem0[v15:word32]
	Mem0[v14:word32] = v15
	v14 = arg2
	v15 = loc6
	v17 = arg4
	v18 = arg5
	v19 = 2<32>
	v14 = fn00105E65(v14, v15, v17, v18, v19)
	loc13 = v14
	v14 = arg4
	v14 = Mem0[v14:word32]
	loc14 = v14
	v14 = loc14
	v15 = 4<32>
	v14 = v14 & v15
	loc7 = v14
	v14 = loc7
	v15 = 0<32>
	v16 = v14 == v15
	loc8 = v16
	v14 = loc13
	v15 = 0x18<32>
	v16 = v14 < v15
	loc9 = v16
	v14 = loc9
	v15 = loc8
	v14 = v14 & v15
	loc15 = v14
	v14 = loc15
	branch !v14 l00104FEF
	// succ:  l00104FE7 l00104FEF
l00104FE7:
	v14 = arg1
	v15 = loc13
	Mem0[v14:word32] = v15
	goto l00104FFD
	// succ:  l00104FFD
l00104FEF:
	v14 = loc14
	v15 = 4<32>
	v14 = v14 | v15
	loc10 = v14
	v14 = arg4
	v15 = loc10
	Mem0[v14:word32] = v15
	// succ:  l00104FFD
l00104FFD:
	v14 = loc17
	Mem0[0x00140030<p32>:word32] = v14
	return
	// succ:  fn00104F75_exit
l00105003:
	return
	// succ:  fn00104F75_exit
fn00104F75_exit:


// fn00105005
// Return size: 0
void fn00105005(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn00105005_entry:
	// succ:  l00105005
l00105005:
	v15 = Mem0[0x00140030<p32>:word32]
	loc18 = v15
	v15 = Mem0[0x00140030<p32>:word32]
	v16 = 0x10<32>
	v15 = v15 + v16
	Mem0[0x00140030<p32>:word32] = v15
	v15 = Mem0[0x00140030<p32>:word32]
	v16 = Mem0[0x00140034<p32>:word32]
	v17 = v15 >= v16
	branch !v17 l0010501E
	// succ:  l00105019 l0010501E
l00105019:
	v15 = 0x10<32>
	abortStackOverflow(v15)
	// succ:  l0010501E
l0010501E:
	v15 = loc18
	v16 = 4<32>
	v15 = v15 + v16
	loc6 = v15
	v15 = loc18
	loc13 = v15
	v15 = arg3
	v15 = Mem0[v15:word32]
	loc14 = v15
	v15 = loc13
	v16 = loc14
	Mem0[v15:word32] = v16
	v15 = loc6
	v16 = loc13
	v16 = Mem0[v16:word32]
	Mem0[v15:word32] = v16
	v15 = arg2
	v16 = loc6
	v18 = arg4
	v19 = arg5
	v20 = 2<32>
	v15 = fn00105E65(v15, v16, v18, v19, v20)
	loc15 = v15
	v15 = arg4
	v15 = Mem0[v15:word32]
	loc16 = v15
	v15 = loc16
	v16 = 4<32>
	v15 = v15 & v16
	loc8 = v15
	v15 = loc8
	v16 = 0<32>
	v17 = v15 == v16
	loc9 = v17
	v15 = loc15
	v16 = 0xFFFFFFFF<32>
	v15 = v15 + v16
	loc7 = v15
	v15 = loc7
	v16 = 0xC<32>
	v17 = v15 <u v16
	loc10 = v17
	v15 = loc10
	v16 = loc9
	v15 = v15 & v16
	loc11 = v15
	v15 = loc11
	branch !v15 l00105086
	// succ:  l0010507E l00105086
l0010507E:
	v15 = arg1
	v16 = loc15
	Mem0[v15:word32] = v16
	goto l00105094
	// succ:  l00105094
l00105086:
	v15 = loc16
	v16 = 4<32>
	v15 = v15 | v16
	loc12 = v15
	v15 = arg4
	v16 = loc12
	Mem0[v15:word32] = v16
	// succ:  l00105094
l00105094:
	v15 = loc18
	Mem0[0x00140030<p32>:word32] = v15
	return
	// succ:  fn00105005_exit
l0010509A:
	return
	// succ:  fn00105005_exit
fn00105005_exit:


// fn0010509C
// Return size: 0
void fn0010509C(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn0010509C_entry:
	// succ:  l0010509C
l0010509C:
	v14 = Mem0[0x00140030<p32>:word32]
	loc17 = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = 0x10<32>
	v14 = v14 + v15
	Mem0[0x00140030<p32>:word32] = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = Mem0[0x00140034<p32>:word32]
	v16 = v14 >= v15
	branch !v16 l001050B5
	// succ:  l001050B0 l001050B5
l001050B0:
	v14 = 0x10<32>
	abortStackOverflow(v14)
	// succ:  l001050B5
l001050B5:
	v14 = loc17
	v15 = 4<32>
	v14 = v14 + v15
	loc6 = v14
	v14 = loc17
	loc11 = v14
	v14 = arg3
	v14 = Mem0[v14:word32]
	loc12 = v14
	v14 = loc11
	v15 = loc12
	Mem0[v14:word32] = v15
	v14 = loc6
	v15 = loc11
	v15 = Mem0[v15:word32]
	Mem0[v14:word32] = v15
	v14 = arg2
	v15 = loc6
	v17 = arg4
	v18 = arg5
	v19 = 3<32>
	v14 = fn00105E65(v14, v15, v17, v18, v19)
	loc13 = v14
	v14 = arg4
	v14 = Mem0[v14:word32]
	loc14 = v14
	v14 = loc14
	v15 = 4<32>
	v14 = v14 & v15
	loc7 = v14
	v14 = loc7
	v15 = 0<32>
	v16 = v14 == v15
	loc8 = v16
	v14 = loc13
	v15 = 0x16E<32>
	v16 = v14 < v15
	loc9 = v16
	v14 = loc9
	v15 = loc8
	v14 = v14 & v15
	loc15 = v14
	v14 = loc15
	branch !v14 l00105117
	// succ:  l0010510F l00105117
l0010510F:
	v14 = arg1
	v15 = loc13
	Mem0[v14:word32] = v15
	goto l00105125
	// succ:  l00105125
l00105117:
	v14 = loc14
	v15 = 4<32>
	v14 = v14 | v15
	loc10 = v14
	v14 = arg4
	v15 = loc10
	Mem0[v14:word32] = v15
	// succ:  l00105125
l00105125:
	v14 = loc17
	Mem0[0x00140030<p32>:word32] = v14
	return
	// succ:  fn0010509C_exit
l0010512B:
	return
	// succ:  fn0010509C_exit
fn0010509C_exit:


// fn0010512D
// Return size: 0
void fn0010512D(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn0010512D_entry:
	// succ:  l0010512D
l0010512D:
	v15 = Mem0[0x00140030<p32>:word32]
	loc18 = v15
	v15 = Mem0[0x00140030<p32>:word32]
	v16 = 0x10<32>
	v15 = v15 + v16
	Mem0[0x00140030<p32>:word32] = v15
	v15 = Mem0[0x00140030<p32>:word32]
	v16 = Mem0[0x00140034<p32>:word32]
	v17 = v15 >= v16
	branch !v17 l00105146
	// succ:  l00105141 l00105146
l00105141:
	v15 = 0x10<32>
	abortStackOverflow(v15)
	// succ:  l00105146
l00105146:
	v15 = loc18
	v16 = 4<32>
	v15 = v15 + v16
	loc6 = v15
	v15 = loc18
	loc12 = v15
	v15 = arg3
	v15 = Mem0[v15:word32]
	loc13 = v15
	v15 = loc12
	v16 = loc13
	Mem0[v15:word32] = v16
	v15 = loc6
	v16 = loc12
	v16 = Mem0[v16:word32]
	Mem0[v15:word32] = v16
	v15 = arg2
	v16 = loc6
	v18 = arg4
	v19 = arg5
	v20 = 2<32>
	v15 = fn00105E65(v15, v16, v18, v19, v20)
	loc14 = v15
	v15 = arg4
	v15 = Mem0[v15:word32]
	loc15 = v15
	v15 = loc15
	v16 = 4<32>
	v15 = v15 & v16
	loc7 = v15
	v15 = loc7
	v16 = 0<32>
	v17 = v15 == v16
	loc8 = v17
	v15 = loc14
	v16 = 0xD<32>
	v17 = v15 < v16
	loc9 = v17
	v15 = loc9
	v16 = loc8
	v15 = v15 & v16
	loc16 = v15
	v15 = loc16
	branch !v15 l001051AE
	// succ:  l0010519F l001051AE
l0010519F:
	v15 = loc14
	v16 = 0xFFFFFFFF<32>
	v15 = v15 + v16
	loc10 = v15
	v15 = arg1
	v16 = loc10
	Mem0[v15:word32] = v16
	goto l001051BC
	// succ:  l001051BC
l001051AE:
	v15 = loc15
	v16 = 4<32>
	v15 = v15 | v16
	loc11 = v15
	v15 = arg4
	v16 = loc11
	Mem0[v15:word32] = v16
	// succ:  l001051BC
l001051BC:
	v15 = loc18
	Mem0[0x00140030<p32>:word32] = v15
	return
	// succ:  fn0010512D_exit
l001051C2:
	return
	// succ:  fn0010512D_exit
fn0010512D_exit:


// fn001051C4
// Return size: 0
void fn001051C4(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn001051C4_entry:
	// succ:  l001051C4
l001051C4:
	v14 = Mem0[0x00140030<p32>:word32]
	loc17 = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = 0x10<32>
	v14 = v14 + v15
	Mem0[0x00140030<p32>:word32] = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = Mem0[0x00140034<p32>:word32]
	v16 = v14 >= v15
	branch !v16 l001051DD
	// succ:  l001051D8 l001051DD
l001051D8:
	v14 = 0x10<32>
	abortStackOverflow(v14)
	// succ:  l001051DD
l001051DD:
	v14 = loc17
	v15 = 4<32>
	v14 = v14 + v15
	loc6 = v14
	v14 = loc17
	loc11 = v14
	v14 = arg3
	v14 = Mem0[v14:word32]
	loc12 = v14
	v14 = loc11
	v15 = loc12
	Mem0[v14:word32] = v15
	v14 = loc6
	v15 = loc11
	v15 = Mem0[v15:word32]
	Mem0[v14:word32] = v15
	v14 = arg2
	v15 = loc6
	v17 = arg4
	v18 = arg5
	v19 = 2<32>
	v14 = fn00105E65(v14, v15, v17, v18, v19)
	loc13 = v14
	v14 = arg4
	v14 = Mem0[v14:word32]
	loc14 = v14
	v14 = loc14
	v15 = 4<32>
	v14 = v14 & v15
	loc7 = v14
	v14 = loc7
	v15 = 0<32>
	v16 = v14 == v15
	loc8 = v16
	v14 = loc13
	v15 = 0x3C<32>
	v16 = v14 < v15
	loc9 = v16
	v14 = loc9
	v15 = loc8
	v14 = v14 & v15
	loc15 = v14
	v14 = loc15
	branch !v14 l0010523E
	// succ:  l00105236 l0010523E
l00105236:
	v14 = arg1
	v15 = loc13
	Mem0[v14:word32] = v15
	goto l0010524C
	// succ:  l0010524C
l0010523E:
	v14 = loc14
	v15 = 4<32>
	v14 = v14 | v15
	loc10 = v14
	v14 = arg4
	v15 = loc10
	Mem0[v14:word32] = v15
	// succ:  l0010524C
l0010524C:
	v14 = loc17
	Mem0[0x00140030<p32>:word32] = v14
	return
	// succ:  fn001051C4_exit
l00105252:
	return
	// succ:  fn001051C4_exit
fn001051C4_exit:


// fn00105254
// Return size: 0
void fn00105254(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn00105254_entry:
	// succ:  l00105254
l00105254:
	v95 = Mem0[0x00140030<p32>:word32]
	loc97 = v95
	// succ:  l0010525C
l0010525C:
	v95 = arg1
	v95 = Mem0[v95:word32]
	loc53 = v95
	v95 = loc53
	v96 = 0<32>
	v97 = v95 == v96
	loc64 = v97
	// succ:  l0010526C
l0010526C:
	v95 = loc64
	branch !v95 l00105277
	// succ:  l00105272 l00105277
l00105272:
	v95 = 1<32>
	loc90 = v95
l00105277:
	v95 = loc53
	v96 = 0xC<32>
	v95 = v95 + v96
	loc75 = v95
	v95 = loc75
	v95 = Mem0[v95:word32]
	loc86 = v95
	v95 = loc53
	v96 = 0x10<32>
	v95 = v95 + v96
	loc93 = v95
	v95 = loc93
	v95 = Mem0[v95:word32]
	loc13 = v95
	v95 = loc86
	v96 = loc13
	v97 = v95 == v96
	loc14 = v97
	v95 = loc14
	v95 = v95
	// succ:  l0010529E l0010529E
l0010529E:
	v95 = loc53
	v95 = Mem0[v95:word32]
	loc15 = v95
	v95 = loc15
	v96 = 0x24<32>
	v95 = v95 + v96
	loc16 = v95
	v95 = loc16
	v95 = Mem0[v95:word32]
	loc17 = v95
	v95 = loc53
	v96 = loc17
	v98 = 0x1FF<32>
	v96 = v96 & v98
	v98 = 0xB00<32>
	v96 = v96 + v98
fn00105254_exit:


// fn00105640
// Return size: 0
void fn00105640(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn00105640_entry:
	// succ:  l00105640
l00105640:
	v45 = Mem0[0x00140030<p32>:word32]
	loc48 = v45
	v45 = Mem0[0x00140030<p32>:word32]
	v46 = 0x10<32>
	v45 = v45 + v46
	Mem0[0x00140030<p32>:word32] = v45
	v45 = Mem0[0x00140030<p32>:word32]
	v46 = Mem0[0x00140034<p32>:word32]
	v47 = v45 >= v46
	branch !v47 l00105659
	// succ:  l00105654 l00105659
l00105654:
	v45 = 0x10<32>
	abortStackOverflow(v45)
	// succ:  l00105659
l00105659:
	v45 = loc48
	v46 = 4<32>
	v45 = v45 + v46
	loc6 = v45
	v45 = loc48
	loc41 = v45
	v45 = arg0
	v46 = 8<32>
	v45 = v45 + v46
	loc42 = v45
	v45 = loc42
	v45 = Mem0[v45:word32]
	loc43 = v45
	v45 = loc43
	v46 = 8<32>
	v45 = v45 + v46
	loc44 = v45
	v45 = loc44
	v45 = Mem0[v45:word32]
	loc7 = v45
	v45 = loc42
	v46 = loc7
	v48 = 0x1FF<32>
	v46 = v46 & v48
	v48 = 0xB00<32>
	v46 = v46 + v48
fn00105640_exit:


// fn001057E3
// Return size: 0
void fn001057E3(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn001057E3_entry:
	// succ:  l001057E3
l001057E3:
	v14 = Mem0[0x00140030<p32>:word32]
	loc17 = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = 0x10<32>
	v14 = v14 + v15
	Mem0[0x00140030<p32>:word32] = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = Mem0[0x00140034<p32>:word32]
	v16 = v14 >= v15
	branch !v16 l001057FC
	// succ:  l001057F7 l001057FC
l001057F7:
	v14 = 0x10<32>
	abortStackOverflow(v14)
	// succ:  l001057FC
l001057FC:
	v14 = loc17
	v15 = 4<32>
	v14 = v14 + v15
	loc6 = v14
	v14 = loc17
	loc11 = v14
	v14 = arg3
	v14 = Mem0[v14:word32]
	loc12 = v14
	v14 = loc11
	v15 = loc12
	Mem0[v14:word32] = v15
	v14 = loc6
	v15 = loc11
	v15 = Mem0[v15:word32]
	Mem0[v14:word32] = v15
	v14 = arg2
	v15 = loc6
	v17 = arg4
	v18 = arg5
	v19 = 2<32>
	v14 = fn00105E65(v14, v15, v17, v18, v19)
	loc13 = v14
	v14 = arg4
	v14 = Mem0[v14:word32]
	loc14 = v14
	v14 = loc14
	v15 = 4<32>
	v14 = v14 & v15
	loc7 = v14
	v14 = loc7
	v15 = 0<32>
	v16 = v14 == v15
	loc8 = v16
	v14 = loc13
	v15 = 0x3D<32>
	v16 = v14 < v15
	loc9 = v16
	v14 = loc9
	v15 = loc8
	v14 = v14 & v15
	loc15 = v14
	v14 = loc15
	branch !v14 l0010585D
	// succ:  l00105855 l0010585D
l00105855:
	v14 = arg1
	v15 = loc13
	Mem0[v14:word32] = v15
	goto l0010586B
	// succ:  l0010586B
l0010585D:
	v14 = loc14
	v15 = 4<32>
	v14 = v14 | v15
	loc10 = v14
	v14 = arg4
	v15 = loc10
	Mem0[v14:word32] = v15
	// succ:  l0010586B
l0010586B:
	v14 = loc17
	Mem0[0x00140030<p32>:word32] = v14
	return
	// succ:  fn001057E3_exit
l00105871:
	return
	// succ:  fn001057E3_exit
fn001057E3_exit:


// fn00105873
// Return size: 0
void fn00105873(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn00105873_entry:
	// succ:  l00105873
l00105873:
	v14 = Mem0[0x00140030<p32>:word32]
	loc17 = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = 0x10<32>
	v14 = v14 + v15
	Mem0[0x00140030<p32>:word32] = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = Mem0[0x00140034<p32>:word32]
	v16 = v14 >= v15
	branch !v16 l0010588C
	// succ:  l00105887 l0010588C
l00105887:
	v14 = 0x10<32>
	abortStackOverflow(v14)
	// succ:  l0010588C
l0010588C:
	v14 = loc17
	v15 = 4<32>
	v14 = v14 + v15
	loc6 = v14
	v14 = loc17
	loc11 = v14
	v14 = arg3
	v14 = Mem0[v14:word32]
	loc12 = v14
	v14 = loc11
	v15 = loc12
	Mem0[v14:word32] = v15
	v14 = loc6
	v15 = loc11
	v15 = Mem0[v15:word32]
	Mem0[v14:word32] = v15
	v14 = arg2
	v15 = loc6
	v17 = arg4
	v18 = arg5
	v19 = 1<32>
	v14 = fn00105E65(v14, v15, v17, v18, v19)
	loc13 = v14
	v14 = arg4
	v14 = Mem0[v14:word32]
	loc14 = v14
	v14 = loc14
	v15 = 4<32>
	v14 = v14 & v15
	loc7 = v14
	v14 = loc7
	v15 = 0<32>
	v16 = v14 == v15
	loc8 = v16
	v14 = loc13
	v15 = 7<32>
	v16 = v14 < v15
	loc9 = v16
	v14 = loc9
	v15 = loc8
	v14 = v14 & v15
	loc15 = v14
	v14 = loc15
	branch !v14 l001058ED
	// succ:  l001058E5 l001058ED
l001058E5:
	v14 = arg1
	v15 = loc13
	Mem0[v14:word32] = v15
	goto l001058FB
	// succ:  l001058FB
l001058ED:
	v14 = loc14
	v15 = 4<32>
	v14 = v14 | v15
	loc10 = v14
	v14 = arg4
	v15 = loc10
	Mem0[v14:word32] = v15
	// succ:  l001058FB
l001058FB:
	v14 = loc17
	Mem0[0x00140030<p32>:word32] = v14
	return
	// succ:  fn00105873_exit
l00105901:
	return
	// succ:  fn00105873_exit
fn00105873_exit:


// fn00105903
// Return size: 0
void fn00105903(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn00105903_entry:
	// succ:  l00105903
l00105903:
	v18 = Mem0[0x00140030<p32>:word32]
	loc21 = v18
	v18 = Mem0[0x00140030<p32>:word32]
	v19 = 0x10<32>
	v18 = v18 + v19
	Mem0[0x00140030<p32>:word32] = v18
	v18 = Mem0[0x00140030<p32>:word32]
	v19 = Mem0[0x00140034<p32>:word32]
	v20 = v18 >= v19
	branch !v20 l0010591C
	// succ:  l00105917 l0010591C
l00105917:
	v18 = 0x10<32>
	abortStackOverflow(v18)
	// succ:  l0010591C
l0010591C:
	v18 = loc21
	v19 = 4<32>
	v18 = v18 + v19
	loc8 = v18
	v18 = loc21
	loc16 = v18
	v18 = arg3
	v18 = Mem0[v18:word32]
	loc17 = v18
	v18 = loc16
	v19 = loc17
	Mem0[v18:word32] = v19
	v18 = loc8
	v19 = loc16
	v19 = Mem0[v19:word32]
	Mem0[v18:word32] = v19
	v18 = arg2
	v19 = loc8
	v21 = arg4
	v22 = arg5
	v23 = 4<32>
	v18 = fn00105E65(v18, v19, v21, v22, v23)
	loc18 = v18
	v18 = arg4
	v18 = Mem0[v18:word32]
	loc19 = v18
	v18 = loc19
	v19 = 4<32>
	v18 = v18 & v19
	loc9 = v18
	v18 = loc9
	v19 = 0<32>
	v20 = v18 == v19
	loc10 = v20
	v18 = loc10
	branch !v18 l001059B1
	// succ:  l00105967 l001059B1
l00105967:
	v18 = loc18
	v19 = 0x45<32>
	v20 = v18 < v19
	loc11 = v20
	v18 = loc11
	branch !v18 l00105980
	// succ:  l00105973 l00105980
l00105973:
	v18 = loc18
	v19 = 0x7D0<32>
	v18 = v18 + v19
	loc12 = v18
	v18 = loc12
	loc7 = v18
	goto l001059A0
	// succ:  l001059A0
l00105980:
	v18 = loc18
	v19 = 0x64<32>
	v20 = v18 < v19
	loc13 = v20
	v18 = loc18
	v19 = 0x76C<32>
	v18 = v18 + v19
	loc14 = v18
	v18 = loc13
	branch !v18 l00105997
	// succ:  l00105994 l00105997
l00105994:
	v18 = loc14
	goto l00105999
	// succ:  l00105999
l00105997:
	v18 = loc18
	// succ:  l00105999
l00105999:
	loc6 = v18
	v18 = loc6
	loc7 = v18
	// succ:  l001059A0
l001059A0:
	v18 = loc7
	v19 = 0xFFFFF894<32>
	v18 = v18 + v19
	loc15 = v18
	v18 = arg1
	v19 = loc15
	Mem0[v18:word32] = v19
	// succ:  l001059B1
l001059B1:
	v18 = loc21
	Mem0[0x00140030<p32>:word32] = v18
	return
	// succ:  fn00105903_exit
l001059B6:
	return
	// succ:  fn00105903_exit
fn00105903_exit:


// fn001059B8
// Return size: 0
void fn001059B8(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn001059B8_entry:
	// succ:  l001059B8
l001059B8:
	v12 = Mem0[0x00140030<p32>:word32]
	loc15 = v12
	v12 = Mem0[0x00140030<p32>:word32]
	v13 = 0x10<32>
	v12 = v12 + v13
	Mem0[0x00140030<p32>:word32] = v12
	v12 = Mem0[0x00140030<p32>:word32]
	v13 = Mem0[0x00140034<p32>:word32]
	v14 = v12 >= v13
	branch !v14 l001059D1
	// succ:  l001059CC l001059D1
l001059CC:
	v12 = 0x10<32>
	abortStackOverflow(v12)
	// succ:  l001059D1
l001059D1:
	v12 = loc15
	v13 = 4<32>
	v12 = v12 + v13
	loc6 = v12
	v12 = loc15
	loc10 = v12
	v12 = arg3
	v12 = Mem0[v12:word32]
	loc11 = v12
	v12 = loc10
	v13 = loc11
	Mem0[v12:word32] = v13
	v12 = loc6
	v13 = loc10
	v13 = Mem0[v13:word32]
	Mem0[v12:word32] = v13
	v12 = arg2
	v13 = loc6
	v15 = arg4
	v16 = arg5
	v17 = 4<32>
	v12 = fn00105E65(v12, v13, v15, v16, v17)
	loc12 = v12
	v12 = arg4
	v12 = Mem0[v12:word32]
	loc13 = v12
	v12 = loc13
	v13 = 4<32>
	v12 = v12 & v13
	loc7 = v12
	v12 = loc7
	v13 = 0<32>
	v14 = v12 == v13
	loc8 = v14
	v12 = loc8
	branch !v12 l00105A2C
	// succ:  l00105A1C l00105A2C
l00105A1C:
	v12 = loc12
	v13 = 0xFFFFF894<32>
	v12 = v12 + v13
	loc9 = v12
	v12 = arg1
	v13 = loc9
	Mem0[v12:word32] = v13
	// succ:  l00105A2C
l00105A2C:
	v12 = loc15
	Mem0[0x00140030<p32>:word32] = v12
	return
	// succ:  fn001059B8_exit
l00105A31:
	return
	// succ:  fn001059B8_exit
fn001059B8_exit:


// fn00105A33
// Return size: 0
void fn00105A33(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn00105A33_entry:
	// succ:  l00105A33
l00105A33:
	v100 = Mem0[0x00140030<p32>:word32]
	loc102 = v100
	v100 = arg1
	v100 = Mem0[v100:word32]
	loc54 = v100
	v100 = loc54
	v101 = 0<32>
	v102 = v100 == v101
	loc65 = v102
	// succ:  l00105A47
l00105A47:
	v100 = loc65
	branch !v100 l00105A52
	// succ:  l00105A4D l00105A52
l00105A4D:
	v100 = 1<32>
	loc96 = v100
l00105A52:
	v100 = loc54
	v101 = 0xC<32>
	v100 = v100 + v101
	loc76 = v100
	v100 = loc76
	v100 = Mem0[v100:word32]
	loc87 = v100
	v100 = loc54
	v101 = 0x10<32>
	v100 = v100 + v101
	loc98 = v100
	v100 = loc98
	v100 = Mem0[v100:word32]
	loc14 = v100
	v100 = loc87
	v101 = loc14
	v102 = v100 == v101
	loc15 = v102
	v100 = loc15
	v100 = v100
	// succ:  l00105A79 l00105A79
l00105A79:
	v100 = loc54
	v100 = Mem0[v100:word32]
	loc16 = v100
	v100 = loc16
	v101 = 0x24<32>
	v100 = v100 + v101
	loc17 = v100
	v100 = loc17
	v100 = Mem0[v100:word32]
	loc18 = v100
	v100 = loc54
	v101 = loc18
	v103 = 0x1FF<32>
	v101 = v101 & v103
	v103 = 0xB00<32>
	v101 = v101 + v103
fn00105A33_exit:


// fn00105E65
// Return size: 0
word32 fn00105E65(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn00105E65_entry:
	// succ:  l00105E65
l00105E65:
	v179 = Mem0[0x00140030<p32>:word32]
	loc181 = v179
	v179 = arg0
	v179 = Mem0[v179:word32]
	loc120 = v179
	v179 = loc120
	v180 = 0<32>
	v181 = v179 == v180
	loc131 = v181
	// succ:  l00105E7B
l00105E7B:
	v179 = loc131
	branch !v179 l00105E87
	// succ:  l00105E82 l00105E87
l00105E82:
	v179 = 1<32>
	loc82 = v179
l00105E87:
	v179 = loc120
	v180 = 0xC<32>
	v179 = v179 + v180
	loc142 = v179
	v179 = loc142
	v179 = Mem0[v179:word32]
	loc153 = v179
	v179 = loc120
	v180 = 0x10<32>
	v179 = v179 + v180
	loc164 = v179
	v179 = loc164
	v179 = Mem0[v179:word32]
	loc23 = v179
	v179 = loc153
	v180 = loc23
	v181 = v179 == v180
	loc34 = v181
	v179 = loc34
	v179 = v179
	// succ:  l00105EB4 l00105EB4
l00105EB4:
	v179 = loc120
	v179 = Mem0[v179:word32]
	loc45 = v179
	v179 = loc45
	v180 = 0x24<32>
	v179 = v179 + v180
	loc56 = v179
	v179 = loc56
	v179 = Mem0[v179:word32]
	loc67 = v179
	v179 = loc120
	v180 = loc67
	v182 = 0x1FF<32>
	v180 = v180 & v182
	v182 = 0xB00<32>
	v180 = v180 + v182
fn00105E65_exit:


// fn00106657
// Return size: 0
void fn00106657(word32 arg0)
fn00106657_entry:
	// succ:  l00106657
l00106657:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 8<32>
	v5 = v5 + v6
	loc1 = v5
	v5 = loc1
	fn00106868(v5)
	return
	// succ:  fn00106657_exit
l0010666A:
	return
	// succ:  fn00106657_exit
fn00106657_exit:


// fn0010666C
// Return size: 0
void fn0010666C(word32 arg0)
fn0010666C_entry:
	// succ:  l0010666C
l0010666C:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 8<32>
	v5 = v5 + v6
	loc1 = v5
	v5 = loc1
	fn00106868(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn0010666C_exit
l00106684:
	return
	// succ:  fn0010666C_exit
fn0010666C_exit:


// fn00106686
// Return size: 0
word32 fn00106686(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6)
fn00106686_entry:
	// succ:  l00106686
l00106686:
	v30 = Mem0[0x00140030<p32>:word32]
	loc34 = v30
	v30 = Mem0[0x00140030<p32>:word32]
	v31 = 0x70<32>
	v30 = v30 + v31
	Mem0[0x00140030<p32>:word32] = v30
	v30 = Mem0[0x00140030<p32>:word32]
	v31 = Mem0[0x00140034<p32>:word32]
	v32 = v30 >= v31
	branch !v32 l001066A1
	// succ:  l0010669B l001066A1
l0010669B:
	v30 = 0x70<32>
	abortStackOverflow(v30)
	// succ:  l001066A1
l001066A1:
	v30 = loc34
	v31 = 4<32>
	v30 = v30 + v31
	loc30 = v30
	v30 = loc34
	loc31 = v30
	v30 = loc30
	v31 = 0x64<32>
	v30 = v30 + v31
	loc32 = v30
	v30 = loc31
	v31 = loc32
	Mem0[v30:word32] = v31
	v30 = arg0
	v31 = 8<32>
	v30 = v30 + v31
	loc11 = v30
	v30 = loc11
	v31 = loc30
	v33 = loc31
	v34 = arg4
	v35 = arg5
	v36 = arg6
	fn001067BD(v30, v31, v33, v34, v35, v36)
	v30 = loc31
	v30 = Mem0[v30:word32]
	loc12 = v30
	v30 = arg1
	v30 = Mem0[v30:word32]
	loc13 = v30
	v30 = loc30
	loc8 = v30
	v30 = loc13
	loc9 = v30
	// succ:  l001066E9
l001066E9:
	v30 = loc8
	v31 = loc12
	v32 = v30 == v31
	loc14 = v32
	v30 = loc14
	branch !v30 l001066F9
	// succ:  l001066F6 l001066F9
l001066F6:
l001066F9:
	v30 = loc8
	v37 = Mem0[v30:int8]
	v30 = CONVERT(v37, int8, word32)
	loc15 = v30
	v30 = loc9
	v31 = 0<32>
	v32 = v30 == v31
	loc16 = v32
	// succ:  l00106707
l00106707:
	v30 = loc16
	branch !v30 l00106712
	// succ:  l0010670D l00106712
l0010670D:
	v30 = 0<32>
	loc10 = v30
l00106712:
	v30 = loc9
	v31 = 0x18<32>
	v30 = v30 + v31
	loc17 = v30
	v30 = loc17
	v30 = Mem0[v30:word32]
	loc18 = v30
	v30 = loc9
	v31 = 0x1C<32>
	v30 = v30 + v31
	loc19 = v30
	v30 = loc19
	v30 = Mem0[v30:word32]
	loc20 = v30
	v30 = loc18
	v31 = loc20
	v32 = v30 == v31
	loc21 = v32
	v30 = loc21
	v30 = v30
	// succ:  l00106739 l00106739
l00106739:
	v30 = loc9
	v30 = Mem0[v30:word32]
	loc23 = v30
	v30 = loc23
	v31 = 0x34<32>
	v30 = v30 + v31
	loc24 = v30
	v30 = loc24
	v30 = Mem0[v30:word32]
	loc25 = v30
	v30 = loc15
	v31 = 0xFF<32>
	v30 = v30 & v31
	loc26 = v30
	v30 = loc9
	v31 = loc26
	v33 = loc25
	v34 = 0x1FF<32>
	v33 = v33 & v34
	v34 = 0x1B20<32>
	v33 = v33 + v34
fn00106686_exit:


// fn001067BD
// Return size: 0
void fn001067BD(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn001067BD_entry:
	// succ:  l001067BD
l001067BD:
	v15 = Mem0[0x00140030<p32>:word32]
	loc18 = v15
	v15 = Mem0[0x00140030<p32>:word32]
	v16 = 0x10<32>
	v15 = v15 + v16
	Mem0[0x00140030<p32>:word32] = v15
	v15 = Mem0[0x00140030<p32>:word32]
	v16 = Mem0[0x00140034<p32>:word32]
	v17 = v15 >= v16
	branch !v17 l001067D6
	// succ:  l001067D1 l001067D6
l001067D1:
	v15 = 0x10<32>
	abortStackOverflow(v15)
	// succ:  l001067D6
l001067D6:
	v15 = loc18
	loc13 = v15
	v15 = loc13
	v16 = 0x25<32>
	v18 = SLICE(v16, byte, 0)
	Mem0[v15:byte] = v18
	v15 = loc13
	v16 = 1<32>
	v15 = v15 + v16
	loc14 = v15
	v15 = loc14
	v16 = arg4
	v19 = SLICE(v16, byte, 0)
	Mem0[v15:byte] = v19
	v15 = loc13
	v16 = 2<32>
	v15 = v15 + v16
	loc15 = v15
	v15 = loc15
	v16 = arg5
	v20 = SLICE(v16, byte, 0)
	Mem0[v15:byte] = v20
	v15 = loc13
	v16 = 3<32>
	v15 = v15 + v16
	loc16 = v15
	v15 = loc16
	v16 = 0<32>
	v21 = SLICE(v16, byte, 0)
	Mem0[v15:byte] = v21
	v15 = arg5
	v16 = 0x18<32>
	v15 = v15 << v16
	v16 = 0x18<32>
	v15 = v15 >> v16
	v16 = 0<32>
	v17 = v15 == v16
	loc6 = v17
	v15 = loc6
	v17 = v15 == 0<32>
	branch !v17 l0010682C
	// succ:  l0010681D l0010682C
l0010681D:
	v15 = loc14
	v16 = arg5
	v22 = SLICE(v16, byte, 0)
	Mem0[v15:byte] = v22
	v15 = loc15
	v16 = arg4
	v23 = SLICE(v16, byte, 0)
	Mem0[v15:byte] = v23
	// succ:  l0010682C
l0010682C:
	v15 = arg2
	v15 = Mem0[v15:word32]
	loc7 = v15
	v15 = arg1
	loc8 = v15
	v15 = loc7
	v16 = loc8
	v15 = v15 - v16
	loc9 = v15
	v15 = arg0
	v15 = Mem0[v15:word32]
	loc10 = v15
	v15 = arg1
	v16 = loc9
	v24 = loc13
	v25 = arg3
	v26 = loc10
	v15 = _strftime_l(v15, v16, v24, v25, v26)
	loc11 = v15
	v15 = arg1
	v16 = loc11
	v15 = v15 + v16
	loc12 = v15
	v15 = arg2
	v16 = loc12
	Mem0[v15:word32] = v16
	v15 = loc18
	Mem0[0x00140030<p32>:word32] = v15
	return
	// succ:  fn001067BD_exit
l00106866:
	return
	// succ:  fn001067BD_exit
fn001067BD_exit:


// fn00106868
// Return size: 0
void fn00106868(word32 arg0)
fn00106868_entry:
	// succ:  l00106868
l00106868:
	v14 = Mem0[0x00140030<p32>:word32]
	loc12 = v14
	v14 = arg0
	v14 = Mem0[v14:word32]
	loc1 = v14
	v14 = 0<32>
	Mem0[0x00140048<p32>:word32] = v14
	v14 = 0x17B<32>
	v14 = invoke_i(v14)
	loc3 = v14
	v14 = Mem0[0x00140048<p32>:word32]
	loc4 = v14
	v14 = 0<32>
	Mem0[0x00140048<p32>:word32] = v14
	v14 = loc4
	v15 = 1<32>
	v14 = v14 & v15
	loc5 = v14
	// succ:  l0010688F
l0010688F:
	v14 = loc5
	v16 = v14 == 0<32>
	branch !v16 l001068CD
	// succ:  l00106896 l001068CD
l00106896:
	v14 = loc1
	v15 = loc3
	v16 = v14 == v15
	loc6 = v16
	v14 = loc6
	v16 = v14 == 0<32>
	branch !v16 l001068CB
	// succ:  l001068A2 l001068CB
l001068A2:
	v14 = arg0
	v14 = Mem0[v14:word32]
	loc7 = v14
	v14 = 0<32>
	Mem0[0x00140048<p32>:word32] = v14
	v14 = 0x1A1<32>
	v15 = loc7
	invoke_vi(v14, v15)
	v14 = Mem0[0x00140048<p32>:word32]
	loc8 = v14
	v14 = 0<32>
	Mem0[0x00140048<p32>:word32] = v14
	v14 = loc8
	v15 = 1<32>
	v14 = v14 & v15
	loc9 = v14
	v14 = loc9
	branch !v14 l001068CA
	// succ:  l001068C7 l001068CA
l001068C7:
	goto l001068CD
	// succ:  l001068CD
l001068CA:
	// succ:  l001068CB
l001068CB:
	return
	// succ:  fn00106868_exit
l001068CD:
	// succ:  l001068CD
l001068CD:
	v14 = 0<32>
	v14 = ___cxa_find_matching_catch_3(v14)
	loc10 = v14
	v14 = Mem0[0x00140094<p32>:word32]
	loc2 = v14
	v14 = loc10
	fn000D0E65(v14)
	// succ:  l001068DC
l001068DC:
	return
	// succ:  fn00106868_exit
fn00106868_exit:


// fn001068DE
// Return size: 0
void fn001068DE(word32 arg0)
fn001068DE_entry:
	// succ:  l001068DE
l001068DE:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 8<32>
	v5 = v5 + v6
	loc1 = v5
	v5 = loc1
	fn00106868(v5)
	return
	// succ:  fn001068DE_exit
l001068F1:
	return
	// succ:  fn001068DE_exit
fn001068DE_exit:


// fn001068F3
// Return size: 0
void fn001068F3(word32 arg0)
fn001068F3_entry:
	// succ:  l001068F3
l001068F3:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 8<32>
	v5 = v5 + v6
	loc1 = v5
	v5 = loc1
	fn00106868(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn001068F3_exit
l0010690B:
	return
	// succ:  fn001068F3_exit
fn001068F3_exit:


// fn0010690D
// Return size: 0
word32 fn0010690D(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6)
fn0010690D_entry:
	// succ:  l0010690D
l0010690D:
	v30 = Mem0[0x00140030<p32>:word32]
	loc34 = v30
	v30 = Mem0[0x00140030<p32>:word32]
	v31 = 0x1A0<32>
	v30 = v30 + v31
	Mem0[0x00140030<p32>:word32] = v30
	v30 = Mem0[0x00140030<p32>:word32]
	v31 = Mem0[0x00140034<p32>:word32]
	v32 = v30 >= v31
	branch !v32 l00106928
	// succ:  l00106922 l00106928
l00106922:
	v30 = 0x1A0<32>
	abortStackOverflow(v30)
	// succ:  l00106928
l00106928:
	v30 = loc34
	v31 = 8<32>
	v30 = v30 + v31
	loc30 = v30
	v30 = loc34
	loc31 = v30
	v30 = loc30
	v31 = 0x190<32>
	v30 = v30 + v31
	loc32 = v30
	v30 = loc31
	v31 = loc32
	Mem0[v30:word32] = v31
	v30 = arg0
	v31 = 8<32>
	v30 = v30 + v31
	loc12 = v30
	v30 = loc12
	v31 = loc30
	v33 = loc31
	v34 = arg4
	v35 = arg5
	v36 = arg6
	fn00106A39(v30, v31, v33, v34, v35, v36)
	v30 = loc31
	v30 = Mem0[v30:word32]
	loc13 = v30
	v30 = arg1
	v30 = Mem0[v30:word32]
	loc14 = v30
	v30 = loc30
	loc8 = v30
	v30 = loc14
	loc10 = v30
	// succ:  l00106970
l00106970:
	v30 = loc8
	v31 = loc13
	v32 = v30 == v31
	loc15 = v32
	v30 = loc15
	branch !v30 l00106980
	// succ:  l0010697D l00106980
l0010697D:
l00106980:
	v30 = loc8
	v30 = Mem0[v30:word32]
	loc16 = v30
	v30 = loc10
	v31 = 0<32>
	v32 = v30 == v31
	loc17 = v32
	v30 = loc17
	branch !v30 l00106997
	// succ:  l00106992 l00106997
l00106992:
	v30 = 0<32>
	loc11 = v30
l00106997:
	v30 = loc10
	v31 = 0x18<32>
	v30 = v30 + v31
	loc18 = v30
	v30 = loc18
	v30 = Mem0[v30:word32]
	loc19 = v30
	v30 = loc10
	v31 = 0x1C<32>
	v30 = v30 + v31
	loc20 = v30
	v30 = loc20
	v30 = Mem0[v30:word32]
	loc21 = v30
	v30 = loc19
	v31 = loc21
	v32 = v30 == v31
	loc22 = v32
	v30 = loc22
	v30 = v30
	// succ:  l001069BE l001069BE
l001069BE:
	v30 = loc10
	v30 = Mem0[v30:word32]
	loc23 = v30
	v30 = loc23
	v31 = 0x34<32>
	v30 = v30 + v31
	loc24 = v30
	v30 = loc24
	v30 = Mem0[v30:word32]
	loc25 = v30
	v30 = loc10
	v31 = loc16
	v33 = loc25
	v34 = 0x1FF<32>
	v33 = v33 & v34
	v34 = 0x1B20<32>
	v33 = v33 + v34
fn0010690D_exit:


// fn00106A39
// Return size: 0
void fn00106A39(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn00106A39_entry:
	// succ:  l00106A39
l00106A39:
	v32 = Mem0[0x00140030<p32>:word32]
	loc35 = v32
	v32 = Mem0[0x00140030<p32>:word32]
	v33 = 0x80<32>
	v32 = v32 + v33
	Mem0[0x00140030<p32>:word32] = v32
	v32 = Mem0[0x00140030<p32>:word32]
	v33 = Mem0[0x00140034<p32>:word32]
	v34 = v32 >= v33
	branch !v34 l00106A54
	// succ:  l00106A4E l00106A54
l00106A4E:
	v32 = 0x80<32>
	abortStackOverflow(v32)
	// succ:  l00106A54
l00106A54:
	v32 = loc35
	v33 = 0x10<32>
	v32 = v32 + v33
	loc30 = v32
	v32 = loc35
	v33 = 0xC<32>
	v32 = v32 + v33
	loc31 = v32
	v32 = loc35
	loc32 = v32
	v32 = loc35
	v33 = 8<32>
	v32 = v32 + v33
	loc33 = v32
	v32 = loc30
	v33 = 0x64<32>
	v32 = v32 + v33
	loc6 = v32
	v32 = loc31
	v33 = loc6
	Mem0[v32:word32] = v33
	v32 = arg0
	v33 = loc30
	v35 = loc31
	v36 = arg3
	v37 = arg4
	v38 = arg5
	fn001067BD(v32, v33, v35, v36, v37, v38)
	v32 = loc32
	v39 = 0<64>
	Mem0[v32:word64] = v39
	v32 = loc33
	v33 = loc30
	Mem0[v32:word32] = v33
	v32 = arg2
	v32 = Mem0[v32:word32]
	loc7 = v32
	v32 = arg1
	loc8 = v32
	v32 = loc7
	v33 = loc8
	v32 = v32 - v33
	loc9 = v32
	v32 = loc9
	v33 = 2<32>
	v32 = v32 >> v33
	loc10 = v32
	v32 = arg0
	v32 = Mem0[v32:word32]
	loc11 = v32
	v32 = loc11
	v32 = fn000DB419(v32)
	loc12 = v32
	v32 = 0<32>
	Mem0[0x00140048<p32>:word32] = v32
	v32 = 0x1A2<32>
	v33 = arg1
	v35 = loc33
	v36 = loc10
	v37 = loc32
	v32 = invoke_iiiii(v32, v33, v35, v36, v37)
	loc13 = v32
	v32 = Mem0[0x00140048<p32>:word32]
	loc14 = v32
	v32 = 0<32>
	Mem0[0x00140048<p32>:word32] = v32
	v32 = loc14
	v33 = 1<32>
	v32 = v32 & v33
	loc15 = v32
	v32 = loc15
	branch !v32 l00106B2E
	// succ:  l00106AE6 l00106B2E
l00106AE6:
	v32 = ___cxa_find_matching_catch_2()
	loc21 = v32
	v32 = Mem0[0x00140094<p32>:word32]
	loc22 = v32
	v32 = loc12
	v33 = 0<32>
	v34 = v32 == v33
	loc23 = v34
	v32 = loc23
	v34 = v32 == 0<32>
	branch !v34 l00106B29
	// succ:  l00106AFA l00106B29
l00106AFA:
	v32 = 0<32>
	Mem0[0x00140048<p32>:word32] = v32
	v32 = 0x17E<32>
	v33 = loc12
	v32 = invoke_ii(v32, v33)
	v32 = Mem0[0x00140048<p32>:word32]
	loc24 = v32
	v32 = 0<32>
	Mem0[0x00140048<p32>:word32] = v32
	v32 = loc24
	v33 = 1<32>
	v32 = v32 & v33
	loc25 = v32
	v32 = loc25
	branch !v32 l00106B28
	// succ:  l00106B19 l00106B28
l00106B19:
	v32 = 0<32>
	v32 = ___cxa_find_matching_catch_3(v32)
	loc26 = v32
	v32 = Mem0[0x00140094<p32>:word32]
	loc27 = v32
	v32 = loc26
	fn000D0E65(v32)
	// succ:  l00106B28
l00106B28:
	// succ:  l00106B29
l00106B29:
	v32 = loc21
	___resumeException(v32)
	// succ:  l00106B2E
l00106B2E:
	v32 = loc12
	v33 = 0<32>
	v34 = v32 == v33
	loc16 = v34
	v32 = loc16
	v34 = v32 == 0<32>
	branch !v34 l00106B69
	// succ:  l00106B3A l00106B69
l00106B3A:
	v32 = 0<32>
	Mem0[0x00140048<p32>:word32] = v32
	v32 = 0x17E<32>
	v33 = loc12
	v32 = invoke_ii(v32, v33)
	v32 = Mem0[0x00140048<p32>:word32]
	loc17 = v32
	v32 = 0<32>
	Mem0[0x00140048<p32>:word32] = v32
	v32 = loc17
	v33 = 1<32>
	v32 = v32 & v33
	loc18 = v32
	v32 = loc18
	branch !v32 l00106B68
	// succ:  l00106B59 l00106B68
l00106B59:
	v32 = 0<32>
	v32 = ___cxa_find_matching_catch_3(v32)
	loc19 = v32
	v32 = Mem0[0x00140094<p32>:word32]
	loc20 = v32
	v32 = loc19
	fn000D0E65(v32)
	// succ:  l00106B68
l00106B68:
	// succ:  l00106B69
l00106B69:
	v32 = loc13
	v33 = 0xFFFFFFFF<32>
	v34 = v32 == v33
	loc28 = v34
	v32 = loc28
	branch !v32 l00106B7C
	// succ:  l00106B74 l00106B7C
l00106B74:
	v32 = 0x3BF9<32>
	fn00106B95(v32)
	goto l00106B92
	// succ:  l00106B92
l00106B7C:
	v32 = arg1
	v33 = loc13
	v35 = 2<32>
	v33 = v33 << v35
	v32 = v32 + v33
	loc29 = v32
	v32 = arg2
	v33 = loc29
	Mem0[v32:word32] = v33
	v32 = loc35
	Mem0[0x00140030<p32>:word32] = v32
	return
	// succ:  fn00106A39_exit
l00106B92:
	// succ:  l00106B93
l00106B93:
	return
	// succ:  fn00106A39_exit
fn00106A39_exit:


// fn00106B95
// Return size: 0
void fn00106B95(word32 arg0)
fn00106B95_entry:
	// succ:  l00106B95
l00106B95:
	v9 = Mem0[0x00140030<p32>:word32]
	loc7 = v9
	v9 = 8<32>
	v9 = ___cxa_allocate_exception(v9)
	loc1 = v9
	v9 = 0<32>
	Mem0[0x00140048<p32>:word32] = v9
	v9 = 0x1A3<32>
	v10 = loc1
	v11 = arg0
	invoke_vii(v9, v10, v11)
	v9 = Mem0[0x00140048<p32>:word32]
	loc2 = v9
	v9 = 0<32>
	Mem0[0x00140048<p32>:word32] = v9
	v9 = loc2
	v10 = 1<32>
	v9 = v9 & v10
	loc3 = v9
	v9 = loc3
	branch !v9 l00106BD2
	// succ:  l00106BC1 l00106BD2
l00106BC1:
	v9 = ___cxa_find_matching_catch_2()
	loc4 = v9
	v9 = Mem0[0x00140094<p32>:word32]
	loc5 = v9
	v9 = loc1
	___cxa_free_exception(v9)
	v9 = loc4
	___resumeException(v9)
	goto l00106BDC
	// succ:  l00106BDC
l00106BD2:
	v9 = loc1
	v10 = 0x9E8<32>
	v11 = 0x159<32>
	___cxa_throw(v9, v10, v11)
	// succ:  l00106BDC
l00106BDC:
	// succ:  l00106BDD
l00106BDD:
	return
	// succ:  fn00106B95_exit
fn00106B95_exit:


// fn00106BDF
// Return size: 0
void fn00106BDF(word32 arg0)
fn00106BDF_entry:
	// succ:  l00106BDF
l00106BDF:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	return
	// succ:  fn00106BDF_exit
l00106BE6:
	return
	// succ:  fn00106BDF_exit
fn00106BDF_exit:


// fn00106BE8
// Return size: 0
void fn00106BE8(word32 arg0)
fn00106BE8_entry:
	// succ:  l00106BE8
l00106BE8:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn00106BE8_exit
l00106BF4:
	return
	// succ:  fn00106BE8_exit
fn00106BE8_exit:


// fn00106BF6
// Return size: 0
word32 fn00106BF6(word32 arg0)
fn00106BF6_entry:
	// succ:  l00106BF6
l00106BF6:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0x7F<32>
	return v4
	// succ:  fn00106BF6_exit
l00106C00:
	return v4
	// succ:  fn00106BF6_exit
fn00106BF6_exit:


// fn00106C02
// Return size: 0
word32 fn00106C02(word32 arg0)
fn00106C02_entry:
	// succ:  l00106C02
l00106C02:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0x7F<32>
	return v4
	// succ:  fn00106C02_exit
l00106C0C:
	return v4
	// succ:  fn00106C02_exit
fn00106C02_exit:


// fn00106C0E
// Return size: 0
void fn00106C0E(word32 arg0, word32 arg1)
fn00106C0E_entry:
	// succ:  l00106C0E
l00106C0E:
	v8 = Mem0[0x00140030<p32>:word32]
	loc7 = v8
	v8 = arg0
	v9 = 0<64>
	Mem0[v8:word64] = v9
	v8 = arg0
	v10 = 8<32>
	v8 = v8 + v10
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = 0<32>
	loc2 = v8
	// succ:  l00106C2B
l00106C2B:
	v8 = loc2
	v10 = 3<32>
	v11 = v8 == v10
	loc5 = v11
	v8 = loc5
	branch !v8 l00106C3B
	// succ:  l00106C38 l00106C3B
l00106C38:
	goto l00106C59
	// succ:  l00106C59
l00106C3B:
	v8 = arg0
	v10 = loc2
	v12 = 2<32>
	v10 = v10 << v12
	v8 = v8 + v10
	loc3 = v8
	v8 = loc3
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = loc2
	v10 = 1<32>
	v8 = v8 + v10
	loc4 = v8
	v8 = loc4
	loc2 = v8
	goto l00106C0E
	// succ:  l00106C0E
l00106C59:
	return
	// succ:  fn00106C0E_exit
l00106C5C:
	return
	// succ:  fn00106C0E_exit
fn00106C0E_exit:


// fn00106C5E
// Return size: 0
void fn00106C5E(word32 arg0, word32 arg1)
fn00106C5E_entry:
	// succ:  l00106C5E
l00106C5E:
	v8 = Mem0[0x00140030<p32>:word32]
	loc7 = v8
	v8 = arg0
	v9 = 0<64>
	Mem0[v8:word64] = v9
	v8 = arg0
	v10 = 8<32>
	v8 = v8 + v10
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = 0<32>
	loc2 = v8
	// succ:  l00106C7B
l00106C7B:
	v8 = loc2
	v10 = 3<32>
	v11 = v8 == v10
	loc5 = v11
	v8 = loc5
	branch !v8 l00106C8B
	// succ:  l00106C88 l00106C8B
l00106C88:
	goto l00106CA9
	// succ:  l00106CA9
l00106C8B:
	v8 = arg0
	v10 = loc2
	v12 = 2<32>
	v10 = v10 << v12
	v8 = v8 + v10
	loc3 = v8
	v8 = loc3
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = loc2
	v10 = 1<32>
	v8 = v8 + v10
	loc4 = v8
	v8 = loc4
	loc2 = v8
	goto l00106C5E
	// succ:  l00106C5E
l00106CA9:
	return
	// succ:  fn00106C5E_exit
l00106CAC:
	return
	// succ:  fn00106C5E_exit
fn00106C5E_exit:


// fn00106CAE
// Return size: 0
void fn00106CAE(word32 arg0, word32 arg1)
fn00106CAE_entry:
	// succ:  l00106CAE
l00106CAE:
	v8 = Mem0[0x00140030<p32>:word32]
	loc7 = v8
	v8 = arg0
	v9 = 0<64>
	Mem0[v8:word64] = v9
	v8 = arg0
	v10 = 8<32>
	v8 = v8 + v10
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = 0<32>
	loc2 = v8
	// succ:  l00106CCB
l00106CCB:
	v8 = loc2
	v10 = 3<32>
	v11 = v8 == v10
	loc5 = v11
	v8 = loc5
	branch !v8 l00106CDB
	// succ:  l00106CD8 l00106CDB
l00106CD8:
	goto l00106CF9
	// succ:  l00106CF9
l00106CDB:
	v8 = arg0
	v10 = loc2
	v12 = 2<32>
	v10 = v10 << v12
	v8 = v8 + v10
	loc3 = v8
	v8 = loc3
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = loc2
	v10 = 1<32>
	v8 = v8 + v10
	loc4 = v8
	v8 = loc4
	loc2 = v8
	goto l00106CAE
	// succ:  l00106CAE
l00106CF9:
	return
	// succ:  fn00106CAE_exit
l00106CFC:
	return
	// succ:  fn00106CAE_exit
fn00106CAE_exit:


// fn00106CFE
// Return size: 0
void fn00106CFE(word32 arg0, word32 arg1)
fn00106CFE_entry:
	// succ:  l00106CFE
l00106CFE:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v4 = arg0
	v5 = 0<64>
	Mem0[v4:word64] = v5
	v4 = arg0
	v6 = 8<32>
	v4 = v4 + v6
	v6 = 0<32>
	Mem0[v4:word32] = v6
	v4 = arg0
	v6 = 1<32>
	v7 = 0x2D<32>
	fn0011BA32(v4, v6, v7)
	return
	// succ:  fn00106CFE_exit
l00106D1F:
	return
	// succ:  fn00106CFE_exit
fn00106CFE_exit:


// fn00106D21
// Return size: 0
word32 fn00106D21(word32 arg0)
fn00106D21_entry:
	// succ:  l00106D21
l00106D21:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0<32>
	return v4
	// succ:  fn00106D21_exit
l00106D2A:
	return v4
	// succ:  fn00106D21_exit
fn00106D21_exit:


// fn00106D2C
// Return size: 0
void fn00106D2C(word32 arg0, word32 arg1)
fn00106D2C_entry:
	// succ:  l00106D2C
l00106D2C:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v4 = arg0
	v5 = 0x4000302<32>
	Mem0[v4:word32] = v5
	return
	// succ:  fn00106D2C_exit
l00106D3D:
	return
	// succ:  fn00106D2C_exit
fn00106D2C_exit:


// fn00106D3F
// Return size: 0
void fn00106D3F(word32 arg0, word32 arg1)
fn00106D3F_entry:
	// succ:  l00106D3F
l00106D3F:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v4 = arg0
	v5 = 0x4000302<32>
	Mem0[v4:word32] = v5
	return
	// succ:  fn00106D3F_exit
l00106D50:
	return
	// succ:  fn00106D3F_exit
fn00106D3F_exit:


// fn00106D52
// Return size: 0
void fn00106D52(word32 arg0)
fn00106D52_entry:
	// succ:  l00106D52
l00106D52:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	return
	// succ:  fn00106D52_exit
l00106D59:
	return
	// succ:  fn00106D52_exit
fn00106D52_exit:


// fn00106D5B
// Return size: 0
void fn00106D5B(word32 arg0)
fn00106D5B_entry:
	// succ:  l00106D5B
l00106D5B:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn00106D5B_exit
l00106D67:
	return
	// succ:  fn00106D5B_exit
fn00106D5B_exit:


// fn00106D69
// Return size: 0
word32 fn00106D69(word32 arg0)
fn00106D69_entry:
	// succ:  l00106D69
l00106D69:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0x7F<32>
	return v4
	// succ:  fn00106D69_exit
l00106D73:
	return v4
	// succ:  fn00106D69_exit
fn00106D69_exit:


// fn00106D75
// Return size: 0
word32 fn00106D75(word32 arg0)
fn00106D75_entry:
	// succ:  l00106D75
l00106D75:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0x7F<32>
	return v4
	// succ:  fn00106D75_exit
l00106D7F:
	return v4
	// succ:  fn00106D75_exit
fn00106D75_exit:


// fn00106D81
// Return size: 0
void fn00106D81(word32 arg0, word32 arg1)
fn00106D81_entry:
	// succ:  l00106D81
l00106D81:
	v8 = Mem0[0x00140030<p32>:word32]
	loc7 = v8
	v8 = arg0
	v9 = 0<64>
	Mem0[v8:word64] = v9
	v8 = arg0
	v10 = 8<32>
	v8 = v8 + v10
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = 0<32>
	loc2 = v8
	// succ:  l00106D9E
l00106D9E:
	v8 = loc2
	v10 = 3<32>
	v11 = v8 == v10
	loc5 = v11
	v8 = loc5
	branch !v8 l00106DAE
	// succ:  l00106DAB l00106DAE
l00106DAB:
	goto l00106DCC
	// succ:  l00106DCC
l00106DAE:
	v8 = arg0
	v10 = loc2
	v12 = 2<32>
	v10 = v10 << v12
	v8 = v8 + v10
	loc3 = v8
	v8 = loc3
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = loc2
	v10 = 1<32>
	v8 = v8 + v10
	loc4 = v8
	v8 = loc4
	loc2 = v8
	goto l00106D81
	// succ:  l00106D81
l00106DCC:
	return
	// succ:  fn00106D81_exit
l00106DCF:
	return
	// succ:  fn00106D81_exit
fn00106D81_exit:


// fn00106DD1
// Return size: 0
void fn00106DD1(word32 arg0, word32 arg1)
fn00106DD1_entry:
	// succ:  l00106DD1
l00106DD1:
	v8 = Mem0[0x00140030<p32>:word32]
	loc7 = v8
	v8 = arg0
	v9 = 0<64>
	Mem0[v8:word64] = v9
	v8 = arg0
	v10 = 8<32>
	v8 = v8 + v10
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = 0<32>
	loc2 = v8
	// succ:  l00106DEE
l00106DEE:
	v8 = loc2
	v10 = 3<32>
	v11 = v8 == v10
	loc5 = v11
	v8 = loc5
	branch !v8 l00106DFE
	// succ:  l00106DFB l00106DFE
l00106DFB:
	goto l00106E1C
	// succ:  l00106E1C
l00106DFE:
	v8 = arg0
	v10 = loc2
	v12 = 2<32>
	v10 = v10 << v12
	v8 = v8 + v10
	loc3 = v8
	v8 = loc3
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = loc2
	v10 = 1<32>
	v8 = v8 + v10
	loc4 = v8
	v8 = loc4
	loc2 = v8
	goto l00106DD1
	// succ:  l00106DD1
l00106E1C:
	return
	// succ:  fn00106DD1_exit
l00106E1F:
	return
	// succ:  fn00106DD1_exit
fn00106DD1_exit:


// fn00106E21
// Return size: 0
void fn00106E21(word32 arg0, word32 arg1)
fn00106E21_entry:
	// succ:  l00106E21
l00106E21:
	v8 = Mem0[0x00140030<p32>:word32]
	loc7 = v8
	v8 = arg0
	v9 = 0<64>
	Mem0[v8:word64] = v9
	v8 = arg0
	v10 = 8<32>
	v8 = v8 + v10
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = 0<32>
	loc2 = v8
	// succ:  l00106E3E
l00106E3E:
	v8 = loc2
	v10 = 3<32>
	v11 = v8 == v10
	loc5 = v11
	v8 = loc5
	branch !v8 l00106E4E
	// succ:  l00106E4B l00106E4E
l00106E4B:
	goto l00106E6C
	// succ:  l00106E6C
l00106E4E:
	v8 = arg0
	v10 = loc2
	v12 = 2<32>
	v10 = v10 << v12
	v8 = v8 + v10
	loc3 = v8
	v8 = loc3
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = loc2
	v10 = 1<32>
	v8 = v8 + v10
	loc4 = v8
	v8 = loc4
	loc2 = v8
	goto l00106E21
	// succ:  l00106E21
l00106E6C:
	return
	// succ:  fn00106E21_exit
l00106E6F:
	return
	// succ:  fn00106E21_exit
fn00106E21_exit:


// fn00106E71
// Return size: 0
void fn00106E71(word32 arg0, word32 arg1)
fn00106E71_entry:
	// succ:  l00106E71
l00106E71:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v4 = arg0
	v5 = 0<64>
	Mem0[v4:word64] = v5
	v4 = arg0
	v6 = 8<32>
	v4 = v4 + v6
	v6 = 0<32>
	Mem0[v4:word32] = v6
	v4 = arg0
	v6 = 1<32>
	v7 = 0x2D<32>
	fn0011BA32(v4, v6, v7)
	return
	// succ:  fn00106E71_exit
l00106E92:
	return
	// succ:  fn00106E71_exit
fn00106E71_exit:


// fn00106E94
// Return size: 0
word32 fn00106E94(word32 arg0)
fn00106E94_entry:
	// succ:  l00106E94
l00106E94:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0<32>
	return v4
	// succ:  fn00106E94_exit
l00106E9D:
	return v4
	// succ:  fn00106E94_exit
fn00106E94_exit:


// fn00106E9F
// Return size: 0
void fn00106E9F(word32 arg0, word32 arg1)
fn00106E9F_entry:
	// succ:  l00106E9F
l00106E9F:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v4 = arg0
	v5 = 0x4000302<32>
	Mem0[v4:word32] = v5
	return
	// succ:  fn00106E9F_exit
l00106EB0:
	return
	// succ:  fn00106E9F_exit
fn00106E9F_exit:


// fn00106EB2
// Return size: 0
void fn00106EB2(word32 arg0, word32 arg1)
fn00106EB2_entry:
	// succ:  l00106EB2
l00106EB2:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v4 = arg0
	v5 = 0x4000302<32>
	Mem0[v4:word32] = v5
	return
	// succ:  fn00106EB2_exit
l00106EC3:
	return
	// succ:  fn00106EB2_exit
fn00106EB2_exit:


// fn00106EC5
// Return size: 0
void fn00106EC5(word32 arg0)
fn00106EC5_entry:
	// succ:  l00106EC5
l00106EC5:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	return
	// succ:  fn00106EC5_exit
l00106ECC:
	return
	// succ:  fn00106EC5_exit
fn00106EC5_exit:


// fn00106ECE
// Return size: 0
void fn00106ECE(word32 arg0)
fn00106ECE_entry:
	// succ:  l00106ECE
l00106ECE:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn00106ECE_exit
l00106EDA:
	return
	// succ:  fn00106ECE_exit
fn00106ECE_exit:


// fn00106EDC
// Return size: 0
word32 fn00106EDC(word32 arg0)
fn00106EDC_entry:
	// succ:  l00106EDC
l00106EDC:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0x7FFFFFFF<32>
	return v4
	// succ:  fn00106EDC_exit
l00106EE9:
	return v4
	// succ:  fn00106EDC_exit
fn00106EDC_exit:


// fn00106EEB
// Return size: 0
word32 fn00106EEB(word32 arg0)
fn00106EEB_entry:
	// succ:  l00106EEB
l00106EEB:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0x7FFFFFFF<32>
	return v4
	// succ:  fn00106EEB_exit
l00106EF8:
	return v4
	// succ:  fn00106EEB_exit
fn00106EEB_exit:


// fn00106EFA
// Return size: 0
void fn00106EFA(word32 arg0, word32 arg1)
fn00106EFA_entry:
	// succ:  l00106EFA
l00106EFA:
	v8 = Mem0[0x00140030<p32>:word32]
	loc7 = v8
	v8 = arg0
	v9 = 0<64>
	Mem0[v8:word64] = v9
	v8 = arg0
	v10 = 8<32>
	v8 = v8 + v10
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = 0<32>
	loc2 = v8
	// succ:  l00106F17
l00106F17:
	v8 = loc2
	v10 = 3<32>
	v11 = v8 == v10
	loc5 = v11
	v8 = loc5
	branch !v8 l00106F27
	// succ:  l00106F24 l00106F27
l00106F24:
	goto l00106F45
	// succ:  l00106F45
l00106F27:
	v8 = arg0
	v10 = loc2
	v12 = 2<32>
	v10 = v10 << v12
	v8 = v8 + v10
	loc3 = v8
	v8 = loc3
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = loc2
	v10 = 1<32>
	v8 = v8 + v10
	loc4 = v8
	v8 = loc4
	loc2 = v8
	goto l00106EFA
	// succ:  l00106EFA
l00106F45:
	return
	// succ:  fn00106EFA_exit
l00106F48:
	return
	// succ:  fn00106EFA_exit
fn00106EFA_exit:


// fn00106F4A
// Return size: 0
void fn00106F4A(word32 arg0, word32 arg1)
fn00106F4A_entry:
	// succ:  l00106F4A
l00106F4A:
	v8 = Mem0[0x00140030<p32>:word32]
	loc7 = v8
	v8 = arg0
	v9 = 0<64>
	Mem0[v8:word64] = v9
	v8 = arg0
	v10 = 8<32>
	v8 = v8 + v10
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = 0<32>
	loc2 = v8
	// succ:  l00106F67
l00106F67:
	v8 = loc2
	v10 = 3<32>
	v11 = v8 == v10
	loc5 = v11
	v8 = loc5
	branch !v8 l00106F77
	// succ:  l00106F74 l00106F77
l00106F74:
	goto l00106F95
	// succ:  l00106F95
l00106F77:
	v8 = arg0
	v10 = loc2
	v12 = 2<32>
	v10 = v10 << v12
	v8 = v8 + v10
	loc3 = v8
	v8 = loc3
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = loc2
	v10 = 1<32>
	v8 = v8 + v10
	loc4 = v8
	v8 = loc4
	loc2 = v8
	goto l00106F4A
	// succ:  l00106F4A
l00106F95:
	return
	// succ:  fn00106F4A_exit
l00106F98:
	return
	// succ:  fn00106F4A_exit
fn00106F4A_exit:


// fn00106F9A
// Return size: 0
void fn00106F9A(word32 arg0, word32 arg1)
fn00106F9A_entry:
	// succ:  l00106F9A
l00106F9A:
	v8 = Mem0[0x00140030<p32>:word32]
	loc7 = v8
	v8 = arg0
	v9 = 0<64>
	Mem0[v8:word64] = v9
	v8 = arg0
	v10 = 8<32>
	v8 = v8 + v10
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = 0<32>
	loc2 = v8
	// succ:  l00106FB7
l00106FB7:
	v8 = loc2
	v10 = 3<32>
	v11 = v8 == v10
	loc5 = v11
	v8 = loc5
	branch !v8 l00106FC7
	// succ:  l00106FC4 l00106FC7
l00106FC4:
	goto l00106FE5
	// succ:  l00106FE5
l00106FC7:
	v8 = arg0
	v10 = loc2
	v12 = 2<32>
	v10 = v10 << v12
	v8 = v8 + v10
	loc3 = v8
	v8 = loc3
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = loc2
	v10 = 1<32>
	v8 = v8 + v10
	loc4 = v8
	v8 = loc4
	loc2 = v8
	goto l00106F9A
	// succ:  l00106F9A
l00106FE5:
	return
	// succ:  fn00106F9A_exit
l00106FE8:
	return
	// succ:  fn00106F9A_exit
fn00106F9A_exit:


// fn00106FEA
// Return size: 0
void fn00106FEA(word32 arg0, word32 arg1)
fn00106FEA_entry:
	// succ:  l00106FEA
l00106FEA:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v4 = arg0
	v5 = 0<64>
	Mem0[v4:word64] = v5
	v4 = arg0
	v6 = 8<32>
	v4 = v4 + v6
	v6 = 0<32>
	Mem0[v4:word32] = v6
	v4 = arg0
	v6 = 1<32>
	v7 = 0x2D<32>
	fn0011C6AF(v4, v6, v7)
	return
	// succ:  fn00106FEA_exit
l0010700B:
	return
	// succ:  fn00106FEA_exit
fn00106FEA_exit:


// fn0010700D
// Return size: 0
word32 fn0010700D(word32 arg0)
fn0010700D_entry:
	// succ:  l0010700D
l0010700D:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0<32>
	return v4
	// succ:  fn0010700D_exit
l00107016:
	return v4
	// succ:  fn0010700D_exit
fn0010700D_exit:


// fn00107018
// Return size: 0
void fn00107018(word32 arg0, word32 arg1)
fn00107018_entry:
	// succ:  l00107018
l00107018:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v4 = arg0
	v5 = 0x4000302<32>
	Mem0[v4:word32] = v5
	return
	// succ:  fn00107018_exit
l00107029:
	return
	// succ:  fn00107018_exit
fn00107018_exit:


// fn0010702B
// Return size: 0
void fn0010702B(word32 arg0, word32 arg1)
fn0010702B_entry:
	// succ:  l0010702B
l0010702B:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v4 = arg0
	v5 = 0x4000302<32>
	Mem0[v4:word32] = v5
	return
	// succ:  fn0010702B_exit
l0010703C:
	return
	// succ:  fn0010702B_exit
fn0010702B_exit:


// fn0010703E
// Return size: 0
void fn0010703E(word32 arg0)
fn0010703E_entry:
	// succ:  l0010703E
l0010703E:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	return
	// succ:  fn0010703E_exit
l00107045:
	return
	// succ:  fn0010703E_exit
fn0010703E_exit:


// fn00107047
// Return size: 0
void fn00107047(word32 arg0)
fn00107047_entry:
	// succ:  l00107047
l00107047:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn00107047_exit
l00107053:
	return
	// succ:  fn00107047_exit
fn00107047_exit:


// fn00107055
// Return size: 0
word32 fn00107055(word32 arg0)
fn00107055_entry:
	// succ:  l00107055
l00107055:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0x7FFFFFFF<32>
	return v4
	// succ:  fn00107055_exit
l00107062:
	return v4
	// succ:  fn00107055_exit
fn00107055_exit:


// fn00107064
// Return size: 0
word32 fn00107064(word32 arg0)
fn00107064_entry:
	// succ:  l00107064
l00107064:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0x7FFFFFFF<32>
	return v4
	// succ:  fn00107064_exit
l00107071:
	return v4
	// succ:  fn00107064_exit
fn00107064_exit:


// fn00107073
// Return size: 0
void fn00107073(word32 arg0, word32 arg1)
fn00107073_entry:
	// succ:  l00107073
l00107073:
	v8 = Mem0[0x00140030<p32>:word32]
	loc7 = v8
	v8 = arg0
	v9 = 0<64>
	Mem0[v8:word64] = v9
	v8 = arg0
	v10 = 8<32>
	v8 = v8 + v10
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = 0<32>
	loc2 = v8
	// succ:  l00107090
l00107090:
	v8 = loc2
	v10 = 3<32>
	v11 = v8 == v10
	loc5 = v11
	v8 = loc5
	branch !v8 l001070A0
	// succ:  l0010709D l001070A0
l0010709D:
	goto l001070BE
	// succ:  l001070BE
l001070A0:
	v8 = arg0
	v10 = loc2
	v12 = 2<32>
	v10 = v10 << v12
	v8 = v8 + v10
	loc3 = v8
	v8 = loc3
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = loc2
	v10 = 1<32>
	v8 = v8 + v10
	loc4 = v8
	v8 = loc4
	loc2 = v8
	goto l00107073
	// succ:  l00107073
l001070BE:
	return
	// succ:  fn00107073_exit
l001070C1:
	return
	// succ:  fn00107073_exit
fn00107073_exit:


// fn001070C3
// Return size: 0
void fn001070C3(word32 arg0, word32 arg1)
fn001070C3_entry:
	// succ:  l001070C3
l001070C3:
	v8 = Mem0[0x00140030<p32>:word32]
	loc7 = v8
	v8 = arg0
	v9 = 0<64>
	Mem0[v8:word64] = v9
	v8 = arg0
	v10 = 8<32>
	v8 = v8 + v10
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = 0<32>
	loc2 = v8
	// succ:  l001070E0
l001070E0:
	v8 = loc2
	v10 = 3<32>
	v11 = v8 == v10
	loc5 = v11
	v8 = loc5
	branch !v8 l001070F0
	// succ:  l001070ED l001070F0
l001070ED:
	goto l0010710E
	// succ:  l0010710E
l001070F0:
	v8 = arg0
	v10 = loc2
	v12 = 2<32>
	v10 = v10 << v12
	v8 = v8 + v10
	loc3 = v8
	v8 = loc3
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = loc2
	v10 = 1<32>
	v8 = v8 + v10
	loc4 = v8
	v8 = loc4
	loc2 = v8
	goto l001070C3
	// succ:  l001070C3
l0010710E:
	return
	// succ:  fn001070C3_exit
l00107111:
	return
	// succ:  fn001070C3_exit
fn001070C3_exit:


// fn00107113
// Return size: 0
void fn00107113(word32 arg0, word32 arg1)
fn00107113_entry:
	// succ:  l00107113
l00107113:
	v8 = Mem0[0x00140030<p32>:word32]
	loc7 = v8
	v8 = arg0
	v9 = 0<64>
	Mem0[v8:word64] = v9
	v8 = arg0
	v10 = 8<32>
	v8 = v8 + v10
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = 0<32>
	loc2 = v8
	// succ:  l00107130
l00107130:
	v8 = loc2
	v10 = 3<32>
	v11 = v8 == v10
	loc5 = v11
	v8 = loc5
	branch !v8 l00107140
	// succ:  l0010713D l00107140
l0010713D:
	goto l0010715E
	// succ:  l0010715E
l00107140:
	v8 = arg0
	v10 = loc2
	v12 = 2<32>
	v10 = v10 << v12
	v8 = v8 + v10
	loc3 = v8
	v8 = loc3
	v10 = 0<32>
	Mem0[v8:word32] = v10
	v8 = loc2
	v10 = 1<32>
	v8 = v8 + v10
	loc4 = v8
	v8 = loc4
	loc2 = v8
	goto l00107113
	// succ:  l00107113
l0010715E:
	return
	// succ:  fn00107113_exit
l00107161:
	return
	// succ:  fn00107113_exit
fn00107113_exit:


// fn00107163
// Return size: 0
void fn00107163(word32 arg0, word32 arg1)
fn00107163_entry:
	// succ:  l00107163
l00107163:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v4 = arg0
	v5 = 0<64>
	Mem0[v4:word64] = v5
	v4 = arg0
	v6 = 8<32>
	v4 = v4 + v6
	v6 = 0<32>
	Mem0[v4:word32] = v6
	v4 = arg0
	v6 = 1<32>
	v7 = 0x2D<32>
	fn0011C6AF(v4, v6, v7)
	return
	// succ:  fn00107163_exit
l00107184:
	return
	// succ:  fn00107163_exit
fn00107163_exit:


// fn00107186
// Return size: 0
word32 fn00107186(word32 arg0)
fn00107186_entry:
	// succ:  l00107186
l00107186:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0<32>
	return v4
	// succ:  fn00107186_exit
l0010718F:
	return v4
	// succ:  fn00107186_exit
fn00107186_exit:


// fn00107191
// Return size: 0
void fn00107191(word32 arg0, word32 arg1)
fn00107191_entry:
	// succ:  l00107191
l00107191:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v4 = arg0
	v5 = 0x4000302<32>
	Mem0[v4:word32] = v5
	return
	// succ:  fn00107191_exit
l001071A2:
	return
	// succ:  fn00107191_exit
fn00107191_exit:


// fn001071A4
// Return size: 0
void fn001071A4(word32 arg0, word32 arg1)
fn001071A4_entry:
	// succ:  l001071A4
l001071A4:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v4 = arg0
	v5 = 0x4000302<32>
	Mem0[v4:word32] = v5
	return
	// succ:  fn001071A4_exit
l001071B5:
	return
	// succ:  fn001071A4_exit
fn001071A4_exit:


// fn001071B7
// Return size: 0
void fn001071B7(word32 arg0)
fn001071B7_entry:
	// succ:  l001071B7
l001071B7:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	return
	// succ:  fn001071B7_exit
l001071BE:
	return
	// succ:  fn001071B7_exit
fn001071B7_exit:


// fn001071C0
// Return size: 0
void fn001071C0(word32 arg0)
fn001071C0_entry:
	// succ:  l001071C0
l001071C0:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn001071C0_exit
l001071CC:
	return
	// succ:  fn001071C0_exit
fn001071C0_exit:


// fn00107E59
// Return size: 0
void fn00107E59(word32 arg0)
fn00107E59_entry:
	// succ:  l00107E59
l00107E59:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	return
	// succ:  fn00107E59_exit
l00107E60:
	return
	// succ:  fn00107E59_exit
fn00107E59_exit:


// fn0010B494
// Return size: 0
void fn0010B494(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5, word32 arg6, word32 arg7, word32 arg8, word32 arg9)
fn0010B494_entry:
	// succ:  l0010B494
l0010B494:
	v177 = Mem0[0x00140030<p32>:word32]
	loc184 = v177
	v177 = Mem0[0x00140030<p32>:word32]
	v178 = 0x70<32>
	v177 = v177 + v178
	Mem0[0x00140030<p32>:word32] = v177
	v177 = Mem0[0x00140030<p32>:word32]
	v178 = Mem0[0x00140034<p32>:word32]
	v179 = v177 >= v178
	branch !v179 l0010B4B0
	// succ:  l0010B4AA l0010B4B0
l0010B4AA:
	v177 = 0x70<32>
	abortStackOverflow(v177)
	// succ:  l0010B4B0
l0010B4B0:
	v177 = loc184
	v178 = 0x64<32>
	v177 = v177 + v178
	loc18 = v177
	v177 = loc184
	v178 = 0x58<32>
	v177 = v177 + v178
	loc29 = v177
	v177 = loc184
	v178 = 0x4C<32>
	v177 = v177 + v178
	loc40 = v177
	v177 = loc184
	v178 = 0x40<32>
	v177 = v177 + v178
	loc51 = v177
	v177 = loc184
	v178 = 0x34<32>
	v177 = v177 + v178
	loc62 = v177
	v177 = loc184
	v178 = 0x30<32>
	v177 = v177 + v178
	loc73 = v177
	v177 = loc184
	v178 = 0x24<32>
	v177 = v177 + v178
	loc84 = v177
	v177 = loc184
	v178 = 0x18<32>
	v177 = v177 + v178
	loc91 = v177
	v177 = loc184
	v178 = 0xC<32>
	v177 = v177 + v178
	loc92 = v177
	v177 = loc184
	loc93 = v177
	v177 = arg0
	v177 = v177
	// succ:  l0010B505 l0010B505
l0010B505:
	v177 = arg1
	v178 = 0x5328<32>
	v177 = fn000EA9F7(v177, v178)
	loc94 = v177
	v177 = loc94
	v177 = Mem0[v177:word32]
	loc95 = v177
	v177 = loc95
	v178 = 0x2C<32>
	v177 = v177 + v178
	loc96 = v177
	v177 = loc96
	v177 = Mem0[v177:word32]
	loc97 = v177
	v177 = loc18
	v178 = loc94
	v180 = loc97
	v181 = 0x1FF<32>
	v180 = v180 & v181
	v181 = 0x700<32>
	v180 = v180 + v181
fn0010B494_exit:


// fn0010BEC2
// Return size: 0
void fn0010BEC2(word32 arg0, word32 arg1, word32 arg2)
fn0010BEC2_entry:
	// succ:  l0010BEC2
l0010BEC2:
	v35 = Mem0[0x00140030<p32>:word32]
	loc35 = v35
	v35 = arg0
	v36 = 4<32>
	v35 = v35 + v36
	loc27 = v35
	v35 = loc27
	v35 = Mem0[v35:word32]
	loc28 = v35
	v35 = loc28
	v36 = 0x1A4<32>
	v37 = v35 != v36
	loc29 = v37
	v35 = arg2
	v35 = Mem0[v35:word32]
	loc30 = v35
	v35 = arg0
	v35 = Mem0[v35:word32]
	loc31 = v35
	v35 = loc30
	v36 = loc31
	v35 = v35 - v36
	loc32 = v35
	v35 = loc32
	v36 = 0x7FFFFFFF<32>
	v37 = v35 <u v36
	loc33 = v37
	v35 = loc32
	v36 = 1<32>
	v35 = v35 << v36
	loc7 = v35
	v35 = loc33
	branch !v35 l0010BF0C
	// succ:  l0010BF09 l0010BF0C
l0010BF09:
	v35 = loc7
	goto l0010BF0E
	// succ:  l0010BF0E
l0010BF0C:
	v35 = 0xFFFFFFFF<32>
	// succ:  l0010BF0E
l0010BF0E:
	loc4 = v35
	v35 = loc4
	v36 = 0<32>
	v37 = v35 == v36
	loc8 = v37
	v35 = loc8
	branch !v35 l0010BF1F
	// succ:  l0010BF1C l0010BF1F
l0010BF1C:
	v35 = 1<32>
	goto l0010BF21
	// succ:  l0010BF21
l0010BF1F:
	v35 = loc4
	// succ:  l0010BF21
l0010BF21:
	loc3 = v35
	v35 = arg1
	v35 = Mem0[v35:word32]
	loc9 = v35
	v35 = loc31
	loc10 = v35
	v35 = loc9
	v36 = loc31
	v35 = v35 - v36
	loc11 = v35
	v35 = loc29
	branch !v35 l0010BF3D
	// succ:  l0010BF3A l0010BF3D
l0010BF3A:
	v35 = loc10
	goto l0010BF3F
	// succ:  l0010BF3F
l0010BF3D:
	v35 = 0<32>
	// succ:  l0010BF3F
l0010BF3F:
	loc12 = v35
	v35 = loc12
	v36 = loc3
	v35 = fn000E3E00(v35, v36)
	loc13 = v35
	v35 = loc13
	v36 = 0<32>
	v37 = v35 == v36
	loc14 = v37
	v35 = loc14
	branch !v35 l0010BF5A
	// succ:  l0010BF56 l0010BF5A
l0010BF56:
	fn0011B725()
	// succ:  l0010BF5A
l0010BF5A:
	v35 = loc29
	branch !v35 l0010BF70
	// succ:  l0010BF60 l0010BF70
l0010BF60:
	v35 = loc13
	loc15 = v35
	v35 = arg0
	v36 = loc15
	Mem0[v35:word32] = v36
	v35 = loc13
	loc24 = v35
	goto l0010BFD4
	// succ:  l0010BFD4
l0010BF70:
	v35 = arg0
	v35 = Mem0[v35:word32]
	loc5 = v35
	v35 = loc13
	loc16 = v35
	v35 = arg0
	v36 = loc16
	Mem0[v35:word32] = v36
	v35 = loc5
	v36 = 0<32>
	v37 = v35 == v36
	loc17 = v37
	v35 = loc17
	branch !v35 l0010BF92
	// succ:  l0010BF8D l0010BF92
l0010BF8D:
	v35 = loc13
	loc24 = v35
	goto l0010BFD3
	// succ:  l0010BFD3
l0010BF92:
	v35 = loc27
	v35 = Mem0[v35:word32]
	loc18 = v35
	v35 = 0<32>
	Mem0[0x00140048<p32>:word32] = v35
	v35 = loc18
	v36 = loc5
	invoke_vi(v35, v36)
	v35 = Mem0[0x00140048<p32>:word32]
	loc19 = v35
	v35 = 0<32>
	Mem0[0x00140048<p32>:word32] = v35
	v35 = loc19
	v36 = 1<32>
	v35 = v35 & v36
	loc20 = v35
	v35 = loc20
	branch !v35 l0010BFC5
	// succ:  l0010BFB6 l0010BFC5
l0010BFB6:
	v35 = 0<32>
	v35 = ___cxa_find_matching_catch_3(v35)
	loc21 = v35
	v35 = Mem0[0x00140094<p32>:word32]
	loc22 = v35
	v35 = loc21
	fn000D0E65(v35)
	goto l0010BFD2
	// succ:  l0010BFD2
l0010BFC5:
	v35 = arg0
	v35 = Mem0[v35:word32]
	loc6 = v35
	v35 = loc6
	loc24 = v35
	goto l0010BFD5
	// succ:  l0010BFD5
l0010BFD2:
	// succ:  l0010BFD3
l0010BFD3:
	// succ:  l0010BFD4
l0010BFD4:
	// succ:  l0010BFD5
l0010BFD5:
	v35 = loc27
	v36 = 0x1AD<32>
	Mem0[v35:word32] = v36
	v35 = loc24
	v36 = loc11
	v35 = v35 + v36
	loc23 = v35
	v35 = arg1
	v36 = loc23
	Mem0[v35:word32] = v36
	v35 = arg0
	v35 = Mem0[v35:word32]
	loc25 = v35
	v35 = loc25
	v36 = loc3
	v35 = v35 + v36
	loc26 = v35
	v35 = arg2
	v36 = loc26
	Mem0[v35:word32] = v36
	return
	// succ:  fn0010BEC2_exit
l0010C002:
	return
	// succ:  fn0010BEC2_exit
fn0010BEC2_exit:


// fn0010C004
// Return size: 0
void fn0010C004(word32 arg0, word32 arg1, word32 arg2)
fn0010C004_entry:
	// succ:  l0010C004
l0010C004:
	v37 = Mem0[0x00140030<p32>:word32]
	loc37 = v37
	v37 = arg0
	v38 = 4<32>
	v37 = v37 + v38
	loc27 = v37
	v37 = loc27
	v37 = Mem0[v37:word32]
	loc29 = v37
	v37 = loc29
	v38 = 0x1A4<32>
	v39 = v37 != v38
	loc30 = v39
	v37 = arg2
	v37 = Mem0[v37:word32]
	loc31 = v37
	v37 = arg0
	v37 = Mem0[v37:word32]
	loc32 = v37
	v37 = loc31
	v38 = loc32
	v37 = v37 - v38
	loc33 = v37
	v37 = loc33
	v38 = 0x7FFFFFFF<32>
	v39 = v37 <u v38
	loc34 = v39
	v37 = loc33
	v38 = 1<32>
	v37 = v37 << v38
	loc7 = v37
	v37 = loc34
	branch !v37 l0010C04E
	// succ:  l0010C04B l0010C04E
l0010C04B:
	v37 = loc7
	goto l0010C050
	// succ:  l0010C050
l0010C04E:
	v37 = 0xFFFFFFFF<32>
	// succ:  l0010C050
l0010C050:
	loc4 = v37
	v37 = loc4
	v38 = 0<32>
	v39 = v37 == v38
	loc8 = v39
	v37 = loc8
	branch !v37 l0010C061
	// succ:  l0010C05E l0010C061
l0010C05E:
	v37 = 4<32>
	goto l0010C063
	// succ:  l0010C063
l0010C061:
	v37 = loc4
	// succ:  l0010C063
l0010C063:
	loc3 = v37
	v37 = arg1
	v37 = Mem0[v37:word32]
	loc9 = v37
	v37 = loc9
	v38 = loc32
	v37 = v37 - v38
	loc10 = v37
	v37 = loc10
	v38 = 2<32>
	v37 = v37 >> v38
	loc11 = v37
	v37 = loc32
	loc35 = v37
	v37 = loc30
	branch !v37 l0010C086
	// succ:  l0010C083 l0010C086
l0010C083:
	v37 = loc35
	goto l0010C088
	// succ:  l0010C088
l0010C086:
	v37 = 0<32>
	// succ:  l0010C088
l0010C088:
	loc12 = v37
	v37 = loc12
	v38 = loc3
	v37 = fn000E3E00(v37, v38)
	loc13 = v37
	v37 = loc13
	v38 = 0<32>
	v39 = v37 == v38
	loc14 = v39
	v37 = loc14
	branch !v37 l0010C0A3
	// succ:  l0010C09F l0010C0A3
l0010C09F:
	fn0011B725()
	// succ:  l0010C0A3
l0010C0A3:
	v37 = loc30
	branch !v37 l0010C0B9
	// succ:  l0010C0A9 l0010C0B9
l0010C0A9:
	v37 = loc13
	loc15 = v37
	v37 = arg0
	v38 = loc15
	Mem0[v37:word32] = v38
	v37 = loc13
	loc25 = v37
	goto l0010C11D
	// succ:  l0010C11D
l0010C0B9:
	v37 = arg0
	v37 = Mem0[v37:word32]
	loc5 = v37
	v37 = loc13
	loc16 = v37
	v37 = arg0
	v38 = loc16
	Mem0[v37:word32] = v38
	v37 = loc5
	v38 = 0<32>
	v39 = v37 == v38
	loc17 = v39
	v37 = loc17
	branch !v37 l0010C0DB
	// succ:  l0010C0D6 l0010C0DB
l0010C0D6:
	v37 = loc13
	loc25 = v37
	goto l0010C11C
	// succ:  l0010C11C
l0010C0DB:
	v37 = loc27
	v37 = Mem0[v37:word32]
	loc18 = v37
	v37 = 0<32>
	Mem0[0x00140048<p32>:word32] = v37
	v37 = loc18
	v38 = loc5
	invoke_vi(v37, v38)
	v37 = Mem0[0x00140048<p32>:word32]
	loc19 = v37
	v37 = 0<32>
	Mem0[0x00140048<p32>:word32] = v37
	v37 = loc19
	v38 = 1<32>
	v37 = v37 & v38
	loc20 = v37
	v37 = loc20
	branch !v37 l0010C10E
	// succ:  l0010C0FF l0010C10E
l0010C0FF:
	v37 = 0<32>
	v37 = ___cxa_find_matching_catch_3(v37)
	loc21 = v37
	v37 = Mem0[0x00140094<p32>:word32]
	loc22 = v37
	v37 = loc21
	fn000D0E65(v37)
	goto l0010C11B
	// succ:  l0010C11B
l0010C10E:
	v37 = arg0
	v37 = Mem0[v37:word32]
	loc6 = v37
	v37 = loc6
	loc25 = v37
	goto l0010C11E
	// succ:  l0010C11E
l0010C11B:
	// succ:  l0010C11C
l0010C11C:
	// succ:  l0010C11D
l0010C11D:
	// succ:  l0010C11E
l0010C11E:
	v37 = loc27
	v38 = 0x1AD<32>
	Mem0[v37:word32] = v38
	v37 = loc3
	v38 = 2<32>
	v37 = v37 >>u v38
	loc23 = v37
	v37 = loc25
	v38 = loc11
	v40 = 2<32>
	v38 = v38 << v40
	v37 = v37 + v38
	loc24 = v37
	v37 = arg1
	v38 = loc24
	Mem0[v37:word32] = v38
	v37 = arg0
	v37 = Mem0[v37:word32]
	loc26 = v37
	v37 = loc26
	v38 = loc23
	v40 = 2<32>
	v38 = v38 << v40
	v37 = v37 + v38
	loc28 = v37
	v37 = arg2
	v38 = loc28
	Mem0[v37:word32] = v38
	return
	// succ:  fn0010C004_exit
l0010C158:
	return
	// succ:  fn0010C004_exit
fn0010C004_exit:


// fn0010C15A
// Return size: 0
void fn0010C15A(word32 arg0)
fn0010C15A_entry:
	// succ:  l0010C15A
l0010C15A:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	return
	// succ:  fn0010C15A_exit
l0010C161:
	return
	// succ:  fn0010C15A_exit
fn0010C15A_exit:


// fn0010C163
// Return size: 0
void fn0010C163(word32 arg0)
fn0010C163_entry:
	// succ:  l0010C163
l0010C163:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn0010C163_exit
l0010C16F:
	return
	// succ:  fn0010C163_exit
fn0010C163_exit:


