// stackAlloc
// Return size: 0
word32 stackAlloc(word32 arg0)
stackAlloc_entry:
	// succ:  l000D0000
l000D0000:
	v3 = Mem0[0x00140030<p32>:word32]
	loc1 = v3
	v4 = Mem0[0x00140030<p32>:word32]
	v5 = arg0
	v6 = v4 + v5
	Mem0[0x00140030<p32>:word32] = v6
	v7 = Mem0[0x00140030<p32>:word32]
	v8 = 0xF<32>
	v9 = v7 + v8
	v10 = 0xFFFFFFF0<32>
	v11 = v9 & v10
	Mem0[0x00140030<p32>:word32] = v11
	v12 = Mem0[0x00140030<p32>:word32]
	v13 = Mem0[0x00140034<p32>:word32]
stackAlloc_exit:


// stackSave
// Return size: 0
word32 stackSave()
stackSave_entry:
	// succ:  l000D0028
l000D0028:
	v2 = Mem0[0x00140030<p32>:word32]
stackSave_exit:


// stackRestore
// Return size: 0
void stackRestore(word32 arg0)
stackRestore_entry:
	// succ:  l000D002C
l000D002C:
	v2 = arg0
	Mem0[0x00140030<p32>:word32] = v2
	return
stackRestore_exit:


// establishStackSpace
// Return size: 0
void establishStackSpace(word32 arg0, word32 arg1)
establishStackSpace_entry:
	// succ:  l000D0031
l000D0031:
	v2 = arg0
	Mem0[0x00140030<p32>:word32] = v2
	v3 = arg1
	Mem0[0x00140034<p32>:word32] = v3
	return
establishStackSpace_exit:


// setThrew
// Return size: 0
void setThrew(word32 arg0, word32 arg1)
setThrew_entry:
	// succ:  l000D003D
l000D003D:
	v2 = Mem0[0x00140048<p32>:word32]
	v3 = 0<32>
setThrew_exit:


// setTempRet0
// Return size: 0
void setTempRet0(word32 arg0)
setTempRet0_entry:
	// succ:  l000D004E
l000D004E:
	v2 = arg0
	Mem0[0x00140094<p32>:word32] = v2
	return
setTempRet0_exit:


// getTempRet0
// Return size: 0
word32 getTempRet0()
getTempRet0_entry:
	// succ:  l000D0053
l000D0053:
	v2 = Mem0[0x00140094<p32>:word32]
getTempRet0_exit:


// fn000D0057
// Return size: 0
word32 fn000D0057()
fn000D0057_entry:
	// succ:  l000D0057
l000D0057:
	v6 = Mem0[0x00140030<p32>:word32]
	loc3 = v6
	v7 = Mem0[0x00140030<p32>:word32]
	v8 = 0x10<32>
	v9 = v7 + v8
	Mem0[0x00140030<p32>:word32] = v9
	v10 = Mem0[0x00140030<p32>:word32]
	v11 = Mem0[0x00140034<p32>:word32]
fn000D0057_exit:


// fn000D0082
// Return size: 0
void fn000D0082()
fn000D0082_entry:
	// succ:  l000D0082
l000D0082:
	v5 = Mem0[0x00140030<p32>:word32]
	loc2 = v5
	v6 = fn000D0057()
	loc0 = v6
	v7 = 0x4620<32>
	v8 = loc0
fn000D0082_exit:


// _main
// Return size: 0
word32 _main()
_main_entry:
	// succ:  l000D0098
l000D0098:
	v12 = Mem0[0x00140030<p32>:word32]
	loc9 = v12
	v13 = Mem0[0x00140030<p32>:word32]
	v14 = 0x10<32>
	v15 = v13 + v14
	Mem0[0x00140030<p32>:word32] = v15
	v16 = Mem0[0x00140030<p32>:word32]
	v17 = Mem0[0x00140034<p32>:word32]
_main_exit:


// fn000D00FD
// Return size: 0
word32 fn000D00FD(word32 arg0, word32 arg1)
fn000D00FD_entry:
	// succ:  l000D00FD
l000D00FD:
	v11 = Mem0[0x00140030<p32>:word32]
	loc10 = v11
	v12 = Mem0[0x00140030<p32>:word32]
	v13 = 0x10<32>
	v14 = v12 + v13
	Mem0[0x00140030<p32>:word32] = v14
	v15 = Mem0[0x00140030<p32>:word32]
	v16 = Mem0[0x00140034<p32>:word32]
fn000D00FD_exit:


// fn000D0143
// Return size: 0
word32 fn000D0143(word32 arg0)
fn000D0143_entry:
	// succ:  l000D0143
l000D0143:
	v44 = Mem0[0x00140030<p32>:word32]
	loc42 = v44
	v45 = Mem0[0x00140030<p32>:word32]
	v46 = 0x20<32>
	v47 = v45 + v46
	Mem0[0x00140030<p32>:word32] = v47
	v48 = Mem0[0x00140030<p32>:word32]
	v49 = Mem0[0x00140034<p32>:word32]
fn000D0143_exit:


// fn000D0290
// Return size: 0
word32 fn000D0290(word32 arg0, word32 arg1, word32 arg2)
fn000D0290_entry:
	// succ:  l000D0290
l000D0290:
	v163 = Mem0[0x00140030<p32>:word32]
	loc163 = v163
	v164 = Mem0[0x00140030<p32>:word32]
	v165 = 0x80<32>
	v166 = v164 + v165
	Mem0[0x00140030<p32>:word32] = v166
	v167 = Mem0[0x00140030<p32>:word32]
	v168 = Mem0[0x00140034<p32>:word32]
fn000D0290_exit:


// fn000D0843
// Return size: 0
word32 fn000D0843(word32 arg0)
fn000D0843_entry:
	// succ:  l000D0843
l000D0843:
	v7 = Mem0[0x00140030<p32>:word32]
	loc5 = v7
	v8 = Mem0[0x00140030<p32>:word32]
	v9 = 0x10<32>
	v10 = v8 + v9
	Mem0[0x00140030<p32>:word32] = v10
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = Mem0[0x00140034<p32>:word32]
fn000D0843_exit:


// fn000D0874
// Return size: 0
word32 fn000D0874(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn000D0874_entry:
	// succ:  l000D0874
l000D0874:
	v193 = Mem0[0x00140030<p32>:word32]
	loc196 = v193
	v194 = Mem0[0x00140030<p32>:word32]
	v195 = 0x110<32>
	v196 = v194 + v195
	Mem0[0x00140030<p32>:word32] = v196
	v197 = Mem0[0x00140030<p32>:word32]
	v198 = Mem0[0x00140034<p32>:word32]
fn000D0874_exit:


// fn000D0E65
// Return size: 0
void fn000D0E65(word32 arg0)
fn000D0E65_entry:
	// succ:  l000D0E65
l000D0E65:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v5 = arg0
	v6 = ___cxa_begin_catch(v5)
fn000D0E65_exit:


// fn000D0E75
// Return size: 0
word32 fn000D0E75(word32 arg0, word32 arg1)
fn000D0E75_entry:
	// succ:  l000D0E75
l000D0E75:
	v9 = Mem0[0x00140030<p32>:word32]
	loc8 = v9
	v10 = Mem0[0x00140030<p32>:word32]
	v11 = 0x10<32>
	v12 = v10 + v11
	Mem0[0x00140030<p32>:word32] = v12
	v13 = Mem0[0x00140030<p32>:word32]
	v14 = Mem0[0x00140034<p32>:word32]
fn000D0E75_exit:


// fn000D0EAE
// Return size: 0
word32 fn000D0EAE()
fn000D0EAE_entry:
	// succ:  l000D0EAE
l000D0EAE:
	v4 = Mem0[0x00140030<p32>:word32]
	loc1 = v4
	v5 = 0xFFFFFFFF<32>
fn000D0EAE_exit:


// __GLOBAL__sub_I_hello_cpp
// Return size: 0
void __GLOBAL__sub_I_hello_cpp()
__GLOBAL__sub_I_hello_cpp_entry:
	// succ:  l000D0EB9
l000D0EB9:
	v4 = Mem0[0x00140030<p32>:word32]
	loc1 = v4
	fn000D0082()
__GLOBAL__sub_I_hello_cpp_exit:


// fn000D0EC4
// Return size: 0
word32 fn000D0EC4(word32 arg0)
fn000D0EC4_entry:
	// succ:  l000D0EC4
l000D0EC4:
	v9 = Mem0[0x00140030<p32>:word32]
	loc7 = v9
	v10 = Mem0[0x00140030<p32>:word32]
	v11 = 0x10<32>
	v12 = v10 + v11
	Mem0[0x00140030<p32>:word32] = v12
	v13 = Mem0[0x00140030<p32>:word32]
	v14 = Mem0[0x00140034<p32>:word32]
fn000D0EC4_exit:


// fn000D0F0D
// Return size: 0
word32 fn000D0F0D(word32 arg0, word32 arg1, word32 arg2)
fn000D0F0D_entry:
	// succ:  l000D0F0D
l000D0F0D:
	v71 = Mem0[0x00140030<p32>:word32]
	loc71 = v71
	v72 = Mem0[0x00140030<p32>:word32]
	v73 = 0x30<32>
	v74 = v72 + v73
	Mem0[0x00140030<p32>:word32] = v74
	v75 = Mem0[0x00140030<p32>:word32]
	v76 = Mem0[0x00140034<p32>:word32]
fn000D0F0D_exit:


// fn000D120B
// Return size: 0
word32 fn000D120B(word32 arg0, word32 arg1, word32 arg2)
fn000D120B_entry:
	// succ:  l000D120B
l000D120B:
	v17 = Mem0[0x00140030<p32>:word32]
	loc17 = v17
	v18 = Mem0[0x00140030<p32>:word32]
	v19 = 0x20<32>
	v20 = v18 + v19
	Mem0[0x00140030<p32>:word32] = v20
	v21 = Mem0[0x00140030<p32>:word32]
	v22 = Mem0[0x00140034<p32>:word32]
fn000D120B_exit:


// fn000D12B7
// Return size: 0
word32 fn000D12B7(word32 arg0)
fn000D12B7_entry:
	// succ:  l000D12B7
l000D12B7:
	v8 = Mem0[0x00140030<p32>:word32]
	loc6 = v8
	v9 = arg0
	v10 = 0xFFFFF000<32>
fn000D12B7_exit:


// ___errno_location
// Return size: 0
word32 ___errno_location()
___errno_location_entry:
	// succ:  l000D12EA
l000D12EA:
	v10 = Mem0[0x00140030<p32>:word32]
	loc7 = v10
	v11 = 0x4624<32>
___errno_location_exit:


// fn000D1329
// Return size: 0
void fn000D1329(word32 arg0)
fn000D1329_entry:
	// succ:  l000D1329
l000D1329:
	v7 = Mem0[0x00140030<p32>:word32]
	loc5 = v7
	v8 = arg0
	v9 = 0x44<32>
	v10 = v8 + v9
	loc1 = v10
	v11 = loc1
fn000D1329_exit:


// fn000D1351
// Return size: 0
void fn000D1351(word32 arg0)
fn000D1351_entry:
	// succ:  l000D1351
l000D1351:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
fn000D1351_exit:


// fn000D135A
// Return size: 0
word32 fn000D135A(word32 arg0, word32 arg1, word32 arg2)
fn000D135A_entry:
	// succ:  l000D135A
l000D135A:
	v54 = Mem0[0x00140030<p32>:word32]
	loc54 = v54
	v55 = Mem0[0x00140030<p32>:word32]
	v56 = 0x30<32>
	v57 = v55 + v56
	Mem0[0x00140030<p32>:word32] = v57
	v58 = Mem0[0x00140030<p32>:word32]
	v59 = Mem0[0x00140034<p32>:word32]
fn000D135A_exit:


// fn000D157C
// Return size: 0
void fn000D157C(word32 arg0)
fn000D157C_entry:
	// succ:  l000D157C
l000D157C:
	v7 = Mem0[0x00140030<p32>:word32]
	loc5 = v7
	v8 = arg0
	v9 = 0x44<32>
	v10 = v8 + v9
	loc1 = v10
	v11 = loc1
fn000D157C_exit:


// fn000D15A4
// Return size: 0
word32 fn000D15A4(word32 arg0, word32 arg1, word32 arg2)
fn000D15A4_entry:
	// succ:  l000D15A4
l000D15A4:
	v18 = Mem0[0x00140030<p32>:word32]
	loc18 = v18
	v19 = Mem0[0x00140030<p32>:word32]
	v20 = 0x50<32>
	v21 = v19 + v20
	Mem0[0x00140030<p32>:word32] = v21
	v22 = Mem0[0x00140030<p32>:word32]
	v23 = Mem0[0x00140034<p32>:word32]
fn000D15A4_exit:


// fn000D165D
// Return size: 0
word64 fn000D165D(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000D165D_entry:
	// succ:  l000D165D
l000D165D:
	v5 = Mem0[0x00140030<p32>:word32]
	loc5 = v5
	v6 = arg0
	v7 = arg1
	v8 = arg2
	v9 = fn000D1672(v6, v7, v8)
	loc6 = v9
	v10 = loc6
fn000D165D_exit:


// fn000D1672
// Return size: 0
word64 fn000D1672(word32 arg0, word32 arg1, word32 arg2)
fn000D1672_entry:
	// succ:  l000D1672
l000D1672:
	v5 = Mem0[0x00140030<p32>:word32]
	loc4 = v5
	v6 = arg0
	v7 = arg1
	v8 = arg2
fn000D1672_exit:


// fn000D1689
// Return size: 0
word64 fn000D1689(word32 arg0, word32 arg1, word32 arg2, word64 arg3)
fn000D1689_entry:
	// succ:  l000D1689
l000D1689:
	v21 = Mem0[0x00140030<p32>:word32]
	loc21 = v21
	v22 = Mem0[0x00140030<p32>:word32]
	v23 = 0x70<32>
	v24 = v22 + v23
	Mem0[0x00140030<p32>:word32] = v24
	v25 = Mem0[0x00140030<p32>:word32]
	v26 = Mem0[0x00140034<p32>:word32]
fn000D1689_exit:


// fn000D1767
// Return size: 0
void fn000D1767(word32 arg0, word32 arg1)
fn000D1767_entry:
	// succ:  l000D1767
l000D1767:
	v18 = Mem0[0x00140030<p32>:word32]
	loc17 = v18
	v19 = arg0
	v20 = 0x68<32>
	v21 = v19 + v20
	loc7 = v21
	v22 = loc7
	v23 = arg1
fn000D1767_exit:


// fn000D17F5
// Return size: 0
word64 fn000D17F5(word64 arg0, word64 arg1)
fn000D17F5_entry:
	// succ:  l000D17F5
l000D17F5:
	v2 = arg1
fn000D17F5_exit:


// fn000D1804
// Return size: 0
word64 fn000D1804(word32 arg0, word32 arg1, word32 arg2, word64 arg3)
fn000D1804_entry:
	// succ:  l000D1804
l000D1804:
	v277 = Mem0[0x00140030<p32>:word32]
	loc244 = v277
	v278 = arg1
	v279 = 0x24<32>
fn000D1804_exit:


// fn000D2493
// Return size: 0
word32 fn000D2493(word32 arg0)
fn000D2493_entry:
	// succ:  l000D2493
l000D2493:
	v51 = Mem0[0x00140030<p32>:word32]
	loc49 = v51
	v52 = arg0
	v53 = 0x68<32>
	v54 = v52 + v53
	loc6 = v54
	v55 = loc6
fn000D2493_exit:


// fn000D2665
// Return size: 0
word32 fn000D2665(word32 arg0)
fn000D2665_entry:
	// succ:  l000D2665
l000D2665:
	v9 = Mem0[0x00140030<p32>:word32]
	loc7 = v9
	v10 = arg0
	v11 = 0x20<32>
fn000D2665_exit:


// fn000D2693
// Return size: 0
word32 fn000D2693(word32 arg0)
fn000D2693_entry:
	// succ:  l000D2693
l000D2693:
	v17 = Mem0[0x00140030<p32>:word32]
	loc15 = v17
	v18 = Mem0[0x00140030<p32>:word32]
	v19 = 0x10<32>
	v20 = v18 + v19
	Mem0[0x00140030<p32>:word32] = v20
	v21 = Mem0[0x00140030<p32>:word32]
	v22 = Mem0[0x00140034<p32>:word32]
fn000D2693_exit:


// fn000D2742
// Return size: 0
word32 fn000D2742(word32 arg0)
fn000D2742_entry:
	// succ:  l000D2742
l000D2742:
	v29 = Mem0[0x00140030<p32>:word32]
	loc27 = v29
	v30 = arg0
	v31 = 0x4A<32>
	v32 = v30 + v31
	loc2 = v32
	v33 = loc2
fn000D2742_exit:


// fn000D285D
// Return size: 0
word64 fn000D285D(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000D285D_entry:
	// succ:  l000D285D
l000D285D:
	v5 = Mem0[0x00140030<p32>:word32]
	loc5 = v5
	v6 = arg0
	v7 = arg1
	v8 = arg2
	v9 = fn000D2872(v6, v7, v8)
	loc6 = v9
	v10 = loc6
fn000D285D_exit:


// fn000D2872
// Return size: 0
word64 fn000D2872(word32 arg0, word32 arg1, word32 arg2)
fn000D2872_entry:
	// succ:  l000D2872
l000D2872:
	v5 = Mem0[0x00140030<p32>:word32]
	loc4 = v5
	v6 = arg0
	v7 = arg1
	v8 = arg2
fn000D2872_exit:


// fn000D2892
// Return size: 0
real64 fn000D2892(real64 arg0, real64 arg1)
fn000D2892_entry:
	// succ:  l000D2892
l000D2892:
	v10 = Mem0[0x00140030<p32>:word32]
	loc3 = v10
	v11 = arg0
fn000D2892_exit:


// fn000D28D3
// Return size: 0
word32 fn000D28D3(word32 arg0, word32 arg1)
fn000D28D3_entry:
	// succ:  l000D28D3
l000D28D3:
	v23 = Mem0[0x00140030<p32>:word32]
	loc22 = v23
	v24 = arg0
fn000D28D3_exit:


// fn000D29A3
// Return size: 0
word32 fn000D29A3(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000D29A3_entry:
	// succ:  l000D29A3
l000D29A3:
	v30 = Mem0[0x00140030<p32>:word32]
	loc31 = v30
	v31 = Mem0[0x00140030<p32>:word32]
	v32 = 0x80<32>
	v33 = v31 + v32
	Mem0[0x00140030<p32>:word32] = v33
	v34 = Mem0[0x00140030<p32>:word32]
	v35 = Mem0[0x00140034<p32>:word32]
fn000D29A3_exit:


// fn000D2BD4
// Return size: 0
word32 fn000D2BD4(word32 arg0, word32 arg1, word32 arg2)
fn000D2BD4_entry:
	// succ:  l000D2BD4
l000D2BD4:
	v47 = Mem0[0x00140030<p32>:word32]
	loc47 = v47
	v48 = Mem0[0x00140030<p32>:word32]
	v49 = 0xE0<32>
	v50 = v48 + v49
	Mem0[0x00140030<p32>:word32] = v50
	v51 = Mem0[0x00140030<p32>:word32]
	v52 = Mem0[0x00140034<p32>:word32]
fn000D2BD4_exit:


// fn000D2E1D
// Return size: 0
word64 fn000D2E1D(word64 arg0, word64 arg1)
fn000D2E1D_entry:
	// succ:  l000D2E1D
l000D2E1D:
	v2 = arg1
fn000D2E1D_exit:


// fn000D2E2C
// Return size: 0
word32 fn000D2E2C(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn000D2E2C_entry:
	// succ:  l000D2E2C
l000D2E2C:
	v966 = Mem0[0x00140030<p32>:word32]
	loc899 = v966
	v967 = Mem0[0x00140030<p32>:word32]
	v968 = 0x270<32>
	v969 = v967 + v968
	Mem0[0x00140030<p32>:word32] = v969
	v970 = Mem0[0x00140030<p32>:word32]
	v971 = Mem0[0x00140034<p32>:word32]
fn000D2E2C_exit:


// fn000D61F1
// Return size: 0
word32 fn000D61F1(word32 arg0)
fn000D61F1_entry:
	// succ:  l000D61F1
l000D61F1:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v5 = 0<32>
fn000D61F1_exit:


// fn000D61FC
// Return size: 0
word32 fn000D61FC(word32 arg0, word32 arg1, word32 arg2)
fn000D61FC_entry:
	// succ:  l000D61FC
l000D61FC:
	v44 = Mem0[0x00140030<p32>:word32]
	loc44 = v44
	v45 = arg2
	v46 = 0x10<32>
	v47 = v45 + v46
	loc30 = v47
	v48 = loc30
fn000D61FC_exit:


// fn000D63BF
// Return size: 0
void fn000D63BF(word32 arg0, word32 arg1, word32 arg2)
fn000D63BF_entry:
	// succ:  l000D63BF
l000D63BF:
	v155 = Mem0[0x00140030<p32>:word32]
	loc146 = v155
	v156 = arg1
	v157 = 0x14<32>
fn000D63BF_exit:


// fn000D68BF
// Return size: 0
word32 fn000D68BF(word64 arg0, word32 arg1)
fn000D68BF_entry:
	// succ:  l000D68BF
l000D68BF:
	v27 = Mem0[0x00140030<p32>:word32]
	loc22 = v27
	v28 = arg0
fn000D68BF_exit:


// fn000D69BF
// Return size: 0
word32 fn000D69BF(word32 arg0)
fn000D69BF_entry:
	// succ:  l000D69BF
l000D69BF:
	v21 = Mem0[0x00140030<p32>:word32]
	loc19 = v21
	v22 = 0<32>
	loc3 = v22
fn000D69BF_exit:


// fn000D6AC0
// Return size: 0
word32 fn000D6AC0(word32 arg0, word32 arg1, word32 arg2)
fn000D6AC0_entry:
	// succ:  l000D6AC0
l000D6AC0:
	v58 = Mem0[0x00140030<p32>:word32]
	loc58 = v58
	v59 = arg1
	v60 = 0xFF<32>
	v61 = v59 & v60
	loc38 = v61
	v62 = arg0
	loc49 = v62
	v63 = loc49
	v64 = 3<32>
	v65 = v63 & v64
	loc50 = v65
	v66 = loc50
	v67 = 0<32>
fn000D6AC0_exit:


// fn000D6D47
// Return size: 0
void fn000D6D47(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn000D6D47_entry:
	// succ:  l000D6D47
l000D6D47:
	v28 = Mem0[0x00140030<p32>:word32]
	loc30 = v28
	v29 = Mem0[0x00140030<p32>:word32]
	v30 = 0x100<32>
	v31 = v29 + v30
	Mem0[0x00140030<p32>:word32] = v31
	v32 = Mem0[0x00140030<p32>:word32]
	v33 = Mem0[0x00140034<p32>:word32]
fn000D6D47_exit:


// fn000D6E73
// Return size: 0
word32 fn000D6E73(word32 arg0, word32 arg1)
fn000D6E73_entry:
	// succ:  l000D6E73
l000D6E73:
	v7 = Mem0[0x00140030<p32>:word32]
	loc6 = v7
	v8 = arg0
	v9 = 0<32>
fn000D6E73_exit:


// fn000D6E9E
// Return size: 0
real64 fn000D6E9E(real64 arg0, word32 arg1)
fn000D6E9E_entry:
	// succ:  l000D6E9E
l000D6E9E:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v6 = arg0
	v7 = arg1
	v8 = fn000D6EB2(v6, v7)
	loc4 = v8
	v9 = loc4
fn000D6E9E_exit:


// fn000D6EB2
// Return size: 0
real64 fn000D6EB2(real64 arg0, word32 arg1)
fn000D6EB2_entry:
	// succ:  l000D6EB2
l000D6EB2:
	v22 = Mem0[0x00140030<p32>:word32]
	loc12 = v22
	v23 = arg0
fn000D6EB2_exit:


// fn000D779F
// Return size: 0
word32 fn000D779F(word32 arg0, word32 arg1, word32 arg2)
fn000D779F_entry:
	// succ:  l000D779F
l000D779F:
	v52 = Mem0[0x00140030<p32>:word32]
	loc52 = v52
	v53 = arg0
	v54 = 0<32>
fn000D779F_exit:


// fn000D799D
// Return size: 0
word32 fn000D799D(word32 arg0)
fn000D799D_entry:
	// succ:  l000D799D
l000D799D:
	v26 = Mem0[0x00140030<p32>:word32]
	loc24 = v26
	v27 = arg0
	v28 = 0x4A<32>
	v29 = v27 + v28
	loc2 = v29
	v30 = loc2
fn000D799D_exit:


// fn000D7A7D
// Return size: 0
word32 fn000D7A7D(word32 arg0, word32 arg1, word32 arg2)
fn000D7A7D_entry:
	// succ:  l000D7A7D
l000D7A7D:
	v14 = Mem0[0x00140030<p32>:word32]
	loc14 = v14
	v15 = arg0
	v16 = 0x10<32>
	v17 = v15 + v16
	loc6 = v17
	v18 = loc6
fn000D7A7D_exit:


// fn000D7AE1
// Return size: 0
word32 fn000D7AE1()
fn000D7AE1_entry:
	// succ:  l000D7AE1
l000D7AE1:
	v4 = Mem0[0x00140030<p32>:word32]
	loc1 = v4
	v5 = 0xCE4<32>
fn000D7AE1_exit:


// fn000D7AED
// Return size: 0
word32 fn000D7AED()
fn000D7AED_entry:
	// succ:  l000D7AED
l000D7AED:
	v4 = Mem0[0x00140030<p32>:word32]
	loc1 = v4
	v5 = 0xCE8<32>
fn000D7AED_exit:


// fn000D7AF9
// Return size: 0
word32 fn000D7AF9()
fn000D7AF9_entry:
	// succ:  l000D7AF9
l000D7AF9:
	v4 = Mem0[0x00140030<p32>:word32]
	loc1 = v4
	v5 = 0x12EC<32>
fn000D7AF9_exit:


// fn000D7B05
// Return size: 0
word32 fn000D7B05(word32 arg0)
fn000D7B05_entry:
	// succ:  l000D7B05
l000D7B05:
	v12 = Mem0[0x00140030<p32>:word32]
	loc10 = v12
	v13 = arg0
	loc1 = v13
fn000D7B05_exit:


// fn000D7B53
// Return size: 0
word32 fn000D7B53(word32 arg0)
fn000D7B53_entry:
	// succ:  l000D7B53
l000D7B53:
	v11 = Mem0[0x00140030<p32>:word32]
	loc9 = v11
	v12 = arg0
	v13 = 0xFFFFFFD0<32>
	v14 = v12 + v13
	loc7 = v14
	v15 = loc7
	v16 = 0xA<32>
fn000D7B53_exit:


// fn000D7B90
// Return size: 0
real64 fn000D7B90(word32 arg0, word32 arg1, word32 arg2)
fn000D7B90_entry:
	// succ:  l000D7B90
l000D7B90:
	v819 = Mem0[0x00140030<p32>:word32]
	loc663 = v819
	v820 = Mem0[0x00140030<p32>:word32]
	v821 = 0x200<32>
	v822 = v820 + v821
	Mem0[0x00140030<p32>:word32] = v822
	v823 = Mem0[0x00140030<p32>:word32]
	v824 = Mem0[0x00140034<p32>:word32]
fn000D7B90_exit:


// fn000DA625
// Return size: 0
word64 fn000DA625(word32 arg0, word32 arg1)
fn000DA625_entry:
	// succ:  l000DA625
l000DA625:
	v100 = Mem0[0x00140030<p32>:word32]
	loc89 = v100
	v101 = arg0
	v102 = 4<32>
	v103 = v101 + v102
	loc21 = v103
	v104 = loc21
fn000DA625_exit:


// fn000DA9E1
// Return size: 0
real64 fn000DA9E1(real64 arg0, word32 arg1)
fn000DA9E1_entry:
	// succ:  l000DA9E1
l000DA9E1:
	v27 = Mem0[0x00140030<p32>:word32]
	loc17 = v27
	v28 = arg1
	v29 = 0x3FF<32>
fn000DA9E1_exit:


// fn000DAAEE
// Return size: 0
real64 fn000DAAEE(real64 arg0, real64 arg1)
fn000DAAEE_entry:
	// succ:  l000DAAEE
l000DAAEE:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v6 = arg0
	v7 = arg1
	v8 = fn000D2892(v6, v7)
	loc4 = v8
	v9 = loc4
fn000DAAEE_exit:


// fn000DAB02
// Return size: 0
real64 fn000DAB02(real64 arg0, word32 arg1)
fn000DAB02_entry:
	// succ:  l000DAB02
l000DAB02:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v6 = arg0
	v7 = arg1
	v8 = fn000DA9E1(v6, v7)
	loc4 = v8
	v9 = loc4
fn000DAB02_exit:


// fn000DAB16
// Return size: 0
real64 fn000DAB16(real64 arg0, real64 arg1)
fn000DAB16_entry:
	// succ:  l000DAB16
l000DAB16:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v6 = arg0
	v7 = arg1
	v8 = fn000DAB2A(v6, v7)
	loc4 = v8
	v9 = loc4
fn000DAB16_exit:


// fn000DAB2A
// Return size: 0
real64 fn000DAB2A(real64 arg0, real64 arg1)
fn000DAB2A_entry:
	// succ:  l000DAB2A
l000DAB2A:
	v100 = Mem0[0x00140030<p32>:word32]
	loc47 = v100
	v101 = arg0
fn000DAB2A_exit:


// fn000DAF01
// Return size: 0
word32 fn000DAF01(word32 arg0)
fn000DAF01_entry:
	// succ:  l000DAF01
l000DAF01:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v5 = 0<32>
fn000DAF01_exit:


// fn000DAF0C
// Return size: 0
word32 fn000DAF0C(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000DAF0C_entry:
	// succ:  l000DAF0C
l000DAF0C:
	v4 = Mem0[0x00140030<p32>:word32]
	loc5 = v4
	v5 = arg3
fn000DAF0C_exit:


// fn000DAF17
// Return size: 0
word32 fn000DAF17(word32 arg0, word32 arg1)
fn000DAF17_entry:
	// succ:  l000DAF17
l000DAF17:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v5 = 0xFFFFFFFF<32>
fn000DAF17_exit:


// fn000DAF22
// Return size: 0
void fn000DAF22(word32 arg0)
fn000DAF22_entry:
	// succ:  l000DAF22
l000DAF22:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v5 = arg0
	_free(v5)
fn000DAF22_exit:


// fn000DAF30
// Return size: 0
word32 fn000DAF30(word32 arg0)
fn000DAF30_entry:
	// succ:  l000DAF30
l000DAF30:
	v34 = Mem0[0x00140030<p32>:word32]
	loc32 = v34
	v35 = arg0
	loc9 = v35
	v36 = loc9
	v37 = 3<32>
	v38 = v36 & v37
	loc20 = v38
	v39 = loc20
	v40 = 0<32>
fn000DAF30_exit:


// fn000DB07F
// Return size: 0
word32 fn000DB07F(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000DB07F_entry:
	// succ:  l000DB07F
l000DB07F:
	v56 = Mem0[0x00140030<p32>:word32]
	loc57 = v56
	v57 = Mem0[0x00140030<p32>:word32]
	v58 = 0x10<32>
	v59 = v57 + v58
	Mem0[0x00140030<p32>:word32] = v59
	v60 = Mem0[0x00140030<p32>:word32]
	v61 = Mem0[0x00140034<p32>:word32]
fn000DB07F_exit:


// fn000DB2F6
// Return size: 0
word32 fn000DB2F6(word32 arg0, word32 arg1)
fn000DB2F6_entry:
	// succ:  l000DB2F6
l000DB2F6:
	v7 = Mem0[0x00140030<p32>:word32]
	loc6 = v7
	v8 = arg0
	v9 = 0xFFFFFFD0<32>
	v10 = v8 + v9
	loc4 = v10
	v11 = loc4
	v12 = 0xA<32>
fn000DB2F6_exit:


// fn000DB316
// Return size: 0
word32 fn000DB316(word32 arg0, word32 arg1)
fn000DB316_entry:
	// succ:  l000DB316
l000DB316:
	v5 = Mem0[0x00140030<p32>:word32]
	loc4 = v5
	v6 = arg0
	v7 = fn000D7B53(v6)
	loc2 = v7
	v8 = loc2
fn000DB316_exit:


// fn000DB328
// Return size: 0
word32 fn000DB328(word32 arg0, word32 arg1, word32 arg2)
fn000DB328_entry:
	// succ:  l000DB328
l000DB328:
	v15 = Mem0[0x00140030<p32>:word32]
	loc15 = v15
	v16 = arg1
fn000DB328_exit:


// fn000DB3DF
// Return size: 0
word32 fn000DB3DF(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000DB3DF_entry:
	// succ:  l000DB3DF
l000DB3DF:
	v6 = Mem0[0x00140030<p32>:word32]
	loc7 = v6
	v7 = Mem0[0x00140030<p32>:word32]
	v8 = 0x10<32>
	v9 = v7 + v8
	Mem0[0x00140030<p32>:word32] = v9
	v10 = Mem0[0x00140030<p32>:word32]
	v11 = Mem0[0x00140034<p32>:word32]
fn000DB3DF_exit:


// fn000DB419
// Return size: 0
word32 fn000DB419(word32 arg0)
fn000DB419_entry:
	// succ:  l000DB419
l000DB419:
	v8 = Mem0[0x00140030<p32>:word32]
	loc6 = v8
	v9 = _pthread_self()
	loc1 = v9
	v10 = loc1
	v11 = 0xB8<32>
	v12 = v10 + v11
	loc2 = v12
	v13 = loc2
fn000DB419_exit:


// fn000DB44C
// Return size: 0
word32 fn000DB44C(word32 arg0, word32 arg1, word32 arg2)
fn000DB44C_entry:
	// succ:  l000DB44C
l000DB44C:
	v13 = Mem0[0x00140030<p32>:word32]
	loc13 = v13
	v14 = arg2
	v15 = 0<32>
fn000DB44C_exit:


// fn000DB4B6
// Return size: 0
word32 fn000DB4B6(word32 arg0, word32 arg1, word32 arg2)
fn000DB4B6_entry:
	// succ:  l000DB4B6
l000DB4B6:
	v54 = Mem0[0x00140030<p32>:word32]
	loc54 = v54
	v55 = Mem0[0x00140030<p32>:word32]
	v56 = 0x10<32>
	v57 = v55 + v56
	Mem0[0x00140030<p32>:word32] = v57
	v58 = Mem0[0x00140030<p32>:word32]
	v59 = Mem0[0x00140034<p32>:word32]
fn000DB4B6_exit:


// _fflush
// Return size: 0
word32 _fflush(word32 arg0)
_fflush_entry:
	// succ:  l000DB6D6
l000DB6D6:
	v40 = Mem0[0x00140030<p32>:word32]
	loc38 = v40
	v41 = arg0
	v42 = 0<32>
_fflush_exit:


// fn000DB84B
// Return size: 0
word32 fn000DB84B(word32 arg0)
fn000DB84B_entry:
	// succ:  l000DB84B
l000DB84B:
	v25 = Mem0[0x00140030<p32>:word32]
	loc23 = v25
	v26 = arg0
	v27 = 0x14<32>
	v28 = v26 + v27
	loc2 = v28
	v29 = loc2
fn000DB84B_exit:


// fn000DB950
// Return size: 0
word32 fn000DB950(word32 arg0, word32 arg1, word32 arg2)
fn000DB950_entry:
	// succ:  l000DB950
l000DB950:
	v6 = Mem0[0x00140030<p32>:word32]
	loc6 = v6
	v7 = Mem0[0x00140030<p32>:word32]
	v8 = 0x10<32>
	v9 = v7 + v8
	Mem0[0x00140030<p32>:word32] = v9
	v10 = Mem0[0x00140030<p32>:word32]
	v11 = Mem0[0x00140034<p32>:word32]
fn000DB950_exit:


// fn000DB988
// Return size: 0
word32 fn000DB988(word32 arg0, word32 arg1, word32 arg2)
fn000DB988_entry:
	// succ:  l000DB988
l000DB988:
	v10 = Mem0[0x00140030<p32>:word32]
	loc10 = v10
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = 0x70<32>
	v13 = v11 + v12
	Mem0[0x00140030<p32>:word32] = v13
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = Mem0[0x00140034<p32>:word32]
fn000DB988_exit:


// fn000DBA85
// Return size: 0
word32 fn000DBA85(word32 arg0, word32 arg1, word32 arg2)
fn000DBA85_entry:
	// succ:  l000DBA85
l000DBA85:
	v5 = Mem0[0x00140030<p32>:word32]
	loc5 = v5
	v6 = arg0
	v7 = arg1
	v8 = arg2
	v9 = fn000DD5D8(v6, v7, v8)
	loc3 = v9
	v10 = loc3
fn000DBA85_exit:


// fn000DBA9B
// Return size: 0
word32 fn000DBA9B(word32 arg0, word32 arg1, word32 arg2)
fn000DBA9B_entry:
	// succ:  l000DBA9B
l000DBA9B:
	v442 = Mem0[0x00140030<p32>:word32]
	loc438 = v442
	v443 = Mem0[0x00140030<p32>:word32]
	v444 = 0x130<32>
	v445 = v443 + v444
	Mem0[0x00140030<p32>:word32] = v445
	v446 = Mem0[0x00140030<p32>:word32]
	v447 = Mem0[0x00140034<p32>:word32]
fn000DBA9B_exit:


// fn000DD5A3
// Return size: 0
word32 fn000DD5A3(word32 arg0)
fn000DD5A3_entry:
	// succ:  l000DD5A3
l000DD5A3:
	v9 = Mem0[0x00140030<p32>:word32]
	loc7 = v9
	v10 = arg0
	v11 = 0<32>
fn000DD5A3_exit:


// fn000DD5D8
// Return size: 0
word32 fn000DD5D8(word32 arg0, word32 arg1, word32 arg2)
fn000DD5D8_entry:
	// succ:  l000DD5D8
l000DD5D8:
	v19 = Mem0[0x00140030<p32>:word32]
	loc19 = v19
	v20 = arg0
	v21 = 0x54<32>
	v22 = v20 + v21
	loc11 = v22
	v23 = loc11
fn000DD5D8_exit:


// fn000DD675
// Return size: 0
word32 fn000DD675(word32 arg0, word32 arg1, word32 arg2)
fn000DD675_entry:
	// succ:  l000DD675
l000DD675:
	v7 = Mem0[0x00140030<p32>:word32]
	loc7 = v7
	v8 = arg2
	v9 = 0<32>
fn000DD675_exit:


// fn000DD6A2
// Return size: 0
word32 fn000DD6A2(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn000DD6A2_entry:
	// succ:  l000DD6A2
l000DD6A2:
	v66 = Mem0[0x00140030<p32>:word32]
	loc68 = v66
	v67 = Mem0[0x00140030<p32>:word32]
	v68 = 0x410<32>
	v69 = v67 + v68
	Mem0[0x00140030<p32>:word32] = v69
	v70 = Mem0[0x00140030<p32>:word32]
	v71 = Mem0[0x00140034<p32>:word32]
fn000DD6A2_exit:


// fn000DD983
// Return size: 0
word32 fn000DD983(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000DD983_entry:
	// succ:  l000DD983
l000DD983:
	v195 = Mem0[0x00140030<p32>:word32]
	loc196 = v195
	v196 = arg1
fn000DD983_exit:


// fn000DE31D
// Return size: 0
word32 fn000DE31D(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn000DE31D_entry:
	// succ:  l000DE31D
l000DE31D:
	v67 = Mem0[0x00140030<p32>:word32]
	loc69 = v67
	v68 = Mem0[0x00140030<p32>:word32]
	v69 = 0x110<32>
	v70 = v68 + v69
	Mem0[0x00140030<p32>:word32] = v70
	v71 = Mem0[0x00140030<p32>:word32]
	v72 = Mem0[0x00140034<p32>:word32]
fn000DE31D_exit:


// fn000DE5D1
// Return size: 0
word32 fn000DE5D1(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000DE5D1_entry:
	// succ:  l000DE5D1
l000DE5D1:
	v72 = Mem0[0x00140030<p32>:word32]
	loc73 = v72
	v73 = Mem0[0x00140030<p32>:word32]
	v74 = 0x10<32>
	v75 = v73 + v74
	Mem0[0x00140030<p32>:word32] = v75
	v76 = Mem0[0x00140030<p32>:word32]
	v77 = Mem0[0x00140034<p32>:word32]
fn000DE5D1_exit:


// fn000DE8FC
// Return size: 0
word32 fn000DE8FC(word32 arg0, word32 arg1)
fn000DE8FC_entry:
	// succ:  l000DE8FC
l000DE8FC:
	v29 = Mem0[0x00140030<p32>:word32]
	loc28 = v29
	v30 = Mem0[0x00140030<p32>:word32]
	v31 = 0x10<32>
	v32 = v30 + v31
	Mem0[0x00140030<p32>:word32] = v32
	v33 = Mem0[0x00140030<p32>:word32]
	v34 = Mem0[0x00140034<p32>:word32]
fn000DE8FC_exit:


// fn000DEA30
// Return size: 0
word32 fn000DEA30(word32 arg0, word32 arg1, word32 arg2)
fn000DEA30_entry:
	// succ:  l000DEA30
l000DEA30:
	v20 = Mem0[0x00140030<p32>:word32]
	loc20 = v20
	v21 = Mem0[0x00140030<p32>:word32]
	v22 = 0x10<32>
	v23 = v21 + v22
	Mem0[0x00140030<p32>:word32] = v23
	v24 = Mem0[0x00140030<p32>:word32]
	v25 = Mem0[0x00140034<p32>:word32]
fn000DEA30_exit:


// fn000DEB18
// Return size: 0
word32 fn000DEB18(word32 arg0, word32 arg1)
fn000DEB18_entry:
	// succ:  l000DEB18
l000DEB18:
	v28 = Mem0[0x00140030<p32>:word32]
	loc27 = v28
	v29 = arg0
	v30 = 0xFFFFFFFF<32>
fn000DEB18_exit:


// fn000DEC35
// Return size: 0
word32 fn000DEC35(word32 arg0, word32 arg1)
fn000DEC35_entry:
	// succ:  l000DEC35
l000DEC35:
	v37 = Mem0[0x00140030<p32>:word32]
	loc36 = v37
	v38 = arg1
	v39 = 0x4C<32>
	v40 = v38 + v39
	loc13 = v40
	v41 = loc13
fn000DEC35_exit:


// fn000DEDA6
// Return size: 0
word32 fn000DEDA6(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000DEDA6_entry:
	// succ:  l000DEDA6
l000DEDA6:
	v16 = Mem0[0x00140030<p32>:word32]
	loc17 = v16
	v17 = arg2
	v18 = arg1
	v19 = v17 * v18
	loc9 = v19
	v20 = arg3
	v21 = 0x4C<32>
	v22 = v20 + v21
	loc10 = v22
	v23 = loc10
fn000DEDA6_exit:


// fn000DEE2E
// Return size: 0
word32 fn000DEE2E(word32 arg0)
fn000DEE2E_entry:
	// succ:  l000DEE2E
l000DEE2E:
	v29 = Mem0[0x00140030<p32>:word32]
	loc27 = v29
	v30 = arg0
	v31 = 0x4C<32>
	v32 = v30 + v31
	loc2 = v32
	v33 = loc2
fn000DEE2E_exit:


// fn000DEF2C
// Return size: 0
real64 fn000DEF2C(word32 arg0, word32 arg1, word32 arg2)
fn000DEF2C_entry:
	// succ:  l000DEF2C
l000DEF2C:
	v20 = Mem0[0x00140030<p32>:word32]
	loc19 = v20
	v21 = Mem0[0x00140030<p32>:word32]
	v22 = 0x70<32>
	v23 = v21 + v22
	Mem0[0x00140030<p32>:word32] = v23
	v24 = Mem0[0x00140030<p32>:word32]
	v25 = Mem0[0x00140034<p32>:word32]
fn000DEF2C_exit:


// fn000DF086
// Return size: 0
real64 fn000DF086(word32 arg0, word32 arg1, word32 arg2)
fn000DF086_entry:
	// succ:  l000DF086
l000DF086:
	v5 = Mem0[0x00140030<p32>:word32]
	loc4 = v5
	v6 = arg0
	v7 = arg1
	v8 = 2<32>
	v9 = fn000DEF2C(v6, v7, v8)
	loc5 = v9
	v10 = loc5
fn000DF086_exit:


// fn000DF09C
// Return size: 0
word32 fn000DF09C(word32 arg0, word32 arg1, word32 arg2)
fn000DF09C_entry:
	// succ:  l000DF09C
l000DF09C:
	v10 = Mem0[0x00140030<p32>:word32]
	loc10 = v10
	v11 = arg2
	v12 = 0<32>
fn000DF09C_exit:


// fn000DF0F0
// Return size: 0
word32 fn000DF0F0(word32 arg0, word32 arg1, word32 arg2)
fn000DF0F0_entry:
	// succ:  l000DF0F0
l000DF0F0:
	v24 = Mem0[0x00140030<p32>:word32]
	loc24 = v24
	v25 = arg0
	loc16 = v25
	v26 = arg1
	loc17 = v26
	v27 = loc16
	v28 = loc17
	v29 = v27 - v28
	loc18 = v29
	v30 = loc18
	v31 = 2<32>
fn000DF0F0_exit:


// _malloc
// Return size: 0
word32 _malloc(word32 arg0)
_malloc_entry:
	// succ:  l000DF1CB
l000DF1CB:
	v1156 = Mem0[0x00140030<p32>:word32]
	loc1154 = v1156
	v1157 = Mem0[0x00140030<p32>:word32]
	v1158 = 0x10<32>
	v1159 = v1157 + v1158
	Mem0[0x00140030<p32>:word32] = v1159
	v1160 = Mem0[0x00140030<p32>:word32]
	v1161 = Mem0[0x00140034<p32>:word32]
_malloc_exit:


