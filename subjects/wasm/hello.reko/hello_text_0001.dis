// fn000E3D5D
// Return size: 0
word32 fn000E3D5D(word32 arg0, word32 arg1)
fn000E3D5D_entry:
	// succ:  l000E3D5D
l000E3D5D:
	v18 = Mem0[0x00140030<p32>:word32]
	loc17 = v18
	v18 = arg0
	v19 = 0<32>
	v20 = v18 == v19
	loc8 = v20
	v18 = loc8
	branch !v18 l000E3D73
	// succ:  l000E3D6E l000E3D73
l000E3D6E:
	v18 = 0<32>
	loc3 = v18
	goto l000E3DB6
	// succ:  l000E3DB6
l000E3D73:
	v18 = arg1
	v19 = arg0
	v18 = v18 * v19
	loc9 = v18
	v18 = arg1
	v19 = arg0
	v18 = v18 | v19
	loc10 = v18
	v18 = loc10
	v19 = 0xFFFF<32>
	v20 = v18 >u v19
	loc11 = v20
	v18 = loc11
	branch !v18 l000E3DB1
	// succ:  l000E3D8E l000E3DB1
l000E3D8E:
	v18 = loc9
	v19 = arg0
	v18 = i32u-div(v18, v19)
	v19 = 0xFFFFFFFF<32>
	v18 = v18 & v19
	loc12 = v18
	v18 = loc12
	v19 = arg1
	v20 = v18 == v19
	loc13 = v20
	v18 = loc13
	branch !v18 l000E3DA7
	// succ:  l000E3DA4 l000E3DA7
l000E3DA4:
	v18 = loc9
	goto l000E3DA9
	// succ:  l000E3DA9
l000E3DA7:
	v18 = 0xFFFFFFFF<32>
	// succ:  l000E3DA9
l000E3DA9:
	loc2 = v18
	v18 = loc2
	loc3 = v18
	goto l000E3DB5
	// succ:  l000E3DB5
l000E3DB1:
	v18 = loc9
	loc3 = v18
	// succ:  l000E3DB5
l000E3DB5:
	// succ:  l000E3DB6
l000E3DB6:
	v18 = loc3
	v18 = _malloc(v18)
	loc14 = v18
	v18 = loc14
	v19 = 0<32>
	v20 = v18 == v19
	loc15 = v20
	v18 = loc15
	branch !v18 l000E3DCD
	// succ:  l000E3DC9 l000E3DCD
l000E3DC9:
	v18 = loc14
	return v18
	// succ:  fn000E3D5D_exit
l000E3DCD:
	v18 = loc14
	v19 = 0xFFFFFFFC<32>
	v18 = v18 + v19
	loc4 = v18
	v18 = loc4
	v18 = Mem0[v18:word32]
	loc5 = v18
	v18 = loc5
	v19 = 3<32>
	v18 = v18 & v19
	loc6 = v18
	v18 = loc6
	v19 = 0<32>
	v20 = v18 == v19
	loc7 = v20
	v18 = loc7
	branch !v18 l000E3DF1
	// succ:  l000E3DED l000E3DF1
l000E3DED:
	v18 = loc14
	return v18
	// succ:  fn000E3D5D_exit
l000E3DF1:
	v18 = loc14
	v19 = 0<32>
	v21 = loc3
	v18 = _memset(v18, v19, v21)
	v18 = loc14
	return v18
	// succ:  fn000E3D5D_exit
l000E3DFE:
	return v18
	// succ:  fn000E3D5D_exit
fn000E3D5D_exit:


// fn000E3E00
// Return size: 0
word32 fn000E3E00(word32 arg0, word32 arg1)
fn000E3E00_entry:
	// succ:  l000E3E00
l000E3E00:
	v28 = Mem0[0x00140030<p32>:word32]
	loc27 = v28
	v28 = arg0
	v29 = 0<32>
	v30 = v28 == v29
	loc13 = v30
	v28 = loc13
	branch !v28 l000E3E20
	// succ:  l000E3E11 l000E3E20
l000E3E11:
	v28 = arg1
	v28 = _malloc(v28)
	loc19 = v28
	v28 = loc19
	loc2 = v28
	v28 = loc2
	return v28
	// succ:  fn000E3E00_exit
l000E3E20:
	v28 = arg1
	v29 = 0xFFFFFFBF<32>
	v30 = v28 >u v29
	loc20 = v30
	v28 = loc20
	branch !v28 l000E3E3F
	// succ:  l000E3E2C l000E3E3F
l000E3E2C:
	v28 = ___errno_location()
	loc21 = v28
	v28 = loc21
	v29 = 0xC<32>
	Mem0[v28:word32] = v29
	v28 = 0<32>
	loc2 = v28
	v28 = loc2
	return v28
	// succ:  fn000E3E00_exit
l000E3E3F:
	v28 = arg1
	v29 = 0xB<32>
	v30 = v28 <u v29
	loc22 = v30
	v28 = arg1
	v29 = 0xB<32>
	v28 = v28 + v29
	loc23 = v28
	v28 = loc23
	v29 = 0xFFFFFFF8<32>
	v28 = v28 & v29
	loc24 = v28
	v28 = loc22
	branch !v28 l000E3E5B
	// succ:  l000E3E58 l000E3E5B
l000E3E58:
	v28 = 0x10<32>
	goto l000E3E5D
	// succ:  l000E3E5D
l000E3E5B:
	v28 = loc24
	// succ:  l000E3E5D
l000E3E5D:
	loc25 = v28
	v28 = arg0
	v29 = 0xFFFFFFF8<32>
	v28 = v28 + v29
	loc3 = v28
	v28 = loc3
	v29 = loc25
	v28 = fn000E3F06(v28, v29)
	loc4 = v28
	v28 = loc4
	v29 = 0<32>
	v30 = v28 == v29
	loc5 = v30
	v28 = loc5
	v30 = v28 == 0<32>
	branch !v30 l000E3E8B
	// succ:  l000E3E7C l000E3E8B
l000E3E7C:
	v28 = loc4
	v29 = 8<32>
	v28 = v28 + v29
	loc6 = v28
	v28 = loc6
	loc2 = v28
	v28 = loc2
	return v28
	// succ:  fn000E3E00_exit
l000E3E8B:
	v28 = arg1
	v28 = _malloc(v28)
	loc7 = v28
	v28 = loc7
	v29 = 0<32>
	v30 = v28 == v29
	loc8 = v30
	v28 = loc8
	branch !v28 l000E3EA5
	// succ:  l000E3E9D l000E3EA5
l000E3E9D:
	v28 = 0<32>
	loc2 = v28
	v28 = loc2
	return v28
	// succ:  fn000E3E00_exit
l000E3EA5:
	v28 = arg0
	v29 = 0xFFFFFFFC<32>
	v28 = v28 + v29
	loc9 = v28
	v28 = loc9
	v28 = Mem0[v28:word32]
	loc10 = v28
	v28 = loc10
	v29 = 0xFFFFFFF8<32>
	v28 = v28 & v29
	loc11 = v28
	v28 = loc10
	v29 = 3<32>
	v28 = v28 & v29
	loc12 = v28
	v28 = loc12
	v29 = 0<32>
	v30 = v28 == v29
	loc14 = v30
	v28 = loc14
	branch !v28 l000E3ECF
	// succ:  l000E3ECC l000E3ECF
l000E3ECC:
	v28 = 8<32>
	goto l000E3ED1
	// succ:  l000E3ED1
l000E3ECF:
	v28 = 4<32>
	// succ:  l000E3ED1
l000E3ED1:
	loc15 = v28
	v28 = loc11
	v29 = loc15
	v28 = v28 - v29
	loc16 = v28
	v28 = loc16
	v29 = arg1
	v30 = v28 <u v29
	loc17 = v30
	v28 = loc17
	branch !v28 l000E3EE9
	// succ:  l000E3EE6 l000E3EE9
l000E3EE6:
	v28 = loc16
	goto l000E3EEB
	// succ:  l000E3EEB
l000E3EE9:
	v28 = arg1
	// succ:  l000E3EEB
l000E3EEB:
	loc18 = v28
	v28 = loc7
	v29 = arg0
	v31 = loc18
	v28 = _memcpy(v28, v29, v31)
	v28 = arg0
	_free(v28)
	v28 = loc7
	loc2 = v28
	v28 = loc2
	return v28
	// succ:  fn000E3E00_exit
l000E3F04:
	return v28
	// succ:  fn000E3E00_exit
fn000E3E00_exit:


// fn000E5815
// Return size: 0
void fn000E5815(word32 arg0)
fn000E5815_entry:
	// succ:  l000E5815
l000E5815:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn000E5823(v4)
	return
	// succ:  fn000E5815_exit
l000E5821:
	return
	// succ:  fn000E5815_exit
fn000E5815_exit:


// fn000E5823
// Return size: 0
void fn000E5823(word32 arg0)
fn000E5823_entry:
	// succ:  l000E5823
l000E5823:
	v17 = Mem0[0x00140030<p32>:word32]
	loc15 = v17
	v17 = arg0
	v18 = 0x1920<32>
	Mem0[v17:word32] = v18
	v17 = 0<32>
	Mem0[0x00140048<p32>:word32] = v17
	v17 = 0x171<32>
	v18 = arg0
	v19 = 0<32>
	invoke_vii(v17, v18, v19)
	v17 = Mem0[0x00140048<p32>:word32]
	loc1 = v17
	v17 = 0<32>
	Mem0[0x00140048<p32>:word32] = v17
	v17 = loc1
	v18 = 1<32>
	v17 = v17 & v18
	loc6 = v17
	v17 = loc6
	branch !v17 l000E5860
	// succ:  l000E5851 l000E5860
l000E5851:
	v17 = 0<32>
	v17 = ___cxa_find_matching_catch_3(v17)
	loc4 = v17
	v17 = Mem0[0x00140094<p32>:word32]
	loc5 = v17
	v17 = loc4
	fn000D0E65(v17)
	goto l000E58B9
	// succ:  l000E58B9
l000E5860:
	v17 = arg0
	v18 = 0x1C<32>
	v17 = v17 + v18
	loc7 = v17
	v17 = loc7
	fn0011B3FB(v17)
	v17 = arg0
	v18 = 0x20<32>
	v17 = v17 + v18
	loc8 = v17
	v17 = loc8
	v17 = Mem0[v17:word32]
	loc9 = v17
	v17 = loc9
	_free(v17)
	v17 = arg0
	v18 = 0x24<32>
	v17 = v17 + v18
	loc10 = v17
	v17 = loc10
	v17 = Mem0[v17:word32]
	loc11 = v17
	v17 = loc11
	_free(v17)
	v17 = arg0
	v18 = 0x30<32>
	v17 = v17 + v18
	loc12 = v17
	v17 = loc12
	v17 = Mem0[v17:word32]
	loc13 = v17
	v17 = loc13
	_free(v17)
	v17 = arg0
	v18 = 0x3C<32>
	v17 = v17 + v18
	loc2 = v17
	v17 = loc2
	v17 = Mem0[v17:word32]
	loc3 = v17
	v17 = loc3
	_free(v17)
	return
	// succ:  fn000E5823_exit
l000E58B9:
	// succ:  l000E58BA
l000E58BA:
	return
	// succ:  fn000E5823_exit
fn000E5823_exit:


// fn000E58BC
// Return size: 0
void fn000E58BC(word32 arg0, word32 arg1)
fn000E58BC_entry:
	// succ:  l000E58BC
l000E58BC:
	v17 = Mem0[0x00140030<p32>:word32]
	loc16 = v17
	v17 = arg0
	v18 = 0x28<32>
	v17 = v17 + v18
	loc7 = v17
	v17 = loc7
	v17 = Mem0[v17:word32]
	loc8 = v17
	v17 = arg0
	v18 = 0x20<32>
	v17 = v17 + v18
	loc9 = v17
	v17 = arg0
	v18 = 0x24<32>
	v17 = v17 + v18
	loc10 = v17
	v17 = loc8
	loc2 = v17
	// succ:  l000E58E4
l000E58E4:
	v17 = loc2
	v18 = 0<32>
	v19 = v17 == v18
	loc11 = v19
	v17 = loc11
	branch !v17 l000E58F4
	// succ:  l000E58F1 l000E58F4
l000E58F1:
l000E58F4:
	v17 = loc2
	v18 = 0xFFFFFFFF<32>
	v17 = v17 + v18
	loc12 = v17
	v17 = loc9
	v17 = Mem0[v17:word32]
	loc13 = v17
	v17 = loc13
	v18 = loc12
	v20 = 2<32>
	v18 = v18 << v20
	v17 = v17 + v18
	loc14 = v17
	v17 = loc14
	v17 = Mem0[v17:word32]
	loc3 = v17
	v17 = loc10
	v17 = Mem0[v17:word32]
	loc4 = v17
	v17 = loc4
	v18 = loc12
	v20 = 2<32>
	v18 = v18 << v20
	v17 = v17 + v18
	loc5 = v17
	v17 = loc5
	v17 = Mem0[v17:word32]
	loc6 = v17
	v17 = arg1
	v18 = arg0
	v20 = loc6
	v21 = loc3
	v22 = 0x1FF<32>
	v21 = v21 & v22
	v22 = 0x2820<32>
	v21 = v21 + v22
fn000E58BC_exit:


// fn000E594A
// Return size: 0
void fn000E594A(word32 arg0)
fn000E594A_entry:
	// succ:  l000E594A
l000E594A:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn000E5823(v4)
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn000E594A_exit
l000E595B:
	return
	// succ:  fn000E594A_exit
fn000E594A_exit:


// fn000E595D
// Return size: 0
void fn000E595D(word32 arg0)
fn000E595D_entry:
	// succ:  l000E595D
l000E595D:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn000E5823(v4)
	return
	// succ:  fn000E595D_exit
l000E5969:
	return
	// succ:  fn000E595D_exit
fn000E595D_exit:


// fn000E596B
// Return size: 0
void fn000E596B(word32 arg0)
fn000E596B_entry:
	// succ:  l000E596B
l000E596B:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 0x1930<32>
	Mem0[v5:word32] = v6
	v5 = arg0
	v6 = 4<32>
	v5 = v5 + v6
	loc1 = v5
	v5 = loc1
	fn0011B3FB(v5)
	return
	// succ:  fn000E596B_exit
l000E5986:
	return
	// succ:  fn000E596B_exit
fn000E596B_exit:


// fn000E5988
// Return size: 0
void fn000E5988(word32 arg0)
fn000E5988_entry:
	// succ:  l000E5988
l000E5988:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 0x1930<32>
	Mem0[v5:word32] = v6
	v5 = arg0
	v6 = 4<32>
	v5 = v5 + v6
	loc1 = v5
	v5 = loc1
	fn0011B3FB(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn000E5988_exit
l000E59A8:
	return
	// succ:  fn000E5988_exit
fn000E5988_exit:


// fn000E59AA
// Return size: 0
void fn000E59AA(word32 arg0, word32 arg1)
fn000E59AA_entry:
	// succ:  l000E59AA
l000E59AA:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	return
	// succ:  fn000E59AA_exit
l000E59B1:
	return
	// succ:  fn000E59AA_exit
fn000E59AA_exit:


// fn000E59B3
// Return size: 0
word32 fn000E59B3(word32 arg0, word32 arg1, word32 arg2)
fn000E59B3_entry:
	// succ:  l000E59B3
l000E59B3:
	v4 = Mem0[0x00140030<p32>:word32]
	loc4 = v4
	v4 = arg0
	return v4
	// succ:  fn000E59B3_exit
l000E59BC:
	return v4
	// succ:  fn000E59B3_exit
fn000E59B3_exit:


// fn000E59BE
// Return size: 0
void fn000E59BE(word32 arg0, word32 arg1, word64 arg2, word32 arg3, word32 arg4)
fn000E59BE_entry:
	// succ:  l000E59BE
l000E59BE:
	v5 = Mem0[0x00140030<p32>:word32]
	loc7 = v5
	v5 = arg0
	v6 = 0<64>
	Mem0[v5:word64] = v6
	v5 = arg0
	v7 = 8<32>
	v5 = v5 + v7
	loc5 = v5
	v5 = loc5
	v6 = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[v5:word64] = v6
	return
	// succ:  fn000E59BE_exit
l000E59DA:
	return
	// succ:  fn000E59BE_exit
fn000E59BE_exit:


// fn000E59DC
// Return size: 0
void fn000E59DC(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000E59DC_entry:
	// succ:  l000E59DC
l000E59DC:
	v5 = Mem0[0x00140030<p32>:word32]
	loc6 = v5
	v5 = arg0
	v6 = 0<64>
	Mem0[v5:word64] = v6
	v5 = arg0
	v7 = 8<32>
	v5 = v5 + v7
	loc4 = v5
	v5 = loc4
	v6 = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[v5:word64] = v6
	return
	// succ:  fn000E59DC_exit
l000E59F8:
	return
	// succ:  fn000E59DC_exit
fn000E59DC_exit:


// fn000E59FA
// Return size: 0
word32 fn000E59FA(word32 arg0)
fn000E59FA_entry:
	// succ:  l000E59FA
l000E59FA:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0<32>
	return v4
	// succ:  fn000E59FA_exit
l000E5A03:
	return v4
	// succ:  fn000E59FA_exit
fn000E59FA_exit:


// fn000E5A05
// Return size: 0
word32 fn000E5A05(word32 arg0)
fn000E5A05_entry:
	// succ:  l000E5A05
l000E5A05:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0<32>
	return v4
	// succ:  fn000E5A05_exit
l000E5A0E:
	return v4
	// succ:  fn000E5A05_exit
fn000E5A05_exit:


// fn000E5A10
// Return size: 0
word32 fn000E5A10(word32 arg0, word32 arg1, word32 arg2)
fn000E5A10_entry:
	// succ:  l000E5A10
l000E5A10:
	v23 = Mem0[0x00140030<p32>:word32]
	loc23 = v23
	v23 = arg0
	v24 = 0xC<32>
	v23 = v23 + v24
	loc14 = v23
	v23 = arg0
	v24 = 0x10<32>
	v23 = v23 + v24
	loc15 = v23
	v23 = 0<32>
	loc3 = v23
	v23 = arg1
	loc4 = v23
	// succ:  l000E5A2E
l000E5A2E:
	v23 = loc3
	v24 = arg2
	v25 = v23 < v24
	loc16 = v25
	v23 = loc16
	v25 = v23 == 0<32>
	branch !v25 l000E5A3F
	// succ:  l000E5A3C l000E5A3F
l000E5A3C:
l000E5A3F:
	v23 = loc14
	v23 = Mem0[v23:word32]
	loc17 = v23
	v23 = loc15
	v23 = Mem0[v23:word32]
	loc18 = v23
	v23 = loc17
	v24 = loc18
	v25 = v23 <u v24
	loc19 = v25
	v23 = loc19
	branch !v23 l000E5A72
	// succ:  l000E5A58 l000E5A72
l000E5A58:
	v23 = loc17
	v24 = 1<32>
	v23 = v23 + v24
	loc20 = v23
	v23 = loc14
	v24 = loc20
	Mem0[v23:word32] = v24
	v23 = loc17
	v26 = Mem0[v23:int8]
	v23 = CONVERT(v26, int8, word32)
	loc5 = v23
	v23 = loc5
	loc21 = v23
l000E5A72:
	v23 = arg0
	v23 = Mem0[v23:word32]
	loc6 = v23
	v23 = loc6
	v24 = 0x28<32>
	v23 = v23 + v24
	loc7 = v23
	v23 = loc7
	v23 = Mem0[v23:word32]
	loc8 = v23
	v23 = arg0
	v24 = loc8
	v27 = 0x1FF<32>
	v24 = v24 & v27
	v27 = 0xB00<32>
	v24 = v24 + v27
fn000E5A10_exit:


// fn000E5AD9
// Return size: 0
word32 fn000E5AD9(word32 arg0)
fn000E5AD9_entry:
	// succ:  l000E5AD9
l000E5AD9:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0xFFFFFFFF<32>
	return v4
	// succ:  fn000E5AD9_exit
l000E5AE2:
	return v4
	// succ:  fn000E5AD9_exit
fn000E5AD9_exit:


// fn000E5AE4
// Return size: 0
word32 fn000E5AE4(word32 arg0)
fn000E5AE4_entry:
	// succ:  l000E5AE4
l000E5AE4:
	v15 = Mem0[0x00140030<p32>:word32]
	loc13 = v15
	v15 = arg0
	v15 = Mem0[v15:word32]
	loc2 = v15
	v15 = loc2
	v16 = 0x24<32>
	v15 = v15 + v16
	loc4 = v15
	v15 = loc4
	v15 = Mem0[v15:word32]
	loc5 = v15
	v15 = arg0
	v16 = loc5
	v17 = 0x1FF<32>
	v16 = v16 & v17
	v17 = 0xB00<32>
	v16 = v16 + v17
fn000E5AE4_exit:


// fn000E5B55
// Return size: 0
word32 fn000E5B55(word32 arg0, word32 arg1)
fn000E5B55_entry:
	// succ:  l000E5B55
l000E5B55:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v4 = 0xFFFFFFFF<32>
	return v4
	// succ:  fn000E5B55_exit
l000E5B5E:
	return v4
	// succ:  fn000E5B55_exit
fn000E5B55_exit:


// fn000E5B60
// Return size: 0
word32 fn000E5B60(word32 arg0, word32 arg1, word32 arg2)
fn000E5B60_entry:
	// succ:  l000E5B60
l000E5B60:
	v33 = Mem0[0x00140030<p32>:word32]
	loc33 = v33
	v33 = arg0
	v34 = 0x18<32>
	v33 = v33 + v34
	loc25 = v33
	v33 = arg0
	v34 = 0x1C<32>
	v33 = v33 + v34
	loc26 = v33
	v33 = arg1
	loc3 = v33
	v33 = 0<32>
	loc4 = v33
	// succ:  l000E5B7E
l000E5B7E:
	v33 = loc4
	v34 = arg2
	v35 = v33 < v34
	loc27 = v35
	v33 = loc27
	v35 = v33 == 0<32>
	branch !v35 l000E5B8F
	// succ:  l000E5B8C l000E5B8F
l000E5B8C:
l000E5B8F:
	v33 = loc25
	v33 = Mem0[v33:word32]
	loc28 = v33
	v33 = loc26
	v33 = Mem0[v33:word32]
	loc29 = v33
	v33 = loc28
	v34 = loc29
	v35 = v33 <u v34
	loc30 = v35
	v33 = loc30
	v35 = v33 == 0<32>
	v35 = v35
	// succ:  l000E5BA9 l000E5BA9
l000E5BA9:
	v33 = arg0
	v33 = Mem0[v33:word32]
	loc31 = v33
	v33 = loc31
	v34 = 0x34<32>
	v33 = v33 + v34
	loc7 = v33
	v33 = loc7
	v33 = Mem0[v33:word32]
	loc8 = v33
	v33 = loc3
	v36 = Mem0[v33:int8]
	v33 = CONVERT(v36, int8, word32)
	loc9 = v33
	v33 = loc9
	v34 = 0xFF<32>
	v33 = v33 & v34
	loc10 = v33
	v33 = arg0
	v34 = loc10
	v37 = loc8
	v38 = 0x1FF<32>
	v37 = v37 & v38
	v38 = 0x1B20<32>
	v37 = v37 + v38
fn000E5B60_exit:


// fn000E5C83
// Return size: 0
word32 fn000E5C83(word32 arg0, word32 arg1)
fn000E5C83_entry:
	// succ:  l000E5C83
l000E5C83:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v4 = 0xFFFFFFFF<32>
	return v4
	// succ:  fn000E5C83_exit
l000E5C8C:
	return v4
	// succ:  fn000E5C83_exit
fn000E5C83_exit:


// fn000E5C8E
// Return size: 0
void fn000E5C8E(word32 arg0)
fn000E5C8E_entry:
	// succ:  l000E5C8E
l000E5C8E:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 0x1970<32>
	Mem0[v5:word32] = v6
	v5 = arg0
	v6 = 4<32>
	v5 = v5 + v6
	loc1 = v5
	v5 = loc1
	fn0011B3FB(v5)
	return
	// succ:  fn000E5C8E_exit
l000E5CA9:
	return
	// succ:  fn000E5C8E_exit
fn000E5C8E_exit:


// fn000E5CAB
// Return size: 0
void fn000E5CAB(word32 arg0)
fn000E5CAB_entry:
	// succ:  l000E5CAB
l000E5CAB:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 0x1970<32>
	Mem0[v5:word32] = v6
	v5 = arg0
	v6 = 4<32>
	v5 = v5 + v6
	loc1 = v5
	v5 = loc1
	fn0011B3FB(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn000E5CAB_exit
l000E5CCB:
	return
	// succ:  fn000E5CAB_exit
fn000E5CAB_exit:


// fn000E5CCD
// Return size: 0
void fn000E5CCD(word32 arg0, word32 arg1)
fn000E5CCD_entry:
	// succ:  l000E5CCD
l000E5CCD:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	return
	// succ:  fn000E5CCD_exit
l000E5CD4:
	return
	// succ:  fn000E5CCD_exit
fn000E5CCD_exit:


// fn000E5CD6
// Return size: 0
word32 fn000E5CD6(word32 arg0, word32 arg1, word32 arg2)
fn000E5CD6_entry:
	// succ:  l000E5CD6
l000E5CD6:
	v4 = Mem0[0x00140030<p32>:word32]
	loc4 = v4
	v4 = arg0
	return v4
	// succ:  fn000E5CD6_exit
l000E5CDF:
	return v4
	// succ:  fn000E5CD6_exit
fn000E5CD6_exit:


// fn000E5CE1
// Return size: 0
void fn000E5CE1(word32 arg0, word32 arg1, word64 arg2, word32 arg3, word32 arg4)
fn000E5CE1_entry:
	// succ:  l000E5CE1
l000E5CE1:
	v5 = Mem0[0x00140030<p32>:word32]
	loc7 = v5
	v5 = arg0
	v6 = 0<64>
	Mem0[v5:word64] = v6
	v5 = arg0
	v7 = 8<32>
	v5 = v5 + v7
	loc5 = v5
	v5 = loc5
	v6 = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[v5:word64] = v6
	return
	// succ:  fn000E5CE1_exit
l000E5CFD:
	return
	// succ:  fn000E5CE1_exit
fn000E5CE1_exit:


// fn000E5CFF
// Return size: 0
void fn000E5CFF(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000E5CFF_entry:
	// succ:  l000E5CFF
l000E5CFF:
	v5 = Mem0[0x00140030<p32>:word32]
	loc6 = v5
	v5 = arg0
	v6 = 0<64>
	Mem0[v5:word64] = v6
	v5 = arg0
	v7 = 8<32>
	v5 = v5 + v7
	loc4 = v5
	v5 = loc4
	v6 = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[v5:word64] = v6
	return
	// succ:  fn000E5CFF_exit
l000E5D1B:
	return
	// succ:  fn000E5CFF_exit
fn000E5CFF_exit:


// fn000E5D1D
// Return size: 0
word32 fn000E5D1D(word32 arg0)
fn000E5D1D_entry:
	// succ:  l000E5D1D
l000E5D1D:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0<32>
	return v4
	// succ:  fn000E5D1D_exit
l000E5D26:
	return v4
	// succ:  fn000E5D1D_exit
fn000E5D1D_exit:


// fn000E5D28
// Return size: 0
word32 fn000E5D28(word32 arg0)
fn000E5D28_entry:
	// succ:  l000E5D28
l000E5D28:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0<32>
	return v4
	// succ:  fn000E5D28_exit
l000E5D31:
	return v4
	// succ:  fn000E5D28_exit
fn000E5D28_exit:


// fn000E5D33
// Return size: 0
word32 fn000E5D33(word32 arg0, word32 arg1, word32 arg2)
fn000E5D33_entry:
	// succ:  l000E5D33
l000E5D33:
	v22 = Mem0[0x00140030<p32>:word32]
	loc22 = v22
	v22 = arg0
	v23 = 0xC<32>
	v22 = v22 + v23
	loc13 = v22
	v22 = arg0
	v23 = 0x10<32>
	v22 = v22 + v23
	loc14 = v22
	v22 = 0<32>
	loc3 = v22
	v22 = arg1
	loc4 = v22
	// succ:  l000E5D51
l000E5D51:
	v22 = loc3
	v23 = arg2
	v24 = v22 < v23
	loc15 = v24
	v22 = loc15
	v24 = v22 == 0<32>
	branch !v24 l000E5D62
	// succ:  l000E5D5F l000E5D62
l000E5D5F:
l000E5D62:
	v22 = loc13
	v22 = Mem0[v22:word32]
	loc16 = v22
	v22 = loc14
	v22 = Mem0[v22:word32]
	loc17 = v22
	v22 = loc16
	v23 = loc17
	v24 = v22 <u v23
	loc18 = v24
	v22 = loc18
	branch !v22 l000E5D95
	// succ:  l000E5D7B l000E5D95
l000E5D7B:
	v22 = loc16
	v23 = 4<32>
	v22 = v22 + v23
	loc19 = v22
	v22 = loc13
	v23 = loc19
	Mem0[v22:word32] = v23
	v22 = loc16
	v22 = Mem0[v22:word32]
	loc5 = v22
	v22 = loc5
	loc20 = v22
l000E5D95:
	v22 = arg0
	v22 = Mem0[v22:word32]
	loc6 = v22
	v22 = loc6
	v23 = 0x28<32>
	v22 = v22 + v23
	loc7 = v22
	v22 = loc7
	v22 = Mem0[v22:word32]
	loc8 = v22
	v22 = arg0
	v23 = loc8
	v25 = 0x1FF<32>
	v23 = v23 & v25
	v25 = 0xB00<32>
	v23 = v23 + v25
fn000E5D33_exit:


// fn000E5DF5
// Return size: 0
word32 fn000E5DF5(word32 arg0)
fn000E5DF5_entry:
	// succ:  l000E5DF5
l000E5DF5:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0xFFFFFFFF<32>
	return v4
	// succ:  fn000E5DF5_exit
l000E5DFE:
	return v4
	// succ:  fn000E5DF5_exit
fn000E5DF5_exit:


// fn000E5E00
// Return size: 0
word32 fn000E5E00(word32 arg0)
fn000E5E00_entry:
	// succ:  l000E5E00
l000E5E00:
	v14 = Mem0[0x00140030<p32>:word32]
	loc12 = v14
	v14 = arg0
	v14 = Mem0[v14:word32]
	loc2 = v14
	v14 = loc2
	v15 = 0x24<32>
	v14 = v14 + v15
	loc3 = v14
	v14 = loc3
	v14 = Mem0[v14:word32]
	loc4 = v14
	v14 = arg0
	v15 = loc4
	v16 = 0x1FF<32>
	v15 = v15 & v16
	v16 = 0xB00<32>
	v15 = v15 + v16
fn000E5E00_exit:


// fn000E5E69
// Return size: 0
word32 fn000E5E69(word32 arg0, word32 arg1)
fn000E5E69_entry:
	// succ:  l000E5E69
l000E5E69:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v4 = 0xFFFFFFFF<32>
	return v4
	// succ:  fn000E5E69_exit
l000E5E72:
	return v4
	// succ:  fn000E5E69_exit
fn000E5E69_exit:


// fn000E5E74
// Return size: 0
word32 fn000E5E74(word32 arg0, word32 arg1, word32 arg2)
fn000E5E74_entry:
	// succ:  l000E5E74
l000E5E74:
	v31 = Mem0[0x00140030<p32>:word32]
	loc31 = v31
	v31 = arg0
	v32 = 0x18<32>
	v31 = v31 + v32
	loc23 = v31
	v31 = arg0
	v32 = 0x1C<32>
	v31 = v31 + v32
	loc24 = v31
	v31 = arg1
	loc3 = v31
	v31 = 0<32>
	loc4 = v31
	// succ:  l000E5E92
l000E5E92:
	v31 = loc4
	v32 = arg2
	v33 = v31 < v32
	loc25 = v33
	v31 = loc25
	v33 = v31 == 0<32>
	branch !v33 l000E5EA3
	// succ:  l000E5EA0 l000E5EA3
l000E5EA0:
l000E5EA3:
	v31 = loc23
	v31 = Mem0[v31:word32]
	loc26 = v31
	v31 = loc24
	v31 = Mem0[v31:word32]
	loc27 = v31
	v31 = loc26
	v32 = loc27
	v33 = v31 <u v32
	loc28 = v33
	v31 = loc28
	branch !v31 l000E5F2A
	// succ:  l000E5EBC l000E5F2A
l000E5EBC:
	v31 = loc26
	loc13 = v31
	v31 = loc27
	loc14 = v31
	v31 = loc14
	v32 = loc13
	v31 = v31 - v32
	loc15 = v31
	v31 = loc15
	v32 = 2<32>
	v31 = v31 >> v32
	loc16 = v31
	v31 = arg2
	v32 = loc4
	v31 = v31 - v32
	loc17 = v31
	v31 = loc17
	v32 = loc16
	v33 = v31 < v32
	loc18 = v33
	v31 = loc18
	branch !v31 l000E5EE7
	// succ:  l000E5EE4 l000E5EE7
l000E5EE4:
	v31 = loc17
	goto l000E5EE9
	// succ:  l000E5EE9
l000E5EE7:
	v31 = loc16
	// succ:  l000E5EE9
l000E5EE9:
	loc5 = v31
	v31 = loc26
	v32 = loc3
	v34 = loc5
	v31 = fn000E5F91(v31, v32, v34)
	v31 = loc23
	v31 = Mem0[v31:word32]
	loc19 = v31
	v31 = loc19
	v32 = loc5
	v34 = 2<32>
	v32 = v32 << v34
	v31 = v31 + v32
	loc20 = v31
	v31 = loc23
	v32 = loc20
	Mem0[v31:word32] = v32
	v31 = loc3
	v32 = loc5
	v34 = 2<32>
	v32 = v32 << v34
	v31 = v31 + v32
	loc21 = v31
	v31 = loc5
	v32 = loc4
	v31 = v31 + v32
	loc22 = v31
	v31 = loc21
	loc3 = v31
	v31 = loc22
	loc4 = v31
	goto l000E5E74
	// succ:  l000E5E74
l000E5F2A:
	v31 = arg0
	v31 = Mem0[v31:word32]
	loc29 = v31
	v31 = loc29
	v32 = 0x34<32>
	v31 = v31 + v32
	loc6 = v31
	v31 = loc6
	v31 = Mem0[v31:word32]
	loc7 = v31
	v31 = loc3
	v31 = Mem0[v31:word32]
	loc8 = v31
	v31 = arg0
	v32 = loc8
	v34 = loc7
	v35 = 0x1FF<32>
	v34 = v34 & v35
	v35 = 0x1B20<32>
	v34 = v34 + v35
fn000E5E74_exit:


// fn000E5F86
// Return size: 0
word32 fn000E5F86(word32 arg0, word32 arg1)
fn000E5F86_entry:
	// succ:  l000E5F86
l000E5F86:
	v4 = Mem0[0x00140030<p32>:word32]
	loc3 = v4
	v4 = 0xFFFFFFFF<32>
	return v4
	// succ:  fn000E5F86_exit
l000E5F8F:
	return v4
	// succ:  fn000E5F86_exit
fn000E5F86_exit:


// fn000E5F91
// Return size: 0
word32 fn000E5F91(word32 arg0, word32 arg1, word32 arg2)
fn000E5F91_entry:
	// succ:  l000E5F91
l000E5F91:
	v7 = Mem0[0x00140030<p32>:word32]
	loc7 = v7
	v7 = arg2
	v8 = 0<32>
	v9 = v7 == v8
	loc3 = v9
	v7 = loc3
	branch !v7 l000E5FA7
	// succ:  l000E5FA2 l000E5FA7
l000E5FA2:
	v7 = arg0
	loc5 = v7
	goto l000E5FB6
	// succ:  l000E5FB6
l000E5FA7:
	v7 = arg0
	v8 = arg1
	v10 = arg2
	v7 = fn000DB44C(v7, v8, v10)
	loc4 = v7
	v7 = loc4
	loc5 = v7
	// succ:  l000E5FB6
l000E5FB6:
	v7 = loc5
	return v7
	// succ:  fn000E5F91_exit
l000E5FBA:
	return v7
	// succ:  fn000E5F91_exit
fn000E5F91_exit:


// fn000E5FBC
// Return size: 0
void fn000E5FBC(word32 arg0)
fn000E5FBC_entry:
	// succ:  l000E5FBC
l000E5FBC:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 8<32>
	v5 = v5 + v6
	loc1 = v5
	v5 = loc1
	fn000E5823(v5)
	return
	// succ:  fn000E5FBC_exit
l000E5FCF:
	return
	// succ:  fn000E5FBC_exit
fn000E5FBC_exit:


// fn000E5FD1
// Return size: 0
void fn000E5FD1(word32 arg0)
fn000E5FD1_entry:
	// succ:  l000E5FD1
l000E5FD1:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 8<32>
	v5 = v5 + v6
	loc1 = v5
	v5 = loc1
	fn000E5823(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn000E5FD1_exit
l000E5FE9:
	return
	// succ:  fn000E5FD1_exit
fn000E5FD1_exit:


// fn000E5FEB
// Return size: 0
void fn000E5FEB(word32 arg0)
fn000E5FEB_entry:
	// succ:  l000E5FEB
l000E5FEB:
	v9 = Mem0[0x00140030<p32>:word32]
	loc7 = v9
	v9 = arg0
	v9 = Mem0[v9:word32]
	loc1 = v9
	v9 = loc1
	v10 = 0xFFFFFFF4<32>
	v9 = v9 + v10
	loc2 = v9
	v9 = loc2
	v9 = Mem0[v9:word32]
	loc3 = v9
	v9 = arg0
	v10 = loc3
	v9 = v9 + v10
	loc4 = v9
	v9 = loc4
	v10 = 8<32>
	v9 = v9 + v10
	loc5 = v9
	v9 = loc5
	fn000E5823(v9)
	return
	// succ:  fn000E5FEB_exit
l000E601A:
	return
	// succ:  fn000E5FEB_exit
fn000E5FEB_exit:


// fn000E601C
// Return size: 0
void fn000E601C(word32 arg0)
fn000E601C_entry:
	// succ:  l000E601C
l000E601C:
	v8 = Mem0[0x00140030<p32>:word32]
	loc6 = v8
	v8 = arg0
	v8 = Mem0[v8:word32]
	loc1 = v8
	v8 = loc1
	v9 = 0xFFFFFFF4<32>
	v8 = v8 + v9
	loc2 = v8
	v8 = loc2
	v8 = Mem0[v8:word32]
	loc3 = v8
	v8 = arg0
	v9 = loc3
	v8 = v8 + v9
	loc4 = v8
	v8 = loc4
	fn000E5FD1(v8)
	return
	// succ:  fn000E601C_exit
l000E6044:
	return
	// succ:  fn000E601C_exit
fn000E601C_exit:


// fn000E6046
// Return size: 0
void fn000E6046(word32 arg0)
fn000E6046_entry:
	// succ:  l000E6046
l000E6046:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 8<32>
	v5 = v5 + v6
	loc1 = v5
	v5 = loc1
	fn000E5823(v5)
	return
	// succ:  fn000E6046_exit
l000E6059:
	return
	// succ:  fn000E6046_exit
fn000E6046_exit:


// fn000E605B
// Return size: 0
void fn000E605B(word32 arg0)
fn000E605B_entry:
	// succ:  l000E605B
l000E605B:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 8<32>
	v5 = v5 + v6
	loc1 = v5
	v5 = loc1
	fn000E5823(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn000E605B_exit
l000E6073:
	return
	// succ:  fn000E605B_exit
fn000E605B_exit:


// fn000E6075
// Return size: 0
void fn000E6075(word32 arg0)
fn000E6075_entry:
	// succ:  l000E6075
l000E6075:
	v9 = Mem0[0x00140030<p32>:word32]
	loc7 = v9
	v9 = arg0
	v9 = Mem0[v9:word32]
	loc1 = v9
	v9 = loc1
	v10 = 0xFFFFFFF4<32>
	v9 = v9 + v10
	loc2 = v9
	v9 = loc2
	v9 = Mem0[v9:word32]
	loc3 = v9
	v9 = arg0
	v10 = loc3
	v9 = v9 + v10
	loc4 = v9
	v9 = loc4
	v10 = 8<32>
	v9 = v9 + v10
	loc5 = v9
	v9 = loc5
	fn000E5823(v9)
	return
	// succ:  fn000E6075_exit
l000E60A4:
	return
	// succ:  fn000E6075_exit
fn000E6075_exit:


// fn000E60A6
// Return size: 0
void fn000E60A6(word32 arg0)
fn000E60A6_entry:
	// succ:  l000E60A6
l000E60A6:
	v8 = Mem0[0x00140030<p32>:word32]
	loc6 = v8
	v8 = arg0
	v8 = Mem0[v8:word32]
	loc1 = v8
	v8 = loc1
	v9 = 0xFFFFFFF4<32>
	v8 = v8 + v9
	loc2 = v8
	v8 = loc2
	v8 = Mem0[v8:word32]
	loc3 = v8
	v8 = arg0
	v9 = loc3
	v8 = v8 + v9
	loc4 = v8
	v8 = loc4
	fn000E605B(v8)
	return
	// succ:  fn000E60A6_exit
l000E60CE:
	return
	// succ:  fn000E60A6_exit
fn000E60A6_exit:


// fn000E60D0
// Return size: 0
void fn000E60D0(word32 arg0)
fn000E60D0_entry:
	// succ:  l000E60D0
l000E60D0:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 4<32>
	v5 = v5 + v6
	loc1 = v5
	v5 = loc1
	fn000E5823(v5)
	return
	// succ:  fn000E60D0_exit
l000E60E3:
	return
	// succ:  fn000E60D0_exit
fn000E60D0_exit:


// fn000E60E5
// Return size: 0
void fn000E60E5(word32 arg0)
fn000E60E5_entry:
	// succ:  l000E60E5
l000E60E5:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 4<32>
	v5 = v5 + v6
	loc1 = v5
	v5 = loc1
	fn000E5823(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn000E60E5_exit
l000E60FD:
	return
	// succ:  fn000E60E5_exit
fn000E60E5_exit:


// fn000E60FF
// Return size: 0
void fn000E60FF(word32 arg0)
fn000E60FF_entry:
	// succ:  l000E60FF
l000E60FF:
	v9 = Mem0[0x00140030<p32>:word32]
	loc7 = v9
	v9 = arg0
	v9 = Mem0[v9:word32]
	loc1 = v9
	v9 = loc1
	v10 = 0xFFFFFFF4<32>
	v9 = v9 + v10
	loc2 = v9
	v9 = loc2
	v9 = Mem0[v9:word32]
	loc3 = v9
	v9 = arg0
	v10 = loc3
	v9 = v9 + v10
	loc4 = v9
	v9 = loc4
	v10 = 4<32>
	v9 = v9 + v10
	loc5 = v9
	v9 = loc5
	fn000E5823(v9)
	return
	// succ:  fn000E60FF_exit
l000E612E:
	return
	// succ:  fn000E60FF_exit
fn000E60FF_exit:


// fn000E6130
// Return size: 0
void fn000E6130(word32 arg0)
fn000E6130_entry:
	// succ:  l000E6130
l000E6130:
	v8 = Mem0[0x00140030<p32>:word32]
	loc6 = v8
	v8 = arg0
	v8 = Mem0[v8:word32]
	loc1 = v8
	v8 = loc1
	v9 = 0xFFFFFFF4<32>
	v8 = v8 + v9
	loc2 = v8
	v8 = loc2
	v8 = Mem0[v8:word32]
	loc3 = v8
	v8 = arg0
	v9 = loc3
	v8 = v8 + v9
	loc4 = v8
	v8 = loc4
	fn000E60E5(v8)
	return
	// succ:  fn000E6130_exit
l000E6158:
	return
	// succ:  fn000E6130_exit
fn000E6130_exit:


// fn000E615A
// Return size: 0
void fn000E615A(word32 arg0)
fn000E615A_entry:
	// succ:  l000E615A
l000E615A:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 4<32>
	v5 = v5 + v6
	loc1 = v5
	v5 = loc1
	fn000E5823(v5)
	return
	// succ:  fn000E615A_exit
l000E616D:
	return
	// succ:  fn000E615A_exit
fn000E615A_exit:


// fn000E616F
// Return size: 0
void fn000E616F(word32 arg0)
fn000E616F_entry:
	// succ:  l000E616F
l000E616F:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 4<32>
	v5 = v5 + v6
	loc1 = v5
	v5 = loc1
	fn000E5823(v5)
	v5 = arg0
	fn0011B709(v5)
	return
	// succ:  fn000E616F_exit
l000E6187:
	return
	// succ:  fn000E616F_exit
fn000E616F_exit:


// fn000E6189
// Return size: 0
void fn000E6189(word32 arg0)
fn000E6189_entry:
	// succ:  l000E6189
l000E6189:
	v9 = Mem0[0x00140030<p32>:word32]
	loc7 = v9
	v9 = arg0
	v9 = Mem0[v9:word32]
	loc1 = v9
	v9 = loc1
	v10 = 0xFFFFFFF4<32>
	v9 = v9 + v10
	loc2 = v9
	v9 = loc2
	v9 = Mem0[v9:word32]
	loc3 = v9
	v9 = arg0
	v10 = loc3
	v9 = v9 + v10
	loc4 = v9
	v9 = loc4
	v10 = 4<32>
	v9 = v9 + v10
	loc5 = v9
	v9 = loc5
	fn000E5823(v9)
	return
	// succ:  fn000E6189_exit
l000E61B8:
	return
	// succ:  fn000E6189_exit
fn000E6189_exit:


// fn000E61BA
// Return size: 0
void fn000E61BA(word32 arg0)
fn000E61BA_entry:
	// succ:  l000E61BA
l000E61BA:
	v8 = Mem0[0x00140030<p32>:word32]
	loc6 = v8
	v8 = arg0
	v8 = Mem0[v8:word32]
	loc1 = v8
	v8 = loc1
	v9 = 0xFFFFFFF4<32>
	v8 = v8 + v9
	loc2 = v8
	v8 = loc2
	v8 = Mem0[v8:word32]
	loc3 = v8
	v8 = arg0
	v9 = loc3
	v8 = v8 + v9
	loc4 = v8
	v8 = loc4
	fn000E616F(v8)
	return
	// succ:  fn000E61BA_exit
l000E61E2:
	return
	// succ:  fn000E61BA_exit
fn000E61BA_exit:


// fn000E61E4
// Return size: 0
void fn000E61E4(word32 arg0)
fn000E61E4_entry:
	// succ:  l000E61E4
l000E61E4:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn0011D14E(v4)
	return
	// succ:  fn000E61E4_exit
l000E61F0:
	return
	// succ:  fn000E61E4_exit
fn000E61E4_exit:


// fn000E61F2
// Return size: 0
void fn000E61F2(word32 arg0)
fn000E61F2_entry:
	// succ:  l000E61F2
l000E61F2:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn0011D14E(v4)
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn000E61F2_exit
l000E6203:
	return
	// succ:  fn000E61F2_exit
fn000E61F2_exit:


// fn000E6205
// Return size: 0
void fn000E6205(word32 arg0)
fn000E6205_entry:
	// succ:  l000E6205
l000E6205:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn000E6205_exit
l000E6211:
	return
	// succ:  fn000E6205_exit
fn000E6205_exit:


// fn000E6213
// Return size: 0
word32 fn000E6213(word32 arg0)
fn000E6213_entry:
	// succ:  l000E6213
l000E6213:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = 0x36AE<32>
	return v4
	// succ:  fn000E6213_exit
l000E621E:
	return v4
	// succ:  fn000E6213_exit
fn000E6213_exit:


// fn000E6220
// Return size: 0
void fn000E6220(word32 arg0, word32 arg1, word32 arg2)
fn000E6220_entry:
	// succ:  l000E6220
l000E6220:
	v7 = Mem0[0x00140030<p32>:word32]
	loc7 = v7
	v7 = arg2
	v8 = 1<32>
	v9 = v7 != v8
	loc3 = v9
	v7 = arg2
	v8 = 0x101<32>
	v9 = v7 < v8
	loc4 = v9
	v7 = loc3
	v8 = loc4
	v7 = v7 & v8
	loc5 = v7
	v7 = loc5
	branch !v7 l000E624A
	// succ:  l000E6240 l000E624A
l000E6240:
	v7 = arg0
	v8 = arg1
	v10 = arg2
	fn0011D16F(v7, v8, v10)
	goto l000E6266
	// succ:  l000E6266
l000E624A:
	v7 = arg0
	v11 = 0<64>
	Mem0[v7:word64] = v11
	v7 = arg0
	v8 = 8<32>
	v7 = v7 + v8
	v8 = 0<32>
	Mem0[v7:word32] = v8
	v7 = arg0
	v8 = 0x368A<32>
	v10 = 0x23<32>
	fn0011B96D(v7, v8, v10)
	// succ:  l000E6266
l000E6266:
	return
	// succ:  fn000E6220_exit
l000E6268:
	return
	// succ:  fn000E6220_exit
fn000E6220_exit:


// fn000E626A
// Return size: 0
void fn000E626A(word32 arg0, word32 arg1)
fn000E626A_entry:
	// succ:  l000E626A
l000E626A:
	v28 = Mem0[0x00140030<p32>:word32]
	loc27 = v28
	v28 = Mem0[0x00140030<p32>:word32]
	v29 = 0x10<32>
	v28 = v28 + v29
	Mem0[0x00140030<p32>:word32] = v28
	v28 = Mem0[0x00140030<p32>:word32]
	v29 = Mem0[0x00140034<p32>:word32]
	v30 = v28 >= v29
	branch !v30 l000E6283
	// succ:  l000E627E l000E6283
l000E627E:
	v28 = 0x10<32>
	abortStackOverflow(v28)
	// succ:  l000E6283
l000E6283:
	v28 = loc27
	loc16 = v28
	v28 = arg0
	v29 = 0x18<32>
	v28 = v28 + v29
	loc19 = v28
	v28 = loc19
	v28 = Mem0[v28:word32]
	loc20 = v28
	v28 = loc20
	v29 = 0<32>
	v30 = v28 == v29
	loc21 = v30
	v28 = loc21
	v29 = 1<32>
	v28 = v28 & v29
	loc22 = v28
	v28 = loc22
	v29 = arg1
	v28 = v28 | v29
	loc2 = v28
	v28 = arg0
	v29 = 0x10<32>
	v28 = v28 + v29
	loc23 = v28
	v28 = loc23
	v29 = loc2
	Mem0[v28:word32] = v29
	v28 = loc21
	v29 = 1<32>
	v28 = v28 & v29
	loc24 = v28
	v28 = loc24
	v29 = arg1
	v28 = v28 | v29
	loc25 = v28
	v28 = arg0
	v29 = 0x14<32>
	v28 = v28 + v29
	loc6 = v28
	v28 = loc6
	v28 = Mem0[v28:word32]
	loc7 = v28
	v28 = loc25
	v29 = loc7
	v28 = v28 & v29
	loc8 = v28
	v28 = loc8
	v29 = 0<32>
	v30 = v28 == v29
	loc9 = v30
	v28 = loc9
	branch !v28 l000E62EC
	// succ:  l000E62E6 l000E62EC
l000E62E6:
	v28 = loc27
	Mem0[0x00140030<p32>:word32] = v28
	return
	// succ:  fn000E626A_exit
l000E62EC:
	v28 = 0x10<32>
	v28 = ___cxa_allocate_exception(v28)
	loc10 = v28
	v28 = fn000E6375()
	v28 = loc16
	v29 = 1<32>
	Mem0[v28:word32] = v29
	v28 = loc16
	v29 = 4<32>
	v28 = v28 + v29
	loc5 = v28
	v28 = loc5
	v29 = 0x4854<32>
	Mem0[v28:word32] = v29
	v28 = 0<32>
	Mem0[0x00140048<p32>:word32] = v28
	v28 = 0x172<32>
	v29 = loc10
	v31 = 0x36D5<32>
	v32 = loc16
	invoke_viii(v28, v29, v31, v32)
	v28 = Mem0[0x00140048<p32>:word32]
	loc11 = v28
	v28 = 0<32>
	Mem0[0x00140048<p32>:word32] = v28
	v28 = loc11
	v29 = 1<32>
	v28 = v28 & v29
	loc12 = v28
	v28 = loc12
	branch !v28 l000E6346
	// succ:  l000E6331 l000E6346
l000E6331:
	v28 = ___cxa_find_matching_catch_2()
	loc17 = v28
	v28 = Mem0[0x00140094<p32>:word32]
	loc18 = v28
	v28 = loc10
	___cxa_free_exception(v28)
	v28 = loc17
	loc3 = v28
	v28 = loc18
	loc4 = v28
	goto l000E636E
	// succ:  l000E636E
l000E6346:
	v28 = 0<32>
	Mem0[0x00140048<p32>:word32] = v28
	v28 = 0x173<32>
	v29 = loc10
	v31 = 0x498<32>
	v32 = 0x35<32>
	invoke_viii(v28, v29, v31, v32)
	v28 = Mem0[0x00140048<p32>:word32]
	loc13 = v28
	v28 = 0<32>
	Mem0[0x00140048<p32>:word32] = v28
	v28 = ___cxa_find_matching_catch_2()
	loc14 = v28
	v28 = Mem0[0x00140094<p32>:word32]
	loc15 = v28
	v28 = loc14
	loc3 = v28
	v28 = loc15
	loc4 = v28
	// succ:  l000E636E
l000E636E:
	v28 = loc3
	___resumeException(v28)
	// succ:  l000E6373
l000E6373:
	return
	// succ:  fn000E626A_exit
fn000E626A_exit:


// fn000E6375
// Return size: 0
word32 fn000E6375()
fn000E6375_entry:
	// succ:  l000E6375
l000E6375:
	v8 = Mem0[0x00140030<p32>:word32]
	loc5 = v8
	v8 = 0x4388<32>
	v9 = Mem0[v8:int8]
	v8 = CONVERT(v9, int8, word32)
	loc0 = v8
	v8 = loc0
	v10 = 0x18<32>
	v8 = v8 << v10
	v10 = 0x18<32>
	v8 = v8 >> v10
	v10 = 0<32>
	v11 = v8 == v10
	loc1 = v11
	v8 = loc1
	branch !v8 l000E63C1
	// succ:  l000E6395 l000E63C1
l000E6395:
	v8 = 0x4388<32>
	v8 = fn0011EE46(v8)
	loc2 = v8
	v8 = loc2
	v10 = 0<32>
	v11 = v8 == v10
	loc3 = v11
	v8 = loc3
	v11 = v8 == 0<32>
	branch !v11 l000E63C0
	// succ:  l000E63AA l000E63C0
l000E63AA:
	v8 = 0x4854<32>
	v10 = 0x1A64<32>
	Mem0[v8:word32] = v10
	v8 = 0x38<32>
	v10 = 0x4854<32>
	v12 = Mem0[0x00140044<p32>:word32]
	v8 = ___cxa_atexit(v8, v10, v12)
	// succ:  l000E63C0
l000E63C0:
	// succ:  l000E63C1
l000E63C1:
	v8 = 0x4854<32>
	return v8
	// succ:  fn000E6375_exit
l000E63C6:
	return v8
	// succ:  fn000E6375_exit
fn000E6375_exit:


// fn000E63C8
// Return size: 0
void fn000E63C8(word32 arg0, word32 arg1, word32 arg2)
fn000E63C8_entry:
	// succ:  l000E63C8
l000E63C8:
	v7 = Mem0[0x00140030<p32>:word32]
	loc6 = v7
	v7 = Mem0[0x00140030<p32>:word32]
	v8 = 0x10<32>
	v7 = v7 + v8
	Mem0[0x00140030<p32>:word32] = v7
	v7 = Mem0[0x00140030<p32>:word32]
	v8 = Mem0[0x00140034<p32>:word32]
	v9 = v7 >= v8
	branch !v9 l000E63E1
	// succ:  l000E63DC l000E63E1
l000E63DC:
	v7 = 0x10<32>
	abortStackOverflow(v7)
	// succ:  l000E63E1
l000E63E1:
	v7 = loc6
	v8 = 8<32>
	v7 = v7 + v8
	loc4 = v7
	v7 = loc6
	loc3 = v7
	v7 = arg2
	v10 = Mem0[v7:word64]
	loc7 = v10
	v7 = loc3
	v11 = loc7
	Mem0[v7:word64] = v11
	v7 = loc4
	v8 = loc3
	v11 = Mem0[v8:word64]
	Mem0[v7:word64] = v11
	v7 = arg0
	v8 = loc4
	v12 = arg1
	fn0011D354(v7, v8, v12)
	v7 = arg0
	v8 = 0x1A50<32>
	Mem0[v7:word32] = v8
	v7 = loc6
	Mem0[0x00140030<p32>:word32] = v7
	return
	// succ:  fn000E63C8_exit
l000E641A:
	return
	// succ:  fn000E63C8_exit
fn000E63C8_exit:


// fn000E641C
// Return size: 0
void fn000E641C(word32 arg0, word32 arg1)
fn000E641C_entry:
	// succ:  l000E641C
l000E641C:
	v14 = Mem0[0x00140030<p32>:word32]
	loc13 = v14
	v14 = arg0
	v15 = 0x18<32>
	v14 = v14 + v15
	loc3 = v14
	v14 = loc3
	v15 = arg1
	Mem0[v14:word32] = v15
	v14 = arg1
	v15 = 0<32>
	v16 = v14 == v15
	loc11 = v16
	v14 = loc11
	v15 = 1<32>
	v14 = v14 & v15
	loc4 = v14
	v14 = arg0
	v15 = 0x10<32>
	v14 = v14 + v15
	loc5 = v14
	v14 = loc5
	v15 = loc4
	Mem0[v14:word32] = v15
	v14 = arg0
	v15 = 0x14<32>
	v14 = v14 + v15
	loc6 = v14
	v14 = loc6
	v15 = 0<32>
	Mem0[v14:word32] = v15
	v14 = arg0
	v15 = 4<32>
	v14 = v14 + v15
	loc7 = v14
	v14 = loc7
	v15 = 0x1002<32>
	Mem0[v14:word32] = v15
	v14 = arg0
	v15 = 0xC<32>
	v14 = v14 + v15
	loc8 = v14
	v14 = loc8
	v15 = 0<32>
	Mem0[v14:word32] = v15
	v14 = arg0
	v15 = 8<32>
	v14 = v14 + v15
	loc9 = v14
	v14 = loc9
	v15 = 6<32>
	Mem0[v14:word32] = v15
	v14 = arg0
	v15 = 0x20<32>
	v14 = v14 + v15
	loc10 = v14
	v14 = arg0
	v15 = 0x1C<32>
	v14 = v14 + v15
	loc2 = v14
	v14 = loc10
	v17 = 0<64>
	Mem0[v14:word64] = v17
	v14 = loc10
	v15 = 8<32>
	v14 = v14 + v15
	v17 = 0<64>
	Mem0[v14:word64] = v17
	v14 = loc10
	v15 = 0x10<32>
	v14 = v14 + v15
	v17 = 0<64>
	Mem0[v14:word64] = v17
	v14 = loc10
	v15 = 0x18<32>
	v14 = v14 + v15
	v17 = 0<64>
	Mem0[v14:word64] = v17
	v14 = loc10
	v15 = 0x20<32>
	v14 = v14 + v15
	v17 = 0<64>
	Mem0[v14:word64] = v17
	v14 = loc2
	fn0011B395(v14)
	return
	// succ:  fn000E641C_exit
l000E64C8:
	return
	// succ:  fn000E641C_exit
fn000E641C_exit:


// fn000E64CA
// Return size: 0
word32 fn000E64CA(word32 arg0)
fn000E64CA_entry:
	// succ:  l000E64CA
l000E64CA:
	v7 = Mem0[0x00140030<p32>:word32]
	loc5 = v7
	v7 = Mem0[0x00140030<p32>:word32]
	v8 = 0x10<32>
	v7 = v7 + v8
	Mem0[0x00140030<p32>:word32] = v7
	v7 = Mem0[0x00140030<p32>:word32]
	v8 = Mem0[0x00140034<p32>:word32]
	v9 = v7 >= v8
	branch !v9 l000E64E3
	// succ:  l000E64DE l000E64E3
l000E64DE:
	v7 = 0x10<32>
	abortStackOverflow(v7)
	// succ:  l000E64E3
l000E64E3:
	v7 = loc5
	loc1 = v7
	v7 = arg0
	v8 = 0x1C<32>
	v7 = v7 + v8
	loc2 = v7
	v7 = loc1
	v8 = loc2
	fn0011B3DF(v7, v8)
	v7 = loc1
	v7 = Mem0[v7:word32]
	loc3 = v7
	v7 = loc5
	Mem0[0x00140030<p32>:word32] = v7
	v7 = loc3
	return v7
	// succ:  fn000E64CA_exit
l000E6503:
	return v7
	// succ:  fn000E64CA_exit
fn000E64CA_exit:


// fn000E6505
// Return size: 0
void fn000E6505(word32 arg0)
fn000E6505_entry:
	// succ:  l000E6505
l000E6505:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = arg0
	v7 = 0x1930<32>
	Mem0[v6:word32] = v7
	v6 = arg0
	v7 = 4<32>
	v6 = v6 + v7
	loc1 = v6
	v6 = loc1
	fn0011B395(v6)
	v6 = arg0
	v7 = 8<32>
	v6 = v6 + v7
	loc2 = v6
	v6 = loc2
	v8 = 0<64>
	Mem0[v6:word64] = v8
	v6 = loc2
	v7 = 8<32>
	v6 = v6 + v7
	v8 = 0<64>
	Mem0[v6:word64] = v8
	v6 = loc2
	v7 = 0x10<32>
	v6 = v6 + v7
	v8 = 0<64>
	Mem0[v6:word64] = v8
	return
	// succ:  fn000E6505_exit
l000E6542:
	return
	// succ:  fn000E6505_exit
fn000E6505_exit:


// fn000E6544
// Return size: 0
void fn000E6544(word32 arg0)
fn000E6544_entry:
	// succ:  l000E6544
l000E6544:
	v6 = Mem0[0x00140030<p32>:word32]
	loc4 = v6
	v6 = arg0
	v7 = 0x1970<32>
	Mem0[v6:word32] = v7
	v6 = arg0
	v7 = 4<32>
	v6 = v6 + v7
	loc1 = v6
	v6 = loc1
	fn0011B395(v6)
	v6 = arg0
	v7 = 8<32>
	v6 = v6 + v7
	loc2 = v6
	v6 = loc2
	v8 = 0<64>
	Mem0[v6:word64] = v8
	v6 = loc2
	v7 = 8<32>
	v6 = v6 + v7
	v8 = 0<64>
	Mem0[v6:word64] = v8
	v6 = loc2
	v7 = 0x10<32>
	v6 = v6 + v7
	v8 = 0<64>
	Mem0[v6:word64] = v8
	return
	// succ:  fn000E6544_exit
l000E6581:
	return
	// succ:  fn000E6544_exit
fn000E6544_exit:


// fn000E6583
// Return size: 0
word32 fn000E6583(word32 arg0)
fn000E6583_entry:
	// succ:  l000E6583
l000E6583:
	v55 = Mem0[0x00140030<p32>:word32]
	loc53 = v55
	v55 = Mem0[0x00140030<p32>:word32]
	v56 = 0x10<32>
	v55 = v55 + v56
	Mem0[0x00140030<p32>:word32] = v55
	v55 = Mem0[0x00140030<p32>:word32]
	v56 = Mem0[0x00140034<p32>:word32]
	v57 = v55 >= v56
	branch !v57 l000E659C
	// succ:  l000E6597 l000E659C
l000E6597:
	v55 = 0x10<32>
	abortStackOverflow(v55)
	// succ:  l000E659C
l000E659C:
	v55 = loc53
	loc2 = v55
	v55 = arg0
	v55 = Mem0[v55:word32]
	loc13 = v55
	v55 = loc13
	v56 = 0xFFFFFFF4<32>
	v55 = v55 + v56
	loc24 = v55
	v55 = loc24
	v55 = Mem0[v55:word32]
	loc35 = v55
	v55 = arg0
	v56 = loc35
	v55 = v55 + v56
	loc46 = v55
	v55 = loc46
	v56 = 0x18<32>
	v55 = v55 + v56
	loc48 = v55
	v55 = loc48
	v55 = Mem0[v55:word32]
	loc49 = v55
	v55 = loc49
	v56 = 0<32>
	v57 = v55 == v56
	loc50 = v57
	// succ:  l000E65D1
l000E65D1:
	v55 = loc50
	v57 = v55 == 0<32>
	branch !v57 l000E6786
	// succ:  l000E65D8 l000E6786
l000E65D8:
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = 0x166<32>
	v56 = loc2
	v58 = arg0
	invoke_vii(v55, v56, v58)
	v55 = Mem0[0x00140048<p32>:word32]
	loc51 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = loc51
	v56 = 1<32>
	v55 = v55 & v56
	loc3 = v55
	// succ:  l000E65F4
l000E65F4:
	v55 = loc3
	branch !v55 l000E6609
	// succ:  l000E65FA l000E6609
l000E65FA:
	v55 = 0<32>
	v55 = ___cxa_find_matching_catch_3(v55)
	loc30 = v55
	v55 = Mem0[0x00140094<p32>:word32]
	loc31 = v55
	v55 = loc30
	loc1 = v55
	goto l000E6706
	// succ:  l000E6706
l000E6609:
	v55 = loc2
	v59 = Mem0[v55:int8]
	v55 = CONVERT(v59, int8, word32)
	loc4 = v55
	v55 = loc4
	v56 = 0x18<32>
	v55 = v55 << v56
	v56 = 0x18<32>
	v55 = v55 >> v56
	v56 = 0<32>
	v57 = v55 == v56
	loc5 = v57
	// succ:  l000E661D
l000E661D:
	v55 = loc5
	v57 = v55 == 0<32>
	branch !v57 l000E66FE
	// succ:  l000E6624 l000E66FE
l000E6624:
	v55 = arg0
	v55 = Mem0[v55:word32]
	loc6 = v55
	v55 = loc6
	v56 = 0xFFFFFFF4<32>
	v55 = v55 + v56
	loc7 = v55
	v55 = loc7
	v55 = Mem0[v55:word32]
	loc8 = v55
	v55 = arg0
	v56 = loc8
	v55 = v55 + v56
	loc9 = v55
	v55 = loc9
	v56 = 0x18<32>
	v55 = v55 + v56
	loc10 = v55
	v55 = loc10
	v55 = Mem0[v55:word32]
	loc11 = v55
	v55 = loc11
	v55 = Mem0[v55:word32]
	loc12 = v55
	v55 = loc12
	v56 = 0x18<32>
	v55 = v55 + v56
	loc14 = v55
	v55 = loc14
	v55 = Mem0[v55:word32]
	loc15 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = loc15
	v56 = loc11
	v55 = invoke_ii(v55, v56)
	loc16 = v55
	v55 = Mem0[0x00140048<p32>:word32]
	loc17 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = loc17
	v56 = 1<32>
	v55 = v55 & v56
	loc18 = v55
	v55 = loc18
	v57 = v55 == 0<32>
	branch !v57 l000E66E8
	// succ:  l000E6683 l000E66E8
l000E6683:
	v55 = loc16
	v56 = 0xFFFFFFFF<32>
	v57 = v55 == v56
	loc19 = v57
	v55 = loc19
	v57 = v55 == 0<32>
	branch !v57 l000E6692
	// succ:  l000E668F l000E6692
l000E668F:
	goto l000E66FE
	// succ:  l000E66FE
l000E6692:
	v55 = arg0
	v55 = Mem0[v55:word32]
	loc20 = v55
	v55 = loc20
	v56 = 0xFFFFFFF4<32>
	v55 = v55 + v56
	loc21 = v55
	v55 = loc21
	v55 = Mem0[v55:word32]
	loc22 = v55
	v55 = arg0
	v56 = loc22
	v55 = v55 + v56
	loc23 = v55
	v55 = loc23
	v56 = 0x10<32>
	v55 = v55 + v56
	loc25 = v55
	v55 = loc25
	v55 = Mem0[v55:word32]
	loc26 = v55
	v55 = loc26
	v56 = 1<32>
	v55 = v55 | v56
	loc27 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = 0x169<32>
	v56 = loc23
	v58 = loc27
	invoke_vii(v55, v56, v58)
	v55 = Mem0[0x00140048<p32>:word32]
	loc28 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = loc28
	v56 = 1<32>
	v55 = v55 & v56
	loc29 = v55
	v55 = loc29
	v57 = v55 == 0<32>
	branch !v57 l000E66E7
	// succ:  l000E66E4 l000E66E7
l000E66E4:
	goto l000E66FE
	// succ:  l000E66FE
l000E66E7:
	// succ:  l000E66E8
l000E66E8:
	v55 = 0<32>
	v55 = ___cxa_find_matching_catch_3(v55)
	loc32 = v55
	v55 = Mem0[0x00140094<p32>:word32]
	loc33 = v55
	v55 = loc2
	fn000E680D(v55)
	v55 = loc32
	loc1 = v55
	goto l000E6707
	// succ:  l000E6707
l000E66FE:
	// succ:  l000E66FE
l000E66FE:
	v55 = loc2
	fn000E680D(v55)
	goto l000E6786
	// succ:  l000E6786
l000E6706:
	// succ:  l000E6707
l000E6707:
	v55 = loc1
	v55 = ___cxa_begin_catch(v55)
	v55 = arg0
	v55 = Mem0[v55:word32]
	loc34 = v55
	v55 = loc34
	v56 = 0xFFFFFFF4<32>
	v55 = v55 + v56
	loc36 = v55
	v55 = loc36
	v55 = Mem0[v55:word32]
	loc37 = v55
	v55 = arg0
	v56 = loc37
	v55 = v55 + v56
	loc38 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = 0x16B<32>
	v56 = loc38
	invoke_vi(v55, v56)
	v55 = Mem0[0x00140048<p32>:word32]
	loc39 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = loc39
	v56 = 1<32>
	v55 = v55 & v56
	loc40 = v55
	v55 = loc40
	v57 = v55 == 0<32>
	branch !v57 l000E674D
	// succ:  l000E6748 l000E674D
l000E6748:
	___cxa_end_catch()
	goto l000E6786
	// succ:  l000E6786
l000E674D:
	v55 = ___cxa_find_matching_catch_2()
	loc41 = v55
	v55 = Mem0[0x00140094<p32>:word32]
	loc42 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = 0x16C<32>
	invoke_v(v55)
	v55 = Mem0[0x00140048<p32>:word32]
	loc43 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = loc43
	v56 = 1<32>
	v55 = v55 & v56
	loc44 = v55
	v55 = loc44
	branch !v55 l000E6780
	// succ:  l000E6771 l000E6780
l000E6771:
	v55 = 0<32>
	v55 = ___cxa_find_matching_catch_3(v55)
	loc45 = v55
	v55 = Mem0[0x00140094<p32>:word32]
	loc47 = v55
	v55 = loc45
	fn000D0E65(v55)
	goto l000E6784
	// succ:  l000E6784
l000E6780:
	v55 = loc41
	___resumeException(v55)
	// succ:  l000E6784
l000E6784:
	// succ:  l000E6786
l000E6786:
	// succ:  l000E6786
l000E6786:
	v55 = loc53
	Mem0[0x00140030<p32>:word32] = v55
	v55 = arg0
	return v55
	// succ:  fn000E6583_exit
l000E678E:
	return v55
	// succ:  fn000E6583_exit
fn000E6583_exit:


// fn000E6790
// Return size: 0
void fn000E6790(word32 arg0, word32 arg1)
fn000E6790_entry:
	// succ:  l000E6790
l000E6790:
	v15 = Mem0[0x00140030<p32>:word32]
	loc14 = v15
	v15 = arg0
	v16 = 0<32>
	v17 = SLICE(v16, byte, 0)
	Mem0[v15:byte] = v17
	v15 = arg0
	v16 = 4<32>
	v15 = v15 + v16
	loc5 = v15
	v15 = loc5
	v16 = arg1
	Mem0[v15:word32] = v16
	v15 = arg1
	v15 = Mem0[v15:word32]
	loc6 = v15
	v15 = loc6
	v16 = 0xFFFFFFF4<32>
	v15 = v15 + v16
	loc7 = v15
	v15 = loc7
	v15 = Mem0[v15:word32]
	loc8 = v15
	v15 = arg1
	v16 = loc8
	v15 = v15 + v16
	loc9 = v15
	v15 = loc9
	v16 = 0x10<32>
	v15 = v15 + v16
	loc10 = v15
	v15 = loc10
	v15 = Mem0[v15:word32]
	loc11 = v15
	v15 = loc11
	v16 = 0<32>
	v18 = v15 == v16
	loc12 = v18
	v15 = loc12
	branch !v15 l000E680A
	// succ:  l000E67E0 l000E680A
l000E67E0:
	v15 = loc9
	v16 = 0x48<32>
	v15 = v15 + v16
	loc2 = v15
	v15 = loc2
	v15 = Mem0[v15:word32]
	loc3 = v15
	v15 = loc3
	v16 = 0<32>
	v18 = v15 == v16
	loc4 = v18
	v15 = loc4
	v18 = v15 == 0<32>
	branch !v18 l000E6802
	// succ:  l000E67FB l000E6802
l000E67FB:
	v15 = loc3
	v15 = fn000E6583(v15)
	// succ:  l000E6802
l000E6802:
	v15 = arg0
	v16 = 1<32>
	v19 = SLICE(v16, byte, 0)
	Mem0[v15:byte] = v19
	// succ:  l000E680A
l000E680A:
	return
	// succ:  fn000E6790_exit
l000E680B:
	return
	// succ:  fn000E6790_exit
fn000E6790_exit:


// fn000E680D
// Return size: 0
void fn000E680D(word32 arg0)
fn000E680D_entry:
	// succ:  l000E680D
l000E680D:
	v51 = Mem0[0x00140030<p32>:word32]
	loc49 = v51
	v51 = arg0
	v52 = 4<32>
	v51 = v51 + v52
	loc1 = v51
	v51 = loc1
	v51 = Mem0[v51:word32]
	loc12 = v51
	v51 = loc12
	v51 = Mem0[v51:word32]
	loc23 = v51
	v51 = loc23
	v52 = 0xFFFFFFF4<32>
	v51 = v51 + v52
	loc34 = v51
	v51 = loc34
	v51 = Mem0[v51:word32]
	loc43 = v51
	v51 = loc12
	v52 = loc43
	v51 = v51 + v52
	loc44 = v51
	v51 = loc44
	v52 = 0x18<32>
	v51 = v51 + v52
	loc45 = v51
	v51 = loc45
	v51 = Mem0[v51:word32]
	loc46 = v51
	v51 = loc46
	v52 = 0<32>
	v53 = v51 == v52
	loc47 = v53
	// succ:  l000E6852
l000E6852:
	v51 = loc47
	v53 = v51 == 0<32>
	branch !v53 l000E69AE
	// succ:  l000E6859 l000E69AE
l000E6859:
	v51 = loc44
	v52 = 0x10<32>
	v51 = v51 + v52
	loc2 = v51
	v51 = loc2
	v51 = Mem0[v51:word32]
	loc3 = v51
	v51 = loc3
	v52 = 0<32>
	v53 = v51 == v52
	loc4 = v53
	v51 = loc4
	branch !v51 l000E69AD
	// succ:  l000E6872 l000E69AD
l000E6872:
	v51 = loc44
	v52 = 4<32>
	v51 = v51 + v52
	loc5 = v51
	v51 = loc5
	v51 = Mem0[v51:word32]
	loc6 = v51
	v51 = loc6
	v52 = 0x2000<32>
	v51 = v51 & v52
	loc7 = v51
	v51 = loc7
	v52 = 0<32>
	v53 = v51 == v52
	loc8 = v53
	v51 = loc8
	v53 = v51 == 0<32>
	branch !v53 l000E69AC
	// succ:  l000E6895 l000E69AC
l000E6895:
	v51 = __ZSt18uncaught_exceptionv()
	loc9 = v51
	v51 = loc9
	v53 = v51 == 0<32>
	branch !v53 l000E69AB
	// succ:  l000E689E l000E69AB
l000E689E:
	v51 = loc1
	v51 = Mem0[v51:word32]
	loc10 = v51
	v51 = loc10
	v51 = Mem0[v51:word32]
	loc11 = v51
	v51 = loc11
	v52 = 0xFFFFFFF4<32>
	v51 = v51 + v52
	loc13 = v51
	v51 = loc13
	v51 = Mem0[v51:word32]
	loc14 = v51
	v51 = loc10
	v52 = loc14
	v51 = v51 + v52
	loc15 = v51
	v51 = loc15
	v52 = 0x18<32>
	v51 = v51 + v52
	loc16 = v51
	v51 = loc16
	v51 = Mem0[v51:word32]
	loc17 = v51
	v51 = loc17
	v51 = Mem0[v51:word32]
	loc18 = v51
	v51 = loc18
	v52 = 0x18<32>
	v51 = v51 + v52
	loc19 = v51
	v51 = loc19
	v51 = Mem0[v51:word32]
	loc20 = v51
	v51 = 0<32>
	Mem0[0x00140048<p32>:word32] = v51
	v51 = loc20
	v52 = loc17
	v51 = invoke_ii(v51, v52)
	loc21 = v51
	v51 = Mem0[0x00140048<p32>:word32]
	loc22 = v51
	v51 = 0<32>
	Mem0[0x00140048<p32>:word32] = v51
	v51 = loc22
	v52 = 1<32>
	v51 = v51 & v52
	loc24 = v51
	v51 = loc24
	v53 = v51 == 0<32>
	branch !v53 l000E6970
	// succ:  l000E6904 l000E6970
l000E6904:
	v51 = loc21
	v52 = 0xFFFFFFFF<32>
	v53 = v51 == v52
	loc25 = v53
	v51 = loc25
	v53 = v51 == 0<32>
	branch !v53 l000E6913
	// succ:  l000E6910 l000E6913
l000E6910:
	goto l000E69AE
	// succ:  l000E69AE
l000E6913:
	v51 = loc1
	v51 = Mem0[v51:word32]
	loc26 = v51
	v51 = loc26
	v51 = Mem0[v51:word32]
	loc27 = v51
	v51 = loc27
	v52 = 0xFFFFFFF4<32>
	v51 = v51 + v52
	loc28 = v51
	v51 = loc28
	v51 = Mem0[v51:word32]
	loc29 = v51
	v51 = loc26
	v52 = loc29
	v51 = v51 + v52
	loc30 = v51
	v51 = loc30
	v52 = 0x10<32>
	v51 = v51 + v52
	loc31 = v51
	v51 = loc31
	v51 = Mem0[v51:word32]
	loc32 = v51
	v51 = loc32
	v52 = 1<32>
	v51 = v51 | v52
	loc33 = v51
	v51 = 0<32>
	Mem0[0x00140048<p32>:word32] = v51
	v51 = 0x169<32>
	v52 = loc30
	v54 = loc33
	invoke_vii(v51, v52, v54)
	v51 = Mem0[0x00140048<p32>:word32]
	loc35 = v51
	v51 = 0<32>
	Mem0[0x00140048<p32>:word32] = v51
	v51 = loc35
	v52 = 1<32>
	v51 = v51 & v52
	loc36 = v51
	v51 = loc36
	v53 = v51 == 0<32>
	branch !v53 l000E696F
	// succ:  l000E696C l000E696F
l000E696C:
	goto l000E69AE
	// succ:  l000E69AE
l000E696F:
	// succ:  l000E6970
l000E6970:
	v51 = 0<32>
	v51 = ___cxa_find_matching_catch_3(v51)
	loc37 = v51
	v51 = Mem0[0x00140094<p32>:word32]
	loc38 = v51
	v51 = loc37
	v51 = ___cxa_begin_catch(v51)
	v51 = 0<32>
	Mem0[0x00140048<p32>:word32] = v51
	v51 = 0x16C<32>
	invoke_v(v51)
	v51 = Mem0[0x00140048<p32>:word32]
	loc39 = v51
	v51 = 0<32>
	Mem0[0x00140048<p32>:word32] = v51
	v51 = loc39
	v52 = 1<32>
	v51 = v51 & v52
	loc40 = v51
	v51 = loc40
	branch !v51 l000E69AA
	// succ:  l000E699B l000E69AA
l000E699B:
	v51 = 0<32>
	v51 = ___cxa_find_matching_catch_3(v51)
	loc41 = v51
	v51 = Mem0[0x00140094<p32>:word32]
	loc42 = v51
	v51 = loc41
	fn000D0E65(v51)
	// succ:  l000E69AA
l000E69AA:
	// succ:  l000E69AB
l000E69AB:
	// succ:  l000E69AC
l000E69AC:
	// succ:  l000E69AD
l000E69AD:
	// succ:  l000E69AE
l000E69AE:
	// succ:  l000E69AE
l000E69AE:
	return
	// succ:  fn000E680D_exit
l000E69B0:
	return
	// succ:  fn000E680D_exit
fn000E680D_exit:


// fn000E69FB
// Return size: 0
word32 fn000E69FB(word32 arg0)
fn000E69FB_entry:
	// succ:  l000E69FB
l000E69FB:
	v55 = Mem0[0x00140030<p32>:word32]
	loc53 = v55
	v55 = Mem0[0x00140030<p32>:word32]
	v56 = 0x10<32>
	v55 = v55 + v56
	Mem0[0x00140030<p32>:word32] = v55
	v55 = Mem0[0x00140030<p32>:word32]
	v56 = Mem0[0x00140034<p32>:word32]
	v57 = v55 >= v56
	branch !v57 l000E6A14
	// succ:  l000E6A0F l000E6A14
l000E6A0F:
	v55 = 0x10<32>
	abortStackOverflow(v55)
	// succ:  l000E6A14
l000E6A14:
	v55 = loc53
	loc2 = v55
	v55 = arg0
	v55 = Mem0[v55:word32]
	loc13 = v55
	v55 = loc13
	v56 = 0xFFFFFFF4<32>
	v55 = v55 + v56
	loc24 = v55
	v55 = loc24
	v55 = Mem0[v55:word32]
	loc35 = v55
	v55 = arg0
	v56 = loc35
	v55 = v55 + v56
	loc46 = v55
	v55 = loc46
	v56 = 0x18<32>
	v55 = v55 + v56
	loc48 = v55
	v55 = loc48
	v55 = Mem0[v55:word32]
	loc49 = v55
	v55 = loc49
	v56 = 0<32>
	v57 = v55 == v56
	loc50 = v57
	// succ:  l000E6A49
l000E6A49:
	v55 = loc50
	v57 = v55 == 0<32>
	branch !v57 l000E6BFE
	// succ:  l000E6A50 l000E6BFE
l000E6A50:
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = 0x174<32>
	v56 = loc2
	v58 = arg0
	invoke_vii(v55, v56, v58)
	v55 = Mem0[0x00140048<p32>:word32]
	loc51 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = loc51
	v56 = 1<32>
	v55 = v55 & v56
	loc3 = v55
	// succ:  l000E6A6C
l000E6A6C:
	v55 = loc3
	branch !v55 l000E6A81
	// succ:  l000E6A72 l000E6A81
l000E6A72:
	v55 = 0<32>
	v55 = ___cxa_find_matching_catch_3(v55)
	loc30 = v55
	v55 = Mem0[0x00140094<p32>:word32]
	loc31 = v55
	v55 = loc30
	loc1 = v55
	goto l000E6B7E
	// succ:  l000E6B7E
l000E6A81:
	v55 = loc2
	v59 = Mem0[v55:int8]
	v55 = CONVERT(v59, int8, word32)
	loc4 = v55
	v55 = loc4
	v56 = 0x18<32>
	v55 = v55 << v56
	v56 = 0x18<32>
	v55 = v55 >> v56
	v56 = 0<32>
	v57 = v55 == v56
	loc5 = v57
	// succ:  l000E6A95
l000E6A95:
	v55 = loc5
	v57 = v55 == 0<32>
	branch !v57 l000E6B76
	// succ:  l000E6A9C l000E6B76
l000E6A9C:
	v55 = arg0
	v55 = Mem0[v55:word32]
	loc6 = v55
	v55 = loc6
	v56 = 0xFFFFFFF4<32>
	v55 = v55 + v56
	loc7 = v55
	v55 = loc7
	v55 = Mem0[v55:word32]
	loc8 = v55
	v55 = arg0
	v56 = loc8
	v55 = v55 + v56
	loc9 = v55
	v55 = loc9
	v56 = 0x18<32>
	v55 = v55 + v56
	loc10 = v55
	v55 = loc10
	v55 = Mem0[v55:word32]
	loc11 = v55
	v55 = loc11
	v55 = Mem0[v55:word32]
	loc12 = v55
	v55 = loc12
	v56 = 0x18<32>
	v55 = v55 + v56
	loc14 = v55
	v55 = loc14
	v55 = Mem0[v55:word32]
	loc15 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = loc15
	v56 = loc11
	v55 = invoke_ii(v55, v56)
	loc16 = v55
	v55 = Mem0[0x00140048<p32>:word32]
	loc17 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = loc17
	v56 = 1<32>
	v55 = v55 & v56
	loc18 = v55
	v55 = loc18
	v57 = v55 == 0<32>
	branch !v57 l000E6B60
	// succ:  l000E6AFB l000E6B60
l000E6AFB:
	v55 = loc16
	v56 = 0xFFFFFFFF<32>
	v57 = v55 == v56
	loc19 = v57
	v55 = loc19
	v57 = v55 == 0<32>
	branch !v57 l000E6B0A
	// succ:  l000E6B07 l000E6B0A
l000E6B07:
	goto l000E6B76
	// succ:  l000E6B76
l000E6B0A:
	v55 = arg0
	v55 = Mem0[v55:word32]
	loc20 = v55
	v55 = loc20
	v56 = 0xFFFFFFF4<32>
	v55 = v55 + v56
	loc21 = v55
	v55 = loc21
	v55 = Mem0[v55:word32]
	loc22 = v55
	v55 = arg0
	v56 = loc22
	v55 = v55 + v56
	loc23 = v55
	v55 = loc23
	v56 = 0x10<32>
	v55 = v55 + v56
	loc25 = v55
	v55 = loc25
	v55 = Mem0[v55:word32]
	loc26 = v55
	v55 = loc26
	v56 = 1<32>
	v55 = v55 | v56
	loc27 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = 0x169<32>
	v56 = loc23
	v58 = loc27
	invoke_vii(v55, v56, v58)
	v55 = Mem0[0x00140048<p32>:word32]
	loc28 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = loc28
	v56 = 1<32>
	v55 = v55 & v56
	loc29 = v55
	v55 = loc29
	v57 = v55 == 0<32>
	branch !v57 l000E6B5F
	// succ:  l000E6B5C l000E6B5F
l000E6B5C:
	goto l000E6B76
	// succ:  l000E6B76
l000E6B5F:
	// succ:  l000E6B60
l000E6B60:
	v55 = 0<32>
	v55 = ___cxa_find_matching_catch_3(v55)
	loc32 = v55
	v55 = Mem0[0x00140094<p32>:word32]
	loc33 = v55
	v55 = loc2
	fn000E6C85(v55)
	v55 = loc32
	loc1 = v55
	goto l000E6B7F
	// succ:  l000E6B7F
l000E6B76:
	// succ:  l000E6B76
l000E6B76:
	v55 = loc2
	fn000E6C85(v55)
	goto l000E6BFE
	// succ:  l000E6BFE
l000E6B7E:
	// succ:  l000E6B7F
l000E6B7F:
	v55 = loc1
	v55 = ___cxa_begin_catch(v55)
	v55 = arg0
	v55 = Mem0[v55:word32]
	loc34 = v55
	v55 = loc34
	v56 = 0xFFFFFFF4<32>
	v55 = v55 + v56
	loc36 = v55
	v55 = loc36
	v55 = Mem0[v55:word32]
	loc37 = v55
	v55 = arg0
	v56 = loc37
	v55 = v55 + v56
	loc38 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = 0x16B<32>
	v56 = loc38
	invoke_vi(v55, v56)
	v55 = Mem0[0x00140048<p32>:word32]
	loc39 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = loc39
	v56 = 1<32>
	v55 = v55 & v56
	loc40 = v55
	v55 = loc40
	v57 = v55 == 0<32>
	branch !v57 l000E6BC5
	// succ:  l000E6BC0 l000E6BC5
l000E6BC0:
	___cxa_end_catch()
	goto l000E6BFE
	// succ:  l000E6BFE
l000E6BC5:
	v55 = ___cxa_find_matching_catch_2()
	loc41 = v55
	v55 = Mem0[0x00140094<p32>:word32]
	loc42 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = 0x16C<32>
	invoke_v(v55)
	v55 = Mem0[0x00140048<p32>:word32]
	loc43 = v55
	v55 = 0<32>
	Mem0[0x00140048<p32>:word32] = v55
	v55 = loc43
	v56 = 1<32>
	v55 = v55 & v56
	loc44 = v55
	v55 = loc44
	branch !v55 l000E6BF8
	// succ:  l000E6BE9 l000E6BF8
l000E6BE9:
	v55 = 0<32>
	v55 = ___cxa_find_matching_catch_3(v55)
	loc45 = v55
	v55 = Mem0[0x00140094<p32>:word32]
	loc47 = v55
	v55 = loc45
	fn000D0E65(v55)
	goto l000E6BFC
	// succ:  l000E6BFC
l000E6BF8:
	v55 = loc41
	___resumeException(v55)
	// succ:  l000E6BFC
l000E6BFC:
	// succ:  l000E6BFE
l000E6BFE:
	// succ:  l000E6BFE
l000E6BFE:
	v55 = loc53
	Mem0[0x00140030<p32>:word32] = v55
	v55 = arg0
	return v55
	// succ:  fn000E69FB_exit
l000E6C06:
	return v55
	// succ:  fn000E69FB_exit
fn000E69FB_exit:


// fn000E6C08
// Return size: 0
void fn000E6C08(word32 arg0, word32 arg1)
fn000E6C08_entry:
	// succ:  l000E6C08
l000E6C08:
	v15 = Mem0[0x00140030<p32>:word32]
	loc14 = v15
	v15 = arg0
	v16 = 0<32>
	v17 = SLICE(v16, byte, 0)
	Mem0[v15:byte] = v17
	v15 = arg0
	v16 = 4<32>
	v15 = v15 + v16
	loc5 = v15
	v15 = loc5
	v16 = arg1
	Mem0[v15:word32] = v16
	v15 = arg1
	v15 = Mem0[v15:word32]
	loc6 = v15
	v15 = loc6
	v16 = 0xFFFFFFF4<32>
	v15 = v15 + v16
	loc7 = v15
	v15 = loc7
	v15 = Mem0[v15:word32]
	loc8 = v15
	v15 = arg1
	v16 = loc8
	v15 = v15 + v16
	loc9 = v15
	v15 = loc9
	v16 = 0x10<32>
	v15 = v15 + v16
	loc10 = v15
	v15 = loc10
	v15 = Mem0[v15:word32]
	loc11 = v15
	v15 = loc11
	v16 = 0<32>
	v18 = v15 == v16
	loc12 = v18
	v15 = loc12
	branch !v15 l000E6C82
	// succ:  l000E6C58 l000E6C82
l000E6C58:
	v15 = loc9
	v16 = 0x48<32>
	v15 = v15 + v16
	loc2 = v15
	v15 = loc2
	v15 = Mem0[v15:word32]
	loc3 = v15
	v15 = loc3
	v16 = 0<32>
	v18 = v15 == v16
	loc4 = v18
	v15 = loc4
	v18 = v15 == 0<32>
	branch !v18 l000E6C7A
	// succ:  l000E6C73 l000E6C7A
l000E6C73:
	v15 = loc3
	v15 = fn000E69FB(v15)
	// succ:  l000E6C7A
l000E6C7A:
	v15 = arg0
	v16 = 1<32>
	v19 = SLICE(v16, byte, 0)
	Mem0[v15:byte] = v19
	// succ:  l000E6C82
l000E6C82:
	return
	// succ:  fn000E6C08_exit
l000E6C83:
	return
	// succ:  fn000E6C08_exit
fn000E6C08_exit:


// fn000E6C85
// Return size: 0
void fn000E6C85(word32 arg0)
fn000E6C85_entry:
	// succ:  l000E6C85
l000E6C85:
	v51 = Mem0[0x00140030<p32>:word32]
	loc49 = v51
	v51 = arg0
	v52 = 4<32>
	v51 = v51 + v52
	loc1 = v51
	v51 = loc1
	v51 = Mem0[v51:word32]
	loc12 = v51
	v51 = loc12
	v51 = Mem0[v51:word32]
	loc23 = v51
	v51 = loc23
	v52 = 0xFFFFFFF4<32>
	v51 = v51 + v52
	loc34 = v51
	v51 = loc34
	v51 = Mem0[v51:word32]
	loc43 = v51
	v51 = loc12
	v52 = loc43
	v51 = v51 + v52
	loc44 = v51
	v51 = loc44
	v52 = 0x18<32>
	v51 = v51 + v52
	loc45 = v51
	v51 = loc45
	v51 = Mem0[v51:word32]
	loc46 = v51
	v51 = loc46
	v52 = 0<32>
	v53 = v51 == v52
	loc47 = v53
	// succ:  l000E6CCA
l000E6CCA:
	v51 = loc47
	v53 = v51 == 0<32>
	branch !v53 l000E6E26
	// succ:  l000E6CD1 l000E6E26
l000E6CD1:
	v51 = loc44
	v52 = 0x10<32>
	v51 = v51 + v52
	loc2 = v51
	v51 = loc2
	v51 = Mem0[v51:word32]
	loc3 = v51
	v51 = loc3
	v52 = 0<32>
	v53 = v51 == v52
	loc4 = v53
	v51 = loc4
	branch !v51 l000E6E25
	// succ:  l000E6CEA l000E6E25
l000E6CEA:
	v51 = loc44
	v52 = 4<32>
	v51 = v51 + v52
	loc5 = v51
	v51 = loc5
	v51 = Mem0[v51:word32]
	loc6 = v51
	v51 = loc6
	v52 = 0x2000<32>
	v51 = v51 & v52
	loc7 = v51
	v51 = loc7
	v52 = 0<32>
	v53 = v51 == v52
	loc8 = v53
	v51 = loc8
	v53 = v51 == 0<32>
	branch !v53 l000E6E24
	// succ:  l000E6D0D l000E6E24
l000E6D0D:
	v51 = __ZSt18uncaught_exceptionv()
	loc9 = v51
	v51 = loc9
	v53 = v51 == 0<32>
	branch !v53 l000E6E23
	// succ:  l000E6D16 l000E6E23
l000E6D16:
	v51 = loc1
	v51 = Mem0[v51:word32]
	loc10 = v51
	v51 = loc10
	v51 = Mem0[v51:word32]
	loc11 = v51
	v51 = loc11
	v52 = 0xFFFFFFF4<32>
	v51 = v51 + v52
	loc13 = v51
	v51 = loc13
	v51 = Mem0[v51:word32]
	loc14 = v51
	v51 = loc10
	v52 = loc14
	v51 = v51 + v52
	loc15 = v51
	v51 = loc15
	v52 = 0x18<32>
	v51 = v51 + v52
	loc16 = v51
	v51 = loc16
	v51 = Mem0[v51:word32]
	loc17 = v51
	v51 = loc17
	v51 = Mem0[v51:word32]
	loc18 = v51
	v51 = loc18
	v52 = 0x18<32>
	v51 = v51 + v52
	loc19 = v51
	v51 = loc19
	v51 = Mem0[v51:word32]
	loc20 = v51
	v51 = 0<32>
	Mem0[0x00140048<p32>:word32] = v51
	v51 = loc20
	v52 = loc17
	v51 = invoke_ii(v51, v52)
	loc21 = v51
	v51 = Mem0[0x00140048<p32>:word32]
	loc22 = v51
	v51 = 0<32>
	Mem0[0x00140048<p32>:word32] = v51
	v51 = loc22
	v52 = 1<32>
	v51 = v51 & v52
	loc24 = v51
	v51 = loc24
	v53 = v51 == 0<32>
	branch !v53 l000E6DE8
	// succ:  l000E6D7C l000E6DE8
l000E6D7C:
	v51 = loc21
	v52 = 0xFFFFFFFF<32>
	v53 = v51 == v52
	loc25 = v53
	v51 = loc25
	v53 = v51 == 0<32>
	branch !v53 l000E6D8B
	// succ:  l000E6D88 l000E6D8B
l000E6D88:
	goto l000E6E26
	// succ:  l000E6E26
l000E6D8B:
	v51 = loc1
	v51 = Mem0[v51:word32]
	loc26 = v51
	v51 = loc26
	v51 = Mem0[v51:word32]
	loc27 = v51
	v51 = loc27
	v52 = 0xFFFFFFF4<32>
	v51 = v51 + v52
	loc28 = v51
	v51 = loc28
	v51 = Mem0[v51:word32]
	loc29 = v51
	v51 = loc26
	v52 = loc29
	v51 = v51 + v52
	loc30 = v51
	v51 = loc30
	v52 = 0x10<32>
	v51 = v51 + v52
	loc31 = v51
	v51 = loc31
	v51 = Mem0[v51:word32]
	loc32 = v51
	v51 = loc32
	v52 = 1<32>
	v51 = v51 | v52
	loc33 = v51
	v51 = 0<32>
	Mem0[0x00140048<p32>:word32] = v51
	v51 = 0x169<32>
	v52 = loc30
	v54 = loc33
	invoke_vii(v51, v52, v54)
	v51 = Mem0[0x00140048<p32>:word32]
	loc35 = v51
	v51 = 0<32>
	Mem0[0x00140048<p32>:word32] = v51
	v51 = loc35
	v52 = 1<32>
	v51 = v51 & v52
	loc36 = v51
	v51 = loc36
	v53 = v51 == 0<32>
	branch !v53 l000E6DE7
	// succ:  l000E6DE4 l000E6DE7
l000E6DE4:
	goto l000E6E26
	// succ:  l000E6E26
l000E6DE7:
	// succ:  l000E6DE8
l000E6DE8:
	v51 = 0<32>
	v51 = ___cxa_find_matching_catch_3(v51)
	loc37 = v51
	v51 = Mem0[0x00140094<p32>:word32]
	loc38 = v51
	v51 = loc37
	v51 = ___cxa_begin_catch(v51)
	v51 = 0<32>
	Mem0[0x00140048<p32>:word32] = v51
	v51 = 0x16C<32>
	invoke_v(v51)
	v51 = Mem0[0x00140048<p32>:word32]
	loc39 = v51
	v51 = 0<32>
	Mem0[0x00140048<p32>:word32] = v51
	v51 = loc39
	v52 = 1<32>
	v51 = v51 & v52
	loc40 = v51
	v51 = loc40
	branch !v51 l000E6E22
	// succ:  l000E6E13 l000E6E22
l000E6E13:
	v51 = 0<32>
	v51 = ___cxa_find_matching_catch_3(v51)
	loc41 = v51
	v51 = Mem0[0x00140094<p32>:word32]
	loc42 = v51
	v51 = loc41
	fn000D0E65(v51)
	// succ:  l000E6E22
l000E6E22:
	// succ:  l000E6E23
l000E6E23:
	// succ:  l000E6E24
l000E6E24:
	// succ:  l000E6E25
l000E6E25:
	// succ:  l000E6E26
l000E6E26:
	// succ:  l000E6E26
l000E6E26:
	return
	// succ:  fn000E6C85_exit
l000E6E28:
	return
	// succ:  fn000E6C85_exit
fn000E6C85_exit:


// fn000E6E2A
// Return size: 0
word32 fn000E6E2A(word32 arg0, word32 arg1)
fn000E6E2A_entry:
	// succ:  l000E6E2A
l000E6E2A:
	v85 = Mem0[0x00140030<p32>:word32]
	loc84 = v85
	v85 = Mem0[0x00140030<p32>:word32]
	v86 = 0x20<32>
	v85 = v85 + v86
	Mem0[0x00140030<p32>:word32] = v85
	v85 = Mem0[0x00140030<p32>:word32]
	v86 = Mem0[0x00140034<p32>:word32]
	v87 = v85 >= v86
	branch !v87 l000E6E43
	// succ:  l000E6E3E l000E6E43
l000E6E3E:
	v85 = 0x20<32>
	abortStackOverflow(v85)
	// succ:  l000E6E43
l000E6E43:
	v85 = loc84
	v86 = 0x18<32>
	v85 = v85 + v86
	loc4 = v85
	v85 = loc84
	v86 = 0x14<32>
	v85 = v85 + v86
	loc18 = v85
	v85 = loc84
	v86 = 0x10<32>
	v85 = v85 + v86
	loc29 = v85
	v85 = loc84
	v86 = 8<32>
	v85 = v85 + v86
	loc40 = v85
	v85 = loc84
	loc51 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = 0x166<32>
	v86 = loc40
	v88 = arg0
	invoke_vii(v85, v86, v88)
	v85 = Mem0[0x00140048<p32>:word32]
	loc62 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc62
	v86 = 1<32>
	v85 = v85 & v86
	loc73 = v85
	// succ:  l000E6E7F
l000E6E7F:
	v85 = loc73
	branch !v85 l000E6EA0
	// succ:  l000E6E85 l000E6EA0
l000E6E85:
	v85 = 0<32>
	v85 = ___cxa_find_matching_catch_3(v85)
	loc60 = v85
	v85 = Mem0[0x00140094<p32>:word32]
	loc61 = v85
	v85 = loc60
	loc3 = v85
	v85 = arg0
	loc5 = v85
	v85 = arg0
	loc7 = v85
	v85 = 0x13<32>
	loc83 = v85
	goto l000E710E
	// succ:  l000E710E
l000E6EA0:
	v85 = loc40
	v89 = Mem0[v85:int8]
	v85 = CONVERT(v89, int8, word32)
	loc80 = v85
	v85 = loc80
	v86 = 0x18<32>
	v85 = v85 << v86
	v86 = 0x18<32>
	v85 = v85 >> v86
	v86 = 0<32>
	v87 = v85 == v86
	loc81 = v87
	// succ:  l000E6EB4
l000E6EB4:
	v85 = loc81
	v87 = v85 == 0<32>
	branch !v87 l000E7108
	// succ:  l000E6EBB l000E7108
l000E6EBB:
	v85 = arg0
	v85 = Mem0[v85:word32]
	loc8 = v85
	v85 = loc8
	v86 = 0xFFFFFFF4<32>
	v85 = v85 + v86
	loc9 = v85
	v85 = loc9
	v85 = Mem0[v85:word32]
	loc10 = v85
	v85 = arg0
	v86 = loc10
	v85 = v85 + v86
	loc11 = v85
	v85 = loc11
	v85 = fn000E64CA(v85)
	loc12 = v85
	v85 = loc51
	v86 = loc12
	Mem0[v85:word32] = v86
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = 0x164<32>
	v86 = loc51
	v88 = 0x4CA8<32>
	v85 = invoke_iii(v85, v86, v88)
	loc13 = v85
	v85 = Mem0[0x00140048<p32>:word32]
	loc14 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc14
	v86 = 1<32>
	v85 = v85 & v86
	loc15 = v85
	v85 = loc15
	branch !v85 l000E6F1D
	// succ:  l000E6F09 l000E6F1D
l000E6F09:
	v85 = 0<32>
	v85 = ___cxa_find_matching_catch_3(v85)
	loc63 = v85
	v85 = Mem0[0x00140094<p32>:word32]
	loc64 = v85
	v85 = loc51
	fn0011B3FB(v85)
	v85 = loc63
	loc2 = v85
	goto l000E70EF
	// succ:  l000E70EF
l000E6F1D:
	v85 = loc51
	fn0011B3FB(v85)
	v85 = arg0
	v85 = Mem0[v85:word32]
	loc16 = v85
	v85 = loc16
	v86 = 0xFFFFFFF4<32>
	v85 = v85 + v86
	loc17 = v85
	v85 = loc17
	v85 = Mem0[v85:word32]
	loc19 = v85
	v85 = arg0
	v86 = loc19
	v85 = v85 + v86
	loc20 = v85
	v85 = loc20
	v86 = 0x18<32>
	v85 = v85 + v86
	loc21 = v85
	v85 = loc21
	v85 = Mem0[v85:word32]
	loc22 = v85
	v85 = loc20
	v86 = 0x4C<32>
	v85 = v85 + v86
	loc23 = v85
	v85 = loc23
	v85 = Mem0[v85:word32]
	loc24 = v85
	v85 = loc24
	v86 = 0xFFFFFFFF<32>
	v87 = v85 == v86
	loc25 = v87
	// succ:  l000E6F62
l000E6F62:
	v85 = loc25
	branch !v85 l000E700C
	// succ:  l000E6F68 l000E700C
l000E6F68:
	v85 = loc20
	v85 = fn000E64CA(v85)
	loc26 = v85
	v85 = loc29
	v86 = loc26
	Mem0[v85:word32] = v86
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = 0x164<32>
	v86 = loc29
	v88 = 0x4C70<32>
	v85 = invoke_iii(v85, v86, v88)
	loc27 = v85
	v85 = Mem0[0x00140048<p32>:word32]
	loc28 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc28
	v86 = 1<32>
	v85 = v85 & v86
	loc30 = v85
	v85 = loc30
	v87 = v85 == 0<32>
	branch !v87 l000E6FF8
	// succ:  l000E6F9B l000E6FF8
l000E6F9B:
	v85 = loc27
	v85 = Mem0[v85:word32]
	loc31 = v85
	v85 = loc31
	v86 = 0x1C<32>
	v85 = v85 + v86
	loc32 = v85
	v85 = loc32
	v85 = Mem0[v85:word32]
	loc33 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc33
	v86 = loc27
	v88 = 0x20<32>
	v85 = invoke_iii(v85, v86, v88)
	loc34 = v85
	v85 = Mem0[0x00140048<p32>:word32]
	loc35 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc35
	v86 = 1<32>
	v85 = v85 & v86
	loc36 = v85
	v85 = loc36
	v87 = v85 == 0<32>
	branch !v87 l000E6FF7
	// succ:  l000E6FD2 l000E6FF7
l000E6FD2:
	v85 = loc29
	fn0011B3FB(v85)
	v85 = loc34
	v86 = 0x18<32>
	v85 = v85 << v86
	v86 = 0x18<32>
	v85 = v85 >> v86
	loc39 = v85
	v85 = loc23
	v86 = loc39
	Mem0[v85:word32] = v86
	v85 = loc20
	loc6 = v85
	v85 = loc39
	loc42 = v85
	v85 = 0xA<32>
	loc83 = v85
	goto l000E7019
	// succ:  l000E7019
l000E6FF7:
	// succ:  l000E6FF8
l000E6FF8:
	v85 = 0<32>
	v85 = ___cxa_find_matching_catch_3(v85)
	loc37 = v85
	v85 = Mem0[0x00140094<p32>:word32]
	loc38 = v85
	v85 = loc29
	fn0011B3FB(v85)
	v85 = loc37
	loc82 = v85
	goto l000E7018
	// succ:  l000E7018
l000E700C:
	v85 = loc20
	loc6 = v85
	v85 = loc24
	loc42 = v85
	v85 = 0xA<32>
	loc83 = v85
	// succ:  l000E7018
l000E7018:
	// succ:  l000E7019
l000E7019:
	v85 = loc83
	v86 = 0xA<32>
	v87 = v85 == v86
	branch !v87 l000E70EB
	// succ:  l000E7021 l000E70EB
l000E7021:
	v85 = loc42
	v86 = 0xFF<32>
	v85 = v85 & v86
	loc41 = v85
	v85 = loc13
	v85 = Mem0[v85:word32]
	loc43 = v85
	v85 = loc43
	v86 = 0x10<32>
	v85 = v85 + v86
	loc44 = v85
	v85 = loc44
	v85 = Mem0[v85:word32]
	loc45 = v85
	v85 = loc18
	v86 = loc22
	Mem0[v85:word32] = v86
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc4
	v86 = loc18
	v86 = Mem0[v86:word32]
	Mem0[v85:word32] = v86
	v85 = loc45
	v86 = loc13
	v88 = loc4
	v90 = loc6
	v91 = loc41
	v92 = arg1
	v85 = invoke_iiiiii(v85, v86, v88, v90, v91, v92)
	loc46 = v85
	v85 = Mem0[0x00140048<p32>:word32]
	loc47 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc47
	v86 = 1<32>
	v85 = v85 & v86
	loc48 = v85
	v85 = loc48
	v87 = v85 == 0<32>
	branch !v87 l000E70DC
	// succ:  l000E7077 l000E70DC
l000E7077:
	v85 = loc46
	v86 = 0<32>
	v87 = v85 == v86
	loc49 = v87
	v85 = loc49
	v87 = v85 == 0<32>
	branch !v87 l000E7086
	// succ:  l000E7083 l000E7086
l000E7083:
	goto l000E7108
	// succ:  l000E7108
l000E7086:
	v85 = arg0
	v85 = Mem0[v85:word32]
	loc50 = v85
	v85 = loc50
	v86 = 0xFFFFFFF4<32>
	v85 = v85 + v86
	loc52 = v85
	v85 = loc52
	v85 = Mem0[v85:word32]
	loc53 = v85
	v85 = arg0
	v86 = loc53
	v85 = v85 + v86
	loc54 = v85
	v85 = loc54
	v86 = 0x10<32>
	v85 = v85 + v86
	loc55 = v85
	v85 = loc55
	v85 = Mem0[v85:word32]
	loc56 = v85
	v85 = loc56
	v86 = 5<32>
	v85 = v85 | v86
	loc57 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = 0x169<32>
	v86 = loc54
	v88 = loc57
	invoke_vii(v85, v86, v88)
	v85 = Mem0[0x00140048<p32>:word32]
	loc58 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc58
	v86 = 1<32>
	v85 = v85 & v86
	loc59 = v85
	v85 = loc59
	v87 = v85 == 0<32>
	branch !v87 l000E70DB
	// succ:  l000E70D8 l000E70DB
l000E70D8:
	goto l000E7108
	// succ:  l000E7108
l000E70DB:
	// succ:  l000E70DC
l000E70DC:
	v85 = 0<32>
	v85 = ___cxa_find_matching_catch_3(v85)
	loc65 = v85
	v85 = Mem0[0x00140094<p32>:word32]
	loc66 = v85
	v85 = loc65
	loc82 = v85
	// succ:  l000E70EB
l000E70EB:
	v85 = loc82
	loc2 = v85
	// succ:  l000E70EF
l000E70EF:
	v85 = loc40
	fn000E680D(v85)
	v85 = loc2
	loc3 = v85
	v85 = arg0
	loc5 = v85
	v85 = arg0
	loc7 = v85
	v85 = 0x13<32>
	loc83 = v85
	goto l000E710F
	// succ:  l000E710F
l000E7108:
	// succ:  l000E7108
l000E7108:
	v85 = loc40
	fn000E680D(v85)
	// succ:  l000E710E
l000E710E:
	// succ:  l000E710F
l000E710F:
	v85 = loc83
	v86 = 0x13<32>
	v87 = v85 == v86
	branch !v87 l000E7197
	// succ:  l000E7119 l000E7197
l000E7119:
	v85 = loc3
	v85 = ___cxa_begin_catch(v85)
	v85 = loc7
	v85 = Mem0[v85:word32]
	loc67 = v85
	v85 = loc67
	v86 = 0xFFFFFFF4<32>
	v85 = v85 + v86
	loc68 = v85
	v85 = loc68
	v85 = Mem0[v85:word32]
	loc69 = v85
	v85 = loc5
	v86 = loc69
	v85 = v85 + v86
	loc70 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = 0x16B<32>
	v86 = loc70
	invoke_vi(v85, v86)
	v85 = Mem0[0x00140048<p32>:word32]
	loc71 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc71
	v86 = 1<32>
	v85 = v85 & v86
	loc72 = v85
	v85 = loc72
	v87 = v85 == 0<32>
	branch !v87 l000E715E
	// succ:  l000E7159 l000E715E
l000E7159:
	___cxa_end_catch()
	goto l000E7197
	// succ:  l000E7197
l000E715E:
	v85 = ___cxa_find_matching_catch_2()
	loc74 = v85
	v85 = Mem0[0x00140094<p32>:word32]
	loc75 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = 0x16C<32>
	invoke_v(v85)
	v85 = Mem0[0x00140048<p32>:word32]
	loc76 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc76
	v86 = 1<32>
	v85 = v85 & v86
	loc77 = v85
	v85 = loc77
	branch !v85 l000E7191
	// succ:  l000E7182 l000E7191
l000E7182:
	v85 = 0<32>
	v85 = ___cxa_find_matching_catch_3(v85)
	loc78 = v85
	v85 = Mem0[0x00140094<p32>:word32]
	loc79 = v85
	v85 = loc78
	fn000D0E65(v85)
	goto l000E7195
	// succ:  l000E7195
l000E7191:
	v85 = loc74
	___resumeException(v85)
	// succ:  l000E7195
l000E7195:
	// succ:  l000E7197
l000E7197:
	// succ:  l000E7197
l000E7197:
	v85 = loc84
	Mem0[0x00140030<p32>:word32] = v85
	v85 = arg0
	return v85
	// succ:  fn000E6E2A_exit
l000E719F:
	return v85
	// succ:  fn000E6E2A_exit
fn000E6E2A_exit:


// fn000E71A1
// Return size: 0
word32 fn000E71A1(word32 arg0, word32 arg1)
fn000E71A1_entry:
	// succ:  l000E71A1
l000E71A1:
	v60 = Mem0[0x00140030<p32>:word32]
	loc59 = v60
	v60 = Mem0[0x00140030<p32>:word32]
	v61 = 0x10<32>
	v60 = v60 + v61
	Mem0[0x00140030<p32>:word32] = v60
	v60 = Mem0[0x00140030<p32>:word32]
	v61 = Mem0[0x00140034<p32>:word32]
	v62 = v60 >= v61
	branch !v62 l000E71BA
	// succ:  l000E71B5 l000E71BA
l000E71B5:
	v60 = 0x10<32>
	abortStackOverflow(v60)
	// succ:  l000E71BA
l000E71BA:
	v60 = loc59
	loc15 = v60
	v60 = 0<32>
	Mem0[0x00140048<p32>:word32] = v60
	v60 = 0x166<32>
	v61 = loc15
	v63 = arg0
	invoke_vii(v60, v61, v63)
	v60 = Mem0[0x00140048<p32>:word32]
	loc26 = v60
	v60 = 0<32>
	Mem0[0x00140048<p32>:word32] = v60
	v60 = loc26
	v61 = 1<32>
	v60 = v60 & v61
	loc37 = v60
	// succ:  l000E71DA
l000E71DA:
	v60 = loc37
	branch !v60 l000E71FB
	// succ:  l000E71E0 l000E71FB
l000E71E0:
	v60 = 0<32>
	v60 = ___cxa_find_matching_catch_3(v60)
	loc36 = v60
	v60 = Mem0[0x00140094<p32>:word32]
	loc38 = v60
	v60 = loc36
	loc2 = v60
	v60 = arg0
	loc3 = v60
	v60 = arg0
	loc4 = v60
	v60 = 0xC<32>
	loc58 = v60
	goto l000E7371
	// succ:  l000E7371
l000E71FB:
	v60 = loc15
	v64 = Mem0[v60:int8]
	v60 = CONVERT(v64, int8, word32)
	loc48 = v60
	v60 = loc48
	v61 = 0x18<32>
	v60 = v60 << v61
	v61 = 0x18<32>
	v60 = v60 >> v61
	v61 = 0<32>
	v62 = v60 == v61
	loc54 = v62
	// succ:  l000E720F
l000E720F:
	v60 = loc54
	v62 = v60 == 0<32>
	branch !v62 l000E736B
	// succ:  l000E7216 l000E736B
l000E7216:
	v60 = arg0
	v60 = Mem0[v60:word32]
	loc55 = v60
	v60 = loc55
	v61 = 0xFFFFFFF4<32>
	v60 = v60 + v61
	loc56 = v60
	v60 = loc56
	v60 = Mem0[v60:word32]
	loc57 = v60
	v60 = arg0
	v61 = loc57
	v60 = v60 + v61
	loc5 = v60
	v60 = loc5
	v61 = 0x18<32>
	v60 = v60 + v61
	loc6 = v60
	v60 = loc6
	v60 = Mem0[v60:word32]
	loc7 = v60
	v60 = loc7
	loc8 = v60
	v60 = loc7
	v61 = 0<32>
	v62 = v60 == v61
	loc9 = v62
	v60 = loc9
	branch !v60 l000E7254
	// succ:  l000E724F l000E7254
l000E724F:
	v60 = 8<32>
	loc58 = v60
	goto l000E72EB
	// succ:  l000E72EB
l000E7254:
	v60 = loc8
	v61 = 0x18<32>
	v60 = v60 + v61
	loc10 = v60
	v60 = loc10
	v60 = Mem0[v60:word32]
	loc11 = v60
	v60 = loc8
	v61 = 0x1C<32>
	v60 = v60 + v61
	loc12 = v60
	v60 = loc12
	v60 = Mem0[v60:word32]
	loc13 = v60
	v60 = loc11
	v61 = loc13
	v62 = v60 == v61
	loc14 = v62
	v60 = loc14
	v62 = v60 == 0<32>
	branch !v62 l000E7294
	// succ:  l000E727C l000E7294
l000E727C:
	v60 = loc11
	v61 = 1<32>
	v60 = v60 + v61
	loc16 = v60
	v60 = loc10
	v61 = loc16
	Mem0[v60:word32] = v61
	v60 = loc11
	v61 = arg1
	v65 = SLICE(v61, byte, 0)
	Mem0[v60:byte] = v65
	goto l000E736B
	// succ:  l000E736B
l000E7294:
	v60 = loc7
	loc17 = v60
	v60 = loc17
	v60 = Mem0[v60:word32]
	loc18 = v60
	v60 = loc18
	v61 = 0x34<32>
	v60 = v60 + v61
	loc19 = v60
	v60 = loc19
	v60 = Mem0[v60:word32]
	loc20 = v60
	v60 = arg1
	v61 = 0xFF<32>
	v60 = v60 & v61
	loc21 = v60
	v60 = 0<32>
	Mem0[0x00140048<p32>:word32] = v60
	v60 = loc20
	v61 = loc8
	v63 = loc21
	v60 = invoke_iii(v60, v61, v63)
	loc22 = v60
	v60 = Mem0[0x00140048<p32>:word32]
	loc23 = v60
	v60 = 0<32>
	Mem0[0x00140048<p32>:word32] = v60
	v60 = loc23
	v61 = 1<32>
	v60 = v60 & v61
	loc24 = v60
	v60 = loc24
	v62 = v60 == 0<32>
	branch !v62 l000E72EB
	// succ:  l000E72D7 l000E72EB
l000E72D7:
	v60 = loc22
	v61 = 0xFFFFFFFF<32>
	v62 = v60 == v61
	loc25 = v62
	v60 = loc25
	branch !v60 l000E72E7
	// succ:  l000E72E2 l000E72E7
l000E72E2:
	v60 = 8<32>
	loc58 = v60
	goto l000E72E9
	// succ:  l000E72E9
l000E72E7:
	goto l000E736B
	// succ:  l000E736B
l000E72E9:
	// succ:  l000E72EB
l000E72EB:
	// succ:  l000E72EB
l000E72EB:
	v60 = loc58
	v61 = 8<32>
	v62 = v60 == v61
	branch !v62 l000E7349
	// succ:  l000E72F3 l000E7349
l000E72F3:
	v60 = arg0
	v60 = Mem0[v60:word32]
	loc27 = v60
	v60 = loc27
	v61 = 0xFFFFFFF4<32>
	v60 = v60 + v61
	loc28 = v60
	v60 = loc28
	v60 = Mem0[v60:word32]
	loc29 = v60
	v60 = arg0
	v61 = loc29
	v60 = v60 + v61
	loc30 = v60
	v60 = loc30
	v61 = 0x10<32>
	v60 = v60 + v61
	loc31 = v60
	v60 = loc31
	v60 = Mem0[v60:word32]
	loc32 = v60
	v60 = loc32
	v61 = 1<32>
	v60 = v60 | v61
	loc33 = v60
	v60 = 0<32>
	Mem0[0x00140048<p32>:word32] = v60
	v60 = 0x169<32>
	v61 = loc30
	v63 = loc33
	invoke_vii(v60, v61, v63)
	v60 = Mem0[0x00140048<p32>:word32]
	loc34 = v60
	v60 = 0<32>
	Mem0[0x00140048<p32>:word32] = v60
	v60 = loc34
	v61 = 1<32>
	v60 = v60 & v61
	loc35 = v60
	v60 = loc35
	v62 = v60 == 0<32>
	branch !v62 l000E7348
	// succ:  l000E7345 l000E7348
l000E7345:
	goto l000E736B
	// succ:  l000E736B
l000E7348:
	// succ:  l000E7349
l000E7349:
	v60 = 0<32>
	v60 = ___cxa_find_matching_catch_3(v60)
	loc39 = v60
	v60 = Mem0[0x00140094<p32>:word32]
	loc40 = v60
	v60 = loc15
	fn000E680D(v60)
	v60 = loc39
	loc2 = v60
	v60 = arg0
	loc3 = v60
	v60 = arg0
	loc4 = v60
	v60 = 0xC<32>
	loc58 = v60
	goto l000E7372
	// succ:  l000E7372
l000E736B:
	// succ:  l000E736B
l000E736B:
	v60 = loc15
	fn000E680D(v60)
	// succ:  l000E7371
l000E7371:
	// succ:  l000E7372
l000E7372:
	v60 = loc58
	v61 = 0xC<32>
	v62 = v60 == v61
	branch !v62 l000E73FA
	// succ:  l000E737C l000E73FA
l000E737C:
	v60 = loc2
	v60 = ___cxa_begin_catch(v60)
	v60 = loc4
	v60 = Mem0[v60:word32]
	loc41 = v60
	v60 = loc41
	v61 = 0xFFFFFFF4<32>
	v60 = v60 + v61
	loc42 = v60
	v60 = loc42
	v60 = Mem0[v60:word32]
	loc43 = v60
	v60 = loc3
	v61 = loc43
	v60 = v60 + v61
	loc44 = v60
	v60 = 0<32>
	Mem0[0x00140048<p32>:word32] = v60
	v60 = 0x16B<32>
	v61 = loc44
	invoke_vi(v60, v61)
	v60 = Mem0[0x00140048<p32>:word32]
	loc45 = v60
	v60 = 0<32>
	Mem0[0x00140048<p32>:word32] = v60
	v60 = loc45
	v61 = 1<32>
	v60 = v60 & v61
	loc46 = v60
	v60 = loc46
	v62 = v60 == 0<32>
	branch !v62 l000E73C1
	// succ:  l000E73BC l000E73C1
l000E73BC:
	___cxa_end_catch()
	goto l000E73FA
	// succ:  l000E73FA
l000E73C1:
	v60 = ___cxa_find_matching_catch_2()
	loc47 = v60
	v60 = Mem0[0x00140094<p32>:word32]
	loc49 = v60
	v60 = 0<32>
	Mem0[0x00140048<p32>:word32] = v60
	v60 = 0x16C<32>
	invoke_v(v60)
	v60 = Mem0[0x00140048<p32>:word32]
	loc50 = v60
	v60 = 0<32>
	Mem0[0x00140048<p32>:word32] = v60
	v60 = loc50
	v61 = 1<32>
	v60 = v60 & v61
	loc51 = v60
	v60 = loc51
	branch !v60 l000E73F4
	// succ:  l000E73E5 l000E73F4
l000E73E5:
	v60 = 0<32>
	v60 = ___cxa_find_matching_catch_3(v60)
	loc52 = v60
	v60 = Mem0[0x00140094<p32>:word32]
	loc53 = v60
	v60 = loc52
	fn000D0E65(v60)
	goto l000E73F8
	// succ:  l000E73F8
l000E73F4:
	v60 = loc47
	___resumeException(v60)
	// succ:  l000E73F8
l000E73F8:
	// succ:  l000E73FA
l000E73FA:
	// succ:  l000E73FA
l000E73FA:
	v60 = loc59
	Mem0[0x00140030<p32>:word32] = v60
	v60 = arg0
	return v60
	// succ:  fn000E71A1_exit
l000E7402:
	return v60
	// succ:  fn000E71A1_exit
fn000E71A1_exit:


// __GLOBAL__I_000101
// Return size: 0
void __GLOBAL__I_000101()
__GLOBAL__I_000101_entry:
	// succ:  l000E7404
l000E7404:
	v4 = Mem0[0x00140030<p32>:word32]
	loc1 = v4
	v4 = 0<32>
	fn000E7427(v4)
	v4 = 0x175<32>
	v5 = 0x5C10<32>
	v6 = Mem0[0x00140044<p32>:word32]
	v4 = ___cxa_atexit(v4, v5, v6)
	return
	// succ:  __GLOBAL__I_000101_exit
l000E741C:
	return
	// succ:  __GLOBAL__I_000101_exit
__GLOBAL__I_000101_exit:


// __GLOBAL__sub_I_iostream_cpp
// Return size: 0
void __GLOBAL__sub_I_iostream_cpp()
__GLOBAL__sub_I_iostream_cpp_entry:
	// succ:  l000E741E
l000E741E:
	v4 = Mem0[0x00140030<p32>:word32]
	loc1 = v4
	return
	// succ:  __GLOBAL__sub_I_iostream_cpp_exit
l000E7425:
	return
	// succ:  __GLOBAL__sub_I_iostream_cpp_exit
__GLOBAL__sub_I_iostream_cpp_exit:


// fn000E7427
// Return size: 0
void fn000E7427(word32 arg0)
fn000E7427_entry:
	// succ:  l000E7427
l000E7427:
	v85 = Mem0[0x00140030<p32>:word32]
	loc83 = v85
	v85 = 0xB88<32>
	v85 = Mem0[v85:word32]
	loc1 = v85
	v85 = 0x4B00<32>
	v86 = loc1
	v87 = 0x4B38<32>
	fn000E79F6(v85, v86, v87)
	v85 = 0x4858<32>
	v86 = 0x19B4<32>
	Mem0[v85:word32] = v86
	v85 = 0x4860<32>
	v86 = 0x19C8<32>
	Mem0[v85:word32] = v86
	v85 = 0x485C<32>
	v86 = 0<32>
	Mem0[v85:word32] = v86
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = 0x176<32>
	v86 = 0x4860<32>
	v87 = 0x4B00<32>
	invoke_vii(v85, v86, v87)
	v85 = Mem0[0x00140048<p32>:word32]
	loc12 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc12
	v86 = 1<32>
	v85 = v85 & v86
	loc23 = v85
	v85 = loc23
	branch !v85 l000E7497
	// succ:  l000E7483 l000E7497
l000E7483:
	v85 = ___cxa_find_matching_catch_2()
	loc34 = v85
	v85 = Mem0[0x00140094<p32>:word32]
	loc45 = v85
	v85 = 0x4860<32>
	fn000E5815(v85)
	v85 = loc34
	___resumeException(v85)
	// succ:  l000E7497
l000E7497:
	v85 = 0x48A8<32>
	v86 = 0<32>
	Mem0[v85:word32] = v86
	v85 = 0x48AC<32>
	v86 = 0xFFFFFFFF<32>
	Mem0[v85:word32] = v86
	v85 = 0x4B40<32>
	v86 = loc1
	v87 = 0x4B78<32>
	fn000E7ABF(v85, v86, v87)
	v85 = 0x48B0<32>
	v86 = 0x19DC<32>
	Mem0[v85:word32] = v86
	v85 = 0x48B8<32>
	v86 = 0x19F0<32>
	Mem0[v85:word32] = v86
	v85 = 0x48B4<32>
	v86 = 0<32>
	Mem0[v85:word32] = v86
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = 0x176<32>
	v86 = 0x48B8<32>
	v87 = 0x4B40<32>
	invoke_vii(v85, v86, v87)
	v85 = Mem0[0x00140048<p32>:word32]
	loc56 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc56
	v86 = 1<32>
	v85 = v85 & v86
	loc67 = v85
	v85 = loc67
	branch !v85 l000E750B
	// succ:  l000E74F7 l000E750B
l000E74F7:
	v85 = ___cxa_find_matching_catch_2()
	loc78 = v85
	v85 = Mem0[0x00140094<p32>:word32]
	loc81 = v85
	v85 = 0x48B8<32>
	fn000E595D(v85)
	v85 = loc78
	___resumeException(v85)
	// succ:  l000E750B
l000E750B:
	v85 = 0x4900<32>
	v86 = 0<32>
	Mem0[v85:word32] = v86
	v85 = 0x4904<32>
	v86 = 0xFFFFFFFF<32>
	Mem0[v85:word32] = v86
	v85 = 0xBFC<32>
	v85 = Mem0[v85:word32]
	loc2 = v85
	v85 = 0x4B80<32>
	v86 = loc2
	v87 = 0x4BB0<32>
	fn000E7B88(v85, v86, v87)
	v85 = 0x4908<32>
	v86 = 0x1A04<32>
	Mem0[v85:word32] = v86
	v85 = 0x490C<32>
	v86 = 0x1A18<32>
	Mem0[v85:word32] = v86
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = 0x176<32>
	v86 = 0x490C<32>
	v87 = 0x4B80<32>
	invoke_vii(v85, v86, v87)
	v85 = Mem0[0x00140048<p32>:word32]
	loc3 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc3
	v86 = 1<32>
	v85 = v85 & v86
	loc4 = v85
	v85 = loc4
	branch !v85 l000E757E
	// succ:  l000E756A l000E757E
l000E756A:
	v85 = ___cxa_find_matching_catch_2()
	loc5 = v85
	v85 = Mem0[0x00140094<p32>:word32]
	loc6 = v85
	v85 = 0x490C<32>
	fn000E5815(v85)
	v85 = loc5
	___resumeException(v85)
	// succ:  l000E757E
l000E757E:
	v85 = 0x4954<32>
	v86 = 0<32>
	Mem0[v85:word32] = v86
	v85 = 0x4958<32>
	v86 = 0xFFFFFFFF<32>
	Mem0[v85:word32] = v86
	v85 = 0x4BB8<32>
	v86 = loc2
	v87 = 0x4BE8<32>
	fn000E7C82(v85, v86, v87)
	v85 = 0x495C<32>
	v86 = 0x1A2C<32>
	Mem0[v85:word32] = v86
	v85 = 0x4960<32>
	v86 = 0x1A40<32>
	Mem0[v85:word32] = v86
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = 0x176<32>
	v86 = 0x4960<32>
	v87 = 0x4BB8<32>
	invoke_vii(v85, v86, v87)
	v85 = Mem0[0x00140048<p32>:word32]
	loc7 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc7
	v86 = 1<32>
	v85 = v85 & v86
	loc8 = v85
	v85 = loc8
	branch !v85 l000E75E9
	// succ:  l000E75D5 l000E75E9
l000E75D5:
	v85 = ___cxa_find_matching_catch_2()
	loc9 = v85
	v85 = Mem0[0x00140094<p32>:word32]
	loc10 = v85
	v85 = 0x4960<32>
	fn000E595D(v85)
	v85 = loc9
	___resumeException(v85)
	// succ:  l000E75E9
l000E75E9:
	v85 = 0x49A8<32>
	v86 = 0<32>
	Mem0[v85:word32] = v86
	v85 = 0x49AC<32>
	v86 = 0xFFFFFFFF<32>
	Mem0[v85:word32] = v86
	v85 = 0xB14<32>
	v85 = Mem0[v85:word32]
	loc11 = v85
	v85 = 0x4BF0<32>
	v86 = loc11
	v87 = 0x4C20<32>
	fn000E7B88(v85, v86, v87)
	v85 = 0x49B0<32>
	v86 = 0x1A04<32>
	Mem0[v85:word32] = v86
	v85 = 0x49B4<32>
	v86 = 0x1A18<32>
	Mem0[v85:word32] = v86
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = 0x176<32>
	v86 = 0x49B4<32>
	v87 = 0x4BF0<32>
	invoke_vii(v85, v86, v87)
	v85 = Mem0[0x00140048<p32>:word32]
	loc13 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc13
	v86 = 1<32>
	v85 = v85 & v86
	loc14 = v85
	v85 = loc14
	branch !v85 l000E765C
	// succ:  l000E7648 l000E765C
l000E7648:
	v85 = ___cxa_find_matching_catch_2()
	loc15 = v85
	v85 = Mem0[0x00140094<p32>:word32]
	loc16 = v85
	v85 = 0x49B4<32>
	fn000E5815(v85)
	v85 = loc15
	___resumeException(v85)
	// succ:  l000E765C
l000E765C:
	v85 = 0x49FC<32>
	v86 = 0<32>
	Mem0[v85:word32] = v86
	v85 = 0x4A00<32>
	v86 = 0xFFFFFFFF<32>
	Mem0[v85:word32] = v86
	v85 = 0x49B0<32>
	v85 = Mem0[v85:word32]
	loc17 = v85
	v85 = loc17
	v86 = 0xFFFFFFF4<32>
	v85 = v85 + v86
	loc18 = v85
	v85 = loc18
	v85 = Mem0[v85:word32]
	loc19 = v85
	v85 = 0x49B0<32>
	v86 = loc19
	v85 = v85 + v86
	loc20 = v85
	v85 = loc20
	v86 = 0x18<32>
	v85 = v85 + v86
	loc21 = v85
	v85 = loc21
	v85 = Mem0[v85:word32]
	loc22 = v85
	v85 = 0x4A58<32>
	v86 = 0x1A04<32>
	Mem0[v85:word32] = v86
	v85 = 0x4A5C<32>
	v86 = 0x1A18<32>
	Mem0[v85:word32] = v86
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = 0x176<32>
	v86 = 0x4A5C<32>
	v87 = loc22
	invoke_vii(v85, v86, v87)
	v85 = Mem0[0x00140048<p32>:word32]
	loc24 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc24
	v86 = 1<32>
	v85 = v85 & v86
	loc25 = v85
	v85 = loc25
	branch !v85 l000E76E6
	// succ:  l000E76D2 l000E76E6
l000E76D2:
	v85 = ___cxa_find_matching_catch_2()
	loc26 = v85
	v85 = Mem0[0x00140094<p32>:word32]
	loc27 = v85
	v85 = 0x4A5C<32>
	fn000E5815(v85)
	v85 = loc26
	___resumeException(v85)
	// succ:  l000E76E6
l000E76E6:
	v85 = 0x4AA4<32>
	v86 = 0<32>
	Mem0[v85:word32] = v86
	v85 = 0x4AA8<32>
	v86 = 0xFFFFFFFF<32>
	Mem0[v85:word32] = v86
	v85 = 0x4C28<32>
	v86 = loc11
	v87 = 0x4C58<32>
	fn000E7C82(v85, v86, v87)
	v85 = 0x4A04<32>
	v86 = 0x1A2C<32>
	Mem0[v85:word32] = v86
	v85 = 0x4A08<32>
	v86 = 0x1A40<32>
	Mem0[v85:word32] = v86
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = 0x176<32>
	v86 = 0x4A08<32>
	v87 = 0x4C28<32>
	invoke_vii(v85, v86, v87)
	v85 = Mem0[0x00140048<p32>:word32]
	loc28 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc28
	v86 = 1<32>
	v85 = v85 & v86
	loc29 = v85
	v85 = loc29
	branch !v85 l000E7751
	// succ:  l000E773D l000E7751
l000E773D:
	v85 = ___cxa_find_matching_catch_2()
	loc30 = v85
	v85 = Mem0[0x00140094<p32>:word32]
	loc31 = v85
	v85 = 0x4A08<32>
	fn000E595D(v85)
	v85 = loc30
	___resumeException(v85)
	// succ:  l000E7751
l000E7751:
	v85 = 0x4A50<32>
	v86 = 0<32>
	Mem0[v85:word32] = v86
	v85 = 0x4A54<32>
	v86 = 0xFFFFFFFF<32>
	Mem0[v85:word32] = v86
	v85 = 0x4A04<32>
	v85 = Mem0[v85:word32]
	loc32 = v85
	v85 = loc32
	v86 = 0xFFFFFFF4<32>
	v85 = v85 + v86
	loc33 = v85
	v85 = loc33
	v85 = Mem0[v85:word32]
	loc35 = v85
	v85 = 0x4A04<32>
	v86 = loc35
	v85 = v85 + v86
	loc36 = v85
	v85 = loc36
	v86 = 0x18<32>
	v85 = v85 + v86
	loc37 = v85
	v85 = loc37
	v85 = Mem0[v85:word32]
	loc38 = v85
	v85 = 0x4AAC<32>
	v86 = 0x1A2C<32>
	Mem0[v85:word32] = v86
	v85 = 0x4AB0<32>
	v86 = 0x1A40<32>
	Mem0[v85:word32] = v86
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = 0x176<32>
	v86 = 0x4AB0<32>
	v87 = loc38
	invoke_vii(v85, v86, v87)
	v85 = Mem0[0x00140048<p32>:word32]
	loc39 = v85
	v85 = 0<32>
	Mem0[0x00140048<p32>:word32] = v85
	v85 = loc39
	v86 = 1<32>
	v85 = v85 & v86
	loc40 = v85
	v85 = loc40
	branch !v85 l000E77DB
	// succ:  l000E77C7 l000E77DB
l000E77C7:
	v85 = ___cxa_find_matching_catch_2()
	loc41 = v85
	v85 = Mem0[0x00140094<p32>:word32]
	loc42 = v85
	v85 = 0x4AB0<32>
	fn000E595D(v85)
	v85 = loc41
	___resumeException(v85)
	goto l000E792E
	// succ:  l000E792E
l000E77DB:
	v85 = 0x4AF8<32>
	v86 = 0<32>
	Mem0[v85:word32] = v86
	v85 = 0x4AFC<32>
	v86 = 0xFFFFFFFF<32>
	Mem0[v85:word32] = v86
	v85 = 0x4858<32>
	v85 = Mem0[v85:word32]
	loc43 = v85
	v85 = loc43
	v86 = 0xFFFFFFF4<32>
	v85 = v85 + v86
	loc44 = v85
	v85 = loc44
	v85 = Mem0[v85:word32]
	loc46 = v85
	v85 = 0x4858<32>
	v86 = loc46
	v85 = v85 + v86
	loc47 = v85
	v85 = loc47
	v86 = 0x48<32>
	v85 = v85 + v86
	loc48 = v85
	v85 = loc48
	v86 = 0x4908<32>
	Mem0[v85:word32] = v86
	v85 = 0x48B0<32>
	v85 = Mem0[v85:word32]
	loc49 = v85
	v85 = loc49
	v86 = 0xFFFFFFF4<32>
	v85 = v85 + v86
	loc50 = v85
	v85 = loc50
	v85 = Mem0[v85:word32]
	loc51 = v85
	v85 = 0x48B0<32>
	v86 = loc51
	v85 = v85 + v86
	loc52 = v85
	v85 = loc52
	v86 = 0x48<32>
	v85 = v85 + v86
	loc53 = v85
	v85 = loc53
	v86 = 0x495C<32>
	Mem0[v85:word32] = v86
	v85 = 0x49B0<32>
	v85 = Mem0[v85:word32]
	loc54 = v85
	v85 = loc54
	v86 = 0xFFFFFFF4<32>
	v85 = v85 + v86
	loc55 = v85
	v85 = loc55
	v85 = Mem0[v85:word32]
	loc57 = v85
	v85 = 0x49B0<32>
	v86 = loc57
	v85 = v85 + v86
	loc58 = v85
	v85 = loc58
	v86 = 4<32>
	v85 = v85 + v86
	loc59 = v85
	v85 = loc59
	v85 = Mem0[v85:word32]
	loc60 = v85
	v85 = loc60
	v86 = 0x2000<32>
	v85 = v85 | v86
	loc61 = v85
	v85 = loc59
	v86 = loc61
	Mem0[v85:word32] = v86
	v85 = 0x4A04<32>
	v85 = Mem0[v85:word32]
	loc62 = v85
	v85 = loc62
	v86 = 0xFFFFFFF4<32>
	v85 = v85 + v86
	loc63 = v85
	v85 = loc63
	v85 = Mem0[v85:word32]
	loc64 = v85
	v85 = 0x4A04<32>
	v86 = loc64
	v85 = v85 + v86
	loc65 = v85
	v85 = loc65
	v86 = 4<32>
	v85 = v85 + v86
	loc66 = v85
	v85 = loc66
	v85 = Mem0[v85:word32]
	loc68 = v85
	v85 = loc68
	v86 = 0x2000<32>
	v85 = v85 | v86
	loc69 = v85
	v85 = loc66
	v86 = loc69
	Mem0[v85:word32] = v86
	v85 = 0x49B0<32>
	v85 = Mem0[v85:word32]
	loc70 = v85
	v85 = loc70
	v86 = 0xFFFFFFF4<32>
	v85 = v85 + v86
	loc71 = v85
	v85 = loc71
	v85 = Mem0[v85:word32]
	loc72 = v85
	v85 = 0x49B0<32>
	v86 = loc72
	v85 = v85 + v86
	loc73 = v85
	v85 = loc73
	v86 = 0x48<32>
	v85 = v85 + v86
	loc74 = v85
	v85 = loc74
	v86 = 0x4908<32>
	Mem0[v85:word32] = v86
	v85 = 0x4A04<32>
	v85 = Mem0[v85:word32]
	loc75 = v85
	v85 = loc75
	v86 = 0xFFFFFFF4<32>
	v85 = v85 + v86
	loc76 = v85
	v85 = loc76
	v85 = Mem0[v85:word32]
	loc77 = v85
	v85 = 0x4A04<32>
	v86 = loc77
	v85 = v85 + v86
	loc79 = v85
	v85 = loc79
	v86 = 0x48<32>
	v85 = v85 + v86
	loc80 = v85
	v85 = loc80
	v86 = 0x495C<32>
	Mem0[v85:word32] = v86
	return
	// succ:  fn000E7427_exit
l000E792E:
	// succ:  l000E792F
l000E792F:
	return
	// succ:  fn000E7427_exit
fn000E7427_exit:


// fn000E7931
// Return size: 0
void fn000E7931(word32 arg0)
fn000E7931_entry:
	// succ:  l000E7931
l000E7931:
	v17 = Mem0[0x00140030<p32>:word32]
	loc15 = v17
	v17 = 0<32>
	Mem0[0x00140048<p32>:word32] = v17
	v17 = 0x177<32>
	v18 = 0x4908<32>
	v17 = invoke_ii(v17, v18)
	v17 = Mem0[0x00140048<p32>:word32]
	loc2 = v17
	v17 = 0<32>
	Mem0[0x00140048<p32>:word32] = v17
	v17 = loc2
	v18 = 1<32>
	v17 = v17 & v18
	loc6 = v17
	v17 = loc6
	branch !v17 l000E795D
	// succ:  l000E7958 l000E795D
l000E7958:
	v17 = 6<32>
	loc14 = v17
	goto l000E79D9
	// succ:  l000E79D9
l000E795D:
	v17 = 0<32>
	Mem0[0x00140048<p32>:word32] = v17
	v17 = 0x178<32>
	v18 = 0x495C<32>
	v17 = invoke_ii(v17, v18)
	v17 = Mem0[0x00140048<p32>:word32]
	loc7 = v17
	v17 = 0<32>
	Mem0[0x00140048<p32>:word32] = v17
	v17 = loc7
	v18 = 1<32>
	v17 = v17 & v18
	loc8 = v17
	v17 = loc8
	branch !v17 l000E7983
	// succ:  l000E797E l000E7983
l000E797E:
	v17 = 6<32>
	loc14 = v17
	goto l000E79D8
	// succ:  l000E79D8
l000E7983:
	v17 = 0<32>
	Mem0[0x00140048<p32>:word32] = v17
	v17 = 0x177<32>
	v18 = 0x4A58<32>
	v17 = invoke_ii(v17, v18)
	v17 = Mem0[0x00140048<p32>:word32]
	loc9 = v17
	v17 = 0<32>
	Mem0[0x00140048<p32>:word32] = v17
	v17 = loc9
	v18 = 1<32>
	v17 = v17 & v18
	loc10 = v17
	v17 = loc10
	v19 = v17 == 0<32>
	branch !v19 l000E79CA
	// succ:  l000E79A5 l000E79CA
l000E79A5:
	v17 = 0<32>
	Mem0[0x00140048<p32>:word32] = v17
	v17 = 0x178<32>
	v18 = 0x4AAC<32>
	v17 = invoke_ii(v17, v18)
	v17 = Mem0[0x00140048<p32>:word32]
	loc11 = v17
	v17 = 0<32>
	Mem0[0x00140048<p32>:word32] = v17
	v17 = loc11
	v18 = 1<32>
	v17 = v17 & v18
	loc12 = v17
	v17 = loc12
	v19 = v17 == 0<32>
	branch !v19 l000E79C9
	// succ:  l000E79C7 l000E79C9
l000E79C7:
	return
	// succ:  fn000E7931_exit
l000E79C9:
	// succ:  l000E79CA
l000E79CA:
	v17 = 0<32>
	v17 = ___cxa_find_matching_catch_3(v17)
	loc4 = v17
	v17 = Mem0[0x00140094<p32>:word32]
	loc5 = v17
	v17 = loc4
	loc1 = v17
	// succ:  l000E79D8
l000E79D8:
	// succ:  l000E79D9
l000E79D9:
	v17 = loc14
	v18 = 6<32>
	v19 = v17 == v18
	branch !v19 l000E79F0
	// succ:  l000E79E1 l000E79F0
l000E79E1:
	v17 = 0<32>
	v17 = ___cxa_find_matching_catch_3(v17)
	loc13 = v17
	v17 = Mem0[0x00140094<p32>:word32]
	loc3 = v17
	v17 = loc13
	loc1 = v17
	// succ:  l000E79F0
l000E79F0:
	v17 = loc1
	fn000D0E65(v17)
	// succ:  l000E79F4
l000E79F4:
	return
	// succ:  fn000E7931_exit
fn000E7931_exit:


// fn000E79F6
// Return size: 0
void fn000E79F6(word32 arg0, word32 arg1, word32 arg2)
fn000E79F6_entry:
	// succ:  l000E79F6
l000E79F6:
	v16 = Mem0[0x00140030<p32>:word32]
	loc16 = v16
	v16 = Mem0[0x00140030<p32>:word32]
	v17 = 0x10<32>
	v16 = v16 + v17
	Mem0[0x00140030<p32>:word32] = v16
	v16 = Mem0[0x00140030<p32>:word32]
	v17 = Mem0[0x00140034<p32>:word32]
	v18 = v16 >= v17
	branch !v18 l000E7A0F
	// succ:  l000E7A0A l000E7A0F
l000E7A0A:
	v16 = 0x10<32>
	abortStackOverflow(v16)
	// succ:  l000E7A0F
l000E7A0F:
	v16 = loc16
	v17 = 4<32>
	v16 = v16 + v17
	loc8 = v16
	v16 = loc16
	loc9 = v16
	v16 = arg0
	fn000E6505(v16)
	v16 = arg0
	v17 = 0x1B48<32>
	Mem0[v16:word32] = v17
	v16 = arg0
	v17 = 0x20<32>
	v16 = v16 + v17
	loc10 = v16
	v16 = loc10
	v17 = arg1
	Mem0[v16:word32] = v17
	v16 = arg0
	v17 = 0x28<32>
	v16 = v16 + v17
	loc11 = v16
	v16 = loc11
	v17 = arg2
	Mem0[v16:word32] = v17
	v16 = arg0
	v17 = 0x30<32>
	v16 = v16 + v17
	loc12 = v16
	v16 = loc12
	v17 = 0xFFFFFFFF<32>
	Mem0[v16:word32] = v17
	v16 = arg0
	v17 = 0x34<32>
	v16 = v16 + v17
	loc13 = v16
	v16 = loc13
	v17 = 0<32>
	v19 = SLICE(v17, byte, 0)
	Mem0[v16:byte] = v19
	v16 = arg0
	v17 = 4<32>
	v16 = v16 + v17
	loc14 = v16
	v16 = loc8
	v17 = loc14
	fn0011B3DF(v16, v17)
	v16 = loc8
	v16 = Mem0[v16:word32]
	loc3 = v16
	v16 = loc9
	v17 = loc3
	Mem0[v16:word32] = v17
	v16 = 0<32>
	Mem0[0x00140048<p32>:word32] = v16
	v16 = 0x4F<32>
	v17 = arg0
	v20 = loc9
	invoke_vii(v16, v17, v20)
	v16 = Mem0[0x00140048<p32>:word32]
	loc4 = v16
	v16 = 0<32>
	Mem0[0x00140048<p32>:word32] = v16
	v16 = loc4
	v17 = 1<32>
	v16 = v16 & v17
	loc5 = v16
	v16 = loc5
	branch !v16 l000E7AB2
	// succ:  l000E7A9B l000E7AB2
l000E7A9B:
	v16 = ___cxa_find_matching_catch_2()
	loc6 = v16
	v16 = Mem0[0x00140094<p32>:word32]
	loc7 = v16
	v16 = loc9
	fn0011B3FB(v16)
	v16 = arg0
	fn000E596B(v16)
	v16 = loc6
	___resumeException(v16)
	goto l000E7ABC
	// succ:  l000E7ABC
l000E7AB2:
	v16 = loc9
	fn0011B3FB(v16)
	v16 = loc16
	Mem0[0x00140030<p32>:word32] = v16
	return
	// succ:  fn000E79F6_exit
l000E7ABC:
	// succ:  l000E7ABD
l000E7ABD:
	return
	// succ:  fn000E79F6_exit
fn000E79F6_exit:


// fn000E7ABF
// Return size: 0
void fn000E7ABF(word32 arg0, word32 arg1, word32 arg2)
fn000E7ABF_entry:
	// succ:  l000E7ABF
l000E7ABF:
	v16 = Mem0[0x00140030<p32>:word32]
	loc16 = v16
	v16 = Mem0[0x00140030<p32>:word32]
	v17 = 0x10<32>
	v16 = v16 + v17
	Mem0[0x00140030<p32>:word32] = v16
	v16 = Mem0[0x00140030<p32>:word32]
	v17 = Mem0[0x00140034<p32>:word32]
	v18 = v16 >= v17
	branch !v18 l000E7AD8
	// succ:  l000E7AD3 l000E7AD8
l000E7AD3:
	v16 = 0x10<32>
	abortStackOverflow(v16)
	// succ:  l000E7AD8
l000E7AD8:
	v16 = loc16
	v17 = 4<32>
	v16 = v16 + v17
	loc8 = v16
	v16 = loc16
	loc9 = v16
	v16 = arg0
	fn000E6544(v16)
	v16 = arg0
	v17 = 0x1B08<32>
	Mem0[v16:word32] = v17
	v16 = arg0
	v17 = 0x20<32>
	v16 = v16 + v17
	loc10 = v16
	v16 = loc10
	v17 = arg1
	Mem0[v16:word32] = v17
	v16 = arg0
	v17 = 0x28<32>
	v16 = v16 + v17
	loc11 = v16
	v16 = loc11
	v17 = arg2
	Mem0[v16:word32] = v17
	v16 = arg0
	v17 = 0x30<32>
	v16 = v16 + v17
	loc12 = v16
	v16 = loc12
	v17 = 0xFFFFFFFF<32>
	Mem0[v16:word32] = v17
	v16 = arg0
	v17 = 0x34<32>
	v16 = v16 + v17
	loc13 = v16
	v16 = loc13
	v17 = 0<32>
	v19 = SLICE(v17, byte, 0)
	Mem0[v16:byte] = v19
	v16 = arg0
	v17 = 4<32>
	v16 = v16 + v17
	loc14 = v16
	v16 = loc8
	v17 = loc14
	fn0011B3DF(v16, v17)
	v16 = loc8
	v16 = Mem0[v16:word32]
	loc3 = v16
	v16 = loc9
	v17 = loc3
	Mem0[v16:word32] = v17
	v16 = 0<32>
	Mem0[0x00140048<p32>:word32] = v16
	v16 = 0x4A<32>
	v17 = arg0
	v20 = loc9
	invoke_vii(v16, v17, v20)
	v16 = Mem0[0x00140048<p32>:word32]
	loc4 = v16
	v16 = 0<32>
	Mem0[0x00140048<p32>:word32] = v16
	v16 = loc4
	v17 = 1<32>
	v16 = v16 & v17
	loc5 = v16
	v16 = loc5
	branch !v16 l000E7B7B
	// succ:  l000E7B64 l000E7B7B
l000E7B64:
	v16 = ___cxa_find_matching_catch_2()
	loc6 = v16
	v16 = Mem0[0x00140094<p32>:word32]
	loc7 = v16
	v16 = loc9
	fn0011B3FB(v16)
	v16 = arg0
	fn000E5C8E(v16)
	v16 = loc6
	___resumeException(v16)
	goto l000E7B85
	// succ:  l000E7B85
l000E7B7B:
	v16 = loc9
	fn0011B3FB(v16)
	v16 = loc16
	Mem0[0x00140030<p32>:word32] = v16
	return
	// succ:  fn000E7ABF_exit
l000E7B85:
	// succ:  l000E7B86
l000E7B86:
	return
	// succ:  fn000E7ABF_exit
fn000E7ABF_exit:


// fn000E7B88
// Return size: 0
void fn000E7B88(word32 arg0, word32 arg1, word32 arg2)
fn000E7B88_entry:
	// succ:  l000E7B88
l000E7B88:
	v22 = Mem0[0x00140030<p32>:word32]
	loc22 = v22
	v22 = Mem0[0x00140030<p32>:word32]
	v23 = 0x10<32>
	v22 = v22 + v23
	Mem0[0x00140030<p32>:word32] = v22
	v22 = Mem0[0x00140030<p32>:word32]
	v23 = Mem0[0x00140034<p32>:word32]
	v24 = v22 >= v23
	branch !v24 l000E7BA1
	// succ:  l000E7B9C l000E7BA1
l000E7B9C:
	v22 = 0x10<32>
	abortStackOverflow(v22)
	// succ:  l000E7BA1
l000E7BA1:
	v22 = loc22
	v23 = 4<32>
	v22 = v22 + v23
	loc14 = v22
	v22 = loc22
	loc15 = v22
	v22 = arg0
	fn000E6505(v22)
	v22 = arg0
	v23 = 0x1AC8<32>
	Mem0[v22:word32] = v23
	v22 = arg0
	v23 = 0x20<32>
	v22 = v22 + v23
	loc16 = v22
	v22 = loc16
	v23 = arg1
	Mem0[v22:word32] = v23
	v22 = arg0
	v23 = 4<32>
	v22 = v22 + v23
	loc17 = v22
	v22 = loc14
	v23 = loc17
	fn0011B3DF(v22, v23)
	v22 = loc14
	v22 = Mem0[v22:word32]
	loc18 = v22
	v22 = loc15
	v23 = loc18
	Mem0[v22:word32] = v23
	v22 = 0<32>
	Mem0[0x00140048<p32>:word32] = v22
	v22 = 0x164<32>
	v23 = loc15
	v25 = 0x5370<32>
	v22 = invoke_iii(v22, v23, v25)
	loc19 = v22
	v22 = Mem0[0x00140048<p32>:word32]
	loc20 = v22
	v22 = 0<32>
	Mem0[0x00140048<p32>:word32] = v22
	v22 = loc20
	v23 = 1<32>
	v22 = v22 & v23
	loc3 = v22
	v22 = loc3
	branch !v22 l000E7C1E
	// succ:  l000E7C07 l000E7C1E
l000E7C07:
	v22 = ___cxa_find_matching_catch_2()
	loc12 = v22
	v22 = Mem0[0x00140094<p32>:word32]
	loc13 = v22
	v22 = loc15
	fn0011B3FB(v22)
	v22 = arg0
	fn000E596B(v22)
	v22 = loc12
	___resumeException(v22)
l000E7C1E:
	v22 = arg0
	v23 = 0x24<32>
	v22 = v22 + v23
	loc4 = v22
	v22 = loc15
	fn0011B3FB(v22)
	v22 = loc4
	v23 = loc19
	Mem0[v22:word32] = v23
	v22 = arg0
	v23 = 0x28<32>
	v22 = v22 + v23
	loc5 = v22
	v22 = loc5
	v23 = arg2
	Mem0[v22:word32] = v23
	v22 = arg0
	v23 = 0x2C<32>
	v22 = v22 + v23
	loc6 = v22
	v22 = loc19
	v22 = Mem0[v22:word32]
	loc7 = v22
	v22 = loc7
	v23 = 0x1C<32>
	v22 = v22 + v23
	loc8 = v22
	v22 = loc8
	v22 = Mem0[v22:word32]
	loc9 = v22
	v22 = loc19
	v23 = loc9
	v25 = 0x1FF<32>
	v23 = v23 & v25
	v25 = 0xB00<32>
	v23 = v23 + v25
fn000E7B88_exit:


// fn000E7C82
// Return size: 0
void fn000E7C82(word32 arg0, word32 arg1, word32 arg2)
fn000E7C82_entry:
	// succ:  l000E7C82
l000E7C82:
	v22 = Mem0[0x00140030<p32>:word32]
	loc22 = v22
	v22 = Mem0[0x00140030<p32>:word32]
	v23 = 0x10<32>
	v22 = v22 + v23
	Mem0[0x00140030<p32>:word32] = v22
	v22 = Mem0[0x00140030<p32>:word32]
	v23 = Mem0[0x00140034<p32>:word32]
	v24 = v22 >= v23
	branch !v24 l000E7C9B
	// succ:  l000E7C96 l000E7C9B
l000E7C96:
	v22 = 0x10<32>
	abortStackOverflow(v22)
	// succ:  l000E7C9B
l000E7C9B:
	v22 = loc22
	v23 = 4<32>
	v22 = v22 + v23
	loc14 = v22
	v22 = loc22
	loc15 = v22
	v22 = arg0
	fn000E6544(v22)
	v22 = arg0
	v23 = 0x1A88<32>
	Mem0[v22:word32] = v23
	v22 = arg0
	v23 = 0x20<32>
	v22 = v22 + v23
	loc16 = v22
	v22 = loc16
	v23 = arg1
	Mem0[v22:word32] = v23
	v22 = arg0
	v23 = 4<32>
	v22 = v22 + v23
	loc17 = v22
	v22 = loc14
	v23 = loc17
	fn0011B3DF(v22, v23)
	v22 = loc14
	v22 = Mem0[v22:word32]
	loc18 = v22
	v22 = loc15
	v23 = loc18
	Mem0[v22:word32] = v23
	v22 = 0<32>
	Mem0[0x00140048<p32>:word32] = v22
	v22 = 0x164<32>
	v23 = loc15
	v25 = 0x5378<32>
	v22 = invoke_iii(v22, v23, v25)
	loc19 = v22
	v22 = Mem0[0x00140048<p32>:word32]
	loc20 = v22
	v22 = 0<32>
	Mem0[0x00140048<p32>:word32] = v22
	v22 = loc20
	v23 = 1<32>
	v22 = v22 & v23
	loc3 = v22
	v22 = loc3
	branch !v22 l000E7D18
	// succ:  l000E7D01 l000E7D18
l000E7D01:
	v22 = ___cxa_find_matching_catch_2()
	loc12 = v22
	v22 = Mem0[0x00140094<p32>:word32]
	loc13 = v22
	v22 = loc15
	fn0011B3FB(v22)
	v22 = arg0
	fn000E5C8E(v22)
	v22 = loc12
	___resumeException(v22)
l000E7D18:
	v22 = arg0
	v23 = 0x24<32>
	v22 = v22 + v23
	loc4 = v22
	v22 = loc15
	fn0011B3FB(v22)
	v22 = loc4
	v23 = loc19
	Mem0[v22:word32] = v23
	v22 = arg0
	v23 = 0x28<32>
	v22 = v22 + v23
	loc5 = v22
	v22 = loc5
	v23 = arg2
	Mem0[v22:word32] = v23
	v22 = arg0
	v23 = 0x2C<32>
	v22 = v22 + v23
	loc6 = v22
	v22 = loc19
	v22 = Mem0[v22:word32]
	loc7 = v22
	v22 = loc7
	v23 = 0x1C<32>
	v22 = v22 + v23
	loc8 = v22
	v22 = loc8
	v22 = Mem0[v22:word32]
	loc9 = v22
	v22 = loc19
	v23 = loc9
	v25 = 0x1FF<32>
	v23 = v23 & v25
	v25 = 0xB00<32>
	v23 = v23 + v25
fn000E7C82_exit:


// fn000E7D7C
// Return size: 0
void fn000E7D7C(word32 arg0)
fn000E7D7C_entry:
	// succ:  l000E7D7C
l000E7D7C:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn000E5C8E(v4)
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn000E7D7C_exit
l000E7D8D:
	return
	// succ:  fn000E7D7C_exit
fn000E7D7C_exit:


// fn000E7D8F
// Return size: 0
void fn000E7D8F(word32 arg0, word32 arg1)
fn000E7D8F_entry:
	// succ:  l000E7D8F
l000E7D8F:
	v15 = Mem0[0x00140030<p32>:word32]
	loc14 = v15
	v15 = arg0
	v15 = Mem0[v15:word32]
	loc5 = v15
	v15 = loc5
	v16 = 0x18<32>
	v15 = v15 + v16
	loc6 = v15
	v15 = loc6
	v15 = Mem0[v15:word32]
	loc7 = v15
	v15 = arg0
	v16 = loc7
	v17 = 0x1FF<32>
	v16 = v16 & v17
	v17 = 0xB00<32>
	v16 = v16 + v17
fn000E7D8F_exit:


// fn000E7E11
// Return size: 0
word32 fn000E7E11(word32 arg0)
fn000E7E11_entry:
	// succ:  l000E7E11
l000E7E11:
	v27 = Mem0[0x00140030<p32>:word32]
	loc25 = v27
	v27 = Mem0[0x00140030<p32>:word32]
	v28 = 0x10<32>
	v27 = v27 + v28
	Mem0[0x00140030<p32>:word32] = v27
	v27 = Mem0[0x00140030<p32>:word32]
	v28 = Mem0[0x00140034<p32>:word32]
	v29 = v27 >= v28
	branch !v29 l000E7E2A
	// succ:  l000E7E25 l000E7E2A
l000E7E25:
	v27 = 0x10<32>
	abortStackOverflow(v27)
	// succ:  l000E7E2A
l000E7E2A:
	v27 = loc25
	v28 = 8<32>
	v27 = v27 + v28
	loc3 = v27
	v27 = loc25
	loc14 = v27
	v27 = arg0
	v28 = 0x24<32>
	v27 = v27 + v28
	loc16 = v27
	v27 = arg0
	v28 = 0x28<32>
	v27 = v27 + v28
	loc17 = v27
	v27 = loc3
	v28 = 8<32>
	v27 = v27 + v28
	loc18 = v27
	v27 = loc3
	loc19 = v27
	v27 = arg0
	v28 = 0x20<32>
	v27 = v27 + v28
	loc20 = v27
	// succ:  l000E7E57
l000E7E57:
	v27 = loc16
	v27 = Mem0[v27:word32]
	loc21 = v27
	v27 = loc17
	v27 = Mem0[v27:word32]
	loc22 = v27
	v27 = loc21
	v27 = Mem0[v27:word32]
	loc4 = v27
	v27 = loc4
	v28 = 0x14<32>
	v27 = v27 + v28
	loc5 = v27
	v27 = loc5
	v27 = Mem0[v27:word32]
	loc6 = v27
	v27 = loc21
	v28 = loc22
	v30 = loc3
	v31 = loc18
	v32 = loc14
	v33 = loc6
	v34 = 0x1FF<32>
	v33 = v33 & v34
	v34 = 0x1D20<32>
	v33 = v33 + v34
fn000E7E11_exit:


// fn000E7F2E
// Return size: 0
word32 fn000E7F2E(word32 arg0, word32 arg1, word32 arg2)
fn000E7F2E_entry:
	// succ:  l000E7F2E
l000E7F2E:
	v22 = Mem0[0x00140030<p32>:word32]
	loc22 = v22
	v22 = arg0
	v23 = 0x2C<32>
	v22 = v22 + v23
	loc14 = v22
	v22 = loc14
	v24 = Mem0[v22:int8]
	v22 = CONVERT(v24, int8, word32)
	loc15 = v22
	v22 = loc15
	v23 = 0x18<32>
	v22 = v22 << v23
	v23 = 0x18<32>
	v22 = v22 >> v23
	v23 = 0<32>
	v25 = v22 == v23
	loc16 = v25
	// succ:  l000E7F4F
l000E7F4F:
	v22 = loc16
	v22 = v22
	// succ:  l000E7F55 l000E7F55
l000E7F55:
	v22 = 0<32>
	loc3 = v22
	v22 = arg1
	loc5 = v22
	v22 = loc3
	v23 = arg2
	v25 = v22 < v23
	loc20 = v25
	v22 = loc20
	v25 = v22 == 0<32>
	branch !v25 l000E7F72
	// succ:  l000E7F6B l000E7F72
l000E7F6B:
	v22 = loc3
	loc4 = v22
l000E7F72:
	v22 = arg0
	v22 = Mem0[v22:word32]
	loc6 = v22
	v22 = loc6
	v23 = 0x34<32>
	v22 = v22 + v23
	loc7 = v22
	v22 = loc7
	v22 = Mem0[v22:word32]
	loc8 = v22
	v22 = loc5
	v22 = Mem0[v22:word32]
	loc9 = v22
	v22 = arg0
	v23 = loc9
	v26 = loc8
	v27 = 0x1FF<32>
	v26 = v26 & v27
	v27 = 0x1B20<32>
	v26 = v26 + v27
fn000E7F2E_exit:


// fn000E8219
// Return size: 0
void fn000E8219(word32 arg0)
fn000E8219_entry:
	// succ:  l000E8219
l000E8219:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn000E596B(v4)
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn000E8219_exit
l000E822A:
	return
	// succ:  fn000E8219_exit
fn000E8219_exit:


// fn000E822C
// Return size: 0
void fn000E822C(word32 arg0, word32 arg1)
fn000E822C_entry:
	// succ:  l000E822C
l000E822C:
	v15 = Mem0[0x00140030<p32>:word32]
	loc14 = v15
	v15 = arg0
	v15 = Mem0[v15:word32]
	loc5 = v15
	v15 = loc5
	v16 = 0x18<32>
	v15 = v15 + v16
	loc6 = v15
	v15 = loc6
	v15 = Mem0[v15:word32]
	loc7 = v15
	v15 = arg0
	v16 = loc7
	v17 = 0x1FF<32>
	v16 = v16 & v17
	v17 = 0xB00<32>
	v16 = v16 + v17
fn000E822C_exit:


// fn000E82AE
// Return size: 0
word32 fn000E82AE(word32 arg0)
fn000E82AE_entry:
	// succ:  l000E82AE
l000E82AE:
	v27 = Mem0[0x00140030<p32>:word32]
	loc25 = v27
	v27 = Mem0[0x00140030<p32>:word32]
	v28 = 0x10<32>
	v27 = v27 + v28
	Mem0[0x00140030<p32>:word32] = v27
	v27 = Mem0[0x00140030<p32>:word32]
	v28 = Mem0[0x00140034<p32>:word32]
	v29 = v27 >= v28
	branch !v29 l000E82C7
	// succ:  l000E82C2 l000E82C7
l000E82C2:
	v27 = 0x10<32>
	abortStackOverflow(v27)
	// succ:  l000E82C7
l000E82C7:
	v27 = loc25
	v28 = 8<32>
	v27 = v27 + v28
	loc3 = v27
	v27 = loc25
	loc14 = v27
	v27 = arg0
	v28 = 0x24<32>
	v27 = v27 + v28
	loc16 = v27
	v27 = arg0
	v28 = 0x28<32>
	v27 = v27 + v28
	loc17 = v27
	v27 = loc3
	v28 = 8<32>
	v27 = v27 + v28
	loc18 = v27
	v27 = loc3
	loc19 = v27
	v27 = arg0
	v28 = 0x20<32>
	v27 = v27 + v28
	loc20 = v27
	// succ:  l000E82F4
l000E82F4:
	v27 = loc16
	v27 = Mem0[v27:word32]
	loc21 = v27
	v27 = loc17
	v27 = Mem0[v27:word32]
	loc22 = v27
	v27 = loc21
	v27 = Mem0[v27:word32]
	loc4 = v27
	v27 = loc4
	v28 = 0x14<32>
	v27 = v27 + v28
	loc5 = v27
	v27 = loc5
	v27 = Mem0[v27:word32]
	loc6 = v27
	v27 = loc21
	v28 = loc22
	v30 = loc3
	v31 = loc18
	v32 = loc14
	v33 = loc6
	v34 = 0x1FF<32>
	v33 = v33 & v34
	v34 = 0x1D20<32>
	v33 = v33 + v34
fn000E82AE_exit:


// fn000E83CB
// Return size: 0
word32 fn000E83CB(word32 arg0, word32 arg1, word32 arg2)
fn000E83CB_entry:
	// succ:  l000E83CB
l000E83CB:
	v23 = Mem0[0x00140030<p32>:word32]
	loc23 = v23
	v23 = arg0
	v24 = 0x2C<32>
	v23 = v23 + v24
	loc15 = v23
	v23 = loc15
	v25 = Mem0[v23:int8]
	v23 = CONVERT(v25, int8, word32)
	loc16 = v23
	v23 = loc16
	v24 = 0x18<32>
	v23 = v23 << v24
	v24 = 0x18<32>
	v23 = v23 >> v24
	v24 = 0<32>
	v26 = v23 == v24
	loc17 = v26
	// succ:  l000E83EC
l000E83EC:
	v23 = loc17
	v23 = v23
	// succ:  l000E83F2 l000E83F2
l000E83F2:
	v23 = 0<32>
	loc3 = v23
	v23 = arg1
	loc5 = v23
	v23 = loc3
	v24 = arg2
	v26 = v23 < v24
	loc21 = v26
	v23 = loc21
	v26 = v23 == 0<32>
	branch !v26 l000E840F
	// succ:  l000E8408 l000E840F
l000E8408:
	v23 = loc3
	loc4 = v23
l000E840F:
	v23 = arg0
	v23 = Mem0[v23:word32]
	loc6 = v23
	v23 = loc6
	v24 = 0x34<32>
	v23 = v23 + v24
	loc7 = v23
	v23 = loc7
	v23 = Mem0[v23:word32]
	loc8 = v23
	v23 = loc5
	v27 = Mem0[v23:int8]
	v23 = CONVERT(v27, int8, word32)
	loc9 = v23
	v23 = loc9
	v24 = 0xFF<32>
	v23 = v23 & v24
	loc10 = v23
	v23 = arg0
	v24 = loc10
	v28 = loc8
	v29 = 0x1FF<32>
	v28 = v28 & v29
	v29 = 0x1B20<32>
	v28 = v28 + v29
fn000E83CB_exit:


// fn000E86C6
// Return size: 0
void fn000E86C6(word32 arg0, word32 arg1)
fn000E86C6_entry:
	// succ:  l000E86C6
l000E86C6:
	v20 = Mem0[0x00140030<p32>:word32]
	loc19 = v20
	v20 = arg1
	v21 = 0x5378<32>
	v20 = fn000EA9F7(v20, v21)
	loc10 = v20
	v20 = arg0
	v21 = 0x24<32>
	v20 = v20 + v21
	loc11 = v20
	v20 = loc11
	v21 = loc10
	Mem0[v20:word32] = v21
	v20 = loc10
	v20 = Mem0[v20:word32]
	loc12 = v20
	v20 = loc12
	v21 = 0x18<32>
	v20 = v20 + v21
	loc13 = v20
	v20 = loc13
	v20 = Mem0[v20:word32]
	loc14 = v20
	v20 = loc10
	v21 = loc14
	v22 = 0x1FF<32>
	v21 = v21 & v22
	v22 = 0xB00<32>
	v21 = v21 + v22
fn000E86C6_exit:


// fn000E8778
// Return size: 0
void fn000E8778(word32 arg0)
fn000E8778_entry:
	// succ:  l000E8778
l000E8778:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn000E5C8E(v4)
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn000E8778_exit
l000E8789:
	return
	// succ:  fn000E8778_exit
fn000E8778_exit:


// fn000E878B
// Return size: 0
word32 fn000E878B(word32 arg0)
fn000E878B_entry:
	// succ:  l000E878B
l000E878B:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 0<32>
	v5 = fn000E89AB(v5, v6)
	loc1 = v5
	v5 = loc1
	return v5
	// succ:  fn000E878B_exit
l000E879D:
	return v5
	// succ:  fn000E878B_exit
fn000E878B_exit:


// fn000E879F
// Return size: 0
word32 fn000E879F(word32 arg0)
fn000E879F_entry:
	// succ:  l000E879F
l000E879F:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 1<32>
	v5 = fn000E89AB(v5, v6)
	loc1 = v5
	v5 = loc1
	return v5
	// succ:  fn000E879F_exit
l000E87B1:
	return v5
	// succ:  fn000E879F_exit
fn000E879F_exit:


// fn000E87B3
// Return size: 0
word32 fn000E87B3(word32 arg0, word32 arg1)
fn000E87B3_entry:
	// succ:  l000E87B3
l000E87B3:
	v43 = Mem0[0x00140030<p32>:word32]
	loc42 = v43
	v43 = Mem0[0x00140030<p32>:word32]
	v44 = 0x20<32>
	v43 = v43 + v44
	Mem0[0x00140030<p32>:word32] = v43
	v43 = Mem0[0x00140030<p32>:word32]
	v44 = Mem0[0x00140034<p32>:word32]
	v45 = v43 >= v44
	branch !v45 l000E87CC
	// succ:  l000E87C7 l000E87CC
l000E87C7:
	v43 = 0x20<32>
	abortStackOverflow(v43)
	// succ:  l000E87CC
l000E87CC:
	v43 = loc42
	v44 = 0x10<32>
	v43 = v43 + v44
	loc15 = v43
	v43 = loc42
	v44 = 8<32>
	v43 = v43 + v44
	loc26 = v43
	v43 = loc42
	v44 = 4<32>
	v43 = v43 + v44
	loc35 = v43
	v43 = loc42
	loc36 = v43
	v43 = arg1
	v44 = 0xFFFFFFFF<32>
	v45 = v43 == v44
	loc37 = v45
	v43 = arg0
	v44 = 0x34<32>
	v43 = v43 + v44
	loc38 = v43
	v43 = loc38
	v46 = Mem0[v43:int8]
	v43 = CONVERT(v46, int8, word32)
	loc39 = v43
	v43 = loc39
	v44 = 0x18<32>
	v43 = v43 << v44
	v44 = 0x18<32>
	v43 = v43 >> v44
	v44 = 0<32>
	v45 = v43 != v44
	loc40 = v45
	// succ:  l000E8807
l000E8807:
	v43 = loc37
	branch !v43 l000E883F
	// succ:  l000E880D l000E883F
l000E880D:
	v43 = loc40
	branch !v43 l000E8816
	// succ:  l000E8811 l000E8816
l000E8811:
	v43 = 0xFFFFFFFF<32>
	loc2 = v43
	goto l000E883D
	// succ:  l000E883D
l000E8816:
	v43 = arg0
	v44 = 0x30<32>
	v43 = v43 + v44
	loc5 = v43
	v43 = loc5
	v43 = Mem0[v43:word32]
	loc6 = v43
	v43 = loc6
	v44 = 0xFFFFFFFF<32>
	v45 = v43 != v44
	loc7 = v45
	v43 = loc7
	v44 = 1<32>
	v43 = v43 & v44
	loc8 = v43
	v43 = loc38
	v44 = loc8
	v47 = SLICE(v44, byte, 0)
	Mem0[v43:byte] = v47
	v43 = loc6
	loc2 = v43
	// succ:  l000E883D
l000E883D:
l000E883F:
	v43 = loc40
	v43 = v43
	// succ:  l000E8845 l000E8845
l000E8845:
	v43 = arg0
	v44 = 0x30<32>
	v43 = v43 + v44
	loc9 = v43
	v43 = loc9
	v43 = Mem0[v43:word32]
	loc10 = v43
	v43 = loc35
	v44 = loc10
	Mem0[v43:word32] = v44
	v43 = arg0
	v44 = 0x24<32>
	v43 = v43 + v44
	loc11 = v43
	v43 = loc11
	v43 = Mem0[v43:word32]
	loc12 = v43
	v43 = arg0
	v44 = 0x28<32>
	v43 = v43 + v44
	loc13 = v43
	v43 = loc13
	v43 = Mem0[v43:word32]
	loc14 = v43
	v43 = loc35
	v44 = 4<32>
	v43 = v43 + v44
	loc16 = v43
	v43 = loc15
	v44 = 8<32>
	v43 = v43 + v44
	loc17 = v43
	v43 = loc12
	v43 = Mem0[v43:word32]
	loc18 = v43
	v43 = loc18
	v44 = 0xC<32>
	v43 = v43 + v44
	loc19 = v43
	v43 = loc19
	v43 = Mem0[v43:word32]
	loc20 = v43
	v43 = loc12
	v44 = loc14
	v48 = loc35
	v49 = loc16
	v50 = loc36
	v51 = loc15
	v52 = loc17
	v53 = loc26
	v54 = loc20
	v55 = 0x1FF<32>
	v54 = v54 & v55
	v55 = 0x2C20<32>
	v54 = v54 + v55
fn000E87B3_exit:


// fn000E89AB
// Return size: 0
word32 fn000E89AB(word32 arg0, word32 arg1)
fn000E89AB_entry:
	// succ:  l000E89AB
l000E89AB:
	v68 = Mem0[0x00140030<p32>:word32]
	loc66 = v68
	v68 = Mem0[0x00140030<p32>:word32]
	v69 = 0x20<32>
	v68 = v68 + v69
	Mem0[0x00140030<p32>:word32] = v68
	v68 = Mem0[0x00140030<p32>:word32]
	v69 = Mem0[0x00140034<p32>:word32]
	v70 = v68 >= v69
	branch !v70 l000E89C4
	// succ:  l000E89BF l000E89C4
l000E89BF:
	v68 = 0x20<32>
	abortStackOverflow(v68)
	// succ:  l000E89C4
l000E89C4:
	v68 = loc66
	v69 = 0x10<32>
	v68 = v68 + v69
	loc21 = v68
	v68 = loc66
	v69 = 8<32>
	v68 = v68 + v69
	loc32 = v68
	v68 = loc66
	v69 = 4<32>
	v68 = v68 + v69
	loc42 = v68
	v68 = loc66
	loc53 = v68
	v68 = arg0
	v69 = 0x34<32>
	v68 = v68 + v69
	loc61 = v68
	v68 = loc61
	v71 = Mem0[v68:int8]
	v68 = CONVERT(v71, int8, word32)
	loc62 = v68
	v68 = loc62
	v69 = 0x18<32>
	v68 = v68 << v69
	v69 = 0x18<32>
	v68 = v68 >> v69
	v69 = 0<32>
	v70 = v68 == v69
	loc63 = v70
	v68 = loc63
	v68 = v68
	// succ:  l000E89FC l000E89FC
l000E89FC:
	v68 = arg0
	v69 = 0x2C<32>
	v68 = v68 + v69
	loc12 = v68
	v68 = loc12
	v68 = Mem0[v68:word32]
	loc13 = v68
	v68 = loc13
	v69 = 1<32>
	v70 = v68 > v69
	loc14 = v70
	v68 = loc14
	branch !v68 l000E8A18
	// succ:  l000E8A15 l000E8A18
l000E8A15:
	v68 = loc13
	goto l000E8A1A
	// succ:  l000E8A1A
l000E8A18:
	v68 = 1<32>
	// succ:  l000E8A1A
l000E8A1A:
	loc10 = v68
	v68 = arg0
	v69 = 0x20<32>
	v68 = v68 + v69
	loc15 = v68
	v68 = 0<32>
	loc4 = v68
	// succ:  l000E8A2A
l000E8A2A:
	v68 = loc4
	v69 = loc10
	v70 = v68 < v69
	loc16 = v70
	v68 = loc16
	v70 = v68 == 0<32>
	branch !v70 l000E8A3F
	// succ:  l000E8A38 l000E8A3F
l000E8A38:
	v68 = 8<32>
	loc65 = v68
	goto l000E8A82
	// succ:  l000E8A82
l000E8A3F:
	v68 = loc15
	v68 = Mem0[v68:word32]
	loc17 = v68
	v68 = loc17
	v68 = fn000DEE2E(v68)
	loc18 = v68
	v68 = loc18
	v69 = 0xFFFFFFFF<32>
	v70 = v68 == v69
	loc19 = v70
	v68 = loc19
	branch !v68 l000E8A5F
	// succ:  l000E8A58 l000E8A5F
l000E8A58:
	v68 = 0xFFFFFFFF<32>
	loc5 = v68
	goto l000E8A82
	// succ:  l000E8A82
l000E8A5F:
	v68 = loc18
	v69 = 0xFF<32>
	v68 = v68 & v69
	loc20 = v68
	v68 = loc21
	v69 = loc4
	v68 = v68 + v69
	loc22 = v68
	v68 = loc22
	v69 = loc20
	v72 = SLICE(v69, byte, 0)
	Mem0[v68:byte] = v72
	v68 = loc4
	v69 = 1<32>
	v68 = v68 + v69
	loc23 = v68
	v68 = loc23
	loc4 = v68
	goto l000E8A1A
	// succ:  l000E8A1A
l000E8A82:
	v68 = loc65
	v69 = 8<32>
	v70 = v68 == v69
	v70 = v70
	// succ:  l000E8A8B l000E8A8B
l000E8A8B:
	v68 = arg0
	v69 = 0x35<32>
	v68 = v68 + v69
	loc24 = v68
	v68 = loc24
	v73 = Mem0[v68:int8]
	v68 = CONVERT(v73, int8, word32)
	loc25 = v68
	v68 = loc25
	v69 = 0x18<32>
	v68 = v68 << v69
	v69 = 0x18<32>
	v68 = v68 >> v69
	v69 = 0<32>
	v70 = v68 == v69
	loc26 = v70
	// succ:  l000E8AA6
l000E8AA6:
	v68 = loc26
	v68 = v68
	// succ:  l000E8AAC l000E8AAC
l000E8AAC:
	v68 = arg0
	v69 = 0x28<32>
	v68 = v68 + v69
	loc29 = v68
	v68 = arg0
	v69 = 0x24<32>
	v68 = v68 + v69
	loc30 = v68
	v68 = loc32
	v69 = 4<32>
	v68 = v68 + v69
	loc31 = v68
	v68 = loc10
	loc3 = v68
	// succ:  l000E8AC7
l000E8AC7:
	v68 = loc29
	v68 = Mem0[v68:word32]
	loc33 = v68
	v68 = loc33
	v74 = Mem0[v68:word64]
	loc67 = v74
	v68 = loc30
	v68 = Mem0[v68:word32]
	loc34 = v68
	v68 = loc21
	v69 = loc3
	v68 = v68 + v69
	loc35 = v68
	v68 = loc34
	v68 = Mem0[v68:word32]
	loc36 = v68
	v68 = loc36
	v69 = 0x10<32>
	v68 = v68 + v69
	loc37 = v68
	v68 = loc37
	v68 = Mem0[v68:word32]
	loc38 = v68
	v68 = loc34
	v69 = loc33
	v75 = loc21
	v76 = loc35
	v77 = loc42
	v78 = loc32
	v79 = loc31
	v80 = loc53
	v81 = loc38
	v82 = 0x1FF<32>
	v81 = v81 & v82
	v82 = 0x2C20<32>
	v81 = v81 + v82
fn000E89AB_exit:


// fn000E8CDC
// Return size: 0
void fn000E8CDC(word32 arg0, word32 arg1)
fn000E8CDC_entry:
	// succ:  l000E8CDC
l000E8CDC:
	v20 = Mem0[0x00140030<p32>:word32]
	loc19 = v20
	v20 = arg1
	v21 = 0x5370<32>
	v20 = fn000EA9F7(v20, v21)
	loc10 = v20
	v20 = arg0
	v21 = 0x24<32>
	v20 = v20 + v21
	loc11 = v20
	v20 = loc11
	v21 = loc10
	Mem0[v20:word32] = v21
	v20 = loc10
	v20 = Mem0[v20:word32]
	loc12 = v20
	v20 = loc12
	v21 = 0x18<32>
	v20 = v20 + v21
	loc13 = v20
	v20 = loc13
	v20 = Mem0[v20:word32]
	loc14 = v20
	v20 = loc10
	v21 = loc14
	v22 = 0x1FF<32>
	v21 = v21 & v22
	v22 = 0xB00<32>
	v21 = v21 + v22
fn000E8CDC_exit:


// fn000E8D8E
// Return size: 0
void fn000E8D8E(word32 arg0)
fn000E8D8E_entry:
	// succ:  l000E8D8E
l000E8D8E:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn000E596B(v4)
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn000E8D8E_exit
l000E8D9F:
	return
	// succ:  fn000E8D8E_exit
fn000E8D8E_exit:


// fn000E8DA1
// Return size: 0
word32 fn000E8DA1(word32 arg0)
fn000E8DA1_entry:
	// succ:  l000E8DA1
l000E8DA1:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 0<32>
	v5 = fn000E8FC9(v5, v6)
	loc1 = v5
	v5 = loc1
	return v5
	// succ:  fn000E8DA1_exit
l000E8DB3:
	return v5
	// succ:  fn000E8DA1_exit
fn000E8DA1_exit:


// fn000E8DB5
// Return size: 0
word32 fn000E8DB5(word32 arg0)
fn000E8DB5_entry:
	// succ:  l000E8DB5
l000E8DB5:
	v5 = Mem0[0x00140030<p32>:word32]
	loc3 = v5
	v5 = arg0
	v6 = 1<32>
	v5 = fn000E8FC9(v5, v6)
	loc1 = v5
	v5 = loc1
	return v5
	// succ:  fn000E8DB5_exit
l000E8DC7:
	return v5
	// succ:  fn000E8DB5_exit
fn000E8DB5_exit:


// fn000E8DC9
// Return size: 0
word32 fn000E8DC9(word32 arg0, word32 arg1)
fn000E8DC9_entry:
	// succ:  l000E8DC9
l000E8DC9:
	v44 = Mem0[0x00140030<p32>:word32]
	loc43 = v44
	v44 = Mem0[0x00140030<p32>:word32]
	v45 = 0x20<32>
	v44 = v44 + v45
	Mem0[0x00140030<p32>:word32] = v44
	v44 = Mem0[0x00140030<p32>:word32]
	v45 = Mem0[0x00140034<p32>:word32]
	v46 = v44 >= v45
	branch !v46 l000E8DE2
	// succ:  l000E8DDD l000E8DE2
l000E8DDD:
	v44 = 0x20<32>
	abortStackOverflow(v44)
	// succ:  l000E8DE2
l000E8DE2:
	v44 = loc43
	v45 = 0x10<32>
	v44 = v44 + v45
	loc15 = v44
	v44 = loc43
	v45 = 4<32>
	v44 = v44 + v45
	loc26 = v44
	v44 = loc43
	v45 = 8<32>
	v44 = v44 + v45
	loc36 = v44
	v44 = loc43
	loc37 = v44
	v44 = arg1
	v45 = 0xFFFFFFFF<32>
	v46 = v44 == v45
	loc38 = v46
	v44 = arg0
	v45 = 0x34<32>
	v44 = v44 + v45
	loc39 = v44
	v44 = loc39
	v47 = Mem0[v44:int8]
	v44 = CONVERT(v47, int8, word32)
	loc40 = v44
	v44 = loc40
	v45 = 0x18<32>
	v44 = v44 << v45
	v45 = 0x18<32>
	v44 = v44 >> v45
	v45 = 0<32>
	v46 = v44 != v45
	loc41 = v46
	// succ:  l000E8E1D
l000E8E1D:
	v44 = loc38
	branch !v44 l000E8E55
	// succ:  l000E8E23 l000E8E55
l000E8E23:
	v44 = loc41
	branch !v44 l000E8E2C
	// succ:  l000E8E27 l000E8E2C
l000E8E27:
	v44 = 0xFFFFFFFF<32>
	loc2 = v44
	goto l000E8E53
	// succ:  l000E8E53
l000E8E2C:
	v44 = arg0
	v45 = 0x30<32>
	v44 = v44 + v45
	loc5 = v44
	v44 = loc5
	v44 = Mem0[v44:word32]
	loc6 = v44
	v44 = loc6
	v45 = 0xFFFFFFFF<32>
	v46 = v44 != v45
	loc7 = v46
	v44 = loc7
	v45 = 1<32>
	v44 = v44 & v45
	loc8 = v44
	v44 = loc39
	v45 = loc8
	v48 = SLICE(v45, byte, 0)
	Mem0[v44:byte] = v48
	v44 = loc6
	loc2 = v44
	// succ:  l000E8E53
l000E8E53:
l000E8E55:
	v44 = loc41
	v44 = v44
	// succ:  l000E8E5B l000E8E5B
l000E8E5B:
	v44 = arg0
	v45 = 0x30<32>
	v44 = v44 + v45
	loc9 = v44
	v44 = loc9
	v44 = Mem0[v44:word32]
	loc10 = v44
	v44 = loc10
	v45 = 0xFF<32>
	v44 = v44 & v45
	loc11 = v44
	v44 = loc36
	v45 = loc11
	v49 = SLICE(v45, byte, 0)
	Mem0[v44:byte] = v49
	v44 = arg0
	v45 = 0x24<32>
	v44 = v44 + v45
	loc12 = v44
	v44 = loc12
	v44 = Mem0[v44:word32]
	loc13 = v44
	v44 = arg0
	v45 = 0x28<32>
	v44 = v44 + v45
	loc14 = v44
	v44 = loc14
	v44 = Mem0[v44:word32]
	loc16 = v44
	v44 = loc36
	v45 = 1<32>
	v44 = v44 + v45
	loc17 = v44
	v44 = loc15
	v45 = 8<32>
	v44 = v44 + v45
	loc18 = v44
	v44 = loc13
	v44 = Mem0[v44:word32]
	loc19 = v44
	v44 = loc19
	v45 = 0xC<32>
	v44 = v44 + v45
	loc20 = v44
	v44 = loc20
	v44 = Mem0[v44:word32]
	loc21 = v44
	v44 = loc13
	v45 = loc16
	v50 = loc36
	v51 = loc17
	v52 = loc37
	v53 = loc15
	v54 = loc18
	v55 = loc26
	v56 = loc21
	v57 = 0x1FF<32>
	v56 = v56 & v57
	v57 = 0x2C20<32>
	v56 = v56 + v57
fn000E8DC9_exit:


// fn000E8FC9
// Return size: 0
word32 fn000E8FC9(word32 arg0, word32 arg1)
fn000E8FC9_entry:
	// succ:  l000E8FC9
l000E8FC9:
	v69 = Mem0[0x00140030<p32>:word32]
	loc67 = v69
	v69 = Mem0[0x00140030<p32>:word32]
	v70 = 0x20<32>
	v69 = v69 + v70
	Mem0[0x00140030<p32>:word32] = v69
	v69 = Mem0[0x00140030<p32>:word32]
	v70 = Mem0[0x00140034<p32>:word32]
	v71 = v69 >= v70
	branch !v71 l000E8FE2
	// succ:  l000E8FDD l000E8FE2
l000E8FDD:
	v69 = 0x20<32>
	abortStackOverflow(v69)
	// succ:  l000E8FE2
l000E8FE2:
	v69 = loc67
	v70 = 0x10<32>
	v69 = v69 + v70
	loc21 = v69
	v69 = loc67
	v70 = 8<32>
	v69 = v69 + v70
	loc32 = v69
	v69 = loc67
	v70 = 4<32>
	v69 = v69 + v70
	loc42 = v69
	v69 = loc67
	loc53 = v69
	v69 = arg0
	v70 = 0x34<32>
	v69 = v69 + v70
	loc62 = v69
	v69 = loc62
	v72 = Mem0[v69:int8]
	v69 = CONVERT(v72, int8, word32)
	loc63 = v69
	v69 = loc63
	v70 = 0x18<32>
	v69 = v69 << v70
	v70 = 0x18<32>
	v69 = v69 >> v70
	v70 = 0<32>
	v71 = v69 == v70
	loc64 = v71
	v69 = loc64
	v69 = v69
	// succ:  l000E901A l000E901A
l000E901A:
	v69 = arg0
	v70 = 0x2C<32>
	v69 = v69 + v70
	loc12 = v69
	v69 = loc12
	v69 = Mem0[v69:word32]
	loc13 = v69
	v69 = loc13
	v70 = 1<32>
	v71 = v69 > v70
	loc14 = v71
	v69 = loc14
	branch !v69 l000E9036
	// succ:  l000E9033 l000E9036
l000E9033:
	v69 = loc13
	goto l000E9038
	// succ:  l000E9038
l000E9036:
	v69 = 1<32>
	// succ:  l000E9038
l000E9038:
	loc10 = v69
	v69 = arg0
	v70 = 0x20<32>
	v69 = v69 + v70
	loc15 = v69
	v69 = 0<32>
	loc4 = v69
	// succ:  l000E9048
l000E9048:
	v69 = loc4
	v70 = loc10
	v71 = v69 < v70
	loc16 = v71
	v69 = loc16
	v71 = v69 == 0<32>
	branch !v71 l000E905D
	// succ:  l000E9056 l000E905D
l000E9056:
	v69 = 8<32>
	loc66 = v69
	goto l000E90A0
	// succ:  l000E90A0
l000E905D:
	v69 = loc15
	v69 = Mem0[v69:word32]
	loc17 = v69
	v69 = loc17
	v69 = fn000DEE2E(v69)
	loc18 = v69
	v69 = loc18
	v70 = 0xFFFFFFFF<32>
	v71 = v69 == v70
	loc19 = v71
	v69 = loc19
	branch !v69 l000E907D
	// succ:  l000E9076 l000E907D
l000E9076:
	v69 = 0xFFFFFFFF<32>
	loc5 = v69
	goto l000E90A0
	// succ:  l000E90A0
l000E907D:
	v69 = loc18
	v70 = 0xFF<32>
	v69 = v69 & v70
	loc20 = v69
	v69 = loc21
	v70 = loc4
	v69 = v69 + v70
	loc22 = v69
	v69 = loc22
	v70 = loc20
	v73 = SLICE(v70, byte, 0)
	Mem0[v69:byte] = v73
	v69 = loc4
	v70 = 1<32>
	v69 = v69 + v70
	loc23 = v69
	v69 = loc23
	loc4 = v69
	goto l000E9038
	// succ:  l000E9038
l000E90A0:
	v69 = loc66
	v70 = 8<32>
	v71 = v69 == v70
	v71 = v71
	// succ:  l000E90A9 l000E90A9
l000E90A9:
	v69 = arg0
	v70 = 0x35<32>
	v69 = v69 + v70
	loc24 = v69
	v69 = loc24
	v74 = Mem0[v69:int8]
	v69 = CONVERT(v74, int8, word32)
	loc25 = v69
	v69 = loc25
	v70 = 0x18<32>
	v69 = v69 << v70
	v70 = 0x18<32>
	v69 = v69 >> v70
	v70 = 0<32>
	v71 = v69 == v70
	loc26 = v71
	// succ:  l000E90C4
l000E90C4:
	v69 = loc26
	v69 = v69
	// succ:  l000E90CA l000E90CA
l000E90CA:
	v69 = arg0
	v70 = 0x28<32>
	v69 = v69 + v70
	loc28 = v69
	v69 = arg0
	v70 = 0x24<32>
	v69 = v69 + v70
	loc29 = v69
	v69 = loc32
	v70 = 1<32>
	v69 = v69 + v70
	loc30 = v69
	v69 = loc10
	loc3 = v69
	// succ:  l000E90E5
l000E90E5:
	v69 = loc28
	v69 = Mem0[v69:word32]
	loc31 = v69
	v69 = loc31
	v75 = Mem0[v69:word64]
	loc68 = v75
	v69 = loc29
	v69 = Mem0[v69:word32]
	loc33 = v69
	v69 = loc21
	v70 = loc3
	v69 = v69 + v70
	loc34 = v69
	v69 = loc33
	v69 = Mem0[v69:word32]
	loc35 = v69
	v69 = loc35
	v70 = 0x10<32>
	v69 = v69 + v70
	loc36 = v69
	v69 = loc36
	v69 = Mem0[v69:word32]
	loc37 = v69
	v69 = loc33
	v70 = loc31
	v76 = loc21
	v77 = loc34
	v78 = loc42
	v79 = loc32
	v80 = loc30
	v81 = loc53
	v82 = loc37
	v83 = 0x1FF<32>
	v82 = v82 & v83
	v83 = 0x2C20<32>
	v82 = v82 + v83
fn000E8FC9_exit:


// fn000E92F6
// Return size: 0
void fn000E92F6(word32 arg0)
fn000E92F6_entry:
	// succ:  l000E92F6
l000E92F6:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	return
	// succ:  fn000E92F6_exit
l000E92FD:
	return
	// succ:  fn000E92F6_exit
fn000E92F6_exit:


// fn000E92FF
// Return size: 0
void fn000E92FF(word32 arg0)
fn000E92FF_entry:
	// succ:  l000E92FF
l000E92FF:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn000E92FF_exit
l000E930B:
	return
	// succ:  fn000E92FF_exit
fn000E92FF_exit:


// fn000E930D
// Return size: 0
void fn000E930D(word32 arg0)
fn000E930D_entry:
	// succ:  l000E930D
l000E930D:
	v8 = Mem0[0x00140030<p32>:word32]
	loc6 = v8
	v8 = arg0
	v9 = 0<32>
	v10 = v8 == v9
	loc1 = v10
	v8 = loc1
	v10 = v8 == 0<32>
	v10 = v10
	// succ:  l000E931F l000E931F
l000E931F:
	v8 = arg0
	v8 = Mem0[v8:word32]
	loc2 = v8
	v8 = loc2
	v9 = 4<32>
	v8 = v8 + v9
	loc3 = v8
	v8 = loc3
	v8 = Mem0[v8:word32]
	loc4 = v8
	v8 = arg0
	v9 = loc4
	v11 = 0x1FF<32>
	v9 = v9 & v11
	v11 = 0x500<32>
	v9 = v9 + v11
fn000E930D_exit:


// fn000E9347
// Return size: 0
word32 fn000E9347(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn000E9347_entry:
	// succ:  l000E9347
l000E9347:
	v17 = Mem0[0x00140030<p32>:word32]
	loc19 = v17
	v17 = arg3
	loc6 = v17
	v17 = arg1
	loc7 = v17
	// succ:  l000E9357
l000E9357:
	v17 = loc6
	v18 = arg4
	v19 = v17 == v18
	loc13 = v19
	v17 = loc13
	branch !v17 l000E936B
	// succ:  l000E9364 l000E936B
l000E9364:
	v17 = 7<32>
	loc18 = v17
	goto l000E93DF
	// succ:  l000E93DF
l000E936B:
	v17 = loc7
	v18 = arg2
	v19 = v17 == v18
	loc14 = v19
	v17 = loc14
	branch !v17 l000E937D
	// succ:  l000E9376 l000E937D
l000E9376:
	v17 = 0xFFFFFFFF<32>
	loc5 = v17
	goto l000E93DF
	// succ:  l000E93DF
l000E937D:
	v17 = loc7
	v20 = Mem0[v17:int8]
	v17 = CONVERT(v20, int8, word32)
	loc15 = v17
	v17 = loc6
	v21 = Mem0[v17:int8]
	v17 = CONVERT(v21, int8, word32)
	loc16 = v17
	v17 = loc15
	v18 = 0x18<32>
	v17 = v17 << v18
	v18 = 0x18<32>
	v17 = v17 >> v18
	v18 = loc16
	v22 = 0x18<32>
	v18 = v18 << v22
	v22 = 0x18<32>
	v18 = v18 >> v22
	v19 = v17 < v18
	loc17 = v19
	v17 = loc17
	branch !v17 l000E93A9
	// succ:  l000E93A2 l000E93A9
l000E93A2:
	v17 = 0xFFFFFFFF<32>
	loc5 = v17
	goto l000E93DF
	// succ:  l000E93DF
l000E93A9:
	v17 = loc16
	v18 = 0x18<32>
	v17 = v17 << v18
	v18 = 0x18<32>
	v17 = v17 >> v18
	v18 = loc15
	v22 = 0x18<32>
	v18 = v18 << v22
	v22 = 0x18<32>
	v18 = v18 >> v22
	v19 = v17 < v18
	loc8 = v19
	v17 = loc8
	branch !v17 l000E93C7
	// succ:  l000E93C0 l000E93C7
l000E93C0:
	v17 = 1<32>
	loc5 = v17
	goto l000E93DF
	// succ:  l000E93DF
l000E93C7:
	v17 = loc7
	v18 = 1<32>
	v17 = v17 + v18
	loc9 = v17
	v17 = loc6
	v18 = 1<32>
	v17 = v17 + v18
	loc10 = v17
	v17 = loc10
	loc6 = v17
	v17 = loc9
	loc7 = v17
	goto l000E9347
	// succ:  l000E9347
l000E93DF:
	v17 = loc18
	v18 = 7<32>
	v19 = v17 == v18
	branch !v19 l000E93FB
	// succ:  l000E93E8 l000E93FB
l000E93E8:
	v17 = loc7
	v18 = arg2
	v19 = v17 != v18
	loc11 = v19
	v17 = loc11
	v18 = 1<32>
	v17 = v17 & v18
	loc12 = v17
	v17 = loc12
	loc5 = v17
	// succ:  l000E93FB
l000E93FB:
	v17 = loc5
	return v17
	// succ:  fn000E9347_exit
l000E93FE:
	return v17
	// succ:  fn000E9347_exit
fn000E9347_exit:


// fn000E9400
// Return size: 0
void fn000E9400(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000E9400_entry:
	// succ:  l000E9400
l000E9400:
	v4 = Mem0[0x00140030<p32>:word32]
	loc5 = v4
	v4 = arg0
	v5 = 0<64>
	Mem0[v4:word64] = v5
	v4 = arg0
	v6 = 8<32>
	v4 = v4 + v6
	v6 = 0<32>
	Mem0[v4:word32] = v6
	v4 = arg0
	v6 = arg2
	v7 = arg3
	fn000E949A(v4, v6, v7)
	return
	// succ:  fn000E9400_exit
l000E9421:
	return
	// succ:  fn000E9400_exit
fn000E9400_exit:


// fn000E9423
// Return size: 0
word32 fn000E9423(word32 arg0, word32 arg1, word32 arg2)
fn000E9423_entry:
	// succ:  l000E9423
l000E9423:
	v16 = Mem0[0x00140030<p32>:word32]
	loc16 = v16
	v16 = 0<32>
	loc3 = v16
	v16 = arg1
	loc4 = v16
	// succ:  l000E9433
l000E9433:
	v16 = loc4
	v17 = arg2
	v18 = v16 == v17
	loc8 = v18
	v16 = loc8
	branch !v16 l000E9443
	// succ:  l000E9440 l000E9443
l000E9440:
	goto l000E9493
	// succ:  l000E9493
l000E9443:
	v16 = loc3
	v17 = 4<32>
	v16 = v16 << v17
	loc9 = v16
	v16 = loc4
	v19 = Mem0[v16:int8]
	v16 = CONVERT(v19, int8, word32)
	loc10 = v16
	v16 = loc10
	v17 = 0x18<32>
	v16 = v16 << v17
	v17 = 0x18<32>
	v16 = v16 >> v17
	loc11 = v16
	v16 = loc11
	v17 = loc9
	v16 = v16 + v17
	loc12 = v16
	v16 = loc12
	v17 = 0xF0000000<32>
	v16 = v16 & v17
	loc13 = v16
	v16 = loc13
	v17 = 0x18<32>
	v16 = v16 >>u v17
	loc14 = v16
	v16 = loc14
	v17 = loc13
	v16 = v16 | v17
	loc5 = v16
	v16 = loc5
	v17 = loc12
	v16 = v16 ^ v17
	loc6 = v16
	v16 = loc4
	v17 = 1<32>
	v16 = v16 + v17
	loc7 = v16
	v16 = loc6
	loc3 = v16
	v16 = loc7
	loc4 = v16
	goto l000E9423
	// succ:  l000E9423
l000E9493:
	v16 = loc3
	return v16
	// succ:  fn000E9423_exit
l000E9498:
	return v16
	// succ:  fn000E9423_exit
fn000E9423_exit:


// fn000E949A
// Return size: 0
void fn000E949A(word32 arg0, word32 arg1, word32 arg2)
fn000E949A_entry:
	// succ:  l000E949A
l000E949A:
	v27 = Mem0[0x00140030<p32>:word32]
	loc27 = v27
	v27 = arg1
	loc18 = v27
	v27 = arg2
	loc19 = v27
	v27 = loc19
	v28 = loc18
	v27 = v27 - v28
	loc20 = v27
	v27 = loc20
	v28 = 0xFFFFFFEF<32>
	v29 = v27 >u v28
	loc21 = v29
	v27 = loc21
	branch !v27 l000E94C0
	// succ:  l000E94BA l000E94C0
l000E94BA:
	v27 = arg0
	fn0011B8A5(v27)
	// succ:  l000E94C0
l000E94C0:
	v27 = loc20
	v28 = 0xB<32>
	v29 = v27 <u v28
	loc22 = v29
	v27 = loc22
	branch !v27 l000E94E6
	// succ:  l000E94CB l000E94E6
l000E94CB:
	v27 = loc20
	v28 = 0xFF<32>
	v27 = v27 & v28
	loc23 = v27
	v27 = arg0
	v28 = 0xB<32>
	v27 = v27 + v28
	loc24 = v27
	v27 = loc24
	v28 = loc23
	v30 = SLICE(v28, byte, 0)
	Mem0[v27:byte] = v30
	v27 = arg0
	loc5 = v27
	goto l000E952D
	// succ:  l000E952D
l000E94E6:
	v27 = loc20
	v28 = 0x10<32>
	v27 = v27 + v28
	loc6 = v27
	v27 = loc6
	v28 = 0xFFFFFFF0<32>
	v27 = v27 & v28
	loc7 = v27
	v27 = loc7
	v27 = fn0011B67B(v27)
	loc8 = v27
	v27 = arg0
	v28 = loc8
	Mem0[v27:word32] = v28
	v27 = loc7
	v28 = 0x80000000<32>
	v27 = v27 | v28
	loc9 = v27
	v27 = arg0
	v28 = 8<32>
	v27 = v27 + v28
	loc10 = v27
	v27 = loc10
	v28 = loc9
	Mem0[v27:word32] = v28
	v27 = arg0
	v28 = 4<32>
	v27 = v27 + v28
	loc11 = v27
	v27 = loc11
	v28 = loc20
	Mem0[v27:word32] = v28
	v27 = loc8
	loc5 = v27
	// succ:  l000E952D
l000E952D:
	v27 = arg2
	loc12 = v27
	v27 = loc12
	v28 = loc18
	v27 = v27 - v28
	loc13 = v27
	v27 = arg1
	loc3 = v27
	v27 = loc5
	loc4 = v27
	// succ:  l000E9543
l000E9543:
	v27 = loc3
	v28 = arg2
	v29 = v27 == v28
	loc14 = v29
	v27 = loc14
	branch !v27 l000E9553
	// succ:  l000E9550 l000E9553
l000E9550:
	goto l000E9579
	// succ:  l000E9579
l000E9553:
	v27 = loc3
	v31 = Mem0[v27:int8]
	v27 = CONVERT(v31, int8, word32)
	loc15 = v27
	v27 = loc4
	v28 = loc15
	v32 = SLICE(v28, byte, 0)
	Mem0[v27:byte] = v32
	v27 = loc3
	v28 = 1<32>
	v27 = v27 + v28
	loc16 = v27
	v27 = loc4
	v28 = 1<32>
	v27 = v27 + v28
	loc17 = v27
	v27 = loc16
	loc3 = v27
	v27 = loc17
	loc4 = v27
	goto l000E952D
	// succ:  l000E952D
l000E9579:
	v27 = loc5
	v28 = loc13
	v27 = v27 + v28
	loc25 = v27
	v27 = loc25
	v28 = 0<32>
	v33 = SLICE(v28, byte, 0)
	Mem0[v27:byte] = v33
	return
	// succ:  fn000E949A_exit
l000E958A:
	return
	// succ:  fn000E949A_exit
fn000E949A_exit:


// fn000E958C
// Return size: 0
void fn000E958C(word32 arg0)
fn000E958C_entry:
	// succ:  l000E958C
l000E958C:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	return
	// succ:  fn000E958C_exit
l000E9593:
	return
	// succ:  fn000E958C_exit
fn000E958C_exit:


// fn000E9595
// Return size: 0
void fn000E9595(word32 arg0)
fn000E9595_entry:
	// succ:  l000E9595
l000E9595:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn000E9595_exit
l000E95A1:
	return
	// succ:  fn000E9595_exit
fn000E9595_exit:


// fn000E95A3
// Return size: 0
word32 fn000E95A3(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn000E95A3_entry:
	// succ:  l000E95A3
l000E95A3:
	v17 = Mem0[0x00140030<p32>:word32]
	loc19 = v17
	v17 = arg3
	loc6 = v17
	v17 = arg1
	loc7 = v17
	// succ:  l000E95B3
l000E95B3:
	v17 = loc6
	v18 = arg4
	v19 = v17 == v18
	loc13 = v19
	v17 = loc13
	branch !v17 l000E95C7
	// succ:  l000E95C0 l000E95C7
l000E95C0:
	v17 = 7<32>
	loc18 = v17
	goto l000E9623
	// succ:  l000E9623
l000E95C7:
	v17 = loc7
	v18 = arg2
	v19 = v17 == v18
	loc14 = v19
	v17 = loc14
	branch !v17 l000E95D9
	// succ:  l000E95D2 l000E95D9
l000E95D2:
	v17 = 0xFFFFFFFF<32>
	loc5 = v17
	goto l000E9623
	// succ:  l000E9623
l000E95D9:
	v17 = loc7
	v17 = Mem0[v17:word32]
	loc15 = v17
	v17 = loc6
	v17 = Mem0[v17:word32]
	loc16 = v17
	v17 = loc15
	v18 = loc16
	v19 = v17 < v18
	loc17 = v19
	v17 = loc17
	branch !v17 l000E95F9
	// succ:  l000E95F2 l000E95F9
l000E95F2:
	v17 = 0xFFFFFFFF<32>
	loc5 = v17
	goto l000E9623
	// succ:  l000E9623
l000E95F9:
	v17 = loc16
	v18 = loc15
	v19 = v17 < v18
	loc8 = v19
	v17 = loc8
	branch !v17 l000E960B
	// succ:  l000E9604 l000E960B
l000E9604:
	v17 = 1<32>
	loc5 = v17
	goto l000E9623
	// succ:  l000E9623
l000E960B:
	v17 = loc7
	v18 = 4<32>
	v17 = v17 + v18
	loc9 = v17
	v17 = loc6
	v18 = 4<32>
	v17 = v17 + v18
	loc10 = v17
	v17 = loc10
	loc6 = v17
	v17 = loc9
	loc7 = v17
	goto l000E95A3
	// succ:  l000E95A3
l000E9623:
	v17 = loc18
	v18 = 7<32>
	v19 = v17 == v18
	branch !v19 l000E963F
	// succ:  l000E962C l000E963F
l000E962C:
	v17 = loc7
	v18 = arg2
	v19 = v17 != v18
	loc11 = v19
	v17 = loc11
	v18 = 1<32>
	v17 = v17 & v18
	loc12 = v17
	v17 = loc12
	loc5 = v17
	// succ:  l000E963F
l000E963F:
	v17 = loc5
	return v17
	// succ:  fn000E95A3_exit
l000E9642:
	return v17
	// succ:  fn000E95A3_exit
fn000E95A3_exit:


// fn000E9644
// Return size: 0
void fn000E9644(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000E9644_entry:
	// succ:  l000E9644
l000E9644:
	v4 = Mem0[0x00140030<p32>:word32]
	loc5 = v4
	v4 = arg0
	v5 = 0<64>
	Mem0[v4:word64] = v5
	v4 = arg0
	v6 = 8<32>
	v4 = v4 + v6
	v6 = 0<32>
	Mem0[v4:word32] = v6
	v4 = arg0
	v6 = arg2
	v7 = arg3
	fn000E96D4(v4, v6, v7)
	return
	// succ:  fn000E9644_exit
l000E9665:
	return
	// succ:  fn000E9644_exit
fn000E9644_exit:


// fn000E9667
// Return size: 0
word32 fn000E9667(word32 arg0, word32 arg1, word32 arg2)
fn000E9667_entry:
	// succ:  l000E9667
l000E9667:
	v15 = Mem0[0x00140030<p32>:word32]
	loc15 = v15
	v15 = 0<32>
	loc3 = v15
	v15 = arg1
	loc4 = v15
	// succ:  l000E9677
l000E9677:
	v15 = loc4
	v16 = arg2
	v17 = v15 == v16
	loc7 = v17
	v15 = loc7
	branch !v15 l000E9687
	// succ:  l000E9684 l000E9687
l000E9684:
	goto l000E96CD
	// succ:  l000E96CD
l000E9687:
	v15 = loc3
	v16 = 4<32>
	v15 = v15 << v16
	loc8 = v15
	v15 = loc4
	v15 = Mem0[v15:word32]
	loc9 = v15
	v15 = loc9
	v16 = loc8
	v15 = v15 + v16
	loc10 = v15
	v15 = loc10
	v16 = 0xF0000000<32>
	v15 = v15 & v16
	loc11 = v15
	v15 = loc11
	v16 = 0x18<32>
	v15 = v15 >>u v16
	loc12 = v15
	v15 = loc12
	v16 = loc11
	v15 = v15 | v16
	loc13 = v15
	v15 = loc13
	v16 = loc10
	v15 = v15 ^ v16
	loc5 = v15
	v15 = loc4
	v16 = 4<32>
	v15 = v15 + v16
	loc6 = v15
	v15 = loc5
	loc3 = v15
	v15 = loc6
	loc4 = v15
	goto l000E9667
	// succ:  l000E9667
l000E96CD:
	v15 = loc3
	return v15
	// succ:  fn000E9667_exit
l000E96D2:
	return v15
	// succ:  fn000E9667_exit
fn000E9667_exit:


// fn000E96D4
// Return size: 0
void fn000E96D4(word32 arg0, word32 arg1, word32 arg2)
fn000E96D4_entry:
	// succ:  l000E96D4
l000E96D4:
	v33 = Mem0[0x00140030<p32>:word32]
	loc33 = v33
	v33 = arg1
	loc24 = v33
	v33 = arg2
	loc25 = v33
	v33 = loc25
	v34 = loc24
	v33 = v33 - v34
	loc26 = v33
	v33 = loc26
	v34 = 2<32>
	v33 = v33 >> v34
	loc27 = v33
	v33 = loc27
	v34 = 0x3FFFFFEF<32>
	v35 = v33 >u v34
	loc28 = v35
	v33 = loc28
	branch !v33 l000E9705
	// succ:  l000E96FF l000E9705
l000E96FF:
	v33 = arg0
	fn0011B8A5(v33)
	// succ:  l000E9705
l000E9705:
	v33 = loc27
	v34 = 2<32>
	v35 = v33 <u v34
	loc29 = v35
	// succ:  l000E970C
l000E970C:
	v33 = loc29
	branch !v33 l000E9734
	// succ:  l000E9712 l000E9734
l000E9712:
	v33 = loc27
	v34 = 0xFF<32>
	v33 = v33 & v34
	loc30 = v33
	v33 = arg0
	v34 = 8<32>
	v33 = v33 + v34
	loc6 = v33
	v33 = loc6
	v34 = 3<32>
	v33 = v33 + v34
	loc7 = v33
	v33 = loc7
	v34 = loc30
	v36 = SLICE(v34, byte, 0)
	Mem0[v33:byte] = v36
	v33 = arg0
	loc5 = v33
	goto l000E97AA
	// succ:  l000E97AA
l000E9734:
	v33 = loc27
	v34 = 4<32>
	v33 = v33 + v34
	loc8 = v33
	v33 = loc8
	v34 = 0xFFFFFFFC<32>
	v33 = v33 & v34
	loc9 = v33
	v33 = loc9
	v34 = 0x3FFFFFFF<32>
	v35 = v33 >u v34
	loc10 = v35
	v33 = loc10
	branch !v33 l000E9767
	// succ:  l000E9751 l000E9767
l000E9751:
	v33 = 4<32>
	v33 = ___cxa_allocate_exception(v33)
	loc11 = v33
	v33 = loc11
	fn0011EE8C(v33)
	v33 = loc11
	v34 = 0x9C8<32>
	v37 = 0x153<32>
	___cxa_throw(v33, v34, v37)
	goto l000E97A9
	// succ:  l000E97A9
l000E9767:
	v33 = loc9
	v34 = 2<32>
	v33 = v33 << v34
	loc12 = v33
	v33 = loc12
	v33 = fn0011B67B(v33)
	loc13 = v33
	v33 = arg0
	v34 = loc13
	Mem0[v33:word32] = v34
	v33 = loc9
	v34 = 0x80000000<32>
	v33 = v33 | v34
	loc14 = v33
	v33 = arg0
	v34 = 8<32>
	v33 = v33 + v34
	loc15 = v33
	v33 = loc15
	v34 = loc14
	Mem0[v33:word32] = v34
	v33 = arg0
	v34 = 4<32>
	v33 = v33 + v34
	loc16 = v33
	v33 = loc16
	v34 = loc27
	Mem0[v33:word32] = v34
	v33 = loc13
	loc5 = v33
	goto l000E97AB
	// succ:  l000E97AB
l000E97A9:
	// succ:  l000E97AA
l000E97AA:
	// succ:  l000E97AB
l000E97AB:
	v33 = arg2
	loc17 = v33
	v33 = loc17
	v34 = loc24
	v33 = v33 - v34
	loc18 = v33
	v33 = loc18
	v34 = 2<32>
	v33 = v33 >>u v34
	loc19 = v33
	v33 = arg1
	loc3 = v33
	v33 = loc5
	loc4 = v33
	// succ:  l000E97C8
l000E97C8:
	v33 = loc3
	v34 = arg2
	v35 = v33 == v34
	loc20 = v35
	v33 = loc20
	branch !v33 l000E97D8
	// succ:  l000E97D5 l000E97D8
l000E97D5:
	goto l000E97FE
	// succ:  l000E97FE
l000E97D8:
	v33 = loc3
	v33 = Mem0[v33:word32]
	loc21 = v33
	v33 = loc4
	v34 = loc21
	Mem0[v33:word32] = v34
	v33 = loc3
	v34 = 4<32>
	v33 = v33 + v34
	loc22 = v33
	v33 = loc4
	v34 = 4<32>
	v33 = v33 + v34
	loc23 = v33
	v33 = loc22
	loc3 = v33
	v33 = loc23
	loc4 = v33
	goto l000E97AB
	// succ:  l000E97AB
l000E97FE:
	v33 = loc5
	v34 = loc19
	v37 = 2<32>
	v34 = v34 << v37
	v33 = v33 + v34
	loc31 = v33
	v33 = loc31
	v34 = 0<32>
	Mem0[v33:word32] = v34
	return
	// succ:  fn000E96D4_exit
l000E9812:
	return
	// succ:  fn000E96D4_exit
fn000E96D4_exit:


// fn000E9814
// Return size: 0
void fn000E9814(word32 arg0)
fn000E9814_entry:
	// succ:  l000E9814
l000E9814:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	return
	// succ:  fn000E9814_exit
l000E981B:
	return
	// succ:  fn000E9814_exit
fn000E9814_exit:


// fn000E981D
// Return size: 0
void fn000E981D(word32 arg0)
fn000E981D_entry:
	// succ:  l000E981D
l000E981D:
	v4 = Mem0[0x00140030<p32>:word32]
	loc2 = v4
	v4 = arg0
	fn0011B709(v4)
	return
	// succ:  fn000E981D_exit
l000E9829:
	return
	// succ:  fn000E981D_exit
fn000E981D_exit:


// fn000E982B
// Return size: 0
word32 fn000E982B(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn000E982B_entry:
	// succ:  l000E982B
l000E982B:
	v72 = Mem0[0x00140030<p32>:word32]
	loc75 = v72
	v72 = Mem0[0x00140030<p32>:word32]
	v73 = 0x40<32>
	v72 = v72 + v73
	Mem0[0x00140030<p32>:word32] = v72
	v72 = Mem0[0x00140030<p32>:word32]
	v73 = Mem0[0x00140034<p32>:word32]
	v74 = v72 >= v73
	branch !v74 l000E9846
	// succ:  l000E9840 l000E9846
l000E9840:
	v72 = 0x40<32>
	abortStackOverflow(v72)
	// succ:  l000E9846
l000E9846:
	v72 = loc75
	v73 = 0x3C<32>
	v72 = v72 + v73
	loc10 = v72
	v72 = loc75
	v73 = 0x38<32>
	v72 = v72 + v73
	loc9 = v72
	v72 = loc75
	v73 = 0x34<32>
	v72 = v72 + v73
	loc8 = v72
	v72 = loc75
	v73 = 0x30<32>
	v72 = v72 + v73
	loc65 = v72
	v72 = loc75
	v73 = 0x2C<32>
	v72 = v72 + v73
	loc71 = v72
	v72 = loc75
	v73 = 0x28<32>
	v72 = v72 + v73
	loc72 = v72
	v72 = loc75
	v73 = 0x24<32>
	v72 = v72 + v73
	loc73 = v72
	v72 = loc75
	v73 = 0x20<32>
	v72 = v72 + v73
	loc15 = v72
	v72 = loc75
	v73 = 8<32>
	v72 = v72 + v73
	loc16 = v72
	v72 = loc75
	loc17 = v72
	v72 = arg3
	v73 = 4<32>
	v72 = v72 + v73
	loc18 = v72
	v72 = loc18
	v72 = Mem0[v72:word32]
	loc19 = v72
	v72 = loc19
	v73 = 1<32>
	v72 = v72 & v73
	loc20 = v72
	v72 = loc20
	v73 = 0<32>
	v74 = v72 == v73
	loc21 = v74
	// succ:  l000E98A5
l000E98A5:
	v72 = loc21
	v72 = v72
	// succ:  l000E98AB l000E98AB
l000E98AB:
	v72 = loc65
	v73 = 0xFFFFFFFF<32>
	Mem0[v72:word32] = v73
	v72 = arg0
	v72 = Mem0[v72:word32]
	loc22 = v72
	v72 = loc22
	v73 = 0x10<32>
	v72 = v72 + v73
	loc23 = v72
	v72 = loc23
	v72 = Mem0[v72:word32]
	loc24 = v72
	v72 = arg1
	v72 = Mem0[v72:word32]
	loc25 = v72
	v72 = loc71
	v73 = loc25
	Mem0[v72:word32] = v73
	v72 = arg2
	v72 = Mem0[v72:word32]
	loc26 = v72
	v72 = loc72
	v73 = loc26
	Mem0[v72:word32] = v73
	v72 = loc8
	v73 = loc71
	v73 = Mem0[v73:word32]
	Mem0[v72:word32] = v73
	v72 = loc9
	v73 = loc72
	v73 = Mem0[v73:word32]
	Mem0[v72:word32] = v73
	v72 = arg0
	v73 = loc8
	v75 = loc9
	v76 = arg3
	v77 = arg4
	v78 = loc65
	v79 = loc24
	v80 = 0x1FF<32>
	v79 = v79 & v80
	v80 = 0x900<32>
	v79 = v79 + v80
fn000E982B_exit:


// fn000E9B8F
// Return size: 0
word32 fn000E9B8F(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn000E9B8F_entry:
	// succ:  l000E9B8F
l000E9B8F:
	v11 = Mem0[0x00140030<p32>:word32]
	loc14 = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = 0x10<32>
	v11 = v11 + v12
	Mem0[0x00140030<p32>:word32] = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = Mem0[0x00140034<p32>:word32]
	v13 = v11 >= v12
	branch !v13 l000E9BA8
	// succ:  l000E9BA3 l000E9BA8
l000E9BA3:
	v11 = 0x10<32>
	abortStackOverflow(v11)
	// succ:  l000E9BA8
l000E9BA8:
	v11 = loc14
	v12 = 0xC<32>
	v11 = v11 + v12
	loc7 = v11
	v11 = loc14
	v12 = 8<32>
	v11 = v11 + v12
	loc6 = v11
	v11 = loc14
	v12 = 4<32>
	v11 = v11 + v12
	loc9 = v11
	v11 = loc14
	loc10 = v11
	v11 = arg1
	v11 = Mem0[v11:word32]
	loc11 = v11
	v11 = loc9
	v12 = loc11
	Mem0[v11:word32] = v12
	v11 = arg2
	v11 = Mem0[v11:word32]
	loc12 = v11
	v11 = loc10
	v12 = loc12
	Mem0[v11:word32] = v12
	v11 = loc6
	v12 = loc9
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = loc7
	v12 = loc10
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = arg0
	v12 = loc6
	v14 = loc7
	v15 = arg3
	v16 = arg4
	v17 = arg5
	v11 = fn000F089A(v11, v12, v14, v15, v16, v17)
	loc8 = v11
	v11 = loc14
	Mem0[0x00140030<p32>:word32] = v11
	v11 = loc8
	return v11
	// succ:  fn000E9B8F_exit
l000E9C09:
	return v11
	// succ:  fn000E9B8F_exit
fn000E9B8F_exit:


// fn000E9C0B
// Return size: 0
word32 fn000E9C0B(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn000E9C0B_entry:
	// succ:  l000E9C0B
l000E9C0B:
	v11 = Mem0[0x00140030<p32>:word32]
	loc14 = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = 0x10<32>
	v11 = v11 + v12
	Mem0[0x00140030<p32>:word32] = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = Mem0[0x00140034<p32>:word32]
	v13 = v11 >= v12
	branch !v13 l000E9C24
	// succ:  l000E9C1F l000E9C24
l000E9C1F:
	v11 = 0x10<32>
	abortStackOverflow(v11)
	// succ:  l000E9C24
l000E9C24:
	v11 = loc14
	v12 = 0xC<32>
	v11 = v11 + v12
	loc7 = v11
	v11 = loc14
	v12 = 8<32>
	v11 = v11 + v12
	loc6 = v11
	v11 = loc14
	v12 = 4<32>
	v11 = v11 + v12
	loc9 = v11
	v11 = loc14
	loc10 = v11
	v11 = arg1
	v11 = Mem0[v11:word32]
	loc11 = v11
	v11 = loc9
	v12 = loc11
	Mem0[v11:word32] = v12
	v11 = arg2
	v11 = Mem0[v11:word32]
	loc12 = v11
	v11 = loc10
	v12 = loc12
	Mem0[v11:word32] = v12
	v11 = loc6
	v12 = loc9
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = loc7
	v12 = loc10
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = arg0
	v12 = loc6
	v14 = loc7
	v15 = arg3
	v16 = arg4
	v17 = arg5
	v11 = fn000EFEEF(v11, v12, v14, v15, v16, v17)
	loc8 = v11
	v11 = loc14
	Mem0[0x00140030<p32>:word32] = v11
	v11 = loc8
	return v11
	// succ:  fn000E9C0B_exit
l000E9C85:
	return v11
	// succ:  fn000E9C0B_exit
fn000E9C0B_exit:


// fn000E9C87
// Return size: 0
word32 fn000E9C87(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn000E9C87_entry:
	// succ:  l000E9C87
l000E9C87:
	v11 = Mem0[0x00140030<p32>:word32]
	loc14 = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = 0x10<32>
	v11 = v11 + v12
	Mem0[0x00140030<p32>:word32] = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = Mem0[0x00140034<p32>:word32]
	v13 = v11 >= v12
	branch !v13 l000E9CA0
	// succ:  l000E9C9B l000E9CA0
l000E9C9B:
	v11 = 0x10<32>
	abortStackOverflow(v11)
	// succ:  l000E9CA0
l000E9CA0:
	v11 = loc14
	v12 = 0xC<32>
	v11 = v11 + v12
	loc7 = v11
	v11 = loc14
	v12 = 8<32>
	v11 = v11 + v12
	loc6 = v11
	v11 = loc14
	v12 = 4<32>
	v11 = v11 + v12
	loc9 = v11
	v11 = loc14
	loc10 = v11
	v11 = arg1
	v11 = Mem0[v11:word32]
	loc11 = v11
	v11 = loc9
	v12 = loc11
	Mem0[v11:word32] = v12
	v11 = arg2
	v11 = Mem0[v11:word32]
	loc12 = v11
	v11 = loc10
	v12 = loc12
	Mem0[v11:word32] = v12
	v11 = loc6
	v12 = loc9
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = loc7
	v12 = loc10
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = arg0
	v12 = loc6
	v14 = loc7
	v15 = arg3
	v16 = arg4
	v17 = arg5
	v11 = fn000EF520(v11, v12, v14, v15, v16, v17)
	loc8 = v11
	v11 = loc14
	Mem0[0x00140030<p32>:word32] = v11
	v11 = loc8
	return v11
	// succ:  fn000E9C87_exit
l000E9D01:
	return v11
	// succ:  fn000E9C87_exit
fn000E9C87_exit:


// fn000E9D03
// Return size: 0
word32 fn000E9D03(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn000E9D03_entry:
	// succ:  l000E9D03
l000E9D03:
	v11 = Mem0[0x00140030<p32>:word32]
	loc14 = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = 0x10<32>
	v11 = v11 + v12
	Mem0[0x00140030<p32>:word32] = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = Mem0[0x00140034<p32>:word32]
	v13 = v11 >= v12
	branch !v13 l000E9D1C
	// succ:  l000E9D17 l000E9D1C
l000E9D17:
	v11 = 0x10<32>
	abortStackOverflow(v11)
	// succ:  l000E9D1C
l000E9D1C:
	v11 = loc14
	v12 = 0xC<32>
	v11 = v11 + v12
	loc7 = v11
	v11 = loc14
	v12 = 8<32>
	v11 = v11 + v12
	loc6 = v11
	v11 = loc14
	v12 = 4<32>
	v11 = v11 + v12
	loc9 = v11
	v11 = loc14
	loc10 = v11
	v11 = arg1
	v11 = Mem0[v11:word32]
	loc11 = v11
	v11 = loc9
	v12 = loc11
	Mem0[v11:word32] = v12
	v11 = arg2
	v11 = Mem0[v11:word32]
	loc12 = v11
	v11 = loc10
	v12 = loc12
	Mem0[v11:word32] = v12
	v11 = loc6
	v12 = loc9
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = loc7
	v12 = loc10
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = arg0
	v12 = loc6
	v14 = loc7
	v15 = arg3
	v16 = arg4
	v17 = arg5
	v11 = fn000EEB54(v11, v12, v14, v15, v16, v17)
	loc8 = v11
	v11 = loc14
	Mem0[0x00140030<p32>:word32] = v11
	v11 = loc8
	return v11
	// succ:  fn000E9D03_exit
l000E9D7D:
	return v11
	// succ:  fn000E9D03_exit
fn000E9D03_exit:


// fn000E9D7F
// Return size: 0
word32 fn000E9D7F(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn000E9D7F_entry:
	// succ:  l000E9D7F
l000E9D7F:
	v11 = Mem0[0x00140030<p32>:word32]
	loc14 = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = 0x10<32>
	v11 = v11 + v12
	Mem0[0x00140030<p32>:word32] = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = Mem0[0x00140034<p32>:word32]
	v13 = v11 >= v12
	branch !v13 l000E9D98
	// succ:  l000E9D93 l000E9D98
l000E9D93:
	v11 = 0x10<32>
	abortStackOverflow(v11)
	// succ:  l000E9D98
l000E9D98:
	v11 = loc14
	v12 = 0xC<32>
	v11 = v11 + v12
	loc7 = v11
	v11 = loc14
	v12 = 8<32>
	v11 = v11 + v12
	loc6 = v11
	v11 = loc14
	v12 = 4<32>
	v11 = v11 + v12
	loc9 = v11
	v11 = loc14
	loc10 = v11
	v11 = arg1
	v11 = Mem0[v11:word32]
	loc11 = v11
	v11 = loc9
	v12 = loc11
	Mem0[v11:word32] = v12
	v11 = arg2
	v11 = Mem0[v11:word32]
	loc12 = v11
	v11 = loc10
	v12 = loc12
	Mem0[v11:word32] = v12
	v11 = loc6
	v12 = loc9
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = loc7
	v12 = loc10
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = arg0
	v12 = loc6
	v14 = loc7
	v15 = arg3
	v16 = arg4
	v17 = arg5
	v11 = fn000EE188(v11, v12, v14, v15, v16, v17)
	loc8 = v11
	v11 = loc14
	Mem0[0x00140030<p32>:word32] = v11
	v11 = loc8
	return v11
	// succ:  fn000E9D7F_exit
l000E9DF9:
	return v11
	// succ:  fn000E9D7F_exit
fn000E9D7F_exit:


// fn000E9DFB
// Return size: 0
word32 fn000E9DFB(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn000E9DFB_entry:
	// succ:  l000E9DFB
l000E9DFB:
	v11 = Mem0[0x00140030<p32>:word32]
	loc14 = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = 0x10<32>
	v11 = v11 + v12
	Mem0[0x00140030<p32>:word32] = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = Mem0[0x00140034<p32>:word32]
	v13 = v11 >= v12
	branch !v13 l000E9E14
	// succ:  l000E9E0F l000E9E14
l000E9E0F:
	v11 = 0x10<32>
	abortStackOverflow(v11)
	// succ:  l000E9E14
l000E9E14:
	v11 = loc14
	v12 = 0xC<32>
	v11 = v11 + v12
	loc7 = v11
	v11 = loc14
	v12 = 8<32>
	v11 = v11 + v12
	loc6 = v11
	v11 = loc14
	v12 = 4<32>
	v11 = v11 + v12
	loc9 = v11
	v11 = loc14
	loc10 = v11
	v11 = arg1
	v11 = Mem0[v11:word32]
	loc11 = v11
	v11 = loc9
	v12 = loc11
	Mem0[v11:word32] = v12
	v11 = arg2
	v11 = Mem0[v11:word32]
	loc12 = v11
	v11 = loc10
	v12 = loc12
	Mem0[v11:word32] = v12
	v11 = loc6
	v12 = loc9
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = loc7
	v12 = loc10
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = arg0
	v12 = loc6
	v14 = loc7
	v15 = arg3
	v16 = arg4
	v17 = arg5
	v11 = fn000ED5B7(v11, v12, v14, v15, v16, v17)
	loc8 = v11
	v11 = loc14
	Mem0[0x00140030<p32>:word32] = v11
	v11 = loc8
	return v11
	// succ:  fn000E9DFB_exit
l000E9E75:
	return v11
	// succ:  fn000E9DFB_exit
fn000E9DFB_exit:


// fn000E9E77
// Return size: 0
word32 fn000E9E77(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn000E9E77_entry:
	// succ:  l000E9E77
l000E9E77:
	v11 = Mem0[0x00140030<p32>:word32]
	loc14 = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = 0x10<32>
	v11 = v11 + v12
	Mem0[0x00140030<p32>:word32] = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = Mem0[0x00140034<p32>:word32]
	v13 = v11 >= v12
	branch !v13 l000E9E90
	// succ:  l000E9E8B l000E9E90
l000E9E8B:
	v11 = 0x10<32>
	abortStackOverflow(v11)
	// succ:  l000E9E90
l000E9E90:
	v11 = loc14
	v12 = 0xC<32>
	v11 = v11 + v12
	loc7 = v11
	v11 = loc14
	v12 = 8<32>
	v11 = v11 + v12
	loc6 = v11
	v11 = loc14
	v12 = 4<32>
	v11 = v11 + v12
	loc9 = v11
	v11 = loc14
	loc10 = v11
	v11 = arg1
	v11 = Mem0[v11:word32]
	loc11 = v11
	v11 = loc9
	v12 = loc11
	Mem0[v11:word32] = v12
	v11 = arg2
	v11 = Mem0[v11:word32]
	loc12 = v11
	v11 = loc10
	v12 = loc12
	Mem0[v11:word32] = v12
	v11 = loc6
	v12 = loc9
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = loc7
	v12 = loc10
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = arg0
	v12 = loc6
	v14 = loc7
	v15 = arg3
	v16 = arg4
	v17 = arg5
	v11 = fn000ECBDB(v11, v12, v14, v15, v16, v17)
	loc8 = v11
	v11 = loc14
	Mem0[0x00140030<p32>:word32] = v11
	v11 = loc8
	return v11
	// succ:  fn000E9E77_exit
l000E9EF1:
	return v11
	// succ:  fn000E9E77_exit
fn000E9E77_exit:


// fn000E9EF3
// Return size: 0
word32 fn000E9EF3(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn000E9EF3_entry:
	// succ:  l000E9EF3
l000E9EF3:
	v11 = Mem0[0x00140030<p32>:word32]
	loc14 = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = 0x10<32>
	v11 = v11 + v12
	Mem0[0x00140030<p32>:word32] = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = Mem0[0x00140034<p32>:word32]
	v13 = v11 >= v12
	branch !v13 l000E9F0C
	// succ:  l000E9F07 l000E9F0C
l000E9F07:
	v11 = 0x10<32>
	abortStackOverflow(v11)
	// succ:  l000E9F0C
l000E9F0C:
	v11 = loc14
	v12 = 0xC<32>
	v11 = v11 + v12
	loc7 = v11
	v11 = loc14
	v12 = 8<32>
	v11 = v11 + v12
	loc6 = v11
	v11 = loc14
	v12 = 4<32>
	v11 = v11 + v12
	loc9 = v11
	v11 = loc14
	loc10 = v11
	v11 = arg1
	v11 = Mem0[v11:word32]
	loc11 = v11
	v11 = loc9
	v12 = loc11
	Mem0[v11:word32] = v12
	v11 = arg2
	v11 = Mem0[v11:word32]
	loc12 = v11
	v11 = loc10
	v12 = loc12
	Mem0[v11:word32] = v12
	v11 = loc6
	v12 = loc9
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = loc7
	v12 = loc10
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = arg0
	v12 = loc6
	v14 = loc7
	v15 = arg3
	v16 = arg4
	v17 = arg5
	v11 = fn000EC1F8(v11, v12, v14, v15, v16, v17)
	loc8 = v11
	v11 = loc14
	Mem0[0x00140030<p32>:word32] = v11
	v11 = loc8
	return v11
	// succ:  fn000E9EF3_exit
l000E9F6D:
	return v11
	// succ:  fn000E9EF3_exit
fn000E9EF3_exit:


// fn000E9F6F
// Return size: 0
word32 fn000E9F6F(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4, word32 arg5)
fn000E9F6F_entry:
	// succ:  l000E9F6F
l000E9F6F:
	v11 = Mem0[0x00140030<p32>:word32]
	loc14 = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = 0x10<32>
	v11 = v11 + v12
	Mem0[0x00140030<p32>:word32] = v11
	v11 = Mem0[0x00140030<p32>:word32]
	v12 = Mem0[0x00140034<p32>:word32]
	v13 = v11 >= v12
	branch !v13 l000E9F88
	// succ:  l000E9F83 l000E9F88
l000E9F83:
	v11 = 0x10<32>
	abortStackOverflow(v11)
	// succ:  l000E9F88
l000E9F88:
	v11 = loc14
	v12 = 0xC<32>
	v11 = v11 + v12
	loc7 = v11
	v11 = loc14
	v12 = 8<32>
	v11 = v11 + v12
	loc6 = v11
	v11 = loc14
	v12 = 4<32>
	v11 = v11 + v12
	loc9 = v11
	v11 = loc14
	loc10 = v11
	v11 = arg1
	v11 = Mem0[v11:word32]
	loc11 = v11
	v11 = loc9
	v12 = loc11
	Mem0[v11:word32] = v12
	v11 = arg2
	v11 = Mem0[v11:word32]
	loc12 = v11
	v11 = loc10
	v12 = loc12
	Mem0[v11:word32] = v12
	v11 = loc6
	v12 = loc9
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = loc7
	v12 = loc10
	v12 = Mem0[v12:word32]
	Mem0[v11:word32] = v12
	v11 = arg0
	v12 = loc6
	v14 = loc7
	v15 = arg3
	v16 = arg4
	v17 = arg5
	v11 = fn000EB025(v11, v12, v14, v15, v16, v17)
	loc8 = v11
	v11 = loc14
	Mem0[0x00140030<p32>:word32] = v11
	v11 = loc8
	return v11
	// succ:  fn000E9F6F_exit
l000E9FE9:
	return v11
	// succ:  fn000E9F6F_exit
fn000E9F6F_exit:


// fn000EA9F7
// Return size: 0
word32 fn000EA9F7(word32 arg0, word32 arg1)
fn000EA9F7_entry:
	// succ:  l000EA9F7
l000EA9F7:
	v7 = Mem0[0x00140030<p32>:word32]
	loc6 = v7
	v7 = arg0
	v7 = Mem0[v7:word32]
	loc2 = v7
	v7 = arg1
	v7 = fn000EAE12(v7)
	loc3 = v7
	v7 = loc2
	v8 = loc3
	v7 = fn000EAEAB(v7, v8)
	loc4 = v7
	v7 = loc4
	return v7
	// succ:  fn000EA9F7_exit
l000EAA17:
	return v7
	// succ:  fn000EA9F7_exit
fn000EA9F7_exit:


// fn000EAD0D
// Return size: 0
word32 fn000EAD0D()
fn000EAD0D_entry:
	// succ:  l000EAD0D
l000EAD0D:
	v14 = Mem0[0x00140030<p32>:word32]
	loc11 = v14
	v14 = 0x4390<32>
	v15 = Mem0[v14:int8]
	v14 = CONVERT(v15, int8, word32)
	loc0 = v14
	v14 = loc0
	v16 = 0x18<32>
	v14 = v14 << v16
	v16 = 0x18<32>
	v14 = v14 >> v16
	v16 = 0<32>
	v17 = v14 == v16
	loc1 = v17
	// succ:  l000EAD29
l000EAD29:
	v14 = loc1
	branch !v14 l000EAD89
	// succ:  l000EAD2F l000EAD89
l000EAD2F:
	v14 = 0x4390<32>
	v14 = fn0011EE46(v14)
	loc2 = v14
	v14 = loc2
	v16 = 0<32>
	v17 = v14 == v16
	loc3 = v17
	v14 = loc3
	v17 = v14 == 0<32>
	branch !v17 l000EAD88
	// succ:  l000EAD44 l000EAD88
l000EAD44:
	v14 = 0<32>
	Mem0[0x00140048<p32>:word32] = v14
	v14 = 0x17D<32>
	v16 = 0x7FFFFFFF<32>
	v18 = 0x37CF<32>
	v19 = 0<32>
	v14 = invoke_iiii(v14, v16, v18, v19)
	loc4 = v14
	v14 = Mem0[0x00140048<p32>:word32]
	loc5 = v14
	v14 = 0<32>
	Mem0[0x00140048<p32>:word32] = v14
	v14 = loc5
	v16 = 1<32>
	v14 = v14 & v16
	loc6 = v14
	v14 = loc6
	branch !v14 l000EAD7B
	// succ:  l000EAD6E l000EAD7B
l000EAD6E:
	v14 = ___cxa_find_matching_catch_2()
	loc8 = v14
	v14 = Mem0[0x00140094<p32>:word32]
	loc9 = v14
	v14 = loc8
	___resumeException(v14)
	goto l000EAD86
	// succ:  l000EAD86
l000EAD7B:
	v14 = 0x4C78<32>
	v16 = loc4
	Mem0[v14:word32] = v16
	goto l000EAD89
	// succ:  l000EAD89
l000EAD86:
	// succ:  l000EAD88
l000EAD88:
	// succ:  l000EAD89
l000EAD89:
	// succ:  l000EAD89
l000EAD89:
	v14 = 0x4C78<32>
	v14 = Mem0[v14:word32]
	loc7 = v14
	v14 = loc7
	return v14
	// succ:  fn000EAD0D_exit
l000EAD96:
	return v14
	// succ:  fn000EAD0D_exit
fn000EAD0D_exit:


// fn000EAD98
// Return size: 0
word32 fn000EAD98(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000EAD98_entry:
	// succ:  l000EAD98
l000EAD98:
	v12 = Mem0[0x00140030<p32>:word32]
	loc13 = v12
	v12 = Mem0[0x00140030<p32>:word32]
	v13 = 0x10<32>
	v12 = v12 + v13
	Mem0[0x00140030<p32>:word32] = v12
	v12 = Mem0[0x00140030<p32>:word32]
	v13 = Mem0[0x00140034<p32>:word32]
	v14 = v12 >= v13
	branch !v14 l000EADB1
	// succ:  l000EADAC l000EADB1
l000EADAC:
	v12 = 0x10<32>
	abortStackOverflow(v12)
	// succ:  l000EADB1
l000EADB1:
	v12 = loc13
	loc5 = v12
	v12 = loc5
	v13 = arg3
	Mem0[v12:word32] = v13
	v12 = arg1
	v12 = fn000DB419(v12)
	loc6 = v12
	v12 = arg0
	v13 = arg2
	v15 = loc5
	v12 = fn000DB988(v12, v13, v15)
	loc7 = v12
	v12 = loc6
	v13 = 0<32>
	v14 = v12 == v13
	loc8 = v14
	v12 = loc8
	v14 = v12 == 0<32>
	branch !v14 l000EAE09
	// succ:  l000EADDA l000EAE09
l000EADDA:
	v12 = 0<32>
	Mem0[0x00140048<p32>:word32] = v12
	v12 = 0x17E<32>
	v13 = loc6
	v12 = invoke_ii(v12, v13)
	v12 = Mem0[0x00140048<p32>:word32]
	loc9 = v12
	v12 = 0<32>
	Mem0[0x00140048<p32>:word32] = v12
	v12 = loc9
	v13 = 1<32>
	v12 = v12 & v13
	loc10 = v12
	v12 = loc10
	branch !v12 l000EAE08
	// succ:  l000EADF9 l000EAE08
l000EADF9:
	v12 = 0<32>
	v12 = ___cxa_find_matching_catch_3(v12)
	loc11 = v12
	v12 = Mem0[0x00140094<p32>:word32]
	loc4 = v12
	v12 = loc11
	fn000D0E65(v12)
	// succ:  l000EAE08
l000EAE08:
	// succ:  l000EAE09
l000EAE09:
	v12 = loc13
	Mem0[0x00140030<p32>:word32] = v12
	v12 = loc7
	return v12
	// succ:  fn000EAD98_exit
l000EAE10:
	return v12
	// succ:  fn000EAD98_exit
fn000EAD98_exit:


// fn000EAE12
// Return size: 0
word32 fn000EAE12(word32 arg0)
fn000EAE12_entry:
	// succ:  l000EAE12
l000EAE12:
	v14 = Mem0[0x00140030<p32>:word32]
	loc12 = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = 0x20<32>
	v14 = v14 + v15
	Mem0[0x00140030<p32>:word32] = v14
	v14 = Mem0[0x00140030<p32>:word32]
	v15 = Mem0[0x00140034<p32>:word32]
	v16 = v14 >= v15
	branch !v16 l000EAE2B
	// succ:  l000EAE26 l000EAE2B
l000EAE26:
	v14 = 0x20<32>
	abortStackOverflow(v14)
	// succ:  l000EAE2B
l000EAE2B:
	v14 = loc12
	v15 = 0x10<32>
	v14 = v14 + v15
	loc3 = v14
	v14 = loc12
	v15 = 0xC<32>
	v14 = v14 + v15
	loc4 = v14
	v14 = loc12
	loc5 = v14
	v14 = loc5
	v15 = arg0
	Mem0[v14:word32] = v15
	v14 = loc5
	v15 = 4<32>
	v14 = v14 + v15
	loc1 = v14
	v14 = loc1
	v15 = 0x17F<32>
	Mem0[v14:word32] = v15
	v14 = loc5
	v15 = 8<32>
	v14 = v14 + v15
	loc2 = v14
	v14 = loc2
	v15 = 0<32>
	Mem0[v14:word32] = v15
	v14 = arg0
	v14 = Mem0[v14:word32]
	loc6 = v14
	v14 = loc6
	v15 = 0xFFFFFFFF<32>
	v16 = v14 == v15
	loc7 = v16
	v14 = loc7
	v16 = v14 == 0<32>
	branch !v16 l000EAE8D
	// succ:  l000EAE74 l000EAE8D
l000EAE74:
	v14 = loc3
	v15 = loc5
	Mem0[v14:word32] = v15
	v14 = loc4
	v15 = loc3
	Mem0[v14:word32] = v15
	v14 = arg0
	v15 = loc4
	v17 = 0x180<32>
	fn0011B49F(v14, v15, v17)
	// succ:  l000EAE8D
l000EAE8D:
	v14 = arg0
	v15 = 4<32>
	v14 = v14 + v15
	loc8 = v14
	v14 = loc8
	v14 = Mem0[v14:word32]
	loc9 = v14
	v14 = loc9
	v15 = 0xFFFFFFFF<32>
	v14 = v14 + v15
	loc10 = v14
	v14 = loc12
	Mem0[0x00140030<p32>:word32] = v14
	v14 = loc10
	return v14
	// succ:  fn000EAE12_exit
l000EAEA9:
	return v14
	// succ:  fn000EAE12_exit
fn000EAE12_exit:


// fn000EAEFC
// Return size: 0
word32 fn000EAEFC(word32 arg0, word32 arg1)
fn000EAEFC_entry:
	// succ:  l000EAEFC
l000EAEFC:
	v16 = Mem0[0x00140030<p32>:word32]
	loc15 = v16
	v16 = arg0
	v17 = 8<32>
	v16 = v16 + v17
	loc6 = v16
	v16 = arg0
	v17 = 0xC<32>
	v16 = v16 + v17
	loc7 = v16
	v16 = loc7
	v16 = Mem0[v16:word32]
	loc8 = v16
	v16 = loc6
	v16 = Mem0[v16:word32]
	loc9 = v16
	v16 = loc8
	v17 = loc9
	v16 = v16 - v17
	loc10 = v16
	v16 = loc10
	v17 = 2<32>
	v16 = v16 >> v17
	loc11 = v16
	v16 = loc11
	v17 = arg1
	v18 = v16 >u v17
	loc12 = v18
	v16 = loc12
	branch !v16 l000EAF58
	// succ:  l000EAF37 l000EAF58
l000EAF37:
	v16 = loc9
	loc13 = v16
	v16 = loc13
	v17 = arg1
	v19 = 2<32>
	v17 = v17 << v19
	v16 = v16 + v17
	loc2 = v16
	v16 = loc2
	v16 = Mem0[v16:word32]
	loc3 = v16
	v16 = loc3
	v17 = 0<32>
	v18 = v16 != v17
	loc4 = v18
	v16 = loc4
	loc5 = v16
	goto l000EAF5C
	// succ:  l000EAF5C
l000EAF58:
	v16 = 0<32>
	loc5 = v16
	// succ:  l000EAF5C
l000EAF5C:
	v16 = loc5
	return v16
	// succ:  fn000EAEFC_exit
l000EAF60:
	return v16
	// succ:  fn000EAEFC_exit
fn000EAEFC_exit:


// fn000EAF62
// Return size: 0
void fn000EAF62(word32 arg0)
fn000EAF62_entry:
	// succ:  l000EAF62
l000EAF62:
	v8 = Mem0[0x00140030<p32>:word32]
	loc6 = v8
	v8 = 0x4C7C<32>
	v8 = Mem0[v8:word32]
	loc1 = v8
	v8 = loc1
	v9 = 1<32>
	v8 = v8 + v9
	loc2 = v8
	v8 = 0x4C7C<32>
	v9 = loc2
	Mem0[v8:word32] = v9
	v8 = loc1
	v9 = 1<32>
	v8 = v8 + v9
	loc3 = v8
	v8 = arg0
	v9 = 4<32>
	v8 = v8 + v9
	loc4 = v8
	v8 = loc4
	v9 = loc3
	Mem0[v8:word32] = v9
	return
	// succ:  fn000EAF62_exit
l000EAF97:
	return
	// succ:  fn000EAF62_exit
fn000EAF62_exit:


// fn000EAF99
// Return size: 0
void fn000EAF99(word32 arg0)
fn000EAF99_entry:
	// succ:  l000EAF99
l000EAF99:
	v20 = Mem0[0x00140030<p32>:word32]
	loc18 = v20
	v20 = arg0
	v20 = Mem0[v20:word32]
	loc5 = v20
	v20 = loc5
	v20 = Mem0[v20:word32]
	loc9 = v20
	v20 = loc9
	v21 = 4<32>
	v20 = v20 + v21
	loc1 = v20
	v20 = loc1
	v20 = Mem0[v20:word32]
	loc3 = v20
	v20 = loc9
	v21 = 8<32>
	v20 = v20 + v21
	loc2 = v20
	v20 = loc2
	v20 = Mem0[v20:word32]
	loc4 = v20
	v20 = loc9
	v20 = Mem0[v20:word32]
	loc10 = v20
	v20 = loc4
	v21 = 1<32>
	v20 = v20 >> v21
	loc11 = v20
	v20 = loc10
	v21 = loc11
	v20 = v20 + v21
	loc12 = v20
	v20 = loc4
	v21 = 1<32>
	v20 = v20 & v21
	loc13 = v20
	v20 = loc13
	v21 = 0<32>
	v22 = v20 == v21
	loc14 = v22
	v20 = loc14
	branch !v20 l000EAFF9
	// succ:  l000EAFF0 l000EAFF9
l000EAFF0:
	v20 = loc3
	loc7 = v20
	v20 = loc7
	loc8 = v20
	goto l000EB012
	// succ:  l000EB012
l000EAFF9:
	v20 = loc12
	v20 = Mem0[v20:word32]
	loc15 = v20
	v20 = loc15
	v21 = loc3
	v20 = v20 + v21
	loc16 = v20
	v20 = loc16
	v20 = Mem0[v20:word32]
	loc6 = v20
	v20 = loc6
	loc8 = v20
	// succ:  l000EB012
l000EB012:
	v20 = loc12
	v21 = loc8
	v23 = 0x1FF<32>
	v21 = v21 & v23
	v23 = 0x500<32>
	v21 = v21 + v23
fn000EAF99_exit:


// fn000EB941
// Return size: 0
void fn000EB941(word32 arg0, word32 arg1, word32 arg2, word32 arg3, word32 arg4)
fn000EB941_entry:
	// succ:  l000EB941
l000EB941:
	v40 = Mem0[0x00140030<p32>:word32]
	loc42 = v40
	v40 = Mem0[0x00140030<p32>:word32]
	v41 = 0x10<32>
	v40 = v40 + v41
	Mem0[0x00140030<p32>:word32] = v40
	v40 = Mem0[0x00140030<p32>:word32]
	v41 = Mem0[0x00140034<p32>:word32]
	v42 = v40 >= v41
	branch !v42 l000EB95A
	// succ:  l000EB955 l000EB95A
l000EB955:
	v40 = 0x10<32>
	abortStackOverflow(v40)
	// succ:  l000EB95A
l000EB95A:
	v40 = loc42
	loc36 = v40
	v40 = arg1
	v40 = fn000E64CA(v40)
	loc37 = v40
	v40 = loc36
	v41 = loc37
	Mem0[v40:word32] = v41
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = 0x164<32>
	v41 = loc36
	v43 = 0x4C70<32>
	v40 = invoke_iii(v40, v41, v43)
	loc38 = v40
	v40 = Mem0[0x00140048<p32>:word32]
	loc39 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = loc39
	v41 = 1<32>
	v40 = v40 & v41
	loc40 = v40
	v40 = loc40
	branch !v40 l000EB995
	// succ:  l000EB990 l000EB995
l000EB990:
	v40 = 8<32>
	loc41 = v40
	goto l000EBACD
	// succ:  l000EBACD
l000EB995:
	v40 = loc38
	v40 = Mem0[v40:word32]
	loc7 = v40
	v40 = loc7
	v41 = 0x20<32>
	v40 = v40 + v41
	loc8 = v40
	v40 = loc8
	v40 = Mem0[v40:word32]
	loc9 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = loc9
	v41 = loc38
	v43 = 0x37AB<32>
	v44 = 0x37CB<32>
	v45 = arg2
	v40 = invoke_iiiii(v40, v41, v43, v44, v45)
	v40 = Mem0[0x00140048<p32>:word32]
	loc10 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = loc10
	v41 = 1<32>
	v40 = v40 & v41
	loc11 = v40
	v40 = loc11
	branch !v40 l000EB9D7
	// succ:  l000EB9D2 l000EB9D7
l000EB9D2:
	v40 = 8<32>
	loc41 = v40
	goto l000EBACC
	// succ:  l000EBACC
l000EB9D7:
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = 0x164<32>
	v41 = loc36
	v43 = 0x4C80<32>
	v40 = invoke_iii(v40, v41, v43)
	loc12 = v40
	v40 = Mem0[0x00140048<p32>:word32]
	loc13 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = loc13
	v41 = 1<32>
	v40 = v40 & v41
	loc14 = v40
	v40 = loc14
	branch !v40 l000EBA00
	// succ:  l000EB9FB l000EBA00
l000EB9FB:
	v40 = 8<32>
	loc41 = v40
	goto l000EBACB
	// succ:  l000EBACB
l000EBA00:
	v40 = loc12
	v40 = Mem0[v40:word32]
	loc15 = v40
	v40 = loc15
	v41 = 0xC<32>
	v40 = v40 + v41
	loc16 = v40
	v40 = loc16
	v40 = Mem0[v40:word32]
	loc17 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = loc17
	v41 = loc12
	v40 = invoke_ii(v40, v41)
	loc18 = v40
	v40 = Mem0[0x00140048<p32>:word32]
	loc19 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = loc19
	v41 = 1<32>
	v40 = v40 & v41
	loc20 = v40
	v40 = loc20
	v42 = v40 == 0<32>
	branch !v42 l000EBABB
	// succ:  l000EBA35 l000EBABB
l000EBA35:
	v40 = arg3
	v41 = loc18
	v46 = SLICE(v41, byte, 0)
	Mem0[v40:byte] = v46
	v40 = loc12
	v40 = Mem0[v40:word32]
	loc21 = v40
	v40 = loc21
	v41 = 0x10<32>
	v40 = v40 + v41
	loc22 = v40
	v40 = loc22
	v40 = Mem0[v40:word32]
	loc23 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = loc23
	v41 = loc12
	v40 = invoke_ii(v40, v41)
	loc24 = v40
	v40 = Mem0[0x00140048<p32>:word32]
	loc25 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = loc25
	v41 = 1<32>
	v40 = v40 & v41
	loc26 = v40
	v40 = loc26
	v42 = v40 == 0<32>
	branch !v42 l000EBABA
	// succ:  l000EBA71 l000EBABA
l000EBA71:
	v40 = arg4
	v41 = loc24
	v47 = SLICE(v41, byte, 0)
	Mem0[v40:byte] = v47
	v40 = loc12
	v40 = Mem0[v40:word32]
	loc27 = v40
	v40 = loc27
	v41 = 0x14<32>
	v40 = v40 + v41
	loc28 = v40
	v40 = loc28
	v40 = Mem0[v40:word32]
	loc29 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = loc29
	v41 = arg0
	v43 = loc12
	invoke_vii(v40, v41, v43)
	v40 = Mem0[0x00140048<p32>:word32]
	loc30 = v40
	v40 = 0<32>
	Mem0[0x00140048<p32>:word32] = v40
	v40 = loc30
	v41 = 1<32>
	v40 = v40 & v41
	loc31 = v40
	v40 = loc31
	v42 = v40 == 0<32>
	branch !v42 l000EBAB9
	// succ:  l000EBAAD l000EBAB9
l000EBAAD:
	v40 = loc37
	v40 = fn0011B43F(v40)
	v40 = loc42
	Mem0[0x00140030<p32>:word32] = v40
	return
	// succ:  fn000EB941_exit
l000EBAB9:
	// succ:  l000EBABA
l000EBABA:
	// succ:  l000EBABB
l000EBABB:
	v40 = ___cxa_find_matching_catch_2()
	loc34 = v40
	v40 = Mem0[0x00140094<p32>:word32]
	loc35 = v40
	v40 = loc34
	loc5 = v40
	v40 = loc35
	loc6 = v40
	// succ:  l000EBACB
l000EBACB:
	// succ:  l000EBACC
l000EBACC:
	// succ:  l000EBACD
l000EBACD:
	v40 = loc41
	v41 = 8<32>
	v42 = v40 == v41
	branch !v42 l000EBAE6
	// succ:  l000EBAD5 l000EBAE6
l000EBAD5:
	v40 = ___cxa_find_matching_catch_2()
	loc32 = v40
	v40 = Mem0[0x00140094<p32>:word32]
	loc33 = v40
	v40 = loc32
	loc5 = v40
	v40 = loc33
	loc6 = v40
	// succ:  l000EBAE6
l000EBAE6:
	v40 = loc37
	v40 = fn0011B43F(v40)
	v40 = loc5
	___resumeException(v40)
	// succ:  l000EBAF0
l000EBAF0:
	return
	// succ:  fn000EB941_exit
fn000EB941_exit:


// fn000EBF56
// Return size: 0
real64 fn000EBF56(word32 arg0, word32 arg1, word32 arg2)
fn000EBF56_entry:
	// succ:  l000EBF56
l000EBF56:
	v17 = Mem0[0x00140030<p32>:word32]
	loc14 = v17
	v17 = Mem0[0x00140030<p32>:word32]
	v18 = 0x10<32>
	v17 = v17 + v18
	Mem0[0x00140030<p32>:word32] = v17
	v17 = Mem0[0x00140030<p32>:word32]
	v18 = Mem0[0x00140034<p32>:word32]
	v19 = v17 >= v18
	branch !v19 l000EBF6F
	// succ:  l000EBF6A l000EBF6F
l000EBF6A:
	v17 = 0x10<32>
	abortStackOverflow(v17)
	// succ:  l000EBF6F
l000EBF6F:
	v17 = loc14
	loc7 = v17
	v17 = arg0
	v18 = arg1
	v19 = v17 == v18
	loc8 = v19
	v17 = loc8
	branch !v17 l000EBF91
	// succ:  l000EBF7E l000EBF91
l000EBF7E:
	v17 = arg2
	v18 = 4<32>
	Mem0[v17:word32] = v18
	v20 = 0.0
	loc16 = v20
	goto l000EC013
	// succ:  l000EC013
l000EBF91:
	v17 = ___errno_location()
	loc9 = v17
	v17 = loc9
	v17 = Mem0[v17:word32]
	loc10 = v17
	v17 = loc9
	v18 = 0<32>
	Mem0[v17:word32] = v18
	v17 = fn000EAD0D()
	loc11 = v17
	v17 = arg0
	v18 = loc7
	v21 = loc11
	v20 = fn000DF086(v17, v18, v21)
	loc17 = v20
	v17 = loc9
	v17 = Mem0[v17:word32]
	loc12 = v17
	v17 = loc12
	v18 = 0<32>
	v19 = v17 == v18
	loc3 = v19
	v17 = loc3
	branch !v17 l000EBFCD
	// succ:  l000EBFC5 l000EBFCD
l000EBFC5:
	v17 = loc9
	v18 = loc10
	Mem0[v17:word32] = v18
	// succ:  l000EBFCD
l000EBFCD:
	v17 = loc7
	v17 = Mem0[v17:word32]
	loc4 = v17
	v17 = loc4
	v18 = arg1
	v19 = v17 == v18
	loc5 = v19
	v17 = loc5
	branch !v17 l000EBFFC
	// succ:  l000EBFDF l000EBFFC
l000EBFDF:
	v17 = loc12
	v18 = 0x22<32>
	v19 = v17 == v18
	loc6 = v19
	v17 = loc6
	branch !v17 l000EBFF6
	// succ:  l000EBFEA l000EBFF6
l000EBFEA:
	v17 = arg2
	v18 = 4<32>
	Mem0[v17:word32] = v18
	v20 = loc17
	loc15 = v20
	goto l000EBFFA
	// succ:  l000EBFFA
l000EBFF6:
	v20 = loc17
	loc15 = v20
	// succ:  l000EBFFA
l000EBFFA:
	goto l000EC00E
	// succ:  l000EC00E
l000EBFFC:
	v17 = arg2
	v18 = 4<32>
	Mem0[v17:word32] = v18
	v20 = 0.0
	loc15 = v20
	// succ:  l000EC00E
l000EC00E:
	v20 = loc15
	loc16 = v20
	// succ:  l000EC013
l000EC013:
	v17 = loc14
	Mem0[0x00140030<p32>:word32] = v17
	v20 = loc16
	return v20
	// succ:  fn000EBF56_exit
l000EC01B:
	return v20
	// succ:  fn000EBF56_exit
fn000EBF56_exit:


// fn000EC01D
// Return size: 0
void fn000EC01D(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000EC01D_entry:
	// succ:  l000EC01D
l000EC01D:
	v48 = Mem0[0x00140030<p32>:word32]
	loc49 = v48
	v48 = arg0
	v49 = 0xB<32>
	v48 = v48 + v49
	loc40 = v48
	v48 = loc40
	v50 = Mem0[v48:int8]
	v48 = CONVERT(v50, int8, word32)
	loc42 = v48
	v48 = loc42
	v49 = 0x18<32>
	v48 = v48 << v49
	v49 = 0x18<32>
	v48 = v48 >> v49
	v49 = 0<32>
	v51 = v48 < v49
	loc43 = v51
	v48 = arg0
	v49 = 4<32>
	v48 = v48 + v49
	loc44 = v48
	v48 = loc44
	v48 = Mem0[v48:word32]
	loc45 = v48
	v48 = loc42
	v49 = 0xFF<32>
	v48 = v48 & v49
	loc46 = v48
	v48 = loc43
	branch !v48 l000EC05B
	// succ:  l000EC058 l000EC05B
l000EC058:
	v48 = loc45
	goto l000EC05D
	// succ:  l000EC05D
l000EC05B:
	v48 = loc46
	// succ:  l000EC05D
l000EC05D:
	loc10 = v48
	v48 = loc10
	v49 = 0<32>
	v51 = v48 == v49
	loc11 = v51
	// succ:  l000EC067
l000EC067:
	v48 = loc11
	v51 = v48 == 0<32>
	branch !v51 l000EC1F4
	// succ:  l000EC06E l000EC1F4
l000EC06E:
	v48 = arg1
	v49 = arg2
	v51 = v48 == v49
	loc12 = v51
	v48 = loc12
	branch !v48 l000EC07E
	// succ:  l000EC079 l000EC07E
l000EC079:
	v48 = loc45
	loc21 = v48
	goto l000EC0DA
	// succ:  l000EC0DA
l000EC07E:
	v48 = arg2
	loc5 = v48
	v48 = arg1
	loc8 = v48
	// succ:  l000EC088
l000EC088:
	v48 = loc5
	v49 = 0xFFFFFFFC<32>
	v48 = v48 + v49
	loc13 = v48
	v48 = loc8
	v49 = loc13
	v51 = v48 <u v49
	loc14 = v51
	v48 = loc14
	v51 = v48 == 0<32>
	branch !v51 l000EC0A0
	// succ:  l000EC09D l000EC0A0
l000EC09D:
	goto l000EC0CD
	// succ:  l000EC0CD
l000EC0A0:
	v48 = loc8
	v48 = Mem0[v48:word32]
	loc15 = v48
	v48 = loc13
	v48 = Mem0[v48:word32]
	loc16 = v48
	v48 = loc8
	v49 = loc16
	Mem0[v48:word32] = v49
	v48 = loc13
	v49 = loc15
	Mem0[v48:word32] = v49
	v48 = loc8
	v49 = 4<32>
	v48 = v48 + v49
	loc17 = v48
	v48 = loc13
	loc5 = v48
	v48 = loc17
	loc8 = v48
	goto l000EC07E
	// succ:  l000EC07E
l000EC0CD:
	v48 = loc44
	v48 = Mem0[v48:word32]
	loc9 = v48
	v48 = loc9
	loc21 = v48
	// succ:  l000EC0DA
l000EC0DA:
	v48 = arg0
	v48 = Mem0[v48:word32]
	loc18 = v48
	v48 = loc43
	branch !v48 l000EC0E9
	// succ:  l000EC0E6 l000EC0E9
l000EC0E6:
	v48 = loc18
	goto l000EC0EB
	// succ:  l000EC0EB
l000EC0E9:
	v48 = arg0
	// succ:  l000EC0EB
l000EC0EB:
	loc19 = v48
	v48 = loc43
	branch !v48 l000EC0F5
	// succ:  l000EC0F2 l000EC0F5
l000EC0F2:
	v48 = loc21
	goto l000EC0F7
	// succ:  l000EC0F7
l000EC0F5:
	v48 = loc46
	// succ:  l000EC0F7
l000EC0F7:
	loc20 = v48
	v48 = loc19
	v49 = loc20
	v48 = v48 + v49
	loc22 = v48
	v48 = arg2
	v49 = 0xFFFFFFFC<32>
	v48 = v48 + v49
	loc23 = v48
	v48 = loc22
	loc24 = v48
	v48 = arg1
	loc6 = v48
	v48 = loc19
	loc7 = v48
	// succ:  l000EC116
l000EC116:
	v48 = loc6
	v49 = loc23
	v51 = v48 <u v49
	loc25 = v51
	v48 = loc7
	v52 = Mem0[v48:int8]
	v48 = CONVERT(v52, int8, word32)
	loc26 = v48
	v48 = loc26
	v49 = 0x18<32>
	v48 = v48 << v49
	v49 = 0x18<32>
	v48 = v48 >> v49
	v49 = 0<32>
	v51 = v48 > v49
	loc27 = v51
	v48 = loc26
	v49 = 0x18<32>
	v48 = v48 << v49
	v49 = 0x18<32>
	v48 = v48 >> v49
	v49 = 0x7F<32>
	v51 = v48 != v49
	loc28 = v51
	v48 = loc27
	v49 = loc28
	v48 = v48 & v49
	loc47 = v48
	v48 = loc25
	v51 = v48 == 0<32>
	branch !v51 l000EC150
	// succ:  l000EC14D l000EC150
l000EC14D:
	goto l000EC1AF
	// succ:  l000EC1AF
l000EC150:
	v48 = loc47
	branch !v48 l000EC179
	// succ:  l000EC154 l000EC179
l000EC154:
	v48 = loc26
	v49 = 0x18<32>
	v48 = v48 << v49
	v49 = 0x18<32>
	v48 = v48 >> v49
	loc29 = v48
	v48 = loc6
	v48 = Mem0[v48:word32]
	loc30 = v48
	v48 = loc29
	v49 = loc30
	v51 = v48 == v49
	loc31 = v51
	v48 = loc31
	v51 = v48 == 0<32>
	branch !v51 l000EC178
	// succ:  l000EC171 l000EC178
l000EC171:
	v48 = 0xA<32>
	loc48 = v48
	goto l000EC1AF
	// succ:  l000EC1AF
l000EC178:
	// succ:  l000EC179
l000EC179:
	v48 = loc7
	loc32 = v48
	v48 = loc24
	v49 = loc32
	v48 = v48 - v49
	loc33 = v48
	v48 = loc33
	v49 = 1<32>
	v51 = v48 > v49
	loc34 = v51
	v48 = loc7
	v49 = 1<32>
	v48 = v48 + v49
	loc35 = v48
	v48 = loc34
	branch !v48 l000EC199
	// succ:  l000EC196 l000EC199
l000EC196:
	v48 = loc35
	goto l000EC19B
	// succ:  l000EC19B
l000EC199:
	v48 = loc7
	// succ:  l000EC19B
l000EC19B:
	loc4 = v48
	v48 = loc6
	v49 = 4<32>
	v48 = v48 + v49
	loc36 = v48
	v48 = loc36
	loc6 = v48
	v48 = loc4
	loc7 = v48
	goto l000EC0F7
	// succ:  l000EC0F7
l000EC1AF:
	v48 = loc48
	v49 = 0xA<32>
	v51 = v48 == v49
	branch !v51 l000EC1C2
	// succ:  l000EC1B8 l000EC1C2
l000EC1B8:
	v48 = arg3
	v49 = 4<32>
	Mem0[v48:word32] = v49
	goto l000EC1F4
	// succ:  l000EC1F4
l000EC1C2:
	v48 = loc47
	branch !v48 l000EC1F3
	// succ:  l000EC1C6 l000EC1F3
l000EC1C6:
	v48 = loc26
	v49 = 0x18<32>
	v48 = v48 << v49
	v49 = 0x18<32>
	v48 = v48 >> v49
	loc37 = v48
	v48 = loc23
	v48 = Mem0[v48:word32]
	loc38 = v48
	v48 = loc38
	v49 = 0xFFFFFFFF<32>
	v48 = v48 + v49
	loc39 = v48
	v48 = loc39
	v49 = loc37
	v51 = v48 <u v49
	loc41 = v51
	v48 = loc41
	v51 = v48 == 0<32>
	branch !v51 l000EC1F2
	// succ:  l000EC1EA l000EC1F2
l000EC1EA:
	v48 = arg3
	v49 = 4<32>
	Mem0[v48:word32] = v49
	// succ:  l000EC1F2
l000EC1F2:
	// succ:  l000EC1F3
l000EC1F3:
	// succ:  l000EC1F4
l000EC1F4:
	// succ:  l000EC1F4
l000EC1F4:
	return
	// succ:  fn000EC01D_exit
l000EC1F6:
	return
	// succ:  fn000EC01D_exit
fn000EC01D_exit:


// fn000ECB14
// Return size: 0
real64 fn000ECB14(word32 arg0, word32 arg1, word32 arg2)
fn000ECB14_entry:
	// succ:  l000ECB14
l000ECB14:
	v17 = Mem0[0x00140030<p32>:word32]
	loc14 = v17
	v17 = Mem0[0x00140030<p32>:word32]
	v18 = 0x10<32>
	v17 = v17 + v18
	Mem0[0x00140030<p32>:word32] = v17
	v17 = Mem0[0x00140030<p32>:word32]
	v18 = Mem0[0x00140034<p32>:word32]
	v19 = v17 >= v18
	branch !v19 l000ECB2D
	// succ:  l000ECB28 l000ECB2D
l000ECB28:
	v17 = 0x10<32>
	abortStackOverflow(v17)
	// succ:  l000ECB2D
l000ECB2D:
	v17 = loc14
	loc7 = v17
	v17 = arg0
	v18 = arg1
	v19 = v17 == v18
	loc8 = v19
	v17 = loc8
	branch !v17 l000ECB4F
	// succ:  l000ECB3C l000ECB4F
l000ECB3C:
	v17 = arg2
	v18 = 4<32>
	Mem0[v17:word32] = v18
	v20 = 0.0
	loc16 = v20
	goto l000ECBD1
	// succ:  l000ECBD1
l000ECB4F:
	v17 = ___errno_location()
	loc9 = v17
	v17 = loc9
	v17 = Mem0[v17:word32]
	loc10 = v17
	v17 = loc9
	v18 = 0<32>
	Mem0[v17:word32] = v18
	v17 = fn000EAD0D()
	loc11 = v17
	v17 = arg0
	v18 = loc7
	v21 = loc11
	v20 = fn000DF086(v17, v18, v21)
	loc17 = v20
	v17 = loc9
	v17 = Mem0[v17:word32]
	loc12 = v17
	v17 = loc12
	v18 = 0<32>
	v19 = v17 == v18
	loc3 = v19
	v17 = loc3
	branch !v17 l000ECB8B
	// succ:  l000ECB83 l000ECB8B
l000ECB83:
	v17 = loc9
	v18 = loc10
	Mem0[v17:word32] = v18
	// succ:  l000ECB8B
l000ECB8B:
	v17 = loc7
	v17 = Mem0[v17:word32]
	loc4 = v17
	v17 = loc4
	v18 = arg1
	v19 = v17 == v18
	loc5 = v19
	v17 = loc5
	branch !v17 l000ECBBA
	// succ:  l000ECB9D l000ECBBA
l000ECB9D:
	v17 = loc12
	v18 = 0x22<32>
	v19 = v17 == v18
	loc6 = v19
	v17 = loc6
	branch !v17 l000ECBB4
	// succ:  l000ECBA8 l000ECBB4
l000ECBA8:
	v17 = arg2
	v18 = 4<32>
	Mem0[v17:word32] = v18
	v20 = loc17
	loc15 = v20
	goto l000ECBB8
	// succ:  l000ECBB8
l000ECBB4:
	v20 = loc17
	loc15 = v20
	// succ:  l000ECBB8
l000ECBB8:
	goto l000ECBCC
	// succ:  l000ECBCC
l000ECBBA:
	v17 = arg2
	v18 = 4<32>
	Mem0[v17:word32] = v18
	v20 = 0.0
	loc15 = v20
	// succ:  l000ECBCC
l000ECBCC:
	v20 = loc15
	loc16 = v20
	// succ:  l000ECBD1
l000ECBD1:
	v17 = loc14
	Mem0[0x00140030<p32>:word32] = v17
	v20 = loc16
	return v20
	// succ:  fn000ECB14_exit
l000ECBD9:
	return v20
	// succ:  fn000ECB14_exit
fn000ECB14_exit:


// fn000ED4F8
// Return size: 0
real32 fn000ED4F8(word32 arg0, word32 arg1, word32 arg2)
fn000ED4F8_entry:
	// succ:  l000ED4F8
l000ED4F8:
	v18 = Mem0[0x00140030<p32>:word32]
	loc14 = v18
	v18 = Mem0[0x00140030<p32>:word32]
	v19 = 0x10<32>
	v18 = v18 + v19
	Mem0[0x00140030<p32>:word32] = v18
	v18 = Mem0[0x00140030<p32>:word32]
	v19 = Mem0[0x00140034<p32>:word32]
	v20 = v18 >= v19
	branch !v20 l000ED511
	// succ:  l000ED50C l000ED511
l000ED50C:
	v18 = 0x10<32>
	abortStackOverflow(v18)
	// succ:  l000ED511
l000ED511:
	v18 = loc14
	loc7 = v18
	v18 = arg0
	v19 = arg1
	v20 = v18 == v19
	loc8 = v20
	v18 = loc8
	branch !v18 l000ED52F
	// succ:  l000ED520 l000ED52F
l000ED520:
	v18 = arg2
	v19 = 4<32>
	Mem0[v18:word32] = v19
	v21 = 0.0F
	loc16 = v21
	goto l000ED5AD
	// succ:  l000ED5AD
l000ED52F:
	v18 = ___errno_location()
	loc9 = v18
	v18 = loc9
	v18 = Mem0[v18:word32]
	loc10 = v18
	v18 = loc9
	v19 = 0<32>
	Mem0[v18:word32] = v19
	v18 = fn000EAD0D()
	loc11 = v18
	v18 = arg0
	v19 = loc7
	v22 = loc11
	v23 = fn000DF086(v18, v19, v22)
	loc18 = v23
	v18 = loc9
	v18 = Mem0[v18:word32]
	loc12 = v18
	v18 = loc12
	v19 = 0<32>
	v20 = v18 == v19
	loc3 = v20
	v18 = loc3
	branch !v18 l000ED56B
	// succ:  l000ED563 l000ED56B
l000ED563:
	v18 = loc9
	v19 = loc10
	Mem0[v18:word32] = v19
	// succ:  l000ED56B
l000ED56B:
	v18 = loc7
	v18 = Mem0[v18:word32]
	loc4 = v18
	v18 = loc4
	v19 = arg1
	v20 = v18 == v19
	loc5 = v20
	v18 = loc5
	branch !v18 l000ED59A
	// succ:  l000ED57D l000ED59A
l000ED57D:
	v18 = loc12
	v19 = 0x22<32>
	v20 = v18 == v19
	loc6 = v20
	v18 = loc6
	branch !v18 l000ED590
	// succ:  l000ED588 l000ED590
l000ED588:
	v18 = arg2
	v19 = 4<32>
	Mem0[v18:word32] = v19
	// succ:  l000ED590
l000ED590:
	v23 = loc18
	v21 = CONVERT(v23, real64, real32)
	loc17 = v21
	v21 = loc17
	loc15 = v21
	goto l000ED5A8
	// succ:  l000ED5A8
l000ED59A:
	v18 = arg2
	v19 = 4<32>
	Mem0[v18:word32] = v19
	v21 = 0.0F
	loc15 = v21
	// succ:  l000ED5A8
l000ED5A8:
	v21 = loc15
	loc16 = v21
	// succ:  l000ED5AD
l000ED5AD:
	v18 = loc14
	Mem0[0x00140030<p32>:word32] = v18
	v21 = loc16
	return v21
	// succ:  fn000ED4F8_exit
l000ED5B5:
	return v21
	// succ:  fn000ED4F8_exit
fn000ED4F8_exit:


// fn000EDE83
// Return size: 0
word32 fn000EDE83(word32 arg0)
fn000EDE83_entry:
	// succ:  l000EDE83
l000EDE83:
	v10 = Mem0[0x00140030<p32>:word32]
	loc8 = v10
	v10 = arg0
	v11 = 4<32>
	v10 = v10 + v11
	loc2 = v10
	v10 = loc2
	v10 = Mem0[v10:word32]
	loc3 = v10
	v10 = loc3
	v11 = 0x4A<32>
	v10 = v10 & v11
	loc4 = v10
	v10 = loc4
	v11 = 0xFF<32>
	v10 = v10 & v11
	loc5 = v10
	v10 = loc5
	v11 = 0x7F<32>
	v10 = v10 & v11
	loc6 = v10
	// succ:  l000EDEAF
l000EDEAF:
	v10 = loc6
	v11 = 0x18<32>
	v10 = v10 << v11
	v11 = 0x18<32>
	v10 = v10 >> v11
	v11 = 0<32>
	v10 = v10 - v11
	switch (v10) { l000EDF1C l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF12 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF08 }
	// succ:  l000EDF08 l000EDF12 l000EDF1C l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26 l000EDF26
l000EDF08:
	v10 = 8<32>
	loc1 = v10
	goto l000EDF2B
	// succ:  l000EDF2B
l000EDF11:
	// succ:  l000EDF12
l000EDF12:
	v10 = 0x10<32>
	loc1 = v10
	goto l000EDF2B
	// succ:  l000EDF2B
l000EDF1B:
	// succ:  l000EDF1C
l000EDF1C:
	v10 = 0<32>
	loc1 = v10
	goto l000EDF2B
	// succ:  l000EDF2B
l000EDF25:
	// succ:  l000EDF26
l000EDF26:
	v10 = 0xA<32>
	loc1 = v10
	// succ:  l000EDF2B
l000EDF2B:
	v10 = loc1
	return v10
	// succ:  fn000EDE83_exit
l000EDF2F:
	return v10
	// succ:  fn000EDE83_exit
fn000EDE83_exit:


// fn000EDF31
// Return size: 0
void fn000EDF31(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000EDF31_entry:
	// succ:  l000EDF31
l000EDF31:
	v34 = Mem0[0x00140030<p32>:word32]
	loc35 = v34
	v34 = Mem0[0x00140030<p32>:word32]
	v35 = 0x10<32>
	v34 = v34 + v35
	Mem0[0x00140030<p32>:word32] = v34
	v34 = Mem0[0x00140030<p32>:word32]
	v35 = Mem0[0x00140034<p32>:word32]
	v36 = v34 >= v35
	branch !v36 l000EDF4A
	// succ:  l000EDF45 l000EDF4A
l000EDF45:
	v34 = 0x10<32>
	abortStackOverflow(v34)
	// succ:  l000EDF4A
l000EDF4A:
	v34 = loc35
	loc28 = v34
	v34 = arg1
	v34 = fn000E64CA(v34)
	loc29 = v34
	v34 = loc28
	v35 = loc29
	Mem0[v34:word32] = v35
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = 0x164<32>
	v35 = loc28
	v37 = 0x4C70<32>
	v34 = invoke_iii(v34, v35, v37)
	loc30 = v34
	v34 = Mem0[0x00140048<p32>:word32]
	loc31 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc31
	v35 = 1<32>
	v34 = v34 & v35
	loc32 = v34
	v34 = loc32
	branch !v34 l000EDF85
	// succ:  l000EDF80 l000EDF85
l000EDF80:
	v34 = 7<32>
	loc34 = v34
	goto l000EE080
	// succ:  l000EE080
l000EDF85:
	v34 = loc30
	v34 = Mem0[v34:word32]
	loc33 = v34
	v34 = loc33
	v35 = 0x20<32>
	v34 = v34 + v35
	loc6 = v34
	v34 = loc6
	v34 = Mem0[v34:word32]
	loc7 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc7
	v35 = loc30
	v37 = 0x37AB<32>
	v38 = 0x37C5<32>
	v39 = arg2
	v34 = invoke_iiiii(v34, v35, v37, v38, v39)
	v34 = Mem0[0x00140048<p32>:word32]
	loc8 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc8
	v35 = 1<32>
	v34 = v34 & v35
	loc9 = v34
	v34 = loc9
	branch !v34 l000EDFC7
	// succ:  l000EDFC2 l000EDFC7
l000EDFC2:
	v34 = 7<32>
	loc34 = v34
	goto l000EE07F
	// succ:  l000EE07F
l000EDFC7:
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = 0x164<32>
	v35 = loc28
	v37 = 0x4C80<32>
	v34 = invoke_iii(v34, v35, v37)
	loc10 = v34
	v34 = Mem0[0x00140048<p32>:word32]
	loc11 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc11
	v35 = 1<32>
	v34 = v34 & v35
	loc12 = v34
	v34 = loc12
	branch !v34 l000EDFF0
	// succ:  l000EDFEB l000EDFF0
l000EDFEB:
	v34 = 7<32>
	loc34 = v34
	goto l000EE07E
	// succ:  l000EE07E
l000EDFF0:
	v34 = loc10
	v34 = Mem0[v34:word32]
	loc13 = v34
	v34 = loc13
	v35 = 0x10<32>
	v34 = v34 + v35
	loc14 = v34
	v34 = loc14
	v34 = Mem0[v34:word32]
	loc15 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc15
	v35 = loc10
	v34 = invoke_ii(v34, v35)
	loc16 = v34
	v34 = Mem0[0x00140048<p32>:word32]
	loc17 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc17
	v35 = 1<32>
	v34 = v34 & v35
	loc18 = v34
	v34 = loc18
	v36 = v34 == 0<32>
	branch !v36 l000EE06E
	// succ:  l000EE025 l000EE06E
l000EE025:
	v34 = arg3
	v35 = loc16
	v40 = SLICE(v35, byte, 0)
	Mem0[v34:byte] = v40
	v34 = loc10
	v34 = Mem0[v34:word32]
	loc19 = v34
	v34 = loc19
	v35 = 0x14<32>
	v34 = v34 + v35
	loc20 = v34
	v34 = loc20
	v34 = Mem0[v34:word32]
	loc21 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc21
	v35 = arg0
	v37 = loc10
	invoke_vii(v34, v35, v37)
	v34 = Mem0[0x00140048<p32>:word32]
	loc22 = v34
	v34 = 0<32>
	Mem0[0x00140048<p32>:word32] = v34
	v34 = loc22
	v35 = 1<32>
	v34 = v34 & v35
	loc23 = v34
	v34 = loc23
	v36 = v34 == 0<32>
	branch !v36 l000EE06D
	// succ:  l000EE061 l000EE06D
l000EE061:
	v34 = loc29
	v34 = fn0011B43F(v34)
	v34 = loc35
	Mem0[0x00140030<p32>:word32] = v34
	return
	// succ:  fn000EDF31_exit
l000EE06D:
	// succ:  l000EE06E
l000EE06E:
	v34 = ___cxa_find_matching_catch_2()
	loc26 = v34
	v34 = Mem0[0x00140094<p32>:word32]
	loc27 = v34
	v34 = loc26
	loc4 = v34
	v34 = loc27
	loc5 = v34
	// succ:  l000EE07E
l000EE07E:
	// succ:  l000EE07F
l000EE07F:
	// succ:  l000EE080
l000EE080:
	v34 = loc34
	v35 = 7<32>
	v36 = v34 == v35
	branch !v36 l000EE099
	// succ:  l000EE088 l000EE099
l000EE088:
	v34 = ___cxa_find_matching_catch_2()
	loc24 = v34
	v34 = Mem0[0x00140094<p32>:word32]
	loc25 = v34
	v34 = loc24
	loc4 = v34
	v34 = loc25
	loc5 = v34
	// succ:  l000EE099
l000EE099:
	v34 = loc29
	v34 = fn0011B43F(v34)
	v34 = loc4
	___resumeException(v34)
	// succ:  l000EE0A3
l000EE0A3:
	return
	// succ:  fn000EDF31_exit
fn000EDF31_exit:


// fn000EE0A5
// Return size: 0
word64 fn000EE0A5(word32 arg0, word32 arg1, word32 arg2, word32 arg3)
fn000EE0A5_entry:
	// succ:  l000EE0A5
l000EE0A5:
	v19 = Mem0[0x00140030<p32>:word32]
	loc17 = v19
	v19 = Mem0[0x00140030<p32>:word32]
	v20 = 0x10<32>
	v19 = v19 + v20
	Mem0[0x00140030<p32>:word32] = v19
	v19 = Mem0[0x00140030<p32>:word32]
	v20 = Mem0[0x00140034<p32>:word32]
	v21 = v19 >= v20
	branch !v21 l000EE0BE
	// succ:  l000EE0B9 l000EE0BE
l000EE0B9:
	v19 = 0x10<32>
	abortStackOverflow(v19)
	// succ:  l000EE0BE
l000EE0BE:
	v19 = loc17
	loc10 = v19
	v19 = arg0
	v20 = arg1
	v21 = v19 == v20
	loc11 = v21
	// succ:  l000EE0C9
l000EE0C9:
	v19 = loc11
	branch !v19 l000EE0DB
	// succ:  l000EE0CF l000EE0DB
l000EE0CF:
	v19 = arg2
	v20 = 4<32>
	Mem0[v19:word32] = v20
	v22 = 0<64>
	loc19 = v22
	goto l000EE17D
	// succ:  l000EE17D
l000EE0DB:
	v19 = arg0
	v23 = Mem0[v19:int8]
	v19 = CONVERT(v23, int8, word32)
	loc12 = v19
	v19 = loc12
	v20 = 0x18<32>
	v19 = v19 << v20
	v20 = 0x18<32>
	v19 = v19 >> v20
	v20 = 0x2D<32>
	v21 = v19 == v20
	loc13 = v21
	v19 = loc13
	branch !v19 l000EE101
	// succ:  l000EE0F3 l000EE101
l000EE0F3:
	v19 = arg2
	v20 = 4<32>
	Mem0[v19:word32] = v20
	v22 = 0<64>
	loc19 = v22
	goto l000EE17E
	// succ:  l000EE17E
l000EE101:
	v19 = ___errno_location()
	loc14 = v19
	v19 = loc14
	v19 = Mem0[v19:word32]
	loc15 = v19
	v19 = loc14
	v20 = 0<32>
	Mem0[v19:word32] = v20
	v19 = fn000EAD0D()
	loc4 = v19
	v19 = arg0
	v20 = loc10
	v24 = arg3
	v25 = loc4
	v22 = fn000D165D(v19, v20, v24, v25)
	loc20 = v22
	v19 = loc14
	v19 = Mem0[v19:word32]
	loc5 = v19
	v19 = loc5
	v20 = 0<32>
	v21 = v19 == v20
	loc6 = v21
	v19 = loc6
	branch !v19 l000EE13E
	// succ:  l000EE136 l000EE13E
l000EE136:
	v19 = loc14
	v20 = loc15
	Mem0[v19:word32] = v20
	// succ:  l000EE13E
l000EE13E:
	v19 = loc10
	v19 = Mem0[v19:word32]
	loc7 = v19
	v19 = loc7
	v20 = arg1
	v21 = v19 == v20
	loc8 = v21
	v19 = loc8
	branch !v19 l000EE16D
	// succ:  l000EE150 l000EE16D
l000EE150:
	v19 = loc5
	v20 = 0x22<32>
	v21 = v19 == v20
	loc9 = v21
	v19 = loc9
	branch !v19 l000EE167
	// succ:  l000EE15B l000EE167
l000EE15B:
	v19 = arg2
	v20 = 4<32>
	Mem0[v19:word32] = v20
	v22 = 0xFFFFFFFFFFFFFFFF<64>
	loc18 = v22
	goto l000EE16B
	// succ:  l000EE16B
l000EE167:
	v22 = loc20
	loc18 = v22
	// succ:  l000EE16B
l000EE16B:
	goto l000EE178
	// succ:  l000EE178
l000EE16D:
	v19 = arg2
	v20 = 4<32>
	Mem0[v19:word32] = v20
	v22 = 0<64>
	loc18 = v22
	// succ:  l000EE178
l000EE178:
	v22 = loc18
	loc19 = v22
	// succ:  l000EE17D
l000EE17D:
	// succ:  l000EE17E
l000EE17E:
	v19 = loc17
	Mem0[0x00140030<p32>:word32] = v19
	v22 = loc19
	return v22
	// succ:  fn000EE0A5_exit
l000EE186:
	return v22
	// succ:  fn000EE0A5_exit
fn000EE0A5_exit:


