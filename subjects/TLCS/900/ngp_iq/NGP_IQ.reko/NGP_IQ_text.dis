// fn00200089
// Return size: 0
define fn00200089
fn00200089_entry:
	xsp = fp
	// succ:  l00200089
l00200089:
	call fn0020060C (retsize: 4;)
	v3 = Mem0[0x00006F86:byte] | 1_i08 << 6_08
	Mem0[0x00006F86:byte] = v3
	xix = 0x00200040
	xiy = 0x00006FB8
	b = 0x12_08
	// succ:  l0020009B
l0020009B:
	v7 = Mem0[xix:word32]
	xwa = v7
	v9 = xwa
	Mem0[xiy:word32] = v9
	xiy = xiy + 4_32
	b = b - 1_08
	branch b != 0_08 l0020009B
	// succ:  l002000A4 l0020009B
l002000A4:
	v10 = 0_08
	Mem0[0x00008002:byte] = v10
	v11 = 0_08
	Mem0[0x00008003:byte] = v11
	v12 = 0xA0_08
	Mem0[0x00008004:byte] = v12
	v13 = 0x98_08
	Mem0[0x00008005:byte] = v13
	wa = 0_16
	xhl = 0xA000_32
	bc = 0x200_16
	// succ:  l002000C2
l002000C2:
	v17 = wa
	Mem0[xhl:word16] = v17
	xhl = xhl + 2_32
	bc = bc - 1_16
	branch bc != 0_16 l002000C2
	// succ:  l002000C8 l002000C2
l002000C8:
	bc = 0x250_16
	xde = 0xA400_32
	xhl = 0x20061D_32
	// succ:  l002000D5
l002000D5:
	v19 = Mem0[xhl:word16]
	Mem0[xde:word16] = v19
	xhl = xhl + 2_i32
	xde = xde + 2_i32
	bc = bc - 1_i16
	branch bc != 0_16 l002000D5
	// succ:  l002000D7 l002000D5
l002000D7:
	H = false
	V = false
	N = false
	call fn002005B8 (retsize: 4;)
	__ei(0_08)
	bc = 0x10_16
	xde = 0x8300_32
	xhl = 0x200ABD_32
	// succ:  l002000EA
l002000EA:
	v23 = Mem0[xhl:word16]
	Mem0[xde:word16] = v23
	xhl = xhl + 2_i32
	xde = xde + 2_i32
	bc = bc - 1_i16
	branch bc != 0_16 l002000EA
	// succ:  l002000EC l002000EA
l002000EC:
	H = false
	V = false
	N = false
	v24 = 0x33_08
	Mem0[0x000083E0:byte] = v24
	v25 = 7_08
	Mem0[0x000083E1:byte] = v25
	v26 = 0x80_08
	Mem0[0x00008118:byte] = v26
	// succ:  l00200111
l00200111:
	xhl = 0x2000FD_32
	d = 4_08
	c = 1_08
	b = 0_08
	call fn00200557 (retsize: 4;)
	// succ:  l00200136
l00200136:
	xhl = 0x200122_32
	d = 4_08
	c = 1_08
	b = 1_08
	call fn00200557 (retsize: 4;)
	// succ:  l00200154
l00200154:
	xhl = 0x200147_32
	d = 4_08
	c = 2_08
	b = 4_08
	call fn00200557 (retsize: 4;)
	// succ:  l0020016E
l0020016E:
	xhl = 0x200165_32
	d = 2_08
	c = 4_08
	b = 5_08
	call fn00200557 (retsize: 4;)
	// succ:  l00200186
l00200186:
	xhl = 0x20017F_32
	d = 2_08
	c = 4_08
	b = 6_08
	call fn00200557 (retsize: 4;)
	xde = 0x7000_32
	xhl = 0x200363_32
	bc = 0x12F_16
	// succ:  l002001A2
l002001A2:
	v29 = Mem0[xhl:byte]
	Mem0[xde:byte] = v29
	xhl = xhl + 1_i32
	xde = xde + 1_i32
	bc = bc - 1_i16
	branch bc != 0_16 l002001A2
	// succ:  l002001A4 l002001A2
l002001A4:
	H = false
	V = false
	N = false
	w = 1_08
	call fn002004F2 (retsize: 4;)
	xwa = 0x7000_32
	v31 = Mem0[xwa:word32]
	call v31 (retsize: 4;)
	hl = 0xD06_16
	v33 = Mem0[0x00004003:byte]
	a = v33
	w = 4_08
	call fn00200532 (retsize: 4;)
	hl = 0xD05_16
	a = 4_08
	w = 4_08
	call fn00200532 (retsize: 4;)
	v35 = Mem0[0x00004003:byte]
	N = true
	SZHVC = cond(v35 - 4_08)
	branch Test(NE,Z) l002001E6
	// succ:  l002001D0 l002001E6
l002001D0:
	// succ:  l002001D5
l002001D5:
	xhl = 0x2001D2_32
	d = 1_08
	c = 0xF_08
	b = 4_08
	call fn00200557 (retsize: 4;)
	goto l002001FB
	// succ:  l002001FB
l002001E6:
	// succ:  l002001EC
l002001EC:
	xhl = 0x2001E8_32
	d = 3_08
	c = 0xF_08
	b = 4_08
	call fn00200557 (retsize: 4;)
	// succ:  l002001FB
l002001FB:
	// succ:  l00200206
l00200206:
	xhl = 0x2001FD_32
	d = 4_08
	c = 2_08
	b = 8_08
	call fn00200557 (retsize: 4;)
	// succ:  l00200220
l00200220:
	xhl = 0x200217_32
	d = 2_08
	c = 4_08
	b = 9_08
	call fn00200557 (retsize: 4;)
	// succ:  l00200238
l00200238:
	xhl = 0x200231_32
	d = 2_08
	c = 4_08
	b = 0xA_08
	call fn00200557 (retsize: 4;)
	xde = 0x7000_32
	xhl = 0x200492_32
	bc = 0x23_16
	// succ:  l00200254
l00200254:
	v38 = Mem0[xhl:byte]
	Mem0[xde:byte] = v38
	xhl = xhl + 1_i32
	xde = xde + 1_i32
	bc = bc - 1_i16
	branch bc != 0_16 l00200254
	// succ:  l00200256 l00200254
l00200256:
	H = false
	V = false
	N = false
	w = 1_08
	call fn002004F2 (retsize: 4;)
	xwa = 0x7000_32
	v39 = Mem0[xwa:word32]
	call v39 (retsize: 4;)
	hl = 0xD0A_16
	v40 = Mem0[0x00004003:byte]
	a = v40
	w = 4_08
	call fn00200532 (retsize: 4;)
	hl = 0xD09_16
	a = 1_08
	w = 4_08
	call fn00200532 (retsize: 4;)
	v41 = Mem0[0x00004003:byte]
	N = true
	SZHVC = cond(v41 - 1_08)
	branch Test(NE,Z) l00200298
	// succ:  l00200282 l00200298
l00200282:
	// succ:  l00200287
l00200287:
	xhl = 0x200284_32
	d = 1_08
	c = 0xF_08
	b = 8_08
	call fn00200557 (retsize: 4;)
	goto l002002AD
	// succ:  l002002AD
l00200298:
	// succ:  l0020029E
l0020029E:
	xhl = 0x20029A_32
	d = 3_08
	c = 0xF_08
	b = 8_08
	call fn00200557 (retsize: 4;)
	// succ:  l002002AD
l002002AD:
	// succ:  l002002BA
l002002BA:
	xhl = 0x2002AF_32
	d = 4_08
	c = 2_08
	b = 0xC_08
	call fn00200557 (retsize: 4;)
	// succ:  l002002D4
l002002D4:
	xhl = 0x2002CB_32
	d = 2_08
	c = 4_08
	b = 0xD_08
	call fn00200557 (retsize: 4;)
	// succ:  l002002EC
l002002EC:
	xhl = 0x2002E5_32
	d = 2_08
	c = 4_08
	b = 0xE_08
	call fn00200557 (retsize: 4;)
	xde = 0x7000_32
	xhl = 0x2004B5_32
	bc = 0x2B_16
	// succ:  l00200308
l00200308:
	v42 = Mem0[xhl:byte]
	Mem0[xde:byte] = v42
	xhl = xhl + 1_i32
	xde = xde + 1_i32
	bc = bc - 1_i16
	branch bc != 0_16 l00200308
	// succ:  l0020030A l00200308
l0020030A:
	H = false
	V = false
	N = false
	w = 1_08
	call fn002004F2 (retsize: 4;)
	xwa = 0x7000_32
	v43 = Mem0[xwa:word32]
	call v43 (retsize: 4;)
	hl = 0xD0E_16
	v44 = Mem0[0x00004003:byte]
	a = v44
	w = 4_08
	call fn00200532 (retsize: 4;)
	hl = 0xD0D_16
	a = 0_08
	w = 4_08
	call fn00200532 (retsize: 4;)
	v45 = Mem0[0x00004003:byte]
	N = true
	SZHVC = cond(v45 - 0_08)
	branch Test(NE,Z) l0020034C
	// succ:  l00200336 l0020034C
l00200336:
	// succ:  l0020033B
l0020033B:
	xhl = 0x200338_32
	d = 1_08
	c = 0xF_08
	b = 0xC_08
	call fn00200557 (retsize: 4;)
	goto l00200361
	// succ:  l00200361
l0020034C:
	// succ:  l00200352
l00200352:
	xhl = 0x20034E_32
	d = 3_08
	c = 0xF_08
	b = 0xC_08
	call fn00200557 (retsize: 4;)
	// succ:  l00200361
l00200361:
	goto l00200361
	// succ:  l00200361
fn00200089_exit:


// fn002004F2
// Return size: 4
define fn002004F2
fn002004F2_entry:
	xsp = fp
	// succ:  l002004F2
l002004F2:
	xsp = xsp - 4_i32
	Mem0[xsp:word32] = xwa
	v4 = 0_08
	Mem0[0x00004004:byte] = v4
	// succ:  l002004F8
l002004F8:
	v5 = Mem0[0x00007600:byte]
	a = v5
	v7 = Mem0[0x00007600:byte]
	a = v7
	v8 = Mem0[0x00004004:byte]
	a = v8
	N = true
	SZHVC = cond(a - w)
	branch Test(NE,Z) l002004F8
	// succ:  l00200508 l002004F8
l00200508:
	xwa = Mem0[xsp:word32]
	xsp = xsp + 4_i32
	return
	// succ:  fn002004F2_exit
fn002004F2_exit:


// fn0020050A
// Return size: 4
define fn0020050A
fn0020050A_entry:
	xsp = fp
	// succ:  l0020050A
l0020050A:
	xsp = xsp - 4_i32
	Mem0[xsp:word32] = xhl
	xsp = xsp - 4_i32
	Mem0[xsp:word32] = xde
	xsp = xsp - 4_i32
	Mem0[xsp:word32] = xbc
	xde = 0x9800_32
	c = h
	b = 0_08
	xbc = bc *u 2_16
	de = de + bc
	N = false
	SZHVC = cond(de)
	h = 0_08
	xhl = hl *u 0x40_16
	de = de + hl
	N = false
	SZHVC = cond(de)
	v14 = Mem0[xde:word32]
	a = v14
	xde = xde + 1_32
	N = false
	SZHVC = cond(xde)
	v16 = Mem0[xde:word32]
	w = v16
	xbc = Mem0[xsp:word32]
	xsp = xsp + 4_i32
	xde = Mem0[xsp:word32]
	xsp = xsp + 4_i32
	xhl = Mem0[xsp:word32]
	xsp = xsp + 4_i32
	return
	// succ:  fn0020050A_exit
fn0020050A_exit:


// fn00200532
// Return size: 4
define fn00200532
fn00200532_entry:
	xsp = fp
	// succ:  l00200532
l00200532:
	xsp = xsp - 4_i32
	Mem0[xsp:word32] = xhl
	xsp = xsp - 4_i32
	Mem0[xsp:word32] = xbc
	xsp = xsp - 4_i32
	Mem0[xsp:word32] = xwa
	c = a
	a = a & 0xF0_08
	H = true
	N = false
	C = false
	SZV = cond(a)
	a = a >>u 4_08
	H = false
	N = false
	SZVC = cond(a)
	a = a + 0x40_08
	N = false
	SZHVC = cond(a)
	call fn0020050A (retsize: 4;)
	a = c
	a = a & 0xF_08
	H = true
	N = false
	C = false
	SZV = cond(a)
	a = a + 0x40_08
	N = false
	SZHVC = cond(a)
	h = h + 1_08
	N = false
	SZHVC = cond(h)
	call fn0020050A (retsize: 4;)
	xwa = Mem0[xsp:word32]
	xsp = xsp + 4_i32
	xbc = Mem0[xsp:word32]
	xsp = xsp + 4_i32
	xhl = Mem0[xsp:word32]
	xsp = xsp + 4_i32
	return
	// succ:  fn00200532_exit
fn00200532_exit:


// fn00200557
// Return size: 4
define fn00200557
fn00200557_entry:
	xsp = fp
	// succ:  l00200557
l00200557:
	xsp = xsp - 4_i32
	Mem0[xsp:word32] = xhl
	xsp = xsp - 4_i32
	Mem0[xsp:word32] = xde
	d = d << 1_08
	H = false
	N = false
	SZVC = cond(d)
	v9 = Mem0[0x00004002:word32]
	d = v9
	xde = 0x9800_32
	xwa = 0_32
	a = c
	a = a + c
	N = false
	SZHVC = cond(a)
	xde = xde + xwa
	N = false
	SZHVC = cond(xde)
	c = b
	b = 0_08
	xbc = bc *u 0x40_16
	xde = xde + xbc
	N = false
	SZHVC = cond(xde)
	b = 0x13_08
	// succ:  l00200579
l00200579:
	v17 = Mem0[xhl:byte]
	a = v17
	N = true
	SZHVC = cond(a - 0_08)
	branch Test(EQ,Z) l0020059E
	// succ:  l0020057F l0020059E
l0020057F:
	xhl = xhl + 1_32
	N = false
	SZHV = cond(xhl)
	N = true
	SZHVC = cond(a - 0x5B_08)
	branch Test(ULT,Z) l00200589
	// succ:  l00200586 l00200589
l00200586:
	a = a + 0xE0_08
	N = false
	SZHVC = cond(a)
	// succ:  l00200589
l00200589:
	w = 0_08
	wa = wa + 9_16
	N = false
	SZHVC = cond(wa)
	v22 = Mem0[0x00004002:byte]
	w = w + v22
	N = false
	SZHVC = cond(w)
	v23 = Mem0[xde:word32]
	a = v23
	xde = xde + 1_32
	N = false
	SZHV = cond(xde)
	v24 = Mem0[xde:word32]
	w = v24
	xde = xde + 1_32
	N = false
	SZHV = cond(xde)
	b = b - 1_08
	branch b != 0_08 l00200579
	// succ:  l0020059E l00200579
l0020059E:
	xde = Mem0[xsp:word32]
	xsp = xsp + 4_i32
	xhl = Mem0[xsp:word32]
	xsp = xsp + 4_i32
	return
	// succ:  fn00200557_exit
fn00200557_exit:


// fn002005B8
// Return size: 4
define fn002005B8
fn002005B8_entry:
	xsp = fp
	// succ:  l002005B8
l002005B8:
	xbc = 0x9000_32
	hl = 0x4C0_16
	// succ:  l002005C0
l002005C0:
	v5 = 0_08
	Mem0[xbc:byte] = v5
	xbc = xbc + 1_32
	N = false
	SZHVC = cond(xbc)
	hl = hl - 1_16
	N = true
	SZHVC = cond(hl)
	branch Test(NE,Z) l002005C0
	// succ:  l002005CF l002005C0
l002005CF:
	xbc = 0x9800_32
	hl = 0x4C0_16
	// succ:  l002005D7
l002005D7:
	v9 = 0_08
	Mem0[xbc:byte] = v9
	xbc = xbc + 1_32
	N = false
	SZHVC = cond(xbc)
	hl = hl - 1_16
	N = true
	SZHVC = cond(hl)
	branch Test(NE,Z) l002005D7
	// succ:  l002005E6 l002005D7
l002005E6:
	return
	// succ:  fn002005B8_exit
fn002005B8_exit:


// fn002005F5
// Return size: 4
define fn002005F5
fn002005F5_entry:
	xsp = fp
	// succ:  l002005F5
l002005F5:
	xsp = xsp - 2_i32
	Mem0[xsp:word16] = sr
	__ldf(3_08)
	xsp = xsp - 4_i32
	Mem0[xsp:word32] = xix
	w = w + w
	N = false
	SZHVC = cond(w)
	w = w + w
	N = false
	SZHVC = cond(w)
	xix = 0xFFFE00_32
	v9 = Mem0[xwa:word32]
	xix = v9
	v10 = Mem0[xix:word32]
	call v10 (retsize: 4;)
	xix = Mem0[xsp:word32]
	xsp = xsp + 4_i32
	sr = Mem0[xsp:word16]
	xsp = xsp + 2_i32
	return
	// succ:  fn002005F5_exit
fn002005F5_exit:


// fn0020060C
// Return size: 4
define fn0020060C
fn0020060C_entry:
	xsp = fp
	// succ:  l0020060C
l0020060C:
	v3 = Mem0[0x00006F91:byte]
	N = true
	SZHVC = cond(v3 - 0_08)
	branch Test(NE,Z) l0020061C
	// succ:  l00200613 l0020061C
l00200613:
	v7 = Mem0[0x00006F83:byte] & ~(1_i08 << 3_08)
	Mem0[0x00006F83:byte] = v7
	v8 = 0_08
	Mem0[0x00006DA0:byte] = v8
	// succ:  l0020061C
l0020061C:
	return
	// succ:  fn0020060C_exit
fn0020060C_exit:


