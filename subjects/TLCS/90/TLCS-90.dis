// fn0000
// Return size: 2
define fn0000
fn0000_entry:
	// succ:  l0000
l0000:
	sp = fp
	// succ:  l0100
l0100:
	Mem0[null:byte] = a
	bc = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn0000_exit
fn0000_exit:


// fn02C2
// Return size: 0
define fn02C2
fn02C2_entry:
	// succ:  l02C2
l02C2:
	sp = fp
	v3 = Mem0[0xFFF4:byte]
	a = a ^ v3
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
fn02C2_exit:


// fn02F4
// Return size: 2
define fn02F4
fn02F4_entry:
	// succ:  l02F4
l02F4:
	sp = fp
	v4 = Mem0[ix + -28:byte]
	a = a + v4 + C
	N = false
	SZHXVC = cond(a)
	l = a
	a = h
	v11 = Mem0[ix + -27:byte]
	a = a + v11 + C
	N = false
	SZHXVC = cond(a)
	h = a
	a = c
	v13 = Mem0[ix + -6:byte]
	a = a ^ v13
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	c = a
	a = b
	v18 = Mem0[ix + -5:byte]
	a = a ^ v18
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	b = a
	a = l
	v19 = Mem0[ix + -4:byte]
	a = a ^ v19
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	l = a
	a = h
	v20 = Mem0[ix + -3:byte]
	a = a ^ v20
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	h = a
	v21 = Mem0[ix + -10:byte]
	a = v21
	a = a + c
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -10:byte] = a
	v22 = Mem0[ix + -9:byte]
	a = v22
	a = a + b + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -9:byte] = a
	v23 = Mem0[ix + -8:byte]
	a = v23
	a = a + l + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -8:byte] = a
	v24 = Mem0[ix + -7:byte]
	a = v24
	a = a + h + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -7:byte] = a
	sp = sp - 2
	Mem0[sp:word16] = af
	v26 = Mem0[ix + -10:byte]
	c = v26
	v27 = Mem0[ix + -9:byte]
	b = v27
	v28 = Mem0[ix + -8:byte]
	l = v28
	v29 = Mem0[ix + -7:byte]
	h = v29
	af = Mem0[sp:word16]
	sp = sp + 2
	a = 0x04
	// succ:  l0341
l0341:
	c = c << 1
	H = false
	N = false
	SZXC = cond(c)
	b = __rcl(b, 0x01, C)
	H = false
	N = false
	SZXC = cond(b)
	hl = hl + hl + C
	N = false
	SZHXVC = cond(hl)
	a = a - 1
	N = false
	SZHXV = cond(a)
	branch Test(NE,Z) l0341
	// succ:  l034A l0341
l034A:
	a = c
	v34 = Mem0[ix + -34:byte]
	a = a + v34
	N = false
	SZHXVC = cond(a)
	// succ:  l034B_thunk_fn034E
l034B_thunk_fn034E:
	call fn034E (retsize: 0;)
	return
	// succ:  fn02F4_exit
fn02F4_exit:


// fn034E
// Return size: 2
define fn034E
fn034E_entry:
	// succ:  l034E
l034E:
	sp = fp
	Mem0[ix + -6:byte] = a
	// succ:  l034E_thunk_fn03B2
l034E_thunk_fn03B2:
	call fn03B2 (retsize: 0;)
	return
	// succ:  fn034E_exit
fn034E_exit:


// fn0350
// Return size: 0
define fn0350
fn0350_entry:
	// succ:  l0350
l0350:
	sp = v3
	a = b
	v7 = Mem0[ix + -33:byte]
	a = a + v7 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -5:byte] = a
	a = l
	v12 = Mem0[ix + -32:byte]
	a = a + v12 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -4:byte] = a
	a = h
	v14 = Mem0[ix + -31:byte]
	a = a + v14 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -3:byte] = a
	v15 = Mem0[ix + -10:byte]
	a = v15
	v16 = Mem0[ix + -18:byte]
	a = a + v16
	N = false
	SZHXVC = cond(a)
	c = a
	v18 = Mem0[ix + -9:byte]
	a = v18
	v19 = Mem0[ix + -17:byte]
	a = a + v19 + C
	N = false
	SZHXVC = cond(a)
	b = a
	v20 = Mem0[ix + -8:byte]
	a = v20
	v21 = Mem0[ix + -16:byte]
	a = a + v21 + C
	N = false
	SZHXVC = cond(a)
	l = a
	v22 = Mem0[ix + -7:byte]
	a = v22
	v23 = Mem0[ix + -15:byte]
	a = a + v23 + C
	N = false
	SZHXVC = cond(a)
	h = a
	v24 = Mem0[ix + -6:byte]
	a = v24
	a = a ^ c
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -6:byte] = a
	v28 = Mem0[ix + -5:byte]
	a = v28
	a = a ^ b
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -5:byte] = a
	v29 = Mem0[ix + -4:byte]
	a = v29
	a = a ^ l
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -4:byte] = a
	v30 = Mem0[ix + -3:byte]
	a = v30
	a = a ^ h
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -3:byte] = a
	sp = sp - 2
	Mem0[sp:word16] = af
	v32 = Mem0[ix + -10:byte]
	c = v32
	v33 = Mem0[ix + -9:byte]
	b = v33
	v34 = Mem0[ix + -8:byte]
	l = v34
	v35 = Mem0[ix + -7:byte]
	h = v35
	af = Mem0[sp:word16]
	sp = sp + 2
	a = 0x05
	// succ:  l03B0_thunk_fn03B2
l03B0_thunk_fn03B2:
	call fn03B2 (retsize: 0;)
	return
	// succ:  fn0350_exit
fn0350_exit:


// fn039D
// Return size: 0
define fn039D
fn039D_entry:
	// succ:  l039D
l039D:
	sp = fp
	a = a ^ h
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -3:byte] = a
	sp = sp - 2
	Mem0[sp:word16] = af
	v12 = Mem0[ix + -10:byte]
	c = v12
	v14 = Mem0[ix + -9:byte]
	b = v14
	v16 = Mem0[ix + -8:byte]
	l = v16
	v18 = Mem0[ix + -7:byte]
	h = v18
	af = Mem0[sp:word16]
	sp = sp + 2
	a = 0x05
	// succ:  l03B0_thunk_fn03B2
l03B0_thunk_fn03B2:
	call fn03B2 (retsize: 0;)
	return
	// succ:  fn039D_exit
fn039D_exit:


// fn03AA
// Return size: 0
define fn03AA
fn03AA_entry:
	// succ:  l03AA
l03AA:
	sp = fp
fn03AA_exit:


// fn03B2
// Return size: 0
define fn03B2
fn03B2_entry:
	// succ:  l03B2 l03B2
l03B2:
	sp = fp
	sp = v3
	h = h >>u 1
	H = false
	N = false
	SZXC = cond(h)
	l = __rcr(l, 0x01, C)
	H = false
	N = false
	SZXC = cond(l)
	b = __rcr(b, 0x01, C)
	H = false
	N = false
	SZXC = cond(b)
	c = __rcr(c, 0x01, C)
	H = false
	N = false
	SZXC = cond(c)
	a = a - 1
	N = false
	SZHXV = cond(a)
	branch Test(NE,Z) l03B2
	// succ:  l03BD l03B2
l03BD:
	a = c
	v16 = Mem0[ix + -38:byte]
	a = a + v16
	N = false
	SZHXVC = cond(a)
	c = a
	a = b
	v18 = Mem0[ix + -37:byte]
	a = a + v18 + C
	N = false
	SZHXVC = cond(a)
	b = a
	a = l
	v19 = Mem0[ix + -36:byte]
	a = a + v19 + C
	N = false
	SZHXVC = cond(a)
	l = a
	a = h
	v20 = Mem0[ix + -35:byte]
	a = a + v20 + C
	N = false
	SZHXVC = cond(a)
	h = a
	a = c
	v21 = Mem0[ix + -6:byte]
	a = a ^ v21
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	c = a
	a = b
	v24 = Mem0[ix + -5:byte]
	a = a ^ v24
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	b = a
	a = l
	v25 = Mem0[ix + -4:byte]
	a = a ^ v25
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	l = a
	a = h
	v26 = Mem0[ix + -3:byte]
	a = a ^ v26
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	h = a
	v27 = Mem0[ix + -14:byte]
	a = v27
	a = a + c
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -14:byte] = a
	v28 = Mem0[ix + -13:byte]
	a = v28
	a = a + b + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -13:byte] = a
	v29 = Mem0[ix + -12:byte]
	a = v29
	a = a + l + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -12:byte] = a
	v30 = Mem0[ix + -11:byte]
	a = v30
	a = a + h + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -11:byte] = a
	v31 = Mem0[ix + -22:byte]
	a = v31
	a = a + 0xFF
	N = false
	SZHXVC = cond(a)
	c = a
	v32 = Mem0[ix + -21:byte]
	a = v32
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	b = a
	v33 = Mem0[ix + -20:byte]
	a = v33
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	l = a
	v34 = Mem0[ix + -19:byte]
	a = v34
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	h = a
	Mem0[ix + -22:byte] = c
	Mem0[ix + -21:byte] = b
	Mem0[ix + -20:byte] = l
	Mem0[ix + -19:byte] = h
	a = h
	a = a | l
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	a = a | b
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	a = a | c
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(NE,Z) l0350
	goto l0430_thunk_fn0434
	// succ:  l0430_thunk_fn0434 l0430_thunk_fn0350
l0430_thunk_fn0350:
	call fn0350 (retsize: 0;)
	return
	// succ:  fn03B2_exit
l0430_thunk_fn0434:
	call fn0434 (retsize: 0;)
	return
	// succ:  fn03B2_exit
fn03B2_exit:


// fn03CD
// Return size: 0
define fn03CD
fn03CD_entry:
	// succ:  l03CD
l03CD:
	sp = fp
	v4 = Mem0[ix + -35:byte]
	a = a + v4 + C
	N = false
	SZHXVC = cond(a)
	h = a
	a = c
	v11 = Mem0[ix + -6:byte]
	a = a ^ v11
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	c = a
	a = b
	v16 = Mem0[ix + -5:byte]
	a = a ^ v16
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	b = a
	a = l
	v18 = Mem0[ix + -4:byte]
	a = a ^ v18
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	l = a
	a = h
	v19 = Mem0[ix + -3:byte]
	a = a ^ v19
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	h = a
	v20 = Mem0[ix + -14:byte]
	a = v20
	a = a + c
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -14:byte] = a
	v21 = Mem0[ix + -13:byte]
	a = v21
	a = a + b + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -13:byte] = a
	v22 = Mem0[ix + -12:byte]
	a = v22
	a = a + l + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -12:byte] = a
	v23 = Mem0[ix + -11:byte]
	a = v23
	a = a + h + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -11:byte] = a
	v24 = Mem0[ix + -22:byte]
	a = v24
	a = a + 0xFF
	N = false
	SZHXVC = cond(a)
	c = a
	v25 = Mem0[ix + -21:byte]
	a = v25
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	b = a
	v26 = Mem0[ix + -20:byte]
	a = v26
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	l = a
	v27 = Mem0[ix + -19:byte]
	a = v27
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	h = a
	Mem0[ix + -22:byte] = c
	Mem0[ix + -21:byte] = b
	Mem0[ix + -20:byte] = l
	Mem0[ix + -19:byte] = h
	a = h
	a = a | l
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	a = a | b
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	a = a | c
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(NE,Z) l0430_thunk_fn0350
	goto l0430_thunk_fn0434
	// succ:  l0430_thunk_fn0434 l0430_thunk_fn0350
l0430_thunk_fn0350:
	call fn0350 (retsize: 0;)
	return
	// succ:  fn03CD_exit
l0430_thunk_fn0434:
	call fn0434 (retsize: 0;)
	return
	// succ:  fn03CD_exit
fn03CD_exit:


// fn0434
// Return size: 0
define fn0434
fn0434_entry:
	// succ:  l0434
l0434:
	sp = v3
	hl = 0x001C
	hl = hl + sp
	N = false
	SZHXVC = cond(hl)
	bc = 0x0004
	// succ:  l043C
l043C:
	v8 = Mem0[hl:byte]
	Mem0[de:byte] = v8
	hl = hl + 1
	de = de + 1
	bc = bc - 1
	branch bc != 0x0000 l043C
	// succ:  l043E l043C
l043E:
	H = false
	V = false
	N = false
	v12 = de
	de = hl
	hl = v12
	v13 = Mem0[sp + 36:word16]
	hl = v13
	v14 = de
	de = hl
	hl = v14
	hl = 0x0018
	hl = hl + sp
	N = false
	SZHXVC = cond(hl)
	bc = 0x0004
	// succ:  l044B
l044B:
	v15 = Mem0[hl:byte]
	Mem0[de:byte] = v15
	hl = hl + 1
	de = de + 1
	bc = bc - 1
	branch bc != 0x0000 l044B
	// succ:  l044D l044B
l044D:
	H = false
	V = false
	N = false
	sp = ix
	ix = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn0434_exit
fn0434_exit:


// fn04EE
// Return size: 0
define fn04EE
fn04EE_entry:
	// succ:  l04EE
l04EE:
	sp = fp
	a = b
	Mem0[ix + -37:byte] = 0x37
	Mem0[ix + -36:byte] = 0xEF
	Mem0[ix + -35:byte] = 0xC6
	sp = sp - 2
	Mem0[sp:word16] = af
	v7 = Mem0[ix + -26:byte]
	c = v7
	v9 = Mem0[ix + -25:byte]
	b = v9
	v10 = Mem0[ix + -24:byte]
	l = v10
	v12 = Mem0[ix + -23:byte]
	h = v12
	af = Mem0[sp:word16]
	sp = sp + 2
	a = 0x04
	// succ:  l050B
l050B:
	c = c << 1
	H = false
	N = false
	SZXC = cond(c)
	b = __rcl(b, 0x01, C)
	H = false
	N = false
	SZXC = cond(b)
	hl = hl + hl + C
	N = false
	SZHXVC = cond(hl)
	a = a - 1
	N = false
	SZHXV = cond(a)
	branch Test(NE,Z) l050B
	// succ:  l0514 l050B
l0514:
	a = c
	v22 = Mem0[ix + -10:byte]
	a = a + v22
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -4:byte] = a
	a = b
	v23 = Mem0[ix + -9:byte]
	a = a + v23 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -3:byte] = a
	a = l
	v24 = Mem0[ix + -8:byte]
	a = a + v24 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -2:byte] = a
	a = h
	v25 = Mem0[ix + -7:byte]
	a = a + v25 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -1:byte] = a
	v26 = Mem0[ix + -26:byte]
	a = v26
	v27 = Mem0[ix + -38:byte]
	a = a + v27
	N = false
	SZHXVC = cond(a)
	c = a
	v28 = Mem0[ix + -25:byte]
	a = v28
	v29 = Mem0[ix + -37:byte]
	a = a + v29 + C
	N = false
	SZHXVC = cond(a)
	b = a
	v30 = Mem0[ix + -24:byte]
	a = v30
	v31 = Mem0[ix + -36:byte]
	a = a + v31 + C
	N = false
	SZHXVC = cond(a)
	l = a
	v32 = Mem0[ix + -23:byte]
	a = v32
	v33 = Mem0[ix + -35:byte]
	a = a + v33 + C
	N = false
	SZHXVC = cond(a)
	h = a
	v34 = Mem0[ix + -4:byte]
	a = v34
	a = a ^ c
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -4:byte] = a
	v37 = Mem0[ix + -3:byte]
	a = v37
	a = a ^ b
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -3:byte] = a
	v38 = Mem0[ix + -2:byte]
	a = v38
	a = a ^ l
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -2:byte] = a
	v39 = Mem0[ix + -1:byte]
	a = v39
	a = a ^ h
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -1:byte] = a
	sp = sp - 2
	Mem0[sp:word16] = af
	v40 = Mem0[ix + -26:byte]
	c = v40
	v41 = Mem0[ix + -25:byte]
	b = v41
	v42 = Mem0[ix + -24:byte]
	l = v42
	v43 = Mem0[ix + -23:byte]
	h = v43
	af = Mem0[sp:word16]
	sp = sp + 2
	a = 0x05
	// succ:  l057C
l057C:
	h = h >>u 1
	H = false
	N = false
	SZXC = cond(h)
	l = __rcr(l, 0x01, C)
	H = false
	N = false
	SZXC = cond(l)
	b = __rcr(b, 0x01, C)
	H = false
	N = false
	SZXC = cond(b)
	c = __rcr(c, 0x01, C)
	H = false
	N = false
	SZXC = cond(c)
	a = a - 1
	N = false
	SZHXV = cond(a)
	branch Test(NE,Z) l057C
	// succ:  l0587 l057C
l0587:
	a = c
	v44 = Mem0[ix + -22:byte]
	a = a + v44
	N = false
	SZHXVC = cond(a)
	c = a
	a = b
	v45 = Mem0[ix + -21:byte]
	a = a + v45 + C
	N = false
	SZHXVC = cond(a)
	b = a
	a = l
	v46 = Mem0[ix + -20:byte]
	a = a + v46 + C
	N = false
	SZHXVC = cond(a)
	l = a
	a = h
	v47 = Mem0[ix + -19:byte]
	a = a + v47 + C
	N = false
	SZHXVC = cond(a)
	h = a
	a = c
	v48 = Mem0[ix + -4:byte]
	a = a ^ v48
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	c = a
	a = b
	v49 = Mem0[ix + -3:byte]
	a = a ^ v49
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	b = a
	a = l
	v50 = Mem0[ix + -2:byte]
	a = a ^ v50
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	l = a
	a = h
	v51 = Mem0[ix + -1:byte]
	a = a ^ v51
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	h = a
	v52 = Mem0[ix + -34:byte]
	a = v52
	a = a - c
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -34:byte] = a
	v53 = Mem0[ix + -33:byte]
	a = v53
	a = a - b - C
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -33:byte] = a
	v54 = Mem0[ix + -32:byte]
	a = v54
	a = a - l - C
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -32:byte] = a
	v55 = Mem0[ix + -31:byte]
	a = v55
	a = a - h - C
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -31:byte] = a
	sp = sp - 2
	Mem0[sp:word16] = af
	v56 = Mem0[ix + -34:byte]
	c = v56
	v57 = Mem0[ix + -33:byte]
	b = v57
	v58 = Mem0[ix + -32:byte]
	l = v58
	v59 = Mem0[ix + -31:byte]
	h = v59
	af = Mem0[sp:word16]
	sp = sp + 2
	a = 0x04
	// succ:  l05DF
l05DF:
	c = c << 1
	H = false
	N = false
	SZXC = cond(c)
	b = __rcl(b, 0x01, C)
	H = false
	N = false
	SZXC = cond(b)
	hl = hl + hl + C
	N = false
	SZHXVC = cond(hl)
	a = a - 1
	N = false
	SZHXV = cond(a)
	branch Test(NE,Z) l05DF
	// succ:  l05E8 l05DF
l05E8:
	a = c
	v60 = Mem0[ix + -18:byte]
	a = a + v60
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -4:byte] = a
	a = b
	v61 = Mem0[ix + -17:byte]
	a = a + v61 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -3:byte] = a
	a = l
	v62 = Mem0[ix + -16:byte]
	a = a + v62 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -2:byte] = a
	a = h
	v63 = Mem0[ix + -15:byte]
	a = a + v63 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -1:byte] = a
	v64 = Mem0[ix + -34:byte]
	a = v64
	// succ:  l0604_thunk_fn0607
l0604_thunk_fn0607:
	call fn0607 (retsize: 0;)
	return
	// succ:  fn04EE_exit
fn04EE_exit:


// fn0607
// Return size: 0
define fn0607
fn0607_entry:
	// succ:  l0607
l0607:
	sp = fp
	v4 = Mem0[ix + -38:byte]
	a = a + v4
	N = false
	SZHXVC = cond(a)
	c = a
	v9 = Mem0[ix + -33:byte]
	a = v9
	// succ:  l060B_thunk_fn060E
l060B_thunk_fn060E:
	call fn060E (retsize: 0;)
	return
	// succ:  fn0607_exit
fn0607_exit:


// fn060E
// Return size: 0
define fn060E
fn060E_entry:
	// succ:  l060E
l060E:
	sp = v3
	v5 = Mem0[ix + -37:byte]
	a = a + v5 + C
	N = false
	SZHXVC = cond(a)
	b = a
	v11 = Mem0[ix + -32:byte]
	a = v11
	v12 = Mem0[ix + -36:byte]
	a = a + v12 + C
	N = false
	SZHXVC = cond(a)
	l = a
	v14 = Mem0[ix + -31:byte]
	a = v14
	v15 = Mem0[ix + -35:byte]
	a = a + v15 + C
	N = false
	SZHXVC = cond(a)
	h = a
	v17 = Mem0[ix + -4:byte]
	a = v17
	a = a ^ c
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -4:byte] = a
	v22 = Mem0[ix + -3:byte]
	a = v22
	a = a ^ b
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -3:byte] = a
	v23 = Mem0[ix + -2:byte]
	a = v23
	a = a ^ l
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -2:byte] = a
	v24 = Mem0[ix + -1:byte]
	a = v24
	a = a ^ h
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -1:byte] = a
	sp = sp - 2
	Mem0[sp:word16] = af
	v26 = Mem0[ix + -34:byte]
	c = v26
	v27 = Mem0[ix + -33:byte]
	b = v27
	v28 = Mem0[ix + -32:byte]
	l = v28
	v29 = Mem0[ix + -31:byte]
	h = v29
	af = Mem0[sp:word16]
	sp = sp + 2
	a = 0x05
	// succ:  l0650
l0650:
	h = h >>u 1
	H = false
	N = false
	SZXC = cond(h)
	l = __rcr(l, 0x01, C)
	H = false
	N = false
	SZXC = cond(l)
	b = __rcr(b, 0x01, C)
	H = false
	N = false
	SZXC = cond(b)
	c = __rcr(c, 0x01, C)
	H = false
	N = false
	SZXC = cond(c)
	a = a - 1
	N = false
	SZHXV = cond(a)
	branch Test(NE,Z) l0650
	// succ:  l065B l0650
l065B:
	a = c
	v33 = Mem0[ix + -14:byte]
	a = a + v33
	N = false
	SZHXVC = cond(a)
	c = a
	a = b
	v34 = Mem0[ix + -13:byte]
	a = a + v34 + C
	N = false
	SZHXVC = cond(a)
	b = a
	a = l
	v35 = Mem0[ix + -12:byte]
	a = a + v35 + C
	N = false
	SZHXVC = cond(a)
	l = a
	a = h
	v36 = Mem0[ix + -11:byte]
	a = a + v36 + C
	N = false
	SZHXVC = cond(a)
	h = a
	a = c
	v37 = Mem0[ix + -4:byte]
	a = a ^ v37
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	c = a
	a = b
	v38 = Mem0[ix + -3:byte]
	a = a ^ v38
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	b = a
	a = l
	v39 = Mem0[ix + -2:byte]
	a = a ^ v39
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	l = a
	a = h
	v40 = Mem0[ix + -1:byte]
	a = a ^ v40
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	h = a
	v41 = Mem0[ix + -26:byte]
	a = v41
	a = a - c
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -26:byte] = a
	v42 = Mem0[ix + -25:byte]
	a = v42
	a = a - b - C
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -25:byte] = a
	v43 = Mem0[ix + -24:byte]
	a = v43
	a = a - l - C
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -24:byte] = a
	v44 = Mem0[ix + -23:byte]
	a = v44
	a = a - h - C
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -23:byte] = a
	v45 = Mem0[ix + -38:byte]
	a = v45
	a = a + 0x47
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -38:byte] = a
	v46 = Mem0[ix + -37:byte]
	a = v46
	a = a + 0x86 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -37:byte] = a
	v47 = Mem0[ix + -36:byte]
	a = v47
	a = a + 0xC8 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -36:byte] = a
	v48 = Mem0[ix + -35:byte]
	a = v48
	a = a + 0x61 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -35:byte] = a
	v49 = Mem0[ix + -30:byte]
	a = v49
	a = a + 0xFF
	N = false
	SZHXVC = cond(a)
	c = a
	v50 = Mem0[ix + -29:byte]
	a = v50
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	b = a
	v51 = Mem0[ix + -28:byte]
	a = v51
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	l = a
	v52 = Mem0[ix + -27:byte]
	a = v52
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	h = a
	Mem0[ix + -30:byte] = c
	Mem0[ix + -29:byte] = b
	Mem0[ix + -28:byte] = l
	Mem0[ix + -27:byte] = h
	a = h
	a = a | l
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	a = a | b
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	a = a | c
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(NE,Z) l060E
	// succ:  l06F2 l060E
l06F2:
	hl = 0x000C
	hl = hl + sp
	N = false
	SZHXVC = cond(hl)
	bc = 0x0004
	// succ:  l06FA
l06FA:
	v55 = Mem0[hl:byte]
	Mem0[de:byte] = v55
	hl = hl + 1
	de = de + 1
	bc = bc - 1
	branch bc != 0x0000 l06FA
	// succ:  l06FC l06FA
l06FC:
	H = false
	V = false
	N = false
	v58 = de
	de = hl
	hl = v58
	v59 = Mem0[sp + 32:word16]
	hl = v59
	v60 = de
	de = hl
	hl = v60
	hl = 0x0004
	hl = hl + sp
	N = false
	SZHXVC = cond(hl)
	bc = 0x0004
	// succ:  l0709
l0709:
	v61 = Mem0[hl:byte]
	Mem0[de:byte] = v61
	hl = hl + 1
	de = de + 1
	bc = bc - 1
	branch bc != 0x0000 l0709
	// succ:  l070B l0709
l070B:
	H = false
	V = false
	N = false
	sp = ix
	ix = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn060E_exit
fn060E_exit:


// fn0805
// Return size: 0
define fn0805
fn0805_entry:
	// succ:  l0805
l0805:
	sp = fp
	a = a << 1
	H = false
	N = false
	SZXC = cond(a)
	__disable_interrupts()
	call fn0823 (retsize: 2;)
	call fn0822 (retsize: 2;)
	sp = sp + 0xFFFE
	__halt()
fn0805_exit:


// fn0822
// Return size: 2
define fn0822
fn0822_entry:
	// succ:  l0822
l0822:
	sp = fp
	// succ:  l0822_thunk_fn0823
l0822_thunk_fn0823:
	call fn0823 (retsize: 0;)
	return
	// succ:  fn0822_exit
fn0822_exit:


// fn0823
// Return size: 2
define fn0823
fn0823_entry:
	// succ:  l0823
l0823:
	sp = fp
	a = a
	bc = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn0823_exit
fn0823_exit:


// fn0AA6
// Return size: 0
define fn0AA6
fn0AA6_entry:
	// succ:  l0AA6
l0AA6:
	sp = v3
	a = a ^ c
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -6:byte] = a
	v12 = Mem0[ix + -5:byte]
	a = v12
	a = a ^ b
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -5:byte] = a
	v14 = Mem0[ix + -4:byte]
	a = v14
	a = a ^ l
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -4:byte] = a
	v16 = Mem0[ix + -3:byte]
	a = v16
	a = a ^ h
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -3:byte] = a
	sp = sp - 2
	Mem0[sp:word16] = af
	v19 = Mem0[ix + -10:byte]
	c = v19
	v20 = Mem0[ix + -9:byte]
	b = v20
	v21 = Mem0[ix + -8:byte]
	l = v21
	v22 = Mem0[ix + -7:byte]
	h = v22
	af = Mem0[sp:word16]
	sp = sp + 2
	a = 0x05
	// succ:  l0AD3
l0AD3:
	h = h >>u 1
	H = false
	N = false
	SZXC = cond(h)
	// succ:  l0AD5
l0AD5:
	l = __rcr(l, 0x01, C)
	H = false
	N = false
	SZXC = cond(l)
	b = __rcr(b, 0x01, C)
	H = false
	N = false
	SZXC = cond(b)
	c = __rcr(c, 0x01, C)
	H = false
	N = false
	SZXC = cond(c)
	a = a - 1
	N = false
	SZHXV = cond(a)
	branch Test(NE,Z) l0AD3
	// succ:  l0ADE l0AD3
l0ADE:
	a = c
	v26 = Mem0[ix + -38:byte]
	a = a + v26
	N = false
	SZHXVC = cond(a)
	c = a
	a = b
	v28 = Mem0[ix + -37:byte]
	a = a + v28 + C
	N = false
	SZHXVC = cond(a)
	b = a
	a = l
	v29 = Mem0[ix + -36:byte]
	a = a + v29 + C
	N = false
	SZHXVC = cond(a)
	l = a
	a = h
	v30 = Mem0[ix + -35:byte]
	a = a + v30 + C
	N = false
	SZHXVC = cond(a)
	h = a
	a = c
	v31 = Mem0[ix + -6:byte]
	a = a ^ v31
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	c = a
	a = b
	v32 = Mem0[ix + -5:byte]
	a = a ^ v32
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	b = a
	a = l
	// succ:  l0AFD
l0AFD:
	v33 = Mem0[ix + -4:byte]
	a = a ^ v33
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	l = a
	// succ:  l0B01
l0B01:
	a = h
	v34 = Mem0[ix + -3:byte]
	a = a ^ v34
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	h = a
	v35 = Mem0[ix + -14:byte]
	a = v35
	a = a + c
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -14:byte] = a
	v36 = Mem0[ix + -13:byte]
	a = v36
	a = a + b + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -13:byte] = a
	v37 = Mem0[ix + -12:byte]
	a = v37
	a = a + l + C
	N = false
	SZHXVC = cond(a)
	// succ:  l0B19_thunk_fn0B1B
l0B19_thunk_fn0B1B:
	call fn0B1B (retsize: 0;)
	return
	// succ:  fn0AA6_exit
fn0AA6_exit:


// fn0B1B
// Return size: 0
define fn0B1B
fn0B1B_entry:
	// succ:  l0B1B
l0B1B:
	sp = fp
	Mem0[ix + -12:byte] = a
	v5 = Mem0[ix + -11:byte]
	a = v5
	a = a + h + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -11:byte] = a
	v10 = Mem0[ix + -22:byte]
	a = v10
	a = a + 0xFF
	N = false
	SZHXVC = cond(a)
	c = a
	// succ:  l0B2B_thunk_fn0B2C
l0B2B_thunk_fn0B2C:
	call fn0B2C (retsize: 0;)
	return
	// succ:  fn0B1B_exit
fn0B1B_exit:


// fn0B2C
// Return size: 0
define fn0B2C
fn0B2C_entry:
	// succ:  l0B2C
l0B2C:
	sp = fp
	v4 = Mem0[ix + -21:byte]
	a = v4
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	b = a
	v10 = Mem0[ix + -20:byte]
	a = v10
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	l = a
	v12 = Mem0[ix + -19:byte]
	a = v12
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	h = a
	Mem0[ix + -22:byte] = c
	Mem0[ix + -21:byte] = b
	Mem0[ix + -20:byte] = l
	Mem0[ix + -19:byte] = h
	a = h
	a = a | l
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	a = a | b
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	a = a | c
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(NE,Z) l0B51_thunk_fn0350
	goto l0B51_thunk_fn0B55
	// succ:  l0B51_thunk_fn0B55 l0B51_thunk_fn0350
l0B2C:
	v19 = Mem0[ix + -21:byte]
	a = v19
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	b = a
	v20 = Mem0[ix + -20:byte]
	a = v20
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	l = a
	v21 = Mem0[ix + -19:byte]
	a = v21
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	h = a
	Mem0[ix + -22:byte] = c
	Mem0[ix + -21:byte] = b
	Mem0[ix + -20:byte] = l
	Mem0[ix + -19:byte] = h
	a = h
	a = a | l
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	a = a | b
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	a = a | c
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(NE,Z) l0B51_thunk_fn0350
	goto l0B51_thunk_fn0B55
	// succ:  l0B51_thunk_fn0B55 l0B51_thunk_fn0350
l0B51_thunk_fn0350:
	call fn0350 (retsize: 0;)
	return
	// succ:  fn0B2C_exit
l0B51_thunk_fn0350:
	call fn0350 (retsize: 0;)
	return
	// succ:  fn0B2C_exit
l0B51_thunk_fn0B55:
	call fn0B55 (retsize: 0;)
	return
	// succ:  fn0B2C_exit
l0B51_thunk_fn0B55:
	call fn0B55 (retsize: 0;)
	return
	// succ:  fn0B2C_exit
fn0B2C_exit:


// fn0B55
// Return size: 0
define fn0B55
fn0B55_entry:
	// succ:  l0B55
l0B55:
	sp = v3
	hl = 0x001C
	hl = hl + sp
	N = false
	SZHXVC = cond(hl)
	bc = 0x0004
	// succ:  l0B5D
l0B5D:
	v8 = Mem0[hl:byte]
	Mem0[de:byte] = v8
	hl = hl + 1
	de = de + 1
	bc = bc - 1
	branch bc != 0x0000 l0B5D
	// succ:  l0B5F l0B5D
l0B5F:
	H = false
	V = false
	N = false
	v12 = de
	de = hl
	hl = v12
	v13 = Mem0[sp + 36:word16]
	hl = v13
	v14 = de
	de = hl
	hl = v14
	hl = 0x0018
	hl = hl + sp
	N = false
	SZHXVC = cond(hl)
	bc = 0x0004
	// succ:  l0B6C
l0B6C:
	v15 = Mem0[hl:byte]
	Mem0[de:byte] = v15
	hl = hl + 1
	de = de + 1
	bc = bc - 1
	branch bc != 0x0000 l0B6C
	// succ:  l0B6E l0B6C
l0B6E:
	H = false
	V = false
	N = false
	sp = ix
	ix = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn0B55_exit
fn0B55_exit:


// fn0BFE
// Return size: 0
define fn0BFE
fn0BFE_entry:
	// succ:  l0BFE
l0BFE:
	sp = fp
fn0BFE_exit:


// fn0C1D
// Return size: 2
define fn0C1D
fn0C1D_entry:
	// succ:  l0C1D
l0C1D:
	sp = fp
	v4 = Mem0[ix + -26:byte]
	c = v4
	v6 = Mem0[ix + -25:byte]
	b = v6
	v8 = Mem0[ix + -24:byte]
	l = v8
	v10 = Mem0[ix + -23:byte]
	h = v10
	af = Mem0[sp:word16]
	sp = sp + 2
	a = 0x04
	// succ:  l0C2C
l0C2C:
	c = c << 1
	H = false
	N = false
	SZXC = cond(c)
	b = __rcl(b, 0x01, C)
	H = false
	N = false
	SZXC = cond(b)
	hl = hl + hl + C
	N = false
	SZHXVC = cond(hl)
	a = a - 1
	N = false
	SZHXV = cond(a)
	branch Test(NE,Z) l0C2C
	// succ:  l0C33_thunk_fn0C35 l0C2C
l0C33_thunk_fn0C35:
	call fn0C35 (retsize: 0;)
	return
	// succ:  fn0C1D_exit
fn0C1D_exit:


// fn0C35
// Return size: 2
define fn0C35
fn0C35_entry:
	// succ:  l0C35
l0C35:
	sp = fp
	a = c
	v6 = Mem0[ix + -10:byte]
	a = a + v6
	N = false
	SZHXVC = cond(a)
	goto l0C36_thunk_fn0C39
	// succ:  l0C36_thunk_fn0C39
l0C35:
l0C36_thunk_fn0C39:
	call fn0C39 (retsize: 0;)
	return
	// succ:  fn0C35_exit
fn0C35_exit:


// fn0C39
// Return size: 2
define fn0C39
fn0C39_entry:
	// succ:  l0C39
l0C39:
	sp = fp
	Mem0[ix + -4:byte] = a
	a = b
	v6 = Mem0[ix + -9:byte]
	a = a + v6 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -3:byte] = a
	a = l
	v11 = Mem0[ix + -8:byte]
	a = a + v11 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -2:byte] = a
	a = h
	v13 = Mem0[ix + -7:byte]
	a = a + v13 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -1:byte] = a
	v14 = Mem0[ix + -26:byte]
	a = v14
	v15 = Mem0[ix + -38:byte]
	a = a + v15
	N = false
	SZHXVC = cond(a)
	c = a
	v17 = Mem0[ix + -25:byte]
	a = v17
	v18 = Mem0[ix + -37:byte]
	a = a + v18 + C
	N = false
	SZHXVC = cond(a)
	b = a
	v19 = Mem0[ix + -24:byte]
	a = v19
	v20 = Mem0[ix + -36:byte]
	a = a + v20 + C
	N = false
	SZHXVC = cond(a)
	l = a
	v21 = Mem0[ix + -23:byte]
	a = v21
	v22 = Mem0[ix + -35:byte]
	a = a + v22 + C
	N = false
	SZHXVC = cond(a)
	h = a
	v23 = Mem0[ix + -4:byte]
	a = v23
	a = a ^ c
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -4:byte] = a
	v27 = Mem0[ix + -3:byte]
	a = v27
	a = a ^ b
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -3:byte] = a
	v28 = Mem0[ix + -2:byte]
	a = v28
	// succ:  l0C7D_thunk_fn0C80
l0C7D_thunk_fn0C80:
	call fn0C80 (retsize: 0;)
	return
	// succ:  fn0C39_exit
fn0C39_exit:


// fn0C80
// Return size: 2
define fn0C80
fn0C80_entry:
	// succ:  l0C80
l0C80:
	sp = fp
	a = a ^ l
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -2:byte] = a
	v11 = Mem0[ix + -1:byte]
	a = v11
	a = a ^ h
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -1:byte] = a
	sp = sp - 2
	Mem0[sp:word16] = af
	v14 = Mem0[ix + -26:byte]
	c = v14
	v16 = Mem0[ix + -25:byte]
	b = v16
	v18 = Mem0[ix + -24:byte]
	l = v18
	v19 = Mem0[ix + -23:byte]
	h = v19
	af = Mem0[sp:word16]
	sp = sp + 2
	a = 0x05
	// succ:  l0C9D
l0C9D:
	h = h >>u 1
	H = false
	N = false
	SZXC = cond(h)
	l = __rcr(l, 0x01, C)
	H = false
	N = false
	SZXC = cond(l)
	b = __rcr(b, 0x01, C)
	H = false
	N = false
	SZXC = cond(b)
	c = __rcr(c, 0x01, C)
	H = false
	N = false
	SZXC = cond(c)
	a = a - 1
	N = false
	SZHXV = cond(a)
	branch Test(NE,Z) l0C9D
	// succ:  l0CA8 l0C9D
l0CA8:
	a = c
	v23 = Mem0[ix + -22:byte]
	a = a + v23
	N = false
	SZHXVC = cond(a)
	c = a
	a = b
	v25 = Mem0[ix + -21:byte]
	a = a + v25 + C
	N = false
	SZHXVC = cond(a)
	b = a
	a = l
	v26 = Mem0[ix + -20:byte]
	a = a + v26 + C
	N = false
	SZHXVC = cond(a)
	l = a
	// succ:  l0CB6_thunk_fn0CB7
l0CB6_thunk_fn0CB7:
	call fn0CB7 (retsize: 0;)
	return
	// succ:  fn0C80_exit
fn0C80_exit:


// fn0CB7
// Return size: 2
define fn0CB7
fn0CB7_entry:
	// succ:  l0CB7
l0CB7:
	sp = fp
	a = h
	v6 = Mem0[ix + -19:byte]
	a = a + v6 + C
	N = false
	SZHXVC = cond(a)
	h = a
	a = c
	v11 = Mem0[ix + -4:byte]
	a = a ^ v11
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	c = a
	a = b
	v16 = Mem0[ix + -3:byte]
	a = a ^ v16
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	b = a
	a = l
	v18 = Mem0[ix + -2:byte]
	a = a ^ v18
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	l = a
	a = h
	v19 = Mem0[ix + -1:byte]
	a = a ^ v19
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	h = a
	v20 = Mem0[ix + -34:byte]
	a = v20
	a = a - c
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -34:byte] = a
	v21 = Mem0[ix + -33:byte]
	a = v21
	a = a - b - C
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -33:byte] = a
	v22 = Mem0[ix + -32:byte]
	a = v22
	a = a - l - C
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -32:byte] = a
	v23 = Mem0[ix + -31:byte]
	a = v23
	a = a - h - C
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -31:byte] = a
	sp = sp - 2
	Mem0[sp:word16] = af
	v25 = Mem0[ix + -34:byte]
	c = v25
	v26 = Mem0[ix + -33:byte]
	b = v26
	v27 = Mem0[ix + -32:byte]
	l = v27
	v28 = Mem0[ix + -31:byte]
	h = v28
	af = Mem0[sp:word16]
	sp = sp + 2
	a = 0x04
	// succ:  l0D00
l0D00:
	c = c << 1
	H = false
	N = false
	SZXC = cond(c)
	b = __rcl(b, 0x01, C)
	H = false
	N = false
	SZXC = cond(b)
	hl = hl + hl + C
	N = false
	SZHXVC = cond(hl)
	a = a - 1
	N = false
	SZHXV = cond(a)
	branch Test(NE,Z) l0D00
	// succ:  l0D09 l0D00
l0D09:
	a = c
	v33 = Mem0[ix + -18:byte]
	a = a + v33
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -4:byte] = a
	a = b
	v34 = Mem0[ix + -17:byte]
	a = a + v34 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -3:byte] = a
	a = l
	v35 = Mem0[ix + -16:byte]
	a = a + v35 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -2:byte] = a
	a = h
	v36 = Mem0[ix + -15:byte]
	a = a + v36 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -1:byte] = a
	v37 = Mem0[ix + -34:byte]
	a = v37
	v38 = Mem0[ix + -38:byte]
	a = a + v38
	N = false
	SZHXVC = cond(a)
	c = a
	v39 = Mem0[ix + -33:byte]
	a = v39
	v40 = Mem0[ix + -37:byte]
	a = a + v40 + C
	N = false
	SZHXVC = cond(a)
	b = a
	v41 = Mem0[ix + -32:byte]
	a = v41
	v42 = Mem0[ix + -36:byte]
	a = a + v42 + C
	N = false
	SZHXVC = cond(a)
	l = a
	v43 = Mem0[ix + -31:byte]
	a = v43
	v44 = Mem0[ix + -35:byte]
	a = a + v44 + C
	N = false
	SZHXVC = cond(a)
	h = a
	v45 = Mem0[ix + -4:byte]
	a = v45
	a = a ^ c
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -4:byte] = a
	v46 = Mem0[ix + -3:byte]
	a = v46
	a = a ^ b
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -3:byte] = a
	v47 = Mem0[ix + -2:byte]
	a = v47
	a = a ^ l
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -2:byte] = a
	v48 = Mem0[ix + -1:byte]
	a = v48
	a = a ^ h
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	Mem0[ix + -1:byte] = a
	sp = sp - 2
	Mem0[sp:word16] = af
	v49 = Mem0[ix + -34:byte]
	c = v49
	v50 = Mem0[ix + -33:byte]
	b = v50
	v51 = Mem0[ix + -32:byte]
	l = v51
	v52 = Mem0[ix + -31:byte]
	h = v52
	af = Mem0[sp:word16]
	sp = sp + 2
	a = 0x05
	// succ:  l0D71
l0D71:
	h = h >>u 1
	H = false
	N = false
	SZXC = cond(h)
	l = __rcr(l, 0x01, C)
	H = false
	N = false
	SZXC = cond(l)
	b = __rcr(b, 0x01, C)
	H = false
	N = false
	SZXC = cond(b)
	c = __rcr(c, 0x01, C)
	H = false
	N = false
	SZXC = cond(c)
	a = a - 1
	N = false
	SZHXV = cond(a)
	branch Test(NE,Z) l0D71
	// succ:  l0D7C l0D71
l0D7C:
	a = c
	v53 = Mem0[ix + -14:byte]
	a = a + v53
	N = false
	SZHXVC = cond(a)
	c = a
	a = b
	v54 = Mem0[ix + -13:byte]
	a = a + v54 + C
	N = false
	SZHXVC = cond(a)
	b = a
	a = l
	v55 = Mem0[ix + -12:byte]
	a = a + v55 + C
	N = false
	SZHXVC = cond(a)
	l = a
	a = h
	v56 = Mem0[ix + -11:byte]
	a = a + v56 + C
	N = false
	SZHXVC = cond(a)
	h = a
	a = c
	v57 = Mem0[ix + -4:byte]
	a = a ^ v57
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	c = a
	a = b
	v58 = Mem0[ix + -3:byte]
	a = a ^ v58
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	b = a
	a = l
	v59 = Mem0[ix + -2:byte]
	a = a ^ v59
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	l = a
	a = h
	v60 = Mem0[ix + -1:byte]
	a = a ^ v60
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	h = a
	v61 = Mem0[ix + -26:byte]
	a = v61
	a = a - c
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -26:byte] = a
	v62 = Mem0[ix + -25:byte]
	a = v62
	a = a - b - C
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -25:byte] = a
	v63 = Mem0[ix + -24:byte]
	a = v63
	a = a - l - C
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -24:byte] = a
	v64 = Mem0[ix + -23:byte]
	a = v64
	a = a - h - C
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -23:byte] = a
	v65 = Mem0[ix + -38:byte]
	a = v65
	a = a + 0x47
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -38:byte] = a
	v66 = Mem0[ix + -37:byte]
	a = v66
	a = a + 0x86 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -37:byte] = a
	v67 = Mem0[ix + -36:byte]
	a = v67
	a = a + 0xC8 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -36:byte] = a
	v68 = Mem0[ix + -35:byte]
	a = v68
	a = a + 0x61 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -35:byte] = a
	v69 = Mem0[ix + -30:byte]
	a = v69
	a = a + 0xFF
	N = false
	SZHXVC = cond(a)
	c = a
	v70 = Mem0[ix + -29:byte]
	a = v70
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	b = a
	v71 = Mem0[ix + -28:byte]
	a = v71
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	l = a
	v72 = Mem0[ix + -27:byte]
	a = v72
	a = a + 0xFF + C
	N = false
	SZHXVC = cond(a)
	h = a
	Mem0[ix + -30:byte] = c
	Mem0[ix + -29:byte] = b
	Mem0[ix + -28:byte] = l
	Mem0[ix + -27:byte] = h
	a = h
	a = a | l
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	a = a | b
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	a = a | c
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(NE,Z) l060E
	goto l0E0F_thunk_fn0E13
	// succ:  l0E0F_thunk_fn0E13 l0E0F_thunk_fn060E
l0E0F_thunk_fn060E:
	call fn060E (retsize: 0;)
	return
	// succ:  fn0CB7_exit
l0E0F_thunk_fn0E13:
	call fn0E13 (retsize: 0;)
	return
	// succ:  fn0CB7_exit
fn0CB7_exit:


// fn0DFC
// Return size: 0
define fn0DFC
fn0DFC_entry:
	// succ:  l0DFC
l0DFC:
	sp = fp
	Mem0[ix + -30:byte] = c
	Mem0[ix + -29:byte] = b
	Mem0[ix + -28:byte] = l
	Mem0[ix + -27:byte] = h
	a = h
	a = a | l
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	a = a | b
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	a = a | c
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(NE,Z) l0E0F_thunk_fn060E
	goto l0E0F_thunk_fn0E13
	// succ:  l0E0F_thunk_fn0E13 l0E0F_thunk_fn060E
l0E0F_thunk_fn060E:
	call fn060E (retsize: 0;)
	return
	// succ:  fn0DFC_exit
l0E0F_thunk_fn0E13:
	call fn0E13 (retsize: 0;)
	return
	// succ:  fn0DFC_exit
fn0DFC_exit:


// fn0E13
// Return size: 0
define fn0E13
fn0E13_entry:
	// succ:  l0E13
l0E13:
	sp = v3
	hl = 0x000C
	hl = hl + sp
	N = false
	SZHXVC = cond(hl)
	bc = 0x0004
	// succ:  l0E1B
l0E1B:
	v8 = Mem0[hl:byte]
	Mem0[de:byte] = v8
	hl = hl + 1
	de = de + 1
	bc = bc - 1
	branch bc != 0x0000 l0E1B
	// succ:  l0E1D l0E1B
l0E1D:
	H = false
	V = false
	N = false
	v12 = de
	de = hl
	hl = v12
	v13 = Mem0[sp + 32:word16]
	hl = v13
	v14 = de
	de = hl
	hl = v14
	hl = 0x0004
	hl = hl + sp
	N = false
	SZHXVC = cond(hl)
	bc = 0x0004
	// succ:  l0E2A
l0E2A:
	v15 = Mem0[hl:byte]
	Mem0[de:byte] = v15
	hl = hl + 1
	de = de + 1
	bc = bc - 1
	branch bc != 0x0000 l0E2A
	// succ:  l0E2C l0E2A
l0E2C:
	H = false
	V = false
	N = false
	sp = ix
	ix = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn0E13_exit
fn0E13_exit:


// fn0F9A
// Return size: 2
define fn0F9A
fn0F9A_entry:
	// succ:  l0F9A
l0F9A:
	sp = fp
	af = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn0F9A_exit
fn0F9A_exit:


// fn164F
// Return size: 2
define fn164F
fn164F_entry:
	// succ:  l164F
l164F:
	sp = fp
	Mem0[ix + -20:byte] = a
	v5 = Mem0[ix + -7:byte]
	a = v5
	a = a - h - C
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -19:byte] = a
	v10 = Mem0[sp + 27:word16]
	hl = v10
	v12 = Mem0[hl:byte]
	a = v12
	hl = hl + 1
	X = cond(hl)
	v14 = Mem0[hl:byte]
	h = v14
	l = a
	a = c
	a = a - l
	N = true
	SZHXVC = cond(a)
	c = a
	a = b
	a = a - h - C
	N = true
	SZHXVC = cond(a)
	b = a
	v18 = Mem0[ix + -8:byte]
	a = v18
	v19 = Mem0[ix + -4:byte]
	a = a - v19
	N = true
	SZHXVC = cond(a)
	l = a
	v20 = Mem0[ix + -7:byte]
	a = v20
	v21 = Mem0[ix + -3:byte]
	a = a - v21 - C
	N = true
	SZHXVC = cond(a)
	h = a
	sp = sp - 2
	Mem0[sp:word16] = de
	v23 = de
	de = hl
	hl = v23
	v24 = Mem0[sp + 21:word16]
	hl = v24
	v25 = de
	de = hl
	hl = v25
	sp = sp - 2
	Mem0[sp:word16] = de
	sp = sp - 2
	Mem0[sp:word16] = bc
	sp = sp - 2
	Mem0[sp:word16] = hl
	call fn02F4 (retsize: 2;)
	sp = sp + 0xFFFE
	sp = sp + 0x0008
	N = false
	SZHXVC = cond(sp)
	a = l
	a = a | a
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(NE,Z) l1692
	// succ:  l168D l1692
l168D:
	l = 0x03
	// succ:  l168F_thunk_fn0C35
l168F_thunk_fn0C35:
	call fn0C35 (retsize: 0;)
	return
	// succ:  fn164F_exit
l1692:
	v30 = Mem0[sp + 23:word16]
	hl = v30
	v31 = Mem0[hl:byte]
	c = v31
	hl = hl + 1
	X = cond(hl)
	v32 = Mem0[hl:byte]
	b = v32
	v33 = Mem0[sp + 21:word16]
	hl = v33
	v34 = Mem0[hl:byte]
	e = v34
	hl = hl + 1
	X = cond(hl)
	v36 = Mem0[hl:byte]
	d = v36
	a = c
	a = a - e
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -20:byte] = a
	a = b
	a = a - d - C
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -19:byte] = a
	v38 = Mem0[sp + 33:word16]
	hl = v38
	v39 = Mem0[hl:byte]
	e = v39
	hl = hl + 1
	X = cond(hl)
	v40 = Mem0[hl:byte]
	d = v40
	v41 = Mem0[sp + 14:word16]
	hl = v41
	v42 = Mem0[hl:byte]
	a = v42
	hl = hl + 1
	X = cond(hl)
	v43 = Mem0[hl:byte]
	h = v43
	l = a
	a = e
	a = a - l
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -22:byte] = a
	a = d
	a = a - h - C
	N = true
	SZHXVC = cond(a)
	Mem0[ix + -21:byte] = a
	v44 = Mem0[sp + 27:word16]
	hl = v44
	v45 = Mem0[hl:byte]
	a = v45
	hl = hl + 1
	X = cond(hl)
	v46 = Mem0[hl:byte]
	h = v46
	l = a
	a = c
	a = a - l
	N = true
	SZHXVC = cond(a)
	c = a
	a = b
	a = a - h - C
	N = true
	SZHXVC = cond(a)
	b = a
	v47 = Mem0[sp + 37:word16]
	hl = v47
	v48 = Mem0[hl:byte]
	a = v48
	hl = hl + 1
	X = cond(hl)
	v49 = Mem0[hl:byte]
	h = v49
	l = a
	a = e
	a = a - l
	N = true
	SZHXVC = cond(a)
	e = a
	a = d
	a = a - h - C
	N = true
	SZHXVC = cond(a)
	d = a
	v50 = Mem0[sp + 19:word16]
	hl = v50
	sp = sp - 2
	Mem0[sp:word16] = hl
	v51 = Mem0[sp + 19:word16]
	hl = v51
	sp = sp - 2
	Mem0[sp:word16] = hl
	sp = sp - 2
	Mem0[sp:word16] = bc
	sp = sp - 2
	Mem0[sp:word16] = de
	// succ:  l16F6_thunk_fn16F7
l16F6_thunk_fn16F7:
	call fn16F7 (retsize: 0;)
	return
	// succ:  fn164F_exit
fn164F_exit:


// fn16F7
// Return size: 2
define fn16F7
fn16F7_entry:
	// succ:  l16F7
l16F7:
	sp = fp
	call fn02F4 (retsize: 2;)
	sp = sp + 0xFFFE
	sp = sp + 0x0008
	N = false
	SZHXVC = cond(sp)
	a = l
	a = a | a
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(NE,Z) l1707
	// succ:  l1702 l1707
l1702:
	l = 0x03
	// succ:  l1704_thunk_fn0C35
l1704_thunk_fn0C35:
	call fn0C35 (retsize: 0;)
	return
	// succ:  fn16F7_exit
l1707:
	l = 0x00
	// succ:  l1709_thunk_fn0C35
l1709_thunk_fn0C35:
	call fn0C35 (retsize: 0;)
	return
	// succ:  fn16F7_exit
fn16F7_exit:


// fn1873
// Return size: 2
define fn1873
fn1873_entry:
	// succ:  l1873
l1873:
	sp = fp
	v3 = Mem0[sp + 19:word16]
	hl = v3
	Mem0[hl:byte] = c
	hl = hl + 1
	X = cond(hl)
	Mem0[hl:byte] = b
	l = 0x02
	// succ:  l187D_thunk_fn0C35
l187D_thunk_fn0C35:
	call fn0C35 (retsize: 0;)
	return
	// succ:  fn1873_exit
fn1873_exit:


// fn1929
// Return size: 2
define fn1929
fn1929_entry:
	// succ:  l1929
l1929:
	sp = fp
	h = a
	l = a
	a = e
	a = a - l
	N = true
	SZHXVC = cond(a)
	e = a
	a = d
	a = a - h - C
	N = true
	SZHXVC = cond(a)
	d = a
	v11 = Mem0[sp + 19:word16]
	hl = v11
	sp = sp - 2
	Mem0[sp:word16] = hl
	v13 = Mem0[sp + 19:word16]
	hl = v13
	sp = sp - 2
	Mem0[sp:word16] = hl
	sp = sp - 2
	Mem0[sp:word16] = bc
	sp = sp - 2
	Mem0[sp:word16] = de
	call fn02F4 (retsize: 2;)
	sp = sp + 0xFFFE
	sp = sp + 0x0008
	N = false
	SZHXVC = cond(sp)
	v17 = Mem0[ix + -39:byte]
	a = v17
	a = a | a
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(NE,Z) l194E
	// succ:  l194A l194E
l194A:
	a = a | l
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(EQ,Z) l1952
	// succ:  l194E l1952
l194E:
	l = 0x00
	goto l1964
	// succ:  l1964
l1952:
	v22 = Mem0[ix + -39:byte]
	a = v22
	a = a | a
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(EQ,Z) l195E
	// succ:  l1959 l195E
l1959:
	a = l
	a = a | a
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(NE,Z) l1962
	// succ:  l195E l1962
l195E:
	l = 0x02
	goto l1964
	// succ:  l1964
l1962:
	l = 0x01
	// succ:  l1964
l1964:
	sp = ix
	ix = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn1929_exit
fn1929_exit:


// fn1BA4
// Return size: 2
define fn1BA4
fn1BA4_entry:
	// succ:  l1BA4
l1BA4:
	sp = fp
	d = h
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + de
	N = false
	SZHXVC = cond(hl)
	de = Mem0[sp:word16]
	sp = sp + 2
	hl = hl + bc
	N = false
	SZHXVC = cond(hl)
	v10 = Mem0[sp + 14:word16]
	iy = v10
	iy = iy + bc
	N = false
	SZHXVC = cond(iy)
	sp = sp - 2
	Mem0[sp:word16] = de
	sp = sp - 2
	Mem0[sp:word16] = hl
	sp = sp - 2
	Mem0[sp:word16] = iy
	v12 = Mem0[sp + 35:word16]
	hl = v12
	sp = sp - 2
	Mem0[sp:word16] = hl
	v13 = Mem0[sp + 35:word16]
	hl = v13
	sp = sp - 2
	Mem0[sp:word16] = hl
	call fn0805 (retsize: 2;)
	sp = sp + 0x000A
	N = false
	SZHXVC = cond(sp)
	e = l
	a = 0x03
	a = a - e
	N = true
	SZHXVC = cond(a)
	branch Test(ULT,C) l1BCD_thunk_fn1BF9
	goto l1BCF
	// succ:  l1BCF l1BCD_thunk_fn1BF9
l1BCD_thunk_fn1BF9:
	call fn1BF9 (retsize: 0;)
	return
	// succ:  fn1BA4_exit
l1BCF:
	d = 0x00
	hl = 0x0EAB
	hl = hl + de
	N = false
	SZHXVC = cond(hl)
	hl = hl + de
	N = false
	SZHXVC = cond(hl)
	v18 = Mem0[hl:ptr16]
	switch (a) { l1BD8_thunk_fn0000 }
	// succ:  l1BD8_thunk_fn0000
l1BD8_thunk_fn0000:
	call fn0000 (retsize: 0;)
	return
	// succ:  fn1BA4_exit
fn1BA4_exit:


// fn1BDE
// Return size: 2
define fn1BDE
fn1BDE_entry:
	// succ:  l1BDE
l1BDE:
	sp = fp
	// succ:  l1BE9
l1BE9:
	v4 = Mem0[ix + -23:byte]
	v5 = v4 + 1
	Mem0[ix + -23:byte] = v5
	N = false
	SZHXV = cond(v5)
	v8 = Mem0[ix + -23:byte]
	a = v8
	Mem0[ix + -1:byte] = a
	// succ:  l1BF2_thunk_fn1BF9
l1BF2_thunk_fn1BF9:
	call fn1BF9 (retsize: 0;)
	return
	// succ:  fn1BDE_exit
fn1BDE_exit:


// fn1BF9
// Return size: 2
define fn1BF9
fn1BF9_entry:
	goto l1BF9
	// succ:  l1BF9
l0E3B:
	b = b + 1
	N = false
	SZHXV = cond(b)
	hl = 0x0823
	// succ:  l0E3F
l0E3F:
	v15 = Mem0[hl:byte]
	Mem0[de:byte] = v15
	hl = hl + 1
	de = de + 1
	bc = bc - 1
	branch bc != 0x0000 l0E3F
	// succ:  l0E41 l0E3F
l0E41:
	H = false
	V = false
	N = false
	return
	// succ:  fn1BF9_exit
l1BF9:
	sp = fp
	v4 = Mem0[ix + -9:byte]
	a = v4
	a = a + 0x09
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -9:byte] = a
	v8 = Mem0[ix + -8:byte]
	a = v8
	a = a + 0x00 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -8:byte] = a
	v10 = Mem0[ix + -11:byte]
	v11 = v10 + 1
	Mem0[ix + -11:byte] = v11
	N = false
	SZHXV = cond(v11)
	goto l0E3B
	// succ:  l0E3B
fn1BF9_exit:


// fn1C54
// Return size: 0
define fn1C54
fn1C54_entry:
	// succ:  l1C54
l1C54:
	sp = fp
fn1C54_exit:


// fn1C89
// Return size: 2
define fn1C89
fn1C89_entry:
	goto l1C89
	// succ:  l1C89
l0F96:
	af = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn1C89_exit
l1C89:
	sp = fp
	a = a | c
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(EQ,Z) l1C92
	// succ:  l1C8D l1C92
l1C8D:
	l = 0x01
	goto l0F96
	// succ:  l0F96
l1C92:
	l = 0x03
	goto l0F96
	// succ:  l0F96
fn1C89_exit:


// fn22A6
// Return size: 0
define fn22A6
fn22A6_entry:
	goto l22A6
	// succ:  l22A6
l152A_in_fn22A6:
	a = c
	hl = hl + 1
	X = cond(hl)
	Mem0[hl:byte] = b
	l = 0x01
	sp = ix
	ix = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn22A6_exit
l22A6:
	sp = fp
	v4 = Mem0[ix + -9:byte]
	a = v4
	Mem0[ix + -4:byte] = a
	Mem0[ix + -3:byte] = 0x00
	v8 = de
	de = hl
	hl = v8
	v9 = Mem0[sp + 5:word16]
	hl = v9
	v10 = de
	de = hl
	hl = v10
	de = de + 1
	X = cond(de)
	v12 = Mem0[sp + 16:word16]
	hl = v12
	hl = hl + de
	N = false
	SZHXVC = cond(hl)
	v15 = Mem0[hl:byte]
	e = v15
	d = 0x00
	l = e
	h = d
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + de
	N = false
	SZHXVC = cond(hl)
	hl = hl + bc
	N = false
	SZHXVC = cond(hl)
	Mem0[sp + 3:word16] = hl
	v21 = Mem0[sp + 3:word16]
	hl = v21
	hl = hl + 1
	X = cond(hl)
	hl = hl + 1
	X = cond(hl)
	v22 = Mem0[hl:byte]
	a = v22
	Mem0[ix + -8:byte] = a
	hl = hl + 1
	X = cond(hl)
	v23 = Mem0[hl:byte]
	a = v23
	Mem0[ix + -7:byte] = a
	v24 = de
	de = hl
	hl = v24
	v25 = Mem0[sp + 5:word16]
	hl = v25
	v26 = de
	de = hl
	hl = v26
	de = de + 1
	X = cond(de)
	de = de + 1
	X = cond(de)
	v27 = Mem0[sp + 16:word16]
	hl = v27
	hl = hl + de
	N = false
	SZHXVC = cond(hl)
	v28 = Mem0[hl:byte]
	c = v28
	b = 0x00
	l = c
	h = b
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + bc
	N = false
	SZHXVC = cond(hl)
	c = l
	b = h
	v31 = Mem0[sp + 13:word16]
	hl = v31
	hl = hl + bc
	N = false
	SZHXVC = cond(hl)
	v32 = Mem0[hl:byte]
	c = v32
	hl = hl + 1
	X = cond(hl)
	v33 = Mem0[hl:byte]
	b = v33
	v34 = de
	de = hl
	hl = v34
	v35 = Mem0[sp + 5:word16]
	hl = v35
	v36 = de
	de = hl
	hl = v36
	de = de + 1
	X = cond(de)
	de = de + 1
	X = cond(de)
	de = de + 1
	X = cond(de)
	v37 = Mem0[sp + 16:word16]
	hl = v37
	hl = hl + de
	N = false
	SZHXVC = cond(hl)
	v38 = Mem0[hl:byte]
	e = v38
	d = 0x00
	l = e
	h = d
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + de
	N = false
	SZHXVC = cond(hl)
	hl = hl + bc
	N = false
	SZHXVC = cond(hl)
	Mem0[sp + 5:word16] = hl
	v39 = Mem0[sp + 5:word16]
	hl = v39
	hl = hl + 1
	X = cond(hl)
	hl = hl + 1
	X = cond(hl)
	v40 = Mem0[hl:byte]
	c = v40
	hl = hl + 1
	X = cond(hl)
	v41 = Mem0[hl:byte]
	b = v41
	v42 = Mem0[ix + -8:byte]
	a = v42
	a = a - c
	N = true
	SZHXVC = cond(a)
	c = a
	v43 = Mem0[ix + -7:byte]
	a = v43
	a = a - b - C
	N = true
	SZHXVC = cond(a)
	b = a
	v45 = Mem0[sp + 3:word16]
	hl = v45
	v46 = Mem0[hl:byte]
	e = v46
	hl = hl + 1
	X = cond(hl)
	v47 = Mem0[hl:byte]
	d = v47
	v48 = Mem0[sp + 5:word16]
	hl = v48
	v49 = Mem0[hl:byte]
	a = v49
	hl = hl + 1
	X = cond(hl)
	v50 = Mem0[hl:byte]
	h = v50
	l = a
	a = e
	a = a - l
	N = true
	SZHXVC = cond(a)
	e = a
	a = d
	a = a - h - C
	N = true
	SZHXVC = cond(a)
	d = a
	sp = sp - 2
	Mem0[sp:word16] = bc
	sp = sp - 2
	Mem0[sp:word16] = de
	call fn03AA (retsize: 2;)
	sp = sp + 0x0004
	N = false
	SZHXVC = cond(sp)
	c = l
	b = h
	v51 = Mem0[sp + 7:word16]
	hl = v51
	Mem0[hl:byte] = c
	hl = hl + 1
	X = cond(hl)
	Mem0[hl:byte] = b
	v52 = Mem0[ix + -9:byte]
	v53 = v52 + 1
	Mem0[ix + -9:byte] = v53
	N = false
	SZHXV = cond(v53)
	v55 = Mem0[ix + -9:byte]
	v56 = v55 + 1
	Mem0[ix + -9:byte] = v56
	N = false
	SZHXV = cond(v56)
	v57 = Mem0[ix + -9:byte]
	v58 = v57 + 1
	Mem0[ix + -9:byte] = v58
	N = false
	SZHXV = cond(v58)
	v59 = Mem0[ix + -9:byte]
	v60 = v59 + 1
	Mem0[ix + -9:byte] = v60
	N = false
	SZHXV = cond(v60)
	goto l152A_in_fn22A6
	// succ:  l152A_in_fn22A6
fn22A6_exit:


// fn291C
// Return size: 2
define fn291C
fn291C_entry:
	// succ:  l291C
l291C:
	sp = fp
	e = a
	hl = hl - 1
	X = cond(hl)
	v7 = Mem0[hl:byte]
	l = v7
	a = l
	a = __ror(a, 0x01)
	H = false
	N = false
	SZXC = cond(a)
	a = a - a - C
	N = true
	SZHXVC = cond(a)
	h = a
	a = e
	a = __ror(a, 0x01)
	H = false
	N = false
	SZXC = cond(a)
	a = a - a - C
	N = true
	SZHXVC = cond(a)
	d = a
	a = h
	a = a ^ d
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	a = __rcl(a, 0x01, C)
	H = false
	N = false
	SZXC = cond(a)
	a = h
	sp = sp - 2
	Mem0[sp:word16] = af
	a = __rcl(a, 0x01, C)
	H = false
	N = false
	SZXC = cond(a)
	branch Test(UGE,C) l293D
	// succ:  l2933 l293D
l2933:
	a = a - a
	N = true
	SZHXVC = cond(a)
	a = a - l
	N = true
	SZHXVC = cond(a)
	l = a
	a = a - a - C
	N = true
	SZHXVC = cond(a)
	a = a - h
	N = true
	SZHXVC = cond(a)
	h = a
	// succ:  l293D
l293D:
	Z = (d & 0x80) == 0x00
	N = false
	SHXV = cond(d)
	branch Test(EQ,Z) l294B
	// succ:  l2941 l294B
l2941:
	a = a - a
	N = true
	SZHXVC = cond(a)
	a = a - e
	N = true
	SZHXVC = cond(a)
	e = a
	a = a - a - C
	N = true
	SZHXVC = cond(a)
	a = a - d
	N = true
	SZHXVC = cond(a)
	d = a
	// succ:  l294B
l294B:
	call fn1C54 (retsize: 2;)
	af = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn291C_exit
fn291C_exit:


// fn384A
// Return size: 2
define fn384A
fn384A_entry:
	// succ:  l384A
l384A:
	sp = fp
	l = 0x01
	sp = ix
	ix = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn384A_exit
fn384A_exit:


// fn3E2D
// Return size: 2
define fn3E2D
fn3E2D_entry:
	// succ:  l3E2D
l3E2D:
	sp = fp
	v4 = Mem0[ix + -9:byte]
	a = v4
	Mem0[ix + -4:byte] = a
	Mem0[ix + -3:byte] = 0x00
	v8 = de
	de = hl
	hl = v8
	v9 = Mem0[sp + 5:word16]
	hl = v9
	v10 = de
	de = hl
	hl = v10
	de = de + 1
	X = cond(de)
	v12 = Mem0[sp + 16:word16]
	hl = v12
	hl = hl + de
	N = false
	SZHXVC = cond(hl)
	v15 = Mem0[hl:byte]
	e = v15
	d = 0x00
	l = e
	h = d
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + de
	N = false
	SZHXVC = cond(hl)
	hl = hl + bc
	N = false
	SZHXVC = cond(hl)
	Mem0[sp + 3:word16] = hl
	v21 = Mem0[sp + 3:word16]
	hl = v21
	hl = hl + 1
	X = cond(hl)
	hl = hl + 1
	X = cond(hl)
	v22 = Mem0[hl:byte]
	a = v22
	Mem0[ix + -8:byte] = a
	hl = hl + 1
	X = cond(hl)
	v23 = Mem0[hl:byte]
	a = v23
	Mem0[ix + -7:byte] = a
	v24 = de
	de = hl
	hl = v24
	v25 = Mem0[sp + 5:word16]
	hl = v25
	v26 = de
	de = hl
	hl = v26
	de = de + 1
	X = cond(de)
	de = de + 1
	X = cond(de)
	v27 = Mem0[sp + 16:word16]
	hl = v27
	hl = hl + de
	N = false
	SZHXVC = cond(hl)
	v28 = Mem0[hl:byte]
	c = v28
	b = 0x00
	l = c
	h = b
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + bc
	N = false
	SZHXVC = cond(hl)
	c = l
	b = h
	v31 = Mem0[sp + 13:word16]
	hl = v31
	hl = hl + bc
	N = false
	SZHXVC = cond(hl)
	v32 = Mem0[hl:byte]
	c = v32
	hl = hl + 1
	X = cond(hl)
	v33 = Mem0[hl:byte]
	b = v33
	v34 = de
	de = hl
	hl = v34
	v35 = Mem0[sp + 5:word16]
	hl = v35
	v36 = de
	de = hl
	hl = v36
	de = de + 1
	X = cond(de)
	de = de + 1
	X = cond(de)
	de = de + 1
	X = cond(de)
	v37 = Mem0[sp + 16:word16]
	hl = v37
	hl = hl + de
	N = false
	SZHXVC = cond(hl)
	v38 = Mem0[hl:byte]
	e = v38
	d = 0x00
	l = e
	h = d
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + hl
	N = false
	SZHXVC = cond(hl)
	hl = hl + de
	N = false
	SZHXVC = cond(hl)
	hl = hl + bc
	N = false
	SZHXVC = cond(hl)
	Mem0[sp + 5:word16] = hl
	v39 = Mem0[sp + 5:word16]
	hl = v39
	hl = hl + 1
	X = cond(hl)
	hl = hl + 1
	X = cond(hl)
	v40 = Mem0[hl:byte]
	c = v40
	hl = hl + 1
	X = cond(hl)
	v41 = Mem0[hl:byte]
	b = v41
	v42 = Mem0[ix + -8:byte]
	a = v42
	a = a - c
	N = true
	SZHXVC = cond(a)
	c = a
	v43 = Mem0[ix + -7:byte]
	a = v43
	// succ:  l3EBF_thunk_fn3EC2
l3EBF_thunk_fn3EC2:
	call fn3EC2 (retsize: 0;)
	return
	// succ:  fn3E2D_exit
fn3E2D_exit:


// fn3EC2
// Return size: 2
define fn3EC2
fn3EC2_entry:
	goto l3EC2
	// succ:  l3EC2
l152A:
	a = c
	hl = hl + 1
	X = cond(hl)
	Mem0[hl:byte] = b
	l = 0x01
	sp = ix
	ix = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn3EC2_exit
l3EC2:
	sp = fp
	a = a - b - C
	N = true
	SZHXVC = cond(a)
	b = a
	v8 = Mem0[sp + 3:word16]
	hl = v8
	v10 = Mem0[hl:byte]
	e = v10
	hl = hl + 1
	X = cond(hl)
	v13 = Mem0[hl:byte]
	d = v13
	v15 = Mem0[sp + 5:word16]
	hl = v15
	v16 = Mem0[hl:byte]
	a = v16
	hl = hl + 1
	X = cond(hl)
	v17 = Mem0[hl:byte]
	h = v17
	l = a
	a = e
	a = a - l
	N = true
	SZHXVC = cond(a)
	e = a
	a = d
	a = a - h - C
	N = true
	SZHXVC = cond(a)
	d = a
	sp = sp - 2
	Mem0[sp:word16] = bc
	sp = sp - 2
	Mem0[sp:word16] = de
	call fn03AA (retsize: 2;)
	sp = sp + 0x0004
	N = false
	SZHXVC = cond(sp)
	c = l
	b = h
	v23 = Mem0[sp + 7:word16]
	hl = v23
	Mem0[hl:byte] = c
	hl = hl + 1
	X = cond(hl)
	Mem0[hl:byte] = b
	v25 = Mem0[ix + -9:byte]
	v26 = v25 + 1
	Mem0[ix + -9:byte] = v26
	N = false
	SZHXV = cond(v26)
	v28 = Mem0[ix + -9:byte]
	v29 = v28 + 1
	Mem0[ix + -9:byte] = v29
	N = false
	SZHXV = cond(v29)
	v30 = Mem0[ix + -9:byte]
	v31 = v30 + 1
	Mem0[ix + -9:byte] = v31
	N = false
	SZHXV = cond(v31)
	v32 = Mem0[ix + -9:byte]
	v33 = v32 + 1
	Mem0[ix + -9:byte] = v33
	N = false
	SZHXV = cond(v33)
	goto l152A
	// succ:  l152A
fn3EC2_exit:


// fn59FE
// Return size: 0
define fn59FE
fn59FE_entry:
	goto l59FE
	// succ:  l59FE
l0A35:
	a = a + c
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -10:byte] = a
	v24 = Mem0[ix + -9:byte]
	a = v24
	a = a + b + C
	N = false
	SZHXVC = cond(a)
	// succ:  l0A3F
l0A3F:
	Mem0[ix + -9:byte] = a
	v26 = Mem0[ix + -8:byte]
	a = v26
	a = a + l + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -8:byte] = a
	v28 = Mem0[ix + -7:byte]
	a = v28
	a = a + h + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -7:byte] = a
	sp = sp - 2
	Mem0[sp:word16] = af
	v31 = Mem0[ix + -10:byte]
	c = v31
	v32 = Mem0[ix + -9:byte]
	b = v32
	v33 = Mem0[ix + -8:byte]
	l = v33
	v34 = Mem0[ix + -7:byte]
	h = v34
	af = Mem0[sp:word16]
	sp = sp + 2
	a = 0x04
	// succ:  l0A62
l0A62:
	c = c << 1
	H = false
	N = false
	SZXC = cond(c)
	b = __rcl(b, 0x01, C)
	H = false
	N = false
	SZXC = cond(b)
	hl = hl + hl + C
	N = false
	SZHXVC = cond(hl)
	a = a - 1
	N = false
	SZHXV = cond(a)
	branch Test(NE,Z) l0A62
	// succ:  l0A6B l0A62
l0A6B:
	a = c
	v38 = Mem0[ix + -34:byte]
	a = a + v38
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -6:byte] = a
	a = b
	v39 = Mem0[ix + -33:byte]
	a = a + v39 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -5:byte] = a
	a = l
	v40 = Mem0[ix + -32:byte]
	a = a + v40 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -4:byte] = a
	a = h
	v41 = Mem0[ix + -31:byte]
	a = a + v41 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -3:byte] = a
	v42 = Mem0[ix + -10:byte]
	a = v42
	v43 = Mem0[ix + -18:byte]
	a = a + v43
	N = false
	SZHXVC = cond(a)
	c = a
	v44 = Mem0[ix + -9:byte]
	a = v44
	v45 = Mem0[ix + -17:byte]
	a = a + v45 + C
	N = false
	SZHXVC = cond(a)
	b = a
	v46 = Mem0[ix + -8:byte]
	a = v46
	v47 = Mem0[ix + -16:byte]
	a = a + v47 + C
	N = false
	SZHXVC = cond(a)
	l = a
	v48 = Mem0[ix + -7:byte]
	a = v48
	v49 = Mem0[ix + -15:byte]
	a = a + v49 + C
	N = false
	SZHXVC = cond(a)
	h = a
	v50 = Mem0[ix + -6:byte]
	a = v50
	// succ:  l0AA3_thunk_fn0AA6
l0AA3_thunk_fn0AA6:
	call fn0AA6 (retsize: 0;)
	return
	// succ:  fn59FE_exit
l59FE:
	sp = fp
	v3 = Mem0[sp + 16:word16]
	hl = v3
	hl = hl + bc
	N = false
	SZHXVC = cond(hl)
	sp = sp - 2
	Mem0[sp:word16] = bc
	sp = sp - 2
	Mem0[sp:word16] = de
	sp = sp - 2
	Mem0[sp:word16] = hl
	v9 = Mem0[sp + 16:word16]
	hl = v9
	sp = sp - 2
	Mem0[sp:word16] = hl
	call fn0BFE (retsize: 2;)
	sp = sp + 0x0004
	N = false
	SZHXVC = cond(sp)
	de = Mem0[sp:word16]
	sp = sp + 2
	bc = Mem0[sp:word16]
	sp = sp + 2
	Mem0[sp + 10:word16] = hl
	v11 = Mem0[ix + -2:byte]
	a = v11
	v13 = Mem0[ix + 4:byte]
	a = a - v13
	N = true
	SZHXVC = cond(a)
	v14 = Mem0[ix + -1:byte]
	a = v14
	v15 = Mem0[ix + 5:byte]
	a = a - v15 - C
	N = true
	SZHXVC = cond(a)
	branch Test(NO,V) l0A35
	// succ:  l5A25 l0A35
l5A25:
	a = a ^ 0x80
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(GE,S) l0A3F
	// succ:  l5A2B l0A3F
l5A2B:
	v22 = Mem0[sp + 10:word16]
	hl = v22
	// succ:  l5A2E_thunk_fn0B2C
l5A2E_thunk_fn0B2C:
	call fn0B2C (retsize: 0;)
	return
	// succ:  fn59FE_exit
fn59FE_exit:


// fn5A49
// Return size: 0
define fn5A49
fn5A49_entry:
	// succ:  l5A49
l5A49:
	sp = fp
	a = 0x80
	v5 = Mem0[ix + -3:byte]
	a = a + v5 + C
	N = false
	SZHXVC = cond(a)
	h = a
	hl = hl + de
	N = false
	SZHXVC = cond(hl)
	v12 = de
	de = hl
	hl = v12
	l = e
	h = d
	v16 = Mem0[hl:byte]
	a = v16
	hl = hl + 1
	X = cond(hl)
	v18 = Mem0[hl:byte]
	h = v18
	l = a
	Mem0[sp + 8:word16] = hl
	a = h
	a = a | l
	H = false
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(EQ,Z) l0B1B
	goto l5A66
	// succ:  l5A66 l5A62_thunk_fn0AA6
l5A62_thunk_fn0AA6:
	call fn0AA6 (retsize: 0;)
	return
	// succ:  fn5A49_exit
l5A66:
	v22 = Mem0[sp + 8:word16]
	iy = v22
	iy = iy + 1
	X = cond(iy)
	iy = iy + 1
	X = cond(iy)
	v24 = Mem0[iy:byte]
	a = v24
	Mem0[ix + -8:byte] = a
	v25 = Mem0[iy + 1:byte]
	a = v25
	Mem0[ix + -7:byte] = a
	v26 = Mem0[ix + -4:byte]
	a = v26
	a = a + 0x04
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -10:byte] = a
	v27 = Mem0[ix + -3:byte]
	a = v27
	a = a + 0x00 + C
	N = false
	SZHXVC = cond(a)
	Mem0[ix + -9:byte] = a
	v28 = Mem0[ix + -2:byte]
	a = v28
	v29 = Mem0[ix + -8:byte]
	a = a - v29
	N = true
	SZHXVC = cond(a)
	v30 = Mem0[ix + -1:byte]
	a = v30
	v31 = Mem0[ix + -7:byte]
	a = a - v31 - C
	N = true
	SZHXVC = cond(a)
	branch Test(NO,V) l0AA6
	goto l5A96
	// succ:  l5A96 l5A92_thunk_fn0AA6
l5A92_thunk_fn0AA6:
	call fn0AA6 (retsize: 0;)
	return
	// succ:  fn5A49_exit
l5A96:
	a = a ^ 0x80
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(GE,S) l0B01
	goto l5A9C
	// succ:  l5A9C l5A98_thunk_fn0AA6
l5A98_thunk_fn0AA6:
	call fn0AA6 (retsize: 0;)
	return
	// succ:  fn5A49_exit
l5A9C:
	v34 = Mem0[sp + 8:word16]
	hl = v34
	v35 = Mem0[hl:byte]
	a = v35
	Mem0[ix + -12:byte] = a
	hl = hl + 1
	X = cond(hl)
	v36 = Mem0[hl:byte]
	a = v36
	Mem0[ix + -11:byte] = a
	bc = bc - 1
	X = cond(bc)
	v38 = Mem0[sp + 6:word16]
	hl = v38
	Mem0[hl:byte] = c
	hl = hl + 1
	X = cond(hl)
	Mem0[hl:byte] = b
	v41 = Mem0[iy:word16]
	hl = v41
	hl = hl - 1
	X = cond(hl)
	Mem0[iy:byte] = l
	Mem0[ix + 1:byte] = h
	a = a ^ a
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	N = true
	SZHXV = cond(a - l)
	a = a - h - C
	N = true
	SZHXVC = cond(a)
	branch Test(NO,V) l0AD5
	goto l5AC5
	// succ:  l5AC5 l5AC1_thunk_fn0AA6
l5AC1_thunk_fn0AA6:
	call fn0AA6 (retsize: 0;)
	return
	// succ:  fn5A49_exit
l5AC5:
	a = a ^ 0x80
	H = true
	X = false
	N = false
	C = false
	SZV = cond(a)
	branch Test(LT,S) l0AFD
	goto l5ACB
	// succ:  l5ACB l5AC7_thunk_fn0AA6
l5AC7_thunk_fn0AA6:
	call fn0AA6 (retsize: 0;)
	return
	// succ:  fn5A49_exit
l5ACB:
	v43 = Mem0[sp + 2:word16]
	hl = v43
	v44 = Mem0[hl:byte]
	c = v44
	hl = hl + 1
	X = cond(hl)
	v45 = Mem0[hl:byte]
	b = v45
	l = e
	h = d
	v46 = Mem0[hl:byte]
	a = v46
	hl = hl + 1
	X = cond(hl)
	v47 = Mem0[hl:byte]
	h = v47
	l = a
	sp = sp - 2
	Mem0[sp:word16] = bc
	sp = sp - 2
	Mem0[sp:word16] = de
	sp = sp - 2
	Mem0[sp:word16] = hl
	call fn02C2 (retsize: 2;)
	sp = sp + 0x0002
	N = false
	SZHXVC = cond(sp)
	de = Mem0[sp:word16]
	sp = sp + 2
	bc = Mem0[sp:word16]
	sp = sp + 2
	a = c
	Mem0[de:byte] = a
	de = de + 1
	X = cond(de)
	a = b
	Mem0[de:byte] = a
	hl = Mem0[sp:word16]
	sp = sp + 2
	sp = sp - 2
	Mem0[sp:word16] = hl
	// succ:  l5B1E
l5B1E:
	sp = ix
	ix = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn5A49_exit
fn5A49_exit:


