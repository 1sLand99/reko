// fn0200
// Return size: 0
void fn0200()
fn0200_entry:
	// succ:  l0200
l0200:
	sp = fp
	r2 = 0x0002
	NZ = cond(r2)
	V = false
	r3 = 0x0000
	C = false
	V = false
	N = false
	Z = true
	r0 = 0x0F9A
	NZ = cond(r0)
	V = false
	PRINT(r0)
	// succ:  l020C
l020C:
	C = TTYIN(out r0)
	branch Test(ULT,C) l020C
	// succ:  l0210 l020C
l0210:
	r1 = r0
	NZ = cond(r1)
	V = false
	// succ:  l0212
l0212:
	C = TTYIN(out r0)
	branch Test(ULT,C) l0212
	// succ:  l0216 l0212
l0216:
	C = TTYIN(out r0)
	branch Test(ULT,C) l0216
	// succ:  l021A l0216
l021A:
	v12 = 0x0042 - r1
	NZVC = cond(v12)
	branch Test(EQ,Z) l0236
	// succ:  l0220 l0236
l0220:
	r2 = r2 - 0x0001
	NZV = cond(r2)
	r3 = r3 + 0x0001
	NZV = cond(r3)
	v15 = 0x0049 - r1
	NZVC = cond(v15)
	branch Test(EQ,Z) l0240
	// succ:  l022A l0240
l022A:
	r2 = r2 - 0x0001
	NZV = cond(r2)
	r3 = r3 + 0x0001
	NZV = cond(r3)
	v16 = 0x0045 - r1
	NZVC = cond(v16)
	branch Test(EQ,Z) l0240
	// succ:  l0234 l0240
l0234:
	goto l0200
	// succ:  l0200
l0236:
	r0 = 0x0FDA
	NZ = cond(r0)
	V = false
	PRINT(r0)
	// succ:  l023C
l023C:
	C = TTYIN(out r0)
	branch Test(ULT,C) l023C
	// succ:  l0240 l023C
l0240:
	Mem0[0x0F06:word16] = r2
	NZ = cond(v18)
	V = false
	Mem0[0x0F08:word16] = r3
	NZ = cond(v19)
	V = false
	v20 = Mem0[0x0024:word16] | 0x1040
	Mem0[0x0024:word16] = v20
	NZ = cond(v20)
	V = false
	r0 = 0x1166
	NZ = cond(r0)
	V = false
	v21 = 0x1100
	Mem0[r0:word16] = v21
	NZ = cond(v21)
	V = false
	Mem0[r0 + 0x0002:word16] = 0x1170
	NZ = cond(v22)
	V = false
	FnSubfn(r0)
	Mem0[0x0AB4:word16] = Mem0[0x1170:word16]
	NZ = cond(v24)
	V = false
	Mem0[0x0B5E:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	r0 = 0x1166
	NZ = cond(r0)
	V = false
	v26 = 0x0101
	Mem0[r0:word16] = v26
	NZ = cond(v26)
	V = false
	Mem0[r0 + 0x0002:word16] = 0x115E
	NZ = cond(v27)
	V = false
	FnSubfn(r0)
	branch Test(ULT,C) l029E
	Mem0[0x0F06:word16] = r2
	NZ = cond(v41)
	V = false
	Mem0[0x0F08:word16] = r3
	NZ = cond(v42)
	V = false
	v43 = Mem0[0x0024:word16] | 0x1040
	Mem0[0x0024:word16] = v43
	NZ = cond(v43)
	V = false
	r0 = 0x1166
	NZ = cond(r0)
	V = false
	v44 = 0x1100
	Mem0[r0:word16] = v44
	NZ = cond(v44)
	V = false
	Mem0[r0 + 0x0002:word16] = 0x1170
	NZ = cond(v45)
	V = false
	FnSubfn(r0)
	Mem0[0x0AB4:word16] = Mem0[0x1170:word16]
	NZ = cond(v47)
	V = false
	Mem0[0x0B5E:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	r0 = 0x1166
	NZ = cond(r0)
	V = false
	v49 = 0x0101
	Mem0[r0:word16] = v49
	NZ = cond(v49)
	V = false
	Mem0[r0 + 0x0002:word16] = 0x115E
	NZ = cond(v50)
	V = false
	FnSubfn(r0)
	branch Test(ULT,C) l029E
	// succ:  l027A l029E
l027A:
	r0 = 0x1166
	NZ = cond(r0)
	V = false
	v28 = 0x0801
	Mem0[r0:word16] = v28
	NZ = cond(v28)
	V = false
	Mem0[r0 + 0x0002:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	Mem0[r0 + 0x0004:word16] = 0x0B5E
	NZ = cond(v30)
	V = false
	Mem0[r0 + 0x0006:word16] = 0x0001
	NZ = cond(v31)
	V = false
	Mem0[r0 + 0x0008:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	FnSubfn(r0)
	r0 = 0x0601
	NZ = cond(r0)
	V = false
	__syscall(0x88FC)
	r0 = 0x1166
	NZ = cond(r0)
	V = false
	v51 = 0x0801
	Mem0[r0:word16] = v51
	NZ = cond(v51)
	V = false
	Mem0[r0 + 0x0002:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	Mem0[r0 + 0x0004:word16] = 0x0B5E
	NZ = cond(v53)
	V = false
	Mem0[r0 + 0x0006:word16] = 0x0001
	NZ = cond(v54)
	V = false
	Mem0[r0 + 0x0008:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	FnSubfn(r0)
	r0 = 0x0601
	NZ = cond(r0)
	V = false
	__syscall(0x88FC)
	// succ:  l029E
l029E:
	call fn0BD6 (retsize: 2; FPU: 2;)
	// succ:  l02A2
l02A2:
	call fn0C20 (retsize: 2; FPU: 2;)
	// succ:  l02A6
l02A6:
	C = TTYIN(out r0)
	branch Test(ULT,C) l02FC
	// succ:  l02AA l02FC
l02AA:
	v36 = Mem0[0x0EFA:word16]
	v36 = v36 & v36
	NZ = cond(v36)
	C = false
	V = false
	branch Test(NE,Z) l02FC
	// succ:  l02B0 l02FC
l02B0:
	Mem0[0x02CB:byte] = r0
	NZ = cond(v37)
	V = false
	r1 = 0x02C6
	NZ = cond(r1)
	V = false
	// succ:  l02B8
l02B8:
	v38 = Mem0[r1:word16]
	r1 = r1 + 0x0002
	v39 = v38 - r0
	NZVC = cond(v39)
	branch Test(NE,Z) l02B8
	// succ:  l02BC l02B8
l02BC:
	r1 = r1 - 0x02C7
	NZVC = cond(r1)
	r1 = r1 << 1
	NZVC = cond(r1)
	call Mem0[r1 + 0x02CC:ptr16] (retsize: 4; FPU: 2;)
	return
	// succ:  fn0200_exit
l02FC:
	r0 = 0x1166
	NZ = cond(r0)
	V = false
	v56 = 0x1100
	Mem0[r0:word16] = v56
	NZ = cond(v56)
	V = false
	Mem0[r0 + 0x0002:word16] = 0x1170
	NZ = cond(v57)
	V = false
	FnSubfn(r0)
	r0 = Mem0[0x1170:word16]
	NZ = cond(r0)
	V = false
	r0 = r0 - Mem0[0x1172:word16]
	NZVC = cond(r0)
	branch Test(LT,N) l0388
	// succ:  l0316 l0388
l0316:
	Mem0[0x1174:word16] = Mem0[0x1170:word16]
	NZ = cond(v61)
	V = false
	v62 = Mem0[pc + 0x0E52:word16] + 0x0001
	Mem0[pc + 0x0E52:word16] = v62
	NZVC = cond(v62)
	Mem0[0x0EF6:word16] = ~Mem0[0x0EF4:word16]
	NZ = cond(v64)
	V = false
	C = true
	branch Test(NE,Z) l032C
	// succ:  l0328 l032C
l0328:
	Mem0[0x0EF8:word16] = ~Mem0[0x0EF6:word16]
	NZ = cond(v66)
	V = false
	C = true
	// succ:  l032C
l032C:
	v68 = Mem0[0x0EFA:word16]
	v68 = v68 & v68
	NZ = cond(v68)
	C = false
	V = false
	branch Test(EQ,Z) l0352
	// succ:  l0332 l0352
l0332:
	Mem0[0x0EFC:word16] = Mem0[0x0EFA:word16] - 0x0001
	NZV = cond(v70)
	branch Test(NE,Z) l0370
	// succ:  l0338 l0370
l0338:
	v72 = Mem0[0x0F18:word16]
	v72 = v72 & v72
	NZ = cond(v72)
	C = false
	V = false
	branch Test(EQ,Z) l03AE
	// succ:  l033E l03AE
l033E:
	call fn0486 (retsize: 2; FPU: 2;)
	Mem0[0x0F16:word16] = 0x0002
	NZ = cond(v74)
	V = false
	call fn0470 (retsize: 2; FPU: 2;)
	Mem0[0x0F18:word16] = 0x0078
	NZ = cond(v76)
	V = false
	// succ:  l0352
l0352:
	v102 = Mem0[0x0EF8:word16]
	v102 = v102 & v102
	NZ = cond(v102)
	C = false
	V = false
	branch Test(NE,Z) l036C
	// succ:  l0358 l036C
l0358:
	v104 = 0x0008 - Mem0[0x0F14:word16]
	NZVC = cond(v104)
	branch Test(UGE,C) l0370
	// succ:  l0360 l0370
l0360:
	Mem0[0x0F18:word16] = Mem0[0x0F16:word16] - 0x0001
	NZV = cond(v106)
	branch Test(GT,NZV) l0370
	// succ:  l0366 l0370
l0366:
	Mem0[0x0EFA:word16] = 0x0456
	NZ = cond(v107)
	V = false
	// succ:  l036C
l036C:
	call Mem0[0x0EFA:word16] (retsize: 2; FPU: 2;)
	// succ:  l0370
l0370:
	call fn04A0 (retsize: 2; FPU: 2;)
	call fn06D6 (retsize: 2; FPU: 2;)
	call fn07A6 (retsize: 2; FPU: 2;)
	call fn0998 (retsize: 2; FPU: 2;)
	v100 = 0x1178 - r4
	NZVC = cond(v100)
	branch Test(EQ,Z) l0394
	// succ:  l0386 l0394
l0386:
	goto l038E
	// succ:  l038E
l0388:
	v78 = 0x1178 - r4
	NZVC = cond(v78)
	branch Test(EQ,Z) l02A6
	// succ:  l038E l02A6
l038E:
	call fn0AF6 (retsize: 2; FPU: 2;)
l0392:
	goto l02A6
	// succ:  l02A6
l0394:
	v109 = Mem0[0x0F12:word16]
	v109 = v109 & v109
	NZ = cond(v109)
	C = false
	V = false
	branch Test(NE,Z) l02A6
	// succ:  l039A l02A6
l039A:
	v111 = Mem0[0x0F02:word16]
	v111 = v111 & v111
	NZ = cond(v111)
	C = false
	V = false
	branch Test(NE,Z) l0392
	// succ:  l03A0 l0392
l03A0:
	v113 = Mem0[0x0F18:word16]
	v113 = v113 & v113
	NZ = cond(v113)
	C = false
	V = false
	branch Test(LE,NZV) l03AE
	// succ:  l03A6 l03AE
l03A6:
	Mem0[0x0F1A:word16] = Mem0[0x0F18:word16] + 0x0001
	NZV = cond(v115)
	goto l02A2
	// succ:  l02A2
l03AE:
	v82 = Mem0[0x0B5A:word16] - Mem0[0x0B5A:word16]
	NZVC = cond(v82)
	branch Test(ULE,ZC) l040A
	// succ:  l03B6 l040A
l03B6:
	Mem0[0x0B5E:word16] = Mem0[0x0B5A:word16]
	NZ = cond(v85)
	V = false
	r0 = 0x1166
	NZ = cond(r0)
	V = false
	v86 = 0x0101
	Mem0[r0:word16] = v86
	NZ = cond(v86)
	V = false
	Mem0[r0 + 0x0002:word16] = 0x115E
	NZ = cond(v87)
	V = false
	FnSubfn(r0)
	branch Test(UGE,C) l03E6
	// succ:  l03CE l03E6
l03CE:
	r0 = 0x1166
	NZ = cond(r0)
	V = false
	v88 = 0x0201
	Mem0[r0:word16] = v88
	NZ = cond(v88)
	V = false
	Mem0[r0 + 0x0002:word16] = 0x115E
	NZ = cond(v89)
	V = false
	Mem0[r0 + 0x0004:word16] = 0x0001
	NZ = cond(v90)
	V = false
	FnSubfn(r0)
	branch Test(ULT,C) l040A
	// succ:  l03E6 l040A
l03E6:
	r0 = 0x1166
	NZ = cond(r0)
	V = false
	v91 = 0x0901
	Mem0[r0:word16] = v91
	NZ = cond(v91)
	V = false
	Mem0[r0 + 0x0002:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	Mem0[r0 + 0x0004:word16] = 0x0B5E
	NZ = cond(v93)
	V = false
	Mem0[r0 + 0x0006:word16] = 0x0001
	NZ = cond(v94)
	V = false
	Mem0[r0 + 0x0008:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	FnSubfn(r0)
	r0 = 0x0601
	NZ = cond(r0)
	V = false
	__syscall(0x88FC)
	// succ:  l040A
l040A:
	call fn0486 (retsize: 2; FPU: 2;)
	sp = sp - 0x0001
	Mem0[sp:byte] = 0x01
	NZ = cond(v119)
	V = false
	Mem0[sp + 0x0001:byte] = 0x18
	NZ = cond(v120)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v123)
	V = false
	call fn0AE8 (retsize: 2; FPU: 2;)
fn0200_exit:


// fn0470
// Return size: 2
void fn0470()
fn0470_entry:
	// succ:  l0470
l0470:
	sp = fp
	sp = sp - 0x0001
	Mem0[sp:byte] = Mem0[0x0F14:byte]
	NZ = cond(v5)
	V = false
	Mem0[sp + 0x0001:byte] = 0x18
	NZ = cond(v8)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0AE8 (retsize: 2; FPU: 2;)
	r2 = r2 - 0x0002
	Mem0[r2:word16] = r4
	NZ = cond(v13)
	V = false
	return
	// succ:  fn0470_exit
fn0470_exit:


// fn0486
// Return size: 2
void fn0486()
fn0486_entry:
	// succ:  l0486
l0486:
	sp = fp
	sp = sp - 0x0001
	Mem0[sp:byte] = Mem0[0x0F14:byte]
	NZ = cond(v5)
	V = false
	Mem0[sp + 0x0001:byte] = 0x18
	NZ = cond(v8)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0A74 (retsize: 2; FPU: 2;)
	return
	// succ:  fn0486_exit
fn0486_exit:


// fn04A0
// Return size: 2
void fn04A0()
fn04A0_entry:
	// succ:  l04A0
l04A0:
	sp = fp
	v5 = Mem0[pc + 0x0A52:word16] & Mem0[0x0EF4:word16]
	Mem0[pc + 0x0A52:word16] = v5
	NZ = cond(v5)
	V = false
	branch Test(EQ,Z) l04AA
	// succ:  l04A8 l04AA
l04A8:
	return
	// succ:  fn04A0_exit
l04AA:
	r5 = Mem0[0x0F04:word16]
	NZ = cond(r5)
	V = false
	// succ:  l04AE
l04AE:
	r3 = (int16) Mem0[r5 + 0x0EF0:byte]
	NZ = cond(r3)
	V = false
	branch Test(EQ,Z) l0588
	// succ:  l04B4 l0588
l04B4:
	Mem0[0x0F0C:word16] = r3
	NZ = cond(v13)
	V = false
	r0 = (int16) Mem0[r5 + 0x0EF3:byte]
	NZ = cond(r0)
	V = false
	sp = sp - 0x0001
	Mem0[sp:byte] = r3
	NZ = cond(v16)
	V = false
	Mem0[sp + 0x0001:byte] = r0
	NZ = cond(v17)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	v20 = 0x20
	Mem0[r4:byte] = v20
	r4 = r4 + 0x0001
	NZ = cond(v20)
	V = false
	r0 = r0 - 0x0001
	NZV = cond(r0)
	v23 = Mem0[0x0F02:word16]
	v23 = v23 & v23
	NZ = cond(v23)
	C = false
	V = false
	branch Test(GT,NZV) l04D8
	// succ:  l04D2 l04D8
l04D2:
	v25 = 0x0004 - r0
	NZVC = cond(v25)
	branch Test(ULE,ZC) l0584
	// succ:  l04D8 l0584
l04D8:
	v28 = 0x0002 - r0
	NZVC = cond(v28)
	branch Test(EQ,Z) l0584
	// succ:  l04DE l0584
l04DE:
	Mem0[r5 + 0x0EF3:byte] = r0
	NZ = cond(v29)
	V = false
	v30 = 0x0016 - r0
	NZVC = cond(v30)
	branch Test(ULT,C) l04EE
	// succ:  l04E8 l04EE
l04E8:
	call fn067C (retsize: 2; FPU: 2;)
	branch Test(NE,Z) l0584
	// succ:  l04EE l0584
l04EE:
	r1 = r0
	NZ = cond(r1)
	V = false
	r1 = r1 + 0x0001
	NZV = cond(r1)
	v33 = 0x0003 - r0
	NZVC = cond(v33)
	branch Test(NE,Z) l0504
	// succ:  l04F8 l0504
l04F8:
	v35 = Mem0[0x0F02:word16]
	v35 = v35 & v35
	NZ = cond(v35)
	C = false
	V = false
	branch Test(LE,NZV) l0504
	// succ:  l04FE l0504
l04FE:
	call fn05D4 (retsize: 2; FPU: 2;)
	branch Test(EQ,Z) l0584
	// succ:  l0504 l0584
l0504:
	call fn064A (retsize: 2; FPU: 2;)
	branch Test(EQ,Z) l0584
	// succ:  l050A l0584
l050A:
	r2 = 0x0000
	C = false
	V = false
	N = false
	Z = true
	// succ:  l050C
l050C:
	v41 = Mem0[r2 + 0x0DB8:word16] - r0
	NZVC = cond(v41)
	branch Test(EQ,Z) l0524
	// succ:  l0512 l0524
l0512:
	v43 = Mem0[r2 + 0x0DB8:word16] - r1
	NZVC = cond(v43)
	branch Test(ULT,C) l05B4
	// succ:  l0518 l05B4
l0518:
	branch Test(EQ,Z) l0524
	// succ:  l051A l0524
l051A:
	v44 = Mem0[r2:word16]
	r2 = r2 + 0x0002
	v45 = v44
	v45 = v45 & v45
	NZ = cond(v45)
	C = false
	V = false
	v46 = 0x000A - r2
	NZVC = cond(v46)
	branch Test(LE,NZV) l050C
	// succ:  l0522 l050C
l0522:
	goto l05B4
	// succ:  l05B4
l0524:
	r0 = Mem0[r2 + 0x0DAC:word16]
	NZ = cond(r0)
	V = false
	r1 = 0x0008
	NZ = cond(r1)
	V = false
	// succ:  l052C
l052C:
	r3 = Mem0[r0:word16]
	NZ = cond(r3)
	V = false
	branch Test(EQ,Z) l05AE
	// succ:  l0530 l05AE
l0530:
	branch Test(LT,NV) l058A
	// succ:  l0532 l058A
l0532:
	r3 = r3 + 0x0004
	NZVC = cond(r3)
	v60 = r3 - Mem0[r5 + 0x0EF0:word16]
	NZVC = cond(v60)
	branch Test(UGT,ZC) l05AE
	// succ:  l053C l05AE
l053C:
	v63 = Mem0[r0:word16] - Mem0[r5 + 0x0EF0:word16]
	NZVC = cond(v63)
	branch Test(ULT,C) l05B4
	// succ:  l0542 l05B4
l0542:
	r1 = Mem0[r0:word16]
	NZ = cond(r1)
	V = false
	v65 = 0x8000 | Mem0[r0:word16]
	Mem0[r0:word16] = v65
	NZ = cond(v65)
	V = false
	r0 = r0 - Mem0[r2 + 0x0DAC:word16]
	NZVC = cond(r0)
	Mem0[0x0F0A:word16] = r0
	NZ = cond(v67)
	V = false
	Mem0[r0 + 0x0DC4:word16] = Mem0[r0 + 0x0DC4:word16] - 0x0001
	NZV = cond(v69)
	sp = sp - 0x0001
	Mem0[sp:byte] = r1
	NZ = cond(v70)
	V = false
	Mem0[sp + 0x0001:byte] = Mem0[r2 + 0x0DB8:byte]
	NZ = cond(v72)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0A7C (retsize: 2; FPU: 2;)
	v76 = Mem0[pc + 0x05F2:word16] + Mem0[r2 + 0x0DD4:word16]
	Mem0[pc + 0x05F2:word16] = v76
	NZVC = cond(v76)
	call fn0B1A (retsize: 2; FPU: 2;)
	Mem0[0x0F14:word16] = Mem0[0x0F12:word16] - 0x0001
	NZV = cond(v79)
	branch Test(GT,NZV) l0584
	// succ:  l0574 l0584
l0574:
	v81 = Mem0[0x0F02:word16]
	v81 = v81 & v81
	NZ = cond(v81)
	C = false
	V = false
	branch Test(GT,NZV) l0584
	// succ:  l057A l0584
l057A:
	Mem0[0x0EFA:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	Mem0[0x0EFC:word16] = 0x0005
	NZ = cond(v83)
	V = false
	// succ:  l0584
l0584:
	Mem0[r5 + 0x0EF0:byte] = 0x00
	C = false
	V = false
	N = false
	Z = true
	// succ:  l0588
l0588:
	goto l05CA
	// succ:  l05CA
l058A:
	sp = sp - 0x0001
	Mem0[sp:byte] = Mem0[r0:byte]
	NZ = cond(v86)
	V = false
	Mem0[sp + 0x0001:byte] = Mem0[r2 + 0x0DB8:byte]
	NZ = cond(v88)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0A74 (retsize: 2; FPU: 2;)
	v91 = 0x0000
	Mem0[r0:word16] = v91
	C = false
	V = false
	N = false
	Z = true
	r3 = (int16) Mem0[r5 + 0x0EF0:byte]
	NZ = cond(r3)
	V = false
	r3 = r3 + 0x0001
	NZV = cond(r3)
	sp = sp - 0x0001
	Mem0[sp:byte] = r3
	NZ = cond(v93)
	V = false
	Mem0[sp + 0x0001:byte] = Mem0[r5 + 0x0EF3:byte]
	NZ = cond(v95)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	// succ:  l05AE
l05AE:
	v97 = Mem0[r0:word16]
	r0 = r0 + 0x0002
	v98 = v97
	v98 = v98 & v98
	NZ = cond(v98)
	C = false
	V = false
	r1 = r1 - 0x0001
	NZV = cond(r1)
	branch Test(NE,Z) l052C
	// succ:  l05B4 l052C
l05B4:
	call fn0AE8 (retsize: 2; FPU: 2;)
	v48 = r4
	Mem0[sp:word16] = v48
	sp = sp + 0x0002
	NZ = cond(v48)
	V = false
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v50)
	V = false
	v52 = Mem0[0x1159:byte]
	Mem0[r4:byte] = v52
	r4 = r4 + 0x0001
	NZ = cond(v52)
	V = false
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v54)
	V = false
	call fn0AE8 (retsize: 2; FPU: 2;)
	v100 = r4
	Mem0[sp:word16] = v100
	sp = sp + 0x0002
	NZ = cond(v100)
	V = false
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v102)
	V = false
	v104 = Mem0[0x1159:byte]
	Mem0[r4:byte] = v104
	r4 = r4 + 0x0001
	NZ = cond(v104)
	V = false
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v106)
	V = false
	// succ:  l05CA
l05CA:
	r5 = r5 - 0x0001
	NZV = cond(r5)
	branch Test(LT,NV) l05D2
	// succ:  l05CE l05D2
l05CE:
	goto l04AE
	// succ:  l04AE
l05D2:
	return
	// succ:  fn04A0_exit
fn04A0_exit:


// fn05D4
// Return size: 2
void fn05D4()
fn05D4_entry:
	// succ:  l05D4
l05D4:
	sp = fp
	sp = sp - 0x0002
	Mem0[sp:word16] = r3
	NZ = cond(v4)
	V = false
	v9 = Mem0[0x0F02:word16] - Mem0[sp:word16]
	Mem0[sp:word16] = v9
	NZVC = cond(v9)
	v11 = Mem0[sp:word16]
	sp = sp + 0x0002
	v12 = 0x0004 - v11
	NZVC = cond(v12)
	branch Test(UGT,ZC) l0648
	// succ:  l05E0 l0648
l05E0:
	sp = sp - 0x0001
	Mem0[sp:byte] = Mem0[0x0F02:byte]
	NZ = cond(v15)
	V = false
	Mem0[sp + 0x0001:byte] = r0
	NZ = cond(v17)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0A7C (retsize: 2; FPU: 2;)
	call fn0A94 (retsize: 2; FPU: 2;)
	r3 = 0x0000
	C = false
	V = false
	N = false
	Z = true
	r0 = r0 << 1
	NZVC = cond(r0)
	r3 = __rol(r3, r3)
	NZVC = cond(r3)
	r0 = r0 << 1
	NZVC = cond(r0)
	r3 = __rol(r3, r3)
	NZVC = cond(r3)
	r3 = r3 << 1
	NZVC = cond(r3)
	r0 = Mem0[r3 + 0x0F2A:word16]
	NZ = cond(r0)
	V = false
	v25 = Mem0[pc + 0x090A:word16] >> 1
	Mem0[pc + 0x090A:word16] = v25
	NZVC = cond(v25)
	branch Test(ULT,C) l060E
	// succ:  l060A l060E
l060A:
	r0 = r0 + 0x00C8
	NZVC = cond(r0)
	// succ:  l060E
l060E:
	v26 = Mem0[pc + 0x054A:word16] + r0
	Mem0[pc + 0x054A:word16] = v26
	NZVC = cond(v26)
	sp = sp - 0x0001
	Mem0[sp:byte] = Mem0[0x0F02:byte]
	NZ = cond(v28)
	V = false
	Mem0[sp + 0x0001:byte] = 0x04
	NZ = cond(v29)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v34)
	V = false
	v35 = 0x28
	Mem0[r4:byte] = v35
	r4 = r4 + 0x0001
	NZ = cond(v35)
	V = false
	r3 = 0x0003
	NZ = cond(r3)
	V = false
	call fn0B60 (retsize: 2; FPU: 2;)
	v37 = 0x29
	Mem0[r4:byte] = v37
	r4 = r4 + 0x0001
	NZ = cond(v37)
	V = false
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v39)
	V = false
	call fn0B1A (retsize: 2; FPU: 2;)
	Mem0[0x0F05:byte] = 0xFF
	NZ = cond(v41)
	V = false
	Z = true
	// succ:  l0648
l0648:
	return
	// succ:  fn05D4_exit
fn05D4_exit:


// fn064A
// Return size: 2
void fn064A()
fn064A_entry:
	// succ:  l064A
l064A:
	sp = fp
	r2 = Mem0[0x0F06:word16]
	NZ = cond(r2)
	V = false
	// succ:  l064E
l064E:
	v10 = Mem0[r2 + 0x0EE6:word16] - r3
	NZVC = cond(v10)
	branch Test(NE,Z) l0676
	// succ:  l0654 l0676
l0654:
	v14 = Mem0[r2 + 0x0EEC:byte]
	v14 = v14 & v14
	NZ = cond(v14)
	C = false
	V = false
	branch Test(LT,N) l0676
	// succ:  l065A l0676
l065A:
	v19 = Mem0[r2 + 0x0EE9:word16] - r1
	NZVC = cond(v19)
	branch Test(EQ,Z) l0670
	// succ:  l0660 l0670
l0660:
	v22 = Mem0[r2 + 0x0EE9:word16] - r0
	NZVC = cond(v22)
	branch Test(NE,Z) l0676
	// succ:  l0666 l0676
l0666:
	call fn0AE8 (retsize: 2; FPU: 2;)
	v25 = r4
	Mem0[sp:word16] = v25
	sp = sp + 0x0002
	NZ = cond(v25)
	V = false
	v26 = 0x20
	Mem0[r4:byte] = v26
	r4 = r4 + 0x0001
	NZ = cond(v26)
	V = false
	// succ:  l0670
l0670:
	Mem0[r2 + 0x0EE6:byte] = 0x00
	C = false
	V = false
	N = false
	Z = true
	goto l067A
	// succ:  l067A
l0676:
	r2 = r2 - 0x0001
	NZV = cond(r2)
	branch Test(GE,NV) l064E
	// succ:  l067A l064E
l067A:
	return
	// succ:  fn064A_exit
fn064A_exit:


// fn067C
// Return size: 2
void fn067C()
fn067C_entry:
	// succ:  l067C
l067C:
	sp = fp
	r1 = r3
	NZ = cond(r1)
	V = false
	r1 = r1 - 0x0001
	NZV = cond(r1)
	r1 = r1 << 1
	NZVC = cond(r1)
	r1 = r1 + r0
	NZVC = cond(r1)
	v11 = Mem0[r1 + 0x0E2A:byte]
	v11 = v11 & v11
	NZ = cond(v11)
	C = false
	V = false
	branch Test(EQ,Z) l06A0
	// succ:  l068A l06A0
l068A:
	Mem0[r1 + 0x0E2A:byte] = Mem0[r1 + 0x0E2A:byte] - 0x01
	NZV = cond(v15)
	r1 = (int16) Mem0[r1 + 0x0E2A:byte]
	NZ = cond(r1)
	V = false
	sp = sp - 0x0001
	Mem0[sp:byte] = r3
	NZ = cond(v17)
	V = false
	Mem0[sp + 0x0001:byte] = r0
	NZ = cond(v18)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	v23 = Mem0[r1 + 0x0EE0:byte]
	Mem0[r4:byte] = v23
	r4 = r4 + 0x0001
	NZ = cond(v23)
	V = false
	// succ:  l06A0
l06A0:
	return
	// succ:  fn067C_exit
fn067C_exit:


// fn06D6
// Return size: 2
void fn06D6()
fn06D6_entry:
	// succ:  l06D6
l06D6:
	sp = fp
	r2 = Mem0[0x0F06:word16]
	NZ = cond(r2)
	V = false
	// succ:  l06DA
l06DA:
	r3 = (int16) Mem0[r2 + 0x0EE6:byte]
	NZ = cond(r3)
	V = false
	branch Test(EQ,Z) l07A0
	// succ:  l06E0 l07A0
l06E0:
	v12 = Mem0[pc + 0x0812:word16] & Mem0[0x0EF4:word16]
	Mem0[pc + 0x0812:word16] = v12
	NZ = cond(v12)
	V = false
	branch Test(NE,Z) l06F6
	// succ:  l06E8 l06F6
l06E8:
	v14 = Mem0[r2 + 0x0EEC:byte]
	v14 = v14 & v14
	NZ = cond(v14)
	C = false
	V = false
	branch Test(LE,NZV) l07A0
	// succ:  l06EE l07A0
l06EE:
	v19 = Mem0[0x0EF4:word16] - Mem0[0x0EF4:word16]
	NZVC = cond(v19)
	branch Test(EQ,Z) l07A0
	// succ:  l06F6 l07A0
l06F6:
	r0 = (int16) Mem0[r2 + 0x0EE9:byte]
	NZ = cond(r0)
	V = false
	v24 = Mem0[r2 + 0x0EEC:byte]
	v24 = v24 & v24
	NZ = cond(v24)
	C = false
	V = false
	branch Test(LT,N) l0710
	// succ:  l0700 l0710
l0700:
	sp = sp - 0x0001
	Mem0[sp:byte] = r3
	NZ = cond(v26)
	V = false
	Mem0[sp + 0x0001:byte] = r0
	NZ = cond(v27)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	v30 = 0x20
	Mem0[r4:byte] = v30
	r4 = r4 + 0x0001
	NZ = cond(v30)
	V = false
	goto l0724
	// succ:  l0724
l0710:
	r3 = r3 + 0x0001
	NZV = cond(r3)
	sp = sp - 0x0001
	Mem0[sp:byte] = r3
	NZ = cond(v67)
	V = false
	Mem0[sp + 0x0001:byte] = r0
	NZ = cond(v68)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	r3 = r3 - 0x0001
	NZV = cond(r3)
	v70 = Mem0[r2 + 0x0EEC:word16] & ~0x0080
	Mem0[r2 + 0x0EEC:word16] = v70
	NZ = cond(v70)
	V = false
	// succ:  l0724
l0724:
	Mem0[r2 + 0x0EE9:byte] = Mem0[r2 + 0x0EE9:byte] + 0x01
	NZV = cond(v33)
	r0 = r0 + 0x0001
	NZV = cond(r0)
	v34 = 0x0019 - r0
	NZVC = cond(v34)
	branch Test(EQ,Z) l0784
	// succ:  l0730 l0784
l0730:
	v35 = 0x0018 - r0
	NZVC = cond(v35)
	branch Test(EQ,Z) l0744
	// succ:  l0736 l0744
l0736:
	v36 = 0x0016 - r0
	NZVC = cond(v36)
	branch Test(ULT,C) l078A
	// succ:  l073C l078A
l073C:
	call fn067C (retsize: 2; FPU: 2;)
	branch Test(EQ,Z) l078A
	// succ:  l0742 l078A
l0742:
	goto l0784
	// succ:  l0784
l0744:
	v48 = Mem0[0x0EFA:word16]
	v48 = v48 & v48
	NZ = cond(v48)
	C = false
	V = false
	branch Test(NE,Z) l078A
	// succ:  l074A l078A
l074A:
	v50 = Mem0[0x0F14:word16] - r3
	NZVC = cond(v50)
	branch Test(ULT,C) l078A
	// succ:  l0750 l078A
l0750:
	r3 = r3 - 0x0004
	NZVC = cond(r3)
	v52 = Mem0[0x0F14:word16] - r3
	NZVC = cond(v52)
	branch Test(UGT,ZC) l078A
	// succ:  l075A l078A
l075A:
	sp = sp - 0x0001
	Mem0[sp:byte] = Mem0[0x0F14:byte]
	NZ = cond(v55)
	V = false
	Mem0[sp + 0x0001:byte] = 0x18
	NZ = cond(v56)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0A7C (retsize: 2; FPU: 2;)
	Mem0[0x0EFA:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	Mem0[0x0EFC:word16] = 0x0005
	NZ = cond(v60)
	V = false
	Mem0[0x0F1A:word16] = Mem0[0x0F18:word16] - 0x0001
	NZV = cond(v62)
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v64)
	V = false
	call fn0B3A (retsize: 2; FPU: 2;)
	// succ:  l0784
l0784:
	Mem0[r2 + 0x0EE6:byte] = 0x00
	C = false
	V = false
	N = false
	Z = true
	goto l07A0
	// succ:  l07A0
l078A:
	call fn0AE8 (retsize: 2; FPU: 2;)
	v39 = r4
	Mem0[Mem0[r3:word16]:ptr16] = v39
	r3 = r3 + 0x0002
	NZ = cond(v39)
	V = false
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v42)
	V = false
	v44 = Mem0[0x115A:byte]
	Mem0[r4:byte] = v44
	r4 = r4 + 0x0001
	NZ = cond(v44)
	V = false
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v46)
	V = false
	// succ:  l07A0
l07A0:
	r2 = r2 - 0x0001
	NZV = cond(r2)
	branch Test(GE,NV) l06DA
	// succ:  l07A4 l06DA
l07A4:
	return
	// succ:  fn06D6_exit
fn06D6_exit:


// fn07A6
// Return size: 2
void fn07A6()
fn07A6_entry:
	// succ:  l07A6
l07A6:
	sp = fp
	Mem0[0x0F1E:word16] = Mem0[0x0F1C:word16] - 0x0001
	NZV = cond(v5)
	branch Test(EQ,Z) l07B0
	// succ:  l07AC l07B0
l07AC:
	goto l08B2
	// succ:  l08B2
l07B0:
	Mem0[0x0F1E:word16] = Mem0[0x0F26:word16]
	NZ = cond(v10)
	V = false
	r5 = 0x0000
	C = false
	V = false
	N = false
	Z = true
	// succ:  l07B8
l07B8:
	r2 = Mem0[0x0F1A:word16]
	NZ = cond(r2)
	V = false
	r0 = Mem0[r2 + 0x0DB8:word16]
	NZ = cond(r0)
	V = false
	branch Test(EQ,Z) l0868
	// succ:  l07C2 l0868
l07C2:
	v21 = Mem0[0x0EFC:word16]
	v21 = v21 & v21
	NZ = cond(v21)
	C = false
	V = false
	branch Test(EQ,Z) l07F4
	// succ:  l07C8 l07F4
l07C8:
	r1 = Mem0[r2 + 0x0DAC:word16]
	NZ = cond(r1)
	V = false
	r3 = 0x0008
	NZ = cond(r3)
	V = false
	// succ:  l07D0
l07D0:
	v26 = Mem0[r1:word16]
	v26 = v26 & v26
	NZ = cond(v26)
	C = false
	V = false
	branch Test(EQ,Z) l07E8
	// succ:  l07D4 l07E8
l07D4:
	sp = sp - 0x0001
	Mem0[sp:byte] = Mem0[r1:byte]
	NZ = cond(v28)
	V = false
	Mem0[sp + 0x0001:byte] = r0
	NZ = cond(v29)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0A74 (retsize: 2; FPU: 2;)
	v33 = Mem0[r1:word16]
	v33 = v33 & v33
	NZ = cond(v33)
	C = false
	V = false
	branch Test(GT,N) l07E8
	// succ:  l07E6 l07E8
l07E6:
	v34 = 0x0000
	Mem0[r1:word16] = v34
	C = false
	V = false
	N = false
	Z = true
	// succ:  l07E8
l07E8:
	v66 = Mem0[r1:word16]
	r1 = r1 + 0x0002
	v67 = v66
	v67 = v67 & v67
	NZ = cond(v67)
	C = false
	V = false
	r3 = r3 - 0x0001
	NZV = cond(r3)
	branch Test(NE,Z) l07D0
	// succ:  l07EE l07D0
l07EE:
	Mem0[r2 + 0x0DB8:word16] = Mem0[r2 + 0x0DB8:word16] + 0x0001
	NZV = cond(v69)
	r0 = r0 + 0x0001
	NZV = cond(r0)
	// succ:  l07F4
l07F4:
	r1 = Mem0[r2 + 0x0DAC:word16]
	NZ = cond(r1)
	V = false
	r3 = 0x0008
	NZ = cond(r3)
	V = false
	// succ:  l07FC
l07FC:
	v72 = Mem0[r1:word16]
	v72 = v72 & v72
	NZ = cond(v72)
	C = false
	V = false
	branch Test(LE,NZV) l0840
	// succ:  l0800 l0840
l0800:
	v74 = Mem0[0x0F20:word16] + Mem0[r1:word16]
	Mem0[r1:word16] = v74
	NZVC = cond(v74)
	v76 = 0x0008 - Mem0[r1:word16]
	NZVC = cond(v76)
	branch Test(ULE,ZC) l0810
	// succ:  l080A l0810
l080A:
	v79 = 0x0048 - Mem0[r1:word16]
	NZVC = cond(v79)
	branch Test(ULT,C) l0814
	// succ:  l0810 l0814
l0810:
	Mem0[0x0F00:word16] = sp
	NZ = cond(v80)
	V = false
	// succ:  l0814
l0814:
	v94 = 0x0017 - r0
	NZVC = cond(v94)
	branch Test(NE,Z) l081E
	// succ:  l081A l081E
l081A:
	Mem0[0x0F02:word16] = sp
	NZ = cond(v95)
	V = false
	// succ:  l081E
l081E:
	v97 = 0x0016 - r0
	NZVC = cond(v97)
	branch Test(ULT,C) l0828
	// succ:  l0824 l0828
l0824:
	call fn093C (retsize: 2; FPU: 2;)
	// succ:  l0828
l0828:
	r5 = r5 + 0x0001
	NZV = cond(r5)
	sp = sp - 0x0001
	Mem0[sp:byte] = Mem0[r1:byte]
	NZ = cond(v105)
	V = false
	Mem0[sp + 0x0001:byte] = r0
	NZ = cond(v106)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn096A (retsize: 2; FPU: 2;)
	call fn0AE8 (retsize: 2; FPU: 2;)
	r3 = r3 - 0x0002
	Mem0[Mem0[r3:ptr16]:word16] = r4
	NZ = cond(v111)
	V = false
	goto l085A
	// succ:  l085A
l0840:
	v85 = Mem0[r1:word16]
	v85 = v85 & v85
	NZ = cond(v85)
	C = false
	V = false
	branch Test(GE,NV) l085A
	// succ:  l0844 l085A
l0844:
	v87 = Mem0[0x0EFC:word16]
	v87 = v87 & v87
	NZ = cond(v87)
	C = false
	V = false
	branch Test(NE,Z) l085A
	// succ:  l084A l085A
l084A:
	sp = sp - 0x0001
	Mem0[sp:byte] = Mem0[r1:byte]
	NZ = cond(v89)
	V = false
	Mem0[sp + 0x0001:byte] = r0
	NZ = cond(v90)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0A74 (retsize: 2; FPU: 2;)
	v93 = 0x0000
	Mem0[r1:word16] = v93
	C = false
	V = false
	N = false
	Z = true
	// succ:  l085A
l085A:
	v99 = Mem0[r1:word16]
	r1 = r1 + 0x0002
	v100 = v99
	v100 = v100 & v100
	NZ = cond(v100)
	C = false
	V = false
	r3 = r3 - 0x0001
	NZV = cond(r3)
	branch Test(NE,Z) l07FC
	// succ:  l0860 l07FC
l0860:
	v101 = r5
	v101 = v101 & v101
	NZ = cond(v101)
	C = false
	V = false
	branch Test(NE,Z) l0868
	// succ:  l0864 l0868
l0864:
	Mem0[r2 + 0x0DB8:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	// succ:  l0868
l0868:
	v81 = Mem0[pc + 0x06AE:word16] - 0x0002
	Mem0[pc + 0x06AE:word16] = v81
	NZVC = cond(v81)
	branch Test(LT,NV) l087E
	// succ:  l0870 l087E
l0870:
	v82 = r5
	v82 = v82 & v82
	NZ = cond(v82)
	C = false
	V = false
	branch Test(NE,Z) l0878
	// succ:  l0874 l0878
l0874:
	goto l07B8
	// succ:  l07B8
l0878:
	Mem0[0x0F28:word16] = r5
	NZ = cond(v96)
	V = false
	goto l08B2
	// succ:  l08B2
l087E:
	Mem0[0x0F1C:word16] = 0x000A
	NZ = cond(v112)
	V = false
	Mem0[0x0DAA:word16] = ~Mem0[0x0DA8:word16]
	NZ = cond(v114)
	V = false
	C = true
	v116 = Mem0[0x0EFC:word16]
	v116 = v116 & v116
	NZ = cond(v116)
	C = false
	V = false
	branch Test(EQ,Z) l0894
	// succ:  l088E l0894
l088E:
	Mem0[0x0EFE:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	goto l08AA
	// succ:  l08AA
l0894:
	v121 = Mem0[0x0EFE:word16]
	v121 = v121 & v121
	NZ = cond(v121)
	C = false
	V = false
	branch Test(EQ,Z) l08AA
	// succ:  l089A l08AA
l089A:
	Mem0[0x0F22:word16] = -Mem0[0x0F20:word16]
	NZV = cond(v123)
	v125 = Mem0[0x0F00:word16]
	v125 = v125 & v125
	NZ = cond(v125)
	C = false
	V = false
	branch Test(NE,Z) l08AA
	// succ:  l08A4 l08AA
l08A4:
	Mem0[0x0EFE:word16] = 0x0001
	NZ = cond(v126)
	V = false
	// succ:  l08AA
l08AA:
	Mem0[0x0F00:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	Mem0[0x0F02:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	// succ:  l08B2
l08B2:
	v37 = Mem0[0x0F12:word16]
	v37 = v37 & v37
	NZ = cond(v37)
	C = false
	V = false
	branch Test(EQ,Z) l08CE
	// succ:  l08B8 l08CE
l08B8:
	v39 = Mem0[pc + 0x063A:word16] & Mem0[0x0EF4:word16]
	Mem0[pc + 0x063A:word16] = v39
	NZ = cond(v39)
	V = false
	branch Test(EQ,Z) l08CE
	// succ:  l08C0 l08CE
l08C0:
	r2 = Mem0[0x0F06:word16]
	NZ = cond(r2)
	V = false
	// succ:  l08C4
l08C4:
	v42 = Mem0[r2 + 0x0EE6:byte]
	v42 = v42 & v42
	NZ = cond(v42)
	C = false
	V = false
	branch Test(EQ,Z) l08D0
	// succ:  l08CA l08D0
l08CA:
	r2 = r2 - 0x0001
	NZV = cond(r2)
	branch Test(GE,NV) l08C4
	// succ:  l08CE l08C4
l08CE:
	return
	// succ:  fn07A6_exit
l08D0:
	call fn0A94 (retsize: 2; FPU: 2;)
	r0 = r0 & Mem0[0x0F0E:word16]
	NZ = cond(r0)
	V = false
	branch Test(NE,Z) l093A
	// succ:  l08DA l093A
l08DA:
	call fn0A94 (retsize: 2; FPU: 2;)
	r1 = Mem0[0x0F08:word16]
	NZ = cond(r1)
	V = false
	branch Test(LT,N) l08EE
	// succ:  l08E4 l08EE
l08E4:
	v49 = Mem0[r1 + 0x0DC4:word16]
	v49 = v49 & v49
	NZ = cond(v49)
	C = false
	V = false
	branch Test(LE,NZV) l08EE
	// succ:  l08EA l08EE
l08EA:
	r0 = r0 << 1
	NZVC = cond(r0)
	branch Test(ULT,C) l0904
	// succ:  l08EE l0904
l08EE:
	r1 = 0x0000
	C = false
	V = false
	N = false
	Z = true
	r0 = r0 << 1
	NZVC = cond(r0)
	r1 = __rol(r1, r1)
	NZVC = cond(r1)
	r0 = r0 << 1
	NZVC = cond(r0)
	r1 = __rol(r1, r1)
	NZVC = cond(r1)
	r0 = r0 << 1
	NZVC = cond(r0)
	r1 = __rol(r1, r1)
	NZVC = cond(r1)
	r1 = r1 << 1
	NZVC = cond(r1)
	v52 = Mem0[r1 + 0x0DC4:word16]
	v52 = v52 & v52
	NZ = cond(v52)
	C = false
	V = false
	branch Test(LE,NZV) l08D0
	// succ:  l0904 l08D0
l0904:
	r0 = 0x0DB8
	NZ = cond(r0)
	V = false
	// succ:  l0908
l0908:
	r0 = r0 - 0x0002
	r3 = Mem0[r0:word16]
	NZ = cond(r3)
	V = false
	r3 = r3 + r1
	NZVC = cond(r3)
	v55 = Mem0[r3:word16]
	v55 = v55 & v55
	NZ = cond(v55)
	C = false
	V = false
	branch Test(LE,NZV) l0908
	// succ:  l0910 l0908
l0910:
	r3 = (int16) Mem0[r3:byte]
	NZ = cond(r3)
	V = false
	r3 = r3 + 0x0002
	NZVC = cond(r3)
	Mem0[r2 + 0x0EE6:byte] = r3
	NZ = cond(v57)
	V = false
	Mem0[r2 + 0x0EE9:byte] = Mem0[r0 + 0x000C:byte]
	NZ = cond(v59)
	V = false
	Mem0[r2 + 0x0EEC:byte] = 0x80
	NZ = cond(v60)
	V = false
	v61 = 0x0DAC - r0
	NZVC = cond(v61)
	branch Test(EQ,Z) l0936
	// succ:  l092C l0936
l092C:
	call fn0A94 (retsize: 2; FPU: 2;)
	r0 = r0 & Mem0[0x0F0C:word16]
	NZ = cond(r0)
	V = false
	branch Test(NE,Z) l093A
	// succ:  l0936 l093A
l0936:
	Mem0[r2 + 0x0EEC:byte] = Mem0[r2 + 0x0EEC:byte] + 0x01
	NZV = cond(v65)
	// succ:  l093A
l093A:
	return
	// succ:  fn07A6_exit
fn07A6_exit:


// fn093C
// Return size: 2
void fn093C()
fn093C_entry:
	// succ:  l093C
l093C:
	sp = fp
	sp = sp - 0x0002
	Mem0[sp:word16] = r3
	NZ = cond(v4)
	V = false
	r3 = Mem0[r1:word16]
	NZ = cond(r3)
	V = false
	r3 = r3 - 0x0001
	NZVC = cond(r3)
	v12 = Mem0[0x0F20:word16]
	v12 = v12 & v12
	NZ = cond(v12)
	C = false
	V = false
	branch Test(LT,N) l094C
	// succ:  l094A l094C
l094A:
	r3 = r3 - 0x0001
	NZV = cond(r3)
	// succ:  l094C
l094C:
	r3 = r3 << 1
	NZVC = cond(r3)
	r3 = r3 + r0
	NZVC = cond(r3)
	r3 = r3 - 0x0016
	NZVC = cond(r3)
	sp = sp - 0x0002
	Mem0[sp:word16] = 0x0007
	NZ = cond(v17)
	V = false
	// succ:  l0958
l0958:
	Mem0[r3 + 0x0E40:byte] = 0x00
	C = false
	V = false
	N = false
	Z = true
	r3 = r3 + 0x0002
	NZVC = cond(r3)
	v21 = Mem0[sp:word16] - 0x0001
	Mem0[sp:word16] = v21
	NZV = cond(v21)
	branch Test(NE,Z) l0958
	// succ:  l0964 l0958
l0964:
	v22 = Mem0[sp:word16]
	sp = sp + 0x0002
	v23 = v22
	v23 = v23 & v23
	NZ = cond(v23)
	C = false
	V = false
	v24 = Mem0[sp:word16]
	sp = sp + 0x0002
	r3 = v24
	NZ = cond(r3)
	V = false
	return
	// succ:  fn093C_exit
fn093C_exit:


// fn096A
// Return size: 2
void fn096A()
fn096A_entry:
	// succ:  l096A
l096A:
	sp = fp
	r3 = r3 & 0x0001
	NZ = cond(r3)
	V = false
	branch Test(NE,Z) l0984
	// succ:  l0970 l0984
l0970:
	v9 = Mem0[0x0DA8:word16]
	v9 = v9 & v9
	NZ = cond(v9)
	C = false
	V = false
	branch Test(NE,Z) l098A
	// succ:  l0976 l098A
l0976:
	Mem0[0x112D:byte] = 0x2F
	NZ = cond(v11)
	V = false
	Mem0[0x1131:byte] = 0x5C
	NZ = cond(v12)
	V = false
	return
	// succ:  fn096A_exit
l0984:
	v14 = Mem0[0x0DA8:word16]
	v14 = v14 & v14
	NZ = cond(v14)
	C = false
	V = false
	branch Test(NE,Z) l0976
	// succ:  l098A l0976
l098A:
	Mem0[0x112D:byte] = 0x5C
	NZ = cond(v15)
	V = false
	Mem0[0x1131:byte] = 0x2F
	NZ = cond(v16)
	V = false
	return
	// succ:  fn096A_exit
fn096A_exit:


// fn0998
// Return size: 2
void fn0998()
fn0998_entry:
	// succ:  l0998
l0998:
	sp = fp
	r2 = Mem0[0x0F02:word16]
	NZ = cond(r2)
	V = false
	branch Test(GT,NZV) l09E4
	// succ:  l099E l09E4
l099E:
	Mem0[0x0F20:word16] = Mem0[0x0F1E:word16] - 0x0001
	NZV = cond(v10)
	branch Test(NE,Z) l0A1E
	// succ:  l09A4 l0A1E
l09A4:
	Mem0[0x0F20:word16] = 0x0064
	NZ = cond(v12)
	V = false
	r2 = 0x0001
	NZ = cond(r2)
	V = false
	Mem0[0x0F12:word16] = r2
	NZ = cond(v13)
	V = false
	Mem0[0x0A6A:word16] = 0x1134
	NZ = cond(v14)
	V = false
	r1 = 0x0000
	C = false
	V = false
	N = false
	Z = true
	call fn0A94 (retsize: 2; FPU: 2;)
	r0 = r0 << 1
	NZVC = cond(r0)
	branch Test(UGE,C) l09D4
	// succ:  l09C2 l09D4
l09C2:
	r0 = r0 << 1
	NZVC = cond(r0)
	branch Test(UGE,C) l09D4
	// succ:  l09C6 l09D4
l09C6:
	Mem0[0x0F12:word16] = Mem0[0x0F10:word16] + 0x0001
	NZV = cond(v22)
	Mem0[0x0A6A:word16] = 0x113D
	NZ = cond(v23)
	V = false
	r1 = 0x000A
	NZ = cond(r1)
	V = false
	// succ:  l09D4
l09D4:
	v56 = r0
	v56 = v56 & v56
	NZ = cond(v56)
	C = false
	V = false
	branch Test(GT,N) l09E4
	// succ:  l09D8 l09E4
l09D8:
	Mem0[0x0F12:word16] = -Mem0[0x0F10:word16]
	NZV = cond(v58)
	v59 = Mem0[pc + 0x008A:word16] + r1
	Mem0[pc + 0x008A:word16] = v59
	NZVC = cond(v59)
	r2 = 0x004A
	NZ = cond(r2)
	V = false
	// succ:  l09E4
l09E4:
	v25 = Mem0[0x0EF4:word16]
	v25 = v25 & v25
	NZ = cond(v25)
	C = false
	V = false
	branch Test(NE,Z) l0A18
	// succ:  l09EA l0A18
l09EA:
	v27 = Mem0[0x0EF6:word16]
	v27 = v27 & v27
	NZ = cond(v27)
	C = false
	V = false
	branch Test(NE,Z) l0A18
	// succ:  l09F0 l0A18
l09F0:
	v29 = Mem0[0x0F10:word16]
	v29 = v29 & v29
	NZ = cond(v29)
	C = false
	V = false
	branch Test(LT,N) l09FE
	// succ:  l09F6 l09FE
l09F6:
	v30 = 0x0049 - r2
	NZVC = cond(v30)
	branch Test(EQ,Z) l0A2A
	// succ:  l09FC l0A2A
l09FC:
	goto l0A04
	// succ:  l0A04
l09FE:
	v49 = 0x0002 - r2
	NZVC = cond(v49)
	branch Test(EQ,Z) l0A2A
	// succ:  l0A04 l0A2A
l0A04:
	r2 = r2 + Mem0[0x0F10:word16]
	NZVC = cond(r2)
	sp = sp - 0x0001
	Mem0[sp:byte] = r2
	NZ = cond(v32)
	V = false
	Mem0[sp + 0x0001:byte] = 0x03
	NZ = cond(v33)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0A60 (retsize: 2; FPU: 2;)
	r2 = r2 + Mem0[0x0F10:word16]
	NZVC = cond(r2)
	sp = sp - 0x0001
	Mem0[sp:byte] = r2
	NZ = cond(v51)
	V = false
	Mem0[sp + 0x0001:byte] = 0x03
	NZ = cond(v52)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0A60 (retsize: 2; FPU: 2;)
	// succ:  l0A18
l0A18:
	Mem0[0x0F04:word16] = r2
	NZ = cond(v55)
	V = false
	return
	// succ:  fn0998_exit
l0A1E:
	v60 = r2
	v60 = v60 & v60
	NZ = cond(v60)
	C = false
	V = false
	branch Test(EQ,Z) l0A5E
	// succ:  l0A22 l0A5E
l0A22:
	v62 = 0x0028 - Mem0[0x0F1E:word16]
	NZVC = cond(v62)
	branch Test(GT,NZV) l0A5E
	// succ:  l0A2A l0A5E
l0A2A:
	sp = sp - 0x0001
	Mem0[sp:byte] = r2
	NZ = cond(v36)
	V = false
	Mem0[sp + 0x0001:byte] = 0x03
	NZ = cond(v37)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0A74 (retsize: 2; FPU: 2;)
	sp = sp - 0x0001
	Mem0[sp:byte] = r2
	NZ = cond(v40)
	V = false
	Mem0[sp + 0x0001:byte] = 0x04
	NZ = cond(v41)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0A74 (retsize: 2; FPU: 2;)
	Mem0[0x0F04:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	v46 = Mem0[0x0F12:word16]
	v46 = v46 & v46
	NZ = cond(v46)
	C = false
	V = false
	branch Test(GT,NZV) l0A5E
	sp = sp - 0x0001
	Mem0[sp:byte] = r2
	NZ = cond(v63)
	V = false
	Mem0[sp + 0x0001:byte] = 0x03
	NZ = cond(v64)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0A74 (retsize: 2; FPU: 2;)
	sp = sp - 0x0001
	Mem0[sp:byte] = r2
	NZ = cond(v67)
	V = false
	Mem0[sp + 0x0001:byte] = 0x04
	NZ = cond(v68)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0A74 (retsize: 2; FPU: 2;)
	Mem0[0x0F04:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	v73 = Mem0[0x0F12:word16]
	v73 = v73 & v73
	NZ = cond(v73)
	C = false
	V = false
	branch Test(GT,NZV) l0A5E
	// succ:  l0A54 l0A5E
l0A54:
	Mem0[0x0EFA:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	Mem0[0x0EFC:word16] = 0x0005
	NZ = cond(v48)
	V = false
	Mem0[0x0EFA:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	Mem0[0x0EFC:word16] = 0x0005
	NZ = cond(v75)
	V = false
	// succ:  l0A5E
l0A5E:
	return
	// succ:  fn0998_exit
fn0998_exit:


// fn0A60
// Return size: 0
void fn0A60()
fn0A60_entry:
	// succ:  l0A60
l0A60:
	sp = fp
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v7)
	V = false
	call fn0AE8 (retsize: 2; FPU: 2;)
	__halt()
fn0A60_exit:


// fn0A74
// Return size: 2
void fn0A74()
fn0A74_entry:
	// succ:  l0A74
l0A74:
	sp = fp
	call fn0AE8 (retsize: 2; FPU: 2;)
	v6 = r5
	Mem0[r5:word16] = v6
	r5 = r5 + 0x0002
	NZ = cond(v6)
	V = false
	return
	// succ:  fn0A74_exit
fn0A74_exit:


// fn0A7C
// Return size: 2
void fn0A7C()
fn0A7C_entry:
	// succ:  l0A7C
l0A7C:
	sp = fp
	v6 = Mem0[0x0F24:byte]
	Mem0[r4:byte] = v6
	r4 = r4 + 0x0001
	NZ = cond(v6)
	V = false
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v11)
	V = false
	call fn0AE8 (retsize: 2; FPU: 2;)
	v14 = r5
	Mem0[pc:word16] = v14
	NZ = cond(v14)
	V = false
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v16)
	V = false
	return
	// succ:  fn0A7C_exit
fn0A7C_exit:


// fn0A94
// Return size: 2
void fn0A94()
fn0A94_entry:
	// succ:  l0A94
l0A94:
	sp = fp
	r0 = Mem0[0x0AB2:word16]
	NZ = cond(r0)
	V = false
	r0 = __swab(r0)
	NZ = cond(r0)
	C = false
	V = false
	r0 = DPB(r0, 0x00, 0)
	C = false
	V = false
	N = false
	Z = true
	r0 = r0 << 1
	NZVC = cond(r0)
	r0 = r0 + Mem0[0x0AB2:word16]
	NZVC = cond(r0)
	r0 = r0 << 1
	NZVC = cond(r0)
	r0 = r0 << 1
	NZVC = cond(r0)
	r0 = r0 + Mem0[0x0AB2:word16]
	NZVC = cond(r0)
	r0 = r0 + 0x3619
	NZVC = cond(r0)
	Mem0[0x0AB4:word16] = r0
	NZ = cond(v14)
	V = false
	return
	// succ:  fn0A94_exit
fn0A94_exit:


// fn0AB6
// Return size: 2
void fn0AB6()
fn0AB6_entry:
	// succ:  l0AB6
l0AB6:
	sp = fp
	call fn0AE8 (retsize: 2; FPU: 2;)
	v6 = r4
	Mem0[Mem0[sp:word16]:ptr16] = v6
	sp = sp + 0x0002
	NZ = cond(v6)
	V = false
	sp = sp - 0x0002
	Mem0[sp:word16] = r0
	NZ = cond(v10)
	V = false
	sp = sp - 0x0002
	Mem0[sp:word16] = r3
	NZ = cond(v12)
	V = false
	r0 = (int16) Mem0[sp + 0x0007:byte]
	NZ = cond(r0)
	V = false
	r3 = 0xFFFE
	NZ = cond(r3)
	V = false
	call fn0B60 (retsize: 2; FPU: 2;)
	v15 = 0x3B
	Mem0[r4:byte] = v15
	r4 = r4 + 0x0001
	NZ = cond(v15)
	V = false
	r0 = (int16) Mem0[sp + 0x0006:byte]
	NZ = cond(r0)
	V = false
	r3 = 0xFFFE
	NZ = cond(r3)
	V = false
	call fn0B60 (retsize: 2; FPU: 2;)
	v18 = 0x48
	Mem0[r4:byte] = v18
	r4 = r4 + 0x0001
	NZ = cond(v18)
	V = false
	v19 = Mem0[sp:word16]
	sp = sp + 0x0002
	r3 = v19
	NZ = cond(r3)
	V = false
	v20 = Mem0[sp:word16]
	sp = sp + 0x0002
	r0 = v20
	NZ = cond(r0)
	V = false
	v21 = Mem0[sp:word16]
	sp = sp + 0x0002
	v22 = v21
	Mem0[sp:word16] = v22
	NZ = cond(v22)
	V = false
	return
	// succ:  fn0AB6_exit
fn0AB6_exit:


// fn0AE8
// Return size: 0
void fn0AE8()
fn0AE8_entry:
	// succ:  l0AE8
l0AE8:
	sp = fp
	sp = sp - 0x0002
	Mem0[sp:word16] = r0
	NZ = cond(v4)
	V = false
	v8 = Mem0[r5:word16]
	r5 = r5 + 0x0002
	r0 = v8
	NZ = cond(r0)
	V = false
	// succ:  l0AEC
l0AEC:
	v9 = Mem0[r0:byte]
	r0 = r0 + 0x0001
	v11 = v9
	Mem0[r4:byte] = v11
	r4 = r4 + 0x0001
	NZ = cond(v11)
	V = false
	branch Test(NE,Z) l0AEC
	// succ:  l0AF0 l0AEC
l0AF0:
	r4 = r4 - 0x0001
	NZV = cond(r4)
	v14 = Mem0[sp:word16]
	sp = sp + 0x0002
	r0 = v14
	NZ = cond(r0)
	V = false
	v15 = r5
	r5 = Mem0[sp:word16]
	sp = sp + 0x0002
	call v15 (retsize: 0; FPU: 2;)
	return
	// succ:  fn0AE8_exit
fn0AE8_exit:


// fn0AF6
// Return size: 2
void fn0AF6()
fn0AF6_entry:
	// succ:  l0AF6
l0AF6:
	sp = fp
	r0 = Mem0[0x0F14:word16]
	NZ = cond(r0)
	V = false
	r0 = r0 + 0x0002
	NZVC = cond(r0)
	sp = sp - 0x0001
	Mem0[sp:byte] = r0
	NZ = cond(v9)
	V = false
	Mem0[sp + 0x0001:byte] = 0x18
	NZ = cond(v10)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	v13 = 0x80
	Mem0[r4:byte] = v13
	NZ = cond(v13)
	V = false
	r0 = 0x1178
	NZ = cond(r0)
	V = false
	PRINT(r0)
	r4 = 0x1178
	NZ = cond(r4)
	V = false
	return
	// succ:  fn0AF6_exit
fn0AF6_exit:


// fn0B1A
// Return size: 2
void fn0B1A()
fn0B1A_entry:
	// succ:  l0B1A
l0B1A:
	sp = fp
	r0 = Mem0[0x0B5A:word16]
	NZ = cond(r0)
	V = false
	r3 = 0x0005
	NZ = cond(r3)
	V = false
	sp = sp - 0x0001
	Mem0[sp:byte] = 0x2B
	NZ = cond(v9)
	V = false
	Mem0[sp + 0x0001:byte] = 0x02
	NZ = cond(v10)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v15)
	V = false
	call fn0B60 (retsize: 2; FPU: 2;)
	r0 = Mem0[0x0F18:word16]
	NZ = cond(r0)
	V = false
	r3 = 0x0003
	NZ = cond(r3)
	V = false
	sp = sp - 0x0001
	Mem0[sp:byte] = 0x1F
	NZ = cond(v18)
	V = false
	Mem0[sp + 0x0001:byte] = 0x02
	NZ = cond(v19)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0B60 (retsize: 2; FPU: 2;)
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v23)
	V = false
	return
	// succ:  fn0B1A_exit
fn0B1A_exit:


// fn0B3A
// Return size: 2
void fn0B3A()
fn0B3A_entry:
	// succ:  l0B3A
l0B3A:
	sp = fp
	r0 = Mem0[0x0F18:word16]
	NZ = cond(r0)
	V = false
	r3 = 0x0003
	NZ = cond(r3)
	V = false
	sp = sp - 0x0001
	Mem0[sp:byte] = 0x1F
	NZ = cond(v9)
	V = false
	Mem0[sp + 0x0001:byte] = 0x02
	NZ = cond(v10)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0B60 (retsize: 2; FPU: 2;)
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v16)
	V = false
	return
	// succ:  fn0B3A_exit
fn0B3A_exit:


// fn0B60
// Return size: 2
void fn0B60()
fn0B60_entry:
	// succ:  l0B60
l0B60:
	sp = fp
	sp = sp - 0x0002
	Mem0[sp:word16] = r1
	NZ = cond(v4)
	V = false
	sp = sp - 0x0002
	Mem0[sp:word16] = r2
	NZ = cond(v8)
	V = false
	sp = sp - 0x0002
	Mem0[sp:word16] = r5
	NZ = cond(v10)
	V = false
	sp = sp - 0x0002
	Mem0[sp:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	v16 = r3
	v16 = v16 & v16
	NZ = cond(v16)
	C = false
	V = false
	branch Test(LT,N) l0B74
	// succ:  l0B6C l0B74
l0B6C:
	Mem0[0x0BC8:word16] = 0x0020
	NZ = cond(v18)
	V = false
	goto l0B7C
	// succ:  l0B7C
l0B74:
	r3 = -r3
	NZV = cond(r3)
	Mem0[0x0BC8:word16] = 0x0030
	NZ = cond(v20)
	V = false
	// succ:  l0B7C
l0B7C:
	r5 = r3
	NZ = cond(r5)
	V = false
	branch Test(EQ,Z) l0BBE
	// succ:  l0B80 l0BBE
l0B80:
	r2 = 0x0BD4
	NZ = cond(r2)
	V = false
	r5 = r5 << 1
	NZVC = cond(r5)
	r2 = r2 - r5
	NZVC = cond(r2)
	// succ:  l0B88
l0B88:
	r5 = 0x0000
	C = false
	V = false
	N = false
	Z = true
	v22 = Mem0[r2:word16]
	r2 = r2 + 0x0002
	r1 = v22
	NZ = cond(r1)
	V = false
	branch Test(EQ,Z) l0BBE
	// succ:  l0B8E l0BBE
l0B8E:
	r0 = r0 - r1
	NZVC = cond(r0)
	branch Test(ULT,C) l0B96
	// succ:  l0B92 l0B96
l0B92:
	r5 = r5 + 0x0001
	NZV = cond(r5)
	goto l0B8E
	// succ:  l0B8E
l0B96:
	r0 = r0 + r1
	NZVC = cond(r0)
	v30 = Mem0[sp:word16]
	v30 = v30 & v30
	NZ = cond(v30)
	C = false
	V = false
	branch Test(NE,Z) l0BB4
	// succ:  l0B9C l0BB4
l0B9C:
	v31 = r5
	v31 = v31 & v31
	NZ = cond(v31)
	C = false
	V = false
	branch Test(EQ,Z) l0BA4
	// succ:  l0BA0 l0BA4
l0BA0:
	v33 = Mem0[sp:word16] + 0x0001
	Mem0[sp:word16] = v33
	NZV = cond(v33)
	goto l0BB4
	// succ:  l0BB4
l0BA4:
	v34 = 0x0001 - r3
	NZVC = cond(v34)
	branch Test(EQ,Z) l0BB4
	// succ:  l0BAA l0BB4
l0BAA:
	v36 = Mem0[r2:word16]
	v36 = v36 & v36
	NZ = cond(v36)
	C = false
	V = false
	branch Test(EQ,Z) l0BB4
	// succ:  l0BAE l0BB4
l0BAE:
	r5 = (int16) Mem0[0x0BC6:byte]
	NZ = cond(r5)
	V = false
	goto l0BB8
	// succ:  l0BB8
l0BB4:
	r5 = r5 + 0x0030
	NZVC = cond(r5)
	// succ:  l0BB8
l0BB8:
	v39 = r5
	Mem0[r4:byte] = v39
	r4 = r4 + 0x0001
	NZ = cond(v39)
	V = false
	r3 = r3 - 0x0001
	NZV = cond(r3)
	branch Test(NE,Z) l0B88
	// succ:  l0BBE l0B88
l0BBE:
	v24 = Mem0[sp:word16]
	sp = sp + 0x0002
	v25 = v24
	v25 = v25 & v25
	NZ = cond(v25)
	C = false
	V = false
	v26 = Mem0[sp:word16]
	sp = sp + 0x0002
	r5 = v26
	NZ = cond(r5)
	V = false
	v27 = Mem0[sp:word16]
	sp = sp + 0x0002
	r2 = v27
	NZ = cond(r2)
	V = false
	v28 = Mem0[sp:word16]
	sp = sp + 0x0002
	r1 = v28
	NZ = cond(r1)
	V = false
	return
	v40 = Mem0[sp:word16]
	sp = sp + 0x0002
	v41 = v40
	v41 = v41 & v41
	NZ = cond(v41)
	C = false
	V = false
	v42 = Mem0[sp:word16]
	sp = sp + 0x0002
	r5 = v42
	NZ = cond(r5)
	V = false
	v43 = Mem0[sp:word16]
	sp = sp + 0x0002
	r2 = v43
	NZ = cond(r2)
	V = false
	v44 = Mem0[sp:word16]
	sp = sp + 0x0002
	r1 = v44
	NZ = cond(r1)
	V = false
	return
	// succ:  fn0B60_exit fn0B60_exit
fn0B60_exit:


// fn0BD6
// Return size: 2
void fn0BD6()
fn0BD6_entry:
	// succ:  l0BD6
l0BD6:
	sp = fp
	Mem0[0x0F1A:word16] = 0x0003
	NZ = cond(v4)
	V = false
	Mem0[0x0B5C:word16] = 0x0000
	C = false
	V = false
	N = false
	Z = true
	Mem0[0x0F0E:word16] = 0xF800
	NZ = cond(v11)
	V = false
	Mem0[0x0F10:word16] = 0xE000
	NZ = cond(v12)
	V = false
	r1 = 0x0E56
	NZ = cond(r1)
	V = false
	r0 = 0x0006
	NZ = cond(r0)
	V = false
	// succ:  l0BF4
l0BF4:
	r2 = 0x000A
	NZ = cond(r2)
	V = false
	// succ:  l0BF8
l0BF8:
	v16 = 0x04
	Mem0[r1:byte] = v16
	r1 = r1 + 0x0001
	NZ = cond(v16)
	V = false
	r2 = r2 - 0x0001
	NZV = cond(r2)
	branch Test(NE,Z) l0BF8
	// succ:  l0C00 l0BF8
l0C00:
	r1 = r1 + 0x000A
	NZVC = cond(r1)
	r0 = r0 - 0x0001
	NZV = cond(r0)
	branch Test(NE,Z) l0BF4
	// succ:  l0C08 l0BF4
l0C08:
	r0 = 0x1166
	NZ = cond(r0)
	V = false
	v19 = 0x1100
	Mem0[r0:word16] = v19
	NZ = cond(v19)
	V = false
	Mem0[r0 + 0x0002:word16] = 0x1170
	NZ = cond(v20)
	V = false
	FnSubfn(r0)
	Mem0[0x1174:word16] = Mem0[0x1170:word16]
	NZ = cond(v22)
	V = false
	return
	// succ:  fn0BD6_exit
fn0BD6_exit:


// fn0C20
// Return size: 0
void fn0C20()
fn0C20_entry:
	// succ:  l0C20
l0C20:
	sp = fp
	r1 = 0x0DB8
	NZ = cond(r1)
	V = false
	r0 = 0x0006
	NZ = cond(r0)
	V = false
	r2 = 0x0005
	NZ = cond(r2)
	V = false
	// succ:  l0C2C
l0C2C:
	v8 = r2
	Mem0[r1:word16] = v8
	r1 = r1 + 0x0002
	NZ = cond(v8)
	V = false
	r2 = r2 + 0x0002
	NZVC = cond(r2)
	r0 = r0 - 0x0001
	NZV = cond(r0)
	branch Test(NE,Z) l0C2C
	// succ:  l0C36 l0C2C
l0C36:
	r1 = 0x0000
	C = false
	V = false
	N = false
	Z = true
	r0 = 0x0008
	NZ = cond(r0)
	V = false
	r2 = 0x000B
	NZ = cond(r2)
	V = false
	// succ:  l0C40
l0C40:
	Mem0[r1 + 0x0DE0:word16] = r2
	NZ = cond(v14)
	V = false
	Mem0[r1 + 0x0DF0:word16] = r2
	NZ = cond(v15)
	V = false
	Mem0[r1 + 0x0E00:word16] = r2
	NZ = cond(v16)
	V = false
	Mem0[r1 + 0x0E10:word16] = r2
	NZ = cond(v17)
	V = false
	Mem0[r1 + 0x0E20:word16] = r2
	NZ = cond(v18)
	V = false
	Mem0[r1 + 0x0E30:word16] = r2
	NZ = cond(v19)
	V = false
	Mem0[r1 + 0x0DC4:word16] = 0x0006
	NZ = cond(v20)
	V = false
	v21 = Mem0[r1:word16]
	r1 = r1 + 0x0002
	v22 = v21
	v22 = v22 & v22
	NZ = cond(v22)
	C = false
	V = false
	r2 = r2 + 0x0008
	NZVC = cond(r2)
	r0 = r0 - 0x0001
	NZV = cond(r0)
	branch Test(NE,Z) l0C40
	// succ:  l0C68 l0C40
l0C68:
	r1 = 0x0EE6
	NZ = cond(r1)
	V = false
	r0 = 0x0010
	NZ = cond(r0)
	V = false
	// succ:  l0C70
l0C70:
	v23 = 0x0000
	Mem0[r1:word16] = v23
	r1 = r1 + 0x0002
	C = false
	V = false
	N = false
	Z = true
	r0 = r0 - 0x0001
	NZV = cond(r0)
	branch Test(NE,Z) l0C70
	// succ:  l0C76 l0C70
l0C76:
	Mem0[0x0F0A:word16] = 0xFFFF
	NZ = cond(v25)
	V = false
	Mem0[0x0F14:word16] = 0x0030
	NZ = cond(v26)
	V = false
	Mem0[0x0F16:word16] = 0x0002
	NZ = cond(v27)
	V = false
	Mem0[0x0F18:word16] = 0x0078
	NZ = cond(v28)
	V = false
	Mem0[0x0F1C:word16] = 0x000A
	NZ = cond(v29)
	V = false
	Mem0[0x0F1E:word16] = 0x0004
	NZ = cond(v30)
	V = false
	Mem0[0x0F28:word16] = 0x0004
	NZ = cond(v31)
	V = false
	Mem0[0x0F20:word16] = 0x0064
	NZ = cond(v32)
	V = false
	Mem0[0x0F22:word16] = 0x0001
	NZ = cond(v33)
	V = false
	v34 = Mem0[pc + 0x025E:word16] << 1
	Mem0[pc + 0x025E:word16] = v34
	NZVC = cond(v34)
	v35 = Mem0[pc + 0x025C:word16] << 1
	Mem0[pc + 0x025C:word16] = v35
	NZVC = cond(v35)
	branch Test(NE,Z) l0CBA
	// succ:  l0CB6 l0CBA
l0CB6:
	v36 = Mem0[pc + 0x0256:word16] >> 1
	Mem0[pc + 0x0256:word16] = v36
	NZVC = cond(v36)
	// succ:  l0CBA
l0CBA:
	r4 = 0x1178
	NZ = cond(r4)
	V = false
	call fn0AE8 (retsize: 2; FPU: 2;)
	v39 = r4
	Mem0[r1:word16] = v39
	r1 = r1 + 0x0002
	NZ = cond(v39)
	V = false
	call fn0AE8 (retsize: 2; FPU: 2;)
	r1 = r1 - 0x0002
	Mem0[r1:word16] = r4
	NZ = cond(v41)
	V = false
	sp = sp - 0x0001
	Mem0[sp:byte] = 0x02
	NZ = cond(v42)
	V = false
	Mem0[sp + 0x0001:byte] = 0x18
	NZ = cond(v43)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0AE8 (retsize: 2; FPU: 2;)
	r2 = r2 - 0x0002
	Mem0[r2:word16] = r4
	NZ = cond(v46)
	V = false
	sp = sp - 0x0001
	Mem0[sp:byte] = 0x02
	NZ = cond(v47)
	V = false
	Mem0[sp + 0x0001:byte] = 0x02
	NZ = cond(v48)
	V = false
	call fn0AB6 (retsize: 2; FPU: 2;)
	call fn0AE8 (retsize: 2; FPU: 2;)
fn0C20_exit:


