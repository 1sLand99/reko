// fn0387
// Return size: 0
define fn0387
fn0387_entry:
	// succ:  l0387
l0387:
	sp = fp
	hl = 0x038F
	sp = sp - 0x0002
	Mem0[sp:word16] = hl
	hl = Mem0[0x1648:word16]
	call hl (retsize: 2;)
	return
	// succ:  fn0387_exit
fn0387_exit:


// fn0390
// Return size: 2
define fn0390
fn0390_entry:
	// succ:  l0390
l0390:
	sp = fp
	hl = 0x1656
	Mem0[hl:byte] = e
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = b
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = c
	hl = hl - 0x0001
	SZP = cond(hl)
	de = Mem0[sp:word16]
	sp = sp + 0x0002
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	Mem0[hl:byte] = c
	sp = sp - 0x0002
	Mem0[sp:word16] = de
	// succ:  l039D
l039D:
	a = Mem0[0x1653:byte]
	a = a - 0x01
	SZP = cond(a)
	Mem0[0x1653:byte] = a
	SZPC = cond(a - 0xFF)
	branch Test(EQ,Z) l03BA
	// succ:  l03A9 l03BA
l03A9:
	hl = Mem0[0x1654:word16]
	a = Mem0[0x1656:byte]
	Mem0[hl:byte] = a
	hl = Mem0[0x1654:word16]
	hl = hl + 0x0001
	SZP = cond(hl)
	Mem0[0x1654:word16] = hl
	goto l039D
	// succ:  l039D
l03BA:
	return
	// succ:  fn0390_exit
fn0390_exit:


// fn03BB
// Return size: 2
define fn03BB
fn03BB_entry:
	// succ:  l03BB
l03BB:
	sp = fp
	hl = 0x1657
	Mem0[hl:byte] = c
	a = Mem0[0x1657:byte]
	a = a - 0x61
	SZC = cond(a)
	c = a
	a = 0x1A
	a = a - c
	SZC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	a = ~a
	return
	// succ:  fn03BB_exit
fn03BB_exit:


// fn03CB
// Return size: 2
define fn03CB
fn03CB_entry:
	// succ:  l03CB
l03CB:
	sp = fp
	hl = 0x1658
	Mem0[hl:byte] = c
	a = Mem0[0x1658:byte]
	a = a - 0x41
	SZC = cond(a)
	c = a
	a = 0x19
	a = a - c
	SZC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	a = ~a
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	hl = Mem0[0x1658:word16]
	c = l
	call fn03BB (retsize: 2;)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a | c
	SZ = cond(a)
	C = false
	return
	// succ:  fn03CB_exit
fn03CB_exit:


// fn03E6
// Return size: 2
define fn03E6
fn03E6_entry:
	// succ:  l03E6
l03E6:
	sp = fp
	hl = 0x1659
	Mem0[hl:byte] = c
	hl = Mem0[0x1659:word16]
	c = l
	call fn03BB (retsize: 2;)
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l03FB
	// succ:  l03F5 l03FB
l03F5:
	a = Mem0[0x1659:byte]
	a = a + 0x5F
	SZPC = cond(a)
	return
	// succ:  fn03E6_exit
l03FB:
	a = Mem0[0x1659:byte]
	return
	// succ:  fn03E6_exit
fn03E6_exit:


// fn0400
// Return size: 2
define fn0400
fn0400_entry:
	// succ:  l0400
l0400:
	sp = fp
	hl = Mem0[0x0006:word16]
	Mem0[0x1640:word16] = hl
	hl = 0x0080
	Mem0[0x164E:word16] = hl
	return
	// succ:  fn0400_exit
fn0400_exit:


// fn040D
// Return size: 2
define fn040D
fn040D_entry:
	// succ:  l040D
l040D:
	sp = fp
	hl = 0x165E
	Mem0[hl:byte] = e
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = b
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = c
	hl = hl - 0x0001
	SZP = cond(hl)
	de = Mem0[sp:word16]
	sp = sp + 0x0002
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	Mem0[hl:byte] = b
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = c
	sp = sp - 0x0002
	Mem0[sp:word16] = de
	// succ:  l041C
l041C:
	a = 0x00
	hl = 0x165E
	SZPC = cond(a - Mem0[hl:byte])
	branch Test(UGE,C) l045A
	// succ:  l0425 l045A
l0425:
	hl = Mem0[0x165C:word16]
	v13 = de
	de = hl
	hl = v13
	c = 0x1A
	F_DMAOFF(de)
	hl = Mem0[0x165A:word16]
	v14 = de
	de = hl
	hl = v14
	c = 0x14
	a = F_READ(de)
	SZPC = cond(a - 0x00)
	branch Test(NE,Z) l044D
	// succ:  l043C l044D
l043C:
	hl = 0x165E
	Mem0[hl:byte] = Mem0[hl:byte] - 0x01
	SZP = cond(Mem0[hl:byte])
	de = 0x0080
	hl = Mem0[0x165C:word16]
	hl = hl + de
	SZPC = cond(hl)
	Mem0[0x165C:word16] = hl
	goto l0457
	// succ:  l0457
l044D:
	hl = Mem0[0x165C:word16]
	Mem0[hl:byte] = 0x1A
	hl = 0x165E
	Mem0[hl:byte] = 0x00
	// succ:  l0457
l0457:
	goto l041C
	// succ:  l041C
l045A:
	return
	// succ:  fn040D_exit
fn040D_exit:


// fn045B
// Return size: 2
define fn045B
fn045B_entry:
	// succ:  l045B
l045B:
	sp = fp
	a = Mem0[0x0080:byte]
	SZPC = cond(a - 0x00)
	branch Test(NE,Z) l0466
	// succ:  l0463 l0466
l0463:
	a = 0x00
	return
	// succ:  fn045B_exit
l0466:
	hl = 0x0080
	Mem0[hl:byte] = Mem0[hl:byte] - 0x01
	SZP = cond(Mem0[hl:byte])
	hl = Mem0[0x164E:word16]
	hl = hl + 0x0001
	SZP = cond(hl)
	Mem0[0x164E:word16] = hl
	a = Mem0[hl:byte]
	return
	// succ:  fn045B_exit
fn045B_exit:


// fn0473
// Return size: 2
define fn0473
fn0473_entry:
	// succ:  l0473
l0473:
	sp = fp
	hl = 0x165F
	Mem0[hl:byte] = c
	hl = Mem0[0x165F:word16]
	h = 0x00
	v6 = de
	de = hl
	hl = v6
	c = 0x02
	C_WRITE(e)
	return
	// succ:  fn0473_exit
fn0473_exit:


// fn0483
// Return size: 2
define fn0483
fn0483_entry:
	// succ:  l0483
l0483:
	sp = fp
	hl = 0x1665
	Mem0[hl:byte] = d
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = e
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = b
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = c
	hl = hl - 0x0001
	SZP = cond(hl)
	de = Mem0[sp:word16]
	sp = sp + 0x0002
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	Mem0[hl:byte] = b
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = c
	sp = sp - 0x0002
	Mem0[sp:word16] = de
	de = 0x0080
	hl = Mem0[0x1664:word16]
	hl = hl + de
	SZPC = cond(hl)
	hl = hl - 0x0001
	SZP = cond(hl)
	c = 0x07
	call fn1326 (retsize: 2;)
	v12 = de
	de = hl
	hl = v12
	hl = 0x1667
	Mem0[hl:byte] = e
	// succ:  l04A6
l04A6:
	a = 0x00
	hl = 0x1667
	SZPC = cond(a - Mem0[hl:byte])
	branch Test(UGE,C) l0523
	// succ:  l04AF l0523
l04AF:
	hl = Mem0[0x1662:word16]
	v15 = de
	de = hl
	hl = v15
	c = 0x1A
	F_DMAOFF(de)
	hl = Mem0[0x1660:word16]
	v16 = de
	de = hl
	hl = v16
	c = 0x15
	a = F_WRITE(de)
	SZPC = cond(a - 0x00)
	branch Test(NE,Z) l04D7
	// succ:  l04C6 l04D7
l04C6:
	hl = 0x1667
	Mem0[hl:byte] = Mem0[hl:byte] - 0x01
	SZP = cond(Mem0[hl:byte])
	de = 0x0080
	hl = Mem0[0x1662:word16]
	hl = hl + de
	SZPC = cond(hl)
	Mem0[0x1662:word16] = hl
	goto l0520
	// succ:  l0520
l04D7:
	hl = 0x02A3
	Mem0[0x1668:word16] = hl
	// succ:  l04DD
l04DD:
	hl = Mem0[0x1668:word16]
	a = Mem0[hl:byte]
	SZPC = cond(a - 0x24)
	branch Test(EQ,Z) l04F7
	// succ:  l04E6 l04F7
l04E6:
	hl = Mem0[0x1668:word16]
	c = Mem0[hl:byte]
	call fn0473 (retsize: 2;)
	hl = Mem0[0x1668:word16]
	hl = hl + 0x0001
	SZP = cond(hl)
	Mem0[0x1668:word16] = hl
	goto l04DD
	// succ:  l04DD
l04F7:
	hl = Mem0[0x1660:word16]
	a = Mem0[hl:byte]
	SZPC = cond(a - 0x00)
	branch Test(NE,Z) l050D
	// succ:  l0500 l050D
l0500:
	de = 0x0000
	c = 0x19
	a = DRV_GET()
	a = a + 0x01
	SZP = cond(a)
	hl = Mem0[0x1660:word16]
	Mem0[hl:byte] = a
	// succ:  l050D
l050D:
	hl = Mem0[0x1660:word16]
	a = 0x61
	a = a + Mem0[hl:byte]
	SZPC = cond(a)
	a = a - 0x01
	SZP = cond(a)
	c = a
	call fn0473 (retsize: 2;)
	c = 0x3A
	call fn0473 (retsize: 2;)
	call fn0387 (retsize: 2;)
	// succ:  l0520
l0520:
	goto l04A6
	// succ:  l04A6
l0523:
	return
	// succ:  fn0483_exit
fn0483_exit:


// fn0524
// Return size: 2
define fn0524
fn0524_entry:
	// succ:  l0524
l0524:
	sp = fp
	hl = 0x166A
	Mem0[hl:byte] = c
	hl = Mem0[0x166A:word16]
	h = 0x00
	v6 = de
	de = hl
	hl = v6
	c = 0x05
	L_WRITE(e)
	return
	// succ:  fn0524_exit
fn0524_exit:


// fn0534
// Return size: 2
define fn0534
fn0534_entry:
	// succ:  l0534
l0534:
	sp = fp
	hl = 0x166B
	Mem0[hl:byte] = c
	hl = Mem0[0x14BE:word16]
	v5 = de
	de = hl
	hl = v5
	hl = Mem0[0x14BC:word16]
	hl = hl + de
	SZPC = cond(hl)
	a = Mem0[0x166B:byte]
	Mem0[hl:byte] = a
	hl = Mem0[0x14BE:word16]
	hl = hl + 0x0001
	SZP = cond(hl)
	Mem0[0x14BE:word16] = hl
	v10 = de
	de = hl
	hl = v10
	hl = 0x0200
	call fn1335 (retsize: 2;)
	branch Test(ULT,C) l056A
	// succ:  l0555 l056A
l0555:
	bc = 0x14C0
	sp = sp - 0x0002
	Mem0[sp:word16] = bc
	hl = Mem0[0x14BC:word16]
	b = h
	c = l
	de = 0x0200
	call fn0483 (retsize: 2;)
	hl = 0x0000
	Mem0[0x14BE:word16] = hl
	// succ:  l056A
l056A:
	return
	// succ:  fn0534_exit
fn0534_exit:


// fn056B
// Return size: 2
define fn056B
fn056B_entry:
	// succ:  l056B
l056B:
	sp = fp
	hl = 0x166C
	Mem0[hl:byte] = c
	a = Mem0[0x14F3:byte]
	SZPC = cond(a - 0x01)
	branch Test(NE,Z) l0581
	// succ:  l0577 l0581
l0577:
	hl = Mem0[0x166C:word16]
	c = l
	call fn0524 (retsize: 2;)
	goto l05A2
	// succ:  l05A2
l0581:
	a = Mem0[0x14F3:byte]
	SZPC = cond(a - 0x02)
	branch Test(NE,Z) l0593
	// succ:  l0589 l0593
l0589:
	hl = Mem0[0x166C:word16]
	c = l
	call fn0473 (retsize: 2;)
	goto l05A2
	// succ:  l05A2
l0593:
	a = Mem0[0x14F3:byte]
	SZPC = cond(a - 0x04)
	branch Test(NE,Z) l05A2
	// succ:  l059B l05A2
l059B:
	hl = Mem0[0x166C:word16]
	c = l
	call fn0534 (retsize: 2;)
	// succ:  l05A2
l05A2:
	a = Mem0[0x166C:byte]
	SZPC = cond(a - 0x0D)
	branch Test(NE,Z) l05B2
	// succ:  l05AA l05B2
l05AA:
	hl = 0x14F6
	Mem0[hl:byte] = 0x01
	goto l05CD
	// succ:  l05CD
l05B2:
	a = Mem0[0x166C:byte]
	SZPC = cond(a - 0x0A)
	branch Test(NE,Z) l05C9
	// succ:  l05BA l05C9
l05BA:
	a = Mem0[0x14F3:byte]
	SZPC = cond(a - 0x00)
	branch Test(EQ,Z) l05C6
	// succ:  l05C2 l05C6
l05C2:
	hl = 0x14FD
	Mem0[hl:byte] = Mem0[hl:byte] + 0x01
	SZP = cond(Mem0[hl:byte])
	// succ:  l05C6
l05C6:
	goto l05CD
	// succ:  l05CD
l05C9:
	hl = 0x14F6
	Mem0[hl:byte] = Mem0[hl:byte] + 0x01
	SZP = cond(Mem0[hl:byte])
	// succ:  l05CD
l05CD:
	return
	// succ:  fn056B_exit
fn056B_exit:


// fn05CE
// Return size: 2
define fn05CE
fn05CE_entry:
	// succ:  l05CE
l05CE:
	sp = fp
	hl = 0x166E
	Mem0[hl:byte] = b
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = c
	// succ:  l05D4
l05D4:
	hl = Mem0[0x166D:word16]
	a = Mem0[hl:byte]
	SZPC = cond(a - 0x24)
	branch Test(EQ,Z) l05EE
	// succ:  l05DD l05EE
l05DD:
	hl = Mem0[0x166D:word16]
	c = Mem0[hl:byte]
	call fn056B (retsize: 2;)
	hl = Mem0[0x166D:word16]
	hl = hl + 0x0001
	SZP = cond(hl)
	Mem0[0x166D:word16] = hl
	goto l05D4
	// succ:  l05D4
l05EE:
	return
	// succ:  fn05CE_exit
fn05CE_exit:


// fn05EF
// Return size: 2
define fn05EF
fn05EF_entry:
	// succ:  l05EF
l05EF:
	sp = fp
	hl = 0x1670
	Mem0[hl:byte] = b
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = c
	hl = 0x1671
	Mem0[hl:byte] = 0x01
	// succ:  l05FA
l05FA:
	hl = Mem0[0x166F:word16]
	a = Mem0[hl:byte]
	hl = 0x1671
	SZPC = cond(a - Mem0[hl:byte])
	branch Test(ULT,C) l061A
	// succ:  l0605 l061A
l0605:
	hl = Mem0[0x1671:word16]
	h = 0x00
	v11 = de
	de = hl
	hl = v11
	hl = Mem0[0x166F:word16]
	hl = hl + de
	SZPC = cond(hl)
	c = Mem0[hl:byte]
	call fn056B (retsize: 2;)
	hl = 0x1671
	Mem0[hl:byte] = Mem0[hl:byte] + 0x01
	SZP = cond(Mem0[hl:byte])
	branch Test(NE,Z) l05FA
	// succ:  l061A l05FA
l061A:
	return
	// succ:  fn05EF_exit
fn05EF_exit:


// fn061B
// Return size: 2
define fn061B
fn061B_entry:
	// succ:  l061B
l061B:
	sp = fp
	hl = 0x1675
	Mem0[hl:byte] = d
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = e
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = b
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = c
	hl = 0x14F3
	Mem0[hl:byte] = 0x02
	hl = Mem0[0x1672:word16]
	b = h
	c = l
	call fn05CE (retsize: 2;)
	hl = Mem0[0x1674:word16]
	b = h
	c = l
	call fn05EF (retsize: 2;)
	call fn0387 (retsize: 2;)
	return
	// succ:  fn061B_exit
fn061B_exit:


// fn063E
// Return size: 2
define fn063E
fn063E_entry:
	// succ:  l063E
l063E:
	sp = fp
	hl = 0x1679
	Mem0[hl:byte] = d
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = e
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = b
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = c
	hl = 0x167B
	Mem0[hl:byte] = 0x00
	hl = Mem0[0x1678:word16]
	Mem0[hl:byte] = 0x00
	hl = 0x167A
	Mem0[hl:byte] = 0x00
	// succ:  l0657
l0657:
	a = 0x03
	hl = 0x167A
	SZPC = cond(a - Mem0[hl:byte])
	branch Test(ULT,C) l06B6
	// succ:  l0660 l06B6
l0660:
	hl = 0x167C
	Mem0[hl:byte] = 0x30
	// succ:  l0665
l0665:
	hl = Mem0[0x167A:word16]
	h = 0x00
	bc = 0x0227
	hl = hl + hl
	SZPC = cond(hl)
	hl = hl + bc
	SZPC = cond(hl)
	de = 0x1676
	call fn1348 (retsize: 2;)
	branch Test(ULT,C) l0697
	// succ:  l0678 l0697
l0678:
	hl = Mem0[0x167A:word16]
	h = 0x00
	bc = 0x0227
	hl = hl + hl
	SZPC = cond(hl)
	hl = hl + bc
	SZPC = cond(hl)
	de = 0x1676
	call fn1348 (retsize: 2;)
	v15 = de
	de = hl
	hl = v15
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = e
	hl = hl + 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = d
	hl = 0x167B
	Mem0[hl:byte] = 0x01
	hl = hl + 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = Mem0[hl:byte] + 0x01
	SZP = cond(Mem0[hl:byte])
	goto l0665
	// succ:  l0665
l0697:
	a = Mem0[0x167B:byte]
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l06AF
	// succ:  l069E l06AF
l069E:
	hl = Mem0[0x1678:word16]
	a = Mem0[hl:byte]
	a = a + 0x01
	SZP = cond(a)
	Mem0[hl:byte] = a
	c = a
	b = 0x00
	hl = Mem0[0x1678:word16]
	hl = hl + bc
	SZPC = cond(hl)
	a = Mem0[0x167C:byte]
	Mem0[hl:byte] = a
	// succ:  l06AF
l06AF:
	hl = 0x167A
	Mem0[hl:byte] = Mem0[hl:byte] + 0x01
	SZP = cond(Mem0[hl:byte])
	branch Test(NE,Z) l0657
	// succ:  l06B6 l0657
l06B6:
	de = 0x0030
	hl = Mem0[0x1676:word16]
	hl = hl + de
	SZPC = cond(hl)
	sp = sp - 0x0002
	Mem0[sp:word16] = hl
	hl = Mem0[0x1678:word16]
	a = Mem0[hl:byte]
	a = a + 0x01
	SZP = cond(a)
	Mem0[hl:byte] = a
	c = a
	b = 0x00
	hl = Mem0[0x1678:word16]
	hl = hl + bc
	SZPC = cond(hl)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	Mem0[hl:byte] = c
	return
	// succ:  fn063E_exit
fn063E_exit:


// fn06CE
// Return size: 2
define fn06CE
fn06CE_entry:
	// succ:  l06CE
l06CE:
	sp = fp
	hl = 0x167E
	Mem0[hl:byte] = b
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = c
	hl = Mem0[0x167D:word16]
	b = h
	c = l
	de = 0x162C
	call fn063E (retsize: 2;)
	bc = 0x162C
	call fn05EF (retsize: 2;)
	return
	// succ:  fn06CE_exit
fn06CE_exit:


// fn0722
// Return size: 2
define fn0722
fn0722_entry:
	// succ:  l0722
l0722:
	sp = fp
	hl = 0x1681
	Mem0[hl:byte] = c
	a = 0x09
	hl = 0x1681
	SZPC = cond(a - Mem0[hl:byte])
	branch Test(UGE,C) l073B
	// succ:  l072F l073B
l072F:
	a = Mem0[0x1681:byte]
	a = a + 0x57
	SZPC = cond(a)
	c = a
	call fn056B (retsize: 2;)
	goto l0744
	// succ:  l0744
l073B:
	a = Mem0[0x1681:byte]
	a = a + 0x30
	SZPC = cond(a)
	c = a
	call fn056B (retsize: 2;)
	// succ:  l0744
l0744:
	return
	// succ:  fn0722_exit
fn0722_exit:


// fn0745
// Return size: 2
define fn0745
fn0745_entry:
	// succ:  l0745
l0745:
	sp = fp
	hl = 0x1682
	Mem0[hl:byte] = c
	// succ:  l0749
l0749:
	hl = 0x1682
	a = Mem0[0x14F6:byte]
	SZPC = cond(a - Mem0[hl:byte])
	branch Test(UGE,C) l075B
	// succ:  l0753 l075B
l0753:
	c = 0x20
	call fn056B (retsize: 2;)
	goto l0749
	// succ:  l0749
l075B:
	return
	// succ:  fn0745_exit
fn0745_exit:


// fn075C
// Return size: 2
define fn075C
fn075C_entry:
	// succ:  l075C
l075C:
	sp = fp
	hl = 0x1686
	Mem0[hl:byte] = d
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = e
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = b
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = c
	hl = 0x14F3
	Mem0[hl:byte] = 0x02
	a = Mem0[0x14F6:byte]
	SZPC = cond(a - 0x01)
	branch Test(EQ,Z) l077D
	// succ:  l0773 l077D
l0773:
	c = 0x0D
	call fn056B (retsize: 2;)
	c = 0x0A
	call fn056B (retsize: 2;)
	// succ:  l077D
l077D:
	bc = 0x0260
	call fn05CE (retsize: 2;)
	hl = Mem0[0x1683:word16]
	b = h
	c = l
	call fn06CE (retsize: 2;)
	c = 0x0D
	call fn056B (retsize: 2;)
	c = 0x0A
	call fn056B (retsize: 2;)
	a = 0x00
	de = 0x1685
	call fn1353 (retsize: 2;)
	a = a | l
	SZ = cond(a)
	C = false
	branch Test(EQ,Z) l07AF
	// succ:  l07A1 l07AF
l07A1:
	bc = 0x034E
	call fn05CE (retsize: 2;)
	hl = Mem0[0x1685:word16]
	b = h
	c = l
	call fn06CE (retsize: 2;)
	// succ:  l07AF
l07AF:
	call fn0387 (retsize: 2;)
	return
	// succ:  fn075C_exit
fn075C_exit:


// fn07B3
// Return size: 2
define fn07B3
fn07B3_entry:
	// succ:  l07B3
l07B3:
	sp = fp
	a = Mem0[0x14F9:byte]
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l080E
	// succ:  l07BA l080E
l07BA:
	c = 0x0D
	call fn056B (retsize: 2;)
	// succ:  l07BF
l07BF:
	hl = 0x14F7
	a = Mem0[0x14FD:byte]
	SZPC = cond(a - Mem0[hl:byte])
	branch Test(UGE,C) l07D6
	// succ:  l07C9 l07D6
l07C9:
	c = 0x0D
	call fn056B (retsize: 2;)
	c = 0x0A
	call fn056B (retsize: 2;)
	goto l07BF
	// succ:  l07BF
l07D6:
	c = 0x0D
	call fn056B (retsize: 2;)
	c = 0x0A
	call fn056B (retsize: 2;)
	bc = 0x02B7
	call fn05CE (retsize: 2;)
	bc = 0x14FF
	call fn05EF (retsize: 2;)
	a = Mem0[0x14F8:byte]
	a = a - 0x0A
	SZC = cond(a)
	c = a
	call fn0745 (retsize: 2;)
	bc = 0x02FC
	call fn05CE (retsize: 2;)
	hl = Mem0[0x14FE:word16]
	c = l
	b = 0x00
	call fn06CE (retsize: 2;)
	hl = 0x14FE
	Mem0[hl:byte] = Mem0[hl:byte] + 0x01
	SZP = cond(Mem0[hl:byte])
	bc = 0x0382
	call fn05EF (retsize: 2;)
	// succ:  l080E
l080E:
	hl = 0x14FD
	Mem0[hl:byte] = 0x03
	return
	// succ:  fn07B3_exit
fn07B3_exit:


// fn0814
// Return size: 2
define fn0814
fn0814_entry:
	// succ:  l0814
l0814:
	sp = fp
	c = 0x0D
	call fn056B (retsize: 2;)
	c = 0x0A
	call fn056B (retsize: 2;)
	a = Mem0[0x14F7:byte]
	a = a - 0x03
	SZC = cond(a)
	c = a
	a = Mem0[0x14FD:byte]
	SZPC = cond(a - c)
	branch Test(ULT,C) l082E
	// succ:  l082B l082E
l082B:
	call fn07B3 (retsize: 2;)
	// succ:  l082E
l082E:
	return
	// succ:  fn0814_exit
fn0814_exit:


// fn082F
// Return size: 2
define fn082F
fn082F_entry:
	// succ:  l082F
l082F:
	sp = fp
	hl = 0x168D
	Mem0[hl:byte] = e
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = b
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = c
	hl = hl - 0x0001
	SZP = cond(hl)
	de = Mem0[sp:word16]
	sp = sp + 0x0002
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	Mem0[hl:byte] = b
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = c
	hl = hl - 0x0001
	SZP = cond(hl)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	Mem0[hl:byte] = b
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = c
	sp = sp - 0x0002
	Mem0[sp:word16] = de
	hl = 0x168F
	Mem0[hl:byte] = 0x00
	hl = hl + 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = 0x00
	hl = hl + 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = 0x00
	a = Mem0[0x168D:byte]
	a = __rol(a, 0x01)
	C = cond(a)
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l085E
	// succ:  l0856 l085E
l0856:
	hl = 0x1690
	Mem0[hl:byte] = 0x01
	goto l087E
	// succ:  l087E
l085E:
	a = Mem0[0x168D:byte]
	a = __rol(a, 0x01)
	C = cond(a)
	a = __rol(a, 0x01)
	C = cond(a)
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l086F
	// succ:  l0867 l086F
l0867:
	hl = 0x1691
	Mem0[hl:byte] = 0x01
	goto l087E
	// succ:  l087E
l086F:
	a = Mem0[0x168D:byte]
	a = __rol(a, 0x01)
	C = cond(a)
	a = __rol(a, 0x01)
	C = cond(a)
	a = __rol(a, 0x01)
	C = cond(a)
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l087E
	// succ:  l0879 l087E
l0879:
	hl = 0x168F
	Mem0[hl:byte] = 0x01
	// succ:  l087E
l087E:
	a = Mem0[0x168D:byte]
	a = __rol(a, 0x01)
	C = cond(a)
	a = __rol(a, 0x01)
	C = cond(a)
	a = __rol(a, 0x01)
	C = cond(a)
	a = __rol(a, 0x01)
	C = cond(a)
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l088E
	// succ:  l0889 l088E
l0889:
	hl = 0x168E
	Mem0[hl:byte] = 0x01
	// succ:  l088E
l088E:
	a = Mem0[0x168D:byte]
	a = a + 0x0F
	SZPC = cond(a)
	Mem0[0x168D:byte] = a
	hl = Mem0[0x1687:word16]
	b = h
	c = l
	hl = Mem0[0x1689:word16]
	v15 = de
	de = hl
	hl = v15
	call fn0990 (retsize: 2;)
	a = ~a
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l08B1
	// succ:  l08A7 l08B1
l08A7:
	hl = Mem0[0x1687:word16]
	v16 = de
	de = hl
	hl = v16
	bc = 0x024C
	call fn061B (retsize: 2;)
	// succ:  l08B1
l08B1:
	a = Mem0[0x1690:byte]
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l08DD
	// succ:  l08B8 l08DD
l08B8:
	hl = Mem0[0x168B:word16]
	a = Mem0[hl:byte]
	SZPC = cond(a - 0x00)
	branch Test(NE,Z) l08DA
	// succ:  l08C1 l08DA
l08C1:
	a = Mem0[0x151D:byte]
	SZPC = cond(a - 0x00)
	branch Test(NE,Z) l08D3
	// succ:  l08C9 l08D3
l08C9:
	hl = Mem0[0x168B:word16]
	a = Mem0[0x151F:byte]
	Mem0[hl:byte] = a
	goto l08DA
	// succ:  l08DA
l08D3:
	hl = Mem0[0x168B:word16]
	a = Mem0[0x151D:byte]
	Mem0[hl:byte] = a
	// succ:  l08DA
l08DA:
	// succ:  l08DA_thunk_fn08EC
l08DA_thunk_fn08EC:
	call fn08EC (retsize: 0;)
	return
	// succ:  fn082F_exit
l08DD:
	a = Mem0[0x1691:byte]
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l0900
	// succ:  l08E4 l0900
l08E4:
	a = Mem0[0x151E:byte]
	SZPC = cond(a - 0x00)
	branch Test(EQ,Z) l08F6
	// succ:  l08E9_thunk_fn08EC l08F6
l08E9_thunk_fn08EC:
	call fn08EC (retsize: 0;)
	return
	// succ:  fn082F_exit
l08F6:
	hl = Mem0[0x168B:word16]
	a = Mem0[0x151F:byte]
	Mem0[hl:byte] = a
	// succ:  l08FC_thunk_fn08EC
l08FC_thunk_fn08EC:
	call fn08EC (retsize: 0;)
	return
	// succ:  fn082F_exit
l0900:
	a = Mem0[0x168F:byte]
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l0920
	goto l0907
	// succ:  l0907 l0904_thunk_fn08EC
l0904_thunk_fn08EC:
	call fn08EC (retsize: 0;)
	return
	// succ:  fn082F_exit
l0907:
	a = Mem0[0x1520:byte]
	SZPC = cond(a - 0x00)
	branch Test(EQ,Z) l0919
	// succ:  l090F l0919
l090F:
	hl = Mem0[0x168B:word16]
	a = Mem0[0x1520:byte]
	Mem0[hl:byte] = a
	// succ:  l0916_thunk_fn08EC
l0916_thunk_fn08EC:
	call fn08EC (retsize: 0;)
	return
	// succ:  fn082F_exit
l0919:
	hl = Mem0[0x168B:word16]
	a = Mem0[0x151F:byte]
	Mem0[hl:byte] = a
	// succ:  l091F_thunk_fn08EC
l091F_thunk_fn08EC:
	call fn08EC (retsize: 0;)
	return
	// succ:  fn082F_exit
fn082F_exit:


// fn08EC
// Return size: 0
define fn08EC
fn08EC_entry:
	// succ:  l08EC
l08EC:
	sp = fp
	hl = Mem0[0x168B:word16]
	a = Mem0[0x151E:byte]
	Mem0[hl:byte] = a
	// succ:  l08FD
l08FD:
	// succ:  l0920
l0920:
	de = 0x0080
	c = 0x1A
	F_DMAOFF(de)
	a = Mem0[0x168D:byte]
	// succ:  l0928_thunk_fn092A
l0928_thunk_fn092A:
	call fn092A (retsize: 0;)
	return
	// succ:  fn08EC_exit
fn08EC_exit:


// fn092A
// Return size: 0
define fn092A
fn092A_entry:
	// succ:  l092A
l092A:
	sp = fp
	d = 0xFE
	branch Test(NE,Z) l092D_thunk_fn096E
	goto l092D_thunk_fn0930
	// succ:  l092D_thunk_fn0930 l092D_thunk_fn096E
l092A:
	SZPC = cond(a - 0x00)
	branch Test(NE,Z) l096E
	// succ:  l092C_thunk_fn0930 l092C_thunk_fn096E
l092C_thunk_fn0930:
	call fn0930 (retsize: 0;)
	return
	// succ:  fn092A_exit
l092C_thunk_fn096E:
	call fn096E (retsize: 0;)
	return
	// succ:  fn092A_exit
l092D_thunk_fn0930:
	call fn0930 (retsize: 0;)
	return
	// succ:  fn092A_exit
l092D_thunk_fn096E:
	call fn096E (retsize: 0;)
	return
	// succ:  fn092A_exit
fn092A_exit:


// fn0930
// Return size: 0
define fn0930
fn0930_entry:
	// succ:  l0930
l0930:
	sp = v3
	de = 0x0000
	c = 0x0C
	S_BDOSVER(out b, out h, out a, out l)
	a = a - 0x30
	SZC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	a = ~a
	hl = 0x168E
	a = a & Mem0[hl:byte]
	SZ = cond(a)
	C = false
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l0953
	// succ:  l0944 l0953
l0944:
	bc = 0x0007
	hl = Mem0[0x168B:word16]
	hl = hl + bc
	SZPC = cond(hl)
	a = 0x80
	a = a | Mem0[hl:byte]
	SZ = cond(a)
	C = false
	hl = Mem0[0x168B:word16]
	hl = hl + bc
	SZPC = cond(hl)
	Mem0[hl:byte] = a
	// succ:  l0953
l0953:
	hl = Mem0[0x168B:word16]
	v16 = de
	de = hl
	hl = v16
	c = 0x0F
	a = F_OPEN(de)
	SZPC = cond(a - 0xFF)
	branch Test(NE,Z) l096B
	// succ:  l0961 l096B
l0961:
	hl = Mem0[0x1687:word16]
	v18 = de
	de = hl
	hl = v18
	bc = 0x0236
	call fn061B (retsize: 2;)
	// succ:  l096B
l096B:
	// succ:  l096B_thunk_fn096E
l096B_thunk_fn096E:
	call fn096E (retsize: 0;)
	return
	// succ:  fn0930_exit
fn0930_exit:


// fn096E
// Return size: 0
define fn096E
fn096E_entry:
	// succ:  l096E
l096E:
	sp = v3
	hl = Mem0[0x168B:word16]
	v6 = de
	de = hl
	hl = v6
	c = 0x13
	a = F_DELETE(de)
	hl = Mem0[0x168B:word16]
	v9 = de
	de = hl
	hl = v9
	c = 0x16
	a = F_MAKE(de)
	SZPC = cond(a - 0xFF)
	branch Test(NE,Z) l098F
	// succ:  l0985 l098F
l0985:
	hl = Mem0[0x1687:word16]
	v12 = de
	de = hl
	hl = v12
	bc = 0x0287
	call fn061B (retsize: 2;)
	// succ:  l098F
l098F:
	return
	// succ:  fn096E_exit
fn096E_exit:


// fn0990
// Return size: 2
define fn0990
fn0990_entry:
	// succ:  l0990
l0990:
	sp = fp
	hl = 0x1695
	Mem0[hl:byte] = d
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = e
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = b
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = c
	c = 0x0B
	sp = sp - 0x0002
	Mem0[sp:word16] = bc
	hl = Mem0[0x168B:word16]
	hl = hl + 0x0001
	SZP = cond(hl)
	b = h
	c = l
	e = 0x20
	call fn0390 (retsize: 2;)
	hl = Mem0[0x1692:word16]
	a = Mem0[hl:byte]
	Mem0[0x1696:byte] = a
	hl = Mem0[0x1692:word16]
	hl = hl + 0x0001
	SZP = cond(hl)
	Mem0[0x1692:word16] = hl
	hl = hl + 0x0001
	SZP = cond(hl)
	a = Mem0[hl:byte]
	SZPC = cond(a - 0x3A)
	branch Test(NE,Z) l0A0C
	// succ:  l09BD l0A0C
l09BD:
	hl = Mem0[0x1692:word16]
	c = Mem0[hl:byte]
	call fn03CB (retsize: 2;)
	hl = Mem0[0x1692:word16]
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	a = Mem0[hl:byte]
	a = a - 0x40
	SZC = cond(a)
	a = a - 0x01
	SZC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a | c
	SZ = cond(a)
	C = false
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	a = 0x02
	hl = 0x1696
	a = a - Mem0[hl:byte]
	SZC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a & c
	SZ = cond(a)
	C = false
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l0A06
	// succ:  l09E0 l0A06
l09E0:
	hl = Mem0[0x1692:word16]
	a = 0x1F
	a = a & Mem0[hl:byte]
	SZ = cond(a)
	C = false
	hl = Mem0[0x168B:word16]
	Mem0[hl:byte] = a
	hl = Mem0[0x168B:word16]
	a = 0x10
	SZPC = cond(a - Mem0[hl:byte])
	branch Test(UGE,C) l09F6
	// succ:  l09F3 l09F6
l09F3:
	a = 0x00
	return
	// succ:  fn0990_exit
l09F6:
	hl = Mem0[0x1692:word16]
	hl = hl + 0x0001
	SZP = cond(hl)
	hl = hl + 0x0001
	SZP = cond(hl)
	Mem0[0x1692:word16] = hl
	hl = 0x1696
	Mem0[hl:byte] = Mem0[hl:byte] - 0x01
	SZP = cond(Mem0[hl:byte])
	Mem0[hl:byte] = Mem0[hl:byte] - 0x01
	SZP = cond(Mem0[hl:byte])
	goto l0A09
	// succ:  l0A09
l0A06:
	a = 0x00
	return
	// succ:  fn0990_exit
l0A09:
	goto l0A11
	// succ:  l0A11
l0A0C:
	hl = Mem0[0x168B:word16]
	Mem0[hl:byte] = 0x00
	// succ:  l0A11
l0A11:
	hl = 0x1697
	Mem0[hl:byte] = 0x00
	// succ:  l0A16
l0A16:
	a = 0x07
	hl = 0x1697
	a = a - Mem0[hl:byte]
	SZC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	a = ~a
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	call fn0B74 (retsize: 2;)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a & c
	SZ = cond(a)
	C = false
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l0A53
	// succ:  l0A29 l0A53
l0A29:
	hl = Mem0[0x1697:word16]
	h = 0x00
	v19 = de
	de = hl
	hl = v19
	hl = Mem0[0x1692:word16]
	hl = hl + de
	SZPC = cond(hl)
	sp = sp - 0x0002
	Mem0[sp:word16] = hl
	hl = Mem0[0x1697:word16]
	h = 0x00
	bc = 0x0001
	hl = hl + bc
	SZPC = cond(hl)
	v21 = de
	de = hl
	hl = v21
	hl = Mem0[0x168B:word16]
	hl = hl + de
	SZPC = cond(hl)
	de = Mem0[sp:word16]
	sp = sp + 0x0002
	a = Mem0[de:byte]
	Mem0[hl:byte] = a
	SZPC = cond(a - 0x2A)
	branch Test(NE,Z) l0A4D
	// succ:  l0A4A l0A4D
l0A4A:
	a = 0x00
	return
	// succ:  fn0990_exit
l0A4D:
	call fn0B91 (retsize: 2;)
	goto l0A16
	// succ:  l0A16
l0A53:
	a = 0x01
	hl = 0x1696
	a = a - Mem0[hl:byte]
	SZC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	hl = hl + 0x0001
	SZP = cond(hl)
	c = Mem0[hl:byte]
	b = 0x00
	hl = Mem0[0x1692:word16]
	hl = hl + bc
	SZPC = cond(hl)
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	a = Mem0[hl:byte]
	a = a - 0x2E
	SZC = cond(a)
	a = a - 0x01
	SZC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a & c
	SZ = cond(a)
	C = false
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l0AA3
	// succ:  l0A70 l0AA3
l0A70:
	call fn0B91 (retsize: 2;)
	a = 0x03
	hl = 0x1696
	SZPC = cond(a - Mem0[hl:byte])
	branch Test(UGE,C) l0A7F
	// succ:  l0A7C l0A7F
l0A7C:
	a = 0x00
	return
	// succ:  fn0990_exit
l0A7F:
	hl = Mem0[0x1696:word16]
	sp = sp - 0x0002
	Mem0[sp:word16] = hl
	hl = Mem0[0x1697:word16]
	h = 0x00
	v24 = de
	de = hl
	hl = v24
	hl = Mem0[0x1692:word16]
	hl = hl + de
	SZPC = cond(hl)
	bc = 0x0009
	sp = sp - 0x0002
	Mem0[sp:word16] = hl
	hl = Mem0[0x168B:word16]
	hl = hl + bc
	SZPC = cond(hl)
	v25 = de
	de = hl
	hl = v25
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	hl = Mem0[sp:word16]
	sp = sp + 0x0002
	// succ:  l0A98
l0A98:
	a = Mem0[bc:byte]
	Mem0[de:byte] = a
	bc = bc + 0x0001
	SZP = cond(bc)
	de = de + 0x0001
	SZP = cond(de)
	l = l - 0x01
	SZP = cond(l)
	branch Test(NE,Z) l0A98
	// succ:  l0AA0 l0A98
l0AA0:
	goto l0AE5
	// succ:  l0AE5
l0AA3:
	a = Mem0[0x1696:byte]
	a = a - 0x00
	SZC = cond(a)
	a = a - 0x01
	SZC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	hl = Mem0[0x1697:word16]
	h = 0x00
	v22 = de
	de = hl
	hl = v22
	hl = Mem0[0x1692:word16]
	hl = hl + de
	SZPC = cond(hl)
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	a = Mem0[hl:byte]
	a = a - 0x2E
	SZC = cond(a)
	a = a - 0x01
	SZC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a | c
	SZ = cond(a)
	C = false
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l0AE2
	// succ:  l0AC3 l0AE2
l0AC3:
	hl = Mem0[0x1694:word16]
	l = Mem0[hl:byte]
	sp = sp - 0x0002
	Mem0[sp:word16] = hl
	hl = Mem0[0x1694:word16]
	hl = hl + 0x0001
	SZP = cond(hl)
	bc = 0x0009
	sp = sp - 0x0002
	Mem0[sp:word16] = hl
	hl = Mem0[0x168B:word16]
	hl = hl + bc
	SZPC = cond(hl)
	v23 = de
	de = hl
	hl = v23
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	hl = Mem0[sp:word16]
	sp = sp + 0x0002
	// succ:  l0AD7
l0AD7:
	a = Mem0[bc:byte]
	Mem0[de:byte] = a
	bc = bc + 0x0001
	SZP = cond(bc)
	de = de + 0x0001
	SZP = cond(de)
	l = l - 0x01
	SZP = cond(l)
	branch Test(NE,Z) l0AD7
	// succ:  l0ADF l0AD7
l0ADF:
	goto l0AE5
	// succ:  l0AE5
l0AE2:
	a = 0x00
	return
	// succ:  fn0990_exit
l0AE5:
	c = 0x03
	sp = sp - 0x0002
	Mem0[sp:word16] = bc
	bc = 0x000C
	hl = Mem0[0x168B:word16]
	hl = hl + bc
	SZPC = cond(hl)
	b = h
	c = l
	e = 0x00
	call fn0390 (retsize: 2;)
	bc = 0x0020
	hl = Mem0[0x168B:word16]
	hl = hl + bc
	SZPC = cond(hl)
	Mem0[hl:byte] = 0x00
	hl = 0x1697
	Mem0[hl:byte] = 0x00
	// succ:  l0B04
l0B04:
	a = 0x07
	hl = 0x1697
	SZPC = cond(a - Mem0[hl:byte])
	branch Test(ULT,C) l0B38
	// succ:  l0B0D l0B38
l0B0D:
	hl = Mem0[0x1697:word16]
	h = 0x00
	bc = 0x0001
	hl = hl + bc
	SZPC = cond(hl)
	v26 = de
	de = hl
	hl = v26
	hl = Mem0[0x168B:word16]
	hl = hl + de
	SZPC = cond(hl)
	c = Mem0[hl:byte]
	call fn03E6 (retsize: 2;)
	hl = Mem0[0x1697:word16]
	h = 0x00
	bc = 0x0001
	hl = hl + bc
	SZPC = cond(hl)
	v27 = de
	de = hl
	hl = v27
	hl = Mem0[0x168B:word16]
	hl = hl + de
	SZPC = cond(hl)
	Mem0[hl:byte] = a
	a = Mem0[0x1697:byte]
	a = a + 0x01
	SZP = cond(a)
	Mem0[0x1697:byte] = a
	branch Test(NE,Z) l0B04
	// succ:  l0B38 l0B04
l0B38:
	hl = 0x1697
	Mem0[hl:byte] = 0x00
	// succ:  l0B3D
l0B3D:
	a = 0x02
	hl = 0x1697
	SZPC = cond(a - Mem0[hl:byte])
	branch Test(ULT,C) l0B71
	// succ:  l0B46 l0B71
l0B46:
	hl = Mem0[0x1697:word16]
	h = 0x00
	bc = 0x0009
	hl = hl + bc
	SZPC = cond(hl)
	v28 = de
	de = hl
	hl = v28
	hl = Mem0[0x168B:word16]
	hl = hl + de
	SZPC = cond(hl)
	c = Mem0[hl:byte]
	call fn03E6 (retsize: 2;)
	hl = Mem0[0x1697:word16]
	h = 0x00
	bc = 0x0009
	hl = hl + bc
	SZPC = cond(hl)
	v29 = de
	de = hl
	hl = v29
	hl = Mem0[0x168B:word16]
	hl = hl + de
	SZPC = cond(hl)
	Mem0[hl:byte] = a
	a = Mem0[0x1697:byte]
	a = a + 0x01
	SZP = cond(a)
	Mem0[0x1697:byte] = a
	branch Test(NE,Z) l0B3D
	// succ:  l0B71 l0B3D
l0B71:
	a = 0x01
	return
	// succ:  fn0990_exit
fn0990_exit:


// fn0B74
// Return size: 2
define fn0B74
fn0B74_entry:
	// succ:  l0B74
l0B74:
	sp = fp
	hl = Mem0[0x1697:word16]
	h = 0x00
	v5 = de
	de = hl
	hl = v5
	hl = Mem0[0x1692:word16]
	hl = hl + de
	SZPC = cond(hl)
	a = Mem0[hl:byte]
	a = a - 0x2E
	SZC = cond(a)
	a = a + 0xFF
	SZPC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	a = Mem0[0x1696:byte]
	a = a - 0x00
	SZC = cond(a)
	a = a + 0xFF
	SZPC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a & c
	SZ = cond(a)
	C = false
	return
	// succ:  fn0B74_exit
fn0B74_exit:


// fn0B91
// Return size: 2
define fn0B91
fn0B91_entry:
	// succ:  l0B91
l0B91:
	sp = fp
	hl = 0x1697
	Mem0[hl:byte] = Mem0[hl:byte] + 0x01
	SZP = cond(Mem0[hl:byte])
	hl = hl - 0x0001
	SZP = cond(hl)
	Mem0[hl:byte] = Mem0[hl:byte] - 0x01
	SZP = cond(Mem0[hl:byte])
	return
	// succ:  fn0B91_exit
fn0B91_exit:


// fn0BE4
// Return size: 2
define fn0BE4
fn0BE4_entry:
	goto l0BE4
	// succ:  l0BE4
l0105:
	call fn1729 (retsize: 2;)
	return
	// succ:  fn0BE4_exit
l020A:
	call fn172D (retsize: 2;)
	return
	// succ:  fn0BE4_exit
l0224:
	call fn177D (retsize: 2;)
	return
	// succ:  fn0BE4_exit
l0BE4:
	sp = fp
	a = Mem0[0x138A:byte]
	a = a - 0x01
	SZC = cond(a)
	a = a + 0xFF
	SZPC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	a = Mem0[0x14F3:byte]
	a = a - 0x02
	SZC = cond(a)
	a = a - 0x01
	SZC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a & c
	SZ = cond(a)
	C = false
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l0C1A
	// succ:  l0BFC l0C1A
l0BFC:
	a = Mem0[0x14F6:byte]
	SZPC = cond(a - 0x01)
	branch Test(EQ,Z) l0C07
	// succ:  l0C04 l0C07
l0C04:
	call fn0814 (retsize: 2;)
	// succ:  l0C07
l0C07:
	bc = 0x0296
	call fn05CE (retsize: 2;)
	a = Mem0[0x138A:byte]
	a = a - 0x01
	SZP = cond(a)
	c = a
	b = 0x00
	call fn06CE (retsize: 2;)
	call fn0814 (retsize: 2;)
	// succ:  l0C1A
l0C1A:
	hl = Mem0[0x1388:word16]
	sp = hl
	a = Mem0[0x138A:byte]
	a = a + 0x30
	SZPC = cond(a)
	Mem0[0x1645:byte] = a
	bc = 0x0231
	sp = sp - 0x0002
	Mem0[sp:word16] = bc
	bc = 0x1642
	sp = sp - 0x0002
	Mem0[sp:word16] = bc
	e = 0x10
	bc = 0x005C
	call fn082F (retsize: 2;)
	bc = 0x005C
	sp = sp - 0x0002
	Mem0[sp:word16] = bc
	bc = 0x0108
	de = 0x0103
	call fn1346 (retsize: 2;)
	sp = sp + 0xFFFE
	c = 0x07
	call fn1326 (retsize: 2;)
	v16 = de
	de = hl
	hl = v16
	hl = Mem0[0x0108:word16]
	b = h
	c = l
	call fn040D (retsize: 2;)
	a = Mem0[0x138A:byte]
	a = a - 0x00
	SZC = cond(a)
	a = a - 0x01
	SZC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	a = 0x03
	hl = 0x138A
	a = a - Mem0[hl:byte]
	SZC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a | c
	SZ = cond(a)
	C = false
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l0C71
	// succ:  l0C68 l0C71
l0C68:
	de = 0x0000
	bc = 0x0001
	call fn075C (retsize: 2;)
	// succ:  l0C71
l0C71:
	a = Mem0[0x138A:byte]
	SZPC = cond(a - 0x01)
	branch Test(NE,Z) l0C7C
	// succ:  l0C79 l0C7C
l0C79:
	goto l020A
	// succ:  l020A
l0C7C:
	a = Mem0[0x138A:byte]
	SZPC = cond(a - 0x02)
	branch Test(NE,Z) l0C87
	// succ:  l0C84 l0C87
l0C84:
	goto l0224
	// succ:  l0224
l0C87:
	a = Mem0[0x138A:byte]
	SZPC = cond(a - 0x03)
	branch Test(NE,Z) l0C92
	// succ:  l0C8F l0C92
l0C8F:
	goto l0105
	// succ:  l0105
l0C92:
	return
	// succ:  fn0BE4_exit
fn0BE4_exit:


// fn0C93
// Return size: 2
define fn0C93
fn0C93_entry:
	// succ:  l0C93
l0C93:
	sp = fp
	a = Mem0[0x138D:byte]
	hl = 0x138C
	a = a + Mem0[hl:byte]
	SZPC = cond(a)
	c = Mem0[hl:byte]
	b = 0x00
	hl = 0x138C
	hl = hl + bc
	SZPC = cond(hl)
	a = a + Mem0[hl:byte]
	SZPC = cond(a)
	a = a + 0x7F
	SZPC = cond(a)
	return
	// succ:  fn0C93_exit
fn0C93_exit:


// fn0D64
// Return size: 2
define fn0D64
fn0D64_entry:
	// succ:  l0D64
l0D64:
	sp = fp
	bc = 0x0009
	hl = Mem0[0x1521:word16]
	hl = hl + bc
	SZPC = cond(hl)
	a = Mem0[hl:byte]
	a = a | a
	SZ = cond(a)
	C = false
	a = __rcr(a, 0x01, C)
	C = cond(a)
	return
	// succ:  fn0D64_exit
fn0D64_exit:


// fn0D6F
// Return size: 2
define fn0D6F
fn0D6F_entry:
	// succ:  l0D6F
l0D6F:
	sp = fp
	bc = 0x0009
	hl = Mem0[0x1521:word16]
	hl = hl + bc
	SZPC = cond(hl)
	a = 0x02
	a = a | Mem0[hl:byte]
	SZ = cond(a)
	C = false
	Mem0[hl:byte] = a
	return
	// succ:  fn0D6F_exit
fn0D6F_exit:


// fn0D84
// Return size: 2
define fn0D84
fn0D84_entry:
	// succ:  l0D84
l0D84:
	sp = fp
	call fn0D64 (retsize: 2;)
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l0D94
	// succ:  l0D8B l0D94
l0D8B:
	de = 0x0000
	bc = 0x0002
	call fn075C (retsize: 2;)
	// succ:  l0D94
l0D94:
	bc = 0x0009
	hl = Mem0[0x1521:word16]
	hl = hl + bc
	SZPC = cond(hl)
	a = 0x01
	a = a | Mem0[hl:byte]
	SZ = cond(a)
	C = false
	Mem0[hl:byte] = a
	return
	// succ:  fn0D84_exit
fn0D84_exit:


// fn0DB9
// Return size: 2
define fn0DB9
fn0DB9_entry:
	// succ:  l0DB9
l0DB9:
	sp = fp
	bc = 0x0009
	hl = Mem0[0x1521:word16]
	hl = hl + bc
	SZPC = cond(hl)
	a = Mem0[hl:byte]
	a = a + 0xFC
	SZPC = cond(a)
	a = __rcr(a, 0x01, C)
	C = cond(a)
	a = __rcr(a, 0x01, C)
	C = cond(a)
	a = __rcr(a, 0x01, C)
	C = cond(a)
	return
	// succ:  fn0DB9_exit
fn0DB9_exit:


// fn0DCB
// Return size: 2
define fn0DCB
fn0DCB_entry:
	// succ:  l0DCB
l0DCB:
	sp = fp
	bc = 0x0009
	hl = Mem0[0x1521:word16]
	hl = hl + bc
	SZPC = cond(hl)
	a = 0x08
	a = a | Mem0[hl:byte]
	SZ = cond(a)
	C = false
	Mem0[hl:byte] = a
	return
	// succ:  fn0DCB_exit
fn0DCB_exit:


// fn0E63
// Return size: 2
define fn0E63
fn0E63_entry:
	// succ:  l0E63
l0E63:
	sp = fp
	hl = 0x16A6
	Mem0[hl:byte] = c
	call fn0C93 (retsize: 2;)
	c = a
	b = 0x00
	hl = 0x152C
	hl = hl + bc
	SZPC = cond(hl)
	hl = hl + bc
	SZPC = cond(hl)
	e = Mem0[hl:byte]
	hl = hl + 0x0001
	SZP = cond(hl)
	d = Mem0[hl:byte]
	v12 = de
	de = hl
	hl = v12
	Mem0[0x1521:word16] = hl
	// succ:  l0E79
l0E79:
	a = 0x00
	de = 0x1521
	call fn1353 (retsize: 2;)
	a = a | l
	SZ = cond(a)
	C = false
	branch Test(EQ,Z) l0EA8
	// succ:  l0E85 l0EA8
l0E85:
	hl = Mem0[0x1521:word16]
	hl = hl + 0x0001
	SZP = cond(hl)
	hl = hl + 0x0001
	SZP = cond(hl)
	a = Mem0[0x16A6:byte]
	SZPC = cond(a - Mem0[hl:byte])
	branch Test(NE,Z) l0E9B
	// succ:  l0E91 l0E9B
l0E91:
	call fn0EAB (retsize: 2;)
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l0E9B
	// succ:  l0E98 l0E9B
l0E98:
	a = 0x01
	return
	// succ:  fn0E63_exit
l0E9B:
	hl = Mem0[0x1521:word16]
	e = Mem0[hl:byte]
	hl = hl + 0x0001
	SZP = cond(hl)
	d = Mem0[hl:byte]
	v18 = de
	de = hl
	hl = v18
	Mem0[0x1521:word16] = hl
	goto l0E79
	// succ:  l0E79
l0EA8:
	a = 0x00
	return
	// succ:  fn0E63_exit
fn0E63_exit:


// fn0EAB
// Return size: 2
define fn0EAB
fn0EAB_entry:
	// succ:  l0EAB
l0EAB:
	sp = fp
	hl = 0x16A7
	Mem0[hl:byte] = 0x00
	// succ:  l0EB0
l0EB0:
	a = Mem0[0x138C:byte]
	hl = 0x16A7
	SZPC = cond(a - Mem0[hl:byte])
	branch Test(ULT,C) l0EE2
	// succ:  l0EBA l0EE2
l0EBA:
	hl = Mem0[0x16A7:word16]
	h = 0x00
	bc = 0x000A
	hl = hl + bc
	SZPC = cond(hl)
	v9 = de
	de = hl
	hl = v9
	hl = Mem0[0x1521:word16]
	hl = hl + de
	SZPC = cond(hl)
	sp = sp - 0x0002
	Mem0[sp:word16] = hl
	hl = Mem0[0x16A7:word16]
	h = 0x00
	bc = 0x138C
	hl = hl + bc
	SZPC = cond(hl)
	de = Mem0[sp:word16]
	sp = sp + 0x0002
	a = Mem0[de:byte]
	SZPC = cond(a - Mem0[hl:byte])
	branch Test(EQ,Z) l0EDB
	// succ:  l0ED8 l0EDB
l0ED8:
	a = 0x00
	return
	// succ:  fn0EAB_exit
l0EDB:
	hl = 0x16A7
	Mem0[hl:byte] = Mem0[hl:byte] + 0x01
	SZP = cond(Mem0[hl:byte])
	goto l0EB0
	// succ:  l0EB0
l0EE2:
	a = 0x01
	return
	// succ:  fn0EAB_exit
fn0EAB_exit:


// fn0FB8
// Return size: 2
define fn0FB8
fn0FB8_entry:
	// succ:  l0FB8
l0FB8:
	sp = fp
	hl = Mem0[0x138C:word16]
	h = 0x00
	bc = 0x000B
	hl = hl + bc
	SZPC = cond(hl)
	a = l
	return
	// succ:  fn0FB8_exit
fn0FB8_exit:


// fn100A
// Return size: 2
define fn100A
fn100A_entry:
	goto l100A
	// succ:  l100A
l1002:
	a = Mem0[0x16A8:byte]
	a = a - 0x20
	SZC = cond(a)
	a = a + 0xFF
	SZPC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	// succ:  l100A
l100A:
	sp = fp
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	a = Mem0[0x16A8:byte]
	a = a + 0x5F
	SZPC = cond(a)
	a = a - 0x5B
	SZC = cond(a)
	a = a + 0xFF
	SZPC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a & c
	SZ = cond(a)
	C = false
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	a = Mem0[0x16A8:byte]
	a = a - 0x00
	SZC = cond(a)
	a = a + 0xFF
	SZPC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a & c
	SZ = cond(a)
	C = false
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	a = Mem0[0x14FF:byte]
	a = a - 0x0E
	SZC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a & c
	SZ = cond(a)
	C = false
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l104D
	// succ:  l1032 l104D
l1032:
	a = Mem0[0x14FF:byte]
	a = a + 0x01
	SZP = cond(a)
	Mem0[0x14FF:byte] = a
	c = a
	b = 0x00
	hl = 0x14FF
	hl = hl + bc
	SZPC = cond(hl)
	a = Mem0[0x16A8:byte]
	Mem0[hl:byte] = a
	call fn045B (retsize: 2;)
	Mem0[0x16A8:byte] = a
	goto l1002
	// succ:  l1002
l104D:
	a = Mem0[0x14FF:byte]
	SZPC = cond(a - 0x00)
	branch Test(NE,Z) l105E
	// succ:  l1052_thunk_fn1055 l1052_thunk_fn1055
l1052_thunk_fn1055:
	call fn1055 (retsize: 0;)
	return
	// succ:  fn100A_exit
l1052_thunk_fn1055:
	call fn1055 (retsize: 0;)
	return
	// succ:  fn100A_exit
fn100A_exit:


// fn1055
// Return size: 0
define fn1055
fn1055_entry:
	// succ:  l1055
l1055:
	sp = fp
	bc = 0x0369
	call fn05CE (retsize: 2;)
	call fn0387 (retsize: 2;)
	// succ:  l105B_thunk_fn1078
l105B_thunk_fn1078:
	call fn1078 (retsize: 0;)
	return
	// succ:  fn1055_exit
fn1055_exit:


// fn106E
// Return size: 0
define fn106E
fn106E_entry:
	// succ:  l106E
l106E:
	sp = fp
	a = a + 0xFF
	SZPC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a & c
	SZ = cond(a)
	C = false
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l1075_thunk_fn1081
	// succ:  l1075_thunk_fn1078 l1075_thunk_fn1081
l1075_thunk_fn1078:
	call fn1078 (retsize: 0;)
	return
	// succ:  fn106E_exit
l1075_thunk_fn1081:
	call fn1081 (retsize: 0;)
	return
	// succ:  fn106E_exit
fn106E_exit:


// fn1078
// Return size: 0
define fn1078
fn1078_entry:
	goto l1078
	// succ:  l1078
l105E:
	a = Mem0[0x16A8:byte]
	a = a + 0x5F
	SZPC = cond(a)
	a = a - 0x5B
	SZC = cond(a)
	a = a + 0xFF
	SZPC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	a = Mem0[0x16A8:byte]
	a = a - 0x00
	SZC = cond(a)
	a = a + 0xFF
	SZPC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a & c
	SZ = cond(a)
	C = false
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l1081
	goto l1078
	// succ:  l1078 l1075_thunk_fn1081
l1075_thunk_fn1081:
	call fn1081 (retsize: 0;)
	return
	// succ:  fn1078_exit
l1078:
	sp = v3
	call fn045B (retsize: 2;)
	Mem0[0x16A8:byte] = a
	goto l105E
	// succ:  l105E
fn1078_exit:


// fn1081
// Return size: 0
define fn1081
fn1081_entry:
	// succ:  l1081
l1081:
	sp = v3
	call fn045B (retsize: 2;)
	Mem0[0x16A8:byte] = a
	// succ:  l1087
l1087:
	a = Mem0[0x16A8:byte]
	a = a + 0x5F
	SZPC = cond(a)
	a = a - 0x5D
	SZC = cond(a)
	a = a + 0xFF
	SZPC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	a = Mem0[0x16A8:byte]
	a = a - 0x00
	SZC = cond(a)
	a = a + 0xFF
	SZPC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a & c
	SZ = cond(a)
	C = false
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l11FD
	// succ:  l10A1 l11FD
l10A1:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x20)
	branch Test(NE,Z) l10AC
	// succ:  l10A9 l10AC
l10A9:
	call fn1262 (retsize: 2;)
	// succ:  l10AC
l10AC:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x42)
	branch Test(NE,Z) l10BC
	// succ:  l10B4 l10BC
l10B4:
	hl = 0x14F3
	Mem0[hl:byte] = 0x00
	goto l11B5
	// succ:  l11B5
l10BC:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x43)
	branch Test(NE,Z) l10CD
	// succ:  l10C4 l10CD
l10C4:
	call fn12D8 (retsize: 2;)
	Mem0[0x151D:byte] = a
	goto l11B5
	// succ:  l11B5
l10CD:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x44)
	branch Test(NE,Z) l10DE
	// succ:  l10D5 l10DE
l10D5:
	call fn1279 (retsize: 2;)
	Mem0[0x138B:byte] = a
	goto l11B5
	// succ:  l11B5
l10DE:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x46)
	branch Test(NE,Z) l10EE
	// succ:  l10E6 l10EE
l10E6:
	hl = 0x14F3
	Mem0[hl:byte] = 0x04
	goto l11B5
	// succ:  l11B5
l10EE:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x49)
	branch Test(NE,Z) l10FE
	// succ:  l10F6 l10FE
l10F6:
	hl = 0x14FA
	Mem0[hl:byte] = 0x01
	goto l11B5
	// succ:  l11B5
l10FE:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x4C)
	branch Test(NE,Z) l110F
	// succ:  l1106 l110F
l1106:
	call fn1279 (retsize: 2;)
	Mem0[0x14F7:byte] = a
	goto l11B5
	// succ:  l11B5
l110F:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x4E)
	branch Test(NE,Z) l111F
	// succ:  l1117 l111F
l1117:
	hl = 0x14FB
	Mem0[hl:byte] = 0x01
	goto l11B5
	// succ:  l11B5
l111F:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x4F)
	branch Test(NE,Z) l112F
	// succ:  l1127 l112F
l1127:
	hl = 0x14EF
	Mem0[hl:byte] = 0x00
	goto l11B5
	// succ:  l11B5
l112F:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x50)
	branch Test(NE,Z) l113F
	// succ:  l1137 l113F
l1137:
	hl = 0x14F3
	Mem0[hl:byte] = 0x01
	goto l11B5
	// succ:  l11B5
l113F:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x52)
	branch Test(NE,Z) l1150
	// succ:  l1147 l1150
l1147:
	call fn12D8 (retsize: 2;)
	Mem0[0x1520:byte] = a
	goto l11B5
	// succ:  l11B5
l1150:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x53)
	branch Test(NE,Z) l1160
	// succ:  l1158 l1160
l1158:
	hl = 0x14F0
	Mem0[hl:byte] = 0x01
	goto l11B5
	// succ:  l11B5
l1160:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x54)
	branch Test(NE,Z) l1170
	// succ:  l1168 l1170
l1168:
	hl = 0x14F5
	Mem0[hl:byte] = 0x01
	goto l11B5
	// succ:  l11B5
l1170:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x55)
	branch Test(NE,Z) l1180
	// succ:  l1178 l1180
l1178:
	hl = 0x1529
	Mem0[hl:byte] = 0x01
	goto l11B5
	// succ:  l11B5
l1180:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x56)
	branch Test(NE,Z) l1190
	// succ:  l1188 l1190
l1188:
	hl = 0x14FC
	Mem0[hl:byte] = 0x01
	goto l11B5
	// succ:  l11B5
l1190:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x57)
	branch Test(NE,Z) l11A1
	// succ:  l1198 l11A1
l1198:
	call fn1279 (retsize: 2;)
	Mem0[0x14F8:byte] = a
	goto l11B5
	// succ:  l11B5
l11A1:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x58)
	branch Test(NE,Z) l11B2
	// succ:  l11A9 l11B2
l11A9:
	call fn12D8 (retsize: 2;)
	Mem0[0x151E:byte] = a
	goto l11B5
	// succ:  l11B5
l11B2:
	call fn1229 (retsize: 2;)
	// succ:  l11B5
l11B5:
	call fn045B (retsize: 2;)
	Mem0[0x16A8:byte] = a
	call fn1262 (retsize: 2;)
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x2C)
	branch Test(NE,Z) l11CF
	// succ:  l11C6 l11CF
l11C6:
	call fn045B (retsize: 2;)
	Mem0[0x16A8:byte] = a
	goto l11FA
	// succ:  l11FA
l11CF:
	a = Mem0[0x16A8:byte]
	a = a + 0x5F
	SZPC = cond(a)
	SZPC = cond(a - 0x5D)
	branch Test(NE,Z) l11FA
	// succ:  l11D9 l11FA
l11D9:
	call fn045B (retsize: 2;)
	Mem0[0x16A8:byte] = a
	call fn1262 (retsize: 2;)
	a = Mem0[0x16A8:byte]
	a = a + 0x5F
	SZPC = cond(a)
	SZPC = cond(a - 0x5B)
	branch Test(EQ,Z) l11F4
	// succ:  l11EC l11F4
l11EC:
	hl = 0x16A8
	Mem0[hl:byte] = 0x5D
	goto l11FA
	// succ:  l11FA
l11F4:
	call fn045B (retsize: 2;)
	Mem0[0x16A8:byte] = a
	// succ:  l11FA
l11FA:
	goto l1087
	// succ:  l1087
l11FD:
	a = Mem0[0x14F3:byte]
	SZPC = cond(a - 0x01)
	branch Test(NE,Z) l120F
	// succ:  l1205 l120F
l1205:
	c = 0x0C
	call fn056B (retsize: 2;)
	hl = 0x14F9
	Mem0[hl:byte] = 0x01
	// succ:  l120F
l120F:
	a = Mem0[0x14F3:byte]
	Mem0[0x14F4:byte] = a
	a = Mem0[0x14F7:byte]
	a = a + 0x01
	SZP = cond(a)
	Mem0[0x14FD:byte] = a
	hl = 0x138A
	Mem0[hl:byte] = 0x01
	call fn07B3 (retsize: 2;)
	call fn0BE4 (retsize: 2;)
	__ei()
	__hlt()
	hl = 0x14F3
	Mem0[hl:byte] = 0x02
	bc = 0x02D1
	call fn05CE (retsize: 2;)
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x00)
	branch Test(EQ,Z) l125E
	// succ:  l1239_thunk_fn123C l1239_thunk_fn123C
l1239_thunk_fn123C:
	call fn123C (retsize: 0;)
	return
	// succ:  fn1081_exit
l1239_thunk_fn123C:
	call fn123C (retsize: 0;)
	return
	// succ:  fn1081_exit
fn1081_exit:


// fn1229
// Return size: 0
define fn1229
fn1229_entry:
	// succ:  l1229
l1229:
	sp = fp
	hl = 0x14F3
	Mem0[hl:byte] = 0x02
	bc = 0x02D1
	call fn05CE (retsize: 2;)
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x00)
	branch Test(EQ,Z) l125E_in_fn1229
	// succ:  l1239_thunk_fn123C l125E_in_fn1229
l1239_thunk_fn123C:
	call fn123C (retsize: 0;)
	return
	// succ:  fn1229_exit
l125E_in_fn1229:
	call fn0387 (retsize: 2;)
	return
	// succ:  fn1229_exit
fn1229_exit:


// fn123C
// Return size: 0
define fn123C
fn123C_entry:
	// succ:  l123C
l123C:
	sp = v3
	c = 0x3E
	call fn056B (retsize: 2;)
	c = 0x20
	call fn056B (retsize: 2;)
	// succ:  l1246
l1246:
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x00)
	branch Test(EQ,Z) l125E
	// succ:  l124E l125E
l124E:
	hl = Mem0[0x16A8:word16]
	c = l
	call fn056B (retsize: 2;)
	call fn045B (retsize: 2;)
	Mem0[0x16A8:byte] = a
	goto l1246
	// succ:  l1246
l125E:
	call fn0387 (retsize: 2;)
	return
	// succ:  fn123C_exit
fn123C_exit:


// fn1262
// Return size: 2
define fn1262
fn1262_entry:
	// succ:  l1262
l1262:
	sp = fp
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x20)
	branch Test(NE,Z) l1278
	// succ:  l126A l1278
l126A:
	call fn045B (retsize: 2;)
	Mem0[0x16A8:byte] = a
	SZPC = cond(a - 0x20)
	branch Test(NE,Z) l1278
	// succ:  l1275 l1278
l1275:
	goto l126A
	// succ:  l126A
l1278:
	return
	// succ:  fn1262_exit
fn1262_exit:


// fn1279
// Return size: 2
define fn1279
fn1279_entry:
	// succ:  l1279
l1279:
	sp = fp
	call fn045B (retsize: 2;)
	Mem0[0x16A8:byte] = a
	call fn1262 (retsize: 2;)
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x28)
	branch Test(EQ,Z) l128D
	// succ:  l128A l128D
l128A:
	call fn1229 (retsize: 2;)
	// succ:  l128D
l128D:
	hl = 0x16AA
	Mem0[hl:byte] = 0x00
	// succ:  l1292
l1292:
	call fn045B (retsize: 2;)
	Mem0[0x16A9:byte] = a
	a = a - 0x30
	SZC = cond(a)
	c = a
	a = 0x09
	SZPC = cond(a - c)
	branch Test(ULT,C) l12BE
	// succ:  l12A1 l12BE
l12A1:
	a = Mem0[0x16AA:byte]
	a = a + a
	SZPC = cond(a)
	a = a + a
	SZPC = cond(a)
	a = a + a
	SZPC = cond(a)
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	a = Mem0[0x16AA:byte]
	a = a + a
	SZPC = cond(a)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a + c
	SZPC = cond(a)
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	a = Mem0[0x16A9:byte]
	a = a + 0x0F
	SZPC = cond(a)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a + c
	SZPC = cond(a)
	Mem0[0x16AA:byte] = a
	goto l1292
	// succ:  l1292
l12BE:
	a = Mem0[0x16A9:byte]
	SZPC = cond(a - 0x20)
	branch Test(NE,Z) l12C9
	// succ:  l12C6 l12C9
l12C6:
	call fn1262 (retsize: 2;)
	// succ:  l12C9
l12C9:
	a = Mem0[0x16A9:byte]
	SZPC = cond(a - 0x29)
	branch Test(EQ,Z) l12D4
	// succ:  l12D1 l12D4
l12D1:
	call fn1229 (retsize: 2;)
	// succ:  l12D4
l12D4:
	a = Mem0[0x16AA:byte]
	return
	// succ:  fn1279_exit
fn1279_exit:


// fn12D8
// Return size: 2
define fn12D8
fn12D8_entry:
	// succ:  l12D8
l12D8:
	sp = fp
	call fn045B (retsize: 2;)
	Mem0[0x16A8:byte] = a
	call fn1262 (retsize: 2;)
	a = Mem0[0x16A8:byte]
	SZPC = cond(a - 0x28)
	branch Test(NE,Z) l12F4
	// succ:  l12E9 l12F4
l12E9:
	call fn045B (retsize: 2;)
	a = a + 0x1F
	SZPC = cond(a)
	Mem0[0x16AB:byte] = a
	goto l12F7
	// succ:  l12F7
l12F4:
	call fn1229 (retsize: 2;)
	// succ:  l12F7
l12F7:
	call fn045B (retsize: 2;)
	a = a - 0x29
	SZC = cond(a)
	a = a + 0xFF
	SZPC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	sp = sp - 0x0002
	Mem0[sp:word16] = af
	a = 0x10
	hl = 0x16AB
	a = a - Mem0[hl:byte]
	SZC = cond(a)
	a = a - a - C
	SZPC = cond(a)
	bc = Mem0[sp:word16]
	sp = sp + 0x0002
	c = b
	a = a | c
	SZ = cond(a)
	C = false
	a = __rcr(a, 0x01, C)
	C = cond(a)
	branch Test(UGE,C) l1311
	// succ:  l130B_thunk_fn130E l130B_thunk_fn130E
l130B_thunk_fn130E:
	call fn130E (retsize: 0;)
	return
	// succ:  fn12D8_exit
l130B_thunk_fn130E:
	call fn130E (retsize: 0;)
	return
	// succ:  fn12D8_exit
fn12D8_exit:


// fn130B
// Return size: 0
define fn130B
fn130B_entry:
	// succ:  l130B
l130B:
	sp = fp
	branch Test(UGE,C) l1311_in_fn130B
	// succ:  l130B_thunk_fn130E l1311_in_fn130B
l130B_thunk_fn130E:
	call fn130E (retsize: 0;)
	return
	// succ:  fn130B_exit
l1311_in_fn130B:
	a = Mem0[0x16AB:byte]
	return
	// succ:  fn130B_exit
fn130B_exit:


// fn130E
// Return size: 0
define fn130E
fn130E_entry:
	// succ:  l130E
l130E:
	sp = v3
	call fn1229 (retsize: 2;)
	// succ:  l1311
l1311:
	a = Mem0[0x16AB:byte]
	return
	// succ:  fn130E_exit
fn130E_exit:


// fn1315
// Return size: 2
define fn1315
fn1315_entry:
	// succ:  l1315
l1315:
	sp = fp
	v3 = de
	de = hl
	hl = v3
	e = a
	d = 0x00
	v9 = de
	de = hl
	hl = v9
	a = Mem0[de:byte]
	a = a + l
	SZPC = cond(a)
	l = a
	de = de + 0x0001
	SZP = cond(de)
	a = Mem0[de:byte]
	a = a + h + C
	SZPC = cond(a)
	h = a
	return
	// succ:  fn1315_exit
fn1315_exit:


// fn1326
// Return size: 2
define fn1326
fn1326_entry:
	// succ:  l1326
l1326:
	sp = fp
	a = h
	a = a | a
	SZ = cond(a)
	C = false
	a = __rcr(a, 0x01, C)
	C = cond(a)
	h = a
	a = l
	a = __rcr(a, 0x01, C)
	C = cond(a)
	l = a
	c = c - 0x01
	SZP = cond(c)
	branch Test(NE,Z) l1326
	// succ:  l1331 l1326
l1331:
	return
	// succ:  fn1326_exit
fn1326_exit:


// fn1335
// Return size: 2
define fn1335
fn1335_entry:
	// succ:  l1335
l1335:
	sp = fp
	a = e
	a = a - l
	SZC = cond(a)
	l = a
	a = d
	a = a - h - C
	SZPC = cond(a)
	h = a
	return
	// succ:  fn1335_exit
fn1335_exit:


// fn133C
// Return size: 2
define fn133C
fn133C_entry:
	// succ:  l133C
l133C:
	sp = fp
	c = a
	b = 0x00
	a = e
	a = a - c
	SZC = cond(a)
	l = a
	a = d
	a = a - b - C
	SZPC = cond(a)
	h = a
	return
	// succ:  fn133C_exit
fn133C_exit:


// fn1346
// Return size: 2
define fn1346
fn1346_entry:
	// succ:  l1346
l1346:
	sp = fp
	l = c
	h = b
	// succ:  l1347_thunk_fn1348
l1347_thunk_fn1348:
	call fn1348 (retsize: 0;)
	return
	// succ:  fn1346_exit
fn1346_exit:


// fn1348
// Return size: 2
define fn1348
fn1348_entry:
	// succ:  l1348
l1348:
	sp = fp
	c = Mem0[hl:byte]
	hl = hl + 0x0001
	SZP = cond(hl)
	b = Mem0[hl:byte]
	a = Mem0[de:byte]
	a = a - c
	SZC = cond(a)
	l = a
	de = de + 0x0001
	SZP = cond(de)
	a = Mem0[de:byte]
	a = a - b - C
	SZPC = cond(a)
	h = a
	return
	// succ:  fn1348_exit
fn1348_exit:


// fn1353
// Return size: 2
define fn1353
fn1353_entry:
	// succ:  l1353
l1353:
	sp = fp
	l = a
	h = 0x00
	a = Mem0[de:byte]
	a = a - l
	SZC = cond(a)
	l = a
	de = de + 0x0001
	SZP = cond(de)
	a = Mem0[de:byte]
	a = a - h - C
	SZPC = cond(a)
	h = a
	return
	// succ:  fn1353_exit
fn1353_exit:


// fn1356
// Return size: 2
define fn1356
fn1356_entry:
	// succ:  l1356
l1356:
	sp = fp
	a = Mem0[de:byte]
	a = a - l
	SZC = cond(a)
	l = a
	de = de + 0x0001
	SZP = cond(de)
	a = Mem0[de:byte]
	a = a - h - C
	SZPC = cond(a)
	h = a
	return
	// succ:  fn1356_exit
fn1356_exit:


// fn140B
// Return size: 0
define fn140B
fn140B_entry:
	// succ:  l140B
l140B:
	sp = fp
	// succ:  l1493_thunk_fn1494
l1493_thunk_fn1494:
	call fn1494 (retsize: 0;)
	return
	// succ:  fn140B_exit
fn140B_exit:


// fn1494
// Return size: 0
define fn1494
fn1494_entry:
	// succ:  l1494
l1494:
	sp = v3
fn1494_exit:


// fn156F
// Return size: 0
define fn156F
fn156F_entry:
	// succ:  l156F
l156F:
	sp = fp
	// succ:  l15AF_thunk_fn15B0
l15AF_thunk_fn15B0:
	call fn15B0 (retsize: 0;)
	return
	// succ:  fn156F_exit
fn156F_exit:


// fn15B0
// Return size: 0
define fn15B0
fn15B0_entry:
	// succ:  l15B0
l15B0:
	sp = fp
	bc = bc + 0x0001
	SZP = cond(bc)
	l = a
	__hlt()
	branch Test(UGE,C) l164C
	// succ:  l1647 l164C
l1647:
	// succ:  l164C
l164C:
	b = b - 0x01
	SZP = cond(b)
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	a = Mem0[de:byte]
	call fn08EC (retsize: 2;)
	sp = sp + 0x0002
	branch Test(ULT,C) l1494
	goto l1686
	// succ:  l1686 l1683_thunk_fn1494
l1683_thunk_fn1494:
	call fn1494 (retsize: 0;)
	return
	// succ:  fn15B0_exit
l1686:
	call fn140B (retsize: 2;)
	hl = Mem0[0x1752:word16]
	v11 = de
	de = hl
	hl = v11
	a = 0x82
	a = a | a
	SZ = cond(a)
	C = false
	C = cond(true)
	// succ:  l1691_thunk_fn092A
l1691_thunk_fn092A:
	call fn092A (retsize: 0;)
	return
	// succ:  fn15B0_exit
fn15B0_exit:


