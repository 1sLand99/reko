// fn0000802E
// Return size: 4
define fn0000802E
fn0000802E_entry:
	// succ:  l0000802E
l0000802E:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFE5400)
	C = false
	V = false
	ZN = cond(0xFFFFB3C8)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFE69E8)
	C = false
	V = false
	ZN = cond(0x0000DBD4)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000002
	ZN = cond(0x00000002)
	C = false
	V = false
	ZN = cond(0x000192E0)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x0000000F
	ZN = cond(0x0000000F)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x0000000A
	ZN = cond(0x0000000A)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x0000000B
	ZN = cond(0x0000000B)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	r3 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	CZN = cond(Mem0[ap + 4:word32] - 0x00000001)
	V = false
	branch Test(NE,Z) l00008081
	// succ:  l0000807F l00008081
l0000807F:
	r3 = r3 + 0x00000001
	CVZN = cond(r3)
	// succ:  l00008081
l00008081:
	v14 = r3
	Mem0[r2 + 96:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	sp = sp - 0x00000004
	v15 = ap + 8
	Mem0[sp:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	sp = sp - 0x00000004
	v16 = ap + 4
	Mem0[sp:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	call fn00008EC2 (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	branch (r0 & 0x00000001) != 0x00000000 l0000809C
	// succ:  l00008098 l0000809C
l00008098:
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000802E_exit
l0000809C:
	sp = sp - 0x00000004
	v19 = (uint32) 0x5D
	Mem0[sp:uint32] = v19
	ZN = cond(v19)
	C = false
	V = false
	sp = sp - 0x00000004
	v20 = Mem0[Mem0[ap + 8:word32]:word32]
	Mem0[sp:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	call fn000192DE (retsize: 4;)
	r4 = r0
	ZN = cond(r4)
	C = false
	V = false
	branch Test(NE,Z) l000080B8
	// succ:  l000080AF l000080B8
l000080AF:
	r4 = Mem0[Mem0[ap + 8:word32]:word32]
	ZN = cond(r4)
	C = false
	V = false
	goto l000080BA
	// succ:  l000080BA
l000080B8:
	r4 = r4 + 0x00000001
	CVZN = cond(r4)
	// succ:  l000080BA
l000080BA:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000007
	ZN = cond(0x00000007)
	C = false
	V = false
fn0000802E_exit:


// fn00008CCE
// Return size: 0
define fn00008CCE
fn00008CCE_entry:
	// succ:  l00008CCE
l00008CCE:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFE5400)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFE69E8)
	C = false
	V = false
	r7 = Mem0[ap + 4:word32]
	ZN = cond(r7)
	C = false
	V = false
	branch Test(EQ,Z) l00008CF4
	// succ:  l00008CEC l00008CF4
l00008CEC:
	v11 = 0x01
	r0 = DPB(r0, v11, 0)
	ZN = cond(v11)
	C = false
	V = false
	goto l00008CF6
	// succ:  l00008CF6
l00008CF4:
	v12 = 0x00
	r0 = DPB(r0, v12, 0)
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00008CF6
l00008CF6:
	r6 = (int32) (int8) r0
	VZN = cond(r6)
	C = false
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00008D00
	// succ:  l00008CFD l00008D00
l00008CFD:
	goto l00008DAC
	// succ:  l00008DAC
l00008D00:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r6
	ZN = cond(r6)
	C = false
	V = false
	sp = sp - 0x00000004
	v18 = r4 + 21
	Mem0[sp:word32] = v18
	ZN = cond(v18)
	C = false
	V = false
	sp = sp - 0x00000004
	v19 = r4 + 19
	Mem0[sp:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	sp = sp - 0x00000004
	v21 = r3 + 662
	Mem0[sp:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
l00008DAC:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r6
	ZN = cond(r6)
	C = false
	V = false
fn00008CCE_exit:


// fn00008EC2
// Return size: 0
define fn00008EC2
fn00008EC2_entry:
	// succ:  l00008EC2
l00008EC2:
	sp = fp
	sp = sp + -304
	ZN = cond(sp)
	C = false
	V = false
	ZN = cond(0xFFFE5470)
	C = false
	V = false
	v7 = 0x0000
	Mem0[fp + -280:word16] = v7
	Z = true
	N = false
	C = false
	V = false
	v10 = 0x0E
	Mem0[fp + -278:byte] = v10
	ZN = cond(v10)
	C = false
	V = false
	v11 = 0x02
	Mem0[fp + -277:byte] = v11
	ZN = cond(v11)
	C = false
	V = false
	v12 = 0x00000000
	Mem0[fp + -276:word32] = v12
	Z = true
	N = false
	C = false
	V = false
	v13 = 0x0000
	Mem0[fp + -288:word16] = v13
	Z = true
	N = false
	C = false
	V = false
	v14 = 0x0E
	Mem0[fp + -286:byte] = v14
	ZN = cond(v14)
	C = false
	V = false
	v15 = 0x02
	Mem0[fp + -285:byte] = v15
	ZN = cond(v15)
	C = false
	V = false
	v16 = 0x00000000
	Mem0[fp + -284:word32] = v16
	Z = true
	N = false
	C = false
	V = false
	v17 = 0x0000
	Mem0[fp + -296:word16] = v17
	Z = true
	N = false
	C = false
	V = false
	v18 = 0x0E
	Mem0[fp + -294:byte] = v18
	ZN = cond(v18)
	C = false
	V = false
	v19 = 0x02
	Mem0[fp + -293:byte] = v19
	ZN = cond(v19)
	C = false
	V = false
	v20 = 0x00000000
	Mem0[fp + -292:word32] = v20
	Z = true
	N = false
	C = false
	V = false
	v21 = 0x0000
	Mem0[fp + -304:word16] = v21
	Z = true
	N = false
	C = false
	V = false
	v22 = 0x0E
	Mem0[fp + -302:byte] = v22
	ZN = cond(v22)
	C = false
	V = false
	v23 = 0x02
	Mem0[fp + -301:byte] = v23
	ZN = cond(v23)
	C = false
	V = false
	v24 = 0x00000000
	Mem0[fp + -300:word32] = v24
	Z = true
	N = false
	C = false
	V = false
fn00008EC2_exit:


// fn00009746
// Return size: 4
define fn00009746
fn00009746_entry:
	// succ:  l00009746
l00009746:
	sp = fp
	sp = sp - 0x00000014
	CVZN = cond(sp)
	v5 = 0x0000
	Mem0[fp + -20:word16] = v5
	Z = true
	N = false
	C = false
	V = false
	v10 = 0x0E
	Mem0[fp + -18:byte] = v10
	ZN = cond(v10)
	C = false
	V = false
	v12 = 0x02
	Mem0[fp + -17:byte] = v12
	ZN = cond(v12)
	C = false
	V = false
	v13 = 0x00000000
	Mem0[fp + -16:word32] = v13
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	v15 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	call fn00018F66 (retsize: 4;)
	r2 = r0
	ZN = cond(r2)
	C = false
	V = false
	branch (r2 & 0x00000001) != 0x00000000 l0000976A
	// succ:  l00009767 l0000976A
l00009767:
	goto l000098AD
	// succ:  l000098AD
l0000976A:
	r4 = Mem0[ap + 16:word32]
	ZN = cond(r4)
	C = false
	V = false
	ZN = cond(Mem0[r4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000978D
	// succ:  l00009772 l0000978D
l00009772:
	r3 = Mem0[ap + 20:word32]
	ZN = cond(r3)
	C = false
	V = false
	v20 = (uint32) 0x0100
	Mem0[r3:uint32] = v20
	ZN = cond(v20)
	C = false
	V = false
	sp = sp - 0x00000004
	v21 = Mem0[r3:word32]
	Mem0[sp:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	call fn000192B6 (retsize: 4;)
	v22 = r0
	Mem0[r4:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	r0 = (uint32) 0x0124
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00009746_exit
l0000978D:
	r8 = Mem0[Mem0[ap + 24:word32]:word32]
	ZN = cond(r8)
	C = false
	V = false
	sp = sp - 0x00000004
	v25 = fp + -20
	Mem0[sp:word32] = v25
	ZN = cond(v25)
	C = false
	V = false
	sp = sp - 0x00000004
	v26 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v26
	ZN = cond(v26)
	C = false
	V = false
	call fn00018FA9 (retsize: 4;)
	r2 = r0
	ZN = cond(r2)
	C = false
	V = false
	branch (r2 & 0x00000001) != 0x00000000 l000097A7
	// succ:  l000097A4 l000097A7
l000097A4:
	goto l000098A9
	// succ:  l000098A9
l000097A7:
	r7 = ap + 20
	ZN = cond(r7)
	C = false
	V = false
	// succ:  l000097AC
l000097AC:
	r9 = r8
	ZN = cond(r9)
	C = false
	V = false
	r3 = (uint32) Mem0[fp + -20:word16]
	ZN = cond(r3)
	C = false
	V = false
	r3 = r3 + 0x00000001
	CVZN = cond(r3)
	r8 = r8 + r3
	CVZN = cond(r8)
	CZN = cond(r8 - Mem0[Mem0[r7 + 0:word32]:word32])
	V = false
	branch Test(ULE,CZ) l000097F2
	// succ:  l000097BE l000097F2
l000097BE:
	r4 = Mem0[ap + 16:word32]
	ZN = cond(r4)
	C = false
	V = false
	r5 = Mem0[r4:word32]
	ZN = cond(r5)
	C = false
	V = false
	r3 = Mem0[r7:word32]
	ZN = cond(r3)
	C = false
	V = false
	v32 = Mem0[r3:word32] + 0x00000100
	Mem0[r3:word32] = v32
	CVZN = cond(v32)
	sp = sp - 0x00000004
	v33 = Mem0[r3:word32]
	Mem0[sp:word32] = v33
	ZN = cond(v33)
	C = false
	V = false
	sp = sp - 0x00000004
	v34 = Mem0[r4:word32]
	Mem0[sp:word32] = v34
	ZN = cond(v34)
	C = false
	V = false
	call fn000192BA (retsize: 4;)
	v35 = r0
	Mem0[r4:word32] = v35
	ZN = cond(v35)
	C = false
	V = false
	branch Test(NE,Z) l000097F2
	// succ:  l000097DF l000097F2
l000097DF:
	ZN = cond(r5 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000097EC
	// succ:  l000097E3 l000097EC
l000097E3:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	// succ:  l000097EC
l000097EC:
	r0 = (uint32) 0x0124
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00009746_exit
l000097F2:
	r6 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	v38 = fp + -20
	Mem0[sp:word32] = v38
	ZN = cond(v38)
	C = false
	V = false
	sp = sp - 0x00000004
	v39 = fp + -12
	Mem0[sp:word32] = v39
	ZN = cond(v39)
	C = false
	V = false
	sp = sp - 0x00000004
	v40 = fp + -8
	Mem0[sp:word32] = v40
	ZN = cond(v40)
	C = false
	V = false
	r3 = Mem0[ap + 8:word32]
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	call fn00019346 (retsize: 4;)
	r4 = Mem0[fp + -8:word32]
	ZN = cond(r4)
	C = false
	V = false
	CZN = cond(r4 - 0x00000001)
	V = false
	branch Test(LE,ZN) l00009820
	// succ:  l00009813 l00009820
l00009813:
	r3 = r4 + Mem0[r3 + 4:word32]
	CVZN = cond(r3)
	r3 = r3 - 0x00000002
	CVZN = cond(r3)
	CZN = cond(Mem0[r3:byte] - 0x22)
	V = false
	branch Test(EQ,Z) l00009824
	// succ:  l00009820 l00009824
l00009820:
	ZN = cond(r4 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00009827
	// succ:  l00009824 l00009827
l00009824:
	r6 = 0x00000001
	ZN = cond(r6)
	C = false
	V = false
	// succ:  l00009827
l00009827:
	r3 = Mem0[fp + -16:word32]
	ZN = cond(r3)
	C = false
	V = false
	r4 = r9 + Mem0[Mem0[ap + 16:word32]:word32]
	CVZN = cond(r4)
	r5 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r0 = (uint32) Mem0[fp + -20:word16]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r5 - r0)
	V = false
	branch Test(UGE,C) l00009866
	// succ:  l0000983B l00009866
l0000983B:
	// succ:  l0000983C
l0000983C:
	ZN = cond(r6 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00009858
	// succ:  l00009840 l00009858
l00009840:
	CZN = cond(Mem0[r3:byte] - 0x41)
	V = false
	branch Test(LT,N) l00009858
	// succ:  l00009846 l00009858
l00009846:
	CZN = cond(Mem0[r3:byte] - 0x5A)
	V = false
	branch Test(GT,ZN) l00009858
	// succ:  l0000984C l00009858
l0000984C:
	v41 = r3
	r3 = r3 + 0x00000001
	r0 = (int32) Mem0[v41:int8]
	VZN = cond(r0)
	C = false
	r0 = r0 + 0x00000020
	CVZN = cond(r0)
	v42 = (int8) r0
	Mem0[r4:int8] = v42
	r4 = r4 + 0x00000001
	VZN = cond(v42)
	C = false
	goto l0000985B
	// succ:  l0000985B
l00009858:
	v44 = r3
	r3 = r3 + 0x00000001
	v45 = Mem0[v44:byte]
	Mem0[r4:byte] = v45
	r4 = r4 + 0x00000001
	ZN = cond(v45)
	C = false
	V = false
	// succ:  l0000985B
l0000985B:
	r5 = r5 + 0x00000001
	CVZN = cond(r5)
	r0 = (uint32) Mem0[fp + -20:word16]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r5 - r0)
	V = false
	branch Test(ULT,C) l0000983C
	// succ:  l00009866 l0000983C
l00009866:
	CZN = cond(r2 - 0x0003FD39)
	V = false
	branch Test(NE,Z) l00009884
	// succ:  l0000986F l00009884
l0000986F:
	r4 = r8 - 0x00000001
	CVZN = cond(r4)
	r3 = Mem0[ap + 16:word32]
	ZN = cond(r3)
	C = false
	V = false
	r3 = Mem0[r3 + 0:word32]
	ZN = cond(r3)
	C = false
	V = false
	v43 = (int8) Mem0[ap + 12:int32]
	Mem0[r3:int8] = v43
	VZN = cond(v43)
	C = false
	goto l00009893
	// succ:  l00009893
l00009884:
	r4 = r8 - 0x00000001
	CVZN = cond(r4)
	r3 = Mem0[ap + 16:word32]
	ZN = cond(r3)
	C = false
	V = false
	r3 = Mem0[r3 + 0:word32]
	ZN = cond(r3)
	C = false
	V = false
	v48 = 0x00
	Mem0[r3:byte] = v48
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00009893
l00009893:
	sp = sp - 0x00000004
	v46 = fp + -20
	Mem0[sp:word32] = v46
	ZN = cond(v46)
	C = false
	V = false
	sp = sp - 0x00000004
	v47 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v47
	ZN = cond(v47)
	C = false
	V = false
	call fn00018FA9 (retsize: 4;)
	r2 = r0
	ZN = cond(r2)
	C = false
	V = false
	branch (r2 & 0x00000001) == 0x00000000 l000098A9
	// succ:  l000098A6 l000098A9
l000098A6:
	goto l000097AC
	// succ:  l000097AC
l000098A9:
	v36 = r8
	Mem0[Mem0[ap + 24:word32]:word32] = v36
	ZN = cond(v36)
	C = false
	V = false
	// succ:  l000098AD
l000098AD:
	r0 = (int32) 0x0001
	VZN = cond(r0)
	C = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00009746_exit
fn00009746_exit:


// fn00009A52
// Return size: 0
define fn00009A52
fn00009A52_entry:
	// succ:  l00009A52
l00009A52:
	sp = fp
	sp = sp + -84
	ZN = cond(sp)
	C = false
	V = false
	ZN = cond(0xFFFE5F38)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
fn00009A52_exit:


// fn00009B0A
// Return size: 4
define fn00009B0A
fn00009B0A_entry:
	// succ:  l00009B0A
l00009B0A:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	call fn0000AA6A (retsize: 4;)
	v9 = r0
	Mem0[ap + 0x0001019C:word32] = v9
	ZN = cond(v9)
	C = false
	V = false
	v10 = r0 - 0x00000000
	branch v10 > 0x00000002 l00009B2A
	// succ:  l00009B22_1 l00009B2A
l00009B22_1:
	call 0x00009B26 + v10 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn00009B0A_exit
l00009B2A:
	branch Test(UGE,C) l00009B2C
	// succ:  l00009B2C l00009B2C
l00009B2C:
	// succ:  l00009B38
l00009B38:
	call fn00009C8A (retsize: 4;)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00009B0A_exit
fn00009B0A_exit:


// fn00009BAE
// Return size: 0
define fn00009BAE
fn00009BAE_entry:
	// succ:  l00009BAE
l00009BAE:
	sp = fp
	sp = sp - 0x00000010
	CVZN = cond(sp)
	ZN = cond(0xFFFE5F38)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	r4 = (uint32) Mem0[r7 + 0x0000C646:word16]
	ZN = cond(r4)
	C = false
	V = false
	r3 = r4
	ZN = cond(r3)
	C = false
	V = false
	r2 = r3 >> 9
	VZN = cond(r2)
	C = false
	r2 = r2 & ~0xFFFFFF80
	ZN = cond(r2)
	C = false
	V = false
	v12 = r2 + 0x000007BC
	Mem0[sp:word32] = v12
	CVZN = cond(v12)
	r2 = r3 >> 5
	VZN = cond(r2)
	C = false
	r2 = r2 & ~0xFFFFFFF0
	ZN = cond(r2)
	C = false
	V = false
	r8 = r2 - 0x00000001
	CVZN = cond(r8)
	v14 = r4 & ~0xFFFFFFE0
	Mem0[sp + 4:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	r4 = (uint32) Mem0[r7 + 0x0000C644:word16]
	ZN = cond(r4)
	C = false
	V = false
	r3 = r4
	ZN = cond(r3)
	C = false
	V = false
	r2 = r3 >> 11
	VZN = cond(r2)
	C = false
	v15 = r2 & ~0xFFFFFFE0
	Mem0[sp + 8:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	r2 = r3 >> 5
	VZN = cond(r2)
	C = false
	r11 = r2 & ~0xFFFFFFC0
	ZN = cond(r11)
	C = false
	V = false
	r4 = r4 & ~0xFFFFFFE0
	ZN = cond(r4)
	C = false
	V = false
	r10 = r4 + r4
	CVZN = cond(r10)
fn00009BAE_exit:


// fn00009C8A
// Return size: 4
define fn00009C8A
fn00009C8A_entry:
	// succ:  l00009C8A
l00009C8A:
	sp = fp
	sp = sp + -260
	ZN = cond(sp)
	C = false
	V = false
	ZN = cond(0xFFFE5F38)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	v7 = 0x01
	r3 = DPB(r3, v7, 0)
	ZN = cond(v7)
	C = false
	V = false
	r2 = Mem0[r7 + 1511:word32]
	ZN = cond(r2)
	C = false
	V = false
	branch (Mem0[r2 + 20:word32] & 0x00000001 << 0x00000003) != 0x00000000 l00009CB8
	// succ:  l00009CB1 l00009CB8
l00009CB1:
	ZN = cond(Mem0[r7 + 12:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00009CB8
	// succ:  l00009CB6 l00009CB8
l00009CB6:
	v11 = 0x00
	r3 = DPB(r3, v11, 0)
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00009CB8
l00009CB8:
	v14 = (int32) (int8) r3
	Mem0[r6 + 352:int32] = v14
	VZN = cond(v14)
	C = false
	branch Test(NE,Z) l00009CC4
	// succ:  l00009CBF l00009CC4
l00009CBF:
	ZN = cond(Mem0[r7 + 8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00009CC8
	// succ:  l00009CC4 l00009CC8
l00009CC4:
	r5 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	goto l00009CED
	// succ:  l00009CED
l00009CC8:
	CZN = cond(Mem0[r7 + 8:word32] - 0x00000001)
	V = false
	branch Test(EQ,Z) l00009CD4
	// succ:  l00009CCE l00009CD4
l00009CCE:
	r4 = 0x00000001
	ZN = cond(r4)
	C = false
	V = false
	goto l00009CEA
	// succ:  l00009CEA
l00009CD4:
	r2 = Mem0[r7 + 1511:word32]
	ZN = cond(r2)
	C = false
	V = false
	r2 = (uint32) SLICE(Mem0[r2 + 20:word32], ui1, 2)
	ZN = cond(r2)
	V = false
	r3 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(r2 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00009CE7
	// succ:  l00009CE5 l00009CE7
l00009CE5:
	r3 = r3 + 0x00000001
	CVZN = cond(r3)
	// succ:  l00009CE7
l00009CE7:
	r4 = r3
	ZN = cond(r4)
	C = false
	V = false
	// succ:  l00009CEA
l00009CEA:
	r5 = r4
	ZN = cond(r5)
	C = false
	V = false
	// succ:  l00009CED
l00009CED:
	v17 = r5
	Mem0[r6 + 356:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	v18 = 0x05
	Mem0[r6 + 360:byte] = v18
	ZN = cond(v18)
	C = false
	V = false
	ZN = cond(Mem0[r7 + 12:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00009CFF
	// succ:  l00009CFC l00009CFF
l00009CFC:
	goto l00009FFD
	// succ:  l00009FFD
l00009CFF:
l00009FFD:
	v21 = r6 + 361
	Mem0[r6 + 0x00010170:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	v22 = 0x00000000
	Mem0[r6 + 0x0001016C:word32] = v22
	Z = true
	N = false
	C = false
	V = false
	v23 = r6 + 361
	Mem0[r6 + 0x00010179:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	v24 = 0x00000000
	Mem0[r6 + 0x0001017D:word32] = v24
	Z = true
	N = false
	C = false
	V = false
	v25 = r6 + 0x00010181
	Mem0[r6 + 0x00010175:word32] = v25
	ZN = cond(v25)
	C = false
	V = false
	v26 = r6 + 0x00008169
	Mem0[r6 + 0x00010185:word32] = v26
	ZN = cond(v26)
	C = false
	V = false
	v27 = 0x00000000
	Mem0[r6 + 0x00010189:word32] = v27
	Z = true
	N = false
	C = false
	V = false
	v28 = r6 + 0x00010175
	Mem0[r6 + 0x00010181:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	v29 = r6 + 0x00010175
	Mem0[r6 + 0x00010190:word32] = v29
	ZN = cond(v29)
	C = false
	V = false
	ZN = cond(Mem0[r6 + 352:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000A060
	// succ:  l0000A053 l0000A060
l0000A053:
	v30 = 0x00
	Mem0[r6 + 0x00010174:byte] = v30
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(0x0000B518)
	C = false
	V = false
	goto l0000A065
	// succ:  l0000A065
l0000A060:
	ZN = cond(0x0000B0B8)
	C = false
	V = false
	// succ:  l0000A065
l0000A065:
	v32 = r3
	Mem0[r6 + 0x00010194:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	ZN = cond(0x0000B9EC)
	C = false
	V = false
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00009C8A_exit
fn00009C8A_exit:


// fn0000A07A
// Return size: 4
define fn0000A07A
fn0000A07A_entry:
	// succ:  l0000A07A
l0000A07A:
	sp = fp
	sp = sp + -516
	ZN = cond(sp)
	C = false
	V = false
	ZN = cond(0xFFFE5F38)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	v8 = Mem0[r7 + 12:word32]
	Mem0[r6 + 352:word32] = v8
	ZN = cond(v8)
	C = false
	V = false
	r2 = Mem0[r6 + 308:word32]
	ZN = cond(r2)
	C = false
	V = false
	v10 = Mem0[r2 + 31:byte]
	Mem0[r6 + 360:byte] = v10
	ZN = cond(v10)
	C = false
	V = false
	ZN = cond(Mem0[r7 + 12:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000A0AD
	// succ:  l0000A0AA l0000A0AD
l0000A0AA:
	goto l0000A17D
	// succ:  l0000A17D
l0000A0AD:
	r2 = (uint32) Mem0[r6 + 360:byte]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x00000002)
	V = false
	branch Test(NE,Z) l0000A0BA
	// succ:  l0000A0B7 l0000A0BA
l0000A0B7:
	goto l0000A4F9
	// succ:  l0000A4F9
l0000A0BA:
	CZN = cond(r2 - 0x00000005)
	V = false
	branch Test(NE,Z) l0000A0C2
	// succ:  l0000A0BF l0000A0C2
l0000A0BF:
	goto l0000A4F9
	// succ:  l0000A4F9
l0000A0C2:
	CZN = cond(r2 - 0x00000006)
	V = false
	branch Test(NE,Z) l0000A0CA
	// succ:  l0000A0C7 l0000A0CA
l0000A0C7:
	goto l0000A4F9
	// succ:  l0000A4F9
l0000A0CA:
	CZN = cond(r2 - 0x00000004)
	V = false
	branch Test(NE,Z) l0000A0D2
	// succ:  l0000A0CF l0000A0D2
l0000A0CF:
	goto l0000A4F9
	// succ:  l0000A4F9
l0000A0D2:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v28 = r7 + 0x0000C701
	Mem0[sp:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	sp = sp - 0x00000004
	v30 = r8 + 399
	Mem0[sp:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	sp = sp - 0x00000004
	v31 = r7 + 1515
	Mem0[sp:word32] = v31
	ZN = cond(v31)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v32 = r7 + 1515
	Mem0[sp:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	r2 = Mem0[r7 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	ZN = cond(Mem0[r6 + 320:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000A10C
	// succ:  l0000A101 l0000A10C
l0000A101:
	sp = sp - 0x00000004
	v33 = Mem0[r6 + 320:word32]
	Mem0[sp:word32] = v33
	ZN = cond(v33)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	// succ:  l0000A10C
l0000A10C:
	ZN = cond(Mem0[r6 + 328:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000A11D
	// succ:  l0000A112 l0000A11D
l0000A112:
	sp = sp - 0x00000004
	v34 = Mem0[r6 + 328:word32]
	Mem0[sp:word32] = v34
	ZN = cond(v34)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	// succ:  l0000A11D
l0000A11D:
	ZN = cond(Mem0[r6 + 324:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000A12E
	// succ:  l0000A123 l0000A12E
l0000A123:
	sp = sp - 0x00000004
	v35 = Mem0[r6 + 324:word32]
	Mem0[sp:word32] = v35
	ZN = cond(v35)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	// succ:  l0000A12E
l0000A12E:
	ZN = cond(Mem0[r6 + 316:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000A13F
	// succ:  l0000A134 l0000A13F
l0000A134:
	sp = sp - 0x00000004
	v36 = Mem0[r6 + 316:word32]
	Mem0[sp:word32] = v36
	ZN = cond(v36)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	// succ:  l0000A13F
l0000A13F:
	ZN = cond(Mem0[r6 + 340:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000A161
	// succ:  l0000A145 l0000A161
l0000A145:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l0000A148
l0000A148:
	r2 = Mem0[r6 + 340:word32]
	ZN = cond(r2)
	C = false
	V = false
	r3 = Mem0[r2 + 4:word32]
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	v38 = r3
	Mem0[r6 + 340:word32] = v38
	ZN = cond(v38)
	C = false
	V = false
	branch Test(NE,Z) l0000A148
	// succ:  l0000A161 l0000A148
l0000A161:
	r3 = Mem0[r6 + 308:word32]
	ZN = cond(r3)
	C = false
	V = false
	branch Test(EQ,Z) l0000A179
	// succ:  l0000A168 l0000A179
l0000A168:
	r2 = r6
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r3 - r2)
	V = false
	branch Test(EQ,Z) l0000A179
	// succ:  l0000A170 l0000A179
l0000A170:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	// succ:  l0000A179
l0000A179:
	r0 = 0x00000001
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000A07A_exit
l0000A17D:
l0000A4F9:
	v13 = r6 + 361
	Mem0[r6 + 0x00010170:word32] = v13
	ZN = cond(v13)
	C = false
	V = false
	v14 = 0x00000000
	Mem0[r6 + 0x0001016C:word32] = v14
	Z = true
	N = false
	C = false
	V = false
	v16 = r6 + 361
	Mem0[r6 + 0x00010179:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	v17 = 0x00000000
	Mem0[r6 + 0x0001017D:word32] = v17
	Z = true
	N = false
	C = false
	V = false
	v18 = r6 + 0x00010181
	Mem0[r6 + 0x00010175:word32] = v18
	ZN = cond(v18)
	C = false
	V = false
	v19 = r6 + 0x00008169
	Mem0[r6 + 0x00010185:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	v20 = 0x00000000
	Mem0[r6 + 0x00010189:word32] = v20
	Z = true
	N = false
	C = false
	V = false
	v21 = r6 + 0x00010175
	Mem0[r6 + 0x00010181:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	v22 = r6 + 0x00010175
	Mem0[r6 + 0x00010190:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	ZN = cond(Mem0[r6 + 352:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000A598
	// succ:  l0000A54F l0000A598
l0000A54F:
	r0 = (uint32) Mem0[r6 + 360:byte]
	ZN = cond(r0)
	C = false
	V = false
	v24 = r0 - 0x00000002
	branch v24 > 0x00000004 l0000A560
	// succ:  l0000A554_1 l0000A560
l0000A554_1:
	call 0x0000A558 + v24 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn0000A07A_exit
l0000A560:
	VZN = vax_addp4(0x0000, 0x11, 0x0028, 0x17)
	C = false
l0000A598:
	ZN = cond(0x0000B0B8)
	C = false
	V = false
	ZN = cond(0x0000B9EC)
	C = false
	V = false
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000A07A_exit
fn0000A07A_exit:


// fn0000A5B2
// Return size: 4
define fn0000A5B2
fn0000A5B2_entry:
	// succ:  l0000A5B2
l0000A5B2:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFE5F38)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	ZN = cond(Mem0[r7 + 12:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000A5D2
	// succ:  l0000A5CF l0000A5D2
l0000A5CF:
	goto l0000A6C4
	// succ:  l0000A6C4
l0000A5D2:
	v11 = Mem0[r6 + 0x000102F4:byte] & ~0xF0
	r2 = DPB(r2, v11, 0)
	ZN = cond(v11)
	C = false
	V = false
	r3 = (uint32) (byte) r2
	ZN = cond(r3)
	C = false
	V = false
	CZN = cond(r3 - 0x00000002)
	V = false
	branch Test(EQ,Z) l0000A61F
	// succ:  l0000A5E3 l0000A61F
l0000A5E3:
	CZN = cond(r3 - 0x00000005)
	V = false
	branch Test(EQ,Z) l0000A61F
	// succ:  l0000A5E8 l0000A61F
l0000A5E8:
	CZN = cond(r3 - 0x00000006)
	V = false
	branch Test(EQ,Z) l0000A61F
	// succ:  l0000A5ED l0000A61F
l0000A5ED:
	CZN = cond(r3 - 0x00000004)
	V = false
	branch Test(EQ,Z) l0000A61F
	// succ:  l0000A5F2 l0000A61F
l0000A5F2:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v14 = r7 + 0x0000C701
	Mem0[sp:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	sp = sp - 0x00000004
	v16 = r8 + 556
	Mem0[sp:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	sp = sp - 0x00000004
	v17 = r7 + 1515
	Mem0[sp:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v19 = r7 + 1515
	Mem0[sp:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	r2 = Mem0[r7 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	r0 = 0x00000001
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000A5B2_exit
l0000A61F:
	v22 = r6 + 361
	Mem0[r6 + 0x00010170:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	v23 = 0x00000000
	Mem0[r6 + 0x0001016C:word32] = v23
	Z = true
	N = false
	C = false
	V = false
	v25 = r6 + 361
	Mem0[r6 + 0x00010179:word32] = v25
	ZN = cond(v25)
	C = false
	V = false
	v26 = 0x00000000
	Mem0[r6 + 0x0001017D:word32] = v26
	Z = true
	N = false
	C = false
	V = false
	v27 = r6 + 0x00010181
	Mem0[r6 + 0x00010175:word32] = v27
	ZN = cond(v27)
	C = false
	V = false
	v28 = r6 + 0x00008169
	Mem0[r6 + 0x00010185:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	v29 = 0x00000000
	Mem0[r6 + 0x00010189:word32] = v29
	Z = true
	N = false
	C = false
	V = false
	v30 = r6 + 0x00010175
	Mem0[r6 + 0x00010181:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	v31 = r6 + 0x00010175
	Mem0[r6 + 0x00010190:word32] = v31
	ZN = cond(v31)
	C = false
	V = false
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	v32 = r0 - 0x00000002
	branch v32 > 0x00000004 l0000A67E
	// succ:  l0000A672_1 l0000A67E
l0000A672_1:
	call 0x0000A676 + v32 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn0000A5B2_exit
l0000A67E:
	VZN = vax_subp4(0x0000, 0x11, 0x002A, Mem0[Mem0[r5 + 5968:word32]:ptr32])
	C = false
l0000A6C4:
fn0000A5B2_exit:


// fn0000A8D6
// Return size: 0
define fn0000A8D6
fn0000A8D6_entry:
	// succ:  l0000A8D6
l0000A8D6:
	sp = fp
	sp = sp + -112
	ZN = cond(sp)
	C = false
	V = false
	ZN = cond(0xFFFE5F38)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0x0001934C)
	C = false
	V = false
	ZN = cond(0x00019350)
	C = false
	V = false
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	ZN = cond(Mem0[r9 + 348:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l0000A906
	// succ:  l0000A903 l0000A906
l0000A903:
	goto l0000A9BC
	// succ:  l0000A9BC
l0000A906:
	ZN = cond(0x00019298)
	C = false
	V = false
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l0000A910
l0000A910:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v10 = r7 + 0x0000C701
	Mem0[sp:word32] = v10
	ZN = cond(v10)
	C = false
	V = false
	sp = sp - 0x00000004
	v12 = r6 + 718
	Mem0[sp:word32] = v12
	ZN = cond(v12)
	C = false
	V = false
	sp = sp - 0x00000004
	v13 = r7 + 1515
	Mem0[sp:word32] = v13
	ZN = cond(v13)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v14 = r7 + 1515
	Mem0[sp:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	r2 = Mem0[r7 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	v17 = Mem0[r8:word32]
	Mem0[sp:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	call fn00019296 (retsize: 4;)
	sp = sp - 0x00000004
	v18 = Mem0[r8:word32]
	Mem0[sp:word32] = v18
	ZN = cond(v18)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000009
	ZN = cond(0x00000009)
	C = false
	V = false
	sp = sp - 0x00000004
	v20 = fp + -14
	Mem0[sp:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	call fn00019292 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000A998
	// succ:  l0000A954 l0000A998
l0000A954:
	v21 = Mem0[fp + -14:byte] & ~0x80
	r2 = DPB(r2, v21, 0)
	ZN = cond(v21)
	C = false
	V = false
	r2 = (int32) (int8) r2
	VZN = cond(r2)
	C = false
	v24 = Mem0[r10 + r2:byte] & ~0xFC
	r2 = DPB(r2, v24, 0)
	ZN = cond(v24)
	C = false
	V = false
	branch Test(NE,Z) l0000A998
	// succ:  l0000A965 l0000A998
l0000A965:
	sp = sp - 0x00000004
	v25 = (int32) Mem0[fp + -14:int8]
	Mem0[sp:int32] = v25
	VZN = cond(v25)
	C = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	CZN = cond(r0 - 0x0000006F)
	V = false
	branch Test(EQ,Z) l0000A998
	// succ:  l0000A975 l0000A998
l0000A975:
	sp = sp - 0x00000004
	v28 = (int32) Mem0[fp + -14:int8]
	Mem0[sp:int32] = v28
	VZN = cond(v28)
	C = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	CZN = cond(r0 - 0x00000076)
	V = false
	branch Test(EQ,Z) l0000A998
	// succ:  l0000A985 l0000A998
l0000A985:
	sp = sp - 0x00000004
	v29 = (int32) Mem0[fp + -14:int8]
	Mem0[sp:int32] = v29
	VZN = cond(v29)
	C = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	CZN = cond(r0 - 0x0000006E)
	V = false
	branch Test(EQ,Z) l0000A998
	// succ:  l0000A995 l0000A998
l0000A995:
	goto l0000A910
	// succ:  l0000A910
l0000A998:
	v33 = Mem0[fp + -14:byte] & ~0x80
	r2 = DPB(r2, v33, 0)
	ZN = cond(v33)
	C = false
	V = false
	r2 = (int32) (int8) r2
	VZN = cond(r2)
	C = false
	branch (Mem0[r10 + r2 * 4:word32] & 0x00000001 << 0x00000000) == 0x00000000 l0000A9C2
	// succ:  l0000A9A6 l0000A9C2
l0000A9A6:
	sp = sp - 0x00000004
	v34 = (int32) Mem0[fp + -14:int8]
	Mem0[sp:int32] = v34
	VZN = cond(v34)
	C = false
	call fn0001929A (retsize: 4;)
	v35 = (int8) r0
	Mem0[fp + -14:int8] = v35
	VZN = cond(v35)
	C = false
	v36 = (byte) r0
	Mem0[r9 + 348:byte] = v36
	ZN = cond(v36)
	C = false
	V = false
	goto l0000A9C2
	// succ:  l0000A9C2
l0000A9BC:
	v30 = Mem0[r9 + 348:byte]
	Mem0[fp + -14:byte] = v30
	ZN = cond(v30)
	C = false
	V = false
	// succ:  l0000A9C2
l0000A9C2:
	r0 = (int32) Mem0[fp + -14:int8]
	VZN = cond(r0)
	C = false
	v31 = r0 - 0x0000006E
	branch v31 > 0x00000008 l0000A9DE
	// succ:  l0000A9C6_1 l0000A9DE
l0000A9C6_1:
	call 0x0000A9CE + v31 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn0000A8D6_exit
l0000A9DE:
	v32 = r0
	r0 = r0 + 0x00000002
	VZN = vax_subp4(0x0000, 0x31, Mem0[v32:word16], 0x00)
	C = false
	call fn40009A48 (retsize: 4;)
	return
	// succ:  fn0000A8D6_exit
fn0000A8D6_exit:


// fn0000AA6A
// Return size: 4
define fn0000AA6A
fn0000AA6A_entry:
	// succ:  l0000AA6A
l0000AA6A:
	sp = fp
	sp = sp - 0x00000018
	CVZN = cond(sp)
	ZN = cond(0xFFFE5F38)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	v8 = Mem0[r10 + 0x0000C627:word32]
	Mem0[sp + 8:word32] = v8
	ZN = cond(v8)
	C = false
	V = false
	v9 = 0x00000000
	Mem0[sp + 4:word32] = v9
	Z = true
	N = false
	C = false
	V = false
	v13 = 0x00000000
	Mem0[r8 + 308:word32] = v13
	Z = true
	N = false
	C = false
	V = false
	v14 = 0x0000000000000000
	Mem0[r8 + 316:word64] = v14
	Z = true
	N = false
	C = false
	V = false
	v15 = 0x0000000000000000
	Mem0[r8 + 324:word64] = v15
	Z = true
	N = false
	C = false
	V = false
	v16 = 0x0000000000000000
	Mem0[r8 + 340:word64] = v16
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(Mem0[sp + 8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000AAA5
	// succ:  l0000AAA2 l0000AAA5
l0000AAA2:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000AA6A_exit
l0000AAA5:
	v20 = (uint32) Mem0[r10 + 0x0000C656:word16]
	Mem0[sp + 12:uint32] = v20
	ZN = cond(v20)
	C = false
	V = false
	branch Test(GT,ZN) l0000AAB2
	// succ:  l0000AAAF l0000AAB2
l0000AAAF:
	goto l0000ADF2
	// succ:  l0000ADF2
l0000AAB2:
	ZN = cond(0x000192D0)
	C = false
	V = false
	// succ:  l0000AABC
l0000AABC:
	v21 = Mem0[sp + 8:word32]
	Mem0[sp + 16:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	CZN = cond(Mem0[Mem0[sp + 16:word32]:word16] - Mem0[r11 + 831:word16])
	V = false
	branch Test(EQ,Z) l0000AACC
	// succ:  l0000AAC9 l0000AACC
l0000AAC9:
	goto l0000AC68
	// succ:  l0000AC68
l0000AACC:
	v50 = 0x00000001
	Mem0[sp + 4:word32] = v50
	ZN = cond(v50)
	C = false
	V = false
	r3 = Mem0[sp + 16:word32]
	ZN = cond(r3)
	C = false
	V = false
	r5 = r3 + 4
	ZN = cond(r5)
	C = false
	V = false
	r4 = Mem0[r5:word32]
	ZN = cond(r4)
	C = false
	V = false
	CZN = cond(r4 - Mem0[r11 + 834:word32])
	V = false
	branch Test(NE,Z) l0000AB00
	// succ:  l0000AAE2 l0000AB00
l0000AAE2:
	sp = sp - 0x00000004
	v53 = (uint32) 0x00019354
	Mem0[sp:uint32] = v53
	ZN = cond(v53)
	C = false
	V = false
l0000AB00:
	CZN = cond(r4 - Mem0[r11 + 839:word32])
	V = false
	branch Test(NE,Z) l0000AB4C
	// succ:  l0000AB07 l0000AB4C
l0000AB07:
	sp = sp - 0x00000004
	v54 = (uint32) 0x00019358
	Mem0[sp:uint32] = v54
	ZN = cond(v54)
	C = false
	V = false
l0000AB4C:
	CZN = cond(r4 - Mem0[r11 + 844:word32])
	V = false
	branch Test(NE,Z) l0000AB98
	// succ:  l0000AB53 l0000AB98
l0000AB53:
	sp = sp - 0x00000004
	v55 = (uint32) 0x0001935C
	Mem0[sp:uint32] = v55
	ZN = cond(v55)
	C = false
	V = false
l0000AB98:
	CZN = cond(r4 - Mem0[r11 + 849:word32])
	V = false
	branch Test(NE,Z) l0000ABC0
	// succ:  l0000AB9F l0000ABC0
l0000AB9F:
	sp = sp - 0x00000004
	v56 = (uint32) 0x00019360
	Mem0[sp:uint32] = v56
	ZN = cond(v56)
	C = false
	V = false
l0000ABC0:
	CZN = cond(r4 - Mem0[r11 + 854:word32])
	V = false
	branch Test(NE,Z) l0000ABE8
	// succ:  l0000ABC7 l0000ABE8
l0000ABC7:
	sp = sp - 0x00000004
	v57 = (uint32) 0x00019364
	Mem0[sp:uint32] = v57
	ZN = cond(v57)
	C = false
	V = false
l0000ABE8:
	CZN = cond(r4 - Mem0[r11 + 859:word32])
	V = false
	branch Test(NE,Z) l0000AC10
	// succ:  l0000ABEF l0000AC10
l0000ABEF:
	sp = sp - 0x00000004
	v58 = (uint32) 0x00019368
	Mem0[sp:uint32] = v58
	ZN = cond(v58)
	C = false
	V = false
l0000AC10:
	CZN = cond(r4 - Mem0[r11 + 864:word32])
	V = false
	branch Test(NE,Z) l0000AC38
	// succ:  l0000AC17 l0000AC38
l0000AC17:
	sp = sp - 0x00000004
	v59 = (uint32) 0x0001936C
	Mem0[sp:uint32] = v59
	ZN = cond(v59)
	C = false
	V = false
l0000AC38:
	CZN = cond(r4 - Mem0[r11 + 869:word32])
	V = false
	branch Test(NE,Z) l0000AC42
	// succ:  l0000AC3F l0000AC42
l0000AC3F:
	goto l0000ADD7
	// succ:  l0000ADD7
l0000AC42:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	sp = sp - 0x00000004
	v60 = r11 + 874
	Mem0[sp:word32] = v60
	ZN = cond(v60)
	C = false
	V = false
	sp = sp - 0x00000004
	v61 = r10 + 1515
	Mem0[sp:word32] = v61
	ZN = cond(v61)
	C = false
	V = false
	call Mem0[Mem0[sp + 16:word32]:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v62 = r10 + 1515
	Mem0[sp:word32] = v62
	ZN = cond(v62)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r10
	ZN = cond(r10)
	C = false
	V = false
	r2 = Mem0[r10 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	goto l0000ADD7
	// succ:  l0000ADD7
l0000AC68:
	r2 = (uint32) Mem0[Mem0[sp + 16:word32]:word16]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x0000000C)
	V = false
	branch Test(EQ,Z) l0000AC74
	// succ:  l0000AC71 l0000AC74
l0000AC71:
	goto l0000ADD7
	// succ:  l0000ADD7
l0000AC74:
	v31 = 0x00000002
	Mem0[sp + 4:word32] = v31
	ZN = cond(v31)
	C = false
	V = false
	r3 = Mem0[sp + 16:word32]
	ZN = cond(r3)
	C = false
	V = false
	r2 = (uint32) Mem0[r3 + 2:word16]
	ZN = cond(r2)
	C = false
	V = false
	ap = r2 - 0x00000004
	CVZN = cond(ap)
	r6 = r3 + 8
	ZN = cond(r6)
	C = false
	V = false
	v33 = 0x00000000
	Mem0[r8 + 0x000102EC:word32] = v33
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = ap
	ZN = cond(ap)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r6
	ZN = cond(r6)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	call fn0000CFBA (retsize: 4;)
	CZN = cond(Mem0[r3 + 4:word32] - r0)
	V = false
	branch Test(EQ,Z) l0000ACC6
	// succ:  l0000ACA1 l0000ACC6
l0000ACA1:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v34 = r11 + 915
	Mem0[sp:word32] = v34
	ZN = cond(v34)
	C = false
	V = false
	sp = sp - 0x00000004
	v35 = r10 + 1515
	Mem0[sp:word32] = v35
	ZN = cond(v35)
	C = false
	V = false
	call Mem0[Mem0[sp + 12:word32]:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v36 = r10 + 1515
	Mem0[sp:word32] = v36
	ZN = cond(v36)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r10
	ZN = cond(r10)
	C = false
	V = false
	r2 = Mem0[r10 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	ap = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	v37 = 0x00000000
	Mem0[sp + 4:word32] = v37
	Z = true
	N = false
	C = false
	V = false
	// succ:  l0000ACC6
l0000ACC6:
	CZN = cond(ap - 0x00000004)
	V = false
	branch Test(GT,ZN) l0000ACCE
	// succ:  l0000ACCB l0000ACCE
l0000ACCB:
	goto l0000ADA1
	// succ:  l0000ADA1
l0000ACCE:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	r9 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r7 = r6
	ZN = cond(r7)
	C = false
	V = false
	r0 = (uint32) Mem0[r7:word16]
	ZN = cond(r0)
	C = false
	V = false
	v49 = r0 - 0x00000003
	branch v49 > 0x0000001C l0000AD14
	// succ:  l0000ACD8_1 l0000AD14
l0000ACD8_1:
	call 0x0000ACDC + v49 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn0000AA6A_exit
l0000AD14:
l0000ADA1:
	r2 = Mem0[r8 + 0x000102EC:word32] << 3
	VZN = cond(r2)
	C = false
	r2 = r8 + 0x0001024C + r2
	ZN = cond(r2)
	C = false
	V = false
	v44 = 0x0000
	Mem0[r2:word16] = v44
	Z = true
	N = false
	C = false
	V = false
	r2 = Mem0[r8 + 0x000102EC:word32] << 3
	VZN = cond(r2)
	C = false
	r2 = r8 + 0x0001024E + r2
	ZN = cond(r2)
	C = false
	V = false
	v45 = 0x0000
	Mem0[r2:word16] = v45
	Z = true
	N = false
	C = false
	V = false
	r2 = Mem0[r8 + 0x000102EC:word32] << 3
	VZN = cond(r2)
	C = false
	r2 = r8 + 0x00010250 + r2
	ZN = cond(r2)
	C = false
	V = false
	v46 = 0x00000000
	Mem0[r2:word32] = v46
	Z = true
	N = false
	C = false
	V = false
	// succ:  l0000ADD7
l0000ADD7:
	r2 = Mem0[sp + 16:word32]
	ZN = cond(r2)
	C = false
	V = false
	r2 = (uint32) Mem0[r2 + 2:word16]
	ZN = cond(r2)
	C = false
	V = false
	r2 = r2 + 0x00000004
	CVZN = cond(r2)
	v38 = Mem0[sp + 12:word32] - r2
	Mem0[sp + 12:word32] = v38
	CVZN = cond(v38)
	v39 = Mem0[sp + 8:word32] + r2
	Mem0[sp + 8:word32] = v39
	CVZN = cond(v39)
	ZN = cond(Mem0[sp + 12:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LE,ZN) l0000ADF2
	// succ:  l0000ADEF l0000ADF2
l0000ADEF:
	goto l0000AABC
	// succ:  l0000AABC
l0000ADF2:
	CZN = cond(Mem0[sp + 4:word32] - 0x00000001)
	V = false
	branch Test(NE,Z) l0000AE5F
	// succ:  l0000ADF8 l0000AE5F
l0000ADF8:
	r2 = Mem0[r8 + 308:word32]
	ZN = cond(r2)
	C = false
	V = false
	branch Test(EQ,Z) l0000AE5C
	// succ:  l0000ADFF l0000AE5C
l0000ADFF:
	v25 = 0x00000000
	Mem0[r2 + 36:word32] = v25
	Z = true
	N = false
	C = false
	V = false
	r3 = Mem0[r8 + 316:word32]
	ZN = cond(r3)
	C = false
	V = false
	branch Test(EQ,Z) l0000AE1E
	// succ:  l0000AE09 l0000AE1E
l0000AE09:
	r2 = Mem0[r8 + 308:word32]
	ZN = cond(r2)
	C = false
	V = false
	v27 = Mem0[r2 + 36:word32]
	Mem0[r3 + 4:word32] = v27
	ZN = cond(v27)
	C = false
	V = false
	r2 = Mem0[r8 + 308:word32]
	ZN = cond(r2)
	C = false
	V = false
	v28 = Mem0[r8 + 316:word32]
	Mem0[r2 + 36:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	// succ:  l0000AE1E
l0000AE1E:
	r3 = Mem0[r8 + 320:word32]
	ZN = cond(r3)
	C = false
	V = false
	branch Test(EQ,Z) l0000AE3A
	// succ:  l0000AE25 l0000AE3A
l0000AE25:
	r2 = Mem0[r8 + 308:word32]
	ZN = cond(r2)
	C = false
	V = false
	v29 = Mem0[r2 + 36:word32]
	Mem0[r3 + 4:word32] = v29
	ZN = cond(v29)
	C = false
	V = false
	r2 = Mem0[r8 + 308:word32]
	ZN = cond(r2)
	C = false
	V = false
	v30 = Mem0[r8 + 320:word32]
	Mem0[r2 + 36:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	// succ:  l0000AE3A
l0000AE3A:
	ZN = cond(Mem0[r8 + 340:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000AE5F
	// succ:  l0000AE40 l0000AE5F
l0000AE40:
	r3 = Mem0[r8 + 344:word32]
	ZN = cond(r3)
	C = false
	V = false
	r2 = Mem0[r8 + 308:word32]
	ZN = cond(r2)
	C = false
	V = false
	v40 = Mem0[r2 + 36:word32]
	Mem0[r3 + 4:word32] = v40
	ZN = cond(v40)
	C = false
	V = false
	r2 = Mem0[r8 + 308:word32]
	ZN = cond(r2)
	C = false
	V = false
	v41 = Mem0[r8 + 340:word32]
	Mem0[r2 + 36:word32] = v41
	ZN = cond(v41)
	C = false
	V = false
	goto l0000AE5F
	// succ:  l0000AE5F
l0000AE5C:
	v42 = 0x00000000
	Mem0[sp + 4:word32] = v42
	Z = true
	N = false
	C = false
	V = false
	// succ:  l0000AE5F
l0000AE5F:
	r0 = Mem0[sp + 4:word32]
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000AA6A_exit
fn0000AA6A_exit:


// fn0000AE66
// Return size: 4
define fn0000AE66
fn0000AE66_entry:
	// succ:  l0000AE66
l0000AE66:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	ZN = cond(Mem0[r3 + 320:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000AE81
	// succ:  l0000AE76 l0000AE81
l0000AE76:
	sp = sp - 0x00000004
	v9 = Mem0[r3 + 320:word32]
	Mem0[sp:word32] = v9
	ZN = cond(v9)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	// succ:  l0000AE81
l0000AE81:
	ZN = cond(Mem0[r3 + 328:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000AE92
	// succ:  l0000AE87 l0000AE92
l0000AE87:
	sp = sp - 0x00000004
	v10 = Mem0[r3 + 328:word32]
	Mem0[sp:word32] = v10
	ZN = cond(v10)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	// succ:  l0000AE92
l0000AE92:
	ZN = cond(Mem0[r3 + 324:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000AEA3
	// succ:  l0000AE98 l0000AEA3
l0000AE98:
	sp = sp - 0x00000004
	v11 = Mem0[r3 + 324:word32]
	Mem0[sp:word32] = v11
	ZN = cond(v11)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	// succ:  l0000AEA3
l0000AEA3:
	ZN = cond(Mem0[r3 + 316:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000AEB4
	// succ:  l0000AEA9 l0000AEB4
l0000AEA9:
	sp = sp - 0x00000004
	v12 = Mem0[r3 + 316:word32]
	Mem0[sp:word32] = v12
	ZN = cond(v12)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	// succ:  l0000AEB4
l0000AEB4:
	ZN = cond(Mem0[r3 + 340:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000AED5
	// succ:  l0000AEBA l0000AED5
l0000AEBA:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l0000AEBC
l0000AEBC:
	ap = Mem0[r3 + 340:word32]
	ZN = cond(ap)
	C = false
	V = false
	r2 = Mem0[ap + 4:word32]
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = ap
	ZN = cond(ap)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	v16 = r2
	Mem0[r3 + 340:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	branch Test(NE,Z) l0000AEBC
	// succ:  l0000AED5 l0000AEBC
l0000AED5:
	ap = Mem0[r3 + 308:word32]
	ZN = cond(ap)
	C = false
	V = false
	branch Test(EQ,Z) l0000AEED
	// succ:  l0000AEDC l0000AEED
l0000AEDC:
	r2 = r3
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(ap - r2)
	V = false
	branch Test(EQ,Z) l0000AEED
	// succ:  l0000AEE4 l0000AEED
l0000AEE4:
	sp = sp - 0x00000004
	Mem0[sp:word32] = ap
	ZN = cond(ap)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	// succ:  l0000AEED
l0000AEED:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000AE66_exit
fn0000AE66_exit:


// fn0000AEF2
// Return size: 4
define fn0000AEF2
fn0000AEF2_entry:
	// succ:  l0000AEF2
l0000AEF2:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	r1 = Mem0[ap + 4:word32]
	ZN = cond(r1)
	C = false
	V = false
	r0 = (uint32) Mem0[r1 + 8:word16]
	ZN = cond(r0)
	C = false
	V = false
	r6 = r0 & ~0xFFFFFFF8
	ZN = cond(r6)
	C = false
	V = false
	r5 = (uint32) Mem0[r1 + 2:word16]
	ZN = cond(r5)
	C = false
	V = false
	r5 = r5 - 0x0000000C
	CVZN = cond(r5)
	ZN = cond(r6 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000AF18
	// succ:  l0000AF10 l0000AF18
l0000AF10:
	r2 = r5
	ZN = cond(r2)
	C = false
	V = false
	goto l0000AF1C
	// succ:  l0000AF1C
l0000AF18:
	r2 = (uint32) Mem0[r1 + 10:word16]
	ZN = cond(r2)
	C = false
	V = false
	// succ:  l0000AF1C
l0000AF1C:
	r4 = r2
	ZN = cond(r4)
	C = false
	V = false
	ZN = cond(Mem0[ap + 16:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000AF28
	// succ:  l0000AF24 l0000AF28
l0000AF24:
	v15 = r4
	Mem0[ap + 16:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	// succ:  l0000AF28
l0000AF28:
	r0 = Mem0[ap + 8:word32]
	ZN = cond(r0)
	C = false
	V = false
	branch Test(EQ,Z) l0000AF31
	// succ:  l0000AF2E l0000AF31
l0000AF2E:
	v16 = r4
	Mem0[r0:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	// succ:  l0000AF31
l0000AF31:
	r0 = Mem0[ap + 16:word32]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - r4)
	V = false
	branch Test(LE,ZN) l0000AF40
	// succ:  l0000AF3A l0000AF40
l0000AF3A:
	r2 = r0
	ZN = cond(r2)
	C = false
	V = false
	goto l0000AF43
	// succ:  l0000AF43
l0000AF40:
	r2 = r4
	ZN = cond(r2)
	C = false
	V = false
	// succ:  l0000AF43
l0000AF43:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	call fn000192B6 (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	branch Test(NE,Z) l0000AF54
	// succ:  l0000AF51 l0000AF54
l0000AF51:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000AEF2_exit
l0000AF54:
	ZN = cond(Mem0[ap + 12:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000AF6E
	// succ:  l0000AF59 l0000AF6E
l0000AF59:
	CZN = cond(r4 - Mem0[ap + 16:word32])
	V = false
	branch Test(GE,N) l0000AF6E
	// succ:  l0000AF5F l0000AF6E
l0000AF5F:
	sp = sp - 0x00000004
	v21 = Mem0[ap + 16:word32]
	Mem0[sp:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = Mem0[ap + 12:word32]
	Mem0[sp:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	call fn0001929E (retsize: 4;)
	// succ:  l0000AF6E
l0000AF6E:
	r0 = r6
	ZN = cond(r0)
	C = false
	V = false
	v23 = r0 - 0x00000000
	branch v23 > 0x00000002 l0000AF79
	// succ:  l0000AF71_1 l0000AF79
l0000AF71_1:
	call 0x0000AF75 + v23 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn0000AEF2_exit
l0000AF79:
fn0000AEF2_exit:


// fn0000AFDA
// Return size: 4
define fn0000AFDA
fn0000AFDA_entry:
	// succ:  l0000AFDA
l0000AFDA:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	r3_r2 = 0x0000000000000000
	Z = true
	N = false
	C = false
	V = false
	r0 = Mem0[ap + 8:word32]
	ZN = cond(r0)
	C = false
	V = false
	v14 = Mem0[ap + 8:word32] - 0x00000001
	Mem0[ap + 8:word32] = v14
	CVZN = cond(v14)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000AFED
	// succ:  l0000AFEA l0000AFED
l0000AFEA:
	goto l0000B06F
	// succ:  l0000B06F
l0000AFED:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l0000AFF0
l0000AFF0:
	ZN = cond(r2 - 0x00000000)
	C = false
	V = false
	branch Test(GT,ZN) l0000B011
	// succ:  l0000AFF4 l0000B011
l0000AFF4:
	r1 = r2 + 0x00000008
	CVZN = cond(r1)
	CZN = cond(r1 - 0x00000020)
	V = false
	branch Test(GT,ZN) l0000B011
	// succ:  l0000AFFD l0000B011
l0000AFFD:
	r0 = Mem0[ap + 12:word32]
	ZN = cond(r0)
	C = false
	V = false
	v17 = Mem0[ap + 12:word32] + 0x00000001
	Mem0[ap + 12:word32] = v17
	CVZN = cond(v17)
	r0 = (uint32) Mem0[r0:byte]
	ZN = cond(r0)
	C = false
	V = false
	r0 = __ashift(r0, r2)
	VZN = cond(r0)
	C = false
	r3 = r3 | r0
	ZN = cond(r3)
	C = false
	V = false
	r2 = r1
	ZN = cond(r2)
	C = false
	V = false
	// succ:  l0000B011
l0000B011:
	branch (r3 & 0x00000001) == 0x00000000 l0000B054
	// succ:  l0000B014 l0000B054
l0000B014:
	r3 = (uint32) SLICE(r3, ui31, 1)
	ZN = cond(r3)
	V = false
	r2 = r2 - 0x00000001
	CVZN = cond(r2)
	CZN = cond(r2 - 0x00000008)
	V = false
	branch Test(GE,N) l0000B03D
	// succ:  l0000B020 l0000B03D
l0000B020:
	r1 = r2 + 0x00000008
	CVZN = cond(r1)
	CZN = cond(r1 - 0x00000020)
	V = false
	branch Test(GT,ZN) l0000B03D
	// succ:  l0000B029 l0000B03D
l0000B029:
	r0 = Mem0[ap + 12:word32]
	ZN = cond(r0)
	C = false
	V = false
	v20 = Mem0[ap + 12:word32] + 0x00000001
	Mem0[ap + 12:word32] = v20
	CVZN = cond(v20)
	r0 = (uint32) Mem0[r0:byte]
	ZN = cond(r0)
	C = false
	V = false
	r0 = __ashift(r0, r2)
	VZN = cond(r0)
	C = false
	r3 = r3 | r0
	ZN = cond(r3)
	C = false
	V = false
	r2 = r1
	ZN = cond(r2)
	C = false
	V = false
	// succ:  l0000B03D
l0000B03D:
	r0 = Mem0[ap + 4:word32]
	ZN = cond(r0)
	C = false
	V = false
	v24 = Mem0[ap + 4:word32] + 0x00000001
	Mem0[ap + 4:word32] = v24
	CVZN = cond(v24)
	v25 = (byte) r3
	Mem0[r0:byte] = v25
	ZN = cond(v25)
	C = false
	V = false
	r2 = r2 - 0x00000008
	CVZN = cond(r2)
	r3 = (uint32) SLICE(r3, ui24, 8)
	ZN = cond(r3)
	V = false
	goto l0000B064
	// succ:  l0000B064
l0000B054:
	r0 = Mem0[ap + 4:word32]
	ZN = cond(r0)
	C = false
	V = false
	v21 = Mem0[ap + 4:word32] + 0x00000001
	Mem0[ap + 4:word32] = v21
	CVZN = cond(v21)
	v22 = 0x00
	Mem0[r0:byte] = v22
	Z = true
	N = false
	C = false
	V = false
	r2 = r2 - 0x00000001
	CVZN = cond(r2)
	r3 = (uint32) SLICE(r3, ui31, 1)
	ZN = cond(r3)
	V = false
	// succ:  l0000B064
l0000B064:
	r0 = Mem0[ap + 8:word32]
	ZN = cond(r0)
	C = false
	V = false
	v23 = Mem0[ap + 8:word32] - 0x00000001
	Mem0[ap + 8:word32] = v23
	CVZN = cond(v23)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000AFF0
	// succ:  l0000B06F l0000AFF0
l0000B06F:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000AFDA_exit
fn0000AFDA_exit:


// fn0000B072
// Return size: 4
define fn0000B072
fn0000B072_entry:
	// succ:  l0000B072
l0000B072:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	sp = sp - 0x00000004
	v8 = Mem0[ap + 8:word32]
	Mem0[sp:word32] = v8
	ZN = cond(v8)
	C = false
	V = false
	sp = sp - 0x00000004
	v9 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v9
	ZN = cond(v9)
	C = false
	V = false
	sp = sp - 0x00000004
	v11 = Mem0[r2 + 0x0000C5EF:word32]
	Mem0[sp:word32] = v11
	ZN = cond(v11)
	C = false
	V = false
	call fn0000CFBA (retsize: 4;)
	v13 = r0
	Mem0[r2 + 0x0000C5EF:word32] = v13
	ZN = cond(v13)
	C = false
	V = false
	ZN = cond(Mem0[r2 + 68:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000B0A5
	// succ:  l0000B0A2 l0000B0A5
l0000B0A2:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000B072_exit
l0000B0A5:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v17 = Mem0[ap + 8:word32]
	Mem0[sp:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	sp = sp - 0x00000004
	v18 = Mem0[ap + 0x00000004:word32]
	Mem0[sp:word32] = v18
	ZN = cond(v18)
	C = false
	V = false
	call Mem0[Mem0[r3 + 0x00010194:word32]:word32] + 2 (retsize: 4;)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000B072_exit
fn0000B072_exit:


// fn0000B192
// Return size: 4
define fn0000B192
fn0000B192_entry:
	// succ:  l0000B192
l0000B192:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFE5F38)
	C = false
	V = false
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	ZN = cond(Mem0[r2 + 0x000101F4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000B1DF
	// succ:  l0000B1AB l0000B1DF
l0000B1AB:
	sp = sp - 0x00000004
	v9 = r2 + 0x000101FC
	Mem0[sp:word32] = v9
	ZN = cond(v9)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	v11 = pc
	pc = pc + 0x00000004
	call Mem0[Mem0[v11:word32]:word32] + 2 (retsize: 4;)
	r3 = r3 + Mem0[r4 + 0x50D07FFE:real32]
	ZN = cond(r3)
	C = false
	V = false
	branch (r0 & 0x00000001) == 0x00000000 l0000B1C7
	// succ:  l0000B1C0 l0000B1C7
l0000B1C0:
	r3 = (int32) Mem0[r2 + 0x000101FC:int16]
	VZN = cond(r3)
	C = false
	// succ:  l0000B1C7
l0000B1C7:
	branch (r3 & 0x00000001) != 0x00000000 l0000B1D9
	// succ:  l0000B1CA l0000B1D9
l0000B1CA:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v32 = r4 + 968
	Mem0[sp:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	call fn0000C022 (retsize: 4;)
	r0 = 0x00000032
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000B192_exit
l0000B1D9:
	v33 = 0x00000000
	Mem0[r2 + 0x000101F4:word32] = v33
	Z = true
	N = false
	C = false
	V = false
	// succ:  l0000B1DF
l0000B1DF:
	sp = sp - 0x00000008
	v16 = 0x0000000000000000
	Mem0[sp:word64] = v16
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v18 = Mem0[r2 + 0x000101F8:word32]
	Mem0[sp:word32] = v18
	ZN = cond(v18)
	C = false
	V = false
	sp = sp - 0x00000004
	v20 = Mem0[ap + 8:word32]
	Mem0[sp:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	sp = sp - 0x00000004
	v21 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	sp = sp - 0x00000008
	v22 = 0x0000000000000000
	Mem0[sp:word64] = v22
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	v23 = r2 + 0x000101FC
	Mem0[sp:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000030
	ZN = cond(0x00000030)
	C = false
	V = false
	sp = sp - 0x00000004
	v24 = Mem0[r2 + 0x000101F0:word32]
	Mem0[sp:word32] = v24
	ZN = cond(v24)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	v25 = pc
	pc = pc + 0x00000004
	call Mem0[Mem0[v25:word32]:word32] + 2 (retsize: 4;)
	v26 = Mem0[r0 + 20816:word32] | 0x00013206
	Mem0[Mem0[r0 + 20816:word32]:word32] = v26
	ZN = cond(v26)
	C = false
	V = false
	branch (r0 & 0x00000001) != 0x00000000 l0000B21D
	// succ:  l0000B20E l0000B21D
l0000B20E:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r1
	ZN = cond(r1)
	C = false
	V = false
	sp = sp - 0x00000004
	v28 = r4 + 1011
	Mem0[sp:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	call fn0000C022 (retsize: 4;)
	r0 = 0x00000032
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000B192_exit
l0000B21D:
	v30 = 0x00000001
	Mem0[r2 + 0x000101F4:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	r0 = (uint32) SLICE(Mem0[ap + 8:word32], ui23, 9)
	ZN = cond(r0)
	V = false
	v31 = Mem0[r2 + 0x000101F8:word32] + r0
	Mem0[r2 + 0x000101F8:word32] = v31
	CVZN = cond(v31)
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000B192_exit
fn0000B192_exit:


// fn0000B86E
// Return size: 4
define fn0000B86E
fn0000B86E_entry:
	// succ:  l0000B86E
l0000B86E:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFE5F38)
	C = false
	V = false
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	sp = sp - 0x00000004
	v8 = Mem0[r2 + 312:word32]
	Mem0[sp:word32] = v8
	ZN = cond(v8)
	C = false
	V = false
	v10 = pc
	pc = pc + 0x00000004
	call Mem0[Mem0[v10:word32]:word32] + 2 (retsize: 4;)
	v12 = (word16) r1 | Mem0[r1 + 0x50D07FFE:word16]
	r1 = DPB(r1, v12, 0)
	ZN = cond(v12)
	C = false
	V = false
	branch (r0 & 0x00000001) != 0x00000000 l0000B8AC
	// succ:  l0000B890 l0000B8AC
l0000B890:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r1
	ZN = cond(r1)
	C = false
	V = false
	sp = sp - 0x00000004
	v15 = r3 + 1188
	Mem0[sp:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	call fn0000C022 (retsize: 4;)
	r0 = Mem0[r2 + 312:word32]
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v16 = Mem0[r0 + 12:word32]
	Mem0[sp:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	sp = sp - 0x00000004
	v17 = r3 + 1222
	Mem0[sp:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	call fn0000C022 (retsize: 4;)
	// succ:  l0000B8AC
l0000B8AC:
	r0 = Mem0[r2 + 312:word32]
	ZN = cond(r0)
	C = false
	V = false
	v19 = Mem0[ap + 8:word16]
	Mem0[r0 + 34:word16] = v19
	ZN = cond(v19)
	C = false
	V = false
	r0 = Mem0[r2 + 312:word32]
	ZN = cond(r0)
	C = false
	V = false
	v20 = Mem0[ap + 4:word32]
	Mem0[r0 + 40:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	sp = sp - 0x00000004
	v21 = Mem0[r2 + 312:word32]
	Mem0[sp:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	v22 = pc
	pc = pc + 0x00000004
	call Mem0[Mem0[v22:word32]:word32] + 2 (retsize: 4;)
	v23 = Mem0[r1 + 0x50D07FFE:word16]
	r1 = DPB(r1, v23, 0)
	ZN = cond(v23)
	C = false
	V = false
	branch (r0 & 0x00000001) != 0x00000000 l0000B8F1
	// succ:  l0000B8D1 l0000B8F1
l0000B8D1:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r1
	ZN = cond(r1)
	C = false
	V = false
	sp = sp - 0x00000004
	v24 = r3 + 1223
	Mem0[sp:word32] = v24
	ZN = cond(v24)
	C = false
	V = false
	call fn0000C022 (retsize: 4;)
	r0 = Mem0[r2 + 312:word32]
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v25 = Mem0[r0 + 12:word32]
	Mem0[sp:word32] = v25
	ZN = cond(v25)
	C = false
	V = false
	sp = sp - 0x00000004
	v26 = r3 + 1258
	Mem0[sp:word32] = v26
	ZN = cond(v26)
	C = false
	V = false
	call fn0000C022 (retsize: 4;)
	r0 = 0x00000032
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000B86E_exit
l0000B8F1:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000B86E_exit
fn0000B86E_exit:


// fn0000B8F6
// Return size: 4
define fn0000B8F6
fn0000B8F6_entry:
	// succ:  l0000B8F6
l0000B8F6:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFE5F38)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	ZN = cond(Mem0[r2 + 12:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000B940
	// succ:  l0000B913 l0000B940
l0000B913:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v10 = Mem0[ap + 8:word32]
	Mem0[sp:word32] = v10
	ZN = cond(v10)
	C = false
	V = false
	sp = sp - 0x00000004
	v11 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v11
	ZN = cond(v11)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v14 = r4 + 1259
	Mem0[sp:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	goto l0000B9B2
	// succ:  l0000B9B2
l0000B940:
	sp = sp - 0x00000004
	v16 = Mem0[r3 + 312:word32]
	Mem0[sp:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	v18 = pc
	pc = pc + 0x00000004
	call Mem0[Mem0[v18:word32]:word32] + 2 (retsize: 4;)
	v20 = (word16) r1 | Mem0[r1 + 0x50D07FFE:word16]
	r1 = DPB(r1, v20, 0)
	ZN = cond(v20)
	C = false
	V = false
	branch (r0 & 0x00000001) != 0x00000000 l0000B96D
	// succ:  l0000B951 l0000B96D
l0000B951:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r1
	ZN = cond(r1)
	C = false
	V = false
	sp = sp - 0x00000004
	v21 = r4 + 1261
	Mem0[sp:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	call fn0000C022 (retsize: 4;)
	r0 = Mem0[r3 + 312:word32]
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = Mem0[r0 + 12:word32]
	Mem0[sp:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	sp = sp - 0x00000004
	v23 = r4 + 1295
	Mem0[sp:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	call fn0000C022 (retsize: 4;)
	// succ:  l0000B96D
l0000B96D:
	r0 = Mem0[r3 + 312:word32]
	ZN = cond(r0)
	C = false
	V = false
	v26 = Mem0[ap + 8:word16]
	Mem0[r0 + 34:word16] = v26
	ZN = cond(v26)
	C = false
	V = false
	r0 = Mem0[r3 + 312:word32]
	ZN = cond(r0)
	C = false
	V = false
	v27 = Mem0[ap + 4:word32]
	Mem0[r0 + 40:word32] = v27
	ZN = cond(v27)
	C = false
	V = false
	sp = sp - 0x00000004
	v28 = Mem0[r3 + 312:word32]
	Mem0[sp:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	v29 = pc
	pc = pc + 0x00000004
	call Mem0[Mem0[v29:word32]:word32] + 2 (retsize: 4;)
	v30 = (byte) r1 | Mem0[r1 + 0x50D07FFE:byte]
	r1 = DPB(r1, v30, 0)
	ZN = cond(v30)
	C = false
	V = false
	branch (r0 & 0x00000001) != 0x00000000 l0000B9B2
	// succ:  l0000B992 l0000B9B2
l0000B992:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r1
	ZN = cond(r1)
	C = false
	V = false
	sp = sp - 0x00000004
	v31 = r4 + 1296
	Mem0[sp:word32] = v31
	ZN = cond(v31)
	C = false
	V = false
	call fn0000C022 (retsize: 4;)
	r0 = Mem0[r3 + 312:word32]
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v32 = Mem0[r0 + 12:word32]
	Mem0[sp:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	sp = sp - 0x00000004
	v33 = r4 + 1329
	Mem0[sp:word32] = v33
	ZN = cond(v33)
	C = false
	V = false
	call fn0000C022 (retsize: 4;)
	r0 = 0x00000032
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000B8F6_exit
l0000B9B2:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000B8F6_exit
fn0000B8F6_exit:


// fn0000B9BA
// Return size: 4
define fn0000B9BA
fn0000B9BA_entry:
	// succ:  l0000B9BA
l0000B9BA:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000008
	v7 = 0x0000000000000000
	Mem0[sp:word64] = v7
	Z = true
	N = false
	C = false
	V = false
	call Mem0[Mem0[ap + 0x00010194:word32]:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000B9DB
	// succ:  l0000B9DA l0000B9DB
l0000B9DA:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000B9BA_exit
l0000B9DB:
	ZN = cond(Mem0[r2 + 12:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000B9E1
	// succ:  l0000B9E0 l0000B9E1
l0000B9E0:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000B9BA_exit
l0000B9E1:
	call Mem0[Mem0[ap + 0x00010198:word32]:word32] + 2 (retsize: 4;)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000B9BA_exit
fn0000B9BA_exit:


// fn0000BBB2
// Return size: 4
define fn0000BBB2
fn0000BBB2_entry:
	// succ:  l0000BBB2
l0000BBB2:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	r2 = Mem0[ap + 4:word32]
	ZN = cond(r2)
	C = false
	V = false
	r3 = Mem0[r2 + 20:word32] + 0xFFFFFFBA
	CVZN = cond(r3)
	r0 = Mem0[r2 + 16:word32]
	ZN = cond(r0)
	C = false
	V = false
	r1 = Mem0[r2 + 12:word32] - 0x00000001
	CVZN = cond(r1)
	r7 = Mem0[r2 + 8:word32]
	ZN = cond(r7)
	C = false
	V = false
	r8 = Mem0[r2 + 4:word32]
	ZN = cond(r8)
	C = false
	V = false
	r6 = Mem0[r2:word32]
	ZN = cond(r6)
	C = false
	V = false
	r2 = r3 * 0x0000016D
	CVZN = cond(r2)
	r1 = r1 + r2
	CVZN = cond(r1)
	r4 = r3 + 0x00000001
	CVZN = cond(r4)
	r4 = r4 / 0x00000004
	CVZN = cond(r4)
	r2 = r3 + 0x00000045
	CVZN = cond(r2)
	r2 = r2 / 0x00000064
	CVZN = cond(r2)
	r4 = r4 - r2
	CVZN = cond(r4)
	r2 = r3 + 0x00000171
	CVZN = cond(r2)
	r2 = r2 / 0x00000190
	CVZN = cond(r2)
	r4 = r4 + r2
	CVZN = cond(r4)
	r4 = r4 + r1
	CVZN = cond(r4)
	r2 = (int32) Mem0[r5 + 0x0001052A + r0 * 2:int16]
	VZN = cond(r2)
	C = false
	r4 = r4 + r2
	CVZN = cond(r4)
	v19 = 0x00
	r9 = DPB(r9, v19, 0)
	Z = true
	N = false
	C = false
	V = false
	CZN = cond(r0 - 0x00000001)
	V = false
	branch Test(LE,ZN) l0000BC63
	// succ:  l0000BC28 l0000BC63
l0000BC28:
	r3 = r3 + 0x000007B2
	CVZN = cond(r3)
l0000BC63:
	r2 = (int32) (int8) r9
	VZN = cond(r2)
	C = false
	r4 = r4 + r2
	CVZN = cond(r4)
	r4 = r4 * 0x00015180
	CVZN = cond(r4)
	r7 = r7 * 0x00000E10
	CVZN = cond(r7)
	r4 = r4 + r7
	CVZN = cond(r4)
	r8 = r8 * 0x0000003C
	CVZN = cond(r8)
	r6 = r6 + r8
	CVZN = cond(r6)
	r0 = r6 + r4
	CVZN = cond(r0)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000BBB2_exit
fn0000BBB2_exit:


// fn0000BC8A
// Return size: 4
define fn0000BC8A
fn0000BC8A_entry:
	// succ:  l0000BC8A
l0000BC8A:
	sp = fp
	sp = sp - 0x00000008
	CVZN = cond(sp)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	call fn000192A2 (retsize: 4;)
	v9 = r0
	Mem0[fp + -8:word32] = v9
	ZN = cond(v9)
	C = false
	V = false
	sp = sp - 0x00000004
	v10 = fp + -8
	Mem0[sp:word32] = v10
	ZN = cond(v10)
	C = false
	V = false
	call fn000192A6 (retsize: 4;)
	r1 = r0
	ZN = cond(r1)
	C = false
	V = false
	r2 = Mem0[ap + 4:word32]
	ZN = cond(r2)
	C = false
	V = false
	r0 = (uint32) SLICE(r2, ui23, 9)
	ZN = cond(r0)
	V = false
	r0 = r0 & ~0xFFFFFF80
	ZN = cond(r0)
	C = false
	V = false
	v14 = r0 + 0x00000050
	Mem0[r1 + 20:word32] = v14
	CVZN = cond(v14)
	r0 = (uint32) SLICE(r2, ui27, 5)
	ZN = cond(r0)
	V = false
	r0 = r0 & ~0xFFFFFFF0
	ZN = cond(r0)
	C = false
	V = false
	v15 = r0 - 0x00000001
	Mem0[r1 + 16:word32] = v15
	CVZN = cond(v15)
	v16 = Mem0[ap + 4:word32] & ~0xFFFFFFE0
	Mem0[r1 + 12:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	r2 = Mem0[ap + 8:word32]
	ZN = cond(r2)
	C = false
	V = false
	r0 = (uint32) SLICE(r2, ui21, 11)
	ZN = cond(r0)
	V = false
	v17 = r0 & ~0xFFFFFFE0
	Mem0[r1 + 8:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	r0 = (uint32) SLICE(r2, ui27, 5)
	ZN = cond(r0)
	V = false
	v18 = r0 & ~0xFFFFFFC0
	Mem0[r1 + 4:word32] = v18
	ZN = cond(v18)
	C = false
	V = false
	r0 = Mem0[ap + 8:word32] << 1
	VZN = cond(r0)
	C = false
	v20 = r0 & ~0xFFFFFFC1
	Mem0[r1:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r1
	ZN = cond(r1)
	C = false
	V = false
	call fn0000BBB2 (retsize: 4;)
	r4 = r0
	ZN = cond(r4)
	C = false
	V = false
	r2 = 0x00000003
	ZN = cond(r2)
	C = false
	V = false
	v22 = r4
	Mem0[fp + 0xFFFFFFF8:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	// succ:  l0000BD15_thunk_fn0000BD1C
l0000BD15_thunk_fn0000BD1C:
	call fn0000BD1C (retsize: 0;)
	return
	// succ:  fn0000BC8A_exit
fn0000BC8A_exit:


// fn0000BD08
// Return size: 0
define fn0000BD08
fn0000BD08_entry:
	// succ:  l0000BD08
l0000BD08:
	sp = fp
	sp = sp - 0x00000004
	Mem0[sp:word32] = r1
	ZN = cond(r1)
	C = false
	V = false
	call fn0000BBB2 (retsize: 4;)
	r4 = r0
	ZN = cond(r4)
	C = false
	V = false
	r2 = 0x00000003
	ZN = cond(r2)
	C = false
	V = false
	v11 = r4
	Mem0[fp + 0xFFFFFFF8:word32] = v11
	ZN = cond(v11)
	C = false
	V = false
	// succ:  l0000BD15_thunk_fn0000BD1C
l0000BD15_thunk_fn0000BD1C:
	call fn0000BD1C (retsize: 0;)
	return
	// succ:  fn0000BD08_exit
fn0000BD08_exit:


// fn0000BD1C
// Return size: 0
define fn0000BD1C
fn0000BD1C_entry:
	// succ:  l0000BD1C
l0000BD1C:
	sp = v3
	sp = sp - 0x00000004
	v5 = fp + -8
	Mem0[sp:word32] = v5
	ZN = cond(v5)
	C = false
	V = false
	call fn000192A6 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	call fn0000BBB2 (retsize: 4;)
	r0 = r4 - r0
	CVZN = cond(r0)
	branch Test(EQ,Z) l0000BD3B
	// succ:  l0000BD33 l0000BD3B
l0000BD33:
	v13 = Mem0[fp + -8:word32] + r0
	Mem0[fp + -8:word32] = v13
	CVZN = cond(v13)
	r2 = r2 - 0x00000001
	CVZN = cond(r2)
	branch Test(GT,ZN) l0000BD1C
	// succ:  l0000BD3B l0000BD1C
l0000BD3B:
	CZN = cond(Mem0[ap + 4:word32] - 0x00007432)
	V = false
	branch Test(ULT,C) l0000BD53
	// succ:  l0000BD45 l0000BD53
l0000BD45:
	CZN = cond(Mem0[fp + -8:word32] - 0x70000000)
	V = false
	branch Test(UGE,C) l0000BD53
	// succ:  l0000BD4F l0000BD53
l0000BD4F:
	v17 = -0x00000001
	Mem0[fp + -8:word32] = v17
	CVZN = cond(v17)
	// succ:  l0000BD53
l0000BD53:
	r0 = Mem0[fp + -8:word32]
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000BD1C_exit
fn0000BD1C_exit:


// fn0000BDC2
// Return size: 0
define fn0000BDC2
fn0000BDC2_entry:
	// succ:  l0000BDC2
l0000BDC2:
	sp = fp
	sp = sp - 0x00000008
	CVZN = cond(sp)
	ZN = cond(0xFFFE5F38)
	C = false
	V = false
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
fn0000BDC2_exit:


// fn0000C022
// Return size: 4
define fn0000C022
fn0000C022_entry:
	// succ:  l0000C022
l0000C022:
	sp = fp
	sp = sp - 0x00000010
	CVZN = cond(sp)
	ZN = cond(0xFFFE5F38)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	v8 = (uint16) 0xFF
	Mem0[fp + -16:uint16] = v8
	ZN = cond(v8)
	C = false
	V = false
	v9 = 0x0E
	Mem0[fp + -14:byte] = v9
	ZN = cond(v9)
	C = false
	V = false
	v10 = 0x01
	Mem0[fp + -13:byte] = v10
	ZN = cond(v10)
	C = false
	V = false
	v12 = r3 + 0x000105C5
	Mem0[fp + -12:word32] = v12
	ZN = cond(v12)
	C = false
	V = false
	v13 = 0x00000000
	Mem0[fp + -8:word32] = v13
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000008
	v16 = 0x0000000000000000
	Mem0[sp:word64] = v16
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	v17 = fp + -16
	Mem0[sp:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	sp = sp - 0x00000004
	v18 = fp + -8
	Mem0[sp:word32] = v18
	ZN = cond(v18)
	C = false
	V = false
	sp = sp - 0x00000004
	v20 = ap + 8
	Mem0[sp:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	call fn0001932E (retsize: 4;)
	branch (r0 & 0x00000001) != 0x00000000 l0000C094
	// succ:  l0000C067 l0000C094
l0000C067:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = Mem0[ap + 8:word32]
	Mem0[sp:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	sp = sp - 0x00000004
	v23 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	sp = sp - 0x00000004
	v25 = r4 + 1619
	Mem0[sp:word32] = v25
	ZN = cond(v25)
	C = false
	V = false
	sp = sp - 0x00000004
	v27 = r2 + 1515
	Mem0[sp:word32] = v27
	ZN = cond(v27)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v28 = r2 + 1515
	Mem0[sp:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000C022_exit
l0000C094:
	r0 = Mem0[fp + -8:word32]
	ZN = cond(r0)
	C = false
	V = false
	v29 = 0x00
	Mem0[r3 + 0x000105C5:byte] = v29
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v30 = r3 + 0x000105C5
	Mem0[sp:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	sp = sp - 0x00000004
	v31 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v31
	ZN = cond(v31)
	C = false
	V = false
	sp = sp - 0x00000004
	v32 = r4 + 1642
	Mem0[sp:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	sp = sp - 0x00000004
	v33 = r2 + 1515
	Mem0[sp:word32] = v33
	ZN = cond(v33)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v34 = r2 + 1515
	Mem0[sp:word32] = v34
	ZN = cond(v34)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000C022_exit
fn0000C022_exit:


// fn0000C0CE
// Return size: 0
define fn0000C0CE
fn0000C0CE_entry:
	// succ:  l0000C0CE
l0000C0CE:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	ZN = cond(Mem0[r6 + 0x00010A78:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000C0F7
	// succ:  l0000C0E0 l0000C0F7
l0000C0E0:
	sp = sp - 0x00000004
	v9 = r6 + 0x000108C5
	Mem0[sp:word32] = v9
	ZN = cond(v9)
	C = false
	V = false
	sp = sp - 0x00000004
	v11 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v11
	ZN = cond(v11)
	C = false
	V = false
	call fn000192D6 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000C0F7
	// succ:  l0000C0F4 l0000C0F7
l0000C0F4:
	goto l0000C1CB
	// succ:  l0000C1CB
l0000C0F7:
	sp = sp - 0x00000004
	v13 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v13
	ZN = cond(v13)
	C = false
	V = false
	sp = sp - 0x00000004
	v14 = r6 + 0x000108C5
	Mem0[sp:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	call fn000192BE (retsize: 4;)
	v15 = 0x00000001
	Mem0[r6 + 0x00010A78:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
l0000C1CB:
	sp = sp - 0x00000004
	v16 = r6 + 0x000109C5
	Mem0[sp:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	v18 = pc
	pc = pc + 0x00000004
	call Mem0[Mem0[v18:word32]:word32] + 2 (retsize: 4;)
fn0000C0CE_exit:


// fn0000C1FE
// Return size: 0
define fn0000C1FE
fn0000C1FE_entry:
	// succ:  l0000C1FE
l0000C1FE:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	r4 = Mem0[r3 + 0x0000C67A:word32]
	ZN = cond(r4)
	C = false
	V = false
	CZN = cond(Mem0[r2 + 0x00010AA4:word32] - 0xFFFFFFFF)
	V = false
	branch Test(EQ,Z) l0000C226
	// succ:  l0000C223 l0000C226
l0000C223:
	goto l0000C327
	// succ:  l0000C327
l0000C226:
	v12 = 0x00000000
	Mem0[r2 + 0x00010AA4:word32] = v12
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	v14 = r2 + 0x00010AA4
	Mem0[sp:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	v16 = pc
	pc = pc + 0x00000004
	call Mem0[Mem0[v16:word32]:word32] + 2 (retsize: 4;)
	v18 = atomic_fetch_add(Mem0[r11 + -3953:word16], Mem0[r2 + 0x50E97FFE:word16])
	Mem0[r11 + -3953:word16] = v18
	CVZN = cond(v18)
l0000C327:
	ap = Mem0[r3 + 1511:word32]
	ZN = cond(ap)
	C = false
	V = false
	r0 = Mem0[ap + 12:word32]
	ZN = cond(r0)
	C = false
	V = false
	v21 = r0 - 0x00000000
	branch v21 > 0x00000010 l0000C354
	// succ:  l0000C330_1 l0000C354
l0000C330_1:
	call 0x0000C334 + v21 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn0000C1FE_exit
l0000C354:
	call fn0000F457 (retsize: 4;)
	v23 = (uint16) 0x00
	Mem0[Mem0[r5 + 336:word32]:uint16] = v23
	ZN = cond(v23)
	C = false
	V = false
	call fn40009A48 (retsize: 4;)
	return
	// succ:  fn0000C1FE_exit
fn0000C1FE_exit:


// fn0000C6FA
// Return size: 4
define fn0000C6FA
fn0000C6FA_entry:
	// succ:  l0000C6FA
l0000C6FA:
	sp = fp
	sp = sp + -224
	ZN = cond(sp)
	C = false
	V = false
	ZN = cond(0xFFFE5F38)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0x00019370)
	C = false
	V = false
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	r9 = Mem0[ap + 8:word32] & ~0xFFFFFFF8
	ZN = cond(r9)
	C = false
	V = false
	branch Test(EQ,Z) l0000C729
	// succ:  l0000C726 l0000C729
l0000C726:
	goto l0000C919
	// succ:  l0000C919
l0000C729:
	v10 = 0x0000
	Mem0[fp + -40:word16] = v10
	Z = true
	N = false
	C = false
	V = false
	v12 = 0x0003
	Mem0[fp + -38:word16] = v12
	ZN = cond(v12)
	C = false
	V = false
	v13 = 0x00000000
	Mem0[fp + -36:word32] = v13
	Z = true
	N = false
	C = false
	V = false
	v14 = 0x0000
	Mem0[fp + -32:word16] = v14
	Z = true
	N = false
	C = false
	V = false
	v15 = 0x0004
	Mem0[fp + -30:word16] = v15
	ZN = cond(v15)
	C = false
	V = false
	v16 = 0x00000000
	Mem0[fp + -28:word32] = v16
	Z = true
	N = false
	C = false
	V = false
	v17 = 0x0000
	Mem0[fp + -24:word16] = v17
	Z = true
	N = false
	C = false
	V = false
	v18 = 0x0005
	Mem0[fp + -22:word16] = v18
	ZN = cond(v18)
	C = false
	V = false
	v19 = 0x0000000000000000
	Mem0[fp + -20:word64] = v19
	Z = true
	N = false
	C = false
	V = false
	v20 = 0x0000000000000000
	Mem0[fp + -12:word64] = v20
	Z = true
	N = false
	C = false
	V = false
	v22 = r6 + 0x00010ABC
	Mem0[r6 + 0x00010CEC:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	v23 = Mem0[r6 + 0x00010CEC:word32]
	Mem0[r6 + 0x00010CC4:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	v24 = Mem0[r6 + 0x00010CC4:word32]
	Mem0[r6 + 0x00010CC0:word32] = v24
	ZN = cond(v24)
	C = false
	V = false
	v25 = Mem0[r6 + 0x00010CC0:word32]
	Mem0[r6 + 0x00010CDC:word32] = v25
	ZN = cond(v25)
	C = false
	V = false
	v26 = 0x00000000
	Mem0[r6 + 0x00010CE8:word32] = v26
	Z = true
	N = false
	C = false
	V = false
	v27 = 0x0000000000000000
	Mem0[r6 + 0x00010CCC:word64] = v27
	Z = true
	N = false
	C = false
	V = false
	v28 = Mem0[ap + 4:word32]
	Mem0[fp + -44:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	sp = sp - 0x00000004
	v29 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v29
	ZN = cond(v29)
	C = false
	V = false
	call fn000192C6 (retsize: 4;)
	v31 = (word16) r0
	Mem0[fp + -48:word16] = v31
	ZN = cond(v31)
	C = false
	V = false
	r2 = (uint32) (word16) r0
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x000000FF)
	V = false
	branch Test(ULE,CZ) l0000C7A5
	// succ:  l0000C7A1 l0000C7A5
l0000C7A1:
	r0 = 0x00000004
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000C6FA_exit
l0000C7A5:
	sp = sp - 0x00000004
	v35 = fp + -8
	Mem0[sp:word32] = v35
	ZN = cond(v35)
	C = false
	V = false
	sp = sp - 0x00000004
	v36 = fp + -40
	Mem0[sp:word32] = v36
	ZN = cond(v36)
	C = false
	V = false
	sp = sp - 0x00000004
	v37 = fp + -48
	Mem0[sp:word32] = v37
	ZN = cond(v37)
	C = false
	V = false
	v39 = pc
	pc = pc + 0x00000004
	call Mem0[Mem0[v39:word32]:word32] + 2 (retsize: 4;)
	v40 = __ashift(0x00000004, Mem0[r2 + 0x50E87FFE:word32])
	Mem0[Mem0[r0 + 20483:word32]:word32] = v40
	VZN = cond(v40)
	C = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000C6FA_exit
l0000C919:
	CZN = cond(r9 - 0x00000001)
	V = false
	branch Test(EQ,Z) l0000C921
	// succ:  l0000C91E l0000C921
l0000C91E:
	goto l0000C9B3
	// succ:  l0000C9B3
l0000C921:
	sp = sp - 0x00000004
	v43 = r7 + 0x0000C701
	Mem0[sp:word32] = v43
	ZN = cond(v43)
	C = false
	V = false
	call fn000192C6 (retsize: 4;)
	r0 = r0 + Mem0[r6 + 0x00010CE8:word32]
	CVZN = cond(r0)
	r0 = r0 + 0x0000000D
	CVZN = cond(r0)
	CZN = cond(r0 - 0x000000FF)
	V = false
	branch Test(ULE,CZ) l0000C945
	// succ:  l0000C941 l0000C945
l0000C941:
	r0 = 0x00000004
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000C6FA_exit
l0000C945:
	ZN = cond(Mem0[r6 + 0x00010CE8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000C974
	// succ:  l0000C94D l0000C974
l0000C94D:
	v51 = r6 + 0x00010ABC
	Mem0[r6 + 0x00010CEC:word32] = v51
	ZN = cond(v51)
	C = false
	V = false
	v52 = Mem0[r6 + 0x00010CEC:word32]
	Mem0[r6 + 0x00010CC4:word32] = v52
	ZN = cond(v52)
	C = false
	V = false
	v53 = Mem0[r6 + 0x00010CC4:word32]
	Mem0[r6 + 0x00010CC0:word32] = v53
	ZN = cond(v53)
	C = false
	V = false
	v54 = 0x0000000000000000
	Mem0[r6 + 0x00010CCC:word64] = v54
	Z = true
	N = false
	C = false
	V = false
	// succ:  l0000C974
l0000C974:
	v55 = Mem0[r6 + 0x00010CEC:word32]
	Mem0[r6 + 0x00010CDC:word32] = v55
	ZN = cond(v55)
	C = false
	V = false
	r2 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(Mem0[r6 + 0x00010CE4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000C98B
	// succ:  l0000C989 l0000C98B
l0000C989:
	r2 = r2 + 0x00000001
	CVZN = cond(r2)
	// succ:  l0000C98B
l0000C98B:
	v63 = r2
	Mem0[r6 + 0x00010CE0:word32] = v63
	ZN = cond(v63)
	C = false
	V = false
	v64 = Mem0[r6 + 0x00010CD8:word32]
	Mem0[r6 + 0x00010CD0:word32] = v64
	ZN = cond(v64)
	C = false
	V = false
	branch Test(EQ,Z) l0000C9AA
	// succ:  l0000C99F l0000C9AA
l0000C99F:
	r2 = Mem0[r6 + 0x00010CDC:word32]
	ZN = cond(r2)
	C = false
	V = false
	v65 = 0x2E
	Mem0[r2 + -1:byte] = v65
	ZN = cond(v65)
	C = false
	V = false
	// succ:  l0000C9AA
l0000C9AA:
	v71 = 0x00
	Mem0[Mem0[r6 + 0x00010CDC:word32]:byte] = v71
	Z = true
	N = false
	C = false
	V = false
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000C6FA_exit
l0000C9B3:
	CZN = cond(r9 - 0x00000002)
	V = false
	branch Test(EQ,Z) l0000C9BB
	// succ:  l0000C9B8 l0000C9BB
l0000C9B8:
	goto l0000CA94
	// succ:  l0000CA94
l0000C9BB:
	sp = sp - 0x00000004
	v45 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v45
	ZN = cond(v45)
	C = false
	V = false
	call fn000192C6 (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	ZN = cond(Mem0[r6 + 0x00010CE0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000C9FB
	// succ:  l0000C9D0 l0000C9FB
l0000C9D0:
	r2 = Mem0[r6 + 0x00010CDC:word32]
	ZN = cond(r2)
	C = false
	V = false
	v47 = Mem0[r6 + 0x00010CDC:word32] + 0x00000001
	Mem0[r6 + 0x00010CDC:word32] = v47
	CVZN = cond(v47)
	v48 = 0x5B
	Mem0[r2:byte] = v48
	ZN = cond(v48)
	C = false
	V = false
	ZN = cond(r3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000C9F5
	// succ:  l0000C9E5 l0000C9F5
l0000C9E5:
	r2 = Mem0[r6 + 0x00010CDC:word32]
	ZN = cond(r2)
	C = false
	V = false
	v49 = Mem0[r6 + 0x00010CDC:word32] + 0x00000001
	Mem0[r6 + 0x00010CDC:word32] = v49
	CVZN = cond(v49)
	v50 = 0x2E
	Mem0[r2:byte] = v50
	ZN = cond(v50)
	C = false
	V = false
	// succ:  l0000C9F5
l0000C9F5:
	v87 = 0x00000000
	Mem0[r6 + 0x00010CE0:word32] = v87
	Z = true
	N = false
	C = false
	V = false
	// succ:  l0000C9FB
l0000C9FB:
	CZN = cond(r3 - 0x00000001)
	V = false
	branch Test(NE,Z) l0000CA06
	// succ:  l0000CA00 l0000CA06
l0000CA00:
	CZN = cond(Mem0[Mem0[ap + 4:word32]:byte] - 0x2E)
	V = false
	branch Test(EQ,Z) l0000CA7C
	// succ:  l0000CA06 l0000CA7C
l0000CA06:
	CZN = cond(r3 - 0x00000002)
	V = false
	branch Test(NE,Z) l0000CA3C
	// succ:  l0000CA0B l0000CA3C
l0000CA0B:
	r2 = Mem0[ap + 4:word32]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(Mem0[r2:byte] - 0x2E)
	V = false
	branch Test(NE,Z) l0000CA3C
	// succ:  l0000CA14 l0000CA3C
l0000CA14:
	CZN = cond(Mem0[r2 + 1:byte] - 0x2E)
	V = false
	branch Test(NE,Z) l0000CA3C
	// succ:  l0000CA1A l0000CA3C
l0000CA1A:
	r2 = Mem0[r6 + 0x00010CDC:word32]
	ZN = cond(r2)
	C = false
	V = false
	v88 = Mem0[r6 + 0x00010CDC:word32] + 0x00000001
	Mem0[r6 + 0x00010CDC:word32] = v88
	CVZN = cond(v88)
	v89 = 0x2D
	Mem0[r2:byte] = v89
	ZN = cond(v89)
	C = false
	V = false
	r2 = Mem0[r6 + 0x00010CDC:word32]
	ZN = cond(r2)
	C = false
	V = false
	v90 = Mem0[r6 + 0x00010CDC:word32] + 0x00000001
	Mem0[r6 + 0x00010CDC:word32] = v90
	CVZN = cond(v90)
	v91 = 0x2E
	Mem0[r2:byte] = v91
	ZN = cond(v91)
	C = false
	V = false
	goto l0000CA7C
	// succ:  l0000CA7C
l0000CA3C:
	r2 = Mem0[r6 + 0x00010CDC:word32] - Mem0[r6 + 0x00010CBC:word32]
	CVZN = cond(r2)
	r2 = r2 + r3
	CVZN = cond(r2)
	CZN = cond(r2 - 0x000000FF)
	V = false
	branch Test(LE,ZN) l0000CA58
	// succ:  l0000CA54 l0000CA58
l0000CA54:
	r0 = 0x00000004
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000C6FA_exit
l0000CA58:
	sp = sp - 0x00000004
	v94 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v94
	ZN = cond(v94)
	C = false
	V = false
	sp = sp - 0x00000004
	v95 = Mem0[r6 + 0x00010CDC:word32]
	Mem0[sp:word32] = v95
	ZN = cond(v95)
	C = false
	V = false
	call fn000192BE (retsize: 4;)
	v96 = Mem0[r6 + 0x00010CDC:word32] + r3
	Mem0[r6 + 0x00010CDC:word32] = v96
	CVZN = cond(v96)
	v97 = 0x2E
	Mem0[Mem0[r6 + 0x00010CDC:word32]:byte] = v97
	ZN = cond(v97)
	C = false
	V = false
	v98 = Mem0[r6 + 0x00010CDC:word32] + 0x00000001
	Mem0[r6 + 0x00010CDC:word32] = v98
	CVZN = cond(v98)
	// succ:  l0000CA7C
l0000CA7C:
	r2 = Mem0[r6 + 0x00010CDC:word32]
	ZN = cond(r2)
	C = false
	V = false
	v92 = r2 - Mem0[r6 + 0x00010CC4:word32]
	Mem0[r6 + 0x00010CD0:word32] = v92
	CVZN = cond(v92)
	v93 = 0x00
	Mem0[r2:byte] = v93
	Z = true
	N = false
	C = false
	V = false
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000C6FA_exit
l0000CA94:
	CZN = cond(r9 - 0x00000003)
	V = false
	branch Test(EQ,Z) l0000CA9C
	// succ:  l0000CA99 l0000CA9C
l0000CA99:
	goto l0000CC78
	// succ:  l0000CC78
l0000CA9C:
	branch (Mem0[ap + 8:word32] & 0x00000001 << 0x00000003) != 0x00000000 l0000CAA4
	// succ:  l0000CAA1 l0000CAA4
l0000CAA1:
	goto l0000CB5C
	// succ:  l0000CB5C
l0000CAA4:
l0000CB5C:
	v56 = 0x00
	Mem0[Mem0[r6 + 0x00010CDC:word32]:byte] = v56
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(Mem0[r6 + 0x00010CD0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000CBE0
	// succ:  l0000CB6A l0000CBE0
l0000CB6A:
	r2 = Mem0[r6 + 0x00010CD0:word32] - 0x00000001
	CVZN = cond(r2)
	v57 = 0x5D
	Mem0[Mem0[r6 + 0x00010CC4:word32]:byte] = v57
	ZN = cond(v57)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x7FFFFFFF
	ZN = cond(0x7FFFFFFF)
	C = false
	V = false
	sp = sp - 0x00000004
	v58 = r6 + 0x00010ABC
	Mem0[sp:word32] = v58
	ZN = cond(v58)
	C = false
	V = false
	sp = sp - 0x00000004
	v59 = r6 + 0x00010BBC
	Mem0[sp:word32] = v59
	ZN = cond(v59)
	C = false
	V = false
	call fn0000E2EA (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000CB9B
	// succ:  l0000CB98 l0000CB9B
l0000CB98:
	goto l0000CC2B
	// succ:  l0000CC2B
l0000CB9B:
	v67 = 0x00000000
	Mem0[r6 + 0x00010CF0:word32] = v67
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v68 = r6 + 0x00010ABC
	Mem0[sp:word32] = v68
	ZN = cond(v68)
	C = false
	V = false
	call fn00019286 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000CBC4
	// succ:  l0000CBB4 l0000CBC4
l0000CBB4:
	CZN = cond(Mem0[r10:word32] - 0x00000011)
	V = false
	branch Test(EQ,Z) l0000CBCB
	// succ:  l0000CBB9 l0000CBCB
l0000CBB9:
	v70 = 0x00000001
	Mem0[r6 + 0x00010CF0:word32] = v70
	ZN = cond(v70)
	C = false
	V = false
	goto l0000CBCB
	// succ:  l0000CBCB
l0000CBC4:
	v74 = 0x00000001
	Mem0[r6 + 0x00010AB8:word32] = v74
	ZN = cond(v74)
	C = false
	V = false
	// succ:  l0000CBCB
l0000CBCB:
	sp = sp - 0x00000004
	v72 = r6 + 0x00010ABC
	Mem0[sp:word32] = v72
	ZN = cond(v72)
	C = false
	V = false
	sp = sp - 0x00000004
	v73 = r6 + 0x00010BBC
	Mem0[sp:word32] = v73
	ZN = cond(v73)
	C = false
	V = false
	call fn000192BE (retsize: 4;)
	goto l0000CC2B
	// succ:  l0000CC2B
l0000CBE0:
	sp = sp - 0x00000004
	v80 = r8 + 1705
	Mem0[sp:word32] = v80
	ZN = cond(v80)
	C = false
	V = false
	sp = sp - 0x00000004
	v81 = r6 + 0x00010BBC
	Mem0[sp:word32] = v81
	ZN = cond(v81)
	C = false
	V = false
	call fn000192D6 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000CC2B
	// succ:  l0000CBF5 l0000CC2B
l0000CBF5:
	sp = sp - 0x00000004
	v82 = r8 + 1717
	Mem0[sp:word32] = v82
	ZN = cond(v82)
	C = false
	V = false
	sp = sp - 0x00000004
	v83 = r6 + 0x00010BBC
	Mem0[sp:word32] = v83
	ZN = cond(v83)
	C = false
	V = false
	call fn000192BE (retsize: 4;)
	v84 = 0x00000000
	Mem0[r6 + 0x00010CF0:word32] = v84
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v85 = r6 + 0x00010BBC
	Mem0[sp:word32] = v85
	ZN = cond(v85)
	C = false
	V = false
	call fn00019286 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000CC2B
	// succ:  l0000CC1F l0000CC2B
l0000CC1F:
	CZN = cond(Mem0[r10:word32] - 0x00000011)
	V = false
	branch Test(EQ,Z) l0000CC2B
	// succ:  l0000CC24 l0000CC2B
l0000CC24:
	v86 = 0x00000001
	Mem0[r6 + 0x00010CF0:word32] = v86
	ZN = cond(v86)
	C = false
	V = false
	// succ:  l0000CC2B
l0000CC2B:
	sp = sp - 0x00000004
	v66 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v66
	ZN = cond(v66)
	C = false
	V = false
	call fn000192C6 (retsize: 4;)
	r2 = r6 + 0x00010ABC
	ZN = cond(r2)
	C = false
	V = false
	r2 = Mem0[r6 + 0x00010CDC:word32] - r2
	CVZN = cond(r2)
	r0 = r0 + r2
	CVZN = cond(r0)
	CZN = cond(r0 - 0x000000FF)
	V = false
	branch Test(ULE,CZ) l0000CC54
	// succ:  l0000CC50 l0000CC54
l0000CC50:
	r0 = 0x00000001
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000C6FA_exit
l0000CC54:
	sp = sp - 0x00000004
	v75 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v75
	ZN = cond(v75)
	C = false
	V = false
	sp = sp - 0x00000004
	v76 = Mem0[r6 + 0x00010CDC:word32]
	Mem0[sp:word32] = v76
	ZN = cond(v76)
	C = false
	V = false
	call fn000192BE (retsize: 4;)
	sp = sp - 0x00000004
	v77 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v77
	ZN = cond(v77)
	C = false
	V = false
	call fn000192C6 (retsize: 4;)
	v78 = Mem0[r6 + 0x00010CDC:word32] + r0
	Mem0[r6 + 0x00010CDC:word32] = v78
	CVZN = cond(v78)
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000C6FA_exit
l0000CC78:
	CZN = cond(r9 - 0x00000004)
	V = false
	branch Test(NE,Z) l0000CCA2
	// succ:  l0000CC7D l0000CCA2
l0000CC7D:
	ZN = cond(Mem0[r6 + 0x00010CF0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000CC89
	// succ:  l0000CC85 l0000CC89
l0000CC85:
	r0 = 0x00000003
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000C6FA_exit
l0000CC89:
	v60 = 0x00
	Mem0[Mem0[r6 + 0x00010CDC:word32]:byte] = v60
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	v61 = r6 + 0x00010ABC
	Mem0[sp:word32] = v61
	ZN = cond(v61)
	C = false
	V = false
	sp = sp - 0x00000004
	v62 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v62
	ZN = cond(v62)
	C = false
	V = false
	call fn000192BE (retsize: 4;)
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000C6FA_exit
l0000CCA2:
	CZN = cond(r9 - 0x00000005)
	V = false
	branch Test(NE,Z) l0000CCAA
	// succ:  l0000CCA7 l0000CCAA
l0000CCA7:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000C6FA_exit
l0000CCAA:
	r0 = (uint32) 0x0063
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000C6FA_exit
fn0000C6FA_exit:


// fn0000CE52
// Return size: 4
define fn0000CE52
fn0000CE52_entry:
	// succ:  l0000CE52
l0000CE52:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	r0 = Mem0[ap + 4:word32]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000001)
	V = false
	branch Test(NE,Z) l0000CE64
	// succ:  l0000CE5E l0000CE64
l0000CE5E:
	v12 = 0x01
	r3 = DPB(r3, v12, 0)
	ZN = cond(v12)
	C = false
	V = false
	goto l0000CE92
	// succ:  l0000CE92
l0000CE64:
	CZN = cond(r0 - 0x00000002)
	V = false
	branch Test(EQ,Z) l0000CE85
	// succ:  l0000CE69 l0000CE85
l0000CE69:
	CZN = cond(r0 - 0x00000009)
	V = false
	branch Test(LT,N) l0000CE73
	// succ:  l0000CE6E l0000CE73
l0000CE6E:
	CZN = cond(r0 - 0x0000000B)
	V = false
	branch Test(LE,ZN) l0000CE85
	// succ:  l0000CE73 l0000CE85
l0000CE73:
	CZN = cond(r0 - 0x00000050)
	V = false
	branch Test(LT,N) l0000CE8C
	// succ:  l0000CE7C l0000CE8C
l0000CE7C:
	CZN = cond(r0 - 0x00000052)
	V = false
	branch Test(GT,ZN) l0000CE8C
	// succ:  l0000CE85 l0000CE8C
l0000CE85:
	v14 = 0x02
	r0 = DPB(r0, v14, 0)
	ZN = cond(v14)
	C = false
	V = false
	goto l0000CE8F
	// succ:  l0000CE8F
l0000CE8C:
	v20 = 0x04
	r0 = DPB(r0, v20, 0)
	ZN = cond(v20)
	C = false
	V = false
	// succ:  l0000CE8F
l0000CE8F:
	v18 = (byte) r0
	r3 = DPB(r3, v18, 0)
	ZN = cond(v18)
	C = false
	V = false
	// succ:  l0000CE92
l0000CE92:
	r1 = (int32) (int8) r3
	VZN = cond(r1)
	C = false
	ZN = cond(Mem0[ap + 4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000CEA0
	// succ:  l0000CE9A l0000CEA0
l0000CE9A:
	r2 = 0x00000001
	ZN = cond(r2)
	C = false
	V = false
	goto l0000CEB0
	// succ:  l0000CEB0
l0000CEA0:
	r0 = Mem0[ap + 4:word32] << 4
	VZN = cond(r0)
	C = false
	r0 = r0 | 0x7FFF0000
	ZN = cond(r0)
	C = false
	V = false
	r2 = r0 | r1
	ZN = cond(r2)
	C = false
	V = false
	// succ:  l0000CEB0
l0000CEB0:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	call fn0001928E (retsize: 4;)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000CE52_exit
fn0000CE52_exit:


// fn0000CEBE
// Return size: 4
define fn0000CEBE
fn0000CEBE_entry:
	// succ:  l0000CEBE
l0000CEBE:
	sp = fp
	sp = sp - 0x00000018
	CVZN = cond(sp)
	ZN = cond(0xFFFE77D8)
	C = false
	V = false
	ZN = cond(Mem0[r2 + 0x00010CF4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(GE,N) l0000CF36
	// succ:  l0000CED0 l0000CF36
l0000CED0:
	sp = sp - 0x00000008
	v9 = 0x0000000000000000
	Mem0[sp:word64] = v9
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	v12 = fp + -6
	Mem0[sp:word32] = v12
	ZN = cond(v12)
	C = false
	V = false
	sp = sp - 0x00000004
	v13 = r2 + 0x00010CF8
	Mem0[sp:word32] = v13
	ZN = cond(v13)
	C = false
	V = false
	v15 = pc
	pc = pc + 0x00000004
	call Mem0[Mem0[v15:word32]:word32] + 2 (retsize: 4;)
	v17 = Mem0[Mem0[sp + 32766:word32]:real32]
	Mem0[Mem0[r0 + 21328:word32]:real32] = v17
	ZN = cond(v17)
	C = false
	V = false
	branch (r0 & 0x00000001) == 0x00000000 l0000CF13
	// succ:  l0000CEE8 l0000CF13
l0000CEE8:
	sp = sp - 0x00000008
	v18 = 0x0000000000000000
	Mem0[sp:word64] = v18
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000008
	v19 = 0x0000000000000000
	Mem0[sp:word64] = v19
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000008
	ZN = cond(0x00000008)
	C = false
	V = false
	sp = sp - 0x00000004
	v20 = fp + -22
	Mem0[sp:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	sp = sp - 0x00000008
	v21 = 0x0000000000000000
	Mem0[sp:word64] = v21
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = fp + -14
	Mem0[sp:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000027
	ZN = cond(0x00000027)
	C = false
	V = false
	sp = sp - 0x00000004
	v23 = (int32) Mem0[fp + -6:int16]
	Mem0[sp:int32] = v23
	VZN = cond(v23)
	C = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	v25 = pc
	pc = pc + 0x00000004
	call Mem0[Mem0[v25:word32]:word32] + 2 (retsize: 4;)
	__halt()
l0000CF13:
	branch (r3 & 0x00000001) == 0x00000000 l0000CF2C
	// succ:  l0000CF16 l0000CF2C
l0000CF16:
	r0 = (int32) Mem0[fp + -14:int16]
	VZN = cond(r0)
	C = false
	branch (r0 & 0x00000001) == 0x00000000 l0000CF2C
	// succ:  l0000CF1D l0000CF2C
l0000CF1D:
	r0 = (uint32) Mem0[fp + -15:byte]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000005)
	V = false
	branch Test(ULT,C) l0000CF2C
	// succ:  l0000CF26 l0000CF2C
l0000CF26:
	r1 = r0
	ZN = cond(r1)
	C = false
	V = false
	goto l0000CF2F
	// succ:  l0000CF2F
l0000CF2C:
	r1 = 0x00000018
	ZN = cond(r1)
	C = false
	V = false
	// succ:  l0000CF2F
l0000CF2F:
	v30 = r1
	Mem0[r2 + 0x00010CF4:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	// succ:  l0000CF36
l0000CF36:
	r0 = Mem0[r2 + 0x00010CF4:word32]
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000CEBE_exit
fn0000CEBE_exit:


// fn0000CF42
// Return size: 0
define fn0000CF42
fn0000CF42_entry:
	// succ:  l0000CF42
l0000CF42:
	sp = fp
	sp = sp - 0x0000002C
	CVZN = cond(sp)
	ZN = cond(0xFFFE5F38)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	sp = sp - 0x00000004
	v8 = r2 + 1796
	Mem0[sp:word32] = v8
	ZN = cond(v8)
	C = false
	V = false
	sp = sp - 0x00000004
	v9 = r2 + 1791
	Mem0[sp:word32] = v9
	ZN = cond(v9)
	C = false
	V = false
	sp = sp - 0x00000004
	v10 = r2 + 1783
	Mem0[sp:word32] = v10
	ZN = cond(v10)
	C = false
	V = false
	sp = sp - 0x00000004
	v11 = r2 + 1767
	Mem0[sp:word32] = v11
	ZN = cond(v11)
	C = false
	V = false
	sp = sp - 0x00000004
	v13 = fp + -44
	Mem0[sp:word32] = v13
	ZN = cond(v13)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	v14 = fp + -44
	Mem0[sp:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	CZN = cond(Mem0[r2 + 1748:byte] - 0x36)
	V = false
	branch Test(LT,N) l0000CF80
	// succ:  l0000CF77 l0000CF80
l0000CF77:
	r4 = r2 + 1759
	ZN = cond(r4)
	C = false
	V = false
	goto l0000CF85
	// succ:  l0000CF85
l0000CF80:
	r4 = r2 + 1755
	ZN = cond(r4)
	C = false
	V = false
	// succ:  l0000CF85
l0000CF85:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	v18 = r2 + 1746
	Mem0[sp:word32] = v18
	ZN = cond(v18)
	C = false
	V = false
	sp = sp - 0x00000004
	v19 = r2 + 1740
	Mem0[sp:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
fn0000CF42_exit:


// fn0000CFBA
// Return size: 4
define fn0000CFBA
fn0000CFBA_entry:
	// succ:  l0000CFBA
l0000CFBA:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	r3 = Mem0[ap + 4:word32]
	ZN = cond(r3)
	C = false
	V = false
	r2 = Mem0[ap + 8:word32]
	ZN = cond(r2)
	C = false
	V = false
	branch Test(NE,Z) l0000CFCA
	// succ:  l0000CFC7 l0000CFCA
l0000CFC7:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000CFBA_exit
l0000CFCA:
	call fn0000D39E (retsize: 4;)
	r3 = r3 ^ 0xFFFFFFFF
	ZN = cond(r3)
	C = false
	V = false
	r5 = ap + 12
	ZN = cond(r5)
	C = false
	V = false
	CZN = cond(Mem0[r5:word32] - 0x00000008)
	V = false
	branch Test(UGE,C) l0000CFE4
	// succ:  l0000CFE1 l0000CFE4
l0000CFE1:
	goto l0000D0A7
	// succ:  l0000D0A7
l0000CFE4:
	v16 = r2
	r2 = r2 + 0x00000001
	r4 = (uint32) Mem0[v16:byte]
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 ^ r3
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 & ~0xFFFFFF00
	ZN = cond(r4)
	C = false
	V = false
	r1 = (uint32) SLICE(r3, ui24, 8)
	ZN = cond(r1)
	V = false
	r3 = r1 ^ Mem0[r0 + r4 * 4:word32]
	ZN = cond(r3)
	C = false
	V = false
	v19 = r2
	r2 = r2 + 0x00000001
	r4 = (uint32) Mem0[v19:byte]
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 ^ r3
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 & ~0xFFFFFF00
	ZN = cond(r4)
	C = false
	V = false
	r1 = (uint32) SLICE(r3, ui24, 8)
	ZN = cond(r1)
	V = false
	r3 = r1 ^ Mem0[r0 + r4 * 4:word32]
	ZN = cond(r3)
	C = false
	V = false
	v20 = r2
	r2 = r2 + 0x00000001
	r4 = (uint32) Mem0[v20:byte]
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 ^ r3
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 & ~0xFFFFFF00
	ZN = cond(r4)
	C = false
	V = false
	r1 = (uint32) SLICE(r3, ui24, 8)
	ZN = cond(r1)
	V = false
	r3 = r1 ^ Mem0[r0 + r4 * 4:word32]
	ZN = cond(r3)
	C = false
	V = false
	v21 = r2
	r2 = r2 + 0x00000001
	r4 = (uint32) Mem0[v21:byte]
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 ^ r3
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 & ~0xFFFFFF00
	ZN = cond(r4)
	C = false
	V = false
	r1 = (uint32) SLICE(r3, ui24, 8)
	ZN = cond(r1)
	V = false
	r3 = r1 ^ Mem0[r0 + r4 * 4:word32]
	ZN = cond(r3)
	C = false
	V = false
	v22 = r2
	r2 = r2 + 0x00000001
	r4 = (uint32) Mem0[v22:byte]
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 ^ r3
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 & ~0xFFFFFF00
	ZN = cond(r4)
	C = false
	V = false
	r1 = (uint32) SLICE(r3, ui24, 8)
	ZN = cond(r1)
	V = false
	r3 = r1 ^ Mem0[r0 + r4 * 4:word32]
	ZN = cond(r3)
	C = false
	V = false
	v23 = r2
	r2 = r2 + 0x00000001
	r4 = (uint32) Mem0[v23:byte]
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 ^ r3
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 & ~0xFFFFFF00
	ZN = cond(r4)
	C = false
	V = false
	r1 = (uint32) SLICE(r3, ui24, 8)
	ZN = cond(r1)
	V = false
	r3 = r1 ^ Mem0[r0 + r4 * 4:word32]
	ZN = cond(r3)
	C = false
	V = false
	v24 = r2
	r2 = r2 + 0x00000001
	r4 = (uint32) Mem0[v24:byte]
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 ^ r3
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 & ~0xFFFFFF00
	ZN = cond(r4)
	C = false
	V = false
	r1 = (uint32) SLICE(r3, ui24, 8)
	ZN = cond(r1)
	V = false
	r3 = r1 ^ Mem0[r0 + r4 * 4:word32]
	ZN = cond(r3)
	C = false
	V = false
	v25 = r2
	r2 = r2 + 0x00000001
	r4 = (uint32) Mem0[v25:byte]
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 ^ r3
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 & ~0xFFFFFF00
	ZN = cond(r4)
	C = false
	V = false
	r1 = (uint32) SLICE(r3, ui24, 8)
	ZN = cond(r1)
	V = false
	r3 = r1 ^ Mem0[r0 + r4 * 4:word32]
	ZN = cond(r3)
	C = false
	V = false
	v26 = Mem0[r5:word32] - 0x00000008
	Mem0[r5:word32] = v26
	CVZN = cond(v26)
	CZN = cond(Mem0[r5:word32] - 0x00000008)
	V = false
	branch Test(ULT,C) l0000D0A7
	// succ:  l0000D0A4 l0000D0A7
l0000D0A4:
	goto l0000CFE4
	// succ:  l0000CFE4
l0000D0A7:
	ZN = cond(Mem0[ap + 12:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000D0C8
	// succ:  l0000D0AC l0000D0C8
l0000D0AC:
	v27 = r2
	r2 = r2 + 0x00000001
	r4 = (uint32) Mem0[v27:byte]
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 ^ r3
	ZN = cond(r4)
	C = false
	V = false
	r4 = r4 & ~0xFFFFFF00
	ZN = cond(r4)
	C = false
	V = false
	r1 = (uint32) SLICE(r3, ui24, 8)
	ZN = cond(r1)
	V = false
	r3 = r1 ^ Mem0[r0 + r4 * 4:word32]
	ZN = cond(r3)
	C = false
	V = false
	v28 = Mem0[ap + 12:word32] - 0x00000001
	Mem0[ap + 12:word32] = v28
	CVZN = cond(v28)
	branch Test(NE,Z) l0000D0AC
	// succ:  l0000D0C8 l0000D0AC
l0000D0C8:
	r0 = r3 ^ 0xFFFFFFFF
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000CFBA_exit
fn0000CFBA_exit:


// fn0000D0D6
// Return size: 4
define fn0000D0D6
fn0000D0D6_entry:
	// succ:  l0000D0D6
l0000D0D6:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0x0001934C)
	C = false
	V = false
	sp = sp - 0x00000004
	v8 = Mem0[ap + 12:word32]
	Mem0[sp:word32] = v8
	ZN = cond(v8)
	C = false
	V = false
	call fn000192CE (retsize: 4;)
	r5 = r0
	ZN = cond(r5)
	C = false
	V = false
	branch Test(EQ,Z) l0000D10B
	// succ:  l0000D0EF l0000D10B
l0000D0EF:
	v13 = Mem0[r5:byte] & ~0x80
	r2 = DPB(r2, v13, 0)
	ZN = cond(v13)
	C = false
	V = false
	r2 = (int32) (int8) r2
	VZN = cond(r2)
	C = false
	branch (Mem0[r4 + r2 * 4:word32] & 0x00000001 << 0x00000003) == 0x00000000 l0000D10B
	// succ:  l0000D0FC l0000D10B
l0000D0FC:
	r5 = r5 + 0x00000001
	CVZN = cond(r5)
	v16 = Mem0[r5:byte] & ~0x80
	r0 = DPB(r0, v16, 0)
	ZN = cond(v16)
	C = false
	V = false
	r0 = (int32) (int8) r0
	VZN = cond(r0)
	C = false
	branch (Mem0[r4 + r0 * 4:word32] & 0x00000001 << 0x00000003) != 0x00000000 l0000D0FC
	// succ:  l0000D10B l0000D0FC
l0000D10B:
	ZN = cond(r5 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000D113
	// succ:  l0000D10F l0000D113
l0000D10F:
	ZN = cond(Mem0[r5:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000D13F
	// succ:  l0000D113 l0000D13F
l0000D113:
	sp = sp - 0x00000004
	v17 = Mem0[ap + 16:word32]
	Mem0[sp:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	call fn000192CE (retsize: 4;)
	r5 = r0
	ZN = cond(r5)
	C = false
	V = false
	branch Test(EQ,Z) l0000D13F
	// succ:  l0000D122 l0000D13F
l0000D122:
	v18 = Mem0[r5:byte] & ~0x80
	r2 = DPB(r2, v18, 0)
	ZN = cond(v18)
	C = false
	V = false
	r2 = (int32) (int8) r2
	VZN = cond(r2)
	C = false
	branch (Mem0[r4 + r2 * 4:word32] & 0x00000001 << 0x00000003) == 0x00000000 l0000D13F
	// succ:  l0000D12F l0000D13F
l0000D12F:
	// succ:  l0000D130
l0000D130:
	r5 = r5 + 0x00000001
	CVZN = cond(r5)
	v19 = Mem0[r5:byte] & ~0x80
	r0 = DPB(r0, v19, 0)
	ZN = cond(v19)
	C = false
	V = false
	r0 = (int32) (int8) r0
	VZN = cond(r0)
	C = false
	branch (Mem0[r4 + r0 * 4:word32] & 0x00000001 << 0x00000003) != 0x00000000 l0000D130
	// succ:  l0000D13F l0000D130
l0000D13F:
	ZN = cond(r5 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000D147
	// succ:  l0000D143 l0000D147
l0000D143:
	ZN = cond(Mem0[r5:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000D148
	// succ:  l0000D147 l0000D148
l0000D147:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000D0D6_exit
l0000D148:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	call fn000192C6 (retsize: 4;)
	r0 = r0 + 0x00000001
	CVZN = cond(r0)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	call fn000192B6 (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	branch Test(NE,Z) l0000D177
	// succ:  l0000D161 l0000D177
l0000D161:
l0000D177:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	call fn000192BE (retsize: 4;)
	r2 = r3
	ZN = cond(r2)
	C = false
	V = false
	r6 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	// succ:  l0000D188
l0000D188:
	r6 = r6 + 0x00000001
	CVZN = cond(r6)
	v24 = Mem0[r2:byte]
	r0 = DPB(r0, v24, 0)
	ZN = cond(v24)
	C = false
	V = false
	branch Test(EQ,Z) l0000D1AF
	// succ:  l0000D18F l0000D1AF
l0000D18F:
	v25 = (byte) r0 & ~0x80
	r0 = DPB(r0, v25, 0)
	ZN = cond(v25)
	C = false
	V = false
	r0 = (int32) (int8) r0
	VZN = cond(r0)
	C = false
	branch (Mem0[r4 + r0 * 4:word32] & 0x00000001 << 0x00000003) != 0x00000000 l0000D1AF
	// succ:  l0000D19B l0000D1AF
l0000D19B:
	// succ:  l0000D19C
l0000D19C:
	r2 = r2 + 0x00000001
	CVZN = cond(r2)
	v26 = Mem0[r2:byte]
	r0 = DPB(r0, v26, 0)
	ZN = cond(v26)
	C = false
	V = false
	branch Test(EQ,Z) l0000D1AF
	// succ:  l0000D1A3 l0000D1AF
l0000D1A3:
	v27 = (byte) r0 & ~0x80
	r0 = DPB(r0, v27, 0)
	ZN = cond(v27)
	C = false
	V = false
	r0 = (int32) (int8) r0
	VZN = cond(r0)
	C = false
	branch (Mem0[r4 + r0 * 4:word32] & 0x00000001 << 0x00000003) == 0x00000000 l0000D19C
	// succ:  l0000D1AF l0000D19C
l0000D1AF:
	v29 = Mem0[r2:byte]
	r1 = DPB(r1, v29, 0)
	ZN = cond(v29)
	C = false
	V = false
	branch Test(EQ,Z) l0000D1D8
	// succ:  l0000D1B4 l0000D1D8
l0000D1B4:
	v30 = (byte) r1 & ~0x80
	r0 = DPB(r0, v30, 0)
	ZN = cond(v30)
	C = false
	V = false
	r0 = (int32) (int8) r0
	VZN = cond(r0)
	C = false
	branch (Mem0[r4 + r0 * 4:word32] & 0x00000001 << 0x00000003) == 0x00000000 l0000D1D8
	// succ:  l0000D1C1 l0000D1D8
l0000D1C1:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l0000D1C4
l0000D1C4:
	r2 = r2 + 0x00000001
	CVZN = cond(r2)
	v31 = Mem0[r2:byte]
	r1 = DPB(r1, v31, 0)
	ZN = cond(v31)
	C = false
	V = false
	branch Test(EQ,Z) l0000D1D8
	// succ:  l0000D1CB l0000D1D8
l0000D1CB:
	v32 = (byte) r1 & ~0x80
	r0 = DPB(r0, v32, 0)
	ZN = cond(v32)
	C = false
	V = false
	r0 = (int32) (int8) r0
	VZN = cond(r0)
	C = false
	branch (Mem0[r4 + r0 * 4:word32] & 0x00000001 << 0x00000003) != 0x00000000 l0000D1C4
	// succ:  l0000D1D8 l0000D1C4
l0000D1D8:
	ZN = cond((byte) r1 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000D188
	// succ:  l0000D1DC l0000D188
l0000D1DC:
	r7 = r6
	ZN = cond(r7)
	C = false
	V = false
	r2 = r7 + Mem0[Mem0[ap + 4:word32]:word32]
	CVZN = cond(r2)
	r2 = r2 + 0x00000001
	CVZN = cond(r2)
	sp = sp - 0x00000004
	v34 = r2 << 2
	Mem0[sp:word32] = v34
	VZN = cond(v34)
	C = false
	call fn000192B6 (retsize: 4;)
	r6 = r0
	ZN = cond(r6)
	C = false
	V = false
	branch Test(NE,Z) l0000D215
	// succ:  l0000D1F6 l0000D215
l0000D1F6:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
l0000D215:
	r8 = r6
	ZN = cond(r8)
	C = false
	V = false
	r0 = r6
	ZN = cond(r0)
	C = false
	V = false
	r6 = r6 + 0x00000004
	CVZN = cond(r6)
	r5 = Mem0[ap + 8:word32]
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5:word32]
	ZN = cond(r2)
	C = false
	V = false
	v36 = Mem0[r5:word32] + 0x00000004
	Mem0[r5:word32] = v36
	CVZN = cond(v36)
	v37 = Mem0[r2:word32]
	Mem0[r0 + 0:word32] = v37
	ZN = cond(v37)
	C = false
	V = false
	// succ:  l0000D22C
l0000D22C:
	v38 = r3
	Mem0[r6:word32] = v38
	r6 = r6 + 0x00000004
	ZN = cond(v38)
	C = false
	V = false
	r0 = (int32) Mem0[r3:int8]
	VZN = cond(r0)
	C = false
	branch Test(EQ,Z) l0000D258
	// succ:  l0000D234 l0000D258
l0000D234:
	r1 = r0 & ~0xFFFFFF80
	ZN = cond(r1)
	C = false
	V = false
	branch (Mem0[r4 + r1 * 4:word32] & 0x00000001 << 0x00000003) != 0x00000000 l0000D258
	// succ:  l0000D241 l0000D258
l0000D241:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l0000D244
l0000D244:
	r3 = r3 + 0x00000001
	CVZN = cond(r3)
	r0 = (int32) Mem0[r3:int8]
	VZN = cond(r0)
	C = false
	branch Test(EQ,Z) l0000D258
	// succ:  l0000D24B l0000D258
l0000D24B:
	r1 = r0 & ~0xFFFFFF80
	ZN = cond(r1)
	C = false
	V = false
	branch (Mem0[r4 + r1 * 4:word32] & 0x00000001 << 0x00000003) == 0x00000000 l0000D244
	// succ:  l0000D258 l0000D244
l0000D258:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000D25E
	// succ:  l0000D25C l0000D25E
l0000D25C:
	v39 = 0x00
	Mem0[r3:byte] = v39
	r3 = r3 + 0x00000001
	Z = true
	N = false
	C = false
	V = false
	// succ:  l0000D25E
l0000D25E:
	r0 = (int32) Mem0[r3:int8]
	VZN = cond(r0)
	C = false
	branch Test(EQ,Z) l0000D284
	// succ:  l0000D263 l0000D284
l0000D263:
	r1 = r0 & ~0xFFFFFF80
	ZN = cond(r1)
	C = false
	V = false
	branch (Mem0[r4 + r1 * 4:word32] & 0x00000001 << 0x00000003) == 0x00000000 l0000D284
	// succ:  l0000D270 l0000D284
l0000D270:
	r3 = r3 + 0x00000001
	CVZN = cond(r3)
	r0 = (int32) Mem0[r3:int8]
	VZN = cond(r0)
	C = false
	branch Test(EQ,Z) l0000D284
	// succ:  l0000D277 l0000D284
l0000D277:
	r1 = r0 & ~0xFFFFFF80
	ZN = cond(r1)
	C = false
	V = false
	branch (Mem0[r4 + r1 * 4:word32] & 0x00000001 << 0x00000003) != 0x00000000 l0000D270
	// succ:  l0000D284 l0000D270
l0000D284:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000D22C
	// succ:  l0000D288 l0000D22C
l0000D288:
	r0 = ap + 4
	ZN = cond(r0)
	C = false
	V = false
	r7 = r7 + Mem0[Mem0[r0 + 0:word32]:word32]
	CVZN = cond(r7)
	v40 = Mem0[r0 + 0:word32] - 0x00000001
	Mem0[Mem0[r0 + 0:word32]:word32] = v40
	CVZN = cond(v40)
	branch Test(EQ,Z) l0000D2AA
	// succ:  l0000D295 l0000D2AA
l0000D295:
	r3 = Mem0[ap + 0x00000008:word32]
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l0000D29C
l0000D29C:
	r2 = Mem0[r3:word32]
	ZN = cond(r2)
	C = false
	V = false
	v41 = Mem0[r3:word32] + 0x00000004
	Mem0[r3:word32] = v41
	CVZN = cond(v41)
	v42 = Mem0[r2:word32]
	Mem0[r6:word32] = v42
	r6 = r6 + 0x00000004
	ZN = cond(v42)
	C = false
	V = false
	v43 = Mem0[r0 + 0:word32] - 0x00000001
	Mem0[Mem0[r0 + 0:word32]:word32] = v43
	CVZN = cond(v43)
	branch Test(NE,Z) l0000D29C
	// succ:  l0000D2AA l0000D29C
l0000D2AA:
	v44 = 0x00000000
	Mem0[r6:word32] = v44
	Z = true
	N = false
	C = false
	V = false
	v45 = r8
	Mem0[Mem0[ap + 8:word32]:word32] = v45
	ZN = cond(v45)
	C = false
	V = false
	v46 = r7
	Mem0[Mem0[ap + 0x00000004:word32]:word32] = v46
	ZN = cond(v46)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000D0D6_exit
fn0000D0D6_exit:


// fn0000D39E
// Return size: 4
define fn0000D39E
fn0000D39E_entry:
	// succ:  l0000D39E
l0000D39E:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFF8504)
	C = false
	V = false
	ZN = cond(Mem0[r6:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000D3FD
	// succ:  l0000D3AC l0000D3FD
l0000D3AC:
	sp = sp - 0x00000004
	v9 = (uint32) 0x0400
	Mem0[sp:uint32] = v9
	ZN = cond(v9)
	C = false
	V = false
	call fn000192B6 (retsize: 4;)
	r5 = r0
	ZN = cond(r5)
	C = false
	V = false
	branch Test(EQ,Z) l0000D3FD
	// succ:  l0000D3BD l0000D3FD
l0000D3BD:
	r4 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r3 = r5 + 0
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l0000D3C4
l0000D3C4:
	r2 = r4
	ZN = cond(r2)
	C = false
	V = false
	r1 = 0x00000008
	ZN = cond(r1)
	C = false
	V = false
	branch Test(EQ,Z) l0000D3EC
	// succ:  l0000D3CC l0000D3EC
l0000D3CC:
	branch (r2 & 0x00000001) == 0x00000000 l0000D3E0
	// succ:  l0000D3CF l0000D3E0
l0000D3CF:
	ap = (uint32) SLICE(r2, ui31, 1)
	ZN = cond(ap)
	V = false
	r0 = ap ^ 0xEDB88320
	ZN = cond(r0)
	C = false
	V = false
	goto l0000D3E5
	// succ:  l0000D3E5
l0000D3E0:
	r0 = (uint32) SLICE(r2, ui31, 1)
	ZN = cond(r0)
	V = false
	// succ:  l0000D3E5
l0000D3E5:
	r2 = r0
	ZN = cond(r2)
	C = false
	V = false
	r1 = r1 - 0x00000001
	CVZN = cond(r1)
	branch Test(NE,Z) l0000D3CC
	// succ:  l0000D3EC l0000D3CC
l0000D3EC:
	v19 = r2
	Mem0[r3:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	r3 = r3 + 0x00000004
	CVZN = cond(r3)
	r4 = r4 + 0x00000001
	CVZN = cond(r4)
	branch r4 <= 0x000000FF l0000D3C4
	// succ:  l0000D3FA l0000D3C4
l0000D3FA:
	v20 = r5
	Mem0[r6:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	// succ:  l0000D3FD
l0000D3FD:
	r0 = Mem0[r6 + 0:word32]
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000D39E_exit
fn0000D39E_exit:


// fn0000D406
// Return size: 4
define fn0000D406
fn0000D406_entry:
	// succ:  l0000D406
l0000D406:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFF8504)
	C = false
	V = false
	ZN = cond(Mem0[ap:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000D41F
	// succ:  l0000D414 l0000D41F
l0000D414:
	sp = sp - 0x00000004
	v9 = Mem0[ap:word32]
	Mem0[sp:word32] = v9
	ZN = cond(v9)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	v10 = 0x00000000
	Mem0[ap:word32] = v10
	Z = true
	N = false
	C = false
	V = false
	// succ:  l0000D41F
l0000D41F:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000D406_exit
fn0000D406_exit:


// fn0000D422
// Return size: 4
define fn0000D422
fn0000D422_entry:
	// succ:  l0000D422
l0000D422:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFE6648)
	C = false
	V = false
	ZN = cond(0xFFFFB3C8)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	sp = sp - 0x00000004
	v7 = (uint32) 0xC851
	Mem0[sp:uint32] = v7
	ZN = cond(v7)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	call fn0001927E (retsize: 4;)
	v9 = -0x00000001
	Mem0[r2 + 36:word32] = v9
	CVZN = cond(v9)
	v11 = r4 + 2
	Mem0[r2 + 0x0000C60F:word32] = v11
	ZN = cond(v11)
	C = false
	V = false
	v13 = r3
	Mem0[r2 + 144:word32] = v13
	ZN = cond(v13)
	C = false
	V = false
	v14 = r3 + 4
	Mem0[r2 + 148:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	v15 = r2 + 167
	Mem0[r2 + 1511:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	v16 = 0x00000001
	Mem0[r2 + 0x0000C6E5:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	ZN = cond(0x0000D804)
	C = false
	V = false
	ZN = cond(0x0000DA4C)
	C = false
	V = false
	ZN = cond(0x0000DA58)
	C = false
	V = false
	ZN = cond(0x0000DB4C)
	C = false
	V = false
	r0 = r2
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000D422_exit
fn0000D422_exit:


// fn0000D4A2
// Return size: 0
define fn0000D4A2
fn0000D4A2_entry:
	// succ:  l0000D4A2
l0000D4A2:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
fn0000D4A2_exit:


// fn0000D50E
// Return size: 4
define fn0000D50E
fn0000D50E_entry:
	// succ:  l0000D50E
l0000D50E:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(Mem0[ap + 0x0000C5FB:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LE,ZN) l0000D529
	// succ:  l0000D520 l0000D529
l0000D520:
	v8 = Mem0[ap + 132:word32] + Mem0[ap + 0x0000C5FB:word32]
	Mem0[ap + 132:word32] = v8
	CVZN = cond(v8)
	// succ:  l0000D529
l0000D529:
	ZN = cond(Mem0[ap + 0x0000C849:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LE,ZN) l0000D554
	// succ:  l0000D531 l0000D554
l0000D531:
	v9 = Mem0[ap + 132:word32] + Mem0[ap + 0x0000C849:word32]
	Mem0[ap + 0x0000C5FB:word32] = v9
	CVZN = cond(v9)
	v10 = Mem0[ap + 0x0000C84D:word32] - Mem0[ap + 132:word32]
	Mem0[ap + 0x0000C5F7:word32] = v10
	CVZN = cond(v10)
	v11 = 0x00000000
	Mem0[ap + 0x0000C849:word32] = v11
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000D50E_exit
l0000D554:
	ZN = cond(Mem0[ap + 0x0000C5FB:word32] - 0x00000000)
	C = false
	V = false
	branch Test(GE,N) l0000D562
	// succ:  l0000D55C l0000D562
l0000D55C:
	v15 = 0x00000000
	Mem0[ap + 0x0000C5FB:word32] = v15
	Z = true
	N = false
	C = false
	V = false
	// succ:  l0000D562
l0000D562:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000D50E_exit
fn0000D50E_exit:


// fn0000D566
// Return size: 4
define fn0000D566
fn0000D566_entry:
	// succ:  l0000D566
l0000D566:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	CZN = cond(Mem0[ap + 0x0000C5FB:word32] - Mem0[ap + 132:word32])
	V = false
	branch Test(LE,ZN) l0000D5AC
	// succ:  l0000D57B l0000D5AC
l0000D57B:
	ZN = cond(Mem0[ap + 132:word32] - 0x00000000)
	C = false
	V = false
	branch Test(GE,N) l0000D585
	// succ:  l0000D581 l0000D585
l0000D581:
	v10 = 0x00000000
	Mem0[ap + 132:word32] = v10
	Z = true
	N = false
	C = false
	V = false
	// succ:  l0000D585
l0000D585:
	v15 = Mem0[ap + 132:word32] + Mem0[ap + 0x0000C5F7:word32]
	Mem0[ap + 0x0000C84D:word32] = v15
	CVZN = cond(v15)
	v16 = Mem0[ap + 0x0000C5FB:word32] - Mem0[ap + 132:word32]
	Mem0[ap + 0x0000C849:word32] = v16
	CVZN = cond(v16)
	v17 = Mem0[ap + 132:word32]
	Mem0[ap + 0x0000C5FB:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	goto l0000D5B2
	// succ:  l0000D5B2
l0000D5AC:
	v12 = 0x00000000
	Mem0[ap + 0x0000C849:word32] = v12
	Z = true
	N = false
	C = false
	V = false
	// succ:  l0000D5B2
l0000D5B2:
	v13 = Mem0[ap + 132:word32] - Mem0[ap + 0x0000C5FB:word32]
	Mem0[ap + 132:word32] = v13
	CVZN = cond(v13)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000D566_exit
fn0000D566_exit:


// fn0000D5BE
// Return size: 4
define fn0000D5BE
fn0000D5BE_entry:
	// succ:  l0000D5BE
l0000D5BE:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFF8508)
	C = false
	V = false
	r2 = Mem0[ap + 8:word32]
	ZN = cond(r2)
	C = false
	V = false
	r7 = r2
	ZN = cond(r7)
	C = false
	V = false
	ZN = cond(r2 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000D5DD
	// succ:  l0000D5DA l0000D5DD
l0000D5DA:
	goto l0000D692
	// succ:  l0000D692
l0000D5DD:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l0000D5E0
l0000D5E0:
	ZN = cond(Mem0[r4 + 0x0000C5FB:word32] - 0x00000000)
	C = false
	V = false
	branch Test(GT,ZN) l0000D64F
	// succ:  l0000D5E8 l0000D64F
l0000D5E8:
	sp = sp - 0x00000004
	v13 = (uint32) 0x2000
	Mem0[sp:uint32] = v13
	ZN = cond(v13)
	C = false
	V = false
	sp = sp - 0x00000004
	v14 = Mem0[r4 + 0x0000C5F3:word32]
	Mem0[sp:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	sp = sp - 0x00000004
	v15 = Mem0[r4 + 0x0000C617:word32]
	Mem0[sp:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	call fn00019272 (retsize: 4;)
	v16 = r0
	Mem0[r4 + 0x0000C5FB:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	branch Test(NE,Z) l0000D60E
	// succ:  l0000D609 l0000D60E
l0000D609:
	r0 = r7 - r2
	CVZN = cond(r0)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000D5BE_exit
l0000D60E:
	ZN = cond(Mem0[r4 + 0x0000C5FB:word32] - 0x00000000)
	C = false
	V = false
	branch Test(GE,N) l0000D639
	// succ:  l0000D616 l0000D639
l0000D616:
	sp = sp - 0x00000004
	v19 = (uint32) 0x0401
	Mem0[sp:uint32] = v19
	ZN = cond(v19)
	C = false
	V = false
	sp = sp - 0x00000004
	v21 = r6 + 36
	Mem0[sp:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	call fn000192C6 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = r6 + 36
	Mem0[sp:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	r0 = Mem0[r4 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000D5BE_exit
l0000D639:
	v25 = Mem0[r4 + 0x0000C61F:word32] + 0x00002000
	Mem0[r4 + 0x0000C61F:word32] = v25
	CVZN = cond(v25)
	v26 = Mem0[r4 + 0x0000C5F3:word32]
	Mem0[r4 + 0x0000C5F7:word32] = v26
	ZN = cond(v26)
	C = false
	V = false
	// succ:  l0000D64F
l0000D64F:
	r0 = Mem0[r4 + 0x0000C5FB:word32]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r2 - r0)
	V = false
	branch Test(UGE,C) l0000D660
	// succ:  l0000D65B l0000D660
l0000D65B:
	r5 = r2
	ZN = cond(r5)
	C = false
	V = false
	goto l0000D663
	// succ:  l0000D663
l0000D660:
	r5 = r0
	ZN = cond(r5)
	C = false
	V = false
	// succ:  l0000D663
l0000D663:
	r3 = r5
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v28 = Mem0[r4 + 0x0000C5F7:word32]
	Mem0[sp:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	sp = sp - 0x00000004
	v29 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v29
	ZN = cond(v29)
	C = false
	V = false
	call fn0001929E (retsize: 4;)
	v30 = Mem0[ap + 4:word32] + r3
	Mem0[ap + 4:word32] = v30
	CVZN = cond(v30)
	v31 = Mem0[r4 + 0x0000C5F7:word32] + r3
	Mem0[r4 + 0x0000C5F7:word32] = v31
	CVZN = cond(v31)
	v32 = Mem0[r4 + 0x0000C5FB:word32] - r3
	Mem0[r4 + 0x0000C5FB:word32] = v32
	CVZN = cond(v32)
	r2 = r2 - r3
	CVZN = cond(r2)
	branch Test(EQ,Z) l0000D692
	// succ:  l0000D68F l0000D692
l0000D68F:
	goto l0000D5E0
	// succ:  l0000D5E0
l0000D692:
	r0 = r7
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000D5BE_exit
fn0000D5BE_exit:


// fn0000D69A
// Return size: 4
define fn0000D69A
fn0000D69A_entry:
	// succ:  l0000D69A
l0000D69A:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFF8508)
	C = false
	V = false
	ZN = cond(Mem0[r4 + 0x0000C6C5:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000D6B7
	// succ:  l0000D6B3 l0000D6B7
l0000D6B3:
	r0 = -0x00000001
	CVZN = cond(r0)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000D69A_exit
l0000D6B7:
	ZN = cond(Mem0[r4 + 132:word32] - 0x00000000)
	C = false
	V = false
	branch Test(GT,ZN) l0000D6CB
	// succ:  l0000D6BD l0000D6CB
l0000D6BD:
	v12 = Mem0[r4 + 132:word32] - 0x00000001
	Mem0[r4 + 132:word32] = v12
	CVZN = cond(v12)
	v13 = 0x00000000
	Mem0[r4 + 0x0000C5FB:word32] = v13
	Z = true
	N = false
	C = false
	V = false
	r0 = -0x00000001
	CVZN = cond(r0)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000D69A_exit
l0000D6CB:
	ZN = cond(Mem0[r4 + 0x0000C5FB:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LE,ZN) l0000D6D6
	// succ:  l0000D6D3 l0000D6D6
l0000D6D3:
	goto l0000D79F
	// succ:  l0000D79F
l0000D6D6:
	sp = sp - 0x00000004
	v15 = (uint32) 0x2000
	Mem0[sp:uint32] = v15
	ZN = cond(v15)
	C = false
	V = false
	sp = sp - 0x00000004
	v16 = Mem0[r4 + 0x0000C5F3:word32]
	Mem0[sp:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	sp = sp - 0x00000004
	v17 = Mem0[r4 + 0x0000C617:word32]
	Mem0[sp:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	call fn00019272 (retsize: 4;)
	v18 = r0
	Mem0[r4 + 0x0000C5FB:word32] = v18
	ZN = cond(v18)
	C = false
	V = false
	branch Test(NE,Z) l0000D701
	// succ:  l0000D6F7 l0000D701
l0000D6F7:
	v19 = 0x00000000
	Mem0[r4 + 0x0000C5FB:word32] = v19
	Z = true
	N = false
	C = false
	V = false
	r0 = -0x00000001
	CVZN = cond(r0)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000D69A_exit
l0000D701:
	ZN = cond(Mem0[r4 + 0x0000C5FB:word32] - 0x00000000)
	C = false
	V = false
	branch Test(GE,N) l0000D73B
	// succ:  l0000D709 l0000D73B
l0000D709:
	sp = sp - 0x00000004
	v27 = (uint32) 0x0401
	Mem0[sp:uint32] = v27
	ZN = cond(v27)
	C = false
	V = false
	sp = sp - 0x00000004
	v29 = r6 + 36
	Mem0[sp:word32] = v29
	ZN = cond(v29)
	C = false
	V = false
	call fn000192C6 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v30 = r6 + 36
	Mem0[sp:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	r2 = Mem0[r4 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	call fn000124FE (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000003
	ZN = cond(0x00000003)
	C = false
	V = false
	call fn0000CE52 (retsize: 4;)
	// succ:  l0000D73B
l0000D73B:
	v31 = Mem0[r4 + 0x0000C61F:word32] + 0x00002000
	Mem0[r4 + 0x0000C61F:word32] = v31
	CVZN = cond(v31)
	v32 = Mem0[r4 + 0x0000C5F3:word32]
	Mem0[r4 + 0x0000C5F7:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	CZN = cond(Mem0[r4 + 0x0000C5FB:word32] - Mem0[r4 + 132:word32])
	V = false
	branch Test(LE,ZN) l0000D790
	// succ:  l0000D75C l0000D790
l0000D75C:
	ZN = cond(Mem0[r4 + 132:word32] - 0x00000000)
	C = false
	V = false
	branch Test(GE,N) l0000D766
	// succ:  l0000D762 l0000D766
l0000D762:
	v34 = 0x00000000
	Mem0[r4 + 132:word32] = v34
	Z = true
	N = false
	C = false
	V = false
	// succ:  l0000D766
l0000D766:
	v37 = Mem0[r4 + 132:word32] + Mem0[r4 + 0x0000C5F7:word32]
	Mem0[r4 + 0x0000C84D:word32] = v37
	CVZN = cond(v37)
	v38 = Mem0[r4 + 0x0000C5FB:word32] - Mem0[r4 + 132:word32]
	Mem0[r4 + 0x0000C849:word32] = v38
	CVZN = cond(v38)
	v39 = Mem0[r4 + 132:word32]
	Mem0[r4 + 0x0000C5FB:word32] = v39
	ZN = cond(v39)
	C = false
	V = false
	goto l0000D796
	// succ:  l0000D796
l0000D790:
	v35 = 0x00000000
	Mem0[r4 + 0x0000C849:word32] = v35
	Z = true
	N = false
	C = false
	V = false
	// succ:  l0000D796
l0000D796:
	v36 = Mem0[r4 + 132:word32] - Mem0[r4 + 0x0000C5FB:word32]
	Mem0[r4 + 132:word32] = v36
	CVZN = cond(v36)
	// succ:  l0000D79F
l0000D79F:
	r2 = Mem0[r4 + 1511:word32]
	ZN = cond(r2)
	C = false
	V = false
	branch (Mem0[r2 + 20:word32] & 0x00000001 << 0x00000000) == 0x00000000 l0000D7EA
	// succ:  l0000D7A9 l0000D7EA
l0000D7A9:
	r2 = Mem0[r4 + 0x0000C5FB:word32]
	ZN = cond(r2)
	C = false
	V = false
	r3 = Mem0[r4 + 0x0000C5F7:word32]
	ZN = cond(r3)
	C = false
	V = false
	ap = r2
	ZN = cond(ap)
	C = false
	V = false
	r5 = r2 - 0x00000001
	CVZN = cond(r5)
	ZN = cond(ap - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000D7EA
	// succ:  l0000D7C2 l0000D7EA
l0000D7C2:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l0000D7C4
l0000D7C4:
	r2 = (uint32) Mem0[r3:byte]
	ZN = cond(r2)
	C = false
	V = false
	call fn00011ED6 (retsize: 4;)
	ap = r0
	ZN = cond(ap)
	C = false
	V = false
	v23 = (byte) r2 ^ (byte) ap
	Mem0[r3:byte] = v23
	ZN = cond(v23)
	C = false
	V = false
	sp = sp - 0x00000004
	v24 = (uint32) Mem0[r3:byte]
	Mem0[sp:uint32] = v24
	ZN = cond(v24)
	C = false
	V = false
	call fn00011F06 (retsize: 4;)
	r3 = r3 + 0x00000001
	CVZN = cond(r3)
	ap = r5
	ZN = cond(ap)
	C = false
	V = false
	r5 = r5 - 0x00000001
	CVZN = cond(r5)
	ZN = cond(ap - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000D7C4
	// succ:  l0000D7EA l0000D7C4
l0000D7EA:
	v25 = Mem0[r4 + 0x0000C5FB:word32] - 0x00000001
	Mem0[r4 + 0x0000C5FB:word32] = v25
	CVZN = cond(v25)
	r2 = Mem0[r4 + 0x0000C5F7:word32]
	ZN = cond(r2)
	C = false
	V = false
	v26 = Mem0[r4 + 0x0000C5F7:word32] + 0x00000001
	Mem0[r4 + 0x0000C5F7:word32] = v26
	CVZN = cond(v26)
	r0 = (uint32) Mem0[r2 + 0:byte]
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000D69A_exit
fn0000D69A_exit:


// fn0000DC76
// Return size: 4
define fn0000DC76
fn0000DC76_entry:
	// succ:  l0000DC76
l0000DC76:
	sp = fp
	sp = sp - 0x0000000C
	CVZN = cond(sp)
	ZN = cond(0x00007CC8)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0x0001934C)
	C = false
	V = false
	ZN = cond(0xFFFF8508)
	C = false
	V = false
	v7 = 0x00000000
	Mem0[sp:word32] = v7
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(Mem0[ap + 4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000DC9F
	// succ:  l0000DC9C l0000DC9F
l0000DC9C:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000DC76_exit
l0000DC9F:
	r0 = Mem0[ap + 8:word32]
	ZN = cond(r0)
	C = false
	V = false
	v13 = r0 - 0x00000000
	branch v13 > 0x00000005 l0000DCB1
	// succ:  l0000DCA3_1 l0000DCB1
l0000DCA3_1:
	call 0x0000DCA7 + v13 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn0000DC76_exit
l0000DCB1:
	branch Test(LT,N) l0000DCB3
	// succ:  l0000DCB3 l0000DCB3
l0000DCB3:
	// succ:  l0000E253
l0000E253:
	r0 = Mem0[sp + 0:word32]
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000DC76_exit
fn0000DC76_exit:


// fn0000E25A
// Return size: 4
define fn0000E25A
fn0000E25A_entry:
	// succ:  l0000E25A
l0000E25A:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	r2 = Mem0[ap + 4:word32]
	ZN = cond(r2)
	C = false
	V = false
	r0 = (uint32) Mem0[r2 + 1:byte]
	ZN = cond(r0)
	C = false
	V = false
	r1 = r0 << 8
	VZN = cond(r1)
	C = false
	r0 = (uint32) Mem0[r2 + 0:byte]
	ZN = cond(r0)
	C = false
	V = false
	v12 = (word16) r1 | (word16) r0
	r1 = DPB(r1, v12, 0)
	ZN = cond(v12)
	C = false
	V = false
	r0 = (uint32) (word16) r1
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000E25A_exit
fn0000E25A_exit:


// fn0000E276
// Return size: 4
define fn0000E276
fn0000E276_entry:
	// succ:  l0000E276
l0000E276:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	r1 = Mem0[ap + 4:word32]
	ZN = cond(r1)
	C = false
	V = false
	r0 = (uint32) Mem0[r1 + 3:byte]
	ZN = cond(r0)
	C = false
	V = false
	r2 = r0 << 24
	VZN = cond(r2)
	C = false
	r0 = (uint32) Mem0[r1 + 2:byte]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 << 16
	VZN = cond(r0)
	C = false
	r2 = r2 + r0
	CVZN = cond(r2)
	r0 = (uint32) Mem0[r1 + 1:byte]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 << 8
	VZN = cond(r0)
	C = false
	r2 = r2 + r0
	CVZN = cond(r2)
	r0 = (uint32) Mem0[r1 + 0:byte]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 + r2
	CVZN = cond(r0)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000E276_exit
fn0000E276_exit:


// fn0000E2A6
// Return size: 4
define fn0000E2A6
fn0000E2A6_entry:
	// succ:  l0000E2A6
l0000E2A6:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0x00007C24)
	C = false
	V = false
	r0 = Mem0[ap + 8:word32]
	ZN = cond(r0)
	C = false
	V = false
	r1 = Mem0[ap + 4:word32]
	ZN = cond(r1)
	C = false
	V = false
	// succ:  l0000E2B8
l0000E2B8:
	v10 = r0
	r0 = r0 + 0x00000001
	v12 = Mem0[v10:byte]
	r2 = DPB(r2, v12, 0)
	ZN = cond(v12)
	C = false
	V = false
	r6 = r1
	ZN = cond(r6)
	C = false
	V = false
	r1 = r1 + 0x00000001
	CVZN = cond(r1)
	r4 = (uint32) (byte) r2
	ZN = cond(r4)
	C = false
	V = false
	branch (r4 & 0x00000001 << 0x00000007) == 0x00000000 l0000E2D8
	// succ:  l0000E2C7 l0000E2D8
l0000E2C7:
	r3 = r4 & ~0xFFFFFF80
	ZN = cond(r3)
	C = false
	V = false
	v18 = Mem0[r7 + r3:byte]
	r5 = DPB(r5, v18, 0)
	ZN = cond(v18)
	C = false
	V = false
	goto l0000E2DB
	// succ:  l0000E2DB
l0000E2D8:
	v19 = (byte) r2
	r5 = DPB(r5, v19, 0)
	ZN = cond(v19)
	C = false
	V = false
	// succ:  l0000E2DB
l0000E2DB:
	v20 = (byte) r5
	Mem0[r6:byte] = v20
	ZN = cond(v20)
	C = false
	V = false
	ZN = cond(r4 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000E2B8
	// succ:  l0000E2E2 l0000E2B8
l0000E2E2:
	r0 = Mem0[ap + 4:word32]
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000E2A6_exit
fn0000E2A6_exit:


// fn0000E2EA
// Return size: 4
define fn0000E2EA
fn0000E2EA_entry:
	// succ:  l0000E2EA
l0000E2EA:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0x0001934C)
	C = false
	V = false
	r2 = Mem0[ap + 4:word32]
	ZN = cond(r2)
	C = false
	V = false
	r3 = Mem0[ap + 8:word32]
	ZN = cond(r3)
	C = false
	V = false
	r4 = Mem0[ap + 12:word32]
	ZN = cond(r4)
	C = false
	V = false
	branch Test(NE,Z) l0000E305
	// succ:  l0000E302 l0000E305
l0000E302:
	goto l0000E3D3
	// succ:  l0000E3D3
l0000E305:
	ZN = cond(0x00019298)
	C = false
	V = false
	// succ:  l0000E30C
l0000E30C:
	v13 = Mem0[r2:byte]
	r5 = DPB(r5, v13, 0)
	ZN = cond(v13)
	C = false
	V = false
	r6 = (int32) (int8) r5
	VZN = cond(r6)
	C = false
	r0 = r6 & ~0xFFFFFF80
	ZN = cond(r0)
	C = false
	V = false
	branch (Mem0[r8 + r0 * 4:word32] & 0x00000001 << 0x00000000) == 0x00000000 l0000E32C
	// succ:  l0000E31F l0000E32C
l0000E31F:
	sp = sp - 0x00000004
	v18 = (int32) (int8) r5
	Mem0[sp:int32] = v18
	VZN = cond(v18)
	C = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	r1 = r0
	ZN = cond(r1)
	C = false
	V = false
	goto l0000E32F
	// succ:  l0000E32F
l0000E32C:
	r1 = r6
	ZN = cond(r1)
	C = false
	V = false
	// succ:  l0000E32F
l0000E32F:
	v24 = (int8) r1
	r7 = DPB(r7, v24, 0)
	VZN = cond(v24)
	C = false
	v25 = Mem0[r3:byte]
	r5 = DPB(r5, v25, 0)
	ZN = cond(v25)
	C = false
	V = false
	r6 = (int32) (int8) r5
	VZN = cond(r6)
	C = false
	r0 = r6 & ~0xFFFFFF80
	ZN = cond(r0)
	C = false
	V = false
	branch (Mem0[r8 + r0 * 4:word32] & 0x00000001 << 0x00000000) == 0x00000000 l0000E350
	// succ:  l0000E345 l0000E350
l0000E345:
	sp = sp - 0x00000004
	v26 = (int32) (int8) r5
	Mem0[sp:int32] = v26
	VZN = cond(v26)
	C = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	r1 = r0
	ZN = cond(r1)
	C = false
	V = false
	goto l0000E353
	// succ:  l0000E353
l0000E350:
	r1 = r6
	ZN = cond(r1)
	C = false
	V = false
	// succ:  l0000E353
l0000E353:
	v27 = (int8) r1
	r0 = DPB(r0, v27, 0)
	VZN = cond(v27)
	C = false
	CZN = cond((byte) r7 - (byte) r0)
	V = false
	branch Test(EQ,Z) l0000E3BF
	// succ:  l0000E35B l0000E3BF
l0000E35B:
	v29 = Mem0[r2:byte]
	r5 = DPB(r5, v29, 0)
	ZN = cond(v29)
	C = false
	V = false
	r6 = (int32) (int8) r5
	VZN = cond(r6)
	C = false
	r0 = r6 & ~0xFFFFFF80
	ZN = cond(r0)
	C = false
	V = false
	branch (Mem0[r8 + r0 * 4:word32] & 0x00000001 << 0x00000000) == 0x00000000 l0000E380
	// succ:  l0000E36E l0000E380
l0000E36E:
	sp = sp - 0x00000004
	v30 = (int32) (int8) r5
	Mem0[sp:int32] = v30
	VZN = cond(v30)
	C = false
	call fn0001929A (retsize: 4;)
	r1 = r0
	ZN = cond(r1)
	C = false
	V = false
	goto l0000E383
	// succ:  l0000E383
l0000E380:
	r1 = r6
	ZN = cond(r1)
	C = false
	V = false
	// succ:  l0000E383
l0000E383:
	v31 = (int8) r1
	r7 = DPB(r7, v31, 0)
	VZN = cond(v31)
	C = false
	v32 = Mem0[r3:byte]
	r5 = DPB(r5, v32, 0)
	ZN = cond(v32)
	C = false
	V = false
	r6 = (int32) (int8) r5
	VZN = cond(r6)
	C = false
	r0 = r6 & ~0xFFFFFF80
	ZN = cond(r0)
	C = false
	V = false
	branch (Mem0[r8 + r0 * 4:word32] & 0x00000001 << 0x00000000) == 0x00000000 l0000E3A8
	// succ:  l0000E399 l0000E3A8
l0000E399:
	sp = sp - 0x00000004
	v33 = (int32) (int8) r5
	Mem0[sp:int32] = v33
	VZN = cond(v33)
	C = false
	call fn0001929A (retsize: 4;)
	r5 = r0
	ZN = cond(r5)
	C = false
	V = false
	goto l0000E3AB
	// succ:  l0000E3AB
l0000E3A8:
	r5 = r6
	ZN = cond(r5)
	C = false
	V = false
	// succ:  l0000E3AB
l0000E3AB:
	v34 = (int8) r5
	r0 = DPB(r0, v34, 0)
	VZN = cond(v34)
	C = false
	CZN = cond((byte) r7 - (byte) r0)
	V = false
	branch Test(GE,N) l0000E3B8
	// succ:  l0000E3B3 l0000E3B8
l0000E3B3:
	v35 = -0x01
	r1 = DPB(r1, v35, 0)
	CVZN = cond(v35)
	goto l0000E3BB
	// succ:  l0000E3BB
l0000E3B8:
	v36 = 0x01
	r1 = DPB(r1, v36, 0)
	ZN = cond(v36)
	C = false
	V = false
	// succ:  l0000E3BB
l0000E3BB:
	r0 = (int32) (int8) r1
	VZN = cond(r0)
	C = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000E2EA_exit
l0000E3BF:
	ZN = cond(Mem0[r2:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000E3C6
	// succ:  l0000E3C3 l0000E3C6
l0000E3C3:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000E2EA_exit
l0000E3C6:
	r4 = r4 - 0x00000001
	CVZN = cond(r4)
	r2 = r2 + 0x00000001
	CVZN = cond(r2)
	r3 = r3 + 0x00000001
	CVZN = cond(r3)
	ZN = cond(r4 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000E3D3
	// succ:  l0000E3D0 l0000E3D3
l0000E3D0:
	goto l0000E30C
	// succ:  l0000E30C
l0000E3D3:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000E2EA_exit
fn0000E2EA_exit:


// fn0000F457
// Return size: 0
define fn0000F457
fn0000F457_entry:
	// succ:  l0000F457
l0000F457:
	sp = fp
fn0000F457_exit:


// fn0000F4E2
// Return size: 0
define fn0000F4E2
fn0000F4E2_entry:
	// succ:  l0000F4E2
l0000F4E2:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFE66C4)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFF8684)
	C = false
	V = false
	r0 = Mem0[r2 + 1511:word32]
	ZN = cond(r0)
	C = false
	V = false
	ap = (uint32) Mem0[r2 + 0x0000C65C:word16]
	ZN = cond(ap)
	C = false
	V = false
	v10 = (byte) ap & ~0xFE
	ap = DPB(ap, v10, 0)
	ZN = cond(v10)
	C = false
	V = false
fn0000F4E2_exit:


// fn0000F816
// Return size: 4
define fn0000F816
fn0000F816_entry:
	// succ:  l0000F816
l0000F816:
	sp = fp
	sp = sp - 0x00000008
	CVZN = cond(sp)
	ZN = cond(0xFFFE66C4)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFF8684)
	C = false
	V = false
	r9 = r5 + 69
	ZN = cond(r9)
	C = false
	V = false
	r11 = r5 + 78
	ZN = cond(r11)
	C = false
	V = false
	v10 = r5 + 87
	Mem0[sp:word32] = v10
	ZN = cond(v10)
	C = false
	V = false
	r10 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	v15 = 0x0000000000000000
	Mem0[r3 + 0x0000C5FF:word64] = v15
	Z = true
	N = false
	C = false
	V = false
	v16 = 0x00000000
	Mem0[r3 + 0x0000C607:word32] = v16
	Z = true
	N = false
	C = false
	V = false
	v17 = 0x00000001
	Mem0[r3 + 0x0000C6D9:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	v18 = 0x00000000
	Mem0[r3 + 0x0000C5EF:word32] = v18
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(Mem0[r3 + 68:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000F8AC
	// succ:  l0000F85A l0000F8AC
l0000F85A:
	ZN = cond(Mem0[r3 + 64:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000F8DA
	// succ:  l0000F85F l0000F8DA
l0000F85F:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v19 = r5 + 102
	Mem0[sp:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	sp = sp - 0x00000004
	v20 = r5 + 101
	Mem0[sp:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	r2 = r3 + 1515
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = r2 + 0x00004000
	Mem0[sp:word32] = v22
	CVZN = cond(v22)
	sp = sp - 0x00000004
	v23 = r3 + 0x0000C701
	Mem0[sp:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	call fn00010892 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v25 = r5 + 96
	Mem0[sp:word32] = v25
	ZN = cond(v25)
	C = false
	V = false
	sp = sp - 0x00000004
	v27 = r6 + 387
	Mem0[sp:word32] = v27
	ZN = cond(v27)
	C = false
	V = false
	sp = sp - 0x00000004
	v28 = r3 + 1515
	Mem0[sp:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v29 = r3 + 1515
	Mem0[sp:word32] = v29
	ZN = cond(v29)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	ap = Mem0[r3 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	goto l0000F8DA
	// succ:  l0000F8DA
l0000F8AC:
	ZN = cond(Mem0[r3 + 12:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000F8CB
	// succ:  l0000F8B1 l0000F8CB
l0000F8B1:
	v31 = 0x00019374
	Mem0[r3 + 0x0000C6ED:word32] = v31
	ZN = cond(v31)
	C = false
	V = false
	call fn00009B0A (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000F8DA
	// succ:  l0000F8C7 l0000F8DA
l0000F8C7:
	r0 = 0x00000032
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000F816_exit
l0000F8CB:
	call fn00009B0A (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000F8DA
	// succ:  l0000F8D6 l0000F8DA
l0000F8D6:
	r0 = 0x00000032
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0000F816_exit
l0000F8DA:
	call fn0000D566 (retsize: 4;)
	r0 = (uint32) Mem0[r3 + 0x0000C642:word16]
	ZN = cond(r0)
	C = false
	V = false
	v33 = r0 - 0x00000000
	branch v33 > 0x00000008 l0000F8FC
	// succ:  l0000F8E8_1 l0000F8FC
l0000F8E8_1:
	call 0x0000F8EC + v33 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn0000F816_exit
l0000F8FC:
fn0000F816_exit:


// fn000100C2
// Return size: 0
define fn000100C2
fn000100C2_entry:
	// succ:  l000100C2
l000100C2:
	sp = fp
	sp = sp - 0x00000008
	CVZN = cond(sp)
	ZN = cond(0xFFFE66C4)
	C = false
	V = false
	ZN = cond(0x00007E1C)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFF8684)
	C = false
	V = false
	r9 = ap + 8
	ZN = cond(r9)
	C = false
	V = false
	CZN = cond(Mem0[r9:word32] - 0x00000004)
	V = false
	branch Test(UGE,C) l000100ED
	// succ:  l000100EA l000100ED
l000100EA:
	// succ:  l000100EA_thunk_fn000105C4
l000100EA_thunk_fn000105C4:
	call fn000105C4 (retsize: 0;)
	return
	// succ:  fn000100C2_exit
l000100ED:
	ZN = cond(0x0000E258)
	C = false
	V = false
	// succ:  l000100ED_thunk_fn000100F4
l000100ED_thunk_fn000100F4:
	call fn000100F4 (retsize: 0;)
	return
	// succ:  fn000100C2_exit
fn000100C2_exit:


// fn000100F4
// Return size: 0
define fn000100F4
fn000100F4_entry:
	// succ:  l000100F4
l000100F4:
	sp = fp
	sp = sp - 0x00000004
	v4 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v4
	ZN = cond(v4)
	C = false
	V = false
	call Mem0[r11:word32] + 2 (retsize: 4;)
	v10 = (word16) r0
	Mem0[sp + 2:word16] = v10
	ZN = cond(v10)
	C = false
	V = false
	sp = sp - 0x00000004
	v11 = Mem0[ap + 4:word32] + 0x00000002
	Mem0[sp:word32] = v11
	CVZN = cond(v11)
	call Mem0[r11:word32] + 2 (retsize: 4;)
	r8 = (uint32) (word16) r0
	ZN = cond(r8)
	C = false
	V = false
	r0 = Mem0[r9:word32] - 0x00000004
	CVZN = cond(r0)
	CZN = cond(r8 - r0)
	V = false
	branch Test(ULE,CZ) l00010184
	goto l00010112
	// succ:  l00010112 l00010184
l000100F4:
l00010112:
	ZN = cond(Mem0[r2 + 64:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010156
	// succ:  l00010117 l00010156
l00010117:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	r0 = r2 + 1515
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v19 = r0 + 0x00004000
	Mem0[sp:word32] = v19
	CVZN = cond(v19)
	sp = sp - 0x00000004
	v20 = r2 + 0x0000C701
	Mem0[sp:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	call fn00010892 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = r7 + 199
	Mem0[sp:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	sp = sp - 0x00000004
	v23 = r2 + 1515
	Mem0[sp:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v24 = r2 + 1515
	Mem0[sp:word32] = v24
	ZN = cond(v24)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	// succ:  l00010156
l00010156:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v28 = Mem0[ap + 8:word32] - 0x00000004
	Mem0[sp:word32] = v28
	CVZN = cond(v28)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r8
	ZN = cond(r8)
	C = false
	V = false
	sp = sp - 0x00000004
	v30 = r5 + 1459
	Mem0[sp:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	sp = sp - 0x00000004
	v31 = r2 + 1515
	Mem0[sp:word32] = v31
	ZN = cond(v31)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v32 = r2 + 1515
	Mem0[sp:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	r0 = 0x00000002
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000100F4_exit
l00010184:
	r1 = (uint32) Mem0[sp + 2:word16]
	ZN = cond(r1)
	C = false
	V = false
	CZN = cond(r1 - 0x00000007)
	V = false
	branch Test(GE,N) l00010190
	// succ:  l0001018D l00010190
l0001018D:
	// succ:  l0001018D_thunk_fn000105B1
l0001018D_thunk_fn000105B1:
	call fn000105B1 (retsize: 0;)
	return
	// succ:  fn000100F4_exit
l00010190:
	r0 = r1
	ZN = cond(r0)
	C = false
	V = false
	v27 = r0 - 0x00000007
	branch v27 > 0x00000005 l000101A1
	// succ:  l00010193_1 l000101A1
l00010193_1:
	call 0x00010197 + v27 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn000100F4_exit
l000101A1:
	branch Test(UGT,CZ) l000101A7
	// succ:  l000101A3 l000101A7
l000101A3:
	goto l000101B0
	// succ:  l000101B0
l000101A7:
	call fn4000E3D8 (retsize: 4;)
	return
	// succ:  fn000100F4_exit
l000101B0:
	CZN = cond(r0 - 0x00004341)
	V = false
	branch Test(GT,ZN) l000101B7_thunk_fn000101BC
	goto l000101B9
	// succ:  l000101B9 l000101B7_thunk_fn000101BC
l000101B7_thunk_fn000101BC:
	call fn000101BC (retsize: 0;)
	return
	// succ:  fn000100F4_exit
l000101B9:
	// succ:  l000101B9_thunk_fn000105B1
l000101B9_thunk_fn000105B1:
	call fn000105B1 (retsize: 0;)
	return
	// succ:  fn000100F4_exit
fn000100F4_exit:


// fn000101BB
// Return size: 0
define fn000101BB
fn000101BB_entry:
	// succ:  l000101BB
l000101BB:
	sp = fp
	vax_bpt()
	// succ:  l000101BB_thunk_fn000101BC
l000101BB_thunk_fn000101BC:
	call fn000101BC (retsize: 0;)
	return
	// succ:  fn000101BB_exit
l000105C1_thunk_fn000100F4:
	call fn000100F4 (retsize: 0;)
	return
	// succ:  fn000101BB_exit
fn000101BB_exit:


// fn000101BC
// Return size: 0
define fn000101BC
fn000101BC_entry:
	// succ:  l000101BC
l000101BC:
	sp = fp
	CZN = cond(r0 - 0x00004453)
	V = false
	branch Test(GE,N) l000101C3_thunk_fn000101C8
	goto l000101C3_thunk_fn000101C5
	// succ:  l000101C3_thunk_fn000101C5 l000101C3_thunk_fn000101C8
l000101BC:
	CZN = cond(r0 - 0x00004453)
	V = false
	branch Test(GE,N) l000101C8
	goto l000101C3_thunk_fn000101C5
	// succ:  l000101C3_thunk_fn000101C5 l000101C3_thunk_fn000101C8
l000101C3_thunk_fn000101C5:
	call fn000101C5 (retsize: 0;)
	return
	// succ:  fn000101BC_exit
l000101C3_thunk_fn000101C5:
	call fn000101C5 (retsize: 0;)
	return
	// succ:  fn000101BC_exit
l000101C3_thunk_fn000101C8:
	call fn000101C8 (retsize: 0;)
	return
	// succ:  fn000101BC_exit
l000101C3_thunk_fn000101C8:
	call fn000101C8 (retsize: 0;)
	return
	// succ:  fn000101BC_exit
fn000101BC_exit:


// fn000101C5
// Return size: 0
define fn000101C5
fn000101C5_entry:
	// succ:  l000101C5
l000101C5:
	sp = v3
	// succ:  l000101C5_thunk_fn000105B1
l000101C5_thunk_fn000105B1:
	call fn000105B1 (retsize: 0;)
	return
	// succ:  fn000101C5_exit
fn000101C5_exit:


// fn000101C8
// Return size: 0
define fn000101C8
fn000101C8_entry:
	// succ:  l000101C8
l000101C8:
	sp = v3
	branch Test(NE,Z) l000101CD
	// succ:  l000101CA l000101CD
l000101CA:
	goto l000103A9
	// succ:  l000103A9
l000101CD:
	CZN = cond(r0 - 0x00004704)
	V = false
	branch Test(GE,N) l000101D9
	// succ:  l000101D6 l000101D9
l000101D6:
	// succ:  l000101D6_thunk_fn000105B1
l000101D6_thunk_fn000105B1:
	call fn000105B1 (retsize: 0;)
	return
	// succ:  fn000101C8_exit
l000101D9:
	v38 = r0 - 0x00004704
	branch v38 > 0x0000000B l000101F7
	// succ:  l000101D9_1 l000101F7
l000101D9_1:
	call 0x000101E1 + v38 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn000101C8_exit
l000101F7:
l000103A9:
	CZN = cond(r8 - 0x00000005)
	V = false
	branch Test(UGE,C) l000103B4
	// succ:  l000103AE l000103B4
l000103AE:
	r4 = (uint32) 0x4F
	ZN = cond(r4)
	C = false
	V = false
	goto l000103DB
	// succ:  l000103DB
l000103B4:
	r1 = Mem0[ap + 4:word32]
	ZN = cond(r1)
	C = false
	V = false
	r0 = (uint32) Mem0[r1 + 8:byte]
	ZN = cond(r0)
	C = false
	V = false
	branch Test(EQ,Z) l000103C8
	// succ:  l000103BE l000103C8
l000103BE:
	r3 = (uint32) 0x4001
	ZN = cond(r3)
	C = false
	V = false
	goto l000103D8
	// succ:  l000103D8
l000103C8:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000005
	ZN = cond(0x00000005)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r8
	ZN = cond(r8)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r1
	ZN = cond(r1)
	C = false
	V = false
	call fn000105F2 (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l000103D8
l000103D8:
	r4 = r3
	ZN = cond(r4)
	C = false
	V = false
	// succ:  l000103DB
l000103DB:
	r6 = r4
	ZN = cond(r6)
	C = false
	V = false
	branch Test(NE,Z) l000103E3
	// succ:  l000103E0 l000103E3
l000103E0:
	// succ:  l000103E0_thunk_fn000105B1
l000103E0_thunk_fn000105B1:
	call fn000105B1 (retsize: 0;)
	return
	// succ:  fn000101C8_exit
l000103E3:
	ZN = cond(Mem0[r2 + 64:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010427
	// succ:  l000103E8 l00010427
l000103E8:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	r0 = r2 + 1515
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v17 = r0 + 0x00004000
	Mem0[sp:word32] = v17
	CVZN = cond(v17)
	sp = sp - 0x00000004
	v19 = r2 + 0x0000C701
	Mem0[sp:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	call fn00010892 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v21 = r7 + 215
	Mem0[sp:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = r2 + 1515
	Mem0[sp:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v23 = r2 + 1515
	Mem0[sp:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	// succ:  l00010427
l00010427:
	CZN = cond(r6 - 0x00000002)
	V = false
	branch Test(GE,N) l0001042F
	// succ:  l0001042C l0001042F
l0001042C:
	goto l00010520
	// succ:  l00010520
l0001042F:
	r0 = r6
	ZN = cond(r0)
	C = false
	V = false
	v25 = r0 - 0x00000002
	branch v25 > 0x00000005 l00010440
	// succ:  l00010432_1 l00010440
l00010432_1:
	call 0x00010436 + v25 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn000101C8_exit
l00010440:
l00010520:
	r0 = r6 & ~0xFFFFFF00
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000002)
	V = false
	branch Test(EQ,Z) l00010554
	// succ:  l0001052D l00010554
l0001052D:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v27 = r5 + 1733
	Mem0[sp:word32] = v27
	ZN = cond(v27)
	C = false
	V = false
	sp = sp - 0x00000004
	v28 = r2 + 1515
	Mem0[sp:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v29 = r2 + 1515
	Mem0[sp:word32] = v29
	ZN = cond(v29)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	goto l000105AD
	// succ:  l000105AD
l00010554:
	r0 = r6 >> 8
	VZN = cond(r0)
	C = false
	r3 = (uint32) (word16) r0
	ZN = cond(r3)
	C = false
	V = false
	CZN = cond(r3 - 0x00000008)
	V = false
	branch Test(NE,Z) l00010588
	// succ:  l00010561 l00010588
l00010561:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v31 = r5 + 1621
	Mem0[sp:word32] = v31
	ZN = cond(v31)
	C = false
	V = false
	sp = sp - 0x00000004
	v32 = r2 + 1515
	Mem0[sp:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v33 = r2 + 1515
	Mem0[sp:word32] = v33
	ZN = cond(v33)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	goto l000105AD
	// succ:  l000105AD
l00010588:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v35 = r5 + 1655
	Mem0[sp:word32] = v35
	ZN = cond(v35)
	C = false
	V = false
	sp = sp - 0x00000004
	v36 = r2 + 1515
	Mem0[sp:word32] = v36
	ZN = cond(v36)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v37 = r2 + 1515
	Mem0[sp:word32] = v37
	ZN = cond(v37)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	// succ:  l000105AD
l000105AD:
	r0 = r6
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000101C8_exit
fn000101C8_exit:


// fn000105B1
// Return size: 4
define fn000105B1
fn000105B1_entry:
	call fn000101C5 (retsize: 0;)
	return
	// succ:  l000105B1 fn000105B1_exit
l000105B1:
	sp = v3
	r1 = r8 + 0x00000004
	CVZN = cond(r1)
	v8 = Mem0[r9:word32] - r1
	Mem0[r9:word32] = v8
	CVZN = cond(v8)
	v10 = Mem0[ap + 4:word32] + r1
	Mem0[ap + 4:word32] = v10
	CVZN = cond(v10)
	CZN = cond(Mem0[r9:word32] - 0x00000004)
	V = false
	branch Test(ULT,C) l000105C4
	goto l000105C1
	// succ:  l000105C1 l000105BF_thunk_fn000105C4
l000105BF_thunk_fn000105C4:
	call fn000105C4 (retsize: 0;)
	return
	// succ:  fn000105B1_exit
l000105C1:
	goto l000105C1_thunk_fn000100F4
	// succ:  l000105C1_thunk_fn000100F4
fn000105B1_exit:


// fn000105C4
// Return size: 0
define fn000105C4
fn000105C4_entry:
	// succ:  l000105C4
l000105C4:
	sp = v3
	ZN = cond(Mem0[r2 + 64:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000105EC
	// succ:  l000105C9 l000105EC
l000105C9:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v10 = r7 + 224
	Mem0[sp:word32] = v10
	ZN = cond(v10)
	C = false
	V = false
	sp = sp - 0x00000004
	v11 = r2 + 1515
	Mem0[sp:word32] = v11
	ZN = cond(v11)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v13 = r2 + 1515
	Mem0[sp:word32] = v13
	ZN = cond(v13)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r3 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r3)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	// succ:  l000105EC
l000105EC:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000105C4_exit
fn000105C4_exit:


// fn000105F2
// Return size: 4
define fn000105F2
fn000105F2_entry:
	// succ:  l000105F2
l000105F2:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	CZN = cond(Mem0[ap + 8:word32] - 0x00000004)
	V = false
	branch Test(ULT,C) l00010617
	// succ:  l000105FB l00010617
l000105FB:
	sp = sp - 0x00000004
	v8 = Mem0[ap + 4:word32] + 0x00000004
	Mem0[sp:word32] = v8
	CVZN = cond(v8)
	call fn0000E276 (retsize: 4;)
	r4 = r0
	ZN = cond(r4)
	C = false
	V = false
	branch Test(EQ,Z) l0001061C
	// succ:  l0001060C l0001061C
l0001060C:
	r0 = Mem0[ap + 12:word32] + 0x00000006
	CVZN = cond(r0)
	CZN = cond(Mem0[ap + 8:word32] - r0)
	V = false
	branch Test(UGT,CZ) l0001061C
	// succ:  l00010617 l0001061C
l00010617:
	r0 = (uint32) 0x4F
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000105F2_exit
l0001061C:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	call fn000192B6 (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	branch Test(NE,Z) l0001062E
	// succ:  l0001062A l0001062E
l0001062A:
	r0 = 0x00000007
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000105F2_exit
l0001062E:
	sp = sp - 0x00000004
	v16 = Mem0[ap + 8:word32] - Mem0[ap + 12:word32]
	Mem0[sp:word32] = v16
	CVZN = cond(v16)
	r0 = Mem0[ap + 12:word32] + 0x00000004
	CVZN = cond(r0)
	sp = sp - 0x00000004
	v17 = r0 + Mem0[ap + 4:word32]
	Mem0[sp:word32] = v17
	CVZN = cond(v17)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	call fn00010676 (retsize: 4;)
	r2 = r0
	ZN = cond(r2)
	C = false
	V = false
	branch Test(NE,Z) l00010664
	// succ:  l0001064E l00010664
l0001064E:
	r0 = Mem0[ap + 16:word32]
	ZN = cond(r0)
	C = false
	V = false
	branch Test(EQ,Z) l00010664
	// succ:  l00010654 l00010664
l00010654:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v19 = Mem0[ap + 8:word32]
	Mem0[sp:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	sp = sp - 0x00000004
	v20 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	r2 = r0
	ZN = cond(r2)
	C = false
	V = false
	// succ:  l00010664
l00010664:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	r0 = r2
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000105F2_exit
fn000105F2_exit:


// fn00010676
// Return size: 0
define fn00010676
fn00010676_entry:
	// succ:  l00010676
l00010676:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFF8684)
	C = false
	V = false
	r8 = Mem0[r2 + 0x0000C5F7:word32]
	ZN = cond(r8)
	C = false
	V = false
	r9 = Mem0[r2 + 0x0000C5FB:word32]
	ZN = cond(r9)
	C = false
	V = false
	r6 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r3 = Mem0[ap + 12:word32]
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	call fn0000E25A (retsize: 4;)
	v17 = (word16) r0
	r7 = DPB(r7, v17, 0)
	ZN = cond(v17)
	C = false
	V = false
	sp = sp - 0x00000004
	v18 = r3 + 0x00000002
	Mem0[sp:word32] = v18
	CVZN = cond(v18)
	call fn0000E276 (retsize: 4;)
	r10 = r0
	ZN = cond(r10)
	C = false
	V = false
	v20 = r3 + 0x00000006
	Mem0[r2 + 0x0000C5F7:word32] = v20
	CVZN = cond(v20)
	v21 = Mem0[ap + 16:word32] - 0x00000006
	Mem0[r2 + 132:word32] = v21
	CVZN = cond(v21)
	v22 = Mem0[r2 + 132:word32]
	Mem0[r2 + 0x0000C5FB:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	v23 = 0x00000001
	Mem0[r2 + 0x0000C6C5:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	v24 = Mem0[ap + 4:word32]
	Mem0[r2 + 0x0000C6C9:word32] = v24
	ZN = cond(v24)
	C = false
	V = false
	v25 = Mem0[ap + 8:word32]
	Mem0[r2 + 0x0000C6CD:word32] = v25
	ZN = cond(v25)
	C = false
	V = false
	r0 = (uint32) (word16) r7
	ZN = cond(r0)
	C = false
	V = false
	v26 = r0 - 0x00000000
	branch v26 > 0x00000008 l000106FB
	// succ:  l000106E7_1 l000106FB
l000106E7_1:
	call 0x000106EB + v26 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn00010676_exit
l000106FB:
	v28 = 36.0F + 0.5F
	Mem0[Mem0[r4:word32]:real32] = v28
	r4 = r4 + 0x00000004
	ZN = cond(v28)
	C = false
	V = false
	__halt()
	call fn4000E3D8 (retsize: 4;)
	return
	// succ:  fn00010676_exit
fn00010676_exit:


// fn0001084A
// Return size: 4
define fn0001084A
fn0001084A_entry:
	// succ:  l0001084A
l0001084A:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	CZN = cond(Mem0[ap + 8:word32] - Mem0[r2 + 0x0000C6CD:word32])
	V = false
	branch Test(ULE,CZ) l00010862
	// succ:  l0001085E l00010862
l0001085E:
	r0 = 0x00000032
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0001084A_exit
l00010862:
	r3 = Mem0[ap + 8:word32]
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v14 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	sp = sp - 0x00000004
	v15 = Mem0[r2 + 0x0000C6C9:word32]
	Mem0[sp:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	call fn0001929E (retsize: 4;)
	v16 = Mem0[r2 + 0x0000C6C9:word32] + r3
	Mem0[r2 + 0x0000C6C9:word32] = v16
	CVZN = cond(v16)
	v17 = Mem0[r2 + 0x0000C6CD:word32] - r3
	Mem0[r2 + 0x0000C6CD:word32] = v17
	CVZN = cond(v17)
	v18 = Mem0[r2 + 0x0000C6FD:word32] + r3
	Mem0[r2 + 0x0000C6FD:word32] = v18
	CVZN = cond(v18)
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0001084A_exit
fn0001084A_exit:


// fn00010892
// Return size: 4
define fn00010892
fn00010892_entry:
	// succ:  l00010892
l00010892:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	r3 = Mem0[ap + 4:word32]
	ZN = cond(r3)
	C = false
	V = false
	r2 = Mem0[ap + 8:word32]
	ZN = cond(r2)
	C = false
	V = false
	ZN = cond(Mem0[r3:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l000108C7
	// succ:  l000108A1 l000108C7
l000108A1:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l000108A4
l000108A4:
	r0 = (uint32) Mem0[r3:byte]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000020)
	V = false
	branch Test(UGE,C) l000108C0
	// succ:  l000108AC l000108C0
l000108AC:
	v13 = 0x5E
	Mem0[r2:byte] = v13
	r2 = r2 + 0x00000001
	ZN = cond(v13)
	C = false
	V = false
	v14 = r3
	r3 = r3 + 0x00000001
	r0 = (uint32) Mem0[v14:byte]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 + 0x00000040
	CVZN = cond(r0)
	v15 = (int8) r0
	Mem0[r2:int8] = v15
	r2 = r2 + 0x00000001
	VZN = cond(v15)
	C = false
	goto l000108C3
	// succ:  l000108C3
l000108C0:
	v20 = r3
	r3 = r3 + 0x00000001
	v21 = Mem0[v20:byte]
	Mem0[r2:byte] = v21
	r2 = r2 + 0x00000001
	ZN = cond(v21)
	C = false
	V = false
	// succ:  l000108C3
l000108C3:
	ZN = cond(Mem0[r3:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000108A4
	// succ:  l000108C7 l000108A4
l000108C7:
	v17 = 0x00
	Mem0[r2:byte] = v17
	Z = true
	N = false
	C = false
	V = false
	r0 = Mem0[ap + 8:word32]
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00010892_exit
fn00010892_exit:


// fn000108D2
// Return size: 4
define fn000108D2
fn000108D2_entry:
	// succ:  l000108D2
l000108D2:
	sp = fp
	sp = sp - 0x00000008
	CVZN = cond(sp)
	ZN = cond(0xFFFE67AC)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFF8DEC)
	C = false
	V = false
	r11 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r3 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	v11 = 0x00000000
	Mem0[sp:word32] = v11
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	v12 = (uint32) 0x2004
	Mem0[sp:uint32] = v12
	ZN = cond(v12)
	C = false
	V = false
	call fn000192B6 (retsize: 4;)
	v15 = r0
	Mem0[r2 + 0x0000C5F3:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	sp = sp - 0x00000004
	v16 = (uint32) 0x8001
	Mem0[sp:uint32] = v16
	ZN = cond(v16)
	C = false
	V = false
	call fn000192B6 (retsize: 4;)
	v17 = r0
	Mem0[r2 + 0x0000C6F1:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	v18 = r0
	Mem0[r2 + 0x0000C6F5:word32] = v18
	ZN = cond(v18)
	C = false
	V = false
	ZN = cond(Mem0[r2 + 0x0000C5F3:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0001092D
	// succ:  l00010925 l0001092D
l00010925:
	ZN = cond(Mem0[r2 + 0x0000C6F1:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00010955
	// succ:  l0001092D l00010955
l0001092D:
	sp = sp - 0x00000004
	v19 = (uint32) 0x0401
	Mem0[sp:uint32] = v19
	ZN = cond(v19)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r10
	ZN = cond(r10)
	C = false
	V = false
	sp = sp - 0x00000004
	v21 = r2 + 1515
	Mem0[sp:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = r2 + 1515
	Mem0[sp:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	r0 = 0x00000004
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000108D2_exit
l00010955:
	v25 = Mem0[r2 + 0x0000C5F3:word32] + 0x00002000
	Mem0[r2 + 0x0000C62B:word32] = v25
	CVZN = cond(v25)
	v26 = 0x50
	Mem0[r2 + 0x0000C62F:byte] = v26
	ZN = cond(v26)
	C = false
	V = false
	v27 = 0x50
	Mem0[r2 + 0x0000C639:byte] = v27
	ZN = cond(v27)
	C = false
	V = false
	v28 = 0x50
	Mem0[r2 + 0x0000C634:byte] = v28
	ZN = cond(v28)
	C = false
	V = false
	v29 = 0x4B
	Mem0[r2 + 0x0000C630:byte] = v29
	ZN = cond(v29)
	C = false
	V = false
	v30 = 0x4B
	Mem0[r2 + 0x0000C63A:byte] = v30
	ZN = cond(v30)
	C = false
	V = false
	v31 = 0x4B
	Mem0[r2 + 0x0000C635:byte] = v31
	ZN = cond(v31)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	ap = r2 + 0x0000C62F
	ZN = cond(ap)
	C = false
	V = false
	sp = sp - 0x00000004
	v33 = ap + 0x00000002
	Mem0[sp:word32] = v33
	CVZN = cond(v33)
	ZN = cond(0x000192BC)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	v35 = r5 + 3
	Mem0[sp:word32] = v35
	ZN = cond(v35)
	C = false
	V = false
	ap = r2 + 0x0000C634
	ZN = cond(ap)
	C = false
	V = false
	sp = sp - 0x00000004
	v36 = ap + 0x00000002
	Mem0[sp:word32] = v36
	CVZN = cond(v36)
	call Mem0[r4:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	v37 = r5 + 6
	Mem0[sp:word32] = v37
	ZN = cond(v37)
	C = false
	V = false
	ap = r2 + 0x0000C639
	ZN = cond(ap)
	C = false
	V = false
	sp = sp - 0x00000004
	v38 = ap + 0x00000002
	Mem0[sp:word32] = v38
	CVZN = cond(v38)
	call Mem0[r4:word32] + 2 (retsize: 4;)
	r7_r6 = 0x0000000000000000
	Z = true
	N = false
	C = false
	V = false
	r8 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r4 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r9 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	v44 = Mem0[r2 + 0x0000C60F:word32]
	Mem0[sp:word32] = v44
	ZN = cond(v44)
	C = false
	V = false
	call fn0000C0CE (retsize: 4;)
	v45 = r0
	Mem0[r2 + 0x0000C613:word32] = v45
	ZN = cond(v45)
	C = false
	V = false
	branch Test(NE,Z) l000109EF
	// succ:  l000109EC l000109EF
l000109EC:
	goto l00010A98
	// succ:  l00010A98
l000109EF:
	// succ:  l000109F0
l000109F0:
	r11 = Mem0[r2 + 0x0000C613:word32]
	ZN = cond(r11)
	C = false
	V = false
	ZN = cond(Mem0[r2 + 64:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00010A32
	// succ:  l000109FC l00010A32
l000109FC:
	CZN = cond(r3 - 0x00000009)
	V = false
	branch Test(EQ,Z) l00010A32
	// succ:  l00010A01 l00010A32
l00010A01:
	CZN = cond(r3 - 0x0000004C)
	V = false
	branch Test(EQ,Z) l00010A32
	// succ:  l00010A0A l00010A32
l00010A0A:
	ZN = cond(Mem0[r2 + 72:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010A13
	// succ:  l00010A0F l00010A13
l00010A0F:
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010A32
	// succ:  l00010A13 l00010A32
l00010A13:
	ap = r7 + r8
	CVZN = cond(ap)
	ap = ap + r6
	CVZN = cond(ap)
	ap = ap + r4
	CVZN = cond(ap)
	branch Test(LE,ZN) l00010A32
	// succ:  l00010A1F l00010A32
l00010A1F:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v47 = r5 + 9
	Mem0[sp:word32] = v47
	ZN = cond(v47)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	// succ:  l00010A32
l00010A32:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	call fn00010E6A (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	CZN = cond(r3 - 0x00000001)
	V = false
	branch Test(NE,Z) l00010A48
	// succ:  l00010A41 l00010A48
l00010A41:
	r6 = r6 + 0x00000001
	CVZN = cond(r6)
	goto l00010A6E
	// succ:  l00010A6E
l00010A48:
	CZN = cond(r3 - 0x0000004C)
	V = false
	branch Test(NE,Z) l00010A58
	// succ:  l00010A51 l00010A58
l00010A51:
	r9 = r9 + 0x00000001
	CVZN = cond(r9)
	goto l00010A6E
	// succ:  l00010A6E
l00010A58:
	CZN = cond(r3 - 0x00000009)
	V = false
	branch Test(NE,Z) l00010A64
	// succ:  l00010A5D l00010A64
l00010A5D:
	r4 = r4 + 0x00000001
	CVZN = cond(r4)
	goto l00010A6E
	// succ:  l00010A6E
l00010A64:
	ZN = cond(r3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010A6C
	// succ:  l00010A68 l00010A6C
l00010A68:
	r7 = r7 + 0x00000001
	CVZN = cond(r7)
	goto l00010A6E
	// succ:  l00010A6E
l00010A6C:
	r8 = r8 + 0x00000001
	CVZN = cond(r8)
	// succ:  l00010A6E
l00010A6E:
	CZN = cond(r3 - 0x0000004C)
	V = false
	branch Test(EQ,Z) l00010A7F
	// succ:  l00010A77 l00010A7F
l00010A77:
	CZN = cond(r3 - Mem0[sp:word32])
	V = false
	branch Test(LE,ZN) l00010A7F
	// succ:  l00010A7C l00010A7F
l00010A7C:
	v72 = r3
	Mem0[sp:word32] = v72
	ZN = cond(v72)
	C = false
	V = false
	// succ:  l00010A7F
l00010A7F:
	sp = sp - 0x00000004
	v73 = Mem0[r2 + 0x0000C60F:word32]
	Mem0[sp:word32] = v73
	ZN = cond(v73)
	C = false
	V = false
	call fn0000C0CE (retsize: 4;)
	v74 = r0
	Mem0[r2 + 0x0000C613:word32] = v74
	ZN = cond(v74)
	C = false
	V = false
	branch Test(EQ,Z) l00010A98
	// succ:  l00010A95 l00010A98
l00010A95:
	goto l000109F0
	// succ:  l000109F0
l00010A98:
	ap = r6 + r8
	CVZN = cond(ap)
	ap = ap + r7
	CVZN = cond(ap)
	branch Test(EQ,Z) l00010AA4
	// succ:  l00010AA1 l00010AA4
l00010AA1:
	goto l00010B72
	// succ:  l00010B72
l00010AA4:
	ap = r4 + r9
	CVZN = cond(ap)
	CZN = cond(ap - 0x00000001)
	V = false
	branch Test(EQ,Z) l00010AB0
	// succ:  l00010AAD l00010AB0
l00010AAD:
	goto l00010B72
	// succ:  l00010B72
l00010AB0:
	ZN = cond(r11 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00010AB7
	// succ:  l00010AB4 l00010AB7
l00010AB4:
	goto l00010B72
	// succ:  l00010B72
l00010AB7:
	r4 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r9 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	CZN = cond(Mem0[sp:word32] - 0x00000009)
	V = false
	branch Test(NE,Z) l00010AC2
	// succ:  l00010AC0 l00010AC2
l00010AC0:
	v52 = 0x00000000
	Mem0[sp:word32] = v52
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00010AC2
l00010AC2:
	sp = sp - 0x00000004
	v54 = Mem0[r2 + 0x0000C60F:word32]
	Mem0[sp:word32] = v54
	ZN = cond(v54)
	C = false
	V = false
	call fn00018F22 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010B18
	// succ:  l00010AD3 l00010B18
l00010AD3:
	sp = sp - 0x00000004
	v55 = (uint32) 0x0401
	Mem0[sp:uint32] = v55
	ZN = cond(v55)
	C = false
	V = false
	sp = sp - 0x00000004
	v56 = Mem0[r2 + 0x0000C60F:word32]
	Mem0[sp:word32] = v56
	ZN = cond(v56)
	C = false
	V = false
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010AEC
	// succ:  l00010AE2 l00010AEC
l00010AE2:
	ZN = cond(0x00007EE0)
	C = false
	V = false
	goto l00010AF1
	// succ:  l00010AF1
l00010AEC:
	r3 = r10 + 456
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00010AF1
l00010AF1:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v60 = r10 + 277
	Mem0[sp:word32] = v60
	ZN = cond(v60)
	C = false
	V = false
	sp = sp - 0x00000004
	v61 = r2 + 1515
	Mem0[sp:word32] = v61
	ZN = cond(v61)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v62 = r2 + 1515
	Mem0[sp:word32] = v62
	ZN = cond(v62)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	goto l00010B72
	// succ:  l00010B72
l00010B18:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r11
	ZN = cond(r11)
	C = false
	V = false
	call fn000192C6 (retsize: 4;)
	r0 = r0 + r11
	CVZN = cond(r0)
	v58 = r11
	Mem0[r2 + 0x0000C613:word32] = v58
	ZN = cond(v58)
	C = false
	V = false
	sp = sp - 0x00000004
	v59 = r5 + 11
	Mem0[sp:word32] = v59
	ZN = cond(v59)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	call fn000192BE (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	call fn00010E6A (retsize: 4;)
	CZN = cond(r0 - 0x00000001)
	V = false
	branch Test(NE,Z) l00010B48
	// succ:  l00010B43 l00010B48
l00010B43:
	r6 = r6 + 0x00000001
	CVZN = cond(r6)
	goto l00010B6A
	// succ:  l00010B6A
l00010B48:
	CZN = cond(r0 - 0x0000004C)
	V = false
	branch Test(NE,Z) l00010B58
	// succ:  l00010B51 l00010B58
l00010B51:
	r9 = r9 + 0x00000001
	CVZN = cond(r9)
	goto l00010B6A
	// succ:  l00010B6A
l00010B58:
	CZN = cond(r0 - 0x00000009)
	V = false
	branch Test(EQ,Z) l00010B6A
	// succ:  l00010B5D l00010B6A
l00010B5D:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010B68
	// succ:  l00010B61 l00010B68
l00010B61:
	r7 = r7 + 0x00000001
	CVZN = cond(r7)
	goto l00010B6A
	// succ:  l00010B6A
l00010B68:
	r8 = r8 + 0x00000001
	CVZN = cond(r8)
	// succ:  l00010B6A
l00010B6A:
	CZN = cond(r0 - Mem0[sp:word32])
	V = false
	branch Test(LE,ZN) l00010B72
	// succ:  l00010B6F l00010B72
l00010B6F:
	v65 = r0
	Mem0[sp:word32] = v65
	ZN = cond(v65)
	C = false
	V = false
	// succ:  l00010B72
l00010B72:
	sp = sp - 0x00000004
	v48 = Mem0[r2 + 0x0000C60F:word32]
	Mem0[sp:word32] = v48
	ZN = cond(v48)
	C = false
	V = false
	call fn00018F22 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00010B86
	// succ:  l00010B83 l00010B86
l00010B83:
	goto l00010D63
	// succ:  l00010D63
l00010B86:
	CZN = cond(Mem0[r2 + 64:word32] - 0x00000003)
	V = false
	branch Test(LT,N) l00010B8F
	// succ:  l00010B8C l00010B8F
l00010B8C:
	goto l00010D63
	// succ:  l00010D63
l00010B8F:
	ZN = cond(Mem0[r2 + 72:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010BA0
	// succ:  l00010B94 l00010BA0
l00010B94:
	ZN = cond(Mem0[r2 + 64:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010BA0
	// succ:  l00010B99 l00010BA0
l00010B99:
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00010BA0
	// succ:  l00010B9D l00010BA0
l00010B9D:
	goto l00010D63
	// succ:  l00010D63
l00010BA0:
	ap = r4 + r7
	CVZN = cond(ap)
	ap = ap + r6
	CVZN = cond(ap)
	branch Test(GT,ZN) l00010BAE
	// succ:  l00010BA9 l00010BAE
l00010BA9:
	CZN = cond(r8 - 0x00000001)
	V = false
	branch Test(EQ,Z) l00010BD8
	// succ:  l00010BAE l00010BD8
l00010BAE:
	ZN = cond(Mem0[r2 + 72:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010BB7
	// succ:  l00010BB3 l00010BB7
l00010BB3:
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010BD8
	// succ:  l00010BB7 l00010BD8
l00010BB7:
	ZN = cond(Mem0[r2 + 68:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010BC2
	// succ:  l00010BBC l00010BC2
l00010BBC:
	CZN = cond(Mem0[r2 + 64:word32] - 0x00000001)
	V = false
	branch Test(GT,ZN) l00010BD8
	// succ:  l00010BC2 l00010BD8
l00010BC2:
	sp = sp - 0x00000004
	v66 = (uint32) 0x0401
	Mem0[sp:uint32] = v66
	ZN = cond(v66)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v67 = r5 + 16
	Mem0[sp:word32] = v67
	ZN = cond(v67)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	// succ:  l00010BD8
l00010BD8:
	CZN = cond(r8 - 0x00000001)
	V = false
	branch Test(GT,ZN) l00010BEB
	// succ:  l00010BDD l00010BEB
l00010BDD:
	branch Test(NE,Z) l00010C24
	// succ:  l00010BDF l00010C24
l00010BDF:
	ap = r4 + r9
	CVZN = cond(ap)
	ap = ap + r7
	CVZN = cond(ap)
	ap = ap + r6
	CVZN = cond(ap)
	branch Test(LE,ZN) l00010C24
	// succ:  l00010BEB l00010C24
l00010BEB:
	sp = sp - 0x00000004
	v68 = (uint32) 0x0401
	Mem0[sp:uint32] = v68
	ZN = cond(v68)
	C = false
	V = false
	CZN = cond(r8 - 0x00000001)
	V = false
	branch Test(NE,Z) l00010BFC
	// succ:  l00010BF5 l00010BFC
l00010BF5:
	r3 = r5 + 25
	ZN = cond(r3)
	C = false
	V = false
	goto l00010C00
	// succ:  l00010C00
l00010BFC:
	r3 = r5 + 18
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00010C00
l00010C00:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r8
	ZN = cond(r8)
	C = false
	V = false
	sp = sp - 0x00000004
	v69 = r10 + 39
	Mem0[sp:word32] = v69
	ZN = cond(v69)
	C = false
	V = false
	sp = sp - 0x00000004
	v70 = r2 + 1515
	Mem0[sp:word32] = v70
	ZN = cond(v70)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v71 = r2 + 1515
	Mem0[sp:word32] = v71
	ZN = cond(v71)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	// succ:  l00010C24
l00010C24:
	ZN = cond(r6 - 0x00000000)
	C = false
	V = false
	branch Test(LE,ZN) l00010C60
	// succ:  l00010C28 l00010C60
l00010C28:
	sp = sp - 0x00000004
	v75 = (uint32) 0x0401
	Mem0[sp:uint32] = v75
	ZN = cond(v75)
	C = false
	V = false
	CZN = cond(r6 - 0x00000001)
	V = false
	branch Test(NE,Z) l00010C38
	// succ:  l00010C32 l00010C38
l00010C32:
	r3 = r5 + 32
	ZN = cond(r3)
	C = false
	V = false
	goto l00010C3C
	// succ:  l00010C3C
l00010C38:
	r3 = r5 + 30
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00010C3C
l00010C3C:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r6
	ZN = cond(r6)
	C = false
	V = false
	sp = sp - 0x00000004
	v77 = r10 + 77
	Mem0[sp:word32] = v77
	ZN = cond(v77)
	C = false
	V = false
	sp = sp - 0x00000004
	v78 = r2 + 1515
	Mem0[sp:word32] = v78
	ZN = cond(v78)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v79 = r2 + 1515
	Mem0[sp:word32] = v79
	ZN = cond(v79)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	// succ:  l00010C60
l00010C60:
	ZN = cond(r7 - 0x00000000)
	C = false
	V = false
	branch Test(LE,ZN) l00010C9C
	// succ:  l00010C64 l00010C9C
l00010C64:
	sp = sp - 0x00000004
	v76 = (uint32) 0x0401
	Mem0[sp:uint32] = v76
	ZN = cond(v76)
	C = false
	V = false
	CZN = cond(r7 - 0x00000001)
	V = false
	branch Test(NE,Z) l00010C74
	// succ:  l00010C6E l00010C74
l00010C6E:
	r3 = r5 + 35
	ZN = cond(r3)
	C = false
	V = false
	goto l00010C78
	// succ:  l00010C78
l00010C74:
	r3 = r5 + 33
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00010C78
l00010C78:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	sp = sp - 0x00000004
	v80 = r10 + 125
	Mem0[sp:word32] = v80
	ZN = cond(v80)
	C = false
	V = false
	sp = sp - 0x00000004
	v81 = r2 + 1515
	Mem0[sp:word32] = v81
	ZN = cond(v81)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v82 = r2 + 1515
	Mem0[sp:word32] = v82
	ZN = cond(v82)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	// succ:  l00010C9C
l00010C9C:
	ZN = cond(r4 - 0x00000000)
	C = false
	V = false
	branch Test(LE,ZN) l00010CD9
	// succ:  l00010CA0 l00010CD9
l00010CA0:
	sp = sp - 0x00000004
	v83 = (uint32) 0x0401
	Mem0[sp:uint32] = v83
	ZN = cond(v83)
	C = false
	V = false
	CZN = cond(r4 - 0x00000001)
	V = false
	branch Test(NE,Z) l00010CB0
	// succ:  l00010CAA l00010CB0
l00010CAA:
	r3 = r5 + 38
	ZN = cond(r3)
	C = false
	V = false
	goto l00010CB4
	// succ:  l00010CB4
l00010CB0:
	r3 = r5 + 36
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00010CB4
l00010CB4:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	v84 = r10 + 157
	Mem0[sp:word32] = v84
	ZN = cond(v84)
	C = false
	V = false
	sp = sp - 0x00000004
	v85 = r2 + 1515
	Mem0[sp:word32] = v85
	ZN = cond(v85)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v86 = r2 + 1515
	Mem0[sp:word32] = v86
	ZN = cond(v86)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	// succ:  l00010CD9
l00010CD9:
	CZN = cond(r9 - 0x00000001)
	V = false
	branch Test(NE,Z) l00010D08
	// succ:  l00010CDE l00010D08
l00010CDE:
	sp = sp - 0x00000004
	v87 = (uint32) 0x0401
	Mem0[sp:uint32] = v87
	ZN = cond(v87)
	C = false
	V = false
	sp = sp - 0x00000004
	v88 = r10 + 194
	Mem0[sp:word32] = v88
	ZN = cond(v88)
	C = false
	V = false
	sp = sp - 0x00000004
	v89 = r2 + 1515
	Mem0[sp:word32] = v89
	ZN = cond(v89)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v90 = r2 + 1515
	Mem0[sp:word32] = v90
	ZN = cond(v90)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	goto l00010D34
	// succ:  l00010D34
l00010D08:
	ZN = cond(r9 - 0x00000000)
	C = false
	V = false
	branch Test(LE,ZN) l00010D34
	// succ:  l00010D0C l00010D34
l00010D0C:
	sp = sp - 0x00000004
	v91 = (uint32) 0x0401
	Mem0[sp:uint32] = v91
	ZN = cond(v91)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r9
	ZN = cond(r9)
	C = false
	V = false
	sp = sp - 0x00000004
	v92 = r10 + 224
	Mem0[sp:word32] = v92
	ZN = cond(v92)
	C = false
	V = false
	sp = sp - 0x00000004
	v93 = r2 + 1515
	Mem0[sp:word32] = v93
	ZN = cond(v93)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v94 = r2 + 1515
	Mem0[sp:word32] = v94
	ZN = cond(v94)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	// succ:  l00010D34
l00010D34:
	ap = r7 + r8
	CVZN = cond(ap)
	ap = ap + r6
	CVZN = cond(ap)
	branch Test(NE,Z) l00010D63
	// succ:  l00010D3D l00010D63
l00010D3D:
	sp = sp - 0x00000004
	v95 = (uint32) 0x0401
	Mem0[sp:uint32] = v95
	ZN = cond(v95)
	C = false
	V = false
	sp = sp - 0x00000004
	v96 = r10 + 257
	Mem0[sp:word32] = v96
	ZN = cond(v96)
	C = false
	V = false
	sp = sp - 0x00000004
	v97 = r2 + 1515
	Mem0[sp:word32] = v97
	ZN = cond(v97)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v98 = r2 + 1515
	Mem0[sp:word32] = v98
	ZN = cond(v98)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	// succ:  l00010D63
l00010D63:
	call fn0001872A (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000005
	ZN = cond(0x00000005)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	call fn0000C6FA (retsize: 4;)
	ZN = cond(Mem0[r2 + 0x0000C5EB:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010D8A
	// succ:  l00010D7D l00010D8A
l00010D7D:
	call fn0000D406 (retsize: 4;)
	v49 = 0x00000000
	Mem0[r2 + 0x0000C5EB:word32] = v49
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00010D8A
l00010D8A:
	ZN = cond(Mem0[r2 + 0x0000C815:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010DA5
	// succ:  l00010D92 l00010DA5
l00010D92:
	sp = sp - 0x00000004
	v50 = Mem0[r2 + 0x0000C815:word32]
	Mem0[sp:word32] = v50
	ZN = cond(v50)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	v51 = 0x00000000
	Mem0[r2 + 0x0000C815:word32] = v51
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00010DA5
l00010DA5:
	ZN = cond(Mem0[r2 + 0x0000C6F1:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010DBA
	// succ:  l00010DAD l00010DBA
l00010DAD:
	sp = sp - 0x00000004
	v53 = Mem0[r2 + 0x0000C6F1:word32]
	Mem0[sp:word32] = v53
	ZN = cond(v53)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	// succ:  l00010DBA
l00010DBA:
	ZN = cond(Mem0[r2 + 0x0000C5F3:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010DCF
	// succ:  l00010DC2 l00010DCF
l00010DC2:
	sp = sp - 0x00000004
	v57 = Mem0[r2 + 0x0000C5F3:word32]
	Mem0[sp:word32] = v57
	ZN = cond(v57)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	// succ:  l00010DCF
l00010DCF:
	v63 = 0x00000000
	Mem0[r2 + 0x0000C6F1:word32] = v63
	Z = true
	N = false
	C = false
	V = false
	v64 = 0x00000000
	Mem0[r2 + 0x0000C5F3:word32] = v64
	Z = true
	N = false
	C = false
	V = false
	r0 = Mem0[sp + 0:word32]
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000108D2_exit
fn000108D2_exit:


// fn00010E6A
// Return size: 4
define fn00010E6A
fn00010E6A_entry:
	// succ:  l00010E6A
l00010E6A:
	sp = fp
	sp = sp - 0x0000000C
	CVZN = cond(sp)
	ZN = cond(0xFFFE67AC)
	C = false
	V = false
	ZN = cond(0x00007D48)
	C = false
	V = false
	ZN = cond(0x00007DE0)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFF8DEC)
	C = false
	V = false
	r8 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r5 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	v12 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v12
	ZN = cond(v12)
	C = false
	V = false
	call fn00018F22 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00010EDF
	// succ:  l00010EA5 l00010EDF
l00010EA5:
	sp = sp - 0x00000004
	v14 = r2 + 0x0000C694
	Mem0[sp:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	sp = sp - 0x00000004
	v15 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	call fn000192AA (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00010EDF
	// succ:  l00010EBC l00010EDF
l00010EBC:
	r0 = (uint32) Mem0[r2 + 0x0000C69E:word16]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 & ~0xFFFF0FFF
	ZN = cond(r0)
	C = false
	V = false
	r1 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	CZN = cond(r0 - 0x00004000)
	V = false
	branch Test(NE,Z) l00010ED7
	// succ:  l00010ED5 l00010ED7
l00010ED5:
	r1 = r1 + 0x00000001
	CVZN = cond(r1)
	// succ:  l00010ED7
l00010ED7:
	r5 = r1
	ZN = cond(r5)
	C = false
	V = false
	branch Test(NE,Z) l00010EDF
	// succ:  l00010EDC l00010EDF
l00010EDC:
	goto l00010FAB
	// succ:  l00010FAB
l00010EDF:
	ZN = cond(Mem0[ap + 4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00010EE7
	// succ:  l00010EE4 l00010EE7
l00010EE4:
	goto l00010F98
	// succ:  l00010F98
l00010EE7:
	ZN = cond(Mem0[r2 + 0x0000C6E9:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010F50
	// succ:  l00010EEF l00010F50
l00010EEF:
	sp = sp - 0x00000004
	v24 = (uint32) 0x0401
	Mem0[sp:uint32] = v24
	ZN = cond(v24)
	C = false
	V = false
	sp = sp - 0x00000004
	v25 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v25
	ZN = cond(v25)
	C = false
	V = false
	r3 = Mem0[r2:word32]
	ZN = cond(r3)
	C = false
	V = false
	branch Test(EQ,Z) l00010F08
	// succ:  l00010EFF l00010F08
l00010EFF:
	r4 = r7 + 40
	ZN = cond(r4)
	C = false
	V = false
	goto l00010F0C
	// succ:  l00010F0C
l00010F08:
	r4 = r7 + 39
	ZN = cond(r4)
	C = false
	V = false
	// succ:  l00010F0C
l00010F0C:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	v33 = Mem0[r2 + 0x0000C60F:word32]
	Mem0[sp:word32] = v33
	ZN = cond(v33)
	C = false
	V = false
	ZN = cond(r3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010F24
	// succ:  l00010F18 l00010F24
l00010F18:
	ZN = cond(0x00007EE0)
	C = false
	V = false
	goto l00010F29
	// succ:  l00010F29
l00010F24:
	r3 = r6 + 456
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00010F29
l00010F29:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v44 = r6 + 340
	Mem0[sp:word32] = v44
	ZN = cond(v44)
	C = false
	V = false
	sp = sp - 0x00000004
	v45 = r2 + 1515
	Mem0[sp:word32] = v45
	ZN = cond(v45)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v46 = r2 + 1515
	Mem0[sp:word32] = v46
	ZN = cond(v46)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	goto l00010F98
	// succ:  l00010F98
l00010F50:
	sp = sp - 0x00000004
	v30 = (uint32) 0x0401
	Mem0[sp:uint32] = v30
	ZN = cond(v30)
	C = false
	V = false
	sp = sp - 0x00000004
	v31 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v31
	ZN = cond(v31)
	C = false
	V = false
	sp = sp - 0x00000004
	v32 = Mem0[r2 + 0x0000C60F:word32]
	Mem0[sp:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010F70
	// succ:  l00010F65 l00010F70
l00010F65:
	ZN = cond(0x00007EE0)
	C = false
	V = false
	goto l00010F75
	// succ:  l00010F75
l00010F70:
	r3 = r6 + 456
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00010F75
l00010F75:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v41 = r6 + 421
	Mem0[sp:word32] = v41
	ZN = cond(v41)
	C = false
	V = false
	sp = sp - 0x00000004
	v42 = r2 + 1515
	Mem0[sp:word32] = v42
	ZN = cond(v42)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v43 = r2 + 1515
	Mem0[sp:word32] = v43
	ZN = cond(v43)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	// succ:  l00010F98
l00010F98:
	ZN = cond(r5 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010FA4
	// succ:  l00010F9C l00010FA4
l00010F9C:
	v19 = 0x4C
	r1 = DPB(r1, v19, 0)
	ZN = cond(v19)
	C = false
	V = false
	goto l00010FA7
	// succ:  l00010FA7
l00010FA4:
	v23 = 0x09
	r1 = DPB(r1, v23, 0)
	ZN = cond(v23)
	C = false
	V = false
	// succ:  l00010FA7
l00010FA7:
	r0 = (int32) (int8) r1
	VZN = cond(r0)
	C = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00010E6A_exit
l00010FAB:
	v20 = Mem0[r2 + 0x0000C6AE:word32]
	Mem0[r2 + 0x0000C61B:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	call fn00009A52 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010FC5
	// succ:  l00010FC1 l00010FC5
l00010FC1:
	r0 = 0x00000002
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00010E6A_exit
l00010FC5:
	call fn0000D4A2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00010FD4
	// succ:  l00010FD0 l00010FD4
l00010FD0:
	r0 = 0x00000009
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00010E6A_exit
l00010FD4:
	ZN = cond(Mem0[r2 + 0x0000C5EB:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00010FF0
	// succ:  l00010FDC l00010FF0
l00010FDC:
	call fn0000D39E (retsize: 4;)
	v29 = r0
	Mem0[r2 + 0x0000C5EB:word32] = v29
	ZN = cond(v29)
	C = false
	V = false
	branch Test(NE,Z) l00010FF0
	// succ:  l00010FEC l00010FF0
l00010FEC:
	r0 = 0x00000004
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00010E6A_exit
l00010FF0:
	v34 = 0x00000000
	Mem0[r2 + 0x0000C61F:word32] = v34
	Z = true
	N = false
	C = false
	V = false
	v35 = Mem0[r2 + 0x0000C5F3:word32]
	Mem0[r2 + 0x0000C5F7:word32] = v35
	ZN = cond(v35)
	C = false
	V = false
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00011037
	// succ:  l00011005 l00011037
l00011005:
	ZN = cond(Mem0[r2 + 64:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00011037
	// succ:  l0001100A l00011037
l0001100A:
	ZN = cond(Mem0[r2 + 72:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00011037
	// succ:  l0001100F l00011037
l0001100F:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v36 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v36
	ZN = cond(v36)
	C = false
	V = false
	sp = sp - 0x00000004
	v37 = r7 + 43
	Mem0[sp:word32] = v37
	ZN = cond(v37)
	C = false
	V = false
	sp = sp - 0x00000004
	v38 = r2 + 1515
	Mem0[sp:word32] = v38
	ZN = cond(v38)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v39 = r2 + 1515
	Mem0[sp:word32] = v39
	ZN = cond(v39)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	// succ:  l00011037
l00011037:
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00011060
	// succ:  l0001103B l00011060
l0001103B:
	sp = sp - 0x00000004
	v47 = Mem0[r2 + 0x0000C61B:word32]
	Mem0[sp:word32] = v47
	ZN = cond(v47)
	C = false
	V = false
	call fn000117AA (retsize: 4;)
	r9 = r0
	ZN = cond(r9)
	C = false
	V = false
	branch Test(EQ,Z) l0001104E
	// succ:  l0001104B l0001104E
l0001104B:
	goto l000110EF
	// succ:  l000110EF
l0001104E:
	call fn00012A2A (retsize: 4;)
	r9 = r0
	ZN = cond(r9)
	C = false
	V = false
	CZN = cond(r9 - 0x00000001)
	V = false
	branch Test(LE,ZN) l00011060
	// succ:  l0001105D l00011060
l0001105D:
	goto l000110EF
	// succ:  l000110EF
l00011060:
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00011067
	// succ:  l00011064 l00011067
l00011064:
	goto l00011110
	// succ:  l00011110
l00011067:
	r0 = Mem0[r2 + 0x0000C61B:word32]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x000101D0)
	V = false
	branch Test(GE,N) l0001107C
	// succ:  l00011077 l0001107C
l00011077:
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	goto l00011083
	// succ:  l00011083
l0001107C:
	r3 = 0x000101D0
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00011083
l00011083:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	call fn000117AA (retsize: 4;)
	r9 = r0
	ZN = cond(r9)
	C = false
	V = false
	branch Test(NE,Z) l000110EF
	// succ:  l0001108F l000110EF
l0001108F:
	r4 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(Mem0[r2 + 0x0000C692:word16] - 0x0000)
	C = false
	V = false
	branch Test(EQ,Z) l000110E7
	// succ:  l00011099 l000110E7
l00011099:
	ZN = cond(Mem0[r2 + 92:word32] - 0x00000000)
	C = false
	V = false
	branch Test(GT,ZN) l000110AA
	// succ:  l0001109E l000110AA
l0001109E:
	branch Test(NE,Z) l000110E7
	// succ:  l000110A0 l000110E7
l000110A0:
	ZN = cond(Mem0[r2 + 72:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000110E7
	// succ:  l000110A5 l000110E7
l000110A5:
	ZN = cond(Mem0[r2 + 64:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000110E7
	// succ:  l000110AA l000110E7
l000110AA:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v52 = (uint32) Mem0[r2 + 0x0000C692:word16]
	Mem0[sp:uint32] = v52
	ZN = cond(v52)
	C = false
	V = false
	call fn0000DC76 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000110E7
	// succ:  l000110BE l000110E7
l000110BE:
	sp = sp - 0x00000004
	v53 = (uint32) 0x0401
	Mem0[sp:uint32] = v53
	ZN = cond(v53)
	C = false
	V = false
	sp = sp - 0x00000004
	v54 = r6 + 1864
	Mem0[sp:word32] = v54
	ZN = cond(v54)
	C = false
	V = false
	sp = sp - 0x00000004
	v55 = r2 + 1515
	Mem0[sp:word32] = v55
	ZN = cond(v55)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v56 = r2 + 1515
	Mem0[sp:word32] = v56
	ZN = cond(v56)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	r4 = 0x00000001
	ZN = cond(r4)
	C = false
	V = false
	// succ:  l000110E7
l000110E7:
	r9 = r4
	ZN = cond(r9)
	C = false
	V = false
	CZN = cond(r9 - 0x00000001)
	V = false
	branch Test(LE,ZN) l00011110
	// succ:  l000110EF l00011110
l000110EF:
	sp = sp - 0x00000004
	v49 = Mem0[r2 + 0x0000C617:word32]
	Mem0[sp:word32] = v49
	ZN = cond(v49)
	C = false
	V = false
	call fn0001925E (retsize: 4;)
	ZN = cond(Mem0[ap + 4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00011105
	// succ:  l00011101 l00011105
l00011101:
	r0 = r9
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00010E6A_exit
l00011105:
	v50 = 0x00000001
	Mem0[r2 + 0x0000C6E9:word32] = v50
	ZN = cond(v50)
	C = false
	V = false
	r0 = 0x00000009
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00010E6A_exit
l00011110:
	ZN = cond(Mem0[r2 + 92:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LE,ZN) l0001112A
	// succ:  l00011115 l0001112A
l00011115:
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0001112A
	// succ:  l00011119 l0001112A
l00011119:
	sp = sp - 0x00000004
	v51 = Mem0[r2 + 0x0000C617:word32]
	Mem0[sp:word32] = v51
	ZN = cond(v51)
	C = false
	V = false
	call fn0001925E (retsize: 4;)
	r0 = r9
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00010E6A_exit
l0001112A:
	v57 = 0x00
	r3 = DPB(r3, v57, 0)
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0001113B
	// succ:  l00011130 l0001113B
l00011130:
	r0 = (uint32) Mem0[r2 + 0x0000C682:word16]
	ZN = cond(r0)
	C = false
	V = false
	branch Test(EQ,Z) l0001113B
	// succ:  l00011139 l0001113B
l00011139:
	v58 = (byte) r3 + 0x01
	r3 = DPB(r3, v58, 0)
	CVZN = cond(v58)
	// succ:  l0001113B
l0001113B:
	r4 = (int32) (int8) r3
	VZN = cond(r4)
	C = false
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00011145
	// succ:  l00011142 l00011145
l00011142:
	goto l000111D9
	// succ:  l000111D9
l00011145:
	CZN = cond(Mem0[r2 + 0x0000C682:word16] - Mem0[r2 + 0x0000C684:word16])
	V = false
	branch Test(NE,Z) l00011155
	// succ:  l00011152 l00011155
l00011152:
	goto l000111D9
	// succ:  l000111D9
l00011155:
	branch Test(ULE,CZ) l0001119C
	// succ:  l00011157 l0001119C
l00011157:
	sp = sp - 0x00000004
	v68 = (uint32) 0x0401
	Mem0[sp:uint32] = v68
	ZN = cond(v68)
	C = false
	V = false
	sp = sp - 0x00000004
	v69 = (uint32) Mem0[r2 + 0x0000C684:word16]
	Mem0[sp:uint32] = v69
	ZN = cond(v69)
	C = false
	V = false
	sp = sp - 0x00000004
	v70 = (uint32) Mem0[r2 + 0x0000C682:word16]
	Mem0[sp:uint32] = v70
	ZN = cond(v70)
	C = false
	V = false
	sp = sp - 0x00000004
	v71 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v71
	ZN = cond(v71)
	C = false
	V = false
	sp = sp - 0x00000004
	v72 = r6 + 515
	Mem0[sp:word32] = v72
	ZN = cond(v72)
	C = false
	V = false
	sp = sp - 0x00000004
	v73 = r2 + 1515
	Mem0[sp:word32] = v73
	ZN = cond(v73)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v74 = r2 + 1515
	Mem0[sp:word32] = v74
	ZN = cond(v74)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	r9 = 0x0000000B
	ZN = cond(r9)
	C = false
	V = false
	r8 = 0x00000001
	ZN = cond(r8)
	C = false
	V = false
	goto l000111D9
	// succ:  l000111D9
l0001119C:
	sp = sp - 0x00000004
	v80 = (uint32) 0x0401
	Mem0[sp:uint32] = v80
	ZN = cond(v80)
	C = false
	V = false
	sp = sp - 0x00000004
	v81 = (uint32) Mem0[r2 + 0x0000C684:word16]
	Mem0[sp:uint32] = v81
	ZN = cond(v81)
	C = false
	V = false
	sp = sp - 0x00000004
	v82 = (uint32) Mem0[r2 + 0x0000C682:word16]
	Mem0[sp:uint32] = v82
	ZN = cond(v82)
	C = false
	V = false
	sp = sp - 0x00000004
	v83 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v83
	ZN = cond(v83)
	C = false
	V = false
	sp = sp - 0x00000004
	v84 = r6 + 662
	Mem0[sp:word32] = v84
	ZN = cond(v84)
	C = false
	V = false
	sp = sp - 0x00000004
	v85 = r2 + 1515
	Mem0[sp:word32] = v85
	ZN = cond(v85)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v86 = r2 + 1515
	Mem0[sp:word32] = v86
	ZN = cond(v86)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	r9 = 0x00000001
	ZN = cond(r9)
	C = false
	V = false
	// succ:  l000111D9
l000111D9:
	ZN = cond(r8 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000111E0
	// succ:  l000111DD l000111E0
l000111DD:
	goto l00011742
	// succ:  l00011742
l000111E0:
	ZN = cond(r4 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00011213
	// succ:  l000111E4 l00011213
l000111E4:
	sp = sp - 0x00000004
	v75 = (uint32) 0x0401
	Mem0[sp:uint32] = v75
	ZN = cond(v75)
	C = false
	V = false
	sp = sp - 0x00000004
	v76 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v76
	ZN = cond(v76)
	C = false
	V = false
	sp = sp - 0x00000004
	v77 = r6 + 844
	Mem0[sp:word32] = v77
	ZN = cond(v77)
	C = false
	V = false
	sp = sp - 0x00000004
	v78 = r2 + 1515
	Mem0[sp:word32] = v78
	ZN = cond(v78)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v79 = r2 + 1515
	Mem0[sp:word32] = v79
	ZN = cond(v79)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	r9 = 0x00000001
	ZN = cond(r9)
	C = false
	V = false
	// succ:  l00011213
l00011213:
	v87 = Mem0[r2 + 124:word32] - Mem0[r2 + 128:word32]
	Mem0[r2 + 0x0000C623:word32] = v87
	CVZN = cond(v87)
	r4 = Mem0[r2 + 0x0000C623:word32]
	ZN = cond(r4)
	C = false
	V = false
	branch Test(GE,N) l0001125C
	// succ:  l00011227 l0001125C
l00011227:
	sp = sp - 0x00000004
	v88 = (uint32) 0x0401
	Mem0[sp:uint32] = v88
	ZN = cond(v88)
	C = false
	V = false
	sp = sp - 0x00000004
	v89 = -r4
	Mem0[sp:word32] = v89
	CVZN = cond(v89)
	sp = sp - 0x00000004
	v90 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v90
	ZN = cond(v90)
	C = false
	V = false
	sp = sp - 0x00000004
	v91 = r6 + 1199
	Mem0[sp:word32] = v91
	ZN = cond(v91)
	C = false
	V = false
	sp = sp - 0x00000004
	v92 = r2 + 1515
	Mem0[sp:word32] = v92
	ZN = cond(v92)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v93 = r2 + 1515
	Mem0[sp:word32] = v93
	ZN = cond(v93)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	r9 = 0x00000002
	ZN = cond(r9)
	C = false
	V = false
	goto l000112FA
	// succ:  l000112FA
l0001125C:
	ZN = cond(r4 - 0x00000000)
	C = false
	V = false
	branch Test(GT,ZN) l00011263
	// succ:  l00011260 l00011263
l00011260:
	goto l000112FA
	// succ:  l000112FA
l00011263:
	ZN = cond(Mem0[r2 + 0x0000C68E:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000112B8
	// succ:  l0001126B l000112B8
l0001126B:
	ZN = cond(Mem0[r2 + 0x0000C68A:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000112B8
	// succ:  l00011273 l000112B8
l00011273:
	sp = sp - 0x00000004
	v94 = (uint32) 0x0401
	Mem0[sp:uint32] = v94
	ZN = cond(v94)
	C = false
	V = false
	sp = sp - 0x00000004
	v95 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v95
	ZN = cond(v95)
	C = false
	V = false
	sp = sp - 0x00000004
	v96 = r6 + 1275
	Mem0[sp:word32] = v96
	ZN = cond(v96)
	C = false
	V = false
	sp = sp - 0x00000004
	v97 = r2 + 1515
	Mem0[sp:word32] = v97
	ZN = cond(v97)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v98 = r2 + 1515
	Mem0[sp:word32] = v98
	ZN = cond(v98)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	v99 = Mem0[r2 + 0x0000C623:word32]
	Mem0[r2 + 0x0000C68E:word32] = v99
	ZN = cond(v99)
	C = false
	V = false
	v100 = 0x00000000
	Mem0[r2 + 0x0000C623:word32] = v100
	Z = true
	N = false
	C = false
	V = false
	r9 = 0x00000002
	ZN = cond(r9)
	C = false
	V = false
	goto l000112FA
	// succ:  l000112FA
l000112B8:
	sp = sp - 0x00000004
	v110 = (uint32) 0x0401
	Mem0[sp:uint32] = v110
	ZN = cond(v110)
	C = false
	V = false
	CZN = cond(r4 - 0x00000001)
	V = false
	branch Test(NE,Z) l000112C8
	// succ:  l000112C2 l000112C8
l000112C2:
	r3 = r7 + 59
	ZN = cond(r3)
	C = false
	V = false
	goto l000112CC
	// succ:  l000112CC
l000112C8:
	r3 = r7 + 57
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l000112CC
l000112CC:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	v111 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v111
	ZN = cond(v111)
	C = false
	V = false
	sp = sp - 0x00000004
	v112 = r6 + 1102
	Mem0[sp:word32] = v112
	ZN = cond(v112)
	C = false
	V = false
	sp = sp - 0x00000004
	v113 = r2 + 1515
	Mem0[sp:word32] = v113
	ZN = cond(v113)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v114 = r2 + 1515
	Mem0[sp:word32] = v114
	ZN = cond(v114)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	r9 = 0x00000001
	ZN = cond(r9)
	C = false
	V = false
	// succ:  l000112FA
l000112FA:
	ZN = cond(Mem0[r2 + 128:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00011303
	// succ:  l00011300 l00011303
l00011300:
	goto l00011390
	// succ:  l00011390
l00011303:
	ZN = cond(Mem0[r2 + 0x0000C68A:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0001130E
	// succ:  l0001130B l0001130E
l0001130B:
	goto l00011390
	// succ:  l00011390
l0001130E:
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00011348
	// succ:  l00011312 l00011348
l00011312:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	CZN = cond(Mem0[r2 + 36:word32] - 0x00000009)
	V = false
	branch Test(LE,ZN) l00011320
	// succ:  l0001131A l00011320
l0001131A:
	r3 = r7 + 79
	ZN = cond(r3)
	C = false
	V = false
	goto l00011324
	// succ:  l00011324
l00011320:
	r3 = r7 + 78
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00011324
l00011324:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v101 = r7 + 60
	Mem0[sp:word32] = v101
	ZN = cond(v101)
	C = false
	V = false
	sp = sp - 0x00000004
	v102 = r2 + 1515
	Mem0[sp:word32] = v102
	ZN = cond(v102)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v103 = r2 + 1515
	Mem0[sp:word32] = v103
	ZN = cond(v103)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	goto l00011374
	// succ:  l00011374
l00011348:
	sp = sp - 0x00000004
	v104 = (uint32) 0x0401
	Mem0[sp:uint32] = v104
	ZN = cond(v104)
	C = false
	V = false
	sp = sp - 0x00000004
	v105 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v105
	ZN = cond(v105)
	C = false
	V = false
	sp = sp - 0x00000004
	v106 = r6 + 1352
	Mem0[sp:word32] = v106
	ZN = cond(v106)
	C = false
	V = false
	sp = sp - 0x00000004
	v107 = r2 + 1515
	Mem0[sp:word32] = v107
	ZN = cond(v107)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v108 = r2 + 1515
	Mem0[sp:word32] = v108
	ZN = cond(v108)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	// succ:  l00011374
l00011374:
	sp = sp - 0x00000004
	v109 = Mem0[r2 + 0x0000C617:word32]
	Mem0[sp:word32] = v109
	ZN = cond(v109)
	C = false
	V = false
	call fn0001925E (retsize: 4;)
	CZN = cond(r9 - 0x00000001)
	V = false
	branch Test(LE,ZN) l0001138C
	// succ:  l00011386 l0001138C
l00011386:
	r0 = r9
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00010E6A_exit
l0001138C:
	r0 = 0x00000001
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00010E6A_exit
l00011390:
	r3 = Mem0[r2 + 0x0000C623:word32] + Mem0[r2 + 0x0000C68E:word32]
	CVZN = cond(r3)
l00011742:
	sp = sp - 0x00000004
	v59 = Mem0[r2 + 0x0000C617:word32]
	Mem0[sp:word32] = v59
	ZN = cond(v59)
	C = false
	V = false
	call fn0001925E (retsize: 4;)
	ZN = cond(Mem0[r2 + 72:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000117A3
	// succ:  l00011754 l000117A3
l00011754:
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000117A3
	// succ:  l00011758 l000117A3
l00011758:
	ZN = cond(Mem0[fp + -12:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000117A3
	// succ:  l0001175D l000117A3
l0001175D:
	sp = sp - 0x00000004
	v60 = Mem0[fp + -8:word32]
	Mem0[sp:word32] = v60
	ZN = cond(v60)
	C = false
	V = false
	sp = sp - 0x00000004
	v61 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v61
	ZN = cond(v61)
	C = false
	V = false
	call fn0000BDC2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000117A3
	// succ:  l00011771 l000117A3
l00011771:
	sp = sp - 0x00000004
	v62 = (uint32) 0x0201
	Mem0[sp:uint32] = v62
	ZN = cond(v62)
	C = false
	V = false
	sp = sp - 0x00000004
	v63 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v63
	ZN = cond(v63)
	C = false
	V = false
	sp = sp - 0x00000004
	v64 = r7 + 85
	Mem0[sp:word32] = v64
	ZN = cond(v64)
	C = false
	V = false
	sp = sp - 0x00000004
	v65 = r2 + 1515
	Mem0[sp:word32] = v65
	ZN = cond(v65)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v66 = r2 + 1515
	Mem0[sp:word32] = v66
	ZN = cond(v66)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r0 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	ZN = cond(r9 - 0x00000000)
	C = false
	V = false
	branch Test(GT,ZN) l000117A3
	// succ:  l000117A0 l000117A3
l000117A0:
	r9 = 0x00000001
	ZN = cond(r9)
	C = false
	V = false
	// succ:  l000117A3
l000117A3:
	r0 = r9
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00010E6A_exit
fn00010E6A_exit:


// fn000117AA
// Return size: 4
define fn000117AA
fn000117AA_entry:
	// succ:  l000117AA
l000117AA:
	sp = fp
	sp = sp - 0x0000001C
	CVZN = cond(sp)
	ZN = cond(0xFFFE67AC)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFF8DEC)
	C = false
	V = false
	r4 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r5 = Mem0[r2 + 0x0000C61B:word32]
	ZN = cond(r5)
	C = false
	V = false
	CZN = cond(r5 - 0x00002000)
	V = false
	branch Test(LE,ZN) l000117D7
	// succ:  l000117D4 l000117D7
l000117D4:
	goto l00011898
	// succ:  l00011898
l000117D7:
	sp = sp - 0x00000008
	v13 = 0x0000000000000000
	Mem0[sp:word64] = v13
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	v14 = Mem0[r2 + 0x0000C617:word32]
	Mem0[sp:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	call fn0001926E (retsize: 4;)
	sp = sp - 0x00000004
	v15 = Mem0[r2 + 0x0000C61B:word32]
	Mem0[sp:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	sp = sp - 0x00000004
	v16 = Mem0[r2 + 0x0000C5F3:word32]
	Mem0[sp:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	sp = sp - 0x00000004
	v17 = Mem0[r2 + 0x0000C617:word32]
	Mem0[sp:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	call fn00019272 (retsize: 4;)
	v19 = r0
	Mem0[r2 + 0x0000C5FB:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	CZN = cond(Mem0[r2 + 0x0000C5FB:word32] - Mem0[r2 + 0x0000C61B:word32])
	V = false
	branch Test(EQ,Z) l00011816
	// succ:  l00011813 l00011816
l00011813:
	goto l00011A92
	// succ:  l00011A92
l00011816:
	r3 = Mem0[r2 + 0x0000C61B:word32] + Mem0[r2 + 0x0000C5F3:word32]
	CVZN = cond(r3)
	v27 = r3 - 0x00000016
	Mem0[r2 + 0x0000C5F7:word32] = v27
	CVZN = cond(v27)
	CZN = cond(Mem0[r2 + 0x0000C5F7:word32] - Mem0[r2 + 0x0000C5F3:word32])
	V = false
	branch Test(UGE,C) l0001183A
	// succ:  l00011837 l0001183A
l00011837:
	goto l00011A92
	// succ:  l00011A92
l0001183A:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l0001183C
l0001183C:
	r3 = Mem0[r2 + 0x0000C5F7:word32]
	ZN = cond(r3)
	C = false
	V = false
	r0 = (uint32) Mem0[r3:byte]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000050)
	V = false
	branch Test(NE,Z) l00011880
	// succ:  l0001184F l00011880
l0001184F:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v52 = r2 + 0x0000C639
	Mem0[sp:word32] = v52
	ZN = cond(v52)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	call fn000192DA (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00011880
	// succ:  l00011864 l00011880
l00011864:
	r0 = Mem0[r2 + 0x0000C5F7:word32] - Mem0[r2 + 0x0000C5F3:word32]
	CVZN = cond(r0)
	v53 = Mem0[r2 + 0x0000C5FB:word32] - r0
	Mem0[r2 + 0x0000C5FB:word32] = v53
	CVZN = cond(v53)
	r4 = 0x00000001
	ZN = cond(r4)
	C = false
	V = false
	goto l00011A92
	// succ:  l00011A92
l00011880:
	v54 = Mem0[r2 + 0x0000C5F7:word32] - 0x00000001
	Mem0[r2 + 0x0000C5F7:word32] = v54
	CVZN = cond(v54)
	CZN = cond(Mem0[r2 + 0x0000C5F7:word32] - Mem0[r2 + 0x0000C5F3:word32])
	V = false
	branch Test(UGE,C) l0001183C
	// succ:  l00011893 l0001183C
l00011893:
	goto l00011A92
	// succ:  l00011A92
l00011898:
l00011A92:
	ZN = cond(r4 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00011AF4
	// succ:  l00011A96 l00011AF4
l00011A96:
	ZN = cond(Mem0[r2 + 64:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00011A9F
	// succ:  l00011A9B l00011A9F
l00011A9B:
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00011ACA
	// succ:  l00011A9F l00011ACA
l00011A9F:
	sp = sp - 0x00000004
	v20 = (uint32) 0x0401
	Mem0[sp:uint32] = v20
	ZN = cond(v20)
	C = false
	V = false
	sp = sp - 0x00000004
	v21 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	sp = sp - 0x00000004
	v23 = r8 + 119
	Mem0[sp:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	sp = sp - 0x00000004
	v24 = r2 + 1515
	Mem0[sp:word32] = v24
	ZN = cond(v24)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v25 = r2 + 1515
	Mem0[sp:word32] = v25
	ZN = cond(v25)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r3 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r3)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	// succ:  l00011ACA
l00011ACA:
	sp = sp - 0x00000004
	v32 = (uint32) 0x0401
	Mem0[sp:uint32] = v32
	ZN = cond(v32)
	C = false
	V = false
	sp = sp - 0x00000004
	v34 = r9 + 1608
	Mem0[sp:word32] = v34
	ZN = cond(v34)
	C = false
	V = false
	sp = sp - 0x00000004
	v35 = r2 + 1515
	Mem0[sp:word32] = v35
	ZN = cond(v35)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v36 = r2 + 1515
	Mem0[sp:word32] = v36
	ZN = cond(v36)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	r3 = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(r3)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	r0 = 0x00000002
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000117AA_exit
l00011AF4:
	r3 = Mem0[r2 + 0x0000C5F7:word32] - Mem0[r2 + 0x0000C5F3:word32]
	CVZN = cond(r3)
	v28 = r3 + Mem0[r2 + 0x0000C61F:word32]
	Mem0[r2 + 124:word32] = v28
	CVZN = cond(v28)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000016
	ZN = cond(0x00000016)
	C = false
	V = false
	sp = sp - 0x00000004
	v30 = fp + -26
	Mem0[sp:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	call fn0000D5BE (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00011B1D
	// succ:  l00011B19 l00011B1D
l00011B19:
	r0 = 0x00000033
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000117AA_exit
l00011B1D:
	sp = sp - 0x00000004
	v37 = fp + -22
	Mem0[sp:word32] = v37
	ZN = cond(v37)
	C = false
	V = false
	ZN = cond(0x0000E258)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	v38 = (word16) r0
	Mem0[r2 + 0x0000C682:word16] = v38
	ZN = cond(v38)
	C = false
	V = false
	sp = sp - 0x00000004
	v39 = fp + -20
	Mem0[sp:word32] = v39
	ZN = cond(v39)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	v40 = (word16) r0
	Mem0[r2 + 0x0000C684:word16] = v40
	ZN = cond(v40)
	C = false
	V = false
	sp = sp - 0x00000004
	v41 = fp + -18
	Mem0[sp:word32] = v41
	ZN = cond(v41)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	v42 = (word16) r0
	Mem0[r2 + 0x0000C686:word16] = v42
	ZN = cond(v42)
	C = false
	V = false
	sp = sp - 0x00000004
	v43 = fp + -16
	Mem0[sp:word32] = v43
	ZN = cond(v43)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	v44 = (word16) r0
	Mem0[r2 + 0x0000C688:word16] = v44
	ZN = cond(v44)
	C = false
	V = false
	sp = sp - 0x00000004
	v45 = fp + -14
	Mem0[sp:word32] = v45
	ZN = cond(v45)
	C = false
	V = false
	call fn0000E276 (retsize: 4;)
	v46 = r0
	Mem0[r2 + 0x0000C68A:word32] = v46
	ZN = cond(v46)
	C = false
	V = false
	sp = sp - 0x00000004
	v47 = fp + -10
	Mem0[sp:word32] = v47
	ZN = cond(v47)
	C = false
	V = false
	call fn0000E276 (retsize: 4;)
	v48 = r0
	Mem0[r2 + 0x0000C68E:word32] = v48
	ZN = cond(v48)
	C = false
	V = false
	sp = sp - 0x00000004
	v49 = fp + -6
	Mem0[sp:word32] = v49
	ZN = cond(v49)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	v50 = (word16) r0
	Mem0[r2 + 0x0000C692:word16] = v50
	ZN = cond(v50)
	C = false
	V = false
	v51 = Mem0[r2 + 0x0000C68A:word32] + Mem0[r2 + 0x0000C68E:word32]
	Mem0[r2 + 128:word32] = v51
	CVZN = cond(v51)
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000117AA_exit
fn000117AA_exit:


// fn00011C0A
// Return size: 4
define fn00011C0A
fn00011C0A_entry:
	// succ:  l00011C0A
l00011C0A:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	call fn00011CDA (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00011C20
	// succ:  l00011C1F l00011C20
l00011C1F:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00011C0A_exit
l00011C20:
	r0 = Mem0[r2 + 1511:word32]
	ZN = cond(r0)
	C = false
	V = false
	ap = (uint32) Mem0[r2 + 0x0000C659:byte]
	ZN = cond(ap)
	C = false
	V = false
	CZN = cond(ap - 0x00000012)
	V = false
	branch Test(UGE,C) l00011C3C
	// succ:  l00011C31 l00011C3C
l00011C31:
	v14 = Mem0[r2 + 0x0000C659:byte]
	r1 = DPB(r1, v14, 0)
	ZN = cond(v14)
	C = false
	V = false
	goto l00011C3F
	// succ:  l00011C3F
l00011C3C:
	v15 = 0x12
	r1 = DPB(r1, v15, 0)
	ZN = cond(v15)
	C = false
	V = false
	// succ:  l00011C3F
l00011C3F:
	v16 = (uint32) (byte) r1
	Mem0[r0 + 12:uint32] = v16
	ZN = cond(v16)
	C = false
	V = false
	ap = Mem0[r2 + 1511:word32]
	ZN = cond(ap)
	C = false
	V = false
	v17 = Mem0[ap + 20:byte] & ~0x10
	Mem0[ap + 20:byte] = v17
	ZN = cond(v17)
	C = false
	V = false
	ZN = cond(Mem0[r2 + 40:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00011C95
	// succ:  l00011C51 l00011C95
l00011C51:
	ap = Mem0[r2 + 1511:word32]
	ZN = cond(ap)
	C = false
	V = false
	r0 = Mem0[ap + 12:word32]
	ZN = cond(r0)
	C = false
	V = false
	v18 = r0 - 0x00000000
	branch v18 > 0x00000011 l00011C80
	// succ:  l00011C5A_1 l00011C80
l00011C5A_1:
	call 0x00011C5E + v18 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn00011C0A_exit
l00011C80:
l00011C95:
	branch (Mem0[r2 + 0x0000C67A:word32] & 0x00000001 << 0x00000003) == 0x00000000 l00011CCC
	// succ:  l00011C9D l00011CCC
l00011C9D:
	ap = Mem0[r2 + 1511:word32]
	ZN = cond(ap)
	C = false
	V = false
	ap = Mem0[ap + 12:word32]
	ZN = cond(ap)
	C = false
	V = false
	branch Test(EQ,Z) l00011CB7
	// succ:  l00011CA8 l00011CB7
l00011CA8:
	CZN = cond(ap - 0x00000006)
	V = false
	branch Test(EQ,Z) l00011CB7
	// succ:  l00011CAD l00011CB7
l00011CAD:
	CZN = cond(ap - 0x0000000B)
	V = false
	branch Test(EQ,Z) l00011CB7
	// succ:  l00011CB2 l00011CB7
l00011CB2:
	CZN = cond(ap - 0x00000005)
	V = false
	branch Test(NE,Z) l00011CCC
	// succ:  l00011CB7 l00011CCC
l00011CB7:
	ap = Mem0[r2 + 1511:word32]
	ZN = cond(ap)
	C = false
	V = false
	v19 = Mem0[ap + 20:byte] | 0x20
	Mem0[ap + 20:byte] = v19
	ZN = cond(v19)
	C = false
	V = false
	ap = Mem0[r2 + 1511:word32]
	ZN = cond(ap)
	C = false
	V = false
	v20 = Mem0[ap + 20:byte] & ~0x10
	Mem0[ap + 20:byte] = v20
	ZN = cond(v20)
	C = false
	V = false
	goto l00011CD5
	// succ:  l00011CD5
l00011CCC:
	ap = Mem0[r2 + 1511:word32]
	ZN = cond(ap)
	C = false
	V = false
	v22 = Mem0[ap + 20:byte] & ~0x20
	Mem0[ap + 20:byte] = v22
	ZN = cond(v22)
	C = false
	V = false
	// succ:  l00011CD5
l00011CD5:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00011C0A_exit
fn00011C0A_exit:


// fn00011CDA
// Return size: 4
define fn00011CDA
fn00011CDA_entry:
	// succ:  l00011CDA
l00011CDA:
	sp = fp
	sp = sp - 0x00000030
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x0000002A
	ZN = cond(0x0000002A)
	C = false
	V = false
	sp = sp - 0x00000004
	v8 = fp + -46
	Mem0[sp:word32] = v8
	ZN = cond(v8)
	C = false
	V = false
	call fn0000D5BE (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00011CF8
	// succ:  l00011CF4 l00011CF8
l00011CF4:
	r0 = 0x00000033
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00011CDA_exit
l00011CF8:
	v13 = Mem0[fp + -46:byte]
	Mem0[r2 + 0x0000C658:byte] = v13
	ZN = cond(v13)
	C = false
	V = false
	v14 = Mem0[fp + -45:byte]
	Mem0[r2 + 0x0000C659:byte] = v14
	ZN = cond(v14)
	C = false
	V = false
	v15 = Mem0[fp + -44:byte]
	Mem0[r2 + 0x0000C65A:byte] = v15
	ZN = cond(v15)
	C = false
	V = false
	v16 = Mem0[fp + -43:byte]
	Mem0[r2 + 0x0000C65B:byte] = v16
	ZN = cond(v16)
	C = false
	V = false
	sp = sp - 0x00000004
	v17 = fp + -42
	Mem0[sp:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	ZN = cond(0x0000E258)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	v19 = (word16) r0
	Mem0[r2 + 0x0000C65C:word16] = v19
	ZN = cond(v19)
	C = false
	V = false
	sp = sp - 0x00000004
	v20 = fp + -40
	Mem0[sp:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	v21 = (word16) r0
	Mem0[r2 + 0x0000C65E:word16] = v21
	ZN = cond(v21)
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = fp + -38
	Mem0[sp:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	v23 = (word16) r0
	Mem0[r2 + 0x0000C660:word16] = v23
	ZN = cond(v23)
	C = false
	V = false
	sp = sp - 0x00000004
	v24 = fp + -36
	Mem0[sp:word32] = v24
	ZN = cond(v24)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	v25 = (word16) r0
	Mem0[r2 + 0x0000C662:word16] = v25
	ZN = cond(v25)
	C = false
	V = false
	sp = sp - 0x00000004
	v26 = fp + -34
	Mem0[sp:word32] = v26
	ZN = cond(v26)
	C = false
	V = false
	ZN = cond(0x0000E274)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	v28 = r0
	Mem0[r2 + 0x0000C664:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	sp = sp - 0x00000004
	v29 = fp + -30
	Mem0[sp:word32] = v29
	ZN = cond(v29)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	v30 = r0
	Mem0[r2 + 0x0000C668:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	sp = sp - 0x00000004
	v31 = fp + -26
	Mem0[sp:word32] = v31
	ZN = cond(v31)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	v32 = r0
	Mem0[r2 + 0x0000C66C:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	sp = sp - 0x00000004
	v33 = fp + -22
	Mem0[sp:word32] = v33
	ZN = cond(v33)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	v34 = (word16) r0
	Mem0[r2 + 0x0000C670:word16] = v34
	ZN = cond(v34)
	C = false
	V = false
	sp = sp - 0x00000004
	v35 = fp + -20
	Mem0[sp:word32] = v35
	ZN = cond(v35)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	v36 = (word16) r0
	Mem0[r2 + 0x0000C672:word16] = v36
	ZN = cond(v36)
	C = false
	V = false
	sp = sp - 0x00000004
	v37 = fp + -18
	Mem0[sp:word32] = v37
	ZN = cond(v37)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	v38 = (word16) r0
	Mem0[r2 + 0x0000C674:word16] = v38
	ZN = cond(v38)
	C = false
	V = false
	sp = sp - 0x00000004
	v39 = fp + -16
	Mem0[sp:word32] = v39
	ZN = cond(v39)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	v40 = (word16) r0
	Mem0[r2 + 0x0000C676:word16] = v40
	ZN = cond(v40)
	C = false
	V = false
	sp = sp - 0x00000004
	v41 = fp + -14
	Mem0[sp:word32] = v41
	ZN = cond(v41)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	v42 = (word16) r0
	Mem0[r2 + 0x0000C678:word16] = v42
	ZN = cond(v42)
	C = false
	V = false
	sp = sp - 0x00000004
	v43 = fp + -12
	Mem0[sp:word32] = v43
	ZN = cond(v43)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	v44 = r0
	Mem0[r2 + 0x0000C67A:word32] = v44
	ZN = cond(v44)
	C = false
	V = false
	sp = sp - 0x00000004
	v45 = fp + -8
	Mem0[sp:word32] = v45
	ZN = cond(v45)
	C = false
	V = false
	call Mem0[r4 + 0:word32] + 2 (retsize: 4;)
	v46 = r0
	Mem0[r2 + 0x0000C67E:word32] = v46
	ZN = cond(v46)
	C = false
	V = false
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00011CDA_exit
fn00011CDA_exit:


// fn00011ED6
// Return size: 4
define fn00011ED6
fn00011ED6_entry:
	// succ:  l00011ED6
l00011ED6:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	r1 = Mem0[r0 + 0x0000C811:word32] & ~0xFFFF0000
	ZN = cond(r1)
	C = false
	V = false
	r1 = r1 | 0x00000002
	ZN = cond(r1)
	C = false
	V = false
	ap = r1 ^ 0x00000001
	ZN = cond(ap)
	C = false
	V = false
	ap = ap * r1
	CVZN = cond(ap)
	ap = (uint32) SLICE(ap, ui24, 8)
	ZN = cond(ap)
	V = false
	r0 = ap & ~0xFFFFFF00
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00011ED6_exit
fn00011ED6_exit:


// fn00011F06
// Return size: 4
define fn00011F06
fn00011F06_entry:
	// succ:  l00011F06
l00011F06:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	r0 = Mem0[ap + 4:word32] ^ Mem0[r2 + 0x0000C809:word32]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 & ~0xFFFFFF00
	ZN = cond(r0)
	C = false
	V = false
	r3 = Mem0[r2 + 0x0000C5EB:word32]
	ZN = cond(r3)
	C = false
	V = false
	r1 = (uint32) SLICE(Mem0[r2 + 0x0000C809:word32], ui24, 8)
	ZN = cond(r1)
	V = false
	v12 = r1 ^ Mem0[r3 + r0 * 4:word32]
	Mem0[r2 + 0x0000C809:word32] = v12
	ZN = cond(v12)
	C = false
	V = false
	r1 = Mem0[r2 + 0x0000C809:word32] & ~0xFFFFFF00
	ZN = cond(r1)
	C = false
	V = false
	v13 = Mem0[r2 + 0x0000C80D:word32] + r1
	Mem0[r2 + 0x0000C80D:word32] = v13
	CVZN = cond(v13)
	r1 = Mem0[r2 + 0x0000C80D:word32] * 0x08088405
	CVZN = cond(r1)
	r1 = r1 + 0x00000001
	CVZN = cond(r1)
	v14 = r1
	Mem0[r2 + 0x0000C80D:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	r0 = (uint32) Mem0[r2 + 0x0000C810:byte]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 ^ Mem0[r2 + 0x0000C811:word32]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 & ~0xFFFFFF00
	ZN = cond(r0)
	C = false
	V = false
	r3 = Mem0[r2 + 0x0000C5EB:word32]
	ZN = cond(r3)
	C = false
	V = false
	r1 = (uint32) SLICE(Mem0[r2 + 0x0000C811:word32], ui24, 8)
	ZN = cond(r1)
	V = false
	v15 = r1 ^ Mem0[r3 + r0 * 4:word32]
	Mem0[r2 + 0x0000C811:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	r0 = Mem0[ap + 4:word32]
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00011F06_exit
fn00011F06_exit:


// fn000121EA
// Return size: 4
define fn000121EA
fn000121EA_entry:
	// succ:  l000121EA
l000121EA:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	sp = sp - 0x00000004
	v8 = Mem0[r3 + 0x0000C815:word32]
	Mem0[sp:word32] = v8
	ZN = cond(v8)
	C = false
	V = false
	sp = sp - 0x00000004
	v10 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v10
	ZN = cond(v10)
	C = false
	V = false
	call fn00012252 (retsize: 4;)
	r4 = r0
	ZN = cond(r4)
	C = false
	V = false
	branch Test(EQ,Z) l0001224B
	// succ:  l00012206 l0001224B
l00012206:
	sp = sp - 0x00000004
	v14 = Mem0[r3 + 0x0000C815:word32]
	Mem0[sp:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	call fn000192C6 (retsize: 4;)
	r0 = r0 + 0x00000001
	CVZN = cond(r0)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	call fn000192B6 (retsize: 4;)
	r2 = r0
	ZN = cond(r2)
	C = false
	V = false
	branch Test(NE,Z) l00012227
	// succ:  l00012223 l00012227
l00012223:
	r0 = -0x00000001
	CVZN = cond(r0)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000121EA_exit
l00012227:
	sp = sp - 0x00000004
	v17 = Mem0[r3 + 0x0000C815:word32]
	Mem0[sp:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	call fn0000E2A6 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v18 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v18
	ZN = cond(v18)
	C = false
	V = false
	call fn00012252 (retsize: 4;)
	r4 = r0
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	// succ:  l0001224B
l0001224B:
	r0 = r4
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000121EA_exit
fn000121EA_exit:


// fn00012252
// Return size: 4
define fn00012252
fn00012252_entry:
	// succ:  l00012252
l00012252:
	sp = fp
	sp = sp - 0x00000020
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	r4 = Mem0[ap + 8:word32]
	ZN = cond(r4)
	C = false
	V = false
	v10 = 0x12345678
	Mem0[r2 + 0x0000C809:word32] = v10
	ZN = cond(v10)
	C = false
	V = false
	v11 = 0x23456789
	Mem0[r2 + 0x0000C80D:word32] = v11
	ZN = cond(v11)
	C = false
	V = false
	v12 = 0x34567890
	Mem0[r2 + 0x0000C811:word32] = v12
	ZN = cond(v12)
	C = false
	V = false
	ZN = cond(Mem0[r4:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00012288
	// succ:  l00012285 l00012288
l00012285:
	goto l00012312
	// succ:  l00012312
l00012288:
	r5 = (int32) Mem0[r4:int8]
	VZN = cond(r5)
	C = false
	r0 = r5 ^ Mem0[r2 + 0x0000C809:word32]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 & ~0xFFFFFF00
	ZN = cond(r0)
	C = false
	V = false
	r3 = Mem0[r2 + 0x0000C5EB:word32]
	ZN = cond(r3)
	C = false
	V = false
	r1 = (uint32) SLICE(Mem0[r2 + 0x0000C809:word32], ui24, 8)
	ZN = cond(r1)
	V = false
	v19 = r1 ^ Mem0[r3 + r0 * 4:word32]
	Mem0[r2 + 0x0000C809:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	r1 = Mem0[r2 + 0x0000C809:word32] & ~0xFFFFFF00
	ZN = cond(r1)
	C = false
	V = false
	v20 = Mem0[r2 + 0x0000C80D:word32] + r1
	Mem0[r2 + 0x0000C80D:word32] = v20
	CVZN = cond(v20)
	r1 = Mem0[r2 + 0x0000C80D:word32] * 0x08088405
	CVZN = cond(r1)
	r1 = r1 + 0x00000001
	CVZN = cond(r1)
	v21 = r1
	Mem0[r2 + 0x0000C80D:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	r0 = (uint32) Mem0[r2 + 0x0000C810:byte]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 ^ Mem0[r2 + 0x0000C811:word32]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 & ~0xFFFFFF00
	ZN = cond(r0)
	C = false
	V = false
	r3 = Mem0[r2 + 0x0000C5EB:word32]
	ZN = cond(r3)
	C = false
	V = false
	r1 = (uint32) SLICE(Mem0[r2 + 0x0000C811:word32], ui24, 8)
	ZN = cond(r1)
	V = false
	v22 = r1 ^ Mem0[r3 + r0 * 4:word32]
	Mem0[r2 + 0x0000C811:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	r4 = r4 + 0x00000001
	CVZN = cond(r4)
	ZN = cond(Mem0[r4:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00012312
	// succ:  l0001230F l00012312
l0001230F:
	goto l00012288
	// succ:  l00012288
l00012312:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x0000000C
	ZN = cond(0x0000000C)
	C = false
	V = false
	sp = sp - 0x00000004
	v23 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	sp = sp - 0x00000004
	v25 = fp + -16
	Mem0[sp:word32] = v25
	ZN = cond(v25)
	C = false
	V = false
	call fn0001929E (retsize: 4;)
	r7 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r4 = fp + -16
	ZN = cond(r4)
	C = false
	V = false
	// succ:  l00012328
l00012328:
	r3 = (uint32) Mem0[r4:byte]
	ZN = cond(r3)
	C = false
	V = false
	r6 = Mem0[r2 + 0x0000C811:word32] & ~0xFFFF0000
	ZN = cond(r6)
	C = false
	V = false
	r6 = r6 | 0x00000002
	ZN = cond(r6)
	C = false
	V = false
	r0 = r6 ^ 0x00000001
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 * r6
	CVZN = cond(r0)
	r0 = (uint32) SLICE(r0, ui24, 8)
	ZN = cond(r0)
	V = false
	r0 = r0 & ~0xFFFFFF00
	ZN = cond(r0)
	C = false
	V = false
	v29 = (byte) r3 ^ (byte) r0
	Mem0[r4:byte] = v29
	ZN = cond(v29)
	C = false
	V = false
	r5 = (uint32) Mem0[r4:byte]
	ZN = cond(r5)
	C = false
	V = false
	r0 = r5 ^ Mem0[r2 + 0x0000C809:word32]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 & ~0xFFFFFF00
	ZN = cond(r0)
	C = false
	V = false
	r3 = Mem0[r2 + 0x0000C5EB:word32]
	ZN = cond(r3)
	C = false
	V = false
	r1 = (uint32) SLICE(Mem0[r2 + 0x0000C809:word32], ui24, 8)
	ZN = cond(r1)
	V = false
	v30 = r1 ^ Mem0[r3 + r0 * 4:word32]
	Mem0[r2 + 0x0000C809:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	r1 = Mem0[r2 + 0x0000C809:word32] & ~0xFFFFFF00
	ZN = cond(r1)
	C = false
	V = false
	v31 = Mem0[r2 + 0x0000C80D:word32] + r1
	Mem0[r2 + 0x0000C80D:word32] = v31
	CVZN = cond(v31)
	r1 = Mem0[r2 + 0x0000C80D:word32] * 0x08088405
	CVZN = cond(r1)
	r1 = r1 + 0x00000001
	CVZN = cond(r1)
	v32 = r1
	Mem0[r2 + 0x0000C80D:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	r0 = (uint32) Mem0[r2 + 0x0000C810:byte]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 ^ Mem0[r2 + 0x0000C811:word32]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 & ~0xFFFFFF00
	ZN = cond(r0)
	C = false
	V = false
	r3 = Mem0[r2 + 0x0000C5EB:word32]
	ZN = cond(r3)
	C = false
	V = false
	r1 = (uint32) SLICE(Mem0[r2 + 0x0000C811:word32], ui24, 8)
	ZN = cond(r1)
	V = false
	v33 = r1 ^ Mem0[r3 + r0 * 4:word32]
	Mem0[r2 + 0x0000C811:word32] = v33
	ZN = cond(v33)
	C = false
	V = false
	r4 = r4 + 0x00000001
	CVZN = cond(r4)
	r7 = r7 + 0x00000001
	VZN = cond(r7)
	branch r7 <= 0x0000000B l00012328
	// succ:  l000123DA l00012328
l000123DA:
	v35 = (uint16) Mem0[fp + -5:byte]
	r9 = DPB(r9, v35, 0)
	ZN = cond(v35)
	C = false
	V = false
	r5 = (uint32) (word16) r9
	ZN = cond(r5)
	C = false
	V = false
	r0 = Mem0[r2 + 1511:word32]
	ZN = cond(r0)
	C = false
	V = false
	branch (Mem0[r0 + 20:word32] & 0x00000001 << 0x00000001) == 0x00000000 l000123FC
	// succ:  l000123EB l000123FC
l000123EB:
	r3 = (uint32) Mem0[r2 + 0x0000C644:word16]
	ZN = cond(r3)
	C = false
	V = false
	r4 = r3 >> 8
	VZN = cond(r4)
	C = false
	goto l00012403
	// succ:  l00012403
l000123FC:
	r4 = (uint32) Mem0[r2 + 0x0000C64B:byte]
	ZN = cond(r4)
	C = false
	V = false
	// succ:  l00012403
l00012403:
	CZN = cond(r5 - r4)
	V = false
	branch Test(EQ,Z) l0001240C
	// succ:  l00012408 l0001240C
l00012408:
	r0 = -0x00000001
	CVZN = cond(r0)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00012252_exit
l0001240C:
	r4 = Mem0[r2 + 0x0000C5FB:word32]
	ZN = cond(r4)
	C = false
	V = false
	r3 = Mem0[r2 + 132:word32]
	ZN = cond(r3)
	C = false
	V = false
	CZN = cond(r4 - r3)
	V = false
	branch Test(LE,ZN) l00012424
	// succ:  l0001241D l00012424
l0001241D:
	r1 = r3
	ZN = cond(r1)
	C = false
	V = false
	goto l00012427
	// succ:  l00012427
l00012424:
	r1 = r4
	ZN = cond(r1)
	C = false
	V = false
	// succ:  l00012427
l00012427:
	r3 = r1
	ZN = cond(r3)
	C = false
	V = false
	r5 = Mem0[r2 + 0x0000C5F7:word32]
	ZN = cond(r5)
	C = false
	V = false
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	r6 = r3 - 0x00000001
	CVZN = cond(r6)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0001243F
	// succ:  l0001243C l0001243F
l0001243C:
	goto l000124F8
	// succ:  l000124F8
l0001243F:
	// succ:  l00012440
l00012440:
	r3 = (uint32) Mem0[r5:byte]
	ZN = cond(r3)
	C = false
	V = false
	r8 = Mem0[r2 + 0x0000C811:word32] & ~0xFFFF0000
	ZN = cond(r8)
	C = false
	V = false
	r8 = r8 | 0x00000002
	ZN = cond(r8)
	C = false
	V = false
	r0 = r8 ^ 0x00000001
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 * r8
	CVZN = cond(r0)
	r0 = (uint32) SLICE(r0, ui24, 8)
	ZN = cond(r0)
	V = false
	r0 = r0 & ~0xFFFFFF00
	ZN = cond(r0)
	C = false
	V = false
	v38 = (byte) r3 ^ (byte) r0
	Mem0[r5:byte] = v38
	ZN = cond(v38)
	C = false
	V = false
	r4 = (uint32) Mem0[r5:byte]
	ZN = cond(r4)
	C = false
	V = false
	r0 = r4 ^ Mem0[r2 + 0x0000C809:word32]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 & ~0xFFFFFF00
	ZN = cond(r0)
	C = false
	V = false
	r3 = Mem0[r2 + 0x0000C5EB:word32]
	ZN = cond(r3)
	C = false
	V = false
	r1 = (uint32) SLICE(Mem0[r2 + 0x0000C809:word32], ui24, 8)
	ZN = cond(r1)
	V = false
	v39 = r1 ^ Mem0[r3 + r0 * 4:word32]
	Mem0[r2 + 0x0000C809:word32] = v39
	ZN = cond(v39)
	C = false
	V = false
	r1 = Mem0[r2 + 0x0000C809:word32] & ~0xFFFFFF00
	ZN = cond(r1)
	C = false
	V = false
	v40 = Mem0[r2 + 0x0000C80D:word32] + r1
	Mem0[r2 + 0x0000C80D:word32] = v40
	CVZN = cond(v40)
	r1 = Mem0[r2 + 0x0000C80D:word32] * 0x08088405
	CVZN = cond(r1)
	r1 = r1 + 0x00000001
	CVZN = cond(r1)
	v41 = r1
	Mem0[r2 + 0x0000C80D:word32] = v41
	ZN = cond(v41)
	C = false
	V = false
	r0 = (uint32) Mem0[r2 + 0x0000C810:byte]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 ^ Mem0[r2 + 0x0000C811:word32]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 & ~0xFFFFFF00
	ZN = cond(r0)
	C = false
	V = false
	r3 = Mem0[r2 + 0x0000C5EB:word32]
	ZN = cond(r3)
	C = false
	V = false
	r1 = (uint32) SLICE(Mem0[r2 + 0x0000C811:word32], ui24, 8)
	ZN = cond(r1)
	V = false
	v42 = r1 ^ Mem0[r3 + r0 * 4:word32]
	Mem0[r2 + 0x0000C811:word32] = v42
	ZN = cond(v42)
	C = false
	V = false
	r5 = r5 + 0x00000001
	CVZN = cond(r5)
	r0 = r6
	ZN = cond(r0)
	C = false
	V = false
	r6 = r6 - 0x00000001
	CVZN = cond(r6)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000124F8
	// succ:  l000124F5 l000124F8
l000124F5:
	goto l00012440
	// succ:  l00012440
l000124F8:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00012252_exit
fn00012252_exit:


// fn000124FE
// Return size: 0
define fn000124FE
fn000124FE_entry:
	// succ:  l000124FE
l000124FE:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFF955C)
	C = false
	V = false
	// succ:  l00012503
l00012503:
	sp = sp - 0x00000008
	v7 = 0x0000000000000000
	Mem0[sp:word64] = v7
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	v11 = r2 + 8
	Mem0[sp:word32] = v11
	ZN = cond(v11)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	v13 = pc
	pc = pc + 0x00000004
	call Mem0[Mem0[v13:word32]:word32] + 2 (retsize: 4;)
	v15 = Mem0[Mem0[sp + 32766:word32]:real32]
	Mem0[Mem0[r0 + -23984:word32]:real32] = v15
	ZN = cond(v15)
	C = false
	V = false
	branch Test(GT,ZN) l00012503
	// succ:  l0001251B l00012503
l0001251B:
	v16 = 0.8125F
	Mem0[Mem0[r0 + 5282:word32]:real32] = v16
	ZN = cond(v16)
	C = false
	V = false
	ap = ap - 0x00000004
	v18 = 0.75F
	Mem0[ap:real32] = v18
	ZN = cond(v18)
	C = false
	V = false
	ap = ap - 0x00000008
	sp = sp - 0x00000004
	v19 = ap
	Mem0[sp:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000008
	ZN = cond(0x00000008)
	C = false
	V = false
	sp = sp - 0x00000004
	v20 = r2 + 24
	Mem0[sp:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	sp = sp - 0x00000008
	v21 = 0x0000000000000000
	Mem0[sp:word64] = v21
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = r2 + 10
	Mem0[sp:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000027
	ZN = cond(0x00000027)
	C = false
	V = false
	sp = sp - 0x00000004
	v23 = (int32) Mem0[r2 + 8:int16]
	Mem0[sp:int32] = v23
	VZN = cond(v23)
	C = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	v25 = pc
	pc = pc + 0x00000004
	call Mem0[Mem0[v25:word32]:word32] + 2 (retsize: 4;)
	__halt()
fn000124FE_exit:


// fn000125CA
// Return size: 4
define fn000125CA
fn000125CA_entry:
	// succ:  l000125CA
l000125CA:
	sp = fp
	sp = sp - 0x00000008
	CVZN = cond(sp)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	call fn000124FE (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v8 = fp + -5
	Mem0[sp:word32] = v8
	ZN = cond(v8)
	C = false
	V = false
	r2 = ap + 4
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	v11 = Mem0[r2:word32]
	Mem0[sp:word32] = v11
	ZN = cond(v11)
	C = false
	V = false
	call fn00019272 (retsize: 4;)
	CZN = cond(Mem0[fp + -5:byte] - 0x0A)
	V = false
	branch Test(EQ,Z) l00012604
	// succ:  l000125EE l00012604
l000125EE:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l000125F0
l000125F0:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v15 = fp + -6
	Mem0[sp:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	sp = sp - 0x00000004
	v16 = Mem0[r2:word32]
	Mem0[sp:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	call fn00019272 (retsize: 4;)
	CZN = cond(Mem0[fp + -6:byte] - 0x0A)
	V = false
	branch Test(NE,Z) l000125F0
	// succ:  l00012604 l000125F0
l00012604:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	call fn000124FE (retsize: 4;)
	r0 = (int32) Mem0[fp + -5:int8]
	VZN = cond(r0)
	C = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000125CA_exit
fn000125CA_exit:


// fn00012616
// Return size: 4
define fn00012616
fn00012616_entry:
	// succ:  l00012616
l00012616:
	sp = fp
	sp = sp - 0x0000000C
	CVZN = cond(sp)
	ZN = cond(0xFFFE682C)
	C = false
	V = false
	ZN = cond(0x00019350)
	C = false
	V = false
	sp = sp - 0x00000004
	v8 = r8 + 12
	Mem0[sp:word32] = v8
	ZN = cond(v8)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	call fn0001924A (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	call fn0001924E (retsize: 4;)
	r6 = r0
	ZN = cond(r6)
	C = false
	V = false
	branch Test(NE,Z) l00012644
	// succ:  l00012641 l00012644
l00012641:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00012616_exit
l00012644:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00019374
	ZN = cond(0x00019374)
	C = false
	V = false
	call fn00019296 (retsize: 4;)
	r9 = r8 + 14
	ZN = cond(r9)
	C = false
	V = false
	ZN = cond(0x00019258)
	C = false
	V = false
	ZN = cond(0x00019294)
	C = false
	V = false
	ZN = cond(0x000124FC)
	C = false
	V = false
	ZN = cond(0x00019254)
	C = false
	V = false
	r4 = Mem0[ap + 12:word32]
	ZN = cond(r4)
	C = false
	V = false
	r3 = ap + 8
	ZN = cond(r3)
	C = false
	V = false
	v18 = Mem0[r3 + 0:word32]
	Mem0[sp + 0:word32] = v18
	ZN = cond(v18)
	C = false
	V = false
	// succ:  l00012680
l00012680:
	ZN = cond(Mem0[r9:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l0001268C
	// succ:  l00012684 l0001268C
l00012684:
	sp = sp - 0x00000004
	v20 = Mem0[r7:word32]
	Mem0[sp:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r9
	ZN = cond(r9)
	C = false
	V = false
	call Mem0[Mem0[sp + 12:word32]:word32] + 2 (retsize: 4;)
	// succ:  l0001268C
l0001268C:
	sp = sp - 0x00000004
	v21 = Mem0[r7:word32]
	Mem0[sp:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	call Mem0[Mem0[sp + 12:word32]:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	v23 = Mem0[r7:word32]
	Mem0[sp:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	call Mem0[r11 + 0:word32] + 2 (retsize: 4;)
	r2 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	call Mem0[r10 + 0:word32] + 2 (retsize: 4;)
	// succ:  l000126A4
l000126A4:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r6
	ZN = cond(r6)
	C = false
	V = false
	call Mem0[r5:word32] + 2 (retsize: 4;)
	v29 = (int8) r0
	r1 = DPB(r1, v29, 0)
	VZN = cond(v29)
	C = false
	CZN = cond((byte) r1 - 0x0D)
	V = false
	branch Test(NE,Z) l000126B4
	// succ:  l000126B1 l000126B4
l000126B1:
	v32 = 0x0A
	r1 = DPB(r1, v32, 0)
	ZN = cond(v32)
	C = false
	V = false
	// succ:  l000126B4
l000126B4:
	CZN = cond(r2 - r4)
	V = false
	branch Test(GE,N) l000126C3
	// succ:  l000126B9 l000126C3
l000126B9:
	r0 = r2
	ZN = cond(r0)
	C = false
	V = false
	r2 = r2 + 0x00000001
	CVZN = cond(r2)
	v33 = (byte) r1
	Mem0[Mem0[r3 + 0:word32]:byte] = v33
	ZN = cond(v33)
	C = false
	V = false
	// succ:  l000126C3
l000126C3:
	CZN = cond((byte) r1 - 0x0A)
	V = false
	branch Test(NE,Z) l000126A4
	// succ:  l000126C8 l000126A4
l000126C8:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	call Mem0[r10:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	v34 = Mem0[r7:word32]
	Mem0[sp:word32] = v34
	ZN = cond(v34)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x0000000A
	ZN = cond(0x0000000A)
	C = false
	V = false
	call fn0001926A (retsize: 4;)
	sp = sp - 0x00000004
	v35 = Mem0[r7:word32]
	Mem0[sp:word32] = v35
	ZN = cond(v35)
	C = false
	V = false
	call Mem0[r11:word32] + 2 (retsize: 4;)
	r9 = r8 + 15
	ZN = cond(r9)
	C = false
	V = false
	r0 = r2 - 0x00000001
	CVZN = cond(r0)
	CZN = cond(Mem0[Mem0[sp + 0 + r0:word32]:byte] - 0x0A)
	V = false
	branch Test(NE,Z) l00012680
	// succ:  l000126EC l00012680
l000126EC:
	r3 = Mem0[ap + 8:word32]
	ZN = cond(r3)
	C = false
	V = false
	v36 = 0x00
	Mem0[r3:byte] = v36
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r6
	ZN = cond(r6)
	C = false
	V = false
	call fn00019252 (retsize: 4;)
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00012616_exit
fn00012616_exit:


// fn00012702
// Return size: 4
define fn00012702
fn00012702_entry:
	// succ:  l00012702
l00012702:
	sp = fp
	sp = sp - 0x00000010
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	v7 = 0x00000000
	Mem0[sp + 8:word32] = v7
	Z = true
	N = false
	C = false
	V = false
	r1 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r7 = 0x00000001
	ZN = cond(r7)
	C = false
	V = false
	r8 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r6 = 0x00000001
	ZN = cond(r6)
	C = false
	V = false
	r11 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r10_r9 = 0x0000000000000000
	Z = true
	N = false
	C = false
	V = false
	v19 = 0x00000000
	Mem0[r2 + 116:word32] = v19
	Z = true
	N = false
	C = false
	V = false
	r4 = Mem0[Mem0[ap + 4:word32]:word32]
	ZN = cond(r4)
	C = false
	V = false
	v22 = Mem0[Mem0[ap + 8:word32]:word32]
	Mem0[sp + 4:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	v23 = r4 - 0x00000001
	Mem0[sp:word32] = v23
	CVZN = cond(v23)
	branch Test(GT,ZN) l00012732
	// succ:  l0001272F l00012732
l0001272F:
	goto l0001295D
	// succ:  l0001295D
l00012732:
	v24 = Mem0[sp + 4:word32] + 0x00000004
	Mem0[sp + 4:word32] = v24
	CVZN = cond(v24)
	r3 = Mem0[sp + 4:word32]
	ZN = cond(r3)
	C = false
	V = false
	CZN = cond(Mem0[Mem0[r3 + 0:word32]:byte] - 0x2D)
	V = false
	branch Test(EQ,Z) l00012743
	// succ:  l00012740 l00012743
l00012740:
	goto l0001295D
	// succ:  l0001295D
l00012743:
	// succ:  l00012744
l00012744:
	r0 = Mem0[Mem0[sp + 4:word32]:word32] + 0x00000001
	CVZN = cond(r0)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	r5 = r0 + 0x00000001
	CVZN = cond(r5)
	r4 = (int32) Mem0[r3:int8]
	VZN = cond(r4)
	C = false
	branch Test(NE,Z) l00012758
	// succ:  l00012755 l00012758
l00012755:
	goto l00012948
	// succ:  l00012948
l00012758:
	r0 = r4
	ZN = cond(r0)
	C = false
	V = false
	v36 = r0 - 0x0000002D
	branch v36 > 0x0000004D l000127FD
	// succ:  l0001275B_1 l000127FD
l0001275B_1:
	call 0x00012763 + v36 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn00012702_exit
l000127FD:
l00012948:
	v37 = Mem0[sp:word32] - 0x00000001
	Mem0[sp:word32] = v37
	CVZN = cond(v37)
	branch Test(LE,ZN) l0001295D
	// succ:  l0001294C l0001295D
l0001294C:
	v38 = Mem0[sp + 4:word32] + 0x00000004
	Mem0[sp + 4:word32] = v38
	CVZN = cond(v38)
	r3 = Mem0[sp + 4:word32]
	ZN = cond(r3)
	C = false
	V = false
	CZN = cond(Mem0[Mem0[r3 + 0:word32]:byte] - 0x2D)
	V = false
	branch Test(NE,Z) l0001295D
	// succ:  l0001295A l0001295D
l0001295A:
	goto l00012744
	// succ:  l00012744
l0001295D:
	r3 = Mem0[sp:word32]
	ZN = cond(r3)
	C = false
	V = false
	v27 = Mem0[sp:word32] - 0x00000001
	Mem0[sp:word32] = v27
	CVZN = cond(v27)
	ZN = cond(r3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0001296B
	// succ:  l00012966 l0001296B
l00012966:
	ZN = cond(Mem0[sp + 8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0001297F
	// succ:  l0001296B l0001297F
l0001296B:
	v28 = Mem0[sp:word32]
	Mem0[Mem0[ap + 4:word32]:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	v29 = Mem0[sp + 4:word32]
	Mem0[Mem0[ap + 8:word32]:word32] = v29
	ZN = cond(v29)
	C = false
	V = false
	sp = sp - 0x00000004
	v30 = Mem0[sp + 8:word32]
	Mem0[sp:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	call fn00008CCE (retsize: 4;)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00012702_exit
l0001297F:
	ZN = cond(Mem0[r2 + 44:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00012994
	// succ:  l00012984 l00012994
l00012984:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	call fn000192E6 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00012994
	// succ:  l00012991 l00012994
l00012991:
	v35 = 0x00000000
	Mem0[r2 + 44:word32] = v35
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00012994
l00012994:
	ZN = cond(Mem0[r2 + 36:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l000129A2
	// succ:  l00012999 l000129A2
l00012999:
	ZN = cond(Mem0[sp:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LE,ZN) l000129A6
	// succ:  l0001299D l000129A6
l0001299D:
	ZN = cond(Mem0[r2 + 36:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000129A6
	// succ:  l000129A2 l000129A6
l000129A2:
	v39 = 0x00000003
	Mem0[r2 + 36:word32] = v39
	ZN = cond(v39)
	C = false
	V = false
	// succ:  l000129A6
l000129A6:
	r0 = Mem0[r2 + 36:word32]
	ZN = cond(r0)
	C = false
	V = false
	v40 = r0 - 0x00000000
	branch v40 > 0x0000000A l000129C2
	// succ:  l000129AA_1 l000129C2
l000129AA_1:
	call 0x000129AE + v40 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn00012702_exit
l000129C2:
fn00012702_exit:


// fn00012A2A
// Return size: 4
define fn00012A2A
fn00012A2A_entry:
	// succ:  l00012A2A
l00012A2A:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFE6858)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFF9584)
	C = false
	V = false
	r8 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(Mem0[r2 + 28:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00012AAB
	// succ:  l00012A49 l00012AAB
l00012A49:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r0 = (uint32) Mem0[r2 + 0x0000C688:word16]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000001)
	V = false
	branch Test(NE,Z) l00012A5C
	// succ:  l00012A57 l00012A5C
l00012A57:
	r6 = r4
	ZN = cond(r6)
	C = false
	V = false
	goto l00012A5F
	// succ:  l00012A5F
l00012A5C:
	r6 = r5
	ZN = cond(r6)
	C = false
	V = false
	// succ:  l00012A5F
l00012A5F:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r6
	ZN = cond(r6)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v15 = Mem0[r2 + 0x0000C61B:word32]
	Mem0[sp:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	sp = sp - 0x00000004
	v16 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	sp = sp - 0x00000004
	v17 = Mem0[r2 + 0x0000C613:word32]
	Mem0[sp:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	call fn000192C6 (retsize: 4;)
	CZN = cond(r0 - 0x00000027)
	V = false
	branch Test(GE,N) l00012A88
	// succ:  l00012A81 l00012A88
l00012A81:
	r3 = r4 + 1
	ZN = cond(r3)
	C = false
	V = false
	goto l00012A8C
	// succ:  l00012A8C
l00012A88:
	r3 = r4 + 39
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00012A8C
l00012A8C:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v42 = r2 + 1515
	Mem0[sp:word32] = v42
	ZN = cond(v42)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v43 = r2 + 1515
	Mem0[sp:word32] = v43
	ZN = cond(v43)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	// succ:  l00012AAB
l00012AAB:
	CZN = cond(Mem0[r2 + 36:word32] - 0x00000009)
	V = false
	branch Test(GT,ZN) l00012AB4
	// succ:  l00012AB1 l00012AB4
l00012AB1:
	goto l00012D34
	// succ:  l00012D34
l00012AB4:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v25 = r4 + 64
	Mem0[sp:word32] = v25
	ZN = cond(v25)
	C = false
	V = false
	sp = sp - 0x00000004
	v26 = r2 + 1515
	Mem0[sp:word32] = v26
	ZN = cond(v26)
	C = false
	V = false
	ZN = cond(0x000192D0)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v28 = r2 + 1515
	Mem0[sp:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v29 = r4 + 99
	Mem0[sp:word32] = v29
	ZN = cond(v29)
	C = false
	V = false
	sp = sp - 0x00000004
	v30 = r2 + 1515
	Mem0[sp:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v31 = r2 + 1515
	Mem0[sp:word32] = v31
	ZN = cond(v31)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v32 = Mem0[r2 + 128:word32]
	Mem0[sp:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	sp = sp - 0x00000004
	v33 = Mem0[r2 + 128:word32]
	Mem0[sp:word32] = v33
	ZN = cond(v33)
	C = false
	V = false
	sp = sp - 0x00000004
	v34 = Mem0[r2 + 124:word32]
	Mem0[sp:word32] = v34
	ZN = cond(v34)
	C = false
	V = false
	sp = sp - 0x00000004
	v35 = Mem0[r2 + 124:word32]
	Mem0[sp:word32] = v35
	ZN = cond(v35)
	C = false
	V = false
	sp = sp - 0x00000004
	v36 = r4 + 133
	Mem0[sp:word32] = v36
	ZN = cond(v36)
	C = false
	V = false
	sp = sp - 0x00000004
	v37 = r2 + 1515
	Mem0[sp:word32] = v37
	ZN = cond(v37)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v38 = r2 + 1515
	Mem0[sp:word32] = v38
	ZN = cond(v38)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	r6 = (uint32) Mem0[r2 + 0x0000C682:word16]
	ZN = cond(r6)
	C = false
	V = false
	branch Test(NE,Z) l00012BA4
	// succ:  l00012B2D l00012BA4
l00012B2D:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v39 = Mem0[r2 + 0x0000C68A:word32]
	Mem0[sp:word32] = v39
	ZN = cond(v39)
	C = false
	V = false
	sp = sp - 0x00000004
	v40 = Mem0[r2 + 0x0000C68A:word32]
	Mem0[sp:word32] = v40
	ZN = cond(v40)
	C = false
	V = false
	r0 = (uint32) Mem0[r2 + 0x0000C688:word16]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000001)
	V = false
	branch Test(NE,Z) l00012B50
	// succ:  l00012B47 l00012B50
l00012B47:
	r3 = r5 + 10
	ZN = cond(r3)
	C = false
	V = false
	goto l00012B54
	// succ:  l00012B54
l00012B50:
	r3 = r5 + 2
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00012B54
l00012B54:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v44 = r4 + 332
	Mem0[sp:word32] = v44
	ZN = cond(v44)
	C = false
	V = false
	sp = sp - 0x00000004
	v45 = r2 + 1515
	Mem0[sp:word32] = v45
	ZN = cond(v45)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v46 = r2 + 1515
	Mem0[sp:word32] = v46
	ZN = cond(v46)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v47 = Mem0[r2 + 0x0000C68E:word32]
	Mem0[sp:word32] = v47
	ZN = cond(v47)
	C = false
	V = false
	sp = sp - 0x00000004
	v48 = Mem0[r2 + 0x0000C68E:word32]
	Mem0[sp:word32] = v48
	ZN = cond(v48)
	C = false
	V = false
	sp = sp - 0x00000004
	v49 = r4 + 537
	Mem0[sp:word32] = v49
	ZN = cond(v49)
	C = false
	V = false
	sp = sp - 0x00000004
	v50 = r2 + 1515
	Mem0[sp:word32] = v50
	ZN = cond(v50)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v51 = r2 + 1515
	Mem0[sp:word32] = v51
	ZN = cond(v51)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	goto l00012C5C
	// succ:  l00012C5C
l00012BA4:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r0 = (uint32) Mem0[r2 + 0x0000C686:word16]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000001)
	V = false
	branch Test(NE,Z) l00012BB8
	// succ:  l00012BB2 l00012BB8
l00012BB2:
	r3 = r5 + 20
	ZN = cond(r3)
	C = false
	V = false
	goto l00012BBC
	// succ:  l00012BBC
l00012BB8:
	r3 = r5 + 16
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00012BBC
l00012BBC:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	ap = (uint32) Mem0[r2 + 0x0000C684:word16]
	ZN = cond(ap)
	C = false
	V = false
	ap = ap + 0x00000001
	CVZN = cond(ap)
	sp = sp - 0x00000004
	Mem0[sp:word32] = ap
	ZN = cond(ap)
	C = false
	V = false
	r6 = r6 + 0x00000001
	CVZN = cond(r6)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r6
	ZN = cond(r6)
	C = false
	V = false
	sp = sp - 0x00000004
	v56 = r4 + 583
	Mem0[sp:word32] = v56
	ZN = cond(v56)
	C = false
	V = false
	sp = sp - 0x00000004
	v57 = r2 + 1515
	Mem0[sp:word32] = v57
	ZN = cond(v57)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v58 = r2 + 1515
	Mem0[sp:word32] = v58
	ZN = cond(v58)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v59 = Mem0[r2 + 0x0000C68A:word32]
	Mem0[sp:word32] = v59
	ZN = cond(v59)
	C = false
	V = false
	sp = sp - 0x00000004
	v60 = Mem0[r2 + 0x0000C68A:word32]
	Mem0[sp:word32] = v60
	ZN = cond(v60)
	C = false
	V = false
	r0 = (uint32) Mem0[r2 + 0x0000C688:word16]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000001)
	V = false
	branch Test(NE,Z) l00012C0C
	// succ:  l00012C06 l00012C0C
l00012C06:
	r3 = r5 + 31
	ZN = cond(r3)
	C = false
	V = false
	goto l00012C10
	// succ:  l00012C10
l00012C0C:
	r3 = r5 + 23
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00012C10
l00012C10:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v69 = r4 + 726
	Mem0[sp:word32] = v69
	ZN = cond(v69)
	C = false
	V = false
	sp = sp - 0x00000004
	v70 = r2 + 1515
	Mem0[sp:word32] = v70
	ZN = cond(v70)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v71 = r2 + 1515
	Mem0[sp:word32] = v71
	ZN = cond(v71)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v72 = Mem0[r2 + 0x0000C68E:word32]
	Mem0[sp:word32] = v72
	ZN = cond(v72)
	C = false
	V = false
	sp = sp - 0x00000004
	v73 = Mem0[r2 + 0x0000C68E:word32]
	Mem0[sp:word32] = v73
	ZN = cond(v73)
	C = false
	V = false
	sp = sp - 0x00000004
	v74 = r4 + 857
	Mem0[sp:word32] = v74
	ZN = cond(v74)
	C = false
	V = false
	sp = sp - 0x00000004
	v75 = r2 + 1515
	Mem0[sp:word32] = v75
	ZN = cond(v75)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v76 = r2 + 1515
	Mem0[sp:word32] = v76
	ZN = cond(v76)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	// succ:  l00012C5C
l00012C5C:
	ZN = cond(Mem0[r2 + 0x0000C692:word16] - 0x0000)
	C = false
	V = false
	branch Test(NE,Z) l00012C8C
	// succ:  l00012C64 l00012C8C
l00012C64:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v52 = r4 + 926
	Mem0[sp:word32] = v52
	ZN = cond(v52)
	C = false
	V = false
	sp = sp - 0x00000004
	v53 = r2 + 1515
	Mem0[sp:word32] = v53
	ZN = cond(v53)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v54 = r2 + 1515
	Mem0[sp:word32] = v54
	ZN = cond(v54)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	goto l00012D7E
	// succ:  l00012D7E
l00012C8C:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v61 = (uint32) Mem0[r2 + 0x0000C692:word16]
	Mem0[sp:uint32] = v61
	ZN = cond(v61)
	C = false
	V = false
	sp = sp - 0x00000004
	v62 = r4 + 958
	Mem0[sp:word32] = v62
	ZN = cond(v62)
	C = false
	V = false
	sp = sp - 0x00000004
	v63 = r2 + 1515
	Mem0[sp:word32] = v63
	ZN = cond(v63)
	C = false
	V = false
	ZN = cond(0x000192D0)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v64 = r2 + 1515
	Mem0[sp:word32] = v64
	ZN = cond(v64)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v65 = r4 + 1032
	Mem0[sp:word32] = v65
	ZN = cond(v65)
	C = false
	V = false
	sp = sp - 0x00000004
	v66 = r2 + 1515
	Mem0[sp:word32] = v66
	ZN = cond(v66)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v67 = r2 + 1515
	Mem0[sp:word32] = v67
	ZN = cond(v67)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v68 = (uint32) Mem0[r2 + 0x0000C692:word16]
	Mem0[sp:uint32] = v68
	ZN = cond(v68)
	C = false
	V = false
	call fn0000DC76 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00012CEF
	// succ:  l00012CEC l00012CEF
l00012CEC:
	r8 = 0x00000001
	ZN = cond(r8)
	C = false
	V = false
	// succ:  l00012CEF
l00012CEF:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v77 = r4 + 1108
	Mem0[sp:word32] = v77
	ZN = cond(v77)
	C = false
	V = false
	sp = sp - 0x00000004
	v78 = r2 + 1515
	Mem0[sp:word32] = v78
	ZN = cond(v78)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v79 = r2 + 1515
	Mem0[sp:word32] = v79
	ZN = cond(v79)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	ZN = cond(r8 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00012D7E
	// succ:  l00012D12 l00012D7E
l00012D12:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v80 = r4 + 1184
	Mem0[sp:word32] = v80
	ZN = cond(v80)
	C = false
	V = false
	sp = sp - 0x00000004
	v81 = r2 + 1515
	Mem0[sp:word32] = v81
	ZN = cond(v81)
	C = false
	V = false
	call Mem0[r3:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v82 = r2 + 1515
	Mem0[sp:word32] = v82
	ZN = cond(v82)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	goto l00012D7E
	// succ:  l00012D7E
l00012D34:
	ZN = cond(Mem0[r2 + 92:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00012D7E
	// succ:  l00012D39 l00012D7E
l00012D39:
	ZN = cond(Mem0[r2 + 0x0000C692:word16] - 0x0000)
	C = false
	V = false
	branch Test(EQ,Z) l00012D7E
	// succ:  l00012D41 l00012D7E
l00012D41:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v19 = (uint32) Mem0[r2 + 0x0000C692:word16]
	Mem0[sp:uint32] = v19
	ZN = cond(v19)
	C = false
	V = false
	call fn0000DC76 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00012D7E
	// succ:  l00012D55 l00012D7E
l00012D55:
	sp = sp - 0x00000004
	v20 = (uint32) 0x0401
	Mem0[sp:uint32] = v20
	ZN = cond(v20)
	C = false
	V = false
	sp = sp - 0x00000004
	v21 = r4 + 1222
	Mem0[sp:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = r2 + 1515
	Mem0[sp:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v23 = r2 + 1515
	Mem0[sp:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	r8 = 0x00000001
	ZN = cond(r8)
	C = false
	V = false
	// succ:  l00012D7E
l00012D7E:
	r0 = r8
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00012A2A_exit
fn00012A2A_exit:


// fn00012D86
// Return size: 4
define fn00012D86
fn00012D86_entry:
	// succ:  l00012D86
l00012D86:
	sp = fp
	sp = sp - 0x00000014
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFF9584)
	C = false
	V = false
	r5 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r10 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r7_r6 = 0x0000000000000000
	Z = true
	N = false
	C = false
	V = false
	v14 = 0x0000
	Mem0[sp + 2:word16] = v14
	Z = true
	N = false
	C = false
	V = false
	v15 = 0x0000000000000000
	Mem0[sp + 4:word64] = v15
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(Mem0[r3 + 100:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LE,ZN) l00012DCB
	// succ:  l00012DA8 l00012DCB
l00012DA8:
	sp = sp - 0x00000004
	v17 = Mem0[r3 + 100:word32] << 2
	Mem0[sp:word32] = v17
	VZN = cond(v17)
	C = false
	call fn000192B6 (retsize: 4;)
	r6 = r0
	ZN = cond(r6)
	C = false
	V = false
	branch Test(EQ,Z) l00012DCB
	// succ:  l00012DB9 l00012DCB
l00012DB9:
	r2 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(Mem0[r3 + 100:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LE,ZN) l00012DCB
	// succ:  l00012DC0 l00012DCB
l00012DC0:
	v21 = 0x00000000
	Mem0[r6:word32] = v21
	Z = true
	N = false
	C = false
	V = false
	r2 = r2 + 0x00000001
	CVZN = cond(r2)
	CZN = cond(r2 - Mem0[r3 + 100:word32])
	V = false
	branch Test(LT,N) l00012DC0
	// succ:  l00012DCB l00012DC0
l00012DCB:
	ZN = cond(Mem0[r3 + 104:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LE,ZN) l00012DF3
	// succ:  l00012DD0 l00012DF3
l00012DD0:
	sp = sp - 0x00000004
	v23 = Mem0[r3 + 104:word32] << 2
	Mem0[sp:word32] = v23
	VZN = cond(v23)
	C = false
	call fn000192B6 (retsize: 4;)
	r7 = r0
	ZN = cond(r7)
	C = false
	V = false
	branch Test(EQ,Z) l00012DF3
	// succ:  l00012DE1 l00012DF3
l00012DE1:
	r2 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(Mem0[r3 + 104:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LE,ZN) l00012DF3
	// succ:  l00012DE8 l00012DF3
l00012DE8:
	v24 = 0x00000000
	Mem0[r7:word32] = v24
	Z = true
	N = false
	C = false
	V = false
	r2 = r2 + 0x00000001
	CVZN = cond(r2)
	CZN = cond(r2 - Mem0[r3 + 104:word32])
	V = false
	branch Test(LT,N) l00012DE8
	// succ:  l00012DF3 l00012DE8
l00012DF3:
	v25 = 0x00000000
	Mem0[r3 + 40:word32] = v25
	Z = true
	N = false
	C = false
	V = false
	v26 = r3 + 167
	Mem0[r3 + 1511:word32] = v26
	ZN = cond(v26)
	C = false
	V = false
	r2 = Mem0[r3 + 1511:word32]
	ZN = cond(r2)
	C = false
	V = false
	v27 = Mem0[r2 + 20:byte] & ~0x08
	Mem0[r2 + 20:byte] = v27
	ZN = cond(v27)
	C = false
	V = false
	CZN = cond(Mem0[r3 + 0x0000C67E:word32] - 0x00000004)
	V = false
	branch Test(NE,Z) l00012E14
	// succ:  l00012E0F l00012E14
l00012E0F:
	v29 = 0x04
	r4 = DPB(r4, v29, 0)
	ZN = cond(v29)
	C = false
	V = false
	goto l00012E16
	// succ:  l00012E16
l00012E14:
	v33 = 0x00
	r4 = DPB(r4, v33, 0)
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00012E16
l00012E16:
	v31 = (int32) (int8) r4
	Mem0[fp + -8:int32] = v31
	VZN = cond(v31)
	C = false
	r9 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r2 = (uint32) Mem0[r3 + 0x0000C688:word16]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r9 - r2)
	V = false
	branch Test(LT,N) l00012E2B
	// succ:  l00012E28 l00012E2B
l00012E28:
	goto l000130CF
	// succ:  l000130CF
l00012E2B:
	ZN = cond(0x0000DC74)
	C = false
	V = false
	ZN = cond(0x00018C18)
	C = false
	V = false
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l00012E3C
l00012E3C:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v36 = r3 + 152
	Mem0[sp:word32] = v36
	ZN = cond(v36)
	C = false
	V = false
	call fn0000D5BE (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00012E51
	// succ:  l00012E4D l00012E51
l00012E4D:
	r0 = 0x00000033
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00012D86_exit
l00012E51:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v37 = r3 + 0x0000C634
	Mem0[sp:word32] = v37
	ZN = cond(v37)
	C = false
	V = false
	sp = sp - 0x00000004
	v38 = r3 + 152
	Mem0[sp:word32] = v38
	ZN = cond(v38)
	C = false
	V = false
	call fn000192DA (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00012E96
	// succ:  l00012E68 l00012E96
l00012E68:
	sp = sp - 0x00000004
	v39 = (uint32) 0x0401
	Mem0[sp:uint32] = v39
	ZN = cond(v39)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r9
	ZN = cond(r9)
	C = false
	V = false
l00012E96:
	call fn00011C0A (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00012EA2
	// succ:  l00012EA1 l00012EA2
l00012EA1:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00012D86_exit
l00012EA2:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000002
	ZN = cond(0x00000002)
	C = false
	V = false
	sp = sp - 0x00000004
	v45 = (uint32) Mem0[r3 + 0x0000C670:word16]
	Mem0[sp:uint32] = v45
	ZN = cond(v45)
	C = false
	V = false
	call Mem0[r8:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00012EBB
	// succ:  l00012EB2 l00012EBB
l00012EB2:
	r10 = r0
	ZN = cond(r10)
	C = false
	V = false
	CZN = cond(r0 - 0x00000001)
	V = false
	branch Test(LE,ZN) l00012EBB
	// succ:  l00012EBA l00012EBB
l00012EBA:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00012D86_exit
l00012EBB:
	ZN = cond(Mem0[r3 + 108:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00012F3F
	// succ:  l00012EC0 l00012F3F
l00012EC0:
	ap = Mem0[r3 + 144:word32] - 0x00000004
	CVZN = cond(ap)
	r5 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r2 = ap + 0x00000004
	CVZN = cond(r2)
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00012EFF
	// succ:  l00012ED0 l00012EFF
l00012ED0:
	sp = sp - 0x00000004
	v49 = Mem0[r3 + 16:word32]
	Mem0[sp:word32] = v49
	ZN = cond(v49)
	C = false
	V = false
	sp = sp - 0x00000004
	v50 = Mem0[r2:word32]
	Mem0[sp:word32] = v50
	ZN = cond(v50)
	C = false
	V = false
	sp = sp - 0x00000004
	v51 = r3 + 0x0000C701
	Mem0[sp:word32] = v51
	ZN = cond(v51)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00012EF8
	// succ:  l00012EE2 l00012EF8
l00012EE2:
	r5 = 0x00000001
	ZN = cond(r5)
	C = false
	V = false
	ZN = cond(r6 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00012EFF
	// succ:  l00012EE9 l00012EFF
l00012EE9:
	ap = r2 - Mem0[r3 + 144:word32]
	CVZN = cond(ap)
	ap = ap / 0x00000004
	CVZN = cond(ap)
	v52 = 0x00000001
	Mem0[r6:word32] = v52
	ZN = cond(v52)
	C = false
	V = false
	goto l00012EFF
	// succ:  l00012EFF
l00012EF8:
	r2 = r2 + 0x00000004
	CVZN = cond(r2)
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00012ED0
	// succ:  l00012EFF l00012ED0
l00012EFF:
	ZN = cond(r5 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00012F3F
	// succ:  l00012F03 l00012F3F
l00012F03:
	r2 = Mem0[r3 + 148:word32] - 0x00000004
	CVZN = cond(r2)
	r2 = r2 + 0x00000004
	CVZN = cond(r2)
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00012F3F
	// succ:  l00012F10 l00012F3F
l00012F10:
	sp = sp - 0x00000004
	v55 = Mem0[r3 + 16:word32]
	Mem0[sp:word32] = v55
	ZN = cond(v55)
	C = false
	V = false
	sp = sp - 0x00000004
	v56 = Mem0[r2:word32]
	Mem0[sp:word32] = v56
	ZN = cond(v56)
	C = false
	V = false
	sp = sp - 0x00000004
	v57 = r3 + 0x0000C701
	Mem0[sp:word32] = v57
	ZN = cond(v57)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00012F38
	// succ:  l00012F22 l00012F38
l00012F22:
	r5 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(r7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00012F3F
	// succ:  l00012F28 l00012F3F
l00012F28:
	ap = r2 - Mem0[r3 + 148:word32]
	CVZN = cond(ap)
	ap = ap / 0x00000004
	CVZN = cond(ap)
	v58 = 0x00000001
	Mem0[r7:word32] = v58
	ZN = cond(v58)
	C = false
	V = false
	goto l00012F3F
	// succ:  l00012F3F
l00012F38:
	r2 = r2 + 0x00000004
	CVZN = cond(r2)
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00012F10
	// succ:  l00012F3F l00012F10
l00012F3F:
	ZN = cond(Mem0[r3 + 108:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00012F4B
	// succ:  l00012F44 l00012F4B
l00012F44:
	ZN = cond(r5 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00012F4B
	// succ:  l00012F48 l00012F4B
l00012F48:
	goto l0001307C
	// succ:  l0001307C
l00012F4B:
	r0 = Mem0[r3 + 36:word32]
	ZN = cond(r0)
	C = false
	V = false
	v60 = r0 - 0x00000001
	branch v60 > 0x00000009 l00012F65
	// succ:  l00012F4F_1 l00012F65
l00012F4F_1:
	call 0x00012F53 + v60 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn00012D86_exit
l00012F65:
l0001307C:
	ZN = cond(Mem0[r3 + 0x0000C672:word16] - 0x0000)
	C = false
	V = false
	branch Test(EQ,Z) l0001309D
	// succ:  l00013084 l0001309D
l00013084:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v59 = (uint32) Mem0[r3 + 0x0000C672:word16]
	Mem0[sp:uint32] = v59
	ZN = cond(v59)
	C = false
	V = false
	call Mem0[r8:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0001309D
	// succ:  l00013094 l0001309D
l00013094:
	r10 = r0
	ZN = cond(r10)
	C = false
	V = false
	CZN = cond(r0 - 0x00000001)
	V = false
	branch Test(LE,ZN) l0001309D
	// succ:  l0001309C l0001309D
l0001309C:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00012D86_exit
l0001309D:
	ZN = cond(Mem0[r3 + 0x0000C674:word16] - 0x0000)
	C = false
	V = false
	branch Test(EQ,Z) l000130BE
	// succ:  l000130A5 l000130BE
l000130A5:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v61 = (uint32) Mem0[r3 + 0x0000C674:word16]
	Mem0[sp:uint32] = v61
	ZN = cond(v61)
	C = false
	V = false
	call Mem0[r8:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000130BE
	// succ:  l000130B5 l000130BE
l000130B5:
	r10 = r0
	ZN = cond(r10)
	C = false
	V = false
	CZN = cond(r0 - 0x00000001)
	V = false
	branch Test(LE,ZN) l000130BE
	// succ:  l000130BD l000130BE
l000130BD:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00012D86_exit
l000130BE:
	r9 = r9 + 0x00000001
	CVZN = cond(r9)
	r2 = (uint32) Mem0[r3 + 0x0000C688:word16]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r9 - r2)
	V = false
	branch Test(GE,N) l000130CF
	// succ:  l000130CC l000130CF
l000130CC:
	goto l00012E3C
	// succ:  l00012E3C
l000130CF:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v34 = r3 + 152
	Mem0[sp:word32] = v34
	ZN = cond(v34)
	C = false
	V = false
	call fn0000D5BE (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000130E4
	// succ:  l000130E0 l000130E4
l000130E0:
	r0 = 0x00000033
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00012D86_exit
l000130E4:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v40 = r3 + 0x0000C639
	Mem0[sp:word32] = v40
	ZN = cond(v40)
	C = false
	V = false
	sp = sp - 0x00000004
	v41 = r3 + 152
	Mem0[sp:word32] = v41
	ZN = cond(v41)
	C = false
	V = false
	call fn000192DA (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00013126
	// succ:  l000130FB l00013126
l000130FB:
	sp = sp - 0x00000004
	v42 = (uint32) 0x0401
	Mem0[sp:uint32] = v42
	ZN = cond(v42)
	C = false
	V = false
l00013126:
	ZN = cond(Mem0[r3 + 68:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000131A4
	// succ:  l0001312B l000131A4
l0001312B:
	ZN = cond(0xFFFE687D)
	C = false
	V = false
	sp = sp - 0x00000004
	v43 = Mem0[sp + 8:word32]
	Mem0[sp:word32] = v43
	ZN = cond(v43)
	C = false
	V = false
	sp = sp - 0x00000004
	v44 = Mem0[sp + 8:word32]
	Mem0[sp:word32] = v44
	ZN = cond(v44)
	C = false
	V = false
	call fn00017662 (retsize: 4;)
	r5 = r0
	ZN = cond(r5)
	C = false
	V = false
	branch Test(GE,N) l0001314E
	// succ:  l00013144 l0001314E
l00013144:
	ZN = cond(0xFFFE687E)
	C = false
	V = false
	r5 = -r5
	CVZN = cond(r5)
	// succ:  l0001314E
l0001314E:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
l000131A4:
	ZN = cond(r6 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000131F6
	// succ:  l000131A8 l000131F6
l000131A8:
	ap = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(Mem0[r3 + 100:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LE,ZN) l000131ED
	// succ:  l000131AF l000131ED
l000131AF:
	// succ:  l000131B0
l000131B0:
	ZN = cond(Mem0[r6 + ap * 4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000131E5
	// succ:  l000131B5 l000131E5
l000131B5:
	sp = sp - 0x00000004
	v47 = (uint32) 0x0401
	Mem0[sp:uint32] = v47
	ZN = cond(v47)
	C = false
	V = false
	r2 = Mem0[r3 + 144:word32]
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	v48 = Mem0[r2 + ap * 4:word32]
	Mem0[sp:word32] = v48
	ZN = cond(v48)
	C = false
	V = false
l000131E5:
	ap = ap + 0x00000001
	CVZN = cond(ap)
	CZN = cond(ap - Mem0[r3 + 100:word32])
	V = false
	branch Test(LT,N) l000131B0
	// succ:  l000131ED l000131B0
l000131ED:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r6
	ZN = cond(r6)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	// succ:  l000131F6
l000131F6:
	ZN = cond(r7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0001324A
	// succ:  l000131FA l0001324A
l000131FA:
	ap = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(Mem0[r3 + 104:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LE,ZN) l00013241
	// succ:  l00013201 l00013241
l00013201:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l00013204
l00013204:
	ZN = cond(Mem0[r7 + ap * 4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00013239
	// succ:  l00013209 l00013239
l00013209:
	sp = sp - 0x00000004
	v53 = (uint32) 0x0401
	Mem0[sp:uint32] = v53
	ZN = cond(v53)
	C = false
	V = false
	r2 = Mem0[r3 + 148:word32]
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	v54 = Mem0[r2 + ap * 4:word32]
	Mem0[sp:word32] = v54
	ZN = cond(v54)
	C = false
	V = false
l00013239:
	ap = ap + 0x00000001
	CVZN = cond(ap)
	CZN = cond(ap - Mem0[r3 + 104:word32])
	V = false
	branch Test(LT,N) l00013204
	// succ:  l00013241 l00013204
l00013241:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	// succ:  l0001324A
l0001324A:
	r2 = (uint32) Mem0[sp + 2:word16]
	ZN = cond(r2)
	C = false
	V = false
	branch Test(NE,Z) l00013258
	// succ:  l00013250 l00013258
l00013250:
	CZN = cond(r10 - 0x00000001)
	V = false
	branch Test(GT,ZN) l00013258
	// succ:  l00013255 l00013258
l00013255:
	r10 = 0x0000000B
	ZN = cond(r10)
	C = false
	V = false
	// succ:  l00013258
l00013258:
	r0 = r10
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00012D86_exit
fn00012D86_exit:


// fn0001325E
// Return size: 4
define fn0001325E
fn0001325E_entry:
	// succ:  l0001325E
l0001325E:
	sp = fp
	sp = sp + -236
	ZN = cond(sp)
	C = false
	V = false
	ZN = cond(0xFFFE6858)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFF9584)
	C = false
	V = false
	v6 = 0x00000000
	Mem0[sp + 8:word32] = v6
	Z = true
	N = false
	C = false
	V = false
	r2 = Mem0[Mem0[ap + 4:word32]:word32]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(Mem0[r5 + 0x0000C67E:word32] - r2)
	V = false
	branch Test(EQ,Z) l000132B7
	goto l00013288
	// succ:  l00013288 l00013286_thunk_fn000132B7
l00013286_thunk_fn000132B7:
	call fn000132B7 (retsize: 0;)
	return
	// succ:  fn0001325E_exit
l00013288:
	ZN = cond(r2 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000132B7
	goto l0001328C
	// succ:  l0001328C l0001328A_thunk_fn000132B7
l0001328A_thunk_fn000132B7:
	call fn000132B7 (retsize: 0;)
	return
	// succ:  fn0001325E_exit
l0001328C:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v13 = Mem0[r5 + 0x0000C67E:word32] - r2
	Mem0[sp:word32] = v13
	CVZN = cond(v13)
	sp = sp - 0x00000004
	v16 = r6 + 1743
	Mem0[sp:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	sp = sp - 0x00000004
	v17 = r5 + 1515
	Mem0[sp:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v19 = r5 + 1515
	Mem0[sp:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	// succ:  l000132B4_thunk_fn000132B7
l000132B4_thunk_fn000132B7:
	call fn000132B7 (retsize: 0;)
	return
	// succ:  fn0001325E_exit
fn0001325E_exit:


// fn000132B7
// Return size: 0
define fn000132B7
fn000132B7_entry:
	// succ:  l000132B7
l000132B7:
	sp = fp
	r3 = Mem0[r5 + 0x0000C67E:word32] + 0x0000001E
	CVZN = cond(r3)
	r2 = (uint32) Mem0[r5 + 0x0000C670:word16]
	ZN = cond(r2)
	C = false
	V = false
	r3 = r3 + r2
	CVZN = cond(r3)
	r2 = (uint32) Mem0[r5 + 0x0000C672:word16]
	ZN = cond(r2)
	C = false
	V = false
	r3 = r3 + r2
	CVZN = cond(r3)
	r2 = (uint32) Mem0[r5 + 0x0000C674:word16]
	ZN = cond(r2)
	C = false
	V = false
	r3 = r3 + r2
	CVZN = cond(r3)
	v10 = r3 + Mem0[r5 + 0x0000C668:word32]
	Mem0[Mem0[ap + 4:word32]:word32] = v10
	CVZN = cond(v10)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000003
	ZN = cond(0x00000003)
	C = false
	V = false
	sp = sp - 0x00000004
	v12 = (uint32) Mem0[r5 + 0x0000C672:word16]
	Mem0[sp:uint32] = v12
	ZN = cond(v12)
	C = false
	V = false
	call fn0000DC76 (retsize: 4;)
	v14 = r0
	Mem0[sp + 4:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	branch Test(EQ,Z) l0001331C
	// succ:  l000132FC l0001331C
l000132FC:
	ZN = cond(Mem0[r5 + 0x0000C627:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00013317
	// succ:  l00013304 l00013317
l00013304:
	sp = sp - 0x00000004
	v16 = Mem0[r5 + 0x0000C627:word32]
	Mem0[sp:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	v17 = 0x00000000
	Mem0[r5 + 0x0000C627:word32] = v17
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00013317
l00013317:
	v19 = Mem0[sp + 4:word32]
	Mem0[sp + 8:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	// succ:  l0001331C
l0001331C:
	r2 = Mem0[r5 + 1511:word32]
	ZN = cond(r2)
	C = false
	V = false
	v20 = Mem0[r2 + 12:word16]
	Mem0[sp + 2:word16] = v20
	ZN = cond(v20)
	C = false
	V = false
	v21 = (uint16) Mem0[r5 + 0x0000C658:byte]
	Mem0[fp + -6:uint16] = v21
	ZN = cond(v21)
	C = false
	V = false
	r2 = (uint32) Mem0[r5 + 0x0000C65B:byte]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x00000012)
	V = false
	branch Test(UGE,C) l00013344
	// succ:  l0001333A l00013344
l0001333A:
	v24 = Mem0[r5 + 0x0000C65B:byte]
	r4 = DPB(r4, v24, 0)
	ZN = cond(v24)
	C = false
	V = false
	goto l00013347
	// succ:  l00013347
l00013344:
	v264 = 0x12
	r4 = DPB(r4, v264, 0)
	ZN = cond(v264)
	C = false
	V = false
	// succ:  l00013347
l00013347:
	v26 = (uint16) (byte) r4
	r9 = DPB(r9, v26, 0)
	ZN = cond(v26)
	C = false
	V = false
	v28 = (uint16) Mem0[r5 + 0x0000C65A:byte]
	r10 = DPB(r10, v28, 0)
	ZN = cond(v28)
	C = false
	V = false
	r2 = (uint32) Mem0[r5 + 0x0000C65E:word16]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x0000000B)
	V = false
	branch Test(UGE,C) l00013368
	// succ:  l0001335D l00013368
l0001335D:
	v30 = Mem0[r5 + 0x0000C65E:word16]
	r3 = DPB(r3, v30, 0)
	ZN = cond(v30)
	C = false
	V = false
	goto l0001336B
	// succ:  l0001336B
l00013368:
	v263 = 0x000B
	r3 = DPB(r3, v263, 0)
	ZN = cond(v263)
	C = false
	V = false
	// succ:  l0001336B
l0001336B:
	v31 = (word16) r3
	Mem0[sp + 16:word16] = v31
	ZN = cond(v31)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000002
	ZN = cond(0x00000002)
	C = false
	V = false
	sp = sp - 0x00000004
	v33 = r8 + 42
	Mem0[sp:word32] = v33
	ZN = cond(v33)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	call fn00017772 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v34 = Mem0[r5 + 0x0000C67E:word32]
	Mem0[sp:word32] = v34
	ZN = cond(v34)
	C = false
	V = false
	sp = sp - 0x00000004
	v35 = Mem0[r5 + 0x0000C67E:word32]
	Mem0[sp:word32] = v35
	ZN = cond(v35)
	C = false
	V = false
	sp = sp - 0x00000004
	v37 = r6 + 1810
	Mem0[sp:word32] = v37
	ZN = cond(v37)
	C = false
	V = false
	sp = sp - 0x00000004
	v38 = r5 + 1515
	Mem0[sp:word32] = v38
	ZN = cond(v38)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v39 = r5 + 1515
	Mem0[sp:word32] = v39
	ZN = cond(v39)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	r3 = (uint32) Mem0[sp + 2:word16]
	ZN = cond(r3)
	C = false
	V = false
	CZN = cond(r3 - 0x00000012)
	V = false
	branch Test(ULT,C) l000133DC
	// succ:  l000133C1 l000133DC
l000133C1:
	sp = sp - 0x00000004
	v40 = (uint32) Mem0[r5 + 0x0000C659:byte]
	Mem0[sp:uint32] = v40
	ZN = cond(v40)
	C = false
	V = false
	sp = sp - 0x00000004
	v41 = r6 + 1797
	Mem0[sp:word32] = v41
	ZN = cond(v41)
	C = false
	V = false
	sp = sp - 0x00000004
	v42 = fp + -58
	Mem0[sp:word32] = v42
	ZN = cond(v42)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	r4 = fp + -58
	ZN = cond(r4)
	C = false
	V = false
	goto l000133E2
	// succ:  l000133E2
l000133DC:
	r4 = Mem0[r6 + 5188 + r3 * 4:word32]
	ZN = cond(r4)
	C = false
	V = false
	// succ:  l000133E2
l000133E2:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	v43 = r6 + 1883
	Mem0[sp:word32] = v43
	ZN = cond(v43)
	C = false
	V = false
	sp = sp - 0x00000004
	v44 = r5 + 1515
	Mem0[sp:word32] = v44
	ZN = cond(v44)
	C = false
	V = false
	ZN = cond(0x000192D0)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v46 = r5 + 1515
	Mem0[sp:word32] = v46
	ZN = cond(v46)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r1 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r0 = (uint32) Mem0[fp + -6:word16]
	ZN = cond(r0)
	C = false
	V = false
	r2 = (uint32) 0x000A
	ZN = cond(r2)
	C = false
	V = false
	branch Test(EQ,Z) l00013430
	// succ:  l00013417 l00013430
l00013417:
	CZN = cond(r2 - 0x00000001)
	V = false
	branch Test(EQ,Z) l00013435
	// succ:  l0001341C l00013435
l0001341C:
	branch Test(GT,ZN) l00013430
	// succ:  l0001341E l00013430
l0001341E:
	CZN = cond(r2 - r0)
	V = false
	branch Test(EQ,Z) l00013435
	// succ:  l00013423 l00013435
l00013423:
	branch Test(UGT,CZ) l00013428
	// succ:  l00013425 l00013428
l00013425:
	r1 = r1 - r2
	CVZN = cond(r1)
	// succ:  l00013428
l00013428:
	r1 = r1 + r0
	CVZN = cond(r1)
	goto l00013435
	// succ:  l00013435
l00013430:
l00013435:
	sp = sp - 0x00000004
	v49 = (uint32) (word16) r1
	Mem0[sp:uint32] = v49
	ZN = cond(v49)
	C = false
	V = false
	r2 = (uint32) Mem0[fp + -6:word16]
	ZN = cond(r2)
	C = false
	V = false
	r1 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r0 = r2
	ZN = cond(r0)
	C = false
	V = false
	r2 = 0x0000000A
	ZN = cond(r2)
	C = false
	V = false
	branch Test(GE,N) l00013450
	// succ:  l00013446 l00013450
l00013446:
	CZN = cond(r2 - r0)
	V = false
	branch Test(UGT,CZ) l00013455
	// succ:  l0001344B l00013455
l0001344B:
	r1 = r1 + 0x00000001
	CVZN = cond(r1)
	goto l00013455
	// succ:  l00013455
l00013450:
l00013455:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r1
	ZN = cond(r1)
	C = false
	V = false
	sp = sp - 0x00000004
	v50 = r6 + 1939
	Mem0[sp:word32] = v50
	ZN = cond(v50)
	C = false
	V = false
	sp = sp - 0x00000004
	v51 = r5 + 1515
	Mem0[sp:word32] = v51
	ZN = cond(v51)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v52 = r5 + 1515
	Mem0[sp:word32] = v52
	ZN = cond(v52)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	r3 = (uint32) (word16) r9
	ZN = cond(r3)
	C = false
	V = false
	CZN = cond(r3 - 0x00000012)
	V = false
	branch Test(ULT,C) l00013494
	// succ:  l0001347C l00013494
l0001347C:
	sp = sp - 0x00000004
	v53 = (uint32) Mem0[r5 + 0x0000C65B:byte]
	Mem0[sp:uint32] = v53
	ZN = cond(v53)
	C = false
	V = false
	sp = sp - 0x00000004
	v54 = r6 + 1797
	Mem0[sp:word32] = v54
	ZN = cond(v54)
	C = false
	V = false
	sp = sp - 0x00000004
	v55 = fp + -58
	Mem0[sp:word32] = v55
	ZN = cond(v55)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	r4 = fp + -58
	ZN = cond(r4)
	C = false
	V = false
	goto l0001349A
	// succ:  l0001349A
l00013494:
	r4 = Mem0[r6 + 5188 + r3 * 4:word32]
	ZN = cond(r4)
	C = false
	V = false
	// succ:  l0001349A
l0001349A:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	v56 = r6 + 1998
	Mem0[sp:word32] = v56
	ZN = cond(v56)
	C = false
	V = false
	sp = sp - 0x00000004
	v57 = r5 + 1515
	Mem0[sp:word32] = v57
	ZN = cond(v57)
	C = false
	V = false
	ZN = cond(0x000192D0)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v58 = r5 + 1515
	Mem0[sp:word32] = v58
	ZN = cond(v58)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r1 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r0 = (uint32) (word16) r10
	ZN = cond(r0)
	C = false
	V = false
	r2 = (uint32) 0x000A
	ZN = cond(r2)
	C = false
	V = false
	branch Test(EQ,Z) l000134E4
	// succ:  l000134CE l000134E4
l000134CE:
	CZN = cond(r2 - 0x00000001)
	V = false
	branch Test(EQ,Z) l000134E9
	// succ:  l000134D3 l000134E9
l000134D3:
	branch Test(GT,ZN) l000134E4
	// succ:  l000134D5 l000134E4
l000134D5:
	CZN = cond(r2 - r0)
	V = false
	branch Test(EQ,Z) l000134E9
	// succ:  l000134DA l000134E9
l000134DA:
	branch Test(UGT,CZ) l000134DF
	// succ:  l000134DC l000134DF
l000134DC:
	r1 = r1 - r2
	CVZN = cond(r1)
	// succ:  l000134DF
l000134DF:
	r1 = r1 + r0
	CVZN = cond(r1)
	goto l000134E9
	// succ:  l000134E9
l000134E4:
l000134E9:
	sp = sp - 0x00000004
	v59 = (uint32) (word16) r1
	Mem0[sp:uint32] = v59
	ZN = cond(v59)
	C = false
	V = false
	r2 = (uint32) (word16) r10
	ZN = cond(r2)
	C = false
	V = false
	r1 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r0 = r2
	ZN = cond(r0)
	C = false
	V = false
	r2 = 0x0000000A
	ZN = cond(r2)
	C = false
	V = false
	branch Test(GE,N) l00013504
	// succ:  l000134F9 l00013504
l000134F9:
	CZN = cond(r2 - r0)
	V = false
	branch Test(UGT,CZ) l00013509
	// succ:  l000134FE l00013509
l000134FE:
	r1 = r1 + 0x00000001
	CVZN = cond(r1)
	goto l00013509
	// succ:  l00013509
l00013504:
l00013509:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r1
	ZN = cond(r1)
	C = false
	V = false
	sp = sp - 0x00000004
	v60 = r6 + 2054
	Mem0[sp:word32] = v60
	ZN = cond(v60)
	C = false
	V = false
	sp = sp - 0x00000004
	v61 = r5 + 1515
	Mem0[sp:word32] = v61
	ZN = cond(v61)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v62 = r5 + 1515
	Mem0[sp:word32] = v62
	ZN = cond(v62)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	r3 = (uint32) Mem0[sp + 16:word16]
	ZN = cond(r3)
	C = false
	V = false
	CZN = cond(r3 - 0x0000000B)
	V = false
	branch Test(ULT,C) l00013548
	// succ:  l00013531 l00013548
l00013531:
	sp = sp - 0x00000004
	v63 = (uint32) Mem0[r5 + 0x0000C65E:word16]
	Mem0[sp:uint32] = v63
	ZN = cond(v63)
	C = false
	V = false
	sp = sp - 0x00000004
	v64 = r6 + 1797
	Mem0[sp:word32] = v64
	ZN = cond(v64)
	C = false
	V = false
	sp = sp - 0x00000004
	v65 = fp + -58
	Mem0[sp:word32] = v65
	ZN = cond(v65)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	r4 = fp + -58
	ZN = cond(r4)
	C = false
	V = false
	goto l0001354E
	// succ:  l0001354E
l00013548:
	r4 = Mem0[r6 + 5260 + r3 * 4:word32]
	ZN = cond(r4)
	C = false
	V = false
	// succ:  l0001354E
l0001354E:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	v66 = r6 + 2113
	Mem0[sp:word32] = v66
	ZN = cond(v66)
	C = false
	V = false
	sp = sp - 0x00000004
	v67 = r5 + 1515
	Mem0[sp:word32] = v67
	ZN = cond(v67)
	C = false
	V = false
	ZN = cond(0x000192D0)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v68 = r5 + 1515
	Mem0[sp:word32] = v68
	ZN = cond(v68)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	r4 = (uint32) Mem0[sp + 16:word16]
	ZN = cond(r4)
	C = false
	V = false
	CZN = cond(r4 - 0x00000006)
	V = false
	branch Test(NE,Z) l000135F4
	// succ:  l0001357F l000135F4
l0001357F:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r2 = (uint32) Mem0[r5 + 0x0000C65C:word16]
	ZN = cond(r2)
	C = false
	V = false
	branch (r2 & 0x00000001 << 0x00000001) == 0x00000000 l00013594
	// succ:  l0001358C l00013594
l0001358C:
	v69 = 0x38
	r3 = DPB(r3, v69, 0)
	ZN = cond(v69)
	C = false
	V = false
	goto l00013597
	// succ:  l00013597
l00013594:
	v257 = 0x34
	r3 = DPB(r3, v257, 0)
	ZN = cond(v257)
	C = false
	V = false
	// succ:  l00013597
l00013597:
	sp = sp - 0x00000004
	v70 = (int32) (int8) r3
	Mem0[sp:int32] = v70
	VZN = cond(v70)
	C = false
	sp = sp - 0x00000004
	v72 = r6 + 2169
	Mem0[sp:word32] = v72
	ZN = cond(v72)
	C = false
	V = false
	sp = sp - 0x00000004
	v73 = r5 + 1515
	Mem0[sp:word32] = v73
	ZN = cond(v73)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v74 = r5 + 1515
	Mem0[sp:word32] = v74
	ZN = cond(v74)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r2 = (uint32) Mem0[r5 + 0x0000C65C:word16]
	ZN = cond(r2)
	C = false
	V = false
	branch (r2 & 0x00000001 << 0x00000002) == 0x00000000 l000135CC
	// succ:  l000135C4 l000135CC
l000135C4:
	v75 = 0x33
	r3 = DPB(r3, v75, 0)
	ZN = cond(v75)
	C = false
	V = false
	goto l000135CF
	// succ:  l000135CF
l000135CC:
	v256 = 0x32
	r3 = DPB(r3, v256, 0)
	ZN = cond(v256)
	C = false
	V = false
	// succ:  l000135CF
l000135CF:
	sp = sp - 0x00000004
	v76 = (int32) (int8) r3
	Mem0[sp:int32] = v76
	VZN = cond(v76)
	C = false
	sp = sp - 0x00000004
	v77 = r6 + 2226
	Mem0[sp:word32] = v77
	ZN = cond(v77)
	C = false
	V = false
	sp = sp - 0x00000004
	v78 = r5 + 1515
	Mem0[sp:word32] = v78
	ZN = cond(v78)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v79 = r5 + 1515
	Mem0[sp:word32] = v79
	ZN = cond(v79)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	goto l00013638
	// succ:  l00013638
l000135F4:
	CZN = cond(r4 - 0x00000008)
	V = false
	branch Test(NE,Z) l00013638
	// succ:  l000135F9 l00013638
l000135F9:
	r2 = (uint32) Mem0[r5 + 0x0000C65C:word16]
	ZN = cond(r2)
	C = false
	V = false
	r2 = r2 >> 1
	VZN = cond(r2)
	C = false
	r2 = r2 & ~0xFFFFFFFC
	ZN = cond(r2)
	C = false
	V = false
	v258 = (int16) r2
	Mem0[fp + -8:int16] = v258
	VZN = cond(v258)
	C = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r2 = (uint32) Mem0[fp + -8:word16]
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	v259 = Mem0[r6 + 5304 + r2 * 4:word32]
	Mem0[sp:word32] = v259
	ZN = cond(v259)
	C = false
	V = false
	sp = sp - 0x00000004
	v260 = r6 + 2282
	Mem0[sp:word32] = v260
	ZN = cond(v260)
	C = false
	V = false
	sp = sp - 0x00000004
	v261 = r5 + 1515
	Mem0[sp:word32] = v261
	ZN = cond(v261)
	C = false
	V = false
	call Mem0[r7:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v262 = r5 + 1515
	Mem0[sp:word32] = v262
	ZN = cond(v262)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	// succ:  l00013638
l00013638:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r2 = (uint32) Mem0[r5 + 0x0000C65C:word16]
	ZN = cond(r2)
	C = false
	V = false
	branch (r2 & 0x00000001) == 0x00000000 l0001364C
	// succ:  l00013644 l0001364C
l00013644:
	r3 = r6
	ZN = cond(r3)
	C = false
	V = false
	goto l00013650
	// succ:  l00013650
l0001364C:
	r3 = r8 + 45
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00013650
l00013650:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v80 = r6 + 2338
	Mem0[sp:word32] = v80
	ZN = cond(v80)
	C = false
	V = false
	sp = sp - 0x00000004
	v81 = r5 + 1515
	Mem0[sp:word32] = v81
	ZN = cond(v81)
	C = false
	V = false
	ZN = cond(0x000192D0)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v82 = r5 + 1515
	Mem0[sp:word32] = v82
	ZN = cond(v82)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r2 = (uint32) Mem0[r5 + 0x0000C65C:word16]
	ZN = cond(r2)
	C = false
	V = false
	branch (r2 & 0x00000001 << 0x00000003) == 0x00000000 l0001368C
	// succ:  l00013683 l0001368C
l00013683:
	r3 = r8 + 53
	ZN = cond(r3)
	C = false
	V = false
	goto l00013690
	// succ:  l00013690
l0001368C:
	r3 = r8 + 50
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00013690
l00013690:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v83 = r6 + 2403
	Mem0[sp:word32] = v83
	ZN = cond(v83)
	C = false
	V = false
	sp = sp - 0x00000004
	v84 = r5 + 1515
	Mem0[sp:word32] = v84
	ZN = cond(v84)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v85 = r5 + 1515
	Mem0[sp:word32] = v85
	ZN = cond(v85)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	v86 = fp + -42
	Mem0[sp:word32] = v86
	ZN = cond(v86)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v87 = r5 + 0x0000C660
	Mem0[sp:word32] = v87
	ZN = cond(v87)
	C = false
	V = false
	sp = sp - 0x00000004
	v88 = r5 + 0x0000C662
	Mem0[sp:word32] = v88
	ZN = cond(v88)
	C = false
	V = false
	call fn00015106 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v89 = fp + -42
	Mem0[sp:word32] = v89
	ZN = cond(v89)
	C = false
	V = false
	sp = sp - 0x00000004
	v90 = r6 + 2459
	Mem0[sp:word32] = v90
	ZN = cond(v90)
	C = false
	V = false
	sp = sp - 0x00000004
	v91 = r5 + 1515
	Mem0[sp:word32] = v91
	ZN = cond(v91)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v92 = r5 + 1515
	Mem0[sp:word32] = v92
	ZN = cond(v92)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v93 = Mem0[r5 + 0x0000C664:word32]
	Mem0[sp:word32] = v93
	ZN = cond(v93)
	C = false
	V = false
	sp = sp - 0x00000004
	v94 = r6 + 2515
	Mem0[sp:word32] = v94
	ZN = cond(v94)
	C = false
	V = false
	sp = sp - 0x00000004
	v95 = r5 + 1515
	Mem0[sp:word32] = v95
	ZN = cond(v95)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v96 = r5 + 1515
	Mem0[sp:word32] = v96
	ZN = cond(v96)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v97 = Mem0[r5 + 0x0000C668:word32]
	Mem0[sp:word32] = v97
	ZN = cond(v97)
	C = false
	V = false
	sp = sp - 0x00000004
	v98 = r6 + 2574
	Mem0[sp:word32] = v98
	ZN = cond(v98)
	C = false
	V = false
	sp = sp - 0x00000004
	v99 = r5 + 1515
	Mem0[sp:word32] = v99
	ZN = cond(v99)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v100 = r5 + 1515
	Mem0[sp:word32] = v100
	ZN = cond(v100)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v101 = Mem0[r5 + 0x0000C66C:word32]
	Mem0[sp:word32] = v101
	ZN = cond(v101)
	C = false
	V = false
	sp = sp - 0x00000004
	v102 = r6 + 2637
	Mem0[sp:word32] = v102
	ZN = cond(v102)
	C = false
	V = false
	sp = sp - 0x00000004
	v103 = r5 + 1515
	Mem0[sp:word32] = v103
	ZN = cond(v103)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v104 = r5 + 1515
	Mem0[sp:word32] = v104
	ZN = cond(v104)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v105 = (uint32) Mem0[r5 + 0x0000C670:word16]
	Mem0[sp:uint32] = v105
	ZN = cond(v105)
	C = false
	V = false
	sp = sp - 0x00000004
	v106 = r6 + 2700
	Mem0[sp:word32] = v106
	ZN = cond(v106)
	C = false
	V = false
	sp = sp - 0x00000004
	v107 = r5 + 1515
	Mem0[sp:word32] = v107
	ZN = cond(v107)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v108 = r5 + 1515
	Mem0[sp:word32] = v108
	ZN = cond(v108)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v109 = (uint32) Mem0[r5 + 0x0000C672:word16]
	Mem0[sp:uint32] = v109
	ZN = cond(v109)
	C = false
	V = false
	sp = sp - 0x00000004
	v110 = r6 + 2767
	Mem0[sp:word32] = v110
	ZN = cond(v110)
	C = false
	V = false
	sp = sp - 0x00000004
	v111 = r5 + 1515
	Mem0[sp:word32] = v111
	ZN = cond(v111)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v112 = r5 + 1515
	Mem0[sp:word32] = v112
	ZN = cond(v112)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v113 = (uint32) Mem0[r5 + 0x0000C674:word16]
	Mem0[sp:uint32] = v113
	ZN = cond(v113)
	C = false
	V = false
	sp = sp - 0x00000004
	v114 = r6 + 2829
	Mem0[sp:word32] = v114
	ZN = cond(v114)
	C = false
	V = false
	sp = sp - 0x00000004
	v115 = r5 + 1515
	Mem0[sp:word32] = v115
	ZN = cond(v115)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v116 = r5 + 1515
	Mem0[sp:word32] = v116
	ZN = cond(v116)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r2 = (uint32) Mem0[r5 + 0x0000C676:word16]
	ZN = cond(r2)
	C = false
	V = false
	r2 = r2 + 0x00000001
	CVZN = cond(r2)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	v117 = r6 + 2896
	Mem0[sp:word32] = v117
	ZN = cond(v117)
	C = false
	V = false
	sp = sp - 0x00000004
	v118 = r5 + 1515
	Mem0[sp:word32] = v118
	ZN = cond(v118)
	C = false
	V = false
	call Mem0[r4:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v119 = r5 + 1515
	Mem0[sp:word32] = v119
	ZN = cond(v119)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r3 = (uint32) Mem0[r5 + 0x0000C678:word16]
	ZN = cond(r3)
	C = false
	V = false
	branch (r3 & 0x00000001) == 0x00000000 l00013804
	// succ:  l000137FE l00013804
l000137FE:
	r4 = r8 + 71
	ZN = cond(r4)
	C = false
	V = false
	goto l00013817
	// succ:  l00013817
l00013804:
	branch (r3 & 0x00000001 << 0x00000001) == 0x00000000 l00013810
	// succ:  l00013808 l00013810
l00013808:
	r3 = r8 + 64
	ZN = cond(r3)
	C = false
	V = false
	goto l00013814
	// succ:  l00013814
l00013810:
	r3 = r8 + 57
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00013814
l00013814:
	r4 = r3
	ZN = cond(r4)
	C = false
	V = false
	// succ:  l00013817
l00013817:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	v120 = r6 + 2957
	Mem0[sp:word32] = v120
	ZN = cond(v120)
	C = false
	V = false
	sp = sp - 0x00000004
	v121 = r5 + 1515
	Mem0[sp:word32] = v121
	ZN = cond(v121)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v122 = r5 + 1515
	Mem0[sp:word32] = v122
	ZN = cond(v122)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	r2 = (uint32) Mem0[r5 + 0x0000C67C:word16]
	ZN = cond(r2)
	C = false
	V = false
	v123 = (word16) r2 & ~0x0000
	Mem0[sp + 14:word16] = v123
	ZN = cond(v123)
	C = false
	V = false
	r9 = (uint32) Mem0[sp + 2:word16]
	ZN = cond(r9)
	C = false
	V = false
	CZN = cond(r9 - 0x00000002)
	V = false
	branch Test(EQ,Z) l00013854
	// succ:  l00013851 l00013854
l00013851:
	goto l00013958
	// succ:  l00013958
l00013854:
	r3 = fp + -42
	ZN = cond(r3)
	C = false
	V = false
	r2 = fp + -42
	ZN = cond(r2)
	C = false
	V = false
	r4 = r2 + 0x00000001
	CVZN = cond(r4)
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r2 = fp + -20
	ZN = cond(r2)
	C = false
	V = false
	// succ:  l00013868
l00013868:
	v229 = 0x00
	Mem0[r2:byte] = v229
	Z = true
	N = false
	C = false
	V = false
	r2 = r2 + 0x00000001
	CVZN = cond(r2)
	r0 = r0 + 0x00000001
	CVZN = cond(r0)
	branch r0 <= 0x0000000B l00013868
	// succ:  l00013870 l00013868
l00013870:
	r7 = (uint32) Mem0[sp + 14:word16]
	ZN = cond(r7)
	C = false
	V = false
	branch (r7 & 0x00000001 << 0x00000008) == 0x00000000 l0001387D
	// succ:  l00013878 l0001387D
l00013878:
	v230 = 0x52
	Mem0[fp + -20:byte] = v230
	ZN = cond(v230)
	C = false
	V = false
	// succ:  l0001387D
l0001387D:
	branch (r7 & 0x00000001 << 0x00000007) == 0x00000000 l0001388B
	// succ:  l00013881 l0001388B
l00013881:
	v231 = 0x57
	Mem0[fp + -19:byte] = v231
	ZN = cond(v231)
	C = false
	V = false
	v232 = 0x44
	Mem0[fp + -17:byte] = v232
	ZN = cond(v232)
	C = false
	V = false
	// succ:  l0001388B
l0001388B:
	branch (r7 & 0x00000001 << 0x00000006) == 0x00000000 l00013894
	// succ:  l0001388F l00013894
l0001388F:
	v233 = 0x45
	Mem0[fp + -18:byte] = v233
	ZN = cond(v233)
	C = false
	V = false
	// succ:  l00013894
l00013894:
	branch (r7 & 0x00000001 << 0x00000005) == 0x00000000 l0001389D
	// succ:  l00013898 l0001389D
l00013898:
	v234 = 0x52
	Mem0[fp + -16:byte] = v234
	ZN = cond(v234)
	C = false
	V = false
	// succ:  l0001389D
l0001389D:
	branch (r7 & 0x00000001 << 0x00000004) == 0x00000000 l000138AB
	// succ:  l000138A1 l000138AB
l000138A1:
	v235 = 0x57
	Mem0[fp + -15:byte] = v235
	ZN = cond(v235)
	C = false
	V = false
	v236 = 0x44
	Mem0[fp + -13:byte] = v236
	ZN = cond(v236)
	C = false
	V = false
	// succ:  l000138AB
l000138AB:
	branch (r7 & 0x00000001 << 0x00000003) == 0x00000000 l000138B4
	// succ:  l000138AF l000138B4
l000138AF:
	v237 = 0x45
	Mem0[fp + -14:byte] = v237
	ZN = cond(v237)
	C = false
	V = false
	// succ:  l000138B4
l000138B4:
	branch (r7 & 0x00000001 << 0x00000002) == 0x00000000 l000138BD
	// succ:  l000138B8 l000138BD
l000138B8:
	v238 = 0x52
	Mem0[fp + -12:byte] = v238
	ZN = cond(v238)
	C = false
	V = false
	// succ:  l000138BD
l000138BD:
	branch (r7 & 0x00000001 << 0x00000001) == 0x00000000 l000138CB
	// succ:  l000138C1 l000138CB
l000138C1:
	v239 = 0x57
	Mem0[fp + -11:byte] = v239
	ZN = cond(v239)
	C = false
	V = false
	v240 = 0x44
	Mem0[fp + -9:byte] = v240
	ZN = cond(v240)
	C = false
	V = false
	// succ:  l000138CB
l000138CB:
	branch (r7 & 0x00000001) == 0x00000000 l000138D3
	// succ:  l000138CE l000138D3
l000138CE:
	v241 = 0x45
	Mem0[fp + -10:byte] = v241
	ZN = cond(v241)
	C = false
	V = false
	// succ:  l000138D3
l000138D3:
	v242 = 0x28
	Mem0[r3:byte] = v242
	r3 = r3 + 0x00000001
	ZN = cond(v242)
	C = false
	V = false
	r7 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r2 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	CZN = cond(r7 - 0x00000003)
	V = false
	branch Test(GE,N) l00013920
	// succ:  l000138DF l00013920
l000138DF:
	// succ:  l000138E0
l000138E0:
	r1 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l000138E4
l000138E4:
	ZN = cond(Mem0[fp + -20 + r2:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l000138EF
	// succ:  l000138EA l000138EF
l000138EA:
	v243 = Mem0[fp + -20 + r2:byte]
	Mem0[r3:byte] = v243
	r3 = r3 + 0x00000001
	ZN = cond(v243)
	C = false
	V = false
	// succ:  l000138EF
l000138EF:
	r1 = r1 + 0x00000001
	CVZN = cond(r1)
	r2 = r2 + 0x00000001
	CVZN = cond(r2)
	CZN = cond(r1 - 0x00000004)
	V = false
	branch Test(LT,N) l000138E4
	// succ:  l000138F8 l000138E4
l000138F8:
	v244 = 0x2C
	Mem0[r3:byte] = v244
	r3 = r3 + 0x00000001
	ZN = cond(v244)
	C = false
	V = false
	ZN = cond(r7 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00013919
	// succ:  l000138FF l00013919
l000138FF:
	r1 = r3
	ZN = cond(r1)
	C = false
	V = false
	r3 = r3 + 0x00000001
	CVZN = cond(r3)
	v245 = r4
	r4 = r4 + 0x00000001
	v246 = Mem0[v245:byte]
	Mem0[r1:byte] = v246
	ZN = cond(v246)
	C = false
	V = false
	CZN = cond(Mem0[r1:byte] - 0x2C)
	V = false
	branch Test(EQ,Z) l00013919
	// succ:  l0001390C l00013919
l0001390C:
	r1 = r3
	ZN = cond(r1)
	C = false
	V = false
	r3 = r3 + 0x00000001
	CVZN = cond(r3)
	v247 = r4
	r4 = r4 + 0x00000001
	v248 = Mem0[v247:byte]
	Mem0[r1:byte] = v248
	ZN = cond(v248)
	C = false
	V = false
	CZN = cond(Mem0[r1:byte] - 0x2C)
	V = false
	branch Test(NE,Z) l0001390C
	// succ:  l00013919 l0001390C
l00013919:
	r7 = r7 + 0x00000001
	CVZN = cond(r7)
	CZN = cond(r7 - 0x00000003)
	V = false
	branch Test(LT,N) l000138E0
	// succ:  l00013920 l000138E0
l00013920:
	r2 = r3
	ZN = cond(r2)
	C = false
	V = false
	r3 = r3 - 0x00000001
	CVZN = cond(r3)
	v249 = 0x00
	Mem0[r2:byte] = v249
	Z = true
	N = false
	C = false
	V = false
	v250 = 0x29
	Mem0[r3:byte] = v250
	ZN = cond(v250)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v251 = fp + -42
	Mem0[sp:word32] = v251
	ZN = cond(v251)
	C = false
	V = false
	sp = sp - 0x00000004
	v252 = (uint32) Mem0[sp + 22:word16]
	Mem0[sp:uint32] = v252
	ZN = cond(v252)
	C = false
	V = false
	sp = sp - 0x00000004
	v253 = r6 + 3013
	Mem0[sp:word32] = v253
	ZN = cond(v253)
	C = false
	V = false
	sp = sp - 0x00000004
	v254 = r5 + 1515
	Mem0[sp:word32] = v254
	ZN = cond(v254)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v255 = r5 + 1515
	Mem0[sp:word32] = v255
	ZN = cond(v255)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	goto l00013C9E
	// succ:  l00013C9E
l00013958:
	CZN = cond(r9 - 0x00000001)
	V = false
	branch Test(EQ,Z) l00013960
	// succ:  l0001395D l00013960
l0001395D:
	goto l00013A64
	// succ:  l00013A64
l00013960:
	r2 = (uint32) Mem0[sp + 14:word16]
	ZN = cond(r2)
	C = false
	V = false
	r2 = r2 & ~0xFFFFF3FF
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x00000400)
	V = false
	branch Test(LT,N) l00013990
	// succ:  l00013974 l00013990
l00013974:
	branch Test(EQ,Z) l00013988
	// succ:  l00013976 l00013988
l00013976:
	CZN = cond(r2 - 0x00000800)
	V = false
	branch Test(NE,Z) l00013990
	// succ:  l0001397F l00013990
l0001397F:
	v197 = 0x64
	Mem0[fp + -42:byte] = v197
	ZN = cond(v197)
	C = false
	V = false
	goto l00013994
	// succ:  l00013994
l00013988:
	v228 = 0x2D
	Mem0[fp + -42:byte] = v228
	ZN = cond(v228)
	C = false
	V = false
	goto l00013994
	// succ:  l00013994
l00013990:
	v227 = 0x3F
	Mem0[fp + -42:byte] = v227
	ZN = cond(v227)
	C = false
	V = false
	// succ:  l00013994
l00013994:
	r7 = (uint32) Mem0[sp + 14:word16]
	ZN = cond(r7)
	C = false
	V = false
	branch (r7 & 0x00000001 << 0x00000007) == 0x00000000 l000139A4
	// succ:  l0001399C l000139A4
l0001399C:
	v198 = 0x68
	r3 = DPB(r3, v198, 0)
	ZN = cond(v198)
	C = false
	V = false
	goto l000139A7
	// succ:  l000139A7
l000139A4:
	v226 = 0x2D
	r3 = DPB(r3, v226, 0)
	ZN = cond(v226)
	C = false
	V = false
	// succ:  l000139A7
l000139A7:
	v199 = (byte) r3
	Mem0[fp + -41:byte] = v199
	ZN = cond(v199)
	C = false
	V = false
	branch (r7 & 0x00000001 << 0x00000006) == 0x00000000 l000139B8
	// succ:  l000139AF l000139B8
l000139AF:
	v200 = 0x73
	r4 = DPB(r4, v200, 0)
	ZN = cond(v200)
	C = false
	V = false
	goto l000139BB
	// succ:  l000139BB
l000139B8:
	v225 = 0x2D
	r4 = DPB(r4, v225, 0)
	ZN = cond(v225)
	C = false
	V = false
	// succ:  l000139BB
l000139BB:
	v201 = (byte) r4
	Mem0[fp + -40:byte] = v201
	ZN = cond(v201)
	C = false
	V = false
	branch (r7 & 0x00000001 << 0x00000005) == 0x00000000 l000139CC
	// succ:  l000139C3 l000139CC
l000139C3:
	v202 = 0x70
	r3 = DPB(r3, v202, 0)
	ZN = cond(v202)
	C = false
	V = false
	goto l000139CF
	// succ:  l000139CF
l000139CC:
	v224 = 0x2D
	r3 = DPB(r3, v224, 0)
	ZN = cond(v224)
	C = false
	V = false
	// succ:  l000139CF
l000139CF:
	v203 = (byte) r3
	Mem0[fp + -39:byte] = v203
	ZN = cond(v203)
	C = false
	V = false
	branch (r7 & 0x00000001 << 0x00000004) == 0x00000000 l000139E0
	// succ:  l000139D7 l000139E0
l000139D7:
	v204 = 0x61
	r4 = DPB(r4, v204, 0)
	ZN = cond(v204)
	C = false
	V = false
	goto l000139E3
	// succ:  l000139E3
l000139E0:
	v223 = 0x2D
	r4 = DPB(r4, v223, 0)
	ZN = cond(v223)
	C = false
	V = false
	// succ:  l000139E3
l000139E3:
	v205 = (byte) r4
	Mem0[fp + -38:byte] = v205
	ZN = cond(v205)
	C = false
	V = false
	branch (r7 & 0x00000001 << 0x00000003) == 0x00000000 l000139F4
	// succ:  l000139EB l000139F4
l000139EB:
	v206 = 0x72
	r3 = DPB(r3, v206, 0)
	ZN = cond(v206)
	C = false
	V = false
	goto l000139F7
	// succ:  l000139F7
l000139F4:
	v222 = 0x2D
	r3 = DPB(r3, v222, 0)
	ZN = cond(v222)
	C = false
	V = false
	// succ:  l000139F7
l000139F7:
	v207 = (byte) r3
	Mem0[fp + -37:byte] = v207
	ZN = cond(v207)
	C = false
	V = false
	branch (r7 & 0x00000001 << 0x00000002) == 0x00000000 l00013A08
	// succ:  l000139FF l00013A08
l000139FF:
	v208 = 0x77
	r4 = DPB(r4, v208, 0)
	ZN = cond(v208)
	C = false
	V = false
	goto l00013A0B
	// succ:  l00013A0B
l00013A08:
	v221 = 0x2D
	r4 = DPB(r4, v221, 0)
	ZN = cond(v221)
	C = false
	V = false
	// succ:  l00013A0B
l00013A0B:
	v209 = (byte) r4
	Mem0[fp + -36:byte] = v209
	ZN = cond(v209)
	C = false
	V = false
	branch (r7 & 0x00000001 << 0x00000001) == 0x00000000 l00013A1C
	// succ:  l00013A13 l00013A1C
l00013A13:
	v210 = 0x65
	r3 = DPB(r3, v210, 0)
	ZN = cond(v210)
	C = false
	V = false
	goto l00013A1F
	// succ:  l00013A1F
l00013A1C:
	v220 = 0x2D
	r3 = DPB(r3, v220, 0)
	ZN = cond(v220)
	C = false
	V = false
	// succ:  l00013A1F
l00013A1F:
	v211 = (byte) r3
	Mem0[fp + -35:byte] = v211
	ZN = cond(v211)
	C = false
	V = false
	branch (r7 & 0x00000001) == 0x00000000 l00013A2C
	// succ:  l00013A26 l00013A2C
l00013A26:
	v212 = 0x64
	r4 = DPB(r4, v212, 0)
	ZN = cond(v212)
	C = false
	V = false
	goto l00013A2F
	// succ:  l00013A2F
l00013A2C:
	v219 = 0x2D
	r4 = DPB(r4, v219, 0)
	ZN = cond(v219)
	C = false
	V = false
	// succ:  l00013A2F
l00013A2F:
	v213 = (byte) r4
	Mem0[fp + -34:byte] = v213
	ZN = cond(v213)
	C = false
	V = false
	v214 = 0x00
	Mem0[fp + -33:byte] = v214
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v215 = fp + -42
	Mem0[sp:word32] = v215
	ZN = cond(v215)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	sp = sp - 0x00000004
	v216 = r6 + 3067
	Mem0[sp:word32] = v216
	ZN = cond(v216)
	C = false
	V = false
	sp = sp - 0x00000004
	v217 = r5 + 1515
	Mem0[sp:word32] = v217
	ZN = cond(v217)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v218 = r5 + 1515
	Mem0[sp:word32] = v218
	ZN = cond(v218)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	goto l00013C9E
	// succ:  l00013C9E
l00013A64:
	ZN = cond(r9 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00013A6B
	// succ:  l00013A68 l00013A6B
l00013A68:
	goto l00013C70
	// succ:  l00013C70
l00013A6B:
	CZN = cond(r9 - 0x00000006)
	V = false
	branch Test(NE,Z) l00013A73
	// succ:  l00013A70 l00013A73
l00013A70:
	goto l00013C70
	// succ:  l00013C70
l00013A73:
	CZN = cond(r9 - 0x0000000B)
	V = false
	branch Test(NE,Z) l00013A7B
	// succ:  l00013A78 l00013A7B
l00013A78:
	goto l00013C70
	// succ:  l00013C70
l00013A7B:
	CZN = cond(r9 - 0x0000000E)
	V = false
	branch Test(NE,Z) l00013A83
	// succ:  l00013A80 l00013A83
l00013A80:
	goto l00013C70
	// succ:  l00013C70
l00013A83:
	CZN = cond(r9 - 0x0000000D)
	V = false
	branch Test(NE,Z) l00013A8B
	// succ:  l00013A88 l00013A8B
l00013A88:
	goto l00013C70
	// succ:  l00013C70
l00013A8B:
	CZN = cond(r9 - 0x00000004)
	V = false
	branch Test(NE,Z) l00013A93
	// succ:  l00013A90 l00013A93
l00013A90:
	goto l00013C70
	// succ:  l00013C70
l00013A93:
	CZN = cond(r9 - 0x0000000F)
	V = false
	branch Test(NE,Z) l00013A9B
	// succ:  l00013A98 l00013A9B
l00013A98:
	goto l00013C70
	// succ:  l00013C70
l00013A9B:
	r2 = (uint32) Mem0[sp + 14:word16]
	ZN = cond(r2)
	C = false
	V = false
	r2 = r2 & ~0xFFFF0FFF
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x00001000)
	V = false
	branch Test(LT,N) l00013B2C
	// succ:  l00013AAF l00013B2C
l00013AAF:
	branch Test(EQ,Z) l00013B1C
	// succ:  l00013AB1 l00013B1C
l00013AB1:
	CZN = cond(r2 - 0x00002000)
	V = false
	branch Test(LT,N) l00013B2C
	// succ:  l00013ABA l00013B2C
l00013ABA:
	branch Test(EQ,Z) l00013B14
	// succ:  l00013ABC l00013B14
l00013ABC:
	CZN = cond(r2 - 0x00004000)
	V = false
	branch Test(LT,N) l00013B2C
	// succ:  l00013AC5 l00013B2C
l00013AC5:
	branch Test(EQ,Z) l00013AF4
	// succ:  l00013AC7 l00013AF4
l00013AC7:
	CZN = cond(r2 - 0x00006000)
	V = false
	branch Test(LT,N) l00013B2C
	// succ:  l00013AD0 l00013B2C
l00013AD0:
	branch Test(EQ,Z) l00013B0C
	// succ:  l00013AD2 l00013B0C
l00013AD2:
	CZN = cond(r2 - 0x00008000)
	V = false
	branch Test(LT,N) l00013B2C
	// succ:  l00013ADB l00013B2C
l00013ADB:
	branch Test(EQ,Z) l00013AFC
	// succ:  l00013ADD l00013AFC
l00013ADD:
	CZN = cond(r2 - 0x0000A000)
	V = false
	branch Test(LT,N) l00013B2C
	// succ:  l00013AE6 l00013B2C
l00013AE6:
	branch Test(EQ,Z) l00013B04
	// succ:  l00013AE8 l00013B04
l00013AE8:
	CZN = cond(r2 - 0x0000C000)
	V = false
	branch Test(EQ,Z) l00013B24
	// succ:  l00013AF1 l00013B24
l00013AF1:
	goto l00013B2C
	// succ:  l00013B2C
l00013AF4:
	v194 = 0x64
	Mem0[fp + -42:byte] = v194
	ZN = cond(v194)
	C = false
	V = false
	goto l00013B30
	// succ:  l00013B30
l00013AFC:
	v192 = 0x2D
	Mem0[fp + -42:byte] = v192
	ZN = cond(v192)
	C = false
	V = false
	goto l00013B30
	// succ:  l00013B30
l00013B04:
	v191 = 0x6C
	Mem0[fp + -42:byte] = v191
	ZN = cond(v191)
	C = false
	V = false
	goto l00013B30
	// succ:  l00013B30
l00013B0C:
	v193 = 0x62
	Mem0[fp + -42:byte] = v193
	ZN = cond(v193)
	C = false
	V = false
	goto l00013B30
	// succ:  l00013B30
l00013B14:
	v195 = 0x63
	Mem0[fp + -42:byte] = v195
	ZN = cond(v195)
	C = false
	V = false
	goto l00013B30
	// succ:  l00013B30
l00013B1C:
	v196 = 0x70
	Mem0[fp + -42:byte] = v196
	ZN = cond(v196)
	C = false
	V = false
	goto l00013B30
	// succ:  l00013B30
l00013B24:
	v190 = 0x73
	Mem0[fp + -42:byte] = v190
	ZN = cond(v190)
	C = false
	V = false
	goto l00013B30
	// succ:  l00013B30
l00013B2C:
	v147 = 0x3F
	Mem0[fp + -42:byte] = v147
	ZN = cond(v147)
	C = false
	V = false
	// succ:  l00013B30
l00013B30:
	r7 = (uint32) Mem0[sp + 14:word16]
	ZN = cond(r7)
	C = false
	V = false
	branch (r7 & 0x00000001 << 0x00000008) == 0x00000000 l00013B40
	// succ:  l00013B38 l00013B40
l00013B38:
	v148 = 0x72
	r3 = DPB(r3, v148, 0)
	ZN = cond(v148)
	C = false
	V = false
	goto l00013B43
	// succ:  l00013B43
l00013B40:
	v189 = 0x2D
	r3 = DPB(r3, v189, 0)
	ZN = cond(v189)
	C = false
	V = false
	// succ:  l00013B43
l00013B43:
	v149 = (byte) r3
	Mem0[fp + -41:byte] = v149
	ZN = cond(v149)
	C = false
	V = false
	branch (r7 & 0x00000001 << 0x00000005) == 0x00000000 l00013B54
	// succ:  l00013B4B l00013B54
l00013B4B:
	v150 = 0x72
	r4 = DPB(r4, v150, 0)
	ZN = cond(v150)
	C = false
	V = false
	goto l00013B57
	// succ:  l00013B57
l00013B54:
	v188 = 0x2D
	r4 = DPB(r4, v188, 0)
	ZN = cond(v188)
	C = false
	V = false
	// succ:  l00013B57
l00013B57:
	v151 = (byte) r4
	Mem0[fp + -38:byte] = v151
	ZN = cond(v151)
	C = false
	V = false
	branch (r7 & 0x00000001 << 0x00000002) == 0x00000000 l00013B68
	// succ:  l00013B5F l00013B68
l00013B5F:
	v152 = 0x72
	r3 = DPB(r3, v152, 0)
	ZN = cond(v152)
	C = false
	V = false
	goto l00013B6B
	// succ:  l00013B6B
l00013B68:
	v187 = 0x2D
	r3 = DPB(r3, v187, 0)
	ZN = cond(v187)
	C = false
	V = false
	// succ:  l00013B6B
l00013B6B:
	v153 = (byte) r3
	Mem0[fp + -35:byte] = v153
	ZN = cond(v153)
	C = false
	V = false
	branch (r7 & 0x00000001 << 0x00000007) == 0x00000000 l00013B7C
	// succ:  l00013B73 l00013B7C
l00013B73:
	v154 = 0x77
	r4 = DPB(r4, v154, 0)
	ZN = cond(v154)
	C = false
	V = false
	goto l00013B7F
	// succ:  l00013B7F
l00013B7C:
	v186 = 0x2D
	r4 = DPB(r4, v186, 0)
	ZN = cond(v186)
	C = false
	V = false
	// succ:  l00013B7F
l00013B7F:
	v155 = (byte) r4
	Mem0[fp + -40:byte] = v155
	ZN = cond(v155)
	C = false
	V = false
	branch (r7 & 0x00000001 << 0x00000004) == 0x00000000 l00013B90
	// succ:  l00013B87 l00013B90
l00013B87:
	v156 = 0x77
	r3 = DPB(r3, v156, 0)
	ZN = cond(v156)
	C = false
	V = false
	goto l00013B93
	// succ:  l00013B93
l00013B90:
	v185 = 0x2D
	r3 = DPB(r3, v185, 0)
	ZN = cond(v185)
	C = false
	V = false
	// succ:  l00013B93
l00013B93:
	v157 = (byte) r3
	Mem0[fp + -37:byte] = v157
	ZN = cond(v157)
	C = false
	V = false
	branch (r7 & 0x00000001 << 0x00000001) == 0x00000000 l00013BA4
	// succ:  l00013B9B l00013BA4
l00013B9B:
	v158 = 0x77
	r4 = DPB(r4, v158, 0)
	ZN = cond(v158)
	C = false
	V = false
	goto l00013BA7
	// succ:  l00013BA7
l00013BA4:
	v184 = 0x2D
	r4 = DPB(r4, v184, 0)
	ZN = cond(v184)
	C = false
	V = false
	// succ:  l00013BA7
l00013BA7:
	v159 = (byte) r4
	Mem0[fp + -34:byte] = v159
	ZN = cond(v159)
	C = false
	V = false
	branch (r7 & 0x00000001 << 0x00000006) == 0x00000000 l00013BC8
	// succ:  l00013BAF l00013BC8
l00013BAF:
	branch (r7 & 0x00000001 << 0x0000000B) == 0x00000000 l00013BBC
	// succ:  l00013BB3 l00013BBC
l00013BB3:
	v160 = 0x73
	r2 = DPB(r2, v160, 0)
	ZN = cond(v160)
	C = false
	V = false
	goto l00013BC0
	// succ:  l00013BC0
l00013BBC:
	v180 = 0x78
	r2 = DPB(r2, v180, 0)
	ZN = cond(v180)
	C = false
	V = false
	// succ:  l00013BC0
l00013BC0:
	v161 = (byte) r2
	Mem0[fp + -39:byte] = v161
	ZN = cond(v161)
	C = false
	V = false
	goto l00013BDB
	// succ:  l00013BDB
l00013BC8:
	branch (r7 & 0x00000001 << 0x0000000B) == 0x00000000 l00013BD4
	// succ:  l00013BCC l00013BD4
l00013BCC:
	v181 = 0x53
	r2 = DPB(r2, v181, 0)
	ZN = cond(v181)
	C = false
	V = false
	goto l00013BD7
	// succ:  l00013BD7
l00013BD4:
	v183 = 0x2D
	r2 = DPB(r2, v183, 0)
	ZN = cond(v183)
	C = false
	V = false
	// succ:  l00013BD7
l00013BD7:
	v182 = (byte) r2
	Mem0[fp + -39:byte] = v182
	ZN = cond(v182)
	C = false
	V = false
	// succ:  l00013BDB
l00013BDB:
	r3 = (uint32) Mem0[sp + 14:word16]
	ZN = cond(r3)
	C = false
	V = false
	branch (r3 & 0x00000001 << 0x00000003) == 0x00000000 l00013BFC
	// succ:  l00013BE3 l00013BFC
l00013BE3:
	branch (r3 & 0x00000001 << 0x0000000A) == 0x00000000 l00013BF0
	// succ:  l00013BE7 l00013BF0
l00013BE7:
	v162 = 0x73
	r2 = DPB(r2, v162, 0)
	ZN = cond(v162)
	C = false
	V = false
	goto l00013BF4
	// succ:  l00013BF4
l00013BF0:
	v176 = 0x78
	r2 = DPB(r2, v176, 0)
	ZN = cond(v176)
	C = false
	V = false
	// succ:  l00013BF4
l00013BF4:
	v163 = (byte) r2
	Mem0[fp + -36:byte] = v163
	ZN = cond(v163)
	C = false
	V = false
	goto l00013C0F
	// succ:  l00013C0F
l00013BFC:
	branch (r3 & 0x00000001 << 0x0000000A) == 0x00000000 l00013C08
	// succ:  l00013C00 l00013C08
l00013C00:
	v177 = 0x6C
	r2 = DPB(r2, v177, 0)
	ZN = cond(v177)
	C = false
	V = false
	goto l00013C0B
	// succ:  l00013C0B
l00013C08:
	v179 = 0x2D
	r2 = DPB(r2, v179, 0)
	ZN = cond(v179)
	C = false
	V = false
	// succ:  l00013C0B
l00013C0B:
	v178 = (byte) r2
	Mem0[fp + -36:byte] = v178
	ZN = cond(v178)
	C = false
	V = false
	// succ:  l00013C0F
l00013C0F:
	r3 = (uint32) Mem0[sp + 14:word16]
	ZN = cond(r3)
	C = false
	V = false
	branch (r3 & 0x00000001) == 0x00000000 l00013C2C
	// succ:  l00013C16 l00013C2C
l00013C16:
	branch (r3 & 0x00000001 << 0x00000009) == 0x00000000 l00013C20
	// succ:  l00013C1A l00013C20
l00013C1A:
	v164 = 0x74
	r2 = DPB(r2, v164, 0)
	ZN = cond(v164)
	C = false
	V = false
	goto l00013C24
	// succ:  l00013C24
l00013C20:
	v172 = 0x78
	r2 = DPB(r2, v172, 0)
	ZN = cond(v172)
	C = false
	V = false
	// succ:  l00013C24
l00013C24:
	v165 = (byte) r2
	Mem0[fp + -33:byte] = v165
	ZN = cond(v165)
	C = false
	V = false
	goto l00013C3F
	// succ:  l00013C3F
l00013C2C:
	branch (r3 & 0x00000001 << 0x00000009) == 0x00000000 l00013C38
	// succ:  l00013C30 l00013C38
l00013C30:
	v173 = 0x54
	r2 = DPB(r2, v173, 0)
	ZN = cond(v173)
	C = false
	V = false
	goto l00013C3B
	// succ:  l00013C3B
l00013C38:
	v175 = 0x2D
	r2 = DPB(r2, v175, 0)
	ZN = cond(v175)
	C = false
	V = false
	// succ:  l00013C3B
l00013C3B:
	v174 = (byte) r2
	Mem0[fp + -33:byte] = v174
	ZN = cond(v174)
	C = false
	V = false
	// succ:  l00013C3F
l00013C3F:
	v166 = 0x00
	Mem0[fp + -32:byte] = v166
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v167 = fp + -42
	Mem0[sp:word32] = v167
	ZN = cond(v167)
	C = false
	V = false
	sp = sp - 0x00000004
	v168 = (uint32) Mem0[sp + 22:word16]
	Mem0[sp:uint32] = v168
	ZN = cond(v168)
	C = false
	V = false
	sp = sp - 0x00000004
	v169 = r6 + 3121
	Mem0[sp:word32] = v169
	ZN = cond(v169)
	C = false
	V = false
	sp = sp - 0x00000004
	v170 = r5 + 1515
	Mem0[sp:word32] = v170
	ZN = cond(v170)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v171 = r5 + 1515
	Mem0[sp:word32] = v171
	ZN = cond(v171)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	goto l00013C9E
	// succ:  l00013C9E
l00013C70:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r2 = (uint32) SLICE(Mem0[r5 + 0x0000C67A:word32], ui24, 8)
	ZN = cond(r2)
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	v124 = r6 + 3175
	Mem0[sp:word32] = v124
	ZN = cond(v124)
	C = false
	V = false
	sp = sp - 0x00000004
	v125 = r5 + 1515
	Mem0[sp:word32] = v125
	ZN = cond(v125)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v126 = r5 + 1515
	Mem0[sp:word32] = v126
	ZN = cond(v126)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	// succ:  l00013C9E
l00013C9E:
	v127 = Mem0[r5 + 0x0000C67A:word16] & ~0xFF00
	Mem0[sp + 14:word16] = v127
	ZN = cond(v127)
	C = false
	V = false
	r3 = (uint32) Mem0[sp + 14:word16]
	ZN = cond(r3)
	C = false
	V = false
	branch Test(NE,Z) l00013CD8
	// succ:  l00013CAF l00013CD8
l00013CAF:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v128 = r6 + 3238
	Mem0[sp:word32] = v128
	ZN = cond(v128)
	C = false
	V = false
	sp = sp - 0x00000004
	v129 = r5 + 1515
	Mem0[sp:word32] = v129
	ZN = cond(v129)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v130 = r5 + 1515
	Mem0[sp:word32] = v130
	ZN = cond(v130)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	goto l00013D92
	// succ:  l00013D92
l00013CD8:
	CZN = cond(r3 - 0x00000001)
	V = false
	branch Test(NE,Z) l00013D08
	// succ:  l00013CDD l00013D08
l00013CDD:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v135 = r6 + 3298
	Mem0[sp:word32] = v135
	ZN = cond(v135)
	C = false
	V = false
	sp = sp - 0x00000004
	v136 = r5 + 1515
	Mem0[sp:word32] = v136
	ZN = cond(v136)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v137 = r5 + 1515
	Mem0[sp:word32] = v137
	ZN = cond(v137)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	goto l00013D92
	// succ:  l00013D92
l00013D08:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	branch (r3 & 0x00000001 << 0x00000005) == 0x00000000 l00013D14
	// succ:  l00013D0E l00013D14
l00013D0E:
	r10 = r8 + 101
	ZN = cond(r10)
	C = false
	V = false
	goto l00013D17
	// succ:  l00013D17
l00013D14:
	r10 = r6
	ZN = cond(r10)
	C = false
	V = false
	// succ:  l00013D17
l00013D17:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r10
	ZN = cond(r10)
	C = false
	V = false
	branch (r3 & 0x00000001 << 0x00000004) == 0x00000000 l00013D24
	// succ:  l00013D1D l00013D24
l00013D1D:
	r9 = r8 + 96
	ZN = cond(r9)
	C = false
	V = false
	goto l00013D27
	// succ:  l00013D27
l00013D24:
	r9 = r6
	ZN = cond(r9)
	C = false
	V = false
	// succ:  l00013D27
l00013D27:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r9
	ZN = cond(r9)
	C = false
	V = false
	branch (r3 & 0x00000001 << 0x00000003) == 0x00000000 l00013D34
	// succ:  l00013D2D l00013D34
l00013D2D:
	r7 = r8 + 91
	ZN = cond(r7)
	C = false
	V = false
	goto l00013D37
	// succ:  l00013D37
l00013D34:
	r7 = r6
	ZN = cond(r7)
	C = false
	V = false
	// succ:  l00013D37
l00013D37:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	branch (r3 & 0x00000001 << 0x00000002) == 0x00000000 l00013D44
	// succ:  l00013D3D l00013D44
l00013D3D:
	r4 = r8 + 86
	ZN = cond(r4)
	C = false
	V = false
	goto l00013D47
	// succ:  l00013D47
l00013D44:
	r4 = r6
	ZN = cond(r4)
	C = false
	V = false
	// succ:  l00013D47
l00013D47:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	branch (r3 & 0x00000001 << 0x00000001) == 0x00000000 l00013D54
	// succ:  l00013D4D l00013D54
l00013D4D:
	v138 = r8 + 81
	Mem0[fp + -62:word32] = v138
	ZN = cond(v138)
	C = false
	V = false
	goto l00013D58
	// succ:  l00013D58
l00013D54:
	v146 = r6
	Mem0[fp + -62:word32] = v146
	ZN = cond(v146)
	C = false
	V = false
	// succ:  l00013D58
l00013D58:
	sp = sp - 0x00000004
	v139 = Mem0[fp + -62:word32]
	Mem0[sp:word32] = v139
	ZN = cond(v139)
	C = false
	V = false
	branch (r3 & 0x00000001) == 0x00000000 l00013D68
	// succ:  l00013D5E l00013D68
l00013D5E:
	v140 = r8 + 76
	Mem0[fp + -66:word32] = v140
	ZN = cond(v140)
	C = false
	V = false
	goto l00013D6C
	// succ:  l00013D6C
l00013D68:
	v145 = r6
	Mem0[fp + -66:word32] = v145
	ZN = cond(v145)
	C = false
	V = false
	// succ:  l00013D6C
l00013D6C:
	sp = sp - 0x00000004
	v141 = Mem0[fp + -66:word32]
	Mem0[sp:word32] = v141
	ZN = cond(v141)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v142 = r6 + 3363
	Mem0[sp:word32] = v142
	ZN = cond(v142)
	C = false
	V = false
	sp = sp - 0x00000004
	v143 = r5 + 1515
	Mem0[sp:word32] = v143
	ZN = cond(v143)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v144 = r5 + 1515
	Mem0[sp:word32] = v144
	ZN = cond(v144)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	// succ:  l00013D92
l00013D92:
	r2 = (uint32) Mem0[r5 + 0x0000C672:word16]
	ZN = cond(r2)
	C = false
	V = false
	branch Test(NE,Z) l00013D9E
	// succ:  l00013D9B l00013D9E
l00013D9B:
	// succ:  l00013D9B_thunk_fn00014355
l00013D9B_thunk_fn00014355:
	call fn00014355 (retsize: 0;)
	return
	// succ:  fn000132B7_exit
l00013D9E:
	r7 = Mem0[r5 + 0x0000C627:word32]
	ZN = cond(r7)
	C = false
	V = false
	v131 = Mem0[r5 + 0x0000C672:word16]
	Mem0[sp + 42:word16] = v131
	ZN = cond(v131)
	C = false
	V = false
	CZN = cond(Mem0[sp + 8:word32] - 0x00000001)
	V = false
	branch Test(LE,ZN) l00013DB8
	// succ:  l00013DB3 l00013DB8
l00013DB3:
	r0 = Mem0[sp + 4:word32]
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000132B7_exit
l00013DB8:
	ZN = cond(Mem0[r5 + 0x0000C627:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00013DC4
	// succ:  l00013DC0 l00013DC4
l00013DC0:
	r0 = 0x00000002
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000132B7_exit
l00013DC4:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v132 = r6 + 3560
	Mem0[sp:word32] = v132
	ZN = cond(v132)
	C = false
	V = false
	sp = sp - 0x00000004
	v133 = r5 + 1515
	Mem0[sp:word32] = v133
	ZN = cond(v133)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v134 = r5 + 1515
	Mem0[sp:word32] = v134
	ZN = cond(v134)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	r2 = (uint32) Mem0[sp + 42:word16]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x00000004)
	V = false
	branch Test(UGE,C) l00013DF3
	// succ:  l00013DF0 l00013DF3
l00013DF0:
	// succ:  l00013DF0_thunk_fn00014355
l00013DF0_thunk_fn00014355:
	call fn00014355 (retsize: 0;)
	return
	// succ:  fn000132B7_exit
l00013DF3:
	ZN = cond(0x0000E258)
	C = false
	V = false
	ZN = cond(0x000192D0)
	C = false
	V = false
	ZN = cond(0x0000E274)
	C = false
	V = false
	ZN = cond(0x000192D8)
	C = false
	V = false
	ZN = cond(0x000192BC)
	C = false
	V = false
	ZN = cond(0x000192C4)
	C = false
	V = false
	// succ:  l00013E1B_thunk_fn00014355
l00013E1B_thunk_fn00014355:
	call fn00014355 (retsize: 0;)
	return
	// succ:  fn000132B7_exit
fn000132B7_exit:


// fn00014353
// Return size: 0
define fn00014353
fn00014353_entry:
	// succ:  l00014353
l00014353:
	sp = fp
	r4 = r4 + 0x00000001
	CVZN = cond(r4)
	// succ:  l00014353_thunk_fn00014355
l00014353_thunk_fn00014355:
	call fn00014355 (retsize: 0;)
	return
	// succ:  fn00014353_exit
fn00014353_exit:


// fn00014355
// Return size: 0
define fn00014355
fn00014355_entry:
	goto l00014355
	// succ:  l00014355
l00013E24:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	call Mem0[Mem0[sp + 36:word32]:word32] + 2 (retsize: 4;)
	v32 = (word16) r0
	Mem0[sp + 18:word16] = v32
	ZN = cond(v32)
	C = false
	V = false
	sp = sp - 0x00000004
	v33 = r7 + 2
	Mem0[sp:word32] = v33
	ZN = cond(v33)
	C = false
	V = false
	call Mem0[Mem0[sp + 36:word32]:word32] + 2 (retsize: 4;)
	v34 = (word16) r0
	Mem0[sp + 40:word16] = v34
	ZN = cond(v34)
	C = false
	V = false
	r7 = r7 + 0x00000004
	CVZN = cond(r7)
	r0 = (uint32) Mem0[sp + 42:word16]
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 - 0x00000004
	CVZN = cond(r0)
	v35 = (int16) r0
	Mem0[sp + 42:int16] = v35
	VZN = cond(v35)
	C = false
	CZN = cond(Mem0[sp + 40:word16] - Mem0[sp + 42:word16])
	V = false
	branch Test(ULE,CZ) l00013E81
	// succ:  l00013E4E l00013E81
l00013E4E:
	sp = sp - 0x00000004
	v37 = (uint32) 0x0421
	Mem0[sp:uint32] = v37
	ZN = cond(v37)
	C = false
	V = false
	sp = sp - 0x00000004
	v38 = (uint32) Mem0[sp + 46:word16]
	Mem0[sp:uint32] = v38
	ZN = cond(v38)
	C = false
	V = false
	sp = sp - 0x00000004
	v39 = (uint32) Mem0[sp + 48:word16]
	Mem0[sp:uint32] = v39
	ZN = cond(v39)
	C = false
	V = false
	sp = sp - 0x00000004
	v40 = (uint32) Mem0[sp + 30:word16]
	Mem0[sp:uint32] = v40
	ZN = cond(v40)
	C = false
	V = false
	sp = sp - 0x00000004
	v41 = r6 + 3431
	Mem0[sp:word32] = v41
	ZN = cond(v41)
	C = false
	V = false
	sp = sp - 0x00000004
	v42 = r5 + 1515
	Mem0[sp:word32] = v42
	ZN = cond(v42)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v44 = r5 + 1515
	Mem0[sp:word32] = v44
	ZN = cond(v44)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	v45 = Mem0[sp + 42:word16]
	Mem0[sp + 40:word16] = v45
	ZN = cond(v45)
	C = false
	V = false
	// succ:  l00013E81
l00013E81:
	r2 = (uint32) Mem0[sp + 18:word16]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x00000007)
	V = false
	branch Test(GE,N) l00013E8D
	// succ:  l00013E8A l00013E8D
l00013E8A:
	goto l00014080
	// succ:  l00014080
l00013E8D:
	r0 = r2
	ZN = cond(r0)
	C = false
	V = false
	v135 = r0 - 0x00000007
	branch v135 > 0x00000006 l00013EA0
	// succ:  l00013E90_1 l00013EA0
l00013E90_1:
	call 0x00013E94 + v135 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn00014355_exit
l00013EA0:
l00014080:
	r3 = r6 + 3904
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v47 = (uint32) Mem0[sp + 44:word16]
	Mem0[sp:uint32] = v47
	ZN = cond(v47)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	r4 = (uint32) Mem0[sp + 30:word16]
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	v48 = r6 + 3607
	Mem0[sp:word32] = v48
	ZN = cond(v48)
	C = false
	V = false
	sp = sp - 0x00000004
	v49 = r5 + 1515
	Mem0[sp:word32] = v49
	ZN = cond(v49)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v50 = r5 + 1515
	Mem0[sp:word32] = v50
	ZN = cond(v50)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	r2 = r4
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x00000009)
	V = false
	branch Test(GE,N) l000140BB
	// succ:  l000140B8 l000140BB
l000140B8:
	goto l000145DC
	// succ:  l000145DC
l000140BB:
	branch Test(NE,Z) l000140C0
	// succ:  l000140BD l000140C0
l000140BD:
	goto l00014154
	// succ:  l00014154
l000140C0:
	CZN = cond(r2 - 0x00002605)
	V = false
	branch Test(GE,N) l000140CC
	// succ:  l000140C9 l000140CC
l000140C9:
	goto l000145DC
	// succ:  l000145DC
l000140CC:
	branch Test(NE,Z) l000140D1
	// succ:  l000140CE l000140D1
l000140CE:
	goto l00014404
	// succ:  l00014404
l000140D1:
	CZN = cond(r2 - 0x00004453)
	V = false
	branch Test(GE,N) l000140DD
	// succ:  l000140DA l000140DD
l000140DA:
	goto l000145DC
	// succ:  l000145DC
l000140DD:
	branch Test(NE,Z) l000140E2
	// succ:  l000140DF l000140E2
l000140DF:
	goto l000141A0
	// succ:  l000141A0
l000140E2:
	CZN = cond(r2 - 0x00004B46)
	V = false
	branch Test(GE,N) l000140EE
	// succ:  l000140EB l000140EE
l000140EB:
	goto l000145DC
	// succ:  l000145DC
l000140EE:
	branch Test(NE,Z) l000140F3
	// succ:  l000140F0 l000140F3
l000140F0:
	goto l00014588
	// succ:  l00014588
l000140F3:
	CZN = cond(r2 - 0x00004C41)
	V = false
	branch Test(GE,N) l000140FF
	// succ:  l000140FC l000140FF
l000140FC:
	goto l000145DC
	// succ:  l000145DC
l000140FF:
	branch Test(EQ,Z) l00014154
	// succ:  l00014101 l00014154
l00014101:
	CZN = cond(r2 - 0x00004D49)
	V = false
	branch Test(GE,N) l0001410D
	// succ:  l0001410A l0001410D
l0001410A:
	goto l000145DC
	// succ:  l000145DC
l0001410D:
	branch Test(NE,Z) l00014112
	// succ:  l0001410F l00014112
l0001410F:
	goto l000141DC
	// succ:  l000141DC
l00014112:
	CZN = cond(r2 - 0x00005356)
	V = false
	branch Test(GE,N) l0001411E
	// succ:  l0001411B l0001411E
l0001411B:
	goto l000145DC
	// succ:  l000145DC
l0001411E:
	branch Test(NE,Z) l00014123
	// succ:  l00014120 l00014123
l00014120:
	goto l00014544
	// succ:  l00014544
l00014123:
	CZN = cond(r2 - 0x00005455)
	V = false
	branch Test(GE,N) l0001412F
	// succ:  l0001412C l0001412F
l0001412C:
	goto l000145DC
	// succ:  l000145DC
l0001412F:
	branch Test(NE,Z) l00014134
	// succ:  l00014131 l00014134
l00014131:
	goto l0001432C
	// succ:  l0001432C
l00014134:
	CZN = cond(r2 - 0x00006542)
	V = false
	branch Test(GE,N) l00014140
	// succ:  l0001413D l00014140
l0001413D:
	goto l000145DC
	// succ:  l000145DC
l00014140:
	branch Test(NE,Z) l00014145
	// succ:  l00014142 l00014145
l00014142:
	goto l000144AC
	// succ:  l000144AC
l00014145:
	CZN = cond(r2 - 0x0000FB4A)
	V = false
	branch Test(NE,Z) l00014151
	// succ:  l0001414E l00014151
l0001414E:
	goto l00014504
	// succ:  l00014504
l00014151:
	goto l000145DC
	// succ:  l000145DC
l00014154:
	r0 = (uint32) Mem0[sp + 40:word16]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000004)
	V = false
	branch Test(UGE,C) l00014160
	// succ:  l0001415D l00014160
l0001415D:
	goto l0001466A
	// succ:  l0001466A
l00014160:
	r0 = (uint32) Mem0[sp + 18:word16]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000009)
	V = false
	branch Test(NE,Z) l00014170
	// succ:  l00014169 l00014170
l00014169:
	r3 = r6 + 3912
	ZN = cond(r3)
	C = false
	V = false
	goto l00014175
	// succ:  l00014175
l00014170:
	r3 = r6 + 4180
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00014175
l00014175:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	call Mem0[Mem0[sp + 36:word32]:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v66 = r5 + 1515
	Mem0[sp:word32] = v66
	ZN = cond(v66)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v67 = r5 + 1515
	Mem0[sp:word32] = v67
	ZN = cond(v67)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	v68 = 0x00000000
	Mem0[Mem0[ap + 4:word32]:word32] = v68
	Z = true
	N = false
	C = false
	V = false
	goto l0001466A
	// succ:  l0001466A
l000141A0:
	r0 = (uint32) Mem0[sp + 40:word16]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000004)
	V = false
	branch Test(UGE,C) l000141AC
	// succ:  l000141A9 l000141AC
l000141A9:
	goto l0001466A
	// succ:  l0001466A
l000141AC:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	call Mem0[Mem0[sp + 36:word32]:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v85 = r6 + 4257
	Mem0[sp:word32] = v85
	ZN = cond(v85)
	C = false
	V = false
	sp = sp - 0x00000004
	v86 = r5 + 1515
	Mem0[sp:word32] = v86
	ZN = cond(v86)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v87 = r5 + 1515
	Mem0[sp:word32] = v87
	ZN = cond(v87)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	v88 = 0x00000000
	Mem0[Mem0[ap + 4:word32]:word32] = v88
	Z = true
	N = false
	C = false
	V = false
	goto l0001466A
	// succ:  l0001466A
l000141DC:
	r10 = (uint32) Mem0[sp + 40:word16]
	ZN = cond(r10)
	C = false
	V = false
	CZN = cond(r10 - 0x00000008)
	V = false
	branch Test(UGE,C) l000141E8
	// succ:  l000141E5 l000141E8
l000141E5:
	goto l0001466A
	// succ:  l0001466A
l000141E8:
	sp = sp - 0x00000004
	v98 = r7 + 0x00000004
	Mem0[sp:word32] = v98
	CVZN = cond(v98)
	call Mem0[Mem0[sp + 36:word32]:word32] + 2 (retsize: 4;)
	r2 = (uint32) (word16) r0
	ZN = cond(r2)
	C = false
	V = false
	r4 = r2 & ~0xFFFFFFF8
	ZN = cond(r4)
	C = false
	V = false
	r2 = fp + -74
	ZN = cond(r2)
	C = false
	V = false
	v99 = 0x00
	Mem0[r2:byte] = v99
	Z = true
	N = false
	C = false
	V = false
	CZN = cond(r4 - 0x00000003)
	V = false
	branch Test(LE,ZN) l00014209
	// succ:  l00014206 l00014209
l00014206:
	r4 = 0x00000003
	ZN = cond(r4)
	C = false
	V = false
	// succ:  l00014209
l00014209:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v100 = r8 + 105
	Mem0[sp:word32] = v100
	ZN = cond(v100)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	call Mem0[Mem0[sp + 56:word32]:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00014220
	// succ:  l00014218 l00014220
l00014218:
	r3 = r8 + 110
	ZN = cond(r3)
	C = false
	V = false
	goto l000142F5
	// succ:  l000142F5
l00014220:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v108 = r8 + 114
	Mem0[sp:word32] = v108
	ZN = cond(v108)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	call Mem0[Mem0[sp + 56:word32]:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00014238
	// succ:  l0001422F l00014238
l0001422F:
	r3 = r8 + 119
	ZN = cond(r3)
	C = false
	V = false
	goto l000142F5
	// succ:  l000142F5
l00014238:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v109 = r8 + 126
	Mem0[sp:word32] = v109
	ZN = cond(v109)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	call Mem0[Mem0[sp + 56:word32]:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00014250
	// succ:  l00014247 l00014250
l00014247:
	r3 = r8 + 131
	ZN = cond(r3)
	C = false
	V = false
	goto l000142F5
	// succ:  l000142F5
l00014250:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v110 = r8 + 138
	Mem0[sp:word32] = v110
	ZN = cond(v110)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	call Mem0[Mem0[sp + 56:word32]:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00014268
	// succ:  l00014260 l00014268
l00014260:
	r3 = r8 + 143
	ZN = cond(r3)
	C = false
	V = false
	goto l000142F5
	// succ:  l000142F5
l00014268:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v111 = r8 + 150
	Mem0[sp:word32] = v111
	ZN = cond(v111)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	call Mem0[Mem0[sp + 56:word32]:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00014280
	// succ:  l00014278 l00014280
l00014278:
	r3 = r8 + 155
	ZN = cond(r3)
	C = false
	V = false
	goto l000142F5
	// succ:  l000142F5
l00014280:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v112 = r8 + 162
	Mem0[sp:word32] = v112
	ZN = cond(v112)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	call Mem0[Mem0[sp + 56:word32]:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00014298
	// succ:  l00014290 l00014298
l00014290:
	r3 = r8 + 167
	ZN = cond(r3)
	C = false
	V = false
	goto l000142F5
	// succ:  l000142F5
l00014298:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v113 = r8 + 174
	Mem0[sp:word32] = v113
	ZN = cond(v113)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	call Mem0[Mem0[sp + 56:word32]:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000142B0
	// succ:  l000142A8 l000142B0
l000142A8:
	r3 = r8 + 179
	ZN = cond(r3)
	C = false
	V = false
	goto l000142F5
	// succ:  l000142F5
l000142B0:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v114 = r8 + 186
	Mem0[sp:word32] = v114
	ZN = cond(v114)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	call Mem0[Mem0[sp + 56:word32]:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000142F0
	// succ:  l000142C0 l000142F0
l000142C0:
	r3 = r8 + 191
	ZN = cond(r3)
	C = false
	V = false
	CZN = cond(r10 - 0x00000010)
	V = false
	branch Test(ULT,C) l000142F5
	// succ:  l000142CA l000142F5
l000142CA:
	v115 = 0x20
	Mem0[fp + -74:byte] = v115
	ZN = cond(v115)
	C = false
	V = false
	v116 = 0x28
	Mem0[fp + -73:byte] = v116
	ZN = cond(v116)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v117 = r7 + 0x0000000C
	Mem0[sp:word32] = v117
	CVZN = cond(v117)
	r2 = fp + -74
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	v118 = r2 + 0x00000002
	Mem0[sp:word32] = v118
	CVZN = cond(v118)
	call fn000192C2 (retsize: 4;)
	v119 = 0x29
	Mem0[fp + -68:byte] = v119
	ZN = cond(v119)
	C = false
	V = false
	v120 = 0x00
	Mem0[fp + -67:byte] = v120
	Z = true
	N = false
	C = false
	V = false
	goto l000142F5
	// succ:  l000142F5
l000142F0:
	r3 = r8 + 199
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l000142F5
l000142F5:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v101 = fp + -74
	Mem0[sp:word32] = v101
	ZN = cond(v101)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v102 = r7 + 0x00000006
	Mem0[sp:word32] = v102
	CVZN = cond(v102)
	call Mem0[Mem0[sp + 48:word32]:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	v103 = (uint32) (word16) r0
	Mem0[sp:uint32] = v103
	ZN = cond(v103)
	C = false
	V = false
	sp = sp - 0x00000004
	v104 = Mem0[r6 + 4164 + r4 * 4:word32]
	Mem0[sp:word32] = v104
	ZN = cond(v104)
	C = false
	V = false
	sp = sp - 0x00000004
	v105 = r6 + 4043
	Mem0[sp:word32] = v105
	ZN = cond(v105)
	C = false
	V = false
	sp = sp - 0x00000004
	v106 = r5 + 1515
	Mem0[sp:word32] = v106
	ZN = cond(v106)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v107 = r5 + 1515
	Mem0[sp:word32] = v107
	ZN = cond(v107)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	goto l0001466A
	// succ:  l0001466A
l0001432C:
	r0 = (uint32) Mem0[sp + 40:word16]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000001)
	V = false
	branch Test(UGE,C) l00014338
	// succ:  l00014335 l00014338
l00014335:
	goto l0001466A
	// succ:  l0001466A
l00014338:
	r4 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r2 = fp + -154
	ZN = cond(r2)
	C = false
	V = false
	v121 = 0x00
	Mem0[r2:byte] = v121
	Z = true
	N = false
	C = false
	V = false
	r2 = (uint32) Mem0[r7:byte]
	ZN = cond(r2)
	C = false
	V = false
	branch (r2 & 0x00000001) == 0x00000000 l00014355
	// succ:  l00014347 l00014355
l00014347:
	sp = sp - 0x00000004
	v122 = r6 + 4380
	Mem0[sp:word32] = v122
	ZN = cond(v122)
	C = false
	V = false
	sp = sp - 0x00000004
	v123 = fp + -154
	Mem0[sp:word32] = v123
	ZN = cond(v123)
	C = false
	V = false
	call Mem0[Mem0[sp + 32:word32]:word32] + 2 (retsize: 4;)
	r4 = r4 + 0x00000001
	CVZN = cond(r4)
	// succ:  l00014355
l00014355:
	sp = fp
	r2 = (uint32) Mem0[r7:byte]
	ZN = cond(r2)
	C = false
	V = false
	branch (r2 & 0x00000001 << 0x00000001) == 0x00000000 l0001438D
	// succ:  l0001435C l0001438D
l0001435C:
	sp = sp - 0x00000004
	v9 = fp + -154
	Mem0[sp:word32] = v9
	ZN = cond(v9)
	C = false
	V = false
	call Mem0[Mem0[sp + 24:word32]:word32] + 2 (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	ZN = cond(r4 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00014376
	// succ:  l0001436B l00014376
l0001436B:
	r2 = r3
	ZN = cond(r2)
	C = false
	V = false
	r3 = r3 + 0x00000001
	CVZN = cond(r3)
	v15 = 0x2F
	Mem0[fp + -154:byte] = v15
	ZN = cond(v15)
	C = false
	V = false
	// succ:  l00014376
l00014376:
	sp = sp - 0x00000004
	v17 = r6 + 4393
	Mem0[sp:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	r2 = fp + -154
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	v18 = r2 + r3
	Mem0[sp:word32] = v18
	CVZN = cond(v18)
	call Mem0[Mem0[sp + 32:word32]:word32] + 2 (retsize: 4;)
	r4 = r4 + 0x00000001
	CVZN = cond(r4)
	v20 = Mem0[ap + 4:word32] + 0x00000004
	Mem0[Mem0[ap + 4:word32]:word32] = v20
	CVZN = cond(v20)
	// succ:  l0001438D
l0001438D:
	r2 = (uint32) Mem0[r7:byte]
	ZN = cond(r2)
	C = false
	V = false
	branch (r2 & 0x00000001 << 0x00000002) == 0x00000000 l000143C5
	// succ:  l00014394 l000143C5
l00014394:
	sp = sp - 0x00000004
	v21 = fp + -154
	Mem0[sp:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	call Mem0[Mem0[sp + 24:word32]:word32] + 2 (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	ZN = cond(r4 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000143AE
	// succ:  l000143A3 l000143AE
l000143A3:
	r2 = r3
	ZN = cond(r2)
	C = false
	V = false
	r3 = r3 + 0x00000001
	CVZN = cond(r3)
	v22 = 0x2F
	Mem0[fp + -154:byte] = v22
	ZN = cond(v22)
	C = false
	V = false
	// succ:  l000143AE
l000143AE:
	sp = sp - 0x00000004
	v23 = r6 + 4400
	Mem0[sp:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	r2 = fp + -154
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	v24 = r2 + r3
	Mem0[sp:word32] = v24
	CVZN = cond(v24)
	call Mem0[Mem0[sp + 32:word32]:word32] + 2 (retsize: 4;)
	r4 = r4 + 0x00000001
	CVZN = cond(r4)
	v25 = Mem0[ap + 4:word32] + 0x00000004
	Mem0[Mem0[ap + 4:word32]:word32] = v25
	CVZN = cond(v25)
	// succ:  l000143C5
l000143C5:
	ZN = cond(r4 - 0x00000000)
	C = false
	V = false
	branch Test(GT,ZN) l000143CC
	// succ:  l000143C9 l000143CC
l000143C9:
	goto l0001466A
	// succ:  l0001466A
l000143CC:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	CZN = cond(r4 - 0x00000001)
	V = false
	branch Test(NE,Z) l000143D8
	// succ:  l000143D3 l000143D8
l000143D3:
	r3 = r6
	ZN = cond(r3)
	C = false
	V = false
	goto l000143DD
	// succ:  l000143DD
l000143D8:
	r3 = r8 + 207
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l000143DD
l000143DD:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v163 = fp + -154
	Mem0[sp:word32] = v163
	ZN = cond(v163)
	C = false
	V = false
	sp = sp - 0x00000004
	v164 = r6 + 4330
	Mem0[sp:word32] = v164
	ZN = cond(v164)
	C = false
	V = false
	sp = sp - 0x00000004
	v165 = r5 + 1515
	Mem0[sp:word32] = v165
	ZN = cond(v165)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v166 = r5 + 1515
	Mem0[sp:word32] = v166
	ZN = cond(v166)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	goto l0001466A
	// succ:  l0001466A
l00014404:
	r3 = (uint32) Mem0[sp + 40:word16]
	ZN = cond(r3)
	C = false
	V = false
	CZN = cond(r3 - 0x00000005)
	V = false
	branch Test(UGE,C) l00014410
	// succ:  l0001440D l00014410
l0001440D:
	goto l0001466A
	// succ:  l0001466A
l00014410:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v69 = r8 + 209
	Mem0[sp:word32] = v69
	ZN = cond(v69)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	call Mem0[Mem0[sp + 56:word32]:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00014423
	// succ:  l00014420 l00014423
l00014420:
	goto l0001466A
	// succ:  l0001466A
l00014423:
	r4 = (uint32) Mem0[r7 + 4:byte]
	ZN = cond(r4)
	C = false
	V = false
	r2 = r4 + 0x0000000D
	CVZN = cond(r2)
	CZN = cond(r3 - r2)
	V = false
	branch Test(UGE,C) l00014433
	// succ:  l00014430 l00014433
l00014430:
	goto l0001466A
	// succ:  l0001466A
l00014433:
	r3 = r4 + 0x00000005
	CVZN = cond(r3)
	r0 = (uint32) Mem0[r7 + r3:byte]
	ZN = cond(r0)
	C = false
	V = false
	v70 = (int8) r0
	Mem0[fp + -155:int8] = v70
	VZN = cond(v70)
	C = false
	v71 = 0x00
	Mem0[r7:byte] = v71
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r2 = r4 + 0x0000000C
	CVZN = cond(r2)
	sp = sp - 0x00000004
	v72 = (uint32) Mem0[r7 + r2:byte]
	Mem0[sp:uint32] = v72
	ZN = cond(v72)
	C = false
	V = false
	r2 = r4 + 0x0000000B
	CVZN = cond(r2)
	sp = sp - 0x00000004
	v73 = (uint32) Mem0[r7 + r2:byte]
	Mem0[sp:uint32] = v73
	ZN = cond(v73)
	C = false
	V = false
	r2 = r4 + 0x0000000A
	CVZN = cond(r2)
	sp = sp - 0x00000004
	v74 = (uint32) Mem0[r7 + r2:byte]
	Mem0[sp:uint32] = v74
	ZN = cond(v74)
	C = false
	V = false
	r2 = r4 + 0x00000009
	CVZN = cond(r2)
	sp = sp - 0x00000004
	v75 = (uint32) Mem0[r7 + r2:byte]
	Mem0[sp:uint32] = v75
	ZN = cond(v75)
	C = false
	V = false
	r2 = r4 + 0x00000008
	CVZN = cond(r2)
	sp = sp - 0x00000004
	v76 = (uint32) Mem0[r7 + r2:byte]
	Mem0[sp:uint32] = v76
	ZN = cond(v76)
	C = false
	V = false
	r2 = r4 + 0x00000007
	CVZN = cond(r2)
	sp = sp - 0x00000004
	v77 = (uint32) Mem0[r7 + r2:byte]
	Mem0[sp:uint32] = v77
	ZN = cond(v77)
	C = false
	V = false
	r4 = r4 + 0x00000006
	CVZN = cond(r4)
	sp = sp - 0x00000004
	v78 = (uint32) Mem0[r7 + r4:byte]
	Mem0[sp:uint32] = v78
	ZN = cond(v78)
	C = false
	V = false
	sp = sp - 0x00000004
	v79 = (int32) Mem0[fp + -155:int8]
	Mem0[sp:int32] = v79
	VZN = cond(v79)
	C = false
	sp = sp - 0x00000004
	v80 = r7 + 0x00000005
	Mem0[sp:word32] = v80
	CVZN = cond(v80)
	sp = sp - 0x00000004
	v81 = r6 + 4409
	Mem0[sp:word32] = v81
	ZN = cond(v81)
	C = false
	V = false
	sp = sp - 0x00000004
	v82 = r5 + 1515
	Mem0[sp:word32] = v82
	ZN = cond(v82)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v83 = r5 + 1515
	Mem0[sp:word32] = v83
	ZN = cond(v83)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	v84 = Mem0[fp + -155:byte]
	Mem0[r7:byte] = v84
	ZN = cond(v84)
	C = false
	V = false
	goto l0001466A
	// succ:  l0001466A
l000144AC:
	r0 = (uint32) Mem0[sp + 40:word16]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000005)
	V = false
	branch Test(UGE,C) l000144B8
	// succ:  l000144B5 l000144B8
l000144B5:
	goto l0001466A
	// succ:  l0001466A
l000144B8:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r2 = (uint32) Mem0[r7 + 4:byte]
	ZN = cond(r2)
	C = false
	V = false
	branch (r2 & 0x00000001) == 0x00000000 l000144C8
	// succ:  l000144C1 l000144C8
l000144C1:
	r3 = r8 + 214
	ZN = cond(r3)
	C = false
	V = false
	goto l000144CB
	// succ:  l000144CB
l000144C8:
	r3 = r6
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l000144CB
l000144CB:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	call Mem0[Mem0[sp + 40:word32]:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v124 = r6 + 4512
	Mem0[sp:word32] = v124
	ZN = cond(v124)
	C = false
	V = false
	sp = sp - 0x00000004
	v125 = r5 + 1515
	Mem0[sp:word32] = v125
	ZN = cond(v125)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v126 = r5 + 1515
	Mem0[sp:word32] = v126
	ZN = cond(v126)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	r2 = (uint32) Mem0[r7 + 4:byte]
	ZN = cond(r2)
	C = false
	V = false
	branch (r2 & 0x00000001) == 0x00000000 l000144FC
	// succ:  l000144F9 l000144FC
l000144F9:
	goto l0001466A
	// succ:  l0001466A
l000144FC:
	v127 = 0x00000000
	Mem0[Mem0[ap + 4:word32]:word32] = v127
	Z = true
	N = false
	C = false
	V = false
	goto l0001466A
	// succ:  l0001466A
l00014504:
	r0 = (uint32) Mem0[sp + 40:word16]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000004)
	V = false
	branch Test(UGE,C) l00014510
	// succ:  l0001450D l00014510
l0001450D:
	goto l0001466A
	// succ:  l0001466A
l00014510:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v128 = (uint32) Mem0[r7 + 3:byte]
	Mem0[sp:uint32] = v128
	ZN = cond(v128)
	C = false
	V = false
	sp = sp - 0x00000004
	v129 = (uint32) Mem0[r7 + 2:byte]
	Mem0[sp:uint32] = v129
	ZN = cond(v129)
	C = false
	V = false
	sp = sp - 0x00000004
	v130 = (uint32) Mem0[r7 + 1:byte]
	Mem0[sp:uint32] = v130
	ZN = cond(v130)
	C = false
	V = false
	sp = sp - 0x00000004
	v131 = (uint32) Mem0[r7:byte]
	Mem0[sp:uint32] = v131
	ZN = cond(v131)
	C = false
	V = false
	sp = sp - 0x00000004
	v132 = r6 + 4591
	Mem0[sp:word32] = v132
	ZN = cond(v132)
	C = false
	V = false
	sp = sp - 0x00000004
	v133 = r5 + 1515
	Mem0[sp:word32] = v133
	ZN = cond(v133)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v134 = r5 + 1515
	Mem0[sp:word32] = v134
	ZN = cond(v134)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	goto l0001466A
	// succ:  l0001466A
l00014544:
	r0 = (uint32) Mem0[sp + 40:word16]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000005)
	V = false
	branch Test(UGE,C) l00014550
	// succ:  l0001454D l00014550
l0001454D:
	goto l0001466A
	// succ:  l0001466A
l00014550:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r3 = (uint32) Mem0[r7 + 4:byte]
	ZN = cond(r3)
	C = false
	V = false
l00014588:
	r0 = (uint32) Mem0[sp + 40:word16]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000013)
	V = false
	branch Test(ULT,C) l000145DC
	// succ:  l00014591 l000145DC
l00014591:
	r2 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00014594
l00014594:
	r0 = 0x0000000F - r2
	CVZN = cond(r0)
	sp = sp - 0x00000004
	v89 = (uint32) Mem0[r7 + r0:byte]
	Mem0[sp:uint32] = v89
	ZN = cond(v89)
	C = false
	V = false
	sp = sp - 0x00000004
	v90 = r8 + 217
	Mem0[sp:word32] = v90
	ZN = cond(v90)
	C = false
	V = false
	r0 = r2 << 1
	VZN = cond(r0)
	C = false
	sp = sp - 0x00000004
	v91 = fp + -188 + r0 * 4
	Mem0[sp:word32] = v91
	ZN = cond(v91)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	r2 = r2 + 0x00000001
	CVZN = cond(r2)
	branch r2 <= 0x0000000F l00014594
	// succ:  l000145B0 l00014594
l000145B0:
	v92 = 0x00
	Mem0[fp + -156:byte] = v92
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v93 = fp + -188
	Mem0[sp:word32] = v93
	ZN = cond(v93)
	C = false
	V = false
	sp = sp - 0x00000004
	v94 = r6 + 4687
	Mem0[sp:word32] = v94
	ZN = cond(v94)
	C = false
	V = false
	sp = sp - 0x00000004
	v95 = r5 + 1515
	Mem0[sp:word32] = v95
	ZN = cond(v95)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v96 = r5 + 1515
	Mem0[sp:word32] = v96
	ZN = cond(v96)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	goto l0001466A
	// succ:  l0001466A
l000145DC:
	r2 = (uint32) Mem0[sp + 40:word16]
	ZN = cond(r2)
	C = false
	V = false
	branch Test(NE,Z) l000145E5
	// succ:  l000145E2 l000145E5
l000145E2:
	goto l0001466A
	// succ:  l0001466A
l000145E5:
	CZN = cond(r2 - 0x00000018)
	V = false
	branch Test(UGT,CZ) l00014610
	// succ:  l000145EA l00014610
l000145EA:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v51 = r6 + 4752
	Mem0[sp:word32] = v51
	ZN = cond(v51)
	C = false
	V = false
	sp = sp - 0x00000004
	v52 = r5 + 1515
	Mem0[sp:word32] = v52
	ZN = cond(v52)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v53 = r5 + 1515
	Mem0[sp:word32] = v53
	ZN = cond(v53)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	v54 = Mem0[sp + 40:word16]
	Mem0[sp + 38:word16] = v54
	ZN = cond(v54)
	C = false
	V = false
	goto l00014633
	// succ:  l00014633
l00014610:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v62 = r6 + 4725
	Mem0[sp:word32] = v62
	ZN = cond(v62)
	C = false
	V = false
	sp = sp - 0x00000004
	v63 = r5 + 1515
	Mem0[sp:word32] = v63
	ZN = cond(v63)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v64 = r5 + 1515
	Mem0[sp:word32] = v64
	ZN = cond(v64)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	v65 = 0x0014
	Mem0[sp + 38:word16] = v65
	ZN = cond(v65)
	C = false
	V = false
	// succ:  l00014633
l00014633:
	v55 = 0x0000
	r11 = DPB(r11, v55, 0)
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(Mem0[sp + 38:word16] - 0x0000)
	C = false
	V = false
	branch Test(EQ,Z) l0001466A
	// succ:  l0001463A l0001466A
l0001463A:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l0001463C
l0001463C:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r0 = (uint32) (word16) r11
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v57 = (uint32) Mem0[r7 + r0:byte]
	Mem0[sp:uint32] = v57
	ZN = cond(v57)
	C = false
	V = false
	sp = sp - 0x00000004
	v58 = r6 + 4758
	Mem0[sp:word32] = v58
	ZN = cond(v58)
	C = false
	V = false
	sp = sp - 0x00000004
	v59 = r5 + 1515
	Mem0[sp:word32] = v59
	ZN = cond(v59)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v60 = r5 + 1515
	Mem0[sp:word32] = v60
	ZN = cond(v60)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r0 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r0)
	C = false
	V = false
	call Mem0[r0:word32] + 2 (retsize: 4;)
	v61 = (word16) r11 + 0x0001
	r11 = DPB(r11, v61, 0)
	CVZN = cond(v61)
	CZN = cond((word16) r11 - Mem0[sp + 38:word16])
	V = false
	branch Test(ULT,C) l0001463C
	// succ:  l0001466A l0001463C
l0001466A:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v27 = r8 + 222
	Mem0[sp:word32] = v27
	ZN = cond(v27)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	r0 = (uint32) Mem0[sp + 40:word16]
	ZN = cond(r0)
	C = false
	V = false
	r7 = r7 + r0
	CVZN = cond(r7)
	r2 = (uint32) Mem0[sp + 42:word16]
	ZN = cond(r2)
	C = false
	V = false
	r0 = r2 - r0
	CVZN = cond(r0)
	v29 = (int16) r0
	Mem0[sp + 42:int16] = v29
	VZN = cond(v29)
	C = false
	r0 = (uint32) (word16) r0
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0x00000004)
	V = false
	branch Test(ULT,C) l0001469C
	// succ:  l00014699 l0001469C
l00014699:
	goto l00013E24
	// succ:  l00013E24
l0001469C:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v136 = r8 + 224
	Mem0[sp:word32] = v136
	ZN = cond(v136)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	// succ:  l000146B0
l000146B0:
	r2 = Mem0[r5 + 0x0000C67A:word32] & ~0xFFFF3FFF
	ZN = cond(r2)
	C = false
	V = false
	r2 = (uint32) SLICE(r2, ui20, 12)
	ZN = cond(r2)
	V = false
	v137 = (int16) r2
	Mem0[sp + 14:int16] = v137
	VZN = cond(v137)
	C = false
	r9 = (uint32) (word16) r2
	ZN = cond(r9)
	C = false
	V = false
	branch (r9 & 0x00000001 << 0x00000003) != 0x00000000 l000146CF
	// succ:  l000146CC l000146CF
l000146CC:
	goto l00014776
	// succ:  l00014776
l000146CF:
	r7 = (uint32) Mem0[sp + 2:word16]
	ZN = cond(r7)
	C = false
	V = false
	CZN = cond(r7 - 0x00000003)
	V = false
	branch Test(EQ,Z) l000146E2
	// succ:  l000146D8 l000146E2
l000146D8:
	CZN = cond(r7 - 0x00000006)
	V = false
	branch Test(EQ,Z) l000146E2
	// succ:  l000146DD l000146E2
l000146DD:
	CZN = cond(r7 - 0x0000000B)
	V = false
	branch Test(NE,Z) l00014738
	// succ:  l000146E2 l00014738
l000146E2:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	r3 = (uint32) Mem0[sp + 18:word16]
	ZN = cond(r3)
	C = false
	V = false
	branch (r3 & 0x00000001 << 0x00000002) == 0x00000000 l000146F4
	// succ:  l000146EC l000146F4
l000146EC:
	r4 = r6 + 4843
	ZN = cond(r4)
	C = false
	V = false
	goto l000146F9
	// succ:  l000146F9
l000146F4:
	r4 = r6 + 4890
	ZN = cond(r4)
	C = false
	V = false
	// succ:  l000146F9
l000146F9:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r4
	ZN = cond(r4)
	C = false
	V = false
	r3 = r3 & ~0xFFFFFFF3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	v149 = r6 + 3712
	Mem0[sp:word32] = v149
	ZN = cond(v149)
	C = false
	V = false
	sp = sp - 0x00000004
	v150 = (uint32) 0x5855
	Mem0[sp:uint32] = v150
	ZN = cond(v150)
	C = false
	V = false
	sp = sp - 0x00000004
	v151 = r8 + 226
	Mem0[sp:word32] = v151
	ZN = cond(v151)
	C = false
	V = false
	sp = sp - 0x00000004
	v152 = r6 + 4764
	Mem0[sp:word32] = v152
	ZN = cond(v152)
	C = false
	V = false
	sp = sp - 0x00000004
	v153 = r5 + 1515
	Mem0[sp:word32] = v153
	ZN = cond(v153)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v154 = r5 + 1515
	Mem0[sp:word32] = v154
	ZN = cond(v154)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	v155 = Mem0[ap + 4:word32] + r3
	Mem0[Mem0[ap + 4:word32]:word32] = v155
	CVZN = cond(v155)
	goto l00014776
	// succ:  l00014776
l00014738:
	ZN = cond(r7 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00014776
	// succ:  l0001473C l00014776
l0001473C:
	branch (r9 & 0x00000001 << 0x00000002) != 0x00000000 l00014776
	// succ:  l00014740 l00014776
l00014740:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v156 = r6 + 4890
	Mem0[sp:word32] = v156
	ZN = cond(v156)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000008
	ZN = cond(0x00000008)
	C = false
	V = false
	sp = sp - 0x00000004
	v157 = r6 + 3712
	Mem0[sp:word32] = v157
	ZN = cond(v157)
	C = false
	V = false
	sp = sp - 0x00000004
	v158 = (uint32) 0x5855
	Mem0[sp:uint32] = v158
	ZN = cond(v158)
	C = false
	V = false
	sp = sp - 0x00000004
	v159 = r8 + 229
	Mem0[sp:word32] = v159
	ZN = cond(v159)
	C = false
	V = false
	sp = sp - 0x00000004
	v160 = r6 + 4764
	Mem0[sp:word32] = v160
	ZN = cond(v160)
	C = false
	V = false
	sp = sp - 0x00000004
	v161 = r5 + 1515
	Mem0[sp:word32] = v161
	ZN = cond(v161)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v162 = r5 + 1515
	Mem0[sp:word32] = v162
	ZN = cond(v162)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	// succ:  l00014776
l00014776:
	ZN = cond(Mem0[r5 + 0x0000C674:word16] - 0x0000)
	C = false
	V = false
	branch Test(NE,Z) l000147A4
	// succ:  l0001477E l000147A4
l0001477E:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v138 = r6 + 4925
	Mem0[sp:word32] = v138
	ZN = cond(v138)
	C = false
	V = false
	sp = sp - 0x00000004
	v139 = r5 + 1515
	Mem0[sp:word32] = v139
	ZN = cond(v139)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v140 = r5 + 1515
	Mem0[sp:word32] = v140
	ZN = cond(v140)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	goto l00014808
	// succ:  l00014808
l000147A4:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v141 = r6 + 4955
	Mem0[sp:word32] = v141
	ZN = cond(v141)
	C = false
	V = false
	sp = sp - 0x00000004
	v142 = r5 + 1515
	Mem0[sp:word32] = v142
	ZN = cond(v142)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v143 = r5 + 1515
	Mem0[sp:word32] = v143
	ZN = cond(v143)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000005
	ZN = cond(0x00000005)
	C = false
	V = false
	sp = sp - 0x00000004
	v144 = (uint32) Mem0[r5 + 0x0000C674:word16]
	Mem0[sp:uint32] = v144
	ZN = cond(v144)
	C = false
	V = false
	call fn0000DC76 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000147E5
	// succ:  l000147DB l000147E5
l000147DB:
	v145 = r0
	Mem0[sp + 8:word32] = v145
	ZN = cond(v145)
	C = false
	V = false
	CZN = cond(r0 - 0x00000001)
	V = false
	branch Test(LE,ZN) l000147E5
	// succ:  l000147E4 l000147E5
l000147E4:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00014355_exit
l000147E5:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v146 = r6 + 5032
	Mem0[sp:word32] = v146
	ZN = cond(v146)
	C = false
	V = false
	sp = sp - 0x00000004
	v147 = r5 + 1515
	Mem0[sp:word32] = v147
	ZN = cond(v147)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v148 = r5 + 1515
	Mem0[sp:word32] = v148
	ZN = cond(v148)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	// succ:  l00014808
l00014808:
	r0 = Mem0[sp + 0x00000008:word32]
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00014355_exit
fn00014355_exit:


// fn00014812
// Return size: 0
define fn00014812
fn00014812_entry:
	// succ:  l00014812
l00014812:
	sp = fp
	sp = sp - 0x00000028
	CVZN = cond(sp)
	ZN = cond(0xFFFE6858)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFF9584)
	C = false
	V = false
	r11 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r2 = (uint32) Mem0[r4 + 0x0000C65E:word16]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x0000000B)
	V = false
	branch Test(UGE,C) l00014844
	// succ:  l00014838 l00014844
l00014838:
	v14 = Mem0[r4 + 0x0000C65E:word16]
	r3 = DPB(r3, v14, 0)
	ZN = cond(v14)
	C = false
	V = false
	goto l00014847
	// succ:  l00014847
l00014844:
	v15 = 0x000B
	r3 = DPB(r3, v15, 0)
	ZN = cond(v15)
	C = false
	V = false
	// succ:  l00014847
l00014847:
	v17 = (word16) r3
	r6 = DPB(r6, v17, 0)
	ZN = cond(v17)
	C = false
	V = false
	r2 = Mem0[r4 + 1511:word32]
	ZN = cond(r2)
	C = false
	V = false
	v19 = Mem0[r2 + 12:word16]
	r10 = DPB(r10, v19, 0)
	ZN = cond(v19)
	C = false
	V = false
	v21 = (uint16) Mem0[r4 + 0x0000C658:byte]
	r9 = DPB(r9, v21, 0)
	ZN = cond(v21)
	C = false
	V = false
	ap = (uint32) (word16) r6
	ZN = cond(ap)
	C = false
	V = false
	r2 = ap * 0x00000005
	CVZN = cond(r2)
	sp = sp - 0x00000004
	v24 = r8 + 5401 + r2 * 4
	Mem0[sp:word32] = v24
	ZN = cond(v24)
	C = false
	V = false
	sp = sp - 0x00000004
	v26 = fp + -37
	Mem0[sp:word32] = v26
	ZN = cond(v26)
	C = false
	V = false
	call fn000192BE (retsize: 4;)
	CZN = cond(ap - 0x00000006)
	V = false
	branch Test(NE,Z) l000148AC
	// succ:  l00014875 l000148AC
l00014875:
	r2 = (uint32) Mem0[r4 + 0x0000C65C:word16]
	ZN = cond(r2)
	C = false
	V = false
	branch (r2 & 0x00000001 << 0x00000001) == 0x00000000 l00014888
	// succ:  l00014880 l00014888
l00014880:
	v27 = 0x38
	r3 = DPB(r3, v27, 0)
	ZN = cond(v27)
	C = false
	V = false
	goto l0001488B
	// succ:  l0001488B
l00014888:
	v44 = 0x34
	r3 = DPB(r3, v44, 0)
	ZN = cond(v44)
	C = false
	V = false
	// succ:  l0001488B
l0001488B:
	v30 = (byte) r3
	Mem0[fp + -36:byte] = v30
	ZN = cond(v30)
	C = false
	V = false
	r2 = (uint32) Mem0[r4 + 0x0000C65C:word16]
	ZN = cond(r2)
	C = false
	V = false
	branch (r2 & 0x00000001 << 0x00000002) == 0x00000000 l000148A0
	// succ:  l0001489A l000148A0
l0001489A:
	v31 = 0x33
	r2 = DPB(r2, v31, 0)
	ZN = cond(v31)
	C = false
	V = false
	goto l000148A3
	// succ:  l000148A3
l000148A0:
	v43 = 0x32
	r2 = DPB(r2, v43, 0)
	ZN = cond(v43)
	C = false
	V = false
	// succ:  l000148A3
l000148A3:
	v42 = (byte) r2
	Mem0[fp + -34:byte] = v42
	ZN = cond(v42)
	C = false
	V = false
	goto l000148EA
	// succ:  l000148EA
l000148AC:
	CZN = cond(ap - 0x00000008)
	V = false
	branch Test(NE,Z) l000148D0
	// succ:  l000148B1 l000148D0
l000148B1:
	r2 = (uint32) Mem0[r4 + 0x0000C65C:word16]
	ZN = cond(r2)
	C = false
	V = false
	r2 = r2 >> 1
	VZN = cond(r2)
	C = false
	r2 = r2 & ~0xFFFFFFFC
	ZN = cond(r2)
	C = false
	V = false
	r2 = (uint32) (word16) r2
	ZN = cond(r2)
	C = false
	V = false
	v29 = Mem0[r8 + 5320 + r2:byte]
	Mem0[fp + -34:byte] = v29
	ZN = cond(v29)
	C = false
	V = false
	goto l000148EA
	// succ:  l000148EA
l000148D0:
	CZN = cond(ap - 0x0000000B)
	V = false
	branch Test(ULT,C) l000148EA
	// succ:  l000148D5 l000148EA
l000148D5:
	sp = sp - 0x00000004
	v38 = (uint32) Mem0[r4 + 0x0000C65E:word16]
	Mem0[sp:uint32] = v38
	ZN = cond(v38)
	C = false
	V = false
	sp = sp - 0x00000004
	v40 = r5 + 236
	Mem0[sp:word32] = v40
	ZN = cond(v40)
	C = false
	V = false
	sp = sp - 0x00000004
	v41 = fp + -36
	Mem0[sp:word32] = v41
	ZN = cond(v41)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	// succ:  l000148EA
l000148EA:
	ap = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r2 = fp + -32
	ZN = cond(r2)
	C = false
	V = false
	// succ:  l000148F0
l000148F0:
	v32 = 0x20
	Mem0[r2:byte] = v32
	ZN = cond(v32)
	C = false
	V = false
	r2 = r2 + 0x00000001
	CVZN = cond(r2)
	ap = ap + 0x00000001
	CVZN = cond(ap)
	branch ap <= 0x0000000E l000148F0
	// succ:  l000148F9 l000148F0
l000148F9:
	v33 = 0x00
	Mem0[fp + -17:byte] = v33
	Z = true
	N = false
	C = false
	V = false
	r2 = (uint32) Mem0[r4 + 0x0000C67C:word16]
	ZN = cond(r2)
	C = false
	V = false
	v35 = (word16) r2 & ~0x0000
	r7 = DPB(r7, v35, 0)
	ZN = cond(v35)
	C = false
	V = false
	r0 = (uint32) (word16) r10
	ZN = cond(r0)
	C = false
	V = false
	v37 = r0 - 0x00000000
	branch v37 > 0x0000000F l0001492E
	// succ:  l0001490C_1 l0001492E
l0001490C_1:
	call 0x00014910 + v37 * 0x00000002 (retsize: 4;)
	return
	// succ:  fn00014812_exit
l0001492E:
fn00014812_exit:


// fn00015106
// Return size: 4
define fn00015106
fn00015106_entry:
	// succ:  l00015106
l00015106:
	sp = fp
	sp = sp - 0x00000008
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFF9584)
	C = false
	V = false
	r0 = Mem0[ap + 4:word32]
	ZN = cond(r0)
	C = false
	V = false
	r1 = (uint32) Mem0[r0:word16]
	ZN = cond(r1)
	C = false
	V = false
	r2 = r1
	ZN = cond(r2)
	C = false
	V = false
	r0 = r2 >> 9
	VZN = cond(r0)
	C = false
	r0 = r0 & ~0xFFFFFF80
	ZN = cond(r0)
	C = false
	V = false
	r0 = r0 + 0x00000050
	CVZN = cond(r0)
	v13 = (int16) r0
	r11 = DPB(r11, v13, 0)
	VZN = cond(v13)
	C = false
	r0 = r2 >> 5
	VZN = cond(r0)
	C = false
	r0 = r0 & ~0xFFFFFFF0
	ZN = cond(r0)
	C = false
	V = false
	v15 = (int16) r0
	r10 = DPB(r10, v15, 0)
	VZN = cond(v15)
	C = false
	v17 = (word16) r1 & ~0xFFE0
	r9 = DPB(r9, v17, 0)
	ZN = cond(v17)
	C = false
	V = false
	r0 = Mem0[ap + 8:word32]
	ZN = cond(r0)
	C = false
	V = false
	r2 = (uint32) Mem0[r0:word16]
	ZN = cond(r2)
	C = false
	V = false
	r1 = r2
	ZN = cond(r1)
	C = false
	V = false
	r0 = r1 >> 11
	VZN = cond(r0)
	C = false
	r0 = r0 & ~0xFFFFFFE0
	ZN = cond(r0)
	C = false
	V = false
	v19 = (int16) r0
	r8 = DPB(r8, v19, 0)
	VZN = cond(v19)
	C = false
	r0 = r1 >> 5
	VZN = cond(r0)
	C = false
	r0 = r0 & ~0xFFFFFFC0
	ZN = cond(r0)
	C = false
	V = false
	v21 = (int16) r0
	r7 = DPB(r7, v21, 0)
	VZN = cond(v21)
	C = false
	r2 = r2 & ~0xFFFFFFE0
	ZN = cond(r2)
	C = false
	V = false
	v23 = (word16) r2 + (word16) r2
	r6 = DPB(r6, v23, 0)
	CVZN = cond(v23)
	r2 = (uint32) (word16) r10
	ZN = cond(r2)
	C = false
	V = false
	branch Test(EQ,Z) l00015189
	// succ:  l00015184 l00015189
l00015184:
	CZN = cond(r2 - 0x0000000C)
	V = false
	branch Test(ULE,CZ) l000151A0
	// succ:  l00015189 l000151A0
l00015189:
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	v28 = r3 + 5108
	Mem0[sp:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	sp = sp - 0x00000004
	v30 = fp + -8
	Mem0[sp:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	r5 = fp + -8
	ZN = cond(r5)
	C = false
	V = false
	goto l000151AC
	// succ:  l000151AC
l000151A0:
	r2 = r2 - 0x00000001
	CVZN = cond(r2)
	r2 = r2 << 2
	VZN = cond(r2)
	C = false
	r5 = r3 + 5461 + r2
	ZN = cond(r5)
	C = false
	V = false
	// succ:  l000151AC
l000151AC:
	CZN = cond(Mem0[r4 + 36:word32] - 0x00000009)
	V = false
	branch Test(LE,ZN) l000151DC
	// succ:  l000151B2 l000151DC
l000151B2:
	sp = sp - 0x00000004
	v33 = (uint32) (word16) r6
	Mem0[sp:uint32] = v33
	ZN = cond(v33)
	C = false
	V = false
	sp = sp - 0x00000004
	v34 = (uint32) (word16) r7
	Mem0[sp:uint32] = v34
	ZN = cond(v34)
	C = false
	V = false
	sp = sp - 0x00000004
	v35 = (uint32) (word16) r8
	Mem0[sp:uint32] = v35
	ZN = cond(v35)
	C = false
	V = false
	sp = sp - 0x00000004
	v36 = (uint32) (word16) r9
	Mem0[sp:uint32] = v36
	ZN = cond(v36)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	r0 = (uint32) (word16) r11
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v37 = r0 + 0x0000076C
	Mem0[sp:word32] = v37
	CVZN = cond(v37)
	sp = sp - 0x00000004
	v38 = r3 + 5135
	Mem0[sp:word32] = v38
	ZN = cond(v38)
	C = false
	V = false
	sp = sp - 0x00000004
	v39 = Mem0[ap + 16:word32]
	Mem0[sp:word32] = v39
	ZN = cond(v39)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	goto l0001524F
	// succ:  l0001524F
l000151DC:
	ZN = cond(Mem0[r4 + 72:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0001520C
	// succ:  l000151E1 l0001520C
l000151E1:
	sp = sp - 0x00000004
	v40 = (uint32) (word16) r6
	Mem0[sp:uint32] = v40
	ZN = cond(v40)
	C = false
	V = false
	sp = sp - 0x00000004
	v41 = (uint32) (word16) r7
	Mem0[sp:uint32] = v41
	ZN = cond(v41)
	C = false
	V = false
	sp = sp - 0x00000004
	v42 = (uint32) (word16) r8
	Mem0[sp:uint32] = v42
	ZN = cond(v42)
	C = false
	V = false
	sp = sp - 0x00000004
	v43 = (uint32) (word16) r9
	Mem0[sp:uint32] = v43
	ZN = cond(v43)
	C = false
	V = false
	sp = sp - 0x00000004
	v44 = (uint32) (word16) r10
	Mem0[sp:uint32] = v44
	ZN = cond(v44)
	C = false
	V = false
	r0 = (uint32) (word16) r11
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v45 = r0 + 0x0000076C
	Mem0[sp:word32] = v45
	CVZN = cond(v45)
	sp = sp - 0x00000004
	v46 = r3 + 5159
	Mem0[sp:word32] = v46
	ZN = cond(v46)
	C = false
	V = false
	sp = sp - 0x00000004
	v47 = Mem0[ap + 16:word32]
	Mem0[sp:word32] = v47
	ZN = cond(v47)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	goto l0001524F
	// succ:  l0001524F
l0001520C:
	sp = sp - 0x00000004
	v48 = (uint32) (word16) r7
	Mem0[sp:uint32] = v48
	ZN = cond(v48)
	C = false
	V = false
	sp = sp - 0x00000004
	v49 = (uint32) (word16) r8
	Mem0[sp:uint32] = v49
	ZN = cond(v49)
	C = false
	V = false
	r1 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r0 = (uint32) (word16) r11
	ZN = cond(r0)
	C = false
	V = false
	r2 = (uint32) 0x0064
	ZN = cond(r2)
	C = false
	V = false
	branch Test(EQ,Z) l00015234
	// succ:  l0001521E l00015234
l0001521E:
	CZN = cond(r2 - 0x00000001)
	V = false
	branch Test(EQ,Z) l00015239
	// succ:  l00015223 l00015239
l00015223:
	branch Test(GT,ZN) l00015234
	// succ:  l00015225 l00015234
l00015225:
	CZN = cond(r2 - r0)
	V = false
	branch Test(EQ,Z) l00015239
	// succ:  l0001522A l00015239
l0001522A:
	branch Test(UGT,CZ) l0001522F
	// succ:  l0001522C l0001522F
l0001522C:
	r1 = r1 - r2
	CVZN = cond(r1)
	// succ:  l0001522F
l0001522F:
	r1 = r1 + r0
	CVZN = cond(r1)
	goto l00015239
	// succ:  l00015239
l00015234:
l00015239:
	sp = sp - 0x00000004
	v51 = (uint32) (word16) r1
	Mem0[sp:uint32] = v51
	ZN = cond(v51)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r5
	ZN = cond(r5)
	C = false
	V = false
	sp = sp - 0x00000004
	v52 = (uint32) (word16) r9
	Mem0[sp:uint32] = v52
	ZN = cond(v52)
	C = false
	V = false
	sp = sp - 0x00000004
	v53 = r3 + 5113
	Mem0[sp:word32] = v53
	ZN = cond(v53)
	C = false
	V = false
	sp = sp - 0x00000004
	v54 = Mem0[ap + 16:word32]
	Mem0[sp:word32] = v54
	ZN = cond(v54)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	// succ:  l0001524F
l0001524F:
	r0 = Mem0[ap + 16:word32]
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00015106_exit
fn00015106_exit:


// fn00015256
// Return size: 4
define fn00015256
fn00015256_entry:
	// succ:  l00015256
l00015256:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	v8 = Mem0[r2 + 0x0000C5FB:word32] - 0x00000001
	Mem0[r2 + 0x0000C5FB:word32] = v8
	CVZN = cond(v8)
	branch Test(LT,N) l0001527C
	// succ:  l00015268 l0001527C
l00015268:
	r0 = Mem0[r2 + 0x0000C5F7:word32]
	ZN = cond(r0)
	C = false
	V = false
	v11 = Mem0[r2 + 0x0000C5F7:word32] + 0x00000001
	Mem0[r2 + 0x0000C5F7:word32] = v11
	CVZN = cond(v11)
	r5 = (uint32) Mem0[r0:byte]
	ZN = cond(r5)
	C = false
	V = false
	goto l00015286
	// succ:  l00015286
l0001527C:
	call fn0000D69A (retsize: 4;)
	r5 = r0
	ZN = cond(r5)
	C = false
	V = false
	// succ:  l00015286
l00015286:
	r7 = r5 + 0x00000001
	CVZN = cond(r7)
	r4 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	// succ:  l0001528C
l0001528C:
	v16 = Mem0[r2 + 0x0000C5FB:word32] - 0x00000001
	Mem0[r2 + 0x0000C5FB:word32] = v16
	CVZN = cond(v16)
	branch Test(LT,N) l000152A8
	// succ:  l00015294 l000152A8
l00015294:
	r0 = Mem0[r2 + 0x0000C5F7:word32]
	ZN = cond(r0)
	C = false
	V = false
	v17 = Mem0[r2 + 0x0000C5F7:word32] + 0x00000001
	Mem0[r2 + 0x0000C5F7:word32] = v17
	CVZN = cond(v17)
	r5 = (uint32) Mem0[r0:byte]
	ZN = cond(r5)
	C = false
	V = false
	goto l000152B2
	// succ:  l000152B2
l000152A8:
	call fn0000D69A (retsize: 4;)
	r5 = r0
	ZN = cond(r5)
	C = false
	V = false
	// succ:  l000152B2
l000152B2:
	r3 = r5
	ZN = cond(r3)
	C = false
	V = false
	r6 = r3 & ~0xFFFFFFF0
	ZN = cond(r6)
	C = false
	V = false
	r6 = r6 + 0x00000001
	CVZN = cond(r6)
	r0 = r3 & ~0xFFFFFF0F
	ZN = cond(r0)
	C = false
	V = false
	r0 = (uint32) SLICE(r0, ui28, 4)
	ZN = cond(r0)
	V = false
	r3 = r0 + 0x00000001
	CVZN = cond(r3)
	r0 = r3 + r4
	CVZN = cond(r0)
	CZN = cond(r0 - Mem0[ap + 8:word32])
	V = false
	branch Test(ULE,CZ) l000152DE
	// succ:  l000152DA l000152DE
l000152DA:
	r0 = 0x00000004
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00015256_exit
l000152DE:
	r1 = Mem0[ap + 4:word32]
	ZN = cond(r1)
	C = false
	V = false
	// succ:  l000152E4
l000152E4:
	r0 = r4
	ZN = cond(r0)
	C = false
	V = false
	r4 = r4 + 0x00000001
	CVZN = cond(r4)
	v25 = r6
	Mem0[r1:word32] = v25
	ZN = cond(v25)
	C = false
	V = false
	r3 = r3 - 0x00000001
	CVZN = cond(r3)
	branch Test(NE,Z) l000152E4
	// succ:  l000152F1 l000152E4
l000152F1:
	r7 = r7 - 0x00000001
	CVZN = cond(r7)
	branch Test(NE,Z) l0001528C
	// succ:  l000152F5 l0001528C
l000152F5:
	CZN = cond(r4 - Mem0[ap + 8:word32])
	V = false
	branch Test(EQ,Z) l00015300
	// succ:  l000152FB l00015300
l000152FB:
	v26 = 0x04
	r3 = DPB(r3, v26, 0)
	ZN = cond(v26)
	C = false
	V = false
	goto l00015302
	// succ:  l00015302
l00015300:
	v28 = 0x00
	r3 = DPB(r3, v28, 0)
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00015302
l00015302:
	r0 = (int32) (int8) r3
	VZN = cond(r0)
	C = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00015256_exit
fn00015256_exit:


// fn0001530A
// Return size: 0
define fn0001530A
fn0001530A_entry:
	// succ:  l0001530A
l0001530A:
	sp = fp
	sp = sp - 0x00000034
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	r9 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r4_r3 = 0x0000000000000000
	Z = true
	N = false
	C = false
	V = false
	v13 = 0x00000001
	Mem0[sp + 40:word32] = v13
	ZN = cond(v13)
	C = false
	V = false
	v15 = ap + 16
	Mem0[sp + 24:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	r6 = Mem0[Mem0[sp + 24:word32]:word32]
	ZN = cond(r6)
	C = false
	V = false
fn0001530A_exit:


// fn00015896
// Return size: 0
define fn00015896
fn00015896_entry:
	// succ:  l00015896
l00015896:
	sp = fp
	sp = sp - 0x00000034
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	r9 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r4_r3 = 0x0000000000000000
	Z = true
	N = false
	C = false
	V = false
	v13 = 0x00000001
	Mem0[sp + 40:word32] = v13
	ZN = cond(v13)
	C = false
	V = false
	v15 = ap + 16
	Mem0[sp + 24:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	r6 = Mem0[Mem0[sp + 24:word32]:word32]
	ZN = cond(r6)
	C = false
	V = false
fn00015896_exit:


// fn00015E22
// Return size: 0
define fn00015E22
fn00015E22_entry:
	// succ:  l00015E22
l00015E22:
	sp = fp
	sp = sp - 0x0000002C
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	r9 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r4_r3 = 0x0000000000000000
	Z = true
	N = false
	C = false
	V = false
	v13 = 0x00000001
	Mem0[sp + 32:word32] = v13
	ZN = cond(v13)
	C = false
	V = false
	v15 = ap + 12
	Mem0[sp + 20:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	r5 = Mem0[Mem0[sp + 20:word32]:word32]
	ZN = cond(r5)
	C = false
	V = false
fn00015E22_exit:


// fn000162E6
// Return size: 0
define fn000162E6
fn000162E6_entry:
	// succ:  l000162E6
l000162E6:
	sp = fp
	sp = sp - 0x0000002C
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	r9 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r4_r3 = 0x0000000000000000
	Z = true
	N = false
	C = false
	V = false
	v13 = 0x00000001
	Mem0[sp + 32:word32] = v13
	ZN = cond(v13)
	C = false
	V = false
	v15 = ap + 12
	Mem0[sp + 20:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	r5 = Mem0[Mem0[sp + 20:word32]:word32]
	ZN = cond(r5)
	C = false
	V = false
fn000162E6_exit:


// fn000167AA
// Return size: 4
define fn000167AA
fn000167AA_entry:
	// succ:  l000167AA
l000167AA:
	sp = fp
	sp = sp + -1052
	ZN = cond(sp)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFFAB0C)
	C = false
	V = false
	v7 = 0x00000007
	Mem0[fp + -24:word32] = v7
	ZN = cond(v7)
	C = false
	V = false
	ap = Mem0[r4 + 0x0000C5FB:word32] + Mem0[r4 + 132:word32]
	CVZN = cond(ap)
	CZN = cond(ap - 0x00030D40)
	V = false
	branch Test(LE,ZN) l000167DC
	// succ:  l000167D4 l000167DC
l000167D4:
	v13 = 0x08
	r0 = DPB(r0, v13, 0)
	ZN = cond(v13)
	C = false
	V = false
	goto l000167DF
	// succ:  l000167DF
l000167DC:
	v14 = 0x07
	r0 = DPB(r0, v14, 0)
	ZN = cond(v14)
	C = false
	V = false
	// succ:  l000167DF
l000167DF:
	v15 = (int32) (int8) r0
	Mem0[fp + -28:int32] = v15
	VZN = cond(v15)
	C = false
	v17 = 0x00000000
	Mem0[r4 + 0x0000C819:word32] = v17
	Z = true
	N = false
	C = false
	V = false
	ap = (uint32) Mem0[r4 + 0x0000C640:word16]
	ZN = cond(ap)
	C = false
	V = false
	branch (ap & 0x00000001 << 0x00000002) != 0x00000000 l000167F7
	// succ:  l000167F4 l000167F7
l000167F4:
	goto l000169AC
	// succ:  l000169AC
l000167F7:
	v20 = 0x00000009
	Mem0[fp + -20:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	sp = sp - 0x00000004
	v21 = (uint32) 0x0100
	Mem0[sp:uint32] = v21
	ZN = cond(v21)
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = fp + -1052
	Mem0[sp:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	call fn00015256 (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	branch Test(EQ,Z) l00016812
	// succ:  l0001680E l00016812
l0001680E:
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000167AA_exit
l00016812:
	sp = sp - 0x00000004
	v26 = fp + -20
	Mem0[sp:word32] = v26
	ZN = cond(v26)
	C = false
	V = false
	sp = sp - 0x00000004
	v27 = fp + -8
	Mem0[sp:word32] = v27
	ZN = cond(v27)
	C = false
	V = false
	sp = sp - 0x00000008
	v28 = 0x0000000000000000
	Mem0[sp:word64] = v28
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	v29 = (uint32) 0x0100
	Mem0[sp:uint32] = v29
	ZN = cond(v29)
	C = false
	V = false
	sp = sp - 0x00000004
	v30 = (uint32) 0x0100
	Mem0[sp:uint32] = v30
	ZN = cond(v30)
	C = false
	V = false
	sp = sp - 0x00000004
	v31 = fp + -1052
	Mem0[sp:word32] = v31
	ZN = cond(v31)
	C = false
	V = false
	call fn0001878E (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	branch Test(EQ,Z) l00016847
	// succ:  l00016834 l00016847
l00016834:
	CZN = cond(r3 - 0x00000001)
	V = false
	branch Test(NE,Z) l00016843
	// succ:  l00016839 l00016843
l00016839:
	sp = sp - 0x00000004
	v32 = Mem0[fp + -8:word32]
	Mem0[sp:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	call fn00018BF6 (retsize: 4;)
	// succ:  l00016843
l00016843:
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000167AA_exit
l00016847:
	sp = sp - 0x00000004
	v42 = (uint32) 0x40
	Mem0[sp:uint32] = v42
	ZN = cond(v42)
	C = false
	V = false
	sp = sp - 0x00000004
	v43 = fp + -1052
	Mem0[sp:word32] = v43
	ZN = cond(v43)
	C = false
	V = false
	call fn00015256 (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	branch Test(EQ,Z) l0001685D
	// succ:  l00016859 l0001685D
l00016859:
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000167AA_exit
l0001685D:
	sp = sp - 0x00000004
	v70 = fp + -24
	Mem0[sp:word32] = v70
	ZN = cond(v70)
	C = false
	V = false
	sp = sp - 0x00000004
	v71 = fp + -12
	Mem0[sp:word32] = v71
	ZN = cond(v71)
	C = false
	V = false
	sp = sp - 0x00000004
	v72 = r2 + 256
	Mem0[sp:word32] = v72
	ZN = cond(v72)
	C = false
	V = false
	sp = sp - 0x00000004
	v73 = r2 + 128
	Mem0[sp:word32] = v73
	ZN = cond(v73)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v74 = (uint32) 0x40
	Mem0[sp:uint32] = v74
	ZN = cond(v74)
	C = false
	V = false
	sp = sp - 0x00000004
	v75 = fp + -1052
	Mem0[sp:word32] = v75
	ZN = cond(v75)
	C = false
	V = false
	call fn0001878E (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	branch Test(EQ,Z) l0001689E
	// succ:  l00016881 l0001689E
l00016881:
	CZN = cond(r3 - 0x00000001)
	V = false
	branch Test(NE,Z) l00016890
	// succ:  l00016886 l00016890
l00016886:
	sp = sp - 0x00000004
	v76 = Mem0[fp + -12:word32]
	Mem0[sp:word32] = v76
	ZN = cond(v76)
	C = false
	V = false
	call fn00018BF6 (retsize: 4;)
	// succ:  l00016890
l00016890:
	sp = sp - 0x00000004
	v79 = Mem0[fp + -8:word32]
	Mem0[sp:word32] = v79
	ZN = cond(v79)
	C = false
	V = false
	call fn00018BF6 (retsize: 4;)
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000167AA_exit
l0001689E:
	sp = sp - 0x00000004
	v77 = (uint32) 0x40
	Mem0[sp:uint32] = v77
	ZN = cond(v77)
	C = false
	V = false
	sp = sp - 0x00000004
	v78 = fp + -1052
	Mem0[sp:word32] = v78
	ZN = cond(v78)
	C = false
	V = false
	call fn00015256 (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	branch Test(EQ,Z) l000168B4
	// succ:  l000168B0 l000168B4
l000168B0:
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000167AA_exit
l000168B4:
	ap = (uint32) Mem0[r4 + 0x0000C640:word16]
	ZN = cond(ap)
	C = false
	V = false
	branch (ap & 0x00000001 << 0x00000001) == 0x00000000 l00016928
	// succ:  l000168BF l00016928
l000168BF:
	sp = sp - 0x00000004
	v80 = fp + -28
	Mem0[sp:word32] = v80
	ZN = cond(v80)
	C = false
	V = false
	sp = sp - 0x00000004
	v81 = fp + -16
	Mem0[sp:word32] = v81
	ZN = cond(v81)
	C = false
	V = false
	sp = sp - 0x00000004
	v82 = r2 + 256
	Mem0[sp:word32] = v82
	ZN = cond(v82)
	C = false
	V = false
	sp = sp - 0x00000004
	v83 = r2 + 512
	Mem0[sp:word32] = v83
	ZN = cond(v83)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v84 = (uint32) 0x40
	Mem0[sp:uint32] = v84
	ZN = cond(v84)
	C = false
	V = false
	sp = sp - 0x00000004
	v85 = fp + -1052
	Mem0[sp:word32] = v85
	ZN = cond(v85)
	C = false
	V = false
	call fn0001878E (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	branch Test(EQ,Z) l0001690A
	// succ:  l000168E3 l0001690A
l000168E3:
	CZN = cond(r3 - 0x00000001)
	V = false
	branch Test(NE,Z) l000168F2
	// succ:  l000168E8 l000168F2
l000168E8:
	sp = sp - 0x00000004
	v86 = Mem0[fp + -16:word32]
	Mem0[sp:word32] = v86
	ZN = cond(v86)
	C = false
	V = false
	call fn00018BF6 (retsize: 4;)
	// succ:  l000168F2
l000168F2:
	sp = sp - 0x00000004
	v87 = Mem0[fp + -12:word32]
	Mem0[sp:word32] = v87
	ZN = cond(v87)
	C = false
	V = false
	call fn00018BF6 (retsize: 4;)
	sp = sp - 0x00000004
	v88 = Mem0[fp + -8:word32]
	Mem0[sp:word32] = v88
	ZN = cond(v88)
	C = false
	V = false
	call fn00018BF6 (retsize: 4;)
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000167AA_exit
l0001690A:
	sp = sp - 0x00000004
	v89 = Mem0[fp + -28:word32]
	Mem0[sp:word32] = v89
	ZN = cond(v89)
	C = false
	V = false
	sp = sp - 0x00000004
	v90 = Mem0[fp + -24:word32]
	Mem0[sp:word32] = v90
	ZN = cond(v90)
	C = false
	V = false
	sp = sp - 0x00000004
	v91 = Mem0[fp + -20:word32]
	Mem0[sp:word32] = v91
	ZN = cond(v91)
	C = false
	V = false
	sp = sp - 0x00000004
	v92 = Mem0[fp + -16:word32]
	Mem0[sp:word32] = v92
	ZN = cond(v92)
	C = false
	V = false
	sp = sp - 0x00000004
	v93 = Mem0[fp + -12:word32]
	Mem0[sp:word32] = v93
	ZN = cond(v93)
	C = false
	V = false
	sp = sp - 0x00000004
	v94 = Mem0[fp + -8:word32]
	Mem0[sp:word32] = v94
	ZN = cond(v94)
	C = false
	V = false
	call fn0001530A (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	goto l0001698D
	// succ:  l0001698D
l00016928:
	sp = sp - 0x00000004
	v95 = fp + -28
	Mem0[sp:word32] = v95
	ZN = cond(v95)
	C = false
	V = false
	sp = sp - 0x00000004
	v96 = fp + -16
	Mem0[sp:word32] = v96
	ZN = cond(v96)
	C = false
	V = false
	sp = sp - 0x00000004
	v97 = r2 + 256
	Mem0[sp:word32] = v97
	ZN = cond(v97)
	C = false
	V = false
	sp = sp - 0x00000004
	v98 = r2 + 384
	Mem0[sp:word32] = v98
	ZN = cond(v98)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v99 = (uint32) 0x40
	Mem0[sp:uint32] = v99
	ZN = cond(v99)
	C = false
	V = false
	sp = sp - 0x00000004
	v100 = fp + -1052
	Mem0[sp:word32] = v100
	ZN = cond(v100)
	C = false
	V = false
	call fn0001878E (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	branch Test(EQ,Z) l00016973
	// succ:  l0001694C l00016973
l0001694C:
	CZN = cond(r3 - 0x00000001)
	V = false
	branch Test(NE,Z) l0001695B
	// succ:  l00016951 l0001695B
l00016951:
	sp = sp - 0x00000004
	v101 = Mem0[fp + -16:word32]
	Mem0[sp:word32] = v101
	ZN = cond(v101)
	C = false
	V = false
	call fn00018BF6 (retsize: 4;)
	// succ:  l0001695B
l0001695B:
	sp = sp - 0x00000004
	v111 = Mem0[fp + -12:word32]
	Mem0[sp:word32] = v111
	ZN = cond(v111)
	C = false
	V = false
	call fn00018BF6 (retsize: 4;)
	sp = sp - 0x00000004
	v112 = Mem0[fp + -8:word32]
	Mem0[sp:word32] = v112
	ZN = cond(v112)
	C = false
	V = false
	call fn00018BF6 (retsize: 4;)
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000167AA_exit
l00016973:
	sp = sp - 0x00000004
	v105 = Mem0[fp + -28:word32]
	Mem0[sp:word32] = v105
	ZN = cond(v105)
	C = false
	V = false
	sp = sp - 0x00000004
	v106 = Mem0[fp + -24:word32]
	Mem0[sp:word32] = v106
	ZN = cond(v106)
	C = false
	V = false
	sp = sp - 0x00000004
	v107 = Mem0[fp + -20:word32]
	Mem0[sp:word32] = v107
	ZN = cond(v107)
	C = false
	V = false
	sp = sp - 0x00000004
	v108 = Mem0[fp + -16:word32]
	Mem0[sp:word32] = v108
	ZN = cond(v108)
	C = false
	V = false
	sp = sp - 0x00000004
	v109 = Mem0[fp + -12:word32]
	Mem0[sp:word32] = v109
	ZN = cond(v109)
	C = false
	V = false
	sp = sp - 0x00000004
	v110 = Mem0[fp + -8:word32]
	Mem0[sp:word32] = v110
	ZN = cond(v110)
	C = false
	V = false
	call fn00015896 (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l0001698D
l0001698D:
	sp = sp - 0x00000004
	v102 = Mem0[fp + -16:word32]
	Mem0[sp:word32] = v102
	ZN = cond(v102)
	C = false
	V = false
	ZN = cond(0x00018BF4)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	v103 = Mem0[fp + -12:word32]
	Mem0[sp:word32] = v103
	ZN = cond(v103)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	v104 = Mem0[fp + -8:word32]
	Mem0[sp:word32] = v104
	ZN = cond(v104)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	goto l00016AD9
	// succ:  l00016AD9
l000169AC:
	sp = sp - 0x00000004
	v24 = (uint32) 0x40
	Mem0[sp:uint32] = v24
	ZN = cond(v24)
	C = false
	V = false
	sp = sp - 0x00000004
	v25 = fp + -1052
	Mem0[sp:word32] = v25
	ZN = cond(v25)
	C = false
	V = false
	call fn00015256 (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	branch Test(EQ,Z) l000169C2
	// succ:  l000169BE l000169C2
l000169BE:
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000167AA_exit
l000169C2:
	sp = sp - 0x00000004
	v33 = fp + -24
	Mem0[sp:word32] = v33
	ZN = cond(v33)
	C = false
	V = false
	sp = sp - 0x00000004
	v34 = fp + -12
	Mem0[sp:word32] = v34
	ZN = cond(v34)
	C = false
	V = false
	sp = sp - 0x00000004
	v36 = r2 + 256
	Mem0[sp:word32] = v36
	ZN = cond(v36)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v37 = (uint32) 0x40
	Mem0[sp:uint32] = v37
	ZN = cond(v37)
	C = false
	V = false
	sp = sp - 0x00000004
	v38 = fp + -1052
	Mem0[sp:word32] = v38
	ZN = cond(v38)
	C = false
	V = false
	call fn0001878E (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	branch Test(EQ,Z) l000169F7
	// succ:  l000169E4 l000169F7
l000169E4:
	CZN = cond(r3 - 0x00000001)
	V = false
	branch Test(NE,Z) l000169F3
	// succ:  l000169E9 l000169F3
l000169E9:
	sp = sp - 0x00000004
	v39 = Mem0[fp + -12:word32]
	Mem0[sp:word32] = v39
	ZN = cond(v39)
	C = false
	V = false
	call fn00018BF6 (retsize: 4;)
	// succ:  l000169F3
l000169F3:
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000167AA_exit
l000169F7:
	sp = sp - 0x00000004
	v40 = (uint32) 0x40
	Mem0[sp:uint32] = v40
	ZN = cond(v40)
	C = false
	V = false
	sp = sp - 0x00000004
	v41 = fp + -1052
	Mem0[sp:word32] = v41
	ZN = cond(v41)
	C = false
	V = false
	call fn00015256 (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	branch Test(EQ,Z) l00016A0D
	// succ:  l00016A09 l00016A0D
l00016A09:
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000167AA_exit
l00016A0D:
	ap = (uint32) Mem0[r4 + 0x0000C640:word16]
	ZN = cond(ap)
	C = false
	V = false
	branch (ap & 0x00000001 << 0x00000001) == 0x00000000 l00016A70
	// succ:  l00016A18 l00016A70
l00016A18:
	sp = sp - 0x00000004
	v44 = fp + -28
	Mem0[sp:word32] = v44
	ZN = cond(v44)
	C = false
	V = false
	sp = sp - 0x00000004
	v45 = fp + -16
	Mem0[sp:word32] = v45
	ZN = cond(v45)
	C = false
	V = false
	sp = sp - 0x00000004
	v46 = r2 + 256
	Mem0[sp:word32] = v46
	ZN = cond(v46)
	C = false
	V = false
	sp = sp - 0x00000004
	v47 = r2 + 512
	Mem0[sp:word32] = v47
	ZN = cond(v47)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v48 = (uint32) 0x40
	Mem0[sp:uint32] = v48
	ZN = cond(v48)
	C = false
	V = false
	sp = sp - 0x00000004
	v49 = fp + -1052
	Mem0[sp:word32] = v49
	ZN = cond(v49)
	C = false
	V = false
	call fn0001878E (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	branch Test(EQ,Z) l00016A59
	// succ:  l00016A3C l00016A59
l00016A3C:
	CZN = cond(r3 - 0x00000001)
	V = false
	branch Test(NE,Z) l00016A4B
	// succ:  l00016A41 l00016A4B
l00016A41:
	sp = sp - 0x00000004
	v50 = Mem0[fp + -16:word32]
	Mem0[sp:word32] = v50
	ZN = cond(v50)
	C = false
	V = false
	call fn00018BF6 (retsize: 4;)
	// succ:  l00016A4B
l00016A4B:
	sp = sp - 0x00000004
	v58 = Mem0[fp + -12:word32]
	Mem0[sp:word32] = v58
	ZN = cond(v58)
	C = false
	V = false
	call fn00018BF6 (retsize: 4;)
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000167AA_exit
l00016A59:
	sp = sp - 0x00000004
	v66 = Mem0[fp + -28:word32]
	Mem0[sp:word32] = v66
	ZN = cond(v66)
	C = false
	V = false
	sp = sp - 0x00000004
	v67 = Mem0[fp + -24:word32]
	Mem0[sp:word32] = v67
	ZN = cond(v67)
	C = false
	V = false
	sp = sp - 0x00000004
	v68 = Mem0[fp + -16:word32]
	Mem0[sp:word32] = v68
	ZN = cond(v68)
	C = false
	V = false
	sp = sp - 0x00000004
	v69 = Mem0[fp + -12:word32]
	Mem0[sp:word32] = v69
	ZN = cond(v69)
	C = false
	V = false
	call fn00015E22 (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	goto l00016AC5
	// succ:  l00016AC5
l00016A70:
	sp = sp - 0x00000004
	v51 = fp + -28
	Mem0[sp:word32] = v51
	ZN = cond(v51)
	C = false
	V = false
	sp = sp - 0x00000004
	v52 = fp + -16
	Mem0[sp:word32] = v52
	ZN = cond(v52)
	C = false
	V = false
	sp = sp - 0x00000004
	v53 = r2 + 256
	Mem0[sp:word32] = v53
	ZN = cond(v53)
	C = false
	V = false
	sp = sp - 0x00000004
	v54 = r2 + 384
	Mem0[sp:word32] = v54
	ZN = cond(v54)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v55 = (uint32) 0x40
	Mem0[sp:uint32] = v55
	ZN = cond(v55)
	C = false
	V = false
	sp = sp - 0x00000004
	v56 = fp + -1052
	Mem0[sp:word32] = v56
	ZN = cond(v56)
	C = false
	V = false
	call fn0001878E (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	branch Test(EQ,Z) l00016AB1
	// succ:  l00016A94 l00016AB1
l00016A94:
	CZN = cond(r3 - 0x00000001)
	V = false
	branch Test(NE,Z) l00016AA3
	// succ:  l00016A99 l00016AA3
l00016A99:
	sp = sp - 0x00000004
	v57 = Mem0[fp + -16:word32]
	Mem0[sp:word32] = v57
	ZN = cond(v57)
	C = false
	V = false
	call fn00018BF6 (retsize: 4;)
	// succ:  l00016AA3
l00016AA3:
	sp = sp - 0x00000004
	v59 = Mem0[fp + -12:word32]
	Mem0[sp:word32] = v59
	ZN = cond(v59)
	C = false
	V = false
	call fn00018BF6 (retsize: 4;)
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000167AA_exit
l00016AB1:
	sp = sp - 0x00000004
	v60 = Mem0[fp + -28:word32]
	Mem0[sp:word32] = v60
	ZN = cond(v60)
	C = false
	V = false
	sp = sp - 0x00000004
	v61 = Mem0[fp + -24:word32]
	Mem0[sp:word32] = v61
	ZN = cond(v61)
	C = false
	V = false
	sp = sp - 0x00000004
	v62 = Mem0[fp + -16:word32]
	Mem0[sp:word32] = v62
	ZN = cond(v62)
	C = false
	V = false
	sp = sp - 0x00000004
	v63 = Mem0[fp + -12:word32]
	Mem0[sp:word32] = v63
	ZN = cond(v63)
	C = false
	V = false
	call fn000162E6 (retsize: 4;)
	r3 = r0
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00016AC5
l00016AC5:
	sp = sp - 0x00000004
	v64 = Mem0[fp + -16:word32]
	Mem0[sp:word32] = v64
	ZN = cond(v64)
	C = false
	V = false
	call fn00018BF6 (retsize: 4;)
	sp = sp - 0x00000004
	v65 = Mem0[fp + -12:word32]
	Mem0[sp:word32] = v65
	ZN = cond(v65)
	C = false
	V = false
	call fn00018BF6 (retsize: 4;)
	// succ:  l00016AD9
l00016AD9:
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000167AA_exit
fn000167AA_exit:


// fn000173CA
// Return size: 4
define fn000173CA
fn000173CA_entry:
	// succ:  l000173CA
l000173CA:
	sp = fp
	sp = sp - 0x0000001C
	CVZN = cond(sp)
	ZN = cond(0x00007D48)
	C = false
	V = false
	ZN = cond(0xFFFFB15C)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	r6 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r11 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	v12 = 0x00000000
	Mem0[Mem0[ap + 4:word32]:word32] = v12
	Z = true
	N = false
	C = false
	V = false
	v13 = 0x00000000
	Mem0[Mem0[ap + 8:word32]:word32] = v13
	Z = true
	N = false
	C = false
	V = false
	v16 = fp + -25
	Mem0[r3 + 1511:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	r8 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r2 = (uint32) Mem0[r3 + 0x0000C688:word16]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r8 - r2)
	V = false
	branch Test(ULT,C) l00017403
	// succ:  l00017400 l00017403
l00017400:
	goto l000175F6
	// succ:  l000175F6
l00017403:
	ZN = cond(0x0000DC74)
	C = false
	V = false
	ZN = cond(0x00018C18)
	C = false
	V = false
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l00017414
l00017414:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v21 = r3 + 152
	Mem0[sp:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	call fn0000D5BE (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00017429
	// succ:  l00017425 l00017429
l00017425:
	r0 = 0x00000033
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000173CA_exit
l00017429:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v23 = r3 + 0x0000C634
	Mem0[sp:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	sp = sp - 0x00000004
	v24 = r3 + 152
	Mem0[sp:word32] = v24
	ZN = cond(v24)
	C = false
	V = false
	call fn000192DA (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0001748E
	// succ:  l00017440 l0001748E
l00017440:
	sp = sp - 0x00000004
	v25 = (uint32) 0x0401
	Mem0[sp:uint32] = v25
	ZN = cond(v25)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r8
	ZN = cond(r8)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r7
	ZN = cond(r7)
	C = false
	V = false
	sp = sp - 0x00000004
	v27 = r3 + 1515
	Mem0[sp:word32] = v27
	ZN = cond(v27)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v28 = r3 + 1515
	Mem0[sp:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	r2 = Mem0[r3 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	v29 = (uint32) 0x0401
	Mem0[sp:uint32] = v29
	ZN = cond(v29)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r10
	ZN = cond(r10)
	C = false
	V = false
	sp = sp - 0x00000004
	v31 = r3 + 1515
	Mem0[sp:word32] = v31
	ZN = cond(v31)
	C = false
	V = false
	call fn000192D2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	v32 = r3 + 1515
	Mem0[sp:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r3
	ZN = cond(r3)
	C = false
	V = false
	r2 = Mem0[r3 + 0x0000C839:word32]
	ZN = cond(r2)
	C = false
	V = false
	call Mem0[r2:word32] + 2 (retsize: 4;)
	r0 = 0x00000003
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000173CA_exit
l0001748E:
	call fn00011C0A (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0001749A
	// succ:  l00017499 l0001749A
l00017499:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000173CA_exit
l0001749A:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000002
	ZN = cond(0x00000002)
	C = false
	V = false
	sp = sp - 0x00000004
	v36 = (uint32) Mem0[r3 + 0x0000C670:word16]
	Mem0[sp:uint32] = v36
	ZN = cond(v36)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000174B3
	// succ:  l000174AA l000174B3
l000174AA:
	r11 = r0
	ZN = cond(r11)
	C = false
	V = false
	CZN = cond(r0 - 0x00000001)
	V = false
	branch Test(LE,ZN) l000174B3
	// succ:  l000174B2 l000174B3
l000174B2:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000173CA_exit
l000174B3:
	ZN = cond(Mem0[r3 + 0x0000C627:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000174CE
	// succ:  l000174BB l000174CE
l000174BB:
	sp = sp - 0x00000004
	v38 = Mem0[r3 + 0x0000C627:word32]
	Mem0[sp:word32] = v38
	ZN = cond(v38)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	v39 = 0x00000000
	Mem0[r3 + 0x0000C627:word32] = v39
	Z = true
	N = false
	C = false
	V = false
	// succ:  l000174CE
l000174CE:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000003
	ZN = cond(0x00000003)
	C = false
	V = false
	sp = sp - 0x00000004
	v40 = (uint32) Mem0[r3 + 0x0000C672:word16]
	Mem0[sp:uint32] = v40
	ZN = cond(v40)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000174E7
	// succ:  l000174DE l000174E7
l000174DE:
	r11 = r0
	ZN = cond(r11)
	C = false
	V = false
	CZN = cond(r0 - 0x00000001)
	V = false
	branch Test(LE,ZN) l000174E7
	// succ:  l000174E6 l000174E7
l000174E6:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000173CA_exit
l000174E7:
	ZN = cond(Mem0[r3 + 108:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0001754B
	// succ:  l000174EC l0001754B
l000174EC:
	r0 = Mem0[r3 + 144:word32] - 0x00000004
	CVZN = cond(r0)
	r6 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r2 = r0 + 0x00000004
	CVZN = cond(r2)
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0001751B
	// succ:  l000174FC l0001751B
l000174FC:
	sp = sp - 0x00000004
	v41 = Mem0[r3 + 16:word32]
	Mem0[sp:word32] = v41
	ZN = cond(v41)
	C = false
	V = false
	sp = sp - 0x00000004
	v42 = Mem0[r2:word32]
	Mem0[sp:word32] = v42
	ZN = cond(v42)
	C = false
	V = false
	sp = sp - 0x00000004
	v43 = r3 + 0x0000C701
	Mem0[sp:word32] = v43
	ZN = cond(v43)
	C = false
	V = false
	call Mem0[r5:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00017514
	// succ:  l0001750E l00017514
l0001750E:
	r6 = 0x00000001
	ZN = cond(r6)
	C = false
	V = false
	goto l0001751B
	// succ:  l0001751B
l00017514:
	r2 = r2 + 0x00000004
	CVZN = cond(r2)
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000174FC
	// succ:  l0001751B l000174FC
l0001751B:
	ZN = cond(r6 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0001754B
	// succ:  l0001751F l0001754B
l0001751F:
	r2 = Mem0[r3 + 148:word32] - 0x00000004
	CVZN = cond(r2)
	r2 = r2 + 0x00000004
	CVZN = cond(r2)
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0001754B
	// succ:  l0001752C l0001754B
l0001752C:
	sp = sp - 0x00000004
	v57 = Mem0[r3 + 16:word32]
	Mem0[sp:word32] = v57
	ZN = cond(v57)
	C = false
	V = false
	sp = sp - 0x00000004
	v58 = Mem0[r2:word32]
	Mem0[sp:word32] = v58
	ZN = cond(v58)
	C = false
	V = false
	sp = sp - 0x00000004
	v59 = r3 + 0x0000C701
	Mem0[sp:word32] = v59
	ZN = cond(v59)
	C = false
	V = false
	call Mem0[r5:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00017544
	// succ:  l0001753E l00017544
l0001753E:
	r6 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	goto l0001754B
	// succ:  l0001754B
l00017544:
	r2 = r2 + 0x00000004
	CVZN = cond(r2)
	ZN = cond(Mem0[r2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0001752C
	// succ:  l0001754B l0001752C
l0001754B:
	ZN = cond(Mem0[r3 + 108:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00017554
	// succ:  l00017550 l00017554
l00017550:
	ZN = cond(r6 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000175C4
	// succ:  l00017554 l000175C4
l00017554:
	sp = sp - 0x00000004
	v45 = r3 + 0x0000C701
	Mem0[sp:word32] = v45
	ZN = cond(v45)
	C = false
	V = false
	call fn000192C6 (retsize: 4;)
	v47 = 0x00
	r4 = DPB(r4, v47, 0)
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0001759B
	// succ:  l00017567 l0001759B
l00017567:
	r0 = r0 - 0x00000001
	CVZN = cond(r0)
	v48 = Mem0[r3 + 0x0000C701 + r0:byte]
	r2 = DPB(r2, v48, 0)
	ZN = cond(v48)
	C = false
	V = false
	CZN = cond((byte) r2 - 0x2F)
	V = false
	branch Test(EQ,Z) l00017599
	// succ:  l00017576 l00017599
l00017576:
	r0 = Mem0[r3 + 1511:word32]
	ZN = cond(r0)
	C = false
	V = false
	ZN = cond(Mem0[r0 + 12:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0001759B
	// succ:  l00017580 l0001759B
l00017580:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x0000002F
	ZN = cond(0x0000002F)
	C = false
	V = false
	sp = sp - 0x00000004
	v49 = r3 + 0x0000C701
	Mem0[sp:word32] = v49
	ZN = cond(v49)
	C = false
	V = false
	call fn00019262 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0001759B
	// succ:  l00017593 l0001759B
l00017593:
	CZN = cond((byte) r2 - 0x5C)
	V = false
	branch Test(NE,Z) l0001759B
	// succ:  l00017599 l0001759B
l00017599:
	v50 = (byte) r4 + 0x01
	r4 = DPB(r4, v50, 0)
	CVZN = cond(v50)
	// succ:  l0001759B
l0001759B:
	r2 = (int32) (int8) r4
	VZN = cond(r2)
	C = false
	branch Test(NE,Z) l000175C4
	// succ:  l000175A0 l000175C4
l000175A0:
	sp = sp - 0x00000004
	v53 = (uint32) Mem0[r3 + 0x0000C660:word16]
	Mem0[sp:uint32] = v53
	ZN = cond(v53)
	C = false
	V = false
	sp = sp - 0x00000004
	v54 = (uint32) Mem0[r3 + 0x0000C662:word16]
	Mem0[sp:uint32] = v54
	ZN = cond(v54)
	C = false
	V = false
	call fn0000BC8A (retsize: 4;)
	r2 = Mem0[ap + 4:word32]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(Mem0[r2:word32] - r0)
	V = false
	branch Test(UGE,C) l000175C1
	// succ:  l000175BE l000175C1
l000175BE:
	v55 = r0
	Mem0[r2:word32] = v55
	ZN = cond(v55)
	C = false
	V = false
	// succ:  l000175C1
l000175C1:
	v56 = Mem0[ap + 8:word32] + 0x00000001
	Mem0[Mem0[ap + 8:word32]:word32] = v56
	CVZN = cond(v56)
	// succ:  l000175C4
l000175C4:
	ZN = cond(Mem0[r3 + 0x0000C674:word16] - 0x0000)
	C = false
	V = false
	branch Test(EQ,Z) l000175E5
	// succ:  l000175CC l000175E5
l000175CC:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v51 = (uint32) Mem0[r3 + 0x0000C674:word16]
	Mem0[sp:uint32] = v51
	ZN = cond(v51)
	C = false
	V = false
	call Mem0[r9:word32] + 2 (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000175E5
	// succ:  l000175DC l000175E5
l000175DC:
	r11 = r0
	ZN = cond(r11)
	C = false
	V = false
	CZN = cond(r0 - 0x00000001)
	V = false
	branch Test(LE,ZN) l000175E5
	// succ:  l000175E4 l000175E5
l000175E4:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000173CA_exit
l000175E5:
	r8 = r8 + 0x00000001
	CVZN = cond(r8)
	r2 = (uint32) Mem0[r3 + 0x0000C688:word16]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r8 - r2)
	V = false
	branch Test(UGE,C) l000175F6
	// succ:  l000175F3 l000175F6
l000175F3:
	goto l00017414
	// succ:  l00017414
l000175F6:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = r3 + 152
	Mem0[sp:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	call fn0000D5BE (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0001760B
	// succ:  l00017607 l0001760B
l00017607:
	r0 = 0x00000033
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000173CA_exit
l0001760B:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000004
	ZN = cond(0x00000004)
	C = false
	V = false
	sp = sp - 0x00000004
	v33 = r3 + 0x0000C639
	Mem0[sp:word32] = v33
	ZN = cond(v33)
	C = false
	V = false
	sp = sp - 0x00000004
	v34 = r3 + 152
	Mem0[sp:word32] = v34
	ZN = cond(v34)
	C = false
	V = false
	call fn000192DA (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0001764D
	// succ:  l00017622 l0001764D
l00017622:
	sp = sp - 0x00000004
	v35 = (uint32) 0x0401
	Mem0[sp:uint32] = v35
	ZN = cond(v35)
	C = false
	V = false
l0001764D:
	ZN = cond(Mem0[Mem0[ap + 8:word32]:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0001765A
	// succ:  l00017652 l0001765A
l00017652:
	CZN = cond(r11 - 0x00000001)
	V = false
	branch Test(GT,ZN) l0001765A
	// succ:  l00017657 l0001765A
l00017657:
	r11 = 0x0000000B
	ZN = cond(r11)
	C = false
	V = false
	// succ:  l0001765A
l0001765A:
	r0 = r11
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000173CA_exit
fn000173CA_exit:


// fn00017662
// Return size: 4
define fn00017662
fn00017662_entry:
	// succ:  l00017662
l00017662:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(Mem0[ap + 4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0001766D
	// succ:  l0001766A l0001766D
l0001766A:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00017662_exit
l0001766D:
	r4 = Mem0[ap + 4:word32]
	ZN = cond(r4)
	C = false
	V = false
	CZN = cond(r4 - 0x001E8480)
	V = false
	branch Test(UGT,CZ) l0001767D
	// succ:  l0001767A l0001767D
l0001767A:
	goto l000176FC
	// succ:  l000176FC
l0001767D:
	r1 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r0 = r4
	ZN = cond(r0)
	C = false
	V = false
	r2 = 0x000003E8
	ZN = cond(r2)
	C = false
	V = false
	branch Test(GE,N) l00017694
	// succ:  l0001768B l00017694
l0001768B:
	CZN = cond(r2 - r0)
	V = false
	branch Test(UGT,CZ) l00017699
	// succ:  l00017690 l00017699
l00017690:
	r1 = r1 + 0x00000001
	CVZN = cond(r1)
	goto l00017699
	// succ:  l00017699
l00017694:
l00017699:
	r6 = r1
	ZN = cond(r6)
	C = false
	V = false
	r3 = Mem0[ap + 8:word32]
	ZN = cond(r3)
	C = false
	V = false
	CZN = cond(r4 - r3)
	V = false
	branch Test(ULT,C) l000176D0
	// succ:  l000176A5 l000176D0
l000176A5:
	r2 = r4 - r3
	CVZN = cond(r2)
	r0 = (uint32) SLICE(r6, ui31, 1)
	ZN = cond(r0)
	V = false
	r2 = r2 + r0
	CVZN = cond(r2)
	r1 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r0 = r2
	ZN = cond(r0)
	C = false
	V = false
	r2 = r6
	ZN = cond(r2)
	C = false
	V = false
	branch Test(GE,N) l000176C4
	// succ:  l000176BB l000176C4
l000176BB:
	CZN = cond(r2 - r0)
	V = false
	branch Test(UGT,CZ) l000176C9
	// succ:  l000176C0 l000176C9
l000176C0:
	r1 = r1 + 0x00000001
	CVZN = cond(r1)
	goto l000176C9
	// succ:  l000176C9
l000176C4:
l000176C9:
	r5 = r1
	ZN = cond(r5)
	C = false
	V = false
	goto l000176F8
	// succ:  l000176F8
l000176D0:
	r3 = r3 - r4
	CVZN = cond(r3)
	r0 = (uint32) SLICE(r6, ui31, 1)
	ZN = cond(r0)
	V = false
	r3 = r3 + r0
	CVZN = cond(r3)
	r1 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	r2 = r6
	ZN = cond(r2)
	C = false
	V = false
	branch Test(GE,N) l000176F0
	// succ:  l000176E5 l000176F0
l000176E5:
	CZN = cond(r2 - r0)
	V = false
	branch Test(UGT,CZ) l000176F5
	// succ:  l000176EA l000176F5
l000176EA:
	r1 = r1 + 0x00000001
	CVZN = cond(r1)
	goto l000176F5
	// succ:  l000176F5
l000176F0:
l000176F5:
	r5 = -r1
	CVZN = cond(r5)
	// succ:  l000176F8
l000176F8:
	r0 = r5
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00017662_exit
l000176FC:
	r6 = r4
	ZN = cond(r6)
	C = false
	V = false
	r3 = Mem0[ap + 8:word32]
	ZN = cond(r3)
	C = false
	V = false
	CZN = cond(r4 - r3)
	V = false
	branch Test(ULT,C) l0001773C
	// succ:  l00017708 l0001773C
l00017708:
	r2 = r4 - r3
	CVZN = cond(r2)
	r2 = r2 * 0x000003E8
	CVZN = cond(r2)
	r0 = (uint32) SLICE(r6, ui31, 1)
	ZN = cond(r0)
	V = false
	r2 = r2 + r0
	CVZN = cond(r2)
	r1 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r0 = r2
	ZN = cond(r0)
	C = false
	V = false
	r2 = r6
	ZN = cond(r2)
	C = false
	V = false
	branch Test(GE,N) l00017730
	// succ:  l00017725 l00017730
l00017725:
	CZN = cond(r2 - r0)
	V = false
	branch Test(UGT,CZ) l00017735
	// succ:  l0001772A l00017735
l0001772A:
	r1 = r1 + 0x00000001
	CVZN = cond(r1)
	goto l00017735
	// succ:  l00017735
l00017730:
l00017735:
	r5 = r1
	ZN = cond(r5)
	C = false
	V = false
	goto l0001776C
	// succ:  l0001776C
l0001773C:
	r3 = r3 - r4
	CVZN = cond(r3)
	r3 = r3 * 0x000003E8
	CVZN = cond(r3)
	r0 = (uint32) SLICE(r6, ui31, 1)
	ZN = cond(r0)
	V = false
	r3 = r3 + r0
	CVZN = cond(r3)
	r1 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	r2 = r6
	ZN = cond(r2)
	C = false
	V = false
	branch Test(GE,N) l00017764
	// succ:  l00017758 l00017764
l00017758:
	CZN = cond(r2 - r0)
	V = false
	branch Test(UGT,CZ) l00017769
	// succ:  l0001775D l00017769
l0001775D:
	r1 = r1 + 0x00000001
	CVZN = cond(r1)
	goto l00017769
	// succ:  l00017769
l00017764:
l00017769:
	r5 = -r1
	CVZN = cond(r5)
	// succ:  l0001776C
l0001776C:
	r0 = r5
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00017662_exit
fn00017662_exit:


// fn00017772
// Return size: 4
define fn00017772
fn00017772_entry:
	// succ:  l00017772
l00017772:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFE69A8)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	sp = sp - 0x00000004
	v8 = r2 + 1515
	Mem0[sp:word32] = v8
	ZN = cond(v8)
	C = false
	V = false
	sp = sp - 0x00000004
	v9 = r2 + 0x0000C701
	Mem0[sp:word32] = v9
	ZN = cond(v9)
	C = false
	V = false
	call fn00010892 (retsize: 4;)
	ap = r0
	ZN = cond(ap)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = ap
	ZN = cond(ap)
	C = false
	V = false
	call fn000192C6 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r0
	ZN = cond(r0)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = ap
	ZN = cond(ap)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000001
	ZN = cond(0x00000001)
	C = false
	V = false
	sp = sp - 0x00000004
	v13 = r3 + 18
	Mem0[sp:word32] = v13
	ZN = cond(v13)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r2 + 0x0000C839:word32]
	ZN = cond(ap)
	C = false
	V = false
	call Mem0[ap:word32] + 2 (retsize: 4;)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00017772_exit
fn00017772_exit:


// fn000177CA
// Return size: 0
define fn000177CA
fn000177CA_entry:
	// succ:  l000177CA
l000177CA:
	sp = fp
	sp = sp - 0x0000000C
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	r4 = Mem0[r6 + 0x0000C831:word32]
	ZN = cond(r4)
	C = false
	V = false
	r3 = Mem0[r6 + 0x0000C835:word32]
	ZN = cond(r3)
	C = false
	V = false
	r8 = Mem0[r6 + 0x0000C82D:word32]
	ZN = cond(r8)
	C = false
	V = false
	r5 = Mem0[ap + 12:word32]
	ZN = cond(r5)
	C = false
	V = false
fn000177CA_exit:


// fn00017C2E
// Return size: 0
define fn00017C2E
fn00017C2E_entry:
	// succ:  l00017C2E
l00017C2E:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	r2 = Mem0[r4 + 0x0000C831:word32]
	ZN = cond(r2)
	C = false
	V = false
	ap = Mem0[r4 + 0x0000C835:word32]
	ZN = cond(ap)
	C = false
	V = false
	r6 = Mem0[r4 + 0x0000C82D:word32]
	ZN = cond(r6)
	C = false
	V = false
	r7 = ap & ~0xFFFFFFF8
	ZN = cond(r7)
	C = false
	V = false
	r3 = 0x00000020 - r7
	CVZN = cond(r3)
fn00017C2E_exit:


// fn00017DEE
// Return size: 4
define fn00017DEE
fn00017DEE_entry:
	// succ:  l00017DEE
l00017DEE:
	sp = fp
	sp = sp + -1160
	ZN = cond(sp)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFFB014)
	C = false
	V = false
	ZN = cond(Mem0[r3 + 0x0000C81D:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00017E0C
	// succ:  l00017E09 l00017E0C
l00017E09:
	goto l00017F1F
	// succ:  l00017F1F
l00017E0C:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r2 = fp + -1156
	ZN = cond(r2)
	C = false
	V = false
	// succ:  l00017E14
l00017E14:
	v12 = 0x00000008
	Mem0[r2:word32] = v12
	ZN = cond(v12)
	C = false
	V = false
	r2 = r2 + 0x00000004
	CVZN = cond(r2)
	r0 = r0 + 0x00000001
	CVZN = cond(r0)
	branch r0 <= 0x0000008F l00017E14
	// succ:  l00017E22 l00017E14
l00017E22:
	CZN = cond(r0 - 0x00000100)
	V = false
	branch Test(GE,N) l00017E3D
	// succ:  l00017E2B l00017E3D
l00017E2B:
	// succ:  l00017E2C
l00017E2C:
	v15 = 0x00000009
	Mem0[fp + -1156:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	r0 = r0 + 0x00000001
	CVZN = cond(r0)
	CZN = cond(r0 - 0x00000100)
	V = false
	branch Test(LT,N) l00017E2C
	// succ:  l00017E3D l00017E2C
l00017E3D:
	CZN = cond(r0 - 0x00000118)
	V = false
	branch Test(GE,N) l00017E59
	// succ:  l00017E46 l00017E59
l00017E46:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l00017E48
l00017E48:
	v16 = 0x00000007
	Mem0[fp + -1156:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	r0 = r0 + 0x00000001
	CVZN = cond(r0)
	CZN = cond(r0 - 0x00000118)
	V = false
	branch Test(LT,N) l00017E48
	// succ:  l00017E59 l00017E48
l00017E59:
	CZN = cond(r0 - 0x00000120)
	V = false
	branch Test(GE,N) l00017E75
	// succ:  l00017E62 l00017E75
l00017E62:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l00017E64
l00017E64:
	v17 = 0x00000008
	Mem0[fp + -1156:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	r0 = r0 + 0x00000001
	CVZN = cond(r0)
	CZN = cond(r0 - 0x00000120)
	V = false
	branch Test(LT,N) l00017E64
	// succ:  l00017E75 l00017E64
l00017E75:
	v18 = 0x00000007
	Mem0[r3 + 0x0000C825:word32] = v18
	ZN = cond(v18)
	C = false
	V = false
	sp = sp - 0x00000004
	v19 = r3 + 0x0000C825
	Mem0[sp:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	sp = sp - 0x00000004
	v20 = r3 + 0x0000C81D
	Mem0[sp:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = r5 + 138
	Mem0[sp:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	sp = sp - 0x00000004
	v23 = r5 + 76
	Mem0[sp:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	sp = sp - 0x00000004
	v24 = (uint32) 0x0101
	Mem0[sp:uint32] = v24
	ZN = cond(v24)
	C = false
	V = false
	sp = sp - 0x00000004
	v25 = (uint32) 0x0120
	Mem0[sp:uint32] = v25
	ZN = cond(v25)
	C = false
	V = false
	sp = sp - 0x00000004
	v26 = fp + -1156
	Mem0[sp:word32] = v26
	ZN = cond(v26)
	C = false
	V = false
	call fn0001878E (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00017EAF
	// succ:  l00017EA8 l00017EAF
l00017EA8:
	v27 = 0x00000000
	Mem0[r3 + 0x0000C81D:word32] = v27
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00017DEE_exit
l00017EAF:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r2 = fp + 0xFFFFFB7C
	ZN = cond(r2)
	C = false
	V = false
	// succ:  l00017EB8
l00017EB8:
	v33 = 0x00000005
	Mem0[r2:word32] = v33
	ZN = cond(v33)
	C = false
	V = false
	r2 = r2 + 0x00000004
	CVZN = cond(r2)
	r0 = r0 + 0x00000001
	CVZN = cond(r0)
	branch r0 <= 0x0000001D l00017EB8
	// succ:  l00017EC2 l00017EB8
l00017EC2:
	v34 = 0x00000005
	Mem0[r3 + 0x0000C829:word32] = v34
	ZN = cond(v34)
	C = false
	V = false
	sp = sp - 0x00000004
	v35 = r3 + 0x0000C829
	Mem0[sp:word32] = v35
	ZN = cond(v35)
	C = false
	V = false
	sp = sp - 0x00000004
	v36 = r3 + 0x0000C821
	Mem0[sp:word32] = v36
	ZN = cond(v36)
	C = false
	V = false
	sp = sp - 0x00000004
	v37 = r5 + 260
	Mem0[sp:word32] = v37
	ZN = cond(v37)
	C = false
	V = false
	sp = sp - 0x00000004
	v38 = r5 + 200
	Mem0[sp:word32] = v38
	ZN = cond(v38)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x0000001E
	ZN = cond(0x0000001E)
	C = false
	V = false
	sp = sp - 0x00000004
	v39 = fp + -1156
	Mem0[sp:word32] = v39
	ZN = cond(v39)
	C = false
	V = false
	call fn0001878E (retsize: 4;)
	r6 = r0
	ZN = cond(r6)
	C = false
	V = false
	CZN = cond(r6 - 0x00000001)
	V = false
	branch Test(LE,ZN) l00017F1F
	// succ:  l00017EF4 l00017F1F
l00017EF4:
	r4 = Mem0[r3 + 0x0000C81D:word32]
	ZN = cond(r4)
	C = false
	V = false
	ap = r4
	ZN = cond(ap)
	C = false
	V = false
	branch Test(EQ,Z) l00017F15
	// succ:  l00017F00 l00017F15
l00017F00:
	ap = ap - 0x00000006
	CVZN = cond(ap)
	r2 = Mem0[ap + 2:word32]
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = ap
	ZN = cond(ap)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	ap = r2
	ZN = cond(ap)
	C = false
	V = false
	branch Test(NE,Z) l00017F00
	// succ:  l00017F15 l00017F00
l00017F15:
	v42 = 0x00000000
	Mem0[r3 + 0x0000C81D:word32] = v42
	Z = true
	N = false
	C = false
	V = false
	r0 = r6
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00017DEE_exit
l00017F1F:
	sp = sp - 0x00000004
	v29 = Mem0[r3 + 0x0000C829:word32]
	Mem0[sp:word32] = v29
	ZN = cond(v29)
	C = false
	V = false
	sp = sp - 0x00000004
	v30 = Mem0[r3 + 0x0000C825:word32]
	Mem0[sp:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	sp = sp - 0x00000004
	v31 = Mem0[r3 + 0x0000C821:word32]
	Mem0[sp:word32] = v31
	ZN = cond(v31)
	C = false
	V = false
	sp = sp - 0x00000004
	v32 = Mem0[r3 + 0x0000C81D:word32]
	Mem0[sp:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	call fn000177CA (retsize: 4;)
	r2 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00017F46
	// succ:  l00017F44 l00017F46
l00017F44:
	r2 = r2 + 0x00000001
	CVZN = cond(r2)
	// succ:  l00017F46
l00017F46:
	r0 = r2
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00017DEE_exit
fn00017DEE_exit:


// fn00017F4E
// Return size: 4
define fn00017F4E
fn00017F4E_entry:
	// succ:  l00017F4E
l00017F4E:
	sp = fp
	sp = sp + -1344
	ZN = cond(sp)
	C = false
	V = false
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(0xFFFFB014)
	C = false
	V = false
	r3 = Mem0[r5 + 0x0000C831:word32]
	ZN = cond(r3)
	C = false
	V = false
	r2 = Mem0[r5 + 0x0000C835:word32]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x00000005)
	V = false
	branch Test(UGE,C) l00017FB9
	// succ:  l00017F74 l00017FB9
l00017F74:
	v10 = Mem0[r5 + 0x0000C5FB:word32] - 0x00000001
	Mem0[r5 + 0x0000C5FB:word32] = v10
	CVZN = cond(v10)
	branch Test(LT,N) l00017F90
	// succ:  l00017F7C l00017F90
l00017F7C:
	r4 = Mem0[r5 + 0x0000C5F7:word32]
	ZN = cond(r4)
	C = false
	V = false
	v14 = Mem0[r5 + 0x0000C5F7:word32] + 0x00000001
	Mem0[r5 + 0x0000C5F7:word32] = v14
	CVZN = cond(v14)
	r6 = (uint32) Mem0[r4:byte]
	ZN = cond(r6)
	C = false
	V = false
	goto l00017F9A
	// succ:  l00017F9A
l00017F90:
	call fn0000D69A (retsize: 4;)
	r6 = r0
	ZN = cond(r6)
	C = false
	V = false
	// succ:  l00017F9A
l00017F9A:
	r4 = r6
	ZN = cond(r4)
	C = false
	V = false
	CZN = cond(r4 - 0xFFFFFFFF)
	V = false
	branch Test(NE,Z) l00017FAA
	// succ:  l00017FA6 l00017FAA
l00017FA6:
	r0 = 0x00000001
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00017F4E_exit
l00017FAA:
	r4 = __ashift(r4, r2)
	VZN = cond(r4)
	C = false
	r3 = r3 | r4
	ZN = cond(r3)
	C = false
	V = false
	r2 = r2 + 0x00000008
	CVZN = cond(r2)
	CZN = cond(r2 - 0x00000005)
	V = false
	branch Test(ULT,C) l00017F74
	// succ:  l00017FB9 l00017F74
l00017FB9:
	r4 = r3 & ~0xFFFFFFE0
	ZN = cond(r4)
	C = false
	V = false
	v16 = r4 + 0x00000101
	Mem0[sp + 32:word32] = v16
	CVZN = cond(v16)
	r3 = (uint32) SLICE(r3, ui27, 5)
	ZN = cond(r3)
	V = false
	r2 = r2 - 0x00000005
	CVZN = cond(r2)
	CZN = cond(r2 - 0x00000005)
	V = false
	branch Test(UGE,C) l0001801D
	// succ:  l00017FD7 l0001801D
l00017FD7:
	// succ:  l00017FD8
l00017FD8:
	v17 = Mem0[r5 + 0x0000C5FB:word32] - 0x00000001
	Mem0[r5 + 0x0000C5FB:word32] = v17
	CVZN = cond(v17)
	branch Test(LT,N) l00017FF4
	// succ:  l00017FE0 l00017FF4
l00017FE0:
	r4 = Mem0[r5 + 0x0000C5F7:word32]
	ZN = cond(r4)
	C = false
	V = false
	v18 = Mem0[r5 + 0x0000C5F7:word32] + 0x00000001
	Mem0[r5 + 0x0000C5F7:word32] = v18
	CVZN = cond(v18)
	r6 = (uint32) Mem0[r4:byte]
	ZN = cond(r6)
	C = false
	V = false
	goto l00017FFE
	// succ:  l00017FFE
l00017FF4:
	call fn0000D69A (retsize: 4;)
	r6 = r0
	ZN = cond(r6)
	C = false
	V = false
	// succ:  l00017FFE
l00017FFE:
	r4 = r6
	ZN = cond(r4)
	C = false
	V = false
	CZN = cond(r4 - 0xFFFFFFFF)
	V = false
	branch Test(NE,Z) l0001800E
	// succ:  l0001800A l0001800E
l0001800A:
	r0 = 0x00000001
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00017F4E_exit
l0001800E:
	r4 = __ashift(r4, r2)
	VZN = cond(r4)
	C = false
	r3 = r3 | r4
	ZN = cond(r3)
	C = false
	V = false
	r2 = r2 + 0x00000008
	CVZN = cond(r2)
	CZN = cond(r2 - 0x00000005)
	V = false
	branch Test(ULT,C) l00017FD8
	// succ:  l0001801D l00017FD8
l0001801D:
	r4 = r3 & ~0xFFFFFFE0
	ZN = cond(r4)
	C = false
	V = false
	v24 = r4 + 0x00000001
	Mem0[sp + 28:word32] = v24
	CVZN = cond(v24)
	r3 = (uint32) SLICE(r3, ui27, 5)
	ZN = cond(r3)
	V = false
	r2 = r2 - 0x00000005
	CVZN = cond(r2)
	CZN = cond(r2 - 0x00000004)
	V = false
	branch Test(UGE,C) l0001807D
	// succ:  l00018037 l0001807D
l00018037:
	// succ:  l00018038
l00018038:
	v25 = Mem0[r5 + 0x0000C5FB:word32] - 0x00000001
	Mem0[r5 + 0x0000C5FB:word32] = v25
	CVZN = cond(v25)
	branch Test(LT,N) l00018054
	// succ:  l00018040 l00018054
l00018040:
	r4 = Mem0[r5 + 0x0000C5F7:word32]
	ZN = cond(r4)
	C = false
	V = false
	v26 = Mem0[r5 + 0x0000C5F7:word32] + 0x00000001
	Mem0[r5 + 0x0000C5F7:word32] = v26
	CVZN = cond(v26)
	r6 = (uint32) Mem0[r4:byte]
	ZN = cond(r6)
	C = false
	V = false
	goto l0001805E
	// succ:  l0001805E
l00018054:
	call fn0000D69A (retsize: 4;)
	r6 = r0
	ZN = cond(r6)
	C = false
	V = false
	// succ:  l0001805E
l0001805E:
	r4 = r6
	ZN = cond(r4)
	C = false
	V = false
	CZN = cond(r4 - 0xFFFFFFFF)
	V = false
	branch Test(NE,Z) l0001806E
	// succ:  l0001806A l0001806E
l0001806A:
	r0 = 0x00000001
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00017F4E_exit
l0001806E:
	r4 = __ashift(r4, r2)
	VZN = cond(r4)
	C = false
	r3 = r3 | r4
	ZN = cond(r3)
	C = false
	V = false
	r2 = r2 + 0x00000008
	CVZN = cond(r2)
	CZN = cond(r2 - 0x00000004)
	V = false
	branch Test(ULT,C) l00018038
	// succ:  l0001807D l00018038
l0001807D:
	r8 = r3 & ~0xFFFFFFF0
	ZN = cond(r8)
	C = false
	V = false
	r8 = r8 + 0x00000004
	CVZN = cond(r8)
	r3 = (uint32) SLICE(r3, ui28, 4)
	ZN = cond(r3)
	V = false
	r2 = r2 - 0x00000004
	CVZN = cond(r2)
	CZN = cond(Mem0[sp + 32:word32] - 0x00000120)
	V = false
	branch Test(UGT,CZ) l000180A0
	// succ:  l0001809A l000180A0
l0001809A:
	CZN = cond(Mem0[sp + 28:word32] - 0x00000020)
	V = false
	branch Test(ULE,CZ) l000180A4
	// succ:  l000180A0 l000180A4
l000180A0:
	r0 = 0x00000001
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00017F4E_exit
l000180A4:
	r7 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(r8 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0001811B
	// succ:  l000180AA l0001811B
l000180AA:
	ZN = cond(0x0000D698)
	C = false
	V = false
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l000180B4
l000180B4:
	CZN = cond(r2 - 0x00000003)
	V = false
	branch Test(UGE,C) l000180FD
	// succ:  l000180B9 l000180FD
l000180B9:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l000180BC
l000180BC:
	v30 = Mem0[r5 + 0x0000C5FB:word32] - 0x00000001
	Mem0[r5 + 0x0000C5FB:word32] = v30
	CVZN = cond(v30)
	branch Test(LT,N) l000180D8
	// succ:  l000180C4 l000180D8
l000180C4:
	ap = Mem0[r5 + 0x0000C5F7:word32]
	ZN = cond(ap)
	C = false
	V = false
	v31 = Mem0[r5 + 0x0000C5F7:word32] + 0x00000001
	Mem0[r5 + 0x0000C5F7:word32] = v31
	CVZN = cond(v31)
	r4 = (uint32) Mem0[ap:byte]
	ZN = cond(r4)
	C = false
	V = false
	goto l000180DE
	// succ:  l000180DE
l000180D8:
	call Mem0[r6:word32] + 2 (retsize: 4;)
	r4 = r0
	ZN = cond(r4)
	C = false
	V = false
	// succ:  l000180DE
l000180DE:
	ap = r4
	ZN = cond(ap)
	C = false
	V = false
	CZN = cond(ap - 0xFFFFFFFF)
	V = false
	branch Test(NE,Z) l000180EE
	// succ:  l000180EA l000180EE
l000180EA:
	r0 = 0x00000001
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00017F4E_exit
l000180EE:
	ap = __ashift(ap, r2)
	VZN = cond(ap)
	C = false
	r3 = r3 | ap
	ZN = cond(r3)
	C = false
	V = false
	r2 = r2 + 0x00000008
	CVZN = cond(r2)
	CZN = cond(r2 - 0x00000003)
	V = false
	branch Test(ULT,C) l000180BC
	// succ:  l000180FD l000180BC
l000180FD:
	r4 = Mem0[r11 + r7 * 4:word32]
	ZN = cond(r4)
	C = false
	V = false
	v39 = r3 & ~0xFFFFFFF8
	Mem0[fp + -1300:word32] = v39
	ZN = cond(v39)
	C = false
	V = false
	r3 = (uint32) SLICE(r3, ui29, 3)
	ZN = cond(r3)
	V = false
	r2 = r2 - 0x00000003
	CVZN = cond(r2)
	r7 = r7 + 0x00000001
	CVZN = cond(r7)
	CZN = cond(r7 - r8)
	V = false
	branch Test(ULT,C) l000180B4
	// succ:  l0001811B l000180B4
l0001811B:
	CZN = cond(r7 - 0x00000013)
	V = false
	branch Test(UGE,C) l00018130
	// succ:  l00018120 l00018130
l00018120:
	r4 = Mem0[r11 + r7 * 4:word32]
	ZN = cond(r4)
	C = false
	V = false
	v33 = 0x00000000
	Mem0[fp + -1300:word32] = v33
	Z = true
	N = false
	C = false
	V = false
	r7 = r7 + 0x00000001
	CVZN = cond(r7)
	CZN = cond(r7 - 0x00000013)
	V = false
	branch Test(ULT,C) l00018120
	// succ:  l00018130 l00018120
l00018130:
	v34 = 0x00000007
	Mem0[fp + -16:word32] = v34
	ZN = cond(v34)
	C = false
	V = false
	sp = sp - 0x00000004
	v35 = fp + -16
	Mem0[sp:word32] = v35
	ZN = cond(v35)
	C = false
	V = false
	sp = sp - 0x00000004
	v36 = fp + -8
	Mem0[sp:word32] = v36
	ZN = cond(v36)
	C = false
	V = false
	sp = sp - 0x00000008
	v37 = 0x0000000000000000
	Mem0[sp:word64] = v37
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000013
	ZN = cond(0x00000013)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000013
	ZN = cond(0x00000013)
	C = false
	V = false
	sp = sp - 0x00000004
	v38 = fp + -1300
	Mem0[sp:word32] = v38
	ZN = cond(v38)
	C = false
	V = false
	call fn0001878E (retsize: 4;)
	r8 = r0
	ZN = cond(r8)
	C = false
	V = false
	ZN = cond(Mem0[fp + -16:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00018156
	// succ:  l00018153 l00018156
l00018153:
	r8 = 0x00000001
	ZN = cond(r8)
	C = false
	V = false
	// succ:  l00018156
l00018156:
	ZN = cond(r8 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00018181
	// succ:  l0001815A l00018181
l0001815A:
	CZN = cond(r8 - 0x00000001)
	V = false
	branch Test(NE,Z) l0001817D
	// succ:  l0001815F l0001817D
l0001815F:
	r6 = Mem0[fp + -8:word32]
	ZN = cond(r6)
	C = false
	V = false
	ap = r6
	ZN = cond(ap)
	C = false
	V = false
	branch Test(EQ,Z) l0001817D
	// succ:  l00018168 l0001817D
l00018168:
	ap = ap - 0x00000006
	CVZN = cond(ap)
	r4 = Mem0[ap + 2:word32]
	ZN = cond(r4)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = ap
	ZN = cond(ap)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	ap = r4
	ZN = cond(ap)
	C = false
	V = false
	branch Test(NE,Z) l00018168
	// succ:  l0001817D l00018168
l0001817D:
	r0 = r8
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00017F4E_exit
l00018181:
	r10 = Mem0[sp + 28:word32] + Mem0[sp + 32:word32]
	CVZN = cond(r10)
	r4 = Mem0[fp + -16:word32]
	ZN = cond(r4)
	C = false
	V = false
fn00017F4E_exit:


// fn000185AE
// Return size: 4
define fn000185AE
fn000185AE_entry:
	// succ:  l000185AE
l000185AE:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	r3 = Mem0[r4 + 0x0000C831:word32]
	ZN = cond(r3)
	C = false
	V = false
	r2 = Mem0[r4 + 0x0000C835:word32]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x00000001)
	V = false
	branch Test(UGE,C) l00018611
	// succ:  l000185CB l00018611
l000185CB:
	// succ:  l000185CC
l000185CC:
	v11 = Mem0[r4 + 0x0000C5FB:word32] - 0x00000001
	Mem0[r4 + 0x0000C5FB:word32] = v11
	CVZN = cond(v11)
	branch Test(LT,N) l000185E8
	// succ:  l000185D4 l000185E8
l000185D4:
	r0 = Mem0[r4 + 0x0000C5F7:word32]
	ZN = cond(r0)
	C = false
	V = false
	v14 = Mem0[r4 + 0x0000C5F7:word32] + 0x00000001
	Mem0[r4 + 0x0000C5F7:word32] = v14
	CVZN = cond(v14)
	r5 = (uint32) Mem0[r0:byte]
	ZN = cond(r5)
	C = false
	V = false
	goto l000185F2
	// succ:  l000185F2
l000185E8:
	call fn0000D69A (retsize: 4;)
	r5 = r0
	ZN = cond(r5)
	C = false
	V = false
	// succ:  l000185F2
l000185F2:
	r0 = r5
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0xFFFFFFFF)
	V = false
	branch Test(NE,Z) l00018602
	// succ:  l000185FE l00018602
l000185FE:
	r0 = 0x00000001
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000185AE_exit
l00018602:
	r0 = __ashift(r0, r2)
	VZN = cond(r0)
	C = false
	r3 = r3 | r0
	ZN = cond(r3)
	C = false
	V = false
	r2 = r2 + 0x00000008
	CVZN = cond(r2)
	CZN = cond(r2 - 0x00000001)
	V = false
	branch Test(ULT,C) l000185CC
	// succ:  l00018611 l000185CC
l00018611:
	v17 = r3 & ~0xFFFFFFFE
	Mem0[Mem0[ap + 4:word32]:word32] = v17
	ZN = cond(v17)
	C = false
	V = false
	r3 = (uint32) SLICE(r3, ui31, 1)
	ZN = cond(r3)
	V = false
	r2 = r2 - 0x00000001
	CVZN = cond(r2)
	CZN = cond(r2 - 0x00000002)
	V = false
	branch Test(UGE,C) l0001866D
	// succ:  l00018626 l0001866D
l00018626:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l00018628
l00018628:
	v18 = Mem0[r4 + 0x0000C5FB:word32] - 0x00000001
	Mem0[r4 + 0x0000C5FB:word32] = v18
	CVZN = cond(v18)
	branch Test(LT,N) l00018644
	// succ:  l00018630 l00018644
l00018630:
	r0 = Mem0[r4 + 0x0000C5F7:word32]
	ZN = cond(r0)
	C = false
	V = false
	v19 = Mem0[r4 + 0x0000C5F7:word32] + 0x00000001
	Mem0[r4 + 0x0000C5F7:word32] = v19
	CVZN = cond(v19)
	r5 = (uint32) Mem0[r0:byte]
	ZN = cond(r5)
	C = false
	V = false
	goto l0001864E
	// succ:  l0001864E
l00018644:
	call fn0000D69A (retsize: 4;)
	r5 = r0
	ZN = cond(r5)
	C = false
	V = false
	// succ:  l0001864E
l0001864E:
	r0 = r5
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r0 - 0xFFFFFFFF)
	V = false
	branch Test(NE,Z) l0001865E
	// succ:  l0001865A l0001865E
l0001865A:
	r0 = 0x00000001
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000185AE_exit
l0001865E:
	r0 = __ashift(r0, r2)
	VZN = cond(r0)
	C = false
	r3 = r3 | r0
	ZN = cond(r3)
	C = false
	V = false
	r2 = r2 + 0x00000008
	CVZN = cond(r2)
	CZN = cond(r2 - 0x00000002)
	V = false
	branch Test(ULT,C) l00018628
	// succ:  l0001866D l00018628
l0001866D:
	r6 = r3 & ~0xFFFFFFFC
	ZN = cond(r6)
	C = false
	V = false
	r3 = (uint32) SLICE(r3, ui30, 2)
	ZN = cond(r3)
	V = false
	r2 = r2 - 0x00000002
	CVZN = cond(r2)
	v24 = r3
	Mem0[r4 + 0x0000C831:word32] = v24
	ZN = cond(v24)
	C = false
	V = false
	v25 = r2
	Mem0[r4 + 0x0000C835:word32] = v25
	ZN = cond(v25)
	C = false
	V = false
	CZN = cond(r6 - 0x00000002)
	V = false
	branch Test(NE,Z) l00018696
	// succ:  l00018690 l00018696
l00018690:
	call fn00017F4E (retsize: 4;)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000185AE_exit
l00018696:
	ZN = cond(r6 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000186A0
	// succ:  l0001869A l000186A0
l0001869A:
	call fn00017C2E (retsize: 4;)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000185AE_exit
l000186A0:
	CZN = cond(r6 - 0x00000001)
	V = false
	branch Test(NE,Z) l000186AB
	// succ:  l000186A5 l000186AB
l000186A5:
	call fn00017DEE (retsize: 4;)
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000185AE_exit
l000186AB:
	r0 = (int32) 0x02
	VZN = cond(r0)
	C = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000185AE_exit
fn000185AE_exit:


// fn000186B2
// Return size: 4
define fn000186B2
fn000186B2_entry:
	// succ:  l000186B2
l000186B2:
	sp = fp
	sp = sp - 0x00000008
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	v8 = 0x00000000
	Mem0[r2 + 0x0000C82D:word32] = v8
	Z = true
	N = false
	C = false
	V = false
	v11 = 0x0000000000000000
	Mem0[r2 + 0x0000C831:word64] = v11
	Z = true
	N = false
	C = false
	V = false
	r3 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l000186CC
l000186CC:
	v14 = 0x00000000
	Mem0[r2 + 0x0000C819:word32] = v14
	Z = true
	N = false
	C = false
	V = false
	sp = sp - 0x00000004
	v16 = fp + -8
	Mem0[sp:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	call fn000185AE (retsize: 4;)
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000186DF
	// succ:  l000186DE l000186DF
l000186DE:
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000186B2_exit
l000186DF:
	CZN = cond(Mem0[r2 + 0x0000C819:word32] - r3)
	V = false
	branch Test(ULE,CZ) l000186EF
	// succ:  l000186E8 l000186EF
l000186E8:
	r3 = Mem0[r2 + 0x0000C819:word32]
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l000186EF
l000186EF:
	ZN = cond(Mem0[fp + -8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000186CC
	// succ:  l000186F4 l000186CC
l000186F4:
	ZN = cond(Mem0[r2 + 0x0000C6C5:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00018710
	// succ:  l000186FC l00018710
l000186FC:
	sp = sp - 0x00000004
	v20 = Mem0[r2 + 0x0000C82D:word32]
	Mem0[sp:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	sp = sp - 0x00000004
	v21 = r2 + 1515
	Mem0[sp:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	call fn0001084A (retsize: 4;)
	goto l00018723
	// succ:  l00018723
l00018710:
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v22 = Mem0[r2 + 0x0000C82D:word32]
	Mem0[sp:word32] = v22
	ZN = cond(v22)
	C = false
	V = false
	sp = sp - 0x00000004
	v23 = r2 + 1515
	Mem0[sp:word32] = v23
	ZN = cond(v23)
	C = false
	V = false
	call fn0000B072 (retsize: 4;)
	// succ:  l00018723
l00018723:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000186B2_exit
fn000186B2_exit:


// fn0001872A
// Return size: 4
define fn0001872A
fn0001872A_entry:
	// succ:  l0001872A
l0001872A:
	sp = fp
	sp = sp - 0x0000000C
	CVZN = cond(sp)
	ZN = cond(0xFFFFB3D0)
	C = false
	V = false
	ZN = cond(Mem0[r3 + 0x0000C81D:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00018787
	// succ:  l0001873C l00018787
l0001873C:
	r4 = Mem0[r3 + 0x0000C821:word32]
	ZN = cond(r4)
	C = false
	V = false
	ap = r4
	ZN = cond(ap)
	C = false
	V = false
	branch Test(EQ,Z) l0001875D
	// succ:  l00018748 l0001875D
l00018748:
	ap = ap - 0x00000006
	CVZN = cond(ap)
	r2 = Mem0[ap + 2:word32]
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = ap
	ZN = cond(ap)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	ap = r2
	ZN = cond(ap)
	C = false
	V = false
	branch Test(NE,Z) l00018748
	// succ:  l0001875D l00018748
l0001875D:
	r4 = Mem0[r3 + 0x0000C81D:word32]
	ZN = cond(r4)
	C = false
	V = false
	ap = r4
	ZN = cond(ap)
	C = false
	V = false
	branch Test(EQ,Z) l00018781
	// succ:  l00018769 l00018781
l00018769:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l0001876C
l0001876C:
	ap = ap - 0x00000006
	CVZN = cond(ap)
	r2 = Mem0[ap + 2:word32]
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = ap
	ZN = cond(ap)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	ap = r2
	ZN = cond(ap)
	C = false
	V = false
	branch Test(NE,Z) l0001876C
	// succ:  l00018781 l0001876C
l00018781:
	v13 = 0x0000000000000000
	Mem0[r3 + 0x0000C81D:word64] = v13
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00018787
l00018787:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0001872A_exit
fn0001872A_exit:


// fn0001878E
// Return size: 4
define fn0001878E
fn0001878E_entry:
	// succ:  l0001878E
l0001878E:
	sp = fp
	sp = sp + -1488
	ZN = cond(sp)
	C = false
	V = false
	r2 = fp + -140
	ZN = cond(r2)
	C = false
	V = false
	v8 = r2 + 0x00000004
	Mem0[sp + 36:word32] = v8
	CVZN = cond(v8)
	CZN = cond(Mem0[ap + 8:word32] - 0x00000100)
	V = false
	branch Test(ULE,CZ) l000187B4
	// succ:  l000187A7 l000187B4
l000187A7:
	r2 = Mem0[ap + 4:word32]
	ZN = cond(r2)
	C = false
	V = false
	r3 = Mem0[r2 + 1024:word32]
	ZN = cond(r3)
	C = false
	V = false
	goto l000187B7
	// succ:  l000187B7
l000187B4:
	r3 = 0x00000010
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l000187B7
l000187B7:
	v14 = r3
	Mem0[sp + 28:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	sp = sp - 0x00000004
	v15 = (uint32) 0x44
	Mem0[sp:uint32] = v15
	ZN = cond(v15)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v16 = fp + -72
	Mem0[sp:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	call fn0001927E (retsize: 4;)
	r2 = Mem0[ap + 4:word32]
	ZN = cond(r2)
	C = false
	V = false
	r11 = Mem0[ap + 8:word32]
	ZN = cond(r11)
	C = false
	V = false
	// succ:  l000187D4
l000187D4:
	r3 = Mem0[r2:word32]
	ZN = cond(r3)
	C = false
	V = false
	v18 = Mem0[fp + -72:word32] + 0x00000001
	Mem0[fp + -72:word32] = v18
	CVZN = cond(v18)
	r2 = r2 + 0x00000004
	CVZN = cond(r2)
	r11 = r11 - 0x00000001
	CVZN = cond(r11)
	branch Test(NE,Z) l000187D4
	// succ:  l000187E2 l000187D4
l000187E2:
	CZN = cond(Mem0[fp + -72:word32] - Mem0[ap + 8:word32])
	V = false
	branch Test(NE,Z) l000187F2
	// succ:  l000187E9 l000187F2
l000187E9:
	v20 = 0x00000000
	Mem0[Mem0[ap + 24:word32]:word32] = v20
	Z = true
	N = false
	C = false
	V = false
	v22 = 0x00000000
	Mem0[Mem0[ap + 28:word32]:word32] = v22
	Z = true
	N = false
	C = false
	V = false
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0001878E_exit
l000187F2:
	r10 = (int32) 0x0001
	VZN = cond(r10)
	C = false
	// succ:  l000187F8
l000187F8:
	ZN = cond(Mem0[fp + -72 + r10 * 4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00018805
	// succ:  l000187FE l00018805
l000187FE:
	r10 = r10 + 0x00000001
	CVZN = cond(r10)
	CZN = cond(r10 - 0x00000010)
	V = false
	branch Test(ULE,CZ) l000187F8
	// succ:  l00018805 l000187F8
l00018805:
	r9 = r10
	ZN = cond(r9)
	C = false
	V = false
	r2 = Mem0[ap + 28:word32]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(Mem0[r2:word32] - r10)
	V = false
	branch Test(UGE,C) l00018814
	// succ:  l00018811 l00018814
l00018811:
	v27 = r10
	Mem0[r2:word32] = v27
	ZN = cond(v27)
	C = false
	V = false
	// succ:  l00018814
l00018814:
	r11 = 0x00000010
	ZN = cond(r11)
	C = false
	V = false
	branch Test(EQ,Z) l00018826
	// succ:  l00018819 l00018826
l00018819:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l0001881C
l0001881C:
	ZN = cond(Mem0[fp + -72 + r11 * 4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00018826
	// succ:  l00018822 l00018826
l00018822:
	r11 = r11 - 0x00000001
	CVZN = cond(r11)
	branch Test(NE,Z) l0001881C
	// succ:  l00018826 l0001881C
l00018826:
	v28 = r11
	Mem0[sp + 12:word32] = v28
	ZN = cond(v28)
	C = false
	V = false
	r2 = Mem0[ap + 28:word32]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(Mem0[r2:word32] - r11)
	V = false
	branch Test(ULE,CZ) l00018836
	// succ:  l00018833 l00018836
l00018833:
	v29 = r11
	Mem0[r2:word32] = v29
	ZN = cond(v29)
	C = false
	V = false
	// succ:  l00018836
l00018836:
	v30 = __ashift(0x00000001, r10)
	Mem0[sp + 4:word32] = v30
	VZN = cond(v30)
	C = false
	CZN = cond(r10 - r11)
	V = false
	branch Test(UGE,C) l00018859
	// succ:  l00018840 l00018859
l00018840:
	v31 = Mem0[sp + 4:word32] - Mem0[(fp + -72) + r10 * 4:word32]
	Mem0[sp + 4:word32] = v31
	CVZN = cond(v31)
	branch Test(GE,N) l0001884C
	// succ:  l00018848 l0001884C
l00018848:
	r0 = 0x00000002
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0001878E_exit
l0001884C:
	r10 = r10 + 0x00000001
	CVZN = cond(r10)
	v33 = Mem0[sp + 4:word32] << 1
	Mem0[sp + 4:word32] = v33
	VZN = cond(v33)
	C = false
	CZN = cond(r10 - r11)
	V = false
	branch Test(ULT,C) l00018840
	// succ:  l00018859 l00018840
l00018859:
	v32 = Mem0[sp + 4:word32] - Mem0[(fp + -72) + r11 * 4:word32]
	Mem0[sp + 4:word32] = v32
	CVZN = cond(v32)
	branch Test(GE,N) l00018865
	// succ:  l00018861 l00018865
l00018861:
	r0 = 0x00000002
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0001878E_exit
l00018865:
	v34 = Mem0[fp + -72:word32] + Mem0[sp + 4:word32]
	Mem0[fp + -72:word32] = v34
	CVZN = cond(v34)
	r10 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	v35 = 0x00000000
	Mem0[fp + -1420:word32] = v35
	Z = true
	N = false
	C = false
	V = false
	r3 = fp + -72
	ZN = cond(r3)
	C = false
	V = false
	r2 = r3 + 0x00000004
	CVZN = cond(r2)
	r3 = fp + -1424
	ZN = cond(r3)
	C = false
	V = false
	r5 = r3 + 0x00000008
	CVZN = cond(r5)
	r11 = r11 - 0x00000001
	CVZN = cond(r11)
	branch Test(EQ,Z) l00018892
	// succ:  l00018886 l00018892
l00018886:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l00018888
l00018888:
	v37 = r2
	r2 = r2 + 0x00000004
	r10 = r10 + Mem0[v37:word32]
	CVZN = cond(r10)
	v38 = r10
	Mem0[r5:word32] = v38
	r5 = r5 + 0x00000004
	ZN = cond(v38)
	C = false
	V = false
	r11 = r11 - 0x00000001
	CVZN = cond(r11)
	branch Test(NE,Z) l00018888
	// succ:  l00018892 l00018888
l00018892:
	sp = sp - 0x00000004
	v39 = (uint32) 0x0480
	Mem0[sp:uint32] = v39
	ZN = cond(v39)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = 0x00000000
	ZN = cond(0x00000000)
	C = false
	V = false
	sp = sp - 0x00000004
	v40 = fp + -1356
	Mem0[sp:word32] = v40
	ZN = cond(v40)
	C = false
	V = false
	call fn0001927E (retsize: 4;)
	r2 = Mem0[ap + 4:word32]
	ZN = cond(r2)
	C = false
	V = false
	r11 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	// succ:  l000188AC
l000188AC:
	v41 = r2
	r2 = r2 + 0x00000004
	r10 = Mem0[v41:word32]
	ZN = cond(r10)
	C = false
	V = false
	branch Test(EQ,Z) l000188C2
	// succ:  l000188B1 l000188C2
l000188B1:
	r3 = Mem0[fp + -1424 + r10 * 4:word32]
	ZN = cond(r3)
	C = false
	V = false
	v42 = Mem0[fp + -1424:word32] + 0x00000001
	Mem0[fp + -1424:word32] = v42
	CVZN = cond(v42)
	v43 = r11
	Mem0[fp + -1356:word32] = v43
	ZN = cond(v43)
	C = false
	V = false
	// succ:  l000188C2
l000188C2:
	r11 = r11 + 0x00000001
	CVZN = cond(r11)
	CZN = cond(r11 - Mem0[ap + 8:word32])
	V = false
	branch Test(ULT,C) l000188AC
	// succ:  l000188CA l000188AC
l000188CA:
	v44 = ap + 8
	Mem0[sp + 8:word32] = v44
	ZN = cond(v44)
	C = false
	V = false
	r2 = Mem0[sp + 12:word32]
	ZN = cond(r2)
	C = false
	V = false
	v45 = Mem0[fp + -1424 + r2 * 4:word32]
	Mem0[Mem0[sp + 8:word32]:word32] = v45
	ZN = cond(v45)
	C = false
	V = false
	r11 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	v46 = 0x00000000
	Mem0[fp + -1424:word32] = v46
	Z = true
	N = false
	C = false
	V = false
	r8 = fp + -1356
	ZN = cond(r8)
	C = false
	V = false
	v48 = -0x00000001
	Mem0[sp + 48:word32] = v48
	CVZN = cond(v48)
	r2 = Mem0[sp + 36:word32]
	ZN = cond(r2)
	C = false
	V = false
	v49 = 0x00000000
	Mem0[r2 + -4:word32] = v49
	Z = true
	N = false
	C = false
	V = false
	r6 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	v51 = 0x00000000
	Mem0[fp + -204:word32] = v51
	Z = true
	N = false
	C = false
	V = false
	r7 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	v53 = 0x00000000
	Mem0[sp + 44:word32] = v53
	Z = true
	N = false
	C = false
	V = false
	CZN = cond(r9 - Mem0[sp + 12:word32])
	V = false
	branch Test(LE,ZN) l00018904
	// succ:  l00018901 l00018904
l00018901:
	goto l00018BDA
	// succ:  l00018BDA
l00018904:
	v54 = ap + 28
	Mem0[sp + 40:word32] = v54
	ZN = cond(v54)
	C = false
	V = false
	ZN = cond(0x000192B4)
	C = false
	V = false
	// succ:  l00018914
l00018914:
	v55 = Mem0[fp + -72 + r9 * 4:word32]
	Mem0[sp + 16:word32] = v55
	ZN = cond(v55)
	C = false
	V = false
	r2 = Mem0[sp + 16:word32]
	ZN = cond(r2)
	C = false
	V = false
	v56 = Mem0[sp + 16:word32] - 0x00000001
	Mem0[sp + 16:word32] = v56
	CVZN = cond(v56)
	ZN = cond(r2 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00018928
	// succ:  l00018925 l00018928
l00018925:
	goto l00018BCF
	// succ:  l00018BCF
l00018928:
	r2 = Mem0[sp + 48:word32]
	ZN = cond(r2)
	C = false
	V = false
	r2 = r6 + Mem0[Mem0[(sp + 36) + r2 * 4:word32]:word32]
	CVZN = cond(r2)
	CZN = cond(r9 - r2)
	V = false
	branch Test(GT,ZN) l0001893A
	// succ:  l00018937 l0001893A
l00018937:
	goto l00018AB5
	// succ:  l00018AB5
l0001893A:
	v62 = Mem0[sp + 16:word32] + 0x00000001
	Mem0[sp + 32:word32] = v62
	CVZN = cond(v62)
	// succ:  l00018940
l00018940:
	r2 = Mem0[sp + 48:word32]
	ZN = cond(r2)
	C = false
	V = false
	v63 = Mem0[sp + 48:word32] + 0x00000001
	Mem0[sp + 48:word32] = v63
	CVZN = cond(v63)
	r6 = r6 + Mem0[Mem0[(sp + 36) + r2 * 4:word32]:word32]
	CVZN = cond(r6)
	v64 = Mem0[sp + 12:word32] - r6
	Mem0[sp + 44:word32] = v64
	CVZN = cond(v64)
	r2 = Mem0[sp + 44:word32]
	ZN = cond(r2)
	C = false
	V = false
	r3 = Mem0[sp + 40:word32]
	ZN = cond(r3)
	C = false
	V = false
	CZN = cond(r2 - Mem0[Mem0[r3 + 0:word32]:word32])
	V = false
	branch Test(ULE,CZ) l00018968
	// succ:  l00018960 l00018968
l00018960:
	r4 = Mem0[Mem0[r3 + 0:word32]:word32]
	ZN = cond(r4)
	C = false
	V = false
	goto l0001896C
	// succ:  l0001896C
l00018968:
	r4 = Mem0[sp + 44:word32]
	ZN = cond(r4)
	C = false
	V = false
	// succ:  l0001896C
l0001896C:
	v68 = r4
	Mem0[sp + 44:word32] = v68
	ZN = cond(v68)
	C = false
	V = false
	r10 = r9 - r6
	CVZN = cond(r10)
	r2 = r10
	ZN = cond(r2)
	C = false
	V = false
	v69 = __ashift(0x00000001, r2)
	Mem0[sp + 52:word32] = v69
	VZN = cond(v69)
	C = false
	r2 = Mem0[sp + 52:word32]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - Mem0[sp + 32:word32])
	V = false
	branch Test(ULE,CZ) l000189C2
	// succ:  l00018986 l000189C2
l00018986:
	r2 = Mem0[sp + 16:word32] + 0x00000001
	CVZN = cond(r2)
	v70 = Mem0[sp + 52:word32] - r2
	Mem0[sp + 52:word32] = v70
	CVZN = cond(v70)
	r4 = fp + -72
	ZN = cond(r4)
	C = false
	V = false
	r3 = r9 << 2
	VZN = cond(r3)
	C = false
	r3 = r3 + r4
	CVZN = cond(r3)
	r10 = r10 + 0x00000001
	CVZN = cond(r10)
	CZN = cond(r10 - Mem0[sp + 44:word32])
	V = false
	branch Test(UGE,C) l000189C2
	// succ:  l000189A2 l000189C2
l000189A2:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l000189A4
l000189A4:
	v71 = Mem0[sp + 52:word32] << 1
	Mem0[sp + 52:word32] = v71
	VZN = cond(v71)
	C = false
	r2 = Mem0[sp + 52:word32]
	ZN = cond(r2)
	C = false
	V = false
	r3 = r3 + 0x00000004
	CVZN = cond(r3)
	CZN = cond(r2 - Mem0[r3:word32])
	V = false
	branch Test(ULE,CZ) l000189C2
	// succ:  l000189B6 l000189C2
l000189B6:
	v72 = Mem0[sp + 52:word32] - Mem0[r3:word32]
	Mem0[sp + 52:word32] = v72
	CVZN = cond(v72)
	r10 = r10 + 0x00000001
	CVZN = cond(r10)
	CZN = cond(r10 - Mem0[sp + 44:word32])
	V = false
	branch Test(ULT,C) l000189A4
	// succ:  l000189C2 l000189A4
l000189C2:
	r2 = r6 + r10
	CVZN = cond(r2)
	CZN = cond(r2 - Mem0[sp + 28:word32])
	V = false
	branch Test(ULE,CZ) l000189D7
	// succ:  l000189CC l000189D7
l000189CC:
	CZN = cond(r6 - Mem0[sp + 28:word32])
	V = false
	branch Test(UGE,C) l000189D7
	// succ:  l000189D2 l000189D7
l000189D2:
	r10 = Mem0[sp + 28:word32] - r6
	CVZN = cond(r10)
	// succ:  l000189D7
l000189D7:
	v75 = __ashift(0x00000001, r10)
	Mem0[sp + 44:word32] = v75
	VZN = cond(v75)
	C = false
	r2 = Mem0[sp + 48:word32]
	ZN = cond(r2)
	C = false
	V = false
	v76 = r10
	Mem0[Mem0[sp + 36:word32]:word32] = v76
	ZN = cond(v76)
	C = false
	V = false
	r2 = Mem0[sp + 44:word32] + 0x00000001
	CVZN = cond(r2)
	sp = sp - 0x00000004
	v77 = r2 * 0x00000006
	Mem0[sp:word32] = v77
	CVZN = cond(v77)
	call Mem0[Mem0[sp + 28:word32]:word32] + 2 (retsize: 4;)
	r7 = r0
	ZN = cond(r7)
	C = false
	V = false
	branch Test(NE,Z) l00018A21
	// succ:  l000189F7 l00018A21
l000189F7:
	ZN = cond(Mem0[sp + 48:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00018A1D
	// succ:  l000189FC l00018A1D
l000189FC:
	r4 = Mem0[fp + -204:word32]
	ZN = cond(r4)
	C = false
	V = false
	r2 = r4
	ZN = cond(r2)
	C = false
	V = false
	branch Test(EQ,Z) l00018A1D
	// succ:  l00018A06 l00018A1D
l00018A06:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l00018A08
l00018A08:
	r2 = r2 - 0x00000006
	CVZN = cond(r2)
	r3 = Mem0[r2 + 2:word32]
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	r2 = r3
	ZN = cond(r2)
	C = false
	V = false
	branch Test(NE,Z) l00018A08
	// succ:  l00018A1D l00018A08
l00018A1D:
	r0 = 0x00000003
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0001878E_exit
l00018A21:
	r3 = Mem0[sp + 44:word32] + 0x00000001
	CVZN = cond(r3)
	r3 = r3 + 0x00007BE9
	CVZN = cond(r3)
	ZN = cond(0x00007BE9)
	C = false
	V = false
	v78 = r3
	Mem0[r2:word32] = v78
	ZN = cond(v78)
	C = false
	V = false
	v79 = r7 + 0x00000006
	Mem0[Mem0[ap + 24:word32]:word32] = v79
	CVZN = cond(v79)
	v80 = r7 + 2
	Mem0[ap + 24:word32] = v80
	ZN = cond(v80)
	C = false
	V = false
	v81 = 0x00000000
	Mem0[Mem0[ap + 24:word32]:word32] = v81
	Z = true
	N = false
	C = false
	V = false
	r7 = r7 + 0x00000006
	CVZN = cond(r7)
	r2 = Mem0[sp + 48:word32]
	ZN = cond(r2)
	C = false
	V = false
	v82 = r7
	Mem0[fp + -204:word32] = v82
	ZN = cond(v82)
	C = false
	V = false
	ZN = cond(r2 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00018AA3
	// succ:  l00018A55 l00018AA3
l00018A55:
	v83 = r11
	Mem0[fp + -1424:word32] = v83
	ZN = cond(v83)
	C = false
	V = false
	r4 = Mem0[sp + 48:word32] - 0x00000001
	CVZN = cond(r4)
	r3 = Mem0[sp + 36 + r4 * 4:word32]
	ZN = cond(r3)
	C = false
	V = false
	v84 = Mem0[r3:byte]
	Mem0[fp + -1429:byte] = v84
	ZN = cond(v84)
	C = false
	V = false
	r2 = r10 + 0x00000010
	CVZN = cond(r2)
	v85 = (int8) r2
	Mem0[fp + -1430:int8] = v85
	VZN = cond(v85)
	C = false
	v86 = r7
	Mem0[fp + -1428:word32] = v86
	ZN = cond(v86)
	C = false
	V = false
	r3 = r6 - Mem0[r3:word32]
	CVZN = cond(r3)
	r5 = 0x00000020 - r3
	CVZN = cond(r5)
	r2 = __ashift(0x00000001, r6)
	VZN = cond(r2)
	C = false
	r2 = r2 - 0x00000001
	CVZN = cond(r2)
	r2 = ~r2
	ZN = cond(r2)
	C = false
	V = false
	r2 = r11 & ~r2
	ZN = cond(r2)
	C = false
	V = false
l00018AA3:
	r2 = Mem0[sp + 48:word32]
	ZN = cond(r2)
	C = false
	V = false
	r2 = r6 + Mem0[Mem0[(sp + 36) + r2 * 4:word32]:word32]
	CVZN = cond(r2)
	CZN = cond(r9 - r2)
	V = false
	branch Test(LE,ZN) l00018AB5
	// succ:  l00018AB2 l00018AB5
l00018AB2:
	goto l00018940
	// succ:  l00018940
l00018AB5:
	r2 = r9 - r6
	CVZN = cond(r2)
	v60 = (int8) r2
	Mem0[fp + -1429:int8] = v60
	VZN = cond(v60)
	C = false
	r3 = fp + -1356
	ZN = cond(r3)
	C = false
	V = false
	r2 = Mem0[Mem0[sp + 8:word32]:word32] << 2
	VZN = cond(r2)
	C = false
	r3 = r3 + r2
	CVZN = cond(r3)
	CZN = cond(r8 - r3)
	V = false
	branch Test(ULT,C) l00018AD8
	// succ:  l00018AD0 l00018AD8
l00018AD0:
	v61 = 0x63
	Mem0[fp + -1430:byte] = v61
	ZN = cond(v61)
	C = false
	V = false
	goto l00018B2A
	// succ:  l00018B2A
l00018AD8:
	r4 = Mem0[r8:word32]
	ZN = cond(r4)
	C = false
	V = false
	r0 = Mem0[ap + 12:word32]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r4 - r0)
	V = false
	branch Test(UGE,C) l00018B0C
	// succ:  l00018AE4 l00018B0C
l00018AE4:
	CZN = cond(r4 - 0x00000100)
	V = false
	branch Test(UGE,C) l00018AF4
	// succ:  l00018AED l00018AF4
l00018AED:
	v67 = 0x10
	r5 = DPB(r5, v67, 0)
	ZN = cond(v67)
	C = false
	V = false
	goto l00018AF7
	// succ:  l00018AF7
l00018AF4:
	v87 = 0x0F
	r5 = DPB(r5, v87, 0)
	ZN = cond(v87)
	C = false
	V = false
	// succ:  l00018AF7
l00018AF7:
	v73 = (byte) r5
	Mem0[fp + -1430:byte] = v73
	ZN = cond(v73)
	C = false
	V = false
	r3 = r8
	ZN = cond(r3)
	C = false
	V = false
	r8 = r8 + 0x00000004
	CVZN = cond(r8)
	v74 = Mem0[r3:word16]
	Mem0[fp + -1428:word16] = v74
	ZN = cond(v74)
	C = false
	V = false
	goto l00018B2A
	// succ:  l00018B2A
l00018B0C:
	r4 = r4 - r0
	CVZN = cond(r4)
	r2 = Mem0[ap + 20:word32]
	ZN = cond(r2)
	C = false
	V = false
	r2 = r2 + r4 * 2
	ZN = cond(r2)
	C = false
	V = false
	v88 = Mem0[r2:byte]
	Mem0[fp + -1430:byte] = v88
	ZN = cond(v88)
	C = false
	V = false
	v89 = r8
	r8 = r8 + 0x00000004
	r3 = Mem0[v89:word32] - r0
	CVZN = cond(r3)
	r4 = Mem0[ap + 16:word32]
	ZN = cond(r4)
	C = false
	V = false
	v90 = Mem0[r4 + r3 * 2:word16]
	Mem0[fp + -1428:word16] = v90
	ZN = cond(v90)
	C = false
	V = false
	// succ:  l00018B2A
l00018B2A:
	r2 = r9 - r6
	CVZN = cond(r2)
	v66 = __ashift(0x00000001, r2)
	Mem0[sp + 52:word32] = v66
	VZN = cond(v66)
	C = false
	r2 = 0x00000020 - r6
	CVZN = cond(r2)
l00018BCF:
	r9 = r9 + 0x00000001
	CVZN = cond(r9)
	CZN = cond(r9 - Mem0[sp + 12:word32])
	V = false
	branch Test(GT,ZN) l00018BDA
	// succ:  l00018BD7 l00018BDA
l00018BD7:
	goto l00018914
	// succ:  l00018914
l00018BDA:
	v57 = Mem0[Mem0[sp + 36:word32]:word32]
	Mem0[Mem0[ap + 28:word32]:word32] = v57
	ZN = cond(v57)
	C = false
	V = false
	v58 = 0x00
	r3 = DPB(r3, v58, 0)
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(Mem0[sp + 4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00018BEE
	// succ:  l00018BE6 l00018BEE
l00018BE6:
	CZN = cond(Mem0[sp + 12:word32] - 0x00000001)
	V = false
	branch Test(EQ,Z) l00018BEE
	// succ:  l00018BEC l00018BEE
l00018BEC:
	v59 = (byte) r3 + 0x01
	r3 = DPB(r3, v59, 0)
	CVZN = cond(v59)
	// succ:  l00018BEE
l00018BEE:
	r0 = (int32) (int8) r3
	VZN = cond(r0)
	C = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn0001878E_exit
fn0001878E_exit:


// fn00018BF6
// Return size: 4
define fn00018BF6
fn00018BF6_entry:
	// succ:  l00018BF6
l00018BF6:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	r2 = Mem0[ap + 4:word32]
	ZN = cond(r2)
	C = false
	V = false
	branch Test(EQ,Z) l00018C15
	// succ:  l00018BFF l00018C15
l00018BFF:
	// succ:  l00018C00
l00018C00:
	r2 = r2 - 0x00000006
	CVZN = cond(r2)
	r3 = Mem0[r2 + 2:word32]
	ZN = cond(r3)
	C = false
	V = false
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	call fn000192B2 (retsize: 4;)
	r2 = r3
	ZN = cond(r2)
	C = false
	V = false
	branch Test(NE,Z) l00018C00
	// succ:  l00018C15 l00018C00
l00018C15:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00018BF6_exit
fn00018BF6_exit:


// fn00018C3A
// Return size: 4
define fn00018C3A
fn00018C3A_entry:
	// succ:  l00018C3A
l00018C3A:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(0x0001934C)
	C = false
	V = false
	r2 = Mem0[ap + 4:word32]
	ZN = cond(r2)
	C = false
	V = false
	v9 = Mem0[ap + 4:word32] + 0x00000001
	Mem0[ap + 4:word32] = v9
	CVZN = cond(v9)
	r4 = (uint32) Mem0[r2:byte]
	ZN = cond(r4)
	C = false
	V = false
	branch Test(NE,Z) l00018C60
	// succ:  l00018C50 l00018C60
l00018C50:
	r2 = (uint32) Mem0[Mem0[ap + 8:word32]:byte]
	ZN = cond(r2)
	C = false
	V = false
	r3 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(r2 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00018C5C
	// succ:  l00018C5A l00018C5C
l00018C5A:
	r3 = r3 + 0x00000001
	CVZN = cond(r3)
	// succ:  l00018C5C
l00018C5C:
	r0 = r3
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00018C3A_exit
l00018C60:
	CZN = cond(r4 - 0x0000003F)
	V = false
	branch Test(NE,Z) l00018C86
	// succ:  l00018C65 l00018C86
l00018C65:
	r2 = Mem0[ap + 8:word32]
	ZN = cond(r2)
	C = false
	V = false
	ZN = cond(Mem0[r2:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00018C80
	// succ:  l00018C6D l00018C80
l00018C6D:
	sp = sp - 0x00000004
	v15 = Mem0[ap + 12:word32]
	Mem0[sp:word32] = v15
	ZN = cond(v15)
	C = false
	V = false
	r2 = r2 + 0x00000001
	CVZN = cond(r2)
	sp = sp - 0x00000004
	Mem0[sp:word32] = r2
	ZN = cond(r2)
	C = false
	V = false
	sp = sp - 0x00000004
	v16 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v16
	ZN = cond(v16)
	C = false
	V = false
	call fn00018C3A (retsize: 4;)
	r2 = r0
	ZN = cond(r2)
	C = false
	V = false
	goto l00018C82
	// succ:  l00018C82
l00018C80:
	r2 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00018C82
l00018C82:
	r0 = r2
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00018C3A_exit
l00018C86:
	CZN = cond(r4 - 0x0000002A)
	V = false
	branch Test(NE,Z) l00018CBE
	// succ:  l00018C8B l00018CBE
l00018C8B:
	r2 = (uint32) Mem0[Mem0[ap + 4:word32]:byte]
	ZN = cond(r2)
	C = false
	V = false
	branch Test(NE,Z) l00018C95
	// succ:  l00018C91 l00018C95
l00018C91:
	r0 = 0x00000001
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00018C3A_exit
l00018C95:
	ZN = cond(Mem0[Mem0[ap + 8:word32]:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00018CBA
	// succ:  l00018C9A l00018CBA
l00018C9A:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l00018C9C
l00018C9C:
	sp = sp - 0x00000004
	v19 = Mem0[ap + 12:word32]
	Mem0[sp:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	sp = sp - 0x00000004
	v20 = Mem0[ap + 8:word32]
	Mem0[sp:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	sp = sp - 0x00000004
	v21 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	call fn00018C3A (retsize: 4;)
	r4 = r0
	ZN = cond(r4)
	C = false
	V = false
	branch Test(EQ,Z) l00018CB2
	// succ:  l00018CAE l00018CB2
l00018CAE:
	r0 = r4
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00018C3A_exit
l00018CB2:
	v22 = Mem0[ap + 8:word32] + 0x00000001
	Mem0[ap + 8:word32] = v22
	CVZN = cond(v22)
	ZN = cond(Mem0[Mem0[ap + 8:word32]:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00018C9C
	// succ:  l00018CBA l00018C9C
l00018CBA:
	r0 = 0x00000002
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00018C3A_exit
l00018CBE:
	CZN = cond(r4 - 0x0000005B)
	V = false
	branch Test(EQ,Z) l00018CCA
	// succ:  l00018CC7 l00018CCA
l00018CC7:
	goto l00018E7E
	// succ:  l00018E7E
l00018CCA:
	r2 = (uint32) Mem0[Mem0[ap + 8:word32]:byte]
	ZN = cond(r2)
	C = false
	V = false
	branch Test(NE,Z) l00018CD3
	// succ:  l00018CD0 l00018CD3
l00018CD0:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00018C3A_exit
l00018CD3:
	r5 = Mem0[ap + 4:word32]
	ZN = cond(r5)
	C = false
	V = false
	v26 = 0x01
	r6 = DPB(r6, v26, 0)
	ZN = cond(v26)
	C = false
	V = false
	r2 = (uint32) Mem0[r5:byte]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x00000021)
	V = false
	branch Test(EQ,Z) l00018CED
	// succ:  l00018CE2 l00018CED
l00018CE2:
	CZN = cond(r2 - 0x0000005E)
	V = false
	branch Test(EQ,Z) l00018CED
	// succ:  l00018CEB l00018CED
l00018CEB:
	v27 = 0x00
	r6 = DPB(r6, v27, 0)
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00018CED
l00018CED:
	r8 = (int32) (int8) r6
	VZN = cond(r8)
	C = false
	v33 = r8 + r5
	Mem0[ap + 4:word32] = v33
	CVZN = cond(v33)
	r7 = Mem0[ap + 4:word32]
	ZN = cond(r7)
	C = false
	V = false
	r3 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	ZN = cond(Mem0[r7:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00018D2B
	// succ:  l00018CFF l00018D2B
l00018CFF:
	// succ:  l00018D00
l00018D00:
	ZN = cond(r3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00018D08
	// succ:  l00018D04 l00018D08
l00018D04:
	r3 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	goto l00018D25
	// succ:  l00018D25
l00018D08:
	r2 = (uint32) Mem0[r7:byte]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x0000005C)
	V = false
	branch Test(NE,Z) l00018D1C
	// succ:  l00018D14 l00018D1C
l00018D14:
	r3 = 0x00000001
	ZN = cond(r3)
	C = false
	V = false
	goto l00018D25
	// succ:  l00018D25
l00018D1C:
	CZN = cond(r2 - 0x0000005D)
	V = false
	branch Test(EQ,Z) l00018D2B
	// succ:  l00018D25 l00018D2B
l00018D25:
	r7 = r7 + 0x00000001
	CVZN = cond(r7)
	ZN = cond(Mem0[r7:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00018D00
	// succ:  l00018D2B l00018D00
l00018D2B:
	r2 = (uint32) Mem0[r7:byte]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x0000005D)
	V = false
	branch Test(EQ,Z) l00018D3A
	// succ:  l00018D37 l00018D3A
l00018D37:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00018C3A_exit
l00018D3A:
	r4 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r5 = Mem0[ap + 4:word32]
	ZN = cond(r5)
	C = false
	V = false
	r2 = (uint32) Mem0[r5:byte]
	ZN = cond(r2)
	C = false
	V = false
	r3 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	CZN = cond(r2 - 0x0000002D)
	V = false
	branch Test(NE,Z) l00018D4C
	// succ:  l00018D4A l00018D4C
l00018D4A:
	r3 = r3 + 0x00000001
	CVZN = cond(r3)
	// succ:  l00018D4C
l00018D4C:
	r9 = r3
	ZN = cond(r9)
	C = false
	V = false
	CZN = cond(r5 - r7)
	V = false
	branch Test(ULT,C) l00018D57
	// succ:  l00018D54 l00018D57
l00018D54:
	goto l00018E5B
	// succ:  l00018E5B
l00018D57:
	r11 = ap + 12
	ZN = cond(r11)
	C = false
	V = false
	ZN = cond(0x00019298)
	C = false
	V = false
	// succ:  l00018D64
l00018D64:
	ZN = cond(r9 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00018D7C
	// succ:  l00018D68 l00018D7C
l00018D68:
	r2 = (uint32) Mem0[Mem0[ap + 4:word32]:byte]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x0000005C)
	V = false
	branch Test(NE,Z) l00018D7C
	// succ:  l00018D75 l00018D7C
l00018D75:
	r9 = 0x00000001
	ZN = cond(r9)
	C = false
	V = false
	goto l00018E4F
	// succ:  l00018E4F
l00018D7C:
	ZN = cond(r9 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00018D94
	// succ:  l00018D80 l00018D94
l00018D80:
	r0 = Mem0[ap + 4:word32]
	ZN = cond(r0)
	C = false
	V = false
	r2 = (uint32) Mem0[r0:byte]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x0000002D)
	V = false
	branch Test(NE,Z) l00018D94
	// succ:  l00018D8C l00018D94
l00018D8C:
	r0 = r0 - 0x00000001
	r4 = (uint32) Mem0[r0:byte]
	ZN = cond(r4)
	C = false
	V = false
	goto l00018E4F
	// succ:  l00018E4F
l00018D94:
	ZN = cond(Mem0[r11:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00018DC0
	// succ:  l00018D98 l00018DC0
l00018D98:
	r2 = Mem0[ap + 8:word32]
	ZN = cond(r2)
	C = false
	V = false
	r3 = (uint32) Mem0[r2:byte]
	ZN = cond(r3)
	C = false
	V = false
	r2 = r3 & ~0xFFFFFF80
	ZN = cond(r2)
	C = false
	V = false
	branch (Mem0[r10 + r2 * 4:word32] & 0x00000001 << 0x00000000) == 0x00000000 l00018DB8
	// succ:  l00018DAC l00018DB8
l00018DAC:
	sp = sp - 0x00000004
	v53 = (int32) (int8) r3
	Mem0[sp:int32] = v53
	VZN = cond(v53)
	C = false
	call Mem0[r6:word32] + 2 (retsize: 4;)
	v55 = (int8) r0
	r1 = DPB(r1, v55, 0)
	VZN = cond(v55)
	C = false
	goto l00018DBB
	// succ:  l00018DBB
l00018DB8:
	v57 = (int8) r3
	r1 = DPB(r1, v57, 0)
	VZN = cond(v57)
	C = false
	// succ:  l00018DBB
l00018DBB:
	v56 = (byte) r1
	r3 = DPB(r3, v56, 0)
	ZN = cond(v56)
	C = false
	V = false
	goto l00018DC4
	// succ:  l00018DC4
l00018DC0:
	v58 = Mem0[Mem0[ap + 8:word32]:byte]
	r3 = DPB(r3, v58, 0)
	ZN = cond(v58)
	C = false
	V = false
	// succ:  l00018DC4
l00018DC4:
	r5 = (uint32) (byte) r3
	ZN = cond(r5)
	C = false
	V = false
	r1 = Mem0[ap + 4:word32]
	ZN = cond(r1)
	C = false
	V = false
	r2 = r1 + 0x00000001
	CVZN = cond(r2)
	r2 = (uint32) Mem0[r2:byte]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r2 - 0x0000002D)
	V = false
	branch Test(EQ,Z) l00018E4B
	// succ:  l00018DD7 l00018E4B
l00018DD7:
	ZN = cond(r4 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00018DE0
	// succ:  l00018DDB l00018DE0
l00018DDB:
	r0 = r4
	ZN = cond(r0)
	C = false
	V = false
	goto l00018DE3
	// succ:  l00018DE3
l00018DE0:
	r0 = (uint32) Mem0[r1:byte]
	ZN = cond(r0)
	C = false
	V = false
	// succ:  l00018DE3
l00018DE3:
	r4 = r0
	ZN = cond(r4)
	C = false
	V = false
	r2 = (uint32) Mem0[r1:byte]
	ZN = cond(r2)
	C = false
	V = false
	CZN = cond(r4 - r2)
	V = false
	branch Test(UGT,CZ) l00018E4B
	// succ:  l00018DEE l00018E4B
l00018DEE:
	r3 = Mem0[r11 + 0:word32]
	ZN = cond(r3)
	C = false
	V = false
	// succ:  l00018DF4
l00018DF4:
	ZN = cond(r3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00018E18
	// succ:  l00018DF8 l00018E18
l00018DF8:
	r0 = r4 & ~0xFFFFFF80
	ZN = cond(r0)
	C = false
	V = false
	branch (Mem0[r10 + r0 * 4:word32] & 0x00000001 << 0x00000000) == 0x00000000 l00018E10
	// succ:  l00018E05 l00018E10
l00018E05:
	sp = sp - 0x00000004
	v60 = (int32) (int8) r4
	Mem0[sp:int32] = v60
	VZN = cond(v60)
	C = false
	call Mem0[r6:word32] + 2 (retsize: 4;)
	v61 = (int8) r0
	r2 = DPB(r2, v61, 0)
	VZN = cond(v61)
	C = false
	goto l00018E13
	// succ:  l00018E13
l00018E10:
	v62 = (int8) r4
	r2 = DPB(r2, v62, 0)
	VZN = cond(v62)
	C = false
	// succ:  l00018E13
l00018E13:
	r1 = (int32) (int8) r2
	VZN = cond(r1)
	C = false
	goto l00018E1B
	// succ:  l00018E1B
l00018E18:
	r1 = r4
	ZN = cond(r1)
	C = false
	V = false
	// succ:  l00018E1B
l00018E1B:
	CZN = cond(r1 - r5)
	V = false
	branch Test(NE,Z) l00018E40
	// succ:  l00018E20 l00018E40
l00018E20:
	ZN = cond(r8 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00018E28
	// succ:  l00018E24 l00018E28
l00018E24:
	r2 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	goto l00018E3C
	// succ:  l00018E3C
l00018E28:
	sp = sp - 0x00000004
	v63 = Mem0[ap + 12:word32]
	Mem0[sp:word32] = v63
	ZN = cond(v63)
	C = false
	V = false
	sp = sp - 0x00000004
	v64 = Mem0[ap + 8:word32] + 0x00000001
	Mem0[sp:word32] = v64
	CVZN = cond(v64)
	sp = sp - 0x00000004
	v65 = r7 + 0x00000001
	Mem0[sp:word32] = v65
	CVZN = cond(v65)
	call fn00018C3A (retsize: 4;)
	r2 = r0
	ZN = cond(r2)
	C = false
	V = false
	// succ:  l00018E3C
l00018E3C:
	r0 = r2
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00018C3A_exit
l00018E40:
	r4 = r4 + 0x00000001
	CVZN = cond(r4)
	r0 = (uint32) Mem0[Mem0[ap + 4:word32]:byte]
	ZN = cond(r0)
	C = false
	V = false
	CZN = cond(r4 - r0)
	V = false
	branch Test(ULE,CZ) l00018DF4
	// succ:  l00018E4B l00018DF4
l00018E4B:
	r9 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	r4 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00018E4F
l00018E4F:
	v51 = Mem0[ap + 4:word32] + 0x00000001
	Mem0[ap + 4:word32] = v51
	CVZN = cond(v51)
	CZN = cond(Mem0[ap + 4:word32] - r7)
	V = false
	branch Test(UGE,C) l00018E5B
	// succ:  l00018E58 l00018E5B
l00018E58:
	goto l00018D64
	// succ:  l00018D64
l00018E5B:
	ZN = cond(r8 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00018E78
	// succ:  l00018E5F l00018E78
l00018E5F:
	sp = sp - 0x00000004
	v47 = Mem0[ap + 12:word32]
	Mem0[sp:word32] = v47
	ZN = cond(v47)
	C = false
	V = false
	sp = sp - 0x00000004
	v48 = Mem0[ap + 8:word32] + 0x00000001
	Mem0[sp:word32] = v48
	CVZN = cond(v48)
	sp = sp - 0x00000004
	v49 = r7 + 0x00000001
	Mem0[sp:word32] = v49
	CVZN = cond(v49)
	call fn00018C3A (retsize: 4;)
	r2 = r0
	ZN = cond(r2)
	C = false
	V = false
	goto l00018E7A
	// succ:  l00018E7A
l00018E78:
	r2 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00018E7A
l00018E7A:
	r0 = r2
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00018C3A_exit
l00018E7E:
	CZN = cond(r4 - 0x0000005C)
	V = false
	branch Test(NE,Z) l00018E96
	// succ:  l00018E87 l00018E96
l00018E87:
	r2 = Mem0[ap + 4:word32]
	ZN = cond(r2)
	C = false
	V = false
	v23 = Mem0[ap + 4:word32] + 0x00000001
	Mem0[ap + 4:word32] = v23
	CVZN = cond(v23)
	r4 = (uint32) Mem0[r2:byte]
	ZN = cond(r4)
	C = false
	V = false
	branch Test(NE,Z) l00018E96
	// succ:  l00018E93 l00018E96
l00018E93:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00018C3A_exit
l00018E96:
	ZN = cond(Mem0[ap + 12:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00018EC4
	// succ:  l00018E9B l00018EC4
l00018E9B:
	r5 = (uint32) (byte) r4
	ZN = cond(r5)
	C = false
	V = false
	r2 = r5 & ~0xFFFFFF80
	ZN = cond(r2)
	C = false
	V = false
	branch (Mem0[r10 + r2 * 4:word32] & 0x00000001 << 0x00000000) == 0x00000000 l00018EBC
	// succ:  l00018EAB l00018EBC
l00018EAB:
	sp = sp - 0x00000004
	v29 = (int32) (int8) r5
	Mem0[sp:int32] = v29
	VZN = cond(v29)
	C = false
	call fn0001929A (retsize: 4;)
	v31 = (int8) r0
	r3 = DPB(r3, v31, 0)
	VZN = cond(v31)
	C = false
	goto l00018EBF
	// succ:  l00018EBF
l00018EBC:
	v35 = (int8) r5
	r3 = DPB(r3, v35, 0)
	VZN = cond(v35)
	C = false
	// succ:  l00018EBF
l00018EBF:
	v36 = (byte) r3
	r5 = DPB(r5, v36, 0)
	ZN = cond(v36)
	C = false
	V = false
	goto l00018EC7
	// succ:  l00018EC7
l00018EC4:
	v52 = (byte) r4
	r5 = DPB(r5, v52, 0)
	ZN = cond(v52)
	C = false
	V = false
	// succ:  l00018EC7
l00018EC7:
	ZN = cond(Mem0[ap + 12:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00018EF8
	// succ:  l00018ECC l00018EF8
l00018ECC:
	r2 = Mem0[ap + 8:word32]
	ZN = cond(r2)
	C = false
	V = false
	r4 = (uint32) Mem0[r2:byte]
	ZN = cond(r4)
	C = false
	V = false
	r2 = r4 & ~0xFFFFFF80
	ZN = cond(r2)
	C = false
	V = false
	branch (Mem0[r10 + r2 * 4:word32] & 0x00000001 << 0x00000000) == 0x00000000 l00018EF0
	// succ:  l00018EE0 l00018EF0
l00018EE0:
	sp = sp - 0x00000004
	v37 = (int32) (int8) r4
	Mem0[sp:int32] = v37
	VZN = cond(v37)
	C = false
	call fn0001929A (retsize: 4;)
	v38 = (int8) r0
	r3 = DPB(r3, v38, 0)
	VZN = cond(v38)
	C = false
	goto l00018EF3
	// succ:  l00018EF3
l00018EF0:
	v40 = (int8) r4
	r3 = DPB(r3, v40, 0)
	VZN = cond(v40)
	C = false
	// succ:  l00018EF3
l00018EF3:
	v39 = (byte) r3
	r4 = DPB(r4, v39, 0)
	ZN = cond(v39)
	C = false
	V = false
	goto l00018EFC
	// succ:  l00018EFC
l00018EF8:
	v46 = Mem0[Mem0[ap + 8:word32]:byte]
	r4 = DPB(r4, v46, 0)
	ZN = cond(v46)
	C = false
	V = false
	// succ:  l00018EFC
l00018EFC:
	CZN = cond((byte) r5 - (byte) r4)
	V = false
	branch Test(NE,Z) l00018F18
	// succ:  l00018F01 l00018F18
l00018F01:
	sp = sp - 0x00000004
	v42 = Mem0[ap + 12:word32]
	Mem0[sp:word32] = v42
	ZN = cond(v42)
	C = false
	V = false
	v43 = Mem0[ap + 8:word32] + 0x00000001
	Mem0[ap + 8:word32] = v43
	CVZN = cond(v43)
	sp = sp - 0x00000004
	v44 = Mem0[ap + 8:word32]
	Mem0[sp:word32] = v44
	ZN = cond(v44)
	C = false
	V = false
	sp = sp - 0x00000004
	v45 = Mem0[ap + 4:word32]
	Mem0[sp:word32] = v45
	ZN = cond(v45)
	C = false
	V = false
	call fn00018C3A (retsize: 4;)
	r2 = r0
	ZN = cond(r2)
	C = false
	V = false
	goto l00018F1A
	// succ:  l00018F1A
l00018F18:
	r2 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	// succ:  l00018F1A
l00018F1A:
	r0 = r2
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00018C3A_exit
fn00018C3A_exit:


// fn00018F22
// Return size: 4
define fn00018F22
fn00018F22_entry:
	// succ:  l00018F22
l00018F22:
	sp = fp
	sp = sp - 0x00000004
	CVZN = cond(sp)
	ZN = cond(Mem0[Mem0[ap + 4:word32]:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00018F5E
	// succ:  l00018F2A l00018F5E
l00018F2A:
	ZN = cond(r0 - 0x00000000)
	C = false
	V = false
	// succ:  l00018F2C
l00018F2C:
	r0 = Mem0[ap + 4:word32]
	ZN = cond(r0)
	C = false
	V = false
	v11 = Mem0[r0:byte]
	r1 = DPB(r1, v11, 0)
	ZN = cond(v11)
	C = false
	V = false
	CZN = cond((byte) r1 - 0x5C)
	V = false
	branch Test(NE,Z) l00018F48
	// succ:  l00018F39 l00018F48
l00018F39:
	r0 = r0 + 0x00000001
	CVZN = cond(r0)
	ZN = cond(Mem0[r0:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00018F48
	// succ:  l00018F3F l00018F48
l00018F3F:
	v13 = r0
	Mem0[ap + 4:word32] = v13
	ZN = cond(v13)
	C = false
	V = false
	goto l00018F56
	// succ:  l00018F56
l00018F48:
	CZN = cond((byte) r1 - 0x25)
	V = false
	branch Test(EQ,Z) l00018F52
	// succ:  l00018F4D l00018F52
l00018F4D:
	CZN = cond((byte) r1 - 0x2A)
	V = false
	branch Test(NE,Z) l00018F56
	// succ:  l00018F52 l00018F56
l00018F52:
	r0 = 0x00000001
	ZN = cond(r0)
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00018F22_exit
l00018F56:
	v16 = Mem0[ap + 4:word32] + 0x00000001
	Mem0[ap + 4:word32] = v16
	CVZN = cond(v16)
	ZN = cond(Mem0[Mem0[ap + 4:word32]:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00018F2C
	// succ:  l00018F5E l00018F2C
l00018F5E:
	r0 = 0x00000000
	Z = true
	N = false
	C = false
	V = false
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00018F22_exit
fn00018F22_exit:


// fn00018F66
// Return size: 0
define fn00018F66
fn00018F66_entry:
	// succ:  l00018F66
l00018F66:
	sp = fp
	sp = sp + -160
	ZN = cond(sp)
	C = false
	V = false
fn00018F66_exit:


// fn00018FA9
// Return size: 0
define fn00018FA9
fn00018FA9_entry:
	// succ:  l00018FA9
l00018FA9:
	sp = fp
	ZN = cond(0x00019320)
	C = false
	V = false
	sp = sp + -168
	ZN = cond(sp)
	C = false
	V = false
fn00018FA9_exit:


// fn0001902B
// Return size: 0
define fn0001902B
fn0001902B_entry:
	// succ:  l0001902B
l0001902B:
	sp = fp
	ZN = cond(0x00019320)
	C = false
	V = false
	sp = sp + -188
	ZN = cond(sp)
	C = false
	V = false
fn0001902B_exit:


// fn0001924A
// Return size: 0
define fn0001924A
fn0001924A_entry:
	// succ:  l0001924A
l0001924A:
	sp = fp
	__halt()
	__halt()
fn0001924A_exit:


// fn0001924E
// Return size: 0
define fn0001924E
fn0001924E_entry:
	// succ:  l0001924E
l0001924E:
	sp = fp
	__halt()
	__halt()
fn0001924E_exit:


// fn00019252
// Return size: 0
define fn00019252
fn00019252_entry:
	// succ:  l00019252
l00019252:
	sp = fp
	__halt()
	__halt()
fn00019252_exit:


// fn0001925E
// Return size: 0
define fn0001925E
fn0001925E_entry:
	// succ:  l0001925E
l0001925E:
	sp = fp
	__halt()
	__halt()
fn0001925E_exit:


// fn00019262
// Return size: 0
define fn00019262
fn00019262_entry:
	// succ:  l00019262
l00019262:
	sp = fp
	__halt()
	__halt()
fn00019262_exit:


// fn00019266
// Return size: 0
define fn00019266
fn00019266_entry:
	// succ:  l00019266
l00019266:
	sp = fp
	__halt()
	__halt()
fn00019266_exit:


// fn0001926A
// Return size: 0
define fn0001926A
fn0001926A_entry:
	// succ:  l0001926A
l0001926A:
	sp = fp
	__halt()
	__halt()
fn0001926A_exit:


// fn0001926E
// Return size: 0
define fn0001926E
fn0001926E_entry:
	// succ:  l0001926E
l0001926E:
	sp = fp
	__halt()
	__halt()
fn0001926E_exit:


// fn00019272
// Return size: 0
define fn00019272
fn00019272_entry:
	// succ:  l00019272
l00019272:
	sp = fp
	__halt()
	__halt()
fn00019272_exit:


// fn00019276
// Return size: 0
define fn00019276
fn00019276_entry:
	// succ:  l00019276
l00019276:
	sp = fp
	__halt()
	__halt()
fn00019276_exit:


// fn0001927A
// Return size: 0
define fn0001927A
fn0001927A_entry:
	// succ:  l0001927A
l0001927A:
	sp = fp
	__halt()
	__halt()
	v3 = 0x00 & 1 << 0x00000006
	0x00 = 0x00 & ~(1 << 0x00000006)
	branch v3 != 0x00000000 l0001927C_thunk_fn00019280
	goto l0001927C_thunk_fn00019280
	// succ:  l0001927C_thunk_fn00019280 l0001927C_thunk_fn00019280
l0001927C_thunk_fn00019280:
	call fn00019280 (retsize: 0;)
	return
	// succ:  fn0001927A_exit
l0001927C_thunk_fn00019280:
	call fn00019280 (retsize: 0;)
	return
	// succ:  fn0001927A_exit
fn0001927A_exit:


// fn0001927E
// Return size: 0
define fn0001927E
fn0001927E_entry:
	// succ:  l0001927E
l0001927E:
	sp = fp
	__halt()
	__halt()
	// succ:  l0001927F_thunk_fn00019280
l0001927F_thunk_fn00019280:
	call fn00019280 (retsize: 0;)
	return
	// succ:  fn0001927E_exit
fn0001927E_exit:


// fn00019280
// Return size: 0
define fn00019280
fn00019280_entry:
	// succ:  l00019280
l00019280:
	sp = fp
	__movp(0x00, 0x00, 0x0004)
	goto l00019280_thunk_fn00019284
	// succ:  l00019280_thunk_fn00019284
l00019280:
	__movp(0x00, 0x00, 0x0004)
	goto l00019280_thunk_fn00019284
	// succ:  l00019280_thunk_fn00019284
l00019280_thunk_fn00019284:
	call fn00019284 (retsize: 0;)
	return
	// succ:  fn00019280_exit
l00019280_thunk_fn00019284:
	call fn00019284 (retsize: 0;)
	return
	// succ:  fn00019280_exit
fn00019280_exit:


// fn00019282
// Return size: 0
define fn00019282
fn00019282_entry:
	// succ:  l00019282
l00019282:
	sp = fp
	__halt()
	__halt()
fn00019282_exit:


// fn00019284
// Return size: 0
define fn00019284
fn00019284_entry:
	// succ:  l00019284
l00019284:
	sp = fp
l00019284:
fn00019284_exit:


// fn00019286
// Return size: 0
define fn00019286
fn00019286_entry:
	// succ:  l00019286
l00019286:
	sp = fp
	__halt()
	__halt()
fn00019286_exit:


// fn0001928A
// Return size: 0
define fn0001928A
fn0001928A_entry:
	// succ:  l0001928A
l0001928A:
	sp = fp
	__halt()
	__halt()
fn0001928A_exit:


// fn0001928E
// Return size: 0
define fn0001928E
fn0001928E_entry:
	// succ:  l0001928E
l0001928E:
	sp = fp
	__halt()
	__halt()
fn0001928E_exit:


// fn00019292
// Return size: 0
define fn00019292
fn00019292_entry:
	// succ:  l00019292
l00019292:
	sp = fp
	__halt()
	__halt()
fn00019292_exit:


// fn00019296
// Return size: 4
define fn00019296
fn00019296_entry:
	// succ:  l00019296
l00019296:
	sp = fp
	__halt()
	__halt()
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn00019296_exit
fn00019296_exit:


// fn0001929A
// Return size: 0
define fn0001929A
fn0001929A_entry:
	// succ:  l0001929A
l0001929A:
	sp = fp
	__halt()
	__halt()
fn0001929A_exit:


// fn0001929E
// Return size: 0
define fn0001929E
fn0001929E_entry:
	// succ:  l0001929E
l0001929E:
	sp = fp
	__halt()
	__halt()
fn0001929E_exit:


// fn000192A2
// Return size: 0
define fn000192A2
fn000192A2_entry:
	// succ:  l000192A2
l000192A2:
	sp = fp
	__halt()
	__halt()
	branch Test(NO,V) l000192A4_thunk_fn000192A8
	// succ:  l000192A4_thunk_fn000192A6 l000192A4_thunk_fn000192A8
l000192A4_thunk_fn000192A6:
	call fn000192A6 (retsize: 0;)
	return
	// succ:  fn000192A2_exit
l000192A4_thunk_fn000192A8:
	call fn000192A8 (retsize: 0;)
	return
	// succ:  fn000192A2_exit
fn000192A2_exit:


// fn000192A6
// Return size: 0
define fn000192A6
fn000192A6_entry:
	// succ:  l000192A6
l000192A6:
	sp = fp
	__halt()
	__halt()
fn000192A6_exit:


// fn000192A8
// Return size: 0
define fn000192A8
fn000192A8_entry:
	// succ:  l000192A8
l000192A8:
	sp = fp
l000192A8:
fn000192A8_exit:


// fn000192AA
// Return size: 0
define fn000192AA
fn000192AA_entry:
	// succ:  l000192AA
l000192AA:
	sp = fp
	__halt()
	__halt()
	v3 = 0x00 & 1 << 0x00000003
	0x00 = 0x00 & ~(1 << 0x00000003)
	branch v3 != 0x00000000 l000192AC_thunk_fn000192B0
	goto l000192AC_thunk_fn000192B0
	// succ:  l000192AC_thunk_fn000192B0 l000192AC_thunk_fn000192B0
l000192AC_thunk_fn000192B0:
	call fn000192B0 (retsize: 0;)
	return
	// succ:  fn000192AA_exit
l000192AC_thunk_fn000192B0:
	call fn000192B0 (retsize: 0;)
	return
	// succ:  fn000192AA_exit
fn000192AA_exit:


// fn000192AE
// Return size: 0
define fn000192AE
fn000192AE_entry:
	// succ:  l000192AE
l000192AE:
	sp = fp
	__halt()
	__halt()
fn000192AE_exit:


// fn000192B0
// Return size: 0
define fn000192B0
fn000192B0_entry:
	// succ:  l000192B0
l000192B0:
	sp = fp
l000192B0:
fn000192B0_exit:


// fn000192B2
// Return size: 0
define fn000192B2
fn000192B2_entry:
	// succ:  l000192B2
l000192B2:
	sp = fp
	__halt()
	__halt()
fn000192B2_exit:


// fn000192B6
// Return size: 4
define fn000192B6
fn000192B6_entry:
	// succ:  l000192B6
l000192B6:
	sp = fp
	__halt()
	__halt()
	sp = fp - 0x00000004
	fp = Mem0[sp + 0x00000010:word32]
	ap = Mem0[sp + 0x0000000C:word32]
	return
	// succ:  fn000192B6_exit
fn000192B6_exit:


// fn000192BA
// Return size: 0
define fn000192BA
fn000192BA_entry:
	// succ:  l000192BA
l000192BA:
	sp = fp
	__halt()
	__halt()
fn000192BA_exit:


// fn000192BE
// Return size: 0
define fn000192BE
fn000192BE_entry:
	// succ:  l000192BE
l000192BE:
	sp = fp
	__halt()
	__halt()
fn000192BE_exit:


// fn000192C2
// Return size: 0
define fn000192C2
fn000192C2_entry:
	// succ:  l000192C2
l000192C2:
	sp = fp
	__halt()
	__halt()
fn000192C2_exit:


// fn000192C6
// Return size: 0
define fn000192C6
fn000192C6_entry:
	// succ:  l000192C6
l000192C6:
	sp = fp
	__halt()
	__halt()
fn000192C6_exit:


// fn000192CE
// Return size: 0
define fn000192CE
fn000192CE_entry:
	// succ:  l000192CE
l000192CE:
	sp = fp
	__halt()
	__halt()
fn000192CE_exit:


// fn000192D2
// Return size: 0
define fn000192D2
fn000192D2_entry:
	// succ:  l000192D2
l000192D2:
	sp = fp
	__halt()
	__halt()
fn000192D2_exit:


// fn000192D6
// Return size: 0
define fn000192D6
fn000192D6_entry:
	// succ:  l000192D6
l000192D6:
	sp = fp
	__halt()
	__halt()
fn000192D6_exit:


// fn000192DA
// Return size: 0
define fn000192DA
fn000192DA_entry:
	// succ:  l000192DA
l000192DA:
	sp = fp
	__halt()
	__halt()
fn000192DA_exit:


// fn000192DE
// Return size: 0
define fn000192DE
fn000192DE_entry:
	// succ:  l000192DE
l000192DE:
	sp = fp
	__halt()
	__halt()
fn000192DE_exit:


// fn000192E6
// Return size: 0
define fn000192E6
fn000192E6_entry:
	// succ:  l000192E6
l000192E6:
	sp = fp
	__halt()
	__halt()
	__halt()
fn000192E6_exit:


// fn0001931E
// Return size: 0
define fn0001931E
fn0001931E_entry:
	// succ:  l0001931E
l0001931E:
	sp = fp
	__halt()
	__halt()
fn0001931E_exit:


// fn00019322
// Return size: 0
define fn00019322
fn00019322_entry:
	// succ:  l00019322
l00019322:
	sp = fp
	__halt()
	__halt()
fn00019322_exit:


// fn0001932E
// Return size: 0
define fn0001932E
fn0001932E_entry:
	// succ:  l0001932E
l0001932E:
	sp = fp
	__halt()
	__halt()
fn0001932E_exit:


// fn00019332
// Return size: 0
define fn00019332
fn00019332_entry:
	// succ:  l00019332
l00019332:
	sp = fp
	__halt()
	__halt()
fn00019332_exit:


// fn00019336
// Return size: 4
define fn00019336
fn00019336_entry:
	// succ:  l00019336
l00019336:
	sp = fp
	__halt()
	__halt()
	call fn0001933E (retsize: 4;)
	__halt()
	__halt()
	__halt()
	return
	// succ:  fn00019336_exit
fn00019336_exit:


// fn0001933E
// Return size: 0
define fn0001933E
fn0001933E_entry:
	// succ:  l0001933E
l0001933E:
	sp = fp
	__halt()
	__halt()
fn0001933E_exit:


// fn00019342
// Return size: 0
define fn00019342
fn00019342_entry:
	// succ:  l00019342
l00019342:
	sp = fp
	__halt()
	__halt()
fn00019342_exit:


// fn00019346
// Return size: 0
define fn00019346
fn00019346_entry:
	// succ:  l00019346
l00019346:
	sp = fp
	__halt()
	__halt()
	__halt()
	__halt()
	__halt()
	__halt()
fn00019346_exit:


