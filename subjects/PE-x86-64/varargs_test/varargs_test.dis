// fn0000000140001000
// Return size: 8
void fn0000000140001000()
fn0000000140001000_entry:
	// succ:  l0000000140001000
l0000000140001000:
	rsp = fp
	rsp = rsp - 200
	SCZO = cond(rsp)
	rax = Mem0[0x0000000140003000:word64]
	rax = rax ^ rsp
	SZO = cond(rax)
	C = false
	Mem0[rsp + 0x00000000000000B8:word64] = rax
	xmm0 = Mem0[0x0000000140002260:word128]
	r9 = 0x0000000140002240
	Mem0[rsp + 0x0000000000000038:word32] = 0x00000057
	r8 = 0x0000000140002250
	Mem0[rsp + 0x0000000000000030:word32] = 0x00000063
	rcx = 0x0000000140002210
	edx = 0x00000003
	Mem0[rsp + 0x0000000000000020:word128] = xmm0
	call fn0000000140001140 (retsize: 8;)
	rax = rsp + 0x0000000000000044
	Mem0[rsp + 0x0000000000000038:word64] = rax
	r9 = rsp + 0x0000000000000078
	rax = rsp + 0x0000000000000040
	Mem0[rsp + 0x0000000000000030:word64] = rax
	r8 = rsp + 0x0000000000000058
	rax = rsp + 0x0000000000000050
	Mem0[rsp + 0x0000000000000028:word64] = rax
	rdx = rsp + 0x000000000000004C
	rax = rsp + 0x0000000000000048
	rcx = 0x0000000140002228
	Mem0[rsp + 0x0000000000000020:word64] = rax
	call fn00000001400010D0 (retsize: 8;)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rcx = Mem0[rsp + 0x00000000000000B8:word64]
	rcx = rcx ^ rsp
	SZO = cond(rcx)
	C = false
	call fn00000001400011B0 (retsize: 8;)
	rsp = rsp + 200
	SCZO = cond(rsp)
	return
	// succ:  fn0000000140001000_exit
fn0000000140001000_exit:


// fn00000001400010C0
// Return size: 8
void fn00000001400010C0()
fn00000001400010C0_entry:
	// succ:  l00000001400010C0
l00000001400010C0:
	rsp = fp
	rax = 0x0000000140003628
	return
	// succ:  fn00000001400010C0_exit
fn00000001400010C0_exit:


// fn00000001400010D0
// Return size: 8
void fn00000001400010D0()
fn00000001400010D0_entry:
	// succ:  l00000001400010D0
l00000001400010D0:
	rsp = fp
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	Mem0[rsp + 0x0000000000000010:word64] = rdx
	Mem0[rsp + 0x0000000000000018:word64] = r8
	Mem0[rsp + 0x0000000000000020:word64] = r9
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000030
	SCZO = cond(rsp)
	rdi = rcx
	rsi = rsp + 0x0000000000000058
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	call _acrt_iob_func (retsize: 4;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	rbx = rax
	call fn00000001400010C0 (retsize: 8;)
	r9d = r9d ^ r9d
	SZO = cond(r9d)
	C = false
	Mem0[rsp + 0x0000000000000020:word64] = rsi
	r8 = rdi
	rdx = rbx
	rcx = Mem0[rax:word64]
	call _stdio_common_vfscanf (retsize: 4;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	rsp = rsp + 0x0000000000000030
	SCZO = cond(rsp)
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn00000001400010D0_exit
fn00000001400010D0_exit:


// fn0000000140001130
// Return size: 8
void fn0000000140001130()
fn0000000140001130_entry:
	// succ:  l0000000140001130
l0000000140001130:
	rsp = fp
	rax = 0x0000000140003620
	return
	// succ:  fn0000000140001130_exit
fn0000000140001130_exit:


// fn0000000140001140
// Return size: 8
void fn0000000140001140()
fn0000000140001140_entry:
	// succ:  l0000000140001140
l0000000140001140:
	rsp = fp
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	Mem0[rsp + 0x0000000000000010:word64] = rdx
	Mem0[rsp + 0x0000000000000018:word64] = r8
	Mem0[rsp + 0x0000000000000020:word64] = r9
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000030
	SCZO = cond(rsp)
	rdi = rcx
	rsi = rsp + 0x0000000000000058
	ecx = 0x00000001
	call _acrt_iob_func (retsize: 4;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	rbx = rax
	call fn0000000140001130 (retsize: 8;)
	r9d = r9d ^ r9d
	SZO = cond(r9d)
	C = false
	Mem0[rsp + 0x0000000000000020:word64] = rsi
	r8 = rdi
	rdx = rbx
	rcx = Mem0[rax:word64]
	call _stdio_common_vfprintf (retsize: 4;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	rsp = rsp + 0x0000000000000030
	SCZO = cond(rsp)
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000140001140_exit
fn0000000140001140_exit:


// fn00000001400011B0
// Return size: 8
void fn00000001400011B0()
fn00000001400011B0_entry:
	// succ:  l00000001400011B0
l00000001400011B0:
	rsp = fp
	SCZO = cond(rcx - Mem0[0x0000000140003000:word64])
	branch rcx == 0x0000000000000000 l00000001400011BA
	// succ:  l00000001400011B7_1 l00000001400011BA
l00000001400011B7_1:
	// succ:  l00000001400011BA
l00000001400011BA:
	v5 = (rcx & 0x0000000000000001 << 0x40 - 0x10) != 0x0000000000000000
	rcx = __rol(rcx, 0x10)
	C = v5
	SZO = cond(cx & 0xFFFF)
	C = false
	branch rcx == 0x0000000000000000 l00000001400011C6
	// succ:  l00000001400011C3_1 l00000001400011C6
l00000001400011C3_1:
	// succ:  l00000001400011C6
l00000001400011C6:
	branch rcx == 0x0000000000000000 l00000001400011C8
	// succ:  l00000001400011C6_1 l00000001400011C8
l00000001400011C6_1:
	return
	// succ:  fn00000001400011B0_exit
l00000001400011C8:
	v9 = (rcx & 0x0000000000000001 << 0x10) != 0x0000000000000000
	rcx = __ror(rcx, 0x10)
	C = v9
	// succ:  l00000001400011C8_thunk_fn000000014000147C
l00000001400011C8_thunk_fn000000014000147C:
	call fn000000014000147C (retsize: 0;)
	return
	// succ:  fn00000001400011B0_exit
fn00000001400011B0_exit:


// fn00000001400011D4
// Return size: 8
void fn00000001400011D4()
fn00000001400011D4_entry:
	// succ:  l00000001400011D4
l00000001400011D4:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000020
	SCZO = cond(rsp)
	ecx = 0x00000001
	call set_app_type (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	call fn0000000140001920 (retsize: 8;)
	ecx = eax
	eax = _set_fmode(Mem0[rsp:int32])
	rax = __p__commode()
	rbx = rax
	call fn0000000140001ABC (retsize: 8;)
	ecx = 0x00000001
	Mem0[rbx:word32] = eax
	call fn000000014000164C (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000140001279
	// succ:  l000000014000120D l0000000140001279
l000000014000120D:
	call fn0000000140001B5C (retsize: 8;)
	rcx = 0x0000000140001BA8
	call fn0000000140001854 (retsize: 8;)
	call fn0000000140001918 (retsize: 8;)
	ecx = eax
	call configure_narrow_argv (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000140001284
	// succ:  l000000014000122E l0000000140001284
l000000014000122E:
	call fn0000000140001928 (retsize: 8;)
	call fn0000000140001958 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000140001248
	// succ:  l000000014000123C l0000000140001248
l000000014000123C:
	rcx = 0x0000000140001ABC
	call _setusermatherr (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000140001248
l0000000140001248:
	call fn0000000140001DD0 (retsize: 8;)
	call fn0000000140001DD0 (retsize: 8;)
	call fn0000000140001ABC (retsize: 8;)
	ecx = eax
	call configthreadlocale (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	call fn0000000140001938 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000014000126C
	// succ:  l0000000140001267 l000000014000126C
l0000000140001267:
	call initialize_narrow_environment (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000014000126C
l000000014000126C:
	call fn0000000140001ABC (retsize: 8;)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x0000000000000020
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn00000001400011D4_exit
l0000000140001279:
	ecx = 0x00000007
	call fn0000000140001974 (retsize: 8;)
	int3()
	// succ:  l0000000140001284
l0000000140001284:
	ecx = 0x00000007
	call fn0000000140001974 (retsize: 8;)
	int3()
	int3()
	// succ:  l000000014000128F_thunk_fn0000000140001290
l000000014000128F_thunk_fn0000000140001290:
	call fn0000000140001290 (retsize: 8;)
	return
	// succ:  fn00000001400011D4_exit
fn00000001400011D4_exit:


// fn0000000140001290
// Return size: 8
void fn0000000140001290()
fn0000000140001290_entry:
	// succ:  l0000000140001290
l0000000140001290:
	rsp = fp
	rsp = rsp - 0x0000000000000028
	SCZO = cond(rsp)
	call fn000000014000193C (retsize: 8;)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	return
	// succ:  fn0000000140001290_exit
fn0000000140001290_exit:


// fn00000001400012A0
// Return size: 0
void fn00000001400012A0()
fn00000001400012A0_entry:
	// succ:  l00000001400012A0
l00000001400012A0:
	rsp = fp
	rsp = rsp - 0x0000000000000028
	SCZO = cond(rsp)
	call fn0000000140001B14 (retsize: 8;)
	call fn0000000140001ABC (retsize: 8;)
	ecx = eax
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	// succ:  l0000000140001E52
l0000000140001E52:
	call Mem0[0x0000000140002098:word32] (retsize: 4;)
	return
	// succ:  fn00000001400012A0_exit
fn00000001400012A0_exit:


// fn00000001400012BC
// Return size: 0
void fn00000001400012BC()
fn00000001400012BC_entry:
	// succ:  l00000001400012BC
l00000001400012BC:
	rsp = fp
	Mem0[rsp + 0x0000000000000008:word64] = rbx
	Mem0[rsp + 0x0000000000000010:word64] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000030
	SCZO = cond(rsp)
	ecx = 0x00000001
	call fn0000000140001600 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000001400012E4
	// succ:  l00000001400012D9 l00000001400012E4
l00000001400012D9:
	ecx = 0x00000007
	call fn0000000140001974 (retsize: 8;)
	int3()
	// succ:  l00000001400012E4
l00000001400012E4:
	sil = sil ^ sil
	SZO = cond(sil)
	C = false
	Mem0[rsp + 0x0000000000000020:byte] = sil
	call fn00000001400015C4 (retsize: 8;)
	bl = al
	ecx = Mem0[0x00000001400035B0:word32]
	SCZO = cond(ecx - 0x00000001)
	branch Test(NE,Z) l0000000140001308
	// succ:  l00000001400012FE l0000000140001308
l00000001400012FE:
	ecx = 0x00000007
	call fn0000000140001974 (retsize: 8;)
	// succ:  l0000000140001308
l0000000140001308:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l0000000140001356
	// succ:  l000000014000130C l0000000140001356
l000000014000130C:
	Mem0[0x00000001400035B0:word32] = 0x00000001
	rdx = 0x00000001400021D0
	rcx = 0x00000001400021B8
	call initterm_e (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000140001337
	// succ:  l000000014000132D l0000000140001337
l000000014000132D:
	eax = 0x000000FF
	goto l0000000140001423
	// succ:  l0000000140001423
l0000000140001337:
	rdx = 0x00000001400021B0
	rcx = 0x00000001400021A0
	call initterm (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	Mem0[0x00000001400035B0:word32] = 0x00000002
	goto l000000014000135E
	// succ:  l000000014000135E
l0000000140001356:
	sil = 0x01
	Mem0[rsp + 0x0000000000000020:byte] = sil
	// succ:  l000000014000135E
l000000014000135E:
	cl = bl
	call fn00000001400017B4 (retsize: 8;)
	call fn0000000140001964 (retsize: 8;)
	rbx = rax
	SCZO = cond(Mem0[rax:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000140001395
	// succ:  l0000000140001373 l0000000140001395
l0000000140001373:
	rcx = rax
	call fn0000000140001718 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000140001395
	// succ:  l000000014000137F l0000000140001395
l000000014000137F:
	rbx = Mem0[rbx:word64]
	rcx = rbx
	call fn0000000140001BF4 (retsize: 8;)
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	edx = rax + 0x0000000000000002
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	call ebx (retsize: 4;)
	// succ:  l0000000140001395
l0000000140001395:
	call fn000000014000196C (retsize: 8;)
	rbx = rax
	SCZO = cond(Mem0[rax:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l00000001400013B7
	// succ:  l00000001400013A3 l00000001400013B7
l00000001400013A3:
	rcx = rax
	call fn0000000140001718 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000001400013B7
	// succ:  l00000001400013AF l00000001400013B7
l00000001400013AF:
	rcx = Mem0[rbx:word64]
	call register_thread_local_exe_atexit_callback (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	// succ:  l00000001400013B7
l00000001400013B7:
	call _p___argv (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	rdi = rax
	call _p___argc (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	rbx = rax
	call get_initial_narrow_environment (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	r8 = rax
	rdx = Mem0[rdi:word64]
	ecx = Mem0[rbx:word32]
	call fn0000000140001000 (retsize: 8;)
	ebx = eax
	call fn0000000140001AC0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000001400013EB
	// succ:  l00000001400013E4 l00000001400013EB
l00000001400013E4:
	ecx = ebx
	exit(rcx)
l00000001400013EB:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l00000001400013F5
	// succ:  l00000001400013F0 l00000001400013F5
l00000001400013F0:
	call cexit (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	// succ:  l00000001400013F5
l00000001400013F5:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	cl = 0x01
	call fn00000001400017D8 (retsize: 8;)
	eax = ebx
	// succ:  l0000000140001423
l0000000140001423:
	rbx = Mem0[rsp + 0x0000000000000040:word64]
	rsi = Mem0[rsp + 0x0000000000000048:word64]
	rsp = rsp + 0x0000000000000030
	SCZO = cond(rsp)
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn00000001400012BC_exit
fn00000001400012BC_exit:


// Win32CrtStartup
// Return size: 8
DWORD Win32CrtStartup()
Win32CrtStartup_entry:
	// succ:  l0000000140001434
l0000000140001434:
	rsp = fp
	rsp = rsp - 0x0000000000000028
	SCZO = cond(rsp)
	call fn000000014000186C (retsize: 8;)
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	// succ:  l000000014000143D_thunk_fn00000001400012BC
l000000014000143D_thunk_fn00000001400012BC:
	call fn00000001400012BC (retsize: 0;)
	return
	// succ:  Win32CrtStartup_exit
Win32CrtStartup_exit:


// fn0000000140001448
// Return size: 0
void fn0000000140001448()
fn0000000140001448_entry:
	// succ:  l0000000140001448
l0000000140001448:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000020
	SCZO = cond(rsp)
	rbx = rcx
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	eax = SetUnhandledExceptionFilter(Mem0[rsp + 4:LPTOP_LEVEL_EXCEPTION_FILTER])
	rcx = rbx
	eax = UnhandledExceptionFilter(Mem0[rsp + 4:(ptr (struct "_EXCEPTION_POINTERS"))])
	eax = GetCurrentProcess()
	rcx = rax
	edx = 0xC0000409
	rsp = rsp + 0x0000000000000020
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	call Mem0[0x0000000140002058:word64] (retsize: 4;)
	return
	// succ:  fn0000000140001448_exit
fn0000000140001448_exit:


// fn000000014000147C
// Return size: 0
void fn000000014000147C()
fn000000014000147C_entry:
	// succ:  l000000014000147C
l000000014000147C:
	rsp = fp
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	rsp = rsp - 0x0000000000000038
	SCZO = cond(rsp)
	ecx = 0x00000017
	eax = IsProcessorFeaturePresent(Mem0[rsp:DWORD])
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000014000149A
	// succ:  l0000000140001493 l000000014000149A
l0000000140001493:
	ecx = 0x00000002
	rcx = __fastfail()
	goto fn000000014000147C_exit
	// succ:  fn000000014000147C_exit
l000000014000149A:
	rcx = 0x00000001400030E0
	call fn0000000140001550 (retsize: 8;)
	rax = Mem0[rsp + 0x0000000000000038:word64]
	Mem0[0x00000001400031D8:word64] = rax
	rax = rsp + 0x0000000000000038
	rax = rax + 0x0000000000000008
	SCZO = cond(rax)
	Mem0[0x0000000140003178:word64] = rax
	rax = Mem0[0x00000001400031D8:word64]
	Mem0[0x0000000140003050:word64] = rax
	rax = Mem0[rsp + 0x0000000000000040:word64]
	Mem0[0x0000000140003160:word64] = rax
	Mem0[0x0000000140003040:word32] = 0xC0000409
	Mem0[0x0000000140003044:word32] = 0x00000001
	Mem0[0x0000000140003058:word32] = 0x00000001
	eax = 0x00000008
	rax = rax *s 0x0000000000000000
	SCZO = cond(rax)
	rcx = 0x0000000140003060
	Mem0[rcx + rax:word64] = 0x0000000000000002
	eax = 0x00000008
	rax = rax *s 0x0000000000000000
	SCZO = cond(rax)
	rcx = Mem0[0x0000000140003000:word64]
	Mem0[rsp + 0x0000000000000020 + rax:word64] = rcx
	eax = 0x00000008
	rax = rax *s 0x0000000000000001
	SCZO = cond(rax)
	rcx = Mem0[0x0000000140003008:word64]
	Mem0[rsp + 0x0000000000000020 + rax:word64] = rcx
	rcx = 0x0000000140002200
	call fn0000000140001448 (retsize: 8;)
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	return
	// succ:  fn000000014000147C_exit
fn000000014000147C_exit:


// fn0000000140001550
// Return size: 8
void fn0000000140001550()
fn0000000140001550_entry:
	// succ:  l0000000140001550
l0000000140001550:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000040
	SCZO = cond(rsp)
	rbx = rcx
	RtlCaptureContext(Mem0[rsp + 4:PCONTEXT])
	rsi = Mem0[rbx + 0x00000000000000F8:word64]
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	// succ:  l000000014000156A
l000000014000156A:
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	rdx = rsp + 0x0000000000000060
	rcx = rsi
	rax = RtlLookupFunctionEntry(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000001400015B9
	// succ:  l0000000140001580 l00000001400015B9
l0000000140001580:
	v16 = Mem0[rsp + 0x0000000000000038:word64] & 0x0000000000000000
	Mem0[rsp + 0x0000000000000038:word64] = v16
	SZO = cond(Mem0[rsp + 0x0000000000000038:word64])
	C = false
	rcx = rsp + 0x0000000000000068
	rdx = Mem0[rsp + 0x0000000000000060:word64]
	r9 = rax
	Mem0[rsp + 0x0000000000000030:word64] = rcx
	r8 = rsi
	rcx = rsp + 0x0000000000000070
	Mem0[rsp + 0x0000000000000028:word64] = rcx
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	Mem0[rsp + 0x0000000000000020:word64] = rbx
	call KERNEL32.dll!RtlVirtualUnwind (retsize: 4;)
	edi = edi + 0x00000001
	SZO = cond(edi)
	SCZO = cond(edi - 0x00000002)
	branch Test(LT,SO) l000000014000156A
	// succ:  l00000001400015B9 l000000014000156A
l00000001400015B9:
	rsp = rsp + 0x0000000000000040
	SCZO = cond(rsp)
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000140001550_exit
fn0000000140001550_exit:


// fn00000001400015C4
// Return size: 8
void fn00000001400015C4()
fn00000001400015C4_entry:
	// succ:  l00000001400015C4
l00000001400015C4:
	rsp = fp
	rsp = rsp - 0x0000000000000028
	SCZO = cond(rsp)
	call fn0000000140001DC4 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000001400015F2
	// succ:  l00000001400015D1 l00000001400015F2
l00000001400015D1:
	rax = Mem0[gs:0x00000030:word64]
	rcx = Mem0[rax + 0x0000000000000008:word64]
	goto l00000001400015E5
	// succ:  l00000001400015E5
l00000001400015E0:
	SCZO = cond(rcx - rax)
	branch Test(EQ,Z) l00000001400015F9
	// succ:  l00000001400015E5 l00000001400015F9
l00000001400015E5:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	__lock()
	Z = __cmpxchg(Mem0[0x00000001400035B8:word64], rcx, Mem0, out Mem0)
	branch Test(NE,Z) l00000001400015E0
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	__lock()
	Z = __cmpxchg(Mem0[0x00000001400035B8:word64], rcx, Mem0, out Mem0)
	branch Test(NE,Z) l00000001400015E0
	// succ:  l00000001400015F2 l00000001400015E0
l00000001400015F2:
	al = al ^ al
	SZO = cond(al)
	C = false
	al = al ^ al
	SZO = cond(al)
	C = false
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l00000001400015F4
l00000001400015F4:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	return
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	return
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	return
	// succ:  fn00000001400015C4_exit fn00000001400015C4_exit fn00000001400015C4_exit
l00000001400015F9:
	al = 0x01
	goto l00000001400015F4
	// succ:  l00000001400015F4
fn00000001400015C4_exit:


// fn0000000140001600
// Return size: 8
void fn0000000140001600()
fn0000000140001600_entry:
	// succ:  l0000000140001600
l0000000140001600:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000020
	SCZO = cond(rsp)
	eax = (word32) Mem0[0x00000001400035F0:byte]
	SZO = cond(ecx & ecx)
	C = false
	ebx = 0x00000001
	branch Test(NE,Z) l0000000140001617
	// succ:  l0000000140001614_1 l0000000140001617
l0000000140001614_1:
	eax = ebx
	// succ:  l0000000140001617
l0000000140001617:
	Mem0[0x00000001400035F0:byte] = al
	call fn0000000140001BFC (retsize: 8;)
	call fn0000000140001938 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000014000162F
	// succ:  l000000014000162B l000000014000162F
l000000014000162B:
	al = al ^ al
	SZO = cond(al)
	C = false
	goto l0000000140001643
	// succ:  l0000000140001643
l000000014000162F:
	call fn0000000140001938 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000140001641
	// succ:  l0000000140001638 l0000000140001641
l0000000140001638:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	call fn0000000140001938 (retsize: 8;)
	goto l000000014000162B
	// succ:  l000000014000162B
l0000000140001641:
	al = bl
	// succ:  l0000000140001643
l0000000140001643:
	rsp = rsp + 0x0000000000000020
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000140001600_exit
fn0000000140001600_exit:


// fn000000014000164C
// Return size: 8
void fn000000014000164C()
fn000000014000164C_entry:
	// succ:  l000000014000164C
l000000014000164C:
	rsp = fp
	Mem0[rsp + 0x0000000000000008:word64] = rbx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsp
	rsp = rsp - 0x0000000000000040
	SCZO = cond(rsp)
	ebx = ecx
	SCZO = cond(ecx - 0x00000001)
	branch Test(UGT,CZ) l000000014000170A
	// succ:  l0000000140001664 l000000014000170A
l0000000140001664:
	call fn0000000140001DC4 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000140001698
	// succ:  l000000014000166D l0000000140001698
l000000014000166D:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l0000000140001698
	// succ:  l0000000140001671 l0000000140001698
l0000000140001671:
	rcx = 0x00000001400035C0
	call initialize_onexit_table (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000140001685
	// succ:  l0000000140001681 l0000000140001685
l0000000140001681:
	al = al ^ al
	SZO = cond(al)
	C = false
	goto l00000001400016FF
	// succ:  l00000001400016FF
l0000000140001685:
	rcx = 0x00000001400035D8
	call initialize_onexit_table (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SZO = cond(eax & eax)
	C = false
	al = Test(EQ,Z)
	goto l00000001400016FF
	// succ:  l00000001400016FF
l0000000140001698:
	rdx = Mem0[0x0000000140003000:word64]
	r8 = r8 | 0xFFFFFFFFFFFFFFFF
	SZO = cond(r8)
	C = false
	eax = edx
	ecx = 0x00000040
	eax = eax & 0x0000003F
	SZO = cond(eax)
	C = false
	ecx = ecx - eax
	SCZO = cond(ecx)
	al = 0x01
	v19 = (r8 & 0x0000000000000001 << cl) != 0x0000000000000000
	r8 = __ror(r8, cl)
	C = v19
	r8 = r8 ^ rdx
	SZO = cond(r8)
	C = false
	Mem0[r13 - 0x0000000000000020:word64] = r8
	Mem0[r13 - 0x0000000000000018:word64] = r8
l00000001400016FF:
	rbx = Mem0[rsp + 0x0000000000000050:word64]
	rsp = rsp + 0x0000000000000040
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000014000164C_exit
l000000014000170A:
	ecx = 0x00000005
	call fn0000000140001974 (retsize: 8;)
	int3()
	int3()
	int3()
	int3()
	// succ:  l0000000140001717_thunk_fn0000000140001718
l0000000140001717_thunk_fn0000000140001718:
	call fn0000000140001718 (retsize: 8;)
	return
	// succ:  fn000000014000164C_exit
fn000000014000164C_exit:


// fn0000000140001718
// Return size: 8
void fn0000000140001718()
fn0000000140001718_entry:
	// succ:  l0000000140001718
l0000000140001718:
	rsp = fp
	rsp = rsp - 0x0000000000000018
	SCZO = cond(rsp)
	r8 = rcx
	eax = 0x00005A4D
	SCZO = cond(Mem0[0x0000000140000000:word16] - ax)
	branch Test(NE,Z) l00000001400017A6
	// succ:  l000000014000172D l00000001400017A6
l000000014000172D:
	rax = (int64) Mem0[0x000000014000003C:word32]
	rdx = 0x0000000140000000
	rcx = rax + rdx
	SCZO = cond(Mem0[rcx:word32] - 0x00004550)
	branch Test(NE,Z) l00000001400017A6
	// succ:  l0000000140001747 l00000001400017A6
l0000000140001747:
	eax = 0x0000020B
	SCZO = cond(Mem0[rcx + 0x0000000000000018:word16] - ax)
	branch Test(NE,Z) l00000001400017A6
	// succ:  l0000000140001752 l00000001400017A6
l0000000140001752:
	r8 = r8 - rdx
	SCZO = cond(r8)
	eax = (word32) Mem0[rcx + 0x0000000000000014:word16]
	rdx = rcx + 0x0000000000000018
	rdx = rdx + rax
	SCZO = cond(rdx)
	eax = (word32) Mem0[rcx + 0x0000000000000006:word16]
	rcx = rax + rax * 0x0000000000000004
	r9 = rdx + rcx * 0x0000000000000008
	// succ:  l000000014000176C
l000000014000176C:
	Mem0[rsp:word64] = rdx
	SCZO = cond(rdx - r9)
	branch Test(EQ,Z) l000000014000178D
	// succ:  l0000000140001775 l000000014000178D
l0000000140001775:
	ecx = Mem0[rdx + 0x000000000000000C:word32]
	SCZO = cond(r8 - rcx)
	branch Test(ULT,C) l0000000140001787
	// succ:  l000000014000177D l0000000140001787
l000000014000177D:
	eax = Mem0[rdx + 0x0000000000000008:word32]
	eax = eax + ecx
	SCZO = cond(eax)
	SCZO = cond(r8 - rax)
	branch Test(ULT,C) l000000014000178F
	// succ:  l0000000140001787 l000000014000178F
l0000000140001787:
	rdx = rdx + 0x0000000000000028
	SCZO = cond(rdx)
	goto l000000014000176C
	// succ:  l000000014000176C
l000000014000178D:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	// succ:  l000000014000178F
l000000014000178F:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(NE,Z) l0000000140001798
	// succ:  l0000000140001794 l0000000140001798
l0000000140001794:
	al = al ^ al
	SZO = cond(al)
	C = false
	goto l00000001400017AC
	// succ:  l00000001400017AC
l0000000140001798:
	SCZO = cond(Mem0[rdx + 0x0000000000000024:word32] - 0x00000000)
	branch Test(GE,SO) l00000001400017A2
	// succ:  l000000014000179E l00000001400017A2
l000000014000179E:
	al = al ^ al
	SZO = cond(al)
	C = false
	goto l00000001400017AC
	// succ:  l00000001400017AC
l00000001400017A2:
	al = 0x01
	goto l00000001400017AC
	// succ:  l00000001400017AC
l00000001400017A6:
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l00000001400017AC
l00000001400017AC:
	rsp = rsp + 0x0000000000000018
	SCZO = cond(rsp)
	return
	// succ:  fn0000000140001718_exit
fn0000000140001718_exit:


// fn00000001400017B4
// Return size: 8
void fn00000001400017B4()
fn00000001400017B4_entry:
	// succ:  l00000001400017B4
l00000001400017B4:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000020
	SCZO = cond(rsp)
	bl = cl
	call fn0000000140001DC4 (retsize: 8;)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000001400017D2
	// succ:  l00000001400017C7 l00000001400017D2
l00000001400017C7:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l00000001400017D2
	// succ:  l00000001400017CB l00000001400017D2
l00000001400017CB:
	v12 = Mem0[0x00000001400035B8:word64]
	Mem0[0x00000001400035B8:word64] = rdx
	rdx = v12
	// succ:  l00000001400017D2
l00000001400017D2:
	rsp = rsp + 0x0000000000000020
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn00000001400017B4_exit
fn00000001400017B4_exit:


// fn00000001400017D8
// Return size: 8
void fn00000001400017D8()
fn00000001400017D8_entry:
	// succ:  l00000001400017D8
l00000001400017D8:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000020
	SCZO = cond(rsp)
	SCZO = cond(Mem0[0x00000001400035F0:byte] - 0x00)
	bl = cl
	branch Test(EQ,Z) l00000001400017ED
	// succ:  l00000001400017E9 l00000001400017ED
l00000001400017E9:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l00000001400017FB
	// succ:  l00000001400017ED l00000001400017FB
l00000001400017ED:
	cl = bl
	call fn0000000140001938 (retsize: 8;)
	cl = bl
	call fn0000000140001938 (retsize: 8;)
	// succ:  l00000001400017FB
l00000001400017FB:
	al = 0x01
	rsp = rsp + 0x0000000000000020
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn00000001400017D8_exit
fn00000001400017D8_exit:


// fn0000000140001804
// Return size: 8
void fn0000000140001804()
fn0000000140001804_entry:
	// succ:  l0000000140001804
l0000000140001804:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000020
	SCZO = cond(rsp)
	rdx = Mem0[0x0000000140003000:word64]
	rbx = rcx
	ecx = edx
	rdx = rdx ^ Mem0[0x00000001400035C0:word64]
	SZO = cond(rdx)
	C = false
	ecx = ecx & 0x0000003F
	SZO = cond(ecx)
	C = false
	v12 = (rdx & 0x0000000000000001 << cl) != 0x0000000000000000
	rdx = __ror(rdx, cl)
	C = v12
	SCZO = cond(rdx - 0xFFFFFFFFFFFFFFFF)
	branch Test(NE,Z) l0000000140001833
	// succ:  l0000000140001829 l0000000140001833
l0000000140001829:
	rcx = rbx
	call crt_atexit (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	goto l0000000140001842
	// succ:  l0000000140001842
l0000000140001833:
	rdx = rbx
	rcx = 0x00000001400035C0
	call register_onexit_function (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000140001842
l0000000140001842:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000014000184A
	// succ:  l0000000140001846_1 l000000014000184A
l0000000140001846_1:
	rcx = rbx
	// succ:  l000000014000184A
l000000014000184A:
	rax = rcx
	rsp = rsp + 0x0000000000000020
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000140001804_exit
fn0000000140001804_exit:


// fn0000000140001854
// Return size: 8
void fn0000000140001854()
fn0000000140001854_entry:
	// succ:  l0000000140001854
l0000000140001854:
	rsp = fp
	rsp = rsp - 0x0000000000000028
	SCZO = cond(rsp)
	call fn0000000140001804 (retsize: 8;)
	rax = -rax
	SCZO = cond(rax)
	C = rax == 0x0000000000000000
	eax = eax - eax - C
	SCZO = cond(eax)
	eax = -eax
	SCZO = cond(eax)
	C = eax == 0x00000000
	eax = eax - 0x00000001
	SZO = cond(eax)
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	return
	// succ:  fn0000000140001854_exit
fn0000000140001854_exit:


// fn000000014000186C
// Return size: 8
void fn000000014000186C()
fn000000014000186C_entry:
	// succ:  l000000014000186C
l000000014000186C:
	rsp = fp
	Mem0[rsp + 0x0000000000000020:word64] = rbx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsp
	rsp = rsp - 0x0000000000000020
	SCZO = cond(rsp)
	v6 = Mem0[rbp + 0x0000000000000018:word64] & 0x0000000000000000
	Mem0[rbp + 0x0000000000000018:word64] = v6
	SZO = cond(Mem0[rbp + 0x0000000000000018:word64])
	C = false
	r11 = 0x000000002DDFA232
	rax = Mem0[0x0000000140003000:word64]
	SCZO = cond(rax - rbx)
	branch Test(NE,Z) l0000000140001903
	// succ:  l0000000140001894 l0000000140001903
l0000000140001894:
	rcx = rbp + 0x0000000000000018
	GetSystemTimeAsFileTime(Mem0[rsp + 4:LPFILETIME])
	rax = Mem0[rbp + 0x0000000000000018:word64]
	Mem0[rbp + 0x0000000000000010:word64] = rax
	eax = GetCurrentThreadId()
	eax = eax
	v14 = Mem0[rbp + 0x0000000000000010:word64] ^ rax
	Mem0[rbp + 0x0000000000000010:word64] = v14
	SZO = cond(Mem0[rbp + 0x0000000000000010:word64])
	C = false
	eax = GetCurrentProcessId()
	eax = eax
	rcx = rbp + 0x0000000000000020
	v15 = Mem0[rbp + 0x0000000000000010:word64] ^ rax
	Mem0[rbp + 0x0000000000000010:word64] = v15
	SZO = cond(Mem0[rbp + 0x0000000000000010:word64])
	C = false
	eax = QueryPerformanceCounter(Mem0[rsp + 4:(ptr LARGE_INTEGER)])
	eax = Mem0[rbp + 0x0000000000000020:word32]
	rcx = rbp + 0x0000000000000010
	rax = rax << 0x0000000000000020
	SCZO = cond(rax)
	rax = rax ^ Mem0[rbp + 0x0000000000000020:word64]
	SZO = cond(rax)
	C = false
	rax = rax ^ Mem0[rbp + 0x0000000000000010:word64]
	SZO = cond(rax)
	C = false
	rax = rax ^ rcx
	SZO = cond(rax)
	C = false
	r9 = 0x00000000FFFFFFFF
	rax = rax & rcx
	SZO = cond(rax)
	C = false
	r9 = 0x000000002DDFA233
	SCZO = cond(rax - rbx)
	branch Test(NE,Z) l00000001400018FC
	// succ:  l00000001400018F8_1 l00000001400018FC
l00000001400018F8_1:
	rax = rcx
	// succ:  l00000001400018FC
l00000001400018FC:
	Mem0[0x0000000140003000:word64] = rax
	// succ:  l0000000140001903
l0000000140001903:
	rbx = Mem0[rsp + 0x0000000000000048:word64]
	rax = ~rax
	Mem0[0x0000000140003008:word64] = rax
	rsp = rsp + 0x0000000000000020
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000014000186C_exit
fn000000014000186C_exit:


// fn0000000140001918
// Return size: 8
void fn0000000140001918()
fn0000000140001918_entry:
	// succ:  l0000000140001918
l0000000140001918:
	rsp = fp
	eax = 0x00000001
	return
	// succ:  fn0000000140001918_exit
fn0000000140001918_exit:


// fn0000000140001920
// Return size: 8
void fn0000000140001920()
fn0000000140001920_entry:
	// succ:  l0000000140001920
l0000000140001920:
	rsp = fp
	eax = 0x00004000
	return
	// succ:  fn0000000140001920_exit
fn0000000140001920_exit:


// fn0000000140001928
// Return size: 0
void fn0000000140001928()
fn0000000140001928_entry:
	// succ:  l0000000140001928
l0000000140001928:
	rsp = fp
	rcx = 0x0000000140003600
	call Mem0[0x0000000140002028:word64] (retsize: 4;)
	return
	// succ:  fn0000000140001928_exit
fn0000000140001928_exit:


// fn0000000140001938
// Return size: 8
void fn0000000140001938()
fn0000000140001938_entry:
	// succ:  l0000000140001938
l0000000140001938:
	rsp = fp
	al = 0x01
	return
	// succ:  fn0000000140001938_exit
fn0000000140001938_exit:


// fn000000014000193C
// Return size: 8
void fn000000014000193C()
fn000000014000193C_entry:
	// succ:  l000000014000193C
l000000014000193C:
	rsp = fp
	rsp = rsp - 0x0000000000000028
	SCZO = cond(rsp)
	call fn0000000140001130 (retsize: 8;)
	v5 = Mem0[rax:word64] | 0x0000000000000004
	Mem0[rax:word64] = v5
	SZO = cond(Mem0[rax:word64])
	C = false
	call fn00000001400010C0 (retsize: 8;)
	v8 = Mem0[rax:word64] | 0x0000000000000002
	Mem0[rax:word64] = v8
	SZO = cond(Mem0[rax:word64])
	C = false
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	return
	// succ:  fn000000014000193C_exit
fn000000014000193C_exit:


// fn0000000140001958
// Return size: 8
void fn0000000140001958()
fn0000000140001958_entry:
	// succ:  l0000000140001958
l0000000140001958:
	rsp = fp
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[0x0000000140003014:word32] - eax)
	al = Test(EQ,Z)
	return
	// succ:  fn0000000140001958_exit
fn0000000140001958_exit:


// fn0000000140001964
// Return size: 8
void fn0000000140001964()
fn0000000140001964_entry:
	// succ:  l0000000140001964
l0000000140001964:
	rsp = fp
	rax = 0x0000000140003638
	return
	// succ:  fn0000000140001964_exit
fn0000000140001964_exit:


// fn000000014000196C
// Return size: 8
void fn000000014000196C()
fn000000014000196C_entry:
	// succ:  l000000014000196C
l000000014000196C:
	rsp = fp
	rax = 0x0000000140003630
	return
	// succ:  fn000000014000196C_exit
fn000000014000196C_exit:


// fn0000000140001974
// Return size: 8
void fn0000000140001974()
fn0000000140001974_entry:
	// succ:  l0000000140001974
l0000000140001974:
	rsp = fp
	Mem0[rsp + 0x0000000000000008:word64] = rbx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsp + 0x00000000FFFFFB40
	rsp = rsp - 1472
	SCZO = cond(rsp)
	ebx = ecx
	ecx = 0x00000017
	eax = IsProcessorFeaturePresent(Mem0[rsp:DWORD])
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000014000199D
	// succ:  l0000000140001999 l000000014000199D
l0000000140001999:
	ecx = ebx
	rcx = __fastfail()
	goto fn0000000140001974_exit
	// succ:  fn0000000140001974_exit
l000000014000199D:
	v13 = Mem0[0x0000000140003610:word32] & 0x00000000
	Mem0[0x0000000140003610:word32] = v13
	SZO = cond(Mem0[0x0000000140003610:word32])
	C = false
	rcx = rbp - 0x0000000000000010
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	eax = 0x000004D0
	eax = memset(Mem0[rsp:(ptr void)], Mem0[rsp + 8:int32], Mem0[rsp + 16:size_t])
	rcx = rbp - 0x0000000000000010
	RtlCaptureContext(Mem0[rsp + 4:PCONTEXT])
	rbx = Mem0[rbp + 0x00000000000000E8:word64]
	rdx = rbp + 0x00000000000004D8
	rcx = rbx
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	rax = RtlLookupFunctionEntry(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000140001A1A
	// succ:  l00000001400019DE l0000000140001A1A
l00000001400019DE:
	v19 = Mem0[rsp + 0x0000000000000038:word64] & 0x0000000000000000
	Mem0[rsp + 0x0000000000000038:word64] = v19
	SZO = cond(Mem0[rsp + 0x0000000000000038:word64])
	C = false
	rcx = rbp + 0x00000000000004E0
	rdx = Mem0[rbp + 0x00000000000004D8:word64]
	r9 = rax
	Mem0[rsp + 0x0000000000000030:word64] = rcx
	r8 = rbx
	rcx = rbp + 0x00000000000004E8
	Mem0[rsp + 0x0000000000000028:word64] = rcx
	rcx = rbp - 0x0000000000000010
	Mem0[rsp + 0x0000000000000020:word64] = rcx
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	call KERNEL32.dll!RtlVirtualUnwind (retsize: 4;)
	// succ:  l0000000140001A1A
l0000000140001A1A:
	rax = Mem0[rbp + 0x00000000000004C8:word64]
	rcx = rsp + 0x0000000000000050
	Mem0[rbp + 0x00000000000000E8:word64] = rax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = rbp + 0x00000000000004C8
	eax = 0x00000098
	rax = rax + 0x0000000000000008
	SCZO = cond(rax)
	Mem0[rbp + 0x0000000000000088:word64] = rax
	eax = memset(Mem0[rsp:(ptr void)], Mem0[rsp + 8:int32], Mem0[rsp + 16:size_t])
	rax = Mem0[rbp + 0x00000000000004C8:word64]
	Mem0[rsp + 0x0000000000000060:word64] = rax
	Mem0[rsp + 0x0000000000000050:word32] = 0x40000015
	Mem0[rsp + 0x0000000000000054:word32] = 0x00000001
	eax = IsDebuggerPresent()
	SCZO = cond(eax - 0x00000001)
	rax = rsp + 0x0000000000000050
	Mem0[rsp + 0x0000000000000040:word64] = rax
	rax = rbp - 0x0000000000000010
	bl = Test(EQ,Z)
	Mem0[rsp + 0x0000000000000048:word64] = rax
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	eax = SetUnhandledExceptionFilter(Mem0[rsp + 4:LPTOP_LEVEL_EXCEPTION_FILTER])
	rcx = rsp + 0x0000000000000040
	eax = UnhandledExceptionFilter(Mem0[rsp + 4:(ptr (struct "_EXCEPTION_POINTERS"))])
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000140001AA8
	// succ:  l0000000140001A9E l0000000140001AA8
l0000000140001A9E:
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	eax = eax - eax - C
	SCZO = cond(eax)
	v22 = Mem0[0x0000000140003610:word32] & eax
	Mem0[0x0000000140003610:word32] = v22
	SZO = cond(Mem0[0x0000000140003610:word32])
	C = false
	// succ:  l0000000140001AA8
l0000000140001AA8:
	rbx = Mem0[rsp + 0x00000000000005D0:word64]
	rsp = rsp + 1472
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000140001974_exit
fn0000000140001974_exit:


// fn0000000140001ABC
// Return size: 8
void fn0000000140001ABC()
fn0000000140001ABC_entry:
	// succ:  l0000000140001ABC
l0000000140001ABC:
	rsp = fp
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000140001ABC_exit
fn0000000140001ABC_exit:


// fn0000000140001AC0
// Return size: 8
void fn0000000140001AC0()
fn0000000140001AC0_entry:
	// succ:  l0000000140001AC0
l0000000140001AC0:
	rsp = fp
	rsp = rsp - 0x0000000000000028
	SCZO = cond(rsp)
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	eax = GetModuleHandleW(Mem0[rsp + 4:LPCWSTR])
	rcx = rax
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000140001AD8
	// succ:  l0000000140001AD4 l0000000140001AD8
l0000000140001AD4:
	al = al ^ al
	SZO = cond(al)
	C = false
	goto l0000000140001B0F
	// succ:  l0000000140001B0F
l0000000140001AD8:
	eax = 0x00005A4D
	SCZO = cond(Mem0[rcx:word16] - ax)
	branch Test(NE,Z) l0000000140001AD4
	// succ:  l0000000140001AE2 l0000000140001AD4
l0000000140001AE2:
	rax = (int64) Mem0[rcx + 0x000000000000003C:word32]
	rax = rax + rcx
	SCZO = cond(rax)
	SCZO = cond(Mem0[rax:word32] - 0x00004550)
	branch Test(NE,Z) l0000000140001AD4
	// succ:  l0000000140001AF1 l0000000140001AD4
l0000000140001AF1:
	ecx = 0x0000020B
	SCZO = cond(Mem0[rax + 0x0000000000000018:word16] - cx)
	branch Test(NE,Z) l0000000140001AD4
	// succ:  l0000000140001AFC l0000000140001AD4
l0000000140001AFC:
	SCZO = cond(Mem0[rax + 0x0000000000000084:word32] - 0x0000000E)
	branch Test(ULE,CZ) l0000000140001AD4
	// succ:  l0000000140001B05 l0000000140001AD4
l0000000140001B05:
	SCZO = cond(Mem0[rax + 0x00000000000000F8:word32] - 0x00000000)
	al = Test(NE,Z)
	// succ:  l0000000140001B0F
l0000000140001B0F:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	return
	// succ:  fn0000000140001AC0_exit
fn0000000140001AC0_exit:


// fn0000000140001B14
// Return size: 0
void fn0000000140001B14()
fn0000000140001B14_entry:
	// succ:  l0000000140001B14
l0000000140001B14:
	rsp = fp
	rcx = 0x0000000140001B24
	call Mem0[0x0000000140002068:word64] (retsize: 4;)
	return
	// succ:  fn0000000140001B14_exit
fn0000000140001B14_exit:


// fn0000000140001B24
// Return size: 8
void fn0000000140001B24()
fn0000000140001B24_entry:
	// succ:  l0000000140001B24
l0000000140001B24:
	rsp = fp
	rsp = rsp - 0x0000000000000028
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	SCZO = cond(Mem0[rax:word32] - 0xE06D7363)
	branch Test(NE,Z) l0000000140001B4F
	// succ:  l0000000140001B33 l0000000140001B4F
l0000000140001B33:
	SCZO = cond(Mem0[rax + 0x0000000000000018:word32] - 0x00000004)
	branch Test(NE,Z) l0000000140001B4F
	// succ:  l0000000140001B39 l0000000140001B4F
l0000000140001B39:
	ecx = Mem0[rax + 0x0000000000000020:word32]
	eax = rcx + 0x00000000E66CFAE0
	SCZO = cond(eax - 0x00000002)
	branch Test(ULE,CZ) l0000000140001B56
	// succ:  l0000000140001B47 l0000000140001B56
l0000000140001B47:
	SCZO = cond(ecx - 0x01994000)
	branch Test(EQ,Z) l0000000140001B56
	// succ:  l0000000140001B4F l0000000140001B56
l0000000140001B4F:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	return
	// succ:  fn0000000140001B24_exit
l0000000140001B56:
	call api-ms-win-crt-runtime-l1-1-0.dll!terminate (retsize: 8;)
	int3()
	// succ:  l0000000140001B5B_thunk_fn0000000140001B5C
l0000000140001B5B_thunk_fn0000000140001B5C:
	call fn0000000140001B5C (retsize: 8;)
	return
	// succ:  fn0000000140001B24_exit
fn0000000140001B24_exit:


// fn0000000140001B5C
// Return size: 8
void fn0000000140001B5C()
fn0000000140001B5C_entry:
	// succ:  l0000000140001B5C
l0000000140001B5C:
	rsp = fp
	Mem0[rsp + 0x0000000000000008:word64] = rbx
	Mem0[rsp + 0x0000000000000010:word64] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000020
	SCZO = cond(rsp)
	rbx = 0x0000000140002680
	rsi = 0x0000000140002680
	goto l0000000140001B91
	// succ:  l0000000140001B91
l0000000140001B7B:
	rdi = Mem0[rbx:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000140001B8D
	// succ:  l0000000140001B83 l0000000140001B8D
l0000000140001B83:
	rcx = rdi
	call fn0000000140001BF4 (retsize: 8;)
	call edi (retsize: 4;)
	// succ:  l0000000140001B8D
l0000000140001B8D:
	rbx = rbx + 0x0000000000000008
	SCZO = cond(rbx)
	// succ:  l0000000140001B91
l0000000140001B91:
	SCZO = cond(rbx - rsi)
	branch Test(ULT,C) l0000000140001B7B
	// succ:  l0000000140001B96 l0000000140001B7B
l0000000140001B96:
	rbx = Mem0[rsp + 0x0000000000000030:word64]
	rsi = Mem0[rsp + 0x0000000000000038:word64]
	rsp = rsp + 0x0000000000000020
	SCZO = cond(rsp)
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000140001B5C_exit
fn0000000140001B5C_exit:


// fn0000000140001BA8
// Return size: 8
void fn0000000140001BA8()
fn0000000140001BA8_entry:
	// succ:  l0000000140001BA8
l0000000140001BA8:
	rsp = fp
	Mem0[rsp + 0x0000000000000008:word64] = rbx
	Mem0[rsp + 0x0000000000000010:word64] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000020
	SCZO = cond(rsp)
	rbx = 0x0000000140002690
	rsi = 0x0000000140002690
	goto l0000000140001BDD
	// succ:  l0000000140001BDD
l0000000140001BC7:
	rdi = Mem0[rbx:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000140001BD9
	// succ:  l0000000140001BCF l0000000140001BD9
l0000000140001BCF:
	rcx = rdi
	call fn0000000140001BF4 (retsize: 8;)
	call edi (retsize: 4;)
	// succ:  l0000000140001BD9
l0000000140001BD9:
	rbx = rbx + 0x0000000000000008
	SCZO = cond(rbx)
	// succ:  l0000000140001BDD
l0000000140001BDD:
	SCZO = cond(rbx - rsi)
	branch Test(ULT,C) l0000000140001BC7
	// succ:  l0000000140001BE2 l0000000140001BC7
l0000000140001BE2:
	rbx = Mem0[rsp + 0x0000000000000030:word64]
	rsi = Mem0[rsp + 0x0000000000000038:word64]
	rsp = rsp + 0x0000000000000020
	SCZO = cond(rsp)
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000140001BA8_exit
fn0000000140001BA8_exit:


// fn0000000140001BF4
// Return size: 0
void fn0000000140001BF4()
fn0000000140001BF4_entry:
	// succ:  l0000000140001BF4
l0000000140001BF4:
	rsp = fp
	call Mem0[0x0000000140002190:word64] (retsize: 4;)
	return
	// succ:  fn0000000140001BF4_exit
fn0000000140001BF4_exit:


// fn0000000140001BFC
// Return size: 8
void fn0000000140001BFC()
fn0000000140001BFC_entry:
	// succ:  l0000000140001BFC
l0000000140001BFC:
	rsp = fp
	Mem0[rsp + 0x0000000000000010:word64] = rbx
	Mem0[rsp + 0x0000000000000018:word64] = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsp
	rsp = rsp - 0x0000000000000020
	SCZO = cond(rsp)
	v7 = Mem0[rbp - 0x0000000000000018:word32] & 0x00000000
	Mem0[rbp - 0x0000000000000018:word32] = v7
	SZO = cond(Mem0[rbp - 0x0000000000000018:word32])
	C = false
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	Mem0[0x000000014000301C:word32] = 0x00000002
	__cpuid(eax, ecx, &eax, &ebx, &ecx, &edx)
	r8d = ecx
	Mem0[0x0000000140003018:word32] = 0x00000001
	ecx = ecx ^ 0x444D4163
	SZO = cond(ecx)
	C = false
	r9d = edx
	r10d = edx
	r9d = r9d ^ 0x69746E65
	SZO = cond(r9d)
	C = false
	r10d = r10d ^ 0x49656E69
	SZO = cond(r10d)
	C = false
	r8d = r8d ^ 0x6C65746E
	SZO = cond(r8d)
	C = false
	r10d = r10d | r8d
	SZO = cond(r10d)
	C = false
	r11d = ebx
	r8d = Mem0[0x0000000140003614:word32]
	r11d = r11d ^ 0x68747541
	SZO = cond(r11d)
	C = false
	r11d = r11d | r9d
	SZO = cond(r11d)
	C = false
	edx = ebx
	r11d = r11d | ecx
	SZO = cond(r11d)
	C = false
	edx = edx ^ 0x756E6547
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	edi = eax
	r10d = r10d | edx
	SZO = cond(r10d)
	C = false
	eax = 0x00000001
	__cpuid(eax, ecx, &eax, &ebx, &ecx, &edx)
	Mem0[rbp - 0x0000000000000010:word32] = eax
	r9d = ecx
	Mem0[r13 - 0x0000000000000008:word32] = r9d
	ecx = eax
	Mem0[rbp - 0x000000000000000C:word32] = ebx
	Mem0[rbp - 0x0000000000000004:word32] = edx
	SZO = cond(r10d & r10d)
	C = false
	branch Test(NE,Z) l0000000140001CE9
	// succ:  l0000000140001C97 l0000000140001CE9
l0000000140001C97:
	v21 = Mem0[0x0000000140003020:word64] | 0xFFFFFFFFFFFFFFFF
	Mem0[0x0000000140003020:word64] = v21
	SZO = cond(Mem0[0x0000000140003020:word64])
	C = false
	r8d = r8d | 0x00000004
	SZO = cond(r8d)
	C = false
	eax = eax & 0x0FFF3FF0
	SZO = cond(eax)
	C = false
	Mem0[0x0000000140003614:word32] = r8d
	SCZO = cond(eax - 0x000106C0)
	branch Test(EQ,Z) l0000000140001CDE
	// succ:  l0000000140001CB6 l0000000140001CDE
l0000000140001CB6:
	SCZO = cond(eax - 0x00020660)
	branch Test(EQ,Z) l0000000140001CDE
	// succ:  l0000000140001CBD l0000000140001CDE
l0000000140001CBD:
	SCZO = cond(eax - 0x00020670)
	branch Test(EQ,Z) l0000000140001CDE
	// succ:  l0000000140001CC4 l0000000140001CDE
l0000000140001CC4:
	eax = eax + 0xFFFCF9B0
	SCZO = cond(eax)
	SCZO = cond(eax - 0x00000020)
	branch Test(UGT,CZ) l0000000140001CE9
	// succ:  l0000000140001CCE l0000000140001CE9
l0000000140001CCE:
	r11 = 0x0000000000010001
	C = __bt(rbx, rax)
	branch Test(UGE,C) l0000000140001CE9
	// succ:  l0000000140001CDE l0000000140001CE9
l0000000140001CDE:
	r8d = r8d | 0x00000001
	SZO = cond(r8d)
	C = false
	Mem0[0x0000000140003614:word32] = r8d
	// succ:  l0000000140001CE9
l0000000140001CE9:
	SZO = cond(r11d & r11d)
	C = false
	branch Test(NE,Z) l0000000140001D07
	// succ:  l0000000140001CEE l0000000140001D07
l0000000140001CEE:
	ecx = ecx & 0x0FF00F00
	SZO = cond(ecx)
	C = false
	SCZO = cond(ecx - 0x00600F00)
	branch Test(ULT,C) l0000000140001D07
	// succ:  l0000000140001CFC l0000000140001D07
l0000000140001CFC:
	r8d = r8d | 0x00000004
	SZO = cond(r8d)
	C = false
	Mem0[0x0000000140003614:word32] = r8d
	// succ:  l0000000140001D07
l0000000140001D07:
	eax = 0x00000007
	Mem0[rbp - 0x0000000000000020:word32] = edx
	Mem0[r13 - 0x000000000000001C:word32] = r9d
	SCZO = cond(edi - eax)
	branch Test(LT,SO) l0000000140001D3B
	// succ:  l0000000140001D17 l0000000140001D3B
l0000000140001D17:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	__cpuid(eax, ecx, &eax, &ebx, &ecx, &edx)
	Mem0[rbp - 0x0000000000000010:word32] = eax
	Mem0[rbp - 0x000000000000000C:word32] = ebx
	Mem0[rbp - 0x0000000000000008:word32] = ecx
	Mem0[rbp - 0x0000000000000004:word32] = edx
	Mem0[rbp - 0x0000000000000018:word32] = ebx
	C = __bt(ebx, 0x09)
	branch Test(UGE,C) l0000000140001D3B
	// succ:  l0000000140001D30 l0000000140001D3B
l0000000140001D30:
	r8d = r8d | 0x00000002
	SZO = cond(r8d)
	C = false
	Mem0[0x0000000140003614:word32] = r8d
	// succ:  l0000000140001D3B
l0000000140001D3B:
	C = __bt(r9d, 0x14)
	branch Test(UGE,C) l0000000140001DB0
	// succ:  l0000000140001D42 l0000000140001DB0
l0000000140001D42:
	Mem0[0x0000000140003018:word32] = 0x00000002
	Mem0[0x000000014000301C:word32] = 0x00000006
	C = __bt(r9d, 0x1B)
	branch Test(UGE,C) l0000000140001DB0
	// succ:  l0000000140001D5D l0000000140001DB0
l0000000140001D5D:
	C = __bt(r9d, 0x1C)
	branch Test(UGE,C) l0000000140001DB0
	// succ:  l0000000140001D64 l0000000140001DB0
l0000000140001D64:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	edx_eax = __xgetbv(ecx)
	rdx = rdx << 0x0000000000000020
	SCZO = cond(rdx)
	rdx = rdx | rax
	SZO = cond(rdx)
	C = false
	Mem0[rbp + 0x0000000000000010:word64] = rdx
	rax = Mem0[rbp + 0x0000000000000010:word64]
	al = al & 0x06
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x06)
	branch Test(NE,Z) l0000000140001DB0
	// succ:  l0000000140001D7E l0000000140001DB0
l0000000140001D7E:
	eax = Mem0[0x000000014000301C:word32]
	eax = eax | 0x00000008
	SZO = cond(eax)
	C = false
	Mem0[0x0000000140003018:word32] = 0x00000003
	SZO = cond(Mem0[rbp - 0x0000000000000018:byte] & 0x20)
	C = false
	Mem0[0x000000014000301C:word32] = eax
	branch Test(EQ,Z) l0000000140001DB0
	// succ:  l0000000140001D9D l0000000140001DB0
l0000000140001D9D:
	eax = eax | 0x00000020
	SZO = cond(eax)
	C = false
	Mem0[0x0000000140003018:word32] = 0x00000005
	Mem0[0x000000014000301C:word32] = eax
	// succ:  l0000000140001DB0
l0000000140001DB0:
	rbx = Mem0[rsp + 0x0000000000000038:word64]
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rdi = Mem0[rsp + 0x0000000000000040:word64]
	rsp = rsp + 0x0000000000000020
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000140001BFC_exit
fn0000000140001BFC_exit:


// fn0000000140001DC4
// Return size: 8
void fn0000000140001DC4()
fn0000000140001DC4_entry:
	// succ:  l0000000140001DC4
l0000000140001DC4:
	rsp = fp
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[0x0000000140003030:word32] - eax)
	al = Test(NE,Z)
	return
	// succ:  fn0000000140001DC4_exit
fn0000000140001DC4_exit:


// fn0000000140001DD0
// Return size: 8
void fn0000000140001DD0()
fn0000000140001DD0_entry:
	// succ:  l0000000140001DD0
l0000000140001DD0:
	rsp = fp
	return
	// succ:  fn0000000140001DD0_exit
fn0000000140001DD0_exit:


// fn0000000140001E7C
// Return size: 8
void fn0000000140001E7C()
fn0000000140001E7C_entry:
	// succ:  l0000000140001E7C
l0000000140001E7C:
	rsp = fp
	rsp = rsp - 0x0000000000000028
	SCZO = cond(rsp)
	r8 = Mem0[r9 + 0x0000000000000038:word64]
	rcx = rdx
	rdx = r9
	call fn0000000140001E9C (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	eax = 0x00000001
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	return
	// succ:  fn0000000140001E7C_exit
fn0000000140001E7C_exit:


// fn0000000140001E9C
// Return size: 8
void fn0000000140001E9C()
fn0000000140001E9C_entry:
	// succ:  l0000000140001E9C
l0000000140001E9C:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	r11d = Mem0[r8:word32]
	rbx = rdx
	r11d = r11d & 0xFFFFFFF8
	SZO = cond(r11d)
	C = false
	r9 = rcx
	SZO = cond(Mem0[rax:byte] & 0x04)
	C = false
	r10 = rcx
	branch Test(EQ,Z) l0000000140001EC7
	// succ:  l0000000140001EB4 l0000000140001EC7
l0000000140001EB4:
	eax = Mem0[rax + 0x0000000000000008:word32]
	r10 = (int64) Mem0[r8 + 0x0000000000000004:word32]
	eax = -eax
	SCZO = cond(eax)
	C = eax == 0x00000000
	r10 = r10 + rcx
	SCZO = cond(r10)
	rcx = (int64) eax
	r10 = r10 & rcx
	SZO = cond(r10)
	C = false
	// succ:  l0000000140001EC7
l0000000140001EC7:
	rax = (int64) r11d
	rdx = Mem0[rax + r10:word64]
	rax = Mem0[rbx + 0x0000000000000010:word64]
	ecx = Mem0[rax + 0x0000000000000008:word32]
	rcx = rcx + Mem0[rbx + 0x0000000000000008:word64]
	SCZO = cond(rcx)
	SZO = cond(Mem0[rcx + 0x0000000000000003:byte] & 0x0F)
	C = false
	branch Test(EQ,Z) l0000000140001EE9
	// succ:  l0000000140001EDF l0000000140001EE9
l0000000140001EDF:
	eax = (word32) Mem0[rcx + 0x0000000000000003:byte]
	eax = eax & 0xFFFFFFF0
	SZO = cond(eax)
	C = false
	r9 = r9 + rax
	SCZO = cond(r9)
	// succ:  l0000000140001EE9
l0000000140001EE9:
	r9 = r9 ^ rdx
	SZO = cond(r9)
	C = false
	rcx = r9
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	// succ:  l0000000140001EF0_thunk_fn00000001400011B0
l0000000140001EF0_thunk_fn00000001400011B0:
	call fn00000001400011B0 (retsize: 8;)
	return
	// succ:  fn0000000140001E9C_exit
fn0000000140001E9C_exit:


// fn0000000140001F10
// Return size: 0
void fn0000000140001F10()
fn0000000140001F10_entry:
	// succ:  l0000000140001F10
l0000000140001F10:
	rsp = fp
	call eax (retsize: 4;)
	return
	// succ:  fn0000000140001F10_exit
fn0000000140001F10_exit:


// fn0000000140001F12
// Return size: 8
void fn0000000140001F12()
fn0000000140001F12_entry:
	// succ:  l0000000140001F12
l0000000140001F12:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000020
	SCZO = cond(rsp)
	rbp = rdx
	rax = Mem0[rcx:word64]
	rdx = rcx
	ecx = Mem0[rax:word32]
	call seh_filter_exe (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	rsp = rsp + 0x0000000000000020
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000140001F12_exit
fn0000000140001F12_exit:


// fn0000000140001F30
// Return size: 8
void fn0000000140001F30()
fn0000000140001F30_entry:
	// succ:  l0000000140001F30
l0000000140001F30:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdx
	rax = Mem0[rcx:word64]
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(Mem0[rax:word32] - 0xC0000005)
	cl = Test(EQ,Z)
	eax = ecx
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000140001F30_exit
fn0000000140001F30_exit:


