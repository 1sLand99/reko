word32 prvUnlockQueue(word32 r0, word32 r4, word32 r5, word32 r6, word32 lr, word32 cpsr, word32 dwArg00, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, word32 dwArg18, int8 bArg0620, ptr32 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr lr r0 r4 r5 r6
// LiveOut: r1 r10
// Trashed: NZCV lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: lr
// Stack args: Stack +0018(32) Stack +0620(32)
prvUnlockQueue_entry:
	*r10Out = r10
// DataOut: cpsr d24 d9 lr r0 r10 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0018(32) Stack +0620(32)

l00000058:
	word32 r6_103
	word32 r2_15
	word32 r0_102
	vPortEnterCritical(cpsr, out r0_102, out r2_15)
	word32 r4_19 = (int32) (int8) (word32) Mem0[r0 + 69:byte]
	r6_103 = r6
	branch r4_19 <= 0x00000000 l00000082
// DataOut: cpsr d24 d9 lr r0 r10 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -0004(32) Local -0008(32) Local -000C(32) Local -0010(32) Stack +0018(32) Stack +0620(32)

l0000006A:
	branch Mem0[r0 + 36:word32] == 0x00000000 l00000098
// DataOut: cpsr d24 d9 lr r10 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32) Local -0004(32) Local -0008(32) Local -000C(32) Local -0010(32) Stack +0018(32) Stack +0620(32)

l0000006E:
	r6_103 = r0 + 0x00000024
// DataOut: cpsr d24 d9 lr r10 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32) Local -0004(32) Local -0008(32) Local -000C(32) Local -0010(32) Stack +0018(32) Stack +0620(32)

l00000080:
	r0_102 = r0 + 0x00000024
// DataOut: cpsr d24 d9 lr r0 r10 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r6:r0 + 0x00000024 r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32) Local -0004(32) Local -0008(32) Local -000C(32) Local -0010(32) Stack +0018(32) Stack +0620(32)

l00000082:
	word32 r1_105
	word32 r2_106
	word32 r0_107 = xTaskRemoveFromEventList(r0_102, out r1_105, out r2_106)
	branch 0x00000000 == 0x00000000 l00000274
// DataOut: cpsr d24 d9 lr r0 r1 r10 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r6:r0 + 0x00000024 r0:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32) Local -0004(32) Local -0008(32) Local -000C(32) Local -0010(32) Stack +0018(32) Stack +0620(32)

l00000274:
// DataOut: cpsr d24 d9 r1
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r6:r0 + 0x00000024 r0:<invalid> r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32) Stack +0018(32)

l00000276:
	word32 r10_160
	*r10Out = dwArg18
	return r1_105
// DataOut: cpsr d24 d9 r1 r10
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r6:r0 + 0x00000024 r0:<invalid> r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000008A:
	vTaskMissedYield()
	word32 r3_113 = (uint32) (byte) (r4_19 - 0x00000001)
	word32 r4_114 = (int32) (int8) r3_113
	branch r3_113 != 0x00000000 l0000027C
// DataOut: cpsr d24 d9 lr r0 r10 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r6:r0 + 0x00000024 r0:<invalid> r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: Local -0004(32) Local -0008(32) Local -000C(32) Local -0010(32)

l0000027C:
	Mem117[r6_103 + 124:word16] = (uint16) r0_107
	word32 r10_123
	word32 r1_125
	word32 r2_126
	word32 r3_127
	word32 r4_128
	word32 r5_129
	word32 r6_130
	word32 r7_131
	word32 r8_132
	word32 r9_133
	word32 sp_134
	word32 lr_135
	xTaskResumeAll(prvUnlockQueue(r4_114, r4_114, r0, r6_103, lr, cpsr, r4, r5, r6, lr, dwArg00, dwArg04, dwArg08, bArg0610, out r10_123), cpsr, out r1_125, out r2_126, out r3_127, out r4_128, out r5_129, out r6_130, out r7_131, out r8_132, out r9_133, out sp_134, out lr_135)
	word32 r10_145
	*r10Out = Mem117[sp_134 + 40:word32]
	return r1_125
// DataOut: cpsr d24 d9 r1 r10
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r2:0x00000001 r3:<invalid> r6:r0 + 0x00000024 r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000098:
	Mem43[r0 + 69:byte] = 0xFF
	word32 r1_44
	word32 r2_45
	word32 r3_46
	word32 sp_47
	vPortExitCritical(0x000000FF, cpsr, out r1_44, out r2_45, out r3_46, out sp_47)
	word32 r2_50
	word32 r0_101
	vPortEnterCritical(cpsr, out r0_101, out r2_50)
	word32 r4_53 = (int32) (int8) (word32) Mem43[r0 + 68:byte]
	branch r4_53 <= 0x00000000 l000000C8
// DataOut: cpsr d24 d9 r0 r10 r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r6:r0 + 0x00000024 r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000B0:
	branch Mem43[r0 + 16:word32] == 0x00000000 l000000DE
// DataOut: cpsr d24 d9 r10 r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r0 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r6:r0 + 0x00000024 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000B4:
// DataOut: cpsr d24 d9 r10 r4 r5 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r0 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r6:r0 + 0x00000024 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000C6:
	r0_101 = r0 + 0x00000010
// DataOut: cpsr d24 d9 r0 r10 r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r0 r4:<invalid> r3:<invalid> r6:r0 + 0x00000010 r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000C8:
	word32 r1_80
	word32 r2_81
	word32 r0_82 = xTaskRemoveFromEventList(r0_101, out r1_80, out r2_81)
	branch 0x00000000 == 0x00000000 l000002BA
// DataOut: cpsr d24 d9 r0 r1 r10 r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r0 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r6:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000CE_thunk_fn000002BA:
	word32 r4_96
	word32 sp_97
	return fn000002BA(r0_82, r1_80, r0, cpsr, out r4_96, out sp_97)
// DataOut: cpsr d24 d9 r1 r10
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r0 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r6:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000D0:
	vTaskMissedYield()
	branch (uint32) (byte) (r4_53 - 0x00000001) != 0x00000000 l000002C2
// DataOut: cpsr d24 d9 r0 r10 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r0 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r6:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000002C2:
	word32 r1_92 = (word32) Mem43[0x00000001:word16]
// DataOut: cpsr d24 d9 r0 r1 r10 r5
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r0 r4:<invalid> r3:<invalid> r2:0x00000001 r0:<invalid> r1:<invalid> r6:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000002C2_thunk_fn000002BA:
	word32 r4_93
	word32 sp_94
	return fn000002BA(r0_82, r1_92, r0, cpsr, out r4_93, out sp_94)
// DataOut: cpsr d24 d9 r1 r10
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r0 r4:<invalid> r3:<invalid> r2:0x00000001 r1:<invalid> r0:<invalid> r6:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000DE:
	Mem62[r0 + 68:byte] = 0xFF
// DataOut: cpsr d24 d9 r10 r3
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r0 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r6:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000E8_thunk_vPortExitCritical:
	word32 r1_68
	word32 r2_69
	word32 r3_70
	word32 sp_71
	vPortExitCritical(0x000000FF, cpsr, out r1_68, out r2_69, out r3_70, out sp_71)
	return r1_68
// DataOut: cpsr d24 d9 r1 r10
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r3:0x000000FF r6:<invalid> lr:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

prvUnlockQueue_exit:
// DataOut: r1 r10
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> lr:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



byte prvCopyDataToQueue(word32 r0, word32 r1, word32 r2, ptr32 & r0Out, ptr32 & r7Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut: Z r0 r7
// Trashed: NZCV lr r0 r1 r2 r3 r7
// Preserved: r4 r5 r6 sp
prvCopyDataToQueue_entry:
	*r7Out = r7
// DataOut: cpsr r0 r1 r2 r7
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000000EC:
	word32 r5_102
	byte Z_116
	word32 r4_101 = r0
	word32 r0_14 = Mem0[r0 + 64:word32]
	*r0Out = r0_14
	word32 r5_15 = Mem0[r0 + 56:word32]
	branch r0_14 != 0x00000000 l00000102
// DataOut: cpsr r0 r1 r2 r4 r5 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000102:
	branch r2 != 0x00000000 l00000128
// DataOut: cpsr r1 r2 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000128:
	word32 r1_100
	word32 sp_103
	memcpy(Mem0[r0 + 12:word32], r1, r0_14, out r1_100, out r4_101, out r5_102, out sp_103)
	word32 r3_106 = Mem0[r4_101 + 12:word32]
	word32 r1_108 = Mem0[r4_101:word32]
	Mem112[r4_101 + 12:word32] = r3_106
	branch r3_106 >=u r1_108 l00000144
// DataOut: cpsr r2 r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:r2 r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000013E:
	Mem134[r4_101 + 12:word32] = Mem112[r4_101 + 4:word32]
// DataOut: cpsr r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r6:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000144:
	Z_116 = cond(r2 - 0x00000002) (alias)
	branch r2 == 0x00000002 l00000158
// DataOut: cpsr r4 r5 r7 sp
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r6:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000158:
	branch r5_102 != 0x00000000 l0000015C
// DataOut: cpsr r4 r5 r7 sp
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r6:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000015A:
	r5_102 = 0x00000001
// DataOut: cpsr r4 r5 r7 sp
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r6:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000015C:
	word32 r0_129
	*r0Out = 0x00000000
// DataOut: cpsr r0 r4 r5 r7 sp
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r6:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000148:
	Mem123[r4_101 + 56:word32] = r5_102 + 0x00000001
	word32 r0_122
	*r0Out = 0x00000000
	return cond(r5_102 + 0x00000001)
// DataOut: cpsr r0 r7
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r6:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000108:
	word32 r1_65
	word32 r4_66
	word32 r5_67
	word32 sp_68
	memcpy(Mem0[r0 + 8:word32], r1, r0_14, out r1_65, out r4_66, out r5_67, out sp_68)
	word32 r2_72 = Mem0[r4_66 + 4:word32]
	word32 r3_73 = Mem0[r4_66 + 8:word32] + Mem0[r4_66 + 64:word32]
	Mem76[r4_66 + 8:word32] = r3_73
	branch r3_73 <u r2_72 l00000150
// DataOut: cpsr r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:r2 r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000150:
	Mem94[r4_66 + 56:word32] = r5_67 + 0x00000001
	word32 r0_93
	*r0Out = r2
	return cond(r5_67 + 0x00000001)
// DataOut: cpsr r0 r7
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r6:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000011C:
	Mem83[r4_66 + 8:word32] = Mem76[r4_66:word32]
	Mem84[r4_66 + 56:word32] = r5_67 + 0x00000001
	word32 r0_82
	*r0Out = r2
	return cond(r5_67 + 0x00000001)
// DataOut: cpsr r0 r7
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r6:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000F6:
	word32 r6_45 = Mem0[r0:word32]
	branch r6_45 == 0x00000000 l00000160
// DataOut: cpsr r0 r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000160:
	word32 r0_56
	*r0Out = xTaskPriorityDisinherit(Mem0[r0 + 4:word32])
	Mem61[r0 + 4:word32] = r6_45
	r5_102 = r5_15 + 0x00000001
	Z_116 = cond(r5_15 + 0x00000001) (alias)
// DataOut: cpsr r0 r4 r5 r7 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000FC:
	r5_102 = r5_15 + 0x00000001
	Z_116 = cond(r5_15 + 0x00000001) (alias)
// DataOut: cpsr r0 r4 r5 r7 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000FE:
	Mem40[r4_101 + 56:word32] = r5_102
	return Z_116
// DataOut: cpsr r0 r7
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

prvCopyDataToQueue_exit:
// DataOut: r0 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp r4:r4 r0:<invalid> r5:r5 r6:r6 r2:<invalid> r3:<invalid> r1:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



word32 prvCopyDataFromQueue(word32 r0, word32 r1, ptr32 & r1Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut: r0 r1 r5 r6 r7
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved: r4 sp
prvCopyDataFromQueue_entry:
	*r6Out = r6
	*r7Out = r7
	*r1Out = r1
	*r5Out = r5
// DataOut: cpsr d13 d24 fp r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000016C:
	word32 r2_4 = Mem0[r0 + 64:word32]
	branch r2_4 == 0x00000000 l0000018C
// DataOut: cpsr d13 d24 fp r0 r1 r10 r2 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000018C:
	return r0
// DataOut: cpsr d13 d24 fp r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid>

l00000170:
	word32 r4_27 = Mem0[r0 + 4:word32]
	word32 r1_28 = Mem0[r0 + 12:word32] + r2_4
	Mem31[r0 + 12:word32] = r1_28
	branch r1_28 <u r4_27 l00000182
// DataOut: cpsr d13 d24 fp r0 r1 r10 r2 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid>

l00000180_1:
	r1_28 = Mem31[r0:word32]
// DataOut: cpsr d13 d24 fp r0 r1 r10 r2 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r2:<invalid> r3:r1 r1:<invalid> r4:<invalid> -4(fp):r4

l00000182:
	Mem33[r0 + 12:word32] = r1_28
// DataOut: cpsr d13 d24 fp r0 r1 r10 r2 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r2:<invalid> r3:r1 r1:<invalid> r4:<invalid> -4(fp):r4

l00000188_thunk_memcpy:
	word32 r1_37
	word32 r4_38
	word32 r5_39
	word32 sp_40
	memcpy(r1, r1_28, r2_4, out r1_37, out r4_38, out r5_39, out sp_40)
	return r1
// DataOut: cpsr d13 d24 fp r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:r1 r1:<invalid> r4:r4 r0:r1 -4(fp):r4

prvCopyDataFromQueue_exit:
// DataOut: r0 r1 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r4:<invalid> r0:r1 r5:<invalid> r6:<invalid> r7:<invalid> -4(fp):r4



word32 xQueueGenericSend(word32 r0, word32 r1, word32 r3, word32 lr, word32 cpsr, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr lr r0 r1 r3
// LiveOut: r4 sp
// Trashed: NZCV lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
xQueueGenericSend_entry:
// DataOut: cpsr lr r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000190:
	word32 r5_162 = 0x00000000
	word32 sp_159
	*spOut = fp - 48
	word32 r4_154 = r0
	word32 r10_150 = r1
	word32 r7_156 = r3
	word32 r8_157 = 0x00000000
// DataOut: cpsr lr r10 r4 r5 r7 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000001F8:
	word32 r0_45
	word32 r2_46
	vPortEnterCritical(cpsr, out r0_45, out r2_46)
	word32 r3_49 = Mem0[r4_154 + 60:word32]
	branch Mem0[r4_154 + 56:word32] <u r3_49 l00000246
// DataOut: cpsr lr r10 r3 r4 r5 r7 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000204:
	branch r7_156 == 0x00000002 l00000246
// DataOut: cpsr lr r10 r3 r4 r5 r7 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r6:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000246:
	word32 r0_73
	word32 r7_74
	prvCopyDataToQueue(r4_154, r10_150, r7_156, out r0_73, out r7_74)
	word32 r3_76 = Mem0[r4_154 + 36:word32]
	branch r3_76 != 0x00000000 l00000290
// DataOut: cpsr r0 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r6:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000290:
	word32 r1_98
	word32 r2_99
	word32 r0_100 = xTaskRemoveFromEventList(r4_154 + 0x00000024, out r1_98, out r2_99)
	branch false l0000029A_thunk_fn00000456
// DataOut: cpsr r0 r1 r2 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r6:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l0000029A_thunk_fn00000456:
	return fn00000456(r0_100, r1_98, r2_99, r3_76, r4_154, cpsr)
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r6:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l0000029C:
// DataOut: cpsr r3
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r6:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000254:
	branch r0_73 == 0x00000000 l00000266
// DataOut: cpsr r3
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r6:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000256:
	r3_76 = Mem0[0x000002A0:word32]
	Mem96[r3_76:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr r3
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r6:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000266:
	word32 r1_79
	word32 r2_80
	word32 r3_81
	word32 sp_82
	vPortExitCritical(r3_76, cpsr, out r1_79, out r2_80, out r3_81, out sp_82)
	word32 sp_93
	*spOut = sp_82 + 48
	return Mem0[sp_82 + 16:word32]
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r6:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000208:
	branch Mem0[sp_159 + 4:word32] == 0x00000000 l00000272
// DataOut: cpsr lr r3 r4 r5 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r6:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000272:
	word32 r1_256
	word32 r2_257
	word32 r3_258
	word32 sp_259
	vPortExitCritical(r3_49, cpsr, out r1_256, out r2_257, out r3_258, out sp_259)
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000276_in_xQueueGenericSend:
	word32 sp_270
	*spOut = sp_259 + 48
	return Mem0[sp_259 + 16:word32]
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l0000020C:
	branch r5_162 != 0x00000000 l000003A8
// DataOut: cpsr lr r4 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000003A8:
	word32 sp_247 = sp_159 + 16
	word32 sp_255
	*spOut = sp_247 + 32
	return Mem0[sp_247:word32]
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000210:
	word32 r3_110 = vTaskSetTimeOutState(sp_159 + 8)
// DataOut: cpsr lr r3 r4 r8
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000001A8:
	word32 r1_111
	word32 r2_112
	word32 r3_113
	word32 sp_114
	vPortExitCritical(r3_110, cpsr, out r1_111, out r2_112, out r3_113, out sp_114)
	vTaskSuspendAll()
	word32 r0_117
	word32 r2_118
	vPortEnterCritical(cpsr, out r0_117, out r2_118)
	branch (word32) Mem0[r4_154 + 68:byte] != 0x000000FF l000001C0
// DataOut: cpsr lr r4 r8
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000001BC_1:
	Mem245[r4_154 + 68:byte] = (byte) r8_157
// DataOut: cpsr lr r4 r8
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000001C0:
	word32 r3_123 = (word32) Mem0[r4_154 + 69:byte]
	branch r3_123 != 0x000000FF l000001CC
// DataOut: cpsr lr r3 r4 r8
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000001C8_1:
	Mem244[r4_154 + 69:byte] = (byte) r8_157
// DataOut: cpsr lr r3
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000001CC:
	word32 r1_126
	word32 r2_127
	word32 r3_128
	word32 sp_129
	vPortExitCritical(r3_123, cpsr, out r1_126, out r2_127, out r3_128, out sp_129)
	word32 r3_133
	word32 r4_134
	word32 r5_135
	word32 r6_136
	word32 sp_137
	branch xTaskCheckForTimeOut(sp_129 + 8, sp_129 + 4, cpsr, out r3_133, out r4_134, out r5_135, out r6_136, out sp_137) != 0x00000000 l0000027E
// DataOut: cpsr lr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l0000027E:
	word32 r10_220
	word32 r1_222
	word32 r2_223
	word32 r3_224
	word32 r4_225
	word32 r5_226
	word32 r6_227
	word32 r7_228
	word32 r8_229
	word32 r9_230
	word32 sp_231
	word32 lr_232
	xTaskResumeAll(prvUnlockQueue(r4_134, r4_134, r5_135, r6_136, lr, cpsr, dwArg00, dwArg04, dwArg08, dwArg0C, dwArg10, dwArg14, dwArg18, bArg0620, out r10_220), cpsr, out r1_222, out r2_223, out r3_224, out r4_225, out r5_226, out r6_227, out r7_228, out r8_229, out r9_230, out sp_231, out lr_232)
	word32 sp_243
	*spOut = sp_231 + 48
	return Mem0[sp_231 + 16:word32]
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

xQueueGenericSend_exit:
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r6:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000001DC:
	word32 r0_141
	word32 r2_142
	vPortEnterCritical(cpsr, out r0_141, out r2_142)
	word32 r3_145 = Mem0[r4_134 + 60:word32]
	branch Mem0[r4_134 + 56:word32] == r3_145 l00000218
// DataOut: cpsr lr r3 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000218:
	word32 r1_191
	word32 r2_192
	word32 r3_193
	word32 sp_194
	vPortExitCritical(r3_145, cpsr, out r1_191, out r2_192, out r3_193, out sp_194)
	word32 r6_198
	word32 r5_199 = vTaskPlaceOnEventList(r4_134 + 0x00000010, Mem0[sp_194 + 4:word32], r5_135, out r6_198)
	word32 r1_203
	word32 r2_204
	word32 r3_205
	word32 r5_207
	word32 r6_208
	word32 r9_211
	branch xTaskResumeAll(prvUnlockQueue(r4_134, r4_134, r5_199, r6_198, lr, cpsr, dwArg00, dwArg04, dwArg08, dwArg0C, dwArg10, dwArg14, dwArg18, bArg0620, out r10_150), cpsr, out r1_203, out r2_204, out r3_205, out r4_154, out r5_207, out r6_208, out r7_156, out r8_157, out r9_211, out sp_159, out lr) != 0x00000000 l000003F6
// DataOut: cpsr lr r10 r4 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000003F6:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000234:
	Mem218[r9_211:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr lr r10 r4 r7 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000001E8:
	word32 r1_163
	word32 r2_164
	word32 r3_165
	word32 sp_166
	vPortExitCritical(r3_145, cpsr, out r1_163, out r2_164, out r3_165, out sp_166)
	word32 r1_179
	word32 r2_180
	word32 r3_181
	word32 r5_183
	word32 r6_184
	word32 r9_187
	xTaskResumeAll(prvUnlockQueue(r4_134, r4_134, r5_135, r6_136, lr, cpsr, dwArg00, dwArg04, dwArg08, dwArg0C, dwArg10, dwArg14, dwArg18, bArg0620, out r10_150), cpsr, out r1_179, out r2_180, out r3_181, out r4_154, out r5_183, out r6_184, out r7_156, out r8_157, out r9_187, out sp_159, out lr)
// DataOut: cpsr lr r10 r4 r7 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000001F6:
	r5_162 = 0x00000001
// DataOut: cpsr lr r10 r4 r5 r7 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr



word32 xQueuePeekFromISR(word32 r0, word32 r1, word32 cpsr, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut: r4 sp
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved:
xQueuePeekFromISR_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000002A4:
	word32 r5_12 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
// DataOut: cpsr r0 r1 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l000002B6_thunk_fn000002BA:
	word32 r4_16
	word32 sp_17
	fn000002BA(r0, r1, r5_12, cpsr, out r4_16, out sp_17)
	return r4_16
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r3:0x000000BF -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

xQueuePeekFromISR_exit:
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r4:<invalid> r6:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



word32 fn000002BA(word32 r0, word32 r1, word32 r5, word32 cpsr, ptr32 & r4Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r5
// LiveOut: r1 r4 sp
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved:
fn000002BA_entry:
// DataOut: cpsr d24 d9 r0 r1 r10 r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(32)

l000002BA:
	branch Mem0[r0 + 56:word32] != 0x00000000 l000002C6
// DataOut: cpsr d24 d9 r0 r1 r10 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000002C6:
	word32 r1_25
	word32 r5_26
	word32 r6_27
	word32 r7_28
	prvCopyDataFromQueue(r0, r1, out r1_25, out r5_26, out r6_27, out r7_28)
	Mem30[r0 + 12:word32] = r6_27
	__msr(cpsr, r5_26)
	word32 r4_32
	*r4Out = Mem30[v3:word32]
	return r1_25
// DataOut: cpsr d24 d9 r1 r10 r4 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid>

l000002BE:
	__msr(cpsr, r5)
// DataOut: cpsr d24 d9 r1 r10 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid>

l000002C4:
	word32 r4_17
	*r4Out = Mem0[v3:word32]
	return r1
// DataOut: cpsr d24 d9 r1 r10 r4 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid> r0:<invalid>

fn000002BA_exit:
// DataOut: r1 r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r6:<invalid> r0:<invalid> r5:<invalid> r2:<invalid> r1:<invalid> r7:<invalid>



word32 xQueueGenericReceive(word32 r0, word32 r1, word32 r3, word32 lr, word32 cpsr, ptr32 & r4Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr lr r0 r1 r3
// LiveOut: r0 r10 r4 r9 sp
// Trashed: NZCV lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: r1
xQueueGenericReceive_entry:
// DataOut: cpsr d24 d9 lr r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000002D8:
	word32 r5_165 = 0x00000000
	word32 sp_163
	*spOut = fp - 48
	word32 r4_147
	*r4Out = r0
	word32 r10_142
	*r10Out = r1
	word32 r9_152
	*r9Out = r3
	word32 r7_150 = 0x00000000
// DataOut: cpsr d24 d9 lr r10 r4 r5 r7 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000030A:
	word32 r0_43
	word32 r2_44
	vPortEnterCritical(cpsr, out r0_43, out r2_44)
	branch Mem0[r4_147 + 56:word32] != 0x00000000 l000003B0
// DataOut: cpsr d24 d9 lr r10 r4 r5 r7 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000003B0:
	word32 r1_182
	word32 r5_183
	word32 r6_184
	word32 r7_185
	word32 r0_186 = prvCopyDataFromQueue(r4_147, r10_142, out r1_182, out r5_183, out r6_184, out r7_185)
	branch r9_152 != 0x00000000 l000003E8
// DataOut: cpsr d24 d9 r0 r10 r4 r5 r6 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r2:<invalid> r0:<invalid> r3:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000003E8:
	word32 r3_201 = Mem0[r4_147 + 36:word32]
	Mem202[r4_147 + 12:word32] = r5_183
	branch r3_201 == 0x00000000 l000005CC
// DataOut: cpsr d24 d9 r0 r10 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000003EE_thunk_fn000005CC:
	fn000005CC()
	return r0_186
// DataOut: cpsr d24 d9 r0 r10 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000003F0:
	word32 r1_206
	word32 r2_207
	word32 r0_208 = xTaskRemoveFromEventList(r4_147 + 0x00000024, out r1_206, out r2_207)
// DataOut: cpsr d24 d9 r0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000003F4_thunk_fn000003F8:
	word32 r4_209
	word32 r9_210
	word32 r10_211
	word32 sp_212
	return fn000003F8(r0_208, cpsr, out r4_209, out r9_210, out r10_211, out sp_212)
// DataOut: cpsr d24 d9 r0 r10 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000003C0:
	word32 r3_189 = Mem0[r4_147:word32]
	Mem192[r4_147 + 56:word32] = r6_184 - 0x00000001
	branch r3_189 == 0x00000000 l000003C6_thunk_fn0000041C
// DataOut: cpsr d24 d9 r4
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000003C6_thunk_fn0000041C:
	word32 r4_197
	word32 r9_198
	word32 r10_199
	return fn0000041C(r4_147, cpsr, out r4_197, out r9_198, out r10_199)
// DataOut: cpsr d24 d9 r0 r10 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000003C6_thunk_fn000003C8:
	word32 r4_193
	word32 r9_194
	word32 r10_195
	return fn000003C8(r4_147, cpsr, out r4_193, out r9_194, out r10_195)
// DataOut: cpsr d24 d9 r0 r10 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000314:
	word32 r3_102 = Mem0[sp_163 + 4:word32]
	branch r3_102 == 0x00000000 l000003A4
// DataOut: cpsr d24 d9 lr r10 r3 r4 r5 r7 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r2:<invalid> r0:<invalid> r3:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l0000031A:
	branch r5_165 == 0x00000000 l0000039C
// DataOut: cpsr d24 d9 lr r10 r3 r4 r7 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l0000039C:
	r3_102 = vTaskSetTimeOutState(sp_163 + 8)
// DataOut: cpsr d24 d9 lr r10 r3 r4 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l0000031E:
	word32 r1_103
	word32 r2_104
	word32 r3_105
	word32 sp_106
	vPortExitCritical(r3_102, cpsr, out r1_103, out r2_104, out r3_105, out sp_106)
	vTaskSuspendAll()
	word32 r0_109
	word32 r2_110
	vPortEnterCritical(cpsr, out r0_109, out r2_110)
	branch (word32) Mem0[r4_147 + 68:byte] != 0x000000FF l00000336
// DataOut: cpsr d24 d9 lr r10 r4 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000332_1:
	Mem176[r4_147 + 68:byte] = (byte) r7_150
// DataOut: cpsr d24 d9 lr r10 r4 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000336:
	word32 r3_115 = (word32) Mem0[r4_147 + 69:byte]
	branch r3_115 != 0x000000FF l00000342
// DataOut: cpsr d24 d9 lr r10 r3 r4 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l0000033E_1:
	Mem175[r4_147 + 69:byte] = (byte) r7_150
// DataOut: cpsr d24 d9 lr r10 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000342:
	word32 r1_118
	word32 r2_119
	word32 r3_120
	word32 sp_121
	vPortExitCritical(r3_115, cpsr, out r1_118, out r2_119, out r3_120, out sp_121)
	word32 r3_125
	word32 r4_126
	word32 r5_127
	word32 r6_128
	word32 sp_129
	word32 r0_130 = xTaskCheckForTimeOut(sp_121 + 8, sp_121 + 4, cpsr, out r3_125, out r4_126, out r5_127, out r6_128, out sp_129)
	branch r0_130 == 0x00000000 l000004F0
// DataOut: cpsr d24 d9 lr r0 r10 r3 r4 r5 r6 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000004F0:
	Mem169[r0_130 + 69:byte] = (byte) (int32) (int8) (r3_125 + 0x00000001)
// DataOut: cpsr d24 d9 r0 r10 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000004FA:
	__msr(cpsr, r4_126)
	word32 r4_172
	*r4Out = Mem169[sp_129 + 4:word32]
	word32 sp_174
	*spOut = sp_129 + 16
	return 0x00000001
// DataOut: cpsr d24 d9 r0 r10 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:0x00000001 r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000352:
	word32 r1_144
	word32 r2_145
	word32 r3_146
	word32 r5_148
	word32 r6_149
	word32 r8_151
	word32 sp_153
	xTaskResumeAll(prvUnlockQueue(r4_126, r4_126, r5_127, r6_128, lr, cpsr, dwArg00, dwArg04, dwArg08, dwArg0C, dwArg10, dwArg14, dwArg18, bArg0620, out r10_142), cpsr, out r1_144, out r2_145, out r3_146, out r4_147, out r5_148, out r6_149, out r7_150, out r8_151, out r9_152, out sp_153, out lr)
	word32 r0_156
	word32 r2_157
	vPortEnterCritical(cpsr, out r0_156, out r2_157)
	r3_102 = Mem0[r4_147 + 56:word32]
	branch r3_102 == 0x00000000 l000003A4
// DataOut: cpsr d24 d9 lr r10 r3 r4 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000003A4:
	word32 r1_84
	word32 r2_85
	word32 r3_86
	word32 sp_87
	vPortExitCritical(r3_102, cpsr, out r1_84, out r2_85, out r3_86, out sp_87)
// DataOut: cpsr d24 d9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000003A8_in_xQueueGenericReceive:
	word32 r4_92
	*r4Out = Mem0[sp_87 + 16:word32]
	word32 r9_97
	*r9Out = Mem0[sp_87 + 36:word32]
	word32 r10_98
	*r10Out = Mem0[sp_87 + 40:word32]
	word32 sp_99
	*spOut = sp_87 + 48
	return 0x00000000
// DataOut: cpsr d24 d9 r0 r10 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

xQueueGenericReceive_exit:
// DataOut: r0 r10 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000364:
	word32 r1_160
	word32 r2_161
	word32 r3_162
	vPortExitCritical(r3_102, cpsr, out r1_160, out r2_161, out r3_162, out sp_163)
// DataOut: cpsr d24 d9 lr r10 r4 r7 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000308:
	r5_165 = 0x00000001
// DataOut: cpsr d24 d9 lr r10 r4 r5 r7 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr



word32 fn000003C8(word32 r4, word32 cpsr, ptr32 & r4Out, ptr32 & r9Out, ptr32 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r4
// LiveOut: r0 r10 r4 r9
// Trashed: NZCV r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
l000003C8:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn000003C8_entry:
// DataOut: cpsr d24 d9 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l000003C8:
	word32 r3_4 = Mem0[r4 + 16:word32]
	branch r3_4 != 0x00000000 l000003CA_thunk_fn0000040E
// DataOut: cpsr d24 d9 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l000003CA_thunk_fn0000040E:
	word32 r4_19
	word32 r9_20
	word32 r10_21
	return fn0000040E(r3_4, r4, cpsr, out r4_19, out r9_20, out r10_21)
// DataOut: cpsr d24 d9 r0 r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000003CA_thunk_fn000003CC:
	word32 r4_14
	word32 r9_15
	word32 r10_16
	word32 sp_17
	return fn000003CC(r3_4, cpsr, out r4_14, out r9_15, out r10_16, out sp_17)
// DataOut: cpsr d24 d9 r0 r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

fn000003C8_exit:
// DataOut: r0 r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r2:<invalid> r1:<invalid>



word32 fn000003CC(word32 r3, word32 cpsr, ptr32 & r4Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r3
// LiveOut: r0 r10 r4 r9 sp
// Trashed: NZCV r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
l000003CC:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn000003CC_entry:
// DataOut: cpsr d24 d9 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l000003CC:
	word32 r1_4
	word32 r2_5
	word32 r3_6
	word32 sp_7
	vPortExitCritical(r3, cpsr, out r1_4, out r2_5, out r3_6, out sp_7)
	word32 r4_12
	*r4Out = Mem0[sp_7 + 16:word32]
	word32 r9_17
	*r9Out = Mem0[sp_7 + 36:word32]
	word32 r10_18
	*r10Out = Mem0[sp_7 + 40:word32]
	word32 sp_19
	*spOut = sp_7 + 48
	return 0x00000001
// DataOut: cpsr d24 d9 r0 r10 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

fn000003CC_exit:
// DataOut: r0 r10 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:0x00000001 r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r2:<invalid> r3:<invalid> r1:<invalid>



word32 fn000003F8(word32 r0, word32 cpsr, ptr32 & r4Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut: r0 r10 r4 r9 sp
// Trashed: NZCV r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
l000003F8:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn000003F8_entry:
	*r4Out = r4
	*r9Out = r9
	*r10Out = r10
// DataOut: cpsr d24 d9 r0 r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000003F8:
	word32 sp_1
	*spOut = fp
	branch r0 == 0x00000000 l000003FA_thunk_fn000005CC
// DataOut: cpsr d24 d9 r0 r10 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000003FA_thunk_fn000005CC:
	fn000005CC()
	return r0
// DataOut: cpsr d24 d9 r0 r10 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000003FC:
	word32 r3_18 = Mem0[0x00000424:word32]
	Mem19[r3_18:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr d24 d9 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000040C_thunk_fn000003CC:
	word32 r4_21
	word32 r9_22
	word32 r10_23
	word32 sp_24
	return fn000003CC(r3_18, cpsr, out r4_21, out r9_22, out r10_23, out sp_24)
// DataOut: cpsr d24 d9 r0 r10 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp r2:0x10000000 r3:<invalid>

fn000003F8_exit:
// DataOut: r0 r10 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r0:0x00000001 r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r1:<invalid>



word32 fn0000040E(word32 r3, word32 r4, word32 cpsr, ptr32 & r4Out, ptr32 & r9Out, ptr32 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r3 r4
// LiveOut: r0 r10 r4 r9
// Trashed: NZCV r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
l0000040E:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000040E_entry:
	*r9Out = r9
	*r10Out = r10
// DataOut: cpsr d24 d9 r10 r3 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000040E:
	word32 r1_4
	word32 r2_5
	word32 r0_6 = xTaskRemoveFromEventList(r4 + 0x00000010, out r1_4, out r2_5)
	branch false l00000418_thunk_fn000005FC
// DataOut: cpsr d24 d9 r0 r10 r3 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000418_thunk_fn000005FC:
	word32 sp_27
	word32 r4_28
	*r4Out = fn000005FC(r0_6, r4, dwArg00, dwArg04, dwArg08, out sp_27)
	return r0_6
// DataOut: cpsr d24 d9 r0 r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid>

l0000041A:
// DataOut: cpsr d24 d9 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid>

l0000041A_thunk_fn000003CC:
	word32 r4_19
	word32 r9_20
	word32 r10_21
	word32 sp_22
	return fn000003CC(r3, cpsr, out r4_19, out r9_20, out r10_21, out sp_22)
// DataOut: cpsr d24 d9 r0 r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid>

fn0000040E_exit:
// DataOut: r0 r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r3:<invalid> r2:<invalid> r1:<invalid>



word32 fn0000041C(word32 r4, word32 cpsr, ptr32 & r4Out, ptr32 & r9Out, ptr32 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r4
// LiveOut: r0 r10 r4 r9
// Trashed: NZCV r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
l0000041C:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000041C_entry:
// DataOut: cpsr d24 d9 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000041C:
	Mem3[r4 + 4:word32] = pvTaskIncrementMutexHeldCount()
// DataOut: cpsr d24 d9 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000422_thunk_fn000003C8:
	word32 r4_6
	word32 r9_7
	word32 r10_8
	return fn000003C8(r4, cpsr, out r4_6, out r9_7, out r10_8)
// DataOut: cpsr d24 d9 r0 r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid>

fn0000041C_exit:
// DataOut: r0 r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid>



void uxQueueMessagesWaiting(word32 r0, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 sp
// Preserved: r4 sp
uxQueueMessagesWaiting_entry:
// DataOut: cpsr r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000428:
	word32 r0_10
	word32 r2_11
	vPortEnterCritical(cpsr, out r0_10, out r2_11)
	word32 r1_16
	word32 r2_17
	word32 r3_18
	word32 sp_19
	vPortExitCritical(r3, cpsr, out r1_16, out r2_17, out r3_18, out sp_19)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

uxQueueMessagesWaiting_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr



void uxQueueSpacesAvailable(word32 r0, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 r5 sp
// Preserved: r3 r4 r5 sp
uxQueueSpacesAvailable_entry:
// DataOut: cpsr r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000043C:
	word32 r0_14
	word32 r2_15
	vPortEnterCritical(cpsr, out r0_14, out r2_15)
	word32 r1_21
	word32 r2_22
	word32 r3_23
	word32 sp_24
	vPortExitCritical(r3, cpsr, out r1_21, out r2_22, out r3_23, out sp_24)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

uxQueueSpacesAvailable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r0:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void vQueueDelete()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vQueueDelete_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

vQueueDelete_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000454:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



word32 fn00000456(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3 r4
// LiveOut: r4
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved: sp
l00000456:
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn:

l00000454_thunk_vPortFree:
	vPortFree()
	return r4
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn:

fn00000456_entry:
// DataOut: cpsr r0 r1 r2 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000456:
	branch r4 != 0x00000000 l0000047E
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000047E:
	word32 r1_10 = (word32) Mem0[r2:word16]
// DataOut: cpsr r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000047E_thunk_xQueueGenericSendFromISR:
	xQueueGenericSendFromISR(r0, r1_10, r3, cpsr)
	return r4
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid>

l00000456_thunk_xQueueGenericSendFromISR:
	xQueueGenericSendFromISR(r0, r1, r3, cpsr)
	return r4
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp

fn00000456_exit:
// DataOut: r4
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r2:<invalid> r0:<invalid> r6:<invalid> r4:<invalid> r5:<invalid> r7:<invalid> r3:<invalid> lr:<invalid>



void xQueueGenericSendFromISR(word32 r0, word32 r1, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r3
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved: r3 r4 r5 r6 r7 sp
xQueueGenericSendFromISR_entry:
// DataOut: cpsr r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000458:
	word32 r0_118
	word32 r6_16 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	branch Mem0[r0 + 56:word32] <u Mem0[r0 + 60:word32] l00000482
// DataOut: cpsr r0 r1 r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000476:
	branch r3 == 0x00000002 l00000482
// DataOut: cpsr r0 r1 r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000482:
	word32 r4_54 = (int32) (int8) (word32) Mem0[r0 + 69:byte]
	word32 r0_58
	word32 r7_59
	branch prvCopyDataToQueue(r0, r1, r3, out r0_58, out r7_59) l000004A6
// DataOut: cpsr r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000004A6:
	r3 = Mem0[r0 + 36:word32]
	branch r3 == 0x00000000 l0000069E_in_fn00000456
// DataOut: cpsr r3 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:r0 r7:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000069E_in_fn00000456:
	word32 r1_106
	word32 r2_107
	word32 r3_108
	word32 sp_109
	vPortExitCritical(r3, cpsr, out r1_106, out r2_107, out r3_108, out sp_109)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:r0 r7:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000004AC:
	word32 r2_78
	xTaskRemoveFromEventList(r0 + 0x00000024, out r1, out r2_78)
	branch 0x00000000 == 0x00000000 l0000069E_in_fn00000456
// DataOut: cpsr r1 r3 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:r0 r7:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000069E_in_fn00000456:
	word32 r1_96
	word32 r2_97
	word32 r3_98
	word32 sp_99
	vPortExitCritical(r3, cpsr, out r1_96, out r2_97, out r3_98, out sp_99)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:r0 r7:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000004B8:
	branch r7_59 == 0x00000000 l0000069E_in_fn00000456
// DataOut: cpsr r1 r3 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:r0 r7:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000069E_in_fn00000456:
	word32 r1_86
	word32 r2_87
	word32 r3_88
	word32 sp_89
	vPortExitCritical(r3, cpsr, out r1_86, out r2_87, out r3_88, out sp_89)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:r0 r7:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000004BC:
	Mem85[r7_59:word32] = 0x00000001
	r0_118 = 0x00000001
// DataOut: cpsr r0 r1 r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:r0 r7:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000496:
	Mem65[r0 + 69:byte] = (byte) (int32) (int8) (r4_54 + 0x00000001)
	__msr(cpsr, r6_16)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:r0 r7:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000047A:
	r0_118 = 0x00000000
// DataOut: cpsr r0 r1 r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000047C:
	__msr(cpsr, r6_16)
// DataOut: cpsr r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r7:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000480:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r7:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000456_thunk_xQueueGenericSendFromISR:
	xQueueGenericSendFromISR(r0_118, r1, r3, cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r7:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

xQueueGenericSendFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r5:<invalid> r7:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



void xQueueGiveFromISR(word32 r0, word32 r1, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr lr r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: r3 r4 r5 sp
xQueueGiveFromISR_entry:
// DataOut: cpsr lr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000004C4:
	word32 r4_12 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r2_16 = Mem0[r0 + 56:word32]
	branch r2_16 >=u Mem0[r0 + 60:word32] l00000500
// DataOut: cpsr lr r0 r1 r2 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000500:
	__msr(cpsr, r4_12)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l000004E2:
	word32 r3_33 = (int32) (int8) (word32) Mem0[r0 + 69:byte]
	Mem34[r0 + 56:word32] = r2_16 + 0x00000001
	branch r2_16 == 0x00000001 l00000508
// DataOut: cpsr lr r0 r1 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00000508:
	word32 r3_46 = Mem34[r0 + 36:word32]
	branch r3_46 == 0x00000000 l0000050C_thunk_fn000006F8
// DataOut: cpsr lr r0 r1 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000050C_thunk_fn000006F8:
	word32 sp_69
	fn000006F8(r0, r1, r3_46, lr, cpsr, out sp_69)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000050E:
	word32 r1_52
	word32 r2_53
	word32 r0_54 = xTaskRemoveFromEventList(r0 + 0x00000024, out r1_52, out r2_53)
	branch 0x00000000 == 0x00000000 l00000518_thunk_fn000006F8
// DataOut: cpsr lr r0 r1 r3 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00000518_thunk_fn000006F8:
	word32 sp_67
	fn000006F8(r0_54, r1_52, r3_46, lr, cpsr, out sp_67)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r5:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000051A:
	branch r1 == 0x00000000 l0000051C_thunk_fn000006F8
// DataOut: cpsr lr r0 r1 r3 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r5:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000051C_thunk_fn000006F8:
	word32 sp_65
	fn000006F8(r0_54, r1_52, r3_46, lr, cpsr, out sp_65)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r5:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000051E:
	Mem60[r1:word32] = 0x00000001
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r5:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l000004FA_in_xQueueGiveFromISR:
	__msr(cpsr, r4_12)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> r0:0x00000001 r5:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l000004F0_in_xQueueGiveFromISR:
	Mem39[r0 + 69:byte] = (byte) (int32) (int8) (r3_33 + 0x00000001)
	__msr(cpsr, r4_12)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

xQueueGiveFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r5:<invalid> r1:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r6:<invalid> lr:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void xQueueReceiveFromISR(word32 r0, word32 r1, word32 r2, word32 r10, word32 fp, word32 cpsr, word64 d13)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d13 fp r0 r1 r10 r2
// LiveOut:
// Trashed: NZCV d22 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: r4 r5 r6 r7 r8 sp
xQueueReceiveFromISR_entry:
// DataOut: cpsr d13 fp r0 r1 r10 r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000524:
	word32 r6_16 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r4_20 = Mem0[r0 + 56:word32]
	branch r4_20 != 0x00000000 l0000054A
// DataOut: cpsr d13 fp r0 r1 r10 r2 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000054A:
	word32 r1_60
	word32 r5_61
	word32 r7_63
	prvCopyDataFromQueue(r0, r1, out r1_60, out r5_61, out r6_16, out r7_63)
	Mem69[r7_63 + 56:word32] = r4_20 - 0x00000001
	branch r4_20 == 0x00000001 l00000572
// DataOut: cpsr d13 fp r10 r4 r5 r6 r7 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000572:
	branch Mem69[r7_63 + 16:word32] == 0x00000000 l00000576_thunk_fn00000768
// DataOut: cpsr d13 fp r10 r4 r5 r6 r7 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r7:<invalid> r5:<invalid> r8:r2 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000576_thunk_fn00000768:
	word32 r5_105
	word32 fp_106
	word64 d24_107
	fn00000768(r4_20 - 0x00000001, r5_61, r6_16, r7_63, r2, r10, fp, cpsr, d13, dwArg34, out r5_105, out fp_106, out d24_107)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r7:<invalid> r5:<invalid> r8:r2 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000578:
	word32 r1_85
	word32 r2_86
	xTaskRemoveFromEventList(r7_63 + 0x00000010, out r1_85, out r2_86)
	branch 0x00000000 == 0x00000000 l00000582_thunk_fn00000768
// DataOut: cpsr d13 fp r10 r4 r5 r6 r7 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r7:<invalid> r5:<invalid> r8:r2 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000582_thunk_fn00000768:
	word32 r5_101
	word32 fp_102
	word64 d24_103
	fn00000768(r4_20 - 0x00000001, r5_61, r6_16, r7_63, r2, r10, fp, cpsr, d13, dwArg34, out r5_101, out fp_102, out d24_103)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r7:<invalid> r5:<invalid> r8:r2 r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000584:
	branch r2 == 0x00000000 l00000588_thunk_fn00000768
// DataOut: cpsr d13 fp r10 r4 r5 r6 r7 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r7:<invalid> r5:<invalid> r8:r2 r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000588_thunk_fn00000768:
	word32 r5_97
	word32 fp_98
	word64 d24_99
	fn00000768(r4_20 - 0x00000001, r5_61, r6_16, r7_63, r2, r10, fp, cpsr, d13, dwArg34, out r5_97, out fp_98, out d24_99)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r7:<invalid> r5:<invalid> r8:r2 r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000058A:
	Mem93[r2:word32] = 0x00000001
// DataOut: cpsr r6 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r7:<invalid> r5:<invalid> r8:r2 r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000560:
	Mem73[r7_63 + 68:byte] = (byte) (int32) (int8) (r5_61 + 0x00000001)
	__msr(cpsr, r6_16)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r7:<invalid> r5:<invalid> r8:r2 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000540:
// DataOut: cpsr r6 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000542:
	__msr(cpsr, r6_16)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r0:<invalid> r7:<invalid> r5:<invalid> r8:r2 r3:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

xQueueReceiveFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r7:<invalid> r8:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r9:<invalid> r10:<invalid> fp:<invalid> d22:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void xQueueIsQueueEmptyFromISR(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0
// Preserved: sp
xQueueIsQueueEmptyFromISR_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000594:
	__clz(Mem0[r0 + 56:word32])
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

xQueueIsQueueEmptyFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void xQueueIsQueueFullFromISR(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
xQueueIsQueueFullFromISR_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l000005A0:
	__clz(Mem0[r0 + 60:word32] - Mem0[r0 + 56:word32])
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

xQueueIsQueueFullFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void uxQueueMessagesWaitingFromISR(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
uxQueueMessagesWaitingFromISR_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l000005B0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

uxQueueMessagesWaitingFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void xQueueGetMutexHolder(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 sp
// Preserved: r4 sp
xQueueGetMutexHolder_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000005B4:
	word32 r0_10
	word32 r2_11
	vPortEnterCritical(cpsr, out r0_10, out r2_11)
	word32 r3_14 = Mem0[r0:word32]
	branch r3_14 != 0x00000000 l000005CA
// DataOut: cpsr r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l000005CA:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r3:<invalid> r2:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr

l000005CA_thunk_fn000005CC:
	fn000005CC()
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:0x00000000 r3:<invalid> r2:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr
// Terminates process

l000005C0:
	word32 r1_23
	word32 r2_24
	word32 r3_25
	word32 sp_26
	vPortExitCritical(r3_14, cpsr, out r1_23, out r2_24, out r3_25, out sp_26)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r3:<invalid> r2:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr

xQueueGetMutexHolder_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr



void fn000005CC()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn000005CC_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn000005CC_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000005CC:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



word32 xQueueTakeMutexRecursive(word32 r0, word32 r4, word32 r5, word32 r6, word32 lr, word32 cpsr, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr lr r0 r4 r5 r6
// LiveOut: r4 sp
// Trashed: NZCV lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
xQueueTakeMutexRecursive_entry:
// DataOut: cpsr lr r0 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000005D4:
	branch Mem0[r0 + 4:word32] == xTaskGetCurrentTaskHandle() l000005FA
// DataOut: cpsr lr r4
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Local -0008(0) Local -000C(0) Local -0010(0)

l000005FA:
// DataOut: cpsr r0 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r4:r0 r6:r1 r3:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: Local -0008(0) Local -000C(0) Local -0010(0)

l000005FA_thunk_fn000005FC:
	word32 sp_53
	return fn000005FC(0x00000001, r0, r4, r5, r6, out sp_53)
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r4:r0 r6:r1 r0:0x00000001 r3:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000005E4:
	word32 r4_37
	word32 r9_38
	word32 r10_39
	word32 sp_40
	branch xQueueGenericReceive(r0, 0x00000000, 0x00000000, lr, cpsr, out r4_37, out r9_38, out r10_39, out sp_40) == 0x00000000 l000005F8
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r4:r0 r6:r1 r3:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000005F2:
	Mem51[r4_37 + 12:word32] = Mem0[r4_37 + 12:word32] + 0x00000001
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000005F8:
	word32 sp_47
	*spOut = sp_40 + 16
	return Mem0[sp_40:word32]
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

xQueueTakeMutexRecursive_exit:
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



word32 fn000005FC(word32 r0, word32 r4, word32 dwArg00, word32 dwArg04, word32 dwArg08, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r4
// LiveOut: r4 sp
// Trashed: NZCV r3 r4 r5 r6 sp
// Preserved:
// Stack args: Stack +0000(32)
l000005FC:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn000005FC_entry:
// DataOut: cpsr d24 d9 r0 r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000005FC:
	Mem8[r4 + 12:word32] = Mem0[r4 + 12:word32] + r0
	word32 sp_15
	*spOut = fp + 16
	return dwArg00
// DataOut: cpsr d24 d9 r0 r10 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

fn000005FC_exit:
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + 16 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid>



void xQueueGiveMutexRecursive(word32 r0, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr lr r0
// LiveOut:
// Trashed: NZCV lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: r3 r4 r5 sp
xQueueGiveMutexRecursive_entry:
// DataOut: cpsr lr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000604:
	branch Mem0[r0 + 4:word32] == xTaskGetCurrentTaskHandle() l00000616
// DataOut: cpsr lr r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000616:
	word32 r3_33 = Mem0[r0 + 12:word32]
	Mem36[r0 + 12:word32] = r3_33 - 0x00000001
	branch r3_33 == 0x00000001 l00000622
// DataOut: cpsr lr r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r4:r0 r3:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00000622:
	word32 sp_46
	xQueueGenericSend(r0, r3_33 - 0x00000001, r3_33 - 0x00000001, lr, cpsr, out sp_46)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r4:r0 r3:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000061E:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r4:r0 r3:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00000612:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r4:r0 r3:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

xQueueGiveMutexRecursive_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r6:<invalid> lr:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



word32 xQueueGenericReset(word32 r0, word32 r1, word32 cpsr, ptr32 & r3Out, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut: lr r1 r3
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved: r4 r5 r6 sp
xQueueGenericReset_entry:
	*lrOut = lr
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000630:
	word32 r0_17
	word32 r2_18
	vPortEnterCritical(cpsr, out r0_17, out r2_18)
	word32 r3_22 = Mem0[r0 + 64:word32]
	word32 r2_25 = Mem0[r0 + 60:word32] * r3_22
	word32 r0_24 = Mem0[r0:word32]
	Mem30[r0 + 56:word32] = 0x00000000
	Mem31[r0 + 4:word32] = r2_25 + r0_24
	Mem32[r0 + 68:byte] = 0xFF
	Mem33[r0 + 12:word32] = r2_25 - r3_22 + r0_24
	Mem34[r0 + 8:word32] = r0_24
	Mem35[r0 + 69:byte] = 0xFF
	branch r1 != 0x00000000 l00000690
// DataOut: cpsr d24 d9 fp lr r10 r4 r5 r6 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000690:
	vListInitialise(r0 + 0x00000010)
	word32 r3_93 = vListInitialise(r0 + 0x00000024)
// DataOut: cpsr d24 d9 fp lr r10 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r5:0x000000FF r1:0x00000000 r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000069E:
	word32 r1_94
	word32 r2_95
	word32 r3_96
	word32 sp_97
	vPortExitCritical(r3_93, cpsr, out r1_94, out r2_95, out r3_96, out sp_97)
	return r1_94
// DataOut: cpsr d24 d9 fp lr r1 r10 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r5:0x000000FF r1:<invalid> r3:<invalid> r2:<invalid> r0:r0 + 0x00000034 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000660:
	word32 r3_50 = Mem35[r0 + 16:word32]
	branch r3_50 != 0x00000000 l0000066C
// DataOut: cpsr d24 d9 fp lr r10 r3 r4 r5 r6 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r5:0x000000FF r1:0x00000000 r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000066C:
	word32 r1_63
	word32 r2_64
	word32 r0_65 = xTaskRemoveFromEventList(r0 + 0x00000010, out r1_63, out r2_64)
	branch 0x00000000 == 0x00000000 l00000676_thunk_fn00000864
// DataOut: cpsr d24 d9 fp lr r0 r10 r4 r5 r6 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r5:0x000000FF r1:0x00000000 r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000676_thunk_fn00000864:
	word32 r1_81
	word32 r2_82
	word32 r3_83
	word32 r4_84
	word32 r5_85
	word32 r6_86
	word32 r7_87
	word32 lr_88
	fn00000864(r0_65, r0, 0x000000FF, r1, out r1_81, out r2_82, out r3_83, out r4_84, out r5_85, out r6_86, out r7_87, out lr_88)
	return r1_81
// DataOut: cpsr d24 d9 fp lr r1 r10 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r5:0x000000FF r1:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000678:
	word32 r3_69 = Mem35[0x000006A8:word32]
	Mem70[r3_69:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	word32 r1_71
	word32 r2_72
	word32 r3_73
	word32 sp_74
	vPortExitCritical(r3_69, cpsr, out r1_71, out r2_72, out r3_73, out sp_74)
	return r1_71
// DataOut: cpsr d24 d9 fp lr r1 r10 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r5:0x000000FF r1:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000664:
	word32 r1_51
	word32 r2_52
	word32 r3_53
	word32 sp_54
	vPortExitCritical(r3_50, cpsr, out r1_51, out r2_52, out r3_53, out sp_54)
	return r1_51
// DataOut: cpsr d24 d9 fp lr r1 r10 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r5:0x000000FF r1:0x00000000 r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

xQueueGenericReset_exit:
// DataOut: lr r1 r3
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r6:<invalid> r5:<invalid> r1:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



word32 xQueueGenericCreate(word32 r0, word32 r1, word32 cpsr, ptr32 & r1Out, ptr32 & r3Out, ptr32 & r9Out, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut: lr r0 r1 r3 r9
// Trashed: NZCV lr r0 r1 r2 r3 r7 r8 r9
// Preserved: r4 r5 r6 sp
xQueueGenericCreate_entry:
// DataOut: cpsr d24 d9 fp r0 r1 r10
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000006AC:
	word32 r1_19
	word32 r3_20
	word32 r4_21
	word32 r5_22
	word32 r6_23
	word32 r7_24
	word32 r8_25
	word32 r9_26
	word32 sp_27
	word32 lr_28
	word32 r0_29 = pvPortMalloc(r0 * r1 + 0x00000048, cpsr, out r1_19, out r3_20, out r4_21, out r5_22, out r6_23, out r7_24, out r8_25, out r9_26, out sp_27, out lr_28)
	branch r0_29 == 0x00000000 l000006D4
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r3 r4 r5 r6 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000006C0:
	branch r5_22 == 0x00000000 l000006D8
// DataOut: cpsr d24 d9 fp r0 r10 r4 r5 r6 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r0:<invalid> r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> r1:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000006D8:
	Mem53[r0_29:word32] = r0_29
// DataOut: cpsr d24 d9 fp r10 r4 r5 r6 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r0:<invalid> r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> r1:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000006C2:
	Mem52[r0_29:word32] = r0_29 + 0x00000048
// DataOut: cpsr d24 d9 fp r10 r4 r5 r6 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r0:<invalid> r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> r1:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000006C8:
	Mem44[r0_29 + 60:word32] = r6_23
	Mem45[r0_29 + 64:word32] = r5_22
	word32 r3_48
	word32 lr_49
	word32 r1_50
	*r1Out = xQueueGenericReset(r0_29, 0x00000001, cpsr, out r3_48, out lr_49)
// DataOut: cpsr d24 d9 fp lr r1 r10 r3 r4 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r0:<invalid> r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> r1:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000006D4:
	return r0_29
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r0:<invalid> r5:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

xQueueGenericCreate_exit:
// DataOut: lr r0 r1 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 r0:<invalid> r5:r5 r4:r4 r3:<invalid> r1:<invalid> r2:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



word32 xQueueCreateMutex(word32 cpsr, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut: r4 sp
// Trashed: NZCV lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
xQueueCreateMutex_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000006DC:
	word32 r1_12
	word32 r3_13
	word32 r9_14
	word32 lr_15
	word32 r0_16 = xQueueGenericCreate(0x00000001, 0x00000000, cpsr, out r1_12, out r3_13, out r9_14, out lr_15)
	branch r0_16 == 0x00000000 l000006FC
// DataOut: cpsr lr r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l000006EA_thunk_fn000006F8:
	word32 sp_32
	return fn000006F8(r0_16, r1_12, r3_13, lr_15, cpsr, out sp_32)
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r3:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr

l000006EC:
	Mem25[r0_16 + 4:word32] = 0x00000000
	Mem26[r0_16:word32] = 0x00000000
	Mem27[r0_16 + 12:word32] = 0x00000000
// DataOut: cpsr lr r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r3:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr

l000006F6_thunk_fn000006F8:
	word32 sp_30
	return fn000006F8(r0_16, 0x00000000, 0x00000000, lr_15, cpsr, out sp_30)
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:0x00000000 r1:0x00000000 r0:<invalid> r4:<invalid> r3:0x00000000 r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr

xQueueCreateMutex_exit:
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r3:<invalid> r5:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r6:<invalid> lr:<invalid> -8(fp):r4 -4(fp):lr



word32 fn000006F8(word32 r0, word32 r1, word32 r3, word32 lr, word32 cpsr, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr lr r0 r1 r3
// LiveOut: r4 sp
// Trashed: NZCV lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
l000006F8:
	r4 = xQueueGenericSend(r0, r1, r3, lr, cpsr, out sp)
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn:

l000006FC:
	r0 = r4
	r4 = Mem0[sp:word32]
	sp = sp + 8
	return r4
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn:

fn000006F8_entry:
	def fp
	def r0
	def r1
	def r3
	def lr
	def cpsr
	def Mem0
	def spOut
// DataOut: cpsr lr r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l000006F8:
	sp_1 = fp
	r4_8 = xQueueGenericSend(r0, r1, r3, lr, cpsr, out sp_7)
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000006FC_in_fn000006F8:
	r0_9 = r4_8
	r4_11 = Mem0[sp_7:word32]
	sp_12 = sp_7 + 8
	return r4_11
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r6:<invalid> lr:<invalid>

fn000006F8_exit:
	r0_13 = PHI(r0_9, r0)
	r4_14 = PHI(r4_11, r4)
	sp_15 = PHI(sp_12, sp)
	use sp_15 (=> spOut)
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r6:<invalid> lr:<invalid>



word32 prvInitialiseNewTask(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 lr, word32 cpsr, word64 d13, word32 dwArg00, word32 dwArg08, ptr32 & r5Out, ptr32 & fpOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d13 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// LiveOut: d24 fp r4 r5
// Trashed: NZCV d22 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
// Stack args: Stack +0000(32) Stack +0008(32)
prvInitialiseNewTask_entry:
// DataOut: cpsr d13 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32) Stack +0008(32)

l00000700:
	word32 r5_40 = Mem0[dwArg08 + 80:word32] + (r2 + 0x3FFFFFFF << 0x00000002) & ~0x00000007
	Mem46[dwArg08 + 0x00000054:byte] = (byte) (word32) Mem0[r1:byte]
	word32 r2_44 = dwArg00 & ~0x80000000
	branch (word32) Mem46[r1:byte] == 0x00000000 l0000073E
// DataOut: cpsr d13 fp r0 r1 r10 r2 r3 r4 r5 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Local -0004(32) Local -0008(32) Local -000C(32) Local -0010(32) Local -0014(32) Local -0018(32) Local -001C(0) Local -0020(0) Local -0024(0) Local -0028(0)

l0000073A:
	branch r1 != r1 + 0x00000002 l0000073C_thunk_fn0000092E
// DataOut: cpsr d13 fp r0 r10 r2 r4 r5 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r4:<invalid> r9:r3 r5:<invalid> r3:r1 + 0x00000002 fp:r2 r2:<invalid> r8:r0 r10:<invalid> r1:r1 + 0x00000002 r0:<invalid> r6:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr
// LocalsOut: Local -0004(32) Local -0008(32) Local -000C(32) Local -0010(32) Local -0014(32) Local -0018(32) Local -001C(0) Local -0020(0) Local -0024(0) Local -0028(0)

l0000073C_thunk_fn0000092E:
	word32 r5_91
	word32 fp_92
	word32 sp_93
	word64 d24_94
	return fn0000092E(dwArg08 + 0x00000055, dwArg08, r7, r0, r3, dwArg00 >> 0x0000001F, r2, cpsr, d13, r3, r4, r5, r6, out r5_91, out fp_92, out sp_93, out d24_94)
// DataOut: cpsr d24 d9 fp r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r4:<invalid> r9:r3 r5:<invalid> r3:r1 + 0x00000002 fp:r2 r2:<invalid> r8:r0 r10:<invalid> r1:r1 + 0x00000002 r0:<invalid> r6:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l0000073E:
	branch r2_44 <u 0x00000001 l00000744
// DataOut: cpsr d13 fp r10 r2 r4 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r4:<invalid> r9:r3 r5:<invalid> r3:r1 + 0x00000002 fp:r2 r2:<invalid> r8:r0 r10:<invalid> r1:r1 + 0x00000002 r0:<invalid> r6:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr
// LocalsOut: Local -0004(32) Local -0008(32) Local -000C(32) Local -0010(32) Local -0014(32) Local -0018(32) Local -001C(32) Local -0020(32) Local -0024(32) Local -0028(32)

l00000742_1:
	r2_44 = 0x00000001
// DataOut: cpsr d13 fp r10 r2 r4 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r4:<invalid> r9:r3 r5:<invalid> r3:r1 + 0x00000002 fp:r2 r2:<invalid> r8:r0 r10:<invalid> r1:r1 + 0x00000002 r0:<invalid> r6:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr
// LocalsOut: Local -0004(32) Local -0008(32) Local -000C(32) Local -0010(32) Local -0014(32) Local -0018(32) Local -001C(32) Local -0020(32) Local -0024(32) Local -0028(32)

l00000744:
	Mem73[dwArg08 + 76:word32] = r2_44
	Mem74[dwArg08 + 88:word32] = r2_44
	Mem76[dwArg08 + 86:byte] = 0x00
	Mem77[dwArg08 + 92:word32] = 0x00000000
	vListInitialiseItem(dwArg08 + 0x00000024)
	vListInitialiseItem(dwArg08 + 0x00000038)
	Mem80[dwArg08 + 56:word32] = 0x00000002 - r2_44
// DataOut: cpsr d13 fp r10 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r4:<invalid> r9:r3 r5:<invalid> r3:r1 + 0x00000002 fp:r2 r2:<invalid> r8:r0 r10:<invalid> r1:r1 + 0x00000002 r0:<invalid> r6:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr
// LocalsOut: Local -0004(32) Local -0008(32) Local -000C(32) Local -0010(32) Local -0014(32) Local -0018(32) Local -001C(32) Local -0020(32) Local -0024(32) Local -0028(32)

l00000766_thunk_fn00000768:
	word32 r5_84
	word32 fp_85
	word64 d24_86
	return fn00000768(dwArg08, r5_40, 0x00000000, r2_44, r0, dwArg00 >> 0x0000001F, r2, cpsr, d13, dwArg0C, out r5_84, out fp_85, out d24_86)
// DataOut: cpsr d24 d9 fp r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r4:<invalid> r9:r3 r5:<invalid> r3:<invalid> fp:r2 r2:<invalid> r8:r0 r10:<invalid> r1:r1 + 0x00000002 r0:<invalid> r6:0x00000000 r7:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

prvInitialiseNewTask_exit:
// DataOut: d24 fp r4 r5
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r9:<invalid> r5:<invalid> r3:<invalid> fp:<invalid> r2:<invalid> r8:<invalid> r10:<invalid> r1:<invalid> r0:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> d22:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr



word32 fn00000768(word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 fp, word32 cpsr, word64 d13, word32 dwArg34, ptr32 & r5Out, ptr32 & fpOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d13 fp r10 r4 r5 r6 r7 r8
// LiveOut: d24 fp r4 r5
// Trashed: NZCV d22 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
// Stack args: Stack +0034(32)
l00000768:
	r2 = Mem0[r4 + 80:word32]
	r3 = fp
	r1 = Mem0[sp + 52:word32]
	r0 = r4 + 0x00000004
	Mem0[r4 + 48:word32] = r4
	Mem0[r4 + 68:word32] = r4
	r4 = vPortStoreTaskMPUSettings(r0, r1, r2, r3, r5, r6, r7, r8, cpsr, d13, out r5, out r6, out r8, out r9, out sp, out d24)
	Mem0[r4 + 96:word32] = r6
	r3 = r10
	Mem0[r4 + 100:byte] = (byte) r6
	r2 = r9
	r1 = r8
	r0 = r5
	r0 = pxPortInitialiseStack(r0, r1, r2, r3)
	r3 = Mem0[sp + 44:word32]
	Mem0[r4:word32] = r0
	branch r3 == 0x00000000 l00000792
// DataOut: cpsr d24 d9 r3 r4
// DataOut (flags): 
// SymbolicIn:

l0000078E_thunk_fn00000790:
	r4 = fn00000790(r3, r4, out r5, out fp)
	return r4
// DataOut: cpsr d24 d9 fp r4 r5
// DataOut (flags): 
// SymbolicIn:

l0000078E_thunk_fn00000790:
	r4 = fn00000790(r3, r4, out r5, out fp)
	return r4
// DataOut: cpsr d24 d9 fp r4 r5
// DataOut (flags): 
// SymbolicIn:

fn00000768_entry:
	def fp
	def r4
	def Mem0
	def fp
	def dwArg34
	def r5
	def r6
	def r7
	def r8
	def cpsr
	def d13
	def r10
	def r5Out
	def fpOut
	def d24Out
	def Mem0
// DataOut: cpsr d13 fp r10 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Stack +0034(32)

l00000768:
	sp_1 = fp
	r2_4 = Mem0[r4 + 80:word32]
	r3_6 = fp
	r1_8 = dwArg34
	r0_9 = r4 + 0x00000004
	Mem10[r4 + 48:word32] = r4
	Mem11[r4 + 68:word32] = r4
	r4_24 = vPortStoreTaskMPUSettings(r0_9, r1_8, r2_4, r3_6, r5, r6, r7, r8, cpsr, d13, out r5_18, out r6_19, out r8_20, out r9_21, out sp_22, out d24_23)
	Mem25[r4_24 + 96:word32] = r6_19
	r3_27 = r10
	Mem28[r4_24 + 100:byte] = (byte) r6_19
	r2_29 = r9_21
	r1_30 = r8_20
	r0_31 = r5_18
	r0_32 = pxPortInitialiseStack(r0_31, r1_30, r2_29, r3_27)
	r3_33 = Mem28[sp_22 + 44:word32]
	Mem34[r4_24:word32] = r0_32
	branch r3_33 == 0x00000000 l00000792_in_fn00000768
// DataOut: cpsr d24 d9 r3 r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000792_in_fn00000768:
	r3_52 = Mem0[sp_22:word32]
	r4_53 = Mem0[sp_22 + 4:word32]
	r5_54 = Mem0[sp_22 + 8:word32]
	r6_55 = Mem0[sp_22 + 12:word32]
	r7_56 = Mem0[sp_22 + 16:word32]
	r8_57 = Mem0[sp_22 + 20:word32]
	r9_58 = Mem0[sp_22 + 24:word32]
	r10_59 = Mem0[sp_22 + 28:word32]
	fp_60 = Mem0[sp_22 + 32:word32]
	sp_61 = sp_22 + 40
	return r4_53
// DataOut: cpsr d24 d9 fp r4 r5
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> d22:<invalid> r8:<invalid> lr:<invalid> r9:<invalid>

l0000078E_thunk_fn00000790:
	r4_50 = fn00000790(r3_33, r4_24, out r5_48, out fp_49)
	return r4_50
// DataOut: cpsr d24 d9 fp r4 r5
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> d22:<invalid> r8:<invalid> lr:<invalid> r9:<invalid>

fn00000768_exit:
	r3_35 = PHI(r3_52, r3_33, r3, r3)
	r6_36 = PHI(r6_55, r6_19, r6, r6)
	r7_37 = PHI(r7_56, r7, r7, r7)
	r8_38 = PHI(r8_57, r8_20, r8, r8)
	r9_39 = PHI(r9_58, r9_21, r9, r9)
	r10_40 = PHI(r10_59, r10, r10, r10)
	sp_41 = PHI(sp_61, sp_22, sp, sp)
	r5_42 = PHI(r5_54, r5_48, r5, r5)
	fp_43 = PHI(fp_60, fp_49, fp, fp)
	r4_44 = PHI(r4_53, r4_50, r4, r4)
	use r5_42 (=> r5Out)
	use fp_43 (=> fpOut)
	use d24_23 (=> d24Out)
// DataOut: d24 fp r4 r5
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> fp:<invalid> d22:<invalid> lr:<invalid>



word32 fn00000790(word32 r3, word32 r4, ptr32 & r5Out, ptr32 & fpOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r3 r4
// LiveOut: fp r4 r5
// Trashed: fp r10 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
fn00000790_entry:
// DataOut: cpsr d24 d9 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(32)

l00000790:
	Mem3[r3:word32] = r4
// DataOut: cpsr d24 d9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000792:
	word32 r5_7
	*r5Out = Mem3[v3 + 8:word32]
	word32 fp_13
	*fpOut = Mem3[v3 + 32:word32]
	return Mem3[v3 + 4:word32]
// DataOut: cpsr d24 d9 fp r4 r5
// DataOut (flags): 
// SymbolicIn: sp:v3

fn00000790_exit:
// DataOut: fp r4 r5
// DataOut (flags): 
// SymbolicIn: sp:v3 + 40 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> fp:<invalid>



word32 prvAddNewTaskToReadyList(word32 r0, word32 r4, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r4
// LiveOut: sp
// Trashed: NZCV r0 r1 r2 r3 r4 r5 sp
// Preserved: r6 r7 r8
prvAddNewTaskToReadyList_entry:
// DataOut: cpsr d24 d9 fp r0 r4
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000798:
	word32 r0_115
	word32 r4_16 = Mem0[0x00000854:word32]
	word32 r0_20
	word32 r2_21
	vPortEnterCritical(cpsr, out r0_20, out r2_21)
	Mem25[r4_16:word32] = Mem0[r4_16:word32] + 0x00000001
	branch Mem25[r4_16 + 4:word32] == 0x00000000 l00000812
// DataOut: cpsr d24 d9 fp r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Local -0018(32)

l00000812:
	Mem97[r4_16 + 4:word32] = r0
	branch Mem97[r4_16:word32] != 0x00000001 l00000818_thunk_fn000009B4
// DataOut: cpsr d24 d9 fp r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Local -0018(32)

l00000818_thunk_fn000009B4:
	word32 sp_117
	fn000009B4(r4, out sp_117)
	return sp_117
// DataOut: cpsr d24 d9 fp sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000081A:
	vListInitialise(r4_16 + 0x00000008)
	vListInitialise(r4_16 + 0x0000001C)
	vListInitialise(r4_16 + 0x00000030)
	vListInitialise(r4_16 + 0x00000044)
	vListInitialise(r4_16 + 0x00000058)
	Mem114[r4_16 + 108:word32] = r4_16 + 0x00000030
	r0_115 = Mem114[r0 + 76:word32]
	Mem116[r4_16 + 112:word32] = r4_16 + 0x00000044
// DataOut: cpsr d24 d9 fp r0 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000007B0:
	branch Mem25[r4_16 + 116:word32] == 0x00000000 l00000800
// DataOut: cpsr d24 d9 fp r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000800:
	r0_115 = Mem25[r0 + 76:word32]
	branch Mem25[Mem25[r4_16 + 4:word32] + 76:word32] >u r0_115 l00000810
// DataOut: cpsr d24 d9 fp r0 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000080E_1:
	Mem96[r4_16 + 4:word32] = r0
// DataOut: cpsr d24 d9 fp r0 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r0:<invalid> r6:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000810:
// DataOut: cpsr d24 d9 fp r0 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r0:<invalid> r6:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000007B4:
	r0_115 = Mem25[r0 + 76:word32]
// DataOut: cpsr d24 d9 fp r0 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000007BA:
	word32 r2_50 = Mem25[r4_16 + 120:word32]
	Mem58[r4_16 + 124:word32] = 0x00000001 << r0_115 | Mem25[r4_16 + 124:word32]
	Mem59[r4_16 + 120:word32] = r2_50 + 0x00000001
	word32 r3_60
	vListInsertEnd(r4_16 + 0x00000008 + r0_115 * 0x00000014, r0 + 0x00000024, out r3_60)
	word32 r1_62
	word32 r2_63
	word32 r3_64
	word32 sp_65
	vPortExitCritical(r3_60, cpsr, out r1_62, out r2_63, out r3_64, out sp_65)
	branch Mem59[r4_16 + 116:word32] == 0x00000000 l000007FC
// DataOut: cpsr d24 d9 fp r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r0:<invalid> r6:<invalid> r1:0xFFFFFFFF r2:<invalid> r8:<invalid> r7:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000007E2:
	branch Mem59[Mem59[r4_16 + 4:word32] + 76:word32] >=u Mem59[r0 + 76:word32] l000007FC
// DataOut: cpsr d24 d9 fp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:r0 r3:<invalid> r0:<invalid> r6:<invalid> r1:<invalid> r2:<invalid> r8:<invalid> r7:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000007EC:
	Mem85[Mem59[0x00000858:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr d24 d9 fp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:r0 r3:<invalid> r0:<invalid> r6:<invalid> r1:<invalid> r2:<invalid> r8:<invalid> r7:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000007FC:
	return sp_65 + 24
// DataOut: cpsr d24 d9 fp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:r0 r3:<invalid> r0:<invalid> r6:<invalid> r1:<invalid> r2:<invalid> r8:<invalid> r7:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

prvAddNewTaskToReadyList_exit:
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r3:<invalid> r0:<invalid> r6:r6 r1:<invalid> r2:<invalid> r8:r8 r7:r7 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



word32 prvAddCurrentTaskToDelayedList.isra.0(word32 r0, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & spOut, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut: lr r0 r1 r2 r4 r5 r6 r7 sp
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved:
l0000085C:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

prvAddCurrentTaskToDelayedList.isra.0_entry:
// DataOut: cpsr d13 d24 fp r0 r10
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000085C:
	word32 r4_12 = Mem0[0x000008B0:word32]
	word32 sp_2
	*spOut = fp - 16
	word32 r6_15 = Mem0[r4_12 + 128:word32]
// DataOut: cpsr d13 d24 fp r0 r10 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000862_thunk_fn00000864:
	word32 r1_16
	word32 r2_17
	word32 r3_18
	word32 r4_19
	word32 r5_20
	word32 r6_21
	word32 r7_22
	word32 lr_23
	return fn00000864(r0, r4_12, r0, r6_15, out r1_16, out r2_17, out r3_18, out r4_19, out r5_20, out r6_21, out r7_22, out lr_23)
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:r0 r6:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

prvAddCurrentTaskToDelayedList.isra.0_exit:
// DataOut: lr r0 r1 r2 r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r3:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



word32 fn00000864(word32 r0, word32 r4, word32 r5, word32 r6, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r4 r5 r6
// LiveOut: lr r0 r1 r2 r3 r4 r5 r6 r7
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved: sp
l00000864:
	r0 = Mem0[r4 + 4:word32]
	r0 = r0 + 0x00000024
	NZCV = cond(r0)
	r0 = uxListRemove(r0)
	branch r0 != 0x00000000 l00000880
// DataOut: cpsr d24 d9 fp r10 r4 r5 r6 r9
// DataOut (flags): 
// SymbolicIn:

l0000086C_thunk_fn00000880:
	r0 = fn00000880(r4, r5, r6, out r1, out r2, out r3, out r4, out r5, out r6, out r7, out lr)
	return r0
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): 
// SymbolicIn:

l0000086C_thunk_fn00000870:
	r0 = fn00000870(r4, r5, r6, out r1, out r2, out r3, out r4, out r5, out r6, out r7, out lr)
	return r0
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): 
// SymbolicIn:

fn00000864_entry:
	def fp
	def r0
	def r4
	def r1Out
	def r2Out
	def r3Out
	def r4Out
	def r5Out
	def r6Out
	def r7Out
	def lrOut
	def r5
	def r6
// DataOut: cpsr d24 d9 fp r0 r10 r4 r5 r6 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000864:
	sp_1 = fp
	Mem3[r0 + 8:word32] = r0
	r0_5 = Mem3[r4 + 4:word32]
	r0_6 = r0_5 + 0x00000024
	NZCV_7 = cond(r0_6)
	r0_8 = uxListRemove(r0_6)
	branch r0_8 != 0x00000000 l0000086E_thunk_fn00000880
// DataOut: cpsr d24 d9 fp r10 r4 r5 r6 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000086E_thunk_fn00000880:
	r0_45 = fn00000880(r4, r5, r6, out r1_37, out r2_38, out r3_39, out r4_40, out r5_41, out r6_42, out r7_43, out lr_44)
	return r0_45
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r3:<invalid> r1:0x00000000

l0000086E_thunk_fn00000870:
	r0_36 = fn00000870(r4, r5, r6, out r1_28, out r2_29, out r3_30, out r4_31, out r5_32, out r6_33, out r7_34, out lr_35)
	return r0_36
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r3:<invalid> r1:0x00000000

fn00000864_exit:
	r1_9 = PHI(r1_37, r1_28, r1, r1)
	r2_10 = PHI(r2_38, r2_29, r2, r2)
	r3_11 = PHI(r3_39, r3_30, r3, r3)
	r4_12 = PHI(r4_40, r4_31, r4, r4)
	r5_13 = PHI(r5_41, r5_32, r5, r5)
	r6_14 = PHI(r6_42, r6_33, r6, r6)
	r7_15 = PHI(r7_43, r7_34, r7, r7)
	lr_16 = PHI(lr_44, lr_35, lr, lr)
	r0_17 = PHI(r0_45, r0_36, r0, r0)
	use r1_9 (=> r1Out)
	use r2_10 (=> r2Out)
	use r3_11 (=> r3Out)
	use r4_12 (=> r4Out)
	use r5_13 (=> r5Out)
	use r6_14 (=> r6Out)
	use r7_15 (=> r7Out)
	use lr_16 (=> lrOut)
// DataOut: lr r0 r1 r2 r3 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> r4:<invalid> r6:<invalid> lr:<invalid> r7:<invalid>



word32 fn00000870(word32 r4, word32 r5, word32 r6, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r4 r5 r6
// LiveOut: lr r0 r1 r2 r3 r4 r5 r6 r7
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved:
fn00000870_entry:
// DataOut: cpsr d24 d9 fp r10 r4 r5 r6 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000870:
	Mem11[r4 + 124:word32] = Mem0[r4 + 124:word32] & ~((0x00000001 << Mem0[Mem0[r4 + 4:word32] + 76:word32]) << 0x00000000)
// DataOut: cpsr d24 d9 fp r10 r4 r5 r6 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000087E_thunk_fn00000880:
	word32 r1_14
	word32 r2_15
	word32 r3_16
	word32 r4_17
	word32 r5_18
	word32 r6_19
	word32 r7_20
	word32 lr_21
	return fn00000880(r4, r5, r6, out r1_14, out r2_15, out r3_16, out r4_17, out r5_18, out r6_19, out r7_20, out lr_21)
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:<invalid> r1:<invalid> r3:<invalid>

fn00000870_exit:
// DataOut: lr r0 r1 r2 r3 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> r4:<invalid> r6:<invalid> lr:<invalid> r7:<invalid>



word32 fn00000880(word32 r4, word32 r5, word32 r6, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r4 r5 r6
// LiveOut: lr r0 r1 r2 r3 r4 r5 r6 r7
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved:
fn00000880_entry:
	*lrOut = lr
// DataOut: cpsr d24 d9 fp lr r10 r4 r5 r6 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(32)

l00000880:
	word32 r5_4 = r5 + r6
	Mem10[Mem0[r4 + 4:word32] + 36:word32] = r5_4
	branch r6 >u r5_4 l000008A2
// DataOut: cpsr d24 d9 fp lr r10 r4 r5 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000008A2:
	word32 r0_53 = Mem10[r4 + 112:word32]
	word32 r1_54 = Mem10[r4 + 4:word32]
	word32 r4_55 = Mem10[v3:word32]
	*r4Out = r4_55
	word32 r5_56 = Mem10[v3 + 4:word32]
	*r5Out = r5_56
	word32 lr_58
	*lrOut = Mem10[v3 + 12:word32]
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r4 r5 r9
// DataOut (flags): Z
// SymbolicIn: sp:v3 r5:r5 + r6 r3:<invalid>

l000008AC_thunk_vListInsert:
	word32 r0_65
	word32 r1_66
	word32 r2_67
	word32 r3_68
	word32 r6_69
	word32 r7_70
	vListInsert(r0_53, r1_54 + 0x00000024, r4_55, r5_56, out r0_65, out r1_66, out r2_67, out r3_68, out r6_69, out r7_70)
	return r0_65
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 + 16 r5:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> lr:<invalid>

l0000088A:
	word32 r0_37
	word32 r1_38
	word32 r2_39
	word32 r3_40
	word32 r6_41
	word32 r7_42
	vListInsert(Mem10[r4 + 108:word32], Mem10[r4 + 4:word32] + 0x00000024, r4, r5_4, out r0_37, out r1_38, out r2_39, out r3_40, out r6_41, out r7_42)
	word32 r3_44 = Mem10[r4 + 132:word32]
	*r3Out = r3_44
	branch r5_4 >=u r3_44 l000008A0
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r7 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r5:r5 + r6 r3:<invalid>

l0000089C_1:
	Mem52[r4 + 132:word32] = r5_4
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r7 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> r6:<invalid> r7:<invalid>

l000008A0:
	word32 r4_47
	*r4Out = Mem10[v3:word32]
	word32 r5_48
	*r5Out = Mem10[v3 + 4:word32]
	word32 r6_49
	*r6Out = Mem10[v3 + 8:word32]
	return r0_37
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> r6:<invalid> r7:<invalid>

fn00000880_exit:
// DataOut: lr r0 r1 r2 r3 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> lr:<invalid> r2:<invalid> r7:<invalid>



word32 xTaskCreate(word32 r2, word32 r3, word32 fp, word32 cpsr, word64 d13, ptr32 & fpOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d13 fp r2 r3
// LiveOut: d24 fp r0
// Trashed: NZCV d22 fp lr r0 r1 r2 r3
// Preserved: r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
xTaskCreate_entry:
	*fpOut = fp
	*d24Out = d24
// DataOut: cpsr d13 d24 fp r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000008B4:
	word32 r1_31
	word32 r3_32
	word32 r4_33
	word32 r5_34
	word32 r6_35
	word32 r7_36
	word32 r8_37
	word32 r9_38
	word32 sp_39
	word32 lr_40
	branch pvPortMalloc(r2 << 2, cpsr, out r1_31, out r3_32, out r4_33, out r5_34, out r6_35, out r7_36, out r8_37, out r9_38, out sp_39, out lr_40) == 0x00000000 l00000904
// DataOut: cpsr d13 d24 fp r10 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000904:
	return 0xFFFFFFFF
// DataOut: cpsr d24 d9 fp r0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r6:<invalid> r9:<invalid> r10:r3 r4:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> r1:<invalid> r5:<invalid> lr:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000008CA:
	word32 r0_113
	word32 r1_61
	word32 r3_62
	word32 r4_63
	word32 r5_64
	word32 r6_65
	word32 r7_66
	word32 r8_67
	word32 r9_68
	word32 sp_69
	word32 lr_70
	word32 r0_71 = pvPortMalloc(0x00000068, cpsr, out r1_61, out r3_62, out r4_63, out r5_64, out r6_65, out r7_66, out r8_67, out r9_68, out sp_69, out lr_70)
	branch r0_71 == 0x00000000 l0000090E
// DataOut: cpsr d13 d24 fp lr r0 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r6:<invalid> r9:<invalid> r10:r3 r4:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> r1:<invalid> r5:<invalid> lr:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l0000090E:
	vPortFree()
	r0_113 = 0xFFFFFFFF
// DataOut: cpsr d24 d9 fp r0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r6:<invalid> r9:<invalid> r10:r3 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> r1:<invalid> lr:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000008D6:
	Mem91[r0_71 + 80:word32] = r5_64
	word32 r5_92 = Mem91[sp_69 + 52:word32]
	Mem93[r0_71 + 101:byte] = 0x00
	Mem94[sp_69 + 4:word32] = r5_92
	word32 r5_95 = Mem94[sp_69 + 48:word32]
	Mem100[sp_69 + 12:word32] = 0x00000000
	Mem101[sp_69 + 8:word32] = r0_71
	Mem102[sp_69:word32] = r5_95
	word32 r5_107
	word32 fp_108
	word64 d24_109
	word32 r4_110 = prvInitialiseNewTask(r8_67, r9_68, r6_65, r3, r0_71, r5_95, r6_65, 0x00000000, r8_67, r9_68, r3, fp, lr_70, cpsr, d13, dwArg00, dwArg08, out r5_107, out fp_108, out d24_109)
	prvAddNewTaskToReadyList(r4_110, r4_110, cpsr)
	r0_113 = 0x00000001
// DataOut: cpsr d24 d9 fp r0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r6:<invalid> r9:<invalid> r10:r3 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> r1:<invalid> lr:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000008FE:
	return r0_113
// DataOut: cpsr d24 d9 fp r0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r6:<invalid> r9:<invalid> r10:<invalid> r5:<invalid> r4:<invalid> r7:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> fp:<invalid> lr:<invalid> d22:<invalid> -48(fp):<invalid> -44(fp):<invalid> -40(fp):0x00000068 -36(fp):0x00000000 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

xTaskCreate_exit:
// DataOut: d24 fp r0
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 r0:<invalid> r6:r6 r9:r9 r10:r10 r4:r4 r5:r5 r7:r7 r3:<invalid> r2:<invalid> r1:<invalid> fp:<invalid> lr:<invalid> d22:<invalid> -48(fp):<invalid> -44(fp):<invalid> -40(fp):0x00000068 -36(fp):0x00000000 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr



word32 xTaskCreateRestricted(word32 r0, word32 r10, word32 fp, word32 cpsr, word64 d13, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d13 fp r0 r10
// LiveOut: r4 sp
// Trashed: NZCV d22 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
xTaskCreateRestricted_entry:
// DataOut: cpsr d13 fp r0 r10 r4
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000091C:
	word32 sp_1
	*spOut = fp
	branch Mem0[r0 + 20:word32] == 0x00000000 l0000096A
// DataOut: cpsr d13 fp r10 r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000096A:
	return r4
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00000920:
	word32 r1_41
	word32 r3_42
	word32 r4_43
	word32 r5_44
	word32 r6_45
	word32 r7_46
	word32 r8_47
	word32 r9_48
	word32 sp_49
	word32 lr_50
	word32 r0_51 = pvPortMalloc(0x00000068, cpsr, out r1_41, out r3_42, out r4_43, out r5_44, out r6_45, out r7_46, out r8_47, out r9_48, out sp_49, out lr_50)
// DataOut: cpsr d13 fp r0 r10 r4 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l0000092A_thunk_fn0000092E:
	word32 r5_59
	word32 fp_60
	word32 sp_61
	word64 d24_62
	return fn0000092E(r0_51, r4_43, r7_46, r8_47, r9_48, r10, fp, cpsr, d13, dwArg00, dwArg04, dwArg08, dwArg0C, out r5_59, out fp_60, out sp_61, out d24_62)
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r0:<invalid> r7:<invalid> r2:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

xTaskCreateRestricted_exit:
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r0:<invalid> r4:<invalid> r7:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> fp:<invalid> r8:<invalid> r10:<invalid> d22:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



word32 fn0000092E(word32 r0, word32 r4, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 cpsr, word64 d13, word32 dwArg00, word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & r5Out, ptr32 & fpOut, ptr32 & spOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d13 fp r0 r10 r4 r7 r8 r9
// LiveOut: d24 fp r4 r5 sp
// Trashed: NZCV d22 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
l0000092E:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000092E_entry:
	*fpOut = fp
	*d24Out = d24
// DataOut: cpsr d13 d24 fp r0 r10 r4 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000092E:
	word32 sp_1 = fp
	branch r0 == 0x00000000 l00000964
// DataOut: cpsr d13 d24 fp r0 r10 r4 r5 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000964:
// DataOut: cpsr d24 d9 fp sp
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r0

l00000932:
	word32 r1_29 = Mem0[r4 + 20:word32]
	Mem30[r0 + 101:byte] = 0x01
	word32 r3_31 = Mem30[r4 + 12:word32]
	word32 r2_32 = (word32) Mem30[r4 + 16:word16]
	word32 lr_33 = Mem30[r4 + 16:word32]
	Mem34[r0 + 80:word32] = r1_29
	word32 r5_50
	word32 fp_51
	word64 d24_52
	word32 r4_53 = prvInitialiseNewTask(Mem34[r4:word32], Mem34[r4 + 4:word32], r2_32, r3_31, r4 + 24, r0, 0x00000001, r7, r8, r9, r10, fp, lr_33, cpsr, d13, lr_33, r0, out r5_50, out fp_51, out d24_52)
	sp_1 = prvAddNewTaskToReadyList(r5_50, r4_53, cpsr)
// DataOut: cpsr d24 d9 fp sp
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r0

l00000960:
	word32 sp_16 = sp_1 + 20
	word32 r5_19
	*r5Out = Mem0[sp_16 + 4:word32]
	word32 sp_22
	*spOut = sp_16 + 20
	return Mem0[sp_16:word32]
// DataOut: cpsr d24 d9 fp r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r4:<invalid> r0:<invalid> r9:<invalid> fp:<invalid> r8:<invalid> r10:<invalid> r7:<invalid> d22:<invalid> 0(fp):<invalid> 4(fp):r7 8(fp):r0 12(fp):r4 + 48

fn0000092E_exit:
// DataOut: d24 fp r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r4:<invalid> r0:<invalid> r7:<invalid> r9:<invalid> fp:<invalid> r8:<invalid> r10:<invalid> d22:<invalid> 0(fp):<invalid> 4(fp):r7 8(fp):r0 12(fp):r4 + 48



word32 vTaskAllocateMPURegions(word32 r0, word32 r1, word32 r5, word32 r6, word32 r7, word32 r8, word32 cpsr, word64 d13)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d13 r0 r1 r5 r6 r7 r8
// LiveOut: r4
// Trashed: NZCV d22 lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
vTaskAllocateMPURegions_entry:
// DataOut: cpsr d13 r0 r1 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000970:
	branch r0 == 0x00000000 l0000097C
// DataOut: cpsr d13 r0 r1 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000097C:
	word32 r0_34 = Mem0[Mem0[0x0000098C:word32] + 4:word32]
// DataOut: cpsr d13 r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000986_thunk_vPortStoreTaskMPUSettings:
	word32 r5_39
	word32 r6_40
	word32 r8_41
	word32 r9_42
	word32 sp_43
	word64 d24_44
	return vPortStoreTaskMPUSettings(r0_34 + 0x00000004, r1, 0x00000000, 0x00000000, r5, r6, r7, r8, cpsr, d13, out r5_39, out r6_40, out r8_41, out r9_42, out sp_43, out d24_44)
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000000 r0:<invalid> r2:0x00000000

l00000972:
// DataOut: cpsr d13 r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000978_thunk_vPortStoreTaskMPUSettings:
	word32 r5_25
	word32 r6_26
	word32 r8_27
	word32 r9_28
	word32 sp_29
	word64 d24_30
	return vPortStoreTaskMPUSettings(r0 + 0x00000004, r1, 0x00000000, 0x00000000, r5, r6, r7, r8, cpsr, d13, out r5_25, out r6_26, out r8_27, out r9_28, out sp_29, out d24_30)
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000000 r0:r0 + 0x00000004 r2:0x00000000

vTaskAllocateMPURegions_exit:
// DataOut: r4
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> d22:<invalid> r8:<invalid> lr:<invalid> r9:<invalid>



word32 vTaskStartScheduler(word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 cpsr, word64 d13, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d13 fp r10 r4 r5 r6 r7 r8 r9
// LiveOut: d24 r10 r4 r8 r9
// Trashed: NZCV d22 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: lr
vTaskStartScheduler_entry:
	*r9Out = r9
	*r10Out = r10
	*r8Out = r8
// DataOut: cpsr d13 fp r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000990:
	word32 r4_9 = Mem0[0x000009E0:word32]
	word32 fp_21
	word64 d24_22
	word32 r0_23 = xTaskCreate(0x0000003B, 0x00000000, fp, cpsr, d13, out fp_21, out d24_22)
	branch r0_23 == 0x00000001 l000009B6
// DataOut: cpsr d24 d9 fp r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -0008(32)

l000009B6:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	Mem47[r4_9 + 132:word32] = 0xFFFFFFFF
	Mem48[r4_9 + 116:word32] = r0_23
	Mem49[r4_9 + 128:word32] = 0x00000000
// DataOut: cpsr d24 d9 fp r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> fp:<invalid> lr:<invalid> d22:<invalid> -16(fp):0x80000000 -12(fp):<invalid> -8(fp):r4 -4(fp):lr

l000009DC_thunk_xPortStartScheduler:
	word32 r9_57
	word32 r10_58
	word32 r8_59
	*r8Out = xPortStartScheduler(r5, r6, r7, r8, r9, r10, fp_21, cpsr, out r9_57, out r10_58)
	return r4
// DataOut: d24 d9 r10 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000000 r4:r4 r2:0xFFFFFFFF r1:<invalid> r0:<invalid> lr:lr fp:<invalid> d22:<invalid> -16(fp):0x80000000 -12(fp):<invalid> -8(fp):r4 -4(fp):lr

l000009B2:
// DataOut: d24 d9 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> fp:<invalid> lr:<invalid> d22:<invalid> -16(fp):0x80000000 -12(fp):<invalid> -8(fp):r4 -4(fp):lr
// LocalsOut: Local -0008(32)

l000009B2_thunk_fn000009B4:
	word32 sp_39
	return fn000009B4(r4, out sp_39)
// DataOut: d24 d9 r10 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> fp:<invalid> lr:<invalid> d22:<invalid> -16(fp):0x80000000 -12(fp):<invalid> -8(fp):r4 -4(fp):lr

vTaskStartScheduler_exit:
// DataOut: d24 r10 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> fp:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> d22:<invalid> -16(fp):0x80000000 -12(fp):<invalid> -8(fp):r4 -4(fp):lr



word32 fn000009B4(word32 dwArg00, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r4 sp
// Trashed: r4 sp
// Preserved:
// Stack args: Stack +0000(32)
l000009B4:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn000009B4_entry:
// DataOut: cpsr d24 d9 fp r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000009B4:
	word32 sp_4
	*spOut = fp + 8
	return dwArg00
// DataOut: cpsr d24 d9 fp r10 r4 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

fn000009B4_exit:
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + 8 r4:<invalid>



void vTaskEndScheduler(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
vTaskEndScheduler_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l000009EC:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	Mem7[Mem0[0x00000A08:word32] + 116:word32] = 0x00000000
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A02_thunk_vPortEndScheduler:
	vPortEndScheduler()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:0x00000000

vTaskEndScheduler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:0x00000000



bool vTaskSuspendAll()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: C
// Trashed: NZCV r2 r3
// Preserved: sp
vTaskSuspendAll_entry:
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A0C:
	word32 r2_3 = Mem0[0x00000A1C:word32]
	word32 r3_4 = Mem0[r2_3 + 140:word32]
	Mem8[r2_3 + 140:word32] = r3_4 + 0x00000001
	return (bool) cond(r3_4 + 0x00000001)
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): C
// SymbolicIn: sp:fp

vTaskSuspendAll_exit:
// DataOut:
// DataOut (flags): C
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>



void xTaskGetTickCount()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
xTaskGetTickCount_entry:
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A20:
	return
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

xTaskGetTickCount_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void xTaskGetTickCountFromISR()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
xTaskGetTickCountFromISR_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A2C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

xTaskGetTickCountFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void uxTaskGetNumberOfTasks()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
uxTaskGetNumberOfTasks_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A38:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

uxTaskGetNumberOfTasks_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void pcTaskGetName(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: sp
pcTaskGetName_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A44:
	branch r0 == 0x00000000 l00000A4A
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A4A:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A46:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

pcTaskGetName_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r3:<invalid>



void xTaskGenericNotify(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r8 r9 sp
// Preserved: r3 r4 r5 r6 r7 sp
xTaskGenericNotify_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000A58:
	word32 r0_23
	word32 r2_24
	vPortEnterCritical(cpsr, out r0_23, out r2_24)
	branch r3 == 0x00000000 l00000A6C
// DataOut: cpsr r0 r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000A68:
	Mem147[r3:word32] = Mem0[r0 + 96:word32]
// DataOut: cpsr r0 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:r3 r6:r0 r7:r1 r5:r2 r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l00000A6C:
	word32 r4_28 = (word32) Mem0[r0 + 100:byte]
	Mem30[r0 + 100:byte] = 0x02
	word32 r4_138 = (uint32) (byte) r4_28
	branch r2 >u 0x00000004 || r2 <u 0x00000001 l00000A8C
// DataOut: cpsr r0 r2 r3 r4 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:r3 r6:r0 r7:r1 r5:r2 r3:<invalid> r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l00000A7E:
	switch (r2 - 0x00000001) { l00000AF2 l00000A96 l00000A86 l00000A82 }
// DataOut: cpsr r0 r3 r4 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r1 r5:r2 r3:0x00000002 r2:r2 - 0x00000001 r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l00000A82:
	r4_138 = r0_23 << 8
// DataOut: cpsr r3 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r1 r5:r2 r3:0x00000002 r2:r2 - 0x00000001 r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l00000A86:
	branch r4_138 == 0x00000002 l00000AFE
// DataOut: cpsr r3 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r1 r5:r2 r3:0x00000002 r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l00000AFE:
// DataOut: cpsr r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r1 r5:r2 r3:0x00000002 r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000A8A:
	Mem141[r0 + 96:word32] = r1
// DataOut: cpsr r3 r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r1 r5:r2 r3:0x00000002 r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l00000A8C:
	branch r4_138 == 0x00000001 l00000AA6
// DataOut: cpsr r3 r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r1 r5:r2 r3:0x00000002 r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l00000AA6:
	word32 r5_98 = Mem30[0x00000B04:word32]
	uxListRemove(r0 + 0x00000024)
	word32 r0_101 = Mem30[r0 + 76:word32]
	Mem109[r5_98 + 124:word32] = r4_138 << r0_101 | Mem30[r5_98 + 124:word32] << 0x00000000
	word32 r3_110
	vListInsertEnd(r5_98 + 0x00000008 + r0_101 * 0x00000014, r0 + 0x00000024, out r3_110)
	branch Mem109[r0 + 76:word32] <=u Mem109[Mem109[r5_98 + 4:word32] + 76:word32] l00000C90
// DataOut: cpsr r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r1 r5:r2 r3:0x00000002 r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l00000C90:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r0 + 0x00000024 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:r0 + 0x00000024 lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l00000C92:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r0 + 0x00000024 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000ADE:
	word32 r3_118 = Mem109[0x00000B08:word32]
	Mem119[r3_118:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	word32 r1_120
	word32 r2_121
	word32 r3_122
	word32 sp_123
	vPortExitCritical(r3_118, cpsr, out r1_120, out r2_121, out r3_122, out sp_123)
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r0 + 0x00000024 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:r0 + 0x00000024 lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000A90:
// DataOut: cpsr r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r1 r5:r2 r3:0x00000002 r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000A92:
	word32 r1_86
	word32 r2_87
	word32 r3_88
	word32 sp_89
	vPortExitCritical(0x00000002, cpsr, out r1_86, out r2_87, out r3_88, out sp_89)
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r1 r5:r2 r3:0x00000002 r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000A96:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r6:r0 r7:r1 r5:r2 r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000AF2:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r6:r0 r7:<invalid> r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

xTaskGenericNotify_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r4 r6:r6 r7:r7 r5:r5 r3:r3 r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> r8:lr r9:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



void xTaskGenericNotifyFromISR(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
// Stack args: Stack +0000(32)
xTaskGenericNotifyFromISR_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00000B0C:
	word32 r5_16 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	branch r3 == 0x00000000 l00000B2A
// DataOut: cpsr r0 r1 r2 r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Stack +0000(32)

l00000B26:
	Mem140[r3:word32] = Mem0[r0 + 96:word32]
// DataOut: cpsr r0 r1 r2 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:0x000000BF -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B2A:
	word32 r4_22 = (word32) Mem0[r0 + 100:byte]
	Mem25[r0 + 100:byte] = 0x02
	word32 r4_131 = (uint32) (byte) r4_22
	branch r2 >u 0x00000004 || r2 <u 0x00000001 l00000B4A
// DataOut: cpsr r0 r1 r2 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B3C:
	switch (r2 - 0x00000001) { l00000B90 l00000B54 l00000B44 l00000B40 }
// DataOut: cpsr r0 r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:0x00000002 r2:r2 - 0x00000001 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B40:
	r4_131 = r0 << 8
// DataOut: cpsr r0 r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:0x00000002 r2:r2 - 0x00000001 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B44:
	branch r4_131 == 0x00000002 l00000BC4
// DataOut: cpsr r0 r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:0x00000002 r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000BC4:
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:0x00000002 r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000B48:
	Mem134[r0 + 96:word32] = r1
// DataOut: cpsr r0 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:0x00000002 r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B4A:
	branch r4_131 == 0x00000001 l00000B64
// DataOut: cpsr r0 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:0x00000002 r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B64:
	word32 r6_91 = Mem25[0x00000BD0:word32]
	branch Mem25[r6_91 + 140:word32] == 0x00000000 l00000B9C
// DataOut: cpsr r0 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:0x00000002 r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B9C:
	uxListRemove(r0 + 0x00000024)
	word32 r0_116 = Mem25[r0 + 76:word32]
	Mem125[r6_91 + 124:word32] = r4_131 << r0_116 | Mem25[r6_91 + 124:word32]
	word32 r3_126
	vListInsertEnd(r6_91 + 0x00000008 + r0_116 * 0x00000014, r0 + 0x00000024, out r3_126)
// DataOut: cpsr r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:r0 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B6E:
	word32 r3_111
	vListInsertEnd(r6_91 + 0x00000058, r0 + 0x00000038, out r3_111)
// DataOut: cpsr r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:r0 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B7A:
	branch Mem25[r0 + 76:word32] <=u Mem25[Mem25[r6_91 + 4:word32] + 76:word32] l00000B82_thunk_fn00000D4E
// DataOut: cpsr r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:r0 r1:<invalid> r0:<invalid> r8:r0 + 0x00000024 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B82_thunk_fn00000D4E:
	fn00000D4E()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:r0 r1:<invalid> r0:<invalid> r8:r0 + 0x00000024 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000B84:
	branch dwArg00 == 0x00000000 l00000BC8
// DataOut: cpsr r3 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:r0 r1:<invalid> r0:<invalid> r8:r0 + 0x00000024 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000BC8:
	Mem108[r6_91 + 144:word32] = 0x00000001
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:r0 r1:<invalid> r0:0x00000001 r8:r0 + 0x00000024 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000B8A:
	Mem107[dwArg00:word32] = 0x00000001
	__msr(cpsr, r5_16)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:r0 r1:<invalid> r0:0x00000001 r8:r0 + 0x00000024 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000B4E:
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:0x00000002 r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000B50:
	__msr(cpsr, r5_16)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r6:<invalid> r7:r0 r1:<invalid> r8:r0 + 0x00000024 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000B54:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r6:<invalid> r7:r0 r1:<invalid> r8:r0 + 0x00000024 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000B90:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:r0 r1:<invalid> r0:0x00000001 r8:r0 + 0x00000024 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

xTaskGenericNotifyFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r3:<invalid> r2:<invalid> r6:r6 r7:r7 r8:r8 r0:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



word32 xTaskNotifyWait(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut: r4 sp
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 sp
// Preserved:
xTaskNotifyWait_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000BD4:
	word32 r4_16 = Mem0[0x00000C58:word32]
	word32 r0_26
	word32 r2_27
	vPortEnterCritical(cpsr, out r0_26, out r2_27)
	word32 r5_18 = r2
	word32 r6_22 = r1
	branch (word32) Mem0[Mem0[r4_16 + 4:word32] + 100:byte] == 0x00000002 l00000C04
// DataOut: cpsr r3 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000BF0:
	word32 r1_78 = Mem0[r4_16 + 4:word32]
	Mem81[r1_78 + 96:word32] = Mem0[r1_78 + 96:word32] & ~(r0 << 0x00000000)
	r3 = Mem81[r4_16 + 4:word32]
	Mem83[r3 + 100:byte] = 0x01
	branch r3 != 0x00000000 l00000C3C
// DataOut: cpsr r3 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r2 r8:r0 r6:r1 r7:r3 r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000C3C:
	word32 r1_85
	word32 r2_86
	word32 r7_90
	word32 sp_91
	word32 lr_92
	prvAddCurrentTaskToDelayedList.isra.0(r3, out r1_85, out r2_86, out r4_16, out r5_18, out r6_22, out r7_90, out sp_91, out lr_92)
	r3 = Mem83[0x00000C5C:word32]
	Mem96[r3:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr r3 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r2 r8:r0 r6:r1 r7:r3 r2:<invalid> r0:0x00000001 r1:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000C04:
	word32 r1_39
	word32 r2_40
	word32 r3_41
	word32 sp_42
	vPortExitCritical(r3, cpsr, out r1_39, out r2_40, out r3_41, out sp_42)
	word32 r0_44
	word32 r2_45
	vPortEnterCritical(cpsr, out r0_44, out r2_45)
	branch r5_18 == 0x00000000 l00000C14
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r8:r0 r6:<invalid> r7:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000C0E:
	Mem76[r5_18:word32] = Mem0[Mem0[r4_16 + 4:word32] + 96:word32]
// DataOut: cpsr r4 r6
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r8:r0 r6:<invalid> r7:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000C14:
	branch (word32) Mem0[Mem0[r4_16 + 4:word32] + 100:byte] == 0x00000001 l00000C54
// DataOut: cpsr r4 r6
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r8:r0 r6:<invalid> r7:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000C54:
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r8:r0 r6:<invalid> r7:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000C1E:
	word32 r3_69 = Mem0[r4_16 + 4:word32]
	Mem72[r3_69 + 96:word32] = Mem0[r3_69 + 96:word32] & ~(r6_22 << 0x00000000)
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r8:r0 r6:<invalid> r7:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000C2A:
	word32 r3_53 = Mem0[r4_16 + 4:word32]
	Mem54[r3_53 + 100:byte] = 0x00
	word32 r1_55
	word32 r2_56
	word32 r3_57
	word32 sp_58
	vPortExitCritical(r3_53, cpsr, out r1_55, out r2_56, out r3_57, out sp_58)
	word32 sp_66
	*spOut = sp_58 + 24
	return Mem54[sp_58:word32]
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r8:r0 r6:<invalid> r7:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

xTaskNotifyWait_exit:
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r8:<invalid> r6:<invalid> r7:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void vTaskNotifyGiveFromISR(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: r3 r4 r5 r6 r7 r8 r9 sp
vTaskNotifyGiveFromISR_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000C60:
	word32 r6_20 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r5_25 = (word32) Mem0[r0 + 100:byte]
	Mem26[r0 + 100:byte] = 0x02
	Mem32[r0 + 96:word32] = Mem26[r0 + 96:word32] + 0x00000001
	word32 r5_125 = (uint32) (byte) r5_25
	branch r5_125 == 0x00000001 l00000C96
// DataOut: cpsr r0 r1 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000C96:
	word32 r0_114
	word32 r1_113
	word32 r7_74 = Mem32[0x00000CFC:word32]
	branch Mem32[r7_74 + 140:word32] == 0x00000000 l00000CCC
// DataOut: cpsr r0 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:<invalid> r5:<invalid> -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00000CCC:
	uxListRemove(r0 + 0x00000024)
	word32 r0_120 = Mem32[r0 + 76:word32]
	r5_125 = r5_125 << r0_120 | Mem32[r7_74 + 124:word32]
	Mem129[r7_74 + 124:word32] = r5_125
	r0_114 = r7_74 + 0x00000008 + r0_120 * 0x00000014
	word32 r3_130
	vListInsertEnd(r0_114, r0 + 0x00000024, out r3_130)
	r1_113 = r0 + 0x00000024
// DataOut: cpsr r0 r1 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:<invalid> r5:<invalid> r7:<invalid> r8:r1 r4:r0 -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00000CA2:
	word32 r3_115
	vListInsertEnd(r7_74 + 0x00000058, r0 + 0x00000038, out r3_115)
	r1_113 = r0 + 0x00000038
	r0_114 = r7_74 + 0x00000058
// DataOut: cpsr r0 r1 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:<invalid> r5:<invalid> r7:<invalid> r8:r1 r4:r0 -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00000CAE:
	word32 r2_84 = Mem32[r0 + 76:word32]
	branch r2_84 <=u Mem32[Mem32[r7_74 + 4:word32] + 76:word32] l00000CB6_thunk_fn00000E8E
// DataOut: cpsr r0 r1 r2 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:<invalid> r5:<invalid> r7:<invalid> r8:r1 r4:r0 r1:<invalid> r0:<invalid> r2:<invalid> r9:r0 + 0x00000024 -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00000CB6_thunk_fn00000E8E:
	word32 r1_101
	word32 r2_102
	word32 r3_103
	word32 r4_104
	word32 r5_105
	word32 r6_106
	word32 r7_107
	word32 r8_108
	word32 r9_109
	word32 sp_110
	word32 lr_111
	fn00000E8E(r0_114, r1_113, r2_84, r0, r5_125, cpsr, out r1_101, out r2_102, out r3_103, out r4_104, out r5_105, out r6_106, out r7_107, out r8_108, out r9_109, out sp_110, out lr_111)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:<invalid> r5:<invalid> r7:<invalid> r8:r1 r4:r0 r1:<invalid> r0:<invalid> r2:<invalid> r9:r0 + 0x00000024 -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00000CB8:
	branch r1 == 0x00000000 l00000CF4
// DataOut: cpsr r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:<invalid> r5:<invalid> r7:<invalid> r8:r1 r4:r0 r1:<invalid> r0:<invalid> r2:<invalid> r9:r0 + 0x00000024 -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00000CF4:
	Mem100[r7_74 + 144:word32] = 0x00000001
// DataOut: cpsr r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:0x00000001 r5:<invalid> r7:<invalid> r8:r1 r4:r0 r1:<invalid> r0:<invalid> r2:<invalid> r9:r0 + 0x00000024 -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00000CC0:
	Mem91[r1:word32] = 0x00000001
	__msr(cpsr, r6_20)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:0x00000001 r5:<invalid> r7:<invalid> r8:r1 r4:r0 r1:<invalid> r0:<invalid> r2:<invalid> r9:r0 + 0x00000024 -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00000C8E:
	__msr(cpsr, r6_20)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:<invalid> r5:<invalid> r7:<invalid> r8:r1 r4:r0 r1:<invalid> r0:<invalid> r2:<invalid> r9:r0 + 0x00000024 -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00000C92_in_vTaskNotifyGiveFromISR:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:<invalid> r5:<invalid> r7:<invalid> r8:r1 r4:r0 r1:<invalid> r0:<invalid> r2:<invalid> r9:r0 + 0x00000024 -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

vTaskNotifyGiveFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r3:<invalid> r5:<invalid> r4:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> lr:<invalid> -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr



void ulTaskNotifyTake(word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r1
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
ulTaskNotifyTake_entry:
// DataOut: cpsr r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000D00:
	word32 r4_12 = Mem0[0x00000D64:word32]
	word32 r0_18
	word32 r2_19
	vPortEnterCritical(cpsr, out r0_18, out r2_19)
	branch Mem0[Mem0[r4_12 + 4:word32] + 96:word32] != 0x00000000 l00000D1C
// DataOut: cpsr r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000D10_thunk_fn00000D4E:
	fn00000D4E()
	return
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r6:r0 r5:r1 r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// Terminates process

l00000D12:
	Mem35[Mem0[r4_12 + 4:word32] + 100:byte] = 0x01
	branch r1 != 0x00000000 l00000D4A
// DataOut: cpsr r5 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r6:r0 r5:r1 r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000D4A:
	word32 r1_38
	word32 r2_39
	word32 r4_40
	word32 r5_41
	word32 r6_42
	word32 r7_43
	word32 sp_44
	word32 lr_45
	prvAddCurrentTaskToDelayedList.isra.0(r1, out r1_38, out r2_39, out r4_40, out r5_41, out r6_42, out r7_43, out sp_44, out lr_45)
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r6:r0 r5:r1 r3:<invalid> r2:0x00000001 r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000D4C_thunk_fn00000D4E:
	fn00000D4E()
	return
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r6:<invalid> r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// Terminates process

l00000D1A_thunk_fn00000D4E:
	fn00000D4E()
	return
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r6:r0 r5:r1 r3:<invalid> r2:0x00000001 r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// Terminates process

ulTaskNotifyTake_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void fn00000D4E()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00000D4E:
	r2 = 0x10000000
	r3 = Mem0[0x00000D68:word32]
	Mem0[r3:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr r3 r4 r6
// DataOut (flags): 
// SymbolicIn:

l00000D1C:
	Z = vPortExitCritical(r3, cpsr, out r1, out r2, out r3, out sp)
	C = vPortEnterCritical(cpsr, out r0, out r2)
	r3 = Mem0[r4 + 4:word32]
	r5 = Mem0[r3 + 96:word32]
	branch r5 == 0x00000000 l00000D32
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn:

l00000D2A:
	branch r6 != 0x00000000 l00000D42
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn:

l00000D42:
	r2 = 0x00000000
	r3 = Mem0[r4 + 4:word32]
	Mem0[r3 + 96:word32] = 0x00000000
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn:

l00000D2C:
	r3 = Mem0[r4 + 4:word32]
	r2 = r5 - 0x00000001
	Mem0[r3 + 96:word32] = r2
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn:

l00000D32:
	r2 = 0x00000000
	r3 = Mem0[r4 + 4:word32]
	Mem0[r3 + 100:byte] = 0x00
	Z = vPortExitCritical(r3, cpsr, out r1, out r2, out r3, out sp)
	r0 = r5
	r4 = Mem0[sp:word32]
	r5 = Mem0[sp + 4:word32]
	r6 = Mem0[sp + 8:word32]
	sp = sp + 16
	return
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn:

fn00000D4E_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000D4E_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000D4E:
	sp = fp
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



word32 xTaskIncrementTick(word32 r0, word32 r1, word32 r2, word32 cpsr, ptr32 & r2Out, ptr32 & r4Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & spOut, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2
// LiveOut: lr r0 r2 r4 r6 r7 sp
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: r10 r5 r8 r9
xTaskIncrementTick_entry:
	*lrOut = lr
	*r2Out = r2
// DataOut: cpsr d13 d24 fp lr r0 r1 r2 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000D6C:
	word32 r6_141
	word32 r4_20 = Mem0[0x00000E64:word32]
	word32 sp_2
	*spOut = fp - 32
	branch Mem0[r4_20 + 140:word32] != 0x00000000 l00000E38
// DataOut: cpsr d13 d24 fp lr r0 r1 r2 r4
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -0014(32) Local -0018(32) Local -0020(32)

l00000E38:
	Mem144[r4_20 + 152:word32] = Mem0[r4_20 + 152:word32] + 0x00000001
	r6_141 = 0x00000000
// DataOut: cpsr d13 d24 fp lr r2 r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32) Local -0020(32)

l00000D7A:
	word32 r7_65 = Mem0[r4_20 + 128:word32]
	Mem68[r4_20 + 128:word32] = r7_65 + 0x00000001
	branch r7_65 != 0x00000001 l00000DA8
// DataOut: cpsr d13 d24 fp lr r0 r1 r2 r4 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32) Local -0020(32)

l00000D86:
	word32 r3_112 = Mem68[r4_20 + 108:word32]
	r2 = Mem68[r4_20 + 112:word32]
	*r2Out = r2
	Mem114[r4_20 + 108:word32] = r2
	Mem115[r4_20 + 112:word32] = r3_112
	Mem118[r4_20 + 148:word32] = Mem115[r4_20 + 148:word32] + 0x00000001
	branch Mem118[Mem118[r4_20 + 108:word32]:word32] != 0x00000000 l00000E46
// DataOut: cpsr d13 d24 fp lr r0 r1 r2 r4 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32) Local -0020(32)

l00000E46:
	Mem130[r4_20 + 132:word32] = Mem118[Mem118[Mem118[Mem118[r4_20 + 108:word32] + 12:word32] + 12:word32] + 36:word32]
	branch r7_65 + 0x00000001 <u Mem130[r4_20 + 132:word32] l00000E5A_thunk_fn00001014
// DataOut: cpsr d13 d24 fp lr r0 r1 r2 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r2:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32) Local -0020(32)

l00000E5A_thunk_fn00001014:
	word32 r2_134
	word32 r4_135
	word32 r6_136
	word32 r7_137
	word32 lr_138
	return fn00001014(r0, r7_65 + 0x00000001, out r2_134, out r4_135, out r6_136, out r7_137, out lr_138)
// DataOut: cpsr d13 d24 fp lr r0 r2 r4 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r2:<invalid> r6:0x00000000 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000E5C:
// DataOut: cpsr d13 d24 fp lr r0 r1 r2 r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r2:<invalid> r6:0x00000000 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32) Local -0020(32)

l00000DA0:
	Mem124[r4_20 + 132:word32] = 0xFFFFFFFF
// DataOut: cpsr d13 d24 fp lr r0 r1 r2 r4 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r2:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32) Local -0020(32)

l00000DA8:
	branch r7_65 + 0x00000001 <u Mem68[r4_20 + 132:word32] l00000E14
// DataOut: cpsr d13 d24 fp lr r0 r1 r2 r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r2:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32) Local -0020(32)

l00000DB2:
// DataOut: cpsr d13 d24 fp lr r0 r1 r2 r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:0x00000000 r2:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32) Local -0020(32)

l00000E04:
	word32 r3_92 = Mem68[Mem68[r4_20 + 108:word32]:word32]
	branch r3_92 != 0x00000000 l00000E0A_thunk_fn00000FBC
// DataOut: cpsr d13 d24 fp lr r0 r1 r2 r3 r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:0x00000000 r9:0x00000001 r8:<invalid> r2:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32) Local -0020(32)

l00000E0A_thunk_fn00000FBC:
	word32 r2_100
	word32 r4_101
	word32 r6_102
	word32 r7_103
	word32 lr_104
	return fn00000FBC(r0, r1, r2, r3_92, cpsr, out r2_100, out r4_101, out r6_102, out r7_103, out lr_104)
// DataOut: cpsr d13 d24 fp lr r0 r2 r4 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:0x00000000 r9:0x00000001 r8:<invalid> r2:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000E0C:
	Mem96[r4_20 + 132:word32] = 0xFFFFFFFF
// DataOut: cpsr d13 d24 fp lr r2 r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:0x00000000 r9:0x00000001 r8:<invalid> r2:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32) Local -0020(32)

l00000E14:
	r6_141 = 0x00000000
	branch Mem68[r4_20 + Mem68[Mem68[r4_20 + 4:word32] + 76:word32] * 0x00000014 + 8:word32] <u 0x00000002 l00000E28
// DataOut: cpsr d13 d24 fp lr r2 r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:0x00000000 r2:<invalid> r9:0x00000001 r8:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32) Local -0020(32)

l00000E26_1:
	r6_141 = 0x00000001
// DataOut: cpsr d13 d24 fp lr r2 r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:0x00000000 r2:<invalid> r9:0x00000001 r8:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32) Local -0020(32)

l00000E28:
	branch Mem0[r4_20 + 144:word32] == 0x00000000 l00000E32
// DataOut: cpsr d13 d24 fp lr r2 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r6:<invalid> r7:<invalid> r2:<invalid> r9:0x00000001 r8:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32) Local -0020(32)

l00000E30_1:
	r6_141 = 0x00000001
// DataOut: cpsr d13 d24 fp lr r2 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r6:<invalid> r7:<invalid> r2:<invalid> r9:0x00000001 r8:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32) Local -0020(32)

l00000E32:
	word32 r4_56
	*r4Out = r4
	word32 r6_58
	*r6Out = r6
	word32 r7_59
	*r7Out = r7
	word32 sp_63
	*spOut = fp
	return r6_141
// DataOut: cpsr d13 d24 fp lr r0 r2 r4 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r6:<invalid> r7:<invalid> r2:<invalid> r9:0x00000001 r8:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

xTaskIncrementTick_exit:
// DataOut: lr r0 r2 r4 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r5:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:r10 r2:<invalid> r1:<invalid> lr:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr



word32 xTaskResumeAll(word32 r1, word32 cpsr, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & spOut, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r1
// LiveOut: lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
xTaskResumeAll_entry:
// DataOut: cpsr d13 d24 fp r1 r10
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000E6C:
	word32 r4_16 = Mem0[0x00000F40:word32]
	word32 r0_18
	word32 r2_19
	vPortEnterCritical(cpsr, out r0_18, out r2_19)
	Mem23[r4_16 + 140:word32] = Mem0[r4_16 + 140:word32] - 0x00000001
	word32 r5_24 = Mem23[r4_16 + 140:word32]
	branch r5_24 != 0x00000000 l00000F26
// DataOut: cpsr d13 d24 fp r0 r1 r10 r2 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000E86_thunk_fn00000E8E:
	word32 r1_80
	word32 r2_81
	word32 r3_82
	word32 r4_83
	word32 r5_84
	word32 r6_85
	word32 r7_86
	word32 r8_87
	word32 r9_88
	word32 sp_89
	word32 lr_90
	return fn00000E8E(r0_18, r1, r2_19, r4_16, r5_24, cpsr, out r1_80, out r2_81, out r3_82, out r4_83, out r5_84, out r6_85, out r7_86, out r8_87, out r9_88, out sp_89, out lr_90)
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000E88:
	branch Mem23[r4_16:word32] == 0x00000000 l00000F26
// DataOut: cpsr d13 d24 fp r0 r1 r10 r2 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000E8C_thunk_fn00000E8E:
	word32 r1_68
	word32 r2_69
	word32 r3_70
	word32 r4_71
	word32 r5_72
	word32 r6_73
	word32 r7_74
	word32 r8_75
	word32 r9_76
	word32 sp_77
	word32 lr_78
	return fn00000E8E(r0_18, r1, r2_19, r4_16, r5_24, cpsr, out r1_68, out r2_69, out r3_70, out r4_71, out r5_72, out r6_73, out r7_74, out r8_75, out r9_76, out sp_77, out lr_78)
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000E8C_thunk_fn00000E8E:
	word32 r1_56
	word32 r2_57
	word32 r3_58
	word32 r4_59
	word32 r5_60
	word32 r6_61
	word32 r7_62
	word32 r8_63
	word32 r9_64
	word32 sp_65
	word32 lr_66
	return fn00000E8E(r0_18, r1, r2_19, r4_16, r5_24, cpsr, out r1_56, out r2_57, out r3_58, out r4_59, out r5_60, out r6_61, out r7_62, out r8_63, out r9_64, out sp_65, out lr_66)
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

xTaskResumeAll_exit:
// DataOut: lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r2:<invalid> r0:<invalid> lr:<invalid> r1:<invalid> r8:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



word32 fn00000E8E(word32 r0, word32 r1, word32 r2, word32 r4, word32 r5, word32 cpsr, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & spOut, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r4 r5
// LiveOut: lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
fn00000E8E_entry:
	*r9Out = r9
	*lrOut = lr
	*r8Out = r8
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000E8E:
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000ED4:
	branch Mem0[r4 + 88:word32] != 0x00000000 l00001096
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r6:0x00000001 r7:r4 + 0x00000008

l00000ED8_thunk_fn00001096:
	word32 r1_112
	word32 r2_113
	word32 r3_114
	word32 r4_115
	word32 r5_116
	word32 r6_117
	word32 r7_118
	word32 sp_119
	word32 lr_120
	return fn00001096(r4, r5, 0x00000001, r4 + 0x00000008, out r1_112, out r2_113, out r3_114, out r4_115, out r5_116, out r6_117, out r7_118, out sp_119, out lr_120)
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r6:0x00000001 r7:r4 + 0x00000008 r3:<invalid>

l00000EDA:
	branch r5 == 0x00000000 l00000EEA
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r6:0x00000001 r7:r4 + 0x00000008 r3:<invalid>

l00000EDC:
	branch Mem0[Mem0[r4 + 108:word32]:word32] != 0x00000000 l00000F32
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r6:0x00000001 r7:r4 + 0x00000008 r3:<invalid>

l00000F32:
	Mem111[r4 + 132:word32] = Mem0[Mem0[Mem0[Mem0[r4 + 108:word32] + 12:word32] + 12:word32] + 36:word32]
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r6:0x00000001 r7:r4 + 0x00000008 r3:<invalid>

l00000EE2:
	Mem106[r4 + 132:word32] = 0xFFFFFFFF
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r6:0x00000001 r7:r4 + 0x00000008 r3:<invalid>

l00000EEA:
	word32 r5_37 = Mem0[r4 + 152:word32]
	branch r5_37 == 0x00000000 l00000F04
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r6:0x00000001 r7:r4 + 0x00000008 r3:<invalid>

l00000EF0:
	word32 r2_85
	word32 r6_87
	word32 r7_88
	word32 sp_89
	word32 lr_90
	word32 r0_91 = xTaskIncrementTick(r0, r1, r2, cpsr, out r2_85, out r4, out r6_87, out r7_88, out sp_89, out lr_90)
	branch r0_91 == 0x00000000 l00000EFC
// DataOut: cpsr d13 d24 fp lr r0 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r6:0x00000001 r7:r4 + 0x00000008 r3:<invalid> r5:<invalid>

l00000EF8:
	Mem102[r4 + 144:word32] = r6_87
// DataOut: cpsr d13 d24 fp lr r0 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r7:<invalid> r3:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r2:<invalid> r8:<invalid> r9:<invalid> r1:<invalid> lr:<invalid>

l00000EFC:
	word32 r5_92
	*r5Out = r5_37 - 0x00000001
	branch r5_37 != 0x00000001 l000010F2
// DataOut: cpsr d13 d24 fp lr r0 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r7:<invalid> r3:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r2:<invalid> r8:<invalid> r9:<invalid> r1:<invalid> lr:<invalid>

l000010F2:
// DataOut: cpsr d13 d24 fp lr r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r7:<invalid> r3:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r2:<invalid> r8:<invalid> r9:<invalid> r1:<invalid> lr:<invalid>

l000010F2_thunk_fn000010F4:
	word32 r1_98
	word32 r3_99
	return fn000010F4(r2_85, r0_91 << 14, out r1_98, out r3_99)
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r7:<invalid> r3:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r2:<invalid> r8:<invalid> r9:<invalid> r1:<invalid> lr:<invalid>

l00000F00:
	Mem95[r4 + 152:word32] = r5_37 - 0x00000001
// DataOut: cpsr d13 d24 fp lr r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r7:<invalid> r3:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r2:<invalid> r8:<invalid> r9:<invalid> r1:<invalid> lr:<invalid>

l00000F04:
	word32 r3_51 = Mem0[r4 + 144:word32]
	branch r3_51 == 0x00000000 l00000F26
// DataOut: cpsr d13 d24 fp lr r10 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r7:<invalid> r3:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r2:<invalid> r8:<invalid> r9:<invalid> r1:<invalid> lr:<invalid>

l00000F26:
	word32 r1_71
	word32 r2_72
	word32 r3_73
	word32 sp_74
	vPortExitCritical(r3_51, cpsr, out r1_71, out r2_72, out r3_73, out sp_74)
	word32 r4_77
	*r4Out = Mem0[sp_74:word32]
	word32 r5_78
	*r5Out = Mem0[sp_74 + 4:word32]
	word32 r6_79
	*r6Out = Mem0[sp_74 + 8:word32]
	word32 r7_80
	*r7Out = Mem0[sp_74 + 12:word32]
	word32 r8_81
	*r8Out = Mem0[sp_74 + 16:word32]
	word32 sp_82
	*spOut = sp_74 + 24
	return 0x00000000
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r7:<invalid> r3:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r2:<invalid> r8:<invalid> r9:<invalid> r1:<invalid> lr:<invalid>

l00000F0A:
	word32 r3_53 = Mem0[0x00000F44:word32]
	Mem54[r3_53:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	word32 r1_57
	word32 r2_58
	word32 r3_59
	word32 sp_60
	vPortExitCritical(r3_53, cpsr, out r1_57, out r2_58, out r3_59, out sp_60)
	word32 r4_63
	*r4Out = Mem54[sp_60:word32]
	word32 r5_64
	*r5Out = Mem54[sp_60 + 4:word32]
	word32 r6_65
	*r6Out = Mem54[sp_60 + 8:word32]
	word32 r7_66
	*r7Out = Mem54[sp_60 + 12:word32]
	word32 r8_67
	*r8Out = Mem54[sp_60 + 16:word32]
	word32 sp_68
	*spOut = sp_60 + 24
	return 0x00000001
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r7:<invalid> r3:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r2:<invalid> r8:<invalid> r9:<invalid> r1:<invalid> lr:<invalid>

fn00000E8E_exit:
// DataOut: lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r7:<invalid> r3:<invalid> r0:<invalid> lr:<invalid> r2:<invalid> r1:<invalid> r4:<invalid> r5:<invalid> r8:<invalid> r9:<invalid>



void vTaskDelay(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: r3 sp
vTaskDelay_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000F48:
	branch r0 != 0x00000000 l00000F5E
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000F5E:
	word32 r2_37 = Mem0[0x00000F7C:word32]
	Mem41[r2_37 + 140:word32] = Mem0[r2_37 + 140:word32] + 0x00000001
	word32 r1_42
	word32 r2_43
	word32 r4_44
	word32 r5_45
	word32 r6_46
	word32 r7_47
	word32 sp_48
	word32 lr_49
	prvAddCurrentTaskToDelayedList.isra.0(r0, out r1_42, out r2_43, out r4_44, out r5_45, out r6_46, out r7_47, out sp_48, out lr_49)
	word32 r1_52
	word32 r2_53
	word32 r3_54
	word32 r4_55
	word32 r5_56
	word32 r6_57
	word32 r7_58
	word32 r8_59
	word32 r9_60
	word32 sp_61
	word32 lr_62
	word32 r0_63 = xTaskResumeAll(r1_42, cpsr, out r1_52, out r2_53, out r3_54, out r4_55, out r5_56, out r6_57, out r7_58, out r8_59, out r9_60, out sp_61, out lr_62)
	branch r0_63 == 0x00000000 l0000114C_in_vTaskDelay
// DataOut: r0 r2 r3 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 -8(fp):r3 -4(fp):lr

l0000114C_in_vTaskDelay:
	Mem68[r0_63:word32] = r2_53
	Mem69[r0_63 + 4:word32] = r3_54
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -8(fp):r3 -4(fp):lr

l00000F76:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -8(fp):r3 -4(fp):lr

l00000F4C:
	Mem25[Mem0[0x00000F78:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 -8(fp):r3 -4(fp):lr

vTaskDelay_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -8(fp):r3 -4(fp):lr



word32 vTaskDelayUntil(word32 r0, word32 r1, word32 cpsr, ptr32 & r4Out, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut: lr r0 r4
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
vTaskDelayUntil_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000F80:
	word32 r2_3 = Mem0[0x00000FD4:word32]
	word32 r3_11 = Mem0[r0:word32]
	Mem13[r2_3 + 140:word32] = Mem0[r2_3 + 140:word32] + 0x00000001
	word32 r2_14 = Mem13[r2_3 + 128:word32]
	word32 r1_16 = r1 + r3_11
	branch r2_14 >=u r3_11 l00000FB8
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000FB8:
	branch r3_11 >u r1_16 l00000FBA_thunk_fn00000FC0
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l00000FBA_thunk_fn00000FC0:
	word32 r2_76
	word32 r4_77
	word32 r6_78
	word32 r7_79
	word32 lr_80
	return fn00000FC0(r0, r1_16, r2_14, cpsr, out r2_76, out r4_77, out r6_78, out r7_79, out lr_80)
// DataOut: cpsr lr r0 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l00000FBA_thunk_fn00000FBC:
	word32 r2_70
	word32 r4_71
	word32 r6_72
	word32 r7_73
	word32 lr_74
	return fn00000FBC(r0, r1_16, r2_14, r3_11, cpsr, out r2_70, out r4_71, out r6_72, out r7_73, out lr_74)
// DataOut: cpsr lr r0 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l00000F9A:
	branch r3_11 >u r1_16 l00000F9C_thunk_fn00000FBC
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l00000F9C_thunk_fn00000FBC:
	word32 r2_59
	word32 r4_60
	word32 r6_61
	word32 r7_62
	word32 lr_63
	return fn00000FBC(r0, r1_16, r2_14, r3_11, cpsr, out r2_59, out r4_60, out r6_61, out r7_62, out lr_63)
// DataOut: cpsr lr r0 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l00000F9E:
	Mem37[r0:word32] = r1_16
	word32 r1_39
	word32 r2_40
	word32 r3_41
	word32 r4_42
	word32 r5_43
	word32 r6_44
	word32 r7_45
	word32 r8_46
	word32 r9_47
	word32 sp_48
	word32 lr_49
	word32 r0_50 = xTaskResumeAll(r1_16, cpsr, out r1_39, out r2_40, out r3_41, out r4_42, out r5_43, out r6_44, out r7_45, out r8_46, out r9_47, out sp_48, out lr_49)
	branch r0_50 != 0x00000000 l00000FD0_in_vTaskDelayUntil
// DataOut: cpsr lr r0 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l00000FD0_in_vTaskDelayUntil:
	word32 r4_57
	*r4Out = Mem0[sp_48:word32]
	return r0_50
// DataOut: cpsr lr r0 r4
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r0:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr

l00000FA6:
	Mem53[Mem37[0x00000FD8:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	word32 r4_54
	*r4Out = Mem53[sp_48:word32]
	return r0_50
// DataOut: cpsr lr r0 r4
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r0:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr

vTaskDelayUntil_exit:
// DataOut: lr r0 r4
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr



word32 fn00000FBC(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, ptr32 & r2Out, ptr32 & r4Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut: lr r0 r2 r4 r6 r7
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
l00000FBC:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000FBC_entry:
	*r7Out = r7
	*lrOut = lr
// DataOut: cpsr d13 d24 fp lr r0 r1 r2 r3 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000FBC:
	branch r2 >=u r1 l00000FBE_thunk_fn0000119E
// DataOut: cpsr d13 d24 fp lr r0 r1 r2 r3 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000FBE_thunk_fn0000119E:
	word32 r2_30
	word32 r3_31
	word32 r4_32
	word32 r5_33
	word32 r6_34
	word32 sp_35
	return fn0000119E(r3, cpsr, out r2_30, out r3_31, out r4_32, out r5_33, out r6_34, out sp_35)
// DataOut: cpsr d13 d24 fp lr r0 r2 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000FBE_thunk_fn00000FC0:
	word32 r2_22
	word32 r4_23
	word32 r6_24
	word32 r7_25
	word32 lr_26
	return fn00000FC0(r0, r1, r2, cpsr, out r2_22, out r4_23, out r6_24, out r7_25, out lr_26)
// DataOut: cpsr d13 d24 fp lr r0 r2 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

fn00000FBC_exit:
// DataOut: lr r0 r2 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>



word32 fn00000FC0(word32 r0, word32 r1, word32 r2, word32 cpsr, ptr32 & r2Out, ptr32 & r4Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2
// LiveOut: lr r0 r2 r4 r6 r7
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
fn00000FC0_entry:
// DataOut: cpsr d13 d24 fp r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000FC0:
	Mem3[r0:word32] = r1
	word32 r1_7
	word32 r2_8
	word32 r4_9
	word32 r5_10
	word32 r6_11
	word32 r7_12
	word32 sp_13
	word32 lr_14
	prvAddCurrentTaskToDelayedList.isra.0(r1 - r2, out r1_7, out r2_8, out r4_9, out r5_10, out r6_11, out r7_12, out sp_13, out lr_14)
	word32 r1_17
	word32 r2_18
	word32 r3_19
	word32 r4_20
	word32 r5_21
	word32 r6_22
	word32 r7_23
	word32 r8_24
	word32 r9_25
	word32 sp_26
	word32 lr_27
	word32 r0_28 = xTaskResumeAll(r1_7, cpsr, out r1_17, out r2_18, out r3_19, out r4_20, out r5_21, out r6_22, out r7_23, out r8_24, out r9_25, out sp_26, out lr_27)
	branch r0_28 == 0x00000000 l000011A6
// DataOut: cpsr d13 d24 fp lr r0 r2 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000011A6:
	word32 r4_44
	*r4Out = r0_28 << 3
// DataOut: cpsr d13 d24 fp lr r0 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>

l000011AA_thunk_vTaskMissedYield:
	word32 r2_47
	*r2Out = vTaskMissedYield()
	return 0x00000000
// DataOut: cpsr d13 d24 fp lr r0 r2 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:0x00000000 r4:<invalid> r5:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>

l00000FD0:
	word32 r4_41
	*r4Out = Mem3[sp_26:word32]
	return r0_28
// DataOut: cpsr d13 d24 fp lr r0 r2 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>

fn00000FC0_exit:
// DataOut: lr r0 r2 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>



word32 vTaskPlaceOnEventList(word32 r0, word32 r1, word32 r5, ptr32 & r6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r5
// LiveOut: r5 r6
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved: lr r4 sp
vTaskPlaceOnEventList_entry:
// DataOut: cpsr r0 r1 r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000FDC:
	word32 r0_16
	word32 r1_17
	word32 r2_18
	word32 r3_19
	word32 r6_20
	word32 r7_21
	vListInsert(r0, Mem0[Mem0[0x00000FF4:word32] + 4:word32] + 0x00000038, r1, r5, out r0_16, out r1_17, out r2_18, out r3_19, out r6_20, out r7_21)
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000FF0_thunk_prvAddCurrentTaskToDelayedList.isra.0:
	word32 r1_27
	word32 r2_28
	word32 r4_29
	word32 r5_30
	word32 r6_31
	word32 r7_32
	word32 sp_33
	word32 lr_34
	prvAddCurrentTaskToDelayedList.isra.0(r1, out r1_27, out r2_28, out r4_29, out r5_30, out r6_31, out r7_32, out sp_33, out lr_34)
	return r5_30
// DataOut: cpsr r5 r6
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r2:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> -8(fp):r4 -4(fp):lr

vTaskPlaceOnEventList_exit:
// DataOut: r5 r6
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r5:<invalid> r6:<invalid> r2:<invalid> r7:<invalid> -8(fp):r4 -4(fp):lr



word32 vTaskPlaceOnUnorderedEventList(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut: r1
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved: lr r3 r4 r5 sp
vTaskPlaceOnUnorderedEventList_entry:
// DataOut: cpsr d24 d9 r0 r1 r10 r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000FF8:
	word32 r3_14 = Mem0[0x00001018:word32]
	word32 r3_18 = Mem0[r3_14 + 4:word32]
	Mem19[Mem0[r3_14 + 4:word32] + 56:word32] = r1 | 0x80000000
	word32 r3_22
	vListInsertEnd(r0, r3_18 + 0x00000038, out r3_22)
// DataOut: cpsr d24 d9 r0 r10
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001012_thunk_fn00001016:
	word32 r1_30
	word32 r2_31
	word32 r4_32
	word32 r6_33
	word32 r7_34
	word32 lr_35
	fn00001016(r2, out r1_30, out r2_31, out r4_32, out r6_33, out r7_34, out lr_35)
	return r1_30
// DataOut: cpsr d24 d9 r1 r10
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:r3 r1:<invalid> r5:r5 r0:r2 lr:lr r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

vTaskPlaceOnUnorderedEventList_exit:
// DataOut: r1
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> lr:<invalid> r2:<invalid> r6:<invalid> r7:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



word32 fn00001014(word32 r0, word32 r7, ptr32 & r2Out, ptr32 & r4Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r7
// LiveOut: lr r0 r2 r4 r6 r7
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved: sp
l00001014:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00001014_entry:
// DataOut: cpsr d13 d24 fp r0 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001014:
	word32 r0_4 = r0 & r7
// DataOut: cpsr d13 d24 fp r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001014_thunk_fn00001016:
	word32 r1_6
	word32 r2_7
	word32 r4_8
	word32 r6_9
	word32 r7_10
	word32 lr_11
	return fn00001016(r0_4, out r1_6, out r2_7, out r4_8, out r6_9, out r7_10, out lr_11)
// DataOut: cpsr d13 d24 fp lr r0 r2 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 & r7

fn00001014_exit:
// DataOut: lr r0 r2 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r2:<invalid> r1:<invalid> r3:<invalid> lr:<invalid> r7:<invalid>



word32 fn00001016(word32 r0, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r4Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut: lr r0 r1 r2 r4 r6 r7
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved: sp
l00001016:
// DataOut: cpsr d13 d24 fp r0 r10
// DataOut (flags): 
// SymbolicIn:

l00001016_thunk_prvAddCurrentTaskToDelayedList.isra.0:
	r0 = prvAddCurrentTaskToDelayedList.isra.0(r0, out r1, out r2, out r4, out r5, out r6, out r7, out sp, out lr)
	return r0
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r4 r6 r7
// DataOut (flags): 
// SymbolicIn:

fn00001016_entry:
	def fp
	def r0
	def r1Out
	def r2Out
	def r4Out
	def r6Out
	def r7Out
	def lrOut
// DataOut: cpsr d13 d24 fp r0 r10
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001016:
	sp_1 = fp
// DataOut: cpsr d13 d24 fp r0 r10
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001016_thunk_prvAddCurrentTaskToDelayedList.isra.0:
	r0_11 = prvAddCurrentTaskToDelayedList.isra.0(r0, out r1_3, out r2_4, out r4_5, out r5_6, out r6_7, out r7_8, out sp_9, out lr_10)
	return r0_11
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

fn00001016_exit:
	r1_12 = PHI(r1_3, r1)
	r2_13 = PHI(r2_4, r2)
	r4_14 = PHI(r4_5, r4)
	r5_15 = PHI(r5_6, r5)
	r6_16 = PHI(r6_7, r6)
	r7_17 = PHI(r7_8, r7)
	sp_18 = PHI(sp_9, sp)
	lr_19 = PHI(lr_10, lr)
	r0_20 = PHI(r0_11, r0)
	use r1_12 (=> r1Out)
	use r2_13 (=> r2Out)
	use r4_14 (=> r4Out)
	use r6_16 (=> r6Out)
	use r7_17 (=> r7Out)
	use lr_19 (=> lrOut)
// DataOut: lr r0 r1 r2 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r3:<invalid> lr:<invalid> r7:<invalid>



word32 xTaskRemoveFromEventList(word32 r0, ptr32 & r1Out, ptr32 & r2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut: r0 r1 r2
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xTaskRemoveFromEventList_entry:
// DataOut: cpsr d13 d24 fp lr r0 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000101C:
	word32 r0_26
	word32 r4_18 = Mem0[0x0000107C:word32]
	word32 r5_19 = Mem0[Mem0[r0 + 12:word32] + 12:word32]
	uxListRemove(r5_19 + 0x00000038)
	branch Mem0[r4_18 + 140:word32] != 0x00000000 l00001070
// DataOut: cpsr d13 d24 fp lr r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001070:
	word32 r3_64
	vListInsertEnd(r4_18 + 0x00000058, r5_19 + 0x00000038, out r3_64)
	word32 r1_62
	*r1Out = r5_19 + 0x00000038
	r0_26 = r4_18 + 0x00000058
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r2:<invalid> r1:0x00000000 -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001034:
	uxListRemove(r5_19 + 0x00000024)
	word32 r0_50 = Mem0[r5_19 + 76:word32]
	Mem59[r4_18 + 124:word32] = 0x00000001 << r0_50 | Mem0[r4_18 + 124:word32]
	r0_26 = r4_18 + 0x00000008 + r0_50 * 0x00000014
	word32 r3_60
	vListInsertEnd(r0_26, r5_19 + 0x00000024, out r3_60)
	word32 r1_57
	*r1Out = r5_19 + 0x00000024
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r2:<invalid> r1:0x00000000 -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000105C:
	word32 r2_30 = Mem0[r5_19 + 76:word32]
	*r2Out = r2_30
	branch r2_30 <=u Mem0[Mem0[r4_18 + 4:word32] + 76:word32] l00001068
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r7:<invalid> r2:<invalid> r1:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001066_1:
	r0_26 = 0x00000001
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r7:<invalid> r2:<invalid> r1:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001068:
	Mem35[r4_18 + 144:word32] = r0_26
	return 0x00000000
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r7:<invalid> r2:<invalid> r1:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

xTaskRemoveFromEventList_exit:
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 r4:r4 r5:r5 r6:r6 r0:0x00000000 r7:r7 r2:<invalid> r1:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



word32 xTaskRemoveFromUnorderedEventList(word32 r0, word32 r1, ptr32 & r4Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut: r1 r4 sp
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved:
xTaskRemoveFromUnorderedEventList_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001080:
	word32 r6_18 = Mem0[r0 + 12:word32]
	Mem21[r0:word32] = r1 | 0x80000000
	uxListRemove(r0)
	word32 r4_24 = Mem21[0x000010D4:word32]
// DataOut: cpsr r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001094_thunk_fn00001096:
	word32 r1_25
	word32 r2_26
	word32 r3_27
	word32 r4_28
	word32 r5_29
	word32 r6_30
	word32 r7_31
	word32 sp_32
	word32 lr_33
	fn00001096(r4_24, 0x00000001, r6_18, r6_18 + 0x00000024, out r1_25, out r2_26, out r3_27, out r4_28, out r5_29, out r6_30, out r7_31, out sp_32, out lr_33)
	return r1_25
// DataOut: cpsr r1 r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:0x00000001 r6:<invalid> r1:<invalid> r7:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

xTaskRemoveFromUnorderedEventList_exit:
// DataOut: r1 r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r7:<invalid> r4:<invalid> r0:0x00000000 r3:<invalid> lr:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



word32 fn00001096(word32 r4, word32 r5, word32 r6, word32 r7, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & spOut, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r4 r5 r6 r7
// LiveOut: lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved:
fn00001096_entry:
// DataOut: cpsr d13 d24 fp r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(32)

l00001096:
	uxListRemove(r7)
	word32 r3_7 = Mem0[r6 + 76:word32]
	word32 lr_9 = Mem0[r4 + 124:word32]
	*lrOut = lr_9
	Mem17[r4 + 124:word32] = r5 << r3_7 | lr_9 << 0x00000000
	word32 r3_18
	vListInsertEnd(r4 + 0x00000008 + r3_7 * 0x00000014, r7, out r3_18)
	word32 r1_16
	*r1Out = r7
	word32 r2_21 = Mem17[r6 + 76:word32]
	*r2Out = r2_21
	branch r2_21 <=u Mem17[Mem17[r4 + 4:word32] + 76:word32] l000010CA
// DataOut: cpsr d13 d24 fp lr r1 r10 r2 r4 r5 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000010C8_1:
// DataOut: cpsr d13 d24 fp lr r1 r10 r2 r4 r5 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r0:<invalid> r3:<invalid> lr:<invalid> r2:<invalid> r1:r7

l000010CA:
	Mem25[r4 + 144:word32] = r5
	word32 r3_27
	*r3Out = Mem25[v3:word32]
	word32 r4_28
	*r4Out = Mem25[v3 + 4:word32]
	word32 r5_29
	*r5Out = Mem25[v3 + 8:word32]
	word32 r6_30
	*r6Out = Mem25[v3 + 12:word32]
	word32 r7_31
	*r7Out = Mem25[v3 + 16:word32]
	word32 sp_32
	*spOut = v3 + 24
	return 0x00000000
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r0:<invalid> r3:<invalid> lr:<invalid> r2:<invalid> r1:r7

fn00001096_exit:
// DataOut: lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 + 24 r0:0x00000000 r3:<invalid> lr:<invalid> r2:<invalid> r1:r7 r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid>



void vTaskSwitchContext()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 sp
// Preserved: sp
vTaskSwitchContext_entry:
// DataOut: cpsr d24 d9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000010D8:
	word32 r2_3 = Mem0[0x0000111C:word32]
	word32 r3_4 = Mem0[r2_3 + 140:word32]
	branch r3_4 != 0x00000000 l00001112
// DataOut: cpsr d24 d9 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001112:
	Mem18[r2_3 + 144:word32] = 0x00000001
	return
// DataOut: cpsr d24 d9
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

l000010E0:
	Mem8[r2_3 + 144:word32] = r3_4
	word32 r3_12 = 0x0000001F - (uint32) ((byte) __clz(Mem8[r2_3 + 124:word32]))
// DataOut: cpsr d24 d9 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

l000010F0_thunk_fn000010F4:
	word32 r1_14
	word32 r3_15
	fn000010F4(r2_3, r3_12 * 0x00000005, out r1_14, out r3_15)
	return
// DataOut: cpsr d24 d9
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

vTaskSwitchContext_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid>



word32 fn000010F4(word32 r2, word32 r3, ptr32 & r1Out, ptr32 & r3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r2 r3
// LiveOut: r0 r1 r3
// Trashed: NZCV r0 r1 r3 sp
// Preserved: sp
l000010F4:
	r3 = r3 << 2
	r0 = r2 + r3
	r3 = r0
	r1 = Mem0[r0 + 12:word32]
	r3 = r3 + 0x00000010
	r1 = Mem0[r1 + 4:word32]
	NZCV = cond(r1 - r3)
	NZC = NZCV (alias)
	Z = NZCV (alias)
	Mem0[r0 + 12:word32] = r1
	branch Test(NE,Z) l00001108
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): Z
// SymbolicIn:

l00001106_thunk_fn00001108:
	r3 = fn00001108(r0, r1, r2)
	return r0
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn:

l00001106_1:
	r1 = Mem0[r1 + 4:word32]
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): Z
// SymbolicIn:

l00001106_thunk_fn00001108:
	r3 = fn00001108(r0, r1, r2)
	return r0
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn:

fn000010F4_entry:
	def fp
	def r3
	def r2
	def Mem0
	def r1Out
	def r3Out
// DataOut: cpsr d24 d9 fp lr r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000010F4:
	sp_1 = fp
	r3_3 = r3 << 2
	r0_5 = r2 + r3_3
	r3_6 = r0_5
	r1_8 = Mem0[r0_5 + 12:word32]
	r3_9 = r3_6 + 0x00000010
	r1_10 = Mem0[r1_8 + 4:word32]
	NZCV_11 = cond(r1_10 - r3_9)
	NZC_12 = NZCV_11 (alias)
	Z_13 = NZCV_11 (alias)
	Mem14[r0_5 + 12:word32] = r1_10
	branch r1_10 != r3_9 l00001106_thunk_fn00001108
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00001106_thunk_fn00001108:
	r3_21 = fn00001108(r0_5, r1_10, r2)
	return r0_5
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r2 + (r3 << 6) + 0x00000010 r0:r2 + (r3 << 4) r1:<invalid>

l00001106_1:
	r1_19 = Mem14[r1_10 + 4:word32]
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp r3:r2 + (r3 << 6) + 0x00000010 r0:r2 + (r3 << 4) r1:<invalid>

l00001106_thunk_fn00001108:
	r3_20 = fn00001108(r0_5, r1_19, r2)
	return r0_5
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r2 + (r3 << 6) + 0x00000010 r0:r2 + (r3 << 4) r1:<invalid>

fn000010F4_exit:
	r1_15 = PHI(r1_10, r1_19, r1, r1)
	r3_16 = PHI(r3_21, r3_20, r3, r3)
	use r1_15 (=> r1Out)
	use r3_16 (=> r3Out)
// DataOut: r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r0:r2 + (r3 << 4) r1:<invalid>



word32 fn00001108(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z r0 r1 r2
// LiveOut: r3
// Trashed: r3 sp
// Preserved:
fn00001108_entry:
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00001108:
	word32 r3_4 = Mem0[r1 + 12:word32]
	branch Z l0000110E
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000110C_1:
	Mem8[r0 + 12:word32] = r1
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid>

l0000110E:
	Mem6[r2 + 4:word32] = r3_4
	return r3_4
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid>

fn00001108_exit:
// DataOut: r3
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid>



word32 uxTaskResetEventItemValue()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r0
// Trashed: r0 r1 r2 r3
// Preserved: sp
uxTaskResetEventItemValue_entry:
// DataOut: cpsr d24 d9 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001120:
	word32 r3_3 = Mem0[0x00001134:word32]
	word32 r0_7 = Mem0[Mem0[r3_3 + 4:word32] + 56:word32]
	Mem10[Mem0[r3_3 + 4:word32] + 56:word32] = 0x00000002 - Mem0[Mem0[r3_3 + 4:word32] + 76:word32]
	return r0_7
// DataOut: cpsr d24 d9 r0 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

uxTaskResetEventItemValue_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid> r2:<invalid> r0:<invalid>



word32 xTaskGetCurrentTaskHandle()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r0
// Trashed: r0 r3
// Preserved: sp
xTaskGetCurrentTaskHandle_entry:
// DataOut: cpsr lr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001138:
	return Mem0[Mem0[0x00001140:word32] + 4:word32]
// DataOut: cpsr lr r0 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

xTaskGetCurrentTaskHandle_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



word32 vTaskSetTimeOutState(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut: r3
// Trashed: r2 r3
// Preserved: sp
vTaskSetTimeOutState_entry:
// DataOut: cpsr d24 d9 lr r0 r10 r4 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001144:
	word32 r3_3 = Mem0[0x00001154:word32]
	word32 r2_4 = Mem0[r3_3 + 148:word32]
	word32 r3_5 = Mem0[r3_3 + 128:word32]
// DataOut: cpsr d24 d9 lr r0 r10 r2 r3 r4 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000114C:
	Mem6[r0:word32] = r2_4
	Mem8[r0 + 4:word32] = r3_5
	return r3_5
// DataOut: cpsr d24 d9 lr r10 r3 r4 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

vTaskSetTimeOutState_exit:
// DataOut: r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>



word32 xTaskCheckForTimeOut(word32 r0, word32 r1, word32 cpsr, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut: r0 r3 r4 r5 r6 sp
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 sp
// Preserved:
xTaskCheckForTimeOut_entry:
// DataOut: cpsr d24 d9 lr r0 r1 r10 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001158:
	word32 r0_16
	word32 r2_17
	vPortEnterCritical(cpsr, out r0_16, out r2_17)
	word32 r3_20 = Mem0[0x000011A8:word32]
	word32 r5_22 = Mem0[r3_20 + 128:word32]
	word32 r0_24 = Mem0[r0 + 4:word32]
	branch Mem0[r0:word32] == Mem0[r3_20 + 148:word32] l00001178
// DataOut: cpsr d24 d9 lr r0 r10 r3 r4 r5 r6 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001174:
	branch r5_22 >=u r0_24 l0000119C
// DataOut: cpsr d24 d9 lr r0 r10 r3 r4 r5 r6 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r3:<invalid> r1:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00001178:
	word32 r2_55 = Mem0[r1:word32]
	branch r5_22 - r0_24 >=u r2_55 l0000119C
// DataOut: cpsr d24 d9 lr r0 r10 r2 r3 r4 r5 r6 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r3:<invalid> r1:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000119C:
// DataOut: cpsr d24 d9 lr r10 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r3:<invalid> r1:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000119C_thunk_fn0000119E:
	word32 r2_48
	word32 r3_49
	word32 r4_50
	word32 r5_51
	word32 r6_52
	word32 sp_53
	return fn0000119E(r3_20, cpsr, out r2_48, out r3_49, out r4_50, out r5_51, out r6_52, out sp_53)
// DataOut: cpsr d24 d9 lr r0 r10 r3 r4 r5 r6 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r3:<invalid> r1:<invalid> r5:0x00000001 r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00001180:
	word32 r1_61 = Mem0[r3_20 + 148:word32]
	word32 r3_62 = Mem0[r3_20 + 128:word32]
	Mem65[r1:word32] = r2_55 - r5_22 + r0_24
	Mem66[r0:word32] = r1_61
	Mem67[r0 + 4:word32] = r3_62
	word32 r1_68
	word32 r2_69
	word32 r3_70
	word32 sp_71
	vPortExitCritical(r3_62, cpsr, out r1_68, out r2_69, out r3_70, out sp_71)
	word32 r4_74
	*r4Out = Mem67[sp_71:word32]
	word32 r5_75
	*r5Out = Mem67[sp_71 + 4:word32]
	word32 r6_76
	*r6Out = Mem67[sp_71 + 8:word32]
	word32 sp_77
	*spOut = sp_71 + 16
	return 0x00000000
// DataOut: cpsr d24 d9 lr r0 r10 r3 r4 r5 r6 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r3:<invalid> r1:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

xTaskCheckForTimeOut_exit:
// DataOut: r0 r3 r4 r5 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r6:<invalid> r3:<invalid> r1:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



word32 fn0000119E(word32 r3, word32 cpsr, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r3
// LiveOut: r0 r2 r3 r4 r5 r6 sp
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 sp
// Preserved:
l0000119E:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000119E_entry:
// DataOut: cpsr d24 d9 fp lr r10 r3 r5 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000119E:
	word32 r1_4
	word32 r2_5
	word32 r3_6
	word32 sp_7
	vPortExitCritical(r3, cpsr, out r1_4, out r2_5, out r3_6, out sp_7)
	word32 r4_12
	*r4Out = Mem0[sp_7:word32]
	word32 r5_13
	*r5Out = Mem0[sp_7 + 4:word32]
	word32 r6_14
	*r6Out = Mem0[sp_7 + 8:word32]
	word32 sp_15
	*spOut = sp_7 + 16
	return r5
// DataOut: cpsr d24 d9 fp lr r0 r10 r2 r3 r4 r5 r6 r7 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0000119E_exit:
// DataOut: r0 r2 r3 r4 r5 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:r5 r4:<invalid> r5:<invalid> r6:<invalid> r2:<invalid> r3:<invalid> r1:<invalid>



word32 vTaskMissedYield()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r2
// Trashed: r2 r3
// Preserved: sp
vTaskMissedYield_entry:
// DataOut: cpsr d24 d9 fp lr r0 r10 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

l000011AC:
	Mem5[Mem0[0x000011B8:word32] + 144:word32] = 0x00000001
	return 0x00000001
// DataOut: cpsr d24 d9 fp lr r0 r10 r2 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

vTaskMissedYield_exit:
// DataOut: r2
// DataOut (flags): 
// SymbolicIn: sp:fp r2:0x00000001 r3:<invalid>



void vTaskPriorityInherit(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r3 r4 r5 r6 r7 sp
vTaskPriorityInherit_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000011BC:
	branch r0 == 0x00000000 l00001246
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001246:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000011C0:
	word32 r4_40 = Mem0[0x00001248:word32]
	word32 r3_41 = Mem0[r0 + 76:word32]
	branch r3_41 >=u Mem0[Mem0[r4_40 + 4:word32] + 76:word32] l000011F4
// DataOut: r0 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l000011CE:
	branch Mem0[r0 + 56:word32] < 0x00000000 l000011DE
// DataOut: r0 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000011D4:
	Mem108[r0 + 56:word32] = 0x00000002 - Mem0[Mem0[r4_40 + 4:word32] + 76:word32]
// DataOut: r0 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000011DE:
	word32 r5_62 = Mem0[0x0000124C:word32]
	branch Mem0[r0 + 52:word32] == r5_62 + r3_41 * 0x00000014 l000011F6
// DataOut: r0 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000011F6:
	branch uxListRemove(r0 + 0x00000024) != 0x00000000 l00001220
// DataOut: r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> r5:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001204:
	word32 r2_96 = Mem0[r0 + 76:word32]
	branch Mem0[r4_40 + r2_96 * 0x00000014 + 8:word32] != 0x00000000 l00001220
// DataOut: r2 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> r5:<invalid> r7:r0 + 0x00000024 r6:r0 r0:<invalid> r1:0x00000000 -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001212:
	Mem104[r4_40 + 124:word32] = Mem0[r4_40 + 124:word32] & ~((0x00000001 << r2_96) << 0x00000000)
// DataOut: r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> r5:<invalid> r7:r0 + 0x00000024 r6:r0 r0:<invalid> r1:0x00000000 -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001220:
	word32 r2_78 = Mem0[Mem0[r4_40 + 4:word32] + 76:word32]
	word32 r3_82 = 0x00000001 << r2_78 | Mem0[r4_40 + 124:word32] << 0x00000000
	Mem84[r0 + 76:word32] = r2_78
	Mem86[r4_40 + 124:word32] = r3_82
	word32 r0_85 = r5_62 + r2_78 * 0x00000014
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> r5:<invalid> r7:r0 + 0x00000024 r6:r0 r0:<invalid> r1:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001242_thunk_vListInsertEnd:
	word32 r3_94
	vListInsertEnd(r0_85, r0 + 0x00000024, out r3_94)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:r3 r2:<invalid> r5:r5 r7:r7 r6:r6 r0:<invalid> r1:r0 + 0x00000024 lr:lr -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000011EE:
	Mem70[r0 + 76:word32] = Mem0[Mem0[r4_40 + 4:word32] + 76:word32]
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> r5:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000011F4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> r5:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

vTaskPriorityInherit_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r2:<invalid> r5:r5 r6:r6 r7:r7 r0:<invalid> r1:r0 + 0x00000024 lr:lr -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



word32 xTaskPriorityDisinherit(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut: r0
// Trashed: NZCV lr r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xTaskPriorityDisinherit_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001250:
	branch r0 == 0x00000000 l000012C8
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000012C8:
	return 0x00000000
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001254:
	word32 r1_37 = Mem0[r0 + 76:word32]
	word32 r3_38 = Mem0[r0 + 92:word32]
	word32 r2_39 = Mem0[r0 + 88:word32]
	Mem43[r0 + 92:word32] = r3_38 - 0x00000001
	branch r1_37 == r2_39 l00001266
// DataOut: cpsr r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001264:
	branch r3_38 == 0x00000001 l0000126A
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r1:<invalid> r3:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000126A:
	word32 r2_55
	branch uxListRemove(r0 + 0x00000024) != 0x00000000 l00001298
// DataOut: cpsr r4 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r1:<invalid> r3:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001298:
	r2_55 = Mem43[0x000012CC:word32]
// DataOut: cpsr r2 r4 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r1:0x00000000 r3:<invalid> r2:<invalid> r7:r0 + 0x00000024 r4:r0 r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001278:
	word32 r1_78 = Mem43[r0 + 76:word32]
	r2_55 = Mem43[0x000012CC:word32]
	branch Mem43[r2_55 + r1_78 * 0x00000014 + 8:word32] != 0x00000000 l0000129A
// DataOut: cpsr r1 r2 r4 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r1:0x00000000 r3:<invalid> r2:<invalid> r7:r0 + 0x00000024 r4:r0 r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001288:
	Mem87[r2_55 + 124:word32] = Mem43[r2_55 + 124:word32] & ~((0x00000001 << r1_78) << 0x00000000)
// DataOut: cpsr r2 r4 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r1:<invalid> r3:<invalid> r2:<invalid> r7:r0 + 0x00000024 r4:r0 r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000129A:
	word32 r3_57 = Mem43[r0 + 88:word32]
	word32 lr_58 = Mem43[r2_55 + 124:word32]
	word32 r0_59 = Mem43[0x000012D0:word32]
	Mem62[r0 + 76:word32] = r3_57
	Mem67[r0 + 56:word32] = 0x00000002 - r3_57
	Mem68[r2_55 + 124:word32] = 0x00000001 << r3_57 | lr_58 << 0x00000000
	word32 r3_69
	vListInsertEnd(r0_59 + r3_57 * 0x00000014, r0 + 0x00000024, out r3_69)
	return 0x00000001
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r1:<invalid> r3:<invalid> r2:<invalid> r7:r0 + 0x00000024 r4:r0 r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001266:
	return 0x00000000
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r1:<invalid> r3:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

xTaskPriorityDisinherit_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:r3 r2:<invalid> r4:r4 r5:r5 r6:r6 r7:r7 lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



word32 pvTaskIncrementMutexHeldCount()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
pvTaskIncrementMutexHeldCount_entry:
// DataOut: cpsr d24 d9 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l000012D4:
	word32 r3_3 = Mem0[0x000012E8:word32]
	branch Mem0[r3_3 + 4:word32] == 0x00000000 l000012E2
// DataOut: cpsr d24 d9 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l000012DA:
	word32 r1_11 = Mem0[r3_3 + 4:word32]
	Mem15[r1_11 + 92:word32] = Mem0[r1_11 + 92:word32] + 0x00000001
// DataOut: cpsr d24 d9 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l000012E2:
	return Mem0[r3_3 + 4:word32]
// DataOut: cpsr d24 d9 r0 r4
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r1:<invalid>

pvTaskIncrementMutexHeldCount_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid>



void prvRestoreContextOfFirstTask(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
prvRestoreContextOfFirstTask_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l000012F0:
	__msr(cpsr, Mem0[Mem0[Mem0[0x00001724:word32]:word32]:word32])
	word32 r1_8 = Mem0[Mem0[0x00001330:word32]:word32]
	word32 r0_9 = Mem0[r1_8:word32]
	word32 r2_11 = Mem0[0x00001728:word32]
	word32 r5_13 = Mem0[r1_8 + 0x00000008:word32]
	word32 r6_14 = Mem0[r1_8 + 0x0000000C:word32]
	word32 r7_15 = Mem0[r1_8 + 0x00000010:word32]
	word32 r8_16 = Mem0[r1_8 + 0x00000014:word32]
	word32 r9_17 = Mem0[r1_8 + 0x00000018:word32]
	word32 r10_18 = Mem0[r1_8 + 0x0000001C:word32]
	word32 fp_19 = Mem0[r1_8 + 0x00000020:word32]
	Mem21[r2_11:word32] = Mem0[r1_8 + 0x00000004:word32]
	Mem22[r2_11 + 4:word32] = r5_13
	Mem23[r2_11 + 8:word32] = r6_14
	Mem24[r2_11 + 12:word32] = r7_15
	Mem25[r2_11 + 16:word32] = r8_16
	Mem26[r2_11 + 20:word32] = r9_17
	Mem27[r2_11 + 24:word32] = r10_18
	Mem28[r2_11 + 28:word32] = fp_19
	__msr(cpsr, Mem28[r0_9:word32])
	__msr(cpsr, r0_9 + 36)
	__msr(cpsr, 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

prvRestoreContextOfFirstTask_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000000 r3:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> fp:<invalid> lr:~0x00000002



void prvSVCHandler(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
prvSVCHandler_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001334:
	word32 r3_5 = (word32) Mem0[Mem0[r0 + 24:word32] - 2:byte]
	branch r3_5 == 0x00000001 l00001360
// DataOut: cpsr r3
// DataOut (flags): C
// SymbolicIn: sp:fp

l00001360:
	Mem27[Mem0[0x00001378:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l0000133E:
	branch r3_5 <u 0x00000001 l00001354
// DataOut: cpsr r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00001354:
	word32 r2_21 = Mem0[0x00001374:word32]
	Mem24[r2_21:word32] = Mem0[r2_21:word32] | 0xBE000000
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l0000135E_thunk_prvRestoreContextOfFirstTask:
	prvRestoreContextOfFirstTask(cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l00001340:
	branch r3_5 != 0x00000002 l00001352
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00001352:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00001344:
	__msr(cpsr, __mrs(cpsr) & ~0x00000001)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

prvSVCHandler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r1:<invalid> r0:0x00000000 r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> fp:<invalid> lr:<invalid>



word32 pxPortInitialiseStack(word32 r0, word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2 r3
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 sp
pxPortInitialiseStack_entry:
// DataOut: cpsr d24 d9 r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000137C:
	word32 r3_10
	r3_10 = r3
	branch r3 != 0x00000001 l00001384
// DataOut: cpsr d24 d9 r0 r1 r2 r3
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00001382_1:
	r3_10 = 0x00000002
// DataOut: cpsr d24 d9 r0 r1 r2 r3
// DataOut (flags): Z
// SymbolicIn: sp:fp - 8 -8(fp):r4 -4(fp):r5

l00001384:
	branch r3 == 0x00000001 l00001390
// DataOut: cpsr d24 d9 r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:0x00000002 -8(fp):r4 -4(fp):r5

l0000138E_1:
	r3_10 = 0x00000003
// DataOut: cpsr d24 d9 r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:0x00000002 r5:0x01000000 r4:0x00000000 -8(fp):r4 -4(fp):r5

l00001390:
	Mem15[r0 - 32:word32] = r2
	Mem20[r0 + -8:word32] = r1 & ~0x00000001
	Mem21[r0 + -4:word32] = 0x01000000
	Mem22[r0 - 12:word32] = 0x00000000
	Mem23[r0 - 68:word32] = r3_10
	return r0 - 0x00000044
// DataOut: cpsr d24 d9 r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r5:0x01000000 r4:0x00000000 -8(fp):r4 -4(fp):r5

pxPortInitialiseStack_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r5:r5 r4:r4 r1:r1 & ~0x00000001 r2:r0 - 0x00000044 r0:r0 - 0x00000044 -8(fp):r4 -4(fp):r5



word32 xPortStartScheduler(word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 cpsr, ptr32 & r9Out, ptr32 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr fp r10 r5 r6 r7 r8 r9
// LiveOut: r10 r8 r9
// Trashed: NZCV fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: r4 r5 r6 sp
xPortStartScheduler_entry:
	*r9Out = r9
	*r10Out = r10
// DataOut: cpsr d24 d9 fp r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000013B0:
	word32 r3_3 = Mem0[0x000014E8:word32]
	word32 r1_12 = Mem0[0x000014EC:word32]
	Mem14[r3_3:word32] = Mem0[r3_3:word32] | 0x00FF0000
	Mem17[r3_3:word32] = Mem14[r3_3:word32] | 0xFF000000
	branch Mem17[r1_12:word32] == 0x00000800 l00001400
// DataOut: cpsr d24 d9 fp r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001400:
	word32 r2_212
	word32 r0_74 = Mem17[0x000014FC:word32]
	word32 r1_77 = Mem17[0x00001500:word32] - r0_74
	Mem81[Mem17[0x00001504:word32]:word32] = r0_74 | 0x00000010
	branch r1_77 <=u 0x00000020 l000014DE
// DataOut: cpsr d24 d9 fp r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l000014DE:
	r2_212 = Mem81[0x00001548:word32]
// DataOut: cpsr d24 d9 fp r0 r10 r2 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l00001412:
// DataOut: cpsr d24 d9 fp r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l0000141E:
	branch r1_77 >u 0x00000040 l00001424_thunk_fn00001618
// DataOut: cpsr d24 d9 fp r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp - 12 r3:0x00000040 r2:0x00000005 r1:<invalid> r0:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l00001424_thunk_fn00001618:
	word32 r5_213
	word32 r6_214
	word32 r8_215
	fn00001618(r0_74, r1_77, r5, r6, r7, r8, cpsr, out r5_213, out r6_214, out r8_215)
	return r8_215
// DataOut: d24 d9 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:0x00000080 r2:0x00000005 r1:<invalid> r0:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l00001426:
	r2_212 = Mem81[0x00001508:word32] | 0x0000000A
// DataOut: cpsr d24 d9 fp r0 r10 r2 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:0x00000080 r2:0x00000005 r1:<invalid> r0:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l0000142C:
	word32 r2_202
	word32 r1_87 = Mem81[0x0000150C:word32] - r0_74
	word32 r3_88 = Mem81[0x00001504:word32]
	Mem92[Mem81[0x00001510:word32]:word32] = r2_212
	Mem93[r3_88:word32] = r0_74 | 0x00000011
	branch r1_87 <=u 0x00000020 l000014DA
// DataOut: cpsr d24 d9 fp r1 r10 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l000014DA:
	r2_202 = Mem93[0x00001544:word32]
// DataOut: cpsr d24 d9 fp r10 r2 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l00001440:
// DataOut: cpsr d24 d9 fp r1 r10 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l0000144C:
	branch r1_87 >u 0x00000040 l00001646_in_vTaskStartScheduler
// DataOut: cpsr d24 d9 fp r10 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:0x00000040 r2:0x00000005 r1:<invalid> r0:<invalid> r4:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l00001646_in_vTaskStartScheduler:
	return r8
// DataOut: d24 d9 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:0x00000080 r2:0x00000005 r1:<invalid> r0:<invalid> r4:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l00001454:
	r2_202 = Mem93[0x00001514:word32] | 0x0000000A
// DataOut: cpsr d24 d9 fp r10 r2 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:0x00000080 r2:0x00000005 r1:<invalid> r0:<invalid> r4:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l0000145A:
	word32 r0_106
	word32 r3_95 = Mem93[0x00001518:word32]
	word32 r5_97 = Mem93[0x00001510:word32]
	word32 r0_98 = Mem93[0x00001504:word32]
	word32 r1_99 = Mem93[0x0000151C:word32] - r3_95
	Mem103[r5_97:word32] = r2_202
	Mem104[r0_98:word32] = r3_95 | 0x00000012
	branch r1_99 <=u 0x00000020 l000014E2
// DataOut: cpsr d24 d9 fp r1 r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l000014E2:
	r0_106 = Mem104[0x0000154C:word32]
// DataOut: cpsr d24 d9 r0 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l00001470:
// DataOut: cpsr d24 d9 fp r1 r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l0000147C:
	branch r1_99 >u 0x00000040 l00001676
// DataOut: cpsr d24 d9 fp r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:0x00000040 r2:0x00000005 r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l00001676:
// DataOut: cpsr d24 d9 fp r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:0x00000080 r2:0x00000005 r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l00001686_thunk_xPortPendSVHandler:
	word32 r9_192
	word32 r10_193
	return xPortPendSVHandler(r3_95 | 0x00000012, r5_97, r6, 0x00000000, r8, r9, r10, fp, cpsr, out r9_192, out r10_193)
// DataOut: d24 d9 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:0x00000080 r2:0x00000005 r1:0x00000000 r0:0x00000000 r4:<invalid> r5:<invalid> r7:0x00000000 -12(fp):r4 -8(fp):r5 -4(fp):r6

l00001484:
	r0_106 = Mem104[0x00001520:word32] | 0x0000000A
// DataOut: cpsr d24 d9 r0 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:0x00000080 r2:0x00000005 r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l0000148A:
	word32 r3_121
	word32 r4_110 = Mem104[0x00001504:word32]
	word32 r5_111 = Mem104[0x00001524:word32]
	word32 r1_112 = Mem104[0x00001528:word32]
	Mem113[Mem104[0x00001510:word32]:word32] = r0_106
	Mem114[r4_110:word32] = r5_111
	branch 0xFFFFFFE7 == 0x00000000 l000014CA
// DataOut: cpsr d24 d9 r1 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l000014CA:
	r3_121 = Mem114[0x00001534:word32]
// DataOut: cpsr d24 d9 r10 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:0x00000006 r2:0x00000080 r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l000014A4:
	branch 0x00000080 <=u r1_112 l0000169A
// DataOut: cpsr d24 d9 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:0x00000006 r2:0x00000080 r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6
// LocalsOut: fp(32)

l0000169A:
	__msr(cpsr, 0x000000BF)
	vTaskSwitchContext()
	__msr(cpsr, 0x00000000)
	word32 r1_143 = Mem114[Mem114[fp - 20:word32]:word32]
	word32 r0_144 = Mem114[r1_143:word32]
	word32 r2_146 = Mem114[0x00001728:word32]
	word32 r5_148 = Mem114[r1_143 + 0x00000008:word32]
	word32 r6_149 = Mem114[r1_143 + 0x0000000C:word32]
	word32 r7_150 = Mem114[r1_143 + 0x00000010:word32]
	word32 r8_151 = Mem114[r1_143 + 0x00000014:word32]
	word32 r9_152 = Mem114[r1_143 + 0x00000018:word32]
	word32 r10_153 = Mem114[r1_143 + 0x0000001C:word32]
	word32 fp_154 = Mem114[r1_143 + 0x00000020:word32]
	Mem156[r2_146:word32] = Mem114[r1_143 + 0x00000004:word32]
	Mem157[r2_146 + 4:word32] = r5_148
	Mem158[r2_146 + 8:word32] = r6_149
	Mem159[r2_146 + 12:word32] = r7_150
	Mem160[r2_146 + 16:word32] = r8_151
	Mem161[r2_146 + 20:word32] = r9_152
	Mem162[r2_146 + 24:word32] = r10_153
	Mem163[r2_146 + 28:word32] = fp_154
	word32 r8_170 = Mem163[r0_144 + 20:word32]
	word32 r9_171
	*r9Out = Mem163[r0_144 + 24:word32]
	word32 r10_172
	*r10Out = Mem163[r0_144 + 28:word32]
	__msr(cpsr, Mem163[r0_144:word32])
	__msr(cpsr, r0_144 + 36)
	return r8_170
// DataOut: d24 d9 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:0x00000006 r2:0x00000080 r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l000014A8:
	r3_121 = Mem114[0x0000152C:word32] | 0x0000000C
// DataOut: cpsr d24 d9 r10 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:0x00000006 r2:0x00000080 r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l000014AE:
	word32 r2_122 = Mem114[0x00001510:word32]
	word32 r1_123 = Mem114[0x00001530:word32]
	Mem124[r2_122:word32] = r3_121
	Mem127[r1_123:word32] = Mem124[r1_123:word32] | 0x00010000
	Mem130[r2_122 - 12:word32] = Mem127[r2_122 - 12:word32] | 0x00000005
// DataOut: cpsr d24 d9 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l000013CE:
	word32 r2_53 = Mem17[0x000014F4:word32]
	word32 r3_54 = Mem17[0x000014F8:word32]
	Mem55[Mem17[0x000014F0:word32]:word32] = 0x00004E1F
	Mem56[r2_53:word32] = 0x00000007
	Mem57[r3_54:word32] = 0x00000000
	__msr(cpsr, Mem57[Mem57[Mem57[0x00001724:word32]:word32]:word32])
	__cps_id()
	__cps_id()
	__dsb_sy()
	__isb_sy()
	__syscall(0x00000000)
	return r8
// DataOut: d24 d9 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

xPortStartScheduler_exit:
// DataOut: r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> r4:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> fp:<invalid> lr:<invalid> -20(fp):0x00000006 -16(fp):lr -12(fp):r4 -8(fp):r5 -4(fp):r6



void vPortEndScheduler()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
vPortEndScheduler_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001550:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

vPortEndScheduler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



word32 vPortStoreTaskMPUSettings(word32 r0, word32 r1, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 cpsr, word64 d13, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & spOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d13 r0 r1 r2 r3 r5 r6 r7 r8
// LiveOut: d24 r4 r5 r6 r8 r9 sp
// Trashed: NZCV d22 lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
vPortStoreTaskMPUSettings_entry:
	*d24Out = d24
	*r6Out = r6
	*r8Out = r8
	*r9Out = r9
// DataOut: cpsr d13 d24 r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001554:
	word32 sp_2
	*spOut = fp - 8
	branch r1 == 0x00000000 l000015DE
// DataOut: cpsr d13 d24 r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l000015DE:
	word32 r2_153
	word32 r3_146 = Mem0[0x00001668:word32]
	word32 r1_149 = Mem0[0x0000166C:word32] - r3_146
	Mem152[r0:word32] = r3_146 | 0x00000014
	branch r1_149 <=u 0x00000020 l0000165C
// DataOut: cpsr d13 d24 r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 -8(fp):r4 -4(fp):r5

l0000165C:
	r2_153 = Mem152[0x00001680:word32]
// DataOut: cpsr d24 d9 r0 r10 r2 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

l000015EE:
// DataOut: cpsr d13 d24 r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

l000015FA:
	branch 0x00000040 <u r1_149 l000017F4
// DataOut: cpsr d13 d24 r0 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:0x00000040 r1:<invalid> r2:0x00000005 -8(fp):r4 -4(fp):r5

l000017F4:
// DataOut: cpsr d13 r0 r10 r4 r5 r6 r7 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp - 8 r3:0x00000080 r1:<invalid> r2:0x00000005 -8(fp):r4 -4(fp):r5

l000017F4_thunk_fn000017F6:
	word32 r5_184
	word32 r6_185
	word32 r8_186
	word32 r9_187
	word64 d24_188
	return fn000017F6(r0, r0 << 12, r5, r6, r7, r8, cpsr, d13, out r5_184, out r6_185, out r8_186, out r9_187, out d24_188)
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:0x00000080 r1:<invalid> r2:0x00000005 r4:r0 << 12 -8(fp):r4 -4(fp):r5

l00001602:
	r2_153 = Mem152[0x00001660:word32] | 0x0000000A
// DataOut: cpsr d24 d9 r0 r10 r2 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:0x00000080 r1:<invalid> r2:0x00000005 -8(fp):r4 -4(fp):r5

l00001608:
	word32 r3_154 = Mem152[0x00001670:word32]
	word32 r1_157 = Mem152[0x00001674:word32] - r3_154
	Mem164[r0 + 4:word32] = r2_153
	Mem165[r0 + 8:word32] = r3_154 | 0x00000015
// DataOut: cpsr d24 d9 r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

l00001616_thunk_fn00001618:
	word32 r5_166
	word32 r6_167
	word32 r8_168
	return fn00001618(r0, r1_157, r5, r6, r7, r8, cpsr, out r5_166, out r6_167, out r8_168)
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l0000155A:
	branch r3 != 0x00000000 l000015B0
// DataOut: cpsr d13 d24 r0 r1 r10 r2 r3 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l000015B0:
	word32 r4_128
	Mem123[r0:word32] = r2 | 0x00000014
	branch r3 << 2 <=u 0x00000020 l00001654
// DataOut: cpsr d13 d24 r0 r1 r10 r3 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l00001654:
	r4_128 = Mem123[0x00001680:word32]
// DataOut: cpsr d24 d9 r0 r1 r10 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:r3 << 2 r2:r2 | 0x00000014 -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l000015BC:
// DataOut: cpsr d13 d24 r0 r1 r10 r3 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:r3 << 2 r2:r2 | 0x00000014 -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l000015C8:
	branch r3 << 2 >u 0x00000040 l000017C2
// DataOut: cpsr d13 d24 r0 r1 r10 r2 r3 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:r3 << 2 r2:0x00000040 r4:0x00000005 -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l000017C2:
// DataOut: cpsr d13 r0 r1 r10 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:r3 << 2 r2:0x00000080 r4:0x00000005 -8(fp):r4 -4(fp):r5

l000017C2_thunk_xEventGroupWaitBits:
	word32 r5_138
	word32 r6_139
	word32 r8_140
	word32 r9_141
	word32 sp_142
	word64 d24_143
	return xEventGroupWaitBits(r0, r1, 0x00000080, r3 << 2, cpsr, d13, out r5_138, out r6_139, out r8_140, out r9_141, out sp_142, out d24_143)
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:r3 << 2 r2:0x00000080 r4:0x00000005 -8(fp):r4 -4(fp):r5

l000015D0:
	r4_128 = Mem123[0x00001660:word32] | 0x0000000A
// DataOut: cpsr d24 d9 r0 r1 r10 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:r3 << 2 r2:0x00000080 r4:0x00000005 -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l000015D6:
	Mem129[r0 + 4:word32] = r4_128
// DataOut: cpsr d24 d9 r0 r1 r10 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l0000155C:
	word32 r4_44 = Mem0[r1 + 4:word32]
	branch r4_44 == 0x00000000 l000015A2
// DataOut: cpsr d24 d9 r0 r1 r10 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l000015A2:
	Mem117[r0 + 12:word32] = r4_44
	Mem118[r0 + 8:word32] = 0x00000015
// DataOut: cpsr d24 d9 r0 r1 r10 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:0x00000005 r4:<invalid> r3:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l00001562:
	word32 r3_102
	Mem88[r0 + 8:word32] = Mem0[r1:word32] | 0x00000015
	branch r4_44 <=u 0x00000020 l00001650
// DataOut: cpsr d24 d9 r0 r1 r10 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:0x00000005 r4:<invalid> r3:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l00001650:
	r3_102 = 0x00000008
// DataOut: cpsr d24 d9 r0 r1 r10 r3 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:0x00000005 r4:<invalid> r3:<invalid> r2:0x00000015 -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l00001570:
// DataOut: cpsr d24 d9 r0 r1 r10 r3 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:0x00000005 r4:<invalid> r3:<invalid> r2:0x00000015 -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l0000157C:
	branch r4_44 >u 0x00000040 l00001582_thunk_fn00001776
// DataOut: cpsr d24 d9 r0 r1 r10 r2 r3 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:0x00000005 r4:<invalid> r3:0x00000005 r2:0x00000040 -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l00001582_thunk_fn00001776:
	word32 r1_104
	word32 r3_105
	word32 r4_106
	word32 r5_107
	word32 r6_108
	word32 r7_109
	word32 r8_110
	word32 r9_111
	word32 lr_112
	fn00001776(r0, 0x00000080, 0x00000005, r4_44, cpsr, out r1_104, out r3_105, out r4_106, out r5_107, out r6_108, out r7_109, out r8_110, out r9_111, out lr_112)
	return r4_106
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:0x00000005 r4:<invalid> r3:0x00000005 r2:0x00000080 -8(fp):r4 -4(fp):r5

l00001584:
	r3_102 = 0x0000000A
// DataOut: cpsr d24 d9 r0 r1 r10 r3 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:0x00000005 r4:<invalid> r3:0x00000005 r2:0x00000080 -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l00001586:
	Mem96[r0 + 12:word32] = r3_102 | (Mem88[r1 + 8:word32] | 0x00000001)
// DataOut: cpsr d24 d9 r0 r1 r10 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:0x00000005 r4:<invalid> r3:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l00001590:
	branch true l0000175E_in_vPortStoreTaskMPUSettings
// DataOut: cpsr d24 d9 r1 r10 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:0x00000005 r4:<invalid> r3:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0004(32) Local -0008(32)

l0000175E_in_vPortStoreTaskMPUSettings:
	word32 r1_67
	word32 r2_68
	word32 r3_69
	word32 r4_70
	word32 r5_71
	word32 r6_72
	word32 r7_73
	word32 r8_74
	word32 r9_75
	word32 sp_76
	word32 lr_77
	xTaskResumeAll(r1 + 0x0000000C, cpsr, out r1_67, out r2_68, out r3_69, out r4_70, out r5_71, out r6_72, out r7_73, out r8_74, out r9_75, out sp_76, out lr_77)
	word32 sp_82
	*spOut = sp_76 + 8
	return Mem0[sp_76:word32]
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:0x00000006 r4:<invalid> r3:<invalid> r1:r1 + 0x0000000C r0:r0 + 0x00000008 r2:<invalid> -8(fp):r4 -4(fp):r5

l0000159E:
	word32 r5_56
	*r5Out = r5
	word32 sp_57
	*spOut = fp
	return r4
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:0x00000006 r4:<invalid> r3:<invalid> r1:r1 + 0x0000000C r0:r0 + 0x00000008 r2:<invalid> -8(fp):r4 -4(fp):r5

vPortStoreTaskMPUSettings_exit:
// DataOut: d24 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r6:<invalid> r7:<invalid> d22:<invalid> r8:<invalid> lr:<invalid> r9:<invalid> -8(fp):r4 -4(fp):r5



word32 fn00001618(word32 r0, word32 r1, word32 r5, word32 r6, word32 r7, word32 r8, word32 cpsr, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC cpsr r0 r1 r5 r6 r7 r8
// LiveOut: r4 r5 r6 r8
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 r7 r8 sp
// Preserved: sp
l00001618:
	branch Test(ULE,ZC) l00001658
// DataOut: cpsr d24 d9 r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn:

l00001618_thunk_fn00001658:
	r4 = fn00001658(r0, out r5, out sp)
	return r4
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn:

l00001618_thunk_fn0000161A:
	r4 = fn0000161A(r0, r1, r5, r6, r7, r8, cpsr, out r5, out r6, out r8, out sp)
	return r4
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn:

fn00001618_entry:
	def fp
	def ZC
	def r5Out
	def r6Out
	def r8Out
	def r0
	def r1
	def r5
	def r6
	def r7
	def r8
	def cpsr
// DataOut: cpsr d24 d9 r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001618:
	sp_1 = fp
	branch ZC l00001618_thunk_fn00001658
// DataOut: cpsr d24 d9 r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001618_thunk_fn00001658:
	r4_25 = fn00001658(r0, out r5_23, out sp_24)
	return r4_25
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001618_thunk_fn0000161A:
	r4_22 = fn0000161A(r0, r1, r5, r6, r7, r8, cpsr, out r5_18, out r6_19, out r8_20, out sp_21)
	return r4_22
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

fn00001618_exit:
	r5_3 = PHI(r5_23, r5_18, r5, r5)
	r6_4 = PHI(r6, r6_19, r6, r6)
	r8_5 = PHI(r8, r8_20, r8, r8)
	sp_6 = PHI(sp_24, sp_21, sp, sp)
	r4_7 = PHI(r4_25, r4_22, r4, r4)
	use r5_3 (=> r5Out)
	use r6_4 (=> r6Out)
	use r8_5 (=> r8Out)
// DataOut: r4 r5 r6 r8
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> r6:<invalid> r7:<invalid> r8:<invalid>



word32 fn0000161A(word32 r0, word32 r1, word32 r5, word32 r6, word32 r7, word32 r8, word32 cpsr, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r8Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r5 r6 r7 r8
// LiveOut: r4 r5 r6 r8 sp
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 r7 r8 sp
// Preserved:
fn0000161A_entry:
	*r6Out = r6
	*r8Out = r8
	*r5Out = r5
// DataOut: cpsr d24 d9 r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(32)

l0000161A:
	word32 sp_1
	*spOut = v3
// DataOut: cpsr d24 d9 r0 r1 r10 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001626:
	branch r1 >u 0x00000040 l00001820
// DataOut: cpsr d24 d9 r0 r10 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:0x00000005 r3:0x00000040

l00001820:
	Mem43[Mem0[0x00001870:word32]:word32] = 0x00000005
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr d24 d9 r10 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:0x00000005 r3:0x00000080

l0000182C:
	word32 r0_44 = uxTaskResetEventItemValue()
	word32 r3_45 = r0_44 << 6
	branch r0_44 << 6 >= 0x00000000 l00001844
// DataOut: cpsr d24 d9 r10 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:0x00000005 r3:<invalid>

l00001844:
	word32 r0_57
	word32 r2_58
	byte C_59 = vPortEnterCritical(cpsr, out r0_57, out r2_58)
	word32 r4_63 = Mem43[r6:word32]
	branch r7 != 0x00000000 l00001868
// DataOut: cpsr d24 d9 r10 r3 r4 r5 r6 r8 r9 sp
// DataOut (flags): C
// SymbolicIn: sp:v3 r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid>

l00001868:
	r3_45 = r5 & ~(r4_63 << 0x00000000)
	branch r3_45 != 0x00000000 l00001A5C
// DataOut: cpsr d24 d9 r10 r3 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid>

l00001A5C:
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid>

l00001AAC_thunk_fn00001AAE:
	fn00001AAE()
	return r4_63
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid>
// Terminates process

l0000186E:
// DataOut: cpsr d24 d9 r10 r3 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid>

l0000184C:
	r5 = r5 + r4_63 + C_59
	branch r5 == 0x00000000 l0000185C
// DataOut: cpsr d24 d9 r10 r3 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid>

l00001850:
	branch r8 == 0x00000000 l0000185C
// DataOut: cpsr d24 d9 r10 r3 r4 r5 r6 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid>

l00001856:
	Mem85[r6:word32] = r4_63 & ~(r5 << 0x00000000)
// DataOut: cpsr d24 d9 r10 r3 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid>

l0000185C:
	word32 r1_67
	word32 r2_68
	word32 r3_69
	word32 sp_70
	vPortExitCritical(r3_45, cpsr, out r1_67, out r2_68, out r3_69, out sp_70)
	word32 r5_74
	*r5Out = Mem43[sp_70 + 4:word32]
	word32 r6_75
	*r6Out = Mem43[sp_70 + 8:word32]
	word32 r8_77
	*r8Out = Mem43[sp_70 + 16:word32]
	word32 sp_78
	*spOut = sp_70 + 24
	return Mem43[sp_70:word32]
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid>

l00001836:
	word32 r5_51
	*r5Out = Mem43[v3 + 4:word32]
	word32 r6_52
	*r6Out = Mem43[v3 + 8:word32]
	word32 r8_54
	*r8Out = Mem43[v3 + 16:word32]
	word32 sp_55
	*spOut = v3 + 24
	return Mem43[v3:word32]
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid>

l0000162E:
// DataOut: cpsr d24 d9 r0 r10 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:0x00000005 r3:0x00000080

l00001630_thunk_fn00001658:
	word32 r5_32
	word32 sp_33
	return fn00001658(r0, out r5_32, out sp_33)
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:<invalid> r3:<invalid>

fn0000161A_exit:
// DataOut: r4 r5 r6 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid>



word32 fn00001658(word32 r0, ptr32 & r5Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut: r4 r5 sp
// Trashed: r1 r2 r3 r4 r5 sp
// Preserved:
fn00001658_entry:
// DataOut: cpsr d24 d9 r0 r10 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(32)

l00001658:
	word32 r2_3 = Mem0[0x00001684:word32]
// DataOut: cpsr d24 d9 r0 r10 r2 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001634:
	Mem7[r0 + 16:word32] = 0x00000016
	Mem9[r0 + 12:word32] = r2_3
	Mem10[r0 + 20:word32] = 0x00000000
	Mem11[r0 + 28:word32] = 0x00000000
	Mem12[r0 + 24:word32] = 0x00000017
	word32 r4_13 = Mem12[v3:word32]
	word32 r5_14
	*r5Out = Mem12[v3 + 4:word32]
	word32 sp_15
	*spOut = v3 + 8
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:<invalid>

l00001646:
	return r4_13
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 + 8 r2:<invalid> r4:<invalid> r3:0x00000000 r1:0x00000017 r5:<invalid>

fn00001658_exit:
// DataOut: r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 + 8 r2:<invalid> r4:<invalid> r3:0x00000000 r1:0x00000017 r5:<invalid>



word32 xPortPendSVHandler(word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 cpsr, ptr32 & r9Out, ptr32 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr fp r10 r4 r5 r6 r7 r8 r9
// LiveOut: r10 r8 r9
// Trashed: NZCV fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: lr sp
xPortPendSVHandler_entry:
// DataOut: cpsr d24 d9 fp r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001688:
	word32 r0_3 = __mrs(cpsr)
	word32 r2_6 = Mem0[Mem0[0x000016E0:word32]:word32]
	Mem8[r0_3 + -36:word32] = __mrs(cpsr)
	Mem10[r0_3 + -32:word32] = r4
	Mem12[r0_3 + -28:word32] = r5
	Mem14[r0_3 + -24:word32] = r6
	Mem16[r0_3 + -20:word32] = r7
	Mem18[r0_3 + -16:word32] = r8
	Mem20[r0_3 + -12:word32] = r9
	Mem22[r0_3 + -8:word32] = r10
	Mem24[r0_3 + -4:word32] = fp
	Mem26[r2_6:word32] = r0_3 - 36
// DataOut: cpsr d24 d9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000169A_in_xPortPendSVHandler:
	__msr(cpsr, 0x000000BF)
	vTaskSwitchContext()
	__msr(cpsr, 0x00000000)
	word32 r1_37 = Mem0[Mem0[fp - 8:word32]:word32]
	word32 r0_38 = Mem0[r1_37:word32]
	word32 r2_40 = Mem0[0x00001728:word32]
	word32 r5_42 = Mem0[r1_37 + 0x00000008:word32]
	word32 r6_43 = Mem0[r1_37 + 0x0000000C:word32]
	word32 r7_44 = Mem0[r1_37 + 0x00000010:word32]
	word32 r8_45 = Mem0[r1_37 + 0x00000014:word32]
	word32 r9_46 = Mem0[r1_37 + 0x00000018:word32]
	word32 r10_47 = Mem0[r1_37 + 0x0000001C:word32]
	word32 fp_48 = Mem0[r1_37 + 0x00000020:word32]
	Mem50[r2_40:word32] = Mem0[r1_37 + 0x00000004:word32]
	Mem51[r2_40 + 4:word32] = r5_42
	Mem52[r2_40 + 8:word32] = r6_43
	Mem53[r2_40 + 12:word32] = r7_44
	Mem54[r2_40 + 16:word32] = r8_45
	Mem55[r2_40 + 20:word32] = r9_46
	Mem56[r2_40 + 24:word32] = r10_47
	Mem57[r2_40 + 28:word32] = fp_48
	word32 r8_64 = Mem57[r0_38 + 20:word32]
	word32 r9_65
	*r9Out = Mem57[r0_38 + 24:word32]
	word32 r10_66
	*r10Out = Mem57[r0_38 + 28:word32]
	__msr(cpsr, Mem57[r0_38:word32])
	__msr(cpsr, r0_38 + 36)
	return r8_64
// DataOut: d24 d9 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid>

xPortPendSVHandler_exit:
// DataOut: r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> fp:<invalid> -8(fp):<invalid> -4(fp):lr



void xPortSysTickHandler(word32 r0, word32 r1, word32 r2, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r5 r6 r7 r8 r9
// Preserved: r4 sp
xPortSysTickHandler_entry:
// DataOut: cpsr r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000016E4:
	__mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r2_13
	word32 r4_14
	word32 r6_15
	word32 r7_16
	word32 sp_17
	word32 lr_18
	branch xTaskIncrementTick(r0, r1, r2, cpsr, out r2_13, out r4_14, out r6_15, out r7_16, out sp_17, out lr_18) == 0x00000000 l00001708
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001700:
	Mem27[Mem0[0x00001710:word32]:word32] = 0x10000000
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r6:<invalid> r0:<invalid> r7:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> r1:<invalid> lr:<invalid> -8(fp):r4 -4(fp):lr

l00001708:
	__msr(cpsr, r4_14)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r0:<invalid> r7:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> r1:<invalid> lr:<invalid> -8(fp):r4 -4(fp):lr

xPortSysTickHandler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r2:<invalid> r6:<invalid> r0:<invalid> r7:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> r1:<invalid> lr:<invalid> -8(fp):r4 -4(fp):lr



void vPortSVCHandler(word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr lr
// LiveOut:
// Trashed: NZCV fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
vPortSVCHandler_entry:
// DataOut: cpsr lr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001714:
	branch (lr & 0x00000004) != 0x00000000 l0000171E
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000171A_1:
	__mrs(cpsr)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000171E:
	word32 r0_6 = __mrs(cpsr)
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00001722_thunk_prvSVCHandler:
	prvSVCHandler(r0_6, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

vPortSVCHandler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> fp:<invalid> lr:<invalid>



word32 pvPortMalloc(word32 r0, word32 cpsr, ptr32 & r1Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & spOut, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut: lr r0 r1 r3 r4 r5 r6 r7 r8 r9 sp
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
pvPortMalloc_entry:
// DataOut: cpsr d13 d24 fp r0 r10
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000172C:
	word32 sp_2
	*spOut = fp - 8
	word32 r4_12 = r0
	branch r0 << 29 == 0x00000000 l00001738
// DataOut: cpsr d13 d24 fp r0 r10 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001734_1:
	r4_12 = r0 & ~0x00000007
// DataOut: cpsr d13 d24 fp r0 r10 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r3:r0 << 29 -8(fp):r4 -4(fp):lr

l00001738:
	vTaskSuspendAll()
	word32 r3_17 = Mem0[0x0000177C:word32]
	word32 r4_13 = r4_12 + 0x00000008
	branch Mem0[r3_17:word32] == 0x00000000 l00001770
// DataOut: cpsr d13 d24 fp r0 r10 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:r0 << 29 -8(fp):r4 -4(fp):lr

l00001770:
	word32 r2_54 = r3_17 + 0x0000000C & ~0x00000007
// DataOut: cpsr d13 d24 fp r0 r10 r2 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r2:<invalid> -8(fp):r4 -4(fp):lr

l00001774_thunk_fn00001776:
	word32 r1_55
	word32 r3_56
	word32 r4_57
	word32 r5_58
	word32 r6_59
	word32 r7_60
	word32 r8_61
	word32 r9_62
	word32 lr_63
	return fn00001776(r0, r2_54, r3_17, r4_13, cpsr, out r1_55, out r3_56, out r4_57, out r5_58, out r6_59, out r7_60, out r8_61, out r9_62, out lr_63)
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r2:<invalid> -8(fp):r4 -4(fp):lr

l00001742_thunk_fn00001744:
	word32 r1_42
	word32 r3_43
	word32 r4_44
	word32 r5_45
	word32 r6_46
	word32 r7_47
	word32 r8_48
	word32 r9_49
	word32 sp_50
	word32 lr_51
	return fn00001744(r3_17, r4_13, cpsr, out r1_42, out r3_43, out r4_44, out r5_45, out r6_46, out r7_47, out r8_48, out r9_49, out sp_50, out lr_51)
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r2:<invalid> -8(fp):r4 -4(fp):lr

pvPortMalloc_exit:
// DataOut: lr r0 r1 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> r1:<invalid> r0:<invalid> r5:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr



word32 fn00001744(word32 r3, word32 r4, word32 cpsr, ptr32 & r1Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & spOut, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r3 r4
// LiveOut: lr r0 r1 r3 r4 r5 r6 r7 r8 r9 sp
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
fn00001744_entry:
// DataOut: cpsr d13 d24 fp r10 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001744:
	word32 r2_5 = Mem0[r3 + 1472:word32]
	word32 r4_7 = r4 + r2_5
	branch r4_7 >u 0x000005B3 l00001766
// DataOut: cpsr d13 d24 fp r1 r10 r2 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001752:
	branch r2_5 >=u r4_7 l00001766
// DataOut: cpsr d13 d24 fp r1 r10 r2 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:v3 r1:0x000005B3 r2:<invalid> r4:<invalid>

l00001766:
	word32 r1_39
	word32 r2_40
	word32 r3_41
	word32 r4_42
	word32 r5_43
	word32 r6_44
	word32 r7_45
	word32 r8_46
	word32 r9_47
	word32 sp_48
	word32 lr_49
	xTaskResumeAll(0x000005B3, cpsr, out r1_39, out r2_40, out r3_41, out r4_42, out r5_43, out r6_44, out r7_45, out r8_46, out r9_47, out sp_48, out lr_49)
	word32 r4_52
	*r4Out = Mem0[sp_48:word32]
	word32 sp_53
	*spOut = sp_48 + 8
	return r4_42
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r1:0x000005B3 r2:<invalid> r4:<invalid>

l00001756:
	word32 r1_56 = Mem0[r3:word32]
	Mem57[r3 + 1472:word32] = r4_7
// DataOut: cpsr d13 d24 fp r1 r10
// DataOut (flags): 
// SymbolicIn: sp:v3 r1:0x000005B3 r2:<invalid> r4:<invalid>

l0000175E:
	word32 r1_59
	word32 r2_60
	word32 r3_61
	word32 r4_62
	word32 r5_63
	word32 r6_64
	word32 r7_65
	word32 r8_66
	word32 r9_67
	word32 sp_68
	word32 lr_69
	xTaskResumeAll(r1_56, cpsr, out r1_59, out r2_60, out r3_61, out r4_62, out r5_63, out r6_64, out r7_65, out r8_66, out r9_67, out sp_68, out lr_69)
	word32 r4_72
	*r4Out = Mem57[sp_68:word32]
	word32 sp_73
	*spOut = sp_68 + 8
	return r4_62
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r1:<invalid> r2:<invalid> r4:<invalid>

fn00001744_exit:
// DataOut: lr r0 r1 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>



word32 fn00001776(word32 r0, word32 r2, word32 r3, word32 r4, word32 cpsr, ptr32 & r1Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r2 r3 r4
// LiveOut: lr r0 r1 r3 r4 r5 r6 r7 r8 r9
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
l00001776:
	Mem0[r3:word32] = r2
// DataOut: cpsr d13 d24 fp r10 r3 r4
// DataOut (flags): 
// SymbolicIn:

l00001778_thunk_fn00001744:
	r0 = fn00001744(r3, r4, cpsr, out r1, out r3, out r4, out r5, out r6, out r7, out r8, out r9, out sp, out lr)
	return r0
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn:

fn00001776_entry:
	def fp
	def r0
	def r2
	def r3
	def r4
	def cpsr
	def r1Out
	def r3Out
	def r4Out
	def r5Out
	def r6Out
	def r7Out
	def r8Out
	def r9Out
	def lrOut
// DataOut: cpsr d13 d24 fp r0 r10 r2 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001776:
	sp_1 = fp
	r7_3 = r0 << 8
	NZC_4 = cond(r7_3)
	Mem6[r3:word32] = r2
// DataOut: cpsr d13 d24 fp r10 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000177A_thunk_fn00001744:
	r0_20 = fn00001744(r3, r4, cpsr, out r1_10, out r3_11, out r4_12, out r5_13, out r6_14, out r7_15, out r8_16, out r9_17, out sp_18, out lr_19)
	return r0_20
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r0 << 8

fn00001776_exit:
	r1_21 = PHI(r1_10, r1)
	r3_22 = PHI(r3_11, r3)
	r4_23 = PHI(r4_12, r4)
	r5_24 = PHI(r5_13, r5)
	r6_25 = PHI(r6_14, r6)
	r7_26 = PHI(r7_15, r7)
	r8_27 = PHI(r8_16, r8)
	r9_28 = PHI(r9_17, r9)
	sp_29 = PHI(sp_18, sp)
	lr_30 = PHI(lr_19, lr)
	r0_31 = PHI(r0_20, r0)
	use r1_21 (=> r1Out)
	use r3_22 (=> r3Out)
	use r4_23 (=> r4Out)
	use r5_24 (=> r5Out)
	use r6_25 (=> r6Out)
	use r7_26 (=> r7Out)
	use r8_27 (=> r8Out)
	use r9_28 (=> r9Out)
	use lr_30 (=> lrOut)
// DataOut: lr r0 r1 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r5:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>



void vPortFree()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
vPortFree_entry:
// DataOut: cpsr d24 d9 fp r1 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001780:
	return
// DataOut: cpsr d24 d9 fp r1 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

vPortFree_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vPortInitialiseBlocks()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
vPortInitialiseBlocks_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001784:
	Mem5[Mem0[0x00001790:word32] + 1472:word32] = 0x00000000
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

vPortInitialiseBlocks_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:0x00000000 r3:<invalid>



void xPortGetFreeHeapSize()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: sp
xPortGetFreeHeapSize_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001794:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

xPortGetFreeHeapSize_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void xEventGroupCreate(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r5 r6 r7 r8 r9
// Preserved: r4 sp
xEventGroupCreate_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000017A8:
	word32 r1_9
	word32 r3_10
	word32 r4_11
	word32 r5_12
	word32 r6_13
	word32 r7_14
	word32 r8_15
	word32 r9_16
	word32 sp_17
	word32 lr_18
	word32 r0_19 = pvPortMalloc(0x00000018, cpsr, out r1_9, out r3_10, out r4_11, out r5_12, out r6_13, out r7_14, out r8_15, out r9_16, out sp_17, out lr_18)
	branch r0_19 == 0x00000000 l000017BE
// DataOut: cpsr r0 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000017B4:
	Mem27[r0_19:word32] = 0x00000000
	vListInitialise(r0_19 + 4)
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr

l000017BE:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> r7:<invalid> r5:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr

xEventGroupCreate_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r4:r4 r3:<invalid> r1:<invalid> r2:<invalid> r7:<invalid> r5:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr



word32 xEventGroupWaitBits(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, word64 d13, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & spOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d13 r0 r1 r2 r3
// LiveOut: d24 r4 r5 r6 r8 r9 sp
// Trashed: NZCV d22 lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
xEventGroupWaitBits_entry:
	*d24Out = d24
// DataOut: cpsr d13 d24 r0 r1 r10 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000017C4:
	bool C_23 = vTaskSuspendAll()
	word32 sp_2
	*spOut = fp - 24
	word32 r4_29 = Mem0[r0:word32]
	branch r3 != 0x00000000 l000017F2
// DataOut: cpsr d13 d24 r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): C
// SymbolicIn: sp:fp

l000017F2:
// DataOut: cpsr d13 r0 r10 r4 r5 r6 r7 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r2:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000017F2_thunk_fn000017F6:
	word32 r5_94
	word32 r6_95
	word32 r8_96
	word32 r9_97
	word64 d24_98
	return fn000017F6(r0, r4_29, r1, r0, r3, r2, cpsr, d13, out r5_94, out r6_95, out r8_96, out r9_97, out d24_98)
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r3:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000017D8:
	word32 r4_53 = r4_29 + r1 + C_23
	branch r4_53 == 0x00000000 l000017DA_thunk_fn000017F8
// DataOut: cpsr d13 d24 r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r2:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000017DA_thunk_fn000017F8:
	word32 r5_82
	word32 r6_83
	word32 r8_84
	word32 r9_85
	word32 sp_86
	word64 d24_87
	return fn000017F8(r0, r4_53, r1, r0, r3, r2, cpsr, d13, out r5_82, out r6_83, out r8_84, out r9_85, out sp_86, out d24_87)
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r2:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000017DC:
	branch r2 == 0x00000000 l000017E8
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r2:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000017E2:
	Mem80[r0:word32] = r4_53 & ~(r1 << 0x00000000)
// DataOut: cpsr d24 d9 r1 r10
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r2:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000017E8:
	word32 r1_59
	word32 r2_60
	word32 r3_61
	word32 r4_62
	word32 r5_63
	word32 r6_64
	word32 r7_65
	word32 r8_66
	word32 r9_67
	word32 sp_68
	word32 lr_69
	xTaskResumeAll(r1, cpsr, out r1_59, out r2_60, out r3_61, out r4_62, out r5_63, out r6_64, out r7_65, out r8_66, out r9_67, out sp_68, out lr_69)
	word32 r5_73
	*r5Out = Mem0[sp_68 + 4:word32]
	word32 r6_74
	*r6Out = Mem0[sp_68 + 8:word32]
	word32 r8_76
	*r8Out = Mem0[sp_68 + 16:word32]
	word32 sp_77
	*spOut = sp_68 + 24
	return Mem0[sp_68:word32]
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:<invalid> r8:r2 r4:<invalid> r2:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

xEventGroupWaitBits_exit:
// DataOut: d24 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r7:<invalid> r5:<invalid> r8:<invalid> r4:<invalid> r3:<invalid> r0:<invalid> r2:<invalid> d22:<invalid> r1:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



word32 fn000017F6(word32 r0, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 cpsr, word64 d13, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z cpsr d13 r0 r4 r5 r6 r7 r8
// LiveOut: d24 r4 r5 r6 r8 r9
// Trashed: NZCV d22 lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
l000017F6:
	branch Test(EQ,Z) l000019DC
// DataOut: cpsr d13 r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn:

l000017F6_thunk_fn000019DC:
	r4 = fn000019DC(r4, r5, cpsr, d13, out r5, out sp, out d24)
	return r4
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn:

l000017F6_thunk_fn000017F8:
	r4 = fn000017F8(r0, r4, r5, r6, r7, r8, cpsr, d13, out r5, out r6, out r8, out r9, out sp, out d24)
	return r4
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn:

fn000017F6_entry:
	def fp
	def Z
	def r5Out
	def r6Out
	def r8Out
	def r9Out
	def d24Out
	def r0
	def r4
	def r5
	def r6
	def r7
	def r8
	def cpsr
	def d13
	def r9
// DataOut: cpsr d13 r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp

l000017F6:
	sp_1 = fp
	branch Z l000017F6_thunk_fn000019DC
// DataOut: cpsr d13 r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000017F6_thunk_fn000019DC:
	r4_33 = fn000019DC(r4, r5, cpsr, d13, out r5_30, out sp_31, out d24_32)
	return r4_33
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000017F6_thunk_fn000017F8:
	r4_29 = fn000017F8(r0, r4, r5, r6, r7, r8, cpsr, d13, out r5_23, out r6_24, out r8_25, out r9_26, out sp_27, out d24_28)
	return r4_29
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

fn000017F6_exit:
	r5_3 = PHI(r5_30, r5_23, r5, r5)
	r6_4 = PHI(r6, r6_24, r6, r6)
	r8_5 = PHI(r8, r8_25, r8, r8)
	r9_6 = PHI(r9, r9_26, r9, r9)
	sp_7 = PHI(sp_31, sp_27, sp, sp)
	d24_8 = PHI(d24_32, d24_28, d24, d24)
	r4_9 = PHI(r4_33, r4_29, r4, r4)
	use r5_3 (=> r5Out)
	use r6_4 (=> r6Out)
	use r8_5 (=> r8Out)
	use r9_6 (=> r9Out)
	use d24_8 (=> d24Out)
// DataOut: d24 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> d22:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> r5:<invalid> lr:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid>



word32 fn000017F8(word32 r0, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 cpsr, word64 d13, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & spOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d13 r0 r4 r5 r6 r7 r8
// LiveOut: d24 r4 r5 r6 r8 r9 sp
// Trashed: NZCV d22 lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
fn000017F8_entry:
	*r8Out = r8
	*r6Out = r6
	*d24Out = d24
	*r9Out = r9
// DataOut: cpsr d13 d24 r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(32)

l000017F8:
	branch Mem0[v3 + 24:word32] == 0x00000000 l000019E8
// DataOut: cpsr d13 d24 r0 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000019E8:
// DataOut: cpsr d13 r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid>

l000019E8_thunk_fn000019DC:
	word32 r5_73
	word32 sp_74
	word64 d24_75
	return fn000019DC(r4, r5, cpsr, d13, out r5_73, out sp_74, out d24_75)
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid> r0:r0 & r7

l000017FE:
	branch r8 != 0x00000000 l00001806
// DataOut: cpsr d24 d9 r10 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid>

l00001804_1:
// DataOut: cpsr d24 d9 r10 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid>

l00001806:
	word32 r1_31 = 0x01000000
	branch r7 != 0x00000000 l0000183E
// DataOut: cpsr d24 d9 r1 r10 r5 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid> r1:0x00000000

l0000183E:
	r1_31 = 0x05000000
// DataOut: cpsr d24 d9 r1 r10 r5 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid> r1:0x01000000

l0000180C:
	word32 r1_42
	word32 r2_43
	word32 r3_44
	word32 r4_45
	word32 r5_46
	word32 r6_47
	word32 r7_48
	word32 r8_49
	word32 r9_50
	word32 sp_51
	word32 lr_52
	word32 r0_53 = xTaskResumeAll(vTaskPlaceOnUnorderedEventList(r6 + 0x00000004, r1_31 | r5, Mem0[v3 + 24:word32]), cpsr, out r1_42, out r2_43, out r3_44, out r4_45, out r5_46, out r6_47, out r7_48, out r8_49, out r9_50, out sp_51, out lr_52)
	branch r0_53 != 0x00000000 l0000182C
// DataOut: cpsr d24 d9 r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid> r1:<invalid>

l0000181A_thunk_fn0000161A:
	word32 r5_61
	word32 r6_62
	word32 r8_63
	word32 sp_64
	return fn0000161A(r0_53, r1_42, r5_46, r6_47, r7_48, r8_49, cpsr, out r5_61, out r6_62, out r8_63, out sp_64)
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>

l0000181C:
// DataOut: cpsr d24 d9 r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>

l0000181C_thunk_fn0000161A:
	word32 r5_55
	word32 r6_56
	word32 r8_57
	word32 sp_58
	return fn0000161A(r0_53, r1_42, r5_46, r6_47, r7_48, r8_49, cpsr, out r5_55, out r6_56, out r8_57, out sp_58)
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r1:<invalid> r2:0x10000000 r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>

fn000017F8_exit:
// DataOut: d24 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r0:<invalid> d22:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> lr:<invalid> r9:<invalid>



void xEventGroupClearBits(word32 r0, word32 r1, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 sp
// Preserved: r4 r5 r6 sp
xEventGroupClearBits_entry:
// DataOut: cpsr r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001874:
	word32 r0_16
	word32 r2_17
	vPortEnterCritical(cpsr, out r0_16, out r2_17)
	Mem22[r0:word32] = Mem0[r0:word32] & ~(r1 << 0x00000000)
	word32 r1_24
	word32 r2_25
	word32 r3_26
	word32 sp_27
	vPortExitCritical(r3, cpsr, out r1_24, out r2_25, out r3_26, out sp_27)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

xEventGroupClearBits_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



word32 xEventGroupSetBits(word32 r0, word32 r1, word32 cpsr, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut: r1 r4 r5 r6 r7 sp
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
xEventGroupSetBits_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001890:
	word32 r7_50
	vTaskSuspendAll()
	word32 r0_22 = Mem0[r0 + 16:word32]
	word32 r1_24 = Mem0[r0:word32] | r1
	Mem27[r0:word32] = r1_24
	word32 sp_2
	*spOut = fp - 24
	word32 r5_16
	*r5Out = r0
	word32 r6_23
	*r6Out = r0 + 0x0000000C
	branch r0 + 0x0000000C == r0_22 l000018F0
// DataOut: cpsr r0 r1 r5 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000018F0:
	r7_50 = 0xFFFFFFFF
// DataOut: cpsr r1 r5 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:r1 r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r2:<invalid> r3:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018AA:
	word32 r7_74
	*r7Out = 0x00000000
// DataOut: cpsr r0 r1 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:r1 r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r2:<invalid> r3:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018C8:
	word32 r3_75 = Mem27[r0_22:word32]
	word32 r4_76 = Mem27[r0_22 + 4:word32]
	*r4Out = r4_76
	word32 r2_79 = r3_75 & ~0xFF000000
	branch (r3_75 & 0x04000000) == 0x00000000 l000018D4_thunk_fn00001AAE
// DataOut: cpsr r1 r2 r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:r1 r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:0x00000000 r2:<invalid> r3:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018D4_thunk_fn00001AAE:
	fn00001AAE()
	return r1_24
// DataOut: cpsr r1 r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:0x00000000 r3:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018D6:
	branch (r2_79 & ~(r1_24 << 0x00000000)) == 0x00000000 l000018DA_thunk_fn00001AB2
// DataOut: cpsr r1 r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:0x00000000 r3:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018DA_thunk_fn00001AB2:
	fn00001AB2()
	return r1_24
// DataOut: cpsr r1 r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:0x00000000 r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018DC:
	branch r0 + 0x0000000C != r4_76 l000018E0_thunk_fn00001AC8
// DataOut: cpsr r1 r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:0x00000000 r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018E0_thunk_fn00001AC8:
	fn00001AC8()
	return r1_24
// DataOut: cpsr r1 r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:0x00000000 r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018E2:
	r7_50 = ~0x00000000
// DataOut: cpsr r1 r5 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:0x00000000 r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018E4:
	word32 r1_51 = r1_24 & r7_50
	Mem53[r0:word32] = r1_51
	word32 r1_55
	word32 r2_56
	word32 r3_57
	word32 r4_58
	word32 r5_59
	word32 r6_60
	word32 r7_61
	word32 r8_62
	word32 r9_63
	word32 sp_64
	word32 lr_65
	xTaskResumeAll(r1_51, cpsr, out r1_55, out r2_56, out r3_57, out r4_58, out r5_59, out r6_60, out r7_61, out r8_62, out r9_63, out sp_64, out lr_65)
	word32 r4_69
	*r4Out = Mem53[sp_64 + 4:word32]
	word32 r5_70
	*r5Out = Mem53[sp_64 + 8:word32]
	word32 r6_71
	*r6Out = Mem53[sp_64 + 12:word32]
	word32 r7_72
	*r7Out = Mem53[sp_64 + 16:word32]
	word32 sp_73
	*spOut = sp_64 + 24
	return r1_55
// DataOut: cpsr r1 r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

xEventGroupSetBits_exit:
// DataOut: r1 r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r1:<invalid> r0:<invalid> r6:<invalid> r7:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



word32 xEventGroupSync(word32 r0, word32 r1, word32 cpsr, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut: r4 sp
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: r1
xEventGroupSync_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000018F8:
	vTaskSuspendAll()
	word32 r4_31
	word32 r5_32
	word32 r6_33
	word32 r7_34
	word32 sp_35
	word32 r1_36 = xEventGroupSetBits(r0, r1, cpsr, out r4_31, out r5_32, out r6_33, out r7_34, out sp_35)
	branch (r6_33 & ~(r4_31 << 0x00000000)) == 0x00000000 l0000195E
// DataOut: cpsr r1 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000195E:
	Mem137[r5_32:word32] = Mem0[r5_32:word32] & ~(r6_33 << 0x00000000)
// DataOut: cpsr r1
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000191A:
	branch r7_34 != 0x00000000 l00001928
// DataOut: cpsr r1 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001928:
	word32 r1_82
	word32 r2_83
	word32 r3_84
	word32 r4_85
	word32 r5_86
	word32 r7_88
	word32 r8_89
	word32 r9_90
	word32 lr_92
	word32 sp_107
	word32 r6_123
	branch xTaskResumeAll(vTaskPlaceOnUnorderedEventList(r5_32 + 0x00000004, r6_33 | 0x05000000, r7_34), cpsr, out r1_82, out r2_83, out r3_84, out r4_85, out r5_86, out r6_123, out r7_88, out r8_89, out r9_90, out sp_107, out lr_92) != 0x00000000 l0000194A
// DataOut: cpsr r5 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000193A:
	Mem134[Mem0[0x00001984:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr r5 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000194A:
	branch uxTaskResetEventItemValue() << 6 >= 0x00000000 l00001968
// DataOut: cpsr r4 r5 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001968:
	word32 r0_116
	word32 r2_117
	vPortEnterCritical(cpsr, out r0_116, out r2_117)
	word32 r4_119 = Mem0[r5_86:word32]
	word32 r3_120 = r6_123 & ~(r4_119 << 0x00000000)
	branch r3_120 != 0x00000000 l00001978
// DataOut: cpsr r3 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001974_1:
	r6_123 = r4_119 & ~(r6_123 << 0x00000000)
// DataOut: cpsr r3 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001978:
	Mem124[r5_86:word32] = r6_123
	word32 r1_125
	word32 r2_126
	word32 r3_127
	vPortExitCritical(r3_120, cpsr, out r1_125, out r2_126, out r3_127, out sp_107)
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001954:
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001958:
	word32 sp_114
	*spOut = sp_107 + 24
	return Mem0[sp_107:word32]
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000191C:
// DataOut: cpsr r1
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000191E:
	word32 r1_57
	word32 r2_58
	word32 r3_59
	word32 r4_60
	word32 r5_61
	word32 r6_62
	word32 r7_63
	word32 r8_64
	word32 r9_65
	word32 sp_66
	word32 lr_67
	xTaskResumeAll(r1_36, cpsr, out r1_57, out r2_58, out r3_59, out r4_60, out r5_61, out r6_62, out r7_63, out r8_64, out r9_65, out sp_66, out lr_67)
	word32 sp_75
	*spOut = sp_66 + 24
	return Mem0[sp_66:word32]
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

xEventGroupSync_exit:
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void xEventGroupGetBitsFromISR(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: r0 r2 r3
// Preserved: sp
xEventGroupGetBitsFromISR_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001988:
	word32 r3_3 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	__msr(cpsr, r3_3)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

xEventGroupGetBitsFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:0x000000BF r0:<invalid>



word32 vEventGroupDelete(word32 r0, word32 r1, word32 cpsr, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut: r4 sp
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: lr r0
vEventGroupDelete_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000019A4:
	vTaskSuspendAll()
	branch Mem0[r0 + 4:word32] == 0x00000000 l000019C0
// DataOut: cpsr r1 r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000019B0:
	word32 r4_55
	word32 sp_56
	r1 = xTaskRemoveFromUnorderedEventList(Mem0[r0 + 16:word32], 0x02000000, out r4_55, out sp_56)
	branch Mem0[r4_55 + 4:word32] != 0x00000000 l000019BE_thunk_fn00001BB0
// DataOut: cpsr r1 r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r3:<invalid> r2:<invalid> -8(fp):r4 -4(fp):lr

l000019BE_thunk_fn00001BB0:
	fn00001BB0()
	return r4_55
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> -8(fp):r4 -4(fp):lr

l000019C0:
	vPortFree()
// DataOut: cpsr r1
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> -8(fp):r4 -4(fp):lr

l000019CA_thunk_xTaskResumeAll:
	word32 r1_41
	word32 r2_42
	word32 r3_43
	word32 r4_44
	word32 r5_45
	word32 r6_46
	word32 r7_47
	word32 r8_48
	word32 r9_49
	word32 sp_50
	word32 lr_51
	xTaskResumeAll(r1, cpsr, out r1_41, out r2_42, out r3_43, out r4_44, out r5_45, out r6_46, out r7_47, out r8_48, out r9_49, out sp_50, out lr_51)
	return r4_44
// DataOut: cpsr r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r2:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> -8(fp):r4 -4(fp):lr

vEventGroupDelete_exit:
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r5:<invalid> r2:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr



void vEventGroupSetBitsCallback(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
vEventGroupSetBitsCallback_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000019D0:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000019D0_thunk_xEventGroupSetBits:
	word32 r4_5
	word32 r5_6
	word32 r6_7
	word32 r7_8
	word32 sp_9
	xEventGroupSetBits(r0, r1, cpsr, out r4_5, out r5_6, out r6_7, out r7_8, out sp_9)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

vEventGroupSetBitsCallback_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r1:<invalid> r0:<invalid> r6:<invalid> r7:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>



void vEventGroupClearBitsCallback(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr lr r0 r1 r3 r4 r5
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 sp
// Preserved:
vEventGroupClearBitsCallback_entry:
// DataOut: cpsr lr r0 r1 r3 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000019D4:
	word32 r0_16
	word32 r2_17
	vPortEnterCritical(cpsr, out r0_16, out r2_17)
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Local -0004(32) Local -0008(32) Local -000C(32) Local -0010(32)

l000019DA_thunk_fn000019DE:
	word32 r5_19
	word32 sp_20
	fn000019DE(r0, r1, cpsr, r3, r4, r5, lr, out r5_19, out sp_20)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r5:r1 r2:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

vEventGroupClearBitsCallback_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r3:<invalid> lr:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



word32 fn000019DC(word32 r4, word32 r5, word32 cpsr, word64 d13, ptr32 & r5Out, ptr32 & spOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d13 r4 r5
// LiveOut: d24 r4 r5 sp
// Trashed: NZCV d22 lr r0 r1 r2 r3 r4 r5 sp
// Preserved:
fn000019DC_entry:
// DataOut: cpsr d13 r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000019DC:
	word64 d24_5
	*d24Out = __vsub_i8(d13, d19)
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000019DC_thunk_fn000019DE:
	word32 r5_13
	word32 sp_14
	return fn000019DE(r4, r5, cpsr, dwArg00, dwArg04, dwArg08, dwArg0C, out r5_13, out sp_14)
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 d22:<invalid>

fn000019DC_exit:
// DataOut: d24 r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> d22:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> lr:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>



word32 fn000019DE(word32 r4, word32 r5, word32 cpsr, word32 dwArg00, word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & r5Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r4 r5
// LiveOut: r4 r5 sp
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 sp
// Preserved:
// Stack args: Stack +0000(32) Stack +0004(32) Stack +0008(32)
l000019DE:
	r3 = r3 & ~(r5 << 0x00000000)
	Mem0[r4:word32] = r3
	r3 = Mem0[sp:word32]
	r4 = Mem0[sp + 4:word32]
	r5 = Mem0[sp + 8:word32]
	lr = Mem0[sp + 12:word32]
	sp = sp + 16
// DataOut: cpsr d24 d9 r10 r3 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn:

l000019E4_thunk_fn000019EA:
	sp = fn000019EA(r3, cpsr)
	return r4
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn:

fn000019DE_entry:
	def fp
	def r4
	def Mem0
	def r5
	def dwArg00
	def dwArg04
	def dwArg08
	def dwArg0C
	def cpsr
	def r5Out
	def spOut
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32) Stack +0004(32) Stack +0008(32)

l000019DE:
	sp_1 = fp
	r3_4 = Mem0[r4:word32]
	r3_6 = r3_4 & ~(r5 << 0x00000000)
	Mem7[r4:word32] = r3_6
	r3_9 = dwArg00
	r4_11 = dwArg04
	r5_13 = dwArg08
	lr_15 = dwArg0C
	sp_16 = fp + 16
// DataOut: cpsr d24 d9 r10 r3 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000019E6_thunk_fn000019EA:
	sp_18 = fn000019EA(r3_9, cpsr)
	return r4_11
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + 16 r3:<invalid> r4:<invalid> r5:<invalid> lr:<invalid>

fn000019DE_exit:
	sp_19 = PHI(sp_18, sp)
	use r5_13 (=> r5Out)
	use sp_19 (=> spOut)
// DataOut: r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> lr:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>



word32 fn000019EA(word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r3
// LiveOut: sp
// Trashed: NZCV r0 r1 r2 r3 sp
// Preserved:
fn000019EA_entry:
// DataOut: cpsr d24 d9 r10 r3 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000019EA:
// DataOut: cpsr d24 d9 r10 r3 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000019EA_thunk_vPortExitCritical:
	word32 r1_4
	word32 r2_5
	word32 r3_6
	word32 sp_7
	vPortExitCritical(r3, cpsr, out r1_4, out r2_5, out r3_6, out sp_7)
	return sp_7
// DataOut: cpsr d24 d9 r10 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3

fn000019EA_exit:
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid>



void fn00001AAE()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00001AAE:
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn:

l00001BAE_thunk_fn00001BB0:
	fn00001BB0()
	return
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn:
// Terminates process

fn00001AAE_entry:
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001AAE:
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001AB0_thunk_fn00001AB2:
	fn00001AB2()
	return
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0
// Terminates process

fn00001AAE_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00001AB2()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00001AB2:
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn:

l00001BAE_thunk_fn00001BB0:
	fn00001BB0()
	return
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn:
// Terminates process

fn00001AB2_entry:
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001AB2:
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001AC6_thunk_fn00001AC8:
	fn00001AC8()
	return
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0
// Terminates process

fn00001AB2_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00001AC8()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00001AC8:
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn:

l00001BAE_thunk_fn00001BB0:
	fn00001BB0()
	return
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn:
// Terminates process

fn00001AC8_entry:
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001AC8:
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001BAE_thunk_fn00001BB0:
	fn00001BB0()
	return
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0
// Terminates process

fn00001AC8_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00001BB0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00001BB0:
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn:

l00007FFE_thunk_NmiSR:
	NmiSR()
	return
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn:
// Terminates process

fn00001BB0_entry:
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001BB0:
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00007FFE_thunk_NmiSR:
	NmiSR()
	return
// DataOut: cpsr d24 d9 r1 r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0
// Terminates process

fn00001BB0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void NmiSR()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
NmiSR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

NmiSR_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008000:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void FaultISR()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
FaultISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

FaultISR_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008004:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void ResetISR(word32 r10, word32 fp, word32 cpsr, word64 d9, word64 d24)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d24 d9 fp r10
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8
// Preserved: sp
ResetISR_entry:
// DataOut: cpsr d24 d9 fp r10
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008008:
	word32 r3_3 = Mem0[0x0000802C:word32]
	word32 r0_4 = Mem0[0x00008030:word32]
	branch r3_3 >=u r0_4 l00008026
// DataOut: cpsr d24 d9 fp r0 r10 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008010:
	Mem32[r3_3:word32] = 0x00000000
	branch r3_3 + 4 != ((~r3_3 + r0_4 & ~0x00000003) + 0x00000004) + r3_3 l0000821E
// DataOut: cpsr d24 d9 fp r10
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>

l0000821E:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid> r2:<invalid> r1:0x00000000

l0000821E_thunk_PDCInit:
	PDCInit()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid> r2:<invalid> r1:0x00000000

l00008026:
// DataOut: cpsr d24 d9 fp r10
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid> r2:<invalid> r1:0x00000000

l00008026_thunk_Main:
	Main(r10, fp, cpsr, d9, d24)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid> r2:<invalid> r1:0x00000000
// Terminates process

ResetISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:0x40004000 r2:<invalid> r1:<invalid> r4:<invalid> r5:<invalid> lr:<invalid> r7:<invalid> r6:<invalid> r8:<invalid>



void raise()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
raise_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

raise_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008034:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vPrintTask(word32 r8, word32 lr, word32 cpsr, word64 d24, word64 d9)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d24 d9 lr r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vPrintTask_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

vPrintTask_entry:
// DataOut: cpsr d24 d9 lr r8
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008038:
	word32 r5_11 = Mem0[0x00008064:word32]
	word32 sp_12 = fp - 24
// DataOut: cpsr d24 d9 lr r4 r5 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008040:
	word32 r9_28
	word32 r10_29
	word32 r3_30 = MPU_xQueueGenericReceive(Mem0[r5_11:word32], sp_12 + 4, 0x00000000, lr, cpsr, out r9_28, out r10_29)
	word32 r1_32
	word32 r2_33
	word32 r3_34
	word32 r4_35
	word32 r6_37
	word32 r7_38
	word32 r8_39
	word32 r9_40
	word32 r10_41
	word64 d24_43
	OSRAMClear(r3_30, r8, r9_28, r10_29, d9, d24, out r1_32, out r2_33, out r3_34, out r4_35, out r5_11, out r6_37, out r7_38, out r8_39, out r9_40, out r10_41, out sp_12, out d24_43)
	r8 = OSRAMStringDraw(r4_35 & 0x00000001, r8_39, r9_40, r10_41, d9, d24_43, out lr, out d24)
// DataOut: cpsr d24 d9 lr r4 r5 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r1:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> lr:<invalid> d4:<invalid> r9:<invalid> r10:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):lr



void vCheckTask(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vCheckTask_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

vCheckTask_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008068:
	word32 sp_14
	word32 r0_15 = MPU_xTaskGetTickCount(cpsr, out sp_14)
	Mem19[sp_14:word32] = r0_15
	word32 r4_18 = sp_14
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000807C:
	word32 r5_23
	word32 sp_24
	word32 lr_25
	r4_18 = MPU_vTaskDelayUntil(r4_18, 0x00001388, cpsr, out r5_23, out sp_24, out lr_25)
	MPU_xQueueGenericSend(Mem19[r5_23:word32], sp_24 + 4, 0x00000000, lr_25, cpsr)
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r6:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> -24(fp):r0 -20(fp):<invalid> -12(fp):r4 -8(fp):r5 -4(fp):lr



void Main(word32 r10, word32 fp, word32 cpsr, word64 d9, word64 d24)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d24 d9 fp r10
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
Main_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

Main_entry:
// DataOut: cpsr d24 d9 fp r10
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000080A0:
	word32 r9_11 = MPU_xQueueGenericCreate(0x00000003, 0x00000004, cpsr)
	Mem14[Mem0[0x000080F0:word32]:word32] = 0x00000003
	word32 r5_19
	word32 r6_20
	word32 r7_21
	word32 r8_22
	word32 r9_23
	word32 r10_24
	word32 sp_25
	word32 r4_26 = OSRAMInit(0x00000000, r9_11, r10, d9, d24, out r5_19, out r6_20, out r7_21, out r8_22, out r9_23, out r10_24, out sp_25)
	Mem29[sp_25:word32] = 0x00000003
	Mem32[sp_25 + 4:word32] = r4_26
	word32 fp_38 = MPU_xTaskCreate(0x0000003B, r4_26, fp, cpsr, d13, dwArg00, dwArg04)
	Mem42[sp_25:word32] = 0x00000002
	Mem43[sp_25 + 4:word32] = r4_26
	word32 r8_47
	word32 r9_48
	word32 r10_49
	word64 d24_50
	word32 r4_51 = vTaskStartScheduler(r4_26, r5_19, r6_20, r7_21, r8_22, r9_23, r10_24, MPU_xTaskCreate(0x0000003B, r4_26, fp_38, cpsr, d13, dwArg00, dwArg04), cpsr, d13, out r8_47, out r9_48, out r10_49, out d24_50)
	word32 lr_55
	word64 d24_56
	OSRAMStringDraw(r4_51, r8_47, r9_48, r10_49, d9, d24_50, out lr_55, out d24_56)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000080EC:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> r5:<invalid> r8:<invalid> d4:<invalid> r9:<invalid> r10:<invalid> lr:<invalid> fp:<invalid> -16(fp):0x00000002 -12(fp):0x00000000 -4(fp):lr



void vUART_ISR(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r7
// Preserved: r4 r5 r6 sp
vUART_ISR_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008108:
	word32 r5_13 = Mem0[0x00008174:word32]
	word32 r0_18 = UARTIntStatus(r5_13, 0x00000001)
	UARTIntClear(r5_13, r0_18)
	branch r0_18 << 27 >= 0x00000000 l00008130
// DataOut: cpsr r1 r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008128:
	branch Mem0[Mem0[0x00008178:word32]:word32] << 25 < 0x00000000 l0000815E
// DataOut: cpsr r1 r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:0x00000000 r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32)

l0000815E:
	xQueueGenericSendFromISR(fp - 0x00000015, r0_18, 0x00000000, cpsr)
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:0x00000000 r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008130:
	branch r0_18 << 26 >= 0x00000000 l0000813C
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008134:
	word32 r2_53 = Mem0[0x0000817C:word32]
	word32 r3_54 = (word32) Mem0[r2_53:byte]
	branch r3_54 <=u 0x0000007A l0000814C
// DataOut: r2 r3 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000814C:
	word32 r1_58 = Mem0[Mem0[0x00008178:word32]:word32]
	word32 r1_59 = r1_58 << 26
	branch r1_58 << 26 < 0x00000000 l00008156
// DataOut: r1 r2 r3 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008154_1:
	r1_59 = Mem0[0x00008174:word32]
// DataOut: r1 r2 r3 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008156:
	Mem63[r1_59:word32] = r3_54
	Mem66[r2_53:byte] = (byte) (r3_54 + 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000813C:
	branch Mem0[fp - 20:word32] == 0x00000000 l00008148
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008140:
	Mem52[Mem0[0x00008180:word32]:word32] = 0x10000000
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008148:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

vUART_ISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 r5:r5 r1:<invalid> r0:<invalid> r4:r4 r2:<invalid> r3:<invalid> r7:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void vSetErrorLED(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r5 r6 r7 r8 r9
// Preserved: sp
vSetErrorLED_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008184:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008188_thunk_vParTestSetLED:
	vParTestSetLED(0x00000007, 0x00000001, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:0x00000001 r0:0x00000007

vSetErrorLED_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:<invalid> r5:<invalid> r2:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>



void prvSetAndCheckRegisters()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV fp ip r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
prvSetAndCheckRegisters_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000818C:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000081C6:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081CA:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081CE:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081D2:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081D6:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081DA:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081DE:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081E2:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081E6:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081EC:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081F2:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081F8:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l00008200:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016

l000081FE:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016

prvSetAndCheckRegisters_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016



void vApplicationIdleHook(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vApplicationIdleHook_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

vApplicationIdleHook_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008210:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008212:
	vCoRoutineSchedule(cpsr)
	prvSetAndCheckRegisters()
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:<invalid> r8:<invalid> r4:<invalid> r0:<invalid> r6:<invalid> r2:<invalid> r1:<invalid> fp:0x0000000A r9:0x00000014 r10:0x00000015 ip:0x00000016 -8(fp):r3 -4(fp):lr



void PDCInit()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8
// Preserved: lr r4 r5 sp
PDCInit_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008220:
	SysCtlPeripheralEnable(Mem0[0x0000828C:word32])
	SysCtlPeripheralEnable(Mem0[0x00008290:word32])
	GPIODirModeSet(0x40004000, 0x00000034, 0x00000002)
	GPIODirModeSet(0x40004000, 0x00000008, 0x00000001)
	GPIOPadConfigSet(0x40004000, 0x00000004, 0x00000002, 0x0000000A)
	word32 r5_30
	word32 sp_31
	word32 r4_32 = SSIConfig(Mem0[0x00008294:word32], 0x00000000, 0x00000000, Mem0[0x00008298:word32], 0x00000008, out r5_30, out sp_31)
	SSIEnable(r5_30)
	GPIOPinWrite(0x40004000, r4_32, 0x00000000)
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008288_thunk_GPIOPinWrite:
	GPIOPinWrite(0x40004000, r4_32, r4_32)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:0x40004000 r2:<invalid> r1:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> lr:<invalid> r7:<invalid> r6:<invalid> r8:<invalid> -24(fp):0x00000008 -12(fp):r4 -8(fp):r5 -4(fp):lr

PDCInit_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x40004000 r2:<invalid> r1:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> lr:<invalid> r7:<invalid> r6:<invalid> r8:<invalid> -24(fp):0x00000008 -12(fp):r4 -8(fp):r5 -4(fp):lr



word32 PDCWrite(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut: r1
// Trashed: NZC r0 r1 r2 r3
// Preserved: r4 r5 sp
PDCWrite_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000829C:
	word32 r4_12 = Mem0[0x000082CC:word32]
	SSIDataPut(r4_12, r0 & 0x0000000F)
	SSIDataPut(r4_12, r1)
	SSIDataGet(r4_12, fp - 20)
	SSIDataGet(r4_12, fp - 20)
	return fp - 20
// DataOut: cpsr r1
// DataOut (flags): 
// SymbolicIn: sp:fp

PDCWrite_exit:
// DataOut: r1
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r1:fp - 20 r0:<invalid> r2:<invalid> r3:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):lr



word32 vListInitialise(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut: r3
// Trashed: r1 r2 r3
// Preserved: sp
vListInitialise_entry:
// DataOut: cpsr d24 d9 fp lr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000082D0:
	Mem6[r0 + 8:word32] = 0xFFFFFFFF
	Mem7[r0:word32] = 0x00000000
	Mem8[r0 + 4:word32] = r0 + 0x00000008
	Mem9[r0 + 12:word32] = r0 + 0x00000008
	Mem10[r0 + 16:word32] = r0 + 0x00000008
	return r0 + 0x00000008
// DataOut: cpsr d24 d9 fp lr r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

vListInitialise_exit:
// DataOut: r3
// DataOut (flags): 
// SymbolicIn: sp:fp r1:0xFFFFFFFF r2:0x00000000 r3:r0 + 0x00000008



void vListInitialiseItem(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
vListInitialiseItem_entry:
// DataOut: cpsr d13 fp r0 r10 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp

l000082E8:
	Mem3[r0 + 16:word32] = 0x00000000
	return
// DataOut: cpsr d13 fp r10 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp

vListInitialiseItem_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000000



word32 vListInsertEnd(word32 r0, word32 r1, ptr32 & r3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut: r2 r3
// Trashed: NZCV r2 r3
// Preserved: r4 sp
vListInsertEnd_entry:
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000082F0:
	word32 r3_5 = Mem0[r0 + 4:word32]
	*r3Out = r3_5
	word32 r2_4 = Mem0[r0:word32]
	Mem12[r1 + 8:word32] = Mem0[r3_5 + 8:word32]
	word32 r4_14 = Mem12[r3_5 + 8:word32]
	Mem15[r1 + 4:word32] = r3_5
	Mem16[r4_14 + 4:word32] = r1
	Mem17[r3_5 + 8:word32] = r1
	Mem20[r1 + 16:word32] = r0
	Mem21[r0:word32] = r2_4 + 0x00000001
	return r2_4 + 0x00000001
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

vListInsertEnd_exit:
// DataOut: r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r4:r4 -4(fp):r4



byte vListInsert(word32 r0, word32 r1, word32 r4, word32 r5, ptr32 & r0Out, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r6Out, ptr32 & r7Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z r0 r1 r4 r5
// LiveOut: Z r0 r1 r2 r3 r6 r7
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved: r4 r5 sp
vListInsert_entry:
	*r1Out = r1
	*r0Out = r0
	*r6Out = r6
	*r7Out = r7
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r4 r5 r6 r7 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000830C:
	word32 r3_31
	word32 r2_30
	word32 r5_9 = Mem0[r1:word32]
	branch Z l00008338
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r5 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Local -0004(0) Local -0008(0)

l00008338:
	r2_30 = Mem0[r0 + 16:word32]
	*r2Out = r2_30
	*r3Out = Mem0[r2_30 + 4:word32]
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r3:<invalid> -8(fp):r4 -4(fp):r5

l00008314:
	*r2Out = r0 + 0x00000008
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r5 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r3:<invalid> -8(fp):r4 -4(fp):r5
// LocalsOut: Local -0004(0) Local -0008(0)

l0000831C:
	r3_31 = Mem0[r0 + 0x0000000C:word32]
	*r3Out = r3_31
	word32 r4_51 = Mem0[r3_31:word32]
	branch r5_9 >=u r4_51 l0000851A
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r3:<invalid> r2:r0 + 0x00000008 -8(fp):r4 -4(fp):r5
// LocalsOut: Local -0004(0) Local -0008(0)

l0000851A:
// DataOut: cpsr d24 d9 fp lr r0 r10 r4 r5 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r3:<invalid> r2:r0 + 0x00000008 r4:<invalid> -8(fp):r4 -4(fp):r5
// LocalsOut: Local -0004(0) Local -0008(0)

l0000851A_thunk_fn0000851C:
	word32 r0_58
	word32 r1_59
	word32 r2_60
	word32 r3_61
	word32 r6_62
	word32 r7_63
	return fn0000851C(r0 + 0x00000008, r4_51, r5_9, r4, r5, dwArg00, dwArg04, dwArg08, out r0_58, out r1_59, out r2_60, out r3_61, out r6_62, out r7_63)
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r6 r7 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp - 8 r5:<invalid> r3:<invalid> r2:r0 + 0x00000008 r4:<invalid> r0:r0 + 0x00000008 -8(fp):r4 -4(fp):r5

l00008324:
	word32 r4_33 = Mem0[r0:word32]
	Mem34[r1 + 4:word32] = r3_31
	Mem39[r3_31 + 8:word32] = r1
	Mem40[r1 + 8:word32] = r2_30
	Mem41[r2_30 + 4:word32] = r1
	Mem42[r1 + 16:word32] = r0
	Mem43[r0:word32] = r4_33 + 0x00000001
	return cond(r4_33 + 0x00000001)
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r6 r7 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp - 8 r5:<invalid> r3:<invalid> r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

vListInsert_exit:
// DataOut: r0 r1 r2 r3 r6 r7
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r2:<invalid> r4:<invalid> r0:0x00000001 r6:<invalid> r7:<invalid> r1:<invalid> -8(fp):r4 -4(fp):r5



word32 uxListRemove(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 sp
uxListRemove_entry:
// DataOut: cpsr d13 d24 fp lr r0 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008340:
	word32 r2_4 = Mem0[r0 + 16:word32]
	word32 r3_5 = Mem0[r0 + 4:word32]
	Mem10[r3_5 + 8:word32] = Mem0[r0 + 8:word32]
	word32 r4_11 = Mem10[r2_4 + 4:word32]
	word32 r1_12 = Mem10[r0 + 8:word32]
	Mem15[r1_12 + 4:word32] = r3_5
	branch r0 != r4_11 l00008356
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008354_1:
	Mem23[r2_4 + 4:word32] = r1_12
// DataOut: cpsr d13 d24 fp lr r0 r10 r2 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r2:<invalid> r3:<invalid> r1:<invalid> r4:<invalid> -4(fp):r4

l00008356:
	word32 r3_17 = Mem15[r2_4:word32]
	Mem18[r0 + 16:word32] = 0x00000000
	Mem20[r2_4:word32] = r3_17 - 0x00000001
	return r3_17 - 0x00000001
// DataOut: cpsr d13 d24 fp lr r0 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r2:<invalid> r3:<invalid> r1:<invalid> r4:<invalid> -4(fp):r4

uxListRemove_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r1:0x00000000 r4:r4 r0:<invalid> -4(fp):r4



byte xQueueCRSend(word32 r0, word32 r1, word32 r2, word32 cpsr, ptr32 & r0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2
// LiveOut: Z r0
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved: r4 r5 r6 sp
xQueueCRSend_entry:
// DataOut: cpsr r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008364:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r0_19
	word32 r2_20
	vPortEnterCritical(cpsr, out r0_19, out r2_20)
	word32 r3_24 = Mem0[r0 + 60:word32]
	branch Mem0[r0 + 56:word32] == r3_24 l000083B2
// DataOut: cpsr r3 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l000083B2:
	word32 r1_93
	word32 r2_94
	word32 r3_95
	word32 sp_96
	byte Z_97 = vPortExitCritical(r3_24, cpsr, out r1_93, out r2_94, out r3_95, out sp_96)
	branch r2 != 0x00000000 l000083D8
// DataOut: cpsr r4 r5 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000083D8:
	byte Z_106 = vCoRoutineAddToDelayedList(r2)
	__msr(cpsr, 0x00000000)
	word32 r0_109
	*r0Out = ~0x00000003
	return Z_106
// DataOut: cpsr r0
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000083B8:
	__msr(cpsr, r2)
	word32 r0_99
	*r0Out = r2
	return Z_97
// DataOut: cpsr r0
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008388:
	word32 r1_40
	word32 r2_41
	word32 r3_42
	word32 sp_43
	vPortExitCritical(r3_24, cpsr, out r1_40, out r2_41, out r3_42, out sp_43)
	__msr(cpsr, 0x00000000)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r2_47 = Mem0[r0 + 56:word32]
	word32 r3_48 = Mem0[r0 + 60:word32]
	word32 r0_45
	*r0Out = 0x00000000
	byte Z_50 = cond(r2_47 - r3_48)
	branch r2_47 <u r3_48 l000083C0
// DataOut: cpsr r0 r5 r6 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000083C0:
	word32 r0_68
	word32 r7_69
	byte Z_70 = prvCopyDataToQueue(r0, r1, 0x00000000, out r0_68, out r7_69)
	branch Mem0[r0 + 36:word32] != 0x00000000 l000083EE
// DataOut: cpsr r5 sp
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:0x00000000 r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000083EE:
	word32 r0_80
	word32 r1_81
	word32 r2_82
	word32 r3_83
	xCoRoutineRemoveFromEventList(r0 + 0x00000024, out r0_80, out r1_81, out r2_82, out r3_83)
	byte NZCV_85 = cond(0x00000001)
	Z_50 = NZCV_85 (alias)
	branch 0x00000001 == 0x00000000 l000083F8_thunk_fn000085CE
// DataOut: cpsr r0 sp
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000083F8_thunk_fn000085CE:
	word32 r3_90
	word32 sp_91
	fn000085CE(r0_80, cpsr, dwArg00, out r3_90, out sp_91)
	return NZCV_85
// DataOut: cpsr r0
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:0x00000001 r1:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000083FA:
	word32 r0_88
	*r0Out = ~0x00000004
// DataOut: cpsr r0 sp
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:0x00000001 r1:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000083CE:
	__msr(cpsr, 0x00000000)
	word32 r0_73
	*r0Out = 0x00000001
	return Z_70
// DataOut: cpsr r0
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000083AA:
	__msr(cpsr, 0x00000000)
	return Z_50
// DataOut: cpsr r0
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

xQueueCRSend_exit:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r7:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



byte xQueueCRReceive(word32 r0, word32 r1, word32 r2, word32 cpsr, ptr32 & r0Out, ptr32 & r6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2
// LiveOut: Z r0 r6
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: r3 r4 r5 sp
xQueueCRReceive_entry:
	*r6Out = r6
// DataOut: cpsr r0 r1 r2 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008400:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r5_16 = Mem0[r0 + 56:word32]
	branch r5_16 != 0x00000000 l00008424
// DataOut: cpsr r0 r1 r2 r4 r6 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008424:
	__msr(cpsr, 0x00000000)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r2_52 = Mem0[r0 + 56:word32]
	branch r2_52 != 0x00000000 l00008448
// DataOut: cpsr r1 r2 r4 r6 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r3:0x000000BF r5:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008448:
	word32 r1_111
	word32 r2_70 = Mem0[r0 + 64:word32]
	word32 r3_72 = Mem0[r0 + 4:word32]
	word32 r1_73 = Mem0[r0 + 12:word32] + r2_70
	word32 r3_77 = Mem0[r0 + 56:word32]
	Mem78[r0 + 12:word32] = r1_73
	r1_111 = r1_73
	branch r1_73 <u r3_72 l0000845C
// DataOut: cpsr r0 r1 r2 r3 r4
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:r0 r3:0x000000BF r5:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000845A_1:
	r1_111 = Mem78[r0:word32]
// DataOut: cpsr r0 r1 r2 r3 r4
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:r0 r3:<invalid> r5:<invalid> r2:<invalid> r0:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000845C:
	Mem81[r0 + 56:word32] = r3_77 + 0xFFFFFFFF
	branch r1_73 <u r3_72 l00008466
// DataOut: cpsr r0 r1 r2 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r3:<invalid> r5:<invalid> r2:<invalid> r0:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008464_1:
	Mem110[r0 + 12:word32] = r1_111
// DataOut: cpsr r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r3:<invalid> r5:<invalid> r2:<invalid> r0:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008466:
	word32 r1_82
	word32 r4_83
	word32 r5_84
	word32 sp_85
	byte Z_86 = memcpy(r1, r1_111, r2_70, out r1_82, out r4_83, out r5_84, out sp_85)
	branch Mem81[r4_83 + 16:word32] != 0x00000000 l00008478
// DataOut: cpsr r4 r5 r6 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r3:<invalid> r5:<invalid> r2:<invalid> r0:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008478:
	word32 r0_96
	word32 r1_97
	word32 r2_98
	word32 r3_99
	xCoRoutineRemoveFromEventList(r4_83 + 0x00000010, out r0_96, out r1_97, out r2_98, out r3_99)
	Z = cond(0x00000001) (alias)
	branch 0x00000001 == 0x00000000 l0000866E
// DataOut: cpsr r1 r5 r6 sp
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r5:<invalid> r2:<invalid> r0:r1 r1:<invalid> r6:<invalid> r7:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000866E:
// DataOut: cpsr r0 r1 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r5:<invalid> r2:<invalid> r0:0x00000001 r1:<invalid> r6:<invalid> r7:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000866E_thunk_prvFlashCoRoutine:
	word32 r0_106
	word32 r6_107
	return prvFlashCoRoutine(0x00000000, r1_97, r5_84, r6, cpsr, out r0_106, out r6_107)
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r5:<invalid> r2:<invalid> r0:0x00000000 r1:<invalid> r6:<invalid> r7:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008484:
	word32 r0_104
	*r0Out = ~0x00000004
// DataOut: cpsr r0 r6 sp
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r5:<invalid> r2:<invalid> r0:0x00000001 r1:<invalid> r6:<invalid> r7:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000846E:
	__msr(cpsr, 0x00000000)
	word32 r0_89
	*r0Out = 0x00000001
	return Z_86
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r5:<invalid> r2:<invalid> r0:r1 r1:<invalid> r6:<invalid> r7:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000843E:
	word32 r0_65
	*r0Out = r2_52
// DataOut: cpsr r0 r6 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r3:0x000000BF r5:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008440:
	__msr(cpsr, 0x00000000)
	return Z
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r6:<invalid> r7:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008418:
	byte NZCV_31 = cond(r2)
	branch r2 != 0x00000000 l0000848A
// DataOut: cpsr r0 r2 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r3:0x000000BF r5:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000848A:
	byte Z_43 = vCoRoutineAddToDelayedList(r2)
	__msr(cpsr, r5_16)
	word32 r0_45
	*r0Out = ~0x00000003
	return Z_43
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r3:0x000000BF r5:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000841C:
	__msr(cpsr, r2)
	word32 r0_34
	*r0Out = r2
	return NZCV_31
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r3:0x000000BF r5:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

xQueueCRReceive_exit:
// DataOut: r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void xQueueCRSendFromISR(word32 r0, word32 r1, word32 r2, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: r4 r5 r6 sp
xQueueCRSendFromISR_entry:
// DataOut: cpsr r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000084A0:
	word32 r6_14 = Mem0[r0 + 56:word32]
	branch r6_14 <u Mem0[r0 + 60:word32] l000084B0
// DataOut: cpsr r0 r1 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l000084B0:
	word32 r0_49
	word32 r7_50
	prvCopyDataToQueue(r0, r1, 0x00000000, out r0_49, out r7_50)
	branch r2 != 0x00000000 l000084BA_thunk_fn000086AC
// DataOut: cpsr r0 r4 r5 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r3:<invalid> r6:<invalid> r5:r2 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000084BA_thunk_fn000086AC:
	word32 r0_72
	word32 r6_73
	fn000086AC(r0_49, r2, r6_14, cpsr, out r0_72, out r6_73)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r6:<invalid> r5:r2 r2:<invalid> r4:r0 r0:<invalid> r1:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000084BC:
	branch Mem0[r0 + 36:word32] == 0x00000000 l000084C0_thunk_fn000086AC
// DataOut: cpsr r0 r4 r5 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r3:<invalid> r6:<invalid> r5:r2 r2:<invalid> r4:r0 r0:<invalid> r1:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000084C0_thunk_fn000086AC:
	word32 r0_69
	word32 r6_70
	fn000086AC(r0_49, r2, r6_14, cpsr, out r0_69, out r6_70)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r6:<invalid> r5:r2 r2:<invalid> r4:r0 r0:<invalid> r1:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000084C2:
	word32 r0_60
	word32 r1_61
	word32 r2_62
	word32 r3_63
	branch xCoRoutineRemoveFromEventList(r0 + 0x00000024, out r0_60, out r1_61, out r2_62, out r3_63) l000084D0
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r6:<invalid> r5:r2 r2:<invalid> r4:r0 r0:<invalid> r1:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000084CE_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r6:<invalid> r5:0x00000001 r2:<invalid> r4:r0 r0:0x00000001 r1:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000084D0:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r6:<invalid> r5:0x00000001 r2:<invalid> r4:r0 r0:0x00000001 r1:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000084AC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r6:<invalid> r5:<invalid> r2:<invalid> r4:r0 r0:0x00000001 r1:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

xQueueCRSendFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r6:<invalid> r5:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void xQueueCRReceiveFromISR(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved: r3 r4 r5 r6 r7 sp
xQueueCRReceiveFromISR_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000084D4:
	branch Mem0[r0 + 56:word32] == 0x00000000 l00008514
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008514:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000084DA:
	word32 r3_45
	word32 lr_32 = Mem0[r0 + 64:word32]
	word32 r4_33 = Mem0[r0 + 4:word32]
	word32 r3_34 = Mem0[r0 + 12:word32] + lr_32
	word32 r7_43 = Mem0[r0 + 56:word32]
	Mem44[r0 + 12:word32] = r3_34
	r3_45 = r3_34
	branch r3_34 <u r4_33 l000084F4
// DataOut: lr r0 r3 r4 r6 r7
// DataOut (flags): C
// SymbolicIn: sp:fp - 24 r3:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000084F2_1:
	r3_45 = Mem44[r0:word32]
// DataOut: lr r0 r3 r4 r6 r7
// DataOut (flags): C
// SymbolicIn: sp:fp - 24 r3:<invalid> lr:<invalid> r4:r0 r6:r1 r5:r2 r7:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000084F4:
	branch r3_34 <u r4_33 l000084FC
// DataOut: lr r0 r3 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> lr:<invalid> r4:r0 r6:r1 r5:r2 r7:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000084FA_1:
	Mem78[r0 + 12:word32] = r3_45
// DataOut: lr r3 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> lr:<invalid> r4:r0 r6:r1 r5:r2 r7:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000084FC:
	Mem50[r0 + 56:word32] = r7_43 + 0xFFFFFFFF
	word32 r1_51
	word32 r4_52
	word32 r5_53
	word32 sp_54
	memcpy(r1, r3_45, lr_32, out r1_51, out r4_52, out r5_53, out sp_54)
	branch Mem50[r5_53:word32] != 0x00000000 l00008510
// DataOut: r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> lr:<invalid> r4:r0 r6:r1 r5:r2 r7:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000850C:
	branch Mem50[r4_52 + 16:word32] != 0x00000000 l00008518
// DataOut: r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r6:<invalid> r5:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> r0:r1 -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00008518:
// DataOut: r0 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r6:<invalid> r5:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> r0:r1 -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00008518_thunk_fn0000851C:
	word32 r0_71
	word32 r1_72
	word32 r2_73
	word32 r3_74
	word32 r6_75
	word32 r7_76
	fn0000851C(r4_52 + 0x00000010, r4_52, r5_53, dwArg00, dwArg04, dwArg08, dwArg0C, dwArg10, out r0_71, out r1_72, out r2_73, out r3_74, out r6_75, out r7_76)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r6:<invalid> r5:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00008510:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r6:<invalid> r5:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> r0:r1 -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

xQueueCRReceiveFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> r1:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



byte fn0000851C(word32 r0, word32 r4, word32 r5, word32 dwArg00, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & r0Out, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r6Out, ptr32 & r7Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r4 r5
// LiveOut: Z r0 r1 r2 r3 r6 r7
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved:
// Stack args: Stack +0000(32) Stack +000C(32) Stack +0010(32)
l0000851C:
	Z = xCoRoutineRemoveFromEventList(r0, out r0, out r1, out r2, out r3)
	NZCV = cond(r0 - 0x00000000)
	Z = NZCV (alias)
	branch Test(EQ,Z) l00008710
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r9 sp
// DataOut (flags): Z
// SymbolicIn:

l00008522_thunk_fn00008710:
	fn00008710(r3, r4)
	return Z
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r6 r7 r9
// DataOut (flags): Z
// SymbolicIn:

l00008524:
	r0 = 0x00000001
	Mem0[r5:word32] = 0x00000001
	r3 = Mem0[sp:word32]
	r4 = Mem0[sp + 4:word32]
	r5 = Mem0[sp + 8:word32]
	r6 = Mem0[sp + 12:word32]
	r7 = Mem0[sp + 16:word32]
	sp = sp + 24
	return Z
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r6 r7 r9
// DataOut (flags): Z
// SymbolicIn:

fn0000851C_entry:
	def fp
	def r0
	def r0Out
	def r1Out
	def r2Out
	def r3Out
	def r6Out
	def r7Out
	def r5
	def dwArg00
	def dwArg04
	def dwArg08
	def dwArg0C
	def dwArg10
	def r4
	def r6
	def r7
// DataOut: cpsr d24 d9 fp lr r0 r10 r4 r5 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32) Stack +0010(32)

l0000851C:
	sp_1 = fp
	Z_7 = xCoRoutineRemoveFromEventList(r0, out r0_3, out r1_4, out r2_5, out r3_6)
	NZCV_8 = cond(0x00000001)
	Z_9 = NZCV_8 (alias)
	branch 0x00000001 == 0x00000000 l00008522_thunk_fn00008710
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32) Stack +0010(32)

l00008522_thunk_fn00008710:
	fn00008710(r3_6, r4)
	return Z_9
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r6 r7 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp r3:<invalid> r0:0x00000001 r1:<invalid> r2:<invalid>

l00008524_in_fn0000851C:
	r0_23 = 0x00000001
	Mem24[r5:word32] = 0x00000001
	r3_27 = dwArg00
	r4_29 = dwArg04
	r5_31 = dwArg08
	r6_33 = dwArg0C
	r7_35 = dwArg10
	sp_36 = fp + 24
	return Z_9
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r6 r7 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp r3:<invalid> r0:0x00000001 r1:<invalid> r2:<invalid>

fn0000851C_exit:
	r0_10 = PHI(r0_3, r0_23, r0, r0)
	r3_11 = PHI(r3_6, r3_27, r3, r3)
	r4_12 = PHI(r4, r4_29, r4, r4)
	r5_13 = PHI(r5, r5_31, r5, r5)
	r6_14 = PHI(r6, r6_33, r6, r6)
	r7_15 = PHI(r7, r7_35, r7, r7)
	sp_16 = PHI(sp_1, sp_36, sp, sp)
	use r0_10 (=> r0Out)
	use r1_4 (=> r1Out)
	use r2_5 (=> r2Out)
	use r3_11 (=> r3Out)
	use r6_14 (=> r6Out)
	use r7_15 (=> r7Out)
// DataOut: r0 r1 r2 r3 r6 r7
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r0:0x00000001 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r2:<invalid>



void prvIdleTask(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
prvIdleTask_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

prvIdleTask_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000852C:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000852E:
	vApplicationIdleHook(cpsr)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 -8(fp):r3 -4(fp):lr



void xTaskNotifyStateClear(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 r5 sp
// Preserved: r3 r4 r5 sp
xTaskNotifyStateClear_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008534:
	word32 r4_12
	branch r0 == 0x00000000 l00008558
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008558:
	r4_12 = Mem0[Mem0[0x00008560:word32] + 4:word32]
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008538:
	r4_12 = r0
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000853A:
	word32 r0_14
	word32 r2_15
	vPortEnterCritical(cpsr, out r0_14, out r2_15)
	word32 r3_18 = (word32) Mem0[r4_12 + 100:byte]
	branch r3_18 != 0x00000002 l00008548
// DataOut: cpsr r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008546_1:
	r3_18 = 0x00000000
// DataOut: cpsr r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008548:
	Mem23[r4_12 + 100:byte] = (byte) r3_18
	word32 r1_24
	word32 r2_25
	word32 r3_26
	word32 sp_27
	vPortExitCritical(r3_18, cpsr, out r1_24, out r2_25, out r3_26, out sp_27)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

xTaskNotifyStateClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r5:<invalid> r0:0x00000000 r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



word32 xPortRaisePrivilege(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut: r0
// Trashed: NZC r0
// Preserved: sp
xPortRaisePrivilege_entry:
// DataOut: cpsr d13 d24 fp lr r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008564:
	branch (__mrs(cpsr) & 0x00000001) == 0x00000000 l00008570
// DataOut: cpsr d13 d24 fp lr r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000856E_1:
// DataOut: cpsr d13 d24 fp lr r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00008570:
	__syscall(0x00000002)
	return 0x00000001
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

xPortRaisePrivilege_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000001



bool vPortEnterCritical(word32 cpsr, ptr32 & r0Out, ptr32 & r2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut: C r0 r2
// Trashed: NZCV r0 r2
// Preserved: r3 sp
vPortEnterCritical_entry:
// DataOut: cpsr d24 d9 fp lr r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008578:
	word32 r0_8
	*r0Out = xPortRaisePrivilege(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r2_11 = Mem0[0x000085AC:word32]
	*r2Out = r2_11
	Mem17[r2_11:word32] = Mem0[r2_11:word32] + 0x00000001
	bool C_14 = (bool) cond(0x00000000)
	branch 0x00000000 == 0x00000000 l000085A8
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): C
// SymbolicIn: sp:fp

l0000859C:
	word32 r0_23 = __mrs(cpsr)
	__msr(cpsr, r0_23 | 0x00000001)
	word32 r0_24
	*r0Out = r0_23 | 0x00000001
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): C
// SymbolicIn: sp:fp - 8 r3:<invalid> r2:<invalid> r0:0x00000001 -8(fp):r3 -4(fp):lr

l000085A8:
	return C_14
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): C
// SymbolicIn: sp:fp - 8 r3:<invalid> r2:<invalid> r0:<invalid> -8(fp):r3 -4(fp):lr

vPortEnterCritical_exit:
// DataOut: r0 r2
// DataOut (flags): C
// SymbolicIn: sp:fp r3:r3 r2:<invalid> r0:<invalid> -8(fp):r3 -4(fp):lr



byte vPortExitCritical(word32 r3, word32 cpsr, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r3
// LiveOut: Z r1 r2 r3 sp
// Trashed: NZCV r0 r1 r2 r3 sp
// Preserved:
vPortExitCritical_entry:
// DataOut: cpsr d24 d9 fp lr r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000085B0:
	word32 r0_8 = xPortRaisePrivilege(cpsr)
	word32 r2_10 = Mem0[0x000085D8:word32]
	*r2Out = r2_10
	word32 r3_11 = Mem0[r2_10:word32]
	Mem14[r2_10:word32] = r3_11 - 0x00000001
	branch r3_11 != 0x00000001 l000085C4
// DataOut: cpsr d24 d9 fp lr r0 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Local -0008(0)

l000085C0:
	__msr(cpsr, r3_11 - 0x00000001)
// DataOut: cpsr d24 d9 fp lr r0 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r3:<invalid> r0:0x00000001 -8(fp):r3 -4(fp):lr
// LocalsOut: Local -0008(0)

l000085C4:
	byte NZCV_15 = cond(0x00000000)
	branch 0x00000000 == 0x00000000 l000085D4
// DataOut: cpsr d24 d9 fp lr r0 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp - 8 r2:<invalid> r3:<invalid> r0:0x00000001 -8(fp):r3 -4(fp):lr
// LocalsOut: Local -0008(0)

l000085C6_thunk_fn000085CE:
	word32 r3_30
	word32 sp_31
	word32 r1_32
	*r1Out = fn000085CE(r0_8, cpsr, r3, out r3_30, out sp_31)
	return NZCV_15
// DataOut: cpsr d24 d9 fp lr r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp - 8 r2:<invalid> r3:<invalid> r0:0x00000001 -8(fp):r3 -4(fp):lr

l000085C8:
	word32 r0_25 = __mrs(cpsr)
// DataOut: cpsr d24 d9 fp lr r0 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp - 8 r2:<invalid> r3:<invalid> r0:0x00000001 -8(fp):r3 -4(fp):lr
// LocalsOut: Local -0008(0)

l000085CC_thunk_fn000085CE:
	word32 r3_27
	word32 sp_28
	word32 r1_29
	*r1Out = fn000085CE(r0_25 | 0x00000001, cpsr, r3, out r3_27, out sp_28)
	return NZCV_15
// DataOut: cpsr d24 d9 fp lr r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp - 8 r2:<invalid> r3:<invalid> r0:<invalid> -8(fp):r3 -4(fp):lr

vPortExitCritical_exit:
// DataOut: r1 r2 r3 sp
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> -8(fp):r3 -4(fp):lr



word32 fn000085CE(word32 r0, word32 cpsr, word32 dwArg00, ptr32 & r3Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut: r1 r3 sp
// Trashed: r1 r3 sp
// Preserved:
// Stack args: Stack +0000(32)
l000085CE:
	__msr(cpsr, r0)
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): Z
// SymbolicIn:

l000085D4:
	r3 = Mem0[sp:word32]
	sp = sp + 8
	return r1
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): Z
// SymbolicIn:

fn000085CE_entry:
	def fp
	def r0
	def cpsr
	def dwArg00
	def r3Out
	def spOut
// DataOut: cpsr d24 d9 fp lr r0 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000085CE:
	sp_1 = fp
	r1_3 = r0
	__msr(cpsr, r0)
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000085D4_in_fn000085CE:
	r3_6 = dwArg00
	sp_7 = fp + 8
	return r1_3
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:r0

fn000085CE_exit:
	r3_8 = PHI(r3_6, r3)
	sp_9 = PHI(sp_7, sp)
	use r3_8 (=> r3Out)
	use sp_9 (=> spOut)
// DataOut: r1 r3 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp + 8 r1:r0 r3:<invalid>



void vParTestInitialise()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 r7 r8
// Preserved: lr r3 sp
vParTestInitialise_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000085DC:
	PDCInit()
	word32 r1_10 = (word32) Mem0[Mem0[0x000085F0:word32]:byte]
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000085EC_thunk_PDCWrite:
	PDCWrite(0x00000005, r1_10)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 r0:0x00000005 r1:<invalid> lr:lr r2:<invalid> r4:<invalid> r5:<invalid> r7:<invalid> r6:<invalid> r8:<invalid> -8(fp):r3 -4(fp):lr

vParTestInitialise_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid> r1:<invalid> lr:lr r2:<invalid> r4:<invalid> r5:<invalid> r7:<invalid> r6:<invalid> r8:<invalid> -8(fp):r3 -4(fp):lr



void vParTestSetLED(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r5 r6 r7 r8 r9
// Preserved: lr r3 r4 r5 sp
vParTestSetLED_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000085F4:
	MPU_vTaskSuspendAll(cpsr)
	branch r0 >u 0x00000007 l0000861C
// DataOut: cpsr r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008602:
	word32 r3_34 = Mem0[0x0000862C:word32]
	word32 r0_35 = (uint32) (byte) (0x00000001 << r0)
	word32 r2_36 = (word32) Mem0[r3_34:byte]
	branch r1 == 0x00000000 l00008624
// DataOut: cpsr r0 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r5:r1 r0:<invalid> r2:<invalid> r3:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008624:
	Mem45[r3_34:byte] = (byte) (r2_36 & ~(r0_35 << 0x00000000))
// DataOut: cpsr r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r5:r1 r3:<invalid> r0:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008610:
	Mem43[r3_34:byte] = (byte) (r0_35 | r2_36)
// DataOut: cpsr r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r5:r1 r3:<invalid> r0:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008614:
	r1 = PDCWrite(0x00000005, (word32) Mem0[r3_34:byte])
// DataOut: cpsr r1
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r5:r1 r3:<invalid> r0:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000861C:
// DataOut: cpsr r1
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r5:r1 r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008620_thunk_MPU_xTaskResumeAll:
	word32 r6_29
	MPU_xTaskResumeAll(r1, cpsr, out r6_29)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r5:r5 r3:r3 lr:lr r0:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

vParTestSetLED_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r5:<invalid> r3:<invalid> lr:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



word32 vParTestToggleLED(word32 r0, word32 r1, word32 cpsr, ptr32 & r6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut: r5 r6
// Trashed: NZCV lr r0 r1 r2 r3 r5 r6 r7 r8 r9
// Preserved: lr r4 sp
vParTestToggleLED_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008630:
	MPU_vTaskSuspendAll(cpsr)
	branch r0 >u 0x00000007 l0000865A
// DataOut: cpsr r1 r4
// DataOut (flags): C
// SymbolicIn: sp:fp

l0000863C:
	word32 r3_33 = Mem0[0x0000866C:word32]
	word32 r0_34 = 0x00000001 << r0
	word32 r2_37 = (uint32) (byte) r0_34 + (word32) Mem0[r3_33:byte] + (r0 <u 0x00000007)
	branch r2_37 != 0x00000000 l00008662
// DataOut: cpsr r0 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r0:<invalid> r2:<invalid> r3:<invalid> -8(fp):r4 -4(fp):lr

l00008662:
	Mem51[r3_33:byte] = (byte) ((word32) Mem0[r3_33:byte] & ~(r0_34 << 0x00000000))
// DataOut: cpsr r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r2:<invalid> r3:<invalid> r0:0x00000001 << r0 r1:<invalid> -8(fp):r4 -4(fp):lr

l0000864C:
	Mem48[r3_33:byte] = (byte) (r2_37 | (word32) Mem0[r3_33:byte])
// DataOut: cpsr r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r2:<invalid> r3:<invalid> r0:0x00000001 << r0 r1:<invalid> -8(fp):r4 -4(fp):lr

l00008652:
	r1 = PDCWrite(0x00000005, (word32) Mem0[r3_33:byte])
// DataOut: cpsr r1
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l0000865A:
// DataOut: cpsr r1
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l0000865E_thunk_MPU_xTaskResumeAll:
	word32 r6_28
	return MPU_xTaskResumeAll(r1, cpsr, out r6_28)
// DataOut: cpsr r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 lr:lr r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

vParTestToggleLED_exit:
// DataOut: r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 lr:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr



byte prvFlashCoRoutine(word32 r0, word32 r1, word32 r5, word32 r6, word32 cpsr, ptr32 & r0Out, ptr32 & r6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r5 r6
// LiveOut: Z r0 r6
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
prvFlashCoRoutine_entry:
// DataOut: cpsr r0 r1 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -0014(32)

l00008670:
	word32 r3_13 = (word32) Mem0[r0 + 104:word16]
	branch r3_13 == 0x000001C2 l000086B6
// DataOut: cpsr r1 r3 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -0014(32)

l000086B6:
	word32 r5_53 = Mem0[0x000086E0:word32]
	word32 r0_58
	word32 r6_59
	byte Z_60 = xQueueCRReceive(Mem0[r5_53:word32], fp - 20, 0x00000000, cpsr, out r0_58, out r6_59)
	branch Z_60 l000086C6_thunk_fn000088AA
// DataOut: cpsr r0 r5 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000086C6_thunk_fn000088AA:
	fn000088AA()
	return Z_60
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000086C6_thunk_fn000086AE:
	word32 r0_63
	word32 r6_64
	return fn000086AE(r5_53, r6_59, cpsr, out r0_63, out r6_64)
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000867E:
	branch r3_13 == 0x000001C3 l0000868C
// DataOut: cpsr r1 r3 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32)

l0000868C:
	word32 r6_47
	word32 r5_48 = vParTestToggleLED(dwLoc14, r1, cpsr, out r6_47)
// DataOut: cpsr r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r2:0x000001C3 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008692_thunk_fn000086AE:
	word32 r0_49
	word32 r6_50
	return fn000086AE(r5_48, r6_47, cpsr, out r0_49, out r6_50)
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r2:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008686:
	branch r3_13 == 0x00000000 l000086D2
// DataOut: cpsr r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r2:0x000001C3 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32)

l000086D2:
	word32 r5_37 = Mem0[0x000086E0:word32]
// DataOut: cpsr r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r2:0x000001C3 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000086D6_thunk_fn000086AE:
	word32 r0_39
	word32 r6_40
	return fn000086AE(r5_37, fp - 20, cpsr, out r0_39, out r6_40)
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r2:0x000001C3 r5:<invalid> r6:fp - 20 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008686_thunk_fn000086AE:
	word32 r0_32
	word32 r6_33
	return fn000086AE(r5, r6, cpsr, out r0_32, out r6_33)
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r2:0x000001C3 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

prvFlashCoRoutine_exit:
// DataOut: r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



byte fn000086AC(word32 r0, word32 r5, word32 r6, word32 cpsr, ptr32 & r0Out, ptr32 & r6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z cpsr r0 r5 r6
// LiveOut: Z r0 r6
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
l000086AC:
	branch Test(EQ,Z) l000086AC_thunk_fn00008890
// DataOut: cpsr r0 r5 r6
// DataOut (flags): Z
// SymbolicIn:

l000086AC_thunk_fn00008890:
	r0 = fn00008890(r0, cpsr, dwArg00, dwArg04, dwArg08, out r4, out r5, out r6, out sp)
	return Z
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn:

l000086AC_thunk_fn000086AE:
	Z = fn000086AE(r5, r6, cpsr, out r0, out r6)
	return Z
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn:

fn000086AC_entry:
	def fp
	def Z
	def r0Out
	def r6Out
	def r5
	def r6
	def cpsr
	def r4
	def r0
	def dwArg00
	def dwArg04
	def dwArg08
// DataOut: cpsr r0 r5 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l000086AC:
	sp_1 = fp
	branch Z l000086AC_thunk_fn00008890
// DataOut: cpsr r0 r5 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l000086AC_thunk_fn00008890:
	r0_26 = fn00008890(r0, cpsr, dwArg00, dwArg04, dwArg08, out r4_22, out r5_23, out r6_24, out sp_25)
	return Z
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l000086AC_thunk_fn000086AE:
	Z_16 = fn000086AE(r5, r6, cpsr, out r0_14, out r6_15)
	return Z_16
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

fn000086AC_exit:
	r4_3 = PHI(r4_22, r4, r4, r4)
	r5_4 = PHI(r5_23, r5, r5, r5)
	sp_5 = PHI(sp_25, sp_1, sp, sp)
	r0_6 = PHI(r0_26, r0_14, r0, r0)
	r6_7 = PHI(r6_24, r6_15, r6, r6)
	Z_8 = PHI(Z, Z_16, Z, Z)
	use r0_6 (=> r0Out)
	use r6_7 (=> r6Out)
// DataOut: r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>



byte fn000086AE(word32 r5, word32 r6, word32 cpsr, ptr32 & r0Out, ptr32 & r6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r5 r6
// LiveOut: Z r0 r6
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
fn000086AE_entry:
// DataOut: cpsr r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l000086AE:
	sp = v3
	r2 = 0x00000000
	r3 = Mem0[0x000086E4:word32]
	Mem0[r3:word32] = 0x00000000
// DataOut: cpsr r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008696:
	r2 = 0xFFFFFFFF
	r1 = r6
	r0 = Mem0[r5:word32]
	Z = xQueueCRReceive(r0, r1, r2, cpsr, out r0, out r6)
	NZCV = Z (alias)
	r2 = r0 + 0x00000004
	branch Test(EQ,Z) l000086D8
// DataOut: cpsr r0 r4 r5 r6 sp
// DataOut (flags): Z
// SymbolicIn: sp:v3 r2:0x00000000 r3:<invalid>

l000086D8:
	r3 = 0x000001C2
	Mem0[r4 + 104:word16] = 0x01C2
// DataOut: cpsr r0 sp
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>

l00008688:
	sp = sp + 8
	r4 = Mem0[sp:word32]
	r5 = Mem0[sp + 4:word32]
	r6 = Mem0[sp + 8:word32]
	sp = sp + 16
	return Z
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r2:<invalid> r3:0x000001C2 r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>

l000086A6:
	r3 = r0 + 0x00000005
	branch Test(EQ,Z) l000086C8
// DataOut: cpsr r0 r4 r5 r6 sp
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>

l000086C8:
	r3 = 0x000001C3
	Mem0[r4 + 104:word16] = 0x01C3
	sp = sp + 8
	r4 = Mem0[sp:word32]
	r5 = Mem0[sp + 4:word32]
	r6 = Mem0[sp + 8:word32]
	sp = sp + 16
	return Z
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>

l000086AA:
	NZCV = cond(r0 - 0x00000001)
	Z = NZCV (alias)
// DataOut: cpsr r0 r5 r6
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>

l000086AA_thunk_fn000086AC:
	Z = fn000086AC(r0, r5, r6, cpsr, out r0, out r6)
	NZCV = Z (alias)
	return Z
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>

fn000086AE_exit:
	use r0 (=> r0Out)
	use r6 (=> r6Out)
// DataOut: r0 r6
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid>



void prvFixedDelayCoRoutine(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved:
prvFixedDelayCoRoutine_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000086E8:
	byte Z_107
	word32 r0_106
	word32 r0_40
	word32 r3_9 = (word32) Mem0[r0 + 104:word16]
	branch r3_9 == 0x00000182 l00008750
// DataOut: cpsr r0 r3 r4 sp
// DataOut (flags): ZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -000C(32)

l00008750:
	Z_107 = xQueueCRSend(Mem0[Mem0[0x0000877C:word32]:word32], fp - 12, 0x00000000, cpsr, out r0_106)
// DataOut: cpsr r0 r4 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 -12(fp):r1 -8(fp):r4 -4(fp):lr

l000086F8:
	branch r3_9 <=u 0x00000182 l00008748
// DataOut: cpsr r0 r3 r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32) Local -000C(32)

l00008748:
	branch r3_9 == 0x00000000 l0000874A_thunk_fn0000891C
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32)

l0000874A_thunk_fn0000891C:
	fn0000891C(r0, cpsr, dwLoc10)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 -12(fp):r1 -8(fp):r4 -4(fp):lr

l0000874C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 -12(fp):r1 -8(fp):r4 -4(fp):lr

l000086FA:
	branch r3_9 != 0x00000183 l00008716
// DataOut: cpsr r3 r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32) Local -000C(32)

l00008716:
	branch r3_9 != 0x00000196 l0000871A_thunk_fn00008912
// DataOut: cpsr
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 r2:0x00000183 -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32)

l0000871A_thunk_fn00008912:
	fn00008912(cpsr, dwLoc10)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 r2:0x00000183 -12(fp):r1 -8(fp):r4 -4(fp):lr

l0000871C:
	Z_107 = xQueueCRSend(Mem0[Mem0[0x0000877C:word32]:word32], fp - 12, 0x00000000, cpsr, out r0_106)
	branch Z_107 l0000876E
// DataOut: cpsr r0 r4 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 r2:0x00000183 -12(fp):r1 -8(fp):r4 -4(fp):lr

l0000876E:
	Mem90[r0 + 104:word16] = 0x0182
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr

l00008712_in_prvFixedDelayCoRoutine:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:0x00000182 r4:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr

l0000872C:
	branch Z_107 l00008766
// DataOut: cpsr r0 r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr

l00008766:
	Mem66[r0 + 104:word16] = 0x0183
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr

l00008712_in_prvFixedDelayCoRoutine:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:0x00000183 r4:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr

l00008730:
	branch r0_106 == 0x00000001 l00008902
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr

l00008902:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr

l00008902_thunk_MPU_xTaskGetTickCount:
	word32 sp_63
	MPU_xTaskGetTickCount(cpsr, out sp_63)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr

l00008734:
	Mem55[Mem0[0x00008780:word32]:word32] = 0x00000000
	r0_40 = Mem55[Mem55[0x00008778:word32] + (Mem55[fp - 12:word32] << 2):word32]
	branch r0_40 == 0x00000000 l00008744_thunk_fn0000890C
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr

l00008744_thunk_fn0000890C:
	fn0000890C(cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr

l00008746:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr

l00008702:
	r0_40 = Mem0[Mem0[0x00008778:word32] + (r1 << 2):word32]
	branch r0_40 != 0x00000000 l0000875E
// DataOut: r0 r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 r2:0x00000183 -12(fp):r1 -8(fp):r4 -4(fp):lr

l0000875E:
	vCoRoutineAddToDelayedList(r0_40)
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr

l0000870C:
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r6:<invalid> r5:<invalid> r7:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr

l00008710_in_prvFixedDelayCoRoutine:
	Mem33[r0 + 104:word16] = 0x0196
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:0x00000196 r4:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> r6:<invalid> r5:<invalid> r7:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr

prvFixedDelayCoRoutine_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr



void fn00008710(word32 r3, word32 r4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r3 r4
// LiveOut:
// Trashed: r4 sp
// Preserved:
fn00008710_entry:
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r6 r7 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp
// LocalsOut: v3(32)

l00008710:
	Mem3[r4 + 104:word16] = (uint16) r3
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r6 r7 r9 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008712:
	return
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r6 r7 r9
// DataOut (flags): Z
// SymbolicIn: sp:v3

fn00008710_exit:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:v3 + 16 r4:<invalid>



void vStartFlashCoRoutines(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r8 r9 sp
// Preserved: lr r4 r5 r6 sp
vStartFlashCoRoutines_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008784:
	branch r0 <u 0x00000008 l0000878A
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008788_1:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000878A:
	MPU_xQueueGenericCreate(0x00000001, 0x00000004, cpsr)
	Mem22[Mem0[0x000087C4:word32]:word32] = 0x00000001
	branch 0x00000001 == 0x00000000 l000087C2
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000008

l000087C2:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r0:<invalid> r2:<invalid> r5:0x00000008 r1:<invalid> r3:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000879E:
	branch 0x00000008 == 0x00000000 l000087B4
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r0:<invalid> r2:<invalid> r5:0x00000008 r1:<invalid> r3:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000087A0:
	word32 r1_52 = xCoRoutineCreate(0x00000000, cpsr)
	branch true l000087B2_thunk_fn000089A4
// DataOut: cpsr r1 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r0:<invalid> r2:<invalid> r5:0x00000008 r1:<invalid> r3:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000087B2_thunk_fn000089A4:
	fn000089A4(r1_52, 0x00000008, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r0:<invalid> r2:<invalid> r5:0x00000008 r1:<invalid> r3:<invalid> r4:0x00000001 r6:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000087B4:
// DataOut: cpsr r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r0:<invalid> r2:<invalid> r5:0x00000008 r1:<invalid> r3:<invalid> r4:0x00000001 r6:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000087BE_thunk_xCoRoutineCreate:
	xCoRoutineCreate(0x00000000, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:0x00000000 r5:r5 r1:0x00000001 r3:<invalid> r4:r4 r6:r6 lr:lr r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

vStartFlashCoRoutines_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r1:<invalid> r3:<invalid> r4:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void xAreFlashCoRoutinesStillRunning()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
xAreFlashCoRoutinesStillRunning_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000087D0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

xAreFlashCoRoutinesStillRunning_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void MPU_xTaskCreateRestricted(word32 r0, word32 r10, word32 fp, word32 cpsr, word64 d13)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d13 fp r0 r10
// LiveOut:
// Trashed: NZCV d22 fp lr r0 r1 r10 r2 r3 r7 r8 r9
// Preserved: r0 r1 r4 r5 r6 sp
MPU_xTaskCreateRestricted_entry:
// DataOut: cpsr d13 fp r0 r10
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000087DC:
	xPortRaisePrivilege(cpsr)
	word32 sp_23
	branch xTaskCreateRestricted(r0, r10, fp, cpsr, d13, out sp_23) == 0x00000001 l00008802
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000087F6:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r7:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> fp:<invalid> r8:<invalid> r10:<invalid> d22:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008802:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r7:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> fp:<invalid> r8:<invalid> r10:<invalid> d22:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_xTaskCreateRestricted_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r1:<invalid> r4:r4 r0:<invalid> r3:<invalid> r7:<invalid> r2:<invalid> lr:<invalid> r9:<invalid> fp:<invalid> r8:<invalid> r10:<invalid> d22:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



word32 MPU_xTaskCreate(word32 r2, word32 r3, word32 fp, word32 cpsr, word64 d13, word32 dwArg00, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d13 fp r2 r3
// LiveOut: fp
// Trashed: NZCV d22 fp lr r0 r1 r2 r3
// Preserved: r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
MPU_xTaskCreate_entry:
// DataOut: cpsr d13 fp r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008808:
	xPortRaisePrivilege(cpsr)
	word32 fp_43
	word64 d24_44
	xTaskCreate(r2, r3, fp, cpsr, d13, out fp_43, out d24_44)
	branch 0x00000000 == 0x00000000 l00008842
// DataOut: cpsr d9 fp
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008836:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: cpsr d9 fp
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r5:r0 r8:r1 r9:r2 r10:r3 r7:<invalid> r6:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> fp:<invalid> lr:<invalid> d22:<invalid> -40(fp):<invalid> -36(fp):<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l00008842:
	return fp_43
// DataOut: cpsr d9 fp
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r5:r0 r8:r1 r9:r2 r10:r3 r7:<invalid> r6:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> fp:<invalid> lr:<invalid> d22:<invalid> -40(fp):<invalid> -36(fp):<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

MPU_xTaskCreate_exit:
// DataOut: fp
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r8:r8 r9:r9 r10:r10 r7:r7 r6:r6 r3:<invalid> r4:r4 r2:<invalid> r1:<invalid> r0:<invalid> fp:<invalid> lr:<invalid> d22:<invalid> -40(fp):<invalid> -36(fp):<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr



void MPU_vTaskAllocateMPURegions(word32 r0, word32 r1, word32 r7, word32 r8, word32 cpsr, word64 d13)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d13 r0 r1 r7 r8
// LiveOut:
// Trashed: NZCV d22 lr r0 r1 r2 r3 r7 r8 r9
// Preserved: r1 r4 r5 r6 sp
MPU_vTaskAllocateMPURegions_entry:
// DataOut: cpsr d13 r0 r1 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000884C:
	xPortRaisePrivilege(cpsr)
	branch vTaskAllocateMPURegions(r0, r1, r0, r1, r7, r8, cpsr, d13) == 0x00000001 l00008870
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008864:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r4:<invalid> r1:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> d22:<invalid> r8:<invalid> lr:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008870:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r4:<invalid> r1:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> d22:<invalid> r8:<invalid> lr:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_vTaskAllocateMPURegions_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r4:r4 r1:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> d22:<invalid> r8:<invalid> lr:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



word32 MPU_vTaskDelayUntil(word32 r0, word32 r1, word32 cpsr, ptr32 & r5Out, ptr32 & spOut, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut: lr r4 r5 sp
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: r1
MPU_vTaskDelayUntil_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008874:
	xPortRaisePrivilege(cpsr)
	word32 r4_20
	word32 lr_21
	word32 r0_22 = vTaskDelayUntil(r0, r1, cpsr, out r4_20, out lr_21)
	branch r4_20 == 0x00000001 l00008898
// DataOut: cpsr lr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000888A_thunk_fn00008890:
	word32 r4_42
	word32 r5_43
	word32 r6_44
	word32 sp_45
	fn00008890(r0_22, cpsr, dwArg00, dwArg04, dwArg08, out r4_42, out r5_43, out r6_44, out sp_45)
	return r4_42
// DataOut: cpsr lr r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r4:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000888C:
	word32 r0_33 = __mrs(cpsr)
// DataOut: cpsr lr r0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r4:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000888C_thunk_fn00008890:
	word32 r4_37
	word32 r5_38
	word32 r6_39
	word32 sp_40
	fn00008890(r0_33, cpsr, dwArg00, dwArg04, dwArg08, out r4_37, out r5_38, out r6_39, out sp_40)
	return r4_37
// DataOut: cpsr lr r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r4:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_vTaskDelayUntil_exit:
// DataOut: lr r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r4:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



word32 fn00008890(word32 r0, word32 cpsr, word32 dwArg00, word32 dwArg04, word32 dwArg08, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut: r0 r4 r5 r6 sp
// Trashed: r0 r4 r5 r6 sp
// Preserved:
// Stack args: Stack +0000(32) Stack +0004(32) Stack +0008(32)
l00008890:
	r0 = r0 | 0x00000001
	__msr(cpsr, r0)
// DataOut: cpsr lr r0 sp
// DataOut (flags): Z
// SymbolicIn:

l00008898:
	r4 = Mem0[sp:word32]
	r5 = Mem0[sp + 4:word32]
	r6 = Mem0[sp + 8:word32]
	sp = sp + 16
	return r0
// DataOut: cpsr lr r0 r4 r5 r6 sp
// DataOut (flags): Z
// SymbolicIn:

fn00008890_entry:
	def fp
	def r0
	def cpsr
	def dwArg00
	def dwArg04
	def dwArg08
	def r4Out
	def r5Out
	def r6Out
	def spOut
// DataOut: cpsr lr r0
// DataOut (flags): Z
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32) Stack +0004(32) Stack +0008(32)

l00008890:
	sp_1 = fp
	r0_3 = r0 | 0x00000001
	__msr(cpsr, r0_3)
// DataOut: cpsr lr r0
// DataOut (flags): Z
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32) Stack +0004(32) Stack +0008(32)

l00008898_in_fn00008890:
	r4_6 = dwArg00
	r5_8 = dwArg04
	r6_10 = dwArg08
	sp_11 = fp + 16
	return r0_3
// DataOut: cpsr lr r0 r4 r5 r6 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:r0 | 0x00000001

fn00008890_exit:
	r4_12 = PHI(r4_6, r4)
	r5_13 = PHI(r5_8, r5)
	r6_14 = PHI(r6_10, r6)
	sp_15 = PHI(sp_11, sp)
	use r4_12 (=> r4Out)
	use r5_13 (=> r5Out)
	use r6_14 (=> r6Out)
	use sp_15 (=> spOut)
// DataOut: r0 r4 r5 r6 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp + 16 r0:r0 | 0x00000001 r4:<invalid> r5:<invalid> r6:<invalid>



void MPU_vTaskDelay(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_vTaskDelay_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000889C:
	xPortRaisePrivilege(cpsr)
	vTaskDelay(r0, cpsr)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000088A8_thunk_fn000088AA:
	fn000088AA()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r1:<invalid> r7:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr
// Terminates process

MPU_vTaskDelay_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void fn000088AA()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l000088AA:
	NZCV = cond(r4 - 0x00000001)
	Z = NZCV (alias)
	branch Test(EQ,Z) l000088BC
// DataOut: cpsr r0 r6 sp
// DataOut (flags): Z
// SymbolicIn:

l000088B0:
	r0 = __mrs(cpsr)
	r0 = r0 | 0x00000001
	__msr(cpsr, r0)
// DataOut: cpsr r0 r6 sp
// DataOut (flags): Z
// SymbolicIn:

l000088BC:
	r3 = Mem0[sp:word32]
	r4 = Mem0[sp + 4:word32]
	r5 = Mem0[sp + 8:word32]
	sp = sp + 16
	return
// DataOut: cpsr r0 r6
// DataOut (flags): Z
// SymbolicIn:

fn000088AA_exit:
// DataOut:
// DataOut (flags): Z
// SymbolicIn:

fn000088AA_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000088AA:
	sp = fp
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_vTaskSuspendAll(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: r4 sp
MPU_vTaskSuspendAll_entry:
// DataOut: cpsr r1 r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000088C0:
	xPortRaisePrivilege(cpsr)
	vTaskSuspendAll()
	branch 0x00000000 == 0x00000000 l000088DC
// DataOut: cpsr r1 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l000088D0:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: cpsr r1 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r2:<invalid> r3:<invalid> r0:0x00000001 -8(fp):r4 -4(fp):lr

l000088DC:
	return
// DataOut: cpsr r1 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> -8(fp):r4 -4(fp):lr

MPU_vTaskSuspendAll_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r0:<invalid> r2:<invalid> r3:<invalid> -8(fp):r4 -4(fp):lr



word32 MPU_xTaskResumeAll(word32 r1, word32 cpsr, ptr32 & r6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r1
// LiveOut: r5 r6
// Trashed: NZCV lr r0 r1 r2 r3 r5 r6 r7 r8 r9
// Preserved: r0 r4 sp
MPU_xTaskResumeAll_entry:
// DataOut: cpsr r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000088E0:
	xPortRaisePrivilege(cpsr)
	word32 r1_11
	word32 r2_12
	word32 r3_13
	word32 r4_14
	word32 r5_15
	word32 r6_16
	word32 r7_17
	word32 r8_18
	word32 r9_19
	word32 sp_20
	word32 lr_21
	xTaskResumeAll(r1, cpsr, out r1_11, out r2_12, out r3_13, out r4_14, out r5_15, out r6_16, out r7_17, out r8_18, out r9_19, out sp_20, out lr_21)
	branch r4_14 == 0x00000001 l000088FE
// DataOut: cpsr r5 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000088F2:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: cpsr r5 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r0:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r2:<invalid> lr:<invalid> r1:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr

l000088FE:
	return r5_15
// DataOut: cpsr r5 r6
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r3:<invalid> r0:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r2:<invalid> lr:<invalid> r1:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr

MPU_xTaskResumeAll_exit:
// DataOut: r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r0:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r2:<invalid> lr:<invalid> r1:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr



word32 MPU_xTaskGetTickCount(word32 cpsr, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut: r0 sp
// Trashed: NZCV r0 r1 r3 r4 sp
// Preserved:
MPU_xTaskGetTickCount_entry:
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008904:
	xPortRaisePrivilege(cpsr)
	word32 sp_2
	*spOut = fp - 8
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000890A_thunk_fn0000890C:
	return fn0000890C(cpsr)
// DataOut: cpsr r0 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r0:0x00000001 -8(fp):r4 -4(fp):lr

MPU_xTaskGetTickCount_exit:
// DataOut: r0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr



word32 fn0000890C(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut: r0
// Trashed: NZCV r0 r1 r3 r4 sp
// Preserved: sp
l0000890C:
	xTaskGetTickCount()
	NZCV = cond(r4 - 0x00000001)
	Z = NZCV (alias)
	r3 = r0
	branch Test(EQ,Z) l00008922
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn:

l00008914_thunk_fn00008916:
	r0 = fn00008916(cpsr)
	return r0
// DataOut: cpsr r0 r5
// DataOut (flags): 
// SymbolicIn:

l00008914_thunk_fn00008916:
	r0 = fn00008916(cpsr)
	return r0
// DataOut: cpsr r0 r5
// DataOut (flags): 
// SymbolicIn:

fn0000890C_entry:
	def fp
	def r4
	def cpsr
	def dwArg00
	def r0
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000890C:
	sp_1 = fp
	xTaskGetTickCount()
	NZCV_3 = cond(r4 - 0x00000001)
	Z_4 = NZCV_3 (alias)
// DataOut: cpsr r5
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008910_thunk_fn00008912:
	fn00008912(cpsr, dwArg00)
	return r0
// DataOut: cpsr r0 r5
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>

fn0000890C_exit:
	r0_8 = PHI(r0, r0, r0)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r0:<invalid> r4:<invalid> r1:<invalid>



void fn00008912(word32 cpsr, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z cpsr
// LiveOut:
// Trashed: r0 r1 r3 r4 sp
// Preserved: r0
l00008912:
	branch Test(EQ,Z) l00008922_in_fn0000890C
// DataOut: cpsr r5 sp
// DataOut (flags): 
// SymbolicIn:

l00008922_in_fn0000890C:
	return
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn:

l00008914_thunk_fn00008916:
	fn00008916(cpsr)
	return
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn:

fn00008912_entry:
// DataOut: cpsr r5
// DataOut (flags): Z
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008912:
	branch Z l00008922_in_fn00008912
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008922_in_fn00008912:
	return
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r0

l00008914_thunk_fn00008916:
	fn00008916(cpsr)
	return
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r0

fn00008912_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:r0 r0:<invalid> r4:<invalid> r1:<invalid>



word32 fn00008916(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut: r0
// Trashed: r0 r1 r4 sp
// Preserved:
fn00008916_entry:
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008916:
	word32 r0_3 = __mrs(cpsr)
// DataOut: cpsr r0 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000891A_thunk_fn0000891C:
	return fn0000891C(r0_3 | 0x00000001, cpsr, dwArg00)
// DataOut: cpsr r0 r5
// DataOut (flags): 
// SymbolicIn: sp:v3 r0:<invalid>

fn00008916_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r4:<invalid>



word32 fn0000891C(word32 r0, word32 cpsr, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut: r0
// Trashed: r0 r1 r4 sp
// Preserved:
l0000891C:
	__msr(cpsr, r0)
// DataOut: cpsr r3 r5 sp
// DataOut (flags): 
// SymbolicIn:

l00008922:
	return r0
// DataOut: cpsr r0 r5
// DataOut (flags): 
// SymbolicIn:

fn0000891C_entry:
// DataOut: cpsr r0 r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000891C:
	__msr(cpsr, r0)
// DataOut: cpsr r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008922_in_fn0000891C:
	return r3
// DataOut: cpsr r0 r5
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r0

fn0000891C_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp + 8 r1:r0 r0:r3 r4:<invalid>



void MPU_uxTaskGetNumberOfTasks(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: r0 r4 sp
MPU_uxTaskGetNumberOfTasks_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008928:
	xPortRaisePrivilege(cpsr)
	uxTaskGetNumberOfTasks()
	branch 0x00000000 == 0x00000000 l00008946
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000893A:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr

l00008946:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr

MPU_uxTaskGetNumberOfTasks_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr



void MPU_pcTaskGetName(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0
// Preserved: r0 r3 r4 r5 sp
MPU_pcTaskGetName_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000894C:
	xPortRaisePrivilege(cpsr)
	pcTaskGetName(r0)
	branch 0x00000000 == 0x00000000 l0000896E
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008962:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000896E:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_pcTaskGetName_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_vTaskSetTimeOutState(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r3 r4 r5 sp
MPU_vTaskSetTimeOutState_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008974:
	xPortRaisePrivilege(cpsr)
	vTaskSetTimeOutState(r0)
	branch 0x00000000 == 0x00000000 l00008994
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008988:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008994:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_vTaskSetTimeOutState_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_xTaskCheckForTimeOut(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 sp
// Preserved: r1
MPU_xTaskCheckForTimeOut_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008998:
	xPortRaisePrivilege(cpsr)
// DataOut: cpsr r1 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l000089A2_thunk_fn000089A4:
	fn000089A4(r1, r0, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:r1 r0:0x00000001 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_xTaskCheckForTimeOut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void fn000089A4(word32 r1, word32 r5, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r1 r5
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 sp
// Preserved:
l000089A4:
	r4 = r0
	r0 = r5
	r0 = xTaskCheckForTimeOut(r0, r1, cpsr, out r3, out r4, out r5, out r6, out sp)
	NZCV = cond(r4 - 0x00000001)
	Z = NZCV (alias)
	r3 = r0
	branch Test(EQ,Z) l000089BE
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn:

l000089B0_thunk_fn000089B2:
	fn000089B2(cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l000089B0_thunk_fn000089B2:
	fn000089B2(cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn000089A4_entry:
	def fp
	def r0
	def r5
	def r1
	def cpsr
	def Mem0
// DataOut: cpsr r1 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l000089A4:
	sp_1 = fp
	r4_3 = r0
	r0_5 = r5
	r0_13 = xTaskCheckForTimeOut(r0_5, r1, cpsr, out r3_8, out r4_9, out r5_10, out r6_11, out sp_12)
	NZCV_14 = cond(r4_9 - 0x00000001)
	Z_15 = NZCV_14 (alias)
	r3_16 = r0_13
	branch r4_9 == 0x00000001 l000089BE_in_fn000089A4
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000089BE_in_fn000089A4:
	r0_22 = r3_16
	r4_24 = Mem0[sp_12:word32]
	r5_25 = Mem0[sp_12 + 4:word32]
	r6_26 = Mem0[sp_12 + 8:word32]
	sp_27 = sp_12 + 16
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r6:<invalid> r1:<invalid> r5:<invalid> r2:<invalid>

l000089B0_thunk_fn000089B2:
	fn000089B2(cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r6:<invalid> r1:<invalid> r5:<invalid> r2:<invalid>

fn000089A4_exit:
	r0_17 = PHI(r0_22, r0_13, r0, r0)
	r4_18 = PHI(r4_24, r4_9, r4, r4)
	r5_19 = PHI(r5_25, r5_10, r5, r5)
	r6_20 = PHI(r6_26, r6_11, r6, r6)
	sp_21 = PHI(sp_27, sp_12, sp, sp)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r2:<invalid>



void fn000089B2(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: r0 r4 r5 r6 sp
// Preserved:
fn000089B2_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(32)

l000089B2:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000089BE:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:v3 r0:<invalid>

fn000089B2_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:v3 + 16 r0:r3 r4:<invalid> r5:<invalid> r6:<invalid>



void MPU_xTaskGenericNotify(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3 r4
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r9
// Preserved: r0 r1 r2 r4 r5 r6 r7 r8 sp
MPU_xTaskGenericNotify_entry:
// DataOut: cpsr r0 r1 r2 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000089C4:
	xPortRaisePrivilege(cpsr)
	xTaskGenericNotify(r0, r1, r2, r3, cpsr, r4)
	branch 0x00000000 == 0x00000000 l000089F4
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000089E8:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r0 r6:r1 r7:r2 r8:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000089F4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r0 r6:r1 r7:r2 r8:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

MPU_xTaskGenericNotify_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r7:r7 r8:r8 r3:<invalid> r4:r4 r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void MPU_xTaskNotifyWait(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r0 r1 r2 r4 r5 r6 r7 r8 sp
MPU_xTaskNotifyWait_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000089FC:
	xPortRaisePrivilege(cpsr)
	word32 sp_30
	branch xTaskNotifyWait(r0, r1, r2, r3, cpsr, out sp_30) == 0x00000001 l00008A2C
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008A20:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008A2C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

MPU_xTaskNotifyWait_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r7:r7 r8:r8 r3:<invalid> r4:r4 r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void MPU_ulTaskNotifyTake(word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r1
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_ulTaskNotifyTake_entry:
// DataOut: cpsr r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008A34:
	xPortRaisePrivilege(cpsr)
	ulTaskNotifyTake(r1, cpsr)
	branch 0x00000000 == 0x00000000 l00008A5A
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l00008A4E:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: r3:r0 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008A5A:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: r3:r0 r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_ulTaskNotifyTake_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: r3:r0 r0:r0 sp:fp r4:r4 r5:r5 r6:r6 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void MPU_xTaskNotifyStateClear(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r0 r3 r4 r5 sp
MPU_xTaskNotifyStateClear_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008A60:
	xPortRaisePrivilege(cpsr)
	xTaskNotifyStateClear(r0, cpsr)
	branch 0x00000001 == 0x00000001 l00008A82
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008A76:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008A82:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_xTaskNotifyStateClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



word32 MPU_xQueueGenericCreate(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut: r9
// Trashed: NZCV lr r0 r1 r2 r8 r9
// Preserved: r0 r1 r2 r3 r4 r5 r6 r7 sp
MPU_xQueueGenericCreate_entry:
// DataOut: cpsr d24 d9 fp r0 r1 r10
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008A88:
	xPortRaisePrivilege(cpsr)
	word32 r1_27
	word32 r3_28
	word32 r9_29
	word32 lr_30
	xQueueGenericCreate(r0, r1, cpsr, out r1_27, out r3_28, out r9_29, out lr_30)
	branch 0x00000000 == 0x00000000 l00008AB2
// DataOut: cpsr d24 d9 fp r10 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008AA6:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: cpsr d24 d9 fp r10 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r6:r1 r7:<invalid> r2:<invalid> r4:<invalid> r1:<invalid> r0:<invalid> r3:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00008AB2:
	return r9_29
// DataOut: cpsr d24 d9 fp r10 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r6:r1 r7:<invalid> r2:<invalid> r4:<invalid> r1:<invalid> r0:<invalid> r3:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

MPU_xQueueGenericCreate_exit:
// DataOut: r9
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r7:r7 r2:<invalid> r4:r4 r1:<invalid> r0:<invalid> r3:r3 lr:<invalid> r8:<invalid> r9:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



void MPU_xQueueGenericReset(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r7
// Preserved: r0 r1 r4 r5 r6 sp
MPU_xQueueGenericReset_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008AB8:
	xPortRaisePrivilege(cpsr)
	word32 r3_20
	word32 lr_21
	xQueueGenericReset(r0, r1, cpsr, out r3_20, out lr_21)
	branch 0x00000001 == 0x00000001 l00008ADE
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008AD2:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008ADE:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_xQueueGenericReset_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r1:<invalid> r4:r4 r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void MPU_xQueueGenericSend(word32 r0, word32 r1, word32 r3, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr lr r0 r1 r3
// LiveOut:
// Trashed: NZCV lr r0 r1 r10 r2 r3 r9
// Preserved: r0 r1 r2 r4 r5 r6 r7 r8 sp
MPU_xQueueGenericSend_entry:
// DataOut: cpsr lr r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008AE4:
	xPortRaisePrivilege(cpsr)
	word32 sp_30
	branch xQueueGenericSend(r0, r1, r3, lr, cpsr, out sp_30) == 0x00000001 l00008B14
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008B08:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r10:<invalid> r9:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008B14:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r10:<invalid> r9:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

MPU_xQueueGenericSend_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r7:r7 r8:r8 r3:<invalid> r4:r4 r2:<invalid> r1:<invalid> r0:<invalid> r10:<invalid> r9:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void MPU_uxQueueMessagesWaiting(word32 r0, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r0 r3 r4 r5 sp
MPU_uxQueueMessagesWaiting_entry:
// DataOut: cpsr r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008B1C:
	xPortRaisePrivilege(cpsr)
	uxQueueMessagesWaiting(r0, r3, cpsr)
	branch 0x00000001 == 0x00000001 l00008B3E
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008B32:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008B3E:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_uxQueueMessagesWaiting_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_uxQueueSpacesAvailable(word32 r0, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r0 r3 r4 r5 sp
MPU_uxQueueSpacesAvailable_entry:
// DataOut: cpsr r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008B44:
	xPortRaisePrivilege(cpsr)
	uxQueueSpacesAvailable(r0, r3, cpsr)
	branch 0x00000001 == 0x00000001 l00008B66
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008B5A:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008B66:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_uxQueueSpacesAvailable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



word32 MPU_xQueueGenericReceive(word32 r0, word32 r1, word32 r3, word32 lr, word32 cpsr, ptr32 & r9Out, ptr32 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr lr r0 r1 r3
// LiveOut: r10 r3 r9
// Trashed: NZCV lr r0 r1 r10 r2 r3 r9
// Preserved: r0 r1 r2 r4 r5 r6 r7 r8 sp
MPU_xQueueGenericReceive_entry:
// DataOut: cpsr d24 d9 lr r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008B6C:
	xPortRaisePrivilege(cpsr)
	word32 r4_30
	word32 r9_31
	word32 r10_32
	word32 sp_33
	word32 r0_34 = xQueueGenericReceive(r0, r1, r3, lr, cpsr, out r4_30, out r9_31, out r10_32, out sp_33)
	branch r4_30 == 0x00000001 l00008B9C
// DataOut: cpsr d24 d9 r10 r3 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008B90:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: cpsr d24 d9 r10 r3 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r10:<invalid> r9:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008B9C:
	return r0_34
// DataOut: cpsr d24 d9 r10 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r10:<invalid> r9:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

MPU_xQueueGenericReceive_exit:
// DataOut: r10 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r7:r7 r8:r8 r3:<invalid> r4:r4 r2:<invalid> r1:<invalid> r0:<invalid> r10:<invalid> r9:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void MPU_xQueuePeekFromISR(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r7
// Preserved: r0 r1 r4 r5 r6 sp
MPU_xQueuePeekFromISR_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008BA4:
	xPortRaisePrivilege(cpsr)
	word32 sp_20
	branch xQueuePeekFromISR(r0, r1, cpsr, out sp_20) == 0x00000001 l00008BCA
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008BBE:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008BCA:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_xQueuePeekFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r1:<invalid> r4:r4 r0:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void MPU_xQueueGetMutexHolder(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r0 r3 r4 r5 sp
MPU_xQueueGetMutexHolder_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008BD0:
	xPortRaisePrivilege(cpsr)
	xQueueGetMutexHolder(r0, cpsr)
	branch 0x00000001 == 0x00000001 l00008BF2
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008BE6:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008BF2:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_xQueueGetMutexHolder_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_xQueueCreateMutex(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV lr r0 r1 r10 r2 r6 r7 r8 r9
// Preserved: r0 r3 r4 r5 sp
MPU_xQueueCreateMutex_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008BF8:
	xPortRaisePrivilege(cpsr)
	word32 sp_17
	branch xQueueCreateMutex(cpsr, out sp_17) == 0x00000001 l00008C1A
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008C0E:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r6:<invalid> lr:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008C1A:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r6:<invalid> lr:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_xQueueCreateMutex_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> r1:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r6:<invalid> lr:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_xQueueTakeMutexRecursive(word32 r0, word32 r1, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr lr r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r10 r2 r3 r7 r8 r9
// Preserved: r0 r1 r4 r5 r6 sp
MPU_xQueueTakeMutexRecursive_entry:
// DataOut: cpsr lr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008C20:
	xPortRaisePrivilege(cpsr)
	word32 sp_20
	branch xQueueTakeMutexRecursive(r0, 0x00000001, r0, r1, lr, cpsr, out sp_20) == 0x00000001 l00008C46
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008C3A:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008C46:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_xQueueTakeMutexRecursive_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r1:<invalid> r4:r4 r0:<invalid> r3:<invalid> r2:<invalid> r10:<invalid> r9:<invalid> r7:<invalid> r8:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void MPU_xQueueGiveMutexRecursive(word32 r0, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr lr r0
// LiveOut:
// Trashed: NZCV lr r0 r1 r10 r2 r6 r7 r8 r9
// Preserved: r0 r3 r4 r5 sp
MPU_xQueueGiveMutexRecursive_entry:
// DataOut: cpsr lr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008C4C:
	xPortRaisePrivilege(cpsr)
	xQueueGiveMutexRecursive(r0, lr, cpsr)
	branch 0x00000001 == 0x00000001 l00008C6E
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008C62:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r6:<invalid> lr:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008C6E:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r6:<invalid> lr:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_xQueueGiveMutexRecursive_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> r1:<invalid> r10:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r6:<invalid> lr:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_vQueueDelete(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_vQueueDelete_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008C74:
	xPortRaisePrivilege(cpsr)
	vQueueDelete()
	branch 0x00000000 == 0x00000000 l00008C94
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l00008C88:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008C94:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_vQueueDelete_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: r0:<invalid> sp:fp r3:r3 r4:r4 r5:r5 -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_pvPortMalloc(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r6 r7 r8 r9
// Preserved: r0 r3 r4 r5 sp
MPU_pvPortMalloc_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008C98:
	xPortRaisePrivilege(cpsr)
	word32 r1_17
	word32 r3_18
	word32 r4_19
	word32 r5_20
	word32 r6_21
	word32 r7_22
	word32 r8_23
	word32 r9_24
	word32 sp_25
	word32 lr_26
	pvPortMalloc(r0, cpsr, out r1_17, out r3_18, out r4_19, out r5_20, out r6_21, out r7_22, out r8_23, out r9_24, out sp_25, out lr_26)
	branch r4_19 == 0x00000001 l00008CBA
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008CAE:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> r1:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008CBA:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> r1:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_pvPortMalloc_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> r7:<invalid> r1:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_vPortFree(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0
// Preserved: r3 r4 r5 sp
MPU_vPortFree_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008CC0:
	xPortRaisePrivilege(cpsr)
	vPortFree()
	branch 0x00000000 == 0x00000000 l00008CE0
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008CD4:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008CE0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_vPortFree_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_vPortInitialiseBlocks(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: r4 sp
MPU_vPortInitialiseBlocks_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008CE4:
	xPortRaisePrivilege(cpsr)
	vPortInitialiseBlocks()
	branch 0x00000000 == 0x00000000 l00008D00
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008CF4:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r2:0x00000000 r3:<invalid> r0:0x00000001 -8(fp):r4 -4(fp):lr

l00008D00:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r0:<invalid> r2:0x00000000 r3:<invalid> -8(fp):r4 -4(fp):lr

MPU_vPortInitialiseBlocks_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r0:<invalid> r2:0x00000000 r3:<invalid> -8(fp):r4 -4(fp):lr



void MPU_xPortGetFreeHeapSize(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: r0 r4 sp
MPU_xPortGetFreeHeapSize_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008D04:
	xPortRaisePrivilege(cpsr)
	xPortGetFreeHeapSize()
	branch 0x00000000 == 0x00000000 l00008D22
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008D16:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr

l00008D22:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr

MPU_xPortGetFreeHeapSize_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr



void MPU_xEventGroupCreate(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r5 r6 r7 r8 r9
// Preserved: r0 r4 sp
MPU_xEventGroupCreate_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008D28:
	xPortRaisePrivilege(cpsr)
	xEventGroupCreate(cpsr)
	branch 0x00000000 == 0x00000000 l00008D46
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008D3A:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r7:<invalid> r5:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr

l00008D46:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r7:<invalid> r5:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr

MPU_xEventGroupCreate_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r7:<invalid> r5:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr



void MPU_xEventGroupWaitBits(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, word64 d13, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr d13 r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV d22 lr r0 r1 r2 r3
// Preserved: r0 r1 r2 r4 r5 r6 r7 r8 r9 sp
MPU_xEventGroupWaitBits_entry:
// DataOut: cpsr d13 r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008D4C:
	xPortRaisePrivilege(cpsr)
	word32 r5_37
	word32 r6_38
	word32 r8_39
	word32 r9_40
	word32 sp_41
	word64 d24_42
	branch xEventGroupWaitBits(r0, r1, r2, r3, cpsr, d13, out r5_37, out r6_38, out r8_39, out r9_40, out sp_41, out d24_42) == 0x00000001 l00008D82
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008D76:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r8:<invalid> r9:<invalid> r7:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> d22:<invalid> lr:<invalid> -40(fp):<invalid> -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00008D82:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r8:<invalid> r9:<invalid> r7:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> d22:<invalid> lr:<invalid> -40(fp):<invalid> -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

MPU_xEventGroupWaitBits_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r8:r8 r9:r9 r7:r7 r3:<invalid> r4:r4 r2:<invalid> r1:<invalid> r0:<invalid> d22:<invalid> lr:<invalid> -40(fp):<invalid> -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr



void MPU_xEventGroupClearBits(word32 r0, word32 r1, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r0 r1 r4 r5 r6 sp
MPU_xEventGroupClearBits_entry:
// DataOut: cpsr r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008D8C:
	xPortRaisePrivilege(cpsr)
	xEventGroupClearBits(r0, r1, r3, cpsr)
	branch 0x00000001 == 0x00000001 l00008DB2
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008DA6:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008DB2:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_xEventGroupClearBits_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r1:<invalid> r4:r4 r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void MPU_xEventGroupSetBits(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r7 r8 r9
// Preserved: r0 r1 r4 r5 r6 sp
MPU_xEventGroupSetBits_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008DB8:
	xPortRaisePrivilege(cpsr)
	word32 r4_20
	word32 r5_21
	word32 r6_22
	word32 r7_23
	word32 sp_24
	xEventGroupSetBits(r0, r1, cpsr, out r4_20, out r5_21, out r6_22, out r7_23, out sp_24)
	branch r4_20 == 0x00000001 l00008DDE
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008DD2:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r7:<invalid> r2:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008DDE:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r7:<invalid> r2:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_xEventGroupSetBits_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r1:<invalid> r4:r4 r0:<invalid> r3:<invalid> r7:<invalid> r2:<invalid> lr:<invalid> r8:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void MPU_xEventGroupSync(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r9
// Preserved: r0 r1 r2 r4 r5 r6 r7 r8 sp
MPU_xEventGroupSync_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008DE4:
	xPortRaisePrivilege(cpsr)
	word32 sp_30
	branch xEventGroupSync(r0, r1, cpsr, out sp_30) == 0x00000001 l00008E14
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008E08:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008E14:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

MPU_xEventGroupSync_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r7:r7 r8:r8 r3:<invalid> r4:r4 r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r9:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void MPU_vEventGroupDelete(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r6 r7 r8 r9
// Preserved: r3 r4 r5 sp
MPU_vEventGroupDelete_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008E1C:
	xPortRaisePrivilege(cpsr)
	word32 sp_18
	branch vEventGroupDelete(r0, r1, cpsr, out sp_18) == 0x00000001 l00008E3C
// DataOut: cpsr sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008E30:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r1:<invalid> lr:<invalid> r2:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008E3C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r1:<invalid> lr:<invalid> r2:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_vEventGroupDelete_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r1:<invalid> lr:<invalid> r2:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



word32 xCoRoutineCreate(word32 r2, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r2
// LiveOut: r1
// Trashed: NZCV lr r0 r1 r2
// Preserved: fp r10 r3 r4 r5 r6 r7 r8 r9 sp
xCoRoutineCreate_entry:
// DataOut: cpsr r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008E40:
	word32 r1_31
	word32 r3_32
	word32 r4_33
	word32 r6_35
	word32 r7_36
	word32 r8_37
	word32 r9_38
	word32 sp_39
	word32 lr_40
	word32 r5_106
	word32 r0_41 = pvPortMalloc(0x00000038, cpsr, out r1_31, out r3_32, out r4_33, out r5_106, out r6_35, out r7_36, out r8_37, out r9_38, out sp_39, out lr_40)
	branch r0_41 == 0x00000000 l00008EE4
// DataOut: cpsr r0 r1 r10 r5 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008EE4:
	return r1_31
// DataOut: cpsr r1
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r10:r2 r4:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> r1:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00008E54:
	word32 r7_61 = Mem0[0x00008EEC:word32]
	branch Mem0[r7_61:word32] == 0x00000000 l00008EAC
// DataOut: cpsr r0 r10 r4 r5 r7 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r10:r2 r4:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> r1:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00008EAC:
	Mem109[r7_61:word32] = r0_41
	vListInitialise(r7_61 + 4)
	vListInitialise(r7_61 + 0x00000018)
	vListInitialise(r7_61 + 0x0000002C)
	vListInitialise(r7_61 + 0x00000040)
	vListInitialise(r7_61 + 0x00000054)
	Mem123[r7_61 + 104:word32] = r7_61 + 0x0000002C
	Mem124[r7_61 + 108:word32] = r7_61 + 0x00000040
// DataOut: cpsr r10 r4 r5 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r10:r2 r7:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00008E5C:
// DataOut: cpsr r10 r4 r5 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r10:r2 r7:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r6:<invalid> lr:<invalid> r8:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00008E60:
	branch r5_106 <u 0x00000001 l00008E66
// DataOut: cpsr r10 r4 r5 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r10:r2 r7:<invalid> r4:<invalid> r3:<invalid> r8:<invalid> r1:<invalid> r2:<invalid> fp:<invalid> r6:<invalid> lr:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00008E64_1:
	r5_106 = 0x00000001
// DataOut: cpsr r10 r4 r5 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r10:r2 r7:<invalid> r4:<invalid> r3:<invalid> r8:<invalid> r1:<invalid> r2:<invalid> fp:<invalid> r6:<invalid> lr:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00008E66:
	Mem74[r0_41 + 104:word16] = 0x0000
	Mem75[r0_41 + 44:word32] = r5_106
	Mem76[r0_41 + 48:word32] = r2
	Mem77[r0_41:word32] = r9_38
	vListInitialiseItem(r0_41 + 4)
	vListInitialiseItem(r0_41 + 0x00000018)
	word32 r0_81 = Mem77[r0_41 + 44:word32]
	word32 r5_83 = 0x00000002 - r5_106
	branch r0_81 <=u Mem77[r7_61 + 112:word32] l00008E92
// DataOut: cpsr r0 r4 r5 r6 r7 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r10:r2 r7:<invalid> r4:<invalid> r3:<invalid> r8:<invalid> r1:<invalid> r2:<invalid> fp:<invalid> r6:<invalid> lr:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00008E90_1:
	Mem105[r7_61 + 112:word32] = r0_81
// DataOut: cpsr r0 r4 r5 r6 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r10:r2 r7:<invalid> r4:<invalid> r3:<invalid> r8:<invalid> r1:<invalid> r2:<invalid> fp:<invalid> r6:<invalid> lr:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00008E92:
	Mem88[r0_41 + 24:word32] = r5_83
	Mem89[r0_41 + 16:word32] = r0_41
	Mem90[r0_41 + 36:word32] = r0_41
	word32 r3_92
	vListInsertEnd(r7_61 + 0x00000004 + r0_81 * 0x00000014, r0_41 + 4, out r3_92)
	return r0_41 + 4
// DataOut: cpsr r1
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r10:r2 r7:<invalid> r4:<invalid> r3:<invalid> r8:<invalid> r1:<invalid> r2:<invalid> fp:<invalid> r6:<invalid> lr:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

xCoRoutineCreate_exit:
// DataOut: r1
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 r0:<invalid> r5:r5 r10:r10 r3:r3 r4:r4 r6:r6 r7:r7 r8:r8 fp:fp r2:<invalid> r1:<invalid> lr:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr



bool vCoRoutineAddToDelayedList(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut: Z
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7 sp
// Preserved: lr r4 r5 r6 sp
vCoRoutineAddToDelayedList_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008EF0:
	word32 r4_14 = Mem0[0x00008F28:word32]
	word32 r5_18 = Mem0[r4_14 + 116:word32] + r0
	uxListRemove(Mem0[r4_14:word32] + 0x00000004)
	word32 r3_22 = Mem0[r4_14 + 116:word32]
	word32 r1_23 = Mem0[r4_14:word32]
	Mem26[r1_23 + 4:word32] = r5_18
	branch r5_18 >=u r3_22 l00008F0E
// DataOut: cpsr r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008F0C_1:
// DataOut: cpsr r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r1 r4:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008F0E:
	word32 r0_31
	word32 r1_32
	word32 r2_33
	word32 r3_34
	word32 r6_35
	word32 r7_36
	bool Z_37 = vListInsert(Mem26[r4_14 + 104:word32], r1_23 + 0x00000004, r4_14, r5_18, out r0_31, out r1_32, out r2_33, out r3_34, out r6_35, out r7_36)
	branch r6_35 == 0x00000000 l00008F26
// DataOut: cpsr r4 r6 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r6:r1 r4:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008F26:
	return Z_37
// DataOut: cpsr
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008F18:
	word32 r1_52 = Mem26[r4_14:word32]
	word32 r4_54 = Mem26[fp - 16:word32]
	word32 r5_55 = Mem26[fp - 12:word32]
// DataOut: cpsr r0 r1 r4 r5
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008F22_thunk_vListInsert:
	word32 r0_63
	word32 r1_64
	word32 r2_65
	word32 r3_66
	word32 r6_67
	word32 r7_68
	return vListInsert(r6_35, r1_52 + 0x00000018, r4_54, r5_55, out r0_63, out r1_64, out r2_65, out r3_66, out r6_67, out r7_68)
// DataOut: cpsr
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> r2:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

vCoRoutineAddToDelayedList_exit:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> r2:<invalid> r7:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void vCoRoutineSchedule(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 r7 r8 sp
// Preserved: lr
vCoRoutineSchedule_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008F2C:
	word32 r5_16 = Mem0[0x00009088:word32]
	branch Mem0[r5_16 + 84:word32] == 0x00000000 l00008F82
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008F36:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r4_220 = Mem0[Mem0[r5_16 + 96:word32] + 12:word32]
	uxListRemove(r4_220 + 0x00000018)
	__msr(cpsr, 0x00000000)
	uxListRemove(r4_220 + 0x00000004)
	word32 r3_226 = Mem0[r4_220 + 44:word32]
	word32 r0_232 = r5_16 + 0x00000004 + r3_226 * 0x00000014
	branch r3_226 <=u Mem0[r5_16 + 112:word32] l00008F78
// DataOut: cpsr r0 r1 r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008F76_1:
	Mem241[r5_16 + 112:word32] = r3_226
// DataOut: cpsr r0 r1 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r8:<invalid> r4:<invalid> r0:<invalid> r6:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008F78:
	word32 r3_233
	vListInsertEnd(r0_232, r4_220 + 0x00000004, out r3_233)
	word32 r3_235 = Mem0[r5_16 + 84:word32]
	branch r3_235 != 0x00000000 l00008F80_thunk_fn0000913C
// DataOut: cpsr r0 r1 r3 r5
// DataOut (flags): C
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r8:<invalid> r4:<invalid> r0:<invalid> r6:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008F80_thunk_fn0000913C:
	fn0000913C(r0_232, r4_220 + 0x00000004, r3_235)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r8:<invalid> r4:<invalid> r0:<invalid> r6:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008F82:
	word32 sp_51
	word32 r0_52 = MPU_xTaskGetTickCount(cpsr, out sp_51)
	word32 r3_165 = Mem0[r5_16 + 116:word32]
	word32 r0_166 = r0_52 - Mem0[r5_16 + 120:word32]
	word32 r8_57 = Mem0[0x00009090:word32]
	Mem58[r5_16 + 124:word32] = r0_166
// DataOut: cpsr r0 r3 r5 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r8:<invalid> r4:<invalid> r0:<invalid> r6:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008F94:
	branch r0_166 == 0x00000000 l00009014
// DataOut: cpsr r0 r3 r5 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> r6:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008F98:
	word32 r2_171
	r3_165 = r3_165 + 0x00000001
	Mem167[r5_16 + 116:word32] = r3_165
	r0_166 = r0_166 - 0x00000001
	Mem168[r5_16 + 124:word32] = r0_166
	branch r3_165 == 0x00000000 l0000904C
// DataOut: cpsr r0 r3 r5 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> r6:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000904C:
	r2_171 = Mem168[r5_16 + 108:word32]
	Mem214[r5_16 + 108:word32] = Mem168[r5_16 + 104:word32]
	Mem215[r5_16 + 104:word32] = r2_171
// DataOut: cpsr r0 r2 r3 r5 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> r6:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FA4:
	r2_171 = Mem168[r5_16 + 104:word32]
// DataOut: cpsr r0 r2 r3 r5 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> r6:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FA6:
	word32 r1_172 = Mem168[r2_171:word32]
	branch r1_172 == 0x00000000 l00008FAA_thunk_GPIOIntTypeGet
// DataOut: cpsr r0 r1 r2 r3 r5 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FAA_thunk_GPIOIntTypeGet:
	GPIOIntTypeGet(r0_166, r1_172)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FAC:
	word32 r4_176 = Mem168[Mem168[r2_171 + 12:word32] + 12:word32]
	branch r3_165 >=u Mem168[r4_176 + 4:word32] l00008FC4
// DataOut: cpsr r0 r3 r4 r5 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FC4:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	uxListRemove(r4_176 + 0x00000004)
	branch Mem168[r4_176 + 40:word32] == 0x00000000 l00008FE8
// DataOut: cpsr r0 r4 r5 r6 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FE4:
	uxListRemove(r4_176 + 0x00000018)
// DataOut: cpsr r4 r5 r6 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:0x00000000 r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FE8:
	__msr(cpsr, 0x00000000)
	word32 r3_186 = Mem168[r4_176 + 44:word32]
	word32 r0_192 = r8_57 + r3_186 * 0x00000014
	branch r3_186 <=u Mem168[r5_16 + 112:word32] l00009000
// DataOut: cpsr r0 r1 r3 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:0x00000000 r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FFE_1:
	Mem209[r5_16 + 112:word32] = r3_186
// DataOut: cpsr r0 r1 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009000:
	word32 r3_193
	vListInsertEnd(r0_192, r4_176 + 0x00000004, out r3_193)
	word32 r3_195 = Mem168[r5_16 + 104:word32]
	word32 r2_196 = Mem168[r3_195:word32]
	branch r2_196 != 0x00000000 l0000900A_thunk_fn000091B8
// DataOut: cpsr r0 r1 r2 r3 r5 sp
// DataOut (flags): C
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000900A_thunk_fn000091B8:
	fn000091B8(r0_192, r4_176 + 0x00000004, r2_196, r3_195)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000900C:
	r3_165 = Mem168[r5_16 + 116:word32]
	word32 r0_203 = Mem168[r5_16 + 124:word32]
	branch r0_203 != 0x00000000 l00009012_thunk_fn00009198
// DataOut: cpsr r0 r1 r2 r3 r5 sp
// DataOut (flags): C
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009012_thunk_fn00009198:
	fn00009198(r0_203, r4_176 + 0x00000004, r2_196, r3_165)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009014:
	word32 r2_130
	word32 r1_74 = Mem58[r5_16 + 112:word32]
	Mem75[r5_16 + 120:word32] = r3_165
	word32 r3_131 = r1_74 << 2
	branch Mem75[r5_16 + r1_74 * 0x00000014 + 4:word32] != 0x00000000 l00009084
// DataOut: cpsr r1 r3 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> r6:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009084:
	r2_130 = r1_74
// DataOut: cpsr r2 r3 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009026:
	branch r1_74 == 0x00000000 l00009080
// DataOut: cpsr r1 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009080:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009028:
	r3_131 = r1_74 - 0x00000001 << 2
	r2_130 = r1_74 - 0x00000001
	branch Mem75[r5_16 + (r3_131 + (r1_74 - 0x00000001) << 0x00000002) + 4:word32] != 0x00000000 l00009056
// DataOut: cpsr r1 r2 r3 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009036:
	branch r1_74 == 0x00000001 l00009046
// DataOut: cpsr r1 r2 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009038:
	r3_131 = r1_74 - 0x00000002 << 2
	r2_130 = r1_74 - 0x00000002
	branch Mem75[r5_16 + (r3_131 + (r1_74 - 0x00000002) << 0x00000002) + 4:word32] != 0x00000000 l00009056
// DataOut: cpsr r2 r3 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009056:
	Mem140[r5_16 + 112:word32] = r2_130
// DataOut: cpsr r2 r3 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009058:
	word32 r2_129
	word32 r3_84 = r3_131 + r2_130
	word32 r1_86 = r5_16 + (r3_84 << 2)
	word32 r2_89 = Mem75[Mem75[r1_86 + 8:word32] + 4:word32]
	word32 r3_90 = (r3_84 << 2) + Mem75[0x0000908C:word32]
	Mem96[r1_86 + 8:word32] = r2_89
	r2_129 = r2_89
	branch r2_89 != r3_90 l0000906E
// DataOut: cpsr r1 r2 r5 sp
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000906C_1:
	r2_129 = Mem96[r2_89 + 4:word32]
// DataOut: cpsr r1 r2 r5 sp
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000906E:
	word32 r0_98 = Mem96[r2_129 + 12:word32]
	branch r2_89 != r3_90 l00009074
// DataOut: cpsr r0 r1 r2 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009072_1:
	Mem128[r1_86 + 8:word32] = r2_129
// DataOut: cpsr r0 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009074:
	Mem99[r5_16:word32] = r0_98
	word32 r3_100 = Mem99[r0_98:word32]
	word32 sp_110
	word32 r4_111
	word32 r5_112
	word32 r6_113
	word32 r7_114
	word32 r8_115
	word32 lr_116
	word32 pc_117
	word32 r3_118
	word32 cpsr_119
	word32 r0_120
	word32 r2_121
	byte NZCV_122
	word32 r1_123
	byte ZC_124
	byte Z_125
	byte C_126
	byte NZC_127
	call r3_100 (retsize: 0;)
		uses: C_94,cpsr,dwLoc04_14,dwLoc08_12,dwLoc0C_10,dwLoc10_8,dwLoc14_6,dwLoc18_4,lr_107,NZC_95,NZCV_91,pc,r0_98,r1_101,r2_97,r3_100,r4_102,r5_103,r6_104,r7_105,r8_106,sp_108,Z_93,ZC_92
		defs: C_126,cpsr_119,lr_116,NZC_127,NZCV_122,pc_117,r0_120,r1_123,r2_121,r3_118,r4_111,r5_112,r6_113,r7_114,r8_115,sp_110,Z_125,ZC_124
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009046:
	Mem145[r5_16 + 112:word32] = r2_130
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

vCoRoutineSchedule_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:<invalid> r8:<invalid> r4:<invalid> r0:<invalid> r6:<invalid> r2:<invalid> r1:<invalid> lr:lr -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FB6:
// DataOut: cpsr r0 r3 r5 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



bool xCoRoutineRemoveFromEventList(word32 r0, ptr32 & r0Out, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut: Z r0 r1 r2 r3
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
xCoRoutineRemoveFromEventList_entry:
// DataOut: cpsr d24 d9 fp lr r0 r10 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009094:
	word32 r4_14 = Mem0[Mem0[r0 + 12:word32] + 12:word32]
	word32 r5_15 = Mem0[0x000090C0:word32]
	uxListRemove(r4_14 + 0x00000018)
	word32 r3_21
	word32 r2_22
	*r2Out = vListInsertEnd(r5_15 + 0x00000054, r4_14 + 0x00000018, out r3_21)
	word32 r0_24 = Mem0[r4_14 + 44:word32]
	word32 r3_25 = Mem0[Mem0[r5_15:word32] + 44:word32]
	*r3Out = r3_25
	word32 r1_20
	*r1Out = r4_14 + 0x00000018
	bool Z_27 = (bool) cond(r0_24 - r3_25)
	branch r0_24 >=u r3_25 l000090BC
// DataOut: cpsr d24 d9 fp lr r1 r10 r2 r3 r7 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp

l000090BA_1:
// DataOut: cpsr d24 d9 fp lr r1 r10 r2 r3 r7 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000090BC:
	word32 r0_29
	*r0Out = 0x00000001
	return Z_27
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r7 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

xCoRoutineRemoveFromEventList_exit:
// DataOut: r0 r1 r2 r3
// DataOut (flags): Z
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r5:r5 r6:r6 r0:0x00000001 r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void GPIOGetIntNumber(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: sp
GPIOGetIntNumber_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l000090C4:
	word32 r3_3 = Mem0[0x00009104:word32]
	branch r0 == r3_3 l000090FE
// DataOut: r0 r3
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000090FE:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090CA:
	branch r0 >u r3_3 l000090DE
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090DE:
	word32 r3_23 = Mem0[0x00009108:word32]
	branch r0 == r3_23 l000090F6
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090F6:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090E4:
	branch r0 != r3_23 + 0x0001D000 l000090F0
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090EC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090CC:
	branch r0 == 0x40004000 l000090FA
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090FA:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090D2:
	branch r0 != r3_3 - 0x00001000 l000090F0
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090F0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090DA:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

GPIOGetIntNumber_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void GPIODirModeSet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIODirModeSet_entry:
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000910C:
	word32 r3_20 = Mem0[r0 + 1024:word32]
	branch (r2 & 0x00000001) == 0x00000000 l00009118
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009116_1:
	r3_20 = r3_20 | r1
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00009118:
	Mem11[r0 + 1024:word32] = r3_20 & ~r1
	word32 r3_12 = Mem11[r0 + 1056:word32]
	branch r2 << 30 >= 0x00000000 l00009128
// DataOut: r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00009126_1:
	r1 = r1 | r3_12
// DataOut: r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r2 << 30

l00009128:
	Mem18[r0 + 1056:word32] = r3_12 & ~(r1 << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r2 << 30 r1:<invalid>

GPIODirModeSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r2 << 30 r1:<invalid>



void GPIODirModeGet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 sp
// Preserved:
GPIODirModeGet_entry:
// DataOut: r0 r1
// DataOut (flags): C
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009134:
	word32 r1_7 = 0x00000001 << r1
// DataOut: r0 r1 r3
// DataOut (flags): C
// SymbolicIn: sp:fp

l00009138_thunk_fn0000913C:
	fn0000913C(r0, r1_7, 0x00000001)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r3:0x00000001 r1:0x00000001 << r1 -4(fp):r4

GPIODirModeGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r1:<invalid> r4:<invalid> r2:<invalid> r0:<invalid> -4(fp):r4



void fn0000913C(word32 r0, word32 r1, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C r0 r1 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 sp
// Preserved: sp
l0000913C:
	r4 = Mem0[r0 + 1024:word32]
	r1 = (uint32) (byte) r1
	r2 = Mem0[r0 + 1056:word32]
	r4 = r4 + r1 + C
	NZCV = cond(r4)
	C = (bool) NZCV (alias)
	Z = NZCV (alias)
	branch Test(NE,Z) l0000914C
// DataOut: cpsr r1 r2 r3
// DataOut (flags): C
// SymbolicIn:

l0000914A_thunk_fn0000914C:
	fn0000914C(r1, r2, r3)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn:

l0000914A_1:
	r3 = 0x00000000
// DataOut: cpsr r1 r2 r3
// DataOut (flags): C
// SymbolicIn:

l0000914A_thunk_fn0000914C:
	fn0000914C(r1, r2, r3)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn:

fn0000913C_entry:
	def fp
	def r0
	def Mem0
	def r1
	def C
	def r3
// DataOut: cpsr r0 r1 r3
// DataOut (flags): C
// SymbolicIn: sp:fp

l0000913C:
	sp_1 = fp
	r4_4 = Mem0[r0 + 1024:word32]
	r1_6 = (uint32) (byte) r1
	r2_7 = Mem0[r0 + 1056:word32]
	r4_9 = r4_4 + r1_6 + C
	NZCV_10 = cond(r4_9)
	C_11 = (bool) NZCV_10 (alias)
	Z_12 = NZCV_10 (alias)
	branch r4_9 != 0x00000000 l0000914A_thunk_fn0000914C
// DataOut: cpsr r1 r2 r3
// DataOut (flags): C
// SymbolicIn: sp:fp

l0000914A_thunk_fn0000914C:
	fn0000914C(r1_6, r2_7, r3)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r1:<invalid> r2:<invalid>

l0000914A_1:
	r3_14 = 0x00000000
// DataOut: cpsr r1 r2 r3
// DataOut (flags): C
// SymbolicIn: sp:fp r4:<invalid> r1:<invalid> r2:<invalid>

l0000914A_thunk_fn0000914C:
	fn0000914C(r1_6, r2_7, r3_14)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r1:<invalid> r2:<invalid> r3:0x00000000

fn0000913C_exit:
	r3_13 = PHI(r3, r3_14, r3, r3)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r1:<invalid> r2:<invalid> r3:0x00000000 r0:<invalid>



void fn0000914C(word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r2 r4 sp
// Preserved:
fn0000914C_entry:
// DataOut: cpsr r1 r2 r3
// DataOut (flags): C
// SymbolicIn: sp:fp
// LocalsOut: v3(32)

l0000914C:
	branch r2 + r1 + C == 0x00000000 l00009152
// DataOut: cpsr r3 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009150_1:
// DataOut: cpsr r3 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:<invalid>

l00009152:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:<invalid> r0:0x00000002

fn0000914C_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:v3 + 4 r2:<invalid> r0:r3 r4:<invalid>



void GPIOIntTypeSet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIOIntTypeSet_entry:
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000915C:
	word32 r3_27 = Mem0[r0 + 1032:word32]
	branch (r2 & 0x00000001) == 0x00000000 l00009168
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009166_1:
	r3_27 = r3_27 | r1
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00009168:
	Mem11[r0 + 1032:word32] = r3_27 & ~r1
	word32 r3_12 = Mem11[r0 + 1028:word32]
	branch (r2 & 0x00000002) == 0x00000000 l0000917A
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00009178_1:
	r3_12 = r3_12 | r1
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l0000917A:
	Mem17[r0 + 1028:word32] = r3_12 & ~r1
	word32 r3_18 = Mem17[r0 + 1036:word32]
	branch r2 << 29 >= 0x00000000 l0000918A
// DataOut: r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00009188_1:
	r1 = r1 | r3_18
// DataOut: r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r2 << 29

l0000918A:
	Mem24[r0 + 1036:word32] = r3_18 & ~(r1 << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r2 << 29 r1:<invalid>

GPIOIntTypeSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r2 << 29 r1:<invalid>



void GPIOIntTypeGet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 sp
// Preserved: sp
GPIOIntTypeGet_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): C
// SymbolicIn: sp:fp

l00009194:
	word32 r2_5 = Mem0[r0 + 1032:word32]
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): C
// SymbolicIn: sp:fp

l00009196_thunk_fn00009198:
	fn00009198(r0, r1, r2_5, 0x00000001)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000001 r2:<invalid>

GPIOIntTypeGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r2:<invalid> r4:0x00000008 r1:<invalid> r0:<invalid>



void fn00009198(word32 r0, word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 sp
// Preserved: sp
l00009198:
	r1 = r3 << r1
	r1 = (uint32) (byte) r1
	r3 = Mem0[r0 + 1028:word32]
	r2 = r2 + r1 + C
	NZCV = cond(r2)
	C = (bool) NZCV (alias)
	Z = NZCV (alias)
	r0 = Mem0[r0 + 1036:word32]
	branch Test(EQ,Z) l000091AE
// DataOut: cpsr r0 r1 r3
// DataOut (flags): C
// SymbolicIn:

l000091AA_thunk_fn000091AE:
	fn000091AE(r0, r1, r3)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn:

l000091AC_1:
	r2 = 0x00000001
// DataOut: cpsr r0 r1 r3
// DataOut (flags): C
// SymbolicIn:

l000091AC_thunk_fn000091AE:
	fn000091AE(r0, r1, r3)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn:

fn00009198_entry:
	def fp
	def r3
	def r1
	def r0
	def Mem0
	def r2
	def C
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): C
// SymbolicIn: sp:fp

l00009198:
	sp_1 = fp
	r4_2 = 0x00000008
	r1_5 = r3 << r1
	r1_6 = (uint32) (byte) r1_5
	r3_9 = Mem0[r0 + 1028:word32]
	r2_12 = r2 + r1_6 + C
	NZCV_13 = cond(r2_12)
	C_14 = (bool) NZCV_13 (alias)
	Z_15 = NZCV_13 (alias)
	r0_16 = Mem0[r0 + 1036:word32]
	branch r2_12 == 0x00000000 l000091AC_thunk_fn000091AE
// DataOut: cpsr r0 r1 r3
// DataOut (flags): C
// SymbolicIn: sp:fp

l000091AC_thunk_fn000091AE:
	fn000091AE(r0_16, r1_6, r3_9)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r4:0x00000008 r1:<invalid> r3:<invalid> r2:<invalid> r0:<invalid>

l000091AC_1:
	r2_18 = 0x00000001
// DataOut: cpsr r0 r1 r3
// DataOut (flags): C
// SymbolicIn: sp:fp r4:0x00000008 r1:<invalid> r3:<invalid> r2:<invalid> r0:<invalid>

l000091AC_thunk_fn000091AE:
	fn000091AE(r0_16, r1_6, r3_9)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r4:0x00000008 r1:<invalid> r3:<invalid> r2:0x00000001 r0:<invalid>

fn00009198_exit:
	r2_17 = PHI(r2_12, r2_18, r2, r2)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:0x00000008 r1:<invalid> r3:<invalid> r2:<invalid> r0:<invalid>



void fn000091AE(word32 r0, word32 r1, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C r0 r1 r3
// LiveOut:
// Trashed: NZCV r0 r2 r3 sp
// Preserved:
fn000091AE_entry:
// DataOut: cpsr r0 r1 r3
// DataOut (flags): C
// SymbolicIn: sp:fp

l000091AE:
	branch r3 + r1 + C == 0x00000000 l000091B6
// DataOut: cpsr r0 r1 r2
// DataOut (flags): C
// SymbolicIn: sp:fp

l000091B4_1:
// DataOut: cpsr r0 r1 r2
// DataOut (flags): C
// SymbolicIn: sp:v3 r2:0x00000000 r3:<invalid>

l000091B6:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): C
// SymbolicIn: sp:v3 r2:0x00000000 r3:<invalid>

l000091B6_thunk_fn000091B8:
	fn000091B8(r0, r1, 0x00000000, 0x00000000)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:0x00000000 r3:0x00000000

fn000091AE_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:v3 r2:0x00000000 r3:<invalid> r0:<invalid>



void fn000091B8(word32 r0, word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: sp
l000091B8:
	r0 = r0 + r1 + C
	NZCV = cond(r0)
	Z = NZCV (alias)
	branch Test(EQ,Z) l000091BE
// DataOut: cpsr r2 r3
// DataOut (flags): 
// SymbolicIn:

l000091BC_1:
	r0 = 0x00000004
// DataOut: cpsr r2 r3
// DataOut (flags): 
// SymbolicIn:

l000091BE:
	r0 = 0x00000000
	r3 = r3 | r2
	r0 = 0x00000000 | r3
	NZC = cond(r0)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn:

fn000091B8_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): C
// SymbolicIn: sp:fp

l000091B8:
	sp = fp
	r0 = r0 + r1 + C
	NZCV = cond(r0)
	Z = NZCV (alias)
	branch Test(EQ,Z) l000091BE_in_fn000091B8
// DataOut: cpsr r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l000091BE_in_fn000091B8:
	r0 = 0x00000000
	r3 = r3 | r2
	r0 = 0x00000000 | r3
	NZC = cond(r0)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l000091BC_1:
	r0 = 0x00000004
// DataOut: cpsr r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l000091BE_in_fn000091B8:
	r0 = 0x00000000
	r3 = r3 | r2
	r0 = 0x00000000 | r3
	NZC = cond(r0)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000004

fn000091B8_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r3 | r2 r3:r3 | r2



void GPIOPadConfigSet(word32 r0, word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2 r3
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: r4 sp
GPIOPadConfigSet_entry:
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000091C8:
	word32 r4_11 = Mem0[r0 + 1280:word32]
	branch (r2 & 0x00000001) == 0x00000000 l000091D6
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000091D4_1:
	r4_11 = r4_11 | r1
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:<invalid> -4(fp):r4

l000091D6:
	Mem14[r0 + 1280:word32] = r4_11 & ~r1
	word32 r4_15 = Mem14[r0 + 1284:word32]
	branch (r2 & 0x00000002) == 0x00000000 l000091E8
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:<invalid> -4(fp):r4

l000091E6_1:
	r4_15 = r4_15 | r1
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:<invalid> -4(fp):r4

l000091E8:
	Mem20[r0 + 1284:word32] = r4_15 & ~r1
	word32 r4_21 = Mem20[r0 + 1288:word32]
	branch (r2 & 0x00000004) == 0x00000000 l000091FA
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:<invalid> -4(fp):r4

l000091F8_1:
	r4_21 = r4_21 | r1
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:<invalid> -4(fp):r4

l000091FA:
	Mem26[r0 + 1288:word32] = r4_21 & ~r1
	word32 r2_29 = Mem26[r0 + 1304:word32]
	branch (r2 & 0x00000008) == 0x00000000 l0000920C
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:<invalid> -4(fp):r4

l0000920A_1:
	r2_29 = r2_29 | r1
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:<invalid> r2:<invalid> -4(fp):r4

l0000920C:
	Mem32[r0 + 1304:word32] = r2_29 & ~r1
	word32 r2_33 = Mem32[r0 + 1292:word32]
	branch r3 << 31 >= 0x00000000 l0000921C
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:<invalid> r2:<invalid> -4(fp):r4

l0000921A_1:
	r2_33 = r2_33 | r1
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:r3 << 31 r2:<invalid> -4(fp):r4

l0000921C:
	Mem40[r0 + 1292:word32] = r2_33 & ~r1
	word32 r2_41 = Mem40[r0 + 1296:word32]
	branch r3 << 30 >= 0x00000000 l0000922C
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:r3 << 31 r2:<invalid> -4(fp):r4

l0000922A_1:
	r2_41 = r2_41 | r1
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:r3 << 30 r2:<invalid> -4(fp):r4

l0000922C:
	Mem47[r0 + 1296:word32] = r2_41 & ~r1
	word32 r2_48 = Mem47[r0 + 1300:word32]
	branch r3 << 29 >= 0x00000000 l0000923C
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:r3 << 30 r2:<invalid> -4(fp):r4

l0000923A_1:
	r2_48 = r2_48 | r1
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:r3 << 29 r2:<invalid> -4(fp):r4

l0000923C:
	Mem54[r0 + 1300:word32] = r2_48 & ~r1
	word32 r3_57 = Mem54[r0 + 1308:word32]
	branch (r3 & 0x00000008) == 0x00000000 l00009250
// DataOut: cpsr d24 d9 fp r0 r1 r10 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:r3 << 29 r2:<invalid> -4(fp):r4

l0000924E_1:
	r1 = r1 | r3_57
// DataOut: cpsr d24 d9 fp r0 r1 r10 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r2:<invalid> r3:<invalid> -4(fp):r4

l00009250:
	Mem62[r0 + 1308:word32] = r3_57 & ~(r1 << 0x00000000)
	return
// DataOut: cpsr d24 d9 fp r10 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r2:<invalid> r3:<invalid> r1:<invalid> -4(fp):r4

GPIOPadConfigSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r2:<invalid> r3:<invalid> r1:<invalid> -4(fp):r4



void GPIOPadConfigGet(word32 r0, word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r4 r5 r6 r7 sp
GPIOPadConfigGet_entry:
// DataOut: r0 r1 r2 r3
// DataOut (flags): C
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000925C:
	word32 r1_17 = (uint32) (byte) (0x00000001 << r1)
	word32 r4_18 = Mem0[r0 + 1284:word32]
	word32 r5_20 = Mem0[r0 + 1280:word32] + r1_17 + C
	word32 r5_25 = Mem0[r0 + 1288:word32]
	branch r5_20 == 0x00000000 l00009278
// DataOut: r0 r1 r2 r3 r4 r5
// DataOut (flags): C
// SymbolicIn: sp:fp

l00009276_1:
// DataOut: r0 r1 r2 r3 r4 r5
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l00009278:
	word32 r4_27 = r4_18 + r1_17 + (r5_20 <u 0x00000000)
	word32 r4_32 = Mem0[r0 + 1304:word32]
	branch r4_27 == 0x00000000 l00009284
// DataOut: r0 r1 r2 r3 r4 r5
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000001 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l00009282_1:
// DataOut: r0 r1 r2 r3 r4 r5
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l00009284:
	word32 r5_34 = r5_25 + r1_17 + (r4_27 <u 0x00000000)
	branch r5_34 == 0x00000000 l0000928C
// DataOut: r0 r1 r2 r3 r4
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 r6:0x00000002 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l0000928A_1:
// DataOut: r0 r1 r2 r3 r4
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 r6:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l0000928C:
	branch r4_32 + r1_17 + (r5_34 <u 0x00000000) == 0x00000000 l00009294
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 r6:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l00009292_1:
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:0x00000000 r1:<invalid> r7:0x00000000 r6:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l00009294:
	Mem49[r2:word32] = 0x00000000
	word32 r5_45 = 0x00000000
	word32 r4_52 = Mem49[r0 + 1296:word32]
	word32 r1_53 = r1_17 + Mem49[r0 + 1292:word32]
	word32 r6_58 = Mem49[r0 + 1300:word32]
	branch r1_53 == 0x00000000 l000092B0
// DataOut: r0 r1 r3 r4 r5 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:0x00000000 r1:<invalid> r7:0x00000000 r6:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092AE_1:
	r5_45 = 0x00000001
// DataOut: r0 r1 r3 r4 r5 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:0x00000000 r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092B0:
	word32 r2_60 = Mem49[r0 + 1308:word32]
	branch r1_53 != 0x00000000 l000092B8
// DataOut: r1 r2 r3 r4 r5 r6
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092B6_1:
	r5_45 = 0x00000000
// DataOut: r1 r2 r3 r4 r5 r6
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092B8:
	word32 r1_62 = r1_53 + r4_52 + (r1_53 <u 0x00000000)
	branch r1_62 == 0x00000000 l000092BE
// DataOut: r1 r2 r3 r5 r6
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092BC_1:
// DataOut: r1 r2 r3 r5 r6
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092BE:
	word32 r1_68 = r1_62 + r6_58 + (r1_62 <u 0x00000000)
	branch r1_68 == 0x00000000 l000092C6
// DataOut: r1 r2 r3 r5
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092C4_1:
// DataOut: r1 r2 r3 r5
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:0x00000000 r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092C6:
	branch r1_68 + r2_60 + (r1_68 <u 0x00000000) == 0x00000000 l000092CE
// DataOut: r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:0x00000000 r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> r0:0x00000004 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092CC_1:
// DataOut: r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:0x00000000 r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> r0:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092CE:
	Mem82[r3:word32] = r5_45 << 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:0x00000000 r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> r0:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

GPIOPadConfigGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r5:r5 r1:<invalid> r7:r7 r6:r6 r2:<invalid> r0:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7



void GPIOPinIntEnable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r3
// Preserved: sp
GPIOPinIntEnable_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000092E0:
	Mem8[r0 + 1040:word32] = r1 | Mem0[r0 + 1040:word32]
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid>



void GPIOPinIntDisable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r1 r3
// Preserved: sp
GPIOPinIntDisable_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000092EC:
	Mem7[r0 + 1040:word32] = Mem0[r0 + 1040:word32] & ~(r1 << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid>



void GPIOPinIntStatus(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r0
// Preserved: sp
GPIOPinIntStatus_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000092FC:
	branch r1 != 0x00000000 l00009304
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009304:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000092FE:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinIntStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void GPIOPinIntClear(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed:
// Preserved: sp
GPIOPinIntClear_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000930C:
	Mem3[r0 + 1052:word32] = r1
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void GPIOPortIntRegister(word32 r0, word32 r1, word32 r6, word32 r8, word32 r9, word64 d9, word64 d24)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r0 r1 r6 r8 r9
// LiveOut:
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: lr r4 sp
GPIOPortIntRegister_entry:
// DataOut: d24 d9 r0 r1 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009314:
	word32 r3_3 = Mem0[0x000093A8:word32]
	branch r0 == r3_3 l00009396
// DataOut: d24 d9 r0 r1 r3 r6 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009396:
	word32 sp_82
	word32 r4_83 = IntRegister(0x00000012, r1, r6, r8, r9, d9, d24, out sp_82)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l000093A4_thunk_IntEnable:
	IntEnable(r4_83)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r0:<invalid> lr:<invalid> r5:<invalid> r2:<invalid> r1:0x00000001 r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r9:<invalid> d4:<invalid> -8(fp):r4 -4(fp):lr

l0000931C:
	branch r0 >u r3_3 l0000933E
// DataOut: d24 d9 r0 r1 r3 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000933E:
	word32 r3_58 = Mem0[0x000093AC:word32]
	branch r0 == r3_58 l00009372
// DataOut: d24 d9 r0 r1 r3 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l00009372:
	word32 sp_74
	word32 r4_75 = IntRegister(0x00000013, r1, r6, r8, r9, d9, d24, out sp_74)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l00009380_thunk_IntEnable:
	IntEnable(r4_75)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r2:<invalid> lr:<invalid> r1:0x00000001 r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r9:<invalid> d4:<invalid> -8(fp):r4 -4(fp):lr

l00009344:
	branch r0 != r3_58 + 0x0001D000 l0000935E
// DataOut: d24 d9 r1 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000934C:
	word32 sp_66
	word32 r4_67 = IntRegister(0x00000014, r1, r6, r8, r9, d9, d24, out sp_66)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000935A_thunk_IntEnable:
	IntEnable(r4_67)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r2:<invalid> lr:<invalid> r1:0x00000001 r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r9:<invalid> d4:<invalid> -8(fp):r4 -4(fp):lr

l0000931E:
	branch r0 == 0x40004000 l00009384
// DataOut: d24 d9 r0 r1 r3 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l00009384:
	word32 sp_52
	word32 r4_53 = IntRegister(0x00000010, r1, r6, r8, r9, d9, d24, out sp_52)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l00009392_thunk_IntEnable:
	IntEnable(r4_53)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r2:<invalid> lr:<invalid> r1:0x00000001 r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r9:<invalid> d4:<invalid> -8(fp):r4 -4(fp):lr

l00009324:
	branch r0 != r3_3 - 0x00001000 l0000935E
// DataOut: d24 d9 r1 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000935E:
	word32 sp_31
	word32 r4_32 = IntRegister(0xFFFFFFFF, r1, r6, r8, r9, d9, d24, out sp_31)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000936E_thunk_IntEnable:
	IntEnable(r4_32)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r2:<invalid> lr:<invalid> r1:0x00000001 r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r9:<invalid> d4:<invalid> -8(fp):r4 -4(fp):lr

l0000932C:
	word32 sp_44
	word32 r4_45 = IntRegister(0x00000011, r1, r6, r8, r9, d9, d24, out sp_44)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000933A_thunk_IntEnable:
	IntEnable(r4_45)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r2:<invalid> lr:<invalid> r1:0x00000001 r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r9:<invalid> d4:<invalid> -8(fp):r4 -4(fp):lr

GPIOPortIntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:<invalid> r0:<invalid> lr:<invalid> r5:<invalid> r2:<invalid> r1:0x00000001 r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r9:<invalid> d4:<invalid> -8(fp):r4 -4(fp):lr



void GPIOPortIntUnregister(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r4 sp
GPIOPortIntUnregister_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000093B0:
	word32 r3_3 = Mem0[0x00009444:word32]
	branch r0 == r3_3 l00009432
// DataOut: r0 r3
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009432:
	IntDisable(0x00000012)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l00009440_thunk_IntUnregister:
	IntUnregister(0x00000012)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0x00000012 lr:lr r2:<invalid> -8(fp):r4 -4(fp):lr

l000093B8:
	branch r0 >u r3_3 l000093DA
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l000093DA:
	word32 r3_46 = Mem0[0x00009448:word32]
	branch r0 == r3_46 l0000940E
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000940E:
	IntDisable(0x00000013)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000941C_thunk_IntUnregister:
	IntUnregister(0x00000013)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0x00000013 r2:<invalid> lr:lr -8(fp):r4 -4(fp):lr

l000093E0:
	branch r0 != r3_46 + 0x0001D000 l000093FA
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l000093E8:
	IntDisable(0x00000014)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l000093F6_thunk_IntUnregister:
	IntUnregister(0x00000014)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0x00000014 r2:<invalid> lr:lr -8(fp):r4 -4(fp):lr

l000093BA:
	branch r0 == 0x40004000 l00009420
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l00009420:
	IntDisable(0x00000010)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000942E_thunk_IntUnregister:
	IntUnregister(0x00000010)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0x00000010 r2:<invalid> lr:lr -8(fp):r4 -4(fp):lr

l000093C0:
	branch r0 != r3_3 - 0x00001000 l000093FA
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l000093FA:
	IntDisable(0xFFFFFFFF)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000940A_thunk_IntUnregister:
	IntUnregister(0xFFFFFFFF)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0xFFFFFFFF r2:<invalid> lr:lr -8(fp):r4 -4(fp):lr

l000093C8:
	IntDisable(0x00000011)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l000093D6_thunk_IntUnregister:
	IntUnregister(0x00000011)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0x00000011 r2:<invalid> lr:lr -8(fp):r4 -4(fp):lr

GPIOPortIntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:<invalid> lr:lr r2:<invalid> -8(fp):r4 -4(fp):lr



void GPIOPinRead(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r0
// Preserved: sp
GPIOPinRead_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000944C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinRead_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void GPIOPinWrite(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut:
// Trashed:
// Preserved: sp
GPIOPinWrite_entry:
// DataOut: r0 r1 r2 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009454:
	Mem3[r0 + (r1 << 2):word32] = r2
	return
// DataOut: r4
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinWrite_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void GPIOPinTypeComparator(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 r5 r6 sp
GPIOPinTypeComparator_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000945C:
	word32 r5_10 = ~r1
	Mem17[r0 + 1024:word32] = Mem0[r0 + 1024:word32] & r5_10
	Mem22[r0 + 1056:word32] = r5_10 & Mem17[r0 + 1056:word32]
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000947A_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0, r1, 0x00000001, 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:0x00000001 r3:0x00000000 r6:r6 r4:r4 -12(fp):r4 -8(fp):r5 -4(fp):r6

GPIOPinTypeComparator_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:<invalid> r3:<invalid> r6:r6 r4:r4 r1:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6



void GPIOPinTypeI2C(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: r4 r5 r6 sp
GPIOPinTypeI2C_entry:
// DataOut: cpsr d24 d9 fp r0 r1 r10 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009480:
	Mem16[r0 + 1024:word32] = Mem0[r0 + 1024:word32] & ~(r1 << 0x00000000)
	Mem21[r0 + 1056:word32] = r1 | Mem16[r0 + 1056:word32]
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094A0_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0, r1, 0x00000001, 0x0000000B)
	return
// DataOut: cpsr d24 d9 fp r10 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:0x00000001 r3:0x0000000B r6:r6 r4:r4 -12(fp):r4 -8(fp):r5 -4(fp):r6

GPIOPinTypeI2C_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:<invalid> r3:<invalid> r6:r6 r4:r4 r1:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6



void GPIOPinTypeQEI(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: r4 r5 r6 sp
GPIOPinTypeQEI_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000094A4:
	Mem16[r0 + 1024:word32] = Mem0[r0 + 1024:word32] & ~(r1 << 0x00000000)
	Mem21[r0 + 1056:word32] = r1 | Mem16[r0 + 1056:word32]
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094C4_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0, r1, 0x00000001, 0x0000000A)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:0x00000001 r3:0x0000000A r6:r6 r4:r4 -12(fp):r4 -8(fp):r5 -4(fp):r6

GPIOPinTypeQEI_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:<invalid> r3:<invalid> r6:r6 r4:r4 r1:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6



void GPIOPinTypeUART(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: r4 r5 r6 sp
GPIOPinTypeUART_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000094C8:
	Mem16[r0 + 1024:word32] = Mem0[r0 + 1024:word32] & ~(r1 << 0x00000000)
	Mem21[r0 + 1056:word32] = r1 | Mem16[r0 + 1056:word32]
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094E8_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0, r1, 0x00000001, 0x00000008)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:0x00000001 r3:0x00000008 r6:r6 r4:r4 -12(fp):r4 -8(fp):r5 -4(fp):r6

GPIOPinTypeUART_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:<invalid> r3:<invalid> r6:r6 r4:r4 r1:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6



void GPIOPinTypeTimer(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIOPinTypeTimer_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094EC:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094EC_thunk_GPIOPinTypeUART:
	GPIOPinTypeUART(r0, r1)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinTypeTimer_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r1:<invalid>



void GPIOPinTypeSSI(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIOPinTypeSSI_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094F0:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094F0_thunk_GPIOPinTypeUART:
	GPIOPinTypeUART(r0, r1)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinTypeSSI_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r1:<invalid>



void GPIOPinTypePWM(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIOPinTypePWM_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094F4:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094F4_thunk_GPIOPinTypeUART:
	GPIOPinTypeUART(r0, r1)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinTypePWM_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r1:<invalid>



void IntDefaultHandler()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
IntDefaultHandler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

IntDefaultHandler_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094F8:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void IntMasterEnable()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
IntMasterEnable_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094FC:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094FC_thunk_CPUcpsie:
	CPUcpsie()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

IntMasterEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void IntMasterDisable()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
IntMasterDisable_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009500:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009500_thunk_CPUcpsid:
	CPUcpsid()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

IntMasterDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



word32 IntRegister(word32 r0, word32 r1, word32 r6, word32 r8, word32 r9, word64 d9, word64 d24, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r0 r1 r6 r8 r9
// LiveOut: r4 sp
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
IntRegister_entry:
// DataOut: d24 d9 r0 r1 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009504:
	word32 r4_10 = Mem0[0x00009534:word32]
	branch Mem0[Mem0[0x00009530:word32]:word32] == r4_10 l00009526
// DataOut: d24 d9 r0 r1 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -0008(32)

l00009510:
	word32 r2_51 = Mem0[0x00000000:word32]
	Mem52[r4_10:word32] = r2_51
	branch r4_10 + 4 != r4_10 + 0x000000B8 l00009520_thunk_fn00009716
// DataOut: d24 d9 r0 r1 r2 r3 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0008(32)

l00009520_thunk_fn00009716:
	word32 r1_59
	word32 r2_60
	word32 r3_61
	word32 r4_62
	word32 r5_63
	word32 r6_64
	word32 r7_65
	word32 r8_66
	word32 r9_67
	word32 r10_68
	word32 sp_69
	word32 lr_70
	word64 d24_71
	fn00009716(r1, r2_51, r4_10 + 4, r4_10, r6, r8, r9, d9, d24, out r1_59, out r2_60, out r3_61, out r4_62, out r5_63, out r6_64, out r7_65, out r8_66, out r9_67, out r10_68, out sp_69, out lr_70, out d24_71)
	return r4_62
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r4:<invalid> r5:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

l00009522:
	Mem57[Mem52[0x00009530:word32]:word32] = r4_10
// DataOut: r0 r1 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r4:<invalid> r5:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5
// LocalsOut: fp(32) Local -0008(32)

l00009526:
	Mem36[r4_10 + (r0 << 2):word32] = r1
	word32 sp_40
	*spOut = fp
	return r4
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r4:<invalid> r5:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

IntRegister_exit:
// DataOut: r4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> r1:0x00000001 lr:<invalid> r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r9:<invalid> d4:<invalid> -8(fp):r4 -4(fp):r5



void IntUnregister(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
IntUnregister_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009538:
	Mem5[Mem0[0x00009544:word32] + (r0 << 2):word32] = Mem0[0x00009548:word32]
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

IntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>



void IntPriorityGroupingSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
IntPriorityGroupingSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000954C:
	Mem9[Mem0[0x00009564:word32]:word32] = Mem0[Mem0[0x00009560:word32] + (r0 << 2):word32] | 0x05F80000 | 0x00020000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

IntPriorityGroupingSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>



void IntPriorityGroupingGet(word32 r7, word32 r8, word32 r9, word32 r10, word64 d9, word64 d24)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r10 r7 r8 r9
// LiveOut:
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
IntPriorityGroupingGet_entry:
// DataOut: d24 d9 r10 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009568:
	word32 r1_6 = Mem0[Mem0[0x00009588:word32]:word32]
// DataOut: d24 d9 r1 r10 r2 r3 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000957C:
	branch 0x00000700 == (r1_6 & 0x00000700) l00009586
// DataOut: d24 d9 r10 r2 r3 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000700 r1:<invalid> r0:0x00000000 r2:<invalid>

l00009580:
	branch true l00009778
// DataOut: d24 d9 r10 r2 r3 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000700 r1:<invalid> r0:0x00000000 r2:<invalid>

l00009778:
// DataOut: d24 d9 r10 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000700 r1:<invalid> r0:0x00000001 r2:<invalid>

l0000977E_thunk_OSRAMClear:
	word32 r1_48
	word32 r2_49
	word32 r3_50
	word32 r4_51
	word32 r5_52
	word32 r6_53
	word32 r7_54
	word32 r8_55
	word32 r9_56
	word32 r10_57
	word32 sp_58
	word64 d24_59
	OSRAMClear(0x00000700, r8, r9, r10, d9, d24, out r1_48, out r2_49, out r3_50, out r4_51, out r5_52, out r6_53, out r7_54, out r8_55, out r9_56, out r10_57, out sp_58, out d24_59)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000700 r1:<invalid> r0:0x00000000 r2:<invalid> r4:r7 >>u 1

l00009586:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000700 r1:<invalid> r0:<invalid> r2:<invalid>

IntPriorityGroupingGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r4:<invalid> r6:<invalid> r5:<invalid> r7:<invalid> r8:<invalid> lr:<invalid> d4:<invalid> r9:<invalid> r10:<invalid>



void IntPrioritySet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: r4 sp
IntPrioritySet_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009590:
	word32 r4_12 = Mem0[Mem0[0x000095B8:word32] + (r0 & ~0x00000003) + 32:word32]
	word32 r0_15 = (r0 & 0x00000003) << 3
	Mem22[r4_12:word32] = r1 << r0_15 | Mem0[r4_12:word32] & ~((0x000000FF << r0_15) << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

IntPrioritySet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:0x000000FF << (((r0 & 0x00000003) & 0x00000003) << 3) r3:<invalid> r4:r4 r0:<invalid> -4(fp):r4



void IntPriorityGet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: sp
IntPriorityGet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l000095BC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

IntPriorityGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r0 & ~0x00000003 r0:<invalid>



void IntEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: sp
IntEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l000095DC:
	branch r0 == 0x00000004 l00009608
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009608:
	word32 r2_44 = Mem0[0x00009634:word32]
	Mem47[r2_44:word32] = Mem0[r2_44:word32] | 0x00010000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000095E0:
	branch r0 == 0x00000005 l00009614
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009614:
	word32 r2_40 = Mem0[0x00009634:word32]
	Mem43[r2_40:word32] = Mem0[r2_40:word32] | 0x00020000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000095E4:
	branch r0 == 0x00000006 l00009620
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009620:
	word32 r2_35 = Mem0[0x00009634:word32]
	Mem38[r2_35:word32] = Mem0[r2_35:word32] | 0x00040000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000095E8:
	branch r0 == 0x0000000F l000095FC
// DataOut: r0
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000095FC:
	word32 r2_31 = Mem0[0x00009630:word32]
	Mem34[r2_31:word32] = Mem0[r2_31:word32] | 0x00000002
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000095EC:
	branch r0 <=u 0x0000000F l000095FA
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l000095EE:
	Mem30[Mem0[0x0000962C:word32]:word32] = 0x00000001 << r0 - 0x00000010
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000095FA:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000001 r0:0x00000001 << r0 - 0x00000020 r2:<invalid>

IntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:0x00000001 << r0 - 0x00000020



void IntDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: sp
IntDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009638:
	branch r0 == 0x00000004 l00009664
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009664:
	word32 r2_44 = Mem0[0x00009690:word32]
	Mem47[r2_44:word32] = Mem0[r2_44:word32] & ~0x00010000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000963C:
	branch r0 == 0x00000005 l00009670
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009670:
	word32 r2_40 = Mem0[0x00009690:word32]
	Mem43[r2_40:word32] = Mem0[r2_40:word32] & ~0x00020000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009640:
	branch r0 == 0x00000006 l0000967C
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000967C:
	word32 r2_35 = Mem0[0x00009690:word32]
	Mem38[r2_35:word32] = Mem0[r2_35:word32] & ~0x00040000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009644:
	branch r0 == 0x0000000F l00009658
// DataOut: r0
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009658:
	word32 r2_31 = Mem0[0x0000968C:word32]
	Mem34[r2_31:word32] = Mem0[r2_31:word32] & ~0x00000002
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009648:
	branch r0 <=u 0x0000000F l00009656
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000964A:
	Mem30[Mem0[0x00009688:word32]:word32] = 0x00000001 << r0 - 0x00000010
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009656:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000001 r0:0x00000001 << r0 - 0x00000020 r2:<invalid>

IntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:0x00000001 << r0 - 0x00000020



word32 OSRAMDelay(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r6, word32 r8, word32 r9, word64 d9, word64 d24, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & lrOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r0 r1 r2 r3 r4 r6 r8 r9
// LiveOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
OSRAMDelay_entry:
	*r1Out = r1
	*r2Out = r2
	*r3Out = r3
	*r4Out = r4
	*r5Out = r5
	*r6Out = r6
	*r7Out = r7
	*r8Out = r8
	*r9Out = r9
	*r10Out = r10
	*lrOut = lr
	*d24Out = d24
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009694:
	branch r0 != 0x00000001 l00009696_thunk_fn00009894
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009696_thunk_fn00009894:
	word32 r1_44
	word32 r2_45
	word32 r3_46
	word32 r4_47
	word32 r5_48
	word32 r6_49
	word32 r7_50
	word32 r8_51
	word32 r9_52
	word32 r10_53
	word32 lr_54
	word64 d24_55
	return fn00009894(r1, r2, r3, r4, r6, r8, r9, d9, d24, out r1_44, out r2_45, out r3_46, out r4_47, out r5_48, out r6_49, out r7_50, out r8_51, out r9_52, out r10_53, out lr_54, out d24_55)
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 - 0x00000001

l00009698:
	return r0 - 0x00000001
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 - 0x00000001

OSRAMDelay_exit:
// DataOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r2:<invalid> r1:<invalid> r4:<invalid> r3:<invalid> lr:<invalid> r5:<invalid> r9:<invalid> d4:<invalid>



word32 OSRAMWriteFirst(word32 r0, ptr32 & r2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut: r1 r2
// Trashed: r0 r1 r2
// Preserved: lr r3 r4 r5 sp
OSRAMWriteFirst_entry:
// DataOut: cpsr d24 d9 fp r0 r10 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000969C:
	word32 r4_14 = Mem0[0x000096C0:word32]
	word32 r2_18
	*r2Out = I2CMasterSlaveAddrSet(r4_14, 0x0000003D, 0x00000000)
	I2CMasterDataPut(r4_14, r0)
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000096BC_thunk_I2CMasterControl:
	I2CMasterControl(r4_14, 0x00000003)
	return 0x00000003
// DataOut: cpsr d24 d9 fp r1 r10 r2 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r2:<invalid> r0:<invalid> r1:0x00000003 r3:r3 lr:lr -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

OSRAMWriteFirst_exit:
// DataOut: r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r2:<invalid> r0:<invalid> r1:0x00000003 r3:r3 lr:lr -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



word32 OSRAMWriteArray(word32 r0, word32 r1, word32 r2, word32 r3, word32 r8, word32 r9, word32 r10, word64 d9, word64 d24, ptr32 & r2Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & lrOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r0 r1 r10 r2 r3 r8 r9
// LiveOut: d24 lr r0 r10 r2 r4 r5 r6 r8 r9
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: r3 sp
OSRAMWriteArray_entry:
	*r4Out = r4
	*r5Out = r5
	*r6Out = r6
	*lrOut = lr
	*r2Out = r2
	*r8Out = r8
	*r9Out = r9
	*r10Out = r10
	*d24Out = d24
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000096C4:
	branch r1 == 0x00000000 l000096FA
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000096FA:
	return r0
// DataOut: cpsr d24 d9 fp lr r0 r10 r2 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000096C6:
	word32 r7_51 = Mem0[0x000096FC:word32]
	word32 r4_52 = Mem0[0x00009700:word32]
	word32 r5_110 = r0
	word32 r6_53 = r0 + r1
	word32 r0_114 = I2CMasterIntStatus(r4_52, 0x00000000)
	branch r0_114 == 0x00000000 l000098D0
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000096DC:
	word32 r1_96
	word32 r4_99
	word32 r5_100
	word32 r6_101
	word32 r7_102
	word32 lr_106
	OSRAMDelay(Mem0[r7_51:word32], 0x00000000, r2, r3, r4_52, r6_53, r8, r9, d9, d24, out r1_96, out r2, out r3, out r4_99, out r5_100, out r6_101, out r7_102, out r8, out r9, out r10, out lr_106, out d24)
	I2CMasterDataPut(r4_99, (word32) Mem0[r5_100:byte])
	I2CMasterControl(r4_99, 0x00000001)
	r5_110 = r5_100 + 1
	r0_114 = r4_99
	branch r6_101 != r5_100 + 1 l000098D0
// DataOut: cpsr d24 d9 fp lr r0 r10 r2 r3 r5 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r7:<invalid> r4:<invalid> r6:r0 + r1 r1:0x00000000 r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000098D0:
	word64 d4_80 = __vmax_u16(d9, d24)
// DataOut: cpsr d24 d9 fp r0 r10 r2 r3 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r7:<invalid> r4:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r8:<invalid> r10:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> r9:<invalid> d4:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000098D0_thunk_fn000098D4:
	word32 r1_82
	word32 r2_83
	word32 r3_84
	word32 r4_85
	word32 r5_86
	word32 r6_87
	word32 r7_88
	word32 r8_89
	word32 r9_90
	word32 r10_91
	word32 lr_92
	word64 d24_93
	return fn000098D4(r0_114, r2, r3, r5_110, r8, r9, r10, d9, d4_80, out r1_82, out r2_83, out r3_84, out r4_85, out r5_86, out r6_87, out r7_88, out r8_89, out r9_90, out r10_91, out lr_92, out d24_93)
// DataOut: cpsr d24 d9 fp lr r0 r10 r2 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r7:<invalid> r4:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> d4:<invalid> r8:<invalid> r10:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> r9:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000096F8:
	word32 r4_118
	*r4Out = Mem0[fp - 20:word32]
	word32 r5_119
	*r5Out = Mem0[fp - 16:word32]
	word32 r6_120
	*r6Out = Mem0[fp - 12:word32]
	return r4_99
// DataOut: cpsr d24 d9 fp lr r0 r10 r2 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r7:<invalid> r4:<invalid> r6:<invalid> r1:0x00000001 r0:<invalid> r8:<invalid> r10:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> r9:<invalid> d4:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

OSRAMWriteArray_exit:
// DataOut: d24 lr r0 r10 r2 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r7:<invalid> r4:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r3:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r2:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



word32 OSRAMWriteByte(word32 r0, word32 r2, word32 r6, word32 r8, word32 r9, word32 r10, word64 d9, word64 d24, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & spOut, ptr32 & lrOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r0 r10 r2 r6 r8 r9
// LiveOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
OSRAMWriteByte_entry:
// DataOut: cpsr d24 d9 fp r0 r10 r2 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009704:
	word32 sp_2
	*spOut = fp - 8
	word32 r0_12 = I2CMasterIntStatus(Mem0[0x00009730:word32], 0x00000000)
	branch r0_12 == 0x00000000 l00009712_thunk_fn00009908
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009712_thunk_fn00009908:
	word32 r1_64
	word32 r2_65
	word32 r3_66
	word32 r4_67
	word32 r5_68
	word32 r6_69
	word32 r7_70
	word32 r8_71
	word32 r9_72
	word32 r10_73
	word32 lr_74
	word64 d24_75
	return fn00009908(r0_12, 0x00000000, r0, r9, r10, d9, d24, out r1_64, out r2_65, out r3_66, out r4_67, out r5_68, out r6_69, out r7_70, out r8_71, out r9_72, out r10_73, out lr_74, out d24_75)
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r1:0x00000000 r0:<invalid> -8(fp):r4 -4(fp):lr

l00009714:
	word32 r3_42 = Mem0[0x00009734:word32]
// DataOut: cpsr d24 d9 fp r1 r2 r3 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r1:0x00000000 r0:<invalid> -8(fp):r4 -4(fp):lr

l00009714_thunk_fn00009716:
	word32 r1_49
	word32 r2_50
	word32 r3_51
	word32 r4_52
	word32 r5_53
	word32 r6_54
	word32 r7_55
	word32 r8_56
	word32 r9_57
	word32 r10_58
	word32 sp_59
	word32 lr_60
	word64 d24_61
	return fn00009716(0x00000000, r2, r3_42, r0, r6, r8, r9, d9, d24, out r1_49, out r2_50, out r3_51, out r4_52, out r5_53, out r6_54, out r7_55, out r8_56, out r9_57, out r10_58, out sp_59, out lr_60, out d24_61)
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r1:0x00000000 r0:<invalid> r3:<invalid> -8(fp):r4 -4(fp):lr

OSRAMWriteByte_exit:
// DataOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r1:<invalid> r0:<invalid> r3:<invalid> lr:<invalid> r2:<invalid> r7:<invalid> r6:<invalid> r5:<invalid> r8:<invalid> r10:<invalid> d4:<invalid> r9:<invalid> -8(fp):r4 -4(fp):lr



word32 fn00009716(word32 r1, word32 r2, word32 r3, word32 r4, word32 r6, word32 r8, word32 r9, word64 d9, word64 d24, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & spOut, ptr32 & lrOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r1 r2 r3 r4 r6 r8 r9
// LiveOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
l00009716:
	r0 = Mem0[r3:word32]
	r0 = OSRAMDelay(r0, r1, r2, r3, r4, r6, r8, r9, d9, d24, out r1, out r2, out r3, out r4, out r5, out r6, out r7, out r8, out r9, out r10, out lr, out d24)
	r1 = r4
	r0 = Mem0[0x00009730:word32]
	I2CMasterDataPut(r0, r1)
	r4 = Mem0[sp:word32]
	lr = Mem0[sp + 4:word32]
	sp = sp + 8
	r1 = 0x00000001
	r0 = Mem0[0x00009730:word32]
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn:

l0000972C_thunk_I2CMasterControl:
	I2CMasterControl(r0, r1)
	return r0
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn:

fn00009716_entry:
	def fp
	def r3
	def Mem0
	def r1
	def r2
	def r4
	def r6
	def r8
	def r9
	def d9
	def d24
	def r1Out
	def r2Out
	def r3Out
	def r4Out
	def r5Out
	def r6Out
	def r7Out
	def r8Out
	def r9Out
	def r10Out
	def spOut
	def lrOut
	def d24Out
// DataOut: cpsr d24 d9 fp r1 r2 r3 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009716:
	sp_1 = fp
	r0_4 = Mem0[r3:word32]
	r0_25 = OSRAMDelay(r0_4, r1, r2, r3, r4, r6, r8, r9, d9, d24, out r1_13, out r2_14, out r3_15, out r4_16, out r5_17, out r6_18, out r7_19, out r8_20, out r9_21, out r10_22, out lr_23, out d24_24)
	r1_26 = r4_16
	r0_27 = Mem0[0x00009730:word32]
	I2CMasterDataPut(r0_27, r1_26)
	r4_28 = Mem0[sp_1:word32]
	lr_29 = Mem0[sp_1 + 4:word32]
	sp_30 = sp_1 + 8
	r1_31 = 0x00000001
	r0_32 = Mem0[0x00009730:word32]
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000972C_thunk_I2CMasterControl:
	I2CMasterControl(r0_32, r1_31)
	return r0_32
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:0x00000001 r4:<invalid> lr:<invalid> r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r2:<invalid> r3:<invalid> r5:<invalid> r9:<invalid> d4:<invalid>

fn00009716_exit:
	use r1_31 (=> r1Out)
	use r2_14 (=> r2Out)
	use r3_15 (=> r3Out)
	use r4_28 (=> r4Out)
	use r5_17 (=> r5Out)
	use r6_18 (=> r6Out)
	use r7_19 (=> r7Out)
	use r8_20 (=> r8Out)
	use r9_21 (=> r9Out)
	use r10_22 (=> r10Out)
	use sp_30 (=> spOut)
	use lr_29 (=> lrOut)
	use d24_24 (=> d24Out)
// DataOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:0x00000001 r4:<invalid> lr:<invalid> r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r2:<invalid> r3:<invalid> r5:<invalid> r9:<invalid> d4:<invalid>



word32 OSRAMWriteFinal(word32 r0, word32 r2, word32 r3, word32 r8, word32 r9, word32 r10, word64 d9, word64 d24, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & spOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r0 r10 r2 r3 r8 r9
// LiveOut: d24 r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: lr
OSRAMWriteFinal_entry:
// DataOut: cpsr d24 d9 fp r0 r10 r2 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009738:
	word32 r4_14 = Mem0[0x00009778:word32]
	word32 sp_2
	*spOut = fp - 16
	word32 r0_17 = I2CMasterIntStatus(r4_14, 0x00000000)
	branch r0_17 == 0x00000000 l00009748_thunk_fn0000993E
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009748_thunk_fn0000993E:
	word32 r1_123
	word32 r2_124
	word32 r3_125
	word32 r4_126
	word32 r5_127
	word32 r6_128
	word32 r7_129
	word32 r8_130
	word32 r9_131
	word32 r10_132
	word32 lr_133
	word64 d24_134
	return fn0000993E(r0_17, r2, r3, r4_14, r8, r9, r10, d9, d24, out r1_123, out r2_124, out r3_125, out r4_126, out r5_127, out r6_128, out r7_129, out r8_130, out r9_131, out r10_132, out lr_133, out d24_134)
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r0 r4:<invalid> r1:0x00000000 r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000974A:
	word32 r1_58
	word32 r2_59
	word32 r3_60
	word32 r4_61
	word32 r5_62
	word32 r6_63
	word32 r7_64
	word32 r8_65
	word32 r9_66
	word32 r10_67
	word32 lr_68
	word64 d24_69
	OSRAMDelay(Mem0[Mem0[0x0000977C:word32]:word32], 0x00000000, r2, r3, Mem0[0x00009778:word32], r0, r8, r9, d9, d24, out r1_58, out r2_59, out r3_60, out r4_61, out r5_62, out r6_63, out r7_64, out r8_65, out r9_66, out r10_67, out lr_68, out d24_69)
	I2CMasterDataPut(r4_61, r6_63)
	I2CMasterControl(r4_61, 0x00000005)
	word32 r0_77 = I2CMasterIntStatus(r4_61, 0x00000000)
	branch r0_77 == 0x00000000 l00009964
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r5 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r0 r4:<invalid> r1:0x00000000 r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009964:
	Mem100[r0_77 * 0x00000002:word32] = r0_77
// DataOut: cpsr d24 d9 fp r10 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r1:0x00000000 r0:<invalid> r5:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> r9:<invalid> d4:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009972_thunk_OSRAMDisplayOn:
	word32 r1_109
	word32 r2_110
	word32 r3_111
	word32 r4_112
	word32 r5_113
	word32 r6_114
	word32 r7_115
	word32 r8_116
	word32 r9_117
	word32 r10_118
	word32 sp_119
	word64 d24_120
	return OSRAMDisplayOn(r3_60, r9_66, r10_67, d9, d24_69, out r1_109, out r2_110, out r3_111, out r4_112, out r5_113, out r6_114, out r7_115, out r8_116, out r9_117, out r10_118, out sp_119, out d24_120)
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r1:0x00000000 r0:0x00000000 r5:<invalid> r2:00009D40 r8:<invalid> r7:<invalid> r10:<invalid> r3:<invalid> lr:<invalid> r9:<invalid> d4:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009770:
	word32 r0_80 = Mem0[r5_62:word32]
	word32 r4_81 = Mem0[fp - 16:word32]
	word32 r6_83 = Mem0[fp - 8:word32]
	word32 sp_85
	*spOut = fp
// DataOut: cpsr d24 d9 fp r0 r1 r2 r3 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r1:0x00000000 r0:<invalid> r5:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> r9:<invalid> d4:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009776_thunk_OSRAMDelay:
	word32 r1_86
	word32 r2_87
	word32 r3_88
	word32 r4_89
	word32 r5_90
	word32 r6_91
	word32 r7_92
	word32 r8_93
	word32 r9_94
	word32 r10_95
	word32 lr_96
	word64 d24_97
	return OSRAMDelay(r0_80, 0x00000000, r2_59, r3_60, r4_81, r6_83, r8_65, r9_66, d9, d24_69, out r1_86, out r2_87, out r3_88, out r4_89, out r5_90, out r6_91, out r7_92, out r8_93, out r9_94, out r10_95, out lr_96, out d24_97)
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r1:0x00000000 r0:<invalid> r5:<invalid> lr:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r2:<invalid> r3:<invalid> r9:<invalid> d4:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

OSRAMWriteFinal_exit:
// DataOut: d24 r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r1:<invalid> r0:<invalid> r5:<invalid> lr:<invalid> r2:<invalid> r7:<invalid> r8:<invalid> r3:<invalid> r10:<invalid> d4:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



word32 OSRAMClear(word32 r3, word32 r8, word32 r9, word32 r10, word64 d9, word64 d24, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & spOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r10 r3 r8 r9
// LiveOut: d24 r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: lr
l00009780:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

OSRAMClear_entry:
// DataOut: cpsr d24 d9 fp r10 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009780:
	word32 r2_8
	OSRAMWriteFirst(0x00000080, out r2_8)
	word32 r2_19
	word32 r4_20
	word32 r5_21
	word32 r6_22
	word32 r8_23
	word32 r9_24
	word32 r10_25
	word32 lr_26
	word64 d24_27
	OSRAMWriteArray(Mem0[0x000097C4:word32], 0x00000006, r2_8, r3, r8, r9, r10, d9, d24, out r2_19, out r4_20, out r5_21, out r6_22, out r8_23, out r9_24, out r10_25, out lr_26, out d24_27)
	word32 r1_31
	word32 r2_32
	word32 r3_33
	word32 r4_34
	word32 r5_35
	word32 r6_36
	word32 r7_37
	word32 r8_38
	word32 r9_39
	word32 r10_40
	word32 sp_41
	word32 lr_42
	word64 d24_43
	word32 r0_44 = OSRAMWriteByte(0x00000000, r2_19, r6_22, r8_23, r9_24, r10_25, d9, d24_27, out r1_31, out r2_32, out r3_33, out r4_34, out r5_35, out r6_36, out r7_37, out r8_38, out r9_39, out r10_40, out sp_41, out lr_42, out d24_43)
	branch r4_34 != 0x00000001 l00009992
// DataOut: cpsr d24 d9 fp r0 r10 r2 r3 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009992:
// DataOut: cpsr d24 d9 fp r0 r10 r3 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> r5:<invalid> r7:<invalid> r6:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> lr:<invalid> -8(fp):r4 -4(fp):lr

l00009992_thunk_fn00009996:
	word32 r1_159
	word32 r2_160
	word32 r3_161
	word32 r4_162
	word32 r5_163
	word32 r6_164
	word32 r7_165
	word32 r8_166
	word32 r9_167
	word32 r10_168
	word64 d24_169
	return fn00009996(r0_44, r3_33, r4_34 - 0x00000001, r5_35, r8_38, r9_39, r10_40, d9, d24_43, out r1_159, out r2_160, out r3_161, out r4_162, out r5_163, out r6_164, out r7_165, out r8_166, out r9_167, out r10_168, out d24_169)
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> r2:<invalid> r3:<invalid> r5:<invalid> r7:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> lr:<invalid> -8(fp):r4 -4(fp):lr

l0000979C:
	word32 r1_79
	word32 r2_80
	word32 r3_81
	word32 r4_82
	word32 r5_83
	word32 r6_84
	word32 r7_85
	word32 r8_86
	word32 r9_87
	word32 r10_88
	word32 sp_89
	word64 d24_90
	OSRAMWriteFinal(r4_34 - 0x00000001, r2_32, r3_33, r8_38, r9_39, r10_40, d9, d24_43, out r1_79, out r2_80, out r3_81, out r4_82, out r5_83, out r6_84, out r7_85, out r8_86, out r9_87, out r10_88, out sp_89, out d24_90)
	word32 r2_93
	OSRAMWriteFirst(0x00000080, out r2_93)
	word32 r2_97
	word32 r4_98
	word32 r5_99
	word32 r6_100
	word32 r8_101
	word32 r9_102
	word32 r10_103
	word32 lr_104
	word64 d24_105
	OSRAMWriteArray(Mem0[0x000097C8:word32], 0x00000006, r2_93, r3_81, r8_86, r9_87, r10_88, d9, d24_90, out r2_97, out r4_98, out r5_99, out r6_100, out r8_101, out r9_102, out r10_103, out lr_104, out d24_105)
	word32 r1_109
	word32 r2_110
	word32 r3_111
	word32 r4_112
	word32 r5_113
	word32 r6_114
	word32 r7_115
	word32 r8_116
	word32 r9_117
	word32 r10_118
	word32 sp_119
	word32 lr_120
	word64 d24_121
	word32 r0_122 = OSRAMWriteByte(0x00000000, r2_97, r6_100, r8_101, r9_102, r10_103, d9, d24_105, out r1_109, out r2_110, out r3_111, out r4_112, out r5_113, out r6_114, out r7_115, out r8_116, out r9_117, out r10_118, out sp_119, out lr_120, out d24_121)
	branch r4_112 != 0x00000001 l000099B2
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> r5:<invalid> r7:<invalid> r6:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> lr:<invalid> -8(fp):r4 -4(fp):lr

l000099B2:
// DataOut: cpsr d24 d9 fp r0 r1 r10 r3 r9
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r5:<invalid> r7:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> lr:<invalid> -8(fp):r4 -4(fp):lr

l000099B2_thunk_fn000099B4:
	word32 r2_150
	word32 r4_151
	word32 r5_152
	word32 r6_153
	word32 r7_154
	word32 r8_155
	word32 sp_156
	return fn000099B4(r0_122, r3_111, out r2_150, out r4_151, out r5_152, out r6_153, out r7_154, out r8_155, out sp_156)
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r4:<invalid> r5:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r7:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> lr:<invalid> -8(fp):r4 -4(fp):lr

l000097BC:
// DataOut: cpsr d24 d9 fp r0 r10 r2 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r5:<invalid> r7:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> lr:<invalid> -8(fp):r4 -4(fp):lr

l000097C2_thunk_OSRAMWriteFinal:
	word32 r1_130
	word32 r2_131
	word32 r3_132
	word32 r4_133
	word32 r5_134
	word32 r6_135
	word32 r7_136
	word32 r8_137
	word32 r9_138
	word32 r10_139
	word32 sp_140
	word64 d24_141
	return OSRAMWriteFinal(r4_112 - 0x00000001, r2_110, r3_111, r8_116, r9_117, r10_118, d9, d24_121, out r1_130, out r2_131, out r3_132, out r4_133, out r5_134, out r6_135, out r7_136, out r8_137, out r9_138, out r10_139, out sp_140, out d24_141)
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r4:<invalid> lr:<invalid> r2:<invalid> r3:<invalid> r6:<invalid> r5:<invalid> r7:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> -8(fp):r4 -4(fp):lr

OSRAMClear_exit:
// DataOut: d24 r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> lr:<invalid> r5:<invalid> r7:<invalid> r8:<invalid> r2:<invalid> r3:<invalid> d4:<invalid> r9:<invalid> r10:<invalid> -8(fp):r4 -4(fp):lr



word32 OSRAMStringDraw(word32 r2, word32 r8, word32 r9, word32 r10, word64 d9, word64 d24, ptr32 & lrOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r10 r2 r8 r9
// LiveOut: d24 lr r8
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: r4 r5 r6 sp
OSRAMStringDraw_entry:
// DataOut: cpsr d24 d9 r10 r2 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000097CC:
	word32 r2_18
	OSRAMWriteFirst(0x00000080, out r2_18)
	branch r2 != 0x00000000 l000097E0
// DataOut: cpsr d24 d9 r10 r2 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000097DE_1:
// DataOut: cpsr d24 d9 r10 r2 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r2 r4:r1 r5:r0 r0:<invalid> r2:<invalid> r1:0x00000003 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000097E0:
	word32 r1_28
	word32 r2_29
	word32 r3_30
	word32 r4_31
	word32 r5_32
	word32 r6_33
	word32 r7_34
	word32 r8_35
	word32 r9_36
	word32 r10_37
	word32 sp_38
	word32 lr_39
	word64 d24_40
	OSRAMWriteByte(0x000000B1, r2_18, r2, r8, r9, r10, d9, d24, out r1_28, out r2_29, out r3_30, out r4_31, out r5_32, out r6_33, out r7_34, out r8_35, out r9_36, out r10_37, out sp_38, out lr_39, out d24_40)
	word32 r1_44
	word32 r2_45
	word32 r3_46
	word32 r4_47
	word32 r5_48
	word32 r6_49
	word32 r7_50
	word32 r8_51
	word32 r9_52
	word32 r10_53
	word32 sp_54
	word32 lr_55
	word64 d24_56
	OSRAMWriteByte(0x00000080, r2_29, r4_31 + 0x00000024, r8_35, r9_36, r10_37, d9, d24_40, out r1_44, out r2_45, out r3_46, out r4_47, out r5_48, out r6_49, out r7_50, out r8_51, out r9_52, out r10_53, out sp_54, out lr_55, out d24_56)
	word32 r1_59
	word32 r2_60
	word32 r3_61
	word32 r4_62
	word32 r5_63
	word32 r6_64
	word32 r7_65
	word32 r8_66
	word32 r9_67
	word32 r10_68
	word32 sp_69
	word32 lr_70
	word64 d24_71
	OSRAMWriteByte(r6_49 & 0x0000000F, r2_45, r6_49, r8_51, r9_52, r10_53, d9, d24_56, out r1_59, out r2_60, out r3_61, out r4_62, out r5_63, out r6_64, out r7_65, out r8_66, out r9_67, out r10_68, out sp_69, out lr_70, out d24_71)
	word32 r1_74
	word32 r2_75
	word32 r3_76
	word32 r4_77
	word32 r5_78
	word32 r6_79
	word32 r7_80
	word32 r8_81
	word32 r9_82
	word32 r10_83
	word32 sp_84
	word32 lr_85
	word64 d24_86
	OSRAMWriteByte(0x00000080, r2_60, r6_64, r8_66, r9_67, r10_68, d9, d24_71, out r1_74, out r2_75, out r3_76, out r4_77, out r5_78, out r6_79, out r7_80, out r8_81, out r9_82, out r10_83, out sp_84, out lr_85, out d24_86)
	word32 r1_90
	word32 r2_91
	word32 r3_92
	word32 r4_93
	word32 r5_94
	word32 r6_95
	word32 r7_96
	word32 r8_97
	word32 r9_98
	word32 r10_99
	word32 sp_100
	word32 lr_101
	word64 d24_102
	OSRAMWriteByte(0x00000012, r2_75, r6_79, r8_81, r9_82, r10_83, d9, d24_86, out r1_90, out r2_91, out r3_92, out r4_93, out r5_94, out r6_95, out r7_96, out r8_97, out r9_98, out r10_99, out sp_100, out lr_101, out d24_102)
	word32 r1_105
	word32 r2_106
	word32 r3_107
	word32 r4_108
	word32 r5_109
	word32 r6_110
	word32 r7_111
	word32 r8_112
	word32 r9_113
	word32 r10_114
	word32 sp_115
	word32 lr_116
	word64 d24_117
	OSRAMWriteByte(0x00000040, r2_91, r6_95, r8_97, r9_98, r10_99, d9, d24_102, out r1_105, out r2_106, out r3_107, out r4_108, out r5_109, out r6_110, out r7_111, out r8_112, out r9_113, out r10_114, out sp_115, out lr_116, out d24_117)
	word32 r3_120 = (word32) Mem0[r5_109:byte]
	branch r3_120 == 0x00000000 l00009876
// DataOut: cpsr d24 d9 lr r10 r2 r3 r4 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r2 r4:r1 r5:r0 r0:<invalid> r2:<invalid> r1:0x00000003 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009876:
	return r8_112
// DataOut: cpsr d24 d9 lr r8
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> r7:<invalid> r8:<invalid> r10:<invalid> d4:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009814:
	word32 r6_143 = Mem0[0x00009878:word32]
	branch r4_108 <=u 0x0000005A l00009830
// DataOut: cpsr d24 d9 r10 r2 r3 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> r7:<invalid> r8:<invalid> r10:<invalid> d4:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009830:
	word32 r3_189 = r3_120 - 0x00000020 + (r3_120 - 0x00000020 << 0x00000002)
	word32 r2_192
	word32 r4_193
	word32 r5_194
	word32 r6_195
	word32 r8_196
	word32 r9_197
	word32 r10_198
	word32 lr_199
	word64 d24_200
	OSRAMWriteArray(r6_143 + r3_189, 0x00000005, r2_106, r3_189, r8_112, r9_113, r10_114, d9, d24_117, out r2_192, out r4_193, out r5_194, out r6_195, out r8_196, out r9_197, out r10_198, out lr_199, out d24_200)
	branch r4_193 != 0x0000005A l00009A1C
// DataOut: cpsr d24 d9 lr r0 r10 r2 r3 r4 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> r7:<invalid> r8:<invalid> r10:<invalid> d4:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009A1C:
	Mem229[r6_195 + 16:word32] = r4_193
	Mem230[r6_195:word32] = r5_194 - 0x00000001 | (r3_189 | r8_196 << 0x00000006) | r2_192 << 0x00000008
	return Mem230[sp_115 + 16:word32]
// DataOut: cpsr d24 d9 lr r8
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r5:<invalid> r0:0x00000000 r3:<invalid> r1:<invalid> r2:<invalid> r7:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009846:
	word32 lr_208
	*lrOut = Mem0[sp_115 + 12:word32]
// DataOut: cpsr d24 d9 r0 r10 r2 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r5:<invalid> r0:0x00000000 r3:<invalid> r1:<invalid> r2:<invalid> r7:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000984A_thunk_OSRAMWriteFinal:
	word32 r1_210
	word32 r2_211
	word32 r3_212
	word32 r4_213
	word32 r5_214
	word32 r6_215
	word32 r7_216
	word32 r8_217
	word32 r9_218
	word32 r10_219
	word32 sp_220
	word64 d24_221
	OSRAMWriteFinal(0x00000000, r2_192, r3_189, r8_196, r9_197, r10_198, d9, d24_200, out r1_210, out r2_211, out r3_212, out r4_213, out r5_214, out r6_215, out r7_216, out r8_217, out r9_218, out r10_219, out sp_220, out d24_221)
	return r8_217
// DataOut: cpsr d24 d9 lr r8
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r5:<invalid> r0:0x00000000 r3:<invalid> r1:<invalid> lr:<invalid> r2:<invalid> r7:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000981A:
// DataOut: cpsr d24 d9 r10 r2 r3 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> r7:<invalid> r8:<invalid> r10:<invalid> d4:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000984C:
	word32 r3_146 = r3_120 - 0x00000020 + (r3_120 - 0x00000020 << 0x00000002)
	word32 r2_150
	word32 r4_151
	word32 r5_152
	word32 r6_153
	word32 r8_154
	word32 r9_155
	word32 r10_156
	word32 lr_157
	word64 d24_158
	OSRAMWriteArray(r6_143 + r3_146, 0x0000005F - r4_108, r2_106, r3_146, r8_112, r9_113, r10_114, d9, d24_117, out r2_150, out r4_151, out r5_152, out r6_153, out r8_154, out r9_155, out r10_156, out lr_157, out d24_158)
	word32 r3_160 = (word32) Mem0[r5_152:byte]
	word32 r2_161 = Mem0[0x0000987C:word32]
	word32 r3_165 = r3_160 - 0x00000020 + (r3_160 - 0x00000020 << 0x00000002) + r2_161 + r4_151
	word32 r0_167 = (word32) Mem0[r3_165 + 16:byte]
	word32 lr_171
	*lrOut = Mem0[sp_115 + 12:word32]
// DataOut: cpsr d24 d9 r0 r10 r2 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> r7:<invalid> r8:<invalid> r10:<invalid> d4:<invalid> r9:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009872_thunk_OSRAMWriteFinal:
	word32 r1_173
	word32 r2_174
	word32 r3_175
	word32 r4_176
	word32 r5_177
	word32 r6_178
	word32 r7_179
	word32 r8_180
	word32 r9_181
	word32 r10_182
	word32 sp_183
	word64 d24_184
	OSRAMWriteFinal(r0_167, r2_161, r3_165, r8_154, r9_155, r10_156, d9, d24_158, out r1_173, out r2_174, out r3_175, out r4_176, out r5_177, out r6_178, out r7_179, out r8_180, out r9_181, out r10_182, out sp_183, out d24_184)
	return r8_180
// DataOut: cpsr d24 d9 lr r8
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r3:<invalid> r1:<invalid> r7:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r2:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

OSRAMStringDraw_exit:
// DataOut: d24 lr r8
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r7:<invalid> r8:<invalid> d4:<invalid> r9:<invalid> r10:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void OSRAMImageDraw(word32 r1, word32 r2, word32 r3, word64 d9, word64 d24, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r1 r2 r3
// LiveOut:
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: r10 r7
// Stack args: Stack +0000(32)
OSRAMImageDraw_entry:
// DataOut: d24 d9 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00009880:
	branch dwArg00 == 0x00000000 l000098EA_in_OSRAMImageDraw
// DataOut: d24 d9 r1 r2 r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l000098EA_in_OSRAMImageDraw:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00009888:
	word32 r8_45 = (uint32) SLICE(r1 + 0x00000090, ui4, 4)
// DataOut: d24 d9 r1 r2 r3 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00009890_thunk_fn00009894:
	word32 r1_48
	word32 r2_49
	word32 r3_50
	word32 r4_51
	word32 r5_52
	word32 r6_53
	word32 r7_54
	word32 r8_55
	word32 r9_56
	word32 r10_57
	word32 lr_58
	word64 d24_59
	fn00009894(r1 + 0x00000024, r2, r3, r2, dwArg00, r8_45, r3, d9, d24, out r1_48, out r2_49, out r3_50, out r4_51, out r5_52, out r6_53, out r7_54, out r8_55, out r9_56, out r10_57, out lr_58, out d24_59)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r5:r0 r4:r2 r9:r3 r1:r1 + 0x00000024 r8:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

OSRAMImageDraw_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r4:<invalid> r5:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> d4:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr



word32 fn00009894(word32 r1, word32 r2, word32 r3, word32 r4, word32 r6, word32 r8, word32 r9, word64 d9, word64 d24, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & lrOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r1 r2 r3 r4 r6 r8 r9
// LiveOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
l00009894:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00009894_entry:
// DataOut: cpsr d24 d9 fp r1 r2 r3 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009894:
	word32 r2_13
	OSRAMWriteFirst(0x00000080, out r2_13)
	word32 r6_4 = r6 + r2
	branch r4 == 0x00000000 l000098AE
// DataOut: cpsr d24 d9 fp r10 r2 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000098AC_1:
// DataOut: cpsr d24 d9 fp r10 r2 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 + r2 r8:r8 | 0x00000010 r7:r1 & 0x0000000F r10:r3 + 0xFFFFFFFF r0:<invalid> r2:<invalid> r1:0x00000003

l000098AE:
	word32 r1_22
	word32 r2_23
	word32 r3_24
	word32 r4_25
	word32 r5_26
	word32 r6_27
	word32 r7_28
	word32 r8_29
	word32 r9_30
	word32 r10_31
	word32 sp_32
	word32 lr_33
	word64 d24_34
	OSRAMWriteByte(0x000000B0, r2_13, r6_4, r8 | 0x00000010, r9, r3 + 0xFFFFFFFF, d9, d24, out r1_22, out r2_23, out r3_24, out r4_25, out r5_26, out r6_27, out r7_28, out r8_29, out r9_30, out r10_31, out sp_32, out lr_33, out d24_34)
	word32 r1_37
	word32 r2_38
	word32 r3_39
	word32 r4_40
	word32 r5_41
	word32 r6_42
	word32 r7_43
	word32 r8_44
	word32 r9_45
	word32 r10_46
	word32 sp_47
	word32 lr_48
	word64 d24_49
	OSRAMWriteByte(0x00000080, r2_23, r6_27, r8_29, r9_30, r10_31, d9, d24_34, out r1_37, out r2_38, out r3_39, out r4_40, out r5_41, out r6_42, out r7_43, out r8_44, out r9_45, out r10_46, out sp_47, out lr_48, out d24_49)
	word32 r1_52
	word32 r2_53
	word32 r3_54
	word32 r4_55
	word32 r5_56
	word32 r6_57
	word32 r7_58
	word32 r8_59
	word32 r9_60
	word32 r10_61
	word32 sp_62
	word32 lr_63
	word64 d24_64
	OSRAMWriteByte(r7_43, r2_38, r6_42, r8_44, r9_45, r10_46, d9, d24_49, out r1_52, out r2_53, out r3_54, out r4_55, out r5_56, out r6_57, out r7_58, out r8_59, out r9_60, out r10_61, out sp_62, out lr_63, out d24_64)
	word32 r1_67
	word32 r2_68
	word32 r3_69
	word32 r4_70
	word32 r5_71
	word32 r6_72
	word32 r7_73
	word32 r8_74
	word32 r9_75
	word32 r10_76
	word32 sp_77
	word32 lr_78
	word64 d24_79
	OSRAMWriteByte(0x00000080, r2_53, r6_57, r8_59, r9_60, r10_61, d9, d24_64, out r1_67, out r2_68, out r3_69, out r4_70, out r5_71, out r6_72, out r7_73, out r8_74, out r9_75, out r10_76, out sp_77, out lr_78, out d24_79)
	word32 r1_82
	word32 r2_83
	word32 r3_84
	word32 r4_85
	word32 r5_86
	word32 r6_87
	word32 r7_88
	word32 r8_89
	word32 r9_90
	word32 r10_91
	word32 sp_92
	word32 lr_93
	word64 d24_94
	OSRAMWriteByte(r8_74, r2_68, r6_72, r8_74, r9_75, r10_76, d9, d24_79, out r1_82, out r2_83, out r3_84, out r4_85, out r5_86, out r6_87, out r7_88, out r8_89, out r9_90, out r10_91, out sp_92, out lr_93, out d24_94)
	word32 r1_97
	word32 r2_98
	word32 r3_99
	word32 r4_100
	word32 r5_101
	word32 r6_102
	word32 r7_103
	word32 r8_104
	word32 r9_105
	word32 r10_106
	word32 sp_107
	word32 lr_108
	word64 d24_109
	OSRAMWriteByte(0x00000040, r2_83, r6_87, r8_89, r9_90, r10_91, d9, d24_94, out r1_97, out r2_98, out r3_99, out r4_100, out r5_101, out r6_102, out r7_103, out r8_104, out r9_105, out r10_106, out sp_107, out lr_108, out d24_109)
// DataOut: cpsr d24 d9 fp r10 r2 r3 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 + r2 r8:r8 | 0x00000010 r7:r1 & 0x0000000F r10:r3 + 0xFFFFFFFF r0:<invalid> r2:<invalid> r1:0x00000003

l000098CE_thunk_fn000098D2:
	word32 r1_111
	word32 r2_112
	word32 r3_113
	word32 r4_114
	word32 r5_115
	word32 r6_116
	word32 r7_117
	word32 r8_118
	word32 r9_119
	word32 r10_120
	word32 lr_121
	word64 d24_122
	return fn000098D2(r2_98, r3_99, r5_101, r8_104, r9_105, r10_106, d9, d24_109, out r1_111, out r2_112, out r3_113, out r4_114, out r5_115, out r6_116, out r7_117, out r8_118, out r9_119, out r10_120, out lr_121, out d24_122)
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r4:<invalid> r3:<invalid> lr:<invalid> r5:<invalid> d4:<invalid> r9:<invalid>

fn00009894_exit:
// DataOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r4:<invalid> r3:<invalid> lr:<invalid> r5:<invalid> r9:<invalid> d4:<invalid>



word32 fn000098D2(word32 r2, word32 r3, word32 r5, word32 r8, word32 r9, word32 r10, word64 d9, word64 d24, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & lrOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r10 r2 r3 r5 r8 r9
// LiveOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
l000098D2:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn000098D2_entry:
// DataOut: cpsr d24 d9 fp r10 r2 r3 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000098D2:
// DataOut: cpsr d24 d9 fp r0 r10 r2 r3 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000098D2_thunk_fn000098D4:
	word32 r1_11
	word32 r2_12
	word32 r3_13
	word32 r4_14
	word32 r5_15
	word32 r6_16
	word32 r7_17
	word32 r8_18
	word32 r9_19
	word32 r10_20
	word32 lr_21
	word64 d24_22
	return fn000098D4(r5, r2, r3, r5, r8, r9, r10, d9, d24, out r1_11, out r2_12, out r3_13, out r4_14, out r5_15, out r6_16, out r7_17, out r8_18, out r9_19, out r10_20, out lr_21, out d24_22)
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r5

fn000098D2_exit:
// DataOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r5:<invalid> r4:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> d4:<invalid> r2:<invalid> r3:<invalid> lr:<invalid>



word32 fn000098D4(word32 r0, word32 r2, word32 r3, word32 r5, word32 r8, word32 r9, word32 r10, word64 d9, word64 d24, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & lrOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r0 r10 r2 r3 r5 r8 r9
// LiveOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
l000098D4:
	r1 = r10
	r5 = r5 + r9
	NZCV = cond(r5)
	r0 = OSRAMWriteArray(r0, r1, r2, r3, r8, r9, r10, d9, d24, out r2, out r4, out r5, out r6, out r8, out r9, out r10, out lr, out d24)
	r4 = r4 + 0x00000001
	NZCV = cond(r4)
	r0 = (word32) Mem0[r5 - 1:byte]
	r0 = OSRAMWriteFinal(r0, r2, r3, r8, r9, r10, d9, d24, out r1, out r2, out r3, out r4, out r5, out r6, out r7, out r8, out r9, out r10, out sp, out d24)
	NZCV = cond(r6 - r4)
	Z = NZCV (alias)
	branch Test(NE,Z) l00009AA2
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn:

l00009AA2:
	Mem0[r0 + 8:word32] = r1
	return r0
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn:

l000098EA:
	r4 = Mem0[sp:word32]
	r5 = Mem0[sp + 4:word32]
	r6 = Mem0[sp + 8:word32]
	r7 = Mem0[sp + 12:word32]
	r8 = Mem0[sp + 16:word32]
	r9 = Mem0[sp + 20:word32]
	r10 = Mem0[sp + 24:word32]
	sp = sp + 32
	return r0
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn:

fn000098D4_entry:
	def fp
	def r10
	def r5
	def r9
	def r0
	def r2
	def r3
	def r8
	def d9
	def d24
	def Mem0
	def r1Out
	def r2Out
	def r3Out
	def r4Out
	def r5Out
	def r6Out
	def r7Out
	def r8Out
	def r9Out
	def r10Out
	def lrOut
	def d24Out
	def Mem0
// DataOut: cpsr d24 d9 fp r0 r10 r2 r3 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000098D4:
	sp_1 = fp
	r1_3 = r10
	r5_6 = r5 + r9
	NZCV_7 = cond(r5_6)
	r0_23 = OSRAMWriteArray(r0, r1_3, r2, r3, r8, r9, r10, d9, d24, out r2_14, out r4_15, out r5_16, out r6_17, out r8_18, out r9_19, out r10_20, out lr_21, out d24_22)
	r4_24 = r4_15 + 0x00000001
	NZCV_25 = cond(r4_24)
	r0_27 = (word32) Mem0[r5_16 - 1:byte]
	r0_40 = OSRAMWriteFinal(r0_27, r2_14, r3, r8_18, r9_19, r10_20, d9, d24_22, out r1_28, out r2_29, out r3_30, out r4_31, out r5_32, out r6_33, out r7_34, out r8_35, out r9_36, out r10_37, out sp_38, out d24_39)
	NZCV_41 = cond(r6_33 - r4_31)
	Z_42 = NZCV_41 (alias)
	branch r6_33 != r4_31 l00009AA2_in_fn000098D4
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009AA2_in_fn000098D4:
	Mem72[r0_40 + 8:word32] = r1_28
	return r0_40
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r6:<invalid> r7:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r2:<invalid> r3:<invalid> lr:<invalid>

l000098EA_in_fn000098D4:
	r4_64 = Mem0[sp_38:word32]
	r5_65 = Mem0[sp_38 + 4:word32]
	r6_66 = Mem0[sp_38 + 8:word32]
	r7_67 = Mem0[sp_38 + 12:word32]
	r8_68 = Mem0[sp_38 + 16:word32]
	r9_69 = Mem0[sp_38 + 20:word32]
	r10_70 = Mem0[sp_38 + 24:word32]
	sp_71 = sp_38 + 32
	return r0_40
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r6:<invalid> r7:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r2:<invalid> r3:<invalid> lr:<invalid>

fn000098D4_exit:
	r4_43 = PHI(r4_31, r4_64, r4, r4)
	r5_44 = PHI(r5_32, r5_65, r5, r5)
	r6_45 = PHI(r6_33, r6_66, r6, r6)
	r7_46 = PHI(r7_34, r7_67, r7, r7)
	r8_47 = PHI(r8_35, r8_68, r8, r8)
	r9_48 = PHI(r9_36, r9_69, r9, r9)
	r10_49 = PHI(r10_37, r10_70, r10, r10)
	sp_50 = PHI(sp_38, sp_71, sp, sp)
	use r1_28 (=> r1Out)
	use r2_29 (=> r2Out)
	use r3_30 (=> r3Out)
	use r4_43 (=> r4Out)
	use r5_44 (=> r5Out)
	use r6_45 (=> r6Out)
	use r7_46 (=> r7Out)
	use r8_47 (=> r8Out)
	use r9_48 (=> r9Out)
	use r10_49 (=> r10Out)
	use lr_21 (=> lrOut)
	use d24_39 (=> d24Out)
// DataOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r5:<invalid> r4:<invalid> r0:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> d4:<invalid> r2:<invalid> r3:<invalid> lr:<invalid>



word32 OSRAMInit(word32 r0, word32 r9, word32 r10, word64 d9, word64 d24, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r0 r10 r9
// LiveOut: r10 r4 r5 r6 r7 r8 r9 sp
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
OSRAMInit_entry:
// DataOut: cpsr d24 d9 fp r0 r10 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000098F0:
	SysCtlPeripheralEnable(0x10001000)
	SysCtlPeripheralEnable(Mem0[0x00009960:word32])
	word32 sp_2
	*spOut = fp - 24
	word32 r0_21 = Mem0[0x00009964:word32]
// DataOut: cpsr d24 d9 fp r0 r1 r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009906_thunk_fn00009908:
	word32 r1_26
	word32 r2_27
	word32 r3_28
	word32 r4_29
	word32 r5_30
	word32 r6_31
	word32 r7_32
	word32 r8_33
	word32 r9_34
	word32 r10_35
	word32 lr_36
	word64 d24_37
	fn00009908(r0_21, 0x0000000C, r0, r9, r10, d9, d24, out r1_26, out r2_27, out r3_28, out r4_29, out r5_30, out r6_31, out r7_32, out r8_33, out r9_34, out r10_35, out lr_36, out d24_37)
	return r4_29
// DataOut: cpsr d9 fp r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:r0 r0:<invalid> r1:0x0000000C r3:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

OSRAMInit_exit:
// DataOut: r10 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> r5:<invalid> r8:<invalid> d4:<invalid> r9:<invalid> r10:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



word32 fn00009908(word32 r0, word32 r1, word32 r4, word32 r9, word32 r10, word64 d9, word64 d24, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & lrOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r0 r1 r10 r4 r9
// LiveOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
l00009908:
	GPIOPinTypeI2C(r0, r1)
	r1 = r4
	r0 = Mem0[0x00009968:word32]
	I2CMasterInit(r0, r1)
	r2 = 0x00000001
	r3 = Mem0[0x0000996C:word32]
	r7 = Mem0[0x00009970:word32]
	r6 = 0x000000E3
	r4 = 0x00000004
	r0 = 0x00000080
	r5 = 0x00000000
	Mem0[r3:word32] = 0x00000001
	r8 = r7 + 0x000001EC
// DataOut: cpsr d24 d9 fp r0 r10 r3 r5 r8 r9
// DataOut (flags): 
// SymbolicIn:

l00009928_thunk_fn00009938:
	r0 = fn00009938(r0, r3, r5, r8, r9, r10, d9, d24, out r1, out r2, out r3, out r4, out r5, out r6, out r7, out r8, out r9, out r10, out lr, out d24)
	return r0
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn:

fn00009908_entry:
	def fp
	def r0
	def r1
	def r4
	def Mem0
	def r9
	def r10
	def d9
	def d24
	def r1Out
	def r2Out
	def r3Out
	def r4Out
	def r5Out
	def r6Out
	def r7Out
	def r8Out
	def r9Out
	def r10Out
	def lrOut
	def d24Out
// DataOut: cpsr d24 d9 fp r0 r1 r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009908:
	sp_1 = fp
	GPIOPinTypeI2C(r0, r1)
	r1_5 = r4
	r0_7 = Mem0[0x00009968:word32]
	I2CMasterInit(r0_7, r1_5)
	r2_8 = 0x00000001
	r3_9 = Mem0[0x0000996C:word32]
	r7_10 = Mem0[0x00009970:word32]
	r6_11 = 0x000000E3
	r4_12 = 0x00000004
	r0_13 = 0x00000080
	r5_14 = 0x00000000
	Mem15[r3_9:word32] = 0x00000001
	r8_16 = r7_10 + 0x000001EC
// DataOut: cpsr d24 d9 fp r0 r10 r3 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009928_thunk_fn00009938:
	r0_33 = fn00009938(r0_13, r3_9, r5_14, r8_16, r9, r10, d9, d24, out r1_21, out r2_22, out r3_23, out r4_24, out r5_25, out r6_26, out r7_27, out r8_28, out r9_29, out r10_30, out lr_31, out d24_32)
	return r0_33
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:0x00000080 r2:0x00000001 r3:<invalid> r7:<invalid> r6:0x000000E3 r4:0x00000004 r5:0x00000000 r8:<invalid>

fn00009908_exit:
	r1_34 = PHI(r1_21, r1)
	r2_35 = PHI(r2_22, r2)
	r3_36 = PHI(r3_23, r3)
	r4_37 = PHI(r4_24, r4)
	r5_38 = PHI(r5_25, r5)
	r6_39 = PHI(r6_26, r6)
	r7_40 = PHI(r7_27, r7)
	r8_41 = PHI(r8_28, r8)
	r9_42 = PHI(r9_29, r9)
	r10_43 = PHI(r10_30, r10)
	lr_44 = PHI(lr_31, lr)
	d24_45 = PHI(d24_32, d24)
	r0_46 = PHI(r0_33, r0)
	use r1_34 (=> r1Out)
	use r2_35 (=> r2Out)
	use r3_36 (=> r3Out)
	use r4_37 (=> r4Out)
	use r5_38 (=> r5Out)
	use r6_39 (=> r6Out)
	use r7_40 (=> r7Out)
	use r8_41 (=> r8Out)
	use r9_42 (=> r9Out)
	use r10_43 (=> r10Out)
	use lr_44 (=> lrOut)
	use d24_45 (=> d24Out)
// DataOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> r4:<invalid> r5:<invalid> r8:<invalid> d4:<invalid> r9:<invalid> r10:<invalid> lr:<invalid>



word32 fn00009938(word32 r0, word32 r3, word32 r5, word32 r8, word32 r9, word32 r10, word64 d9, word64 d24, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & lrOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r0 r10 r3 r5 r8 r9
// LiveOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
fn00009938_entry:
// DataOut: cpsr d24 d9 fp r0 r10 r3 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009938:
	word32 r2_3
	word32 r1_4 = OSRAMWriteFirst(r0, out r2_3)
	word32 r2_13
	word32 r4_14
	word32 r5_15
	word32 r6_16
	word32 r8_17
	word32 r9_18
	word32 r10_19
	word32 lr_20
	word64 d24_21
	word32 r0_22 = OSRAMWriteArray(r5 + 0x00000002, r1_4, r2_3, r3, r8, r9, r10, d9, d24, out r2_13, out r4_14, out r5_15, out r6_16, out r8_17, out r9_18, out r10_19, out lr_20, out d24_21)
// DataOut: cpsr d24 d9 fp r0 r10 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009944_thunk_fn00009948:
	word32 r1_61
	word32 r2_62
	word32 r3_63
	word32 r4_64
	word32 r5_65
	word32 r6_66
	word32 r7_67
	word32 r8_68
	word32 r9_69
	word32 r10_70
	word32 lr_71
	word64 d24_72
	return fn00009948(r2_13, r3, r4_14, r5_15, r6_16, r8_17, r9_18, r10_19, d9, d24_21, out r1_61, out r2_62, out r3_63, out r4_64, out r5_65, out r6_66, out r7_67, out r8_68, out r9_69, out r10_70, out lr_71, out d24_72)
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r5:<invalid> r7:<invalid> r4:<invalid> r6:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r3:<invalid> lr:<invalid>

l0000993C_thunk_fn0000993E:
	word32 r1_48
	word32 r2_49
	word32 r3_50
	word32 r4_51
	word32 r5_52
	word32 r6_53
	word32 r7_54
	word32 r8_55
	word32 r9_56
	word32 r10_57
	word32 lr_58
	word64 d24_59
	return fn0000993E(r0_22, r2_13, r3, r4_14, r8_17, r9_18, r10_19, d9, d24_21, out r1_48, out r2_49, out r3_50, out r4_51, out r5_52, out r6_53, out r7_54, out r8_55, out r9_56, out r10_57, out lr_58, out d24_59)
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r5:<invalid> r7:<invalid> r4:<invalid> r6:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r3:<invalid> lr:<invalid>

fn00009938_exit:
// DataOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r4:<invalid> r5:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> lr:<invalid>



word32 fn0000993E(word32 r0, word32 r2, word32 r3, word32 r4, word32 r8, word32 r9, word32 r10, word64 d9, word64 d24, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & lrOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r0 r10 r2 r3 r4 r8 r9
// LiveOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
l0000993E:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000993E_entry:
// DataOut: cpsr d24 d9 fp r0 r10 r2 r3 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000993E:
	word32 r2_15
	word32 r4_16
	word32 r5_17
	word32 r6_18
	word32 r8_19
	word32 r9_20
	word32 r10_21
	word32 lr_22
	word64 d24_23
	OSRAMWriteArray(r0 + r8, r4 - 0x00000002, r2, r3, r8, r9, r10, d9, d24, out r2_15, out r4_16, out r5_17, out r6_18, out r8_19, out r9_20, out r10_21, out lr_22, out d24_23)
// DataOut: cpsr d24 d9 fp r10 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009944_thunk_fn00009948:
	word32 r1_25
	word32 r2_26
	word32 r3_27
	word32 r4_28
	word32 r5_29
	word32 r6_30
	word32 r7_31
	word32 r8_32
	word32 r9_33
	word32 r10_34
	word32 lr_35
	word64 d24_36
	return fn00009948(r2_15, r3, r4_16, r5_17, r6_18, r8_19, r9_20, r10_21, d9, d24_23, out r1_25, out r2_26, out r3_27, out r4_28, out r5_29, out r6_30, out r7_31, out r8_32, out r9_33, out r10_34, out lr_35, out d24_36)
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r7:<invalid> r6:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r2:<invalid> r3:<invalid> lr:<invalid>

fn0000993E_exit:
// DataOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> lr:<invalid> r2:<invalid>



word32 fn00009948(word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r8, word32 r9, word32 r10, word64 d9, word64 d24, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & lrOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r10 r2 r3 r4 r5 r6 r8 r9
// LiveOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
l00009948:
	r5 = r5 + r4
	NZCV = cond(r5)
	r0 = r6
	r0 = OSRAMWriteFinal(r0, r2, r3, r8, r9, r10, d9, d24, out r1, out r2, out r3, out r4, out r5, out r6, out r7, out r8, out r9, out r10, out sp, out d24)
	NZCV = cond(r5 - 0x00000070)
	ZC = NZCV (alias)
	r3 = r7 + (r5 << 0x00000000)
	branch Test(ULE,ZC) l00009B2A
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn:

l00009956_thunk_fn00009B2A:
	r0 = fn00009B2A(r0, r3, r6, out r3)
	return r0
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn:

l00009956_thunk_fn00009958:
	r0 = fn00009958(r3, r9, r10, d9, d24, out r1, out r2, out r3, out r4, out r5, out r6, out r7, out r8, out r9, out r10, out lr, out d24)
	return r0
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn:

fn00009948_entry:
	def fp
	def r5
	def r4
	def r6
	def r2
	def r3
	def r8
	def r9
	def r10
	def d9
	def d24
	def r1Out
	def r2Out
	def r3Out
	def r4Out
	def r5Out
	def r6Out
	def r7Out
	def r8Out
	def r9Out
	def r10Out
	def lrOut
	def d24Out
	def lr
// DataOut: cpsr d24 d9 fp r10 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009948:
	sp_1 = fp
	r5_4 = r5 + r4
	NZCV_5 = cond(r5_4)
	r0_7 = r6
	r0_27 = OSRAMWriteFinal(r0_7, r2, r3, r8, r9, r10, d9, d24, out r1_15, out r2_16, out r3_17, out r4_18, out r5_19, out r6_20, out r7_21, out r8_22, out r9_23, out r10_24, out sp_25, out d24_26)
	NZCV_28 = cond(r5_19 - 0x00000070)
	ZC_29 = NZCV_28 (alias)
	r3_30 = r7_21 + (r5_19 << 0x00000000)
	branch r5_19 <=u 0x00000070 l00009956_thunk_fn00009B2A
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009956_thunk_fn00009B2A:
	r0_70 = fn00009B2A(r0_27, r3_30, r6_20, out r3_69)
	return r0_70
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r0:<invalid> r3:<invalid> r6:<invalid> r4:<invalid> r1:<invalid> r2:<invalid> r7:<invalid> r8:<invalid> r10:<invalid> lr:<invalid> d4:<invalid> r9:<invalid>

l00009956_thunk_fn00009958:
	r0_68 = fn00009958(r3_30, r9_23, r10_24, d9, d24_26, out r1_56, out r2_57, out r3_58, out r4_59, out r5_60, out r6_61, out r7_62, out r8_63, out r9_64, out r10_65, out lr_66, out d24_67)
	return r0_68
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r0:<invalid> r3:<invalid> r6:<invalid> r4:<invalid> r1:<invalid> r2:<invalid> r7:<invalid> r8:<invalid> r10:<invalid> lr:<invalid> d4:<invalid> r9:<invalid>

fn00009948_exit:
	r1_31 = PHI(r1_15, r1_56, r1, r1)
	r2_32 = PHI(r2_16, r2_57, r2, r2)
	r3_33 = PHI(r3_69, r3_58, r3, r3)
	r4_34 = PHI(r4_18, r4_59, r4, r4)
	r5_35 = PHI(r5_19, r5_60, r5, r5)
	r6_36 = PHI(r6_20, r6_61, r6, r6)
	r7_37 = PHI(r7_21, r7_62, r7, r7)
	r8_38 = PHI(r8_22, r8_63, r8, r8)
	r9_39 = PHI(r9_23, r9_64, r9, r9)
	r10_40 = PHI(r10_24, r10_65, r10, r10)
	lr_41 = PHI(lr, lr_66, lr, lr)
	d24_42 = PHI(d24_26, d24_67, d24, d24)
	r0_43 = PHI(r0_70, r0_68, r0, r0)
	use r1_31 (=> r1Out)
	use r2_32 (=> r2Out)
	use r3_33 (=> r3Out)
	use r4_34 (=> r4Out)
	use r5_35 (=> r5Out)
	use r6_36 (=> r6Out)
	use r7_37 (=> r7Out)
	use r8_38 (=> r8Out)
	use r9_39 (=> r9Out)
	use r10_40 (=> r10Out)
	use lr_41 (=> lrOut)
	use d24_42 (=> d24Out)
// DataOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:<invalid> r0:<invalid> r3:<invalid> r6:<invalid> r4:<invalid> r1:<invalid> r7:<invalid> r8:<invalid> lr:<invalid> r2:<invalid> r10:<invalid> d4:<invalid> r9:<invalid>



word32 fn00009958(word32 r3, word32 r9, word32 r10, word64 d9, word64 d24, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & lrOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r10 r3 r9
// LiveOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
fn00009958_entry:
// DataOut: cpsr d24 d9 fp r10 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(32)

l00009958:
	word32 r8_7 = Mem0[v3 + 16:word32]
	word32 lr_8
	*lrOut = Mem0[v3 + 20:word32]
// DataOut: cpsr d24 d9 fp r10 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000995C_thunk_OSRAMClear:
	word32 r1_15
	word32 r2_16
	word32 r3_17
	word32 r4_18
	word32 r5_19
	word32 r6_20
	word32 r7_21
	word32 r8_22
	word32 r9_23
	word32 r10_24
	word32 sp_25
	word64 d24_26
	return OSRAMClear(r3, r8_7, r9, r10, d9, d24, out r1_15, out r2_16, out r3_17, out r4_18, out r5_19, out r6_20, out r7_21, out r8_22, out r9_23, out r10_24, out sp_25, out d24_26)
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 + 24 r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> lr:<invalid>

fn00009958_exit:
// DataOut: d24 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> lr:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r3:<invalid> d4:<invalid> r9:<invalid> r10:<invalid>



word32 OSRAMDisplayOn(word32 r3, word32 r9, word32 r10, word64 d9, word64 d24, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & spOut, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r10 r3 r9
// LiveOut: d24 r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved:
OSRAMDisplayOn_entry:
// DataOut: cpsr d24 d9 fp r10 r3 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009974:
	word32 sp_2
	*spOut = fp - 24
	word32 r7_16 = Mem0[0x000099BC:word32]
// DataOut: cpsr d24 d9 fp r0 r10 r3 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009986_thunk_fn00009996:
	word32 r1_27
	word32 r2_28
	word32 r3_29
	word32 r4_30
	word32 r5_31
	word32 r6_32
	word32 r7_33
	word32 r8_34
	word32 r9_35
	word32 r10_36
	word64 d24_37
	return fn00009996(0x00000080, r3, 0x00000004, 0x00000000, r7_16 + 0x000001EC, r9, r10, d9, d24, out r1_27, out r2_28, out r3_29, out r4_30, out r5_31, out r6_32, out r7_33, out r8_34, out r9_35, out r10_36, out d24_37)
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:<invalid> r6:0x000000E3 r4:0x00000004 r0:0x00000080 r5:0x00000000 r8:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

OSRAMDisplayOn_exit:
// DataOut: d24 r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:<invalid> r6:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r8:<invalid> r1:<invalid> r3:<invalid> r2:<invalid> d4:<invalid> r9:<invalid> r10:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



word32 fn00009996(word32 r0, word32 r3, word32 r4, word32 r5, word32 r8, word32 r9, word32 r10, word64 d9, word64 d24, ptr32 & r1Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & r9Out, ptr32 & r10Out, ptr32 & d24Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r0 r10 r3 r4 r5 r8 r9
// LiveOut: d24 r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
l00009996:
	r1 = OSRAMWriteFirst(r0, out r2)
	r0 = r5 + 0x00000002
	r1 = r4 - 0x00000002
	r0 = r0 + r8
	r4 = r4 + 0x00000001
	NZCV = cond(r4)
	r0 = OSRAMWriteArray(r0, r1, r2, r3, r8, r9, r10, d9, d24, out r2, out r4, out r5, out r6, out r8, out r9, out r10, out lr, out d24)
	r5 = r5 + r4
	NZCV = cond(r5)
	r0 = r6
	r0 = OSRAMWriteFinal(r0, r2, r3, r8, r9, r10, d9, d24, out r1, out r2, out r3, out r4, out r5, out r6, out r7, out r8, out r9, out r10, out sp, out d24)
	NZCV = cond(r5 - 0x00000070)
	r3 = r7 + (r5 << 0x00000000)
// DataOut: cpsr d24 d9 fp r0 r1 r10 r3 r9
// DataOut (flags): ZC
// SymbolicIn:

l000099B0_thunk_fn000099B4:
	r0 = fn000099B4(r0, r3, out r2, out r4, out r5, out r6, out r7, out r8, out sp)
	return r0
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn:

fn00009996_entry:
	def fp
	def r0
	def r5
	def r4
	def r8
	def r3
	def r9
	def r10
	def d9
	def d24
	def r1Out
	def r2Out
	def r3Out
	def r4Out
	def r5Out
	def r6Out
	def r7Out
	def r8Out
	def r9Out
	def r10Out
	def d24Out
// DataOut: cpsr d24 d9 fp r0 r10 r3 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009996:
	sp_1 = fp
	r1_4 = OSRAMWriteFirst(r0, out r2_3)
	r0_6 = r5 + 0x00000002
	r1_8 = r4 - 0x00000002
	r0_10 = r0_6 + r8
	r4_11 = r4 + 0x00000001
	NZCV_12 = cond(r4_11)
	r0_27 = OSRAMWriteArray(r0_10, r1_8, r2_3, r3, r8, r9, r10, d9, d24, out r2_18, out r4_19, out r5_20, out r6_21, out r8_22, out r9_23, out r10_24, out lr_25, out d24_26)
	r5_28 = r5_20 + r4_19
	NZCV_29 = cond(r5_28)
	r0_30 = r6_21
	r0_43 = OSRAMWriteFinal(r0_30, r2_18, r3, r8_22, r9_23, r10_24, d9, d24_26, out r1_31, out r2_32, out r3_33, out r4_34, out r5_35, out r6_36, out r7_37, out r8_38, out r9_39, out r10_40, out sp_41, out d24_42)
	NZCV_44 = cond(r5_35 - 0x00000070)
	r3_45 = r7_37 + (r5_35 << 0x00000000)
// DataOut: cpsr d24 d9 fp r0 r1 r10 r3 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000099B0_thunk_fn000099B4:
	r0_53 = fn000099B4(r0_43, r3_45, out r2_46, out r4_47, out r5_48, out r6_49, out r7_50, out r8_51, out sp_52)
	return r0_53
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r4:<invalid> r5:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:<invalid> d4:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> lr:<invalid>

fn00009996_exit:
	r2_54 = PHI(r2_46, r2)
	r4_55 = PHI(r4_47, r4)
	r5_56 = PHI(r5_48, r5)
	r6_57 = PHI(r6_49, r6)
	r7_58 = PHI(r7_50, r7)
	r8_59 = PHI(r8_51, r8)
	sp_60 = PHI(sp_52, sp)
	r0_61 = PHI(r0_53, r0)
	use r1_31 (=> r1Out)
	use r2_54 (=> r2Out)
	use r3_45 (=> r3Out)
	use r4_55 (=> r4Out)
	use r5_56 (=> r5Out)
	use r6_57 (=> r6Out)
	use r7_58 (=> r7Out)
	use r8_59 (=> r8Out)
	use r9_39 (=> r9Out)
	use r10_40 (=> r10Out)
	use d24_42 (=> d24Out)
// DataOut: d24 r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r4:<invalid> r5:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> d4:<invalid> r9:<invalid> r10:<invalid> lr:<invalid>



word32 fn000099B4(word32 r0, word32 r3, ptr32 & r2Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC r0 r3
// LiveOut: r0 r2 r4 r5 r6 r7 r8 sp
// Trashed: NZC r0 r2 r4 r5 r6 r7 r8 sp
// Preserved:
fn000099B4_entry:
	*r2Out = r2
	*r4Out = r4
	*r5Out = r5
	*r6Out = r6
	*r7Out = r7
	*r8Out = r8
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp
// LocalsOut: v3(32)

l000099B4:
	word32 sp_1
	*spOut = v3
	branch ZC l00009B88_in_OSRAMClear
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009B88_in_OSRAMClear:
	word32 r2_30 = Mem0[r3:word32]
	*r2Out = r2_30
	word32 r0_31 = r0 | r2_30
	Mem33[r3:word32] = r0_31
	return r0_31
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3

l000099B6:
	word32 r4_20
	*r4Out = Mem0[v3:word32]
	word32 r5_21
	*r5Out = Mem0[v3 + 4:word32]
	word32 r6_22
	*r6Out = Mem0[v3 + 8:word32]
	word32 r7_23
	*r7Out = Mem0[v3 + 12:word32]
	word32 r8_24
	*r8Out = Mem0[v3 + 16:word32]
	word32 sp_25
	*spOut = v3 + 24
	return r0
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3

fn000099B4_exit:
// DataOut: r0 r2 r4 r5 r6 r7 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r2:<invalid> r0:<invalid>



void OSRAMDisplayOff(word32 r6, word32 r8, word32 r9, word32 r10, word64 d9, word64 d24)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r10 r6 r8 r9
// LiveOut:
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Preserved: lr r3 sp
OSRAMDisplayOff_entry:
// DataOut: d24 d9 r10 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000099C0:
	word32 r2_8
	OSRAMWriteFirst(0x00000080, out r2_8)
	word32 r1_17
	word32 r2_18
	word32 r3_19
	word32 r4_20
	word32 r5_21
	word32 r6_22
	word32 r7_23
	word32 r8_24
	word32 r9_25
	word32 r10_26
	word32 sp_27
	word32 lr_28
	word64 d24_29
	OSRAMWriteByte(0x000000AE, r2_8, r6, r8, r9, r10, d9, d24, out r1_17, out r2_18, out r3_19, out r4_20, out r5_21, out r6_22, out r7_23, out r8_24, out r9_25, out r10_26, out sp_27, out lr_28, out d24_29)
	word32 r1_32
	word32 r2_33
	word32 r3_34
	word32 r4_35
	word32 r5_36
	word32 r6_37
	word32 r7_38
	word32 r8_39
	word32 r9_40
	word32 r10_41
	word32 sp_42
	word32 lr_43
	word64 d24_44
	OSRAMWriteByte(0x00000080, r2_18, r6_22, r8_24, r9_25, r10_26, d9, d24_29, out r1_32, out r2_33, out r3_34, out r4_35, out r5_36, out r6_37, out r7_38, out r8_39, out r9_40, out r10_41, out sp_42, out lr_43, out d24_44)
	word32 r1_47
	word32 r2_48
	word32 r3_49
	word32 r4_50
	word32 r5_51
	word32 r6_52
	word32 r7_53
	word32 r8_54
	word32 r9_55
	word32 r10_56
	word32 sp_57
	word32 lr_58
	word64 d24_59
	OSRAMWriteByte(0x000000AD, r2_33, r6_37, r8_39, r9_40, r10_41, d9, d24_44, out r1_47, out r2_48, out r3_49, out r4_50, out r5_51, out r6_52, out r7_53, out r8_54, out r9_55, out r10_56, out sp_57, out lr_58, out d24_59)
	word32 r1_62
	word32 r2_63
	word32 r3_64
	word32 r4_65
	word32 r5_66
	word32 r6_67
	word32 r7_68
	word32 r8_69
	word32 r9_70
	word32 r10_71
	word32 sp_72
	word32 lr_73
	word64 d24_74
	OSRAMWriteByte(0x00000080, r2_48, r6_52, r8_54, r9_55, r10_56, d9, d24_59, out r1_62, out r2_63, out r3_64, out r4_65, out r5_66, out r6_67, out r7_68, out r8_69, out r9_70, out r10_71, out sp_72, out lr_73, out d24_74)
	word32 r3_77 = Mem0[sp_72:word32]
// DataOut: d24 d9 r0 r10 r2 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000099E6_thunk_OSRAMWriteFinal:
	word32 r1_81
	word32 r2_82
	word32 r3_83
	word32 r4_84
	word32 r5_85
	word32 r6_86
	word32 r7_87
	word32 r8_88
	word32 r9_89
	word32 r10_90
	word32 sp_91
	word64 d24_92
	OSRAMWriteFinal(0x0000008A, r2_63, r3_77, r8_69, r9_70, r10_71, d9, d24_74, out r1_81, out r2_82, out r3_83, out r4_84, out r5_85, out r6_86, out r7_87, out r8_88, out r9_89, out r10_90, out sp_91, out d24_92)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:0x0000008A r3:<invalid> lr:<invalid> r2:<invalid> r1:<invalid> r4:<invalid> r7:<invalid> r6:<invalid> r5:<invalid> r8:<invalid> r10:<invalid> d4:<invalid> r9:<invalid> -8(fp):r3 -4(fp):lr

OSRAMDisplayOff_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r3:<invalid> lr:<invalid> r2:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> r7:<invalid> r5:<invalid> r8:<invalid> r10:<invalid> d4:<invalid> r9:<invalid> -8(fp):r3 -4(fp):lr



word32 SSIConfig(word32 r0, word32 r1, word32 r2, word32 r3, word32 dwArg00, ptr32 & r5Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2 r3
// LiveOut: r4 r5 sp
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 r7 r8 sp
// Preserved:
// Stack args: Stack +0000(32)
SSIConfig_entry:
// DataOut: r0 r1 r2 r3 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000099E8:
	word32 sp_2
	*spOut = fp - 24
	word32 r7_16 = r2
	word32 r5_24
	*r5Out = dwArg00
	word32 r0_25 = SysCtlClockGet()
	branch r2 == 0x00000002 l00009A30
// DataOut: r0 r4 r5 r6 r7 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -0014(32) Local -0018(32)

l00009A30:
	r7_16 = 0x0000000C
// DataOut: r0 r4 r5 r6 r7 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:r2 r6:r0 r8:r1 r4:r3 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32)

l000099FE:
	branch r2 == 0x00000000 l00009A04
// DataOut: r0 r4 r5 r6 r7 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:r2 r6:r0 r8:r1 r4:r3 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32)

l00009A02_1:
	r7_16 = 0x00000004
// DataOut: r0 r4 r5 r6 r7 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:r2 r6:r0 r8:r1 r4:r3 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32)

l00009A04:
	Mem32[r0 + 4:word32] = r7_16
	word32 r3_30 = r0_25 /u r3
	word32 r2_35 = r3_30 /u 0x00000002 - 0x00000001
	branch r2_35 >u 0x000000FF l00009C0C_in_SSIConfig
// DataOut: r0 r2 r3 r4 r5 r6 r8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:<invalid> r6:r0 r8:r1 r4:r3 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32)

l00009C0C_in_SSIConfig:
	word32 r2_69 = Mem0[r3_30 + (r2_35 << 0x00000002) + 52:word32]
	Mem73[r2_69:word32] = Mem0[r2_69:word32] & ~((r0_25 & ~0xF0000000) << 0x00000000)
	return 0x00000002
// DataOut: r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:<invalid> r6:r0 r8:r1 r4:0x00000002 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009A18:
// DataOut: r2 r3 r5 r6 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:<invalid> r6:r0 r8:r1 r4:0x00000002 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32) Local -0018(32)

l00009A1C_in_SSIConfig:
	Mem59[r0 + 16:word32] = 0x00000002
	Mem60[r0:word32] = dwArg00 - 0x00000001 | (r1 & 0x00000030 | r1 << 0x00000006) | r2_35 << 0x00000008
	word32 r5_62
	*r5Out = r5
	word32 sp_66
	*spOut = fp
	return r4
// DataOut: r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:<invalid> r6:r0 r8:r1 r4:0x00000002 r5:<invalid> r3:r1 & 0x00000030 r2:<invalid> r0:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

SSIConfig_exit:
// DataOut: r4 r5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:<invalid> r6:<invalid> r8:<invalid> r4:<invalid> r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void SSIEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
SSIEnable_entry:
// DataOut: r0 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A34:
	Mem6[r0 + 4:word32] = Mem0[r0 + 4:word32] | 0x00000002
	return
// DataOut: r4
// DataOut (flags): 
// SymbolicIn: sp:fp

SSIEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void SSIDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
SSIDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A40:
	Mem6[r0 + 4:word32] = Mem0[r0 + 4:word32] & ~0x00000002
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SSIDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void SSIIntRegister(word32 r1, word32 r6, word32 r8, word32 r9, word64 d9, word64 d24)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r1 r6 r8 r9
// LiveOut:
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: lr r3 sp
SSIIntRegister_entry:
// DataOut: d24 d9 r1 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009A4C:
	word32 sp_14
	IntRegister(0x00000017, r1, r6, r8, r9, d9, d24, out sp_14)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A5A_thunk_IntEnable:
	IntEnable(0x00000017)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:0x00000017 r3:<invalid> lr:<invalid> r4:<invalid> r5:<invalid> r2:<invalid> r1:0x00000001 r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r9:<invalid> d4:<invalid> -8(fp):r3 -4(fp):lr

SSIIntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r5:<invalid> r2:<invalid> r1:0x00000001 r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r9:<invalid> d4:<invalid> -8(fp):r3 -4(fp):lr



void SSIIntUnregister()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr sp
SSIIntUnregister_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009A60:
	IntDisable(0x00000017)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A6E_thunk_IntUnregister:
	IntUnregister(0x00000017)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000017 r3:r3 lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr

SSIIntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000017 r3:<invalid> lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr



void SSIIntEnable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r3
// Preserved: sp
SSIIntEnable_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A74:
	Mem8[r0 + 20:word32] = r1 | Mem0[r0 + 20:word32]
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SSIIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid>



void SSIIntDisable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r1 r3
// Preserved: sp
SSIIntDisable_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A7C:
	Mem7[r0 + 20:word32] = Mem0[r0 + 20:word32] & ~(r1 << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SSIIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid>



void SSIIntStatus(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r0
// Preserved: sp
SSIIntStatus_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A88:
	branch r1 != 0x00000000 l00009A8E
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A8E:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A8A:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SSIIntStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void SSIIntClear(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed:
// Preserved: sp
SSIIntClear_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A94:
	Mem3[r0 + 32:word32] = r1
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SSIIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SSIDataPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SSIDataPut_entry:
// DataOut: cpsr r0 r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A98:
	branch Mem0[r0 + 0x0000000C:word32] << 30 >= 0x00000000 l00009C9C_in_SSIDataPut
// DataOut: cpsr r0 r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C9C_in_SSIDataPut:
	return
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x0000000C r3:<invalid>

l00009AA2_in_SSIDataPut:
	Mem12[r0 + 8:word32] = r1
	return
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x0000000C r3:<invalid>

SSIDataPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x0000000C r3:<invalid> r0:<invalid>



void SSIDataNonBlockingPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
SSIDataNonBlockingPut_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009AA8:
	branch (Mem0[r0 + 12:word32] & 0x00000002) == 0x00000000 l00009AB2
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009AB0_1:
	Mem10[r0 + 8:word32] = r1
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00009AB2:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

SSIDataNonBlockingPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SSIDataGet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r2 r3
// Preserved: sp
SSIDataGet_entry:
// DataOut: cpsr r0 r1 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009AB8:
	branch Mem0[r0 + 0x0000000C:word32] << 29 >= 0x00000000 l00009CBC_in_SSIDataGet
// DataOut: cpsr r0 r1 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CBC_in_SSIDataGet:
	return
// DataOut: cpsr r1 r4
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x0000000C r3:<invalid>

l00009AC2:
	Mem11[r1:word32] = Mem0[r0 + 8:word32]
	return
// DataOut: cpsr r1 r4
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x0000000C r3:<invalid>

SSIDataGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x0000000C r3:<invalid>



void SSIDataNonBlockingGet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
SSIDataNonBlockingGet_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009AC8:
	word32 r3_4 = Mem0[r0 + 12:word32]
	word32 r3_12 = r3_4 & 0x00000004
	branch (r3_4 & 0x00000004) == 0x00000000 l00009AD2
// DataOut: r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009AD0_1:
	r3_12 = Mem0[r0 + 8:word32]
// DataOut: r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00009AD2:
	Mem9[r1:word32] = r3_12
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

SSIDataNonBlockingGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SysCtlSRAMSizeGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlSRAMSizeGet_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009ADC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlSRAMSizeGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SysCtlFlashSizeGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlFlashSizeGet_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009AF4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlFlashSizeGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SysCtlPinPresent(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C r0
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: sp
SysCtlPinPresent_entry:
// DataOut: r0
// DataOut (flags): C
// SymbolicIn: sp:fp

l00009B0C:
	branch Mem0[Mem0[0x00009B1C:word32]:word32] + r0 + C == 0x00000000 l00009B16
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009B14_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00009B16:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:0x00000001

SysCtlPinPresent_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:0x00000000



void SysCtlPeripheralPresent(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: sp
SysCtlPeripheralPresent_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009B20:
	word32 r3_7 = Mem0[Mem0[0x00009B38:word32] + ((r0 >>u 28) << 2):word32]
	word32 r0_8 = r0 & ~0xF0000000
// DataOut: r0 r3
// DataOut (flags): C
// SymbolicIn: sp:fp

l00009B28_thunk_fn00009B2C:
	word32 r3_9
	fn00009B2C(r0_8, r3_7, out r3_9)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r0 >>u 28 r0:r0 & ~0xF0000000

SysCtlPeripheralPresent_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r0 >>u 28 r0:<invalid>



word32 fn00009B2A(word32 r0, word32 r3, word32 r6, ptr32 & r3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r3 r6
// LiveOut: r0 r3
// Trashed: NZCV r0 r3 sp
// Preserved:
fn00009B2A_entry:
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009B2A:
	word32 r0_4 = r0 ^ r6
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): C
// SymbolicIn: sp:fp

l00009B2A_thunk_fn00009B2C:
	word32 r3_10
	return fn00009B2C(r0_4, r3, out r3_10)
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:v3 r0:r0 ^ r6

fn00009B2A_exit:
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:v3 r0:<invalid> r3:<invalid>



word32 fn00009B2C(word32 r0, word32 r3, ptr32 & r3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C r0 r3
// LiveOut: r0 r3
// Trashed: NZCV r0 r3
// Preserved: sp
l00009B2C:
	r3 = Mem0[r3:word32]
	r0 = r0 + r3 + C
	NZCV = cond(r0)
	Z = NZCV (alias)
	branch Test(EQ,Z) l00009B34
// DataOut: cpsr d24 d9 fp lr r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn:

l00009B32_1:
	r0 = 0x00000001
// DataOut: cpsr d24 d9 fp lr r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn:

l00009B34:
	r0 = 0x00000000
	return r0
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn:

fn00009B2C_entry:
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): C
// SymbolicIn: sp:fp

l00009B2C:
	sp = fp
	r3 = Mem0[r3:word32]
	r0 = r0 + r3 + C
	NZCV = cond(r0)
	Z = NZCV (alias)
	branch Test(EQ,Z) l00009B34_in_fn00009B2C
// DataOut: cpsr d24 d9 fp lr r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009B34_in_fn00009B2C:
	r0 = 0x00000000
	return r0
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>

l00009B32_1:
	r0 = 0x00000001
// DataOut: cpsr d24 d9 fp lr r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>

l00009B34_in_fn00009B2C:
	r0 = 0x00000000
	return r0
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:0x00000001

fn00009B2C_exit:
	use r3 (=> r3Out)
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:0x00000000



void SysCtlPeripheralReset(word32 r0, word32 r5, word32 r6, word32 r7)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r5 r6 r7
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 r7 r8 sp
// Preserved:
SysCtlPeripheralReset_entry:
// DataOut: r0 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009B3C:
	word32 r2_11 = Mem0[Mem0[0x00009B78:word32] + ((r0 >>u 28) << 0x00000002) + 16:word32]
	word32 r4_13 = Mem0[r2_11:word32]
	Mem16[r2_11:word32] = r0 & ~0xF0000000 | r4_13
	branch false l00009B6A
// DataOut: r0 r2 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009B5E:
	branch false l00009B68_thunk_fn00009D5E
// DataOut: r0 r2 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r1:0x00000000 r3:0x00000000 r2:<invalid> r4:<invalid> -12(fp):0x00000000 -4(fp):r4
// LocalsOut: fp(32) Local -000C(32)

l00009B68_thunk_fn00009D5E:
	fn00009D5E(r0, r2_11, r4_13, r5, r6, r7, 0x00000001)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r1:0x00000000 r3:0x00000001 r2:<invalid> r4:<invalid> -12(fp):0x00000001 -4(fp):r4

l00009B6A:
	Mem33[r2_11:word32] = Mem16[r2_11:word32] & ~(r0 << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r1:0x00000000 r3:<invalid> r2:<invalid> r4:<invalid> -12(fp):<invalid> -4(fp):r4

SysCtlPeripheralReset_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r2:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> -12(fp):<invalid> -4(fp):r4



void SysCtlPeripheralEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralEnable_entry:
// DataOut: cpsr d24 d9 fp r0 r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009B7C:
	word32 r3_8 = Mem0[Mem0[0x00009B94:word32] + ((r0 >>u 28) << 0x00000002) + 28:word32]
	word32 r0_9 = r0 & ~0xF0000000
// DataOut: cpsr d24 d9 fp r0 r10 r3 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009B88:
	Mem13[r3_8:word32] = r0_9 | Mem0[r3_8:word32]
	return
// DataOut: cpsr d24 d9 fp r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r0 >>u 28 r0:r0 & ~0xF0000000

SysCtlPeripheralEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>



void SysCtlPeripheralDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009B98:
	word32 r2_8 = Mem0[Mem0[0x00009BB0:word32] + ((r0 >>u 28) << 0x00000002) + 28:word32]
	Mem12[r2_8:word32] = Mem0[r2_8:word32] & ~((r0 & ~0xF0000000) << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlPeripheralDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>



void SysCtlPeripheralSleepEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralSleepEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009BB4:
	word32 r3_7 = Mem0[Mem0[0x00009BCC:word32] + ((r0 >>u 28) << 0x00000002) + 40:word32]
	Mem12[r3_7:word32] = r0 & ~0xF0000000 | Mem0[r3_7:word32]
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlPeripheralSleepEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>



void SysCtlPeripheralSleepDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralSleepDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009BD0:
	word32 r2_8 = Mem0[Mem0[0x00009BE8:word32] + ((r0 >>u 28) << 0x00000002) + 40:word32]
	Mem12[r2_8:word32] = Mem0[r2_8:word32] & ~((r0 & ~0xF0000000) << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlPeripheralSleepDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>



void SysCtlPeripheralDeepSleepEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralDeepSleepEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009BEC:
	word32 r3_7 = Mem0[Mem0[0x00009C04:word32] + ((r0 >>u 28) << 0x00000002) + 52:word32]
	Mem12[r3_7:word32] = r0 & ~0xF0000000 | Mem0[r3_7:word32]
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlPeripheralDeepSleepEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>



void SysCtlPeripheralDeepSleepDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralDeepSleepDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C08:
	word32 r3_3 = Mem0[0x00009C20:word32]
// DataOut: r0 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C0C:
	word32 r2_8 = Mem0[r3_3 + ((r0 >>u 28) << 0x00000002) + 52:word32]
	Mem12[r2_8:word32] = Mem0[r2_8:word32] & ~((r0 & ~0xF0000000) << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r0 >>u 28

SysCtlPeripheralDeepSleepDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>



void SysCtlPeripheralClockGating(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
SysCtlPeripheralClockGating_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C24:
	word32 r2_3 = Mem0[0x00009C3C:word32]
	word32 r3_4 = Mem0[r2_3:word32]
	branch r0 != 0x00000000 l00009C32
// DataOut: r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C32:
	Mem10[r2_3:word32] = r3_4 | 0x08000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

l00009C2A:
	Mem8[r2_3:word32] = r3_4 & ~0x08000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

SysCtlPeripheralClockGating_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>



void SysCtlIntRegister(word32 r0, word32 r6, word32 r8, word32 r9, word64 d9, word64 d24)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r0 r6 r8 r9
// LiveOut:
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: lr r3 sp
SysCtlIntRegister_entry:
// DataOut: d24 d9 r0 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009C40:
	word32 sp_15
	IntRegister(0x0000002C, r0, r6, r8, r9, d9, d24, out sp_15)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C50_thunk_IntEnable:
	IntEnable(0x0000002C)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r0:0x0000002C r3:<invalid> lr:<invalid> r4:<invalid> r5:<invalid> r2:<invalid> r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r9:<invalid> d4:<invalid> -8(fp):r3 -4(fp):lr

SysCtlIntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r5:<invalid> r2:<invalid> r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r9:<invalid> d4:<invalid> -8(fp):r3 -4(fp):lr



void SysCtlIntUnregister()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr sp
SysCtlIntUnregister_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009C54:
	IntDisable(0x0000002C)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C62_thunk_IntUnregister:
	IntUnregister(0x0000002C)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x0000002C r3:r3 lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr

SysCtlIntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x0000002C r3:<invalid> lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr



void SysCtlIntEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlIntEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C68:
	word32 r2_3 = Mem0[0x00009C74:word32]
	Mem8[r2_3:word32] = r0 | Mem0[r2_3:word32]
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:<invalid>



void SysCtlIntDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0 r2 r3
// Preserved: sp
SysCtlIntDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C78:
	word32 r2_3 = Mem0[0x00009C84:word32]
	Mem7[r2_3:word32] = Mem0[r2_3:word32] & ~(r0 << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:<invalid>



void SysCtlIntClear(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
SysCtlIntClear_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C88:
	Mem5[Mem0[0x00009C90:word32]:word32] = r0
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void SysCtlIntStatus(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlIntStatus_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C94:
	branch r0 != 0x00000000 l00009C9C
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C9C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C96:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlIntStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SysCtlLDOSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
SysCtlLDOSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CAC:
	Mem5[Mem0[0x00009CB4:word32]:word32] = r0
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlLDOSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void SysCtlLDOGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlLDOGet_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CB8:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CBC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>

SysCtlLDOGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SysCtlLDOConfigSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
SysCtlLDOConfigSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CC4:
	Mem5[Mem0[0x00009CCC:word32]:word32] = r0
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlLDOConfigSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void SysCtlReset()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SysCtlReset_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

SysCtlReset_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CD0:
	Mem5[Mem0[0x00009CD8:word32]:word32] = Mem0[0x00009CDC:word32]
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CD6:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>



void SysCtlSleep()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
SysCtlSleep_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CE0:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CE0_thunk_CPUwfi:
	CPUwfi()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlSleep_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SysCtlDeepSleep()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r3
// Preserved: r4 sp
SysCtlDeepSleep_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009CE4:
	word32 r4_8 = Mem0[0x00009D00:word32]
	Mem11[r4_8:word32] = Mem0[r4_8:word32] | 0x00000004
	CPUwfi()
	Mem14[r4_8:word32] = Mem11[r4_8:word32] & ~0x00000004
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlDeepSleep_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> -8(fp):r4 -4(fp):lr



void SysCtlResetCauseGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlResetCauseGet_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009D04:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlResetCauseGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SysCtlResetCauseClear(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0 r2 r3
// Preserved: sp
SysCtlResetCauseClear_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009D10:
	word32 r2_3 = Mem0[0x00009D1C:word32]
	Mem7[r2_3:word32] = Mem0[r2_3:word32] & ~(r0 << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlResetCauseClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:<invalid>



void SysCtlBrownOutConfigSet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r1 r3
// Preserved: sp
SysCtlBrownOutConfigSet_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009D20:
	Mem7[Mem0[0x00009D2C:word32]:word32] = r0 | r1 << 0x00000002
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlBrownOutConfigSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:r0 | r1 << 0x00000002



void SysCtlClockSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 r7 r8 sp
// Preserved:
SysCtlClockSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009D30:
	word32 r4_15 = Mem0[0x00009DE0:word32]
	word32 r3_17 = Mem0[r4_15:word32]
	word32 r5_25 = Mem0[0x00009DE8:word32]
	word32 r2_28 = r0 & 0x000033F0 | (Mem0[0x00009DE4:word32] & r3_17 | 0x00000800) & (r0 | ~0x00000003)
	Mem30[r4_15:word32] = r3_17 & ~0x00400000 | 0x00000800
// DataOut: r0 r2 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009D5C_thunk_fn00009D5E:
	fn00009D5E(r0, r2_28, r4_15, r5_25, 0x00000000, 0x00000040, dwLoc14)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r2:<invalid> r7:0x00000040 r6:0x00000000 r4:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

SysCtlClockSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> r7:<invalid> r6:<invalid> r4:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> r8:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7



void fn00009D5E(word32 r0, word32 r2, word32 r4, word32 r5, word32 r6, word32 r7, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r2 r4 r5 r6 r7
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 r7 r8 sp
// Preserved: sp
l00009D5E:
	Mem0[r5:word32] = r7
	Mem0[r4:word32] = r2
	Mem0[sp + 4:word32] = r6
	r3 = Mem0[sp + 4:word32]
	NZCV = cond(r3 - 0x0000000F)
	ZC = NZCV (alias)
	branch Test(UGT,ZC) l00009D76
// DataOut: r0 r2 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn:

l00009D68_thunk_fn00009D76:
	fn00009D76(r0, r2, r6)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l00009D68_thunk_fn00009D6A:
	fn00009D6A(r0, r2, r4, r5, r6, r7)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00009D5E_entry:
	def fp
	def r7
	def r5
	def r2
	def r4
	def r6
	def r0
// DataOut: r0 r2 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009D5E:
	sp_1 = fp
	Mem3[r5:word32] = r7
	Mem6[r4:word32] = r2
	dwArg04_9 = r6
	r3_10 = dwArg04_9
	NZCV_11 = cond(r3_10 - 0x0000000F)
	ZC_12 = NZCV_11 (alias)
	branch r3_10 >u 0x0000000F l00009D68_thunk_fn00009D76
// DataOut: r0 r2 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009D68_thunk_fn00009D76:
	fn00009D76(r0, r2, r6)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r6 4(fp):r6

l00009D68_thunk_fn00009D6A:
	fn00009D6A(r0, r2, r4, r5, r6, r7)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r6 4(fp):r6

fn00009D5E_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r2:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r8:<invalid> r0:<invalid> 4(fp):r6



void fn00009D6A(word32 r0, word32 r2, word32 r4, word32 r5, word32 r6, word32 r7)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r2 r4 r5 r6 r7
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 r7 r8 sp
// Preserved:
fn00009D6A_entry:
// DataOut: r0 r2 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(32)

l00009D6A:
	Mem5[v3 + 4:word32] = Mem0[v3 + 4:word32] + 0x00000001
	branch Mem5[v3 + 4:word32] <=u 0x0000000F l00009F6A_in_SysCtlClockSet
// DataOut: r0 r2 r4 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009F6A_in_SysCtlClockSet:
	Mem27[r5 + 48:word32] = r2 & ~0x00000001
	word32 r0_28 = SysCtlClockGet()
	word32 r2_30 = r0_28 /u (r7 << 4)
	Mem38[r5 + 36:word32] = r2_30
	Mem39[r5 + 40:word32] = (r0_28 - (r7 << 4) * r2_30 << 3) /u r7 + 0x00000001 >>u 1
	Mem40[r5 + 44:word32] = r6
	Mem41[r5 + 24:word32] = r4
	Mem44[r5 + 44:word32] = Mem41[r5 + 44:word32] | 0x00000010
	Mem48[r5 + 48:word32] = Mem44[r5 + 48:word32] | 0x00000300 | 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid>

l00009D74_thunk_fn00009D76:
	fn00009D76(r0, r2, r6)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid>

fn00009D6A_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r2:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r8:<invalid> r0:<invalid>



void fn00009D76(word32 r0, word32 r2, word32 r6)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r2 r6
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 r5 r6 r7 r8 sp
// Preserved:
fn00009D76_entry:
// DataOut: r0 r2 r6
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(32)

l00009D76:
	word32 r2_8 = r2 & ~0x00000003 | r0 & 0x00000003
	Mem11[Mem0[0x00009DE0:word32]:word32] = r2_8
	word32 r1_15 = r0 & 0x07C00000 | (r2_8 & ~0x07C00000) << 0x00000000
	branch r0 << 20 < 0x00000000 l00009DBE
// DataOut: r1 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009D94:
	Mem69[v3 + 4:word32] = 0x00008000
	branch Mem69[v3 + 4:word32] == 0x00000000 l00009DBA
// DataOut: r1 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:(r2 & ~0x00000003 | r0 & 0x00000003) & ~0x07C00000 r4:r0 << 20 r2:r2 & ~0x00000003 | r0 & 0x00000003 r1:r0 & 0x07C00000 | ((r2 & ~0x00000003 | r0 & 0x00000003) & ~0x07C00000) << 0x00000000

l00009D9E:
	word32 r2_80 = Mem69[0x00009DEC:word32]
	word32 r3_81 = Mem69[r2_80:word32]
	branch r3_81 << 25 >= 0x00000000 l00009DAE
// DataOut: r0 r1 r2 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid> r4:r0 << 20 r2:r2 & ~0x00000003 | r0 & 0x00000003 r1:r0 & 0x07C00000 | ((r2 & ~0x00000003 | r0 & 0x00000003) & ~0x07C00000) << 0x00000000

l00009DAE:
	Mem87[v3 + 4:word32] = Mem69[v3 + 4:word32] - 0x00000001
	branch Mem87[v3 + 4:word32] != 0x00000000 l00009DB8_thunk_UARTConfigGet
// DataOut: r0 r1 r2 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid> r4:r0 << 20 r2:<invalid> r1:r0 & 0x07C00000 | ((r2 & ~0x00000003 | r0 & 0x00000003) & ~0x07C00000) << 0x00000000 r0:<invalid>

l00009DB8_thunk_UARTConfigGet:
	UARTConfigGet(r3_81 << 25, r1_15, r2_80)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid> r4:r0 << 20 r2:<invalid> r1:r0 & 0x07C00000 | ((r2 & ~0x00000003 | r0 & 0x00000003) & ~0x07C00000) << 0x00000000 r0:<invalid>

l00009DA6:
// DataOut: r1 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid> r4:r0 << 20 r2:<invalid> r1:r0 & 0x07C00000 | ((r2 & ~0x00000003 | r0 & 0x00000003) & ~0x07C00000) << 0x00000000 r0:<invalid>

l00009DBA:
	r1_15 = r1_15 & ~0x00000800
// DataOut: r1 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid> r4:r0 << 20 r2:<invalid> r1:r0 & 0x07C00000 | ((r2 & ~0x00000003 | r0 & 0x00000003) & ~0x07C00000) << 0x00000000 r0:<invalid>

l00009DBE:
	Mem39[Mem11[0x00009DE0:word32]:word32] = r1_15
	Mem40[v3 + 4:word32] = 0x00000000
	branch Mem40[v3 + 4:word32] >u 0x0000000F l00009DD8
// DataOut: r6 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid> r4:r0 << 20 r2:<invalid> r1:<invalid> r0:<invalid>

l00009DCC:
	Mem56[v3 + 4:word32] = Mem40[v3 + 4:word32] + 0x00000001
	word32 r3_57 = Mem56[v3 + 4:word32]
	branch r3_57 <=u 0x0000000F l00009FCC_in_SysCtlClockSet
// DataOut: r3 r6 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid> r4:r0 << 20 r2:<invalid> r1:<invalid> r0:<invalid>

l00009FCC_in_SysCtlClockSet:
	Mem60[r6:word32] = r3_57
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid> r4:r0 << 20 r2:<invalid> r1:<invalid> r0:<invalid>

l00009DD8:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:v3 r3:<invalid> r4:r0 << 20 r2:<invalid> r1:<invalid> r0:<invalid>

fn00009D76_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r0:<invalid>



word32 SysCtlClockGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
SysCtlClockGet_entry:
// DataOut: cpsr d24 d9 fp r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009DF0:
	word32 r0_19
	word32 r3_4 = Mem0[Mem0[0x00009E54:word32]:word32]
	branch (r3_4 & 0x00000030) == 0x00000010 l00009E4E
// DataOut: cpsr d24 d9 fp r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009E4E:
	r0_19 = Mem0[0x00009E64:word32]
// DataOut: cpsr d24 d9 fp r0 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l00009DFC:
	branch (r3_4 & 0x00000030) == 0x00000020 l00009E4A
// DataOut: cpsr d24 d9 fp r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l00009E4A:
	r0_19 = Mem0[0x00009E60:word32]
// DataOut: cpsr d24 d9 fp r0 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l00009E00:
	branch (r3_4 & 0x00000030) == 0x00000000 l00009E06
// DataOut: cpsr d24 d9 fp r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l00009E06:
	r0_19 = Mem0[Mem0[0x00009E58:word32] + ((uint32) SLICE(r3_4, ui4, 6) << 0x00000002) + 48:word32]
// DataOut: cpsr d24 d9 fp r0 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l00009E12:
	branch r3_4 << 20 < 0x00000000 l00009E3A
// DataOut: cpsr d24 d9 fp r0 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>

l00009E16:
	word32 r2_36 = Mem0[Mem0[0x00009E5C:word32]:word32]
	r0_19 = r0_19 * ((uint32) SLICE(r2_36, ui9, 5) + 0x00000002) /u ((r2_36 & 0x0000001F) + 0x00000002)
	branch r2_36 << 17 >= 0x00000000 l00009E34
// DataOut: cpsr d24 d9 fp r0 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>

l00009E32_1:
	r0_19 = r0_19 >>u 1
// DataOut: cpsr d24 d9 fp r0 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>

l00009E34:
	branch r2_36 << 16 >= 0x00000000 l00009E3A
// DataOut: cpsr d24 d9 fp r0 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>

l00009E38_1:
	r0_19 = r0_19 >>u 2
// DataOut: cpsr d24 d9 fp r0 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>

l00009E3A:
	branch r3_4 << 9 >= 0x00000000 l0000A004
// DataOut: cpsr d24 d9 fp r0 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>

l0000A004:
	Mem34[r0_19 + 48:word32] = r3_4 & ~0x00000001
	return r0_19
// DataOut: cpsr d24 d9 fp r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>

l00009E3E:
	return r0_19 /u ((uint32) SLICE(r3_4, ui4, 23) + 0x00000001)
// DataOut: cpsr d24 d9 fp r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>

l00009E02:
	return 0x00000000
// DataOut: cpsr d24 d9 fp r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

SysCtlClockGet_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>



void SysCtlPWMClockSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPWMClockSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009E68:
	word32 r2_3 = Mem0[0x00009E78:word32]
	Mem9[r2_3:word32] = r0 | Mem0[r2_3:word32] & ~0x001E0000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlPWMClockSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:<invalid>



void SysCtlPWMClockGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlPWMClockGet_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009E7C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlPWMClockGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SysCtlADCSpeedSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r1 r2 r3
// Preserved: r4 sp
SysCtlADCSpeedSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009E8C:
	word32 r4_6 = Mem0[0x00009EB8:word32]
	word32 r1_7 = Mem0[0x00009EBC:word32]
	word32 r2_9 = Mem0[0x00009EC0:word32]
	Mem13[r4_6:word32] = Mem0[r4_6:word32] & ~0x00000F00 | r0
	Mem19[r1_7:word32] = Mem13[r1_7:word32] & ~0x00000F00 | r0
	Mem24[r2_9:word32] = r0 | Mem19[r2_9:word32] & ~0x00000F00
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlADCSpeedSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r1:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> -4(fp):r4



void SysCtlADCSpeedGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlADCSpeedGet_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009EC4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlADCSpeedGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SysCtlIOSCVerificationSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
SysCtlIOSCVerificationSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009ED4:
	word32 r2_3 = Mem0[0x00009EEC:word32]
	word32 r3_4 = Mem0[r2_3:word32]
	branch r0 != 0x00000000 l00009EE2
// DataOut: r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009EE2:
	Mem10[r2_3:word32] = r3_4 | 0x00000008
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

l00009EDA:
	Mem8[r2_3:word32] = r3_4 & ~0x00000008
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

SysCtlIOSCVerificationSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>



void SysCtlMOSCVerificationSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
SysCtlMOSCVerificationSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009EF0:
	word32 r2_3 = Mem0[0x00009F08:word32]
	word32 r3_4 = Mem0[r2_3:word32]
	branch r0 != 0x00000000 l00009EFE
// DataOut: r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009EFE:
	Mem10[r2_3:word32] = r3_4 | 0x00000004
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

l00009EF6:
	Mem8[r2_3:word32] = r3_4 & ~0x00000004
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

SysCtlMOSCVerificationSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>



void SysCtlPLLVerificationSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
SysCtlPLLVerificationSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009F0C:
	word32 r2_3 = Mem0[0x00009F24:word32]
	word32 r3_4 = Mem0[r2_3:word32]
	branch r0 != 0x00000000 l00009F1A
// DataOut: r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009F1A:
	Mem10[r2_3:word32] = r3_4 | 0x00000400
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

l00009F12:
	Mem8[r2_3:word32] = r3_4 & ~0x00000400
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

SysCtlPLLVerificationSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>



void SysCtlClkVerificationClear()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r1 r2 r3
// Preserved: sp
SysCtlClkVerificationClear_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009F28:
	word32 r3_5 = Mem0[0x00009F34:word32]
	Mem6[r3_5:word32] = 0x00000001
	Mem7[r3_5:word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlClkVerificationClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:0x00000001 r2:0x00000000 r3:<invalid>



void UARTParityModeSet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r3
// Preserved: sp
UARTParityModeSet_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009F38:
	Mem9[r0 + 44:word32] = r1 | Mem0[r0 + 44:word32] & ~0x00000086
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTParityModeSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid>



void UARTParityModeGet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
UARTParityModeGet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009F44:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTParityModeGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void UARTConfigSet(word32 r0, word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r4 r5 r6 r7 sp
// Preserved: r3
UARTConfigSet_entry:
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009F4C:
	word32 r4_24 = Mem0[r0 + 0x00000018:word32]
	branch (r4_24 & 0x00000008) != 0x00000000 l0000A156_in_UARTConfigSet
// DataOut: r0 r1 r2 r3 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A156_in_UARTConfigSet:
	Mem72[r2:word32] = r3
	Mem73[r0 + 0x0000001C:word32] = r1
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:r1 r6:r2 r5:r0 r0:r0 + 0x00000018 r4:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00009F5E:
	Mem40[r0 + 44:word32] = Mem0[r0 + 44:word32] & ~0x00000010
	word32 r2_42 = Mem40[r0 + 48:word32] & ~0x00000300
// DataOut: r2 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:r1 r6:r2 r5:r0 r0:r0 + 0x00000018 r4:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00009F6A:
	Mem44[r0 + 48:word32] = r2_42 & ~0x00000001
	word32 r0_45 = SysCtlClockGet()
	word32 r2_47 = r0_45 /u (r1 << 4)
	Mem55[r0 + 36:word32] = r2_47
	Mem56[r0 + 40:word32] = (r0_45 - (r1 << 4) * r2_47 << 3) /u r1 + 0x00000001 >>u 1
	Mem57[r0 + 44:word32] = r2
	Mem58[r0 + 24:word32] = r4_24 & 0x00000008
	Mem61[r0 + 44:word32] = Mem58[r0 + 44:word32] | 0x00000010
	Mem65[r0 + 48:word32] = Mem61[r0 + 48:word32] | 0x00000300 | 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:r1 r6:r2 r5:r0 r0:r0 + 0x00000018 r4:<invalid> r3:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

UARTConfigSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:<invalid> r6:<invalid> r5:<invalid> r0:<invalid> r4:<invalid> r3:r3 r2:<invalid> r1:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



void UARTConfigGet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
UARTConfigGet_entry:
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009FA8:
	Mem29[r1:word32] = (SysCtlClockGet() << 2) /u (Mem0[r0 + 40:word32] + (Mem0[r0 + 36:word32] << 0x00000006))
	word32 r3_30 = Mem29[r0 + 44:word32]
// DataOut: r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009FCC:
	Mem32[r2:word32] = r3_30 & 0x000000EE
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r8:<invalid> r4:r0 r7:r1 r6:r2 r5:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

UARTConfigGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 r4:r4 r7:r7 r6:r6 r5:r5 r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void UARTEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
UARTEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009FD4:
	Mem6[r0 + 44:word32] = Mem0[r0 + 44:word32] | 0x00000010
	Mem10[r0 + 48:word32] = Mem6[r0 + 48:word32] | 0x00000300 | 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void UARTDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
UARTDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009FEC:
	branch Mem0[r0 + 0x00000018:word32] << 28 < 0x00000000 l00009FF4_thunk_fn0000A1F0
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00009FF4_thunk_fn0000A1F0:
	fn0000A1F0()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid>

l00009FF6:
	Mem12[r0 + 44:word32] = Mem0[r0 + 44:word32] & ~0x00000010
	word32 r3_14 = Mem12[r0 + 48:word32] & ~0x00000300
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid>

l0000A004_in_UARTDisable:
	Mem16[r0 + 48:word32] = r3_14 & ~0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid>

UARTDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid> r0:0x00000001



void UARTCharsAvail(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
UARTCharsAvail_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A00C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTCharsAvail_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void UARTSpaceAvail(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
UARTSpaceAvail_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A018:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTSpaceAvail_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void UARTCharNonBlockingGet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
UARTCharNonBlockingGet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A024:
	branch Mem0[r0 + 24:word32] << 27 < 0x00000000 l0000A02C
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A02A_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l0000A02C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>

UARTCharNonBlockingGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:0xFFFFFFFF



void UARTCharGet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
UARTCharGet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A034:
	branch Mem0[r0 + 0x00000018:word32] << 27 < 0x00000000 l0000A238_in_UARTCharGet
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A238_in_UARTCharGet:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid>

l0000A03E:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid>

UARTCharGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid> r0:<invalid>



void UARTCharNonBlockingPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
UARTCharNonBlockingPut_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A044:
	branch Mem0[r0 + 24:word32] << 26 < 0x00000000 l0000A04C
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A04A_1:
	Mem10[r0:word32] = r1
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l0000A04C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

UARTCharNonBlockingPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:0x00000000



void UARTCharPut(word32 r0, word32 r1, word32 r4, word32 r5, word32 r6, word32 r7, word32 r9)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r4 r5 r6 r7 r9
// LiveOut:
// Trashed: NZC r2 r3
// Preserved: sp
UARTCharPut_entry:
// DataOut: r0 r1 r4 r5 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A054:
	branch Mem0[r0 + 0x00000018:word32] << 26 < 0x00000000 l0000A258
// DataOut: r0 r1 r2 r4 r5 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A258:
	Mem13[r4 + 52:word32] = r5
	Mem17[r0 + 0x00000021:byte] = (byte) r0
	Mem23[r5 + 21:byte] = (byte) r7
	Mem24[r5 + 68:word32] = r6 << 1
	word32 r0_25 = Mem24[(r6 << 1) + 96:word32]
	Mem26[r5 + 17:byte] = (byte) r7
	Mem27[(r6 << 1) + 32:word32] = r0_25
	Mem30[Mem27[r6 + 4:word32] + 9:byte] = (byte) r5
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid>

l0000A05E:
	Mem10[r0:word32] = r1
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid>

UARTCharPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid>



void UARTBreakCtl(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r3
// Preserved: sp
UARTBreakCtl_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A064:
	word32 r3_4 = Mem0[r0 + 44:word32]
	branch r1 != 0x00000000 l0000A070
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A070:
	Mem10[r0 + 44:word32] = r3_4 | 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l0000A068:
	Mem8[r0 + 44:word32] = r3_4 & ~0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

UARTBreakCtl_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void UARTIntRegister(word32 r0, word32 r1, word32 r6, word32 r8, word32 r9, word64 d9, word64 d24)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r0 r1 r6 r8 r9
// LiveOut:
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: lr r4 sp
UARTIntRegister_entry:
// DataOut: d24 d9 r0 r1 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A078:
	branch r0 != Mem0[0x0000A094:word32] l0000A082
// DataOut: d24 d9 r1 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A080_1:
// DataOut: d24 d9 r1 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> -8(fp):r4 -4(fp):lr

l0000A082:
	word32 sp_20
	word32 r4_21 = IntRegister(0x00000016, r1, r6, r8, r9, d9, d24, out sp_20)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> -8(fp):r4 -4(fp):lr

l0000A090_thunk_IntEnable:
	IntEnable(r4_21)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r0:<invalid> lr:<invalid> r3:<invalid> r5:<invalid> r2:<invalid> r1:0x00000001 r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r9:<invalid> d4:<invalid> -8(fp):r4 -4(fp):lr

UARTIntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r0:<invalid> lr:<invalid> r2:<invalid> r3:<invalid> r5:<invalid> r1:0x00000001 r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r9:<invalid> d4:<invalid> -8(fp):r4 -4(fp):lr



void UARTIntUnregister(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r4 sp
UARTIntUnregister_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A098:
	branch r0 != Mem0[0x0000A0B4:word32] l0000A0A2
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0A0_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> -8(fp):r4 -4(fp):lr

l0000A0A2:
	IntDisable(0x00000016)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> -8(fp):r4 -4(fp):lr

l0000A0B0_thunk_IntUnregister:
	IntUnregister(0x00000016)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r0:0x00000016 lr:lr r2:<invalid> r3:<invalid> -8(fp):r4 -4(fp):lr

UARTIntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r0:0x00000016 lr:lr r3:<invalid> r2:<invalid> -8(fp):r4 -4(fp):lr



void UARTIntEnable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r3
// Preserved: sp
UARTIntEnable_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0B8:
	Mem8[r0 + 56:word32] = r1 | Mem0[r0 + 56:word32]
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid>



void UARTIntDisable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r1 r3
// Preserved: sp
UARTIntDisable_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0C0:
	Mem7[r0 + 56:word32] = Mem0[r0 + 56:word32] & ~(r1 << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid>



word32 UARTIntStatus(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut: r0
// Trashed: r0
// Preserved: sp
UARTIntStatus_entry:
// DataOut: cpsr r0 r1 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0CC:
	branch r1 != 0x00000000 l0000A0D2
// DataOut: cpsr r0 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0D2:
	return Mem0[r0 + 64:word32]
// DataOut: cpsr r0 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0CE:
	return Mem0[r0 + 60:word32]
// DataOut: cpsr r0 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTIntStatus_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void UARTIntClear(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed:
// Preserved: sp
UARTIntClear_entry:
// DataOut: cpsr r0 r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0D8:
	Mem3[r0 + 68:word32] = r1
	return
// DataOut: cpsr r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void CPUcpsie()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
CPUcpsie_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0DC:
	__cps_id()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

CPUcpsie_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void CPUcpsid()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
CPUcpsid_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0E4:
	__cps_id()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

CPUcpsid_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void CPUwfi()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
CPUwfi_entry:
// DataOut: r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0EC:
	__wait_for_interrupt()
	return
// DataOut: r4
// DataOut (flags): 
// SymbolicIn: sp:fp

CPUwfi_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CMasterInit(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 sp
I2CMasterInit_entry:
// DataOut: cpsr d24 d9 fp r0 r1 r10 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A0F4:
	Mem18[r0 + 32:word32] = Mem0[r0 + 32:word32] | 0x00000010
	word32 r0_19 = SysCtlClockGet()
	word32 r3_20 = Mem18[0x0000A120:word32]
	word32 r2_21 = Mem18[0x0000A124:word32]
	branch r1 != 0x00000001 l0000A112
// DataOut: cpsr d24 d9 fp r0 r10 r2 r3 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A110_1:
	r3_20 = r2_21
// DataOut: cpsr d24 d9 fp r0 r10 r3 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r1 r2:<invalid> r4:r0 r3:<invalid> r0:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000A112:
	Mem30[r0 + 12:word32] = (r0_19 - 0x00000001 + r3_20) /u r3_20 - 0x00000001
	return
// DataOut: cpsr d24 d9 fp r10 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r1 r2:<invalid> r4:r0 r3:<invalid> r0:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

I2CMasterInit_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:<invalid> r4:r4 r3:r3 r0:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void I2CSlaveInit(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r2 r3
// Preserved: r4 sp
I2CSlaveInit_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A128:
	Mem11[r0 - 0x000007E0:word32] = Mem0[r0 - 0x000007E0:word32] | 0x00000020
	Mem12[r0 + 4:word32] = 0x00000001
	Mem14[r0:word32] = r1
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveInit_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r2:r0 - 0x000007E0 r3:<invalid> -4(fp):r4



void I2CMasterEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A140:
	Mem6[r0 + 32:word32] = Mem0[r0 + 32:word32] | 0x00000010
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void I2CSlaveEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r1 r2 r3
// Preserved: sp
I2CSlaveEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A14C:
	word32 r3_6 = Mem0[r0 - 0x000007E0:word32]
// DataOut: r0 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A156:
	Mem8[r0 - 0x000007E0:word32] = r3_6 | 0x00000020
	Mem9[r0 + 4:word32] = 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:0x00000001 r2:r0 - 0x000007E0 r3:<invalid>

I2CSlaveEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:0x00000001 r2:r0 - 0x000007E0 r3:<invalid>



void I2CMasterDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A160:
	Mem6[r0 + 32:word32] = Mem0[r0 + 32:word32] & ~0x00000010
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void I2CSlaveDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
I2CSlaveDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A16C:
	Mem5[r0 + 4:word32] = 0x00000000
	Mem8[r0 - 0x000007E0:word32] = Mem5[r0 - 0x000007E0:word32] & ~0x00000020
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r0 - 0x000007E0



void I2CIntRegister(word32 r1, word32 r6, word32 r8, word32 r9, word64 d9, word64 d24)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d24 d9 r1 r6 r8 r9
// LiveOut:
// Trashed: NZCV d4 lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: lr r3 sp
I2CIntRegister_entry:
// DataOut: d24 d9 r1 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A180:
	word32 sp_14
	IntRegister(0x00000018, r1, r6, r8, r9, d9, d24, out sp_14)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A18E_thunk_IntEnable:
	IntEnable(0x00000018)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:0x00000018 r3:<invalid> lr:<invalid> r4:<invalid> r5:<invalid> r2:<invalid> r1:0x00000001 r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r9:<invalid> d4:<invalid> -8(fp):r3 -4(fp):lr

I2CIntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r5:<invalid> r2:<invalid> r1:0x00000001 r6:<invalid> r8:<invalid> r7:<invalid> r10:<invalid> r9:<invalid> d4:<invalid> -8(fp):r3 -4(fp):lr



void I2CIntUnregister()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr sp
I2CIntUnregister_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A194:
	IntDisable(0x00000018)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1A2_thunk_IntUnregister:
	IntUnregister(0x00000018)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000018 r3:r3 lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr

I2CIntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000018 r3:<invalid> lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr



void I2CMasterIntEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterIntEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1A8:
	Mem3[r0 + 16:word32] = 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000001



void I2CSlaveIntEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CSlaveIntEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1B0:
	Mem3[r0 + 12:word32] = 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000001



void I2CMasterIntDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterIntDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1B8:
	Mem3[r0 + 16:word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000000



void I2CSlaveIntDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CSlaveIntDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1C0:
	Mem3[r0 + 12:word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000000



word32 I2CMasterIntStatus(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut: r0
// Trashed: NZCV r0
// Preserved: sp
I2CMasterIntStatus_entry:
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1C8:
	branch r1 != 0x00000000 l0000A1D4
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1D4:
	word32 r0_14 = Mem0[r0 + 24:word32]
	word32 r0_15 = r0_14
	branch r0_14 == 0x00000000 l0000A1DC
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1DA_1:
	r0_15 = 0x00000001
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l0000A1DC:
	return r0_15
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l0000A1CA:
	word32 r0_8 = Mem0[r0 + 20:word32]
	word32 r0_12 = r0_8
	branch r0_8 == 0x00000000 l0000A1D2
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1D0_1:
	r0_12 = 0x00000001
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l0000A1D2:
	return r0_12
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

I2CMasterIntStatus_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void I2CSlaveIntStatus(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r0
// Preserved: sp
I2CSlaveIntStatus_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1E0:
	branch r1 != 0x00000000 l0000A1EC
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1EC:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp

l0000A1EE_thunk_fn0000A1F0:
	fn0000A1F0()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l0000A1E2:
	branch Mem0[r0 + 16:word32] == 0x00000000 l0000A1EA
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1E8_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l0000A1EA:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

I2CSlaveIntStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void fn0000A1F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z
// LiveOut:
// Trashed: r0
// Preserved: sp
l0000A1F0:
	branch Test(EQ,Z) l0000A1F4
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l0000A1F2_1:
	r0 = 0x00000001
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l0000A1F4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000A1F0_entry:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp

l0000A1F0:
	sp = fp
	branch Test(EQ,Z) l0000A1F4_in_fn0000A1F0
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1F4_in_fn0000A1F0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1F2_1:
	r0 = 0x00000001
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1F4_in_fn0000A1F0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000001

fn0000A1F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000001



void I2CMasterIntClear(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterIntClear_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1F8:
	Mem3[r0 + 28:word32] = 0x00000001
	Mem5[r0 + 24:word32] = 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000001



void I2CSlaveIntClear(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CSlaveIntClear_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A200:
	Mem3[r0 + 24:word32] = 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000001



word32 I2CMasterSlaveAddrSet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut: r2
// Trashed: r2
// Preserved: sp
I2CMasterSlaveAddrSet_entry:
// DataOut: cpsr d24 d9 fp r0 r1 r10 r2 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A208:
	word32 r2_4 = r2 | r1 << 0x00000001
	Mem5[r0:word32] = r2_4
	return r2_4
// DataOut: cpsr d24 d9 fp r10 r2 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterSlaveAddrSet_exit:
// DataOut: r2
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r2 | r1 << 0x00000001



void I2CMasterBusy(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CMasterBusy_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A210:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterBusy_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void I2CMasterBusBusy(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CMasterBusBusy_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A218:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterBusBusy_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void I2CMasterControl(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed:
// Preserved: sp
I2CMasterControl_entry:
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A220:
	Mem3[r0 + 4:word32] = r1
	return
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterControl_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CMasterErr(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
I2CMasterErr_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A224:
	word32 r3_4 = Mem0[r0 + 4:word32]
	branch r3_4 << 31 < 0x00000000 l0000A236
// DataOut: r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A236:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l0000A22A:
	branch (r3_4 & 0x00000002) == 0x00000000 l0000A238
// DataOut: r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l0000A238:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>

l0000A230:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>

I2CMasterErr_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>



void I2CMasterDataPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed:
// Preserved: sp
I2CMasterDataPut_entry:
// DataOut: cpsr d24 d9 fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A23C:
	Mem3[r0 + 8:word32] = r1
	return
// DataOut: cpsr d24 d9 fp lr r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterDataPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CMasterDataGet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CMasterDataGet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A240:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterDataGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void I2CSlaveStatus(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CSlaveStatus_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A244:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void I2CSlaveDataPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed:
// Preserved: sp
I2CSlaveDataPut_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A248:
	Mem3[r0 + 8:word32] = r1
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveDataPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CSlaveDataGet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CSlaveDataGet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A24C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveDataGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



byte memcpy(word32 r0, word32 r1, word32 r2, ptr32 & r1Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & spOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut: Z r1 r4 r5 sp
// Trashed: NZCV r1 r2 r3 r4 r5 r6 r7 sp
// Preserved: r6 r7
memcpy_entry:
// DataOut: cpsr d13 d24 fp lr r0 r1 r10 r2 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A5C4:
	word32 r2_175
	word32 r5_14 = r0
	r2_175 = r2
	branch r2 <=u 0x0000000F l0000A62C
// DataOut: cpsr d13 d24 fp r0 r1 r10 r2 r5 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -0004(32) Local -0010(32) Local -0014(32)

l0000A5CC:
	branch (r1 | r0) << 30 != 0x00000000 l0000A642
// DataOut: cpsr d13 d24 fp r0 r1 r10 r2 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32) Local -0004(32) Local -0010(32) Local -0014(32)

l0000A642:
	r5_14 = r0
	r2_175 = r2
// DataOut: cpsr d13 d24 fp r0 r1 r10 r2 r5 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 r3:(r1 | r0) << 30 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32) Local -0004(32) Local -0010(32) Local -0014(32)

l0000A5D4:
	Mem115[r0:word32] = Mem0[r1:word32]
	Mem117[r0 + 4:word32] = Mem115[r1 + 4:word32]
	Mem119[r0 + 8:word32] = Mem117[r1 + 8:word32]
	word32 r7_120 = Mem119[r1 + 12:word32]
	Mem121[r0 + 12:word32] = r7_120
	word32 r5_113 = r0 + ((r2 - 0x00000010 >>u 4) + 0x00000001 << 4)
	branch r5_113 != r0 + 0x00000010 l0000A5FA_then
	word32 sp_126
	word32 r4_127
	word32 r5_128
	word32 r6_129
	word32 r7_130
	word32 lr_131
	word32 r0_132
	word32 r2_133
	byte NZCV_134
	byte ZC_135
	word32 r1_136
	word32 r3_137
	byte NZC_138
	byte Z_139
	call fn0000A7E4 (retsize: 0; depth: 20)
		uses: dwLoc04_12,dwLoc08_10,dwLoc0C_8,dwLoc10_6,dwLoc14_4,lr,NZC_104,NZCV_124,r0,r1,r2,r3_122,r4_123,r5_113,r6_109,r7_120,sp_2,Z_125,ZC_17
		defs: lr_131,NZC_138,NZCV_134,r0_132,r1_136,r2_133,r3_137,r4_127,r5_128,r6_129,r7_130,sp_126,Z_139,ZC_135
	return Z_139
// DataOut: cpsr d13 d24 fp r0 r1 r10 r2 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 r3:(r1 | r0) << 30 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32) Local -0004(32) Local -0010(32) Local -0014(32)

l0000A5FA_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 + ((r2 - 0x00000010 >>u 4) + 0x00000001 << 4) r3:r0 + 0x00000010 r6:r2 - 0x00000010 r4:r1 + 0x00000010 r7:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000A5FC:
	word32 r6_141 = r6_129 & ~0x0000000F
	r5_14 = r0_132 + (r6_141 + 0x00000010)
	r1 = r1_136 + (r6_141 + 0x00000010)
	branch (r2_133 & 0x0000000F) <=u 0x00000003 l0000A646
// DataOut: cpsr d13 d24 fp r0 r1 r10 r2 r3 r5 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 + ((r2 - 0x00000010 >>u 4) + 0x00000001 << 4) r3:r0 + 0x00000010 r6:r2 - 0x00000010 r4:r1 + 0x00000010 r7:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32) Local -0004(32) Local -0010(32) Local -0014(32)

l0000A646:
	r2_175 = r2_133 & 0x0000000F
// DataOut: cpsr d13 d24 fp r0 r1 r10 r2 r5 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 + ((r2 - 0x00000010 & ~0x0000000F) + 0x00000010) r3:r2 & 0x0000000F r6:(r2 - 0x00000010 & ~0x0000000F) + 0x00000010 r4:r1 + 0x00000010 r7:<invalid> r1:r1 + ((r2 - 0x00000010 & ~0x0000000F) + 0x00000010) -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32) Local -0004(32) Local -0010(32) Local -0014(32)

l0000A60C:
	word32 r7_153 = Mem121[r1:word32]
	Mem154[r5_14:word32] = r7_153
	word32 r6_148 = (r2_133 & 0x0000000F) - 0x00000004
	branch 0x00000004 != (r6_148 >>u 2) + 0x00000001 << 2 l0000A61E_then
	word32 sp_158
	word32 r4_159
	word32 r5_160
	word32 r6_161
	word32 r7_162
	word32 lr_163
	word32 r0_164
	word32 r2_165
	byte NZCV_166
	byte ZC_167
	word32 r1_168
	word32 r3_169
	byte NZC_170
	byte Z_171
	call fn0000A816 (retsize: 0; depth: 20)
		uses: dwLoc04_12,dwLoc08_10,dwLoc0C_8,dwLoc10_6,dwLoc14_4,lr_131,NZC_138,NZCV_156,r0_132,r1_144,r2_133,r3_155,r4_152,r5_143,r6_148,r7_153,sp_126,Z_157,ZC_147
		defs: lr_163,NZC_170,NZCV_166,r0_164,r1_168,r2_165,r3_169,r4_159,r5_160,r6_161,r7_162,sp_158,Z_171,ZC_167
	return Z_171
// DataOut: cpsr d13 d24 fp r0 r1 r10 r2 r5 r6 r8 r9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 + ((r2 - 0x00000010 & ~0x0000000F) + 0x00000010) r3:r2 & 0x0000000F r6:(r2 - 0x00000010 & ~0x0000000F) + 0x00000010 r4:r1 + 0x00000010 r7:<invalid> r1:r1 + ((r2 - 0x00000010 & ~0x0000000F) + 0x00000010) -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32) Local -0004(32) Local -0010(32) Local -0014(32)

l0000A61E_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 + ((r2 - 0x00000010 & ~0x0000000F) + 0x00000010) r3:0x00000004 r6:(r2 & 0x0000000F) - 0x00000004 r4:((r2 & 0x0000000F) - 0x00000004 >>u 2) + 0x00000001 << 2 r7:<invalid> r1:r1 + ((r2 - 0x00000010 & ~0x0000000F) + 0x00000010) -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000A620:
	word32 r6_173 = r6_161 & ~0x00000003
	word32 r4_172
	*r4Out = 0x00000003
	r2_175 = r2_165 & 0x00000003
	r1 = r1_168 + (r6_173 + 0x00000004)
	*r1Out = r1
	r5_14 = r5_160 + (r6_173 + 0x00000004)
	*r5Out = r5_14
// DataOut: cpsr d13 d24 fp r0 r1 r10 r2 r4 r5 r8 r9 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp - 20 r5:r0 + ((r2 - 0x00000010 & ~0x0000000F) + 0x00000010) r3:0x00000004 r6:(r2 & 0x0000000F) - 0x00000004 r4:((r2 & 0x0000000F) - 0x00000004 >>u 2) + 0x00000001 << 2 r7:<invalid> r1:r1 + ((r2 - 0x00000010 & ~0x0000000F) + 0x00000010) -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32) Local -0004(32) Local -0010(32) Local -0014(32)

l0000A62C:
	branch r2_175 == 0x00000000 l0000A63C
// DataOut: cpsr d13 d24 fp r0 r1 r10 r2 r5 r8 r9 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp - 20 r5:<invalid> r3:<invalid> r6:<invalid> r4:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32) Local -0004(32) Local -0010(32) Local -0014(32)

l0000A630:
	word32 r4_66 = (word32) Mem0[r1:byte]
	Mem67[r5_14:byte] = (byte) r4_66
	branch 0x00000001 != r2_175 l0000A63A_then
	word32 sp_73
	word32 r4_74
	word32 r5_75
	word32 r6_76
	word32 r7_77
	word32 lr_78
	word32 r0_79
	word32 r2_80
	byte NZCV_81
	byte ZC_82
	word32 r1_83
	word32 r3_84
	byte NZC_85
	byte Z_86
	call fn0000A832 (retsize: 0; depth: 20)
		uses: dwLoc04_12,dwLoc08_10,dwLoc0C_8,dwLoc10_6,dwLoc14_4,lr,NZC_72,NZCV_69,r0,r1_61,r2_62,r3_68,r4_66,r5_63,r6,r7,sp_2,Z_71,ZC_70
		defs: lr_78,NZC_85,NZCV_81,r0_79,r1_83,r2_80,r3_84,r4_74,r5_75,r6_76,r7_77,sp_73,Z_86,ZC_82
	return Z_86
// DataOut: cpsr d13 d24 fp r0 r1 r10 r4 r5 r8 r9 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp - 20 r5:<invalid> r3:<invalid> r6:<invalid> r4:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32) Local -0004(32) Local -0010(32) Local -0014(32)

l0000A63A_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:<invalid> r3:0x00000001 r4:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000A63C:
	word32 sp_47
	word32 r4_48
	word32 r5_49
	word32 r6_50
	word32 r7_51
	word32 lr_52
	word32 r0_53
	word32 r2_54
	byte NZCV_55
	byte ZC_56
	word32 r1_57
	word32 r3_58
	byte NZC_59
	byte Z_60
	call lr (retsize: 0;)
		uses: dwLoc04_12,dwLoc08_10,dwLoc0C_8,dwLoc10_6,dwLoc14_4,lr,NZC,NZCV_16,r0,r1_43,r2,r3,r4_38,r5_39,r6_40,r7_41,sp_44,Z,ZC_17
		defs: lr_52,NZC_59,NZCV_55,r0_53,r1_57,r2_54,r3_58,r4_48,r5_49,r6_50,r7_51,sp_47,Z_60,ZC_56
	return Z_60
// DataOut: cpsr d13 d24 fp r0 r1 r10 r4 r5 r8 r9 sp
// DataOut (flags): Z
// SymbolicIn: sp:fp - 20 r5:<invalid> r3:<invalid> r4:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

memcpy_exit:
// DataOut: r1 r4 r5 sp
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r5:<invalid> r3:<invalid> r4:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



