void prvUnlockQueue(word32 r0, word32 r1, word32 r2, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV r0 r1 r10 r2 r4 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
prvUnlockQueue_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

prvUnlockQueue_entry:
// DataOut: r0 r1 r10 r2 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000059:
	branch Z l0000005D
// DataOut: r0 r1 r10 r2 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000059_1:
	Mem129[r6:word32] = r0
	Mem130[r6 + 4:word32] = r2
	Mem131[r6 + 8:word32] = r4
	Mem132[r6 + 12:word32] = r5
	Mem133[r6 + 16:word32] = r7
	Mem134[r6 + 20:word32] = r8
	Mem135[r6 + 24:word32] = r10
// DataOut: r0 r1 r10 r4 r6 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000005D:
	branch ZC l00000061
// DataOut: r0 r1 r10 r4 r6 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000005D_1:
	r10 = r10 + 3312
// DataOut: r0 r1 r10 r4 r6 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000061:
	branch V l00000065
// DataOut: r0 r1 r10 r4 r6 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid>

l00000061_1:
	Mem125[r0:byte] = (byte) r4
// DataOut: r1 r10 r6 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid>

l00000065:
	branch Z l00000069
// DataOut: r1 r10 r6 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:r0 - 1528

l00000069:
	branch NV l0000006D
// DataOut: r1 r10 r6 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:r0 - 1528

l00000069_1:
	__msr(spsr, 0x00000BDD)
// DataOut: r1 r10 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:r0 - 1528

l0000006D:
	branch C l00000071
// DataOut: r1 r10 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:r0 - 1528

l0000006D_1:
	r1 = r1 + 1457
// DataOut: r1 r10 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:r0 - 1528

l00000071:
	branch Z l00000075
// DataOut: r1 r10 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:<invalid> r1:r1 + 1457

l00000071_1:
// DataOut: r1 r10
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:<invalid> r1:r1 + 1457

l00000075:
	branch N l00000079
// DataOut: r1 r10
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:<invalid> r1:r1 + 1457

l00000079:
	branch V l0000007D
// DataOut: r1 r10
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:<invalid> r1:r1 + 1457

l00000079_1:
	word32 sp_101
	byte Z_102
	word32 r6_103
	word32 r0_104
	word32 r2_105
	word32 r4_106
	word32 r5_107
	word32 r7_108
	word32 r8_109
	byte ZC_111
	byte V_112
	byte NV_113
	word32 spsr_114
	byte N_117
	byte NZCV_118
	call fnFEC5AF49 (retsize: 0;)
		uses: C,N,NV,NZCV,NZV,r0_16,r1_14,r10_6,r2,r4,r5,r6,r7,r8_7,sp_1,spsr,V,Z,ZC
		defs: C_115,N_117,NV_113,NZCV_118,NZV_119,r0_104,r1_116,r10_110,r2_105,r4_106,r5_107,r6_103,r7_108,r8_109,sp_101,spsr_114,V_112,Z_102,ZC_111
// DataOut: r1 r10
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:<invalid> r1:r1 + 1457

l0000007D:
	branch C l00000081
// DataOut: r1 r10
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:<invalid> r1:r1 + 1457

l0000007D_1:
	NZV = cond(r1 + __ror(r10, 22) + C) (alias)
// DataOut:
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:<invalid> r1:r1 + 1457

l00000081:
	branch NZV l00000085
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:<invalid> r1:r1 + 1457 r5:<invalid>

l00000081_1:
	word32 sp_73
	byte Z_74
	word32 r6_75
	word32 r0_76
	word32 r2_77
	word32 r4_78
	word32 r5_79
	word32 r7_80
	word32 r8_81
	word32 r10_82
	byte ZC_83
	byte V_84
	byte NV_85
	word32 spsr_86
	byte C_87
	word32 r1_88
	byte N_89
	byte NZCV_90
	byte NZV_91
	call fnFFC001A1 (retsize: 0;)
		uses: C_48,N_47,NV_49,NZCV_46,NZV_45,r0_41,r1_29,r10_35,r2_40,r4_39,r5_52,r6_42,r7_37,r8_36,sp_44,spsr_31,V_50,Z_53,ZC_51
		defs: C_87,N_89,NV_85,NZCV_90,NZV_91,r0_76,r1_88,r10_82,r2_77,r4_78,r5_79,r6_75,r7_80,r8_81,sp_73,spsr_86,V_84,Z_74,ZC_83
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:<invalid> r1:r1 + 1457 r5:<invalid>

l00000085:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:<invalid> r1:r1 + 1457 r5:<invalid>

l00000075_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:<invalid> r1:r1 + 1457

l00000065_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r10:r10 + 3312 r8:<invalid> r0:r0 - 1528



void prvCopyDataToQueue(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr, word32 dwArg63)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r10 r3 r5 r7 r8 r9
// Preserved: sp
// Stack args: Stack +0063(32)
prvCopyDataToQueue_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0063(32)

l000000ED:
	branch Z l000000F1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0063(32)

l000000F1:
	branch C l000000F5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0063(32)

l000000F1_1:
	Mem336[fp:word32] = r2
	Mem337[fp + 4:word32] = r3
	Mem338[fp + 8:word32] = r5
	Mem339[fp + 12:word32] = r6
	Mem340[fp + 16:word32] = r8
	Mem341[fp + 20:word32] = r10
	Mem342[fp + 24:word32] = fp
	Mem343[fp + 28:word32] = pc
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0063(32)

l000000F5:
	branch Z l000000F9
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32
// LocalsOut: fp(32) Stack +0063(32)

l000000F5_1:
	Mem334[r8:word16] = (uint16) r2
	r8 = r8 - 105
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32
// LocalsOut: fp(32) Stack +0063(32)

l000000F9:
	branch Z l000000FD
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105
// LocalsOut: fp(32) Stack +0063(32)

l000000F9_1:
	r3 = r0 & ~(lr >> 2)
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105
// LocalsOut: fp(32) Stack +0063(32)

l000000FD:
	branch V l00000101
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2)
// LocalsOut: fp(32) Stack +0063(32)

l000000FD_1:
	r10 = (r5 >> r5) - r3
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2)
// LocalsOut: fp(32) Stack +0063(32)

l00000101:
	branch Z l00000105
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2))
// LocalsOut: fp(32) Stack +0063(32)

l00000101_1:
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2))
// LocalsOut: fp(32) Stack +0063(32)

l00000105:
	branch NV l00000109
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:r6 - 0x0BD00000
// LocalsOut: fp(32) Stack +0063(32)

l00000105_1:
	byte NZCV_323 = cond(r9 + (r6 >> 28) + C)
	C = NZCV_323 (alias)
	NV = NZCV_323 (alias)
	Z = NZCV_323 (alias)
	N = NZCV_323 (alias)
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:r6 - 0x0BD00000
// LocalsOut: fp(32) Stack +0063(32)

l00000109:
	branch N l0000010D
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:r6 - 0x0BD00000 r7:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000109_1:
	word32 sp_297
	word32 fp_300
	word32 r2_301
	word32 r6_304
	word32 pc_307
	word32 lr_309
	byte V_310
	word32 r1_311
	word32 r7_313
	word32 r9_314
	byte NZCV_315
	byte N_316
	byte NZC_317
	byte ZC_319
	word32 ip_320
	word32 r4_321
	call fnFFC02AB1 (retsize: 0;)
		uses: C_27,fp_5,ip,lr,N_23,NV_25,NZC_22,NZCV_24,pc,r0,r1_14,r10_12,r2,r3_9,r4,r5,r6,r7_29,r8_7,r9,sp_1,spsr,V_26,Z_28,ZC_21
		defs: C_299,fp_300,ip_320,lr_309,N_316,NV_312,NZC_317,NZCV_315,pc_307,r0_308,r1_311,r10_306,r2_301,r3_302,r4_321,r5_303,r6_304,r7_313,r8_305,r9_314,sp_297,spsr_318,V_310,Z_298,ZC_319
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:r6 - 0x0BD00000 r7:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l0000010D:
	branch C l00000111
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:r6 - 0x0BD00000 r7:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000111:
	branch Z l00000115
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:r6 - 0x0BD00000 r7:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000111_1:
	word32 sp_272
	byte Z_273
	word32 fp_275
	word32 r2_276
	word32 r6_279
	word32 pc_282
	word32 lr_284
	byte V_285
	word32 r1_286
	word32 r7_288
	word32 r9_289
	byte NZCV_290
	byte N_291
	byte NZC_292
	byte ZC_294
	word32 ip_295
	word32 r4_296
	call fn01A18AC9 (retsize: 0;)
		uses: C_57,fp_56,ip_64,lr_59,N_44,NV_47,NZC_43,NZCV_45,pc_50,r0_63,r1_48,r10_51,r2_55,r3_54,r4_40,r5_62,r6_53,r7_61,r8_52,r9_46,sp_60,spsr_42,V_49,Z_58,ZC_41
		defs: C_274,fp_275,ip_295,lr_284,N_291,NV_287,NZC_292,NZCV_290,pc_282,r0_283,r1_286,r10_281,r2_276,r3_277,r4_296,r5_278,r6_279,r7_288,r8_280,r9_289,sp_272,spsr_293,V_285,Z_273,ZC_294
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:r6 - 0x0BD00000 r7:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000115:
	branch NV l00000119
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:r6 - 0x0BD00000 r7:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000115_1:
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:r6 - 0x0BD00000 r7:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000119:
	branch C l0000011D
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:r6 - 0x0BD00000 r7:<invalid> r9:DPB(r9, 0x2344, 16)
// LocalsOut: fp(32) Stack +0063(32)

l00000119_1:
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:r6 - 0x0BD00000 r7:<invalid> r9:DPB(r9, 0x2344, 16)
// LocalsOut: fp(32) Stack +0063(32)

l0000011D:
	branch C l00000121
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16)
// LocalsOut: fp(32) Stack +0063(32)

l0000011D_1:
	r0 = r5 ^ __ror(r8, 2)
	byte NZC_263 = cond(r0)
	C = NZC_263 (alias)
	NV = NZC_263 (alias)
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): NCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16)
// LocalsOut: fp(32) Stack +0063(32)

l00000121:
	branch NV l00000125
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): C
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000121_1:
	Mem261[r0 - 838:byte] = (byte) r10
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r8 r9 spsr
// DataOut (flags): C
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000125:
	word32 r7_101 = fp + __rcr(r3, 1, C) + C
	byte NZCV_102 = cond(r7_101)
	byte C_103 = NZCV_102
	byte Z_105 = NZCV_102
	byte ZC_107 = NZCV_102
	branch r7_101 >= 0x00000000 l0000012D
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000129_1:
	word32 sp_235
	word32 fp_238
	word32 r2_239
	word32 r3_240
	word32 r5_241
	word32 r6_242
	word32 r8_243
	word32 r10_244
	word32 pc_245
	word32 r0_246
	word32 lr_247
	byte V_248
	word32 r1_249
	byte NV_250
	word32 r7_251
	word32 r9_252
	byte NZCV_253
	byte N_254
	byte NZC_255
	word32 ip_258
	word32 r4_259
	call fnFFC02AD1 (retsize: 0;)
		uses: C_103,fp_81,ip_89,lr_84,N_108,NV_104,NZC_109,NZCV_102,pc_75,r0_100,r1_91,r10_76,r2_80,r3_79,r4_65,r5_87,r6_78,r7_101,r8_77,r9_90,sp_85,spsr_67,V_106,Z_105,ZC_107
		defs: C_237,fp_238,ip_258,lr_247,N_254,NV_250,NZC_255,NZCV_253,pc_245,r0_246,r1_249,r10_244,r2_239,r3_240,r4_259,r5_241,r6_242,r7_251,r8_243,r9_252,sp_235,spsr_256,V_248,Z_236,ZC_257
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l0000012D:
	__msr(spsr, 0x000002FA)
	branch C_103 l00000135
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000135:
	branch ZC_107 l00000139
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000135_1:
	word32 sp_210
	byte C_212
	word32 fp_213
	word32 r2_214
	word32 r3_215
	word32 r5_216
	word32 r6_217
	word32 r8_218
	word32 r10_219
	word32 pc_220
	word32 r0_221
	word32 lr_222
	byte V_223
	word32 r1_224
	byte NV_225
	word32 r7_226
	word32 r9_227
	byte NZCV_228
	byte N_229
	byte NZC_230
	word32 spsr_231
	byte ZC_232
	word32 ip_233
	word32 r4_234
	call fn01104EDD (retsize: 0;)
		uses: C_127,fp_126,ip_134,lr_129,N_114,NV_117,NZC_113,NZCV_115,pc_120,r0_133,r1_118,r10_121,r2_125,r3_124,r4_110,r5_132,r6_123,r7_131,r8_122,r9_116,sp_130,spsr_112,V_119,Z_128,ZC_111
		defs: C_212,fp_213,ip_233,lr_222,N_229,NV_225,NZC_230,NZCV_228,pc_220,r0_221,r1_224,r10_219,r2_214,r3_215,r4_234,r5_216,r6_217,r7_226,r8_218,r9_227,sp_210,spsr_231,V_223,Z_211,ZC_232
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000139:
	branch Z_105 l0000013D
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000139_1:
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l0000013D:
	branch Z_105 l0000013D_then
	word32 sp_160
	byte Z_161
	byte C_162
	word32 fp_163
	word32 r2_164
	word32 r3_165
	word32 r5_166
	word32 r6_167
	word32 r8_168
	word32 r10_169
	word32 pc_170
	byte V_173
	word32 r1_174
	byte NV_175
	word32 r9_177
	byte NZCV_178
	byte N_179
	byte NZC_180
	word32 spsr_181
	byte ZC_182
	word32 r4_184
	word32 lr_172
	word32 r7_176
	word32 ip_183
	word32 r0_171
	call fn01A1908D (retsize: 0;)
		uses: C_152,fp_151,ip_159,lr_154,N_139,NV_142,NZC_138,NZCV_140,pc_145,r0_158,r1_143,r10_146,r2_150,r3_149,r4_135,r5_157,r6_148,r7_156,r8_147,r9_141,sp_155,spsr_137,V_144,Z_153,ZC_136
		defs: C_162,fp_163,ip_183,lr_172,N_179,NV_175,NZC_180,NZCV_178,pc_170,r0_171,r1_174,r10_169,r2_164,r3_165,r4_184,r5_166,r6_167,r7_176,r8_168,r9_177,sp_160,spsr_181,V_173,Z_161,ZC_182
	return
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l0000013D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid>

l00000141:
	branch Z_161 l00000145
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000141_1:
	lr_172 = 0x40000004 - r0_171
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000145:
	branch Z_161 l00000149
// DataOut: fp ip lr r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000145_1:
	r0_171 = r0_171 & ~(lr_172 >> 14)
// DataOut: fp ip r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000149:
	branch NV_175 l0000014D
// DataOut: fp ip r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000149_1:
	r0_171 = r0_171 - 53
	Mem206[r0_171:word32] = r0_171
// DataOut: fp ip r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l0000014D:
	branch Z_161 l00000151
// DataOut: fp ip r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000151:
	branch NV_175 l00000155
// DataOut: fp ip r0 r1 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000151_1:
	Mem204[r6_167 - 53:byte] = (byte) r3_165
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000155:
	branch Z_161 l00000159
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid>
// LocalsOut: fp(32) Stack +0063(32)

l00000155_1:
	r7_176 = dwArg63
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid>

l00000159:
	branch Z_161 l0000015D
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid>

l00000159_1:
	Mem199[r5_166:word16] = (uint16) r0_171
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid>

l0000015D:
	branch V_173 l00000161
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid> r5:r5 - 25

l0000015D_1:
	ip_183 = (r0_171 >> 28) - r7_176 - C_162
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid> r5:r5 - 25

l00000161:
	branch V_173 l00000165
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid> r5:r5 - 25 ip:<invalid>

l00000161_1:
	r0_171 = (word32) Mem0[r0_171 + 360:byte]
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid> r5:r5 - 25 ip:<invalid>

l00000165:
	branch V_173 l00000169
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid> r5:r5 - 25 ip:<invalid>

l00000169:
	branch Z_161 l00000169_thunk_prvCopyDataFromQueue
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid> r5:r5 - 25 ip:<invalid>

l00000169_thunk_prvCopyDataFromQueue:
	prvCopyDataFromQueue(r0_171, r1_174, r4_184, r6_167, r7_176, r8_168, r9_177, r10_169, fp_163, ip_183)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid> r5:r5 - 25 ip:<invalid>

l00000169_1:
	word32 ip_194 = 0x00600000 - r7_176 - C_162
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid> r5:r5 - 25 ip:<invalid>

l00000169_thunk_prvCopyDataFromQueue:
	prvCopyDataFromQueue(r0_171, r1_174, r4_184, r6_167, r7_176, r8_168, r9_177, r10_169, fp_163, ip_194)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid> r5:r5 - 25 ip:<invalid>

prvCopyDataToQueue_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:fp + 32 r8:<invalid> r3:r0 & ~(lr >> 2) r10:<invalid> r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid> r5:r5 - 25 ip:<invalid> pc:<invalid>

l00000165_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid> r5:r5 - 25 ip:<invalid>

l0000014D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid> lr:<invalid>

l00000131_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:<invalid> r7:<invalid> r9:DPB(r9, 0x2344, 16) r0:<invalid>

l0000010D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:fp + 32 r8:r8 - 105 r3:r0 & ~(lr >> 2) r10:(r5 >> r5) - (r0 & ~(lr >> 2)) r1:r6 - 0x0BD00000 r7:<invalid>

l000000ED_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void prvCopyDataFromQueue(word32 r0, word32 r1, word32 r4, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp ip r0 r1 r10 r4 r6 r7 r8 r9
// LiveOut:
// Trashed: NZC ip pc r0 r1 r10 r8
// Preserved: sp
prvCopyDataFromQueue_entry:
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000016D:
	branch Z l00000171
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000016D_1:
	word32 sp_74
	word32 r1_77
	byte NZC_79
	word32 ip_80
	byte V_83
	word32 r10_84
	byte C_85
	word32 pc_86
	word32 r7_87
	word32 r9_88
	byte NV_89
	word32 r4_90
	word32 fp_91
	call fnFEC5AB25 (retsize: 0;)
		uses: C,fp,ip,NV,NZC,NZV,pc,r0,r1,r10,r4,r6,r7,r8,r9,sp_1,V,Z
		defs: C_85,fp_91,ip_80,NV_89,NZC_79,NZV_76,pc_86,r0_81,r1_77,r10_84,r4_90,r6_78,r7_87,r8_82,r9_88,sp_74,V_83,Z_75
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000171:
	branch NZV l00000175
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000171_1:
	byte NZC_69 = cond(r6 >> 32)
	Z = NZC_69 (alias)
	NZV = NZC_69 (alias)
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000175:
	branch Z l00000179
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 >> 32

l00000179:
	branch NZV l0000017D
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 >> 32

l0000017D:
	branch Z l00000181
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 >> 32

l00000181:
	branch Z l00000185
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 >> 32

l00000181_1:
	word32 ip_67 = __ror(r8, 2) - r0
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 >> 32

l00000185:
	branch Z l00000185_then
	word32 sp_43
	byte Z_44
	byte NZV_45
	word32 r6_47
	byte NZC_48
	word32 ip_49
	word32 r0_50
	word32 r8_51
	byte V_52
	byte C_54
	word32 pc_55
	word32 r7_56
	word32 r9_57
	byte NV_58
	word32 r4_59
	word32 fp_60
	word32 r10_53
	word32 r1_46
	call fn0118647D (retsize: 0;)
		uses: C_38,fp_19,ip_29,NV_37,NZC_39,NZV_40,pc_24,r0_28,r1_42,r10_35,r4_20,r6_31,r7_23,r8_27,r9_22,sp_34,V_26,Z_41
		defs: C_54,fp_60,ip_49,NV_58,NZC_48,NZV_45,pc_55,r0_50,r1_46,r10_53,r4_59,r6_47,r7_56,r8_51,r9_57,sp_43,V_52,Z_44
	return
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 >> 32 ip:<invalid>

l00000185_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r6 >> 32 ip:<invalid>

l00000189:
	branch V_52 l0000018D
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 >> 32 ip:<invalid>

l00000189_1:
	r10_53 = r10_53 + 192
	r1_46 = (word32) Mem0[r10_53:int16]
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 >> 32 ip:<invalid>

l0000018D:
	branch C_54 l00000191
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp r1:<invalid> ip:<invalid> r10:r10 + 192

l0000018D_thunk_xQueueGenericSend:
	xQueueGenericSend(r0_50, r1_46, r4_59, r6_47, r7_56, r8_51, r9_57, r10_53, fp_60, ip_49)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> ip:<invalid> r10:r10 + 192

prvCopyDataFromQueue_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> ip:<invalid> r10:r10 + 192 pc:<invalid> r0:<invalid> r8:<invalid>

l0000018D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> ip:<invalid> r10:r10 + 192

l0000017D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r6 >> 32

l00000179_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r6 >> 32

l00000175_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r6 >> 32



void xQueueGenericSend(word32 r0, word32 r1, word32 r4, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZV fp ip r0 r1 r10 r4 r6 r7 r8 r9
// LiveOut:
// Trashed: pc r0 r8
// Preserved: sp
xQueueGenericSend_entry:
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00000191:
	branch Z l00000195
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00000191_1:
	word32 pc_30 = r7 - __ror(r9, 1)
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00000195:
	branch Z l00000199
// DataOut: fp ip r0 r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp pc:<invalid>

l00000195_1:
	r8 = Mem0[r0:word32]
// DataOut: fp ip r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp pc:<invalid>

l00000199:
	branch Z l0000019D
// DataOut: fp ip r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): NV
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid>

l0000019D:
	branch NV l000001A1
// DataOut: fp ip r1 r10 r4 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid>

l0000019D_1:
	Mem11[r6:word32] = r1
	Mem14[r6 + 4:word32] = r4
	Mem16[r6 + 8:word32] = r7
	Mem17[r6 + 12:word32] = r8
	Mem19[r6 + 16:word32] = r9
	Mem21[r6 + 20:word32] = r10
	Mem23[r6 + 24:word32] = fp
	Mem25[r6 + 28:word32] = ip
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid>

l000001A1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid>

xQueueGenericSend_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid>

l00000199_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid>



void xQueuePeekFromISR(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r8 r9
// Preserved: sp
xQueuePeekFromISR_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000002A5:
	branch Z l000002A9
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000002A9:
	branch NZV l000002AD
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000002A9_1:
	__syscall(0x00F04F85)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000002AD:
	branch Z l000002B1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000002AD_1:
	r8 = ~(r3 << 6)
	byte NZCV_105 = cond(r8)
	Z = NZCV_105 (alias)
	V = NZCV_105 (alias)
	ZC = NZCV_105 (alias)
	NZV = NZCV_105 (alias)
	N = NZCV_105 (alias)
	C = NZCV_105 (alias)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000002B1:
	branch V l000002B5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002B1_1:
	__syscall(0x00F3BF88)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002B5:
	branch N l000002B9
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002B5_1:
	__syscall(0x00F3BF8F)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002B9:
	branch Z l000002BD
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002B9_1:
	word32 sp_79
	byte NZV_81
	byte NZCV_84
	call fn01AE10FD (retsize: 0;)
		uses: C_19,fp,ip,lr,N_18,NZCV_12,NZV_14,NZV_17,pc,r0,r1,r10,r2,r3,r4,r5,r6,r7,r8_11,r9,sp_1,spsr,V_15,Z_13,ZC_16
		defs: C_92,fp_99,ip_100,lr_101,N_86,NZCV_84,NZV_81,NZV_90,pc_102,r0_91,r1_88,r10_98,r2_93,r3_83,r4_94,r5_95,r6_89,r7_96,r8_82,r9_97,sp_79,spsr_103,V_85,Z_80,ZC_87
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002BD:
	branch ZC l000002C1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002BD_1:
	Mem78[r6 - 2233:byte] = (byte) r1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002C1:
	branch V l000002C5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002C5:
	branch NZV l000002C9
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002C9:
	branch N l000002CD
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002C9_1:
	__syscall(0x00F7FF68)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002CD:
	branch Z l000002D1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002D1:
	branch Z l000002D5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002D1_1:
	r8 = ~(r0 >> 10)
	C = cond(r8) (alias)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002D5:
	branch C l000002D5_thunk_xQueueGenericReceive
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:<invalid>

l000002D5_thunk_xQueueGenericReceive:
	xQueueGenericReceive(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid>

xQueuePeekFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> pc:<invalid> r0:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid>

l000002D5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid>

l000002CD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002C5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002C1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000002A5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xQueueGenericReceive(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r8 r9
// Preserved: sp
xQueueGenericReceive_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000002D9:
	branch Z l000002DD
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000002D9_1:
	pc = r7 - __ror(r9, 1)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000002DD:
	branch Z l000002E1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid>
// LocalsOut: fp(32)

l000002DD_1:
	r0 = r0 + 1061
	r8 = Mem0[r0:word32]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid>
// LocalsOut: fp(32)

l000002E1:
	branch Z l000002E5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid>
// LocalsOut: fp(32)

l000002E5:
	branch C l000002E9
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid>
// LocalsOut: fp(32)

l000002E5_1:
	__syscall(0x00469992)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid>
// LocalsOut: fp(32)

l000002E9:
	branch C l000002ED
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid>
// LocalsOut: fp(32)

l000002ED:
	branch Z l000002F1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid>
// LocalsOut: fp(32)

l000002F1:
	branch NV l000002F5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid>
// LocalsOut: fp(32)

l000002F1_1:
	r4 = ~0x0000000F
	byte NZCV_368 = cond(r4)
	C = NZCV_368 (alias)
	NV = NZCV_368 (alias)
	Z = NZCV_368 (alias)
	V = NZCV_368 (alias)
	NZV = NZCV_368 (alias)
	ZC = NZCV_368 (alias)
	NZV = NZCV_368 (alias)
	N = NZCV_368 (alias)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid>
// LocalsOut: fp(32)

l000002F5:
	branch C l000002F9
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid> r4:~0x0000000F
// LocalsOut: fp(32)

l000002F5_1:
	fp = fp - __rcr(fp, 1, C)
	Mem366[fp:word32] = r0
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid> r4:~0x0000000F
// LocalsOut: fp(32)

l000002F9:
	branch N l000002FD
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid> r4:~0x0000000F fp:<invalid>
// LocalsOut: fp(32)

l000002FD:
	__syscall(0x004620F9)
	branch Z l00000305
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid> r4:~0x0000000F fp:<invalid>
// LocalsOut: fp(32)

l00000301_1:
	lr = lr + 167
	r10 = (word32) Mem0[lr:int16]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid> r4:~0x0000000F fp:<invalid>
// LocalsOut: fp(32)

l00000305:
	branch Z l00000309
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid> r4:~0x0000000F fp:<invalid> lr:lr + 167 r10:<invalid>
// LocalsOut: fp(32)

l00000309:
	branch C l0000030D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid> r4:~0x0000000F fp:<invalid> lr:lr + 167 r10:<invalid>
// LocalsOut: fp(32)

l00000309_1:
	r0 = (word32) Mem0[r0 + 2085:byte]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid> r4:~0x0000000F fp:<invalid> lr:lr + 167 r10:<invalid>
// LocalsOut: fp(32)

l0000030D:
	branch Z l00000311
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:~0x0000000F fp:<invalid> lr:lr + 167 r10:<invalid>
// LocalsOut: fp(32)

l00000311:
	branch Z l00000315
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:~0x0000000F fp:<invalid> lr:lr + 167 r10:<invalid>
// LocalsOut: fp(32)

l00000311_1:
	r4 = r1 & ~(lr >> 26)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:~0x0000000F fp:<invalid> lr:lr + 167 r10:<invalid>
// LocalsOut: fp(32)

l00000315:
	branch N l00000319
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid>
// LocalsOut: fp(32)

l00000315_1:
	Mem357[fp:word32] = r0
	fp = fp - 155
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid>
// LocalsOut: fp(32)

l00000319:
	branch C l0000031D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid>
// LocalsOut: fp(32)

l0000031D:
	branch N l00000321
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid>
// LocalsOut: fp(32)

l0000031D_1:
	r0 = (uint32) SLICE(r0, ui17, 17)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid>
// LocalsOut: fp(32)

l00000321:
	branch V l00000325
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid>
// LocalsOut: fp(32)

l00000321_1:
	r0 = ~0x000000F9
	byte NZCV_347 = cond(r0)
	C = NZCV_347 (alias)
	NV = NZCV_347 (alias)
	Z = NZCV_347 (alias)
	V = NZCV_347 (alias)
	NZV = NZCV_347 (alias)
	ZC = NZCV_347 (alias)
	NZV = NZCV_347 (alias)
	N = NZCV_347 (alias)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid>
// LocalsOut: fp(32)

l00000325:
	branch C l00000329
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid>
// LocalsOut: fp(32)

l00000329:
	branch N l0000032D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid>
// LocalsOut: fp(32)

l00000329_1:
	r8 = r8 + 1273
	r9 = (word32) Mem0[r8:byte]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid>
// LocalsOut: fp(32)

l0000032D:
	branch Z l00000331
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l0000032D_1:
	Mem332[fp + -36:word32] = r4
	Mem333[fp + -32:word32] = r5
	Mem334[fp + -28:word32] = r8
	Mem335[fp + -24:word32] = r9
	Mem336[fp + -20:word32] = r10
	Mem337[fp + -16:word32] = fp
	Mem338[fp + -12:word32] = ip
	Mem339[fp + -8:word32] = fp
	Mem340[fp + -4:word32] = lr
	Mem341[fp:word32] = pc
	fp = fp - 40
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000331:
	branch N l00000335
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000331_1:
	r8 = (word32) Mem0[r8:byte]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000335:
	branch N l00000339
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000335_1:
	r8 = r8 + 1136
	r9 = (word32) Mem0[r8:byte]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000339:
	branch Z l0000033D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000339_1:
	Mem317[fp + -36:word32] = r4
	Mem318[fp + -32:word32] = r5
	Mem319[fp + -28:word32] = r8
	Mem320[fp + -24:word32] = r9
	Mem321[fp + -20:word32] = r10
	Mem322[fp + -16:word32] = fp
	Mem323[fp + -12:word32] = ip
	Mem324[fp + -8:word32] = fp
	Mem325[fp + -4:word32] = lr
	Mem326[fp:word32] = pc
	fp = fp - 40
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l0000033D:
	branch N l00000341
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l0000033D_1:
	r8 = (word32) Mem0[r8 + 1215:byte]
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000341:
	branch C l00000345
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000341_1:
	r0 = (word32) Mem0[r0 + 2160:byte]
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000345:
	branch Z l00000349
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000345_1:
	r0 = r9 + 0x4000003E + C
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000349:
	branch Z l0000034D
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000349_1:
	r0 = (word32) Mem0[r0 + 168:byte]
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l0000034D:
	branch NZV l00000351
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000351:
	__syscall(0x004620D0)
	branch Z l00000359
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000355_1:
	lr = lr + 7
	r8 = (word32) Mem0[lr:int16]
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000359:
	branch Z l0000035D
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l0000035D:
	branch NV l00000361
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l0000035D_1:
	r0 = ~0x0000F000
	byte NZCV_298 = cond(r0)
	C = NZCV_298 (alias)
	NV = NZCV_298 (alias)
	Z = NZCV_298 (alias)
	V = NZCV_298 (alias)
	NZV = NZCV_298 (alias)
	ZC = NZCV_298 (alias)
	NZV = NZCV_298 (alias)
	N = NZCV_298 (alias)
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000361:
	branch Z l00000365
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000365:
	branch NZV l00000369
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000369:
	branch C l0000036D
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000369_1:
	r0 = ~__ror(r7, 17)
	byte NZCV_288 = cond(r0)
	C = NZCV_288 (alias)
	NV = NZCV_288 (alias)
	Z = NZCV_288 (alias)
	V = NZCV_288 (alias)
	ZC = NZCV_288 (alias)
	NZV = NZCV_288 (alias)
	N = NZCV_288 (alias)
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l0000036D:
	branch ZC l00000371
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l0000036D_1:
	__msr(spsr, 0x000003F9)
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000371:
	branch Z l00000375
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000371_1:
	r9 = r9 + 435
	r0 = Mem0[r9:word32]
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000375:
	branch Z l00000379
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000375_1:
	Mem282[r0:word64] = r3_r2
	r0 = r0 - __ror(r1, 9)
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000379:
	branch C l0000037D
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l00000379_1:
	r3 = (word32) Mem0[lr:int16]
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l0000037D:
	word32 lr_103 = lr
	branch V l00000381
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid>
// LocalsOut: fp(32)

l0000037D_1:
	word32 sp_252
	word32 r4_261
	byte NZCV_262
	word32 r10_265
	byte NZV_271
	word32 spsr_275
	call fnFFE0009D (retsize: 0;)
		uses: C_87,fp_55,ip,lr_103,N_94,NV_88,NZCV_86,NZV_91,NZV_93,pc_4,r0_98,r1,r10_32,r2,r3_102,r4_35,r5,r6,r7,r8_60,r9_97,sp_1,spsr,V_90,Z_89,ZC_92
		defs: C_259,fp_263,ip_270,lr_266,N_264,NV_260,NZCV_262,NZV_271,NZV_276,pc_254,r0_258,r1_267,r10_265,r2_277,r3_272,r4_261,r5_269,r6_273,r7_255,r8_257,r9_256,sp_252,spsr_275,V_268,Z_253,ZC_274
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid>
// LocalsOut: fp(32)

l00000381:
	branch V l00000385
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid>
// LocalsOut: fp(32)

l00000381_1:
	r0 = ~0x000000FE
	byte NZCV_243 = cond(r0)
	C = NZCV_243 (alias)
	NV = NZCV_243 (alias)
	Z = NZCV_243 (alias)
	V = NZCV_243 (alias)
	ZC = NZCV_243 (alias)
	NZV = NZCV_243 (alias)
	N = NZCV_243 (alias)
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid>
// LocalsOut: fp(32)

l00000385:
	branch NZV l00000389
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid>
// LocalsOut: fp(32)

l00000389:
	branch ZC l0000038D
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid>
// LocalsOut: fp(32)

l00000389_1:
	r0 = r0 + 241
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid>
// LocalsOut: fp(32)

l0000038D:
	branch Z l00000391
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid>
// LocalsOut: fp(32)

l0000038D_1:
	ip = (r3 >> r8) - r8 - C
	byte NZCV_230 = cond(ip)
	C = NZCV_230 (alias)
	NV = NZCV_230 (alias)
	Z = NZCV_230 (alias)
	V = NZCV_230 (alias)
	NZV = NZCV_230 (alias)
	N = NZCV_230 (alias)
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid>
// LocalsOut: fp(32)

l00000391:
	branch N l00000395
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l00000391_1:
	__syscall(0x00F3BF30)
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l00000395:
	branch V l00000399
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l00000395_1:
	__syscall(0x00F3BF8F)
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l00000399:
	branch Z l0000039D
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l00000399_1:
	fp = 0x23C00000 - r7 - C
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l0000039D:
	branch NZV l000003A1
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l0000039D_1:
	r0 = ~(r8 >> 1)
	byte NZCV_219 = cond(r0)
	C = NZCV_219 (alias)
	NV = NZCV_219 (alias)
	Z = NZCV_219 (alias)
	V = NZCV_219 (alias)
	NZV = NZCV_219 (alias)
	N = NZCV_219 (alias)
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l000003A1:
	branch Z l000003A5
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l000003A5:
	branch Z l000003A9
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l000003A5_1:
	r0 = (word32) Mem0[r9:int16]
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l000003A9:
	branch NZV l000003AD
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l000003AD:
	branch N l000003B1
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l000003AD_1:
	pc = r7 | __ror(r8, 1)
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l000003B1:
	Mem172[r6 - 70:byte] = (byte) r2
	branch NZV l000003B9
// DataOut: fp ip lr pc r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l000003B9:
	branch Z l000003BD
// DataOut: fp ip lr pc r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l000003B9_1:
	fp = (word32) Mem172[r1:int16]
// DataOut: fp ip lr pc r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>
// LocalsOut: fp(32)

l000003BD:
	branch C l000003C1
// DataOut: fp ip lr pc r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:r1 + 158
// LocalsOut: fp(32)

l000003BD_1:
// DataOut: fp ip lr pc r0 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:r1 + 158
// LocalsOut: fp(32)

l000003C1:
	branch NV l000003C5
// DataOut: fp ip lr pc r0 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:<invalid>
// LocalsOut: fp(32)

l000003C1_1:
	Mem208[lr_103:word32] = r0
	lr_103 = lr_103 - __ror(r8, 2)
// DataOut: fp ip lr pc r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:<invalid>
// LocalsOut: fp(32)

l000003C5:
	branch C l000003C9
// DataOut: fp ip lr pc r3 r5 r6 r7 r8
// DataOut (flags): NZV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:<invalid>
// LocalsOut: fp(32)

l000003C5_1:
// DataOut: fp ip lr pc r3 r5 r6 r7 r8
// DataOut (flags): NZV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:<invalid>
// LocalsOut: fp(32)

l000003C9:
	branch Z l000003CD
// DataOut: fp ip lr pc r3 r5 r6 r7 r8
// DataOut (flags): NZV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:<invalid>
// LocalsOut: fp(32)

l000003C9_1:
	r3 = Mem172[fp + 4:word32]
	r5 = Mem172[fp + 8:word32]
	r6 = Mem172[fp + 12:word32]
// DataOut: ip lr pc r3 r5 r6 r7 r8
// DataOut (flags): NZV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:<invalid>
// LocalsOut: fp(32)

l000003CD:
	branch Z l000003D1
// DataOut: ip lr pc r3 r5 r6 r7 r8
// DataOut (flags): NZV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:<invalid> r5:<invalid> r6:<invalid>
// LocalsOut: fp(32)

l000003D1:
	branch NZV l000003D5
// DataOut: ip lr pc r3 r5 r6 r7 r8
// DataOut (flags): ZV
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:<invalid> r5:<invalid> r6:<invalid>
// LocalsOut: fp(32)

l000003D5:
	branch Z l000003D9
// DataOut: ip lr pc r3 r5 r6 r7 r8
// DataOut (flags): V
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:<invalid> r5:<invalid> r6:<invalid>
// LocalsOut: fp(32)

l000003D5_1:
	Mem191[r7:word32] = r3
	Mem192[r7 + 4:word32] = r5
	Mem193[r7 + 8:word32] = r6
	Mem194[r7 + 12:word32] = r7
	Mem195[r7 + 16:word32] = ip
	Mem196[r7 + 20:word32] = fp
	Mem197[r7 + 24:word32] = lr_103
	Mem198[r7 + 28:word32] = pc
// DataOut: r8
// DataOut (flags): V
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:<invalid> r5:<invalid> r6:<invalid>

l000003D9:
	branch V l000003DD
// DataOut: r8
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:<invalid> r5:<invalid> r6:<invalid>

l000003D9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:<invalid> r5:<invalid> r6:<invalid>

l000003DD:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:<invalid> r5:<invalid> r6:<invalid>

l000003D1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:<invalid> r5:<invalid> r6:<invalid>

l000003CD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid> r1:<invalid> r5:<invalid> r6:<invalid>

l000003B5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>

l000003A9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>

l000003A1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid> ip:<invalid>

l00000385_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r3:<invalid>

l00000365_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>

l00000361_1:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>

xQueueGenericReceive_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid>

l00000359_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:<invalid> r10:<invalid> r9:<invalid>

l0000034D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid> r9:<invalid>

l00000325_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid>

l00000319_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> fp:<invalid> lr:lr + 167 r10:<invalid>

l0000030D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r8:<invalid> r4:~0x0000000F fp:<invalid> lr:lr + 167 r10:<invalid>

l00000305_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid> r4:~0x0000000F fp:<invalid> lr:lr + 167 r10:<invalid>

l000002F9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid> r4:~0x0000000F fp:<invalid>

l000002ED_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid>

l000002E9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid>

l000002E1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1061 r8:<invalid>



void uxQueueMessagesWaiting(word32 r0, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 fp, word32 lr, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp lr pc r0 r10 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed: pc r0 r10 r2 r3 r4 r5 r6 r7 r8
// Preserved: sp
uxQueueMessagesWaiting_entry:
// DataOut: fp lr pc r0 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000429:
	branch Z l0000042D
// DataOut: fp lr pc r0 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000429_1:
	Mem44[r6:word32] = r0
	Mem45[r6 + 4:word32] = r2
	Mem46[r6 + 8:word32] = r4
	Mem47[r6 + 12:word32] = r5
	Mem48[r6 + 16:word32] = r7
	Mem49[r6 + 20:word32] = r10
// DataOut: fp lr pc r0 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000042D:
	branch NV l00000431
// DataOut: fp lr pc r0 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000042D_1:
	r8 = r8 + 1264
	r10 = (word32) Mem0[r8:byte]
// DataOut: fp lr pc r0 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000431:
	branch NZV l00000435
// DataOut: fp lr pc r0 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 1264 r10:<invalid>

l00000435:
	branch Z l00000439
// DataOut: fp lr pc r0 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 1264 r10:<invalid>

l00000435_1:
	Mem39[r6:word64] = r3_r2
	r6 = r6 - 8
// DataOut: fp lr pc r0 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 1264 r10:<invalid>

l00000439:
	branch C l0000043D
// DataOut: fp lr pc r0 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 1264 r10:<invalid> r6:r6 - 8

l00000439_thunk_uxQueueSpacesAvailable:
	uxQueueSpacesAvailable(r0, r2, r3, r4, r5, r6, r7, r8, r10, fp, lr, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 1264 r10:<invalid> r6:r6 - 8

l00000439_1:
	word32 r0_22 = Mem0[pc:word32]
	word32 r2_23 = Mem0[pc + 4:word32]
	word32 r3_24 = Mem0[pc + 8:word32]
	word32 r4_26 = Mem0[pc + 12:word32]
	word32 r5_27 = Mem0[pc + 16:word32]
	word32 r7_28 = Mem0[pc + 20:word32]
// DataOut: fp lr pc r0 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 1264 r10:<invalid> r6:r6 - 8

l00000439_thunk_uxQueueSpacesAvailable:
	uxQueueSpacesAvailable(r0_22, r2_23, r3_24, r4_26, r5_27, r6, r7_28, r8, r10, fp, lr, pc + 24)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 1264 r10:<invalid> r6:r6 - 8 r0:<invalid> r2:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> r7:<invalid> pc:pc + 24

uxQueueMessagesWaiting_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 1264 r10:<invalid> r6:r6 - 8 r0:<invalid> r2:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> r7:<invalid> pc:pc + 24

l00000431_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 1264 r10:<invalid>



void uxQueueSpacesAvailable(word32 r0, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 fp, word32 lr, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp lr pc r0 r10 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved: sp
uxQueueSpacesAvailable_entry:
// DataOut: fp lr pc r0 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000043D:
	branch Z l00000441
// DataOut: fp lr pc r0 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000043D_1:
	Mem44[r6:word32] = r0
	Mem46[r6 + 4:word32] = r2
	Mem47[r6 + 8:word32] = r4
	Mem48[r6 + 12:word32] = r5
	Mem49[r6 + 16:word32] = r7
	Mem50[r6 + 20:word32] = r8
	Mem51[r6 + 24:word32] = r10
// DataOut: fp lr pc r10 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000441:
	branch NV l00000445
// DataOut: fp lr pc r10 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000445:
	branch C l00000449
// DataOut: fp lr pc r10 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000445_1:
	Mem42[fp:byte] = (byte) lr
// DataOut: pc r10 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000449:
	branch NZV l0000044D
// DataOut: pc r10 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp fp:fp - 3179
// LocalsOut: fp(32)

l00000449_1:
	byte NZCV_36 = cond(~(r10 << r8))
	C = NZCV_36 (alias)
	Z = NZCV_36 (alias)
// DataOut: pc r3 r4 r5 r6 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp fp:fp - 3179
// LocalsOut: fp(32)

l0000044D:
	branch C l00000451
// DataOut: pc r3 r4 r5 r6 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp fp:fp - 3179 r0:~(r10 << r8)
// LocalsOut: fp(32)

l0000044D_1:
	Mem23[r6:word32] = r3
	Mem26[r6 + 4:word32] = r4
	Mem28[r6 + 8:word32] = r5
	Mem29[r6 + 12:word32] = r6
	Mem31[r6 + 16:word32] = r7
	Mem32[r6 + 20:word32] = fp
// DataOut: pc
// DataOut (flags): Z
// SymbolicIn: sp:fp fp:fp - 3179 r0:~(r10 << r8)
// LocalsOut: fp(32)

l00000451:
	branch Z l00000455
// DataOut: pc
// DataOut (flags): 
// SymbolicIn: sp:fp fp:fp - 3179 r0:~(r10 << r8)
// LocalsOut: fp(32)

l00000451_thunk_vQueueDelete:
	vQueueDelete()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:fp - 3179 r0:~(r10 << r8)

l00000451_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:fp - 3179 r0:~(r10 << r8)

l00000451_thunk_vQueueDelete:
	vQueueDelete()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:fp - 3179 r0:<invalid> pc:pc + fp

uxQueueSpacesAvailable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000441_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vQueueDelete()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vQueueDelete_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

vQueueDelete_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000455:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xQueueGenericSendFromISR(word32 r2, word32 r4, word32 r8, word32 r10, word32 fp, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr fp r10 r2 r4 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xQueueGenericSendFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

xQueueGenericSendFromISR_entry:
// DataOut: cpsr fp r10 r2 r4 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000459:
	branch Z l0000045D
// DataOut: cpsr fp r10 r2 r4 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000045D:
	branch NZV l00000461
// DataOut: cpsr fp r10 r2 r4 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000045D_1:
	__syscall(0x00F04F86)
// DataOut: cpsr fp r10 r2 r4 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000461:
	branch Z l00000465
// DataOut: cpsr fp r10 r2 r4 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000461_1:
	r8 = ~(r4 << 8)
	byte NZCV_28 = cond(r8)
	Z = NZCV_28 (alias)
	V = NZCV_28 (alias)
	NZV = NZCV_28 (alias)
	ZC = NZCV_28 (alias)
	N = NZCV_28 (alias)
// DataOut: cpsr fp r10 r2 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000465:
	branch V l00000469
// DataOut: cpsr fp r10 r2 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r4 << 8)

l00000465_1:
	__syscall(0x00F3BF88)
// DataOut: cpsr fp r10 r2 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r4 << 8)

l00000469:
	branch N l0000046D
// DataOut: cpsr fp r10 r2 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:~(r4 << 8)

l00000469_1:
	__syscall(0x00F3BF8F)
// DataOut: cpsr fp r10 r2 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:~(r4 << 8)

l0000046D:
	branch NZV l00000471
// DataOut: cpsr fp r10 r2 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:~(r4 << 8)

l0000046D_1:
	Mem24[fp:byte] = (byte) r8
// DataOut: cpsr r10 r2
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:~(r4 << 8)

l00000471:
	branch Z l00000475
// DataOut: cpsr r10 r2
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:~(r4 << 8) fp:fp - 1423

l00000471_1:
	Mem22[r2 - 1387:byte] = (byte) r10
// DataOut: cpsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:~(r4 << 8) fp:fp - 1423

l00000475:
	branch Z l00000479
// DataOut: cpsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:~(r4 << 8) fp:fp - 1423

l00000475_1:
	__msr(cpsr, 0x000002D3)
// DataOut:
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:~(r4 << 8) fp:fp - 1423

l00000479:
	branch ZC l0000047D
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:~(r4 << 8) fp:fp - 1423

l0000047D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:~(r4 << 8) fp:fp - 1423

l00000479_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:~(r4 << 8) fp:fp - 1423

l00000459_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xQueueGiveFromISR(word32 r0, word32 r2, word32 r3, word32 r8, word32 fp, word32 ip, word32 spsr, word32 s4, word32 s23)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip r0 r2 r3 r8 s23 s4 spsr
// LiveOut:
// Trashed: NZCV r0 r3 r4 r5 r8 r9 s19
// Preserved: sp
xQueueGiveFromISR_entry:
// DataOut: fp ip r0 r2 r3 r8 s23 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000004C5:
	branch Z l000004C9
// DataOut: fp ip r0 r2 r3 r8 s23 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000004C9:
	branch NZV l000004CD
// DataOut: fp ip r0 r2 r3 r8 s23 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000004C9_1:
	__syscall(0x00F04F84)
// DataOut: fp ip r0 r2 r3 r8 s23 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000004CD:
	branch Z l000004D1
// DataOut: fp ip r0 r2 r3 r8 s23 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000004CD_1:
	byte NZCV_165 = cond(~(r3 << 6))
	Z = NZCV_165 (alias)
	V = NZCV_165 (alias)
	NZV = NZCV_165 (alias)
	N = NZCV_165 (alias)
// DataOut: fp ip r0 r2 r3 r8 s23 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000004D1:
	branch V l000004D5
// DataOut: fp ip r0 r2 r3 r8 s23 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)
// LocalsOut: fp(32)

l000004D1_1:
	__syscall(0x00F3BF88)
// DataOut: fp ip r0 r2 r3 r8 s23 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)
// LocalsOut: fp(32)

l000004D5:
	branch N l000004D9
// DataOut: fp ip r0 r2 r3 r8 s23 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)
// LocalsOut: fp(32)

l000004D5_1:
	__syscall(0x00F3BF8F)
// DataOut: fp ip r0 r2 r3 r8 s23 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:~(r3 << 6)
// LocalsOut: fp(32)

l000004D9:
	branch NZV l000004DD
// DataOut: fp ip r0 r2 r3 r8 s23 s4 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:~(r3 << 6)
// LocalsOut: fp(32)

l000004D9_1:
	__msr(spsr, 0x0000028F)
// DataOut: fp ip r0 r2 r3 r8 s23 s4
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:~(r3 << 6)
// LocalsOut: fp(32)

l000004DD:
	branch Z l000004E1
// DataOut: fp ip r0 r2 r3 r8 s23 s4
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:~(r3 << 6)
// LocalsOut: fp(32)

l000004DD_1:
	__vmls_f32(s4, s23)
// DataOut: fp ip r0 r2 r3 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:~(r3 << 6)
// LocalsOut: fp(32)

l000004E1:
	branch N l000004E5
// DataOut: fp ip r0 r2 r3 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:~(r3 << 6) s19:<invalid>
// LocalsOut: fp(32)

l000004E1_1:
// DataOut: fp ip r0 r2 r3 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:~(r3 << 6) s19:<invalid>
// LocalsOut: fp(32)

l000004E5:
	branch N l000004E9
// DataOut: fp ip r0 r2 r3 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l000004E5_1:
	word32 sp_139
	byte Z_140
	byte NZV_141
	word32 r8_142
	word32 r3_143
	byte NZCV_144
	byte V_145
	byte NZV_147
	word32 spsr_148
	word32 s4_149
	word32 s23_150
	word32 s19_151
	word32 r9_152
	word32 r0_153
	word32 ip_154
	word32 fp_155
	byte ZC_156
	word32 r5_157
	word32 r2_158
	bool C_159
	word32 r4_160
	call fn00C809AD (retsize: 0;)
		uses: C_19,fp,ip,N_18,NZCV_12,NZV_14,NZV_16,r0,r2,r3,r4,r5,r8_24,r9_23,s19_21,s23,s4,sp_1,spsr,V_15,Z_13,ZC_17
		defs: C_159,fp_155,ip_154,N_146,NZCV_144,NZV_141,NZV_147,r0_153,r2_158,r3_143,r4_160,r5_157,r8_142,r9_152,s19_151,s23_150,s4_149,sp_139,spsr_148,V_145,Z_140,ZC_156
// DataOut: fp ip r0 r2 r3 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l000004E9:
	branch N l000004E9_then
	word32 sp_26
	byte NZV_28
	word32 r3_30
	byte NZCV_31
	byte V_32
	byte NZV_34
	word32 spsr_35
	word32 s4_36
	word32 s23_37
	word32 s19_38
	word32 r9_39
	word32 ip_41
	word32 fp_42
	byte ZC_43
	word32 r5_44
	word32 r2_45
	word32 r4_47
	word32 r0_116
	word32 r8_107
	bool C_115
	byte Z_100
	byte N_105
	call fn018E0FB9 (retsize: 0;)
		uses: C_19,N_25,NZCV_12,NZV_14,NZV_16,r8_24,r9_23,s19_21,sp_1,V_15,Z_13,ZC_17
		defs: C_46,fp_42,ip_41,N_33,NZCV_31,NZV_28,NZV_34,r0_40,r2_45,r3_30,r4_47,r5_44,r8_29,r9_39,s19_38,s23_37,s4_36,sp_26,spsr_35,V_32,Z_27,ZC_43
	return
// DataOut: fp ip r0 r2 r3 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l000004E9_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid>

l000004ED:
	branch Z_100 l000004F1
// DataOut: fp ip r0 r2 r3 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l000004ED_1:
	r0_116 = r0_116 & ~(ip_41 << fp_42)
// DataOut: fp r0 r2 r3 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l000004F1:
	branch ZC_43 l000004F5
// DataOut: fp r0 r2 r3 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid> r0:r0 & ~(ip << fp)
// LocalsOut: fp(32)

l000004F1_1:
	byte NZCV_120 = cond(r2_45 + (r3_30 >> fp_42) + C_115)
	Z_100 = NZCV_120 (alias)
	N_105 = NZCV_120 (alias)
	C_115 = (bool) NZCV_120 (alias)
// DataOut: r0 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid> r0:r0 & ~(ip << fp)
// LocalsOut: fp(32)

l000004F5:
	branch Z_100 l000004F9
// DataOut: r0 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid> r0:r0 & ~(ip << fp) r5:<invalid>
// LocalsOut: fp(32)

l000004F5_1:
	r0_116 = r0_116 + r8_107
// DataOut: r0 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid> r0:r0 & ~(ip << fp) r5:<invalid>
// LocalsOut: fp(32)

l000004F9:
	branch Z_100 l000004FD
// DataOut: r0 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r4:<invalid>
// LocalsOut: fp(32)

l000004F9_1:
	r8_107 = ~(r0_116 >> 8)
	byte NZCV_108 = cond(r8_107)
	Z_100 = NZCV_108 (alias)
	N_105 = NZCV_108 (alias)
	C_115 = (bool) NZCV_108 (alias)
// DataOut: r0 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r4:<invalid>
// LocalsOut: fp(32)

l000004FD:
	branch Z_100 l00000501
// DataOut: r0 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r4:<invalid>
// LocalsOut: fp(32)

l000004FD_1:
	byte NZCV_99 = cond(fp + (r8_107 << 17) + C_115)
	Z_100 = NZCV_99 (alias)
	N_105 = NZCV_99 (alias)
// DataOut: r0
// DataOut (flags): NZ
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r4:<invalid>

l00000501:
	branch Z_100 l00000505
// DataOut: r0
// DataOut (flags): N
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r4:<invalid> r3:<invalid>

l00000501_1:
	N_105 = cond(~(r0_116 >> 8)) (alias)
// DataOut:
// DataOut (flags): N
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r4:<invalid> r3:<invalid>

l00000505:
	branch N_105 l00000509
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r4:<invalid> r3:<invalid>

l00000505_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r4:<invalid> r3:<invalid>

l00000509:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r4:<invalid> r3:<invalid>

xQueueGiveFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> s19:<invalid> r9:<invalid> r0:<invalid> r5:<invalid> r4:<invalid> r3:<invalid>

l000004C5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xQueueReceiveFromISR(word32 r4, word32 r6, word32 r9, word32 fp, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp pc r4 r6 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xQueueReceiveFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

xQueueReceiveFromISR_entry:
// DataOut: fp pc r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000525:
	__syscall(0x0041F0E9)
	branch N l0000052D
// DataOut: fp pc r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000529_1:
	__syscall(0x008611F3)
// DataOut: fp pc r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000052D:
	branch ZC l00000531
// DataOut: fp pc r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000052D_1:
	Mem37[r4:word32] = fp
	r4 = r4 - 4080
// DataOut: fp pc r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000531:
	branch NZV l00000535
// DataOut: fp pc r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080

l00000531_1:
	__syscall(0x008811F3)
// DataOut: fp pc r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080

l00000535:
	branch NZV l00000539
// DataOut: fp pc r4 r6 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r4:r4 - 4080

l00000535_1:
	__syscall(0x008F6FF3)
// DataOut: fp pc r4 r6 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r4:r4 - 4080

l00000539:
	branch ZC l0000053D
// DataOut: fp pc r4 r6 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r4:r4 - 4080

l00000539_1:
	Mem35[0x00001534:word32] = r4
// DataOut: fp r6 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r4:r4 - 4080

l0000053D:
	branch C l00000541
// DataOut: fp r6 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r4:r4 - 4080 pc:pc + 4083

l0000053D_1:
	Z = cond(r9 + __ror(fp, 8) + C) (alias)
// DataOut: r6
// DataOut (flags): Z
// SymbolicIn: sp:fp r4:r4 - 4080 pc:pc + 4083

l00000541:
	branch Z l00000545
// DataOut: r6
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 4080 pc:pc + 4083 r2:<invalid>

l00000541_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 4080 pc:pc + 4083 r2:<invalid>

l00000545:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 4080 pc:pc + 4083 r2:<invalid> r8:~(r6 >> 12)



void xQueueIsQueueEmptyFromISR(word32 r0, word32 r4, word32 r5, word32 r7, word32 r9, word32 r10, word32 fp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp r0 r10 r4 r5 r7 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xQueueIsQueueEmptyFromISR_entry:
// DataOut: fp r0 r10 r4 r5 r7 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000595:
	branch ZC l00000599
// DataOut: fp r0 r10 r4 r5 r7 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000595_1:
	fp = __rcr(fp, 1, C) - r10 - C
	byte NZCV_25 = cond(fp)
	ZC = NZCV_25 (alias)
	V = NZCV_25 (alias)
// DataOut: fp r0 r10 r4 r5 r7 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000599:
	branch V l0000059D
// DataOut: fp r0 r10 r4 r5 r7 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:<invalid>

l00000599_1:
	Mem22[r9:word64] = r5_r4
	r9 = r9 - __ror(r0, 1)
// DataOut: fp r0 r10 r4 r5 r7 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:<invalid>

l0000059D:
	branch ZC l0000059D_thunk_xQueueIsQueueFullFromISR
// DataOut: fp r0 r10 r4 r5 r7 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:<invalid> r9:<invalid>

l0000059D_thunk_xQueueIsQueueFullFromISR:
	xQueueIsQueueFullFromISR(r0, r4, r5, r7, r9, r10, fp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:<invalid> r9:<invalid>
// Terminates process

l0000059D_1:
// DataOut: fp r0 r10 r4 r5 r7 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:<invalid> r9:<invalid>

l0000059D_thunk_xQueueIsQueueFullFromISR:
	xQueueIsQueueFullFromISR(0x00000047, r4, r5, r7, r9, r10, fp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:<invalid> r9:<invalid> r0:0x00000047
// Terminates process

xQueueIsQueueEmptyFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xQueueIsQueueFullFromISR(word32 r0, word32 r4, word32 r5, word32 r7, word32 r9, word32 r10, word32 fp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp r0 r10 r4 r5 r7 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xQueueIsQueueFullFromISR_entry:
// DataOut: fp r0 r10 r4 r5 r7 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000005A1:
	branch NZV l000005A5
// DataOut: fp r0 r10 r4 r5 r7 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000005A1_1:
	word32 ip_42 = __rcr(fp, 1, C) - fp
// DataOut: fp r0 r10 r4 r5 r7 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000005A5:
	branch ZC l000005A9
// DataOut: fp r0 r10 r4 r5 r7 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp ip:<invalid>

l000005A5_1:
	fp = (r10 << r0) - r10 - C
	byte NZCV_37 = cond(fp)
	ZC = NZCV_37 (alias)
	V = NZCV_37 (alias)
// DataOut: fp r0 r4 r5 r7 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp ip:<invalid>

l000005A9:
	branch V l000005AD
// DataOut: fp r0 r4 r5 r7 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp ip:<invalid> fp:<invalid>

l000005A9_1:
	Mem33[r9:word64] = r5_r4
	r9 = r9 - __ror(r0, 1)
// DataOut: fp r7 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp ip:<invalid> fp:<invalid>

l000005AD:
	branch ZC l000005AD_thunk_uxQueueMessagesWaitingFromISR
// DataOut: fp r7 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp ip:<invalid> fp:<invalid> r9:<invalid>

l000005AD_thunk_uxQueueMessagesWaitingFromISR:
	uxQueueMessagesWaitingFromISR(r7, r9, fp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:<invalid> fp:<invalid> r9:<invalid>
// Terminates process

l000005AD_1:
// DataOut: fp r7 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp ip:<invalid> fp:<invalid> r9:<invalid>

l000005AD_thunk_uxQueueMessagesWaitingFromISR:
	uxQueueMessagesWaitingFromISR(r7, r9, fp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:<invalid> fp:<invalid> r9:<invalid> r0:<invalid>
// Terminates process

xQueueIsQueueFullFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void uxQueueMessagesWaitingFromISR(word32 r7, word32 r9, word32 fp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp r7 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
uxQueueMessagesWaitingFromISR_entry:
// DataOut: fp r7 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000005B1:
	branch Z l000005B5
// DataOut: fp r7 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000005B1_thunk_xQueueGetMutexHolder:
	xQueueGetMutexHolder(r9)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l000005B1_1:
	word32 r7_7 = r7 - __rcr(fp, 1, C)
// DataOut: r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000005B1_thunk_xQueueGetMutexHolder:
	xQueueGetMutexHolder(r9)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:<invalid>
// Terminates process

uxQueueMessagesWaitingFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xQueueGetMutexHolder(word32 r9)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xQueueGetMutexHolder_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

xQueueGetMutexHolder_entry:
// DataOut: r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000005B5:
	branch Z l000005B9
// DataOut: r9
// DataOut (flags): CV
// SymbolicIn: sp:fp

l000005B9:
	branch C l000005BD
// DataOut: r9
// DataOut (flags): V
// SymbolicIn: sp:fp

l000005B9_1:
	V = cond(~0x00000F00) (alias)
// DataOut: r9
// DataOut (flags): V
// SymbolicIn: sp:fp

l000005BD:
	branch V l000005C1
// DataOut: r9
// DataOut (flags): 
// SymbolicIn: sp:<invalid>

l000005BD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid>

l000005C1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:r9 + 872 r2:<invalid>

l000005B5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xQueueTakeMutexRecursive(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr, byte bArg0CF0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
// Stack args: Stack +0CF0(32)
xQueueTakeMutexRecursive_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0CF0(32)

l000005D5:
	word32 sp_1 = fp
	branch Z l000005D9
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0CF0(32)

l000005D5_1:
	Mem63[r8:byte] = (byte) r4
	r8 = r8 - 1461
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0CF0(32)

l000005D9:
	branch Z l000005DD
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 - 1461
// LocalsOut: fp(32) Stack +0CF0(32)

l000005D9_1:
	r0 = r6 - (r6 >> 28)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 - 1461
// LocalsOut: fp(32) Stack +0CF0(32)

l000005DD:
	branch ZC l000005E1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 - 1461 r0:r6 - (r6 >> 28)
// LocalsOut: fp(32) Stack +0CF0(32)

l000005DD_1:
	sp_1 = fp + 3312
	r10 = (word32) bArg0CF0
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 - 1461 r0:r6 - (r6 >> 28)

l000005E1:
	branch Z l000005E5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 - 1461 r0:r6 - (r6 >> 28) r10:<invalid>

l000005E1_1:
	r0 = r0 - (r2 >> 20) - C
	byte NZCV_54 = cond(r0)
	C = (bool) NZCV_54 (alias)
	Z = NZCV_54 (alias)
	V = NZCV_54 (alias)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 - 1461 r0:r6 - (r6 >> 28) r10:<invalid>

l000005E5:
	branch Z l000005E9
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 - 1461 r0:<invalid> r10:<invalid>

l000005E9:
	__syscall(0x00462046)
	branch Z l000005F1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 - 1461 r0:<invalid> r10:<invalid>

l000005ED_1:
	lr = lr + 71
	r7 = (word32) Mem0[lr:int16]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 - 1461 r0:<invalid> r10:<invalid>

l000005F1:
	branch Z l000005F5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 - 1461 r0:<invalid> r10:<invalid> lr:lr + 71 r7:<invalid>

l000005F5:
	branch V l000005F9
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 - 1461 r0:<invalid> r10:<invalid> lr:lr + 71 r7:<invalid>

l000005F5_1:
	lr = (r3 >> r3) - r0
// DataOut: fp ip lr pc r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 - 1461 r0:<invalid> r10:<invalid> lr:lr + 71 r7:<invalid>

l000005F9:
	word32 r0_25 = DPB(r0, 0x4368, 16)
	branch C l00000601_thunk_xQueueGiveMutexRecursive
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 - 1461 r0:<invalid> r10:<invalid> lr:<invalid> r7:<invalid>

l00000601_thunk_xQueueGiveMutexRecursive:
	xQueueGiveMutexRecursive(r0_25, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 - 1461 r0:<invalid> r10:<invalid> lr:<invalid> r7:<invalid>

l00000601_1:
	word32 r5_32 = Mem0[sp_1:word32]
	word32 r6_33 = Mem0[sp_1 + 4:word32]
	word32 ip_34 = Mem0[sp_1 + 8:word32]
	word32 lr_36 = Mem0[Mem0[sp_1 + 12:word32] + 16:word32]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 - 1461 r0:<invalid> r10:<invalid> lr:<invalid> r7:<invalid>

l00000601_thunk_xQueueGiveMutexRecursive:
	xQueueGiveMutexRecursive(r0_25, r1, r2, r3, r4, r5_32, r6_33, r7, r8, r9, r10, fp, ip_34, lr_36, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 - 1461 r0:<invalid> r10:<invalid> lr:<invalid> r7:<invalid> r5:<invalid> r6:<invalid> ip:<invalid>

xQueueTakeMutexRecursive_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> r0:<invalid> r10:<invalid> lr:<invalid> r7:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r3:<invalid> pc:<invalid> r9:<invalid> r2:<invalid> fp:0x00000500 r1:<invalid> r4:<invalid>

l000005F1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 - 1461 r0:<invalid> r10:<invalid> lr:lr + 71 r7:<invalid>

l000005E5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 - 1461 r0:<invalid> r10:<invalid>



void xQueueGiveMutexRecursive(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r7 r8 r9
// Preserved: sp
xQueueGiveMutexRecursive_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000605:
	branch Z l00000609
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000605_1:
	Mem121[r8:byte] = (byte) r4
	r8 = r8 - 1461
	r9_r8 = SEQ(r9, r8 - 1461) (alias)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000609:
	branch ZC l0000060D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1461
// LocalsOut: fp(32)

l00000609_1:
	r0 = (word32) Mem0[r0 + 70:byte]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1461
// LocalsOut: fp(32)

l0000060D:
	branch Z l00000611
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>
// LocalsOut: fp(32)

l0000060D_1:
	Mem117[r2 - 93:word64] = r9_r8
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>
// LocalsOut: fp(32)

l00000611:
	branch C l00000615
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>
// LocalsOut: fp(32)

l00000611_1:
	Mem113[r0 + -8:word32] = r4
	Mem114[r0 + -4:word32] = r6
	Mem115[r0:word32] = r7
	r0 = r0 - 12
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>
// LocalsOut: fp(32)

l00000615:
	branch Z l00000619
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>
// LocalsOut: fp(32)

l00000619:
	branch Z l0000061D
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>
// LocalsOut: fp(32)

l00000619_1:
	word32 sp_91
	byte ZC_95
	word32 r2_97
	word32 r6_99
	byte V_102
	word32 r3_103
	byte NZCV_104
	word32 r1_105
	word32 r9_106
	word32 r10_107
	word32 fp_108
	word32 ip_109
	word32 lr_110
	word32 pc_111
	word32 spsr_112
	call fn0183930D (retsize: 0;)
		uses: C,fp,ip,lr,NZCV,pc,r0_11,r1,r10,r2,r3,r4,r5,r6,r7,r8_6,r9,sp_1,spsr,V,Z,ZC
		defs: C_98,fp_108,ip_109,lr_110,NZCV_104,pc_111,r0_96,r1_105,r10_107,r2_97,r3_103,r4_93,r5_101,r6_99,r7_100,r8_94,r9_106,sp_91,spsr_112,V_102,Z_92,ZC_95
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>
// LocalsOut: fp(32)

l0000061D:
	branch C l00000621
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>
// LocalsOut: fp(32)

l0000061D_1:
	Mem85[r0 + -16:word32] = r0
	Mem86[r0 + -12:word32] = r4
	Mem87[r0 + -8:word32] = r5
	Mem88[r0 + -4:word32] = r7
	Mem89[r0:word32] = r8
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>
// LocalsOut: fp(32)

l00000621:
	branch Z l00000621_then
	word32 sp_50
	byte Z_51
	word32 r4_52
	word32 r8_53
	byte ZC_54
	word32 r0_55
	word32 r2_56
	byte C_57
	word32 r6_58
	word32 r7_59
	word32 r5_60
	byte V_61
	word32 r3_62
	byte NZCV_63
	word32 r1_64
	word32 r9_65
	word32 r10_66
	word32 fp_67
	word32 ip_68
	word32 lr_69
	word32 pc_70
	word32 spsr_71
	call fn0118891D (retsize: 0;)
		uses: C_46,fp_32,ip_31,lr_30,NZCV_45,pc_29,r0_40,r1_35,r10_33,r2_39,r3_44,r4_42,r5_36,r6_38,r7_37,r8_41,r9_34,sp_43,spsr_28,V_49,Z_47,ZC_48
		defs: C_57,fp_67,ip_68,lr_69,NZCV_63,pc_70,r0_55,r1_64,r10_66,r2_56,r3_62,r4_52,r5_60,r6_58,r7_59,r8_53,r9_65,sp_50,spsr_71,V_61,Z_51,ZC_54
	return
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>
// LocalsOut: fp(32)

l00000621_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>

l00000625:
	__syscall(0x00461946)
	branch Z_51 l0000062D
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>
// LocalsOut: fp(32)

l0000062D:
	branch V_61 l0000062D_thunk_xQueueGenericReset
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>
// LocalsOut: fp(32)

l0000062D_thunk_xQueueGenericReset:
	xQueueGenericReset(r0_55, r1_64, r3_62, r4_52, r5_60, r6_58, r7_59, r8_53, r9_65, r10_66, fp_67, ip_68, lr_69, pc_70, spsr_71, dwArg00)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>

l0000062D_1:
	word32 r3_78 = fp + (r0_55 >> 16) + C_57
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>

l0000062D_thunk_xQueueGenericReset:
	xQueueGenericReset(r0_55, r1_64, r3_78, r4_52, r5_60, r6_58, r7_59, r8_53, r9_65, r10_66, fp_67, ip_68, lr_69, pc_70, spsr_71, dwArg00)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid> r3:<invalid>

xQueueGiveMutexRecursive_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> r0:<invalid> r3:<invalid> r5:<invalid> pc:<invalid> r9:<invalid> r2:<invalid> r10:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:<invalid> r4:<invalid>

l00000629_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>

l00000615_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 1461 r0:<invalid>



void xQueueGenericReset(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r7 r8 r9
// Preserved: sp
// Stack args: Stack +0000(32)
xQueueGenericReset_entry:
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00000631:
	branch Z l00000635
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00000635:
	branch Z l00000639
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00000635_1:
	Mem120[r5 - (r6 >> 30):word32] = pc
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00000639:
	branch Z l0000063D
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30)
// LocalsOut: fp(32) Stack +0000(32)

l00000639_1:
// DataOut: fp ip lr pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30)
// LocalsOut: fp(32) Stack +0000(32)

l0000063D:
	branch Z l00000645
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l00000641_1:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:0x84000000 - ip
// LocalsOut: fp(32) Stack +0000(32)

l00000645:
	branch NZV l00000649
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l00000645_1:
	byte NZCV_107 = cond(~0xEC000003)
	Z = NZCV_107 (alias)
	V = NZCV_107 (alias)
	N = NZCV_107 (alias)
	NV = NZCV_107 (alias)
	C = NZCV_107 (alias)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l00000649:
	branch Z l0000064D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:~0xEC000003
// LocalsOut: fp(32) Stack +0000(32)

l00000649_1:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:~0xEC000003
// LocalsOut: fp(32) Stack +0000(32)

l0000064D:
	branch V l00000651
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l0000064D_1:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l00000651:
	branch N l00000655
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3
// LocalsOut: fp(32) Stack +0000(32)

l00000651_1:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3
// LocalsOut: fp(32) Stack +0000(32)

l00000655:
	branch NV l00000659
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l00000655_1:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l00000659:
	branch N l0000065D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l00000659_1:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l0000065D:
	branch C l00000661
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l0000065D_1:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l00000661:
	branch Z l00000665
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500
// LocalsOut: fp(32) Stack +0000(32)

l00000661_1:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500
// LocalsOut: fp(32) Stack +0000(32)

l00000665:
	branch Z l00000669
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l00000669:
	branch Z l0000066D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l00000669_1:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid>
// LocalsOut: fp(32)

l0000066D:
	branch Z l00000671
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid>
// LocalsOut: fp(32)

l00000671:
	branch Z l00000675
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid>
// LocalsOut: fp(32)

l00000671_1:
// DataOut: fp lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid>
// LocalsOut: fp(32)

l00000675:
	branch N l00000679
// DataOut: fp lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l00000675_1:
	__syscall(0x00D0F528)
// DataOut: fp lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l00000679:
	branch Z l00000679_then
	byte Z_46
	word32 pc_47
	word32 r5_48
	word32 r6_49
	word32 r9_50
	word32 r2_51
	word32 ip_52
	word32 r8_53
	byte NZV_54
	word32 r0_55
	byte NZCV_56
	word32 r4_57
	byte V_58
	word32 r10_59
	word32 r3_60
	byte N_61
	byte NV_62
	word32 lr_63
	byte C_64
	word32 fp_65
	word32 spsr_68
	word32 sp_45
	word32 r1_66
	word32 r7_67
	call fn014A0A41 (retsize: 0;)
		uses: C_19,fp_36,ip_43,lr_33,N_21,NV_20,NZCV_23,NZV_24,pc_8,r0_27,r1_39,r10_29,r2_11,r5_4,r7_42,r8_34,r9_38,sp_44,V_22,Z_25
		defs: C_64,fp_65,ip_52,lr_63,N_61,NV_62,NZCV_56,NZV_54,pc_47,r0_55,r1_66,r10_59,r2_51,r3_60,r4_57,r5_48,r6_49,r7_67,r8_53,r9_50,sp_45,spsr_68,V_58,Z_46
	return
// DataOut: fp lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l00000679_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64

l0000067D:
	branch NZV_54 l00000681
// DataOut: fp lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l0000067D_1:
	__syscall(0x00601A4B)
// DataOut: fp lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l00000681:
	branch NZV_54 l00000685
// DataOut: fp lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l00000681_1:
	__syscall(0x008F4FF3)
// DataOut: fp lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l00000685:
	branch Z_46 l00000689
// DataOut: fp lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l00000689:
	branch Z_46 l0000068D
// DataOut: fp lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l0000068D:
	branch Z_46 l00000691
// DataOut: fp lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l0000068D_1:
	sp_45 = sp_45 + 32
	r7_67 = Mem0[sp_45:word32]
// DataOut: fp lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l00000691:
	branch Z_46 l00000695
// DataOut: fp lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l00000695:
	branch Z_46 l00000699
// DataOut: fp lr pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l00000695_1:
	r1_66 = (word32) Mem0[lr_63:byte]
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l00000699:
	branch Z_46 l0000069D
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l0000069D:
	branch Z_46 l000006A1
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l000006A1:
	branch Z_46 l000006A5
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l000006A5:
	branch Z_46 l000006A9
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l000006A5_1:
	r7_67 = Mem0[sp_45:word32]
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l000006A9:
	branch V_58 l000006A9_thunk_xQueueGenericCreate
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64
// LocalsOut: fp(32)

l000006A9_thunk_xQueueGenericCreate:
	xQueueGenericCreate(r0_55, r1_66, r2_51, r3_60, r5_48, r6_49, r7_67, r8_53, r9_50, r10_59, fp_65, pc_47, spsr_68)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64

l000006A9_1:
	word32 r0_76 = __ror(fp, 1) - r0_55 - C_64
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64

l000006A9_thunk_xQueueGenericCreate:
	xQueueGenericCreate(r0_76, r1_66, r2_51, r3_60, r5_48, r6_49, r7_67, r8_53, r9_50, r10_59, fp_65, pc_47, spsr_68)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64

xQueueGenericReset_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:<invalid> r9:<invalid> r2:<invalid> r0:<invalid> r10:<invalid> r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64 r3:<invalid> r4:<invalid>

l000006A1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64

l0000069D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64

l00000699_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64

l00000691_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64

l00000689_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64

l00000685_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid> ip:ip + 64

l0000066D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid> r7:<invalid>

l00000665_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 - (r6 >> 30) pc:pc + 224 r9:<invalid> r2:<invalid> r0:<invalid> r10:0x00000011 - r3 r8:<invalid> lr:<invalid> fp:0x00000500 r1:<invalid>

l00000631_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xQueueGenericCreate(word32 r0, word32 r1, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV lr pc r0 r1 r10 r3 r4 r7 r8
// Preserved: sp
xQueueGenericCreate_entry:
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000006AD:
	branch Z l000006B1
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000006B1:
	branch N l000006B5
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000006B5:
	branch Z l000006B9
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000006B9:
	branch Z l000006BD
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000006B9_1:
	r8 = r8 + 2288
	r3 = (word32) Mem0[r8:byte]
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000006BD:
	branch N l000006C1
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:r8 + 2288 r3:<invalid>
// LocalsOut: fp(32)

l000006BD_1:
	r1 = r1 + 2118
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:r8 + 2288 r3:<invalid>
// LocalsOut: fp(32)

l000006C1:
	branch N l000006C5
// DataOut: fp pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 + 2288 r3:<invalid> r1:r1 + 2118 r4:<invalid>
// LocalsOut: fp(32)

l000006C5:
	Mem13[r0:byte] = (byte) r0
	word32 r0_14 = r0 - (r3 << 6)
	branch Z l000006CD
// DataOut: fp pc r0 r1 r10 r2 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 + 2288 r3:<invalid> r1:r1 + 2118 r4:<invalid>
// LocalsOut: fp(32)

l000006CD:
	__syscall(0x00462021)
	branch C l000006D5
// DataOut: fp pc r0 r1 r10 r2 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 + 2288 r3:<invalid> r1:r1 + 2118 r4:<invalid> r0:<invalid>
// LocalsOut: fp(32)

l000006D1_1:
	pc = pc + 231
	r10 = (word32) Mem13[0x000007C0:int16]
// DataOut: fp pc r0 r1 r10 r2 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 + 2288 r3:<invalid> r1:r1 + 2118 r4:<invalid> r0:<invalid>
// LocalsOut: fp(32)

l000006D5:
	branch C l000006D9
// DataOut: fp pc r0 r1 r10 r2 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 + 2288 r3:<invalid> r1:r1 + 2118 r4:<invalid> r0:<invalid> pc:pc + 231 r10:<invalid>
// LocalsOut: fp(32)

l000006D5_1:
	r7 = fp + (r6 >> 32) + C
	byte NZCV_37 = cond(r7)
	C = NZCV_37 (alias)
	Z = NZCV_37 (alias)
// DataOut: fp pc r0 r1 r10 r2 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 + 2288 r3:<invalid> r1:r1 + 2118 r4:<invalid> r0:<invalid> pc:pc + 231 r10:<invalid>

l000006D9:
	branch Z l000006D9_thunk_xQueueCreateMutex
// DataOut: fp pc r0 r1 r10 r2 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 + 2288 r3:<invalid> r1:r1 + 2118 r4:<invalid> r0:<invalid> pc:pc + 231 r10:<invalid> r7:<invalid>

l000006D9_thunk_xQueueCreateMutex:
	xQueueCreateMutex(r0_14, r1, r2, r5, r6, r8, r9, r10, fp, pc, spsr, wArg00)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 2288 r3:<invalid> r1:r1 + 2118 r4:<invalid> r0:<invalid> pc:pc + 231 r10:<invalid> r7:<invalid>

l000006D9_1:
	word32 pc_28 = __ror(r0_14, 10) - r7 - C
// DataOut: fp pc r0 r1 r10 r2 r5 r6 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 + 2288 r3:<invalid> r1:r1 + 2118 r4:<invalid> r0:<invalid> pc:pc + 231 r10:<invalid> r7:<invalid>

l000006D9_thunk_xQueueCreateMutex:
	xQueueCreateMutex(r0_14, r1, r2, r5, r6, r8, r9, r10, fp, pc_28, spsr, wArg00)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 2288 r3:<invalid> r1:r1 + 2118 r4:<invalid> r0:<invalid> pc:<invalid> r10:<invalid> r7:<invalid>

xQueueGenericCreate_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 2288 r3:<invalid> r1:r1 + 2118 r4:<invalid> r0:<invalid> pc:<invalid> r10:<invalid> r7:<invalid> lr:<invalid>

l000006C9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 2288 r3:<invalid> r1:r1 + 2118 r4:<invalid> r0:<invalid>

l000006C1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 2288 r3:<invalid> r1:r1 + 2118 r4:<invalid>

l000006B5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000006B1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000006AD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xQueueCreateMutex(word32 r0, word32 r1, word32 r2, word32 r5, word32 r6, word32 r8, word32 r9, word32 r10, word32 fp, word32 pc, word32 spsr, int16 wArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp pc r0 r1 r10 r2 r5 r6 r8 r9 spsr
// LiveOut:
// Trashed: NZCV lr pc r3 r4
// Preserved: sp
// Stack args: Stack +0000(32)
xQueueCreateMutex_entry:
// DataOut: fp pc r0 r1 r10 r2 r5 r6 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000006DD:
	branch Z l000006E1
// DataOut: fp pc r0 r1 r10 r2 r5 r6 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000006E1:
	__syscall(0x00200121)
	branch Z l000006E9
// DataOut: fp pc r0 r1 r10 r2 r5 r6 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000006E5_1:
// DataOut: fp r0 r1 r10 r2 r5 r6 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000006E9:
	branch Z l000006ED
// DataOut: fp r0 r1 r10 r2 r5 r6 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:pc + 759 lr:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000006E9_1:
	Z = cond(r1 + (r6 >> 16) + C) (alias)
// DataOut: fp r0 r1 r10 r2 r5 r6 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:pc + 759 lr:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000006ED:
	branch Z l000006F1
// DataOut: fp r0 r1 r10 r2 r5 r6 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:pc + 759 lr:<invalid> r3:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000006ED_1:
	__msr(spsr, 0x00000323)
// DataOut: fp r0 r1 r10 r2 r5 r6 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:pc + 759 lr:<invalid> r3:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000006F1:
	branch Z l000006F1_then
	word32 sp_14
	byte Z_15
	word32 lr_16
	word32 pc_17
	word32 r3_18
	word32 r1_19
	word32 r6_20
	bool C_21
	byte NZCV_22
	word32 spsr_23
	word32 r4_24
	word32 r0_25
	word32 r2_26
	word32 r5_27
	word32 r8_28
	word32 r9_29
	word32 r10_30
	word32 fp_31
	call fn01831479 (retsize: 0;)
		uses: C_11,lr_6,NZCV_10,pc_5,r3_12,sp_1,Z_13
		defs: C_21,fp_31,lr_16,NZCV_22,pc_17,r0_25,r1_19,r10_30,r2_26,r3_18,r4_24,r5_27,r6_20,r8_28,r9_29,sp_14,spsr_23,Z_15
	return
// DataOut: fp r0 r1 r10 r2 r5 r6 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:pc + 759 lr:<invalid> r3:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000006F1_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:pc + 759 lr:<invalid> r3:<invalid>

l000006F5:
	__syscall(0x00461946)
	branch C_21 l000006FD
// DataOut: fp r0 r1 r10 r2 r5 r6 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:pc + 759 lr:<invalid> r3:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000006F9_1:
// DataOut: fp r0 r1 r10 r2 r5 r6 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:pc + 759 lr:<invalid> r3:<invalid>

l000006FD:
	branch C_21 l000006FD_thunk_prvInitialiseNewTask
// DataOut: fp r0 r1 r10 r2 r5 r6 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:<invalid> pc:pc + 759 lr:<invalid> r3:<invalid> r4:<invalid>

l000006FD_thunk_prvInitialiseNewTask:
	prvInitialiseNewTask(r0_25, r1_19, r2_26, r5_27, r6_20, r8_28, r9_29, r10_30, fp_31, spsr_23)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:pc + 759 lr:<invalid> r3:<invalid> r4:<invalid>
// Terminates process

l000006FD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:pc + 759 lr:<invalid> r3:<invalid> r4:<invalid>

xQueueCreateMutex_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:pc + 759 lr:<invalid> r3:<invalid> r4:<invalid>

l000006DD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void prvInitialiseNewTask(word32 r0, word32 r1, word32 r2, word32 r5, word32 r6, word32 r8, word32 r9, word32 r10, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC fp r0 r1 r10 r2 r5 r6 r8 r9 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
prvInitialiseNewTask_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

prvInitialiseNewTask_entry:
// DataOut: fp r0 r1 r10 r2 r5 r6 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000701:
	branch Z l00000705
// DataOut: fp r0 r1 r10 r2 r5 r6 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000705:
	branch C l00000709
// DataOut: fp r0 r1 r10 r2 r5 r6 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000705_1:
	Mem78[r6 - 2460:byte] = (byte) r9
// DataOut: fp r0 r1 r10 r2 r5 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000709:
	branch ZC l0000070D
// DataOut: fp r0 r1 r10 r2 r5 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000709_1:
	r0 = __ror(fp, 4) - r1 - C
	byte NZCV_72 = cond(r0)
	C = NZCV_72 (alias)
	Z = NZCV_72 (alias)
	ZC = NZCV_72 (alias)
	N = NZCV_72 (alias)
// DataOut: fp r0 r1 r10 r2 r5 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000070D:
	branch ZC l00000711
// DataOut: fp r0 r1 r10 r2 r5 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid>

l0000070D_1:
	byte NZCV_66 = cond(fp ^ 0xC0000010)
	C = NZCV_66 (alias)
	Z = NZCV_66 (alias)
	ZC = NZCV_66 (alias)
	N = NZCV_66 (alias)
// DataOut: fp r0 r1 r10 r2 r5 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid>

l00000711:
	branch Z l00000715
// DataOut: fp r0 r1 r10 r2 r5 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid>

l00000711_1:
	r0 = Mem0[r10 + 2630:word32]
// DataOut: fp r0 r1 r10 r2 r5 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid>

l00000715:
	branch ZC l00000719
// DataOut: fp r0 r1 r10 r2 r5 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid>

l00000715_1:
	r8 = r5 & __ror(fp, 7)
// DataOut: r0 r1 r10 r2 r5 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid>

l00000719:
	branch N l0000071D
// DataOut: r0 r1 r10 r2 r5 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid>

l00000719_1:
	__syscall(0x001E4B46)
// DataOut: r0 r1 r10 r2 r5 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid>

l0000071D:
	branch C l00000721
// DataOut: r0 r1 r10 r2 r5 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid>

l0000071D_1:
// DataOut: r0 r1 r2 r5 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid>

l00000721:
	branch Z l00000725
// DataOut: r0 r1 r2 r5 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:<invalid> r0:<invalid> r8:<invalid> r10:r10 + 746

l00000721_1:
	r0 = r5 & 0x03C00000
// DataOut: r0 r1 r2 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:<invalid> r0:<invalid> r8:<invalid> r10:r10 + 746

l00000725:
	branch N l00000729
// DataOut: r0 r1 r2 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r0:<invalid> r8:<invalid> r10:r10 + 746

l00000725_1:
	r0 = (word32) Mem0[r1:byte]
// DataOut: r0 r2 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r0:<invalid> r8:<invalid> r10:r10 + 746

l00000729:
	branch Z l0000072D
// DataOut: r0 r2 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r0:<invalid> r8:<invalid> r10:r10 + 746 r1:r1 + 1073

l00000729_1:
	r2 = (r0 << 4) - r0 - C
	Z = cond(r2) (alias)
// DataOut: r2 r8 spsr
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r0:<invalid> r8:<invalid> r10:r10 + 746 r1:r1 + 1073

l0000072D:
	branch Z l00000731
// DataOut: r2 r8 spsr
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r0:<invalid> r8:<invalid> r10:r10 + 746 r1:r1 + 1073 r2:<invalid>

l0000072D_1:
	Z = cond((r2 >> 28) - r8) (alias)
// DataOut: spsr
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r0:<invalid> r8:<invalid> r10:r10 + 746 r1:r1 + 1073 r2:<invalid>

l00000731:
	branch Z l00000735
// DataOut: spsr
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r0:<invalid> r8:<invalid> r10:r10 + 746 r1:r1 + 1073 r2:<invalid> r5:<invalid>

l00000731_1:
	__msr(spsr, 0x000001F8)
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r0:<invalid> r8:<invalid> r10:r10 + 746 r1:r1 + 1073 r2:<invalid> r5:<invalid>

l00000735:
	branch Z l00000739
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r8:<invalid> r10:r10 + 746 r1:r1 + 1073 r2:<invalid> r5:<invalid>

l00000739:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r8:<invalid> r10:r10 + 746 r1:r1 + 1073 r2:<invalid> r5:<invalid>

l00000735_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r8:<invalid> r10:r10 + 746 r1:r1 + 1073 r2:<invalid> r5:<invalid>

l00000701_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void prvAddNewTaskToReadyList(word32 r0, word32 r3, word32 r6, word32 r7, word32 r8, word32 ip, word32 cpsr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr ip r0 r3 r6 r7 r8 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
prvAddNewTaskToReadyList_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

prvAddNewTaskToReadyList_entry:
// DataOut: cpsr ip r0 r3 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000799:
	branch C l0000079D
// DataOut: cpsr ip r0 r3 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000079D:
	branch Z l000007A1
// DataOut: cpsr ip r0 r3 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000079D_1:
	Mem112[r6 - (ip >> 10):byte] = (byte) r0
// DataOut: cpsr r0 r3 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000007A1:
	branch C l000007A5
// DataOut: cpsr r0 r3 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000007A1_1:
	byte NZCV_106 = cond(~0x000F0000)
	C = NZCV_106 (alias)
	Z = NZCV_106 (alias)
	V = NZCV_106 (alias)
	ZC = NZCV_106 (alias)
	NV = NZCV_106 (alias)
// DataOut: cpsr r0 r3 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000007A5:
	branch C l000007A9
// DataOut: cpsr r0 r3 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp lr:~0x000F0000

l000007A5_1:
	byte NZCV_99 = cond(r3 ^ 0x0000001A)
	C = NZCV_99 (alias)
	Z = NZCV_99 (alias)
	V = NZCV_99 (alias)
	ZC = NZCV_99 (alias)
	NV = NZCV_99 (alias)
// DataOut: cpsr r0 r3 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp lr:~0x000F0000

l000007A9:
	branch Z l000007AD
// DataOut: cpsr r0 r3 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp lr:~0x000F0000

l000007A9_1:
	word32 r6_98 = __ror(r0, 6) - r8
// DataOut: cpsr r0 r3 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp lr:~0x000F0000

l000007AD:
	branch V l000007B1
// DataOut: cpsr r0 r3 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp lr:~0x000F0000 r6:<invalid>

l000007AD_1:
	r3 = r0 & ~0x0000002B
// DataOut: cpsr r3 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp lr:~0x000F0000 r6:<invalid>

l000007B1:
	word32 r6_32 = Mem0[Mem0[r3 + 12:word32] + 20:word32]
	branch Z l000007B9
// DataOut: cpsr fp r0 r1 r2 r6 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp lr:~0x000F0000 r6:<invalid> r3:r0 & ~0x0000002B

l000007B9:
	__msr(cpsr, r6_32)
	branch ZC l000007C1
// DataOut: fp r0 r1 r2 r6 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> lr:~0x000F0000 r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> fp:<invalid>

l000007BD_1:
	__msr(spsr, 0x0000026F)
// DataOut: fp r0 r1 r2 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> lr:~0x000F0000 r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> fp:<invalid>

l000007C1:
	branch ZC l000007C5
// DataOut: fp r0 r1 r2 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> lr:~0x000F0000 r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> fp:<invalid>

l000007C1_1:
// DataOut: fp r1 r2 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> lr:~0x000F0000 r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> fp:<invalid>

l000007C5:
	branch Z l000007C9
// DataOut: fp r1 r2 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> lr:~0x000F0000 r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> fp:<invalid>

l000007C9:
	branch ZC l000007CD
// DataOut: fp r1 r2 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> lr:~0x000F0000 r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> fp:<invalid>

l000007C9_1:
// DataOut: r1 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> lr:~0x000F0000 r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> fp:<invalid>

l000007CD:
	branch C l000007D1
// DataOut: r1 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> lr:~0x000F0000 r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> fp:<invalid>

l000007CD_1:
// DataOut: r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> lr:~0x000F0000 r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> fp:<invalid>

l000007D1:
	branch NV l000007D5
// DataOut: r7
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> lr:~0x000F0000 r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> fp:<invalid>

l000007D1_1:
// DataOut:
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> lr:~0x000F0000 r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> fp:<invalid>

l000007D5:
	branch ZC l000007D9
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> lr:<invalid> r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> fp:<invalid>

l000007D5_1:
	word32 sp_68
	byte C_69
	byte Z_70
	word32 r0_71
	word32 r6_72
	word32 ip_73
	word32 lr_74
	byte NZCV_75
	word32 r3_76
	word32 r8_77
	byte V_78
	word32 r1_79
	word32 r2_80
	word32 r5_81
	word32 r9_82
	word32 fp_83
	word32 cpsr_84
	byte ZC_85
	word32 spsr_86
	byte NV_87
	word32 r7_88
	call fnFFC02579 (retsize: 0;)
		uses: C_21,cpsr,fp_35,ip,lr_43,NV_16,NZCV_19,r0_42,r1_41,r2_29,r3_37,r5_31,r6_32,r7,r8_33,r9_34,sp_36,spsr,V_18,Z_20,ZC_17
		defs: C_69,cpsr_84,fp_83,ip_73,lr_74,NV_87,NZCV_75,r0_71,r1_79,r2_80,r3_76,r5_81,r6_72,r7_88,r8_77,r9_82,sp_68,spsr_86,V_78,Z_70,ZC_85
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> lr:<invalid> r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> fp:<invalid>

l000007D9:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> lr:<invalid> r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> fp:<invalid>

l000007C5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> lr:~0x000F0000 r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> fp:<invalid>

l000007B5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> lr:~0x000F0000 r6:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r9:<invalid> fp:<invalid>

l00000799_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void prvAddCurrentTaskToDelayedList.isra.0(word32 r0, word32 r1, word32 r2, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 ip, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV ip lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp lr pc r0 r1 r2 r3 r4 r7 r8 r9
// Preserved: sp
prvAddCurrentTaskToDelayedList.isra.0_entry:
// DataOut: ip lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000085D:
	branch Z l00000861
// DataOut: ip lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000085D_1:
	Mem154[ip - 1205:byte] = (byte) r1
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000861:
	branch ZC l00000865
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000861_1:
	byte NZCV_145 = cond((r6 >> 8) - r8 - C)
	C = (bool) NZCV_145 (alias)
	Z = NZCV_145 (alias)
	ZC = NZCV_145 (alias)
	V = NZCV_145 (alias)
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000865:
	branch C l00000869
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid>

l00000865_1:
	Mem142[r8:byte] = (byte) r6
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid>

l00000869:
	branch V l0000086D
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96

l0000086D:
	branch Z l00000871
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96

l0000086D_1:
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96

l00000871:
	__msr(spsr, 0x00000122)
	branch ZC l00000875_then
	word32 ip_25
	byte NZCV_30
	word32 r3_32
	word32 spsr_34
	byte NV_39
	word32 fp_43
	word32 r5_134
	word32 r4_133
	word32 r0_132
	byte NZV_129
	byte NZV_128
	word32 r7_126
	word32 r10_124
	word32 r9_121
	byte V_119
	bool C_117
	word32 r6_116
	word32 r8_115
	byte ZC_114
	byte Z_111
	word32 lr_125
	word32 sp_103
	word32 pc_109
	word32 r1_105
	word32 r2_106
	call fn01B32E39 (retsize: 0;)
		uses: C_15,NV_12,NZCV_14,NZV_10,NZV_11,r8_20,sp_18,spsr,V_13,Z_17,ZC_16
		defs: C_29,fp_43,ip_25,lr_37,NV_39,NZCV_30,NZV_40,NZV_41,pc_42,r0_44,r1_24,r10_36,r2_35,r3_32,r4_45,r5_46,r6_28,r7_38,r8_27,r9_33,sp_22,spsr_34,V_31,Z_23,ZC_26
	return
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid>

l00000875_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid>

l00000879:
	branch Z_111 l0000087D
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid>

l00000879_1:
	r2_106 = 0x00000001 - r10_124 - C_117
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid>

l0000087D:
	branch C_117 l00000881
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid>

l0000087D_1:
	Mem136[r7_126 - 771:byte] = (byte) lr_125
	r7_126 = r7_126 - 771
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid>

l00000881:
	branch NV_39 l00000885
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771

l00000885:
	branch Z_111 l00000889
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771

l00000885_1:
	word32 ip_113
	byte NZCV_118
	word32 r3_120
	word32 spsr_122
	byte NV_127
	word32 fp_131
	call fn01897D95 (retsize: 0;)
		uses: C_29,fp_43,ip_25,lr_37,NV_39,NZCV_30,NZV_40,NZV_41,pc_42,r0_44,r1_24,r10_36,r2_47,r3_32,r4_45,r5_46,r6_28,r7_48,r8_27,r9_33,sp_22,spsr_34,V_31,Z_23,ZC_26
		defs: C_117,fp_131,ip_113,lr_125,NV_127,NZCV_118,NZV_128,NZV_129,pc_130,r0_132,r1_112,r10_124,r2_123,r3_120,r4_133,r5_134,r6_116,r7_126,r8_115,r9_121,sp_110,spsr_122,V_119,Z_111,ZC_114
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771

l00000889:
	branch V_119 l0000088D
// DataOut: lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771

l00000889_1:
	pc_109 = Mem0[lr_125 + 0x0000000C:word32] (alias)
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771

l0000088D:
	branch Z_111 l00000891
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid>

l0000088D_1:
	r1_105 = r1_105 + r8_115
	r2_106 = Mem0[r1_105:word32]
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid>

l00000891:
	branch NZV_128 l00000895
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:r1 + (r8 - 192)

l00000891_1:
	sp_103 = sp_103 + 3312
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:r1 + (r8 - 192)

l00000895:
	branch ZC_114 l00000899
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:r1 + (r8 - 192)

l00000899:
	branch NZV_129 l0000089D
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:r1 + (r8 - 192)

l00000899_1:
	pc_109 = pc_109 + 2114
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:r1 + (r8 - 192)

l0000089D:
	branch V_119 l000008A1
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:r1 + (r8 - 192) pc:pc + 2114

l000008A1:
	branch V_119 l000008A5
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:r1 + (r8 - 192) pc:pc + 2114

l000008A5:
	branch V_119 l000008A9
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:r1 + (r8 - 192) pc:pc + 2114

l000008A5_1:
	word32 fp_97 = __ror(r8_115, 26) - r8_115 - C_117
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:r1 + (r8 - 192) pc:pc + 2114

l000008A9:
	branch Z_111 l000008AD
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:r1 + (r8 - 192) pc:pc + 2114 fp:<invalid>

l000008A9_1:
	r1_105 = r1_105 + r0_132
	r2_106 = Mem0[r1_105:word32]
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:r1 + (r8 - 192) pc:pc + 2114 fp:<invalid>

l000008AD:
	branch NZV_129 l000008B1
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:<invalid> pc:pc + 2114 fp:<invalid>

l000008AD_1:
	r2_106 = Mem0[sp_103:word32]
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:<invalid> pc:pc + 2114 fp:<invalid>

l000008B1:
	branch C_117 l000008B1_thunk_xTaskCreate
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:<invalid> pc:pc + 2114 fp:<invalid>

l000008B1_thunk_xTaskCreate:
	xTaskCreate(r0_132, r1_105, r2_106, r4_133, r5_134, r6_116, r7_126, r8_115, r9_121, r10_124, pc_109, dwArg00)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:<invalid> pc:pc + 2114 fp:<invalid>

l000008B1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:<invalid> pc:pc + 2114 fp:<invalid>

prvAddCurrentTaskToDelayedList.isra.0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> r9:<invalid> r3:<invalid> r2:<invalid> r7:<invalid> lr:lr - 8 Sequence pc:lr:<invalid> r1:<invalid> pc:<invalid> fp:<invalid> r0:<invalid> r4:<invalid>

l000008A1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:r1 + (r8 - 192) pc:pc + 2114

l0000089D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:r1 + (r8 - 192) pc:pc + 2114

l00000895_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771 lr:lr - 8 Sequence pc:lr:<invalid> r1:r1 + (r8 - 192)

l00000881_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 - 96 r9:<invalid> r3:<invalid> r2:<invalid> r7:r7 - 771

l00000869_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 - 96



void xTaskCreate(word32 r0, word32 r1, word32 r2, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 pc, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV pc r0 r3 r4 r7 r8 r9
// Preserved: sp
// Stack args: Stack +0000(32)
xTaskCreate_entry:
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000008B5:
	word32 sp_1 = fp
	branch ZC l000008B9
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000008B5_1:
	word32 pc_181 = r7 - __ror(r9, 1)
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000008B9:
	branch ZC l000008BD
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000008B9_1:
	r8 = r0 + (r6 >> 8) + C
	byte NZCV_173 = cond(r8)
	C = (bool) NZCV_173 (alias)
	ZC = NZCV_173 (alias)
	Z = NZCV_173 (alias)
	V = NZCV_173 (alias)
	NZV = NZCV_173 (alias)
	N = NZCV_173 (alias)
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000008BD:
	branch ZC l000008C1
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r8:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000008C1:
	branch Z l000008C5
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r8:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000008C1_1:
// DataOut: pc r0 r1 r10 r2 r4 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r8:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000008C5:
	word32 v14_25 = (word32) Mem0[0x000008ED:int16]
	branch V l000008CD
// DataOut: r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20)
// LocalsOut: fp(32) Stack +0000(32)

l000008C9_1:
	Mem165[r6:word32] = r0
	Mem166[r6 + 4:word32] = r4
	Mem167[r6 + 8:word32] = r5
	Mem168[r6 + 12:word32] = r7
	Mem169[r6 + 16:word32] = r8
	Mem170[r6 + 20:word32] = r10
// DataOut: r0 r1 r10 r2 r3 r4 r5 r6 r7 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000008CD:
	branch C l000008D1
// DataOut: r0 r1 r10 r2 r3 r4 r5 r6 r7 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000008D1:
	branch NZV l000008D5
// DataOut: r0 r1 r10 r2 r3 r4 r5 r6 r7 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000008D1_1:
	Mem156[r6:word32] = r0
	Mem157[r6 + 4:word32] = r1
	Mem158[r6 + 8:word32] = r2
	Mem159[r6 + 12:word32] = v14_25
	Mem160[r6 + 16:word32] = r4
	Mem161[r6 + 20:word32] = r5
	Mem162[r6 + 24:word32] = r6
	Mem163[r6 + 28:word32] = r7
	Mem164[r6 + 32:word32] = r10
// DataOut: r0 r2 r7 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000008D5:
	branch Z l000008D9
// DataOut: r0 r2 r7 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000008D5_1:
	Mem155[r7 - 177:word32] = r0
	r7 = r7 - 177
// DataOut: r0 r2 r7 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid>
// LocalsOut: fp(32) Stack +0000(32)

l000008D9:
	branch ZC l000008DD
// DataOut: r0 r2 r7 sp
// DataOut (flags): NZV
// SymbolicIn: sp:fp pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177
// LocalsOut: fp(32) Stack +0000(32)

l000008D9_1:
	sp_1 = fp + 3429
	r0 = dwArg00
// DataOut: r0 r2 r7 sp
// DataOut (flags): NZV
// SymbolicIn: sp:fp pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177

l000008DD:
	branch Z l000008E1
// DataOut: r0 r2 r7 sp
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid>

l000008E1:
	branch N l000008E5
// DataOut: r0 r2 r7 sp
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid>

l000008E1_1:
	r0 = sp_1 | 0x00009500
	byte NZC_142 = cond(r0)
	N = NZC_142 (alias)
	Z = NZC_142 (alias)
	NZV = NZC_142 (alias)
// DataOut: r0 r2 r7
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid>

l000008E5:
	branch N l000008E9
// DataOut: r0 r2 r7
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid>

l000008E9:
	branch Z l000008ED
// DataOut: r0 r2 r7
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid>

l000008E9_1:
// DataOut: r0 r2 r7
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid>

l000008ED:
	branch Z l000008F1
// DataOut: r0 r2 r7
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid> r4:DPB(r4, 0x6046, 16)

l000008ED_1:
	uint64 r4_r0_128 = r2 *u r7
	byte NZCV_130 = cond(r4_r0_128)
	r0 = (word32) r4_r0_128 (alias)
	Z = NZCV_130 (alias)
	NZV = NZCV_130 (alias)
	N = NZCV_130 (alias)
// DataOut: r0 r7
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid> r4:DPB(r4, 0x6046, 16)

l000008F1:
	branch Z l000008F5
// DataOut: r0 r7
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid> r4:DPB(r4, 0x6046, 16) Sequence r4:r0:r2 *u (r7 - 354)

l000008F5:
	__syscall(0x004620FF)
	branch Z l000008FD
// DataOut: r0
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid> r4:DPB(r4, 0x6046, 16) Sequence r4:r0:r2 *u (r7 - 354)

l000008FD:
	branch NZV l00000901
// DataOut: r0
// DataOut (flags): NZ
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid> r4:DPB(r4, 0x6046, 16) Sequence r4:r0:r2 *u (r7 - 354)

l00000901:
	branch N l00000905
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid> r4:DPB(r4, 0x6046, 16) Sequence r4:r0:r2 *u (r7 - 354)

l00000901_1:
	__syscall(0x0087F0E8)
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid> r4:DPB(r4, 0x6046, 16) Sequence r4:r0:r2 *u (r7 - 354)

l00000905:
	branch Z l00000909
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid> r4:DPB(r4, 0x6046, 16) Sequence r4:r0:r2 *u (r7 - 354)

l00000909:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid> r4:DPB(r4, 0x6046, 16) Sequence r4:r0:r2 *u (r7 - 354)

l00000905_1:
	word32 sp_107
	byte ZC_108
	word32 pc_109
	word32 r7_110
	word32 r9_111
	word32 r8_112
	word32 r0_113
	word32 r6_114
	bool C_115
	byte NZCV_116
	byte Z_117
	word32 r3_118
	byte V_119
	word32 r4_120
	word32 r5_121
	word32 r10_122
	byte NZV_123
	word32 r1_124
	word32 r2_125
	byte N_126
	byte NZC_127
	call Mem0[r0:word32] (retsize: 0;)
		uses: C_54,N_49,NZC_48,NZCV_53,NZV_50,pc_26,r0_106,r1,r10,r2,r3_27,r4_46,r5,r6,r7_29,r8_20,r9_23,sp_34,V_51,Z_52,ZC_56
		defs: C_115,N_126,NZC_127,NZCV_116,NZV_123,pc_109,r0_113,r1_124,r10_122,r2_125,r3_118,r4_120,r5_121,r6_114,r7_110,r8_112,r9_111,sp_107,V_119,Z_117,ZC_108
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid> r4:DPB(r4, 0x6046, 16) Sequence r4:r0:r2 *u (r7 - 354)

l000008FD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid> r4:DPB(r4, 0x6046, 16) Sequence r4:r0:r2 *u (r7 - 354)

l000008F9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid> r4:DPB(r4, 0x6046, 16) Sequence r4:r0:r2 *u (r7 - 354)

l000008F1_1:
	word32 r7_78 = r7 + 3989
	word32 sp_84
	byte ZC_85
	word32 pc_86
	word32 r7_87
	word32 r9_88
	word32 r8_89
	word32 r0_90
	word32 r6_91
	bool C_92
	byte NZCV_93
	byte Z_94
	word32 r3_95
	byte V_96
	word32 r4_97
	word32 r5_98
	word32 r10_99
	byte NZV_100
	word32 r1_101
	word32 r2_102
	byte N_103
	byte NZC_104
	call (word32) Mem0[r7_78:byte] (retsize: 0;)
		uses: C_54,N_49,NZC_48,NZCV_53,NZV_50,pc_26,r0_55,r1,r10,r2,r3_27,r4_46,r5,r6,r7_78,r8_20,r9_23,sp_34,V_51,Z_52,ZC_56
		defs: C_92,N_103,NZC_104,NZCV_93,NZV_100,pc_86,r0_90,r1_101,r10_99,r2_102,r3_95,r4_97,r5_98,r6_91,r7_87,r8_89,r9_88,sp_84,V_96,Z_94,ZC_85
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid> r4:DPB(r4, 0x6046, 16) Sequence r4:r0:r2 *u (r7 - 354)

xTaskCreate_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:<invalid> r0:<invalid> r4:DPB(r4, 0x6046, 16) Sequence r4:r0:r2 *u (r7 - 354)

l000008E5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid>

l000008DD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid> r7:r7 - 177 r0:<invalid>

l000008CD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r8:<invalid> r9:r6 - (r6 >> 20) r3:<invalid>

l000008BD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r8:<invalid>



void xTaskCreateRestricted()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xTaskCreateRestricted_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

xTaskCreateRestricted_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000091D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vTaskAllocateMPURegions(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r2 r3 r5 r8
// Preserved: sp
vTaskAllocateMPURegions_entry:
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000971:
	branch Z l00000975
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000971_1:
	Mem45[r3:word32] = r0
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000975:
	branch Z l00000979
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 - 177

l00000975_1:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 - 177

l00000979:
	branch Z l0000097D
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 - 177 r1:r6 - (r0 >> r10)

l00000979_1:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 - 177 r1:r6 - (r0 >> r10)

l0000097D:
	branch Z l00000981
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 - 177 r1:r6 - (r0 >> r10) lr:0x0000F000

l0000097D_1:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 - 177 r1:r6 - (r0 >> r10) lr:0x0000F000

l00000981:
	branch Z l00000981_then
	word32 sp_9
	byte Z_10
	word32 r0_11
	word32 r3_12
	word32 r1_13
	word32 r6_14
	word32 r10_15
	word32 lr_16
	word32 r5_17
	word32 r8_18
	word32 fp_19
	byte NZV_20
	byte N_22
	word32 r2_23
	word32 r4_24
	word32 r7_25
	word32 r9_26
	word32 ip_27
	word32 cpsr_28
	word32 pc_21
	call fn00C01A15 (retsize: 0;)
		uses: lr_8,r1_6,r3_4,sp_1,Z
		defs: cpsr_28,fp_19,ip_27,lr_16,N_22,NZV_20,pc_21,r0_11,r1_13,r10_15,r2_23,r3_12,r4_24,r5_17,r6_14,r7_25,r8_18,r9_26,sp_9,Z_10
	return
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 - 177 r1:r6 - (r0 >> r10) lr:0x0000F000 r5:(fp >> 16) - r8

l00000981_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 - 177 r1:r6 - (r0 >> r10) lr:0x0000F000 r5:(fp >> 16) - r8

l00000985:
	word32 r0_31 = (word32) Mem0[r0_11 + 70:byte]
	branch NZV_20 l0000098D
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 - 177 r1:r6 - (r0 >> r10) lr:0x0000F000 r5:(fp >> 16) - r8

l00000989_1:
	pc_21 = pc_21 + 189
	r0_31 = Mem0[0x00000A4E:word32]
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 - 177 r1:r6 - (r0 >> r10) lr:0x0000F000 r5:(fp >> 16) - r8 r0:<invalid>

l0000098D:
	branch N_22 l0000098D_thunk_vTaskStartScheduler
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 - 177 r1:r6 - (r0 >> r10) lr:0x0000F000 r5:(fp >> 16) - r8 r0:<invalid> pc:pc + 189

l0000098D_thunk_vTaskStartScheduler:
	vTaskStartScheduler(r0_31, r1_13, r2_23, r3_12, r4_24, r5_17, r6_14, r7_25, r8_18, r9_26, fp_19, ip_27, pc_21, cpsr_28)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 - 177 r1:r6 - (r0 >> r10) lr:0x0000F000 r5:(fp >> 16) - r8 r0:<invalid> pc:pc + 189

l0000098D_1:
	__syscall(0x00200000)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 - 177 r1:r6 - (r0 >> r10) lr:0x0000F000 r5:(fp >> 16) - r8 r0:<invalid> pc:pc + 189

l0000098D_thunk_vTaskStartScheduler:
	vTaskStartScheduler(r0_31, r1_13, r2_23, r3_12, r4_24, r5_17, r6_14, r7_25, r8_18, r9_26, fp_19, ip_27, pc_21, cpsr_28)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 - 177 r1:r6 - (r0 >> r10) lr:0x0000F000 r5:(fp >> 16) - r8 r0:<invalid> pc:pc + 189

vTaskAllocateMPURegions_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid> lr:<invalid> r5:(fp >> 16) - r8 r0:<invalid> pc:<invalid> r2:<invalid> r8:<invalid> ip:<invalid> fp:0x00003FF0



void vTaskStartScheduler(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 ip, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r2 r3 r8
// Preserved: sp
vTaskStartScheduler_entry:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000991:
	branch Z l00000995
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000991_1:
	Mem120[r3:word64] = r1_r0
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000995:
	branch ZC l00000999
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000995_1:
	r1 = ip - 0x5000000B
	r1_r0 = SEQ(ip - 0x5000000B, r0) (alias)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000999:
	branch Z l0000099D
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B

l00000999_1:
	word32 v10_114 = Mem0[r3:word32]
	r3 = r3 + 176
	r0 = v10_114
	r1_r0 = SEQ(r1, v10_114) (alias)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B

l0000099D:
	branch Z l000009A1
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid>

l0000099D_1:
	Mem113[r3 - __ror(r1, 17):word64] = r9_r8
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid>

l000009A1:
	branch Z l000009A5
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid>

l000009A1_1:
	r2 = r3 + r3 * fp
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid>

l000009A5:
	branch Z l000009A9
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp

l000009A5_1:
	__syscall(0x00490F23)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp

l000009A9:
	branch ZC l000009AD
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp

l000009A9_1:
	pc = ~0x00000120
	byte NZCV_104 = cond(pc)
	Z = NZCV_104 (alias)
	ZC = NZCV_104 (alias)
	NZV = NZCV_104 (alias)
	V = NZCV_104 (alias)
	NZV = NZCV_104 (alias)
	N = NZCV_104 (alias)
	C = (bool) NZCV_104 (alias)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp

l000009AD:
	branch Z l000009B1
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120

l000009AD_1:
	r8 = r8 - __ror(pc, 3)
	Mem102[r8:word64] = r1_r0
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120

l000009B1:
	branch Z l000009B5
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid>

l000009B1_1:
	r0 = (word32) Mem0[r0:int8]
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid>

l000009B5:
	branch NZV l000009B9
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid>

l000009B5_1:
	__syscall(0x00F04FBD)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid>

l000009B9:
	branch Z l000009BD
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid>

l000009B9_1:
	r8 = ~(r3 << 6)
	byte NZCV_89 = cond(r8)
	Z = NZCV_89 (alias)
	ZC = NZCV_89 (alias)
	NZV = NZCV_89 (alias)
	V = NZCV_89 (alias)
	NZV = NZCV_89 (alias)
	N = NZCV_89 (alias)
	C = (bool) NZCV_89 (alias)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid>

l000009BD:
	branch V l000009C1
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid>

l000009BD_1:
	__syscall(0x00F3BF88)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid>

l000009C1:
	branch N l000009C5
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid>

l000009C1_1:
	__syscall(0x00F3BF8F)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid>

l000009C5:
	__syscall(0x00F04F8F)
	branch NZV l000009CD
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid>

l000009C9_1:
	Mem85[r3:word32] = r0
	r3 = r3 - 50
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:r3 + 176 r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid>

l000009CD:
	branch V l000009D1
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid>

l000009D1:
	branch ZC l000009D5
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid>

l000009D1_1:
	byte NZCV_77 = cond(__ror(r7, 8) - r8 - C)
	Z = NZCV_77 (alias)
	NZV = NZCV_77 (alias)
	V = NZCV_77 (alias)
	NZV = NZCV_77 (alias)
	N = NZCV_77 (alias)
	C = (bool) NZCV_77 (alias)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid>

l000009D5:
	branch NZV l000009D9
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid> ip:<invalid>

l000009D9:
	branch Z l000009DD
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid> ip:<invalid>

l000009D9_1:
	r1 = r0 - __ror(r8, 1)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid> ip:<invalid>

l000009DD:
	branch NZV l000009E1
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid> ip:<invalid>

l000009DD_1:
// DataOut: cpsr fp pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid> ip:<invalid>

l000009E1:
	branch V l000009E5
// DataOut: cpsr fp pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid> ip:<invalid> lr:<invalid>

l000009E5:
	branch C l000009E9
// DataOut: cpsr fp pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid> ip:<invalid> lr:<invalid>

l000009E9:
	branch N l000009E9_thunk_vTaskEndScheduler
// DataOut: cpsr fp pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid> ip:<invalid> lr:<invalid>

l000009E9_thunk_vTaskEndScheduler:
	vTaskEndScheduler(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, pc, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid> ip:<invalid> lr:<invalid>

l000009E9_1:
	__syscall(0x00000085)
// DataOut: cpsr fp pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid> ip:<invalid> lr:<invalid>

l000009E9_thunk_vTaskEndScheduler:
	vTaskEndScheduler(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, pc, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid> ip:<invalid> lr:<invalid>

vTaskStartScheduler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:<invalid> r8:<invalid> ip:<invalid> lr:<invalid> fp:0x00003FF0

l000009E5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid> ip:<invalid> lr:<invalid>

l000009E1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid> ip:<invalid> lr:<invalid>

l000009D5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid> ip:<invalid>

l000009CD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:ip - 0x5000000B r3:<invalid> r0:<invalid> r2:r3 + 352 + (r3 + 352) * fp pc:~0x00000120 r8:<invalid>



void vTaskEndScheduler(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr fp pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV fp pc r0 r8
// Preserved: sp
vTaskEndScheduler_entry:
// DataOut: cpsr fp pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000009ED:
	branch ZC l000009F1
// DataOut: cpsr fp pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000009ED_1:
// DataOut: cpsr fp pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000009F1:
	branch NZV l000009F5
// DataOut: cpsr fp pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0

l000009F1_1:
	__syscall(0x008811F3)
// DataOut: cpsr fp pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0

l000009F5:
	branch NZV l000009F9
// DataOut: cpsr fp pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0

l000009F5_1:
	__syscall(0x008F6FF3)
// DataOut: cpsr fp pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0

l000009F9:
	branch Z l000009FD
// DataOut: cpsr fp pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0

l000009F9_1:
	Mem38[0x00000A01 + __ror(r3, 31):word32] = r5_r4
	word32 pc_41 = pc + __ror(r3, 31)
// DataOut: cpsr fp pc r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0

l000009FD:
	branch N l000009FD_then
	word32 sp_8
	byte ZC_9
	word32 fp_10
	byte NZV_11
	byte Z_12
	word32 r3_14
	byte N_15
	byte NV_16
	byte NZV_18
	word32 r1_19
	word32 r2_20
	word32 r4_21
	word32 r5_22
	word32 r6_23
	word32 r7_24
	word32 r8_25
	word32 r9_26
	word32 cpsr_27
	word32 pc_13
	word32 r0_17
	call fn012C128D (retsize: 0;)
		uses: fp_4,N,NZV,sp_1,Z,ZC
		defs: cpsr_27,fp_10,N_15,NV_16,NZV_11,NZV_18,pc_13,r0_17,r1_19,r2_20,r3_14,r4_21,r5_22,r6_23,r7_24,r8_25,r9_26,sp_8,Z_12,ZC_9
	return
// DataOut: cpsr fp pc r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid>

l000009FD_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid>

l00000A01:
	branch NV_16 l00000A05
// DataOut: cpsr fp pc r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid>

l00000A01_1:
	r0_17 = (word32) Mem0[r0_17 + 103:byte]
// DataOut: cpsr fp pc r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid>

l00000A05:
	branch NZV_18 l00000A09
// DataOut: cpsr fp pc r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r0:<invalid>

l00000A05_1:
	pc_13 = pc_13 + 189
	r0_17 = Mem0[0x00000ACA:word32]
// DataOut: cpsr fp pc r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r0:<invalid>

l00000A09:
	branch Z_12 l00000A09_thunk_vTaskSuspendAll
// DataOut: cpsr fp pc r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r0:<invalid>

l00000A09_thunk_vTaskSuspendAll:
	vTaskSuspendAll(r0_17, r1_19, r2_20, r3_14, r6_23, r7_24, r8_25, r9_26, fp_10, pc_13, cpsr_27)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r0:<invalid>

l00000A09_1:
// DataOut: cpsr fp pc r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r0:<invalid>

l00000A09_thunk_vTaskSuspendAll:
	vTaskSuspendAll(r0_17, r1_19, r2_20, r3_14, r6_23, r7_24, r8_25, r9_26, fp_10, pc_13, cpsr_27)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r0:<invalid>

vTaskEndScheduler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r0:<invalid> r8:<invalid>



void vTaskSuspendAll(word32 r0, word32 r1, word32 r2, word32 r3, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV cpsr fp pc r0 r1 r2 r3 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV pc r0 r8
// Preserved: sp
vTaskSuspendAll_entry:
// DataOut: cpsr fp pc r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A0D:
	branch ZC l00000A11
// DataOut: cpsr fp pc r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A11:
	branch NZV l00000A15
// DataOut: cpsr fp pc r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A11_1:
	byte NZC_35 = cond(r3 ^ 0x0000000C)
	r0 = r3 ^ 0x0000000C
	NZV = NZC_35 (alias)
	Z = NZC_35 (alias)
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A15:
	branch V l00000A19
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:r3 ^ 0x0000000C

l00000A15_1:
	r0 = r0 + 200
	r8 = (word32) Mem0[r0:int16]
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:r3 ^ 0x0000000C

l00000A19:
	branch NZV l00000A1D
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid>

l00000A19_1:
	pc = pc + 71
	r0 = Mem0[0x00000A68:word32]
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid>

l00000A1D:
	branch Z l00000A1D_thunk_xTaskGetTickCount
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid> pc:pc + 71

l00000A1D_thunk_xTaskGetTickCount:
	xTaskGetTickCount(r0, r1, r2, r6, r7, r8, r9, fp, pc, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid> pc:pc + 71

l00000A1D_1:
	__msr(cpsr, r0)
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid> pc:pc + 71

l00000A1D_thunk_xTaskGetTickCount:
	xTaskGetTickCount(r0, r1, r2, r6, r7, r8, r9, fp, pc, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid> pc:pc + 71

vTaskSuspendAll_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid> pc:pc + 71

l00000A0D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xTaskGetTickCount(word32 r0, word32 r1, word32 r2, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV
// Preserved: sp
xTaskGetTickCount_entry:
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A21:
	branch ZC l00000A25
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A21_1:
	byte NZCV_31 = cond((fp >> 6) - r8 - C)
	NZV = NZCV_31 (alias)
	Z = NZCV_31 (alias)
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A25:
	branch NZV l00000A29
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid>

l00000A25_1:
	Mem29[r7:byte] = (byte) r7
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid>

l00000A29:
	branch Z l00000A2D
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid>

l00000A29_thunk_xTaskGetTickCountFromISR:
	xTaskGetTickCountFromISR(r0, r1, r2, r6, r7, r8, r9, fp, pc, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid>

l00000A29_1:
	__msr(cpsr, r0)
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid>

l00000A29_thunk_xTaskGetTickCountFromISR:
	xTaskGetTickCountFromISR(r0, r1, r2, r6, r7, r8, r9, fp, pc, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid>

xTaskGetTickCount_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xTaskGetTickCountFromISR(word32 r0, word32 r1, word32 r2, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV
// Preserved: sp
xTaskGetTickCountFromISR_entry:
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A2D:
	branch ZC l00000A31
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A2D_1:
	byte NZCV_25 = cond((fp >> 6) - r8 - C)
	NZV = NZCV_25 (alias)
	Z = NZCV_25 (alias)
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A31:
	branch NZV l00000A35
// DataOut: cpsr fp pc r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid>

l00000A31_1:
	Mem23[r7:byte] = (byte) r7
// DataOut: cpsr fp pc r0 r1 r2 r6 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid>

l00000A35:
	branch Z l00000A39
// DataOut: cpsr fp pc r0 r1 r2 r6 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid>

l00000A35_thunk_uxTaskGetNumberOfTasks:
	uxTaskGetNumberOfTasks(r0, r1, r2, r6, r8, r9, fp, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid>

l00000A35_1:
	__msr(cpsr, r0)
// DataOut: fp pc r0 r1 r2 r6 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid>

l00000A35_thunk_uxTaskGetNumberOfTasks:
	uxTaskGetNumberOfTasks(r0, r1, r2, r6, r8, r9, fp, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid>

xTaskGetTickCountFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void uxTaskGetNumberOfTasks(word32 r0, word32 r1, word32 r2, word32 r6, word32 r8, word32 r9, word32 fp, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp pc r0 r1 r2 r6 r8 r9
// LiveOut:
// Trashed:
// Preserved: sp
uxTaskGetNumberOfTasks_entry:
// DataOut: fp pc r0 r1 r2 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000A39:
	branch V l00000A3D
// DataOut: fp pc r0 r1 r2 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000A39_1:
	r1 = (fp >> 16) - r8
// DataOut: fp pc r0 r1 r2 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000A3D:
	branch NZV l00000A41
// DataOut: fp pc r0 r1 r2 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8

l00000A3D_1:
	pc = pc + 71
	r0 = Mem0[0x00000A8C:word32]
// DataOut: fp pc r0 r1 r2 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8

l00000A41:
	branch Z l00000A45
// DataOut: fp pc r0 r1 r2 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 pc:pc + 71 r0:<invalid>

l00000A41_thunk_pcTaskGetName:
	pcTaskGetName(r0, r1, r2, r6, r8, r9, fp, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 pc:pc + 71 r0:<invalid>

uxTaskGetNumberOfTasks_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A41_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 pc:pc + 71 r0:<invalid>



void pcTaskGetName(word32 r0, word32 r1, word32 r2, word32 r6, word32 r8, word32 r9, word32 fp, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp pc r0 r1 r2 r6 r8 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
pcTaskGetName_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

pcTaskGetName_entry:
// DataOut: fp pc r0 r1 r2 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000A45:
	branch V l00000A49
// DataOut: fp pc r0 r1 r2 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000A45_1:
	r0 = r0 + 65
// DataOut: fp pc r0 r1 r2 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000A49:
	branch N l00000A4D
// DataOut: fp pc r0 r1 r2 r6 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:r0 + 65 r5:<invalid>

l00000A49_1:
	Mem26[fp:word32] = r0
	Mem29[fp + 4:word32] = r1
	Mem31[fp + 8:word32] = r2
	Mem33[fp + 12:word32] = r6
	Mem35[fp + 16:word32] = r9
// DataOut: pc r0 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:r0 + 65 r5:<invalid>

l00000A4D:
	branch V l00000A51
// DataOut: pc r0 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:r0 + 65 r5:<invalid>

l00000A4D_1:
	NZV = cond(r0 ^ __ror(r8, 8)) (alias)
// DataOut: pc
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:r0 + 65 r5:<invalid>

l00000A51:
	branch NZV l00000A55
// DataOut: pc
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 + 65 r5:<invalid>

l00000A51_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 + 65 r5:<invalid>

l00000A55:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r5:<invalid> pc:pc + 71



void xTaskGenericNotify(word32 r0, word32 r1, word32 r3, word32 r6, word32 r8, word32 r9, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV ip lr r0 r1 r3 r6 r8 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xTaskGenericNotify_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

xTaskGenericNotify_entry:
// DataOut: ip lr r0 r1 r3 r6 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A59:
	branch Z l00000A5D
// DataOut: ip lr r0 r1 r3 r6 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A5D:
	branch Z l00000A61
// DataOut: ip lr r0 r1 r3 r6 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A5D_1:
	Mem42[r6 - 3910:byte] = (byte) r0
// DataOut: ip lr r1 r3 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A61:
	branch ZC l00000A65
// DataOut: ip lr r1 r3 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A65:
	branch C l00000A69
// DataOut: ip lr r1 r3 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A65_1:
// DataOut: ip lr r1 r3 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000A69:
	branch Z l00000A6D
// DataOut: ip lr r1 r3 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:0x0000FD00

l00000A69_1:
// DataOut: ip lr r1 r3 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:0x0000FD00

l00000A6D:
	branch V l00000A71
// DataOut: ip lr r1 r3 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:0x0000FD00 r2:0xB7FF0301

l00000A6D_1:
	r9 = (word32) Mem0[r8:byte]
// DataOut: ip lr r1 r3 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:0x0000FD00 r2:0xB7FF0301

l00000A71:
	branch ZC l00000A75
// DataOut: ip lr r1 r3 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:0x0000FD00 r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid>

l00000A71_1:
// DataOut: ip r1 r3 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:0x0000FD00 r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid>

l00000A75:
	branch Z l00000A7D
// DataOut: ip r1 r3 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:0x0000FD00 r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid> lr:lr r6:<invalid>

l00000A7D:
	branch Z l00000A81
// DataOut: ip r1 r3 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:0x000101F8 r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid> lr:lr r6:<invalid>

l00000A7D_1:
// DataOut: ip r1 r3 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:0x000101F8 r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid> lr:lr r6:<invalid>

l00000A81:
	branch Z l00000A85
// DataOut: ip r1 r3 r9
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r0:0x000101F8 r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid> lr:lr r6:<invalid>

l00000A81_1:
	Mem31[ip:word32] = r3
	ip = ip - 2800
// DataOut: ip r1 r9
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r0:0x000101F8 r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid> lr:lr r6:<invalid>

l00000A85:
	branch C l00000A89
// DataOut: ip r1 r9
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r0:0x000101F8 r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid> lr:lr r6:<invalid> ip:ip - 2800

l00000A85_1:
	Mem27[ip + -8:word32] = r1
	Mem28[ip + -4:word32] = r9
// DataOut: ip
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r0:0x000101F8 r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid> lr:lr r6:<invalid> ip:ip - 2800

l00000A89:
	branch Z l00000A8D
// DataOut: ip
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r0:0x000101F8 r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid> lr:lr r6:<invalid> ip:<invalid>

l00000A8D:
	branch Z l00000A91
// DataOut: ip
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r0:0x000101F8 r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid> lr:lr r6:<invalid> ip:<invalid>

l00000A8D_1:
// DataOut:
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r0:0x000101F8 r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid> lr:lr r6:<invalid> ip:<invalid>

l00000A91:
	branch ZC l00000A95
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid> lr:lr r6:<invalid> ip:<invalid>

l00000A95:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid> lr:lr r6:<invalid> ip:<invalid>

l00000A91_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid> lr:lr r6:<invalid> ip:<invalid>

l00000A89_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:0x000101F8 r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid> lr:lr r6:<invalid> ip:<invalid>

l00000A79_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x000101F8 r2:0xB7FF0301 r8:r8 + 1571 r9:<invalid> lr:lr r6:<invalid>

l00000A61_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A59_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xTaskGenericNotifyFromISR(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 ip, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr fp ip r0 r1 r2 r3 r4 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV lr pc r0 r3 r4 r6 r8
// Preserved: r9 sp
xTaskGenericNotifyFromISR_entry:
// DataOut: cpsr fp ip r0 r1 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000B0D:
	__syscall(0x0041F0E9)
	branch N l00000B15
// DataOut: cpsr fp ip r0 r1 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000B11_1:
	__syscall(0x008511F3)
// DataOut: cpsr fp ip r0 r1 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000B15:
	branch ZC l00000B19
// DataOut: cpsr fp ip r0 r1 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000B15_1:
	Mem241[r4:word32] = fp
// DataOut: cpsr ip r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000B19:
	branch NZV l00000B1D
// DataOut: cpsr ip r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080

l00000B19_1:
	__syscall(0x008811F3)
// DataOut: cpsr ip r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080

l00000B1D:
	branch NZV l00000B21
// DataOut: cpsr ip r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080

l00000B1D_1:
	__syscall(0x008F6FF3)
// DataOut: cpsr ip r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080

l00000B21:
	branch Z l00000B25
// DataOut: cpsr ip r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080

l00000B21_1:
	word32 sp_219
	byte N_220
	word32 fp_222
	word32 r4_223
	word32 r8_229
	word32 lr_230
	word32 r2_232
	word32 ip_233
	word32 pc_234
	word32 r1_235
	word32 cpsr_236
	word32 r6_237
	byte NZCV_238
	word32 r9_239
	word32 r7_240
	call fnFE3D4AF5 (retsize: 0;)
		uses: C,cpsr,fp,ip,lr,N,NZCV,NZV,pc,r0,r1,r2,r3,r4_5,r6,r7,r8,r9,sp_1,V,Z,ZC
		defs: C_231,cpsr_236,fp_222,ip_233,lr_230,N_220,NZCV_238,NZV_224,pc_234,r0_226,r1_235,r2_232,r3_227,r4_223,r6_237,r7_240,r8_229,r9_239,sp_219,V_228,Z_225,ZC_221
// DataOut: cpsr ip r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080

l00000B25:
	branch Z l00000B29
// DataOut: cpsr ip r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080

l00000B29:
	branch ZC l00000B2D
// DataOut: cpsr ip r0 r1 r2 r3 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080

l00000B29_1:
	r0 = r3 ^ __ror(r0, 4)
// DataOut: cpsr ip r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080

l00000B2D:
	branch Z l00000B31
// DataOut: cpsr ip r0 r1 r2 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid>

l00000B2D_1:
	Mem217[r0 - 72:word64] = r7_r6
// DataOut: cpsr ip r0 r1 r2 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid>

l00000B31:
	branch V l00000B35
// DataOut: cpsr ip r0 r1 r2 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid>

l00000B31_1:
// DataOut: cpsr ip r0 r1 r2 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid>

l00000B35:
	branch Z l00000B39
// DataOut: cpsr ip r0 r1 r2 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid>

l00000B35_1:
// DataOut: cpsr ip r0 r1 r2 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid>

l00000B39:
	branch NZV l00000B3D
// DataOut: cpsr ip r0 r1 r2 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000

l00000B39_1:
	__syscall(0x00D8062A)
// DataOut: cpsr ip r0 r1 r2 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000

l00000B3D:
	branch C l00000B3D_then
	word32 sp_49
	byte N_50
	byte ZC_51
	word32 fp_52
	word32 r4_53
	byte NZV_54
	byte Z_55
	word32 r0_56
	word32 r3_57
	byte V_58
	word32 r8_59
	word32 lr_60
	byte C_61
	word32 r2_62
	word32 ip_63
	word32 pc_64
	word32 r1_65
	word32 cpsr_66
	word32 r6_67
	byte NZCV_68
	word32 r9_69
	word32 r7_70
	call fnFFC016E5 (retsize: 0;)
		uses: C_32,cpsr_27,fp_40,ip_30,lr_48,N_42,NZCV_25,NZV_38,pc_29,r0_46,r1_28,r2_31,r3_35,r4_39,r6_26,r7_24,r8_47,r9_44,sp_43,V_34,Z_37,ZC_41
		defs: C_61,cpsr_66,fp_52,ip_63,lr_60,N_50,NZCV_68,NZV_54,pc_64,r0_56,r1_65,r2_62,r3_57,r4_53,r6_67,r7_70,r8_59,r9_69,sp_49,V_58,Z_55,ZC_51
	return
// DataOut: cpsr ip r0 r1 r2 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000

l00000B3D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000

l00000B41:
	branch Z_55 l00000B45
// DataOut: cpsr ip r0 r1 r2 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000

l00000B41_1:
// DataOut: cpsr ip r0 r1 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000

l00000B45:
	branch Z_55 l00000B49
// DataOut: cpsr ip r0 r1 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000

l00000B45_1:
// DataOut: cpsr r0 r1 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000

l00000B49:
	branch Z_55 l00000B49_then
	word32 sp_72
	byte N_73
	byte ZC_74
	word32 fp_75
	word32 r4_76
	byte NZV_77
	byte Z_78
	word32 r0_79
	word32 r3_80
	byte V_81
	word32 r8_82
	word32 lr_83
	byte C_84
	word32 r2_85
	word32 ip_86
	word32 pc_87
	word32 r1_88
	word32 cpsr_89
	word32 r6_90
	byte NZCV_91
	word32 r9_92
	word32 r7_93
	call fn00B010E9 (retsize: 0;)
		uses: C_61,cpsr_66,fp_52,ip_63,lr_60,N_50,NZCV_68,NZV_54,pc_64,r0_71,r1_65,r2_62,r3_57,r4_53,r6_67,r7_70,r8_59,r9_69,sp_49,V_58,Z_55,ZC_51
		defs: C_84,cpsr_89,fp_75,ip_86,lr_83,N_73,NZCV_91,NZV_77,pc_87,r0_79,r1_88,r2_85,r3_80,r4_76,r6_90,r7_93,r8_82,r9_92,sp_72,V_81,Z_78,ZC_74
	return
// DataOut: cpsr r0 r1 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid>

l00000B49_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid>

l00000B4D:
	branch ZC_74 l00000B51
// DataOut: cpsr r0 r1 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid>

l00000B4D_1:
	Mem210[r0_79 - 464:word32] = r0_79 - 464
// DataOut: cpsr r0 r1 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid>

l00000B51:
	branch NZV_77 l00000B55
// DataOut: cpsr r0 r1 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid>

l00000B55:
	branch Z_78 l00000B59
// DataOut: cpsr r0 r1 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid>

l00000B55_1:
// DataOut: cpsr r0 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid>

l00000B59:
	branch Z_78 l00000B5D
// DataOut: cpsr r0 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8

l00000B59_1:
	__msr(cpsr_89, 0x0000016E)
// DataOut: r0 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8

l00000B5D:
	branch Z_78 l00000B61
// DataOut: r0 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8

l00000B5D_1:
// DataOut: r0 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8

l00000B61:
	branch Z_78 l00000B61_then
	word32 sp_96
	byte ZC_98
	word32 fp_99
	word32 r4_100
	byte Z_102
	word32 r0_103
	word32 r3_104
	byte V_105
	word32 r8_106
	word32 lr_107
	word32 r2_109
	word32 ip_110
	word32 pc_111
	word32 r1_112
	word32 cpsr_113
	word32 r6_114
	byte NZCV_115
	word32 r9_116
	word32 r7_117
	byte C_108
	byte NZV_101
	byte N_125
	call fnFF47DD01 (retsize: 0;)
		uses: C_84,cpsr_89,fp_75,ip_86,lr_83,N_73,NZCV_91,NZV_77,pc_95,r0_94,r1_88,r2_85,r3_80,r4_76,r6_90,r7_93,r8_82,r9_92,sp_72,V_81,Z_78,ZC_74
		defs: C_108,cpsr_113,fp_99,ip_110,lr_107,N_97,NZCV_115,NZV_101,pc_111,r0_103,r1_112,r2_109,r3_104,r4_100,r6_114,r7_117,r8_106,r9_116,sp_96,V_105,Z_102,ZC_98
	return
// DataOut: r0 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8

l00000B61_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8

l00000B65:
	branch NZV_101 l00000B69
// DataOut: r0 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8

l00000B65_1:
	Mem205[r6_114:byte] = (byte) r0_103
// DataOut: r0 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8

l00000B69:
	branch NZV_101 l00000B6D
// DataOut: r0 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8 r6:r6 - 0x0000C000

l00000B69_1:
	byte NZCV_198 = cond(r0_103 ^ 0x0000F800)
	N_125 = NZCV_198 (alias)
	C_108 = NZCV_198 (alias)
	NZV_101 = NZCV_198 (alias)
// DataOut: r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8 r6:r6 - 0x0000C000

l00000B6D:
	branch C_108 l00000B71
// DataOut: r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8 r6:r6 - 0x0000C000

l00000B71:
	branch N_125 l00000B75
// DataOut: r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8 r6:r6 - 0x0000C000

l00000B75:
	branch NZV_101 l00000B79
// DataOut: r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8 r6:r6 - 0x0000C000

l00000B75_1:
	word32 sp_176
	byte N_177
	byte ZC_178
	word32 fp_179
	word32 r4_180
	byte NZV_181
	byte Z_182
	word32 r0_183
	word32 r3_184
	byte V_185
	word32 r8_186
	word32 lr_187
	byte C_188
	word32 r2_189
	word32 ip_190
	word32 pc_191
	word32 r1_192
	word32 cpsr_193
	word32 r6_194
	byte NZCV_195
	word32 r9_196
	word32 r7_197
	call fnFFC0277D (retsize: 0;)
		uses: C_120,cpsr_113,fp_99,ip_110,lr_107,N_125,NZCV_119,NZV_123,pc_111,r0_103,r1_112,r2_109,r3_104,r4_100,r6_118,r7_117,r8_106,r9_116,sp_96,V_121,Z_122,ZC_124
		defs: C_188,cpsr_193,fp_179,ip_190,lr_187,N_177,NZCV_195,NZV_181,pc_191,r0_183,r1_192,r2_189,r3_184,r4_180,r6_194,r7_197,r8_186,r9_196,sp_176,V_185,Z_182,ZC_178
// DataOut: r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8 r6:r6 - 0x0000C000

l00000B79:
	word32 sp_126
	byte N_127
	byte ZC_128
	word32 fp_129
	word32 r4_130
	byte NZV_131
	byte Z_132
	word32 r0_133
	word32 r3_134
	byte V_135
	word32 r8_136
	word32 lr_137
	byte C_138
	word32 r2_139
	word32 ip_140
	word32 pc_141
	word32 r1_142
	word32 cpsr_143
	word32 r6_144
	byte NZCV_145
	word32 r9_146
	word32 r7_147
	call fn01A1DB6D (retsize: 0;)
		uses: C_120,cpsr_113,fp_99,ip_110,lr_107,N_125,NZCV_119,NZV_123,pc_111,r0_103,r1_112,r2_109,r3_104,r4_100,r6_118,r7_117,r8_106,r9_116,sp_96,V_121,Z_122,ZC_124
		defs: C_138,cpsr_143,fp_129,ip_140,lr_137,N_127,NZCV_145,NZV_131,pc_141,r0_133,r1_142,r2_139,r3_134,r4_130,r6_144,r7_147,r8_136,r9_146,sp_126,V_135,Z_132,ZC_128
	branch ZC_128 l00000B7D_then
	word32 sp_148
	byte N_149
	byte ZC_150
	word32 fp_151
	word32 r4_152
	byte NZV_153
	byte Z_154
	word32 r0_155
	word32 r3_156
	byte V_157
	word32 r8_158
	word32 lr_159
	byte C_160
	word32 r2_161
	word32 ip_162
	word32 pc_163
	word32 r1_164
	word32 cpsr_165
	word32 r6_166
	byte NZCV_167
	word32 r9_168
	word32 r7_169
	call fn01B37935 (retsize: 0;)
		uses: C_138,cpsr_143,fp_129,ip_140,lr_137,N_127,NZCV_145,NZV_131,pc_141,r0_133,r1_142,r2_139,r3_134,r4_130,r6_144,r7_147,r8_136,r9_146,sp_126,V_135,Z_132,ZC_128
		defs: C_160,cpsr_165,fp_151,ip_162,lr_159,N_149,NZCV_167,NZV_153,pc_163,r0_155,r1_164,r2_161,r3_156,r4_152,r6_166,r7_169,r8_158,r9_168,sp_148,V_157,Z_154,ZC_150
	return
// DataOut: r9
// DataOut (flags): Z
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8 r6:r6 - 0x0000C000

l00000B7D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8 r6:r6 - 0x0000C000

l00000B81:
	branch Z_154 l00000B85
// DataOut: r9
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8 r6:r6 - 0x0000C000

l00000B81_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8 r6:r6 - 0x0000C000

l00000B85:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:<invalid> r3:<invalid> pc:r1 | 0x000000E8 r6:r6 - 0x0000C000 r9:r9

xTaskGenericNotifyFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:<invalid> r3:<invalid> pc:r1 | 0x000000E8 r6:r6 - 0x0000C000 r9:r9

l00000B71_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8 r6:r6 - 0x0000C000

l00000B6D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid> pc:r1 | 0x000000E8 r6:r6 - 0x0000C000

l00000B51_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 4080 r0:<invalid> r8:<invalid> lr:0x30000000 r3:<invalid>

l00000B25_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 4080



void xTaskNotifyWait(word32 r0, word32 r1, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 ip, word32 lr, word32 pc, word32 cpsr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: fp ip r0 r1 r4 r6 r7 r8 r9
// Preserved: sp
xTaskNotifyWait_entry:
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000BD5:
	branch Z l00000BD9
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000BD5_1:
	__syscall(0x0041F0E9)
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000BD9:
	branch ZC l00000BDD
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000BD9_1:
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000BDD:
	branch Z l00000BE1
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10)

l00000BDD_1:
	__syscall(0x00460E46)
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10)

l00000BE1:
	branch NZV l00000BE5
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10)

l00000BE5:
	branch ZC l00000BE9
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10)

l00000BE5_1:
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10)

l00000BE9:
	branch Z l00000BED
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:0xC000000F - r8

l00000BE9_1:
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:0xC000000F - r8

l00000BED:
	branch Z l00000BF1
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:<invalid>

l00000BED_1:
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:<invalid>

l00000BF1:
	branch Z l00000BF1_then
	word32 sp_10
	byte ZC_12
	word32 r1_13
	word32 r6_14
	word32 ip_15
	byte NZV_16
	word32 r8_17
	word32 r0_18
	word32 r10_19
	word32 r9_22
	word32 fp_23
	word32 cpsr_24
	byte C_25
	word32 r3_26
	word32 r5_27
	word32 r7_28
	byte NZV_29
	word32 lr_30
	word32 pc_31
	word32 r4_32
	byte N_33
	word32 spsr_153
	byte V_152
	byte Z_11
	call fn01A19079 (retsize: 0;)
		uses: NZV,r1_5,r6_9,sp_1,Z,ZC
		defs: C_25,cpsr_24,fp_23,ip_15,lr_30,N_33,NZV_16,NZV_29,pc_31,r0_18,r1_13,r10_19,r3_26,r4_32,r5_27,r6_14,r7_28,r8_17,r9_22,sp_10,spsr_21,V_20,Z_11,ZC_12
	return
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18)

l00000BF1_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18)

l00000BF5:
	branch Z_11 l00000BF9
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18)

l00000BF9:
	branch V_152 l00000BFD
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18)

l00000BF9_1:
	__msr(spsr_153, 0x00000A02)
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18)

l00000BFD:
	branch V_152 l00000C01
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18)

l00000BFD_1:
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18)

l00000C01:
	branch Z_11 l00000C05
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid>

l00000C01_1:
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid>

l00000C05:
	branch Z_11 l00000C09
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:r9 + (r0 & ~(r10 >> 18))

l00000C09:
	branch Z_11 l00000C0D
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:r9 + (r0 & ~(r10 >> 18))

l00000C09_1:
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:r9 + (r0 & ~(r10 >> 18))

l00000C0D:
	branch Z_11 l00000C11
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:r9 + (r0 & ~(r10 >> 18)) ip:ip + 1776 fp:<invalid>

l00000C0D_1:
	word32 sp_142
	byte ZC_144
	word32 r1_145
	word32 r6_146
	word32 ip_147
	byte NZV_148
	word32 r8_149
	word32 r0_150
	word32 r10_151
	word32 r9_154
	word32 fp_155
	word32 cpsr_156
	byte C_157
	word32 r3_158
	word32 r5_159
	word32 r7_160
	byte NZV_161
	word32 lr_162
	word32 pc_163
	word32 r4_164
	byte N_165
	call fn01A19AD9 (retsize: 0;)
		uses: C_25,cpsr_24,fp_37,ip_38,lr_30,N_33,NZV_16,NZV_29,pc_31,r0_18,r1_13,r10_19,r3_26,r4_32,r5_27,r6_14,r7_28,r8_34,r9_35,sp_36,spsr_21,V_20,Z_11,ZC_12
		defs: C_157,cpsr_156,fp_155,ip_147,lr_162,N_165,NZV_148,NZV_161,pc_163,r0_150,r1_145,r10_151,r3_158,r4_164,r5_159,r6_146,r7_160,r8_149,r9_154,sp_142,spsr_153,V_152,Z_143,ZC_144
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:r9 + (r0 & ~(r10 >> 18)) ip:ip + 1776 fp:<invalid>

l00000C11:
	branch V_152 l00000C15
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:r9 + (r0 & ~(r10 >> 18)) ip:ip + 1776 fp:<invalid>

l00000C11_1:
	__msr(spsr_153, 0x00000B6E)
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:r9 + (r0 & ~(r10 >> 18)) ip:ip + 1776 fp:<invalid>

l00000C15:
	branch V_152 l00000C19
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:r9 + (r0 & ~(r10 >> 18)) ip:ip + 1776 fp:<invalid>

l00000C15_1:
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:r9 + (r0 & ~(r10 >> 18)) ip:ip + 1776 fp:<invalid>

l00000C19:
	branch Z_11 l00000C19_then
	word32 sp_63
	byte Z_64
	byte ZC_65
	word32 r1_66
	word32 r6_67
	word32 ip_68
	byte NZV_69
	word32 r8_70
	word32 r0_71
	word32 r10_72
	byte V_73
	word32 spsr_74
	word32 r9_75
	word32 fp_76
	word32 cpsr_77
	byte C_78
	word32 r3_79
	word32 r5_80
	word32 r7_81
	byte NZV_82
	word32 lr_83
	word32 pc_84
	word32 r4_85
	byte N_86
	call fn00AC10E1 (retsize: 0;)
		uses: C_46,cpsr_47,fp_48,ip_56,lr_42,N_39,NZV_43,NZV_55,pc_41,r0_53,r1_58,r10_52,r3_45,r4_40,r5_44,r6_57,r7_62,r8_54,r9_49,sp_61,spsr_50,V_51,Z_60,ZC_59
		defs: C_78,cpsr_77,fp_76,ip_68,lr_83,N_86,NZV_69,NZV_82,pc_84,r0_71,r1_66,r10_72,r3_79,r4_85,r5_80,r6_67,r7_81,r8_70,r9_75,sp_63,spsr_74,V_73,Z_64,ZC_65
	return
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C19_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C1D:
	branch V_73 l00000C21
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C1D_1:
	__msr(cpsr_77, 0x000001D0)
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C21:
	branch C_78 l00000C25
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C25:
	branch Z_64 l00000C29
// DataOut: cpsr ip lr pc r0 r1 r10 r3 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C25_1:
	Mem132[r1_66 + -28:word32] = r1_66
	Mem133[r1_66 + -24:word32] = r3_79
	Mem134[r1_66 + -20:word32] = r5_80
	Mem135[r1_66 + -16:word32] = r6_67
	Mem136[r1_66 + -12:word32] = r7_81
	Mem137[r1_66 + -8:word32] = r9_75
	Mem138[r1_66 + -4:word32] = r10_72
// DataOut: cpsr ip lr pc r0 r1 r3 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C29:
	branch V_73 l00000C2D
// DataOut: cpsr ip lr pc r0 r1 r3 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C29_1:
	__msr(cpsr_77, 0x00000066)
// DataOut: ip lr pc r0 r1 r3 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C2D:
	branch V_73 l00000C31
// DataOut: ip lr pc r0 r1 r3 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C2D_1:
// DataOut: ip lr pc r0 r1 r3 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C31:
	branch NZV_82 l00000C35
// DataOut: ip lr pc r0 r1 r3 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C35:
	branch NZV_82 l00000C39
// DataOut: ip lr pc r0 r1 r3 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C39:
	branch C_78 l00000C3D
// DataOut: ip lr pc r0 r1 r3 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C39_1:
	Mem122[r1_66:word32] = r3_79
	Mem123[r1_66 + 4:word32] = r5_80
	Mem124[r1_66 + 8:word32] = r6_67
	Mem125[r1_66 + 12:word32] = r7_81
	Mem126[r1_66 + 16:word32] = ip_68
	Mem127[r1_66 + 20:word32] = sp_63
	Mem128[r1_66 + 24:word32] = lr_83
	Mem129[r1_66 + 28:word32] = pc_84
// DataOut: lr r0 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C3D:
	branch Z_64 l00000C41
// DataOut: lr r0 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C41:
	branch ZC_65 l00000C45
// DataOut: lr r0 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C41_1:
// DataOut: lr r0 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C45:
	branch Z_64 l00000C45_then
	word32 sp_88
	byte Z_89
	byte ZC_90
	word32 r1_91
	word32 r6_92
	word32 ip_93
	byte NZV_94
	word32 r8_95
	word32 r0_96
	word32 r10_97
	byte V_98
	word32 spsr_99
	word32 r9_100
	word32 fp_101
	word32 cpsr_102
	byte C_103
	word32 r3_104
	word32 r5_105
	word32 r7_106
	byte NZV_107
	word32 lr_108
	word32 pc_109
	word32 r4_110
	byte N_111
	call fn012C2195 (retsize: 0;)
		uses: C_78,cpsr_77,fp_76,ip_68,lr_83,N_86,NZV_69,NZV_82,pc_84,r0_71,r1_66,r10_72,r3_79,r4_85,r5_80,r6_67,r7_81,r8_87,r9_75,sp_63,spsr_74,V_73,Z_64,ZC_65
		defs: C_103,cpsr_102,fp_101,ip_93,lr_108,N_111,NZV_107,NZV_94,pc_109,r0_96,r1_91,r10_97,r3_104,r4_110,r5_105,r6_92,r7_106,r8_95,r9_100,sp_88,spsr_99,V_98,Z_89,ZC_90
	return
// DataOut: lr r0 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:<invalid> r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid> r4:<invalid>

l00000C45_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:<invalid> r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid> r4:<invalid>

l00000C49:
	branch N_111 l00000C4D
// DataOut: lr r0 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:<invalid> r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid> r4:<invalid>

l00000C49_1:
	__syscall(0x00F3BF60)
// DataOut: lr r0 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:<invalid> r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid> r4:<invalid>

l00000C4D:
	branch V_98 l00000C51
// DataOut: lr r0 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:<invalid> r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid> r4:<invalid>

l00000C4D_1:
	__syscall(0x00F3BF8F)
// DataOut: lr r0 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:<invalid> r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid> r4:<invalid>

l00000C51:
	branch Z_89 l00000C55
// DataOut: lr r0 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:<invalid> r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid> r4:<invalid>

l00000C51_1:
// DataOut: lr r0 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:<invalid> r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid> r4:<invalid>

l00000C55:
	branch NZV_94 l00000C59
// DataOut: lr r0 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:<invalid> r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid> r4:<invalid>

l00000C55_1:
	Mem115[r7_106:byte] = (byte) lr_108
// DataOut: r0 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:<invalid> r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid> r4:<invalid>

l00000C59:
	branch Z_89 l00000C5D
// DataOut: r0 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:<invalid> r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid> r4:<invalid> r7:r7 + 2085

l00000C59_1:
	Mem114[r0_96:word32] = r0_96
// DataOut: r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:<invalid> r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid> r4:<invalid> r7:r7 + 2085

l00000C5D:
	branch C_103 l00000C5D_thunk_vTaskNotifyGiveFromISR
// DataOut: r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:<invalid> r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid> r4:<invalid> r7:r7 + 2085

l00000C5D_thunk_vTaskNotifyGiveFromISR:
	vTaskNotifyGiveFromISR(r8_95)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:<invalid> r0:<invalid> r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid> r4:<invalid> r7:r7 + 2085
// Terminates process

l00000C5D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:<invalid> r0:<invalid> r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid> r4:<invalid> r7:r7 + 2085

xTaskNotifyWait_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:<invalid> r0:<invalid> r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid> r4:<invalid> r7:r7 + 2085

l00000C3D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C35_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C31_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C21_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:<invalid> ip:ip + 1776 fp:<invalid>

l00000C05_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18) r8:<invalid> r9:r9 + (r0 & ~(r10 >> 18))

l00000BF5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r6 - (ip >> 10) r6:<invalid> r0:r0 & ~(r10 >> 18)

l00000BE1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r6 - (ip >> 10)



void vTaskNotifyGiveFromISR(word32 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vTaskNotifyGiveFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

vTaskNotifyGiveFromISR_entry:
// DataOut: r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000C61:
	__syscall(0x0043F8E9)
	branch N l00000C69
// DataOut: r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000C65_1:
	__syscall(0x008611F3)
// DataOut: r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000C69:
	branch ZC l00000C6D
// DataOut: r8
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00000C69_1:
// DataOut: r8
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00000C6D:
	branch NZV l00000C71
// DataOut: r8
// DataOut (flags): NZV
// SymbolicIn: sp:fp fp:0x00003FF0

l00000C6D_1:
	__syscall(0x008811F3)
// DataOut: r8
// DataOut (flags): NZV
// SymbolicIn: sp:fp fp:0x00003FF0

l00000C71:
	branch NZV l00000C75
// DataOut: r8
// DataOut (flags): ZV
// SymbolicIn: sp:fp fp:0x00003FF0

l00000C71_1:
	__syscall(0x008F6FF3)
// DataOut: r8
// DataOut (flags): ZV
// SymbolicIn: sp:fp fp:0x00003FF0

l00000C75:
	branch Z l00000C79
// DataOut: r8
// DataOut (flags): V
// SymbolicIn: sp:fp fp:0x00003FF0

l00000C75_1:
// DataOut: r8
// DataOut (flags): V
// SymbolicIn: sp:fp fp:0x00003FF0

l00000C79:
	branch V l00000C7D
// DataOut: r8
// DataOut (flags): V
// SymbolicIn: sp:fp fp:0x00003FF0 r4:00001049

l00000C79_1:
// DataOut: r8
// DataOut (flags): V
// SymbolicIn: sp:fp fp:0x00003FF0 r4:00001049

l00000C7D:
	branch V l00000C81
// DataOut: r8
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 r4:00001049 r8:r8 + 35 r9:<invalid>

l00000C7D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 r4:00001049 r8:r8 + 35 r9:<invalid>

l00000C81:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 r4:00001049 r8:<invalid> r9:<invalid>



void ulTaskNotifyTake(word32 r0, word32 r2, word32 r3, word32 r6, word32 r8, word32 r9, word32 cpsr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV cpsr r0 r2 r3 r6 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp r2 r3 r5 r6 r8 r9
// Preserved: sp
ulTaskNotifyTake_entry:
// DataOut: cpsr r0 r2 r3 r6 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000D01:
	branch Z l00000D05
// DataOut: cpsr r0 r2 r3 r6 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000D05:
	branch Z l00000D09
// DataOut: cpsr r0 r2 r3 r6 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000D05_1:
	Mem69[r6 - (r6 >> 26):byte] = (byte) r0
// DataOut: cpsr r0 r2 r3 r6 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000D09:
	branch V l00000D0D
// DataOut: cpsr r0 r2 r3 r6 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000D09_1:
	r3 = ~0x0F000000
	byte NZCV_65 = cond(r3)
	r3_r2 = SEQ(r3, r2) (alias)
	Z = NZCV_65 (alias)
	V = NZCV_65 (alias)
	C = NZCV_65 (alias)
// DataOut: cpsr r0 r2 r3 r6 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000D0D:
	branch C l00000D11
// DataOut: cpsr r0 r2 r3 r6 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r3:~0x0F000000

l00000D0D_1:
	__msr(spsr, 0x00000B68)
// DataOut: cpsr r0 r2 r3 r6 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r3:~0x0F000000

l00000D11:
	branch V l00000D15
// DataOut: cpsr r0 r2 r3 r6 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r3:~0x0F000000

l00000D11_1:
	__msr(cpsr, 0x000001B9)
// DataOut: cpsr r0 r2 r3 r6 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r3:~0x0F000000

l00000D15:
	branch V l00000D19
// DataOut: cpsr r0 r2 r3 r6 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r3:~0x0F000000

l00000D15_1:
// DataOut: cpsr r0 r2 r3 r6 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r3:~0x0F000000

l00000D19:
	branch Z l00000D1D
// DataOut: cpsr r0 r2 r3 r6 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid>

l00000D19_1:
// DataOut: cpsr r2 r3 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid>

l00000D1D:
	branch Z l00000D21
// DataOut: cpsr r2 r3 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid>

l00000D21:
	branch V l00000D25
// DataOut: cpsr r2 r3 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid>

l00000D21_1:
	word32 r2_50 = ~0x000F0000
	byte NZCV_52 = cond(r2_50)
	r3_r2 = SEQ(r3, r2_50) (alias)
	Z = NZCV_52 (alias)
	V = NZCV_52 (alias)
// DataOut: cpsr r2 r3 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid>

l00000D25:
	branch Z l00000D29
// DataOut: cpsr r2 r3 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000

l00000D29:
	branch V l00000D2D
// DataOut: cpsr r2 r3 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000

l00000D29_1:
// DataOut: cpsr r2 r3 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000

l00000D2D:
	branch Z l00000D2D_then
	word32 sp_27
	byte Z_28
	word32 r0_29
	word32 r6_30
	byte V_31
	word32 r3_32
	byte NZCV_33
	byte C_34
	word32 spsr_35
	word32 cpsr_36
	word32 r8_37
	word32 fp_38
	word32 r9_39
	word32 r2_40
	word32 r5_41
	call fn0079B6D5 (retsize: 0;)
		uses: C_23,fp_19,NZCV_24,r2_22,r3_11,r8_15,r9_18,sp_1,V_25,Z_26
		defs: C_34,cpsr_36,fp_38,NZCV_33,r0_29,r2_40,r3_32,r5_41,r6_30,r8_37,r9_39,sp_27,spsr_35,V_31,Z_28
	return
// DataOut: cpsr r2 r3 r6 r8
// DataOut (flags): CV
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000 r5:0x0B100000

l00000D2D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000 r5:0x0B100000

l00000D31:
	branch V_31 l00000D35
// DataOut: cpsr r2 r3 r6 r8
// DataOut (flags): CV
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000 r5:0x0B100000

l00000D31_1:
	__msr(cpsr_36, 0x00000066)
// DataOut: cpsr r2 r3 r6 r8
// DataOut (flags): CV
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000 r5:0x0B100000

l00000D35:
	branch V_31 l00000D39
// DataOut: cpsr r2 r3 r6 r8
// DataOut (flags): CV
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000 r5:0x0B100000

l00000D35_1:
// DataOut: cpsr r2 r3 r6
// DataOut (flags): CV
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000 r5:0x0B100000

l00000D39:
	branch C_34 l00000D3D
// DataOut: cpsr r2 r3 r6
// DataOut (flags): V
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000 r5:0x0B100000

l00000D3D:
	branch V_31 l00000D41
// DataOut: cpsr r2 r3 r6
// DataOut (flags): V
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000 r5:0x0B100000

l00000D3D_1:
	Mem44[r6_30:word64] = r3_r2
// DataOut: cpsr
// DataOut (flags): V
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000 r5:0x0B100000

l00000D41:
	branch V_31 l00000D45
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000 r5:0x0B100000 r6:r6 - 140

l00000D41_1:
	__msr(cpsr_36, 0x000000BD)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000 r5:0x0B100000 r6:r6 - 140

l00000D45:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000 r5:0x0B100000 r6:r6 - 140

ulTaskNotifyTake_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000 r5:0x0B100000 r6:r6 - 140

l00000D39_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000 r5:0x0B100000

l00000D25_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid> r2:~0x000F0000

l00000D1D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x0F000000 r8:<invalid> r9:r9 + r0 fp:<invalid>

l00000D01_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xTaskIncrementTick(word32 r0, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 cpsr, word32 spsr, word64 d31, word64 d30)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip lr r0 r1 r10 r2 r3 r4 r7 r8 r9
// Preserved: sp
xTaskIncrementTick_entry:
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000D6D:
	branch C l00000D71
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000D71:
	branch ZC l00000D75
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000D75:
	branch N l00000D79
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000D79:
	branch ZC l00000D7D
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000D79_1:
	r8 = r8 + 65
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000D7D:
	branch NZV l00000D81
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 + 65

l00000D7D_1:
	r7 = r7 + 368
	r0 = Mem0[r7:word32]
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 + 65

l00000D81:
	branch ZC l00000D85
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 + 65 r7:r7 + 368 r0:<invalid>

l00000D85:
	branch C l00000D89
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 + 65 r7:r7 + 368 r0:<invalid>

l00000D85_1:
	lr = 0xE4000002 - lr
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 + 65 r7:r7 + 368 r0:<invalid>

l00000D89:
	branch C l00000D8D
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 + 65 r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr

l00000D89_1:
	__msr(spsr, 0x0000026F)
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 + 65 r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr

l00000D8D:
	branch ZC l00000D91
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 + 65 r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr

l00000D8D_1:
	r8 = r8 + 1127
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 + 65 r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr

l00000D91:
	branch NZV l00000D95
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr

l00000D91_1:
	r3 = r3 + 304
	r0 = Mem0[r3:word32]
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr

l00000D95:
	byte NZCV_20 = cond(r0 ^ 0xF8000000)
	byte C_123 = NZCV_20
	byte N_121 = NZCV_20
	byte ZC_122 = NZCV_20
	byte NZV_120 = NZCV_20
	byte Z_118 = NZCV_20
	byte NZV_117 = NZCV_20
	byte V_116 = NZCV_20
	branch (r0 ^ 0xF8000000) != 0x00000000 l00000D9D
// DataOut: cpsr d30 d31 fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304

l00000D99_1:
	word32 r1_513 = __ror(lr, 22) - r8
// DataOut: cpsr d30 d31 fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304

l00000D9D:
	branch (r0 ^ 0xF8000000) >= 0x00000000 l00000DA1
// DataOut: cpsr d30 d31 fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid>

l00000D9D_1:
	__syscall(0x00D1522B)
// DataOut: cpsr d30 d31 fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid>

l00000DA1:
	branch (r0 ^ 0xF8000000) <= 0x00000000 l00000DA5
// DataOut: cpsr d30 d31 fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid>

l00000DA5:
	word32 r0_108
	r0_108 = r0
	branch (r0 ^ 0xF8000000) > 0x00000000 l00000DA9
// DataOut: cpsr d30 d31 fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid>

l00000DA5_1:
	r0_108 = r0 + 1272
	r8 = Mem0[r0:word32]
// DataOut: cpsr d30 d31 fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid>

l00000DA9:
	branch (r0 ^ 0xF8000000) != 0x00000000 l00000DAD
// DataOut: cpsr d30 d31 fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid>

l00000DA9_1:
	r0_108 = r0_108 + 72
	r8 = (word32) Mem0[r0_108:int16]
// DataOut: cpsr d30 d31 fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid>

l00000DAD:
	branch (r0 ^ 0xF8000000) >=u 0x00000000 l00000DB1
// DataOut: cpsr d30 d31 fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid>

l00000DAD_1:
	r9 = r2 - (r6 >> 30)
// DataOut: cpsr d30 d31 fp ip pc r0 r10 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid>

l00000DB1:
	branch (r0 ^ 0xF8000000) != 0x00000000 l00000DB5
// DataOut: cpsr d30 d31 fp ip pc r0 r10 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30)

l00000DB1_1:
	r0_108 = r0_108 + 243
// DataOut: cpsr d30 d31 fp ip pc r0 r10 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30)

l00000DB5:
	branch (r0 ^ 0xF8000000) >= 0x00000000 l00000DB9
// DataOut: cpsr d30 d31 fp ip pc r0 r10 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid>

l00000DB5_1:
	byte NZCV_495 = cond((r9 << 30) - r8 - ((r0 ^ 0xF8000000) <u 0x00000000))
	C_123 = NZCV_495 (alias)
	N_121 = NZCV_495 (alias)
	ZC_122 = NZCV_495 (alias)
	NZV_120 = NZCV_495 (alias)
	Z_118 = NZCV_495 (alias)
	NZV_117 = NZCV_495 (alias)
	V_116 = NZCV_495 (alias)
// DataOut: cpsr d30 d31 fp ip pc r0 r10 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid>

l00000DB9:
	word32 r2_125 = ~0x00000002
	branch NZV_117 l00000DC1
// DataOut: cpsr d30 d31 fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid>

l00000DBD_1:
	Mem490[r8 + -24:word64] = d29
	Mem491[r8 + -16:word64] = d30
	Mem492[r8 + -8:word64] = d31
	r8 = r8 - 24
// DataOut: cpsr fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002

l00000DC1:
	branch Z_118 l00000DC5
// DataOut: cpsr fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002

l00000DC1_1:
	Mem489[r10 - 2920:byte] = (byte) r6
	r10 = r10 - 2920
// DataOut: cpsr fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002

l00000DC5:
	branch ZC_122 l00000DC9
// DataOut: cpsr fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920

l00000DC5_1:
	__syscall(0x000A24F1)
// DataOut: cpsr fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920

l00000DC9:
	branch N_121 l00000DCD
// DataOut: cpsr fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920

l00000DC9_1:
	byte NZCV_479 = cond(r3 - (r2_125 >> 16) - C_123)
	C_123 = NZCV_479 (alias)
	N_121 = NZCV_479 (alias)
	ZC_122 = NZCV_479 (alias)
	NZV_120 = NZCV_479 (alias)
	Z_118 = NZCV_479 (alias)
	NZV_117 = NZCV_479 (alias)
	V_116 = NZCV_479 (alias)
// DataOut: cpsr fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920

l00000DCD:
	branch NZV_117 l00000DD1
// DataOut: cpsr fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920

l00000DCD_1:
	r0_108 = (word32) Mem0[r0_108 + r6:byte]
// DataOut: cpsr fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920

l00000DD1:
	branch Z_118 l00000DD5
// DataOut: cpsr fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920

l00000DD1_1:
	Mem475[ip - 3066:byte] = (byte) r10
	ip = ip - 3066
// DataOut: cpsr fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920

l00000DD5:
	branch Z_118 l00000DD9
// DataOut: cpsr fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DD5_1:
	word32 sp_444
	word32 lr_452
	byte NZCV_455
	word32 r1_457
	word32 r4_463
	word64 d29_464
	word64 d30_465
	word64 d31_466
	byte NZC_473
	call fn0000F1A1 (retsize: 0;)
		uses: C_137,cpsr,d29,d30,d31,fp,ip_139,lr_14,N_135,NZC_128,NZCV_133,NZV_131,NZV_134,pc,r0_138,r1_30,r10_127,r2_125,r3_18,r4_130,r5,r6,r7_11,r8_126,r9_112,sp_124,spsr,V_129,Z_132,ZC_136
		defs: C_445,cpsr_472,d29_464,d30_465,d31_466,fp_469,ip_468,lr_452,N_447,NZC_473,NZCV_455,NZV_449,NZV_459,pc_458,r0_450,r1_457,r10_467,r2_461,r3_454,r4_463,r5_471,r6_462,r7_451,r8_448,r9_460,sp_444,spsr_453,V_470,Z_456,ZC_446
// DataOut: cpsr fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DD9:
	branch NZV_117 l00000DDD
// DataOut: cpsr fp ip pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DDD:
	word32 lr_170 = 0x00FA0000 - ip
	branch Z_118 l00000DE5
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DE1_1:
	r0_108 = 0x00000DE9 - r10 - C_123
	byte NZCV_435 = cond(r0_108)
	C_123 = NZCV_435 (alias)
	N_121 = NZCV_435 (alias)
	ZC_122 = NZCV_435 (alias)
	NZV_120 = NZCV_435 (alias)
	Z_118 = NZCV_435 (alias)
	NZV_117 = NZCV_435 (alias)
	V_116 = NZCV_435 (alias)
// DataOut: cpsr fp ip lr pc r0 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DE5:
	branch ZC_122 l00000DE9
// DataOut: cpsr fp ip lr pc r0 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DE9:
	branch N_121 l00000DED
// DataOut: cpsr fp ip lr pc r0 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DED:
	branch ZC_122 l00000DF1
// DataOut: cpsr fp ip lr pc r0 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DED_1:
	r0_108 = (r6 >> 16) - fp - C_123
// DataOut: cpsr fp ip lr pc r0 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DF1:
	branch Z_118 l00000DF5
// DataOut: cpsr fp ip lr pc r0 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DF1_1:
	r7 = r7 - (r0_108 << 6)
	Mem432[r7:byte] = (byte) lr_170
// DataOut: cpsr fp ip lr pc r0 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DF5:
	branch V_116 l00000DF9
// DataOut: cpsr fp ip lr pc r0 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DF5_1:
	r7 = ~0x0000F000
	byte NZCV_422 = cond(r7)
	C_123 = NZCV_422 (alias)
	N_121 = NZCV_422 (alias)
	ZC_122 = NZCV_422 (alias)
	NZV_120 = NZCV_422 (alias)
	Z_118 = NZCV_422 (alias)
	NZV_117 = NZCV_422 (alias)
	V_116 = NZCV_422 (alias)
// DataOut: cpsr fp ip lr pc r0 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DF9:
	branch NZV_117 l00000DFD
// DataOut: cpsr fp ip lr pc r0 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DF9_1:
	word32 sp_391
	byte NZCV_402
	word32 r1_404
	word32 r4_410
	word64 d29_411
	word64 d30_412
	word64 d31_413
	word32 r10_414
	byte NZC_420
	call fn01B3B7A1 (retsize: 0;)
		uses: C_192,cpsr_141,d29_149,d30_148,d31_147,fp_144,ip_145,lr_170,N_190,NZC_183,NZCV_187,NZV_185,NZV_189,pc_155,r0_181,r1_156,r10_146,r2_152,r3_159,r4_150,r5_142,r6_151,r7_188,r8_165,r9_153,sp_169,spsr_160,V_184,Z_186,ZC_191
		defs: C_392,cpsr_419,d29_411,d30_412,d31_413,fp_416,ip_415,lr_399,N_394,NZC_420,NZCV_402,NZV_396,NZV_406,pc_405,r0_397,r1_404,r10_414,r2_408,r3_401,r4_410,r5_418,r6_409,r7_398,r8_395,r9_407,sp_391,spsr_400,V_417,Z_403,ZC_393
// DataOut: cpsr fp ip lr pc r0 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DFD:
	branch C_123 l00000E01
// DataOut: cpsr fp ip lr pc r0 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DFD_1:
	Mem383[r2_125:word32] = r2_125
	Mem384[r2_125 + 4:word32] = r3
	Mem385[r2_125 + 8:word32] = r5
	Mem386[r2_125 + 12:word32] = r6
	Mem387[r2_125 + 16:word32] = r9
	Mem388[r2_125 + 20:word32] = fp
	Mem389[r2_125 + 24:word32] = ip
	Mem390[r2_125 + 28:word32] = pc
// DataOut: cpsr fp lr pc r0 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000E01:
	__msr(cpsr, 0x000001BF)
	branch Z_118 l00000E09
// DataOut: fp lr pc r0 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000E05_1:
	word32 r1_382 = __ror(lr_170, 22) - r8
// DataOut: fp pc r0 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000E09:
	branch N_121 l00000E0D
// DataOut: fp pc r0 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000E09_1:
	__syscall(0x00D1D72B)
// DataOut: fp pc r0 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000E0D:
	branch NZV_120 l00000E11
// DataOut: fp pc r0 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000E11:
	branch V_116 l00000E15
// DataOut: fp pc r0 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000E11_1:
	byte NZCV_373 = cond(r0_108 ^ 0xF8000000)
	C_123 = NZCV_373 (alias)
	ZC_122 = NZCV_373 (alias)
	NZV_120 = NZCV_373 (alias)
	Z_118 = NZCV_373 (alias)
	NZV_117 = NZCV_373 (alias)
// DataOut: fp pc r0 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000E15:
	branch Z_118 l00000E19
// DataOut: fp pc r0 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000E15_1:
	__msr(spsr, 0x00000B68)
// DataOut: fp pc r0 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000E19:
	branch Z_118 l00000E1D
// DataOut: fp pc r0 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000E19_1:
	Mem371[r3:word32] = r8
	r3 = r3 - 1003
// DataOut: fp pc r0 r3 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000E1D:
	branch ZC_122 l00000E21
// DataOut: fp pc r0 r3 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000E1D_1:
	word32 sp_341
	byte ZC_343
	byte N_344
	word32 r8_345
	word32 lr_349
	word32 spsr_350
	byte NZCV_352
	word32 r1_354
	word32 r2_358
	word32 r4_360
	word64 d29_361
	word64 d30_362
	word64 d31_363
	word32 r10_364
	word32 ip_365
	byte V_367
	word32 cpsr_369
	byte NZC_370
	call fn000E1DD1 (retsize: 0;)
		uses: C_264,cpsr_194,d29_202,d30_201,d31_200,fp_197,ip_198,lr_214,N_262,NZC_256,NZCV_260,NZV_258,NZV_261,pc_208,r0_216,r1_223,r10_199,r2_205,r3_265,r4_203,r5_195,r6_204,r7_215,r8_218,r9_206,sp_222,spsr_213,V_257,Z_259,ZC_263
		defs: C_342,cpsr_369,d29_361,d30_362,d31_363,fp_366,ip_365,lr_349,N_344,NZC_370,NZCV_352,NZV_346,NZV_356,pc_355,r0_347,r1_354,r10_364,r2_358,r3_351,r4_360,r5_368,r6_359,r7_348,r8_345,r9_357,sp_341,spsr_350,V_367,Z_353,ZC_343
// DataOut: fp pc r0 r3 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000E21:
	branch C_123 l00000E25
// DataOut: fp pc r0 r3 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000E21_1:
	Mem336[fp + -12:word32] = r3
	Mem337[fp + -8:word32] = r5
	Mem338[fp + -4:word32] = r6
	Mem339[fp:word32] = r9
	fp = fp - 16
// DataOut: fp pc r0 r3 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000E25:
	branch NZV_117 l00000E29
// DataOut: fp pc r0 r3 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066 fp:fp - 16

l00000E25_1:
	Mem334[r6:word32] = r0_108
// DataOut: fp pc r0 r3 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066 fp:fp - 16

l00000E29:
	branch Z_118 l00000E2D
// DataOut: fp pc r0 r3 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066 fp:fp - 16 r6:r6 - 447

l00000E29_1:
// DataOut: fp pc r0 r3 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066 fp:fp - 16 r6:r6 - 447

l00000E2D:
	branch Z_118 l00000E31
// DataOut: fp pc r0 r3 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:<invalid> r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066 fp:fp - 16 r6:r6 - 447

l00000E2D_1:
	byte NZC_323 = cond(fp >> 16)
	NZV_120 = NZC_323 (alias)
	Z_118 = NZC_323 (alias)
	NZV_117 = NZC_323 (alias)
// DataOut: pc r0 r3 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:<invalid> r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066 fp:fp - 16 r6:r6 - 447

l00000E31:
	branch NZV_117 l00000E35
// DataOut: pc r0 r3 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:<invalid> r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066 fp:fp - 16 r6:r6 - 447

l00000E35:
	branch NZV_117 l00000E39
// DataOut: pc r0 r3 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:<invalid> r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066 fp:fp - 16 r6:r6 - 447

l00000E35_1:
	Mem320[r7:word32] = pc
// DataOut: r0 r3
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:<invalid> r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066 fp:fp - 16 r6:r6 - 447

l00000E39:
	branch Z_118 l00000E3D
// DataOut: r0 r3
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:<invalid> r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066 fp:fp - 16 r6:r6 - 447

l00000E39_1:
// DataOut: r3
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:<invalid> r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066 fp:fp - 16 r6:r6 - 447

l00000E3D:
	branch NZV_120 l00000E41
// DataOut: r3
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:<invalid> r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066 fp:fp - 16 r6:r6 - 447

l00000E3D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:<invalid> r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066 fp:fp - 16 r6:r6 - 447

l00000E41:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:<invalid> r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066 fp:fp - 16 r6:r6 - 447

l00000E31_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:<invalid> r1:<invalid> r9:<invalid> r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066 fp:fp - 16 r6:r6 - 447

l00000E0D_1:
	word32 sp_226
	byte C_227
	byte ZC_228
	byte N_229
	word32 r8_230
	byte NZV_231
	word32 r0_232
	word32 r7_233
	word32 lr_234
	word32 spsr_235
	word32 r3_236
	byte NZCV_237
	byte Z_238
	word32 r1_239
	word32 pc_240
	byte NZV_241
	word32 r9_242
	word32 r2_243
	word32 r6_244
	word32 r4_245
	word64 d29_246
	word64 d30_247
	word64 d31_248
	word32 r10_249
	word32 ip_250
	word32 fp_251
	byte V_252
	word32 r5_253
	word32 cpsr_254
	byte NZC_255
	call Mem0[r3:word32] (retsize: 0;)
		uses: C_221,cpsr_194,d29_202,d30_201,d31_200,fp_197,ip_198,lr_214,N_219,NZC_193,NZCV_211,NZV_207,NZV_217,pc_208,r0_216,r1_223,r10_199,r2_205,r3_225,r4_203,r5_195,r6_204,r7_215,r8_218,r9_206,sp_222,spsr_213,V_196,Z_210,ZC_220
		defs: C_227,cpsr_254,d29_246,d30_247,d31_248,fp_251,ip_250,lr_234,N_229,NZC_255,NZCV_237,NZV_231,NZV_241,pc_240,r0_232,r1_239,r10_249,r2_243,r3_236,r4_245,r5_253,r6_244,r7_233,r8_230,r9_242,sp_226,spsr_235,V_252,Z_238,ZC_228
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r7:<invalid> r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DE9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DE5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0x00FA0000 - (ip - 6132) r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DD9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000DA1_1:
	word32 sp_78
	byte C_79
	byte ZC_80
	byte N_81
	word32 r8_82
	byte NZV_83
	word32 r0_84
	word32 r7_85
	word32 lr_86
	word32 spsr_87
	word32 r3_88
	byte NZCV_89
	byte Z_90
	word32 r1_91
	word32 pc_92
	byte NZV_93
	word32 r9_94
	word32 r2_95
	word32 r6_96
	word32 r4_97
	word64 d29_98
	word64 d30_99
	word64 d31_100
	word32 r10_101
	word32 ip_102
	word32 fp_103
	byte V_104
	word32 r5_105
	word32 cpsr_106
	byte NZC_107
	call Mem0[r3:word32] (retsize: 0;)
		uses: C_21,cpsr,d29,d30,d31,fp,ip,lr_14,N_22,NZC_28,NZCV_20,NZV_24,NZV_26,pc,r0_19,r1_30,r10,r2,r3_63,r4,r5,r6,r7_11,r8_15,r9,sp_16,spsr,V_27,Z_25,ZC_23
		defs: C_79,cpsr_106,d29_98,d30_99,d31_100,fp_103,ip_102,lr_86,N_81,NZC_107,NZCV_89,NZV_83,NZV_93,pc_92,r0_84,r1_91,r10_101,r2_95,r3_88,r4_97,r5_105,r6_96,r7_85,r8_82,r9_94,sp_78,spsr_87,V_104,Z_90,ZC_80
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r7:r7 + 368 r0:<invalid> lr:0xE4000002 - lr r3:r3 + 304 r1:<invalid>

xTaskIncrementTick_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> r7:<invalid> r0:<invalid> lr:<invalid> r3:r3 + 4688 r1:<invalid> r9:r2 - (r6 >> 30) r4:<invalid> r2:~0x00000002 r10:r10 - 2920 ip:ip - 3066

l00000D81_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 + 65 r7:r7 + 368 r0:<invalid>

l00000D75_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000D71_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000D6D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xTaskResumeAll(word32 r0, word32 r1, word32 r6, word32 fp, word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip r0 r1 r6
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xTaskResumeAll_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

xTaskResumeAll_entry:
// DataOut: fp ip r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000E6D:
	branch C l00000E71
// DataOut: fp ip r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000E6D_1:
// DataOut: fp ip r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000E71:
	branch ZC l00000E75
// DataOut: fp ip r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16)

l00000E71_1:
	r0 = ~(ip >> 14)
	byte NZCV_85 = cond(r0)
	C = NZCV_85 (alias)
	ZC = NZCV_85 (alias)
	NZV = NZCV_85 (alias)
	NZV = NZCV_85 (alias)
	Z = NZCV_85 (alias)
	N = NZCV_85 (alias)
// DataOut: fp r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16)

l00000E75:
	branch ZC l00000E79
// DataOut: fp r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:~(ip >> 14)

l00000E79:
	branch NZV l00000E7D
// DataOut: fp r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:~(ip >> 14)

l00000E79_1:
	r0 = Mem0[fp:word32]
// DataOut: r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:~(ip >> 14)

l00000E7D:
	branch NZV l00000E81
// DataOut: r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304

l00000E7D_1:
	r0 = r0 + 3320
// DataOut: r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304

l00000E81:
	branch Z l00000E85
// DataOut: r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid>

l00000E85:
	branch C l00000E89
// DataOut: r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid>

l00000E85_1:
// DataOut: r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid>

l00000E89:
	branch N l00000E8D
// DataOut: r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0

l00000E89_1:
	word32 sp_60
	word32 pc_62
	byte ZC_63
	word32 ip_65
	byte NZCV_66
	byte NZV_67
	word32 fp_68
	word32 r8_70
	word32 r4_72
	word32 r1_73
	word32 s15_76
	call fn00AC1031 (retsize: 0;)
		uses: C_18,fp_21,ip,N_12,NZCV_16,NZV_14,NZV_15,pc_4,r0_25,r1,r4_27,r6,r8_24,s15,sp_1,Z_13,ZC_17
		defs: C_61,fp_68,ip_65,N_74,NZCV_66,NZV_67,NZV_69,pc_62,r0_64,r1_73,r4_72,r6_75,r8_70,s15_76,sp_60,Z_71,ZC_63
// DataOut: r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0

l00000E8D:
	branch Z l00000E91
// DataOut: r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0

l00000E8D_1:
	Mem58[r6:word32] = r0
// DataOut: r1
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0

l00000E91:
	branch Z l00000E95
// DataOut: r1
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0 r6:r6 - 464

l00000E91_1:
// DataOut: r1
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0 r6:r6 - 464

l00000E95:
	branch NZV l00000E99
// DataOut: r1
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0 r6:r6 - 464 s15:<invalid>

l00000E99:
	branch C l00000E9D
// DataOut: r1
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0 r6:r6 - 464 s15:<invalid>

l00000E99_1:
// DataOut:
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0 r6:r6 - 464 s15:<invalid>

l00000E9D:
	branch C l00000EA1
// DataOut:
// DataOut (flags): NZ
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0 r6:r6 - 464 s15:<invalid> r1:r1 + 1384

l00000EA1:
	branch N l00000EA5
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0 r6:r6 - 464 s15:<invalid> r1:r1 + 1384

l00000EA5:
	branch Z l00000EA9
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0 r6:r6 - 464 s15:<invalid> r1:r1 + 1384

l00000EA9:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0 r6:r6 - 464 s15:<invalid> r1:r1 + 1384

l00000EA5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0 r6:r6 - 464 s15:<invalid> r1:r1 + 1384

l00000EA1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0 r6:r6 - 464 s15:<invalid> r1:r1 + 1384

l00000E9D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0 r6:r6 - 464 s15:<invalid> r1:r1 + 1384

l00000E95_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid> r4:r1 & ~0x000002D0 r6:r6 - 464 s15:<invalid>

l00000E81_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:<invalid> fp:fp + 304 r8:<invalid>

l00000E75_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:DPB(pc, 0x10E9, 16) r0:~(ip >> 14)



void vTaskDelay(word32 r0, word32 r1, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 lr, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp lr pc r0 r1 r10 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: r0 r8
// Preserved: sp
vTaskDelay_entry:
// DataOut: fp lr pc r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000F49:
	branch N l00000F4D
// DataOut: fp lr pc r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000F49_1:
	__syscall(0x00B940B5)
// DataOut: fp lr pc r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000F4D:
	branch Z l00000F51
// DataOut: fp lr pc r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000F51:
	branch NZV l00000F55
// DataOut: fp lr pc r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000F51_1:
	__syscall(0x00601A4B)
// DataOut: fp lr pc r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000F55:
	branch NZV l00000F59
// DataOut: fp lr pc r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000F55_1:
	__syscall(0x008F4FF3)
// DataOut: fp lr pc r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000F59:
	branch Z l00000F5D
// DataOut: fp lr pc r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000F59_1:
	Mem35[pc:word32] = r0
	Mem38[pc + 4:word32] = r1
	Mem40[pc + 8:word32] = r4
	Mem42[pc + 12:word32] = r5
	Mem44[pc + 16:word32] = r6
	Mem46[pc + 20:word32] = r7
	Mem47[pc + 24:word32] = r8
	Mem49[pc + 28:word32] = r9
	Mem50[pc + 32:word32] = r10
	Mem52[pc + 36:word32] = fp
	Mem53[pc + 40:word32] = fp
	Mem55[pc + 44:word32] = lr
// DataOut: r0 r10 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000F5D:
	branch NZV l00000F61
// DataOut: r0 r10 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000F5D_1:
// DataOut: r0 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00000F61:
	branch Z l00000F65
// DataOut: r0 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:r10 - 0x02F40000

l00000F61_1:
// DataOut:
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:r10 - 0x02F40000

l00000F65:
	branch ZC l00000F69
// DataOut:
// DataOut (flags): V
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid>

l00000F69:
	branch V l00000F6D
// DataOut:
// DataOut (flags): V
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid>

l00000F6D:
	branch V l00000F71
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid>

l00000F71:
	word32 sp_12
	byte N_13
	byte Z_14
	byte NZV_15
	word32 pc_16
	word32 r0_17
	word32 r1_18
	word32 r4_19
	word32 r5_20
	word32 r6_21
	word32 r7_22
	word32 r8_23
	word32 r9_24
	word32 r10_25
	word32 fp_26
	word32 lr_27
	byte ZC_28
	byte V_29
	call fn00A01375 (retsize: 0;)
		uses: N,NZV,r0_9,r8_8,sp_1,V,Z,ZC
		defs: fp_26,lr_27,N_13,NZV_15,pc_16,r0_17,r1_18,r10_25,r4_19,r5_20,r6_21,r7_22,r8_23,r9_24,sp_12,V_29,Z_14,ZC_28
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid>

vTaskDelay_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid>

l00000F6D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid>

l00000F69_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid>

l00000F65_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid>

l00000F4D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vTaskDelayUntil(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr, word32 s4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 s4 spsr
// LiveOut:
// Trashed: NZCV lr pc r0 r1 r4 r5 r6 r8 s19
// Preserved: sp
vTaskDelayUntil_entry:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000F81:
	branch NZV l00000F85
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000F81_1:
	byte NZCV_204 = cond(r5 + 0x0000004A + C)
	NZV = NZCV_204 (alias)
	Z = NZCV_204 (alias)
	NZV = NZCV_204 (alias)
	ZC = NZCV_204 (alias)
	NV = NZCV_204 (alias)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000F85:
	branch Z l00000F89
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid>
// LocalsOut: fp(32)

l00000F85_1:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid>
// LocalsOut: fp(32)

l00000F89:
	branch NZV l00000F8D
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:DPB(r8, 0x0CF8, 16)
// LocalsOut: fp(32)

l00000F89_1:
	byte NZC_193 = cond(r4 ^ 0x0000001A)
	r0 = r4 ^ 0x0000001A
	NZV = NZC_193 (alias)
	Z = NZC_193 (alias)
	ZC = NZC_193 (alias)
	NV = NZC_193 (alias)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:DPB(r8, 0x0CF8, 16)
// LocalsOut: fp(32)

l00000F8D:
	branch NZV l00000F91
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:DPB(r8, 0x0CF8, 16) r0:r4 ^ 0x0000001A
// LocalsOut: fp(32)

l00000F8D_1:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:DPB(r8, 0x0CF8, 16) r0:r4 ^ 0x0000001A
// LocalsOut: fp(32)

l00000F91:
	branch Z l00000F95
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:r4 ^ 0x0000001A
// LocalsOut: fp(32)

l00000F91_1:
	Mem181[r0 + -24:word32] = r3
	Mem183[r0 + -20:word32] = r4
	Mem185[r0 + -16:word32] = r5
	Mem186[r0 + -12:word32] = r6
	Mem188[r0 + -8:word32] = r7
	Mem189[r0 + -4:word32] = pc
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:r4 ^ 0x0000001A
// LocalsOut: fp(32)

l00000F95:
	branch Z l00000F99
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 s4 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid>
// LocalsOut: fp(32)

l00000F95_1:
	__vmls_f32(s4, s8)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid>
// LocalsOut: fp(32)

l00000F99:
	branch Z l00000F9D
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid>
// LocalsOut: fp(32)

l00000F9D:
	__syscall(0x006001D8)
	branch NV l00000FA5
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid>
// LocalsOut: fp(32)

l00000FA1_1:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid>
// LocalsOut: fp(32)

l00000FA5:
	branch ZC l00000FA9
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:pc + 71 r6:<invalid>
// LocalsOut: fp(32)

l00000FA5_1:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:pc + 71 r6:<invalid>
// LocalsOut: fp(32)

l00000FA9:
	branch Z l00000FA9_then
	word32 sp_45
	byte NZV_46
	word32 r1_47
	word32 r5_48
	bool C_49
	byte NZCV_50
	byte Z_51
	word32 r8_52
	byte NZV_53
	word32 r0_54
	word32 r4_55
	byte NZC_56
	word32 r3_57
	word32 r6_58
	word32 r7_59
	word32 pc_60
	word32 s4_61
	word32 s8_62
	word32 s19_63
	byte NV_64
	byte N_66
	byte V_67
	word32 lr_68
	word32 r2_69
	word32 r9_70
	word32 fp_71
	word32 ip_72
	word32 spsr_73
	byte ZC_162
	call fn012C3CF9 (retsize: 0;)
		uses: C_28,N_35,NV_34,NZC_33,NZCV_27,NZV_29,NZV_31,pc_44,r0_38,r1_13,r6_43,r8_37,s19_40,sp_1,V_20,Z_30,ZC_32
		defs: C_49,fp_71,ip_72,lr_68,N_66,NV_64,NZC_56,NZCV_50,NZV_46,NZV_53,pc_60,r0_54,r1_47,r2_69,r3_57,r4_55,r5_48,r6_58,r7_59,r8_52,r9_70,s19_63,s4_61,s8_62,sp_45,spsr_73,V_67,Z_51,ZC_65
	return
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:pc + 71 r6:<invalid> r4:<invalid>
// LocalsOut: fp(32)

l00000FA9_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:pc + 71 r6:<invalid> r4:<invalid>

l00000FAD:
	branch N_66 l00000FB1
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:pc + 71 r6:<invalid> r4:<invalid>
// LocalsOut: fp(32)

l00000FAD_1:
	__syscall(0x00F3BF60)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:pc + 71 r6:<invalid> r4:<invalid>
// LocalsOut: fp(32)

l00000FB1:
	branch V_67 l00000FB5
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:pc + 71 r6:<invalid> r4:<invalid>
// LocalsOut: fp(32)

l00000FB1_1:
	__syscall(0x00F3BF8F)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:pc + 71 r6:<invalid> r4:<invalid>
// LocalsOut: fp(32)

l00000FB5:
	branch ZC_162 l00000FB9
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:pc + 71 r6:<invalid> r4:<invalid>
// LocalsOut: fp(32)

l00000FB5_1:
	word32 sp_142
	byte NZV_143
	word32 r1_144
	word32 r5_145
	bool C_146
	byte NZCV_147
	byte Z_148
	word32 r8_149
	byte NZV_150
	word32 r0_151
	word32 r4_152
	byte NZC_153
	word32 r3_154
	word32 r6_155
	word32 r7_156
	word32 pc_157
	word32 s4_158
	word32 s8_159
	word32 s19_160
	byte NV_161
	byte N_163
	byte V_164
	word32 lr_165
	word32 r2_166
	word32 r9_167
	word32 fp_168
	word32 ip_169
	word32 spsr_170
	call fnFEF451F9 (retsize: 0;)
		uses: C_49,fp_71,ip_72,lr_68,N_66,NV_64,NZC_56,NZCV_50,NZV_46,NZV_53,pc_60,r0_54,r1_47,r2_69,r3_57,r4_55,r5_48,r6_58,r7_59,r8_52,r9_70,s19_63,s4_61,s8_62,sp_45,spsr_73,V_67,Z_51,ZC_65
		defs: C_146,fp_168,ip_169,lr_165,N_163,NV_161,NZC_153,NZCV_147,NZV_143,NZV_150,pc_157,r0_151,r1_144,r2_166,r3_154,r4_152,r5_145,r6_155,r7_156,r8_149,r9_167,s19_160,s4_158,s8_159,sp_142,spsr_170,V_164,Z_148,ZC_162
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:pc + 71 r6:<invalid> r4:<invalid>
// LocalsOut: fp(32)

l00000FB9:
	branch ZC_162 l00000FB9_then
	word32 sp_75
	byte NZV_76
	word32 r1_77
	word32 r5_78
	byte NZCV_80
	word32 r8_82
	word32 r4_85
	byte NZC_86
	word32 r3_87
	word32 r6_88
	word32 r7_89
	word32 s4_91
	word32 s8_92
	word32 s19_93
	byte NV_94
	byte ZC_95
	byte N_96
	byte V_97
	word32 r2_99
	word32 r9_100
	word32 fp_101
	word32 ip_102
	word32 spsr_103
	word32 lr_104
	bool C_109
	byte Z_111
	byte NZV_112
	word32 pc_106
	word32 r0_119
	call fnFF6014C9 (retsize: 0;)
		uses: C_49,fp_71,ip_72,lr_68,N_66,NV_64,NZC_56,NZCV_50,NZV_46,NZV_53,pc_60,r0_54,r1_47,r2_69,r3_57,r4_55,r5_48,r6_58,r7_59,r8_52,r9_70,s19_63,s4_61,s8_62,sp_45,spsr_73,V_67,Z_51,ZC_74
		defs: C_79,fp_101,ip_102,lr_98,N_96,NV_94,NZC_86,NZCV_80,NZV_76,NZV_83,pc_90,r0_84,r1_77,r2_99,r3_87,r4_85,r5_78,r6_88,r7_89,r8_82,r9_100,s19_93,s4_91,s8_92,sp_75,spsr_103,V_97,Z_81,ZC_95
	return
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:pc + 71 r6:<invalid> r4:<invalid>
// LocalsOut: fp(32)

l00000FB9_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:pc + 71 r6:<invalid> r4:<invalid>

l00000FBD:
	branch Z_111 l00000FC1
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:pc + 71 r6:<invalid> r4:<invalid>
// LocalsOut: fp(32)

l00000FBD_1:
	lr_104 = r2_99 & ~(r2_99 >> 28)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:pc + 71 r6:<invalid> r4:<invalid>
// LocalsOut: fp(32)

l00000FC1:
	__syscall(0x001A8860)
	__syscall(0x00FC4AF7)
	branch Z_111 l00000FCD
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:pc + 71 r6:<invalid> r4:<invalid> lr:r2 & ~(r2 >> 28)
// LocalsOut: fp(32)

l00000FC9_1:
	pc_106 = pc_106 + 7
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:pc + 71 r6:<invalid> r4:<invalid> lr:r2 & ~(r2 >> 28)
// LocalsOut: fp(32)

l00000FCD:
	branch Z_111 l00000FD1
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:<invalid> r6:<invalid> r4:<invalid> lr:r2 & ~(r2 >> 28) r5:<invalid>
// LocalsOut: fp(32)

l00000FCD_1:
	lr_104 = r0_119 - (r8_82 >> 20) - C_109
	byte NZCV_128 = cond(lr_104)
	C_109 = (bool) NZCV_128 (alias)
	Z_111 = NZCV_128 (alias)
	NZV_112 = NZCV_128 (alias)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:<invalid> r6:<invalid> r4:<invalid> lr:r2 & ~(r2 >> 28) r5:<invalid>
// LocalsOut: fp(32)

l00000FD1:
	branch NZV_112 l00000FD5
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:<invalid> r6:<invalid> r4:<invalid> lr:<invalid> r5:<invalid>
// LocalsOut: fp(32)

l00000FD1_1:
	pc_106 = pc_106 + 189
	r0_119 = Mem0[0x00001096:word32]
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:<invalid> r6:<invalid> r4:<invalid> lr:<invalid> r5:<invalid>
// LocalsOut: fp(32)

l00000FD5:
	branch Z_111 l00000FD9
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:<invalid> r6:<invalid> r4:<invalid> lr:<invalid> r5:<invalid>
// LocalsOut: fp(32)

l00000FD5_1:
	Mem122[r0_119:word32] = r0_119
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:<invalid> r6:<invalid> r4:<invalid> lr:<invalid> r5:<invalid>
// LocalsOut: fp(32)

l00000FD9:
	branch Z_111 l00000FD9_thunk_vTaskPlaceOnEventList
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:<invalid> r6:<invalid> r4:<invalid> lr:<invalid> r5:<invalid>
// LocalsOut: fp(32)

l00000FD9_thunk_vTaskPlaceOnEventList:
	vTaskPlaceOnEventList(r0_119, r1_77, r2_99, r3_87, r4_85, r6_88, r7_89, r8_82, r9_100, fp_101, ip_102, lr_104, pc_106, spsr_103)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:<invalid> r6:<invalid> r4:<invalid> lr:<invalid> r5:<invalid>
// Terminates process

l00000FD9_1:
	word32 r0_121 = __ror(fp, 1) - r0_119 - C_109
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:<invalid> r6:<invalid> r4:<invalid> lr:<invalid> r5:<invalid>

l00000FD9_thunk_vTaskPlaceOnEventList:
	vTaskPlaceOnEventList(r0_121, r1_77, r2_99, r3_87, r4_85, r6_88, r7_89, r8_82, r9_100, fp_101, ip_102, lr_104, pc_106, spsr_103)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:<invalid> r6:<invalid> r4:<invalid> lr:<invalid> r5:<invalid>
// Terminates process

vTaskDelayUntil_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid> pc:<invalid> r6:<invalid> r4:<invalid> lr:<invalid> r5:<invalid>

l00000F99_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> s19:<invalid>



void vTaskPlaceOnEventList(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vTaskPlaceOnEventList_entry:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000FDD:
	branch Z l00000FE1
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000FDD_1:
	Mem56[r6:byte] = (byte) r0
	r6 = r6 - 3253
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00000FE1:
	branch C l00000FE5
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - 3253

l00000FE1_1:
	Mem44[r8:word32] = r0
	Mem45[r8 + 4:word32] = r1
	Mem47[r8 + 8:word32] = r3
	Mem48[r8 + 12:word32] = r6
	Mem49[r8 + 16:word32] = r8
	Mem50[r8 + 20:word32] = fp
	Mem52[r8 + 24:word32] = ip
	Mem54[r8 + 28:word32] = lr
// DataOut: fp pc r0 r1 r2 r4 r7 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - 3253

l00000FE5:
	branch ZC l00000FE9
// DataOut: fp pc r0 r1 r2 r4 r7 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - 3253 r8:r8 + 32

l00000FE5_1:
	r0 = ~(r1 >> r7)
	byte NZCV_38 = cond(r0)
	C = NZCV_38 (alias)
	NZV = NZCV_38 (alias)
	NZV = NZCV_38 (alias)
// DataOut: fp pc r0 r1 r2 r4 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - 3253 r8:r8 + 32

l00000FE9:
	branch NZV l00000FED
// DataOut: fp pc r0 r1 r2 r4 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r6:r6 - 3253 r8:r8 + 32 r0:~(r1 >> r7)

l00000FED:
	branch C l00000FF1
// DataOut: fp pc r0 r1 r2 r4 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r6:r6 - 3253 r8:r8 + 32 r0:~(r1 >> r7)

l00000FED_1:
	Mem34[r0:byte] = (byte) r1
	r0 = r0 - 232
// DataOut: fp pc r0 r2 r4 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r6:r6 - 3253 r8:r8 + 32 r0:~(r1 >> r7)

l00000FF1:
	branch NZV l00000FF5
// DataOut: fp pc r0 r2 r4 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r6:r6 - 3253 r8:r8 + 32 r0:<invalid>

l00000FF1_1:
	r0 = Mem0[0x000010DD:word32]
// DataOut: fp r0 r2 r4 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r6:r6 - 3253 r8:r8 + 32 r0:<invalid>

l00000FF5:
	branch C l00000FF5_thunk_vTaskPlaceOnUnorderedEventList
// DataOut: fp r0 r2 r4 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r6:r6 - 3253 r8:r8 + 32 r0:<invalid> pc:pc + 228

l00000FF5_thunk_vTaskPlaceOnUnorderedEventList:
	vTaskPlaceOnUnorderedEventList(r0, r2, r4, r9, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - 3253 r8:r8 + 32 r0:<invalid> pc:pc + 228
// Terminates process

vTaskPlaceOnEventList_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000FF5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - 3253 r8:r8 + 32 r0:<invalid> pc:pc + 228

l00000FE9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - 3253 r8:r8 + 32 r0:~(r1 >> r7)



void vTaskPlaceOnUnorderedEventList(word32 r0, word32 r2, word32 r4, word32 r9, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp r0 r2 r4 r9 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vTaskPlaceOnUnorderedEventList_entry:
// DataOut: fp r0 r2 r4 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l00000FF9:
	branch Z l00000FFD
// DataOut: fp r0 r2 r4 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l00000FFD:
	branch Z l00000FFD_thunk_fn00001001
// DataOut: fp r0 r2 r4 r9 spsr
// DataOut (flags): NC
// SymbolicIn: sp:fp

l00000FFD_thunk_fn00001001:
	fn00001001(r2, r4, r9, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l00000FFD_1:
	word32 r4_10 = (fp >> 2) - r0 - C
// DataOut: r2 r4 r9 spsr
// DataOut (flags): N
// SymbolicIn: sp:fp

l00000FFD_thunk_fn00001001:
	fn00001001(r2, r4_10, r9, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid>
// Terminates process

vTaskPlaceOnUnorderedEventList_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000FF9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00000FFF()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  N
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00000FFF:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000FFF_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000FFF_entry:
// DataOut:
// DataOut (flags): N
// SymbolicIn: sp:fp

l00000FFF:
	branch N l00001003
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00001001(word32 r2, word32 r4, word32 r9, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  N r2 r4 r9 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00001001:
// DataOut:
// DataOut (flags): NV
// SymbolicIn:

l00001003:
	branch Test(LT,NV) l00001007
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l00000FFF_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00001001_entry:
// DataOut: r2 r4 r9 spsr
// DataOut (flags): NZ
// SymbolicIn: sp:fp

l00001001:
	branch N l00001001_thunk_fn00001005
// DataOut: r2 r4 r9 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00001001_thunk_fn00001005:
	fn00001005(r2, r4, r9, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l00001001_1:
	word32 sp_15
	byte N_16
	byte NV_17
	word32 r2_18
	word32 r4_19
	word32 r9_20
	word32 spsr_21
	call fn01A1850D (retsize: 0;)
		uses: N,NV,r2,r4,r9,sp_1,spsr
		defs: N_16,NV_17,r2_18,r4_19,r9_20,sp_15,spsr_21
// DataOut: r2 r4 r9 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00001001_thunk_fn00001005:
	fn00001005(r2_18, r4_19, r9_20, spsr_21)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

fn00001001_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00001005(word32 r2, word32 r4, word32 r9, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z r2 r4 r9 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00001005:
// DataOut:
// DataOut (flags): C
// SymbolicIn:

l00001007:
	branch Test(UGE,C) l0000100B
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l00001003_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00001005_entry:
	def fp
	def Z
	def spsr
	def r2
	def r4
	def r9
// DataOut: r2 r4 r9 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00001005:
	sp_1 = fp
	branch Z l00001005_thunk_fn00001009
// DataOut: r2 r4 r9 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00001005_thunk_fn00001009:
	fn00001009(r2, r4, r9)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l00001005_1:
	__msr(spsr, 0x00000968)
// DataOut: r2 r4 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00001005_thunk_fn00001009:
	fn00001009(r2, r4, r9)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

fn00001005_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00001009(word32 r2, word32 r4, word32 r9)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z r2 r4 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00001009:
// DataOut:
// DataOut (flags): V
// SymbolicIn:

l0000100B:
	branch Test(OV,V) l0000100F
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l00001007_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00001009_entry:
	def fp
	def Z
	def r2
	def r4
	def r9
// DataOut: r2 r4 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001009:
	sp_1 = fp
	branch Z l00001009_thunk_fn0000100D
// DataOut: r2 r4 r9
// DataOut (flags): C
// SymbolicIn: sp:fp

l00001009_thunk_fn0000100D:
	fn0000100D(r2, r4, r9)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

fn00001009_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001009_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn0000100D(word32 r2, word32 r4, word32 r9)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C r2 r4 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l0000100D:
// DataOut: r0 r1
// DataOut (flags): NZCV
// SymbolicIn:

l0000100B_1:
	r0 = (r1 << 14) - r0 - C
	NZCV = cond(r0)
	C = NZCV (alias)
	NZV = NZCV (alias)
// DataOut:
// DataOut (flags): NZV
// SymbolicIn:

l0000100F:
	branch Test(GE,NZV) l00001013
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000100D_entry:
// DataOut: r2 r4 r9
// DataOut (flags): C
// SymbolicIn: sp:fp

l0000100D:
	sp = fp
	branch Test(ULT,C) l0000100D_thunk_fn00001011
// DataOut: r2 r4 r9
// DataOut (flags): C
// SymbolicIn: sp:fp

l0000100D_thunk_fn00001011:
	fn00001011(r2, r4)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l0000100D_1:
	v6 = (word32) Mem0[r9:int16]
	r9 = r9 + 0
	r7 = v6
// DataOut: r2 r4
// DataOut (flags): C
// SymbolicIn: sp:fp

l0000100D_thunk_fn00001011:
	fn00001011(r2, r4)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 r7:<invalid>
// Terminates process

fn0000100D_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00001011(word32 r2, word32 r4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C r2 r4
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00001011:
// DataOut:
// DataOut (flags): C
// SymbolicIn:

l00001013:
	branch Test(ULT,C) l00001017
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l0000100F_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00001011_entry:
// DataOut: r2 r4
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00001011:
	branch C l00001011_thunk_fn00001015
// DataOut: r2 r4
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00001011_thunk_fn00001015:
	fn00001015(r2, r4)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

fn00001011_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001011_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00001015(word32 r2, word32 r4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV r2 r4
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00001015:
// DataOut: r0 r3 r8
// DataOut (flags): Z
// SymbolicIn:

l00001013_1:
	r3_r0 = (int16) (r8 >> 16) *s (int16) (r8 >> 16) + r3_r0
// DataOut:
// DataOut (flags): Z
// SymbolicIn:

l00001017:
	branch Test(NE,Z) l0000101B
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00001015_entry:
// DataOut: r2 r4
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00001015:
	sp = fp
	branch Test(LE,NZV) l00001015_thunk_fn00001019
// DataOut: r2 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001015_thunk_fn00001019:
	fn00001019()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l00001015_1:
	Mem0[r4:byte] = (byte) r2
	r4 = r4 + 320
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001015_thunk_fn00001019:
	fn00001019()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 + 320
// Terminates process

fn00001015_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00001019()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00001019:
// DataOut: r0 r4
// DataOut (flags): NZCV
// SymbolicIn:

l00001017_1:
	ip = r0 & __ror(r4, 9)
// DataOut:
// DataOut (flags): NZCV
// SymbolicIn:

l0000101B:
	branch Test(LE,NZV) l0000101F
// DataOut:
// DataOut (flags): NZV
// SymbolicIn:

l0000101F:
	branch Test(GT,NZV) l00001023
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l0000101B_1:
	call fn00200000 (retsize: 0;)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00001019_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00001019_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001019:
	sp = fp
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xTaskRemoveFromEventList(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV lr r0 r3 r6 r8 r9
// Preserved: sp
xTaskRemoveFromEventList_entry:
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp

l0000101D:
	branch Z l0000101D_thunk_fn00001021
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp

l0000101D_thunk_fn00001021:
	fn00001021(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

xTaskRemoveFromEventList_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> r9:<invalid> lr:<invalid> r6:<invalid> r0:<invalid> r3:<invalid>

l0000101D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00001021(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV lr r0 r3 r6 r8 r9
// Preserved: sp
l00001021:
// DataOut:
// DataOut (flags): C
// SymbolicIn:

l00001023:
	branch Test(UGE,C) l00001027
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l0000101F_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00001021_entry:
	def fp
	def Z
	def r8
	def r0
	def r1
	def r2
	def r3
	def r4
	def r5
	def r6
	def r7
	def r9
	def fp
	def spsr
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp
// LocalsOut: fp(8)

l00001021:
	sp_1 = fp
	branch Z l00001021_thunk_fn00001025
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): C
// SymbolicIn: sp:fp
// LocalsOut: fp(8)

l00001021_thunk_fn00001025:
	fn00001025(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001021_1:
	r8_5 = r8 - 3404
	Mem6[r8_5:byte] = (byte) fp
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): C
// SymbolicIn: sp:fp

l00001021_thunk_fn00001025:
	fn00001025(r0, r1, r2, r3, r4, r5, r6, r7, r8_5, r9, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 3404

fn00001021_exit:
	r8_3 = PHI(r8, r8_5)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 3404 r9:<invalid> lr:<invalid> r6:<invalid> r0:<invalid> r3:<invalid>



void fn00001025(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV lr r0 r3 r6 r9
// Preserved: sp
l00001025:
// DataOut:
// DataOut (flags): Z
// SymbolicIn:

l00001027:
	branch Test(NE,Z) l0000102B
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l00001023_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00001025_entry:
	def fp
	def C
	def r0
	def r1
	def r2
	def r3
	def r4
	def r5
	def r6
	def r7
	def r8
	def r9
	def fp
	def spsr
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001025:
	sp_1 = fp
	branch C l00001025_thunk_fn00001029
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001025_thunk_fn00001029:
	fn00001029(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn00001025_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:<invalid> lr:<invalid> r6:<invalid> r0:<invalid> r3:<invalid>

l00001025_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00001029(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV lr r0 r3 r6 r9
// Preserved: sp
l00001029:
// DataOut: r3
// DataOut (flags): NZV
// SymbolicIn:

l00001027_1:
	Mem0[0x00000000:byte] = (byte) r3
// DataOut:
// DataOut (flags): NZV
// SymbolicIn:

l0000102B:
	branch Test(GT,NZV) l0000102F
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00001029_entry:
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001029:
	sp = fp
	branch Test(ULE,ZC) l00001029_thunk_fn0000102D
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001029_thunk_fn0000102D:
	fn0000102D(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn00001029_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:<invalid> lr:<invalid> r6:<invalid> r0:<invalid> r3:<invalid>

l00001029_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn0000102D(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV lr r0 r3 r6 r9
// Preserved: sp
l0000102D:
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn:

l0000102B_1:
	v5 = (word32) Mem0[r9:byte]
	r9 = r9 + 2544
	r8 = v5
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn:

l0000102F:
	call fn00C24417 (retsize: 0;)
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn:

l0000102F_thunk_fn00001031:
	fn00001031(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000102D_entry:
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l0000102D:
	sp = fp
	branch Test(ULE,ZC) l0000102D_thunk_fn00001031
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l0000102D_thunk_fn00001031:
	fn00001031(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0000102D_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:<invalid> lr:<invalid> r6:<invalid> r0:<invalid> r3:<invalid>

l0000102D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00001031(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV lr r0 r3 r6 r9
// Preserved: sp
l00001031:
	branch Test(ULT,C) l00001037
// DataOut: r1
// DataOut (flags): Z
// SymbolicIn:

l00001033_1:
	v10 = (word32) Mem0[r1:byte]
	r1 = r1 + 1465
	r0 = v10
// DataOut:
// DataOut (flags): Z
// SymbolicIn:

l00001037:
	branch Test(NE,Z) l0000103B
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00001031_entry:
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001031:
	sp = fp
	branch Test(NE,Z) l00001035
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001031_1:
	r9 = r9 + 2864
	lr = Mem0[r9:word32]
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001035:
	branch Test(UGE,C) l00001035_thunk_fn00001039
// DataOut: fp r0 r1 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r9:r9 + 2864 lr:<invalid>

l00001035_thunk_fn00001039:
	fn00001039(r0, r2, r3, r4, r5, r6, r7, r8, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 + 2864 lr:<invalid>

l00001035_1:
	Mem0[r6:word64] = r3_r2
	r6 = r6 - __ror(r1, 9)
// DataOut: fp r0 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r9:r9 + 2864 lr:<invalid>

l00001035_thunk_fn00001039:
	fn00001039(r0, r2, r3, r4, r5, r6, r7, r8, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 + 2864 lr:<invalid> r6:<invalid>

fn00001031_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 + 2864 lr:<invalid> r6:<invalid> r0:<invalid> r3:<invalid>



void fn00001039(word32 r0, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp r0 r2 r3 r4 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: sp
l00001039:
// DataOut: r3
// DataOut (flags): Z
// SymbolicIn:

l00001037_1:
	Mem0[0x00000000:byte] = (byte) r3
// DataOut:
// DataOut (flags): Z
// SymbolicIn:

l0000103B:
	branch Test(NE,Z) l0000103F
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00001039_entry:
// DataOut: fp r0 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001039:
	sp = fp
	branch Test(ULE,ZC) l00001039_thunk_fn0000103D
// DataOut: fp r0 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001039_thunk_fn0000103D:
	fn0000103D(r0, r2, r3, r4, r5, r6, r7, r8, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001039_1:
	r0 = ~(r6 >> 14)
	NZCV = cond(r0)
// DataOut: fp r0 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001039_thunk_fn0000103D:
	fn0000103D(r0, r2, r3, r4, r5, r6, r7, r8, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:~(r6 >> 14)

fn00001039_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r3:<invalid>



void fn0000103D(word32 r0, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fp r0 r2 r3 r4 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
l0000103D:
// DataOut: fp ip lr r2 r3 r6 spsr
// DataOut (flags): ZC
// SymbolicIn:

l0000103F:
	ip = ip - (r3 >> 16)
	Mem0[ip:byte] = (byte) lr
// DataOut: fp r2 r6 spsr
// DataOut (flags): ZC
// SymbolicIn:

l0000103F_thunk_fn00001041:
	fn00001041(r2, r6, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l0000103B_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000103D_entry:
	def fp
	def r0
	def r3
	def r4
	def r5
	def r6
	def r7
	def r8
	def r2
	def fp
	def spsr
// DataOut: fp r0 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l0000103D:
	sp_1 = fp
	Mem3[r3 + -24:word32] = r0
	Mem5[r3 + -20:word32] = r3
	Mem7[r3 + -16:word32] = r4
	Mem9[r3 + -12:word32] = r5
	Mem11[r3 + -8:word32] = r6
	Mem13[r3 + -4:word32] = r7
	Mem15[r3:word32] = r8
	r3_16 = r3 - 28
// DataOut: fp r2 r6 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l0000103D_thunk_fn00001041:
	fn00001041(r2, r6, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 - 28

fn0000103D_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 - 28 r0:<invalid>



void fn00001041(word32 r2, word32 r6, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp r2 r6 spsr
// LiveOut:
// Trashed: r0
// Preserved: sp
l00001041:
	branch Test(NE,Z) l00001047
// DataOut: r0 r8
// DataOut (flags): Z
// SymbolicIn:

l00001043_1:
	Mem0[r0:byte] = (byte) r8
	r0 = r0 - 879
// DataOut:
// DataOut (flags): Z
// SymbolicIn:

l00001047:
	branch Test(NE,Z) l0000104B
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00001041_entry:
// DataOut: fp r2 r6 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001041:
	sp = fp
	branch Test(ULE,ZC) l00001045
// DataOut: fp r2 r6 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001041_1:
	__msr(spsr, 0x0000076C)
// DataOut: fp r2 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001045:
	branch Test(NE,Z) l00001045_thunk_fn00001049
// DataOut: fp r2 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001045_thunk_fn00001049:
	fn00001049(r2, r6, fp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn00001041_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00001045_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00001049(word32 r2, word32 r6, word32 fp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp r2 r6
// LiveOut:
// Trashed: r0
// Preserved: sp
l00001049:
// DataOut: r0 r1 r2
// DataOut (flags): C
// SymbolicIn:

l00001047_1:
	Mem0[r2:word64] = r1_r0
	r2 = r2 - __ror(r1, 17)
// DataOut:
// DataOut (flags): C
// SymbolicIn:

l0000104B:
	branch Test(UGE,C) l0000104F
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00001049_entry:
// DataOut: fp r2 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001049:
	sp = fp
	branch Test(ULE,ZC) l00001049_thunk_fn0000104D
// DataOut: fp r2 r6
// DataOut (flags): C
// SymbolicIn: sp:fp

l00001049_thunk_fn0000104D:
	fn0000104D(r6, fp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001049_1:
	r0 = r2 - fp - C
// DataOut: fp r6
// DataOut (flags): C
// SymbolicIn: sp:fp

l00001049_thunk_fn0000104D:
	fn0000104D(r6, fp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

fn00001049_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void fn0000104D(word32 r6, word32 fp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C fp r6
// LiveOut:
// Trashed: r0
// Preserved: sp
l0000104D:
// DataOut:
// DataOut (flags): Z
// SymbolicIn:

l0000104B_1:
	call fn000213FF (retsize: 0;)
// DataOut:
// DataOut (flags): Z
// SymbolicIn:

l0000104F:
	branch Test(NE,Z) l00001053
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000104D_entry:
// DataOut: fp r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l0000104D:
	sp = fp
	branch Test(UGE,C) l0000104D_thunk_fn00001051
// DataOut: fp r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l0000104D_thunk_fn00001051:
	fn00001051(r6, fp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0000104D_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l0000104D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00001051(word32 r6, word32 fp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp r6
// LiveOut:
// Trashed: r0
// Preserved: sp
l00001051:
// DataOut: r6
// DataOut (flags): N
// SymbolicIn:

l0000104F_1:
	r3 = r6 - 0xC0000010
// DataOut:
// DataOut (flags): N
// SymbolicIn:

l00001053:
	r8 = 0x000000EB
// DataOut:
// DataOut (flags): N
// SymbolicIn:

l00001055:
	branch Test(LT,N) l00001057_then
	call fnFFC02DFB (retsize: 0;)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l00001057_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l0000105B:
	call fn01A1A047 (retsize: 0;)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00001051_entry:
// DataOut: fp r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001051:
	sp = fp
	branch Test(ULE,ZC) l00001055_in_fn00001051
// DataOut: fp r6
// DataOut (flags): C
// SymbolicIn: sp:fp

l00001055_in_fn00001051:
	"cloned branch Test(LT,N) l00001057_then"
	call fnFFC02DFB (retsize: 0;)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000105B_in_fn00001051:
	call fn01A1A047 (retsize: 0;)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001051_1:
	r0 = (r6 >> 4) - fp - C
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001055_in_fn00001051:
	"cloned branch Test(LT,N) l00001057_then"
	call fnFFC02DFB (retsize: 0;)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l0000105B_in_fn00001051:
	call fn01A1A047 (retsize: 0;)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

fn00001051_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void xTaskRemoveFromUnorderedEventList(word32 r0, word32 r1, word32 r3, word32 r6, word32 r8, word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV ip r0 r1 r3 r6 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xTaskRemoveFromUnorderedEventList_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

xTaskRemoveFromUnorderedEventList_entry:
// DataOut: ip r0 r1 r3 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00001081:
	branch NZV l00001085
// DataOut: ip r0 r1 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001085:
	branch Z l00001089
// DataOut: ip r0 r1 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00001085_1:
	Z = cond(__ror(r8, 2) - r0 - C) (alias)
// DataOut: ip r0 r1 r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00001089:
	branch Z l0000108D
// DataOut: ip r0 r1 r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp r4:<invalid>

l00001089_1:
	Mem18[r0:byte] = (byte) r0
// DataOut: ip r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp r4:<invalid>

l0000108D:
	branch Z l00001091
// DataOut: ip r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp r4:<invalid> r0:r0 - (r1 >> 2)

l00001091:
	branch Z l00001095
// DataOut: ip r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp r4:<invalid> r0:r0 - (r1 >> 2)

l00001091_1:
	__syscall(0x00F956F0)
// DataOut: ip r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp r4:<invalid> r0:r0 - (r1 >> 2)

l00001095:
	branch Z l00001099
// DataOut: ip r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r0:r0 - (r1 >> 2)

l00001095_1:
	Mem15[r6 - (ip >> 16):byte] = (byte) r3
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r0:r0 - (r1 >> 2)

l00001099:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r0:r0 - (r1 >> 2)

l0000108D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r0:r0 - (r1 >> 2)

l00001081_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vTaskSwitchContext(word32 r0, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 cpsr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp ip pc r0 r1 r5 r7 r8 r9
// Preserved: sp
vTaskSwitchContext_entry:
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000010D9:
	branch ZC l000010DD
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000010DD:
	branch NZV l000010E1
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000010DD_1:
	ip = r9 + 0xC0000000 + C
	byte NZCV_213 = cond(ip)
	ZC = NZCV_213 (alias)
	NZV = NZCV_213 (alias)
	NZV = NZCV_213 (alias)
	Z = NZCV_213 (alias)
	V = NZCV_213 (alias)
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000010E1:
	branch NZV l000010E5
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp ip:<invalid>

l000010E1_1:
	byte NZCV_204 = cond(r0 ^ 0x000000F8)
	ZC = NZCV_204 (alias)
	NZV = NZCV_204 (alias)
	Z = NZCV_204 (alias)
	V = NZCV_204 (alias)
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp ip:<invalid>

l000010E5:
	branch ZC l000010E9
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp ip:<invalid>

l000010E5_1:
	fp = ~0xBC000001
	byte NZCV_196 = cond(fp)
	ZC = NZCV_196 (alias)
	NZV = NZCV_196 (alias)
	Z = NZCV_196 (alias)
	V = NZCV_196 (alias)
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp ip:<invalid>

l000010E9:
	branch NZV l000010ED
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp ip:<invalid> fp:~0xBC000001

l000010E9_1:
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp ip:<invalid> fp:~0xBC000001

l000010ED:
	branch Z l000010F1
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001

l000010ED_1:
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001

l000010F1:
	branch ZC l000010F5
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1

l000010F1_1:
	word32 sp_168
	bool C_173
	byte NZCV_174
	byte NZV_175
	word32 r1_179
	byte NZC_181
	call fn000E20A5 (retsize: 0;)
		uses: C_35,cpsr,fp_32,ip_17,lr,NZC_30,NZCV_34,NZV_33,NZV_36,pc,r0,r1_40,r10,r2,r3,r5,r6,r7,r8,r9,sp_38,spsr,V_29,Z_31,ZC_37
		defs: C_173,cpsr_191,fp_177,ip_171,lr_183,NZC_181,NZCV_174,NZV_170,NZV_175,pc_184,r0_176,r1_179,r10_190,r2_188,r3_187,r5_186,r6_182,r7_189,r8_180,r9_172,sp_168,spsr_192,V_185,Z_178,ZC_169
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1

l000010F5:
	branch Z l000010F9
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1

l000010F5_1:
	byte NZC_161 = cond(r8 & 0x00000000)
	ZC = NZC_161 (alias)
	NZV = NZC_161 (alias)
	Z = NZC_161 (alias)
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1

l000010F9:
	branch Z l000010FD
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1

l000010F9_1:
	ip = (r6 >> 2) - r8
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1

l000010FD:
	branch ZC l00001101
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1

l00001101:
	branch Z l00001105
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1

l00001101_1:
	Mem154[r0:word32] = 0x00003FF1
	Mem155[r0 + 4:word32] = r6
	Mem156[r0 + 8:word32] = r8
	Mem157[r0 + 12:word32] = lr
	Mem158[r0 + 16:word32] = pc
	r0 = r0 + 20
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1

l00001105:
	branch NZV l00001109
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:r0 + 20

l00001105_1:
	word32 sp_129
	byte ZC_130
	bool C_134
	byte NZCV_135
	byte NZV_136
	word32 r1_140
	byte NZC_142
	call fn01A13809 (retsize: 0;)
		uses: C_83,cpsr_55,fp_67,ip_86,lr_61,NZC_79,NZCV_82,NZV_81,NZV_84,pc_77,r0_87,r1_65,r10_56,r2_58,r3_59,r5_75,r6_62,r7_57,r8_64,r9_76,sp_74,spsr_54,V_60,Z_80,ZC_85
		defs: C_134,cpsr_152,fp_138,ip_132,lr_144,NZC_142,NZCV_135,NZV_131,NZV_136,pc_145,r0_137,r1_140,r10_151,r2_149,r3_148,r5_147,r6_143,r7_150,r8_141,r9_133,sp_129,spsr_153,V_146,Z_139,ZC_130
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:r0 + 20

l00001109:
	branch NZV l0000110D
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:r0 + 20

l0000110D:
	branch V l00001111
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:r0 + 20

l0000110D_1:
	r5 = __ror(r0, 6) - r0
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:r0 + 20

l00001111:
	branch NZV l00001115
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:r0 + 20 r5:<invalid>

l00001111_1:
	r0 = r3 ^ 0xC0000011
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:r0 + 20 r5:<invalid>

l00001115:
	branch V l00001119
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:<invalid> r5:<invalid>

l00001115_1:
	r0 = r0 + 8
	r9 = (word32) Mem0[r0:int16]
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:<invalid> r5:<invalid>

l00001119:
	branch NZV l0000111D
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:<invalid> r5:<invalid> r9:<invalid>

l00001119_1:
	pc = pc + 71
	r0 = Mem0[0x00001168:word32]
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:<invalid> r5:<invalid> r9:<invalid>

l0000111D:
	branch Z l0000111D_thunk_uxTaskResetEventItemValue
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:<invalid> r5:<invalid> r9:<invalid> pc:pc + 71

l0000111D_thunk_uxTaskResetEventItemValue:
	uxTaskResetEventItemValue(r0, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc, cpsr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:<invalid> r5:<invalid> r9:<invalid> pc:pc + 71

l0000111D_1:
	Mem119[r0:word32] = r0
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:<invalid> r5:<invalid> r9:<invalid> pc:pc + 71

l0000111D_thunk_uxTaskResetEventItemValue:
	uxTaskResetEventItemValue(r0, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc, cpsr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:<invalid> r5:<invalid> r9:<invalid> pc:pc + 71

vTaskSwitchContext_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:0x000032F1 r5:<invalid> r9:<invalid> pc:pc + 71 r8:<invalid> r7:<invalid>

l00001109_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1 r0:r0 + 20

l000010FD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ip:<invalid> fp:~0xBC000001 r1:0x00003FF1

l000010D9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void uxTaskResetEventItemValue(word32 r0, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 cpsr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: r0 r7 r8
// Preserved: sp
uxTaskResetEventItemValue_entry:
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001121:
	branch N l00001121_then
	word32 sp_3
	byte N_4
	byte ZC_5
	word32 r3_7
	word32 r5_8
	word32 r6_9
	word32 r9_10
	word32 fp_11
	word32 ip_12
	word32 lr_13
	byte NZV_14
	word32 spsr_15
	byte Z_18
	word32 cpsr_19
	word32 r2_20
	word32 r10_21
	word32 pc_22
	word32 r8_23
	word32 r0_16
	word32 r7_17
	call fn01A17655 (retsize: 0;)
		uses: N,sp_1
		defs: cpsr_19,fp_11,ip_12,lr_13,N_4,NZV_14,pc_22,r0_16,r10_21,r2_20,r3_7,r5_8,r6_9,r7_17,r8_6,r9_10,sp_3,spsr_15,Z_18,ZC_5
	return
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00001121_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001125:
	branch ZC_5 l00001129
// DataOut: cpsr fp ip lr pc r0 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00001125_1:
	Mem29[r8_23:word32] = r3_7
	Mem30[r8_23 + 4:word32] = r5_8
	Mem31[r8_23 + 8:word32] = r6_9
	Mem32[r8_23 + 12:word32] = r8_23
	Mem33[r8_23 + 16:word32] = r9_10
	Mem34[r8_23 + 20:word32] = fp_11
	Mem35[r8_23 + 24:word32] = ip_12
	Mem36[r8_23 + 28:word32] = lr_13
	r8_23 = r8_23 + 32
// DataOut: cpsr fp pc r0 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00001129:
	branch NZV_14 l0000112D
// DataOut: cpsr fp pc r0 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 32

l00001129_1:
	__msr(spsr_15, 0x00000B6B)
// DataOut: cpsr fp pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 32

l0000112D:
	branch ZC_5 l00001131
// DataOut: cpsr fp pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 32

l0000112D_1:
	r0_16 = 0x000032F1
// DataOut: cpsr fp pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 32

l00001131:
	branch NZV_14 l00001135
// DataOut: cpsr fp pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 32 r0:0x000032F1

l00001131_1:
	Mem26[r7_17:byte] = (byte) r7_17
	r7_17 = r7_17 - 99
// DataOut: cpsr fp pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 32 r0:0x000032F1

l00001135:
	branch Z_18 l00001135_thunk_xTaskGetCurrentTaskHandle
// DataOut: cpsr fp pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 32 r0:0x000032F1 r7:r7 - 99

l00001135_thunk_xTaskGetCurrentTaskHandle:
	xTaskGetCurrentTaskHandle(r0_16, r2_20, r3_7, r5_8, r6_9, r7_17, r8_23, r10_21, fp_11, pc_22, cpsr_19)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 32 r0:0x000032F1 r7:r7 - 99
// Terminates process

l00001135_1:
	__msr(cpsr_19, 0x000032F1)
// DataOut: cpsr fp pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 32 r0:0x000032F1 r7:r7 - 99

l00001135_thunk_xTaskGetCurrentTaskHandle:
	xTaskGetCurrentTaskHandle(r0_16, r2_20, r3_7, r5_8, r6_9, r7_17, r8_23, r10_21, fp_11, pc_22, cpsr_19)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 32 r0:0x000032F1 r7:r7 - 99
// Terminates process

uxTaskResetEventItemValue_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 32 r0:0x000032F1 r7:r7 - 99



void xTaskGetCurrentTaskHandle(word32 r0, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 fp, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV cpsr fp pc r0 r10 r2 r3 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xTaskGetCurrentTaskHandle_entry:
// DataOut: cpsr fp pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00001139:
	branch V l0000113D
// DataOut: cpsr fp pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00001139_1:
	r5 = (fp >> 16) - r8
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000113D:
	branch NZV l00001141
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r5:(fp >> 16) - r8

l0000113D_1:
	pc = pc + 71
	r0 = Mem0[0x0000118C:word32]
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r5:(fp >> 16) - r8

l00001141:
	branch Z l00001141_thunk_vTaskSetTimeOutState
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r5:(fp >> 16) - r8 pc:pc + 71 r0:<invalid>

l00001141_thunk_vTaskSetTimeOutState:
	vTaskSetTimeOutState(r0, r2, r3, r5, r6, r7, r8, r10, pc, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:(fp >> 16) - r8 pc:pc + 71 r0:<invalid>
// Terminates process

l00001141_1:
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r5:(fp >> 16) - r8 pc:pc + 71 r0:<invalid>

l00001141_thunk_vTaskSetTimeOutState:
	vTaskSetTimeOutState(r0, r2, r3, r5, r6, r7, r8, r10, pc, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:(fp >> 16) - r8 pc:pc + 71 r0:<invalid>
// Terminates process

xTaskGetCurrentTaskHandle_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vTaskSetTimeOutState(word32 r0, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV cpsr pc r0 r10 r2 r3 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vTaskSetTimeOutState_entry:
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001145:
	branch ZC l00001149
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001145_1:
	r8 = r8 + 843
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001149:
	branch ZC l0000114D
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 843

l00001149_1:
	byte NZCV_31 = cond((r0 >> 6) - r8 - C)
	Z = NZCV_31 (alias)
	NZV = NZCV_31 (alias)
	V = NZCV_31 (alias)
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 843

l0000114D:
	branch Z l00001151
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 843

l00001151:
	branch NZV l00001155
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 843

l00001151_1:
	Mem29[r7:byte] = (byte) r7
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 843

l00001155:
	branch V l00001155_thunk_xTaskCheckForTimeOut
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 843

l00001155_thunk_xTaskCheckForTimeOut:
	xTaskCheckForTimeOut(r0, r2, r3, r5, r6, r8, r10, pc, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 + 843
// Terminates process

l00001155_1:
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 843

l00001155_thunk_xTaskCheckForTimeOut:
	xTaskCheckForTimeOut(0x00000000, r2, r3, r5, r6, r8, r10, pc, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 + 843 r0:0x00000000
// Terminates process

vTaskSetTimeOutState_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000114D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 + 843



void xTaskCheckForTimeOut(word32 r0, word32 r2, word32 r3, word32 r5, word32 r6, word32 r8, word32 r10, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr pc r0 r10 r2 r3 r5 r6 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xTaskCheckForTimeOut_entry:
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001159:
	branch Z l0000115D
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000115D:
	branch Z l00001161
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000115D_1:
	word32 sp_195
	byte NZCV_200
	word32 r1_202
	byte NZC_205
	word32 r7_210
	call fnFFC02E7D (retsize: 0;)
		uses: C,cpsr,N,NZC,NZCV,NZV,NZV,pc,r0,r1,r10,r2,r3,r5,r6,r7,r8,sp_1,V,Z,ZC
		defs: C_197,cpsr_208,N_206,NZC_205,NZCV_200,NZV_207,NZV_214,pc_215,r0_201,r1_202,r10_204,r2_203,r3_209,r5_212,r6_211,r7_210,r8_199,sp_195,V_213,Z_196,ZC_198
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001161:
	branch C l00001165
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001165:
	branch ZC l00001169
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001165_1:
	byte NZCV_186 = cond(__ror(r8, 6) - r8 - C)
	C = NZCV_186 (alias)
	Z = NZCV_186 (alias)
	ZC = NZCV_186 (alias)
	NZV = NZCV_186 (alias)
	V = NZCV_186 (alias)
	NZV = NZCV_186 (alias)
	N = NZCV_186 (alias)
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001169:
	branch ZC l0000116D
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid>

l00001169_1:
	r8 = r8 + 848
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid>

l0000116D:
	branch ZC l00001171
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 848

l00001171:
	branch ZC l00001175
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 848

l00001171_1:
	r0 = (word32) Mem0[r0 + 322:byte]
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 848

l00001175:
	branch C l00001179
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 848 r0:<invalid>

l00001175_1:
	byte NZCV_172 = cond(r2 - 0x80000010 - C)
	C = NZCV_172 (alias)
	Z = NZCV_172 (alias)
	ZC = NZCV_172 (alias)
	NZV = NZCV_172 (alias)
	V = NZCV_172 (alias)
	NZV = NZCV_172 (alias)
	N = NZCV_172 (alias)
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 848 r0:<invalid>

l00001179:
	branch ZC l0000117D
// DataOut: cpsr pc r0 r10 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 848 r0:<invalid> r1:<invalid>

l00001179_1:
	byte NZC_163 = cond(r10 & __ror(r8, 18))
	C = NZC_163 (alias)
	Z = NZC_163 (alias)
	ZC = NZC_163 (alias)
	NZV = NZC_163 (alias)
	NZV = NZC_163 (alias)
	N = NZC_163 (alias)
// DataOut: cpsr pc r0 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 848 r0:<invalid> r1:<invalid>

l0000117D:
	branch N l00001181
// DataOut: cpsr pc r0 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 848 r0:<invalid> r1:<invalid>

l0000117D_1:
	r0 = r2 - 0x00001080 - C
	byte NZCV_154 = cond(r0)
	C = NZCV_154 (alias)
	Z = NZCV_154 (alias)
	ZC = NZCV_154 (alias)
	NZV = NZCV_154 (alias)
	V = NZCV_154 (alias)
	NZV = NZCV_154 (alias)
// DataOut: cpsr pc r0 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 848 r0:<invalid> r1:<invalid>

l00001181:
	branch NZV l00001185
// DataOut: cpsr pc r0 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 848 r0:<invalid> r1:<invalid>

l00001181_1:
	__msr(cpsr, 0x0000001B)
// DataOut: cpsr pc r0 r2 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 848 r0:<invalid> r1:<invalid>

l00001185:
	branch NZV l00001189
// DataOut: cpsr pc r0 r2 r3 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 + 848 r0:<invalid> r1:<invalid>

l00001185_1:
	byte NZC_145 = cond(r0 & 0xF8000000)
	C = NZC_145 (alias)
	Z = NZC_145 (alias)
	ZC = NZC_145 (alias)
	NZV = NZC_145 (alias)
// DataOut: cpsr pc r0 r2 r3 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 + 848 r0:<invalid> r1:<invalid>

l00001189:
	branch Z l0000118D
// DataOut: cpsr pc r0 r2 r3 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 + 848 r0:<invalid> r1:<invalid>

l00001189_1:
	r8 = r0 ^ 0x000000F8
	byte NZC_137 = cond(r8)
	C = NZC_137 (alias)
	Z = NZC_137 (alias)
	ZC = NZC_137 (alias)
	NZV = NZC_137 (alias)
// DataOut: cpsr pc r0 r2 r3 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 + 848 r0:<invalid> r1:<invalid>

l0000118D:
	branch ZC l00001191
// DataOut: cpsr pc r0 r2 r3 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid>

l0000118D_1:
	Mem134[r0:byte] = (byte) r3
	r0 = r0 - 580
// DataOut: cpsr pc r0 r2 r3 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid>

l00001191:
	branch Z l00001195
// DataOut: cpsr pc r0 r2 r3 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid>

l00001191_1:
	Mem133[r0 - __ror(r8, 21):word32] = r0
// DataOut: cpsr pc r0 r2 r3 r5 r6
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid>

l00001195:
	branch C l00001199
// DataOut: cpsr pc r0 r2 r3 r5 r6
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid>

l00001199:
	branch Z l0000119D
// DataOut: cpsr pc r0 r2 r3 r5 r6
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid>

l00001199_1:
	byte NZC_125 = cond(r6 >> 32)
	Z = NZC_125 (alias)
	NZV = NZC_125 (alias)
// DataOut: cpsr pc r0 r2 r3 r5 r6
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid>

l0000119D:
	branch Z l000011A1
// DataOut: cpsr pc r0 r2 r3 r5 r6
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid> r7:r6 >> 32

l0000119D_1:
	r0 = (word32) Mem0[r0 + r5:byte]
// DataOut: cpsr pc r0 r2 r3 r6
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid> r7:r6 >> 32

l000011A1:
	branch V l000011A5
// DataOut: cpsr pc r0 r2 r3 r6
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid> r7:r6 >> 32

l000011A1_1:
	Mem120[r6:word64] = r3_r2
// DataOut: cpsr pc r0
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid> r7:r6 >> 32

l000011A5:
	branch NZV l000011A9
// DataOut: cpsr pc r0
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid> r7:r6 >> 32 r6:r6 - 138

l000011A5_1:
	pc = pc + 189
	r0 = Mem0[0x0000126A:word32]
// DataOut: cpsr pc r0
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid> r7:r6 >> 32 r6:r6 - 138

l000011A9:
	branch Z l000011A9_thunk_vTaskMissedYield
// DataOut: cpsr pc r0
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid> r7:r6 >> 32 r6:r6 - 138 pc:pc + 189

l000011A9_thunk_vTaskMissedYield:
	vTaskMissedYield(pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid> r7:r6 >> 32 r6:r6 - 138 pc:pc + 189
// Terminates process

l000011A9_1:
	__msr(cpsr, r0)
// DataOut: pc
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid> r7:r6 >> 32 r6:r6 - 138 pc:pc + 189

l000011A9_thunk_vTaskMissedYield:
	vTaskMissedYield(pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid> r7:r6 >> 32 r6:r6 - 138 pc:pc + 189
// Terminates process

xTaskCheckForTimeOut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001195_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r1:<invalid>

l0000116D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 + 848

l00001161_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001159_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vTaskMissedYield(word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV pc
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vTaskMissedYield_entry:
// DataOut: pc
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000011AD:
	branch NZV l000011B1
// DataOut: pc
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000011AD_1:
// DataOut: pc
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000011B1:
	branch V l000011B5
// DataOut: pc
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0xB222, 16)

l000011B5:
	branch NZV l000011B9
// DataOut: pc
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:DPB(r0, 0xB222, 16)

l000011B5_1:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:DPB(r0, 0xB222, 16)

l000011B9:
	branch Z l000011B9_thunk_vTaskPriorityInherit
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 71

l000011B9_thunk_vTaskPriorityInherit:
	vTaskPriorityInherit()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 71
// Terminates process

l000011B9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 71

l000011B9_thunk_vTaskPriorityInherit:
	vTaskPriorityInherit()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 71
// Terminates process

vTaskMissedYield_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000011B1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:DPB(r0, 0xB222, 16)



void vTaskPriorityInherit()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vTaskPriorityInherit_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

vTaskPriorityInherit_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000011BD:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xTaskPriorityDisinherit()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xTaskPriorityDisinherit_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

xTaskPriorityDisinherit_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001251:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void pvTaskIncrementMutexHeldCount(word32 r0, word32 r1, word32 r3, word32 r5, word32 r6, word32 r8, word32 fp, word32 ip, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r3 r5 r6 r8
// LiveOut:
// Trashed: pc r0 r5
// Preserved: sp
pvTaskIncrementMutexHeldCount_entry:
// DataOut: fp ip pc r0 r1 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000012D5:
	branch Z l000012D5_then
	word32 sp_3
	byte Z_4
	byte NZV_5
	byte V_6
	word32 r5_7
	word32 r8_8
	byte NZV_9
	word32 r0_10
	word32 pc_11
	word32 r1_12
	word32 r3_13
	word32 r6_14
	word32 fp_15
	word32 ip_16
	call fn01A17C09 (retsize: 0;)
		uses: sp_1,Z
		defs: fp_15,ip_16,NZV_5,NZV_9,pc_11,r0_10,r1_12,r3_13,r5_7,r6_14,r8_8,sp_3,V_6,Z_4
	return
// DataOut: fp ip pc r0 r1 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000012D5_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000012D9:
	branch NZV_5 l000012D9_then
	word32 sp_17
	byte Z_18
	byte NZV_19
	byte V_20
	word32 r5_21
	word32 r8_22
	byte NZV_23
	word32 r0_24
	word32 pc_25
	word32 r1_26
	word32 r3_27
	word32 r6_28
	word32 fp_29
	word32 ip_30
	call fn01A179A5 (retsize: 0;)
		uses: fp_15,ip_16,NZV_5,NZV_9,pc_11,r0_10,r1_12,r3_13,r5_7,r6_14,r8_8,sp_3,V_6,Z_4
		defs: fp_29,ip_30,NZV_19,NZV_23,pc_25,r0_24,r1_26,r3_27,r5_21,r6_28,r8_22,sp_17,V_20,Z_18
	return
// DataOut: fp ip pc r0 r1 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000012D9_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000012DD:
	branch NZV_19 l000012DD_then
	word32 sp_31
	byte Z_32
	byte NZV_33
	byte V_34
	word32 r5_35
	word32 r8_36
	byte NZV_37
	word32 pc_39
	word32 r1_40
	word32 r3_41
	word32 r6_42
	word32 fp_43
	word32 ip_44
	word32 r0_38
	call fn00C81899 (retsize: 0;)
		uses: fp_29,ip_30,NZV_19,NZV_23,pc_25,r0_24,r1_26,r3_27,r5_21,r6_28,r8_22,sp_17,V_20,Z_18
		defs: fp_43,ip_44,NZV_33,NZV_37,pc_39,r0_38,r1_40,r3_41,r5_35,r6_42,r8_36,sp_31,V_34,Z_32
	return
// DataOut: fp ip pc r0 r1 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000012DD_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000012E1:
	branch V_34 l000012E5
// DataOut: fp ip pc r0 r1 r3 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000012E1_1:
	word32 r5_54 = __ror(r5_35, 16) - r8_36
// DataOut: fp ip pc r0 r1 r3 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000012E5:
	branch NZV_37 l000012E9
// DataOut: fp ip pc r0 r1 r3 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:<invalid>

l000012E5_1:
	r0_38 = Mem0[0x00001334:word32]
// DataOut: fp ip r0 r1 r3 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:<invalid>

l000012E9:
	branch Z_32 l000012ED
// DataOut: fp ip r0 r1 r3 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:<invalid> pc:pc + 71 r0:<invalid>

l000012E9_1:
	r0_38 = 0x00000000
// DataOut: fp ip r0 r1 r3 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r5:<invalid> pc:pc + 71 r0:<invalid>

l000012ED:
	branch NZV_33 l000012ED_thunk_prvRestoreContextOfFirstTask
// DataOut: fp ip r0 r1 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r5:<invalid> pc:pc + 71 r0:<invalid>

l000012ED_thunk_prvRestoreContextOfFirstTask:
	prvRestoreContextOfFirstTask(r0_38, r1_40, r3_41, r6_42, r8_36, fp_43, ip_44)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:<invalid> pc:pc + 71 r0:<invalid>
// Terminates process

l000012ED_1:
	__syscall(0x00000000)
// DataOut: fp ip r0 r1 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r5:<invalid> pc:pc + 71 r0:<invalid>

l000012ED_thunk_prvRestoreContextOfFirstTask:
	prvRestoreContextOfFirstTask(r0_38, r1_40, r3_41, r6_42, r8_36, fp_43, ip_44)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:<invalid> pc:pc + 71 r0:<invalid>
// Terminates process

pvTaskIncrementMutexHeldCount_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:<invalid> pc:pc + 71 r0:<invalid>



void prvRestoreContextOfFirstTask(word32 r0, word32 r1, word32 r3, word32 r6, word32 r8, word32 fp, word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp ip r0 r1 r3 r6 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
prvRestoreContextOfFirstTask_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

prvRestoreContextOfFirstTask_entry:
// DataOut: fp ip r0 r1 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000012F1:
	branch Z l000012F5
// DataOut: fp ip r0 r1 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000012F5:
	branch ZC l000012F9
// DataOut: fp ip r0 r1 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000012F5_1:
	r0 = __rcr(r8, 1, C) - r8
// DataOut: fp ip r0 r1 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000012F9:
	branch Z l000012FD
// DataOut: fp ip r0 r1 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid>

l000012FD:
	branch Z l00001301
// DataOut: fp ip r0 r1 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid>

l000012FD_1:
	Mem21[r8:word32] = r0
	Mem22[r8 + 4:word32] = r1
	Mem24[r8 + 8:word32] = r3
	Mem26[r8 + 12:word32] = r6
	Mem27[r8 + 16:word32] = r8
	Mem29[r8 + 20:word32] = fp
	Mem31[r8 + 24:word32] = ip
// DataOut: r1 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid>

l00001301:
	branch Z l00001305
// DataOut: r1 r8
// DataOut (flags): C
// SymbolicIn: sp:fp r0:<invalid> r8:r8 + 28

l00001301_1:
// DataOut: r1 r8
// DataOut (flags): C
// SymbolicIn: sp:fp r0:<invalid> r8:r8 + 28

l00001305:
	branch C l00001309
// DataOut: r1 r8
// DataOut (flags): C
// SymbolicIn: sp:fp r0:<invalid> r8:r8 + 28 r1:r1 + 360

l00001305_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r8:r8 + 28 r1:r1 + 360

l00001309:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r8:r8 + 28 r1:r1 + 360

l000012F9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l000012F1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void prvSVCHandler(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip pc r0 r1 r2 r3 r4 r5 r8 sp
// Preserved: sp
prvSVCHandler_entry:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001335:
	branch Z l00001339
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001335_1:
	r1 = 0xA4000001 - r8 - C
	byte NZCV_81 = cond(r1)
	r1_r0 = SEQ(r1, r0) (alias)
	C = (bool) NZCV_81 (alias)
	Z = NZCV_81 (alias)
	ZC = NZCV_81 (alias)
	V = NZCV_81 (alias)
	NZV = NZCV_81 (alias)
	N = NZCV_81 (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001339:
	branch Z l0000133D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid>

l00001339_1:
	r0 = fp ^ ip >> r1
	r1_r0 = SEQ(r1, r0) (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid>

l0000133D:
	branch Z l00001341
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l0000133D_1:
	r0 = r3 - 0x00340000 - C
	byte NZCV_70 = cond(r0)
	r1_r0 = SEQ(r1, r0) (alias)
	C = (bool) NZCV_70 (alias)
	Z = NZCV_70 (alias)
	ZC = NZCV_70 (alias)
	V = NZCV_70 (alias)
	NZV = NZCV_70 (alias)
	N = NZCV_70 (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00001341:
	__syscall(0x00D1062B)
	branch C l00001349
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00001349:
	branch ZC l0000134D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00001349_1:
	Mem67[r1 - __ror(r0, 3):word64] = r1_r0
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l0000134D:
	branch V l00001351
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00001351:
	branch Z l00001355
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00001351_1:
	Mem66[r7 - (r7 >> 32):byte] = (byte) r7
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00001355:
	branch N l00001359
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00001355_1:
	__msr(spsr, 0x0000034A)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00001359:
	branch Z l0000135D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00001359_1:
	r3 = DPB(r3, 0x3EF0, 16)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l0000135D:
	branch N l00001361
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16)

l0000135D_1:
	__syscall(0x00E7C760)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16)

l00001361:
	branch Z l00001365
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16)

l00001361_1:
	r2 = r2 + 240
	r8 = (word32) Mem0[r2:byte]
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16)

l00001365:
	branch NZV l00001369
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16) r2:r2 + 240 r8:<invalid>

l00001365_1:
	__syscall(0x00601A4B)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16) r2:r2 + 240 r8:<invalid>

l00001369:
	branch NZV l0000136D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16) r2:r2 + 240 r8:<invalid>

l00001369_1:
	__syscall(0x008F4FF3)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16) r2:r2 + 240 r8:<invalid>

l0000136D:
	branch V l00001371
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16) r2:r2 + 240 r8:<invalid>

l0000136D_1:
	Mem59[0x00001375 + __ror(r3, 31):word32] = r7_r6
	pc = pc + __ror(r3, 31)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16) r2:r2 + 240 r8:<invalid>

l00001371:
	branch Z l00001375
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16) r2:r2 + 240 r8:<invalid> pc:<invalid>

l00001375:
	branch Z l00001379
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16) r2:r2 + 240 r8:<invalid> pc:<invalid>

l00001375_1:
	Mem55[r0:byte] = (byte) r0
	r0 = r0 + 237
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16) r2:r2 + 240 r8:<invalid> pc:<invalid>

l00001379:
	branch Z l00001379_thunk_pxPortInitialiseStack
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16) r2:r2 + 240 r8:<invalid> pc:<invalid>

l00001379_thunk_pxPortInitialiseStack:
	pxPortInitialiseStack(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16) r2:r2 + 240 r8:<invalid> pc:<invalid>

l00001379_1:
	word32 r0_44 = ~__ror(fp, 1)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16) r2:r2 + 240 r8:<invalid> pc:<invalid>

l00001379_thunk_pxPortInitialiseStack:
	pxPortInitialiseStack(r0_44, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:~<invalid> r3:DPB(r3, 0x3EF0, 16) r2:r2 + 240 r8:<invalid> pc:<invalid>

prvSVCHandler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r8:<invalid> pc:<invalid> r5:<invalid> ip:<invalid> r4:<invalid>

l00001371_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:DPB(r3, 0x3EF0, 16) r2:r2 + 240 r8:<invalid> pc:<invalid>

l0000134D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00001345_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>



void pxPortInitialiseStack(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZC ip pc r0 r1 r2 r3 r4 r5 sp
// Preserved: sp
pxPortInitialiseStack_entry:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000137D:
	branch Z l00001381
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000137D_1:
	r0 = Mem0[r4:word32]
	r1 = Mem0[r4 + 4:word32]
	r3 = Mem0[r4 + 8:word32]
	r5 = Mem0[r4 + 12:word32]
	r1_r0 = SEQ(r1, r0) (alias)
	r3_r2 = SEQ(r3, r2) (alias)
	ip = Mem0[r4 + 16:word32]
	r4 = r4 + 24
	r5_r4 = SEQ(r5, r4 + 24) (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001381:
	branch N l00001385
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24

l00001381_1:
	__syscall(0x002302BF)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24

l00001385:
	branch N l00001389
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24

l00001385_1:
	__syscall(0x007580F0)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24

l00001389:
	branch Z l0000138D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24

l00001389_1:
	Mem68[r4 + -12:word32] = r4
	Mem69[r4 + -8:word32] = r5
	Mem70[r4 + -4:word32] = r6
	Mem71[r4:word32] = r7
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24

l0000138D:
	branch N l00001391
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24

l0000138D_1:
	Mem65[r3:word16] = (uint16) r0
	r3 = r3 - 63
	r3_r2 = SEQ(r3, r2) (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24

l00001391:
	branch C l00001395
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24

l00001391_1:
	ip = ip - __ror(r8, 1)
	Mem64[ip:word64] = r3_r2
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24

l00001395:
	branch NV l00001399
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24

l00001395_1:
	Mem60[r1:word64] = r1_r0
	r1 = r1 - __ror(r0, 3)
	r1_r0 = SEQ(r1, r0) (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24

l00001399:
	branch Z l0000139D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24

l00001399_1:
	Mem57[r2:word64] = r5_r4
	r2 = r2 - __ror(r1, 9)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24

l0000139D:
	branch N l000013A1
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24 r2:<invalid>

l0000139D_1:
	r2 = r0 & __ror(r9, 5)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24 r2:<invalid>

l000013A1:
	branch N l000013A5
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24 r2:<invalid>

l000013A1_1:
	Mem53[ip:word64] = r1_r0
	ip = ip - 200
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24 r2:<invalid>

l000013A5:
	branch C l000013A9
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24 r2:<invalid>

l000013A5_1:
	ip = ip + 72
	r4 = (word32) Mem0[ip:int16]
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:r4 + 24 r2:<invalid>

l000013A9:
	branch V l000013AD
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:<invalid> r2:<invalid>

l000013AD:
	branch N l000013AD_thunk_xPortStartScheduler
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:<invalid> r2:<invalid>

l000013AD_thunk_xPortStartScheduler:
	xPortStartScheduler(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:<invalid> r2:<invalid>

pxPortInitialiseStack_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:<invalid> r2:<invalid> pc:<invalid>

l000013AD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:<invalid> r2:<invalid>

l000013A9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> ip:<invalid> r4:<invalid> r2:<invalid>



void xPortStartScheduler(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZC ip pc r0 r1 r3 r4 sp
// Preserved:
xPortStartScheduler_entry:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000013B1:
	branch Z l000013B1_then
	word32 sp_3
	byte Z_4
	byte N_5
	word32 r4_6
	word32 r9_7
	word32 r1_8
	word32 r8_9
	byte NZV_10
	word32 spsr_11
	word32 pc_12
	word32 r0_13
	word32 r2_14
	word32 r5_15
	word32 r6_16
	word32 r7_17
	word32 ip_18
	byte C_19
	word32 fp_20
	byte ZC_21
	byte V_22
	word32 r3_23
	word32 r10_24
	byte NZC_25
	call fnFED1D4E5 (retsize: 0;)
		uses: sp_1,Z
		defs: C_19,fp_20,ip_18,N_5,NZC_25,NZV_10,pc_12,r0_13,r1_8,r10_24,r2_14,r3_23,r4_6,r5_15,r6_16,r7_17,r8_9,r9_7,sp_3,spsr_11,V_22,Z_4,ZC_21
	return
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000013B1_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000013B5:
	branch N_5 l000013B9
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000013B5_1:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000013B9:
	branch Z_4 l000013B9_then
	word32 sp_26
	byte Z_27
	byte N_28
	word32 r4_29
	word32 r9_30
	word32 r1_31
	word32 r8_32
	byte NZV_33
	word32 spsr_34
	word32 pc_35
	word32 r0_36
	word32 r2_37
	word32 r5_38
	word32 r6_39
	word32 r7_40
	word32 ip_41
	byte C_42
	word32 fp_43
	byte ZC_44
	byte V_45
	word32 r3_46
	word32 r10_47
	byte NZC_48
	call fn000A1391 (retsize: 0;)
		uses: C_19,fp_20,ip_18,N_5,NZC_25,NZV_10,pc_12,r0_13,r1_8,r10_24,r2_14,r3_23,r4_6,r5_15,r6_16,r7_17,r8_9,r9_7,sp_3,spsr_11,V_22,Z_4,ZC_21
		defs: C_42,fp_43,ip_41,N_28,NZC_48,NZV_33,pc_35,r0_36,r1_31,r10_47,r2_37,r3_46,r4_29,r5_38,r6_39,r7_40,r8_32,r9_30,sp_26,spsr_34,V_45,Z_27,ZC_44
	return
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00

l000013B9_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r9 - 0x00001A00

l000013BD:
	branch N_28 l000013C1
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00

l000013BD_1:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00

l000013C1:
	branch Z_27 l000013C1_then
	word32 sp_49
	word32 r4_52
	word32 r9_53
	word32 r1_54
	word32 r8_55
	byte NZV_56
	word32 spsr_57
	word32 r2_60
	word32 r5_61
	word32 r6_62
	word32 r7_63
	word32 fp_66
	byte ZC_67
	byte V_68
	word32 r3_69
	word32 r10_70
	byte NZC_71
	word32 pc_129
	word32 ip_121
	byte N_51
	byte C_100
	byte Z_101
	word32 r0_107
	call fn010A1389 (retsize: 0;)
		uses: C_42,fp_43,ip_41,N_28,NZC_48,NZV_33,pc_35,r0_36,r1_31,r10_47,r2_37,r3_46,r4_29,r5_38,r6_39,r7_40,r8_32,r9_30,sp_26,spsr_34,V_45,Z_27,ZC_44
		defs: C_65,fp_66,ip_64,N_51,NZC_71,NZV_56,pc_58,r0_59,r1_54,r10_70,r2_60,r3_69,r4_52,r5_61,r6_62,r7_63,r8_55,r9_53,sp_49,spsr_57,V_68,Z_50,ZC_67
	return
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8

l000013C1_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8

l000013C5:
	branch NZV_56 l000013C9
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8

l000013C5_1:
	__msr(spsr_57, 0x00000B60)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8

l000013C9:
	branch Z_101 l000013CD
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8

l000013C9_1:
	Mem123[pc_129:word32] = r0_107
	Mem124[pc_129 + 4:word32] = r2_60
	Mem125[pc_129 + 8:word32] = r4_52
	Mem126[pc_129 + 12:word32] = r5_61
	Mem127[pc_129 + 16:word32] = r6_62
	Mem128[pc_129 + 20:word32] = r7_63
	pc_129 = pc_129 + 24
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8

l000013CD:
	branch Z_101 l000013D1
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24

l000013CD_1:
	__syscall(0x00F644D0)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24

l000013D1:
	branch Z_101 l000013D5
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24

l000013D1_1:
	r0_107 = r1_54 ^ __ror(r5_61, 14)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24

l000013D5:
	branch N_51 l000013D9
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid>

l000013D5_1:
	Mem120[ip_121:byte] = (byte) r4_52
	ip_121 = ip_121 - (r0_107 >> 12)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid>

l000013D9:
	branch C_100 l000013DD
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid> ip:<invalid>

l000013D9_1:
	Mem119[fp_66 - 1866:byte] = (byte) r4_52
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid> ip:<invalid>

l000013DD:
	branch Z_101 l000013E1
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid> ip:<invalid>

l000013DD_1:
	Mem114[r0_107:word32] = r5_61
	Mem115[r0_107 + 4:word32] = r6_62
	Mem116[r0_107 + 8:word32] = r8_55
	Mem117[r0_107 + 12:word32] = ip_121
	r0_107 = r0_107 + 16
// DataOut: fp pc r0 r1 r10 r2 r3 r4 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid> ip:<invalid>

l000013E1:
	branch Z_101 l000013E5
// DataOut: fp pc r0 r1 r10 r2 r3 r4 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid> ip:<invalid>

l000013E1_1:
	word32 sp_113 = r8_55 - __rcr(r0_107, 1, C_100)
// DataOut: fp pc r0 r1 r10 r2 r3 r4 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid> ip:<invalid>

l000013E5:
	branch ZC_67 l000013E9
// DataOut: fp pc r0 r1 r10 r2 r3 r4 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid> ip:<invalid>

l000013E5_1:
	r0_107 = __rcr(r8_55, 1, C_100) - r8_55
// DataOut: fp pc r0 r1 r10 r2 r3 r4 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid> ip:<invalid>

l000013E9:
	branch V_68 l000013ED
// DataOut: fp pc r0 r1 r10 r2 r3 r4 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid> ip:<invalid>

l000013E9_1:
	r0_107 = r8_55 + 0x00F30000
// DataOut: fp pc r0 r1 r10 r2 r3 r4 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid> ip:<invalid>

l000013ED:
	branch NZV_56 l000013F1
// DataOut: fp pc r0 r1 r10 r2 r3 r4 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid> ip:<invalid>

l000013ED_1:
	__syscall(0x00B661B6)
// DataOut: fp pc r0 r1 r10 r2 r3 r4 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid> ip:<invalid>

l000013F1:
	branch NZV_56 l000013F5
// DataOut: fp pc r0 r1 r10 r2 r3 r4 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid> ip:<invalid>

l000013F1_1:
	__syscall(0x008F4FF3)
// DataOut: fp pc r0 r1 r10 r2 r3 r4 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid> ip:<invalid>

l000013F5:
	branch Z_101 l000013F9
// DataOut: fp pc r0 r1 r10 r2 r3 r4 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid> ip:<invalid>

l000013F5_1:
	Mem109[0x000013FD + __ror(r3_69, 31):word32] = r7_r6
	word32 pc_110 = pc_129 + __ror(r3_69, 31)
// DataOut: fp pc r0 r1 r10 r2 r3 r4
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:pc + 24 r0:<invalid> ip:<invalid>

l000013F9:
	branch V_68 l000013FD
// DataOut: fp pc r0 r1 r10 r2 r3 r4
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid>

l000013F9_1:
	r0_107 = (word32) Mem0[0x00001410:int8]
// DataOut: fp r0 r1 r10 r2 r3 r4
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid>

l000013FD:
	branch C_100 l00001401
// DataOut: fp r0 r1 r10 r2 r3 r4
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid>

l00001401:
	branch C_100 l00001405
// DataOut: fp r0 r1 r10 r2 r3 r4
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid>

l00001401_1:
	__syscall(0x00493F48)
// DataOut: fp r0 r1 r10 r2 r3 r4
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid>

l00001405:
	branch N_51 l00001409
// DataOut: fp r0 r1 r10 r2 r3 r4
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid>

l00001405_1:
	r0_107 = r10_70 & fp_66 >> 18
	byte NZC_98 = cond(r0_107)
	N_51 = NZC_98 (alias)
	C_100 = NZC_98 (alias)
	Z_101 = NZC_98 (alias)
// DataOut: r0 r1 r2 r3 r4
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid>

l00001409:
	branch C_100 l0000140D
// DataOut: r0 r1 r2 r3 r4
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid>

l0000140D:
	branch V_68 l00001411
// DataOut: r0 r1 r2 r3 r4
// DataOut (flags): NZ
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid>

l0000140D_1:
	Mem96[r0_107 - 2601:byte] = (byte) r1_54
// DataOut: r2 r3 r4
// DataOut (flags): NZ
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid>

l00001411:
	branch Z_101 l00001415
// DataOut: r2 r3 r4
// DataOut (flags): NZ
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid>

l00001411_1:
	Mem94[r3_69 - 217:word32] = r4_52
// DataOut: r2
// DataOut (flags): NZ
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid>

l00001415:
	branch Z_101 l00001419
// DataOut: r2
// DataOut (flags): N
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid> r3:r3 - 217

l00001415_1:
// DataOut:
// DataOut (flags): N
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid> r3:r3 - 217

l00001419:
	branch N_51 l0000141D
// DataOut:
// DataOut (flags): N
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid> r3:r3 - 217

l0000141D:
	branch N_51 l00001421
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid> r3:r3 - 217

l0000141D_1:
	__syscall(0x004299D0)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid> r3:r3 - 217

l00001421:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid> r3:r3 - 217

xPortStartScheduler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid> r3:r3 - 217

l00001419_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid> r3:r3 - 217

l00001409_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid>

l000013FD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r9 - 0x00001A00 r1:0x00060000 - r8 pc:<invalid> r0:<invalid> ip:<invalid>



void vPortEndScheduler(word32 r0, word32 r4, word32 r7, word32 r9, word32 fp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C fp r0 r4 r7 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vPortEndScheduler_entry:
// DataOut: fp r0 r4 r7 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l00001551:
	branch C l00001551_thunk_vPortStoreTaskMPUSettings
// DataOut: fp r0 r4 r7 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l00001551_thunk_vPortStoreTaskMPUSettings:
	vPortStoreTaskMPUSettings(r0, r4, r9, fp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l00001551_1:
	word32 r0_7 = 0x00001559 + (r7 >> 32) + C
// DataOut: fp r0 r4 r9
// DataOut (flags): NZ
// SymbolicIn: sp:fp

l00001551_thunk_vPortStoreTaskMPUSettings:
	vPortStoreTaskMPUSettings(r0_7, r4, r9, fp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>
// Terminates process

vPortEndScheduler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vPortStoreTaskMPUSettings(word32 r0, word32 r4, word32 r9, word32 fp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZ fp r0 r4 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vPortStoreTaskMPUSettings_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

vPortStoreTaskMPUSettings_entry:
// DataOut: fp r0 r4 r9
// DataOut (flags): NZ
// SymbolicIn: sp:fp

l00001555:
	branch N l00001559
// DataOut: fp r0 r4 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00001555_1:
	Mem15[r9 - r4:word16] = (uint16) r0
// DataOut: fp
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00001559:
	branch Z l0000155D
// DataOut: fp
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 - r4

l00001559_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 - r4

l0000155D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 - r4 fp:fp + 3024 r4:<invalid>



void xPortPendSVHandler(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp lr pc r0 r1 r10 r4 r5 r6 r7 r8
// Preserved: sp
xPortPendSVHandler_entry:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001689:
	branch Z l0000168D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001689_1:
	Mem196[r0:word32] = r0
	r0 = r0 + 2547
	r1_r0 = SEQ(r1, r0 + 2547) (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000168D:
	__syscall(0x00681A4B)
	branch C l00001695
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r0 + 2547

l00001695:
	branch Z l00001699
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r0 + 2547

l00001695_1:
	pc = 0x0000169D & __ror(r9, 5)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r0 + 2547

l00001699:
	branch Z l0000169D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r0 + 2547 pc:<invalid>

l0000169D:
	branch NZV l000016A1
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r0 + 2547 pc:<invalid>

l0000169D_1:
	__syscall(0x00F04F40)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r0 + 2547 pc:<invalid>

l000016A1:
	branch Z l000016A5
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r0 + 2547 pc:<invalid>

l000016A1_1:
	r8 = ~r0
	byte NZCV_185 = cond(r8)
	Z = NZCV_185 (alias)
	NZV = NZCV_185 (alias)
	ZC = NZCV_185 (alias)
	V = NZCV_185 (alias)
	NZV = NZCV_185 (alias)
	NV = NZCV_185 (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r0 + 2547 pc:<invalid>

l000016A5:
	branch Z l000016A9
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r0 + 2547 pc:<invalid> r8:~(r0 + 5094)

l000016A9:
	branch Z l000016AD
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r0 + 2547 pc:<invalid> r8:~(r0 + 5094)

l000016A9_1:
	r0 = r0 + 253
	r1_r0 = SEQ(r1, r0) (alias)
	r4 = (word32) Mem0[r0:int16]
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r0 + 2547 pc:<invalid> r8:~(r0 + 5094)

l000016AD:
	branch Z l000016B1
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:~(r0 + 5094) r4:<invalid>

l000016AD_1:
	r8 = ~r0
	byte NZCV_170 = cond(r8)
	Z = NZCV_170 (alias)
	NZV = NZCV_170 (alias)
	ZC = NZCV_170 (alias)
	V = NZCV_170 (alias)
	NZV = NZCV_170 (alias)
	NV = NZCV_170 (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:~(r0 + 5094) r4:<invalid>

l000016B1:
	branch Z l000016B5
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid>

l000016B5:
	branch Z l000016B9
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid>

l000016B5_1:
	Mem164[r8:word32] = r6
	Mem165[r8 + 4:word32] = r8
	Mem166[r8 + 8:word32] = fp
	Mem167[r8 + 12:word32] = ip
	r8 = r8 + 16
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid>

l000016B9:
	branch Z l000016BD
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid>

l000016B9_1:
	word32 v18_160 = (word32) Mem0[r1:byte]
	r1 = r1 + 360
	r0 = v18_160
	r1_r0 = SEQ(r1 + 360, v18_160) (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid>

l000016BD:
	branch NZV l000016C1
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016C1:
	branch NV l000016C5
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016C1_1:
	pc = 0x000016C9 & 0x000000E8
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016C5:
	branch NZV l000016C9
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016C5_1:
	pc = 0x000016CD & __ror(r8, 1)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016C9:
	branch ZC l000016CD
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016CD:
	branch ZC l000016D1
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016D1:
	branch V l000016D5
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016D1_1:
	Mem156[r8:word64] = r1_r0
	r8 = r8 + __ror(r3, 19)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016D5:
	branch NV l000016D9
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016D5_1:
	__syscall(0x00BF0047)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016D9:
	branch NV l000016DD
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016D9_1:
	__syscall(0x008000F3)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016DD:
	branch NZV l000016E1
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016DD_1:
	Mem150[r0:word32] = r0
	Mem151[r0 + 4:word32] = r1
	Mem152[r0 + 8:word32] = r4
	Mem153[r0 + 12:word32] = r5
	Mem154[r0 + 16:word32] = r6
	Mem155[r0 + 20:word32] = r7
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016E1:
	branch Z l000016E5
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016E1_thunk_xPortSysTickHandler:
	xPortSysTickHandler(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016E1_1:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016E1_thunk_xPortSysTickHandler:
	xPortSysTickHandler(0x00000000, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016CD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016C9_1:
	word32 sp_120
	byte Z_121
	word32 r0_122
	byte C_123
	word32 pc_124
	word32 r9_125
	byte NZV_126
	word32 r8_127
	byte NZCV_128
	word32 r7_129
	word32 r4_130
	word32 r6_131
	word32 fp_132
	word32 ip_133
	word32 r1_134
	byte NV_135
	byte ZC_136
	byte V_137
	word32 r3_138
	byte NZV_139
	word32 r5_140
	byte N_141
	word32 r2_142
	word32 r10_143
	word32 spsr_144
	word32 lr_145
	byte NZC_146
	call fn0000F8E8 (retsize: 0;)
		uses: C_112,fp,ip,lr,N_104,NV_108,NZC_103,NZCV_109,NZV_105,NZV_111,pc_119,r0_117,r1_116,r10,r2,r3,r4_101,r5,r6,r7,r8_114,r9,sp_1,spsr,V_106,Z_113,ZC_107
		defs: C_123,fp_132,ip_133,lr_145,N_141,NV_135,NZC_146,NZCV_128,NZV_126,NZV_139,pc_124,r0_122,r1_134,r10_143,r2_142,r3_138,r4_130,r5_140,r6_131,r7_129,r8_127,r9_125,sp_120,spsr_144,V_137,Z_121,ZC_136
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016BD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r1:r1 + 360

l000016B1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r4:<invalid>

l000016A5_1:
	word32 r7_59 = r7 + r8
	word32 sp_73
	byte Z_74
	word32 r0_75
	byte C_76
	word32 pc_77
	word32 r9_78
	byte NZV_79
	word32 r8_80
	byte NZCV_81
	word32 r7_82
	word32 r4_83
	word32 r6_84
	word32 fp_85
	word32 ip_86
	word32 r1_87
	byte NV_88
	byte ZC_89
	byte V_90
	word32 r3_91
	byte NZV_92
	word32 r5_93
	byte N_94
	word32 r2_95
	word32 r10_96
	word32 spsr_97
	word32 lr_98
	byte NZC_99
	call (word32) Mem0[r7_59:byte] (retsize: 0;)
		uses: C_28,fp,ip,lr,N_20,NV_24,NZC_19,NZCV_25,NZV_21,NZV_27,pc_9,r0_6,r1,r10,r2,r3,r4,r5,r6,r7_59,r8_26,r9,sp_1,spsr,V_22,Z_29,ZC_23
		defs: C_76,fp_85,ip_86,lr_98,N_94,NV_88,NZC_99,NZCV_81,NZV_79,NZV_92,pc_77,r0_75,r1_87,r10_96,r2_95,r3_91,r4_83,r5_93,r6_84,r7_82,r8_80,r9_78,sp_73,spsr_97,V_90,Z_74,ZC_89
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 + 2547 pc:<invalid> r8:~(r0 + 5094)

xPortPendSVHandler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r8:<invalid> r7:<invalid> r4:<invalid> r1:<invalid> r10:<invalid> r5:<invalid> r6:<invalid> fp:<invalid> lr:<invalid>

l00001699_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 + 2547 pc:<invalid>

l00001691_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 + 2547



void xPortSysTickHandler(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp lr pc r0 r1 r10 r5 r6 r7 r8
// Preserved: sp
xPortSysTickHandler_entry:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000016E5:
	branch Z l000016E9
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000016E9:
	branch NZV l000016ED
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000016E9_1:
	__syscall(0x00F04F84)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000016ED:
	branch Z l000016F1
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000016ED_1:
	r8 = ~(r3 << 6)
	byte NZCV_105 = cond(r8)
	Z = NZCV_105 (alias)
	V = NZCV_105 (alias)
	ZC = NZCV_105 (alias)
	N = NZCV_105 (alias)
	C = NZCV_105 (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000016F1:
	branch V l000016F5
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000016F1_1:
	__syscall(0x00F3BF88)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000016F5:
	branch N l000016F9
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000016F5_1:
	__syscall(0x00F3BF8F)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000016F9:
	branch C l000016FD
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000016FD:
	branch N l00001701
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:~(r3 << 6)

l000016FD_1:
	__syscall(0x00B118FB)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:~(r3 << 6)

l00001701:
	branch Z l00001705
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:~(r3 << 6)

l00001701_1:
	byte NZCV_97 = cond(r2 - 0x000000F0)
	r8 = r2 - 0x000000F0
	Z = NZCV_97 (alias)
	ZC = NZCV_97 (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:~(r3 << 6)

l00001705:
	branch ZC l00001709
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:<invalid>

l00001705_1:
	Mem94[r0:byte] = (byte) r1
	r0 = r0 - 2635
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:<invalid>

l00001709:
	branch Z l0000170D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:<invalid> r0:r0 - 2635

l0000170D:
	branch Z l00001711
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:<invalid> r0:r0 - 2635

l0000170D_1:
	pc = pc + 189
	r0 = Mem0[0x000017D2:word32]
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:<invalid> r0:r0 - 2635

l00001711:
	branch Z l00001715
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:<invalid> r0:<invalid> pc:pc + 189

l00001711_thunk_vPortSVCHandler:
	vPortSVCHandler(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> r0:<invalid> pc:pc + 189

l00001711_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> r0:<invalid> pc:pc + 189

l00001709_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> r0:r0 - 2635

l000016F9_1:
	word32 r7_43 = r7 + pc
	word32 sp_57
	byte Z_58
	byte NZV_59
	word32 r3_60
	word32 r8_61
	byte NZCV_62
	byte V_63
	byte N_64
	byte C_65
	word32 r7_66
	word32 pc_67
	word32 r2_68
	byte ZC_69
	word32 r1_70
	word32 r0_71
	word32 r4_72
	word32 r5_73
	word32 r6_74
	word32 r9_75
	word32 r10_76
	word32 fp_77
	word32 ip_78
	word32 spsr_79
	call (word32) Mem0[r7_43:byte] (retsize: 0;)
		uses: C_11,fp,ip,N_12,NZCV_14,NZV_16,pc,r0,r1,r10,r2,r3,r4,r5,r6,r7_43,r8_15,r9,sp_1,spsr,V_13,Z_17,ZC_10
		defs: C_65,fp_77,ip_78,N_64,NZCV_62,NZV_59,pc_67,r0_71,r1_70,r10_76,r2_68,r3_60,r4_72,r5_73,r6_74,r7_66,r8_61,r9_75,sp_57,spsr_79,V_63,Z_58,ZC_69
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:~(r3 << 6)

xPortSysTickHandler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> r7:<invalid> r0:<invalid> pc:pc + 189 r1:<invalid> r10:<invalid> r5:<invalid> r6:<invalid> fp:<invalid> lr:<invalid>

l000016E5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vPortSVCHandler(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp lr r0 r1 r10 r5 r6 r7 r8
// Preserved: sp
vPortSVCHandler_entry:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001715:
	branch Z l00001719
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001719:
	branch Z l0000171D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000171D:
	branch Z l00001721
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001721:
	branch Z l00001725
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001725:
	branch ZC l00001729
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001729:
	branch Z l0000172D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001729_thunk_pvPortMalloc:
	pvPortMalloc(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001729_1:
	word32 r0_7 = __ror(fp, 1) - r0 - C
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001729_thunk_pvPortMalloc:
	pvPortMalloc(r0_7, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

vPortSVCHandler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r10:<invalid> r5:<invalid> r7:<invalid> r6:<invalid> fp:<invalid> r8:<invalid> lr:<invalid>

l00001725_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001721_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000171D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001719_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001715_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void pvPortMalloc(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp lr r0 r1 r10 r5 r6 r7 r8
// Preserved: sp
pvPortMalloc_entry:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000172D:
	branch N l00001731
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000172D_1:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001731:
	branch C l00001735
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16)

l00001731_1:
	byte NZCV_191 = cond(0x00001739 + (r7 << 24) + C)
	Z = NZCV_191 (alias)
	V = NZCV_191 (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16)

l00001735:
	branch Z l00001739
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid>

l00001735_1:
	Mem177[r4 + -24:word32] = r4
	Mem179[r4 + -20:word32] = r5
	Mem181[r4 + -16:word32] = r6
	Mem183[r4 + -12:word32] = r7
	Mem185[r4 + -8:word32] = r8
	Mem187[r4 + -4:word32] = r9
	Mem189[r4:word32] = r10
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid>

l00001739:
	branch V l0000173D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid>

l0000173D:
	branch Z l0000173D_then
	word32 sp_22
	byte N_23
	word32 r0_24
	word32 r7_26
	word32 r1_27
	byte NZCV_28
	word32 r4_30
	word32 r5_31
	word32 r6_32
	word32 r8_33
	word32 r9_34
	word32 r10_35
	byte V_36
	word32 ip_38
	word32 spsr_40
	word32 r3_42
	word32 r2_43
	word32 fp_44
	word32 lr_45
	word32 pc_46
	byte NZV_173
	byte ZC_166
	byte NZV_165
	byte Z_162
	byte C_161
	call fn012C5729 (retsize: 0;)
		uses: C_20,N_21,NZCV_18,NZV_14,NZV_15,r0_4,r1_19,sp_1,V_16,Z_17,ZC_13
		defs: C_25,fp_44,ip_38,lr_45,N_23,NZCV_28,NZV_37,NZV_39,pc_46,r0_24,r1_27,r10_35,r2_43,r3_42,r4_30,r5_31,r6_32,r7_26,r8_33,r9_34,sp_22,spsr_40,V_36,Z_29,ZC_41
	return
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid>

l0000173D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid>

l00001741:
	branch N_23 l00001745
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid>

l00001741_1:
	byte NZCV_168 = cond(r1_27 + __ror(r8_33, 20) + C_161)
	C_161 = NZCV_168 (alias)
	Z_162 = NZCV_168 (alias)
	NZV_173 = NZCV_168 (alias)
	NZV_165 = NZCV_168 (alias)
	ZC_166 = NZCV_168 (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid>

l00001745:
	branch NZV_173 l00001749
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid>

l00001745_1:
	byte NZCV_159 = cond(r1_27 - 0xC8000003)
	C_161 = NZCV_159 (alias)
	Z_162 = NZCV_159 (alias)
	NZV_165 = NZCV_159 (alias)
	ZC_166 = NZCV_159 (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid>

l00001749:
	branch Z_162 l0000174D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid>

l00001749_1:
	Mem157[r5_31:word32] = ip_38
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid>

l0000174D:
	branch Z_162 l00001751
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248

l00001751:
	branch Z_162 l00001755
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248

l00001755:
	branch NZV_165 l00001759
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248

l00001755_1:
	__msr(spsr_40, 0x000009D2)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248

l00001759:
	branch ZC_166 l0000175D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248

l0000175D:
	branch ZC_166 l00001761
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248

l00001761:
	branch Z_162 l00001765
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248

l00001761_1:
	Mem155[r6_32:word64] = r3_r2
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248

l00001765:
	__syscall(0x002400BD)
	branch C_161 l0000176D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248 r6:r6 - 11

l00001769_1:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248 r6:r6 - 11

l0000176D:
	branch Z_162 l00001771
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248 r6:r6 - 11 fp:fp + 7 r8:<invalid>

l0000176D_1:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248 r6:r6 - 11 fp:fp + 7 r8:<invalid>

l00001771:
	branch C_161 l00001775
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248 r6:r6 - 11 fp:fp + 7 r8:<invalid>

l00001771_1:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248 r6:r6 - 11 fp:fp + 7 r8:<invalid>

l00001775:
	branch Z_162 l00001775_then
	word32 sp_121
	byte N_122
	word32 r0_123
	byte C_124
	word32 r7_125
	word32 r1_126
	byte NZCV_127
	byte Z_128
	word32 r4_129
	word32 r5_130
	word32 r6_131
	word32 r8_132
	word32 r9_133
	word32 r10_134
	byte V_135
	byte NZV_136
	word32 ip_137
	byte NZV_138
	word32 spsr_139
	byte ZC_140
	word32 r3_141
	word32 r2_142
	word32 fp_143
	word32 lr_144
	word32 pc_145
	call fn0008373D (retsize: 0;)
		uses: C_62,fp_118,ip_38,lr_45,N_63,NZCV_61,NZV_57,NZV_58,pc_46,r0_24,r1_120,r10_51,r2_43,r3_42,r4_30,r5_64,r6_117,r7_26,r8_119,r9_34,sp_22,spsr_40,V_59,Z_60,ZC_56
		defs: C_124,fp_143,ip_137,lr_144,N_122,NZCV_127,NZV_136,NZV_138,pc_145,r0_123,r1_126,r10_134,r2_142,r3_141,r4_129,r5_130,r6_131,r7_125,r8_132,r9_133,sp_121,spsr_139,V_135,Z_128,ZC_140
	return
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r10:<invalid> r5:r5 - 248 r6:r6 - 11 fp:fp + 7 r8:<invalid>

l00001775_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r10:<invalid> r5:r5 - 248 r6:r6 - 11 fp:fp + 7 r8:<invalid>

l00001779:
	branch C_124 l0000177D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r10:<invalid> r5:r5 - 248 r6:r6 - 11 fp:fp + 7 r8:<invalid>

l00001779_1:
	word32 lr_148 = __ror(r0_123, 6) - r7_125 - C_124
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r10:<invalid> r5:r5 - 248 r6:r6 - 11 fp:fp + 7 r8:<invalid>

l0000177D:
	branch V_135 l00001781
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r10:<invalid> r5:r5 - 248 r6:r6 - 11 fp:fp + 7 r8:<invalid> lr:<invalid>

l0000177D_thunk_vPortFree:
	vPortFree(r0_123, r1_126, r2_142, r3_141, r5_130, r6_131, r7_125, r8_132, r9_133, r10_134, fp_143, ip_137, pc_145)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r10:<invalid> r5:r5 - 248 r6:r6 - 11 fp:fp + 7 r8:<invalid> lr:<invalid>

l0000177D_1:
	word32 r0_147 = r0_123 ^ r2_142
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r10:<invalid> r5:r5 - 248 r6:r6 - 11 fp:fp + 7 r8:<invalid> lr:<invalid>

l0000177D_thunk_vPortFree:
	vPortFree(r0_147, r1_126, r2_142, r3_141, r5_130, r6_131, r7_125, r8_132, r9_133, r10_134, fp_143, ip_137, pc_145)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r10:<invalid> r5:r5 - 248 r6:r6 - 11 fp:fp + 7 r8:<invalid> lr:<invalid>

l0000175D_1:
	word32 sp_92
	byte N_93
	word32 r0_94
	byte C_95
	word32 r7_96
	word32 r1_97
	byte NZCV_98
	byte Z_99
	word32 r4_100
	word32 r5_101
	word32 r6_102
	word32 r8_103
	word32 r9_104
	word32 r10_105
	byte V_106
	byte NZV_107
	word32 ip_108
	byte NZV_109
	word32 spsr_110
	byte ZC_111
	word32 r3_112
	word32 r2_113
	word32 fp_114
	word32 lr_115
	word32 pc_116
	call (word32) Mem0[r7_26 + 3864:byte] (retsize: 0;)
		uses: C_62,fp_44,ip_38,lr_45,N_63,NZCV_61,NZV_57,NZV_58,pc_46,r0_24,r1_27,r10_51,r2_43,r3_42,r4_30,r5_64,r6_32,r7_90,r8_33,r9_34,sp_22,spsr_40,V_59,Z_60,ZC_56
		defs: C_95,fp_114,ip_108,lr_115,N_93,NZCV_98,NZV_107,NZV_109,pc_116,r0_94,r1_97,r10_105,r2_113,r3_112,r4_100,r5_101,r6_102,r7_96,r8_103,r9_104,sp_92,spsr_110,V_106,Z_99,ZC_111
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248

pvPortMalloc_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r10:<invalid> r5:<invalid> r7:r7 + 3864 r6:r6 - 11 fp:fp + 7 r8:<invalid> lr:<invalid>

l00001759_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248

l00001751_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248

l0000174D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid> r10:<invalid> r5:r5 - 248

l00001739_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:DPB(r0, 0x64B5, 16) r1:<invalid>



void vPortFree(word32 r0, word32 r1, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV r0 r5
// Preserved: sp
vPortFree_entry:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00001781:
	branch Z l00001785
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00001781_thunk_vPortInitialiseBlocks:
	vPortInitialiseBlocks(r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001781_1:
	word32 r0_9 = 0x00001789 + (r7 >> 32) + C
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00001781_thunk_vPortInitialiseBlocks:
	vPortInitialiseBlocks(r0_9, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

vPortFree_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r5:<invalid>



void vPortInitialiseBlocks(word32 r0, word32 r1, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV r0 r5
// Preserved: sp
vPortInitialiseBlocks_entry:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001785:
	branch NZV l00001789
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001785_1:
	r0 = DPB(r0, 0xB222, 16)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001789:
	branch V l0000178D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0xB222, 16)

l0000178D:
	branch C l00001791
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0xB222, 16)

l0000178D_1:
	r0 = 0x00001795 + (r7 >> 32) + C
	Z = cond(r0) (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0xB222, 16)

l00001791:
	branch Z l00001795
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l00001791_thunk_xPortGetFreeHeapSize:
	xPortGetFreeHeapSize(r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

vPortInitialiseBlocks_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r5:<invalid>

l00001791_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00001789_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:DPB(r0, 0xB222, 16)



void xPortGetFreeHeapSize(word32 r0, word32 r1, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV r0 r5
// Preserved: sp
xPortGetFreeHeapSize_entry:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001795:
	branch NZV l00001799
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001795_1:
	byte NZCV_66 = cond((fp >> 6) - r8 - C)
	C = NZCV_66 (alias)
	NZV = NZCV_66 (alias)
	V = NZCV_66 (alias)
	Z = NZCV_66 (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001799:
	branch NZV l0000179D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid>

l00001799_1:
	Mem63[r5:byte] = (byte) ip
// DataOut: fp pc r0 r1 r10 r2 r3 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid>

l0000179D:
	branch V l000017A1
// DataOut: fp pc r0 r1 r10 r2 r3 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r5:r5 * 0x00000002

l0000179D_1:
	byte NZC_56 = cond(r0 ^ __ror(r0, 8))
	C = NZC_56 (alias)
	Z = NZC_56 (alias)
// DataOut: fp pc r0 r1 r10 r2 r3 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r5:r5 * 0x00000002

l000017A1:
	branch C l000017A5
// DataOut: fp pc r0 r1 r10 r2 r3 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r5:r5 * 0x00000002 r0:<invalid>

l000017A1_1:
	Z = cond(0x000017A9 + (r7 >> 32) + C) (alias)
// DataOut: fp pc r0 r1 r10 r2 r3 r6 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r5:r5 * 0x00000002 r0:<invalid>

l000017A5:
	branch Z l000017A9
// DataOut: fp pc r0 r1 r10 r2 r3 r6 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r5:r5 * 0x00000002 r0:<invalid>

l000017A5_thunk_xEventGroupCreate:
	xEventGroupCreate(r1, r2, r3, r6, r8, r9, r10, fp, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r5 * 0x00000002 r0:<invalid>

l000017A5_1:
// DataOut: fp pc r1 r10 r2 r3 r6 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r5:r5 * 0x00000002 r0:<invalid>

l000017A5_thunk_xEventGroupCreate:
	xEventGroupCreate(r1, r2, r3, r6, r8, r9, r10, fp, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r5:r5 * 0x00000002 r0:<invalid>

xPortGetFreeHeapSize_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 * 0x00000002 r0:<invalid>



void xEventGroupCreate(word32 r1, word32 r2, word32 r3, word32 r6, word32 r8, word32 r9, word32 r10, word32 fp, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp pc r1 r10 r2 r3 r6 r8 r9
// LiveOut:
// Trashed:
// Preserved: sp
xEventGroupCreate_entry:
// DataOut: fp pc r1 r10 r2 r3 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000017A9:
	__syscall(0x002018B5)
	branch Z l000017B1
// DataOut: fp pc r1 r10 r2 r3 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000017AD_1:
	pc = pc + 3831
	fp = (word32) Mem0[0x000026AC:byte]
// DataOut: fp pc r1 r10 r2 r3 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000017B1:
	branch Z l000017B5
// DataOut: fp pc r1 r10 r2 r3 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3831 fp:<invalid>

l000017B1_1:
	r2 = r1 + (r6 >> 32) + C
	byte NZCV_36 = cond(r2)
	r3_r2 = SEQ(r3, r2) (alias)
	C = NZCV_36 (alias)
	Z = NZCV_36 (alias)
	ZC = NZCV_36 (alias)
// DataOut: fp pc r1 r10 r2 r3 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3831 fp:<invalid>

l000017B5:
	branch Z l000017B9
// DataOut: fp pc r1 r10 r2 r3 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3831 fp:<invalid> r2:<invalid>

l000017B5_1:
// DataOut: fp pc r1 r10 r2 r3 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3831 fp:<invalid> r2:<invalid>

l000017B9:
	branch ZC l000017BD
// DataOut: fp pc r1 r10 r2 r3 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3831 fp:<invalid> r2:<invalid> r8:r8 + 35 r4:<invalid>

l000017BD:
	branch Z l000017C1
// DataOut: fp pc r1 r10 r2 r3 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3831 fp:<invalid> r2:<invalid> r8:r8 + 35 r4:<invalid>

l000017BD_1:
	Mem27[r6:word64] = r3_r2
// DataOut: fp pc r1 r10 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3831 fp:<invalid> r2:<invalid> r8:r8 + 35 r4:<invalid>

l000017C1:
	branch C l000017C5
// DataOut: fp pc r1 r10 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3831 fp:<invalid> r2:<invalid> r8:r8 + 35 r4:<invalid> r6:r6 - 13

l000017C1_thunk_xEventGroupWaitBits:
	xEventGroupWaitBits(r1, r2, r9, r10, fp, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:pc + 3831 fp:<invalid> r2:<invalid> r8:r8 + 35 r4:<invalid> r6:r6 - 13

xEventGroupCreate_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000017C1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:pc + 3831 fp:<invalid> r2:<invalid> r8:r8 + 35 r4:<invalid> r6:r6 - 13

l000017B9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:pc + 3831 fp:<invalid> r2:<invalid> r8:r8 + 35 r4:<invalid>



void xEventGroupWaitBits(word32 r1, word32 r2, word32 r9, word32 r10, word32 fp, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp pc r1 r10 r2 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xEventGroupWaitBits_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

xEventGroupWaitBits_entry:
// DataOut: fp pc r1 r10 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000017C5:
	branch Z l000017C9
// DataOut: fp pc r1 r10 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000017C5_1:
	Mem30[r1:byte] = (byte) pc
	word32 r1_31 = r1 - __ror(r9, 1)
// DataOut: fp r10 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000017C9:
	branch Z l000017CD
// DataOut: fp r10 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid>

l000017CD:
	__syscall(0x00469046)
	branch C l000017D5
// DataOut: fp r10 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid>

l000017D1_1:
// DataOut: fp r10 r2
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid>

l000017D5:
	branch C l000017D9
// DataOut: fp r10 r2
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r9:r9 + 3319

l000017D9:
	branch NZV l000017DD
// DataOut: fp r10 r2
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r9:r9 + 3319

l000017DD:
	branch Z l000017E1
// DataOut: fp r10 r2
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r9:r9 + 3319

l000017DD_1:
// DataOut: fp r10 r2
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r9:r9 + 3319

l000017E1:
	branch Z l000017E5
// DataOut: fp r10 r2
// DataOut (flags): C
// SymbolicIn: sp:fp r1:<invalid> r9:r9 + 3319 r0:0x000017E5 & 0x000000F1

l000017E1_1:
	Mem24[r10 + 1232:byte] = (byte) r2
// DataOut: fp
// DataOut (flags): C
// SymbolicIn: sp:fp r1:<invalid> r9:r9 + 3319 r0:0x000017E5 & 0x000000F1

l000017E5:
	__syscall(0x00603505)
	branch C l000017ED
// DataOut: fp
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r9:r9 + 3319 r0:0x000017E5 & 0x000000F1 r10:r10 + 1232

l000017E9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r9:r9 + 3319 r0:0x000017E5 & 0x000000F1 r10:r10 + 1232

l000017ED:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r9:r9 + 3319 r0:0x000017E5 & 0x000000F1 r10:r10 + 1232 fp:fp + 7 r4:<invalid>

l000017D9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r9:r9 + 3319

l000017D5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r9:r9 + 3319

l000017C9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid>



void xEventGroupClearBits(word32 r0, word32 r2, word32 r3, word32 r4, word32 r6, word32 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV r0 r2 r3 r4 r6 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xEventGroupClearBits_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

xEventGroupClearBits_entry:
// DataOut: r0 r2 r3 r4 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00001875:
	branch Z l00001879
// DataOut: r0 r2 r3 r4 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00001879:
	branch V l0000187D
// DataOut: r0 r2 r3 r4 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000187D:
	branch C l00001881
// DataOut: r0 r2 r3 r4 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000187D_1:
	Mem33[r8 - 1534:byte] = (byte) r3
// DataOut: r0 r2 r3 r4 r6
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00001881:
	branch C l00001885
// DataOut: r0 r2 r3 r4 r6
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 - 1534

l00001881_1:
	Mem29[r4:word32] = r0
// DataOut: r2 r3 r6
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 - 1534

l00001885:
	branch ZC l00001889
// DataOut: r2 r3 r6
// DataOut (flags): V
// SymbolicIn: sp:fp r8:r8 - 1534 r4:r4 - 1258

l00001885_1:
	V = cond(~0x06000000) (alias)
// DataOut: r2 r3 r6
// DataOut (flags): V
// SymbolicIn: sp:fp r8:r8 - 1534 r4:r4 - 1258

l00001889:
	branch V l0000188D
// DataOut: r2 r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 1534 r4:r4 - 1258 r0:~0x06000000

l00001889_1:
	Mem21[r6:word64] = r3_r2
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 1534 r4:r4 - 1258 r0:~0x06000000

l0000188D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 1534 r4:r4 - 1258 r0:~0x06000000 r6:r6 - 142

l00001879_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001875_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xEventGroupSetBits(word32 r0, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp r0 r2 r3 r4 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xEventGroupSetBits_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

xEventGroupSetBits_entry:
// DataOut: fp r0 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001891:
	branch Z l00001895
// DataOut: fp r0 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001895:
	branch NZV l00001899
// DataOut: fp r0 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001899:
	branch C l0000189D
// DataOut: fp r0 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001899_1:
	Mem71[r8:word32] = r3
	Mem73[r8 + 4:word32] = r4
	Mem75[r8 + 8:word32] = r5
	Mem76[r8 + 12:word32] = r6
	Mem78[r8 + 16:word32] = r7
	Mem79[r8 + 20:word32] = r8
	Mem81[r8 + 24:word32] = fp
	Mem82[r8 + 28:word32] = fp
	r8 = r8 + 32
// DataOut: r0 r2 r3 r6 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000189D:
	branch Z l000018A1
// DataOut: r0 r2 r3 r6 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32

l000018A1:
	branch ZC l000018A5
// DataOut: r0 r2 r3 r6 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32

l000018A1_1:
	Mem69[r3:byte] = (byte) r2
// DataOut: r0 r2 r6 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32

l000018A5:
	branch C l000018A9
// DataOut: r0 r2 r6 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2)

l000018A5_1:
	r2 = 0x00108000 - r0
// DataOut: r0 r2 r6 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2)

l000018A9:
	branch Z l000018AD
// DataOut: r0 r2 r6 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0

l000018AD:
	branch Z l000018B1
// DataOut: r0 r2 r6 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0

l000018AD_1:
	Mem67[r2 - __ror(r0, 21):byte] = (byte) r0
// DataOut: r0 r2 r6 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0

l000018B1:
	branch Z l000018B5
// DataOut: r0 r2 r6 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0

l000018B5:
	branch N l000018B9
// DataOut: r0 r2 r6 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0

l000018B9:
	__syscall(0x007100F0)
	branch C l000018C1
// DataOut: r0 r2 r6 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0

l000018C1:
	branch C l000018C5
// DataOut: r0 r2 r6 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0

l000018C1_1:
	word32 r10_66 = r2 - __ror(r8, 12)
// DataOut: r0 r6 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0

l000018C5:
	branch ZC l000018C9
// DataOut: r0 r6 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0 r10:<invalid>

l000018C5_1:
	byte NZCV_59 = cond(r0 - (r6 >> 24) - C)
	C = NZCV_59 (alias)
	Z = NZCV_59 (alias)
// DataOut: r0 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0 r10:<invalid>

l000018C9:
	branch Z l000018CD
// DataOut: r0 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0 r10:<invalid> r0:<invalid>

l000018C9_1:
// DataOut: r0 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0 r10:<invalid> r0:<invalid>

l000018CD:
	branch C l000018D1
// DataOut: r0 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0 r10:<invalid> r0:<invalid> r1:0x000008E8

l000018CD_1:
	__msr(spsr, 0x000000F0)
// DataOut: r0
// DataOut (flags): NZV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0 r10:<invalid> r0:<invalid> r1:0x000008E8

l000018D1:
	word32 sp_28
	byte Z_29
	byte NZV_30
	byte C_31
	word32 r8_32
	word32 r3_33
	word32 r4_34
	word32 r5_35
	word32 r6_36
	word32 r7_37
	word32 fp_38
	byte ZC_39
	word32 r2_40
	word32 r0_41
	byte N_42
	word32 r10_43
	byte NZCV_44
	word32 r1_45
	word32 spsr_46
	byte NV_47
	word32 lr_48
	call fn010A1899 (retsize: 0;)
		uses: C_22,N_20,NV_18,NZCV_19,NZV_23,r0_25,r1_27,r10_14,r2_11,r3_9,r8_6,sp_1,Z_24,ZC_21
		defs: C_31,fp_38,lr_48,N_42,NV_47,NZCV_44,NZV_30,r0_41,r1_45,r10_43,r2_40,r3_33,r4_34,r5_35,r6_36,r7_37,r8_32,sp_28,spsr_46,Z_29,ZC_39
	branch Z_29 l000018D9
// DataOut: r0
// DataOut (flags): NV
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0 r10:<invalid> r0:<invalid> r1:0x000008E8

l000018D9:
	branch NV_47 l000018DD
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0 r10:<invalid> r0:<invalid> r1:0x000008E8

l000018D9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0 r10:<invalid> r0:<invalid> r1:0x000008E8

l000018DD:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0 r10:<invalid> r0:<invalid> r1:0x000008E8 lr:<invalid>

l000018D5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0 r10:<invalid> r0:<invalid> r1:0x000008E8

l000018BD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0

l000018B5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0

l000018B1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0

l000018A9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 32 r3:r3 - (r6 << 2) r2:0x00108000 - r0

l0000189D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 32

l00001895_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001891_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xEventGroupSync(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV r0 r3 r4 r6 r7 r8
// Preserved: sp
xEventGroupSync_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000018F9:
	branch ZC l000018FD
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000018F9_1:
	Mem159[r1:word32] = r0
	Mem160[r1 + 4:word32] = r3
	Mem161[r1 + 8:word32] = r5
	Mem162[r1 + 12:word32] = r6
	Mem163[r1 + 16:word32] = r7
	Mem164[r1 + 20:word32] = ip
	Mem165[r1 + 24:word32] = fp
	Mem166[r1 + 28:word32] = lr
	Mem167[r1 + 32:word32] = pc
// DataOut: fp r0 r1 r10 r2 r4 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000018FD:
	branch Z l00001901
// DataOut: fp r0 r1 r10 r2 r4 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000018FD_1:
	Mem157[r6:byte] = (byte) r0
	r6 = r6 - (r6 >> 10)
// DataOut: fp r0 r1 r10 r2 r4 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001901:
	__syscall(0x00461F46)
	branch N l00001909
// DataOut: fp r0 r1 r10 r2 r4 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10)
// LocalsOut: fp(32)

l00001909:
	branch C l0000190D
// DataOut: fp r0 r1 r10 r2 r4 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10)
// LocalsOut: fp(32)

l00001909_1:
	Mem150[r8:word32] = r1
	Mem151[r8 + 4:word32] = r2
	Mem152[r8 + 8:word32] = r6
	Mem153[r8 + 12:word32] = r10
	Mem154[r8 + 16:word32] = fp
	Mem155[r8 + 20:word32] = fp
// DataOut: r0 r10 r4 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10)

l0000190D:
	__syscall(0x00430C46)
	branch C l00001915
// DataOut: r0 r10 r4 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24

l00001915:
	branch C l00001919
// DataOut: r0 r10 r4 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24

l00001915_1:
// DataOut: r0 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24

l00001919:
	branch C l0000191D
// DataOut: r0 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid>

l0000191D:
	branch NV l00001921
// DataOut: r0 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid>

l00001921:
	branch NZV l00001925
// DataOut: r0 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid>

l00001925:
	branch C l00001925_then
	word32 sp_79
	word32 r1_81
	word32 r0_82
	word32 r3_83
	word32 r5_84
	word32 r6_85
	word32 r7_86
	word32 ip_87
	word32 lr_88
	word32 pc_89
	byte N_91
	word32 r8_93
	word32 r2_94
	word32 r10_95
	word32 fp_96
	word32 r4_97
	bool Q_98
	byte NV_99
	byte NZV_100
	byte NZCV_101
	byte V_102
	byte C_108
	byte Z_110
	byte ZC_111
	call fnFE07DCCD (retsize: 0;)
		uses: C,fp,ip,lr,N,NV,NZCV,NZV,pc,Q_12,r0,r1,r10,r2,r3_13,r4,r5,r6_5,r7,r8_9,sp_1,V,Z,ZC
		defs: C_92,fp_96,ip_87,lr_88,N_91,NV_99,NZCV_101,NZV_100,pc_89,Q_98,r0_82,r1_81,r10_95,r2_94,r3_83,r4_97,r5_84,r6_85,r7_86,r8_93,sp_79,V_102,Z_90,ZC_80
	return
// DataOut: r0 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid>

l00001925_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid>

l00001929:
	branch NV_99 l0000192D
// DataOut: r0 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid>

l00001929_1:
	byte NZCV_140 = cond((r6_85 >> 12) - r0_82 - C_108)
	C_108 = NZCV_140 (alias)
	ZC_111 = NZCV_140 (alias)
	Z_110 = NZCV_140 (alias)
// DataOut: r0
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid>

l0000192D:
	__syscall(0x001D2861)
	__syscall(0x00FB62F7)
	branch C_108 l00001939
// DataOut: r0
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid> r4:<invalid>

l00001939:
	branch ZC_111 l0000193D
// DataOut: r0
// DataOut (flags): NZV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid> r4:<invalid>

l00001939_1:
// DataOut:
// DataOut (flags): NZV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid> r4:<invalid>

l0000193D:
	branch Z_110 l0000193D_then
	word32 sp_112
	byte ZC_113
	word32 r1_114
	word32 r0_115
	word32 r3_116
	word32 r5_117
	word32 r6_118
	word32 r7_119
	word32 ip_120
	word32 lr_121
	word32 pc_122
	byte Z_123
	byte N_124
	byte C_125
	word32 r8_126
	word32 r2_127
	word32 r10_128
	word32 fp_129
	word32 r4_130
	bool Q_131
	byte NV_132
	byte NZV_133
	byte NZCV_134
	byte V_135
	call fn012C5E8D (retsize: 0;)
		uses: C_108,fp_96,ip_87,lr_88,N_109,NV_106,NZCV_104,NZV_105,pc_89,Q_98,r0_82,r1_81,r10_95,r2_94,r3_83,r4_107,r5_84,r6_85,r7_86,r8_93,sp_79,V_103,Z_110,ZC_111
		defs: C_125,fp_129,ip_120,lr_121,N_124,NV_132,NZCV_134,NZV_133,pc_122,Q_131,r0_115,r1_114,r10_128,r2_127,r3_116,r4_130,r5_117,r6_118,r7_119,r8_126,sp_112,V_135,Z_123,ZC_113
	return
// DataOut:
// DataOut (flags): NV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid> r4:<invalid> r0:r0 + 249

l0000193D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid> r4:<invalid> r0:r0 + 249

l00001941:
	branch N_124 l00001945
// DataOut:
// DataOut (flags): V
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid> r4:<invalid> r0:r0 + 249

l00001941_1:
	__syscall(0x00F3BF60)
// DataOut:
// DataOut (flags): V
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid> r4:<invalid> r0:r0 + 249

l00001945:
	branch V_135 l00001949
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid> r4:<invalid> r0:r0 + 249

l00001945_1:
	__syscall(0x00F3BF8F)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid> r4:<invalid> r0:r0 + 249

l00001949:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid> r4:<invalid> r0:r0 + 249

l00001935_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid> r4:<invalid>

l00001921_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid>

l0000191D_1:
	word32 sp_55
	byte ZC_56
	word32 r1_57
	word32 r0_58
	word32 r3_59
	word32 r5_60
	word32 r6_61
	word32 r7_62
	word32 ip_63
	word32 lr_64
	word32 pc_65
	byte Z_66
	byte N_67
	byte C_68
	word32 r8_69
	word32 r2_70
	word32 r10_71
	word32 fp_72
	word32 r4_73
	bool Q_74
	byte NV_75
	byte NZV_76
	byte NZCV_77
	byte V_78
	call (word32) Mem0[r7 + 3944:byte] (retsize: 0;)
		uses: C,fp,ip,lr,N,NV,NZCV,NZV,pc,Q_12,r0,r1,r10,r2,r3_13,r4,r5,r6_5,r7_40,r8_9,sp_1,V,Z,ZC
		defs: C_68,fp_72,ip_63,lr_64,N_67,NV_75,NZCV_77,NZV_76,pc_65,Q_74,r0_58,r1_57,r10_71,r2_70,r3_59,r4_73,r5_60,r6_61,r7_62,r8_69,sp_55,V_78,Z_66,ZC_56
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid>

xEventGroupSync_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid> r7:r7 + 3944 r4:<invalid> r0:r0 + 249

l00001919_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24 r3:<invalid>

l00001911_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10) r8:r8 + 24

l00001905_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 10)



void xEventGroupGetBitsFromISR(word32 r1, word32 r2, word32 r7, word32 r8, word32 fp, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp pc r1 r2 r7 r8 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xEventGroupGetBitsFromISR_entry:
// DataOut: fp pc r1 r2 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001989:
	branch N l0000198D
// DataOut: fp pc r1 r2 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001989_1:
	__syscall(0x008311F3)
// DataOut: fp pc r1 r2 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000198D:
	branch ZC l00001991
// DataOut: fp pc r1 r2 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000198D_1:
	fp = r2 & 0x000003C0
// DataOut: fp pc r1 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00001991:
	branch NZV l00001995
// DataOut: fp pc r1 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:r2 & 0x000003C0

l00001991_1:
	__syscall(0x008811F3)
// DataOut: fp pc r1 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:r2 & 0x000003C0

l00001995:
	branch NZV l00001999
// DataOut: fp pc r1 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:r2 & 0x000003C0

l00001995_1:
	__syscall(0x008F6FF3)
// DataOut: fp pc r1 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:r2 & 0x000003C0

l00001999:
	branch ZC l0000199D
// DataOut: fp pc r1 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:r2 & 0x000003C0

l00001999_1:
// DataOut: fp pc r1 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:r2 & 0x000003C0

l0000199D:
	branch Z l000019A1
// DataOut: fp pc r1 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:r2 & 0x000003C0 r4:0x000019A1 | 0x000003CC

l000019A1:
	branch Z l000019A1_thunk_vEventGroupDelete
// DataOut: fp pc r1 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:r2 & 0x000003C0 r4:0x000019A1 | 0x000003CC

l000019A1_thunk_vEventGroupDelete:
	vEventGroupDelete(r1, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:r2 & 0x000003C0 r4:0x000019A1 | 0x000003CC
// Terminates process

l000019A1_1:
	word32 r7_14 = r7 - __rcr(r8, 1, C)
// DataOut: fp pc r1 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:r2 & 0x000003C0 r4:0x000019A1 | 0x000003CC

l000019A1_thunk_vEventGroupDelete:
	vEventGroupDelete(r1, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:r2 & 0x000003C0 r4:0x000019A1 | 0x000003CC r7:<invalid>
// Terminates process

xEventGroupGetBitsFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000199D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:r2 & 0x000003C0 r4:0x000019A1 | 0x000003CC



void vEventGroupDelete(word32 r1, word32 fp, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp pc r1 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vEventGroupDelete_entry:
// DataOut: fp pc r1 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000019A5:
	__syscall(0x004604B5)
	branch V l000019AD
// DataOut: fp pc r1 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000019A9_1:
	byte NZCV_56 = cond(~0x000000F7)
	V = NZCV_56 (alias)
	Z = NZCV_56 (alias)
	NZV = NZCV_56 (alias)
	N = NZCV_56 (alias)
	C = NZCV_56 (alias)
// DataOut: fp pc r1 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000019AD:
	branch N l000019B1
// DataOut: fp pc r1 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:~0x000000F7

l000019AD_1:
	__syscall(0x00B13B68)
// DataOut: fp pc r1 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:~0x000000F7

l000019B1:
	branch C l000019B5
// DataOut: fp pc r1 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:~0x000000F7

l000019B1_1:
// DataOut: fp pc r1 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:~0x000000F7

l000019B5:
	branch V l000019B9
// DataOut: fp pc r1 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:~0x000000F7 r1:r1 r0:<invalid>

l000019B5_1:
	pc = ~0x000001A4
	byte NZCV_45 = cond(pc)
	Z = NZCV_45 (alias)
	NZV = NZCV_45 (alias)
	N = NZCV_45 (alias)
	C = NZCV_45 (alias)
// DataOut: fp pc r1 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:~0x000000F7 r1:r1 r0:<invalid>

l000019B9:
	branch Z l000019BD
// DataOut: fp pc r1 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:~0x000000F7 r1:r1 r0:<invalid> pc:~0x000001A4

l000019BD:
	branch C l000019C1
// DataOut: fp pc r1 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:~0x000000F7 r1:r1 r0:<invalid> pc:~0x000001A4

l000019BD_1:
	pc = r1 - (fp >> 14) - C
	byte NZCV_38 = cond(pc)
	Z = NZCV_38 (alias)
	NZV = NZCV_38 (alias)
	N = NZCV_38 (alias)
// DataOut: pc spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:~0x000000F7 r1:r1 r0:<invalid> pc:~0x000001A4

l000019C1:
	branch NZV l000019C5
// DataOut: pc spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r3:~0x000000F7 r1:r1 r0:<invalid> pc:<invalid>

l000019C5:
	branch Z l000019C9
// DataOut: pc spsr
// DataOut (flags): NC
// SymbolicIn: sp:fp r3:~0x000000F7 r1:r1 r0:<invalid> pc:<invalid>

l000019C9:
	branch N l000019CD
// DataOut: pc spsr
// DataOut (flags): C
// SymbolicIn: sp:fp r3:~0x000000F7 r1:r1 r0:<invalid> pc:<invalid>

l000019C9_1:
	__syscall(0x00F7FF40)
// DataOut: pc spsr
// DataOut (flags): C
// SymbolicIn: sp:fp r3:~0x000000F7 r1:r1 r0:<invalid> pc:<invalid>

l000019CD:
	__syscall(0x00BF00BA)
// DataOut: pc spsr
// DataOut (flags): C
// SymbolicIn: sp:fp r3:~0x000000F7 r1:r1 r0:<invalid> pc:<invalid>

l000019CD_thunk_vEventGroupSetBitsCallback:
	vEventGroupSetBitsCallback(pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x000000F7 r1:r1 r0:<invalid> pc:<invalid>
// Terminates process

vEventGroupDelete_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000019C5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x000000F7 r1:r1 r0:<invalid> pc:<invalid>

l000019C1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x000000F7 r1:r1 r0:<invalid> pc:<invalid>

l000019B9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x000000F7 r1:r1 r0:<invalid> pc:~0x000001A4



void vEventGroupSetBitsCallback(word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C pc spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vEventGroupSetBitsCallback_entry:
// DataOut: pc spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000019D1:
	branch C l000019D1_thunk_vEventGroupClearBitsCallback
// DataOut: pc spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000019D1_thunk_vEventGroupClearBitsCallback:
	vEventGroupClearBitsCallback(pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l000019D1_1:
// DataOut: pc spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000019D1_thunk_vEventGroupClearBitsCallback:
	vEventGroupClearBitsCallback(pc + 48, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r9:<invalid> r10:<invalid> fp:<invalid> ip:<invalid> lr:<invalid> pc:pc + 48
// Terminates process

vEventGroupSetBitsCallback_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vEventGroupClearBitsCallback(word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV pc spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vEventGroupClearBitsCallback_entry:
// DataOut: pc spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000019D5:
	branch Z l000019D9
// DataOut: pc spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000019D9:
	branch NZV l000019DD
// DataOut: pc spsr
// DataOut (flags): C
// SymbolicIn: sp:fp

l000019DD:
	branch C l000019E1
// DataOut: pc spsr
// DataOut (flags): C
// SymbolicIn: sp:fp

l000019DD_1:
	__msr(spsr, 0x000003FD)
// DataOut: pc
// DataOut (flags): C
// SymbolicIn: sp:fp

l000019E1:
	branch C l000019E5
// DataOut: pc
// DataOut (flags): C
// SymbolicIn: sp:fp

l000019E1_1:
// DataOut: pc
// DataOut (flags): C
// SymbolicIn: sp:fp

l000019E5:
	branch C l000019E9
// DataOut: pc
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x000035EA

l000019E9:
	word32 r0_7 = ~0x00000003
	branch r0_7 != 0x00000000 l000019F1
// DataOut: pc r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:0x000035EA

l000019ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:~0x00000003

l000019F1:
	branch r0_7 != 0x00000000 l000019F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000019F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000019F5:
	branch r0_7 != 0x00000000 l000019F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000019F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000019F9:
	branch r0_7 != 0x00000000 l000019FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000019F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000019FD:
	branch r0_7 != 0x00000000 l00001A01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000019FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A01:
	branch r0_7 != 0x00000000 l00001A05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A05:
	branch r0_7 != 0x00000000 l00001A09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A09:
	branch r0_7 != 0x00000000 l00001A0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A0D:
	branch r0_7 != 0x00000000 l00001A11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A11:
	branch r0_7 != 0x00000000 l00001A15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A15:
	branch r0_7 != 0x00000000 l00001A19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A19:
	branch r0_7 != 0x00000000 l00001A1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A1D:
	branch r0_7 != 0x00000000 l00001A21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A21:
	branch r0_7 != 0x00000000 l00001A25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A25:
	branch r0_7 != 0x00000000 l00001A29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A29:
	branch r0_7 != 0x00000000 l00001A2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A2D:
	branch r0_7 != 0x00000000 l00001A31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A31:
	branch r0_7 != 0x00000000 l00001A35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A35:
	branch r0_7 != 0x00000000 l00001A39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A39:
	branch r0_7 != 0x00000000 l00001A3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A3D:
	branch r0_7 != 0x00000000 l00001A41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A41:
	branch r0_7 != 0x00000000 l00001A45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A45:
	branch r0_7 != 0x00000000 l00001A49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A49:
	branch r0_7 != 0x00000000 l00001A4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A4D:
	branch r0_7 != 0x00000000 l00001A51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A51:
	branch r0_7 != 0x00000000 l00001A55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A55:
	branch r0_7 != 0x00000000 l00001A59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A59:
	branch r0_7 != 0x00000000 l00001A5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A5D:
	branch r0_7 != 0x00000000 l00001A61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A61:
	branch r0_7 != 0x00000000 l00001A65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A65:
	branch r0_7 != 0x00000000 l00001A69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A69:
	branch r0_7 != 0x00000000 l00001A6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A6D:
	branch r0_7 != 0x00000000 l00001A71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A71:
	branch r0_7 != 0x00000000 l00001A75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A75:
	branch r0_7 != 0x00000000 l00001A79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A79:
	branch r0_7 != 0x00000000 l00001A7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A7D:
	branch r0_7 != 0x00000000 l00001A81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A81:
	branch r0_7 != 0x00000000 l00001A85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A85:
	branch r0_7 != 0x00000000 l00001A89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A89:
	branch r0_7 != 0x00000000 l00001A8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A8D:
	branch r0_7 != 0x00000000 l00001A91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A91:
	branch r0_7 != 0x00000000 l00001A95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A95:
	branch r0_7 != 0x00000000 l00001A99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A99:
	branch r0_7 != 0x00000000 l00001A9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A9D:
	branch r0_7 != 0x00000000 l00001AA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001A9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AA1:
	branch r0_7 != 0x00000000 l00001AA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AA5:
	branch r0_7 != 0x00000000 l00001AA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AA9:
	branch r0_7 != 0x00000000 l00001AAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AAD:
	branch r0_7 != 0x00000000 l00001AB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AB1:
	branch r0_7 != 0x00000000 l00001AB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AB5:
	branch r0_7 != 0x00000000 l00001AB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AB9:
	branch r0_7 != 0x00000000 l00001ABD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001ABD:
	branch r0_7 != 0x00000000 l00001AC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001ABD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AC1:
	branch r0_7 != 0x00000000 l00001AC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AC5:
	branch r0_7 != 0x00000000 l00001AC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AC9:
	branch r0_7 != 0x00000000 l00001ACD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001ACD:
	branch r0_7 != 0x00000000 l00001AD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001ACD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AD1:
	branch r0_7 != 0x00000000 l00001AD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AD5:
	branch r0_7 != 0x00000000 l00001AD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AD9:
	branch r0_7 != 0x00000000 l00001ADD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001ADD:
	branch r0_7 != 0x00000000 l00001AE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001ADD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AE1:
	branch r0_7 != 0x00000000 l00001AE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AE5:
	branch r0_7 != 0x00000000 l00001AE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AE9:
	branch r0_7 != 0x00000000 l00001AED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AED:
	branch r0_7 != 0x00000000 l00001AF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AF1:
	branch r0_7 != 0x00000000 l00001AF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AF5:
	branch r0_7 != 0x00000000 l00001AF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AF9:
	branch r0_7 != 0x00000000 l00001AFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AFD:
	branch r0_7 != 0x00000000 l00001B01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001AFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B01:
	branch r0_7 != 0x00000000 l00001B05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B05:
	branch r0_7 != 0x00000000 l00001B09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B09:
	branch r0_7 != 0x00000000 l00001B0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B0D:
	branch r0_7 != 0x00000000 l00001B11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B11:
	branch r0_7 != 0x00000000 l00001B15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B15:
	branch r0_7 != 0x00000000 l00001B19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B19:
	branch r0_7 != 0x00000000 l00001B1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B1D:
	branch r0_7 != 0x00000000 l00001B21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B21:
	branch r0_7 != 0x00000000 l00001B25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B25:
	branch r0_7 != 0x00000000 l00001B29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B29:
	branch r0_7 != 0x00000000 l00001B2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B2D:
	branch r0_7 != 0x00000000 l00001B31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B31:
	branch r0_7 != 0x00000000 l00001B35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B35:
	branch r0_7 != 0x00000000 l00001B39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B39:
	branch r0_7 != 0x00000000 l00001B3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B3D:
	branch r0_7 != 0x00000000 l00001B41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B41:
	branch r0_7 != 0x00000000 l00001B45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B45:
	branch r0_7 != 0x00000000 l00001B49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B49:
	branch r0_7 != 0x00000000 l00001B4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B4D:
	branch r0_7 != 0x00000000 l00001B51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B51:
	branch r0_7 != 0x00000000 l00001B55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B55:
	branch r0_7 != 0x00000000 l00001B59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B59:
	branch r0_7 != 0x00000000 l00001B5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B5D:
	branch r0_7 != 0x00000000 l00001B61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B61:
	branch r0_7 != 0x00000000 l00001B65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B65:
	branch r0_7 != 0x00000000 l00001B69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B69:
	branch r0_7 != 0x00000000 l00001B6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B6D:
	branch r0_7 != 0x00000000 l00001B71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B71:
	branch r0_7 != 0x00000000 l00001B75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B75:
	branch r0_7 != 0x00000000 l00001B79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B79:
	branch r0_7 != 0x00000000 l00001B7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B7D:
	branch r0_7 != 0x00000000 l00001B81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B81:
	branch r0_7 != 0x00000000 l00001B85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B85:
	branch r0_7 != 0x00000000 l00001B89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B89:
	branch r0_7 != 0x00000000 l00001B8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B8D:
	branch r0_7 != 0x00000000 l00001B91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B91:
	branch r0_7 != 0x00000000 l00001B95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B95:
	branch r0_7 != 0x00000000 l00001B99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B99:
	branch r0_7 != 0x00000000 l00001B9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B9D:
	branch r0_7 != 0x00000000 l00001BA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001B9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BA1:
	branch r0_7 != 0x00000000 l00001BA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BA5:
	branch r0_7 != 0x00000000 l00001BA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BA9:
	branch r0_7 != 0x00000000 l00001BAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BAD:
	branch r0_7 != 0x00000000 l00001BB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BB1:
	branch r0_7 != 0x00000000 l00001BB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BB5:
	branch r0_7 != 0x00000000 l00001BB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BB9:
	branch r0_7 != 0x00000000 l00001BBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BBD:
	branch r0_7 != 0x00000000 l00001BC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BC1:
	branch r0_7 != 0x00000000 l00001BC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BC5:
	branch r0_7 != 0x00000000 l00001BC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BC9:
	branch r0_7 != 0x00000000 l00001BCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BCD:
	branch r0_7 != 0x00000000 l00001BD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BD1:
	branch r0_7 != 0x00000000 l00001BD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BD5:
	branch r0_7 != 0x00000000 l00001BD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BD9:
	branch r0_7 != 0x00000000 l00001BDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BDD:
	branch r0_7 != 0x00000000 l00001BE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BE1:
	branch r0_7 != 0x00000000 l00001BE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BE5:
	branch r0_7 != 0x00000000 l00001BE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BE9:
	branch r0_7 != 0x00000000 l00001BED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BED:
	branch r0_7 != 0x00000000 l00001BF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BF1:
	branch r0_7 != 0x00000000 l00001BF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BF5:
	branch r0_7 != 0x00000000 l00001BF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BF9:
	branch r0_7 != 0x00000000 l00001BFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BFD:
	branch r0_7 != 0x00000000 l00001C01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001BFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C01:
	branch r0_7 != 0x00000000 l00001C05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C05:
	branch r0_7 != 0x00000000 l00001C09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C09:
	branch r0_7 != 0x00000000 l00001C0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C0D:
	branch r0_7 != 0x00000000 l00001C11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C11:
	branch r0_7 != 0x00000000 l00001C15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C15:
	branch r0_7 != 0x00000000 l00001C19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C19:
	branch r0_7 != 0x00000000 l00001C1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C1D:
	branch r0_7 != 0x00000000 l00001C21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C21:
	branch r0_7 != 0x00000000 l00001C25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C25:
	branch r0_7 != 0x00000000 l00001C29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C29:
	branch r0_7 != 0x00000000 l00001C2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C2D:
	branch r0_7 != 0x00000000 l00001C31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C31:
	branch r0_7 != 0x00000000 l00001C35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C35:
	branch r0_7 != 0x00000000 l00001C39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C39:
	branch r0_7 != 0x00000000 l00001C3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C3D:
	branch r0_7 != 0x00000000 l00001C41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C41:
	branch r0_7 != 0x00000000 l00001C45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C45:
	branch r0_7 != 0x00000000 l00001C49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C49:
	branch r0_7 != 0x00000000 l00001C4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C4D:
	branch r0_7 != 0x00000000 l00001C51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C51:
	branch r0_7 != 0x00000000 l00001C55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C55:
	branch r0_7 != 0x00000000 l00001C59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C59:
	branch r0_7 != 0x00000000 l00001C5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C5D:
	branch r0_7 != 0x00000000 l00001C61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C61:
	branch r0_7 != 0x00000000 l00001C65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C65:
	branch r0_7 != 0x00000000 l00001C69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C69:
	branch r0_7 != 0x00000000 l00001C6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C6D:
	branch r0_7 != 0x00000000 l00001C71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C71:
	branch r0_7 != 0x00000000 l00001C75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C75:
	branch r0_7 != 0x00000000 l00001C79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C79:
	branch r0_7 != 0x00000000 l00001C7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C7D:
	branch r0_7 != 0x00000000 l00001C81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C81:
	branch r0_7 != 0x00000000 l00001C85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C85:
	branch r0_7 != 0x00000000 l00001C89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C89:
	branch r0_7 != 0x00000000 l00001C8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C8D:
	branch r0_7 != 0x00000000 l00001C91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C91:
	branch r0_7 != 0x00000000 l00001C95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C95:
	branch r0_7 != 0x00000000 l00001C99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C99:
	branch r0_7 != 0x00000000 l00001C9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C9D:
	branch r0_7 != 0x00000000 l00001CA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001C9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CA1:
	branch r0_7 != 0x00000000 l00001CA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CA5:
	branch r0_7 != 0x00000000 l00001CA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CA9:
	branch r0_7 != 0x00000000 l00001CAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CAD:
	branch r0_7 != 0x00000000 l00001CB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CB1:
	branch r0_7 != 0x00000000 l00001CB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CB5:
	branch r0_7 != 0x00000000 l00001CB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CB9:
	branch r0_7 != 0x00000000 l00001CBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CBD:
	branch r0_7 != 0x00000000 l00001CC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CC1:
	branch r0_7 != 0x00000000 l00001CC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CC5:
	branch r0_7 != 0x00000000 l00001CC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CC9:
	branch r0_7 != 0x00000000 l00001CCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CCD:
	branch r0_7 != 0x00000000 l00001CD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CD1:
	branch r0_7 != 0x00000000 l00001CD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CD5:
	branch r0_7 != 0x00000000 l00001CD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CD9:
	branch r0_7 != 0x00000000 l00001CDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CDD:
	branch r0_7 != 0x00000000 l00001CE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CE1:
	branch r0_7 != 0x00000000 l00001CE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CE5:
	branch r0_7 != 0x00000000 l00001CE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CE9:
	branch r0_7 != 0x00000000 l00001CED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CED:
	branch r0_7 != 0x00000000 l00001CF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CF1:
	branch r0_7 != 0x00000000 l00001CF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CF5:
	branch r0_7 != 0x00000000 l00001CF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CF9:
	branch r0_7 != 0x00000000 l00001CFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CFD:
	branch r0_7 != 0x00000000 l00001D01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001CFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D01:
	branch r0_7 != 0x00000000 l00001D05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D05:
	branch r0_7 != 0x00000000 l00001D09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D09:
	branch r0_7 != 0x00000000 l00001D0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D0D:
	branch r0_7 != 0x00000000 l00001D11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D11:
	branch r0_7 != 0x00000000 l00001D15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D15:
	branch r0_7 != 0x00000000 l00001D19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D19:
	branch r0_7 != 0x00000000 l00001D1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D1D:
	branch r0_7 != 0x00000000 l00001D21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D21:
	branch r0_7 != 0x00000000 l00001D25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D25:
	branch r0_7 != 0x00000000 l00001D29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D29:
	branch r0_7 != 0x00000000 l00001D2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D2D:
	branch r0_7 != 0x00000000 l00001D31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D31:
	branch r0_7 != 0x00000000 l00001D35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D35:
	branch r0_7 != 0x00000000 l00001D39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D39:
	branch r0_7 != 0x00000000 l00001D3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D3D:
	branch r0_7 != 0x00000000 l00001D41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D41:
	branch r0_7 != 0x00000000 l00001D45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D45:
	branch r0_7 != 0x00000000 l00001D49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D49:
	branch r0_7 != 0x00000000 l00001D4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D4D:
	branch r0_7 != 0x00000000 l00001D51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D51:
	branch r0_7 != 0x00000000 l00001D55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D55:
	branch r0_7 != 0x00000000 l00001D59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D59:
	branch r0_7 != 0x00000000 l00001D5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D5D:
	branch r0_7 != 0x00000000 l00001D61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D61:
	branch r0_7 != 0x00000000 l00001D65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D65:
	branch r0_7 != 0x00000000 l00001D69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D69:
	branch r0_7 != 0x00000000 l00001D6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D6D:
	branch r0_7 != 0x00000000 l00001D71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D71:
	branch r0_7 != 0x00000000 l00001D75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D75:
	branch r0_7 != 0x00000000 l00001D79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D79:
	branch r0_7 != 0x00000000 l00001D7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D7D:
	branch r0_7 != 0x00000000 l00001D81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D81:
	branch r0_7 != 0x00000000 l00001D85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D85:
	branch r0_7 != 0x00000000 l00001D89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D89:
	branch r0_7 != 0x00000000 l00001D8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D8D:
	branch r0_7 != 0x00000000 l00001D91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D91:
	branch r0_7 != 0x00000000 l00001D95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D95:
	branch r0_7 != 0x00000000 l00001D99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D99:
	branch r0_7 != 0x00000000 l00001D9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D9D:
	branch r0_7 != 0x00000000 l00001DA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001D9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DA1:
	branch r0_7 != 0x00000000 l00001DA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DA5:
	branch r0_7 != 0x00000000 l00001DA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DA9:
	branch r0_7 != 0x00000000 l00001DAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DAD:
	branch r0_7 != 0x00000000 l00001DB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DB1:
	branch r0_7 != 0x00000000 l00001DB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DB5:
	branch r0_7 != 0x00000000 l00001DB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DB9:
	branch r0_7 != 0x00000000 l00001DBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DBD:
	branch r0_7 != 0x00000000 l00001DC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DC1:
	branch r0_7 != 0x00000000 l00001DC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DC5:
	branch r0_7 != 0x00000000 l00001DC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DC9:
	branch r0_7 != 0x00000000 l00001DCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DCD:
	branch r0_7 != 0x00000000 l00001DD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DD1:
	branch r0_7 != 0x00000000 l00001DD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DD5:
	branch r0_7 != 0x00000000 l00001DD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DD9:
	branch r0_7 != 0x00000000 l00001DDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DDD:
	branch r0_7 != 0x00000000 l00001DE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DE1:
	branch r0_7 != 0x00000000 l00001DE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DE5:
	branch r0_7 != 0x00000000 l00001DE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DE9:
	branch r0_7 != 0x00000000 l00001DED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DED:
	branch r0_7 != 0x00000000 l00001DF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DF1:
	branch r0_7 != 0x00000000 l00001DF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DF5:
	branch r0_7 != 0x00000000 l00001DF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DF9:
	branch r0_7 != 0x00000000 l00001DFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DFD:
	branch r0_7 != 0x00000000 l00001E01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001DFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E01:
	branch r0_7 != 0x00000000 l00001E05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E05:
	branch r0_7 != 0x00000000 l00001E09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E09:
	branch r0_7 != 0x00000000 l00001E0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E0D:
	branch r0_7 != 0x00000000 l00001E11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E11:
	branch r0_7 != 0x00000000 l00001E15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E15:
	branch r0_7 != 0x00000000 l00001E19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E19:
	branch r0_7 != 0x00000000 l00001E1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E1D:
	branch r0_7 != 0x00000000 l00001E21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E21:
	branch r0_7 != 0x00000000 l00001E25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E25:
	branch r0_7 != 0x00000000 l00001E29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E29:
	branch r0_7 != 0x00000000 l00001E2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E2D:
	branch r0_7 != 0x00000000 l00001E31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E31:
	branch r0_7 != 0x00000000 l00001E35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E35:
	branch r0_7 != 0x00000000 l00001E39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E39:
	branch r0_7 != 0x00000000 l00001E3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E3D:
	branch r0_7 != 0x00000000 l00001E41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E41:
	branch r0_7 != 0x00000000 l00001E45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E45:
	branch r0_7 != 0x00000000 l00001E49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E49:
	branch r0_7 != 0x00000000 l00001E4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E4D:
	branch r0_7 != 0x00000000 l00001E51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E51:
	branch r0_7 != 0x00000000 l00001E55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E55:
	branch r0_7 != 0x00000000 l00001E59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E59:
	branch r0_7 != 0x00000000 l00001E5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E5D:
	branch r0_7 != 0x00000000 l00001E61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E61:
	branch r0_7 != 0x00000000 l00001E65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E65:
	branch r0_7 != 0x00000000 l00001E69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E69:
	branch r0_7 != 0x00000000 l00001E6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E6D:
	branch r0_7 != 0x00000000 l00001E71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E71:
	branch r0_7 != 0x00000000 l00001E75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E75:
	branch r0_7 != 0x00000000 l00001E79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E79:
	branch r0_7 != 0x00000000 l00001E7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E7D:
	branch r0_7 != 0x00000000 l00001E81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E81:
	branch r0_7 != 0x00000000 l00001E85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E85:
	branch r0_7 != 0x00000000 l00001E89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E89:
	branch r0_7 != 0x00000000 l00001E8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E8D:
	branch r0_7 != 0x00000000 l00001E91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E91:
	branch r0_7 != 0x00000000 l00001E95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E95:
	branch r0_7 != 0x00000000 l00001E99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E99:
	branch r0_7 != 0x00000000 l00001E9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E9D:
	branch r0_7 != 0x00000000 l00001EA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001E9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EA1:
	branch r0_7 != 0x00000000 l00001EA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EA5:
	branch r0_7 != 0x00000000 l00001EA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EA9:
	branch r0_7 != 0x00000000 l00001EAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EAD:
	branch r0_7 != 0x00000000 l00001EB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EB1:
	branch r0_7 != 0x00000000 l00001EB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EB5:
	branch r0_7 != 0x00000000 l00001EB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EB9:
	branch r0_7 != 0x00000000 l00001EBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EBD:
	branch r0_7 != 0x00000000 l00001EC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EC1:
	branch r0_7 != 0x00000000 l00001EC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EC5:
	branch r0_7 != 0x00000000 l00001EC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EC9:
	branch r0_7 != 0x00000000 l00001ECD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001ECD:
	branch r0_7 != 0x00000000 l00001ED1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001ECD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001ED1:
	branch r0_7 != 0x00000000 l00001ED5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001ED1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001ED5:
	branch r0_7 != 0x00000000 l00001ED9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001ED5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001ED9:
	branch r0_7 != 0x00000000 l00001EDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001ED9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EDD:
	branch r0_7 != 0x00000000 l00001EE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EE1:
	branch r0_7 != 0x00000000 l00001EE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EE5:
	branch r0_7 != 0x00000000 l00001EE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EE9:
	branch r0_7 != 0x00000000 l00001EED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EED:
	branch r0_7 != 0x00000000 l00001EF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EF1:
	branch r0_7 != 0x00000000 l00001EF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EF5:
	branch r0_7 != 0x00000000 l00001EF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EF9:
	branch r0_7 != 0x00000000 l00001EFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EFD:
	branch r0_7 != 0x00000000 l00001F01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001EFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F01:
	branch r0_7 != 0x00000000 l00001F05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F05:
	branch r0_7 != 0x00000000 l00001F09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F09:
	branch r0_7 != 0x00000000 l00001F0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F0D:
	branch r0_7 != 0x00000000 l00001F11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F11:
	branch r0_7 != 0x00000000 l00001F15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F15:
	branch r0_7 != 0x00000000 l00001F19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F19:
	branch r0_7 != 0x00000000 l00001F1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F1D:
	branch r0_7 != 0x00000000 l00001F21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F21:
	branch r0_7 != 0x00000000 l00001F25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F25:
	branch r0_7 != 0x00000000 l00001F29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F29:
	branch r0_7 != 0x00000000 l00001F2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F2D:
	branch r0_7 != 0x00000000 l00001F31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F31:
	branch r0_7 != 0x00000000 l00001F35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F35:
	branch r0_7 != 0x00000000 l00001F39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F39:
	branch r0_7 != 0x00000000 l00001F3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F3D:
	branch r0_7 != 0x00000000 l00001F41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F41:
	branch r0_7 != 0x00000000 l00001F45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F45:
	branch r0_7 != 0x00000000 l00001F49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F49:
	branch r0_7 != 0x00000000 l00001F4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F4D:
	branch r0_7 != 0x00000000 l00001F51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F51:
	branch r0_7 != 0x00000000 l00001F55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F55:
	branch r0_7 != 0x00000000 l00001F59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F59:
	branch r0_7 != 0x00000000 l00001F5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F5D:
	branch r0_7 != 0x00000000 l00001F61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F61:
	branch r0_7 != 0x00000000 l00001F65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F65:
	branch r0_7 != 0x00000000 l00001F69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F69:
	branch r0_7 != 0x00000000 l00001F6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F6D:
	branch r0_7 != 0x00000000 l00001F71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F71:
	branch r0_7 != 0x00000000 l00001F75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F75:
	branch r0_7 != 0x00000000 l00001F79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F79:
	branch r0_7 != 0x00000000 l00001F7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F7D:
	branch r0_7 != 0x00000000 l00001F81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F81:
	branch r0_7 != 0x00000000 l00001F85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F85:
	branch r0_7 != 0x00000000 l00001F89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F89:
	branch r0_7 != 0x00000000 l00001F8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F8D:
	branch r0_7 != 0x00000000 l00001F91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F91:
	branch r0_7 != 0x00000000 l00001F95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F95:
	branch r0_7 != 0x00000000 l00001F99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F99:
	branch r0_7 != 0x00000000 l00001F9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F9D:
	branch r0_7 != 0x00000000 l00001FA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001F9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FA1:
	branch r0_7 != 0x00000000 l00001FA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FA5:
	branch r0_7 != 0x00000000 l00001FA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FA9:
	branch r0_7 != 0x00000000 l00001FAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FAD:
	branch r0_7 != 0x00000000 l00001FB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FB1:
	branch r0_7 != 0x00000000 l00001FB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FB5:
	branch r0_7 != 0x00000000 l00001FB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FB9:
	branch r0_7 != 0x00000000 l00001FBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FBD:
	branch r0_7 != 0x00000000 l00001FC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FC1:
	branch r0_7 != 0x00000000 l00001FC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FC5:
	branch r0_7 != 0x00000000 l00001FC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FC9:
	branch r0_7 != 0x00000000 l00001FCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FCD:
	branch r0_7 != 0x00000000 l00001FD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FD1:
	branch r0_7 != 0x00000000 l00001FD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FD5:
	branch r0_7 != 0x00000000 l00001FD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FD9:
	branch r0_7 != 0x00000000 l00001FDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FDD:
	branch r0_7 != 0x00000000 l00001FE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FE1:
	branch r0_7 != 0x00000000 l00001FE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FE5:
	branch r0_7 != 0x00000000 l00001FE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FE9:
	branch r0_7 != 0x00000000 l00001FED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FED:
	branch r0_7 != 0x00000000 l00001FF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FF1:
	branch r0_7 != 0x00000000 l00001FF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FF5:
	branch r0_7 != 0x00000000 l00001FF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FF9:
	branch r0_7 != 0x00000000 l00001FFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FFD:
	branch r0_7 != 0x00000000 l00002001
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00001FFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002001:
	branch r0_7 != 0x00000000 l00002005
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002001_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002005:
	branch r0_7 != 0x00000000 l00002009
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002005_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002009:
	branch r0_7 != 0x00000000 l0000200D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002009_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000200D:
	branch r0_7 != 0x00000000 l00002011
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000200D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002011:
	branch r0_7 != 0x00000000 l00002015
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002011_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002015:
	branch r0_7 != 0x00000000 l00002019
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002015_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002019:
	branch r0_7 != 0x00000000 l0000201D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002019_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000201D:
	branch r0_7 != 0x00000000 l00002021
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000201D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002021:
	branch r0_7 != 0x00000000 l00002025
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002021_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002025:
	branch r0_7 != 0x00000000 l00002029
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002025_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002029:
	branch r0_7 != 0x00000000 l0000202D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002029_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000202D:
	branch r0_7 != 0x00000000 l00002031
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000202D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002031:
	branch r0_7 != 0x00000000 l00002035
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002031_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002035:
	branch r0_7 != 0x00000000 l00002039
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002035_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002039:
	branch r0_7 != 0x00000000 l0000203D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002039_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000203D:
	branch r0_7 != 0x00000000 l00002041
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000203D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002041:
	branch r0_7 != 0x00000000 l00002045
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002041_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002045:
	branch r0_7 != 0x00000000 l00002049
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002045_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002049:
	branch r0_7 != 0x00000000 l0000204D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002049_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000204D:
	branch r0_7 != 0x00000000 l00002051
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000204D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002051:
	branch r0_7 != 0x00000000 l00002055
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002051_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002055:
	branch r0_7 != 0x00000000 l00002059
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002055_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002059:
	branch r0_7 != 0x00000000 l0000205D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002059_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000205D:
	branch r0_7 != 0x00000000 l00002061
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000205D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002061:
	branch r0_7 != 0x00000000 l00002065
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002061_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002065:
	branch r0_7 != 0x00000000 l00002069
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002065_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002069:
	branch r0_7 != 0x00000000 l0000206D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002069_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000206D:
	branch r0_7 != 0x00000000 l00002071
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000206D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002071:
	branch r0_7 != 0x00000000 l00002075
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002071_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002075:
	branch r0_7 != 0x00000000 l00002079
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002075_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002079:
	branch r0_7 != 0x00000000 l0000207D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002079_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000207D:
	branch r0_7 != 0x00000000 l00002081
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000207D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002081:
	branch r0_7 != 0x00000000 l00002085
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002081_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002085:
	branch r0_7 != 0x00000000 l00002089
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002085_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002089:
	branch r0_7 != 0x00000000 l0000208D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002089_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000208D:
	branch r0_7 != 0x00000000 l00002091
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000208D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002091:
	branch r0_7 != 0x00000000 l00002095
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002091_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002095:
	branch r0_7 != 0x00000000 l00002099
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002095_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002099:
	branch r0_7 != 0x00000000 l0000209D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002099_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000209D:
	branch r0_7 != 0x00000000 l000020A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000209D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020A1:
	branch r0_7 != 0x00000000 l000020A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020A5:
	branch r0_7 != 0x00000000 l000020A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020A9:
	branch r0_7 != 0x00000000 l000020AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020AD:
	branch r0_7 != 0x00000000 l000020B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020B1:
	branch r0_7 != 0x00000000 l000020B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020B5:
	branch r0_7 != 0x00000000 l000020B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020B9:
	branch r0_7 != 0x00000000 l000020BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020BD:
	branch r0_7 != 0x00000000 l000020C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020C1:
	branch r0_7 != 0x00000000 l000020C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020C5:
	branch r0_7 != 0x00000000 l000020C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020C9:
	branch r0_7 != 0x00000000 l000020CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020CD:
	branch r0_7 != 0x00000000 l000020D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020D1:
	branch r0_7 != 0x00000000 l000020D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020D5:
	branch r0_7 != 0x00000000 l000020D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020D9:
	branch r0_7 != 0x00000000 l000020DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020DD:
	branch r0_7 != 0x00000000 l000020E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020E1:
	branch r0_7 != 0x00000000 l000020E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020E5:
	branch r0_7 != 0x00000000 l000020E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020E9:
	branch r0_7 != 0x00000000 l000020ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020ED:
	branch r0_7 != 0x00000000 l000020F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020F1:
	branch r0_7 != 0x00000000 l000020F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020F5:
	branch r0_7 != 0x00000000 l000020F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020F9:
	branch r0_7 != 0x00000000 l000020FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020FD:
	branch r0_7 != 0x00000000 l00002101
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000020FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002101:
	branch r0_7 != 0x00000000 l00002105
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002101_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002105:
	branch r0_7 != 0x00000000 l00002109
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002105_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002109:
	branch r0_7 != 0x00000000 l0000210D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002109_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000210D:
	branch r0_7 != 0x00000000 l00002111
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000210D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002111:
	branch r0_7 != 0x00000000 l00002115
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002111_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002115:
	branch r0_7 != 0x00000000 l00002119
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002115_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002119:
	branch r0_7 != 0x00000000 l0000211D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002119_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000211D:
	branch r0_7 != 0x00000000 l00002121
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000211D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002121:
	branch r0_7 != 0x00000000 l00002125
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002121_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002125:
	branch r0_7 != 0x00000000 l00002129
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002125_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002129:
	branch r0_7 != 0x00000000 l0000212D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002129_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000212D:
	branch r0_7 != 0x00000000 l00002131
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000212D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002131:
	branch r0_7 != 0x00000000 l00002135
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002131_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002135:
	branch r0_7 != 0x00000000 l00002139
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002135_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002139:
	branch r0_7 != 0x00000000 l0000213D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002139_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000213D:
	branch r0_7 != 0x00000000 l00002141
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000213D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002141:
	branch r0_7 != 0x00000000 l00002145
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002141_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002145:
	branch r0_7 != 0x00000000 l00002149
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002145_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002149:
	branch r0_7 != 0x00000000 l0000214D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002149_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000214D:
	branch r0_7 != 0x00000000 l00002151
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000214D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002151:
	branch r0_7 != 0x00000000 l00002155
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002151_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002155:
	branch r0_7 != 0x00000000 l00002159
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002155_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002159:
	branch r0_7 != 0x00000000 l0000215D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002159_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000215D:
	branch r0_7 != 0x00000000 l00002161
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000215D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002161:
	branch r0_7 != 0x00000000 l00002165
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002161_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002165:
	branch r0_7 != 0x00000000 l00002169
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002165_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002169:
	branch r0_7 != 0x00000000 l0000216D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002169_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000216D:
	branch r0_7 != 0x00000000 l00002171
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000216D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002171:
	branch r0_7 != 0x00000000 l00002175
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002171_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002175:
	branch r0_7 != 0x00000000 l00002179
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002175_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002179:
	branch r0_7 != 0x00000000 l0000217D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002179_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000217D:
	branch r0_7 != 0x00000000 l00002181
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000217D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002181:
	branch r0_7 != 0x00000000 l00002185
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002181_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002185:
	branch r0_7 != 0x00000000 l00002189
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002185_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002189:
	branch r0_7 != 0x00000000 l0000218D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002189_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000218D:
	branch r0_7 != 0x00000000 l00002191
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000218D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002191:
	branch r0_7 != 0x00000000 l00002195
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002191_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002195:
	branch r0_7 != 0x00000000 l00002199
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002195_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002199:
	branch r0_7 != 0x00000000 l0000219D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002199_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000219D:
	branch r0_7 != 0x00000000 l000021A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000219D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021A1:
	branch r0_7 != 0x00000000 l000021A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021A5:
	branch r0_7 != 0x00000000 l000021A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021A9:
	branch r0_7 != 0x00000000 l000021AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021AD:
	branch r0_7 != 0x00000000 l000021B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021B1:
	branch r0_7 != 0x00000000 l000021B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021B5:
	branch r0_7 != 0x00000000 l000021B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021B9:
	branch r0_7 != 0x00000000 l000021BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021BD:
	branch r0_7 != 0x00000000 l000021C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021C1:
	branch r0_7 != 0x00000000 l000021C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021C5:
	branch r0_7 != 0x00000000 l000021C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021C9:
	branch r0_7 != 0x00000000 l000021CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021CD:
	branch r0_7 != 0x00000000 l000021D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021D1:
	branch r0_7 != 0x00000000 l000021D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021D5:
	branch r0_7 != 0x00000000 l000021D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021D9:
	branch r0_7 != 0x00000000 l000021DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021DD:
	branch r0_7 != 0x00000000 l000021E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021E1:
	branch r0_7 != 0x00000000 l000021E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021E5:
	branch r0_7 != 0x00000000 l000021E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021E9:
	branch r0_7 != 0x00000000 l000021ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021ED:
	branch r0_7 != 0x00000000 l000021F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021F1:
	branch r0_7 != 0x00000000 l000021F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021F5:
	branch r0_7 != 0x00000000 l000021F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021F9:
	branch r0_7 != 0x00000000 l000021FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021FD:
	branch r0_7 != 0x00000000 l00002201
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000021FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002201:
	branch r0_7 != 0x00000000 l00002205
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002201_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002205:
	branch r0_7 != 0x00000000 l00002209
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002205_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002209:
	branch r0_7 != 0x00000000 l0000220D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002209_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000220D:
	branch r0_7 != 0x00000000 l00002211
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000220D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002211:
	branch r0_7 != 0x00000000 l00002215
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002211_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002215:
	branch r0_7 != 0x00000000 l00002219
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002215_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002219:
	branch r0_7 != 0x00000000 l0000221D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002219_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000221D:
	branch r0_7 != 0x00000000 l00002221
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000221D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002221:
	branch r0_7 != 0x00000000 l00002225
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002221_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002225:
	branch r0_7 != 0x00000000 l00002229
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002225_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002229:
	branch r0_7 != 0x00000000 l0000222D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002229_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000222D:
	branch r0_7 != 0x00000000 l00002231
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000222D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002231:
	branch r0_7 != 0x00000000 l00002235
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002231_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002235:
	branch r0_7 != 0x00000000 l00002239
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002235_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002239:
	branch r0_7 != 0x00000000 l0000223D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002239_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000223D:
	branch r0_7 != 0x00000000 l00002241
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000223D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002241:
	branch r0_7 != 0x00000000 l00002245
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002241_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002245:
	branch r0_7 != 0x00000000 l00002249
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002245_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002249:
	branch r0_7 != 0x00000000 l0000224D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002249_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000224D:
	branch r0_7 != 0x00000000 l00002251
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000224D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002251:
	branch r0_7 != 0x00000000 l00002255
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002251_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002255:
	branch r0_7 != 0x00000000 l00002259
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002255_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002259:
	branch r0_7 != 0x00000000 l0000225D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002259_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000225D:
	branch r0_7 != 0x00000000 l00002261
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000225D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002261:
	branch r0_7 != 0x00000000 l00002265
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002261_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002265:
	branch r0_7 != 0x00000000 l00002269
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002265_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002269:
	branch r0_7 != 0x00000000 l0000226D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002269_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000226D:
	branch r0_7 != 0x00000000 l00002271
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000226D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002271:
	branch r0_7 != 0x00000000 l00002275
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002271_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002275:
	branch r0_7 != 0x00000000 l00002279
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002275_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002279:
	branch r0_7 != 0x00000000 l0000227D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002279_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000227D:
	branch r0_7 != 0x00000000 l00002281
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000227D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002281:
	branch r0_7 != 0x00000000 l00002285
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002281_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002285:
	branch r0_7 != 0x00000000 l00002289
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002285_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002289:
	branch r0_7 != 0x00000000 l0000228D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002289_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000228D:
	branch r0_7 != 0x00000000 l00002291
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000228D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002291:
	branch r0_7 != 0x00000000 l00002295
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002291_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002295:
	branch r0_7 != 0x00000000 l00002299
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002295_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002299:
	branch r0_7 != 0x00000000 l0000229D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002299_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000229D:
	branch r0_7 != 0x00000000 l000022A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000229D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022A1:
	branch r0_7 != 0x00000000 l000022A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022A5:
	branch r0_7 != 0x00000000 l000022A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022A9:
	branch r0_7 != 0x00000000 l000022AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022AD:
	branch r0_7 != 0x00000000 l000022B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022B1:
	branch r0_7 != 0x00000000 l000022B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022B5:
	branch r0_7 != 0x00000000 l000022B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022B9:
	branch r0_7 != 0x00000000 l000022BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022BD:
	branch r0_7 != 0x00000000 l000022C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022C1:
	branch r0_7 != 0x00000000 l000022C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022C5:
	branch r0_7 != 0x00000000 l000022C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022C9:
	branch r0_7 != 0x00000000 l000022CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022CD:
	branch r0_7 != 0x00000000 l000022D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022D1:
	branch r0_7 != 0x00000000 l000022D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022D5:
	branch r0_7 != 0x00000000 l000022D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022D9:
	branch r0_7 != 0x00000000 l000022DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022DD:
	branch r0_7 != 0x00000000 l000022E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022E1:
	branch r0_7 != 0x00000000 l000022E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022E5:
	branch r0_7 != 0x00000000 l000022E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022E9:
	branch r0_7 != 0x00000000 l000022ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022ED:
	branch r0_7 != 0x00000000 l000022F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022F1:
	branch r0_7 != 0x00000000 l000022F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022F5:
	branch r0_7 != 0x00000000 l000022F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022F9:
	branch r0_7 != 0x00000000 l000022FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022FD:
	branch r0_7 != 0x00000000 l00002301
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000022FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002301:
	branch r0_7 != 0x00000000 l00002305
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002301_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002305:
	branch r0_7 != 0x00000000 l00002309
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002305_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002309:
	branch r0_7 != 0x00000000 l0000230D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002309_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000230D:
	branch r0_7 != 0x00000000 l00002311
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000230D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002311:
	branch r0_7 != 0x00000000 l00002315
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002311_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002315:
	branch r0_7 != 0x00000000 l00002319
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002315_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002319:
	branch r0_7 != 0x00000000 l0000231D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002319_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000231D:
	branch r0_7 != 0x00000000 l00002321
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000231D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002321:
	branch r0_7 != 0x00000000 l00002325
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002321_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002325:
	branch r0_7 != 0x00000000 l00002329
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002325_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002329:
	branch r0_7 != 0x00000000 l0000232D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002329_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000232D:
	branch r0_7 != 0x00000000 l00002331
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000232D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002331:
	branch r0_7 != 0x00000000 l00002335
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002331_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002335:
	branch r0_7 != 0x00000000 l00002339
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002335_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002339:
	branch r0_7 != 0x00000000 l0000233D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002339_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000233D:
	branch r0_7 != 0x00000000 l00002341
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000233D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002341:
	branch r0_7 != 0x00000000 l00002345
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002341_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002345:
	branch r0_7 != 0x00000000 l00002349
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002345_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002349:
	branch r0_7 != 0x00000000 l0000234D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002349_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000234D:
	branch r0_7 != 0x00000000 l00002351
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000234D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002351:
	branch r0_7 != 0x00000000 l00002355
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002351_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002355:
	branch r0_7 != 0x00000000 l00002359
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002355_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002359:
	branch r0_7 != 0x00000000 l0000235D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002359_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000235D:
	branch r0_7 != 0x00000000 l00002361
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000235D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002361:
	branch r0_7 != 0x00000000 l00002365
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002361_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002365:
	branch r0_7 != 0x00000000 l00002369
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002365_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002369:
	branch r0_7 != 0x00000000 l0000236D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002369_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000236D:
	branch r0_7 != 0x00000000 l00002371
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000236D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002371:
	branch r0_7 != 0x00000000 l00002375
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002371_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002375:
	branch r0_7 != 0x00000000 l00002379
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002375_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002379:
	branch r0_7 != 0x00000000 l0000237D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002379_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000237D:
	branch r0_7 != 0x00000000 l00002381
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000237D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002381:
	branch r0_7 != 0x00000000 l00002385
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002381_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002385:
	branch r0_7 != 0x00000000 l00002389
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002385_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002389:
	branch r0_7 != 0x00000000 l0000238D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002389_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000238D:
	branch r0_7 != 0x00000000 l00002391
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000238D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002391:
	branch r0_7 != 0x00000000 l00002395
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002391_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002395:
	branch r0_7 != 0x00000000 l00002399
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002395_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002399:
	branch r0_7 != 0x00000000 l0000239D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002399_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000239D:
	branch r0_7 != 0x00000000 l000023A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000239D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023A1:
	branch r0_7 != 0x00000000 l000023A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023A5:
	branch r0_7 != 0x00000000 l000023A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023A9:
	branch r0_7 != 0x00000000 l000023AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023AD:
	branch r0_7 != 0x00000000 l000023B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023B1:
	branch r0_7 != 0x00000000 l000023B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023B5:
	branch r0_7 != 0x00000000 l000023B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023B9:
	branch r0_7 != 0x00000000 l000023BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023BD:
	branch r0_7 != 0x00000000 l000023C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023C1:
	branch r0_7 != 0x00000000 l000023C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023C5:
	branch r0_7 != 0x00000000 l000023C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023C9:
	branch r0_7 != 0x00000000 l000023CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023CD:
	branch r0_7 != 0x00000000 l000023D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023D1:
	branch r0_7 != 0x00000000 l000023D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023D5:
	branch r0_7 != 0x00000000 l000023D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023D9:
	branch r0_7 != 0x00000000 l000023DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023DD:
	branch r0_7 != 0x00000000 l000023E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023E1:
	branch r0_7 != 0x00000000 l000023E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023E5:
	branch r0_7 != 0x00000000 l000023E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023E9:
	branch r0_7 != 0x00000000 l000023ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023ED:
	branch r0_7 != 0x00000000 l000023F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023F1:
	branch r0_7 != 0x00000000 l000023F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023F5:
	branch r0_7 != 0x00000000 l000023F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023F9:
	branch r0_7 != 0x00000000 l000023FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023FD:
	branch r0_7 != 0x00000000 l00002401
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000023FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002401:
	branch r0_7 != 0x00000000 l00002405
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002401_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002405:
	branch r0_7 != 0x00000000 l00002409
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002405_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002409:
	branch r0_7 != 0x00000000 l0000240D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002409_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000240D:
	branch r0_7 != 0x00000000 l00002411
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000240D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002411:
	branch r0_7 != 0x00000000 l00002415
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002411_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002415:
	branch r0_7 != 0x00000000 l00002419
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002415_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002419:
	branch r0_7 != 0x00000000 l0000241D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002419_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000241D:
	branch r0_7 != 0x00000000 l00002421
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000241D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002421:
	branch r0_7 != 0x00000000 l00002425
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002421_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002425:
	branch r0_7 != 0x00000000 l00002429
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002425_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002429:
	branch r0_7 != 0x00000000 l0000242D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002429_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000242D:
	branch r0_7 != 0x00000000 l00002431
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000242D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002431:
	branch r0_7 != 0x00000000 l00002435
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002431_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002435:
	branch r0_7 != 0x00000000 l00002439
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002435_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002439:
	branch r0_7 != 0x00000000 l0000243D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002439_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000243D:
	branch r0_7 != 0x00000000 l00002441
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000243D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002441:
	branch r0_7 != 0x00000000 l00002445
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002441_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002445:
	branch r0_7 != 0x00000000 l00002449
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002445_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002449:
	branch r0_7 != 0x00000000 l0000244D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002449_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000244D:
	branch r0_7 != 0x00000000 l00002451
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000244D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002451:
	branch r0_7 != 0x00000000 l00002455
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002451_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002455:
	branch r0_7 != 0x00000000 l00002459
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002455_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002459:
	branch r0_7 != 0x00000000 l0000245D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002459_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000245D:
	branch r0_7 != 0x00000000 l00002461
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000245D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002461:
	branch r0_7 != 0x00000000 l00002465
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002461_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002465:
	branch r0_7 != 0x00000000 l00002469
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002465_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002469:
	branch r0_7 != 0x00000000 l0000246D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002469_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000246D:
	branch r0_7 != 0x00000000 l00002471
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000246D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002471:
	branch r0_7 != 0x00000000 l00002475
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002471_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002475:
	branch r0_7 != 0x00000000 l00002479
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002475_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002479:
	branch r0_7 != 0x00000000 l0000247D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002479_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000247D:
	branch r0_7 != 0x00000000 l00002481
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000247D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002481:
	branch r0_7 != 0x00000000 l00002485
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002481_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002485:
	branch r0_7 != 0x00000000 l00002489
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002485_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002489:
	branch r0_7 != 0x00000000 l0000248D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002489_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000248D:
	branch r0_7 != 0x00000000 l00002491
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000248D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002491:
	branch r0_7 != 0x00000000 l00002495
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002491_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002495:
	branch r0_7 != 0x00000000 l00002499
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002495_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002499:
	branch r0_7 != 0x00000000 l0000249D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002499_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000249D:
	branch r0_7 != 0x00000000 l000024A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000249D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024A1:
	branch r0_7 != 0x00000000 l000024A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024A5:
	branch r0_7 != 0x00000000 l000024A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024A9:
	branch r0_7 != 0x00000000 l000024AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024AD:
	branch r0_7 != 0x00000000 l000024B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024B1:
	branch r0_7 != 0x00000000 l000024B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024B5:
	branch r0_7 != 0x00000000 l000024B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024B9:
	branch r0_7 != 0x00000000 l000024BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024BD:
	branch r0_7 != 0x00000000 l000024C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024C1:
	branch r0_7 != 0x00000000 l000024C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024C5:
	branch r0_7 != 0x00000000 l000024C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024C9:
	branch r0_7 != 0x00000000 l000024CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024CD:
	branch r0_7 != 0x00000000 l000024D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024D1:
	branch r0_7 != 0x00000000 l000024D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024D5:
	branch r0_7 != 0x00000000 l000024D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024D9:
	branch r0_7 != 0x00000000 l000024DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024DD:
	branch r0_7 != 0x00000000 l000024E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024E1:
	branch r0_7 != 0x00000000 l000024E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024E5:
	branch r0_7 != 0x00000000 l000024E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024E9:
	branch r0_7 != 0x00000000 l000024ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024ED:
	branch r0_7 != 0x00000000 l000024F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024F1:
	branch r0_7 != 0x00000000 l000024F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024F5:
	branch r0_7 != 0x00000000 l000024F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024F9:
	branch r0_7 != 0x00000000 l000024FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024FD:
	branch r0_7 != 0x00000000 l00002501
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000024FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002501:
	branch r0_7 != 0x00000000 l00002505
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002501_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002505:
	branch r0_7 != 0x00000000 l00002509
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002505_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002509:
	branch r0_7 != 0x00000000 l0000250D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002509_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000250D:
	branch r0_7 != 0x00000000 l00002511
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000250D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002511:
	branch r0_7 != 0x00000000 l00002515
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002511_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002515:
	branch r0_7 != 0x00000000 l00002519
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002515_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002519:
	branch r0_7 != 0x00000000 l0000251D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002519_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000251D:
	branch r0_7 != 0x00000000 l00002521
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000251D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002521:
	branch r0_7 != 0x00000000 l00002525
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002521_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002525:
	branch r0_7 != 0x00000000 l00002529
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002525_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002529:
	branch r0_7 != 0x00000000 l0000252D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002529_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000252D:
	branch r0_7 != 0x00000000 l00002531
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000252D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002531:
	branch r0_7 != 0x00000000 l00002535
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002531_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002535:
	branch r0_7 != 0x00000000 l00002539
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002535_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002539:
	branch r0_7 != 0x00000000 l0000253D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002539_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000253D:
	branch r0_7 != 0x00000000 l00002541
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000253D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002541:
	branch r0_7 != 0x00000000 l00002545
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002541_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002545:
	branch r0_7 != 0x00000000 l00002549
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002545_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002549:
	branch r0_7 != 0x00000000 l0000254D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002549_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000254D:
	branch r0_7 != 0x00000000 l00002551
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000254D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002551:
	branch r0_7 != 0x00000000 l00002555
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002551_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002555:
	branch r0_7 != 0x00000000 l00002559
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002555_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002559:
	branch r0_7 != 0x00000000 l0000255D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002559_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000255D:
	branch r0_7 != 0x00000000 l00002561
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000255D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002561:
	branch r0_7 != 0x00000000 l00002565
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002561_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002565:
	branch r0_7 != 0x00000000 l00002569
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002565_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002569:
	branch r0_7 != 0x00000000 l0000256D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002569_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000256D:
	branch r0_7 != 0x00000000 l00002571
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000256D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002571:
	branch r0_7 != 0x00000000 l00002575
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002571_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002575:
	branch r0_7 != 0x00000000 l00002579
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002575_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002579:
	branch r0_7 != 0x00000000 l0000257D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002579_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000257D:
	branch r0_7 != 0x00000000 l00002581
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000257D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002581:
	branch r0_7 != 0x00000000 l00002585
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002581_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002585:
	branch r0_7 != 0x00000000 l00002589
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002585_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002589:
	branch r0_7 != 0x00000000 l0000258D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002589_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000258D:
	branch r0_7 != 0x00000000 l00002591
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000258D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002591:
	branch r0_7 != 0x00000000 l00002595
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002591_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002595:
	branch r0_7 != 0x00000000 l00002599
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002595_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002599:
	branch r0_7 != 0x00000000 l0000259D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002599_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000259D:
	branch r0_7 != 0x00000000 l000025A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000259D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025A1:
	branch r0_7 != 0x00000000 l000025A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025A5:
	branch r0_7 != 0x00000000 l000025A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025A9:
	branch r0_7 != 0x00000000 l000025AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025AD:
	branch r0_7 != 0x00000000 l000025B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025B1:
	branch r0_7 != 0x00000000 l000025B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025B5:
	branch r0_7 != 0x00000000 l000025B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025B9:
	branch r0_7 != 0x00000000 l000025BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025BD:
	branch r0_7 != 0x00000000 l000025C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025C1:
	branch r0_7 != 0x00000000 l000025C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025C5:
	branch r0_7 != 0x00000000 l000025C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025C9:
	branch r0_7 != 0x00000000 l000025CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025CD:
	branch r0_7 != 0x00000000 l000025D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025D1:
	branch r0_7 != 0x00000000 l000025D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025D5:
	branch r0_7 != 0x00000000 l000025D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025D9:
	branch r0_7 != 0x00000000 l000025DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025DD:
	branch r0_7 != 0x00000000 l000025E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025E1:
	branch r0_7 != 0x00000000 l000025E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025E5:
	branch r0_7 != 0x00000000 l000025E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025E9:
	branch r0_7 != 0x00000000 l000025ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025ED:
	branch r0_7 != 0x00000000 l000025F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025F1:
	branch r0_7 != 0x00000000 l000025F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025F5:
	branch r0_7 != 0x00000000 l000025F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025F9:
	branch r0_7 != 0x00000000 l000025FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025FD:
	branch r0_7 != 0x00000000 l00002601
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000025FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002601:
	branch r0_7 != 0x00000000 l00002605
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002601_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002605:
	branch r0_7 != 0x00000000 l00002609
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002605_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002609:
	branch r0_7 != 0x00000000 l0000260D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002609_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000260D:
	branch r0_7 != 0x00000000 l00002611
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000260D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002611:
	branch r0_7 != 0x00000000 l00002615
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002611_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002615:
	branch r0_7 != 0x00000000 l00002619
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002615_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002619:
	branch r0_7 != 0x00000000 l0000261D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002619_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000261D:
	branch r0_7 != 0x00000000 l00002621
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000261D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002621:
	branch r0_7 != 0x00000000 l00002625
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002621_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002625:
	branch r0_7 != 0x00000000 l00002629
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002625_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002629:
	branch r0_7 != 0x00000000 l0000262D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002629_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000262D:
	branch r0_7 != 0x00000000 l00002631
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000262D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002631:
	branch r0_7 != 0x00000000 l00002635
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002631_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002635:
	branch r0_7 != 0x00000000 l00002639
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002635_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002639:
	branch r0_7 != 0x00000000 l0000263D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002639_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000263D:
	branch r0_7 != 0x00000000 l00002641
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000263D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002641:
	branch r0_7 != 0x00000000 l00002645
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002641_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002645:
	branch r0_7 != 0x00000000 l00002649
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002645_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002649:
	branch r0_7 != 0x00000000 l0000264D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002649_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000264D:
	branch r0_7 != 0x00000000 l00002651
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000264D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002651:
	branch r0_7 != 0x00000000 l00002655
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002651_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002655:
	branch r0_7 != 0x00000000 l00002659
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002655_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002659:
	branch r0_7 != 0x00000000 l0000265D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002659_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000265D:
	branch r0_7 != 0x00000000 l00002661
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000265D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002661:
	branch r0_7 != 0x00000000 l00002665
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002661_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002665:
	branch r0_7 != 0x00000000 l00002669
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002665_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002669:
	branch r0_7 != 0x00000000 l0000266D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002669_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000266D:
	branch r0_7 != 0x00000000 l00002671
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000266D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002671:
	branch r0_7 != 0x00000000 l00002675
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002671_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002675:
	branch r0_7 != 0x00000000 l00002679
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002675_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002679:
	branch r0_7 != 0x00000000 l0000267D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002679_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000267D:
	branch r0_7 != 0x00000000 l00002681
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000267D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002681:
	branch r0_7 != 0x00000000 l00002685
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002681_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002685:
	branch r0_7 != 0x00000000 l00002689
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002685_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002689:
	branch r0_7 != 0x00000000 l0000268D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002689_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000268D:
	branch r0_7 != 0x00000000 l00002691
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000268D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002691:
	branch r0_7 != 0x00000000 l00002695
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002691_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002695:
	branch r0_7 != 0x00000000 l00002699
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002695_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002699:
	branch r0_7 != 0x00000000 l0000269D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002699_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000269D:
	branch r0_7 != 0x00000000 l000026A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000269D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026A1:
	branch r0_7 != 0x00000000 l000026A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026A5:
	branch r0_7 != 0x00000000 l000026A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026A9:
	branch r0_7 != 0x00000000 l000026AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026AD:
	branch r0_7 != 0x00000000 l000026B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026B1:
	branch r0_7 != 0x00000000 l000026B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026B5:
	branch r0_7 != 0x00000000 l000026B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026B9:
	branch r0_7 != 0x00000000 l000026BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026BD:
	branch r0_7 != 0x00000000 l000026C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026C1:
	branch r0_7 != 0x00000000 l000026C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026C5:
	branch r0_7 != 0x00000000 l000026C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026C9:
	branch r0_7 != 0x00000000 l000026CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026CD:
	branch r0_7 != 0x00000000 l000026D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026D1:
	branch r0_7 != 0x00000000 l000026D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026D5:
	branch r0_7 != 0x00000000 l000026D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026D9:
	branch r0_7 != 0x00000000 l000026DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026DD:
	branch r0_7 != 0x00000000 l000026E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026E1:
	branch r0_7 != 0x00000000 l000026E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026E5:
	branch r0_7 != 0x00000000 l000026E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026E9:
	branch r0_7 != 0x00000000 l000026ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026ED:
	branch r0_7 != 0x00000000 l000026F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026F1:
	branch r0_7 != 0x00000000 l000026F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026F5:
	branch r0_7 != 0x00000000 l000026F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026F9:
	branch r0_7 != 0x00000000 l000026FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026FD:
	branch r0_7 != 0x00000000 l00002701
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000026FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002701:
	branch r0_7 != 0x00000000 l00002705
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002701_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002705:
	branch r0_7 != 0x00000000 l00002709
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002705_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002709:
	branch r0_7 != 0x00000000 l0000270D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002709_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000270D:
	branch r0_7 != 0x00000000 l00002711
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000270D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002711:
	branch r0_7 != 0x00000000 l00002715
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002711_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002715:
	branch r0_7 != 0x00000000 l00002719
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002715_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002719:
	branch r0_7 != 0x00000000 l0000271D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002719_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000271D:
	branch r0_7 != 0x00000000 l00002721
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000271D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002721:
	branch r0_7 != 0x00000000 l00002725
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002721_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002725:
	branch r0_7 != 0x00000000 l00002729
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002725_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002729:
	branch r0_7 != 0x00000000 l0000272D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002729_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000272D:
	branch r0_7 != 0x00000000 l00002731
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000272D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002731:
	branch r0_7 != 0x00000000 l00002735
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002731_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002735:
	branch r0_7 != 0x00000000 l00002739
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002735_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002739:
	branch r0_7 != 0x00000000 l0000273D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002739_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000273D:
	branch r0_7 != 0x00000000 l00002741
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000273D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002741:
	branch r0_7 != 0x00000000 l00002745
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002741_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002745:
	branch r0_7 != 0x00000000 l00002749
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002745_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002749:
	branch r0_7 != 0x00000000 l0000274D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002749_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000274D:
	branch r0_7 != 0x00000000 l00002751
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000274D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002751:
	branch r0_7 != 0x00000000 l00002755
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002751_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002755:
	branch r0_7 != 0x00000000 l00002759
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002755_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002759:
	branch r0_7 != 0x00000000 l0000275D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002759_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000275D:
	branch r0_7 != 0x00000000 l00002761
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000275D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002761:
	branch r0_7 != 0x00000000 l00002765
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002761_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002765:
	branch r0_7 != 0x00000000 l00002769
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002765_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002769:
	branch r0_7 != 0x00000000 l0000276D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002769_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000276D:
	branch r0_7 != 0x00000000 l00002771
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000276D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002771:
	branch r0_7 != 0x00000000 l00002775
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002771_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002775:
	branch r0_7 != 0x00000000 l00002779
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002775_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002779:
	branch r0_7 != 0x00000000 l0000277D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002779_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000277D:
	branch r0_7 != 0x00000000 l00002781
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000277D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002781:
	branch r0_7 != 0x00000000 l00002785
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002781_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002785:
	branch r0_7 != 0x00000000 l00002789
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002785_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002789:
	branch r0_7 != 0x00000000 l0000278D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002789_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000278D:
	branch r0_7 != 0x00000000 l00002791
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000278D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002791:
	branch r0_7 != 0x00000000 l00002795
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002791_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002795:
	branch r0_7 != 0x00000000 l00002799
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002795_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002799:
	branch r0_7 != 0x00000000 l0000279D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002799_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000279D:
	branch r0_7 != 0x00000000 l000027A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000279D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027A1:
	branch r0_7 != 0x00000000 l000027A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027A5:
	branch r0_7 != 0x00000000 l000027A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027A9:
	branch r0_7 != 0x00000000 l000027AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027AD:
	branch r0_7 != 0x00000000 l000027B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027B1:
	branch r0_7 != 0x00000000 l000027B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027B5:
	branch r0_7 != 0x00000000 l000027B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027B9:
	branch r0_7 != 0x00000000 l000027BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027BD:
	branch r0_7 != 0x00000000 l000027C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027C1:
	branch r0_7 != 0x00000000 l000027C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027C5:
	branch r0_7 != 0x00000000 l000027C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027C9:
	branch r0_7 != 0x00000000 l000027CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027CD:
	branch r0_7 != 0x00000000 l000027D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027D1:
	branch r0_7 != 0x00000000 l000027D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027D5:
	branch r0_7 != 0x00000000 l000027D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027D9:
	branch r0_7 != 0x00000000 l000027DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027DD:
	branch r0_7 != 0x00000000 l000027E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027E1:
	branch r0_7 != 0x00000000 l000027E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027E5:
	branch r0_7 != 0x00000000 l000027E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027E9:
	branch r0_7 != 0x00000000 l000027ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027ED:
	branch r0_7 != 0x00000000 l000027F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027F1:
	branch r0_7 != 0x00000000 l000027F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027F5:
	branch r0_7 != 0x00000000 l000027F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027F9:
	branch r0_7 != 0x00000000 l000027FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027FD:
	branch r0_7 != 0x00000000 l00002801
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000027FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002801:
	branch r0_7 != 0x00000000 l00002805
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002801_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002805:
	branch r0_7 != 0x00000000 l00002809
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002805_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002809:
	branch r0_7 != 0x00000000 l0000280D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002809_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000280D:
	branch r0_7 != 0x00000000 l00002811
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000280D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002811:
	branch r0_7 != 0x00000000 l00002815
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002811_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002815:
	branch r0_7 != 0x00000000 l00002819
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002815_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002819:
	branch r0_7 != 0x00000000 l0000281D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002819_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000281D:
	branch r0_7 != 0x00000000 l00002821
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000281D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002821:
	branch r0_7 != 0x00000000 l00002825
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002821_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002825:
	branch r0_7 != 0x00000000 l00002829
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002825_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002829:
	branch r0_7 != 0x00000000 l0000282D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002829_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000282D:
	branch r0_7 != 0x00000000 l00002831
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000282D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002831:
	branch r0_7 != 0x00000000 l00002835
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002831_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002835:
	branch r0_7 != 0x00000000 l00002839
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002835_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002839:
	branch r0_7 != 0x00000000 l0000283D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002839_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000283D:
	branch r0_7 != 0x00000000 l00002841
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000283D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002841:
	branch r0_7 != 0x00000000 l00002845
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002841_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002845:
	branch r0_7 != 0x00000000 l00002849
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002845_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002849:
	branch r0_7 != 0x00000000 l0000284D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002849_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000284D:
	branch r0_7 != 0x00000000 l00002851
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000284D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002851:
	branch r0_7 != 0x00000000 l00002855
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002851_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002855:
	branch r0_7 != 0x00000000 l00002859
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002855_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002859:
	branch r0_7 != 0x00000000 l0000285D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002859_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000285D:
	branch r0_7 != 0x00000000 l00002861
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000285D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002861:
	branch r0_7 != 0x00000000 l00002865
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002861_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002865:
	branch r0_7 != 0x00000000 l00002869
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002865_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002869:
	branch r0_7 != 0x00000000 l0000286D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002869_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000286D:
	branch r0_7 != 0x00000000 l00002871
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000286D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002871:
	branch r0_7 != 0x00000000 l00002875
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002871_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002875:
	branch r0_7 != 0x00000000 l00002879
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002875_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002879:
	branch r0_7 != 0x00000000 l0000287D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002879_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000287D:
	branch r0_7 != 0x00000000 l00002881
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000287D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002881:
	branch r0_7 != 0x00000000 l00002885
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002881_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002885:
	branch r0_7 != 0x00000000 l00002889
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002885_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002889:
	branch r0_7 != 0x00000000 l0000288D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002889_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000288D:
	branch r0_7 != 0x00000000 l00002891
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000288D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002891:
	branch r0_7 != 0x00000000 l00002895
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002891_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002895:
	branch r0_7 != 0x00000000 l00002899
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002895_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002899:
	branch r0_7 != 0x00000000 l0000289D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002899_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000289D:
	branch r0_7 != 0x00000000 l000028A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000289D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028A1:
	branch r0_7 != 0x00000000 l000028A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028A5:
	branch r0_7 != 0x00000000 l000028A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028A9:
	branch r0_7 != 0x00000000 l000028AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028AD:
	branch r0_7 != 0x00000000 l000028B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028B1:
	branch r0_7 != 0x00000000 l000028B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028B5:
	branch r0_7 != 0x00000000 l000028B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028B9:
	branch r0_7 != 0x00000000 l000028BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028BD:
	branch r0_7 != 0x00000000 l000028C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028C1:
	branch r0_7 != 0x00000000 l000028C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028C5:
	branch r0_7 != 0x00000000 l000028C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028C9:
	branch r0_7 != 0x00000000 l000028CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028CD:
	branch r0_7 != 0x00000000 l000028D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028D1:
	branch r0_7 != 0x00000000 l000028D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028D5:
	branch r0_7 != 0x00000000 l000028D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028D9:
	branch r0_7 != 0x00000000 l000028DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028DD:
	branch r0_7 != 0x00000000 l000028E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028E1:
	branch r0_7 != 0x00000000 l000028E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028E5:
	branch r0_7 != 0x00000000 l000028E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028E9:
	branch r0_7 != 0x00000000 l000028ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028ED:
	branch r0_7 != 0x00000000 l000028F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028F1:
	branch r0_7 != 0x00000000 l000028F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028F5:
	branch r0_7 != 0x00000000 l000028F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028F9:
	branch r0_7 != 0x00000000 l000028FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028FD:
	branch r0_7 != 0x00000000 l00002901
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000028FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002901:
	branch r0_7 != 0x00000000 l00002905
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002901_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002905:
	branch r0_7 != 0x00000000 l00002909
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002905_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002909:
	branch r0_7 != 0x00000000 l0000290D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002909_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000290D:
	branch r0_7 != 0x00000000 l00002911
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000290D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002911:
	branch r0_7 != 0x00000000 l00002915
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002911_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002915:
	branch r0_7 != 0x00000000 l00002919
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002915_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002919:
	branch r0_7 != 0x00000000 l0000291D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002919_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000291D:
	branch r0_7 != 0x00000000 l00002921
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000291D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002921:
	branch r0_7 != 0x00000000 l00002925
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002921_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002925:
	branch r0_7 != 0x00000000 l00002929
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002925_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002929:
	branch r0_7 != 0x00000000 l0000292D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002929_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000292D:
	branch r0_7 != 0x00000000 l00002931
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000292D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002931:
	branch r0_7 != 0x00000000 l00002935
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002931_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002935:
	branch r0_7 != 0x00000000 l00002939
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002935_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002939:
	branch r0_7 != 0x00000000 l0000293D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002939_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000293D:
	branch r0_7 != 0x00000000 l00002941
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000293D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002941:
	branch r0_7 != 0x00000000 l00002945
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002941_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002945:
	branch r0_7 != 0x00000000 l00002949
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002945_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002949:
	branch r0_7 != 0x00000000 l0000294D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002949_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000294D:
	branch r0_7 != 0x00000000 l00002951
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000294D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002951:
	branch r0_7 != 0x00000000 l00002955
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002951_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002955:
	branch r0_7 != 0x00000000 l00002959
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002955_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002959:
	branch r0_7 != 0x00000000 l0000295D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002959_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000295D:
	branch r0_7 != 0x00000000 l00002961
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000295D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002961:
	branch r0_7 != 0x00000000 l00002965
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002961_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002965:
	branch r0_7 != 0x00000000 l00002969
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002965_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002969:
	branch r0_7 != 0x00000000 l0000296D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002969_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000296D:
	branch r0_7 != 0x00000000 l00002971
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000296D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002971:
	branch r0_7 != 0x00000000 l00002975
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002971_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002975:
	branch r0_7 != 0x00000000 l00002979
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002975_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002979:
	branch Test(NE,Z) l0000297D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002979_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000297D:
	branch Test(NE,Z) l00002981
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000297D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002981:
	branch Test(NE,Z) l00002985
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002981_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002985:
	branch Test(NE,Z) l00002989
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002985_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002989:
	branch Test(NE,Z) l0000298D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002989_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000298D:
	branch Test(NE,Z) l00002991
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000298D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002991:
	branch Test(NE,Z) l00002995
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002991_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002995:
	branch Test(NE,Z) l00002999
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002995_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002999:
	branch Test(NE,Z) l0000299D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002999_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000299D:
	branch Test(NE,Z) l000029A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000299D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029A1:
	branch Test(NE,Z) l000029A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029A5:
	branch Test(NE,Z) l000029A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029A9:
	branch Test(NE,Z) l000029AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029AD:
	branch Test(NE,Z) l000029B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029B1:
	branch Test(NE,Z) l000029B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029B5:
	branch Test(NE,Z) l000029B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029B9:
	branch Test(NE,Z) l000029BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029BD:
	branch Test(NE,Z) l000029C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029C1:
	branch Test(NE,Z) l000029C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029C5:
	branch Test(NE,Z) l000029C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029C9:
	branch Test(NE,Z) l000029CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029CD:
	branch Test(NE,Z) l000029D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029D1:
	branch Test(NE,Z) l000029D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029D5:
	branch Test(NE,Z) l000029D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029D9:
	branch Test(NE,Z) l000029DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029DD:
	branch Test(NE,Z) l000029E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029E1:
	branch Test(NE,Z) l000029E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029E5:
	branch Test(NE,Z) l000029E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029E9:
	branch Test(NE,Z) l000029ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029ED:
	branch Test(NE,Z) l000029F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029F1:
	branch Test(NE,Z) l000029F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029F5:
	branch Test(NE,Z) l000029F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029F9:
	branch Test(NE,Z) l000029FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029FD:
	branch Test(NE,Z) l00002A01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000029FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A01:
	branch Test(NE,Z) l00002A05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A05:
	branch Test(NE,Z) l00002A09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A09:
	branch Test(NE,Z) l00002A0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A0D:
	branch Test(NE,Z) l00002A11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A11:
	branch Test(NE,Z) l00002A15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A15:
	branch Test(NE,Z) l00002A19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A19:
	branch Test(NE,Z) l00002A1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A1D:
	branch Test(NE,Z) l00002A21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A21:
	branch Test(NE,Z) l00002A25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A25:
	branch Test(NE,Z) l00002A29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A29:
	branch Test(NE,Z) l00002A2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A2D:
	branch Test(NE,Z) l00002A31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A31:
	branch Test(NE,Z) l00002A35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A35:
	branch Test(NE,Z) l00002A39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A39:
	branch Test(NE,Z) l00002A3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A3D:
	branch Test(NE,Z) l00002A41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A41:
	branch Test(NE,Z) l00002A45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A45:
	branch Test(NE,Z) l00002A49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A49:
	branch Test(NE,Z) l00002A4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A4D:
	branch Test(NE,Z) l00002A51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A51:
	branch Test(NE,Z) l00002A55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A55:
	branch Test(NE,Z) l00002A59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A59:
	branch Test(NE,Z) l00002A5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A5D:
	branch Test(NE,Z) l00002A61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A61:
	branch Test(NE,Z) l00002A65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A65:
	branch Test(NE,Z) l00002A69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A69:
	branch Test(NE,Z) l00002A6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A6D:
	branch Test(NE,Z) l00002A71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A71:
	branch Test(NE,Z) l00002A75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A75:
	branch Test(NE,Z) l00002A79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A79:
	branch Test(NE,Z) l00002A7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A7D:
	branch Test(NE,Z) l00002A81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A81:
	branch Test(NE,Z) l00002A85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A85:
	branch Test(NE,Z) l00002A89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A89:
	branch Test(NE,Z) l00002A8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A8D:
	branch Test(NE,Z) l00002A91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A91:
	branch Test(NE,Z) l00002A95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A95:
	branch Test(NE,Z) l00002A99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A99:
	branch Test(NE,Z) l00002A9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A9D:
	branch Test(NE,Z) l00002AA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002A9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AA1:
	branch Test(NE,Z) l00002AA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AA5:
	branch Test(NE,Z) l00002AA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AA9:
	branch Test(NE,Z) l00002AAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AAD:
	branch Test(NE,Z) l00002AB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AB1:
	branch Test(NE,Z) l00002AB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AB5:
	branch Test(NE,Z) l00002AB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AB9:
	branch Test(NE,Z) l00002ABD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002ABD:
	branch Test(NE,Z) l00002AC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002ABD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AC1:
	branch Test(NE,Z) l00002AC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AC5:
	branch Test(NE,Z) l00002AC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AC9:
	branch Test(NE,Z) l00002ACD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002ACD:
	branch Test(NE,Z) l00002AD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002ACD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AD1:
	branch Test(NE,Z) l00002AD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AD5:
	branch Test(NE,Z) l00002AD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AD9:
	branch Test(NE,Z) l00002ADD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002ADD:
	branch Test(NE,Z) l00002AE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002ADD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AE1:
	branch Test(NE,Z) l00002AE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AE5:
	branch Test(NE,Z) l00002AE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AE9:
	branch Test(NE,Z) l00002AED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AED:
	branch Test(NE,Z) l00002AF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AF1:
	branch Test(NE,Z) l00002AF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AF5:
	branch Test(NE,Z) l00002AF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AF9:
	branch Test(NE,Z) l00002AFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AFD:
	branch Test(NE,Z) l00002B01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002AFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B01:
	branch Test(NE,Z) l00002B05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B05:
	branch Test(NE,Z) l00002B09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B09:
	branch Test(NE,Z) l00002B0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B0D:
	branch Test(NE,Z) l00002B11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B11:
	branch Test(NE,Z) l00002B15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B15:
	branch Test(NE,Z) l00002B19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B19:
	branch Test(NE,Z) l00002B1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B1D:
	branch Test(NE,Z) l00002B21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B21:
	branch Test(NE,Z) l00002B25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B25:
	branch Test(NE,Z) l00002B29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B29:
	branch Test(NE,Z) l00002B2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B2D:
	branch Test(NE,Z) l00002B31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B31:
	branch Test(NE,Z) l00002B35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B35:
	branch Test(NE,Z) l00002B39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B39:
	branch Test(NE,Z) l00002B3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B3D:
	branch Test(NE,Z) l00002B41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B41:
	branch Test(NE,Z) l00002B45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B45:
	branch Test(NE,Z) l00002B49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B49:
	branch Test(NE,Z) l00002B4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B4D:
	branch Test(NE,Z) l00002B51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B51:
	branch Test(NE,Z) l00002B55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B55:
	branch Test(NE,Z) l00002B59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B59:
	branch Test(NE,Z) l00002B5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B5D:
	branch Test(NE,Z) l00002B61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B61:
	branch Test(NE,Z) l00002B65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B65:
	branch Test(NE,Z) l00002B69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B69:
	branch Test(NE,Z) l00002B6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B6D:
	branch Test(NE,Z) l00002B71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B71:
	branch Test(NE,Z) l00002B75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B75:
	branch Test(NE,Z) l00002B79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B79:
	branch Test(NE,Z) l00002B7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B7D:
	branch Test(NE,Z) l00002B81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B81:
	branch Test(NE,Z) l00002B85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B85:
	branch Test(NE,Z) l00002B89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B89:
	branch Test(NE,Z) l00002B8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B8D:
	branch Test(NE,Z) l00002B91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B91:
	branch Test(NE,Z) l00002B95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B95:
	branch Test(NE,Z) l00002B99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B99:
	branch Test(NE,Z) l00002B9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B9D:
	branch Test(NE,Z) l00002BA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002B9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BA1:
	branch Test(NE,Z) l00002BA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BA5:
	branch Test(NE,Z) l00002BA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BA9:
	branch Test(NE,Z) l00002BAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BAD:
	branch Test(NE,Z) l00002BB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BB1:
	branch Test(NE,Z) l00002BB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BB5:
	branch Test(NE,Z) l00002BB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BB9:
	branch Test(NE,Z) l00002BBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BBD:
	branch Test(NE,Z) l00002BC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BC1:
	branch Test(NE,Z) l00002BC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BC5:
	branch Test(NE,Z) l00002BC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BC9:
	branch Test(NE,Z) l00002BCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BCD:
	branch Test(NE,Z) l00002BD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BD1:
	branch Test(NE,Z) l00002BD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BD5:
	branch Test(NE,Z) l00002BD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BD9:
	branch Test(NE,Z) l00002BDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BDD:
	branch Test(NE,Z) l00002BE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BE1:
	branch Test(NE,Z) l00002BE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BE5:
	branch Test(NE,Z) l00002BE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BE9:
	branch Test(NE,Z) l00002BED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BED:
	branch Test(NE,Z) l00002BF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BF1:
	branch Test(NE,Z) l00002BF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BF5:
	branch Test(NE,Z) l00002BF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BF9:
	branch Test(NE,Z) l00002BFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BFD:
	branch Test(NE,Z) l00002C01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002BFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C01:
	branch Test(NE,Z) l00002C05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C05:
	branch Test(NE,Z) l00002C09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C09:
	branch Test(NE,Z) l00002C0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C0D:
	branch Test(NE,Z) l00002C11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C11:
	branch Test(NE,Z) l00002C15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C15:
	branch Test(NE,Z) l00002C19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C19:
	branch Test(NE,Z) l00002C1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C1D:
	branch Test(NE,Z) l00002C21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C21:
	branch Test(NE,Z) l00002C25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C25:
	branch Test(NE,Z) l00002C29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C29:
	branch Test(NE,Z) l00002C2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C2D:
	branch Test(NE,Z) l00002C31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C31:
	branch Test(NE,Z) l00002C35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C35:
	branch Test(NE,Z) l00002C39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C39:
	branch Test(NE,Z) l00002C3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C3D:
	branch Test(NE,Z) l00002C41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C41:
	branch Test(NE,Z) l00002C45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C45:
	branch Test(NE,Z) l00002C49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C49:
	branch Test(NE,Z) l00002C4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C4D:
	branch Test(NE,Z) l00002C51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C51:
	branch Test(NE,Z) l00002C55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C55:
	branch Test(NE,Z) l00002C59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C59:
	branch Test(NE,Z) l00002C5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C5D:
	branch Test(NE,Z) l00002C61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C61:
	branch Test(NE,Z) l00002C65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C65:
	branch Test(NE,Z) l00002C69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C69:
	branch Test(NE,Z) l00002C6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C6D:
	branch Test(NE,Z) l00002C71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C71:
	branch Test(NE,Z) l00002C75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C75:
	branch Test(NE,Z) l00002C79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C79:
	branch Test(NE,Z) l00002C7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C7D:
	branch Test(NE,Z) l00002C81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C81:
	branch Test(NE,Z) l00002C85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C85:
	branch Test(NE,Z) l00002C89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C89:
	branch Test(NE,Z) l00002C8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C8D:
	branch Test(NE,Z) l00002C91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C91:
	branch Test(NE,Z) l00002C95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C95:
	branch Test(NE,Z) l00002C99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C99:
	branch Test(NE,Z) l00002C9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C9D:
	branch Test(NE,Z) l00002CA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002C9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CA1:
	branch Test(NE,Z) l00002CA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CA5:
	branch Test(NE,Z) l00002CA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CA9:
	branch Test(NE,Z) l00002CAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CAD:
	branch Test(NE,Z) l00002CB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CB1:
	branch Test(NE,Z) l00002CB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CB5:
	branch Test(NE,Z) l00002CB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CB9:
	branch Test(NE,Z) l00002CBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CBD:
	branch Test(NE,Z) l00002CC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CC1:
	branch Test(NE,Z) l00002CC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CC5:
	branch Test(NE,Z) l00002CC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CC9:
	branch Test(NE,Z) l00002CCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CCD:
	branch Test(NE,Z) l00002CD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CD1:
	branch Test(NE,Z) l00002CD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CD5:
	branch Test(NE,Z) l00002CD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CD9:
	branch Test(NE,Z) l00002CDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CDD:
	branch Test(NE,Z) l00002CE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CE1:
	branch Test(NE,Z) l00002CE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CE5:
	branch Test(NE,Z) l00002CE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CE9:
	branch Test(NE,Z) l00002CED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CED:
	branch Test(NE,Z) l00002CF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CF1:
	branch Test(NE,Z) l00002CF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CF5:
	branch Test(NE,Z) l00002CF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CF9:
	branch Test(NE,Z) l00002CFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CFD:
	branch Test(NE,Z) l00002D01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002CFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D01:
	branch Test(NE,Z) l00002D05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D05:
	branch Test(NE,Z) l00002D09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D09:
	branch Test(NE,Z) l00002D0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D0D:
	branch Test(NE,Z) l00002D11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D11:
	branch Test(NE,Z) l00002D15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D15:
	branch Test(NE,Z) l00002D19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D19:
	branch Test(NE,Z) l00002D1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D1D:
	branch Test(NE,Z) l00002D21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D21:
	branch Test(NE,Z) l00002D25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D25:
	branch Test(NE,Z) l00002D29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D29:
	branch Test(NE,Z) l00002D2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D2D:
	branch Test(NE,Z) l00002D31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D31:
	branch Test(NE,Z) l00002D35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D35:
	branch Test(NE,Z) l00002D39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D39:
	branch Test(NE,Z) l00002D3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D3D:
	branch Test(NE,Z) l00002D41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D41:
	branch Test(NE,Z) l00002D45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D45:
	branch Test(NE,Z) l00002D49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D49:
	branch Test(NE,Z) l00002D4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D4D:
	branch Test(NE,Z) l00002D51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D51:
	branch Test(NE,Z) l00002D55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D55:
	branch Test(NE,Z) l00002D59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D59:
	branch Test(NE,Z) l00002D5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D5D:
	branch Test(NE,Z) l00002D61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D61:
	branch Test(NE,Z) l00002D65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D65:
	branch Test(NE,Z) l00002D69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D69:
	branch Test(NE,Z) l00002D6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D6D:
	branch Test(NE,Z) l00002D71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D71:
	branch Test(NE,Z) l00002D75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D75:
	branch Test(NE,Z) l00002D79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D79:
	branch Test(NE,Z) l00002D7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D7D:
	branch Test(NE,Z) l00002D81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D81:
	branch Test(NE,Z) l00002D85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D85:
	branch Test(NE,Z) l00002D89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D89:
	branch Test(NE,Z) l00002D8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D8D:
	branch Test(NE,Z) l00002D91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D91:
	branch Test(NE,Z) l00002D95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D95:
	branch Test(NE,Z) l00002D99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D99:
	branch Test(NE,Z) l00002D9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D9D:
	branch Test(NE,Z) l00002DA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002D9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DA1:
	branch Test(NE,Z) l00002DA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DA5:
	branch Test(NE,Z) l00002DA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DA9:
	branch Test(NE,Z) l00002DAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DAD:
	branch Test(NE,Z) l00002DB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DB1:
	branch Test(NE,Z) l00002DB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DB5:
	branch Test(NE,Z) l00002DB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DB9:
	branch Test(NE,Z) l00002DBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DBD:
	branch Test(NE,Z) l00002DC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DC1:
	branch Test(NE,Z) l00002DC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DC5:
	branch Test(NE,Z) l00002DC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DC9:
	branch Test(NE,Z) l00002DCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DCD:
	branch Test(NE,Z) l00002DD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DD1:
	branch Test(NE,Z) l00002DD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DD5:
	branch Test(NE,Z) l00002DD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DD9:
	branch Test(NE,Z) l00002DDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DDD:
	branch Test(NE,Z) l00002DE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DE1:
	branch Test(NE,Z) l00002DE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DE5:
	branch Test(NE,Z) l00002DE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DE9:
	branch Test(NE,Z) l00002DED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DED:
	branch Test(NE,Z) l00002DF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DF1:
	branch Test(NE,Z) l00002DF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DF5:
	branch Test(NE,Z) l00002DF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DF9:
	branch Test(NE,Z) l00002DFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DFD:
	branch Test(NE,Z) l00002E01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002DFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E01:
	branch Test(NE,Z) l00002E05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E05:
	branch Test(NE,Z) l00002E09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E09:
	branch Test(NE,Z) l00002E0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E0D:
	branch Test(NE,Z) l00002E11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E11:
	branch Test(NE,Z) l00002E15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E15:
	branch Test(NE,Z) l00002E19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E19:
	branch Test(NE,Z) l00002E1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E1D:
	branch Test(NE,Z) l00002E21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E21:
	branch Test(NE,Z) l00002E25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E25:
	branch Test(NE,Z) l00002E29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E29:
	branch Test(NE,Z) l00002E2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E2D:
	branch Test(NE,Z) l00002E31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E31:
	branch Test(NE,Z) l00002E35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E35:
	branch Test(NE,Z) l00002E39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E39:
	branch Test(NE,Z) l00002E3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E3D:
	branch Test(NE,Z) l00002E41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E41:
	branch Test(NE,Z) l00002E45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E45:
	branch Test(NE,Z) l00002E49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E49:
	branch Test(NE,Z) l00002E4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E4D:
	branch Test(NE,Z) l00002E51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E51:
	branch Test(NE,Z) l00002E55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E55:
	branch Test(NE,Z) l00002E59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E59:
	branch Test(NE,Z) l00002E5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E5D:
	branch Test(NE,Z) l00002E61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E61:
	branch Test(NE,Z) l00002E65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E65:
	branch Test(NE,Z) l00002E69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E69:
	branch Test(NE,Z) l00002E6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E6D:
	branch Test(NE,Z) l00002E71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E71:
	branch Test(NE,Z) l00002E75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E75:
	branch Test(NE,Z) l00002E79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E79:
	branch Test(NE,Z) l00002E7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E7D:
	branch Test(NE,Z) l00002E81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E81:
	branch Test(NE,Z) l00002E85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E85:
	branch Test(NE,Z) l00002E89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E89:
	branch Test(NE,Z) l00002E8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E8D:
	branch Test(NE,Z) l00002E91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E91:
	branch Test(NE,Z) l00002E95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E95:
	branch Test(NE,Z) l00002E99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E99:
	branch Test(NE,Z) l00002E9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E9D:
	branch Test(NE,Z) l00002EA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002E9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EA1:
	branch Test(NE,Z) l00002EA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EA5:
	branch Test(NE,Z) l00002EA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EA9:
	branch Test(NE,Z) l00002EAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EAD:
	branch Test(NE,Z) l00002EB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EB1:
	branch Test(NE,Z) l00002EB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EB5:
	branch Test(NE,Z) l00002EB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EB9:
	branch Test(NE,Z) l00002EBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EBD:
	branch Test(NE,Z) l00002EC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EC1:
	branch Test(NE,Z) l00002EC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EC5:
	branch Test(NE,Z) l00002EC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EC9:
	branch Test(NE,Z) l00002ECD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002ECD:
	branch Test(NE,Z) l00002ED1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002ECD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002ED1:
	branch Test(NE,Z) l00002ED5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002ED1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002ED5:
	branch Test(NE,Z) l00002ED9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002ED5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002ED9:
	branch Test(NE,Z) l00002EDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002ED9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EDD:
	branch Test(NE,Z) l00002EE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EE1:
	branch Test(NE,Z) l00002EE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EE5:
	branch Test(NE,Z) l00002EE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EE9:
	branch Test(NE,Z) l00002EED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EED:
	branch Test(NE,Z) l00002EF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EF1:
	branch Test(NE,Z) l00002EF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EF5:
	branch Test(NE,Z) l00002EF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EF9:
	branch Test(NE,Z) l00002EFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EFD:
	branch Test(NE,Z) l00002F01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002EFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F01:
	branch Test(NE,Z) l00002F05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F05:
	branch Test(NE,Z) l00002F09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F09:
	branch Test(NE,Z) l00002F0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F0D:
	branch Test(NE,Z) l00002F11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F11:
	branch Test(NE,Z) l00002F15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F15:
	branch Test(NE,Z) l00002F19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F19:
	branch Test(NE,Z) l00002F1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F1D:
	branch Test(NE,Z) l00002F21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F21:
	branch Test(NE,Z) l00002F25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F25:
	branch Test(NE,Z) l00002F29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F29:
	branch Test(NE,Z) l00002F2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F2D:
	branch Test(NE,Z) l00002F31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F31:
	branch Test(NE,Z) l00002F35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F35:
	branch Test(NE,Z) l00002F39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F39:
	branch Test(NE,Z) l00002F3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F3D:
	branch Test(NE,Z) l00002F41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F41:
	branch Test(NE,Z) l00002F45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F45:
	branch Test(NE,Z) l00002F49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F49:
	branch Test(NE,Z) l00002F4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F4D:
	branch Test(NE,Z) l00002F51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F51:
	branch Test(NE,Z) l00002F55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F55:
	branch Test(NE,Z) l00002F59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F59:
	branch Test(NE,Z) l00002F5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F5D:
	branch Test(NE,Z) l00002F61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F61:
	branch Test(NE,Z) l00002F65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F65:
	branch Test(NE,Z) l00002F69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F69:
	branch Test(NE,Z) l00002F6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F6D:
	branch Test(NE,Z) l00002F71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F71:
	branch Test(NE,Z) l00002F75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F75:
	branch Test(NE,Z) l00002F79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F79:
	branch Test(NE,Z) l00002F7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F7D:
	branch Test(NE,Z) l00002F81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F81:
	branch Test(NE,Z) l00002F85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F85:
	branch Test(NE,Z) l00002F89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F89:
	branch Test(NE,Z) l00002F8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F8D:
	branch Test(NE,Z) l00002F91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F91:
	branch Test(NE,Z) l00002F95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F95:
	branch Test(NE,Z) l00002F99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F99:
	branch Test(NE,Z) l00002F9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F9D:
	branch Test(NE,Z) l00002FA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002F9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FA1:
	branch Test(NE,Z) l00002FA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FA5:
	branch Test(NE,Z) l00002FA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FA9:
	branch Test(NE,Z) l00002FAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FAD:
	branch Test(NE,Z) l00002FB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FB1:
	branch Test(NE,Z) l00002FB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FB5:
	branch Test(NE,Z) l00002FB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FB9:
	branch Test(NE,Z) l00002FBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FBD:
	branch Test(NE,Z) l00002FC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FC1:
	branch Test(NE,Z) l00002FC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FC5:
	branch Test(NE,Z) l00002FC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FC9:
	branch Test(NE,Z) l00002FCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FCD:
	branch Test(NE,Z) l00002FD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FD1:
	branch Test(NE,Z) l00002FD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FD5:
	branch Test(NE,Z) l00002FD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FD9:
	branch Test(NE,Z) l00002FDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FDD:
	branch Test(NE,Z) l00002FE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FE1:
	branch Test(NE,Z) l00002FE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FE5:
	branch Test(NE,Z) l00002FE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FE9:
	branch Test(NE,Z) l00002FED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FED:
	branch Test(NE,Z) l00002FF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FF1:
	branch Test(NE,Z) l00002FF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FF5:
	branch Test(NE,Z) l00002FF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FF9:
	branch Test(NE,Z) l00002FFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FFD:
	branch Test(NE,Z) l00003001
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00002FFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003001:
	branch Test(NE,Z) l00003005
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003001_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003005:
	branch Test(NE,Z) l00003009
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003005_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003009:
	branch Test(NE,Z) l0000300D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003009_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000300D:
	branch Test(NE,Z) l00003011
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000300D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003011:
	branch Test(NE,Z) l00003015
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003011_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003015:
	branch Test(NE,Z) l00003019
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003015_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003019:
	branch Test(NE,Z) l0000301D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003019_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000301D:
	branch Test(NE,Z) l00003021
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000301D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003021:
	branch Test(NE,Z) l00003025
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003021_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003025:
	branch Test(NE,Z) l00003029
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003025_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003029:
	branch Test(NE,Z) l0000302D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003029_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000302D:
	branch Test(NE,Z) l00003031
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000302D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003031:
	branch Test(NE,Z) l00003035
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003031_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003035:
	branch Test(NE,Z) l00003039
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003035_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003039:
	branch Test(NE,Z) l0000303D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003039_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000303D:
	branch Test(NE,Z) l00003041
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000303D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003041:
	branch Test(NE,Z) l00003045
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003041_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003045:
	branch Test(NE,Z) l00003049
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003045_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003049:
	branch Test(NE,Z) l0000304D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003049_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000304D:
	branch Test(NE,Z) l00003051
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000304D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003051:
	branch Test(NE,Z) l00003055
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003051_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003055:
	branch Test(NE,Z) l00003059
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003055_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003059:
	branch Test(NE,Z) l0000305D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003059_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000305D:
	branch Test(NE,Z) l00003061
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000305D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003061:
	branch Test(NE,Z) l00003065
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003061_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003065:
	branch Test(NE,Z) l00003069
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003065_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003069:
	branch Test(NE,Z) l0000306D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003069_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000306D:
	branch Test(NE,Z) l00003071
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000306D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003071:
	branch Test(NE,Z) l00003075
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003071_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003075:
	branch Test(NE,Z) l00003079
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003075_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003079:
	branch Test(NE,Z) l0000307D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003079_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000307D:
	branch Test(NE,Z) l00003081
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000307D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003081:
	branch Test(NE,Z) l00003085
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003081_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003085:
	branch Test(NE,Z) l00003089
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003085_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003089:
	branch Test(NE,Z) l0000308D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003089_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000308D:
	branch Test(NE,Z) l00003091
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000308D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003091:
	branch Test(NE,Z) l00003095
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003091_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003095:
	branch Test(NE,Z) l00003099
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003095_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003099:
	branch Test(NE,Z) l0000309D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003099_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000309D:
	branch Test(NE,Z) l000030A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000309D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030A1:
	branch Test(NE,Z) l000030A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030A5:
	branch Test(NE,Z) l000030A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030A9:
	branch Test(NE,Z) l000030AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030AD:
	branch Test(NE,Z) l000030B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030B1:
	branch Test(NE,Z) l000030B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030B5:
	branch Test(NE,Z) l000030B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030B9:
	branch Test(NE,Z) l000030BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030BD:
	branch Test(NE,Z) l000030C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030C1:
	branch Test(NE,Z) l000030C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030C5:
	branch Test(NE,Z) l000030C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030C9:
	branch Test(NE,Z) l000030CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030CD:
	branch Test(NE,Z) l000030D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030D1:
	branch Test(NE,Z) l000030D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030D5:
	branch Test(NE,Z) l000030D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030D9:
	branch Test(NE,Z) l000030DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030DD:
	branch Test(NE,Z) l000030E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030E1:
	branch Test(NE,Z) l000030E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030E5:
	branch Test(NE,Z) l000030E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030E9:
	branch Test(NE,Z) l000030ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030ED:
	branch Test(NE,Z) l000030F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030F1:
	branch Test(NE,Z) l000030F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030F5:
	branch Test(NE,Z) l000030F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030F9:
	branch Test(NE,Z) l000030FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030FD:
	branch Test(NE,Z) l00003101
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000030FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003101:
	branch Test(NE,Z) l00003105
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003101_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003105:
	branch Test(NE,Z) l00003109
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003105_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003109:
	branch Test(NE,Z) l0000310D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003109_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000310D:
	branch Test(NE,Z) l00003111
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000310D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003111:
	branch Test(NE,Z) l00003115
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003111_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003115:
	branch Test(NE,Z) l00003119
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003115_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003119:
	branch Test(NE,Z) l0000311D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003119_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000311D:
	branch Test(NE,Z) l00003121
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000311D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003121:
	branch Test(NE,Z) l00003125
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003121_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003125:
	branch Test(NE,Z) l00003129
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003125_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003129:
	branch Test(NE,Z) l0000312D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003129_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000312D:
	branch Test(NE,Z) l00003131
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000312D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003131:
	branch Test(NE,Z) l00003135
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003131_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003135:
	branch Test(NE,Z) l00003139
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003135_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003139:
	branch Test(NE,Z) l0000313D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003139_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000313D:
	branch Test(NE,Z) l00003141
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000313D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003141:
	branch Test(NE,Z) l00003145
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003141_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003145:
	branch Test(NE,Z) l00003149
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003145_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003149:
	branch Test(NE,Z) l0000314D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003149_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000314D:
	branch Test(NE,Z) l00003151
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000314D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003151:
	branch Test(NE,Z) l00003155
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003151_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003155:
	branch Test(NE,Z) l00003159
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003155_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003159:
	branch Test(NE,Z) l0000315D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003159_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000315D:
	branch Test(NE,Z) l00003161
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000315D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003161:
	branch Test(NE,Z) l00003165
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003161_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003165:
	branch Test(NE,Z) l00003169
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003165_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003169:
	branch Test(NE,Z) l0000316D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003169_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000316D:
	branch Test(NE,Z) l00003171
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000316D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003171:
	branch Test(NE,Z) l00003175
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003171_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003175:
	branch Test(NE,Z) l00003179
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003175_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003179:
	branch Test(NE,Z) l0000317D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003179_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000317D:
	branch Test(NE,Z) l00003181
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000317D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003181:
	branch Test(NE,Z) l00003185
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003181_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003185:
	branch Test(NE,Z) l00003189
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003185_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003189:
	branch Test(NE,Z) l0000318D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003189_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000318D:
	branch Test(NE,Z) l00003191
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000318D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003191:
	branch Test(NE,Z) l00003195
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003191_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003195:
	branch Test(NE,Z) l00003199
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003195_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003199:
	branch Test(NE,Z) l0000319D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003199_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000319D:
	branch Test(NE,Z) l000031A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000319D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031A1:
	branch Test(NE,Z) l000031A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031A5:
	branch Test(NE,Z) l000031A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031A9:
	branch Test(NE,Z) l000031AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031AD:
	branch Test(NE,Z) l000031B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031B1:
	branch Test(NE,Z) l000031B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031B5:
	branch Test(NE,Z) l000031B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031B9:
	branch Test(NE,Z) l000031BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031BD:
	branch Test(NE,Z) l000031C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031C1:
	branch Test(NE,Z) l000031C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031C5:
	branch Test(NE,Z) l000031C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031C9:
	branch Test(NE,Z) l000031CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031CD:
	branch Test(NE,Z) l000031D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031D1:
	branch Test(NE,Z) l000031D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031D5:
	branch Test(NE,Z) l000031D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031D9:
	branch Test(NE,Z) l000031DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031DD:
	branch Test(NE,Z) l000031E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031E1:
	branch Test(NE,Z) l000031E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031E5:
	branch Test(NE,Z) l000031E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031E9:
	branch Test(NE,Z) l000031ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031ED:
	branch Test(NE,Z) l000031F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031F1:
	branch Test(NE,Z) l000031F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031F5:
	branch Test(NE,Z) l000031F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031F9:
	branch Test(NE,Z) l000031FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031FD:
	branch Test(NE,Z) l00003201
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000031FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003201:
	branch Test(NE,Z) l00003205
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003201_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003205:
	branch Test(NE,Z) l00003209
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003205_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003209:
	branch Test(NE,Z) l0000320D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003209_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000320D:
	branch Test(NE,Z) l00003211
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000320D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003211:
	branch Test(NE,Z) l00003215
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003211_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003215:
	branch Test(NE,Z) l00003219
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003215_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003219:
	branch Test(NE,Z) l0000321D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003219_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000321D:
	branch Test(NE,Z) l00003221
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000321D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003221:
	branch Test(NE,Z) l00003225
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003221_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003225:
	branch Test(NE,Z) l00003229
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003225_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003229:
	branch Test(NE,Z) l0000322D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003229_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000322D:
	branch Test(NE,Z) l00003231
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000322D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003231:
	branch Test(NE,Z) l00003235
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003231_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003235:
	branch Test(NE,Z) l00003239
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003235_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003239:
	branch Test(NE,Z) l0000323D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003239_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000323D:
	branch Test(NE,Z) l00003241
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000323D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003241:
	branch Test(NE,Z) l00003245
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003241_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003245:
	branch Test(NE,Z) l00003249
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003245_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003249:
	branch Test(NE,Z) l0000324D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003249_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000324D:
	branch Test(NE,Z) l00003251
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000324D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003251:
	branch Test(NE,Z) l00003255
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003251_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003255:
	branch Test(NE,Z) l00003259
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003255_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003259:
	branch Test(NE,Z) l0000325D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003259_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000325D:
	branch Test(NE,Z) l00003261
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000325D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003261:
	branch Test(NE,Z) l00003265
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003261_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003265:
	branch Test(NE,Z) l00003269
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003265_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003269:
	branch Test(NE,Z) l0000326D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003269_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000326D:
	branch Test(NE,Z) l00003271
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000326D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003271:
	branch Test(NE,Z) l00003275
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003271_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003275:
	branch Test(NE,Z) l00003279
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003275_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003279:
	branch Test(NE,Z) l0000327D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003279_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000327D:
	branch Test(NE,Z) l00003281
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000327D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003281:
	branch Test(NE,Z) l00003285
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003281_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003285:
	branch Test(NE,Z) l00003289
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003285_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003289:
	branch Test(NE,Z) l0000328D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003289_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000328D:
	branch Test(NE,Z) l00003291
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000328D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003291:
	branch Test(NE,Z) l00003295
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003291_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003295:
	branch Test(NE,Z) l00003299
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003295_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003299:
	branch Test(NE,Z) l0000329D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003299_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000329D:
	branch Test(NE,Z) l000032A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000329D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032A1:
	branch Test(NE,Z) l000032A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032A5:
	branch Test(NE,Z) l000032A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032A9:
	branch Test(NE,Z) l000032AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032AD:
	branch Test(NE,Z) l000032B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032B1:
	branch Test(NE,Z) l000032B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032B5:
	branch Test(NE,Z) l000032B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032B9:
	branch Test(NE,Z) l000032BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032BD:
	branch Test(NE,Z) l000032C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032C1:
	branch Test(NE,Z) l000032C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032C5:
	branch Test(NE,Z) l000032C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032C9:
	branch Test(NE,Z) l000032CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032CD:
	branch Test(NE,Z) l000032D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032D1:
	branch Test(NE,Z) l000032D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032D5:
	branch Test(NE,Z) l000032D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032D9:
	branch Test(NE,Z) l000032DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032DD:
	branch Test(NE,Z) l000032E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032E1:
	branch Test(NE,Z) l000032E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032E5:
	branch Test(NE,Z) l000032E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032E9:
	branch Test(NE,Z) l000032ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032ED:
	branch Test(NE,Z) l000032F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032F1:
	branch Test(NE,Z) l000032F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032F5:
	branch Test(NE,Z) l000032F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032F9:
	branch Test(NE,Z) l000032FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032FD:
	branch Test(NE,Z) l00003301
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000032FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003301:
	branch Test(NE,Z) l00003305
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003301_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003305:
	branch Test(NE,Z) l00003309
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003305_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003309:
	branch Test(NE,Z) l0000330D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003309_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000330D:
	branch Test(NE,Z) l00003311
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000330D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003311:
	branch Test(NE,Z) l00003315
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003311_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003315:
	branch Test(NE,Z) l00003319
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003315_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003319:
	branch Test(NE,Z) l0000331D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003319_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000331D:
	branch Test(NE,Z) l00003321
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000331D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003321:
	branch Test(NE,Z) l00003325
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003321_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003325:
	branch Test(NE,Z) l00003329
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003325_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003329:
	branch Test(NE,Z) l0000332D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003329_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000332D:
	branch Test(NE,Z) l00003331
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000332D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003331:
	branch Test(NE,Z) l00003335
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003331_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003335:
	branch Test(NE,Z) l00003339
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003335_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003339:
	branch Test(NE,Z) l0000333D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003339_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000333D:
	branch Test(NE,Z) l00003341
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000333D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003341:
	branch Test(NE,Z) l00003345
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003341_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003345:
	branch Test(NE,Z) l00003349
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003345_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003349:
	branch Test(NE,Z) l0000334D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003349_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000334D:
	branch Test(NE,Z) l00003351
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000334D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003351:
	branch Test(NE,Z) l00003355
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003351_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003355:
	branch Test(NE,Z) l00003359
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003355_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003359:
	branch Test(NE,Z) l0000335D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003359_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000335D:
	branch Test(NE,Z) l00003361
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000335D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003361:
	branch Test(NE,Z) l00003365
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003361_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003365:
	branch Test(NE,Z) l00003369
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003365_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003369:
	branch Test(NE,Z) l0000336D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003369_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000336D:
	branch Test(NE,Z) l00003371
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000336D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003371:
	branch Test(NE,Z) l00003375
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003371_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003375:
	branch Test(NE,Z) l00003379
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003375_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003379:
	branch Test(NE,Z) l0000337D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003379_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000337D:
	branch Test(NE,Z) l00003381
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000337D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003381:
	branch Test(NE,Z) l00003385
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003381_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003385:
	branch Test(NE,Z) l00003389
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003385_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003389:
	branch Test(NE,Z) l0000338D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003389_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000338D:
	branch Test(NE,Z) l00003391
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000338D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003391:
	branch Test(NE,Z) l00003395
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003391_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003395:
	branch Test(NE,Z) l00003399
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003395_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003399:
	branch Test(NE,Z) l0000339D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003399_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000339D:
	branch Test(NE,Z) l000033A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000339D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033A1:
	branch Test(NE,Z) l000033A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033A5:
	branch Test(NE,Z) l000033A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033A9:
	branch Test(NE,Z) l000033AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033AD:
	branch Test(NE,Z) l000033B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033B1:
	branch Test(NE,Z) l000033B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033B5:
	branch Test(NE,Z) l000033B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033B9:
	branch Test(NE,Z) l000033BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033BD:
	branch Test(NE,Z) l000033C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033C1:
	branch Test(NE,Z) l000033C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033C5:
	branch Test(NE,Z) l000033C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033C9:
	branch Test(NE,Z) l000033CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033CD:
	branch Test(NE,Z) l000033D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033D1:
	branch Test(NE,Z) l000033D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033D5:
	branch Test(NE,Z) l000033D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033D9:
	branch Test(NE,Z) l000033DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033DD:
	branch Test(NE,Z) l000033E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033E1:
	branch Test(NE,Z) l000033E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033E5:
	branch Test(NE,Z) l000033E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033E9:
	branch Test(NE,Z) l000033ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033ED:
	branch Test(NE,Z) l000033F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033F1:
	branch Test(NE,Z) l000033F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033F5:
	branch Test(NE,Z) l000033F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033F9:
	branch Test(NE,Z) l000033FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033FD:
	branch Test(NE,Z) l00003401
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000033FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003401:
	branch Test(NE,Z) l00003405
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003401_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003405:
	branch Test(NE,Z) l00003409
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003405_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003409:
	branch Test(NE,Z) l0000340D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003409_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000340D:
	branch Test(NE,Z) l00003411
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000340D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003411:
	branch Test(NE,Z) l00003415
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003411_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003415:
	branch Test(NE,Z) l00003419
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003415_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003419:
	branch Test(NE,Z) l0000341D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003419_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000341D:
	branch Test(NE,Z) l00003421
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000341D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003421:
	branch Test(NE,Z) l00003425
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003421_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003425:
	branch Test(NE,Z) l00003429
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003425_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003429:
	branch Test(NE,Z) l0000342D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003429_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000342D:
	branch Test(NE,Z) l00003431
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000342D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003431:
	branch Test(NE,Z) l00003435
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003431_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003435:
	branch Test(NE,Z) l00003439
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003435_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003439:
	branch Test(NE,Z) l0000343D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003439_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000343D:
	branch Test(NE,Z) l00003441
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000343D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003441:
	branch Test(NE,Z) l00003445
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003441_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003445:
	branch Test(NE,Z) l00003449
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003445_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003449:
	branch Test(NE,Z) l0000344D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003449_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000344D:
	branch Test(NE,Z) l00003451
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000344D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003451:
	branch Test(NE,Z) l00003455
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003451_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003455:
	branch Test(NE,Z) l00003459
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003455_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003459:
	branch Test(NE,Z) l0000345D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003459_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000345D:
	branch Test(NE,Z) l00003461
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000345D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003461:
	branch Test(NE,Z) l00003465
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003461_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003465:
	branch Test(NE,Z) l00003469
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003465_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003469:
	branch Test(NE,Z) l0000346D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003469_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000346D:
	branch Test(NE,Z) l00003471
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000346D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003471:
	branch Test(NE,Z) l00003475
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003471_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003475:
	branch Test(NE,Z) l00003479
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003475_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003479:
	branch Test(NE,Z) l0000347D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003479_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000347D:
	branch Test(NE,Z) l00003481
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000347D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003481:
	branch Test(NE,Z) l00003485
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003481_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003485:
	branch Test(NE,Z) l00003489
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003485_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003489:
	branch Test(NE,Z) l0000348D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003489_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000348D:
	branch Test(NE,Z) l00003491
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000348D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003491:
	branch Test(NE,Z) l00003495
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003491_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003495:
	branch Test(NE,Z) l00003499
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003495_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003499:
	branch Test(NE,Z) l0000349D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003499_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000349D:
	branch Test(NE,Z) l000034A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000349D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034A1:
	branch Test(NE,Z) l000034A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034A5:
	branch Test(NE,Z) l000034A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034A9:
	branch Test(NE,Z) l000034AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034AD:
	branch Test(NE,Z) l000034B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034B1:
	branch Test(NE,Z) l000034B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034B5:
	branch Test(NE,Z) l000034B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034B9:
	branch Test(NE,Z) l000034BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034BD:
	branch Test(NE,Z) l000034C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034C1:
	branch Test(NE,Z) l000034C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034C5:
	branch Test(NE,Z) l000034C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034C9:
	branch Test(NE,Z) l000034CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034CD:
	branch Test(NE,Z) l000034D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034D1:
	branch Test(NE,Z) l000034D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034D5:
	branch Test(NE,Z) l000034D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034D9:
	branch Test(NE,Z) l000034DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034DD:
	branch Test(NE,Z) l000034E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034E1:
	branch Test(NE,Z) l000034E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034E5:
	branch Test(NE,Z) l000034E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034E9:
	branch Test(NE,Z) l000034ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034ED:
	branch Test(NE,Z) l000034F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034F1:
	branch Test(NE,Z) l000034F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034F5:
	branch Test(NE,Z) l000034F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034F9:
	branch Test(NE,Z) l000034FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034FD:
	branch Test(NE,Z) l00003501
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000034FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003501:
	branch Test(NE,Z) l00003505
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003501_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003505:
	branch Test(NE,Z) l00003509
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003505_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003509:
	branch Test(NE,Z) l0000350D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003509_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000350D:
	branch Test(NE,Z) l00003511
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000350D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003511:
	branch Test(NE,Z) l00003515
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003511_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003515:
	branch Test(NE,Z) l00003519
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003515_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003519:
	branch Test(NE,Z) l0000351D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003519_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000351D:
	branch Test(NE,Z) l00003521
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000351D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003521:
	branch Test(NE,Z) l00003525
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003521_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003525:
	branch Test(NE,Z) l00003529
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003525_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003529:
	branch Test(NE,Z) l0000352D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003529_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000352D:
	branch Test(NE,Z) l00003531
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000352D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003531:
	branch Test(NE,Z) l00003535
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003531_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003535:
	branch Test(NE,Z) l00003539
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003535_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003539:
	branch Test(NE,Z) l0000353D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003539_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000353D:
	branch Test(NE,Z) l00003541
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000353D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003541:
	branch Test(NE,Z) l00003545
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003541_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003545:
	branch Test(NE,Z) l00003549
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003545_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003549:
	branch Test(NE,Z) l0000354D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003549_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000354D:
	branch Test(NE,Z) l00003551
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000354D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003551:
	branch Test(NE,Z) l00003555
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003551_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003555:
	branch Test(NE,Z) l00003559
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003555_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003559:
	branch Test(NE,Z) l0000355D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003559_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000355D:
	branch Test(NE,Z) l00003561
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000355D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003561:
	branch Test(NE,Z) l00003565
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003561_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003565:
	branch Test(NE,Z) l00003569
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003565_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003569:
	branch Test(NE,Z) l0000356D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003569_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000356D:
	branch Test(NE,Z) l00003571
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000356D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003571:
	branch Test(NE,Z) l00003575
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003571_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003575:
	branch Test(NE,Z) l00003579
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003575_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003579:
	branch Test(NE,Z) l0000357D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003579_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000357D:
	branch Test(NE,Z) l00003581
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000357D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003581:
	branch Test(NE,Z) l00003585
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003581_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003585:
	branch Test(NE,Z) l00003589
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003585_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003589:
	branch Test(NE,Z) l0000358D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003589_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000358D:
	branch Test(NE,Z) l00003591
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000358D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003591:
	branch Test(NE,Z) l00003595
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003591_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003595:
	branch Test(NE,Z) l00003599
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003595_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003599:
	branch Test(NE,Z) l0000359D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003599_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000359D:
	branch Test(NE,Z) l000035A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000359D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035A1:
	branch Test(NE,Z) l000035A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035A5:
	branch Test(NE,Z) l000035A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035A9:
	branch Test(NE,Z) l000035AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035AD:
	branch Test(NE,Z) l000035B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035B1:
	branch Test(NE,Z) l000035B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035B5:
	branch Test(NE,Z) l000035B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035B9:
	branch Test(NE,Z) l000035BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035BD:
	branch Test(NE,Z) l000035C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035C1:
	branch Test(NE,Z) l000035C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035C5:
	branch Test(NE,Z) l000035C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035C9:
	branch Test(NE,Z) l000035CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035CD:
	branch Test(NE,Z) l000035D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035D1:
	branch Test(NE,Z) l000035D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035D5:
	branch Test(NE,Z) l000035D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035D9:
	branch Test(NE,Z) l000035DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035DD:
	branch Test(NE,Z) l000035E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035E1:
	branch Test(NE,Z) l000035E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035E5:
	branch Test(NE,Z) l000035E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035E9:
	branch Test(NE,Z) l000035ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035ED:
	branch Test(NE,Z) l000035F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035F1:
	branch Test(NE,Z) l000035F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035F5:
	branch Test(NE,Z) l000035F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035F9:
	branch Test(NE,Z) l000035FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035FD:
	branch Test(NE,Z) l00003601
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000035FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003601:
	branch Test(NE,Z) l00003605
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003601_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003605:
	branch Test(NE,Z) l00003609
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003605_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003609:
	branch Test(NE,Z) l0000360D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003609_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000360D:
	branch Test(NE,Z) l00003611
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000360D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003611:
	branch Test(NE,Z) l00003615
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003611_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003615:
	branch Test(NE,Z) l00003619
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003615_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003619:
	branch Test(NE,Z) l0000361D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003619_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000361D:
	branch Test(NE,Z) l00003621
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000361D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003621:
	branch Test(NE,Z) l00003625
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003621_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003625:
	branch Test(NE,Z) l00003629
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003625_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003629:
	branch Test(NE,Z) l0000362D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003629_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000362D:
	branch Test(NE,Z) l00003631
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000362D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003631:
	branch Test(NE,Z) l00003635
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003631_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003635:
	branch Test(NE,Z) l00003639
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003635_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003639:
	branch Test(NE,Z) l0000363D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003639_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000363D:
	branch Test(NE,Z) l00003641
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000363D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003641:
	branch Test(NE,Z) l00003645
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003641_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003645:
	branch Test(NE,Z) l00003649
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003645_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003649:
	branch Test(NE,Z) l0000364D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003649_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000364D:
	branch Test(NE,Z) l00003651
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000364D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003651:
	branch Test(NE,Z) l00003655
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003651_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003655:
	branch Test(NE,Z) l00003659
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003655_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003659:
	branch Test(NE,Z) l0000365D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003659_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000365D:
	branch Test(NE,Z) l00003661
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000365D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003661:
	branch Test(NE,Z) l00003665
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003661_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003665:
	branch Test(NE,Z) l00003669
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003665_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003669:
	branch Test(NE,Z) l0000366D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003669_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000366D:
	branch Test(NE,Z) l00003671
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000366D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003671:
	branch Test(NE,Z) l00003675
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003671_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003675:
	branch Test(NE,Z) l00003679
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003675_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003679:
	branch Test(NE,Z) l0000367D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003679_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000367D:
	branch Test(NE,Z) l00003681
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000367D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003681:
	branch Test(NE,Z) l00003685
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003681_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003685:
	branch Test(NE,Z) l00003689
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003685_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003689:
	branch Test(NE,Z) l0000368D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003689_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000368D:
	branch Test(NE,Z) l00003691
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000368D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003691:
	branch Test(NE,Z) l00003695
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003691_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003695:
	branch Test(NE,Z) l00003699
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003695_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003699:
	branch Test(NE,Z) l0000369D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003699_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000369D:
	branch Test(NE,Z) l000036A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000369D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036A1:
	branch Test(NE,Z) l000036A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036A5:
	branch Test(NE,Z) l000036A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036A9:
	branch Test(NE,Z) l000036AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036AD:
	branch Test(NE,Z) l000036B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036B1:
	branch Test(NE,Z) l000036B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036B5:
	branch Test(NE,Z) l000036B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036B9:
	branch Test(NE,Z) l000036BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036BD:
	branch Test(NE,Z) l000036C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036C1:
	branch Test(NE,Z) l000036C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036C5:
	branch Test(NE,Z) l000036C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036C9:
	branch Test(NE,Z) l000036CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036CD:
	branch Test(NE,Z) l000036D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036D1:
	branch Test(NE,Z) l000036D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036D5:
	branch Test(NE,Z) l000036D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036D9:
	branch Test(NE,Z) l000036DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036DD:
	branch Test(NE,Z) l000036E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036E1:
	branch Test(NE,Z) l000036E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036E5:
	branch Test(NE,Z) l000036E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036E9:
	branch Test(NE,Z) l000036ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036ED:
	branch Test(NE,Z) l000036F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036F1:
	branch Test(NE,Z) l000036F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036F5:
	branch Test(NE,Z) l000036F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036F9:
	branch Test(NE,Z) l000036FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036FD:
	branch Test(NE,Z) l00003701
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000036FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003701:
	branch Test(NE,Z) l00003705
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003701_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003705:
	branch Test(NE,Z) l00003709
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003705_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003709:
	branch Test(NE,Z) l0000370D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003709_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000370D:
	branch Test(NE,Z) l00003711
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000370D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003711:
	branch Test(NE,Z) l00003715
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003711_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003715:
	branch Test(NE,Z) l00003719
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003715_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003719:
	branch Test(NE,Z) l0000371D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003719_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000371D:
	branch Test(NE,Z) l00003721
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000371D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003721:
	branch Test(NE,Z) l00003725
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003721_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003725:
	branch Test(NE,Z) l00003729
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003725_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003729:
	branch Test(NE,Z) l0000372D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003729_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000372D:
	branch Test(NE,Z) l00003731
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000372D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003731:
	branch Test(NE,Z) l00003735
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003731_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003735:
	branch Test(NE,Z) l00003739
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003735_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003739:
	branch Test(NE,Z) l0000373D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003739_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000373D:
	branch Test(NE,Z) l00003741
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000373D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003741:
	branch Test(NE,Z) l00003745
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003741_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003745:
	branch Test(NE,Z) l00003749
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003745_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003749:
	branch Test(NE,Z) l0000374D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003749_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000374D:
	branch Test(NE,Z) l00003751
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000374D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003751:
	branch Test(NE,Z) l00003755
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003751_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003755:
	branch Test(NE,Z) l00003759
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003755_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003759:
	branch Test(NE,Z) l0000375D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003759_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000375D:
	branch Test(NE,Z) l00003761
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000375D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003761:
	branch Test(NE,Z) l00003765
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003761_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003765:
	branch Test(NE,Z) l00003769
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003765_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003769:
	branch Test(NE,Z) l0000376D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003769_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000376D:
	branch Test(NE,Z) l00003771
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000376D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003771:
	branch Test(NE,Z) l00003775
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003771_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003775:
	branch Test(NE,Z) l00003779
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003775_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003779:
	branch Test(NE,Z) l0000377D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003779_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000377D:
	branch Test(NE,Z) l00003781
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000377D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003781:
	branch Test(NE,Z) l00003785
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003781_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003785:
	branch Test(NE,Z) l00003789
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003785_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003789:
	branch Test(NE,Z) l0000378D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003789_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000378D:
	branch Test(NE,Z) l00003791
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000378D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003791:
	branch Test(NE,Z) l00003795
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003791_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003795:
	branch Test(NE,Z) l00003799
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003795_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003799:
	branch Test(NE,Z) l0000379D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003799_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000379D:
	branch Test(NE,Z) l000037A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000379D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037A1:
	branch Test(NE,Z) l000037A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037A5:
	branch Test(NE,Z) l000037A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037A9:
	branch Test(NE,Z) l000037AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037AD:
	branch Test(NE,Z) l000037B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037B1:
	branch Test(NE,Z) l000037B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037B5:
	branch Test(NE,Z) l000037B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037B9:
	branch Test(NE,Z) l000037BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037BD:
	branch Test(NE,Z) l000037C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037C1:
	branch Test(NE,Z) l000037C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037C5:
	branch Test(NE,Z) l000037C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037C9:
	branch Test(NE,Z) l000037CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037CD:
	branch Test(NE,Z) l000037D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037D1:
	branch Test(NE,Z) l000037D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037D5:
	branch Test(NE,Z) l000037D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037D9:
	branch Test(NE,Z) l000037DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037DD:
	branch Test(NE,Z) l000037E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037E1:
	branch Test(NE,Z) l000037E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037E5:
	branch Test(NE,Z) l000037E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037E9:
	branch Test(NE,Z) l000037ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037ED:
	branch Test(NE,Z) l000037F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037F1:
	branch Test(NE,Z) l000037F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037F5:
	branch Test(NE,Z) l000037F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037F9:
	branch Test(NE,Z) l000037FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037FD:
	branch Test(NE,Z) l00003801
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000037FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003801:
	branch Test(NE,Z) l00003805
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003801_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003805:
	branch Test(NE,Z) l00003809
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003805_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003809:
	branch Test(NE,Z) l0000380D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003809_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000380D:
	branch Test(NE,Z) l00003811
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000380D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003811:
	branch Test(NE,Z) l00003815
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003811_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003815:
	branch Test(NE,Z) l00003819
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003815_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003819:
	branch Test(NE,Z) l0000381D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003819_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000381D:
	branch Test(NE,Z) l00003821
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000381D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003821:
	branch Test(NE,Z) l00003825
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003821_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003825:
	branch Test(NE,Z) l00003829
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003825_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003829:
	branch Test(NE,Z) l0000382D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003829_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000382D:
	branch Test(NE,Z) l00003831
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000382D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003831:
	branch Test(NE,Z) l00003835
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003831_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003835:
	branch Test(NE,Z) l00003839
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003835_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003839:
	branch Test(NE,Z) l0000383D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003839_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000383D:
	branch Test(NE,Z) l00003841
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000383D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003841:
	branch Test(NE,Z) l00003845
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003841_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003845:
	branch Test(NE,Z) l00003849
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003845_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003849:
	branch Test(NE,Z) l0000384D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003849_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000384D:
	branch Test(NE,Z) l00003851
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000384D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003851:
	branch Test(NE,Z) l00003855
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003851_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003855:
	branch Test(NE,Z) l00003859
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003855_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003859:
	branch Test(NE,Z) l0000385D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003859_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000385D:
	branch Test(NE,Z) l00003861
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000385D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003861:
	branch Test(NE,Z) l00003865
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003861_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003865:
	branch Test(NE,Z) l00003869
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003865_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003869:
	branch Test(NE,Z) l0000386D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003869_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000386D:
	branch Test(NE,Z) l00003871
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000386D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003871:
	branch Test(NE,Z) l00003875
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003871_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003875:
	branch Test(NE,Z) l00003879
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003875_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003879:
	branch Test(NE,Z) l0000387D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003879_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000387D:
	branch Test(NE,Z) l00003881
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000387D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003881:
	branch Test(NE,Z) l00003885
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003881_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003885:
	branch Test(NE,Z) l00003889
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003885_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003889:
	branch Test(NE,Z) l0000388D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003889_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000388D:
	branch Test(NE,Z) l00003891
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000388D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003891:
	branch Test(NE,Z) l00003895
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003891_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003895:
	branch Test(NE,Z) l00003899
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003895_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003899:
	branch Test(NE,Z) l0000389D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003899_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000389D:
	branch Test(NE,Z) l000038A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000389D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038A1:
	branch Test(NE,Z) l000038A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038A5:
	branch Test(NE,Z) l000038A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038A9:
	branch Test(NE,Z) l000038AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038AD:
	branch Test(NE,Z) l000038B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038B1:
	branch Test(NE,Z) l000038B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038B5:
	branch Test(NE,Z) l000038B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038B9:
	branch Test(NE,Z) l000038BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038BD:
	branch Test(NE,Z) l000038C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038C1:
	branch Test(NE,Z) l000038C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038C5:
	branch Test(NE,Z) l000038C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038C9:
	branch Test(NE,Z) l000038CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038CD:
	branch Test(NE,Z) l000038D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038D1:
	branch Test(NE,Z) l000038D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038D5:
	branch Test(NE,Z) l000038D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038D9:
	branch Test(NE,Z) l000038DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038DD:
	branch Test(NE,Z) l000038E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038E1:
	branch Test(NE,Z) l000038E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038E5:
	branch Test(NE,Z) l000038E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038E9:
	branch Test(NE,Z) l000038ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038ED:
	branch Test(NE,Z) l000038F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038F1:
	branch Test(NE,Z) l000038F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038F5:
	branch Test(NE,Z) l000038F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038F9:
	branch Test(NE,Z) l000038FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038FD:
	branch Test(NE,Z) l00003901
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000038FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003901:
	branch Test(NE,Z) l00003905
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003901_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003905:
	branch Test(NE,Z) l00003909
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003905_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003909:
	branch Test(NE,Z) l0000390D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003909_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000390D:
	branch Test(NE,Z) l00003911
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000390D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003911:
	branch Test(NE,Z) l00003915
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003911_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003915:
	branch Test(NE,Z) l00003919
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003915_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003919:
	branch Test(NE,Z) l0000391D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003919_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000391D:
	branch Test(NE,Z) l00003921
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000391D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003921:
	branch Test(NE,Z) l00003925
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003921_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003925:
	branch Test(NE,Z) l00003929
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003925_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003929:
	branch Test(NE,Z) l0000392D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003929_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000392D:
	branch Test(NE,Z) l00003931
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000392D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003931:
	branch Test(NE,Z) l00003935
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003931_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003935:
	branch Test(NE,Z) l00003939
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003935_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003939:
	branch Test(NE,Z) l0000393D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003939_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000393D:
	branch Test(NE,Z) l00003941
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000393D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003941:
	branch Test(NE,Z) l00003945
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003941_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003945:
	branch Test(NE,Z) l00003949
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003945_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003949:
	branch Test(NE,Z) l0000394D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003949_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000394D:
	branch Test(NE,Z) l00003951
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000394D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003951:
	branch Test(NE,Z) l00003955
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003951_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003955:
	branch Test(NE,Z) l00003959
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003955_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003959:
	branch Test(NE,Z) l0000395D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003959_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000395D:
	branch Test(NE,Z) l00003961
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000395D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003961:
	branch Test(NE,Z) l00003965
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003961_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003965:
	branch Test(NE,Z) l00003969
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003965_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003969:
	branch Test(NE,Z) l0000396D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003969_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000396D:
	branch Test(NE,Z) l00003971
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000396D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003971:
	branch Test(NE,Z) l00003975
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003971_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003975:
	branch Test(NE,Z) l00003979
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003975_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003979:
	branch Test(NE,Z) l0000397D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003979_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000397D:
	branch Test(NE,Z) l00003981
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000397D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003981:
	branch Test(NE,Z) l00003985
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003981_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003985:
	branch Test(NE,Z) l00003989
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003985_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003989:
	branch Test(NE,Z) l0000398D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003989_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000398D:
	branch Test(NE,Z) l00003991
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000398D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003991:
	branch Test(NE,Z) l00003995
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003991_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003995:
	branch Test(NE,Z) l00003999
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003995_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003999:
	branch Test(NE,Z) l0000399D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003999_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000399D:
	branch Test(NE,Z) l000039A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000399D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039A1:
	branch Test(NE,Z) l000039A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039A5:
	branch Test(NE,Z) l000039A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039A9:
	branch Test(NE,Z) l000039AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039AD:
	branch Test(NE,Z) l000039B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039B1:
	branch Test(NE,Z) l000039B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039B5:
	branch Test(NE,Z) l000039B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039B9:
	branch Test(NE,Z) l000039BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039BD:
	branch Test(NE,Z) l000039C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039C1:
	branch Test(NE,Z) l000039C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039C5:
	branch Test(NE,Z) l000039C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039C9:
	branch Test(NE,Z) l000039CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039CD:
	branch Test(NE,Z) l000039D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039D1:
	branch Test(NE,Z) l000039D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039D5:
	branch Test(NE,Z) l000039D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039D9:
	branch Test(NE,Z) l000039DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039DD:
	branch Test(NE,Z) l000039E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039E1:
	branch Test(NE,Z) l000039E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039E5:
	branch Test(NE,Z) l000039E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039E9:
	branch Test(NE,Z) l000039ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039ED:
	branch Test(NE,Z) l000039F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039F1:
	branch Test(NE,Z) l000039F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039F5:
	branch Test(NE,Z) l000039F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039F9:
	branch Test(NE,Z) l000039FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039FD:
	branch Test(NE,Z) l00003A01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000039FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A01:
	branch Test(NE,Z) l00003A05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A05:
	branch Test(NE,Z) l00003A09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A09:
	branch Test(NE,Z) l00003A0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A0D:
	branch Test(NE,Z) l00003A11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A11:
	branch Test(NE,Z) l00003A15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A15:
	branch Test(NE,Z) l00003A19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A19:
	branch Test(NE,Z) l00003A1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A1D:
	branch Test(NE,Z) l00003A21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A21:
	branch Test(NE,Z) l00003A25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A25:
	branch Test(NE,Z) l00003A29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A29:
	branch Test(NE,Z) l00003A2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A2D:
	branch Test(NE,Z) l00003A31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A31:
	branch Test(NE,Z) l00003A35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A35:
	branch Test(NE,Z) l00003A39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A39:
	branch Test(NE,Z) l00003A3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A3D:
	branch Test(NE,Z) l00003A41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A41:
	branch Test(NE,Z) l00003A45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A45:
	branch Test(NE,Z) l00003A49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A49:
	branch Test(NE,Z) l00003A4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A4D:
	branch Test(NE,Z) l00003A51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A51:
	branch Test(NE,Z) l00003A55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A55:
	branch Test(NE,Z) l00003A59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A59:
	branch Test(NE,Z) l00003A5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A5D:
	branch Test(NE,Z) l00003A61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A61:
	branch Test(NE,Z) l00003A65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A65:
	branch Test(NE,Z) l00003A69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A69:
	branch Test(NE,Z) l00003A6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A6D:
	branch Test(NE,Z) l00003A71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A71:
	branch Test(NE,Z) l00003A75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A75:
	branch Test(NE,Z) l00003A79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A79:
	branch Test(NE,Z) l00003A7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A7D:
	branch Test(NE,Z) l00003A81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A81:
	branch Test(NE,Z) l00003A85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A85:
	branch Test(NE,Z) l00003A89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A89:
	branch Test(NE,Z) l00003A8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A8D:
	branch Test(NE,Z) l00003A91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A91:
	branch Test(NE,Z) l00003A95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A95:
	branch Test(NE,Z) l00003A99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A99:
	branch Test(NE,Z) l00003A9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A9D:
	branch Test(NE,Z) l00003AA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003A9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AA1:
	branch Test(NE,Z) l00003AA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AA5:
	branch Test(NE,Z) l00003AA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AA9:
	branch Test(NE,Z) l00003AAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AAD:
	branch Test(NE,Z) l00003AB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AB1:
	branch Test(NE,Z) l00003AB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AB5:
	branch Test(NE,Z) l00003AB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AB9:
	branch Test(NE,Z) l00003ABD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003ABD:
	branch Test(NE,Z) l00003AC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003ABD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AC1:
	branch Test(NE,Z) l00003AC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AC5:
	branch Test(NE,Z) l00003AC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AC9:
	branch Test(NE,Z) l00003ACD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003ACD:
	branch Test(NE,Z) l00003AD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003ACD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AD1:
	branch Test(NE,Z) l00003AD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AD5:
	branch Test(NE,Z) l00003AD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AD9:
	branch Test(NE,Z) l00003ADD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003ADD:
	branch Test(NE,Z) l00003AE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003ADD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AE1:
	branch Test(NE,Z) l00003AE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AE5:
	branch Test(NE,Z) l00003AE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AE9:
	branch Test(NE,Z) l00003AED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AED:
	branch Test(NE,Z) l00003AF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AF1:
	branch Test(NE,Z) l00003AF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AF5:
	branch Test(NE,Z) l00003AF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AF9:
	branch Test(NE,Z) l00003AFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AFD:
	branch Test(NE,Z) l00003B01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003AFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B01:
	branch Test(NE,Z) l00003B05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B05:
	branch Test(NE,Z) l00003B09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B09:
	branch Test(NE,Z) l00003B0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B0D:
	branch Test(NE,Z) l00003B11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B11:
	branch Test(NE,Z) l00003B15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B15:
	branch Test(NE,Z) l00003B19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B19:
	branch Test(NE,Z) l00003B1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B1D:
	branch Test(NE,Z) l00003B21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B21:
	branch Test(NE,Z) l00003B25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B25:
	branch Test(NE,Z) l00003B29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B29:
	branch Test(NE,Z) l00003B2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B2D:
	branch Test(NE,Z) l00003B31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B31:
	branch Test(NE,Z) l00003B35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B35:
	branch Test(NE,Z) l00003B39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B39:
	branch Test(NE,Z) l00003B3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B3D:
	branch Test(NE,Z) l00003B41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B41:
	branch Test(NE,Z) l00003B45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B45:
	branch Test(NE,Z) l00003B49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B49:
	branch Test(NE,Z) l00003B4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B4D:
	branch Test(NE,Z) l00003B51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B51:
	branch Test(NE,Z) l00003B55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B55:
	branch Test(NE,Z) l00003B59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B59:
	branch Test(NE,Z) l00003B5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B5D:
	branch Test(NE,Z) l00003B61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B61:
	branch Test(NE,Z) l00003B65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B65:
	branch Test(NE,Z) l00003B69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B69:
	branch Test(NE,Z) l00003B6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B6D:
	branch Test(NE,Z) l00003B71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B71:
	branch Test(NE,Z) l00003B75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B75:
	branch Test(NE,Z) l00003B79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B79:
	branch Test(NE,Z) l00003B7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B7D:
	branch Test(NE,Z) l00003B81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B81:
	branch Test(NE,Z) l00003B85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B85:
	branch Test(NE,Z) l00003B89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B89:
	branch Test(NE,Z) l00003B8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B8D:
	branch Test(NE,Z) l00003B91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B91:
	branch Test(NE,Z) l00003B95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B95:
	branch Test(NE,Z) l00003B99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B99:
	branch Test(NE,Z) l00003B9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B9D:
	branch Test(NE,Z) l00003BA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003B9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BA1:
	branch Test(NE,Z) l00003BA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BA5:
	branch Test(NE,Z) l00003BA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BA9:
	branch Test(NE,Z) l00003BAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BAD:
	branch Test(NE,Z) l00003BB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BB1:
	branch Test(NE,Z) l00003BB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BB5:
	branch Test(NE,Z) l00003BB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BB9:
	branch Test(NE,Z) l00003BBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BBD:
	branch Test(NE,Z) l00003BC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BC1:
	branch Test(NE,Z) l00003BC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BC5:
	branch Test(NE,Z) l00003BC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BC9:
	branch Test(NE,Z) l00003BCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BCD:
	branch Test(NE,Z) l00003BD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BD1:
	branch Test(NE,Z) l00003BD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BD5:
	branch Test(NE,Z) l00003BD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BD9:
	branch Test(NE,Z) l00003BDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BDD:
	branch Test(NE,Z) l00003BE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BE1:
	branch Test(NE,Z) l00003BE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BE5:
	branch Test(NE,Z) l00003BE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BE9:
	branch Test(NE,Z) l00003BED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BED:
	branch Test(NE,Z) l00003BF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BF1:
	branch Test(NE,Z) l00003BF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BF5:
	branch Test(NE,Z) l00003BF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BF9:
	branch Test(NE,Z) l00003BFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BFD:
	branch Test(NE,Z) l00003C01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003BFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C01:
	branch Test(NE,Z) l00003C05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C05:
	branch Test(NE,Z) l00003C09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C09:
	branch Test(NE,Z) l00003C0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C0D:
	branch Test(NE,Z) l00003C11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C11:
	branch Test(NE,Z) l00003C15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C15:
	branch Test(NE,Z) l00003C19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C19:
	branch Test(NE,Z) l00003C1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C1D:
	branch Test(NE,Z) l00003C21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C21:
	branch Test(NE,Z) l00003C25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C25:
	branch Test(NE,Z) l00003C29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C29:
	branch Test(NE,Z) l00003C2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C2D:
	branch Test(NE,Z) l00003C31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C31:
	branch Test(NE,Z) l00003C35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C35:
	branch Test(NE,Z) l00003C39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C39:
	branch Test(NE,Z) l00003C3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C3D:
	branch Test(NE,Z) l00003C41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C41:
	branch Test(NE,Z) l00003C45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C45:
	branch Test(NE,Z) l00003C49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C49:
	branch Test(NE,Z) l00003C4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C4D:
	branch Test(NE,Z) l00003C51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C51:
	branch Test(NE,Z) l00003C55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C55:
	branch Test(NE,Z) l00003C59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C59:
	branch Test(NE,Z) l00003C5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C5D:
	branch Test(NE,Z) l00003C61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C61:
	branch Test(NE,Z) l00003C65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C65:
	branch Test(NE,Z) l00003C69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C69:
	branch Test(NE,Z) l00003C6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C6D:
	branch Test(NE,Z) l00003C71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C71:
	branch Test(NE,Z) l00003C75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C75:
	branch Test(NE,Z) l00003C79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C79:
	branch Test(NE,Z) l00003C7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C7D:
	branch Test(NE,Z) l00003C81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C81:
	branch Test(NE,Z) l00003C85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C85:
	branch Test(NE,Z) l00003C89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C89:
	branch Test(NE,Z) l00003C8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C8D:
	branch Test(NE,Z) l00003C91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C91:
	branch Test(NE,Z) l00003C95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C95:
	branch Test(NE,Z) l00003C99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C99:
	branch Test(NE,Z) l00003C9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C9D:
	branch Test(NE,Z) l00003CA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003C9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CA1:
	branch Test(NE,Z) l00003CA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CA5:
	branch Test(NE,Z) l00003CA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CA9:
	branch Test(NE,Z) l00003CAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CAD:
	branch Test(NE,Z) l00003CB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CB1:
	branch Test(NE,Z) l00003CB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CB5:
	branch Test(NE,Z) l00003CB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CB9:
	branch Test(NE,Z) l00003CBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CBD:
	branch Test(NE,Z) l00003CC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CC1:
	branch Test(NE,Z) l00003CC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CC5:
	branch Test(NE,Z) l00003CC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CC9:
	branch Test(NE,Z) l00003CCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CCD:
	branch Test(NE,Z) l00003CD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CD1:
	branch Test(NE,Z) l00003CD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CD5:
	branch Test(NE,Z) l00003CD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CD9:
	branch Test(NE,Z) l00003CDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CDD:
	branch Test(NE,Z) l00003CE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CE1:
	branch Test(NE,Z) l00003CE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CE5:
	branch Test(NE,Z) l00003CE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CE9:
	branch Test(NE,Z) l00003CED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CED:
	branch Test(NE,Z) l00003CF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CF1:
	branch Test(NE,Z) l00003CF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CF5:
	branch Test(NE,Z) l00003CF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CF9:
	branch Test(NE,Z) l00003CFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CFD:
	branch Test(NE,Z) l00003D01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003CFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D01:
	branch Test(NE,Z) l00003D05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D05:
	branch Test(NE,Z) l00003D09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D09:
	branch Test(NE,Z) l00003D0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D0D:
	branch Test(NE,Z) l00003D11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D11:
	branch Test(NE,Z) l00003D15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D15:
	branch Test(NE,Z) l00003D19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D19:
	branch Test(NE,Z) l00003D1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D1D:
	branch Test(NE,Z) l00003D21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D21:
	branch Test(NE,Z) l00003D25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D25:
	branch Test(NE,Z) l00003D29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D29:
	branch Test(NE,Z) l00003D2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D2D:
	branch Test(NE,Z) l00003D31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D31:
	branch Test(NE,Z) l00003D35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D35:
	branch Test(NE,Z) l00003D39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D39:
	branch Test(NE,Z) l00003D3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D3D:
	branch Test(NE,Z) l00003D41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D41:
	branch Test(NE,Z) l00003D45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D45:
	branch Test(NE,Z) l00003D49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D49:
	branch Test(NE,Z) l00003D4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D4D:
	branch Test(NE,Z) l00003D51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D51:
	branch Test(NE,Z) l00003D55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D55:
	branch Test(NE,Z) l00003D59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D59:
	branch Test(NE,Z) l00003D5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D5D:
	branch Test(NE,Z) l00003D61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D61:
	branch Test(NE,Z) l00003D65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D65:
	branch Test(NE,Z) l00003D69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D69:
	branch Test(NE,Z) l00003D6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D6D:
	branch Test(NE,Z) l00003D71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D71:
	branch Test(NE,Z) l00003D75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D75:
	branch Test(NE,Z) l00003D79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D79:
	branch Test(NE,Z) l00003D7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D7D:
	branch Test(NE,Z) l00003D81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D81:
	branch Test(NE,Z) l00003D85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D85:
	branch Test(NE,Z) l00003D89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D89:
	branch Test(NE,Z) l00003D8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D8D:
	branch Test(NE,Z) l00003D91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D91:
	branch Test(NE,Z) l00003D95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D95:
	branch Test(NE,Z) l00003D99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D99:
	branch Test(NE,Z) l00003D9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D9D:
	branch Test(NE,Z) l00003DA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003D9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DA1:
	branch Test(NE,Z) l00003DA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DA5:
	branch Test(NE,Z) l00003DA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DA9:
	branch Test(NE,Z) l00003DAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DAD:
	branch Test(NE,Z) l00003DB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DB1:
	branch Test(NE,Z) l00003DB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DB5:
	branch Test(NE,Z) l00003DB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DB9:
	branch Test(NE,Z) l00003DBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DBD:
	branch Test(NE,Z) l00003DC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DC1:
	branch Test(NE,Z) l00003DC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DC5:
	branch Test(NE,Z) l00003DC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DC9:
	branch Test(NE,Z) l00003DCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DCD:
	branch Test(NE,Z) l00003DD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DD1:
	branch Test(NE,Z) l00003DD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DD5:
	branch Test(NE,Z) l00003DD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DD9:
	branch Test(NE,Z) l00003DDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DDD:
	branch Test(NE,Z) l00003DE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DE1:
	branch Test(NE,Z) l00003DE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DE5:
	branch Test(NE,Z) l00003DE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DE9:
	branch Test(NE,Z) l00003DED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DED:
	branch Test(NE,Z) l00003DF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DF1:
	branch Test(NE,Z) l00003DF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DF5:
	branch Test(NE,Z) l00003DF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DF9:
	branch Test(NE,Z) l00003DFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DFD:
	branch Test(NE,Z) l00003E01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003DFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E01:
	branch Test(NE,Z) l00003E05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E05:
	branch Test(NE,Z) l00003E09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E09:
	branch Test(NE,Z) l00003E0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E0D:
	branch Test(NE,Z) l00003E11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E11:
	branch Test(NE,Z) l00003E15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E15:
	branch Test(NE,Z) l00003E19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E19:
	branch Test(NE,Z) l00003E1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E1D:
	branch Test(NE,Z) l00003E21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E21:
	branch Test(NE,Z) l00003E25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E25:
	branch Test(NE,Z) l00003E29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E29:
	branch Test(NE,Z) l00003E2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E2D:
	branch Test(NE,Z) l00003E31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E31:
	branch Test(NE,Z) l00003E35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E35:
	branch Test(NE,Z) l00003E39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E39:
	branch Test(NE,Z) l00003E3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E3D:
	branch Test(NE,Z) l00003E41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E41:
	branch Test(NE,Z) l00003E45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E45:
	branch Test(NE,Z) l00003E49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E49:
	branch Test(NE,Z) l00003E4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E4D:
	branch Test(NE,Z) l00003E51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E51:
	branch Test(NE,Z) l00003E55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E55:
	branch Test(NE,Z) l00003E59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E59:
	branch Test(NE,Z) l00003E5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E5D:
	branch Test(NE,Z) l00003E61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E61:
	branch Test(NE,Z) l00003E65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E65:
	branch Test(NE,Z) l00003E69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E69:
	branch Test(NE,Z) l00003E6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E6D:
	branch Test(NE,Z) l00003E71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E71:
	branch Test(NE,Z) l00003E75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E75:
	branch Test(NE,Z) l00003E79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E79:
	branch Test(NE,Z) l00003E7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E7D:
	branch Test(NE,Z) l00003E81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E81:
	branch Test(NE,Z) l00003E85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E85:
	branch Test(NE,Z) l00003E89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E89:
	branch Test(NE,Z) l00003E8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E8D:
	branch Test(NE,Z) l00003E91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E91:
	branch Test(NE,Z) l00003E95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E95:
	branch Test(NE,Z) l00003E99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E99:
	branch Test(NE,Z) l00003E9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E9D:
	branch Test(NE,Z) l00003EA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003E9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EA1:
	branch Test(NE,Z) l00003EA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EA5:
	branch Test(NE,Z) l00003EA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EA9:
	branch Test(NE,Z) l00003EAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EAD:
	branch Test(NE,Z) l00003EB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EB1:
	branch Test(NE,Z) l00003EB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EB5:
	branch Test(NE,Z) l00003EB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EB9:
	branch Test(NE,Z) l00003EBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EBD:
	branch Test(NE,Z) l00003EC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EC1:
	branch Test(NE,Z) l00003EC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EC5:
	branch Test(NE,Z) l00003EC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EC9:
	branch Test(NE,Z) l00003ECD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003ECD:
	branch Test(NE,Z) l00003ED1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003ECD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003ED1:
	branch Test(NE,Z) l00003ED5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003ED1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003ED5:
	branch Test(NE,Z) l00003ED9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003ED5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003ED9:
	branch Test(NE,Z) l00003EDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003ED9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EDD:
	branch Test(NE,Z) l00003EE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EE1:
	branch Test(NE,Z) l00003EE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EE5:
	branch Test(NE,Z) l00003EE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EE9:
	branch Test(NE,Z) l00003EED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EED:
	branch Test(NE,Z) l00003EF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EF1:
	branch Test(NE,Z) l00003EF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EF5:
	branch Test(NE,Z) l00003EF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EF9:
	branch Test(NE,Z) l00003EFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EFD:
	branch Test(NE,Z) l00003F01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003EFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F01:
	branch Test(NE,Z) l00003F05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F05:
	branch Test(NE,Z) l00003F09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F09:
	branch Test(NE,Z) l00003F0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F0D:
	branch Test(NE,Z) l00003F11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F11:
	branch Test(NE,Z) l00003F15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F15:
	branch Test(NE,Z) l00003F19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F19:
	branch Test(NE,Z) l00003F1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F1D:
	branch Test(NE,Z) l00003F21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F21:
	branch Test(NE,Z) l00003F25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F25:
	branch Test(NE,Z) l00003F29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F29:
	branch Test(NE,Z) l00003F2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F2D:
	branch Test(NE,Z) l00003F31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F31:
	branch Test(NE,Z) l00003F35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F35:
	branch Test(NE,Z) l00003F39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F39:
	branch Test(NE,Z) l00003F3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F3D:
	branch Test(NE,Z) l00003F41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F41:
	branch Test(NE,Z) l00003F45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F45:
	branch Test(NE,Z) l00003F49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F49:
	branch Test(NE,Z) l00003F4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F4D:
	branch Test(NE,Z) l00003F51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F51:
	branch Test(NE,Z) l00003F55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F55:
	branch Test(NE,Z) l00003F59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F59:
	branch Test(NE,Z) l00003F5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F5D:
	branch Test(NE,Z) l00003F61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F61:
	branch Test(NE,Z) l00003F65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F65:
	branch Test(NE,Z) l00003F69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F69:
	branch Test(NE,Z) l00003F6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F6D:
	branch Test(NE,Z) l00003F71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F71:
	branch Test(NE,Z) l00003F75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F75:
	branch Test(NE,Z) l00003F79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F79:
	branch Test(NE,Z) l00003F7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F7D:
	branch Test(NE,Z) l00003F81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F81:
	branch Test(NE,Z) l00003F85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F85:
	branch Test(NE,Z) l00003F89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F89:
	branch Test(NE,Z) l00003F8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F8D:
	branch Test(NE,Z) l00003F91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F91:
	branch Test(NE,Z) l00003F95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F95:
	branch Test(NE,Z) l00003F99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F99:
	branch Test(NE,Z) l00003F9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F9D:
	branch Test(NE,Z) l00003FA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003F9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FA1:
	branch Test(NE,Z) l00003FA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FA5:
	branch Test(NE,Z) l00003FA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FA9:
	branch Test(NE,Z) l00003FAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FAD:
	branch Test(NE,Z) l00003FB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FB1:
	branch Test(NE,Z) l00003FB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FB5:
	branch Test(NE,Z) l00003FB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FB9:
	branch Test(NE,Z) l00003FBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FBD:
	branch Test(NE,Z) l00003FC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FC1:
	branch Test(NE,Z) l00003FC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FC5:
	branch Test(NE,Z) l00003FC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FC9:
	branch Test(NE,Z) l00003FCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FCD:
	branch Test(NE,Z) l00003FD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FD1:
	branch Test(NE,Z) l00003FD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FD5:
	branch Test(NE,Z) l00003FD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FD9:
	branch Test(NE,Z) l00003FDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FDD:
	branch Test(NE,Z) l00003FE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FE1:
	branch Test(NE,Z) l00003FE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FE5:
	branch Test(NE,Z) l00003FE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FE9:
	branch Test(NE,Z) l00003FED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FED:
	branch Test(NE,Z) l00003FF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FF1:
	branch Test(NE,Z) l00003FF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FF5:
	branch Test(NE,Z) l00003FF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FF9:
	branch Test(NE,Z) l00003FFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FFD:
	branch Test(NE,Z) l00004001
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00003FFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004001:
	branch Test(NE,Z) l00004005
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004001_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004005:
	branch Test(NE,Z) l00004009
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004005_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004009:
	branch Test(NE,Z) l0000400D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004009_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000400D:
	branch Test(NE,Z) l00004011
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000400D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004011:
	branch Test(NE,Z) l00004015
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004011_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004015:
	branch Test(NE,Z) l00004019
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004015_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004019:
	branch Test(NE,Z) l0000401D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004019_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000401D:
	branch Test(NE,Z) l00004021
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000401D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004021:
	branch Test(NE,Z) l00004025
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004021_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004025:
	branch Test(NE,Z) l00004029
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004025_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004029:
	branch Test(NE,Z) l0000402D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004029_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000402D:
	branch Test(NE,Z) l00004031
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000402D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004031:
	branch Test(NE,Z) l00004035
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004031_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004035:
	branch Test(NE,Z) l00004039
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004035_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004039:
	branch Test(NE,Z) l0000403D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004039_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000403D:
	branch Test(NE,Z) l00004041
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000403D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004041:
	branch Test(NE,Z) l00004045
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004041_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004045:
	branch Test(NE,Z) l00004049
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004045_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004049:
	branch Test(NE,Z) l0000404D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004049_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000404D:
	branch Test(NE,Z) l00004051
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000404D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004051:
	branch Test(NE,Z) l00004055
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004051_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004055:
	branch Test(NE,Z) l00004059
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004055_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004059:
	branch Test(NE,Z) l0000405D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004059_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000405D:
	branch Test(NE,Z) l00004061
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000405D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004061:
	branch Test(NE,Z) l00004065
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004061_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004065:
	branch Test(NE,Z) l00004069
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004065_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004069:
	branch Test(NE,Z) l0000406D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004069_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000406D:
	branch Test(NE,Z) l00004071
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000406D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004071:
	branch Test(NE,Z) l00004075
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004071_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004075:
	branch Test(NE,Z) l00004079
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004075_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004079:
	branch Test(NE,Z) l0000407D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004079_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000407D:
	branch Test(NE,Z) l00004081
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000407D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004081:
	branch Test(NE,Z) l00004085
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004081_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004085:
	branch Test(NE,Z) l00004089
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004085_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004089:
	branch Test(NE,Z) l0000408D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004089_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000408D:
	branch Test(NE,Z) l00004091
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000408D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004091:
	branch Test(NE,Z) l00004095
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004091_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004095:
	branch Test(NE,Z) l00004099
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004095_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004099:
	branch Test(NE,Z) l0000409D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004099_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000409D:
	branch Test(NE,Z) l000040A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000409D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040A1:
	branch Test(NE,Z) l000040A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040A5:
	branch Test(NE,Z) l000040A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040A9:
	branch Test(NE,Z) l000040AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040AD:
	branch Test(NE,Z) l000040B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040B1:
	branch Test(NE,Z) l000040B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040B5:
	branch Test(NE,Z) l000040B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040B9:
	branch Test(NE,Z) l000040BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040BD:
	branch Test(NE,Z) l000040C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040C1:
	branch Test(NE,Z) l000040C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040C5:
	branch Test(NE,Z) l000040C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040C9:
	branch Test(NE,Z) l000040CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040CD:
	branch Test(NE,Z) l000040D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040D1:
	branch Test(NE,Z) l000040D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040D5:
	branch Test(NE,Z) l000040D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040D9:
	branch Test(NE,Z) l000040DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040DD:
	branch Test(NE,Z) l000040E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040E1:
	branch Test(NE,Z) l000040E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040E5:
	branch Test(NE,Z) l000040E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040E9:
	branch Test(NE,Z) l000040ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040ED:
	branch Test(NE,Z) l000040F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040F1:
	branch Test(NE,Z) l000040F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040F5:
	branch Test(NE,Z) l000040F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040F9:
	branch Test(NE,Z) l000040FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040FD:
	branch Test(NE,Z) l00004101
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000040FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004101:
	branch Test(NE,Z) l00004105
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004101_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004105:
	branch Test(NE,Z) l00004109
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004105_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004109:
	branch Test(NE,Z) l0000410D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004109_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000410D:
	branch Test(NE,Z) l00004111
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000410D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004111:
	branch Test(NE,Z) l00004115
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004111_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004115:
	branch Test(NE,Z) l00004119
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004115_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004119:
	branch Test(NE,Z) l0000411D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004119_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000411D:
	branch Test(NE,Z) l00004121
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000411D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004121:
	branch Test(NE,Z) l00004125
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004121_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004125:
	branch Test(NE,Z) l00004129
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004125_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004129:
	branch Test(NE,Z) l0000412D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004129_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000412D:
	branch Test(NE,Z) l00004131
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000412D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004131:
	branch Test(NE,Z) l00004135
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004131_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004135:
	branch Test(NE,Z) l00004139
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004135_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004139:
	branch Test(NE,Z) l0000413D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004139_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000413D:
	branch Test(NE,Z) l00004141
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000413D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004141:
	branch Test(NE,Z) l00004145
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004141_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004145:
	branch Test(NE,Z) l00004149
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004145_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004149:
	branch Test(NE,Z) l0000414D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004149_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000414D:
	branch Test(NE,Z) l00004151
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000414D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004151:
	branch Test(NE,Z) l00004155
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004151_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004155:
	branch Test(NE,Z) l00004159
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004155_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004159:
	branch Test(NE,Z) l0000415D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004159_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000415D:
	branch Test(NE,Z) l00004161
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000415D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004161:
	branch Test(NE,Z) l00004165
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004161_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004165:
	branch Test(NE,Z) l00004169
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004165_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004169:
	branch Test(NE,Z) l0000416D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004169_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000416D:
	branch Test(NE,Z) l00004171
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000416D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004171:
	branch Test(NE,Z) l00004175
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004171_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004175:
	branch Test(NE,Z) l00004179
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004175_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004179:
	branch Test(NE,Z) l0000417D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004179_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000417D:
	branch Test(NE,Z) l00004181
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000417D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004181:
	branch Test(NE,Z) l00004185
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004181_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004185:
	branch Test(NE,Z) l00004189
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004185_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004189:
	branch Test(NE,Z) l0000418D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004189_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000418D:
	branch Test(NE,Z) l00004191
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000418D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004191:
	branch Test(NE,Z) l00004195
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004191_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004195:
	branch Test(NE,Z) l00004199
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004195_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004199:
	branch Test(NE,Z) l0000419D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004199_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000419D:
	branch Test(NE,Z) l000041A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000419D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041A1:
	branch Test(NE,Z) l000041A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041A5:
	branch Test(NE,Z) l000041A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041A9:
	branch Test(NE,Z) l000041AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041AD:
	branch Test(NE,Z) l000041B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041B1:
	branch Test(NE,Z) l000041B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041B5:
	branch Test(NE,Z) l000041B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041B9:
	branch Test(NE,Z) l000041BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041BD:
	branch Test(NE,Z) l000041C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041C1:
	branch Test(NE,Z) l000041C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041C5:
	branch Test(NE,Z) l000041C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041C9:
	branch Test(NE,Z) l000041CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041CD:
	branch Test(NE,Z) l000041D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041D1:
	branch Test(NE,Z) l000041D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041D5:
	branch Test(NE,Z) l000041D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041D9:
	branch Test(NE,Z) l000041DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041DD:
	branch Test(NE,Z) l000041E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041E1:
	branch Test(NE,Z) l000041E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041E5:
	branch Test(NE,Z) l000041E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041E9:
	branch Test(NE,Z) l000041ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041ED:
	branch Test(NE,Z) l000041F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041F1:
	branch Test(NE,Z) l000041F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041F5:
	branch Test(NE,Z) l000041F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041F9:
	branch Test(NE,Z) l000041FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041FD:
	branch Test(NE,Z) l00004201
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000041FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004201:
	branch Test(NE,Z) l00004205
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004201_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004205:
	branch Test(NE,Z) l00004209
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004205_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004209:
	branch Test(NE,Z) l0000420D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004209_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000420D:
	branch Test(NE,Z) l00004211
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000420D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004211:
	branch Test(NE,Z) l00004215
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004211_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004215:
	branch Test(NE,Z) l00004219
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004215_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004219:
	branch Test(NE,Z) l0000421D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004219_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000421D:
	branch Test(NE,Z) l00004221
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000421D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004221:
	branch Test(NE,Z) l00004225
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004221_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004225:
	branch Test(NE,Z) l00004229
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004225_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004229:
	branch Test(NE,Z) l0000422D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004229_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000422D:
	branch Test(NE,Z) l00004231
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000422D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004231:
	branch Test(NE,Z) l00004235
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004231_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004235:
	branch Test(NE,Z) l00004239
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004235_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004239:
	branch Test(NE,Z) l0000423D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004239_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000423D:
	branch Test(NE,Z) l00004241
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000423D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004241:
	branch Test(NE,Z) l00004245
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004241_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004245:
	branch Test(NE,Z) l00004249
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004245_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004249:
	branch Test(NE,Z) l0000424D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004249_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000424D:
	branch Test(NE,Z) l00004251
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000424D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004251:
	branch Test(NE,Z) l00004255
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004251_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004255:
	branch Test(NE,Z) l00004259
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004255_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004259:
	branch Test(NE,Z) l0000425D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004259_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000425D:
	branch Test(NE,Z) l00004261
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000425D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004261:
	branch Test(NE,Z) l00004265
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004261_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004265:
	branch Test(NE,Z) l00004269
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004265_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004269:
	branch Test(NE,Z) l0000426D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004269_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000426D:
	branch Test(NE,Z) l00004271
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000426D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004271:
	branch Test(NE,Z) l00004275
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004271_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004275:
	branch Test(NE,Z) l00004279
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004275_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004279:
	branch Test(NE,Z) l0000427D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004279_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000427D:
	branch Test(NE,Z) l00004281
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000427D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004281:
	branch Test(NE,Z) l00004285
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004281_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004285:
	branch Test(NE,Z) l00004289
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004285_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004289:
	branch Test(NE,Z) l0000428D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004289_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000428D:
	branch Test(NE,Z) l00004291
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000428D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004291:
	branch Test(NE,Z) l00004295
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004291_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004295:
	branch Test(NE,Z) l00004299
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004295_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004299:
	branch Test(NE,Z) l0000429D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004299_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000429D:
	branch Test(NE,Z) l000042A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000429D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042A1:
	branch Test(NE,Z) l000042A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042A5:
	branch Test(NE,Z) l000042A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042A9:
	branch Test(NE,Z) l000042AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042AD:
	branch Test(NE,Z) l000042B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042B1:
	branch Test(NE,Z) l000042B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042B5:
	branch Test(NE,Z) l000042B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042B9:
	branch Test(NE,Z) l000042BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042BD:
	branch Test(NE,Z) l000042C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042C1:
	branch Test(NE,Z) l000042C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042C5:
	branch Test(NE,Z) l000042C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042C9:
	branch Test(NE,Z) l000042CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042CD:
	branch Test(NE,Z) l000042D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042D1:
	branch Test(NE,Z) l000042D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042D5:
	branch Test(NE,Z) l000042D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042D9:
	branch Test(NE,Z) l000042DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042DD:
	branch Test(NE,Z) l000042E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042E1:
	branch Test(NE,Z) l000042E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042E5:
	branch Test(NE,Z) l000042E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042E9:
	branch Test(NE,Z) l000042ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042ED:
	branch Test(NE,Z) l000042F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042F1:
	branch Test(NE,Z) l000042F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042F5:
	branch Test(NE,Z) l000042F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042F9:
	branch Test(NE,Z) l000042FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042FD:
	branch Test(NE,Z) l00004301
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000042FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004301:
	branch Test(NE,Z) l00004305
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004301_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004305:
	branch Test(NE,Z) l00004309
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004305_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004309:
	branch Test(NE,Z) l0000430D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004309_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000430D:
	branch Test(NE,Z) l00004311
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000430D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004311:
	branch Test(NE,Z) l00004315
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004311_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004315:
	branch Test(NE,Z) l00004319
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004315_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004319:
	branch Test(NE,Z) l0000431D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004319_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000431D:
	branch Test(NE,Z) l00004321
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000431D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004321:
	branch Test(NE,Z) l00004325
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004321_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004325:
	branch Test(NE,Z) l00004329
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004325_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004329:
	branch Test(NE,Z) l0000432D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004329_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000432D:
	branch Test(NE,Z) l00004331
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000432D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004331:
	branch Test(NE,Z) l00004335
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004331_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004335:
	branch Test(NE,Z) l00004339
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004335_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004339:
	branch Test(NE,Z) l0000433D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004339_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000433D:
	branch Test(NE,Z) l00004341
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000433D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004341:
	branch Test(NE,Z) l00004345
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004341_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004345:
	branch Test(NE,Z) l00004349
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004345_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004349:
	branch Test(NE,Z) l0000434D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004349_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000434D:
	branch Test(NE,Z) l00004351
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000434D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004351:
	branch Test(NE,Z) l00004355
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004351_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004355:
	branch Test(NE,Z) l00004359
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004355_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004359:
	branch Test(NE,Z) l0000435D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004359_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000435D:
	branch Test(NE,Z) l00004361
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000435D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004361:
	branch Test(NE,Z) l00004365
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004361_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004365:
	branch Test(NE,Z) l00004369
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004365_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004369:
	branch Test(NE,Z) l0000436D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004369_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000436D:
	branch Test(NE,Z) l00004371
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000436D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004371:
	branch Test(NE,Z) l00004375
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004371_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004375:
	branch Test(NE,Z) l00004379
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004375_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004379:
	branch Test(NE,Z) l0000437D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004379_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000437D:
	branch Test(NE,Z) l00004381
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000437D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004381:
	branch Test(NE,Z) l00004385
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004381_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004385:
	branch Test(NE,Z) l00004389
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004385_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004389:
	branch Test(NE,Z) l0000438D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004389_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000438D:
	branch Test(NE,Z) l00004391
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000438D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004391:
	branch Test(NE,Z) l00004395
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004391_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004395:
	branch Test(NE,Z) l00004399
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004395_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004399:
	branch Test(NE,Z) l0000439D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004399_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000439D:
	branch Test(NE,Z) l000043A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000439D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043A1:
	branch Test(NE,Z) l000043A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043A5:
	branch Test(NE,Z) l000043A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043A9:
	branch Test(NE,Z) l000043AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043AD:
	branch Test(NE,Z) l000043B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043B1:
	branch Test(NE,Z) l000043B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043B5:
	branch Test(NE,Z) l000043B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043B9:
	branch Test(NE,Z) l000043BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043BD:
	branch Test(NE,Z) l000043C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043C1:
	branch Test(NE,Z) l000043C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043C5:
	branch Test(NE,Z) l000043C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043C9:
	branch Test(NE,Z) l000043CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043CD:
	branch Test(NE,Z) l000043D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043D1:
	branch Test(NE,Z) l000043D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043D5:
	branch Test(NE,Z) l000043D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043D9:
	branch Test(NE,Z) l000043DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043DD:
	branch Test(NE,Z) l000043E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043E1:
	branch Test(NE,Z) l000043E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043E5:
	branch Test(NE,Z) l000043E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043E9:
	branch Test(NE,Z) l000043ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043ED:
	branch Test(NE,Z) l000043F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043F1:
	branch Test(NE,Z) l000043F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043F5:
	branch Test(NE,Z) l000043F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043F9:
	branch Test(NE,Z) l000043FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043FD:
	branch Test(NE,Z) l00004401
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000043FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004401:
	branch Test(NE,Z) l00004405
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004401_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004405:
	branch Test(NE,Z) l00004409
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004405_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004409:
	branch Test(NE,Z) l0000440D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004409_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000440D:
	branch Test(NE,Z) l00004411
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000440D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004411:
	branch Test(NE,Z) l00004415
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004411_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004415:
	branch Test(NE,Z) l00004419
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004415_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004419:
	branch Test(NE,Z) l0000441D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004419_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000441D:
	branch Test(NE,Z) l00004421
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000441D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004421:
	branch Test(NE,Z) l00004425
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004421_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004425:
	branch Test(NE,Z) l00004429
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004425_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004429:
	branch Test(NE,Z) l0000442D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004429_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000442D:
	branch Test(NE,Z) l00004431
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000442D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004431:
	branch Test(NE,Z) l00004435
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004431_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004435:
	branch Test(NE,Z) l00004439
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004435_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004439:
	branch Test(NE,Z) l0000443D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004439_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000443D:
	branch Test(NE,Z) l00004441
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000443D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004441:
	branch Test(NE,Z) l00004445
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004441_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004445:
	branch Test(NE,Z) l00004449
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004445_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004449:
	branch Test(NE,Z) l0000444D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004449_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000444D:
	branch Test(NE,Z) l00004451
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000444D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004451:
	branch Test(NE,Z) l00004455
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004451_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004455:
	branch Test(NE,Z) l00004459
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004455_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004459:
	branch Test(NE,Z) l0000445D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004459_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000445D:
	branch Test(NE,Z) l00004461
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000445D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004461:
	branch Test(NE,Z) l00004465
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004461_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004465:
	branch Test(NE,Z) l00004469
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004465_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004469:
	branch Test(NE,Z) l0000446D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004469_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000446D:
	branch Test(NE,Z) l00004471
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000446D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004471:
	branch Test(NE,Z) l00004475
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004471_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004475:
	branch Test(NE,Z) l00004479
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004475_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004479:
	branch Test(NE,Z) l0000447D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004479_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000447D:
	branch Test(NE,Z) l00004481
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000447D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004481:
	branch Test(NE,Z) l00004485
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004481_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004485:
	branch Test(NE,Z) l00004489
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004485_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004489:
	branch Test(NE,Z) l0000448D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004489_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000448D:
	branch Test(NE,Z) l00004491
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000448D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004491:
	branch Test(NE,Z) l00004495
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004491_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004495:
	branch Test(NE,Z) l00004499
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004495_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004499:
	branch Test(NE,Z) l0000449D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004499_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000449D:
	branch Test(NE,Z) l000044A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000449D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044A1:
	branch Test(NE,Z) l000044A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044A5:
	branch Test(NE,Z) l000044A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044A9:
	branch Test(NE,Z) l000044AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044AD:
	branch Test(NE,Z) l000044B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044B1:
	branch Test(NE,Z) l000044B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044B5:
	branch Test(NE,Z) l000044B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044B9:
	branch Test(NE,Z) l000044BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044BD:
	branch Test(NE,Z) l000044C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044C1:
	branch Test(NE,Z) l000044C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044C5:
	branch Test(NE,Z) l000044C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044C9:
	branch Test(NE,Z) l000044CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044CD:
	branch Test(NE,Z) l000044D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044D1:
	branch Test(NE,Z) l000044D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044D5:
	branch Test(NE,Z) l000044D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044D9:
	branch Test(NE,Z) l000044DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044DD:
	branch Test(NE,Z) l000044E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044E1:
	branch Test(NE,Z) l000044E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044E5:
	branch Test(NE,Z) l000044E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044E9:
	branch Test(NE,Z) l000044ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044ED:
	branch Test(NE,Z) l000044F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044F1:
	branch Test(NE,Z) l000044F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044F5:
	branch Test(NE,Z) l000044F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044F9:
	branch Test(NE,Z) l000044FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044FD:
	branch Test(NE,Z) l00004501
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000044FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004501:
	branch Test(NE,Z) l00004505
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004501_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004505:
	branch Test(NE,Z) l00004509
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004505_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004509:
	branch Test(NE,Z) l0000450D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004509_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000450D:
	branch Test(NE,Z) l00004511
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000450D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004511:
	branch Test(NE,Z) l00004515
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004511_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004515:
	branch Test(NE,Z) l00004519
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004515_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004519:
	branch Test(NE,Z) l0000451D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004519_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000451D:
	branch Test(NE,Z) l00004521
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000451D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004521:
	branch Test(NE,Z) l00004525
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004521_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004525:
	branch Test(NE,Z) l00004529
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004525_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004529:
	branch Test(NE,Z) l0000452D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004529_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000452D:
	branch Test(NE,Z) l00004531
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000452D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004531:
	branch Test(NE,Z) l00004535
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004531_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004535:
	branch Test(NE,Z) l00004539
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004535_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004539:
	branch Test(NE,Z) l0000453D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004539_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000453D:
	branch Test(NE,Z) l00004541
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000453D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004541:
	branch Test(NE,Z) l00004545
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004541_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004545:
	branch Test(NE,Z) l00004549
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004545_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004549:
	branch Test(NE,Z) l0000454D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004549_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000454D:
	branch Test(NE,Z) l00004551
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000454D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004551:
	branch Test(NE,Z) l00004555
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004551_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004555:
	branch Test(NE,Z) l00004559
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004555_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004559:
	branch Test(NE,Z) l0000455D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004559_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000455D:
	branch Test(NE,Z) l00004561
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000455D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004561:
	branch Test(NE,Z) l00004565
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004561_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004565:
	branch Test(NE,Z) l00004569
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004565_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004569:
	branch Test(NE,Z) l0000456D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004569_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000456D:
	branch Test(NE,Z) l00004571
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000456D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004571:
	branch Test(NE,Z) l00004575
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004571_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004575:
	branch Test(NE,Z) l00004579
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004575_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004579:
	branch Test(NE,Z) l0000457D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004579_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000457D:
	branch Test(NE,Z) l00004581
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000457D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004581:
	branch Test(NE,Z) l00004585
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004581_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004585:
	branch Test(NE,Z) l00004589
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004585_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004589:
	branch Test(NE,Z) l0000458D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004589_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000458D:
	branch Test(NE,Z) l00004591
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000458D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004591:
	branch Test(NE,Z) l00004595
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004591_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004595:
	branch Test(NE,Z) l00004599
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004595_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004599:
	branch Test(NE,Z) l0000459D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004599_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000459D:
	branch Test(NE,Z) l000045A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000459D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045A1:
	branch Test(NE,Z) l000045A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045A5:
	branch Test(NE,Z) l000045A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045A9:
	branch Test(NE,Z) l000045AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045AD:
	branch Test(NE,Z) l000045B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045B1:
	branch Test(NE,Z) l000045B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045B5:
	branch Test(NE,Z) l000045B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045B9:
	branch Test(NE,Z) l000045BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045BD:
	branch Test(NE,Z) l000045C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045C1:
	branch Test(NE,Z) l000045C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045C5:
	branch Test(NE,Z) l000045C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045C9:
	branch Test(NE,Z) l000045CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045CD:
	branch Test(NE,Z) l000045D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045D1:
	branch Test(NE,Z) l000045D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045D5:
	branch Test(NE,Z) l000045D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045D9:
	branch Test(NE,Z) l000045DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045DD:
	branch Test(NE,Z) l000045E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045E1:
	branch Test(NE,Z) l000045E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045E5:
	branch Test(NE,Z) l000045E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045E9:
	branch Test(NE,Z) l000045ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045ED:
	branch Test(NE,Z) l000045F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045F1:
	branch Test(NE,Z) l000045F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045F5:
	branch Test(NE,Z) l000045F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045F9:
	branch Test(NE,Z) l000045FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045FD:
	branch Test(NE,Z) l00004601
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000045FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004601:
	branch Test(NE,Z) l00004605
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004601_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004605:
	branch Test(NE,Z) l00004609
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004605_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004609:
	branch Test(NE,Z) l0000460D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004609_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000460D:
	branch Test(NE,Z) l00004611
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000460D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004611:
	branch Test(NE,Z) l00004615
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004611_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004615:
	branch Test(NE,Z) l00004619
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004615_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004619:
	branch Test(NE,Z) l0000461D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004619_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000461D:
	branch Test(NE,Z) l00004621
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000461D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004621:
	branch Test(NE,Z) l00004625
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004621_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004625:
	branch Test(NE,Z) l00004629
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004625_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004629:
	branch Test(NE,Z) l0000462D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004629_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000462D:
	branch Test(NE,Z) l00004631
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000462D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004631:
	branch Test(NE,Z) l00004635
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004631_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004635:
	branch Test(NE,Z) l00004639
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004635_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004639:
	branch Test(NE,Z) l0000463D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004639_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000463D:
	branch Test(NE,Z) l00004641
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000463D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004641:
	branch Test(NE,Z) l00004645
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004641_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004645:
	branch Test(NE,Z) l00004649
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004645_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004649:
	branch Test(NE,Z) l0000464D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004649_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000464D:
	branch Test(NE,Z) l00004651
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000464D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004651:
	branch Test(NE,Z) l00004655
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004651_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004655:
	branch Test(NE,Z) l00004659
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004655_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004659:
	branch Test(NE,Z) l0000465D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004659_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000465D:
	branch Test(NE,Z) l00004661
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000465D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004661:
	branch Test(NE,Z) l00004665
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004661_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004665:
	branch Test(NE,Z) l00004669
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004665_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004669:
	branch Test(NE,Z) l0000466D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004669_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000466D:
	branch Test(NE,Z) l00004671
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000466D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004671:
	branch Test(NE,Z) l00004675
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004671_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004675:
	branch Test(NE,Z) l00004679
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004675_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004679:
	branch Test(NE,Z) l0000467D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004679_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000467D:
	branch Test(NE,Z) l00004681
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000467D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004681:
	branch Test(NE,Z) l00004685
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004681_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004685:
	branch Test(NE,Z) l00004689
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004685_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004689:
	branch Test(NE,Z) l0000468D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004689_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000468D:
	branch Test(NE,Z) l00004691
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000468D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004691:
	branch Test(NE,Z) l00004695
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004691_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004695:
	branch Test(NE,Z) l00004699
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004695_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004699:
	branch Test(NE,Z) l0000469D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004699_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000469D:
	branch Test(NE,Z) l000046A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000469D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046A1:
	branch Test(NE,Z) l000046A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046A5:
	branch Test(NE,Z) l000046A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046A9:
	branch Test(NE,Z) l000046AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046AD:
	branch Test(NE,Z) l000046B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046B1:
	branch Test(NE,Z) l000046B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046B5:
	branch Test(NE,Z) l000046B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046B9:
	branch Test(NE,Z) l000046BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046BD:
	branch Test(NE,Z) l000046C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046C1:
	branch Test(NE,Z) l000046C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046C5:
	branch Test(NE,Z) l000046C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046C9:
	branch Test(NE,Z) l000046CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046CD:
	branch Test(NE,Z) l000046D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046D1:
	branch Test(NE,Z) l000046D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046D5:
	branch Test(NE,Z) l000046D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046D9:
	branch Test(NE,Z) l000046DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046DD:
	branch Test(NE,Z) l000046E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046E1:
	branch Test(NE,Z) l000046E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046E5:
	branch Test(NE,Z) l000046E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046E9:
	branch Test(NE,Z) l000046ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046ED:
	branch Test(NE,Z) l000046F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046F1:
	branch Test(NE,Z) l000046F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046F5:
	branch Test(NE,Z) l000046F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046F9:
	branch Test(NE,Z) l000046FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046FD:
	branch Test(NE,Z) l00004701
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000046FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004701:
	branch Test(NE,Z) l00004705
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004701_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004705:
	branch Test(NE,Z) l00004709
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004705_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004709:
	branch Test(NE,Z) l0000470D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004709_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000470D:
	branch Test(NE,Z) l00004711
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000470D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004711:
	branch Test(NE,Z) l00004715
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004711_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004715:
	branch Test(NE,Z) l00004719
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004715_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004719:
	branch Test(NE,Z) l0000471D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004719_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000471D:
	branch Test(NE,Z) l00004721
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000471D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004721:
	branch Test(NE,Z) l00004725
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004721_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004725:
	branch Test(NE,Z) l00004729
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004725_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004729:
	branch Test(NE,Z) l0000472D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004729_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000472D:
	branch Test(NE,Z) l00004731
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000472D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004731:
	branch Test(NE,Z) l00004735
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004731_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004735:
	branch Test(NE,Z) l00004739
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004735_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004739:
	branch Test(NE,Z) l0000473D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004739_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000473D:
	branch Test(NE,Z) l00004741
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000473D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004741:
	branch Test(NE,Z) l00004745
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004741_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004745:
	branch Test(NE,Z) l00004749
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004745_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004749:
	branch Test(NE,Z) l0000474D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004749_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000474D:
	branch Test(NE,Z) l00004751
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000474D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004751:
	branch Test(NE,Z) l00004755
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004751_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004755:
	branch Test(NE,Z) l00004759
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004755_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004759:
	branch Test(NE,Z) l0000475D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004759_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000475D:
	branch Test(NE,Z) l00004761
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000475D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004761:
	branch Test(NE,Z) l00004765
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004761_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004765:
	branch Test(NE,Z) l00004769
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004765_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004769:
	branch Test(NE,Z) l0000476D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004769_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000476D:
	branch Test(NE,Z) l00004771
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000476D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004771:
	branch Test(NE,Z) l00004775
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004771_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004775:
	branch Test(NE,Z) l00004779
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004775_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004779:
	branch Test(NE,Z) l0000477D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004779_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000477D:
	branch Test(NE,Z) l00004781
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000477D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004781:
	branch Test(NE,Z) l00004785
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004781_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004785:
	branch Test(NE,Z) l00004789
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004785_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004789:
	branch Test(NE,Z) l0000478D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004789_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000478D:
	branch Test(NE,Z) l00004791
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000478D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004791:
	branch Test(NE,Z) l00004795
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004791_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004795:
	branch Test(NE,Z) l00004799
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004795_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004799:
	branch Test(NE,Z) l0000479D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004799_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000479D:
	branch Test(NE,Z) l000047A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000479D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047A1:
	branch Test(NE,Z) l000047A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047A5:
	branch Test(NE,Z) l000047A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047A9:
	branch Test(NE,Z) l000047AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047AD:
	branch Test(NE,Z) l000047B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047B1:
	branch Test(NE,Z) l000047B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047B5:
	branch Test(NE,Z) l000047B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047B9:
	branch Test(NE,Z) l000047BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047BD:
	branch Test(NE,Z) l000047C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047C1:
	branch Test(NE,Z) l000047C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047C5:
	branch Test(NE,Z) l000047C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047C9:
	branch Test(NE,Z) l000047CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047CD:
	branch Test(NE,Z) l000047D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047D1:
	branch Test(NE,Z) l000047D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047D5:
	branch Test(NE,Z) l000047D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047D9:
	branch Test(NE,Z) l000047DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047DD:
	branch Test(NE,Z) l000047E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047E1:
	branch Test(NE,Z) l000047E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047E5:
	branch Test(NE,Z) l000047E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047E9:
	branch Test(NE,Z) l000047ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047ED:
	branch Test(NE,Z) l000047F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047F1:
	branch Test(NE,Z) l000047F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047F5:
	branch Test(NE,Z) l000047F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047F9:
	branch Test(NE,Z) l000047FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047FD:
	branch Test(NE,Z) l00004801
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000047FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004801:
	branch Test(NE,Z) l00004805
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004801_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004805:
	branch Test(NE,Z) l00004809
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004805_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004809:
	branch Test(NE,Z) l0000480D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004809_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000480D:
	branch Test(NE,Z) l00004811
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000480D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004811:
	branch Test(NE,Z) l00004815
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004811_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004815:
	branch Test(NE,Z) l00004819
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004815_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004819:
	branch Test(NE,Z) l0000481D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004819_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000481D:
	branch Test(NE,Z) l00004821
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000481D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004821:
	branch Test(NE,Z) l00004825
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004821_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004825:
	branch Test(NE,Z) l00004829
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004825_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004829:
	branch Test(NE,Z) l0000482D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004829_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000482D:
	branch Test(NE,Z) l00004831
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000482D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004831:
	branch Test(NE,Z) l00004835
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004831_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004835:
	branch Test(NE,Z) l00004839
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004835_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004839:
	branch Test(NE,Z) l0000483D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004839_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000483D:
	branch Test(NE,Z) l00004841
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000483D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004841:
	branch Test(NE,Z) l00004845
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004841_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004845:
	branch Test(NE,Z) l00004849
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004845_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004849:
	branch Test(NE,Z) l0000484D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004849_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000484D:
	branch Test(NE,Z) l00004851
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000484D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004851:
	branch Test(NE,Z) l00004855
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004851_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004855:
	branch Test(NE,Z) l00004859
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004855_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004859:
	branch Test(NE,Z) l0000485D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004859_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000485D:
	branch Test(NE,Z) l00004861
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000485D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004861:
	branch Test(NE,Z) l00004865
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004861_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004865:
	branch Test(NE,Z) l00004869
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004865_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004869:
	branch Test(NE,Z) l0000486D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004869_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000486D:
	branch Test(NE,Z) l00004871
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000486D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004871:
	branch Test(NE,Z) l00004875
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004871_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004875:
	branch Test(NE,Z) l00004879
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004875_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004879:
	branch Test(NE,Z) l0000487D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004879_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000487D:
	branch Test(NE,Z) l00004881
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000487D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004881:
	branch Test(NE,Z) l00004885
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004881_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004885:
	branch Test(NE,Z) l00004889
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004885_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004889:
	branch Test(NE,Z) l0000488D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004889_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000488D:
	branch Test(NE,Z) l00004891
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000488D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004891:
	branch Test(NE,Z) l00004895
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004891_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004895:
	branch Test(NE,Z) l00004899
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004895_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004899:
	branch Test(NE,Z) l0000489D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004899_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000489D:
	branch Test(NE,Z) l000048A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000489D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048A1:
	branch Test(NE,Z) l000048A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048A5:
	branch Test(NE,Z) l000048A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048A9:
	branch Test(NE,Z) l000048AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048AD:
	branch Test(NE,Z) l000048B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048B1:
	branch Test(NE,Z) l000048B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048B5:
	branch Test(NE,Z) l000048B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048B9:
	branch Test(NE,Z) l000048BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048BD:
	branch Test(NE,Z) l000048C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048C1:
	branch Test(NE,Z) l000048C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048C5:
	branch Test(NE,Z) l000048C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048C9:
	branch Test(NE,Z) l000048CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048CD:
	branch Test(NE,Z) l000048D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048D1:
	branch Test(NE,Z) l000048D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048D5:
	branch Test(NE,Z) l000048D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048D9:
	branch Test(NE,Z) l000048DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048DD:
	branch Test(NE,Z) l000048E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048E1:
	branch Test(NE,Z) l000048E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048E5:
	branch Test(NE,Z) l000048E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048E9:
	branch Test(NE,Z) l000048ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048ED:
	branch Test(NE,Z) l000048F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048F1:
	branch Test(NE,Z) l000048F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048F5:
	branch Test(NE,Z) l000048F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048F9:
	branch Test(NE,Z) l000048FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048FD:
	branch Test(NE,Z) l00004901
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000048FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004901:
	branch Test(NE,Z) l00004905
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004901_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004905:
	branch Test(NE,Z) l00004909
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004905_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004909:
	branch Test(NE,Z) l0000490D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004909_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000490D:
	branch Test(NE,Z) l00004911
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000490D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004911:
	branch Test(NE,Z) l00004915
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004911_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004915:
	branch Test(NE,Z) l00004919
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004915_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004919:
	branch Test(NE,Z) l0000491D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004919_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000491D:
	branch Test(NE,Z) l00004921
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000491D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004921:
	branch Test(NE,Z) l00004925
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004921_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004925:
	branch Test(NE,Z) l00004929
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004925_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004929:
	branch Test(NE,Z) l0000492D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004929_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000492D:
	branch Test(NE,Z) l00004931
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000492D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004931:
	branch Test(NE,Z) l00004935
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004931_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004935:
	branch Test(NE,Z) l00004939
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004935_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004939:
	branch Test(NE,Z) l0000493D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004939_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000493D:
	branch Test(NE,Z) l00004941
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000493D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004941:
	branch Test(NE,Z) l00004945
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004941_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004945:
	branch Test(NE,Z) l00004949
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004945_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004949:
	branch Test(NE,Z) l0000494D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004949_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000494D:
	branch Test(NE,Z) l00004951
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000494D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004951:
	branch Test(NE,Z) l00004955
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004951_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004955:
	branch Test(NE,Z) l00004959
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004955_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004959:
	branch Test(NE,Z) l0000495D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004959_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000495D:
	branch Test(NE,Z) l00004961
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000495D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004961:
	branch Test(NE,Z) l00004965
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004961_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004965:
	branch Test(NE,Z) l00004969
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004965_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004969:
	branch Test(NE,Z) l0000496D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004969_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000496D:
	branch Test(NE,Z) l00004971
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000496D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004971:
	branch Test(NE,Z) l00004975
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004971_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004975:
	branch Test(NE,Z) l00004979
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004975_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004979:
	branch Test(NE,Z) l0000497D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004979_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000497D:
	branch Test(NE,Z) l00004981
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000497D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004981:
	branch Test(NE,Z) l00004985
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004981_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004985:
	branch Test(NE,Z) l00004989
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004985_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004989:
	branch Test(NE,Z) l0000498D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004989_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000498D:
	branch Test(NE,Z) l00004991
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000498D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004991:
	branch Test(NE,Z) l00004995
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004991_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004995:
	branch Test(NE,Z) l00004999
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004995_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004999:
	branch Test(NE,Z) l0000499D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004999_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000499D:
	branch Test(NE,Z) l000049A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000499D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049A1:
	branch Test(NE,Z) l000049A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049A5:
	branch Test(NE,Z) l000049A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049A9:
	branch Test(NE,Z) l000049AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049AD:
	branch Test(NE,Z) l000049B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049B1:
	branch Test(NE,Z) l000049B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049B5:
	branch Test(NE,Z) l000049B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049B9:
	branch Test(NE,Z) l000049BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049BD:
	branch Test(NE,Z) l000049C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049C1:
	branch Test(NE,Z) l000049C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049C5:
	branch Test(NE,Z) l000049C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049C9:
	branch Test(NE,Z) l000049CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049CD:
	branch Test(NE,Z) l000049D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049D1:
	branch Test(NE,Z) l000049D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049D5:
	branch Test(NE,Z) l000049D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049D9:
	branch Test(NE,Z) l000049DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049DD:
	branch Test(NE,Z) l000049E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049E1:
	branch Test(NE,Z) l000049E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049E5:
	branch Test(NE,Z) l000049E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049E9:
	branch Test(NE,Z) l000049ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049ED:
	branch Test(NE,Z) l000049F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049F1:
	branch Test(NE,Z) l000049F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049F5:
	branch Test(NE,Z) l000049F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049F9:
	branch Test(NE,Z) l000049FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049FD:
	branch Test(NE,Z) l00004A01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000049FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A01:
	branch Test(NE,Z) l00004A05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A05:
	branch Test(NE,Z) l00004A09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A09:
	branch Test(NE,Z) l00004A0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A0D:
	branch Test(NE,Z) l00004A11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A11:
	branch Test(NE,Z) l00004A15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A15:
	branch Test(NE,Z) l00004A19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A19:
	branch Test(NE,Z) l00004A1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A1D:
	branch Test(NE,Z) l00004A21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A21:
	branch Test(NE,Z) l00004A25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A25:
	branch Test(NE,Z) l00004A29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A29:
	branch Test(NE,Z) l00004A2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A2D:
	branch Test(NE,Z) l00004A31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A31:
	branch Test(NE,Z) l00004A35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A35:
	branch Test(NE,Z) l00004A39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A39:
	branch Test(NE,Z) l00004A3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A3D:
	branch Test(NE,Z) l00004A41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A41:
	branch Test(NE,Z) l00004A45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A45:
	branch Test(NE,Z) l00004A49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A49:
	branch Test(NE,Z) l00004A4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A4D:
	branch Test(NE,Z) l00004A51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A51:
	branch Test(NE,Z) l00004A55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A55:
	branch Test(NE,Z) l00004A59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A59:
	branch Test(NE,Z) l00004A5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A5D:
	branch Test(NE,Z) l00004A61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A61:
	branch Test(NE,Z) l00004A65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A65:
	branch Test(NE,Z) l00004A69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A69:
	branch Test(NE,Z) l00004A6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A6D:
	branch Test(NE,Z) l00004A71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A71:
	branch Test(NE,Z) l00004A75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A75:
	branch Test(NE,Z) l00004A79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A79:
	branch Test(NE,Z) l00004A7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A7D:
	branch Test(NE,Z) l00004A81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A81:
	branch Test(NE,Z) l00004A85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A85:
	branch Test(NE,Z) l00004A89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A89:
	branch Test(NE,Z) l00004A8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A8D:
	branch Test(NE,Z) l00004A91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A91:
	branch Test(NE,Z) l00004A95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A95:
	branch Test(NE,Z) l00004A99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A99:
	branch Test(NE,Z) l00004A9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A9D:
	branch Test(NE,Z) l00004AA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004A9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AA1:
	branch Test(NE,Z) l00004AA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AA5:
	branch Test(NE,Z) l00004AA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AA9:
	branch Test(NE,Z) l00004AAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AAD:
	branch Test(NE,Z) l00004AB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AB1:
	branch Test(NE,Z) l00004AB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AB5:
	branch Test(NE,Z) l00004AB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AB9:
	branch Test(NE,Z) l00004ABD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004ABD:
	branch Test(NE,Z) l00004AC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004ABD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AC1:
	branch Test(NE,Z) l00004AC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AC5:
	branch Test(NE,Z) l00004AC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AC9:
	branch Test(NE,Z) l00004ACD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004ACD:
	branch Test(NE,Z) l00004AD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004ACD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AD1:
	branch Test(NE,Z) l00004AD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AD5:
	branch Test(NE,Z) l00004AD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AD9:
	branch Test(NE,Z) l00004ADD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004ADD:
	branch Test(NE,Z) l00004AE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004ADD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AE1:
	branch Test(NE,Z) l00004AE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AE5:
	branch Test(NE,Z) l00004AE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AE9:
	branch Test(NE,Z) l00004AED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AED:
	branch Test(NE,Z) l00004AF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AF1:
	branch Test(NE,Z) l00004AF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AF5:
	branch Test(NE,Z) l00004AF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AF9:
	branch Test(NE,Z) l00004AFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AFD:
	branch Test(NE,Z) l00004B01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004AFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B01:
	branch Test(NE,Z) l00004B05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B05:
	branch Test(NE,Z) l00004B09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B09:
	branch Test(NE,Z) l00004B0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B0D:
	branch Test(NE,Z) l00004B11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B11:
	branch Test(NE,Z) l00004B15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B15:
	branch Test(NE,Z) l00004B19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B19:
	branch Test(NE,Z) l00004B1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B1D:
	branch Test(NE,Z) l00004B21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B21:
	branch Test(NE,Z) l00004B25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B25:
	branch Test(NE,Z) l00004B29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B29:
	branch Test(NE,Z) l00004B2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B2D:
	branch Test(NE,Z) l00004B31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B31:
	branch Test(NE,Z) l00004B35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B35:
	branch Test(NE,Z) l00004B39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B39:
	branch Test(NE,Z) l00004B3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B3D:
	branch Test(NE,Z) l00004B41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B41:
	branch Test(NE,Z) l00004B45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B45:
	branch Test(NE,Z) l00004B49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B49:
	branch Test(NE,Z) l00004B4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B4D:
	branch Test(NE,Z) l00004B51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B51:
	branch Test(NE,Z) l00004B55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B55:
	branch Test(NE,Z) l00004B59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B59:
	branch Test(NE,Z) l00004B5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B5D:
	branch Test(NE,Z) l00004B61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B61:
	branch Test(NE,Z) l00004B65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B65:
	branch Test(NE,Z) l00004B69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B69:
	branch Test(NE,Z) l00004B6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B6D:
	branch Test(NE,Z) l00004B71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B71:
	branch Test(NE,Z) l00004B75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B75:
	branch Test(NE,Z) l00004B79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B79:
	branch Test(NE,Z) l00004B7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B7D:
	branch Test(NE,Z) l00004B81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B81:
	branch Test(NE,Z) l00004B85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B85:
	branch Test(NE,Z) l00004B89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B89:
	branch Test(NE,Z) l00004B8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B8D:
	branch Test(NE,Z) l00004B91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B91:
	branch Test(NE,Z) l00004B95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B95:
	branch Test(NE,Z) l00004B99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B99:
	branch Test(NE,Z) l00004B9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B9D:
	branch Test(NE,Z) l00004BA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004B9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BA1:
	branch Test(NE,Z) l00004BA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BA5:
	branch Test(NE,Z) l00004BA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BA9:
	branch Test(NE,Z) l00004BAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BAD:
	branch Test(NE,Z) l00004BB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BB1:
	branch Test(NE,Z) l00004BB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BB5:
	branch Test(NE,Z) l00004BB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BB9:
	branch Test(NE,Z) l00004BBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BBD:
	branch Test(NE,Z) l00004BC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BC1:
	branch Test(NE,Z) l00004BC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BC5:
	branch Test(NE,Z) l00004BC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BC9:
	branch Test(NE,Z) l00004BCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BCD:
	branch Test(NE,Z) l00004BD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BD1:
	branch Test(NE,Z) l00004BD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BD5:
	branch Test(NE,Z) l00004BD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BD9:
	branch Test(NE,Z) l00004BDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BDD:
	branch Test(NE,Z) l00004BE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BE1:
	branch Test(NE,Z) l00004BE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BE5:
	branch Test(NE,Z) l00004BE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BE9:
	branch Test(NE,Z) l00004BED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BED:
	branch Test(NE,Z) l00004BF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BF1:
	branch Test(NE,Z) l00004BF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BF5:
	branch Test(NE,Z) l00004BF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BF9:
	branch Test(NE,Z) l00004BFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BFD:
	branch Test(NE,Z) l00004C01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004BFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C01:
	branch Test(NE,Z) l00004C05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C05:
	branch Test(NE,Z) l00004C09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C09:
	branch Test(NE,Z) l00004C0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C0D:
	branch Test(NE,Z) l00004C11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C11:
	branch Test(NE,Z) l00004C15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C15:
	branch Test(NE,Z) l00004C19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C19:
	branch Test(NE,Z) l00004C1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C1D:
	branch Test(NE,Z) l00004C21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C21:
	branch Test(NE,Z) l00004C25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C25:
	branch Test(NE,Z) l00004C29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C29:
	branch Test(NE,Z) l00004C2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C2D:
	branch Test(NE,Z) l00004C31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C31:
	branch Test(NE,Z) l00004C35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C35:
	branch Test(NE,Z) l00004C39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C39:
	branch Test(NE,Z) l00004C3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C3D:
	branch Test(NE,Z) l00004C41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C41:
	branch Test(NE,Z) l00004C45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C45:
	branch Test(NE,Z) l00004C49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C49:
	branch Test(NE,Z) l00004C4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C4D:
	branch Test(NE,Z) l00004C51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C51:
	branch Test(NE,Z) l00004C55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C55:
	branch Test(NE,Z) l00004C59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C59:
	branch Test(NE,Z) l00004C5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C5D:
	branch Test(NE,Z) l00004C61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C61:
	branch Test(NE,Z) l00004C65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C65:
	branch Test(NE,Z) l00004C69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C69:
	branch Test(NE,Z) l00004C6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C6D:
	branch Test(NE,Z) l00004C71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C71:
	branch Test(NE,Z) l00004C75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C75:
	branch Test(NE,Z) l00004C79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C79:
	branch Test(NE,Z) l00004C7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C7D:
	branch Test(NE,Z) l00004C81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C81:
	branch Test(NE,Z) l00004C85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C85:
	branch Test(NE,Z) l00004C89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C89:
	branch Test(NE,Z) l00004C8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C8D:
	branch Test(NE,Z) l00004C91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C91:
	branch Test(NE,Z) l00004C95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C95:
	branch Test(NE,Z) l00004C99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C99:
	branch Test(NE,Z) l00004C9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C9D:
	branch Test(NE,Z) l00004CA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004C9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CA1:
	branch Test(NE,Z) l00004CA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CA5:
	branch Test(NE,Z) l00004CA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CA9:
	branch Test(NE,Z) l00004CAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CAD:
	branch Test(NE,Z) l00004CB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CB1:
	branch Test(NE,Z) l00004CB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CB5:
	branch Test(NE,Z) l00004CB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CB9:
	branch Test(NE,Z) l00004CBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CBD:
	branch Test(NE,Z) l00004CC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CC1:
	branch Test(NE,Z) l00004CC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CC5:
	branch Test(NE,Z) l00004CC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CC9:
	branch Test(NE,Z) l00004CCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CCD:
	branch Test(NE,Z) l00004CD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CD1:
	branch Test(NE,Z) l00004CD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CD5:
	branch Test(NE,Z) l00004CD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CD9:
	branch Test(NE,Z) l00004CDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CDD:
	branch Test(NE,Z) l00004CE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CE1:
	branch Test(NE,Z) l00004CE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CE5:
	branch Test(NE,Z) l00004CE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CE9:
	branch Test(NE,Z) l00004CED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CED:
	branch Test(NE,Z) l00004CF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CF1:
	branch Test(NE,Z) l00004CF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CF5:
	branch Test(NE,Z) l00004CF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CF9:
	branch Test(NE,Z) l00004CFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CFD:
	branch Test(NE,Z) l00004D01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004CFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D01:
	branch Test(NE,Z) l00004D05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D05:
	branch Test(NE,Z) l00004D09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D09:
	branch Test(NE,Z) l00004D0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D0D:
	branch Test(NE,Z) l00004D11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D11:
	branch Test(NE,Z) l00004D15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D15:
	branch Test(NE,Z) l00004D19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D19:
	branch Test(NE,Z) l00004D1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D1D:
	branch Test(NE,Z) l00004D21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D21:
	branch Test(NE,Z) l00004D25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D25:
	branch Test(NE,Z) l00004D29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D29:
	branch Test(NE,Z) l00004D2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D2D:
	branch Test(NE,Z) l00004D31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D31:
	branch Test(NE,Z) l00004D35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D35:
	branch Test(NE,Z) l00004D39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D39:
	branch Test(NE,Z) l00004D3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D3D:
	branch Test(NE,Z) l00004D41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D41:
	branch Test(NE,Z) l00004D45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D45:
	branch Test(NE,Z) l00004D49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D49:
	branch Test(NE,Z) l00004D4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D4D:
	branch Test(NE,Z) l00004D51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D51:
	branch Test(NE,Z) l00004D55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D55:
	branch Test(NE,Z) l00004D59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D59:
	branch Test(NE,Z) l00004D5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D5D:
	branch Test(NE,Z) l00004D61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D61:
	branch Test(NE,Z) l00004D65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D65:
	branch Test(NE,Z) l00004D69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D69:
	branch Test(NE,Z) l00004D6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D6D:
	branch Test(NE,Z) l00004D71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D71:
	branch Test(NE,Z) l00004D75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D75:
	branch Test(NE,Z) l00004D79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D79:
	branch Test(NE,Z) l00004D7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D7D:
	branch Test(NE,Z) l00004D81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D81:
	branch Test(NE,Z) l00004D85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D85:
	branch Test(NE,Z) l00004D89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D89:
	branch Test(NE,Z) l00004D8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D8D:
	branch Test(NE,Z) l00004D91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D91:
	branch Test(NE,Z) l00004D95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D95:
	branch Test(NE,Z) l00004D99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D99:
	branch Test(NE,Z) l00004D9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D9D:
	branch Test(NE,Z) l00004DA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004D9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DA1:
	branch Test(NE,Z) l00004DA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DA5:
	branch Test(NE,Z) l00004DA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DA9:
	branch Test(NE,Z) l00004DAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DAD:
	branch Test(NE,Z) l00004DB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DB1:
	branch Test(NE,Z) l00004DB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DB5:
	branch Test(NE,Z) l00004DB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DB9:
	branch Test(NE,Z) l00004DBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DBD:
	branch Test(NE,Z) l00004DC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DC1:
	branch Test(NE,Z) l00004DC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DC5:
	branch Test(NE,Z) l00004DC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DC9:
	branch Test(NE,Z) l00004DCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DCD:
	branch Test(NE,Z) l00004DD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DD1:
	branch Test(NE,Z) l00004DD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DD5:
	branch Test(NE,Z) l00004DD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DD9:
	branch Test(NE,Z) l00004DDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DDD:
	branch Test(NE,Z) l00004DE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DE1:
	branch Test(NE,Z) l00004DE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DE5:
	branch Test(NE,Z) l00004DE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DE9:
	branch Test(NE,Z) l00004DED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DED:
	branch Test(NE,Z) l00004DF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DF1:
	branch Test(NE,Z) l00004DF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DF5:
	branch Test(NE,Z) l00004DF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DF9:
	branch Test(NE,Z) l00004DFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DFD:
	branch Test(NE,Z) l00004E01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004DFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E01:
	branch Test(NE,Z) l00004E05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E05:
	branch Test(NE,Z) l00004E09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E09:
	branch Test(NE,Z) l00004E0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E0D:
	branch Test(NE,Z) l00004E11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E11:
	branch Test(NE,Z) l00004E15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E15:
	branch Test(NE,Z) l00004E19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E19:
	branch Test(NE,Z) l00004E1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E1D:
	branch Test(NE,Z) l00004E21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E21:
	branch Test(NE,Z) l00004E25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E25:
	branch Test(NE,Z) l00004E29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E29:
	branch Test(NE,Z) l00004E2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E2D:
	branch Test(NE,Z) l00004E31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E31:
	branch Test(NE,Z) l00004E35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E35:
	branch Test(NE,Z) l00004E39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E39:
	branch Test(NE,Z) l00004E3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E3D:
	branch Test(NE,Z) l00004E41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E41:
	branch Test(NE,Z) l00004E45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E45:
	branch Test(NE,Z) l00004E49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E49:
	branch Test(NE,Z) l00004E4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E4D:
	branch Test(NE,Z) l00004E51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E51:
	branch Test(NE,Z) l00004E55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E55:
	branch Test(NE,Z) l00004E59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E59:
	branch Test(NE,Z) l00004E5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E5D:
	branch Test(NE,Z) l00004E61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E61:
	branch Test(NE,Z) l00004E65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E65:
	branch Test(NE,Z) l00004E69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E69:
	branch Test(NE,Z) l00004E6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E6D:
	branch Test(NE,Z) l00004E71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E71:
	branch Test(NE,Z) l00004E75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E75:
	branch Test(NE,Z) l00004E79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E79:
	branch Test(NE,Z) l00004E7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E7D:
	branch Test(NE,Z) l00004E81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E81:
	branch Test(NE,Z) l00004E85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E85:
	branch Test(NE,Z) l00004E89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E89:
	branch Test(NE,Z) l00004E8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E8D:
	branch Test(NE,Z) l00004E91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E91:
	branch Test(NE,Z) l00004E95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E95:
	branch Test(NE,Z) l00004E99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E99:
	branch Test(NE,Z) l00004E9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E9D:
	branch Test(NE,Z) l00004EA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004E9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EA1:
	branch Test(NE,Z) l00004EA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EA5:
	branch Test(NE,Z) l00004EA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EA9:
	branch Test(NE,Z) l00004EAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EAD:
	branch Test(NE,Z) l00004EB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EB1:
	branch Test(NE,Z) l00004EB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EB5:
	branch Test(NE,Z) l00004EB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EB9:
	branch Test(NE,Z) l00004EBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EBD:
	branch Test(NE,Z) l00004EC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EC1:
	branch Test(NE,Z) l00004EC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EC5:
	branch Test(NE,Z) l00004EC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EC9:
	branch Test(NE,Z) l00004ECD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004ECD:
	branch Test(NE,Z) l00004ED1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004ECD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004ED1:
	branch Test(NE,Z) l00004ED5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004ED1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004ED5:
	branch Test(NE,Z) l00004ED9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004ED5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004ED9:
	branch Test(NE,Z) l00004EDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004ED9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EDD:
	branch Test(NE,Z) l00004EE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EE1:
	branch Test(NE,Z) l00004EE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EE5:
	branch Test(NE,Z) l00004EE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EE9:
	branch Test(NE,Z) l00004EED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EED:
	branch Test(NE,Z) l00004EF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EF1:
	branch Test(NE,Z) l00004EF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EF5:
	branch Test(NE,Z) l00004EF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EF9:
	branch Test(NE,Z) l00004EFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EFD:
	branch Test(NE,Z) l00004F01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004EFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F01:
	branch Test(NE,Z) l00004F05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F05:
	branch Test(NE,Z) l00004F09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F09:
	branch Test(NE,Z) l00004F0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F0D:
	branch Test(NE,Z) l00004F11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F11:
	branch Test(NE,Z) l00004F15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F15:
	branch Test(NE,Z) l00004F19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F19:
	branch Test(NE,Z) l00004F1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F1D:
	branch Test(NE,Z) l00004F21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F21:
	branch Test(NE,Z) l00004F25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F25:
	branch Test(NE,Z) l00004F29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F29:
	branch Test(NE,Z) l00004F2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F2D:
	branch Test(NE,Z) l00004F31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F31:
	branch Test(NE,Z) l00004F35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F35:
	branch Test(NE,Z) l00004F39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F39:
	branch Test(NE,Z) l00004F3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F3D:
	branch Test(NE,Z) l00004F41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F41:
	branch Test(NE,Z) l00004F45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F45:
	branch Test(NE,Z) l00004F49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F49:
	branch Test(NE,Z) l00004F4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F4D:
	branch Test(NE,Z) l00004F51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F51:
	branch Test(NE,Z) l00004F55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F55:
	branch Test(NE,Z) l00004F59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F59:
	branch Test(NE,Z) l00004F5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F5D:
	branch Test(NE,Z) l00004F61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F61:
	branch Test(NE,Z) l00004F65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F65:
	branch Test(NE,Z) l00004F69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F69:
	branch Test(NE,Z) l00004F6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F6D:
	branch Test(NE,Z) l00004F71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F71:
	branch Test(NE,Z) l00004F75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F75:
	branch Test(NE,Z) l00004F79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F79:
	branch Test(NE,Z) l00004F7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F7D:
	branch Test(NE,Z) l00004F81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F81:
	branch Test(NE,Z) l00004F85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F85:
	branch Test(NE,Z) l00004F89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F89:
	branch Test(NE,Z) l00004F8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F8D:
	branch Test(NE,Z) l00004F91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F91:
	branch Test(NE,Z) l00004F95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F95:
	branch Test(NE,Z) l00004F99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F99:
	branch Test(NE,Z) l00004F9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F9D:
	branch Test(NE,Z) l00004FA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004F9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FA1:
	branch Test(NE,Z) l00004FA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FA5:
	branch Test(NE,Z) l00004FA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FA9:
	branch Test(NE,Z) l00004FAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FAD:
	branch Test(NE,Z) l00004FB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FB1:
	branch Test(NE,Z) l00004FB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FB5:
	branch Test(NE,Z) l00004FB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FB9:
	branch Test(NE,Z) l00004FBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FBD:
	branch Test(NE,Z) l00004FC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FC1:
	branch Test(NE,Z) l00004FC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FC5:
	branch Test(NE,Z) l00004FC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FC9:
	branch Test(NE,Z) l00004FCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FCD:
	branch Test(NE,Z) l00004FD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FD1:
	branch Test(NE,Z) l00004FD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FD5:
	branch Test(NE,Z) l00004FD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FD9:
	branch Test(NE,Z) l00004FDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FDD:
	branch Test(NE,Z) l00004FE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FE1:
	branch Test(NE,Z) l00004FE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FE5:
	branch Test(NE,Z) l00004FE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FE9:
	branch Test(NE,Z) l00004FED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FED:
	branch Test(NE,Z) l00004FF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FF1:
	branch Test(NE,Z) l00004FF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FF5:
	branch Test(NE,Z) l00004FF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FF9:
	branch Test(NE,Z) l00004FFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FFD:
	branch Test(NE,Z) l00005001
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00004FFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005001:
	branch Test(NE,Z) l00005005
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005001_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005005:
	branch Test(NE,Z) l00005009
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005005_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005009:
	branch Test(NE,Z) l0000500D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005009_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000500D:
	branch Test(NE,Z) l00005011
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000500D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005011:
	branch Test(NE,Z) l00005015
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005011_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005015:
	branch Test(NE,Z) l00005019
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005015_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005019:
	branch Test(NE,Z) l0000501D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005019_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000501D:
	branch Test(NE,Z) l00005021
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000501D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005021:
	branch Test(NE,Z) l00005025
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005021_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005025:
	branch Test(NE,Z) l00005029
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005025_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005029:
	branch Test(NE,Z) l0000502D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005029_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000502D:
	branch Test(NE,Z) l00005031
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000502D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005031:
	branch Test(NE,Z) l00005035
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005031_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005035:
	branch Test(NE,Z) l00005039
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005035_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005039:
	branch Test(NE,Z) l0000503D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005039_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000503D:
	branch Test(NE,Z) l00005041
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000503D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005041:
	branch Test(NE,Z) l00005045
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005041_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005045:
	branch Test(NE,Z) l00005049
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005045_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005049:
	branch Test(NE,Z) l0000504D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005049_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000504D:
	branch Test(NE,Z) l00005051
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000504D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005051:
	branch Test(NE,Z) l00005055
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005051_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005055:
	branch Test(NE,Z) l00005059
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005055_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005059:
	branch Test(NE,Z) l0000505D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005059_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000505D:
	branch Test(NE,Z) l00005061
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000505D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005061:
	branch Test(NE,Z) l00005065
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005061_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005065:
	branch Test(NE,Z) l00005069
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005065_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005069:
	branch Test(NE,Z) l0000506D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005069_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000506D:
	branch Test(NE,Z) l00005071
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000506D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005071:
	branch Test(NE,Z) l00005075
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005071_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005075:
	branch Test(NE,Z) l00005079
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005075_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005079:
	branch Test(NE,Z) l0000507D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005079_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000507D:
	branch Test(NE,Z) l00005081
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000507D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005081:
	branch Test(NE,Z) l00005085
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005081_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005085:
	branch Test(NE,Z) l00005089
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005085_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005089:
	branch Test(NE,Z) l0000508D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005089_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000508D:
	branch Test(NE,Z) l00005091
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000508D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005091:
	branch Test(NE,Z) l00005095
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005091_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005095:
	branch Test(NE,Z) l00005099
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005095_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005099:
	branch Test(NE,Z) l0000509D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005099_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000509D:
	branch Test(NE,Z) l000050A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000509D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050A1:
	branch Test(NE,Z) l000050A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050A5:
	branch Test(NE,Z) l000050A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050A9:
	branch Test(NE,Z) l000050AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050AD:
	branch Test(NE,Z) l000050B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050B1:
	branch Test(NE,Z) l000050B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050B5:
	branch Test(NE,Z) l000050B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050B9:
	branch Test(NE,Z) l000050BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050BD:
	branch Test(NE,Z) l000050C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050C1:
	branch Test(NE,Z) l000050C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050C5:
	branch Test(NE,Z) l000050C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050C9:
	branch Test(NE,Z) l000050CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050CD:
	branch Test(NE,Z) l000050D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050D1:
	branch Test(NE,Z) l000050D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050D5:
	branch Test(NE,Z) l000050D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050D9:
	branch Test(NE,Z) l000050DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050DD:
	branch Test(NE,Z) l000050E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050E1:
	branch Test(NE,Z) l000050E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050E5:
	branch Test(NE,Z) l000050E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050E9:
	branch Test(NE,Z) l000050ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050ED:
	branch Test(NE,Z) l000050F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050F1:
	branch Test(NE,Z) l000050F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050F5:
	branch Test(NE,Z) l000050F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050F9:
	branch Test(NE,Z) l000050FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050FD:
	branch Test(NE,Z) l00005101
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000050FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005101:
	branch Test(NE,Z) l00005105
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005101_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005105:
	branch Test(NE,Z) l00005109
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005105_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005109:
	branch Test(NE,Z) l0000510D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005109_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000510D:
	branch Test(NE,Z) l00005111
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000510D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005111:
	branch Test(NE,Z) l00005115
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005111_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005115:
	branch Test(NE,Z) l00005119
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005115_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005119:
	branch Test(NE,Z) l0000511D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005119_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000511D:
	branch Test(NE,Z) l00005121
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000511D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005121:
	branch Test(NE,Z) l00005125
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005121_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005125:
	branch Test(NE,Z) l00005129
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005125_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005129:
	branch Test(NE,Z) l0000512D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005129_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000512D:
	branch Test(NE,Z) l00005131
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000512D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005131:
	branch Test(NE,Z) l00005135
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005131_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005135:
	branch Test(NE,Z) l00005139
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005135_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005139:
	branch Test(NE,Z) l0000513D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005139_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000513D:
	branch Test(NE,Z) l00005141
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000513D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005141:
	branch Test(NE,Z) l00005145
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005141_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005145:
	branch Test(NE,Z) l00005149
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005145_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005149:
	branch Test(NE,Z) l0000514D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005149_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000514D:
	branch Test(NE,Z) l00005151
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000514D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005151:
	branch Test(NE,Z) l00005155
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005151_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005155:
	branch Test(NE,Z) l00005159
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005155_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005159:
	branch Test(NE,Z) l0000515D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005159_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000515D:
	branch Test(NE,Z) l00005161
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000515D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005161:
	branch Test(NE,Z) l00005165
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005161_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005165:
	branch Test(NE,Z) l00005169
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005165_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005169:
	branch Test(NE,Z) l0000516D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005169_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000516D:
	branch Test(NE,Z) l00005171
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000516D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005171:
	branch Test(NE,Z) l00005175
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005171_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005175:
	branch Test(NE,Z) l00005179
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005175_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005179:
	branch Test(NE,Z) l0000517D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005179_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000517D:
	branch Test(NE,Z) l00005181
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000517D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005181:
	branch Test(NE,Z) l00005185
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005181_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005185:
	branch Test(NE,Z) l00005189
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005185_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005189:
	branch Test(NE,Z) l0000518D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005189_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000518D:
	branch Test(NE,Z) l00005191
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000518D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005191:
	branch Test(NE,Z) l00005195
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005191_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005195:
	branch Test(NE,Z) l00005199
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005195_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005199:
	branch Test(NE,Z) l0000519D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005199_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000519D:
	branch Test(NE,Z) l000051A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000519D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051A1:
	branch Test(NE,Z) l000051A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051A5:
	branch Test(NE,Z) l000051A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051A9:
	branch Test(NE,Z) l000051AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051AD:
	branch Test(NE,Z) l000051B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051B1:
	branch Test(NE,Z) l000051B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051B5:
	branch Test(NE,Z) l000051B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051B9:
	branch Test(NE,Z) l000051BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051BD:
	branch Test(NE,Z) l000051C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051C1:
	branch Test(NE,Z) l000051C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051C5:
	branch Test(NE,Z) l000051C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051C9:
	branch Test(NE,Z) l000051CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051CD:
	branch Test(NE,Z) l000051D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051D1:
	branch Test(NE,Z) l000051D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051D5:
	branch Test(NE,Z) l000051D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051D9:
	branch Test(NE,Z) l000051DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051DD:
	branch Test(NE,Z) l000051E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051E1:
	branch Test(NE,Z) l000051E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051E5:
	branch Test(NE,Z) l000051E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051E9:
	branch Test(NE,Z) l000051ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051ED:
	branch Test(NE,Z) l000051F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051F1:
	branch Test(NE,Z) l000051F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051F5:
	branch Test(NE,Z) l000051F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051F9:
	branch Test(NE,Z) l000051FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051FD:
	branch Test(NE,Z) l00005201
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000051FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005201:
	branch Test(NE,Z) l00005205
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005201_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005205:
	branch Test(NE,Z) l00005209
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005205_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005209:
	branch Test(NE,Z) l0000520D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005209_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000520D:
	branch Test(NE,Z) l00005211
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000520D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005211:
	branch Test(NE,Z) l00005215
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005211_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005215:
	branch Test(NE,Z) l00005219
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005215_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005219:
	branch Test(NE,Z) l0000521D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005219_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000521D:
	branch Test(NE,Z) l00005221
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000521D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005221:
	branch Test(NE,Z) l00005225
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005221_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005225:
	branch Test(NE,Z) l00005229
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005225_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005229:
	branch Test(NE,Z) l0000522D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005229_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000522D:
	branch Test(NE,Z) l00005231
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000522D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005231:
	branch Test(NE,Z) l00005235
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005231_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005235:
	branch Test(NE,Z) l00005239
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005235_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005239:
	branch Test(NE,Z) l0000523D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005239_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000523D:
	branch Test(NE,Z) l00005241
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000523D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005241:
	branch Test(NE,Z) l00005245
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005241_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005245:
	branch Test(NE,Z) l00005249
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005245_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005249:
	branch Test(NE,Z) l0000524D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005249_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000524D:
	branch Test(NE,Z) l00005251
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000524D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005251:
	branch Test(NE,Z) l00005255
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005251_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005255:
	branch Test(NE,Z) l00005259
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005255_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005259:
	branch Test(NE,Z) l0000525D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005259_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000525D:
	branch Test(NE,Z) l00005261
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000525D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005261:
	branch Test(NE,Z) l00005265
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005261_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005265:
	branch Test(NE,Z) l00005269
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005265_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005269:
	branch Test(NE,Z) l0000526D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005269_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000526D:
	branch Test(NE,Z) l00005271
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000526D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005271:
	branch Test(NE,Z) l00005275
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005271_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005275:
	branch Test(NE,Z) l00005279
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005275_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005279:
	branch Test(NE,Z) l0000527D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005279_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000527D:
	branch Test(NE,Z) l00005281
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000527D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005281:
	branch Test(NE,Z) l00005285
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005281_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005285:
	branch Test(NE,Z) l00005289
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005285_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005289:
	branch Test(NE,Z) l0000528D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005289_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000528D:
	branch Test(NE,Z) l00005291
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000528D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005291:
	branch Test(NE,Z) l00005295
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005291_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005295:
	branch Test(NE,Z) l00005299
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005295_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005299:
	branch Test(NE,Z) l0000529D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005299_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000529D:
	branch Test(NE,Z) l000052A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000529D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052A1:
	branch Test(NE,Z) l000052A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052A5:
	branch Test(NE,Z) l000052A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052A9:
	branch Test(NE,Z) l000052AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052AD:
	branch Test(NE,Z) l000052B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052B1:
	branch Test(NE,Z) l000052B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052B5:
	branch Test(NE,Z) l000052B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052B9:
	branch Test(NE,Z) l000052BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052BD:
	branch Test(NE,Z) l000052C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052C1:
	branch Test(NE,Z) l000052C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052C5:
	branch Test(NE,Z) l000052C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052C9:
	branch Test(NE,Z) l000052CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052CD:
	branch Test(NE,Z) l000052D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052D1:
	branch Test(NE,Z) l000052D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052D5:
	branch Test(NE,Z) l000052D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052D9:
	branch Test(NE,Z) l000052DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052DD:
	branch Test(NE,Z) l000052E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052E1:
	branch Test(NE,Z) l000052E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052E5:
	branch Test(NE,Z) l000052E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052E9:
	branch Test(NE,Z) l000052ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052ED:
	branch Test(NE,Z) l000052F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052F1:
	branch Test(NE,Z) l000052F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052F5:
	branch Test(NE,Z) l000052F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052F9:
	branch Test(NE,Z) l000052FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052FD:
	branch Test(NE,Z) l00005301
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000052FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005301:
	branch Test(NE,Z) l00005305
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005301_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005305:
	branch Test(NE,Z) l00005309
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005305_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005309:
	branch Test(NE,Z) l0000530D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005309_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000530D:
	branch Test(NE,Z) l00005311
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000530D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005311:
	branch Test(NE,Z) l00005315
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005311_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005315:
	branch Test(NE,Z) l00005319
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005315_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005319:
	branch Test(NE,Z) l0000531D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005319_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000531D:
	branch Test(NE,Z) l00005321
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000531D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005321:
	branch Test(NE,Z) l00005325
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005321_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005325:
	branch Test(NE,Z) l00005329
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005325_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005329:
	branch Test(NE,Z) l0000532D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005329_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000532D:
	branch Test(NE,Z) l00005331
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000532D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005331:
	branch Test(NE,Z) l00005335
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005331_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005335:
	branch Test(NE,Z) l00005339
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005335_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005339:
	branch Test(NE,Z) l0000533D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005339_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000533D:
	branch Test(NE,Z) l00005341
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000533D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005341:
	branch Test(NE,Z) l00005345
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005341_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005345:
	branch Test(NE,Z) l00005349
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005345_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005349:
	branch Test(NE,Z) l0000534D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005349_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000534D:
	branch Test(NE,Z) l00005351
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000534D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005351:
	branch Test(NE,Z) l00005355
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005351_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005355:
	branch Test(NE,Z) l00005359
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005355_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005359:
	branch Test(NE,Z) l0000535D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005359_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000535D:
	branch Test(NE,Z) l00005361
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000535D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005361:
	branch Test(NE,Z) l00005365
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005361_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005365:
	branch Test(NE,Z) l00005369
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005365_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005369:
	branch Test(NE,Z) l0000536D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005369_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000536D:
	branch Test(NE,Z) l00005371
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000536D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005371:
	branch Test(NE,Z) l00005375
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005371_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005375:
	branch Test(NE,Z) l00005379
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005375_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005379:
	branch Test(NE,Z) l0000537D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005379_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000537D:
	branch Test(NE,Z) l00005381
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000537D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005381:
	branch Test(NE,Z) l00005385
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005381_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005385:
	branch Test(NE,Z) l00005389
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005385_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005389:
	branch Test(NE,Z) l0000538D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005389_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000538D:
	branch Test(NE,Z) l00005391
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000538D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005391:
	branch Test(NE,Z) l00005395
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005391_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005395:
	branch Test(NE,Z) l00005399
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005395_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005399:
	branch Test(NE,Z) l0000539D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005399_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000539D:
	branch Test(NE,Z) l000053A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000539D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053A1:
	branch Test(NE,Z) l000053A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053A5:
	branch Test(NE,Z) l000053A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053A9:
	branch Test(NE,Z) l000053AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053AD:
	branch Test(NE,Z) l000053B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053B1:
	branch Test(NE,Z) l000053B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053B5:
	branch Test(NE,Z) l000053B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053B9:
	branch Test(NE,Z) l000053BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053BD:
	branch Test(NE,Z) l000053C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053C1:
	branch Test(NE,Z) l000053C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053C5:
	branch Test(NE,Z) l000053C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053C9:
	branch Test(NE,Z) l000053CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053CD:
	branch Test(NE,Z) l000053D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053D1:
	branch Test(NE,Z) l000053D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053D5:
	branch Test(NE,Z) l000053D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053D9:
	branch Test(NE,Z) l000053DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053DD:
	branch Test(NE,Z) l000053E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053E1:
	branch Test(NE,Z) l000053E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053E5:
	branch Test(NE,Z) l000053E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053E9:
	branch Test(NE,Z) l000053ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053ED:
	branch Test(NE,Z) l000053F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053F1:
	branch Test(NE,Z) l000053F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053F5:
	branch Test(NE,Z) l000053F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053F9:
	branch Test(NE,Z) l000053FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053FD:
	branch Test(NE,Z) l00005401
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000053FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005401:
	branch Test(NE,Z) l00005405
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005401_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005405:
	branch Test(NE,Z) l00005409
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005405_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005409:
	branch Test(NE,Z) l0000540D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005409_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000540D:
	branch Test(NE,Z) l00005411
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000540D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005411:
	branch Test(NE,Z) l00005415
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005411_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005415:
	branch Test(NE,Z) l00005419
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005415_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005419:
	branch Test(NE,Z) l0000541D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005419_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000541D:
	branch Test(NE,Z) l00005421
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000541D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005421:
	branch Test(NE,Z) l00005425
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005421_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005425:
	branch Test(NE,Z) l00005429
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005425_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005429:
	branch Test(NE,Z) l0000542D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005429_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000542D:
	branch Test(NE,Z) l00005431
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000542D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005431:
	branch Test(NE,Z) l00005435
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005431_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005435:
	branch Test(NE,Z) l00005439
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005435_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005439:
	branch Test(NE,Z) l0000543D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005439_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000543D:
	branch Test(NE,Z) l00005441
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000543D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005441:
	branch Test(NE,Z) l00005445
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005441_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005445:
	branch Test(NE,Z) l00005449
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005445_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005449:
	branch Test(NE,Z) l0000544D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005449_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000544D:
	branch Test(NE,Z) l00005451
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000544D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005451:
	branch Test(NE,Z) l00005455
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005451_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005455:
	branch Test(NE,Z) l00005459
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005455_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005459:
	branch Test(NE,Z) l0000545D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005459_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000545D:
	branch Test(NE,Z) l00005461
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000545D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005461:
	branch Test(NE,Z) l00005465
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005461_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005465:
	branch Test(NE,Z) l00005469
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005465_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005469:
	branch Test(NE,Z) l0000546D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005469_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000546D:
	branch Test(NE,Z) l00005471
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000546D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005471:
	branch Test(NE,Z) l00005475
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005471_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005475:
	branch Test(NE,Z) l00005479
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005475_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005479:
	branch Test(NE,Z) l0000547D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005479_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000547D:
	branch Test(NE,Z) l00005481
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000547D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005481:
	branch Test(NE,Z) l00005485
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005481_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005485:
	branch Test(NE,Z) l00005489
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005485_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005489:
	branch Test(NE,Z) l0000548D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005489_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000548D:
	branch Test(NE,Z) l00005491
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000548D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005491:
	branch Test(NE,Z) l00005495
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005491_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005495:
	branch Test(NE,Z) l00005499
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005495_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005499:
	branch Test(NE,Z) l0000549D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005499_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000549D:
	branch Test(NE,Z) l000054A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000549D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054A1:
	branch Test(NE,Z) l000054A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054A5:
	branch Test(NE,Z) l000054A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054A9:
	branch Test(NE,Z) l000054AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054AD:
	branch Test(NE,Z) l000054B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054B1:
	branch Test(NE,Z) l000054B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054B5:
	branch Test(NE,Z) l000054B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054B9:
	branch Test(NE,Z) l000054BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054BD:
	branch Test(NE,Z) l000054C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054C1:
	branch Test(NE,Z) l000054C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054C5:
	branch Test(NE,Z) l000054C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054C9:
	branch Test(NE,Z) l000054CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054CD:
	branch Test(NE,Z) l000054D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054D1:
	branch Test(NE,Z) l000054D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054D5:
	branch Test(NE,Z) l000054D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054D9:
	branch Test(NE,Z) l000054DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054DD:
	branch Test(NE,Z) l000054E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054E1:
	branch Test(NE,Z) l000054E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054E5:
	branch Test(NE,Z) l000054E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054E9:
	branch Test(NE,Z) l000054ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054ED:
	branch Test(NE,Z) l000054F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054F1:
	branch Test(NE,Z) l000054F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054F5:
	branch Test(NE,Z) l000054F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054F9:
	branch Test(NE,Z) l000054FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054FD:
	branch Test(NE,Z) l00005501
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000054FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005501:
	branch Test(NE,Z) l00005505
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005501_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005505:
	branch Test(NE,Z) l00005509
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005505_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005509:
	branch Test(NE,Z) l0000550D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005509_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000550D:
	branch Test(NE,Z) l00005511
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000550D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005511:
	branch Test(NE,Z) l00005515
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005511_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005515:
	branch Test(NE,Z) l00005519
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005515_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005519:
	branch Test(NE,Z) l0000551D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005519_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000551D:
	branch Test(NE,Z) l00005521
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000551D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005521:
	branch Test(NE,Z) l00005525
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005521_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005525:
	branch Test(NE,Z) l00005529
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005525_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005529:
	branch Test(NE,Z) l0000552D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005529_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000552D:
	branch Test(NE,Z) l00005531
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000552D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005531:
	branch Test(NE,Z) l00005535
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005531_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005535:
	branch Test(NE,Z) l00005539
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005535_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005539:
	branch Test(NE,Z) l0000553D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005539_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000553D:
	branch Test(NE,Z) l00005541
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000553D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005541:
	branch Test(NE,Z) l00005545
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005541_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005545:
	branch Test(NE,Z) l00005549
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005545_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005549:
	branch Test(NE,Z) l0000554D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005549_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000554D:
	branch Test(NE,Z) l00005551
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000554D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005551:
	branch Test(NE,Z) l00005555
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005551_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005555:
	branch Test(NE,Z) l00005559
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005555_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005559:
	branch Test(NE,Z) l0000555D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005559_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000555D:
	branch Test(NE,Z) l00005561
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000555D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005561:
	branch Test(NE,Z) l00005565
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005561_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005565:
	branch Test(NE,Z) l00005569
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005565_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005569:
	branch Test(NE,Z) l0000556D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005569_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000556D:
	branch Test(NE,Z) l00005571
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000556D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005571:
	branch Test(NE,Z) l00005575
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005571_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005575:
	branch Test(NE,Z) l00005579
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005575_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005579:
	branch Test(NE,Z) l0000557D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005579_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000557D:
	branch Test(NE,Z) l00005581
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000557D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005581:
	branch Test(NE,Z) l00005585
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005581_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005585:
	branch Test(NE,Z) l00005589
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005585_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005589:
	branch Test(NE,Z) l0000558D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005589_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000558D:
	branch Test(NE,Z) l00005591
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000558D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005591:
	branch Test(NE,Z) l00005595
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005591_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005595:
	branch Test(NE,Z) l00005599
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005595_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005599:
	branch Test(NE,Z) l0000559D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005599_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000559D:
	branch Test(NE,Z) l000055A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000559D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055A1:
	branch Test(NE,Z) l000055A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055A5:
	branch Test(NE,Z) l000055A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055A9:
	branch Test(NE,Z) l000055AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055AD:
	branch Test(NE,Z) l000055B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055B1:
	branch Test(NE,Z) l000055B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055B5:
	branch Test(NE,Z) l000055B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055B9:
	branch Test(NE,Z) l000055BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055BD:
	branch Test(NE,Z) l000055C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055C1:
	branch Test(NE,Z) l000055C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055C5:
	branch Test(NE,Z) l000055C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055C9:
	branch Test(NE,Z) l000055CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055CD:
	branch Test(NE,Z) l000055D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055D1:
	branch Test(NE,Z) l000055D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055D5:
	branch Test(NE,Z) l000055D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055D9:
	branch Test(NE,Z) l000055DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055DD:
	branch Test(NE,Z) l000055E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055E1:
	branch Test(NE,Z) l000055E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055E5:
	branch Test(NE,Z) l000055E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055E9:
	branch Test(NE,Z) l000055ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055ED:
	branch Test(NE,Z) l000055F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055F1:
	branch Test(NE,Z) l000055F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055F5:
	branch Test(NE,Z) l000055F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055F9:
	branch Test(NE,Z) l000055FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055FD:
	branch Test(NE,Z) l00005601
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000055FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005601:
	branch Test(NE,Z) l00005605
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005601_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005605:
	branch Test(NE,Z) l00005609
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005605_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005609:
	branch Test(NE,Z) l0000560D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005609_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000560D:
	branch Test(NE,Z) l00005611
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000560D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005611:
	branch Test(NE,Z) l00005615
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005611_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005615:
	branch Test(NE,Z) l00005619
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005615_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005619:
	branch Test(NE,Z) l0000561D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005619_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000561D:
	branch Test(NE,Z) l00005621
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000561D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005621:
	branch Test(NE,Z) l00005625
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005621_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005625:
	branch Test(NE,Z) l00005629
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005625_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005629:
	branch Test(NE,Z) l0000562D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005629_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000562D:
	branch Test(NE,Z) l00005631
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000562D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005631:
	branch Test(NE,Z) l00005635
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005631_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005635:
	branch Test(NE,Z) l00005639
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005635_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005639:
	branch Test(NE,Z) l0000563D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005639_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000563D:
	branch Test(NE,Z) l00005641
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000563D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005641:
	branch Test(NE,Z) l00005645
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005641_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005645:
	branch Test(NE,Z) l00005649
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005645_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005649:
	branch Test(NE,Z) l0000564D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005649_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000564D:
	branch Test(NE,Z) l00005651
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000564D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005651:
	branch Test(NE,Z) l00005655
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005651_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005655:
	branch Test(NE,Z) l00005659
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005655_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005659:
	branch Test(NE,Z) l0000565D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005659_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000565D:
	branch Test(NE,Z) l00005661
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000565D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005661:
	branch Test(NE,Z) l00005665
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005661_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005665:
	branch Test(NE,Z) l00005669
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005665_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005669:
	branch Test(NE,Z) l0000566D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005669_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000566D:
	branch Test(NE,Z) l00005671
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000566D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005671:
	branch Test(NE,Z) l00005675
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005671_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005675:
	branch Test(NE,Z) l00005679
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005675_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005679:
	branch Test(NE,Z) l0000567D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005679_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000567D:
	branch Test(NE,Z) l00005681
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000567D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005681:
	branch Test(NE,Z) l00005685
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005681_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005685:
	branch Test(NE,Z) l00005689
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005685_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005689:
	branch Test(NE,Z) l0000568D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005689_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000568D:
	branch Test(NE,Z) l00005691
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000568D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005691:
	branch Test(NE,Z) l00005695
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005691_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005695:
	branch Test(NE,Z) l00005699
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005695_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005699:
	branch Test(NE,Z) l0000569D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005699_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000569D:
	branch Test(NE,Z) l000056A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000569D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056A1:
	branch Test(NE,Z) l000056A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056A5:
	branch Test(NE,Z) l000056A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056A9:
	branch Test(NE,Z) l000056AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056AD:
	branch Test(NE,Z) l000056B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056B1:
	branch Test(NE,Z) l000056B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056B5:
	branch Test(NE,Z) l000056B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056B9:
	branch Test(NE,Z) l000056BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056BD:
	branch Test(NE,Z) l000056C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056C1:
	branch Test(NE,Z) l000056C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056C5:
	branch Test(NE,Z) l000056C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056C9:
	branch Test(NE,Z) l000056CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056CD:
	branch Test(NE,Z) l000056D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056D1:
	branch Test(NE,Z) l000056D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056D5:
	branch Test(NE,Z) l000056D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056D9:
	branch Test(NE,Z) l000056DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056DD:
	branch Test(NE,Z) l000056E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056E1:
	branch Test(NE,Z) l000056E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056E5:
	branch Test(NE,Z) l000056E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056E9:
	branch Test(NE,Z) l000056ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056ED:
	branch Test(NE,Z) l000056F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056F1:
	branch Test(NE,Z) l000056F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056F5:
	branch Test(NE,Z) l000056F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056F9:
	branch Test(NE,Z) l000056FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056FD:
	branch Test(NE,Z) l00005701
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000056FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005701:
	branch Test(NE,Z) l00005705
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005701_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005705:
	branch Test(NE,Z) l00005709
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005705_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005709:
	branch Test(NE,Z) l0000570D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005709_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000570D:
	branch Test(NE,Z) l00005711
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000570D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005711:
	branch Test(NE,Z) l00005715
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005711_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005715:
	branch Test(NE,Z) l00005719
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005715_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005719:
	branch Test(NE,Z) l0000571D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005719_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000571D:
	branch Test(NE,Z) l00005721
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000571D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005721:
	branch Test(NE,Z) l00005725
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005721_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005725:
	branch Test(NE,Z) l00005729
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005725_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005729:
	branch Test(NE,Z) l0000572D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005729_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000572D:
	branch Test(NE,Z) l00005731
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000572D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005731:
	branch Test(NE,Z) l00005735
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005731_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005735:
	branch Test(NE,Z) l00005739
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005735_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005739:
	branch Test(NE,Z) l0000573D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005739_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000573D:
	branch Test(NE,Z) l00005741
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000573D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005741:
	branch Test(NE,Z) l00005745
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005741_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005745:
	branch Test(NE,Z) l00005749
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005745_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005749:
	branch Test(NE,Z) l0000574D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005749_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000574D:
	branch Test(NE,Z) l00005751
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000574D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005751:
	branch Test(NE,Z) l00005755
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005751_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005755:
	branch Test(NE,Z) l00005759
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005755_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005759:
	branch Test(NE,Z) l0000575D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005759_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000575D:
	branch Test(NE,Z) l00005761
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000575D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005761:
	branch Test(NE,Z) l00005765
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005761_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005765:
	branch Test(NE,Z) l00005769
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005765_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005769:
	branch Test(NE,Z) l0000576D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005769_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000576D:
	branch Test(NE,Z) l00005771
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000576D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005771:
	branch Test(NE,Z) l00005775
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005771_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005775:
	branch Test(NE,Z) l00005779
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005775_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005779:
	branch Test(NE,Z) l0000577D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005779_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000577D:
	branch Test(NE,Z) l00005781
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000577D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005781:
	branch Test(NE,Z) l00005785
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005781_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005785:
	branch Test(NE,Z) l00005789
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005785_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005789:
	branch Test(NE,Z) l0000578D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005789_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000578D:
	branch Test(NE,Z) l00005791
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000578D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005791:
	branch Test(NE,Z) l00005795
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005791_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005795:
	branch Test(NE,Z) l00005799
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005795_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005799:
	branch Test(NE,Z) l0000579D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005799_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000579D:
	branch Test(NE,Z) l000057A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000579D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057A1:
	branch Test(NE,Z) l000057A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057A5:
	branch Test(NE,Z) l000057A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057A9:
	branch Test(NE,Z) l000057AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057AD:
	branch Test(NE,Z) l000057B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057B1:
	branch Test(NE,Z) l000057B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057B5:
	branch Test(NE,Z) l000057B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057B9:
	branch Test(NE,Z) l000057BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057BD:
	branch Test(NE,Z) l000057C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057C1:
	branch Test(NE,Z) l000057C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057C5:
	branch Test(NE,Z) l000057C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057C9:
	branch Test(NE,Z) l000057CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057CD:
	branch Test(NE,Z) l000057D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057D1:
	branch Test(NE,Z) l000057D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057D5:
	branch Test(NE,Z) l000057D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057D9:
	branch Test(NE,Z) l000057DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057DD:
	branch Test(NE,Z) l000057E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057E1:
	branch Test(NE,Z) l000057E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057E5:
	branch Test(NE,Z) l000057E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057E9:
	branch Test(NE,Z) l000057ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057ED:
	branch Test(NE,Z) l000057F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057F1:
	branch Test(NE,Z) l000057F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057F5:
	branch Test(NE,Z) l000057F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057F9:
	branch Test(NE,Z) l000057FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057FD:
	branch Test(NE,Z) l00005801
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000057FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005801:
	branch Test(NE,Z) l00005805
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005801_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005805:
	branch Test(NE,Z) l00005809
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005805_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005809:
	branch Test(NE,Z) l0000580D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005809_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000580D:
	branch Test(NE,Z) l00005811
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000580D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005811:
	branch Test(NE,Z) l00005815
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005811_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005815:
	branch Test(NE,Z) l00005819
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005815_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005819:
	branch Test(NE,Z) l0000581D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005819_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000581D:
	branch Test(NE,Z) l00005821
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000581D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005821:
	branch Test(NE,Z) l00005825
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005821_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005825:
	branch Test(NE,Z) l00005829
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005825_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005829:
	branch Test(NE,Z) l0000582D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005829_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000582D:
	branch Test(NE,Z) l00005831
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000582D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005831:
	branch Test(NE,Z) l00005835
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005831_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005835:
	branch Test(NE,Z) l00005839
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005835_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005839:
	branch Test(NE,Z) l0000583D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005839_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000583D:
	branch Test(NE,Z) l00005841
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000583D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005841:
	branch Test(NE,Z) l00005845
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005841_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005845:
	branch Test(NE,Z) l00005849
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005845_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005849:
	branch Test(NE,Z) l0000584D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005849_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000584D:
	branch Test(NE,Z) l00005851
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000584D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005851:
	branch Test(NE,Z) l00005855
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005851_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005855:
	branch Test(NE,Z) l00005859
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005855_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005859:
	branch Test(NE,Z) l0000585D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005859_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000585D:
	branch Test(NE,Z) l00005861
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000585D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005861:
	branch Test(NE,Z) l00005865
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005861_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005865:
	branch Test(NE,Z) l00005869
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005865_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005869:
	branch Test(NE,Z) l0000586D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005869_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000586D:
	branch Test(NE,Z) l00005871
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000586D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005871:
	branch Test(NE,Z) l00005875
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005871_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005875:
	branch Test(NE,Z) l00005879
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005875_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005879:
	branch Test(NE,Z) l0000587D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005879_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000587D:
	branch Test(NE,Z) l00005881
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000587D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005881:
	branch Test(NE,Z) l00005885
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005881_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005885:
	branch Test(NE,Z) l00005889
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005885_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005889:
	branch Test(NE,Z) l0000588D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005889_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000588D:
	branch Test(NE,Z) l00005891
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000588D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005891:
	branch Test(NE,Z) l00005895
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005891_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005895:
	branch Test(NE,Z) l00005899
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005895_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005899:
	branch Test(NE,Z) l0000589D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005899_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000589D:
	branch Test(NE,Z) l000058A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000589D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058A1:
	branch Test(NE,Z) l000058A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058A5:
	branch Test(NE,Z) l000058A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058A9:
	branch Test(NE,Z) l000058AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058AD:
	branch Test(NE,Z) l000058B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058B1:
	branch Test(NE,Z) l000058B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058B5:
	branch Test(NE,Z) l000058B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058B9:
	branch Test(NE,Z) l000058BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058BD:
	branch Test(NE,Z) l000058C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058C1:
	branch Test(NE,Z) l000058C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058C5:
	branch Test(NE,Z) l000058C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058C9:
	branch Test(NE,Z) l000058CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058CD:
	branch Test(NE,Z) l000058D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058D1:
	branch Test(NE,Z) l000058D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058D5:
	branch Test(NE,Z) l000058D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058D9:
	branch Test(NE,Z) l000058DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058DD:
	branch Test(NE,Z) l000058E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058E1:
	branch Test(NE,Z) l000058E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058E5:
	branch Test(NE,Z) l000058E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058E9:
	branch Test(NE,Z) l000058ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058ED:
	branch Test(NE,Z) l000058F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058F1:
	branch Test(NE,Z) l000058F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058F5:
	branch Test(NE,Z) l000058F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058F9:
	branch Test(NE,Z) l000058FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058FD:
	branch Test(NE,Z) l00005901
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000058FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005901:
	branch Test(NE,Z) l00005905
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005901_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005905:
	branch Test(NE,Z) l00005909
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005905_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005909:
	branch Test(NE,Z) l0000590D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005909_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000590D:
	branch Test(NE,Z) l00005911
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000590D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005911:
	branch Test(NE,Z) l00005915
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005911_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005915:
	branch Test(NE,Z) l00005919
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005915_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005919:
	branch Test(NE,Z) l0000591D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005919_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000591D:
	branch Test(NE,Z) l00005921
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000591D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005921:
	branch Test(NE,Z) l00005925
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005921_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005925:
	branch Test(NE,Z) l00005929
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005925_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005929:
	branch Test(NE,Z) l0000592D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005929_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000592D:
	branch Test(NE,Z) l00005931
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000592D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005931:
	branch Test(NE,Z) l00005935
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005931_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005935:
	branch Test(NE,Z) l00005939
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005935_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005939:
	branch Test(NE,Z) l0000593D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005939_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000593D:
	branch Test(NE,Z) l00005941
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000593D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005941:
	branch Test(NE,Z) l00005945
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005941_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005945:
	branch Test(NE,Z) l00005949
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005945_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005949:
	branch Test(NE,Z) l0000594D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005949_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000594D:
	branch Test(NE,Z) l00005951
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000594D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005951:
	branch Test(NE,Z) l00005955
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005951_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005955:
	branch Test(NE,Z) l00005959
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005955_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005959:
	branch Test(NE,Z) l0000595D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005959_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000595D:
	branch Test(NE,Z) l00005961
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000595D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005961:
	branch Test(NE,Z) l00005965
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005961_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005965:
	branch Test(NE,Z) l00005969
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005965_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005969:
	branch Test(NE,Z) l0000596D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005969_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000596D:
	branch Test(NE,Z) l00005971
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000596D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005971:
	branch Test(NE,Z) l00005975
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005971_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005975:
	branch Test(NE,Z) l00005979
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005975_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005979:
	branch Test(NE,Z) l0000597D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005979_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000597D:
	branch Test(NE,Z) l00005981
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000597D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005981:
	branch Test(NE,Z) l00005985
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005981_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005985:
	branch Test(NE,Z) l00005989
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005985_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005989:
	branch Test(NE,Z) l0000598D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005989_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000598D:
	branch Test(NE,Z) l00005991
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000598D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005991:
	branch Test(NE,Z) l00005995
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005991_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005995:
	branch Test(NE,Z) l00005999
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005995_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005999:
	branch Test(NE,Z) l0000599D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005999_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000599D:
	branch Test(NE,Z) l000059A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000599D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059A1:
	branch Test(NE,Z) l000059A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059A5:
	branch Test(NE,Z) l000059A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059A9:
	branch Test(NE,Z) l000059AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059AD:
	branch Test(NE,Z) l000059B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059B1:
	branch Test(NE,Z) l000059B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059B5:
	branch Test(NE,Z) l000059B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059B9:
	branch Test(NE,Z) l000059BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059BD:
	branch Test(NE,Z) l000059C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059C1:
	branch Test(NE,Z) l000059C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059C5:
	branch Test(NE,Z) l000059C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059C9:
	branch Test(NE,Z) l000059CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059CD:
	branch Test(NE,Z) l000059D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059D1:
	branch Test(NE,Z) l000059D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059D5:
	branch Test(NE,Z) l000059D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059D9:
	branch Test(NE,Z) l000059DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059DD:
	branch Test(NE,Z) l000059E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059E1:
	branch Test(NE,Z) l000059E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059E5:
	branch Test(NE,Z) l000059E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059E9:
	branch Test(NE,Z) l000059ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059ED:
	branch Test(NE,Z) l000059F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059F1:
	branch Test(NE,Z) l000059F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059F5:
	branch Test(NE,Z) l000059F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059F9:
	branch Test(NE,Z) l000059FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059FD:
	branch Test(NE,Z) l00005A01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000059FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A01:
	branch Test(NE,Z) l00005A05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A05:
	branch Test(NE,Z) l00005A09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A09:
	branch Test(NE,Z) l00005A0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A0D:
	branch Test(NE,Z) l00005A11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A11:
	branch Test(NE,Z) l00005A15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A15:
	branch Test(NE,Z) l00005A19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A19:
	branch Test(NE,Z) l00005A1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A1D:
	branch Test(NE,Z) l00005A21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A21:
	branch Test(NE,Z) l00005A25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A25:
	branch Test(NE,Z) l00005A29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A29:
	branch Test(NE,Z) l00005A2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A2D:
	branch Test(NE,Z) l00005A31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A31:
	branch Test(NE,Z) l00005A35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A35:
	branch Test(NE,Z) l00005A39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A39:
	branch Test(NE,Z) l00005A3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A3D:
	branch Test(NE,Z) l00005A41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A41:
	branch Test(NE,Z) l00005A45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A45:
	branch Test(NE,Z) l00005A49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A49:
	branch Test(NE,Z) l00005A4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A4D:
	branch Test(NE,Z) l00005A51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A51:
	branch Test(NE,Z) l00005A55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A55:
	branch Test(NE,Z) l00005A59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A59:
	branch Test(NE,Z) l00005A5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A5D:
	branch Test(NE,Z) l00005A61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A61:
	branch Test(NE,Z) l00005A65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A65:
	branch Test(NE,Z) l00005A69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A69:
	branch Test(NE,Z) l00005A6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A6D:
	branch Test(NE,Z) l00005A71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A71:
	branch Test(NE,Z) l00005A75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A75:
	branch Test(NE,Z) l00005A79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A79:
	branch Test(NE,Z) l00005A7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A7D:
	branch Test(NE,Z) l00005A81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A81:
	branch Test(NE,Z) l00005A85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A85:
	branch Test(NE,Z) l00005A89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A89:
	branch Test(NE,Z) l00005A8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A8D:
	branch Test(NE,Z) l00005A91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A91:
	branch Test(NE,Z) l00005A95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A95:
	branch Test(NE,Z) l00005A99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A99:
	branch Test(NE,Z) l00005A9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A9D:
	branch Test(NE,Z) l00005AA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005A9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AA1:
	branch Test(NE,Z) l00005AA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AA5:
	branch Test(NE,Z) l00005AA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AA9:
	branch Test(NE,Z) l00005AAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AAD:
	branch Test(NE,Z) l00005AB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AB1:
	branch Test(NE,Z) l00005AB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AB5:
	branch Test(NE,Z) l00005AB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AB9:
	branch Test(NE,Z) l00005ABD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005ABD:
	branch Test(NE,Z) l00005AC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005ABD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AC1:
	branch Test(NE,Z) l00005AC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AC5:
	branch Test(NE,Z) l00005AC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AC9:
	branch Test(NE,Z) l00005ACD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005ACD:
	branch Test(NE,Z) l00005AD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005ACD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AD1:
	branch Test(NE,Z) l00005AD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AD5:
	branch Test(NE,Z) l00005AD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AD9:
	branch Test(NE,Z) l00005ADD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005ADD:
	branch Test(NE,Z) l00005AE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005ADD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AE1:
	branch Test(NE,Z) l00005AE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AE5:
	branch Test(NE,Z) l00005AE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AE9:
	branch Test(NE,Z) l00005AED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AED:
	branch Test(NE,Z) l00005AF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AF1:
	branch Test(NE,Z) l00005AF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AF5:
	branch Test(NE,Z) l00005AF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AF9:
	branch Test(NE,Z) l00005AFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AFD:
	branch Test(NE,Z) l00005B01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005AFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B01:
	branch Test(NE,Z) l00005B05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B05:
	branch Test(NE,Z) l00005B09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B09:
	branch Test(NE,Z) l00005B0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B0D:
	branch Test(NE,Z) l00005B11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B11:
	branch Test(NE,Z) l00005B15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B15:
	branch Test(NE,Z) l00005B19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B19:
	branch Test(NE,Z) l00005B1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B1D:
	branch Test(NE,Z) l00005B21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B21:
	branch Test(NE,Z) l00005B25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B25:
	branch Test(NE,Z) l00005B29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B29:
	branch Test(NE,Z) l00005B2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B2D:
	branch Test(NE,Z) l00005B31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B31:
	branch Test(NE,Z) l00005B35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B35:
	branch Test(NE,Z) l00005B39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B39:
	branch Test(NE,Z) l00005B3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B3D:
	branch Test(NE,Z) l00005B41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B41:
	branch Test(NE,Z) l00005B45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B45:
	branch Test(NE,Z) l00005B49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B49:
	branch Test(NE,Z) l00005B4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B4D:
	branch Test(NE,Z) l00005B51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B51:
	branch Test(NE,Z) l00005B55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B55:
	branch Test(NE,Z) l00005B59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B59:
	branch Test(NE,Z) l00005B5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B5D:
	branch Test(NE,Z) l00005B61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B61:
	branch Test(NE,Z) l00005B65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B65:
	branch Test(NE,Z) l00005B69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B69:
	branch Test(NE,Z) l00005B6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B6D:
	branch Test(NE,Z) l00005B71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B71:
	branch Test(NE,Z) l00005B75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B75:
	branch Test(NE,Z) l00005B79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B79:
	branch Test(NE,Z) l00005B7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B7D:
	branch Test(NE,Z) l00005B81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B81:
	branch Test(NE,Z) l00005B85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B85:
	branch Test(NE,Z) l00005B89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B89:
	branch Test(NE,Z) l00005B8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B8D:
	branch Test(NE,Z) l00005B91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B91:
	branch Test(NE,Z) l00005B95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B95:
	branch Test(NE,Z) l00005B99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B99:
	branch Test(NE,Z) l00005B9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B9D:
	branch Test(NE,Z) l00005BA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005B9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BA1:
	branch Test(NE,Z) l00005BA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BA5:
	branch Test(NE,Z) l00005BA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BA9:
	branch Test(NE,Z) l00005BAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BAD:
	branch Test(NE,Z) l00005BB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BB1:
	branch Test(NE,Z) l00005BB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BB5:
	branch Test(NE,Z) l00005BB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BB9:
	branch Test(NE,Z) l00005BBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BBD:
	branch Test(NE,Z) l00005BC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BC1:
	branch Test(NE,Z) l00005BC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BC5:
	branch Test(NE,Z) l00005BC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BC9:
	branch Test(NE,Z) l00005BCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BCD:
	branch Test(NE,Z) l00005BD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BD1:
	branch Test(NE,Z) l00005BD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BD5:
	branch Test(NE,Z) l00005BD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BD9:
	branch Test(NE,Z) l00005BDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BDD:
	branch Test(NE,Z) l00005BE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BE1:
	branch Test(NE,Z) l00005BE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BE5:
	branch Test(NE,Z) l00005BE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BE9:
	branch Test(NE,Z) l00005BED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BED:
	branch Test(NE,Z) l00005BF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BF1:
	branch Test(NE,Z) l00005BF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BF5:
	branch Test(NE,Z) l00005BF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BF9:
	branch Test(NE,Z) l00005BFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BFD:
	branch Test(NE,Z) l00005C01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005BFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C01:
	branch Test(NE,Z) l00005C05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C05:
	branch Test(NE,Z) l00005C09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C09:
	branch Test(NE,Z) l00005C0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C0D:
	branch Test(NE,Z) l00005C11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C11:
	branch Test(NE,Z) l00005C15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C15:
	branch Test(NE,Z) l00005C19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C19:
	branch Test(NE,Z) l00005C1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C1D:
	branch Test(NE,Z) l00005C21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C21:
	branch Test(NE,Z) l00005C25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C25:
	branch Test(NE,Z) l00005C29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C29:
	branch Test(NE,Z) l00005C2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C2D:
	branch Test(NE,Z) l00005C31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C31:
	branch Test(NE,Z) l00005C35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C35:
	branch Test(NE,Z) l00005C39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C39:
	branch Test(NE,Z) l00005C3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C3D:
	branch Test(NE,Z) l00005C41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C41:
	branch Test(NE,Z) l00005C45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C45:
	branch Test(NE,Z) l00005C49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C49:
	branch Test(NE,Z) l00005C4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C4D:
	branch Test(NE,Z) l00005C51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C51:
	branch Test(NE,Z) l00005C55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C55:
	branch Test(NE,Z) l00005C59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C59:
	branch Test(NE,Z) l00005C5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C5D:
	branch Test(NE,Z) l00005C61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C61:
	branch Test(NE,Z) l00005C65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C65:
	branch Test(NE,Z) l00005C69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C69:
	branch Test(NE,Z) l00005C6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C6D:
	branch Test(NE,Z) l00005C71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C71:
	branch Test(NE,Z) l00005C75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C75:
	branch Test(NE,Z) l00005C79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C79:
	branch Test(NE,Z) l00005C7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C7D:
	branch Test(NE,Z) l00005C81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C81:
	branch Test(NE,Z) l00005C85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C85:
	branch Test(NE,Z) l00005C89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C89:
	branch Test(NE,Z) l00005C8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C8D:
	branch Test(NE,Z) l00005C91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C91:
	branch Test(NE,Z) l00005C95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C95:
	branch Test(NE,Z) l00005C99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C99:
	branch Test(NE,Z) l00005C9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C9D:
	branch Test(NE,Z) l00005CA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005C9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CA1:
	branch Test(NE,Z) l00005CA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CA5:
	branch Test(NE,Z) l00005CA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CA9:
	branch Test(NE,Z) l00005CAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CAD:
	branch Test(NE,Z) l00005CB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CB1:
	branch Test(NE,Z) l00005CB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CB5:
	branch Test(NE,Z) l00005CB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CB9:
	branch Test(NE,Z) l00005CBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CBD:
	branch Test(NE,Z) l00005CC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CC1:
	branch Test(NE,Z) l00005CC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CC5:
	branch Test(NE,Z) l00005CC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CC9:
	branch Test(NE,Z) l00005CCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CCD:
	branch Test(NE,Z) l00005CD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CD1:
	branch Test(NE,Z) l00005CD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CD5:
	branch Test(NE,Z) l00005CD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CD9:
	branch Test(NE,Z) l00005CDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CDD:
	branch Test(NE,Z) l00005CE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CE1:
	branch Test(NE,Z) l00005CE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CE5:
	branch Test(NE,Z) l00005CE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CE9:
	branch Test(NE,Z) l00005CED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CED:
	branch Test(NE,Z) l00005CF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CF1:
	branch Test(NE,Z) l00005CF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CF5:
	branch Test(NE,Z) l00005CF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CF9:
	branch Test(NE,Z) l00005CFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CFD:
	branch Test(NE,Z) l00005D01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005CFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D01:
	branch Test(NE,Z) l00005D05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D05:
	branch Test(NE,Z) l00005D09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D09:
	branch Test(NE,Z) l00005D0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D0D:
	branch Test(NE,Z) l00005D11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D11:
	branch Test(NE,Z) l00005D15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D15:
	branch Test(NE,Z) l00005D19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D19:
	branch Test(NE,Z) l00005D1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D1D:
	branch Test(NE,Z) l00005D21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D21:
	branch Test(NE,Z) l00005D25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D25:
	branch Test(NE,Z) l00005D29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D29:
	branch Test(NE,Z) l00005D2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D2D:
	branch Test(NE,Z) l00005D31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D31:
	branch Test(NE,Z) l00005D35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D35:
	branch Test(NE,Z) l00005D39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D39:
	branch Test(NE,Z) l00005D3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D3D:
	branch Test(NE,Z) l00005D41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D41:
	branch Test(NE,Z) l00005D45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D45:
	branch Test(NE,Z) l00005D49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D49:
	branch Test(NE,Z) l00005D4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D4D:
	branch Test(NE,Z) l00005D51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D51:
	branch Test(NE,Z) l00005D55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D55:
	branch Test(NE,Z) l00005D59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D59:
	branch Test(NE,Z) l00005D5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D5D:
	branch Test(NE,Z) l00005D61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D61:
	branch Test(NE,Z) l00005D65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D65:
	branch Test(NE,Z) l00005D69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D69:
	branch Test(NE,Z) l00005D6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D6D:
	branch Test(NE,Z) l00005D71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D71:
	branch Test(NE,Z) l00005D75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D75:
	branch Test(NE,Z) l00005D79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D79:
	branch Test(NE,Z) l00005D7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D7D:
	branch Test(NE,Z) l00005D81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D81:
	branch Test(NE,Z) l00005D85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D85:
	branch Test(NE,Z) l00005D89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D89:
	branch Test(NE,Z) l00005D8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D8D:
	branch Test(NE,Z) l00005D91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D91:
	branch Test(NE,Z) l00005D95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D95:
	branch Test(NE,Z) l00005D99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D99:
	branch Test(NE,Z) l00005D9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D9D:
	branch Test(NE,Z) l00005DA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005D9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DA1:
	branch Test(NE,Z) l00005DA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DA5:
	branch Test(NE,Z) l00005DA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DA9:
	branch Test(NE,Z) l00005DAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DAD:
	branch Test(NE,Z) l00005DB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DB1:
	branch Test(NE,Z) l00005DB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DB5:
	branch Test(NE,Z) l00005DB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DB9:
	branch Test(NE,Z) l00005DBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DBD:
	branch Test(NE,Z) l00005DC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DC1:
	branch Test(NE,Z) l00005DC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DC5:
	branch Test(NE,Z) l00005DC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DC9:
	branch Test(NE,Z) l00005DCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DCD:
	branch Test(NE,Z) l00005DD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DD1:
	branch Test(NE,Z) l00005DD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DD5:
	branch Test(NE,Z) l00005DD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DD9:
	branch Test(NE,Z) l00005DDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DDD:
	branch Test(NE,Z) l00005DE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DE1:
	branch Test(NE,Z) l00005DE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DE5:
	branch Test(NE,Z) l00005DE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DE9:
	branch Test(NE,Z) l00005DED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DED:
	branch Test(NE,Z) l00005DF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DF1:
	branch Test(NE,Z) l00005DF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DF5:
	branch Test(NE,Z) l00005DF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DF9:
	branch Test(NE,Z) l00005DFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DFD:
	branch Test(NE,Z) l00005E01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005DFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E01:
	branch Test(NE,Z) l00005E05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E05:
	branch Test(NE,Z) l00005E09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E09:
	branch Test(NE,Z) l00005E0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E0D:
	branch Test(NE,Z) l00005E11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E11:
	branch Test(NE,Z) l00005E15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E15:
	branch Test(NE,Z) l00005E19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E19:
	branch Test(NE,Z) l00005E1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E1D:
	branch Test(NE,Z) l00005E21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E21:
	branch Test(NE,Z) l00005E25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E25:
	branch Test(NE,Z) l00005E29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E29:
	branch Test(NE,Z) l00005E2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E2D:
	branch Test(NE,Z) l00005E31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E31:
	branch Test(NE,Z) l00005E35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E35:
	branch Test(NE,Z) l00005E39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E39:
	branch Test(NE,Z) l00005E3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E3D:
	branch Test(NE,Z) l00005E41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E41:
	branch Test(NE,Z) l00005E45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E45:
	branch Test(NE,Z) l00005E49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E49:
	branch Test(NE,Z) l00005E4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E4D:
	branch Test(NE,Z) l00005E51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E51:
	branch Test(NE,Z) l00005E55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E55:
	branch Test(NE,Z) l00005E59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E59:
	branch Test(NE,Z) l00005E5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E5D:
	branch Test(NE,Z) l00005E61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E61:
	branch Test(NE,Z) l00005E65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E65:
	branch Test(NE,Z) l00005E69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E69:
	branch Test(NE,Z) l00005E6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E6D:
	branch Test(NE,Z) l00005E71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E71:
	branch Test(NE,Z) l00005E75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E75:
	branch Test(NE,Z) l00005E79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E79:
	branch Test(NE,Z) l00005E7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E7D:
	branch Test(NE,Z) l00005E81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E81:
	branch Test(NE,Z) l00005E85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E85:
	branch Test(NE,Z) l00005E89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E89:
	branch Test(NE,Z) l00005E8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E8D:
	branch Test(NE,Z) l00005E91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E91:
	branch Test(NE,Z) l00005E95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E95:
	branch Test(NE,Z) l00005E99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E99:
	branch Test(NE,Z) l00005E9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E9D:
	branch Test(NE,Z) l00005EA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005E9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EA1:
	branch Test(NE,Z) l00005EA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EA5:
	branch Test(NE,Z) l00005EA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EA9:
	branch Test(NE,Z) l00005EAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EAD:
	branch Test(NE,Z) l00005EB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EB1:
	branch Test(NE,Z) l00005EB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EB5:
	branch Test(NE,Z) l00005EB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EB9:
	branch Test(NE,Z) l00005EBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EBD:
	branch Test(NE,Z) l00005EC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EC1:
	branch Test(NE,Z) l00005EC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EC5:
	branch Test(NE,Z) l00005EC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EC9:
	branch Test(NE,Z) l00005ECD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005ECD:
	branch Test(NE,Z) l00005ED1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005ECD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005ED1:
	branch Test(NE,Z) l00005ED5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005ED1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005ED5:
	branch Test(NE,Z) l00005ED9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005ED5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005ED9:
	branch Test(NE,Z) l00005EDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005ED9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EDD:
	branch Test(NE,Z) l00005EE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EE1:
	branch Test(NE,Z) l00005EE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EE5:
	branch Test(NE,Z) l00005EE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EE9:
	branch Test(NE,Z) l00005EED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EED:
	branch Test(NE,Z) l00005EF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EF1:
	branch Test(NE,Z) l00005EF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EF5:
	branch Test(NE,Z) l00005EF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EF9:
	branch Test(NE,Z) l00005EFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EFD:
	branch Test(NE,Z) l00005F01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005EFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F01:
	branch Test(NE,Z) l00005F05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F05:
	branch Test(NE,Z) l00005F09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F09:
	branch Test(NE,Z) l00005F0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F0D:
	branch Test(NE,Z) l00005F11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F11:
	branch Test(NE,Z) l00005F15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F15:
	branch Test(NE,Z) l00005F19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F19:
	branch Test(NE,Z) l00005F1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F1D:
	branch Test(NE,Z) l00005F21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F21:
	branch Test(NE,Z) l00005F25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F25:
	branch Test(NE,Z) l00005F29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F29:
	branch Test(NE,Z) l00005F2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F2D:
	branch Test(NE,Z) l00005F31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F31:
	branch Test(NE,Z) l00005F35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F35:
	branch Test(NE,Z) l00005F39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F39:
	branch Test(NE,Z) l00005F3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F3D:
	branch Test(NE,Z) l00005F41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F41:
	branch Test(NE,Z) l00005F45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F45:
	branch Test(NE,Z) l00005F49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F49:
	branch Test(NE,Z) l00005F4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F4D:
	branch Test(NE,Z) l00005F51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F51:
	branch Test(NE,Z) l00005F55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F55:
	branch Test(NE,Z) l00005F59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F59:
	branch Test(NE,Z) l00005F5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F5D:
	branch Test(NE,Z) l00005F61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F61:
	branch Test(NE,Z) l00005F65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F65:
	branch Test(NE,Z) l00005F69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F69:
	branch Test(NE,Z) l00005F6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F6D:
	branch Test(NE,Z) l00005F71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F71:
	branch Test(NE,Z) l00005F75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F75:
	branch Test(NE,Z) l00005F79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F79:
	branch Test(NE,Z) l00005F7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F7D:
	branch Test(NE,Z) l00005F81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F81:
	branch Test(NE,Z) l00005F85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F85:
	branch Test(NE,Z) l00005F89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F89:
	branch Test(NE,Z) l00005F8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F8D:
	branch Test(NE,Z) l00005F91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F91:
	branch Test(NE,Z) l00005F95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F95:
	branch Test(NE,Z) l00005F99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F99:
	branch Test(NE,Z) l00005F9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F9D:
	branch Test(NE,Z) l00005FA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005F9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FA1:
	branch Test(NE,Z) l00005FA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FA5:
	branch Test(NE,Z) l00005FA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FA9:
	branch Test(NE,Z) l00005FAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FAD:
	branch Test(NE,Z) l00005FB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FB1:
	branch Test(NE,Z) l00005FB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FB5:
	branch Test(NE,Z) l00005FB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FB9:
	branch Test(NE,Z) l00005FBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FBD:
	branch Test(NE,Z) l00005FC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FC1:
	branch Test(NE,Z) l00005FC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FC5:
	branch Test(NE,Z) l00005FC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FC9:
	branch Test(NE,Z) l00005FCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FCD:
	branch Test(NE,Z) l00005FD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FD1:
	branch Test(NE,Z) l00005FD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FD5:
	branch Test(NE,Z) l00005FD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FD9:
	branch Test(NE,Z) l00005FDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FDD:
	branch Test(NE,Z) l00005FE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FE1:
	branch Test(NE,Z) l00005FE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FE5:
	branch Test(NE,Z) l00005FE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FE9:
	branch Test(NE,Z) l00005FED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FED:
	branch Test(NE,Z) l00005FF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FF1:
	branch Test(NE,Z) l00005FF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FF5:
	branch Test(NE,Z) l00005FF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FF9:
	branch Test(NE,Z) l00005FFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FFD:
	branch Test(NE,Z) l00006001
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00005FFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006001:
	branch Test(NE,Z) l00006005
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006001_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006005:
	branch Test(NE,Z) l00006009
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006005_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006009:
	branch Test(NE,Z) l0000600D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006009_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000600D:
	branch Test(NE,Z) l00006011
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000600D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006011:
	branch Test(NE,Z) l00006015
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006011_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006015:
	branch Test(NE,Z) l00006019
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006015_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006019:
	branch Test(NE,Z) l0000601D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006019_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000601D:
	branch Test(NE,Z) l00006021
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000601D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006021:
	branch Test(NE,Z) l00006025
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006021_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006025:
	branch Test(NE,Z) l00006029
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006025_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006029:
	branch Test(NE,Z) l0000602D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006029_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000602D:
	branch Test(NE,Z) l00006031
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000602D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006031:
	branch Test(NE,Z) l00006035
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006031_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006035:
	branch Test(NE,Z) l00006039
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006035_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006039:
	branch Test(NE,Z) l0000603D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006039_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000603D:
	branch Test(NE,Z) l00006041
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000603D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006041:
	branch Test(NE,Z) l00006045
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006041_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006045:
	branch Test(NE,Z) l00006049
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006045_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006049:
	branch Test(NE,Z) l0000604D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006049_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000604D:
	branch Test(NE,Z) l00006051
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000604D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006051:
	branch Test(NE,Z) l00006055
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006051_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006055:
	branch Test(NE,Z) l00006059
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006055_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006059:
	branch Test(NE,Z) l0000605D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006059_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000605D:
	branch Test(NE,Z) l00006061
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000605D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006061:
	branch Test(NE,Z) l00006065
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006061_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006065:
	branch Test(NE,Z) l00006069
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006065_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006069:
	branch Test(NE,Z) l0000606D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006069_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000606D:
	branch Test(NE,Z) l00006071
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000606D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006071:
	branch Test(NE,Z) l00006075
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006071_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006075:
	branch Test(NE,Z) l00006079
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006075_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006079:
	branch Test(NE,Z) l0000607D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006079_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000607D:
	branch Test(NE,Z) l00006081
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000607D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006081:
	branch Test(NE,Z) l00006085
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006081_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006085:
	branch Test(NE,Z) l00006089
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006085_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006089:
	branch Test(NE,Z) l0000608D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006089_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000608D:
	branch Test(NE,Z) l00006091
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000608D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006091:
	branch Test(NE,Z) l00006095
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006091_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006095:
	branch Test(NE,Z) l00006099
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006095_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006099:
	branch Test(NE,Z) l0000609D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006099_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000609D:
	branch Test(NE,Z) l000060A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000609D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060A1:
	branch Test(NE,Z) l000060A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060A5:
	branch Test(NE,Z) l000060A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060A9:
	branch Test(NE,Z) l000060AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060AD:
	branch Test(NE,Z) l000060B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060B1:
	branch Test(NE,Z) l000060B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060B5:
	branch Test(NE,Z) l000060B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060B9:
	branch Test(NE,Z) l000060BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060BD:
	branch Test(NE,Z) l000060C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060C1:
	branch Test(NE,Z) l000060C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060C5:
	branch Test(NE,Z) l000060C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060C9:
	branch Test(NE,Z) l000060CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060CD:
	branch Test(NE,Z) l000060D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060D1:
	branch Test(NE,Z) l000060D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060D5:
	branch Test(NE,Z) l000060D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060D9:
	branch Test(NE,Z) l000060DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060DD:
	branch Test(NE,Z) l000060E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060E1:
	branch Test(NE,Z) l000060E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060E5:
	branch Test(NE,Z) l000060E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060E9:
	branch Test(NE,Z) l000060ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060ED:
	branch Test(NE,Z) l000060F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060F1:
	branch Test(NE,Z) l000060F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060F5:
	branch Test(NE,Z) l000060F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060F9:
	branch Test(NE,Z) l000060FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060FD:
	branch Test(NE,Z) l00006101
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000060FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006101:
	branch Test(NE,Z) l00006105
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006101_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006105:
	branch Test(NE,Z) l00006109
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006105_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006109:
	branch Test(NE,Z) l0000610D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006109_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000610D:
	branch Test(NE,Z) l00006111
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000610D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006111:
	branch Test(NE,Z) l00006115
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006111_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006115:
	branch Test(NE,Z) l00006119
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006115_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006119:
	branch Test(NE,Z) l0000611D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006119_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000611D:
	branch Test(NE,Z) l00006121
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000611D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006121:
	branch Test(NE,Z) l00006125
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006121_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006125:
	branch Test(NE,Z) l00006129
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006125_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006129:
	branch Test(NE,Z) l0000612D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006129_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000612D:
	branch Test(NE,Z) l00006131
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000612D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006131:
	branch Test(NE,Z) l00006135
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006131_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006135:
	branch Test(NE,Z) l00006139
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006135_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006139:
	branch Test(NE,Z) l0000613D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006139_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000613D:
	branch Test(NE,Z) l00006141
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000613D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006141:
	branch Test(NE,Z) l00006145
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006141_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006145:
	branch Test(NE,Z) l00006149
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006145_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006149:
	branch Test(NE,Z) l0000614D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006149_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000614D:
	branch Test(NE,Z) l00006151
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000614D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006151:
	branch Test(NE,Z) l00006155
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006151_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006155:
	branch Test(NE,Z) l00006159
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006155_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006159:
	branch Test(NE,Z) l0000615D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006159_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000615D:
	branch Test(NE,Z) l00006161
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000615D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006161:
	branch Test(NE,Z) l00006165
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006161_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006165:
	branch Test(NE,Z) l00006169
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006165_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006169:
	branch Test(NE,Z) l0000616D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006169_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000616D:
	branch Test(NE,Z) l00006171
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000616D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006171:
	branch Test(NE,Z) l00006175
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006171_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006175:
	branch Test(NE,Z) l00006179
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006175_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006179:
	branch Test(NE,Z) l0000617D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006179_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000617D:
	branch Test(NE,Z) l00006181
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000617D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006181:
	branch Test(NE,Z) l00006185
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006181_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006185:
	branch Test(NE,Z) l00006189
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006185_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006189:
	branch Test(NE,Z) l0000618D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006189_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000618D:
	branch Test(NE,Z) l00006191
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000618D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006191:
	branch Test(NE,Z) l00006195
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006191_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006195:
	branch Test(NE,Z) l00006199
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006195_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006199:
	branch Test(NE,Z) l0000619D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006199_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000619D:
	branch Test(NE,Z) l000061A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000619D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061A1:
	branch Test(NE,Z) l000061A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061A5:
	branch Test(NE,Z) l000061A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061A9:
	branch Test(NE,Z) l000061AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061AD:
	branch Test(NE,Z) l000061B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061B1:
	branch Test(NE,Z) l000061B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061B5:
	branch Test(NE,Z) l000061B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061B9:
	branch Test(NE,Z) l000061BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061BD:
	branch Test(NE,Z) l000061C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061C1:
	branch Test(NE,Z) l000061C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061C5:
	branch Test(NE,Z) l000061C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061C9:
	branch Test(NE,Z) l000061CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061CD:
	branch Test(NE,Z) l000061D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061D1:
	branch Test(NE,Z) l000061D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061D5:
	branch Test(NE,Z) l000061D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061D9:
	branch Test(NE,Z) l000061DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061DD:
	branch Test(NE,Z) l000061E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061E1:
	branch Test(NE,Z) l000061E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061E5:
	branch Test(NE,Z) l000061E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061E9:
	branch Test(NE,Z) l000061ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061ED:
	branch Test(NE,Z) l000061F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061F1:
	branch Test(NE,Z) l000061F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061F5:
	branch Test(NE,Z) l000061F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061F9:
	branch Test(NE,Z) l000061FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061FD:
	branch Test(NE,Z) l00006201
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000061FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006201:
	branch Test(NE,Z) l00006205
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006201_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006205:
	branch Test(NE,Z) l00006209
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006205_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006209:
	branch Test(NE,Z) l0000620D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006209_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000620D:
	branch Test(NE,Z) l00006211
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000620D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006211:
	branch Test(NE,Z) l00006215
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006211_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006215:
	branch Test(NE,Z) l00006219
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006215_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006219:
	branch Test(NE,Z) l0000621D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006219_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000621D:
	branch Test(NE,Z) l00006221
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000621D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006221:
	branch Test(NE,Z) l00006225
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006221_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006225:
	branch Test(NE,Z) l00006229
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006225_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006229:
	branch Test(NE,Z) l0000622D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006229_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000622D:
	branch Test(NE,Z) l00006231
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000622D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006231:
	branch Test(NE,Z) l00006235
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006231_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006235:
	branch Test(NE,Z) l00006239
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006235_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006239:
	branch Test(NE,Z) l0000623D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006239_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000623D:
	branch Test(NE,Z) l00006241
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000623D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006241:
	branch Test(NE,Z) l00006245
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006241_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006245:
	branch Test(NE,Z) l00006249
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006245_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006249:
	branch Test(NE,Z) l0000624D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006249_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000624D:
	branch Test(NE,Z) l00006251
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000624D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006251:
	branch Test(NE,Z) l00006255
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006251_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006255:
	branch Test(NE,Z) l00006259
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006255_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006259:
	branch Test(NE,Z) l0000625D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006259_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000625D:
	branch Test(NE,Z) l00006261
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000625D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006261:
	branch Test(NE,Z) l00006265
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006261_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006265:
	branch Test(NE,Z) l00006269
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006265_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006269:
	branch Test(NE,Z) l0000626D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006269_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000626D:
	branch Test(NE,Z) l00006271
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000626D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006271:
	branch Test(NE,Z) l00006275
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006271_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006275:
	branch Test(NE,Z) l00006279
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006275_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006279:
	branch Test(NE,Z) l0000627D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006279_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000627D:
	branch Test(NE,Z) l00006281
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000627D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006281:
	branch Test(NE,Z) l00006285
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006281_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006285:
	branch Test(NE,Z) l00006289
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006285_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006289:
	branch Test(NE,Z) l0000628D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006289_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000628D:
	branch Test(NE,Z) l00006291
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000628D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006291:
	branch Test(NE,Z) l00006295
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006291_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006295:
	branch Test(NE,Z) l00006299
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006295_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006299:
	branch Test(NE,Z) l0000629D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006299_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000629D:
	branch Test(NE,Z) l000062A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000629D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062A1:
	branch Test(NE,Z) l000062A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062A5:
	branch Test(NE,Z) l000062A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062A9:
	branch Test(NE,Z) l000062AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062AD:
	branch Test(NE,Z) l000062B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062B1:
	branch Test(NE,Z) l000062B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062B5:
	branch Test(NE,Z) l000062B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062B9:
	branch Test(NE,Z) l000062BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062BD:
	branch Test(NE,Z) l000062C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062C1:
	branch Test(NE,Z) l000062C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062C5:
	branch Test(NE,Z) l000062C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062C9:
	branch Test(NE,Z) l000062CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062CD:
	branch Test(NE,Z) l000062D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062D1:
	branch Test(NE,Z) l000062D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062D5:
	branch Test(NE,Z) l000062D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062D9:
	branch Test(NE,Z) l000062DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062DD:
	branch Test(NE,Z) l000062E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062E1:
	branch Test(NE,Z) l000062E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062E5:
	branch Test(NE,Z) l000062E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062E9:
	branch Test(NE,Z) l000062ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062ED:
	branch Test(NE,Z) l000062F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062F1:
	branch Test(NE,Z) l000062F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062F5:
	branch Test(NE,Z) l000062F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062F9:
	branch Test(NE,Z) l000062FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062FD:
	branch Test(NE,Z) l00006301
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000062FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006301:
	branch Test(NE,Z) l00006305
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006301_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006305:
	branch Test(NE,Z) l00006309
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006305_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006309:
	branch Test(NE,Z) l0000630D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006309_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000630D:
	branch Test(NE,Z) l00006311
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000630D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006311:
	branch Test(NE,Z) l00006315
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006311_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006315:
	branch Test(NE,Z) l00006319
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006315_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006319:
	branch Test(NE,Z) l0000631D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006319_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000631D:
	branch Test(NE,Z) l00006321
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000631D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006321:
	branch Test(NE,Z) l00006325
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006321_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006325:
	branch Test(NE,Z) l00006329
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006325_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006329:
	branch Test(NE,Z) l0000632D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006329_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000632D:
	branch Test(NE,Z) l00006331
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000632D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006331:
	branch Test(NE,Z) l00006335
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006331_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006335:
	branch Test(NE,Z) l00006339
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006335_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006339:
	branch Test(NE,Z) l0000633D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006339_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000633D:
	branch Test(NE,Z) l00006341
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000633D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006341:
	branch Test(NE,Z) l00006345
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006341_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006345:
	branch Test(NE,Z) l00006349
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006345_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006349:
	branch Test(NE,Z) l0000634D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006349_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000634D:
	branch Test(NE,Z) l00006351
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000634D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006351:
	branch Test(NE,Z) l00006355
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006351_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006355:
	branch Test(NE,Z) l00006359
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006355_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006359:
	branch Test(NE,Z) l0000635D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006359_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000635D:
	branch Test(NE,Z) l00006361
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000635D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006361:
	branch Test(NE,Z) l00006365
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006361_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006365:
	branch Test(NE,Z) l00006369
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006365_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006369:
	branch Test(NE,Z) l0000636D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006369_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000636D:
	branch Test(NE,Z) l00006371
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000636D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006371:
	branch Test(NE,Z) l00006375
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006371_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006375:
	branch Test(NE,Z) l00006379
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006375_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006379:
	branch Test(NE,Z) l0000637D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006379_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000637D:
	branch Test(NE,Z) l00006381
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000637D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006381:
	branch Test(NE,Z) l00006385
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006381_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006385:
	branch Test(NE,Z) l00006389
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006385_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006389:
	branch Test(NE,Z) l0000638D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006389_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000638D:
	branch Test(NE,Z) l00006391
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000638D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006391:
	branch Test(NE,Z) l00006395
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006391_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006395:
	branch Test(NE,Z) l00006399
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006395_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006399:
	branch Test(NE,Z) l0000639D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006399_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000639D:
	branch Test(NE,Z) l000063A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000639D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063A1:
	branch Test(NE,Z) l000063A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063A5:
	branch Test(NE,Z) l000063A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063A9:
	branch Test(NE,Z) l000063AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063AD:
	branch Test(NE,Z) l000063B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063B1:
	branch Test(NE,Z) l000063B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063B5:
	branch Test(NE,Z) l000063B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063B9:
	branch Test(NE,Z) l000063BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063BD:
	branch Test(NE,Z) l000063C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063C1:
	branch Test(NE,Z) l000063C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063C5:
	branch Test(NE,Z) l000063C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063C9:
	branch Test(NE,Z) l000063CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063CD:
	branch Test(NE,Z) l000063D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063D1:
	branch Test(NE,Z) l000063D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063D5:
	branch Test(NE,Z) l000063D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063D9:
	branch Test(NE,Z) l000063DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063DD:
	branch Test(NE,Z) l000063E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063E1:
	branch Test(NE,Z) l000063E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063E5:
	branch Test(NE,Z) l000063E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063E9:
	branch Test(NE,Z) l000063ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063ED:
	branch Test(NE,Z) l000063F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063F1:
	branch Test(NE,Z) l000063F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063F5:
	branch Test(NE,Z) l000063F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063F9:
	branch Test(NE,Z) l000063FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063FD:
	branch Test(NE,Z) l00006401
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000063FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006401:
	branch Test(NE,Z) l00006405
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006401_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006405:
	branch Test(NE,Z) l00006409
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006405_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006409:
	branch Test(NE,Z) l0000640D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006409_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000640D:
	branch Test(NE,Z) l00006411
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000640D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006411:
	branch Test(NE,Z) l00006415
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006411_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006415:
	branch Test(NE,Z) l00006419
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006415_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006419:
	branch Test(NE,Z) l0000641D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006419_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000641D:
	branch Test(NE,Z) l00006421
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000641D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006421:
	branch Test(NE,Z) l00006425
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006421_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006425:
	branch Test(NE,Z) l00006429
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006425_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006429:
	branch Test(NE,Z) l0000642D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006429_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000642D:
	branch Test(NE,Z) l00006431
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000642D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006431:
	branch Test(NE,Z) l00006435
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006431_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006435:
	branch Test(NE,Z) l00006439
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006435_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006439:
	branch Test(NE,Z) l0000643D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006439_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000643D:
	branch Test(NE,Z) l00006441
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000643D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006441:
	branch Test(NE,Z) l00006445
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006441_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006445:
	branch Test(NE,Z) l00006449
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006445_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006449:
	branch Test(NE,Z) l0000644D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006449_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000644D:
	branch Test(NE,Z) l00006451
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000644D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006451:
	branch Test(NE,Z) l00006455
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006451_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006455:
	branch Test(NE,Z) l00006459
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006455_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006459:
	branch Test(NE,Z) l0000645D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006459_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000645D:
	branch Test(NE,Z) l00006461
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000645D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006461:
	branch Test(NE,Z) l00006465
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006461_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006465:
	branch Test(NE,Z) l00006469
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006465_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006469:
	branch Test(NE,Z) l0000646D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006469_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000646D:
	branch Test(NE,Z) l00006471
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000646D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006471:
	branch Test(NE,Z) l00006475
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006471_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006475:
	branch Test(NE,Z) l00006479
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006475_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006479:
	branch Test(NE,Z) l0000647D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006479_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000647D:
	branch Test(NE,Z) l00006481
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000647D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006481:
	branch Test(NE,Z) l00006485
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006481_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006485:
	branch Test(NE,Z) l00006489
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006485_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006489:
	branch Test(NE,Z) l0000648D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006489_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000648D:
	branch Test(NE,Z) l00006491
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000648D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006491:
	branch Test(NE,Z) l00006495
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006491_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006495:
	branch Test(NE,Z) l00006499
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006495_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006499:
	branch Test(NE,Z) l0000649D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006499_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000649D:
	branch Test(NE,Z) l000064A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000649D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064A1:
	branch Test(NE,Z) l000064A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064A5:
	branch Test(NE,Z) l000064A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064A9:
	branch Test(NE,Z) l000064AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064AD:
	branch Test(NE,Z) l000064B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064B1:
	branch Test(NE,Z) l000064B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064B5:
	branch Test(NE,Z) l000064B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064B9:
	branch Test(NE,Z) l000064BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064BD:
	branch Test(NE,Z) l000064C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064C1:
	branch Test(NE,Z) l000064C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064C5:
	branch Test(NE,Z) l000064C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064C9:
	branch Test(NE,Z) l000064CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064CD:
	branch Test(NE,Z) l000064D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064D1:
	branch Test(NE,Z) l000064D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064D5:
	branch Test(NE,Z) l000064D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064D9:
	branch Test(NE,Z) l000064DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064DD:
	branch Test(NE,Z) l000064E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064E1:
	branch Test(NE,Z) l000064E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064E5:
	branch Test(NE,Z) l000064E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064E9:
	branch Test(NE,Z) l000064ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064ED:
	branch Test(NE,Z) l000064F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064F1:
	branch Test(NE,Z) l000064F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064F5:
	branch Test(NE,Z) l000064F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064F9:
	branch Test(NE,Z) l000064FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064FD:
	branch Test(NE,Z) l00006501
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000064FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006501:
	branch Test(NE,Z) l00006505
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006501_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006505:
	branch Test(NE,Z) l00006509
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006505_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006509:
	branch Test(NE,Z) l0000650D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006509_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000650D:
	branch Test(NE,Z) l00006511
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000650D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006511:
	branch Test(NE,Z) l00006515
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006511_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006515:
	branch Test(NE,Z) l00006519
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006515_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006519:
	branch Test(NE,Z) l0000651D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006519_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000651D:
	branch Test(NE,Z) l00006521
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000651D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006521:
	branch Test(NE,Z) l00006525
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006521_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006525:
	branch Test(NE,Z) l00006529
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006525_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006529:
	branch Test(NE,Z) l0000652D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006529_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000652D:
	branch Test(NE,Z) l00006531
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000652D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006531:
	branch Test(NE,Z) l00006535
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006531_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006535:
	branch Test(NE,Z) l00006539
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006535_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006539:
	branch Test(NE,Z) l0000653D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006539_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000653D:
	branch Test(NE,Z) l00006541
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000653D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006541:
	branch Test(NE,Z) l00006545
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006541_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006545:
	branch Test(NE,Z) l00006549
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006545_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006549:
	branch Test(NE,Z) l0000654D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006549_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000654D:
	branch Test(NE,Z) l00006551
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000654D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006551:
	branch Test(NE,Z) l00006555
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006551_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006555:
	branch Test(NE,Z) l00006559
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006555_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006559:
	branch Test(NE,Z) l0000655D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006559_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000655D:
	branch Test(NE,Z) l00006561
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000655D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006561:
	branch Test(NE,Z) l00006565
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006561_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006565:
	branch Test(NE,Z) l00006569
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006565_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006569:
	branch Test(NE,Z) l0000656D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006569_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000656D:
	branch Test(NE,Z) l00006571
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000656D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006571:
	branch Test(NE,Z) l00006575
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006571_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006575:
	branch Test(NE,Z) l00006579
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006575_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006579:
	branch Test(NE,Z) l0000657D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006579_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000657D:
	branch Test(NE,Z) l00006581
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000657D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006581:
	branch Test(NE,Z) l00006585
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006581_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006585:
	branch Test(NE,Z) l00006589
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006585_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006589:
	branch Test(NE,Z) l0000658D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006589_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000658D:
	branch Test(NE,Z) l00006591
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000658D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006591:
	branch Test(NE,Z) l00006595
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006591_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006595:
	branch Test(NE,Z) l00006599
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006595_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006599:
	branch Test(NE,Z) l0000659D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006599_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000659D:
	branch Test(NE,Z) l000065A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000659D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065A1:
	branch Test(NE,Z) l000065A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065A5:
	branch Test(NE,Z) l000065A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065A9:
	branch Test(NE,Z) l000065AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065AD:
	branch Test(NE,Z) l000065B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065B1:
	branch Test(NE,Z) l000065B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065B5:
	branch Test(NE,Z) l000065B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065B9:
	branch Test(NE,Z) l000065BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065BD:
	branch Test(NE,Z) l000065C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065C1:
	branch Test(NE,Z) l000065C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065C5:
	branch Test(NE,Z) l000065C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065C9:
	branch Test(NE,Z) l000065CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065CD:
	branch Test(NE,Z) l000065D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065D1:
	branch Test(NE,Z) l000065D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065D5:
	branch Test(NE,Z) l000065D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065D9:
	branch Test(NE,Z) l000065DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065DD:
	branch Test(NE,Z) l000065E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065E1:
	branch Test(NE,Z) l000065E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065E5:
	branch Test(NE,Z) l000065E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065E9:
	branch Test(NE,Z) l000065ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065ED:
	branch Test(NE,Z) l000065F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065F1:
	branch Test(NE,Z) l000065F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065F5:
	branch Test(NE,Z) l000065F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065F9:
	branch Test(NE,Z) l000065FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065FD:
	branch Test(NE,Z) l00006601
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000065FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006601:
	branch Test(NE,Z) l00006605
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006601_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006605:
	branch Test(NE,Z) l00006609
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006605_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006609:
	branch Test(NE,Z) l0000660D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006609_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000660D:
	branch Test(NE,Z) l00006611
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000660D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006611:
	branch Test(NE,Z) l00006615
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006611_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006615:
	branch Test(NE,Z) l00006619
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006615_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006619:
	branch Test(NE,Z) l0000661D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006619_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000661D:
	branch Test(NE,Z) l00006621
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000661D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006621:
	branch Test(NE,Z) l00006625
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006621_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006625:
	branch Test(NE,Z) l00006629
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006625_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006629:
	branch Test(NE,Z) l0000662D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006629_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000662D:
	branch Test(NE,Z) l00006631
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000662D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006631:
	branch Test(NE,Z) l00006635
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006631_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006635:
	branch Test(NE,Z) l00006639
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006635_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006639:
	branch Test(NE,Z) l0000663D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006639_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000663D:
	branch Test(NE,Z) l00006641
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000663D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006641:
	branch Test(NE,Z) l00006645
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006641_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006645:
	branch Test(NE,Z) l00006649
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006645_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006649:
	branch Test(NE,Z) l0000664D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006649_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000664D:
	branch Test(NE,Z) l00006651
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000664D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006651:
	branch Test(NE,Z) l00006655
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006651_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006655:
	branch Test(NE,Z) l00006659
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006655_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006659:
	branch Test(NE,Z) l0000665D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006659_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000665D:
	branch Test(NE,Z) l00006661
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000665D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006661:
	branch Test(NE,Z) l00006665
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006661_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006665:
	branch Test(NE,Z) l00006669
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006665_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006669:
	branch Test(NE,Z) l0000666D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006669_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000666D:
	branch Test(NE,Z) l00006671
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000666D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006671:
	branch Test(NE,Z) l00006675
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006671_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006675:
	branch Test(NE,Z) l00006679
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006675_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006679:
	branch Test(NE,Z) l0000667D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006679_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000667D:
	branch Test(NE,Z) l00006681
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000667D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006681:
	branch Test(NE,Z) l00006685
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006681_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006685:
	branch Test(NE,Z) l00006689
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006685_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006689:
	branch Test(NE,Z) l0000668D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006689_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000668D:
	branch Test(NE,Z) l00006691
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000668D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006691:
	branch Test(NE,Z) l00006695
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006691_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006695:
	branch Test(NE,Z) l00006699
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006695_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006699:
	branch Test(NE,Z) l0000669D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006699_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000669D:
	branch Test(NE,Z) l000066A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000669D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066A1:
	branch Test(NE,Z) l000066A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066A5:
	branch Test(NE,Z) l000066A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066A9:
	branch Test(NE,Z) l000066AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066AD:
	branch Test(NE,Z) l000066B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066B1:
	branch Test(NE,Z) l000066B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066B5:
	branch Test(NE,Z) l000066B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066B9:
	branch Test(NE,Z) l000066BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066BD:
	branch Test(NE,Z) l000066C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066C1:
	branch Test(NE,Z) l000066C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066C5:
	branch Test(NE,Z) l000066C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066C9:
	branch Test(NE,Z) l000066CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066CD:
	branch Test(NE,Z) l000066D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066D1:
	branch Test(NE,Z) l000066D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066D5:
	branch Test(NE,Z) l000066D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066D9:
	branch Test(NE,Z) l000066DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066DD:
	branch Test(NE,Z) l000066E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066E1:
	branch Test(NE,Z) l000066E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066E5:
	branch Test(NE,Z) l000066E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066E9:
	branch Test(NE,Z) l000066ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066ED:
	branch Test(NE,Z) l000066F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066F1:
	branch Test(NE,Z) l000066F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066F5:
	branch Test(NE,Z) l000066F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066F9:
	branch Test(NE,Z) l000066FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066FD:
	branch Test(NE,Z) l00006701
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000066FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006701:
	branch Test(NE,Z) l00006705
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006701_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006705:
	branch Test(NE,Z) l00006709
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006705_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006709:
	branch Test(NE,Z) l0000670D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006709_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000670D:
	branch Test(NE,Z) l00006711
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000670D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006711:
	branch Test(NE,Z) l00006715
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006711_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006715:
	branch Test(NE,Z) l00006719
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006715_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006719:
	branch Test(NE,Z) l0000671D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006719_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000671D:
	branch Test(NE,Z) l00006721
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000671D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006721:
	branch Test(NE,Z) l00006725
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006721_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006725:
	branch Test(NE,Z) l00006729
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006725_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006729:
	branch Test(NE,Z) l0000672D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006729_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000672D:
	branch Test(NE,Z) l00006731
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000672D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006731:
	branch Test(NE,Z) l00006735
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006731_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006735:
	branch Test(NE,Z) l00006739
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006735_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006739:
	branch Test(NE,Z) l0000673D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006739_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000673D:
	branch Test(NE,Z) l00006741
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000673D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006741:
	branch Test(NE,Z) l00006745
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006741_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006745:
	branch Test(NE,Z) l00006749
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006745_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006749:
	branch Test(NE,Z) l0000674D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006749_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000674D:
	branch Test(NE,Z) l00006751
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000674D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006751:
	branch Test(NE,Z) l00006755
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006751_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006755:
	branch Test(NE,Z) l00006759
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006755_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006759:
	branch Test(NE,Z) l0000675D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006759_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000675D:
	branch Test(NE,Z) l00006761
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000675D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006761:
	branch Test(NE,Z) l00006765
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006761_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006765:
	branch Test(NE,Z) l00006769
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006765_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006769:
	branch Test(NE,Z) l0000676D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006769_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000676D:
	branch Test(NE,Z) l00006771
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000676D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006771:
	branch Test(NE,Z) l00006775
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006771_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006775:
	branch Test(NE,Z) l00006779
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006775_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006779:
	branch Test(NE,Z) l0000677D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006779_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000677D:
	branch Test(NE,Z) l00006781
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000677D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006781:
	branch Test(NE,Z) l00006785
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006781_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006785:
	branch Test(NE,Z) l00006789
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006785_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006789:
	branch Test(NE,Z) l0000678D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006789_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000678D:
	branch Test(NE,Z) l00006791
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000678D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006791:
	branch Test(NE,Z) l00006795
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006791_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006795:
	branch Test(NE,Z) l00006799
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006795_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006799:
	branch Test(NE,Z) l0000679D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006799_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000679D:
	branch Test(NE,Z) l000067A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000679D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067A1:
	branch Test(NE,Z) l000067A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067A5:
	branch Test(NE,Z) l000067A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067A9:
	branch Test(NE,Z) l000067AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067AD:
	branch Test(NE,Z) l000067B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067B1:
	branch Test(NE,Z) l000067B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067B5:
	branch Test(NE,Z) l000067B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067B9:
	branch Test(NE,Z) l000067BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067BD:
	branch Test(NE,Z) l000067C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067C1:
	branch Test(NE,Z) l000067C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067C5:
	branch Test(NE,Z) l000067C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067C9:
	branch Test(NE,Z) l000067CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067CD:
	branch Test(NE,Z) l000067D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067D1:
	branch Test(NE,Z) l000067D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067D5:
	branch Test(NE,Z) l000067D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067D9:
	branch Test(NE,Z) l000067DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067DD:
	branch Test(NE,Z) l000067E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067E1:
	branch Test(NE,Z) l000067E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067E5:
	branch Test(NE,Z) l000067E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067E9:
	branch Test(NE,Z) l000067ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067ED:
	branch Test(NE,Z) l000067F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067F1:
	branch Test(NE,Z) l000067F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067F5:
	branch Test(NE,Z) l000067F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067F9:
	branch Test(NE,Z) l000067FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067FD:
	branch Test(NE,Z) l00006801
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000067FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006801:
	branch Test(NE,Z) l00006805
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006801_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006805:
	branch Test(NE,Z) l00006809
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006805_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006809:
	branch Test(NE,Z) l0000680D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006809_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000680D:
	branch Test(NE,Z) l00006811
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000680D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006811:
	branch Test(NE,Z) l00006815
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006811_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006815:
	branch Test(NE,Z) l00006819
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006815_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006819:
	branch Test(NE,Z) l0000681D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006819_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000681D:
	branch Test(NE,Z) l00006821
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000681D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006821:
	branch Test(NE,Z) l00006825
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006821_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006825:
	branch Test(NE,Z) l00006829
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006825_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006829:
	branch Test(NE,Z) l0000682D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006829_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000682D:
	branch Test(NE,Z) l00006831
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000682D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006831:
	branch Test(NE,Z) l00006835
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006831_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006835:
	branch Test(NE,Z) l00006839
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006835_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006839:
	branch Test(NE,Z) l0000683D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006839_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000683D:
	branch Test(NE,Z) l00006841
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000683D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006841:
	branch Test(NE,Z) l00006845
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006841_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006845:
	branch Test(NE,Z) l00006849
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006845_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006849:
	branch Test(NE,Z) l0000684D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006849_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000684D:
	branch Test(NE,Z) l00006851
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000684D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006851:
	branch Test(NE,Z) l00006855
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006851_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006855:
	branch Test(NE,Z) l00006859
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006855_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006859:
	branch Test(NE,Z) l0000685D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006859_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000685D:
	branch Test(NE,Z) l00006861
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000685D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006861:
	branch Test(NE,Z) l00006865
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006861_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006865:
	branch Test(NE,Z) l00006869
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006865_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006869:
	branch Test(NE,Z) l0000686D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006869_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000686D:
	branch Test(NE,Z) l00006871
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000686D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006871:
	branch Test(NE,Z) l00006875
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006871_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006875:
	branch Test(NE,Z) l00006879
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006875_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006879:
	branch Test(NE,Z) l0000687D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006879_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000687D:
	branch Test(NE,Z) l00006881
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000687D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006881:
	branch Test(NE,Z) l00006885
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006881_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006885:
	branch Test(NE,Z) l00006889
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006885_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006889:
	branch Test(NE,Z) l0000688D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006889_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000688D:
	branch Test(NE,Z) l00006891
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000688D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006891:
	branch Test(NE,Z) l00006895
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006891_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006895:
	branch Test(NE,Z) l00006899
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006895_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006899:
	branch Test(NE,Z) l0000689D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006899_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000689D:
	branch Test(NE,Z) l000068A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000689D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068A1:
	branch Test(NE,Z) l000068A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068A5:
	branch Test(NE,Z) l000068A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068A9:
	branch Test(NE,Z) l000068AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068AD:
	branch Test(NE,Z) l000068B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068B1:
	branch Test(NE,Z) l000068B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068B5:
	branch Test(NE,Z) l000068B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068B9:
	branch Test(NE,Z) l000068BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068BD:
	branch Test(NE,Z) l000068C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068C1:
	branch Test(NE,Z) l000068C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068C5:
	branch Test(NE,Z) l000068C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068C9:
	branch Test(NE,Z) l000068CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068CD:
	branch Test(NE,Z) l000068D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068D1:
	branch Test(NE,Z) l000068D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068D5:
	branch Test(NE,Z) l000068D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068D9:
	branch Test(NE,Z) l000068DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068DD:
	branch Test(NE,Z) l000068E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068E1:
	branch Test(NE,Z) l000068E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068E5:
	branch Test(NE,Z) l000068E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068E9:
	branch Test(NE,Z) l000068ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068ED:
	branch Test(NE,Z) l000068F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068F1:
	branch Test(NE,Z) l000068F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068F5:
	branch Test(NE,Z) l000068F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068F9:
	branch Test(NE,Z) l000068FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068FD:
	branch Test(NE,Z) l00006901
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000068FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006901:
	branch Test(NE,Z) l00006905
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006901_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006905:
	branch Test(NE,Z) l00006909
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006905_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006909:
	branch Test(NE,Z) l0000690D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006909_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000690D:
	branch Test(NE,Z) l00006911
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000690D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006911:
	branch Test(NE,Z) l00006915
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006911_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006915:
	branch Test(NE,Z) l00006919
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006915_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006919:
	branch Test(NE,Z) l0000691D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006919_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000691D:
	branch Test(NE,Z) l00006921
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000691D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006921:
	branch Test(NE,Z) l00006925
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006921_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006925:
	branch Test(NE,Z) l00006929
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006925_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006929:
	branch Test(NE,Z) l0000692D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006929_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000692D:
	branch Test(NE,Z) l00006931
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000692D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006931:
	branch Test(NE,Z) l00006935
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006931_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006935:
	branch Test(NE,Z) l00006939
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006935_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006939:
	branch Test(NE,Z) l0000693D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006939_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000693D:
	branch Test(NE,Z) l00006941
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000693D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006941:
	branch Test(NE,Z) l00006945
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006941_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006945:
	branch Test(NE,Z) l00006949
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006945_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006949:
	branch Test(NE,Z) l0000694D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006949_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000694D:
	branch Test(NE,Z) l00006951
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000694D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006951:
	branch Test(NE,Z) l00006955
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006951_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006955:
	branch Test(NE,Z) l00006959
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006955_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006959:
	branch Test(NE,Z) l0000695D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006959_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000695D:
	branch Test(NE,Z) l00006961
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000695D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006961:
	branch Test(NE,Z) l00006965
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006961_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006965:
	branch Test(NE,Z) l00006969
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006965_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006969:
	branch Test(NE,Z) l0000696D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006969_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000696D:
	branch Test(NE,Z) l00006971
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000696D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006971:
	branch Test(NE,Z) l00006975
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006971_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006975:
	branch Test(NE,Z) l00006979
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006975_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006979:
	branch Test(NE,Z) l0000697D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006979_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000697D:
	branch Test(NE,Z) l00006981
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000697D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006981:
	branch Test(NE,Z) l00006985
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006981_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006985:
	branch Test(NE,Z) l00006989
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006985_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006989:
	branch Test(NE,Z) l0000698D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006989_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000698D:
	branch Test(NE,Z) l00006991
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000698D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006991:
	branch Test(NE,Z) l00006995
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006991_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006995:
	branch Test(NE,Z) l00006999
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006995_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006999:
	branch Test(NE,Z) l0000699D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006999_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000699D:
	branch Test(NE,Z) l000069A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000699D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069A1:
	branch Test(NE,Z) l000069A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069A5:
	branch Test(NE,Z) l000069A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069A9:
	branch Test(NE,Z) l000069AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069AD:
	branch Test(NE,Z) l000069B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069B1:
	branch Test(NE,Z) l000069B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069B5:
	branch Test(NE,Z) l000069B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069B9:
	branch Test(NE,Z) l000069BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069BD:
	branch Test(NE,Z) l000069C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069C1:
	branch Test(NE,Z) l000069C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069C5:
	branch Test(NE,Z) l000069C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069C9:
	branch Test(NE,Z) l000069CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069CD:
	branch Test(NE,Z) l000069D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069D1:
	branch Test(NE,Z) l000069D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069D5:
	branch Test(NE,Z) l000069D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069D9:
	branch Test(NE,Z) l000069DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069DD:
	branch Test(NE,Z) l000069E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069E1:
	branch Test(NE,Z) l000069E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069E5:
	branch Test(NE,Z) l000069E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069E9:
	branch Test(NE,Z) l000069ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069ED:
	branch Test(NE,Z) l000069F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069F1:
	branch Test(NE,Z) l000069F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069F5:
	branch Test(NE,Z) l000069F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069F9:
	branch Test(NE,Z) l000069FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069FD:
	branch Test(NE,Z) l00006A01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000069FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A01:
	branch Test(NE,Z) l00006A05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A05:
	branch Test(NE,Z) l00006A09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A09:
	branch Test(NE,Z) l00006A0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A0D:
	branch Test(NE,Z) l00006A11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A11:
	branch Test(NE,Z) l00006A15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A15:
	branch Test(NE,Z) l00006A19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A19:
	branch Test(NE,Z) l00006A1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A1D:
	branch Test(NE,Z) l00006A21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A21:
	branch Test(NE,Z) l00006A25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A25:
	branch Test(NE,Z) l00006A29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A29:
	branch Test(NE,Z) l00006A2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A2D:
	branch Test(NE,Z) l00006A31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A31:
	branch Test(NE,Z) l00006A35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A35:
	branch Test(NE,Z) l00006A39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A39:
	branch Test(NE,Z) l00006A3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A3D:
	branch Test(NE,Z) l00006A41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A41:
	branch Test(NE,Z) l00006A45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A45:
	branch Test(NE,Z) l00006A49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A49:
	branch Test(NE,Z) l00006A4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A4D:
	branch Test(NE,Z) l00006A51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A51:
	branch Test(NE,Z) l00006A55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A55:
	branch Test(NE,Z) l00006A59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A59:
	branch Test(NE,Z) l00006A5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A5D:
	branch Test(NE,Z) l00006A61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A61:
	branch Test(NE,Z) l00006A65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A65:
	branch Test(NE,Z) l00006A69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A69:
	branch Test(NE,Z) l00006A6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A6D:
	branch Test(NE,Z) l00006A71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A71:
	branch Test(NE,Z) l00006A75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A75:
	branch Test(NE,Z) l00006A79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A79:
	branch Test(NE,Z) l00006A7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A7D:
	branch Test(NE,Z) l00006A81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A81:
	branch Test(NE,Z) l00006A85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A85:
	branch Test(NE,Z) l00006A89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A89:
	branch Test(NE,Z) l00006A8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A8D:
	branch Test(NE,Z) l00006A91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A91:
	branch Test(NE,Z) l00006A95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A95:
	branch Test(NE,Z) l00006A99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A99:
	branch Test(NE,Z) l00006A9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A9D:
	branch Test(NE,Z) l00006AA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006A9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AA1:
	branch Test(NE,Z) l00006AA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AA5:
	branch Test(NE,Z) l00006AA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AA9:
	branch Test(NE,Z) l00006AAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AAD:
	branch Test(NE,Z) l00006AB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AB1:
	branch Test(NE,Z) l00006AB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AB5:
	branch Test(NE,Z) l00006AB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AB9:
	branch Test(NE,Z) l00006ABD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006ABD:
	branch Test(NE,Z) l00006AC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006ABD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AC1:
	branch Test(NE,Z) l00006AC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AC5:
	branch Test(NE,Z) l00006AC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AC9:
	branch Test(NE,Z) l00006ACD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006ACD:
	branch Test(NE,Z) l00006AD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006ACD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AD1:
	branch Test(NE,Z) l00006AD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AD5:
	branch Test(NE,Z) l00006AD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AD9:
	branch Test(NE,Z) l00006ADD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006ADD:
	branch Test(NE,Z) l00006AE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006ADD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AE1:
	branch Test(NE,Z) l00006AE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AE5:
	branch Test(NE,Z) l00006AE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AE9:
	branch Test(NE,Z) l00006AED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AED:
	branch Test(NE,Z) l00006AF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AF1:
	branch Test(NE,Z) l00006AF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AF5:
	branch Test(NE,Z) l00006AF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AF9:
	branch Test(NE,Z) l00006AFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AFD:
	branch Test(NE,Z) l00006B01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006AFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B01:
	branch Test(NE,Z) l00006B05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B05:
	branch Test(NE,Z) l00006B09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B09:
	branch Test(NE,Z) l00006B0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B0D:
	branch Test(NE,Z) l00006B11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B11:
	branch Test(NE,Z) l00006B15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B15:
	branch Test(NE,Z) l00006B19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B19:
	branch Test(NE,Z) l00006B1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B1D:
	branch Test(NE,Z) l00006B21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B21:
	branch Test(NE,Z) l00006B25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B25:
	branch Test(NE,Z) l00006B29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B29:
	branch Test(NE,Z) l00006B2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B2D:
	branch Test(NE,Z) l00006B31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B31:
	branch Test(NE,Z) l00006B35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B35:
	branch Test(NE,Z) l00006B39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B39:
	branch Test(NE,Z) l00006B3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B3D:
	branch Test(NE,Z) l00006B41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B41:
	branch Test(NE,Z) l00006B45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B45:
	branch Test(NE,Z) l00006B49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B49:
	branch Test(NE,Z) l00006B4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B4D:
	branch Test(NE,Z) l00006B51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B51:
	branch Test(NE,Z) l00006B55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B55:
	branch Test(NE,Z) l00006B59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B59:
	branch Test(NE,Z) l00006B5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B5D:
	branch Test(NE,Z) l00006B61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B61:
	branch Test(NE,Z) l00006B65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B65:
	branch Test(NE,Z) l00006B69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B69:
	branch Test(NE,Z) l00006B6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B6D:
	branch Test(NE,Z) l00006B71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B71:
	branch Test(NE,Z) l00006B75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B75:
	branch Test(NE,Z) l00006B79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B79:
	branch Test(NE,Z) l00006B7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B7D:
	branch Test(NE,Z) l00006B81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B81:
	branch Test(NE,Z) l00006B85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B85:
	branch Test(NE,Z) l00006B89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B89:
	branch Test(NE,Z) l00006B8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B8D:
	branch Test(NE,Z) l00006B91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B91:
	branch Test(NE,Z) l00006B95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B95:
	branch Test(NE,Z) l00006B99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B99:
	branch Test(NE,Z) l00006B9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B9D:
	branch Test(NE,Z) l00006BA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006B9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BA1:
	branch Test(NE,Z) l00006BA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BA5:
	branch Test(NE,Z) l00006BA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BA9:
	branch Test(NE,Z) l00006BAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BAD:
	branch Test(NE,Z) l00006BB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BB1:
	branch Test(NE,Z) l00006BB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BB5:
	branch Test(NE,Z) l00006BB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BB9:
	branch Test(NE,Z) l00006BBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BBD:
	branch Test(NE,Z) l00006BC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BC1:
	branch Test(NE,Z) l00006BC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BC5:
	branch Test(NE,Z) l00006BC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BC9:
	branch Test(NE,Z) l00006BCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BCD:
	branch Test(NE,Z) l00006BD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BD1:
	branch Test(NE,Z) l00006BD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BD5:
	branch Test(NE,Z) l00006BD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BD9:
	branch Test(NE,Z) l00006BDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BDD:
	branch Test(NE,Z) l00006BE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BE1:
	branch Test(NE,Z) l00006BE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BE5:
	branch Test(NE,Z) l00006BE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BE9:
	branch Test(NE,Z) l00006BED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BED:
	branch Test(NE,Z) l00006BF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BF1:
	branch Test(NE,Z) l00006BF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BF5:
	branch Test(NE,Z) l00006BF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BF9:
	branch Test(NE,Z) l00006BFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BFD:
	branch Test(NE,Z) l00006C01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006BFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C01:
	branch Test(NE,Z) l00006C05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C05:
	branch Test(NE,Z) l00006C09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C09:
	branch Test(NE,Z) l00006C0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C0D:
	branch Test(NE,Z) l00006C11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C11:
	branch Test(NE,Z) l00006C15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C15:
	branch Test(NE,Z) l00006C19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C19:
	branch Test(NE,Z) l00006C1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C1D:
	branch Test(NE,Z) l00006C21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C21:
	branch Test(NE,Z) l00006C25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C25:
	branch Test(NE,Z) l00006C29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C29:
	branch Test(NE,Z) l00006C2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C2D:
	branch Test(NE,Z) l00006C31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C31:
	branch Test(NE,Z) l00006C35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C35:
	branch Test(NE,Z) l00006C39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C39:
	branch Test(NE,Z) l00006C3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C3D:
	branch Test(NE,Z) l00006C41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C41:
	branch Test(NE,Z) l00006C45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C45:
	branch Test(NE,Z) l00006C49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C49:
	branch Test(NE,Z) l00006C4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C4D:
	branch Test(NE,Z) l00006C51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C51:
	branch Test(NE,Z) l00006C55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C55:
	branch Test(NE,Z) l00006C59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C59:
	branch Test(NE,Z) l00006C5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C5D:
	branch Test(NE,Z) l00006C61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C61:
	branch Test(NE,Z) l00006C65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C65:
	branch Test(NE,Z) l00006C69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C69:
	branch Test(NE,Z) l00006C6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C6D:
	branch Test(NE,Z) l00006C71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C71:
	branch Test(NE,Z) l00006C75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C75:
	branch Test(NE,Z) l00006C79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C79:
	branch Test(NE,Z) l00006C7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C7D:
	branch Test(NE,Z) l00006C81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C81:
	branch Test(NE,Z) l00006C85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C85:
	branch Test(NE,Z) l00006C89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C89:
	branch Test(NE,Z) l00006C8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C8D:
	branch Test(NE,Z) l00006C91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C91:
	branch Test(NE,Z) l00006C95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C95:
	branch Test(NE,Z) l00006C99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C99:
	branch Test(NE,Z) l00006C9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C9D:
	branch Test(NE,Z) l00006CA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006C9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CA1:
	branch Test(NE,Z) l00006CA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CA5:
	branch Test(NE,Z) l00006CA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CA9:
	branch Test(NE,Z) l00006CAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CAD:
	branch Test(NE,Z) l00006CB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CB1:
	branch Test(NE,Z) l00006CB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CB5:
	branch Test(NE,Z) l00006CB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CB9:
	branch Test(NE,Z) l00006CBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CBD:
	branch Test(NE,Z) l00006CC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CC1:
	branch Test(NE,Z) l00006CC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CC5:
	branch Test(NE,Z) l00006CC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CC9:
	branch Test(NE,Z) l00006CCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CCD:
	branch Test(NE,Z) l00006CD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CD1:
	branch Test(NE,Z) l00006CD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CD5:
	branch Test(NE,Z) l00006CD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CD9:
	branch Test(NE,Z) l00006CDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CDD:
	branch Test(NE,Z) l00006CE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CE1:
	branch Test(NE,Z) l00006CE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CE5:
	branch Test(NE,Z) l00006CE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CE9:
	branch Test(NE,Z) l00006CED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CED:
	branch Test(NE,Z) l00006CF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CF1:
	branch Test(NE,Z) l00006CF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CF5:
	branch Test(NE,Z) l00006CF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CF9:
	branch Test(NE,Z) l00006CFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CFD:
	branch Test(NE,Z) l00006D01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006CFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D01:
	branch Test(NE,Z) l00006D05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D05:
	branch Test(NE,Z) l00006D09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D09:
	branch Test(NE,Z) l00006D0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D0D:
	branch Test(NE,Z) l00006D11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D11:
	branch Test(NE,Z) l00006D15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D15:
	branch Test(NE,Z) l00006D19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D19:
	branch Test(NE,Z) l00006D1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D1D:
	branch Test(NE,Z) l00006D21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D21:
	branch Test(NE,Z) l00006D25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D25:
	branch Test(NE,Z) l00006D29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D29:
	branch Test(NE,Z) l00006D2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D2D:
	branch Test(NE,Z) l00006D31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D31:
	branch Test(NE,Z) l00006D35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D35:
	branch Test(NE,Z) l00006D39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D39:
	branch Test(NE,Z) l00006D3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D3D:
	branch Test(NE,Z) l00006D41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D41:
	branch Test(NE,Z) l00006D45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D45:
	branch Test(NE,Z) l00006D49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D49:
	branch Test(NE,Z) l00006D4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D4D:
	branch Test(NE,Z) l00006D51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D51:
	branch Test(NE,Z) l00006D55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D55:
	branch Test(NE,Z) l00006D59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D59:
	branch Test(NE,Z) l00006D5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D5D:
	branch Test(NE,Z) l00006D61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D61:
	branch Test(NE,Z) l00006D65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D65:
	branch Test(NE,Z) l00006D69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D69:
	branch Test(NE,Z) l00006D6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D6D:
	branch Test(NE,Z) l00006D71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D71:
	branch Test(NE,Z) l00006D75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D75:
	branch Test(NE,Z) l00006D79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D79:
	branch Test(NE,Z) l00006D7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D7D:
	branch Test(NE,Z) l00006D81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D81:
	branch Test(NE,Z) l00006D85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D85:
	branch Test(NE,Z) l00006D89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D89:
	branch Test(NE,Z) l00006D8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D8D:
	branch Test(NE,Z) l00006D91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D91:
	branch Test(NE,Z) l00006D95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D95:
	branch Test(NE,Z) l00006D99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D99:
	branch Test(NE,Z) l00006D9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D9D:
	branch Test(NE,Z) l00006DA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006D9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DA1:
	branch Test(NE,Z) l00006DA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DA5:
	branch Test(NE,Z) l00006DA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DA9:
	branch Test(NE,Z) l00006DAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DAD:
	branch Test(NE,Z) l00006DB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DB1:
	branch Test(NE,Z) l00006DB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DB5:
	branch Test(NE,Z) l00006DB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DB9:
	branch Test(NE,Z) l00006DBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DBD:
	branch Test(NE,Z) l00006DC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DC1:
	branch Test(NE,Z) l00006DC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DC5:
	branch Test(NE,Z) l00006DC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DC9:
	branch Test(NE,Z) l00006DCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DCD:
	branch Test(NE,Z) l00006DD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DD1:
	branch Test(NE,Z) l00006DD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DD5:
	branch Test(NE,Z) l00006DD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DD9:
	branch Test(NE,Z) l00006DDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DDD:
	branch Test(NE,Z) l00006DE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DE1:
	branch Test(NE,Z) l00006DE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DE5:
	branch Test(NE,Z) l00006DE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DE9:
	branch Test(NE,Z) l00006DED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DED:
	branch Test(NE,Z) l00006DF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DF1:
	branch Test(NE,Z) l00006DF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DF5:
	branch Test(NE,Z) l00006DF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DF9:
	branch Test(NE,Z) l00006DFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DFD:
	branch Test(NE,Z) l00006E01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006DFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E01:
	branch Test(NE,Z) l00006E05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E05:
	branch Test(NE,Z) l00006E09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E09:
	branch Test(NE,Z) l00006E0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E0D:
	branch Test(NE,Z) l00006E11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E11:
	branch Test(NE,Z) l00006E15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E15:
	branch Test(NE,Z) l00006E19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E19:
	branch Test(NE,Z) l00006E1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E1D:
	branch Test(NE,Z) l00006E21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E21:
	branch Test(NE,Z) l00006E25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E25:
	branch Test(NE,Z) l00006E29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E29:
	branch Test(NE,Z) l00006E2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E2D:
	branch Test(NE,Z) l00006E31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E31:
	branch Test(NE,Z) l00006E35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E35:
	branch Test(NE,Z) l00006E39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E39:
	branch Test(NE,Z) l00006E3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E3D:
	branch Test(NE,Z) l00006E41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E41:
	branch Test(NE,Z) l00006E45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E45:
	branch Test(NE,Z) l00006E49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E49:
	branch Test(NE,Z) l00006E4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E4D:
	branch Test(NE,Z) l00006E51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E51:
	branch Test(NE,Z) l00006E55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E55:
	branch Test(NE,Z) l00006E59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E59:
	branch Test(NE,Z) l00006E5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E5D:
	branch Test(NE,Z) l00006E61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E61:
	branch Test(NE,Z) l00006E65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E65:
	branch Test(NE,Z) l00006E69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E69:
	branch Test(NE,Z) l00006E6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E6D:
	branch Test(NE,Z) l00006E71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E71:
	branch Test(NE,Z) l00006E75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E75:
	branch Test(NE,Z) l00006E79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E79:
	branch Test(NE,Z) l00006E7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E7D:
	branch Test(NE,Z) l00006E81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E81:
	branch Test(NE,Z) l00006E85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E85:
	branch Test(NE,Z) l00006E89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E89:
	branch Test(NE,Z) l00006E8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E8D:
	branch Test(NE,Z) l00006E91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E91:
	branch Test(NE,Z) l00006E95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E95:
	branch Test(NE,Z) l00006E99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E99:
	branch Test(NE,Z) l00006E9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E9D:
	branch Test(NE,Z) l00006EA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006E9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EA1:
	branch Test(NE,Z) l00006EA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EA5:
	branch Test(NE,Z) l00006EA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EA9:
	branch Test(NE,Z) l00006EAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EAD:
	branch Test(NE,Z) l00006EB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EB1:
	branch Test(NE,Z) l00006EB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EB5:
	branch Test(NE,Z) l00006EB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EB9:
	branch Test(NE,Z) l00006EBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EBD:
	branch Test(NE,Z) l00006EC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EC1:
	branch Test(NE,Z) l00006EC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EC5:
	branch Test(NE,Z) l00006EC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EC9:
	branch Test(NE,Z) l00006ECD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006ECD:
	branch Test(NE,Z) l00006ED1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006ECD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006ED1:
	branch Test(NE,Z) l00006ED5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006ED1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006ED5:
	branch Test(NE,Z) l00006ED9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006ED5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006ED9:
	branch Test(NE,Z) l00006EDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006ED9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EDD:
	branch Test(NE,Z) l00006EE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EE1:
	branch Test(NE,Z) l00006EE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EE5:
	branch Test(NE,Z) l00006EE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EE9:
	branch Test(NE,Z) l00006EED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EED:
	branch Test(NE,Z) l00006EF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EF1:
	branch Test(NE,Z) l00006EF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EF5:
	branch Test(NE,Z) l00006EF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EF9:
	branch Test(NE,Z) l00006EFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EFD:
	branch Test(NE,Z) l00006F01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006EFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F01:
	branch Test(NE,Z) l00006F05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F05:
	branch Test(NE,Z) l00006F09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F09:
	branch Test(NE,Z) l00006F0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F0D:
	branch Test(NE,Z) l00006F11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F11:
	branch Test(NE,Z) l00006F15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F15:
	branch Test(NE,Z) l00006F19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F19:
	branch Test(NE,Z) l00006F1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F1D:
	branch Test(NE,Z) l00006F21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F21:
	branch Test(NE,Z) l00006F25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F25:
	branch Test(NE,Z) l00006F29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F29:
	branch Test(NE,Z) l00006F2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F2D:
	branch Test(NE,Z) l00006F31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F31:
	branch Test(NE,Z) l00006F35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F35:
	branch Test(NE,Z) l00006F39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F39:
	branch Test(NE,Z) l00006F3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F3D:
	branch Test(NE,Z) l00006F41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F41:
	branch Test(NE,Z) l00006F45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F45:
	branch Test(NE,Z) l00006F49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F49:
	branch Test(NE,Z) l00006F4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F4D:
	branch Test(NE,Z) l00006F51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F51:
	branch Test(NE,Z) l00006F55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F55:
	branch Test(NE,Z) l00006F59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F59:
	branch Test(NE,Z) l00006F5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F5D:
	branch Test(NE,Z) l00006F61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F61:
	branch Test(NE,Z) l00006F65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F65:
	branch Test(NE,Z) l00006F69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F69:
	branch Test(NE,Z) l00006F6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F6D:
	branch Test(NE,Z) l00006F71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F71:
	branch Test(NE,Z) l00006F75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F75:
	branch Test(NE,Z) l00006F79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F79:
	branch Test(NE,Z) l00006F7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F7D:
	branch Test(NE,Z) l00006F81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F81:
	branch Test(NE,Z) l00006F85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F85:
	branch Test(NE,Z) l00006F89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F89:
	branch Test(NE,Z) l00006F8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F8D:
	branch Test(NE,Z) l00006F91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F91:
	branch Test(NE,Z) l00006F95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F95:
	branch Test(NE,Z) l00006F99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F99:
	branch Test(NE,Z) l00006F9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F9D:
	branch Test(NE,Z) l00006FA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006F9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FA1:
	branch Test(NE,Z) l00006FA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FA5:
	branch Test(NE,Z) l00006FA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FA9:
	branch Test(NE,Z) l00006FAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FAD:
	branch Test(NE,Z) l00006FB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FB1:
	branch Test(NE,Z) l00006FB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FB5:
	branch Test(NE,Z) l00006FB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FB9:
	branch Test(NE,Z) l00006FBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FBD:
	branch Test(NE,Z) l00006FC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FC1:
	branch Test(NE,Z) l00006FC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FC5:
	branch Test(NE,Z) l00006FC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FC9:
	branch Test(NE,Z) l00006FCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FCD:
	branch Test(NE,Z) l00006FD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FD1:
	branch Test(NE,Z) l00006FD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FD5:
	branch Test(NE,Z) l00006FD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FD9:
	branch Test(NE,Z) l00006FDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FDD:
	branch Test(NE,Z) l00006FE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FE1:
	branch Test(NE,Z) l00006FE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FE5:
	branch Test(NE,Z) l00006FE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FE9:
	branch Test(NE,Z) l00006FED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FED:
	branch Test(NE,Z) l00006FF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FF1:
	branch Test(NE,Z) l00006FF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FF5:
	branch Test(NE,Z) l00006FF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FF9:
	branch Test(NE,Z) l00006FFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FFD:
	branch Test(NE,Z) l00007001
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00006FFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007001:
	branch Test(NE,Z) l00007005
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007001_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007005:
	branch Test(NE,Z) l00007009
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007005_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007009:
	branch Test(NE,Z) l0000700D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007009_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000700D:
	branch Test(NE,Z) l00007011
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000700D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007011:
	branch Test(NE,Z) l00007015
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007011_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007015:
	branch Test(NE,Z) l00007019
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007015_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007019:
	branch Test(NE,Z) l0000701D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007019_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000701D:
	branch Test(NE,Z) l00007021
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000701D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007021:
	branch Test(NE,Z) l00007025
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007021_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007025:
	branch Test(NE,Z) l00007029
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007025_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007029:
	branch Test(NE,Z) l0000702D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007029_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000702D:
	branch Test(NE,Z) l00007031
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000702D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007031:
	branch Test(NE,Z) l00007035
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007031_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007035:
	branch Test(NE,Z) l00007039
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007035_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007039:
	branch Test(NE,Z) l0000703D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007039_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000703D:
	branch Test(NE,Z) l00007041
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000703D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007041:
	branch Test(NE,Z) l00007045
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007041_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007045:
	branch Test(NE,Z) l00007049
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007045_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007049:
	branch Test(NE,Z) l0000704D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007049_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000704D:
	branch Test(NE,Z) l00007051
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000704D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007051:
	branch Test(NE,Z) l00007055
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007051_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007055:
	branch Test(NE,Z) l00007059
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007055_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007059:
	branch Test(NE,Z) l0000705D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007059_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000705D:
	branch Test(NE,Z) l00007061
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000705D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007061:
	branch Test(NE,Z) l00007065
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007061_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007065:
	branch Test(NE,Z) l00007069
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007065_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007069:
	branch Test(NE,Z) l0000706D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007069_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000706D:
	branch Test(NE,Z) l00007071
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000706D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007071:
	branch Test(NE,Z) l00007075
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007071_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007075:
	branch Test(NE,Z) l00007079
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007075_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007079:
	branch Test(NE,Z) l0000707D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007079_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000707D:
	branch Test(NE,Z) l00007081
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000707D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007081:
	branch Test(NE,Z) l00007085
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007081_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007085:
	branch Test(NE,Z) l00007089
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007085_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007089:
	branch Test(NE,Z) l0000708D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007089_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000708D:
	branch Test(NE,Z) l00007091
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000708D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007091:
	branch Test(NE,Z) l00007095
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007091_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007095:
	branch Test(NE,Z) l00007099
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007095_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007099:
	branch Test(NE,Z) l0000709D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007099_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000709D:
	branch Test(NE,Z) l000070A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000709D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070A1:
	branch Test(NE,Z) l000070A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070A5:
	branch Test(NE,Z) l000070A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070A9:
	branch Test(NE,Z) l000070AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070AD:
	branch Test(NE,Z) l000070B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070B1:
	branch Test(NE,Z) l000070B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070B5:
	branch Test(NE,Z) l000070B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070B9:
	branch Test(NE,Z) l000070BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070BD:
	branch Test(NE,Z) l000070C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070C1:
	branch Test(NE,Z) l000070C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070C5:
	branch Test(NE,Z) l000070C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070C9:
	branch Test(NE,Z) l000070CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070CD:
	branch Test(NE,Z) l000070D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070D1:
	branch Test(NE,Z) l000070D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070D5:
	branch Test(NE,Z) l000070D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070D9:
	branch Test(NE,Z) l000070DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070DD:
	branch Test(NE,Z) l000070E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070E1:
	branch Test(NE,Z) l000070E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070E5:
	branch Test(NE,Z) l000070E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070E9:
	branch Test(NE,Z) l000070ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070ED:
	branch Test(NE,Z) l000070F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070F1:
	branch Test(NE,Z) l000070F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070F5:
	branch Test(NE,Z) l000070F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070F9:
	branch Test(NE,Z) l000070FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070FD:
	branch Test(NE,Z) l00007101
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000070FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007101:
	branch Test(NE,Z) l00007105
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007101_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007105:
	branch Test(NE,Z) l00007109
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007105_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007109:
	branch Test(NE,Z) l0000710D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007109_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000710D:
	branch Test(NE,Z) l00007111
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000710D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007111:
	branch Test(NE,Z) l00007115
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007111_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007115:
	branch Test(NE,Z) l00007119
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007115_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007119:
	branch Test(NE,Z) l0000711D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007119_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000711D:
	branch Test(NE,Z) l00007121
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000711D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007121:
	branch Test(NE,Z) l00007125
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007121_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007125:
	branch Test(NE,Z) l00007129
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007125_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007129:
	branch Test(NE,Z) l0000712D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007129_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000712D:
	branch Test(NE,Z) l00007131
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000712D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007131:
	branch Test(NE,Z) l00007135
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007131_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007135:
	branch Test(NE,Z) l00007139
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007135_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007139:
	branch Test(NE,Z) l0000713D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007139_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000713D:
	branch Test(NE,Z) l00007141
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000713D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007141:
	branch Test(NE,Z) l00007145
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007141_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007145:
	branch Test(NE,Z) l00007149
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007145_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007149:
	branch Test(NE,Z) l0000714D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007149_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000714D:
	branch Test(NE,Z) l00007151
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000714D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007151:
	branch Test(NE,Z) l00007155
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007151_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007155:
	branch Test(NE,Z) l00007159
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007155_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007159:
	branch Test(NE,Z) l0000715D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007159_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000715D:
	branch Test(NE,Z) l00007161
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000715D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007161:
	branch Test(NE,Z) l00007165
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007161_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007165:
	branch Test(NE,Z) l00007169
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007165_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007169:
	branch Test(NE,Z) l0000716D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007169_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000716D:
	branch Test(NE,Z) l00007171
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000716D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007171:
	branch Test(NE,Z) l00007175
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007171_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007175:
	branch Test(NE,Z) l00007179
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007175_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007179:
	branch Test(NE,Z) l0000717D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007179_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000717D:
	branch Test(NE,Z) l00007181
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000717D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007181:
	branch Test(NE,Z) l00007185
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007181_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007185:
	branch Test(NE,Z) l00007189
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007185_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007189:
	branch Test(NE,Z) l0000718D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007189_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000718D:
	branch Test(NE,Z) l00007191
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000718D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007191:
	branch Test(NE,Z) l00007195
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007191_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007195:
	branch Test(NE,Z) l00007199
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007195_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007199:
	branch Test(NE,Z) l0000719D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007199_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000719D:
	branch Test(NE,Z) l000071A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000719D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071A1:
	branch Test(NE,Z) l000071A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071A5:
	branch Test(NE,Z) l000071A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071A9:
	branch Test(NE,Z) l000071AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071AD:
	branch Test(NE,Z) l000071B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071B1:
	branch Test(NE,Z) l000071B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071B5:
	branch Test(NE,Z) l000071B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071B9:
	branch Test(NE,Z) l000071BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071BD:
	branch Test(NE,Z) l000071C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071C1:
	branch Test(NE,Z) l000071C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071C5:
	branch Test(NE,Z) l000071C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071C9:
	branch Test(NE,Z) l000071CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071CD:
	branch Test(NE,Z) l000071D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071D1:
	branch Test(NE,Z) l000071D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071D5:
	branch Test(NE,Z) l000071D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071D9:
	branch Test(NE,Z) l000071DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071DD:
	branch Test(NE,Z) l000071E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071E1:
	branch Test(NE,Z) l000071E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071E5:
	branch Test(NE,Z) l000071E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071E9:
	branch Test(NE,Z) l000071ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071ED:
	branch Test(NE,Z) l000071F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071F1:
	branch Test(NE,Z) l000071F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071F5:
	branch Test(NE,Z) l000071F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071F9:
	branch Test(NE,Z) l000071FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071FD:
	branch Test(NE,Z) l00007201
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000071FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007201:
	branch Test(NE,Z) l00007205
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007201_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007205:
	branch Test(NE,Z) l00007209
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007205_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007209:
	branch Test(NE,Z) l0000720D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007209_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000720D:
	branch Test(NE,Z) l00007211
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000720D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007211:
	branch Test(NE,Z) l00007215
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007211_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007215:
	branch Test(NE,Z) l00007219
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007215_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007219:
	branch Test(NE,Z) l0000721D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007219_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000721D:
	branch Test(NE,Z) l00007221
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000721D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007221:
	branch Test(NE,Z) l00007225
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007221_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007225:
	branch Test(NE,Z) l00007229
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007225_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007229:
	branch Test(NE,Z) l0000722D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007229_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000722D:
	branch Test(NE,Z) l00007231
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000722D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007231:
	branch Test(NE,Z) l00007235
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007231_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007235:
	branch Test(NE,Z) l00007239
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007235_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007239:
	branch Test(NE,Z) l0000723D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007239_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000723D:
	branch Test(NE,Z) l00007241
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000723D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007241:
	branch Test(NE,Z) l00007245
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007241_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007245:
	branch Test(NE,Z) l00007249
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007245_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007249:
	branch Test(NE,Z) l0000724D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007249_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000724D:
	branch Test(NE,Z) l00007251
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000724D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007251:
	branch Test(NE,Z) l00007255
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007251_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007255:
	branch Test(NE,Z) l00007259
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007255_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007259:
	branch Test(NE,Z) l0000725D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007259_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000725D:
	branch Test(NE,Z) l00007261
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000725D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007261:
	branch Test(NE,Z) l00007265
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007261_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007265:
	branch Test(NE,Z) l00007269
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007265_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007269:
	branch Test(NE,Z) l0000726D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007269_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000726D:
	branch Test(NE,Z) l00007271
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000726D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007271:
	branch Test(NE,Z) l00007275
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007271_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007275:
	branch Test(NE,Z) l00007279
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007275_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007279:
	branch Test(NE,Z) l0000727D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007279_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000727D:
	branch Test(NE,Z) l00007281
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000727D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007281:
	branch Test(NE,Z) l00007285
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007281_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007285:
	branch Test(NE,Z) l00007289
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007285_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007289:
	branch Test(NE,Z) l0000728D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007289_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000728D:
	branch Test(NE,Z) l00007291
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000728D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007291:
	branch Test(NE,Z) l00007295
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007291_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007295:
	branch Test(NE,Z) l00007299
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007295_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007299:
	branch Test(NE,Z) l0000729D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007299_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000729D:
	branch Test(NE,Z) l000072A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000729D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072A1:
	branch Test(NE,Z) l000072A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072A5:
	branch Test(NE,Z) l000072A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072A9:
	branch Test(NE,Z) l000072AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072AD:
	branch Test(NE,Z) l000072B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072B1:
	branch Test(NE,Z) l000072B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072B5:
	branch Test(NE,Z) l000072B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072B9:
	branch Test(NE,Z) l000072BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072BD:
	branch Test(NE,Z) l000072C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072C1:
	branch Test(NE,Z) l000072C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072C5:
	branch Test(NE,Z) l000072C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072C9:
	branch Test(NE,Z) l000072CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072CD:
	branch Test(NE,Z) l000072D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072D1:
	branch Test(NE,Z) l000072D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072D5:
	branch Test(NE,Z) l000072D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072D9:
	branch Test(NE,Z) l000072DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072DD:
	branch Test(NE,Z) l000072E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072E1:
	branch Test(NE,Z) l000072E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072E5:
	branch Test(NE,Z) l000072E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072E9:
	branch Test(NE,Z) l000072ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072ED:
	branch Test(NE,Z) l000072F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072F1:
	branch Test(NE,Z) l000072F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072F5:
	branch Test(NE,Z) l000072F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072F9:
	branch Test(NE,Z) l000072FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072FD:
	branch Test(NE,Z) l00007301
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000072FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007301:
	branch Test(NE,Z) l00007305
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007301_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007305:
	branch Test(NE,Z) l00007309
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007305_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007309:
	branch Test(NE,Z) l0000730D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007309_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000730D:
	branch Test(NE,Z) l00007311
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000730D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007311:
	branch Test(NE,Z) l00007315
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007311_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007315:
	branch Test(NE,Z) l00007319
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007315_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007319:
	branch Test(NE,Z) l0000731D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007319_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000731D:
	branch Test(NE,Z) l00007321
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000731D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007321:
	branch Test(NE,Z) l00007325
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007321_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007325:
	branch Test(NE,Z) l00007329
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007325_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007329:
	branch Test(NE,Z) l0000732D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007329_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000732D:
	branch Test(NE,Z) l00007331
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000732D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007331:
	branch Test(NE,Z) l00007335
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007331_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007335:
	branch Test(NE,Z) l00007339
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007335_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007339:
	branch Test(NE,Z) l0000733D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007339_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000733D:
	branch Test(NE,Z) l00007341
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000733D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007341:
	branch Test(NE,Z) l00007345
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007341_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007345:
	branch Test(NE,Z) l00007349
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007345_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007349:
	branch Test(NE,Z) l0000734D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007349_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000734D:
	branch Test(NE,Z) l00007351
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000734D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007351:
	branch Test(NE,Z) l00007355
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007351_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007355:
	branch Test(NE,Z) l00007359
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007355_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007359:
	branch Test(NE,Z) l0000735D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007359_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000735D:
	branch Test(NE,Z) l00007361
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000735D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007361:
	branch Test(NE,Z) l00007365
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007361_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007365:
	branch Test(NE,Z) l00007369
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007365_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007369:
	branch Test(NE,Z) l0000736D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007369_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000736D:
	branch Test(NE,Z) l00007371
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000736D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007371:
	branch Test(NE,Z) l00007375
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007371_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007375:
	branch Test(NE,Z) l00007379
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007375_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007379:
	branch Test(NE,Z) l0000737D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007379_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000737D:
	branch Test(NE,Z) l00007381
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000737D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007381:
	branch Test(NE,Z) l00007385
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007381_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007385:
	branch Test(NE,Z) l00007389
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007385_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007389:
	branch Test(NE,Z) l0000738D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007389_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000738D:
	branch Test(NE,Z) l00007391
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000738D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007391:
	branch Test(NE,Z) l00007395
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007391_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007395:
	branch Test(NE,Z) l00007399
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007395_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007399:
	branch Test(NE,Z) l0000739D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007399_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000739D:
	branch Test(NE,Z) l000073A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000739D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073A1:
	branch Test(NE,Z) l000073A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073A5:
	branch Test(NE,Z) l000073A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073A9:
	branch Test(NE,Z) l000073AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073AD:
	branch Test(NE,Z) l000073B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073B1:
	branch Test(NE,Z) l000073B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073B5:
	branch Test(NE,Z) l000073B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073B9:
	branch Test(NE,Z) l000073BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073BD:
	branch Test(NE,Z) l000073C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073C1:
	branch Test(NE,Z) l000073C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073C5:
	branch Test(NE,Z) l000073C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073C9:
	branch Test(NE,Z) l000073CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073CD:
	branch Test(NE,Z) l000073D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073D1:
	branch Test(NE,Z) l000073D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073D5:
	branch Test(NE,Z) l000073D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073D9:
	branch Test(NE,Z) l000073DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073DD:
	branch Test(NE,Z) l000073E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073E1:
	branch Test(NE,Z) l000073E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073E5:
	branch Test(NE,Z) l000073E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073E9:
	branch Test(NE,Z) l000073ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073ED:
	branch Test(NE,Z) l000073F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073F1:
	branch Test(NE,Z) l000073F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073F5:
	branch Test(NE,Z) l000073F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073F9:
	branch Test(NE,Z) l000073FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073FD:
	branch Test(NE,Z) l00007401
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000073FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007401:
	branch Test(NE,Z) l00007405
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007401_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007405:
	branch Test(NE,Z) l00007409
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007405_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007409:
	branch Test(NE,Z) l0000740D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007409_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000740D:
	branch Test(NE,Z) l00007411
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000740D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007411:
	branch Test(NE,Z) l00007415
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007411_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007415:
	branch Test(NE,Z) l00007419
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007415_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007419:
	branch Test(NE,Z) l0000741D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007419_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000741D:
	branch Test(NE,Z) l00007421
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000741D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007421:
	branch Test(NE,Z) l00007425
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007421_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007425:
	branch Test(NE,Z) l00007429
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007425_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007429:
	branch Test(NE,Z) l0000742D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007429_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000742D:
	branch Test(NE,Z) l00007431
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000742D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007431:
	branch Test(NE,Z) l00007435
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007431_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007435:
	branch Test(NE,Z) l00007439
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007435_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007439:
	branch Test(NE,Z) l0000743D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007439_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000743D:
	branch Test(NE,Z) l00007441
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000743D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007441:
	branch Test(NE,Z) l00007445
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007441_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007445:
	branch Test(NE,Z) l00007449
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007445_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007449:
	branch Test(NE,Z) l0000744D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007449_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000744D:
	branch Test(NE,Z) l00007451
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000744D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007451:
	branch Test(NE,Z) l00007455
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007451_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007455:
	branch Test(NE,Z) l00007459
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007455_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007459:
	branch Test(NE,Z) l0000745D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007459_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000745D:
	branch Test(NE,Z) l00007461
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000745D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007461:
	branch Test(NE,Z) l00007465
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007461_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007465:
	branch Test(NE,Z) l00007469
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007465_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007469:
	branch Test(NE,Z) l0000746D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007469_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000746D:
	branch Test(NE,Z) l00007471
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000746D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007471:
	branch Test(NE,Z) l00007475
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007471_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007475:
	branch Test(NE,Z) l00007479
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007475_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007479:
	branch Test(NE,Z) l0000747D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007479_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000747D:
	branch Test(NE,Z) l00007481
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000747D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007481:
	branch Test(NE,Z) l00007485
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007481_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007485:
	branch Test(NE,Z) l00007489
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007485_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007489:
	branch Test(NE,Z) l0000748D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007489_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000748D:
	branch Test(NE,Z) l00007491
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000748D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007491:
	branch Test(NE,Z) l00007495
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007491_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007495:
	branch Test(NE,Z) l00007499
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007495_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007499:
	branch Test(NE,Z) l0000749D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007499_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000749D:
	branch Test(NE,Z) l000074A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000749D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074A1:
	branch Test(NE,Z) l000074A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074A5:
	branch Test(NE,Z) l000074A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074A9:
	branch Test(NE,Z) l000074AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074AD:
	branch Test(NE,Z) l000074B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074B1:
	branch Test(NE,Z) l000074B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074B5:
	branch Test(NE,Z) l000074B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074B9:
	branch Test(NE,Z) l000074BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074BD:
	branch Test(NE,Z) l000074C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074C1:
	branch Test(NE,Z) l000074C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074C5:
	branch Test(NE,Z) l000074C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074C9:
	branch Test(NE,Z) l000074CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074CD:
	branch Test(NE,Z) l000074D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074D1:
	branch Test(NE,Z) l000074D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074D5:
	branch Test(NE,Z) l000074D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074D9:
	branch Test(NE,Z) l000074DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074DD:
	branch Test(NE,Z) l000074E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074E1:
	branch Test(NE,Z) l000074E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074E5:
	branch Test(NE,Z) l000074E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074E9:
	branch Test(NE,Z) l000074ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074ED:
	branch Test(NE,Z) l000074F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074F1:
	branch Test(NE,Z) l000074F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074F5:
	branch Test(NE,Z) l000074F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074F9:
	branch Test(NE,Z) l000074FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074FD:
	branch Test(NE,Z) l00007501
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000074FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007501:
	branch Test(NE,Z) l00007505
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007501_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007505:
	branch Test(NE,Z) l00007509
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007505_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007509:
	branch Test(NE,Z) l0000750D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007509_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000750D:
	branch Test(NE,Z) l00007511
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000750D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007511:
	branch Test(NE,Z) l00007515
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007511_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007515:
	branch Test(NE,Z) l00007519
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007515_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007519:
	branch Test(NE,Z) l0000751D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007519_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000751D:
	branch Test(NE,Z) l00007521
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000751D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007521:
	branch Test(NE,Z) l00007525
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007521_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007525:
	branch Test(NE,Z) l00007529
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007525_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007529:
	branch Test(NE,Z) l0000752D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007529_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000752D:
	branch Test(NE,Z) l00007531
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000752D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007531:
	branch Test(NE,Z) l00007535
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007531_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007535:
	branch Test(NE,Z) l00007539
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007535_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007539:
	branch Test(NE,Z) l0000753D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007539_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000753D:
	branch Test(NE,Z) l00007541
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000753D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007541:
	branch Test(NE,Z) l00007545
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007541_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007545:
	branch Test(NE,Z) l00007549
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007545_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007549:
	branch Test(NE,Z) l0000754D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007549_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000754D:
	branch Test(NE,Z) l00007551
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000754D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007551:
	branch Test(NE,Z) l00007555
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007551_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007555:
	branch Test(NE,Z) l00007559
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007555_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007559:
	branch Test(NE,Z) l0000755D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007559_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000755D:
	branch Test(NE,Z) l00007561
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000755D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007561:
	branch Test(NE,Z) l00007565
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007561_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007565:
	branch Test(NE,Z) l00007569
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007565_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007569:
	branch Test(NE,Z) l0000756D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007569_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000756D:
	branch Test(NE,Z) l00007571
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000756D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007571:
	branch Test(NE,Z) l00007575
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007571_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007575:
	branch Test(NE,Z) l00007579
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007575_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007579:
	branch Test(NE,Z) l0000757D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007579_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000757D:
	branch Test(NE,Z) l00007581
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000757D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007581:
	branch Test(NE,Z) l00007585
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007581_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007585:
	branch Test(NE,Z) l00007589
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007585_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007589:
	branch Test(NE,Z) l0000758D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007589_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000758D:
	branch Test(NE,Z) l00007591
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000758D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007591:
	branch Test(NE,Z) l00007595
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007591_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007595:
	branch Test(NE,Z) l00007599
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007595_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007599:
	branch Test(NE,Z) l0000759D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007599_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000759D:
	branch Test(NE,Z) l000075A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000759D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075A1:
	branch Test(NE,Z) l000075A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075A5:
	branch Test(NE,Z) l000075A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075A9:
	branch Test(NE,Z) l000075AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075AD:
	branch Test(NE,Z) l000075B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075B1:
	branch Test(NE,Z) l000075B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075B5:
	branch Test(NE,Z) l000075B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075B9:
	branch Test(NE,Z) l000075BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075BD:
	branch Test(NE,Z) l000075C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075C1:
	branch Test(NE,Z) l000075C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075C5:
	branch Test(NE,Z) l000075C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075C9:
	branch Test(NE,Z) l000075CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075CD:
	branch Test(NE,Z) l000075D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075D1:
	branch Test(NE,Z) l000075D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075D5:
	branch Test(NE,Z) l000075D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075D9:
	branch Test(NE,Z) l000075DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075DD:
	branch Test(NE,Z) l000075E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075E1:
	branch Test(NE,Z) l000075E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075E5:
	branch Test(NE,Z) l000075E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075E9:
	branch Test(NE,Z) l000075ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075ED:
	branch Test(NE,Z) l000075F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075F1:
	branch Test(NE,Z) l000075F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075F5:
	branch Test(NE,Z) l000075F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075F9:
	branch Test(NE,Z) l000075FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075FD:
	branch Test(NE,Z) l00007601
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000075FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007601:
	branch Test(NE,Z) l00007605
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007601_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007605:
	branch Test(NE,Z) l00007609
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007605_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007609:
	branch Test(NE,Z) l0000760D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007609_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000760D:
	branch Test(NE,Z) l00007611
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000760D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007611:
	branch Test(NE,Z) l00007615
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007611_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007615:
	branch Test(NE,Z) l00007619
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007615_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007619:
	branch Test(NE,Z) l0000761D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007619_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000761D:
	branch Test(NE,Z) l00007621
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000761D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007621:
	branch Test(NE,Z) l00007625
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007621_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007625:
	branch Test(NE,Z) l00007629
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007625_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007629:
	branch Test(NE,Z) l0000762D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007629_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000762D:
	branch Test(NE,Z) l00007631
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000762D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007631:
	branch Test(NE,Z) l00007635
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007631_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007635:
	branch Test(NE,Z) l00007639
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007635_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007639:
	branch Test(NE,Z) l0000763D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007639_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000763D:
	branch Test(NE,Z) l00007641
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000763D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007641:
	branch Test(NE,Z) l00007645
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007641_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007645:
	branch Test(NE,Z) l00007649
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007645_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007649:
	branch Test(NE,Z) l0000764D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007649_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000764D:
	branch Test(NE,Z) l00007651
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000764D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007651:
	branch Test(NE,Z) l00007655
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007651_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007655:
	branch Test(NE,Z) l00007659
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007655_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007659:
	branch Test(NE,Z) l0000765D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007659_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000765D:
	branch Test(NE,Z) l00007661
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000765D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007661:
	branch Test(NE,Z) l00007665
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007661_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007665:
	branch Test(NE,Z) l00007669
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007665_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007669:
	branch Test(NE,Z) l0000766D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007669_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000766D:
	branch Test(NE,Z) l00007671
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000766D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007671:
	branch Test(NE,Z) l00007675
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007671_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007675:
	branch Test(NE,Z) l00007679
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007675_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007679:
	branch Test(NE,Z) l0000767D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007679_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000767D:
	branch Test(NE,Z) l00007681
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000767D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007681:
	branch Test(NE,Z) l00007685
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007681_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007685:
	branch Test(NE,Z) l00007689
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007685_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007689:
	branch Test(NE,Z) l0000768D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007689_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000768D:
	branch Test(NE,Z) l00007691
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000768D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007691:
	branch Test(NE,Z) l00007695
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007691_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007695:
	branch Test(NE,Z) l00007699
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007695_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007699:
	branch Test(NE,Z) l0000769D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007699_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000769D:
	branch Test(NE,Z) l000076A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000769D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076A1:
	branch Test(NE,Z) l000076A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076A5:
	branch Test(NE,Z) l000076A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076A9:
	branch Test(NE,Z) l000076AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076AD:
	branch Test(NE,Z) l000076B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076B1:
	branch Test(NE,Z) l000076B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076B5:
	branch Test(NE,Z) l000076B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076B9:
	branch Test(NE,Z) l000076BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076BD:
	branch Test(NE,Z) l000076C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076C1:
	branch Test(NE,Z) l000076C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076C5:
	branch Test(NE,Z) l000076C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076C9:
	branch Test(NE,Z) l000076CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076CD:
	branch Test(NE,Z) l000076D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076D1:
	branch Test(NE,Z) l000076D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076D5:
	branch Test(NE,Z) l000076D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076D9:
	branch Test(NE,Z) l000076DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076DD:
	branch Test(NE,Z) l000076E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076E1:
	branch Test(NE,Z) l000076E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076E5:
	branch Test(NE,Z) l000076E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076E9:
	branch Test(NE,Z) l000076ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076ED:
	branch Test(NE,Z) l000076F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076F1:
	branch Test(NE,Z) l000076F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076F5:
	branch Test(NE,Z) l000076F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076F9:
	branch Test(NE,Z) l000076FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076FD:
	branch Test(NE,Z) l00007701
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000076FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007701:
	branch Test(NE,Z) l00007705
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007701_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007705:
	branch Test(NE,Z) l00007709
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007705_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007709:
	branch Test(NE,Z) l0000770D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007709_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000770D:
	branch Test(NE,Z) l00007711
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000770D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007711:
	branch Test(NE,Z) l00007715
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007711_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007715:
	branch Test(NE,Z) l00007719
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007715_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007719:
	branch Test(NE,Z) l0000771D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007719_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000771D:
	branch Test(NE,Z) l00007721
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000771D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007721:
	branch Test(NE,Z) l00007725
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007721_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007725:
	branch Test(NE,Z) l00007729
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007725_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007729:
	branch Test(NE,Z) l0000772D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007729_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000772D:
	branch Test(NE,Z) l00007731
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000772D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007731:
	branch Test(NE,Z) l00007735
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007731_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007735:
	branch Test(NE,Z) l00007739
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007735_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007739:
	branch Test(NE,Z) l0000773D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007739_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000773D:
	branch Test(NE,Z) l00007741
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000773D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007741:
	branch Test(NE,Z) l00007745
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007741_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007745:
	branch Test(NE,Z) l00007749
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007745_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007749:
	branch Test(NE,Z) l0000774D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007749_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000774D:
	branch Test(NE,Z) l00007751
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000774D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007751:
	branch Test(NE,Z) l00007755
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007751_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007755:
	branch Test(NE,Z) l00007759
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007755_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007759:
	branch Test(NE,Z) l0000775D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007759_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000775D:
	branch Test(NE,Z) l00007761
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000775D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007761:
	branch Test(NE,Z) l00007765
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007761_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007765:
	branch Test(NE,Z) l00007769
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007765_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007769:
	branch Test(NE,Z) l0000776D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007769_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000776D:
	branch Test(NE,Z) l00007771
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000776D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007771:
	branch Test(NE,Z) l00007775
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007771_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007775:
	branch Test(NE,Z) l00007779
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007775_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007779:
	branch Test(NE,Z) l0000777D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007779_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000777D:
	branch Test(NE,Z) l00007781
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000777D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007781:
	branch Test(NE,Z) l00007785
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007781_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007785:
	branch Test(NE,Z) l00007789
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007785_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007789:
	branch Test(NE,Z) l0000778D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007789_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000778D:
	branch Test(NE,Z) l00007791
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000778D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007791:
	branch Test(NE,Z) l00007795
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007791_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007795:
	branch Test(NE,Z) l00007799
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007795_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007799:
	branch Test(NE,Z) l0000779D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007799_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000779D:
	branch Test(NE,Z) l000077A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000779D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077A1:
	branch Test(NE,Z) l000077A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077A5:
	branch Test(NE,Z) l000077A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077A9:
	branch Test(NE,Z) l000077AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077AD:
	branch Test(NE,Z) l000077B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077B1:
	branch Test(NE,Z) l000077B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077B5:
	branch Test(NE,Z) l000077B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077B9:
	branch Test(NE,Z) l000077BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077BD:
	branch Test(NE,Z) l000077C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077C1:
	branch Test(NE,Z) l000077C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077C5:
	branch Test(NE,Z) l000077C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077C9:
	branch Test(NE,Z) l000077CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077CD:
	branch Test(NE,Z) l000077D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077D1:
	branch Test(NE,Z) l000077D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077D5:
	branch Test(NE,Z) l000077D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077D9:
	branch Test(NE,Z) l000077DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077DD:
	branch Test(NE,Z) l000077E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077E1:
	branch Test(NE,Z) l000077E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077E5:
	branch Test(NE,Z) l000077E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077E9:
	branch Test(NE,Z) l000077ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077ED:
	branch Test(NE,Z) l000077F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077F1:
	branch Test(NE,Z) l000077F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077F5:
	branch Test(NE,Z) l000077F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077F9:
	branch Test(NE,Z) l000077FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077FD:
	branch Test(NE,Z) l00007801
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000077FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007801:
	branch Test(NE,Z) l00007805
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007801_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007805:
	branch Test(NE,Z) l00007809
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007805_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007809:
	branch Test(NE,Z) l0000780D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007809_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000780D:
	branch Test(NE,Z) l00007811
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000780D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007811:
	branch Test(NE,Z) l00007815
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007811_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007815:
	branch Test(NE,Z) l00007819
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007815_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007819:
	branch Test(NE,Z) l0000781D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007819_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000781D:
	branch Test(NE,Z) l00007821
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000781D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007821:
	branch Test(NE,Z) l00007825
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007821_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007825:
	branch Test(NE,Z) l00007829
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007825_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007829:
	branch Test(NE,Z) l0000782D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007829_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000782D:
	branch Test(NE,Z) l00007831
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000782D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007831:
	branch Test(NE,Z) l00007835
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007831_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007835:
	branch Test(NE,Z) l00007839
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007835_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007839:
	branch Test(NE,Z) l0000783D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007839_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000783D:
	branch Test(NE,Z) l00007841
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000783D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007841:
	branch Test(NE,Z) l00007845
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007841_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007845:
	branch Test(NE,Z) l00007849
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007845_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007849:
	branch Test(NE,Z) l0000784D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007849_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000784D:
	branch Test(NE,Z) l00007851
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000784D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007851:
	branch Test(NE,Z) l00007855
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007851_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007855:
	branch Test(NE,Z) l00007859
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007855_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007859:
	branch Test(NE,Z) l0000785D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007859_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000785D:
	branch Test(NE,Z) l00007861
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000785D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007861:
	branch Test(NE,Z) l00007865
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007861_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007865:
	branch Test(NE,Z) l00007869
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007865_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007869:
	branch Test(NE,Z) l0000786D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007869_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000786D:
	branch Test(NE,Z) l00007871
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000786D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007871:
	branch Test(NE,Z) l00007875
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007871_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007875:
	branch Test(NE,Z) l00007879
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007875_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007879:
	branch Test(NE,Z) l0000787D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007879_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000787D:
	branch Test(NE,Z) l00007881
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000787D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007881:
	branch Test(NE,Z) l00007885
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007881_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007885:
	branch Test(NE,Z) l00007889
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007885_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007889:
	branch Test(NE,Z) l0000788D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007889_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000788D:
	branch Test(NE,Z) l00007891
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000788D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007891:
	branch Test(NE,Z) l00007895
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007891_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007895:
	branch Test(NE,Z) l00007899
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007895_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007899:
	branch Test(NE,Z) l0000789D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007899_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000789D:
	branch Test(NE,Z) l000078A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000789D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078A1:
	branch Test(NE,Z) l000078A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078A5:
	branch Test(NE,Z) l000078A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078A9:
	branch Test(NE,Z) l000078AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078AD:
	branch Test(NE,Z) l000078B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078B1:
	branch Test(NE,Z) l000078B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078B5:
	branch Test(NE,Z) l000078B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078B9:
	branch Test(NE,Z) l000078BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078BD:
	branch Test(NE,Z) l000078C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078C1:
	branch Test(NE,Z) l000078C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078C5:
	branch Test(NE,Z) l000078C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078C9:
	branch Test(NE,Z) l000078CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078CD:
	branch Test(NE,Z) l000078D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078D1:
	branch Test(NE,Z) l000078D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078D5:
	branch Test(NE,Z) l000078D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078D9:
	branch Test(NE,Z) l000078DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078DD:
	branch Test(NE,Z) l000078E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078E1:
	branch Test(NE,Z) l000078E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078E5:
	branch Test(NE,Z) l000078E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078E9:
	branch Test(NE,Z) l000078ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078ED:
	branch Test(NE,Z) l000078F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078F1:
	branch Test(NE,Z) l000078F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078F5:
	branch Test(NE,Z) l000078F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078F9:
	branch Test(NE,Z) l000078FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078FD:
	branch Test(NE,Z) l00007901
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000078FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007901:
	branch Test(NE,Z) l00007905
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007901_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007905:
	branch Test(NE,Z) l00007909
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007905_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007909:
	branch Test(NE,Z) l0000790D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007909_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000790D:
	branch Test(NE,Z) l00007911
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000790D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007911:
	branch Test(NE,Z) l00007915
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007911_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007915:
	branch Test(NE,Z) l00007919
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007915_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007919:
	branch Test(NE,Z) l0000791D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007919_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000791D:
	branch Test(NE,Z) l00007921
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000791D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007921:
	branch Test(NE,Z) l00007925
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007921_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007925:
	branch Test(NE,Z) l00007929
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007925_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007929:
	branch Test(NE,Z) l0000792D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007929_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000792D:
	branch Test(NE,Z) l00007931
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000792D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007931:
	branch Test(NE,Z) l00007935
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007931_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007935:
	branch Test(NE,Z) l00007939
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007935_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007939:
	branch Test(NE,Z) l0000793D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007939_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000793D:
	branch Test(NE,Z) l00007941
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000793D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007941:
	branch Test(NE,Z) l00007945
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007941_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007945:
	branch Test(NE,Z) l00007949
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007945_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007949:
	branch Test(NE,Z) l0000794D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007949_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000794D:
	branch Test(NE,Z) l00007951
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000794D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007951:
	branch Test(NE,Z) l00007955
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007951_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007955:
	branch Test(NE,Z) l00007959
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007955_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007959:
	branch Test(NE,Z) l0000795D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007959_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000795D:
	branch Test(NE,Z) l00007961
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000795D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007961:
	branch Test(NE,Z) l00007965
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007961_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007965:
	branch Test(NE,Z) l00007969
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007965_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007969:
	branch Test(NE,Z) l0000796D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007969_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000796D:
	branch Test(NE,Z) l00007971
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000796D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007971:
	branch Test(NE,Z) l00007975
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007971_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007975:
	branch Test(NE,Z) l00007979
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007975_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007979:
	branch Test(NE,Z) l0000797D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007979_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000797D:
	branch Test(NE,Z) l00007981
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000797D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007981:
	branch Test(NE,Z) l00007985
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007981_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007985:
	branch Test(NE,Z) l00007989
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007985_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007989:
	branch Test(NE,Z) l0000798D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007989_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000798D:
	branch Test(NE,Z) l00007991
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000798D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007991:
	branch Test(NE,Z) l00007995
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007991_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007995:
	branch Test(NE,Z) l00007999
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007995_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007999:
	branch Test(NE,Z) l0000799D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007999_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000799D:
	branch Test(NE,Z) l000079A1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l0000799D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079A1:
	branch Test(NE,Z) l000079A5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079A1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079A5:
	branch Test(NE,Z) l000079A9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079A5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079A9:
	branch Test(NE,Z) l000079AD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079A9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079AD:
	branch Test(NE,Z) l000079B1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079AD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079B1:
	branch Test(NE,Z) l000079B5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079B1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079B5:
	branch Test(NE,Z) l000079B9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079B5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079B9:
	branch Test(NE,Z) l000079BD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079B9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079BD:
	branch Test(NE,Z) l000079C1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079BD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079C1:
	branch Test(NE,Z) l000079C5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079C1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079C5:
	branch Test(NE,Z) l000079C9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079C5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079C9:
	branch Test(NE,Z) l000079CD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079C9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079CD:
	branch Test(NE,Z) l000079D1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079CD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079D1:
	branch Test(NE,Z) l000079D5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079D1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079D5:
	branch Test(NE,Z) l000079D9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079D5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079D9:
	branch Test(NE,Z) l000079DD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079D9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079DD:
	branch Test(NE,Z) l000079E1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079DD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079E1:
	branch Test(NE,Z) l000079E5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079E1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079E5:
	branch Test(NE,Z) l000079E9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079E5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079E9:
	branch Test(NE,Z) l000079ED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079E9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079ED:
	branch Test(NE,Z) l000079F1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079ED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079F1:
	branch Test(NE,Z) l000079F5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079F1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079F5:
	branch Test(NE,Z) l000079F9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079F5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079F9:
	branch Test(NE,Z) l000079FD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079F9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079FD:
	branch Test(NE,Z) l00007A01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l000079FD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A01:
	branch Test(NE,Z) l00007A05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A05:
	branch Test(NE,Z) l00007A09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A09:
	branch Test(NE,Z) l00007A0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A0D:
	branch Test(NE,Z) l00007A11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A11:
	branch Test(NE,Z) l00007A15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A15:
	branch Test(NE,Z) l00007A19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A19:
	branch Test(NE,Z) l00007A1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A1D:
	branch Test(NE,Z) l00007A21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A21:
	branch Test(NE,Z) l00007A25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A25:
	branch Test(NE,Z) l00007A29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A29:
	branch Test(NE,Z) l00007A2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A2D:
	branch Test(NE,Z) l00007A31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A31:
	branch Test(NE,Z) l00007A35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A35:
	branch Test(NE,Z) l00007A39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A39:
	branch Test(NE,Z) l00007A3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A3D:
	branch Test(NE,Z) l00007A41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A41:
	branch Test(NE,Z) l00007A45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A45:
	branch Test(NE,Z) l00007A49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A49:
	branch Test(NE,Z) l00007A4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A4D:
	branch Test(NE,Z) l00007A51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A51:
	branch Test(NE,Z) l00007A55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A55:
	branch Test(NE,Z) l00007A59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A59:
	branch Test(NE,Z) l00007A5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A5D:
	branch Test(NE,Z) l00007A61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A61:
	branch Test(NE,Z) l00007A65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A65:
	branch Test(NE,Z) l00007A69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A69:
	branch Test(NE,Z) l00007A6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A6D:
	branch Test(NE,Z) l00007A71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A71:
	branch Test(NE,Z) l00007A75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A75:
	branch Test(NE,Z) l00007A79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A79:
	branch Test(NE,Z) l00007A7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A7D:
	branch Test(NE,Z) l00007A81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A81:
	branch Test(NE,Z) l00007A85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A85:
	branch Test(NE,Z) l00007A89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A89:
	branch Test(NE,Z) l00007A8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A8D:
	branch Test(NE,Z) l00007A91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A91:
	branch Test(NE,Z) l00007A95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A95:
	branch Test(NE,Z) l00007A99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A99:
	branch Test(NE,Z) l00007A9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A9D:
	branch Test(NE,Z) l00007AA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007A9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AA1:
	branch Test(NE,Z) l00007AA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AA5:
	branch Test(NE,Z) l00007AA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AA9:
	branch Test(NE,Z) l00007AAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AAD:
	branch Test(NE,Z) l00007AB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AB1:
	branch Test(NE,Z) l00007AB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AB5:
	branch Test(NE,Z) l00007AB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AB9:
	branch Test(NE,Z) l00007ABD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007ABD:
	branch Test(NE,Z) l00007AC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007ABD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AC1:
	branch Test(NE,Z) l00007AC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AC5:
	branch Test(NE,Z) l00007AC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AC9:
	branch Test(NE,Z) l00007ACD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007ACD:
	branch Test(NE,Z) l00007AD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007ACD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AD1:
	branch Test(NE,Z) l00007AD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AD5:
	branch Test(NE,Z) l00007AD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AD9:
	branch Test(NE,Z) l00007ADD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007ADD:
	branch Test(NE,Z) l00007AE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007ADD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AE1:
	branch Test(NE,Z) l00007AE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AE5:
	branch Test(NE,Z) l00007AE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AE9:
	branch Test(NE,Z) l00007AED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AED:
	branch Test(NE,Z) l00007AF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AF1:
	branch Test(NE,Z) l00007AF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AF5:
	branch Test(NE,Z) l00007AF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AF9:
	branch Test(NE,Z) l00007AFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AFD:
	branch Test(NE,Z) l00007B01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007AFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B01:
	branch Test(NE,Z) l00007B05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B05:
	branch Test(NE,Z) l00007B09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B09:
	branch Test(NE,Z) l00007B0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B0D:
	branch Test(NE,Z) l00007B11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B11:
	branch Test(NE,Z) l00007B15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B15:
	branch Test(NE,Z) l00007B19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B19:
	branch Test(NE,Z) l00007B1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B1D:
	branch Test(NE,Z) l00007B21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B21:
	branch Test(NE,Z) l00007B25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B25:
	branch Test(NE,Z) l00007B29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B29:
	branch Test(NE,Z) l00007B2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B2D:
	branch Test(NE,Z) l00007B31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B31:
	branch Test(NE,Z) l00007B35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B35:
	branch Test(NE,Z) l00007B39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B39:
	branch Test(NE,Z) l00007B3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B3D:
	branch Test(NE,Z) l00007B41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B41:
	branch Test(NE,Z) l00007B45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B45:
	branch Test(NE,Z) l00007B49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B49:
	branch Test(NE,Z) l00007B4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B4D:
	branch Test(NE,Z) l00007B51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B51:
	branch Test(NE,Z) l00007B55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B55:
	branch Test(NE,Z) l00007B59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B59:
	branch Test(NE,Z) l00007B5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B5D:
	branch Test(NE,Z) l00007B61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B61:
	branch Test(NE,Z) l00007B65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B65:
	branch Test(NE,Z) l00007B69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B69:
	branch Test(NE,Z) l00007B6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B6D:
	branch Test(NE,Z) l00007B71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B71:
	branch Test(NE,Z) l00007B75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B75:
	branch Test(NE,Z) l00007B79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B79:
	branch Test(NE,Z) l00007B7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B7D:
	branch Test(NE,Z) l00007B81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B81:
	branch Test(NE,Z) l00007B85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B85:
	branch Test(NE,Z) l00007B89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B89:
	branch Test(NE,Z) l00007B8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B8D:
	branch Test(NE,Z) l00007B91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B91:
	branch Test(NE,Z) l00007B95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B95:
	branch Test(NE,Z) l00007B99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B99:
	branch Test(NE,Z) l00007B9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B9D:
	branch Test(NE,Z) l00007BA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007B9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BA1:
	branch Test(NE,Z) l00007BA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BA5:
	branch Test(NE,Z) l00007BA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BA9:
	branch Test(NE,Z) l00007BAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BAD:
	branch Test(NE,Z) l00007BB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BB1:
	branch Test(NE,Z) l00007BB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BB5:
	branch Test(NE,Z) l00007BB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BB9:
	branch Test(NE,Z) l00007BBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BBD:
	branch Test(NE,Z) l00007BC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BC1:
	branch Test(NE,Z) l00007BC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BC5:
	branch Test(NE,Z) l00007BC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BC9:
	branch Test(NE,Z) l00007BCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BCD:
	branch Test(NE,Z) l00007BD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BD1:
	branch Test(NE,Z) l00007BD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BD5:
	branch Test(NE,Z) l00007BD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BD9:
	branch Test(NE,Z) l00007BDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BDD:
	branch Test(NE,Z) l00007BE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BE1:
	branch Test(NE,Z) l00007BE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BE5:
	branch Test(NE,Z) l00007BE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BE9:
	branch Test(NE,Z) l00007BED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BED:
	branch Test(NE,Z) l00007BF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BF1:
	branch Test(NE,Z) l00007BF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BF5:
	branch Test(NE,Z) l00007BF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BF9:
	branch Test(NE,Z) l00007BFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BFD:
	branch Test(NE,Z) l00007C01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007BFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C01:
	branch Test(NE,Z) l00007C05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C05:
	branch Test(NE,Z) l00007C09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C09:
	branch Test(NE,Z) l00007C0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C0D:
	branch Test(NE,Z) l00007C11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C11:
	branch Test(NE,Z) l00007C15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C15:
	branch Test(NE,Z) l00007C19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C19:
	branch Test(NE,Z) l00007C1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C1D:
	branch Test(NE,Z) l00007C21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C21:
	branch Test(NE,Z) l00007C25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C25:
	branch Test(NE,Z) l00007C29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C29:
	branch Test(NE,Z) l00007C2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C2D:
	branch Test(NE,Z) l00007C31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C31:
	branch Test(NE,Z) l00007C35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C35:
	branch Test(NE,Z) l00007C39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C39:
	branch Test(NE,Z) l00007C3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C3D:
	branch Test(NE,Z) l00007C41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C41:
	branch Test(NE,Z) l00007C45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C45:
	branch Test(NE,Z) l00007C49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C49:
	branch Test(NE,Z) l00007C4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C4D:
	branch Test(NE,Z) l00007C51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C51:
	branch Test(NE,Z) l00007C55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C55:
	branch Test(NE,Z) l00007C59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C59:
	branch Test(NE,Z) l00007C5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C5D:
	branch Test(NE,Z) l00007C61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C61:
	branch Test(NE,Z) l00007C65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C65:
	branch Test(NE,Z) l00007C69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C69:
	branch Test(NE,Z) l00007C6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C6D:
	branch Test(NE,Z) l00007C71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C71:
	branch Test(NE,Z) l00007C75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C75:
	branch Test(NE,Z) l00007C79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C79:
	branch Test(NE,Z) l00007C7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C7D:
	branch Test(NE,Z) l00007C81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C81:
	branch Test(NE,Z) l00007C85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C85:
	branch Test(NE,Z) l00007C89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C89:
	branch Test(NE,Z) l00007C8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C8D:
	branch Test(NE,Z) l00007C91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C91:
	branch Test(NE,Z) l00007C95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C95:
	branch Test(NE,Z) l00007C99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C99:
	branch Test(NE,Z) l00007C9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C9D:
	branch Test(NE,Z) l00007CA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007C9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CA1:
	branch Test(NE,Z) l00007CA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CA5:
	branch Test(NE,Z) l00007CA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CA9:
	branch Test(NE,Z) l00007CAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CAD:
	branch Test(NE,Z) l00007CB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CB1:
	branch Test(NE,Z) l00007CB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CB5:
	branch Test(NE,Z) l00007CB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CB9:
	branch Test(NE,Z) l00007CBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CBD:
	branch Test(NE,Z) l00007CC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CC1:
	branch Test(NE,Z) l00007CC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CC5:
	branch Test(NE,Z) l00007CC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CC9:
	branch Test(NE,Z) l00007CCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CCD:
	branch Test(NE,Z) l00007CD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CD1:
	branch Test(NE,Z) l00007CD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CD5:
	branch Test(NE,Z) l00007CD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CD9:
	branch Test(NE,Z) l00007CDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CDD:
	branch Test(NE,Z) l00007CE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CE1:
	branch Test(NE,Z) l00007CE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CE5:
	branch Test(NE,Z) l00007CE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CE9:
	branch Test(NE,Z) l00007CED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CED:
	branch Test(NE,Z) l00007CF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CF1:
	branch Test(NE,Z) l00007CF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CF5:
	branch Test(NE,Z) l00007CF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CF9:
	branch Test(NE,Z) l00007CFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CFD:
	branch Test(NE,Z) l00007D01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007CFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D01:
	branch Test(NE,Z) l00007D05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D05:
	branch Test(NE,Z) l00007D09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D09:
	branch Test(NE,Z) l00007D0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D0D:
	branch Test(NE,Z) l00007D11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D11:
	branch Test(NE,Z) l00007D15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D15:
	branch Test(NE,Z) l00007D19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D19:
	branch Test(NE,Z) l00007D1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D1D:
	branch Test(NE,Z) l00007D21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D21:
	branch Test(NE,Z) l00007D25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D25:
	branch Test(NE,Z) l00007D29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D29:
	branch Test(NE,Z) l00007D2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D2D:
	branch Test(NE,Z) l00007D31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D31:
	branch Test(NE,Z) l00007D35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D35:
	branch Test(NE,Z) l00007D39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D39:
	branch Test(NE,Z) l00007D3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D3D:
	branch Test(NE,Z) l00007D41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D41:
	branch Test(NE,Z) l00007D45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D45:
	branch Test(NE,Z) l00007D49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D49:
	branch Test(NE,Z) l00007D4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D4D:
	branch Test(NE,Z) l00007D51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D51:
	branch Test(NE,Z) l00007D55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D55:
	branch Test(NE,Z) l00007D59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D59:
	branch Test(NE,Z) l00007D5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D5D:
	branch Test(NE,Z) l00007D61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D61:
	branch Test(NE,Z) l00007D65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D65:
	branch Test(NE,Z) l00007D69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D69:
	branch Test(NE,Z) l00007D6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D6D:
	branch Test(NE,Z) l00007D71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D71:
	branch Test(NE,Z) l00007D75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D75:
	branch Test(NE,Z) l00007D79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D79:
	branch Test(NE,Z) l00007D7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D7D:
	branch Test(NE,Z) l00007D81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D81:
	branch Test(NE,Z) l00007D85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D85:
	branch Test(NE,Z) l00007D89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D89:
	branch Test(NE,Z) l00007D8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D8D:
	branch Test(NE,Z) l00007D91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D91:
	branch Test(NE,Z) l00007D95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D95:
	branch Test(NE,Z) l00007D99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D99:
	branch Test(NE,Z) l00007D9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D9D:
	branch Test(NE,Z) l00007DA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007D9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DA1:
	branch Test(NE,Z) l00007DA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DA5:
	branch Test(NE,Z) l00007DA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DA9:
	branch Test(NE,Z) l00007DAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DAD:
	branch Test(NE,Z) l00007DB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DB1:
	branch Test(NE,Z) l00007DB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DB5:
	branch Test(NE,Z) l00007DB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DB9:
	branch Test(NE,Z) l00007DBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DBD:
	branch Test(NE,Z) l00007DC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DC1:
	branch Test(NE,Z) l00007DC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DC5:
	branch Test(NE,Z) l00007DC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DC9:
	branch Test(NE,Z) l00007DCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DCD:
	branch Test(NE,Z) l00007DD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DD1:
	branch Test(NE,Z) l00007DD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DD5:
	branch Test(NE,Z) l00007DD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DD9:
	branch Test(NE,Z) l00007DDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DDD:
	branch Test(NE,Z) l00007DE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DE1:
	branch Test(NE,Z) l00007DE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DE5:
	branch Test(NE,Z) l00007DE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DE9:
	branch Test(NE,Z) l00007DED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DED:
	branch Test(NE,Z) l00007DF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DF1:
	branch Test(NE,Z) l00007DF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DF5:
	branch Test(NE,Z) l00007DF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DF9:
	branch Test(NE,Z) l00007DFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DFD:
	branch Test(NE,Z) l00007E01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007DFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E01:
	branch Test(NE,Z) l00007E05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E05:
	branch Test(NE,Z) l00007E09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E09:
	branch Test(NE,Z) l00007E0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E0D:
	branch Test(NE,Z) l00007E11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E11:
	branch Test(NE,Z) l00007E15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E15:
	branch Test(NE,Z) l00007E19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E19:
	branch Test(NE,Z) l00007E1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E1D:
	branch Test(NE,Z) l00007E21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E21:
	branch Test(NE,Z) l00007E25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E25:
	branch Test(NE,Z) l00007E29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E29:
	branch Test(NE,Z) l00007E2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E2D:
	branch Test(NE,Z) l00007E31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E31:
	branch Test(NE,Z) l00007E35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E35:
	branch Test(NE,Z) l00007E39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E39:
	branch Test(NE,Z) l00007E3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E3D:
	branch Test(NE,Z) l00007E41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E41:
	branch Test(NE,Z) l00007E45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E45:
	branch Test(NE,Z) l00007E49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E49:
	branch Test(NE,Z) l00007E4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E4D:
	branch Test(NE,Z) l00007E51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E51:
	branch Test(NE,Z) l00007E55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E55:
	branch Test(NE,Z) l00007E59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E59:
	branch Test(NE,Z) l00007E5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E5D:
	branch Test(NE,Z) l00007E61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E61:
	branch Test(NE,Z) l00007E65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E65:
	branch Test(NE,Z) l00007E69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E69:
	branch Test(NE,Z) l00007E6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E6D:
	branch Test(NE,Z) l00007E71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E71:
	branch Test(NE,Z) l00007E75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E75:
	branch Test(NE,Z) l00007E79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E79:
	branch Test(NE,Z) l00007E7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E7D:
	branch Test(NE,Z) l00007E81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E81:
	branch Test(NE,Z) l00007E85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E85:
	branch Test(NE,Z) l00007E89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E89:
	branch Test(NE,Z) l00007E8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E8D:
	branch Test(NE,Z) l00007E91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E91:
	branch Test(NE,Z) l00007E95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E95:
	branch Test(NE,Z) l00007E99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E99:
	branch Test(NE,Z) l00007E9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E9D:
	branch Test(NE,Z) l00007EA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007E9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EA1:
	branch Test(NE,Z) l00007EA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EA5:
	branch Test(NE,Z) l00007EA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EA9:
	branch Test(NE,Z) l00007EAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EAD:
	branch Test(NE,Z) l00007EB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EB1:
	branch Test(NE,Z) l00007EB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EB5:
	branch Test(NE,Z) l00007EB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EB9:
	branch Test(NE,Z) l00007EBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EBD:
	branch Test(NE,Z) l00007EC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EC1:
	branch Test(NE,Z) l00007EC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EC5:
	branch Test(NE,Z) l00007EC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EC9:
	branch Test(NE,Z) l00007ECD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007ECD:
	branch Test(NE,Z) l00007ED1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007ECD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007ED1:
	branch Test(NE,Z) l00007ED5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007ED1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007ED5:
	branch Test(NE,Z) l00007ED9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007ED5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007ED9:
	branch Test(NE,Z) l00007EDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007ED9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EDD:
	branch Test(NE,Z) l00007EE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EE1:
	branch Test(NE,Z) l00007EE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EE5:
	branch Test(NE,Z) l00007EE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EE9:
	branch Test(NE,Z) l00007EED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EED:
	branch Test(NE,Z) l00007EF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EF1:
	branch Test(NE,Z) l00007EF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EF5:
	branch Test(NE,Z) l00007EF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EF9:
	branch Test(NE,Z) l00007EFD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EF9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EFD:
	branch Test(NE,Z) l00007F01
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007EFD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F01:
	branch Test(NE,Z) l00007F05
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F01_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F05:
	branch Test(NE,Z) l00007F09
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F05_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F09:
	branch Test(NE,Z) l00007F0D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F09_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F0D:
	branch Test(NE,Z) l00007F11
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F0D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F11:
	branch Test(NE,Z) l00007F15
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F11_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F15:
	branch Test(NE,Z) l00007F19
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F15_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F19:
	branch Test(NE,Z) l00007F1D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F19_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F1D:
	branch Test(NE,Z) l00007F21
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F1D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F21:
	branch Test(NE,Z) l00007F25
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F21_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F25:
	branch Test(NE,Z) l00007F29
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F25_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F29:
	branch Test(NE,Z) l00007F2D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F29_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F2D:
	branch Test(NE,Z) l00007F31
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F2D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F31:
	branch Test(NE,Z) l00007F35
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F31_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F35:
	branch Test(NE,Z) l00007F39
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F35_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F39:
	branch Test(NE,Z) l00007F3D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F39_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F3D:
	branch Test(NE,Z) l00007F41
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F3D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F41:
	branch Test(NE,Z) l00007F45
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F41_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F45:
	branch Test(NE,Z) l00007F49
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F45_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F49:
	branch Test(NE,Z) l00007F4D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F49_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F4D:
	branch Test(NE,Z) l00007F51
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F4D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F51:
	branch Test(NE,Z) l00007F55
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F51_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F55:
	branch Test(NE,Z) l00007F59
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F55_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F59:
	branch Test(NE,Z) l00007F5D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F59_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F5D:
	branch Test(NE,Z) l00007F61
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F5D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F61:
	branch Test(NE,Z) l00007F65
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F61_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F65:
	branch Test(NE,Z) l00007F69
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F65_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F69:
	branch Test(NE,Z) l00007F6D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F69_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F6D:
	branch Test(NE,Z) l00007F71
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F6D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F71:
	branch Test(NE,Z) l00007F75
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F71_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F75:
	branch Test(NE,Z) l00007F79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F75_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F79:
	branch Test(NE,Z) l00007F7D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F79_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F7D:
	branch Test(NE,Z) l00007F81
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F7D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F81:
	branch Test(NE,Z) l00007F85
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F81_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F85:
	branch Test(NE,Z) l00007F89
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F85_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F89:
	branch Test(NE,Z) l00007F8D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F89_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F8D:
	branch Test(NE,Z) l00007F91
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F8D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F91:
	branch Test(NE,Z) l00007F95
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F91_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F95:
	branch Test(NE,Z) l00007F99
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F95_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F99:
	branch Test(NE,Z) l00007F9D
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F99_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F9D:
	branch Test(NE,Z) l00007FA1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007F9D_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FA1:
	branch Test(NE,Z) l00007FA5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FA1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FA5:
	branch Test(NE,Z) l00007FA9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FA5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FA9:
	branch Test(NE,Z) l00007FAD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FA9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FAD:
	branch Test(NE,Z) l00007FB1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FAD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FB1:
	branch Test(NE,Z) l00007FB5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FB1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FB5:
	branch Test(NE,Z) l00007FB9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FB5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FB9:
	branch Test(NE,Z) l00007FBD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FB9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FBD:
	branch Test(NE,Z) l00007FC1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FBD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FC1:
	branch Test(NE,Z) l00007FC5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FC1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FC5:
	branch Test(NE,Z) l00007FC9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FC5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FC9:
	branch Test(NE,Z) l00007FCD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FC9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FCD:
	branch Test(NE,Z) l00007FD1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FCD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FD1:
	branch Test(NE,Z) l00007FD5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FD1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FD5:
	branch Test(NE,Z) l00007FD9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FD5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FD9:
	branch Test(NE,Z) l00007FDD
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FD9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FDD:
	branch Test(NE,Z) l00007FE1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FDD_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FE1:
	branch Test(NE,Z) l00007FE5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FE1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FE5:
	branch Test(NE,Z) l00007FE9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FE5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FE9:
	branch Test(NE,Z) l00007FED
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FE9_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FED:
	branch Test(NE,Z) l00007FF1
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FED_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FF1:
	branch Test(NE,Z) l00007FF5
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FF1_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FF5:
	branch Test(NE,Z) l00007FF5_thunk_fn00007FF9
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FF5_thunk_fn00007FF9:
	fn00007FF9(r0)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13
// Terminates process

l00007FF5_1:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13

l00007FF5_thunk_fn00007FF9:
	fn00007FF9(r0)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:pc + 13
// Terminates process

vEventGroupClearBitsCallback_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000019E5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x000035EA

l000019D9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000019D5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00007FF8()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00007FF8:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00007FF8_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00007FF8_entry:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00007FF8:
	sp = fp
	branch Test(NE,Z) l00007FFC
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00007FF9(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z r0
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00007FF9:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn:

l00007FF8_1:
	r0 = r0 & r0
// DataOut:
// DataOut (flags): Z
// SymbolicIn:

l00007FFC:
	branch Test(NE,Z) l00008000
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00007FF9_entry:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00007FF9:
	sp = fp
	branch Test(NE,Z) l00007FF9_thunk_fn00007FFD
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00007FF9_thunk_fn00007FFD:
	fn00007FFD()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l00007FF9_1:
	r0 = r0 & r0
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00007FF9_thunk_fn00007FFD:
	fn00007FFD()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0
// Terminates process

fn00007FF9_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00007FFD()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00007FFD:
// DataOut: fp lr r0 r10 r3 r8 r9
// DataOut (flags): NZV
// SymbolicIn:

l00007FFC_1:
	r0 = r0 & r0
// DataOut: fp lr r0 r10 r3 r8 r9
// DataOut (flags): NZV
// SymbolicIn:

l00008000:
	branch Test(GE,NZV) l00008004
// DataOut: fp lr r0 r10 r3 r8 r9
// DataOut (flags): NZV
// SymbolicIn:

l00008000_1:
	__syscall(0x0000E7FE)
// DataOut: fp lr r0 r10 r3 r8 r9
// DataOut (flags): NZV
// SymbolicIn:

l00008004:
	branch Test(GE,NZV) l00008008
// DataOut: fp lr r0 r10 r3 r8 r9
// DataOut (flags): NZV
// SymbolicIn:

l00008004_1:
	__syscall(0x0000E7FE)
// DataOut: fp lr r0 r10 r3 r8 r9
// DataOut (flags): NZV
// SymbolicIn:

l00008008:
	branch Test(GE,N) l00008008_thunk_fn0000800C
// DataOut: fp lr r0 r10 r3 r8 r9
// DataOut (flags): NZV
// SymbolicIn:

l00008008_thunk_fn0000800C:
	fn0000800C(r0, r10)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l00008008_1:
	Mem0[r9 + -16:word32] = r3
	Mem0[r9 + -12:word32] = r8
	Mem0[r9 + -8:word32] = r9
	Mem0[r9 + -4:word32] = fp
	Mem0[r9:word32] = lr
// DataOut: r0 r10
// DataOut (flags): NZV
// SymbolicIn:

l00008008_thunk_fn0000800C:
	fn0000800C(r0, r10)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00007FFD_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00007FFD_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00007FFD:
	sp = fp
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void NmiSR()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
NmiSR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

NmiSR_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008001:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void FaultISR(word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z pc
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
FaultISR_entry:
// DataOut: pc
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008005:
	branch Z l00008005_thunk_ResetISR
// DataOut: pc
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008005_thunk_ResetISR:
	ResetISR()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l00008005_1:
// DataOut:
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008005_thunk_ResetISR:
	ResetISR()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r2:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> pc:pc + 24
// Terminates process

FaultISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void ResetISR()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
ResetISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

ResetISR_entry:
// DataOut:
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008009:
	branch ZC l0000800D
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn0000800C(word32 r0, word32 r10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZV r0 r10
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l0000800C:
// DataOut:
// DataOut (flags): ZCV
// SymbolicIn:

l00008009_1:
	r0 = DPB(r0, 0x894B, 16)
// DataOut:
// DataOut (flags): ZCV
// SymbolicIn:

l0000800D:
	branch Test(LE,NZV) l0000800D_then
	call fnFF48A91D (retsize: 0;)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000800C_entry:
// DataOut: r0 r10
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000800C:
	sp = fp
	branch Test(GT,NZV) l0000800C_thunk_fn00008010
// DataOut: r0 r10
// DataOut (flags): C
// SymbolicIn: sp:fp

l0000800C_thunk_fn00008010:
	fn00008010(r0, r10)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l0000800C_1:
	r4 = r10 & 0x30000008
// DataOut: r0 r10
// DataOut (flags): C
// SymbolicIn: sp:fp

l0000800C_thunk_fn00008010:
	fn00008010(r0, r10)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r10 & 0x30000008
// Terminates process

fn0000800C_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00008010(word32 r0, word32 r10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C r0 r10
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00008010:
// DataOut:
// DataOut (flags): Z
// SymbolicIn:

l0000800D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l00008011:
	branch Test(NE,Z) l00008015
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00008010_entry:
	def fp
	def C
	def r0
	def r10
	def Mem0
	def r5_r4
// DataOut: r0 r10
// DataOut (flags): C
// SymbolicIn: sp:fp

l00008010:
	sp_1 = fp
	branch C l00008010_thunk_fn00008014
// DataOut: r0 r10
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008010_thunk_fn00008014:
	fn00008014()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l00008010_1:
	r5_r4_7 = Mem0[r0 - r10:word64]
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008010_thunk_fn00008014:
	fn00008014()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp Sequence r5:r4:<invalid>
// Terminates process

fn00008010_exit:
	r5_r4_3 = PHI(r5_r4, r5_r4_7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn00008014()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
l00008014:
// DataOut: pc r0 r1 r8
// DataOut (flags): ZCV
// SymbolicIn:

l00008011_1:
	r0 = r1 ^ 0x00000043
// DataOut: pc r0 r1 r8
// DataOut (flags): ZCV
// SymbolicIn:

l00008015:
	branch Test(NE,Z) l00008019
// DataOut: pc r0 r1 r8
// DataOut (flags): ZCV
// SymbolicIn:

l00008015_1:
	r2 = ~0x40000004
	NZCV = cond(r2)
	Z = NZCV (alias)
	V = NZCV (alias)
	ZC = NZCV (alias)
	C = NZCV (alias)
// DataOut: pc r0 r1 r8
// DataOut (flags): ZCV
// SymbolicIn:

l00008019:
	branch Test(NE,Z) l00008019_then
	call fn00C89029 (retsize: 0;)
	return
// DataOut: pc r0 r1 r8
// DataOut (flags): ZCV
// SymbolicIn:

l00008019_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l0000801D:
	branch Test(NE,Z) l00008021
// DataOut: pc r0 r1 r8
// DataOut (flags): ZCV
// SymbolicIn:

l0000801D_1:
	v9 = (word32) Mem0[r8:byte]
	r8 = r8 + 836
	r4 = v9
// DataOut: pc r0 r1
// DataOut (flags): ZCV
// SymbolicIn:

l00008021:
	call fn010ACC97 (retsize: 0;)
	branch Test(UGE,C) l00008029
// DataOut: pc r0 r1
// DataOut (flags): ZCV
// SymbolicIn:

l00008025_1:
	call fnFFC08371 (retsize: 0;)
// DataOut: pc r0 r1
// DataOut (flags): ZCV
// SymbolicIn:

l00008029:
	branch Test(NO,V) l0000802D
// DataOut: pc r0 r1
// DataOut (flags): ZC
// SymbolicIn:

l00008029_1:
	v13 = (word32) Mem0[0x00008039:uint16]
	pc = pc + 8
	r0 = v13
// DataOut: r0 r1
// DataOut (flags): ZC
// SymbolicIn:

l0000802D:
	branch Test(ULE,ZC) l00008031
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn:

l0000802D_1:
	r0 = r0 ^ r1
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l00008031:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00008014_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00008014_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008014:
	sp = fp
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void raise(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r7, word32 r8, word32 r9, word32 fp, word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C fp ip r0 r1 r2 r3 r4 r5 r7 r8 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
raise_entry:
// DataOut: fp ip r0 r1 r2 r3 r4 r5 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008035:
	branch C l00008035_thunk_vPrintTask
// DataOut: fp ip r0 r1 r2 r3 r4 r5 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008035_thunk_vPrintTask:
	vPrintTask(r0, r1, r2, r3, r4, r5, r7, r8, r9, fp, ip)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l00008035_1:
	word32 r0_7 = 0x0000803D + __ror(r7, 1) + C
// DataOut: fp ip r0 r1 r2 r3 r4 r5 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008035_thunk_vPrintTask:
	vPrintTask(r0_7, r1, r2, r3, r4, r5, r7, r8, r9, fp, ip)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>
// Terminates process

raise_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vPrintTask(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r7, word32 r8, word32 r9, word32 fp, word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip r0 r1 r2 r3 r4 r5 r7 r8 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vPrintTask_entry:
// DataOut: fp ip r0 r1 r2 r3 r4 r5 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008039:
	branch Z l0000803D
// DataOut: fp ip r0 r1 r2 r3 r4 r5 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008039_1:
	Mem58[r4 + -20:word32] = r0
	Mem59[r4 + -16:word32] = r2
	Mem60[r4 + -12:word32] = r4
	Mem62[r4 + -8:word32] = r5
	Mem64[r4 + -4:word32] = r7
	r4 = r4 - 20
// DataOut: fp ip r0 r1 r2 r3 r4 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000803D:
	branch Z l00008041
// DataOut: fp ip r0 r1 r2 r3 r4 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20
// LocalsOut: fp(32)

l0000803D_1:
	byte NZC_53 = cond(fp >> 6)
	r8 = fp >> 6
	Z = NZC_53 (alias)
	NZV = NZC_53 (alias)
	ZC = NZC_53 (alias)
	C = NZC_53 (alias)
// DataOut: fp ip r0 r1 r2 r3 r4 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20

l00008041:
	branch Z l00008045
// DataOut: fp ip r0 r1 r2 r3 r4 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6

l00008041_1:
	r0 = r4 ^ r9 >> 3
	byte NZC_47 = cond(r0)
	Z = NZC_47 (alias)
	NZV = NZC_47 (alias)
	ZC = NZC_47 (alias)
	C = NZC_47 (alias)
// DataOut: fp ip r0 r1 r2 r3 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6

l00008045:
	__syscall(0x00F04F23)
	branch Z l0000804D
// DataOut: fp ip r0 r1 r2 r3 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:r4 - 40 ^ r9 >> 3

l00008049_1:
	r2 = (r2 >> r8) - r8
// DataOut: fp ip r0 r1 r2 r3 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:r4 - 40 ^ r9 >> 3

l0000804D:
	branch Z l00008051
// DataOut: fp ip r0 r1 r2 r3 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:r4 - 40 ^ r9 >> 3 r2:(r2 >> (fp >> 6)) - (fp >> 6)

l00008051:
	branch Z l00008055
// DataOut: fp ip r0 r1 r2 r3 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:r4 - 40 ^ r9 >> 3 r2:(r2 >> (fp >> 6)) - (fp >> 6)

l00008051_1:
// DataOut: ip r0 r1 r2 r3 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:r4 - 40 ^ r9 >> 3 r2:(r2 >> (fp >> 6)) - (fp >> 6)

l00008055:
	branch Z l00008059
// DataOut: ip r0 r1 r2 r3 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:r4 - 40 ^ r9 >> 3 r2:(r2 >> (fp >> 6)) - (fp >> 6) fp:fp + 1776 r9:<invalid>

l00008055_1:
	Mem40[r2:word32] = r0
// DataOut: ip r0 r1 r3 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:r4 - 40 ^ r9 >> 3 r2:(r2 >> (fp >> 6)) - (fp >> 6) fp:fp + 1776 r9:<invalid>

l00008059:
	branch Z l0000805D
// DataOut: ip r0 r1 r3 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:r4 - 40 ^ r9 >> 3 r2:<invalid> fp:fp + 1776 r9:<invalid>

l0000805D:
	branch NZV l00008061
// DataOut: ip r0 r1 r3 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:r4 - 40 ^ r9 >> 3 r2:<invalid> fp:fp + 1776 r9:<invalid>

l0000805D_1:
	r0 = (word32) Mem0[r0 + 408:byte]
// DataOut: ip r0 r1 r3 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:r4 - 40 ^ r9 >> 3 r2:<invalid> fp:fp + 1776 r9:<invalid>

l00008061:
	branch ZC l00008065
// DataOut: ip r0 r1 r3 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:<invalid> r2:<invalid> fp:fp + 1776 r9:<invalid>

l00008065:
	branch C l00008065_thunk_vCheckTask
// DataOut: ip r0 r1 r3 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:<invalid> r2:<invalid> fp:fp + 1776 r9:<invalid>

l00008065_thunk_vCheckTask:
	vCheckTask(r0, r1, r3, r8, ip, bArg00)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:<invalid> r2:<invalid> fp:fp + 1776 r9:<invalid>
// Terminates process

l00008065_1:
	word32 r0_32 = r0 ^ r8
// DataOut: ip r0 r1 r3 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:<invalid> r2:<invalid> fp:fp + 1776 r9:<invalid>

l00008065_thunk_vCheckTask:
	vCheckTask(r0_32, r1, r3, r8, ip, bArg00)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:<invalid> r2:<invalid> fp:fp + 1776 r9:<invalid>
// Terminates process

vPrintTask_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008061_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:<invalid> r2:<invalid> fp:fp + 1776 r9:<invalid>

l00008059_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:r4 - 40 ^ r9 >> 3 r2:<invalid> fp:fp + 1776 r9:<invalid>

l0000804D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 20 r8:fp >> 6 r0:r4 - 40 ^ r9 >> 3 r2:(r2 >> (fp >> 6)) - (fp >> 6)



void vCheckTask(word32 r0, word32 r1, word32 r3, word32 r8, word32 ip, byte bArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC ip r0 r1 r3 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vCheckTask_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

vCheckTask_entry:
// DataOut: ip r0 r1 r3 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008069:
	word32 sp_1 = fp
	branch ZC l0000806D
// DataOut: ip r0 r1 r3 r8 sp
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008069_1:
	r1_r0 = SEQ(r1, DPB(r0, 0xBBB5, 16)) (alias)
// DataOut: ip r0 r1 r3 r8 sp
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000806D:
	branch Z l00008071
// DataOut: ip r0 r1 r3 r8 sp
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:DPB(r0, 0xBBB5, 16)
// LocalsOut: fp(32)

l0000806D_1:
	r1_r0 = SEQ(r1, (word32) Mem0[r3:word16]) (alias)
// DataOut: ip r0 r1 r8 sp
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:DPB(r0, 0xBBB5, 16)
// LocalsOut: fp(32)

l00008071:
	branch Z l00008075
// DataOut: ip r0 r1 r8 sp
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid> r3:r3
// LocalsOut: fp(32)

l00008071_1:
	byte NZCV_33 = cond(0x00F00000 - ip - C)
	C = (bool) NZCV_33 (alias)
	ZC = NZCV_33 (alias)
	N = NZCV_33 (alias)
// DataOut: r0 r1 r8 sp
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid> r3:r3
// LocalsOut: fp(32)

l00008075:
	branch N l00008079
// DataOut: r0 r1 r8 sp
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid> r3:r3 r4:<invalid>
// LocalsOut: fp(32)

l00008075_1:
	sp_1 = fp - 2476
// DataOut: r0 r1 r8 sp
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid> r3:r3 r4:<invalid>

l00008079:
	branch C l0000807D
// DataOut: r0 r1 r8 sp
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r0:<invalid> r3:r3 r4:<invalid> 0(fp):<invalid>

l00008079_1:
	Mem26[sp_1:word64] = r1_r0
	word32 sp_28 = sp_1 - __ror(r8, 17)
// DataOut:
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r0:<invalid> r3:r3 r4:<invalid> 0(fp):<invalid>

l0000807D:
	branch ZC l00008081
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r3:r3 r4:<invalid> 0(fp):<invalid>

l00008081:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r3:r3 r4:<invalid> 0(fp):<invalid>

l0000807D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r3:r3 r4:<invalid> 0(fp):<invalid>



void Main(word32 r0, word32 r2, word32 r3, word32 r4, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 ip, word32 cpsr, word32 c0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC c0 cpsr fp ip r0 r2 r3 r4 r6 r7 r8 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
Main_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

Main_entry:
// DataOut: c0 cpsr fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000080A1:
	branch ZC l000080A5
// DataOut: c0 cpsr fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000080A1_1:
	__msr(cpsr, 0x000000B5)
// DataOut: c0 cpsr fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000080A5:
	branch Z l000080A9
// DataOut: c0 cpsr fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000080A5_1:
	__msr(cpsr, 0x000004B0)
// DataOut: c0 cpsr fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000080A9:
	branch Z l000080AD
// DataOut: c0 cpsr fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000080A9_1:
	r0 = r4 ^ r0 >> 32
// DataOut: c0 cpsr fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000080AD:
	branch Z l000080B1
// DataOut: c0 cpsr fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32
// LocalsOut: fp(32)

l000080AD_1:
	__syscall(0x00FCECF0)
// DataOut: c0 cpsr fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32
// LocalsOut: fp(32)

l000080B1:
	branch C l000080B5
// DataOut: c0 cpsr fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32
// LocalsOut: fp(32)

l000080B1_1:
// DataOut: c0 cpsr fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32
// LocalsOut: fp(32)

l000080B5:
	branch Z l000080B9
// DataOut: c0 cpsr fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32 r1:(fp >> 16) - (r4 ^ r0 >> 32)
// LocalsOut: fp(32)

l000080B5_1:
	word32 sp_110
	word32 r1_117
	byte p0_121
	byte NZCV_125
	byte NZC_127
	call fnFFC085D5 (retsize: 0;)
		uses: C,c0,cpsr,fp,ip,N,NZC,NZCV,p0,r0_7,r1_10,r2,r3,r4,r6,r7,r8,r9,sp_1,Z,ZC
		defs: C_116,c0_120,cpsr_112,fp_118,ip_123,N_129,NZC_127,NZCV_125,p0_121,r0_114,r1_117,r2_119,r3_130,r4_115,r6_126,r7_128,r8_122,r9_124,sp_110,Z_113,ZC_111
// DataOut: c0 cpsr fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32 r1:(fp >> 16) - (r4 ^ r0 >> 32)
// LocalsOut: fp(32)

l000080B9:
	branch C l000080BD
// DataOut: c0 cpsr fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32 r1:(fp >> 16) - (r4 ^ r0 >> 32)
// LocalsOut: fp(32)

l000080B9_1:
	__msr(cpsr, 0x000003FC)
// DataOut: c0 fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32 r1:(fp >> 16) - (r4 ^ r0 >> 32)
// LocalsOut: fp(32)

l000080BD:
	branch Z l000080C1
// DataOut: c0 fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32 r1:(fp >> 16) - (r4 ^ r0 >> 32)
// LocalsOut: fp(32)

l000080BD_1:
	__ldc(c0, Mem0[r2:word32])
// DataOut: fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32 r1:(fp >> 16) - (r4 ^ r0 >> 32)
// LocalsOut: fp(32)

l000080C1:
	branch Z l000080C5
// DataOut: fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32 r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid>
// LocalsOut: fp(32)

l000080C5:
	branch Z l000080C9
// DataOut: fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32 r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid>
// LocalsOut: fp(32)

l000080C5_1:
	r8 = SLICE(r4 *u ip + (uint64) r8 + (uint64) r0, word32, 32) (alias)
// DataOut: fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32 r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid>
// LocalsOut: fp(32)

l000080C9:
	branch Z l000080CD
// DataOut: fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32 r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid>
// LocalsOut: fp(32)

l000080C9_1:
	r9 = 0x00000F00 - fp - C
	byte NZCV_97 = cond(r9)
	C = NZCV_97 (alias)
	ZC = NZCV_97 (alias)
	Z = NZCV_97 (alias)
	N = NZCV_97 (alias)
// DataOut: fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32 r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid>
// LocalsOut: fp(32)

l000080CD:
	branch C l000080D1
// DataOut: fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32 r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l000080CD_1:
// DataOut: fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32 r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l000080D1:
	branch Z l000080D5
// DataOut: fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid> r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l000080D1_1:
	byte NZC_88 = cond(r2 | r6 >> 32)
	C = NZC_88 (alias)
	ZC = NZC_88 (alias)
	Z = NZC_88 (alias)
	N = NZC_88 (alias)
// DataOut: fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid> r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l000080D5:
	branch Z l000080D9
// DataOut: fp ip r0 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid> r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid> r9:<invalid>
// LocalsOut: fp(32)

l000080D5_1:
	Mem76[r2 + -32:word32] = r2
	Mem77[r2 + -28:word32] = r4
	Mem78[r2 + -24:word32] = r7
	Mem79[r2 + -20:word32] = r8
	Mem80[r2 + -16:word32] = r9
	Mem81[r2 + -12:word32] = fp
	Mem82[r2 + -8:word32] = ip
	Mem83[r2 + -4:word32] = fp
	r3_r2 = SEQ(r3, r2 - 32) (alias)
// DataOut: r0 r2 r3 r6
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid> r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid> r9:<invalid>

l000080D9:
	branch ZC l000080DD
// DataOut: r0 r2 r3 r6
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid> r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid> r9:<invalid> r2:r2 - 32

l000080D9_1:
// DataOut: r2 r3 r6
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid> r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid> r9:<invalid> r2:r2 - 32

l000080DD:
	branch N l000080E1
// DataOut: r2 r3 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid> r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid> r9:<invalid> r2:r2 - 32

l000080E1:
	branch C l000080E5
// DataOut: r2 r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid> r9:<invalid> r2:r2 - 32

l000080E1_1:
	Mem72[r6 - 44:word64] = r3_r2
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid> r9:<invalid> r2:r2 - 32

l000080E5:
	branch Z l000080E9
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid> r9:<invalid> r2:r2 - 32

l000080E9:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid> r9:<invalid> r2:r2 - 32

l000080E5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid> r9:<invalid> r2:r2 - 32

l000080DD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid> Sequence r8:r0:<invalid> r9:<invalid> r2:r2 - 32

l000080C1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r4 ^ r0 >> 32 r1:(fp >> 16) - (r4 ^ r0 >> 32) p0:<invalid>



void vUART_ISR(word32 r0, word32 r1, word32 r2, word32 r4, word32 r5, word32 r6, word32 r7, word32 r9, word32 fp, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp pc r0 r1 r2 r4 r5 r6 r7 r9
// LiveOut:
// Trashed: NZCV pc r0 r1 r5 r6 r8 sp
// Preserved:
vUART_ISR_entry:
// DataOut: fp pc r0 r1 r2 r4 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008109:
	branch Z l0000810D
// DataOut: fp pc r0 r1 r2 r4 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008109_1:
	Mem175[r6 + -20:word32] = r0
	Mem176[r6 + -16:word32] = r2
	Mem177[r6 + -12:word32] = r4
	Mem178[r6 + -8:word32] = r5
	Mem179[r6 + -4:word32] = r7
	r6 = r6 - 20
// DataOut: fp pc r0 r1 r4 r5 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000810D:
	branch Z l00008111
// DataOut: fp pc r0 r1 r4 r5 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - 20
// LocalsOut: fp(32)

l0000810D_1:
	byte NZC_167 = cond(fp >> 4)
	Z = NZC_167 (alias)
	NZV = NZC_167 (alias)
	C = (bool) NZC_167 (alias)
// DataOut: fp pc r0 r1 r4 r5 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - 20

l00008111:
	branch Z l00008115
// DataOut: fp pc r0 r1 r4 r5 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - 20 r8:fp >> 4

l00008115:
	branch NZV l00008119
// DataOut: fp pc r0 r1 r4 r5 r6 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r6:r6 - 20 r8:fp >> 4

l00008119:
	branch Z l0000811D
// DataOut: fp pc r0 r1 r4 r5 r6 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r6:r6 - 20 r8:fp >> 4

l00008119_1:
	Mem165[r6 - 79:word64] = r1_r0
// DataOut: fp pc r0 r4 r5 r6 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r6:r6 - 20 r8:fp >> 4

l0000811D:
	branch Z l00008121
// DataOut: fp pc r0 r4 r5 r6 r9
// DataOut (flags): C
// SymbolicIn: sp:fp r6:r6 - 20 r8:fp >> 4

l00008121:
	word32 sp_22 = 0x000F0000 - 0x00008129 - C
	byte NZCV_23 = cond(sp_22)
	bool C_153 = (bool) NZCV_23
	byte Z_136 = NZCV_23
	byte V_138 = NZCV_23
	byte NV_156 = NZCV_23
	branch sp_22 == 0x00000000 l00008129
// DataOut: fp pc r0 r4 r5 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r6:r6 - 20 r8:fp >> 4

l00008125_1:
// DataOut: fp pc r0 r4 r5 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4

l00008129:
	branch sp_22 < 0x00000000 l0000812D
// DataOut: fp pc r0 r4 r5 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:r5 & ~0x18000000

l00008129_1:
	word32 sp_142
	word32 r0_145
	word32 r2_146
	word32 r5_148
	word32 r7_149
	word32 r8_150
	byte NZC_151
	byte NZV_152
	byte NZCV_154
	byte N_155
	word32 r1_157
	word32 r9_159
	word32 fp_160
	byte ZC_161
	word32 pc_162
	call fn01A0EE5D (retsize: 0;)
		uses: C_25,fp,N_30,NV_31,NZC_24,NZCV_23,NZV_27,pc,r0_35,r1,r2,r4,r5,r6_4,r7,r8_20,r9,sp_22,V_28,Z_26,ZC_29
		defs: C_153,fp_160,N_155,NV_156,NZC_151,NZCV_154,NZV_152,pc_162,r0_145,r1_157,r2_146,r4_147,r5_148,r6_144,r7_149,r8_150,r9_159,sp_142,V_158,Z_143,ZC_161
// DataOut: fp pc r0 r4 r5 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:r5 & ~0x18000000

l0000812D:
	branch NV_156 l00008131
// DataOut: fp pc r0 r4 r5 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:r5 & ~0x18000000

l0000812D_1:
	byte NZCV_133 = cond(r4 - (r6 << 12) - C_153)
	Z_136 = NZCV_133 (alias)
	V_138 = NZCV_133 (alias)
// DataOut: fp pc r0 r5 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:r5 & ~0x18000000

l00008131:
	branch Z_136 l00008135
// DataOut: fp pc r0 r5 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:r5 & ~0x18000000 r1:<invalid>

l00008131_1:
// DataOut: fp pc r0 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:r5 & ~0x18000000 r1:<invalid>

l00008135:
	branch V_138 l00008135_then
	word32 sp_77
	byte Z_78
	word32 r6_79
	word32 r0_80
	word32 r2_81
	word32 r4_82
	word32 r5_83
	word32 r7_84
	word32 r8_85
	byte NZC_86
	byte NZV_87
	bool C_88
	byte NZCV_89
	byte N_90
	byte NV_91
	word32 r1_92
	byte V_93
	word32 r9_94
	word32 fp_95
	byte ZC_96
	word32 pc_97
	call fn01E0CE65 (retsize: 0;)
		uses: C_72,fp_45,N_70,NV_69,NZC_74,NZCV_71,NZV_73,pc_63,r0_59,r1_68,r2_58,r4_57,r5_64,r6_60,r7_56,r8_55,r9_46,sp_62,V_67,Z_75,ZC_66
		defs: C_88,fp_95,N_90,NV_91,NZC_86,NZCV_89,NZV_87,pc_97,r0_80,r1_92,r2_81,r4_82,r5_83,r6_79,r7_84,r8_85,r9_94,sp_77,V_93,Z_78,ZC_96
	return
// DataOut: fp pc r0 r6 r9
// DataOut (flags): NZC
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid>

l00008135_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid>

l00008139:
	branch Z_78 l0000813D
// DataOut: fp pc r0 r6 r9
// DataOut (flags): NZC
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid>

l00008139_1:
// DataOut: pc r0 r6
// DataOut (flags): NZC
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid>

l0000813D:
	branch N_90 l00008141
// DataOut: pc r0 r6
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid>

l0000813D_1:
	__syscall(0x00B11B9B)
// DataOut: pc r0 r6
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid>

l00008141:
	branch Z_78 l00008145
// DataOut: pc r0 r6
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid>

l00008145:
	branch Z_78 l00008149
// DataOut: pc r0 r6
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid>

l00008145_1:
// DataOut: pc r6
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid>

l00008149:
	branch Z_78 l00008149_then
	word32 sp_100
	byte Z_101
	word32 r6_102
	word32 r0_103
	word32 r2_104
	word32 r4_105
	word32 r5_106
	word32 r7_107
	word32 r8_108
	byte NZC_109
	byte NZV_110
	bool C_111
	byte NZCV_112
	byte N_113
	byte NV_114
	word32 r1_115
	byte V_116
	word32 r9_117
	word32 fp_118
	byte ZC_119
	word32 pc_120
	call fnFEF64411 (retsize: 0;)
		uses: C_88,fp_95,N_90,NV_91,NZC_86,NZCV_89,NZV_87,pc_97,r0_99,r1_92,r2_81,r4_82,r5_83,r6_79,r7_84,r8_85,r9_94,sp_77,V_93,Z_78,ZC_96
		defs: C_111,fp_118,N_113,NV_114,NZC_109,NZCV_112,NZV_110,pc_120,r0_103,r1_115,r2_104,r4_105,r5_106,r6_102,r7_107,r8_108,r9_117,sp_100,V_116,Z_101,ZC_119
	return
// DataOut: pc r6
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid>

l00008149_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid>

l0000814D:
	branch ZC_119 l00008151
// DataOut: pc r6
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid>

l00008151:
	branch Z_101 l00008155
// DataOut: pc r6
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid>

l00008151_1:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid>

l00008155:
	branch Z_101 l00008159
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid> pc:pc + (r6 - 40) r5:<invalid>

l00008159:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid> pc:pc + (r6 - 40) r5:<invalid>

vUART_ISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid> pc:pc + (r6 - 40) r5:<invalid>

l00008155_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid> pc:pc + (r6 - 40) r5:<invalid>

l0000814D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid>

l00008141_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r6:r6 - 20 r8:fp >> 4 r0:<invalid> r1:<invalid>

l0000811D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - 20 r8:fp >> 4

l00008115_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - 20 r8:fp >> 4

l00008111_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - 20 r8:fp >> 4



void vSetErrorLED(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 c0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZ c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV fp lr p3 pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
vSetErrorLED_entry:
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008185:
	branch Z l00008189
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008185_1:
	r0 = r0 ^ r1 >> 14
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008189:
	branch N l00008189_thunk_prvSetAndCheckRegisters
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r0 ^ r1 >> 14

l00008189_thunk_prvSetAndCheckRegisters:
	prvSetAndCheckRegisters(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, c0)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 ^ r1 >> 14

l00008189_1:
	__syscall(0x00BA34F0)
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r0 ^ r1 >> 14

l00008189_thunk_prvSetAndCheckRegisters:
	prvSetAndCheckRegisters(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, c0)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 ^ r1 >> 14

vSetErrorLED_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r9:<invalid> fp:<invalid> r1:<invalid> p3:<invalid> r8:<invalid> r5:<invalid> r7:<invalid> r10:<invalid> r2:<invalid> r4:<invalid> r6:<invalid> pc:<invalid> r3:<invalid> lr:<invalid>



void prvSetAndCheckRegisters(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 c0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV fp lr p3 pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
prvSetAndCheckRegisters_entry:
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000818D:
	branch Z l00008191
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000818D_1:
	word32 sp_634
	word32 r9_637
	word32 r4_639
	word32 r10_642
	byte NZCV_645
	word32 r1_646
	word32 c0_647
	byte p3_648
	byte ZC_649
	word32 r2_650
	word32 r5_651
	word32 r8_652
	byte V_653
	call fn002CAD55 (retsize: 0;)
		uses: c0,fp,ip,NZCV,NZV,p3,pc,r0,r1,r10,r2,r3,r4,r5,r6,r7,r8,r9,sp_1,V,Z,ZC
		defs: c0_647,fp_643,ip_644,NZCV_645,NZV_636,p3_648,pc_654,r0_638,r1_646,r10_642,r2_650,r3_655,r4_639,r5_651,r6_640,r7_641,r8_652,r9_637,sp_634,V_653,Z_635,ZC_649
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008191:
	branch Z l00008195
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008191_1:
	word32 r0_621
	word32 r2_622
	word32 r3_623
	word32 r4_624
	word32 r5_625
	word32 r7_626
	word32 r8_627
	word32 pc_628
	byte NZCV_629 = fn0000895D(r0, r3, r6, r7, fp, ip, pc, out r0_621, out r2_622, out r3_623, out r4_624, out r5_625, out r7_626, out r8_627, out pc_628)
	Z = NZCV_629 (alias)
	NZV = NZCV_629 (alias)
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008195:
	branch Z l00008199
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l00008195_1:
	word32 sp_599
	word32 r9_602
	word32 r0_603
	word32 r4_604
	word32 r6_605
	word32 r7_606
	word32 r10_607
	word32 fp_608
	word32 ip_609
	byte NZCV_610
	word32 r1_611
	word32 c0_612
	byte p3_613
	byte ZC_614
	word32 r2_615
	word32 r5_616
	word32 r8_617
	byte V_618
	word32 pc_619
	word32 r3_620
	call fn00048D61 (retsize: 0;)
		uses: c0_24,fp_35,ip_25,NZCV_47,NZV_49,p3_36,pc_57,r0_55,r1_41,r10_26,r2_56,r3_45,r4_46,r5_53,r6_43,r7_54,r8_52,r9_29,sp_28,V_51,Z_48,ZC_50
		defs: c0_612,fp_608,ip_609,NZCV_610,NZV_601,p3_613,pc_619,r0_603,r1_611,r10_607,r2_615,r3_620,r4_604,r5_616,r6_605,r7_606,r8_617,r9_602,sp_599,V_618,Z_600,ZC_614
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l00008199:
	branch Z l0000819D
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l00008199_1:
	word32 sp_577
	word32 r9_580
	word32 r0_581
	word32 r4_582
	word32 r6_583
	word32 r7_584
	word32 r10_585
	word32 fp_586
	word32 ip_587
	byte NZCV_588
	word32 r1_589
	word32 c0_590
	byte p3_591
	byte ZC_592
	word32 r2_593
	word32 r5_594
	word32 r8_595
	byte V_596
	word32 pc_597
	word32 r3_598
	call fn00089165 (retsize: 0;)
		uses: c0_59,fp_70,ip_60,NZCV_65,NZV_67,p3_71,pc_79,r0_75,r1_76,r10_61,r2_77,r3_58,r4_62,r5_73,r6_78,r7_74,r8_72,r9_64,sp_63,V_69,Z_66,ZC_68
		defs: c0_590,fp_586,ip_587,NZCV_588,NZV_579,p3_591,pc_597,r0_581,r1_589,r10_585,r2_593,r3_598,r4_582,r5_594,r6_583,r7_584,r8_595,r9_580,sp_577,V_596,Z_578,ZC_592
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l0000819D:
	branch Z l000081A1
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l0000819D_1:
	word32 sp_555
	word32 r9_558
	word32 r0_559
	word32 r4_560
	word32 r6_561
	word32 r7_562
	word32 r10_563
	word32 fp_564
	word32 ip_565
	byte NZCV_566
	word32 r1_567
	word32 c0_568
	byte p3_569
	byte ZC_570
	word32 r2_571
	word32 r5_572
	word32 r8_573
	byte V_574
	word32 pc_575
	word32 r3_576
	call fn000C9569 (retsize: 0;)
		uses: c0_81,fp_92,ip_82,NZCV_87,NZV_89,p3_93,pc_101,r0_97,r1_98,r10_83,r2_99,r3_80,r4_84,r5_95,r6_100,r7_96,r8_94,r9_86,sp_85,V_91,Z_88,ZC_90
		defs: c0_568,fp_564,ip_565,NZCV_566,NZV_557,p3_569,pc_575,r0_559,r1_567,r10_563,r2_571,r3_576,r4_560,r5_572,r6_561,r7_562,r8_573,r9_558,sp_555,V_574,Z_556,ZC_570
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081A1:
	branch Z l000081A5
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081A1_1:
	word32 sp_533
	word32 r9_536
	word32 r0_537
	word32 r4_538
	word32 r6_539
	word32 r7_540
	word32 r10_541
	word32 fp_542
	word32 ip_543
	byte NZCV_544
	word32 r1_545
	word32 c0_546
	byte p3_547
	byte ZC_548
	word32 r2_549
	word32 r5_550
	word32 r8_551
	byte V_552
	word32 pc_553
	word32 r3_554
	call fn0010996D (retsize: 0;)
		uses: c0_103,fp_114,ip_104,NZCV_109,NZV_111,p3_115,pc_123,r0_119,r1_120,r10_105,r2_121,r3_102,r4_106,r5_117,r6_122,r7_118,r8_116,r9_108,sp_107,V_113,Z_110,ZC_112
		defs: c0_546,fp_542,ip_543,NZCV_544,NZV_535,p3_547,pc_553,r0_537,r1_545,r10_541,r2_549,r3_554,r4_538,r5_550,r6_539,r7_540,r8_551,r9_536,sp_533,V_552,Z_534,ZC_548
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081A5:
	branch Z l000081A9
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081A5_1:
	word32 sp_511
	word32 r9_514
	word32 r0_515
	word32 r4_516
	word32 r6_517
	word32 r7_518
	word32 r10_519
	word32 fp_520
	word32 ip_521
	byte NZCV_522
	word32 r1_523
	word32 c0_524
	byte p3_525
	byte ZC_526
	word32 r2_527
	word32 r5_528
	word32 r8_529
	byte V_530
	word32 pc_531
	word32 r3_532
	call fn00149D71 (retsize: 0;)
		uses: c0_125,fp_136,ip_126,NZCV_131,NZV_133,p3_137,pc_145,r0_141,r1_142,r10_127,r2_143,r3_124,r4_128,r5_139,r6_144,r7_140,r8_138,r9_130,sp_129,V_135,Z_132,ZC_134
		defs: c0_524,fp_520,ip_521,NZCV_522,NZV_513,p3_525,pc_531,r0_515,r1_523,r10_519,r2_527,r3_532,r4_516,r5_528,r6_517,r7_518,r8_529,r9_514,sp_511,V_530,Z_512,ZC_526
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081A9:
	branch Z l000081AD
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081A9_1:
	word32 sp_489
	word32 r9_492
	word32 r0_493
	word32 r4_494
	word32 r6_495
	word32 r7_496
	word32 r10_497
	word32 fp_498
	word32 ip_499
	byte NZCV_500
	word32 r1_501
	word32 c0_502
	byte p3_503
	byte ZC_504
	word32 r2_505
	word32 r5_506
	word32 r8_507
	byte V_508
	word32 pc_509
	word32 r3_510
	call fn0018A175 (retsize: 0;)
		uses: c0_147,fp_158,ip_148,NZCV_153,NZV_155,p3_159,pc_167,r0_163,r1_164,r10_149,r2_165,r3_146,r4_150,r5_161,r6_166,r7_162,r8_160,r9_152,sp_151,V_157,Z_154,ZC_156
		defs: c0_502,fp_498,ip_499,NZCV_500,NZV_491,p3_503,pc_509,r0_493,r1_501,r10_497,r2_505,r3_510,r4_494,r5_506,r6_495,r7_496,r8_507,r9_492,sp_489,V_508,Z_490,ZC_504
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081AD:
	branch Z l000081B1
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081AD_1:
	word32 sp_467
	word32 r9_470
	word32 r0_471
	word32 r4_472
	word32 r6_473
	word32 r7_474
	word32 r10_475
	word32 fp_476
	word32 ip_477
	byte NZCV_478
	word32 r1_479
	word32 c0_480
	byte p3_481
	byte ZC_482
	word32 r2_483
	word32 r5_484
	word32 r8_485
	byte V_486
	word32 pc_487
	word32 r3_488
	call fn001CA579 (retsize: 0;)
		uses: c0_169,fp_180,ip_170,NZCV_175,NZV_177,p3_181,pc_189,r0_185,r1_186,r10_171,r2_187,r3_168,r4_172,r5_183,r6_188,r7_184,r8_182,r9_174,sp_173,V_179,Z_176,ZC_178
		defs: c0_480,fp_476,ip_477,NZCV_478,NZV_469,p3_481,pc_487,r0_471,r1_479,r10_475,r2_483,r3_488,r4_472,r5_484,r6_473,r7_474,r8_485,r9_470,sp_467,V_486,Z_468,ZC_482
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081B1:
	branch Z l000081B5
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081B1_1:
	word32 sp_445
	word32 r9_448
	word32 r0_449
	word32 r4_450
	word32 r6_451
	word32 r7_452
	word32 r10_453
	word32 fp_454
	word32 ip_455
	byte NZCV_456
	word32 r1_457
	word32 c0_458
	byte p3_459
	byte ZC_460
	word32 r2_461
	word32 r5_462
	word32 r8_463
	byte V_464
	word32 pc_465
	word32 r3_466
	call fn0020A97D (retsize: 0;)
		uses: c0_191,fp_202,ip_192,NZCV_197,NZV_199,p3_203,pc_211,r0_207,r1_208,r10_193,r2_209,r3_190,r4_194,r5_205,r6_210,r7_206,r8_204,r9_196,sp_195,V_201,Z_198,ZC_200
		defs: c0_458,fp_454,ip_455,NZCV_456,NZV_447,p3_459,pc_465,r0_449,r1_457,r10_453,r2_461,r3_466,r4_450,r5_462,r6_451,r7_452,r8_463,r9_448,sp_445,V_464,Z_446,ZC_460
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081B5:
	branch Z l000081B9
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081B5_1:
	word32 sp_423
	word32 r9_426
	word32 r0_427
	word32 r4_428
	word32 r6_429
	word32 r7_430
	word32 r10_431
	word32 fp_432
	word32 ip_433
	byte NZCV_434
	word32 r1_435
	word32 c0_436
	byte p3_437
	byte ZC_438
	word32 r2_439
	word32 r5_440
	word32 r8_441
	byte V_442
	word32 pc_443
	word32 r3_444
	call fn0024AD81 (retsize: 0;)
		uses: c0_213,fp_224,ip_214,NZCV_219,NZV_221,p3_225,pc_233,r0_229,r1_230,r10_215,r2_231,r3_212,r4_216,r5_227,r6_232,r7_228,r8_226,r9_218,sp_217,V_223,Z_220,ZC_222
		defs: c0_436,fp_432,ip_433,NZCV_434,NZV_425,p3_437,pc_443,r0_427,r1_435,r10_431,r2_439,r3_444,r4_428,r5_440,r6_429,r7_430,r8_441,r9_426,sp_423,V_442,Z_424,ZC_438
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081B9:
	branch Z l000081BD
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081B9_1:
	word32 sp_401
	word32 r9_404
	word32 r0_405
	word32 r4_406
	word32 r6_407
	word32 r7_408
	word32 r10_409
	word32 fp_410
	word32 ip_411
	byte NZCV_412
	word32 r1_413
	word32 c0_414
	byte p3_415
	byte ZC_416
	word32 r2_417
	word32 r5_418
	word32 r8_419
	byte V_420
	word32 pc_421
	word32 r3_422
	call fn0028B185 (retsize: 0;)
		uses: c0_235,fp_246,ip_236,NZCV_241,NZV_243,p3_247,pc_255,r0_251,r1_252,r10_237,r2_253,r3_234,r4_238,r5_249,r6_254,r7_250,r8_248,r9_240,sp_239,V_245,Z_242,ZC_244
		defs: c0_414,fp_410,ip_411,NZCV_412,NZV_403,p3_415,pc_421,r0_405,r1_413,r10_409,r2_417,r3_422,r4_406,r5_418,r6_407,r7_408,r8_419,r9_404,sp_401,V_420,Z_402,ZC_416
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081BD:
	branch NZV l000081C1
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081BD_1:
	word32 sp_379
	byte NZV_381
	word32 r9_382
	word32 r0_383
	word32 r4_384
	word32 r6_385
	word32 r7_386
	word32 r10_387
	word32 fp_388
	word32 ip_389
	byte NZCV_390
	word32 r1_391
	word32 c0_392
	byte p3_393
	byte ZC_394
	word32 r2_395
	word32 r5_396
	word32 r8_397
	byte V_398
	word32 pc_399
	word32 r3_400
	call fn0030B589 (retsize: 0;)
		uses: c0_257,fp_268,ip_258,NZCV_263,NZV_265,p3_269,pc_277,r0_273,r1_274,r10_259,r2_275,r3_256,r4_260,r5_271,r6_276,r7_272,r8_270,r9_262,sp_261,V_267,Z_264,ZC_266
		defs: c0_392,fp_388,ip_389,NZCV_390,NZV_381,p3_393,pc_399,r0_383,r1_391,r10_387,r2_395,r3_400,r4_384,r5_396,r6_385,r7_386,r8_397,r9_382,sp_379,V_398,Z_380,ZC_394
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081C1:
	branch Z l000081C5
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081C5:
	branch Z l000081C5_then
	word32 sp_300
	word32 r4_305
	word32 r6_306
	word32 r10_308
	word32 ip_310
	byte NZCV_311
	word32 c0_313
	byte p3_314
	word32 r2_316
	word32 r5_317
	word32 r8_318
	word32 pc_320
	word32 r3_321
	word32 r9_303
	word32 r0_304
	byte Z_301
	byte NZV_302
	byte ZC_315
	byte V_319
	word32 fp_309
	word32 r1_312
	word32 r7_307
	call fn00A0B111 (retsize: 0;)
		uses: c0_279,fp_290,ip_280,NZCV_285,NZV_287,p3_291,pc_299,r0_295,r1_296,r10_281,r2_297,r3_278,r4_282,r5_293,r6_298,r7_294,r8_292,r9_284,sp_283,V_289,Z_286,ZC_288
		defs: c0_313,fp_309,ip_310,NZCV_311,NZV_302,p3_314,pc_320,r0_304,r1_312,r10_308,r2_316,r3_321,r4_305,r5_317,r6_306,r7_307,r8_318,r9_303,sp_300,V_319,Z_301,ZC_315
	return
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081C5_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081C9:
	branch Z_301 l000081CD
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081C9_1:
	Mem372[r9_303 + -20:word32] = r0_304
	Mem373[r9_303 + -16:word32] = r4_305
	Mem374[r9_303 + -12:word32] = r6_306
	Mem375[r9_303 + -8:word32] = r7_307
	Mem376[r9_303 + -4:word32] = r10_308
	Mem377[r9_303:word32] = fp_309
	r9_303 = r9_303 - 24
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081CD:
	branch Z_301 l000081D1
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081D1:
	branch Z_301 l000081D5
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081D1_1:
	Mem370[fp_309:word32] = r0_304
	fp_309 = fp_309 - 3793
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081D5:
	branch Z_301 l000081D9
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:fp - 3793 r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081D5_1:
	r0_304 = ip_310 ^ 0x00000344
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:fp - 3793 r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081D9:
	branch Z_301 l000081DD
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:fp - 3793 r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081DD:
	branch Z_301 l000081E1
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:fp - 3793 r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081E1:
	branch Z_301 l000081E5
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:fp - 3793 r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081E5:
	branch Z_301 l000081E9
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:fp - 3793 r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081E5_1:
	fp_309 = ~0x00D10000
	byte NZCV_364 = cond(fp_309)
	Z_301 = NZCV_364 (alias)
	NZV_302 = NZCV_364 (alias)
	ZC_315 = NZCV_364 (alias)
	V_319 = NZCV_364 (alias)
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:fp - 3793 r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081E9:
	branch NZV_302 l000081ED
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081ED:
	branch Z_301 l000081F1
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081F1:
	branch Z_301 l000081F5
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081F1_1:
	r1_312 = r1_312 + 2769
	fp_309 = (word32) Mem0[r1_312 + 2769:byte]
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081F5:
	branch NZV_302 l000081F9
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r1:r1 + 2769 r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081F5_1:
	__ldc(c0_313, Mem0[r1_312:word32])
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r1:r1 + 2769 r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081F9:
	branch Z_301 l000081FD
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r1:r1 + 2769 p3:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081FD:
	branch Z_301 l00008201
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r1:r1 + 2769 p3:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l00008201:
	branch ZC_315 l00008205
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r1:r1 + 2769 p3:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l00008201_1:
	Mem352[r9_303:word32] = r0_304
	Mem353[r9_303 + 4:word32] = r2_316
	Mem354[r9_303 + 8:word32] = r4_305
	Mem355[r9_303 + 12:word32] = r5_317
	Mem356[r9_303 + 16:word32] = r7_307
	Mem357[r9_303 + 20:word32] = r9_303
	Mem358[r9_303 + 24:word32] = r10_308
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r1:r1 + 2769 p3:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l00008205:
	branch Z_301 l00008209
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r1:r1 + 2769 p3:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l00008205_1:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r1:r1 + 2769 p3:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l00008209:
	branch V_319 l0000820D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r1:r1 + 2769 p3:<invalid> r8:<invalid> r5:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r2:<invalid> r7:<invalid> pc:<invalid>

l00008209_1:
	r7_307 = r7_307 - __ror(fp_309, 1)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r1:r1 + 2769 p3:<invalid> r8:<invalid> r5:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r2:<invalid> r7:<invalid> pc:<invalid>

l0000820D:
	branch Z_301 l0000820D_thunk_vApplicationIdleHook
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r1:r1 + 2769 p3:<invalid> r8:<invalid> r5:<invalid> r7:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r2:<invalid> pc:<invalid>

l0000820D_thunk_vApplicationIdleHook:
	vApplicationIdleHook(r0_304, r1_312, r2_316, r3_321, r4_305, r6_306, r7_307, r9_303, r10_308, fp_309, ip_310, pc_320)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 - 24 fp:<invalid> r0:<invalid> r1:r1 + 2769 p3:<invalid> r8:<invalid> r5:<invalid> r7:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r2:<invalid> pc:<invalid>

l0000820D_1:
	word32 r0_343 = Mem0[pc_320:word32]
	word32 r1_344 = Mem0[pc_320 + 4:word32]
	word32 r2_345 = Mem0[pc_320 + 8:word32]
	word32 r6_346 = Mem0[pc_320 + 12:word32]
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r9:r9 - 24 fp:<invalid> r0:<invalid> r1:r1 + 2769 p3:<invalid> r8:<invalid> r5:<invalid> r7:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r2:<invalid> pc:<invalid>

l0000820D_thunk_vApplicationIdleHook:
	vApplicationIdleHook(r0_343, r1_344, r2_345, r3_321, r4_305, r6_346, r7_307, r9_303, r10_308, fp_309, ip_310, pc_320 + 16)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 - 24 fp:<invalid> r0:<invalid> r1:<invalid> p3:<invalid> r8:<invalid> r5:<invalid> r7:<invalid> r2:<invalid> r6:<invalid> pc:<invalid> r3:<invalid> lr:<invalid> r4:<invalid>

prvSetAndCheckRegisters_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 - 24 fp:<invalid> r0:<invalid> r1:<invalid> p3:<invalid> r8:<invalid> r5:<invalid> r7:<invalid> r10:<invalid> r2:<invalid> r4:<invalid> r6:<invalid> pc:<invalid> r3:<invalid> lr:<invalid>

l000081FD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r1:r1 + 2769 p3:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081F9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r1:r1 + 2769 p3:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081ED_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081E9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:<invalid> r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081E1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:fp - 3793 r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081DD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:fp - 3793 r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081D9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:r9 - 24 fp:fp - 3793 r0:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081CD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r9:r9 - 24 r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>

l000081C1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:<invalid>



void vApplicationIdleHook(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r6, word32 r7, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r2 r3 r4 r6 r7 r9
// LiveOut:
// Trashed: NZCV r0 r1 r10 r2 r4 r6 r7
// Preserved: sp
vApplicationIdleHook_entry:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008211:
	branch ZC l00008215
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008211_1:
	word32 sp_38
	call fnFFC084ED (retsize: 0;)
		uses: C,fp,ip,NZV,pc,r0,r1,r10,r2,r3,r4,r6,r7,r9,sp_1,ZC
		defs: C_43,fp_52,ip_53,NZV_40,pc_41,r0_44,r1_45,r10_51,r2_46,r3_47,r4_48,r6_49,r7_42,r9_50,sp_38,ZC_39
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008215:
	branch NZV l00008219
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008219:
	branch ZC l0000821D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008219_1:
	Mem37[r7 + 2815:byte] = (byte) pc
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000821D:
	branch C l0000821D_thunk_PDCInit
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 + 2815

l0000821D_thunk_PDCInit:
	PDCInit(r0, r1, r2, r3, r4, r6, r9, r10, fp, ip)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 + 2815

l0000821D_1:
	word32 r0_35 = r0 & r1 << 1
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 + 2815

l0000821D_thunk_PDCInit:
	PDCInit(r0_35, r1, r2, r3, r4, r6, r9, r10, fp, ip)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 + 2815 r0:r0 & r1 << 1

vApplicationIdleHook_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 + 2815 r0:<invalid> r1:<invalid> r10:<invalid> r2:<invalid> r4:<invalid> r6:<invalid>

l00008215_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void PDCInit(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r6, word32 r9, word32 r10, word32 fp, word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip r0 r1 r10 r2 r3 r4 r6 r9
// LiveOut:
// Trashed: NZCV r0 r1 r10 r2 r4 r6
// Preserved: sp
PDCInit_entry:
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008221:
	branch ZC l00008225
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008221_1:
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008225:
	branch NV l00008229
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16)

l00008229:
	branch Z l0000822D
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16)

l0000822D:
	branch Z l00008231
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16)

l0000822D_1:
	byte NZCV_107 = cond(0x0F000000 - ip - C)
	Z = NZCV_107 (alias)
	N = NZCV_107 (alias)
// DataOut: fp r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16)

l00008231:
	branch N l00008235
// DataOut: fp r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid>

l00008231_1:
	__syscall(0x00213422)
// DataOut: fp r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid>

l00008235:
	branch Z l00008239
// DataOut: fp r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid>

l00008239:
	branch Z l0000823D
// DataOut: fp r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid>

l0000823D:
	branch N l00008241
// DataOut: fp r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid>

l0000823D_1:
	__syscall(0x00210822)
// DataOut: fp r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid>

l00008241:
	branch Z l00008245
// DataOut: fp r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid>

l00008245:
	branch Z l00008245_then
	word32 sp_22
	byte ZC_23
	word32 r1_24
	byte NV_25
	word32 r10_27
	word32 ip_28
	byte NZCV_30
	byte N_31
	word32 r0_32
	word32 fp_36
	word32 r6_37
	word32 r9_38
	byte NZC_39
	word32 r3_40
	word32 r2_103
	byte Z_26
	byte NZV_35
	word32 r4_34
	bool C_29
	call fnFFFE0E0D (retsize: 0;)
		uses: C_15,N_19,NV_14,NZC_20,NZCV_21,NZV_18,r1_4,r10_13,sp_1,Z_17,ZC_16
		defs: C_29,fp_36,ip_28,N_31,NV_25,NZC_39,NZCV_30,NZV_35,r0_32,r1_24,r10_27,r2_33,r3_40,r4_34,r6_37,r9_38,sp_22,Z_26,ZC_23
	return
// DataOut: fp r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid>

l00008245_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid>

l00008249:
	branch Z_26 l0000824D
// DataOut: fp r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid>

l00008249_1:
	Mem102[r2_103:word32] = r0_32
	r2_103 = r2_103 - 547
	r3_r2 = SEQ(r3_40, r2_103 - 547) (alias)
// DataOut: fp r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid>

l0000824D:
	branch N_31 l00008251
// DataOut: fp r0 r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547

l0000824D_1:
	r4_34 = (r1_24 >> 30) - r0_32 - C_29
	byte NZCV_94 = cond(r4_34)
	C_29 = (bool) NZCV_94 (alias)
	Z_26 = NZCV_94 (alias)
	NZV_35 = NZCV_94 (alias)
// DataOut: fp r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547

l00008251:
	branch NZV_35 l00008255
// DataOut: fp r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid>

l00008255:
	branch Z_26 l00008259
// DataOut: fp r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid>

l00008259:
	branch Z_26 l0000825D
// DataOut: fp r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid>

l0000825D:
	branch C_29 l00008261
// DataOut: fp r1 r10 r2 r3 r4 r6 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid>

l0000825D_1:
	Mem87[fp_36:word32] = r1_24
	Mem88[fp_36 + 4:word32] = r2_103
	Mem89[fp_36 + 8:word32] = r6_37
	Mem90[fp_36 + 12:word32] = r9_38
	Mem91[fp_36 + 16:word32] = r10_27
	Mem92[fp_36 + 20:word32] = fp_36
// DataOut: r2 r3 r4 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid>

l00008261:
	branch Z_26 l00008265
// DataOut: r2 r3 r4 r6
// DataOut (flags): C
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid>

l00008261_1:
	C_29 = (bool) cond(r4_34 | r6_37 >> 32) (alias)
// DataOut: r2 r3 r6
// DataOut (flags): C
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid>

l00008265:
	branch C_29 l00008269
// DataOut: r2 r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid> r0:<invalid>

l00008269:
	word32 r0_62 = ~0x80000011
	branch r0_62 != 0x00000000 l00008271
// DataOut: r0 r2 r3 r6
// DataOut (flags): NC
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid> r0:<invalid>

l0000826D_1:
	Mem76[r6_37:word64] = r3_r2
// DataOut: r0 r2
// DataOut (flags): NC
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid> r0:~0x80000011

l00008271:
	branch r0_62 >= 0x00000000 l00008275
// DataOut: r0 r2
// DataOut (flags): C
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid> r0:~0x80000011 r6:r6 - 27

l00008271_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid> r0:~0x80000011 r6:r6 - 27

l00008275:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid> r0:~0x80000011 r6:r6 - 27

PDCInit_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid> r0:~0x80000011 r6:r6 - 27

l00008265_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid> r0:<invalid>

l00008259_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid>

l00008255_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid>

l00008251_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid> r2:r2 - 547 r4:<invalid>

l00008241_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid>

l00008239_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid>

l00008235_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16) r10:<invalid>

l00008229_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16)

l00008225_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:DPB(r1, 0x8AB5, 16)



void PDCWrite(word32 r0, word32 r1, word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC ip r0 r1
// LiveOut:
// Trashed: NZCV r1 r8
// Preserved: sp
PDCWrite_entry:
// DataOut: ip r0 r1
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l0000829D:
	branch Z l0000829D_then
	word32 sp_3
	byte Z_4
	word32 r8_5
	word32 r0_6
	word32 ip_7
	byte NZCV_9
	word32 r1_10
	bool C_13
	call fn0118B979 (retsize: 0;)
		uses: sp_1,Z
		defs: C_8,ip_7,NZCV_9,r0_6,r1_10,r8_5,sp_3,Z_4
	return
// DataOut: ip r0 r1
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l0000829D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000082A1:
	branch Z_4 l000082A5
// DataOut: ip r0 r1
// DataOut (flags): C
// SymbolicIn: sp:fp

l000082A1_1:
	C_13 = (bool) cond(r0_6 + (ip_7 >> 6) + C_13) (alias)
// DataOut: r0 r1
// DataOut (flags): C
// SymbolicIn: sp:fp

l000082A5:
	branch C_13 l000082A9
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid>

l000082A5_1:
	Mem17[r1_10:word64] = r1_r0
	word32 r1_18 = r1_10 - __ror(r0_6, 31)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid>

l000082A9:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> r1:<invalid>

PDCWrite_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> r1:<invalid>



void vListInitialise(word32 r0, word32 r1, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV ip lr r0 r1 r2 r3 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV r0 r1 r2 r7 r8 r9
// Preserved: sp
vListInitialise_entry:
// DataOut: ip lr r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000082D1:
	branch Z l000082D5
// DataOut: ip lr r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000082D5:
	branch Z l000082D9
// DataOut: ip lr r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000082D9:
	branch ZC l000082DD
// DataOut: ip lr r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000082D9_1:
	r8 = (r3 << 2) - r0
// DataOut: ip lr r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000082DD:
	branch NZV l000082E1
// DataOut: ip lr r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:(r3 << 2) - r0

l000082DD_1:
	r0 = 0x00000CE8
// DataOut: ip lr r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:(r3 << 2) - r0

l000082E1:
	branch V l000082E5
// DataOut: ip lr r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:(r3 << 2) - r0 r0:0x00000CE8

l000082E1_1:
	r0 = __ror(0x00000CE8, 6) - r1
// DataOut: ip lr r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:(r3 << 2) - r0 r0:0x00000CE8

l000082E5:
	branch Z l000082E5_thunk_vListInitialiseItem
// DataOut: ip lr r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:(r3 << 2) - r0 r0:<invalid>

l000082E5_thunk_vListInitialiseItem:
	vListInitialiseItem(r0, r1, r2, r3, r5, r6, r7, r8, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:(r3 << 2) - r0 r0:<invalid>

l000082E5_1:
	word32 r0_61 = 0x000082ED + (r7 >> 32) + C
// DataOut: ip lr r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:(r3 << 2) - r0 r0:<invalid>

l000082E5_thunk_vListInitialiseItem:
	vListInitialiseItem(r0_61, r1, r2, r3, r5, r6, r7, r8, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:(r3 << 2) - r0 r0:<invalid>

l000082D5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000082D1_1:
	word32 sp_40
	byte Z_41
	word32 pc_42
	word32 r1_43
	byte ZC_44
	word32 r8_45
	word32 r0_46
	word32 r3_47
	byte NZV_48
	byte V_49
	word32 r7_50
	bool C_51
	byte NZCV_52
	word32 r2_53
	word32 r5_54
	word32 r6_55
	word32 ip_56
	word32 lr_57
	call (word32) Mem0[r1:int16] (retsize: 0;)
		uses: C,ip,lr,NZCV,NZV,pc,r0,r1_24,r2,r3,r5,r6,r7,r8,sp_1,V,Z,ZC
		defs: C_51,ip_56,lr_57,NZCV_52,NZV_48,pc_42,r0_46,r1_43,r2_53,r3_47,r5_54,r6_55,r7_50,r8_45,sp_40,V_49,Z_41,ZC_44
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

vListInitialise_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r8:<invalid> r0:<invalid> r9:<invalid> r7:<invalid> r2:<invalid>



void vListInitialiseItem(word32 r0, word32 r1, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV ip lr r0 r1 r2 r3 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV r0 r1 r2 r7 r8 r9
// Preserved: sp
vListInitialiseItem_entry:
// DataOut: ip lr r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000082E9:
	branch V l000082ED
// DataOut: ip lr r0 r1 r2 r3 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000082E9_1:
	r0 = (r3 >> 6) - r1
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l000082ED:
	branch ZC l000082ED_thunk_vListInsertEnd
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:(r3 >> 6) - r1

l000082ED_thunk_vListInsertEnd:
	vListInsertEnd(r0, r1, r2, r5, r6, r7, r8, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:(r3 >> 6) - r1

l000082ED_1:
	word32 r0_13 = 0x000082F5 + (r7 >> 32) + C
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:(r3 >> 6) - r1

l000082ED_thunk_vListInsertEnd:
	vListInsertEnd(r0_13, r1, r2, r5, r6, r7, r8, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

vListInitialiseItem_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r9:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> r8:<invalid>



void vListInsertEnd(word32 r0, word32 r1, word32 r2, word32 r5, word32 r6, word32 r7, word32 r8, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV ip lr r0 r1 r2 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV r0 r1 r2 r7 r8 r9
// Preserved: sp
vListInsertEnd_entry:
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000082F1:
	branch Z l000082F5
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000082F1_1:
	r0 = r0 & __ror(r8, 25)
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000082F5:
	branch Z l000082F9
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l000082F9:
	branch ZC l000082FD
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l000082FD:
	branch V l00008301
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l00008301:
	branch Z l00008305
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l00008301_1:
	word32 r9_22 = __ror(r0, 18) - r0
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l00008305:
	branch Z l00008309
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r9:<invalid>

l00008305_1:
	r0 = 0x00BC0000 - r1
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r9:<invalid>

l00008309:
	branch C l00008309_thunk_vListInsert
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r9:<invalid>

l00008309_thunk_vListInsert:
	vListInsert(r0, r1, r2, r5, r6, r7, r8, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r9:<invalid>

l00008309_1:
	word32 r7_13 = r7 - __rcr(r0, 1, C)
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r9:<invalid>

l00008309_thunk_vListInsert:
	vListInsert(r0, r1, r2, r5, r6, r7_13, r8, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r9:<invalid> r7:<invalid>

vListInsertEnd_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r9:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> r8:<invalid>

l000082FD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l000082F9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l000082F5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void vListInsert(word32 r0, word32 r1, word32 r2, word32 r5, word32 r6, word32 r7, word32 r8, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV ip lr r0 r1 r2 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV r0 r1 r2 r7 r8
// Preserved: sp
vListInsert_entry:
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000830D:
	branch V l00008311
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000830D_1:
	word32 sp_137
	byte V_138
	byte NZCV_144
	word32 pc_149
	word32 r5_151
	word32 r6_152
	word32 lr_153
	word32 r7_154
	call fn01A0B9E5 (retsize: 0;)
		uses: C,ip,lr,N,NV,NZCV,pc,r0,r1,r2,r5,r6,r7,r8,sp_1,V,Z,ZC
		defs: C_143,ip_142,lr_153,N_146,NV_147,NZCV_144,pc_149,r0_141,r1_140,r2_145,r5_151,r6_152,r7_154,r8_148,sp_137,V_138,Z_139,ZC_150
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008311:
	branch Z l00008315
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008311_1:
	r1 = r0 - (ip << r1) - C
	byte NZCV_130 = cond(r1)
	r1_r0 = SEQ(r1, r0) (alias)
	Z = NZCV_130 (alias)
	ZC = NZCV_130 (alias)
	N = NZCV_130 (alias)
	NV = NZCV_130 (alias)
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008315:
	branch Z l00008319
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid>

l00008315_1:
	Mem126[r2:word64] = r1_r0
	r2 = r2 - __ror(r1, 17)
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid>

l00008319:
	branch N l0000831D
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid>

l00008319_1:
	r1 = DPB(r1, 0x6AE0, 16)
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid>

l0000831D:
	branch NV l00008321
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid>

l0000831D_1:
	Mem123[r8 - 3176:byte] = (byte) r1
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid>

l00008321:
	branch Z l00008325
// DataOut: ip lr r0 r1 r2 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid> r8:r8 - 3176

l00008325:
	branch Z l00008329
// DataOut: ip lr r0 r1 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid> r8:r8 - 3176

l00008329:
	branch ZC l00008329_then
	word32 sp_91
	byte V_92
	byte Z_93
	word32 r1_94
	word32 ip_96
	bool C_97
	byte NZCV_98
	word32 r2_99
	byte N_100
	byte NV_101
	word32 r8_102
	word32 pc_103
	byte ZC_104
	word32 r5_105
	word32 r6_106
	word32 lr_107
	word32 r7_108
	word32 r0_110
	call fn0182E801 (retsize: 0;)
		uses: C_43,ip_31,lr_20,N_41,NV_40,NZCV_42,pc_24,r0_32,r1_49,r2_47,r5_22,r6_21,r7_19,r8_50,sp_36,V_46,Z_45,ZC_39
		defs: C_97,ip_96,lr_107,N_100,NV_101,NZCV_98,pc_103,r0_95,r1_94,r2_99,r5_105,r6_106,r7_108,r8_102,sp_91,V_92,Z_93,ZC_104
	return
// DataOut: ip lr r0 r1 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid> r8:r8 - 3176

l00008329_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid> r8:r8 - 3176

l0000832D:
	branch Z_93 l00008331
// DataOut: ip lr r0 r1 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid> r8:r8 - 3176

l0000832D_1:
	Mem115[r0_110:word32] = r5_105
	Mem116[r0_110 + 4:word32] = r6_106
	Mem117[r0_110 + 8:word32] = r8_102
	Mem118[r0_110 + 12:word32] = ip_96
	Mem119[r0_110 + 16:word32] = lr_107
	r0_110 = r0_110 + 20
// DataOut: r0 r1 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid> r8:r8 - 3176

l00008331:
	branch C_97 l00008335
// DataOut: r0 r1 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid> r8:r8 - 3176 r0:r0 + 20

l00008331_1:
	word32 r0_114 = __ror(r1_94, 8) - r0_110
// DataOut: r7
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid> r8:r8 - 3176 r0:r0 + 20

l00008335:
	branch Z_93 l00008339
// DataOut: r7
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid> r8:r8 - 3176 r0:<invalid>

l00008335_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid> r8:r8 - 3176 r0:<invalid>

l00008339:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid> r8:r8 - 3176 r0:<invalid> r7:r7 - 0x000000BC

l00008325_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid> r8:r8 - 3176

l00008321_1:
	word32 sp_73
	byte V_74
	byte Z_75
	word32 r1_76
	word32 r0_77
	word32 ip_78
	bool C_79
	byte NZCV_80
	word32 r2_81
	byte N_82
	byte NV_83
	word32 r8_84
	word32 pc_85
	byte ZC_86
	word32 r5_87
	word32 r6_88
	word32 lr_89
	word32 r7_90
	call (word32) Mem0[r2:byte] (retsize: 0;)
		uses: C_43,ip_31,lr_20,N_41,NV_40,NZCV_42,pc_24,r0_32,r1_49,r2_72,r5_22,r6_21,r7_19,r8_50,sp_36,V_46,Z_45,ZC_39
		defs: C_79,ip_78,lr_89,N_82,NV_83,NZCV_80,pc_85,r0_77,r1_76,r2_81,r5_87,r6_88,r7_90,r8_84,sp_73,V_74,Z_75,ZC_86
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid> r8:r8 - 3176

vListInsert_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r2:<invalid> r8:r8 - 3176 r0:<invalid> r7:r7 - 0x000000BC



void uxListRemove(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r8, word32 r9, word32 lr, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr lr pc r0 r1 r2 r3 r4 r5 r6 r8 r9
// LiveOut:
// Trashed: NZCV fp ip pc r1 r3 r4 r5 r6 r8 r9
// Preserved: sp
uxListRemove_entry:
// DataOut: cpsr lr pc r0 r1 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008341:
	branch ZC l00008345
// DataOut: cpsr lr pc r0 r1 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008345:
	branch ZC l00008349
// DataOut: cpsr lr pc r0 r1 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008345_1:
	r3 = Mem0[r4 + 4:word32]
	r5 = Mem0[r4 + 8:word32]
	r6 = Mem0[r4 + 12:word32]
	r4 = r4 + 20
// DataOut: cpsr lr pc r0 r1 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008349:
	branch ZC l0000834D
// DataOut: cpsr lr pc r0 r1 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r4:r4 + 20

l0000834D:
	branch N l00008351
// DataOut: cpsr lr pc r0 r1 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r4:r4 + 20

l0000834D_1:
	word32 sp_50
	byte ZC_51
	word32 ip_56
	word32 lr_63
	call fn010B04F5 (retsize: 0;)
		uses: cpsr,ip_8,lr,N,pc,r0,r1,r2,r3_11,r4_12,r5_10,r6_9,r8,r9,sp_1,V,Z,ZC
		defs: cpsr_59,ip_56,lr_63,N_57,pc_67,r0_62,r1_60,r2_65,r3_53,r4_52,r5_54,r6_55,r8_61,r9_66,sp_50,V_64,Z_58,ZC_51
// DataOut: cpsr lr pc r0 r1 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r4:r4 + 20

l00008351:
	branch N l00008355
// DataOut: cpsr lr pc r0 r1 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r4:r4 + 20

l00008355:
	branch Z l00008359
// DataOut: cpsr lr pc r0 r1 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r4:r4 + 20

l00008355_1:
	__msr(cpsr, 0x00000060)
// DataOut: cpsr lr pc r0 r1 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r4:r4 + 20

l00008359:
	branch N l0000835D
// DataOut: cpsr lr pc r0 r1 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r4:r4 + 20

l00008359_1:
	Mem45[r1:word32] = r3
	Mem46[r1 + 4:word32] = r5
	Mem47[r1 + 8:word32] = r6
	Mem48[r1 + 12:word32] = r8
// DataOut: cpsr lr pc r0 r2 r3 r4 r5 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r4:r4 + 20

l0000835D:
	branch Z l00008361
// DataOut: cpsr lr pc r0 r2 r3 r4 r5 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r4:r4 + 20 r1:r1 + 16

l0000835D_1:
// DataOut: cpsr pc r0 r2 r3 r4 r5 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r4:r4 + 20 r1:r1 + 16

l00008361:
	branch V l00008361_thunk_xQueueCRSend
// DataOut: cpsr pc r0 r2 r3 r4 r5 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r4:r4 + 20 r1:<invalid>

l00008361_thunk_xQueueCRSend:
	xQueueCRSend(r0, r2, r3, r4, r5, r9, pc, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r4:r4 + 20 r1:<invalid>

uxListRemove_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r4:r4 + 20 r1:<invalid> fp:0x00003FF0 pc:<invalid> r9:<invalid> r8:<invalid>

l00008361_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r4:r4 + 20 r1:<invalid>

l00008351_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r4:r4 + 20

l00008349_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r5:<invalid> r6:<invalid> ip:<invalid> r4:r4 + 20

l00008341_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xQueueCRSend(word32 r0, word32 r2, word32 r3, word32 r4, word32 r5, word32 r9, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr pc r0 r2 r3 r4 r5 r9
// LiveOut:
// Trashed: NZCV fp pc r1 r8 r9
// Preserved: sp
xQueueCRSend_entry:
// DataOut: cpsr pc r0 r2 r3 r4 r5 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008365:
	branch Z l00008369
// DataOut: cpsr pc r0 r2 r3 r4 r5 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008369:
	branch N l0000836D
// DataOut: cpsr pc r0 r2 r3 r4 r5 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008369_1:
	__syscall(0x00461446)
// DataOut: cpsr pc r0 r2 r3 r4 r5 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000836D:
	branch ZC l00008371
// DataOut: cpsr pc r0 r2 r3 r4 r5 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000836D_1:
// DataOut: cpsr pc r0 r2 r3 r4 r5 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008371:
	branch NZV l00008375
// DataOut: cpsr pc r0 r2 r3 r4 r5 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0

l00008371_1:
	__syscall(0x008811F3)
// DataOut: cpsr pc r0 r2 r3 r4 r5 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0

l00008375:
	branch NZV l00008379
// DataOut: cpsr pc r0 r2 r3 r4 r5 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0

l00008375_1:
	__syscall(0x008F6FF3)
// DataOut: cpsr pc r0 r2 r3 r4 r5 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0

l00008379:
	branch Z l0000837D
// DataOut: cpsr pc r0 r2 r3 r4 r5 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0

l00008379_1:
	Mem139[0x00008381 + __ror(r3, 31):word32] = r5_r4
	word32 pc_142 = pc + __ror(r3, 31)
// DataOut: cpsr r0 r2 r3 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0

l0000837D:
	branch NZV l0000837D_then
	word32 sp_8
	byte Z_9
	byte N_10
	byte ZC_11
	word32 fp_12
	byte NZV_13
	word32 pc_14
	word32 r3_15
	word32 r1_16
	word32 r0_17
	word32 r2_18
	bool C_19
	byte NZCV_20
	word32 r9_21
	word32 r8_22
	byte V_23
	word32 cpsr_24
	word32 r4_25
	word32 r5_26
	call fnFFE47745 (retsize: 0;)
		uses: fp_6,N,NZV,sp_1,Z,ZC
		defs: C_19,cpsr_24,fp_12,N_10,NZCV_20,NZV_13,pc_14,r0_17,r1_16,r2_18,r3_15,r4_25,r5_26,r8_22,r9_21,sp_8,V_23,Z_9,ZC_11
	return
// DataOut: cpsr r0 r2 r3 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid>

l0000837D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid>

l00008381:
	branch ZC_11 l00008381_then
	word32 sp_27
	byte ZC_30
	word32 fp_31
	word32 pc_33
	word32 r3_34
	word32 r1_35
	word32 r0_36
	word32 r2_37
	bool C_38
	byte NZCV_39
	word32 r9_40
	word32 r8_41
	word32 cpsr_43
	word32 r4_44
	word32 r5_45
	byte NZV_124
	byte Z_122
	byte V_117
	byte N_112
	call fn01B03135 (retsize: 0;)
		uses: C_19,cpsr_24,fp_12,N_10,NZCV_20,NZV_13,pc_14,r0_17,r1_16,r2_18,r3_15,r4_25,r5_26,r8_22,r9_21,sp_8,V_23,Z_9,ZC_11
		defs: C_38,cpsr_43,fp_31,N_29,NZCV_39,NZV_32,pc_33,r0_36,r1_35,r2_37,r3_34,r4_44,r5_45,r8_41,r9_40,sp_27,V_42,Z_28,ZC_30
	return
// DataOut: cpsr r0 r2 r3 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid>

l00008381_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid>

l00008385:
	branch Z_122 l00008389
// DataOut: cpsr r0 r2 r3 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid>

l00008385_1:
	byte NZCV_131 = cond(r0_36 - (r2_37 >> 8) - C_38)
	N_112 = NZCV_131 (alias)
	Z_122 = NZCV_131 (alias)
	NZV_124 = NZCV_131 (alias)
	V_117 = NZCV_131 (alias)
// DataOut: cpsr r0 r3 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid>

l00008389:
	branch Z_122 l0000838D
// DataOut: cpsr r0 r3 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid>

l00008389_1:
// DataOut: cpsr r0 r3
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid>

l0000838D:
	branch Z_122 l00008391
// DataOut: cpsr r0 r3
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32

l0000838D_1:
	byte NZCV_119 = cond(~(r0_36 >> 32))
	N_112 = NZCV_119 (alias)
	Z_122 = NZCV_119 (alias)
	NZV_124 = NZCV_119 (alias)
	V_117 = NZCV_119 (alias)
// DataOut: cpsr r3
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32

l00008391:
	branch NZV_124 l00008395
// DataOut: cpsr r3
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32 r8:~(r0 >> 32)

l00008391_1:
	__syscall(0x00F04F88)
// DataOut: cpsr r3
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32 r8:~(r0 >> 32)

l00008395:
	branch Z_122 l00008399
// DataOut: cpsr r3
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32 r8:~(r0 >> 32)

l00008395_1:
	byte NZCV_111 = cond(~(r3_34 << 6))
	N_112 = NZCV_111 (alias)
	V_117 = NZCV_111 (alias)
// DataOut: cpsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32 r8:~(r0 >> 32)

l00008399:
	branch V_117 l0000839D
// DataOut: cpsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32 r8:<invalid>

l00008399_1:
	__syscall(0x00F3BF88)
// DataOut: cpsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32 r8:<invalid>

l0000839D:
	branch N_112 l000083A1
// DataOut: cpsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32 r8:<invalid>

l0000839D_1:
	__syscall(0x00F3BF8F)
// DataOut: cpsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32 r8:<invalid>

l000083A1:
	word32 sp_72
	byte Z_73
	byte N_74
	byte ZC_75
	word32 fp_76
	byte NZV_77
	word32 pc_78
	word32 r3_79
	word32 r1_80
	word32 r0_81
	word32 r2_82
	bool C_83
	byte NZCV_84
	word32 r9_85
	word32 r8_86
	byte V_87
	word32 cpsr_88
	word32 r4_89
	word32 r5_90
	call fn01AF2DE5 (retsize: 0;)
		uses: C_67,cpsr_43,fp_31,N_70,NZCV_66,NZV_68,pc_33,r0_36,r1_55,r2_37,r3_34,r4_44,r5_45,r8_65,r9_54,sp_27,V_64,Z_71,ZC_69
		defs: C_83,cpsr_88,fp_76,N_74,NZCV_84,NZV_77,pc_78,r0_81,r1_80,r2_82,r3_79,r4_89,r5_90,r8_86,r9_85,sp_72,V_87,Z_73,ZC_75
	branch Z_73 l000083A5_then
	word32 sp_91
	byte Z_92
	byte N_93
	byte ZC_94
	word32 fp_95
	byte NZV_96
	word32 pc_97
	word32 r3_98
	word32 r1_99
	word32 r0_100
	word32 r2_101
	bool C_102
	byte NZCV_103
	word32 r9_104
	word32 r8_105
	byte V_106
	word32 cpsr_107
	word32 r4_108
	word32 r5_109
	call fn010AED59 (retsize: 0;)
		uses: C_83,cpsr_88,fp_76,N_74,NZCV_84,NZV_77,pc_78,r0_81,r1_80,r2_82,r3_79,r4_89,r5_90,r8_86,r9_85,sp_72,V_87,Z_73,ZC_75
		defs: C_102,cpsr_107,fp_95,N_93,NZCV_103,NZV_96,pc_97,r0_100,r1_99,r2_101,r3_98,r4_108,r5_109,r8_105,r9_104,sp_91,V_106,Z_92,ZC_94
	return
// DataOut: cpsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32 r8:<invalid>

l000083A5_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32 r8:<invalid>

l000083A9:
	branch ZC_94 l000083AD
// DataOut: cpsr
// DataOut (flags): V
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32 r8:<invalid>

l000083A9_1:
	__msr(cpsr_107, 0x000000D3)
// DataOut:
// DataOut (flags): V
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32 r8:<invalid>

l000083AD:
	branch V_106 l000083B1
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32 r8:<invalid>

l000083B1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32 r8:<invalid>

xQueueCRSend_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32 r8:<invalid>

l000083AD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 pc:<invalid> r1:<invalid> r9:r9 + 32 r8:<invalid>

l00008365_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xQueueCRReceive(word32 r1, word32 r3, word32 r4, word32 r6, word32 r9, word32 dwArg00, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV r1 r3 r4 r6 r9
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0010(32)
// Terminates process
xQueueCRReceive_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

xQueueCRReceive_entry:
// DataOut: r1 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0010(32)

l00008401:
	branch N l00008405
// DataOut: r1 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0010(32)

l00008401_1:
	__syscall(0x004604B5)
// DataOut: r1 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0010(32)

l00008405:
	branch ZC l00008409
// DataOut: r1 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0010(32)

l00008405_1:
// DataOut: r1 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0010(32)

l00008409:
	branch NZV l0000840D
// DataOut: r1 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0
// LocalsOut: fp(32) Stack +0010(32)

l00008409_1:
	__syscall(0x008811F3)
// DataOut: r1 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0
// LocalsOut: fp(32) Stack +0010(32)

l0000840D:
	branch NZV l00008411
// DataOut: r1 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0
// LocalsOut: fp(32) Stack +0010(32)

l0000840D_1:
	__syscall(0x008F6FF3)
// DataOut: r1 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0
// LocalsOut: fp(32) Stack +0010(32)

l00008411:
	branch ZC l00008415
// DataOut: r1 r3 r4 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0
// LocalsOut: fp(32) Stack +0010(32)

l00008411_1:
	Mem134[0x0000940C:word32] = r4
// DataOut: r1 r3 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0
// LocalsOut: fp(32) Stack +0010(32)

l00008415:
	branch Z l00008419
// DataOut: r1 r3 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0
// LocalsOut: fp(32) Stack +0010(32)

l00008415_1:
	byte NZCV_126 = cond(r9 + __ror(0x00003FF0, 26) + C)
	N = NZCV_126 (alias)
	C = (bool) NZCV_126 (alias)
	ZC = NZCV_126 (alias)
	NZV = NZCV_126 (alias)
	Z = NZCV_126 (alias)
	V = NZCV_126 (alias)
// DataOut: r1 r3 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0
// LocalsOut: fp(32) Stack +0010(32)

l00008419:
	branch ZC l0000841D
// DataOut: r1 r3 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid>
// LocalsOut: fp(32) Stack +0010(32)

l00008419_1:
	r3 = r1 - 0x02A00000 - C
	byte NZCV_117 = cond(r3)
	N = NZCV_117 (alias)
	C = (bool) NZCV_117 (alias)
	NZV = NZCV_117 (alias)
	Z = NZCV_117 (alias)
	V = NZCV_117 (alias)
// DataOut: r3 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid>
// LocalsOut: fp(32) Stack +0010(32)

l0000841D:
	branch Z l00008421
// DataOut: r3 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid>
// LocalsOut: fp(32) Stack +0010(32)

l00008421:
	branch Z l00008425
// DataOut: r3 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid>
// LocalsOut: fp(32) Stack +0010(32)

l00008421_1:
	r3 = fp + (r6 >> 16) + C
	byte NZCV_108 = cond(r3)
	N = NZCV_108 (alias)
	C = (bool) NZCV_108 (alias)
	NZV = NZCV_108 (alias)
	Z = NZCV_108 (alias)
	V = NZCV_108 (alias)
// DataOut: r3
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid>
// LocalsOut: Stack +0010(32)

l00008425:
	branch Z l00008429
// DataOut: r3
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid>
// LocalsOut: Stack +0010(32)

l00008425_1:
	byte NZCV_99 = cond(~(r3 >> 6))
	N = NZCV_99 (alias)
	C = (bool) NZCV_99 (alias)
	NZV = NZCV_99 (alias)
	Z = NZCV_99 (alias)
	V = NZCV_99 (alias)
// DataOut: r3
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid>
// LocalsOut: Stack +0010(32)

l00008429:
	branch NZV l0000842D
// DataOut: r3
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid> r8:<invalid>
// LocalsOut: Stack +0010(32)

l00008429_1:
	__syscall(0x00F04F88)
// DataOut: r3
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid> r8:<invalid>
// LocalsOut: Stack +0010(32)

l0000842D:
	branch Z l00008431
// DataOut: r3
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid> r8:<invalid>
// LocalsOut: Stack +0010(32)

l0000842D_1:
	byte NZCV_91 = cond(~(r3 << 6))
	N = NZCV_91 (alias)
	C = (bool) NZCV_91 (alias)
	Z = NZCV_91 (alias)
	V = NZCV_91 (alias)
// DataOut: r3
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid> r8:<invalid>
// LocalsOut: Stack +0010(32)

l00008431:
	branch V l00008435
// DataOut: r3
// DataOut (flags): NZC
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid> r8:<invalid>
// LocalsOut: Stack +0010(32)

l00008431_1:
	__syscall(0x00F3BF88)
// DataOut: r3
// DataOut (flags): NZC
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid> r8:<invalid>
// LocalsOut: Stack +0010(32)

l00008435:
	branch N l00008439
// DataOut: r3
// DataOut (flags): ZC
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid> r8:<invalid>
// LocalsOut: Stack +0010(32)

l00008435_1:
	__syscall(0x00F3BF8F)
// DataOut: r3
// DataOut (flags): ZC
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid> r8:<invalid>
// LocalsOut: Stack +0010(32)

l00008439:
	branch C l0000843D
// DataOut: r3
// DataOut (flags): Z
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid> r8:<invalid>
// LocalsOut: Stack +0010(32)

l00008439_1:
// DataOut: r3
// DataOut (flags): Z
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid> r8:<invalid>
// LocalsOut: Stack +0010(32)

l0000843D:
	branch Z l00008441
// DataOut: r3
// DataOut (flags): Z
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid> r8:<invalid>
// LocalsOut: Stack +0010(32)

l00008441:
	branch Z l00008445
// DataOut: r3
// DataOut (flags): Z
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid> r8:<invalid>
// LocalsOut: Stack +0010(32)

l00008441_1:
	Z = cond(~(r3 >> 6)) (alias)
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid> r8:<invalid>
// LocalsOut: Stack +0010(32)

l00008445:
	branch Z l00008449
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid> r8:<invalid>
// LocalsOut: Stack +0010(32)

l00008445_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid> r8:<invalid>

l00008449:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> fp:<invalid> r2:<invalid> r3:<invalid> r8:<invalid> r7:<invalid> ip:<invalid>

l0000843D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid> r8:<invalid>

l0000841D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x00003FF0 r2:<invalid> r3:<invalid>



void xQueueCRSendFromISR(word32 r6)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC r6
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xQueueCRSendFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

xQueueCRSendFromISR_entry:
// DataOut: r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000084A1:
	branch ZC l000084A5
// DataOut: r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000084A5:
	branch ZC l000084A9
// DataOut: r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000084A9:
	branch C l000084AD
// DataOut: r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000084AD:
	branch Z l000084B1
// DataOut: r6
// DataOut (flags): C
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000084AD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000084B1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:<invalid>

l000084A9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000084A5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000084A1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xQueueCRReceiveFromISR(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 ip, word32 lr, word32 pc, word32 spsr, word32 dwArg00, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV ip lr pc r0 r1 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: fp ip lr r0 r10 r4 r5 r6 r7 r8 r9 sp
// Preserved: sp
// Stack args: Stack +0000(32) Stack +000C(32)
xQueueCRReceiveFromISR_entry:
// DataOut: ip lr pc r0 r1 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084D5:
	__msr(spsr, 0x000003B5)
	branch NZV l000084DD
// DataOut: ip lr pc r0 r1 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084D9_1:
	Mem172[r8:word16] = (uint16) ip
	r8 = r8 - 49
// DataOut: lr pc r0 r1 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084DD:
	branch N l000084E1
// DataOut: lr pc r0 r1 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 49
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084DD_1:
	Mem170[r0:byte] = (byte) r4
	r0 = r0 + 248
// DataOut: lr pc r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 49
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084E1:
	branch NV l000084E5
// DataOut: lr pc r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:r0 + 248
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084E1_1:
// DataOut: lr pc r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:r0 + 248
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084E5:
	branch Z l000084E9
// DataOut: lr pc r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:r0 + 248 r7:DPB(r7, 0x4368, 16)
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084E5_1:
	Mem167[r6:byte] = (byte) r0
	r6 = r6 - 3650
// DataOut: lr pc r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:r0 + 248 r7:DPB(r7, 0x4368, 16)
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084E9:
	branch ZC l000084ED
// DataOut: lr pc r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:r0 + 248 r7:DPB(r7, 0x4368, 16) r6:r6 - 3650
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084E9_1:
	Mem166[r6 - (r6 >> 10):byte] = (byte) r1
// DataOut: lr pc r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:r0 + 248 r7:DPB(r7, 0x4368, 16) r6:r6 - 3650
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084ED:
	branch C l000084F1
// DataOut: lr pc r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:r0 + 248 r7:DPB(r7, 0x4368, 16) r6:r6 - 3650
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084ED_1:
	Mem156[r0:word32] = r0
	Mem157[r0 + 4:word32] = r1
	Mem158[r0 + 8:word32] = r3
	Mem159[r0 + 12:word32] = r5
	Mem160[r0 + 16:word32] = r6
	Mem161[r0 + 20:word32] = r8
	Mem162[r0 + 24:word32] = r9
	Mem163[r0 + 28:word32] = lr
	Mem164[r0 + 32:word32] = pc
// DataOut: r0 r3 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:r0 + 248 r7:DPB(r7, 0x4368, 16) r6:r6 - 3650
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084F1:
	branch Z l000084F5
// DataOut: r0 r3 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:DPB(r7, 0x4368, 16) r6:r6 - 3650
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084F5:
	branch C l000084F9
// DataOut: r0 r3 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:DPB(r7, 0x4368, 16) r6:r6 - 3650
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084F9:
	branch Z l000084FD
// DataOut: r0 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:DPB(r7, 0x4368, 16) r6:r6 - 3650
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084FD:
	branch C l00008501
// DataOut: r0 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:DPB(r7, 0x4368, 16) r6:r6 - 3650
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l000084FD_1:
// DataOut: r0 r3 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:DPB(r7, 0x4368, 16) r6:r6 - 3650
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l00008501:
	branch Z l00008505
// DataOut: r0 r3 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l00008501_1:
// DataOut: r0 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l00008505:
	branch C l00008509
// DataOut: r0 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l00008505_1:
	word32 sp_132
	word32 spsr_133
	byte NZV_134
	word32 ip_135
	word32 r8_136
	byte N_137
	word32 r4_138
	word32 r0_139
	byte NV_140
	word32 r7_141
	word32 r6_143
	byte ZC_144
	word32 r1_145
	word32 r3_147
	word32 r5_148
	word32 r9_149
	word32 lr_150
	word32 pc_151
	word32 r10_152
	word32 fp_153
	call fnFFE200CD (retsize: 0;)
		uses: C,fp,ip,lr,N,NV,NZV,pc,r0_17,r1,r10_59,r3,r4,r5,r6_14,r7_57,r8_5,r9,sp_1,spsr,Z,ZC
		defs: C_146,fp_153,ip_135,lr_150,N_137,NV_140,NZV_134,pc_151,r0_139,r1_145,r10_152,r3_147,r4_138,r5_148,r6_143,r7_141,r8_136,r9_149,sp_132,spsr_133,Z_142,ZC_144
// DataOut: r0 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l00008509:
	branch C l0000850D
// DataOut: r0 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l00008509_1:
// DataOut: r0 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l0000850D:
	branch Z l00008511
// DataOut: r0 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l00008511:
	branch Z l00008515
// DataOut: r0 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3
// LocalsOut: fp(32) Stack +0000(32) Stack +000C(32)

l00008515:
	branch Z l00008519
// DataOut: r0 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3
// LocalsOut: fp(32) Stack +0000(32)

l00008519:
	branch Z l0000851D
// DataOut: r0 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3
// LocalsOut: fp(32) Stack +0000(32)

l0000851D:
	branch Z l00008521
// DataOut: r0 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3
// LocalsOut: fp(32) Stack +0000(32)

l0000851D_1:
// DataOut: r0 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3

l00008521:
	branch Z l00008525
// DataOut: r0 r8
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3 fp:<invalid>

l00008521_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3 fp:<invalid>

l00008525:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3 fp:<invalid> pc:<invalid>

l00008519_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3

l00008515_1:
	word32 sp_101
	word32 spsr_102
	byte NZV_103
	word32 ip_104
	word32 r8_105
	byte N_106
	word32 r4_107
	word32 r0_108
	byte NV_109
	word32 r7_110
	byte Z_111
	word32 r6_112
	byte ZC_113
	word32 r1_114
	byte C_115
	word32 r3_116
	word32 r5_117
	word32 r9_118
	word32 lr_119
	word32 pc_120
	word32 r10_121
	word32 fp_122
	call dwArg00 (retsize: 0; depth: -2118)
		uses: C_68,fp_83,ip_84,lr_86,N_73,NV_72,NZV_74,pc_66,r0_88,r1_69,r10_82,r3_67,r4_77,r5_78,r6_79,r7_87,r8_80,r9_81,sp_100,spsr_75,Z_71,ZC_70
		defs: C_115,fp_122,ip_104,lr_119,N_106,NV_109,NZV_103,pc_120,r0_108,r1_114,r10_121,r3_116,r4_107,r5_117,r6_112,r7_110,r8_105,r9_118,sp_101,spsr_102,Z_111,ZC_113
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3

l00008511_1:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3

l0000850D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:<invalid> r6:r6 - 3650 r10:0x01180000 - r3

l000084F9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:DPB(r7, 0x4368, 16) r6:r6 - 3650

l000084F5_1:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:DPB(r7, 0x4368, 16) r6:r6 - 3650

xQueueCRReceiveFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r7:<invalid> r6:<invalid> r4:<invalid> r5:<invalid> r9:<invalid> r10:<invalid> fp:<invalid> ip:<invalid> lr:<invalid>

l000084F1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 49 r0:<invalid> r7:DPB(r7, 0x4368, 16) r6:r6 - 3650



void prvIdleTask(word32 r0, word32 r1, word32 r3, word32 r5, word32 r6, word32 r8, word32 fp, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  CV fp pc r0 r1 r3 r5 r6 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
prvIdleTask_entry:
// DataOut: fp pc r0 r1 r3 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000852D:
	branch V l00008531
// DataOut: fp pc r0 r1 r3 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000852D_1:
	__syscall(0x00F7FFB5)
// DataOut: fp pc r0 r1 r3 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00008531:
	branch C l00008531_thunk_xTaskNotifyStateClear
// DataOut: fp pc r0 r1 r3 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00008531_thunk_xTaskNotifyStateClear:
	xTaskNotifyStateClear(r0, r1, r3, r5, r6, r8, fp, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

prvIdleTask_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008531_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xTaskNotifyStateClear(word32 r0, word32 r1, word32 r3, word32 r5, word32 r6, word32 r8, word32 fp, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp pc r0 r1 r3 r5 r6 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xTaskNotifyStateClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

xTaskNotifyStateClear_entry:
// DataOut: fp pc r0 r1 r3 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00008535:
	branch Z l00008539
// DataOut: fp pc r0 r1 r3 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00008535_1:
// DataOut: fp pc r0 r3 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00008539:
	branch Z l0000853D
// DataOut: fp pc r0 r3 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid>

l0000853D:
	branch V l00008541
// DataOut: fp pc r0 r3 r5 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid>

l0000853D_1:
// DataOut: fp pc r0 r3 r5 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid>

l00008541:
	branch Z l00008545
// DataOut: fp pc r0 r3 r5 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid> r8:r8 + 1272 r9:<invalid>

l00008541_1:
	Mem39[fp - 560:word32] = r0
// DataOut: pc r0 r3 r5 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid> r8:r8 + 1272 r9:<invalid>

l00008545:
	branch Z l00008549
// DataOut: pc r0 r3 r5 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid> r8:r8 + 1272 r9:<invalid> fp:fp - 560

l00008545_1:
	Mem37[r3 - pc:word16] = (uint16) r0
// DataOut: r0 r5 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid> r8:r8 + 1272 r9:<invalid> fp:fp - 560

l00008549:
	branch ZC l0000854D
// DataOut: r0 r5 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid> r8:r8 + 1272 r9:<invalid> fp:fp - 560 r3:r3 - pc

l00008549_1:
	Mem33[r5:word32] = r0
// DataOut: r0 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid> r8:r8 + 1272 r9:<invalid> fp:fp - 560 r3:r3 - pc

l0000854D:
	branch Z l00008551
// DataOut: r0 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid> r8:r8 + 1272 r9:<invalid> fp:fp - 560 r3:r3 - pc r5:r5 - 37

l0000854D_1:
// DataOut: r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid> r8:r8 + 1272 r9:<invalid> fp:fp - 560 r3:r3 - pc r5:r5 - 37

l00008551:
	branch C l00008555
// DataOut: r6
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid> r8:r8 + 1272 r9:<invalid> fp:fp - 560 r3:r3 - pc r5:r5 - 37 r0:r0 + 72 r6:<invalid>

l00008555:
	branch Z l00008559
// DataOut: r6
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid> r8:r8 + 1272 r9:<invalid> fp:fp - 560 r3:r3 - pc r5:r5 - 37 r0:r0 + 72 r6:<invalid>

l00008555_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid> r8:r8 + 1272 r9:<invalid> fp:fp - 560 r3:r3 - pc r5:r5 - 37 r0:r0 + 72 r6:<invalid>

l00008559:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid> r8:r8 + 1272 r9:<invalid> fp:fp - 560 r3:<invalid> r5:r5 - 37 r0:r0 + 72 r6:<invalid>

l00008551_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid> r8:r8 + 1272 r9:<invalid> fp:fp - 560 r3:r3 - pc r5:r5 - 37 r0:r0 + 72 r6:<invalid>

l00008539_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r1 + 2229 r7:<invalid>



void xPortRaisePrivilege(word32 r0, word32 r1, word32 r2, word32 r6)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZV r0 r1 r2 r6
// LiveOut:
// Trashed: r0
// Preserved: sp
xPortRaisePrivilege_entry:
// DataOut: r0 r1 r2 r6
// DataOut (flags): ZV
// SymbolicIn: sp:fp

l00008565:
	branch Z l00008569
// DataOut: r0 r1 r2 r6
// DataOut (flags): ZV
// SymbolicIn: sp:fp

l00008569:
	branch Z l00008569_then
	word32 sp_3
	byte Z_4
	byte V_6
	word32 r1_7
	word32 r2_8
	word32 r6_9
	word32 r0_10
	call fn003C8D31 (retsize: 0;)
		uses: sp_1,Z
		defs: r0_5,r1_7,r2_8,r6_9,sp_3,V_6,Z_4
	return
// DataOut: r0 r1 r2 r6
// DataOut (flags): ZV
// SymbolicIn: sp:fp

l00008569_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000856D:
	branch Z_4 l00008571
// DataOut: r0 r1 r2 r6
// DataOut (flags): ZV
// SymbolicIn: sp:fp

l0000856D_1:
	r0_10 = r0_10 ^ 0x000000BF
// DataOut: r0 r1 r2 r6
// DataOut (flags): ZV
// SymbolicIn: sp:fp

l00008571:
	branch V_6 l00008575
// DataOut: r0 r1 r2 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:r0 ^ 0x000000BF

l00008575:
	branch Z_4 l00008575_thunk_vPortEnterCritical
// DataOut: r0 r1 r2 r6
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 ^ 0x000000BF

l00008575_thunk_vPortEnterCritical:
	vPortEnterCritical()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 ^ 0x000000BF
// Terminates process

l00008575_1:
	Mem12[r0_10 + -12:word32] = r0_10
	Mem13[r0_10 + -8:word32] = r1_7
	Mem14[r0_10 + -4:word32] = r2_8
	Mem15[r0_10:word32] = r6_9
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 ^ 0x000000BF

l00008575_thunk_vPortEnterCritical:
	vPortEnterCritical()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:(r0 ^ 0x000000BF ^ 0x000000BF) - 16
// Terminates process

xPortRaisePrivilege_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 ^ 0x000000BF

l00008571_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 ^ 0x000000BF

l00008565_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vPortEnterCritical()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vPortEnterCritical_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

vPortEnterCritical_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008579:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vPortExitCritical(word32 r0, word32 r1, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 fp, word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip r0 r1 r10 r4 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vPortExitCritical_entry:
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000085B1:
	branch NZV l000085B5
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000085B5:
	branch Z l000085B9
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000085B5_1:
	r0 = DPB(r0, 0xA8FF, 16)
	r1_r0 = SEQ(r1, r0) (alias)
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000085B9:
	branch Z l000085BD
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0xA8FF, 16)

l000085B9_1:
	byte NZCV_42 = cond(fp ^ 0x0000001A)
	NZV = NZCV_42 (alias)
	Z = NZCV_42 (alias)
	ZC = NZCV_42 (alias)
	N = NZCV_42 (alias)
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0xA8FF, 16)

l000085BD:
	branch ZC l000085C1
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0xA8FF, 16)

l000085BD_1:
	r0 = 0x00018000
	r1_r0 = SEQ(r1, 0x00018000) (alias)
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0xA8FF, 16)

l000085C1:
	branch Z l000085C5
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l000085C5:
	__syscall(0x00D00528)
	branch N l000085CD
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l000085CD:
	branch ZC l000085D1
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid>

l000085CD_1:
	Mem37[r0:word64] = r1_r0
	r0 = r0 - __ror(r0, 3)
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid>

l000085D1:
	branch Z l000085D5
// DataOut: fp ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid>

l000085D1_1:
	Mem21[r8:word32] = r0
	Mem24[r8 + 4:word32] = r1
	Mem26[r8 + 8:word32] = r4
	Mem28[r8 + 12:word32] = r5
	Mem30[r8 + 16:word32] = r6
	Mem32[r8 + 20:word32] = r7
	Mem34[r8 + 24:word32] = r10
	Mem36[r8 + 28:word32] = ip
// DataOut: fp r0
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid>

l000085D5:
	branch NZV l000085D9
// DataOut: fp r0
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid>

l000085D9:
	branch Z l000085D9_thunk_vParTestInitialise
// DataOut: fp r0
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid>

l000085D9_thunk_vParTestInitialise:
	vParTestInitialise(r0, fp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>
// Terminates process

vPortExitCritical_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000085D9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l000085D5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l000085C9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l000085C1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l000085B1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vParTestInitialise(word32 r0, word32 fp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZV fp r0
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vParTestInitialise_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

vParTestInitialise_entry:
// DataOut: fp r0
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l000085DD:
	branch Z l000085E1
// DataOut: fp r0
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l000085DD_1:
	__syscall(0x00F7FFB5)
// DataOut: fp r0
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l000085E1:
	branch Z l000085E5
// DataOut: fp r0
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l000085E1_1:
	Mem5[fp - 1022:byte] = (byte) r0
// DataOut:
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l000085E5:
	branch NZV l000085E9
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000085E9:
	__syscall(0x004008E8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000085E5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vParTestSetLED(word32 r0, word32 r1, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr r0 r1 r3 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV r0 r3 r4 r5
// Preserved: sp
vParTestSetLED_entry:
// DataOut: cpsr r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000085F5:
	branch Z l000085F9
// DataOut: cpsr r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000085F9:
	branch V l000085FD
// DataOut: cpsr r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000085F9_1:
	Z = cond(~(r6 >> 32)) (alias)
// DataOut: cpsr r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000085FD:
	branch Z l00008601
// DataOut: cpsr r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r6 >> 32)
// LocalsOut: fp(32)

l00008601:
	branch Z l00008605
// DataOut: cpsr r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r6 >> 32)
// LocalsOut: fp(32)

l00008601_1:
	__msr(cpsr, 0x000001D8)
// DataOut: r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r6 >> 32)
// LocalsOut: fp(32)

l00008605:
	branch Z l00008609
// DataOut: r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r6 >> 32)
// LocalsOut: fp(32)

l00008609:
	branch Z l00008609_then
	word32 sp_14
	byte V_16
	word32 r0_17
	word32 r6_18
	byte NZCV_19
	word32 cpsr_20
	word32 r4_21
	word32 r1_22
	word32 r8_23
	word32 r9_28
	word32 r7_29
	byte NZV_25
	bool C_24
	word32 r3_26
	word32 r5_27
	byte Z_15
	call fnFECB873D (retsize: 0;)
		uses: C_13,NZCV_9,NZV_12,r0_8,sp_1,V_11,Z_10
		defs: C_24,cpsr_20,NZCV_19,NZV_25,r0_17,r1_22,r3_26,r4_21,r5_27,r6_18,r7_29,r8_23,r9_28,sp_14,V_16,Z_15
	return
// DataOut: r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r6 >> 32)
// LocalsOut: fp(32)

l00008609_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:~(r6 >> 32)

l0000860D:
	branch Z_15 l00008611
// DataOut: r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r6 >> 32)
// LocalsOut: fp(32)

l0000860D_1:
	byte NZCV_56 = cond(r1_22 + __ror(r8_23, fp) + C_24)
	Z_15 = NZCV_56 (alias)
	NZV_25 = NZCV_56 (alias)
	C_24 = (bool) NZCV_56 (alias)
// DataOut: r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r6 >> 32)

l00008611:
	branch Z_15 l00008615
// DataOut: r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r6 >> 32) r4:<invalid>

l00008615:
	__syscall(0x00200578)
	branch NZV_25 l0000861D
// DataOut: r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:~(r6 >> 32) r4:<invalid>

l0000861D:
	branch Z_15 l00008621
// DataOut: r0 r1 r3 r5 r6 r7 r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:~(r6 >> 32) r4:<invalid>

l0000861D_1:
	r3_26 = r0_17 - __ror(r8_23, 17)
// DataOut: r0 r1 r3 r5 r6 r7 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:~(r6 >> 32) r4:<invalid>

l00008621:
	branch C_24 l00008625
// DataOut: r0 r1 r3 r5 r6 r7 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:~(r6 >> 32) r4:<invalid> r3:<invalid>

l00008621_1:
	r5_27 = r9_28 + 0x00000F00 + C_24
	Z_15 = cond(r5_27) (alias)
// DataOut: r0 r1 r3 r5 r6 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:~(r6 >> 32) r4:<invalid> r3:<invalid>

l00008625:
	branch Z_15 l00008629
// DataOut: r0 r1 r3 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp r0:~(r6 >> 32) r4:<invalid> r3:<invalid> r5:<invalid>

l00008625_1:
	Mem43[r0_17 + -16:word32] = r1_22
	Mem44[r0_17 + -12:word32] = r3_26
	Mem45[r0_17 + -8:word32] = r5_27
	Mem46[r0_17 + -4:word32] = r6_18
	Mem47[r0_17:word32] = r7_29
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:~(r6 >> 32) r4:<invalid> r3:<invalid> r5:<invalid>

l00008629:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:~(r6 >> 32) r4:<invalid> r3:<invalid> r5:<invalid>

vParTestSetLED_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:~(r6 >> 32) r4:<invalid> r3:<invalid> r5:<invalid>

l00008619_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:~(r6 >> 32) r4:<invalid>

l00008611_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:~(r6 >> 32) r4:<invalid>

l00008605_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:~(r6 >> 32)

l000085FD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:~(r6 >> 32)

l000085F5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vParTestToggleLED(word32 r0, word32 r1, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 fp, word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp ip r0 r1 r3 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV pc r0 r1 r8
// Preserved: sp
vParTestToggleLED_entry:
// DataOut: fp ip r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008631:
	branch Z l00008635
// DataOut: fp ip r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008635:
	branch Z l00008639
// DataOut: fp ip r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008639:
	branch Z l0000863D
// DataOut: fp ip r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008639_1:
// DataOut: fp r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l0000863D:
	branch Z l00008641
// DataOut: fp r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:r8 & ~(ip >> 28)

l0000863D_1:
// DataOut: r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:r8 & ~(ip >> 28)

l00008641:
	branch Z l00008645
// DataOut: r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid>

l00008645:
	branch Z l00008645_then
	word32 sp_6
	byte Z_7
	word32 r0_8
	word32 r8_9
	word32 ip_10
	word32 fp_11
	word32 r1_12
	byte C_13
	word32 pc_14
	byte NZCV_15
	word32 r3_16
	word32 r5_17
	word32 r6_18
	word32 r7_19
	call fnFECB902D (retsize: 0;)
		uses: r0_5,sp_1,Z
		defs: C_13,fp_11,ip_10,NZCV_15,pc_14,r0_8,r1_12,r3_16,r5_17,r6_18,r7_19,r8_9,sp_6,Z_7
	return
// DataOut: r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid>

l00008645_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00008649:
	branch Z_7 l0000864D
// DataOut: r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid>

l0000864D:
	branch Z_7 l0000864D_then
	word32 sp_20
	word32 r0_22
	word32 ip_24
	word32 fp_25
	word32 pc_28
	byte NZCV_29
	word32 r3_30
	word32 r5_31
	word32 r6_32
	word32 r7_33
	word32 r8_23
	byte C_27
	word32 r1_26
	byte Z_21
	call fn010CB035 (retsize: 0;)
		uses: C_13,fp_11,ip_10,NZCV_15,pc_14,r0_8,r1_12,r3_16,r5_17,r6_18,r7_19,r8_9,sp_6,Z_7
		defs: C_27,fp_25,ip_24,NZCV_29,pc_28,r0_22,r1_26,r3_30,r5_31,r6_32,r7_33,r8_23,sp_20,Z_21
	return
// DataOut: r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid>

l0000864D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00008651:
	branch Z_21 l00008655
// DataOut: r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid>

l00008651_1:
	r8_23 = r8_23 + 2416
	r1_26 = (word32) Mem0[r8_23 + 2416:byte]
// DataOut: r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid>

l00008655:
	branch C_27 l00008659
// DataOut: r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid> r8:r8 + 2416 r1:<invalid>

l00008655_1:
	byte NZCV_54 = cond(~(r0_22 >> 30))
	C_27 = NZCV_54 (alias)
	Z_21 = NZCV_54 (alias)
// DataOut: r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid> r8:r8 + 2416 r1:<invalid>

l00008659:
	branch Z_21 l0000865D
// DataOut: r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid> r8:r8 + 2416 r1:<invalid> pc:<invalid>

l0000865D:
	branch C_27 l00008661
// DataOut: r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid> r8:r8 + 2416 r1:<invalid> pc:<invalid>

l0000865D_1:
	__syscall(0x00F00040)
// DataOut: r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid> r8:r8 + 2416 r1:<invalid> pc:<invalid>

l00008661:
	branch C_27 l00008665
// DataOut: r0 r1 r3 r5 r6 r7 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> r8:r8 + 2416 r1:<invalid> pc:<invalid>

l00008661_1:
	r1_26 = 0x000B9000 - r8_23
	Z_21 = cond(r1_26) (alias)
// DataOut: r0 r1 r3 r5 r6 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> r8:r8 + 2416 r1:<invalid> pc:<invalid>

l00008665:
	branch Z_21 l00008669
// DataOut: r0 r1 r3 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r8:r8 + 2416 r1:<invalid> pc:<invalid>

l00008665_1:
	Mem44[r0_22 + -16:word32] = r1_26
	Mem45[r0_22 + -12:word32] = r3_30
	Mem46[r0_22 + -8:word32] = r5_31
	Mem47[r0_22 + -4:word32] = r6_32
	Mem48[r0_22:word32] = r7_33
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r8:r8 + 2416 r1:<invalid> pc:<invalid>

l00008669:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r8:r8 + 2416 r1:<invalid> pc:<invalid>

vParTestToggleLED_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r8:r8 + 2416 r1:<invalid> pc:<invalid>

l00008659_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r8:r8 + 2416 r1:<invalid> pc:<invalid>

l00008649_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00008641_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00008635_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008631_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void prvFlashCoRoutine(word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC lr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
prvFlashCoRoutine_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

prvFlashCoRoutine_entry:
// DataOut: lr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008671:
	branch ZC l00008675
// DataOut: lr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008671_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008675:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:lr + 0xD4000002



void prvFixedDelayCoRoutine(word32 r0, word32 r1, word32 r2, word32 r3, word32 r6, word32 r8, word32 r10, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV lr r0 r1 r10 r2 r3 r6 r8
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r4 r5 r8
// Preserved: sp
prvFixedDelayCoRoutine_entry:
// DataOut: lr r0 r1 r10 r2 r3 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000086E9:
	branch ZC l000086ED
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000086E9_1:
	r8 = lr + 0xD4000002
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000086ED:
	branch NZV l000086F1
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:lr + 0xD4000002

l000086F1:
	branch Z l000086F5
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:lr + 0xD4000002

l000086F5:
	branch C l000086F9
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:lr + 0xD4000002

l000086F9:
	branch ZC l000086FD
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:lr + 0xD4000002

l000086F9_1:
	byte NZCV_231 = cond(~0x000000D9)
	C = NZCV_231 (alias)
	NZV = NZCV_231 (alias)
	Z = NZCV_231 (alias)
	N = NZCV_231 (alias)
	NV = NZCV_231 (alias)
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:lr + 0xD4000002

l000086FD:
	branch Z l00008701
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9

l00008701:
	branch Z l00008705
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9

l00008705:
	branch C l00008709
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9

l00008705_1:
	byte NZCV_223 = cond(0x68000002 - r8 - C)
	C = NZCV_223 (alias)
	NZV = NZCV_223 (alias)
	Z = NZCV_223 (alias)
	N = NZCV_223 (alias)
	NV = NZCV_223 (alias)
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9

l00008709:
	branch N l0000870D
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid>

l00008709_1:
	__syscall(0x00BB4000)
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid>

l0000870D:
	branch NV l00008711
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid>

l0000870D_1:
	byte NZCV_215 = cond(r3 + 0x0003D000)
	C = NZCV_215 (alias)
	NZV = NZCV_215 (alias)
	Z = NZCV_215 (alias)
	N = NZCV_215 (alias)
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid>

l00008711:
	branch Z l00008715
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid>

l00008711_1:
	r0 = r0 + (r6 << 5) + C
	byte NZCV_208 = cond(r0)
	C = NZCV_208 (alias)
	NZV = NZCV_208 (alias)
	Z = NZCV_208 (alias)
	N = NZCV_208 (alias)
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid>

l00008715:
	branch NZV l00008719
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid>

l00008715_1:
	word32 sp_188
	byte ZC_189
	byte NZV_192
	word32 r4_195
	byte NZCV_196
	word32 r5_197
	byte NV_199
	word32 r10_205
	call fnFFD75611 (retsize: 0;)
		uses: C_43,lr,N_41,NV_40,NZCV_42,NZV_45,r0_39,r1,r10,r2,r3,r4_15,r5_23,r6,r8_4,sp_1,Z_44,ZC_46
		defs: C_194,lr_191,N_198,NV_199,NZCV_196,NZV_192,r0_201,r1_204,r10_205,r2_203,r3_200,r4_195,r5_197,r6_202,r8_190,sp_188,Z_193,ZC_189
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid>

l00008719:
	branch Z l0000871D
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid>

l0000871D:
	branch Z l00008721
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid>

l0000871D_1:
	Mem183[r2 + -12:word32] = r0
	Mem184[r2 + -8:word32] = r1
	Mem185[r2 + -4:word32] = r3
	Mem186[r2:word32] = r6
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid>

l00008721:
	__syscall(0x00A90168)
	branch Z l00008729
// DataOut: lr r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:r2 - 16

l00008725_1:
	byte NZCV_176 = cond(0x00000F70 - lr - C)
	C = NZCV_176 (alias)
	Z = NZCV_176 (alias)
	N = NZCV_176 (alias)
// DataOut: r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:r2 - 16

l00008729:
	branch N l0000872D
// DataOut: r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:r2 - 16 r1:<invalid>

l00008729_1:
// DataOut: r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:r2 - 16 r1:<invalid>

l0000872D:
	branch Z l00008731
// DataOut: r0 r1 r10 r2 r3 r6 r8 sp
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid>

l0000872D_1:
// DataOut: r0 r1 r2 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid>

l00008731:
	branch Z l00008735
// DataOut: r0 r1 r2 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid>

l00008731_1:
	Z = cond(r0 - (r8 >> 12) - C) (alias)
// DataOut: r1 r2 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid>

l00008735:
	branch Z l00008735_then
	word32 sp_85
	byte ZC_86
	word32 r8_87
	word32 lr_88
	byte NZV_89
	word32 r4_92
	byte NZCV_93
	word32 r5_94
	byte N_95
	byte NV_96
	word32 r3_97
	word32 r0_98
	word32 r6_99
	word32 r2_100
	word32 r1_101
	word32 r10_102
	byte C_107
	byte Z_108
	call fn012CCFC5 (retsize: 0;)
		uses: C_77,lr_66,N_75,NV_74,NZCV_76,NZV_79,r0_56,r1_83,r10_53,r2_81,r3_57,r4_62,r5_60,r6_55,r8_67,sp_69,Z_84,ZC_80
		defs: C_91,lr_88,N_95,NV_96,NZCV_93,NZV_89,r0_98,r1_101,r10_102,r2_100,r3_97,r4_92,r5_94,r6_99,r8_87,sp_85,Z_90,ZC_86
	return
// DataOut: r1 r2 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> lr:<invalid>

l00008735_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> lr:<invalid>

l00008739:
	branch Z_108 l0000873D
// DataOut: r1 r2 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> lr:<invalid>

l0000873D:
	branch C_107 l00008741
// DataOut: r1 r2 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> lr:<invalid>

l0000873D_1:
	byte NZCV_156 = cond(0x68000002 - r8_87 - C_107)
	C_107 = NZCV_156 (alias)
	Z_108 = NZCV_156 (alias)
// DataOut: r1 r2 r3 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> lr:<invalid>

l00008741:
	word32 r0_111 = r8_87 ^ 0x00000000
	branch Z_108 l00008749
// DataOut: r0 r1 r2 r3 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> lr:<invalid>

l00008745_1:
	r0_111 = (word32) Mem0[r8_87 ^ 0x00000000:word64] + 160
// DataOut: r0 r1 r2 r3 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:lr + 0xD4000002 ^ 0x00000000 r2:<invalid> r1:<invalid> lr:<invalid>

l00008749:
	branch Z_108 l0000874D
// DataOut: r0 r1 r2 r3 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> Sequence r1:r0:<invalid>

l00008749_1:
	Z_108 = cond(r0_111 - 0x00AC0000 - C_107) (alias)
// DataOut: r0 r1 r2 r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> Sequence r1:r0:<invalid>

l0000874D:
	branch Z_108 l0000874D_then
	word32 sp_117
	byte ZC_118
	word32 r8_119
	word32 lr_120
	byte NZV_121
	byte Z_122
	byte C_123
	word32 r4_124
	byte NZCV_125
	word32 r5_126
	byte N_127
	byte NV_128
	word32 r3_129
	word32 r0_130
	word32 r6_131
	word32 r2_132
	word32 r1_133
	word32 r10_134
	call fnFEF4CA15 (retsize: 0;)
		uses: C_107,lr_88,N_104,NV_103,NZCV_106,NZV_109,r0_115,r1_114,r10_102,r2_100,r3_97,r4_92,r5_105,r6_99,r8_87,sp_85,Z_116,ZC_110
		defs: C_123,lr_120,N_127,NV_128,NZCV_125,NZV_121,r0_130,r1_133,r10_134,r2_132,r3_129,r4_124,r5_126,r6_131,r8_119,sp_117,Z_122,ZC_118
	return
// DataOut: r0 r1 r2 r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> Sequence r1:r0:<invalid>

l0000874D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> Sequence r1:r0:<invalid>

l00008751:
	branch Z_122 l00008755
// DataOut: r0 r1 r2 r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> Sequence r1:r0:<invalid>

l00008751_1:
	Mem136[r2_132 + -12:word32] = r0_130
	Mem137[r2_132 + -8:word32] = r1_133
	Mem138[r2_132 + -4:word32] = r3_129
	Mem139[r2_132:word32] = r6_131
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> Sequence r1:r0:<invalid>

l00008755:
	__syscall(0x00A90168)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> Sequence r1:r0:<invalid>

prvFixedDelayCoRoutine_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> Sequence r1:r0:<invalid>

l00008739_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> lr:<invalid>

l00008719_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9 r5:<invalid> r0:<invalid>

l00008701_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9

l000086FD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:lr + 0xD4000002 r4:~0x000000D9

l000086F5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:lr + 0xD4000002

l000086F1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:lr + 0xD4000002

l000086ED_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:lr + 0xD4000002



void vStartFlashCoRoutines(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r8, word32 fp, word32 ip, word32 lr, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r8
// LiveOut:
// Trashed: NZCV fp pc r0 r1 r3 r4 r5 r6 r7 sp
// Preserved:
vStartFlashCoRoutines_entry:
// DataOut: cpsr fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008785:
	branch Z l00008789
// DataOut: cpsr fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008785_1:
	r5 = Mem0[pc + 4:word32]
// DataOut: cpsr fp ip lr r0 r1 r2 r3 r4 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008789:
	branch Z l0000878D
// DataOut: cpsr fp ip lr r0 r1 r2 r3 r4 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16

l00008789_1:
	Z = cond(r5 + (r0 >> 32) + C) (alias)
// DataOut: cpsr fp ip lr r0 r1 r2 r3 r4 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16

l0000878D:
	branch Z l00008791
// DataOut: cpsr fp ip lr r0 r1 r2 r3 r4 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid>

l0000878D_1:
	Mem85[r6:byte] = (byte) r0
// DataOut: cpsr fp ip lr r0 r1 r2 r3 r4 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid>

l00008791:
	branch Z l00008795
// DataOut: cpsr fp ip lr r0 r1 r2 r3 r4 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314

l00008791_1:
// DataOut: cpsr fp ip lr r0 r1 r2 r3 r4 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314

l00008795:
	branch Z l00008795_then
	word32 sp_27
	word32 pc_29
	word32 r3_30
	word32 r5_31
	word32 fp_32
	word32 r7_33
	word32 r0_34
	byte NZCV_36
	word32 r6_37
	byte ZC_39
	word32 ip_40
	word32 r4_41
	word32 lr_42
	byte NV_43
	word32 r2_44
	word32 r8_46
	word32 cpsr_47
	word32 r1_38
	bool C_35
	byte Z_28
	byte V_45
	call fnFFE66B5D (retsize: 0;)
		uses: C_20,fp_11,NV_24,NZCV_19,pc_10,r3_9,r5_7,r6_26,r7_18,sp_8,V_23,Z_21,ZC_22
		defs: C_35,cpsr_47,fp_32,ip_40,lr_42,NV_43,NZCV_36,pc_29,r0_34,r1_38,r2_44,r3_30,r4_41,r5_31,r6_37,r7_33,r8_46,sp_27,V_45,Z_28,ZC_39
	return
// DataOut: cpsr fp ip lr r0 r1 r2 r3 r4 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314 r0:r0 ^ r1 >> 2

l00008795_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314 r0:r0 ^ r1 >> 2

l00008799:
	branch ZC_39 l0000879D
// DataOut: cpsr fp ip lr r0 r1 r2 r3 r4 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314 r0:r0 ^ r1 >> 2

l00008799_1:
	Mem75[r0_34:word32] = r0_34
	Mem76[r0_34 + 4:word32] = r1_38
	Mem77[r0_34 + 8:word32] = r3_30
	Mem78[r0_34 + 12:word32] = r6_37
	Mem79[r0_34 + 16:word32] = fp_32
	Mem80[r0_34 + 20:word32] = ip_40
// DataOut: cpsr lr r0 r1 r2 r4 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314 r0:r0 ^ r1 >> 2

l0000879D:
	branch Z_28 l000087A1
// DataOut: cpsr lr r0 r1 r2 r4 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314 r0:<invalid>

l0000879D_1:
	r1_38 = r1_38 + 209
// DataOut: cpsr lr r0 r1 r2 r4 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314 r0:<invalid>

l000087A1:
	branch C_35 l000087A5
// DataOut: cpsr lr r0 r1 r2 r4 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

l000087A1_1:
// DataOut: cpsr r0 r1 r2 r4 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

l000087A5:
	branch Z_28 l000087A9
// DataOut: cpsr r0 r1 r2 r4 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

l000087A9:
	branch Z_28 l000087AD
// DataOut: cpsr r0 r1 r2 r4 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

l000087A9_1:
// DataOut: cpsr r1 r2 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

l000087AD:
	branch NV_43 l000087B1
// DataOut: cpsr r1 r2 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

l000087B1:
	branch Z_28 l000087B5
// DataOut: cpsr r1 r2 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

l000087B1_1:
	byte NZCV_63 = cond(r1_38 - (r2_44 >> 14) - C_35)
	C_35 = (bool) NZCV_63 (alias)
	Z_28 = NZCV_63 (alias)
	V_45 = NZCV_63 (alias)
// DataOut: cpsr r2 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

l000087B5:
	branch V_45 l000087B9
// DataOut: cpsr r2 r8
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:<invalid> r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

l000087B5_1:
// DataOut: cpsr
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:<invalid> r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

l000087B9:
	branch Z_28 l000087BD
// DataOut: cpsr
// DataOut (flags): C
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:<invalid> r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

l000087B9_1:
	__msr(cpsr_47, 0x00000140)
// DataOut:
// DataOut (flags): C
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:<invalid> r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

l000087BD:
	branch C_35 l000087C1
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:<invalid> r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

l000087BD_1:
	__syscall(0x00F00048)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:<invalid> r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

l000087C1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:<invalid> r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

vStartFlashCoRoutines_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:<invalid> r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

l000087AD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>

l000087A5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r3:<invalid> r5:<invalid> fp:<invalid> pc:pc + 16 r7:<invalid> r6:r6 - 1314 r0:<invalid> r1:r1 + 209 r4:<invalid>



void xAreFlashCoRoutinesStillRunning(word32 r3, word32 r6, word32 r7, word32 r8, word32 fp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp r3 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xAreFlashCoRoutinesStillRunning_entry:
// DataOut: fp r3 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000087D1:
	branch V l000087D5
// DataOut: fp r3 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000087D1_1:
// DataOut: r3 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000087D5:
	branch NZV l000087D9
// DataOut: r3 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8

l000087D5_1:
	V = cond(0x000087DD + (r7 >> 32) + C) (alias)
// DataOut: r3 r6
// DataOut (flags): NZV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8

l000087D9:
	branch V l000087D9_thunk_MPU_xTaskCreateRestricted
// DataOut: r3 r6
// DataOut (flags): NZV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 r0:<invalid>

l000087D9_thunk_MPU_xTaskCreateRestricted:
	MPU_xTaskCreateRestricted(r3, r6)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 r0:<invalid>
// Terminates process

l000087D9_1:
// DataOut: r3 r6
// DataOut (flags): NZV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 r0:<invalid>

l000087D9_thunk_MPU_xTaskCreateRestricted:
	MPU_xTaskCreateRestricted(r3, r6)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 r0:<invalid>
// Terminates process

xAreFlashCoRoutinesStillRunning_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_xTaskCreateRestricted(word32 r3, word32 r6)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZV r3 r6
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_xTaskCreateRestricted_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_xTaskCreateRestricted_entry:
// DataOut: r3 r6
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l000087DD:
	branch Z l000087E1
// DataOut: r3 r6
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l000087E1:
	branch NZV l000087E5
// DataOut: r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l000087E1_1:
	__syscall(0x00F7FF46)
// DataOut: r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l000087E5:
	branch Z l000087E9
// DataOut: r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l000087E5_1:
	Mem7[r6:byte] = (byte) r3
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000087E9:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - 510

l000087DD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_xTaskCreate(word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV r10 r4 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV pc r0 r4 r6
// Preserved: sp
MPU_xTaskCreate_entry:
// DataOut: r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008809:
	branch ZC l0000880D
// DataOut: r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008809_1:
// DataOut: r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000880D:
	branch ZC l00008811
// DataOut: r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:r7 - 0x000000E9

l0000880D_1:
	Mem85[r6:word32] = r4
	Mem88[r6 + 4:word32] = r5
	Mem90[r6 + 8:word32] = r7
	Mem92[r6 + 12:word32] = r8
	Mem94[r6 + 16:word32] = r10
// DataOut: r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:r7 - 0x000000E9

l00008811:
	branch ZC l00008811_then
	word32 sp_5
	byte ZC_6
	word32 pc_7
	word32 r4_10
	word32 r8_12
	word32 r10_13
	byte NZCV_16
	word32 r0_17
	byte NZC_18
	word32 r5_11
	word32 r7_23
	byte NV_15
	byte Z_14
	word32 r6_26
	byte N_19
	call fn011ACD31 (retsize: 0;)
		uses: pc_4,sp_1,ZC
		defs: N_19,NV_15,NZC_18,NZCV_16,pc_7,r0_17,r10_13,r4_10,r5_11,r6_9,r7_8,r8_12,sp_5,Z_14,ZC_6
	return
// DataOut: r5 r6 r7
// DataOut (flags): NZV
// SymbolicIn: sp:fp pc:r7 - 0x000000E9

l00008811_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:r7 - 0x000000E9

l00008815:
	branch Z_14 l00008819
// DataOut: r5 r6 r7
// DataOut (flags): NZV
// SymbolicIn: sp:fp pc:r7 - 0x000000E9

l00008815_1:
	word32 sp_69
	byte ZC_70
	word32 pc_71
	word32 r4_74
	word32 r8_76
	word32 r10_77
	byte NZCV_80
	word32 r0_81
	byte NZC_82
	call fnFE7CB135 (retsize: 0;)
		uses: N_19,NV_15,NZC_18,NZCV_16,pc_7,r0_17,r10_13,r4_10,r5_11,r6_9,r7_8,r8_12,sp_5,Z_14,ZC_6
		defs: N_83,NV_79,NZC_82,NZCV_80,pc_71,r0_81,r10_77,r4_74,r5_75,r6_73,r7_72,r8_76,sp_69,Z_78,ZC_70
// DataOut: r5 r6 r7
// DataOut (flags): NZV
// SymbolicIn: sp:fp pc:r7 - 0x000000E9

l00008819:
	branch NV_15 l0000881D
// DataOut: r5 r6 r7
// DataOut (flags): NZ
// SymbolicIn: sp:fp pc:r7 - 0x000000E9

l00008819_1:
	byte NZCV_63 = cond(~0x00000278)
	Z_14 = NZCV_63 (alias)
	N_19 = NZCV_63 (alias)
// DataOut: r5 r6 r7
// DataOut (flags): NZ
// SymbolicIn: sp:fp pc:r7 - 0x000000E9

l0000881D:
	branch Z_14 l00008821
// DataOut: r5 r6 r7
// DataOut (flags): NZ
// SymbolicIn: sp:fp pc:<invalid>

l0000881D_1:
	Mem60[r6_26:byte] = (byte) r5_11
	r6_26 = r6_26 - 1022
// DataOut: r6 r7
// DataOut (flags): NZ
// SymbolicIn: sp:fp pc:<invalid>

l00008821:
	branch Z_14 l00008825
// DataOut: r6 r7
// DataOut (flags): N
// SymbolicIn: sp:fp pc:<invalid> r6:r6 - 1022

l00008821_1:
	N_19 = cond(r7_23 | r6_26 >> 32) (alias)
// DataOut: r6
// DataOut (flags): N
// SymbolicIn: sp:fp pc:<invalid> r6:r6 - 1022

l00008825:
	branch N_19 l00008829
// DataOut: r6
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r6:r6 - 1022 r0:r7 | r6 - 2044 >> 32

l00008825_1:
	std::atomic_exchange<byte>(r6_26, Mem0[r6_26:byte])
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r6:r6 - 1022 r0:r7 | r6 - 2044 >> 32

l00008829:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r6:r6 - 1022 r0:r7 | r6 - 2044 >> 32 r4:<invalid>

MPU_xTaskCreate_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r6:r6 - 1022 r0:r7 | r6 - 2044 >> 32 r4:<invalid>



void MPU_vTaskAllocateMPURegions(word32 r0, word32 r1, word32 r6, word32 r7)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC r0 r1 r6 r7
// LiveOut:
// Trashed: r7
// Preserved: sp
MPU_vTaskAllocateMPURegions_entry:
// DataOut: r0 r1 r6 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l0000884D:
	branch Z l00008851
// DataOut: r0 r1 r6 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008851:
	branch ZC l00008855
// DataOut: r0 r1 r6 r7
// DataOut (flags): C
// SymbolicIn: sp:fp

l00008855:
	branch C l00008859
// DataOut: r0 r1 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008855_1:
	Mem19[r6 - 78:word64] = r1_r0
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008859:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008851_1:
	word32 r7_6 = r7 + r6
	word32 sp_8
	byte Z_9
	byte ZC_10
	word32 pc_11
	word32 r7_12
	word32 r6_13
	byte C_14
	word32 r0_15
	word32 r1_16
	call (word32) Mem0[r7_6:byte] (retsize: 0;)
		uses: r6,r7_6,sp_1,Z,ZC
		defs: C_14,pc_11,r0_15,r1_16,r6_13,r7_12,sp_8,Z_9,ZC_10
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

MPU_vTaskAllocateMPURegions_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 + r6

l0000884D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_vTaskDelayUntil(word32 r0, word32 r1, word32 r6)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV r0 r1 r6
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_vTaskDelayUntil_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_vTaskDelayUntil_entry:
// DataOut: r0 r1 r6
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00008875:
	branch Z l00008879
// DataOut: r0 r1 r6
// DataOut (flags): CV
// SymbolicIn: sp:fp

l00008879:
	branch V l0000887D
// DataOut: r0 r1 r6
// DataOut (flags): C
// SymbolicIn: sp:fp

l00008879_1:
	C = cond(~0x00000118) (alias)
// DataOut: r0 r1 r6
// DataOut (flags): C
// SymbolicIn: sp:fp

l0000887D:
	branch C l00008881
// DataOut: r0 r1 r6
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~0x00000118

l0000887D_1:
	Mem13[r6 - 78:word64] = r1_r0
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~0x00000118

l00008881:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~0x00000118

l00008875_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_vTaskDelay(word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z lr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_vTaskDelay_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_vTaskDelay_entry:
// DataOut: lr
// DataOut (flags): Z
// SymbolicIn: sp:fp

l0000889D:
	__syscall(0x004605B5)
	branch Z l000088A5
// DataOut: lr
// DataOut (flags): 
// SymbolicIn: sp:fp

l000088A1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000088A5:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp lr:lr + 247 r6:<invalid>



void MPU_vTaskSuspendAll()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  N
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_vTaskSuspendAll_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_vTaskSuspendAll_entry:
// DataOut:
// DataOut (flags): N
// SymbolicIn: sp:fp

l000088C1:
	branch N l000088C5
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000088C1_1:
	__syscall(0x00F7FFB5)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000088C5:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_xTaskResumeAll()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_xTaskResumeAll_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_xTaskResumeAll_entry:
// DataOut:
// DataOut (flags): C
// SymbolicIn: sp:fp

l000088E1:
	branch C l000088E5
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000088E1_1:
	__syscall(0x00F7FFB5)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000088E5:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_xTaskGetTickCount()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_xTaskGetTickCount_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_xTaskGetTickCount_entry:
// DataOut:
// DataOut (flags): C
// SymbolicIn: sp:fp

l00008905:
	branch C l00008909
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008909:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008905_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_uxTaskGetNumberOfTasks()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_uxTaskGetNumberOfTasks_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_uxTaskGetNumberOfTasks_entry:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008929:
	branch Z l0000892D
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008929_1:
	word32 sp_5
	byte Z_6
	call fnFFE08805 (retsize: 0;)
		uses: sp_1,Z
		defs: sp_5,Z_6
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000892D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_pcTaskGetName(word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z lr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_pcTaskGetName_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_pcTaskGetName_entry:
// DataOut: lr
// DataOut (flags): Z
// SymbolicIn: sp:fp

l0000894D:
	__syscall(0x004605B5)
	branch Z l00008955
// DataOut: lr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008951_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008955:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp lr:lr + 2295 r0:<invalid>



byte fn0000895D(word32 r0, word32 r3, word32 r6, word32 r7, word32 fp, word32 ip, word32 pc, ptr32 & r0Out, ptr32 & r2Out, ptr32 & r3Out, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r7Out, ptr32 & r8Out, ptr32 & pcOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp ip pc r0 r3 r6 r7
// LiveOut: NZCV pc r0 r2 r3 r4 r5 r7 r8
// Trashed: NZCV lr pc r0 r2 r3 r4 r5 r7 r8 sp
// Preserved:
fn0000895D_entry:
	*r4Out = r4
	*r8Out = r8
	*pcOut = pc
	*r0Out = r0
	*r2Out = r2
	*r5Out = r5
	*r7Out = r7
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000895D:
	branch Z l00008961
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000895D_1:
	Mem63[r6 - 812:byte] = (byte) r0
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008961:
	branch Z l00008965
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008961_1:
	r3 = r3 + 4048
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00008965:
	branch Z l00008969
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 4048 lr:<invalid>

l00008965_1:
	word32 r4_56 = ~(r0 << 1)
	*r4Out = r4_56
	NZCV = cond(r4_56)
	Z = NZCV (alias)
	C = NZCV (alias)
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 4048 lr:<invalid>

l00008969:
	branch Z l0000896D
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 4048 lr:<invalid> r4:~(r0 << 1)

l00008969_1:
	word32 r8_55
	*r8Out = (word32) Mem0[r3:byte]
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 4048 lr:<invalid> r4:~(r0 << 1)

l0000896D:
	word32 r3_16
	*r3Out = r3
	branch C l00008971
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> lr:<invalid> r4:~(r0 << 1) r8:<invalid>

l0000896D_1:
	Mem46[r6:word32] = r3
	Mem48[r6 + 4:word32] = r7
	Mem50[r6 + 8:word32] = fp
	Mem52[r6 + 12:word32] = ip
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> lr:<invalid> r4:~(r0 << 1) r8:<invalid>

l00008971:
	branch C l00008971_thunk_MPU_vTaskSetTimeOutState
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> lr:<invalid> r4:~(r0 << 1) r8:<invalid>

l00008971_thunk_MPU_vTaskSetTimeOutState:
	MPU_vTaskSetTimeOutState(bArg00)
	return NZCV
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> lr:<invalid> r4:~(r0 << 1) r8:<invalid>

l00008971_1:
	word32 r0_34
	*r0Out = Mem0[pc:word32]
	word32 r2_35
	*r2Out = Mem0[pc + 4:word32]
	word32 r3_36
	*r3Out = Mem0[pc + 8:word32]
	word32 r4_37
	*r4Out = Mem0[pc + 12:word32]
	word32 r5_38
	*r5Out = Mem0[pc + 16:word32]
	word32 r7_39
	*r7Out = Mem0[pc + 20:word32]
	word32 pc_40
	*pcOut = pc + 24
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> lr:<invalid> r4:~(r0 << 1) r8:<invalid>

l00008971_thunk_MPU_vTaskSetTimeOutState:
	MPU_vTaskSetTimeOutState(bArg00)
	return NZCV
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:pc + 24

fn0000895D_exit:
// DataOut: pc r0 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r3:<invalid> lr:<invalid> r4:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r5:<invalid> r7:<invalid> pc:pc + 24



void MPU_vTaskSetTimeOutState(byte bArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z
// LiveOut:
// Trashed: sp
// Preserved:
// Stack args: Stack +0000(32)
MPU_vTaskSetTimeOutState_entry:
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00008975:
	__syscall(0x004605B5)
	branch Z l0000897D
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l0000897D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008979_1:
	word32 sp_6
	byte Z_7
	word32 pc_8
	call (word32) bArg00 (retsize: 0; depth: -1271)
		uses: sp_5,Z
		defs: pc_8,sp_6,Z_7
	return
// DataOut: c0 fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

MPU_vTaskSetTimeOutState_exit:
// DataOut:
// DataOut (flags): NZCV
// SymbolicIn: sp:fp + 1271



void MPU_xTaskCheckForTimeOut(word32 r3, word32 r6)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z r3 r6
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_xTaskCheckForTimeOut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_xTaskCheckForTimeOut_entry:
// DataOut: r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008999:
	branch Z l0000899D
// DataOut: r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000899D:
	branch ~(r6 >> 30) != 0x00000000 l000089A5
// DataOut: r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l000089A1_1:
	Mem9[r6:byte] = (byte) r3
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~(r6 >> 30)

l000089A5:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~(r6 >> 30) r6:r6 - 509

l00008999_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_xTaskGenericNotify(word32 r0, word32 r1, word32 r2, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC cpsr ip pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV ip r0
// Preserved: sp
MPU_xTaskGenericNotify_entry:
// DataOut: cpsr ip pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000089C5:
	branch Z l000089C9
// DataOut: cpsr ip pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000089C5_1:
	Mem90[r1 - 233:byte] = (byte) pc
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000089C9:
	branch Z l000089CD
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000089C9_1:
	Mem87[r6 - (r6 >> 28):byte] = (byte) r0
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000089CD:
	__syscall(0x00469846)
	branch N l000089D5
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000089D1_1:
	C = cond(~0x00F70000) (alias)
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000089D5:
	branch C l000089D5_then
	word32 sp_6
	word32 pc_8
	byte NZCV_14
	byte C_15
	word32 r2_16
	word32 r10_23
	word32 r7_22
	word32 r5_21
	word32 r4_20
	byte ZC_19
	word32 cpsr_18
	word32 r8_17
	word32 ip_13
	byte N_12
	word32 r6_11
	word32 r1_37
	byte Z_39
	word32 r0_10
	call fn01189AF5 (retsize: 0;)
		uses: C_5,N,sp_1,Z
		defs: C_15,cpsr_18,ip_13,N_12,NZCV_14,pc_8,r0_10,r1_9,r10_23,r2_16,r4_20,r5_21,r6_11,r7_22,r8_17,sp_6,Z_7,ZC_19
	return
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp ip:~0x00F70000
// LocalsOut: fp(32)

l000089D5_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:~0x00F70000

l000089D9:
	branch C_15 l000089DD
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp ip:~0x00F70000
// LocalsOut: fp(32)

l000089D9_1:
	Mem74[r6_11:word32] = r1_37
	Mem75[r6_11 + 4:word32] = r2_16
	Mem76[r6_11 + 8:word32] = r6_11
	Mem77[r6_11 + 12:word32] = r8_17
	Mem78[r6_11 + 16:word32] = ip_13
	Mem79[r6_11 + 20:word32] = fp
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp ip:~0x00F70000

l000089DD:
	branch C_15 l000089E1
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp ip:~0x00F70000

l000089DD_1:
	word32 sp_56
	word32 pc_58
	byte NZCV_64
	byte C_65
	word32 r2_66
	call fnFFE06AFD (retsize: 0;)
		uses: C_15,cpsr_18,ip_13,N_12,NZCV_14,pc_8,r0_10,r1_9,r10_23,r2_16,r4_20,r5_21,r6_11,r7_22,r8_17,sp_6,Z_7,ZC_19
		defs: C_65,cpsr_68,ip_63,N_62,NZCV_64,pc_58,r0_60,r1_59,r10_73,r2_66,r4_70,r5_71,r6_61,r7_72,r8_67,sp_56,Z_57,ZC_69
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp ip:~0x00F70000

l000089E1:
	branch Z_39 l000089E5
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp ip:~0x00F70000

l000089E1_1:
	__msr(cpsr_18, 0x000001F8)
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp ip:~0x00F70000

l000089E5:
	__syscall(0x00D00546)
	branch N_12 l000089ED
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp ip:~0x00F70000

l000089ED:
	branch ZC_19 l000089F1
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp ip:~0x00F70000

l000089ED_1:
	Mem53[r0_10:word64] = r1_r0
	r0_10 = r0_10 - __ror(r0_10, 3)
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp ip:~0x00F70000

l000089F1:
	branch Z_39 l000089F5
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp ip:~0x00F70000 r0:<invalid>

l000089F1_1:
	Mem45[r8_17:word32] = r0_10
	Mem46[r8_17 + 4:word32] = r1_37
	Mem47[r8_17 + 8:word32] = r4_20
	Mem48[r8_17 + 12:word32] = r5_21
	Mem49[r8_17 + 16:word32] = r6_11
	Mem50[r8_17 + 20:word32] = r7_22
	Mem51[r8_17 + 24:word32] = r10_23
	Mem52[r8_17 + 28:word32] = ip_13
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:~0x00F70000 r0:<invalid>

l000089F5:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:~0x00F70000 r0:<invalid>

MPU_xTaskGenericNotify_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:~0x00F70000 r0:<invalid>

l000089E9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:~0x00F70000



void MPU_xTaskNotifyWait(word32 r0, word32 r1, word32 r2, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr ip pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV r0 r10
// Preserved: sp
MPU_xTaskNotifyWait_entry:
// DataOut: cpsr ip pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000089FD:
	branch Z l00008A01
// DataOut: cpsr ip pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000089FD_1:
	Mem56[r1 - 233:byte] = (byte) pc
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008A01:
	branch Z l00008A05
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008A01_1:
	Mem53[r6 - (r6 >> 28):byte] = (byte) r0
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008A05:
	__syscall(0x00469846)
	branch N l00008A0D
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008A09_1:
	C = cond(~0x0000F700) (alias)
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008A0D:
	branch C l00008A0D_then
	word32 sp_6
	byte Z_7
	word32 pc_8
	word32 r1_9
	word32 r6_11
	byte N_12
	word32 r10_13
	byte NZCV_14
	byte C_15
	word32 r2_16
	word32 r8_17
	word32 ip_18
	byte NZV_19
	word32 cpsr_20
	byte ZC_21
	word32 r4_22
	word32 r5_23
	word32 r7_24
	word32 r0_10
	call fn01189B2D (retsize: 0;)
		uses: C_5,N,sp_1,Z
		defs: C_15,cpsr_20,ip_18,N_12,NZCV_14,NZV_19,pc_8,r0_10,r1_9,r10_13,r2_16,r4_22,r5_23,r6_11,r7_24,r8_17,sp_6,Z_7,ZC_21
	return
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r10:~0x0000F700
// LocalsOut: fp(32)

l00008A0D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r10:~0x0000F700

l00008A11:
	branch C_15 l00008A15
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r10:~0x0000F700
// LocalsOut: fp(32)

l00008A11_1:
	Mem39[r6_11:word32] = r1_9
	Mem40[r6_11 + 4:word32] = r2_16
	Mem41[r6_11 + 8:word32] = r6_11
	Mem42[r6_11 + 12:word32] = r8_17
	Mem43[r6_11 + 16:word32] = ip_18
	Mem44[r6_11 + 20:word32] = fp
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r10:~0x0000F700

l00008A15:
	branch NZV_19 l00008A19
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r10:~0x0000F700

l00008A19:
	branch Z_7 l00008A1D
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r10:~0x0000F700

l00008A19_1:
	__msr(cpsr_20, 0x000001F8)
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r10:~0x0000F700

l00008A1D:
	__syscall(0x00D00546)
	branch N_12 l00008A25
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r10:~0x0000F700

l00008A25:
	branch ZC_21 l00008A29
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r10:~0x0000F700

l00008A25_1:
	Mem36[r0_10:word64] = r1_r0
	r0_10 = r0_10 - __ror(r0_10, 3)
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r10:~0x0000F700

l00008A29:
	branch Z_7 l00008A2D
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r10:~0x0000F700 r0:<invalid>

l00008A29_1:
	Mem28[r8_17:word32] = r0_10
	Mem29[r8_17 + 4:word32] = r1_9
	Mem30[r8_17 + 8:word32] = r4_22
	Mem31[r8_17 + 12:word32] = r5_23
	Mem32[r8_17 + 16:word32] = r6_11
	Mem33[r8_17 + 20:word32] = r7_24
	Mem34[r8_17 + 24:word32] = r10_13
	Mem35[r8_17 + 28:word32] = ip_18
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r10:~0x0000F700 r0:<invalid>

l00008A2D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r10:~0x0000F700 r0:<invalid>

MPU_xTaskNotifyWait_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r10:~0x0000F700 r0:<invalid>

l00008A21_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r10:~0x0000F700

l00008A15_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r10:~0x0000F700



void MPU_ulTaskNotifyTake(word32 r3, word32 r6)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC r3 r6
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_ulTaskNotifyTake_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_ulTaskNotifyTake_entry:
// DataOut: r3 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008A35:
	branch Z l00008A39
// DataOut: r3 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008A39:
	branch ZC l00008A3D
// DataOut: r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008A39_1:
	Z = cond(~0x00000118) (alias)
// DataOut: r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008A3D:
	branch Z l00008A41
// DataOut: r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~0x00000118

l00008A3D_1:
	Mem13[r6:byte] = (byte) r3
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~0x00000118

l00008A41:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~0x00000118 r6:r6 - 509

l00008A35_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_xTaskNotifyStateClear(word32 r0, word32 r3, word32 r6, word32 r7, word32 fp, word32 ip, byte bArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp ip r0 r3 r6 r7
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0000(32)
// Terminates process
MPU_xTaskNotifyStateClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_xTaskNotifyStateClear_entry:
// DataOut: fp ip r0 r3 r6 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00008A61:
	__syscall(0x004605B5)
	branch Z l00008A69
// DataOut: fp ip r0 r3 r6 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00008A65_1:
	r7 = (word32) bArg00
// DataOut: fp ip r0 r3 r6 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008A69:
	__syscall(0x00462846)
	branch Z l00008A71
// DataOut: fp ip r0 r3 r6 r7
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r7:<invalid>

l00008A71:
	branch Z l00008A75
// DataOut: fp ip r0 r3 r6 r7
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r7:<invalid>

l00008A71_1:
	Mem39[r6 - 812:byte] = (byte) r0
// DataOut: fp ip r0 r3 r6 r7
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r7:<invalid>

l00008A75:
	branch Z l00008A79
// DataOut: fp ip r0 r3 r6 r7
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r7:<invalid>

l00008A75_1:
	r3 = r3 + 4048
// DataOut: fp ip r0 r3 r6 r7
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r7:<invalid>

l00008A79:
	branch Z l00008A7D
// DataOut: fp ip r0 r3 r6 r7
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r7:<invalid> r3:r3 + 4048 lr:<invalid>

l00008A79_1:
	byte NZCV_33 = cond(~(r0 << 1))
	Z = NZCV_33 (alias)
	C = NZCV_33 (alias)
// DataOut: fp ip r3 r6 r7
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r7:<invalid> r3:r3 + 4048 lr:<invalid>

l00008A7D:
	branch Z l00008A81
// DataOut: fp ip r3 r6 r7
// DataOut (flags): C
// SymbolicIn: sp:<invalid> r7:<invalid> r3:r3 + 4048 lr:<invalid> r4:~(r0 << 1)

l00008A7D_1:
// DataOut: fp ip r3 r6 r7
// DataOut (flags): C
// SymbolicIn: sp:<invalid> r7:<invalid> r3:r3 + 4048 lr:<invalid> r4:~(r0 << 1)

l00008A81:
	branch C l00008A85
// DataOut: fp ip r3 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:<invalid> r3:<invalid> lr:<invalid> r4:~(r0 << 1) r8:<invalid>

l00008A81_1:
	Mem20[r6:word32] = r3
	Mem22[r6 + 4:word32] = r7
	Mem24[r6 + 8:word32] = fp
	Mem26[r6 + 12:word32] = ip
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:<invalid> r3:<invalid> lr:<invalid> r4:~(r0 << 1) r8:<invalid>

l00008A85:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:<invalid> r3:<invalid> lr:<invalid> r4:~(r0 << 1) r8:<invalid>

l00008A6D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:<invalid>



void MPU_xQueueGenericCreate()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC
// LiveOut:
// Trashed:
// Preserved: sp
MPU_xQueueGenericCreate_entry:
// DataOut:
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008A89:
	branch Z l00008A8D
// DataOut:
// DataOut (flags): C
// SymbolicIn: sp:fp

l00008A8D:
	__syscall(0x00461746)
	branch C l00008A91_then
	word32 sp_4
	byte Z_5
	byte C_6
	call fnFFF62E75 (retsize: 0;)
		uses: C,sp_1,Z
		defs: C_6,sp_4,Z_5
	return
// DataOut:
// DataOut (flags): C
// SymbolicIn: sp:fp

l00008A91_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008A95:
	branch C_6 l00008A99
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008A99:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

MPU_xQueueGenericCreate_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008A95_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008A89_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_xQueueGenericReset(word32 r3, word32 r6)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZ r3 r6
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_xQueueGenericReset_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_xQueueGenericReset_entry:
// DataOut: r3 r6
// DataOut (flags): NZ
// SymbolicIn: sp:fp

l00008AB9:
	branch Z l00008ABD
// DataOut: r3 r6
// DataOut (flags): NZ
// SymbolicIn: sp:fp

l00008ABD:
	branch N l00008AC1
// DataOut: r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008ABD_1:
	Z = cond(~(r6 >> 30)) (alias)
// DataOut: r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008AC1:
	branch Z l00008AC5
// DataOut: r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~(r6 >> 30)

l00008AC1_1:
	Mem13[r6:byte] = (byte) r3
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~(r6 >> 30)

l00008AC5:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~(r6 >> 30) r6:r6 - 509

l00008AB9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_xQueueGenericSend(word32 r0, word32 r1, word32 r2, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC cpsr ip pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV r0 r3 r7
// Preserved: sp
MPU_xQueueGenericSend_entry:
// DataOut: cpsr ip pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008AE5:
	branch Z l00008AE9
// DataOut: cpsr ip pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008AE5_1:
	Mem96[r1 - 233:byte] = (byte) pc
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008AE9:
	branch Z l00008AED
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008AE9_1:
	Mem93[r6 - (r6 >> 28):byte] = (byte) r0
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008AED:
	__syscall(0x00469846)
	branch N l00008AF5
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008AF1_1:
	C = cond(~0x00F70000) (alias)
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008AF5:
	branch C l00008AF5_then
	word32 sp_6
	byte Z_7
	word32 pc_8
	word32 r1_9
	word32 r6_11
	byte N_12
	word32 r3_13
	byte NZCV_14
	byte C_15
	word32 r2_16
	word32 r8_17
	word32 ip_18
	word32 r7_19
	word32 cpsr_20
	byte ZC_21
	word32 r4_22
	word32 r5_23
	word32 r10_24
	word32 r0_10
	call fn01189C15 (retsize: 0;)
		uses: C_5,N,sp_1,Z
		defs: C_15,cpsr_20,ip_18,N_12,NZCV_14,pc_8,r0_10,r1_9,r10_24,r2_16,r3_13,r4_22,r5_23,r6_11,r7_19,r8_17,sp_6,Z_7,ZC_21
	return
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r3:~0x00F70000
// LocalsOut: fp(32)

l00008AF5_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x00F70000

l00008AF9:
	branch C_15 l00008AFD
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r3:~0x00F70000
// LocalsOut: fp(32)

l00008AF9_1:
	Mem80[r6_11:word32] = r1_9
	Mem81[r6_11 + 4:word32] = r2_16
	Mem82[r6_11 + 8:word32] = r6_11
	Mem83[r6_11 + 12:word32] = r8_17
	Mem84[r6_11 + 16:word32] = ip_18
	Mem85[r6_11 + 20:word32] = fp
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r3:~0x00F70000

l00008AFD:
	branch N_12 l00008B01
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r3:~0x00F70000

l00008B01:
	branch Z_7 l00008B05
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r3:~0x00F70000

l00008B01_1:
	__msr(cpsr_20, 0x000001FB)
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r3:~0x00F70000

l00008B05:
	__syscall(0x00D00546)
	branch N_12 l00008B0D
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r3:~0x00F70000

l00008B0D:
	branch ZC_21 l00008B11
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r3:~0x00F70000

l00008B0D_1:
	Mem77[r0_10:word64] = r1_r0
	r0_10 = r0_10 - __ror(r0_10, 3)
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r3:~0x00F70000

l00008B11:
	branch Z_7 l00008B15
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x00F70000 r0:<invalid>

l00008B11_1:
	Mem69[r8_17:word32] = r0_10
	Mem70[r8_17 + 4:word32] = r1_9
	Mem71[r8_17 + 8:word32] = r4_22
	Mem72[r8_17 + 12:word32] = r5_23
	Mem73[r8_17 + 16:word32] = r6_11
	Mem74[r8_17 + 20:word32] = r7_19
	Mem75[r8_17 + 24:word32] = r10_24
	Mem76[r8_17 + 28:word32] = ip_18
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x00F70000 r0:<invalid>

l00008B15:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x00F70000 r0:<invalid>

l00008B09_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x00F70000

l00008AFD_1:
	word32 r7_45 = r7_19 + r6_11
	word32 sp_47
	byte Z_48
	word32 pc_49
	word32 r1_50
	word32 r0_51
	word32 r6_52
	byte N_53
	word32 r3_54
	byte NZCV_55
	byte C_56
	word32 r2_57
	word32 r8_58
	word32 ip_59
	word32 r7_60
	word32 cpsr_61
	byte ZC_62
	word32 r4_63
	word32 r5_64
	word32 r10_65
	call (word32) Mem0[r7_45:byte] (retsize: 0;)
		uses: C_15,cpsr_20,ip_18,N_12,NZCV_14,pc_8,r0_10,r1_9,r10_24,r2_16,r3_13,r4_22,r5_23,r6_11,r7_45,r8_17,sp_6,Z_7,ZC_21
		defs: C_56,cpsr_61,ip_59,N_53,NZCV_55,pc_49,r0_51,r1_50,r10_65,r2_57,r3_54,r4_63,r5_64,r6_52,r7_60,r8_58,sp_47,Z_48,ZC_62
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x00F70000

MPU_xQueueGenericSend_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:~0x00F70000 r7:r7 + r6 r0:<invalid>



void MPU_uxQueueMessagesWaiting(byte bArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0000(32)
// Terminates process
MPU_uxQueueMessagesWaiting_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_uxQueueMessagesWaiting_entry:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00008B1D:
	__syscall(0x004605B5)
	branch Z l00008B25
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00008B21_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008B25:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid>



void MPU_uxQueueSpacesAvailable(byte bArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0000(32)
// Terminates process
MPU_uxQueueSpacesAvailable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_uxQueueSpacesAvailable_entry:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00008B45:
	__syscall(0x004605B5)
	branch Z l00008B4D
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00008B49_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008B4D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid>



void MPU_xQueueGenericReceive(word32 r0, word32 r1, word32 r2, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr ip pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV pc r0 r7
// Preserved: sp
MPU_xQueueGenericReceive_entry:
// DataOut: cpsr ip pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008B6D:
	branch Z l00008B71
// DataOut: cpsr ip pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008B6D_1:
	Mem97[r1 - 233:byte] = (byte) pc
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008B71:
	branch Z l00008B75
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008B71_1:
	Mem94[r6 - (r6 >> 28):byte] = (byte) r0
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008B75:
	__syscall(0x00469846)
	branch N l00008B7D
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008B79_1:
	C = cond(~0xF7000000) (alias)
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008B7D:
	branch C l00008B7D_then
	word32 sp_6
	byte Z_7
	word32 pc_8
	word32 r1_9
	word32 r6_11
	byte N_12
	byte NZCV_13
	byte C_14
	word32 r2_15
	word32 r8_16
	word32 ip_17
	byte NV_18
	word32 r7_19
	word32 cpsr_20
	byte ZC_21
	word32 r4_22
	word32 r5_23
	word32 r10_24
	word32 r0_10
	call fn01189C9D (retsize: 0;)
		uses: C_5,N,sp_1,Z
		defs: C_14,cpsr_20,ip_17,N_12,NV_18,NZCV_13,pc_8,r0_10,r1_9,r10_24,r2_15,r4_22,r5_23,r6_11,r7_19,r8_16,sp_6,Z_7,ZC_21
	return
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:~0xF7000000
// LocalsOut: fp(32)

l00008B7D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~0xF7000000

l00008B81:
	branch C_14 l00008B85
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:~0xF7000000
// LocalsOut: fp(32)

l00008B81_1:
	Mem80[r6_11:word32] = r1_9
	Mem81[r6_11 + 4:word32] = r2_15
	Mem82[r6_11 + 8:word32] = r6_11
	Mem83[r6_11 + 12:word32] = r8_16
	Mem84[r6_11 + 16:word32] = ip_17
	Mem85[r6_11 + 20:word32] = fp
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:~0xF7000000

l00008B85:
	branch NV_18 l00008B89
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:~0xF7000000

l00008B89:
	branch Z_7 l00008B8D
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:~0xF7000000

l00008B89_1:
	__msr(cpsr_20, 0x000001FB)
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:~0xF7000000

l00008B8D:
	__syscall(0x00D00546)
	branch N_12 l00008B95
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:~0xF7000000

l00008B95:
	branch ZC_21 l00008B99
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp pc:~0xF7000000

l00008B95_1:
	Mem77[r0_10:word64] = r1_r0
	r0_10 = r0_10 - __ror(r0_10, 3)
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp pc:~0xF7000000

l00008B99:
	branch Z_7 l00008B9D
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~0xF7000000 r0:<invalid>

l00008B99_1:
	Mem69[r8_16:word32] = r0_10
	Mem70[r8_16 + 4:word32] = r1_9
	Mem71[r8_16 + 8:word32] = r4_22
	Mem72[r8_16 + 12:word32] = r5_23
	Mem73[r8_16 + 16:word32] = r6_11
	Mem74[r8_16 + 20:word32] = r7_19
	Mem75[r8_16 + 24:word32] = r10_24
	Mem76[r8_16 + 28:word32] = ip_17
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~0xF7000000 r0:<invalid>

l00008B9D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~0xF7000000 r0:<invalid>

l00008B91_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~0xF7000000

l00008B85_1:
	word32 r7_45 = r7_19 + r6_11
	word32 sp_47
	byte Z_48
	word32 pc_49
	word32 r1_50
	word32 r0_51
	word32 r6_52
	byte N_53
	byte NZCV_54
	byte C_55
	word32 r2_56
	word32 r8_57
	word32 ip_58
	byte NV_59
	word32 r7_60
	word32 cpsr_61
	byte ZC_62
	word32 r4_63
	word32 r5_64
	word32 r10_65
	call (word32) Mem0[r7_45:byte] (retsize: 0;)
		uses: C_14,cpsr_20,ip_17,N_12,NV_18,NZCV_13,pc_8,r0_10,r1_9,r10_24,r2_15,r4_22,r5_23,r6_11,r7_45,r8_16,sp_6,Z_7,ZC_21
		defs: C_55,cpsr_61,ip_58,N_53,NV_59,NZCV_54,pc_49,r0_51,r1_50,r10_65,r2_56,r4_63,r5_64,r6_52,r7_60,r8_57,sp_47,Z_48,ZC_62
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~0xF7000000

MPU_xQueueGenericReceive_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~0xF7000000 r7:r7 + r6 r0:<invalid>



void MPU_xQueuePeekFromISR(word32 r3, word32 r6)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZV r3 r6
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_xQueuePeekFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_xQueuePeekFromISR_entry:
// DataOut: r3 r6
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00008BA5:
	branch Z l00008BA9
// DataOut: r3 r6
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00008BA9:
	branch NZV l00008BAD
// DataOut: r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008BA9_1:
	word32 sp_14
	byte NZV_16
	call fnFFE088C9 (retsize: 0;)
		uses: NZV,r3,r6,sp_1,Z
		defs: NZV_16,r3_17,r6_18,sp_14,Z_15
// DataOut: r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008BAD:
	branch Z l00008BB1
// DataOut: r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008BAD_1:
	Mem12[r6:byte] = (byte) r3
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008BB1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - 508

l00008BA5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_xQueueGetMutexHolder(word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z ip
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_xQueueGetMutexHolder_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_xQueueGetMutexHolder_entry:
// DataOut: ip
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008BD1:
	__syscall(0x004605B5)
	branch Z l00008BD9
// DataOut: ip
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008BD5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008BD9:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:<invalid>



void MPU_xQueueCreateMutex(word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z ip
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_xQueueCreateMutex_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_xQueueCreateMutex_entry:
// DataOut: ip
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008BF9:
	__syscall(0x004605B5)
	branch Z l00008C01
// DataOut: ip
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008BFD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008C01:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:ip + 759 fp:<invalid>



void MPU_xQueueTakeMutexRecursive(word32 r3, word32 r6)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC r3 r6
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_xQueueTakeMutexRecursive_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_xQueueTakeMutexRecursive_entry:
// DataOut: r3 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008C21:
	branch Z l00008C25
// DataOut: r3 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008C25:
	branch ZC l00008C29
// DataOut: r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008C29:
	branch Z l00008C2D
// DataOut: r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008C29_1:
	Mem7[r6:byte] = (byte) r3
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008C2D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - 508

l00008C25_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008C21_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_xQueueGiveMutexRecursive(word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z ip
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_xQueueGiveMutexRecursive_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_xQueueGiveMutexRecursive_entry:
// DataOut: ip
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008C4D:
	__syscall(0x004605B5)
	branch Z l00008C55
// DataOut: ip
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008C51_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008C55:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:ip + 2295 r8:<invalid>



void MPU_vQueueDelete(word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z ip
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_vQueueDelete_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_vQueueDelete_entry:
// DataOut: ip
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008C75:
	__syscall(0x004605B5)
	branch Z l00008C7D
// DataOut: ip
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008C79_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008C7D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:ip + 1271 r7:<invalid>



void MPU_pvPortMalloc(word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z ip
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_pvPortMalloc_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_pvPortMalloc_entry:
// DataOut: ip
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008C99:
	__syscall(0x004605B5)
	branch Z l00008CA1
// DataOut: ip
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008C9D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008CA1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:ip + 759 r6:<invalid>



void MPU_vPortFree(word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z ip
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_vPortFree_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_vPortFree_entry:
// DataOut: ip
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008CC1:
	__syscall(0x004605B5)
	branch Z l00008CC9
// DataOut: ip
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008CC5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008CC9:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:ip + 3831 r4:<invalid>



void MPU_vPortInitialiseBlocks()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_vPortInitialiseBlocks_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_vPortInitialiseBlocks_entry:
// DataOut:
// DataOut (flags): C
// SymbolicIn: sp:fp

l00008CE5:
	branch C l00008CE9
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008CE9:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008CE5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_xPortGetFreeHeapSize()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_xPortGetFreeHeapSize_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_xPortGetFreeHeapSize_entry:
// DataOut:
// DataOut (flags): C
// SymbolicIn: sp:fp

l00008D05:
	branch C l00008D09
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008D09:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008D05_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_xEventGroupCreate()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_xEventGroupCreate_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_xEventGroupCreate_entry:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008D29:
	branch Z l00008D2D
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008D29_1:
	word32 sp_5
	byte Z_6
	call fnFFE08C05 (retsize: 0;)
		uses: sp_1,Z
		defs: sp_5,Z_6
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008D2D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_xEventGroupWaitBits(word32 r6, word32 r7)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC r6 r7
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_xEventGroupWaitBits_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_xEventGroupWaitBits_entry:
// DataOut: r6 r7
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l00008D4D:
	branch ZC l00008D51
// DataOut: r6 r7
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l00008D4D_1:
// DataOut: r6 r7
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l00008D51:
	branch Z l00008D55
// DataOut: r6 r7
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:DPB(pc, 0x30E9, 16)

l00008D55:
	branch ZC l00008D59
// DataOut: r6 r7
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:DPB(pc, 0x30E9, 16)

l00008D59:
	__syscall(0x009F0A46)
	branch N l00008D61
// DataOut: r6 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:DPB(pc, 0x30E9, 16)

l00008D5D_1:
	word32 sp_27
	byte ZC_28
	word32 pc_29
	byte N_31
	word32 r0_32
	word32 r4_35
	call fnFFF09941 (retsize: 0;)
		uses: C,N,pc_4,r0,r4,r6,r7,sp_1,Z,ZC
		defs: C_34,N_31,pc_29,r0_32,r4_35,r6_33,r7_36,sp_27,Z_30,ZC_28
// DataOut: r6 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:DPB(pc, 0x30E9, 16)

l00008D61:
	branch Z l00008D65
// DataOut: r6 r7
// DataOut (flags): C
// SymbolicIn: sp:fp pc:DPB(pc, 0x30E9, 16)

l00008D61_1:
// DataOut: r6 r7
// DataOut (flags): C
// SymbolicIn: sp:fp pc:DPB(pc, 0x30E9, 16)

l00008D65:
	branch C l00008D69
// DataOut: r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp pc:DPB(pc, 0x30E9, 16) r0:r6 - (r6 >> 8)

l00008D65_1:
	std::atomic_exchange<byte>(r7, Mem0[r6:byte])
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:DPB(pc, 0x30E9, 16) r0:r6 - (r6 >> 8)

l00008D69:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:DPB(pc, 0x30E9, 16) r0:r6 - (r6 >> 8) r4:<invalid>

l00008D55_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:DPB(pc, 0x30E9, 16)

l00008D51_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:DPB(pc, 0x30E9, 16)



void MPU_xEventGroupClearBits(word32 r6, word32 r7)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z r6 r7
// LiveOut:
// Trashed: r7
// Preserved: sp
MPU_xEventGroupClearBits_entry:
// DataOut: r6 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008D8D:
	branch Z l00008D91
// DataOut: r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008D91:
	word32 r7_5 = r7 + r6
	word32 sp_7
	byte Z_8
	word32 pc_9
	word32 r7_10
	word32 r6_11
	call (word32) Mem0[r7_5:byte] (retsize: 0;)
		uses: r6,r7_5,sp_1,Z
		defs: pc_9,r6_11,r7_10,sp_7,Z_8
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

MPU_xEventGroupClearBits_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 + r6

l00008D8D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_xEventGroupSetBits(word32 r3, word32 r6)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZV r3 r6
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_xEventGroupSetBits_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_xEventGroupSetBits_entry:
// DataOut: r3 r6
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00008DB9:
	branch Z l00008DBD
// DataOut: r3 r6
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00008DBD:
	branch NZV l00008DC1
// DataOut: r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008DBD_1:
	Z = cond(~(r6 >> 30)) (alias)
// DataOut: r3 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008DC1:
	branch Z l00008DC5
// DataOut: r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~(r6 >> 30)

l00008DC1_1:
	Mem13[r6:byte] = (byte) r3
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~(r6 >> 30)

l00008DC5:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~(r6 >> 30) r6:r6 - 507

l00008DB9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void MPU_xEventGroupSync(word32 r0, word32 r1, word32 r2, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr ip pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV fp r0
// Preserved: sp
MPU_xEventGroupSync_entry:
// DataOut: cpsr ip pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008DE5:
	branch Z l00008DE9
// DataOut: cpsr ip pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008DE5_1:
	Mem97[r1 - 233:byte] = (byte) pc
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008DE9:
	branch Z l00008DED
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008DE9_1:
	Mem94[r6 - (r6 >> 28):byte] = (byte) r0
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008DED:
	__syscall(0x00469846)
	branch N l00008DF5
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008DF1_1:
	C = cond(~0x00F70000) (alias)
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008DF5:
	branch C l00008DF5_then
	word32 sp_6
	word32 pc_8
	word32 fp_13
	byte NZCV_14
	byte C_15
	word32 r2_16
	byte V_19
	word32 r10_25
	word32 r7_24
	word32 r5_23
	word32 r4_22
	byte ZC_21
	word32 cpsr_20
	word32 ip_18
	word32 r8_17
	byte N_12
	word32 r6_11
	word32 r1_41
	byte Z_43
	word32 r0_10
	call fn01189F15 (retsize: 0;)
		uses: C_5,N,sp_1,Z
		defs: C_15,cpsr_20,fp_13,ip_18,N_12,NZCV_14,pc_8,r0_10,r1_9,r10_25,r2_16,r4_22,r5_23,r6_11,r7_24,r8_17,sp_6,V_19,Z_7,ZC_21
	return
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:~0x00F70000
// LocalsOut: fp(32)

l00008DF5_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:~0x00F70000

l00008DF9:
	branch C_15 l00008DFD
// DataOut: cpsr ip r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:~0x00F70000
// LocalsOut: fp(32)

l00008DF9_1:
	Mem80[r6_11:word32] = r1_41
	Mem81[r6_11 + 4:word32] = r2_16
	Mem82[r6_11 + 8:word32] = r6_11
	Mem83[r6_11 + 12:word32] = r8_17
	Mem84[r6_11 + 16:word32] = ip_18
	Mem85[r6_11 + 20:word32] = fp
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp fp:~0x00F70000

l00008DFD:
	branch V_19 l00008E01
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp fp:~0x00F70000

l00008DFD_1:
	word32 sp_60
	word32 pc_62
	word32 fp_67
	byte NZCV_68
	byte C_69
	word32 r2_70
	byte V_73
	call fnFFE06F1D (retsize: 0;)
		uses: C_15,cpsr_20,fp_13,ip_18,N_12,NZCV_14,pc_8,r0_10,r1_9,r10_25,r2_16,r4_22,r5_23,r6_11,r7_24,r8_17,sp_6,V_19,Z_7,ZC_21
		defs: C_69,cpsr_74,fp_67,ip_72,N_66,NZCV_68,pc_62,r0_64,r1_63,r10_79,r2_70,r4_76,r5_77,r6_65,r7_78,r8_71,sp_60,V_73,Z_61,ZC_75
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp fp:~0x00F70000

l00008E01:
	branch Z_43 l00008E05
// DataOut: cpsr ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp fp:~0x00F70000

l00008E01_1:
	__msr(cpsr_20, 0x000001FD)
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp fp:~0x00F70000

l00008E05:
	__syscall(0x00D00546)
	branch N_12 l00008E0D
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp fp:~0x00F70000

l00008E0D:
	branch ZC_21 l00008E11
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp fp:~0x00F70000

l00008E0D_1:
	Mem57[r0_10:word64] = r1_r0
	r0_10 = r0_10 - __ror(r0_10, 3)
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp fp:~0x00F70000

l00008E11:
	branch Z_43 l00008E15
// DataOut: ip r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp fp:~0x00F70000 r0:<invalid>

l00008E11_1:
	Mem49[r8_17:word32] = r0_10
	Mem50[r8_17 + 4:word32] = r1_41
	Mem51[r8_17 + 8:word32] = r4_22
	Mem52[r8_17 + 12:word32] = r5_23
	Mem53[r8_17 + 16:word32] = r6_11
	Mem54[r8_17 + 20:word32] = r7_24
	Mem55[r8_17 + 24:word32] = r10_25
	Mem56[r8_17 + 28:word32] = ip_18
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:~0x00F70000 r0:<invalid>

l00008E15:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:~0x00F70000 r0:<invalid>

MPU_xEventGroupSync_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:~0x00F70000 r0:<invalid>

l00008E09_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:~0x00F70000



void MPU_vEventGroupDelete(word32 fp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z fp
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
MPU_vEventGroupDelete_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

MPU_vEventGroupDelete_entry:
// DataOut: fp
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008E1D:
	__syscall(0x004605B5)
	branch Z l00008E25
// DataOut: fp
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008E21_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008E25:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:fp + 247 r10:<invalid>



void xCoRoutineCreate(word32 r8, word32 r9, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC pc r8 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xCoRoutineCreate_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

xCoRoutineCreate_entry:
// DataOut: pc r8 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00008E41:
	branch ZC l00008E45
// DataOut: pc r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008E41_1:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008E45:
	branch Z l00008E49
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp Sequence pc:pc:<invalid>

l00008E49:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp Sequence pc:pc:<invalid>

l00008E45_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp Sequence pc:pc:<invalid>



void vCoRoutineAddToDelayedList(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vCoRoutineAddToDelayedList_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

vCoRoutineAddToDelayedList_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008EF1:
	branch Z l00008EF5
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008EF5:
	branch V l00008EF9
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008EF5_1:
	Mem67[r8 - 844:byte] = (byte) r2
	r8 = r8 - 844
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008EF9:
	branch Z l00008EFD
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:r8 - 844
// LocalsOut: fp(32)

l00008EF9_1:
	Mem52[r4:word32] = r0
	Mem55[r4 + 4:word32] = r1
	Mem57[r4 + 8:word32] = r2
	Mem59[r4 + 12:word32] = r3
	Mem61[r4 + 16:word32] = r5
	Mem63[r4 + 20:word32] = r6
	Mem64[r4 + 24:word32] = r8
	Mem65[r4 + 28:word32] = r10
// DataOut: ip lr r0 r1 r10 r5 r6 r7 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:r8 - 844
// LocalsOut: fp(32)

l00008EFD:
	branch Z l00008F01
// DataOut: ip lr r0 r1 r10 r5 r6 r7 r9
// DataOut (flags): NC
// SymbolicIn: sp:fp r8:r8 - 844
// LocalsOut: fp(32)

l00008EFD_1:
	__syscall(0x00F7FF1D)
// DataOut: ip lr r0 r1 r10 r5 r6 r7 r9
// DataOut (flags): NC
// SymbolicIn: sp:fp r8:r8 - 844
// LocalsOut: fp(32)

l00008F01:
	branch C l00008F05
// DataOut: ip lr r0 r1 r10 r5 r6 r7 r9
// DataOut (flags): NC
// SymbolicIn: sp:fp r8:r8 - 844
// LocalsOut: fp(32)

l00008F05:
	branch N l00008F09
// DataOut: ip lr r0 r1 r10 r5 r6 r7 r9
// DataOut (flags): C
// SymbolicIn: sp:fp r8:r8 - 844
// LocalsOut: fp(32)

l00008F09:
	word32 r3_9 = 0x00008F11 + __ror(r0, 8) + C
	branch r3_9 != 0x00000000 l00008F11
// DataOut: ip lr r0 r1 r10 r3 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 844
// LocalsOut: fp(32)

l00008F0D_1:
	Mem49[lr:byte] = (byte) r10
// DataOut: ip lr r0 r1 r3 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 844 r3:<invalid>
// LocalsOut: fp(32)

l00008F11:
	word32 sp_16
	byte Z_17
	byte V_18
	word32 r2_19
	word32 r8_20
	word32 r4_21
	word32 r0_22
	word32 r1_23
	word32 r5_25
	word32 r6_26
	word32 r10_27
	byte C_28
	byte N_29
	byte NZCV_30
	word32 lr_31
	word32 r9_32
	byte NZV_33
	word32 r7_34
	word32 ip_35
	word32 r3_24
	call fnFFE08BDF (retsize: 0;)
		uses: C_11,N_12,NZCV_10,NZV_15,r0,r3_9,r8_5,sp_1,V_14,Z_13
		defs: C_28,ip_35,lr_31,N_29,NZCV_30,NZV_33,r0_22,r1_23,r10_27,r2_19,r3_24,r4_21,r5_25,r6_26,r7_34,r8_20,r9_32,sp_16,V_18,Z_17
	branch C_28 l00008F19
// DataOut: ip lr r0 r1 r3 r5 r6 r7 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp r8:r8 - 844 r3:<invalid> lr:lr - 110
// LocalsOut: fp(32)

l00008F15_1:
	r3_24 = (word32) Mem0[r1_23 + r9_32:int16]
// DataOut: ip lr r0 r3 r5 r6 r7
// DataOut (flags): NZV
// SymbolicIn: sp:fp r8:r8 - 844 r3:<invalid> lr:lr - 110
// LocalsOut: fp(32)

l00008F19:
	branch NZV_33 l00008F1D
// DataOut: ip lr r0 r3 r5 r6 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp r8:r8 - 844 r3:<invalid> lr:lr - 110 r1:r1 + r9
// LocalsOut: fp(32)

l00008F1D:
	branch Z_17 l00008F21
// DataOut: ip lr r0 r3 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 844 r3:<invalid> lr:lr - 110 r1:r1 + r9
// LocalsOut: fp(32)

l00008F1D_1:
	Mem38[r0_22:word32] = r3_24
	Mem39[r0_22 + 4:word32] = r5_25
	Mem40[r0_22 + 8:word32] = r6_26
	Mem41[r0_22 + 12:word32] = r7_34
	Mem42[r0_22 + 16:word32] = ip_35
	Mem43[r0_22 + 20:word32] = fp
	Mem44[r0_22 + 24:word32] = lr_31
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 844 r3:<invalid> lr:lr - 110 r1:r1 + r9

l00008F21:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 844 r3:<invalid> lr:lr - 110 r1:r1 + r9

l00008F19_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 844 r3:<invalid> lr:lr - 110 r1:r1 + r9

l00008F05_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 844

l00008F01_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 844

l00008EF1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vCoRoutineSchedule(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp lr pc r0 r1 r2 r3 r5 r6 r7 r8 sp
// Preserved:
vCoRoutineSchedule_entry:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(8)

l00008F2D:
	branch N l00008F31
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(8)

l00008F2D_1:
	Mem710[r1 - 233:byte] = (byte) pc
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(8)

l00008F31:
	branch C l00008F35
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(8)

l00008F31_1:
	word32 sp_684
	word32 fp_693
	word32 lr_696
	byte NZCV_697
	byte V_703
	word32 r10_704
	word32 r9_705
	word32 r2_706
	byte NZV_707
	byte NV_708
	word32 r4_709
	call fn01B63C6D (retsize: 0;)
		uses: C,fp,ip,lr,N,NV,NZCV,NZV,NZV,pc,r0,r1,r10,r2,r3,r4,r5,r6,r7,r8,r9,sp_1,spsr,V,Z,ZC
		defs: C_688,fp_693,ip_700,lr_696,N_685,NV_708,NZCV_697,NZV_694,NZV_707,pc_686,r0_690,r1_687,r10_704,r2_706,r3_701,r4_709,r5_702,r6_699,r7_691,r8_695,r9_705,sp_684,spsr_698,V_703,Z_689,ZC_692
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(8)

l00008F35:
	branch Z l00008F39
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(8)

l00008F35_1:
	r7 = r7 - 179
	Mem683[r7:word32] = r0
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(8)

l00008F39:
	branch N l00008F3D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179
// LocalsOut: fp(8)

l00008F39_1:
	__syscall(0x000804F1)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179
// LocalsOut: fp(8)

l00008F3D:
	branch ZC l00008F41
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179
// LocalsOut: fp(8)

l00008F3D_1:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179
// LocalsOut: fp(8)

l00008F41:
	branch NZV l00008F45
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0
// LocalsOut: fp(8)

l00008F41_1:
	__syscall(0x008811F3)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0
// LocalsOut: fp(8)

l00008F45:
	branch NZV l00008F49
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0
// LocalsOut: fp(8)

l00008F45_1:
	__syscall(0x008F6FF3)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0
// LocalsOut: fp(8)

l00008F49:
	branch C l00008F4D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0
// LocalsOut: fp(8)

l00008F49_1:
	word32 sp_655
	byte N_656
	word32 fp_664
	byte NZV_665
	word32 lr_667
	byte NZCV_668
	byte V_674
	word32 r10_675
	word32 r9_676
	word32 r2_677
	byte NZV_678
	byte NV_679
	word32 r4_680
	call fnFE3DCF1D (retsize: 0;)
		uses: C_47,fp_54,ip_36,lr_40,N_50,NV_28,NZCV_39,NZV_29,NZV_42,pc_49,r0_45,r1_48,r10_32,r2_30,r3_35,r4_27,r5_34,r6_37,r7_53,r8_41,r9_31,sp_51,spsr_38,V_33,Z_46,ZC_43
		defs: C_659,fp_664,ip_671,lr_667,N_656,NV_679,NZCV_668,NZV_665,NZV_678,pc_657,r0_661,r1_658,r10_675,r2_677,r3_672,r4_680,r5_673,r6_670,r7_662,r8_666,r9_676,sp_655,spsr_669,V_674,Z_660,ZC_663
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0
// LocalsOut: fp(8)

l00008F4D:
	branch Z l00008F51
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0
// LocalsOut: fp(8)

l00008F4D_1:
	Mem653[r8:byte] = (byte) fp
	r8 = r8 - 3182
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0
// LocalsOut: fp(32)

l00008F51:
	__syscall(0x000018F1)
	branch ZC l00008F59
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): C
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:r8 - 3182
// LocalsOut: fp(32)

l00008F59:
	branch C l00008F5D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:r8 - 3182
// LocalsOut: fp(32)

l00008F5D:
	__syscall(0x0046301D)
	word32 lr_82 = ~0x00000F70
	byte NZCV_83 = cond(lr_82)
	byte NZV_108 = NZCV_83
	branch lr_82 != 0x00000000 l00008F69
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:r8 - 3182
// LocalsOut: fp(32)

l00008F65_1:
	__msr(spsr, 0x00000A6A)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:r8 - 3182 lr:~0x00000F70
// LocalsOut: fp(32)

l00008F69:
	branch lr_82 >u 0x00000000 l00008F6D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:r8 - 3182 lr:~0x00000F70
// LocalsOut: fp(32)

l00008F69_1:
	r8 = 0x000003EB
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:r8 - 3182 lr:~0x00000F70
// LocalsOut: fp(32)

l00008F6D:
	branch lr_82 != 0x00000000 l00008F71
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70
// LocalsOut: fp(32)

l00008F6D_1:
	Mem647[r6:word32] = r1
	Mem648[r6 + 4:word32] = r6
	Mem649[r6 + 8:word32] = r8
	Mem650[r6 + 12:word32] = ip
	Mem651[r6 + 16:word32] = fp
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70

l00008F71:
	branch lr_82 <=u 0x00000000 l00008F75
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70

l00008F71_1:
	Mem640[r0 + -24:word32] = r0
	Mem641[r0 + -20:word32] = r1
	Mem642[r0 + -16:word32] = r3
	Mem643[r0 + -12:word32] = r5
	Mem644[r0 + -8:word32] = r6
	Mem645[r0 + -4:word32] = r7
	Mem646[r0:word32] = pc
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70

l00008F75:
	__syscall(0x00672BBF)
	branch !OVERFLOW(lr_82) l00008F7D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70

l00008F79_1:
	word32 sp_614
	byte N_615
	word32 pc_616
	word32 r1_617
	byte C_618
	byte Z_619
	word32 r0_620
	word32 r7_621
	byte ZC_622
	word32 fp_623
	word32 r8_625
	word32 lr_626
	byte NZCV_627
	word32 spsr_628
	word32 r6_629
	word32 ip_630
	word32 r3_631
	word32 r5_632
	byte V_633
	word32 r10_634
	word32 r9_635
	word32 r2_636
	byte NZV_637
	byte NV_638
	word32 r4_639
	call fnFFE77B5D (retsize: 0;)
		uses: C_85,fp_80,ip_64,lr_82,N_84,NV_91,NZCV_83,NZV_88,NZV_90,pc_77,r0_73,r1_76,r10_60,r2_58,r3_63,r4_55,r5_62,r6_65,r7_72,r8_92,r9_59,sp_79,spsr_66,V_89,Z_86,ZC_87
		defs: C_618,fp_623,ip_630,lr_626,N_615,NV_638,NZCV_627,NZV_624,NZV_637,pc_616,r0_620,r1_617,r10_634,r2_636,r3_631,r4_639,r5_632,r6_629,r7_621,r8_625,r9_635,sp_614,spsr_628,V_633,Z_619,ZC_622
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70

l00008F7D:
	branch NZV_108 l00008F81
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70

l00008F81:
	branch NZV_108 l00008F85
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70

l00008F81_1:
	__syscall(0x00F7FFD1)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70

l00008F85:
	branch NZV_108 l00008F85_then
	word32 sp_119
	byte N_120
	word32 pc_121
	word32 r1_122
	byte C_123
	word32 r0_125
	byte ZC_127
	word32 fp_128
	word32 r8_130
	word32 lr_131
	byte NZCV_132
	word32 spsr_133
	word32 r6_134
	word32 ip_135
	word32 r3_136
	word32 r5_137
	word32 r10_139
	word32 r9_140
	word32 r2_141
	byte NZV_142
	byte NV_143
	word32 r4_144
	byte V_138
	byte NZV_129
	word32 r7_126
	byte Z_124
	call fn009C937D (retsize: 0;)
		uses: C_113,fp_118,ip_102,lr_106,N_116,NV_94,NZCV_105,NZV_108,NZV_95,pc_115,r0_111,r1_114,r10_98,r2_96,r3_101,r4_93,r5_100,r6_103,r7_110,r8_107,r9_97,sp_117,spsr_104,V_99,Z_112,ZC_109
		defs: C_123,fp_128,ip_135,lr_131,N_120,NV_143,NZCV_132,NZV_129,NZV_142,pc_121,r0_125,r1_122,r10_139,r2_141,r3_136,r4_144,r5_137,r6_134,r7_126,r8_130,r9_140,sp_119,spsr_133,V_138,Z_124,ZC_127
	return
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70

l00008F85_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70

l00008F89:
	branch ZC_127 l00008F8D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70

l00008F89_1:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70

l00008F8D:
	branch Z_124 l00008F91
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70 r6:0x00008F91 - 0x00008F91

l00008F8D_1:
	byte NZCV_604 = cond((r10_139 << pc_121) - r8_130 - C_123)
	Z_124 = NZCV_604 (alias)
	NZV_129 = NZCV_604 (alias)
	V_138 = NZCV_604 (alias)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70 r6:0x00008F91 - 0x00008F91

l00008F91:
	branch Z_124 l00008F95
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70 r6:0x00008F91 - 0x00008F91

l00008F91_1:
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70 r6:0x00008F91 - 0x00008F91

l00008F95:
	branch Z_124 l00008F99
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91

l00008F95_1:
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91

l00008F99:
	branch V_138 l00008F9D
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid>

l00008F99_1:
	word32 sp_575
	byte N_576
	word32 pc_577
	word32 r1_578
	byte C_579
	word32 r0_581
	byte ZC_583
	word32 fp_584
	word32 r8_586
	word32 lr_587
	byte NZCV_588
	word32 spsr_589
	word32 r6_590
	word32 ip_591
	word32 r3_592
	word32 r5_593
	byte V_594
	word32 r10_595
	word32 r9_596
	word32 r2_597
	byte NZV_598
	byte NV_599
	word32 r4_600
	call fn00E0946D (retsize: 0;)
		uses: C_153,fp_128,ip_135,lr_156,N_154,NV_146,NZCV_149,NZV_147,NZV_150,pc_121,r0_125,r1_122,r10_139,r2_141,r3_157,r4_144,r5_137,r6_145,r7_126,r8_130,r9_140,sp_155,spsr_133,V_148,Z_152,ZC_151
		defs: C_579,fp_584,ip_591,lr_587,N_576,NV_599,NZCV_588,NZV_585,NZV_598,pc_577,r0_581,r1_578,r10_595,r2_597,r3_592,r4_600,r5_593,r6_590,r7_582,r8_586,r9_596,sp_575,spsr_589,V_594,Z_580,ZC_583
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid>

l00008F9D:
	branch Z_124 l00008FA1
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid>

l00008F9D_1:
	word32 lr_574 = __ror(r7_126, 16) - r7_126
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid>

l00008FA1:
	branch NZV_129 l00008FA1_then
	word32 sp_184
	byte N_185
	word32 pc_186
	word32 r1_187
	byte C_188
	word32 r0_190
	word32 r7_191
	byte ZC_192
	word32 fp_193
	byte NZV_194
	word32 r8_195
	word32 lr_196
	byte NZCV_197
	word32 spsr_198
	word32 r6_199
	word32 ip_200
	word32 r3_201
	word32 r5_202
	word32 r10_204
	word32 r9_205
	word32 r2_206
	byte NV_208
	word32 r4_209
	byte NZV_207
	byte V_203
	byte Z_189
	call fnFF41DC55 (retsize: 0;)
		uses: C_178,fp_183,ip_167,lr_171,N_181,NV_159,NZCV_170,NZV_160,NZV_173,pc_180,r0_176,r1_179,r10_163,r2_161,r3_166,r4_158,r5_165,r6_168,r7_175,r8_172,r9_162,sp_182,spsr_169,V_164,Z_177,ZC_174
		defs: C_188,fp_193,ip_200,lr_196,N_185,NV_208,NZCV_197,NZV_194,NZV_207,pc_186,r0_190,r1_187,r10_204,r2_206,r3_201,r4_209,r5_202,r6_199,r7_191,r8_195,r9_205,sp_184,spsr_198,V_203,Z_189,ZC_192
	return
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid>

l00008FA1_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid>

l00008FA5:
	branch Z_189 l00008FA9
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid>

l00008FA5_1:
	word32 r1_573 = __ror(lr_196, 2) - r8_195
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid>

l00008FA9:
	branch NZV_194 l00008FAD
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid>

l00008FA9_1:
	byte NZCV_564 = cond(r0_190 - 0xA4000000 - C_188)
	Z_189 = NZCV_564 (alias)
	V_203 = NZCV_564 (alias)
	NZV_207 = NZCV_564 (alias)
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid>

l00008FAD:
	branch V_203 l00008FB1
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid>

l00008FAD_1:
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid>

l00008FB1:
	branch Z_189 l00008FB5
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid>

l00008FB1_1:
	Mem560[r2_206:byte] = (byte) r9_205
	word32 r2_561 = r2_206 - __ror(r8_195, 6)
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid>

l00008FB5:
	branch NZV_207 l00008FB5_then
	word32 sp_222
	byte N_223
	word32 pc_224
	word32 r1_225
	byte C_226
	byte Z_227
	word32 r0_228
	word32 r7_229
	byte ZC_230
	word32 fp_231
	byte NZV_232
	word32 r8_233
	word32 lr_234
	byte NZCV_235
	word32 spsr_236
	word32 r6_237
	word32 ip_238
	word32 r3_239
	word32 r5_240
	byte V_241
	word32 r10_242
	word32 r9_243
	word32 r2_244
	byte NZV_245
	byte NV_246
	word32 r4_247
	call fnFFA04705 (retsize: 0;)
		uses: C_218,fp_193,ip_200,lr_196,N_220,NV_211,NZCV_214,NZV_212,NZV_215,pc_219,r0_190,r1_210,r10_204,r2_206,r3_201,r4_209,r5_202,r6_199,r7_191,r8_195,r9_205,sp_221,spsr_198,V_213,Z_217,ZC_216
		defs: C_226,fp_231,ip_238,lr_234,N_223,NV_246,NZCV_235,NZV_232,NZV_245,pc_224,r0_228,r1_225,r10_242,r2_244,r3_239,r4_247,r5_240,r6_237,r7_229,r8_233,r9_243,sp_222,spsr_236,V_241,Z_227,ZC_230
	return
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FB5_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FB9:
	branch NZV_232 l00008FBD
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FB9_1:
	Mem558[0x00009B29:word32] = (byte) r6_237
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FBD:
	branch ZC_230 l00008FBD_then
	word32 sp_248
	word32 pc_250
	word32 r1_251
	word32 r0_254
	word32 r7_255
	word32 fp_257
	byte NZV_258
	word32 r8_259
	byte NZCV_261
	word32 spsr_262
	word32 r6_263
	word32 ip_264
	word32 r3_265
	word32 r5_266
	word32 r10_268
	word32 r9_269
	word32 r2_270
	byte NZV_271
	word32 r4_273
	byte NV_272
	byte V_267
	word32 lr_260
	byte ZC_256
	byte Z_253
	byte C_252
	byte N_249
	call fn01A21965 (retsize: 0;)
		uses: C_226,fp_231,ip_238,lr_234,N_223,NV_246,NZCV_235,NZV_232,NZV_245,pc_224,r0_228,r1_225,r10_242,r2_244,r3_239,r4_247,r5_240,r6_237,r7_229,r8_233,r9_243,sp_222,spsr_236,V_241,Z_227,ZC_230
		defs: C_252,fp_257,ip_264,lr_260,N_249,NV_272,NZCV_261,NZV_258,NZV_271,pc_250,r0_254,r1_251,r10_268,r2_270,r3_265,r4_273,r5_266,r6_263,r7_255,r8_259,r9_269,sp_248,spsr_262,V_267,Z_253,ZC_256
	return
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FBD_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FC1:
	branch N_249 l00008FC5
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FC1_1:
	__syscall(0x00D82442)
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FC5:
	branch ZC_256 l00008FC9
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FC5_1:
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FC9:
	branch NZV_258 l00008FCD
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FC9_1:
	__syscall(0x008811F3)
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FCD:
	branch NZV_258 l00008FD1
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FCD_1:
	__syscall(0x008F6FF3)
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FD1:
	branch C_252 l00008FD5
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FD5:
	__syscall(0x0046301D)
	branch NV_272 l00008FDD
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FD9_1:
	byte NZCV_548 = cond(~0x7000000F)
	N_249 = NZCV_548 (alias)
	C_252 = NZCV_548 (alias)
	Z_253 = NZCV_548 (alias)
	ZC_256 = NZCV_548 (alias)
	V_267 = NZCV_548 (alias)
	NV_272 = NZCV_548 (alias)
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FDD:
	branch Z_253 l00008FE1
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FE1:
	__syscall(0x00B10B00)
	branch ZC_256 l00008FE9
// DataOut: fp ip lr pc r0 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FE9:
	branch Z_253 l00008FF1
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FED_1:
	__msr(spsr_262, 0x00000A6A)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FF1:
	word32 r8_286
	r8_286 = r8_259
	branch ZC_256 l00008FF5
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FF1_1:
	r8_286 = 0x000003EB
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FF5:
	branch Z_253 l00008FF9
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FF5_1:
	Mem541[r6_263:word32] = r8_259 | 0xC000003C
	Mem542[r6_263 + 4:word32] = r6_263
	Mem543[r6_263 + 8:word32] = r8_286
	Mem544[r6_263 + 12:word32] = ip_264
	Mem545[r6_263 + 16:word32] = sp_248
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FF9:
	branch ZC_256 l00008FFD
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FF9_1:
	Mem534[r0_254 + -24:word32] = r0_254
	Mem535[r0_254 + -20:word32] = r8_259 | 0xC000003C
	Mem536[r0_254 + -16:word32] = r3_265
	Mem537[r0_254 + -12:word32] = r5_266
	Mem538[r0_254 + -8:word32] = r6_263
	Mem539[r0_254 + -4:word32] = r7_255
	Mem540[r0_254:word32] = pc_250
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FFD:
	__syscall(0x00672BBF)
	branch NV_272 l00009005
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00009001_1:
	word32 sp_508
	word32 pc_510
	word32 r1_511
	word32 r0_514
	word32 r7_515
	word32 fp_517
	byte NZV_518
	byte NZCV_521
	word32 spsr_522
	word32 r6_523
	word32 ip_524
	word32 r3_525
	word32 r5_526
	word32 r10_528
	word32 r9_529
	word32 r2_530
	byte NZV_531
	byte NV_532
	word32 r4_533
	call fnFFE66BE5 (retsize: 0;)
		uses: C_282,fp_284,ip_264,lr_260,N_283,NV_275,NZCV_278,NZV_276,NZV_279,pc_250,r0_254,r1_285,r10_268,r2_270,r3_265,r4_273,r5_266,r6_263,r7_255,r8_286,r9_269,sp_248,spsr_262,V_277,Z_281,ZC_280
		defs: C_512,fp_517,ip_524,lr_520,N_509,NV_532,NZCV_521,NZV_518,NZV_531,pc_510,r0_514,r1_511,r10_528,r2_530,r3_525,r4_533,r5_526,r6_523,r7_515,r8_519,r9_529,sp_508,spsr_522,V_527,Z_513,ZC_516
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00009005:
	branch Z_253 l00009009
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00009005_1:
	word32 r1_507 = __ror(lr_260, 20) - r8_286
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00009009:
	branch V_267 l0000900D
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00009009_1:
	word32 sp_481
	word32 pc_483
	word32 r1_484
	word32 r0_487
	word32 r7_488
	word32 fp_490
	byte NZV_491
	word32 r8_492
	word32 lr_493
	byte NZCV_494
	word32 spsr_495
	word32 r6_496
	word32 ip_497
	word32 r3_498
	word32 r5_499
	byte V_500
	word32 r10_501
	word32 r9_502
	word32 r2_503
	byte NZV_504
	byte NV_505
	word32 r4_506
	call fnFF47E4B9 (retsize: 0;)
		uses: C_307,fp_312,ip_296,lr_300,N_310,NV_288,NZCV_299,NZV_289,NZV_302,pc_309,r0_305,r1_313,r10_292,r2_290,r3_295,r4_287,r5_294,r6_297,r7_304,r8_301,r9_291,sp_311,spsr_298,V_293,Z_306,ZC_303
		defs: C_485,fp_490,ip_497,lr_493,N_482,NV_505,NZCV_494,NZV_491,NZV_504,pc_483,r0_487,r1_484,r10_501,r2_503,r3_498,r4_506,r5_499,r6_496,r7_488,r8_492,r9_502,sp_481,spsr_495,V_500,Z_486,ZC_489
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l0000900D:
	branch Z_253 l00009011
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l0000900D_1:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00009011:
	branch C_252 l00009015
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00009015:
	branch ZC_256 l00009019
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00009015_1:
	word32 sp_454
	word32 pc_456
	word32 r1_457
	word32 r0_460
	word32 r7_461
	byte ZC_462
	word32 fp_463
	byte NZV_464
	word32 r8_465
	word32 lr_466
	byte NZCV_467
	word32 spsr_468
	word32 r6_469
	word32 ip_470
	word32 r3_471
	word32 r5_472
	byte V_473
	word32 r10_474
	word32 r9_475
	word32 r2_476
	byte NZV_477
	byte NV_478
	word32 r4_479
	call fn019F3DD9 (retsize: 0;)
		uses: C_334,fp_339,ip_323,lr_340,N_337,NV_315,NZCV_326,NZV_316,NZV_329,pc_336,r0_332,r1_335,r10_319,r2_317,r3_322,r4_314,r5_321,r6_324,r7_331,r8_328,r9_318,sp_338,spsr_325,V_320,Z_333,ZC_330
		defs: C_458,fp_463,ip_470,lr_466,N_455,NV_478,NZCV_467,NZV_464,NZV_477,pc_456,r0_460,r1_457,r10_474,r2_476,r3_471,r4_479,r5_472,r6_469,r7_461,r8_465,r9_475,sp_454,spsr_468,V_473,Z_459,ZC_462
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00009019:
	branch Z_253 l0000901D
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00009019_1:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l0000901D:
	branch N_249 l00009021
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid>

l0000901D_1:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid>

l00009021:
	branch C_252 l00009025
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid>

l00009025:
	branch N_249 l00009025_then
	word32 sp_369
	byte N_370
	word32 pc_371
	word32 r1_372
	byte C_373
	byte Z_374
	word32 r0_375
	word32 r7_376
	byte ZC_377
	word32 fp_378
	byte NZV_379
	word32 r8_380
	word32 lr_381
	byte NZCV_382
	word32 spsr_383
	word32 r6_384
	word32 ip_385
	word32 r3_386
	word32 r5_387
	byte V_388
	word32 r10_389
	word32 r9_390
	word32 r2_391
	byte NZV_392
	byte NV_393
	word32 r4_394
	call fnFECDF771 (retsize: 0;)
		uses: C_361,fp_366,ip_350,lr_354,N_364,NV_342,NZCV_353,NZV_343,NZV_356,pc_363,r0_359,r1_362,r10_346,r2_344,r3_349,r4_341,r5_367,r6_351,r7_358,r8_368,r9_345,sp_365,spsr_352,V_347,Z_360,ZC_357
		defs: C_373,fp_378,ip_385,lr_381,N_370,NV_393,NZCV_382,NZV_379,NZV_392,pc_371,r0_375,r1_372,r10_389,r2_391,r3_386,r4_394,r5_387,r6_384,r7_376,r8_380,r9_390,sp_369,spsr_383,V_388,Z_374,ZC_377
	return
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid>

l00009025_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid>

l00009029:
	branch ZC_377 l0000902D
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid>

l00009029_1:
	Mem443[r0_375 + -28:word32] = r1_372
	Mem444[r0_375 + -24:word32] = r2_391
	Mem445[r0_375 + -20:word32] = r3_386
	Mem446[r0_375 + -16:word32] = r4_394
	Mem447[r0_375 + -12:word32] = r8_380
	Mem448[r0_375 + -8:word32] = r9_390
	Mem449[r0_375 + -4:word32] = ip_385
	Mem450[r0_375:word32] = pc_371
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid>

l0000902D:
	branch ZC_377 l00009031
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid>

l0000902D_1:
// DataOut: ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid>

l00009031:
	branch V_388 l00009035
// DataOut: ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid> r0:<invalid>

l00009031_1:
	Mem440[r8_380:word32] = lr_381
// DataOut: ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid> r0:<invalid>

l00009035:
	branch ZC_377 l00009035_then
	word32 sp_396
	byte N_397
	word32 pc_398
	word32 r1_399
	byte C_400
	byte Z_401
	word32 r0_402
	word32 r7_403
	byte ZC_404
	word32 fp_405
	byte NZV_406
	word32 r8_407
	word32 lr_408
	byte NZCV_409
	word32 spsr_410
	word32 r6_411
	word32 ip_412
	word32 r3_413
	word32 r5_414
	byte V_415
	word32 r10_416
	word32 r9_417
	word32 r2_418
	byte NZV_419
	byte NV_420
	word32 r4_421
	call fnFEC55B21 (retsize: 0;)
		uses: C_373,fp_378,ip_385,lr_381,N_370,NV_393,NZCV_382,NZV_379,NZV_392,pc_371,r0_395,r1_372,r10_389,r2_391,r3_386,r4_394,r5_387,r6_384,r7_376,r8_380,r9_390,sp_369,spsr_383,V_388,Z_374,ZC_377
		defs: C_400,fp_405,ip_412,lr_408,N_397,NV_420,NZCV_409,NZV_406,NZV_419,pc_398,r0_402,r1_399,r10_416,r2_418,r3_413,r4_421,r5_414,r6_411,r7_403,r8_407,r9_417,sp_396,spsr_410,V_415,Z_401,ZC_404
	return
// DataOut: ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid> r0:<invalid>

l00009035_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid> r0:<invalid>

l00009039:
	branch ZC_404 l0000903D
// DataOut: ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid> r0:<invalid>

l00009039_1:
	Mem432[r0_402 + -32:word32] = r1_399
	Mem433[r0_402 + -28:word32] = r2_418
	Mem434[r0_402 + -24:word32] = r3_413
	Mem435[r0_402 + -20:word32] = r4_421
	Mem436[r0_402 + -16:word32] = r8_407
	Mem437[r0_402 + -12:word32] = r9_417
	Mem438[r0_402 + -8:word32] = ip_412
	Mem439[r0_402 + -4:word32] = pc_398
// DataOut: ip lr pc r1 r3 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid> r0:<invalid>

l0000903D:
	branch ZC_404 l00009041
// DataOut: ip lr pc r1 r3 r5 r6 r7 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid> r0:<invalid>

l0000903D_1:
// DataOut: ip lr pc r1 r3 r5 r6 r7 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid> r0:<invalid>

l00009041:
	branch C_400 l00009045
// DataOut: ip lr pc r1 r3 r5 r6 r7 sp
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid> r0:<invalid>

l00009045:
	branch NZV_406 l00009049
// DataOut: ip lr pc r1 r3 r5 r6 r7 sp
// DataOut (flags): NV
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid> r0:<invalid>

l00009049:
	branch NV_420 l0000904D
// DataOut: ip lr pc r1 r3 r5 r6 r7 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid> r0:<invalid>

l00009049_1:
	Mem423[r1_399 + 4:word32] = r3_413
	Mem424[r1_399 + 8:word32] = r5_414
	Mem425[r1_399 + 12:word32] = r6_411
	Mem426[r1_399 + 16:word32] = r7_403
	Mem427[r1_399 + 20:word32] = ip_412
	Mem428[r1_399 + 24:word32] = sp_396
	Mem429[r1_399 + 28:word32] = lr_408
	Mem430[r1_399 + 32:word32] = pc_398
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid> r0:<invalid>

l0000904D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid> r0:<invalid>

vCoRoutineSchedule_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid> r0:<invalid>

l00009045_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid> r0:<invalid>

l00009041_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid> r0:<invalid>

l00009021_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid> r5:<invalid>

l00009011_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FE5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FDD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:<invalid> r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008FD1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:<invalid> r6:0x00008F91 - 0x00008F91 r3:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l00008F7D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:<invalid> lr:~0x00000F70

l00008F59_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:r8 - 3182

l00008F55_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 - 179 fp:0x00003FF0 r8:r8 - 3182



void xCoRoutineRemoveFromEventList(word32 r0, word32 r1, word32 r2, word32 r9, word32 pc, byte bArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV pc r0 r1 r2 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
xCoRoutineRemoveFromEventList_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

xCoRoutineRemoveFromEventList_entry:
// DataOut: pc r0 r1 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009095:
	branch NZV l00009099
// DataOut: pc r0 r1 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009099:
	branch Z l0000909D
// DataOut: pc r0 r1 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009099_1:
// DataOut: pc r0 r1 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000909D:
	branch C l000090A1
// DataOut: pc r0 r1 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> 0(fp):(byte) r0

l000090A1:
	branch N l000090A5
// DataOut: pc r0 r1 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> 0(fp):(byte) r0

l000090A5:
	branch N l000090A9
// DataOut: pc r0 r1 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> 0(fp):(byte) r0

l000090A5_1:
	r0 = (word32) Mem0[r1:byte]
// DataOut: pc r0 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> 0(fp):(byte) r0

l000090A9:
	__syscall(0x00463100)
	branch C l000090B1
// DataOut: pc r0 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r1 + 1529 r0:<invalid> 0(fp):(byte) r0

l000090AD_1:
	word32 sp_52
	byte N_57
	word32 r1_58
	call fnFFE51491 (retsize: 0;)
		uses: C,N,NZV,pc,r0_12,r1_11,r2,r9,sp_6,Z
		defs: C_56,N_57,NZV_53,pc_61,r0_55,r1_58,r2_60,r9_59,sp_52,Z_54
// DataOut: pc r0 r2 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:r1 + 1529 r0:<invalid> 0(fp):(byte) r0

l000090B1:
	branch NZV l000090B5
// DataOut: pc r0 r2 r9
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r1:r1 + 1529 r0:<invalid> 0(fp):(byte) r0

l000090B1_1:
	word32 sp_42
	byte NZV_43
	byte N_47
	word32 r1_48
	call fn01AC1259 (retsize: 0;)
		uses: C_20,N_19,NZV_22,pc_16,r0_25,r1_18,r2_24,r9_17,sp_23,Z_21
		defs: C_46,N_47,NZV_43,pc_51,r0_45,r1_48,r2_50,r9_49,sp_42,Z_44
// DataOut: pc r0 r2 r9
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r1:r1 + 1529 r0:<invalid> 0(fp):(byte) r0

l000090B5:
	branch C l000090B9
// DataOut: pc r0 r2 r9
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r1:r1 + 1529 r0:<invalid> 0(fp):(byte) r0

l000090B5_1:
	Mem40[r2:byte] = (byte) r9
// DataOut: pc r0
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> r1:r1 + 1529 r0:<invalid> 0(fp):(byte) r0

l000090B9:
	branch Z l000090BD
// DataOut: pc r0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:r1 + 1529 r0:<invalid> r2:r2 - 2154 0(fp):(byte) r0

l000090B9_1:
	word32 r0_38 = r0 - pc
	Mem39[r0_38:word16] = (uint16) r0_38
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:r1 + 1529 r0:<invalid> r2:r2 - 2154 0(fp):(byte) r0

l000090BD:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:r1 + 1529 r0:<invalid> r2:r2 - 2154 0(fp):(byte) r0

l000090A1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> 0(fp):(byte) r0

l0000909D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> 0(fp):(byte) r0

l00009095_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void GPIOGetIntNumber(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 sp
// Preserved: sp
GPIOGetIntNumber_entry:
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000090C5:
	branch Z l000090C9
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000090C9:
	branch NZV l000090CD
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000090C9_1:
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000090CD:
	branch Z l000090D1
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid>

l000090CD_1:
	__msr(cpsr, 0x000000F1)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid>

l000090D1:
	branch ZC l000090D5
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid>

l000090D1_1:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid>

l000090D5:
	branch Z l000090D5_then
	word32 sp_9
	word32 r8_13
	word32 cpsr_14
	byte ZC_15
	word32 r10_16
	word32 r5_17
	byte V_18
	word32 fp_19
	word32 r2_21
	word32 r6_22
	word32 r9_23
	word32 r3_24
	word32 r4_25
	word32 r7_26
	word32 lr_27
	byte N_28
	word32 pc_29
	byte NZCV_31
	word32 ip_32
	word32 r1_119
	bool C_101
	byte NZV_105
	byte Z_10
	word32 r0_107
	call fn010AF229 (retsize: 0;)
		uses: NZV,r0_7,r8_6,sp_1,Z,ZC
		defs: C_30,cpsr_14,fp_19,ip_32,lr_27,N_28,NZCV_31,NZV_11,pc_29,r0_12,r1_20,r10_16,r2_21,r3_24,r4_25,r5_17,r6_22,r7_26,r8_13,r9_23,sp_9,V_18,Z_10,ZC_15
	return
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid>

l000090D5_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid>

l000090D9:
	branch V_18 l000090DD
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid>

l000090DD:
	branch ZC_15 l000090E1
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid>

l000090DD_1:
	Mem126[fp_19:word32] = r0_107
	Mem127[fp_19 + 4:word32] = r1_119
	Mem128[fp_19 + 8:word32] = r2_21
	Mem129[fp_19 + 12:word32] = r6_22
	Mem130[fp_19 + 16:word32] = r9_23
	Mem131[fp_19 + 20:word32] = fp_19
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid>

l000090E1:
	branch Z_10 l000090E5
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid>

l000090E1_1:
	r0_107 = r0_107 & ~0x00420000
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid>

l000090E5:
	branch ZC_15 l000090E9
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid>

l000090E9:
	branch Z_10 l000090ED
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid>

l000090E9_1:
	r1_119 = r1_119 + 322
	r0_107 = (word32) Mem0[r1_119:byte]
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid>

l000090ED:
	branch N_28 l000090F1
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:r1 + 322

l000090ED_1:
	__syscall(0x00477020)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:r1 + 322

l000090F1:
	branch V_18 l000090F5
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:r1 + 322

l000090F5:
	branch V_18 l000090F9
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:r1 + 322

l000090F5_1:
	r1_119 = r0_107 ^ r7_26 >> 6
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:r1 + 322

l000090F9:
	branch V_18 l000090FD
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:<invalid>

l000090F9_1:
	r1_119 = r0_107 ^ r7_26 >> 32
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:<invalid>

l000090FD:
	branch V_18 l00009101
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:<invalid>

l000090FD_1:
	r1_119 = r0_107 ^ r7_26 >> 4
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:<invalid>

l00009101:
	branch Z_10 l00009105
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:<invalid>

l00009101_1:
	r0_107 = 0x00009109 + (r7_26 >> 32) + C_101
	byte NZCV_112 = cond(r0_107)
	C_101 = (bool) NZCV_112 (alias)
	Z_10 = NZCV_112 (alias)
	NZV_105 = NZCV_112 (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:<invalid>

l00009105:
	branch Z_10 l00009109
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:<invalid>

l00009105_1:
	r0_107 = r0_107 - __rcr(r0_107, 1, C_101)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:<invalid>

l00009109:
	branch NZV_105 l00009109_thunk_GPIODirModeSet
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:<invalid>

l00009109_thunk_GPIODirModeSet:
	GPIODirModeSet(r0_107, r1_119, r2_21, r3_24, r4_25, r5_17, r7_26, r8_13, r10_16, fp_19, ip_32, pc_29)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:<invalid>

l00009109_1:
	word32 r0_109 = r0_107 - __ror(r0_107, r0_107)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:<invalid>

l00009109_thunk_GPIODirModeSet:
	GPIODirModeSet(r0_109, r1_119, r2_21, r3_24, r4_25, r5_17, r7_26, r8_13, r10_16, fp_19, ip_32, pc_29)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:<invalid>

l000090F1_1:
	word32 sp_73
	byte Z_74
	byte NZV_75
	word32 r0_76
	word32 r8_77
	word32 cpsr_78
	byte ZC_79
	word32 r10_80
	word32 r5_81
	byte V_82
	word32 fp_83
	word32 r1_84
	word32 r2_85
	word32 r6_86
	word32 r9_87
	word32 r3_88
	word32 r4_89
	word32 r7_90
	word32 lr_91
	byte N_92
	word32 pc_93
	bool C_94
	byte NZCV_95
	word32 ip_96
	call (word32) Mem0[r0_107:int16] (retsize: 0;)
		uses: C_30,cpsr_14,fp_19,ip_32,lr_27,N_28,NZCV_31,NZV_11,pc_29,r0_72,r1_69,r10_16,r2_21,r3_24,r4_25,r5_17,r6_22,r7_26,r8_13,r9_23,sp_9,V_18,Z_10,ZC_15
		defs: C_94,cpsr_78,fp_83,ip_96,lr_91,N_92,NZCV_95,NZV_75,pc_93,r0_76,r1_84,r10_80,r2_85,r3_88,r4_89,r5_81,r6_86,r7_90,r8_77,r9_87,sp_73,V_82,Z_74,ZC_79
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid> r1:r1 + 322

l000090E5_1:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid>

GPIOGetIntNumber_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r0:<invalid> r5:<invalid> r10:<invalid> r2:<invalid> r4:<invalid> r6:<invalid> r7:<invalid> fp:<invalid> lr:<invalid> r3:<invalid> r1:<invalid> pc:<invalid> ip:<invalid>

l000090D9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 128 r0:<invalid> r5:r5 + 48 r10:<invalid>

l000090C5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void GPIODirModeSet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r7, word32 r8, word32 r10, word32 fp, word32 ip, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r8 sp
// Preserved: r4 sp
GPIODirModeSet_entry:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000910D:
	branch Z l00009111
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000910D_1:
	byte NZC_138 = cond(r4 ^ 0x000000F8)
	r0 = r4 ^ 0x000000F8
	Z = NZC_138 (alias)
	ZC = NZC_138 (alias)
	NZV = NZC_138 (alias)
	C = (bool) NZC_138 (alias)
	N = NZC_138 (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009111:
	branch Z l00009115
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r4 ^ 0x000000F8

l00009111_1:
	Mem135[0x00009309:word32] = r0
	pc = pc - 496
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r4 ^ 0x000000F8

l00009115:
	branch ZC l00009119
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r4 ^ 0x000000F8 pc:pc - 496

l00009115_1:
	word32 sp_114
	byte NZC_118
	byte ZC_120
	byte NZCV_125
	call fn010CC019 (retsize: 0;)
		uses: C_16,fp,ip,N_17,NZC_11,NZCV_14,NZV_15,pc_19,r0_10,r1,r10,r2,r3,r4,r5,r7,r8,sp_1,V,Z_12,ZC_13
		defs: C_124,fp_134,ip_121,N_126,NZC_118,NZCV_125,NZV_128,pc_119,r0_116,r1_127,r10_129,r2_131,r3_123,r4_117,r5_133,r7_132,r8_122,sp_114,V_130,Z_115,ZC_120
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r4 ^ 0x000000F8 pc:pc - 496

l00009119:
	branch Z l0000911D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r4 ^ 0x000000F8 pc:pc - 496

l00009119_1:
	ip = (r3 >> 32) - r8 - C
	byte NZCV_106 = cond(ip)
	C = (bool) NZCV_106 (alias)
	Z = NZCV_106 (alias)
	NZV = NZCV_106 (alias)
	V = NZCV_106 (alias)
	N = NZCV_106 (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r4 ^ 0x000000F8 pc:pc - 496

l0000911D:
	branch C l00009121
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r4 ^ 0x000000F8 pc:pc - 496 ip:<invalid>

l0000911D_1:
	byte NZCV_97 = cond((r4 >> r0) - r8 - C)
	C = (bool) NZCV_97 (alias)
	Z = NZCV_97 (alias)
	NZV = NZCV_97 (alias)
	V = NZCV_97 (alias)
	N = NZCV_97 (alias)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r4 ^ 0x000000F8 pc:pc - 496 ip:<invalid>

l00009121:
	branch N l00009125
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r4 ^ 0x000000F8 pc:pc - 496 ip:<invalid>

l00009125:
	branch C l00009129
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r4 ^ 0x000000F8 pc:pc - 496 ip:<invalid>

l00009125_1:
	r1 = DPB(r1, 0x39BF, 16)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r4 ^ 0x000000F8 pc:pc - 496 ip:<invalid>

l00009129:
	branch NZV l0000912D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r4 ^ 0x000000F8 pc:pc - 496 ip:<invalid> r1:DPB(r1, 0x39BF, 16)

l00009129_1:
	r0 = r1 & __ror(r10, 3)
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r4 ^ 0x000000F8 pc:pc - 496 ip:<invalid> r1:DPB(r1, 0x39BF, 16)

l0000912D:
	branch V l00009131
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> pc:pc - 496 ip:<invalid> r1:DPB(r1, 0x39BF, 16)

l0000912D_1:
	r2 = (word32) Mem0[r4:int16]
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> pc:pc - 496 ip:<invalid> r1:DPB(r1, 0x39BF, 16)

l00009131:
	branch Z l00009131_thunk_GPIODirModeGet
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> pc:pc - 496 ip:<invalid> r1:DPB(r1, 0x39BF, 16) r4:r4 r2:<invalid>

l00009131_thunk_GPIODirModeGet:
	GPIODirModeGet(r0, r1, r2, r3, r4, r5, r7, r8, r10, fp, ip, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> pc:pc - 496 ip:<invalid> r1:DPB(r1, 0x39BF, 16) r4:r4 r2:<invalid>

l00009131_1:
	word32 r0_82 = r7 >> 32
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> pc:pc - 496 ip:<invalid> r1:DPB(r1, 0x39BF, 16) r4:r4 r2:<invalid>

l00009131_thunk_GPIODirModeGet:
	GPIODirModeGet(r0_82, r1, r2, r3, r4, r5, r7, r8, r10, fp, ip, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:r7 >> 32 pc:pc - 496 ip:<invalid> r1:DPB(r1, 0x39BF, 16) r4:r4 r2:<invalid>

GPIODirModeSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> pc:<invalid> ip:<invalid> r1:<invalid> r4:<invalid> r2:<invalid> r8:<invalid> r10:<invalid> fp:<invalid> lr:<invalid> r3:<invalid> r5:<invalid>

l00009121_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:r4 ^ 0x000000F8 pc:pc - 496 ip:<invalid>



void GPIODirModeGet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r7, word32 r8, word32 r10, word32 fp, word32 ip, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r8 sp
// Preserved: sp
GPIODirModeGet_entry:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009135:
	branch Z l00009139
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009135_1:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009139:
	branch NZV l0000913D
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:0x00000023

l00009139_1:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:0x00000023

l0000913D:
	branch NZV l00009141
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009141:
	branch C l00009145
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009141_1:
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009145:
	branch Z l00009149
// DataOut: fp ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r0:<invalid> r8:r8 + 2

l00009145_1:
	Mem64[r2:word32] = r2
	Mem66[r2 + 4:word32] = r5
	Mem68[r2 + 8:word32] = r10
	Mem70[r2 + 12:word32] = fp
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r0:<invalid> r8:r8 + 2

l00009149:
	branch Z l00009149_then
	word32 sp_14
	byte NZV_19
	word32 r8_21
	word32 r2_22
	word32 r5_23
	word32 r10_24
	word32 fp_25
	byte NZCV_26
	word32 r7_28
	word32 r3_29
	word32 r4_30
	word32 ip_31
	word32 pc_32
	word32 r1_16
	byte C_20
	byte Z_15
	byte NZV_17
	byte V_27
	word32 r0_18
	call fn008C944D (retsize: 0;)
		uses: C,NZV,NZV,r0_8,r1_7,r8_12,sp_13,Z
		defs: C_20,fp_25,ip_31,NZCV_26,NZV_17,NZV_19,pc_32,r0_18,r1_16,r10_24,r2_22,r3_29,r4_30,r5_23,r7_28,r8_21,sp_14,V_27,Z_15
	return
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r0:<invalid> r8:r8 + 2

l00009149_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r0:<invalid> r8:r8 + 2

l0000914D:
	branch Z_15 l00009151
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r0:<invalid> r8:r8 + 2

l0000914D_1:
	r1_16 = 0x42009155 + C_20
	byte NZCV_57 = cond(r1_16)
	C_20 = NZCV_57 (alias)
	Z_15 = NZCV_57 (alias)
	NZV_17 = NZCV_57 (alias)
	V_27 = NZCV_57 (alias)
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r0:<invalid> r8:r8 + 2

l00009151:
	branch Z_15 l00009155
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r0:<invalid> r8:r8 + 2

l00009151_1:
	r0_18 = r0_18 ^ r0_18 >> 32
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r0:<invalid> r8:r8 + 2

l00009155:
	branch V_27 l00009159
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r0:<invalid> r8:r8 + 2

l00009159:
	branch NZV_17 l00009159_thunk_GPIOIntTypeSet
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r0:<invalid> r8:r8 + 2

l00009159_thunk_GPIOIntTypeSet:
	GPIOIntTypeSet(r0_18, r1_16, r2_22, r3_29, r4_30, r5_23, r7_28, r8_21, r10_24, ip_31, pc_32)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r8:r8 + 2

l00009159_1:
	word32 r0_48 = 0x00009161 + (r7_28 >> 32) + C_20
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r8:r8 + 2

l00009159_thunk_GPIOIntTypeSet:
	GPIOIntTypeSet(r0_48, r1_16, r2_22, r3_29, r4_30, r5_23, r7_28, r8_21, r10_24, ip_31, pc_32)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r8:r8 + 2

GPIODirModeGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r0:<invalid> r8:<invalid> pc:<invalid> r4:<invalid> r2:<invalid> r10:<invalid> fp:<invalid> lr:<invalid> ip:<invalid> r3:<invalid> r5:<invalid>

l00009155_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r0:<invalid> r8:r8 + 2

l0000913D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>



void GPIOIntTypeSet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r7, word32 r8, word32 r10, word32 ip, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r8 sp
// Preserved: sp
GPIOIntTypeSet_entry:
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000915D:
	branch Z l00009161
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000915D_1:
	byte NZC_189 = cond(r4 ^ 0x00F80000)
	r0 = r4 ^ 0x00F80000
	Z = NZC_189 (alias)
	ZC = NZC_189 (alias)
	NZV = NZC_189 (alias)
	NZV = NZC_189 (alias)
	C = (bool) NZC_189 (alias)
	N = NZC_189 (alias)
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009161:
	branch Z l00009165
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r4 ^ 0x00F80000

l00009161_1:
	Mem186[0x00009359:word32] = r0
	pc = pc - 496
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r4 ^ 0x00F80000

l00009165:
	branch ZC l00009169
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r4 ^ 0x00F80000 pc:pc - 496

l00009165_1:
	word32 sp_164
	byte NZC_168
	byte ZC_170
	byte NZCV_174
	word32 fp_181
	word32 lr_182
	call fn010CC069 (retsize: 0;)
		uses: C_17,fp,ip,lr,N_18,NZC_11,NZCV_14,NZV_15,NZV_16,pc_21,r0_19,r1,r10,r2,r3,r4,r5,r7,r8,sp_1,Z_12,ZC_13
		defs: C_173,fp_181,ip_185,lr_182,N_178,NZC_168,NZCV_174,NZV_175,NZV_177,pc_169,r0_166,r1_172,r10_180,r2_179,r3_176,r4_167,r5_183,r7_184,r8_171,sp_164,Z_165,ZC_170
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r4 ^ 0x00F80000 pc:pc - 496

l00009169:
	branch Z l0000916D
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r4 ^ 0x00F80000 pc:pc - 496

l0000916D:
	branch Z l00009171
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r4 ^ 0x00F80000 pc:pc - 496

l0000916D_1:
	r8 = r8 + 52
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r4 ^ 0x00F80000 pc:pc - 496

l00009171:
	branch Z l00009175
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r4 ^ 0x00F80000 pc:pc - 496 r8:r8 + 52

l00009171_1:
	r1 = 0x40000003 - r0 - C
	byte NZCV_153 = cond(r1)
	Z = NZCV_153 (alias)
	NZV = NZCV_153 (alias)
	NZV = NZCV_153 (alias)
	N = NZCV_153 (alias)
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r4 ^ 0x00F80000 pc:pc - 496 r8:r8 + 52

l00009175:
	branch Z l00009179
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r4 ^ 0x00F80000 pc:pc - 496 r8:r8 + 52 r1:<invalid>

l00009175_1:
	word32 sp_130
	byte NZC_134
	byte ZC_136
	bool C_139
	byte NZCV_140
	word32 fp_147
	word32 lr_148
	call fnFEFCE1B9 (retsize: 0;)
		uses: C_63,fp_51,ip_33,lr_52,N_64,NZC_57,NZCV_60,NZV_61,NZV_62,pc_53,r0_48,r1_65,r10_50,r2_54,r3_36,r4_39,r5_35,r7_34,r8_56,sp_55,Z_58,ZC_59
		defs: C_139,fp_147,ip_151,lr_148,N_144,NZC_134,NZCV_140,NZV_141,NZV_143,pc_135,r0_132,r1_138,r10_146,r2_145,r3_142,r4_133,r5_149,r7_150,r8_137,sp_130,Z_131,ZC_136
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r4 ^ 0x00F80000 pc:pc - 496 r8:r8 + 52 r1:<invalid>

l00009179:
	branch NZV l0000917D
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r4 ^ 0x00F80000 pc:pc - 496 r8:r8 + 52 r1:<invalid>

l00009179_1:
	r8 = r3 - (r3 >> 22)
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r4 ^ 0x00F80000 pc:pc - 496 r8:r8 + 52 r1:<invalid>

l0000917D:
	branch NZV l00009181
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r4 ^ 0x00F80000 pc:pc - 496 r8:<invalid> r1:<invalid>

l0000917D_1:
	r4 = r4 + 72
	r0 = (word32) Mem0[r4:int16]
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r4 ^ 0x00F80000 pc:pc - 496 r8:<invalid> r1:<invalid>

l00009181:
	branch N l00009185
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> pc:pc - 496 r8:<invalid> r1:<invalid> r4:r4 + 72

l00009181_1:
	r0 = r4 ^ 0x0000F800
	Z = cond(r0) (alias)
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> pc:pc - 496 r8:<invalid> r1:<invalid> r4:r4 + 72

l00009185:
	branch Z l00009189
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> pc:pc - 496 r8:<invalid> r1:<invalid> r4:r4 + 72

l00009185_1:
	r0 = Mem0[pc + 4:word32]
	r1 = Mem0[pc + 8:word32]
	r2 = Mem0[pc + 12:word32]
	r10 = Mem0[pc + 16:word32]
	pc = pc + 28
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> pc:pc - 496 r8:<invalid> r1:<invalid> r4:r4 + 72

l00009189:
	branch Z l0000918D
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> pc:<invalid> r8:<invalid> r1:<invalid> r4:r4 + 72 r2:<invalid> r10:<invalid> fp:<invalid> lr:<invalid>

l00009189_1:
	r2 = ~(r3 >> 6)
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> pc:<invalid> r8:<invalid> r1:<invalid> r4:r4 + 72 r2:<invalid> r10:<invalid> fp:<invalid> lr:<invalid>

l0000918D:
	branch Z l00009191
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> pc:<invalid> r8:<invalid> r1:<invalid> r4:r4 + 72 r2:<invalid> r10:<invalid> fp:<invalid> lr:<invalid>

l00009191:
	branch Z l00009191_thunk_GPIOIntTypeGet
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> pc:<invalid> r8:<invalid> r1:<invalid> r4:r4 + 72 r2:<invalid> r10:<invalid> fp:<invalid> lr:<invalid>

l00009191_thunk_GPIOIntTypeGet:
	GPIOIntTypeGet(r0, r1, r2, r3, r4, r5, r7, r8, r10, ip, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> pc:<invalid> r8:<invalid> r1:<invalid> r4:r4 + 72 r2:<invalid> r10:<invalid> fp:<invalid> lr:<invalid>

GPIOIntTypeSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> pc:<invalid> r8:<invalid> r1:<invalid> r4:r4 + 72 r2:<invalid> r10:<invalid> fp:<invalid> lr:<invalid> ip:<invalid> r3:<invalid> r5:<invalid>

l00009191_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> pc:<invalid> r8:<invalid> r1:<invalid> r4:r4 + 72 r2:<invalid> r10:<invalid> fp:<invalid> lr:<invalid>

l0000918D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> pc:<invalid> r8:<invalid> r1:<invalid> r4:r4 + 72 r2:<invalid> r10:<invalid> fp:<invalid> lr:<invalid>

l00009169_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r4 ^ 0x00F80000 pc:pc - 496



void GPIOIntTypeGet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r7, word32 r8, word32 r10, word32 ip, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// LiveOut:
// Trashed: NZCV ip pc r0 r1 r2 r3 r5 r8 sp
// Preserved: sp
GPIOIntTypeGet_entry:
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009195:
	branch Z l00009199
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009199:
	branch Z l0000919D
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009199_1:
	byte NZCV_129 = cond(~(r4 >> 6))
	Z = NZCV_129 (alias)
	NZV = NZCV_129 (alias)
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000919D:
	branch NZV l000091A1
// DataOut: ip pc r0 r1 r10 r2 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6)

l0000919D_1:
// DataOut: ip pc r0 r1 r10 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6)

l000091A1:
	branch Z l000091A1_then
	word32 sp_16
	word32 r4_19
	byte NZCV_20
	byte NZV_21
	word32 r2_23
	byte NZC_25
	word32 r10_116
	word32 r8_115
	word32 r7_114
	word32 r5_111
	word32 ip_105
	word32 r0_101
	byte Z_100
	byte V_113
	bool C_109
	word32 r3_110
	word32 pc_112
	word32 r1_107
	call fn00D0A589 (retsize: 0;)
		uses: C_15,NZC_14,NZCV_10,NZV_12,r0_9,sp_1,V_13,Z_11
		defs: C_26,ip_22,NZC_25,NZCV_20,NZV_21,pc_29,r0_18,r1_24,r10_33,r2_23,r3_27,r4_19,r5_28,r7_31,r8_32,sp_16,V_30,Z_17
	return
// DataOut: ip pc r0 r1 r10 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid>

l000091A1_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid>

l000091A5:
	branch Z_100 l000091A9
// DataOut: ip pc r0 r1 r10 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid>

l000091A9:
	branch Z_100 l000091AD
// DataOut: ip pc r0 r1 r10 r3 r4 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid>

l000091A9_1:
	byte NZC_118 = cond(r4_19 << 8)
	r1_107 = r4_19 << 8
	Z_100 = NZC_118 (alias)
	C_109 = (bool) NZC_118 (alias)
// DataOut: ip pc r0 r1 r10 r3 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid>

l000091AD:
	branch Z_100 l000091B1
// DataOut: ip pc r0 r1 r10 r3 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid> r1:r4 << 8

l000091AD_1:
	word32 sp_99
	word32 r4_102
	byte NZCV_103
	byte NZV_104
	word32 r2_106
	byte NZC_108
	call fn0088923D (retsize: 0;)
		uses: C_39,ip_22,NZC_38,NZCV_35,NZV_37,pc_29,r0_18,r1_34,r10_33,r2_23,r3_27,r4_19,r5_28,r7_31,r8_32,sp_16,V_30,Z_36
		defs: C_109,ip_105,NZC_108,NZCV_103,NZV_104,pc_112,r0_101,r1_107,r10_116,r2_106,r3_110,r4_102,r5_111,r7_114,r8_115,sp_99,V_113,Z_100
// DataOut: ip pc r0 r1 r10 r3 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid> r1:r4 << 8

l000091B1:
	branch Z_100 l000091B5
// DataOut: ip pc r0 r1 r10 r3 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid> r1:r4 << 8

l000091B1_1:
	r1_107 = 0x420091B9 + C_109
	byte NZCV_93 = cond(r1_107)
	Z_100 = NZCV_93 (alias)
	V_113 = NZCV_93 (alias)
	C_109 = (bool) NZCV_93 (alias)
// DataOut: ip pc r0 r1 r10 r3 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid> r1:r4 << 8

l000091B5:
	branch Z_100 l000091B9
// DataOut: ip pc r0 r1 r10 r3 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid> r1:<invalid>

l000091B5_1:
	Mem88[r3_110 + -8:word32] = r0_101
	Mem89[r3_110 + -4:word32] = r1_107
	Mem90[r3_110:word32] = r5_111
	r3_110 = r3_110 - 12
// DataOut: ip pc r0 r1 r10 r3 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid> r1:<invalid>

l000091B9:
	branch Z_100 l000091BD
// DataOut: ip pc r0 r1 r10 r3 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid> r1:<invalid> r3:r3 - 12

l000091B9_1:
	pc_112 = pc_112 + 1090
	r1_107 = Mem0[0x00009603:word32]
// DataOut: ip pc r0 r1 r10 r3 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid> r1:<invalid> r3:r3 - 12

l000091BD:
	branch Z_100 l000091C1
// DataOut: ip pc r0 r1 r10 r3 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid> r1:<invalid> r3:r3 - 12 pc:pc + 1090

l000091BD_1:
// DataOut: ip pc r0 r1 r10 r3 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid> r1:<invalid> r3:r3 - 12 pc:pc + 1090

l000091C1:
	branch V_113 l000091C5
// DataOut: ip pc r0 r1 r10 r3 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid> r1:<invalid> r3:r3 - 12 pc:pc + 1090

l000091C1_1:
	r1_107 = r3_110 - (r3_110 >> 16)
// DataOut: ip pc r0 r1 r10 r3 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid> r1:<invalid> r3:r3 - 12 pc:pc + 1090

l000091C5:
	branch Z_100 l000091C5_thunk_GPIOPadConfigSet
// DataOut: ip pc r0 r1 r10 r3 r5 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid> r1:<invalid> r3:r3 - 12 pc:pc + 1090

l000091C5_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0_101, r1_107, r3_110, r5_111, r8_115, r10_116, ip_105, pc_112)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid> r1:<invalid> r3:r3 - 12 pc:pc + 1090

l000091C5_1:
	word32 r0_76 = 0x000091CD + (r7_114 >> 32) + C_109
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid> r1:<invalid> r3:r3 - 12 pc:pc + 1090

l000091C5_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0_76, r1_107, r3_110, r5_111, r8_115, r10_116, ip_105, pc_112)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:r2 + 145 ip:<invalid> r1:<invalid> r3:r3 - 12 pc:pc + 1090

GPIOIntTypeGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r2:r2 + 145 ip:<invalid> r1:<invalid> r3:r3 - 12 pc:<invalid> r8:<invalid> r5:<invalid>

l000091A5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:~(r4 >> 6) r2:r2 + 145 ip:<invalid>

l00009195_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void GPIOPadConfigSet(word32 r0, word32 r1, word32 r3, word32 r5, word32 r8, word32 r10, word32 ip, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV ip pc r0 r1 r10 r3 r5 r8
// LiveOut:
// Trashed: NZCV ip pc r0 r1 r5 r8 sp
// Preserved:
GPIOPadConfigSet_entry:
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000091C9:
	branch Z l000091CD
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000091C9_1:
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000091CD:
	branch Z l000091D1
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 4

l000091CD_1:
	r1 = ~(r5 >> 4)
	byte NZCV_200 = cond(r1)
	r1_r0 = SEQ(r1, r0) (alias)
	Z = NZCV_200 (alias)
	NZV = NZCV_200 (alias)
	NZV = NZCV_200 (alias)
	ZC = NZCV_200 (alias)
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 4

l000091D1:
	branch Z l000091D5
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 4 r1:~(r5 >> 4)

l000091D5:
	branch NZV l000091D9
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 4 r1:~(r5 >> 4)

l000091D5_1:
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:r8 + 4 r1:~(r5 >> 4)

l000091D9:
	branch NZV l000091DD
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:~(r5 >> 4)

l000091D9_1:
	Mem195[r5:word64] = r1_r0
	r5 = r5 - 8
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:~(r5 >> 4)

l000091DD:
	branch Z l000091E1
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:~(r5 >> 4) r5:r5 - 8

l000091DD_1:
	r0 = r5 - 0xF8000000
	r1_r0 = SEQ(r1, r0) (alias)
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:~(r5 >> 4) r5:r5 - 8

l000091E1:
	branch Z l000091E5
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:~(r5 >> 4) r5:r5 - 8 r0:r5 - 0xF8000010

l000091E1_1:
	Mem191[0x000094D9:word32] = r0
	pc = pc - 752
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:~(r5 >> 4) r5:r5 - 8 r0:r5 - 0xF8000010

l000091E5:
	branch ZC l000091E9
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:~(r5 >> 4) r5:r5 - 8 r0:r5 - 0xF8000010 pc:pc - 752

l000091E9:
	branch Z l000091ED
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:~(r5 >> 4) r5:r5 - 8 r0:r5 - 0xF8000010 pc:pc - 752

l000091E9_1:
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:~(r5 >> 4) r5:r5 - 8 r0:r5 - 0xF8000010 pc:pc - 752

l000091ED:
	branch Z l000091F1
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:~(r5 >> 4) r5:r5 - 8 r0:r5 - 0xF8000010 pc:pc - 752 ip:<invalid>

l000091F1:
	branch Z l000091F5
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:~(r5 >> 4) r5:r5 - 8 r0:r5 - 0xF8000010 pc:pc - 752 ip:<invalid>

l000091F1_1:
	word32 v18_184 = (word32) Mem0[r0:byte]
	r0 = r0 + 581
	r1 = v18_184
	r1_r0 = SEQ(v18_184, r0) (alias)
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:~(r5 >> 4) r5:r5 - 8 r0:r5 - 0xF8000010 pc:pc - 752 ip:<invalid>

l000091F5:
	branch Z l000091F9
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:r5 - 8 r0:<invalid> pc:pc - 752 ip:<invalid>

l000091F9:
	branch NZV l000091FD
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:r5 - 8 r0:<invalid> pc:pc - 752 ip:<invalid>

l000091F9_1:
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:r5 - 8 r0:<invalid> pc:pc - 752 ip:<invalid>

l000091FD:
	branch Z l00009201
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:r5 - 8 r0:<invalid> pc:pc - 752 ip:<invalid>

l000091FD_1:
	r0 = r5 - 0x00F80000
	r1_r0 = SEQ(r1, r0) (alias)
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:r5 - 8 r0:<invalid> pc:pc - 752 ip:<invalid>

l00009201:
	branch NZV l00009205
// DataOut: ip pc r0 r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:r5 - 8 r0:<invalid> pc:pc - 752 ip:<invalid>

l00009201_1:
	Mem178[0x00009209 + __ror(r0, 17):word32] = r1_r0
	word32 pc_179 = pc - __ror(r0, 17)
// DataOut: ip r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:r5 - 8 r0:<invalid> pc:pc - 752 ip:<invalid>

l00009205:
	branch Z l00009209
// DataOut: ip r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:r5 - 8 r0:<invalid> pc:<invalid> ip:<invalid>

l00009205_1:
	Mem176[r5:word32] = r1
// DataOut: ip r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:r5 - 8 r0:<invalid> pc:<invalid> ip:<invalid>

l00009209:
	branch ZC l00009209_then
	word32 sp_43
	byte Z_44
	word32 r8_45
	word32 r1_46
	word32 r5_47
	byte NZCV_48
	byte NZV_49
	word32 r3_50
	byte NZV_51
	word32 r0_52
	word32 pc_53
	byte ZC_54
	word32 ip_55
	byte N_56
	bool C_57
	word32 r10_58
	byte V_59
	call fn010CBD0D (retsize: 0;)
		uses: C_16,ip_35,N_17,NZCV_21,NZV_19,NZV_20,pc_42,r0_41,r1_38,r5_27,r8_39,sp_4,V_15,Z_22,ZC_18
		defs: C_57,ip_55,N_56,NZCV_48,NZV_49,NZV_51,pc_53,r0_52,r1_46,r10_58,r3_50,r5_47,r8_45,sp_43,V_59,Z_44,ZC_54
	return
// DataOut: ip r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009209_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l0000920D:
	branch Z_44 l00009211
// DataOut: ip r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009211:
	branch Z_44 l00009215
// DataOut: ip r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009215:
	branch N_56 l00009219
// DataOut: ip r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009219:
	branch ZC_54 l00009219_then
	word32 sp_60
	byte Z_61
	word32 r8_62
	word32 r1_63
	word32 r5_64
	byte NZCV_65
	byte NZV_66
	word32 r3_67
	byte NZV_68
	word32 r0_69
	word32 pc_70
	word32 ip_72
	bool C_74
	word32 r10_75
	byte V_76
	byte N_174
	byte ZC_172
	call fn010CBD1D (retsize: 0;)
		uses: C_57,ip_55,N_56,NZCV_48,NZV_49,NZV_51,pc_53,r0_52,r1_46,r10_58,r3_50,r5_47,r8_45,sp_43,V_59,Z_44,ZC_54
		defs: C_74,ip_72,N_73,NZCV_65,NZV_66,NZV_68,pc_70,r0_69,r1_63,r10_75,r3_67,r5_64,r8_62,sp_60,V_76,Z_61,ZC_71
	return
// DataOut: ip r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009219_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l0000921D:
	branch Z_61 l00009221
// DataOut: ip r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009221:
	branch Z_61 l00009225
// DataOut: ip r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009221_1:
	byte NZCV_168 = cond((r5_64 >> 32) - r8_62 - C_74)
	ZC_172 = NZCV_168 (alias)
	N_174 = NZCV_168 (alias)
// DataOut: ip r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009225:
	branch N_174 l00009229
// DataOut: ip r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009229:
	branch ZC_172 l00009229_then
	word32 sp_86
	word32 r8_88
	word32 r1_89
	word32 r5_90
	byte NZCV_91
	byte NZV_92
	word32 r3_93
	byte NZV_94
	word32 r0_95
	word32 pc_96
	word32 ip_98
	bool C_100
	word32 r10_101
	byte V_102
	byte N_105
	byte ZC_106
	byte Z_110
	call fn010CBD2D (retsize: 0;)
		uses: C_78,ip_72,N_79,NZCV_83,NZV_81,NZV_82,pc_70,r0_69,r1_63,r10_75,r3_67,r5_64,r8_62,sp_85,V_77,Z_84,ZC_80
		defs: C_100,ip_98,N_99,NZCV_91,NZV_92,NZV_94,pc_96,r0_95,r1_89,r10_101,r3_93,r5_90,r8_88,sp_86,V_102,Z_87,ZC_97
	return
// DataOut: ip r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009229_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l0000922D:
	branch Z_110 l00009231
// DataOut: ip r1 r10 r3 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l0000922D_1:
	byte NZCV_159 = cond((r3_93 >> 32) - r8_88 - C_100)
	Z_110 = NZCV_159 (alias)
	ZC_106 = NZCV_159 (alias)
	N_105 = NZCV_159 (alias)
// DataOut: ip r1 r10 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009231:
	branch Z_110 l00009235
// DataOut: ip r1 r10 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009231_1:
// DataOut: ip r1 r10 r5 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009235:
	branch N_105 l00009239
// DataOut: ip r1 r10 r5 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009239:
	branch ZC_106 l00009239_then
	word32 sp_114
	byte Z_115
	word32 r8_116
	word32 r5_118
	byte NZCV_119
	byte NZV_120
	word32 r3_121
	byte NZV_122
	word32 r0_123
	word32 pc_124
	byte ZC_125
	byte N_127
	bool C_128
	word32 r10_129
	byte V_130
	word32 ip_126
	word32 r1_117
	call fn010CBD3D (retsize: 0;)
		uses: C_104,ip_111,N_105,NZCV_109,NZV_107,NZV_108,pc_96,r0_95,r1_89,r10_101,r3_93,r5_90,r8_113,sp_112,V_103,Z_110,ZC_106
		defs: C_128,ip_126,N_127,NZCV_119,NZV_120,NZV_122,pc_124,r0_123,r1_117,r10_129,r3_121,r5_118,r8_116,sp_114,V_130,Z_115,ZC_125
	return
// DataOut: ip r1 r10 r5 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009239_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l0000923D:
	branch Z_115 l00009241
// DataOut: ip r1 r10 r5 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l0000923D_1:
	ip_126 = (word32) Mem0[r8_116:byte]
// DataOut: ip r1 r10 r5
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009241:
	branch Z_115 l00009245
// DataOut: ip r1 r10 r5
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009245:
	branch Z_115 l00009249
// DataOut: ip r1 r10 r5
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009249:
	branch Z_115 l0000924D
// DataOut: ip r1 r10 r5
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009249_1:
	r1_117 = Mem0[ip_126:word32]
// DataOut: r1 r10 r5
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l0000924D:
	branch C_128 l00009251
// DataOut: r1 r10 r5
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l0000924D_1:
	r1_117 = DPB(r1_117, 0x39BF, 16)
// DataOut: r1 r10 r5
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009251:
	branch NZV_120 l00009255
// DataOut: r1 r10 r5
// DataOut (flags): V
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009251_1:
	word32 r0_145 = r1_117 & __ror(r10_129, 3)
// DataOut: r5
// DataOut (flags): V
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009255:
	branch V_130 l00009259
// DataOut: r5
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009255_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009259:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

GPIOPadConfigSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009245_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009241_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009235_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009225_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l0000921D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009215_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l00009211_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l0000920D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:<invalid> r0:<invalid> pc:<invalid> ip:<invalid>

l000091F5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:<invalid> r5:r5 - 8 r0:<invalid> pc:pc - 752 ip:<invalid>

l000091ED_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:~(r5 >> 4) r5:r5 - 8 r0:r5 - 0xF8000010 pc:pc - 752 ip:<invalid>

l000091E5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:<invalid> r1:~(r5 >> 4) r5:r5 - 8 r0:r5 - 0xF8000010 pc:pc - 752

l000091D1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 + 4 r1:~(r5 >> 4)



void GPIOPadConfigGet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
GPIOPadConfigGet_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000925D:
	branch NZV l00009261
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000925D_1:
	Mem203[r4:word16] = (uint16) r0
	r4 = r4 - 20
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009261:
	branch Z l00009265
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20

l00009261_1:
	r5 = r5 + 248
	r0 = (word32) Mem0[r5:byte]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20

l00009265:
	branch NZV l00009269
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20 r5:r5 + 248 r0:<invalid>

l00009269:
	branch Z l0000926D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20 r5:r5 + 248 r0:<invalid>

l00009269_1:
	r8 = r8 + 178
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20 r5:r5 + 248 r0:<invalid>

l0000926D:
	branch NZV l00009271
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:r5 + 248 r0:<invalid> r8:r8 + 178

l0000926D_1:
	r0 = r2 - (r5 >> 26)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:r5 + 248 r0:<invalid> r8:r8 + 178

l00009271:
	branch Z l00009275
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:r5 + 248 r0:<invalid> r8:r8 + 178

l00009271_1:
	r5 = r5 + 2296
	r0 = (word32) Mem0[r5:byte]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:r5 + 248 r0:<invalid> r8:r8 + 178

l00009275:
	branch Z l00009279
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:<invalid> r0:<invalid> r8:r8 + 178

l00009275_1:
	Mem191[r7:word16] = (uint16) r0
	r7 = r7 - 31
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:<invalid> r0:<invalid> r8:r8 + 178

l00009279:
	branch NZV l0000927D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31

l00009279_1:
	r0 = r2 - (r7 >> 24)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31

l0000927D:
	branch Z l00009281
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31

l0000927D_1:
	Mem188[r5:byte] = (byte) r1
	r5 = r5 - 2296
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31

l00009281:
	branch Z l00009285
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31

l00009281_1:
	Mem186[r6:word16] = (uint16) r0
	r6 = r6 - 47
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31

l00009285:
	branch Z l00009289
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47

l00009285_1:
	Mem184[r2:byte] = (byte) r0
	r2 = r2 - 3366
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47

l00009289:
	branch Z l0000928D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:r2 - 3366

l00009289_1:
	Mem182[r5:word16] = (uint16) r0
	r5 = r5 - 79
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:r2 - 3366

l0000928D:
	branch Z l00009291
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:r2 - 3366

l0000928D_1:
	Mem180[r2:byte] = (byte) r0
	r2 = r2 - 3109
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:r2 - 3366

l00009291:
	branch Z l00009295
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid>

l00009291_1:
	Mem178[r4:word16] = (uint16) r0
	r4 = r4 - 143
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:r4 - 20 r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid>

l00009295:
	branch C l00009299
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid>

l00009295_1:
	Mem177[r3 - 3620:byte] = (byte) r3
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid>

l00009299:
	branch Z l0000929D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid>

l00009299_1:
	Mem175[r3:byte] = (byte) r2
	r3 = r3 - 3139
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid>

l0000929D:
	branch Z l000092A1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139

l000092A1:
	branch Z l000092A5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139

l000092A1_1:
	byte NZCV_168 = cond((r5 >> 32) - r8 - C)
	C = NZCV_168 (alias)
	NZV = NZCV_168 (alias)
	Z = NZCV_168 (alias)
	N = NZCV_168 (alias)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139

l000092A5:
	branch NZV l000092A9
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139

l000092A5_1:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139

l000092A9:
	branch Z l000092AD
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid>

l000092A9_1:
	Mem158[r5:word32] = r3
	Mem159[r5 + 4:word32] = r4
	Mem160[r5 + 8:word32] = r5
	Mem161[r5 + 12:word32] = r6
	Mem162[r5 + 16:word32] = r7
	Mem163[r5 + 20:word32] = r10
	Mem164[r5 + 24:word32] = ip
	r5 = r5 + 28
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid>

l000092AD:
	branch NZV l000092B1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid>

l000092AD_1:
	Mem156[r5:word16] = (uint16) r0
	r5 = r5 - 31
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid>

l000092B1:
	branch Z l000092B5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid>

l000092B1_1:
	Mem146[r5 + -28:word32] = r3
	Mem147[r5 + -24:word32] = r4
	Mem148[r5 + -20:word32] = r5
	Mem149[r5 + -16:word32] = r6
	Mem150[r5 + -12:word32] = r7
	Mem151[r5 + -8:word32] = r10
	Mem153[r5 + -4:word32] = fp
	Mem154[r5:word32] = ip
	r5 = r5 - 32
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid>

l000092B5:
	branch C l000092B9
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid>

l000092B5_1:
	Mem145[r5 - pc:word16] = (uint16) r0
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid>

l000092B9:
	branch Z l000092BD
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid>

l000092B9_1:
	byte NZCV_137 = cond(0x420092C1 + C)
	C = NZCV_137 (alias)
	Z = NZCV_137 (alias)
	N = NZCV_137 (alias)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid>

l000092BD:
	branch C l000092C1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid>

l000092C1:
	branch Z l000092C5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid>

l000092C1_1:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid>

l000092C5:
	branch Z l000092C9
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid> pc:pc + 1090

l000092C9:
	branch Z l000092CD
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid> pc:pc + 1090

l000092C9_1:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid> pc:pc + 1090

l000092CD:
	branch N l000092D1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:<invalid> r2:<invalid> r3:r3 - 3139 r1:<invalid> pc:<invalid> r10:<invalid> ip:<invalid>

l000092CD_1:
	Mem125[r2:word32] = r0
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:<invalid> r2:<invalid> r3:r3 - 3139 r1:<invalid> pc:<invalid> r10:<invalid> ip:<invalid>

l000092D1:
	branch Z l000092D5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:<invalid> r2:<invalid> r3:r3 - 3139 r1:<invalid> pc:<invalid> r10:<invalid> ip:<invalid>

l000092D1_1:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:<invalid> r2:<invalid> r3:r3 - 3139 r1:<invalid> pc:<invalid> r10:<invalid> ip:<invalid>

l000092D5:
	branch Z l000092D5_then
	word32 sp_67
	word32 r0_69
	word32 r4_70
	byte Z_71
	word32 r5_72
	byte NZV_73
	word32 r8_74
	word32 r2_75
	word32 r7_76
	word32 r1_77
	word32 r6_78
	word32 r3_80
	byte NZCV_81
	word32 r10_82
	word32 ip_83
	word32 fp_84
	byte N_86
	bool Q_87
	byte V_88
	word32 r9_89
	word32 lr_90
	word32 pc_115
	byte C_117
	byte NZV_118
	call fn010CBBE9 (retsize: 0;)
		uses: C_50,ip_61,N_55,NZCV_49,NZV_51,NZV_53,pc_65,r0_19,r1_64,r10_62,r2_66,r3_30,r4_27,r5_47,r6_63,r7_18,r8_12,sp_34,V_54,Z_52
		defs: C_79,fp_84,ip_83,lr_90,N_86,NZCV_81,NZV_68,NZV_73,pc_85,Q_87,r0_69,r1_77,r10_82,r2_75,r3_80,r4_70,r5_72,r6_78,r7_76,r8_74,r9_89,sp_67,V_88,Z_71
	return
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:<invalid> r2:<invalid> r3:r3 - 3139 r1:<invalid> pc:<invalid> r10:<invalid> ip:<invalid>

l000092D5_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:<invalid> r2:<invalid> r3:r3 - 3139 r1:<invalid> pc:<invalid> r10:<invalid> ip:<invalid>

l000092D9:
	branch V_88 l000092DD
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:<invalid> r2:<invalid> r3:r3 - 3139 r1:<invalid> pc:<invalid> r10:<invalid> ip:<invalid>

l000092D9_1:
	pc_115 = ip_83 + __rcr(r0_69, 1, C_117) + C_117
	byte NZCV_116 = cond(pc_115)
	C_117 = NZCV_116 (alias)
	NZV_118 = NZCV_116 (alias)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:<invalid> r2:<invalid> r3:r3 - 3139 r1:<invalid> pc:<invalid> r10:<invalid> ip:<invalid>

l000092DD:
	branch NZV_118 l000092DD_thunk_GPIOPinIntEnable
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:<invalid> r2:<invalid> r3:r3 - 3139 r1:<invalid> pc:<invalid> r10:<invalid> ip:<invalid>

l000092DD_thunk_GPIOPinIntEnable:
	GPIOPinIntEnable(r0_69, r1_77, r2_75, r3_80, r4_70, r5_72, r6_78, r7_76, r8_74, r9_89, r10_82, fp_84, ip_83, lr_90, pc_115)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:<invalid> r2:<invalid> r3:r3 - 3139 r1:<invalid> pc:<invalid> r10:<invalid> ip:<invalid>

l000092DD_1:
	word32 r0_107 = 0x000092E5 + (r7_76 >> 32) + C_117
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:<invalid> r2:<invalid> r3:r3 - 3139 r1:<invalid> pc:<invalid> r10:<invalid> ip:<invalid>

l000092DD_thunk_GPIOPinIntEnable:
	GPIOPinIntEnable(r0_107, r1_77, r2_75, r3_80, r4_70, r5_72, r6_78, r7_76, r8_74, r9_89, r10_82, fp_84, ip_83, lr_90, pc_115)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:<invalid> r2:<invalid> r3:r3 - 3139 r1:<invalid> pc:<invalid> r10:<invalid> ip:<invalid>

GPIOPadConfigGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r5:<invalid> r0:<invalid> r8:<invalid> r7:<invalid> r6:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> pc:<invalid> r10:<invalid> ip:<invalid> fp:<invalid> lr:<invalid> r9:<invalid>

l000092C5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid> pc:pc + 1090

l000092BD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139 r1:<invalid>

l0000929D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r8:r8 + 178 r7:r7 - 31 r6:r6 - 47 r2:<invalid> r3:r3 - 3139

l00009265_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 - 20 r5:r5 + 248 r0:<invalid>



void GPIOPinIntEnable(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
GPIOPinIntEnable_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000092E1:
	branch Z l000092E5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000092E1_1:
	word32 r4_41 = Mem0[r4:word32]
	r3 = Mem0[r4 - -4:word32]
	r5 = Mem0[r4_41 - 4:word32]
	r6 = Mem0[r4_41 - 8:word32]
	r7 = Mem0[r4_41 - 12:word32]
	ip = Mem0[r4_41 - 16:word32]
	r4 = r4_41 + 20
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000092E5:
	branch Z l000092E9
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> ip:<invalid>

l000092E5_1:
	ip = (r3 >> 32) - r8 - C
	NZV = cond(ip) (alias)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> ip:<invalid>

l000092E9:
	branch NZV l000092E9_thunk_GPIOPinIntDisable
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> ip:<invalid>

l000092E9_thunk_GPIOPinIntDisable:
	GPIOPinIntDisable(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> ip:<invalid>

l000092E9_1:
	word32 r7_25 = r7 - (r4 << r0)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> ip:<invalid>

l000092E9_thunk_GPIOPinIntDisable:
	GPIOPinIntDisable(r0, r1, r2, r3, r4, r5, r6, r7_25, r8, r9, r10, fp, ip, lr, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> ip:<invalid>

GPIOPinIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> ip:<invalid> r0:<invalid> r1:<invalid> r8:<invalid> pc:<invalid> fp:<invalid> r2:<invalid> lr:<invalid> r9:<invalid>



void GPIOPinIntDisable(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: r4 sp
GPIOPinIntDisable_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000092ED:
	branch C l000092F1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000092ED_1:
	byte NZCV_49 = cond(r4 ^ 0x000000F8)
	NZV = NZCV_49 (alias)
	V = NZCV_49 (alias)
	Z = NZCV_49 (alias)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000092F1:
	branch NZV l000092F5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000092F1_1:
	r0 = r1 & __ror(r10, 3)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000092F5:
	branch V l000092F9
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l000092F5_1:
	r1 = (word32) Mem0[r4:int16]
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l000092F9:
	branch Z l000092F9_thunk_GPIOPinIntStatus
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r4:r4 r1:<invalid>

l000092F9_thunk_GPIOPinIntStatus:
	GPIOPinIntStatus(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r4:r4 r1:<invalid>

l000092F9_1:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r4:r4 r1:<invalid>

l000092F9_thunk_GPIOPinIntStatus:
	GPIOPinIntStatus(r7 >> 32, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r7 >> 32 r4:r4 r1:<invalid>

GPIOPinIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r4:<invalid> r1:<invalid> r8:<invalid> r7:<invalid> pc:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:<invalid> fp:<invalid> r2:<invalid> lr:<invalid> r9:<invalid>



void GPIOPinIntStatus(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 ip, word32 lr, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
GPIOPinIntStatus_entry:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000092FD:
	branch Z l00009301
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000092FD_1:
	r8 = r8 + 185
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009301:
	branch NZV l00009305
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 + 185

l00009301_1:
	r7 = r7 - r4
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 + 185

l00009305:
	branch V l00009309
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r8:r8 + 185 r7:r7 - r4

l00009309:
	branch NZV l00009309_thunk_GPIOPinIntClear
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): CV
// SymbolicIn: sp:<invalid> r8:r8 + 185 r7:r7 - r4

l00009309_thunk_GPIOPinIntClear:
	GPIOPinIntClear(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 + 185 r7:r7 - r4

l00009309_1:
	word32 r0_19 = 0x00009311 + (r7 >> 32) + C
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): CV
// SymbolicIn: sp:<invalid> r8:r8 + 185 r7:r7 - r4

l00009309_thunk_GPIOPinIntClear:
	GPIOPinIntClear(r0_19, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 + 185 r7:r7 - r4 r0:<invalid>

GPIOPinIntStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> r7:<invalid> r1:<invalid> pc:<invalid> r0:<invalid> r4:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:<invalid> fp:<invalid> r2:<invalid> lr:<invalid> r9:<invalid>

l00009305_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r8:r8 + 185 r7:r7 - r4



void GPIOPinIntClear(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 ip, word32 lr, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  CV fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: r4 sp
GPIOPinIntClear_entry:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000930D:
	branch V l00009311
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000930D_1:
	r1 = (word32) Mem0[r4:int16]
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009311:
	branch C l00009311_thunk_GPIOPortIntRegister
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 r1:<invalid>

l00009311_thunk_GPIOPortIntRegister:
	GPIOPortIntRegister(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r1:<invalid>

l00009311_1:
	word32 v10_11 = Mem0[0x00009360:word32]
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 r1:<invalid>

l00009311_thunk_GPIOPortIntRegister:
	GPIOPortIntRegister(v10_11, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr, pc + 71)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r1:<invalid> pc:pc + 71 r0:<invalid>

GPIOPinIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r1:<invalid> pc:<invalid> r0:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:<invalid> fp:<invalid> r2:<invalid> r7:<invalid> r8:<invalid> lr:<invalid> r9:<invalid>



void GPIOPortIntRegister(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 ip, word32 lr, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
GPIOPortIntRegister_entry:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009315:
	branch ZC l00009319
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009315_1:
	r0 = Mem0[r5:word32]
	r1 = Mem0[r5 + 4:word32]
	r3 = Mem0[r5 + 8:word32]
	r6 = Mem0[r5 + 12:word32]
	ip = Mem0[r5 + 16:word32]
	r5 = r5 + 20
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009319:
	branch Z l0000931D
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20

l00009319_1:
	__syscall(0x00D03C42)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20

l0000931D:
	branch N l00009321
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20

l0000931D_1:
	r1 = r1 + 8
	fp = (word32) Mem0[r1:int8]
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20

l00009321:
	branch NV l00009325
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid>

l00009321_1:
	r2 = r0 & ~0x000000BC
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid>

l00009325:
	branch ZC l00009329
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid>

l00009329:
	branch Z l0000932D
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid>

l00009329_1:
	r1 = r1 & ~(r2 >> 16)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid>

l0000932D:
	branch Z l00009331
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid>

l0000932D_1:
	r2 = r6 - (r4 >> 32)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid>

l00009331:
	branch C l00009335
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid>

l00009331_1:
	r8 = r8 + 128
	lr = (word32) Mem0[r8:int16]
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid>

l00009335:
	branch Z l00009339
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:r8 + 128 lr:<invalid>

l00009335_1:
	fp = (r6 >> 26) - r8 - C
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:r8 + 128 lr:<invalid>

l00009339:
	branch N l0000933D
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:r8 + 128 lr:<invalid>

l00009339_1:
	__syscall(0x00F00040)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:r8 + 128 lr:<invalid>

l0000933D:
	branch ZC l00009341
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:r8 + 128 lr:<invalid>

l0000933D_1:
	Mem177[fp:word32] = r0
	Mem178[fp + 4:word32] = r3
	Mem179[fp + 8:word32] = r4
	Mem180[fp + 12:word32] = r5
	Mem181[fp + 16:word32] = r7
	Mem182[fp + 20:word32] = r8
	Mem183[fp + 24:word32] = r9
	Mem184[fp + 28:word32] = fp
	Mem185[fp + 32:word32] = ip
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:r8 + 128 lr:<invalid>

l00009341:
	branch Z l00009345
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:r8 + 128 lr:<invalid>

l00009341_1:
	r1 = r0 & ~0x04200000
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:r8 + 128 lr:<invalid>

l00009345:
	branch ZC l00009349
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:r8 + 128 lr:<invalid>

l00009349:
	branch Z l0000934D
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:r8 + 128 lr:<invalid>

l00009349_1:
	r1 = r1 + 2114
	r0 = (word32) Mem0[r1:byte]
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:r8 + 128 lr:<invalid>

l0000934D:
	branch Z l00009351
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:r8 + 128 lr:<invalid>

l0000934D_1:
	r2 = r6 - (r4 >> 32)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:r8 + 128 lr:<invalid>

l00009351:
	branch C l00009355
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:r8 + 128 lr:<invalid>

l00009351_1:
	r8 = r8 + 128
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:r8 + 128 lr:<invalid>

l00009355:
	branch Z l00009359
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid>

l00009355_1:
	fp = (r6 >> 26) - r8 - C
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid>

l00009359:
	branch C l0000935D
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid>

l00009359_1:
	__syscall(0x00F00040)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid>

l0000935D:
	__syscall(0x00F04FB9)
	branch Z l00009365
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid>

l00009361_1:
	r2 = r6 - (r4 >> r0)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid>

l00009365:
	branch C l00009369
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid>

l00009365_1:
	r8 = r8 + 224
	ip = (word32) Mem0[r8:int16]
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid>

l00009369:
	branch Z l0000936D
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid>

l00009369_1:
	fp = (r6 >> 26) - r8 - C
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid>

l0000936D:
	branch C l00009371
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid>

l0000936D_1:
	r0 = (word32) Mem0[r0 + 64:byte]
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid>

l00009371:
	branch C l00009375
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid>

l00009371_1:
	Mem159[r4:word16] = (uint16) r1
	r4 = r4 - 57
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid>

l00009375:
	branch NZV l00009379
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57

l00009375_1:
	r0 = (word32) Mem0[r0 + 70:byte]
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57

l00009379:
	branch NZV l0000937D
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57

l0000937D:
	branch Z l00009381
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57

l0000937D_1:
	r1 = r0 - __ror(r8, 1)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57

l00009381:
	branch Z l00009385
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57

l00009381_1:
	r9 = r9 + 192
	r2 = (word32) Mem0[r9:int16]
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57

l00009385:
	branch Z l00009389
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57 r9:r9 + 192

l00009385_1:
	r2 = r6 - (r4 >> 32)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57 r9:r9 + 192

l00009389:
	branch C l0000938D
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57 r9:r9 + 192

l00009389_1:
	r8 = r8 + 192
	fp = (word32) Mem0[r8:int16]
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57 r9:r9 + 192

l0000938D:
	branch Z l00009391
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57 r9:r9 + 192

l0000938D_1:
	fp = (r6 >> 26) - r8 - C
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57 r9:r9 + 192

l00009391:
	branch C l00009395
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57 r9:r9 + 192

l00009391_1:
	r0 = ~0x00000040
	byte NZCV_140 = cond(r0)
	C = NZCV_140 (alias)
	Z = NZCV_140 (alias)
	NZV = NZCV_140 (alias)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57 r9:r9 + 192

l00009395:
	branch C l00009399
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57 r9:r9 + 192

l00009395_1:
	Mem137[r4:word16] = (uint16) r1
	r4 = r4 - 41
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57 r9:r9 + 192

l00009399:
	branch NZV l0000939D
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:<invalid> r9:r9 + 192

l00009399_1:
	r0 = ~0x00000046
	byte NZCV_129 = cond(r0)
	C = NZCV_129 (alias)
	Z = NZCV_129 (alias)
	NZV = NZCV_129 (alias)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:<invalid> r9:r9 + 192

l0000939D:
	branch NZV l000093A1
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:<invalid> r9:r9 + 192

l000093A1:
	branch Z l000093A5
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:<invalid> r9:r9 + 192

l000093A1_1:
	r1 = r0 - __ror(r8, 1)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:<invalid> r9:r9 + 192

l000093A5:
	branch Z l000093A9
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:<invalid> r9:r9 + 192

l000093A5_1:
	r9 = r9 + 160
	r1 = (word32) Mem0[r9:int16]
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:<invalid> r9:r9 + 192

l000093A9:
	branch Z l000093AD
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:<invalid> r9:<invalid>

l000093A9_1:
	r0 = r0 - __rcr(r0, 1, C)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:<invalid> r9:<invalid>

l000093AD:
	branch C l000093AD_thunk_GPIOPortIntUnregister
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:<invalid> r9:<invalid>

l000093AD_thunk_GPIOPortIntUnregister:
	GPIOPortIntUnregister(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:<invalid> r9:<invalid>

l000093AD_1:
	Mem119[r0:byte] = (byte) r0
	word32 r0_120 = r0 - 112
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:<invalid> r9:<invalid>

l000093AD_thunk_GPIOPortIntUnregister:
	GPIOPortIntUnregister(r0_120, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:<invalid> r9:<invalid>

l0000939D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:<invalid> r9:r9 + 192

l00009379_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:<invalid> lr:<invalid> r4:r4 - 57

l00009345_1:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r8:r8 + 128 lr:<invalid>

l00009325_1:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid>

GPIOPortIntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:<invalid> fp:<invalid> r2:<invalid> r4:<invalid> r7:<invalid> r8:<invalid> lr:<invalid> r9:<invalid> pc:<invalid>



void GPIOPortIntUnregister(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 ip, word32 lr, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
GPIOPortIntUnregister_entry:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000093B1:
	branch ZC l000093B5
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000093B1_1:
	r0 = Mem0[r5:word32]
	r1 = Mem0[r5 + 4:word32]
	r3 = Mem0[r5 + 8:word32]
	r6 = Mem0[r5 + 12:word32]
	ip = Mem0[r5 + 16:word32]
	r5 = r5 + 20
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000093B5:
	branch Z l000093B9
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20

l000093B5_1:
	__syscall(0x00D03C42)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20

l000093B9:
	branch N l000093BD
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20

l000093B9_1:
	r1 = r1 + 8
	fp = (word32) Mem0[r1:int8]
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20

l000093BD:
	branch NV l000093C1
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid>

l000093BD_1:
	r2 = r0 & ~0x000000BC
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid>

l000093C1:
	branch ZC l000093C5
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid>

l000093C5:
	branch Z l000093C9
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid>

l000093C5_1:
	r1 = r1 & ~(r2 >> 16)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid>

l000093C9:
	branch Z l000093CD
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid>

l000093C9_1:
	r2 = r6 - (r4 >> 32)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid>

l000093CD:
	branch C l000093D1
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid>

l000093CD_1:
	r9 = r9 + 64
	r3 = (word32) Mem0[r9:int16]
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid>

l000093D1:
	branch Z l000093D5
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:r9 + 64

l000093D1_1:
	fp = (r6 >> 26) - r8 - C
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:r9 + 64

l000093D5:
	branch NV l000093D9
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:r9 + 64

l000093D5_1:
	__syscall(0x00F00040)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:r9 + 64

l000093D9:
	branch ZC l000093DD
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:r9 + 64

l000093D9_1:
	Mem164[fp:word32] = r3
	Mem165[fp + 4:word32] = r4
	Mem166[fp + 8:word32] = r5
	Mem167[fp + 12:word32] = r7
	Mem168[fp + 16:word32] = r8
	Mem169[fp + 20:word32] = r9
	Mem170[fp + 24:word32] = fp
	Mem171[fp + 28:word32] = ip
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:r9 + 64

l000093DD:
	branch Z l000093E1
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:r9 + 64

l000093DD_1:
	r1 = r0 & ~0x04200000
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:r9 + 64

l000093E1:
	branch ZC l000093E5
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:r9 + 64

l000093E5:
	branch Z l000093E9
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:r9 + 64

l000093E5_1:
	r1 = r1 + 2114
	r0 = (word32) Mem0[r1:byte]
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:r9 + 64

l000093E9:
	branch Z l000093ED
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:r9 + 64

l000093E9_1:
	r2 = r6 - (r4 >> 32)
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:r9 + 64

l000093ED:
	branch C l000093F1
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:r9 + 64

l000093ED_1:
	r9 = r9 + 64
	r2 = (word32) Mem0[r9:int16]
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:r9 + 64

l000093F1:
	branch Z l000093F5
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid>

l000093F1_1:
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid>

l000093F5:
	branch ZC l000093F9
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid>

l000093F5_1:
	__syscall(0x00F00040)
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid>

l000093F9:
	__syscall(0x00F04FB8)
	branch Z l00009401
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid>

l000093FD_1:
	r2 = r6 - (r4 >> r0)
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid>

l00009401:
	branch C l00009405
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid>

l00009401_1:
	r9 = r9 + 160
	r1 = (word32) Mem0[r9:int16]
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid>

l00009405:
	branch Z l00009409
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid>

l00009405_1:
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid>

l00009409:
	branch ZC l0000940D
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid>

l00009409_1:
	r0 = (word32) Mem0[r0 + 64:byte]
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid>

l0000940D:
	branch C l00009411
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid>

l0000940D_1:
	Mem146[r4:word16] = (uint16) r1
	r4 = r4 - 56
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid>

l00009411:
	branch Z l00009415
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56

l00009411_1:
	r0 = ~(r6 >> 32)
	byte NZCV_139 = cond(r0)
	N = NZCV_139 (alias)
	C = NZCV_139 (alias)
	ZC = NZCV_139 (alias)
	Z = NZCV_139 (alias)
	NZV = NZCV_139 (alias)
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56

l00009415:
	branch NZV l00009419
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56

l00009419:
	branch Z l0000941D
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56

l00009419_1:
	r1 = r0 - __ror(r8, 1)
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56

l0000941D:
	branch Z l00009421
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56

l0000941D_1:
	r8 = (word32) Mem0[r8:int16]
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56

l00009421:
	branch Z l00009425
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56 r8:<invalid>

l00009421_1:
	r2 = r6 - (r4 >> 32)
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56 r8:<invalid>

l00009425:
	branch C l00009429
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56 r8:<invalid>

l00009425_1:
	r0 = (word32) Mem0[r9:int16]
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56 r8:<invalid>

l00009429:
	branch Z l0000942D
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56 r8:<invalid>

l00009429_1:
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56 r8:<invalid>

l0000942D:
	branch ZC l00009431
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56 r8:<invalid>

l0000942D_1:
	r0 = ~0x00000040
	byte NZCV_123 = cond(r0)
	N = NZCV_123 (alias)
	C = NZCV_123 (alias)
	Z = NZCV_123 (alias)
	NZV = NZCV_123 (alias)
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56 r8:<invalid>

l00009431:
	branch C l00009435
// DataOut: lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56 r8:<invalid>

l00009431_1:
	Mem120[r4:word16] = (uint16) r1
	r4 = r4 - 40
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56 r8:<invalid>

l00009435:
	__syscall(0x00F00046)
	branch NZV l0000943D
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:<invalid> r8:<invalid>

l0000943D:
	branch Z l00009441
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:<invalid> r8:<invalid>

l0000943D_1:
	word32 r1_119 = r0 - __ror(r8, 1)
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:<invalid> r8:<invalid>

l00009441:
	branch Z l00009445
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:<invalid> r8:<invalid>

l00009441_1:
	r8 = r8 + 160
	r7 = (word32) Mem0[r8:int16]
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:<invalid> r8:<invalid>

l00009445:
	branch Z l00009449
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:<invalid> r8:<invalid> r7:<invalid>

l00009445_1:
	r0 = r0 - __rcr(r0, 1, C)
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:<invalid> r8:<invalid> r7:<invalid>

l00009449:
	branch N l00009449_thunk_GPIOPinRead
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:<invalid> r8:<invalid> r7:<invalid>

l00009449_thunk_GPIOPinRead:
	GPIOPinRead(r0, r2, r3, r4, r5, r6, r7, r8, lr, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:<invalid> r8:<invalid> r7:<invalid>

l00009449_1:
	word32 r0_113 = r0 - __ror(r0, r0)
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:<invalid> r8:<invalid> r7:<invalid>

l00009449_thunk_GPIOPinRead:
	GPIOPinRead(r0_113, r2, r3, r4, r5, r6, r7, r8, lr, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:<invalid> r8:<invalid> r7:<invalid>

l00009439_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:<invalid> r8:<invalid>

l00009415_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:<invalid> r4:r4 - 56

l000093E1_1:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid> r9:r9 + 64

l000093C1_1:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:r5 + 20 fp:<invalid> r2:<invalid>

GPIOPortIntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:<invalid> r6:<invalid> ip:<invalid> r5:<invalid> fp:<invalid> r2:<invalid> r4:<invalid> r7:<invalid> r9:<invalid> lr:<invalid> r8:<invalid> pc:<invalid>



void GPIOPinRead(word32 r0, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 lr, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NCV lr pc r0 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV ip lr pc r0 r2 r3 r7 r9
// Preserved: sp
GPIOPinRead_entry:
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NCV
// SymbolicIn: sp:fp

l0000944D:
	branch V l00009451
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NCV
// SymbolicIn: sp:fp

l0000944D_1:
	Mem28[r0:word64] = r3_r2
	r0 = r0 - __ror(r8, 3)
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NCV
// SymbolicIn: sp:fp

l00009451:
	branch N l00009451_thunk_GPIOPinWrite
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): CV
// SymbolicIn: sp:fp r0:<invalid>

l00009451_thunk_GPIOPinWrite:
	GPIOPinWrite(r0, r2, r3, r4, r5, r6, r7, r8, lr, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00009451_1:
	word32 r0_13 = 0x00009459 + (r7 >> 32) + C
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): CV
// SymbolicIn: sp:fp r0:<invalid>

l00009451_thunk_GPIOPinWrite:
	GPIOPinWrite(r0_13, r2, r3, r4, r5, r6, r7, r8, lr, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

GPIOPinRead_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> pc:<invalid> ip:<invalid> lr:<invalid> r9:<invalid>



void GPIOPinWrite(word32 r0, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 lr, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  CV lr pc r0 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV ip lr pc r0 r2 r3 r7 r9
// Preserved: sp
GPIOPinWrite_entry:
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009455:
	branch V l00009459
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009459:
	branch V l00009459_thunk_GPIOPinTypeComparator
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009459_thunk_GPIOPinTypeComparator:
	GPIOPinTypeComparator(r0, r2, r3, r4, r5, r6, r7, r8, lr, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009459_1:
	word32 r0_9 = 0x00009461 + (r7 >> 32) + C
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009459_thunk_GPIOPinTypeComparator:
	GPIOPinTypeComparator(r0_9, r2, r3, r4, r5, r6, r7, r8, lr, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

GPIOPinWrite_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> pc:<invalid> ip:<invalid> lr:<invalid> r9:<invalid>

l00009455_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void GPIOPinTypeComparator(word32 r0, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 lr, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV lr pc r0 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV ip lr pc r0 r2 r3 r7 r9
// Preserved: sp
GPIOPinTypeComparator_entry:
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000945D:
	branch NZV l00009461
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009461:
	branch Z l00009465
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009465:
	branch NZV l00009469
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009465_1:
	r2 = r0 - (r3 >> 20)
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009469:
	branch NZV l0000946D
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:r0 - (r3 >> 20)

l0000946D:
	branch Z l00009471
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:r0 - (r3 >> 20)

l00009471:
	branch NZV l00009475
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:r0 - (r3 >> 20)

l00009471_1:
	r3 = r0 - (r2 >> 10)
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:r0 - (r3 >> 20)

l00009475:
	branch V l00009479
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:r0 - (r3 >> 20) r3:r0 - (r0 - (r3 >> 20) >> 10)

l00009479:
	branch NV l0000947D
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:r0 - (r3 >> 20) r3:r0 - (r0 - (r3 >> 20) >> 10)

l0000947D:
	branch V l0000947D_thunk_GPIOPinTypeI2C
// DataOut: lr pc r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:r0 - (r3 >> 20) r3:r0 - (r0 - (r3 >> 20) >> 10)

l0000947D_thunk_GPIOPinTypeI2C:
	GPIOPinTypeI2C(r0, r2, r3, r4, r5, r6, r7, r8, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 - (r3 >> 20) r3:r0 - (r0 - (r3 >> 20) >> 10)

l0000947D_1:
	word32 v13_53 = (word32) Mem0[0x00009493:uint16]
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:r0 - (r3 >> 20) r3:r0 - (r0 - (r3 >> 20) >> 10)

l0000947D_thunk_GPIOPinTypeI2C:
	GPIOPinTypeI2C(v13_53, r2, r3, r4, r5, r6, r7, r8, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 - (r3 >> 20) r3:r0 - (r0 - (r3 >> 20) >> 10) pc:pc + 14 r0:<invalid>

l00009479_1:
	word32 sp_37
	byte NZV_38
	byte Z_39
	byte NZV_40
	word32 r2_41
	word32 r0_42
	word32 r3_43
	byte V_44
	byte NV_45
	word32 pc_46
	word32 r7_47
	word32 r4_48
	word32 r5_49
	word32 r6_50
	word32 r8_51
	word32 lr_52
	call (word32) Mem0[r7 + 4028:byte] (retsize: 0;)
		uses: lr,NV,NZV,NZV,pc,r0,r2_6,r3_8,r4,r5,r6,r7_28,r8,sp_1,V,Z
		defs: lr_52,NV_45,NZV_38,NZV_40,pc_46,r0_42,r2_41,r3_43,r4_48,r5_49,r6_50,r7_47,r8_51,sp_37,V_44,Z_39
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 - (r3 >> 20) r3:r0 - (r0 - (r3 >> 20) >> 10)

GPIOPinTypeComparator_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:r0 - (r0 - (r3 >> 20) >> 10) r7:r7 + 4028 pc:pc + 14 r0:<invalid> ip:<invalid> lr:<invalid> r9:<invalid>

l00009475_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 - (r3 >> 20) r3:r0 - (r0 - (r3 >> 20) >> 10)

l0000946D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 - (r3 >> 20)

l00009469_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 - (r3 >> 20)

l00009461_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000945D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void GPIOPinTypeI2C(word32 r0, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV lr r0 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV ip lr r2 r9
// Preserved: sp
GPIOPinTypeI2C_entry:
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009481:
	branch NZV l00009485
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009485:
	branch Z l00009489
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009485_1:
	word32 sp_82
	byte NZV_83
	word32 ip_87
	byte NZCV_90
	word32 r9_94
	call fn0090986D (retsize: 0;)
		uses: C,ip,lr,NZCV,NZV,r0,r2,r3,r4,r5,r6,r7,r8,r9,sp_1,V,Z
		defs: C_89,ip_87,lr_95,NZCV_90,NZV_83,r0_92,r2_85,r3_86,r4_91,r5_96,r6_97,r7_98,r8_88,r9_94,sp_82,V_93,Z_84
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009489:
	branch Z l0000948D
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009489_1:
	r2 = ~(r3 >> 4)
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000948D:
	branch Z l00009491
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:~(r3 >> 4)

l0000948D_1:
	byte NZCV_76 = cond(r2 - r8 - C)
	C = (bool) NZCV_76 (alias)
	V = NZCV_76 (alias)
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:~(r3 >> 4)

l00009491:
	branch C l00009495
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:~(r3 >> 4) ip:<invalid>

l00009491_1:
	byte NZCV_70 = cond((r4 >> 32) - r8 - C)
	C = (bool) NZCV_70 (alias)
	V = NZCV_70 (alias)
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:~(r3 >> 4) ip:<invalid>

l00009495:
	branch C l00009499
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r2:~(r3 >> 4) ip:<invalid>

l00009495_1:
	r2 = r2 - 356
	Mem68[r2:word32] = r0
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r2:~(r3 >> 4) ip:<invalid>

l00009499:
	branch C l0000949D
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r2:<invalid> ip:<invalid>

l00009499_1:
	V = cond((r3 >> 32) - r8 - C) (alias)
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r2:<invalid> ip:<invalid>

l0000949D:
	__syscall(0x00BC7054)
	branch V l000094A1_thunk_GPIOPinTypeQEI
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r2:<invalid> ip:<invalid>

l000094A1_thunk_GPIOPinTypeQEI:
	GPIOPinTypeQEI(r0, r2, r3, r4, r5, r6, r7, r8, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> ip:<invalid>

l000094A1_1:
	word32 lr_59 = lr + 39
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r2:<invalid> ip:<invalid>

l000094A1_thunk_GPIOPinTypeQEI:
	GPIOPinTypeQEI(r0, r2, r3, r4, r5, r6, r7, r8, lr_59)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r2:<invalid> ip:<invalid> lr:lr + 39 r9:<invalid>

GPIOPinTypeI2C_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> ip:<invalid> lr:lr + 39 r9:<invalid>

l00009481_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void GPIOPinTypeQEI(word32 r0, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV lr r0 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed: NZCV ip r2
// Preserved: sp
GPIOPinTypeQEI_entry:
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000094A5:
	branch NZV l000094A9
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000094A9:
	branch Z l000094A9_then
	word32 sp_4
	byte NZV_5
	byte Z_6
	word32 r3_8
	word32 ip_9
	word32 r8_10
	byte NZCV_12
	word32 r4_13
	word32 r0_14
	word32 lr_16
	word32 r5_17
	word32 r6_18
	word32 r7_19
	bool C_11
	word32 r2_20
	byte V_15
	call fn00909891 (retsize: 0;)
		uses: NZV,sp_1,Z
		defs: C_11,ip_9,lr_16,NZCV_12,NZV_5,r0_14,r2_7,r3_8,r4_13,r5_17,r6_18,r7_19,r8_10,sp_4,V_15,Z_6
	return
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000094A9_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094AD:
	branch Z_6 l000094B1
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000094AD_1:
	r2_20 = ~(r3_8 >> 4)
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000094B1:
	branch Z_6 l000094B5
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:~(r3 >> 4)

l000094B1_1:
	byte NZCV_61 = cond(r2_20 - r8_10 - C_11)
	C_11 = (bool) NZCV_61 (alias)
	V_15 = NZCV_61 (alias)
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:~(r3 >> 4)

l000094B5:
	branch C_11 l000094B9
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:~(r3 >> 4) ip:<invalid>

l000094B5_1:
	byte NZCV_55 = cond((r4_13 >> 32) - r8_10 - C_11)
	C_11 = (bool) NZCV_55 (alias)
	V_15 = NZCV_55 (alias)
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:~(r3 >> 4) ip:<invalid>

l000094B9:
	branch C_11 l000094BD
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r2:~(r3 >> 4) ip:<invalid>

l000094B9_1:
	r2_20 = r2_20 - 356
	Mem53[r2_20:word32] = r0_14
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r2:~(r3 >> 4) ip:<invalid>

l000094BD:
	branch C_11 l000094C1
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r2:<invalid> ip:<invalid>

l000094BD_1:
	V_15 = cond((r3_8 >> 32) - r8_10 - C_11) (alias)
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r2:<invalid> ip:<invalid>

l000094C1:
	__syscall(0x00BC7054)
	branch V_15 l000094C5_thunk_GPIOPinTypeUART
// DataOut: lr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r2:<invalid> ip:<invalid>

l000094C5_thunk_GPIOPinTypeUART:
	GPIOPinTypeUART(r0_14, r2_20, r3_8, r4_13, r5_17, r6_18, r7_19, r8_10)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> ip:<invalid>
// Terminates process

l000094C5_1:
	word32 v15_43 = (word32) Mem0[lr_16:int16]
// DataOut: r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:<invalid> ip:<invalid>

l000094C5_thunk_GPIOPinTypeUART:
	GPIOPinTypeUART(r0_14, r2_20, r3_8, r4_13, r5_17, r6_18, r7_19, v15_43)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> ip:<invalid> lr:lr + 7 r8:<invalid>
// Terminates process

GPIOPinTypeQEI_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> ip:<invalid>

l000094A5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void GPIOPinTypeUART(word32 r0, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV r0 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
GPIOPinTypeUART_entry:
// DataOut: r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000094C9:
	branch NZV l000094CD
// DataOut: r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000094CD:
	branch Z l000094D1
// DataOut: r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000094CD_1:
	Mem42[r4 + -16:word32] = r3
	Mem43[r4 + -12:word32] = r4
	Mem45[r4 + -8:word32] = r5
	Mem47[r4 + -4:word32] = r6
	Mem49[r4:word32] = r7
	r4 = r4 - 20
// DataOut: r0 r2 r3 r4 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000094D1:
	branch Z l000094D5
// DataOut: r0 r2 r3 r4 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r4:r4 - 20

l000094D1_1:
	r2 = ~(r3 >> 4)
// DataOut: r0 r2 r3 r4 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r4:r4 - 20

l000094D5:
	branch Z l000094D9
// DataOut: r0 r2 r3 r4 r8
// DataOut (flags): C
// SymbolicIn: sp:fp r4:r4 - 20 r2:~(r3 >> 4)

l000094D5_1:
	C = (bool) cond(r2 - r8 - C) (alias)
// DataOut: r0 r2 r3 r4 r8
// DataOut (flags): C
// SymbolicIn: sp:fp r4:r4 - 20 r2:~(r3 >> 4)

l000094D9:
	branch C l000094DD
// DataOut: r0 r2 r3 r4 r8
// DataOut (flags): C
// SymbolicIn: sp:fp r4:r4 - 20 r2:~(r3 >> 4) ip:<invalid>

l000094D9_1:
	C = (bool) cond((r4 >> 32) - r8 - C) (alias)
// DataOut: r0 r2 r3 r8
// DataOut (flags): C
// SymbolicIn: sp:fp r4:r4 - 20 r2:~(r3 >> 4) ip:<invalid>

l000094DD:
	branch C l000094E1
// DataOut: r0 r2 r3 r8
// DataOut (flags): C
// SymbolicIn: sp:<invalid> r4:r4 - 20 r2:~(r3 >> 4) ip:<invalid>

l000094DD_1:
	Mem30[r2 - 356:word32] = r0
// DataOut: r3 r8
// DataOut (flags): C
// SymbolicIn: sp:<invalid> r4:r4 - 20 r2:~(r3 >> 4) ip:<invalid>

l000094E1:
	branch C l000094E5
// DataOut: r3 r8
// DataOut (flags): C
// SymbolicIn: sp:<invalid> r4:r4 - 20 r2:<invalid> ip:<invalid>

l000094E1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r4 - 20 r2:<invalid> ip:<invalid>

l000094E5:
	__syscall(0x00BC7054)
	__syscall(0x00BE6EF7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r4 - 20 r2:<invalid> ip:<invalid>

l000094E9_thunk_GPIOPinTypeTimer:
	GPIOPinTypeTimer()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r4 - 20 r2:<invalid> ip:<invalid>
// Terminates process

GPIOPinTypeUART_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094C9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void GPIOPinTypeTimer()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
GPIOPinTypeTimer_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094ED:
	__syscall(0x00BFECF7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094ED_thunk_GPIOPinTypeSSI:
	GPIOPinTypeSSI()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

GPIOPinTypeTimer_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void GPIOPinTypeSSI()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
GPIOPinTypeSSI_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094F1:
	__syscall(0x00BFEAF7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094F1_thunk_GPIOPinTypePWM:
	GPIOPinTypePWM()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

GPIOPinTypeSSI_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void GPIOPinTypePWM()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
GPIOPinTypePWM_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

GPIOPinTypePWM_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094F5:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void IntDefaultHandler(word32 r0, word32 r7, word32 r8, word32 fp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp r0 r7 r8
// LiveOut:
// Trashed: NZCV lr r0 sp
// Preserved: sp
IntDefaultHandler_entry:
// DataOut: fp r0 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000094F9:
	branch Z l000094F9_thunk_IntMasterEnable
// DataOut: fp r0 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000094F9_thunk_IntMasterEnable:
	IntMasterEnable(r0, r8, fp, wArg00)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094F9_1:
	word32 r0_9 = 0x00009501 + __ror(r7, 1) + C
// DataOut: fp r0 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp

l000094F9_thunk_IntMasterEnable:
	IntMasterEnable(r0_9, r8, fp, wArg00)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

IntDefaultHandler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> lr:<invalid>



void IntMasterEnable(word32 r0, word32 r8, word32 fp, int16 wArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z fp r0 r8
// LiveOut:
// Trashed: lr sp
// Preserved:
// Stack args: Stack +0000(32)
IntMasterEnable_entry:
// DataOut: fp r0 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000094FD:
	branch Z l000094FD_thunk_IntMasterDisable
// DataOut: fp r0 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000094FD_thunk_IntMasterDisable:
	IntMasterDisable(r0, r8, fp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094FD_1:
// DataOut: fp r0 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp

l000094FD_thunk_IntMasterDisable:
	IntMasterDisable(r0, r8, fp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp + 224 lr:<invalid>

IntMasterEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> lr:<invalid>



void IntMasterDisable(word32 r0, word32 r8, word32 fp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z fp r0 r8
// LiveOut:
// Trashed:
// Preserved: sp
IntMasterDisable_entry:
// DataOut: fp r0 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009501:
	branch Z l00009501_then
	word32 sp_3
	byte Z_4
	word32 r0_5
	word32 r8_6
	word32 fp_7
	call fnFEF858C9 (retsize: 0;)
		uses: sp_1,Z
		defs: fp_7,r0_5,r8_6,sp_3,Z_4
	return
// DataOut: fp r0 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009501_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009501_thunk_IntRegister:
	IntRegister(r0_5, r8_6, fp_7)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

IntMasterDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void IntRegister(word32 r0, word32 r8, word32 fp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp r0 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
IntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

IntRegister_entry:
// DataOut: fp r0 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009505:
	branch Z l00009509
// DataOut: fp r0 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009505_1:
	word32 sp_45
	word32 r0_48
	word32 r1_51
	byte NZC_53
	word32 r4_54
	word32 r8_55
	call fnFED15639 (retsize: 0;)
		uses: C,fp,NV,NZC,NZV,r0,r1,r4,r8,sp_1,Z
		defs: C_49,fp_52,NV_47,NZC_53,NZV_50,r0_48,r1_51,r4_54,r8_55,sp_45,Z_46
// DataOut: fp r0 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009509:
	branch NV l0000950D
// DataOut: fp r0 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009509_1:
// DataOut: fp r0 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000950D:
	branch C l00009511
// DataOut: fp r0 r8
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:DPB(r0, 0xCA68, 16)

l0000950D_1:
// DataOut: fp r8
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:DPB(r0, 0xCA68, 16)

l00009511:
	branch NZV l00009515
// DataOut: fp r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid>

l00009515:
	branch Z l00009519
// DataOut: fp r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid>

l00009515_1:
	Z = cond(fp & 0x00005000) (alias)
// DataOut: r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid>

l00009519:
	branch Z l0000951D
// DataOut: r8
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:fp & 0x00005000

l00009519_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:fp & 0x00005000

l0000951D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:fp & 0x00005000 r8:r8 + 872 r4:<invalid>

l00009511_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void IntUnregister(word32 r7)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV r7
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
IntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

IntUnregister_entry:
// DataOut: r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009539:
	branch N l0000953D
// DataOut: r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009539_1:
// DataOut: r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000953D:
	branch V l00009541
// DataOut: r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:DPB(r0, 0xA34B, 16)

l00009541:
	branch Z l00009545
// DataOut: r7
// DataOut (flags): C
// SymbolicIn: sp:fp r0:DPB(r0, 0xA34B, 16)

l00009541_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:DPB(r0, 0xA34B, 16)

l00009545:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l0000953D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:DPB(r0, 0xA34B, 16)



void IntPriorityGroupingSet(word32 r0, word32 r2, word32 r3, word32 r6, word32 r7, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZV r0 r2 r3 r6 r7 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
IntPriorityGroupingSet_entry:
// DataOut: r0 r2 r3 r6 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000954D:
	branch N l00009551
// DataOut: r0 r2 r3 r6 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000954D_1:
	r0 = DPB(r0, 0xA54B, 16)
// DataOut: r0 r2 r3 r6 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009551:
	branch N l00009555
// DataOut: r0 r2 r3 r6 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0xA54B, 16)

l00009551_1:
	byte NZCV_28 = cond(r0 ^ 0x000000F8)
	N = NZCV_28 (alias)
	Z = NZCV_28 (alias)
	NV = NZCV_28 (alias)
// DataOut: r0 r2 r3 r6 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0xA54B, 16)

l00009555:
	branch N l00009559
// DataOut: r0 r2 r3 r6 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0xA54B, 16)

l00009555_1:
	__msr(spsr, 0x00000FF0)
// DataOut: r0 r2 r3 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0xA54B, 16)

l00009559:
	branch Z l0000955D
// DataOut: r0 r2 r3 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0xA54B, 16)

l00009559_1:
	byte NZCV_23 = cond(r3 ^ 0x000000F4)
	N = NZCV_23 (alias)
	Z = NZCV_23 (alias)
	NV = NZCV_23 (alias)
// DataOut: r0 r2 r3 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0xA54B, 16)

l0000955D:
	branch NV l00009561
// DataOut: r0 r2 r3 r6 r7
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:DPB(r0, 0xA54B, 16)

l0000955D_1:
	Mem21[r7:byte] = (byte) r7
// DataOut: r0 r2 r3 r6
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:DPB(r0, 0xA54B, 16)

l00009561:
	branch Z l00009565
// DataOut: r0 r2 r3 r6
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:DPB(r0, 0xA54B, 16) r7:r7 - 96

l00009565:
	branch N l00009565_thunk_IntPriorityGroupingGet
// DataOut: r0 r2 r3 r6
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:DPB(r0, 0xA54B, 16) r7:r7 - 96

l00009565_thunk_IntPriorityGroupingGet:
	IntPriorityGroupingGet(r0, r2, r3, r6)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:DPB(r0, 0xA54B, 16) r7:r7 - 96
// Terminates process

l00009565_1:
	__syscall(0x00E000ED)
// DataOut: r0 r2 r3 r6
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:DPB(r0, 0xA54B, 16) r7:r7 - 96

l00009565_thunk_IntPriorityGroupingGet:
	IntPriorityGroupingGet(r0, r2, r3, r6)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:DPB(r0, 0xA54B, 16) r7:r7 - 96
// Terminates process

IntPriorityGroupingSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009561_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:DPB(r0, 0xA54B, 16) r7:r7 - 96



void IntPriorityGroupingGet(word32 r0, word32 r2, word32 r3, word32 r6)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC r0 r2 r3 r6
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
IntPriorityGroupingGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

IntPriorityGroupingGet_entry:
// DataOut: r0 r2 r3 r6
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l00009569:
	branch Z l0000956D
// DataOut: r0 r2 r3 r6
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000956D:
	branch Z l00009571
// DataOut: r0 r2 r3 r6
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000956D_1:
	Mem33[r0 + -12:word32] = r0
	Mem34[r0 + -8:word32] = r3
	Mem35[r0 + -4:word32] = r6
// DataOut: r0 r2
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l00009571:
	branch Z l00009575
// DataOut: r0 r2
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:r0 - 12

l00009575:
	branch N l00009579
// DataOut: r0 r2
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:r0 - 12

l00009575_1:
// DataOut: r0 r2
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:r0 - 12

l00009579:
	branch ZC l0000957D
// DataOut: r0 r2
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid>

l00009579_1:
	word32 sp_23
	word32 r0_25
	word32 r3_26
	word32 r6_27
	byte N_28
	bool C_29
	byte ZC_30
	word32 r2_31
	call fn00ECA961 (retsize: 0;)
		uses: C,N,r0_6,r2,r3,r6,sp_1,Z,ZC
		defs: C_29,N_28,r0_25,r2_31,r3_26,r6_27,sp_23,Z_24,ZC_30
// DataOut: r0 r2
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid>

l0000957D:
	branch Z l00009581
// DataOut: r0 r2
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l0000957D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00009581:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00009571_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 - 12

l00009569_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void IntPrioritySet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 fp, word32 ip, word32 pc, word32 cpsr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: NZCV fp ip pc r0 r1 r2 r3 r5 r6 r7 r8
// Preserved: sp
IntPrioritySet_entry:
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009591:
	branch Z l00009595
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009591_1:
	r0 = fp - (r2 >> 18)
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009595:
	branch Z l00009599
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:fp - (r2 >> 18)

l00009595_1:
	r2 = ~0x000000B4
	byte NZCV_58 = cond(r2)
	Z = NZCV_58 (alias)
	NZV = NZCV_58 (alias)
	C = NZCV_58 (alias)
	NV = NZCV_58 (alias)
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:fp - (r2 >> 18)

l00009599:
	branch Z l0000959D
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:fp - (r2 >> 18) r2:~0x000000B4

l0000959D:
	branch Z l000095A1
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:fp - (r2 >> 18) r2:~0x000000B4

l0000959D_1:
	r0 = ~0x0000006A
	byte NZCV_52 = cond(r0)
	Z = NZCV_52 (alias)
	NZV = NZCV_52 (alias)
	C = NZCV_52 (alias)
	NV = NZCV_52 (alias)
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:fp - (r2 >> 18) r2:~0x000000B4

l000095A1:
	branch NZV l000095A5
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:~0x000000B4

l000095A1_1:
	r2 = (r0 << 6) - r8
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:~0x000000B4

l000095A5:
	branch C l000095A9
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid>

l000095A5_1:
	r8 = DPB(r8, 0x0200, 16)
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid>

l000095A9:
	branch Z l000095AD
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r8:DPB(r8, 0x0200, 16)

l000095A9_1:
	r3 = (int16) (r10 >> 16) *s (int16) (r2 >> 16) + r0
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r8:DPB(r8, 0x0200, 16)

l000095AD:
	branch Z l000095B1
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r8:DPB(r8, 0x0200, 16) r3:<invalid>

l000095B1:
	branch Z l000095B5
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r8:DPB(r8, 0x0200, 16) r3:<invalid>

l000095B1_1:
	r2 = (r3 >> 32) - r0
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r8:DPB(r8, 0x0200, 16) r3:<invalid>

l000095B5:
	branch NV l000095B9
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r8:DPB(r8, 0x0200, 16) r3:<invalid>

l000095B5_1:
	Mem44[r7:byte] = (byte) r7
	r7 = r7 - 188
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r8:DPB(r8, 0x0200, 16) r3:<invalid>

l000095B9:
	branch Z l000095B9_thunk_IntPriorityGet
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r8:DPB(r8, 0x0200, 16) r3:<invalid> r7:r7 - 188

l000095B9_thunk_IntPriorityGet:
	IntPriorityGet(r0, r1, r2, r3, r5, r6, r7, r8, r10, fp, ip, pc, cpsr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r8:DPB(r8, 0x0200, 16) r3:<invalid> r7:r7 - 188

l000095B9_1:
	Mem33[r0:word32] = r0
	word32 r0_34 = r0 - (r2 >> 1)
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r8:DPB(r8, 0x0200, 16) r3:<invalid> r7:r7 - 188

l000095B9_thunk_IntPriorityGet:
	IntPriorityGet(r0_34, r1, r2, r3, r5, r6, r7, r8, r10, fp, ip, pc, cpsr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r8:DPB(r8, 0x0200, 16) r3:<invalid> r7:r7 - 188

IntPrioritySet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r8:DPB(r8, 0x0200, 16) r3:<invalid> r7:<invalid> r1:<invalid> ip:<invalid> pc:<invalid> r6:<invalid> fp:<invalid> r5:<invalid>

l000095AD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r8:DPB(r8, 0x0200, 16) r3:<invalid>

l00009599_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:fp - (r2 >> 18) r2:~0x000000B4



void IntPriorityGet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 fp, word32 ip, word32 pc, word32 cpsr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: NZCV fp ip pc r0 r1 r2 r3 r5 r6 r7
// Preserved: sp
IntPriorityGet_entry:
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000095BD:
	branch Z l000095C1
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000095BD_1:
	r2 = ~0x0000004B
	byte NZCV_116 = cond(r2)
	Z = NZCV_116 (alias)
	NZV = NZCV_116 (alias)
	V = NZCV_116 (alias)
	C = (bool) NZCV_116 (alias)
	NV = NZCV_116 (alias)
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000095C1:
	branch Z l000095C5
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:~0x0000004B

l000095C1_1:
	word32 sp_94
	byte NZCV_97
	call fn0110E1D1 (retsize: 0;)
		uses: C_13,cpsr,fp,ip,NV_14,NZCV_9,NZV_11,pc,r0,r1,r10,r2_15,r3,r5,r6,r7,r8,sp_1,spsr,V_12,Z_10
		defs: C_103,cpsr_113,fp_112,ip_105,NV_106,NZCV_97,NZV_99,pc_107,r0_98,r1_100,r10_102,r2_96,r3_108,r5_109,r6_110,r7_111,r8_101,sp_94,spsr_114,V_104,Z_95
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:~0x0000004B

l000095C5:
	branch Z l000095C9
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:~0x0000004B

l000095C5_1:
	r0 = ~0x0000006A
	byte NZCV_88 = cond(r0)
	Z = NZCV_88 (alias)
	NZV = NZCV_88 (alias)
	V = NZCV_88 (alias)
	C = (bool) NZCV_88 (alias)
	NV = NZCV_88 (alias)
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:~0x0000004B

l000095C9:
	branch NZV l000095CD
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:~0x0000004B r0:~0x0000006A

l000095C9_1:
	r1 = (r0 << 22) - r8
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:~0x0000004B r0:~0x0000006A

l000095CD:
	branch Z l000095D1
// DataOut: cpsr fp ip pc r0 r1 r10 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:~0x0000004B r0:~0x0000006A r1:(~0x0000006A << 22) - r8

l000095CD_1:
	r2 = (r0 << 6) - r10 - C
	byte NZCV_80 = cond(r2)
	Z = NZCV_80 (alias)
	V = NZCV_80 (alias)
	NV = NZCV_80 (alias)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:~0x0000004B r0:~0x0000006A r1:(~0x0000006A << 22) - r8

l000095D1:
	branch V l000095D5
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:<invalid> r0:~0x0000006A r1:(~0x0000006A << 22) - r8

l000095D1_1:
	ip = (word32) Mem0[r2:int16]
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:<invalid> r0:~0x0000006A r1:(~0x0000006A << 22) - r8

l000095D5:
	branch NV l000095D9
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r2:<invalid> r0:~0x0000006A r1:(~0x0000006A << 22) - r8 ip:<invalid>

l000095D5_1:
	pc = pc + 71
	r0 = Mem0[0x00009624:word32]
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r2:<invalid> r0:~0x0000006A r1:(~0x0000006A << 22) - r8 ip:<invalid>

l000095D9:
	branch Z l000095D9_thunk_IntEnable
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r1:(~0x0000006A << 22) - r8 ip:<invalid> pc:pc + 71

l000095D9_thunk_IntEnable:
	IntEnable(r0, r1, r2, r3, r5, r6, r7, r8, fp, ip, pc, cpsr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r1:(~0x0000006A << 22) - r8 ip:<invalid> pc:pc + 71

l000095D9_1:
	Mem70[r0:word32] = r0
	word32 r0_71 = r0 - 162
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r1:(~0x0000006A << 22) - r8 ip:<invalid> pc:pc + 71

l000095D9_thunk_IntEnable:
	IntEnable(r0_71, r1, r2, r3, r5, r6, r7, r8, fp, ip, pc, cpsr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r1:(~0x0000006A << 22) - r8 ip:<invalid> pc:pc + 71

IntPriorityGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r1:<invalid> ip:<invalid> pc:<invalid> r7:<invalid> r6:<invalid> r3:<invalid> fp:<invalid> r5:<invalid>



void IntEnable(word32 r0, word32 r1, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 fp, word32 ip, word32 pc, word32 cpsr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: NZCV fp ip pc r0 r1 r2 r3 r5 r6 r7
// Preserved: sp
IntEnable_entry:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l000095DD:
	branch Z l000095E1
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l000095DD_1:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l000095E1:
	branch Z l000095E5
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid>

l000095E1_1:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid>

l000095E5:
	branch Z l000095E9
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:r0

l000095E5_1:
	__syscall(0x00D01B28)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:r0

l000095E9:
	branch Z l000095ED
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:r0

l000095E9_1:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:r0

l000095ED:
	branch Z l000095F1
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l000095F1:
	branch Z l000095F5
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l000095F1_1:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l000095F5:
	branch Z l000095F9
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l000095F5_1:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l000095F9:
	branch Z l000095FD
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l000095FD:
	branch N l00009601
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l000095FD_1:
	__msr(spsr, 0x0000034A)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009601:
	branch Z l00009605
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009601_1:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009605:
	branch Z l00009605_then
	word32 sp_12
	word32 r1_14
	word32 spsr_17
	word32 r3_18
	byte NZCV_19
	word32 cpsr_22
	word32 r2_23
	word32 r5_24
	word32 r6_25
	word32 r8_26
	word32 fp_27
	word32 ip_28
	word32 pc_29
	byte N_16
	byte Z_13
	bool C_21
	word32 r7_20
	word32 r0_15
	call fn011E578D (retsize: 0;)
		uses: N,r0_10,r1_6,sp_1,Z
		defs: C_21,cpsr_22,fp_27,ip_28,N_16,NZCV_19,pc_29,r0_15,r1_14,r2_23,r3_18,r5_24,r6_25,r7_20,r8_26,sp_12,spsr_17,Z_13
	return
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009605_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009609:
	branch N_16 l0000960D
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009609_1:
	__msr(spsr_17, 0x0000034A)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l0000960D:
	branch Z_13 l00009611
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l0000960D_1:
	byte NZCV_56 = cond(r3_18 ^ 0x000000F4)
	N_16 = NZCV_56 (alias)
	Z_13 = NZCV_56 (alias)
	C_21 = (bool) NZCV_56 (alias)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009611:
	branch Z_13 l00009615
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009611_1:
	Mem55[r7_20 - __rcr(r0_15, 1, C_21):byte] = (byte) r7_20
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009615:
	branch N_16 l00009619
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009615_1:
	__msr(spsr_17, 0x0000034A)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009619:
	branch Z_13 l0000961D
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009619_1:
	byte NZCV_51 = cond(r3_18 ^ 0x000000F4)
	N_16 = NZCV_51 (alias)
	Z_13 = NZCV_51 (alias)
	C_21 = (bool) NZCV_51 (alias)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l0000961D:
	branch Z_13 l00009621
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l0000961D_1:
	Mem49[r7_20:byte] = (byte) r7_20
	r7_20 = r7_20 - 96
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009621:
	branch N_16 l00009625
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:r7 - 96

l00009621_1:
	__msr(spsr_17, 0x0000034A)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:r7 - 96

l00009625:
	branch Z_13 l00009629
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:r7 - 96

l00009625_1:
	__msr(cpsr_22, 0x000000F4)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:r7 - 96

l00009629:
	branch Z_13 l0000962D
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:r7 - 96

l00009629_1:
	r7_20 = r7_20 - __rcr(r0_15, 1, C_21)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:r7 - 96

l0000962D:
	branch Z_13 l00009631
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid>

l0000962D_1:
	r0_15 = __ror(r1_14, 1) - r0_15 - C_21
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid>

l00009631:
	branch C_21 l00009635
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid>

l00009631_1:
	Mem45[r0_15:byte] = (byte) r0_15
	r0_15 = r0_15 + 224
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid>

l00009635:
	branch Z_13 l00009635_thunk_IntDisable
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid>

l00009635_thunk_IntDisable:
	IntDisable(r0_15, r1_14, r2_23, r3_18, r5_24, r6_25, r7_20, r8_26, fp_27, ip_28, pc_29, cpsr_22, spsr_17)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid>

l00009635_1:
	Mem43[r0_15:byte] = (byte) r0_15
	word32 r0_44 = r0_15 + 237
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid>

l00009635_thunk_IntDisable:
	IntDisable(r0_44, r1_14, r2_23, r3_18, r5_24, r6_25, r7_20, r8_26, fp_27, ip_28, pc_29, cpsr_22, spsr_17)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid>

IntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid> pc:<invalid> r2:<invalid> r6:<invalid> r3:<invalid> ip:<invalid> fp:<invalid> r5:<invalid>

l000095F9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l000095ED_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>



void IntDisable(word32 r0, word32 r1, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 fp, word32 ip, word32 pc, word32 cpsr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: NZCV fp ip pc r0 r1 r2 r3 r5 r6 r7
// Preserved: sp
IntDisable_entry:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009639:
	branch Z l0000963D
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009639_1:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000963D:
	branch Z l00009641
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid>

l0000963D_1:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid>

l00009641:
	branch Z l00009645
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:r0

l00009641_1:
	__syscall(0x00D01B28)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:r0

l00009645:
	branch Z l00009649
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:r0

l00009645_1:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:r0

l00009649:
	branch Z l0000964D
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l0000964D:
	branch Z l00009651
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l0000964D_1:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009651:
	branch Z l00009655
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009651_1:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009655:
	branch Z l00009659
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009659:
	branch C l0000965D
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009659_1:
	__msr(spsr, 0x0000034A)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l0000965D:
	branch Z l00009661
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l0000965D_1:
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009661:
	branch Z l00009661_then
	word32 sp_12
	word32 r1_14
	word32 spsr_17
	word32 r3_18
	byte NZCV_19
	word32 cpsr_21
	word32 r2_23
	word32 r5_24
	word32 r6_25
	word32 r8_26
	word32 fp_27
	word32 ip_28
	word32 pc_29
	byte C_16
	byte Z_13
	byte ZC_22
	word32 r7_20
	word32 r0_15
	call fn011E57E9 (retsize: 0;)
		uses: C,r0_10,r1_6,sp_1,Z
		defs: C_16,cpsr_21,fp_27,ip_28,NZCV_19,pc_29,r0_15,r1_14,r2_23,r3_18,r5_24,r6_25,r7_20,r8_26,sp_12,spsr_17,Z_13,ZC_22
	return
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009661_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009665:
	branch C_16 l00009669
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009665_1:
	__msr(spsr_17, 0x0000034A)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009669:
	branch Z_13 l0000966D
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009669_1:
	byte NZCV_55 = cond(r3_18 ^ 0x000000F4)
	C_16 = NZCV_55 (alias)
	Z_13 = NZCV_55 (alias)
	ZC_22 = NZCV_55 (alias)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l0000966D:
	branch Z_13 l00009671
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l0000966D_1:
	Mem54[r7_20 - __rcr(r0_15, 1, C_16):byte] = (byte) r7_20
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009671:
	branch C_16 l00009675
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009671_1:
	__msr(spsr_17, 0x0000034A)
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009675:
	branch Z_13 l00009679
// DataOut: cpsr fp ip pc r0 r1 r2 r3 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009675_1:
	byte NZCV_50 = cond(r3_18 ^ 0x000000F4)
	C_16 = NZCV_50 (alias)
	Z_13 = NZCV_50 (alias)
	ZC_22 = NZCV_50 (alias)
// DataOut: cpsr fp ip pc r0 r1 r2 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009679:
	branch Z_13 l0000967D
// DataOut: cpsr fp ip pc r0 r1 r2 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009679_1:
	Mem48[r7_20:byte] = (byte) r7_20
	r7_20 = r7_20 - 96
// DataOut: cpsr fp ip pc r0 r1 r2 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l0000967D:
	branch C_16 l00009681
// DataOut: cpsr fp ip pc r0 r1 r2 r5 r6 r7 r8 sp spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:r7 - 96

l0000967D_1:
	__msr(spsr_17, 0x0000034A)
// DataOut: cpsr fp ip pc r0 r1 r2 r5 r6 r7 r8 sp
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:r7 - 96

l00009681:
	branch Z_13 l00009685
// DataOut: cpsr fp ip pc r0 r1 r2 r5 r6 r7 r8 sp
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:r7 - 96

l00009681_1:
	__msr(cpsr_21, 0x000000F4)
// DataOut: fp ip pc r0 r1 r2 r5 r6 r7 r8 sp
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:r7 - 96

l00009685:
	branch ZC_22 l00009689
// DataOut: fp ip pc r0 r1 r2 r5 r6 r7 r8 sp
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:r7 - 96

l00009685_1:
	word32 r7_47 = r7_20 - __rcr(r0_15, 1, C_16)
// DataOut: fp ip pc r0 r1 r2 r5 r6 r8 sp
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:r7 - 96

l00009689:
	branch Z_13 l0000968D
// DataOut: fp ip pc r0 r1 r2 r5 r6 r8 sp
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid>

l00009689_1:
	r0_15 = __ror(r1_14, 1) - r0_15 - C_16
// DataOut: fp ip pc r0 r1 r2 r5 r6 r8 sp
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid>

l0000968D:
	branch C_16 l00009691
// DataOut: fp ip pc r0 r1 r2 r5 r6 r8 sp
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid>

l0000968D_1:
	Mem44[r0_15:byte] = (byte) r0_15
	r0_15 = r0_15 + 224
// DataOut: fp ip pc r0 r1 r2 r5 r6 r8 sp
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid>

l00009691:
	branch Z_13 l00009691_thunk_OSRAMDelay
// DataOut: fp ip pc r0 r1 r2 r5 r6 r8 sp
// DataOut (flags): CV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid>

l00009691_thunk_OSRAMDelay:
	OSRAMDelay(r0_15, r1_14, r2_23, r5_24, r6_25, r8_26, fp_27, ip_28, pc_29)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid>

l00009691_1:
	word32 r0_43 = ~__ror(sp_12, 1)
// DataOut: fp ip pc r0 r1 r2 r5 r6 r8
// DataOut (flags): CV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid>

l00009691_thunk_OSRAMDelay:
	OSRAMDelay(r0_43, r1_14, r2_23, r5_24, r6_25, r8_26, fp_27, ip_28, pc_29)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:~<invalid> r7:<invalid>

IntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid> pc:<invalid> r2:<invalid> r6:<invalid> r3:<invalid> ip:<invalid> fp:<invalid> r5:<invalid>

l00009655_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l00009649_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>



void OSRAMDelay(word32 r0, word32 r1, word32 r2, word32 r5, word32 r6, word32 r8, word32 fp, word32 ip, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  CV fp ip pc r0 r1 r2 r5 r6 r8
// LiveOut:
// Trashed: NZCV fp ip pc r0 r1 r2 r3 r5 r6
// Preserved: sp
OSRAMDelay_entry:
// DataOut: fp ip pc r0 r1 r2 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009695:
	branch V l00009699
// DataOut: fp ip pc r0 r1 r2 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009695_1:
	pc = r1 - (r8 >> fp) - C
	C = (bool) cond(pc) (alias)
// DataOut: fp ip pc r0 r1 r2 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009699:
	branch C l00009699_thunk_OSRAMWriteFirst
// DataOut: fp ip pc r0 r1 r2 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp pc:<invalid>

l00009699_thunk_OSRAMWriteFirst:
	OSRAMWriteFirst(r0, r1, r2, r5, r6, r8, fp, ip, wArg00)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid>

l00009699_1:
	word32 r0_16 = Mem0[pc:word32]
	word32 r1_17 = Mem0[pc + 4:word32]
	word32 r2_18 = Mem0[pc + 8:word32]
	word32 r6_19 = Mem0[pc + 12:word32]
// DataOut: fp ip r0 r1 r2 r5 r6 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp pc:<invalid>

l00009699_thunk_OSRAMWriteFirst:
	OSRAMWriteFirst(r0_16, r1_17, r2_18, r5, r6_19, r8, fp, ip, wArg00)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r6:<invalid>

OSRAMDelay_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r6:<invalid> r3:<invalid> ip:<invalid> fp:<invalid> r5:<invalid>



void OSRAMWriteFirst(word32 r0, word32 r1, word32 r2, word32 r5, word32 r6, word32 r8, word32 fp, word32 ip, int16 wArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp ip r0 r1 r2 r5 r6 r8
// LiveOut:
// Trashed: fp ip r0 r2 r3 r5
// Preserved: sp
// Stack args: Stack +0000(32)
OSRAMWriteFirst_entry:
// DataOut: fp ip r0 r1 r2 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l0000969D:
	word32 sp_1 = fp
	branch Z l000096A1
// DataOut: fp ip r0 r1 r2 r5 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000096A1:
	branch C l000096A5
// DataOut: fp ip r0 r1 r2 r5 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000096A1_1:
	r0 = r2 ^ ip >> 32
// DataOut: fp ip r0 r1 r5 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000096A5:
	branch Z l000096A9
// DataOut: fp ip r0 r1 r5 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r2 ^ ip >> 32
// LocalsOut: fp(32) Stack +0000(32)

l000096A5_1:
// DataOut: fp ip r0 r1 r5 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r2 ^ ip >> 32
// LocalsOut: fp(32) Stack +0000(32)

l000096A9:
	branch C l000096AD
// DataOut: fp ip r0 r1 r5 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r2 ^ ip >> 32 r3:r1 ^ r6 >> 26
// LocalsOut: fp(32) Stack +0000(32)

l000096AD:
	branch Z l000096B1
// DataOut: fp ip r0 r1 r5 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r2 ^ ip >> 32 r3:r1 ^ r6 >> 26
// LocalsOut: fp(32) Stack +0000(32)

l000096AD_1:
// DataOut: fp ip r0 r1 r5 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r2 ^ ip >> 32 r3:r1 ^ r6 >> 26
// LocalsOut: fp(32) Stack +0000(32)

l000096B1:
	branch C l000096B5
// DataOut: fp ip r0 r1 r5 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r2 ^ ip >> 32 r3:r1 ^ r6 >> 26 r2:r6 - (r6 >> 32)
// LocalsOut: fp(32) Stack +0000(32)

l000096B1_1:
	sp_1 = fp + 64
	ip = (word32) wArg00
// DataOut: fp ip r0 r1 r5 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r2 ^ ip >> 32 r3:r1 ^ r6 >> 26 r2:r6 - (r6 >> 32)

l000096B5:
	branch C l000096B9
// DataOut: fp ip r0 r1 r5 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r2 ^ ip >> 32 r3:r1 ^ r6 >> 26 r2:r6 - (r6 >> 32) ip:<invalid>

l000096B9:
	branch Z l000096BD
// DataOut: fp ip r0 r1 r5 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r2 ^ ip >> 32 r3:r1 ^ r6 >> 26 r2:r6 - (r6 >> 32) ip:<invalid>

l000096B9_1:
	r0 = r1 ^ r0 >> 6
// DataOut: fp ip r0 r1 r5 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r2 ^ ip >> 32 r3:r1 ^ r6 >> 26 r2:r6 - (r6 >> 32) ip:<invalid>

l000096BD:
	branch Z l000096C1
// DataOut: fp ip r0 r1 r5 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r3:r1 ^ r6 >> 26 r2:r6 - (r6 >> 32) ip:<invalid>

l000096BD_1:
	fp = (word32) Mem0[sp_1:int16]
// DataOut: fp ip r0 r1 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r3:r1 ^ r6 >> 26 r2:r6 - (r6 >> 32) ip:<invalid>

l000096C1:
	branch NZV l000096C1_thunk_OSRAMWriteArray
// DataOut: fp ip r0 r1 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r3:r1 ^ r6 >> 26 r2:r6 - (r6 >> 32) ip:<invalid> fp:<invalid>

l000096C1_thunk_OSRAMWriteArray:
	OSRAMWriteArray(r0, r1, r5, r6, r8, fp, ip, wArg00)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r3:r1 ^ r6 >> 26 r2:r6 - (r6 >> 32) ip:<invalid> fp:<invalid>

OSRAMWriteFirst_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r3:r1 ^ r6 >> 26 r2:r6 - (r6 >> 32) ip:<invalid> fp:<invalid> r5:<invalid>

l000096C1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r3:r1 ^ r6 >> 26 r2:r6 - (r6 >> 32) ip:<invalid> fp:<invalid>

l000096B5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:r2 ^ ip >> 32 r3:r1 ^ r6 >> 26 r2:r6 - (r6 >> 32) ip:<invalid>

l000096A9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r2 ^ ip >> 32 r3:r1 ^ r6 >> 26

l0000969D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void OSRAMWriteArray(word32 r0, word32 r1, word32 r5, word32 r6, word32 r8, word32 fp, word32 ip, int16 wArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip r0 r1 r5 r6 r8
// LiveOut:
// Trashed: r5
// Preserved: sp
// Stack args: Stack +0000(32)
OSRAMWriteArray_entry:
// DataOut: fp ip r0 r1 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000096C5:
	branch Z l000096C9
// DataOut: fp ip r0 r1 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000096C9:
	branch Z l000096CD
// DataOut: fp ip r0 r1 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000096CD:
	branch Z l000096D1
// DataOut: fp ip r0 r1 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000096CD_1:
	byte NZC_55 = cond(r8 & ip >> 12)
	Z = NZC_55 (alias)
	NZV = NZC_55 (alias)
	C = NZC_55 (alias)
	NV = NZC_55 (alias)
// DataOut: fp r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000096D1:
	branch Z l000096D5
// DataOut: fp r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r8 & ip >> 12
// LocalsOut: fp(32) Stack +0000(32)

l000096D1_1:
// DataOut: fp r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r8 & ip >> 12
// LocalsOut: fp(32) Stack +0000(32)

l000096D5:
	branch Z l000096D9
// DataOut: fp r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r8 & ip >> 12 r2:r6 - (r1 >> 32)
// LocalsOut: fp(32) Stack +0000(32)

l000096D5_1:
// DataOut: fp r0 r1 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r8 & ip >> 12 r2:r6 - (r1 >> 32)

l000096D9:
	branch C l000096DD
// DataOut: fp r0 r1 r6
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> r4:r8 & ip >> 12 r2:r6 - (r1 >> 32) r7:<invalid>

l000096DD:
	branch NZV l000096E1
// DataOut: fp r0 r1 r6
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> r4:r8 & ip >> 12 r2:r6 - (r1 >> 32) r7:<invalid>

l000096E1:
	branch Z l000096E5
// DataOut: fp r0 r1 r6
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> r4:r8 & ip >> 12 r2:r6 - (r1 >> 32) r7:<invalid>

l000096E5:
	branch Z l000096E9
// DataOut: fp r0 r1 r6
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> r4:r8 & ip >> 12 r2:r6 - (r1 >> 32) r7:<invalid>

l000096E5_1:
// DataOut: r1 r6
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> r4:r8 & ip >> 12 r2:r6 - (r1 >> 32) r7:<invalid>

l000096E9:
	branch Z l000096ED
// DataOut: r1 r6
// DataOut (flags): NZV
// SymbolicIn: sp:<invalid> r4:r8 & ip >> 12 r2:<invalid> r7:<invalid>

l000096ED:
	branch Z l000096F1
// DataOut: r1 r6
// DataOut (flags): NV
// SymbolicIn: sp:<invalid> r4:r8 & ip >> 12 r2:<invalid> r7:<invalid>

l000096ED_1:
// DataOut:
// DataOut (flags): NV
// SymbolicIn: sp:<invalid> r4:r8 & ip >> 12 r2:<invalid> r7:<invalid>

l000096F1:
	branch NV l000096F5
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r8 & ip >> 12 r2:<invalid> r7:<invalid>

l000096F5:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r8 & ip >> 12 r2:<invalid> r7:<invalid>

l000096F1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r8 & ip >> 12 r2:<invalid> r7:<invalid>

l000096E9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r8 & ip >> 12 r2:<invalid> r7:<invalid>

l000096E1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r8 & ip >> 12 r2:r6 - (r1 >> 32) r7:<invalid>

l000096DD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r8 & ip >> 12 r2:r6 - (r1 >> 32) r7:<invalid>

l000096D9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r4:r8 & ip >> 12 r2:r6 - (r1 >> 32) r7:<invalid>

l000096C9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000096C5_1:
	word32 sp_6
	byte Z_7
	word32 pc_8
	word32 r5_9
	word32 r4_10
	word32 r8_11
	word32 ip_12
	byte NZC_13
	word32 r2_14
	word32 r6_15
	word32 r1_16
	word32 r7_17
	byte C_18
	byte NZV_19
	word32 fp_20
	word32 r0_21
	byte NV_22
	call Mem0[r5 + 2225:word32] (retsize: 0;)
		uses: r5_4,sp_1,Z
		defs: C_18,fp_20,ip_12,NV_22,NZC_13,NZV_19,pc_8,r0_21,r1_16,r2_14,r4_10,r5_9,r6_15,r7_17,r8_11,sp_6,Z_7
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

OSRAMWriteArray_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 + 2225



void OSRAMWriteByte(word32 r0, word32 r1, word32 r6, word32 r8, word32 ip, int16 wArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV ip r0 r1 r6 r8
// LiveOut:
// Trashed: r0 r5
// Preserved: sp
// Stack args: Stack +0000(32)
OSRAMWriteByte_entry:
// DataOut: ip r0 r1 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00009705:
	branch Z l00009709
// DataOut: ip r0 r1 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00009709:
	branch Z l0000970D
// DataOut: ip r0 r1 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00009709_1:
	r0 = r8 - (r1 >> 18)
	r1_r0 = SEQ(r1, r0) (alias)
// DataOut: ip r0 r1 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l0000970D:
	branch Z l00009711
// DataOut: ip r0 r1 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r8 - (r1 >> 18)
// LocalsOut: fp(32) Stack +0000(32)

l0000970D_1:
// DataOut: ip r0 r1 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r8 - (r1 >> 18)

l00009711:
	branch Z l00009715
// DataOut: ip r0 r1 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r8 - (r1 >> 18) r5:<invalid>

l00009715:
	__syscall(0x0068184B)
	branch C l0000971D
// DataOut: ip r0 r1 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r8 - (r1 >> 18) r5:<invalid>

l0000971D:
	branch Z l00009721
// DataOut: ip r0 r1 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r8 - (r1 >> 18) r5:<invalid>

l0000971D_1:
	r0 = r8 - (r6 >> 8)
	r1_r0 = SEQ(r1, r0) (alias)
// DataOut: ip r0 r1 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:r8 - (r1 >> 18) r5:<invalid>

l00009721:
	branch NZV l00009725
// DataOut: ip r0 r1 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r5:<invalid>

l00009725:
	branch Z l00009729
// DataOut: ip r0 r1 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r5:<invalid>

l00009725_1:
	r1 = SLICE((int16) (r8 >> 16) *s (int16) (r0 >> 16) + r1_r0, word32, 32) (alias)
// DataOut: ip r0 r1 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r5:<invalid>

l00009729:
	branch Z l0000972D
// DataOut: ip r0 r1 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r5:<invalid> Sequence r1:r0:<invalid>

l00009729_1:
// DataOut: ip r0 r1 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r5:<invalid> Sequence r1:r0:<invalid>

l0000972D:
	branch Z l00009731
// DataOut: ip r0 r1 r6 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r5:<invalid> Sequence r1:r0:<invalid>

l0000972D_1:
// DataOut: ip r0 r1 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r5:<invalid> Sequence r1:r0:<invalid>

l00009731:
	branch V l00009735
// DataOut: ip r0 r1 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r0:<invalid> r5:<invalid> Sequence r1:r0:<invalid> r7:<invalid>

l00009735:
	branch V l00009735_thunk_OSRAMWriteFinal
// DataOut: ip r0 r1 r6 r8
// DataOut (flags): NZC
// SymbolicIn: sp:<invalid> r0:<invalid> r5:<invalid> Sequence r1:r0:<invalid> r7:<invalid>

l00009735_thunk_OSRAMWriteFinal:
	OSRAMWriteFinal(r1, r6, ip)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r5:<invalid> Sequence r1:r0:<invalid> r7:<invalid>
// Terminates process

l00009735_1:
// DataOut: ip r1 r6
// DataOut (flags): NZC
// SymbolicIn: sp:<invalid> r0:<invalid> r5:<invalid> Sequence r1:r0:<invalid> r7:<invalid>

l00009735_thunk_OSRAMWriteFinal:
	OSRAMWriteFinal(r1, r6, ip)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r5:<invalid> Sequence r1:r0:<invalid> r7:<invalid>
// Terminates process

l00009731_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r5:<invalid> Sequence r1:r0:<invalid> r7:<invalid>

l00009721_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:<invalid> r5:<invalid>

l00009719_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:r8 - (r1 >> 18) r5:<invalid>

l00009711_1:
	word32 sp_34
	byte Z_35
	word32 r0_36
	word32 r8_37
	word32 r1_38
	word32 r5_39
	word32 pc_40
	byte C_41
	word32 r6_42
	byte NZV_43
	word32 r7_44
	byte V_45
	word32 ip_46
	call (word32) Mem0[r0 + (r8 >> 18):byte] (retsize: 0;)
		uses: C,ip,NZV,pc,r0_6,r1,r5_8,r6,r7,r8,sp_9,V,Z
		defs: C_41,ip_46,NZV_43,pc_40,r0_36,r1_38,r5_39,r6_42,r7_44,r8_37,sp_34,V_45,Z_35
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r0:r8 - (r1 >> 18) r5:<invalid>

OSRAMWriteByte_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r8 - (r1 >> 18) r5:<invalid>

l00009705_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void OSRAMWriteFinal(word32 r1, word32 r6, word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC ip r1 r6
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
OSRAMWriteFinal_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

OSRAMWriteFinal_entry:
// DataOut: ip r1 r6
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l00009739:
	branch Z l0000973D
// DataOut: ip r1 r6
// DataOut (flags): NC
// SymbolicIn: sp:fp

l0000973D:
	branch C l00009741
// DataOut: ip r1 r6
// DataOut (flags): N
// SymbolicIn: sp:fp

l0000973D_1:
// DataOut: r6
// DataOut (flags): N
// SymbolicIn: sp:fp

l00009741:
	branch N l00009745
// DataOut: r6
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r1 ^ ip >> 32

l00009741_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r1 ^ ip >> 32

l00009745:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00009739_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void OSRAMClear(word32 r1, word32 r6, word32 r8, word32 r10, word32 ip)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV ip r1 r10 r6 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
OSRAMClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

OSRAMClear_entry:
// DataOut: ip r1 r10 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009781:
	__syscall(0x002080B5)
	branch Z l00009789
// DataOut: ip r1 r10 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009789:
	__syscall(0x00480E21)
	branch N l00009791
// DataOut: ip r1 r10 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000978D_1:
	__syscall(0x00FF9AF7)
// DataOut: ip r1 r10 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009791:
	__syscall(0x00200024)
	branch Z l00009799
// DataOut: ip r1 r10 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009799:
	branch C l0000979D
// DataOut: ip r1 r10 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009799_1:
	byte NZCV_61 = cond(r1 - (ip >> r10) - C)
	N = NZCV_61 (alias)
	C = NZCV_61 (alias)
	Z = NZCV_61 (alias)
	NZV = NZCV_61 (alias)
// DataOut: ip r1 r10 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000979D:
	branch NZV l000097A1
// DataOut: ip r1 r10 r6 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:<invalid>

l0000979D_1:
	word32 sp_47
	word32 pc_51
	byte NZCV_55
	byte NZV_56
	word32 fp_57
	word32 r8_58
	word32 r6_59
	call fnFFE094BD (retsize: 0;)
		uses: C_11,fp,ip,N_10,NZCV_9,NZV_13,pc_8,r1,r10,r6,r8,sp_1,Z_12
		defs: C_50,fp_57,ip_53,N_49,NZCV_55,NZV_56,pc_51,r1_52,r10_54,r6_59,r8_58,sp_47,Z_48
// DataOut: ip r1 r10 r6 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:<invalid>

l000097A1:
	__syscall(0x002080FF)
	branch Z l000097A9
// DataOut: ip r1 r10 r6 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp pc:<invalid>

l000097A9:
	__syscall(0x00480721)
	branch N l000097B1
// DataOut: ip r1 r10 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:<invalid>

l000097AD_1:
	__syscall(0x00FF8AF7)
// DataOut: ip r1 r10 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:<invalid>

l000097B1:
	__syscall(0x00200024)
	branch Z l000097B9
// DataOut: ip r1 r10 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:<invalid>

l000097B9:
	branch C l000097BD
// DataOut: ip r1 r10 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:<invalid>

l000097B9_1:
	Z = cond(r1 - (ip >> r10) - C) (alias)
// DataOut: r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:<invalid>

l000097BD:
	branch Z l000097C1
// DataOut: r6 r8
// DataOut (flags): C
// SymbolicIn: sp:fp pc:<invalid>

l000097BD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid>

l000097C1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> fp:<invalid>

l000097B5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid>

l000097A5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid>

l00009795_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009785_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void OSRAMStringDraw(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// Preserved: sp
OSRAMStringDraw_entry:
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000097CD:
	branch Z l000097D1
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000097D1:
	branch ZC l000097D5
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000097D1_1:
	r0 = r6 - (r6 >> 10)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000097D5:
	branch V l000097D9
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r6 - (r6 >> 10)

l000097D5_1:
	pc = ~(r0 >> 30)
	byte NZCV_288 = cond(pc)
	Z = NZCV_288 (alias)
	ZC = NZCV_288 (alias)
	V = NZCV_288 (alias)
	NZV = NZCV_288 (alias)
	C = NZCV_288 (alias)
	N = NZCV_288 (alias)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r6 - (r6 >> 10)

l000097D9:
	branch Z l000097DD
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r6 - (r6 >> 10) pc:~(r6 - (r6 >> 10) >> 30)

l000097DD:
	branch NZV l000097E1
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r6 - (r6 >> 10) pc:~(r6 - (r6 >> 10) >> 30)

l000097DD_1:
	r0 = r0 - pc
	Mem286[r0:word16] = (uint16) fp
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r6 - (r6 >> 10) pc:~(r6 - (r6 >> 10) >> 30)

l000097E1:
	branch ZC l000097E5
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:~(r6 - (r6 >> 10) >> 30)

l000097E1_1:
	__syscall(0x00F7FF20)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:~(r6 - (r6 >> 10) >> 30)

l000097E5:
	branch C l000097E9
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:~(r6 - (r6 >> 10) >> 30)

l000097E5_1:
	r0 = (word32) Mem0[r1:byte]
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:~(r6 - (r6 >> 10) >> 30)

l000097E9:
	__syscall(0x00208006)
	branch Z l000097F1
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:~(r6 - (r6 >> 10) >> 30) r1:r1 + 1279

l000097F1:
	__syscall(0x00000FF0)
	branch ZC l000097F9
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:~(r6 - (r6 >> 10) >> 30) r1:r1 + 1279

l000097F5_1:
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:~(r6 - (r6 >> 10) >> 30) r1:r1 + 1279

l000097F9:
	branch ZC l000097FD
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid>

l000097F9_1:
	byte NZCV_272 = cond(~0x00000080)
	Z = NZCV_272 (alias)
	V = NZCV_272 (alias)
	C = NZCV_272 (alias)
	N = NZCV_272 (alias)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid>

l000097FD:
	branch Z l00009801
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid>

l000097FD_1:
	byte NZCV_264 = cond(~0x0FF00000)
	Z = NZCV_264 (alias)
	V = NZCV_264 (alias)
	C = NZCV_264 (alias)
	N = NZCV_264 (alias)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid>

l00009801:
	branch Z l00009805
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000

l00009801_1:
	byte NZCV_256 = cond((r0 << r0) - r0 - C)
	V = NZCV_256 (alias)
	C = NZCV_256 (alias)
	N = NZCV_256 (alias)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000

l00009805:
	branch V l00009809
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009809:
	__syscall(0x002040FF)
	branch C l00009811
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l0000980D_1:
	word32 sp_233
	byte Z_234
	byte ZC_235
	word32 r0_236
	word32 r6_237
	byte V_238
	word32 pc_239
	byte NZCV_240
	byte NZV_241
	word32 fp_242
	byte C_243
	word32 r1_244
	word32 r8_245
	word32 ip_246
	word32 r4_247
	word32 r3_249
	word32 r5_250
	word32 r7_251
	word32 r9_252
	word32 r10_253
	word32 spsr_254
	call fnFFFE83F1 (retsize: 0;)
		uses: C_47,fp,ip_37,N_45,NZCV_49,NZV_48,pc_31,r0_23,r1_22,r10,r3,r4_46,r5,r6,r7,r8_25,r9,sp_1,spsr,V_50,Z_52,ZC_51
		defs: C_243,fp_242,ip_246,N_248,NZCV_240,NZV_241,pc_239,r0_236,r1_244,r10_253,r3_249,r4_247,r5_250,r6_237,r7_251,r8_245,r9_252,sp_233,spsr_254,V_238,Z_234,ZC_235
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009811:
	branch N l00009811_then
	word32 sp_54
	byte Z_55
	byte ZC_56
	word32 r0_57
	word32 r6_58
	byte V_59
	word32 pc_60
	byte NZCV_61
	byte NZV_62
	word32 fp_63
	byte C_64
	word32 r1_65
	word32 r8_66
	word32 ip_67
	word32 r4_68
	byte N_69
	word32 r3_70
	word32 r5_71
	word32 r7_72
	word32 r9_73
	word32 r10_74
	word32 spsr_75
	call fnFECEA5F9 (retsize: 0;)
		uses: C_47,ip_37,N_53,NZCV_49,NZV_48,pc_31,r0_23,r1_22,r4_46,r8_25,sp_1,V_50,Z_52,ZC_51
		defs: C_64,fp_63,ip_67,N_69,NZCV_61,NZV_62,pc_60,r0_57,r1_65,r10_74,r3_70,r4_68,r5_71,r6_58,r7_72,r8_66,r9_73,sp_54,spsr_75,V_59,Z_55,ZC_56
	return
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009811_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009815:
	branch Z_55 l00009815_then
	word32 sp_76
	byte Z_77
	byte ZC_78
	word32 r0_79
	word32 r6_80
	byte V_81
	word32 pc_82
	byte NZCV_83
	byte NZV_84
	word32 fp_85
	byte C_86
	word32 r1_87
	word32 r8_88
	word32 ip_89
	word32 r4_90
	word32 r3_92
	word32 r5_93
	word32 r7_94
	word32 r9_95
	word32 r10_96
	word32 spsr_97
	byte N_216
	call fn0138F8CD (retsize: 0;)
		uses: C_64,fp_63,ip_67,N_69,NZCV_61,NZV_62,pc_60,r0_57,r1_65,r10_74,r3_70,r4_68,r5_71,r6_58,r7_72,r8_66,r9_73,sp_54,spsr_75,V_59,Z_55,ZC_56
		defs: C_86,fp_85,ip_89,N_91,NZCV_83,NZV_84,pc_82,r0_79,r1_87,r10_96,r3_92,r4_90,r5_93,r6_80,r7_94,r8_88,r9_95,sp_76,spsr_97,V_81,Z_77,ZC_78
	return
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009815_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009819:
	branch Z_77 l0000981D
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009819_1:
	Mem224[r0_79 + 2009:byte] = (byte) r1_87
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l0000981D:
	branch Z_77 l00009821
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009821:
	__syscall(0x00B18334)
	branch C_86 l00009829
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009825_1:
	word32 sp_201
	byte Z_202
	byte ZC_203
	word32 r0_204
	word32 r6_205
	byte V_206
	word32 pc_207
	byte NZCV_208
	byte NZV_209
	word32 fp_210
	byte C_211
	word32 r1_212
	word32 r8_213
	word32 ip_214
	word32 r4_215
	word32 r3_217
	word32 r5_218
	word32 r7_219
	word32 r9_220
	word32 r10_221
	word32 spsr_222
	call fnFFFE5409 (retsize: 0;)
		uses: C_86,fp_85,ip_89,N_91,NZCV_83,NZV_84,pc_82,r0_98,r1_87,r10_96,r3_92,r4_90,r5_93,r6_80,r7_94,r8_88,r9_95,sp_76,spsr_97,V_81,Z_77,ZC_78
		defs: C_211,fp_210,ip_214,N_216,NZCV_208,NZV_209,pc_207,r0_204,r1_212,r10_221,r3_217,r4_215,r5_218,r6_205,r7_219,r8_213,r9_220,sp_201,spsr_222,V_206,Z_202,ZC_203
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009829:
	branch N_216 l00009829_then
	word32 sp_100
	word32 r6_104
	byte V_105
	byte NZCV_107
	byte NZV_108
	word32 fp_109
	byte C_110
	word32 r1_111
	word32 r8_112
	word32 ip_113
	word32 r4_114
	word32 r3_116
	word32 r5_117
	word32 r7_118
	word32 r9_119
	word32 r10_120
	word32 spsr_121
	byte ZC_102
	byte Z_101
	word32 r0_103
	byte N_115
	word32 pc_106
	call fnFECD0611 (retsize: 0;)
		uses: C_86,fp_85,ip_89,N_99,NZCV_83,NZV_84,pc_82,r0_98,r1_87,r10_96,r3_92,r4_90,r5_93,r6_80,r7_94,r8_88,r9_95,sp_76,spsr_97,V_81,Z_77,ZC_78
		defs: C_110,fp_109,ip_113,N_115,NZCV_107,NZV_108,pc_106,r0_103,r1_111,r10_120,r3_116,r4_114,r5_117,r6_104,r7_118,r8_112,r9_119,sp_100,spsr_121,V_105,Z_101,ZC_102
	return
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009829_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l0000982D:
	branch C_110 l00009831
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l0000982D_1:
	r0_103 = r8_112 - (ip_113 >> 26) - C_110
	byte NZCV_194 = cond(r0_103)
	Z_101 = NZCV_194 (alias)
	ZC_102 = NZCV_194 (alias)
	N_115 = NZCV_194 (alias)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009831:
	branch ZC_102 l00009835
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009831_1:
	r0_103 = ~0xEC000000
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009835:
	branch Z_101 l00009839
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009839:
	branch N_115 l0000983D
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009839_1:
	pc_106 = ~0x00000084
	N_115 = cond(pc_106) (alias)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l0000983D:
	branch N_115 l00009841
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l0000983D_1:
	__syscall(0x002C5AFF)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009841:
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009841_thunk_SysCtlPeripheralDeepSleepDisable:
	SysCtlPeripheralDeepSleepDisable(r0_103, r1_111, r3_116, r4_114, r5_117, r6_104, r7_118, r8_112, r9_119, r10_120, fp_109, ip_113, pc_106, spsr_121)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009835_1:
	word32 sp_154
	byte Z_155
	byte ZC_156
	word32 r0_157
	word32 r6_158
	byte V_159
	word32 pc_160
	byte NZCV_161
	byte NZV_162
	word32 fp_163
	byte C_164
	word32 r1_165
	word32 r8_166
	word32 ip_167
	word32 r4_168
	byte N_169
	word32 r3_170
	word32 r5_171
	word32 r7_172
	word32 r9_173
	word32 r10_174
	word32 spsr_175
	call Mem0[r8_112 - 3:word32] (retsize: 0;)
		uses: C_123,fp_109,ip_113,N_122,NZCV_125,NZV_124,pc_106,r0_130,r1_111,r10_120,r3_116,r4_114,r5_117,r6_104,r7_118,r8_112,r9_119,sp_100,spsr_121,V_126,Z_129,ZC_128
		defs: C_164,fp_163,ip_167,N_169,NZCV_161,NZV_162,pc_160,r0_157,r1_165,r10_174,r3_170,r4_168,r5_171,r6_158,r7_172,r8_166,r9_173,sp_154,spsr_175,V_159,Z_155,ZC_156
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

OSRAMStringDraw_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:<invalid> r8:<invalid> ip:<invalid> r4:<invalid> r2:<invalid> r7:<invalid> r5:<invalid> r6:<invalid> r10:<invalid> lr:<invalid>

l0000981D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l00009805_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:<invalid> r1:r1 + 1279 r8:<invalid> ip:~0x0FF00000 r4:<invalid>

l000097ED_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:~(r6 - (r6 >> 10) >> 30) r1:r1 + 1279

l000097D9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r6 - (r6 >> 10) pc:~(r6 - (r6 >> 10) >> 30)

l000097CD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void OSRAMImageDraw(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 ip, word32 lr, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV ip lr pc r0 r1 r2 r3 r4 r5 r6 r7
// LiveOut:
// Trashed: NZCV lr pc r1 r2 r3 r4 r7 r8
// Preserved: sp
OSRAMImageDraw_entry:
// DataOut: ip lr pc r0 r1 r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009881:
	branch Z l00009885
// DataOut: ip lr pc r0 r1 r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009881_1:
	Mem229[r7:word32] = r0
	Mem230[r7 + 4:word32] = r3
	Mem231[r7 + 8:word32] = r5
	Mem232[r7 + 12:word32] = r6
	Mem233[r7 + 16:word32] = r7
	Mem234[r7 + 20:word32] = ip
	Mem235[r7 + 24:word32] = fp
	Mem236[r7 + 28:word32] = lr
	Mem237[r7 + 32:word32] = pc
// DataOut: ip lr pc r0 r1 r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009885:
	branch Z l00009889
// DataOut: ip lr pc r0 r1 r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009885_1:
	r3 = r3 + 1694
	r3_r2 = SEQ(r3 + 1694, r2) (alias)
// DataOut: ip lr pc r0 r1 r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009889:
	branch ZC l0000988D
// DataOut: ip lr pc r0 r1 r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid>

l0000988D:
	branch NZV l00009891
// DataOut: ip lr pc r0 r1 r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid>

l0000988D_1:
	byte NZCV_218 = cond(r1 ^ r6 >> 8)
	Z = NZCV_218 (alias)
	ZC = NZCV_218 (alias)
	NZV = NZCV_218 (alias)
	C = (bool) NZCV_218 (alias)
	N = NZCV_218 (alias)
// DataOut: ip lr pc r0 r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid>

l00009891:
	branch Z l00009895
// DataOut: ip lr pc r0 r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid>

l00009895:
	branch Z l00009899
// DataOut: ip lr pc r0 r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid>

l00009895_1:
	r4 = (r4 >> 16) - r0 - C
	byte NZCV_210 = cond(r4)
	Z = NZCV_210 (alias)
	ZC = NZCV_210 (alias)
	NZV = NZCV_210 (alias)
	C = (bool) NZCV_210 (alias)
	N = NZCV_210 (alias)
// DataOut: ip lr pc r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid>

l00009899:
	branch Z l0000989D
// DataOut: ip lr pc r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid>

l00009899_1:
	__syscall(0x00F00108)
// DataOut: ip lr pc r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid>

l0000989D:
	__syscall(0x00F10307)
	__syscall(0x0020803A)
	branch Z l000098A9
// DataOut: ip lr pc r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid>

l000098A9:
	branch NZV l000098AD
// DataOut: ip pc r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid>

l000098A9_1:
	byte NZC_201 = cond(ip >> 8)
	C = (bool) NZC_201 (alias)
	Z = NZC_201 (alias)
	ZC = NZC_201 (alias)
	NZV = NZC_201 (alias)
	N = NZC_201 (alias)
// DataOut: pc r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid>

l000098AD:
	__syscall(0x0020B020)
	branch ZC l000098B5
// DataOut: pc r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:ip >> 8

l000098B1_1:
	r3_r2 = SEQ(r3, (word32) Mem0[0x00009940:int16]) (alias)
// DataOut: pc r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:ip >> 8

l000098B5:
	branch C l000098B9
// DataOut: pc r2 r3 r4 r5 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:ip >> 8 pc:pc + 135 r2:<invalid>

l000098B9:
	__syscall(0x004638FF)
	branch ZC l000098C1
// DataOut: pc r2 r3 r4 r5 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:ip >> 8 pc:pc + 135 r2:<invalid>

l000098BD_1:
	r3_r2 = SEQ(r3, (word32) Mem0[0x000098EC:int16]) (alias)
// DataOut: pc r2 r3 r4 r5 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:ip >> 8 pc:pc + 135 r2:<invalid>

l000098C1:
	branch Z l000098C5
// DataOut: pc r2 r3 r4 r5 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:ip >> 8 pc:<invalid> r2:<invalid>

l000098C1_1:
	__syscall(0x00F7FF20)
// DataOut: pc r2 r3 r4 r5 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:ip >> 8 pc:<invalid> r2:<invalid>

l000098C5:
	__syscall(0x004640FF)
	branch N l000098CD
// DataOut: pc r2 r3 r4 r5 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:ip >> 8 pc:<invalid> r2:<invalid>

l000098C9_1:
// DataOut: r2 r3 r4 r5 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:ip >> 8 pc:<invalid> r2:<invalid>

l000098CD:
	branch Z l000098D1
// DataOut: r2 r3 r4 r5 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l000098D1:
	branch N l000098D5
// DataOut: r2 r3 r4 r5 r6
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l000098D1_1:
	Mem188[r6 - 143:word64] = r3_r2
// DataOut: r4 r5
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l000098D5:
	__syscall(0x00444D46)
	branch Z l000098DD
// DataOut: r4 r5
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l000098DD:
	branch Z l000098E1
// DataOut: r4 r5
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l000098DD_1:
	byte NZCV_180 = cond(~(r4 >> r5))
	NZV = NZCV_180 (alias)
	C = (bool) NZCV_180 (alias)
// DataOut:
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l000098E1:
	branch C l000098E5
// DataOut:
// DataOut (flags): NZV
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l000098E5:
	branch NZV l000098E9
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l000098E5_1:
	word32 sp_158
	byte Z_159
	word32 r7_160
	word32 r0_161
	word32 r3_162
	word32 r5_163
	word32 r6_164
	word32 ip_165
	word32 lr_166
	word32 pc_167
	word32 r8_168
	byte ZC_169
	byte NZV_170
	word32 r1_171
	byte NZCV_172
	word32 r4_173
	bool C_174
	byte NZV_175
	byte NZC_176
	word32 r2_177
	byte N_178
	call fn010B34E9 (retsize: 0;)
		uses: C_131,ip,lr,N_128,NZC_129,NZCV_132,NZV_130,NZV_133,pc_127,r0,r1_126,r2_124,r3_8,r4_29,r5,r6,r7,r8_135,sp_1,Z_136,ZC_134
		defs: C_174,ip_165,lr_166,N_178,NZC_176,NZCV_172,NZV_170,NZV_175,pc_167,r0_161,r1_171,r2_177,r3_162,r4_173,r5_163,r6_164,r7_160,r8_168,sp_158,Z_159,ZC_169
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l000098E9:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l000098E1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l000098D9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l000098CD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:<invalid> pc:<invalid> r2:<invalid>

l000098B5_1:
	word32 sp_102
	byte Z_103
	word32 r7_104
	word32 r0_105
	word32 r3_106
	word32 r5_107
	word32 r6_108
	word32 ip_109
	word32 lr_110
	word32 pc_111
	word32 r8_112
	byte ZC_113
	byte NZV_114
	word32 r1_115
	byte NZCV_116
	word32 r4_117
	bool C_118
	byte NZV_119
	byte NZC_120
	word32 r2_121
	byte N_122
	call (word32) Mem0[r7 + 3872:byte] (retsize: 0;)
		uses: C_92,ip,lr,N_89,NZC_90,NZCV_93,NZV_91,NZV_95,pc_100,r0,r1_94,r2_99,r3_8,r4_29,r5,r6,r7_101,r8_7,sp_1,Z_97,ZC_96
		defs: C_118,ip_109,lr_110,N_122,NZC_120,NZCV_116,NZV_114,NZV_119,pc_111,r0_105,r1_115,r2_121,r3_106,r4_117,r5_107,r6_108,r7_104,r8_112,sp_102,Z_103,ZC_113
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> r1:ip >> 8 pc:pc + 135 r2:<invalid>

l000098A5_1:
	word32 sp_68
	byte Z_69
	word32 r7_70
	word32 r0_71
	word32 r3_72
	word32 r5_73
	word32 r6_74
	word32 ip_75
	word32 lr_76
	word32 pc_77
	word32 r8_78
	byte ZC_79
	byte NZV_80
	word32 r1_81
	byte NZCV_82
	word32 r4_83
	bool C_84
	byte NZV_85
	byte NZC_86
	word32 r2_87
	byte N_88
	call (word32) Mem0[lr:int16] (retsize: 0;)
		uses: C_28,ip,lr_59,N_25,NZC_26,NZCV_30,NZV_27,NZV_31,pc,r0,r1,r2,r3_8,r4_29,r5,r6,r7,r8_7,sp_1,Z_33,ZC_32
		defs: C_84,ip_75,lr_76,N_88,NZC_86,NZCV_82,NZV_80,NZV_85,pc_77,r0_71,r1_81,r2_87,r3_72,r4_83,r5_73,r6_74,r7_70,r8_78,sp_68,Z_69,ZC_79
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid>

OSRAMImageDraw_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid> r4:<invalid> lr:lr + 167 r1:ip >> 8 pc:pc + 135 r2:<invalid> r7:r7 + 3872

l00009891_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid>

l00009889_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 + 1694 r8:<invalid>



void OSRAMInit(word32 r0, word32 r1, word32 r4, word32 r5, word32 r6, word32 r8, word32 fp, word32 lr, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp lr pc r0 r1 r4 r5 r6 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
OSRAMInit_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

OSRAMInit_entry:
// DataOut: fp lr pc r0 r1 r4 r5 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000098F1:
	branch Z l000098F5
// DataOut: fp lr pc r0 r1 r4 r5 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000098F1_1:
	Mem34[r1:byte] = (byte) pc
	r1 = r1 - 233
// DataOut: fp lr r0 r1 r4 r5 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000098F5:
	branch Z l000098F9
// DataOut: fp lr r0 r1 r4 r5 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:r1 - 233

l000098F5_1:
	byte NZCV_30 = cond((r6 >> 30) - r0 - C)
	C = (bool) NZCV_30 (alias)
	Z = NZCV_30 (alias)
// DataOut: fp lr r0 r1 r4 r5 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:r1 - 233

l000098F9:
	branch C l000098FD
// DataOut: fp lr r0 r1 r4 r5 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:r1 - 233 r4:<invalid>

l000098F9_1:
	__syscall(0x00F00020)
// DataOut: fp lr r0 r1 r4 r5 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:r1 - 233 r4:<invalid>

l000098FD:
	branch Z l00009901
// DataOut: fp lr r0 r1 r4 r5 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:r1 - 233 r4:<invalid>

l00009901:
	branch Z l00009905
// DataOut: fp lr r0 r1 r4 r5 r6 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:r1 - 233 r4:<invalid>

l00009905:
	__syscall(0x00481721)
	branch C l0000990D
// DataOut: fp lr r0 r1 r4 r5 r6 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:r1 - 233 r4:<invalid>

l0000990D:
	branch Z l00009911
// DataOut: fp lr r0 r1 r4 r5 r6 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:r1 - 233 r4:<invalid>

l0000990D_1:
	r1 = r8 - (r6 >> 12)
// DataOut: fp lr r0 r1 r4 r5 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:r1 - 233 r4:<invalid>

l00009911:
	branch Z l00009915
// DataOut: fp lr r0 r1 r4 r5 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid> r4:<invalid>

l00009915:
	branch Z l00009919
// DataOut: fp lr r0 r1 r4 r5 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid> r4:<invalid>

l00009915_1:
	Mem26[fp - 1314:byte] = (byte) r1
// DataOut: lr r0 r1 r4 r5 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid> r4:<invalid>

l00009919:
	branch Z l0000991D
// DataOut: lr r0 r1 r4 r5 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid> r4:<invalid>

l00009919_1:
	Mem24[r6:word32] = lr
// DataOut: r0 r1 r4 r5
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid> r4:<invalid>

l0000991D:
	branch Z l00009921
// DataOut: r0 r1 r4 r5
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid> r4:<invalid> r6:r6 - 847

l0000991D_1:
// DataOut: r0 r1 r5
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid> r4:<invalid> r6:r6 - 847

l00009921:
	branch Z l00009925
// DataOut: r0 r1 r5
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid> r4:<invalid> r6:r6 - 847 r8:<invalid>

l00009921_1:
	Mem21[r0 - (r5 >> 20):byte] = (byte) r1
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid> r4:<invalid> r6:r6 - 847 r8:<invalid>

l00009925:
	branch Z l00009929
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r4:<invalid> r6:r6 - 847 r8:<invalid> r0:r0 - (r5 >> 20)

l00009929:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r4:<invalid> r6:r6 - 847 r8:<invalid> r0:r0 - (r5 >> 20)

l00009925_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r4:<invalid> r6:r6 - 847 r8:<invalid> r0:r0 - (r5 >> 20)

l00009911_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r4:<invalid>

l00009909_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r1 - 233 r4:<invalid>

l00009901_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r1 - 233 r4:<invalid>

l000098FD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r1 - 233 r4:<invalid>



void OSRAMDisplayOn(word32 r0, word32 r1, word32 r4, word32 r6, word32 r9, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z lr r0 r1 r4 r6 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
OSRAMDisplayOn_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

OSRAMDisplayOn_entry:
// DataOut: lr r0 r1 r4 r6 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00009975:
	branch Z l00009979
// DataOut: lr r0 r1 r4 r6 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00009975_1:
	word32 pc_17 = r1 - __ror(r9, 1)
// DataOut: lr r0 r4 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00009979:
	branch Z l0000997D
// DataOut: lr r0 r4 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp pc:<invalid>

l00009979_1:
	Mem13[r6:word32] = lr
// DataOut: r0 r4
// DataOut (flags): Z
// SymbolicIn: sp:fp pc:<invalid>

l0000997D:
	branch Z l00009981
// DataOut: r0 r4
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r6:r6 - 847

l0000997D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r6:r6 - 847

l00009981:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r6:r6 - 847 r8:r0 ^ r4 >> 32



void OSRAMDisplayOff(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r9, word32 r10, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// LiveOut:
// Trashed: pc r3 r6 r7
// Preserved: sp
OSRAMDisplayOff_entry:
// DataOut: pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000099C1:
	__syscall(0x002080B5)
	branch NV l000099C9
// DataOut: pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000099C9:
	branch ZC l000099CD
// DataOut: pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000099C9_1:
	word32 sp_83
	word32 r6_85
	word32 pc_87
	byte C_90
	word32 r0_91
	word32 r1_92
	word32 r2_93
	word32 r3_94
	word32 r4_95
	word32 r5_96
	word32 r9_97
	word32 r10_98
	call fnFFE09651 (retsize: 0;)
		uses: C,NV,NZV,pc,r0,r1,r10,r2,r3,r4,r5,r6,r7,r9,sp_1,ZC
		defs: C_90,NV_84,NZV_89,pc_87,r0_91,r1_92,r10_98,r2_93,r3_94,r4_95,r5_96,r6_85,r7_88,r9_97,sp_83,ZC_86
// DataOut: pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000099CD:
	__syscall(0x002080FE)
	branch NV l000099D5
// DataOut: pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000099D5:
	branch ZC l000099D9
// DataOut: pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000099D9:
	__syscall(0x002080FE)
	branch NZV l000099E1
// DataOut: pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000099E1:
	branch ZC l000099E1_then
	word32 sp_67
	byte NV_68
	word32 r6_69
	byte ZC_70
	word32 pc_71
	word32 r7_72
	byte NZV_73
	byte C_74
	word32 r0_75
	word32 r1_76
	word32 r2_77
	word32 r3_78
	word32 r4_79
	word32 r5_80
	word32 r9_81
	word32 r10_82
	call fn0100BD89 (retsize: 0;)
		uses: C_25,NV_31,NZV_26,pc_28,r0_24,r1_23,r10_17,r2_22,r3_21,r4_20,r5_19,r6_30,r7_27,r9_18,sp_32,ZC_29
		defs: C_74,NV_68,NZV_73,pc_71,r0_75,r1_76,r10_82,r2_77,r3_78,r4_79,r5_80,r6_69,r7_72,r9_81,sp_67,ZC_70
	return
// DataOut: pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000099E1_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000099E5:
	branch C_74 l000099E5_thunk_SSIConfig
// DataOut: pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000099E5_thunk_SSIConfig:
	SSIConfig(r0_75, r1_76, r2_77, r3_78, r4_79, r5_80, r6_69, r7_72, r9_81, r10_82, pc_71)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000099E5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000099DD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000099D5_1:
	word32 r7_49 = r7 + 3872
	word32 sp_51
	byte NV_52
	word32 r6_53
	byte ZC_54
	word32 pc_55
	word32 r7_56
	byte NZV_57
	byte C_58
	word32 r0_59
	word32 r1_60
	word32 r2_61
	word32 r3_62
	word32 r4_63
	word32 r5_64
	word32 r9_65
	word32 r10_66
	call (word32) Mem0[r7_49:byte] (retsize: 0;)
		uses: C_25,NV_31,NZV_26,pc_28,r0_24,r1_23,r10_17,r2_22,r3_21,r4_20,r5_19,r6_30,r7_49,r9_18,sp_32,ZC_29
		defs: C_58,NV_52,NZV_57,pc_55,r0_59,r1_60,r10_66,r2_61,r3_62,r4_63,r5_64,r6_53,r7_56,r9_65,sp_51,ZC_54
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

OSRAMDisplayOff_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:<invalid> r6:<invalid> pc:<invalid> r3:<invalid>

l000099D1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000099C5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SSIConfig(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r9, word32 r10, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// LiveOut:
// Trashed: pc r3 r6 r7
// Preserved: sp
SSIConfig_entry:
// DataOut: pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000099E9:
	branch Z l000099ED
// DataOut: pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000099E9_1:
	Mem69[r1 - __ror(r9, 1):byte] = (byte) pc
// DataOut: pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l000099ED:
	branch ZC l000099F1
// DataOut: pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l000099ED_1:
	Mem60[r6:word32] = r1
	Mem62[r6 + 4:word32] = r2
	Mem63[r6 + 8:word32] = r6
	Mem65[r6 + 12:word32] = r9
	Mem67[r6 + 16:word32] = r10
// DataOut: pc r0 r1 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l000099F1:
	branch Z l000099F5
// DataOut: pc r0 r1 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l000099F1_1:
	Mem57[r6:byte] = (byte) r1
// DataOut: pc r0 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l000099F5:
	word32 sp_4
	byte Z_5
	word32 r1_7
	word32 r9_8
	byte ZC_9
	word32 r6_10
	word32 r2_11
	word32 r10_12
	word32 r0_13
	word32 r3_14
	word32 r4_15
	word32 r5_16
	word32 r7_17
	byte NZV_18
	word32 pc_19
	call fnFFC09C73 (retsize: 0;)
		uses: sp_1,Z,ZC
		defs: NZV_18,pc_6,r0_13,r1_7,r10_12,r2_11,r3_14,r4_15,r5_16,r6_10,r7_17,r9_8,sp_4,Z_5,ZC_9
	branch Z_5 l000099FD
// DataOut: pc r0 r3 r4 r5 r6 r7 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 24)

l000099F9_1:
	Mem48[pc_19 + -24:word32] = r0_13
	Mem49[pc_19 + -20:word32] = r3_14
	Mem50[pc_19 + -16:word32] = r4_15
	Mem51[pc_19 + -12:word32] = r5_16
	Mem52[pc_19 + -8:word32] = r6_10
	Mem53[pc_19 + -4:word32] = r7_17
	Mem54[pc_19:word32] = r9_8
	pc_19 = pc_19 - 28
// DataOut: pc r0 r3 r4 r6 r7
// DataOut (flags): NZV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 24)

l000099FD:
	branch Z_5 l00009A01
// DataOut: pc r0 r3 r4 r6 r7
// DataOut (flags): NZV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 24) pc:pc - 28

l000099FD_1:
	Mem44[pc_19 + -8:word32] = r4_15
	Mem45[pc_19 + -4:word32] = r6_10
	Mem46[pc_19:word32] = r7_17
// DataOut: r0 r3 r7
// DataOut (flags): NZV
// SymbolicIn: sp:fp r6:r6 - (r6 >> 24) pc:pc - 28

l00009A01:
	branch NZV_18 l00009A05
// DataOut: r0 r3 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp r6:r6 - (r6 >> 24) pc:<invalid>

l00009A01_1:
	Mem42[r7_17:word16] = (uint16) r0_13
// DataOut: r0 r3
// DataOut (flags): Z
// SymbolicIn: sp:fp r6:r6 - (r6 >> 24) pc:<invalid>

l00009A05:
	branch Z_5 l00009A09
// DataOut: r0 r3
// DataOut (flags): Z
// SymbolicIn: sp:fp r6:r6 - (r6 >> 24) pc:<invalid> r7:r7 - 79

l00009A09:
	branch Z_5 l00009A0D
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 24) pc:<invalid> r7:r7 - 79

l00009A09_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 24) pc:<invalid> r7:r7 - 79

l00009A0D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 24) pc:<invalid> r7:<invalid>

l00009A05_1:
	word32 sp_25
	byte Z_26
	word32 pc_27
	word32 r1_28
	word32 r9_29
	byte ZC_30
	word32 r6_31
	word32 r2_32
	word32 r10_33
	word32 r0_34
	word32 r3_35
	word32 r4_36
	word32 r5_37
	word32 r7_38
	byte NZV_39
	call (word32) Mem0[r3_14:int16] (retsize: 0;)
		uses: NZV_18,pc_20,r0_13,r1_7,r10_12,r2_11,r3_24,r4_15,r5_16,r6_10,r7_21,r9_8,sp_4,Z_5,ZC_9
		defs: NZV_39,pc_27,r0_34,r1_28,r10_33,r2_32,r3_35,r4_36,r5_37,r6_31,r7_38,r9_29,sp_25,Z_26,ZC_30
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 24) pc:<invalid> r7:r7 - 79

SSIConfig_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - (r6 >> 24) pc:<invalid> r7:r7 - 79 r3:r3 + 75



void SSIEnable(word32 r0, word32 r1, word32 r2, word32 r3, word32 r7, word32 r8, word32 r9, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV pc r0 r1 r2 r3 r7 r8 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SSIEnable_entry:
// DataOut: pc r0 r1 r2 r3 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009A35:
	branch Z l00009A39
// DataOut: pc r0 r1 r2 r3 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009A35_1:
	byte NZCV_27 = cond(0xA0000001 - r0 - C)
	V = NZCV_27 (alias)
	N = NZCV_27 (alias)
// DataOut: pc r0 r1 r2 r3 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009A39:
	branch V l00009A3D
// DataOut: pc r0 r1 r2 r3 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:<invalid>

l00009A39_1:
// DataOut: pc r0 r1 r2 r3 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:<invalid>

l00009A3D:
	branch N l00009A3D_thunk_SSIDisable
// DataOut: pc r0 r1 r2 r3 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r4:<invalid>

l00009A3D_thunk_SSIDisable:
	SSIDisable(r0, r1, r2, r3, r7, r8, r9, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid>
// Terminates process

l00009A3D_1:
// DataOut: pc r0 r1 r2 r3 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r4:<invalid>

l00009A3D_thunk_SSIDisable:
	SSIDisable(0x00000047, r1, r2, r3, r7, r8, r9, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r0:0x00000047
// Terminates process

SSIEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SSIDisable(word32 r0, word32 r1, word32 r2, word32 r3, word32 r7, word32 r8, word32 r9, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV pc r0 r1 r2 r3 r7 r8 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SSIDisable_entry:
// DataOut: pc r0 r1 r2 r3 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009A41:
	branch Z l00009A45
// DataOut: pc r0 r1 r2 r3 r7 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009A41_1:
	r2 = 0xA0000001 - r0 - C
	byte NZCV_35 = cond(r2)
	Z = NZCV_35 (alias)
	V = NZCV_35 (alias)
// DataOut: pc r0 r1 r2 r3 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009A45:
	branch V l00009A49
// DataOut: pc r0 r1 r2 r3 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp r2:<invalid>

l00009A45_1:
// DataOut: pc r0 r1 r2 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp r2:<invalid>

l00009A49:
	branch Z l00009A49_thunk_SSIIntRegister
// DataOut: pc r0 r1 r2 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp r2:<invalid> r4:(r3 << 6) - r0

l00009A49_thunk_SSIIntRegister:
	SSIIntRegister(r0, r1, r2, r7, r8, r9, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r4:(r3 << 6) - r0
// Terminates process

l00009A49_1:
	word32 r0_21 = Mem0[pc:word32]
	word32 r1_22 = Mem0[pc + 4:word32]
	word32 r2_23 = Mem0[pc + 8:word32]
// DataOut: pc r0 r1 r2 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp r2:<invalid> r4:(r3 << 6) - r0

l00009A49_thunk_SSIIntRegister:
	SSIIntRegister(r0_21, r1_22, r2_23, r7, r8, r9, pc + 16)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r4:(r3 << 6) - r0 r0:<invalid> r1:<invalid> r6:<invalid> pc:pc + 16
// Terminates process

SSIDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SSIIntRegister(word32 r0, word32 r1, word32 r2, word32 r7, word32 r8, word32 r9, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZV pc r0 r1 r2 r7 r8 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SSIIntRegister_entry:
// DataOut: pc r0 r1 r2 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009A4D:
	__syscall(0x002017B5)
	branch NZV l00009A55
// DataOut: pc r0 r1 r2 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009A55:
	branch Z l00009A59
// DataOut: pc r0 r1 r2 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009A55_1:
	Mem29[r0 - __ror(r8, 17):byte] = (byte) r0
// DataOut: pc r0 r1 r2 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009A59:
	branch NZV l00009A5D
// DataOut: pc r0 r1 r2 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009A59_1:
	__syscall(0x00F7FF20)
// DataOut: pc r0 r1 r2 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009A5D:
	branch Z l00009A5D_thunk_SSIIntUnregister
// DataOut: pc r0 r1 r2 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009A5D_thunk_SSIIntUnregister:
	SSIIntUnregister(r0, r1, r2, r7, r8, r9, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l00009A5D_1:
	word32 r0_13 = Mem0[pc:word32]
	word32 r2_14 = Mem0[pc + 4:word32]
	word32 r7_18 = Mem0[pc + 20:word32]
// DataOut: pc r0 r1 r2 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009A5D_thunk_SSIIntUnregister:
	SSIIntUnregister(r0_13, r1, r2_14, r7_18, r8, r9, pc + 24)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> r7:<invalid> pc:pc + 24
// Terminates process

SSIIntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A51_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SSIIntUnregister(word32 r0, word32 r1, word32 r2, word32 r7, word32 r8, word32 r9, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZV pc r0 r1 r2 r7 r8 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SSIIntUnregister_entry:
// DataOut: pc r0 r1 r2 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009A61:
	__syscall(0x002017B5)
	branch NZV l00009A69
// DataOut: pc r0 r1 r2 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009A69:
	branch Z l00009A6D
// DataOut: pc r0 r1 r2 r7 r8 r9
// DataOut (flags): NV
// SymbolicIn: sp:fp

l00009A69_1:
	Mem28[r0 - __ror(r8, 17):byte] = (byte) r0
// DataOut: pc r1 r2 r7 r8 r9
// DataOut (flags): NV
// SymbolicIn: sp:fp

l00009A6D:
	branch V l00009A71
// DataOut: pc r1 r2 r7 r8 r9
// DataOut (flags): N
// SymbolicIn: sp:fp

l00009A6D_1:
	pc = ~0x00000080
	N = cond(pc) (alias)
// DataOut: pc r1 r2 r7 r8 r9
// DataOut (flags): N
// SymbolicIn: sp:fp

l00009A71:
	branch N l00009A71_thunk_SSIIntEnable
// DataOut: pc r1 r2 r7 r8 r9
// DataOut (flags): N
// SymbolicIn: sp:fp pc:~0x00000080

l00009A71_thunk_SSIIntEnable:
	SSIIntEnable(r1, r2, r7, r8, r9, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~0x00000080
// Terminates process

l00009A71_1:
// DataOut: pc r1 r2 r7 r8 r9
// DataOut (flags): N
// SymbolicIn: sp:fp pc:~0x00000080

l00009A71_thunk_SSIIntEnable:
	SSIIntEnable(r1, r2, r7, r8, r9, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:~0x00000080 r0:0x000000BD
// Terminates process

SSIIntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A65_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SSIIntEnable(word32 r1, word32 r2, word32 r7, word32 r8, word32 r9, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  N pc r1 r2 r7 r8 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SSIIntEnable_entry:
// DataOut: pc r1 r2 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009A75:
	branch N l00009A79
// DataOut: pc r1 r2 r7 r8 r9
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009A79:
	branch N l00009A79_thunk_SSIIntDisable
// DataOut: pc r1 r2 r7 r8 r9
// DataOut (flags): ZV
// SymbolicIn: sp:fp

l00009A79_thunk_SSIIntDisable:
	SSIIntDisable(r1, r2, r7, r8, r9, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l00009A79_1:
	word32 r7_5 = DPB(r7, 0x7061, 16)
// DataOut: pc r1 r2 r7 r8 r9
// DataOut (flags): ZV
// SymbolicIn: sp:fp

l00009A79_thunk_SSIIntDisable:
	SSIIntDisable(r1, r2, r7_5, r8, r9, pc)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:DPB(r7, 0x7061, 16)
// Terminates process

SSIIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A75_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SSIIntDisable(word32 r1, word32 r2, word32 r7, word32 r8, word32 r9, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZV pc r1 r2 r7 r8 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SSIIntDisable_entry:
// DataOut: pc r1 r2 r7 r8 r9
// DataOut (flags): ZV
// SymbolicIn: sp:fp

l00009A7D:
	branch Z l00009A81
// DataOut: pc r1 r2 r7 r8 r9
// DataOut (flags): ZV
// SymbolicIn: sp:fp

l00009A7D_1:
	r2 = ~__ror(r9, 6)
// DataOut: pc r1 r2 r7 r8 r9
// DataOut (flags): ZV
// SymbolicIn: sp:fp

l00009A81:
	branch V l00009A85
// DataOut: pc r1 r2 r7 r8 r9
// DataOut (flags): ZV
// SymbolicIn: sp:fp r2:~<invalid>

l00009A81_1:
// DataOut: pc r2 r7 r8 r9
// DataOut (flags): ZV
// SymbolicIn: sp:fp r2:~<invalid>

l00009A85:
	branch Z l00009A85_thunk_SSIIntStatus
// DataOut: pc r2 r7 r8 r9
// DataOut (flags): ZV
// SymbolicIn: sp:fp r2:~<invalid> r4:(r1 << 2) - r1

l00009A85_thunk_SSIIntStatus:
	SSIIntStatus(r2, r7, r8, r9)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:~<invalid> r4:(r1 << 2) - r1
// Terminates process

l00009A85_1:
	word32 r2_17 = Mem0[pc + 12:word32]
// DataOut: r2 r7 r8 r9
// DataOut (flags): ZV
// SymbolicIn: sp:fp r2:~<invalid> r4:(r1 << 2) - r1

l00009A85_thunk_SSIIntStatus:
	SSIIntStatus(r2_17, r7, r8, r9)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r4:(r1 << 2) - r1 r0:<invalid> r1:<invalid> r6:<invalid> pc:pc + 20
// Terminates process

SSIIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SSIIntStatus(word32 r2, word32 r7, word32 r8, word32 r9)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZV r2 r7 r8 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SSIIntStatus_entry:
// DataOut: r2 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009A89:
	branch V l00009A8D
// DataOut: r2 r7 r8 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009A89_1:
	Mem20[r9:word16] = (uint16) r8
// DataOut: r2 r7 r9
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009A8D:
	branch V l00009A91
// DataOut: r2 r7 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp r9:r9 - 9

l00009A8D_1:
// DataOut: r2 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp r9:r9 - 9

l00009A91:
	branch Z l00009A91_thunk_SSIIntClear
// DataOut: r2 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp r9:r9 - 9 ip:(r7 >> 32) - (r9 - 18)

l00009A91_thunk_SSIIntClear:
	SSIIntClear(r2, r7)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 - 9 ip:(r7 >> 32) - (r9 - 18)
// Terminates process

l00009A91_1:
// DataOut: r2 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp r9:r9 - 9 ip:(r7 >> 32) - (r9 - 18)

l00009A91_thunk_SSIIntClear:
	SSIIntClear(r2, r7)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 - 9 ip:(r7 >> 32) - (r9 - 18) r0:r7 >> 32
// Terminates process

SSIIntStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SSIIntClear(word32 r2, word32 r7)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC r2 r7
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SSIIntClear_entry:
// DataOut: r2 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009A95:
	branch Z l00009A95_thunk_SSIDataPut
// DataOut: r2 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009A95_thunk_SSIDataPut:
	SSIDataPut()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l00009A95_1:
	word32 r7_7 = r7 - __rcr(r2, 1, C)
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00009A95_thunk_SSIDataPut:
	SSIDataPut()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:<invalid>
// Terminates process

SSIIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SSIDataPut()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SSIDataPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

SSIDataPut_entry:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00009A99:
	branch Z l00009A9D
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A99_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A9D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00002CF1



void SSIDataNonBlockingPut(word32 r0, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC r0 r3 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SSIDataNonBlockingPut_entry:
// DataOut: r0 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009AA9:
	branch Z l00009AAD
// DataOut: r0 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009AA9_1:
	byte NZCV_40 = cond(0xA0000001 - r0 - C)
	Z = NZCV_40 (alias)
	ZC = NZCV_40 (alias)
// DataOut: r0 r3 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009AAD:
	branch ZC l00009AB1
// DataOut: r0 r3 r5 r6 r7 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid>

l00009AAD_1:
	Z = cond(r3 << 20) (alias)
// DataOut: r0 r5 r6 r7 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid>

l00009AB1:
	branch Z l00009AB5
// DataOut: r0 r5 r6 r7 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid>

l00009AB1_1:
	Mem27[r0 + -8:word32] = r5
	Mem28[r0 + -4:word32] = r6
	Mem30[r0:word32] = r8
// DataOut: r6 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid>

l00009AB5:
	branch Z l00009AB5_thunk_SSIDataGet
// DataOut: r6 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid> r0:r0 - 12

l00009AB5_thunk_SSIDataGet:
	SSIDataGet()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:r0 - 12
// Terminates process

l00009AB5_1:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:<invalid> r0:r0 - 12

l00009AB5_thunk_SSIDataGet:
	SSIDataGet()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:r0 - 12 r7:r7 - (r6 >> 32)
// Terminates process

SSIDataNonBlockingPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SSIDataGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SSIDataGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

SSIDataGet_entry:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00009AB9:
	branch Z l00009ABD
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009AB9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009ABD:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00002CF1



void SSIDataNonBlockingGet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp pc r0 r1 r2 r6 r7
// Preserved: sp
SSIDataNonBlockingGet_entry:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009AC9:
	branch Z l00009ACD
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009AC9_1:
	r0 = r0 + 872
	r1 = (word32) Mem0[r0:byte]
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009ACD:
	branch ZC l00009AD1
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:r0 + 872 r1:<invalid>

l00009ACD_1:
	r1 = 0x000000C0
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:r0 + 872 r1:<invalid>

l00009AD1:
	branch Z l00009AD5
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:r0 + 872 r1:<invalid>

l00009AD1_1:
	word32 sp_46
	byte ZC_50
	call fn0080A079 (retsize: 0;)
		uses: fp,ip,lr,pc,r0_6,r1_8,r2,r3,r4,r5,r6,r7,r8,r9,sp_1,spsr,V,Z,ZC
		defs: fp_60,ip_61,lr_62,pc_63,r0_49,r1_48,r2_53,r3_54,r4_55,r5_56,r6_52,r7_57,r8_58,r9_59,sp_46,spsr_64,V_51,Z_47,ZC_50
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:r0 + 872 r1:<invalid>

l00009AD5:
	branch V l00009AD9
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:r0 + 872 r1:<invalid>

l00009AD5_1:
	r1 = r6 - __ror(r0, 16)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:r0 + 872 r1:<invalid>

l00009AD9:
	branch Z l00009AD9_thunk_SysCtlSRAMSizeGet
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:r0 + 872 r1:<invalid>

l00009AD9_thunk_SysCtlSRAMSizeGet:
	SysCtlSRAMSizeGet(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 + 872 r1:<invalid>

l00009AD9_1:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:r0 + 872 r1:<invalid>

l00009AD9_thunk_SysCtlSRAMSizeGet:
	SysCtlSRAMSizeGet(0x00000047, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000047 r1:<invalid>

SSIDataNonBlockingGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r2:<invalid> r6:<invalid> pc:<invalid> r7:<invalid> fp:<invalid>



void SysCtlSRAMSizeGet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp pc r0 r1 r2 r6 r7
// Preserved: sp
SysCtlSRAMSizeGet_entry:
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009ADD:
	branch Z l00009AE1
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009ADD_1:
	word32 sp_61
	byte NZCV_67
	call fn0120AC11 (retsize: 0;)
		uses: C,fp,ip,lr,NZCV,pc,r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,sp_1,spsr,Z,ZC
		defs: C_66,fp_78,ip_71,lr_72,NZCV_67,pc_79,r0_63,r1_73,r2_74,r3_75,r4_69,r5_65,r6_70,r7_68,r8_76,r9_77,sp_61,spsr_80,Z_62,ZC_64
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009AE1:
	branch Z l00009AE5
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009AE1_1:
	r0 = ~0x00000068
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009AE5:
	branch ZC l00009AE9
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~0x00000068
// LocalsOut: fp(32)

l00009AE5_1:
	r0 = (r0 >> 32) - r5 - C
	Z = cond(r0) (alias)
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:~0x00000068
// LocalsOut: fp(32)

l00009AE9:
	branch Z l00009AED
// DataOut: fp ip lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>
// LocalsOut: fp(32)

l00009AE9_1:
	Mem49[r7:word32] = r4
	Mem50[r7 + 4:word32] = r5
	Mem51[r7 + 8:word32] = r6
	Mem52[r7 + 12:word32] = ip
	Mem53[r7 + 16:word32] = fp
	Mem54[r7 + 20:word32] = lr
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l00009AED:
	branch Z l00009AF1
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l00009AED_1:
	r0 = r0 - __ror(r0, 31)
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l00009AF1:
	branch Z l00009AF1_thunk_SysCtlFlashSizeGet
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l00009AF1_thunk_SysCtlFlashSizeGet:
	SysCtlFlashSizeGet(r0, r1, r2, r3, r5, r6, r7, r8, r9, fp, ip, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00009AF1_1:
// DataOut:
// DataOut (flags): N
// SymbolicIn: sp:fp r0:<invalid>

l00009AF1_thunk_fn00000FFF:
	fn00000FFF()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>
// Terminates process

SysCtlSRAMSizeGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r2:<invalid> r6:<invalid> pc:<invalid> r7:<invalid> fp:<invalid>



void SysCtlFlashSizeGet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp pc r0 r1 r2 r6 r7
// Preserved: sp
SysCtlFlashSizeGet_entry:
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009AF5:
	branch Z l00009AF9
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009AF5_1:
	word32 sp_58
	byte NZCV_64
	call fn0120AC29 (retsize: 0;)
		uses: C,fp,ip,lr,NZCV,NZV,pc,r0,r1,r2,r3,r5,r6,r7,r8,r9,sp_1,spsr,Z
		defs: C_63,fp_74,ip_67,lr_68,NZCV_64,NZV_60,pc_75,r0_61,r1_69,r2_70,r3_71,r5_62,r6_66,r7_65,r8_72,r9_73,sp_58,spsr_76,Z_59
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009AF9:
	branch NZV l00009AFD
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009AF9_1:
	r0 = ~0x00000068
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009AFD:
	branch Z l00009B01
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:~0x00000068
// LocalsOut: fp(32)

l00009AFD_1:
	r0 = (r0 >> 32) - r5 - C
	Z = cond(r0) (alias)
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZV
// SymbolicIn: sp:fp r0:~0x00000068
// LocalsOut: fp(32)

l00009B01:
	branch Z l00009B05
// DataOut: fp ip lr pc r0 r1 r2 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZV
// SymbolicIn: sp:fp r0:<invalid>
// LocalsOut: fp(32)

l00009B01_1:
	Mem47[r7:word32] = r5
	Mem48[r7 + 4:word32] = r6
	Mem49[r7 + 8:word32] = ip
	Mem50[r7 + 12:word32] = fp
	Mem51[r7 + 16:word32] = lr
// DataOut: fp pc r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): ZV
// SymbolicIn: sp:fp r0:<invalid>

l00009B05:
	branch Z l00009B09
// DataOut: fp pc r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): ZV
// SymbolicIn: sp:fp r0:<invalid>

l00009B05_1:
	r0 = r0 - __ror(r0, 31)
// DataOut: fp pc r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): ZV
// SymbolicIn: sp:fp r0:<invalid>

l00009B09:
	branch Z l00009B09_thunk_SysCtlPinPresent
// DataOut: fp pc r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): ZV
// SymbolicIn: sp:fp r0:<invalid>

l00009B09_thunk_SysCtlPinPresent:
	SysCtlPinPresent(r0, r1, r2, r3, r5, r7, r8, r9, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00009B09_1:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid>

l00009B09_thunk_fn00007FF8:
	fn00007FF8()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>
// Terminates process

SysCtlFlashSizeGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r2:<invalid> r6:<invalid> pc:<invalid> r7:<invalid> fp:<invalid>



void SysCtlPinPresent(word32 r0, word32 r1, word32 r2, word32 r3, word32 r5, word32 r7, word32 r8, word32 r9, word32 fp, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZV fp pc r0 r1 r2 r3 r5 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp pc r0 r1 r2 r6 r7
// Preserved: sp
SysCtlPinPresent_entry:
// DataOut: fp pc r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009B0D:
	branch Z l00009B11
// DataOut: fp pc r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009B0D_1:
	__msr(spsr, 0x00000B4B)
// DataOut: fp pc r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009B11:
	branch Z l00009B15
// DataOut: fp pc r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009B11_1:
	r1 = r2 >> 8
	Z = cond(r2 >> 8) (alias)
// DataOut: fp pc r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009B15:
	branch V l00009B19
// DataOut: fp pc r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:r2 >> 8

l00009B15_1:
	r0 = r0 ^ r0 >> 32
// DataOut: fp pc r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:r2 >> 8

l00009B19:
	branch Z l00009B1D
// DataOut: fp pc r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:r2 >> 8 r0:r0 ^ r0 >> 32

l00009B19_1:
	r0 = Mem0[pc:word32]
	r1 = Mem0[pc + 4:word32]
	r2 = Mem0[pc + 8:word32]
// DataOut: fp r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:r2 >> 8 r0:r0 ^ r0 >> 32

l00009B1D:
	branch Z l00009B1D_thunk_SysCtlPeripheralPresent
// DataOut: fp r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r2:<invalid> r6:<invalid> pc:pc + 16

l00009B1D_thunk_SysCtlPeripheralPresent:
	SysCtlPeripheralPresent(r0, r1, r2, r3, r5, r7, r8, r9, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r2:<invalid> r6:<invalid> pc:pc + 16

l00009B1D_1:
	Mem19[r0 - 4064:byte] = (byte) r0
// DataOut: fp r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r2:<invalid> r6:<invalid> pc:pc + 16

l00009B1D_thunk_SysCtlPeripheralPresent:
	SysCtlPeripheralPresent(r0, r1, r2, r3, r5, r7, r8, r9, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r2:<invalid> r6:<invalid> pc:pc + 16

SysCtlPinPresent_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r2:<invalid> r6:<invalid> pc:pc + 16 r7:<invalid> fp:<invalid>



void SysCtlPeripheralPresent(word32 r0, word32 r1, word32 r2, word32 r3, word32 r5, word32 r7, word32 r8, word32 r9, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC fp r0 r1 r2 r3 r5 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp r0 r1 r2 r7
// Preserved: sp
SysCtlPeripheralPresent_entry:
// DataOut: fp r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009B21:
	branch N l00009B25
// DataOut: fp r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009B21_1:
	r0 = 0x0000F24B
// DataOut: fp r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009B25:
	branch C l00009B29
// DataOut: fp r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009B25_1:
	r0 = 0x0000F273
	r2 = (word32) Mem0[0x0000F24B:int16]
// DataOut: fp r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009B29:
	branch Z l00009B2D
// DataOut: fp r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid>

l00009B29_1:
	word32 sp_43
	byte C_46
	call fn01025EF1 (retsize: 0;)
		uses: C,fp,N,r0_8,r1,r2_7,r3,r5,r7,r8,r9,sp_1,spsr,Z
		defs: C_46,fp_55,N_44,r0_45,r1_49,r2_47,r3_52,r5_51,r7_50,r8_53,r9_54,sp_43,spsr_56,Z_48
// DataOut: fp r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid>

l00009B2D:
	branch Z l00009B31
// DataOut: fp r0 r1 r2 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid>

l00009B2D_1:
	Mem41[r2:byte] = (byte) r1
// DataOut: fp r0 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid>

l00009B31:
	branch Z l00009B35
// DataOut: fp r0 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid>

l00009B31_1:
	Mem39[r0:word16] = (uint16) r0
	r0 = r0 - 31
// DataOut: fp r0 r3 r5 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid>

l00009B35:
	branch N l00009B39
// DataOut: fp r0 r3 r5 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid>

l00009B35_1:
	Mem37[r7:byte] = (byte) r7
// DataOut: fp r0 r3 r5 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid>

l00009B39:
	branch Z l00009B39_thunk_SysCtlPeripheralReset
// DataOut: fp r0 r3 r5 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 32

l00009B39_thunk_SysCtlPeripheralReset:
	SysCtlPeripheralReset(r0, r3, r8, r9, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 32

l00009B39_1:
	word32 r0_36 = r0 & r5 >> 1
// DataOut: fp r0 r3 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 32

l00009B39_thunk_SysCtlPeripheralReset:
	SysCtlPeripheralReset(r0_36, r3, r8, r9, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 32

SysCtlPeripheralPresent_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 32 r1:0x0000000F fp:<invalid>



void SysCtlPeripheralReset(word32 r0, word32 r3, word32 r8, word32 r9, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp r0 r3 r8 r9 spsr
// LiveOut:
// Trashed: NZCV fp r0 r1 r2
// Preserved: sp
SysCtlPeripheralReset_entry:
// DataOut: fp r0 r3 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009B3D:
	branch Z l00009B41
// DataOut: fp r0 r3 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009B3D_1:
// DataOut: fp r0 r3 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009B41:
	branch Z l00009B45
// DataOut: fp r0 r3 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:fp - 0x00000210

l00009B41_1:
// DataOut: fp r0 r3 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:fp - 0x00000210

l00009B45:
	branch Z l00009B45_then
	word32 sp_5
	word32 fp_8
	word32 r1_9
	byte V_10
	word32 r2_11
	word32 r9_12
	bool C_13
	byte NZCV_14
	word32 spsr_16
	byte NZC_17
	word32 r8_18
	word32 r3_19
	byte ZC_15
	byte Z_23
	word32 r0_32
	call fn000EA6F9 (retsize: 0;)
		uses: r0_4,sp_1,Z
		defs: C_13,fp_8,NZC_17,NZCV_14,r0_7,r1_9,r2_11,r3_19,r8_18,r9_12,sp_5,spsr_16,V_10,Z_6,ZC_15
	return
// DataOut: fp r0 r3 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:fp - 0x00000210 r1:0x0000000F

l00009B45_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:fp - 0x00000210 r1:0x0000000F

l00009B49:
	branch V_10 l00009B4D
// DataOut: fp r0 r3 r8 r9 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:fp - 0x00000210 r1:0x0000000F

l00009B49_1:
	byte NZCV_52 = cond(__rcr(r9_12, 1, C_13) - r0_32 - C_13)
	Z_23 = NZCV_52 (alias)
	ZC_15 = NZCV_52 (alias)
// DataOut: fp r0 r3 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:fp - 0x00000210 r1:0x0000000F

l00009B4D:
	branch ZC_15 l00009B51
// DataOut: fp r0 r3 r8 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:fp - 0x00000210 r1:0x0000000F r2:<invalid>

l00009B4D_1:
	__msr(spsr_16, 0x00000443)
// DataOut: fp r0 r3 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:fp - 0x00000210 r1:0x0000000F r2:<invalid>

l00009B51:
	branch Z_23 l00009B55
// DataOut: fp r0 r3 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:fp - 0x00000210 r1:0x0000000F r2:<invalid>

l00009B51_1:
// DataOut: fp r0 r3 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:fp - 0x00000210 r1:0x0000000F r2:<invalid>

l00009B55:
	branch Z_23 l00009B59
// DataOut: fp r0 r3 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:fp - 0x00000210 r1:0x0000000F r2:<invalid>

l00009B55_1:
	r0_32 = __ror(r0_32, 2) | 0x0000000F
	Z_23 = cond(r0_32) (alias)
// DataOut: fp r0 r3 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:fp - 0x00000210 r1:0x0000000F r2:<invalid>

l00009B59:
	branch Z_23 l00009B5D
// DataOut: fp r0 r3 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> r1:0x0000000F r2:<invalid>

l00009B59_1:
	Mem43[fp_8 - 3995:word32] = r0_32
// DataOut: fp r3 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> r1:0x0000000F r2:<invalid>

l00009B5D:
	branch Z_23 l00009B61
// DataOut: fp r3 r8
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> r1:0x0000000F r2:<invalid> fp:fp - 3995

l00009B5D_1:
// DataOut: r3
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:<invalid> r1:0x0000000F r2:<invalid> fp:fp - 3995

l00009B61:
	branch Z_23 l00009B65
// DataOut: r3
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:0x0000000F r2:<invalid> fp:fp - 3995

l00009B61_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:0x0000000F r2:<invalid> fp:fp - 3995

l00009B65:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:0x0000000F r2:<invalid> fp:fp - 3995

SysCtlPeripheralReset_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:0x0000000F r2:<invalid> fp:fp - 3995



void SysCtlPeripheralEnable(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// Preserved: sp
SysCtlPeripheralEnable_entry:
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009B7D:
	branch Z l00009B81
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009B7D_1:
	r0 = 0x0000F24B
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009B81:
	branch NZV l00009B85
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009B81_1:
	word32 sp_71
	byte NZV_74
	word32 r2_76
	byte NZCV_79
	call fn000EA735 (retsize: 0;)
		uses: C,fp,ip,N,NZCV,NZV,pc,r0_4,r1,r10,r2,r3,r4,r5,r6,r7,r8,r9,sp_1,spsr,V,Z
		defs: C_78,fp_90,ip_91,N_83,NZCV_79,NZV_74,pc_84,r0_73,r1_80,r10_89,r2_76,r3_82,r4_85,r5_86,r6_87,r7_88,r8_81,r9_77,sp_71,spsr_92,V_75,Z_72
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009B85:
	branch V l00009B89
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009B85_1:
	byte NZCV_65 = cond(__rcr(r9, 1, C) - 0x0000F24B - C)
	Z = NZCV_65 (alias)
	V = NZCV_65 (alias)
	N = NZCV_65 (alias)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009B89:
	branch Z l00009B8D
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009B89_1:
	r1 = 0x00000000 - r8
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009B8D:
	branch V l00009B91
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid> r1:0x00000000 - r8

l00009B8D_1:
	r1 = (r3 >> 16) - 0x0000F24B
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid> r1:0x00000000 - r8

l00009B91:
	branch N l00009B95
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid> r1:<invalid>

l00009B91_1:
	pc = pc + 71
	r0 = Mem0[0x00009BE0:word32]
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid> r1:<invalid>

l00009B95:
	branch Z l00009B95_thunk_SysCtlPeripheralDisable
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid> pc:pc + 71

l00009B95_thunk_SysCtlPeripheralDisable:
	SysCtlPeripheralDisable(r0, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid> pc:pc + 71

l00009B95_1:
	Mem57[r0 - 165:word32] = r0
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid> pc:pc + 71

l00009B95_thunk_SysCtlPeripheralDisable:
	SysCtlPeripheralDisable(r0, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid> pc:pc + 71

SysCtlPeripheralEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid> pc:<invalid> r7:<invalid> r8:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r10:<invalid> lr:<invalid> ip:<invalid>



void SysCtlPeripheralDisable(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// Preserved: sp
SysCtlPeripheralDisable_entry:
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009B99:
	branch Z l00009B9D
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009B99_1:
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009B9D:
	branch NZV l00009B9D_then
	word32 sp_4
	byte NZV_7
	byte V_8
	word32 r2_9
	word32 r9_10
	byte NZCV_12
	word32 spsr_13
	word32 r10_14
	word32 r1_17
	word32 r3_18
	word32 r4_19
	word32 r5_20
	word32 r6_21
	word32 r8_22
	word32 fp_23
	word32 ip_24
	word32 pc_25
	bool C_11
	byte Z_29
	byte N_15
	word32 r0_33
	word32 r7_16
	call fn000EA751 (retsize: 0;)
		uses: NZV,sp_1,Z
		defs: C_11,fp_23,ip_24,N_15,NZCV_12,NZV_7,pc_25,r0_6,r1_17,r10_14,r2_9,r3_18,r4_19,r5_20,r6_21,r7_16,r8_22,r9_10,sp_4,spsr_13,V_8,Z_5
	return
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009B9D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x0000F24B

l00009BA1:
	branch V_8 l00009BA5
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009BA1_1:
	byte NZCV_40 = cond(__rcr(r9_10, 1, C_11) - 0x0000F24B - C_11)
	C_11 = (bool) NZCV_40 (alias)
	Z_29 = NZCV_40 (alias)
	N_15 = NZCV_40 (alias)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009BA5:
	branch C_11 l00009BA9
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009BA5_1:
	__msr(spsr_13, 0x00000340)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009BA9:
	branch Z_29 l00009BAD
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009BA9_1:
	r0_33 = __ror(r10_14, 1) & 0x0000F24B
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009BAD:
	branch N_15 l00009BB1
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid>

l00009BAD_1:
	Mem36[r7_16:byte] = (byte) r7_16
	r7_16 = r7_16 - 96
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid>

l00009BB1:
	branch Z_29 l00009BB1_thunk_SysCtlPeripheralSleepEnable
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 96

l00009BB1_thunk_SysCtlPeripheralSleepEnable:
	SysCtlPeripheralSleepEnable(r0_33, r1_17, r3_18, r4_19, r5_20, r6_21, r7_16, r8_22, r9_10, r10_14, fp_23, ip_24, pc_25, spsr_13)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 96

l00009BB1_1:
	Mem35[r0_33 - 165:word32] = r0_33
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 96

l00009BB1_thunk_SysCtlPeripheralSleepEnable:
	SysCtlPeripheralSleepEnable(r0_33, r1_17, r3_18, r4_19, r5_20, r6_21, r7_16, r8_22, r9_10, r10_14, fp_23, ip_24, pc_25, spsr_13)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 96

SysCtlPeripheralDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:<invalid> r1:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r10:<invalid> lr:<invalid> ip:<invalid>



void SysCtlPeripheralSleepEnable(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// Preserved: sp
SysCtlPeripheralSleepEnable_entry:
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009BB5:
	branch Z l00009BB9
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009BB5_1:
	r0 = 0x0000F24B
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009BB9:
	branch ZC l00009BBD
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009BB9_1:
	word32 sp_71
	byte ZC_74
	word32 r2_76
	byte NZCV_79
	call fn000EA76D (retsize: 0;)
		uses: C,fp,ip,N,NZCV,pc,r0_4,r1,r10,r2,r3,r4,r5,r6,r7,r8,r9,sp_1,spsr,V,Z,ZC
		defs: C_78,fp_90,ip_91,N_83,NZCV_79,pc_84,r0_73,r1_80,r10_77,r2_76,r3_82,r4_85,r5_86,r6_87,r7_88,r8_81,r9_89,sp_71,spsr_92,V_75,Z_72,ZC_74
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009BBD:
	branch V l00009BC1
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009BBD_1:
	byte NZCV_65 = cond(__rcr(r10, 1, C) - 0x0000F24B - C)
	Z = NZCV_65 (alias)
	V = NZCV_65 (alias)
	N = NZCV_65 (alias)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009BC1:
	branch Z l00009BC5
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009BC1_1:
	r1 = 0x00000000 - r8
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009BC5:
	branch V l00009BC9
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid> r1:0x00000000 - r8

l00009BC5_1:
	r1 = (r3 >> 16) - 0x0000F24B
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid> r1:0x00000000 - r8

l00009BC9:
	branch N l00009BCD
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid> r1:<invalid>

l00009BC9_1:
	pc = pc + 71
	r0 = Mem0[0x00009C18:word32]
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid> r1:<invalid>

l00009BCD:
	branch Z l00009BCD_thunk_SysCtlPeripheralSleepDisable
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid> pc:pc + 71

l00009BCD_thunk_SysCtlPeripheralSleepDisable:
	SysCtlPeripheralSleepDisable(r0, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid> pc:pc + 71

l00009BCD_1:
	Mem57[r0 - 165:word32] = r0
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid> pc:pc + 71

l00009BCD_thunk_SysCtlPeripheralSleepDisable:
	SysCtlPeripheralSleepDisable(r0, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid> pc:pc + 71

SysCtlPeripheralSleepEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid> pc:<invalid> r7:<invalid> r8:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r10:<invalid> lr:<invalid> ip:<invalid>



void SysCtlPeripheralSleepDisable(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// Preserved: sp
SysCtlPeripheralSleepDisable_entry:
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009BD1:
	branch Z l00009BD5
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009BD1_1:
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009BD5:
	branch ZC l00009BD5_then
	word32 sp_4
	byte ZC_7
	byte V_8
	word32 r2_9
	word32 r10_10
	byte NZCV_12
	word32 spsr_13
	word32 r1_16
	word32 r3_17
	word32 r4_18
	word32 r5_19
	word32 r6_20
	word32 r8_21
	word32 r9_22
	word32 fp_23
	word32 ip_24
	word32 pc_25
	bool C_11
	byte Z_29
	byte N_14
	word32 r0_33
	word32 r7_15
	call fn000EA789 (retsize: 0;)
		uses: sp_1,Z,ZC
		defs: C_11,fp_23,ip_24,N_14,NZCV_12,pc_25,r0_6,r1_16,r10_10,r2_9,r3_17,r4_18,r5_19,r6_20,r7_15,r8_21,r9_22,sp_4,spsr_13,V_8,Z_5,ZC_7
	return
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009BD5_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x0000F24B

l00009BD9:
	branch V_8 l00009BDD
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009BD9_1:
	byte NZCV_40 = cond(__rcr(r10_10, 1, C_11) - 0x0000F24B - C_11)
	C_11 = (bool) NZCV_40 (alias)
	Z_29 = NZCV_40 (alias)
	N_14 = NZCV_40 (alias)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009BDD:
	branch C_11 l00009BE1
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009BDD_1:
	__msr(spsr_13, 0x00000340)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009BE1:
	branch Z_29 l00009BE5
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009BE1_1:
	r0_33 = __ror(r10_10, 1) & 0x0000F24B
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009BE5:
	branch N_14 l00009BE9
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid>

l00009BE5_1:
	Mem36[r7_15:byte] = (byte) r7_15
	r7_15 = r7_15 - 96
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid>

l00009BE9:
	branch Z_29 l00009BE9_thunk_SysCtlPeripheralDeepSleepEnable
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 96

l00009BE9_thunk_SysCtlPeripheralDeepSleepEnable:
	SysCtlPeripheralDeepSleepEnable(r0_33, r1_16, r3_17, r4_18, r5_19, r6_20, r7_15, r8_21, r9_22, r10_10, fp_23, ip_24, pc_25, spsr_13)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 96

l00009BE9_1:
	Mem35[r0_33 - 165:word32] = r0_33
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 96

l00009BE9_thunk_SysCtlPeripheralDeepSleepEnable:
	SysCtlPeripheralDeepSleepEnable(r0_33, r1_16, r3_17, r4_18, r5_19, r6_20, r7_15, r8_21, r9_22, r10_10, fp_23, ip_24, pc_25, spsr_13)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 96

SysCtlPeripheralSleepDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:<invalid> r1:<invalid> pc:<invalid> r8:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r10:<invalid> lr:<invalid> ip:<invalid>



void SysCtlPeripheralDeepSleepEnable(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// Preserved: sp
SysCtlPeripheralDeepSleepEnable_entry:
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009BED:
	branch Z l00009BF1
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009BED_1:
	r0 = 0x0000F24B
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009BF1:
	branch N l00009BF5
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009BF1_1:
	word32 sp_67
	word32 r2_72
	byte NZCV_75
	call fn000EA7A5 (retsize: 0;)
		uses: C,fp,ip,N,NZCV,pc,r0_4,r1,r10,r2,r3,r4,r5,r6,r7,r8,r9,sp_1,spsr,V,Z
		defs: C_74,fp_73,ip_86,N_70,NZCV_75,pc_79,r0_69,r1_76,r10_85,r2_72,r3_78,r4_80,r5_81,r6_82,r7_83,r8_77,r9_84,sp_67,spsr_87,V_71,Z_68
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009BF5:
	branch V l00009BF9
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009BF5_1:
	byte NZCV_62 = cond(__rcr(fp, 1, C) - 0x0000F24B - C)
	N = NZCV_62 (alias)
	Z = NZCV_62 (alias)
	V = NZCV_62 (alias)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009BF9:
	branch Z l00009BFD
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009BF9_1:
	r1 = 0x00000000 - r8
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009BFD:
	branch V l00009C01
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid> r1:0x00000000 - r8

l00009BFD_1:
	r1 = (r3 >> 16) - 0x0000F24B
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid> r1:0x00000000 - r8

l00009C01:
	branch N l00009C05
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid> r1:<invalid>

l00009C01_1:
	pc = pc + 71
	r0 = Mem0[0x00009C50:word32]
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid> r1:<invalid>

l00009C05:
	branch Z l00009C05_thunk_SysCtlPeripheralDeepSleepDisable
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid> pc:pc + 71

l00009C05_thunk_SysCtlPeripheralDeepSleepDisable:
	SysCtlPeripheralDeepSleepDisable(r0, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid> pc:pc + 71

l00009C05_1:
	Mem54[r0 - 165:word32] = r0
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid> pc:pc + 71

l00009C05_thunk_SysCtlPeripheralDeepSleepDisable:
	SysCtlPeripheralDeepSleepDisable(r0, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid> pc:pc + 71

SysCtlPeripheralDeepSleepEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r1:<invalid> pc:<invalid> r7:<invalid> r8:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r10:<invalid> lr:<invalid> ip:<invalid>



void SysCtlPeripheralDeepSleepDisable(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// Preserved: sp
SysCtlPeripheralDeepSleepDisable_entry:
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C09:
	branch Z l00009C0D
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C09_1:
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C0D:
	branch N l00009C0D_then
	word32 sp_4
	byte V_8
	word32 r2_9
	word32 fp_10
	byte NZCV_12
	word32 spsr_13
	word32 r10_14
	word32 r1_16
	word32 r3_17
	word32 r4_18
	word32 r5_19
	word32 r6_20
	word32 r8_21
	word32 r9_22
	word32 ip_23
	word32 pc_24
	byte N_27
	bool C_11
	byte Z_29
	word32 r0_31
	word32 r7_15
	call fn000EA7C1 (retsize: 0;)
		uses: N,sp_1,Z
		defs: C_11,fp_10,ip_23,N_7,NZCV_12,pc_24,r0_6,r1_16,r10_14,r2_9,r3_17,r4_18,r5_19,r6_20,r7_15,r8_21,r9_22,sp_4,spsr_13,V_8,Z_5
	return
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009C0D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x0000F24B

l00009C11:
	branch V_8 l00009C15
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009C11_1:
	byte NZCV_38 = cond(__rcr(fp_10, 1, C_11) - 0x0000F24B - C_11)
	N_27 = NZCV_38 (alias)
	C_11 = (bool) NZCV_38 (alias)
	Z_29 = NZCV_38 (alias)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B

l00009C15:
	branch C_11 l00009C19
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009C15_1:
	__msr(spsr_13, 0x00000340)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009C19:
	branch Z_29 l00009C1D
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009C19_1:
	r0_31 = __ror(r10_14, 1) & 0x0000F24B
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x0000F24B r2:<invalid>

l00009C1D:
	branch N_27 l00009C21
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid>

l00009C1D_1:
	Mem34[r7_15:byte] = (byte) r7_15
	r7_15 = r7_15 - 96
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid>

l00009C21:
	branch Z_29 l00009C21_thunk_SysCtlPeripheralClockGating
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 96

l00009C21_thunk_SysCtlPeripheralClockGating:
	SysCtlPeripheralClockGating(r0_31, r1_16, r3_17, r4_18, r5_19, r6_20, r7_15, r8_21, r9_22, r10_14, fp_10, ip_23, pc_24, spsr_13)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 96

l00009C21_1:
	Mem33[r0_31 - 165:word32] = r0_31
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 96

l00009C21_thunk_SysCtlPeripheralClockGating:
	SysCtlPeripheralClockGating(r0_31, r1_16, r3_17, r4_18, r5_19, r6_20, r7_15, r8_21, r9_22, r10_14, fp_10, ip_23, pc_24, spsr_13)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:r7 - 96

SysCtlPeripheralDeepSleepDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r7:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r10:<invalid> lr:<invalid> ip:<invalid> pc:<invalid>



void SysCtlPeripheralClockGating(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// Preserved: sp
SysCtlPeripheralClockGating_entry:
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C25:
	branch Z l00009C29
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C25_1:
	Mem59[r8:word32] = r1
	Mem60[r8 + 4:word32] = r3
	Mem61[r8 + 8:word32] = r6
	Mem62[r8 + 12:word32] = r8
	Mem63[r8 + 16:word32] = r9
	Mem64[r8 + 20:word32] = ip
	r8 = r8 + 24
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C29:
	branch Z l00009C2D
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24

l00009C29_1:
	r0 = r0 + 57
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24

l00009C2D:
	branch V l00009C31
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24 r0:r0 + 57 r2:<invalid>

l00009C2D_1:
	r1 = __ror(r3, 6) - r0
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24 r0:r0 + 57 r2:<invalid>

l00009C31:
	branch Z l00009C35
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24 r0:r0 + 57 r2:<invalid> r1:<invalid>

l00009C31_1:
	r4 = (r7 >> 6) - r0 - C
	byte NZCV_50 = cond(r4)
	C = (bool) NZCV_50 (alias)
	Z = NZCV_50 (alias)
	V = NZCV_50 (alias)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24 r0:r0 + 57 r2:<invalid> r1:<invalid>

l00009C35:
	branch V l00009C39
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24 r0:r0 + 57 r2:<invalid> r1:<invalid> r4:<invalid>

l00009C35_1:
	r1 = __ror(r3, 6) - r0
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24 r0:r0 + 57 r2:<invalid> r1:<invalid> r4:<invalid>

l00009C39:
	branch V l00009C3D
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:r8 + 24 r0:r0 + 57 r2:<invalid> r1:<invalid> r4:<invalid>

l00009C39_1:
	r0 = 0x00009C41 + (r7 >> 32) + C
	Z = cond(r0) (alias)
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:r8 + 24 r0:r0 + 57 r2:<invalid> r1:<invalid> r4:<invalid>

l00009C3D:
	branch Z l00009C3D_thunk_SysCtlIntRegister
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:r8 + 24 r0:<invalid> r2:<invalid> r1:<invalid> r4:<invalid>

l00009C3D_thunk_SysCtlIntRegister:
	SysCtlIntRegister(r0, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 24 r0:<invalid> r2:<invalid> r1:<invalid> r4:<invalid>

l00009C3D_1:
	Mem27[r0:word32] = r5
	Mem29[r0 + 4:word32] = r6
	Mem31[r0 + 8:word32] = r7
	Mem32[r0 + 12:word32] = r8
	Mem34[r0 + 16:word32] = r9
	Mem36[r0 + 20:word32] = r10
	Mem38[r0 + 24:word32] = fp
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:r8 + 24 r0:<invalid> r2:<invalid> r1:<invalid> r4:<invalid>

l00009C3D_thunk_SysCtlIntRegister:
	SysCtlIntRegister(r0, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 24 r0:<invalid> r2:<invalid> r1:<invalid> r4:<invalid>

SysCtlPeripheralClockGating_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r10:<invalid> lr:<invalid> ip:<invalid> pc:<invalid>



void SysCtlIntRegister(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip lr pc r0 r1 r10 r2 r4 r5 r6 r7 r8
// Preserved: sp
SysCtlIntRegister_entry:
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C41:
	branch C l00009C45
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C45:
	branch N l00009C49
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C49:
	branch Z l00009C4D
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C4D:
	__syscall(0x00202C40)
	branch Z l00009C51_thunk_SysCtlIntUnregister
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C51_thunk_SysCtlIntUnregister:
	SysCtlIntUnregister(r0, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C51_1:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlIntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r10:<invalid> lr:<invalid> ip:ip + 40 r8:<invalid> pc:<invalid>

l00009C49_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C45_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C41_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SysCtlIntUnregister(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV pc r0 r1 r2 r6 r7 r8
// Preserved: sp
SysCtlIntUnregister_entry:
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C55:
	__syscall(0x00202CB5)
	branch NZV l00009C5D
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C5D:
	branch C l00009C61
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C61:
	branch V l00009C65
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C65:
	branch Z l00009C65_thunk_SysCtlIntEnable
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C65_thunk_SysCtlIntEnable:
	SysCtlIntEnable(r0, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C65_1:
	word32 r0_12 = 0x00009D29 + C
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009C65_thunk_SysCtlIntEnable:
	SysCtlIntEnable(r0_12, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

SysCtlIntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r8:<invalid> r1:<invalid> pc:<invalid> r7:<invalid> r2:<invalid> r6:<invalid>

l00009C61_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C5D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C59_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SysCtlIntEnable(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZV fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV pc r0 r1 r2 r6 r7 r8
// Preserved: sp
SysCtlIntEnable_entry:
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C69:
	branch Z l00009C6D
// DataOut: fp ip pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C69_1:
	Mem29[r8:word32] = r1
	Mem30[r8 + 4:word32] = r3
	Mem31[r8 + 8:word32] = r6
	Mem32[r8 + 12:word32] = r8
	Mem33[r8 + 16:word32] = r9
	Mem35[r8 + 20:word32] = ip
	r8 = r8 + 24
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C6D:
	branch V l00009C71
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:r8 + 24

l00009C6D_1:
	r1 = (r3 >> 32) - r0
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:r8 + 24

l00009C71:
	branch N l00009C75
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:r8 + 24 r1:(r3 >> 32) - r0

l00009C71_1:
	pc = pc + 71
	r0 = Mem0[0x00009CC0:word32]
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:r8 + 24 r1:(r3 >> 32) - r0

l00009C75:
	branch Z l00009C75_thunk_SysCtlIntDisable
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:r8 + 24 r1:(r3 >> 32) - r0 pc:pc + 71 r0:<invalid>

l00009C75_thunk_SysCtlIntDisable:
	SysCtlIntDisable(r0, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 24 r1:(r3 >> 32) - r0 pc:pc + 71 r0:<invalid>

l00009C75_1:
	word32 r0_14 = r0 - 0x00000380
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:r8 + 24 r1:(r3 >> 32) - r0 pc:pc + 71 r0:<invalid>

l00009C75_thunk_SysCtlIntDisable:
	SysCtlIntDisable(r0_14, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 24 r1:(r3 >> 32) - r0 pc:pc + 71 r0:<invalid>

SysCtlIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 24 r1:<invalid> pc:<invalid> r0:<invalid> r7:<invalid> r2:<invalid> r6:<invalid>



void SysCtlIntDisable(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV pc r0 r1 r2 r6 r7
// Preserved: sp
SysCtlIntDisable_entry:
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C79:
	branch C l00009C7D
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009C79_1:
	__msr(spsr, 0x0000034A)
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009C7D:
	branch Z l00009C81
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009C7D_1:
	r0 = r0 & __ror(r10, 1)
	r0_r0 = SEQ(r0, r0) (alias)
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l00009C81:
	branch N l00009C85
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid>

l00009C81_1:
	Mem26[r7:byte] = (byte) r7
	r7 = r7 - 96
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid>

l00009C85:
	branch Z l00009C85_thunk_SysCtlIntClear
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid> r7:r7 - 96

l00009C85_thunk_SysCtlIntClear:
	SysCtlIntClear(r0, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r7:r7 - 96

l00009C85_1:
	word32 r0_14 = (word32) ((int16) (r0 >> 16) *s (int16) (0x00009C8D >> 16) + r0_r0)
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid> r7:r7 - 96

l00009C85_thunk_SysCtlIntClear:
	SysCtlIntClear(r0_14, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r7:r7 - 96 Sequence r0:r0:<invalid>

SysCtlIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r7:<invalid> Sequence r0:r0:<invalid> r1:<invalid> r2:<invalid> r6:<invalid> pc:<invalid>



void SysCtlIntClear(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZV fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV pc r0 r1 r2 r6 r7
// Preserved: sp
SysCtlIntClear_entry:
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C89:
	branch V l00009C8D
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C89_1:
	r1 = (fp >> 16) - r0
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C8D:
	branch N l00009C91
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r0

l00009C8D_1:
	r0 = Mem0[pc:word32]
	r1 = Mem0[pc + 4:word32]
	r6 = Mem0[pc + 12:word32]
	pc = pc + 16
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r0

l00009C91:
	branch Z l00009C91_thunk_SysCtlIntStatus
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r2:<invalid> r6:<invalid> pc:pc + 16

l00009C91_thunk_SysCtlIntStatus:
	SysCtlIntStatus(r0, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r2:<invalid> r6:<invalid> pc:pc + 16

l00009C91_1:
	word32 r0_17 = r0 - __ror(r0, 31)
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r2:<invalid> r6:<invalid> pc:pc + 16

l00009C91_thunk_SysCtlIntStatus:
	SysCtlIntStatus(r0_17, r1, r3, r4, r5, r6, r7, r8, r9, r10, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r2:<invalid> r6:<invalid> pc:pc + 16

SysCtlIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r2:<invalid> r6:<invalid> pc:<invalid> r7:<invalid>



void SysCtlIntStatus(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV pc r0 r1 r7
// Preserved: sp
SysCtlIntStatus_entry:
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C95:
	branch Z l00009C99
// DataOut: fp pc r0 r1 r10 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C95_1:
	Mem49[fp:word32] = r0
	Mem50[fp + 4:word32] = r3
	Mem52[fp + 8:word32] = r4
	Mem53[fp + 12:word32] = r5
	Mem54[fp + 16:word32] = r7
	Mem55[fp + 20:word32] = r8
	Mem56[fp + 24:word32] = r9
// DataOut: fp pc r0 r1 r10 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C99:
	branch Z l00009C9D
// DataOut: fp pc r0 r1 r10 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C99_1:
	r7 = r7 - 0x00000068
// DataOut: fp pc r0 r1 r10 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009C9D:
	branch V l00009CA1
// DataOut: fp pc r0 r1 r10 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 0x00000068

l00009C9D_1:
	r1 = (fp >> 16) - r8
// DataOut: fp pc r0 r1 r10 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 0x00000068

l00009CA1:
	branch N l00009CA5
// DataOut: fp pc r0 r1 r10 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 0x00000068 r1:(fp >> 16) - r8

l00009CA1_1:
	r0 = 0x00009CA9 + (r7 >> 32) + C
	byte NZCV_42 = cond(r0)
	r0_r0 = SEQ(r0, r0) (alias)
	N = NZCV_42 (alias)
	Z = NZCV_42 (alias)
// DataOut: fp pc r0 r1 r10 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r7:r7 - 0x00000068 r1:(fp >> 16) - r8

l00009CA5:
	branch N l00009CA9
// DataOut: fp pc r0 r1 r10 r3 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r7:r7 - 0x00000068 r1:(fp >> 16) - r8 r0:<invalid>

l00009CA5_1:
	Mem31[r0:word32] = r5
	Mem33[r0 + 4:word32] = r6
	Mem34[r0 + 8:word32] = r7
	Mem35[r0 + 12:word32] = r8
	Mem37[r0 + 16:word32] = r9
	Mem38[r0 + 20:word32] = r10
	Mem39[r0 + 24:word32] = fp
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r7:r7 - 0x00000068 r1:(fp >> 16) - r8 r0:<invalid>

l00009CA9:
	branch Z l00009CA9_thunk_SysCtlLDOSet
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r7:r7 - 0x00000068 r1:(fp >> 16) - r8 r0:<invalid>

l00009CA9_thunk_SysCtlLDOSet:
	SysCtlLDOSet(r0, r1, r3, r5, r7, r8, r10, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 - 0x00000068 r1:(fp >> 16) - r8 r0:<invalid>

l00009CA9_1:
	word32 r0_23 = (word32) ((int16) (r0 >> 16) *s (int16) (0x00009CB1 >> 16) + r0_r0)
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r7:r7 - 0x00000068 r1:(fp >> 16) - r8 r0:<invalid>

l00009CA9_thunk_SysCtlLDOSet:
	SysCtlLDOSet(r0_23, r1, r3, r5, r7, r8, r10, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 - 0x00000068 r1:(fp >> 16) - r8 r0:<invalid> Sequence r0:r0:<invalid>

SysCtlIntStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 - 0x00000068 r1:<invalid> r0:<invalid> pc:<invalid> Sequence r0:r0:<invalid>



void SysCtlLDOSet(word32 r0, word32 r1, word32 r3, word32 r5, word32 r7, word32 r8, word32 r10, word32 fp, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// LiveOut:
// Trashed: NZCV pc r0 r1
// Preserved: sp
SysCtlLDOSet_entry:
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009CAD:
	branch V l00009CB1
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009CAD_1:
	r1 = (fp >> 16) - r0
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009CB1:
	branch C l00009CB5
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r0

l00009CB1_1:
	word32 v9_25 = Mem0[0x00009D00:word32]
	pc = pc + 71
	r0 = v9_25
	r0_r0 = SEQ(v9_25, v9_25) (alias)
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r0

l00009CB5:
	branch Z l00009CB5_thunk_SysCtlLDOGet
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r0 pc:pc + 71 r0:<invalid>

l00009CB5_thunk_SysCtlLDOGet:
	SysCtlLDOGet(r0, r1, r3, r5, r7, r8, r10, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r0 pc:pc + 71 r0:<invalid>

l00009CB5_1:
	word32 r0_16 = (word32) ((int16) (r0 >> 16) *s (int16) (0x00009CBD >> 16) + r0_r0)
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r0 pc:pc + 71 r0:<invalid>

l00009CB5_thunk_SysCtlLDOGet:
	SysCtlLDOGet(r0_16, r1, r3, r5, r7, r8, r10, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r0 pc:pc + 71 r0:<invalid> Sequence r0:r0:<invalid>

SysCtlLDOSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> pc:<invalid> r0:<invalid> Sequence r0:r0:<invalid>



void SysCtlLDOGet(word32 r0, word32 r1, word32 r3, word32 r5, word32 r7, word32 r8, word32 r10, word32 fp, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// LiveOut:
// Trashed: NZCV pc r0 r1
// Preserved: sp
SysCtlLDOGet_entry:
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009CB9:
	branch V l00009CBD
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009CB9_1:
	r1 = (fp >> 16) - r8
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009CBD:
	branch C l00009CC1
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8

l00009CBD_1:
	word32 v10_25 = Mem0[0x00009D0C:word32]
	pc = pc + 71
	r0 = v10_25
	r0_r0 = SEQ(v10_25, v10_25) (alias)
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8

l00009CC1:
	branch Z l00009CC1_thunk_SysCtlLDOConfigSet
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 pc:pc + 71 r0:<invalid>

l00009CC1_thunk_SysCtlLDOConfigSet:
	SysCtlLDOConfigSet(r0, r1, r3, r5, r7, r8, r10, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 pc:pc + 71 r0:<invalid>

l00009CC1_1:
	word32 r0_16 = (word32) ((int16) (r0 >> 16) *s (int16) (0x00009CC9 >> 16) + r0_r0)
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 pc:pc + 71 r0:<invalid>

l00009CC1_thunk_SysCtlLDOConfigSet:
	SysCtlLDOConfigSet(r0_16, r1, r3, r5, r7, r8, r10, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 pc:pc + 71 r0:<invalid> Sequence r0:r0:<invalid>

SysCtlLDOGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> pc:pc + 71 r0:<invalid> Sequence r0:r0:<invalid>



void SysCtlLDOConfigSet(word32 r0, word32 r1, word32 r3, word32 r5, word32 r7, word32 r8, word32 r10, word32 fp, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// LiveOut:
// Trashed: NZCV r0 r1
// Preserved: sp
SysCtlLDOConfigSet_entry:
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009CC5:
	branch V l00009CC9
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009CC5_1:
	r1 = (fp >> 16) - r0
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009CC9:
	branch V l00009CCD
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:(fp >> 16) - r0

l00009CC9_1:
	r0 = 0x00009CD1 + (r7 >> 32) + C
	r0_r0 = SEQ(r0, r0) (alias)
	Z = cond(r0) (alias)
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:(fp >> 16) - r0

l00009CCD:
	branch Z l00009CCD_thunk_SysCtlReset
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:(fp >> 16) - r0 r0:<invalid>

l00009CCD_thunk_SysCtlReset:
	SysCtlReset(r0, r1, r3, r5, r7, r8, r10, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r0 r0:<invalid>

l00009CCD_1:
	word32 r0_19 = (word32) ((int16) (r1 >> 16) *s (int16) (0x00009CD5 >> 16) + r0_r0)
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp r1:(fp >> 16) - r0 r0:<invalid>

l00009CCD_thunk_SysCtlReset:
	SysCtlReset(r0_19, r1, r3, r5, r7, r8, r10, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r0 r0:<invalid> Sequence r0:r0:<invalid>

SysCtlLDOConfigSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r0 r0:<invalid> Sequence r0:r0:<invalid>



void SysCtlReset(word32 r0, word32 r1, word32 r3, word32 r5, word32 r7, word32 r8, word32 r10, word32 fp, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// LiveOut:
// Trashed: r0
// Preserved: sp
SysCtlReset_entry:
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00009CD1:
	branch Z l00009CD1_then
	word32 sp_3
	byte Z_4
	word32 pc_6
	word32 r5_7
	word32 r1_8
	word32 r3_9
	word32 r7_10
	word32 r8_11
	word32 r10_12
	word32 fp_13
	word32 spsr_14
	word32 r0_15
	call fn0128A605 (retsize: 0;)
		uses: sp_1,Z
		defs: fp_13,pc_6,r0_5,r1_8,r10_12,r3_9,r5_7,r7_10,r8_11,sp_3,spsr_14,Z_4
	return
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00009CD1_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CD5:
	branch Z_4 l00009CD9
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00009CD9:
	branch Z_4 l00009CDD
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00009CD9_1:
	Mem18[r0_15:byte] = (byte) r0_15
	r0_15 = r0_15 + 237
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00009CDD:
	branch Z_4 l00009CDD_thunk_SysCtlSleep
// DataOut: fp pc r0 r1 r10 r3 r5 r7 r8 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:r0 + 237

l00009CDD_thunk_SysCtlSleep:
	SysCtlSleep(r0_15, r1_8, r3_9, r7_10, r8_11, r10_12, fp_13, pc_6, spsr_14)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 + 237
// Terminates process

l00009CDD_1:
	word32 pc_17 = r5_7 & r0_15 << 20
// DataOut: fp pc r0 r1 r10 r3 r7 r8 spsr
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:r0 + 237

l00009CDD_thunk_SysCtlSleep:
	SysCtlSleep(r0_15, r1_8, r3_9, r7_10, r8_11, r10_12, fp_13, pc_17, spsr_14)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 + 237 pc:r5 & r0 + 474 << 20
// Terminates process

SysCtlReset_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 + 237

l00009CD5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SysCtlSleep(word32 r0, word32 r1, word32 r3, word32 r7, word32 r8, word32 r10, word32 fp, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z fp pc r0 r1 r10 r3 r7 r8 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SysCtlSleep_entry:
// DataOut: fp pc r0 r1 r10 r3 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009CE1:
	branch Z l00009CE1_thunk_SysCtlDeepSleep
// DataOut: fp pc r0 r1 r10 r3 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009CE1_thunk_SysCtlDeepSleep:
	SysCtlDeepSleep(r0, r1, r3, r7, r8, r10, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l00009CE1_1:
	word32 v6_7 = (word32) Mem0[r10:int16]
// DataOut: fp pc r0 r1 r10 r3 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009CE1_thunk_SysCtlDeepSleep:
	SysCtlDeepSleep(v6_7, r1, r3, r7, r8, r10 + 64, fp, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r10:r10 + 64 r0:<invalid>
// Terminates process

SysCtlSleep_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SysCtlDeepSleep(word32 r0, word32 r1, word32 r3, word32 r7, word32 r8, word32 r10, word32 fp, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp pc r0 r1 r10 r3 r7 r8 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SysCtlDeepSleep_entry:
// DataOut: fp pc r0 r1 r10 r3 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009CE5:
	branch C l00009CE9
// DataOut: fp pc r0 r1 r10 r3 r7 r8 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009CE5_1:
	r0 = DPB(r0, 0xC6B5, 16)
// DataOut: fp pc r0 r1 r10 r3 r7 r8 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009CE9:
	branch Z l00009CED
// DataOut: fp pc r0 r1 r10 r3 r7 r8 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0xC6B5, 16)

l00009CE9_1:
	r0 = r0 + 872
// DataOut: fp pc r0 r1 r10 r3 r7 r8 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:DPB(r0, 0xC6B5, 16)

l00009CED:
	branch Z l00009CF1
// DataOut: fp pc r0 r1 r10 r3 r7 r8 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r4:<invalid>

l00009CED_1:
// DataOut: fp pc r0 r1 r10 r3 r7 r8 sp spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r4:<invalid>

l00009CF1:
	branch C l00009CF5
// DataOut: fp pc r0 r1 r10 r3 r7 r8 sp spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid> r4:<invalid> r2:<invalid>

l00009CF1_1:
	Z = cond(~0x0000F000) (alias)
// DataOut: fp pc r0 r1 r10 r3 r7 r8 sp spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid> r4:<invalid> r2:<invalid>

l00009CF5:
	branch Z l00009CF9
// DataOut: fp pc r0 r1 r10 r3 r7 r8 sp spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid> r4:<invalid> r2:<invalid> pc:~0x0000F000

l00009CF5_1:
	r0 = r0 + 872
// DataOut: fp pc r0 r1 r10 r3 r7 r8 sp spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid> r4:<invalid> r2:<invalid> pc:~0x0000F000

l00009CF9:
	branch Z l00009CFD
// DataOut: fp pc r0 r1 r10 r3 r7 r8 sp spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid> r4:<invalid> r2:<invalid> pc:~0x0000F000

l00009CF9_1:
// DataOut: fp pc r0 r1 r10 r7 r8 sp spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid> r4:<invalid> r2:<invalid> pc:~0x0000F000

l00009CFD:
	branch Z l00009D01
// DataOut: fp pc r0 r1 r10 r7 r8 sp spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid> r4:<invalid> r2:<invalid> pc:~0x0000F000

l00009CFD_1:
	r0 = (word32) Mem0[0x00009D12:uint16]
// DataOut: fp r0 r1 r10 r7 r8 sp spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid> r4:<invalid> r2:<invalid> pc:~0x0000F000

l00009D01:
	branch Z l00009D01_thunk_SysCtlResetCauseGet
// DataOut: fp r0 r1 r10 r7 r8 sp spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid> r4:<invalid> r2:<invalid> pc:<invalid>

l00009D01_thunk_SysCtlResetCauseGet:
	SysCtlResetCauseGet(r0, r1, r7, r8, r10, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r4:<invalid> r2:<invalid> pc:<invalid>
// Terminates process

l00009D01_1:
	word32 r0_23 = ~__ror(fp, 1)
// DataOut: fp r0 r1 r10 r7 r8 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r0:<invalid> r4:<invalid> r2:<invalid> pc:<invalid>

l00009D01_thunk_SysCtlResetCauseGet:
	SysCtlResetCauseGet(r0_23, r1, r7, r8, r10, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:~<invalid> r4:<invalid> r2:<invalid> pc:<invalid>
// Terminates process

SysCtlDeepSleep_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SysCtlResetCauseGet(word32 r0, word32 r1, word32 r7, word32 r8, word32 r10, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZV fp r0 r1 r10 r7 r8 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SysCtlResetCauseGet_entry:
// DataOut: fp r0 r1 r10 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009D05:
	branch V l00009D09
// DataOut: fp r0 r1 r10 r7 r8 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l00009D05_1:
	r1 = (fp >> 16) - r8
// DataOut: fp r0 r1 r10 r7 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l00009D09:
	branch N l00009D0D
// DataOut: fp r0 r1 r10 r7 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:(fp >> 16) - r8

l00009D0D:
	branch Z l00009D0D_thunk_SysCtlResetCauseClear
// DataOut: fp r0 r1 r10 r7 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:(fp >> 16) - r8

l00009D0D_thunk_SysCtlResetCauseClear:
	SysCtlResetCauseClear(r0, r1, r7, r10, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r8
// Terminates process

l00009D0D_1:
// DataOut: fp r0 r1 r10 r7 spsr
// DataOut (flags): NZC
// SymbolicIn: sp:fp r1:(fp >> 16) - r8

l00009D0D_thunk_SysCtlResetCauseClear:
	SysCtlResetCauseClear(r0 - 0x00000380, r1, r7, r10, fp, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 r0:r0 - 0x00000380
// Terminates process

SysCtlResetCauseGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009D09_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r8



void SysCtlResetCauseClear(word32 r0, word32 r1, word32 r7, word32 r10, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC fp r0 r1 r10 r7 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SysCtlResetCauseClear_entry:
// DataOut: fp r0 r1 r10 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009D11:
	branch C l00009D15
// DataOut: fp r0 r1 r10 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009D11_1:
	__msr(spsr, 0x0000034A)
// DataOut: fp r0 r1 r10 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009D15:
	branch Z l00009D19
// DataOut: fp r0 r1 r10 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009D15_1:
	r0 = r0 & __ror(r10, 1)
// DataOut: fp r0 r1 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009D19:
	branch N l00009D1D
// DataOut: fp r0 r1 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l00009D1D:
	branch Z l00009D1D_thunk_SysCtlBrownOutConfigSet
// DataOut: fp r0 r1 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l00009D1D_thunk_SysCtlBrownOutConfigSet:
	SysCtlBrownOutConfigSet(r0, r1, r7, fp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>
// Terminates process

l00009D1D_1:
	word32 r0_8 = r0 - 0x00000380
// DataOut: fp r0 r1 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>

l00009D1D_thunk_SysCtlBrownOutConfigSet:
	SysCtlBrownOutConfigSet(r0_8, r1, r7, fp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>
// Terminates process

SysCtlResetCauseClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009D19_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void SysCtlBrownOutConfigSet(word32 r0, word32 r1, word32 r7, word32 fp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp r0 r1 r7
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SysCtlBrownOutConfigSet_entry:
// DataOut: fp r0 r1 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009D21:
	branch ZC l00009D25
// DataOut: fp r0 r1 r7
// DataOut (flags): NCV
// SymbolicIn: sp:fp

l00009D21_1:
// DataOut: r0 r1 r7
// DataOut (flags): NCV
// SymbolicIn: sp:fp

l00009D25:
	branch V l00009D29
// DataOut: r0 r1 r7
// DataOut (flags): NC
// SymbolicIn: sp:fp r4:~(fp >> 32)

l00009D25_1:
// DataOut: r7
// DataOut (flags): NC
// SymbolicIn: sp:fp r4:~(fp >> 32)

l00009D29:
	branch C l00009D2D
// DataOut: r7
// DataOut (flags): NC
// SymbolicIn: sp:fp r4:~(fp >> 32) r1:(r1 << 18) - r0

l00009D29_1:
	N = cond(0x00009D31 + (r7 >> 32) + C) (alias)
// DataOut:
// DataOut (flags): N
// SymbolicIn: sp:fp r4:~(fp >> 32) r1:(r1 << 18) - r0

l00009D2D:
	branch N l00009D2D_thunk_SysCtlClockSet
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:~(fp >> 32) r1:(r1 << 18) - r0 r0:<invalid>

l00009D2D_thunk_SysCtlClockSet:
	SysCtlClockSet()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:~(fp >> 32) r1:(r1 << 18) - r0 r0:<invalid>
// Terminates process

l00009D2D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:~(fp >> 32) r1:(r1 << 18) - r0 r0:<invalid>

l00009D2D_thunk_SysCtlClockSet:
	SysCtlClockSet()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:~(fp >> 32) r1:(r1 << 18) - r0 r0:<invalid>
// Terminates process

SysCtlBrownOutConfigSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SysCtlClockSet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SysCtlClockSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

SysCtlClockSet_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009D31:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SysCtlClockGet(word32 r0, word32 r1, word32 r2, word32 r10, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp r0 r1 r10 r2 spsr
// LiveOut:
// Trashed: NZCV r0 r1 r2 r8
// Preserved: sp
SysCtlClockGet_entry:
// DataOut: fp r0 r1 r10 r2 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009DF1:
	branch Z l00009DF5
// DataOut: fp r0 r1 r10 r2 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009DF1_1:
	__msr(spsr, 0x00000B4B)
// DataOut: fp r0 r1 r10 r2
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009DF5:
	branch Z l00009DF9
// DataOut: fp r0 r1 r10 r2
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009DF9:
	branch C l00009DFD
// DataOut: fp r0 r1 r10 r2
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009DF9_1:
	Z = cond(r0 - (r10 >> 16) - C) (alias)
// DataOut: fp r0 r1 r10 r2
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009DFD:
	branch Z l00009DFD_then
	word32 sp_5
	word32 spsr_7
	word32 r2_9
	word32 r10_11
	byte NZCV_12
	byte V_13
	byte NZV_14
	word32 r8_16
	byte NZC_17
	word32 fp_18
	byte N_19
	word32 r1_15
	word32 r0_10
	byte C_24
	byte Z_25
	call fnFF412EAD (retsize: 0;)
		uses: C,sp_1,Z_4
		defs: C_8,fp_18,N_19,NZC_17,NZCV_12,NZV_14,r0_10,r1_15,r10_11,r2_9,r8_16,sp_5,spsr_7,V_13,Z_6
	return
// DataOut: fp r0 r1 r10 r2
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:<invalid>

l00009DFD_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid>

l00009E01:
	branch V_13 l00009E05
// DataOut: fp r0 r1 r10 r2
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:<invalid>

l00009E01_1:
	Mem73[r0_10:word16] = (uint16) r0_10
	r0_10 = r0_10 - 1
// DataOut: fp r0 r1 r10 r2
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r2:<invalid>

l00009E05:
	branch NZV_14 l00009E09
// DataOut: fp r0 r1 r10 r2
// DataOut (flags): NZC
// SymbolicIn: sp:fp r2:<invalid> r0:r0 - 1

l00009E05_1:
	r1_15 = DPB(r1_15, 0xA447, 16)
// DataOut: fp r0 r1 r10 r2
// DataOut (flags): NZC
// SymbolicIn: sp:fp r2:<invalid> r0:r0 - 1

l00009E09:
	branch Z_25 l00009E0D
// DataOut: fp r0 r1 r10 r2
// DataOut (flags): NZC
// SymbolicIn: sp:fp r2:<invalid> r0:r0 - 1 r1:DPB(r1, 0xA447, 16)

l00009E09_1:
	byte NZC_66 = cond(r1_15 & 0xCC000003)
	C_24 = NZC_66 (alias)
	Z_25 = NZC_66 (alias)
	N_19 = NZC_66 (alias)
// DataOut: fp r0 r1 r10 r2
// DataOut (flags): NZC
// SymbolicIn: sp:fp r2:<invalid> r0:r0 - 1 r1:DPB(r1, 0xA447, 16)

l00009E0D:
	branch Z_25 l00009E11
// DataOut: fp r0 r1 r10 r2
// DataOut (flags): NZC
// SymbolicIn: sp:fp r2:<invalid> r0:r0 - 1 r1:DPB(r1, 0xA447, 16) r8:DPB(r1, 0xA447, 16) & 0xCC000003

l00009E0D_1:
	word32 r8_64 = r2_9 & __ror(fp_18, 3)
// DataOut: r0 r1 r10 r2
// DataOut (flags): NZC
// SymbolicIn: sp:fp r2:<invalid> r0:r0 - 1 r1:DPB(r1, 0xA447, 16) r8:DPB(r1, 0xA447, 16) & 0xCC000003

l00009E11:
	branch Z_25 l00009E15
// DataOut: r0 r1 r10 r2
// DataOut (flags): NZC
// SymbolicIn: sp:fp r2:<invalid> r0:r0 - 1 r1:DPB(r1, 0xA447, 16) r8:<invalid>

l00009E15:
	branch Z_25 l00009E19
// DataOut: r0 r1 r10 r2
// DataOut (flags): NZC
// SymbolicIn: sp:fp r2:<invalid> r0:r0 - 1 r1:DPB(r1, 0xA447, 16) r8:<invalid>

l00009E15_1:
	r1_15 = r10_11 - 0x00000035
// DataOut: r0 r1 r2
// DataOut (flags): NZC
// SymbolicIn: sp:fp r2:<invalid> r0:r0 - 1 r1:DPB(r1, 0xA447, 16) r8:<invalid>

l00009E19:
	branch N_19 l00009E1D
// DataOut: r0 r1 r2
// DataOut (flags): ZC
// SymbolicIn: sp:fp r2:<invalid> r0:r0 - 1 r1:<invalid> r8:<invalid>

l00009E1D:
	branch Z_25 l00009E21
// DataOut: r0 r1 r2
// DataOut (flags): ZC
// SymbolicIn: sp:fp r2:<invalid> r0:r0 - 1 r1:<invalid> r8:<invalid>

l00009E1D_1:
	r0_10 = r1_15 ^ r1_15 << r2_9
	byte NZC_57 = cond(r0_10)
	C_24 = NZC_57 (alias)
	Z_25 = NZC_57 (alias)
// DataOut: r0 r1
// DataOut (flags): ZC
// SymbolicIn: sp:fp r2:<invalid> r0:r0 - 1 r1:<invalid> r8:<invalid>

l00009E21:
	branch Z_25 l00009E25
// DataOut: r0 r1
// DataOut (flags): ZC
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r1:<invalid> r8:<invalid>

l00009E21_1:
	Z_25 = cond(0xC000003E - r0_10 - C_24) (alias)
// DataOut: r1
// DataOut (flags): Z
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r1:<invalid> r8:<invalid>

l00009E25:
	branch Z_25 l00009E29
// DataOut: r1
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r1:<invalid> r8:<invalid>

l00009E25_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r1:<invalid> r8:<invalid>

l00009E29:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r1:<invalid> r8:<invalid>

SysCtlClockGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r1:<invalid> r8:<invalid>

l00009E19_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r0:r0 - 1 r1:<invalid> r8:<invalid>

l00009E11_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r0:r0 - 1 r1:DPB(r1, 0xA447, 16) r8:<invalid>

l00009DF5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SysCtlPWMClockSet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip lr r0 r1 r2 r3 r4 r5 r6 r7 r8
// Preserved: sp
SysCtlPWMClockSet_entry:
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009E69:
	branch C l00009E6D
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009E69_1:
	__msr(spsr, 0x0000034A)
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009E6D:
	branch Z l00009E71
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009E71:
	branch V l00009E75
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009E71_1:
	r1 = (r3 >> 32) - r0
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009E75:
	branch V l00009E79
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(r3 >> 32) - r0

l00009E75_1:
	r0 = 0x00009E7D + (r7 >> 32) + C
	Z = cond(r0) (alias)
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(r3 >> 32) - r0

l00009E79:
	branch Z l00009E79_thunk_SysCtlPWMClockGet
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(r3 >> 32) - r0 r0:<invalid>

l00009E79_thunk_SysCtlPWMClockGet:
	SysCtlPWMClockGet(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(r3 >> 32) - r0 r0:<invalid>

l00009E79_1:
	word32 r0_38 = r0 - 0x00000380
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(r3 >> 32) - r0 r0:<invalid>

l00009E79_thunk_SysCtlPWMClockGet:
	SysCtlPWMClockGet(r0_38, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(r3 >> 32) - r0 r0:<invalid>

l00009E6D_1:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlPWMClockSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> ip:<invalid> lr:<invalid> r1:<invalid> r0:<invalid> r3:<invalid> r8:<invalid>



void SysCtlPWMClockGet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 r7 r8
// Preserved: r0 sp
SysCtlPWMClockGet_entry:
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009E7D:
	branch Z l00009E81
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009E7D_1:
	r1 = (fp >> 16) - r8
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009E81:
	branch V l00009E85
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8

l00009E85:
	branch V l00009E89
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8

l00009E85_1:
	r0 = 0x00009E8D + (r7 >> 32) + C
	Z = cond(r0) (alias)
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8

l00009E89:
	branch Z l00009E89_thunk_SysCtlADCSpeedSet
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 r0:<invalid>

l00009E89_thunk_SysCtlADCSpeedSet:
	SysCtlADCSpeedSet(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 r0:<invalid>

l00009E89_1:
	word32 r0_73 = r0 - __ror(r0, 31)
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 r0:<invalid>

l00009E89_thunk_SysCtlADCSpeedSet:
	SysCtlADCSpeedSet(r0_73, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 r0:<invalid>

l00009E81_1:
	word32 sp_47
	byte Z_48
	word32 r1_49
	word32 r8_50
	word32 fp_51
	byte V_52
	word32 pc_53
	word32 r0_54
	word32 r7_55
	bool C_56
	byte NZCV_57
	word32 r2_58
	word32 r3_59
	word32 r4_60
	word32 r5_61
	word32 r6_62
	word32 r9_63
	word32 r10_64
	word32 ip_65
	word32 lr_66
	word32 spsr_67
	call (word32) Mem0[r0:int16] (retsize: 0;)
		uses: C,fp,ip,lr,NZCV,pc,r0_30,r1_4,r10,r2,r3,r4,r5,r6,r7,r8,r9,sp_1,spsr,V,Z
		defs: C_56,fp_51,ip_65,lr_66,NZCV_57,pc_53,r0_54,r1_49,r10_64,r2_58,r3_59,r4_60,r5_61,r6_62,r7_55,r8_50,r9_63,sp_47,spsr_67,V_52,Z_48
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r8

SysCtlPWMClockGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r2:<invalid> r4:<invalid> r3:<invalid> r8:<invalid> r7:<invalid>



void SysCtlADCSpeedSet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3 r4 r7 r8
// Preserved: sp
SysCtlADCSpeedSet_entry:
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009E8D:
	branch Z l00009E8D_then
	word32 sp_3
	byte Z_4
	byte V_5
	word32 r2_6
	word32 r4_7
	word32 r10_8
	bool C_9
	byte NZCV_10
	word32 r0_11
	word32 r8_12
	word32 spsr_13
	word32 r3_14
	word32 r5_15
	word32 r6_16
	word32 r7_17
	word32 ip_18
	word32 lr_19
	word32 r1_20
	word32 r9_21
	word32 fp_22
	call fn0130C965 (retsize: 0;)
		uses: sp_1,Z
		defs: C_9,fp_22,ip_18,lr_19,NZCV_10,r0_11,r1_20,r10_8,r2_6,r3_14,r4_7,r5_15,r6_16,r7_17,r8_12,r9_21,sp_3,spsr_13,V_5,Z_4
	return
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009E8D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009E91:
	branch Z_4 l00009E91_then
	word32 sp_23
	byte NZCV_30
	word32 fp_119
	word32 r9_118
	word32 lr_116
	word32 ip_115
	word32 r7_114
	word32 r6_113
	word32 r5_112
	word32 spsr_110
	word32 r8_109
	word32 r10_105
	word32 r4_104
	word32 r2_103
	byte V_102
	word32 r3_111
	word32 r1_117
	bool C_106
	byte Z_101
	word32 r0_108
	call fn01A12BBD (retsize: 0;)
		uses: C_9,fp_22,ip_18,lr_19,NZCV_10,r0_11,r1_20,r10_8,r2_6,r3_14,r4_7,r5_15,r6_16,r7_17,r8_12,r9_21,sp_3,spsr_13,V_5,Z_4
		defs: C_29,fp_42,ip_38,lr_39,NZCV_30,r0_31,r1_40,r10_28,r2_26,r3_34,r4_27,r5_35,r6_36,r7_37,r8_32,r9_41,sp_23,spsr_33,V_25,Z_24
	return
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009E91_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009E95:
	branch V_102 l00009E99
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009E95_1:
	r2_103 = (r10_105 >> 6) - r4_104 - C_106
	byte NZCV_127 = cond(r2_103)
	C_106 = (bool) NZCV_127 (alias)
	Z_101 = NZCV_127 (alias)
	V_102 = NZCV_127 (alias)
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009E99:
	branch C_106 l00009E9D
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid>
// LocalsOut: fp(32)

l00009E99_1:
	r0_108 = DPB(r0_108, 0x3363, 16)
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid>
// LocalsOut: fp(32)

l00009E9D:
	branch Z_101 l00009EA1
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:DPB(r0, 0x3363, 16)
// LocalsOut: fp(32)

l00009E9D_1:
	r0_108 = __ror(r0_108, 22) - r8_109
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:DPB(r0, 0x3363, 16)
// LocalsOut: fp(32)

l00009EA1:
	branch V_102 l00009EA5
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid>
// LocalsOut: fp(32)

l00009EA1_1:
	r4_104 = r4_104 + 60
	r2_103 = (word32) Mem0[r4_104:word16]
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid>
// LocalsOut: fp(32)

l00009EA5:
	branch Z_101 l00009EA9
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60
// LocalsOut: fp(32)

l00009EA5_1:
	word32 sp_100
	byte NZCV_107
	call fn010CAC39 (retsize: 0;)
		uses: C_45,fp_42,ip_38,lr_39,NZCV_44,r0_49,r1_40,r10_28,r2_51,r3_34,r4_50,r5_35,r6_36,r7_37,r8_32,r9_41,sp_23,spsr_33,V_47,Z_46
		defs: C_106,fp_119,ip_115,lr_116,NZCV_107,r0_108,r1_117,r10_105,r2_103,r3_111,r4_104,r5_112,r6_113,r7_114,r8_109,r9_118,sp_100,spsr_110,V_102,Z_101
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60
// LocalsOut: fp(32)

l00009EA9:
	branch C_106 l00009EAD
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60
// LocalsOut: fp(32)

l00009EA9_1:
	__msr(spsr_110, 0x00000360)
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60
// LocalsOut: fp(32)

l00009EAD:
	branch Z_101 l00009EB1
// DataOut: fp ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60
// LocalsOut: fp(32)

l00009EAD_1:
	Mem91[r3_111:word32] = r2_103
	Mem92[r3_111 + 4:word32] = r4_104
	Mem93[r3_111 + 8:word32] = r5_112
	Mem94[r3_111 + 12:word32] = r6_113
	Mem95[r3_111 + 16:word32] = r7_114
	Mem96[r3_111 + 20:word32] = ip_115
	Mem97[r3_111 + 24:word32] = fp
	Mem98[r3_111 + 28:word32] = lr_116
	r3_111 = r3_111 + 32
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60

l00009EB1:
	branch V_102 l00009EB5
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60 r3:r3 + 32

l00009EB1_1:
	r1_117 = (r3_111 >> 32) - r0_108
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60 r3:r3 + 32

l00009EB5:
	branch Z_101 l00009EB9
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60 r3:r3 + 32 r1:<invalid>

l00009EB5_1:
	r0_108 = 0x00009EBD + (r7_114 >> 32) + C_106
	byte NZCV_86 = cond(r0_108)
	C_106 = (bool) NZCV_86 (alias)
	Z_101 = NZCV_86 (alias)
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60 r3:r3 + 32 r1:<invalid>

l00009EB9:
	branch Z_101 l00009EBD
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60 r3:r3 + 32 r1:<invalid>

l00009EB9_1:
	r0_108 = r0_108 - __ror(r1_117, 31)
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60 r3:r3 + 32 r1:<invalid>

l00009EBD:
	branch C_106 l00009EC1
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60 r3:r3 + 32 r1:<invalid>

l00009EBD_1:
	r0_108 = r0_108 - __ror(r1_117, 31)
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60 r3:r3 + 32 r1:<invalid>

l00009EC1:
	branch Z_101 l00009EC1_thunk_SysCtlADCSpeedGet
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60 r3:r3 + 32 r1:<invalid>

l00009EC1_thunk_SysCtlADCSpeedGet:
	SysCtlADCSpeedGet(r0_108, r1_117, r2_103, r3_111, r4_104, r6_113, r7_114, r8_109, r9_118, r10_105, fp_119, ip_115, spsr_110)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60 r3:r3 + 32 r1:<invalid>

l00009EC1_1:
	word32 r0_82 = r0_108 - 0x00000384
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60 r3:r3 + 32 r1:<invalid>

l00009EC1_thunk_SysCtlADCSpeedGet:
	SysCtlADCSpeedGet(r0_82, r1_117, r2_103, r3_111, r4_104, r6_113, r7_114, r8_109, r9_118, r10_105, fp_119, ip_115, spsr_110)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:r4 + 60 r3:r3 + 32 r1:<invalid>

SysCtlADCSpeedSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid> r4:<invalid> r3:r3 + 32 r1:<invalid> r8:<invalid> r7:<invalid>



void SysCtlADCSpeedGet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV fp ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV r0 r1 r2 r4 r7 r8
// Preserved: sp
SysCtlADCSpeedGet_entry:
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009EC5:
	branch Z l00009EC9
// DataOut: fp ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009EC5_1:
	r1 = (fp >> 16) - r8
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009EC9:
	branch V l00009ECD
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8

l00009ECD:
	branch Z l00009ED1
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8

l00009ECD_1:
	r0 = 0x00009ED5 + (r7 >> 32) + C
	Z = cond(r0) (alias)
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8

l00009ED1:
	branch Z l00009ED1_thunk_SysCtlIOSCVerificationSet
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 r0:<invalid>

l00009ED1_thunk_SysCtlIOSCVerificationSet:
	SysCtlIOSCVerificationSet(r0, r1, r2, r3, r4, r6, r7, r8, r9, r10, ip, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 r0:<invalid>

l00009ED1_1:
	Mem14[r0 - 4065:byte] = (byte) r0
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 r0:<invalid>

l00009ED1_thunk_SysCtlIOSCVerificationSet:
	SysCtlIOSCVerificationSet(r0, r1, r2, r3, r4, r6, r7, r8, r9, r10, ip, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r8 r0:<invalid>

SysCtlADCSpeedGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r8:<invalid> r2:<invalid> r4:<invalid> r7:<invalid>

l00009EC9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:(fp >> 16) - r8



void SysCtlIOSCVerificationSet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 ip, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV r0 r1 r2 r4 r7 r8
// Preserved: sp
SysCtlIOSCVerificationSet_entry:
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009ED5:
	branch Z l00009ED9
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009ED5_1:
	Mem34[r8:word32] = r1
	Mem35[r8 + 4:word32] = r3
	Mem36[r8 + 8:word32] = r6
	Mem37[r8 + 12:word32] = r8
	Mem38[r8 + 16:word32] = r9
	Mem39[r8 + 20:word32] = ip
	r8 = r8 + 24
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009ED9:
	branch Z l00009EDD
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24

l00009EDD:
	branch V l00009EE1
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24

l00009EDD_1:
	r1 = (r3 << 6) - r0
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24

l00009EE1:
	branch Z l00009EE5
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r1:(r3 << 6) - r0

l00009EE5:
	branch V l00009EE9
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r1:(r3 << 6) - r0

l00009EE5_1:
	r1 = (r3 << 6) - r0
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r1:(r3 << 6) - r0

l00009EE9:
	branch V l00009EED
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r1:(r3 << 6) - r0

l00009EE9_1:
	r0 = 0x00009EF1 + (r7 >> 32) + C
	Z = cond(r0) (alias)
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r1:(r3 << 6) - r0

l00009EED:
	branch Z l00009EED_thunk_SysCtlMOSCVerificationSet
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r1:(r3 << 6) - r0 r0:<invalid>

l00009EED_thunk_SysCtlMOSCVerificationSet:
	SysCtlMOSCVerificationSet(r0, r1, r2, r3, r4, r6, r7, r8, r9, r10, ip, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 24 r1:(r3 << 6) - r0 r0:<invalid>

l00009EED_1:
	Mem17[r0 - 4064:byte] = (byte) r0
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r1:(r3 << 6) - r0 r0:<invalid>

l00009EED_thunk_SysCtlMOSCVerificationSet:
	SysCtlMOSCVerificationSet(r0, r1, r2, r3, r4, r6, r7, r8, r9, r10, ip, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 24 r1:(r3 << 6) - r0 r0:<invalid>

SysCtlIOSCVerificationSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r4:<invalid> r7:<invalid>

l00009EE1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 24 r1:(r3 << 6) - r0

l00009ED9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 24



void SysCtlMOSCVerificationSet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 ip, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV r0 r1 r2 r4 r7 r8
// Preserved: sp
SysCtlMOSCVerificationSet_entry:
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009EF1:
	branch Z l00009EF5
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009EF1_1:
	Mem45[r8:word32] = r1
	Mem46[r8 + 4:word32] = r3
	Mem47[r8 + 8:word32] = r6
	Mem48[r8 + 12:word32] = r8
	Mem49[r8 + 16:word32] = r9
	Mem50[r8 + 20:word32] = ip
	r8 = r8 + 24
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009EF5:
	branch Z l00009EF9
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24

l00009EF5_1:
	r0 = r0 + 953
	r2 = (word32) Mem0[r0:byte]
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24

l00009EF9:
	branch V l00009EFD
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r0:r0 + 953 r2:<invalid>

l00009EF9_1:
	r1 = (r3 << 6) - r0
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r0:r0 + 953 r2:<invalid>

l00009EFD:
	branch Z l00009F01
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r0:r0 + 953 r2:<invalid> r1:(r3 << 6) - (r0 + 1906)

l00009EFD_1:
	r0 = r0 + 839
	r4 = (word32) Mem0[r0:byte]
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r0:r0 + 953 r2:<invalid> r1:(r3 << 6) - (r0 + 1906)

l00009F01:
	branch V l00009F05
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r0:<invalid> r2:<invalid> r1:(r3 << 6) - (r0 + 1906) r4:<invalid>

l00009F01_1:
	r1 = (r3 << 6) - r0
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r0:<invalid> r2:<invalid> r1:(r3 << 6) - (r0 + 1906) r4:<invalid>

l00009F05:
	branch V l00009F09
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r0:<invalid> r2:<invalid> r1:<invalid> r4:<invalid>

l00009F05_1:
	r0 = 0x00009F0D + (r7 >> 32) + C
	Z = cond(r0) (alias)
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r0:<invalid> r2:<invalid> r1:<invalid> r4:<invalid>

l00009F09:
	branch Z l00009F09_thunk_SysCtlPLLVerificationSet
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r0:<invalid> r2:<invalid> r1:<invalid> r4:<invalid>

l00009F09_thunk_SysCtlPLLVerificationSet:
	SysCtlPLLVerificationSet(r0, r1, r2, r3, r4, r6, r7, r8, r9, r10, ip, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 24 r0:<invalid> r2:<invalid> r1:<invalid> r4:<invalid>

l00009F09_1:
	Mem23[r0 - 4064:byte] = (byte) r0
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r8:r8 + 24 r0:<invalid> r2:<invalid> r1:<invalid> r4:<invalid>

l00009F09_thunk_SysCtlPLLVerificationSet:
	SysCtlPLLVerificationSet(r0, r1, r2, r3, r4, r6, r7, r8, r9, r10, ip, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 24 r0:<invalid> r2:<invalid> r1:<invalid> r4:<invalid>

SysCtlMOSCVerificationSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r4:<invalid> r7:<invalid>



void SysCtlPLLVerificationSet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 ip, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV r0 r1 r2 r4 r7 r8
// Preserved: sp
SysCtlPLLVerificationSet_entry:
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009F0D:
	branch Z l00009F11
// DataOut: ip r0 r1 r10 r2 r3 r4 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009F0D_1:
	Mem58[r8:word32] = r1
	Mem59[r8 + 4:word32] = r3
	Mem61[r8 + 8:word32] = r6
	Mem62[r8 + 12:word32] = r8
	Mem64[r8 + 16:word32] = r9
	Mem66[r8 + 20:word32] = ip
// DataOut: r0 r10 r2 r3 r4 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009F11:
	branch ZC l00009F15
// DataOut: r0 r10 r2 r3 r4 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24

l00009F11_1:
	r4 = r4 + 57
	r2 = (word32) Mem0[r4:word16]
// DataOut: r0 r10 r2 r3 r4 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24

l00009F15:
	branch V l00009F19
// DataOut: r0 r10 r2 r3 r4 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24 r4:r4 + 57 r2:<invalid>

l00009F15_1:
	word32 r1_53 = __ror(r3, 6) - r0
// DataOut: r0 r10 r2 r3 r4 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24 r4:r4 + 57 r2:<invalid>

l00009F19:
	branch ZC l00009F1D
// DataOut: r0 r10 r2 r3 r4 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24 r4:r4 + 57 r2:<invalid> r1:<invalid>

l00009F19_1:
	byte NZCV_48 = cond((r7 >> 6) - r4 - C)
	C = (bool) NZCV_48 (alias)
	Z = NZCV_48 (alias)
	V = NZCV_48 (alias)
// DataOut: r0 r10 r2 r3 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24 r4:r4 + 57 r2:<invalid> r1:<invalid>

l00009F1D:
	branch V l00009F21
// DataOut: r0 r10 r2 r3 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24 r4:<invalid> r2:<invalid> r1:<invalid>

l00009F1D_1:
	word32 r1_46 = __ror(r3, 6) - r0
// DataOut: r0 r10 r2 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24 r4:<invalid> r2:<invalid> r1:<invalid>

l00009F21:
	branch V l00009F25
// DataOut: r0 r10 r2 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24 r4:<invalid> r2:<invalid> r1:<invalid>

l00009F21_1:
	r0 = 0x00009F29 + (r7 >> 32) + C
	r0_r0 = SEQ(r0, r0) (alias)
	Z = cond(r0) (alias)
// DataOut: r0 r10 r2 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24 r4:<invalid> r2:<invalid> r1:<invalid>

l00009F25:
	branch Z l00009F25_thunk_SysCtlClkVerificationClear
// DataOut: r0 r10 r2 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24 r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid>

l00009F25_thunk_SysCtlClkVerificationClear:
	SysCtlClkVerificationClear(r0, r2, r7, r10, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 24 r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid>

l00009F25_1:
	word32 r0_34 = (word32) ((int16) (r0 >> 16) *s (int16) (0x00009F2D >> 16) + r0_r0)
// DataOut: r0 r10 r2 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 + 24 r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid>

l00009F25_thunk_SysCtlClkVerificationClear:
	SysCtlClkVerificationClear(r0_34, r2, r7, r10, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 24 r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> Sequence r0:r0:<invalid>

SysCtlPLLVerificationSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 + 24 r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r7:<invalid> Sequence r0:r0:<invalid>



void SysCtlClkVerificationClear(word32 r0, word32 r2, word32 r7, word32 r10, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV r0 r10 r2 r7 spsr
// LiveOut:
// Trashed: r7
// Preserved: sp
SysCtlClkVerificationClear_entry:
// DataOut: r0 r10 r2 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009F29:
	branch Z l00009F2D
// DataOut: r0 r10 r2 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009F2D:
	branch Z l00009F2D_then
	word32 sp_3
	byte Z_4
	byte N_5
	word32 r0_7
	bool C_8
	byte NZV_9
	word32 r2_10
	word32 r10_11
	word32 spsr_12
	word32 r7_13
	call fn01810461 (retsize: 0;)
		uses: sp_1,Z
		defs: C_8,N_5,NZV_9,r0_7,r10_11,r2_10,r7_6,sp_3,spsr_12,Z_4
	return
// DataOut: r0 r10 r2 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009F2D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009F31:
	branch N_5 l00009F35
// DataOut: r0 r10 r2 r7 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009F31_1:
	r7_13 = r7_13 - __rcr(r0_7, 1, C_8)
// DataOut: r0 r10 r2 r7 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009F35:
	branch NZV_9 l00009F35_thunk_UARTParityModeSet
// DataOut: r0 r10 r2 r7 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r7:<invalid>

l00009F35_thunk_UARTParityModeSet:
	UARTParityModeSet(r0_7, r2_10, r7_13, r10_11, spsr_12)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:<invalid>
// Terminates process

l00009F35_1:
	word32 r0_15 = DPB(r0_7, 0x0FE1, 16)
// DataOut: r0 r10 r2 r7 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r7:<invalid>

l00009F35_thunk_UARTParityModeSet:
	UARTParityModeSet(r0_15, r2_10, r7_13, r10_11, spsr_12)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:<invalid> r0:DPB(r0, 0x0FE1, 16)
// Terminates process

SysCtlClkVerificationClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:<invalid>

l00009F29_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void UARTParityModeSet(word32 r0, word32 r2, word32 r7, word32 r10, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV r0 r10 r2 r7 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
UARTParityModeSet_entry:
// DataOut: r0 r10 r2 r7 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009F39:
	branch ZC l00009F3D
// DataOut: r0 r10 r2 r7 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009F39_1:
	Mem16[r0:byte] = (byte) r2
	r0 = r0 + __ror(r10, 6)
// DataOut: r0 r10 r2 r7 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l00009F3D:
	branch NZV l00009F41
// DataOut: r0 r10 r2 r7 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid>

l00009F3D_1:
	__mrs(spsr)
// DataOut: r0 r10 r2 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:<invalid>

l00009F41:
	branch NZV l00009F41_thunk_UARTParityModeGet
// DataOut: r0 r10 r2 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid>

l00009F41_thunk_UARTParityModeGet:
	UARTParityModeGet(r0, r10)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid>
// Terminates process

l00009F41_1:
	word32 r7_12 = r7 - __rcr(r2, 1, C)
// DataOut: r0 r10
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid>

l00009F41_thunk_UARTParityModeGet:
	UARTParityModeGet(r0, r10)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r7:<invalid>
// Terminates process

UARTParityModeSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void UARTParityModeGet(word32 r0, word32 r10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC r0 r10
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
UARTParityModeGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

UARTParityModeGet_entry:
// DataOut: r0 r10
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009F45:
	branch ZC l00009F49
// DataOut: r0 r10
// DataOut (flags): C
// SymbolicIn: sp:fp

l00009F45_1:
	Mem5[r0:byte] = (byte) r0
	word32 r0_8 = r0 + __rcr(r10, 1, C)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009F49:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void UARTConfigSet(word32 r0, word32 r1, word32 r2, word32 r6, word32 r8, word32 r10, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp r0 r1 r10 r2 r6 r8 spsr
// LiveOut:
// Trashed: NZCV pc r2 r4 r8
// Preserved: sp
UARTConfigSet_entry:
// DataOut: fp r0 r1 r10 r2 r6 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009F4D:
	branch Z l00009F51
// DataOut: fp r0 r1 r10 r2 r6 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009F51:
	branch Z l00009F55
// DataOut: fp r0 r1 r10 r2 r6 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009F51_1:
	Mem101[r6:word32] = r1
	Mem104[r6 + 4:word32] = r2
	Mem105[r6 + 8:word32] = r6
	Mem106[r6 + 12:word32] = r8
	Mem108[r6 + 16:word32] = r10
// DataOut: fp r0 r2 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009F55:
	branch Z l00009F59
// DataOut: fp r0 r2 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009F55_1:
	Mem97[r8:byte] = (byte) r0
// DataOut: fp r2 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009F59:
	word32 sp_3
	byte Z_4
	word32 r6_5
	word32 r1_6
	word32 r2_7
	word32 r8_8
	word32 r10_9
	word32 r0_10
	byte C_11
	word32 spsr_12
	word32 fp_13
	word32 r4_14
	byte NZCV_15
	byte NZV_16
	word32 pc_17
	call fn0010C323 (retsize: 0;)
		uses: sp_1,Z
		defs: C_11,fp_13,NZCV_15,NZV_16,pc_17,r0_10,r1_6,r10_9,r2_7,r4_14,r6_5,r8_8,sp_3,spsr_12,Z_4
	branch C_11 l00009F61
// DataOut: fp r2 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1072

l00009F5D_1:
	__msr(spsr_12, 0x00000BD1)
// DataOut: fp r2
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1072

l00009F61:
	word32 sp_18
	byte Z_19
	word32 r6_20
	word32 r1_21
	word32 r8_23
	word32 r10_24
	word32 r0_25
	word32 spsr_27
	word32 fp_28
	word32 r4_29
	byte NZCV_30
	byte NZV_31
	word32 pc_32
	word32 r2_22
	byte C_26
	call fn000CE329 (retsize: 0;)
		uses: C_11,fp_13,NZCV_15,NZV_16,pc_17,r0_10,r1_6,r10_9,r2_7,r4_14,r6_5,r8_8,sp_3,spsr_12,Z_4
		defs: C_26,fp_28,NZCV_30,NZV_31,pc_32,r0_25,r1_21,r10_24,r2_22,r4_29,r6_20,r8_23,sp_18,spsr_27,Z_19
	branch C_26 l00009F69
// DataOut: fp r2
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1072

l00009F65_1:
	r2_22 = 0x00062000 - fp_28
// DataOut: r2
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1072

l00009F69:
	branch C_26 l00009F6D
// DataOut: r2
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1072 r2:0x00062000 - fp

l00009F69_1:
	C_26 = cond(0x000000F4 - r2_22) (alias)
// DataOut:
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1072 r2:0x00062000 - fp

l00009F6D:
	branch C_26 l00009F6D_then
	word32 sp_35
	byte Z_36
	word32 r6_37
	word32 r1_38
	word32 r2_39
	word32 r8_40
	word32 r10_41
	word32 r0_42
	byte C_43
	word32 spsr_44
	word32 fp_45
	word32 r4_46
	byte NZCV_47
	word32 pc_49
	byte NZV_48
	call fn0008A735 (retsize: 0;)
		uses: C_34,fp_28,NZCV_30,NZV_31,pc_32,r0_25,r1_21,r10_24,r2_33,r4_29,r6_20,r8_23,sp_18,spsr_27,Z_19
		defs: C_43,fp_45,NZCV_47,NZV_48,pc_49,r0_42,r1_38,r10_41,r2_39,r4_46,r6_37,r8_40,sp_35,spsr_44,Z_36
	return
// DataOut:
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:r8 - 1072 r2:0x00062000 - fp r4:0x000000F4 - (0x00062000 - fp)

l00009F6D_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 1072 r2:0x00062000 - fp r4:0x000000F4 - (0x00062000 - fp)

l00009F71:
	branch C_43 l00009F75
// DataOut:
// DataOut (flags): NZV
// SymbolicIn: sp:fp r8:r8 - 1072 r2:0x00062000 - fp r4:0x000000F4 - (0x00062000 - fp)

l00009F75:
	branch NZV_48 l00009F79
// DataOut:
// DataOut (flags): NZV
// SymbolicIn: sp:fp r8:r8 - 1072 r2:0x00062000 - fp r4:0x000000F4 - (0x00062000 - fp)

l00009F79:
	branch Z_36 l00009F7D
// DataOut:
// DataOut (flags): NZV
// SymbolicIn: sp:fp r8:r8 - 1072 r2:0x00062000 - fp r4:0x000000F4 - (0x00062000 - fp)

l00009F79_1:
	NZV_48 = cond(~0xEC000003) (alias)
// DataOut:
// DataOut (flags): NZV
// SymbolicIn: sp:fp r8:r8 - 1072 r2:0x00062000 - fp r4:0x000000F4 - (0x00062000 - fp)

l00009F7D:
	branch NZV_48 l00009F81
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 1072 r2:0x00062000 - fp r4:0x000000F4 - (0x00062000 - fp) pc:~0xEC000003

l00009F7D_1:
	word32 sp_70
	byte Z_71
	word32 r6_72
	word32 r1_73
	word32 r2_74
	word32 r8_75
	word32 r10_76
	word32 r0_77
	byte C_78
	word32 spsr_79
	word32 fp_80
	word32 r4_81
	byte NZCV_82
	byte NZV_83
	word32 pc_84
	call fn000CEB71 (retsize: 0;)
		uses: C_53,fp_45,NZCV_52,NZV_51,pc_50,r0_42,r1_38,r10_41,r2_39,r4_46,r6_37,r8_40,sp_35,spsr_44,Z_54
		defs: C_78,fp_80,NZCV_82,NZV_83,pc_84,r0_77,r1_73,r10_76,r2_74,r4_81,r6_72,r8_75,sp_70,spsr_79,Z_71
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 1072 r2:0x00062000 - fp r4:0x000000F4 - (0x00062000 - fp) pc:~0xEC000003

l00009F81:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 1072 r2:0x00062000 - fp r4:0x000000F4 - (0x00062000 - fp) pc:~0xEC000003

UARTConfigSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 1072 r2:0x00062000 - fp r4:0x000000F4 - (0x00062000 - fp) pc:~0xEC000003

l00009F75_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 1072 r2:0x00062000 - fp r4:0x000000F4 - (0x00062000 - fp)

l00009F71_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 - 1072 r2:0x00062000 - fp r4:0x000000F4 - (0x00062000 - fp)

l00009F4D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void UARTConfigGet(word32 r0, word32 r1, word32 r2, word32 r5, word32 r6, word32 r9, word32 fp, word32 pc)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp pc r0 r1 r2 r5 r6 r9
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
UARTConfigGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

UARTConfigGet_entry:
// DataOut: fp pc r0 r1 r2 r5 r6 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009FA9:
	branch NZV l00009FAD
// DataOut: fp pc r0 r1 r2 r5 r6 r9
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009FA9_1:
	word32 pc_31 = r1 - __ror(r9, 1)
// DataOut: fp pc r0 r2 r5 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009FAD:
	branch Z l00009FB1
// DataOut: fp pc r0 r2 r5 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:<invalid>

l00009FAD_1:
	Mem28[r0:word32] = r2
	r0 = r0 + 1272
// DataOut: fp pc r0 r5 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:<invalid>

l00009FB1:
	branch Z l00009FB5
// DataOut: fp pc r0 r5 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1272

l00009FB1_1:
	Mem25[r6:byte] = (byte) r0
// DataOut: fp pc r5
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1272

l00009FB5:
	__syscall(0x006A8546)
	branch Z l00009FBD
// DataOut: fp pc r5
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1272 r6:r6 - (r6 >> 30)

l00009FB9_1:
// DataOut: fp r5
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1272 r6:r6 - (r6 >> 30)

l00009FBD:
	branch ZC l00009FC1
// DataOut: fp r5
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1272 r6:r6 - (r6 >> 30) r1:<invalid>

l00009FBD_1:
	word32 r8_20 = r5 & __ror(fp, 17)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1272 r6:r6 - (r6 >> 30) r1:<invalid>

l00009FC1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:r0 + 1272 r6:r6 - (r6 >> 30) r1:<invalid> r8:<invalid>



void UARTEnable(word32 r0, word32 r3, word32 r4, word32 r7, word32 r10, word32 fp, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp r0 r10 r3 r4 r7 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
UARTEnable_entry:
// DataOut: fp r0 r10 r3 r4 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009FD5:
	branch Z l00009FD9
// DataOut: fp r0 r10 r3 r4 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009FD5_1:
	r4 = __ror(r10, 6) - r0 - C
	byte NZCV_59 = cond(r4)
	C = (bool) NZCV_59 (alias)
	Z = NZCV_59 (alias)
	V = NZCV_59 (alias)
	N = NZCV_59 (alias)
// DataOut: fp r3 r4 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l00009FD9:
	branch Z l00009FDD
// DataOut: fp r3 r4 r7 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:<invalid>

l00009FD9_1:
	__msr(spsr, 0x00000303)
// DataOut: fp r3 r4 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:<invalid>

l00009FDD:
	branch N l00009FE1
// DataOut: fp r3 r4 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r4:<invalid>

l00009FDD_1:
	byte NZCV_51 = cond(__ror(fp, 6) - r4 - C)
	Z = NZCV_51 (alias)
	V = NZCV_51 (alias)
// DataOut: r3 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r4:<invalid>

l00009FE1:
	branch Z l00009FE5
// DataOut: r3 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r4:<invalid>

l00009FE1_1:
	byte NZCV_44 = cond(~__ror(r3, r3))
	Z = NZCV_44 (alias)
	V = NZCV_44 (alias)
// DataOut: r3 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r4:<invalid>

l00009FE5:
	branch V l00009FE9
// DataOut: r3 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp r4:<invalid> r0:~<invalid>

l00009FE5_1:
// DataOut: r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp r4:<invalid> r0:~<invalid>

l00009FE9:
	branch Z l00009FE9_thunk_UARTDisable
// DataOut: r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp r4:<invalid> r0:<invalid>

l00009FE9_thunk_UARTDisable:
	UARTDisable()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r0:<invalid>
// Terminates process

l00009FE9_1:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp r4:<invalid> r0:<invalid>

l00009FE9_thunk_UARTDisable:
	UARTDisable()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r0:<invalid>
// Terminates process

UARTEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void UARTDisable()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
UARTDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

UARTDisable_entry:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00009FED:
	branch Z l00009FF1
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009FED_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009FF1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:0x000028F1



void UARTCharsAvail(word32 r0, word32 r3, word32 r6, word32 r7, word32 r9)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC r0 r3 r6 r7 r9
// LiveOut:
// Trashed: NZCV ip r0 r6 r7 r8
// Preserved: sp
UARTCharsAvail_entry:
// DataOut: r0 r3 r6 r7 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000A00D:
	branch Z l0000A011
// DataOut: r0 r3 r6 r7 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000A00D_1:
	byte NZCV_39 = cond(__rcr(r9, 1, C) - r0 - C)
	C = (bool) NZCV_39 (alias)
	Z = NZCV_39 (alias)
	ZC = NZCV_39 (alias)
// DataOut: r0 r3 r6 r7 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000A011:
	branch Z l0000A015
// DataOut: r0 r3 r6 r7 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:<invalid>

l0000A011_1:
	ZC = cond(r0 - r3 - C) (alias)
// DataOut: r0 r3 r6 r7 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:<invalid>

l0000A015:
	branch ZC l0000A019
// DataOut: r0 r3 r6 r7 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:<invalid> ip:<invalid>

l0000A015_thunk_UARTSpaceAvail:
	UARTSpaceAvail(r0, r3, r6, r7, r9)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> ip:<invalid>

l0000A015_1:
	word32 r7_27 = r7 - (r0 << r0)
// DataOut: r0 r3 r6 r7 r9
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:<invalid> ip:<invalid>

l0000A015_thunk_UARTSpaceAvail:
	UARTSpaceAvail(r0, r3, r6, r7_27, r9)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> ip:<invalid> r7:r7 - (r0 << r0)

UARTCharsAvail_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> ip:<invalid> r7:<invalid> r6:<invalid> r0:<invalid>



void UARTSpaceAvail(word32 r0, word32 r3, word32 r6, word32 r7, word32 r9)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC r0 r3 r6 r7 r9
// LiveOut:
// Trashed: NZCV ip r0 r6 r7 r8
// Preserved: sp
UARTSpaceAvail_entry:
// DataOut: r0 r3 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A019:
	branch C l0000A01D
// DataOut: r0 r3 r6 r7 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A019_1:
	byte NZCV_31 = cond(__rcr(r9, 1, C) - r0 - C)
	C = (bool) NZCV_31 (alias)
	ZC = NZCV_31 (alias)
	N = NZCV_31 (alias)
// DataOut: r0 r3 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A01D:
	branch N l0000A021
// DataOut: r0 r3 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:<invalid>

l0000A01D_1:
	ZC = cond(r0 - r3 - C) (alias)
// DataOut: r0 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:<invalid>

l0000A021:
	branch ZC l0000A025
// DataOut: r0 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:<invalid> ip:<invalid>

l0000A021_thunk_UARTCharNonBlockingGet:
	UARTCharNonBlockingGet(r0, r6, r7)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> ip:<invalid>

l0000A021_1:
	word32 r7_20 = DPB(r7, 0x7010, 16)
// DataOut: r0 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r8:<invalid> ip:<invalid>

l0000A021_thunk_UARTCharNonBlockingGet:
	UARTCharNonBlockingGet(r0, r6, r7_20)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> ip:<invalid> r7:DPB(r7, 0x7010, 16)

UARTSpaceAvail_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:<invalid> ip:<invalid> r7:DPB(r7, 0x7010, 16) r6:<invalid> r0:<invalid>



void UARTCharNonBlockingGet(word32 r0, word32 r6, word32 r7)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV r0 r6 r7
// LiveOut:
// Trashed: r0 r6
// Preserved: sp
UARTCharNonBlockingGet_entry:
// DataOut: r0 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A025:
	branch N l0000A029
// DataOut: r0 r6 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A025_1:
	Mem38[r6:word32] = fp
// DataOut: r0 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A029:
	branch N l0000A02D
// DataOut: r0 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r6:r6 - 2921

l0000A029_1:
	__syscall(0x006800BF)
// DataOut: r0 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r6:r6 - 2921

l0000A02D:
	branch V l0000A031
// DataOut: r0 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp r6:r6 - 2921

l0000A031:
	branch Z l0000A035
// DataOut: r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp r6:r6 - 2921

l0000A031_thunk_UARTCharGet:
	UARTCharGet()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - 2921

l0000A031_1:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp r6:r6 - 2921

l0000A031_thunk_UARTCharGet:
	UARTCharGet()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - 2921 r0:<invalid>

l0000A02D_1:
	word32 sp_23
	byte N_24
	word32 r6_25
	byte V_26
	word32 r0_27
	byte Z_28
	word32 r7_29
	bool C_30
	byte NZCV_31
	call (word32) Mem0[r0:int16] (retsize: 0;)
		uses: C,N,NZCV,r0_18,r6_4,r7,sp_1,V,Z
		defs: C_30,N_24,NZCV_31,r0_27,r6_25,r7_29,sp_23,V_26,Z_28
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - 2921

UARTCharNonBlockingGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 - 2921 r0:r0 + 240



void UARTCharGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
UARTCharGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

UARTCharGet_entry:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp

l0000A035:
	branch Z l0000A039
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A035_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A039:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:0x000028F1



void UARTCharNonBlockingPut(word32 r0, word32 r7)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV r0 r7
// LiveOut:
// Trashed: r0
// Preserved: sp
UARTCharNonBlockingPut_entry:
// DataOut: r0 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A045:
	branch N l0000A045_then
	word32 sp_3
	byte N_4
	byte Z_5
	byte V_6
	word32 r0_7
	word32 r7_8
	bool C_9
	byte NZCV_10
	call fn001B0DF1 (retsize: 0;)
		uses: N,sp_1
		defs: C_9,N_4,NZCV_10,r0_7,r7_8,sp_3,V_6,Z_5
	return
// DataOut: r0 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A045_then:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A049:
	branch Z_5 l0000A04D
// DataOut: r0 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A04D:
	branch V_6 l0000A051
// DataOut: r0 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l0000A04D_1:
// DataOut: r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l0000A051:
	branch Z_5 l0000A051_thunk_UARTCharPut
// DataOut: r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp r0:r0 ^ r0 >> 32

l0000A051_thunk_UARTCharPut:
	UARTCharPut()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 ^ r0 >> 32
// Terminates process

l0000A051_1:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp r0:r0 ^ r0 >> 32

l0000A051_thunk_UARTCharPut:
	UARTCharPut()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>
// Terminates process

UARTCharNonBlockingPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 ^ r0 >> 32

l0000A049_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void UARTCharPut()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
UARTCharPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

UARTCharPut_entry:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp

l0000A055:
	branch Z l0000A059
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A055_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A059:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:0x000028F1



void UARTBreakCtl(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: NZCV fp pc r0 r1 r10 r2 r4 r6 r7 r8
// Preserved: sp
UARTBreakCtl_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A065:
	branch C l0000A069
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A065_1:
	r1 = 0x001A8000
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A069:
	branch NZV l0000A06D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:0x001A8000

l0000A069_1:
	r0 = 0x000031F0
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:0x001A8000

l0000A06D:
	branch N l0000A071
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:0x001A8000 r0:0x000031F0

l0000A06D_1:
	r7 = DPB(r7, 0x7062, 16)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:0x001A8000 r0:0x000031F0

l0000A071:
	branch NZV l0000A075
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:0x001A8000 r0:0x000031F0 r7:DPB(r7, 0x7062, 16)

l0000A071_1:
	r0 = 0x000031F0
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:0x001A8000 r0:0x000031F0 r7:DPB(r7, 0x7062, 16)

l0000A075:
	branch Z l0000A075_thunk_UARTIntRegister
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:0x001A8000 r0:0x000031F0 r7:DPB(r7, 0x7062, 16)

l0000A075_thunk_UARTIntRegister:
	UARTIntRegister(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, fp, ip, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:0x001A8000 r0:0x000031F0 r7:DPB(r7, 0x7062, 16)

l0000A075_1:
	word32 r7_15 = r7 - __rcr(r2, 1, C)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:0x001A8000 r0:0x000031F0 r7:DPB(r7, 0x7062, 16)

l0000A075_thunk_UARTIntRegister:
	UARTIntRegister(r0, r1, r2, r3, r4, r5, r6, r7_15, r8, r10, fp, ip, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:0x001A8000 r0:0x000031F0 r7:<invalid>

UARTBreakCtl_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r7:<invalid> pc:<invalid> r10:<invalid> r4:<invalid> r2:<invalid> r8:<invalid> r6:<invalid> fp:<invalid>



void UARTIntRegister(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: NZCV fp pc r0 r1 r10 r2 r4 r6 r7 r8
// Preserved: sp
UARTIntRegister_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A079:
	branch NV l0000A07D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A07D:
	branch Z l0000A081
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A07D_1:
	pc = pc + 3138
	r0 = Mem0[pc + 3138:word32]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A081:
	branch C l0000A085
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid>

l0000A081_1:
	r1 = r4 ^ r4 >> 12
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid>

l0000A085:
	branch C l0000A089
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12

l0000A089:
	branch NZV l0000A08D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12

l0000A08D:
	__syscall(0x004010E8)
	branch Z l0000A095
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12

l0000A091_1:
	r10 = (word32) Mem0[r10:int16]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12

l0000A095:
	branch Z l0000A095_thunk_UARTIntUnregister
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12 r10:<invalid>

l0000A095_thunk_UARTIntUnregister:
	UARTIntUnregister(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, fp, ip, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12 r10:<invalid>

l0000A095_1:
	word32 r0_15 = r0 - (r0 >> 1)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12 r10:<invalid>

l0000A095_thunk_UARTIntUnregister:
	UARTIntUnregister(r0_15, r1, r2, r3, r4, r5, r6, r7, r8, r10, fp, ip, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12 r10:<invalid>

UARTIntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r1:<invalid> r10:<invalid> r7:<invalid> r4:<invalid> r2:<invalid> r8:<invalid> r6:<invalid> fp:<invalid>

l0000A089_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12

l0000A085_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12

l0000A079_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void UARTIntUnregister(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: NZCV fp pc r0 r1 r10 r2 r4 r6 r7 r8
// Preserved: sp
UARTIntUnregister_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A099:
	branch NV l0000A09D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A09D:
	branch Z l0000A0A1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A09D_1:
	pc = pc + 3138
	r0 = Mem0[pc + 3138:word32]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A0A1:
	branch C l0000A0A5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid>

l0000A0A1_1:
	r1 = r4 ^ r4 >> 12
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid>

l0000A0A5:
	branch NZV l0000A0A9
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12

l0000A0A9:
	branch NZV l0000A0AD
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12

l0000A0AD:
	__syscall(0x004010E8)
	branch Z l0000A0B5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12

l0000A0B1_1:
	r10 = r10 + 39
	r4 = (word32) Mem0[r10:int16]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12

l0000A0B5:
	branch ZC l0000A0B5_thunk_UARTIntEnable
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12 r10:r10 + 39 r4:<invalid>

l0000A0B5_thunk_UARTIntEnable:
	UARTIntEnable(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, fp, ip, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12 r10:r10 + 39 r4:<invalid>

l0000A0B5_1:
	word32 r0_74 = DPB(r0, 0x00C0, 16)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12 r10:r10 + 39 r4:<invalid>

l0000A0B5_thunk_UARTIntEnable:
	UARTIntEnable(r0_74, r1, r2, r3, r4, r5, r6, r7, r8, r10, fp, ip, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12 r10:r10 + 39 r4:<invalid>

l0000A0A9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12

l0000A0A5_1:
	word32 r7_36 = r7 + r6
	word32 sp_50
	byte NV_51
	byte Z_52
	word32 r0_53
	word32 pc_54
	byte C_55
	word32 r1_56
	word32 r4_57
	byte NZV_58
	word32 r7_59
	word32 r6_60
	byte NZV_61
	word32 r10_62
	byte ZC_63
	word32 r2_64
	word32 r3_65
	word32 r5_66
	word32 r8_67
	word32 fp_68
	word32 ip_69
	word32 lr_70
	word32 spsr_71
	call (word32) Mem0[r7_36:byte] (retsize: 0;)
		uses: C,fp,ip,lr,NV,NZV,NZV,pc_6,r0_7,r1_10,r10,r2,r3,r4,r5,r6,r7_36,r8,sp_1,spsr,Z,ZC
		defs: C_55,fp_68,ip_69,lr_70,NV_51,NZV_58,NZV_61,pc_54,r0_53,r1_56,r10_62,r2_64,r3_65,r4_57,r5_66,r6_60,r7_59,r8_67,sp_50,spsr_71,Z_52,ZC_63
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:pc + 3138 r0:<invalid> r1:r4 ^ r4 >> 12

UARTIntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:<invalid> r0:<invalid> r1:<invalid> r7:<invalid> r10:r10 + 39 r4:<invalid> r2:<invalid> r8:<invalid> r6:<invalid> fp:<invalid>

l0000A099_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void UARTIntEnable(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: NZCV fp pc r0 r1 r2 r6 r7 r8
// Preserved: sp
UARTIntEnable_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A0B9:
	branch ZC l0000A0BD
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A0BD:
	branch ZC l0000A0BD_thunk_UARTIntDisable
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZV
// SymbolicIn: sp:fp

l0000A0BD_thunk_UARTIntDisable:
	UARTIntDisable(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, fp, ip, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0BD_1:
	word32 r7_5 = DPB(r7, 0x7063, 16)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZV
// SymbolicIn: sp:fp

l0000A0BD_thunk_UARTIntDisable:
	UARTIntDisable(r0, r1, r2, r3, r4, r5, r6, r7_5, r8, r10, fp, ip, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:DPB(r7, 0x7063, 16)

UARTIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:<invalid> r2:<invalid> r8:<invalid> r0:<invalid> r1:<invalid> r6:<invalid> pc:<invalid> fp:<invalid>

l0000A0B9_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void UARTIntDisable(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: NZCV fp pc r0 r1 r2 r6 r7 r8
// Preserved: sp
UARTIntDisable_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l0000A0C1:
	branch Z l0000A0C5
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l0000A0C1_1:
	r2 = ~__ror(fp, 6)
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp

l0000A0C5:
	branch V l0000A0C9
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r2:~<invalid>

l0000A0C5_1:
	r8 = (r1 << 2) - r3
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r2:~<invalid>

l0000A0C9:
	branch Z l0000A0C9_thunk_UARTIntStatus
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NV
// SymbolicIn: sp:fp r2:~<invalid> r8:(r1 << 2) - r3

l0000A0C9_thunk_UARTIntStatus:
	UARTIntStatus(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, fp, ip, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:~<invalid> r8:(r1 << 2) - r3

l0000A0C9_1:
	word32 r0_15 = Mem0[pc + 4:word32]
	word32 r1_16 = Mem0[pc + 8:word32]
	word32 r2_17 = Mem0[pc + 12:word32]
	word32 r6_18 = Mem0[pc + 16:word32]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NV
// SymbolicIn: sp:fp r2:~<invalid> r8:(r1 << 2) - r3

l0000A0C9_thunk_UARTIntStatus:
	UARTIntStatus(r0_15, r1_16, r2_17, r3, r4, r5, r6_18, r7, r8, r10, fp, ip, lr, pc + 20, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r8:(r1 << 2) - r3 r0:<invalid> r1:<invalid> r6:<invalid> pc:pc + 20

UARTIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r8:(r1 << 2) - r3 r0:<invalid> r1:<invalid> r6:<invalid> pc:<invalid> fp:<invalid> r7:<invalid>



void UARTIntStatus(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: NZCV fp pc r0 r1 r2 r6 r7
// Preserved: sp
UARTIntStatus_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NV
// SymbolicIn: sp:fp

l0000A0CD:
	branch V l0000A0D1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NV
// SymbolicIn: sp:fp

l0000A0CD_1:
	Mem27[fp:word16] = (uint16) ip
// DataOut: ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NV
// SymbolicIn: sp:fp

l0000A0D1:
	branch V l0000A0D5
// DataOut: ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NV
// SymbolicIn: sp:fp fp:fp - 9

l0000A0D1_1:
	r0 = (r7 >> 32) - ip
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NV
// SymbolicIn: sp:fp fp:fp - 9

l0000A0D5:
	branch N l0000A0D5_thunk_UARTIntClear
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): V
// SymbolicIn: sp:fp fp:fp - 9 r0:(r7 >> 32) - ip

l0000A0D5_thunk_UARTIntClear:
	UARTIntClear(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:fp - 9 r0:(r7 >> 32) - ip

l0000A0D5_1:
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): V
// SymbolicIn: sp:fp fp:fp - 9 r0:(r7 >> 32) - ip

l0000A0D5_thunk_UARTIntClear:
	UARTIntClear(r7 >> 32, r1, r2, r3, r4, r5, r6, r7, r8, r10, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:fp - 9 r0:r7 >> 32

UARTIntStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:fp - 9 r0:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> r6:<invalid> pc:<invalid>



void UARTIntClear(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  V lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: NZCV pc r0 r1 r2 r6 r7
// Preserved: sp
UARTIntClear_entry:
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): CV
// SymbolicIn: sp:fp

l0000A0D9:
	branch V l0000A0D9_thunk_CPUcpsie
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): CV
// SymbolicIn: sp:fp

l0000A0D9_thunk_CPUcpsie:
	CPUcpsie(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0D9_1:
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): CV
// SymbolicIn: sp:fp

l0000A0D9_thunk_CPUcpsie:
	CPUcpsie(r0, r1, r2, r3, r4, r5, r6, r7 - 0x00000064, r8, r10, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 - 0x00000064

UARTIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r6:<invalid> pc:<invalid>



void CPUcpsie(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  CV lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: NZCV pc r0 r1 r2 r6 r7
// Preserved: sp
CPUcpsie_entry:
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): CV
// SymbolicIn: sp:fp

l0000A0DD:
	branch V l0000A0E1
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): CV
// SymbolicIn: sp:fp

l0000A0E1:
	branch V l0000A0E1_thunk_CPUcpsid
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): CV
// SymbolicIn: sp:fp

l0000A0E1_thunk_CPUcpsid:
	CPUcpsid(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0E1_1:
	word32 r0_8 = 0x0000A130 + C
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): CV
// SymbolicIn: sp:fp

l0000A0E1_thunk_CPUcpsid:
	CPUcpsid(r0_8, r1, r2, r3, r4, r5, r6, r7, r8, r10, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

CPUcpsie_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r2:<invalid> r6:<invalid> pc:<invalid> r7:<invalid>

l0000A0DD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void CPUcpsid(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  CV lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: NZCV pc r0 r1 r2 r6 r7
// Preserved: sp
CPUcpsid_entry:
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): CV
// SymbolicIn: sp:fp

l0000A0E5:
	branch V l0000A0E9
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): CV
// SymbolicIn: sp:fp

l0000A0E9:
	branch C l0000A0E9_thunk_CPUwfi
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): CV
// SymbolicIn: sp:fp

l0000A0E9_thunk_CPUwfi:
	CPUwfi(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0E9_1:
	word32 r0_9 = 0x0000A0F1 + (r7 >> 32) + C
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): CV
// SymbolicIn: sp:fp

l0000A0E9_thunk_CPUwfi:
	CPUwfi(r0_9, r1, r2, r3, r4, r5, r6, r7, r8, r10, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

CPUcpsid_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r2:<invalid> r6:<invalid> pc:<invalid> r7:<invalid>

l0000A0E5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void CPUwfi(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  CV lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: pc r0 r1 r2 r6 r7
// Preserved: sp
CPUwfi_entry:
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A0ED:
	branch V l0000A0F1
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A0F1:
	branch C l0000A0F1_thunk_I2CMasterInit
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A0F1_thunk_I2CMasterInit:
	I2CMasterInit(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0F1_1:
	word32 r0_11 = Mem0[pc:word32]
	word32 r1_12 = Mem0[pc + 4:word32]
	word32 r2_13 = Mem0[pc + 8:word32]
	word32 r6_14 = Mem0[pc + 12:word32]
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A0F1_thunk_I2CMasterInit:
	I2CMasterInit(r0_11, r1_12, r2_13, r3, r4, r5, r6_14, r7, r8, r10, lr, pc + 16, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r2:<invalid> r6:<invalid> pc:pc + 16

CPUwfi_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r2:<invalid> r6:<invalid> pc:pc + 16 r7:<invalid>

l0000A0ED_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CMasterInit(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed: r0 r1 r7
// Preserved: sp
I2CMasterInit_entry:
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A0F5:
	branch Z l0000A0F9
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A0F5_1:
	r0 = r6 - 0x00002D40
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A0F9:
	branch N l0000A0FD
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r6 - 0x00002D40
// LocalsOut: fp(32)

l0000A0F9_1:
	r0 = r6 - 0x6A000000
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:r6 - 0x00002D40
// LocalsOut: fp(32)

l0000A0FD:
	branch Z l0000A101
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>
// LocalsOut: fp(32)

l0000A0FD_1:
	r1 = r2 & 0x000000F0
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid>
// LocalsOut: fp(32)

l0000A101:
	branch V l0000A105
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0
// LocalsOut: fp(32)

l0000A105:
	branch Z l0000A109
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0
// LocalsOut: fp(32)

l0000A109:
	branch Z l0000A10D
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0
// LocalsOut: fp(32)

l0000A109_1:
	byte NZCV_114 = cond(r8 ^ r10 >> 2)
	Z = NZCV_114 (alias)
	NZV = NZCV_114 (alias)
	ZC = NZCV_114 (alias)
	C = NZCV_114 (alias)
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0
// LocalsOut: fp(32)

l0000A10D:
	branch Z l0000A111
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0
// LocalsOut: fp(32)

l0000A10D_1:
	r0 = 0x002D0000
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0
// LocalsOut: fp(32)

l0000A111:
	branch NZV l0000A115
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0
// LocalsOut: fp(32)

l0000A111_1:
	byte NZC_106 = cond(r8 & r6 >> 2)
	Z = NZC_106 (alias)
	ZC = NZC_106 (alias)
	C = NZC_106 (alias)
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0
// LocalsOut: fp(32)

l0000A115:
	branch Z l0000A119
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0
// LocalsOut: fp(32)

l0000A119:
	branch C l0000A11D
// DataOut: lr pc r0 r1 r10 r2 r3 r4 r5 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0
// LocalsOut: fp(32)

l0000A119_1:
	Mem97[r0:word32] = r0
	Mem98[r0 + 4:word32] = r3
	Mem99[r0 + 8:word32] = r4
	Mem100[r0 + 12:word32] = r5
	Mem101[r0 + 16:word32] = r8
	Mem102[r0 + 20:word32] = fp
	Mem103[r0 + 24:word32] = lr
	Mem104[r0 + 28:word32] = pc
	r0 = r0 + 32
// DataOut: pc r0 r1 r10 r2 r3 r4 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0

l0000A11D:
	branch ZC l0000A121
// DataOut: pc r0 r1 r10 r2 r3 r4 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0

l0000A11D_1:
	r0 = (word32) Mem0[0x0000A132:uint16]
// DataOut: r0 r1 r10 r2 r3 r4 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0

l0000A121:
	branch Z l0000A125
// DataOut: r0 r1 r10 r2 r3 r4 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0 pc:pc + 13

l0000A121_1:
	r1 = r0 & r4 << 29
// DataOut: r0 r1 r10 r2 r3 r4 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0 pc:pc + 13

l0000A125:
	branch Z l0000A125_thunk_I2CSlaveInit
// DataOut: r0 r1 r10 r2 r3 r4 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> pc:pc + 13

l0000A125_thunk_I2CSlaveInit:
	I2CSlaveInit(r0, r1, r2, r3, r4, r7, r8, r10, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> pc:pc + 13
// Terminates process

l0000A125_1:
	word32 r7_92 = r0 & r2 << r10
// DataOut: r0 r1 r10 r2 r3 r4 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> pc:pc + 13

l0000A125_thunk_I2CSlaveInit:
	I2CSlaveInit(r0, r1, r2, r3, r4, r7_92, r8, r10, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> pc:pc + 13 r7:<invalid>
// Terminates process

l0000A115_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0

l0000A105_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0

l0000A101_1:
	word32 sp_50
	byte Z_51
	word32 r0_52
	word32 r6_53
	byte N_54
	word32 r1_55
	word32 r2_56
	byte V_57
	word32 pc_58
	word32 r7_59
	word32 r8_60
	word32 r10_61
	byte NZCV_62
	byte NZV_63
	byte NZC_64
	byte C_65
	word32 r3_66
	word32 r4_67
	word32 r5_68
	word32 lr_69
	byte ZC_70
	word32 spsr_71
	call (word32) Mem0[r7 + 3938:byte] (retsize: 0;)
		uses: C,lr,N,NZC,NZCV,NZV,pc,r0_6,r1_8,r10,r2,r3,r4,r5,r6,r7_33,r8,sp_1,spsr,V,Z,ZC
		defs: C_65,lr_69,N_54,NZC_64,NZCV_62,NZV_63,pc_58,r0_52,r1_55,r10_61,r2_56,r3_66,r4_67,r5_68,r6_53,r7_59,r8_60,sp_50,spsr_71,V_57,Z_51,ZC_70
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0

I2CMasterInit_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:r2 & 0x000000F0 r7:r7 + 3938



void I2CSlaveInit(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r7, word32 r8, word32 r10, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV r0 r1 r10 r2 r3 r4 r7 r8 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CSlaveInit_entry:
// DataOut: r0 r1 r10 r2 r3 r4 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A129:
	branch NV l0000A12D
// DataOut: r0 r1 r10 r2 r3 r4 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A129_1:
	Mem36[r4:word16] = (uint16) r0
// DataOut: r0 r1 r10 r2 r3 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A12D:
	branch Z l0000A131
// DataOut: r0 r1 r10 r2 r3 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20

l0000A12D_1:
	__msr(spsr, 0x00000CF5)
// DataOut: r0 r1 r10 r2 r3 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20

l0000A131:
	branch C l0000A135
// DataOut: r0 r1 r10 r2 r3 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20

l0000A131_1:
	byte NZCV_30 = cond(__ror(r8, 6) - r0 - C)
	Z = NZCV_30 (alias)
	N = NZCV_30 (alias)
// DataOut: r0 r1 r10 r2 r3 r7
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r4:r4 - 20

l0000A135:
	branch N l0000A139
// DataOut: r0 r1 r10 r2 r3 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r4:<invalid>

l0000A135_1:
	Mem26[r0:byte] = (byte) r1
	r0 = r0 - 771
// DataOut: r0 r10 r2 r3 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r4:<invalid>

l0000A139:
	branch Z l0000A13D
// DataOut: r0 r10 r2 r3 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r4:<invalid> r0:r0 - 771

l0000A139_1:
	r0 = __ror(r0, 2) - r0
// DataOut: r0 r10 r2 r3 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r4:<invalid> r0:r0 - 771

l0000A13D:
	branch Z l0000A13D_thunk_I2CMasterEnable
// DataOut: r0 r10 r2 r3 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r4:<invalid> r0:<invalid>

l0000A13D_thunk_I2CMasterEnable:
	I2CMasterEnable(r0, r2, r3, r7, r10)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r0:<invalid>
// Terminates process

l0000A13D_1:
	word32 r7_20 = DPB(r7, 0x70BC, 16)
// DataOut: r0 r10 r2 r3 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r4:<invalid> r0:<invalid>

l0000A13D_thunk_I2CMasterEnable:
	I2CMasterEnable(r0, r2, r3, r7_20, r10)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r0:<invalid> r7:DPB(r7, 0x70BC, 16)
// Terminates process

I2CSlaveInit_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CMasterEnable(word32 r0, word32 r2, word32 r3, word32 r7, word32 r10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV r0 r10 r2 r3 r7
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CMasterEnable_entry:
// DataOut: r0 r10 r2 r3 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A141:
	branch Z l0000A145
// DataOut: r0 r10 r2 r3 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A141_1:
	byte NZCV_26 = cond(__ror(r10, 6) - r0 - C)
	Z = NZCV_26 (alias)
	V = NZCV_26 (alias)
// DataOut: r2 r3 r7
// DataOut (flags): ZV
// SymbolicIn: sp:fp

l0000A145:
	branch V l0000A149
// DataOut: r2 r3 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp r4:<invalid>

l0000A145_1:
// DataOut: r7
// DataOut (flags): Z
// SymbolicIn: sp:fp r4:<invalid>

l0000A149:
	branch Z l0000A149_thunk_I2CSlaveEnable
// DataOut: r7
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r0:(r3 << 6) - r2

l0000A149_thunk_I2CSlaveEnable:
	I2CSlaveEnable()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r0:(r3 << 6) - r2
// Terminates process

l0000A149_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r0:(r3 << 6) - r2

l0000A149_thunk_I2CSlaveEnable:
	I2CSlaveEnable()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:<invalid> r0:r7 >> 32
// Terminates process

I2CMasterEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CSlaveEnable()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CSlaveEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

I2CSlaveEnable_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A14D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CMasterDisable(word32 r0, word32 r2, word32 r3, word32 r7, word32 r10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV r0 r10 r2 r3 r7
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CMasterDisable_entry:
// DataOut: r0 r10 r2 r3 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A161:
	branch Z l0000A165
// DataOut: r0 r10 r2 r3 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A161_1:
	byte NZCV_23 = cond(__ror(r10, 6) - r0 - C)
	Z = NZCV_23 (alias)
	V = NZCV_23 (alias)
// DataOut: r2 r3 r7
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A165:
	branch V l0000A169
// DataOut: r2 r3 r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp r2:<invalid>

l0000A165_1:
// DataOut: r7
// DataOut (flags): ZC
// SymbolicIn: sp:fp r2:<invalid>

l0000A169:
	branch Z l0000A169_thunk_I2CSlaveDisable
// DataOut: r7
// DataOut (flags): C
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid>

l0000A169_thunk_I2CSlaveDisable:
	I2CSlaveDisable()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid>
// Terminates process

l0000A169_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid>

l0000A169_thunk_I2CSlaveDisable:
	I2CSlaveDisable()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r0:<invalid>
// Terminates process

I2CMasterDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CSlaveDisable()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CSlaveDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

I2CSlaveDisable_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A16D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CIntRegister(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip pc r0 r1 r3 r4 r5 r6 r7 r9
// Preserved: sp
I2CIntRegister_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A181:
	__syscall(0x002018B5)
	branch NZV l0000A189
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A189:
	branch Z l0000A18D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A189_1:
	Mem69[r0:word32] = r3
	Mem70[r0 + 4:word32] = r5
	Mem71[r0 + 8:word32] = r6
	Mem72[r0 + 12:word32] = r7
	Mem73[r0 + 16:word32] = fp
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A18D:
	branch C l0000A191
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A191:
	branch Z l0000A191_thunk_I2CIntUnregister
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A191_thunk_I2CIntUnregister:
	I2CIntUnregister(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A191_1:
	word32 r1_63 = Mem0[pc:word32]
	word32 r3_64 = Mem0[pc + 4:word32]
	word32 r4_65 = Mem0[pc + 8:word32]
	word32 r5_66 = Mem0[pc + 12:word32]
	word32 r7_67 = Mem0[pc + 16:word32]
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A191_thunk_I2CIntUnregister:
	I2CIntUnregister(r0, r1_63, r2, r3_64, r4_65, r5_66, r6, r7_67, r8, r9, r10, fp, ip, lr, pc + 20, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> r7:<invalid> pc:pc + 20

l0000A18D_1:
	word32 sp_43
	byte NZV_44
	byte Z_45
	word32 r0_46
	word32 r3_47
	word32 r5_48
	word32 r6_49
	word32 r7_50
	word32 fp_51
	byte C_52
	word32 pc_53
	word32 r1_54
	word32 r4_55
	word32 r2_56
	word32 r8_57
	word32 r9_58
	word32 r10_59
	word32 ip_60
	word32 lr_61
	word32 spsr_62
	call (word32) Mem0[r7 + 3872:byte] (retsize: 0;)
		uses: C,fp,ip,lr,NZV,pc,r0,r1,r10,r2,r3,r4,r5,r6,r7_26,r8,r9,sp_1,spsr,Z
		defs: C_52,fp_51,ip_60,lr_61,NZV_44,pc_53,r0_46,r1_54,r10_59,r2_56,r3_47,r4_55,r5_48,r6_49,r7_50,r8_57,r9_58,sp_43,spsr_62,Z_45
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CIntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:<invalid> r1:<invalid> r3:<invalid> r4:<invalid> r5:<invalid> pc:<invalid> r0:<invalid> ip:<invalid> r9:<invalid> r6:<invalid>

l0000A185_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CIntUnregister(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 ip, word32 lr, word32 pc, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip pc r0 r3 r5 r6 r7 r9
// Preserved: sp
I2CIntUnregister_entry:
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A195:
	__syscall(0x002018B5)
	branch NZV l0000A19D
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A19D:
	branch Z l0000A1A1
// DataOut: fp ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A19D_1:
	Mem25[r0:word32] = r3
	Mem26[r0 + 4:word32] = r5
	Mem27[r0 + 8:word32] = r6
	Mem28[r0 + 12:word32] = r7
	Mem30[r0 + 16:word32] = fp
// DataOut: ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A1A1:
	branch NZV l0000A1A5
// DataOut: ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZV
// SymbolicIn: sp:fp

l0000A1A5:
	branch Z l0000A1A5_thunk_I2CMasterIntEnable
// DataOut: ip lr pc r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZV
// SymbolicIn: sp:fp

l0000A1A5_thunk_I2CMasterIntEnable:
	I2CMasterIntEnable(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1A5_1:
	word32 r0_11 = (word32) Mem0[pc + r9:uint16]
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZV
// SymbolicIn: sp:fp

l0000A1A5_thunk_I2CMasterIntEnable:
	I2CMasterIntEnable(r0_11, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp pc:pc + r9 r0:<invalid>

I2CIntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> pc:pc + r9 ip:<invalid> r9:<invalid> r7:<invalid> r3:<invalid> r5:<invalid> r6:<invalid>

l0000A1A1_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A199_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CMasterIntEnable(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 ip, word32 lr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZV ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip r0 r3 r5 r6 r7 r9
// Preserved: sp
I2CMasterIntEnable_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A1A9:
	branch V l0000A1AD
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A1A9_1:
	r0 = (r3 >> 6) - r1
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A1AD:
	branch Z l0000A1AD_thunk_I2CSlaveIntEnable
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:(r3 >> 6) - r1

l0000A1AD_thunk_I2CSlaveIntEnable:
	I2CSlaveIntEnable(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:(r3 >> 6) - r1

l0000A1AD_1:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r0:(r3 >> 6) - r1

l0000A1AD_thunk_I2CSlaveIntEnable:
	I2CSlaveIntEnable(r7 >> 32, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r7 >> 32

I2CMasterIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> ip:<invalid> r9:<invalid> r7:<invalid> r3:<invalid> r5:<invalid> r6:<invalid>



void I2CSlaveIntEnable(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 ip, word32 lr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip r0 r3 r5 r6 r7 r9
// Preserved: sp
I2CSlaveIntEnable_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A1B1:
	branch V l0000A1B5
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A1B1_1:
	ip = (r3 >> 6) - r0
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A1B5:
	branch Z l0000A1B5_thunk_I2CMasterIntDisable
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp ip:(r3 >> 6) - r0

l0000A1B5_thunk_I2CMasterIntDisable:
	I2CMasterIntDisable(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:(r3 >> 6) - r0

l0000A1B5_1:
	word32 r0_13 = 0x0000A1BD + (r7 >> 32) + C
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp ip:(r3 >> 6) - r0

l0000A1B5_thunk_I2CMasterIntDisable:
	I2CMasterIntDisable(r0_13, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:(r3 >> 6) - r0 r0:<invalid>

I2CSlaveIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:<invalid> r0:<invalid> r9:<invalid> r7:<invalid> r3:<invalid> r5:<invalid> r6:<invalid>



void I2CMasterIntDisable(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 ip, word32 lr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZCV ip r0 r3 r5 r6 r7 r9
// Preserved: sp
I2CMasterIntDisable_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A1B9:
	branch V l0000A1BD
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A1B9_1:
	r0 = (r3 >> 6) - r1
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A1BD:
	branch Z l0000A1BD_thunk_I2CSlaveIntDisable
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): CV
// SymbolicIn: sp:fp r0:(r3 >> 6) - r1

l0000A1BD_thunk_I2CSlaveIntDisable:
	I2CSlaveIntDisable(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:(r3 >> 6) - r1

l0000A1BD_1:
	word32 r0_13 = 0x0000A1C5 + (r7 >> 32) + C
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): CV
// SymbolicIn: sp:fp r0:(r3 >> 6) - r1

l0000A1BD_thunk_I2CSlaveIntDisable:
	I2CSlaveIntDisable(r0_13, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

I2CMasterIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> ip:<invalid> r9:<invalid> r7:<invalid> r3:<invalid> r5:<invalid> r6:<invalid>



void I2CSlaveIntDisable(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 ip, word32 lr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  CV ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZC ip r0 r3 r5 r6 r7 r9
// Preserved: sp
I2CSlaveIntDisable_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A1C1:
	branch V l0000A1C5
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A1C1_1:
	ip = (r3 >> 6) - r0
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A1C5:
	branch C l0000A1C5_thunk_I2CMasterIntStatus
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp ip:(r3 >> 6) - r0

l0000A1C5_thunk_I2CMasterIntStatus:
	I2CMasterIntStatus(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:(r3 >> 6) - r0

l0000A1C5_1:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp ip:(r3 >> 6) - r0

l0000A1C5_thunk_I2CMasterIntStatus:
	I2CMasterIntStatus(r7 >> 32, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:(r3 >> 6) - r0 r0:r7 >> 32

I2CSlaveIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:(r3 >> 6) - r0 r0:<invalid> r9:<invalid> r7:<invalid> r3:<invalid> r5:<invalid> r6:<invalid>



void I2CMasterIntStatus(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 ip, word32 lr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: NZC r0 r3 r5 r6 r7 r9
// Preserved: sp
I2CMasterIntStatus_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A1C9:
	branch Z l0000A1CD
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A1C9_1:
	Mem82[r9:word16] = (uint16) r4
	r9 = r9 - 9
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A1CD:
	branch Z l0000A1D1
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r9:r9 - 9

l0000A1D1:
	branch ZC l0000A1D5
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r9:r9 - 9

l0000A1D1_1:
	r7 = r7 - (r0 >> 32)
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r9:r9 - 9

l0000A1D5:
	branch Z l0000A1D9
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r9:r9 - 9 r7:r7 - (r0 >> 32)

l0000A1D5_1:
	word32 r0_76 = Mem0[r0:word32]
	r3 = Mem0[r0_76 - 4:word32]
	r5 = Mem0[r0_76 - 8:word32]
	r6 = Mem0[r0_76 - 12:word32]
	r0 = r0_76 + 16
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r9:r9 - 9 r7:r7 - (r0 >> 32)

l0000A1D9:
	branch V l0000A1DD
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r9:r9 - 9 r7:r7 - (r0 >> 32) r0:<invalid> r3:<invalid> r5:<invalid> r6:<invalid>

l0000A1D9_1:
	Mem73[r0:word16] = (uint16) r0
	r0 = r0 - 31
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r9:r9 - 9 r7:r7 - (r0 >> 32) r0:<invalid> r3:<invalid> r5:<invalid> r6:<invalid>

l0000A1DD:
	branch C l0000A1DD_thunk_I2CSlaveIntStatus
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r9:r9 - 9 r7:r7 - (r0 >> 32) r0:<invalid> r3:<invalid> r5:<invalid> r6:<invalid>

l0000A1DD_thunk_I2CSlaveIntStatus:
	I2CSlaveIntStatus(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 - 9 r7:r7 - (r0 >> 32) r0:<invalid> r3:<invalid> r5:<invalid> r6:<invalid>

l0000A1DD_1:
	word32 r0_68 = r7 >> 32
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZV
// SymbolicIn: sp:fp r9:r9 - 9 r7:r7 - (r0 >> 32) r0:<invalid> r3:<invalid> r5:<invalid> r6:<invalid>

l0000A1DD_thunk_I2CSlaveIntStatus:
	I2CSlaveIntStatus(r0_68, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 - 9 r7:r7 - (r0 >> 32) r0:r7 - (r0 >> 32) >> 32 r3:<invalid> r5:<invalid> r6:<invalid>

l0000A1CD_1:
	word32 sp_42
	byte Z_43
	word32 r4_44
	word32 r9_45
	word32 r0_46
	word32 r8_47
	byte ZC_48
	word32 r7_49
	word32 r3_50
	word32 r5_51
	word32 r6_52
	byte V_53
	byte C_54
	byte NZC_55
	word32 r1_56
	word32 r2_57
	word32 r10_58
	word32 ip_59
	word32 lr_60
	word32 spsr_61
	call r0 >> r8 (retsize: 0;)
		uses: C,ip,lr,NZC,r0,r1,r10,r2,r3,r4,r5,r6,r7,r8,r9_4,sp_1,spsr,V,Z,ZC
		defs: C_54,ip_59,lr_60,NZC_55,r0_46,r1_56,r10_58,r2_57,r3_50,r4_44,r5_51,r6_52,r7_49,r8_47,r9_45,sp_42,spsr_61,V_53,Z_43,ZC_48
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 - 9

I2CMasterIntStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:<invalid> r7:r7 - (r0 >> 32) r0:<invalid> r3:<invalid> r5:<invalid> r6:<invalid>



void I2CSlaveIntStatus(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 ip, word32 lr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZV ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// LiveOut:
// Trashed: r9
// Preserved: sp
I2CSlaveIntStatus_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A1E1:
	branch Z l0000A1E5
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A1E1_1:
	Mem78[r9:word16] = (uint16) r0
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A1E5:
	branch Z l0000A1E9
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r9:r9 - 9

l0000A1E9:
	branch N l0000A1ED
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r9:r9 - 9

l0000A1E9_1:
	r7 = r7 - (r0 >> 32)
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r9:r9 - 9

l0000A1ED:
	branch Z l0000A1F1
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r9:r9 - 9 r7:r7 - (r0 >> 32)

l0000A1ED_1:
	word32 r0_72 = Mem0[r0:word32]
	r3 = Mem0[r0_72 - 4:word32]
	r5 = Mem0[r0_72 - 8:word32]
	r6 = Mem0[r0_72 - 12:word32]
	r0 = r0_72 + 16
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r9:r9 - 9 r7:r7 - (r0 >> 32)

l0000A1F1:
	branch V l0000A1F5
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r9:r9 - 9 r7:r7 - (r0 >> 32) r0:<invalid> r3:<invalid> r5:<invalid> r6:<invalid>

l0000A1F1_1:
	Mem69[r0:word16] = (uint16) r0
	r0 = r0 - 31
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r9:r9 - 9 r7:r7 - (r0 >> 32) r0:<invalid> r3:<invalid> r5:<invalid> r6:<invalid>

l0000A1F5:
	branch Z l0000A1F5_thunk_I2CMasterIntClear
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r9:r9 - 9 r7:r7 - (r0 >> 32) r0:<invalid> r3:<invalid> r5:<invalid> r6:<invalid>

l0000A1F5_thunk_I2CMasterIntClear:
	I2CMasterIntClear(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 - 9 r7:r7 - (r0 >> 32) r0:<invalid> r3:<invalid> r5:<invalid> r6:<invalid>
// Terminates process

l0000A1F5_1:
	word32 r0_65 = r7 >> 32
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): ZC
// SymbolicIn: sp:fp r9:r9 - 9 r7:r7 - (r0 >> 32) r0:<invalid> r3:<invalid> r5:<invalid> r6:<invalid>

l0000A1F5_thunk_I2CMasterIntClear:
	I2CMasterIntClear(r0_65, r1, r2, r3, r4, r5, r6, r7, r8, r10, ip, lr, spsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 - 9 r7:r7 - (r0 >> 32) r0:r7 - (r0 >> 32) >> 32 r3:<invalid> r5:<invalid> r6:<invalid>
// Terminates process

l0000A1E5_1:
	word32 sp_40
	byte Z_41
	word32 r0_42
	word32 r9_43
	word32 r8_44
	byte N_45
	word32 r7_46
	word32 r3_47
	word32 r5_48
	word32 r6_49
	byte V_50
	byte NZC_51
	word32 r1_52
	word32 r2_53
	word32 r4_54
	word32 r10_55
	word32 ip_56
	word32 lr_57
	word32 spsr_58
	call r0 >> r8 (retsize: 0;)
		uses: ip,lr,N,NZC,r0,r1,r10,r2,r3,r4,r5,r6,r7,r8,r9_4,sp_1,spsr,V,Z
		defs: ip_56,lr_57,N_45,NZC_51,r0_42,r1_52,r10_55,r2_53,r3_47,r4_54,r5_48,r6_49,r7_46,r8_44,r9_43,sp_40,spsr_58,V_50,Z_41
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 - 9

I2CSlaveIntStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 - 9



void I2CMasterIntClear(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 lr, word32 spsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CMasterIntClear_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A1F9:
	branch ZC l0000A1FD
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 spsr
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A1F9_1:
	__msr(spsr, 0x00000323)
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A1FD:
	branch Z l0000A1FD_thunk_I2CSlaveIntClear
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NCV
// SymbolicIn: sp:fp

l0000A1FD_thunk_I2CSlaveIntClear:
	I2CSlaveIntClear(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

I2CMasterIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1FD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CSlaveIntClear(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NCV ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CSlaveIntClear_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A201:
	branch V l0000A205
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000A201_1:
	r8 = (r3 >> 6) - r1
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000A205:
	branch N l0000A205_thunk_I2CMasterSlaveAddrSet
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:(r3 >> 6) - r1

l0000A205_thunk_I2CMasterSlaveAddrSet:
	I2CMasterSlaveAddrSet(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:(r3 >> 6) - r1
// Terminates process

l0000A205_1:
	word32 r0_12 = 0x0000A254 + C
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r8:(r3 >> 6) - r1

l0000A205_thunk_I2CMasterSlaveAddrSet:
	I2CMasterSlaveAddrSet(r0_12, r1, r2, r3, r4, r5, r6, r7, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:(r3 >> 6) - r1 r0:<invalid>
// Terminates process

I2CSlaveIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CMasterSlaveAddrSet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CMasterSlaveAddrSet_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000A209:
	branch Z l0000A20D
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000A209_1:
	r4 = r2 & 0x8000003A
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000A20D:
	branch N l0000A20D_thunk_I2CMasterBusy
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r4:r2 & 0x8000003A

l0000A20D_thunk_I2CMasterBusy:
	I2CMasterBusy(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r2 & 0x8000003A
// Terminates process

l0000A20D_1:
	word32 r7_10 = r7 - __rcr(r0, 1, C)
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r4:r2 & 0x8000003A

l0000A20D_thunk_I2CMasterBusy:
	I2CMasterBusy(r0, r1, r2, r3, r4, r5, r6, r7_10, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r2 & 0x8000003A r7:<invalid>
// Terminates process

I2CMasterSlaveAddrSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CMasterBusy(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CMasterBusy_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000A211:
	branch Z l0000A215
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000A211_1:
	r0 = ~__rcr(r8, 1, C)
	N = cond(r0) (alias)
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000A215:
	branch N l0000A215_thunk_I2CMasterBusBusy
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid>

l0000A215_thunk_I2CMasterBusBusy:
	I2CMasterBusBusy(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>
// Terminates process

l0000A215_1:
	word32 r7_14 = r7 - r0
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp r0:<invalid>

l0000A215_thunk_I2CMasterBusBusy:
	I2CMasterBusBusy(r0, r1, r2, r3, r4, r5, r6, r7_14, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r7:<invalid>
// Terminates process

I2CMasterBusy_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CMasterBusBusy(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZC ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CMasterBusBusy_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000A219:
	branch ZC l0000A21D
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NC
// SymbolicIn: sp:fp

l0000A219_1:
	ip = __rcr(r8, 1, C) - r3 - C
	N = cond(ip) (alias)
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): N
// SymbolicIn: sp:fp

l0000A21D:
	branch N l0000A21D_thunk_I2CMasterControl
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): N
// SymbolicIn: sp:fp ip:<invalid>

l0000A21D_thunk_I2CMasterControl:
	I2CMasterControl(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:<invalid>
// Terminates process

I2CMasterBusBusy_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A21D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ip:<invalid>



void I2CMasterControl(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  N ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CMasterControl_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A221:
	branch N l0000A221_thunk_I2CMasterErr
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A221_thunk_I2CMasterErr:
	I2CMasterErr(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l0000A221_1:
	word32 r7_5 = DPB(r7, 0x7060, 16)
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A221_thunk_I2CMasterErr:
	I2CMasterErr(r0, r1, r2, r3, r4, r5, r6, r7_5, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:DPB(r7, 0x7060, 16)
// Terminates process

I2CMasterControl_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CMasterErr(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZCV ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CMasterErr_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A225:
	branch Z l0000A229
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A225_1:
	Mem50[r7 - 2664:word32] = fp
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A229:
	branch Z l0000A22D
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A229_1:
	r1 = 0x50000003 - r0 - C
	byte NZCV_44 = cond(r1)
	Z = NZCV_44 (alias)
	V = NZCV_44 (alias)
	ZC = NZCV_44 (alias)
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A22D:
	branch Z l0000A231
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid>

l0000A22D_1:
	r0 = r0 & ~0x00000000
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid>

l0000A231:
	branch V l0000A235
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZCV
// SymbolicIn: sp:fp r1:<invalid> r0:r0 & ~0x00000000

l0000A235:
	branch V l0000A239
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r0:r0 & ~0x00000000

l0000A235_1:
	r0 = r0 ^ r7 >> 32
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r0:r0 & ~0x00000000

l0000A239:
	branch ZC l0000A239_thunk_I2CMasterDataPut
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l0000A239_thunk_I2CMasterDataPut:
	I2CMasterDataPut(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>
// Terminates process

l0000A239_1:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid>

l0000A239_thunk_I2CMasterDataPut:
	I2CMasterDataPut(r7 >> 32, r1, r2, r3, r4, r5, r6, r7, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:r7 >> 32
// Terminates process

I2CMasterErr_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A231_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:r0 & ~0x00000000



void I2CMasterDataPut(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CMasterDataPut_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000A23D:
	branch ZC l0000A23D_thunk_I2CMasterDataGet
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NC
// SymbolicIn: sp:fp

l0000A23D_thunk_I2CMasterDataGet:
	I2CMasterDataGet(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l0000A23D_1:
	word32 r7_7 = r7 - __rcr(r0, 1, C)
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NC
// SymbolicIn: sp:fp

l0000A23D_thunk_I2CMasterDataGet:
	I2CMasterDataGet(r0, r1, r2, r3, r4, r5, r6, r7_7, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:<invalid>
// Terminates process

I2CMasterDataPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CMasterDataGet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NC ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CMasterDataGet_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZC
// SymbolicIn: sp:fp

l0000A241:
	branch N l0000A241_thunk_I2CSlaveStatus
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l0000A241_thunk_I2CSlaveStatus:
	I2CSlaveStatus(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l0000A241_1:
	word32 r7_7 = r7 - __rcr(r8, 1, C)
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l0000A241_thunk_I2CSlaveStatus:
	I2CSlaveStatus(r0, r1, r2, r3, r4, r5, r6, r7_7, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:<invalid>
// Terminates process

I2CMasterDataGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CSlaveStatus(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CSlaveStatus_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l0000A245:
	branch ZC l0000A245_thunk_I2CSlaveDataPut
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l0000A245_thunk_I2CSlaveDataPut:
	I2CSlaveDataPut(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

I2CSlaveStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A245_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CSlaveDataPut(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ZC ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CSlaveDataPut_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A249:
	branch ZC l0000A249_thunk_I2CSlaveDataGet
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A249_thunk_I2CSlaveDataGet:
	I2CSlaveDataGet(r0, r1, r2, r3, r4, r5, r6, r7, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l0000A249_1:
	word32 r7_7 = r7 - __rcr(r0, 1, C)
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A249_thunk_I2CSlaveDataGet:
	I2CSlaveDataGet(r0, r1, r2, r3, r4, r5, r6, r7_7, r8, r10, ip, lr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:<invalid>
// Terminates process

I2CSlaveDataPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CSlaveDataGet(word32 r0, word32 r1, word32 r2, word32 r3, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r10, word32 ip, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
I2CSlaveDataGet_entry:
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A24D:
	branch N l0000A251
// DataOut: ip lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A24D_1:
	Mem86[r7:word32] = r3
	Mem87[r7 + 4:word32] = r5
	Mem88[r7 + 8:word32] = r6
	Mem89[r7 + 12:word32] = ip
	Mem90[r7 + 16:word32] = fp
	Mem91[r7 + 20:word32] = lr
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A251:
	branch V l0000A255
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A251_1:
	__syscall(0x006C6C65)
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A255:
	branch N l0000A259
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A255_1:
	r0 = 0x00000000
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A259:
	branch V l0000A25D
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000
// LocalsOut: fp(32)

l0000A259_1:
	word32 sp_66
	word32 r3_69
	word32 ip_72
	call fn018E3801 (retsize: 0;)
		uses: C,ip,lr,N,NZV,r0_5,r1,r10,r2,r3,r4,r5,r6,r7,r8,sp_1,V,Z,ZC
		defs: C_84,ip_72,lr_73,N_67,NZV_83,r0_75,r1_78,r10_80,r2_76,r3_69,r4_79,r5_70,r6_71,r7_68,r8_77,sp_66,V_74,Z_81,ZC_82
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000
// LocalsOut: fp(32)

l0000A25D:
	branch N l0000A261
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000
// LocalsOut: fp(32)

l0000A25D_1:
	r0 = 0x00000000
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000
// LocalsOut: fp(32)

l0000A261:
	branch V l0000A265
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000
// LocalsOut: fp(32)

l0000A261_1:
	Mem63[lr:byte] = (byte) r6
	lr = lr - 2418
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000
// LocalsOut: fp(32)

l0000A265:
	branch N l0000A269
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418
// LocalsOut: fp(32)

l0000A265_1:
	r0 = 0x00000000
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418
// LocalsOut: fp(32)

l0000A269:
	branch V l0000A26D
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418
// LocalsOut: fp(32)

l0000A26D:
	branch V l0000A271
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418
// LocalsOut: fp(32)

l0000A26D_1:
	__syscall(0x006E2064)
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418
// LocalsOut: fp(32)

l0000A271:
	branch V l0000A275
// DataOut: lr r0 r1 r10 r2 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418
// LocalsOut: fp(32)

l0000A271_1:
	word32 r2_60 = r2 - 116
	Mem61[r2_60:byte] = (byte) r2_60
// DataOut: lr r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418
// LocalsOut: fp(32)

l0000A275:
	branch V l0000A279
// DataOut: lr r0 r1 r10 r4 r5 r6 r7 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418 r2:r2 - 116
// LocalsOut: fp(32)

l0000A275_1:
	r8 = r8 - 1056
	Mem59[r8:byte] = (byte) r7
// DataOut: lr r0 r1 r10 r4 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418 r2:r2 - 116
// LocalsOut: fp(32)

l0000A279:
	branch N l0000A27D
// DataOut: lr r0 r1 r10 r4 r5 r6 r8
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418 r2:r2 - 116 r8:r8 - 1056
// LocalsOut: fp(32)

l0000A279_1:
	Mem50[-32:word32] = r1
	Mem51[-28:word32] = r4
	Mem52[-24:word32] = r5
	Mem53[-20:word32] = r6
	Mem54[-16:word32] = r8
	Mem55[-12:word32] = r10
	Mem56[-8:word32] = fp
	Mem57[-4:word32] = lr
// DataOut: r0 r1 r4 r5
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418 r2:r2 - 116 r8:r8 - 1056

l0000A27D:
	branch Z l0000A281
// DataOut: r0 r1 r4 r5
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418 r2:r2 - 116 r8:r8 - 1056

l0000A27D_1:
// DataOut: r0 r1
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418 r2:r2 - 116 r8:r8 - 1056

l0000A281:
	branch ZC l0000A285
// DataOut: r0 r1
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418 r2:r2 - 116 r8:r8 - 1056 r4:r5 - (r4 >> 24)

l0000A281_1:
	Mem47[0x00000000:word32] = 0x00000000
	r0 = 0x00000000
// DataOut: r0 r1
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418 r2:r2 - 116 r8:r8 - 1056 r4:r5 - (r4 >> 24)

l0000A285:
	branch NZV l0000A289
// DataOut: r0 r1
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418 r2:r2 - 116 r8:r8 - 1056 r4:r5 - (r4 >> 24)

l0000A289:
	fn0000A291(r0, r1)
	branch C l0000A28D_thunk_fn0000A291
// DataOut: r0 r1
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418 r2:r2 - 116 r8:r8 - 1056 r4:r5 - (r4 >> 24)

l0000A28D_thunk_fn0000A291:
	fn0000A291(r0, r1)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn:
// Terminates process

I2CSlaveDataGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l0000A28D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

l0000A285_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418 r2:r2 - 116 r8:r8 - 1056 r4:r5 - (r4 >> 24)

l0000A269_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000000 lr:lr - 2418



void fn0000A291(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV r0 r1
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000A291_exit:
// DataOut:
// DataOut (flags): NZCV
// SymbolicIn:

fn0000A291_entry:
// DataOut: r0 r1
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A291:
	branch N l0000A295
// DataOut: r0 r1
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A295:
	branch ZC l0000A299
// DataOut: r0 r1
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A295_1:
// DataOut: r0
// DataOut (flags): ZCV
// SymbolicIn: sp:fp

l0000A299:
	branch NZV l0000A29D
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 & r1

l0000A299_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:r0 & r1

l0000A29D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l0000A291_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void memcpy(word32 r0, word32 r1, word32 r3, word32 r4, word32 r5, word32 r8, word32 r9, word32 r10, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  NZCV lr r0 r1 r10 r3 r4 r5 r8 r9
// LiveOut:
// Trashed: r0 r1 r10 r2 r3 r4 r5 r8 r9
// Preserved: lr sp
memcpy_entry:
// DataOut: lr r0 r1 r10 r3 r4 r5 r8 r9
// DataOut (flags): NZCV
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A5C5:
	word32 sp_1 = fp
	branch Z l0000A5C9
// DataOut: lr r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A5C5_1:
	__syscall(0x000005B5)
// DataOut: lr r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A5C9:
	branch Z l0000A5CD
// DataOut: lr r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A5C9_1:
	word32 r4_179
	word32 r2_185
	word32 r10_186
	byte NZCV_188
	word32 pc_189
	byte NZC_191
	call fnFF656279 (retsize: 0;)
		uses: C,lr,NV,NZC,NZCV,NZV,NZV,pc,r0,r1,r10,r2,r3,r4,r5,r8,r9,sp_1,V,Z,ZC
		defs: C_177,lr_178,NV_183,NZC_191,NZCV_188,NZV_187,NZV_190,pc_189,r0_176,r1_175,r10_186,r2_185,r3_174,r4_179,r5_184,r8_182,r9_180,sp_171,V_181,Z_172,ZC_173
// DataOut: lr r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A5CD:
	branch ZC l0000A5D1
// DataOut: lr r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A5CD_1:
	word32 r4_158
	word32 r2_164
	word32 r10_165
	byte NZCV_167
	word32 pc_168
	byte NZC_170
	call fn010CB1D5 (retsize: 0;)
		uses: C_29,lr_27,NV_30,NZC_28,NZCV_36,NZV_33,NZV_34,pc_26,r0_35,r1_37,r10_42,r2_38,r3_24,r4_39,r5_40,r8_41,r9_23,sp_22,V_25,Z_31,ZC_32
		defs: C_156,lr_157,NV_162,NZC_170,NZCV_167,NZV_166,NZV_169,pc_168,r0_155,r1_154,r10_165,r2_164,r3_153,r4_158,r5_163,r8_161,r9_159,sp_150,V_160,Z_151,ZC_152
// DataOut: lr r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A5D1:
	branch Z l0000A5D5
// DataOut: lr r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A5D1_1:
	r3 = (word32) Mem0[r1:byte]
// DataOut: lr r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp

l0000A5D5:
	word32 r1_145 = r1
	branch Z l0000A5D9
// DataOut: lr r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r1 r3:<invalid>

l0000A5D5_1:
	r0 = 0x00000C00
// DataOut: lr r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r1 r3:<invalid>

l0000A5D9:
	branch C l0000A5DD
// DataOut: lr r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r1 r3:<invalid> r0:0x00000C00

l0000A5D9_1:
	r1_145 = Mem0[lr:word32]
// DataOut: r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:r1 r3:<invalid> r0:0x00000C00

l0000A5DD:
	branch C l0000A5E1
// DataOut: r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:0x00000C00 lr:lr

l0000A5E1:
	branch C l0000A5E5
// DataOut: r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:0x00000C00 lr:lr

l0000A5E1_1:
// DataOut: r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:0x00000C00 lr:lr

l0000A5E5:
	branch V l0000A5E9
// DataOut: r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:0x00000C00 lr:lr r4:<invalid>

l0000A5E5_1:
	r0 = 0x00000C00 - __ror(r8, 30)
	Mem141[r0:byte] = (byte) r1_145
// DataOut: r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:0x00000C00 lr:lr r4:<invalid>

l0000A5E9:
	branch NV l0000A5ED
// DataOut: r0 r1 r10 r3 r4 r5 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid>

l0000A5E9_1:
	r0 = r0 - __ror(r8, 30)
	Mem139[r0:byte] = (byte) r5
// DataOut: r0 r1 r10 r3 r4 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid>

l0000A5ED:
	word32 r0_72 = r0 - __ror(r8, 30)
	Mem73[r0_72:byte] = (byte) r9
	branch Z l0000A5F5
// DataOut: r0 r1 r10 r3 r4 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid>

l0000A5F1_1:
	sp_1 = __ror(r8, 30) - r0_72
// DataOut: r0 r1 r10 r3 r4 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid>

l0000A5F5:
	branch ZC l0000A5F9
// DataOut: r0 r1 r10 r3 r4 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid>

l0000A5F9:
	branch Z l0000A5FD
// DataOut: r0 r1 r10 r3 r4 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid>

l0000A5F9_1:
	__syscall(0x00D1F342)
// DataOut: r0 r1 r10 r3 r4 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid>

l0000A5FD:
	branch Z l0000A601
// DataOut: r0 r1 r10 r3 r4 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid>

l0000A5FD_1:
// DataOut: r0 r1 r10 r3 r4 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid>

l0000A601:
	branch ZC l0000A605
// DataOut: r0 r1 r10 r3 r4 r8 r9 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid>

l0000A605:
	branch Z l0000A609
// DataOut: r0 r1 r10 r3 r4 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid>

l0000A605_1:
// DataOut: r0 r1 r10 r3 r4 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid>

l0000A609:
	branch Z l0000A60D
// DataOut: r0 r1 r10 r3 r4 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid>

l0000A60D:
	branch NZV l0000A611
// DataOut: r0 r1 r10 r3 r4 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid>

l0000A60D_1:
	Mem133[r3:word32] = r0_72
	r3 = r3 - 31
// DataOut: r0 r1 r10 r3 r4 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid>

l0000A611:
	branch NV l0000A615
// DataOut: r0 r1 r10 r3 r4 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid>

l0000A611_1:
// DataOut: r0 r1 r10 r3 r8 sp
// DataOut (flags): NZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid>

l0000A615:
	__syscall(0x0058CF00)
	branch NV l0000A61D
// DataOut: r0 r1 r10 r3 r8 sp
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid>

l0000A619_1:
	byte NZCV_121 = cond(r3 ^ 0x50000000)
	C = NZCV_121 (alias)
	Z = NZCV_121 (alias)
	NZV = NZCV_121 (alias)
// DataOut: r0 r1 r10 r8 sp
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid>

l0000A61D:
	branch Z l0000A621
// DataOut: r0 r1 r10 r8 sp
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid>

l0000A61D_1:
// DataOut: r0 r10 r8 sp
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid>

l0000A621:
	branch C l0000A625
// DataOut: r0 r10 r8 sp
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid> pc:<invalid>

l0000A621_1:
// DataOut: r0 r10 r8 sp
// DataOut (flags): ZCV
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid> pc:<invalid>

l0000A625:
	branch NZV l0000A629
// DataOut: r0 r10 r8 sp
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid> pc:<invalid> r10:DPB(r10, 0x3624, 16)

l0000A629:
	branch Z l0000A62D
// DataOut: r0 r10 r8 sp
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid> pc:<invalid> r10:DPB(r10, 0x3624, 16)

l0000A629_1:
	Z = cond(r8 & r8 << sp_1) (alias)
// DataOut: r0 r10
// DataOut (flags): ZC
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid> pc:<invalid> r10:DPB(r10, 0x3624, 16)

l0000A62D:
	branch Z l0000A631
// DataOut: r0 r10
// DataOut (flags): C
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:<invalid> r4:<invalid> r9:<invalid> pc:<invalid> r10:DPB(r10, 0x3624, 16)

l0000A62D_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:<invalid> r4:<invalid> r9:<invalid> pc:<invalid> r10:DPB(r10, 0x3624, 16)

l0000A631:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:<invalid> r4:<invalid> r9:<invalid> pc:<invalid> r10:DPB(r10, 0x3624, 16)

l0000A625_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid> pc:<invalid> r10:DPB(r10, 0x3624, 16)

l0000A609_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid>

l0000A601_1:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid>

memcpy_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid> r9:<invalid> r2:<invalid> r5:<invalid> r8:<invalid> r10:<invalid>

l0000A5F5_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> r1:<invalid> r3:<invalid> r0:<invalid> lr:lr r4:<invalid>

l0000A5DD_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r3:<invalid> r0:0x00000C00 lr:lr



